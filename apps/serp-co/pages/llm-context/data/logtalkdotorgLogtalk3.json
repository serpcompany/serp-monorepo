[
  {
    "owner": "logtalkdotorg",
    "repo": "logtalk3",
    "content": "TITLE: Defining a Basic Self-Contained Object in Logtalk\nDESCRIPTION: The simplest object definition in Logtalk, which is self-contained and doesn't depend on other entities. Object code is encapsulated between object/1 and end_object/0 directives.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/userman/objects.rst#2025-04-06_snippet_0\n\nLANGUAGE: logtalk\nCODE:\n```\n:- object(Object).\n    ...\n:- end_object.\n```\n\n----------------------------------------\n\nTITLE: Directory Entity Dynamic Predicate Declaration\nDESCRIPTION: Defines a dynamic predicate that maintains a table of documented entities per directory. Takes directory path, primary and secondary sort keys, and entity as arguments.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/lgtdoc_0.rst.txt#2025-04-06_snippet_1\n\nLANGUAGE: logtalk\nCODE:\n```\ndirectory_entity_(Directory,PrimarySortKey,SecondarySortKey,Entity)\n```\n\n----------------------------------------\n\nTITLE: Defining Parametric Object Proxies in Logtalk\nDESCRIPTION: Shows how to define proxies for parametric objects using Prolog facts. These proxies represent different instantiations of a parametric object identifier.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/userman/objects.rst.txt#2025-04-06_snippet_13\n\nLANGUAGE: logtalk\nCODE:\n```\n:- object(circle(_Id_, _Radius_, _Color_)).\n\n    :- public(area/1).\n    ...\n\n:- end_object.\n\n% parametric object proxies:\ncircle('#1', 1.23, blue).\ncircle('#2', 3.71, yellow).\ncircle('#3', 0.39, green).\ncircle('#4', 5.74, black).\ncircle('#5', 8.32, cyan).\n```\n\n----------------------------------------\n\nTITLE: Using Apply/2 Meta-predicate in Logtalk\nDESCRIPTION: Shows different ways of using the apply/2 meta-predicate in Logtalk, including direct calls and message sending.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/metapredicates/NOTES.md#2025-04-06_snippet_4\n\nLANGUAGE: logtalk\nCODE:\n```\nmetapreds::test_this.\n```\n\nLANGUAGE: logtalk\nCODE:\n```\ndescendant::test_self.\n```\n\nLANGUAGE: logtalk\nCODE:\n```\ntest::test_obj.\n```\n\n----------------------------------------\n\nTITLE: Solving Eight Puzzle with Best-First Search in Logtalk\nDESCRIPTION: Initializes the performance monitor, solves an eight puzzle problem using best-first search with a depth limit of 25, and displays the solution path along with performance metrics.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/searching/NOTES.md#2025-04-06_snippet_12\n\nLANGUAGE: logtalk\nCODE:\n```\nperformance::init, eight_puzzle::initial_state(five_steps, Initial), best_first(25)::solve(eight_puzzle, Initial, Path, Cost), eight_puzzle::print_path(Path), performance::report.\n```\n\n----------------------------------------\n\nTITLE: Starting Computer Using Facade with Specified Components\nDESCRIPTION: This snippet demonstrates using the simplified interface provided by the facade to start the computer with specified CPU, memory, and SSD components.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/design_patterns/structural/facade/NOTES.md#2025-04-06_snippet_2\n\nLANGUAGE: logtalk\nCODE:\n```\ncomputer_facade(cpu, memory, ssd)::start.\n```\n\n----------------------------------------\n\nTITLE: Creating a Dynamic Object with Included File in Logtalk\nDESCRIPTION: Shows how to create a dynamic object that includes a file using the create_object/4 predicate and the include/1 directive.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/userman/objects.rst.txt#2025-04-06_snippet_21\n\nLANGUAGE: prolog\nCODE:\n```\n| ?- create_object(cities, [], [public(city/4), include(dbs('cities.pl'))], []).\n```\n\n----------------------------------------\n\nTITLE: Defining Abstract Class in Logtalk\nDESCRIPTION: Definition of the abstract_class that specializes object and serves as the default meta-class for abstract classes. Contains predicates common to all classes.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/tutorial/reflection.rst.txt#2025-04-06_snippet_1\n\nLANGUAGE: logtalk\nCODE:\n```\n:- object(abstract_class,\n    instantiates(class),\n    specializes(object)).\n\n    % predicates common to all classes\n\n:- end_object.\n```\n\n----------------------------------------\n\nTITLE: Defining a List Utility Object in Logtalk\nDESCRIPTION: Implementation of a simple list utility object containing common list manipulation predicates like append/3 and member/2. Shows the basic structure of object definitions with public predicates.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/userman/predicates.rst.txt#2025-04-06_snippet_23\n\nLANGUAGE: logtalk\nCODE:\n```\n:- object(list).\n\n    :- public(append/3).\n    append([], L, L).\n    append([H| T], L, [H| T2]) :-\n        append(T, L, T2).\n\n    :- public(member/2).\n    member(H, [H| _]).\n    member(H, [_| T]) :-\n        member(H, T).\n\n:- end_object.\n```\n\n----------------------------------------\n\nTITLE: Example of info/2 directive for predicate documentation in Logtalk\nDESCRIPTION: A concrete example of using the info/2 directive to document a color/1 predicate with comment, argument names, constraint information, and usage examples.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/userman/documenting.rst.txt#2025-04-06_snippet_3\n\nLANGUAGE: logtalk\nCODE:\n```\n:- info(color/1, [\n    comment is 'Table of defined colors.',\n    argnames is ['Color'],\n    constraint is 'Up to four visible colors allowed.',\n    examples is [\n       'Check that the color blue is defined' - color(blue) - {true}\n    ]\n]).\n```\n\n----------------------------------------\n\nTITLE: Test Goal Result Checking in Logtalk\nDESCRIPTION: Examples of different ways to check test results using deterministic/1, assertion/1-2, and direct checking.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/devtools/lgtunit.rst.txt#2025-04-06_snippet_13\n\nLANGUAGE: logtalk\nCODE:\n```\ntest(compare_3_order_less, deterministic(Order == (<))) :-\n    compare(Order, 1, 2).\n\ntest(compare_3_order_less) :-\n    compare(Order, 1, 2),\n    ^^assertion(Order == (<)).\n\nsucceeds(compare_3_order_less) :-\n    compare(Order, 1, 2),\n    Order == (<).\n```\n\n----------------------------------------\n\nTITLE: Definite Clause Grammar (DCG) Rules in Logtalk Objects\nDESCRIPTION: Defines a set of DCG rules for parsing simple arithmetic expressions within a Logtalk object.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/userman/predicates.rst.txt#2025-04-06_snippet_36\n\nLANGUAGE: logtalk\nCODE:\n```\n:- object(calculator).\n\n    :- public(parse/2).\n\n    parse(Expression, Value) :-\n        phrase(expr(Value), Expression).\n\n    expr(Z) --> term(X), \"+\", expr(Y), {Z is X + Y}.\n    expr(Z) --> term(X), \"-\", expr(Y), {Z is X - Y}.\n    expr(X) --> term(X).\n\n    term(Z) --> number(X), \"*\", term(Y), {Z is X * Y}.\n    term(Z) --> number(X), \"/\", term(Y), {Z is X / Y}.\n    term(Z) --> number(Z).\n\n    number(C) --> \"+\", number(C).\n    number(C) --> \"-\", number(X), {C is -X}.\n    number(X) --> [C], {0'0 =< C, C =< 0'9, X is C - 0'0}.\n\n:- end_object.\n```\n\n----------------------------------------\n\nTITLE: Testing Output Predicates in Logtalk\nDESCRIPTION: Shows how to test output predicates using set_text_output/1-2 and text_output_assertion/2-3 predicates. This example sets up an output stream, writes to it, and then checks if the output matches the expected content.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/tools/lgtunit/NOTES.md#2025-04-06_snippet_30\n\nLANGUAGE: Logtalk\nCODE:\n```\ntest(put_char_2_02, true(Assertion)) :-\n\t\t^^set_text_output(out, 'qwert'),\n\t\tput_char(out, y),\n\t\t^^text_output_assertion(out, 'qwerty', Assertion).\n```\n\n----------------------------------------\n\nTITLE: Running Parameterized Tests in Logtalk\nDESCRIPTION: These Logtalk queries demonstrate how to run parameterized tests for specific implementations or multiple implementations at once.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/tools/lgtunit/NOTES.md#2025-04-06_snippet_6\n\nLANGUAGE: Logtalk\nCODE:\n```\n| ?- tests(fast_random)::run.\n```\n\nLANGUAGE: Logtalk\nCODE:\n```\n| ?- lgtunit::run_test_sets([\n\t\ttests(backend_random),\n\t\ttests(fast_random),\n\t\ttests(random)\n     ]).\n```\n\n----------------------------------------\n\nTITLE: Starting Trace Mode in Logtalk\nDESCRIPTION: Demonstrates how to start the debugger in trace mode using the debugger's trace/0 predicate.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/userman/debugging.rst#2025-04-06_snippet_17\n\nLANGUAGE: text\nCODE:\n```\n| ?- debugger::trace.\n\nyes\n```\n\n----------------------------------------\n\nTITLE: Querying Public Predicates in Logtalk\nDESCRIPTION: Demonstrates how to find all visible user predicates that are declared public using the current_predicate/1 built-in method.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/userman/predicates.rst#2025-04-06_snippet_51\n\nLANGUAGE: text\nCODE:\n```\n| ?- some_object::current_predicate(Name/Arity).\n```\n\n----------------------------------------\n\nTITLE: Creating a Trace Event Handler in Logtalk\nDESCRIPTION: Example demonstrating how to define a trace event handler by implementing the logtalk::trace_event/2 multifile predicate. This approach is simpler than creating a full debug handler when only trace events need to be processed.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/userman/debugging.rst#2025-04-06_snippet_28\n\nLANGUAGE: prolog\nCODE:\n```\n:- multifile(logtalk::trace_event/2).\n:- dynamic(logtalk::trace_event/2).\n\n% the Logtalk runtime calls all defined logtalk::trace_event/2 hooks using\n% a failure-driven loop; thus we don't have to worry about handling all\n% events or failing after handling an event to give other hooks a chance\nlogtalk::trace_event(fact(Entity, Fact, N, _, _), _) :-\n    ...\nlogtalk::trace_event(rule(Entity, Head, N, _, _), _) :-\n    ...\n```\n\n----------------------------------------\n\nTITLE: Defining a Logtalk Prototype with Parent\nDESCRIPTION: Shows how to define a Logtalk prototype that extends another object (parent) using the extends directive.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/userman/objects.rst.txt#2025-04-06_snippet_4\n\nLANGUAGE: logtalk\nCODE:\n```\n:- object(Prototype,\n    extends(Parent)).\n    ...\n:- end_object.\n```\n\n----------------------------------------\n\nTITLE: Defining a List Object in Logtalk\nDESCRIPTION: Implementation of a 'list' object that contains common list utility predicates including append/3, length/2, and member/2. The object encapsulates the predicates and makes them publicly accessible.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/tutorial/lists.rst.txt#2025-04-06_snippet_0\n\nLANGUAGE: logtalk\nCODE:\n```\n:- object(list).\n\n    :- public([\n        append/3, length/2, member/2\n    ]).\n\n    append([], List, List).\n    append([Head| Tail], List, [Head| Tail2]) :-\n        append(Tail, List, Tail2).\n\n    length(List, Length) :-\n        length(List, 0, Length).\n\n    length([], Length, Length).\n    length([_| Tail], Acc, Length) :-\n        Acc2 is Acc + 1,\n        length(Tail, Acc2, Length).\n\n    member(Element, [Element| _]).\n    member(Element, [_| List]) :-\n        member(Element, List).\n\n:- end_object.\n```\n\n----------------------------------------\n\nTITLE: Finding Paths in a Graph with Local Operators\nDESCRIPTION: Queries for paths between nodes in a graph defined using local operators, demonstrating the practical use of locally defined predicates.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/operators/NOTES.md#2025-04-06_snippet_9\n\nLANGUAGE: logtalk\nCODE:\n```\n%%table\ngraph1::path(a, d, Path).\n```\n\n----------------------------------------\n\nTITLE: Dynamic Category Definition\nDESCRIPTION: Equivalent static definition of a category showing the structure with directives and predicates.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/userman/categories.rst#2025-04-06_snippet_10\n\nLANGUAGE: text\nCODE:\n```\n:- category(ccc,\n    implements(ppp)).\n\n    :- dynamic.\n\n    :- private(bar/1).\n\n    foo(X) :-\n        bar(X).\n\n    bar(1).\n    bar(2).\n\n:- end_category.\n```\n\n----------------------------------------\n\nTITLE: Implementing a Map Meta-Predicate with Closures in Logtalk\nDESCRIPTION: Implementation of a list mapping meta-predicate that applies a closure to each element of a list. The meta_predicate/1 directive specifies that the first argument is a closure that will be called with one additional argument.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/userman/predicates.rst.txt#2025-04-06_snippet_27\n\nLANGUAGE: logtalk\nCODE:\n```\n:- public(map/2).\n:- meta_predicate(map(1, *)).\n\nmap(_, []).\nmap(Closure, [Arg| Args]) :-\n    call(Closure, Arg),\n    map(Closure, Args).\n```\n\n----------------------------------------\n\nTITLE: Defining a Basic Protocol in Logtalk\nDESCRIPTION: Demonstrates how to define a simple, self-contained protocol using Logtalk directives.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/userman/protocols.rst.txt#2025-04-06_snippet_0\n\nLANGUAGE: logtalk\nCODE:\n```\n:- protocol(Protocol).\n    ...\n:- end_protocol.\n```\n\n----------------------------------------\n\nTITLE: Performing K-means clustering\nDESCRIPTION: Creates 4 clusters from a list of floating-point values using the clustering object. The parameters specify the data points, number of clusters (4), maximum iterations (10000), and a variable to store the resulting clusters.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/clustering/NOTES.md#2025-04-06_snippet_4\n\nLANGUAGE: logtalk\nCODE:\n```\nclustering::clusters([1.0,1.5,1.8,3.5,3.6,4.0,4.2], 4, 10000, Clusters).\n```\n\n----------------------------------------\n\nTITLE: Testing type::valid/2 with Fixed Type Parameter\nDESCRIPTION: Example showing how to use the {}/1 notation to pass fixed values for some parameters while generating random values for others.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/tools/lgtunit/NOTES.md#2025-04-06_snippet_23\n\nLANGUAGE: prolog\nCODE:\n```\n| ?- lgtunit::quick_check(type::valid({integer}, +integer)).\n```\n\n----------------------------------------\n\nTITLE: Direct Result Checking in Logtalk Unit Tests\nDESCRIPTION: Shows how to directly check test results in the test body with the succeeds/1 test dialect, though using assertions is generally preferable for better debugging.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/devtools/lgtunit.rst#2025-04-06_snippet_28\n\nLANGUAGE: logtalk\nCODE:\n```\n   succeeds(compare_3_order_less) :-\n       compare(Order, 1, 2),\n       Order == (<).\n```\n\n----------------------------------------\n\nTITLE: Executing Property-Based Tests with QuickCheck in Logtalk\nDESCRIPTION: This code demonstrates how to use forall/3 with type and arbitrary predicates to run property-based QuickCheck tests for all supported types in Logtalk.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/devtools/lgtunit.rst#2025-04-06_snippet_20\n\nLANGUAGE: logtalk\nCODE:\n```\n   | ?- forall(\n           (type::type(Type), ground(Type), type::arbitrary(Type)),\n           lgtunit::quick_check(type::valid({Type}, +Type))\n        ).\n```\n\n----------------------------------------\n\nTITLE: Defining Term and Goal Expansion Object in Logtalk\nDESCRIPTION: An example object implementing the expanding protocol with term_expansion/2 and goal_expansion/2 predicates to define source-to-source transformations.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/userman/expansion.rst#2025-04-06_snippet_0\n\nLANGUAGE: logtalk\nCODE:\n```\n:- object(an_object,\n    implements(expanding)).\n\n    term_expansion(ping, pong).\n    term_expansion(\n        colors,\n        [white, yellow, blue, green, read, black]\n    ).\n\n    goal_expansion(a, b).\n    goal_expansion(b, c).\n    goal_expansion(X is Expression, true) :-\n        catch(X is Expression, _, fail).\n\n:- end_object.\n```\n\n----------------------------------------\n\nTITLE: Meta-Predicate Examples\nDESCRIPTION: Provides practical examples of meta-predicate declarations for common predicates like findall/3, forall/2, and maplist/3, demonstrating different meta-argument specifications.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/refman/directives/meta_predicate_1.rst.txt#2025-04-06_snippet_2\n\nLANGUAGE: logtalk\nCODE:\n```\n% findall/3 second argument is interpreted as a goal:\n:- meta_predicate(findall(*, 0, *)).\n\n% both forall/2 arguments are interpreted as goals:\n:- meta_predicate(forall(0, 0)).\n\n% maplist/3 first argument is interpreted as a closure\n% that will be expanded to a goal by appending two\n% arguments:\n:- meta_predicate(maplist(2, *, *)).\n```\n\n----------------------------------------\n\nTITLE: Loading Multiple Logtalk Source Files\nDESCRIPTION: Example of how to compile and load multiple Logtalk source files using the logtalk_load/1 predicate.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/userman/programming.rst#2025-04-06_snippet_4\n\nLANGUAGE: text\nCODE:\n```\n| ?- logtalk_load([source_file1, source_file2, ...]).\n```\n\n----------------------------------------\n\nTITLE: Syntax of (@)/1 Control Construct in Logtalk\nDESCRIPTION: Defines the syntax for the (@)/1 control construct that calls a predicate definition in the current context (this). The argument must be a callable term known at compile-time.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/refman/control/call_in_this_1.rst.txt#2025-04-06_snippet_0\n\nLANGUAGE: logtalk\nCODE:\n```\n@Predicate\n```\n\n----------------------------------------\n\nTITLE: Optimized Map Meta-Predicate Implementation in Logtalk\nDESCRIPTION: An optimized implementation of the map meta-predicate that exchanges the argument order to take advantage of first-argument indexing. Shows how meta_predicate directives are required for both the main predicate and its auxiliary predicates.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/userman/predicates.rst.txt#2025-04-06_snippet_29\n\nLANGUAGE: logtalk\nCODE:\n```\n:- meta_predicate(map(1, *)).\nmap(Closure, List) :-\n    map_(List, Closure).\n\n:- meta_predicate(map_(*, 1)).\nmap_([], _).\nmap_([Head| Tail], Closure) :-\n    call(Closure, Head),\n    map_(Tail, Closure).\n```\n\n----------------------------------------\n\nTITLE: Using the json/3 object in Logtalk\nDESCRIPTION: The json/3 object provides JSON parsing and generation functionality with configurable representation options. It implements the json_protocol and uses the reader object. To load it, use logtalk_load(json(loader)).\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/json_3.rst.txt#2025-04-06_snippet_0\n\nLANGUAGE: logtalk\nCODE:\n```\njson(ObjectRepresentation,PairRepresentation,StringRepresentation)\n```\n\n----------------------------------------\n\nTITLE: Parameter Variables in Logtalk Objects\nDESCRIPTION: Example showing how to use parameter variables in Logtalk object definitions to define parameterized objects with a test predicate that writes the parameter value.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/userman/predicates.rst.txt#2025-04-06_snippet_45\n\nLANGUAGE: logtalk\nCODE:\n```\n:- object(block(_Color_)).\n\n    :- public(test/0).\n\n    test :-\n        write('Color parameter value is '),\n        writeq(_Color_), nl.\n\n:- end_object.\n```\n\n----------------------------------------\n\nTITLE: Using the info/1 directive for entity documentation in Logtalk\nDESCRIPTION: Pattern for the info/1 directive used to provide arbitrary user-defined information about an entity. Keys should be atoms and values should be bound terms, with several predefined keys available for standard documentation purposes.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/userman/documenting.rst.txt#2025-04-06_snippet_0\n\nLANGUAGE: logtalk\nCODE:\n```\n:- info([\n    Key1 is Value1,\n    Key2 is Value2,\n    ...\n]).\n```\n\n----------------------------------------\n\nTITLE: Declaring Predicate Mode in Logtalk\nDESCRIPTION: Example of using the mode/2 directive to declare the calling mode and determinism for a predicate (member/2) in Logtalk.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/userman/predicates.rst#2025-04-06_snippet_3\n\nLANGUAGE: logtalk\nCODE:\n```\n:- mode(member(?term, ?list), zero_or_more).\n```\n\n----------------------------------------\n\nTITLE: Solving SENDMORE Puzzle using Constraint Programming in Logtalk\nDESCRIPTION: Demonstrates two methods of solving the SENDMORE puzzle using constraint programming. Both methods return the same solution.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/constraints/eclipse/NOTES.md#2025-04-06_snippet_1\n\nLANGUAGE: logtalk\nCODE:\n```\npuzzle::sendmore1(Digits).\n```\n\nLANGUAGE: logtalk\nCODE:\n```\npuzzle::sendmore2(Digits).\n```\n\n----------------------------------------\n\nTITLE: Verbose Output with Pre-Conditions\nDESCRIPTION: Example showing verbose output for generated test cases, including both passed and discarded tests based on a pre-condition requiring integers greater than 5.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/tools/lgtunit/NOTES.md#2025-04-06_snippet_13\n\nLANGUAGE: prolog\nCODE:\n```\n| ?- lgtunit::quick_check(integer(+integer), [v(true), n(7), pc([I]>>(I>5))]).\n% Discarded: integer(0)\n% Passed:    integer(786)\n% Passed:    integer(590)\n% Passed:    integer(165)\n% Discarded: integer(-412)\n% Passed:    integer(440)\n% Discarded: integer(-199)\n% Passed:    integer(588)\n% Discarded: integer(-852)\n% Discarded: integer(-214)\n% Passed:    integer(196)\n% Passed:    integer(353)\n% 7 random tests passed, 5 discarded\n% starting seed: seed(23671,3853,29824)\nyes\n```\n\n----------------------------------------\n\nTITLE: Accessing Object Execution Context with Built-in Methods\nDESCRIPTION: Demonstrates the use of this/1, self/1, and sender/1 methods to access execution context information during message processing in Logtalk objects.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/userman/predicates.rst.txt#2025-04-06_snippet_43\n\nLANGUAGE: logtalk\nCODE:\n```\n:- object(test).\n\n    :- public(test/0).\n\n    test :-\n        this(This),\n        write('Calling predicate definition in '),\n        writeq(This), nl,\n        self(Self),\n        write('to answer a message received by '),\n        writeq(Self), nl,\n        sender(Sender),\n        write('that was sent by '),\n        writeq(Sender), nl, nl.\n\n:- end_object.\n\n\n:- object(descendant,\n    extends(test)).\n\n:- end_object.\n```\n\n----------------------------------------\n\nTITLE: Logtalk Make Integration Configuration\nDESCRIPTION: Example of integrating tests with the Logtalk make system using hook predicates\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/tools/lgtunit/NOTES.md#2025-04-06_snippet_2\n\nLANGUAGE: logtalk\nCODE:\n```\n:- multifile(logtalk_make_target_action/1).\n:- dynamic(logtalk_make_target_action/1).\n\nlogtalk_make_target_action(check) :-\n\ttests::run.\n```\n\n----------------------------------------\n\nTITLE: Using Lambda Expression with Map Meta-Predicate in Logtalk\nDESCRIPTION: Example of using a lambda expression as an argument to the map/3 meta-predicate in Logtalk. This demonstrates how lambda expressions can be used to avoid writing auxiliary predicates for meta-predicate calls.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/userman/predicates.rst#2025-04-06_snippet_37\n\nLANGUAGE: Logtalk\nCODE:\n```\n| ?- meta::map([X,Y]>>(Y is 2*X), [1,2,3], Ys).\nYs = [2,4,6]\nyes\n```\n\n----------------------------------------\n\nTITLE: Defining Logtalk Multifile Predicate Clauses\nDESCRIPTION: Example showing how to define clauses for multifile predicates across different Logtalk entities using the multifile/1 directive and entity qualification syntax.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/userman/migration.rst.txt#2025-04-06_snippet_0\n\nLANGUAGE: logtalk\nCODE:\n```\n:- multifile(Entity::Name/Arity).\n\nEntity::Functor(...) :-\n    ...\n```\n\n----------------------------------------\n\nTITLE: Farmer Problem with Depth-First Search\nDESCRIPTION: Solves the farmer-wolf-goat-cabbage river crossing puzzle using depth-first search\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/searching/NOTES.md#2025-04-06_snippet_4\n\nLANGUAGE: logtalk\nCODE:\n```\nfarmer::initial_state(Initial), depth_first(10)::solve(farmer, Initial, Path), farmer::print_path(Path).\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Types for QuickCheck Tests in Logtalk\nDESCRIPTION: Example of defining a custom 'bit' type for QuickCheck tests with type checking and arbitrary value generation.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/tools/lgtunit/NOTES.md#2025-04-06_snippet_25\n\nLANGUAGE: logtalk\nCODE:\n```\n:- multifile(type::type/1).\ntype::type(bit).\n\n:- multifile(type::check/2).\ntype::check(bit, Term) :-\n\tonce((Term == 0; Term == 1)).\n\n:- multifile(arbitrary::arbitrary/1).\narbitrary::arbitrary(bit).\n\n:- multifile(arbitrary::arbitrary/2).\narbitrary::arbitrary(bit, Arbitrary) :-\n\trandom::member(Arbitrary, [0, 1]).\n```\n\n----------------------------------------\n\nTITLE: Using Built-in Error Methods in Logtalk\nDESCRIPTION: Demonstrates the simpler approach to throwing errors using Logtalk's built-in error methods.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/userman/errors.rst#2025-04-06_snippet_3\n\nLANGUAGE: logtalk\nCODE:\n```\n...,\ntype_error(atom, 42).\n```\n\n----------------------------------------\n\nTITLE: Defining Basic Inheritance Relationship Between Objects in Logtalk\nDESCRIPTION: Demonstrates a basic inheritance relationship between two objects where the descendant object overrides the foo/1 predicate but inherits the bar/1 predicate from the root object.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/userman/inheritance.rst.txt#2025-04-06_snippet_0\n\nLANGUAGE: logtalk\nCODE:\n```\n:- object(root).\n\n    :- public(bar/1).\n    bar(root).\n\n    :- public(foo/1).\n    foo(root).\n\n:- end_object.\n\n\n:- object(descendant,\n    extends(root)).\n\n    foo(descendant).\n\n:- end_object.\n```\n\n----------------------------------------\n\nTITLE: Resolving Inheritance Conflicts with alias/2 in Logtalk\nDESCRIPTION: Demonstrates how to use the alias/2 directive to resolve conflicts when inheriting predicates with the same name and arity from multiple sources.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/userman/predicates.rst.txt#2025-04-06_snippet_19\n\nLANGUAGE: Logtalk\nCODE:\n```\n:- object(my_data_structure,\n    extends(list, set)).\n\n    :- alias(list, [member/2 as list_member/2]).\n    :- alias(set,  [member/2 as set_member/2]).\n\n    ...\n\n:- end_object.\n```\n\n----------------------------------------\n\nTITLE: Defining a Logtalk Object with Protocols and Categories\nDESCRIPTION: Demonstrates how to define a Logtalk object that both implements protocols and imports categories.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/userman/objects.rst.txt#2025-04-06_snippet_3\n\nLANGUAGE: logtalk\nCODE:\n```\n:- object(Object,\n    implements([Protocol1, Protocol2, ...]),\n    imports([Category1, Category2, ...])).\n    ...\n:- end_object.\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Types in Logtalk\nDESCRIPTION: Demonstrates how to define a custom type 'age' by adding clauses to the multifile predicates type::type/1 and type::check/2. This example creates a type for age values between 0 and 150.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/libraries/types.rst.txt#2025-04-06_snippet_6\n\nLANGUAGE: prolog\nCODE:\n```\n:- multifile(type::type/1).\ntype::type(age).\n\n:- multifile(type::check/2).\ntype::check(age, Term) :-\n    type::check(between(non_negative_integer, 0, 150), Term).\n```\n\n----------------------------------------\n\nTITLE: Testing All Ground Types with forall/2\nDESCRIPTION: Example showing how to test the type::valid/2 predicate with all ground types that have arbitrary value generators.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/tools/lgtunit/NOTES.md#2025-04-06_snippet_24\n\nLANGUAGE: prolog\nCODE:\n```\n| ?- forall(\n\t\t(type::type(Type), ground(Type), type::arbitrary(Type)),\n\t\tlgtunit::quick_check(type::valid({Type}, +Type))\n\t ).\n```\n\n----------------------------------------\n\nTITLE: Dynamic Assertion with Runtime Terms\nDESCRIPTION: Demonstrates techniques for asserting and retracting Prolog clauses when the predicate terms are only known at runtime, using both module qualification and the external call control construct.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/userman/predicates.rst#2025-04-06_snippet_71\n\nLANGUAGE: prolog\nCODE:\n```\n:- object(...).\n\n    add(X) :-\n        % assert clause X in module m\n        assertz(m:X),\n        ...\n\n    remove(Y) :-\n        % retract all clauses in user whose head unifies with Y\n        {retractall(Y)},\n        ...\n\n:- end_object.\n```\n\n----------------------------------------\n\nTITLE: Benchmarking Goals with benchmark/2 in Logtalk\nDESCRIPTION: Benchmarks a goal and returns the total execution time in seconds using CPU clock. Goals that may throw exceptions should be wrapped in catch/3.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/lgtunit_0.rst.txt#2025-04-06_snippet_15\n\nLANGUAGE: logtalk\nCODE:\n```\nbenchmark(Goal,Time)\n```\n\n----------------------------------------\n\nTITLE: Defining a Basic Logtalk Object\nDESCRIPTION: Demonstrates the basic syntax for defining a standalone Logtalk object using the object and end_object directives.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/userman/objects.rst.txt#2025-04-06_snippet_0\n\nLANGUAGE: logtalk\nCODE:\n```\n:- object(Object).\n    ...\n:- end_object.\n```\n\n----------------------------------------\n\nTITLE: Basic Logtalk File Loading\nDESCRIPTION: Examples of compiling and loading Logtalk source files using logtalk_compile/1 and logtalk_load/1 predicates.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/userman/programming.rst.txt#2025-04-06_snippet_4\n\nLANGUAGE: prolog\nCODE:\n```\n| ?- logtalk_compile([source_file1, source_file2, ...]).\n\n| ?- logtalk_load([source_file1, source_file2, ...]).\n```\n\n----------------------------------------\n\nTITLE: Running Logtalk Tests with Path Prefix Suppression\nDESCRIPTION: Shows how to run Logtalk tests using the logtalk_tester script with options to suppress the local path prefix in the coverage report.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/devtools/lgtunit.rst.txt#2025-04-06_snippet_52\n\nLANGUAGE: bash\nCODE:\n```\n$ logtalk_tester -c xml -s $HOME/logtalk/\n```\n\n----------------------------------------\n\nTITLE: Running Logtalk Tests with Path Prefix Suppression\nDESCRIPTION: Shows how to run Logtalk tests using the logtalk_tester script with options to suppress the local path prefix in the coverage report.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/devtools/lgtunit.rst.txt#2025-04-06_snippet_52\n\nLANGUAGE: bash\nCODE:\n```\n$ logtalk_tester -c xml -s $HOME/logtalk/\n```\n\n----------------------------------------\n\nTITLE: Defining the numberlist Object in Logtalk\nDESCRIPTION: This snippet defines the numberlist object in Logtalk, specifying its relationships with other objects and protocols. It implements the numberlistp protocol and extends the list object.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/numberlist_0.rst.txt#2025-04-06_snippet_0\n\nLANGUAGE: Logtalk\nCODE:\n```\nnumberlist\n```\n\n----------------------------------------\n\nTITLE: Defining an Object that Implements Protocols in Logtalk\nDESCRIPTION: Syntax for creating an object that implements one or more protocols, allowing the object to fulfill specific interfaces defined by those protocols.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/userman/objects.rst#2025-04-06_snippet_1\n\nLANGUAGE: logtalk\nCODE:\n```\n:- object(Object,\n    implements([Protocol1, Protocol2, ...])).\n    ...\n:- end_object.\n```\n\n----------------------------------------\n\nTITLE: Defining an Object that Implements Protocols in Logtalk\nDESCRIPTION: Syntax for creating an object that implements one or more protocols, allowing the object to fulfill specific interfaces defined by those protocols.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/userman/objects.rst#2025-04-06_snippet_1\n\nLANGUAGE: logtalk\nCODE:\n```\n:- object(Object,\n    implements([Protocol1, Protocol2, ...])).\n    ...\n:- end_object.\n```\n\n----------------------------------------\n\nTITLE: Contributing Clauses to Multifile Predicates\nDESCRIPTION: Example showing how to define additional clauses for a multifile predicate in a different object, using the notation Entity::Predicate to specify which multifile predicate is being extended.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/userman/predicates.rst#2025-04-06_snippet_27\n\nLANGUAGE: logtalk\nCODE:\n```\n:- object(other).\n\n    :- multifile(main::a/1).\n    main::a(2).\n    main::a(X) :-\n        b(X).\n\n    b(3).\n    b(4).\n\n:- end_object.\n```\n\n----------------------------------------\n\nTITLE: Using the Iterator to Process Collection Elements\nDESCRIPTION: Demonstrates the use of the iterator predicate element/1 with the forall/2 meta-predicate to process all elements in the book collection sequentially, printing each title on a new line.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/design_patterns/behavioral/iterator/NOTES.md#2025-04-06_snippet_3\n\nLANGUAGE: logtalk\nCODE:\n```\nforall(book_collection::element(Title), (write(Title), nl)).\n```\n\n----------------------------------------\n\nTITLE: Compiling Specific Files in Debug Mode in Logtalk\nDESCRIPTION: Compiles only specified source files in debug mode using the logtalk_load/2 predicate.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/userman/debugging.rst.txt#2025-04-06_snippet_2\n\nLANGUAGE: prolog\nCODE:\n```\n| ?- logtalk_load([file1, file2, ...], [debug(on)]).\n```\n\n----------------------------------------\n\nTITLE: Specializing Inherited Predicate Definitions with Super Calls in Logtalk\nDESCRIPTION: Shows how to specialize an inherited definition by using the super call operator (^^) to invoke the parent's implementation while adding additional functionality.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/userman/inheritance.rst.txt#2025-04-06_snippet_1\n\nLANGUAGE: logtalk\nCODE:\n```\n:- object(root).\n\n    :- public(init/0).\n\n    init :-\n        write('root init'), nl.\n\n:- end_object.\n\n\n:- object(descendant,\n    extends(root)).\n\n    init :-\n        write('descendant init'), nl,\n        ^^init.\n\n:- end_object.\n```\n\n----------------------------------------\n\nTITLE: Mode Templates for Stand-alone Objects in Logtalk\nDESCRIPTION: Template and mode declarations for stand-alone objects in Logtalk. These templates specify the expected types of arguments in the object directive for prototype objects.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/refman/directives/object_1_5.rst#2025-04-06_snippet_5\n\nLANGUAGE: logtalk\nCODE:\n```\nobject(+object_identifier)\n\nobject(+object_identifier,\n    implements(+implemented_protocols))\n\nobject(+object_identifier,\n    imports(+imported_categories))\n\nobject(+object_identifier,\n    implements(+implemented_protocols),\n    imports(+imported_categories))\n```\n\n----------------------------------------\n\nTITLE: Creating Nested Dictionary from Curly Bracketed Term\nDESCRIPTION: Shows how to create a nested dictionary from a curly bracketed term representation using as_nested_dictionary/2.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/libraries/nested_dictionaries.rst#2025-04-06_snippet_3\n\nLANGUAGE: logtalk\nCODE:\n```\n| ?- navltree::as_nested_dictionary(\n    {a-1, b-{c-3, d-{e-7,f-8}}},\n    Dictionary\n).\n\nDictionary = ...\nyes\n```\n\n----------------------------------------\n\nTITLE: Defining Shell Object in Logtalk\nDESCRIPTION: Defines the 'shell' object with its metadata, including availability, author, version, and compilation flags. It uses the 'shell(Interpreters)' object and declares two public predicates: welcome/0 and start/0.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/shell_0.rst.txt#2025-04-06_snippet_0\n\nLANGUAGE: Logtalk\nCODE:\n```\nshell\n=========\n\nUser frontend to start the application.\n\n| **Availability:** \n|    ``logtalk_load(verdi_neruda(loader))``\n\n| **Author:** Paulo Moura\n| **Version:** 1:0:0\n| **Date:** 2019-03-20\n\n| **Compilation flags:**\n|    ``static, context_switching_calls``\n\n\n| **Uses:**\n|    :ref:`shell(Interpreters) <shell/1>`\n\n| **Remarks:**\n|    (none)\n\n| **Inherited public predicates:**\n|    (none)\n\nPublic predicates\n-----------------\n\nwelcome/0\n^^^^^^^^^^^^^^\n\n| **Compilation flags:**\n|    ``static``\n\n\n------------\n\nstart/0\n^^^^^^^^^^^\n\n| **Compilation flags:**\n|    ``static``\n```\n\n----------------------------------------\n\nTITLE: Custom Type Definition for QuickCheck Testing\nDESCRIPTION: Example of defining a custom 'bit' type with values 0 and 1 for use in QuickCheck tests, including type checking and arbitrary value generation.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/devtools/lgtunit.rst.txt#2025-04-06_snippet_10\n\nLANGUAGE: logtalk\nCODE:\n```\n:- multifile(type::type/1).\ntype::type(bit).\n\n:- multifile(type::check/2).\ntype::check(bit, Term) :-\n    once((Term == 0; Term == 1)).\n\n:- multifile(arbitrary::arbitrary/1).\narbitrary::arbitrary(bit).\n\n:- multifile(arbitrary::arbitrary/2).\narbitrary::arbitrary(bit, Arbitrary) :-\n    random::member(Arbitrary, [0, 1]).\n```\n\n----------------------------------------\n\nTITLE: Mocking with Complementing Categories in Logtalk\nDESCRIPTION: Demonstrates how to use Logtalk's hot patching mechanism with a complementing category to override a login predicate with canned credentials.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/devtools/lgtunit.rst.txt#2025-04-06_snippet_32\n\nLANGUAGE: logtalk\nCODE:\n```\n:- category(mock_login,\n    complements(user_management)).\n\n    login(jdoe, test123).\n\n:- end_category.\n```\n\n----------------------------------------\n\nTITLE: Torpedo Puzzle Solver\nDESCRIPTION: Solves a specific torpedo puzzle instance (id113) and displays the solution as a grid.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/constraints/sicstus/NOTES.md#2025-04-06_snippet_9\n\nLANGUAGE: logtalk\nCODE:\n```\ntorpedo::torpedo(id113).\n```\n\n----------------------------------------\n\nTITLE: Declaring Public, Protected, and Private Predicates in Logtalk\nDESCRIPTION: Examples of using scope directives to declare predicates with different visibility levels in Logtalk. Public predicates can be called from any object, protected predicates from the container object or descendants, and private predicates only from the container object.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/userman/predicates.rst.txt#2025-04-06_snippet_0\n\nLANGUAGE: logtalk\nCODE:\n```\n:- public(init/1).\n\n:- protected(valid_init_option/1).\n\n:- private(process_init_options/1).\n```\n\n----------------------------------------\n\nTITLE: Type Error Usage Example\nDESCRIPTION: Example showing how to use type_error/2 to throw an error when a name argument is not an atom.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/refman/methods/type_error_2.rst#2025-04-06_snippet_2\n\nLANGUAGE: prolog\nCODE:\n```\n...,\n\\+ atom(Name),\ntype_error(atom, Name).\n```\n\n----------------------------------------\n\nTITLE: Implementing List Operations Object in Logtalk\nDESCRIPTION: Defines a Logtalk object containing common list predicates like append/3, length/2, and member/2. Shows basic object structure with public predicate declarations and implementations.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/tutorial/lists.rst#2025-04-06_snippet_0\n\nLANGUAGE: logtalk\nCODE:\n```\n:- object(list).\n\n    :- public([\n        append/3, length/2, member/2\n    ]).\n\n    append([], List, List).\n    append([Head| Tail], List, [Head| Tail2]) :-\n        append(Tail, List, Tail2).\n\n    length(List, Length) :-\n        length(List, 0, Length).\n\n    length([], Length, Length).\n    length([_| Tail], Acc, Length) :-\n        Acc2 is Acc + 1,\n        length(Tail, Acc2, Length).\n\n    member(Element, [Element| _]).\n    member(Element, [_| List]) :-\n        member(Element, List).\n\n:- end_object.\n```\n\n----------------------------------------\n\nTITLE: Defining Call_All Meta-Predicate in Logtalk\nDESCRIPTION: Example of defining a call_all/1 meta-predicate that calls a list of goals in Logtalk. This demonstrates how to declare and implement a meta-predicate with a list of goals argument.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/userman/predicates.rst#2025-04-06_snippet_35\n\nLANGUAGE: Logtalk\nCODE:\n```\n:- public(call_all/1).\n:- meta_predicate(call_all(::)).\n\ncall_all([]).\ncall_all([Goal| Goals]) :-\n    call(Goal),\n    call_all(Goals).\n```\n\n----------------------------------------\n\nTITLE: Using Lambda Expressions in DCG Rules with Logtalk\nDESCRIPTION: Demonstrates the use of lambda expressions in DCG rules using the lambdas object.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/dcgs/NOTES.md#2025-04-06_snippet_17\n\nLANGUAGE: logtalk\nCODE:\n```\nlogtalk << phrase(lambdas::aa(Duplicates), [a,b,c]).\n```\n\nLANGUAGE: logtalk\nCODE:\n```\nlogtalk << phrase(lambdas::aa([a,a,b,b,c,c]), Singletons).\n```\n\n----------------------------------------\n\nTITLE: Defining an Instance of a Class in Logtalk\nDESCRIPTION: Syntax for creating an object as an instance of a class, establishing an instantiation relationship in a class-based hierarchy.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/userman/objects.rst#2025-04-06_snippet_5\n\nLANGUAGE: logtalk\nCODE:\n```\n:- object(Object,\n    instantiates(Class)).\n    ...\n:- end_object.\n```\n\n----------------------------------------\n\nTITLE: Using Scoped Generators and Shrinkers in Logtalk\nDESCRIPTION: Sample queries demonstrating the use of scoped generators, validators, and shrinkers for custom types.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/libraries/arbitrary.rst#2025-04-06_snippet_11\n\nLANGUAGE: prolog\nCODE:\n```\n| ?- type::arbitrary(scoped::custom, Arbitrary).\nArbitrary = 0.5788130906607927\nyes\n\n| ?- type::valid(scoped::custom, foo).\nno\n\n| ?- type::check(scoped::custom, _).\nERROR: type_error(instantiation_error)\n\n| ?- type::check(scoped::custom, foo).\nERROR: type_error(scoped::custom, foo)\n\n| ?- type::shrink(scoped::custom, 0.42, Smaller).\nSmaller = 0.21\nyes\n```\n\n----------------------------------------\n\nTITLE: Assertion Check in Logtalk\nDESCRIPTION: Verifies if an assertion goal succeeds. Throws an error using the assertion goal as an argument if it fails or throws an error.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/lgtunit_0.rst.txt#2025-04-06_snippet_9\n\nLANGUAGE: Logtalk\nCODE:\n```\nassertion(Assertion)\n```\n\n----------------------------------------\n\nTITLE: Creating Predicate Shorthands with uses/2 Directive\nDESCRIPTION: Example of using predicate aliases to create shorthands with default parameters, simplifying code maintenance by centralizing parameter changes in a single location.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/userman/predicates.rst#2025-04-06_snippet_17\n\nLANGUAGE: logtalk\nCODE:\n```\n:- uses(pretty_printer, [\n    indent(4, Term) as indent(Term)\n]).\n```\n\n----------------------------------------\n\nTITLE: Basic Loader File Usage\nDESCRIPTION: Example of using loader files to load Logtalk applications from the terminal.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/userman/programming.rst.txt#2025-04-06_snippet_6\n\nLANGUAGE: prolog\nCODE:\n```\n| ?- {loader}.\n\n| ?- {tester}.\n```\n\n----------------------------------------\n\nTITLE: Union Inheritance Pattern in Logtalk\nDESCRIPTION: Demonstrates union of inherited and local predicate definitions using super calls.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/userman/inheritance.rst#2025-04-06_snippet_2\n\nLANGUAGE: logtalk\nCODE:\n```\n:- object(root).\n\n    :- public(foo/1).\n\n    foo(1).\n    foo(2).\n\n:- end_object.\n\n\n:- object(descendant,\n    extends(root)).\n\n    foo(3).\n    foo(Foo) :-\n        ^^foo(Foo).\n\n:- end_object.\n```\n\n----------------------------------------\n\nTITLE: Source File Flag Configuration\nDESCRIPTION: Example of setting compiler flags within a source file using the set_logtalk_flag/2 directive at both file and entity level.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/userman/programming.rst#2025-04-06_snippet_16\n\nLANGUAGE: logtalk\nCODE:\n```\n% compile objects in this source file with event support\n:- set_logtalk_flag(events, allow).\n\n:- object(foo).\n\n    % compile this object with support\n    % for dynamic predicate declarations\n    :- set_logtalk_flag(dynamic_declarations, allow).\n    ...\n\n:- end_object.\n\n...\n```\n\n----------------------------------------\n\nTITLE: Defining an Object that Implements Protocols and Imports Categories in Logtalk\nDESCRIPTION: Combined syntax for creating an object that both implements protocols and imports categories, showing how to use multiple relationships in a single object definition.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/userman/objects.rst#2025-04-06_snippet_3\n\nLANGUAGE: logtalk\nCODE:\n```\n:- object(Object,\n    implements([Protocol1, Protocol2, ...]),\n    imports([Category1, Category2, ...])).\n    ...\n:- end_object.\n```\n\n----------------------------------------\n\nTITLE: Usage Examples - logtalk_compile/1\nDESCRIPTION: Demonstrates practical usage examples of the logtalk_compile predicate for compiling single files and multiple files.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/refman/predicates/logtalk_compile_1.rst#2025-04-06_snippet_2\n\nLANGUAGE: logtalk\nCODE:\n```\n% compile to disk the \"set\" source file in the\n% current directory:\n| ?- logtalk_compile(set).\n\n% compile to disk the \"tree\" source file in the\n% \"types\" library directory:\n| ?- logtalk_load(types(tree)).\n\n% compile to disk the \"listp\" and \"list\" source\n% files in the current directory:\n| ?- logtalk_compile([listp, list]).\n```\n\n----------------------------------------\n\nTITLE: Implementing Kruskal's Algorithm using Union-Find in Logtalk\nDESCRIPTION: This code snippet defines a Logtalk object that implements Kruskal's algorithm for finding minimum spanning trees using the union-find data structure. It includes the main kruskal/2 predicate and helper predicates.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/library/union_find/NOTES.md#2025-04-06_snippet_2\n\nLANGUAGE: Logtalk\nCODE:\n```\n:- object(kruskal).\n\n\t:- public(kruskal/2).\n\n\t:- uses(union_find, [\n\t\tnew/2, find/4, union/4\n\t]).\n\n\tkruskal(g(Vertices-Edges), g(Vertices-Tree)) :-\n\t\tnew(Vertices, UnionFind),\n\t\tkeysort(Edges, Sorted),\n\t\tkruskal(UnionFind, Sorted, Tree).\n\n\tkruskal(_, [], []).\n\tkruskal(UnionFind0, [Edge| Edges], [Edge| Tree]) :-\n\t\tEdge = _-(Vertex1, Vertex2),\n\t\tfind(UnionFind0, Vertex1, Root1, UnionFind1),\n\t\tfind(UnionFind1, Vertex2, Root2, UnionFind2),\n\t\tRoot1 \\== Root2,\n\t\t!,\n\t\tunion(UnionFind2, Vertex1, Vertex2, UnionFind3),\n\t\tkruskal(UnionFind3, Edges, Tree).\n\tkruskal(UnionFind, [_| Edges], Tree) :-\n\t\tkruskal(UnionFind, Edges, Tree).\n\n:- end_object.\n```\n\n----------------------------------------\n\nTITLE: Non-deterministic Predicate Testing\nDESCRIPTION: Examples of testing non-deterministic predicates using all/1 and exists/1 outcomes.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/devtools/lgtunit.rst.txt#2025-04-06_snippet_16\n\nLANGUAGE: logtalk\nCODE:\n```\ntest(atom_list, all(atom(Item))) :-\n    member(Item, [a, b, c]).\n\ntest(at_least_one_atom, exists(atom(Item))) :-\n    member(Item, [1, foo(2), 3.14, abc, 42]).\n```\n\n----------------------------------------\n\nTITLE: Expressive Test Dialect with Outcomes in Logtalk\nDESCRIPTION: Shows an alternative test dialect with more expressive power, allowing specification of various test outcomes and assertions.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/devtools/lgtunit.rst#2025-04-06_snippet_11\n\nLANGUAGE: Logtalk\nCODE:\n```\ntest(Test, Outcome) :- Goal.\n```\n\n----------------------------------------\n\nTITLE: Type Error Usage Example\nDESCRIPTION: Example showing how to use type_error/2 to throw an error when a name argument is not an atom.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/refman/methods/type_error_2.rst#2025-04-06_snippet_2\n\nLANGUAGE: prolog\nCODE:\n```\n...,\n\\+ atom(Name),\ntype_error(atom, Name).\n```\n\n----------------------------------------\n\nTITLE: Creating Predicate Shorthands with uses/2 Directive\nDESCRIPTION: Example of using predicate aliases to create shorthands with default parameters, simplifying code maintenance by centralizing parameter changes in a single location.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/userman/predicates.rst#2025-04-06_snippet_17\n\nLANGUAGE: logtalk\nCODE:\n```\n:- uses(pretty_printer, [\n    indent(4, Term) as indent(Term)\n]).\n```\n\n----------------------------------------\n\nTITLE: Starting Port Profiling in Logtalk\nDESCRIPTION: Initiates the port profiling process. This should be called before executing the goals to be profiled.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/tools/ports_profiler/NOTES.md#2025-04-06_snippet_3\n\nLANGUAGE: Logtalk\nCODE:\n```\n| ?- ports_profiler::start.\n```\n\n----------------------------------------\n\nTITLE: Accessing Logtalk Compilation Context with logtalk_load_context/2 in Logtalk\nDESCRIPTION: This predicate provides access to the Logtalk compilation/loading context through various keys like entity_identifier, source, file, and more. It allows developers to access compilation metadata during term expansion or initialization.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/refman/predicates/logtalk_load_context_2.rst.txt#2025-04-06_snippet_0\n\nLANGUAGE: logtalk\nCODE:\n```\nlogtalk_load_context(Key, Value)\n```\n\n----------------------------------------\n\nTITLE: Basic Test Object Definition in Logtalk\nDESCRIPTION: Template for defining a test object that extends the lgtunit framework\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/tools/lgtunit/NOTES.md#2025-04-06_snippet_1\n\nLANGUAGE: logtalk\nCODE:\n```\n:- object(tests,\n\textends(lgtunit)).\n\n\t% test definitions\n\t...\n\n:- end_object.\n```\n\n----------------------------------------\n\nTITLE: Union Inheritance Pattern in Logtalk\nDESCRIPTION: Demonstrates union of inherited and local predicate definitions using super calls.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/userman/inheritance.rst#2025-04-06_snippet_2\n\nLANGUAGE: logtalk\nCODE:\n```\n:- object(root).\n\n    :- public(foo/1).\n\n    foo(1).\n    foo(2).\n\n:- end_object.\n\n\n:- object(descendant,\n    extends(root)).\n\n    foo(3).\n    foo(Foo) :-\n        ^^foo(Foo).\n\n:- end_object.\n```\n\n----------------------------------------\n\nTITLE: Implementing Options Management in Logtalk Object\nDESCRIPTION: Example implementation of an object using the options category, including default options, validation, and option handling. Shows pattern for importing options and implementing required predicates.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/libraries/options.rst.txt#2025-04-06_snippet_2\n\nLANGUAGE: logtalk\nCODE:\n```\n:- object(foo,\n    imports(options)).\n\n    :- uses(type, [\n        valid/2\n    ]).\n\n    :- public(p/0).\n    p :-\n        % use default options\n        p([]).\n\n    :- public(p/1).\n    p(UserOptions) :-\n        ^^check_options(UserOptions),\n        % construct the full set of options from\n        % the user options and the default options\n        ^^merge_options(UserOptions, Options),\n        ...\n        % query an option\n        ^^option(baz(Boolean), Options),\n        q(Boolean),\n        ...\n\n    default_option(baz(true)).\n    ...\n\n    valid_option(baz(Boolean)) :-\n        valid(boolean, Boolean).\n    ...\n\n:- end_object.\n```\n\n----------------------------------------\n\nTITLE: Local Predicate Testing with Context\nDESCRIPTION: Example of testing local predicates with proper context handling using assertion/1.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/devtools/lgtunit.rst.txt#2025-04-06_snippet_15\n\nLANGUAGE: logtalk\nCODE:\n```\n:- uses(lgtunit, [\n    assertion/1\n]).\n\ntest(my_test_id, true) :-\n    foo(X, Y),\n    assertion(consistent(X, Y)).\n\nconsistent(X, Y) :-\n    ...\n```\n\n----------------------------------------\n\nTITLE: Broken Object Definition in Logtalk\nDESCRIPTION: Example object definition used to demonstrate debugging techniques in Logtalk.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/userman/debugging.rst#2025-04-06_snippet_24\n\nLANGUAGE: logtalk\nCODE:\n```\n:- object(broken).\n\n    :- public(a/1).\n\n    a(A) :- b(A, B), c(B).\n    b(1, 2). b(2, 4). b(3, 6).\n    c(3).\n\n:- end_object.\n```\n\n----------------------------------------\n\nTITLE: Repeated Goal Benchmarking in Logtalk\nDESCRIPTION: Benchmarks a goal by repeating it a specified number of times and returning the total execution time in seconds. Uses CPU clock.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/lgtunit_0.rst.txt#2025-04-06_snippet_17\n\nLANGUAGE: logtalk\nCODE:\n```\nbenchmark(Goal,Repetitions,Time)\n```\n\n----------------------------------------\n\nTITLE: Converting a Float to Integer Using Threading State Pattern\nDESCRIPTION: Demonstrates the use of the Threading State pattern by converting a floating-point number (12.34) to an integer through a sequence of operations where state is implicitly threaded.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/design_patterns/logic/threading_state/NOTES.md#2025-04-06_snippet_2\n\nLANGUAGE: logtalk\nCODE:\n```\nstates::convert(12.34, Integer).\n```\n\n----------------------------------------\n\nTITLE: Entity Documentation Using info/1 Directive in Logtalk\nDESCRIPTION: Example of documenting an entity using the info/1 directive with common metadata like version, author, date and comments. The directive accepts a list of Key is Value pairs.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/userman/documenting.rst#2025-04-06_snippet_0\n\nLANGUAGE: logtalk\nCODE:\n```\n:- info([\n    version is 2:1:0,\n    author is 'Paulo Moura',\n    date is 2000-11-20,\n    comment is 'Building representation.',\n    diagram is 'UML Class Diagram #312'\n]).\n```\n\n----------------------------------------\n\nTITLE: Equivalent Source Definition of a Runtime-Created Protocol\nDESCRIPTION: Shows the source code equivalent to creating a protocol through the create_protocol/3 built-in predicate. The example includes protocol definition with extension relation and predicate declarations.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/userman/protocols.rst#2025-04-06_snippet_5\n\nLANGUAGE: logtalk\nCODE:\n```\n:- protocol(ppp,\n    extends(qqq)).\n\n    :- dynamic.\n\n    :- public([foo/1, bar/1]).\n\n:- end_protocol.\n```\n\n----------------------------------------\n\nTITLE: Concurrent Prime Number Calculation Using Threads in Logtalk\nDESCRIPTION: Demonstrates using the threaded/1 predicate to compute prime numbers in parallel by splitting the interval and spawning two threads.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/userman/threads.rst#2025-04-06_snippet_1\n\nLANGUAGE: Logtalk\nCODE:\n```\nprime_numbers(N, M, Primes) :-\n    M > N,\n    N1 is N + (M - N) // 2,\n    N2 is N1 + 1,\n    threaded((\n        prime_numbers(N2, M, [], Acc),\n        prime_numbers(N, N1, Acc, Primes)\n    )).\n\nprime_numbers(N, M, Acc, Primes) :-\n    ...\n```\n\n----------------------------------------\n\nTITLE: Zipper List Index Access Predicate\nDESCRIPTION: Predicate that creates a zipper at a specified index in a list and returns the element at that position. Takes a 1-based index, input list, and returns both the zipper and element. Fails for empty lists or invalid indices.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/zlist_0.rst.txt#2025-04-06_snippet_0\n\nLANGUAGE: logtalk\nCODE:\n```\nzip_at_index(Index,List,Zipper,Element)\n```\n\n----------------------------------------\n\nTITLE: Extending Categories in Logtalk\nDESCRIPTION: Shows the syntax for defining a category that extends one or more existing categories, inheriting their predicate declarations and definitions.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/userman/categories.rst.txt#2025-04-06_snippet_2\n\nLANGUAGE: logtalk\nCODE:\n```\n:- category(Category,\n    extends([Category1, Category2, ...])).\n    ...\n:- end_category.\n```\n\n----------------------------------------\n\nTITLE: Parsing JSON Objects with Different Representations in Logtalk\nDESCRIPTION: Examples of parsing JSON objects using different representations (curly, list, dash, equal, colon) in Logtalk.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/libraries/json.rst#2025-04-06_snippet_3\n\nLANGUAGE: Prolog\nCODE:\n```\n| ?- json(curly,dash,atom)::parse(atom('{\"a\":1, \"b\":2, \"c\":3}'), JSON).\nJSON = {a-1, b-2, c-3}\nyes\n\n| ?- json(list,equal,atom)::parse(atom('{\"a\":1, \"b\":2, \"c\":3}'), JSON).\nJSON = json([a=1, b=2, c=3])\nyes\n\n| ?- json(curly,colon,atom)::parse(atom('{\"a\":1, \"b\":2, \"c\":3}'), JSON).\nJSON = {a:1, b:2, c:3}\nyes\n```\n\n----------------------------------------\n\nTITLE: RPN Expression Evaluation\nDESCRIPTION: Evaluates a Reverse Polish Notation expression with variable bindings. The example evaluates 'a b + c a - -' with a=5, b=3, c=1.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/design_patterns/behavioral/interpreter/NOTES.md#2025-04-06_snippet_2\n\nLANGUAGE: logtalk\nCODE:\n```\ninterpreter::eval(\"a b + c a - -\", [a=5, b=3, c=1], Value).\n```\n\n----------------------------------------\n\nTITLE: Parsing JSON String to Term in Logtalk\nDESCRIPTION: Illustrates different ways to parse a JSON string into a Logtalk term, using various string representations (atom, chars, codes).\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/libraries/json.rst.txt#2025-04-06_snippet_2\n\nLANGUAGE: Prolog\nCODE:\n```\n| ?- json::parse(codes([34,104,101,108,108,111,34]), Term).\nTerm = hello\nyes\n```\n\nLANGUAGE: Prolog\nCODE:\n```\n| ?- json(atom)::parse(codes([34,104,101,108,108,111,34]), Term).\nTerm = hello\nyes\n```\n\nLANGUAGE: Prolog\nCODE:\n```\n| ?- json(chars)::parse(codes([34,104,101,108,108,111,34]), Term).\nTerm = chars([h,e,l,l,o])\nyes\n```\n\nLANGUAGE: Prolog\nCODE:\n```\n| ?- json(codes)::parse(codes([34,104,101,108,108,111,34]), Term).\nTerm = codes([104,101,108,108,111])\nyes\n```\n\n----------------------------------------\n\nTITLE: Defining and Undefining Source-file Local Operators in Logtalk\nDESCRIPTION: Technique for declaring operators that are local to a source file by defining them at the top and undefining them at the end of the file.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/userman/predicates.rst.txt#2025-04-06_snippet_12\n\nLANGUAGE: logtalk\nCODE:\n```\n% before any entity that uses the operator\n:- op(400, xfx, results).\n\n...\n\n% after all entities that used the operator\n:- op(0, xfx, results).\n```\n\n----------------------------------------\n\nTITLE: Basic Inheritance Example in Logtalk\nDESCRIPTION: Demonstrates basic inheritance between root and descendant objects with method overriding.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/userman/inheritance.rst#2025-04-06_snippet_0\n\nLANGUAGE: logtalk\nCODE:\n```\n:- object(root).\n\n    :- public(bar/1).\n    bar(root).\n\n    :- public(foo/1).\n    foo(root).\n\n:- end_object.\n\n\n:- object(descendant,\n    extends(root)).\n\n    foo(descendant).\n\n:- end_object.\n```\n\n----------------------------------------\n\nTITLE: Loading a Loader File with the Curly Braces Shorthand\nDESCRIPTION: Example of using the {File} shorthand notation to load a Logtalk loader file at the top-level interpreter.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/userman/programming.rst#2025-04-06_snippet_5\n\nLANGUAGE: text\nCODE:\n```\n| ?- {loader}.\n```\n\n----------------------------------------\n\nTITLE: Accessing Handbook Documentation in Logtalk\nDESCRIPTION: Predicate that opens the Texinfo version of the Handbook for inline browsing. This predicate requires a compatible Prolog backend running on a POSIX system.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/help_info_support_0.rst.txt#2025-04-06_snippet_0\n\nLANGUAGE: Prolog\nCODE:\n```\nhandbook/0\n```\n\n----------------------------------------\n\nTITLE: Defining Clauses and Goals Grammar in Logtalk (BNF)\nDESCRIPTION: Specifies the BNF grammar for Logtalk clauses and goals, including message sending, super calls, and context switching. Defines the structure for object-oriented and module-based clause definitions.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/refman/grammar.rst#2025-04-06_snippet_4\n\nLANGUAGE: BNF\nCODE:\n```\nclause ::=\n      object_identifier \"::'\" head \":-\" body\n      | module_identifier \":\" head \":-\" body\n      | head \":-\" body\n      | object_identifier \"::'\" fact\n      | module_identifier \":\" fact\n      | fact\n\n   goal ::=\n      message_sending\n      | super_call\n      | external_call\n      | context_switching_call\n      | callable\n\n   message_sending ::=\n      message_to_object\n      | message_delegation\n      | message_to_self\n\n   message_to_object ::=\n      receiver \"::'\" messages\n\n   message_delegation ::=\n      \"[\" message_to_object \"]\"\n\n   message_to_self ::=\n      \"::'\" messages\n\n   super_call ::=\n      \"^^\" message\n\n   messages ::=\n      message\n      | \"(\" message \",\" messages \")\"\n      | \"(\" message \";\" messages \")\"\n      | \"(\" message \"->\" messages \")\"\n\n   message ::=\n      callable\n      | variable\n\n   receiver ::=\n      \"{\" callable \"}\"\n      | object_identifier\n      | variable\n\n   external_call ::=\n      \"{\" callable \"}\"\n\n   context_switching_call ::=\n      object_identifier \"<<\" callable\n```\n\n----------------------------------------\n\nTITLE: Car Sequencing Problem with Indexicals (Method 3)\nDESCRIPTION: Solves the car sequencing problem using the third implementation with CLP(FD) indexicals. Uses the 'ff' (first-fail) labeling strategy.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/constraints/sicstus/NOTES.md#2025-04-06_snippet_4\n\nLANGUAGE: logtalk\nCODE:\n```\n%%table\ncars_ix::cars_ix3([ff], X).\n```\n\n----------------------------------------\n\nTITLE: Implementing Protocol in Logtalk Object\nDESCRIPTION: Demonstrates the basic syntax for implementing a protocol in a Logtalk object. The object declaration includes the 'implements' directive to specify the protocol being implemented.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/userman/protocols.rst.txt#2025-04-06_snippet_9\n\nLANGUAGE: logtalk\nCODE:\n```\n:- object(Object,\n    implements(Protocol)).\n    ...\n:- end_object.\n```\n\n----------------------------------------\n\nTITLE: Generating XHTML Coverage Report with xsltproc\nDESCRIPTION: Shows how to use xsltproc to generate an XHTML coverage report from the XML coverage data.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/devtools/lgtunit.rst.txt#2025-04-06_snippet_50\n\nLANGUAGE: bash\nCODE:\n```\n$ xsltproc -o coverage_report.html coverage_report.xml\n```\n\n----------------------------------------\n\nTITLE: Generating Logtalk API Documentation\nDESCRIPTION: Prolog queries to load the types library and use the lgtdoc tool to generate XML documentation for it. This is the first step in creating API documentation.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/userman/documenting.rst.txt#2025-04-06_snippet_5\n\nLANGUAGE: prolog\nCODE:\n```\n| ?- {types(loader)}.\n....\n\n| ?- {lgtdoc(loader)}.\n....\n\n| ?- lgtdoc::library(types).\n...\n```\n\n----------------------------------------\n\nTITLE: Reading CSV File and Saving as Object Predicates in Logtalk\nDESCRIPTION: Reads a CSV file and saves the data as clauses for the specified object predicate. Fails if the file cannot be parsed. Requires file name, object identifier, and predicate indicator as input.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/csv_protocol_0.rst.txt#2025-04-06_snippet_0\n\nLANGUAGE: Logtalk\nCODE:\n```\nread_file(File,Object,Predicate)\n```\n\n----------------------------------------\n\nTITLE: Using object_wrapper_hook for Linting Plain Prolog Files\nDESCRIPTION: Demonstrates an alternative method for linting plain Prolog files using the object_wrapper_hook provided by the hook_objects library in Logtalk.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/tools/linter/NOTES.md#2025-04-06_snippet_2\n\nLANGUAGE: Prolog\nCODE:\n```\n| ?- logtalk_load(hook_objects(loader)).\n...\n\n| ?- logtalk_load(code, [hook(object_wrapper_hook), source_data(on)]).\n```\n\n----------------------------------------\n\nTITLE: Customized Clock Benchmarking in Logtalk\nDESCRIPTION: Benchmarks a goal by repeating it a specified number of times and returning the total execution time using a specified clock (cpu or wall).\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/lgtunit_0.rst.txt#2025-04-06_snippet_18\n\nLANGUAGE: logtalk\nCODE:\n```\nbenchmark(Goal,Repetitions,Clock,Time)\n```\n\n----------------------------------------\n\nTITLE: Using Test Annotations in Logtalk\nDESCRIPTION: Demonstrates how to use test annotations to provide additional information about tests. This example shows a skipped test with a note explaining why it's skipped.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/tools/lgtunit/NOTES.md#2025-04-06_snippet_35\n\nLANGUAGE: Logtalk\nCODE:\n```\n- test(foo_1, true, [note('Waiting for Deep Thought answer')]) :-\n\t\t...\n```\n\n----------------------------------------\n\nTITLE: Enhanced List Protocol with Mode Declarations\nDESCRIPTION: Improved version of the list protocol that includes mode declarations to document call/return patterns and number of possible solutions for each predicate.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/tutorial/lists.rst#2025-04-06_snippet_2\n\nLANGUAGE: logtalk\nCODE:\n```\n:- protocol(listp).\n\n    :- public(append/3).\n    :- mode(append(?list, ?list, ?list), zero_or_more).\n\n    :- public(length/2).\n    :- mode(length(?list, ?integer), zero_or_more).\n\n    :- public(member/2).\n    :- mode(member(?term, ?list), zero_or_more).\n\n:- end_protocol.\n```\n\n----------------------------------------\n\nTITLE: Creating an Object Supporting Dynamic Predicate Declarations in Logtalk\nDESCRIPTION: Example demonstrating how to create an object 'database' with a directive that sets the dynamic_declarations flag to allow, which enables runtime declaration of dynamic predicates.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/refman/predicates/create_object_4.rst.txt#2025-04-06_snippet_7\n\nLANGUAGE: logtalk\nCODE:\n```\n% create an object supporting dynamic predicate declarations:\n| ?- create_object(\n        database,\n        [],\n        [set_logtalk_flag(dynamic_declarations, allow)],\n        []\n    ).\n```\n\n----------------------------------------\n\nTITLE: Usage Examples\nDESCRIPTION: Demonstrates different ways to use the findall/3 method in various contexts.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/refman/methods/findall_3.rst.txt#2025-04-06_snippet_3\n\nLANGUAGE: logtalk\nCODE:\n```\nfindall(Template, Goal, List)\nfindall(Template, ::Message, List)\nfindall(Template, Object::Message, List)\n```\n\n----------------------------------------\n\nTITLE: Logtalk Make Predicate Definition\nDESCRIPTION: Definition of the logtalk_make/1 predicate that runs make targets for Logtalk source files. The predicate takes a target atom as input and performs corresponding actions like reloading files or cleaning intermediates.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/refman/predicates/logtalk_make_1.rst.txt#2025-04-06_snippet_0\n\nLANGUAGE: prolog\nCODE:\n```\nlogtalk_make(Target)\n```\n\n----------------------------------------\n\nTITLE: Defining Predicate Properties Grammar in Logtalk (BNF)\nDESCRIPTION: Specifies the BNF grammar for Logtalk predicate properties. Defines various attributes and metadata associated with predicates in Logtalk, including scope, visibility, and implementation details.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/refman/grammar.rst#2025-04-06_snippet_7\n\nLANGUAGE: BNF\nCODE:\n```\npredicate_property ::=\n      \"static\"\n      | \"dynamic\"\n      | \"scope(\" scope \")\"\n      | \"private\"\n      | \"protected\"\n      | \"public\"\n      | \"logtalk\"\n      | \"prolog\"\n      | \"foreign\"\n      | \"coinductive(\" coinductive_predicate_template \")\"\n      | \"multifile\"\n      | \"synchronized\"\n      | \"built_in\"\n      | \"inline\"\n      | \"recursive\"\n      | \"declared_in(\" entity_identifier \")\"\n      | \"defined_in(\" ( object_identifier | category_identifier ) \")\"\n      | \"redefined_from(\" ( object_identifier | category_identifier ) \")\"\n      | \"meta_predicate(\" meta_predicate_template \")\"\n      | \"alias_of(\" callable \")\"\n      | \"alias_declared_in(\" entity_identifier \")\"\n      | \"non_terminal(\" non_terminal_indicator \")\"\n```\n\n----------------------------------------\n\nTITLE: Reporting Memory Usage in Logtalk Tests\nDESCRIPTION: Demonstrates how to report memory usage for a test using the statistics/2 predicate, which is available in some Prolog backends.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/tools/lgtunit/NOTES.md#2025-04-06_snippet_37\n\nLANGUAGE: Logtalk\nCODE:\n```\ntest(ack_3, true(Result == 125), [note(memory-Memory)]) :-\n\t\tstatistics(memory_used, Memory0),\n\t\tack::ack(3, 4, Result),\n\t\tstatistics(memory_used, Memory1),\n\t\tMemory is Memory1 - Memory0.\n```\n\n----------------------------------------\n\nTITLE: Suppressing Compiler Errors in Logtalk Tests\nDESCRIPTION: Demonstrates how to suppress expected compiler errors using the message_hook/4 predicate.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/devtools/lgtunit.rst.txt#2025-04-06_snippet_23\n\nLANGUAGE: logtalk\nCODE:\n```\n:- multifile(logtalk::message_hook/4).\n:- dynamic(logtalk::message_hook/4).\n\n% ignore expected domain error\nlogtalk::message_hook(compiler_error(_,_,error(domain_error(foo,bar),_)), error, core, _).\n```\n\n----------------------------------------\n\nTITLE: Solving Tomography Puzzle using Constraint Programming in Logtalk\nDESCRIPTION: Solves a tomography puzzle using constraint programming and displays the result as a grid. This example demonstrates handling 2D constraints.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/constraints/eclipse/NOTES.md#2025-04-06_snippet_3\n\nLANGUAGE: logtalk\nCODE:\n```\ntomography::go.\n```\n\n----------------------------------------\n\nTITLE: Basic Error Format in Logtalk\nDESCRIPTION: Shows the standard format for errors thrown by Logtalk, including the error term and execution context.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/userman/errors.rst.txt#2025-04-06_snippet_0\n\nLANGUAGE: prolog\nCODE:\n```\nerror(Error, logtalk(Goal, ExecutionContext))\n```\n\n----------------------------------------\n\nTITLE: Defining a Custom Hook Object for File Wrapping in Logtalk\nDESCRIPTION: This code snippet defines a hook object that wraps Prolog files in Logtalk objects implementing a given protocol. It uses term_expansion/2 to modify the begin and end of the file.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/userman/expansion.rst#2025-04-06_snippet_13\n\nLANGUAGE: Logtalk\nCODE:\n```\n:- object(wrapper(_Protocol_),\n    implements(expanding)).\n\n    term_expansion(begin_of_file, (:- object(Name,implements(_Protocol_)))) :-\n        logtalk_load_context(file, File),\n        os::decompose_file_name(File,_ , Name, _).\n\n    term_expansion(end_of_file, (:- end_object)).\n\n:- end_object.\n```\n\n----------------------------------------\n\nTITLE: Loading Search Framework\nDESCRIPTION: Loads the example code and required library files\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/searching/NOTES.md#2025-04-06_snippet_3\n\nLANGUAGE: logtalk\nCODE:\n```\nlogtalk_load(searching(loader)).\n```\n\n----------------------------------------\n\nTITLE: Defining Dynamic Predicate for Object-File Pairs in Logtalk\nDESCRIPTION: Defines a dynamic predicate 'object_file_/2' to cache test object and file pairs. It accepts an object identifier and an atom representing the file.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/coverage_report_0.rst.txt#2025-04-06_snippet_1\n\nLANGUAGE: Logtalk\nCODE:\n```\nobject_file_(Object,File)\n```\n\n----------------------------------------\n\nTITLE: Retrieve Text Output Contents with Alias in Logtalk\nDESCRIPTION: Returns the contents of the temporary file referenced by the given alias. Uses default stream options for accessing the file contents.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/lgtunit_0.rst.txt#2025-04-06_snippet_51\n\nLANGUAGE: logtalk\nCODE:\n```\ntext_output_contents(Alias,Contents)\n```\n\n----------------------------------------\n\nTITLE: Loading a Specific Logtalk Developer Tool\nDESCRIPTION: Example of how to load a specific tool (lgtunit in this case) using library notation with the logtalk_load/1 predicate.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/tools/NOTES.md#2025-04-06_snippet_1\n\nLANGUAGE: logtalk\nCODE:\n```\n| ?- logtalk_load(lgtunit(loader)).\n```\n\n----------------------------------------\n\nTITLE: Creating and Manipulating Java ArrayList\nDESCRIPTION: Creates a new ArrayList instance and adds string elements to it\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/jpl/NOTES.md#2025-04-06_snippet_3\n\nLANGUAGE: logtalk\nCODE:\n```\njava('java.util.ArrayList')::new(ArrayList), java(ArrayList)::(add('Paulo'), add('Carlos'), add('Helena')).\n```\n\n----------------------------------------\n\nTITLE: Checking List Length Equality with Length in Logtalk\nDESCRIPTION: Checks if two lists have the same length and returns that length.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/listp_0.rst.txt#2025-04-06_snippet_13\n\nLANGUAGE: Logtalk\nCODE:\n```\nsame_length(List1,List2,Length)\n```\n\n----------------------------------------\n\nTITLE: Declaring Meta-predicate Templates in Logtalk\nDESCRIPTION: Syntax for declaring meta-predicates using the meta_predicate/1 directive. It shows various formats for specifying meta-predicate templates, including single predicates, lists, and qualified predicates.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/refman/directives/meta_predicate_1.rst#2025-04-06_snippet_0\n\nLANGUAGE: Logtalk\nCODE:\n```\nmeta_predicate(Template)\nmeta_predicate((Template, ...))\nmeta_predicate([Template, ...])\n\nmeta_predicate(Entity::Template)\nmeta_predicate((Entity::Template, ...))\nmeta_predicate([Entity::Template, ...])\n\nmeta_predicate(Module:Template)\nmeta_predicate((Module:Template, ...))\nmeta_predicate([Module:Template, ...])\n```\n\n----------------------------------------\n\nTITLE: Declaring Multifile Predicates in Logtalk\nDESCRIPTION: Illustrates the use of the multifile/1 directive to declare predicates that can have clauses defined in multiple objects or categories.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/userman/predicates.rst.txt#2025-04-06_snippet_20\n\nLANGUAGE: Logtalk\nCODE:\n```\n:- object(main).\n\n    :- public(a/1).\n    :- multifile(a/1).\n    a(1).\n\n:- end_object.\n```\n\nLANGUAGE: Logtalk\nCODE:\n```\n:- object(other).\n\n    :- multifile(main::a/1).\n    main::a(2).\n    main::a(X) :-\n        b(X).\n\n    b(3).\n    b(4).\n\n:- end_object.\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Message Forwarding in Logtalk\nDESCRIPTION: This snippet demonstrates how to implement a basic message forwarding mechanism in Logtalk using the forward/1 predicate. It preserves the original sender of the message.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/userman/errors.rst#2025-04-06_snippet_9\n\nLANGUAGE: Logtalk\nCODE:\n```\nforward(Message) :-\n    % forward the message while preserving the sender\n    [Object::Message].\n```\n\n----------------------------------------\n\nTITLE: Implementing Mock Login Using Term Expansion in Logtalk\nDESCRIPTION: Defines a hook object that expands the login predicate into a fixed test credential using term expansion mechanism.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/tools/lgtunit/NOTES.md#2025-04-06_snippet_41\n\nLANGUAGE: logtalk\nCODE:\n```\n:- object(mock_login,\n\t\timplements(expanding)).\n\n\t\tterm_expansion((login(_, _) :- _), login(jdoe, test123)).\n\n:- end_object.\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Types in Logtalk\nDESCRIPTION: Example showing how to define a custom 'age' type by implementing the required multifile predicates type::type/1 and type::check/2.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/library/types/NOTES.md#2025-04-06_snippet_4\n\nLANGUAGE: logtalk\nCODE:\n```\n:- multifile(type::type/1).\ntype::type(age).\n\n:- multifile(type::check/2).\ntype::check(age, Term) :-\n\ttype::check(between(non_negative_integer, 0, 150), Term).\n```\n\n----------------------------------------\n\nTITLE: Setting Conditional Breakpoints\nDESCRIPTION: Example of setting a conditional breakpoint with a lambda expression.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/userman/debugging.rst#2025-04-06_snippet_8\n\nLANGUAGE: text\nCODE:\n```\n| ?- debugger::spy(planet, 76, [weight(m1,_)]>>true).\n\nConditional breakpoint added.\nyes\n```\n\n----------------------------------------\n\nTITLE: Displaying Version Information in Logtalk\nDESCRIPTION: Displays the Logtalk, Prolog backend, and kernel versions when running as a Jupyter notebook.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/mi/NOTES.md#2025-04-06_snippet_0\n\nLANGUAGE: logtalk\nCODE:\n```\n%versions\n```\n\n----------------------------------------\n\nTITLE: Using evaluation_error/1 Method in Logtalk\nDESCRIPTION: This method throws an evaluation error when an arithmetic expression generates an exception. It generates standardized error terms with the current execution context.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/refman/methods/evaluation_error_1.rst#2025-04-06_snippet_0\n\nLANGUAGE: logtalk\nCODE:\n```\nevaluation_error(Error)\n```\n\n----------------------------------------\n\nTITLE: Solving N-Queens Problem using CLP(FD) in Logtalk\nDESCRIPTION: Shows how to solve the N-Queens problem for 8 queens using CLP(FD) constraints in Logtalk.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/constraints/swipl/NOTES.md#2025-04-06_snippet_5\n\nLANGUAGE: logtalk\nCODE:\n```\nqueens::n_queens(8, Qs), labeling([ff], Qs).\n```\n\n----------------------------------------\n\nTITLE: Defining Dynamic Predicate for Leashed Ports in Logtalk\nDESCRIPTION: Defines a dynamic predicate 'leashing_/1' that represents a table of currently leashed ports. It takes a port as an argument.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/debugger_0.rst.txt#2025-04-06_snippet_9\n\nLANGUAGE: Logtalk\nCODE:\n```\nleashing_/1\n```\n\n----------------------------------------\n\nTITLE: Splitting a List into Sublists in Logtalk\nDESCRIPTION: Splits a list into sublists of a given length and returns the remaining elements.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/listp_0.rst.txt#2025-04-06_snippet_21\n\nLANGUAGE: Logtalk\nCODE:\n```\nsplit(List,Length,Sublists,Remaining)\n```\n\n----------------------------------------\n\nTITLE: Parsing JSON from File in Logtalk\nDESCRIPTION: Demonstrates how to use the parse/2 predicate to decode JSON content from a file into a Logtalk term.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/libraries/json.rst.txt#2025-04-06_snippet_5\n\nLANGUAGE: Prolog\nCODE:\n```\n| ?- json::parse(file('simple/roundtrip_array_obj_array.json'), Term).\nTerm = [{a-[b]}]\nyes\n```\n\n----------------------------------------\n\nTITLE: Declaring Synchronized Predicates in Logtalk\nDESCRIPTION: Shows how to declare predicates as synchronized using the synchronized/1 directive. This ensures thread safety for predicates with side effects.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/userman/threads.rst.txt#2025-04-06_snippet_7\n\nLANGUAGE: Logtalk\nCODE:\n```\n:- synchronized(db_update/1).\n\ndb_update(Update) :-\n    % predicate with side-effects\n    ...\n```\n\n----------------------------------------\n\nTITLE: Meta-Predicate Usage with Lambda in Logtalk\nDESCRIPTION: Demonstrates the use of meta-predicates with lambda expressions for list operations and calculations.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/lambdas/NOTES.md#2025-04-06_snippet_4\n\nLANGUAGE: logtalk\nCODE:\n```\nmeta::map([X]>>(X>3),[4,5,9]).\n```\n\nLANGUAGE: logtalk\nCODE:\n```\nmeta::map([A-B,B-A]>>true, [1-a,2-b,3-c], Zs).\n```\n\nLANGUAGE: logtalk\nCODE:\n```\nPoints = [(1,4),(2,5),(8,3)], meta::map([(X,Y),Z]>>(Z is sqrt(X*X + Y*Y)), Points, Distances).\n```\n\n----------------------------------------\n\nTITLE: Testing Non-deterministic Predicates with exists/1 in Logtalk\nDESCRIPTION: Demonstrates testing non-deterministic predicates to ensure that at least one solution satisfies a given assertion using the exists/1 outcome.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/devtools/lgtunit.rst#2025-04-06_snippet_32\n\nLANGUAGE: logtalk\nCODE:\n```\n   test(at_least_one_atom, exists(atom(Item))) :-\n       member(Item, [1, foo(2), 3.14, abc, 42]).\n```\n\n----------------------------------------\n\nTITLE: Setting Conditional Context Breakpoint in Logtalk\nDESCRIPTION: Demonstrates setting a conditional context breakpoint using the debugger's spy/4 predicate. This example sets a breakpoint for calls to 'foo/2' predicate with 'bar' as the second argument.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/userman/debugging.rst#2025-04-06_snippet_13\n\nLANGUAGE: text\nCODE:\n```\n| ?- debugger::spy(_, _, _, foo(_, bar)).\n\nSpy point set.\nyes\n```\n\n----------------------------------------\n\nTITLE: Random Integer Generation in Interval\nDESCRIPTION: Predicate that generates a random integer within a specified inclusive range [Lower, Upper]. Fails if inputs are not integers or if Lower > Upper.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/random_protocol_0.rst.txt#2025-04-06_snippet_1\n\nLANGUAGE: logtalk\nCODE:\n```\nbetween(+integer,+integer,-integer)\n```\n\n----------------------------------------\n\nTITLE: Loading Source Files with Source Data Flag in Logtalk\nDESCRIPTION: This snippet shows how to load a source file with the source_data flag set to 'on'. This is necessary for extracting documentation information from the source code.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/devtools/lgtdoc.rst.txt#2025-04-06_snippet_2\n\nLANGUAGE: prolog\nCODE:\n```\n| ?- logtalk_load(source_file, [source_data(on)]).\n```\n\n----------------------------------------\n\nTITLE: Defining Entity Types in Logtalk Grammar using BNF\nDESCRIPTION: Defines the three main entity types in Logtalk: objects, categories, and protocols. This is the foundational structure for the language.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/refman/grammar.rst.txt#2025-04-06_snippet_0\n\nLANGUAGE: bnf\nCODE:\n```\nentity ::=\n   object\n   | category\n   | protocol\n```\n\n----------------------------------------\n\nTITLE: Defining a Parametric Object with Parameter Variables in Logtalk\nDESCRIPTION: Demonstrates how to define a parametric object using parameter variables for easy access to object parameters. Parameter variables are denoted by underscore-wrapped names.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/userman/objects.rst.txt#2025-04-06_snippet_10\n\nLANGUAGE: logtalk\nCODE:\n```\n:- object(foo(_Bar_, _Baz_, ...)).\n\n    ...\n    bar(_Bar_).\n\n    baz :-\n        baz(_Baz_),\n        ... .\n```\n\n----------------------------------------\n\nTITLE: Type Checking with Exceptions using check/2 and check/3\nDESCRIPTION: Examples demonstrating type checking that throws exceptions for invalid types using check/2 and check/3 predicates.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/library/types/NOTES.md#2025-04-06_snippet_3\n\nLANGUAGE: logtalk\nCODE:\n```\n| ?- catch(type::check(integer, abc), Error, true).\n\n| ?- catch(type::check(integer, abc, foo/3), Error, true).\n```\n\n----------------------------------------\n\nTITLE: Loading and Linting a Prolog Module with Logtalk\nDESCRIPTION: Demonstrates how to use Logtalk to load and lint a Prolog module file named 'module.pl'. The source_data(on) option enables full linting capabilities.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/tools/linter/NOTES.md#2025-04-06_snippet_0\n\nLANGUAGE: Prolog\nCODE:\n```\n| ?- logtalk_load(module, [source_data(on)]).\n```\n\n----------------------------------------\n\nTITLE: Approximate Number Equality in Logtalk\nDESCRIPTION: Compares two numbers for approximate equality using the epsilon arithmetic constant. Uses a standard formula for comparison.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/lgtunit_0.rst.txt#2025-04-06_snippet_20\n\nLANGUAGE: logtalk\nCODE:\n```\napproximately_equal(Number1,Number2)\n```\n\n----------------------------------------\n\nTITLE: Asserting predicates with different scopes in prototype\nDESCRIPTION: Demonstrates asserting predicates with public, protected, and private scopes in a prototype object.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/dynpred/NOTES.md#2025-04-06_snippet_12\n\nLANGUAGE: logtalk\nCODE:\n```\nprototype::(object_assert, self_assert, this_assert).\n```\n\n----------------------------------------\n\nTITLE: Loading Source Files with Source Data Flag in Logtalk\nDESCRIPTION: This snippet shows how to load a source file with the source_data flag set to 'on'. This is necessary for extracting documentation information from the source code.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/devtools/lgtdoc.rst.txt#2025-04-06_snippet_2\n\nLANGUAGE: prolog\nCODE:\n```\n| ?- logtalk_load(source_file, [source_data(on)]).\n```\n\n----------------------------------------\n\nTITLE: Defining Multifile Predicates in Logtalk\nDESCRIPTION: Shows how to declare and implement multifile predicates when distributed across multiple objects in Logtalk. The format requires specifying the entity name followed by the predicate specifications.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/userman/migration.rst#2025-04-06_snippet_0\n\nLANGUAGE: logtalk\nCODE:\n```\n:- multifile(Entity::Name/Arity).\n\nEntity::Functor(...) :-\n    ...\n```\n\n----------------------------------------\n\nTITLE: Public Directive Syntax in Logtalk\nDESCRIPTION: Shows the various syntax forms for the public/1 directive when declaring predicates, grammar rule non-terminals, and operators. The directive can accept a single item, a comma-separated list in parentheses, or items in a list notation.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/refman/directives/public_1.rst.txt#2025-04-06_snippet_0\n\nLANGUAGE: logtalk\nCODE:\n```\npublic(Name/Arity)\npublic((Name/Arity, ...))\npublic([Name/Arity, ...])\n\npublic(Name//Arity)\npublic((Name//Arity, ...))\npublic([Name//Arity, ...])\n\npublic(op(Precedence,Associativity,Operator))\npublic((op(Precedence,Associativity,Operator), ...))\npublic([op(Precedence,Associativity,Operator), ...])\n```\n\n----------------------------------------\n\nTITLE: Using Context-Switching for Debugging in Logtalk\nDESCRIPTION: Demonstrates the use of the context-switching control construct (<<)/2 to execute queries within the context of an object for debugging purposes.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/userman/debugging.rst.txt#2025-04-06_snippet_29\n\nLANGUAGE: logtalk\nCODE:\n```\n| ?- broken::a(A).\n\nno\n\n| ?- broken << c(C).\n\nC = 3\nyes\n\n| ?- broken << (self(Self), sender(Sender), this(This)).\n\nSelf = broken\nSender = broken\nThis = broken\n\nyes\n```\n\n----------------------------------------\n\nTITLE: Defining Attributes Category with Self Database in Logtalk\nDESCRIPTION: Example of defining a category 'attributes' implementing get/2 and set/2 predicates using the dynamic database of 'self' in Logtalk. This demonstrates how to use message to self for dynamic predicates in categories.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/userman/predicates.rst#2025-04-06_snippet_31\n\nLANGUAGE: Logtalk\nCODE:\n```\n:- category(attributes).\n\n    :- public(get/2).\n    :- public(set/2).\n\n    :- private(attribute_/2).\n    :- dynamic(attribute_/2).\n\n    get(Var, Value) :-\n        ::attribute_(Var, Value).\n\n    set(Var, Value) :-\n        ::retractall(attribute_(Var, _)),\n        ::asserta(attribute_(Var, Value).\n\n:- end_category.\n```\n\n----------------------------------------\n\nTITLE: Registry Specification Object Implementation in Logtalk\nDESCRIPTION: Example of a registry specification object that implements the registry_protocol. Defines core registry metadata including version, author, description and repository URLs.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/devtools/packs.rst#2025-04-06_snippet_13\n\nLANGUAGE: logtalk\nCODE:\n```\n:- object(jdoe_awesome_packs_registry,\n    implements(registry_protocol)).\n\n    :- info([\n        version is 1:0:0,\n        author is 'John Doe',\n        date is 2021-10-18,\n        comment is 'John Doe awesome packs registry spec.'\n    ]).\n\n    name(jdoe_awesome_packs).\n\n    description('John Doe awesome packs').\n\n    home('https://example.com/jdoe_awesome_packs').\n\n    clone('https://github.com/jdoe/jdoe_awesome_packs.git').\n\n    archive('https://github.com/jdoe/jdoe_awesome_packs/archive/main.zip').\n\n:- end_object.\n```\n\n----------------------------------------\n\nTITLE: Declaring Private Predicates and Non-terminals in Logtalk\nDESCRIPTION: Demonstrates the syntax for declaring private predicates and grammar rule non-terminals using the private/1 directive. This allows encapsulation of predicates and non-terminals within an object, making them accessible only from within that object.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/refman/directives/private_1.rst#2025-04-06_snippet_0\n\nLANGUAGE: Logtalk\nCODE:\n```\nprivate(Name/Arity)\nprivate((Name/Arity, ...))\nprivate([Name/Arity, ...])\n\nprivate(Name//Arity)\nprivate((Name//Arity, ...))\nprivate([Name//Arity, ...])\n```\n\n----------------------------------------\n\nTITLE: Querying Protocol Implementation Relationships with Scope in Logtalk\nDESCRIPTION: Demonstrates how to find protocol implementation relationships while also retrieving the implementation scope, using the implements_protocol/3 built-in predicate.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/userman/protocols.rst#2025-04-06_snippet_11\n\nLANGUAGE: prolog\nCODE:\n```\n| ?- implements_protocol(ObjectOrCategory, Protocol, Scope).\n```\n\n----------------------------------------\n\nTITLE: Example Usage of mode/2 Directive with Type Annotations in Logtalk\nDESCRIPTION: Demonstrates using the mode/2 directive with type annotations, showing that solve/2 takes a callable term and returns a list of atoms, with zero or one solutions.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/refman/directives/mode_2.rst.txt#2025-04-06_snippet_4\n\nLANGUAGE: logtalk\nCODE:\n```\n:- mode(solve(+callable, -list(atom)), zero_or_one).\n```\n\n----------------------------------------\n\nTITLE: Dynamic Predicate Declaration in Logtalk\nDESCRIPTION: Declaration for dynamic predicates that can be asserted or retracted at runtime. Used to represent persistent mutable object state in Logtalk objects.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/userman/predicates.rst.txt#2025-04-06_snippet_10\n\nLANGUAGE: logtalk\nCODE:\n```\n:- dynamic(foo/1).\n```\n\n----------------------------------------\n\nTITLE: Using Prolog Module Predicates in Logtalk\nDESCRIPTION: Shows how to use the use_module/2 directive to call Prolog module predicates without explicit qualification in Logtalk objects or categories.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/userman/predicates.rst.txt#2025-04-06_snippet_56\n\nLANGUAGE: logtalk\nCODE:\n```\n:- use_module(module, [bar/0]).\n\nfoo :-\n    ...,\n    bar,\n    ...\n```\n\n----------------------------------------\n\nTITLE: Querying Protocol Implementation in Logtalk\nDESCRIPTION: Demonstrates using implements_protocol/3 and conforms_to_protocol/3 built-in predicates to find which objects implement or conform to specific protocols, including the implementation scope.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/userman/objects.rst.txt#2025-04-06_snippet_26\n\nLANGUAGE: text\nCODE:\n```\n| ?- implements_protocol(Object, Protocol, Scope).\n```\n\nLANGUAGE: text\nCODE:\n```\n| ?- conforms_to_protocol(Object, Protocol, Scope).\n```\n\n----------------------------------------\n\nTITLE: Using succ/2 predicate for natural number succession\nDESCRIPTION: Predicate that relates a natural number to its successor. At least one of the arguments must be instantiated to a natural number. Can be used to increment or decrement integers.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/integer_0.rst.txt#2025-04-06_snippet_2\n\nLANGUAGE: logtalk\nCODE:\n```\nsucc(I,J)\n```\n\n----------------------------------------\n\nTITLE: Standard Softmax Function Implementation in Logtalk\nDESCRIPTION: Computes the softmax of a list of floats, returning a probability distribution. This predicate takes a list of float values and converts them into a probability distribution where all values sum to 1.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/numberlistp_0.rst.txt#2025-04-06_snippet_22\n\nLANGUAGE: Logtalk\nCODE:\n```\nsoftmax(Floats,Softmax)\n```\n\n----------------------------------------\n\nTITLE: Defining Entity Types in Logtalk Grammar using BNF\nDESCRIPTION: Defines the three main entity types in Logtalk: objects, categories, and protocols. This is the foundational structure for the language.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/refman/grammar.rst.txt#2025-04-06_snippet_0\n\nLANGUAGE: bnf\nCODE:\n```\nentity ::=\n   object\n   | category\n   | protocol\n```\n\n----------------------------------------\n\nTITLE: Debugging Failed Tests with the Debugger Tool\nDESCRIPTION: Demonstrates how to use the Logtalk debugger to trace and debug a failed test. The example shows loading the debugger and tracing a specific test in a tests object.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/devtools/lgtunit.rst.txt#2025-04-06_snippet_35\n\nLANGUAGE: logtalk\nCODE:\n```\n| ?- logtalk_load(debugger(loader)).\n...\n\n| ?- debugger::trace.\n...\n\n| ?- tests::run(test_foo).\n...\n```\n\n----------------------------------------\n\nTITLE: Cleaning Up Test Files and Directories in Logtalk\nDESCRIPTION: Demonstrates how to use clean_file/1 and clean_directory/1 predicates to delete temporary files and directories created during tests.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/tools/lgtunit/NOTES.md#2025-04-06_snippet_39\n\nLANGUAGE: Logtalk\nCODE:\n```\ncleanup :-\n\t\t^^clean_file('foo.txt'),\n\t\t^^clean_directory('tmp').\n```\n\n----------------------------------------\n\nTITLE: Defining Attributes Category with Self Database in Logtalk\nDESCRIPTION: Example of defining a category 'attributes' implementing get/2 and set/2 predicates using the dynamic database of 'self' in Logtalk. This demonstrates how to use message to self for dynamic predicates in categories.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/userman/predicates.rst#2025-04-06_snippet_31\n\nLANGUAGE: Logtalk\nCODE:\n```\n:- category(attributes).\n\n    :- public(get/2).\n    :- public(set/2).\n\n    :- private(attribute_/2).\n    :- dynamic(attribute_/2).\n\n    get(Var, Value) :-\n        ::attribute_(Var, Value).\n\n    set(Var, Value) :-\n        ::retractall(attribute_(Var, _)),\n        ::asserta(attribute_(Var, Value).\n\n:- end_category.\n```\n\n----------------------------------------\n\nTITLE: Type Checking with Context\nDESCRIPTION: Example demonstrating type checking of predicate arguments using the context method to include execution context in error reporting.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/userman/predicates.rst.txt#2025-04-06_snippet_46\n\nLANGUAGE: logtalk\nCODE:\n```\nfoo(A, N) :-\n    % type-check arguments\n    context(Context),\n    type::check(atom, A, Context),\n    type::check(integer, N, Context),\n    % arguments are fine; go ahead\n    ... .\n```\n\n----------------------------------------\n\nTITLE: Generating Single-File Allure Test Reports in Logtalk\nDESCRIPTION: Command to generate a single-file Allure test report with a custom title. The -s flag specifies single-file output and -t sets the report title.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/tools/lgtunit/NOTES.md#2025-04-06_snippet_55\n\nLANGUAGE: shell\nCODE:\n```\n$ logtalk_allure_report -s -t \"My Amazing Tests Report\"\n```\n\n----------------------------------------\n\nTITLE: Overriding Default Inheritance with alias/2 Directive\nDESCRIPTION: Example showing how to give access to a masked inherited predicate while keeping the original name by combining the alias/2 directive with a local predicate definition that calls the aliased version.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/userman/predicates.rst#2025-04-06_snippet_23\n\nLANGUAGE: logtalk\nCODE:\n```\n:- object(my_data_structure,\n    extends(list, set)).\n\n    :- alias(list, [member/2 as list_member/2]).\n    :- alias(set,  [member/2 as set_member/2]).\n\n    member(X, L) :-\n        ^^set_member(X, L).\n\n    ...\n\n:- end_object.\n```\n\n----------------------------------------\n\nTITLE: Setting Term Write Depth with write_term/3 in Prolog\nDESCRIPTION: Demonstrates setting the maximum write depth for compound terms using the max_depth/1 option. When a compound term exceeds this depth, the remaining sub-terms are replaced by ellipsis.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/userman/debugging.rst.txt#2025-04-06_snippet_25\n\nLANGUAGE: prolog\nCODE:\n```\n| ?- write_term([0,1,2,3,4,5,6,7,8,9], [max_depth(5)]).\n\n[0,1,2,3,4|...]\nyes\n```\n\n----------------------------------------\n\nTITLE: Implementing Decremented For-Downto Loop in Logtalk\nDESCRIPTION: Defines a decremented for-downto loop construct that calls a Goal while counting down from First to Last with a specified Decrement, binding Count to each value. It uses meta-predicate notation to handle callable arguments.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/loopp_0.rst.txt#2025-04-06_snippet_9\n\nLANGUAGE: Logtalk\nCODE:\n```\nfordownto(Count,First,Last,Decrement,Goal)\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Inlining in Logtalk\nDESCRIPTION: Example of inlining in Logtalk, which occurs when the optimize flag is turned on. This allows wrapping module or foreign predicates without introducing overhead.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/userman/performance.rst.txt#2025-04-06_snippet_2\n\nLANGUAGE: logtalk\nCODE:\n```\n% Inlining example\n:- object(wrapper).\n    :- public(wrapped_predicate/1).\n    wrapped_predicate(X) :- module:foreign_predicate(X).\n:- end_object.\n```\n\n----------------------------------------\n\nTITLE: Defining Prototype Extensions in Logtalk\nDESCRIPTION: Syntax for creating prototype extensions in Logtalk. The directive can be used with different combinations of options to implement protocols, import categories, and extend other objects.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/refman/directives/object_1_5.rst#2025-04-06_snippet_1\n\nLANGUAGE: logtalk\nCODE:\n```\nobject(Object,\n    extends(Objects))\n\nobject(Object,\n    implements(Protocols),\n    extends(Objects))\n\nobject(Object,\n    imports(Categories),\n    extends(Objects))\n\nobject(Object,\n    implements(Protocols),\n    imports(Categories),\n    extends(Objects))\n```\n\n----------------------------------------\n\nTITLE: Solving Cellphone Keypad Enigma with DCG in Logtalk\nDESCRIPTION: Uses the enigma object to solve a cellphone keypad encoded message using DCG rules.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/dcgs/NOTES.md#2025-04-06_snippet_4\n\nLANGUAGE: logtalk\nCODE:\n```\nenigma::solve(\"4 96853 5683 86 4283 346637 9484 968 8664448\", Message).\n```\n\n----------------------------------------\n\nTITLE: Loading the IDs Object in Logtalk\nDESCRIPTION: This code snippet shows how to load the 'ids' object into a Logtalk program. It uses the 'logtalk_load' predicate with the 'ids(loader)' argument.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/ids_0.rst.txt#2025-04-06_snippet_0\n\nLANGUAGE: Logtalk\nCODE:\n```\nlogtalk_load(ids(loader))\n```\n\n----------------------------------------\n\nTITLE: Defining Debug Expansion Object in Logtalk\nDESCRIPTION: Defines the debug_expansion(Mode) object for expanding debug/1 calls. The Mode parameter can be either 'debug' or 'production'. This object implements the 'expanding' protocol and requires the verdi_neruda(loader) to be loaded.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/debug_expansion_1.rst.txt#2025-04-06_snippet_0\n\nLANGUAGE: Logtalk\nCODE:\n```\ndebug_expansion(Mode)\n```\n\n----------------------------------------\n\nTITLE: Loading Assertions Library in Logtalk\nDESCRIPTION: Query to load the assertions library in Logtalk. This makes the assertion predicates available for use in your code.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/devtools/assertions.rst#2025-04-06_snippet_0\n\nLANGUAGE: Prolog\nCODE:\n```\n| ?- logtalk_load(assertions(loader)).\n```\n\n----------------------------------------\n\nTITLE: Optional Features Compilation Flags in Logtalk\nDESCRIPTION: Configuration flags for optional Logtalk features including category complements, dynamic declarations, event support, and context switching.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/userman/programming.rst.txt#2025-04-06_snippet_15\n\nLANGUAGE: text\nCODE:\n```\ncomplements(Option)\\ndynamic_declarations(Option)\\nevents(Option)\\ncontext_switching_calls(Option)\n```\n\n----------------------------------------\n\nTITLE: Loading Dynamic Complementing Category\nDESCRIPTION: Loads a source file that creates a dynamic category which patches the employee object at runtime.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/complements/allow/NOTES.md#2025-04-06_snippet_6\n\nLANGUAGE: logtalk\nCODE:\n```\nlogtalk_load(complements_allow(dynamic)).\n```\n\n----------------------------------------\n\nTITLE: Abolishing an Existing Object in Logtalk\nDESCRIPTION: Shows how to abolish a dynamic object using the abolish_object/1 predicate. The argument must be an identifier of a defined dynamic object.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/userman/objects.rst.txt#2025-04-06_snippet_17\n\nLANGUAGE: prolog\nCODE:\n```\n| ?- abolish_object(Object).\n```\n\n----------------------------------------\n\nTITLE: Assigning Value to Assignable Variable\nDESCRIPTION: Sets the state of an assignable variable to a specified non-variable value. Uses <= operator with precedence 100. Throws instantiation error if value not instantiated.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/assignvarsp_0.rst.txt#2025-04-06_snippet_2\n\nLANGUAGE: logtalk\nCODE:\n```\nVariable<=Value\n```\n\n----------------------------------------\n\nTITLE: Encoding String to Base64 in Logtalk\nDESCRIPTION: Demonstrates encoding a string 'Hello world!' to Base64 format using base64::generate/2 predicate, with outputs as atom and list of codes.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/libraries/base64.rst.txt#2025-04-06_snippet_2\n\nLANGUAGE: prolog\nCODE:\n```\n| ?- atom_codes('Hello world!', Bytes),\n     base64::generate(atom(Base64), Bytes).\nBase64 = 'SGVsbG8gd29ybGQh'\nBytes = [72,101,108,108,111,32,119,111,114,108,100,33]\nyes\n\n| ?- atom_codes('Hello world!', Bytes),\n     base64::generate(codes(Base64), Bytes).\nBase64 = [83,71,86,115,98,71,56,103,100,50,57,121,98,71,81,104]\nBytes = [72,101,108,108,111,32,119,111,114,108,100,33]\nyes\n```\n\n----------------------------------------\n\nTITLE: Implementing an Attributes Category Using This in Logtalk\nDESCRIPTION: Category implementation of attribute management using the this context. This approach ensures each object importing the category maintains its own separate attribute database.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/userman/predicates.rst.txt#2025-04-06_snippet_25\n\nLANGUAGE: logtalk\nCODE:\n```\n:- category(attributes).\n\n    :- public(get/2).\n    :- public(set/2).\n\n    :- private(attribute_/2).\n    :- dynamic(attribute_/2).\n\n    get(Var, Value) :-\n        attribute_(Var, Value).\n\n    set(Var, Value) :-\n        retractall(attribute_(Var, _)),\n        asserta(attribute_(Var, Value).\n\n:- end_category.\n```\n\n----------------------------------------\n\nTITLE: Set Operations in Logtalk\nDESCRIPTION: Demonstrates various set operations including creating sets, finding intersections, and symmetric differences.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/library/sets/NOTES.md#2025-04-06_snippet_4\n\nLANGUAGE: Logtalk\nCODE:\n```\n| ?- set::(\n\t\tas_set([1,3,2,1,2], Set1),\n\t\tas_set([7,4,2,5,1], Set2),\n\t\tintersection(Set1, Set2, Intersection),\n\t\tsymdiff(Set1, Set2, Difference)\n\t).\nSet1 = [1, 2, 3],\nSet2 = [1, 2, 4, 5, 7],\nIntersection = [1, 2],\nDifference = [3, 4, 5, 7]\nyes\n```\n\n----------------------------------------\n\nTITLE: Type Checking with valid/2 in Logtalk\nDESCRIPTION: Demonstrates the use of the valid/2 predicate from the 'type' object to check if a term is of a specific type. The example shows checking for a positive integer.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/libraries/types.rst.txt#2025-04-06_snippet_3\n\nLANGUAGE: prolog\nCODE:\n```\n| ?- type::valid(positive_integer, 42).\nyes\n\n| ?- type::valid(positive_integer, -13).\nno\n```\n\n----------------------------------------\n\nTITLE: Defining Category Directive Syntax in Logtalk\nDESCRIPTION: Demonstrates the various syntax forms for declaring categories in Logtalk, including options for implementing protocols, extending other categories, and complementing objects.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/refman/directives/category_1_4.rst#2025-04-06_snippet_0\n\nLANGUAGE: logtalk\nCODE:\n```\ncategory(Category)\n\ncategory(Category,\n    implements(Protocols))\n\ncategory(Category,\n    extends(Categories))\n\ncategory(Category,\n    complements(Objects))\n\ncategory(Category,\n    implements(Protocols),\n    extends(Categories))\n\ncategory(Category,\n    implements(Protocols),\n    complements(Objects))\n\ncategory(Category,\n    extends(Categories),\n    complements(Objects))\n\ncategory(Category,\n    implements(Protocols),\n    extends(Categories),\n    complements(Objects))\n```\n\n----------------------------------------\n\nTITLE: Set Operations in Logtalk\nDESCRIPTION: Example demonstrating multiple set operations including intersection and symmetric difference.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/libraries/sets.rst.txt#2025-04-06_snippet_4\n\nLANGUAGE: prolog\nCODE:\n```\n| ?- set::(\n    as_set([1,3,2,1,2], Set1),\n    as_set([7,4,2,5,1], Set2),\n    intersection(Set1, Set2, Intersection),\n    symdiff(Set1, Set2, Difference)\n).\nSet1 = [1, 2, 3],\nSet2 = [1, 2, 4, 5, 7],\nIntersection = [1, 2],\nDifference = [3, 4, 5, 7]\nyes\n```\n\n----------------------------------------\n\nTITLE: Timing Knight's Tour Solution for 8x8 Board\nDESCRIPTION: Measures the time taken to solve the Knight's Tour problem for an 8x8 board using CLP(FD) constraints in Logtalk.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/constraints/swipl/NOTES.md#2025-04-06_snippet_7\n\nLANGUAGE: logtalk\nCODE:\n```\ntime((knight::n_tour(8, Ts), list::append(Ts, Vs), clpfd:labeling([ff], Vs))).\n```\n\n----------------------------------------\n\nTITLE: Defining an Object with Relationships in Logtalk3\nDESCRIPTION: This snippet demonstrates how to define an object in Logtalk3 with various relationships. It implements a protected protocol, imports a private category, instantiates a metaclass, and specializes a superclass.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/coding/subethaedit4/Logtalk.seemode/Contents/Resources/ExampleSyntax.txt#2025-04-06_snippet_5\n\nLANGUAGE: Logtalk\nCODE:\n```\n:- object(class,\n\timplements(protected::protocol),\n\timports(private::category),\n\tinstantiates(metaclass),\n\tspecializes(superclass)).\n\n:- end_object.\n```\n\n----------------------------------------\n\nTITLE: Entity Identifiers Syntax in Logtalk using BNF\nDESCRIPTION: Defines the general syntax for entity identifiers in Logtalk, which can be object, protocol, or category identifiers.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/refman/grammar.rst.txt#2025-04-06_snippet_14\n\nLANGUAGE: bnf\nCODE:\n```\nentity_identifier ::=\n   object_identifier\n   | protocol_identifier\n   | category_identifier\n```\n\n----------------------------------------\n\nTITLE: Defining a Reflexive Class in Logtalk\nDESCRIPTION: Syntax for creating a reflexive class that is both an instance of a metaclass and a specialization of a superclass, used in reflective systems.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/userman/objects.rst#2025-04-06_snippet_7\n\nLANGUAGE: logtalk\nCODE:\n```\n:- object(Class,\n    instantiates(Metaclass),\n    specializes(Superclass)).\n    ...\n:- end_object.\n```\n\n----------------------------------------\n\nTITLE: Using Parametric Object Proxies in Logtalk\nDESCRIPTION: Demonstrates how to use parametric object proxies when sending a message. This example computes areas for all circle proxies using findall/3.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/userman/objects.rst.txt#2025-04-06_snippet_14\n\nLANGUAGE: prolog\nCODE:\n```\n| ?- findall(Area, {circle(_, _, _)}::area(Area), Areas).\n\nAreas = [4.75291, 43.2412, 0.477836, 103.508, 217.468].\n```\n\n----------------------------------------\n\nTITLE: Reading CSV File Line by Line and Returning Data as List in Logtalk\nDESCRIPTION: Reads a CSV file line by line and returns the data as a list of rows, where each row is a list of fields. Fails if the file cannot be parsed. Requires file name as input and returns the rows as output.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/csv_protocol_0.rst.txt#2025-04-06_snippet_6\n\nLANGUAGE: Logtalk\nCODE:\n```\nread_file_by_line(File,Rows)\n```\n\n----------------------------------------\n\nTITLE: Example Implementation of logtalk_linter_hook/7 for List Append Warnings\nDESCRIPTION: A practical example showing how to implement a custom linter hook to warn about inefficient use of list::append/3 when constructing a list from a head and tail. The hook defines a suspicious_calls warning when list::append/3 is used with a singleton list as first argument.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/refman/predicates/logtalk_linter_hook_7.rst.txt#2025-04-06_snippet_2\n\nLANGUAGE: prolog\nCODE:\n```\n:- multifile(user::logtalk_linter_hook/7).\n% warn about using list::append/3 to construct a list from an head and a tail\nuser::logtalk_linter_hook(\n    list::append(L1,L2,L), suspicious_calls,\n    File, Lines, Type, Entity,\n    suspicious_call(File, Lines, Type, Entity, list::append(L1,L2,L), [L=[Head|L2]])\n) :-\n    nonvar(L1),\n    L1 = [Head].\n```\n\n----------------------------------------\n\nTITLE: Finding Root Using Multi-Threading for Function f4\nDESCRIPTION: Uses multi-threading to concurrently run all root-finding methods for function f4 in the range [-1.0, 2.0] with a tolerance of 1.0e-15. Returns both the root value and the method that found it first.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/threads/functions/NOTES.md#2025-04-06_snippet_14\n\nLANGUAGE: logtalk\nCODE:\n```\nfunction_root::find_root(f4, -1.0, 2.0, 1.0e-15, Zero, Method).\n```\n\n----------------------------------------\n\nTITLE: Help System Basic Usage\nDESCRIPTION: Core predicate that prints instructions on how to use the help tool. Available through logtalk_load(help(loader)).\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/help_0.rst.txt#2025-04-06_snippet_0\n\nLANGUAGE: logtalk\nCODE:\n```\nhelp/0\n```\n\n----------------------------------------\n\nTITLE: Importing Categories in Logtalk Objects\nDESCRIPTION: Demonstrates how to import categories into Logtalk objects, including specifying visibility scopes for imported predicates.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/userman/categories.rst#2025-04-06_snippet_15\n\nLANGUAGE: Logtalk\nCODE:\n```\n:- object(Object,\n    imports([Category1, Category2, ...])).\n    ...\n:- end_object.\n```\n\nLANGUAGE: Logtalk\nCODE:\n```\n:- object(Object,\n    imports(private::Category)).\n    ...\n:- end_object.\n```\n\nLANGUAGE: Logtalk\nCODE:\n```\n:- object(Object,\n    imports(protected::Category)).\n    ...\n:- end_object.\n```\n\nLANGUAGE: Logtalk\nCODE:\n```\n:- object(Object,\n    imports(public::Category)).\n    ...\n:- end_object.\n```\n\n----------------------------------------\n\nTITLE: Disabling Clean Flag in Logtalk\nDESCRIPTION: Sets the 'clean' compiler flag to 'off' for the current Logtalk session. This prevents deletion of intermediate Prolog files generated during compilation, which can be useful for embedding applications or working with large, stable codebases.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/userman/programming.rst#2025-04-06_snippet_19\n\nLANGUAGE: text\nCODE:\n```\n| ?- set_logtalk_flag(clean, off).\n```\n\n----------------------------------------\n\nTITLE: Example Usage of existence_error/2 in Logtalk\nDESCRIPTION: This example demonstrates how to use the existence_error/2 method when an object does not exist. It first checks if the 'payroll' object doesn't exist, then throws an existence error for that object.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/refman/methods/existence_error_2.rst#2025-04-06_snippet_2\n\nLANGUAGE: Prolog\nCODE:\n```\n...,\n\\+ current_object(payroll),\nexistence_error(object, payroll).\n```\n\n----------------------------------------\n\nTITLE: Examples of Using mode/2 Directive in Logtalk\nDESCRIPTION: These examples demonstrate various uses of the mode/2 directive. They show how to specify modes for predicates like atom_concat/3, var/1, and solve/2, along with their expected number of proofs.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/refman/directives/mode_2.rst#2025-04-06_snippet_2\n\nLANGUAGE: Logtalk\nCODE:\n```\n:- mode(atom_concat(-atom, -atom, +atom), one_or_more).\n:- mode(atom_concat(+atom, +atom, -atom), one).\n\n:- mode(var(@term), zero_or_one).\n\n:- mode(solve(+callable, -list(atom)), zero_or_one).\n```\n\n----------------------------------------\n\nTITLE: Area Calculation Example Using Self Messages\nDESCRIPTION: Example demonstrating how to use self messages to calculate an area by accessing width and height through self calls.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/refman/control/send_to_self_1.rst.txt#2025-04-06_snippet_2\n\nLANGUAGE: logtalk\nCODE:\n```\narea(Area) :-\n    ::width(Width),\n    ::height(Height),\n    Area is Width * Height.\n```\n\n----------------------------------------\n\nTITLE: Defining from_goal/2 Predicate in Logtalk\nDESCRIPTION: Constructs an optional term holding a value bound by calling the given closure. Returns an empty optional term if the closure fails or throws an error. Defined as a meta-predicate that calls the provided closure.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/optional_0.rst.txt#2025-04-06_snippet_3\n\nLANGUAGE: Logtalk\nCODE:\n```\nfrom_goal(Closure,Optional)\n```\n\n----------------------------------------\n\nTITLE: Creating an Attributes Category with Dynamic Predicates (Self Context)\nDESCRIPTION: Defines a category that handles dynamic predicates in the context of 'self', meaning each object inheriting from an object importing this category will have its own predicate instances.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/userman/categories.rst.txt#2025-04-06_snippet_3\n\nLANGUAGE: logtalk\nCODE:\n```\n:- category(attributes).\n\n    :- public(attribute/2).\n    :- public(set_attribute/2).\n    :- public(del_attribute/2).\n\n    :- private(attribute_/2).\n    :- dynamic(attribute_/2).\n\n    attribute(Attribute, Value) :-\n        % called in the context of \"self\"\n        ::attribute_(Attribute, Value).\n\n    set_attribute(Attribute, Value) :-\n        % retract old clauses in \"self\"\n        ::retractall(attribute_(Attribute, _)),\n        % assert new clause in \"self\"\n        ::assertz(attribute_(Attribute, Value)).\n\n    del_attribute(Attribute, Value) :-\n        % retract clause in \"self\"\n        ::retract(attribute_(Attribute, Value)).\n\n:- end_category.\n```\n\n----------------------------------------\n\nTITLE: Uses/1 Directive Example Implementation\nDESCRIPTION: Demonstrates practical usage of the uses/1 directive within an object definition, showing how to declare multiple aliases and use them for message sending.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/refman/directives/uses_1.rst#2025-04-06_snippet_2\n\nLANGUAGE: logtalk\nCODE:\n```\n:- object(foo(_HeapType_, _OptionsObject_)).\n\n    :- uses([\n        fast_random as rnd,\n        time(utc) as time,\n        heap(_HeapType_) as heap,\n        _OptionsObject_ as options\n    ]).\n\n    bar :-\n        ...,\n        % the same as fast_random::permutation(L, P)\n        rnd::permutation(L, P),\n        % the same as heap(_HeapType_)::as_heap(L, H)\n        heap::as_heap(L, H),\n        % the same as _OptionsObject_::get(foo, X)\n        options::get(foo, X),\n        % the same as time(utc)::now(T)\n        time::now(T),\n        ...\n```\n\n----------------------------------------\n\nTITLE: Defining a Complementing Category for Hot Patching in Logtalk\nDESCRIPTION: Shows the syntax for creating a category that complements (patches) one or more existing objects, allowing addition of new functionality or replacement of existing predicates.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/userman/categories.rst.txt#2025-04-06_snippet_5\n\nLANGUAGE: logtalk\nCODE:\n```\n:- category(Category,\n    complements([Object1, Object2, ....])).\n    ...\n:- end_category.\n```\n\n----------------------------------------\n\nTITLE: Testing hook object with single goal\nDESCRIPTION: Demonstrates the use of a hook object 'cooked' with a single goal.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/expansion/NOTES.md#2025-04-06_snippet_16\n\nLANGUAGE: logtalk\nCODE:\n```\ncooked << p.\n```\n\n----------------------------------------\n\nTITLE: Using Parametric Object Proxies in Logtalk\nDESCRIPTION: Demonstrates how to use parametric object proxies when sending a message. This example computes areas for all circle proxies using findall/3.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/userman/objects.rst.txt#2025-04-06_snippet_14\n\nLANGUAGE: prolog\nCODE:\n```\n| ?- findall(Area, {circle(_, _, _)}::area(Area), Areas).\n\nAreas = [4.75291, 43.2412, 0.477836, 103.508, 217.468].\n```\n\n----------------------------------------\n\nTITLE: Loading and Profiling Example in Logtalk\nDESCRIPTION: Provides a complete example of loading the profiler, setting flags, loading a sample file, starting profiling, running a query, and viewing results.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/tools/ports_profiler/NOTES.md#2025-04-06_snippet_8\n\nLANGUAGE: Logtalk\nCODE:\n```\n| ?- {ports_profiler(loader)}.\n| ?- set_logtalk_flag(debug, on).\n| ?- logtalk_load(family(loader)).\n| ?- ports_profiler::start.\n| ?- addams::sister(Sister, Sibling).\n| ?- ports_profiler::data.\n```\n\n----------------------------------------\n\nTITLE: Parsing URLs with DCG in Logtalk\nDESCRIPTION: Uses the url object to parse different URL formats and extract their components using DCG rules.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/dcgs/NOTES.md#2025-04-06_snippet_12\n\nLANGUAGE: logtalk\nCODE:\n```\nurl::parse(\"https://logtalk.org\", Components).\n```\n\nLANGUAGE: logtalk\nCODE:\n```\nurl::parse(\"https://logtalk.org/\", Components).\n```\n\nLANGUAGE: logtalk\nCODE:\n```\nurl::parse(\"https://logtalk.org/cvs\", Components).\n```\n\nLANGUAGE: logtalk\nCODE:\n```\nurl::parse(\"https://logtalk.org/cvs.html\", Components).\n```\n\nLANGUAGE: logtalk\nCODE:\n```\nurl::parse(\"http://193.136.64.5/files/update\", Components).\n```\n\n----------------------------------------\n\nTITLE: Text Output Assertion with Options in Logtalk\nDESCRIPTION: Returns an assertion for checking that a temporary file opened with specific options contains the expected text contents. Generates a test assertion usable in unit tests.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/lgtunit_0.rst.txt#2025-04-06_snippet_47\n\nLANGUAGE: logtalk\nCODE:\n```\ntext_output_assertion(Alias,Contents,Options,Assertion)\n```\n\n----------------------------------------\n\nTITLE: Inserting Key-Value Pair into Dictionary in Logtalk\nDESCRIPTION: Inserts a key-value pair into a dictionary, returning the updated dictionary. If the key exists, its value is updated.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/dictionaryp_0.rst.txt#2025-04-06_snippet_5\n\nLANGUAGE: Logtalk\nCODE:\n```\ninsert(OldDictionary,Key,Value,NewDictionary)\n```\n\n----------------------------------------\n\nTITLE: Defining a Reflexive Class in Logtalk\nDESCRIPTION: Syntax for creating a reflexive class that is both an instance of a metaclass and a specialization of a superclass, used in reflective systems.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/userman/objects.rst#2025-04-06_snippet_7\n\nLANGUAGE: logtalk\nCODE:\n```\n:- object(Class,\n    instantiates(Metaclass),\n    specializes(Superclass)).\n    ...\n:- end_object.\n```\n\n----------------------------------------\n\nTITLE: Meta-Predicate Directive Syntax\nDESCRIPTION: Shows the various valid syntax forms for declaring meta-predicates, including single template, multiple templates using conjunction or lists, and templates with entity or module qualifiers.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/refman/directives/meta_predicate_1.rst.txt#2025-04-06_snippet_0\n\nLANGUAGE: logtalk\nCODE:\n```\nmeta_predicate(Template)\nmeta_predicate((Template, ...))\nmeta_predicate([Template, ...])\n\nmeta_predicate(Entity::Template)\nmeta_predicate((Entity::Template, ...))\nmeta_predicate([Entity::Template, ...])\n\nmeta_predicate(Module:Template)\nmeta_predicate((Module:Template, ...))\nmeta_predicate([Module:Template, ...])\n```\n\n----------------------------------------\n\nTITLE: Operator Declaration in Logtalk\nDESCRIPTION: How to declare operators in Logtalk using the op/3 directive. Operators are local to the object or category where they are declared.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/userman/predicates.rst.txt#2025-04-06_snippet_11\n\nLANGUAGE: logtalk\nCODE:\n```\n:- op(Priority, Specifier, Operator).\n```\n\n----------------------------------------\n\nTITLE: Defining Ackermann Function Object in Logtalk\nDESCRIPTION: This code snippet defines a Logtalk object named 'ack' that implements the Ackermann function. It includes object metadata, a public predicate declaration, and the recursive implementation of the function.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/coding/highlight.js/logtalk/default.txt#2025-04-06_snippet_0\n\nLANGUAGE: Logtalk\nCODE:\n```\n:- object(ack).\n\n\t:- info([\n\t\tversion is 1:0:0,\n\t\tauthor is 'Paulo Moura',\n\t\tdate is 2008-3-31,\n\t\tcomment is 'Ackermann function (general recursive function).'\n\t]).\n\n\t:- public(ack/3).\n\t:- mode(ack(+integer, +integer, -integer), one).\n\t:- info(ack/3, [\n\t\tcomment is 'Ackermann function.',\n\t\targnames is ['M', 'N', 'V']\n\t]).\n\n\tack(0, N, V) :-\n\t\t!,\n\t\tV is N + 1.\n\tack(M, 0, V) :-\n\t\t!,\n\t\tM2 is M - 1,\n\t\tack(M2, 1, V).\n\tack(M, N, V) :-\n\t\tM2 is M - 1,\n\t\tN2 is N - 1,\n\t\tack(M, N2, V2),\n\t\tack(M2, V2, V).\n\n:- end_object.\n```\n\n----------------------------------------\n\nTITLE: Generating List Element in HTML\nDESCRIPTION: Example of generating an ordered list with type attribute and three list items\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/libraries/html.rst#2025-04-06_snippet_0\n\nLANGUAGE: prolog\nCODE:\n```\nol([type-a], [li(foo), li(bar), li(baz)])\n```\n\n----------------------------------------\n\nTITLE: Testing the Random Library in Logtalk\nDESCRIPTION: Command to load and run the test suite for the random library predicates.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/libraries/random.rst.txt#2025-04-06_snippet_1\n\nLANGUAGE: prolog\nCODE:\n```\n| ?- logtalk_load(random(tester)).\n```\n\n----------------------------------------\n\nTITLE: Using Lambda Expressions with Meta-Predicates in Logtalk\nDESCRIPTION: Example showing how to use lambda expressions as meta-predicate arguments to avoid writing auxiliary predicates. The example doubles the elements of a list using the (>>)/2 operator to connect lambda parameters to the lambda goal.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/userman/predicates.rst.txt#2025-04-06_snippet_30\n\nLANGUAGE: logtalk\nCODE:\n```\n| ?- meta::map([X,Y]>>(Y is 2*X), [1,2,3], Ys).\nYs = [2,4,6]\nyes\n```\n\n----------------------------------------\n\nTITLE: Basic Uses/2 Directive Examples\nDESCRIPTION: Demonstrates basic usage of the uses/2 directive with list, store, and user objects.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/refman/directives/uses_2.rst#2025-04-06_snippet_2\n\nLANGUAGE: logtalk\nCODE:\n```\n:- uses(list,  [append/3, member/2]).\n:- uses(store, [data/2]).\n:- uses(user,  [table/4]).\n\nfoo :-\n    ...,\n    % the same as findall(X, list::member(X, L), A)\n    findall(X, member(X, L), A),\n    % the same as list::append(A, B, C)\n    append(A, B, C),\n    % the same as store::assertz(data(X, C))\n    assertz(data(X, C)),\n    % call the table/4 predicate in \"user\"\n    table(X, Y, Z, T),\n    ...\n```\n\n----------------------------------------\n\nTITLE: Debug Message Prefix Hook in Logtalk\nDESCRIPTION: Example of customizing debug message prefix using message_prefix_stream/4 hook predicate.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/userman/debugging.rst#2025-04-06_snippet_25\n\nLANGUAGE: logtalk\nCODE:\n```\n:- multifile(logtalk::message_prefix_stream/4).\n:- dynamic(logtalk::message_prefix_stream/4).\n\nlogtalk::message_prefix_stream(debug, core, '(dbg) ', user_error).\n```\n\n----------------------------------------\n\nTITLE: Debug Message Prefix Hook in Logtalk\nDESCRIPTION: Example of customizing debug message prefix using message_prefix_stream/4 hook predicate.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/userman/debugging.rst#2025-04-06_snippet_25\n\nLANGUAGE: logtalk\nCODE:\n```\n:- multifile(logtalk::message_prefix_stream/4).\n:- dynamic(logtalk::message_prefix_stream/4).\n\nlogtalk::message_prefix_stream(debug, core, '(dbg) ', user_error).\n```\n\n----------------------------------------\n\nTITLE: Creating and Drawing Dynamic Circle with API2\nDESCRIPTION: Creates a new dynamic circle using drawing_api_2, resizes it by 25%, and draws it. Demonstrates the flexibility of the Bridge pattern.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/design_patterns/structural/bridge/NOTES.md#2025-04-06_snippet_3\n\nLANGUAGE: logtalk\nCODE:\n```\ncircle::new(Circle2, [drawing_api(drawing_api_2), x(5.0), y(7.0), radius(11.0)]),\nCircle2::(resize(25), draw).\n```\n\n----------------------------------------\n\nTITLE: Defining Coinductive Directive Syntax in Logtalk\nDESCRIPTION: Demonstrates the various syntax forms for the coinductive/1 directive, which can accept predicate indicators, non-terminal indicators, or templates in different formats.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/refman/directives/coinductive_1.rst#2025-04-06_snippet_0\n\nLANGUAGE: logtalk\nCODE:\n```\ncoinductive(Name/Arity)\ncoinductive((Name/Arity, ...))\ncoinductive([Name/Arity, ...])\n\ncoinductive(Name//Arity)\ncoinductive((Name//Arity, ...))\ncoinductive([Name//Arity, ...])\n\ncoinductive(Template)\ncoinductive((Template1, ...))\ncoinductive([Template1, ...])\n```\n\n----------------------------------------\n\nTITLE: Retrieving Object Properties in Logtalk\nDESCRIPTION: Demonstrates using the object_property/2 built-in predicate to query various properties of defined objects, such as static/dynamic status, file information, and predicate details.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/userman/objects.rst.txt#2025-04-06_snippet_28\n\nLANGUAGE: text\nCODE:\n```\n| ?- object_property(Object, Property).\n```\n\n----------------------------------------\n\nTITLE: Four-Threaded Quicksort\nDESCRIPTION: Generates a list of 20000 random floats and performs quicksort using four threads. Demonstrates potential performance improvements with increased parallelism.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/threads/sorting/NOTES.md#2025-04-06_snippet_7\n\nLANGUAGE: logtalk\nCODE:\n```\ngenerator::list(20000, List), time(qsort(4)::qsort(List, Sorted)).\n```\n\n----------------------------------------\n\nTITLE: Running Unit Tests in Logtalk\nDESCRIPTION: Runs all defined unit tests and writes the results to the current output stream. This predicate executes without arguments.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/lgtunit_0.rst.txt#2025-04-06_snippet_1\n\nLANGUAGE: Logtalk\nCODE:\n```\nrun\n```\n\n----------------------------------------\n\nTITLE: Entity Local Operators Example in Logtalk\nDESCRIPTION: Complete example showing local operator declaration within an object, including initialization and predicate definitions for writing and reading terms.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/refman/directives/op_3.rst.txt#2025-04-06_snippet_3\n\nLANGUAGE: logtalk\nCODE:\n```\n:- initialization((write(<=>(1,2)), nl)).\n\n:- object(ops).\n\n    :- op(700, xfx, <=>).\n\n    :- public(w/1).\n    w(Term) :-\n        write(Term), nl.\n\n    :- public(r/1).\n    r(Term) :-\n        read(Term).\n\n:- end_object.\n```\n\n----------------------------------------\n\nTITLE: Bypassing Logtalk Compiler in Grammar Rules\nDESCRIPTION: Example of using the external call control construct to bypass the Logtalk compiler when calling a goal from a grammar rule body.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/userman/predicates.rst#2025-04-06_snippet_44\n\nLANGUAGE: logtalk\nCODE:\n```\nbar :-\n    write('bar predicate called'), nl.\n\n\n:- object(bypass).\n\n    :- public(foo//0).\n\n    foo --> {{bar}}.\n\n:- end_object.\n```\n\n----------------------------------------\n\nTITLE: Creating Set from List in Logtalk\nDESCRIPTION: Shows how to create a set from a list of terms, removing duplicates, using the as_set/2 predicate.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/library/sets/NOTES.md#2025-04-06_snippet_3\n\nLANGUAGE: Logtalk\nCODE:\n```\n| ?- set::as_set([1,3,2,1,2], Set).\nSet = [1, 2, 3]\nyes\n```\n\n----------------------------------------\n\nTITLE: Bypassing Compiler for Meta-Predicate Calls\nDESCRIPTION: Shows how to use the external call control construct to bypass the Logtalk compiler when calling Prolog meta-predicates without specifying meta-argument information.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/userman/predicates.rst#2025-04-06_snippet_65\n\nLANGUAGE: prolog\nCODE:\n```\n... :- {foo:bar(..., ...)}, ...\n```\n\n----------------------------------------\n\nTITLE: Defining normalize_range/2 Predicate for Number Lists in Logtalk\nDESCRIPTION: Normalizes a list of numbers to the range [0.0, 1.0]. The caller must handle arithmetic exceptions if the list is not normalizable.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/numberlistp_0.rst.txt#2025-04-06_snippet_15\n\nLANGUAGE: Logtalk\nCODE:\n```\nnormalize_range(List,NormalizedList)\n```\n\n----------------------------------------\n\nTITLE: Generating Documentation for a Logtalk Application\nDESCRIPTION: Example workflow for generating documentation for an application named 'my_app'. First loads the application, then loads the lgtdoc tool, and finally generates documentation for the application.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/devtools/lgtdoc.rst#2025-04-06_snippet_4\n\nLANGUAGE: logtalk\nCODE:\n```\n| ?- {my_app(loader)}.\n...\n\n| ?- {lgtdoc(loader)}.\n...\n\n| ?- lgtdoc::library(my_app).\n...\n```\n\n----------------------------------------\n\nTITLE: Testing Context Switch with List Member Example\nDESCRIPTION: Demonstrates how to use the context switch operator to call the member/2 predicate within the context of the list object.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/refman/control/context_switch_2.rst.txt#2025-04-06_snippet_1\n\nLANGUAGE: logtalk\nCODE:\n```\ntest(member) :-\n    list << member(1, [1]).\n```\n\n----------------------------------------\n\nTITLE: Defining a Calculator Object with DCG Rules in Logtalk\nDESCRIPTION: This snippet demonstrates how to define an object named 'calculator' that encapsulates DCG rules for parsing simple arithmetic expressions. It includes rules for parsing expressions, terms, and numbers.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/userman/predicates.rst#2025-04-06_snippet_38\n\nLANGUAGE: Logtalk\nCODE:\n```\n:- object(calculator).\n\n    :- public(parse/2).\n\n    parse(Expression, Value) :-\n        phrase(expr(Value), Expression).\n\n    expr(Z) --> term(X), \"+\", expr(Y), {Z is X + Y}.\n    expr(Z) --> term(X), \"-\", expr(Y), {Z is X - Y}.\n    expr(X) --> term(X).\n\n    term(Z) --> number(X), \"*\", term(Y), {Z is X * Y}.\n    term(Z) --> number(X), \"/\", term(Y), {Z is X / Y}.\n    term(Z) --> number(Z).\n\n    number(C) --> \"+\", number(C).\n    number(C) --> \"-\", number(X), {C is -X}.\n    number(X) --> [C], {0'0 =< C, C =< 0'9, X is C - 0'0}.\n\n:- end_object.\n```\n\n----------------------------------------\n\nTITLE: Configuring Event Generation and Lint Checks in Logtalk Object\nDESCRIPTION: Demonstrates using set_logtalk_flag/2 within an object to enable event generation and manage suspicious call lint checks for specific predicates.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/refman/directives/set_logtalk_flag_2.rst#2025-04-06_snippet_2\n\nLANGUAGE: Logtalk\nCODE:\n```\n:- object(...).\n\n    % generate events for messages sent from this object:\n    :- set_logtalk_flag(events, allow).\n    ...\n\n    % turn off suspicious call lint checks for the next predicate:\n    :- set_logtalk_flag(suspicious_calls, silent).\n    foo :-\n        ...\n    :- set_logtalk_flag(suspicious_calls, warning).\n    ...\n```\n\n----------------------------------------\n\nTITLE: Automating Answers to Questions Using question_hook in Logtalk\nDESCRIPTION: This category demonstrates how to use the question_hook/6 predicate to provide fixed answers to specific questions, useful for automated testing when manual input is not feasible.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/userman/printing.rst.txt#2025-04-06_snippet_9\n\nLANGUAGE: logtalk\nCODE:\n```\n:- category(hitchhikers_fixed_answers).\n\n    :- multifile(logtalk::question_hook/6).\n    :- dynamic(logtalk::question_hook/6).\n\n    logtalk::question_hook(ultimate_question, question, hitchhikers, _, _, 42).\n\n:- end_category.\n```\n\n----------------------------------------\n\nTITLE: Inserting Multiple Pairs into Heap in Logtalk\nDESCRIPTION: Inserts a list of key-value pairs into a heap, returning the updated heap. Takes a list of pairs, the current heap, and returns the new heap.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/heapp_0.rst.txt#2025-04-06_snippet_1\n\nLANGUAGE: Logtalk\nCODE:\n```\ninsert_all(List,Heap,NewHeap)\n```\n\n----------------------------------------\n\nTITLE: Two-Threaded Prime Calculation\nDESCRIPTION: Calculates prime numbers in range 1-500000 using two threads and measures execution time.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/threads/primes/NOTES.md#2025-04-06_snippet_3\n\nLANGUAGE: logtalk\nCODE:\n```\ntime(primes(2)::primes(1, 500000, Primes)).\n```\n\n----------------------------------------\n\nTITLE: Loading Logtalk Grammars Library\nDESCRIPTION: Command to load all entities in the grammars library using the loader file.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/libraries/grammars.rst#2025-04-06_snippet_0\n\nLANGUAGE: logtalk\nCODE:\n```\n| ?- logtalk_load(grammars(loader)).\n```\n\n----------------------------------------\n\nTITLE: Testing Meta Compiler Library in Logtalk\nDESCRIPTION: This snippet demonstrates how to load the tester.lgt file to test the predicates in the meta_compiler library.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/libraries/meta_compiler.rst.txt#2025-04-06_snippet_1\n\nLANGUAGE: Prolog\nCODE:\n```\n| ?- logtalk_load(meta_compiler(tester)).\n```\n\n----------------------------------------\n\nTITLE: Reading Terms from Character Codes in Logtalk\nDESCRIPTION: Predicates for reading Prolog terms from character code lists, with variants for handling remaining codes and custom read options.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/term_io_protocol_0.rst.txt#2025-04-06_snippet_2\n\nLANGUAGE: Logtalk\nCODE:\n```\nread_term_from_codes(Codes,Term,Options)\n```\n\nLANGUAGE: Logtalk\nCODE:\n```\nread_term_from_codes(Codes,Term,Tail,Options)\n```\n\nLANGUAGE: Logtalk\nCODE:\n```\nread_from_codes(Codes,Term)\n```\n\n----------------------------------------\n\nTITLE: Test Selection Example in Logtalk\nDESCRIPTION: Example of using the (+)/1 operator to selectively run specific tests during debugging.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/devtools/lgtunit.rst.txt#2025-04-06_snippet_12\n\nLANGUAGE: logtalk\nCODE:\n```\n:- object(tests,\n    extends(lgtunit)).\n\n    cover(ack).\n\n    test(ack_1, true(Result == 11)) :-\n        ack::ack(2, 4, Result).\n\n    + test(ack_2, true(Result == 61)) :-\n        ack::ack(3, 3, Result).\n\n    test(ack_3, true(Result == 125)) :-\n        ack::ack(3, 4, Result).\n\n:- end_object.\n```\n\n----------------------------------------\n\nTITLE: QuickCheck Type Property Testing in Logtalk\nDESCRIPTION: Example of using forall/3 with QuickCheck to test type properties against arbitrary type instances.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/devtools/lgtunit.rst.txt#2025-04-06_snippet_9\n\nLANGUAGE: logtalk\nCODE:\n```\n?- forall(\n    (type::type(Type), ground(Type), type::arbitrary(Type)),\n    lgtunit::quick_check(type::valid({Type}, +Type))\n).\n```\n\n----------------------------------------\n\nTITLE: Examples of Using logtalk_load/1 Predicate\nDESCRIPTION: Demonstrates how to use the logtalk_load/1 predicate to compile and load source files from the current directory or from a library directory, including loading multiple files at once.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/refman/predicates/logtalk_load_1.rst#2025-04-06_snippet_2\n\nLANGUAGE: prolog\nCODE:\n```\n% compile and load the \"set\" source file in the\n% current directory:\n| ?- logtalk_load(set).\n\n% compile and load the \"tree\" source file in the\n% \"types\" library directory:\n| ?- logtalk_load(types(tree)).\n\n% compile and load the \"listp\" and \"list\" source\n% files in the current directory:\n| ?- logtalk_load([listp, list]).\n```\n\n----------------------------------------\n\nTITLE: Sending a Message to an Object in Logtalk\nDESCRIPTION: Demonstrates the syntax for sending a message to an object using the control_send_to_object_2 control construct. The message must match a public predicate declared for the receiving object.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/userman/messages.rst#2025-04-06_snippet_1\n\nLANGUAGE: Logtalk\nCODE:\n```\n..., Object::Message, ...\n```\n\n----------------------------------------\n\nTITLE: Declaring Non-Standard Prolog Built-in Predicates in Logtalk\nDESCRIPTION: Shows how to declare usage of non-standard Prolog built-in predicates to document dependencies and silence compiler warnings.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/userman/predicates.rst#2025-04-06_snippet_53\n\nLANGUAGE: logtalk\nCODE:\n```\n:- uses(user, [atom_string/2])\n```\n\n----------------------------------------\n\nTITLE: Generating a Complete HTML5 Document\nDESCRIPTION: Demonstrates how to generate a complete HTML5 document from Prolog terms and write it to a file.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/libraries/html.rst.txt#2025-04-06_snippet_6\n\nLANGUAGE: prolog\nCODE:\n```\n| ?- html5::generate(\n            file('hello.html'),\n            html([lang=en], [head(title('Hello world!')), body(p('Bye!'))])\n        ).\n```\n\n----------------------------------------\n\nTITLE: Defining Parameterized Heap Object in Logtalk\nDESCRIPTION: Declares a heap object parameterized by the order (< or >) used to compare keys. The object implements the heapp protocol and extends the compound object.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/heap_1.rst.txt#2025-04-06_snippet_0\n\nLANGUAGE: Logtalk\nCODE:\n```\nheap(Order)\n```\n\n----------------------------------------\n\nTITLE: Implementing Options in Logtalk Object\nDESCRIPTION: Example showing how to implement options handling in a Logtalk object, including default options, option validation, and option usage. Demonstrates importing the options category and implementing required predicates.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/libraries/options.rst#2025-04-06_snippet_2\n\nLANGUAGE: logtalk\nCODE:\n```\n:- object(foo,\n    imports(options)).\n\n    :- uses(type, [\n        valid/2\n    ]).\n\n    :- public(p/0).\n    p :-\n        % use default options\n        p([]).\n\n    :- public(p/1).\n    p(UserOptions) :-\n        ^^check_options(UserOptions),\n        % construct the full set of options from\n        % the user options and the default options\n        ^^merge_options(UserOptions, Options),\n        ...\n        % query an option\n        ^^option(baz(Boolean), Options),\n        q(Boolean),\n        ...\n\n    default_option(baz(true)).\n    ...\n\n    valid_option(baz(Boolean)) :-\n        valid(boolean, Boolean).\n    ...\n\n:- end_object.\n```\n\n----------------------------------------\n\nTITLE: Testing Help Tool in Logtalk\nDESCRIPTION: Command to load and run the help tool test suite\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/tools/help/NOTES.md#2025-04-06_snippet_1\n\nLANGUAGE: logtalk\nCODE:\n```\n| ?- logtalk_load(help(tester)).\n```\n\n----------------------------------------\n\nTITLE: Statistical Protocol Predicate Signatures\nDESCRIPTION: Defines the interface for statistical calculations including basic operations (sum, product, min/max) and advanced statistics (variance, skewness, kurtosis). Each predicate operates on lists of numbers and fails for empty lists.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/statisticsp_0.rst.txt#2025-04-06_snippet_0\n\nLANGUAGE: logtalk\nCODE:\n```\nproduct(+list(number), -number)\nsum(+list(number), -number)\nmin(+list, -number)\nmax(+list, -number)\nmin_max(+list(number), -number, -number)\nrange(+list, -number)\narithmetic_mean(+list(number), -float)\ngeometric_mean(+list(number), -float)\nharmonic_mean(+list(number), -float)\nweighted_mean(+list(number), +list(number), -float)\nmedian(+list(number), -float)\nmodes(+list(number), -list(number))\naverage_deviation(+list(number), +float, -float)\nmean_deviation(+list(number), -float)\nmedian_deviation(+list(number), -float)\nstandard_deviation(+list(number), -float)\ncoefficient_of_variation(+list(number), -float)\nrelative_standard_deviation(+list(number), -float)\nskewness(+list(number), -float)\nkurtosis(+list(number), -float)\nvariance(+list(number), -float)\nz_normalization(+list(number), -list(float))\nfractile(+float, +list(integer), -integer)\nfractile(+float, +list(float), -float)\nvalid(+list)\n```\n\n----------------------------------------\n\nTITLE: Foreign Library Loading Term Expansion\nDESCRIPTION: Example of handling proprietary Prolog directives for loading foreign libraries. The directive is processed for its side effect but not copied to the generated Prolog code.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/userman/migration.rst#2025-04-06_snippet_9\n\nLANGUAGE: prolog\nCODE:\n```\n'$lgt_prolog_term_expansion'(\n           (:- load_foreign_files(Files,Libs,InitRoutine)),\n           []\n   ) :-\n       load_foreign_files(Files,Libs,InitRoutine).\n```\n\n----------------------------------------\n\nTITLE: Declaring Synchronized Predicates in Logtalk\nDESCRIPTION: Examples showing how to declare synchronized predicates using the synchronized/1 directive. Synchronized predicates ensure thread-safety when working with multi-threaded applications.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/userman/predicates.rst.txt#2025-04-06_snippet_22\n\nLANGUAGE: logtalk\nCODE:\n```\n:- synchronized(write_log_entry/2).\n:- synchronized([produce/1, consume/1]).\n```\n\n----------------------------------------\n\nTITLE: Stopping Debug Mode in Logtalk\nDESCRIPTION: Shows how to stop the debugger using the debugger's nodebug/0 predicate. Note that this does not remove any defined breakpoints or log points.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/userman/debugging.rst#2025-04-06_snippet_21\n\nLANGUAGE: text\nCODE:\n```\n| ?- debugger::nodebug.\n\nyes\n```\n\n----------------------------------------\n\nTITLE: Sending a Message to Self in Logtalk\nDESCRIPTION: Illustrates the syntax for sending a message to self (the same object that received the original message) using the control_send_to_self_1 control construct.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/userman/messages.rst#2025-04-06_snippet_3\n\nLANGUAGE: Logtalk\nCODE:\n```\n..., ::Message, ....\n```\n\n----------------------------------------\n\nTITLE: Checking Brick Positions\nDESCRIPTION: This code checks the positions of all bricks after moving the stack.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/bricks/NOTES.md#2025-04-06_snippet_9\n\nLANGUAGE: logtalk\nCODE:\n```\na::position(Xa, Ya), b::position(Xb, Yb), c::position(Xc, Yc), d::position(Xd, Yd).\n```\n\n----------------------------------------\n\nTITLE: Executing Car Travel Journey\nDESCRIPTION: Calls the journey predicate on the travel_by_car object to print the steps for a car trip.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/design_patterns/behavioral/template_method/NOTES.md#2025-04-06_snippet_2\n\nLANGUAGE: logtalk\nCODE:\n```\ntravel_by_car::journey.\n```\n\n----------------------------------------\n\nTITLE: Examples of Using logtalk_load/1 Predicate\nDESCRIPTION: Demonstrates how to use the logtalk_load/1 predicate to compile and load source files from the current directory or from a library directory, including loading multiple files at once.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/refman/predicates/logtalk_load_1.rst#2025-04-06_snippet_2\n\nLANGUAGE: prolog\nCODE:\n```\n% compile and load the \"set\" source file in the\n% current directory:\n| ?- logtalk_load(set).\n\n% compile and load the \"tree\" source file in the\n% \"types\" library directory:\n| ?- logtalk_load(types(tree)).\n\n% compile and load the \"listp\" and \"list\" source\n% files in the current directory:\n| ?- logtalk_load([listp, list]).\n```\n\n----------------------------------------\n\nTITLE: Dictionary Map with Result in Logtalk\nDESCRIPTION: Maps a closure over dictionary key-value pairs, returning a new dictionary. Uses static compilation and works with a callable closure.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/dictionaryp_0.rst.txt#2025-04-06_snippet_25\n\nLANGUAGE: logtalk\nCODE:\n```\nmap(@callable,+dictionary,-dictionary) - zero_or_more\n```\n\n----------------------------------------\n\nTITLE: Concurrent Function Root Finding Using Threads in Logtalk\nDESCRIPTION: Shows how to use threaded/1 to implement or-parallelism by trying multiple root-finding methods concurrently.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/userman/threads.rst#2025-04-06_snippet_2\n\nLANGUAGE: Logtalk\nCODE:\n```\nfind_root(Function, A, B, Error, Zero) :-\n    threaded((\n        bisection::find_root(Function, A, B, Error, Zero)\n    ;   newton::find_root(Function, A, B, Error, Zero)\n    ;   muller::find_root(Function, A, B, Error, Zero)\n    )).\n```\n\n----------------------------------------\n\nTITLE: Defining prove/3 predicate for Logtalk interpreter protocol\nDESCRIPTION: Specifies the prove/3 predicate which attempts to prove a goal in a given database within a specified depth limit. It takes a goal, a depth limit, and a database as input and can return zero or more proofs.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/interpreterp_0.rst.txt#2025-04-06_snippet_1\n\nLANGUAGE: Logtalk\nCODE:\n```\nprove(Goal,Limit,DB)\n```\n\n----------------------------------------\n\nTITLE: Defining Meta Non-Terminal in Logtalk\nDESCRIPTION: Example of declaring and defining a meta non-terminal for zero or more occurrences of a given closure.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/userman/predicates.rst#2025-04-06_snippet_43\n\nLANGUAGE: logtalk\nCODE:\n```\n:- meta_non_terminal(zero_or_more(1, *)).\n\nzero_or_more(Closure, [Terminal| Terminals]) -->\n    call(Closure, Terminal), !, zero_or_more(Closure, Terminals).\nzero_or_more(_, []) -->\n    [].\n```\n\n----------------------------------------\n\nTITLE: Constructing Expected Term from Goal with Default Error in Logtalk\nDESCRIPTION: Constructs an expected term holding a value bound by calling the given goal. If the goal fails, it returns an expected term with the atom 'fail'. If the goal throws an error, it returns that error in the expected term.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/expected_0.rst.txt#2025-04-06_snippet_3\n\nLANGUAGE: Logtalk\nCODE:\n```\nfrom_goal(Goal,Value,Expected)\n```\n\n----------------------------------------\n\nTITLE: Integrating Circle Function Using QuadRec2D with 16 Threads\nDESCRIPTION: Performs integration of the circle function over a square domain using quadrec2d with 16 threads and measures execution time.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/threads/integration2d/NOTES.md#2025-04-06_snippet_7\n\nLANGUAGE: logtalk\nCODE:\n```\ntime(quadrec2d(16)::integrate(circle, -2, 2, -2, 2, 2, 2.5e-10, Integral)).\n```\n\n----------------------------------------\n\nTITLE: List Protocol Append Operation\nDESCRIPTION: Predicate for appending multiple lists. Takes a list of lists as input and produces a single concatenated list.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/listp_0.rst.txt#2025-04-06_snippet_0\n\nLANGUAGE: logtalk\nCODE:\n```\nappend(Lists,Concatenation)\n```\n\n----------------------------------------\n\nTITLE: Defining a Basic Category in Logtalk\nDESCRIPTION: Shows the basic syntax for defining a self-contained category that doesn't depend on any other Logtalk entity.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/userman/categories.rst.txt#2025-04-06_snippet_0\n\nLANGUAGE: logtalk\nCODE:\n```\n:- category(Category).\n    ...\n:- end_category.\n```\n\n----------------------------------------\n\nTITLE: Loading Ports Profiler in Logtalk\nDESCRIPTION: Loads the ports_profiler tool in Logtalk. This is required before using the profiler.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/tools/ports_profiler/NOTES.md#2025-04-06_snippet_0\n\nLANGUAGE: Logtalk\nCODE:\n```\n| ?- logtalk_load(ports_profiler(loader)).\n```\n\n----------------------------------------\n\nTITLE: Creating a Comprehensive Benchmarking Utility for Logtalk/Prolog\nDESCRIPTION: A more comprehensive benchmarking predicate that measures CPU time, calculates the average execution time per call, and computes the number of calls per second for a given goal.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/userman/messages.rst.txt#2025-04-06_snippet_10\n\nLANGUAGE: Prolog\nCODE:\n```\nbenchmark(Goal) :-\n    % some sufficiently large number of repetitions\n    N = 10000000,\n    write('Number of repetitions: '), write(N), nl,\n    % replace by your Prolog-specific predicate\n    get_cpu_time(Seconds1),\n    benchmark(N, Goal),\n    get_cpu_time(Seconds2),\n    Average is (Seconds2 - Seconds1)/N,\n    write('Average time per call: '), write(Average), write(' seconds'), nl,\n    Speed is 1.0/Average,\n    write('Number of calls per second: '), write(Speed), nl.\n```\n\n----------------------------------------\n\nTITLE: Setting Spy Point for Stop Watch in Logtalk\nDESCRIPTION: Configures the stop_watch to spy specifically on the length/2 predicate of the list object.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/profiling/NOTES.md#2025-04-06_snippet_9\n\nLANGUAGE: logtalk\nCODE:\n```\nstop_watch::set_spy_point(_, list, length(_, _), _).\n```\n\n----------------------------------------\n\nTITLE: Implementing Concrete Class in Logtalk\nDESCRIPTION: Defines the class object that specializes abstract_class and adds predicates for instantiable classes. It serves as the root of the instantiation graph and default meta-class for instantiable classes.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/tutorial/reflection.rst#2025-04-06_snippet_2\n\nLANGUAGE: logtalk\nCODE:\n```\n:- object(class,\n    instantiates(class),\n    specializes(abstract_class)).\n\n    % predicates common to all instantiable classes\n\n:- end_object.\n```\n\n----------------------------------------\n\nTITLE: Implementing Protocol in Category\nDESCRIPTION: Demonstrates how to implement a protocol in a Logtalk category. Categories are used to implement cross-cutting functionality.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/userman/protocols.rst#2025-04-06_snippet_14\n\nLANGUAGE: logtalk\nCODE:\n```\n:- category(Object,\n    implements(Protocol)).\n    ...\n:- end_category.\n```\n\n----------------------------------------\n\nTITLE: Benchmarking Logtalk Message Sending Performance\nDESCRIPTION: Example command for measuring the performance of Logtalk message sending by benchmarking a list length calculation. This can be used to compare performance across different Prolog compilers.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/userman/messages.rst#2025-04-06_snippet_12\n\nLANGUAGE: text\nCODE:\n```\n| ?- benchmark(list::length([1,2,3,4,5,6,7,8,9,0], _)).\n```\n\n----------------------------------------\n\nTITLE: Loading the Integration Example in Logtalk\nDESCRIPTION: Loads the integration example module that contains the implementation of adaptive quadrature methods for numerical integration.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/threads/integration/NOTES.md#2025-04-06_snippet_1\n\nLANGUAGE: logtalk\nCODE:\n```\nlogtalk_load(integration(loader)).\n```\n\n----------------------------------------\n\nTITLE: Accessing Execution Context in Logtalk Objects\nDESCRIPTION: Example demonstrating the use of self/1, sender/1, and this/1 methods to access object execution context.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/userman/predicates.rst#2025-04-06_snippet_46\n\nLANGUAGE: logtalk\nCODE:\n```\n:- object(test).\n\n    :- public(test/0).\n\n    test :-\n        this(This),\n        write('Calling predicate definition in '),\n        writeq(This), nl,\n        self(Self),\n        write('to answer a message received by '),\n        writeq(Self), nl,\n        sender(Sender),\n        write('that was sent by '),\n        writeq(Sender), nl, nl.\n\n:- end_object.\n\n\n:- object(descendant,\n    extends(test)).\n\n:- end_object.\n```\n\n----------------------------------------\n\nTITLE: Loading Hierarchies Library in Logtalk\nDESCRIPTION: Command to load all entities in the hierarchies library using the loader.lgt file\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/libraries/hierarchies.rst.txt#2025-04-06_snippet_0\n\nLANGUAGE: logtalk\nCODE:\n```\n| ?- logtalk_load(hierarchies(loader)).\n```\n\n----------------------------------------\n\nTITLE: Applying Closure to Queue Elements in Logtalk\nDESCRIPTION: Predicate to apply a closure to all elements of a queue. It takes a closure and a queue as input.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/queuep_0.rst.txt#2025-04-06_snippet_11\n\nLANGUAGE: Logtalk\nCODE:\n```\nmap(Closure,Queue)\n```\n\n----------------------------------------\n\nTITLE: Example Usage of built_in/0 Directive in Logtalk\nDESCRIPTION: Demonstrates how to use the built_in/0 directive in a Logtalk entity. The directive is prefixed with ':-' as per Prolog-style syntax conventions.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/refman/directives/built_in_0.rst#2025-04-06_snippet_2\n\nLANGUAGE: logtalk\nCODE:\n```\n:- built_in.\n```\n\n----------------------------------------\n\nTITLE: Loading Logtalk Loops Library\nDESCRIPTION: Command to load the main entities of the loops library using the loader.lgt file\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/libraries/loops.rst#2025-04-06_snippet_0\n\nLANGUAGE: logtalk\nCODE:\n```\n| ?- logtalk_load(loops(loader)).\n```\n\n----------------------------------------\n\nTITLE: Defining Classes in Logtalk\nDESCRIPTION: Syntax for creating classes in Logtalk. The directive can be used with different combinations of options to implement protocols, import categories, and specialize other classes.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/refman/directives/object_1_5.rst#2025-04-06_snippet_3\n\nLANGUAGE: logtalk\nCODE:\n```\nobject(Object,\n    specializes(Classes))\n\nobject(Object,\n    implements(Protocols),\n    specializes(Classes))\n\nobject(Object,\n    imports(Categories),\n    specializes(Classes))\n\nobject(Object,\n    implements(Protocols),\n    imports(Categories),\n    specializes(Classes))\n```\n\n----------------------------------------\n\nTITLE: Specifying Correct Meta-Predicate Templates in Logtalk\nDESCRIPTION: Shows how to properly specify meta-predicate templates within Logtalk objects to correctly handle module meta-predicates with ambiguous specifications.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/userman/predicates.rst#2025-04-06_snippet_64\n\nLANGUAGE: prolog\nCODE:\n```\n:- meta_predicate(foo:bar(*, *)).\n\n% or\n\n:- meta_predicate(foo:bar(*, 0)).\n```\n\n----------------------------------------\n\nTITLE: Defining Classes with Metaclasses in Logtalk\nDESCRIPTION: Syntax for creating classes with metaclasses in Logtalk. The directive can be used with different combinations of options to implement protocols, import categories, instantiate metaclasses, and specialize other classes.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/refman/directives/object_1_5.rst#2025-04-06_snippet_4\n\nLANGUAGE: logtalk\nCODE:\n```\nobject(Object,\n    instantiates(Classes),\n    specializes(Classes))\n\nobject(Object,\n    implements(Protocols),\n    instantiates(Classes),\n    specializes(Classes))\n\nobject(Object,\n    imports(Categories),\n    instantiates(Classes),\n    specializes(Classes))\n\nobject(Object,\n    implements(Protocols),\n    imports(Categories),\n    instantiates(Classes),\n    specializes(Classes))\n```\n\n----------------------------------------\n\nTITLE: Finding Root Using Multi-Threading for Function f3\nDESCRIPTION: Uses multi-threading to concurrently run all root-finding methods for function f3 in the range [0.0, 3.0] with a tolerance of 1.0e-15. Returns both the root value and the method that found it first.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/threads/functions/NOTES.md#2025-04-06_snippet_13\n\nLANGUAGE: logtalk\nCODE:\n```\nfunction_root::find_root(f3, 0.0, 3.0, 1.0e-15, Zero, Method).\n```\n\n----------------------------------------\n\nTITLE: Defining Logtalk3 Grammar Rules in BNF\nDESCRIPTION: Specifies the grammar rules for various Logtalk3 constructs including predicate modes, entity information, and line counts. These rules define the structure of Logtalk3 code elements and their components.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/refman/grammar.rst#2025-04-06_snippet_8\n\nLANGUAGE: BNF\nCODE:\n```\n\"mode(\" ( predicate_mode_term | non_terminal_mode_term ) \",\" number_of_proofs \")\"\n| \"info(\" list \")\"\n| \"number_of_clauses(\" integer \")\"\n| \"number_of_rules(\" integer \")\"\n| \"declared_in(\" entity_identifier \",\" line_count \")\"\n| \"defined_in(\" ( object_identifier | category_identifier ) \",\" line_count \")\"\n| \"redefined_from(\" ( object_identifier | category_identifier ) \",\" line_count \")\"\n| \"alias_declared_in(\" entity_identifier \",\" line_count \")\"\n\nline_count ::=\n   integer\n```\n\n----------------------------------------\n\nTITLE: Running Multi-threaded Takeuchi Function\nDESCRIPTION: This snippet demonstrates running the multi-threaded version of the Takeuchi function with input parameters (18, 12, 6) and timing the execution.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/threads/tak/NOTES.md#2025-04-06_snippet_3\n\nLANGUAGE: logtalk\nCODE:\n```\ntime(tak(3)::tak(18, 12, 6, R)).\n```\n\n----------------------------------------\n\nTITLE: Example Object Using Module Aliases\nDESCRIPTION: Demonstrates practical usage of use_module/1 within an object definition, showing how to alias both a concrete module and a parameter variable module.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/refman/directives/use_module_1.rst#2025-04-06_snippet_2\n\nLANGUAGE: logtalk\nCODE:\n```\n:- object(foo(_DataModule_)).\n\n    :- use_module([\n        data_noise_handler as cleaner,\n        _DataModule_ as data\n    ]).\n\n    bar :-\n        ...,\n        % the same as _DataModule_:xy(X, Y)\n        data:xy(X, Y),\n        % the same as data_noise_handler:filter(X, Y)\n        cleaner:filter(X, Y, Z),\n        ...\n```\n\n----------------------------------------\n\nTITLE: Using Prolog User-Defined Plain Predicates with Directives in Logtalk\nDESCRIPTION: Shows how to use the uses/2 directive to call Prolog user-defined plain predicates without explicit qualification.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/userman/predicates.rst#2025-04-06_snippet_57\n\nLANGUAGE: logtalk\nCODE:\n```\n:- uses(user, [bar/0]).\n\nfoo :-\n    ...,\n    bar,\n    ...\n```\n\n----------------------------------------\n\nTITLE: Using Logtalk Grammar Predicates\nDESCRIPTION: Example of using grammar predicates through implicit message-sending with the chars parameter specified\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/libraries/grammars.rst.txt#2025-04-06_snippet_2\n\nLANGUAGE: logtalk\nCODE:\n```\n:- uses(blank_grammars(chars), [\n    white_spaces//0, new_lines//0\n]).\n```\n\n----------------------------------------\n\nTITLE: Update Dictionary Value\nDESCRIPTION: Updates the value found by traversing through nested keys. Returns the updated dictionary.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/nested_dictionary_protocol_0.rst.txt#2025-04-06_snippet_5\n\nLANGUAGE: logtalk\nCODE:\n```\nupdate_in(OldDictionary,Keys,Value,NewDictionary)\n```\n\n----------------------------------------\n\nTITLE: Logtalk forall/2 Method Signature\nDESCRIPTION: Basic syntax and structure of the forall/2 method that implements a generate-and-test loop.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/refman/methods/forall_2.rst#2025-04-06_snippet_0\n\nLANGUAGE: logtalk\nCODE:\n```\nforall(Generator, Test)\n```\n\n----------------------------------------\n\nTITLE: Loading Hook Objects Library in Logtalk\nDESCRIPTION: Demonstrates how to load all hook objects in the library or a specific hook object using Logtalk's logtalk_load/1 predicate.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/libraries/hook_objects.rst#2025-04-06_snippet_0\n\nLANGUAGE: Prolog\nCODE:\n```\n| ?- logtalk_load(hook_objects(loader)).\n```\n\nLANGUAGE: Prolog\nCODE:\n```\n| ?- logtalk_load(hook_objects(backend_adapter_hook)).\n```\n\n----------------------------------------\n\nTITLE: Loading Gensym Library in Logtalk\nDESCRIPTION: Command to load all entities in the gensym library using the loader.lgt file.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/libraries/gensym.rst.txt#2025-04-06_snippet_0\n\nLANGUAGE: prolog\nCODE:\n```\n| ?- logtalk_load(gensym(loader)).\n```\n\n----------------------------------------\n\nTITLE: Implementing Indexed Foreach Loop in Logtalk\nDESCRIPTION: Defines an indexed foreach loop construct that iterates over each Element in a List, providing an Index, and calls a Goal for each. Index starts at 1. It uses meta-predicate notation to handle callable arguments.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/loopp_0.rst.txt#2025-04-06_snippet_3\n\nLANGUAGE: Logtalk\nCODE:\n```\nforeach(Element,Index,List,Goal)\n```\n\n----------------------------------------\n\nTITLE: Calling Goal with Timeout in Logtalk\nDESCRIPTION: Calls a goal deterministically with a given time limit in seconds. The goal may fail or throw an error before the time limit is reached. If the goal doesn't complete within the time limit, a timeout(Goal) exception is thrown.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/timeout_0.rst.txt#2025-04-06_snippet_0\n\nLANGUAGE: Logtalk\nCODE:\n```\ncall_with_timeout(Goal,Timeout)\n```\n\n----------------------------------------\n\nTITLE: Converting Between Pairs and Key-Value Lists\nDESCRIPTION: The keys_values/3 predicate converts between a list of pairs and separate lists of keys and values. Fails if key and value lists have different lengths when converting to pairs.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/pairs_0.rst.txt#2025-04-06_snippet_0\n\nLANGUAGE: logtalk\nCODE:\n```\nkeys_values(Pairs,Keys,Values)\n```\n\n----------------------------------------\n\nTITLE: Defining drop/3 predicate in Logtalk\nDESCRIPTION: Defines a predicate to drop the first N elements of a list. It fails if the list has fewer than N elements. It is a static predicate that takes N and List as input and returns Remaining as output.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/listp_0.rst.txt#2025-04-06_snippet_32\n\nLANGUAGE: Logtalk\nCODE:\n```\ndrop(N,List,Remaining)\n```\n\n----------------------------------------\n\nTITLE: Implementing a Custom message_hook for Silent Messages in Logtalk\nDESCRIPTION: Shows how to implement a custom message_hook that prints silent messages instead of discarding them. The example demonstrates proper declaration of multifile and dynamic predicates, and the implementation of a hook that processes messages marked as silent.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/refman/methods/message_hook_4.rst#2025-04-06_snippet_2\n\nLANGUAGE: prolog\nCODE:\n```\n:- multifile(logtalk::message_hook/4).\n:- dynamic(logtalk::message_hook/4).\n\n% print silent messages instead of discarding them as default\nlogtalk::message_hook(_, silent, core, Tokens) :-\n    logtalk::message_prefix_stream(silent, core, Prefix, Stream),\n    logtalk::print_message_tokens(Stream, Prefix, Tokens).\n```\n\n----------------------------------------\n\nTITLE: EDCG Usage Example in Logtalk\nDESCRIPTION: A complete example demonstrating EDCG usage including accumulator declarations, predicate declarations with hidden arguments, and implementation of grammar rules.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/libraries/edcg.rst.txt#2025-04-06_snippet_4\n\nLANGUAGE: logtalk\nCODE:\n```\n% declare accumulators\nacc_info(adder, X, In, Out, integer::plus(X,In,Out)).\n\n% declare predicates using these hidden arguments\npred_info(len,0,[adder,dcg]).\npred_info(increment,0,[adder]).\n\nincrement -->>\n    % add one to the accumulator\n    [1]:adder.\n\n\nlen(Xs,N) :-\n    len(0,N,Xs,[]).\n\nlen -->>\n    % 'dcg' accumulator has an element\n    [_],\n    !,\n    % increment the 'adder' accumulator\n    increment,\n    len.\nlen -->>\n    [].\n```\n\n----------------------------------------\n\nTITLE: Processing Purchase Request with Director in Chain of Responsibility\nDESCRIPTION: Demonstrates a purchase request of 6500 units that will be approved by the Director in the chain.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/design_patterns/behavioral/chain_of_responsibility/NOTES.md#2025-04-06_snippet_3\n\nLANGUAGE: logtalk\nCODE:\n```\nmanager::process_request(6500).\n```\n\n----------------------------------------\n\nTITLE: Extended Protocols Syntax in Logtalk using BNF\nDESCRIPTION: Defines the syntax for referring to extended protocols in Logtalk, including individual protocols, sequences, and lists, with optional scope specifiers.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/refman/grammar.rst.txt#2025-04-06_snippet_6\n\nLANGUAGE: bnf\nCODE:\n```\nextended_protocols ::=\n   extended_protocol\n   | extended_protocol_sequence\n   | extended_protocol_list\n\nextended_protocol ::=\n   protocol_identifier\n   | scope \"::\" protocol_identifier\n\nextended_protocol_sequence ::=\n   extended_protocol\n   |extended_protocol \",\" extended_protocol_sequence\n\nextended_protocol_list ::=\n   \"[\" extended_protocol_sequence \"]\"\n```\n\n----------------------------------------\n\nTITLE: Using Prolog Module Predicates in a Logtalk Object\nDESCRIPTION: Demonstrates how to use predicates from a CLP(FD) module within a Logtalk object by importing specific predicates and operators to solve a word arithmetic puzzle.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/userman/predicates.rst#2025-04-06_snippet_61\n\nLANGUAGE: prolog\nCODE:\n```\n:- object(puzzle).\n\n    :- public(puzzle/1).\n\n    :- use_module(clpfd, [\n        all_different/1, ins/2, label/1,\n        (#=)/2, (#\\=)/2,\n        op(700, xfx, #=), op(700, xfx, #\\=)\n    ]).\n\n    puzzle([S,E,N,D] + [M,O,R,E] = [M,O,N,E,Y]) :-\n        Vars = [S,E,N,D,M,O,R,Y],\n        Vars ins 0..9,\n        all_different(Vars),\n                  S*1000 + E*100 + N*10 + D +\n                  M*1000 + O*100 + R*10 + E #=\n        M*10000 + O*1000 + N*100 + E*10 + Y,\n        M #\\= 0, S #\\= 0,\n        label([M,O,N,E,Y]).\n\n:- end_object.\n```\n\n----------------------------------------\n\nTITLE: Generating XHTML 1.1 Document\nDESCRIPTION: Example of generating a complete XHTML 1.1 document with title and paragraph\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/libraries/html.rst#2025-04-06_snippet_6\n\nLANGUAGE: prolog\nCODE:\n```\n| ?- xhtml11::generate(\n            file('hello.html'),\n            html([lang=en], [head(title('Hello world!')), body(p('Bye!'))])\n        ).\n```\n\n----------------------------------------\n\nTITLE: Message Delegation Syntax in Logtalk\nDESCRIPTION: Defines the syntax for the []/1 control construct which allows sending a message to an object while preserving the original sender and meta-call context. This construct supports both direct object reference and proxy object forms.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/refman/control/delegate_message_1.rst#2025-04-06_snippet_0\n\nLANGUAGE: logtalk\nCODE:\n```\n[Object::Message]\n[{Proxy}::Message]\n```\n\n----------------------------------------\n\nTITLE: Loading Debug Messages Test Suite\nDESCRIPTION: Command to load the test suite for the debug_messages tool.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/devtools/debug_messages.rst#2025-04-06_snippet_1\n\nLANGUAGE: prolog\nCODE:\n```\n| ?- logtalk_load(debug_messages(tester)).\n```\n\n----------------------------------------\n\nTITLE: Approximate Equality Operator in Logtalk\nDESCRIPTION: Compares two numbers or lists of numbers for approximate equality using predefined error thresholds. May not be suitable for all cases.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/lgtunit_0.rst.txt#2025-04-06_snippet_24\n\nLANGUAGE: logtalk\nCODE:\n```\n=~=(Number1,Number2)\n```\n\n----------------------------------------\n\nTITLE: Examples of Public Declarations in Logtalk\nDESCRIPTION: Provides practical examples of using the public/1 directive to declare public predicates, including single predicate, multiple predicates, and list of predicates declarations.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/refman/directives/public_1.rst#2025-04-06_snippet_2\n\nLANGUAGE: Logtalk\nCODE:\n```\n:- public(ancestor/1).\n\n:- public((instance/1, instances/1)).\n\n:- public([leaf/1, leaves/1]).\n```\n\n----------------------------------------\n\nTITLE: Examples of using info/2 directive in Logtalk\nDESCRIPTION: Demonstrates practical examples of using the info/2 directive to document a predicate (empty/1) and a grammar rule non-terminal (sentence//0).\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/refman/directives/info_2.rst#2025-04-06_snippet_2\n\nLANGUAGE: logtalk\nCODE:\n```\n:- info(empty/1, [\n    comment is 'True if the argument is an empty list.',\n    argnames is ['List']\n]).\n\n:- info(sentence//0, [\n    comment is 'Rewrites a sentence into a noun phrase and a verb phrase.'\n]).\n```\n\n----------------------------------------\n\nTITLE: Example of Creating a Protocol at Runtime in Logtalk\nDESCRIPTION: Provides a concrete example of creating a new protocol named 'ppp' that extends another protocol 'qqq' and declares two public predicates. The example shows both the query and the equivalent source code.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/userman/protocols.rst#2025-04-06_snippet_4\n\nLANGUAGE: prolog\nCODE:\n```\n| ?- create_protocol(ppp, [extends(qqq)], [public([foo/1, bar/1])]).\n```\n\n----------------------------------------\n\nTITLE: Defining expand_goal/2 Method Signature in Prolog\nDESCRIPTION: Specifies the signature of the expand_goal/2 method, which takes a Goal and returns an ExpandedGoal. This method expands a given goal using available goal_expansion/2 hook predicates.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/refman/methods/expand_goal_2.rst.txt#2025-04-06_snippet_0\n\nLANGUAGE: prolog\nCODE:\n```\nexpand_goal(Goal, ExpandedGoal)\n```\n\n----------------------------------------\n\nTITLE: Example of create_category/4 usage in Logtalk\nDESCRIPTION: Demonstrates creating a 'tolerances' category that implements the 'comparing' protocol with an epsilon predicate and an equal/2 predicate for comparing floating-point numbers.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/refman/predicates/create_category_4.rst#2025-04-06_snippet_2\n\nLANGUAGE: logtalk\nCODE:\n```\n| ?- create_category(\n           tolerances,\n           [implements(comparing)],\n           [],\n           [epsilon(1e-15), (equal(X, Y) :- epsilon(E), abs(X-Y) =< E)]\n        ).\n```\n\n----------------------------------------\n\nTITLE: Message Delegation Syntax in Logtalk\nDESCRIPTION: Defines the syntax for the []/1 control construct which allows sending a message to an object while preserving the original sender and meta-call context. This construct supports both direct object reference and proxy object forms.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/refman/control/delegate_message_1.rst#2025-04-06_snippet_0\n\nLANGUAGE: logtalk\nCODE:\n```\n[Object::Message]\n[{Proxy}::Message]\n```\n\n----------------------------------------\n\nTITLE: Forward Method Implementation Example\nDESCRIPTION: Example implementation of a proxy object that forwards unknown messages to a 'real' object using the forward/1 method.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/refman/methods/forward_1.rst#2025-04-06_snippet_2\n\nLANGUAGE: logtalk\nCODE:\n```\n:- object(proxy,\n    implements(forwarding),\n    ...).\n\n    forward(Message) :-\n        % delegate unknown messages to the \"real\" object\n        [real::Message].\n```\n\n----------------------------------------\n\nTITLE: Defining Cost Function in Best-First Framework (Logtalk)\nDESCRIPTION: Implements the 'f/4' predicate which calculates the cost for the best-first algorithm. It takes three float inputs (Length1, Length2, Depth) and outputs a float Cost value. This predicate is protected and statically compiled.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/best_first_0.rst.txt#2025-04-06_snippet_0\n\nLANGUAGE: Logtalk\nCODE:\n```\nf(Length1,Length2,Depth,Cost)\n```\n\n----------------------------------------\n\nTITLE: Basic Super-Call Syntax in Logtalk\nDESCRIPTION: Shows the basic syntax for making a super-call using the (^^)/1 control construct to call imported or inherited predicate definitions.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/refman/control/call_super_1.rst#2025-04-06_snippet_0\n\nLANGUAGE: logtalk\nCODE:\n```\n^^Predicate\n```\n\n----------------------------------------\n\nTITLE: Example of a Module Meta-Predicate Declaration\nDESCRIPTION: Example of a module meta-predicate declaration with an ambiguous meta-argument specifier that would cause issues when used in Logtalk.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/userman/predicates.rst.txt#2025-04-06_snippet_60\n\nLANGUAGE: prolog\nCODE:\n```\n:- module(foo, [bar/2]).\n\n:- meta_predicate(bar(*, :)).\n```\n\n----------------------------------------\n\nTITLE: Loading Logtalk Files Using Shortcut Syntax\nDESCRIPTION: Demonstrates the shortcut syntax for compiling and loading Logtalk source files using curly braces notation instead of explicit logtalk_load/1 calls.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/faq/usability.rst.txt#2025-04-06_snippet_0\n\nLANGUAGE: logtalk\nCODE:\n```\n{File}\n{File1, File2, ...}\n```\n\n----------------------------------------\n\nTITLE: Delegation Implementation Example in Logtalk\nDESCRIPTION: Demonstrates how to implement a forward/1 predicate that delegates unknown messages to a backup object using the []/1 control construct, which is a common pattern for handling unknown messages.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/refman/control/delegate_message_1.rst#2025-04-06_snippet_2\n\nLANGUAGE: logtalk\nCODE:\n```\n% delegate unknown messages to the \"backup\" object:\nforward(Message) :-\n    [backup::Message].\n```\n\n----------------------------------------\n\nTITLE: Defining a Basic Logtalk Category\nDESCRIPTION: Demonstrates the simplest form of defining a self-contained Logtalk category using category directives.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/userman/categories.rst#2025-04-06_snippet_0\n\nLANGUAGE: Logtalk\nCODE:\n```\n:- category(Category).\n    ...\n:- end_category.\n```\n\n----------------------------------------\n\nTITLE: Loading Code Metrics Tool in Logtalk\nDESCRIPTION: Query to load the code_metrics tool into a Logtalk environment.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/tools/code_metrics/NOTES.md#2025-04-06_snippet_0\n\nLANGUAGE: Prolog\nCODE:\n```\n| ?- logtalk_load(code_metrics(loader)).\n```\n\n----------------------------------------\n\nTITLE: Running Specific Unit Tests in Logtalk\nDESCRIPTION: Runs a specific unit test or a list of unit tests, writing results to the current output stream. It also executes global setup and cleanup steps if defined.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/lgtunit_0.rst.txt#2025-04-06_snippet_2\n\nLANGUAGE: Logtalk\nCODE:\n```\nrun(Tests)\n```\n\n----------------------------------------\n\nTITLE: Loading Wrapped Prolog Code for Profiling in Logtalk\nDESCRIPTION: Demonstrates loading wrapped Prolog code in debug mode for profiling.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/tools/ports_profiler/NOTES.md#2025-04-06_snippet_10\n\nLANGUAGE: Logtalk\nCODE:\n```\n| ?- logtalk_load(code, [debug(on), source_data(on)]).\n```\n\n----------------------------------------\n\nTITLE: Finding Root Using Muller Method for Function f1\nDESCRIPTION: Demonstrates using Muller's method to find the root of function f1 in the range [1.0, 2.3] with a tolerance of 1.0e-15.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/threads/functions/NOTES.md#2025-04-06_snippet_4\n\nLANGUAGE: logtalk\nCODE:\n```\nmuller::find_root(f1, 1.0, 2.3, 1.0e-15, Zero).\n```\n\n----------------------------------------\n\nTITLE: Querying instantiation relationships in Logtalk\nDESCRIPTION: Shows how to query instantiation relationships between instances and classes using the instantiates_class/2-3 built-in predicates.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/userman/objects.rst#2025-04-06_snippet_16\n\nLANGUAGE: text\nCODE:\n```\n| ?- instantiates_class(Instance, Class).\n```\n\n----------------------------------------\n\nTITLE: Defining a Pack Specification Object in Logtalk\nDESCRIPTION: This snippet demonstrates how to create a pack specification object that implements the pack_protocol. It includes metadata about the pack, version information, and dependencies.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/tools/packs/NOTES.md#2025-04-06_snippet_15\n\nLANGUAGE: logtalk\nCODE:\n```\n:- object(lflat_pack,\n\timplements(pack_protocol)).\n\n\t:- info([\n\t\tversion is 1:0:0,\n\t\tauthor is 'Paulo Moura',\n\t\tdate is 2021-10-18,\n\t\tcomment is 'L-FLAT - Logtalk Formal Language and Automata Toolkit pack spec.'\n\t]).\n\n\tname(lflat).\n\n\tdescription('L-FLAT - Logtalk Formal Language and Automata Toolkit').\n\n\tlicense('MIT').\n\n\thome('https://github.com/l-flat/lflat').\n\n\tversion(\n\t\t2:1:0,\n\t\tstable,\n\t\t'https://github.com/l-flat/lflat/archive/refs/tags/v2.1.0.tar.gz',\n\t\tsha256 - '9c298c2a08c4e2a1972c14720ef1498e7f116c7cd8bf7702c8d22d8ff549b6a1',\n\t\t[logtalk @>= 3:42:0],\n\t\tall\n\t).\n\n\tversion(\n\t\t2:0:2,\n\t\tstable,\n\t\t'https://github.com/l-flat/lflat/archive/refs/tags/v2.0.2.tar.gz',\n\t\tsha256 - '8774b3863efc03bb6c284935885dcf34f69f115656d2496a33a446b6199f3e19',\n\t\t[logtalk @>= 3:36:0],\n\t\tall\n\t).\n\n:- end_object.\n```\n\n----------------------------------------\n\nTITLE: Meta-Predicate Template and Modes\nDESCRIPTION: Specifies the template and modes for meta-predicate declarations, showing the required argument types and possible qualifiers.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/refman/directives/meta_predicate_1.rst.txt#2025-04-06_snippet_1\n\nLANGUAGE: logtalk\nCODE:\n```\nmeta_predicate(+meta_predicate_template_term)\n\nmeta_predicate(+object_identifier::+meta_predicate_template_term)\nmeta_predicate(+category_identifier::+meta_predicate_template_term)\n\nmeta_predicate(+module_identifier:+meta_predicate_template_term)\n```\n\n----------------------------------------\n\nTITLE: Loading Prolog Modules in a Logtalk Application\nDESCRIPTION: Shows how to load a Prolog module (CLP(FD) in this case) in a Logtalk application loader file using an empty import list to avoid adding exported predicates to plain Prolog.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/userman/predicates.rst#2025-04-06_snippet_60\n\nLANGUAGE: prolog\nCODE:\n```\n:- use_module(library(clpfd), []).\n```\n\n----------------------------------------\n\nTITLE: Left Fold - Logtalk Meta-Predicate\nDESCRIPTION: List folding with left association. Closure takes accumulator, list element, and updated accumulator arguments.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/metap_0.rst.txt#2025-04-06_snippet_6\n\nLANGUAGE: logtalk\nCODE:\n```\nfold_left(Closure,Accumulator,List,Result)\n```\n\n----------------------------------------\n\nTITLE: Dictionary Map Predicate in Logtalk\nDESCRIPTION: Maps a closure over each dictionary key-value pair with static compilation flag. Works with a callable closure and dictionary input.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/dictionaryp_0.rst.txt#2025-04-06_snippet_24\n\nLANGUAGE: logtalk\nCODE:\n```\nmap(@callable,+dictionary) - zero_or_more\n```\n\n----------------------------------------\n\nTITLE: Setting Debug Flag Globally in Logtalk\nDESCRIPTION: Changes the default value of the debug compiler flag globally at runtime. This implicitly turns off the optimize flag.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/userman/debugging.rst.txt#2025-04-06_snippet_1\n\nLANGUAGE: prolog\nCODE:\n```\n| ?- set_logtalk_flag(debug, on).\n```\n\n----------------------------------------\n\nTITLE: Suppressing Output During Tests in Logtalk\nDESCRIPTION: Example of using the suppress_text_output predicate to prevent tested predicates from cluttering test output, useful when the output itself is not being tested.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/devtools/lgtunit.rst#2025-04-06_snippet_40\n\nLANGUAGE: logtalk\nCODE:\n```\ntest(proxies_04, true(Color == yellow)) :-\n       ^^suppress_text_output,\n       {circle('#2', Color)}::print.\n```\n\n----------------------------------------\n\nTITLE: Defining the specializes_class/2-3 Predicate in Logtalk\nDESCRIPTION: Shows the syntax for the specializes_class/2-3 predicate that enumerates pairs of objects where the first one specializes the second. The relation scope can be represented by the atoms public, protected, and private.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/refman/predicates/specializes_class_2_3.rst.txt#2025-04-06_snippet_0\n\nLANGUAGE: logtalk\nCODE:\n```\nspecializes_class(Class, Superclass)\nspecializes_class(Class, Superclass, Scope)\n```\n\n----------------------------------------\n\nTITLE: Testing the Hierarchies Library in Logtalk\nDESCRIPTION: Command to test the hierarchies library predicates using the tester.lgt file.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/libraries/hierarchies.rst#2025-04-06_snippet_1\n\nLANGUAGE: logtalk\nCODE:\n```\n| ?- logtalk_load(hierarchies(tester)).\n```\n\n----------------------------------------\n\nTITLE: Using format Library Predicates in Logtalk Objects\nDESCRIPTION: Directive to include in objects or categories to enable implicit message-sending for the format/2-3 predicates.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/libraries/format.rst.txt#2025-04-06_snippet_2\n\nLANGUAGE: logtalk\nCODE:\n```\n:- uses(format, [\n    format/2, format/3\n]).\n```\n\n----------------------------------------\n\nTITLE: Generating Version 4 UUID in Logtalk\nDESCRIPTION: Generates a version 4 (random) UUID. This predicate returns a completely random UUID, which is useful when no specific timestamp or node information is required.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/uuid_protocol_0.rst.txt#2025-04-06_snippet_1\n\nLANGUAGE: Logtalk\nCODE:\n```\nuuid_v4(UUID)\n```\n\n----------------------------------------\n\nTITLE: Set Text Output with Options in Logtalk\nDESCRIPTION: Creates a temporary file with specified text contents, opens it for writing with the given alias and stream options. Useful for testing code that writes to files.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/lgtunit_0.rst.txt#2025-04-06_snippet_41\n\nLANGUAGE: logtalk\nCODE:\n```\nset_text_output(Alias,Contents,Options)\n```\n\n----------------------------------------\n\nTITLE: Parameter Method Access in Logtalk Object\nDESCRIPTION: Shows how to access object parameters using the parameter/2 built-in method in Logtalk object definitions.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/userman/objects.rst#2025-04-06_snippet_11\n\nLANGUAGE: logtalk\nCODE:\n```\n:- object(foo(_Bar, _Baz, ...)).\n\n    ...\n    bar(Bar) :-\n        parameter(1, Bar).\n\n    baz :-\n        parameter(2, Baz),\n        baz(Baz),\n        ... .\n```\n\n----------------------------------------\n\nTITLE: Testing Input Predicates in Logtalk\nDESCRIPTION: Demonstrates how to test input predicates using the text_input_assertion/3 predicate. This example sets up an input stream with specific content and checks if the assertion holds.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/tools/lgtunit/NOTES.md#2025-04-06_snippet_29\n\nLANGUAGE: Logtalk\nCODE:\n```\n^^text_input_assertion(in, 'werty', Assertion).\n```\n\n----------------------------------------\n\nTITLE: Overriding Module Meta-Predicate Declarations in Logtalk\nDESCRIPTION: Two examples showing how to override an ambiguous module meta-predicate declaration inside a Logtalk object or category, resolving the ambiguity of the ':' meta-argument specifier.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/userman/predicates.rst.txt#2025-04-06_snippet_61\n\nLANGUAGE: logtalk\nCODE:\n```\n:- meta_predicate(foo:bar(*, *)).\n```\n\nLANGUAGE: logtalk\nCODE:\n```\n:- meta_predicate(foo:bar(*, 0)).\n```\n\n----------------------------------------\n\nTITLE: Debugging a Broken Predicate with QuickCheck\nDESCRIPTION: Example of a broken every_other/2 predicate implementation that incorrectly handles lists with odd number of elements.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/tools/lgtunit/NOTES.md#2025-04-06_snippet_16\n\nLANGUAGE: prolog\nCODE:\n```\nevery_other([], []).\nevery_other([_, X| L], [X | R]) :-\n\tevery_other(L, R).\n```\n\n----------------------------------------\n\nTITLE: Reading Text Files to Character Codes in Logtalk\nDESCRIPTION: Reads a text file into a list of character codes. Takes a file name as input and returns the file contents as a list of character codes.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/reader_0.rst.txt#2025-04-06_snippet_0\n\nLANGUAGE: Logtalk\nCODE:\n```\nfile_to_codes(File,Codes)\n```\n\n----------------------------------------\n\nTITLE: Finding the Bug with QuickCheck\nDESCRIPTION: Example showing how QuickCheck finds a bug with a simple list case that wasn't manually tested.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/tools/lgtunit/NOTES.md#2025-04-06_snippet_18\n\nLANGUAGE: prolog\nCODE:\n```\n| ?- lgtunit::quick_check(every_other(+list(integer), -list(integer))).\n*     quick check test failure (at test 2 after 0 shrinks):\n*       every_other([0],A)\n*     starting seed: seed(3172,9814,20125)\n*     test seed:     seed(3172,9814,20125)\nno\n```\n\n----------------------------------------\n\nTITLE: Implementing Meta-called Non-terminals in Grammar Rules\nDESCRIPTION: Shows how to declare and implement a meta-called non-terminal with the meta_non_terminal/1 directive that takes a closure as an argument.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/userman/predicates.rst.txt#2025-04-06_snippet_40\n\nLANGUAGE: logtalk\nCODE:\n```\n:- meta_non_terminal(zero_or_more(1, *)).\n\nzero_or_more(Closure, [Terminal| Terminals]) -->\n    call(Closure, Terminal), !, zero_or_more(Closure, Terminals).\nzero_or_more(_, []) -->\n    [].\n```\n\n----------------------------------------\n\nTITLE: Manual Exception Construction in Logtalk\nDESCRIPTION: Shows how to manually construct and throw an error exception with context information.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/userman/errors.rst#2025-04-06_snippet_2\n\nLANGUAGE: logtalk\nCODE:\n```\n...,\ncontext(Context),\nthrow(error(type_error(atom, 42), Context)).\n```\n\n----------------------------------------\n\nTITLE: Manual Exception Construction in Logtalk\nDESCRIPTION: Shows how to manually construct and throw an error exception with context information.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/userman/errors.rst#2025-04-06_snippet_2\n\nLANGUAGE: logtalk\nCODE:\n```\n...,\ncontext(Context),\nthrow(error(type_error(atom, 42), Context)).\n```\n\n----------------------------------------\n\nTITLE: Meta-predicate Template for findall/4 in Logtalk\nDESCRIPTION: Defines the meta-predicate template for findall/4, indicating how its arguments are interpreted during compilation.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/refman/methods/findall_4.rst.txt#2025-04-06_snippet_1\n\nLANGUAGE: logtalk\nCODE:\n```\nfindall(*, 0, *, *)\n```\n\n----------------------------------------\n\nTITLE: Checking or Finding Monitor Objects in Logtalk\nDESCRIPTION: The monitor/1 predicate verifies if an object is playing the role of a monitor, or finds objects that are monitors. It can be used in two modes: to check if a specific object is a monitor, or to retrieve all monitor objects.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/event_registryp_0.rst.txt#2025-04-06_snippet_1\n\nLANGUAGE: logtalk\nCODE:\n```\nmonitor(Monitor)\n```\n\n----------------------------------------\n\nTITLE: Compiling Source Files for Port Profiling in Logtalk\nDESCRIPTION: Demonstrates how to compile source files with debug mode and source data enabled for port profiling.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/tools/ports_profiler/NOTES.md#2025-04-06_snippet_1\n\nLANGUAGE: Logtalk\nCODE:\n```\n| ?- logtalk_load(my_source_file, [debug(on), source_data(on)]).\n```\n\n----------------------------------------\n\nTITLE: Creating and manipulating a bounded history point\nDESCRIPTION: Shows creation of a point with both bounded coordinates and position history, printing its state, moving it within bounds, and printing updated information.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/points/NOTES.md#2025-04-06_snippet_5\n\nLANGUAGE: logtalk\nCODE:\n```\nbounded_history_point::new(Point, [position-(1, 3), bounds(x)-(0, 13), bounds(y)-(-7, 7)]), Point::(print, move(7, 4), print).\n```\n\n----------------------------------------\n\nTITLE: Testing DIF Library in Logtalk\nDESCRIPTION: Command to load and run tests for the dif library predicates using the tester.lgt file.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/libraries/dif.rst#2025-04-06_snippet_1\n\nLANGUAGE: prolog\nCODE:\n```\n| ?- logtalk_load(dif(tester)).\n```\n\n----------------------------------------\n\nTITLE: Asynchronous Messages with Unsynchronized Output Operations\nDESCRIPTION: Sends three asynchronous messages to nasty1 object that perform output operations concurrently. This demonstrates interleaved output due to lack of synchronization.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/threads/sync/NOTES.md#2025-04-06_snippet_3\n\nLANGUAGE: logtalk\nCODE:\n```\nthreaded_ignore(nasty1::io(alpha)), threaded_ignore(nasty1::io(digit)), threaded_ignore(nasty1::io(alpha)).\n```\n\n----------------------------------------\n\nTITLE: Using between/3 predicate in Logtalk for integer ranges\nDESCRIPTION: Predicate that returns integers in the interval defined by the two first arguments. Can be used to generate integers within a range or to check if an integer falls within a range.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/integer_0.rst.txt#2025-04-06_snippet_0\n\nLANGUAGE: logtalk\nCODE:\n```\nbetween(Lower,Upper,Integer)\n```\n\n----------------------------------------\n\nTITLE: Call Method Examples in Logtalk\nDESCRIPTION: Provides examples of using call/1-N in different contexts: within the current object/category, sending to self, or sending to an explicit object.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/refman/methods/call_N.rst#2025-04-06_snippet_3\n\nLANGUAGE: logtalk\nCODE:\n```\ncall(Closure, Arg1, Arg2, ...)\ncall(::Closure, Arg1, Arg2, ...)\ncall(Object::Closure, Arg1, Arg2, ...)\n```\n\n----------------------------------------\n\nTITLE: Conditional Settings Based on Prolog Dialect\nDESCRIPTION: Example of using conditional compilation to specify different settings based on the Prolog backend compiler being used. Demonstrates how to write portable settings that work across multiple Prolog implementations.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/userman/programming.rst.txt#2025-04-06_snippet_11\n\nLANGUAGE: logtalk\nCODE:\n```\n:- if(current_logtalk_flag(prolog_dialect, yap)).\n\n    % YAP specific settings\n    ...\n\n:- elif(current_logtalk_flag(prolog_dialect, gnu)).\n\n    % GNU Prolog specific settings\n    ...\n\n:- else.\n\n    % generic Prolog settings\n\n:- endif.\n```\n\n----------------------------------------\n\nTITLE: Setting Context Breakpoint in Logtalk\nDESCRIPTION: Shows how to set a context breakpoint using the debugger's spy/4 predicate. This example sets a breakpoint for any predicate defined on an object named 'foo'.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/userman/debugging.rst#2025-04-06_snippet_12\n\nLANGUAGE: text\nCODE:\n```\n| ?- debugger::spy(_, foo, _, _).\n\nSpy point set.\nyes\n```\n\n----------------------------------------\n\nTITLE: Implementing after/3 Method in Logtalk Object\nDESCRIPTION: Demonstrates how to implement the after/3 method in a Logtalk object that implements the monitoring protocol. This example writes a log message when a message is successful, including the object, message, and sender details.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/refman/methods/after_3.rst#2025-04-06_snippet_2\n\nLANGUAGE: Logtalk\nCODE:\n```\n:- object(...,\n    implements(monitoring),\n    ...).\n\n    % write a log message when a message is successful:\n    after(Object, Message, Sender) :-\n        writeq(Object), write('::'), writeq(Message),\n        write(' from '), writeq(Sender), nl.\n```\n\n----------------------------------------\n\nTITLE: Generating integer sequences with sequence/3\nDESCRIPTION: Predicate that generates a list with the sequence of all integers in the interval [Lower,Upper]. The predicate assumes Lower =< Upper and fails otherwise.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/integer_0.rst.txt#2025-04-06_snippet_3\n\nLANGUAGE: logtalk\nCODE:\n```\nsequence(Lower,Upper,List)\n```\n\n----------------------------------------\n\nTITLE: Resolving Inheritance Conflicts with alias/2 Directive\nDESCRIPTION: Example showing how to resolve naming conflicts when inheriting from multiple objects by creating distinct aliases for predicates with the same name and arity from different parent objects.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/userman/predicates.rst#2025-04-06_snippet_22\n\nLANGUAGE: logtalk\nCODE:\n```\n:- object(my_data_structure,\n    extends(list, set)).\n\n    :- alias(list, [member/2 as list_member/2]).\n    :- alias(set,  [member/2 as set_member/2]).\n\n    ...\n\n:- end_object.\n```\n\n----------------------------------------\n\nTITLE: Loading debug hooks example with debug statements activated\nDESCRIPTION: This snippet loads the debug hooks example with debugging statements enabled using the loader_debug file.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/debug_hooks/NOTES.md#2025-04-06_snippet_1\n\nLANGUAGE: logtalk\nCODE:\n```\nlogtalk_load(debug_hooks(loader_debug)).\n```\n\n----------------------------------------\n\nTITLE: Commit Author Query Predicate\nDESCRIPTION: Predicate that returns the author of the latest commit in a git repository directory.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/git_protocol_0.rst.txt#2025-04-06_snippet_1\n\nLANGUAGE: prolog\nCODE:\n```\ncommit_author(+Directory, -Author)\n```\n\n----------------------------------------\n\nTITLE: Querying protocol conformance with inherited protocols in Logtalk\nDESCRIPTION: Shows how to query which objects conform to which protocols (including inherited protocols) using the conforms_to_protocol/3 built-in predicate.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/userman/objects.rst#2025-04-06_snippet_25\n\nLANGUAGE: text\nCODE:\n```\n| ?- conforms_to_protocol(Object, Protocol, Scope).\n```\n\n----------------------------------------\n\nTITLE: Computing Fast Fourier Transform on a 1D Array in MATLAB/Octave\nDESCRIPTION: This example demonstrates the use of the fft() function to compute the Discrete Fourier Transform of a simple integer array. The function takes the input array and the transform length as parameters and returns a complex array representing the frequency domain representation of the input.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/threads/fft/matlab.txt#2025-04-06_snippet_0\n\nLANGUAGE: matlab\nCODE:\n```\nx = [1,2,3,4,5,6,7,8]\nfft(x,8)\n```\n\n----------------------------------------\n\nTITLE: Multifile Directive Syntax Declaration\nDESCRIPTION: Shows all valid syntax variations for declaring multifile predicates and non-terminals in Logtalk, including support for single predicates, lists, and tuples with various scope qualifiers.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/refman/directives/multifile_1.rst.txt#2025-04-06_snippet_0\n\nLANGUAGE: logtalk\nCODE:\n```\nmultifile(Name/Arity)\nmultifile((Name/Arity, ...))\nmultifile([Name/Arity, ...])\n\nmultifile(Entity::Name/Arity)\nmultifile((Entity::Name/Arity, ...))\nmultifile([Entity::Name/Arity, ...])\n\nmultifile(Module:Name/Arity)\nmultifile((Module:Name/Arity, ...))\nmultifile([Module:Name/Arity, ...])\n\nmultifile(Name//Arity)\nmultifile((Name//Arity, ...))\nmultifile([Name//Arity, ...])\n\nmultifile(Entity::Name//Arity)\nmultifile((Entity::Name//Arity, ...))\nmultifile([Entity::Name//Arity, ...])\n\nmultifile(Module:Name//Arity)\nmultifile((Module:Name//Arity, ...))\nmultifile([Module:Name//Arity, ...])\n```\n\n----------------------------------------\n\nTITLE: Using the alias/2 Directive in Logtalk\nDESCRIPTION: Shows how to use the alias/2 directive to provide alternative names for inherited or imported predicates, improving code readability and resolving naming conflicts.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/userman/predicates.rst.txt#2025-04-06_snippet_18\n\nLANGUAGE: Logtalk\nCODE:\n```\n:- object(square,\n    extends(rectangle)).\n\n    :- alias(rectangle, [width/1 as side/1]).\n\n    ...\n\n:- end_object.\n```\n\n----------------------------------------\n\nTITLE: Implementing Start and Stop Methods for Debug Handlers in Logtalk\nDESCRIPTION: Example showing how to implement convenient start and stop predicates for activating and deactivating a custom debug handler. This simplifies the use of debug handlers by providing a more user-friendly interface.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/userman/debugging.rst#2025-04-06_snippet_27\n\nLANGUAGE: prolog\nCODE:\n```\n:- public(start/0).\nstart :-\n   logtalk::activate_debug_handler(my_debug_handler).\n\n:- public(stop/0).\nstop :-\n   logtalk::deactivate_debug_handler.\n```\n\n----------------------------------------\n\nTITLE: Creating a Dynamic Object in Logtalk\nDESCRIPTION: Demonstrates the usage of create_object/4 to create various types of dynamic objects in Logtalk, including stand-alone prototypes, derived prototypes, class instances, subclasses, and objects with initialization goals.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/refman/predicates/create_object_4.rst#2025-04-06_snippet_0\n\nLANGUAGE: Logtalk\nCODE:\n```\n% create a stand-alone object (a prototype):\n| ?- create_object(\n        translator,\n        [],\n        [public(int/2)],\n        [int(0, zero)]\n    ).\n\n% create a prototype derived from a parent prototype:\n| ?- create_object(\n        mickey,\n        [extends(mouse)],\n        [public(alias/1)],\n        [alias(mortimer)]\n    ).\n\n% create a class instance:\n| ?- create_object(\n        p1,\n        [instantiates(person)],\n        [],\n        [name('Paulo Moura'), age(42)]\n    ).\n\n% create a subclass:\n| ?- create_object(\n        hovercraft,\n        [specializes(vehicle)],\n        [public([propeller/2, fan/2])],\n        []\n    ).\n\n% create an object with an initialization goal:\n| ?- create_object(\n        runner,\n        [instantiates(runners)],\n        [initialization(::start)],\n        [length(22), time(60)]\n    ).\n\n% create an object supporting dynamic predicate declarations:\n| ?- create_object(\n        database,\n        [],\n        [set_logtalk_flag(dynamic_declarations, allow)],\n        []\n    ).\n```\n\n----------------------------------------\n\nTITLE: Defining Attributes Category with This Database in Logtalk\nDESCRIPTION: Example of defining a category 'attributes' implementing get/2 and set/2 predicates using the dynamic database of 'this' in Logtalk. This demonstrates how to use the database of the importing object for dynamic predicates in categories.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/userman/predicates.rst#2025-04-06_snippet_32\n\nLANGUAGE: Logtalk\nCODE:\n```\n:- category(attributes).\n\n    :- public(get/2).\n    :- public(set/2).\n\n    :- private(attribute_/2).\n    :- dynamic(attribute_/2).\n\n    get(Var, Value) :-\n        attribute_(Var, Value).\n\n    set(Var, Value) :-\n        retractall(attribute_(Var, _)),\n        asserta(attribute_(Var, Value).\n\n:- end_category.\n```\n\n----------------------------------------\n\nTITLE: Implementing Foreach Loop in Logtalk\nDESCRIPTION: Defines a foreach loop construct that iterates over each Element in a List and calls a Goal for each. It uses meta-predicate notation to handle callable arguments.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/loopp_0.rst.txt#2025-04-06_snippet_2\n\nLANGUAGE: Logtalk\nCODE:\n```\nforeach(Element,List,Goal)\n```\n\n----------------------------------------\n\nTITLE: Loading Logtalk Source with Automatic Context Addition\nDESCRIPTION: Query to load a Logtalk source file with a hook for automatically adding file and line context to assertions. This uses the assertions(debug) hook object.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/tools/assertions/NOTES.md#2025-04-06_snippet_4\n\nLANGUAGE: Logtalk\nCODE:\n```\nlogtalk_load(source, [hook(assertions(debug))])\n```\n\n----------------------------------------\n\nTITLE: Defining Meta-Types in Logtalk\nDESCRIPTION: Example showing how to define a meta-type (type with type arguments) by implementing the type::meta_type/3 multifile predicate.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/library/types/NOTES.md#2025-04-06_snippet_5\n\nLANGUAGE: logtalk\nCODE:\n```\n:- multifile(type::meta_type/3).\ntype::meta_type(tuple(Type1, Type2, Type3), [Type1, Type2, Type3], []).\n```\n\n----------------------------------------\n\nTITLE: Entity Management Predicates\nDESCRIPTION: Implementation of predicates for managing Logtalk entities including enumeration, property handling, creation and abolishment of objects, protocols and categories.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/coding/subethaedit4/Logtalk.seemode/Contents/Resources/ExampleSyntax.txt#2025-04-06_snippet_1\n\nLANGUAGE: logtalk\nCODE:\n```\nenumerating_entities(Object, Protocol, Category) :-\n\t\tcurrent_category(Category),\n\t\tcurrent_object(Object),\n\t\tcurrent_protocol(Protocol).\n\n\tenumerating_properties :-\n\t\tcategory_property(Category, Property),\n\t\tobject_property(Object, Property),\n\t\tprotocol_property(Protocol, Property).\n```\n\n----------------------------------------\n\nTITLE: Cleaning Up Test Files and Directories in Logtalk Tests\nDESCRIPTION: Example of a cleanup predicate that removes temporary test files and directories created during testing. It uses protected predicates clean_file/1 and clean_directory/1 to remove a text file and a directory relative to the test object's path.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/devtools/lgtunit.rst#2025-04-06_snippet_48\n\nLANGUAGE: logtalk\nCODE:\n```\ncleanup :-\n    ^^clean_file('foo.txt'),\n    ^^clean_directory('tmp').\n```\n\n----------------------------------------\n\nTITLE: Defining Attributes Category in Logtalk\nDESCRIPTION: Implements a category containing predicates for handling dynamic object attributes including setting, getting, and deleting attributes. Uses private dynamic predicate for attribute storage with message to self control structure.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/tutorial/attributes.rst#2025-04-06_snippet_0\n\nLANGUAGE: logtalk\nCODE:\n```\n:- category(attributes).\n\n    :- public(set_attribute/2).\n    :- mode(set_attribute(+nonvar, +nonvar), one).\n\n    :- public(get_attribute/2).\n    :- mode(get_attribute(?nonvar, ?nonvar), zero_or_more).\n\n    :- public(del_attribute/2).\n    :- mode(del_attribute(?nonvar, ?nonvar), zero_or_more).\n\n    :- public(del_attributes/2).\n    :- mode(del_attributes(@term, @term), one).\n\n    :- private(attribute_/2).\n    :- mode(attribute_(?nonvar, ?nonvar), zero_or_more).\n    :- dynamic(attribute_/2).\n\n    set_attribute(Attribute, Value):-\n        ::retractall(attribute_(Attribute, _)),\n        ::assertz(attribute_(Attribute, Value)).\n\n    get_attribute(Attribute, Value):-\n        ::attribute_(Attribute, Value).\n\n    del_attribute(Attribute, Value):-\n        ::retract(attribute_(Attribute, Value)).\n\n    del_attributes(Attribute, Value):-\n        ::retractall(attribute_(Attribute, Value)).\n\n:- end_category.\n```\n\n----------------------------------------\n\nTITLE: Managing Dynamic Predicates in Prolog's user\nDESCRIPTION: Shows how to manage dynamic predicates in Prolog's user pseudo-module using the uses directive, which is the most portable approach across different Prolog backends.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/userman/predicates.rst#2025-04-06_snippet_70\n\nLANGUAGE: prolog\nCODE:\n```\n:- object(...).\n\n    :- uses(user, [bar/1]).\n    :- dynamic(user::bar/1).\n\n    foo(X) :-\n        % retract and assert bar/1 clauses in user\n        retractall(bar(_)),\n        assertz(bar(X)),\n        ...\n\n:- end_object.\n```\n\n----------------------------------------\n\nTITLE: Area Calculation Example Using Self Messages\nDESCRIPTION: Example demonstrating how to use the (::)/1 construct to send messages to self for calculating an area.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/refman/control/send_to_self_1.rst#2025-04-06_snippet_2\n\nLANGUAGE: logtalk\nCODE:\n```\narea(Area) :-\n    ::width(Width),\n    ::height(Height),\n    Area is Width * Height.\n```\n\n----------------------------------------\n\nTITLE: Querying category importation relationships in Logtalk\nDESCRIPTION: Shows how to query which objects import which categories using the imports_category/2 built-in predicate.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/userman/objects.rst#2025-04-06_snippet_22\n\nLANGUAGE: text\nCODE:\n```\n| ?- imports_category(Object, Category).\n```\n\n----------------------------------------\n\nTITLE: Declaring a Coinductive Predicate in Logtalk\nDESCRIPTION: Example showing how to declare a coinductive predicate using the coinductive/1 directive. Coinductive predicates require backend Prolog compilers with support for cyclic terms.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/userman/predicates.rst.txt#2025-04-06_snippet_21\n\nLANGUAGE: logtalk\nCODE:\n```\n:- coinductive(comember/2).\n```\n\n----------------------------------------\n\nTITLE: Self Message with Event Generation\nDESCRIPTION: Pattern for sending a message to self while generating events using explicit self reference.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/userman/messages.rst.txt#2025-04-06_snippet_7\n\nLANGUAGE: logtalk\nCODE:\n```\nPredicate :-\n    ...,\n    % get self reference\n    self(Self),\n    % send a message to self using (::)/2\n    Self::Message,\n    ... .\n```\n\n----------------------------------------\n\nTITLE: Asserting Clauses with assertz/1 in Logtalk\nDESCRIPTION: Demonstrates the syntax for using assertz/1 to assert clauses as the last one for dynamic predicates. It shows the different forms of the method and how it behaves when asserting new predicates.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/refman/methods/assertz_1.rst.txt#2025-04-06_snippet_0\n\nLANGUAGE: Logtalk\nCODE:\n```\nassertz(Head)\nassertz((Head:-Body))\n```\n\n----------------------------------------\n\nTITLE: Loading Required Packs in Application\nDESCRIPTION: Example Logtalk initialization code for loading required packs in an application loader file.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/tools/packs/NOTES.md#2025-04-06_snippet_12\n\nLANGUAGE: prolog\nCODE:\n```\n:- initialization((\n\t% load required packs\n\tlogtalk_load(foo(loader)),\n\tlogtalk_load(bar(loader)),\n\t...\n\t% load application files\n\t...\n)).\n```\n\n----------------------------------------\n\nTITLE: Finding Minimum Key-Value Pair in Dictionary in Logtalk\nDESCRIPTION: Finds the key-value pair with the minimum key in a dictionary. Fails if the dictionary is empty.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/dictionaryp_0.rst.txt#2025-04-06_snippet_17\n\nLANGUAGE: Logtalk\nCODE:\n```\nmin(Dictionary,Key,Value)\n```\n\n----------------------------------------\n\nTITLE: Resetting All Profiling Data in Logtalk\nDESCRIPTION: Shows how to reset all profiling data collected by the ports_profiler.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/devtools/ports_profiler.rst.txt#2025-04-06_snippet_7\n\nLANGUAGE: Prolog\nCODE:\n```\n| ?- ports_profiler::reset.\n```\n\n----------------------------------------\n\nTITLE: Printing Predicate-Specific Port Profiling Data in Logtalk\nDESCRIPTION: Prints a table with all port profiling data for the specified entity predicate or non-terminal. This predicate is compiled with the 'static' flag and provides one proof for given entity and predicate/non-terminal indicators.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/ports_profiler_0.rst.txt#2025-04-06_snippet_4\n\nLANGUAGE: Logtalk\nCODE:\n```\ndata(Entity,Predicate)\n```\n\n----------------------------------------\n\nTITLE: Loading Doclet in Logtalk\nDESCRIPTION: This snippet demonstrates how to load a doclet in Logtalk. It loads both the doclet loader and the specific doclet file, which is expected to be named 'doclet.lgt' or 'doclet.logtalk'.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/tools/doclet/NOTES.md#2025-04-06_snippet_0\n\nLANGUAGE: Logtalk\nCODE:\n```\n| ?- logtalk_load([doclet(loader), doclet]).\n```\n\n----------------------------------------\n\nTITLE: Bypassing Expansions in Logtalk\nDESCRIPTION: Examples showing how terms and goals wrapped by the external/1 control construct are not expanded, providing a mechanism to bypass expansion rules.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/userman/expansion.rst#2025-04-06_snippet_5\n\nLANGUAGE: text\nCODE:\n```\n| ?- an_object::expand_term({ping}, Term).\n\nTerm = {ping}\nyes\n\n| ?- an_object::expand_goal({a}, Goal).\n\nGoal = {a}\nyes\n```\n\n----------------------------------------\n\nTITLE: Declaring Synchronized Predicates in Logtalk\nDESCRIPTION: Examples of declaring synchronized predicates using the synchronized/1 directive in Logtalk. Synchronized predicates are used for thread synchronization in concurrent programming.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/userman/predicates.rst#2025-04-06_snippet_29\n\nLANGUAGE: Logtalk\nCODE:\n```\n:- synchronized(write_log_entry/2).\n:- synchronized([produce/1, consume/1]).\n```\n\n----------------------------------------\n\nTITLE: Reading Text Files to Characters in Logtalk\nDESCRIPTION: Reads a text file into a list of characters. Takes a file name as input and returns the file contents as a list of characters.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/reader_0.rst.txt#2025-04-06_snippet_2\n\nLANGUAGE: Logtalk\nCODE:\n```\nfile_to_chars(File,Chars)\n```\n\n----------------------------------------\n\nTITLE: Using Meta Message Format+Arguments in Logtalk\nDESCRIPTION: New meta message format for use with the message printing mechanism, combining a format template and arguments list.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/RELEASE_NOTES.md#2025-04-06_snippet_39\n\nLANGUAGE: logtalk\nCODE:\n```\nFormat+Arguments\n```\n\n----------------------------------------\n\nTITLE: Defining a Debug Handler Provider in Logtalk\nDESCRIPTION: Demonstrates how to define a custom debug handler provider by adding clauses for debug_handler/1 and debug_handler/3 multifile predicates to an object or category. This creates a foundation for a custom debugging tool.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/userman/debugging.rst.txt#2025-04-06_snippet_33\n\nLANGUAGE: prolog\nCODE:\n```\n% declare my_debug_handler as a debug handler provider\n:- multifile(logtalk::debug_handler/1).\nlogtalk::debug_handler(my_debug_handler).\n\n% handle debug events\n:- multifile(logtalk::debug_handler/3).\nlogtalk::debug_handler(my_debug_handler, Event, ExCtx) :-\n    debug_handler(Event, ExCtx).\n\ndebug_handler(fact(Entity,Fact,Clause,File,Line), ExCtx) :-\n    ...\ndebug_handler(rule(Entity,Head,Clause,File,Line), ExCtx) :-\n    ...\ndebug_handler(top_goal(Goal, TGoal), ExCtx) :-\n    ...\ndebug_handler(goal(Goal, TGoal), ExCtx) :-\n    ...\n```\n\n----------------------------------------\n\nTITLE: List Parametric Object Adjacent Elements Query\nDESCRIPTION: Uses the nextto/2 predicate with a parametric list object to find an element adjacent to a given element in the list.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/parametric/NOTES.md#2025-04-06_snippet_4\n\nLANGUAGE: logtalk\nCODE:\n```\n[1, 2, 3]::nextto(2, Y).\n```\n\n----------------------------------------\n\nTITLE: Recompiling in Debug Mode\nDESCRIPTION: Command to recompile all loaded files in debug mode.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/userman/debugging.rst#2025-04-06_snippet_3\n\nLANGUAGE: text\nCODE:\n```\n| ?- logtalk_make(debug).\n```\n\n----------------------------------------\n\nTITLE: Using the uses/2 Directive in Logtalk\nDESCRIPTION: The uses/2 directive allows importing predicates from other objects, simplifying code by avoiding explicit message sending. It follows the pattern :- uses(Object, [Predicate/Arity, ...]).\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/userman/predicates.rst#2025-04-06_snippet_14\n\nLANGUAGE: logtalk\nCODE:\n```\n:- uses(Object, [\n    Name1/Arity1, Name2/Arity2, ...\n]).\n```\n\n----------------------------------------\n\nTITLE: Implementing a Failure-Driven Benchmarking Predicate in Prolog\nDESCRIPTION: A simple benchmarking predicate that uses a failure-driven loop to repeatedly call a goal N times, minimizing interference from garbage-collection or memory expansion mechanisms.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/userman/messages.rst.txt#2025-04-06_snippet_9\n\nLANGUAGE: Prolog\nCODE:\n```\nbenchmark(N, Goal) :-\n    repeat(N),\n        call(Goal),\n    fail.\n\nbenchmark(_, _).\n```\n\n----------------------------------------\n\nTITLE: CBOR Generate Predicate Definition\nDESCRIPTION: Predicate that generates a list of bytes in CBOR format from a given term. Takes a ground term as input and produces a list of bytes. Throws an error if the term cannot be represented in CBOR format.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/cbor_1.rst.txt#2025-04-06_snippet_1\n\nLANGUAGE: prolog\nCODE:\n```\ngenerate(@ground,-list(byte))\n```\n\n----------------------------------------\n\nTITLE: Using Object Wrapper Hook for Prolog Code Profiling in Logtalk\nDESCRIPTION: Demonstrates an alternative method to wrap Prolog code for profiling using the object_wrapper_hook.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/devtools/ports_profiler.rst.txt#2025-04-06_snippet_13\n\nLANGUAGE: Prolog\nCODE:\n```\n| ?- logtalk_load(hook_objects(loader)).\n...\n\n| ?- logtalk_load(\n         code,\n         [hook(object_wrapper_hook), debug(on),\n          source_data(on), context_switching_calls(allow)]\n     ).\n```\n\n----------------------------------------\n\nTITLE: Using the uses/2 Directive in Logtalk\nDESCRIPTION: The uses/2 directive allows importing predicates from other objects, simplifying code by avoiding explicit message sending. It follows the pattern :- uses(Object, [Predicate/Arity, ...]).\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/userman/predicates.rst#2025-04-06_snippet_14\n\nLANGUAGE: logtalk\nCODE:\n```\n:- uses(Object, [\n    Name1/Arity1, Name2/Arity2, ...\n]).\n```\n\n----------------------------------------\n\nTITLE: Generating Single-File Allure Report\nDESCRIPTION: Demonstrates how to generate a single-file Allure report with a custom title using the logtalk_allure_report script.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/devtools/lgtunit.rst.txt#2025-04-06_snippet_49\n\nLANGUAGE: bash\nCODE:\n```\n$ logtalk_allure_report -s -t \"My Amazing Tests Report\"\n```\n\n----------------------------------------\n\nTITLE: Usage Examples of instantiates_class in Logtalk\nDESCRIPTION: Demonstrates how to use the instantiates_class/2 and instantiates_class/3 predicates in Logtalk queries to check instance relationships and enumerate instances of a class.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/refman/predicates/instantiates_class_2_3.rst#2025-04-06_snippet_2\n\nLANGUAGE: logtalk\nCODE:\n```\n% check that the water_jug is an instante of state_space:\n| ?- instantiates_class(water_jug, state_space).\n\n% enumerate the state_space instances where the\n% instantiation relation is public:\n| ?- instantiates_class(Space, state_space, public).\n```\n\n----------------------------------------\n\nTITLE: Running Format Library Tests in Logtalk\nDESCRIPTION: Code to load and run the minimal tests for the format library predicates.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/libraries/format.rst#2025-04-06_snippet_1\n\nLANGUAGE: prolog\nCODE:\n```\n| ?- logtalk_load(format(tester)).\n```\n\n----------------------------------------\n\nTITLE: Library Scanning in Logtalk\nDESCRIPTION: Method to scan all entities in all loaded files from a specified library for dead code using given options.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/dead_code_scanner_0.rst.txt#2025-04-06_snippet_3\n\nLANGUAGE: logtalk\nCODE:\n```\nlibrary(Library,Options)\n```\n\n----------------------------------------\n\nTITLE: Usage Examples for abolish/1 Method in Logtalk\nDESCRIPTION: Examples demonstrating how to abolish dynamic predicates in different contexts: local/this, self, and explicit objects.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/refman/methods/abolish_1.rst#2025-04-06_snippet_2\n\nLANGUAGE: logtalk\nCODE:\n```\nabolish(Predicate)\n::abolish(Predicate)\nObject::abolish(Predicate)\n```\n\n----------------------------------------\n\nTITLE: Adding Element to Queue End in Logtalk\nDESCRIPTION: Predicate to add a new element at the end of the queue. It takes an element and a queue as input, and returns the new queue.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/queuep_0.rst.txt#2025-04-06_snippet_2\n\nLANGUAGE: Logtalk\nCODE:\n```\njoin(Element,Queue,NewQueue)\n```\n\n----------------------------------------\n\nTITLE: Implementing a Tracer Object in Logtalk\nDESCRIPTION: Defines a 'tracer' object that implements the monitoring protocol to track messages sent to objects by printing descriptive text to standard output.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/userman/events.rst.txt#2025-04-06_snippet_5\n\nLANGUAGE: Logtalk\nCODE:\n```\n:- object(tracer,\n    % built-in protocol for event handler methods\n    implements(monitoring)).\n\n    before(Object, Message, Sender) :-\n        write('call: '), writeq(Object),\n        write(' <-- '), writeq(Message),\n        write(' from '), writeq(Sender), nl.\n\n    after(Object, Message, Sender) :-\n        write('exit: '), writeq(Object),\n        write(' <-- '), writeq(Message),\n        write(' from '), writeq(Sender), nl.\n\n:- end_object.\n```\n\n----------------------------------------\n\nTITLE: Defining Entity Properties Grammar in Logtalk (BNF)\nDESCRIPTION: Specifies the BNF grammar for Logtalk entity properties, including categories, objects, and protocols. Defines various attributes and metadata associated with Logtalk entities.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/refman/grammar.rst#2025-04-06_snippet_6\n\nLANGUAGE: BNF\nCODE:\n```\ncategory_property ::=\n      \"static\"\n      | \"dynamic\"\n      | \"built_in\"\n      | \"file(\" atom \")\"\n      | \"file(\" atom \",\" atom \")\"\n      | \"lines(\" integer \",\" integer \")\"\n      | \"directive(\" integer \",\" integer \")\"\n      | \"events\"\n      | \"source_data\"\n      | \"public(\" entity_resources_list \")\"\n      | \"protected(\" entity_resources_list \")\"\n      | \"private(\" entity_resources_list \")\"\n      | \"declares(\" predicate_indicator \",\" predicate_declaration_property_list \")\"\n      | \"defines(\" predicate_indicator \",\" predicate_definition_property_list \")\"\n      | \"includes(\" predicate_indicator \",\" ( object_identifier | category_identifier ) \",\" predicate_definition_property_list \")\"\n      | \"provides(\" predicate_indicator \",\" ( object_identifier | category_identifier ) \",\" predicate_definition_property_list \")\"\n      | \"alias(\" ( object_identifier | module_identifier ) \",\" entity_alias_property_list \")\"\n      | \"alias(\" predicate_indicator \",\" predicate_alias_property_list \")\"\n      | \"calls(\" predicate \",\" predicate_call_update_property_list \")\"\n      | \"updates(\" predicate \",\" predicate_call_update_property_list \")\"\n      | \"number_of_clauses(\" integer \")\"\n      | \"number_of_rules(\" integer \")\"\n      | \"number_of_user_clauses(\" integer \")\"\n      | \"number_of_user_rules(\" integer \")\"\n      | \"debugging\"\n\n   object_property ::=\n      \"static\"\n      | \"dynamic\"\n      | \"built_in\"\n      | \"threaded\"\n      | \"file(\" atom \")\"\n      | \"file(\" atom \",\" atom \")\"\n      | \"lines(\" integer \",\" integer \")\"\n      | \"directive(\" integer \",\" integer \")\"\n      | \"context_switching_calls\"\n      | \"dynamic_declarations\"\n      | \"events\"\n      | \"source_data\"\n      | \"complements(\" ( \"allow\" | \"restrict\" ) \")\"\n      | \"complements\"\n      | \"public(\" entity_resources_list \")\"\n      | \"protected(\" entity_resources_list \")\"\n      | \"private(\" entity_resources_list \")\"\n      | \"declares(\" predicate_indicator \",\" predicate_declaration_property_list \")\"\n      | \"defines(\" predicate_indicator \",\" predicate_definition_property_list \")\"\n      | \"includes(\" predicate_indicator \",\" ( object_identifier | category_identifier ) \",\" predicate_definition_property_list \")\"\n      | \"provides(\" predicate_indicator \",\" ( object_identifier | category_identifier ) \",\" predicate_definition_property_list \")\"\n      | \"alias(\" ( object_identifier | module_identifier ) \",\" entity_alias_property_list \")\"\n      | \"alias(\" predicate_indicator \",\" predicate_alias_property_list \")\"\n      | \"calls(\" predicate \",\" predicate_call_update_property_list \")\"\n      | \"updates(\" predicate \",\" predicate_call_update_property_list \")\"\n      | \"number_of_clauses(\" integer \")\"\n      | \"number_of_rules(\" integer \")\"\n      | \"number_of_user_clauses(\" integer \")\"\n      | \"number_of_user_rules(\" integer \")\"\n      | \"module\"\n      | \"debugging\"\n\n   protocol_property ::=\n      \"static\"\n      | \"dynamic\"\n      | \"built_in\"\n      | \"source_data\"\n      | \"file(\" atom \")\"\n      | \"file(\" atom \",\" atom \")\"\n      | \"lines(\" integer \",\" integer \")\"\n      | \"directive(\" integer \",\" integer \")\"\n      | \"public(\" entity_resources_list \")\"\n      | \"protected(\" entity_resources_list \")\"\n      | \"private(\" entity_resources_list \")\"\n      | \"declares(\" predicate_indicator \",\" predicate_declaration_property_list \")\"\n      | \"alias(\" predicate_indicator \",\" predicate_alias_property_list \")\"\n      | \"debugging\"\n```\n\n----------------------------------------\n\nTITLE: Selective Inheritance Example in Logtalk\nDESCRIPTION: Shows selective inheritance implementation for handling exceptions to inherited behavior.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/userman/inheritance.rst#2025-04-06_snippet_3\n\nLANGUAGE: logtalk\nCODE:\n```\n:- object(bird).\n\n    :- public(mode/1).\n\n    mode(walks).\n    mode(flies).\n\n:- end_object.\n\n\n:- object(penguin,\n    extends(bird)).\n\n    mode(swims).\n    mode(Mode) :-\n        ^^mode(Mode),\n        Mode \\== flies.\n\n:- end_object.\n```\n\n----------------------------------------\n\nTITLE: XML Parsing with Options using parse/3 in Logtalk\nDESCRIPTION: Parses XML with customizable options. Supports features like extended character handling, formatting control, namespace prefix management, and ampersand handling in PCDATA.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/xml_0.rst.txt#2025-04-06_snippet_1\n\nLANGUAGE: Logtalk\nCODE:\n```\nparse(Options,Codes,Document)\n```\n\n----------------------------------------\n\nTITLE: Specifying Template and Modes for mode/2 Directive in Logtalk\nDESCRIPTION: This snippet shows the template and modes for the mode/2 directive. It specifies that the first argument should be a predicate mode term or non-terminal mode term (indicated by +), and the second argument should be the number of proofs (also indicated by +).\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/refman/directives/mode_2.rst#2025-04-06_snippet_1\n\nLANGUAGE: Logtalk\nCODE:\n```\nmode(+predicate_mode_term, +number_of_proofs)\nmode(+non_terminal_mode_term, +number_of_proofs)\n```\n\n----------------------------------------\n\nTITLE: Documenting Predicate Mode with Multiple Success Pattern\nDESCRIPTION: Mode directive for the current_predicate/1 standard predicate showing it succeeds zero or more times when its argument is valid, despite potentially throwing exceptions with invalid arguments.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/userman/predicates.rst#2025-04-06_snippet_5\n\nLANGUAGE: logtalk\nCODE:\n```\n:- mode(current_predicate(?predicate_indicator), zero_or_more).\n```\n\n----------------------------------------\n\nTITLE: Adding Approximate Equality Operator to Object\nDESCRIPTION: Demonstrates how to add the approximate equality operator to an object or category for use in tests.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/devtools/lgtunit.rst.txt#2025-04-06_snippet_42\n\nLANGUAGE: logtalk\nCODE:\n```\n:- uses(lgtunit, [\n    op(700, xfx, =~=), (=~=)/2\n]).\n```\n\n----------------------------------------\n\nTITLE: Setting Global Documentation Support Flag\nDESCRIPTION: Command to globally enable the source_data flag for documentation generation.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/tools/lgtdoc/NOTES.md#2025-04-06_snippet_3\n\nLANGUAGE: logtalk\nCODE:\n```\n?- set_logtalk_flag(source_data, on).\n```\n\n----------------------------------------\n\nTITLE: Defining prolog_module_hook Object in Logtalk\nDESCRIPTION: Defines the prolog_module_hook object that applies expansion rules from a specified Prolog module. It implements the expanding interface and uses static and context_switching_calls compilation flags.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/prolog_module_hook_1.rst.txt#2025-04-06_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n``prolog_module_hook(Module)``\n==============================\n\nThis hook object applies the expansion rules defined in a Prolog module (e.g., ``user``).\n\n| **Availability:** \n|    ``logtalk_load(hook_objects(loader))``\n\n| **Author:** Paulo Moura\n| **Version:** 1:0:0\n| **Date:** 2020-02-17\n\n| **Compilation flags:**\n|    ``static, context_switching_calls``\n\n\n| **Implements:**\n|    ``public`` :ref:`expanding <expanding/0>`\n```\n\n----------------------------------------\n\nTITLE: Loading Application with Hot Patching for Tests\nDESCRIPTION: Shows how to set up a test driver file to allow complementing categories and load a patch after loading the application code, implementing the hot patching mocking technique.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/devtools/lgtunit.rst.txt#2025-04-06_snippet_33\n\nLANGUAGE: logtalk\nCODE:\n```\n:- initialization((\n    ...,\n    set_logtalk_flag(complements, allow),\n    logtalk_load(application),\n    logtalk_load(mock_login),\n    ...\n)).\n```\n\n----------------------------------------\n\nTITLE: Testing the Listing Library in Logtalk\nDESCRIPTION: Command to load and run tests for the listing library predicates.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/library/listing/NOTES.md#2025-04-06_snippet_1\n\nLANGUAGE: logtalk\nCODE:\n```\n| ?- logtalk_load(listing(tester)).\n```\n\n----------------------------------------\n\nTITLE: Grammar Rules Expansion Example\nDESCRIPTION: Demonstrates using the grammar_rules_hook object to expand grammar rules into clauses.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/libraries/hook_objects.rst.txt#2025-04-06_snippet_3\n\nLANGUAGE: logtalk\nCODE:\n```\n| ?- grammar_rules_hook::term_expansion((a --> [b],c), Clause).\n```\n\n----------------------------------------\n\nTITLE: Examples of Dynamic Directive Usage in Logtalk\nDESCRIPTION: This snippet provides practical examples of using the dynamic/1 directive in Logtalk. It demonstrates how to declare single dynamic predicates, multiple dynamic predicates, and lists of dynamic predicates.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/refman/directives/dynamic_1.rst#2025-04-06_snippet_2\n\nLANGUAGE: Logtalk\nCODE:\n```\n:- dynamic(counter/1).\n\n:- dynamic((lives/2, works/2)).\n\n:- dynamic([db/4, key/2, file/3]).\n```\n\n----------------------------------------\n\nTITLE: Using current_protocol/1 to Enumerate Protocols in Logtalk\nDESCRIPTION: Example query demonstrating how to use the current_protocol/1 predicate to enumerate all defined protocols in a Logtalk system through backtracking.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/refman/predicates/current_protocol_1.rst#2025-04-06_snippet_2\n\nLANGUAGE: logtalk\nCODE:\n```\n% enumerate the defined protocols:\n| ?- current_protocol(Protocol).\n\nProtocol = expanding ;\nProtocol = monitoring ;\nProtocol = forwarding ;\n...\n```\n\n----------------------------------------\n\nTITLE: Find All Members - Logtalk Meta-Predicate\nDESCRIPTION: Finds all members of a list that satisfy a given test. Takes member template, input list, test predicate and returns matching results.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/metap_0.rst.txt#2025-04-06_snippet_2\n\nLANGUAGE: logtalk\nCODE:\n```\nfindall_member(Member,List,Test,Result)\n```\n\n----------------------------------------\n\nTITLE: Example Usage of Category Directive in Logtalk\nDESCRIPTION: Provides practical examples of using the category directive in different scenarios, such as simple category definitions, implementing protocols, extending categories, and complementing objects.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/refman/directives/category_1_4.rst#2025-04-06_snippet_2\n\nLANGUAGE: logtalk\nCODE:\n```\n:- category(monitoring).\n\n:- category(monitoring,\n    implements(monitoringp)).\n\n:- category(attributes,\n    implements(protected::variables)).\n\n:- category(extended,\n    extends(minimal)).\n\n:- category(logging,\n    implements(monitoring),\n    complements(employee)).\n```\n\n----------------------------------------\n\nTITLE: Suppressing Logtalk Startup Messages Using message_hook\nDESCRIPTION: This category definition demonstrates how to use the message_hook/4 predicate to suppress default compiler flag values during Logtalk startup for a more terse experience.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/userman/printing.rst.txt#2025-04-06_snippet_6\n\nLANGUAGE: logtalk\nCODE:\n```\n:- category(my_terse_logtalk_startup_settings).\n\n    :- multifile(logtalk::message_hook/4).\n    :- dynamic(logtalk::message_hook/4).\n\n    logtalk::message_hook(default_flags, comment(settings), core, _).\n\n:- end_category.\n```\n\n----------------------------------------\n\nTITLE: Declaring Public Grammar Rules and Operators in Logtalk\nDESCRIPTION: Examples of using scope directives to declare grammar rule non-terminals and operators as public in Logtalk. This allows them to be used by other objects or categories.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/userman/predicates.rst.txt#2025-04-06_snippet_1\n\nLANGUAGE: logtalk\nCODE:\n```\n:- public(url//1).\n\n:- public(op(800, fx, tag)).\n```\n\n----------------------------------------\n\nTITLE: Accessing Singleton Predicates\nDESCRIPTION: This snippet demonstrates how to access predicates of the singleton prototype directly using the singleton:: syntax.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/design_patterns/creational/singleton/NOTES.md#2025-04-06_snippet_2\n\nLANGUAGE: logtalk\nCODE:\n```\nsingleton::foo(X).\n```\n\n----------------------------------------\n\nTITLE: Active Debug Handler Predicate Definition in Logtalk\nDESCRIPTION: Defines a dynamic predicate that maintains the current active debug handler provider. Only one debug handler can be active at any time.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/logtalk_0.rst.txt#2025-04-06_snippet_7\n\nLANGUAGE: logtalk\nCODE:\n```\nactive_debug_handler_(Provider)\n```\n\n----------------------------------------\n\nTITLE: Generating Events for Self Messages in Logtalk\nDESCRIPTION: Demonstrates how to generate events for a public message sent to self by explicitly getting the self reference and using the (::)/2 control construct.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/userman/messages.rst#2025-04-06_snippet_7\n\nLANGUAGE: Logtalk\nCODE:\n```\nPredicate :-\n    ...,\n    % get self reference\n    self(Self),\n    % send a message to self using (::)/2\n    Self::Message,\n    ... .\n```\n\n----------------------------------------\n\nTITLE: Retrieving Current Date and Time in Logtalk\nDESCRIPTION: Returns the current date and time components. Note that most backends do not provide sub-second accuracy.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/osp_0.rst.txt#2025-04-06_snippet_13\n\nLANGUAGE: prolog\nCODE:\n```\ndate_time(Year, Month, Day, Hours, Minutes, Seconds, Milliseconds)\n```\n\n----------------------------------------\n\nTITLE: Defining Dynamic Predicate for Tracing Status in Logtalk\nDESCRIPTION: Defines a dynamic predicate 'tracing_/0' that is true if tracing is enabled. This predicate is used internally by the debugger to track its tracing state.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/debugger_0.rst.txt#2025-04-06_snippet_1\n\nLANGUAGE: Logtalk\nCODE:\n```\ntracing_/0\n```\n\n----------------------------------------\n\nTITLE: Getting Current Git Branch\nDESCRIPTION: Shows how to get the name of the current local git branch using branch/2 predicate.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/libraries/git.rst.txt#2025-04-06_snippet_5\n\nLANGUAGE: logtalk\nCODE:\n```\n| ?- git::branch('/Users/pmoura/Documents/Logtalk/logtalk3', Branch).\n\nBranch = master\nyes\n```\n\n----------------------------------------\n\nTITLE: Listing Properties of Added Predicate\nDESCRIPTION: Displays all properties of the predicates/1 predicate that was added by the complementing category.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/complements/allow/NOTES.md#2025-04-06_snippet_11\n\nLANGUAGE: logtalk\nCODE:\n```\n%%table\nemployee::predicate_property(predicates(_), Property).\n```\n\n----------------------------------------\n\nTITLE: Loading UUID Library in Logtalk\nDESCRIPTION: Loads all entities in the UUID library using the loader.lgt file.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/libraries/uuid.rst.txt#2025-04-06_snippet_0\n\nLANGUAGE: Prolog\nCODE:\n```\n| ?- logtalk_load(uuid(loader)).\n```\n\n----------------------------------------\n\nTITLE: Defining a Parametric Object in Logtalk\nDESCRIPTION: Demonstrates the syntax for defining a parametric object 'circle' with radius and color parameters.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/proxies/NOTES.md#2025-04-06_snippet_0\n\nLANGUAGE: logtalk\nCODE:\n```\n:- object(circle(_Radius, _Color)).\n\t...\n:- end_object.\n```\n\n----------------------------------------\n\nTITLE: Testing System Error Output with Stream Redirection in Logtalk\nDESCRIPTION: An example showing how to test backend Prolog warnings by redirecting the error stream using set_stream/2 and verifying the output content.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/devtools/lgtunit.rst#2025-04-06_snippet_39\n\nLANGUAGE: logtalk\nCODE:\n```\ntest(singletons_warning, true(Assertion)) :-\n       ^^set_text_output(''),\n       current_output(Stream),\n       set_stream(Stream, alias(user_error)),\n       consult(broken_file),\n       ^^text_output_assertion('WARNING: initialization/1 directive failed', Assertion).\n```\n\n----------------------------------------\n\nTITLE: Current Protocol Predicate Definition\nDESCRIPTION: The base predicate signature for enumerating currently defined protocols. Accepts a Protocol parameter that can be either a variable or a protocol identifier.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/refman/predicates/current_protocol_1.rst.txt#2025-04-06_snippet_0\n\nLANGUAGE: prolog\nCODE:\n```\ncurrent_protocol(Protocol)\n```\n\n----------------------------------------\n\nTITLE: Examples of Dynamic Directive Usage in Logtalk\nDESCRIPTION: This snippet provides practical examples of using the dynamic/1 directive in Logtalk. It demonstrates how to declare single dynamic predicates, multiple dynamic predicates, and lists of dynamic predicates.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/refman/directives/dynamic_1.rst#2025-04-06_snippet_2\n\nLANGUAGE: Logtalk\nCODE:\n```\n:- dynamic(counter/1).\n\n:- dynamic((lives/2, works/2)).\n\n:- dynamic([db/4, key/2, file/3]).\n```\n\n----------------------------------------\n\nTITLE: List Parametric Object Member Query\nDESCRIPTION: Demonstrates using the member/1 predicate with a parametric list object to retrieve list elements one by one.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/parametric/NOTES.md#2025-04-06_snippet_2\n\nLANGUAGE: logtalk\nCODE:\n```\n%%table\n[1, 2, 3]::member(X).\n```\n\n----------------------------------------\n\nTITLE: Defining Table of Contents for Predicate Directives in reStructuredText\nDESCRIPTION: This snippet defines a table of contents using reStructuredText syntax, listing various predicate directives available in Logtalk. Each directive is linked to its own documentation page.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/refman/directives/predicate_directives.rst#2025-04-06_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. toctree::\n   :maxdepth: 1\n\n   alias_2\n   coinductive_1\n   discontiguous_1\n   dynamic_1\n   info_2\n   meta_predicate_1\n   meta_non_terminal_1\n   mode_2\n   multifile_1\n   op_3\n   private_1\n   protected_1\n   public_1\n   synchronized_1\n   uses_2\n   use_module_2\n```\n\n----------------------------------------\n\nTITLE: Defining normalize_range/4 Predicate for Number Lists in Logtalk\nDESCRIPTION: Normalizes a list of numbers to a specified range. The caller must handle arithmetic exceptions if the list is not normalizable.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/numberlistp_0.rst.txt#2025-04-06_snippet_16\n\nLANGUAGE: Logtalk\nCODE:\n```\nnormalize_range(List,Minimum,Maximum,NormalizedList)\n```\n\n----------------------------------------\n\nTITLE: Text Output Assertion with Alias in Logtalk\nDESCRIPTION: Returns an assertion for checking that the temporary file referenced by the given alias contains the expected text contents. Uses default stream options.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/lgtunit_0.rst.txt#2025-04-06_snippet_48\n\nLANGUAGE: logtalk\nCODE:\n```\ntext_output_assertion(Alias,Contents,Assertion)\n```\n\n----------------------------------------\n\nTITLE: Type Checking with Exceptions\nDESCRIPTION: Examples demonstrating type checking that throws exceptions for invalid types.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/libraries/types.rst#2025-04-06_snippet_4\n\nLANGUAGE: prolog\nCODE:\n```\n| ?- catch(type::check(integer, abc), Error, true).\n| ?- catch(type::check(integer, abc, foo/3), Error, true).\n```\n\n----------------------------------------\n\nTITLE: Defining Attributes Category in Logtalk\nDESCRIPTION: Creates a category that implements predicates for handling dynamic object attributes. Includes public predicates for setting, getting, and deleting attributes, along with a private dynamic predicate for storage.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/tutorial/attributes.rst.txt#2025-04-06_snippet_0\n\nLANGUAGE: logtalk\nCODE:\n```\n:- category(attributes).\n\n    :- public(set_attribute/2).\n    :- mode(set_attribute(+nonvar, +nonvar), one).\n\n    :- public(get_attribute/2).\n    :- mode(get_attribute(?nonvar, ?nonvar), zero_or_more).\n\n    :- public(del_attribute/2).\n    :- mode(del_attribute(?nonvar, ?nonvar), zero_or_more).\n\n    :- public(del_attributes/2).\n    :- mode(del_attributes(@term, @term), one).\n\n    :- private(attribute_/2).\n    :- mode(attribute_(?nonvar, ?nonvar), zero_or_more).\n    :- dynamic(attribute_/2).\n\n    set_attribute(Attribute, Value):-\n        ::retractall(attribute_(Attribute, _)),\n        ::assertz(attribute_(Attribute, Value)).\n\n    get_attribute(Attribute, Value):-\n        ::attribute_(Attribute, Value).\n\n    del_attribute(Attribute, Value):-\n        ::retract(attribute_(Attribute, Value)).\n\n    del_attributes(Attribute, Value):-\n        ::retractall(attribute_(Attribute, Value)).\n\n:- end_category.\n```\n\n----------------------------------------\n\nTITLE: Defining catch/3 Method Signature in Prolog\nDESCRIPTION: Defines the signature of the catch/3 method, which takes three arguments: Goal, Catcher, and Recovery. This method is used to catch exceptions thrown by a goal.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/refman/methods/catch_3.rst.txt#2025-04-06_snippet_0\n\nLANGUAGE: Prolog\nCODE:\n```\ncatch(Goal, Catcher, Recovery)\n```\n\n----------------------------------------\n\nTITLE: Checking Unicode Core Properties\nDESCRIPTION: Examples of using various predicates from unicode_core_properties.pl to check core properties of Unicode code points.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/libraries/unicode_data.rst#2025-04-06_snippet_5\n\nLANGUAGE: Prolog\nCODE:\n```\n?- unicode_math(CodePoint).\n?- unicode_alphabetic(CodePoint).\n?- unicode_lowercase(CodePoint).\n?- unicode_uppercase(CodePoint).\n```\n\n----------------------------------------\n\nTITLE: Asserting Clauses in Categories Example\nDESCRIPTION: Demonstrates how to use asserta/1 within a category to add clauses to 'this' or 'self'. Shows the difference between local and object assertions.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/refman/methods/asserta_1.rst.txt#2025-04-06_snippet_2\n\nLANGUAGE: logtalk\nCODE:\n```\n:- category(attributes,\n    implements(attributes_protocol)).\n\n    :- private(attr_/1).\n    :- dynamic(attr_/1).\n\n    set_in_this(A, X) :-\n       asserta(attr_(A, X)).\n\n    set_in_self(A, X) :-\n       ::asserta(attr_(A, X)).\n\n    ...\n```\n\n----------------------------------------\n\nTITLE: Installing Package with Options in Logtalk\nDESCRIPTION: Predicate for installing a package with specified registry, package name, version and options. Supports various installation options including update, force, compatibility checking and more.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/packs_0.rst.txt#2025-04-06_snippet_0\n\nLANGUAGE: logtalk\nCODE:\n```\ninstall(Registry,Pack,Version,Options)\n```\n\n----------------------------------------\n\nTITLE: Generating Subsequences of Given Length in Logtalk\nDESCRIPTION: Generates subsequences of a specified length from a list, preserving element order.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/listp_0.rst.txt#2025-04-06_snippet_24\n\nLANGUAGE: Logtalk\nCODE:\n```\nsubsequence(List,Length,Subsequence,Remaining)\n```\n\n----------------------------------------\n\nTITLE: Testing Dead Code Scanner in Logtalk\nDESCRIPTION: Query to load and run tests for the dead code scanner tool\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/tools/dead_code_scanner/NOTES.md#2025-04-06_snippet_1\n\nLANGUAGE: prolog\nCODE:\n```\n| ?- logtalk_load(dead_code_scanner(tester)).\n```\n\n----------------------------------------\n\nTITLE: Defining Module Multifile Predicates in Logtalk Objects\nDESCRIPTION: Demonstrates how to implement clauses for Prolog module multifile predicates within Logtalk objects, allowing calls to local object predicates from the clause bodies.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/userman/predicates.rst#2025-04-06_snippet_67\n\nLANGUAGE: prolog\nCODE:\n```\n:- object(...).\n\n    :- multifile(clpfd:run_propagator/2).\n    clpfd:run_propagator(..., ...) :-\n        % calls to local object predicates\n        ...\n\n:- end_object.\n```\n\n----------------------------------------\n\nTITLE: Defining a Tracer Object in Logtalk\nDESCRIPTION: Creates a tracer object that implements the monitoring protocol to track messages sent to objects by printing descriptive text to the standard output.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/userman/events.rst#2025-04-06_snippet_5\n\nLANGUAGE: text\nCODE:\n```\n:- object(tracer,\n    % built-in protocol for event handler methods\n    implements(monitoring)).\n\n    before(Object, Message, Sender) :-\n        write('call: '), writeq(Object),\n        write(' <-- '), writeq(Message),\n        write(' from '), writeq(Sender), nl.\n\n    after(Object, Message, Sender) :-\n        write('exit: '), writeq(Object),\n        write(' <-- '), writeq(Message),\n        write(' from '), writeq(Sender), nl.\n\n:- end_object.\n```\n\n----------------------------------------\n\nTITLE: Enumerating Port Profiling Data in Logtalk\nDESCRIPTION: Enumerates, by backtracking, all collected port profiling data. This predicate is compiled with the 'static' flag and can provide zero or more proofs for given port, entity, functor, arity, and count.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/ports_profiler_0.rst.txt#2025-04-06_snippet_7\n\nLANGUAGE: Logtalk\nCODE:\n```\nport(Port,Entity,Functor,Arity,Count)\n```\n\n----------------------------------------\n\nTITLE: Generating JSON from Prolog Terms in Logtalk\nDESCRIPTION: Demonstrates how to generate JSON encodings from Prolog terms using the generate/2 predicate with different output formats.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/library/json/NOTES.md#2025-04-06_snippet_4\n\nLANGUAGE: Prolog\nCODE:\n```\n| ?- json::generate(codes(Encoding), [a,{b-c}]).\nEncoding = [91,34,97,34,44,123,34,98,34,58,34,99,34,125,93]\nyes\n\n| ?- json::generate(chars(Encoding), [a,{b-c}]).\nEncoding = ['[','\"',a,'\"',',','{','\"',b,'\"',:,'\"',c,'\"','}',']']\nYes\n\n| ?- json::generate(atom(Encoding), [a,{b-c}]).\nEncoding = '[\"a\",{\"b\":\"c\"}]'\nYes\n```\n\n----------------------------------------\n\nTITLE: Message Interception for Terse Startup\nDESCRIPTION: Category definition for suppressing default compiler flag messages during Logtalk startup.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/userman/printing.rst#2025-04-06_snippet_6\n\nLANGUAGE: logtalk\nCODE:\n```\n:- category(my_terse_logtalk_startup_settings).\n\n    :- multifile(logtalk::message_hook/4).\n    :- dynamic(logtalk::message_hook/4).\n\n    logtalk::message_hook(default_flags, comment(settings), core, _).\n\n:- end_category.\n```\n\n----------------------------------------\n\nTITLE: Send-More-Money Puzzle with Standard Constraints\nDESCRIPTION: Solves the classic Send-More-Money cryptarithmetic puzzle using standard CLP(FD) constraints with leftmost labeling strategy.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/constraints/sicstus/NOTES.md#2025-04-06_snippet_10\n\nLANGUAGE: logtalk\nCODE:\n```\nsmm::smm([leftmost],value).\n```\n\n----------------------------------------\n\nTITLE: Predicate Modes\nDESCRIPTION: Mode declarations showing the expected argument types and number of solutions for the predicate.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/refman/predicates/extends_category_2_3.rst#2025-04-06_snippet_1\n\nLANGUAGE: prolog\nCODE:\n```\nextends_category(?category_identifier, ?category_identifier) - zero_or_more\nextends_category(?category_identifier, ?category_identifier, ?scope) - zero_or_more\n```\n\n----------------------------------------\n\nTITLE: Testing XML Parser Library in Logtalk\nDESCRIPTION: This snippet shows how to load the tester.lgt file to test the library predicates of the XML parser.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/contributions/xml_parser/NOTES.md#2025-04-06_snippet_1\n\nLANGUAGE: Logtalk\nCODE:\n```\n| ?- logtalk_load(xml_parser(tester)).\n```\n\n----------------------------------------\n\nTITLE: Setting Default Workflow Hook in Logtalk\nDESCRIPTION: Shows how to set the default workflow hook object for the compiler.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/libraries/hook_objects.rst.txt#2025-04-06_snippet_1\n\nLANGUAGE: logtalk\nCODE:\n```\n| ?- set_logtalk_flag(hook, default_workflow_hook).\n```\n\n----------------------------------------\n\nTITLE: Protocol Definition Grammar in BNF\nDESCRIPTION: Specifies the syntax rules for protocol definitions and extensions.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/refman/grammar.rst#2025-04-06_snippet_3\n\nLANGUAGE: bnf\nCODE:\n```\nprotocol ::=\n   begin_protocol_directive  ( protocol_directive )* end_protocol_directive\n\nbegin_protocol_directive ::=\n   \":- protocol(\" protocol_identifier ( \",\" extends_protocols)? \").\"\n```\n\n----------------------------------------\n\nTITLE: Example Using parameter/2 Method in Logtalk\nDESCRIPTION: Demonstrates how to use the parameter/2 method to access parameter values in a parametric object definition.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/refman/methods/parameter_2.rst#2025-04-06_snippet_2\n\nLANGUAGE: logtalk\nCODE:\n```\n:- object(box(_Color, _Weight)).\n\n    ...\n\n    % this clause is translated into\n    % a fact upon compilation\n    color(Color) :-\n        parameter(1, Color).\n\n    % upon compilation, the >/2 call will be\n    % the single goal in the clause body\n    heavy :-\n        parameter(2, Weight),\n        Weight > 10.\n    ...\n```\n\n----------------------------------------\n\nTITLE: Implementing Message Forwarding in Logtalk with Sender Preservation\nDESCRIPTION: Defines a forward/1 predicate that handles unknown messages by forwarding them to another object while preserving the original message sender.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/userman/errors.rst.txt#2025-04-06_snippet_7\n\nLANGUAGE: Logtalk\nCODE:\n```\nforward(Message) :-\n    % forward the message while preserving the sender\n    [Object::Message].\n```\n\n----------------------------------------\n\nTITLE: Using Assertion Predicates in Logtalk\nDESCRIPTION: Examples of using assertion/1 and assertion/2 predicates in Logtalk code. These predicates are used to add runtime checks to the code.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/tools/assertions/NOTES.md#2025-04-06_snippet_2\n\nLANGUAGE: Logtalk\nCODE:\n```\nfoo(L) :-\n\tassertions::assertion(non_empty_list(L)),\n\t...\n```\n\nLANGUAGE: Logtalk\nCODE:\n```\nfoo(L) :-\n\tassertions::assertion(foo_list_alerts, non_empty_list(L)),\n\t...\n```\n\n----------------------------------------\n\nTITLE: Implemented Protocols Syntax in Logtalk using BNF\nDESCRIPTION: Specifies the syntax for referring to implemented protocols in Logtalk, including individual protocols, sequences, and lists, with optional scope specifiers.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/refman/grammar.rst.txt#2025-04-06_snippet_5\n\nLANGUAGE: bnf\nCODE:\n```\nimplemented_protocols ::=\n   implemented_protocol\n   | implemented_protocol_sequence\n   | implemented_protocol_list\n\nimplemented_protocol ::=\n   protocol_identifier\n   | scope \"::\" protocol_identifier\n\nimplemented_protocol_sequence ::=\n   implemented_protocol\n   | implemented_protocol \",\" implemented_protocol_sequence\n\nimplemented_protocol_list ::=\n   \"[\" implemented_protocol_sequence \"]\"\n```\n\n----------------------------------------\n\nTITLE: Template and Modes for info/2 Directive\nDESCRIPTION: Specifies the template and modes for using the info/2 directive, indicating that it accepts a predicate indicator or non-terminal indicator as first argument and a predicate info list as second argument.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/refman/directives/info_2.rst.txt#2025-04-06_snippet_1\n\nLANGUAGE: logtalk\nCODE:\n```\ninfo(+predicate_indicator, +predicate_info_list)\ninfo(+non_terminal_indicator, +predicate_info_list)\n```\n\n----------------------------------------\n\nTITLE: Using Custom Set Elements with Parametric Set Object in Logtalk\nDESCRIPTION: Demonstrates using the custom rainbow_colors object with the set(Type) parametric object to create a set of rainbow colors.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/library/sets/NOTES.md#2025-04-06_snippet_6\n\nLANGUAGE: Logtalk\nCODE:\n```\n| ?- set(rainbow_colors)::as_set([blue, yellow, violet], Set).\nSet = [yellow, blue, violet]\nyes\n```\n\n----------------------------------------\n\nTITLE: Defining chebyshev_distance/3 Predicate for Number Lists in Logtalk\nDESCRIPTION: Calculates the Chebyshev distance between two lists of numbers. Fails if the lists are empty or have different lengths.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/numberlistp_0.rst.txt#2025-04-06_snippet_12\n\nLANGUAGE: Logtalk\nCODE:\n```\nchebyshev_distance(List1,List2,Distance)\n```\n\n----------------------------------------\n\nTITLE: Getting Month Names in Logtalk\nDESCRIPTION: Defines the 'name_of_month/3' predicate that associates month indexes with their full and abbreviated names. It can be used to convert between numeric month representation and textual names.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/datep_0.rst.txt#2025-04-06_snippet_3\n\nLANGUAGE: Logtalk\nCODE:\n```\nname_of_month(Index,Name,Short)\n```\n\n----------------------------------------\n\nTITLE: Calling Inherited Predicates in Logtalk\nDESCRIPTION: Shows how to call inherited predicate definitions using the control_call_super_1 control construct, similar to Smalltalk's 'super' primitive. This can be used within objects and categories.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/userman/messages.rst#2025-04-06_snippet_5\n\nLANGUAGE: Logtalk\nCODE:\n```\n..., ^^Predicate, ....\n```\n\n----------------------------------------\n\nTITLE: Defining the create_category/4 predicate signature in Logtalk\nDESCRIPTION: Specifies the signature of the create_category/4 predicate that allows creating new dynamic categories at runtime.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/refman/predicates/create_category_4.rst#2025-04-06_snippet_0\n\nLANGUAGE: logtalk\nCODE:\n```\ncreate_category(Identifier, Relations, Directives, Clauses)\n```\n\n----------------------------------------\n\nTITLE: Person Parametric Object Age Update\nDESCRIPTION: Updates a person's age using the grow_older/1 method that returns a new parametric object with updated age.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/parametric/NOTES.md#2025-04-06_snippet_10\n\nLANGUAGE: logtalk\nCODE:\n```\nperson(sally, 20)::grow_older(NewId).\n```\n\n----------------------------------------\n\nTITLE: Using Meta Compiler with Custom Source Files in Logtalk\nDESCRIPTION: Demonstrates how to use meta_compiler as a hook when loading a specific source file with optimizations enabled.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/libraries/meta_compiler.rst#2025-04-06_snippet_3\n\nLANGUAGE: prolog\nCODE:\n```\n| ?- logtalk_load(my_source_file, [hook(meta_compiler), optimize(on)]).\n```\n\n----------------------------------------\n\nTITLE: Using Setter Methods with Parametric Objects in Logtalk\nDESCRIPTION: Shows examples of using setter methods that return updated object identifiers for person and employee parametric objects.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/parvars/NOTES.md#2025-04-06_snippet_4\n\nLANGUAGE: logtalk\nCODE:\n```\nperson(sally, 20)::grow_older(NewId).\n```\n\nLANGUAGE: logtalk\nCODE:\n```\nemployee(sally, 21, 1200)::give_raise(250, NewId).\n```\n\n----------------------------------------\n\nTITLE: Creating Polygon Instances in Logtalk\nDESCRIPTION: Creates instances of different polygon types (triangle, square, pentagon, hexagon) with initial positions using the new/2 method.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/polygons/NOTES.md#2025-04-06_snippet_1\n\nLANGUAGE: logtalk\nCODE:\n```\ntriangle::new(t, [position-(4, 5)]).\n\nsquare::new(s, [position-(3, 2)]).\n\npentagon::new(p, [position-(7, 1)]).\n\nhexagon::new(h, [position-(2, 4)]).\n```\n\n----------------------------------------\n\nTITLE: Conditional Compilation Example\nDESCRIPTION: Demonstrates practical usage of elif/1 directive in combination with if and endif for handling different Prolog double quotes flag values.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/refman/directives/elif_1.rst#2025-04-06_snippet_2\n\nLANGUAGE: logtalk\nCODE:\n```\n:- if(current_prolog_flag(double_quotes, codes)).\n\n    ...\n\n:- elif(current_prolog_flag(double_quotes, chars)).\n\n    ...\n\n:- elif(current_prolog_flag(double_quotes, atom)).\n\n    ...\n\n:- endif.\n```\n\n----------------------------------------\n\nTITLE: Testing Mutations Library in Logtalk\nDESCRIPTION: Command to load and run tests for the mutations library using the tester.lgt file.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/libraries/mutations.rst.txt#2025-04-06_snippet_1\n\nLANGUAGE: logtalk\nCODE:\n```\n| ?- logtalk_load(mutations(tester)).\n```\n\n----------------------------------------\n\nTITLE: Loading the HTML Library\nDESCRIPTION: Code to load all entities in the HTML library using the loader file.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/libraries/html.rst.txt#2025-04-06_snippet_4\n\nLANGUAGE: prolog\nCODE:\n```\n| ?- logtalk_load(html(loader)).\n```\n\n----------------------------------------\n\nTITLE: Loading Types Library in Logtalk\nDESCRIPTION: Demonstrates how to load all entities in the 'types' library using the loader.lgt file. This is the primary way to include the full library functionality in a Logtalk program.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/libraries/types.rst.txt#2025-04-06_snippet_0\n\nLANGUAGE: prolog\nCODE:\n```\n| ?- logtalk_load(types(loader)).\n```\n\n----------------------------------------\n\nTITLE: Decoding Base64 to Text in Logtalk\nDESCRIPTION: This example shows decoding Base64 data to original text using the base64::parse/2 predicate, with the input as an atom and output as a list of bytes.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/libraries/base64.rst#2025-04-06_snippet_5\n\nLANGUAGE: prolog\nCODE:\n```\n| ?- base64::parse(atom('SGVsbG8gd29ybGQh'), Bytes),\n     atom_codes(Atom, Bytes).\nAtom = 'Hello world!'\nBytes = [72,101,108,108,111,32,119,111,114,108,100,33]\nyes\n```\n\n----------------------------------------\n\nTITLE: Converting Queue to List in Logtalk\nDESCRIPTION: Predicate to convert a queue to a list. It takes a queue as input and returns the equivalent list.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/queuep_0.rst.txt#2025-04-06_snippet_10\n\nLANGUAGE: Logtalk\nCODE:\n```\nas_list(Queue,List)\n```\n\n----------------------------------------\n\nTITLE: Example of using the (::)/2 control construct with Logtalk lists\nDESCRIPTION: Demonstrates sending a member/2 message to the list object, showing how backtracking works through all possible solutions when retrieving elements from a list.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/refman/control/send_to_object_2.rst#2025-04-06_snippet_2\n\nLANGUAGE: logtalk\nCODE:\n```\n| ?- list::member(X, [1, 2, 3]).\n\nX = 1 ;\nX = 2 ;\nX = 3\nyes\n```\n\n----------------------------------------\n\nTITLE: Reading CSV File into Dynamic Predicate in Logtalk\nDESCRIPTION: Demonstrates how to read a CSV file and assert its contents into a dynamic predicate, then query the asserted data.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/libraries/csv.rst#2025-04-06_snippet_4\n\nLANGUAGE: prolog\nCODE:\n```\n| ?- assertz(p(_,_,_)), retractall(p(_,_,_)).\nyes\n\n| ?- csv(keep, comma, true)::read_file('test_files/crlf_ending.csv', user, p/3).\nyes\n\n| ?-  p(A,B,C).\n\nA = aaa\nB = bbb\nC = ccc ? ;\n\nA = zzz\nB = yyy\nC = xxx\n```\n\n----------------------------------------\n\nTITLE: Using Tagged Asynchronous Calls in Logtalk\nDESCRIPTION: Demonstrates how to use threaded_call/2 and threaded_exit/2 with tags to uniquely identify asynchronous calls. Tags allow for explicit matching between calls and results when multiple asynchronous calls are made.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/userman/threads.rst.txt#2025-04-06_snippet_5\n\nLANGUAGE: text\nCODE:\n```\n?- threaded_call(member(X, [1,2,3]), Tag).\n\nTag = 1\nyes\n\n?- threaded_call(member(X, [1,2,3]), Tag).\n\nTag = 2\nyes\n\n?- threaded_exit(member(X, [1,2,3]), 2).\n\nX = 1 ;\nX = 2 ;\nX = 3\nyes\n```\n\n----------------------------------------\n\nTITLE: Simple Loader File Implementation\nDESCRIPTION: Example of a basic loader file that sets global flags and loads source files.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/userman/programming.rst.txt#2025-04-06_snippet_7\n\nLANGUAGE: prolog\nCODE:\n```\n:- initialization((\n    % set project-specific global flags\n    set_logtalk_flag(events, allow),\n    % load the project source files\n    logtalk_load([source1, source2, source3])\n)).\n```\n\n----------------------------------------\n\nTITLE: Defining uses/2 Directive Syntax\nDESCRIPTION: Shows the different valid syntax forms for the uses/2 directive including support for predicates, non-terminals, and operators.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/refman/directives/uses_2.rst.txt#2025-04-06_snippet_0\n\nLANGUAGE: logtalk\nCODE:\n```\nuses(Object, [Name/Arity, ...])\nuses(Object, [Name/Arity as Alias/Arity, ...])\n\nuses(Object, [Predicate as Alias, ...])\n\nuses(Object, [Name//Arity, ...])\nuses(Object, [Name//Arity as Alias//Arity, ...])\n\nuses(Object, [op(Precedence, Associativity, Operator), ...])\n```\n\n----------------------------------------\n\nTITLE: Mocking with Term-Expansion in Logtalk\nDESCRIPTION: Demonstrates how to use Logtalk's term-expansion mechanism to mock a login predicate by transforming it into a fact with predefined credentials.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/devtools/lgtunit.rst.txt#2025-04-06_snippet_30\n\nLANGUAGE: logtalk\nCODE:\n```\n:- object(mock_login,\n    implements(expanding)).\n\n    term_expansion((login(_, _) :- _), login(jdoe, test123)).\n\n:- end_object.\n```\n\n----------------------------------------\n\nTITLE: Selecting Specific Tests to Run in Logtalk Unit Tests\nDESCRIPTION: Demonstrates how to run only selected tests by using the (+)/1 operator prefix on test clauses, which is useful during debugging when you want to focus on specific tests.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/devtools/lgtunit.rst#2025-04-06_snippet_25\n\nLANGUAGE: logtalk\nCODE:\n```\n   :- object(tests,\n       extends(lgtunit)).\n\n       cover(ack).\n\n       test(ack_1, true(Result == 11)) :-\n           ack::ack(2, 4, Result).\n\n       + test(ack_2, true(Result == 61)) :-\n           ack::ack(3, 3, Result).\n\n       test(ack_3, true(Result == 125)) :-\n           ack::ack(3, 4, Result).\n\n   :- end_object.\n```\n\n----------------------------------------\n\nTITLE: Looking Up Value in Nested Dictionary\nDESCRIPTION: Example of looking up a value in a nested dictionary using a list of keys as an access path.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/libraries/nested_dictionaries.rst.txt#2025-04-06_snippet_4\n\nLANGUAGE: logtalk\nCODE:\n```\n| ?- navltree::as_nested_dictionary(\n    {a-1, b-{c-3, d-{e-7,f-8}}},\n    Dictionary\n),\n navltree::lookup_in([b,d,f], Value, Dictionary).\n\nDictionary = ...\nValue = 8\nyes\n```\n\n----------------------------------------\n\nTITLE: Examples of Coinductive Directive Usage in Logtalk\nDESCRIPTION: Provides practical examples of using the coinductive/1 directive to declare a binary predicate, a non-terminal, and a predicate with a template specifying which arguments should be considered for coinductive success.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/refman/directives/coinductive_1.rst#2025-04-06_snippet_2\n\nLANGUAGE: logtalk\nCODE:\n```\n:- coinductive(comember/2).\n:- coinductive(ones_and_zeros//0).\n:- coinductive(controller(+,+,+,-,-)).\n```\n\n----------------------------------------\n\nTITLE: Using expand_goal Method in Logtalk\nDESCRIPTION: Examples of using the expand_goal/2 method to apply goal expansion rules. Demonstrates recursive expansion until a fixed point is reached.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/userman/expansion.rst#2025-04-06_snippet_2\n\nLANGUAGE: text\nCODE:\n```\n| ?- an_object::expand_goal(a, Goal).\n\nGoal = c\nyes\n\n| ?- an_object::expand_goal(X is 3+2*5, Goal).\n\nX = 13,\nGoal = true\nyes\n\n| ?- an_object::expand_goal(3 =:= 5, Goal).\n\nGoal = (3=:=5)\nyes\n```\n\n----------------------------------------\n\nTITLE: Checking for Marker Interface Conformance\nDESCRIPTION: This snippet demonstrates how to check if various entities (objects and categories) conform to the 'marker' protocol using the conforms_to_protocol/2 predicate.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/design_patterns/structural/marker_interface/NOTES.md#2025-04-06_snippet_2\n\nLANGUAGE: logtalk\nCODE:\n```\n%%table\nconforms_to_protocol(Entity, marker).\n```\n\n----------------------------------------\n\nTITLE: Defining Context Breakpoints for Specific Predicates in Logtalk\nDESCRIPTION: Example of setting a context breakpoint that will pause execution whenever the foo/2 predicate is called with 'bar' as the second argument, regardless of which object defines or calls it.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/userman/debugging.rst.txt#2025-04-06_snippet_14\n\nLANGUAGE: text\nCODE:\n```\n| ?- debugger::spy(_, _, _, foo(_, bar)).\n\nSpy point set.\nyes\n```\n\n----------------------------------------\n\nTITLE: Generating Version 4 UUID as Character Codes in Logtalk\nDESCRIPTION: Shows how to generate a version 4 UUID represented as a list of character codes using the uuid(codes) parametric object. This is useful for binary manipulation.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/library/uuid/NOTES.md#2025-04-06_snippet_7\n\nLANGUAGE: logtalk\nCODE:\n```\n| ?- uuid(codes)::uuid_v4(UUID).\nUUID = [102,97,52,54,57,98,100,50,45,51,57,54,51,45,52,97,100,55,45,\n        98,50,50,55,45,101,100,52,99,56,55,99,54,53,55,102,98]\nyes\n```\n\n----------------------------------------\n\nTITLE: Loading the term_io Library in Logtalk\nDESCRIPTION: Command to load all entities in the term_io library by loading the loader.lgt file. This makes all the predicates for reading/writing terms available for use.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/libraries/term_io.rst.txt#2025-04-06_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n| ?- logtalk_load(term_io(loader)).\n```\n\n----------------------------------------\n\nTITLE: Generate Unique Atom\nDESCRIPTION: Predicate that generates a new unique atom with a given base prefix. Takes a base atom as input and returns a unique atom. Thread-safe when supported.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/gensym_core_0.rst.txt#2025-04-06_snippet_2\n\nLANGUAGE: logtalk\nCODE:\n```\ngensym(Base,Unique)\n```\n\n----------------------------------------\n\nTITLE: Loading Types Library in Logtalk\nDESCRIPTION: Demonstrates how to load all entities in the 'types' library using the loader.lgt file. This is the primary way to include the full library functionality in a Logtalk program.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/libraries/types.rst.txt#2025-04-06_snippet_0\n\nLANGUAGE: prolog\nCODE:\n```\n| ?- logtalk_load(types(loader)).\n```\n\n----------------------------------------\n\nTITLE: Using List Notation for Dynamic Directive in Prolog\nDESCRIPTION: Example of writing dynamic directives using list notation for better portability when compiling Prolog modules as Logtalk objects.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/userman/migration.rst#2025-04-06_snippet_3\n\nLANGUAGE: prolog\nCODE:\n```\n:- dynamic([foo/1, bar/2]).\n```\n\n----------------------------------------\n\nTITLE: Using Empty Optional Terms in Logtalk\nDESCRIPTION: Shows how to create and use an empty optional term with the 'optional' parametric object and the 'or_else' predicate.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/libraries/optionals.rst.txt#2025-04-06_snippet_4\n\nLANGUAGE: Prolog\nCODE:\n```\n| ?- optional::empty(Optional), optional(Optional)::or_else(Term, 0).\nOptional = empty,\nTerm = 0\nyes\n```\n\n----------------------------------------\n\nTITLE: Example Usage of term_expansion/2 in Logtalk\nDESCRIPTION: Examples demonstrating how to use term_expansion/2 for different scenarios: modifying a license directive and converting a data term from millimeters to meters. These examples show how term expansion can be used for both directive modification and data transformation.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/refman/methods/term_expansion_2.rst#2025-04-06_snippet_2\n\nLANGUAGE: Logtalk\nCODE:\n```\nterm_expansion((:- license(default)), (:- license(gplv3))).\nterm_expansion(data(Millimeters), data(Meters)) :- Meters is Millimeters / 1000.\n```\n\n----------------------------------------\n\nTITLE: Checking Intersection of Two Dictionaries in Logtalk\nDESCRIPTION: Checks if the values of common keys in two dictionaries unify. True if there are no common keys or all common key values unify.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/dictionaryp_0.rst.txt#2025-04-06_snippet_13\n\nLANGUAGE: Logtalk\nCODE:\n```\nintersection(Dictionary1,Dictionary2)\n```\n\n----------------------------------------\n\nTITLE: Tracking Included Entities in Logtalk Diagram\nDESCRIPTION: Dynamic predicate maintaining a table of Logtalk entities already included in the diagram.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/entity_diagram_1.rst.txt#2025-04-06_snippet_2\n\nLANGUAGE: Logtalk\nCODE:\n```\nincluded_entity_(Entity)\n```\n\n----------------------------------------\n\nTITLE: Using Meta Non-Terminals and call//N in DCG with Logtalk\nDESCRIPTION: Demonstrates the use of meta_non_terminal/1 and call//N in DCG rules using the client object.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/dcgs/NOTES.md#2025-04-06_snippet_16\n\nLANGUAGE: logtalk\nCODE:\n```\nclient::print.\n```\n\nLANGUAGE: logtalk\nCODE:\n```\nclient::successors([1,2,3], Successors).\n```\n\n----------------------------------------\n\nTITLE: Examples of Private Predicate Declarations in Logtalk\nDESCRIPTION: Provides examples of how to use the private/1 directive to declare private predicates in Logtalk. These examples illustrate different ways to declare single or multiple private predicates.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/refman/directives/private_1.rst#2025-04-06_snippet_2\n\nLANGUAGE: Logtalk\nCODE:\n```\n:- private(counter/1).\n\n:- private((init/1, free/1)).\n\n:- private([data/3, key/1, keys/1]).\n```\n\n----------------------------------------\n\nTITLE: Self Message with Custom Sender\nDESCRIPTION: Pattern for sending a message to self with a different sender context.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/userman/messages.rst.txt#2025-04-06_snippet_8\n\nLANGUAGE: logtalk\nCODE:\n```\nPredicate :-\n    ...,\n    % send a message to self using (::)/2\n    % sender will be the pseudo-object user\n    self(Self),\n    {Self::Message},\n    ... .\n```\n\n----------------------------------------\n\nTITLE: Usage examples of threaded_call/1-2 in Logtalk\nDESCRIPTION: Demonstrates how to use threaded_call to execute goals asynchronously, including regular goals, self-sent messages, and messages sent to specific objects.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/refman/predicates/threaded_call_1_2.rst#2025-04-06_snippet_3\n\nLANGUAGE: prolog\nCODE:\n```\nthreaded_call(Goal)\nthreaded_call(::Message)\nthreaded_call(Object::Message)\n```\n\n----------------------------------------\n\nTITLE: Implementing Protected Inheritance for Class Specialization in Logtalk\nDESCRIPTION: Demonstrates how to make all public predicates from a superclass protected in the specializing class by using the protected:: prefix.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/userman/inheritance.rst.txt#2025-04-06_snippet_5\n\nLANGUAGE: logtalk\nCODE:\n```\n:- object(Class,\n    specializes(protected::Superclass)).\n\n    % all the Superclass public predicates become\n    % protected predicates for the Class clients\n\n    ...\n\n:- end_object.\n```\n\n----------------------------------------\n\nTITLE: Saving Packs Virtual Environment to Requirements File\nDESCRIPTION: Logtalk/Prolog query to save the current virtual environment configuration (registries and installed packs) to a requirements file.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/devtools/packs.rst.txt#2025-04-06_snippet_11\n\nLANGUAGE: prolog\nCODE:\n```\n| ?- packs::save('requirements.lgt').\n```\n\n----------------------------------------\n\nTITLE: Compiling and Loading Logtalk Files\nDESCRIPTION: Demonstrates shortcuts for compiling and loading Logtalk source files using curly braces notation. This syntax provides a concise way to load single or multiple files.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/faq/usability.rst#2025-04-06_snippet_0\n\nLANGUAGE: Logtalk\nCODE:\n```\n{File}\n```\n\nLANGUAGE: Logtalk\nCODE:\n```\n{File1, File2, ...}\n```\n\n----------------------------------------\n\nTITLE: Configuring URL Prefixes for VSCodium in Logtalk Diagrams\nDESCRIPTION: Sets the URL code prefix for generating local links to open files and directories in VSCodium when creating Logtalk diagrams.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/tools/diagrams/NOTES.md#2025-04-06_snippet_6\n\nLANGUAGE: prolog\nCODE:\n```\nurl_prefixes('vscodium://file/', DocPrefix)\n```\n\n----------------------------------------\n\nTITLE: Loading the Standard Library in Logtalk\nDESCRIPTION: Loads all components of the standard library to prepare for scanning it for dead code.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/tools/dead_code_scanner/SCRIPT.txt#2025-04-06_snippet_4\n\nLANGUAGE: prolog\nCODE:\n```\n| ?- logtalk_load(library(all_loader)).\n```\n\n----------------------------------------\n\nTITLE: Redirecting Assertion Messages in Logtalk\nDESCRIPTION: Definition of a category to redirect assertion failure messages to a custom log file. This uses the logtalk::message_hook/4 multifile predicate.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/tools/assertions/NOTES.md#2025-04-06_snippet_6\n\nLANGUAGE: Logtalk\nCODE:\n```\n:- category(redirect_assertions_messages).\n\n\t:- multifile(logtalk::message_hook/4).\n\t:- dynamic(logtalk::message_hook/4).\n\n\tlogtalk::message_hook(Message, error, assertions, _) :-\n\t\twriteq(my_log_file, Message), write(my_log_file, '.\\n').\n\n:- end_category.\n```\n\n----------------------------------------\n\nTITLE: Managing Prolog Dynamic Predicates Using use_module\nDESCRIPTION: Demonstrates how to manage Prolog module dynamic predicates using the use_module directive to import the predicates into a Logtalk object.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/userman/predicates.rst#2025-04-06_snippet_69\n\nLANGUAGE: prolog\nCODE:\n```\n:- object(...).\n\n    :- use_module(m, [bar/1]).\n    :- dynamic(m:bar/1).\n\n    foo(X) :-\n        % retract and assert bar/1 clauses in module m\n        retractall(bar(_)),\n        assertz(bar(X)),\n        ...\n\n:- end_object.\n```\n\n----------------------------------------\n\nTITLE: Creating Dynamic Categories in Logtalk\nDESCRIPTION: Example of creating a new category at runtime using create_category/4 predicate with relations, directives and clauses.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/userman/categories.rst#2025-04-06_snippet_9\n\nLANGUAGE: text\nCODE:\n```\n| ?- create_category(\n    ccc,\n    [implements(ppp)],\n    [private(bar/1)],\n    [(foo(X):-bar(X)), bar(1), bar(2)]\n).\n```\n\n----------------------------------------\n\nTITLE: Defining normalize_scalar/2 Predicate for Number Lists in Logtalk\nDESCRIPTION: Normalizes a list of numbers so that their sum equals one. The caller must handle arithmetic exceptions if the list is not normalizable.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/numberlistp_0.rst.txt#2025-04-06_snippet_18\n\nLANGUAGE: Logtalk\nCODE:\n```\nnormalize_scalar(List,NormalizedList)\n```\n\n----------------------------------------\n\nTITLE: Initializing Assignable Variable\nDESCRIPTION: Makes a variable assignable with an empty initial state. Takes a variable parameter and throws type error if not a variable.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/assignvarsp_0.rst.txt#2025-04-06_snippet_0\n\nLANGUAGE: logtalk\nCODE:\n```\nassignable(Variable)\n```\n\n----------------------------------------\n\nTITLE: Defining Stand-alone Objects (Prototypes) in Logtalk\nDESCRIPTION: Syntax for creating stand-alone objects (prototypes) in Logtalk. The directive can be used with different options to implement protocols and/or import categories.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/refman/directives/object_1_5.rst#2025-04-06_snippet_0\n\nLANGUAGE: logtalk\nCODE:\n```\nobject(Object)\n\nobject(Object,\n    implements(Protocols))\n\nobject(Object,\n    imports(Categories))\n\nobject(Object,\n    implements(Protocols),\n    imports(Categories))\n```\n\n----------------------------------------\n\nTITLE: Generating Allure Reports from Test Results\nDESCRIPTION: Bash commands to generate and view Allure reports from xUnit test results. First runs the logtalk_allure_report script to process test results, then uses the allure command to view the report.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/tools/lgtunit/NOTES.md#2025-04-06_snippet_49\n\nLANGUAGE: bash\nCODE:\n```\n$ logtalk_tester -p gnu -f xunit\n$ logtalk_allure_report\n$ allure open\n```\n\n----------------------------------------\n\nTITLE: Updating Value in Dictionary with Old Value Check in Logtalk\nDESCRIPTION: Updates a value in a dictionary, checking the old value. Fails if the key is not found or the old value doesn't unify.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/dictionaryp_0.rst.txt#2025-04-06_snippet_8\n\nLANGUAGE: Logtalk\nCODE:\n```\nupdate(OldDictionary,Key,OldValue,NewValue,NewDictionary)\n```\n\n----------------------------------------\n\nTITLE: Writing Terms to Character Codes in Logtalk\nDESCRIPTION: Predicates for writing Prolog terms to character code lists, including versions with custom tails and write options.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/term_io_protocol_0.rst.txt#2025-04-06_snippet_5\n\nLANGUAGE: Logtalk\nCODE:\n```\nwrite_term_to_codes(Term,Codes,Options)\n```\n\nLANGUAGE: Logtalk\nCODE:\n```\nwrite_term_to_codes(Term,Codes,Tail,Options)\n```\n\nLANGUAGE: Logtalk\nCODE:\n```\nwrite_to_codes(Term,Codes)\n```\n\n----------------------------------------\n\nTITLE: Querying Predicate Properties in Logtalk\nDESCRIPTION: An example query demonstrating how to use the predicate_property/2 method to retrieve properties of the 'baz' predicate in the 'foo' object.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/refman/methods/predicate_property_2.rst.txt#2025-04-06_snippet_3\n\nLANGUAGE: Logtalk\nCODE:\n```\n| ?- foo::pred(baz(_), Prop).\nProp = logtalk ;\nProp = scope(public) ;\nProp = public ;\nProp = declared_in(bar) ;\n...\n```\n\n----------------------------------------\n\nTITLE: Representing Pre-formatted Text Elements\nDESCRIPTION: Shows how to represent pre-formatted text in Prolog terms where the content is never interpreted as nested elements.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/libraries/html.rst.txt#2025-04-06_snippet_1\n\nLANGUAGE: prolog\nCODE:\n```\npre([foo,bar,baz])\n```\n\n----------------------------------------\n\nTITLE: Loading the Git Library in Logtalk\nDESCRIPTION: Command to load all entities in the git library by loading the loader.lgt file.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/library/git/NOTES.md#2025-04-06_snippet_0\n\nLANGUAGE: Prolog\nCODE:\n```\n| ?- logtalk_load(git(loader)).\n```\n\n----------------------------------------\n\nTITLE: Defining a Custom Random Generator in Logtalk\nDESCRIPTION: Example of creating a derived random generator object that extends the base 'random' object with its own seed initialization. This demonstrates how to create multiple independent random number generators.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/library/random/NOTES.md#2025-04-06_snippet_0\n\nLANGUAGE: logtalk\nCODE:\n```\n:- object(my_random_generator_1,\n\textends(random)).\n\n\t:- initialization(::reset_seed).\n\n:- end_object.\n```\n\n----------------------------------------\n\nTITLE: Example of Debugging with Breakpoints in Logtalk\nDESCRIPTION: Output example of debugging with a predicate breakpoint, showing how the debugger pauses only at the specified breakpoint rather than at every port.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/userman/debugging.rst.txt#2025-04-06_snippet_23\n\nLANGUAGE: text\nCODE:\n```\n| ?- addams::sister(Sister, Sibling).\n  +  Call: (3) female(_1078) ?\n```\n\n----------------------------------------\n\nTITLE: Using retractall/1 with Different Scopes in Logtalk\nDESCRIPTION: Examples showing how to use retractall/1 with different scopes: in the current context (this), in self, and in an explicit object.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/refman/methods/retractall_1.rst#2025-04-06_snippet_2\n\nLANGUAGE: logtalk\nCODE:\n```\nretractall(Head)\n```\n\nLANGUAGE: logtalk\nCODE:\n```\n::retractall(Head)\n```\n\nLANGUAGE: logtalk\nCODE:\n```\nObject::retractall(Head)\n```\n\n----------------------------------------\n\nTITLE: Defining Predicate Documentation in Logtalk\nDESCRIPTION: Example of using the info/2 directive to document a predicate with comments, argument names and possible exceptions\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/userman/documenting.rst#2025-04-06_snippet_2\n\nLANGUAGE: prolog\nCODE:\n```\n:- info(check_option/1, [\n    comment is 'Succeeds if the option is valid. Throws an error otherwise.',\n    argnames is ['Option'],\n    exceptions is [\n        '``Option`` is a variable' - instantiation_error,\n        '``Option`` is neither a variable nor a compound term' - type_error(compound, 'Option'),\n        '``Option`` is a compound term but not a valid option' - domain_error(option, 'Option')\n    ]\n]).\n```\n\n----------------------------------------\n\nTITLE: Proof Tree Generation\nDESCRIPTION: Generates a proof tree for p(X) using the proof tree meta-interpreter.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/metainterpreters/NOTES.md#2025-04-06_snippet_4\n\nLANGUAGE: logtalk\nCODE:\n```\n%%table\ndatabase::proof_tree(p(X), Tree).\n```\n\n----------------------------------------\n\nTITLE: Using Logtalk Grammar Modules\nDESCRIPTION: Example of importing specific DCG rules from the blank_grammars module using the chars parameter. Shows how to use implicit message-sending with white spaces and new lines grammar rules.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/libraries/grammars.rst#2025-04-06_snippet_2\n\nLANGUAGE: logtalk\nCODE:\n```\n:- uses(blank_grammars(chars), [\n    white_spaces//0, new_lines//0\n]).\n```\n\n----------------------------------------\n\nTITLE: Declaring Meta-Predicates with Meta-Arguments in Logtalk\nDESCRIPTION: Examples of meta_predicate directives for findall/3 and map/3, showing how to specify meta-arguments that will be called as goals (0) or closures (2) and normal arguments (*).\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/userman/predicates.rst#2025-04-06_snippet_8\n\nLANGUAGE: logtalk\nCODE:\n```\n:- meta_predicate(findall(*, 0, *)).\n:- meta_predicate(map(2, *, *)).\n```\n\n----------------------------------------\n\nTITLE: Defining the info/2 directive syntax in Logtalk\nDESCRIPTION: Shows the syntax for the info/2 directive which is used to document predicates and grammar rule non-terminals. The directive takes a predicate/non-terminal indicator and a list of key-value pairs.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/refman/directives/info_2.rst#2025-04-06_snippet_0\n\nLANGUAGE: logtalk\nCODE:\n```\ninfo(Name/Arity, [Key is Value, ...])\ninfo(Name//Arity, [Key is Value, ...])\n```\n\n----------------------------------------\n\nTITLE: Declaring Meta-Predicates with Meta-Arguments in Logtalk\nDESCRIPTION: Examples of meta_predicate directives for findall/3 and map/3, showing how to specify meta-arguments that will be called as goals (0) or closures (2) and normal arguments (*).\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/userman/predicates.rst#2025-04-06_snippet_8\n\nLANGUAGE: logtalk\nCODE:\n```\n:- meta_predicate(findall(*, 0, *)).\n:- meta_predicate(map(2, *, *)).\n```\n\n----------------------------------------\n\nTITLE: Using db_once to query a fact\nDESCRIPTION: Uses db_once/2 to find the first matching fact for the foo/1 predicate in the 'my_db' database.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/named_databases/NOTES.md#2025-04-06_snippet_6\n\nLANGUAGE: logtalk\nCODE:\n```\ndb_once(my_db, foo(X)).\n```\n\n----------------------------------------\n\nTITLE: Extracting Logtalk Source Archive in Shell\nDESCRIPTION: Shell command to extract the Logtalk source archive (tar.bz2 format) and create a subdirectory with the contents.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/userman/installing.rst.txt#2025-04-06_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n% tar -jxvf lgt3xxx.tar.bz2\n```\n\n----------------------------------------\n\nTITLE: Implementing question_prompt_stream/4 in Logtalk\nDESCRIPTION: This example shows how to implement the question_prompt_stream/4 method in Logtalk. It declares the method as multifile and dynamic, and provides an example implementation for the debugger component.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/refman/methods/question_prompt_stream_4.rst.txt#2025-04-06_snippet_2\n\nLANGUAGE: Prolog\nCODE:\n```\n:- multifile(logtalk::question_prompt_stream/4).\n:- dynamic(logtalk::question_prompt_stream/4).\n\nlogtalk::question_prompt_stream(question, debugger, '    > ', user_input).\n```\n\n----------------------------------------\n\nTITLE: Diagram Output Generation in Logtalk\nDESCRIPTION: Series of predicates for generating diagram output for libraries, directories and files with specified options.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/diagram_1.rst.txt#2025-04-06_snippet_6\n\nLANGUAGE: logtalk\nCODE:\n```\noutput_library(+atom,+atom,+list(compound))\noutput_rdirectory(+atom,+atom,+list(compound))\noutput_files(+list,+list(compound))\n```\n\n----------------------------------------\n\nTITLE: Defining Timeout Portability in Logtalk\nDESCRIPTION: New timeout portability library supporting various Prolog systems, providing a portable way to call predicates with time limits.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/RELEASE_NOTES.md#2025-04-06_snippet_57\n\nLANGUAGE: Logtalk\nCODE:\n```\ncall_with_time_limit(TimeLimit, Goal)\n```\n\n----------------------------------------\n\nTITLE: Template and Modes for Protected Directive in Logtalk\nDESCRIPTION: Defines the template and modes for using the protected/1 directive with predicate indicators, non-terminal indicators, and operator declarations.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/refman/directives/protected_1.rst#2025-04-06_snippet_1\n\nLANGUAGE: Logtalk\nCODE:\n```\nprotected(+predicate_indicator_term)\nprotected(+non_terminal_indicator_term)\nprotected(+operator_declaration)\n```\n\n----------------------------------------\n\nTITLE: Method Signature in Logtalk\nDESCRIPTION: Signature and mode declaration for the current_predicate/1 built-in method that enumerates visible user-defined predicates.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/refman/methods/current_predicate_1.rst.txt#2025-04-06_snippet_0\n\nLANGUAGE: logtalk\nCODE:\n```\ncurrent_predicate(?predicate_indicator) - zero_or_more\n```\n\n----------------------------------------\n\nTITLE: Defining euclidean_distance/3 Predicate for Number Lists in Logtalk\nDESCRIPTION: Calculates the Euclidean distance between two lists of numbers. Fails if the lists are empty or have different lengths.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/numberlistp_0.rst.txt#2025-04-06_snippet_11\n\nLANGUAGE: Logtalk\nCODE:\n```\neuclidean_distance(List1,List2,Distance)\n```\n\n----------------------------------------\n\nTITLE: Object Definition with Implicit Public Scope\nDESCRIPTION: Example showing object definition with implicit public scope when importing a category. The public scope is implied when the scope keyword is omitted.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/userman/inheritance.rst#2025-04-06_snippet_6\n\nLANGUAGE: logtalk\nCODE:\n```\n:- object(Object,\n    imports(Category)).\n\n    ...\n\n:- end_object.\n```\n\n----------------------------------------\n\nTITLE: Retrieving All Class Leaf Subclasses in Logtalk\nDESCRIPTION: Predicate that returns all class leaf subclasses through backtracking. Leaf subclasses are classes that don't have their own subclasses. Takes a single parameter Leaf which can be instantiated or a variable to be bound to leaf class objects.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/class_hierarchyp_0.rst.txt#2025-04-06_snippet_10\n\nLANGUAGE: logtalk\nCODE:\n```\nleaf_class(Leaf)\n```\n\n----------------------------------------\n\nTITLE: Alternative Visitor Implementation\nDESCRIPTION: Demonstrates using an alternative visitor implementation added through hot-patching to print car components.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/design_patterns/behavioral/visitor/NOTES.md#2025-04-06_snippet_2\n\nLANGUAGE: logtalk\nCODE:\n```\nsedan::alt_visitor([Component]>>(write(Component),nl)).\n```\n\n----------------------------------------\n\nTITLE: Testing the Gensym Library in Logtalk\nDESCRIPTION: Shows how to load the test suite for the gensym library using the tester.lgt file.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/libraries/gensym.rst#2025-04-06_snippet_1\n\nLANGUAGE: prolog\nCODE:\n```\n| ?- logtalk_load(gensym(tester)).\n```\n\n----------------------------------------\n\nTITLE: Generating Custom Length Atom Identifier\nDESCRIPTION: Generates a random identifier using 240 bits (30 bytes) of randomness, returning a Base64 encoded atom.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/libraries/ids.rst.txt#2025-04-06_snippet_3\n\nLANGUAGE: logtalk\nCODE:\n```\n| ?- ids(atom, 30)::generate(Identifier).\nIdentifier = 'ie/jYcLsqo8ZguCOF1ZNPFDRvJ03Ww5Qa9e0FxRB'\nyes\n```\n\n----------------------------------------\n\nTITLE: Example: Error Handling in Conditional Compilation\nDESCRIPTION: Demonstrates how to handle potential errors in test goals by using catch/3 to convert errors into failures, ensuring conditional compilation works without raising exceptions.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/refman/directives/if_1.rst#2025-04-06_snippet_4\n\nLANGUAGE: logtalk\nCODE:\n```\n:- if(catch(\\+ log(7,_), _, fail)).\n\n   % define the legacy log/2 predicate\n   log(X, Y) :- Y is log(X).\n\n:- endif.\n```\n\n----------------------------------------\n\nTITLE: Computing Prime Numbers Using Asynchronous Calls in Logtalk\nDESCRIPTION: Reimplements the prime number computation using threaded_call/1 and threaded_exit/1 instead of threaded/1. This approach allows more control over when results are processed.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/userman/threads.rst.txt#2025-04-06_snippet_4\n\nLANGUAGE: logtalk\nCODE:\n```\nprime_numbers(N, M, Primes) :-\n    M > N,\n    N1 is N + (M - N) // 2,\n    N2 is N1 + 1,\n    threaded_call(prime_numbers(N2, M, [], Acc)),\n    threaded_call(prime_numbers(N, N1, Acc, Primes)),\n    threaded_exit(prime_numbers(N2, M, [], Acc)),\n    threaded_exit(prime_numbers(N, N1, Acc, Primes)).\n\nprime_numbers(N, M, Acc, Primes) :-\n    ...\n```\n\n----------------------------------------\n\nTITLE: Specifying Modes and Proofs for expand_term/2 in Logtalk\nDESCRIPTION: Defines the mode declaration for expand_term/2, indicating that both arguments can be either input or output (represented by the ? mode), and that the predicate provides only one proof.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/refman/methods/expand_term_2.rst#2025-04-06_snippet_1\n\nLANGUAGE: Logtalk\nCODE:\n```\nexpand_term(?term, ?term) - one\n```\n\n----------------------------------------\n\nTITLE: Looking Up Value in Nested Dictionary\nDESCRIPTION: Example demonstrating how to lookup a value in a nested dictionary using a list of keys as an access path.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/library/nested_dictionaries/NOTES.md#2025-04-06_snippet_4\n\nLANGUAGE: logtalk\nCODE:\n```\n| ?- navltree::as_nested_dictionary(\n        {a-1, b-{c-3, d-{e-7,f-8}}},\n        Dictionary\n     ),\n\t\t navltree::lookup_in([b,d,f], Value, Dictionary).\n```\n\n----------------------------------------\n\nTITLE: Protocol Directives Grammar\nDESCRIPTION: BNF grammar rules defining the syntax for protocol directives in Logtalk, including built-in, dynamic, info and compilation directives.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/refman/grammar.rst.txt#2025-04-06_snippet_27\n\nLANGUAGE: bnf\nCODE:\n```\nprotocol_directive ::=\n   \":- built_in.\"\n   | \":- dynamic.\"\n   | \":- info(\" entity_info_list \").\"\n   | \":- set_logtalk_flag(\" atom \",\" nonvar \").\"\n   | \":- include(\" source_file_name \").\"\n   | conditional_compilation_directive\n   | predicate_directive\n```\n\n----------------------------------------\n\nTITLE: Example Usage of permission_error/3 in Logtalk\nDESCRIPTION: Illustrates a practical example of using the permission_error/3 method when a file is not writable. It checks if the file is not writable and then throws a permission error.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/refman/methods/permission_error_3.rst#2025-04-06_snippet_2\n\nLANGUAGE: Prolog\nCODE:\n```\n...,\n\\+ writable(File),\npermission_error(modify, file, File).\n```\n\n----------------------------------------\n\nTITLE: Setting Print Goal Hook\nDESCRIPTION: Example of setting and using the print_goal_hook for debugging.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/libraries/hook_objects.rst.txt#2025-04-06_snippet_7\n\nLANGUAGE: logtalk\nCODE:\n```\n| ?- set_logtalk_flag(hook, print_goal_hook).\n```\n\nLANGUAGE: logtalk\nCODE:\n```\nfoo :-\n    - bar,   % print goal before calling it\n    + baz,   % print goal after calling it\n    * quux.  % print goal before and after calling it\n```\n\n----------------------------------------\n\nTITLE: Two List Append Operation\nDESCRIPTION: Predicate for appending two lists together. Can be used to split a list or combine two lists.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/listp_0.rst.txt#2025-04-06_snippet_1\n\nLANGUAGE: logtalk\nCODE:\n```\nappend(List1,List2,List)\n```\n\n----------------------------------------\n\nTITLE: Setting Up Persistent Allure Report with Test Trends\nDESCRIPTION: Command that saves Allure test results and report data to permanent directories to enable tracking of test run trends over time. Specifies custom input and output directories for the report data.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/tools/lgtunit/NOTES.md#2025-04-06_snippet_53\n\nLANGUAGE: bash\nCODE:\n```\n$ logtalk_allure_report \\\n  -i \"$HOME/my_project/allure-results\" \\\n  -o \"$HOME/my_project/allure-report\"\n$ allure open \"$HOME/my_project/allure-report\"\n```\n\n----------------------------------------\n\nTITLE: Generating Null UUID in Logtalk\nDESCRIPTION: Generates the null UUID using the uuid::uuid_null/1 predicate.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/libraries/uuid.rst.txt#2025-04-06_snippet_8\n\nLANGUAGE: Prolog\nCODE:\n```\n| ?- uuid::uuid_null(UUID).\nUUID = '00000000-0000-0000-0000-000000000000'\nyes\n```\n\n----------------------------------------\n\nTITLE: Using ignore/1 with Different Goal Types in Logtalk\nDESCRIPTION: Demonstrates various ways to use the ignore/1 method in Logtalk, including with a regular goal, a message to self, and a message to an explicit object.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/refman/methods/ignore_1.rst.txt#2025-04-06_snippet_3\n\nLANGUAGE: Logtalk\nCODE:\n```\nignore(Goal)\nignore(::Goal)\nignore(Object::Goal)\n```\n\n----------------------------------------\n\nTITLE: Testing the Basic Types Library in Logtalk\nDESCRIPTION: Command to load the test suite for the types library, which includes tests for the basic types. This allows verification of the functionality of the library predicates.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/libraries/basic_types.rst#2025-04-06_snippet_1\n\nLANGUAGE: logtalk\nCODE:\n```\n| ?- logtalk_load(types(tester)).\n```\n\n----------------------------------------\n\nTITLE: Loading Types Library in Logtalk\nDESCRIPTION: Commands to load the complete types library or just the basic types functionality via the loader files.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/library/types/NOTES.md#2025-04-06_snippet_0\n\nLANGUAGE: logtalk\nCODE:\n```\n| ?- logtalk_load(types(loader)).\n\n| ?- logtalk_load(basic_types(loader)).\n```\n\n----------------------------------------\n\nTITLE: Loading the Logtalk Meta Library\nDESCRIPTION: Shows how to load the main entities in the meta library using the loader.lgt file.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/libraries/meta.rst.txt#2025-04-06_snippet_0\n\nLANGUAGE: logtalk\nCODE:\n```\n| ?- logtalk_load(meta(loader)).\n```\n\n----------------------------------------\n\nTITLE: Strict Type Checking with Context in Logtalk\nDESCRIPTION: The 'check/3' predicate verifies a term against a specified type, throwing an error with context information if the check fails. This provides more detailed error reporting than valid/2.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/type_0.rst.txt#2025-04-06_snippet_1\n\nLANGUAGE: Logtalk\nCODE:\n```\ncheck(Type,Term,Context)\n```\n\n----------------------------------------\n\nTITLE: Moving Entire Brick Stack\nDESCRIPTION: This snippet moves the entire stack to a new position by moving the bottom brick.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/bricks/NOTES.md#2025-04-06_snippet_8\n\nLANGUAGE: logtalk\nCODE:\n```\nd::move(9, 1).\n```\n\n----------------------------------------\n\nTITLE: Reproducing Sequences of Arbitrary Terms in Logtalk\nDESCRIPTION: Demonstrates how to use get_seed/1 and set_seed/1 to reproduce sequences of arbitrary values.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/library/arbitrary/NOTES.md#2025-04-06_snippet_8\n\nLANGUAGE: prolog\nCODE:\n```\n| ?- type::get_seed(Seed).\nSeed = seed(3172, 9814, 20125)\nyes\n\n| ?- type::arbitrary(integer, Arbitrary).\nArbitrary = -816\nyes\n\n| ?- type::arbitrary(integer, Arbitrary).\nArbitrary = -113\nyes\n\n| ?- type::arbitrary(integer, Arbitrary).\nArbitrary = 446\n\n| ?- type::set_seed(seed(3172, 9814, 20125)).\nyes\n\n| ?- type::arbitrary(integer, Arbitrary).\nArbitrary = -816\nyes\n\n| ?- type::arbitrary(integer, Arbitrary).\nArbitrary = -113\nyes\n\n| ?- type::arbitrary(integer, Arbitrary).\nArbitrary = 446\nyes\n```\n\n----------------------------------------\n\nTITLE: Defining descendant/1 predicate in Logtalk\nDESCRIPTION: Returns all object descendants through backtracking. It is a static predicate that can be called with either a bound or unbound Descendant argument.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/hierarchyp_0.rst.txt#2025-04-06_snippet_4\n\nLANGUAGE: Logtalk\nCODE:\n```\ndescendant(Descendant)\n```\n\n----------------------------------------\n\nTITLE: Reading Text Streams to Terms in Logtalk\nDESCRIPTION: Reads a text stream into a list of terms. Takes a stream or alias as input and returns the stream contents as a list of Prolog terms without closing the stream.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/reader_0.rst.txt#2025-04-06_snippet_12\n\nLANGUAGE: Logtalk\nCODE:\n```\nstream_to_terms(Stream,Terms)\n```\n\n----------------------------------------\n\nTITLE: Testing Input Predicates with lgtunit in Logtalk\nDESCRIPTION: Demonstrates how to test the get_char/1 predicate using lgtunit's set_text_input and text_input_assertion predicates.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/devtools/lgtunit.rst.txt#2025-04-06_snippet_18\n\nLANGUAGE: logtalk\nCODE:\n```\ntest(get_char_1_01, true(Char == 'q')) :-\n       ^^set_text_input('qwerty'),\n       get_char(Char).\n\n   test(get_char_1_02, true(Assertion)) :-\n       ^^set_text_input('qwerty'),\n       get_char(_Char),\n       ^^text_input_assertion('werty', Assertion).\n```\n\n----------------------------------------\n\nTITLE: Specifying Meta-predicate Argument Types in Logtalk\nDESCRIPTION: Examples of how to declare different types of meta-predicates using the meta_predicate/1 directive. It shows the syntax for specifying goal arguments, closure arguments, and normal arguments.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/refman/directives/meta_predicate_1.rst#2025-04-06_snippet_1\n\nLANGUAGE: Logtalk\nCODE:\n```\n% findall/3 second argument is interpreted as a goal:\n:- meta_predicate(findall(*, 0, *)).\n\n% both forall/2 arguments are interpreted as goals:\n:- meta_predicate(forall(0, 0)).\n\n% maplist/3 first argument is interpreted as a closure\n% that will be expanded to a goal by appending two\n% arguments:\n:- meta_predicate(maplist(2, *, *)).\n```\n\n----------------------------------------\n\nTITLE: Partitioning a List in Logtalk\nDESCRIPTION: Partitions a list into sublists with values less than, equal to, and greater than a given value using standard order.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/listp_0.rst.txt#2025-04-06_snippet_4\n\nLANGUAGE: Logtalk\nCODE:\n```\npartition(List,Value,Less,Equal,Greater)\n```\n\n----------------------------------------\n\nTITLE: Defining current_predicate/1 Method Signature in Logtalk\nDESCRIPTION: Defines the signature of the current_predicate/1 method, which enumerates visible, user-defined object predicates by backtracking.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/refman/methods/current_predicate_1.rst#2025-04-06_snippet_0\n\nLANGUAGE: Logtalk\nCODE:\n```\ncurrent_predicate(Predicate)\n```\n\n----------------------------------------\n\nTITLE: Advanced Logtalk Loader File with File-Specific Flags\nDESCRIPTION: Example of a loader file that sets global and file-specific compiler flags when loading different source files.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/userman/programming.rst#2025-04-06_snippet_8\n\nLANGUAGE: logtalk\nCODE:\n```\n:- initialization((\n    % set project-specific global flags\n    set_logtalk_flag(source_data, off),\n    % load the project source files\n    logtalk_load(\n        [source1, source2, source3],\n        % source file-specific flags\n        [portability(warning)]),\n    logtalk_load(\n        [source4, source5],\n        % source file-specific flags\n        [portability(silent)])\n)).\n```\n\n----------------------------------------\n\nTITLE: Retrieving Package README Path\nDESCRIPTION: Query to get the path to a package's README file\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/devtools/packs.rst#2025-04-06_snippet_29\n\nLANGUAGE: logtalk\nCODE:\n```\n| ?- packs::readme(lflat, Path).\n```\n\n----------------------------------------\n\nTITLE: Custom Epsilon Approximate Equality in Logtalk\nDESCRIPTION: Compares two numbers for approximate equality using a user-defined epsilon value. Uses a standard formula for comparison.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/lgtunit_0.rst.txt#2025-04-06_snippet_21\n\nLANGUAGE: logtalk\nCODE:\n```\napproximately_equal(Number1,Number2,Epsilon)\n```\n\n----------------------------------------\n\nTITLE: Parsing Sentences with DCG in Logtalk\nDESCRIPTION: Uses the sentence object to parse and validate grammatically correct sentences using DCG rules.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/dcgs/NOTES.md#2025-04-06_snippet_5\n\nLANGUAGE: logtalk\nCODE:\n```\nsentence::parse([the, girl, likes, the, boy], Result).\n```\n\nLANGUAGE: logtalk\nCODE:\n```\nsentence::parse([the, girl, scares, the, boy], Result).\n```\n\n----------------------------------------\n\nTITLE: Setting the suppress_path_prefix Flag in Logtalk\nDESCRIPTION: Example showing how to set the suppress_path_prefix flag used by lgtdoc, lgtunit, and issue_creator tools to avoid user-specific path prefixes in documentation and reports.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/tools/NOTES.md#2025-04-06_snippet_2\n\nLANGUAGE: logtalk\nCODE:\n```\n| ?- set_logtalk_flag(suppress_path_prefix, '/home/jdoe/').\n```\n\n----------------------------------------\n\nTITLE: Solution Collection from Engine\nDESCRIPTION: Recursive predicate to collect all solutions from a threaded engine.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/userman/threads.rst#2025-04-06_snippet_10\n\nLANGUAGE: logtalk\nCODE:\n```\ncollect_all(Engine, [Answer| Answers]) :-\n    threaded_engine_next(Engine, Answer),\n    !,\n    collect_all(Engine, Answers).\ncollect_all(_, []).\n```\n\n----------------------------------------\n\nTITLE: Querying Defined Categories in Logtalk\nDESCRIPTION: Uses the current_category/1 built-in predicate to find all defined categories by backtracking. This predicate can also test if a specific category is defined.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/userman/categories.rst.txt#2025-04-06_snippet_8\n\nLANGUAGE: prolog\nCODE:\n```\n| ?- current_category(Category).\n```\n\n----------------------------------------\n\nTITLE: Finding Root Using Multi-Threading for Humps Function\nDESCRIPTION: Uses multi-threading to concurrently run all root-finding methods for the humps function in the range [-1.0, 2.0] with a tolerance of 1.0e-15. Returns both the root value and the method that found it first.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/threads/functions/NOTES.md#2025-04-06_snippet_15\n\nLANGUAGE: logtalk\nCODE:\n```\nfunction_root::find_root(humps, -1.0, 2.0, 1.0e-15, Zero, Method).\n```\n\n----------------------------------------\n\nTITLE: Checking Term Groundness in Logtalk\nDESCRIPTION: Defines a deprecated predicate to check if a term is ground. It's recommended to use the standard 'ground/1' predicate instead.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/termp_0.rst.txt#2025-04-06_snippet_1\n\nLANGUAGE: Logtalk\nCODE:\n```\nground(Term)\n```\n\n----------------------------------------\n\nTITLE: Comparing Numbers for Essential Equality in Logtalk\nDESCRIPTION: Compares two numbers for essential equality using a given epsilon value. It uses the formula abs(Number1 - Number2) =< min(abs(Number1), abs(Number2)) * Epsilon.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/number_0.rst.txt#2025-04-06_snippet_2\n\nLANGUAGE: Logtalk\nCODE:\n```\nessentially_equal(Number1,Number2,Epsilon)\n```\n\n----------------------------------------\n\nTITLE: Appending Queues in Logtalk\nDESCRIPTION: Predicate to append two queues. It takes two queues as input and returns a new queue with elements from both input queues.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/queuep_0.rst.txt#2025-04-06_snippet_7\n\nLANGUAGE: Logtalk\nCODE:\n```\nappend(Queue1,Queue2,NewQueue)\n```\n\n----------------------------------------\n\nTITLE: Creating Teacher and Student Objects\nDESCRIPTION: Creates a new teacher and a new student object using their respective 'new' constructor predicates.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/people/NOTES.md#2025-04-06_snippet_4\n\nLANGUAGE: logtalk\nCODE:\n```\nteacher::new(Id3, 'Gordon Robinson', '1969/11/10', '3.2'), student::new(Id4, 'Roosevelt Franklin', '1969/11/10', 'Blue').\n```\n\n----------------------------------------\n\nTITLE: Loading the Basic Types Library in Logtalk\nDESCRIPTION: Command to load all entities in the basic_types library using the loader.lgt file. This provides access to all the basic types mentioned in the documentation.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/libraries/basic_types.rst#2025-04-06_snippet_0\n\nLANGUAGE: logtalk\nCODE:\n```\n| ?- logtalk_load(basic_types(loader)).\n```\n\n----------------------------------------\n\nTITLE: Loading OS Library in Logtalk\nDESCRIPTION: Command to load all entities in the OS library using the loader.lgt file\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/libraries/os.rst.txt#2025-04-06_snippet_0\n\nLANGUAGE: prolog\nCODE:\n```\n| ?- logtalk_load(os(loader)).\n```\n\n----------------------------------------\n\nTITLE: Include Directive Usage Examples\nDESCRIPTION: Examples demonstrating different ways to use the include/1 directive with library notation, relative paths, absolute paths, and in object creation.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/refman/directives/include_1.rst.txt#2025-04-06_snippet_2\n\nLANGUAGE: logtalk\nCODE:\n```\n% include the \"raw_1.txt\" text file found\n% on the \"data\" library directory:\n:- include(data('raw_1.txt')).\n\n% include a \"factbase.pl\" file in the same directory\n% of the source file containing the directive:\n:- include('factbase.pl').\n\n% include a file given its absolute path:\n:- include('/home/me/databases/countries.pl').\n\n% create a wrapper object for a Prolog file using\n% library notation to define the file path:\n| ?- create_object(cities, [], [public(city/4), include(geo('cities.pl'))], []).\n```\n\n----------------------------------------\n\nTITLE: Context Method Usage Example - Logtalk\nDESCRIPTION: Example showing how to use context/1 for type-checking predicate arguments in a clause.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/refman/methods/context_1.rst.txt#2025-04-06_snippet_2\n\nLANGUAGE: logtalk\nCODE:\n```\nfoo(A, N) :-\n    % type-check arguments\n    context(Context),\n    type::check(atom, A, Context),\n    type::check(integer, N, Context),\n    % arguments are fine; go ahead\n    ... .\n```\n\n----------------------------------------\n\nTITLE: Avoiding Operator Notation in Prolog Directives\nDESCRIPTION: Example of a directive using operator notation that should be avoided for better compatibility when converting Prolog modules to Logtalk objects.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/userman/migration.rst#2025-04-06_snippet_4\n\nLANGUAGE: text\nCODE:\n```\n:- dynamic foo/1, bar/2.\n```\n\n----------------------------------------\n\nTITLE: Loading Test Files with Hook\nDESCRIPTION: Example of loading test files with the lgtunit hook for term expansion.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/devtools/lgtunit.rst#2025-04-06_snippet_3\n\nLANGUAGE: logtalk\nCODE:\n```\n| ?- logtalk_load(lgtunit(loader)),\n     logtalk_load(tests, [hook(lgtunit)]).\n```\n\n----------------------------------------\n\nTITLE: Printing Logtalk and Backend Version Information\nDESCRIPTION: Command to display the Logtalk version, Prolog backend, and kernel versions when running in a Jupyter notebook environment.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/diamonds/NOTES.md#2025-04-06_snippet_0\n\nLANGUAGE: logtalk\nCODE:\n```\n%versions\n```\n\n----------------------------------------\n\nTITLE: Domain Error Method Signature\nDESCRIPTION: The main method signature for throwing domain errors with Domain and Culprit parameters.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/refman/methods/domain_error_2.rst#2025-04-06_snippet_0\n\nLANGUAGE: prolog\nCODE:\n```\ndomain_error(Domain, Culprit)\n```\n\n----------------------------------------\n\nTITLE: Implementing Simple Benchmarking Predicate in Prolog\nDESCRIPTION: A basic benchmark predicate that uses a failure-driven loop to repeatedly call a goal N times. This approach helps avoid interference from garbage-collection or memory expansion mechanisms during timing measurements.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/userman/messages.rst#2025-04-06_snippet_9\n\nLANGUAGE: prolog\nCODE:\n```\nbenchmark(N, Goal) :-\n    repeat(N),\n        call(Goal),\n    fail.\n\nbenchmark(_, _).\n```\n\n----------------------------------------\n\nTITLE: Domain Error Method Signature\nDESCRIPTION: The main method signature for throwing domain errors with Domain and Culprit parameters.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/refman/methods/domain_error_2.rst#2025-04-06_snippet_0\n\nLANGUAGE: prolog\nCODE:\n```\ndomain_error(Domain, Culprit)\n```\n\n----------------------------------------\n\nTITLE: Example Query Using current_logtalk_flag/2\nDESCRIPTION: This example demonstrates how to query the current value of the source_data flag using the current_logtalk_flag/2 predicate in a Logtalk interactive session.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/refman/predicates/current_logtalk_flag_2.rst.txt#2025-04-06_snippet_2\n\nLANGUAGE: prolog\nCODE:\n```\n% get the current value of the source_data flag:\n| ?- current_logtalk_flag(source_data, Value).\n```\n\n----------------------------------------\n\nTITLE: Defining List Utility Object in Logtalk\nDESCRIPTION: Example of defining an object 'list' containing common list utility predicates like append/3 and member/2 in Logtalk. This demonstrates how to define object predicates similar to Prolog predicates.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/userman/predicates.rst#2025-04-06_snippet_30\n\nLANGUAGE: Logtalk\nCODE:\n```\n:- object(list).\n\n    :- public(append/3).\n    append([], L, L).\n    append([H| T], L, [H| T2]) :-\n        append(T, L, T2).\n\n    :- public(member/2).\n    member(H, [H| _]).\n    member(H, [_| T]) :-\n        member(H, T).\n\n:- end_object.\n```\n\n----------------------------------------\n\nTITLE: Guessing CSV Separator in Logtalk\nDESCRIPTION: Demonstrates how to use the csv::guess_separator/2 predicate to determine the separator used in a CSV file.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/library/csv/NOTES.md#2025-04-06_snippet_2\n\nLANGUAGE: Logtalk\nCODE:\n```\n| ?- csv::guess_separator('test_files/crlf_ending.csv', Separator).\nIs this the proper reading of a line of this file (y/n)? [aaa,bb,ccc]\n|> y.\n\nSeparator = comma ?\n```\n\n----------------------------------------\n\nTITLE: Template and Modes for coinductive/1 Directive in Logtalk\nDESCRIPTION: Specifies the argument modes for the coinductive/1 directive, showing that it accepts predicate indicators, non-terminal indicators, or coinductive predicate template terms as its argument.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/refman/directives/coinductive_1.rst.txt#2025-04-06_snippet_1\n\nLANGUAGE: logtalk\nCODE:\n```\ncoinductive(+predicate_indicator_term)\ncoinductive(+non_terminal_indicator_term)\ncoinductive(+coinductive_predicate_template_term)\n```\n\n----------------------------------------\n\nTITLE: Asynchronous Call in Logtalk\nDESCRIPTION: Demonstrates how to make an asynchronous call using the threaded_ignore/1 predicate. This allows sending a message without waiting for a reply.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/userman/threads.rst.txt#2025-04-06_snippet_6\n\nLANGUAGE: Logtalk\nCODE:\n```\n..., threaded_ignore(agent::happy_birthday), ...\n```\n\n----------------------------------------\n\nTITLE: Retrieving the First Solution from a Threaded Call in Logtalk\nDESCRIPTION: Shows how to retrieve through backtracking the first solution from a previously executed threaded goal with threaded_once/1.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/threads/nondet/NOTES.md#2025-04-06_snippet_5\n\nLANGUAGE: logtalk\nCODE:\n```\nthreaded_exit(lists::member(X, [1,2,3])).\n```\n\n----------------------------------------\n\nTITLE: Replacing Numbered Variables in Terms in Logtalk\nDESCRIPTION: Defines predicates to replace '$VAR'(N) sub-terms with fresh variables in a term.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/termp_0.rst.txt#2025-04-06_snippet_11\n\nLANGUAGE: Logtalk\nCODE:\n```\nvarnumbers(Term,From,Copy)\n```\n\nLANGUAGE: Logtalk\nCODE:\n```\nvarnumbers(Term,Copy)\n```\n\n----------------------------------------\n\nTITLE: Demonstrating clause/2 Usage in Logtalk\nDESCRIPTION: Provides examples of how to use the clause/2 method to retrieve matching clauses from different contexts, including local dynamic predicates, predicates in 'this', and public dynamic predicates in explicit objects.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/refman/methods/clause_2.rst#2025-04-06_snippet_2\n\nLANGUAGE: Logtalk\nCODE:\n```\nclause(Head, Body)\n::clause(Head, Body)\nObject::clause(Head, Body)\n```\n\n----------------------------------------\n\nTITLE: QuickCheck with Module-Qualified Templates in Logtalk\nDESCRIPTION: Demonstrates using QuickCheck with module-qualified templates when supported by the backend Prolog system.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/quick_check/NOTES.md#2025-04-06_snippet_9\n\nLANGUAGE: logtalk\nCODE:\n```\nuse_module(library(lists)).\n```\n\nLANGUAGE: logtalk\nCODE:\n```\nlgtunit::quick_check(lists:length(+list, -integer)).\n```\n\n----------------------------------------\n\nTITLE: Testing piped hook object with b(key-value)\nDESCRIPTION: Demonstrates the use of a piped hook object with another key-value pair.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/expansion/NOTES.md#2025-04-06_snippet_18\n\nLANGUAGE: logtalk\nCODE:\n```\npiped<<b(key-value).\n```\n\n----------------------------------------\n\nTITLE: Running PDDL Parser Unit Tests in Logtalk\nDESCRIPTION: These code snippets show how to run the unit tests for the PDDL parser. The first example runs tests from the parser's directory, while the second can be run from any directory.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/contributions/pddl_parser.rst.txt#2025-04-06_snippet_2\n\nLANGUAGE: Prolog\nCODE:\n```\n?- logtalk_load(tester).\n```\n\nLANGUAGE: Prolog\nCODE:\n```\n?- logtalk_load(pddl_parser(tester)).\n```\n\n----------------------------------------\n\nTITLE: Asynchronous Goal Proving Using Threads in Logtalk\nDESCRIPTION: Demonstrates using threaded_call/1 and threaded_exit/1 predicates for asynchronous goal proving and result retrieval.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/userman/threads.rst#2025-04-06_snippet_3\n\nLANGUAGE: Logtalk\nCODE:\n```\n| ?- threaded_call(lists::member(X, [1,2,3])).\n\nX = _G189\nyes\n\n| ?- threaded_exit(lists::member(X, [1,2,3])).\n\nX = 1 ;\nX = 2 ;\nX = 3 ;\nno\n```\n\n----------------------------------------\n\nTITLE: Getting Heap Size in Logtalk\nDESCRIPTION: Returns the number of elements in the heap. Takes a heap and returns its size as an integer.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/heapp_0.rst.txt#2025-04-06_snippet_5\n\nLANGUAGE: Logtalk\nCODE:\n```\nsize(Heap,Size)\n```\n\n----------------------------------------\n\nTITLE: Defining retract/1 Method Signature in Logtalk\nDESCRIPTION: Specifies the signature of the retract/1 method, which can take either a clause head or a full clause (head and body) as its argument.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/refman/methods/retract_1.rst.txt#2025-04-06_snippet_0\n\nLANGUAGE: Logtalk\nCODE:\n```\nretract(Head)\nretract((Head:-Body))\n```\n\n----------------------------------------\n\nTITLE: Defining Edge Cases for Custom Types in Logtalk\nDESCRIPTION: Example showing how to define edge cases for a custom type to be used with QuickCheck implementations.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/libraries/arbitrary.rst#2025-04-06_snippet_7\n\nLANGUAGE: prolog\nCODE:\n```\n:- multifile(arbitrary::edge_case/2).\narbitrary::edge_case(odd,  1).\narbitrary::edge_case(odd, -1).\n```\n\n----------------------------------------\n\nTITLE: Loading the Reader Object in Logtalk\nDESCRIPTION: Demonstrates how to load all entities in the reader library using the loader.lgt file.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/library/reader/NOTES.md#2025-04-06_snippet_0\n\nLANGUAGE: prolog\nCODE:\n```\n| ?- logtalk_load(reader(loader)).\n```\n\n----------------------------------------\n\nTITLE: Defining Info Directive Syntax in Logtalk\nDESCRIPTION: Specifies the syntax for the info/1 directive, which takes a list of Key is Value pairs as its argument. This directive is used to provide metadata about Logtalk entities.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/refman/directives/info_1.rst.txt#2025-04-06_snippet_0\n\nLANGUAGE: Logtalk\nCODE:\n```\ninfo([Key is Value, ...])\n```\n\n----------------------------------------\n\nTITLE: Generating JSON from Logtalk Terms\nDESCRIPTION: Shows how to use the generate/2 predicate to convert Logtalk terms into JSON representations (codes, chars, atom).\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/libraries/json.rst.txt#2025-04-06_snippet_4\n\nLANGUAGE: Prolog\nCODE:\n```\n| ?- json::generate(codes(Encoding), [a,{b-c}]).\nEncoding = [91,34,97,34,44,123,34,98,34,58,34,99,34,125,93]\nyes\n```\n\nLANGUAGE: Prolog\nCODE:\n```\n| ?- json::generate(chars(Encoding), [a,{b-c}]).\nEncoding = ['[','\"',a,'\"',',','{','\"',b,'\"',:,'\"',c,'\"','}',']']\nYes\n```\n\nLANGUAGE: Prolog\nCODE:\n```\n| ?- json::generate(atom(Encoding), [a,{b-c}]).\nEncoding = '[\"a\",{\"b\":\"c\"}]'\nYes\n```\n\n----------------------------------------\n\nTITLE: Specifying Modes and Proofs for after/3 in Logtalk\nDESCRIPTION: Defines the mode declaration for the after/3 method, indicating that all arguments are potentially instantiated or uninstantiated, and the predicate can succeed zero or more times.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/refman/methods/after_3.rst.txt#2025-04-06_snippet_1\n\nLANGUAGE: Logtalk\nCODE:\n```\nafter(?object_identifier, ?callable, ?object_identifier) - zero_or_more\n```\n\n----------------------------------------\n\nTITLE: Parsing Zero or More Terminals in Logtalk Sequence Grammar\nDESCRIPTION: Eagerly parses zero or more terminals without collecting them. This predicate always succeeds once.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/sequence_grammars_0.rst.txt#2025-04-06_snippet_4\n\nLANGUAGE: Logtalk\nCODE:\n```\nzero_or_more\n```\n\n----------------------------------------\n\nTITLE: Currying Example with Lambda in Logtalk\nDESCRIPTION: Shows how to use currying with lambda expressions to perform nested calculations.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/lambdas/NOTES.md#2025-04-06_snippet_3\n\nLANGUAGE: logtalk\nCODE:\n```\nlogtalk << call([Z]>>(call([X,Y]>>(Y is X*X), 5, R), Z is R*R), T).\n```\n\n----------------------------------------\n\nTITLE: Usage Examples of ignore/1 in Logtalk\nDESCRIPTION: Examples showing how to use ignore/1 with direct goal calls and with message sending to self or explicit objects.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/refman/methods/ignore_1.rst#2025-04-06_snippet_3\n\nLANGUAGE: logtalk\nCODE:\n```\nignore(Goal)\n```\n\nLANGUAGE: logtalk\nCODE:\n```\nignore(::Goal)\n```\n\nLANGUAGE: logtalk\nCODE:\n```\nignore(Object::Goal)\n```\n\n----------------------------------------\n\nTITLE: Writing Terms to Atoms in Logtalk\nDESCRIPTION: Predicates for writing Prolog terms to atoms with customizable write options, including write_term_to_atom/3 with full option support and write_to_atom/2 with default options.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/term_io_protocol_0.rst.txt#2025-04-06_snippet_3\n\nLANGUAGE: Logtalk\nCODE:\n```\nwrite_term_to_atom(Term,Atom,Options)\n```\n\nLANGUAGE: Logtalk\nCODE:\n```\nwrite_to_atom(Term,Atom)\n```\n\n----------------------------------------\n\nTITLE: Debug Messages in Logtalk Tests\nDESCRIPTION: Shows how to implement conditional debug messages in tests using meta-messages. These messages are only printed when the debug flag is turned on, allowing for easy toggling without recompilation.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/devtools/lgtunit.rst.txt#2025-04-06_snippet_34\n\nLANGUAGE: logtalk\nCODE:\n```\n:- uses(logtalk, [\n    print_message(debug, my_app, Message) as dbg(Message)\n]).\n\ntest(some_test_id, ...) :-\n    ...,\n    dbg('Some intermediate value'-Value),\n    ...,\n    dbg([Stream]>>custom_print_goal(Stream, ...)),\n    ...\n```\n\n----------------------------------------\n\nTITLE: Debugging DCG Rules with Lambda Expressions in Logtalk\nDESCRIPTION: Uses call//1 and a lambda expression to access the grammar rule input list for debugging purposes.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/dcgs/NOTES.md#2025-04-06_snippet_18\n\nLANGUAGE: logtalk\nCODE:\n```\ndebug::copy([1,2,3,4,5], Copy).\n```\n\n----------------------------------------\n\nTITLE: Declaring JSON Object in Logtalk\nDESCRIPTION: Defines the json(StringRepresentation) object with a parameter for text representation when decoding JSON strings. The object extends json(curly,dash,StringRepresentation) and inherits public predicates generate/2 and parse/2.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/json_1.rst.txt#2025-04-06_snippet_0\n\nLANGUAGE: Logtalk\nCODE:\n```\njson(StringRepresentation)\n```\n\n----------------------------------------\n\nTITLE: Creating a New Object at Runtime in Logtalk\nDESCRIPTION: Demonstrates how to dynamically create a new object at runtime using the create_object/4 predicate. This example creates an object with relations, directives, and clauses.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/userman/objects.rst.txt#2025-04-06_snippet_16\n\nLANGUAGE: prolog\nCODE:\n```\n| ?- create_object(\n        foo,\n        [extends(bar)],\n        [public(foo/1)],\n        [foo(1), foo(2)]\n    ).\n```\n\n----------------------------------------\n\nTITLE: Example Using Parameter Variables in Logtalk\nDESCRIPTION: Shows how to use parameter variables (with _VariableName_ syntax) as an alternative to the parameter/2 method for cleaner code.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/refman/methods/parameter_2.rst#2025-04-06_snippet_3\n\nLANGUAGE: logtalk\nCODE:\n```\n:- object(box(_Color_, _Weight_)).\n\n    ...\n\n    color(_Color_).\n\n    heavy :-\n        _Weight_ > 10.\n\n    ...\n```\n\n----------------------------------------\n\nTITLE: Loading and Using Multiple Hook Modules with hook_flows Library\nDESCRIPTION: Commands for loading the hook_flows library and setting up multiple modules as hook objects to handle term and goal expansions from different modules.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/userman/migration.rst.txt#2025-04-06_snippet_6\n\nLANGUAGE: text\nCODE:\n```\n| ?- logtalk_load(hook_flows(loader)).\n```\n\nLANGUAGE: text\nCODE:\n```\n| ?- set_logtalk_flag(hook, hook_set([user, system])).\n```\n\n----------------------------------------\n\nTITLE: Reading a Line from Text Stream to Character Codes in Logtalk\nDESCRIPTION: Reads a line from a text stream into a list of character codes, discarding end-of-line character codes. Returns 'end_of_file' atom when reaching the end of file.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/reader_0.rst.txt#2025-04-06_snippet_18\n\nLANGUAGE: Logtalk\nCODE:\n```\nline_to_codes(Stream,Codes)\n```\n\n----------------------------------------\n\nTITLE: Redirect Output Predicate\nDESCRIPTION: Calls a goal deterministically while redirecting output to a specified format (atom, chars, or codes with optional tail).\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/term_io_protocol_0.rst.txt#2025-04-06_snippet_11\n\nLANGUAGE: logtalk\nCODE:\n```\nwith_output_to(Output,Goal)\n```\n\n----------------------------------------\n\nTITLE: Declaring Dynamic Objects in Logtalk\nDESCRIPTION: Shows how to declare a dynamic object using the dynamic/0 directive. Dynamic objects can be abolished during program execution.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/userman/objects.rst.txt#2025-04-06_snippet_19\n\nLANGUAGE: logtalk\nCODE:\n```\n:- dynamic.\n```\n\n----------------------------------------\n\nTITLE: Multiple Assertions in a Single Test in Logtalk Unit Tests\nDESCRIPTION: Demonstrates checking multiple assertions in a single test using the assertion/2 predicate with descriptive labels for each assertion.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/devtools/lgtunit.rst#2025-04-06_snippet_29\n\nLANGUAGE: logtalk\nCODE:\n```\n   test(dictionary_clone_4_01, true) :-\n       as_dictionary([], Dictionary),\n       clone(Dictionary, DictionaryPairs, Clone, ClonePairs),\n       empty(Clone),\n       ^^assertion(original_pairs, DictionaryPairs == []),\n       ^^assertion(clone_pairs, ClonePairs == []).\n```\n\n----------------------------------------\n\nTITLE: Debugging Unit Tests with Context Switching\nDESCRIPTION: Alternative approach to debug tests using the context switching control construct (<<)/2. This method is useful when tests are compiled without the hook/1 compiler option.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/devtools/lgtunit.rst#2025-04-06_snippet_56\n\nLANGUAGE: logtalk\nCODE:\n```\n| ?- logtalk_load(debugger(loader)).\n...\n\n| ?- debugger::trace.\n...\n\n| ?- tests<<test(test_foo).\n...\n```\n\n----------------------------------------\n\nTITLE: Defining Shrinkers and Edge Cases\nDESCRIPTION: Implementation of shrinkers and edge cases for the odd integer type.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/libraries/arbitrary.rst.txt#2025-04-06_snippet_6\n\nLANGUAGE: logtalk\nCODE:\n```\n:- multifile(arbitrary::shrinker/1).\narbitrary::shrinker(odd).\n\n:- multifile(arbitrary::shrink/3).\narbitrary::shrink(odd, Large, Small) :-\n    integer(Large),\n    (   Large < -1 ->\n        Small is Large + 2\n    ;   Large > 1,\n        Small is Large - 2\n    ).\n\n:- multifile(arbitrary::edge_case/2).\narbitrary::edge_case(odd,  1).\narbitrary::edge_case(odd, -1).\n```\n\n----------------------------------------\n\nTITLE: Loading All Logtalk Libraries\nDESCRIPTION: Example of how to load all Logtalk libraries at once using the all_loader.lgt file, which handles all dependencies and ensures compilation in optimized mode.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/library/NOTES.md#2025-04-06_snippet_1\n\nLANGUAGE: Prolog\nCODE:\n```\n| ?- logtalk_load(library(all_loader)).\n```\n\n----------------------------------------\n\nTITLE: Running Single-threaded Takeuchi Function with Larger Input\nDESCRIPTION: This snippet demonstrates running the single-threaded version of the Takeuchi function with larger input parameters (21, 14, 7) and timing the execution.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/threads/tak/NOTES.md#2025-04-06_snippet_4\n\nLANGUAGE: logtalk\nCODE:\n```\ntime(tak(1)::tak(21, 14, 7, R)).\n```\n\n----------------------------------------\n\nTITLE: Generating Version 4 UUID as Character Code List in Logtalk\nDESCRIPTION: Generates a version 4 UUID as a list of character codes using the uuid(codes)::uuid_v4/1 predicate.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/libraries/uuid.rst.txt#2025-04-06_snippet_7\n\nLANGUAGE: Prolog\nCODE:\n```\n| ?- uuid(codes)::uuid_v4(UUID).\nUUID = [102,97,52,54,57,98,100,50,45,51,57,54,51,45,52,97,100,55,45,\n           98,50,50,55,45,101,100,52,99,56,55,99,54,53,55,102,98]\nyes\n```\n\n----------------------------------------\n\nTITLE: Specifying modes and number of proofs for question_hook/6 in Logtalk\nDESCRIPTION: Defines the calling modes and expected arguments for the question_hook/6 method, indicating it returns zero or one solutions.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/refman/methods/question_hook_6.rst#2025-04-06_snippet_1\n\nLANGUAGE: logtalk\nCODE:\n```\nquestion_hook(+nonvar, +nonvar, +nonvar, +list(nonvar), +callable, -term) - zero_or_one\n```\n\n----------------------------------------\n\nTITLE: Predicate Mode Declaration\nDESCRIPTION: Specifies the mode declaration for abolish_category/1, indicating it takes a category identifier as input (+) and provides a single solution.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/refman/predicates/abolish_category_1.rst#2025-04-06_snippet_1\n\nLANGUAGE: logtalk\nCODE:\n```\nabolish_category(+category_identifier) - one\n```\n\n----------------------------------------\n\nTITLE: Specifying Modes and Proofs for clause/2 in Logtalk\nDESCRIPTION: Defines the mode and number of proofs for the clause/2 method, indicating that it expects a callable term as the first argument and can have zero or more solutions.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/refman/methods/clause_2.rst#2025-04-06_snippet_1\n\nLANGUAGE: Logtalk\nCODE:\n```\nclause(+callable, ?body) - zero_or_more\n```\n\n----------------------------------------\n\nTITLE: Reproducing Random Sequences Example\nDESCRIPTION: Demonstrates how to use seeds to reproduce sequences of arbitrary terms.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/libraries/arbitrary.rst.txt#2025-04-06_snippet_9\n\nLANGUAGE: logtalk\nCODE:\n```\n| ?- type::get_seed(Seed).\nSeed = seed(3172, 9814, 20125)\nyes\n\n| ?- type::arbitrary(integer, Arbitrary).\nArbitrary = -816\nyes\n\n| ?- type::arbitrary(integer, Arbitrary).\nArbitrary = -113\nyes\n\n| ?- type::arbitrary(integer, Arbitrary).\nArbitrary = 446\n\n| ?- type::set_seed(seed(3172, 9814, 20125)).\nyes\n\n| ?- type::arbitrary(integer, Arbitrary).\nArbitrary = -816\nyes\n\n| ?- type::arbitrary(integer, Arbitrary).\nArbitrary = -113\nyes\n\n| ?- type::arbitrary(integer, Arbitrary).\nArbitrary = 446\nyes\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Test Dialect in Logtalk\nDESCRIPTION: Demonstrates how to create a user-defined test dialect by extending the lgtunit object and using term expansion.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/devtools/lgtunit.rst#2025-04-06_snippet_14\n\nLANGUAGE: Logtalk\nCODE:\n```\n:- object(simple_dialect,\n    implements(expanding)).\n\n    term_expansion(begin_of_file, [(:- object(tests,extends(lgtunit)))]).\n    term_expansion((Head :- Body), [test(Head) :- Body]).\n    term_expansion(end_of_file, [(:- end_object)]).\n\n:- end_object.\n```\n\n----------------------------------------\n\nTITLE: Creating a Customer with Normal Strategy\nDESCRIPTION: Creates a new customer named 'first' with the normal billing strategy.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/design_patterns/behavioral/strategy/NOTES.md#2025-04-06_snippet_2\n\nLANGUAGE: logtalk\nCODE:\n```\ncustomer::new(first, normal_strategy).\n```\n\n----------------------------------------\n\nTITLE: Specifying Modes for clause/2 Method in Logtalk\nDESCRIPTION: Defines the usage mode and number of proofs for the clause/2 method, indicating it accepts a callable term and returns zero or more solutions.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/refman/methods/clause_2.rst.txt#2025-04-06_snippet_1\n\nLANGUAGE: logtalk\nCODE:\n```\nclause(+callable, ?body) - zero_or_more\n```\n\n----------------------------------------\n\nTITLE: Defining Shrinkers for Custom Types in Logtalk\nDESCRIPTION: Example defining shrinker predicates for the 'odd' type to support QuickCheck functionality by shrinking values.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/libraries/arbitrary.rst#2025-04-06_snippet_6\n\nLANGUAGE: prolog\nCODE:\n```\n:- multifile(arbitrary::shrinker/1).\narbitrary::shrinker(odd).\n\n:- multifile(arbitrary::shrink/3).\narbitrary::shrink(odd, Large, Small) :-\n    integer(Large),\n    (   Large < -1 ->\n        Small is Large + 2\n    ;   Large > 1,\n        Small is Large - 2\n    ).\n```\n\n----------------------------------------\n\nTITLE: Defining min/2 Predicate for Number Lists in Logtalk\nDESCRIPTION: Determines the minimum value in a list of numbers using arithmetic order. Fails if the list is empty.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/numberlistp_0.rst.txt#2025-04-06_snippet_0\n\nLANGUAGE: Logtalk\nCODE:\n```\nmin(List,Minimum)\n```\n\n----------------------------------------\n\nTITLE: Usage Examples\nDESCRIPTION: Demonstrates different ways to use setof/3 in various contexts including object messaging.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/refman/methods/setof_3.rst.txt#2025-04-06_snippet_3\n\nLANGUAGE: prolog\nCODE:\n```\nsetof(Template, Goal, List)\nsetof(Template, ::Message, List)\nsetof(Template, Object::Message, List)\n```\n\n----------------------------------------\n\nTITLE: Specifying Template and Modes for Public Declarations in Logtalk\nDESCRIPTION: Defines the template and modes for the public/1 directive, indicating that it accepts predicate indicators, non-terminal indicators, and operator declarations as arguments.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/refman/directives/public_1.rst#2025-04-06_snippet_1\n\nLANGUAGE: Logtalk\nCODE:\n```\npublic(+predicate_indicator_term)\npublic(+non_terminal_indicator_term)\npublic(+operator_declaration)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Top and Next Pairs from Heap in Logtalk\nDESCRIPTION: Returns the top pair and the next pair in the heap without modifying the heap. Fails if the heap does not have at least two elements.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/heapp_0.rst.txt#2025-04-06_snippet_9\n\nLANGUAGE: Logtalk\nCODE:\n```\ntop_next(Heap,TopKey,TopValue,NextKey,NextValue)\n```\n\n----------------------------------------\n\nTITLE: HTML5 Document Generation in Logtalk\nDESCRIPTION: Complete example of generating a HTML5 document with title and paragraph elements to a file.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/library/html/NOTES.md#2025-04-06_snippet_3\n\nLANGUAGE: prolog\nCODE:\n```\n| ?- html5::generate(\n         file('hello.html'),\n         html([lang=en], [head(title('Hello world!')), body(p('Bye!'))])\n     ).\n```\n\n----------------------------------------\n\nTITLE: Incrementing Integers in List with maplist/3 and Lambda in Logtalk\nDESCRIPTION: Uses maplist/3 with a lambda expression containing a built-in predicate to add one to each integer in a list within a Logtalk object.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/symbiosis/NOTES.md#2025-04-06_snippet_4\n\nLANGUAGE: logtalk\nCODE:\n```\nsymbiosis::s(L).\n```\n\n----------------------------------------\n\nTITLE: Delegating a Message to an Object in Logtalk\nDESCRIPTION: Shows how to delegate a message to an object while preserving the original sender and meta-call context using the control_delegate_message_1 delegation control construct.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/userman/messages.rst#2025-04-06_snippet_2\n\nLANGUAGE: Logtalk\nCODE:\n```\n..., [Object::Message], ....\n```\n\n----------------------------------------\n\nTITLE: Specifying Pack License in Logtalk\nDESCRIPTION: Defines the pack license, preferably using an identifier from the SPDX License List. This predicate returns a single atom representing the license.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/pack_protocol_0.rst.txt#2025-04-06_snippet_2\n\nLANGUAGE: Logtalk\nCODE:\n```\nlicense(License)\n```\n\n----------------------------------------\n\nTITLE: Using the assertion/1 Predicate in Logtalk\nDESCRIPTION: Example of using the assertion/1 predicate to check a condition (non_empty_list) within a predicate definition. This will generate warnings or errors if the assertion fails.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/devtools/assertions.rst.txt#2025-04-06_snippet_2\n\nLANGUAGE: logtalk\nCODE:\n```\nfoo(L) :-\n    assertions::assertion(non_empty_list(L)),\n    ...\n```\n\n----------------------------------------\n\nTITLE: Synchronized Predicate Declaration\nDESCRIPTION: Declaration of a synchronized predicate to ensure thread-safe database updates.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/userman/threads.rst#2025-04-06_snippet_7\n\nLANGUAGE: logtalk\nCODE:\n```\n:- synchronized(db_update/1).\n\ndb_update(Update) :-\n    % predicate with side-effects\n    ...\n```\n\n----------------------------------------\n\nTITLE: Setting Global Source Data Flag in Logtalk\nDESCRIPTION: This snippet demonstrates how to set the source_data flag globally to 'on' using the set_logtalk_flag/2 predicate.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/devtools/lgtdoc.rst.txt#2025-04-06_snippet_3\n\nLANGUAGE: prolog\nCODE:\n```\n| ?- set_logtalk_flag(source_data, on).\n```\n\n----------------------------------------\n\nTITLE: Question System Implementation\nDESCRIPTION: Category implementing a custom question-answer system with message tokenization and prompt configuration.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/userman/printing.rst#2025-04-06_snippet_8\n\nLANGUAGE: logtalk\nCODE:\n```\n:- category(hitchhikers_guide_to_the_galaxy).\n\n    :- multifile(logtalk::message_tokens//2).\n    :- dynamic(logtalk::message_tokens//2).\n\n    logtalk::message_tokens(ultimate_question, hitchhikers) -->\n        ['The answer to the ultimate question of life, the universe and everything is?'-[], nl].\n\n   :- multifile(logtalk::question_prompt_stream/4).\n   :- dynamic(logtalk::question_prompt_stream/4).\n\n   logtalk::question_prompt_stream(question, hitchhikers, '> ', user_input).\n\n:- end_category.\n```\n\n----------------------------------------\n\nTITLE: Defining Nested Logtalk Library Paths\nDESCRIPTION: Example of defining nested library paths using aliases in the logtalk_library_path/2 predicate.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/userman/programming.rst#2025-04-06_snippet_11\n\nLANGUAGE: logtalk\nCODE:\n```\n:- multifile(logtalk_library_path/2).\n:- dynamic(logtalk_library_path/2).\n\nlogtalk_library_path(lgtuser, '$LOGTALKUSER/').\nlogtalk_library_path(examples, lgtuser('examples/')).\nlogtalk_library_path(viewpoints, examples('viewpoints/')).\n```\n\n----------------------------------------\n\nTITLE: Creating Logtalk Object Wrapper for Plain Prolog File\nDESCRIPTION: This snippet shows how to create a Logtalk object wrapper for a plain Prolog file named 'code.pl'. This allows the creation of predicate cross-referencing diagrams for plain Prolog files using the Logtalk diagrams tool.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/tools/diagrams/NOTES.md#2025-04-06_snippet_17\n\nLANGUAGE: logtalk\nCODE:\n```\n:- object(code).\n    :- include('code.pl').\n:- end_object.\n```\n\n----------------------------------------\n\nTITLE: Reading Text Files to Terms in Logtalk\nDESCRIPTION: Reads a text file into a list of terms. Takes a file name as input and returns the file contents as a list of Prolog terms.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/reader_0.rst.txt#2025-04-06_snippet_4\n\nLANGUAGE: Logtalk\nCODE:\n```\nfile_to_terms(File,Terms)\n```\n\n----------------------------------------\n\nTITLE: Random List Member Selection\nDESCRIPTION: Predicate that selects a random member from a list. Fails if the list is empty.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/random_protocol_0.rst.txt#2025-04-06_snippet_2\n\nLANGUAGE: logtalk\nCODE:\n```\nmember(-term,+list(term))\n```\n\n----------------------------------------\n\nTITLE: Setting Log Points in Logtalk\nDESCRIPTION: Sets a log point, removing any existing breakpoint defined for the same location. Fails if the log point is invalid.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/debuggerp_0.rst.txt#2025-04-06_snippet_19\n\nLANGUAGE: Logtalk\nCODE:\n```\nlog/3\n```\n\n----------------------------------------\n\nTITLE: Confirming Performers Present\nDESCRIPTION: Lists all horsemen after they have been revealed back on stage.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/now_you_see_me/NOTES.md#2025-04-06_snippet_6\n\nLANGUAGE: logtalk\nCODE:\n```\nstage::list.\n```\n\n----------------------------------------\n\nTITLE: Usage Examples for forall/2\nDESCRIPTION: Examples showing different ways to call the forall/2 predicate in various contexts.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/refman/methods/forall_2.rst.txt#2025-04-06_snippet_3\n\nLANGUAGE: logtalk\nCODE:\n```\nforall(Generator, Test)\nforall(::Generator, ::Test)\nforall(Object1::Generator, Object2::Test)\n```\n\n----------------------------------------\n\nTITLE: Basic mode/2 Directive Syntax in Logtalk\nDESCRIPTION: Defines the basic syntax for the mode/2 directive, which takes a predicate mode term and number of proofs. Used to specify how a predicate can be called and how many solutions it's expected to provide.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/refman/directives/mode_2.rst.txt#2025-04-06_snippet_0\n\nLANGUAGE: logtalk\nCODE:\n```\nmode(Mode, NumberOfProofs)\n```\n\n----------------------------------------\n\nTITLE: Using setof/3 with Explicit Object Messages in Logtalk\nDESCRIPTION: Illustrates how to use setof/3 to find a set of solutions by sending a message to an explicit object in Logtalk.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/refman/methods/setof_3.rst#2025-04-06_snippet_5\n\nLANGUAGE: Logtalk\nCODE:\n```\nsetof(Template, Object::Message, List)\n```\n\n----------------------------------------\n\nTITLE: Reading CSV File into Dynamic Predicate in Logtalk\nDESCRIPTION: Example showing how to read CSV data into a dynamic predicate with assertion and querying.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/libraries/csv.rst.txt#2025-04-06_snippet_4\n\nLANGUAGE: prolog\nCODE:\n```\n| ?- assertz(p(_,_,_)), retractall(p(_,_,_)).\nyes\n\n| ?- csv(keep, comma, true)::read_file('test_files/crlf_ending.csv', user, p/3).\nyes\n\n| ?-  p(A,B,C).\n\nA = aaa\nB = bbb\nC = ccc ? ;\n\nA = zzz\nB = yyy\nC = xxx\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Mode Directive for Error Handling in Logtalk\nDESCRIPTION: Example of a mode directive specifying that a predicate can throw an error even with valid inputs. This directive documents that open/3 can throw errors like permission errors when attempting to open a source or sink.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/userman/predicates.rst#2025-04-06_snippet_4\n\nLANGUAGE: logtalk\nCODE:\n```\n:- mode(open(@source_sink, @io_mode, --stream), one_or_error).\n```\n\n----------------------------------------\n\nTITLE: Logtalk Object Declaration\nDESCRIPTION: Object declaration for directory_dependency_diagram with compilation flags static and context_switching_calls. This object extends directory_dependency_diagram(dot) and provides functionality for generating directory dependency diagrams.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/directory_dependency_diagram_0.rst.txt#2025-04-06_snippet_0\n\nLANGUAGE: logtalk\nCODE:\n```\ndirectory_dependency_diagram\n```\n\n----------------------------------------\n\nTITLE: Integrating i15 Function Using Single-Threaded QuadRec2D Method\nDESCRIPTION: Performs integration of the i15 test function over a square domain using quadrec2d with 1 thread and measures execution time.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/threads/integration2d/NOTES.md#2025-04-06_snippet_8\n\nLANGUAGE: logtalk\nCODE:\n```\ntime(quadrec2d(1)::integrate(i15, -2,2,-2,2, 2, 1.0e-4, Integral)).\n```\n\n----------------------------------------\n\nTITLE: Documenting Predicates with info/2 Directive\nDESCRIPTION: The info/2 directive syntax for adding documentation to predicates with arbitrary user-defined metadata using Key is Value terms.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/userman/predicates.rst#2025-04-06_snippet_24\n\nLANGUAGE: logtalk\nCODE:\n```\n:- info(Name/Arity, List).\n```\n\n----------------------------------------\n\nTITLE: Calculating Easter Sunday Date in Logtalk\nDESCRIPTION: The easter_day/3 predicate computes the date of Easter Sunday for a given Gregorian year. It returns the month and day of Easter Sunday for the specified or current year.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/iso8601_0.rst.txt#2025-04-06_snippet_8\n\nLANGUAGE: Logtalk\nCODE:\n```\neaster_day(Year,Month,Day)\n```\n\n----------------------------------------\n\nTITLE: Saving TSV Data to Dynamic Predicate in Logtalk\nDESCRIPTION: Shows how to read TSV data and save it using a public and dynamic object predicate. The example first asserts and retracts a placeholder predicate, then reads the TSV file skipping the header.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/libraries/tsv.rst.txt#2025-04-06_snippet_3\n\nLANGUAGE: Logtalk\nCODE:\n```\n| ?- assertz(p(_,_,_)), retractall(p(_,_,_)).\nyes\n\n| ?- tsv(skip)::read_file('test_files/data.tsv', user, p/3).\nyes\n\n| ?-  p(A,B,C).\n\nA = 'Paul', B = 23, C = '1115 W Franklin' ? ;\n...\n```\n\n----------------------------------------\n\nTITLE: Defining the retractall/1 Method Signature in Logtalk\nDESCRIPTION: Defines the signature of the retractall/1 built-in method which retracts all clauses with a matching head for an object dynamic predicate.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/refman/methods/retractall_1.rst#2025-04-06_snippet_0\n\nLANGUAGE: logtalk\nCODE:\n```\nretractall(Head)\n```\n\n----------------------------------------\n\nTITLE: Using Prolog Built-ins as Messages in Logtalk\nDESCRIPTION: Shows how to use Prolog built-in predicates as messages to Logtalk objects using the {}/1 control construct.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/refman/control/external_call_1.rst.txt#2025-04-06_snippet_6\n\nLANGUAGE: logtalk\nCODE:\n```\n% use Prolog built-in predicates as messages:\n| ?- logtalk::{write('hello world!'), nl}.\nhello world!\nyes\n```\n\n----------------------------------------\n\nTITLE: Defining a portray/1 Hook for Custom Term Writing in Prolog\nDESCRIPTION: Example implementation of the portray/1 hook predicate that customizes how specific compound terms are displayed when using print/1.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/userman/debugging.rst.txt#2025-04-06_snippet_26\n\nLANGUAGE: prolog\nCODE:\n```\nportray(e(V1,V2)) :-\n    format('~q ---> ~q~n', [V1,V2]).\n```\n\n----------------------------------------\n\nTITLE: Approximately Equal Operator in Logtalk Unit Testing\nDESCRIPTION: Public operator declaration for the approximately equal operator used in floating-point comparisons in tests.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/lgtunit_0.rst.txt#2025-04-06_snippet_83\n\nLANGUAGE: Logtalk\nCODE:\n```\nop(700,xfx,=~=)\n```\n\n----------------------------------------\n\nTITLE: Loading the Java Library in Logtalk\nDESCRIPTION: Command to load all entities in the Java library by loading the loader.lgt file.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/library/java/NOTES.md#2025-04-06_snippet_0\n\nLANGUAGE: prolog\nCODE:\n```\n| ?- logtalk_load(java(loader)).\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Random Generator Object in Logtalk\nDESCRIPTION: Example of defining a derived random generator object that extends the random object and initializes its own seed.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/libraries/random.rst.txt#2025-04-06_snippet_2\n\nLANGUAGE: logtalk\nCODE:\n```\n:- object(my_random_generator_1,\n    extends(random)).\n\n    :- initialization(::reset_seed).\n\n:- end_object.\n```\n\n----------------------------------------\n\nTITLE: Loading Recorded Database Library in Logtalk\nDESCRIPTION: Command to load all entities in the recorded_database library using the loader.lgt file.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/libraries/recorded_database.rst#2025-04-06_snippet_0\n\nLANGUAGE: logtalk\nCODE:\n```\n| ?- logtalk_load(recorded_database(loader)).\n```\n\n----------------------------------------\n\nTITLE: Loading Logtalk Help Module\nDESCRIPTION: Command to load the Logtalk help module at the interpreter, providing access to built-in documentation.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/QUICK_START.md#2025-04-06_snippet_0\n\nLANGUAGE: prolog\nCODE:\n```\n{help(loader)}\n```\n\n----------------------------------------\n\nTITLE: Declaring Synchronized Predicates and Non-terminals in Logtalk\nDESCRIPTION: This snippet shows the syntax for declaring synchronized predicates and grammar rule non-terminals. It supports single predicates, multiple predicates in a tuple or list, and both predicate and non-terminal notations.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/refman/directives/synchronized_1.rst#2025-04-06_snippet_0\n\nLANGUAGE: Logtalk\nCODE:\n```\nsynchronized(Name/Arity)\nsynchronized((Name/Arity, ...))\nsynchronized([Name/Arity, ...])\n\nsynchronized(Name//Arity)\nsynchronized((Name//Arity, ...))\nsynchronized([Name//Arity, ...])\n```\n\n----------------------------------------\n\nTITLE: Using Hook Objects in Logtalk\nDESCRIPTION: Example of loading a source file with a hook object specified as a compiler flag option, allowing customized term and goal expansion during compilation.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/userman/expansion.rst#2025-04-06_snippet_6\n\nLANGUAGE: text\nCODE:\n```\n| ?- logtalk_load(source_file, [hook(hook_object)]).\n...\n```\n\n----------------------------------------\n\nTITLE: Calling Generated Object Predicates in Logtalk\nDESCRIPTION: Demonstrates how to call one of the generated predicates from the zipper object using the context switching call operator (<<)/2.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/wrappers/NOTES.md#2025-04-06_snippet_3\n\nLANGUAGE: logtalk\nCODE:\n```\nzipper<<(zipper(3, [1,2,3,4,5], Zip, X), next(Zip, Next)).\n```\n\n----------------------------------------\n\nTITLE: Loading and Generating Diagram for Wrapped Prolog Code\nDESCRIPTION: Example of loading a wrapped Prolog file and generating its cross-reference diagram using the object_wrapper_hook.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/devtools/diagrams.rst#2025-04-06_snippet_11\n\nLANGUAGE: prolog\nCODE:\n```\n| ?- logtalk_load(code),\n     xref_diagram::entity(code).\n```\n\nLANGUAGE: prolog\nCODE:\n```\n| ?- logtalk_load(hook_objects(loader)).\n...\n\n| ?- logtalk_load(code, [hook(object_wrapper_hook)]),\n     xref_diagram::entity(code).\n```\n\n----------------------------------------\n\nTITLE: Temporal Meets Relation\nDESCRIPTION: Checks if Interval1 meets Interval2. Returns zero or one solutions.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/intervalp_0.rst.txt#2025-04-06_snippet_4\n\nLANGUAGE: Logtalk\nCODE:\n```\nmeets(Interval1,Interval2)\n```\n\n----------------------------------------\n\nTITLE: Conditional Goal Execution in Logtalk\nDESCRIPTION: The when/2 predicate calls Goal when Condition becomes true. Portable conditions include nonvar/1, ground/1, (,)/2, and (;)/2.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/coroutining_0.rst.txt#2025-04-06_snippet_4\n\nLANGUAGE: Logtalk\nCODE:\n```\nwhen(Condition,Goal)\n```\n\n----------------------------------------\n\nTITLE: Simple Binary Input Assertion in Logtalk\nDESCRIPTION: Returns an assertion for checking that the temporary file being read has the expected binary contents. Uses a default file without requiring an explicit alias.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/lgtunit_0.rst.txt#2025-04-06_snippet_39\n\nLANGUAGE: logtalk\nCODE:\n```\nbinary_input_assertion(Bytes,Assertion)\n```\n\n----------------------------------------\n\nTITLE: Running Logtalk Container with Volume Mount\nDESCRIPTION: Command to run a Logtalk container with a mounted project directory from the host system.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/scripts/docker/swi-prolog/README.md#2025-04-06_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -it --name logtalk_latest -v $(HOME)/project:/source \"logtalk/logtalk3-swi:latest\"\n```\n\n----------------------------------------\n\nTITLE: Defining forward/1 Method Signature in Logtalk\nDESCRIPTION: Defines the signature of the forward/1 method, which takes a Message argument. This method is automatically called by the runtime when defined to handle unknown messages sent to an object.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/refman/methods/forward_1.rst.txt#2025-04-06_snippet_0\n\nLANGUAGE: Logtalk\nCODE:\n```\nforward(Message)\n```\n\n----------------------------------------\n\nTITLE: Defining expand_term/2 Method Signature in Logtalk\nDESCRIPTION: Defines the signature of the expand_term/2 method, which takes a Term and returns its Expansion. This method is used to expand terms, commonly for expanding grammar rules into clauses.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/refman/methods/expand_term_2.rst.txt#2025-04-06_snippet_0\n\nLANGUAGE: Logtalk\nCODE:\n```\nexpand_term(Term, Expansion)\n```\n\n----------------------------------------\n\nTITLE: Defining phrase/2 Method Syntax in Logtalk\nDESCRIPTION: Shows the different syntactic forms of the phrase/2 method for parsing a list of tokens using grammar rules. The method can be called with a grammar rule body and input list, with a non-terminal in the scope of self, or with a non-terminal from an explicit object.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/refman/methods/phrase_2.rst.txt#2025-04-06_snippet_0\n\nLANGUAGE: logtalk\nCODE:\n```\nphrase(GrammarRuleBody, Input)\nphrase(::GrammarRuleBody, Input)\nphrase(Object::GrammarRuleBody, Input)\n```\n\n----------------------------------------\n\nTITLE: Defining a Trace Event Handler in Logtalk\nDESCRIPTION: Illustrates how to define a trace event handler by creating clauses for the logtalk::trace_event/2 multifile predicate. This enables custom handling of specific trace events without implementing a full debug handler.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/userman/debugging.rst.txt#2025-04-06_snippet_35\n\nLANGUAGE: prolog\nCODE:\n```\n:- multifile(logtalk::trace_event/2).\n:- dynamic(logtalk::trace_event/2).\n\n% the Logtalk runtime calls all defined logtalk::trace_event/2 hooks using\n% a failure-driven loop; thus we don't have to worry about handling all\n% events or failing after handling an event to give other hooks a chance\nlogtalk::trace_event(fact(Entity, Fact, N, _, _), _) :-\n    ...\nlogtalk::trace_event(rule(Entity, Head, N, _, _), _) :-\n    ...\n```\n\n----------------------------------------\n\nTITLE: Set Random Seed Predicate in Logtalk\nDESCRIPTION: Predicate to set the random generator seed to a specified value previously obtained from get_seed/1. This predicate is synchronized when compiled with thread support.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/pseudo_random_protocol_0.rst.txt#2025-04-06_snippet_1\n\nLANGUAGE: logtalk\nCODE:\n```\nset_seed(Seed)\n```\n\n----------------------------------------\n\nTITLE: Generating JSON in Logtalk\nDESCRIPTION: Generates JSON content from a Logtalk term, outputting to various formats including code lists, streams, files, character lists, or atoms. Fails if the term cannot be processed into JSON.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/json_protocol_0.rst.txt#2025-04-06_snippet_1\n\nLANGUAGE: Logtalk\nCODE:\n```\ngenerate(Sink,Term)\n```\n\n----------------------------------------\n\nTITLE: After Event Handler Protocol in Logtalk\nDESCRIPTION: Defines the after/3 predicate template for handling after events. This handler is called after message processing and can prevent method success by failing.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/monitoring_0.rst.txt#2025-04-06_snippet_1\n\nLANGUAGE: logtalk\nCODE:\n```\nafter(Object,Message,Sender)\n```\n\n----------------------------------------\n\nTITLE: Writing TSV Data to File in Logtalk\nDESCRIPTION: Demonstrates how to write TSV data from a predicate to a file using the tsv::write_file/3 predicate.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/libraries/tsv.rst.txt#2025-04-06_snippet_4\n\nLANGUAGE: Logtalk\nCODE:\n```\n| ?- tsv::write_file('output.tsv', user, p/3).\nyes\n```\n\n----------------------------------------\n\nTITLE: Debugging Tests with Context Switching Calls\nDESCRIPTION: Shows an alternative approach to debug tests using the context switching call operator (<<)/2, which is useful when tests are not compiled with the hook/1 option.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/devtools/lgtunit.rst.txt#2025-04-06_snippet_36\n\nLANGUAGE: logtalk\nCODE:\n```\n| ?- logtalk_load(debugger(loader)).\n...\n\n| ?- debugger::trace.\n...\n\n| ?- tests<<test(test_foo).\n...\n```\n\n----------------------------------------\n\nTITLE: Testing Assertions Tool in Logtalk\nDESCRIPTION: Query to load the tester file for the assertions tool. This is used to run tests on the assertions functionality.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/tools/assertions/NOTES.md#2025-04-06_snippet_1\n\nLANGUAGE: Logtalk\nCODE:\n```\n| ?- logtalk_load(assertions(tester)).\n```\n\n----------------------------------------\n\nTITLE: Predicate Documentation Using info/2 Directive in Logtalk\nDESCRIPTION: Example of documenting a predicate using the info/2 directive to specify metadata like comments, argument names, constraints and usage examples for a color/1 predicate.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/userman/documenting.rst#2025-04-06_snippet_1\n\nLANGUAGE: logtalk\nCODE:\n```\n:- info(color/1, [\n    comment is 'Table of defined colors.',\n    argnames is ['Color'],\n    constraint is 'Up to four visible colors allowed.',\n    examples is [\n       'Check that the color blue is defined' - color(blue) - {true}\n    ]\n]).\n```\n\n----------------------------------------\n\nTITLE: Extending HTML5 Object with Custom Elements\nDESCRIPTION: Shows how to create a custom object that extends the html5 object to support custom HTML elements.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/libraries/html.rst.txt#2025-04-06_snippet_11\n\nLANGUAGE: prolog\nCODE:\n```\n:- object(html5custom,\n    extends(html5)).\n\n    normal_element(foo, inline).\n    normal_element(bar, block).\n    normal_element(Name, Display) :-\n        ^^normal_element(Name, Display).\n\n:- end_object.\n```\n\n----------------------------------------\n\nTITLE: Conditional Operations on Expected Terms in Logtalk\nDESCRIPTION: Predicates for performing different operations based on the state of the expected term, such as applying different closures or returning default values.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/expected_1.rst.txt#2025-04-06_snippet_4\n\nLANGUAGE: Logtalk\nCODE:\n```\neither(ExpectedClosure,UnexpectedClosure,NewExpected)\n\nor_else(Value,Default)\n\nor_else_get(Value,Closure)\n\nor_else_call(Value,Goal)\n\nor_else_throw(Value)\n\nor_else_fail(Value)\n```\n\n----------------------------------------\n\nTITLE: Defining UUID Object with Representation Parameter\nDESCRIPTION: Defines a UUID object that takes a Representation parameter which can be 'atom', 'chars', or 'codes' to determine the text representation format of generated UUIDs.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/uuid_1.rst.txt#2025-04-06_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n``uuid(Representation)``\n```\n\n----------------------------------------\n\nTITLE: Generating Allure Report with Backend and Version in PowerShell\nDESCRIPTION: Demonstrates how to generate an Allure report using the logtalk_allure_report script in PowerShell, specifying the backend and version.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/devtools/lgtunit.rst.txt#2025-04-06_snippet_45\n\nLANGUAGE: powershell\nCODE:\n```\nPS> logtalk_allure_report -e \"Backend='GNU Prolog',Version=1.5.0\"\n```\n\n----------------------------------------\n\nTITLE: Enumerating All Recipes Using Abstraction Predicate\nDESCRIPTION: Uses the recipe/1 abstraction predicate to enumerate all recipes regardless of their internal representation (object or fact-based).\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/recipes/NOTES.md#2025-04-06_snippet_10\n\nLANGUAGE: logtalk\nCODE:\n```\n%%table\nrecipe(Recipe).\n```\n\n----------------------------------------\n\nTITLE: Printing Version Information in Logtalk\nDESCRIPTION: Prints the versions of Logtalk, Prolog backend, and kernel when running in a notebook environment.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/roots/NOTES.md#2025-04-06_snippet_0\n\nLANGUAGE: logtalk\nCODE:\n```\n%versions\n```\n\n----------------------------------------\n\nTITLE: Private Directive Templates and Modes in Logtalk\nDESCRIPTION: Shows the template and mode specifications for the private/1 directive when used with predicates, non-terminals, and operators. The + signs indicate input arguments.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/refman/directives/private_1.rst.txt#2025-04-06_snippet_1\n\nLANGUAGE: prolog\nCODE:\n```\nprivate(+predicate_indicator_term)\nprivate(+non_terminal_indicator_term)\nprivate(+operator_declaration)\n```\n\n----------------------------------------\n\nTITLE: Call Patched Bird Sound Method\nDESCRIPTION: Demonstrates calling the patched make_sound/0 predicate after applying the around method, which adds behavior before and after the original implementation.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/around_methods/NOTES.md#2025-04-06_snippet_4\n\nLANGUAGE: logtalk\nCODE:\n```\nbird::make_sound.\n```\n\n----------------------------------------\n\nTITLE: Using Integer Mutation Examples in Logtalk\nDESCRIPTION: Examples of using the type::mutation/3 predicate to generate mutations of an integer value. The predicate randomly selects from available mutation algorithms for the integer type.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/libraries/mutations.rst#2025-04-06_snippet_2\n\nLANGUAGE: logtalk\nCODE:\n```\n| ?- type::mutation(integer, 123, M).\nM = 1293\nyes\n\n| type::mutation(integer, 123, M).\nM = 5123\nyes\n\n| type::mutation(integer, 123, M).\nM = -123\nyes\n\n| type::mutation(integer, 123, M).\nM = 23\nyes\n```\n\n----------------------------------------\n\nTITLE: List Manipulation Predicate Declarations - Logtalk\nDESCRIPTION: Core predicate declarations for list operations like append, delete, and empty checking. These predicates form the foundation for working with variable lists.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/varlistp_0.rst.txt#2025-04-06_snippet_0\n\nLANGUAGE: logtalk\nCODE:\n```\nappend(?list,?list,?list)\ndelete(@list,@term,?list)\nempty(@list)\n```\n\n----------------------------------------\n\nTITLE: Dictionary Key Lookup\nDESCRIPTION: Looks up a chain of keys in a nested dictionary. When Keys is empty, unifies Value with Dictionary.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/nested_dictionary_protocol_0.rst.txt#2025-04-06_snippet_4\n\nLANGUAGE: logtalk\nCODE:\n```\nlookup_in(Keys,Value,Dictionary)\n```\n\n----------------------------------------\n\nTITLE: Creating and Playing a Magic Maze Game\nDESCRIPTION: Creates a new instance of a magic maze game and invokes its play method. This demonstrates the factory method creating magic rooms instead of ordinary ones.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/design_patterns/creational/factory_method/NOTES.md#2025-04-06_snippet_2\n\nLANGUAGE: logtalk\nCODE:\n```\nmagic_maze_game::new(Game), Game::play.\n```\n\n----------------------------------------\n\nTITLE: Using Integer Mutations in Logtalk\nDESCRIPTION: Examples of using the type::mutation/3 predicate to generate different mutations of an integer value. Shows various mutation results for the integer 123.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/libraries/mutations.rst.txt#2025-04-06_snippet_2\n\nLANGUAGE: logtalk\nCODE:\n```\n| ?- type::mutation(integer, 123, M).\nM = 1293\nyes\n\n| type::mutation(integer, 123, M).\nM = 5123\nyes\n\n| type::mutation(integer, 123, M).\nM = -123\nyes\n\n| type::mutation(integer, 123, M).\nM = 23\nyes\n```\n\n----------------------------------------\n\nTITLE: Constructing a Reverse-Ordered List with EDCG\nDESCRIPTION: Uses the list_constructors object to create a reverse-ordered list from N to 1 (where N=7), with an empty list as the tail.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/edcgs/NOTES.md#2025-04-06_snippet_3\n\nLANGUAGE: logtalk\nCODE:\n```\nlist_constructors::rlist(7, L, []).\n```\n\n----------------------------------------\n\nTITLE: Using Integer Mutation Examples in Logtalk\nDESCRIPTION: Examples of using the type::mutation/3 predicate to generate mutations of an integer value. The predicate randomly selects from available mutation algorithms for the integer type.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/libraries/mutations.rst#2025-04-06_snippet_2\n\nLANGUAGE: logtalk\nCODE:\n```\n| ?- type::mutation(integer, 123, M).\nM = 1293\nyes\n\n| type::mutation(integer, 123, M).\nM = 5123\nyes\n\n| type::mutation(integer, 123, M).\nM = -123\nyes\n\n| type::mutation(integer, 123, M).\nM = 23\nyes\n```\n\n----------------------------------------\n\nTITLE: Generating a Character Code List Identifier\nDESCRIPTION: Example of generating a random identifier as a list of character codes with 64 bits (8 bytes) of randomness.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/libraries/ids.rst#2025-04-06_snippet_5\n\nLANGUAGE: logtalk\nCODE:\n```\n| ?- ids(codes, 8)::generate(Identifier).\nIdentifier = [111,81,86,55,99,79,70,77,65,74,103,61]\nyes\n```\n\n----------------------------------------\n\nTITLE: Temporal Before Relation\nDESCRIPTION: Checks if Interval1 takes place before Interval2. Returns zero or one solutions.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/intervalp_0.rst.txt#2025-04-06_snippet_2\n\nLANGUAGE: Logtalk\nCODE:\n```\nbefore(Interval1,Interval2)\n```\n\n----------------------------------------\n\nTITLE: Checking Class Instances and Metaclass\nDESCRIPTION: Retrieves the instances of the class object and checks its metaclass.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/reflection/NOTES.md#2025-04-06_snippet_3\n\nLANGUAGE: logtalk\nCODE:\n```\nclass::instances(Instances), class::metaclass.\n```\n\n----------------------------------------\n\nTITLE: Summing List Elements with EDCG\nDESCRIPTION: Uses the list_sums object to calculate the sum of all elements in a given list.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/edcgs/NOTES.md#2025-04-06_snippet_5\n\nLANGUAGE: logtalk\nCODE:\n```\nlist_sums::sum([2,2,3], Sum).\n```\n\n----------------------------------------\n\nTITLE: Short Form Pass Info Declaration\nDESCRIPTION: Dynamic predicate for declaring passed arguments without start value.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/edcg_0.rst.txt#2025-04-06_snippet_4\n\nLANGUAGE: Logtalk\nCODE:\n```\npass_info(?atom)\n```\n\n----------------------------------------\n\nTITLE: Optional Term Status Check Predicates\nDESCRIPTION: Core predicates for checking if an optional term is empty or present\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/optional_1.rst.txt#2025-04-06_snippet_0\n\nLANGUAGE: logtalk\nCODE:\n```\nis_empty/0\nis_present/0\n```\n\n----------------------------------------\n\nTITLE: Wrapping Plain Prolog Code in a Logtalk Object\nDESCRIPTION: This snippet shows how to wrap plain Prolog code in a Logtalk object for analysis with the dead_code_scanner tool. It defines an object that includes the Prolog file.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/devtools/dead_code_scanner.rst#2025-04-06_snippet_6\n\nLANGUAGE: logtalk\nCODE:\n```\n:- object(code).\n    :- include('code.pl').\n:- end_object.\n```\n\n----------------------------------------\n\nTITLE: Generating Parse Trees for Sentences with DCG in Logtalk\nDESCRIPTION: Uses the parsetree object to generate a parse tree for a sentence using DCG rules.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/dcgs/NOTES.md#2025-04-06_snippet_6\n\nLANGUAGE: logtalk\nCODE:\n```\nparsetree::parse([the, girl, likes, the, boy], Tree).\n```\n\n----------------------------------------\n\nTITLE: Running the Ping-Pong Game with One Exchange\nDESCRIPTION: Executes the ping_pong game with one exchange between players. Each player runs in a separate thread and communicates via threaded notifications.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/threads/ping_pong/NOTES.md#2025-04-06_snippet_2\n\nLANGUAGE: logtalk\nCODE:\n```\nping_pong::play(1).\n```\n\n----------------------------------------\n\nTITLE: Using Prolog's maplist/2 to Check Integer List in Logtalk\nDESCRIPTION: Demonstrates the use of the Prolog backend's maplist/2 predicate to check a list of integers within a Logtalk object.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/symbiosis/NOTES.md#2025-04-06_snippet_1\n\nLANGUAGE: logtalk\nCODE:\n```\nsymbiosis::p.\n```\n\n----------------------------------------\n\nTITLE: Benchmarking a Logtalk Message Send Operation\nDESCRIPTION: Example of benchmarking a Logtalk message send operation to measure its performance, specifically calling the length method on a list object.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/userman/messages.rst.txt#2025-04-06_snippet_12\n\nLANGUAGE: text\nCODE:\n```\n| ?- benchmark(list::length([1,2,3,4,5,6,7,8,9,0], _)).\n```\n\n----------------------------------------\n\nTITLE: Meta Non-Terminal Template Modes\nDESCRIPTION: Specifies the mode declarations for meta non-terminal templates, showing the expected argument types and their directionality.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/refman/directives/meta_non_terminal_1.rst.txt#2025-04-06_snippet_1\n\nLANGUAGE: logtalk\nCODE:\n```\nmeta_non_terminal(+meta_non_terminal_template_term)\n\nmeta_non_terminal(+object_identifier::+meta_non_terminal_template_term)\nmeta_non_terminal(+category_identifier::+meta_non_terminal_template_term)\n\nmeta_non_terminal(+module_identifier:+meta_non_terminal_template_term)\n```\n\n----------------------------------------\n\nTITLE: Solving Number Puzzle\nDESCRIPTION: Solves a numeric puzzle using CLP(FD) constraints\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/constraints/yap/NOTES.md#2025-04-06_snippet_1\n\nLANGUAGE: logtalk\nCODE:\n```\npuzzle::solve(Sum=Rs), label(Rs).\n```\n\n----------------------------------------\n\nTITLE: Retrieving All Class Descendant Subclasses in Logtalk\nDESCRIPTION: Predicate that returns all class descendant subclasses through backtracking. Takes a single parameter Descendant which can be instantiated or a variable to be bound to descendant subclass objects.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/class_hierarchyp_0.rst.txt#2025-04-06_snippet_14\n\nLANGUAGE: logtalk\nCODE:\n```\ndescendant_class(Descendant)\n```\n\n----------------------------------------\n\nTITLE: Specifying Modes and Proofs for phrase/2 in Logtalk\nDESCRIPTION: Defines the input/output modes and number of proofs for the phrase/2 method.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/refman/methods/phrase_2.rst#2025-04-06_snippet_2\n\nLANGUAGE: Logtalk\nCODE:\n```\nphrase(+callable, ?list) - zero_or_more\n```\n\n----------------------------------------\n\nTITLE: Delegating Message to Object\nDESCRIPTION: Syntax for delegating a message while preserving sender context using square brackets.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/userman/messages.rst.txt#2025-04-06_snippet_2\n\nLANGUAGE: logtalk\nCODE:\n```\n..., [Object::Message], ....\n```\n\n----------------------------------------\n\nTITLE: Debugging object::sum/2 predicate with type error\nDESCRIPTION: This snippet demonstrates debugging the sum/2 predicate with a non-number argument, resulting in a type error.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/debug_hooks/NOTES.md#2025-04-06_snippet_4\n\nLANGUAGE: logtalk\nCODE:\n```\nobject::sum([1,2,3,a], Sum).\n```\n\n----------------------------------------\n\nTITLE: Checking Logtalk and Prolog Version Information\nDESCRIPTION: Prints the versions of Logtalk, the Prolog backend, and the kernel when running in a Jupyter notebook environment.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/module_aliases/NOTES.md#2025-04-06_snippet_0\n\nLANGUAGE: logtalk\nCODE:\n```\n%versions\n```\n\n----------------------------------------\n\nTITLE: Installing a Pack with GitHub Authentication in Logtalk\nDESCRIPTION: Example showing how to install a pack while passing GitHub authentication tokens to curl via command-line options.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/tools/packs/NOTES.md#2025-04-06_snippet_23\n\nLANGUAGE: prolog\nCODE:\n```\n| ?- packs::install(reg, bar, 1:1:2, [curl('--header \"Authorization: token foo42\"')]).\n```\n\n----------------------------------------\n\nTITLE: Converting XML Documentation to Sphinx Format in Bash\nDESCRIPTION: Bash commands to convert Logtalk documentation to reStructuredText format for Sphinx and build the HTML documentation, specifying project name, author, and version information.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/devtools/lgtdoc.rst#2025-04-06_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n$ cd xml_docs\n$ lgt2rst -s -- -q -p \"Application name\" -a \"Author name\" -v \"Version X.YZ.P\"\n$ make html\n```\n\n----------------------------------------\n\nTITLE: Expanding Grammar Rules in Logtalk\nDESCRIPTION: Example of using expand_term/2 to explicitly transform a grammar rule into a predicate clause, showing the default DCG translation mechanism.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/userman/expansion.rst#2025-04-06_snippet_4\n\nLANGUAGE: text\nCODE:\n```\n| ?- logtalk::expand_term((a --> b, c), Clause).\n\nClause = (a(A,B) :- b(A,C), c(C,B))\nyes\n```\n\n----------------------------------------\n\nTITLE: Abolishing Events in Logtalk\nDESCRIPTION: Uses the abolish_events/5 predicate to remove defined events. If called with free variables, it removes all matching events.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/userman/events.rst#2025-04-06_snippet_2\n\nLANGUAGE: text\nCODE:\n```\n| ?- abolish_events(Event, Object, Message, Sender, Monitor).\n```\n\n----------------------------------------\n\nTITLE: Defining info/2 Directive Syntax\nDESCRIPTION: Shows the basic syntax patterns for the info/2 directive for both predicates and grammar rule non-terminals. The directive takes a predicate/non-terminal indicator and a list of key-value documentation pairs.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/refman/directives/info_2.rst.txt#2025-04-06_snippet_0\n\nLANGUAGE: logtalk\nCODE:\n```\ninfo(Name/Arity, [Key is Value, ...])\ninfo(Name//Arity, [Key is Value, ...])\n```\n\n----------------------------------------\n\nTITLE: Instrumenting Source Code with the Profiler\nDESCRIPTION: Demonstrates how to use the profiler to load and instrument a source file for profiling.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/tools/profiler/SCRIPT.txt#2025-04-06_snippet_1\n\nLANGUAGE: logtalk\nCODE:\n```\n| ?- profiler::load(searching(loader)).\n```\n\n----------------------------------------\n\nTITLE: Checking Option Validity in Logtalk\nDESCRIPTION: The check_option/1 predicate validates if a given option is valid, throwing appropriate errors for invalid inputs. It requires the option to be instantiated and a proper compound term.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/options_protocol_0.rst.txt#2025-04-06_snippet_0\n\nLANGUAGE: prolog\nCODE:\n```\ncheck_option(Option)\n```\n\n----------------------------------------\n\nTITLE: Example Object Definitions in Logtalk\nDESCRIPTION: Practical examples of object definitions including list objects, class instances, and objects with imports.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/refman/directives/object_1_5.rst.txt#2025-04-06_snippet_4\n\nLANGUAGE: logtalk\nCODE:\n```\n:- object(list).\n\n:- object(list,\n    implements(listp)).\n\n:- object(list,\n    extends(compound)).\n\n:- object(list,\n    implements(listp),\n    extends(compound)).\n\n:- object(object,\n    imports(initialization),\n    instantiates(class)).\n\n:- object(abstract_class,\n    instantiates(class),\n    specializes(object)).\n\n:- object(agent,\n    imports(private::attributes)).\n```\n\n----------------------------------------\n\nTITLE: Defining Registry Home URL in Logtalk\nDESCRIPTION: Specifies the registry home URL predicate. It should return an HTTPS or file URL as an atom.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/registry_protocol_0.rst.txt#2025-04-06_snippet_2\n\nLANGUAGE: Logtalk\nCODE:\n```\nhome(Home)\n```\n\n----------------------------------------\n\nTITLE: Setting Leashed Ports in Logtalk Debugger\nDESCRIPTION: Defines for which ports the debugger should pause for user interaction by specifying a list of leashed ports.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/userman/debugging.rst.txt#2025-04-06_snippet_5\n\nLANGUAGE: prolog\nCODE:\n```\n| ?- debugger::leash([call, exit, fail]).\n```\n\n----------------------------------------\n\nTITLE: Loading the Intervals Library in Logtalk\nDESCRIPTION: Command to load all entities in the intervals library using the loader.lgt file. This makes the intervalp protocol and interval object available for use in temporal reasoning applications.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/libraries/intervals.rst#2025-04-06_snippet_0\n\nLANGUAGE: logtalk\nCODE:\n```\n| ?- logtalk_load(intervals(loader)).\n```\n\n----------------------------------------\n\nTITLE: Querying Abstract Class Ancestors\nDESCRIPTION: Retrieves the ancestor classes of the abstract_class metaclass.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/roots/NOTES.md#2025-04-06_snippet_2\n\nLANGUAGE: logtalk\nCODE:\n```\nabstract_class::ancestors(Ancestors).\n```\n\n----------------------------------------\n\nTITLE: Predicate Alias Example\nDESCRIPTION: Shows how to use predicate aliases to avoid naming conflicts between different modules.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/refman/directives/uses_2.rst.txt#2025-04-06_snippet_3\n\nLANGUAGE: logtalk\nCODE:\n```\n:- uses(btrees, [new/1 as new_btree/1]).\n:- uses(queues, [new/1 as new_queue/1]).\n\nbtree_to_queue :-\n    ...,\n    % the same as btrees::new(Tree)\n    new_btree(Tree),\n    % the same as queues::new(Queue)\n    new_queue(Queue),\n    ...\n```\n\n----------------------------------------\n\nTITLE: Retrieving Commit Log with Git Library in Logtalk\nDESCRIPTION: Demonstrates the usage of the commit_log/3 predicate to retrieve formatted git log information. It takes a directory path, format string, and returns the formatted output.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/libraries/git.rst#2025-04-06_snippet_2\n\nLANGUAGE: prolog\nCODE:\n```\n| ?- git::commit_log('/Users/pmoura/logtalk3', '%h%n%B', Output),\n        write(Output), nl.\n\neccaa1a2a\nUpdate SVG diagrams\n\nOutput = 'eccaa1a2a\\nUpdate SVG diagrams\\n'\nyes\n```\n\n----------------------------------------\n\nTITLE: Defining User-Defined Test Dialects in Logtalk\nDESCRIPTION: This Logtalk code shows how to create a custom test dialect by extending the lgtunit object and using term expansion.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/tools/lgtunit/NOTES.md#2025-04-06_snippet_7\n\nLANGUAGE: Logtalk\nCODE:\n```\n:- object(simple_dialect,\n\timplements(expanding)).\n\n\tterm_expansion(begin_of_file, [(:- object(tests,extends(lgtunit)))]).\n\tterm_expansion((Head :- Body), [test(Head) :- Body]).\n\tterm_expansion(end_of_file, [(:- end_object)]).\n\n:- end_object.\n```\n\n----------------------------------------\n\nTITLE: Defining Grammar Rules for Determiners in Logtalk\nDESCRIPTION: Example of a category containing grammar rules for parsing determiners, demonstrating rule encapsulation.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/userman/predicates.rst#2025-04-06_snippet_42\n\nLANGUAGE: logtalk\nCODE:\n```\n:- category(determiners).\n\n    :- private(determiner//0).\n\n    determiner --> [the].\n    determiner --> [a].\n\n:- end_category.\n```\n\n----------------------------------------\n\nTITLE: Writing CSV File from Predicate in Logtalk\nDESCRIPTION: Shows how to write CSV data from a predicate to a file, with options to preserve or add quotes around fields.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/library/csv/NOTES.md#2025-04-06_snippet_5\n\nLANGUAGE: Logtalk\nCODE:\n```\n| ?- csv(keep, comma, true)::write_file('output.csv', user, p/3).\nyes\n```\n\nLANGUAGE: Logtalk\nCODE:\n```\n| ?- csv(keep, comma, false)::write_file('output.csv', user, p/3).\nyes\n```\n\n----------------------------------------\n\nTITLE: Converting Between ISO 8601 Date Strings and Components in Logtalk\nDESCRIPTION: The date_string/3 predicate converts between ISO 8601 compliant date strings and their components. It supports various date formats including complete, reduced, and ordinal representations. The predicate handles both string-to-component and component-to-string conversions.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/iso8601_0.rst.txt#2025-04-06_snippet_4\n\nLANGUAGE: Logtalk\nCODE:\n```\ndate_string(Format,Components,String)\n```\n\n----------------------------------------\n\nTITLE: Dictionary Lookup Operation in Logtalk\nDESCRIPTION: Performs a lookup operation on the dictionary to retrieve a value by key.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/units/NOTES.md#2025-04-06_snippet_3\n\nLANGUAGE: logtalk\nCODE:\n```\ndict([a=1,b=2,c=3,d=4,e=5])::lookup(c, C).\n```\n\n----------------------------------------\n\nTITLE: Learning String Manipulation with Metagol in Logtalk\nDESCRIPTION: This example shows Metagol learning a predicate 'f/2' for string manipulation, involving operations like next_empty, write1, copy1, and skip1.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/ports/metagol/SCRIPT.txt#2025-04-06_snippet_6\n\nLANGUAGE: Logtalk\nCODE:\n```\n| ?- strings2::learn.\n\n% learning f/2\n% clauses: 1\n% clauses: 2\n% clauses: 3\n% clauses: 4\n% clauses: 5\nf(A,B):-f_1(A,C),f_2(C,B).\nf_1(A,B):-next_empty(A),f_2(A,B).\nf_1(A,B):-f_2(A,C),f_1(C,B).\nf_2(A,B):-write1(A,B,d).\nf_2(A,B):-copy1(A,C),skip1(C,B).\nyes\n```\n\n----------------------------------------\n\nTITLE: Declaring Module Aliases in Logtalk\nDESCRIPTION: This snippet demonstrates the syntax for using the use_module/1 directive to declare module aliases. It allows for shortening long module names and simplifying the use of different module implementations.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/refman/directives/use_module_1.rst.txt#2025-04-06_snippet_0\n\nLANGUAGE: Logtalk\nCODE:\n```\nuse_module([Module as Alias, ...])\n```\n\n----------------------------------------\n\nTITLE: Using Test Annotations in Logtalk\nDESCRIPTION: Demonstrates how to add annotations to tests using the note/1 option.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/devtools/lgtunit.rst.txt#2025-04-06_snippet_25\n\nLANGUAGE: logtalk\nCODE:\n```\ntest(foo_1, true, [note('Waiting for Deep Thought answer')]) :-\n       ...\n\ntest(foobar, true, [note(bar(seconds-Time))]) :-\n       foo(...),\n       benchmark(bar(...), Time).\n```\n\n----------------------------------------\n\nTITLE: Defining abolish_protocol/1 Predicate in Prolog\nDESCRIPTION: Specifies the signature and mode for the abolish_protocol/1 predicate, which takes a protocol identifier as an argument and has one proof.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/refman/predicates/abolish_protocol_1.rst#2025-04-06_snippet_0\n\nLANGUAGE: Prolog\nCODE:\n```\nabolish_protocol(@protocol_identifier) - one\n```\n\n----------------------------------------\n\nTITLE: Testing Incorrect Message Send\nDESCRIPTION: Demonstrates incorrect approach using message send that resets self to message receiver.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/super_calls/NOTES.md#2025-04-06_snippet_4\n\nLANGUAGE: logtalk\nCODE:\n```\nprototype::wrong(Local).\n```\n\n----------------------------------------\n\nTITLE: Loading Registry and Pack Objects in Logtalk\nDESCRIPTION: This snippet shows the contents of a loader.lgt file that loads the registry object and all pack objects for a Logtalk registry.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/tools/packs/NOTES.md#2025-04-06_snippet_14\n\nLANGUAGE: logtalk\nCODE:\n```\n:- initialization((\n\tlogtalk_load(jdoe_awesome_packs_registry),\n\tlogtalk_load(foo_pack),\n\tlogtalk_load(bar_pack),\n\t...\n)).\n```\n\n----------------------------------------\n\nTITLE: Enumerating Keys\nDESCRIPTION: The key/2 predicate enumerates all keys from a list of pairs through backtracking.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/pairs_0.rst.txt#2025-04-06_snippet_2\n\nLANGUAGE: logtalk\nCODE:\n```\nkey(Pairs,Key)\n```\n\n----------------------------------------\n\nTITLE: Loading Gensym Library in Logtalk\nDESCRIPTION: Command to load all entities in the gensym library using the loader file.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/library/gensym/NOTES.md#2025-04-06_snippet_0\n\nLANGUAGE: prolog\nCODE:\n```\n| ?- logtalk_load(gensym(loader)).\n```\n\n----------------------------------------\n\nTITLE: Example Usage of ask_question/5 in Logtalk\nDESCRIPTION: Demonstrates how to use the ask_question/5 method to prompt for a user's age, specifying the question type, component, and validation check (integer).\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/refman/methods/ask_question_5.rst.txt#2025-04-06_snippet_3\n\nLANGUAGE: Logtalk\nCODE:\n```\n...,\nlogtalk::ask_question(enter_age, question, my_app, integer, Age),\n...\n```\n\n----------------------------------------\n\nTITLE: Prolog Module Example\nDESCRIPTION: Example of compiling Prolog module as a Logtalk object with SICStus Prolog's is/2 predicate directives.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/RELEASE_NOTES.md#2025-04-06_snippet_50\n\nLANGUAGE: prolog\nCODE:\n```\nis/2\n```\n\n----------------------------------------\n\nTITLE: Using the ids(Representation,Bytes) generate/1 Predicate in Logtalk\nDESCRIPTION: Definition of the generate/1 predicate which creates a random identifier. The predicate takes a single output parameter to receive the generated identifier. The format of the identifier depends on the Representation parameter (atom, chars, or codes) specified when creating the ids object.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/ids_2.rst.txt#2025-04-06_snippet_0\n\nLANGUAGE: logtalk\nCODE:\n```\ngenerate(Identifier)\n```\n\n----------------------------------------\n\nTITLE: Term Expansion Example with Entity Check\nDESCRIPTION: Shows how to use logtalk_load_context to expand source file terms only when processing entity terms.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/refman/predicates/logtalk_load_context_2.rst#2025-04-06_snippet_2\n\nLANGUAGE: logtalk\nCODE:\n```\nterm_expansion(Term, ExpandedTerms) :-\n    logtalk_load_context(entity_identifier, _),\n    ....\n```\n\n----------------------------------------\n\nTITLE: Threaded Engines List Computation\nDESCRIPTION: Demonstrates the same computation using threaded engines implementation for parallel processing.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/futures/NOTES.md#2025-04-06_snippet_3\n\nLANGUAGE: logtalk\nCODE:\n```\ninteger::sequence(1,100,List1), integer::sequence(101,200,List2), list_math::product_sum_engines(List1,List2,Result).\n```\n\n----------------------------------------\n\nTITLE: Custom HTML5 Elements Definition\nDESCRIPTION: Example of extending HTML5 object to support custom elements\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/libraries/html.rst#2025-04-06_snippet_10\n\nLANGUAGE: logtalk\nCODE:\n```\n:- object(html5custom,\n       extends(html5)).\n\n       normal_element(foo, inline).\n       normal_element(bar, block).\n       normal_element(Name, Display) :-\n           ^^normal_element(Name, Display).\n\n:- end_object.\n```\n\n----------------------------------------\n\nTITLE: Map-based Permutations Benchmark\nDESCRIPTION: Runs the map-based implementation of permutations algorithm with input size 7 and measures execution time.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/permutations/NOTES.md#2025-04-06_snippet_6\n\nLANGUAGE: logtalk\nCODE:\n```\ntime(permutations::map(7, _)).\n```\n\n----------------------------------------\n\nTITLE: Example Queries Using implements_protocol/2-3 in Logtalk\nDESCRIPTION: Provides example queries demonstrating how to use the implements_protocol/2-3 predicate to check protocol implementations and enumerate objects or categories implementing specific protocols.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/refman/predicates/implements_protocol_2_3.rst#2025-04-06_snippet_2\n\nLANGUAGE: Prolog\nCODE:\n```\n% check that the list object implements the listp protocol:\n| ?- implements_protocol(list, listp).\n\n% check that the list object publicly implements the listp protocol:\n| ?- implements_protocol(list, listp, public).\n\n% enumerate only objects that implement the listp protocol:\n| ?- current_object(Object), implements_protocol(Object, listp).\n\n% enumerate only categories that implement the serialization protocol:\n| ?- current_category(Category), implements_protocol(Category, serialization).\n```\n\n----------------------------------------\n\nTITLE: Houses Puzzle Zebra Query\nDESCRIPTION: Specific query to find the zebra owner in the houses puzzle\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/puzzles/NOTES.md#2025-04-06_snippet_7\n\nLANGUAGE: logtalk\nCODE:\n```\nhouses::zebra_owner(Owner).\n```\n\n----------------------------------------\n\nTITLE: Converting Java Array to Prolog Terms\nDESCRIPTION: Converts a Java array reference to a list of ground Prolog terms and returns its length. Useful for processing Java array data in Prolog.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/java_utils_protocol_0.rst.txt#2025-04-06_snippet_2\n\nLANGUAGE: Prolog\nCODE:\n```\narray_to_terms(Array, Terms, Length)\n```\n\n----------------------------------------\n\nTITLE: Example: Compiler-Specific Code in Logtalk\nDESCRIPTION: Shows how to use if/1 to conditionally include code specific to a particular Prolog backend (in this case, SWI-Prolog) by checking the prolog_dialect flag.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/refman/directives/if_1.rst#2025-04-06_snippet_3\n\nLANGUAGE: logtalk\nCODE:\n```\n:- if(current_logtalk_flag(prolog_dialect, swi)).\n\n    % SWI-Prolog specific code\n    :- set_prolog_flag(double_quotes, codes).\n\n:- endif.\n```\n\n----------------------------------------\n\nTITLE: Partition List - Logtalk Meta-Predicate\nDESCRIPTION: Partitions a list into two lists using a predicate. Takes closure predicate, input list, and returns included and excluded lists.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/metap_0.rst.txt#2025-04-06_snippet_4\n\nLANGUAGE: logtalk\nCODE:\n```\npartition(Closure,List,Included,Excluded)\n```\n\n----------------------------------------\n\nTITLE: Creating Optional Terms Example\nDESCRIPTION: Example showing how to create an optional term using the of/2 constructor predicate.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/library/optionals/NOTES.md#2025-04-06_snippet_2\n\nLANGUAGE: logtalk\nCODE:\n```\n| ?- optional::of(1, Optional).\n```\n\n----------------------------------------\n\nTITLE: Retracting local predicate and querying inherited predicate\nDESCRIPTION: Demonstrates that retracting the local definition in descendant object restores the inherited definition from root.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/dynpred/NOTES.md#2025-04-06_snippet_4\n\nLANGUAGE: logtalk\nCODE:\n```\ndescendant::(retractall(p(_)), p(Value)).\n```\n\n----------------------------------------\n\nTITLE: Using Super Calls for Category Predicates in Logtalk\nDESCRIPTION: Demonstrates how to make a direct call to a predicate defined in an imported category using the super call control construct.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/userman/categories.rst#2025-04-06_snippet_17\n\nLANGUAGE: Logtalk\nCODE:\n```\n:- object(worker,\n    imports(output)).\n\n    ...\n    do(Task) :-\n        execute(Task, Result),\n        ^^out(Result).\n    ...\n\n:- end_object.\n```\n\n----------------------------------------\n\nTITLE: Testing DCG Rules with phrase/2 in Logtalk\nDESCRIPTION: This snippet shows how to test the DCG rules defined in the 'calculator' object using the parse/2 predicate, which internally uses the phrase/2 built-in method.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/userman/predicates.rst#2025-04-06_snippet_39\n\nLANGUAGE: Logtalk\nCODE:\n```\n| ?- calculator::parse(\"1+2-3*4\", Result).\n\nResult = -9\nyes\n```\n\n----------------------------------------\n\nTITLE: Converting Assertion Failures to Errors in Logtalk\nDESCRIPTION: Definition of a category to convert assertion failures into runtime errors. This intercepts assertion failure messages and throws an error instead.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/tools/assertions/NOTES.md#2025-04-06_snippet_7\n\nLANGUAGE: Logtalk\nCODE:\n```\n:- category(assertions_failures_to_errors).\n\n\t:- multifile(logtalk::message_hook/4).\n\t:- dynamic(logtalk::message_hook/4).\n\n\tlogtalk::message_hook(Message, error, assertions, Tokens) :-\n\t\t% uncomment the next two lines to also print the default message\n\t\t% logtalk::message_prefix_stream(error, assertions, Prefix, Stream),\n\t\t% logtalk::print_message_tokens(Stream, Prefix, Tokens),\n\t\tthrow(error(Message, _)).\n\n:- end_category.\n```\n\n----------------------------------------\n\nTITLE: Creating and manipulating a simple point\nDESCRIPTION: Demonstrates creation of a simple point object, printing its position, moving it to a new position, and printing again.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/points/NOTES.md#2025-04-06_snippet_2\n\nLANGUAGE: logtalk\nCODE:\n```\npoint::new(Point, [position-(1, 3)]), Point::(print, move(7, 4), print).\n```\n\n----------------------------------------\n\nTITLE: Usage Examples of {}/1 Control Construct\nDESCRIPTION: Demonstrates various practical applications of the {}/1 control construct including operator overloading, closure calling, directive bypassing, and message sending.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/refman/control/external_call_1.rst#2025-04-06_snippet_2\n\nLANGUAGE: logtalk\nCODE:\n```\n% overload the standard (<)/2 operator by\n% calling its standard built-in definition:\nN1/D1 < N2/D2 :-\n    {N1*D2 < N2*D1}.\n\n% call a closure in the context of \"user\":\ncall_in_user(F, X, Y, Z) :-\n    call({F}, X, Y, Z).\n\n% bypass the compiler for a proprietary backend directive:\n{:- load_foreign_resource(file)}.\n\n% use parametric object proxies:\n| ?- {circle(Id, Radius, Color)}::area(Area).\n...\n\n% use Prolog built-in predicates as messages:\n| ?- logtalk::{write('hello world!'), nl}.\nhello world!\nyes\n```\n\n----------------------------------------\n\nTITLE: Incrementing a counter in Logtalk\nDESCRIPTION: Predicate that increments the value of a named counter by one. The counter must already exist as a non-variable term.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/counters_0.rst.txt#2025-04-06_snippet_1\n\nLANGUAGE: Logtalk\nCODE:\n```\nincrement_counter(Counter)\n```\n\n----------------------------------------\n\nTITLE: Defining Fixed Point Goal Expansion in Logtalk\nDESCRIPTION: Example of an object defining goal expansion rules that demonstrate the fixed point behavior of goal expansion to prevent infinite loops.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/userman/expansion.rst.txt#2025-04-06_snippet_1\n\nLANGUAGE: Logtalk\nCODE:\n```\n:- object(fixed_point,\n    implements(expanding)).\n\n    goal_expansion(a, b).\n    goal_expansion(b, c).\n    goal_expansion(c, (a -> b; c)).\n\n:- end_object.\n```\n\n----------------------------------------\n\nTITLE: Executing Split-Based Adaptive 4-Point Gaussian Integration with 8 Threads\nDESCRIPTION: Integrates the 'quiver' function using the split-based implementation of the adaptive 4-point Gaussian quadrature scheme with 8 threads from 0.001 to 0.999 with a specified error tolerance.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/threads/integration/NOTES.md#2025-04-06_snippet_4\n\nLANGUAGE: logtalk\nCODE:\n```\nquadsplit(8)::integrate(quiver, 0.001, 0.999, 4, 1.0e-10, Integral).\n```\n\n----------------------------------------\n\nTITLE: Finding Root Using Muller Method for Humps Function\nDESCRIPTION: Demonstrates using Muller's method to find the root of the humps function in the range [-1.0, 2.0] with a tolerance of 1.0e-15. This method successfully finds a root.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/threads/functions/NOTES.md#2025-04-06_snippet_9\n\nLANGUAGE: logtalk\nCODE:\n```\nmuller::find_root(humps, -1.0, 2.0, 1.0e-15, Zero).\n```\n\n----------------------------------------\n\nTITLE: Reading Binary Streams to Bytes in Logtalk\nDESCRIPTION: Reads a binary stream into a list of bytes. Takes a stream or alias as input and returns the stream contents as a list of bytes without closing the stream.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/reader_0.rst.txt#2025-04-06_snippet_14\n\nLANGUAGE: Logtalk\nCODE:\n```\nstream_to_bytes(Stream,Bytes)\n```\n\n----------------------------------------\n\nTITLE: Loading the Multi-Inheritance Example in Logtalk\nDESCRIPTION: Loads the multi-inheritance example using the loader file which contains all the necessary object definitions.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/mi/NOTES.md#2025-04-06_snippet_1\n\nLANGUAGE: logtalk\nCODE:\n```\nlogtalk_load(mi(loader)).\n```\n\n----------------------------------------\n\nTITLE: Type Checking with check/2 in Logtalk\nDESCRIPTION: Shows how to use the check/2 predicate from the 'type' object, which throws an exception if a term is not of the specified type. The example demonstrates checking for an integer type.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/libraries/types.rst.txt#2025-04-06_snippet_4\n\nLANGUAGE: prolog\nCODE:\n```\n| ?- catch(type::check(integer, abc), Error, true).\nError = type_error(integer, abc)\nyes\n```\n\n----------------------------------------\n\nTITLE: Completion Suggestion System\nDESCRIPTION: Predicates for providing completion suggestions and pairs for given prefixes to assist with command completion.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/help_0.rst.txt#2025-04-06_snippet_3\n\nLANGUAGE: logtalk\nCODE:\n```\ncompletion(Prefix,Completion)\ncompletions(Prefix,Completions)\n```\n\n----------------------------------------\n\nTITLE: Parsing Base64 Data in Logtalk\nDESCRIPTION: Parses Base64 data from various sources (atom, chars, codes, stream, or file) into a list of bytes. This predicate is compiled with the 'static' flag and expects a compound source and returns a list of bytes.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/base64_0.rst.txt#2025-04-06_snippet_0\n\nLANGUAGE: Logtalk\nCODE:\n```\nparse(Source,Bytes)\n```\n\n----------------------------------------\n\nTITLE: Domain Constraint with Atom Type\nDESCRIPTION: Example of using a finite domain constraint with atoms where the constraint fails because the unification value is not in the domain.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/attvars/NOTES.md#2025-04-06_snippet_2\n\nLANGUAGE: logtalk\nCODE:\n```\ndomain(atom)::domain(X, [a,b]), X = c.\n```\n\n----------------------------------------\n\nTITLE: Incrementing Counter\nDESCRIPTION: Increments the value of counter 'b'.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/includes/NOTES.md#2025-04-06_snippet_6\n\nLANGUAGE: logtalk\nCODE:\n```\ncounters::inc_counter(b).\n```\n\n----------------------------------------\n\nTITLE: Example Usage of create_logtalk_flag/3\nDESCRIPTION: Demonstrates how to create a new boolean flag named 'pretty_print_blobs' with a default value of false and an empty options list.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/refman/predicates/create_logtalk_flag_3.rst#2025-04-06_snippet_2\n\nLANGUAGE: prolog\nCODE:\n```\n% create a new boolean flag with default value set to false:\n| ?- create_logtalk_flag(pretty_print_blobs, false, []).\n```\n\n----------------------------------------\n\nTITLE: Prefix Checking in Logtalk\nDESCRIPTION: Checks if a list is a prefix of another list.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/listp_0.rst.txt#2025-04-06_snippet_6\n\nLANGUAGE: Logtalk\nCODE:\n```\nprefix(Prefix,List)\n```\n\n----------------------------------------\n\nTITLE: Splitting Atoms in Logtalk\nDESCRIPTION: Splits an atom at a given delimiter into a list of sub-atoms. Takes an atom, a delimiter, and returns a list of sub-atoms.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/atom_0.rst.txt#2025-04-06_snippet_1\n\nLANGUAGE: Logtalk\nCODE:\n```\nsplit(Atom,Delimiter,SubAtoms)\n```\n\n----------------------------------------\n\nTITLE: Accessing Predicate Call Context\nDESCRIPTION: Added context/1 built-in method to access predicate call execution context, primarily used for default error context in type-checking.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/RELEASE_NOTES.md#2025-04-06_snippet_71\n\nLANGUAGE: logtalk\nCODE:\n```\ncontext/1\n```\n\n----------------------------------------\n\nTITLE: Running the Slow Print Example (Conditional Execution)\nDESCRIPTION: Executes the slow_print::start goal if not running in a Jupyter notebook environment. This demonstrates a mutex example from Rosetta Code.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/threads/sync/NOTES.md#2025-04-06_snippet_2\n\nLANGUAGE: logtalk\nCODE:\n```\n(current_object(jupyter) -> true; slow_print::start).\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Request Denial in Chain of Responsibility\nDESCRIPTION: Shows a purchase request of 32000 units that exceeds all approval limits in the chain and is therefore denied.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/design_patterns/behavioral/chain_of_responsibility/NOTES.md#2025-04-06_snippet_6\n\nLANGUAGE: logtalk\nCODE:\n```\nmanager::process_request(32000).\n```\n\n----------------------------------------\n\nTITLE: Defining the \\+/1 Not-Provable Meta-Predicate in Logtalk\nDESCRIPTION: Syntax definition for the not-provable meta-predicate. This predicate succeeds if the call to Goal fails, implementing logical negation.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/refman/methods/not_1.rst#2025-04-06_snippet_0\n\nLANGUAGE: logtalk\nCODE:\n```\n\\+ Goal\n```\n\n----------------------------------------\n\nTITLE: Checking Element Selection and Replacement in a List in Logtalk\nDESCRIPTION: Checks if an element from a list can be replaced by a new element and returns the resulting list.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/listp_0.rst.txt#2025-04-06_snippet_17\n\nLANGUAGE: Logtalk\nCODE:\n```\nselectchk(Old,OldList,New,NewList)\n```\n\n----------------------------------------\n\nTITLE: Dictionary Values Template in Logtalk\nDESCRIPTION: Template showing the mode and number of proofs for retrieving values from a dictionary.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/dictionaryp_0.rst.txt#2025-04-06_snippet_23\n\nLANGUAGE: logtalk\nCODE:\n```\nvalues(@dictionary,-list) - one\n```\n\n----------------------------------------\n\nTITLE: Setting Inequality Constraint in Logtalk\nDESCRIPTION: The dif/2 predicate sets a constraint that is true if and only if the two terms are different. It can be used with two terms as arguments.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/coroutining_0.rst.txt#2025-04-06_snippet_0\n\nLANGUAGE: Logtalk\nCODE:\n```\ndif(Term1,Term2)\n```\n\n----------------------------------------\n\nTITLE: Defining a Time Object in Logtalk\nDESCRIPTION: Implementation of a time object with a cpu_time/1 predicate to get the current CPU time for profiling purposes.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/tutorial/profiling.rst#2025-04-06_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n:- object(time).\n\n    :- public(cpu_time/1).\n    :- mode(cpu_time(-number), one).\n    ...\n\n:- end_object.\n```\n\n----------------------------------------\n\nTITLE: Setting Breakpoints\nDESCRIPTION: Examples of setting various types of breakpoints using the debugger.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/userman/debugging.rst#2025-04-06_snippet_6\n\nLANGUAGE: text\nCODE:\n```\n| ?- debugger::spy(person-42).\n\nAll specified breakpoints added.\nyes\n\n| ?- debugger::spy(foo/2).\n\nAll specified breakpoints added.\nyes\n\n| ?- debugger::spy([foo/4, bar//1, agent-99]).\n\nAll specified breakpoints added.\nyes\n```\n\n----------------------------------------\n\nTITLE: Byte Input/Output Predicates in Logtalk\nDESCRIPTION: Built-in predicates for reading and writing bytes in Logtalk.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/coding/subethaedit2/Logtalk.mode/Contents/Resources/AutocompleteAdditions.txt#2025-04-06_snippet_21\n\nLANGUAGE: logtalk\nCODE:\n```\nget_byte(, )\nget_byte()\npeek_byte(, )\npeek_byte()\nput_byte(, )\nput_byte()\n```\n\n----------------------------------------\n\nTITLE: Testing Logtalk Optionals Library\nDESCRIPTION: Command to load and run tests for the optionals library predicates.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/library/optionals/NOTES.md#2025-04-06_snippet_1\n\nLANGUAGE: logtalk\nCODE:\n```\n| ?- logtalk_load(optionals(tester)).\n```\n\n----------------------------------------\n\nTITLE: Converting DOT to PDF using Graphviz\nDESCRIPTION: Command to convert a DOT file to PDF format using the Graphviz dot command.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/devtools/diagrams.rst#2025-04-06_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ndot -Tpdf diagram.dot > diagram.pdf\n```\n\n----------------------------------------\n\nTITLE: Generating Events with Custom Sender in Logtalk\nDESCRIPTION: Shows how to generate events for a message to self while specifying a custom sender (in this case, the pseudo-object user) using the {}/1 control construct.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/userman/messages.rst#2025-04-06_snippet_8\n\nLANGUAGE: Logtalk\nCODE:\n```\nPredicate :-\n    ...,\n    % send a message to self using (::)/2\n    % sender will be the pseudo-object user\n    self(Self),\n    {Self::Message},\n    ... .\n```\n\n----------------------------------------\n\nTITLE: Type Checking with Context in Logtalk\nDESCRIPTION: Shows how to use type::check/3 to perform type checking that includes execution context in any error message.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/userman/errors.rst#2025-04-06_snippet_8\n\nLANGUAGE: logtalk\nCODE:\n```\n...,\ncontext(Context),\ntype::check(temperature(celsius), 42.0, Context),\n...\n```\n\n----------------------------------------\n\nTITLE: Exposing Silent Compiler Messages in Logtalk\nDESCRIPTION: This category shows how to define message_hook/4 to expose all otherwise silent compiler messages by intercepting and printing them with comment prefixes.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/userman/printing.rst.txt#2025-04-06_snippet_7\n\nLANGUAGE: logtalk\nCODE:\n```\n:- category(my_verbose_logtalk_message_settings).\n\n    :- multifile(logtalk::message_hook/4).\n    :- dynamic(logtalk::message_hook/4).\n\n    logtalk::message_hook(_Message, silent, core, Tokens) :-\n        logtalk::message_prefix_stream(comment, core, Prefix, Stream),\n        logtalk::print_message_tokens(Stream, Prefix, Tokens).\n\n    logtalk::message_hook(_Message, silent(Key), core, Tokens) :-\n        logtalk::message_prefix_stream(comment(Key), core, Prefix, Stream),\n        logtalk::print_message_tokens(Stream, Prefix, Tokens).\n\n:- end_category.\n```\n\n----------------------------------------\n\nTITLE: Retrieving Directory Files with Options in Logtalk\nDESCRIPTION: Retrieves a list of files from a directory with filtering options for paths (relative/absolute), file types, extensions, prefixes, suffixes, and dot files visibility.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/osp_0.rst.txt#2025-04-06_snippet_0\n\nLANGUAGE: prolog\nCODE:\n```\ndirectory_files(Directory, Files, Options)\n```\n\n----------------------------------------\n\nTITLE: Remove Dependent Predicate\nDESCRIPTION: Predicate that removes a dependent object. Can return zero or more solutions when matching dependent objects to remove.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/subject_0.rst.txt#2025-04-06_snippet_4\n\nLANGUAGE: logtalk\nCODE:\n```\nremoveDependent(Dependent)\n```\n\n----------------------------------------\n\nTITLE: Testing the Assertions Library in Logtalk\nDESCRIPTION: Command to load the tester file for the assertions library. This runs test cases to verify that the assertions functionality works correctly.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/devtools/assertions.rst.txt#2025-04-06_snippet_1\n\nLANGUAGE: prolog\nCODE:\n```\n| ?- logtalk_load(assertions(tester)).\n```\n\n----------------------------------------\n\nTITLE: Default Value Assignment in Prolog\nDESCRIPTION: Demonstrates the default value assignment logic where multiple definitions are handled by using the first valid one found, with a fallback value of 42 if no valid definitions exist.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/library/arbitrary/NOTES.md#2025-04-06_snippet_10\n\nLANGUAGE: prolog\nCODE:\n```\nchar_code/2\n```\n\n----------------------------------------\n\nTITLE: Cut Operator Mode Declaration\nDESCRIPTION: Mode declaration for the cut operator showing it provides exactly one proof.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/refman/methods/cut_0.rst.txt#2025-04-06_snippet_1\n\nLANGUAGE: logtalk\nCODE:\n```\n! - one\n```\n\n----------------------------------------\n\nTITLE: Implementing Map Reduce in Logtalk\nDESCRIPTION: Addition of map_reduce/5 meta-predicate to the library object 'meta' for performing map-reduce operations.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/RELEASE_NOTES.md#2025-04-06_snippet_135\n\nLANGUAGE: Logtalk\nCODE:\n```\nmap_reduce(Input, Map, Reduce, Initial, Result)\n```\n\n----------------------------------------\n\nTITLE: Using bagof/3 for Local Solutions in Logtalk\nDESCRIPTION: Example of using bagof/3 to find solutions in the context of the current object or category.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/refman/methods/bagof_3.rst#2025-04-06_snippet_3\n\nLANGUAGE: Logtalk\nCODE:\n```\nbagof(Template, Goal, List)\n```\n\n----------------------------------------\n\nTITLE: Integrating Circle Function Using Single-Threaded QuadRec2D Method\nDESCRIPTION: Performs integration of the circle function over a square domain using quadrec2d with 1 thread and measures execution time.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/threads/integration2d/NOTES.md#2025-04-06_snippet_5\n\nLANGUAGE: logtalk\nCODE:\n```\ntime(quadrec2d(1)::integrate(circle, -2, 2, -2, 2, 2, 2.5e-10, Integral)).\n```\n\n----------------------------------------\n\nTITLE: File Properties Predicate\nDESCRIPTION: Returns loaded file properties through backtracking, including basename, directory, compilation mode, flags and other metadata.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/logtalk_0.rst.txt#2025-04-06_snippet_5\n\nLANGUAGE: logtalk\nCODE:\n```\nloaded_file_property(Path,Property)\n```\n\n----------------------------------------\n\nTITLE: Loading the books example\nDESCRIPTION: This snippet loads the books example using the Logtalk loader.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/books/NOTES.md#2025-04-06_snippet_1\n\nLANGUAGE: logtalk\nCODE:\n```\nlogtalk_load(books(loader)).\n```\n\n----------------------------------------\n\nTITLE: Loading JSON Library in Logtalk\nDESCRIPTION: Shows how to load all entities in the JSON library using the loader.lgt file.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/libraries/json.rst#2025-04-06_snippet_0\n\nLANGUAGE: Prolog\nCODE:\n```\n| ?- logtalk_load(json(loader)).\n```\n\n----------------------------------------\n\nTITLE: Backtracking Permutations Benchmark\nDESCRIPTION: Runs the backtracking implementation of permutations algorithm with input size 7 and measures execution time.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/permutations/NOTES.md#2025-04-06_snippet_3\n\nLANGUAGE: logtalk\nCODE:\n```\ntime(permutations::backtracking(7)).\n```\n\n----------------------------------------\n\nTITLE: Example Query Using predicate_property/2 in Logtalk\nDESCRIPTION: A Logtalk query example showing the output of using predicate_property/2 to retrieve properties of the predicate 'baz/1' from the 'foo' object, with multiple solutions through backtracking.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/refman/methods/predicate_property_2.rst#2025-04-06_snippet_3\n\nLANGUAGE: logtalk\nCODE:\n```\n| ?- foo::pred(baz(_), Prop).\nProp = logtalk ;\nProp = scope(public) ;\nProp = public ;\nProp = declared_in(bar) ;\n...\n```\n\n----------------------------------------\n\nTITLE: Quick Check for Property-Based Testing in Logtalk\nDESCRIPTION: Generates and runs random tests for a predicate given its mode template and options. Fails when a generated test fails, printing the test details.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/lgtunit_0.rst.txt#2025-04-06_snippet_12\n\nLANGUAGE: Logtalk\nCODE:\n```\nquick_check(Template, Options)\n```\n\n----------------------------------------\n\nTITLE: Creating a Debugging Category with Filtered Listing\nDESCRIPTION: Example of creating a complementing category that extends listing and adds a debug/1 predicate to filter listings by a specific key, demonstrating the proper use of the (::)/2 control construct.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/libraries/listing.rst.txt#2025-04-06_snippet_5\n\nLANGUAGE: logtalk\nCODE:\n```\n| ?- create_category(\n        patch,\n        [extends(listing),complements(data)],\n        [public(debug/1)],\n        [(debug(Key) :- ::listing(p(Key,Datum)))]\n    ).\nyes\n\n| ?- data::debug(k42).\n...\n```\n\n----------------------------------------\n\nTITLE: Error Handling for Missing Data\nDESCRIPTION: Demonstrates error handling when encountering missing data by catching and displaying the error.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/missing_data/NOTES.md#2025-04-06_snippet_4\n\nLANGUAGE: logtalk\nCODE:\n```\ncatch(data_processing::check, Error, true).\n```\n\n----------------------------------------\n\nTITLE: Step-by-Step Logic Translation Example 2\nDESCRIPTION: Demonstrates translation of a quantified logic expression with both universal and existential quantifiers.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/logic/NOTES.md#2025-04-06_snippet_4\n\nLANGUAGE: logtalk\nCODE:\n```\ntranslator::step_by_step(all(X, exists(Y, p(X) v ~q(X) => r(X, Y))), Cs).\n```\n\n----------------------------------------\n\nTITLE: Extracting Timestamp from ULID\nDESCRIPTION: Examples of extracting timestamp information from a ULID in milliseconds and component form.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/libraries/ulid.rst.txt#2025-04-06_snippet_7\n\nLANGUAGE: logtalk\nCODE:\n```\n| ?- ulid(atom)::timestamp('01H0JDBQ1GAWJF35C44Y5S97DX', Milliseconds).\nMilliseconds = 1684245175344\nyes\n\n| ?- ulid(atom)::timestamp('01H0N8CDAZK75C5H3BJSGS4VCQ', Year, Month, Day, Hours, Minutes, Seconds, Milliseconds).\nYear = 2023, Month = 5, Day = 17, Hours = 16, Minutes = 23, Seconds = 38, Milliseconds = 591\nyes\n```\n\n----------------------------------------\n\nTITLE: Example Usage of ask_question/5 in Logtalk\nDESCRIPTION: Example demonstrating how to use the ask_question/5 method to prompt for a user's age, using a validation check to ensure the input is an integer.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/refman/methods/ask_question_5.rst#2025-04-06_snippet_3\n\nLANGUAGE: logtalk\nCODE:\n```\n...,\nlogtalk::ask_question(enter_age, question, my_app, integer, Age),\n...\n```\n\n----------------------------------------\n\nTITLE: Execute Object Output in Logtalk\nDESCRIPTION: Demonstrates the results of goal_expansion/2 calls by executing the out predicate on an object.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/hooks/NOTES.md#2025-04-06_snippet_2\n\nLANGUAGE: logtalk\nCODE:\n```\nobject::out.\n```\n\n----------------------------------------\n\nTITLE: Loading Logtalk from JAR File in JIProlog\nDESCRIPTION: JIProlog query to load Logtalk from a JAR file using the load_library/1 built-in predicate. This allows on-demand loading of Logtalk in a JIProlog environment.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/scripts/embedding/jiprolog/NOTES.md#2025-04-06_snippet_2\n\nLANGUAGE: Prolog\nCODE:\n```\n| ?- load_library('logtalk.jar').\n```\n\n----------------------------------------\n\nTITLE: Using the assertion/2 Predicate with Context in Logtalk\nDESCRIPTION: Example of using the assertion/2 predicate with context information. The first argument provides context (foo_list_alerts) which will be included in any error messages.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/devtools/assertions.rst.txt#2025-04-06_snippet_3\n\nLANGUAGE: logtalk\nCODE:\n```\nfoo(L) :-\n    assertions::assertion(foo_list_alerts, non_empty_list(L)),\n    ...\n```\n\n----------------------------------------\n\nTITLE: Setting Optimize Flag for XPCE Profiler\nDESCRIPTION: Shows how to set the optimize flag to true to avoid profiling the Logtalk compiler when using SWI-Prolog's XPCE profiler.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/devtools/profiler.rst#2025-04-06_snippet_2\n\nLANGUAGE: prolog\nCODE:\n```\n?- set_logtalk_flag(optimize, on).\ntrue.\n\n?- use_module(library(statistics)).\ntrue.\n\n?- profile(... :: ...).\n...\n```\n\n----------------------------------------\n\nTITLE: Defining library_dependency_diagram Object in Logtalk\nDESCRIPTION: Defines the library_dependency_diagram object with a single argument Format. This object is used to generate library dependency diagrams, where a dependency exists when an entity in one library references an entity in another library.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/library_dependency_diagram_1.rst.txt#2025-04-06_snippet_0\n\nLANGUAGE: Logtalk\nCODE:\n```\nlibrary_dependency_diagram(Format)\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Super Call Behavior\nDESCRIPTION: Illustrates how super calls preserve the sender context when calling the inherited meta-predicate.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/self_vs_super/NOTES.md#2025-04-06_snippet_3\n\nLANGUAGE: logtalk\nCODE:\n```\nproto::meta_super(foo, X).\n```\n\n----------------------------------------\n\nTITLE: Generating XML documentation for tool entities for Markdown conversion\nDESCRIPTION: Example of using rlibrary/2 predicate to generate XML documentation for all tool entities using a custom XSLT file for later conversion to Markdown files.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/lgtdocp_0.rst.txt#2025-04-06_snippet_2\n\nLANGUAGE: logtalk\nCODE:\n```\nrlibrary(tools,[xslfile('lgtmd.xsl')])\n```\n\n----------------------------------------\n\nTITLE: Example Debug Message Object Definition\nDESCRIPTION: Sample Logtalk object showing how to implement debug messages using the print_message/3 predicate for different debug groups.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/devtools/debug_messages.rst#2025-04-06_snippet_2\n\nLANGUAGE: logtalk\nCODE:\n```\n:- object(foo).\n\n    :- public([bar/0, baz/0]).\n    :- uses(logtalk, [print_message/3]).\n\n    bar :-\n        print_message(debug(bar), xyz, @'bar/0 called').\n\n    baz :-\n        print_message(debug(baz), xyz, @'baz/0 called').\n\n:- end_object.\n```\n\n----------------------------------------\n\nTITLE: Defining protocol/1-2 Directive Syntax in Logtalk\nDESCRIPTION: Shows the syntax of the protocol/1-2 directive, which is used to start a protocol definition. The directive can take either a single protocol identifier or a protocol identifier with an extends/1 option that specifies inherited protocols.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/refman/directives/protocol_1_2.rst#2025-04-06_snippet_0\n\nLANGUAGE: logtalk\nCODE:\n```\nprotocol(Protocol)\n\nprotocol(Protocol,\n    extends(Protocols))\n```\n\n----------------------------------------\n\nTITLE: Retrieving All Values from Dictionary in Logtalk\nDESCRIPTION: Returns a list of all values in the dictionary, ordered by their corresponding keys in ascending order.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/dictionaryp_0.rst.txt#2025-04-06_snippet_22\n\nLANGUAGE: Logtalk\nCODE:\n```\nvalues(Dictionary,Values)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Hardware Platform in Logtalk\nDESCRIPTION: Returns the operating system hardware platform. On POSIX systems it returns uname -m, on Windows it returns the PROCESSOR_ARCHITECTURE environment variable.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/osp_0.rst.txt#2025-04-06_snippet_18\n\nLANGUAGE: prolog\nCODE:\n```\noperating_system_machine(Machine)\n```\n\n----------------------------------------\n\nTITLE: Float Between Predicate Definition\nDESCRIPTION: Generates a sequence of N equally spaced float numbers between Lower and Upper bounds through backtracking. Requires N > 0 and Lower <= Upper.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/float_0.rst.txt#2025-04-06_snippet_0\n\nLANGUAGE: prolog\nCODE:\n```\nbetween(Lower,Upper,N,Float)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Valid Prolog Source File Extensions\nDESCRIPTION: Predicate that provides valid file extensions for Prolog source files. Used to identify and filter Prolog files when processing modules for diagram generation.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/modules_diagram_support_0.rst.txt#2025-04-06_snippet_2\n\nLANGUAGE: Prolog\nCODE:\n```\nsource_file_extension(Extension)\n```\n\n----------------------------------------\n\nTITLE: Compound Object Declaration\nDESCRIPTION: Declaration of the compound object which extends the term object and includes compilation flags for static and context switching calls. Available through the types loader.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/compound_0.rst.txt#2025-04-06_snippet_0\n\nLANGUAGE: logtalk\nCODE:\n```\ncompound\n```\n\n----------------------------------------\n\nTITLE: Setting Logtalk Flags\nDESCRIPTION: Example of setting Logtalk flags using set_logtalk_flag/2 predicate and the set_logtalk_flag/2 directive within source files.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/userman/programming.rst.txt#2025-04-06_snippet_13\n\nLANGUAGE: logtalk\nCODE:\n```\n% compile objects in this source file with event support\n:- set_logtalk_flag(events, allow).\n\n:- object(foo).\n\n    % compile this object with support\n    % for dynamic predicate declarations\n    :- set_logtalk_flag(dynamic_declarations, allow).\n    ...\n\n:- end_object.\n\n...\n```\n\n----------------------------------------\n\nTITLE: Loading the Dead Code Scanner Tool in Logtalk\nDESCRIPTION: This snippet shows how to load the dead_code_scanner tool in Logtalk. It uses the logtalk_load/1 predicate with the loader file as an argument.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/devtools/dead_code_scanner.rst.txt#2025-04-06_snippet_0\n\nLANGUAGE: logtalk\nCODE:\n```\n| ?- logtalk_load(dead_code_scanner(loader)).\n```\n\n----------------------------------------\n\nTITLE: Mode Declaration for Message Sending\nDESCRIPTION: Specifies the calling mode and number of proofs for the (::)/1 control construct.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/refman/control/send_to_self_1.rst#2025-04-06_snippet_1\n\nLANGUAGE: logtalk\nCODE:\n```\n::+callable - zero_or_more\n```\n\n----------------------------------------\n\nTITLE: Synchronized Database Updates with threaded_call\nDESCRIPTION: Performs three synchronized database updates using threaded_call/1, with each call waiting for the previous one to complete before proceeding.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/threads/sync/NOTES.md#2025-04-06_snippet_6\n\nLANGUAGE: logtalk\nCODE:\n```\nthreaded_call(nasty2::update_db(_)), threaded_call(nasty2::update_db(_)), threaded_call(nasty2::update_db(_)).\n```\n\n----------------------------------------\n\nTITLE: Implementing a Parametric Object for Multifile Predicates in Logtalk\nDESCRIPTION: Demonstrates how to define a parametric object in Logtalk to encapsulate operations on multifile predicates. This approach is useful when multifile predicates represent large data tables.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/userman/migration.rst#2025-04-06_snippet_2\n\nLANGUAGE: logtalk\nCODE:\n```\n:- object(city(_Name, _District, _Population, _Neighbors)).\n\n    % predicates for working with city/4 clauses\n\n:- end_object.\n```\n\n----------------------------------------\n\nTITLE: Adding Books to a Collection Using the Iterator Pattern\nDESCRIPTION: Adds three book titles to a collection object that implements the Iterator pattern. The book titles are added using the add_title/1 predicate.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/design_patterns/behavioral/iterator/NOTES.md#2025-04-06_snippet_2\n\nLANGUAGE: logtalk\nCODE:\n```\nbook_collection::(\n\t\tadd_title('Design Patterns'),\n\t\tadd_title('Design Patterns in Dynamic Languages'),\n\t\tadd_title('Analysis patterns')\n     ).\n```\n\n----------------------------------------\n\nTITLE: Parsing PDDL Domain File with Rest\nDESCRIPTION: Parses a PDDL 3.0 domain file and returns both the parsed content as a compound term and any remaining content. This is particularly useful when domain and problem definitions are contained in a single file.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/pddl_0.rst.txt#2025-04-06_snippet_0\n\nLANGUAGE: logtalk\nCODE:\n```\nparse_domain(File,Output,RestOfFile)\n```\n\n----------------------------------------\n\nTITLE: Implementing arithmetic_mean/5 in Logtalk\nDESCRIPTION: Auxiliary predicate for computing the arithmetic mean of a list of numbers. Takes an input list, starting length, returns final length, input sum, and returns the mean as a float.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/statistics_0.rst.txt#2025-04-06_snippet_0\n\nLANGUAGE: Logtalk\nCODE:\n```\narithmetic_mean(List,Length0,Length,Sum,Mean)\n```\n\n----------------------------------------\n\nTITLE: Moving Polygons and Updating Concentric Relations in Logtalk\nDESCRIPTION: Moves polygons to new positions using the move/2 method and demonstrates the automatic updating of concentric relations.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/polygons/NOTES.md#2025-04-06_snippet_4\n\nLANGUAGE: logtalk\nCODE:\n```\nt::move(3, 3), h::move(8, 4).\n\nconcentric::tuple(Tuple), write(Tuple), nl, fail; true.\n\nt::position(Xt, Yt), s::position(Xs, Ys), p::position(Xp, Yp), h::position(Xh, Yh).\n\nafter_event_registry::monitors(Ma).\n```\n\n----------------------------------------\n\nTITLE: Example Usage of existence_error/2 in Logtalk\nDESCRIPTION: Provides an example of using the existence_error/2 method to throw an error when an object named 'payroll' does not exist in the current context.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/refman/methods/existence_error_2.rst.txt#2025-04-06_snippet_2\n\nLANGUAGE: Logtalk\nCODE:\n```\n...,\n\\+ current_object(payroll),\nexistence_error(object, payroll).\n```\n\n----------------------------------------\n\nTITLE: Defining object_property/2 Predicate in Prolog\nDESCRIPTION: Specifies the signature and mode of the object_property/2 predicate, which enumerates properties of defined Logtalk objects. It takes an object identifier and a property as arguments, both of which can be variables or ground terms.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/refman/predicates/object_property_2.rst#2025-04-06_snippet_0\n\nLANGUAGE: prolog\nCODE:\n```\nobject_property(?object_identifier, ?object_property) - zero_or_more\n```\n\n----------------------------------------\n\nTITLE: TSV File to List Conversion\nDESCRIPTION: Reads a TSV file and returns data as a list of rows, where each row is a list of fields. Takes file path and returns rows list. Fails if file cannot be parsed.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/tsv_protocol_0.rst.txt#2025-04-06_snippet_2\n\nLANGUAGE: logtalk\nCODE:\n```\nread_file(File,Rows)\n```\n\n----------------------------------------\n\nTITLE: Super-Call Mode Declaration in Logtalk\nDESCRIPTION: Specifies the mode declaration for the super-call construct, indicating it accepts a callable term and can return zero or more solutions.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/refman/control/call_super_1.rst#2025-04-06_snippet_1\n\nLANGUAGE: logtalk\nCODE:\n```\n^^+callable - zero_or_more\n```\n\n----------------------------------------\n\nTITLE: Get Default Message - Parent\nDESCRIPTION: Shows inheritance behavior by calling get_default/1 on parent object which defines the default/1 predicate.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/self_messages/NOTES.md#2025-04-06_snippet_4\n\nLANGUAGE: logtalk\nCODE:\n```\nparent::get_default(Default).\n```\n\n----------------------------------------\n\nTITLE: Reading CSV File into List of Rows in Logtalk\nDESCRIPTION: Shows how to read a CSV file and return its contents as a list of rows using the csv/3 parametric object.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/libraries/csv.rst#2025-04-06_snippet_3\n\nLANGUAGE: prolog\nCODE:\n```\n| ?- csv(keep, comma, true)::read_file('test_files/crlf_ending.csv', Rows).\n\nRows = [[aaa,bbb,ccc],[zzz,yyy,xxx]] ?\n```\n\n----------------------------------------\n\nTITLE: Recognizing a Rhombus with Vertex Mapping\nDESCRIPTION: Recognizes a rhombus by defining its edges and querying for its class and vertex mapping. The vertices rotation results in four solutions per class.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/ncl/figures/NOTES.md#2025-04-06_snippet_4\n\nLANGUAGE: logtalk\nCODE:\n```\nfigures(_, _, _, _, _, _, _, _, _, _, _, _, _, _, _)::(\\n\\t\\tedge(a, b, 45, 10),\\n\\t\\tedge(b, c,  0, 10),\\n\\t\\tedge(c, d, 45, 10),\\n\\t\\tedge(d, a,  0, 10),\\n\\t\\tclass(Name, X, Y, Z, P)\\n\\t).\n```\n\n----------------------------------------\n\nTITLE: Defining a Logtalk Subclass\nDESCRIPTION: Demonstrates how to define a Logtalk class that specializes another class (superclass) using the specializes directive.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/userman/objects.rst.txt#2025-04-06_snippet_6\n\nLANGUAGE: logtalk\nCODE:\n```\n:- object(Class,\n    specializes(Superclass)).\n    ...\n:- end_object.\n```\n\n----------------------------------------\n\nTITLE: Reading CSV File into List in Logtalk\nDESCRIPTION: Shows how to read a CSV file into a list of rows using the csv/3 parametric object with specified options.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/library/csv/NOTES.md#2025-04-06_snippet_3\n\nLANGUAGE: Logtalk\nCODE:\n```\n| ?- csv(keep, comma, true)::read_file('test_files/crlf_ending.csv', Rows).\n\nRows = [[aaa,bbb,ccc],[zzz,yyy,xxx]] ?\n```\n\n----------------------------------------\n\nTITLE: Subtracting Elements from a List in Logtalk\nDESCRIPTION: Removes all elements in the second list from the first list.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/listp_0.rst.txt#2025-04-06_snippet_26\n\nLANGUAGE: Logtalk\nCODE:\n```\nsubtract(List,Elements,Remaining)\n```\n\n----------------------------------------\n\nTITLE: Usage Modes for catch/3 Method in Logtalk\nDESCRIPTION: Defines the accepted argument modes and expected number of proofs for the catch/3 method. It can succeed zero or more times with the given argument types.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/refman/methods/catch_3.rst#2025-04-06_snippet_1\n\nLANGUAGE: prolog\nCODE:\n```\ncatch(?callable, ?term, ?callable) - zero_or_more\n```\n\n----------------------------------------\n\nTITLE: Deleting All Monitored Events in Logtalk\nDESCRIPTION: The del_monitors/0 predicate removes all monitoring relationships in the current event registry. This provides a simple way to reset the event monitoring system completely.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/event_registryp_0.rst.txt#2025-04-06_snippet_6\n\nLANGUAGE: logtalk\nCODE:\n```\ndel_monitors\n```\n\n----------------------------------------\n\nTITLE: Defining AVL Tree Object in Logtalk\nDESCRIPTION: Defines the avltree object, implementing the dictionary protocol and extending the term object. It uses standard order to compare keys and includes various inherited public predicates for dictionary operations.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/avltree_0.rst.txt#2025-04-06_snippet_0\n\nLANGUAGE: logtalk\nCODE:\n```\n\"avltree\"\n===========\n\nAVL tree implementation of the dictionary protocol. Uses standard order to compare keys.\n\n| **Availability:** \n|    ``logtalk_load(dictionaries(loader))``\n\n| **Author:** R.A.O'Keefe, L.Damas, V.S.Costa, Glenn Burgess, Jiri Spitz, and Jan Wielemaker; Logtalk port and additional predicates by Paulo Moura\n| **Version:** 1:4:0\n| **Date:** 2021-04-12\n\n| **Compilation flags:**\n|    ``static, context_switching_calls``\n\n\n| **Implements:**\n|    ``public`` :ref:`dictionaryp <dictionaryp/0>`\n| **Extends:**\n|    ``public`` :ref:`term <term/0>`\n| **Uses:**\n|    :ref:`list <list/0>`\n```\n\n----------------------------------------\n\nTITLE: Solving Towers of Hanoi with Four Threads in Logtalk\nDESCRIPTION: Solves the Towers of Hanoi problem for 24 disks using four threads and measures the execution time.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/threads/hanoi/NOTES.md#2025-04-06_snippet_4\n\nLANGUAGE: logtalk\nCODE:\n```\ntime(hanoi(4)::run(24)).\n```\n\n----------------------------------------\n\nTITLE: Sending Message to Self\nDESCRIPTION: Syntax for sending a message to the current object (self) using the :: operator.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/userman/messages.rst.txt#2025-04-06_snippet_3\n\nLANGUAGE: logtalk\nCODE:\n```\n..., ::Message, ....\n```\n\n----------------------------------------\n\nTITLE: Querying Category-Object Complementation in Logtalk\nDESCRIPTION: Shows how to use the complements_object/2 built-in predicate to find which objects are explicitly complemented by categories.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/userman/objects.rst.txt#2025-04-06_snippet_27\n\nLANGUAGE: text\nCODE:\n```\n| ?- complements_object(Category, Object).\n```\n\n----------------------------------------\n\nTITLE: Testing Patched nextto/3 Predicate\nDESCRIPTION: Tests the patched implementation of the nextto/3 predicate in the broken object with a list [1,2,3], verifying elements 2 and 3 are adjacent.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/patching/NOTES.md#2025-04-06_snippet_7\n\nLANGUAGE: logtalk\nCODE:\n```\nbroken::nextto(2, 3, [1,2,3]).\n```\n\n----------------------------------------\n\nTITLE: Car Sequencing Problem with Indexicals (Method 2)\nDESCRIPTION: Solves the car sequencing problem using the second implementation with CLP(FD) indexicals. Uses the 'ff' (first-fail) labeling strategy.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/constraints/sicstus/NOTES.md#2025-04-06_snippet_3\n\nLANGUAGE: logtalk\nCODE:\n```\n%%table\ncars_ix::cars_ix2([ff], X).\n```\n\n----------------------------------------\n\nTITLE: Coverage Statistics in Logtalk Unit Testing\nDESCRIPTION: Dynamic predicate for collecting statistics on clause coverage, tracking entity, predicate, covered clauses, and total clauses.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/lgtunit_0.rst.txt#2025-04-06_snippet_82\n\nLANGUAGE: Logtalk\nCODE:\n```\ncovered_(Entity,Predicate,Covered,Total)\n```\n\n----------------------------------------\n\nTITLE: Testing Option Validity without Errors in Logtalk\nDESCRIPTION: The valid_option/1 predicate succeeds if an option is valid, failing silently otherwise. Unlike check_option/1, it doesn't throw errors for invalid options.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/options_protocol_0.rst.txt#2025-04-06_snippet_2\n\nLANGUAGE: prolog\nCODE:\n```\nvalid_option(Option)\n```\n\n----------------------------------------\n\nTITLE: Manual Error Construction\nDESCRIPTION: Shows how to manually construct and throw an error with context in Logtalk.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/userman/errors.rst.txt#2025-04-06_snippet_2\n\nLANGUAGE: prolog\nCODE:\n```\n...,\ncontext(Context),\nthrow(error(type_error(atom, 42), Context)).\n```\n\n----------------------------------------\n\nTITLE: Defining Parametric Categories in Logtalk\nDESCRIPTION: Shows how to define and import parametric categories in Logtalk objects.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/userman/categories.rst#2025-04-06_snippet_18\n\nLANGUAGE: Logtalk\nCODE:\n```\n:- object(speech(Season, Event),\n    imports([dress(Season), speech(Event)])).\n    ...\n:- end_object.\n```\n\n----------------------------------------\n\nTITLE: Removing Conditional Breakpoints in Logtalk\nDESCRIPTION: Demonstrates how to remove conditional breakpoints using the debugger's nospy/3 predicate. This example removes all matching conditional breakpoints for the 'planet' predicate.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/userman/debugging.rst#2025-04-06_snippet_9\n\nLANGUAGE: text\nCODE:\n```\n| ?- debugger::nospy(planet, _, _).\n\nAll matching conditional breakpoints removed.\nyes\n```\n\n----------------------------------------\n\nTITLE: Reading CSV File into List of Rows in Logtalk\nDESCRIPTION: Shows how to read a CSV file and return its contents as a list of rows using the csv/3 parametric object.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/libraries/csv.rst#2025-04-06_snippet_3\n\nLANGUAGE: prolog\nCODE:\n```\n| ?- csv(keep, comma, true)::read_file('test_files/crlf_ending.csv', Rows).\n\nRows = [[aaa,bbb,ccc],[zzz,yyy,xxx]] ?\n```\n\n----------------------------------------\n\nTITLE: Running the barrier synchronization example\nDESCRIPTION: This code executes the 'sing_along' predicate from the 'beatles' object, which demonstrates the barrier synchronization in action.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/threads/barriers/NOTES.md#2025-04-06_snippet_2\n\nLANGUAGE: logtalk\nCODE:\n```\nbeatles::sing_along.\n```\n\n----------------------------------------\n\nTITLE: Processing Single Directory with directory/1 in Logtalk\nDESCRIPTION: A simplified version of directory/2 that uses default options for processing Prolog files in a single directory.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/wrapper_0.rst.txt#2025-04-06_snippet_3\n\nLANGUAGE: Logtalk\nCODE:\n```\ndirectory/1\n```\n\n----------------------------------------\n\nTITLE: Changed Predicate - Notify All Dependents\nDESCRIPTION: Predicate that notifies all dependent objects when the receiver changes in some way. Uses static compilation flag.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/subject_0.rst.txt#2025-04-06_snippet_0\n\nLANGUAGE: logtalk\nCODE:\n```\nchanged/0\n```\n\n----------------------------------------\n\nTITLE: Creating a Threaded Engine with Loop Predicate in Logtalk\nDESCRIPTION: Demonstrates how to create a threaded engine using a loop predicate for continuous task handling.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/userman/threads.rst.txt#2025-04-06_snippet_15\n\nLANGUAGE: Logtalk\nCODE:\n```\n| ?- threaded_engine_create(none, loop, worker).\n```\n\n----------------------------------------\n\nTITLE: Applying Closure to Queue Elements and Creating New Queue in Logtalk\nDESCRIPTION: Predicate to apply a closure to all elements of a queue and construct a new queue. It takes a closure and a queue as input, and returns a new queue.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/queuep_0.rst.txt#2025-04-06_snippet_12\n\nLANGUAGE: Logtalk\nCODE:\n```\nmap(Closure,Queue,NewQueue)\n```\n\n----------------------------------------\n\nTITLE: Modifying Age via Base Prototype\nDESCRIPTION: Demonstrates incrementing age through the base prototype using the grow_older method.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/viewpoints/NOTES.md#2025-04-06_snippet_3\n\nLANGUAGE: logtalk\nCODE:\n```\njoe_person::grow_older.\n```\n\n----------------------------------------\n\nTITLE: Multiple Assertions Test Example\nDESCRIPTION: Example of testing multiple assertions in a single test using assertion/2 predicates.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/devtools/lgtunit.rst.txt#2025-04-06_snippet_14\n\nLANGUAGE: logtalk\nCODE:\n```\ntest(dictionary_clone_4_01, true) :-\n    as_dictionary([], Dictionary),\n    clone(Dictionary, DictionaryPairs, Clone, ClonePairs),\n    empty(Clone),\n    ^^assertion(original_pairs, DictionaryPairs == []),\n    ^^assertion(clone_pairs, ClonePairs == []).\n```\n\n----------------------------------------\n\nTITLE: Setting Hit Count Breakpoint in Logtalk\nDESCRIPTION: Shows how to set a hit count breakpoint using the debugger's spy/3 predicate. This example sets a breakpoint for the 'planet' predicate at line 41, triggering when the unification count is less than or equal to 2.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/userman/debugging.rst#2025-04-06_snippet_10\n\nLANGUAGE: text\nCODE:\n```\n| ?- debugger::spy(planet, 41, =<(2)).\n\nConditional breakpoint added.\nyes\n```\n\n----------------------------------------\n\nTITLE: Generating XML documentation for entities in a directory for browser viewing\nDESCRIPTION: Example of using rdirectory/1 predicate to generate XML documentation for all entities in the tools directory that can be viewed directly in a browser after indexing with the lgt2xml script.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/lgtdocp_0.rst.txt#2025-04-06_snippet_4\n\nLANGUAGE: logtalk\nCODE:\n```\nrdirectory('./tools')\n```\n\n----------------------------------------\n\nTITLE: Testing Expecteds Library in Logtalk\nDESCRIPTION: Command to load and run tests for the expecteds library predicates.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/library/expecteds/NOTES.md#2025-04-06_snippet_1\n\nLANGUAGE: logtalk\nCODE:\n```\n| ?- logtalk_load(expecteds(tester)).\n```\n\n----------------------------------------\n\nTITLE: Importing Assertion Predicates in Logtalk\nDESCRIPTION: Directive to import assertion predicates for easier use in Logtalk code. This allows for a more concise syntax when using assertions.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/tools/assertions/NOTES.md#2025-04-06_snippet_3\n\nLANGUAGE: Logtalk\nCODE:\n```\n:- uses(assertions, [assertion/1, assertion/2]).\n```\n\n----------------------------------------\n\nTITLE: Using Local Predicates in Assertions with Logtalk Unit Tests\nDESCRIPTION: Shows how to call local predicates in assertions using the (::)/2 message-sending control construct instead of the (^^)/2 super call.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/devtools/lgtunit.rst#2025-04-06_snippet_30\n\nLANGUAGE: logtalk\nCODE:\n```\n   :- uses(lgtunit, [\n       assertion/1\n   ]).\n\n   test(my_test_id, true) :-\n       foo(X, Y),\n       assertion(consistent(X, Y)).\n\n   consistent(X, Y) :-\n       ...\n```\n\n----------------------------------------\n\nTITLE: Removing Conditional Breakpoints in Logtalk\nDESCRIPTION: Demonstrates how to remove conditional breakpoints using the debugger's nospy/3 predicate. This example removes all matching conditional breakpoints for the 'planet' predicate.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/userman/debugging.rst#2025-04-06_snippet_9\n\nLANGUAGE: text\nCODE:\n```\n| ?- debugger::nospy(planet, _, _).\n\nAll matching conditional breakpoints removed.\nyes\n```\n\n----------------------------------------\n\nTITLE: Example of uses/2 Directive with List Operations\nDESCRIPTION: This example shows how to import list manipulation predicates (append/3, member/2, select/3) from the list object, enabling direct use of these predicates without explicitly sending messages to the list object.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/userman/predicates.rst#2025-04-06_snippet_15\n\nLANGUAGE: logtalk\nCODE:\n```\n:- uses(list, [\n    append/3, member/2, select/3\n]).\n\nfoo :-\n    ...,\n    findall(X, member(X, L), A),\n    append(A, B, C),\n    select(Y, C, R),\n    ...\n```\n\n----------------------------------------\n\nTITLE: Reading Terms from Atoms in Logtalk\nDESCRIPTION: Predicates for reading Prolog terms from atoms with various options. These include read_term_from_atom/3 with custom options and read_from_atom/2 as a simplified version with default options.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/term_io_protocol_0.rst.txt#2025-04-06_snippet_0\n\nLANGUAGE: Logtalk\nCODE:\n```\nread_term_from_atom(Atom,Term,Options)\n```\n\nLANGUAGE: Logtalk\nCODE:\n```\nread_from_atom(Atom,Term)\n```\n\n----------------------------------------\n\nTITLE: Ensure Loaded Implementation in Logtalk\nDESCRIPTION: Shows how to implement ensure_loaded functionality in Logtalk using the reload(skip) option to prevent multiple loading of the same file.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/faq/usability.rst.txt#2025-04-06_snippet_1\n\nLANGUAGE: logtalk\nCODE:\n```\nlogtalk_load(File, [reload(skip)])\n```\n\n----------------------------------------\n\nTITLE: Example Object Using predicate_property/2 in Logtalk\nDESCRIPTION: A complete example of an object 'foo' that demonstrates how to use predicate_property/2 to retrieve properties of predicates. The object uses another object 'bar' and defines a predicate to enumerate properties.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/refman/methods/predicate_property_2.rst#2025-04-06_snippet_2\n\nLANGUAGE: logtalk\nCODE:\n```\n:- object(foo).\n\n    :- uses(bar, [\n        baz/1, quux/2\n    ]).\n\n    :- public(pred/1).\n    pred_prop(Pred, Prop) :-\n       predicate_property(Pred, Prop).\n\n:- end_object.\n```\n\n----------------------------------------\n\nTITLE: Running SRQ Single Solution Example\nDESCRIPTION: Finds a single solution to the SRQ constraint problem\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/constraints/bp/NOTES.md#2025-04-06_snippet_7\n\nLANGUAGE: logtalk\nCODE:\n```\nsrq::q.\n```\n\n----------------------------------------\n\nTITLE: Database Method Usage with Uses Directive\nDESCRIPTION: Example showing how to use database methods with the uses directive to manipulate dynamic predicates in the user module.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/userman/predicates.rst.txt#2025-04-06_snippet_47\n\nLANGUAGE: logtalk\nCODE:\n```\n:- object(an_object).\n\n    :- uses(user, [data/1]).\n\n    :- public(some_predicate/1).\n    some_predicate(Arg) :-\n        retractall(data(_)),\n        assertz(data(Arg)).\n\n:- end_object.\n```\n\n----------------------------------------\n\nTITLE: Loading Brick Example and Required Libraries\nDESCRIPTION: This code loads the brick example and necessary library files for the demonstration.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/bricks/NOTES.md#2025-04-06_snippet_1\n\nLANGUAGE: logtalk\nCODE:\n```\nlogtalk_load(bricks(loader)).\n```\n\n----------------------------------------\n\nTITLE: Testing Arbitrary Library in Logtalk\nDESCRIPTION: Demonstrates how to load and run tests for the arbitrary library predicates.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/libraries/arbitrary.rst.txt#2025-04-06_snippet_1\n\nLANGUAGE: logtalk\nCODE:\n```\n| ?- logtalk_load(arbitrary(tester)).\n```\n\n----------------------------------------\n\nTITLE: Recording Individual Shop Sales\nDESCRIPTION: Shows how individual shops maintain their own sales records while sharing product information.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/design_patterns/structural/flyweight/NOTES.md#2025-04-06_snippet_4\n\nLANGUAGE: logtalk\nCODE:\n```\nshop1::sell_cheese(blue, 3), shop2::sell_cheese(blue, 8).\n```\n\n----------------------------------------\n\nTITLE: Modes and Number of Proofs for question_hook/6\nDESCRIPTION: Specifies the argument modes and expected number of proofs for the question_hook/6 method. The method takes various inputs and produces a term as output with zero or one solutions.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/refman/methods/question_hook_6.rst.txt#2025-04-06_snippet_1\n\nLANGUAGE: logtalk\nCODE:\n```\nquestion_hook(+nonvar, +nonvar, +nonvar, +list(nonvar), +callable, -term) - zero_or_one\n```\n\n----------------------------------------\n\nTITLE: IPv6 Address Grammar Definition\nDESCRIPTION: Grammar for parsing IPv6 addresses in XXXX.XXXX.XXXX.XXXX.XXXX.XXXX.XXXX.XXXX format where each X is a hexadecimal digit. Takes a list of integers as argument and produces exactly one parse.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/ip_grammars_1.rst.txt#2025-04-06_snippet_1\n\nLANGUAGE: logtalk\nCODE:\n```\nipv6//1\n```\n\n----------------------------------------\n\nTITLE: XML Parsing with parse/2 in Logtalk\nDESCRIPTION: Parses a list of character codes to/from a data structure of the form xml(<atts>,<content>). This predicate works bi-directionally, allowing both parsing from codes to structure and generation from structure to codes.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/xml_0.rst.txt#2025-04-06_snippet_0\n\nLANGUAGE: Logtalk\nCODE:\n```\nparse(Codes,Document)\n```\n\n----------------------------------------\n\nTITLE: Querying Logtalk for Loaded Libraries\nDESCRIPTION: Prolog query to find the names of all libraries used by a loaded Logtalk application. This is useful when preparing to embed an application.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/scripts/embedding/NOTES.md#2025-04-06_snippet_1\n\nLANGUAGE: prolog\nCODE:\n```\n| ?- setof(Library, File^(logtalk::loaded_file_property(File, library(Library))), Libraries).\n```\n\n----------------------------------------\n\nTITLE: Examples of phrase/3 Usage in Logtalk\nDESCRIPTION: Provides examples of how to use phrase/3 with different scopes: with local non-terminals, non-terminals within the scope of self, and public non-terminals of explicit objects.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/refman/methods/phrase_3.rst.txt#2025-04-06_snippet_3\n\nLANGUAGE: Logtalk\nCODE:\n```\nphrase(NonTerminal, Input, Rest)\nphrase(::NonTerminal, Input, Rest)\nphrase(Object::NonTerminal, Input, Rest)\n```\n\n----------------------------------------\n\nTITLE: Parsing Arithmetic Expressions with DCG in Logtalk\nDESCRIPTION: Uses the calculator object to parse a simple arithmetic expression using DCG rules.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/dcgs/NOTES.md#2025-04-06_snippet_1\n\nLANGUAGE: logtalk\nCODE:\n```\ncalculator::parse(\"1+2-3*4\", Result).\n```\n\n----------------------------------------\n\nTITLE: Library Path Expansion Predicate\nDESCRIPTION: Expands library aliases or paths into absolute paths using depth-bound loop prevention.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/logtalk_0.rst.txt#2025-04-06_snippet_3\n\nLANGUAGE: logtalk\nCODE:\n```\nexpand_library_path(LibraryPath,AbsolutePath)\n```\n\n----------------------------------------\n\nTITLE: Defining lgtdoc_messages Category in RST\nDESCRIPTION: This RST snippet defines the lgtdoc_messages category, specifying its purpose, availability, author information, and provided predicates. It also includes details about compilation flags and remarks.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/lgtdoc_messages_0.rst.txt#2025-04-06_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. index:: single: lgtdoc_messages\n.. _lgtdoc_messages/0:\n\n.. rst-class:: right\n\n**category**\n\n``lgtdoc_messages``\n===================\n\nLogtalk documentation tool default message translations.\n\n| **Availability:** \n|    ``logtalk_load(lgtdoc(loader))``\n\n| **Author:** Paulo Moura\n| **Version:** 4:0:1\n| **Date:** 2024-12-02\n\n| **Compilation flags:**\n|    ``static``\n\n\n| **Provides:**\n|    :ref:`logtalk::message_prefix_stream/4 <logtalk/0::message_prefix_stream/4>`\n|    :ref:`logtalk::message_tokens//2 <logtalk/0::message_tokens//2>`\n\n| **Remarks:**\n|    (none)\n\n| **Inherited public predicates:**\n|    (none)\n\n.. contents::\n   :local:\n   :backlinks: top\n\nPublic predicates\n-----------------\n\n(no local declarations; see entity ancestors if any)\n\nProtected predicates\n--------------------\n\n(no local declarations; see entity ancestors if any)\n\nPrivate predicates\n------------------\n\n(no local declarations; see entity ancestors if any)\n\nOperators\n---------\n\n(none)\n```\n\n----------------------------------------\n\nTITLE: Querying Engine Name in Logtalk\nDESCRIPTION: The threaded_engine_self/1 predicate is used to query the name of the engine calling it. It takes one argument which unifies with the engine name. This predicate requires a backend Prolog compiler with compatible multi-threading primitives.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/refman/predicates/threaded_engine_self_1.rst#2025-04-06_snippet_0\n\nLANGUAGE: Prolog\nCODE:\n```\nthreaded_engine_self(Engine)\n```\n\n----------------------------------------\n\nTITLE: Example usage of eos//0 in a DCG rule\nDESCRIPTION: Shows a DCG rule that uses the eos//0 method to ensure the entire input is consumed after matching the sequence 'abc'.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/refman/methods/eos_0.rst.txt#2025-04-06_snippet_2\n\nLANGUAGE: logtalk\nCODE:\n```\nabc --> a, b, c, eos.\n```\n\n----------------------------------------\n\nTITLE: Context Method Signature - Logtalk\nDESCRIPTION: Basic method signature showing the context/1 predicate format that returns the execution context.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/refman/methods/context_1.rst.txt#2025-04-06_snippet_0\n\nLANGUAGE: logtalk\nCODE:\n```\ncontext(Context)\n```\n\n----------------------------------------\n\nTITLE: Cut Method Mode Declaration\nDESCRIPTION: Mode declaration for the cut operator, indicating it provides exactly one proof.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/refman/methods/cut_0.rst#2025-04-06_snippet_1\n\nLANGUAGE: logtalk\nCODE:\n```\n! - one\n```\n\n----------------------------------------\n\nTITLE: Testing Types Library in Logtalk\nDESCRIPTION: Illustrates how to load and run the tester for the 'types' library predicates. This is useful for verifying the correct functionality of the library.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/libraries/types.rst.txt#2025-04-06_snippet_2\n\nLANGUAGE: prolog\nCODE:\n```\n| ?- logtalk_load(types(tester)).\n```\n\n----------------------------------------\n\nTITLE: Object Declaration\nDESCRIPTION: Declaration of the code_metrics object which inherits from code_metric and uses functionality from the logtalk object. It's used to apply all loaded code metrics and includes static and context_switching_calls compilation flags.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/code_metrics_0.rst.txt#2025-04-06_snippet_0\n\nLANGUAGE: logtalk\nCODE:\n```\ncode_metrics\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Category Directive Usage in Logtalk\nDESCRIPTION: Provides examples of using the category/1-4 directive in Logtalk, showcasing different ways to define categories with various combinations of implementing protocols, extending categories, and complementing objects.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/refman/directives/category_1_4.rst.txt#2025-04-06_snippet_2\n\nLANGUAGE: logtalk\nCODE:\n```\n:- category(monitoring).\n\n:- category(monitoring,\n    implements(monitoringp)).\n\n:- category(attributes,\n    implements(protected::variables)).\n\n:- category(extended,\n    extends(minimal)).\n\n:- category(logging,\n    implements(monitoring),\n    complements(employee)).\n```\n\n----------------------------------------\n\nTITLE: Using Coroutining Predicates with Implicit Message-Sending in Logtalk\nDESCRIPTION: Directive to add to objects or categories to enable implicit message-sending for coroutining predicates. This allows calling the predicates directly without explicitly specifying the coroutining object.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/libraries/coroutining.rst.txt#2025-04-06_snippet_2\n\nLANGUAGE: prolog\nCODE:\n```\n:- uses(coroutining, [\n    dif/2, dif/1, freeze/2, frozen/2, when/2\n]).\n```\n\n----------------------------------------\n\nTITLE: Expanding Grammar Rules in Logtalk\nDESCRIPTION: Demonstrates how to use the grammar_rules_hook object to expand grammar rules into clauses independently of the compiler.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/libraries/hook_objects.rst#2025-04-06_snippet_4\n\nLANGUAGE: Prolog\nCODE:\n```\n| ?- grammar_rules_hook::term_expansion((a --> [b],c), Clause).\n```\n\n----------------------------------------\n\nTITLE: Protocol Creation Mode Declaration\nDESCRIPTION: Specifies the mode declaration and number of proofs for the create_protocol/3 predicate.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/refman/predicates/create_protocol_3.rst#2025-04-06_snippet_1\n\nLANGUAGE: prolog\nCODE:\n```\ncreate_protocol(?protocol_identifier, @list(protocol_relation), @list(protocol_directive)) - one\n```\n\n----------------------------------------\n\nTITLE: Log Event Predicate - log_event/2\nDESCRIPTION: Predicate for logging an event to a log file specified by alias. Fails if the alias is not defined.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/loggingp_0.rst.txt#2025-04-06_snippet_3\n\nLANGUAGE: logtalk\nCODE:\n```\nlog_event(+atom,+nonvar)\n```\n\n----------------------------------------\n\nTITLE: Installing Texinfo on macOS via MacPorts\nDESCRIPTION: Shell command to install the required Texinfo package using MacPorts on macOS.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/devtools/help.rst.txt#2025-04-06_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\n$ sudo port install texinfo\n```\n\n----------------------------------------\n\nTITLE: Loading TSV Library in Logtalk\nDESCRIPTION: Demonstrates how to load all entities in the TSV library using the loader file.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/libraries/tsv.rst.txt#2025-04-06_snippet_0\n\nLANGUAGE: Logtalk\nCODE:\n```\n| ?- logtalk_load(tsv(loader)).\n```\n\n----------------------------------------\n\nTITLE: Opening vault with original password after hacker attempt in Logtalk\nDESCRIPTION: This snippet shows that the original, correct password still opens the vault, despite the hacker's attempts to modify the behavior.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/complements/restrict/NOTES.md#2025-04-06_snippet_6\n\nLANGUAGE: logtalk\nCODE:\n```\nmy_vault::open('!\"#$%&/()=').\n```\n\n----------------------------------------\n\nTITLE: Example Usage Query in Prolog\nDESCRIPTION: Shows an example query checking if the logging category complements the employee object.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/refman/predicates/complements_object_2.rst.txt#2025-04-06_snippet_2\n\nLANGUAGE: prolog\nCODE:\n```\n| ?- complements_object(logging, employee).\n```\n\n----------------------------------------\n\nTITLE: Copying Files in Logtalk\nDESCRIPTION: Copies a file to a new location. Throws an error if the original file does not exist or if the copy cannot be created.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/osp_0.rst.txt#2025-04-06_snippet_7\n\nLANGUAGE: prolog\nCODE:\n```\ncopy_file(File, Copy)\n```\n\n----------------------------------------\n\nTITLE: Console Interaction Example with Local Operators\nDESCRIPTION: Example console interaction showing the behavior differences between global operators and entity-local operators. It demonstrates how the <=> operator is interpreted differently inside and outside the ops object.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/refman/directives/op_3.rst#2025-04-06_snippet_4\n\nLANGUAGE: text\nCODE:\n```\n| ?- {ops}.\n<=>(1,2)\ntrue.\n\n| ?- ops::w(<=>(1,2)).\n1<=>2\ntrue.\n\n| ?- ops::r(T).\n|: 3<=>4.\n\nT = <=>(3, 4).\n\n| ?- read(T).\n|: 5<=>6.\n\nSYNTAX ERROR: operator expected\n```\n\n----------------------------------------\n\nTITLE: Checking Sublist Relationship in Logtalk\nDESCRIPTION: Checks if one list is a sublist of another list.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/listp_0.rst.txt#2025-04-06_snippet_22\n\nLANGUAGE: Logtalk\nCODE:\n```\nsublist(Sublist,List)\n```\n\n----------------------------------------\n\nTITLE: Executing Recursive Adaptive 4-Point Gaussian Integration with 8 Threads\nDESCRIPTION: Integrates the 'quiver' function using the recursive adaptive 4-point Gaussian quadrature scheme (NP=4) with 8 threads from 0.001 to 0.999 with a specified error tolerance.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/threads/integration/NOTES.md#2025-04-06_snippet_3\n\nLANGUAGE: logtalk\nCODE:\n```\nquadrec(8)::integrate(quiver, 0.001, 0.999, 4, 1.0e-10, Integral).\n```\n\n----------------------------------------\n\nTITLE: Generating Base64 Data in Logtalk\nDESCRIPTION: Generates Base64 data in the specified representation (atom, chars, codes, stream, or file) from a list of bytes. This predicate is compiled with the 'static' flag and expects a compound sink and a list of bytes as input.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/base64_0.rst.txt#2025-04-06_snippet_1\n\nLANGUAGE: Logtalk\nCODE:\n```\ngenerate(Sink,Bytes)\n```\n\n----------------------------------------\n\nTITLE: Writing CSV File from Predicate in Logtalk\nDESCRIPTION: Shows how to write CSV data from a predicate to a file, demonstrating the effect of the IgnoreQuotes option on the output.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/libraries/csv.rst#2025-04-06_snippet_5\n\nLANGUAGE: prolog\nCODE:\n```\n| ?- csv(keep, comma, true)::write_file('output.csv', user, p/3).\nyes\n\n| ?- csv(keep, comma, false)::write_file('output.csv', user, p/3).\nyes\n```\n\n----------------------------------------\n\nTITLE: Demonstrating current_predicate/1 Usage in Logtalk Object\nDESCRIPTION: Illustrates the usage of current_predicate/1 within a Logtalk object, showing how it enumerates locally visible predicates including those from uses directives.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/refman/methods/current_predicate_1.rst#2025-04-06_snippet_2\n\nLANGUAGE: Logtalk\nCODE:\n```\n:- object(foo).\n\n    :- uses(bar, [\n        baz/1, quux/2\n    ]).\n\n    :- public(pred/1).\n    pred(X) :-\n       current_predicate(X).\n\n:- end_object.\n```\n\n----------------------------------------\n\nTITLE: Grouping Sorted Pairs by Key\nDESCRIPTION: The group_sorted_by_key/2 predicate groups pairs by sorting and combining values for each key into lists. Results are sorted by key.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/pairs_0.rst.txt#2025-04-06_snippet_6\n\nLANGUAGE: logtalk\nCODE:\n```\ngroup_sorted_by_key(Pairs,Groups)\n```\n\n----------------------------------------\n\nTITLE: Implementing File Wrapper Hook Object in Logtalk\nDESCRIPTION: A hook object that wraps Prolog files by converting them into Logtalk objects implementing a specified protocol. Uses term_expansion to modify the file content during loading.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/userman/expansion.rst.txt#2025-04-06_snippet_3\n\nLANGUAGE: logtalk\nCODE:\n```\n:- object(wrapper(_Protocol_),\n    implements(expanding)).\n\n    term_expansion(begin_of_file, (:- object(Name,implements(_Protocol_)))) :-\n        logtalk_load_context(file, File),\n        os::decompose_file_name(File,_ , Name, _).\n\n    term_expansion(end_of_file, (:- end_object)).\n\n:- end_object.\n```\n\n----------------------------------------\n\nTITLE: Modes and Number of Proofs for category_property/2\nDESCRIPTION: Specifies the calling modes and expected number of solutions for the category_property/2 predicate. It accepts optional variables or specific values for both the category identifier and property.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/refman/predicates/category_property_2.rst#2025-04-06_snippet_1\n\nLANGUAGE: prolog\nCODE:\n```\ncategory_property(?category_identifier, ?category_property) - zero_or_more\n```\n\n----------------------------------------\n\nTITLE: Calculating Days in Month in Logtalk\nDESCRIPTION: Defines the 'days_in_month/3' predicate that determines the number of days in a specific month of a given year, accounting for leap years affecting February.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/datep_0.rst.txt#2025-04-06_snippet_4\n\nLANGUAGE: Logtalk\nCODE:\n```\ndays_in_month(Month,Year,Days)\n```\n\n----------------------------------------\n\nTITLE: Left Fold with First Element - Logtalk Meta-Predicate\nDESCRIPTION: Left associative list folding using first element as initial accumulator. Fails for empty lists.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/metap_0.rst.txt#2025-04-06_snippet_7\n\nLANGUAGE: logtalk\nCODE:\n```\nfold_left_1(Closure,List,Result)\n```\n\n----------------------------------------\n\nTITLE: Defining Lambda Expressions Grammar in Logtalk (BNF)\nDESCRIPTION: Specifies the BNF grammar for Logtalk lambda expressions, including free variables and parameters. Defines the structure for creating anonymous functions in Logtalk.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/refman/grammar.rst#2025-04-06_snippet_5\n\nLANGUAGE: BNF\nCODE:\n```\nlambda_expression ::=\n      lambda_free_variables \"/\" lambda_parameters \">>\" callable\n      | lambda_free_variables \"/\" callable\n      | lambda_parameters \">>\" callable\n\n   lambda_free_variables ::=\n      \"{\" variables? \"}\"\n\n   lambda_parameters ::=\n      \"[\" terms? \"]\"\n\n   variables ::=\n      variable\n      | variable \",\" variables\n\n   terms ::=\n      term\n      | term \",\" terms\n```\n\n----------------------------------------\n\nTITLE: Encoding Data with CBOR in Logtalk\nDESCRIPTION: Example of using the generate/2 predicate to encode Logtalk data structures into CBOR format.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/libraries/cbor.rst#2025-04-06_snippet_1\n\nLANGUAGE: logtalk\nCODE:\n```\n| ?- cbor::generate([a,{b-c}], Encoding).\nEncoding = [0x9f,0x61,0x61,0xbf,0x61,0x62,0x61,0x63,0xff,0xff]\nyes\n```\n\n----------------------------------------\n\nTITLE: Checking Logtalk and Prolog Versions\nDESCRIPTION: Prints the versions of Logtalk, the Prolog backend, and the kernel if running as a notebook.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/threads/sorting/NOTES.md#2025-04-06_snippet_0\n\nLANGUAGE: logtalk\nCODE:\n```\n%versions\n```\n\n----------------------------------------\n\nTITLE: PDF to Text Conversion\nDESCRIPTION: Converts a PDF file to a text file using the document converter.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/document_converter/NOTES.md#2025-04-06_snippet_4\n\nLANGUAGE: logtalk\nCODE:\n```\ndocument::convert('test_files/sample.pdf', 'test_files/sample.txt').\n```\n\n----------------------------------------\n\nTITLE: Running Whisper Example with 5 Engines and Higher Initial Value\nDESCRIPTION: Executes the whisper query with 5 engines and an initial value of 3, which passes the value through five engines, incrementing it each time.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/engines/whisper/NOTES.md#2025-04-06_snippet_5\n\nLANGUAGE: logtalk\nCODE:\n```\nwhisper::whisper(5, 3, Final).\n```\n\n----------------------------------------\n\nTITLE: Querying Hello World Messages\nDESCRIPTION: Retrieves hello world messages in different languages using the babel object with error handling\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/encodings/NOTES.md#2025-04-06_snippet_2\n\nLANGUAGE: logtalk\nCODE:\n```\ncatch(babel::hello_world(Code, Text), Error, true).\n```\n\n----------------------------------------\n\nTITLE: Loading All Hook Objects in Logtalk\nDESCRIPTION: Loads all hook objects in the library using the loader file.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/library/hook_objects/NOTES.md#2025-04-06_snippet_0\n\nLANGUAGE: Logtalk\nCODE:\n```\n| ?- logtalk_load(hook_objects(loader)).\n```\n\n----------------------------------------\n\nTITLE: Activating the Ports Profiler in Logtalk\nDESCRIPTION: Activates the ports profiler for followup goals. This predicate is compiled with the 'static' flag and provides one proof.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/ports_profiler_0.rst.txt#2025-04-06_snippet_0\n\nLANGUAGE: Logtalk\nCODE:\n```\nstart/0\n```\n\n----------------------------------------\n\nTITLE: Line-by-Line TSV Stream Reading\nDESCRIPTION: Reads a TSV stream line by line and saves data as clauses for a specified object predicate. Takes stream, target object, and predicate indicator as arguments.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/tsv_protocol_0.rst.txt#2025-04-06_snippet_5\n\nLANGUAGE: logtalk\nCODE:\n```\nread_stream_by_line(Stream,Object,Predicate)\n```\n\n----------------------------------------\n\nTITLE: Testing Elderly Driver Access\nDESCRIPTION: Tests if Mr. Magoo can drive the car through the proxy object.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/design_patterns/structural/proxy/NOTES.md#2025-04-06_snippet_4\n\nLANGUAGE: logtalk\nCODE:\n```\ncar_proxy(packard_645, magoo)::drive.\n```\n\n----------------------------------------\n\nTITLE: Loading the Redis Library Test Suite in Logtalk\nDESCRIPTION: Command to load and run the test suite for the Redis client library. The tests assume a Redis server running on localhost at port 6379 unless environment variables specify otherwise.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/library/redis/NOTES.md#2025-04-06_snippet_1\n\nLANGUAGE: Prolog\nCODE:\n```\n| ?- logtalk_load(redis(tester)).\n```\n\n----------------------------------------\n\nTITLE: Defining manhattan_norm/2 Predicate for Number Lists in Logtalk\nDESCRIPTION: Calculates the Manhattan norm of a list of numbers. Fails if the list is empty.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/numberlistp_0.rst.txt#2025-04-06_snippet_10\n\nLANGUAGE: Logtalk\nCODE:\n```\nmanhattan_norm(List,Norm)\n```\n\n----------------------------------------\n\nTITLE: Checking Predicate Line Numbers in Logtalk\nDESCRIPTION: Query to check the start line number for an entity predicate definition, useful for working around line number issues with clause breakpoints.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/tools/debugger/NOTES.md#2025-04-06_snippet_7\n\nLANGUAGE: Prolog\nCODE:\n```\n| ?- object_property(Entity, defines(Functor/Arity, Properties)).\n```\n\n----------------------------------------\n\nTITLE: Collecting Zero or More Terminals Without Closure in Logtalk\nDESCRIPTION: Eagerly collects zero or more terminals without a specific closure. It returns a list of atomic terminals.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/sequence_grammars_0.rst.txt#2025-04-06_snippet_2\n\nLANGUAGE: Logtalk\nCODE:\n```\nzero_or_more(Terminals)\n```\n\n----------------------------------------\n\nTITLE: Integrating Circle Function Using QuadSplit2D with 16 Threads\nDESCRIPTION: Performs integration of the circle function over a square domain using quadsplit2d with 16 threads and measures execution time.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/threads/integration2d/NOTES.md#2025-04-06_snippet_4\n\nLANGUAGE: logtalk\nCODE:\n```\ntime(quadsplit2d(16)::integrate(circle, -2, 2, -2, 2, 2, 2.5e-10, Integral)).\n```\n\n----------------------------------------\n\nTITLE: Specifying Meta-non-terminal Template for phrase//1 in Prolog\nDESCRIPTION: Provides the meta-non-terminal template for the phrase//1 method, indicating it takes a single argument of arity 0.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/refman/methods/phrase_1.rst#2025-04-06_snippet_1\n\nLANGUAGE: Prolog\nCODE:\n```\nphrase(0)\n```\n\n----------------------------------------\n\nTITLE: Defining dot_graph_language Object in Logtalk\nDESCRIPTION: This snippet defines the dot_graph_language object in Logtalk, specifying its implementation of the graph_language_protocol, imports, and usage of other objects. It also provides information about the object's availability, author, version, and compilation flags.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/dot_graph_language_0.rst.txt#2025-04-06_snippet_0\n\nLANGUAGE: Logtalk\nCODE:\n```\n\"dot_graph_language\"\n======================\n\nPredicates for generating graph files in the DOT language (version 2.36.0 or later).\n\n| **Availability:** \n|    \"logtalk_load(diagrams(loader))\"\n\n| **Author:** Paulo Moura\n| **Version:** 3:11:0\n| **Date:** 2024-12-07\n\n| **Compilation flags:**\n|    \"static, context_switching_calls\"\n\n\n| **Implements:**\n|    \"public\" :ref:`graph_language_protocol <graph_language_protocol/0>`\n| **Imports:**\n|    \"public\" :ref:`options <options/0>`\n| **Provides:**\n|    :ref:`graph_language_registry::language_object/2 <graph_language_registry/0::language_object/2>`\n| **Uses:**\n|    :ref:`list <list/0>`\n|    :ref:`os <os/0>`\n|    :ref:`term_io <term_io/0>`\n|    :ref:`user <user/0>`\n```\n\n----------------------------------------\n\nTITLE: Binary File Assertion Predicate in Logtalk Unit Testing\nDESCRIPTION: Returns an assertion for checking that a given file has the expected binary contents. File paths are relative to the tests object path.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/lgtunit_0.rst.txt#2025-04-06_snippet_65\n\nLANGUAGE: Logtalk\nCODE:\n```\nbinary_file_assertion(File,Bytes,Assertion)\n```\n\n----------------------------------------\n\nTITLE: Extending message_tokens//2 with Custom Message Formatting\nDESCRIPTION: Example showing how to extend the message_tokens//2 non-terminal to handle custom message formats. This example defines handling for 'redefining_entity' messages in the 'core' component.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/refman/methods/message_tokens_2.rst.txt#2025-04-06_snippet_2\n\nLANGUAGE: prolog\nCODE:\n```\n:- multifile(logtalk::message_tokens//2).\n:- dynamic(logtalk::message_tokens//2).\n\nlogtalk::message_tokens(redefining_entity(Type, Entity), core) -->\n    ['Redefining ~w ~q'-[Type, Entity], nl].\n```\n\n----------------------------------------\n\nTITLE: Parametric Category Usage\nDESCRIPTION: Demonstrates using a parametric category 'speech' with parameters for season and event type to get advice.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/parametric/NOTES.md#2025-04-06_snippet_12\n\nLANGUAGE: logtalk\nCODE:\n```\nspeech(winter, wedding)::advice.\n```\n\n----------------------------------------\n\nTITLE: Loading Files in Debug Mode\nDESCRIPTION: Command to load specific source files in debug mode.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/userman/debugging.rst#2025-04-06_snippet_2\n\nLANGUAGE: text\nCODE:\n```\n| ?- logtalk_load([file1, file2, ...], [debug(on)]).\n```\n\n----------------------------------------\n\nTITLE: Pack Version Definition with SSH URL\nDESCRIPTION: Example of defining a pack version using SSH URL for git archive access with version constraints and dependencies\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/devtools/packs.rst.txt#2025-04-06_snippet_21\n\nLANGUAGE: prolog\nCODE:\n```\nversion(\n    1:0:1,\n    stable,\n    'git@gitlab.com:me/foo.git/v1.0.1.zip',\n    sha256 - '0894c7cdb8968b6bbcf00e3673c1c16cfa98232573af30ceddda207b20a7a207',\n    [logtalk @>= 3:36:0],\n    all\n).\n```\n\n----------------------------------------\n\nTITLE: Checking Subterm Relationship in Logtalk\nDESCRIPTION: Defines a predicate to check if one term is a subterm of another.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/termp_0.rst.txt#2025-04-06_snippet_5\n\nLANGUAGE: Logtalk\nCODE:\n```\nsubterm(Subterm,Term)\n```\n\n----------------------------------------\n\nTITLE: Loading Issue Creator Tool in Logtalk\nDESCRIPTION: This query loads the issue_creator tool in Logtalk. It's typically used when the tool is not automatically loaded by the logtalk_tester script.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/tools/issue_creator/NOTES.md#2025-04-06_snippet_0\n\nLANGUAGE: Logtalk\nCODE:\n```\n?- logtalk_load(issue_creator(loader)).\n```\n\n----------------------------------------\n\nTITLE: Make Integration Code\nDESCRIPTION: Code to integrate tests with Logtalk's make system using hook predicates.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/devtools/lgtunit.rst#2025-04-06_snippet_5\n\nLANGUAGE: logtalk\nCODE:\n```\n:- multifile(logtalk_make_target_action/1).\n:- dynamic(logtalk_make_target_action/1).\n\nlogtalk_make_target_action(check) :-\n    tests::run.\n```\n\n----------------------------------------\n\nTITLE: Implementing a Stop Watch Monitor in Logtalk\nDESCRIPTION: Definition of a stop_watch object that implements the monitoring protocol to handle before and after events for profiling message execution times.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/tutorial/profiling.rst#2025-04-06_snippet_2\n\nLANGUAGE: text\nCODE:\n```\n:- object(stop_watch,\n    % event handler predicates protocol\n    implements(monitoring)).\n\n    :- uses(time, [cpu_time/1]).\n\n    before(Object, Message, Sender) :-\n        write(Object), write(' <-- '), writeq(Message),\n        write(' from '), write(Sender), nl, write('STARTING at '),\n        cpu_time(Seconds), write(Seconds), write(' seconds'), nl.\n\n    after(Object, Message, Sender) :-\n        write(Object), write(' <-- '), writeq(Message),\n        write(' from '), write(Sender), nl, write('ENDING at '),\n        cpu_time(Seconds), write(Seconds), write(' seconds'), nl.\n\n:- end_object.\n```\n\n----------------------------------------\n\nTITLE: Updating Multiple Key-Value Pairs in Dictionary in Logtalk\nDESCRIPTION: Updates multiple key-value pairs in a dictionary, returning the updated dictionary. Fails if any key is not found.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/dictionaryp_0.rst.txt#2025-04-06_snippet_9\n\nLANGUAGE: Logtalk\nCODE:\n```\nupdate(OldDictionary,Pairs,NewDictionary)\n```\n\n----------------------------------------\n\nTITLE: Setting Global Debug Flag in Logtalk\nDESCRIPTION: Query to set the debug flag globally in Logtalk. Note that loader files may override this setting.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/tools/debugger/NOTES.md#2025-04-06_snippet_3\n\nLANGUAGE: Prolog\nCODE:\n```\n| ?- set_logtalk_flag(debug, on).\n```\n\n----------------------------------------\n\nTITLE: Using Object Wrapper Hook for Prolog File Diagram Generation\nDESCRIPTION: This snippet shows an alternative method to generate diagrams for plain Prolog files using the object_wrapper_hook provided by the hook_objects library.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/devtools/diagrams.rst.txt#2025-04-06_snippet_12\n\nLANGUAGE: prolog\nCODE:\n```\n| ?- logtalk_load(hook_objects(loader)).\n...\n\n| ?- logtalk_load(code, [hook(object_wrapper_hook)]),\n     xref_diagram::entity(code).\n```\n\n----------------------------------------\n\nTITLE: Parsing PDDL Problem File\nDESCRIPTION: Parses a PDDL 3.0 problem file and returns the parsed content as a compound term. This predicate is used when the problem definition is in a standalone file.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/pddl_0.rst.txt#2025-04-06_snippet_2\n\nLANGUAGE: logtalk\nCODE:\n```\nparse_problem(File,Output)\n```\n\n----------------------------------------\n\nTITLE: Declaring Meta-predicate Template for setof/3 in Logtalk\nDESCRIPTION: Specifies the meta-predicate template for setof/3, indicating that the second argument is a goal (^) and the other two are regular terms (*).\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/refman/methods/setof_3.rst#2025-04-06_snippet_1\n\nLANGUAGE: Logtalk\nCODE:\n```\nsetof(*, ^, *)\n```\n\n----------------------------------------\n\nTITLE: Installing Specific Package Version in Logtalk\nDESCRIPTION: Predicate for installing a specific version of a package from a given registry using default options.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/packs_0.rst.txt#2025-04-06_snippet_1\n\nLANGUAGE: logtalk\nCODE:\n```\ninstall(Registry,Pack,Version)\n```\n\n----------------------------------------\n\nTITLE: Using imports_category/2 in Prolog Query\nDESCRIPTION: Example query using imports_category/2 to check if the xref_diagram object imports the diagram category.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/refman/predicates/imports_category_2_3.rst.txt#2025-04-06_snippet_2\n\nLANGUAGE: Prolog\nCODE:\n```\n| ?- imports_category(xref_diagram, diagram).\n```\n\n----------------------------------------\n\nTITLE: Setting Spy Point for Message Counter in Logtalk\nDESCRIPTION: Configures the message_counter to spy on all messages sent to the list object.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/profiling/NOTES.md#2025-04-06_snippet_3\n\nLANGUAGE: logtalk\nCODE:\n```\nmessage_counter::set_spy_point(_, list, _, _).\n```\n\n----------------------------------------\n\nTITLE: Printing Logtalk, Prolog Backend, and Kernel Versions\nDESCRIPTION: This snippet prints the versions of Logtalk, the Prolog backend, and the kernel if running as a notebook.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/threads/tak/NOTES.md#2025-04-06_snippet_0\n\nLANGUAGE: logtalk\nCODE:\n```\n%versions\n```\n\n----------------------------------------\n\nTITLE: Printing Banner Message in Logtalk\nDESCRIPTION: Example of using print_message/3 predicate to print a banner message, demonstrating the basic message printing functionality.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/userman/printing.rst#2025-04-06_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n| ?- logtalk::print_message(banner, core, banner).\n```\n\n----------------------------------------\n\nTITLE: Calling Prolog User-Defined Plain Predicates in Logtalk\nDESCRIPTION: Illustrates how to call user-defined Prolog plain predicates from within Logtalk objects or categories.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/userman/predicates.rst#2025-04-06_snippet_56\n\nLANGUAGE: logtalk\nCODE:\n```\nfoo :-\n    ...,\n    user::bar,\n    ...\n```\n\n----------------------------------------\n\nTITLE: Loading Type System Example in Logtalk\nDESCRIPTION: Loads the my_types example module containing custom temperature type definitions.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/my_types/NOTES.md#2025-04-06_snippet_1\n\nLANGUAGE: logtalk\nCODE:\n```\nlogtalk_load(my_types(loader)).\n```\n\n----------------------------------------\n\nTITLE: Encoding Text to Base64 in Logtalk\nDESCRIPTION: This example shows how to encode a text string 'Hello world!' into Base64 format using the base64::generate/2 predicate, with output as an atom and as a list of codes.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/library/base64/NOTES.md#2025-04-06_snippet_2\n\nLANGUAGE: Prolog\nCODE:\n```\n| ?- atom_codes('Hello world!', Bytes),\n     base64::generate(atom(Base64), Bytes).\nBase64 = 'SGVsbG8gd29ybGQh'\nBytes = [72,101,108,108,111,32,119,111,114,108,100,33]\nyes\n\n| ?- atom_codes('Hello world!', Bytes),\n     base64::generate(codes(Base64), Bytes).\nBase64 = [83,71,86,115,98,71,56,103,100,50,57,121,98,71,81,104]\nBytes = [72,101,108,108,111,32,119,111,114,108,100,33]\nyes\n```\n\n----------------------------------------\n\nTITLE: Attempting to Instantiate an Abstract Class\nDESCRIPTION: Demonstrates that creating an instance of an abstract class results in an error.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/reflection/NOTES.md#2025-04-06_snippet_5\n\nLANGUAGE: logtalk\nCODE:\n```\ncatch(ac::new(i), Error, true).\n```\n\n----------------------------------------\n\nTITLE: Example Usage of print_message_tokens/3 in Logtalk\nDESCRIPTION: Demonstrates how to use the print_message_tokens/3 method to print a message about redefining an object. The example shows printing to the user_error stream with a '% ' prefix and formatted tokens.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/refman/methods/print_message_tokens_3.rst.txt#2025-04-06_snippet_2\n\nLANGUAGE: Logtalk\nCODE:\n```\n...,\nlogtalk::print_message_tokens(user_error, '% ', ['Redefining ~w ~q'-[object,foo], nl]),\n...\n```\n\n----------------------------------------\n\nTITLE: Parsing Decimal Digit Sequence in Logtalk\nDESCRIPTION: Parses a sequence of zero or more decimal digits. Accepts a list of atomic values as input or output. Returns one proof.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/number_grammars_1.rst.txt#2025-04-06_snippet_3\n\nLANGUAGE: Logtalk\nCODE:\n```\ndigits(Digits)\n```\n\n----------------------------------------\n\nTITLE: Defining Concrete Class in Logtalk\nDESCRIPTION: Definition of the class that specializes abstract_class and serves as the root of the instantiation graph. Contains predicates common to all instantiable classes.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/tutorial/reflection.rst.txt#2025-04-06_snippet_2\n\nLANGUAGE: logtalk\nCODE:\n```\n:- object(class,\n    instantiates(class),\n    specializes(abstract_class)).\n\n    % predicates common to all instantiable classes\n\n:- end_object.\n```\n\n----------------------------------------\n\nTITLE: Using Expected Terms with or_else/3 in Logtalk\nDESCRIPTION: These examples show how to use the or_else/3 predicate with expected terms, demonstrating both successful and fallback cases.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/libraries/expecteds.rst.txt#2025-04-06_snippet_3\n\nLANGUAGE: Prolog\nCODE:\n```\n| ?- expected::of_expected(1, Expected), expected(Expected)::or_else(Value, 0).\nExpected = expected(1),\nValue = 1\nyes\n\n| ?- expected::of_unexpected(-1, Expected), expected(Expected)::or_else(Value, 0).\nExpected = unexpected(-1),\nValue = 0\nyes\n```\n\n----------------------------------------\n\nTITLE: Benchmarking FFT Performance with Large Input in Logtalk\nDESCRIPTION: Measures the execution time of FFT calculations for a large input (N=16384) using 1, 2, and 4 threads.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/threads/fft/NOTES.md#2025-04-06_snippet_3\n\nLANGUAGE: logtalk\nCODE:\n```\nN=16384, cgenerator::list(N, L), time(fft(1)::fft(N,L,F1)), time(fft(2)::fft(N,L,F2)), time(fft(4)::fft(N,L,F3)).\n```\n\n----------------------------------------\n\nTITLE: File Reading Predicate Definition in Logtalk\nDESCRIPTION: Defines the read_file/2 predicate that reads a file character by character and converts it into a list of atoms. Takes a file name as input and returns the parsed list of atoms. Requires static compilation flag.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/read_file_0.rst.txt#2025-04-06_snippet_0\n\nLANGUAGE: logtalk\nCODE:\n```\nread_file(+atom,-list(atom))\n```\n\n----------------------------------------\n\nTITLE: TSV Stream to List Conversion\nDESCRIPTION: Reads a TSV stream and returns data as a list of rows, where each row is a list of fields. Takes stream and returns rows list. Fails if stream cannot be parsed.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/tsv_protocol_0.rst.txt#2025-04-06_snippet_3\n\nLANGUAGE: logtalk\nCODE:\n```\nread_stream(Stream,Rows)\n```\n\n----------------------------------------\n\nTITLE: Declaring Compilation Flags\nDESCRIPTION: RST code showing the required compilation flags for the automation_report object.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/automation_report_0.rst.txt#2025-04-06_snippet_2\n\nLANGUAGE: rst\nCODE:\n```\n``static, context_switching_calls``\n```\n\n----------------------------------------\n\nTITLE: Threaded Exit Usage Examples\nDESCRIPTION: Example usage patterns for retrieving asynchronous goal results using threaded_exit.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/refman/predicates/threaded_exit_1_2.rst#2025-04-06_snippet_2\n\nLANGUAGE: prolog\nCODE:\n```\nthreaded_exit(Goal)\nthreaded_exit(::Goal)\nthreaded_exit(Object::Goal)\n```\n\n----------------------------------------\n\nTITLE: List Terms Difference Constraint in Logtalk\nDESCRIPTION: Sets constraints to ensure all terms in a provided list are different from each other. Takes a list of terms as input and provides zero or one solutions.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/dif_0.rst.txt#2025-04-06_snippet_1\n\nLANGUAGE: logtalk\nCODE:\n```\ndif(Terms)\n```\n\n----------------------------------------\n\nTITLE: Printing All Profiling Data in Logtalk\nDESCRIPTION: Demonstrates how to print a table with all profile data after profiling.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/devtools/ports_profiler.rst.txt#2025-04-06_snippet_4\n\nLANGUAGE: Prolog\nCODE:\n```\n| ?- ports_profiler::data.\n```\n\n----------------------------------------\n\nTITLE: Meta-non-terminal Template for call//1-N in Logtalk\nDESCRIPTION: Shows the meta-call templates for call//1-N, indicating the number of arguments for different arities. The '0' refers to a zero-argument closure, while '*' indicates an arbitrary term argument.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/refman/methods/call_1.rst#2025-04-06_snippet_2\n\nLANGUAGE: Logtalk\nCODE:\n```\ncall(0)\ncall(1, *)\ncall(2, *, *)\n...\n```\n\n----------------------------------------\n\nTITLE: Message Prefix Stream Implementation Example\nDESCRIPTION: Example showing how to implement the message prefix stream method for information messages\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/refman/methods/message_prefix_stream_4.rst.txt#2025-04-06_snippet_2\n\nLANGUAGE: prolog\nCODE:\n```\n:- multifile(logtalk::message_prefix_stream/4).\n:- dynamic(logtalk::message_prefix_stream/4).\n\nlogtalk::message_prefix_stream(information, core, '% ', user_output).\n```\n\n----------------------------------------\n\nTITLE: Defining Maximum Size for Arbitrary Term Generator in Logtalk\nDESCRIPTION: Configures the maximum size parameter for the arbitrary term generator through a multifile predicate. The max_size/1 predicate is declared as multifile to allow multiple definitions, with the system using the first valid definition found or defaulting to 42.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/libraries/arbitrary.rst.txt#2025-04-06_snippet_10\n\nLANGUAGE: Logtalk\nCODE:\n```\n:- multifile(arbitrary::max_size/1).\narbitrary::max_size(7).\n```\n\n----------------------------------------\n\nTITLE: Reset Gensym Counter Predicate\nDESCRIPTION: Predicate that resets the generator counter for all bases. Declared as synchronized for thread safety when supported by the backend.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/gensym_core_0.rst.txt#2025-04-06_snippet_0\n\nLANGUAGE: logtalk\nCODE:\n```\nreset_gensym/0\n```\n\n----------------------------------------\n\nTITLE: Declaring Dynamic Predicate for File Sub-Diagrams in Logtalk\nDESCRIPTION: Defines a dynamic predicate sub_diagram_/1 to support the generation of file sub-diagrams. This predicate represents a table of file sub-diagrams.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/file_load_diagram_1.rst.txt#2025-04-06_snippet_0\n\nLANGUAGE: Logtalk\nCODE:\n```\nsub_diagram_/1\n```\n\n----------------------------------------\n\nTITLE: Creating XVM Prolog Files for 'wumpus' Example\nDESCRIPTION: This snippet shows how to create XVM Prolog files for embedding the 'wumpus' text adventure example. It uses the xvm_logtalk_pl.sh script to generate the necessary files and demonstrates how to load them.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/scripts/embedding/SCRIPT.txt#2025-04-06_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\n$ cd \"$LOGTALKHOME/scripts/embedding/xvm/\"\n$ ./xvm_logtalk_pl.sh -c -d \"$HOME\"/collect -l \"$LOGTALKUSER/examples/adventure/wumpus.lgt\" -g \"'::'(wumpus,main),halt\"\n$ cd ~/collect/\n$ xvmpl -f loader.pl\n```\n\n----------------------------------------\n\nTITLE: Reporting Memory Usage in Logtalk Tests\nDESCRIPTION: Example of reporting memory usage for a test using the statistics/2 predicate.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/devtools/lgtunit.rst.txt#2025-04-06_snippet_26\n\nLANGUAGE: logtalk\nCODE:\n```\ntest(ack_3, true(Result == 125), [note(memory-Memory)]) :-\n       statistics(memory_used, Memory0),\n       ack::ack(3, 4, Result),\n       statistics(memory_used, Memory1),\n       Memory is Memory1 - Memory0.\n```\n\n----------------------------------------\n\nTITLE: Sum Calculation with Goal Injection\nDESCRIPTION: Demonstrates an interactor with goal injection for calculating sums.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/engines/interactors/NOTES.md#2025-04-06_snippet_4\n\nLANGUAGE: logtalk\nCODE:\n```\ninteractors<<sums(S).\n```\n\n----------------------------------------\n\nTITLE: Writing Portable Dynamic Directive in Prolog\nDESCRIPTION: Shows the recommended way to write dynamic directives for better portability when compiling Prolog modules as Logtalk objects, avoiding atom operators.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/userman/migration.rst.txt#2025-04-06_snippet_3\n\nLANGUAGE: prolog\nCODE:\n```\n:- dynamic([foo/1, bar/2]).\n```\n\n----------------------------------------\n\nTITLE: Converting Logtalk XML Docs to HTML on Windows\nDESCRIPTION: PowerShell commands to navigate to the XML documentation directory and use the lgt2html script to convert the documentation to HTML format using the Saxon XSLT processor.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/userman/documenting.rst.txt#2025-04-06_snippet_8\n\nLANGUAGE: powershell\nCODE:\n```\nPS > cd xml_docs\nPS > lgt2html.ps1 -p saxon\n```\n\n----------------------------------------\n\nTITLE: Modes and Proof Specifications for threaded_engine_create/3\nDESCRIPTION: Defines the valid calling modes for threaded_engine_create/3, specifying the expected types for each argument and the number of proofs returned.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/refman/predicates/threaded_engine_create_3.rst.txt#2025-04-06_snippet_2\n\nLANGUAGE: prolog\nCODE:\n```\nthreaded_engine_create(@term, @callable, @nonvar) - one\nthreaded_engine_create(@term, @callable, --nonvar) - one\n```\n\n----------------------------------------\n\nTITLE: Clearing a named database\nDESCRIPTION: Removes all dynamic predicates from the 'my_db' database using db_clear/1.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/named_databases/NOTES.md#2025-04-06_snippet_8\n\nLANGUAGE: logtalk\nCODE:\n```\ndb_clear(my_db).\n```\n\n----------------------------------------\n\nTITLE: Defining Modes and Proofs for instantiates_class/2-3 in Logtalk\nDESCRIPTION: Specifies the mode declarations and number of proofs for the instantiates_class/2-3 predicate. Both versions accept variables or object identifiers as arguments and can return zero or more solutions.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/refman/predicates/instantiates_class_2_3.rst.txt#2025-04-06_snippet_1\n\nLANGUAGE: logtalk\nCODE:\n```\ninstantiates_class(?object_identifier, ?object_identifier) - zero_or_more\ninstantiates_class(?object_identifier, ?object_identifier, ?scope) - zero_or_more\n```\n\n----------------------------------------\n\nTITLE: Selecting and Replacing an Element in a List in Logtalk\nDESCRIPTION: Selects an element from a list, replaces it with a new element, and returns the resulting list.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/listp_0.rst.txt#2025-04-06_snippet_16\n\nLANGUAGE: Logtalk\nCODE:\n```\nselect(Old,OldList,New,NewList)\n```\n\n----------------------------------------\n\nTITLE: Dynamic Directive Declaration\nDESCRIPTION: Basic syntax for declaring the dynamic/0 directive which makes an entity and its contents dynamic. This allows the entity to be abolished at runtime.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/refman/directives/dynamic_0.rst.txt#2025-04-06_snippet_0\n\nLANGUAGE: logtalk\nCODE:\n```\ndynamic\n```\n\n----------------------------------------\n\nTITLE: Using Debug Meta-Messages in Logtalk Tests\nDESCRIPTION: Example of defining and using debug messages in tests that can be toggled without recompiling. This approach allows convenient debugging when running tests manually while suppressing these messages during automated testing.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/devtools/lgtunit.rst#2025-04-06_snippet_54\n\nLANGUAGE: logtalk\nCODE:\n```\n:- uses(logtalk, [\n    print_message(debug, my_app, Message) as dbg(Message)\n]).\n\ntest(some_test_id, ...) :-\n    ...,\n    dbg('Some intermediate value'-Value),\n    ...,\n    dbg([Stream]>>custom_print_goal(Stream, ...)),\n    ...\n```\n\n----------------------------------------\n\nTITLE: Recognizing a Rhombus Without Vertex Mapping\nDESCRIPTION: Recognizes a rhombus by defining its edges and querying for its class without vertex mapping.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/ncl/figures/NOTES.md#2025-04-06_snippet_5\n\nLANGUAGE: logtalk\nCODE:\n```\nfigures(_, _, _, _, _, _, _, _, _, _, _, _, _, _, _)::(\\n\\t\\tedge(a, b, 45, 10),\\n\\t\\tedge(b, c,  0, 10),\\n\\t\\tedge(c, d, 45, 10),\\n\\t\\tedge(d, a,  0, 10),\\n\\t\\tclass(Name)\\n\\t).\n```\n\n----------------------------------------\n\nTITLE: Querying Prototype3 Interface with Private Inheritance\nDESCRIPTION: Queries the interface of 'prototype3' which extends 'parent' using private inheritance, showing how public and protected predicates become private.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/inheritance/NOTES.md#2025-04-06_snippet_5\n\nLANGUAGE: logtalk\nCODE:\n```\nprototype3::interface.\n```\n\n----------------------------------------\n\nTITLE: Reading a TSV File into a List of Rows in Logtalk\nDESCRIPTION: Example of reading a TSV file and returning the content as a list of rows where each row is represented as a list of fields.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/libraries/tsv.rst#2025-04-06_snippet_2\n\nLANGUAGE: logtalk\nCODE:\n```\n| ?- tsv::read_file('test_files/data.tsv', Rows).\n\nRows = [['Name','Age','Address'], ['Paul',23,'1115 W Franklin'], ['Bessy the Cow',5,'Big Farm Way'], ['Zeke,45,'W Main St']]\nyes\n```\n\n----------------------------------------\n\nTITLE: Querying Statistics with Aliased Objects\nDESCRIPTION: Demonstrates using object aliases by calling the stats/3 predicate on the experiments object to calculate totals.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/object_aliases/NOTES.md#2025-04-06_snippet_2\n\nLANGUAGE: logtalk\nCODE:\n```\nexperiments::stats(TotalLess, TotalEqual, TotalGreater), Total is TotalLess + TotalEqual + TotalGreater.\n```\n\n----------------------------------------\n\nTITLE: Defining Edge in Logtalk Graph\nDESCRIPTION: Writes an edge between two nodes using the specified options. Takes a stream or alias, start node, end node, list of labels, kind, and a list of compound options as input.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/graph_language_protocol_0.rst.txt#2025-04-06_snippet_6\n\nLANGUAGE: Logtalk\nCODE:\n```\nedge(Stream,Start,End,Labels,Kind,Options)\n```\n\n----------------------------------------\n\nTITLE: Reading CSV Stream and Saving as Object Predicates in Logtalk\nDESCRIPTION: Reads a CSV stream and saves the data as clauses for the specified object predicate. Fails if the stream cannot be parsed. Requires stream or alias, object identifier, and predicate indicator as input.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/csv_protocol_0.rst.txt#2025-04-06_snippet_1\n\nLANGUAGE: Logtalk\nCODE:\n```\nread_stream(Stream,Object,Predicate)\n```\n\n----------------------------------------\n\nTITLE: Loading Wrapped Prolog Code\nDESCRIPTION: Example of loading wrapped Prolog code for linting using Logtalk's loader with source data enabled.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/devtools/linter.rst#2025-04-06_snippet_2\n\nLANGUAGE: prolog\nCODE:\n```\n| ?- logtalk_load(code, [source_data(on)]).\n```\n\n----------------------------------------\n\nTITLE: Testing the listing Library in Logtalk\nDESCRIPTION: Command to load the test file for the listing library to verify its functionality.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/libraries/listing.rst#2025-04-06_snippet_1\n\nLANGUAGE: logtalk\nCODE:\n```\n| ?- logtalk_load(listing(tester)).\n```\n\n----------------------------------------\n\nTITLE: Querying Descendant Object Properties in Logtalk\nDESCRIPTION: Shows how to query the area of a descendant object 'q2', which inherits behavior from its prototype. The prototype defines the area calculation logic used by its descendants.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/shapes/ph/NOTES.md#2025-04-06_snippet_3\n\nLANGUAGE: logtalk\nCODE:\n```\nq2::area(A).\n```\n\n----------------------------------------\n\nTITLE: Finding Unique Elements in a List with EDCG (Multiple Elements)\nDESCRIPTION: Uses the unique object to find the set of unique elements in a list containing repeated elements.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/edcgs/NOTES.md#2025-04-06_snippet_7\n\nLANGUAGE: logtalk\nCODE:\n```\nunique::unique([a,b,a], Unique).\n```\n\n----------------------------------------\n\nTITLE: Loading the Synchronization Example\nDESCRIPTION: Loads the sync example modules using the loader file.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/threads/sync/NOTES.md#2025-04-06_snippet_1\n\nLANGUAGE: logtalk\nCODE:\n```\nlogtalk_load(sync(loader)).\n```\n\n----------------------------------------\n\nTITLE: Getting Flag Values - Logtalk\nDESCRIPTION: Predicate to get or test the value of a flag. Takes a flag name and returns/tests its value.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/flags_0.rst.txt#2025-04-06_snippet_0\n\nLANGUAGE: logtalk\nCODE:\n```\nget_flag_value(Flag,Value)\n```\n\n----------------------------------------\n\nTITLE: Binary Pattern Recognition\nDESCRIPTION: Demonstrates coinductive predicate for recognizing cyclic lists of binary digits.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/coinduction/NOTES.md#2025-04-06_snippet_3\n\nLANGUAGE: logtalk\nCODE:\n```\nL = [1| L], binary::p(L).\n```\n\n----------------------------------------\n\nTITLE: Enabling Event Generation for Top-level Messages\nDESCRIPTION: This snippet ensures that top-level message goals generate events.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/bricks/NOTES.md#2025-04-06_snippet_4\n\nLANGUAGE: logtalk\nCODE:\n```\nset_logtalk_flag(events, allow).\n```\n\n----------------------------------------\n\nTITLE: Running Logtalk Library Tests\nDESCRIPTION: Shows how to run the tests for a Logtalk library using the logtalk_load/1 predicate with the tester file.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/library_index.rst.txt#2025-04-06_snippet_1\n\nLANGUAGE: Prolog\nCODE:\n```\nlogtalk_load(library_name(tester))\n```\n\n----------------------------------------\n\nTITLE: Describing a Pack in Logtalk\nDESCRIPTION: Example showing how to print information about a pack, including registry, description, license, home URL, and available versions.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/tools/packs/NOTES.md#2025-04-06_snippet_28\n\nLANGUAGE: prolog\nCODE:\n```\n| ?- packs::describe(lflat).\n```\n\n----------------------------------------\n\nTITLE: Creating File if Not Exists in Logtalk\nDESCRIPTION: Ensures that a file exists by creating it if necessary.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/osp_0.rst.txt#2025-04-06_snippet_10\n\nLANGUAGE: prolog\nCODE:\n```\nensure_file(File)\n```\n\n----------------------------------------\n\nTITLE: Expanding Grammar Rules in Logtalk\nDESCRIPTION: Shows how to use the grammar_rules_hook object to expand grammar rules into clauses independently of the compiler.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/library/hook_objects/NOTES.md#2025-04-06_snippet_4\n\nLANGUAGE: Logtalk\nCODE:\n```\n| ?- grammar_rules_hook::term_expansion((a --> [b],c), Clause).\n```\n\n----------------------------------------\n\nTITLE: Jam Thief Puzzle with Reasoning\nDESCRIPTION: Extended query that shows the reasoning behind identifying the jam thief\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/puzzles/NOTES.md#2025-04-06_snippet_5\n\nLANGUAGE: logtalk\nCODE:\n```\njam_thief::thief(Thief, Why).\n```\n\n----------------------------------------\n\nTITLE: Scanning the Standard Library for Dead Code in Logtalk\nDESCRIPTION: Applies the dead_code_scanner tool to the entire standard library to identify any unused predicates.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/tools/dead_code_scanner/SCRIPT.txt#2025-04-06_snippet_5\n\nLANGUAGE: prolog\nCODE:\n```\n| ?- dead_code_scanner::library(library).\n```\n\n----------------------------------------\n\nTITLE: Loading Polygon Example in Logtalk\nDESCRIPTION: Loads the polygon example and required library files using the logtalk_load/1 predicate.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/polygons/NOTES.md#2025-04-06_snippet_0\n\nLANGUAGE: logtalk\nCODE:\n```\nlogtalk_load(polygons(loader)).\n```\n\n----------------------------------------\n\nTITLE: Optional Term Transformation Predicates\nDESCRIPTION: Predicates for filtering and mapping optional terms\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/optional_1.rst.txt#2025-04-06_snippet_2\n\nLANGUAGE: logtalk\nCODE:\n```\nfilter(Closure,NewOptional)\nmap(Closure,NewOptional)\nflat_map(Closure,NewOptional)\n```\n\n----------------------------------------\n\nTITLE: Integrating i15 Function Using QuadRec2D with 4 Threads\nDESCRIPTION: Performs integration of the i15 test function over a square domain using quadrec2d with 4 threads and measures execution time.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/threads/integration2d/NOTES.md#2025-04-06_snippet_9\n\nLANGUAGE: logtalk\nCODE:\n```\ntime(quadrec2d(4)::integrate(i15, -2,2,-2,2, 2, 1.0e-4, Integral)).\n```\n\n----------------------------------------\n\nTITLE: Logtalk Make Predicate Mode Declaration\nDESCRIPTION: Mode declaration for logtalk_make/1 showing it takes an atom as input (+atom) and has zero or one solutions.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/refman/predicates/logtalk_make_1.rst.txt#2025-04-06_snippet_1\n\nLANGUAGE: prolog\nCODE:\n```\nlogtalk_make(+atom) - zero_or_one\n```\n\n----------------------------------------\n\nTITLE: Single-Threaded Quicksort\nDESCRIPTION: Generates a list of 20000 random floats and performs quicksort using a single thread. Uses the 'time/1' predicate to measure performance.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/threads/sorting/NOTES.md#2025-04-06_snippet_5\n\nLANGUAGE: logtalk\nCODE:\n```\ngenerator::list(20000, List), time(qsort(1)::qsort(List, Sorted)).\n```\n\n----------------------------------------\n\nTITLE: Loading the 'os' Object in Logtalk\nDESCRIPTION: Instruction for loading the 'os' object in Logtalk. This is required to use the operating-system access predicates provided by this object.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/os_0.rst.txt#2025-04-06_snippet_0\n\nLANGUAGE: Logtalk\nCODE:\n```\nlogtalk_load(os(loader))\n```\n\n----------------------------------------\n\nTITLE: XML Document Generation with DCG in Logtalk\nDESCRIPTION: Private DCG rule that generates a list of character codes from an XML document structure. Handles formatting based on the Format parameter and xml:space attributes.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/xml_0.rst.txt#2025-04-06_snippet_11\n\nLANGUAGE: Logtalk\nCODE:\n```\ndocument_generation(Format,Document)\n```\n\n----------------------------------------\n\nTITLE: Testing Dynamic Binding - Retract Value\nDESCRIPTION: Retracts the dynamic value from middle object.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/super_calls/NOTES.md#2025-04-06_snippet_8\n\nLANGUAGE: logtalk\nCODE:\n```\nmiddle::retractall(d(_)).\n```\n\n----------------------------------------\n\nTITLE: Using Multiple Hook Objects in Logtalk\nDESCRIPTION: A complete example showing how to use different hook objects for different parts of a source file by using multiple set_logtalk_flag directives.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/userman/expansion.rst#2025-04-06_snippet_8\n\nLANGUAGE: logtalk\nCODE:\n```\n:- object(h1,\n    implements(expanding)).\n\n    term_expansion((:- public(a/0)), (:- public(b/0))).\n    term_expansion(a, b).\n\n:- end_object.\n```\n\n----------------------------------------\n\nTITLE: Displaying Help for ECLiPSe Logtalk Script (Windows)\nDESCRIPTION: Command to show help and options for the Windows PowerShell script that creates ECLiPSe .eco files from Logtalk.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/scripts/embedding/eclipse/NOTES.md#2025-04-06_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\neclipse_logtalk_eco.ps1 -h\n```\n\n----------------------------------------\n\nTITLE: Enhanced Logtalk Compiler Warning Output with Tutor\nDESCRIPTION: Example of enhanced compiler warnings with the tutor tool loaded. Provides additional explanations and suggestions for the reported issues.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/devtools/tutor.rst#2025-04-06_snippet_2\n\nLANGUAGE: text\nCODE:\n```\n*     No matching clause for goal: baz(a)\n*       while compiling object main_include_compiler_warning\n*       in file logtalk/examples/errors/include_compiler_warning.lgt between lines 37-38\n*     Calls to locally defined predicates without a clause with a matching head\n*     fail. Typo in a predicate argument? Predicate definition incomplete?\n*\n*     Duplicated clause: b(one)\n*       first found at or above line 45\n*       while compiling object main_include_compiler_warning\n*       in file logtalk/examples/errors/include_compiler_warning.lgt at or above line 48\n*     Duplicated clauses are usually a source code editing error and can\n*     result in spurious choice-points, degrading performance. Delete or\n*     correct the duplicated clause to fix this warning.\n```\n\n----------------------------------------\n\nTITLE: Setting Logtalk Flags for Source Analysis\nDESCRIPTION: This snippet shows how to set the necessary Logtalk flags (source_data and optimize) to on for proper source code analysis using the dead_code_scanner tool.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/devtools/dead_code_scanner.rst#2025-04-06_snippet_2\n\nLANGUAGE: logtalk\nCODE:\n```\n| ?- set_logtalk_flag(source_data, on),\n     set_logtalk_flag(optimize, on).\n```\n\n----------------------------------------\n\nTITLE: Loading the Diagrams Object in Logtalk\nDESCRIPTION: This code snippet shows how to load the 'diagrams' object in Logtalk. It uses the 'logtalk_load' predicate to load the object from the 'diagrams(loader)' file.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/diagrams_0.rst.txt#2025-04-06_snippet_0\n\nLANGUAGE: Logtalk\nCODE:\n```\nlogtalk_load(diagrams(loader))\n```\n\n----------------------------------------\n\nTITLE: Declaring category_property/2 Predicate in Prolog\nDESCRIPTION: Defines the category_property/2 predicate, which enumerates properties of defined categories. It takes a category identifier and a property as arguments, both of which can be variables or ground terms.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/refman/predicates/category_property_2.rst.txt#2025-04-06_snippet_0\n\nLANGUAGE: Prolog\nCODE:\n```\ncategory_property(?category_identifier, ?category_property) - zero_or_more\n```\n\n----------------------------------------\n\nTITLE: Processing Purchase Request with Vice President in Chain of Responsibility\nDESCRIPTION: Demonstrates a purchase request of 11500 units that will be approved by the Vice President in the chain.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/design_patterns/behavioral/chain_of_responsibility/NOTES.md#2025-04-06_snippet_4\n\nLANGUAGE: logtalk\nCODE:\n```\nmanager::process_request(11500).\n```\n\n----------------------------------------\n\nTITLE: Loading Wrapped Prolog Code\nDESCRIPTION: Loads the wrapped Prolog code with source data enabled for analysis.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/devtools/code_metrics.rst.txt#2025-04-06_snippet_7\n\nLANGUAGE: prolog\nCODE:\n```\n| ?- logtalk_load(code, [source_data(on)]).\n```\n\n----------------------------------------\n\nTITLE: Printing Goals for Debugging in Logtalk\nDESCRIPTION: Shows how to use print_goal_hook for debugging by printing predicate goals before or after calling them.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/library/hook_objects/NOTES.md#2025-04-06_snippet_8\n\nLANGUAGE: Logtalk\nCODE:\n```\n| ?- set_logtalk_flag(hook, print_goal_hook).\n```\n\nLANGUAGE: Logtalk\nCODE:\n```\nfoo :-\n\t- bar,   % print goal before calling it\n\t+ baz,   % print goal after calling it\n\t* quux.  % print goal before and after calling it\n```\n\n----------------------------------------\n\nTITLE: Operational Mode for system_error/0 in Logtalk\nDESCRIPTION: The operational mode for the system_error/0 built-in method, indicating that it always results in an error when called.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/refman/methods/system_error_0.rst.txt#2025-04-06_snippet_2\n\nLANGUAGE: logtalk\nCODE:\n```\nsystem_error - error\n```\n\n----------------------------------------\n\nTITLE: Generating List Elements in Logtalk HTML\nDESCRIPTION: Example showing how to represent an ordered list with custom type and list items using term representation.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/library/html/NOTES.md#2025-04-06_snippet_0\n\nLANGUAGE: prolog\nCODE:\n```\nol([type-a], [li(foo), li(bar), li(baz)])\n```\n\n----------------------------------------\n\nTITLE: Squares Placement with WCD Constraint\nDESCRIPTION: Solves the squares placement problem using the 'dual' model with 'wcd' constraint method.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/constraints/sicstus/NOTES.md#2025-04-06_snippet_7\n\nLANGUAGE: logtalk\nCODE:\n```\nsquares::squares(dual,wcd).\n```\n\n----------------------------------------\n\nTITLE: Example Usage of logtalk_compile/1 in Logtalk\nDESCRIPTION: Demonstrates how to use the logtalk_compile/1 predicate to compile various Logtalk source files. Examples include compiling a single file in the current directory, a file from a library, and multiple files at once.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/refman/predicates/logtalk_compile_1.rst.txt#2025-04-06_snippet_2\n\nLANGUAGE: Logtalk\nCODE:\n```\n% compile to disk the \"set\" source file in the\n% current directory:\n| ?- logtalk_compile(set).\n\n% compile to disk the \"tree\" source file in the\n% \"types\" library directory:\n| ?- logtalk_load(types(tree)).\n\n% compile to disk the \"listp\" and \"list\" source\n% files in the current directory:\n| ?- logtalk_compile([listp, list]).\n```\n\n----------------------------------------\n\nTITLE: Solving 8-Queens problem\nDESCRIPTION: This snippet finds solutions for placing eight queens on a chessboard without threatening each other.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/miscellaneous/NOTES.md#2025-04-06_snippet_3\n\nLANGUAGE: logtalk\nCODE:\n```\nqueens::queens(8).\n```\n\n----------------------------------------\n\nTITLE: Uses/2 for Changing Argument Order\nDESCRIPTION: Shows how to use predicate aliases to change argument order in predicate calls.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/refman/directives/uses_2.rst#2025-04-06_snippet_5\n\nLANGUAGE: logtalk\nCODE:\n```\n:- uses(meta, [\n    fold_left(Closure,Accumulator,List,Result) as foldl(Closure,List,Accumulator,Result)\n]).\n```\n\n----------------------------------------\n\nTITLE: Declaring Coinductive Predicate in Logtalk\nDESCRIPTION: Example of declaring a coinductive predicate 'comember/2' using the coinductive/1 directive in Logtalk. Coinductive predicates are experimental and require backend Prolog compiler support for cyclic terms.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/userman/predicates.rst#2025-04-06_snippet_28\n\nLANGUAGE: Logtalk\nCODE:\n```\n:- coinductive(comember/2).\n```\n\n----------------------------------------\n\nTITLE: Setting Prolog Flag for Term Writing Depth\nDESCRIPTION: Configures the Prolog flag for answer writing options, setting the maximum depth and other parameters for term output.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/constraints/swipl/NOTES.md#2025-04-06_snippet_1\n\nLANGUAGE: logtalk\nCODE:\n```\nset_prolog_flag(answer_write_options, [quoted(true), portray(true), max_depth(50), priority(699)]).\n```\n\n----------------------------------------\n\nTITLE: Setting Triggered Breakpoint in Logtalk\nDESCRIPTION: Demonstrates how to set a triggered breakpoint using the debugger's spy/3 predicate. This example sets a breakpoint for the 'mars' object at line 98, triggered by a breakpoint in the 'planet' category at line 76.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/userman/debugging.rst#2025-04-06_snippet_11\n\nLANGUAGE: text\nCODE:\n```\n| ?- debugger::spy(mars, 98, planet-76).\n\nTriggered breakpoint added.\nyes\n```\n\n----------------------------------------\n\nTITLE: Implementing Kruskal's Algorithm using Union-Find in Logtalk\nDESCRIPTION: An example implementation of Kruskal's algorithm for finding a minimum spanning tree, utilizing the union-find data structure. It demonstrates the usage of new/2, find/4, and union/4 predicates from the union_find library.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/libraries/union_find.rst.txt#2025-04-06_snippet_2\n\nLANGUAGE: Logtalk\nCODE:\n```\n:- object(kruskal).\n\n    :- public(kruskal/2).\n\n    :- uses(union_find, [\n        new/2, find/4, union/4\n    ]).\n\n    kruskal(g(Vertices-Edges), g(Vertices-Tree)) :-\n        new(Vertices, UnionFind),\n        keysort(Edges, Sorted),\n        kruskal(UnionFind, Sorted, Tree).\n\n    kruskal(_, [], []).\n    kruskal(UnionFind0, [Edge| Edges], [Edge| Tree]) :-\n        Edge = _-(Vertex1, Vertex2),\n        find(UnionFind0, Vertex1, Root1, UnionFind1),\n        find(UnionFind1, Vertex2, Root2, UnionFind2),\n        Root1 \\== Root2,\n        !,\n        union(UnionFind2, Vertex1, Vertex2, UnionFind3),\n        kruskal(UnionFind3, Edges, Tree).\n    kruskal(UnionFind, [_| Edges], Tree) :-\n        kruskal(UnionFind, Edges, Tree).\n\n:- end_object.\n```\n\n----------------------------------------\n\nTITLE: Get Dependents List Predicate\nDESCRIPTION: Predicate that returns a list of all dependent objects. Returns exactly one solution with the list of dependents.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/subject_0.rst.txt#2025-04-06_snippet_2\n\nLANGUAGE: logtalk\nCODE:\n```\ndependents(Dependents)\n```\n\n----------------------------------------\n\nTITLE: Library Path Configuration\nDESCRIPTION: Multifile and dynamic declarations for the logtalk_library_path/2 predicate in libpaths file.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/RELEASE_NOTES.md#2025-04-06_snippet_139\n\nLANGUAGE: Prolog\nCODE:\n```\nlogtalk_library_path/2\n```\n\n----------------------------------------\n\nTITLE: Extracting Timestamp from ULID\nDESCRIPTION: Examples of extracting timestamp information from a ULID in milliseconds and component form.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/library/ulid/NOTES.md#2025-04-06_snippet_7\n\nLANGUAGE: prolog\nCODE:\n```\n| ?- ulid(atom)::timestamp('01H0JDBQ1GAWJF35C44Y5S97DX', Milliseconds).\nMilliseconds = 1684245175344\nyes\n\n| ?- ulid(atom)::timestamp('01H0N8CDAZK75C5H3BJSGS4VCQ', Year, Month, Day, Hours, Minutes, Seconds, Milliseconds).\nYear = 2023, Month = 5, Day = 17, Hours = 16, Minutes = 23, Seconds = 38, Milliseconds = 591\nyes\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Usage of sender/1 in Prolog\nDESCRIPTION: Provides an example of using the sender/1 method within a test predicate, demonstrating how it retrieves the sender of a message and writes it to output.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/refman/methods/sender_1.rst.txt#2025-04-06_snippet_2\n\nLANGUAGE: prolog\nCODE:\n```\ntest :-\n    sender(Sender),\n    write('executing a method to answer a message sent by '),\n    writeq(Sender), nl.\n```\n\n----------------------------------------\n\nTITLE: Querying Shared Cheese Data\nDESCRIPTION: Demonstrates accessing the shared cheese data from shop2, showing how the flyweight pattern shares state across objects.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/design_patterns/structural/flyweight/NOTES.md#2025-04-06_snippet_3\n\nLANGUAGE: logtalk\nCODE:\n```\nshop2::cheese(Brand, Cost).\n```\n\n----------------------------------------\n\nTITLE: Example Queries - extends_object/2-3\nDESCRIPTION: Example queries demonstrating how to use extends_object to find objects that extend state_space and list prototypes.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/refman/predicates/extends_object_2_3.rst#2025-04-06_snippet_2\n\nLANGUAGE: prolog\nCODE:\n```\n% enumerate objects derived from the state_space prototype:\n| ?- extends_object(Object, state_space).\n\n% enumerate objects publicly derived from the list prototype:\n| ?- extends_object(Object, list, public).\n```\n\n----------------------------------------\n\nTITLE: Defining Atom Replacement in Logtalk\nDESCRIPTION: Added predicate atom::replace_sub_atom/4 for replacing all occurrences of an atom with another atom.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/RELEASE_NOTES.md#2025-04-06_snippet_76\n\nLANGUAGE: Logtalk\nCODE:\n```\natom::replace_sub_atom/4\n```\n\n----------------------------------------\n\nTITLE: Assertions Object Definition\nDESCRIPTION: Defines the assertions object name and its availability through a loader. The object extends public assertions(_) and inherits various predicates including assertion/1, assertion/2, goal_expansion/2, and term_expansion/2.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/assertions_0.rst.txt#2025-04-06_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n``assertions``\n```\n\n----------------------------------------\n\nTITLE: Connecting Android MicroUSB Charger\nDESCRIPTION: This snippet demonstrates connecting an Android recharger using the MicroUSB connector.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/design_patterns/structural/adapter/NOTES.md#2025-04-06_snippet_4\n\nLANGUAGE: logtalk\nCODE:\n```\nandroid_recharger(android)::connect.\n```\n\n----------------------------------------\n\nTITLE: Sorting a List in Ascending Order in Logtalk\nDESCRIPTION: Sorts a list in ascending order, removing duplicates.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/listp_0.rst.txt#2025-04-06_snippet_18\n\nLANGUAGE: Logtalk\nCODE:\n```\nsort(List,Sorted)\n```\n\n----------------------------------------\n\nTITLE: Working with Dynamic Predicates in the User Pseudo-Module\nDESCRIPTION: Example showing the recommended way to work with dynamic predicates defined in the user pseudo-module for maximum portability across Prolog backends.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/userman/predicates.rst.txt#2025-04-06_snippet_67\n\nLANGUAGE: logtalk\nCODE:\n```\n:- object(...).\n\n    :- uses(user, [bar/1]).\n    :- dynamic(user::bar/1).\n\n    foo(X) :-\n        % retract and assert bar/1 clauses in user\n        retractall(bar(_)),\n        assertz(bar(X)),\n        ...\n\n:- end_object.\n```\n\n----------------------------------------\n\nTITLE: Using logtalk_tester with Custom GitHub Issue Labels\nDESCRIPTION: Example showing how to specify multiple custom labels (bug and auto) when creating GitHub issues with the logtalk_tester script.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/devtools/issue_creator.rst.txt#2025-04-06_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ logtalk_tester \\\n    -p gnu \\\n    -b github:bug,auto \\\n    -s \"/home/jdoe/foo/\" \\\n    -u https://github.com/jdoe/foo/tree/55aa900775befa135e0d5b48ea63098df8b97f5c/\n```\n\n----------------------------------------\n\nTITLE: Example Usage of threaded_engine_post/2 in Logtalk\nDESCRIPTION: Demonstrates how to use the threaded_engine_post/2 predicate to post the atom 'ready' to the worker_1 engine queue.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/refman/predicates/threaded_engine_post_2.rst.txt#2025-04-06_snippet_2\n\nLANGUAGE: Prolog\nCODE:\n```\n% post the atom \"ready\" to the worker_1 engine queue:\n| ?- threaded_engine_post(worker_1, ready).\n```\n\n----------------------------------------\n\nTITLE: Loading XPCE Example in Logtalk\nDESCRIPTION: This code loads the XPCE example into the Logtalk environment. It uses the logtalk_load/1 predicate to load the loader file for the XPCE integration.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/xpce/NOTES.md#2025-04-06_snippet_1\n\nLANGUAGE: logtalk\nCODE:\n```\nlogtalk_load(xpce(loader)).\n```\n\n----------------------------------------\n\nTITLE: Deleting Files in Logtalk\nDESCRIPTION: Deletes a file. Throws an error if the file does not exist.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/osp_0.rst.txt#2025-04-06_snippet_9\n\nLANGUAGE: prolog\nCODE:\n```\ndelete_file(File)\n```\n\n----------------------------------------\n\nTITLE: Declaring Meta-predicate Template for bagof/3 in Logtalk\nDESCRIPTION: Defines the meta-predicate template for bagof/3, specifying argument types.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/refman/methods/bagof_3.rst#2025-04-06_snippet_1\n\nLANGUAGE: Logtalk\nCODE:\n```\nbagof(*, ^, *)\n```\n\n----------------------------------------\n\nTITLE: Predicate Modes and Proofs\nDESCRIPTION: Specifies the supported argument modes and number of proofs for the implements_protocol predicate variations.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/refman/predicates/implements_protocol_2_3.rst.txt#2025-04-06_snippet_1\n\nLANGUAGE: prolog\nCODE:\n```\nimplements_protocol(?object_identifier, ?protocol_identifier) - zero_or_more\nimplements_protocol(?category_identifier, ?protocol_identifier) - zero_or_more\n\nimplements_protocol(?object_identifier, ?protocol_identifier, ?scope) - zero_or_more\nimplements_protocol(?category_identifier, ?protocol_identifier, ?scope) - zero_or_more\n```\n\n----------------------------------------\n\nTITLE: Defining descendants/1 predicate in Logtalk\nDESCRIPTION: Returns a list of all object descendants. It is a static predicate that unifies its argument with a list of all descendants in the hierarchy.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/hierarchyp_0.rst.txt#2025-04-06_snippet_5\n\nLANGUAGE: Logtalk\nCODE:\n```\ndescendants(Descendants)\n```\n\n----------------------------------------\n\nTITLE: Testing Meta Library in Logtalk\nDESCRIPTION: This snippet shows how to load the tester.lgt file to test the predicates in the meta library.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/library/meta/NOTES.md#2025-04-06_snippet_1\n\nLANGUAGE: Logtalk\nCODE:\n```\n| ?- logtalk_load(meta(tester)).\n```\n\n----------------------------------------\n\nTITLE: Loading DCG Examples in Logtalk\nDESCRIPTION: Loads the DCG examples module using the Logtalk loader.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/dcgs/NOTES.md#2025-04-06_snippet_0\n\nLANGUAGE: logtalk\nCODE:\n```\nlogtalk_load(dcgs(loader)).\n```\n\n----------------------------------------\n\nTITLE: Defining logtalk_library_path/2 Predicate in Logtalk\nDESCRIPTION: Syntax for the logtalk_library_path/2 predicate, which is used to declare aliases for library paths. It takes a Library alias and a Path as arguments.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/refman/predicates/logtalk_library_path_2.rst.txt#2025-04-06_snippet_0\n\nLANGUAGE: Prolog\nCODE:\n```\nlogtalk_library_path(Library, Path)\n```\n\n----------------------------------------\n\nTITLE: Example of call//1 with Lambda Expression in Logtalk\nDESCRIPTION: Demonstrates using call//1 with a lambda expression to define a DCG non-terminal that squares a number. This showcases how to pass arguments to call//1 using lambda expressions.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/refman/methods/call_1.rst#2025-04-06_snippet_1\n\nLANGUAGE: Logtalk\nCODE:\n```\nsquare -->\n    call([Number, Double]>>(Double is Number*Number)).\n```\n\n----------------------------------------\n\nTITLE: Checking Logtalk Environment Versions\nDESCRIPTION: Displays the versions of Logtalk, the Prolog backend, and kernel if running in a notebook environment.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/design_patterns/behavioral/strategy/NOTES.md#2025-04-06_snippet_0\n\nLANGUAGE: logtalk\nCODE:\n```\n%versions\n```\n\n----------------------------------------\n\nTITLE: Control Construct Example\nDESCRIPTION: Shows the @/1 control construct syntax for calling a predicate in *this* from categories and objects.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/RELEASE_NOTES.md#2025-04-06_snippet_13\n\nLANGUAGE: Logtalk\nCODE:\n```\n(@)/1\n```\n\n----------------------------------------\n\nTITLE: Checking Suffix Relationship in Logtalk\nDESCRIPTION: Checks if one list is a suffix of another list.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/listp_0.rst.txt#2025-04-06_snippet_27\n\nLANGUAGE: Logtalk\nCODE:\n```\nsuffix(Suffix,List)\n```\n\n----------------------------------------\n\nTITLE: Custom Type Implementation for Sets\nDESCRIPTION: Example of implementing the comparingp protocol for custom set element types using rainbow colors.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/libraries/sets.rst#2025-04-06_snippet_5\n\nLANGUAGE: logtalk\nCODE:\n```\n:- object(rainbow_colors,\n    implements(comparingp)).\n\n    order(red,    1).\n    order(orange, 2).\n    order(yellow, 3).\n    order(green,  4).\n    order(blue,   5).\n    order(indigo, 6).\n    order(violet, 7).\n\n    Color1 < Color2 :-\n        order(Color1, N1),\n        order(Color2, N2),\n        {N1 < N2}.\n\n    Color1 =< Color2 :-\n        order(Color1, N1),\n        order(Color2, N2),\n        {N1 =< N2}.\n\n    ...\n\n:- end_object.\n```\n\n----------------------------------------\n\nTITLE: List-based Permutations Benchmark\nDESCRIPTION: Runs the list-based implementation of permutations algorithm with input size 7 and measures execution time.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/permutations/NOTES.md#2025-04-06_snippet_4\n\nLANGUAGE: logtalk\nCODE:\n```\ntime(permutations::list(7, _)).\n```\n\n----------------------------------------\n\nTITLE: Enabling Selective Debug Messages with the debug_messages Tool\nDESCRIPTION: Shows how to selectively enable debug messages for specific components and debug groups using the debug_messages tool.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/userman/debugging.rst.txt#2025-04-06_snippet_32\n\nLANGUAGE: logtalk\nCODE:\n```\n% upon loading the tool, all messages are disabled by default:\n| ?- logtalk_load(debug_messages(loader)).\n...\n\n% enable both debug and debug(_) messages:\n| ?- debug_messages::enable(parser).\nyes\n\n% first disable any and all enabled messages:\n| ?- debug_messages::disable(parser).\nyes\n\n% enable only debug(tokenization) messages:\n| ?- debug_messages::enable(parser, tokenization).\nyes\n```\n\n----------------------------------------\n\nTITLE: Parsing JSON in Logtalk\nDESCRIPTION: Parses JSON content from various sources into a Logtalk term. Sources can be code lists, streams, files, character lists, or atoms. Fails if parsing is unsuccessful.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/json_protocol_0.rst.txt#2025-04-06_snippet_0\n\nLANGUAGE: Logtalk\nCODE:\n```\nparse(Source,Term)\n```\n\n----------------------------------------\n\nTITLE: Using Callbacks in HTML Generation\nDESCRIPTION: Demonstrates how to use the callback mechanism to dynamically generate content within HTML elements.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/libraries/html.rst.txt#2025-04-06_snippet_10\n\nLANGUAGE: prolog\nCODE:\n```\n| ?- current_output(Stream),\n        html5::generate(stream(Stream), span(user::content)).\n\n<span><strong>Hello world!</strong></span>\n\nStream = ...\n```\n\n----------------------------------------\n\nTITLE: Defining Operator for Approximate Equality in Logtalk\nDESCRIPTION: Defines the =~= operator with precedence 700 and type xfx for comparing floats or lists of floats for approximate equality.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/number_0.rst.txt#2025-04-06_snippet_5\n\nLANGUAGE: Logtalk\nCODE:\n```\nop(700,xfx,=~=)\n```\n\n----------------------------------------\n\nTITLE: Removing Context Breakpoints in Logtalk\nDESCRIPTION: Shows how to remove context breakpoints using the debugger's nospy/4 predicate. This example removes all context breakpoints where the value of 'self' is the atom 'foo'.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/userman/debugging.rst#2025-04-06_snippet_14\n\nLANGUAGE: text\nCODE:\n```\n| ?- debugger::nospy(_, _, foo, _).\n\nAll matching context breakpoints removed.\nyes\n```\n\n----------------------------------------\n\nTITLE: Uses/2 with Shorthand Predicate Alias\nDESCRIPTION: Demonstrates defining a predicate alias that serves as a shorthand with the uses/2 directive.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/refman/directives/uses_2.rst#2025-04-06_snippet_4\n\nLANGUAGE: logtalk\nCODE:\n```\n:- uses(logtalk, [\n    print_message(debug, my_app, Message) as dbg(Message)\n]).\n```\n\n----------------------------------------\n\nTITLE: Defining median/2 Predicate for Number Lists in Logtalk\nDESCRIPTION: Calculates the median value of a list of numbers. Fails if the list is empty.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/numberlistp_0.rst.txt#2025-04-06_snippet_6\n\nLANGUAGE: Logtalk\nCODE:\n```\nmedian(List,Median)\n```\n\n----------------------------------------\n\nTITLE: Defining the create_category/4 Predicate in Logtalk\nDESCRIPTION: Signature of the create_category/4 built-in predicate that creates a new dynamic category with the specified identifier, relations, directives, and clauses.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/refman/predicates/create_category_4.rst.txt#2025-04-06_snippet_0\n\nLANGUAGE: logtalk\nCODE:\n```\ncreate_category(Identifier, Relations, Directives, Clauses)\n```\n\n----------------------------------------\n\nTITLE: Declaring a Flaky Test in Logtalk\nDESCRIPTION: Example of declaring a test as flaky using the flaky/0 test option. This marks tests that may pass or fail non-deterministically due to external conditions rather than bugs in the code itself.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/devtools/lgtunit.rst#2025-04-06_snippet_49\n\nLANGUAGE: logtalk\nCODE:\n```\ntest(foo, true, [flaky]) :-\n    ...\n```\n\n----------------------------------------\n\nTITLE: Installing MacOS Dependencies with Homebrew\nDESCRIPTION: Commands to install required dependencies on MacOS using Homebrew package manager.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/devtools/packs.rst#2025-04-06_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n$ brew install coreutils wget libarchive gnupg2 git direnv\n```\n\n----------------------------------------\n\nTITLE: Checking Term Variants in Logtalk\nDESCRIPTION: Determines if two terms are variants of each other, i.e., can be made identical by renaming variables. Useful for checking expected test results with variables.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/lgtunit_0.rst.txt#2025-04-06_snippet_19\n\nLANGUAGE: logtalk\nCODE:\n```\nvariant(Term1,Term2)\n```\n\n----------------------------------------\n\nTITLE: Adding a Registry with Options in Logtalk\nDESCRIPTION: Adds a new registry using specified options. Fails if the registry can't be added or is already defined without update or force options.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/registries_0.rst.txt#2025-04-06_snippet_3\n\nLANGUAGE: logtalk\nCODE:\n```\nadd(Registry, URL, Options)\n```\n\n----------------------------------------\n\nTITLE: Querying Dynamic Twin Date Object for Seconds Property\nDESCRIPTION: Demonstrates accessing a property through the dynamically created twin objects - querying the twin_date object for a seconds property that's implemented by its twin (twin_time).\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/design_patterns/structural/twin/NOTES.md#2025-04-06_snippet_9\n\nLANGUAGE: logtalk\nCODE:\n```\ntwin_date::seconds(Seconds).\n```\n\n----------------------------------------\n\nTITLE: Querying Decorator Pipeline\nDESCRIPTION: These snippets demonstrate querying the pipeline of decorators for string representation and diameter.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/design_patterns/structural/decorator/NOTES.md#2025-04-06_snippet_7\n\nLANGUAGE: logtalk\nCODE:\n```\no2::string.\n```\n\nLANGUAGE: logtalk\nCODE:\n```\no2::diameter(Diameter).\n```\n\n----------------------------------------\n\nTITLE: Pinning a Pack in Logtalk\nDESCRIPTION: Demonstrates how to pin a pack to prevent accidental updates or uninstallation.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/devtools/packs.rst.txt#2025-04-06_snippet_37\n\nLANGUAGE: logtalk\nCODE:\n```\n| ?- packs::pin(bar).\n```\n\n----------------------------------------\n\nTITLE: Computing Steps for Input File (Part 1) in Logtalk\nDESCRIPTION: This snippet computes the number of steps for the 'test_files/input' file using the part 1 solution method.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/haunted_wasteland/NOTES.md#2025-04-06_snippet_4\n\nLANGUAGE: logtalk\nCODE:\n```\nobject_property(haunted_wasteland, file(_, Directory)),\natom_concat(Directory, 'test_files/input', File),\nhaunted_wasteland::steps_1(File, Steps).\n```\n\n----------------------------------------\n\nTITLE: Loading Sorting Example and Library Files\nDESCRIPTION: Loads the sorting example and required library files for the demonstration.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/threads/sorting/NOTES.md#2025-04-06_snippet_1\n\nLANGUAGE: logtalk\nCODE:\n```\nlogtalk_load(sorting(loader)).\n```\n\n----------------------------------------\n\nTITLE: String Pretty Printing in Logtalk\nDESCRIPTION: Private predicate that prints a string to the current output stream. If the string contains only 7-bit chars, it uses a shorthand quoted format; otherwise, it's written as a list.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/xml_0.rst.txt#2025-04-06_snippet_8\n\nLANGUAGE: Logtalk\nCODE:\n```\npp_string(String)\n```\n\n----------------------------------------\n\nTITLE: Declaring Public, Protected, and Private Predicates in Logtalk\nDESCRIPTION: Examples of using scope directives to declare predicates with different visibility levels in Logtalk. This includes public, protected, and private predicates.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/userman/predicates.rst#2025-04-06_snippet_0\n\nLANGUAGE: logtalk\nCODE:\n```\n:- public(init/1).\n\n:- protected(valid_init_option/1).\n\n:- private(process_init_options/1).\n```\n\n----------------------------------------\n\nTITLE: Predicate Declaration - extends_object/2-3\nDESCRIPTION: Declaration of the extends_object predicate showing its arity-2 and arity-3 variants which query object extension relationships.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/refman/predicates/extends_object_2_3.rst#2025-04-06_snippet_0\n\nLANGUAGE: prolog\nCODE:\n```\nextends_object(Prototype, Parent)\nextends_object(Prototype, Parent, Scope)\n```\n\n----------------------------------------\n\nTITLE: Checking Logtalk Version Information\nDESCRIPTION: Prints the Logtalk, Prolog backend, and kernel versions when running as a notebook.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/engines/pmq/NOTES.md#2025-04-06_snippet_0\n\nLANGUAGE: logtalk\nCODE:\n```\n%versions\n```\n\n----------------------------------------\n\nTITLE: Encoding Data to CBOR in Logtalk\nDESCRIPTION: Example of encoding a Logtalk term to CBOR format using the cbor::generate/2 predicate.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/libraries/cbor.rst.txt#2025-04-06_snippet_1\n\nLANGUAGE: Logtalk\nCODE:\n```\n| ?- cbor::generate([a,{b-c}], Encoding).\nEncoding = [0x9f,0x61,0x61,0xbf,0x61,0x62,0x61,0x63,0xff,0xff]\nyes\n```\n\n----------------------------------------\n\nTITLE: Testing Logtalk Options Library\nDESCRIPTION: Command to load and run tests for the options library predicates.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/libraries/options.rst#2025-04-06_snippet_1\n\nLANGUAGE: prolog\nCODE:\n```\n| ?- logtalk_load(options(tester)).\n```\n\n----------------------------------------\n\nTITLE: Starting Debug Mode in Logtalk\nDESCRIPTION: Demonstrates how to start a debugging session using breakpoints with the debugger's debug/0 predicate.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/userman/debugging.rst#2025-04-06_snippet_20\n\nLANGUAGE: text\nCODE:\n```\n| ?- debugger::debug.\n\nyes\n```\n\n----------------------------------------\n\nTITLE: Object Declaration in Logtalk\nDESCRIPTION: Declaration of the term object that provides term utility predicates. The object implements the termp protocol and aliases the variables/2 predicate as vars/2.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/term_0.rst.txt#2025-04-06_snippet_0\n\nLANGUAGE: logtalk\nCODE:\n```\nterm\n```\n\n----------------------------------------\n\nTITLE: Adding Element to Difference List in Logtalk\nDESCRIPTION: Adds a term to the end of a difference list. Takes a term, an input difference list, and returns a new difference list with the term added.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/difflist_0.rst.txt#2025-04-06_snippet_0\n\nLANGUAGE: Logtalk\nCODE:\n```\nadd(Term, DiffList, NewDiffList)\n```\n\n----------------------------------------\n\nTITLE: Checking for Defined Monitored Events in Logtalk\nDESCRIPTION: The monitor/4 predicate checks if a monitoring relationship exists between the specified objects. It returns true if there is a monitor registered for the given object, message, sender, and monitor combination.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/event_registryp_0.rst.txt#2025-04-06_snippet_3\n\nLANGUAGE: logtalk\nCODE:\n```\nmonitor(Object,Message,Sender,Monitor)\n```\n\n----------------------------------------\n\nTITLE: Signature of question_hook/6 Method in Logtalk\nDESCRIPTION: Defines the predicate signature for the question_hook/6 method that intercepts questions before they are presented to the user.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/refman/methods/question_hook_6.rst.txt#2025-04-06_snippet_0\n\nLANGUAGE: logtalk\nCODE:\n```\nquestion_hook(Question, Kind, Component, Tokens, Check, Answer)\n```\n\n----------------------------------------\n\nTITLE: Creating Agent Instances in Logtalk\nDESCRIPTION: Creates two new agent instances named Paul and Nathalie with specified age and gender attributes.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/threads/birthdays/NOTES.md#2025-04-06_snippet_1\n\nLANGUAGE: logtalk\nCODE:\n```\nagent::(new(paul, 40, male), new(nathalie, 32, female)).\n```\n\n----------------------------------------\n\nTITLE: Source Objects Using Different Hook Objects\nDESCRIPTION: Example source code showing two objects (s1 and s2) being expanded using different hook objects through the set_logtalk_flag directive.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/userman/expansion.rst#2025-04-06_snippet_10\n\nLANGUAGE: logtalk\nCODE:\n```\n:- set_logtalk_flag(hook, h1).\n\n:- object(s1).\n\n    :- public(a/0).\n    a.\n\n:- end_object.\n\n\n:- set_logtalk_flag(hook, h2).\n\n:- object(s2).\n\n    :- public(a/0).\n    a.\n\n:- end_object.\n```\n\n----------------------------------------\n\nTITLE: Example Usage of coinductive/1 Directive in Logtalk\nDESCRIPTION: Demonstrates practical examples of using the coinductive/1 directive for different types of predicates: a regular predicate (comember/2), a grammar rule (ones_and_zeros//0), and a template with argument specifications (controller/5).\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/refman/directives/coinductive_1.rst.txt#2025-04-06_snippet_2\n\nLANGUAGE: logtalk\nCODE:\n```\n:- coinductive(comember/2).\n:- coinductive(ones_and_zeros//0).\n:- coinductive(controller(+,+,+,-,-)).\n```\n\n----------------------------------------\n\nTITLE: Retrieving Environment Variables in Logtalk\nDESCRIPTION: Returns the value of an environment variable. Fails if the variable does not exist.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/osp_0.rst.txt#2025-04-06_snippet_11\n\nLANGUAGE: prolog\nCODE:\n```\nenvironment_variable(Variable, Value)\n```\n\n----------------------------------------\n\nTITLE: Using Fold Operations with Object Predicates in Logtalk\nDESCRIPTION: Demonstrates the use of fold_left/4 meta-predicate with predicates defined in the 'predicates' object.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/metapredicates/NOTES.md#2025-04-06_snippet_7\n\nLANGUAGE: logtalk\nCODE:\n```\nmeta::fold_left(predicates::sum, 0, [1,2,3,4,5], Result).\n```\n\nLANGUAGE: logtalk\nCODE:\n```\nmeta::fold_left(predicates::product, 1, [1,2,3,4,5], Result).\n```\n\nLANGUAGE: logtalk\nCODE:\n```\nmeta::fold_left(predicates::tuple, (0,0), [(1,2), (3,4), (6,4)], Result).\n```\n\n----------------------------------------\n\nTITLE: Implementing Private Protocol\nDESCRIPTION: Shows how to implement a protocol with private scope, making all public and protected predicates private.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/userman/protocols.rst#2025-04-06_snippet_15\n\nLANGUAGE: logtalk\nCODE:\n```\n:- object(Object,\n    implements(private::Protocol)).\n    ...\n:- end_object.\n```\n\n----------------------------------------\n\nTITLE: Loading a File from a Logtalk Library\nDESCRIPTION: Example of loading a file from a library using the library alias instead of the full path.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/userman/programming.rst#2025-04-06_snippet_12\n\nLANGUAGE: text\nCODE:\n```\n| ?- logtalk_load(viewpoints(loader)).\n```\n\n----------------------------------------\n\nTITLE: Example Usage in Logtalk\nDESCRIPTION: Demonstrates practical usage of the this/1 method to retrieve and display the current object identifier within a test predicate.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/refman/methods/this_1.rst.txt#2025-04-06_snippet_2\n\nLANGUAGE: logtalk\nCODE:\n```\ntest :-\n    this(This),\n    write('Using a predicate clause contained in '),\n    writeq(This), nl.\n```\n\n----------------------------------------\n\nTITLE: Creating and Playing an Ordinary Maze Game\nDESCRIPTION: Creates a new instance of an ordinary maze game and invokes its play method. This demonstrates the factory method creating ordinary rooms.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/design_patterns/creational/factory_method/NOTES.md#2025-04-06_snippet_1\n\nLANGUAGE: logtalk\nCODE:\n```\nordinary_maze_game::new(Game), Game::play.\n```\n\n----------------------------------------\n\nTITLE: Loading the lgtdoc Tool in Logtalk\nDESCRIPTION: This snippet shows how to load the lgtdoc tool in a Logtalk environment. It uses the logtalk_load/1 predicate to load the tool's loader file.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/devtools/lgtdoc.rst.txt#2025-04-06_snippet_0\n\nLANGUAGE: prolog\nCODE:\n```\n| ?- logtalk_load(lgtdoc(loader)).\n```\n\n----------------------------------------\n\nTITLE: Set Binary Output with Options in Logtalk\nDESCRIPTION: Creates a temporary file with specified binary contents, opens it for writing with the given alias and stream options. Used for testing code that writes binary data to files.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/lgtunit_0.rst.txt#2025-04-06_snippet_54\n\nLANGUAGE: logtalk\nCODE:\n```\nset_binary_output(Alias,Contents,Options)\n```\n\n----------------------------------------\n\nTITLE: Asking the Ultimate Question in Logtalk\nDESCRIPTION: This snippet asks the ultimate question from 'The Hitchhiker's Guide to the Galaxy' using Logtalk's ask_question/5 predicate. It includes a check to skip execution if running as a notebook.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/questions/NOTES.md#2025-04-06_snippet_2\n\nLANGUAGE: logtalk\nCODE:\n```\n(current_object(jupyter) -> true; logtalk::ask_question(question, hitchhikers, ultimate_question, '=='(42), N)).\n```\n\n----------------------------------------\n\nTITLE: Drawing Static Circle Instance\nDESCRIPTION: Demonstrates drawing a static circle instance using the Bridge pattern implementation.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/design_patterns/structural/bridge/NOTES.md#2025-04-06_snippet_1\n\nLANGUAGE: logtalk\nCODE:\n```\na_circle::draw.\n```\n\n----------------------------------------\n\nTITLE: Complex Library Path Configuration\nDESCRIPTION: Advanced example showing nested library path definitions with aliases.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/userman/programming.rst.txt#2025-04-06_snippet_10\n\nLANGUAGE: prolog\nCODE:\n```\n:- multifile(logtalk_library_path/2).\n:- dynamic(logtalk_library_path/2).\n\nlogtalk_library_path(lgtuser, '$LOGTALKUSER/').\nlogtalk_library_path(examples, lgtuser('examples/')).\nlogtalk_library_path(viewpoints, examples('viewpoints/')).\n```\n\n----------------------------------------\n\nTITLE: N-Queens Problem Solver\nDESCRIPTION: Solves the N-Queens chess problem using constraints\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/constraints/yap/NOTES.md#2025-04-06_snippet_4\n\nLANGUAGE: logtalk\nCODE:\n```\nqueens::n_queens(8, Qs), labeling([ff], Qs).\n\n(current_object(jupyter) -> true; queens::show(8, [ff], Qs)).\n\n(current_object(jupyter) -> true; queens::show(N, [ff], Qs)).\n```\n\n----------------------------------------\n\nTITLE: Defining protocol_property/2 Predicate Signature in Prolog\nDESCRIPTION: Specifies the signature of the protocol_property/2 predicate, which takes a Protocol identifier and a Property as arguments.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/refman/predicates/protocol_property_2.rst.txt#2025-04-06_snippet_0\n\nLANGUAGE: Prolog\nCODE:\n```\nprotocol_property(Protocol, Property)\n```\n\n----------------------------------------\n\nTITLE: Testing JSON Library in Logtalk\nDESCRIPTION: Shows how to load and run tests for the JSON library predicates using the tester file.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/library/json/NOTES.md#2025-04-06_snippet_1\n\nLANGUAGE: Prolog\nCODE:\n```\n| ?- logtalk_load(json(tester)).\n```\n\n----------------------------------------\n\nTITLE: Base64URL Parse Predicate Definition\nDESCRIPTION: Predicate for parsing Base64URL data from a source into a URL. Supports atom, chars, or codes list formats. Returns one result or an error.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/base64url_0.rst.txt#2025-04-06_snippet_0\n\nLANGUAGE: logtalk\nCODE:\n```\nparse(Source,URL)\n```\n\n----------------------------------------\n\nTITLE: Listing Brick Stack Tuples\nDESCRIPTION: This snippet lists all the tuples representing brick stack relationships.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/bricks/NOTES.md#2025-04-06_snippet_6\n\nLANGUAGE: logtalk\nCODE:\n```\nforall(brick_stack::tuple(Tuple), (write(Tuple), nl)).\n```\n\n----------------------------------------\n\nTITLE: Calculate Second Earth Weight\nDESCRIPTION: Calculates the weight of object m2 on Earth\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/planets/NOTES.md#2025-04-06_snippet_4\n\nLANGUAGE: logtalk\nCODE:\n```\nearth::weight(m2, W2).\n```\n\n----------------------------------------\n\nTITLE: Displaying Logtalk, Prolog backend, and kernel versions\nDESCRIPTION: Command to print version information for Logtalk, the Prolog backend, and the kernel if running in a Jupyter notebook environment.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/design_patterns/structural/twin/NOTES.md#2025-04-06_snippet_0\n\nLANGUAGE: logtalk\nCODE:\n```\n%versions\n```\n\n----------------------------------------\n\nTITLE: Using Module Directives for Dynamic Predicates\nDESCRIPTION: Example showing how to use use_module/2 directives to declare and manipulate dynamic module predicates, allowing for unqualified predicate calls.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/userman/predicates.rst.txt#2025-04-06_snippet_66\n\nLANGUAGE: logtalk\nCODE:\n```\n:- object(...).\n\n    :- use_module(m, [bar/1]).\n    :- dynamic(m:bar/1).\n\n    foo(X) :-\n        % retract and assert bar/1 clauses in module m\n        retractall(bar(_)),\n        assertz(bar(X)),\n        ...\n\n:- end_object.\n```\n\n----------------------------------------\n\nTITLE: Example Queries Using Attributes\nDESCRIPTION: Sample queries demonstrating usage of the attributes predicates after implementation.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/tutorial/attributes.rst#2025-04-06_snippet_3\n\nLANGUAGE: prolog\nCODE:\n```\n| ?- person::set_attribute(name, paulo).\n\nyes\n\n| ?- person::set_attribute(gender, male).\n\nyes\n\n| ?- person::get_attribute(Attribute, Value).\n\nAttribute = name, Value = paulo ;\nAttribute = gender, Value = male ;\nno\n```\n\n----------------------------------------\n\nTITLE: Template and Modes for end_protocol\nDESCRIPTION: Template showing the proper format for using the end_protocol directive.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/refman/directives/end_protocol_0.rst.txt#2025-04-06_snippet_1\n\nLANGUAGE: logtalk\nCODE:\n```\nend_protocol\n```\n\n----------------------------------------\n\nTITLE: Retrieving All Class Instances in Logtalk\nDESCRIPTION: Predicate that returns all class instances through backtracking. Takes a single parameter Instance which can be instantiated or a variable to be bound to instance objects.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/class_hierarchyp_0.rst.txt#2025-04-06_snippet_2\n\nLANGUAGE: logtalk\nCODE:\n```\ninstance(Instance)\n```\n\n----------------------------------------\n\nTITLE: Sixteen-Thread Fibonacci Calculation\nDESCRIPTION: Calculates the 24th Fibonacci number using sixteen threads with timing measurement.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/threads/fibonacci/NOTES.md#2025-04-06_snippet_5\n\nLANGUAGE: logtalk\nCODE:\n```\ntime(fibonacci(16)::fib(24, N)).\n```\n\n----------------------------------------\n\nTITLE: Non-backtrackable Parameter Update\nDESCRIPTION: Shows non-backtrackable update of a parameter 'b' in a dictionary structure, where the updated value persists across backtracking.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/parstructs/NOTES.md#2025-04-06_snippet_3\n\nLANGUAGE: logtalk\nCODE:\n```\nobj(Dict)::init([a-1, b-2, c-3]), (obj(Dict)::nb_set(b, 9), obj(Dict)::get(b, B), write(b-B), nl, fail; obj(Dict)::get(b, B), write(b-B), nl).\n```\n\n----------------------------------------\n\nTITLE: Reading CSV Stream Line by Line and Returning Data as List in Logtalk\nDESCRIPTION: Reads a CSV stream line by line and returns the data as a list of rows, where each row is a list of fields. Fails if the stream cannot be parsed. Requires stream or alias as input and returns the rows as output.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/csv_protocol_0.rst.txt#2025-04-06_snippet_7\n\nLANGUAGE: Logtalk\nCODE:\n```\nread_stream_by_line(Stream,Rows)\n```\n\n----------------------------------------\n\nTITLE: Installing MacOS Dependencies via MacPorts\nDESCRIPTION: Command to install required dependencies on macOS using the MacPorts package manager.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/tools/packs/NOTES.md#2025-04-06_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n$ sudo port install coreutils wget libarchive gnupg2 git direnv\n```\n\n----------------------------------------\n\nTITLE: Using mutation/3 Predicate in Logtalk\nDESCRIPTION: The mutation/3 predicate returns a random mutation of a term into another term of the same type. It takes a Type parameter, an input Term (assumed to be valid for the given Type), and outputs a Mutation of that term.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/mutations_0.rst.txt#2025-04-06_snippet_0\n\nLANGUAGE: logtalk\nCODE:\n```\nmutation(Type,Term,Mutation)\n```\n\n----------------------------------------\n\nTITLE: Directory Diagram Generation\nDESCRIPTION: Predicate templates for creating diagrams of directories and their contents\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/diagram_1.rst.txt#2025-04-06_snippet_2\n\nLANGUAGE: logtalk\nCODE:\n```\ndirectory(Project,Directory,Options)\ndirectory(Project,Directory)\ndirectory(Directory)\nrdirectory(Project,Directory,Options)\nrdirectory(Project,Directory)\nrdirectory(Directory)\n```\n\n----------------------------------------\n\nTITLE: Rule Expansion Object Declaration\nDESCRIPTION: Object declaration showing availability, compilation flags, and relationships. Expands rules to a more manageable format, requiring logtalk_load(verdi_neruda(loader)) for availability. Uses static and context_switching_calls compilation flags.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/rule_expansion_1.rst.txt#2025-04-06_snippet_0\n\nLANGUAGE: logtalk\nCODE:\n```\nrule_expansion(Mode)\n```\n\n----------------------------------------\n\nTITLE: Manipulating AVL Tree Dictionary in Logtalk\nDESCRIPTION: Demonstrates creating, inserting, updating, and looking up values in an AVL tree dictionary using various predicates.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/libraries/dictionaries.rst#2025-04-06_snippet_4\n\nLANGUAGE: prolog\nCODE:\n```\n| ?- avltree::(\n    new(Dictionary0),\n    insert(Dictionary0, a, 1, Dictionary1),\n    update(Dictionary1, a, 2, Dictionary2),\n    lookup(a, Value, Dictionary2)\n).\nDictionary0 = ...,\nDictionary1 = ...,\nDictionary2 = ...,\nValue = 2\nyes\n```\n\n----------------------------------------\n\nTITLE: Running Multi-threaded Student-Teacher Interaction\nDESCRIPTION: Initiates two threads - one for the student running 10 iterations and one for the teacher running 4 iterations, demonstrating concurrent access to shared blackboard resources.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/threads/blackboard/NOTES.md#2025-04-06_snippet_2\n\nLANGUAGE: logtalk\nCODE:\n```\nthreaded_ignore(student::run(10)), threaded_ignore(teacher::run(4)).\n```\n\n----------------------------------------\n\nTITLE: Load Logtalk Test Driver\nDESCRIPTION: Loads the test driver file from the testing directory to enable running of unit tests.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/testing/NOTES.md#2025-04-06_snippet_1\n\nLANGUAGE: logtalk\nCODE:\n```\nlogtalk_load(testing(tester)).\n```\n\n----------------------------------------\n\nTITLE: Defining Optimized Map Meta-Predicate in Logtalk\nDESCRIPTION: Example of defining an optimized map/2 meta-predicate using first-argument indexing in Logtalk. This demonstrates how to implement meta-predicates that call other meta-predicates.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/userman/predicates.rst#2025-04-06_snippet_36\n\nLANGUAGE: Logtalk\nCODE:\n```\n:- meta_predicate(map(1, *)).\nmap(Closure, List) :-\n    map_(List, Closure).\n\n:- meta_predicate(map_(*, 1)).\nmap_([], _).\nmap_([Head| Tail], Closure) :-\n    call(Closure, Head),\n    map_(Tail, Closure).\n```\n\n----------------------------------------\n\nTITLE: Converting DOT to PDF using Graphviz\nDESCRIPTION: Command to convert a DOT format diagram file to PDF using the Graphviz dot executable.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/devtools/diagrams.rst.txt#2025-04-06_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\ndot -Tpdf diagram.dot > diagram.pdf\n```\n\n----------------------------------------\n\nTITLE: Defining prove/2 predicate for Logtalk interpreter protocol\nDESCRIPTION: Specifies the prove/2 predicate which attempts to prove a goal in a given database. It takes a goal and a database as input and can return zero or more proofs.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/interpreterp_0.rst.txt#2025-04-06_snippet_0\n\nLANGUAGE: Logtalk\nCODE:\n```\nprove(Goal,DB)\n```\n\n----------------------------------------\n\nTITLE: Example Usage of Threaded Engine Creation\nDESCRIPTION: Demonstrates how to create a new engine for enumerating list elements.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/refman/predicates/threaded_engine_create_3.rst#2025-04-06_snippet_3\n\nLANGUAGE: prolog\nCODE:\n```\n% create a new engine to enumerate list elements:\n| ?- threaded_engine_create(X, member(X, [1,2,3]), worker_1).\n```\n\n----------------------------------------\n\nTITLE: Querying the Lowest Value in World1\nDESCRIPTION: Example of using the inheritance approach to query the 'lowest' predicate in the world1 object, which returns the lowest value in that world's dataset.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/design_patterns/ai/many_worlds/NOTES.md#2025-04-06_snippet_2\n\nLANGUAGE: logtalk\nCODE:\n```\nworld1::lowest(Lowest).\n```\n\n----------------------------------------\n\nTITLE: Jupyter Notebook Configuration YAML for Logtalk\nDESCRIPTION: YAML configuration that defines Jupyter notebook metadata for Logtalk integration. It specifies the text representation format as markdown and configures the Logtalk kernel with display name, language, and kernel name settings.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/clustering/jars/NOTES.md#2025-04-06_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\njupyter:\n  jupytext:\n    text_representation:\n      extension: .md\n      format_name: markdown\n      format_version: '1.3'\n      jupytext_version: 1.16.7\n  kernelspec:\n    display_name: Logtalk\n    language: logtalk\n    name: logtalk_kernel\n---\n```\n\n----------------------------------------\n\nTITLE: Querying Extension Relations for Prototypes in Logtalk\nDESCRIPTION: Illustrates using the extends_object/2 and extends_object/3 built-in predicates to query extension relations between prototypes, optionally retrieving the extension scope.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/userman/objects.rst.txt#2025-04-06_snippet_24\n\nLANGUAGE: text\nCODE:\n```\n| ?- extends_object(Object, Parent).\n```\n\nLANGUAGE: text\nCODE:\n```\n| ?- extends_object(Object, Parent, Scope).\n```\n\n----------------------------------------\n\nTITLE: Checking for Leap Years in Logtalk\nDESCRIPTION: The leap_year/1 predicate determines if a given year is a leap year in the Gregorian calendar. It handles both positive and negative years, with special consideration for the year 0 (equivalent to 1 BC).\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/iso8601_0.rst.txt#2025-04-06_snippet_6\n\nLANGUAGE: Logtalk\nCODE:\n```\nleap_year(Year)\n```\n\n----------------------------------------\n\nTITLE: Using Optional Term with or_else in Logtalk\nDESCRIPTION: This snippet shows how to use the 'or_else' predicate with an optional term containing a value.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/libraries/optionals.rst#2025-04-06_snippet_3\n\nLANGUAGE: Prolog\nCODE:\n```\n| ?- optional::of(1, Optional), optional(Optional)::or_else(Term, 0).\nOptional = optional(1),\nTerm = 1\nyes\n```\n\n----------------------------------------\n\nTITLE: Context Method Mode Declaration - Logtalk\nDESCRIPTION: Mode declaration showing that context/1 outputs a callable term and provides one solution.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/refman/methods/context_1.rst.txt#2025-04-06_snippet_1\n\nLANGUAGE: logtalk\nCODE:\n```\ncontext(--callable) - one\n```\n\n----------------------------------------\n\nTITLE: Scan Operations in Logtalk\nDESCRIPTION: Demonstrates the use of scan_left/4 and scan_right/4 meta-predicates with various predicates and operations.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/metapredicates/NOTES.md#2025-04-06_snippet_9\n\nLANGUAGE: logtalk\nCODE:\n```\nmeta::scan_left(sum_squares, 0, [1,2,3], Result).\n```\n\nLANGUAGE: logtalk\nCODE:\n```\nmeta::scan_right(predicates::sum, 5, [1,2,3,4], Result).\n```\n\nLANGUAGE: logtalk\nCODE:\n```\nmeta::scan_left([X,Y,Z]>>(Z is X*Y), 1, [1,2,3,4,5,6], Result).\n```\n\n----------------------------------------\n\nTITLE: Finding Root Using Bisection Method for Humps Function\nDESCRIPTION: Demonstrates using the bisection method to find the root of the humps function in the range [-1.0, 2.0] with a tolerance of 1.0e-15. This attempt fails to find a root.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/threads/functions/NOTES.md#2025-04-06_snippet_8\n\nLANGUAGE: logtalk\nCODE:\n```\nbisection::find_root(humps, -1.0, 2.0, 1.0e-15, Zero).\n```\n\n----------------------------------------\n\nTITLE: Querying Java System Properties\nDESCRIPTION: Retrieves Java version using System.getProperty() static method\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/jpl/NOTES.md#2025-04-06_snippet_1\n\nLANGUAGE: logtalk\nCODE:\n```\njava('java.lang.System', Version)::getProperty('java.version').\n```\n\n----------------------------------------\n\nTITLE: Collecting Component Types Using setof\nDESCRIPTION: Uses the setof/3 meta-predicate to gather a list of all unique component types from the sedan object.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/design_patterns/behavioral/visitor/NOTES.md#2025-04-06_snippet_3\n\nLANGUAGE: logtalk\nCODE:\n```\nsetof(\n\t\tType,\n\t\tComponent^Arity^(sedan::component(Component), functor(Component,Type,Arity)),\n\t\tTypes\n     ).\n```\n\n----------------------------------------\n\nTITLE: Defining Multiple Inheritance in Logtalk Objects\nDESCRIPTION: This code demonstrates how to define an object that extends multiple parent objects using Logtalk's multiple inheritance feature. The lookup procedure will traverse the list of entities from left to right.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/userman/inheritance.rst.txt#2025-04-06_snippet_8\n\nLANGUAGE: logtalk\nCODE:\n```\n:- object(foo,\n    extends((bar, baz))).\n```\n\n----------------------------------------\n\nTITLE: Generating Sorted Integer Lists\nDESCRIPTION: Example using the transform/2 meta-type to generate sorted lists of random integers.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/libraries/arbitrary.rst.txt#2025-04-06_snippet_5\n\nLANGUAGE: logtalk\nCODE:\n```\narbitrary::arbitrary(sorted_integer_list, Arbitrary) :-\n    arbitrary(transform(list(integer), sort), Arbitrary).\n```\n\n----------------------------------------\n\nTITLE: Executing QuickCheck Tests in Logtalk\nDESCRIPTION: Runs a QuickCheck test with specified options, returning the seed, number of discarded tests, and label statistics.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/lgtunit_0.rst.txt#2025-04-06_snippet_29\n\nLANGUAGE: logtalk\nCODE:\n```\nrun_quick_check_tests(Template,Options,Seed,Discarded,Labels)\n```\n\n----------------------------------------\n\nTITLE: Implementing after/3 Method in Logtalk Object\nDESCRIPTION: Demonstrates how to implement the after/3 method within a Logtalk object. This example writes a log message when a message is successful, including details about the object, message, and sender.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/refman/methods/after_3.rst.txt#2025-04-06_snippet_2\n\nLANGUAGE: Logtalk\nCODE:\n```\n:- object(...,\n    implements(monitoring),\n    ...).\n\n    % write a log message when a message is successful:\n    after(Object, Message, Sender) :-\n        writeq(Object), write('::'), writeq(Message),\n        write(' from '), writeq(Sender), nl.\n```\n\n----------------------------------------\n\nTITLE: Creating Dynamic Circle Instance\nDESCRIPTION: This snippet uses the 'new/4' class method to create a dynamic instance of the circle class with specified parameters.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/classmethods/NOTES.md#2025-04-06_snippet_4\n\nLANGUAGE: logtalk\nCODE:\n```\ncircle::new(1.2, 7.9, 2.0, Circle).\n```\n\n----------------------------------------\n\nTITLE: Declaring Source File Encoding in Logtalk\nDESCRIPTION: The encoding/1 directive declares the text encoding of a Logtalk source file. It must be the first term in the file, placed on the first line. The directive requires a backend Prolog compiler that supports the chosen encoding.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/refman/directives/encoding_1.rst#2025-04-06_snippet_0\n\nLANGUAGE: Logtalk\nCODE:\n```\nencoding(Encoding)\n```\n\n----------------------------------------\n\nTITLE: Encoding Text to Base64 in Logtalk (Atom Output)\nDESCRIPTION: This example demonstrates encoding the text 'Hello world!' to Base64 format using the base64::generate/2 predicate, with the result as an atom.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/libraries/base64.rst#2025-04-06_snippet_2\n\nLANGUAGE: prolog\nCODE:\n```\n| ?- atom_codes('Hello world!', Bytes),\n     base64::generate(atom(Base64), Bytes).\nBase64 = 'SGVsbG8gd29ybGQh'\nBytes = [72,101,108,108,111,32,119,111,114,108,100,33]\nyes\n```\n\n----------------------------------------\n\nTITLE: Directory Cleanup Predicate in Logtalk Unit Testing\nDESCRIPTION: Deletes an empty directory if it exists. Directory paths are relative to the tests object path.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/lgtunit_0.rst.txt#2025-04-06_snippet_67\n\nLANGUAGE: Logtalk\nCODE:\n```\nclean_directory(Directory)\n```\n\n----------------------------------------\n\nTITLE: Adding a Registry with Default Options in Logtalk\nDESCRIPTION: Adds a new registry using default options. Fails if the registry can't be added or is already defined.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/registries_0.rst.txt#2025-04-06_snippet_4\n\nLANGUAGE: logtalk\nCODE:\n```\nadd(Registry, URL)\n```\n\n----------------------------------------\n\nTITLE: Converting List to Difference List in Logtalk\nDESCRIPTION: The as_difflist/2 predicate converts a standard list to a difference list. It requires a standard list as input and returns the equivalent difference list representation.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/list_0.rst.txt#2025-04-06_snippet_0\n\nLANGUAGE: Logtalk\nCODE:\n```\nas_difflist(List,Diffist)\n```\n\n----------------------------------------\n\nTITLE: Assertion Predicate Definition - Two Arguments\nDESCRIPTION: Defines the assertion/2 predicate that checks if an assertion is true while accepting a context parameter. The context can be used for passing location data or other metadata.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/assertions_1.rst.txt#2025-04-06_snippet_1\n\nLANGUAGE: logtalk\nCODE:\n```\nassertion(Context,Goal)\n```\n\n----------------------------------------\n\nTITLE: Guessing CSV Separator in Logtalk\nDESCRIPTION: Example showing how to detect the separator used in a CSV file by prompting user confirmation.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/libraries/csv.rst.txt#2025-04-06_snippet_2\n\nLANGUAGE: prolog\nCODE:\n```\n| ?- csv::guess_separator('test_files/crlf_ending.csv', Separator).\nIs this the proper reading of a line of this file (y/n)? [aaa,bb,ccc]\n|> y.\n\nSeparator = comma ?\n```\n\n----------------------------------------\n\nTITLE: Expansion Debug Monitor Object in Logtalk\nDESCRIPTION: Monitor object implementation for debugging term expansions.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/userman/expansion.rst.txt#2025-04-06_snippet_8\n\nLANGUAGE: logtalk\nCODE:\n```\n:- initialization(\n    define_events(after, edcg, _, _, expansions_debug)\n).\n\n\n:- object(expansions_debug,\n    implements(monitoring)).\n\n    after(edcg, term_expansion(T,E), _) :-\n        writeq(term_expansion(T,E)), nl.\n\n:- end_object.\n```\n\n----------------------------------------\n\nTITLE: Creating Person Objects\nDESCRIPTION: Creates two new person objects using the 'new' constructor predicate.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/people/NOTES.md#2025-04-06_snippet_2\n\nLANGUAGE: logtalk\nCODE:\n```\nperson::new(Id1, 'Oscar the Grouch', '1969/11/10'), person::new(Id2, 'Cookie Monster', '1969/12/02').\n```\n\n----------------------------------------\n\nTITLE: Generating XML Documentation for All Loaded Entities with Default Options in Logtalk\nDESCRIPTION: Creates XML documenting files for all loaded entities using default options. Takes no arguments.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/lgtdocp_0.rst.txt#2025-04-06_snippet_12\n\nLANGUAGE: Logtalk\nCODE:\n```\nall\n```\n\n----------------------------------------\n\nTITLE: Measuring Memory Usage in Logtalk Tests\nDESCRIPTION: Example of measuring memory usage during a test using Prolog's statistics/2 predicate and reporting it using test annotations. This example uses the ack/3 predicate from the ack object.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/devtools/lgtunit.rst#2025-04-06_snippet_46\n\nLANGUAGE: logtalk\nCODE:\n```\ntest(ack_3, true(Result == 125), [note(memory-Memory)]) :-\n       statistics(memory_used, Memory0),\n       ack::ack(3, 4, Result),\n       statistics(memory_used, Memory1),\n       Memory is Memory1 - Memory0.\n```\n\n----------------------------------------\n\nTITLE: Declaring Source File Encoding in Logtalk\nDESCRIPTION: The encoding/1 directive declares the text encoding of a Logtalk source file. It must be the first term in the file, placed on the first line. The directive requires a backend Prolog compiler that supports the chosen encoding.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/refman/directives/encoding_1.rst#2025-04-06_snippet_0\n\nLANGUAGE: Logtalk\nCODE:\n```\nencoding(Encoding)\n```\n\n----------------------------------------\n\nTITLE: Parsing CBOR Text Strings with Different Representations in Logtalk\nDESCRIPTION: Demonstrates how to decode CBOR text strings with different output representations (atom, chars list, or codes list) using the parse/2 predicate with various parametrized cbor objects.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/library/cbor/NOTES.md#2025-04-06_snippet_0\n\nLANGUAGE: logtalk\nCODE:\n```\n| ?- cbor::parse([0x65,0x68,0x65,0x6c,0x6c,0x6f], Term).\nTerm = hello\nyes\n\n| ?- cbor(atom)::parse([0x65,0x68,0x65,0x6c,0x6c,0x6f], Term).\nTerm = hello\nyes\n\n| ?- cbor(chars)::parse([0x65,0x68,0x65,0x6c,0x6c,0x6f], Term).\nTerm = chars([h,e,l,l,o])\nyes\n\n| ?- cbor(codes)::parse([0x65,0x68,0x65,0x6c,0x6c,0x6f], Term).\nTerm = codes([104,101,108,108,111])\nyes\n```\n\n----------------------------------------\n\nTITLE: Running Gensym Library Tests\nDESCRIPTION: Command to load and run the test suite for the gensym library predicates.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/library/gensym/NOTES.md#2025-04-06_snippet_1\n\nLANGUAGE: prolog\nCODE:\n```\n| ?- logtalk_load(gensym(tester)).\n```\n\n----------------------------------------\n\nTITLE: Querying Available Mutation Algorithms in Logtalk\nDESCRIPTION: Example of using the mutations_store::counter/2 predicate to query the number of mutation algorithms available for each type. This predicate returns the type and the count of available mutation algorithms.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/libraries/mutations.rst#2025-04-06_snippet_3\n\nLANGUAGE: logtalk\nCODE:\n```\n| ?- mutations_store::counter(Type, Count).\nType = atom,\nCount = 6 ;\nType = integer,\nCount = 7 ;\n...\n```\n\n----------------------------------------\n\nTITLE: Testing Input Stream Operations with get_char/1 in Logtalk\nDESCRIPTION: Examples of unit tests for get_char/1 predicate, using set_text_input to configure input streams and text_input_assertion to verify results.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/devtools/lgtunit.rst#2025-04-06_snippet_36\n\nLANGUAGE: logtalk\nCODE:\n```\ntest(get_char_1_01, true(Char == 'q')) :-\n       ^^set_text_input('qwerty'),\n       get_char(Char).\n\n   test(get_char_1_02, true(Assertion)) :-\n       ^^set_text_input('qwerty'),\n       get_char(_Char),\n       ^^text_input_assertion('werty', Assertion).\n```\n\n----------------------------------------\n\nTITLE: Declaring bagof/3 Meta-predicate Template in Prolog\nDESCRIPTION: Defines the meta-predicate template for bagof/3, indicating how its arguments should be treated.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/refman/methods/bagof_3.rst.txt#2025-04-06_snippet_1\n\nLANGUAGE: Prolog\nCODE:\n```\nbagof(*, ^, *)\n```\n\n----------------------------------------\n\nTITLE: Loading Logtalk Statistics Library\nDESCRIPTION: This snippet demonstrates how to load all entities in the Logtalk statistics library using the loader.lgt file.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/libraries/statistics.rst#2025-04-06_snippet_0\n\nLANGUAGE: Prolog\nCODE:\n```\n| ?- logtalk_load(statistics(loader)).\n```\n\n----------------------------------------\n\nTITLE: Triggering Birthday Event\nDESCRIPTION: Triggers the birthday event for the Nathalie agent, which initiates interaction between agents.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/threads/birthdays/NOTES.md#2025-04-06_snippet_4\n\nLANGUAGE: logtalk\nCODE:\n```\nnathalie::birthday.\n```\n\n----------------------------------------\n\nTITLE: Creating Block Stack Relationships\nDESCRIPTION: Establishes stacking relationships between blocks using the block_stack predicate.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/blocks/NOTES.md#2025-04-06_snippet_5\n\nLANGUAGE: logtalk\nCODE:\n```\nblock_stack::add_tuple(c-d), block_stack::add_tuple(b-c), block_stack::add_tuple(a-b).\n```\n\n----------------------------------------\n\nTITLE: Using expand_term Method in Logtalk\nDESCRIPTION: Examples of using the expand_term/2 method to apply term expansion rules. Shows how terms are transformed according to defined expansion rules.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/userman/expansion.rst#2025-04-06_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n| ?- an_object::expand_term(ping, Term).\n\nTerm = pong\nyes\n\n| ?- an_object::expand_term(colors, Colors).\n\nColors = [white, yellow, blue, green, read, black]\nyes\n\n| ?- an_object::expand_term(sounds, Sounds).\n\nSounds = sounds\nyes\n```\n\n----------------------------------------\n\nTITLE: Creating Debug Patch with Listing\nDESCRIPTION: Example of creating a debugging patch that uses the listing functionality with a specific key-based query.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/library/listing/NOTES.md#2025-04-06_snippet_5\n\nLANGUAGE: logtalk\nCODE:\n```\n| ?- create_category(\n\t         patch,\n\t         [extends(listing),complements(data)],\n\t         [public(debug/1)],\n\t         [(debug(Key) :- ::listing(p(Key,Datum)))]\n\t     ).\nyes\n\n| ?- data::debug(k42).\n...\n```\n\n----------------------------------------\n\nTITLE: Testing Multiple Hook Objects Example\nDESCRIPTION: Interactive session showing the loading of hook objects and source objects, and testing the results of the expansions performed by the different hook objects.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/userman/expansion.rst#2025-04-06_snippet_11\n\nLANGUAGE: text\nCODE:\n```\n| ?- {h1, h2, s}.\n...\n\n| ?- s1::b.\nyes\n\n| ?- s2::c.\nyes\n```\n\n----------------------------------------\n\nTITLE: Testing term expansion within private object\nDESCRIPTION: Demonstrates that term expansion does not occur within the desc_private object using a test predicate.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/expansion/NOTES.md#2025-04-06_snippet_12\n\nLANGUAGE: logtalk\nCODE:\n```\ndesc_private::test_term_expansion(8, Term).\n```\n\n----------------------------------------\n\nTITLE: Using find_at_most/4 Meta-Predicate (Limit 7)\nDESCRIPTION: This snippet tests the find_at_most/4 meta-predicate with a limit higher than the number of available solutions, collecting all solutions of a(X) into a list.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/engines/emetas/NOTES.md#2025-04-06_snippet_6\n\nLANGUAGE: logtalk\nCODE:\n```\nemetas::find_at_most(7, X, a(X), Xs).\n```\n\n----------------------------------------\n\nTITLE: Loading Mock Login with Hot Patching\nDESCRIPTION: Initialization code to enable complementing and load the mock login patch after application code.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/tools/lgtunit/NOTES.md#2025-04-06_snippet_44\n\nLANGUAGE: logtalk\nCODE:\n```\n:- initialization((\n\t\t...,\n\t\tset_logtalk_flag(complements, allow),\n\t\tlogtalk_load(application),\n\t\tlogtalk_load(mock_login),\n\t\t...\n\t)).\n```\n\n----------------------------------------\n\nTITLE: Querying Protocol Extension Relationships in Logtalk\nDESCRIPTION: Shows how to use the extends_protocol/2 and extends_protocol/3 built-in predicates to find all pairs of protocols where the first one extends the second, optionally with scope information.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/userman/protocols.rst#2025-04-06_snippet_8\n\nLANGUAGE: prolog\nCODE:\n```\n| ?- extends_protocol(Protocol1, Protocol2).\n```\n\n----------------------------------------\n\nTITLE: Loading the format Library in Logtalk\nDESCRIPTION: Command to load all entities in the format library using the loader.lgt file.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/libraries/format.rst.txt#2025-04-06_snippet_0\n\nLANGUAGE: prolog\nCODE:\n```\n| ?- logtalk_load(format(loader)).\n```\n\n----------------------------------------\n\nTITLE: List Parametric Object Last Element Query\nDESCRIPTION: Uses the last/1 predicate with a parametric list object to retrieve the last element of the list.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/parametric/NOTES.md#2025-04-06_snippet_3\n\nLANGUAGE: logtalk\nCODE:\n```\n[1, 2, 3]::last(X).\n```\n\n----------------------------------------\n\nTITLE: Comember Predicate Implementation\nDESCRIPTION: Example implementation of a coinductive comember/2 predicate that checks for infinite occurrences of elements in a list.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/refman/methods/coinductive_success_hook_1_2.rst#2025-04-06_snippet_2\n\nLANGUAGE: logtalk\nCODE:\n```\n:- public(comember/2).\n:- coinductive(comember/2).\ncomember(X, [_| T]) :-\n    comember(X, T).\n```\n\n----------------------------------------\n\nTITLE: Testing Logtalk Statistics Library\nDESCRIPTION: This snippet shows how to load the tester.lgt file to test the predicates in the Logtalk statistics library.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/libraries/statistics.rst#2025-04-06_snippet_1\n\nLANGUAGE: Prolog\nCODE:\n```\n| ?- logtalk_load(statistics(tester)).\n```\n\n----------------------------------------\n\nTITLE: Specifying Modes for logtalk_linter_hook/7 in Logtalk\nDESCRIPTION: Defines the modes and number of proofs for the logtalk_linter_hook/7 predicate. It specifies the expected types of arguments and the predicate's determinism.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/refman/predicates/logtalk_linter_hook_7.rst#2025-04-06_snippet_1\n\nLANGUAGE: Prolog\nCODE:\n```\nlogtalk_linter_hook(@callable, +atom, +atom, +pair(integer), +atom, @object_identifier, --callable) - zero_or_one\n```\n\n----------------------------------------\n\nTITLE: Retrieving Assignable Variable State\nDESCRIPTION: Unifies a value with the current state of an assignable variable. Uses => operator with precedence 100. Throws instantiation error if variable not instantiated.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/assignvarsp_0.rst.txt#2025-04-06_snippet_3\n\nLANGUAGE: logtalk\nCODE:\n```\nVariable=>Value\n```\n\n----------------------------------------\n\nTITLE: Generating ULID as Character List\nDESCRIPTION: Example of generating a ULID using character list representation.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/library/ulid/NOTES.md#2025-04-06_snippet_3\n\nLANGUAGE: prolog\nCODE:\n```\n| ?- ulid(chars)::generate(ULID).\nULID = ['0','1','H','0','J','3','2','Y','V','5','V','S','P','K','5','P','4','5','G','G','0','9','8','8','M','2']\nyes\n```\n\n----------------------------------------\n\nTITLE: Substituting Elements in a List in Logtalk\nDESCRIPTION: Substitutes all occurrences of an element in a list with a new element.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/listp_0.rst.txt#2025-04-06_snippet_25\n\nLANGUAGE: Logtalk\nCODE:\n```\nsubstitute(Old,List,New,NewList)\n```\n\n----------------------------------------\n\nTITLE: Defining Diagram Description Predicate in Logtalk\nDESCRIPTION: Predicate that retrieves the diagram description as an atom.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/diagram_1.rst.txt#2025-04-06_snippet_5\n\nLANGUAGE: logtalk\nCODE:\n```\ndiagram_description(-atom)\n```\n\n----------------------------------------\n\nTITLE: Specifying Modes and Proofs for threaded_engine_yield/1 in Logtalk\nDESCRIPTION: Specifies the mode and number of proofs for the threaded_engine_yield/1 predicate. It indicates that the predicate takes an output term and has zero or one solutions.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/refman/predicates/threaded_engine_yield_1.rst.txt#2025-04-06_snippet_1\n\nLANGUAGE: Logtalk\nCODE:\n```\nthreaded_engine_yield(@term) - zero_or_one\n```\n\n----------------------------------------\n\nTITLE: Loading the term_io Library in Logtalk\nDESCRIPTION: Command to load all entities in the term_io library using the loader.lgt file. This makes all library predicates available for use in the Logtalk environment.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/libraries/term_io.rst#2025-04-06_snippet_0\n\nLANGUAGE: logtalk\nCODE:\n```\n| ?- logtalk_load(term_io(loader)).\n```\n\n----------------------------------------\n\nTITLE: Starting a slideshow with remote navigation\nDESCRIPTION: This snippet starts a slideshow with remote navigation capabilities. It checks if the current object is 'jupyter' and if not, it calls the show/2 predicate with a list of slide numbers and the 'slide' predicate as arguments.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/slides/NOTES.md#2025-04-06_snippet_2\n\nLANGUAGE: logtalk\nCODE:\n```\n(current_object(jupyter) -> true; slides::show([1,2,3,4,5,6], slide)).\n```\n\n----------------------------------------\n\nTITLE: Usage Modes for threaded_ignore/1\nDESCRIPTION: The usage mode specification for threaded_ignore/1, showing that it expects a callable term as input and always succeeds exactly once.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/refman/predicates/threaded_ignore_1.rst#2025-04-06_snippet_2\n\nLANGUAGE: prolog\nCODE:\n```\nthreaded_ignore(@callable) - one\n```\n\n----------------------------------------\n\nTITLE: Grammar Rule Example with Lambda Expression\nDESCRIPTION: Demonstrates using call//1-N with a lambda expression to calculate squares in a grammar rule.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/refman/methods/call_1.rst.txt#2025-04-06_snippet_1\n\nLANGUAGE: prolog\nCODE:\n```\nsquare -->\n    call([Number, Double]>>(Double is Number*Number)).\n```\n\n----------------------------------------\n\nTITLE: Print Version Information\nDESCRIPTION: Prints the versions of Logtalk, Prolog backend, and kernel\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/planets/NOTES.md#2025-04-06_snippet_0\n\nLANGUAGE: logtalk\nCODE:\n```\n%versions\n```\n\n----------------------------------------\n\nTITLE: Importing Gensym Core Category\nDESCRIPTION: Example showing how to import the gensym_core category privately into an object to create local generators and avoid name clashes.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/library/gensym/NOTES.md#2025-04-06_snippet_2\n\nLANGUAGE: logtalk\nCODE:\n```\n:- object(foo,\n\t\timports(private::gensym_core)).\n\n\t\tbar :-\n\t\t\t^^gensym(p, S),\n\t\t\t...\n\n\t:- end_object.\n```\n\n----------------------------------------\n\nTITLE: Querying Instantiation Relations in Logtalk\nDESCRIPTION: Shows how to use the instantiates_class/2 and instantiates_class/3 built-in predicates to query all instantiation relations between instances and classes, optionally retrieving the instantiation scope.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/userman/objects.rst.txt#2025-04-06_snippet_22\n\nLANGUAGE: text\nCODE:\n```\n| ?- instantiates_class(Instance, Class).\n```\n\nLANGUAGE: text\nCODE:\n```\n| ?- instantiates_class(Instance, Class, Scope).\n```\n\n----------------------------------------\n\nTITLE: Wrapping Plain Prolog Code in a Logtalk Object for Linting\nDESCRIPTION: Shows how to wrap plain Prolog code in a Logtalk object for linting purposes. This approach allows the linter to check code in a 'code.pl' file.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/tools/linter/NOTES.md#2025-04-06_snippet_1\n\nLANGUAGE: Logtalk\nCODE:\n```\n:- object(code).\n\t:- include('code.pl').\n:- end_object.\n```\n\n----------------------------------------\n\nTITLE: Format to Characters List Predicate (4-arg)\nDESCRIPTION: Writes formatted output to a list of characters with specified tail list using a format string and arguments list.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/term_io_protocol_0.rst.txt#2025-04-06_snippet_8\n\nLANGUAGE: logtalk\nCODE:\n```\nformat_to_chars(Format,Arguments,Chars,Tail)\n```\n\n----------------------------------------\n\nTITLE: Removing Log Points in Logtalk\nDESCRIPTION: Removes all matching log points.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/debuggerp_0.rst.txt#2025-04-06_snippet_21\n\nLANGUAGE: Logtalk\nCODE:\n```\nnolog/3\n```\n\n----------------------------------------\n\nTITLE: Defining language_object/2 Predicate in Logtalk\nDESCRIPTION: Defines the language_object/2 predicate which maintains a table of defined graph languages and their implementation objects. It has static and multifile compilation flags and supports zero or more proofs for querying language-object pairs.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/graph_language_registry_0.rst.txt#2025-04-06_snippet_0\n\nLANGUAGE: Logtalk\nCODE:\n```\nlanguage_object(?atom,?object_identifier)\n```\n\n----------------------------------------\n\nTITLE: Loading the Symbolic Differentiation Example in Logtalk\nDESCRIPTION: Loads the symdiff example which implements the symbolic differentiation and simplification functionality.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/symdiff/NOTES.md#2025-04-06_snippet_1\n\nLANGUAGE: logtalk\nCODE:\n```\nlogtalk_load(symdiff(loader)).\n```\n\n----------------------------------------\n\nTITLE: FCube Operator Definitions\nDESCRIPTION: Operator declarations for logical connectives used in formulas.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/fcube_0.rst.txt#2025-04-06_snippet_4\n\nLANGUAGE: logtalk\nCODE:\n```\nop(1200,xfy,<=>)\nop(1110,xfy,=>)\nop(1000,xfy,&&)\nop(500,fy,~)\nop(1100,xfy,v)\n```\n\n----------------------------------------\n\nTITLE: Adding ignore/1 meta-predicate in Logtalk\nDESCRIPTION: Added the meta-predicate ignore/1, implemented by some Prolog compilers as a built-in predicate, as a Logtalk built-in method.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/RELEASE_NOTES.md#2025-04-06_snippet_132\n\nLANGUAGE: Logtalk\nCODE:\n```\nignore/1\n```\n\n----------------------------------------\n\nTITLE: CBOR Parse Predicate Definition\nDESCRIPTION: Predicate that parses a list of bytes in CBOR format into a corresponding term representation. Takes a list of bytes as input and returns a ground term. Throws an error for invalid byte sequences.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/cbor_1.rst.txt#2025-04-06_snippet_0\n\nLANGUAGE: prolog\nCODE:\n```\nparse(@list(byte),-ground)\n```\n\n----------------------------------------\n\nTITLE: Integrating Circle Function Using QuadRec2D with 4 Threads\nDESCRIPTION: Performs integration of the circle function over a square domain using quadrec2d with 4 threads and measures execution time.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/threads/integration2d/NOTES.md#2025-04-06_snippet_6\n\nLANGUAGE: logtalk\nCODE:\n```\ntime(quadrec2d(4)::integrate(circle, -2, 2, -2, 2, 2, 2.5e-10, Integral)).\n```\n\n----------------------------------------\n\nTITLE: Setting Default Hook Object Globally\nDESCRIPTION: Example of setting a global default hook object by calling the set_logtalk_flag/2 predicate, which will apply to all source files unless overridden.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/userman/expansion.rst#2025-04-06_snippet_12\n\nLANGUAGE: text\nCODE:\n```\n| ?- set_logtalk_flag(hook, hook_object).\n\nyes\n```\n\n----------------------------------------\n\nTITLE: Testing Recorded Database Library in Logtalk\nDESCRIPTION: This snippet shows how to load the tester.lgt file to test the recorded_database library predicates.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/libraries/recorded_database.rst.txt#2025-04-06_snippet_1\n\nLANGUAGE: Prolog\nCODE:\n```\n| ?- logtalk_load(recorded_database(tester)).\n```\n\n----------------------------------------\n\nTITLE: Demonstrating a non-null cat object behavior\nDESCRIPTION: Shows how a regular cat object responds to the make_sound predicate with its specific implementation.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/design_patterns/behavioral/null_object/NOTES.md#2025-04-06_snippet_3\n\nLANGUAGE: logtalk\nCODE:\n```\ncat::make_sound.\n```\n\n----------------------------------------\n\nTITLE: Predicate Mode Declaration\nDESCRIPTION: Specifies the mode declaration for abolish_events/5, indicating how arguments should be instantiated.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/refman/predicates/abolish_events_5.rst.txt#2025-04-06_snippet_1\n\nLANGUAGE: prolog\nCODE:\n```\nabolish_events(@term, @term, @term, @term, @term) - one\n```\n\n----------------------------------------\n\nTITLE: File assertion predicates\nDESCRIPTION: New lgtunit predicates for asserting file contents match expected values\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/RELEASE_NOTES.md#2025-04-06_snippet_31\n\nLANGUAGE: Prolog\nCODE:\n```\ntext_file_assertion(File, ExpectedContent, Message)\nbinary_file_assertion(File, ExpectedContent, Message)\n```\n\n----------------------------------------\n\nTITLE: Specifying Modes for define_events/5 in Prolog\nDESCRIPTION: Defines the mode and number of proofs for the define_events/5 predicate. It indicates that the first four arguments are input terms and the last argument is an input object identifier.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/refman/predicates/define_events_5.rst#2025-04-06_snippet_1\n\nLANGUAGE: Prolog\nCODE:\n```\ndefine_events(@term, @term, @term, @term, +object_identifier) - one\n```\n\n----------------------------------------\n\nTITLE: Running the Ping-Pong Game with Five Exchanges\nDESCRIPTION: Executes the ping_pong game with five exchanges between players, demonstrating how the game handles multiple iterations before terminating the player threads.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/threads/ping_pong/NOTES.md#2025-04-06_snippet_3\n\nLANGUAGE: logtalk\nCODE:\n```\nping_pong::play(5).\n```\n\n----------------------------------------\n\nTITLE: Remembering Referenced Prolog File in Diagram\nDESCRIPTION: Predicate to remember a referenced Prolog file in the diagram. It takes a file path as an argument and is compiled with the 'static' flag.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/file_diagram_1.rst.txt#2025-04-06_snippet_2\n\nLANGUAGE: Logtalk\nCODE:\n```\nremember_referenced_prolog_file(Path)\n```\n\n----------------------------------------\n\nTITLE: Logtalk Library Path Testing Example\nDESCRIPTION: Code snippet illustrating usage of the logtalk_library_path/2 built-in predicate. Used in tests to verify library path functionality.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/RELEASE_NOTES.md#2025-04-06_snippet_32\n\nLANGUAGE: Logtalk\nCODE:\n```\nlogtalk_library_path(Library, Path)\n```\n\n----------------------------------------\n\nTITLE: Recognizing a Parallelogram Without Vertex Mapping\nDESCRIPTION: Recognizes a parallelogram by defining its edges and querying for its class without vertex mapping.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/ncl/figures/NOTES.md#2025-04-06_snippet_3\n\nLANGUAGE: logtalk\nCODE:\n```\nfigures(_, _, _, _, _, _, _, _, _, _, _, _, _, _, _)::(\\n\\t\\tedge(1, 2,  0, 20),\\n\\t\\tedge(2, 3, 45, 30),\\n\\t\\tedge(3, 4,  0, 20),\\n\\t\\tedge(4, 1, 45, 30),\\n\\t\\tclass(Name)\\n\\t).\n```\n\n----------------------------------------\n\nTITLE: Predicate Mode Declaration\nDESCRIPTION: Specifies the mode declaration for abolish_events/5, indicating how arguments should be instantiated.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/refman/predicates/abolish_events_5.rst.txt#2025-04-06_snippet_1\n\nLANGUAGE: prolog\nCODE:\n```\nabolish_events(@term, @term, @term, @term, @term) - one\n```\n\n----------------------------------------\n\nTITLE: Setting Time Component with the xyzt Object in Logtalk\nDESCRIPTION: Sets the time component of the xyzt object using the translate predicate inherited from the t object.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/mi/NOTES.md#2025-04-06_snippet_3\n\nLANGUAGE: logtalk\nCODE:\n```\nxyzt::translate(4).\n```\n\n----------------------------------------\n\nTITLE: Type Checking with check/3 in Logtalk\nDESCRIPTION: Illustrates the use of check/3 predicate, which includes a context argument for more detailed error reporting. The example shows checking for an integer type with a custom context.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/libraries/types.rst.txt#2025-04-06_snippet_5\n\nLANGUAGE: prolog\nCODE:\n```\n| ?- catch(type::check(integer, abc, foo/3), Error, true).\nError = error(type_error(integer, abc), foo/3)\nyes\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Type and Generator for 'odd' Integers in Logtalk\nDESCRIPTION: Example defining a new 'odd' type with type checker and arbitrary generator. Demonstrates extending the type and arbitrary functionality.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/libraries/arbitrary.rst#2025-04-06_snippet_3\n\nLANGUAGE: prolog\nCODE:\n```\n:- multifile(type::type/1).\ntype::type(odd).\n\n:- multifile(type::check/2).\ntype::check(odd, Term) :-\n    (   var(Term) ->\n        throw(instantiation_error)\n    ;   integer(Term),\n        Term mod 2 =:= 1 ->\n        true\n    ;   throw(type_error(odd, Term))\n    ).\n\n:- multifile(arbitrary::arbitrary/1).\narbitrary::arbitrary(odd).\n\n:- multifile(arbitrary::arbitrary/2).\narbitrary::arbitrary(odd, Arbitrary) :-\n    type::arbitrary(integer, Arbitrary0),\n    (   Arbitrary0 mod 2 =:= 1 ->\n        Arbitrary = Arbitrary0\n    ;   Arbitrary is Arbitrary0 + 1\n    ).\n```\n\n----------------------------------------\n\nTITLE: Mode Declaration for threaded_engine_next/2 in Logtalk\nDESCRIPTION: Specifies the mode declaration for threaded_engine_next/2 predicate, indicating that the first argument must be instantiated (nonvar) and the second can be any term, with zero_or_one proof.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/refman/predicates/threaded_engine_next_2.rst.txt#2025-04-06_snippet_1\n\nLANGUAGE: prolog\nCODE:\n```\nthreaded_engine_next(@nonvar, ?term) - zero_or_one\n```\n\n----------------------------------------\n\nTITLE: Testing Zippers Library in Logtalk\nDESCRIPTION: This snippet shows how to load the tester file for the 'zippers' library to test its predicates. It uses the logtalk_load/1 predicate to load the tester file.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/libraries/zippers.rst.txt#2025-04-06_snippet_1\n\nLANGUAGE: Logtalk\nCODE:\n```\n| ?- logtalk_load(zippers(tester)).\n```\n\n----------------------------------------\n\nTITLE: Generating Default Random Identifier\nDESCRIPTION: Generates a random identifier using the default 160 bits of randomness, returning a Base64 encoded atom.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/libraries/ids.rst.txt#2025-04-06_snippet_2\n\nLANGUAGE: logtalk\nCODE:\n```\n| ?- ids::generate(Identifier).\nIdentifier = '2gpMzqAFXBO5mYFIPX1qMkHxgGE='\nyes\n```\n\n----------------------------------------\n\nTITLE: Setting Spy Points in Logtalk\nDESCRIPTION: Predicate to set a spy point. It takes four arguments: Event, Object, Message, and Sender. It has a compilation flag of 'static' and returns one proof.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/monitorp_0.rst.txt#2025-04-06_snippet_5\n\nLANGUAGE: Logtalk\nCODE:\n```\nset_spy_point(Event,Object,Message,Sender)\n```\n\n----------------------------------------\n\nTITLE: Copy-based Permutations Benchmark\nDESCRIPTION: Runs the copy-based implementation of permutations algorithm with input size 7 and measures execution time.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/permutations/NOTES.md#2025-04-06_snippet_7\n\nLANGUAGE: logtalk\nCODE:\n```\ntime(permutations::copy(7)).\n```\n\n----------------------------------------\n\nTITLE: Accessing Queue Head in Logtalk\nDESCRIPTION: Example showing how to create a queue, add an element, and access the head using head/2 predicate.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/library/queues/NOTES.md#2025-04-06_snippet_4\n\nLANGUAGE: logtalk\nCODE:\n```\n| ?- queue::(new(Queue0), join(1, Queue0, Queue1), head(Queue1, Head)).\nQueue0 = ...,\nQueue1 = ...,\nHead = 1\nyes\n```\n\n----------------------------------------\n\nTITLE: Defining the Ignore Meta-Predicate in Logtalk\nDESCRIPTION: Example of implementing a simple meta-predicate with a goal meta-argument. This predicate tries to satisfy a goal but always succeeds regardless of whether the goal succeeds or fails.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/userman/predicates.rst.txt#2025-04-06_snippet_26\n\nLANGUAGE: logtalk\nCODE:\n```\n:- public(ignore/1).\n:- meta_predicate(ignore(0)).\n\nignore(Goal) :-\n   (Goal -> true; true).\n```\n\n----------------------------------------\n\nTITLE: Enumerating Log Points in Logtalk\nDESCRIPTION: Enumerates, by backtracking, all defined log points.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/debuggerp_0.rst.txt#2025-04-06_snippet_20\n\nLANGUAGE: Logtalk\nCODE:\n```\nlogging/3\n```\n\n----------------------------------------\n\nTITLE: Template and Modes for encoding/1 Directive\nDESCRIPTION: The template and mode declaration for the encoding/1 directive. It specifies that the directive takes a single argument of type atom, which must be instantiated (input).\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/refman/directives/encoding_1.rst#2025-04-06_snippet_2\n\nLANGUAGE: Logtalk\nCODE:\n```\nencoding(+atom)\n```\n\n----------------------------------------\n\nTITLE: Defining predicate_property/2 Method in Logtalk\nDESCRIPTION: Signature of the predicate_property/2 method, which enumerates properties of visible object predicates. It takes a Predicate and a Property as arguments.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/refman/methods/predicate_property_2.rst.txt#2025-04-06_snippet_0\n\nLANGUAGE: Logtalk\nCODE:\n```\npredicate_property(Predicate, Property)\n```\n\n----------------------------------------\n\nTITLE: Using findall/4 in Different Contexts in Logtalk\nDESCRIPTION: Demonstrates how to use findall/4 in various contexts, including within an object/category, with self, and with an explicit object.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/refman/methods/findall_4.rst#2025-04-06_snippet_3\n\nLANGUAGE: Logtalk\nCODE:\n```\nfindall(Template, Goal, List, Tail)\nfindall(Template, ::Message, List, Tail)\nfindall(Template, Object::Message, List, Tail)\n```\n\n----------------------------------------\n\nTITLE: Querying Sedan Object Predicates in Logtalk\nDESCRIPTION: Displays all public predicates available for the sedan object using current_predicate/1.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/carengines/NOTES.md#2025-04-06_snippet_2\n\nLANGUAGE: logtalk\nCODE:\n```\n%%table\nsedan::current_predicate(Predicate).\n```\n\n----------------------------------------\n\nTITLE: Testing FFT Results with Random Input in Logtalk\nDESCRIPTION: Generates a random input list and compares FFT results using 1, 2, and 4 threads to ensure consistency.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/threads/fft/NOTES.md#2025-04-06_snippet_1\n\nLANGUAGE: logtalk\nCODE:\n```\nN=8, cgenerator::list(N,L), fft(1)::fft(N,L,F1), fft(2)::fft(N,L,F2), fft(4)::fft(N,L,F4).\n```\n\n----------------------------------------\n\nTITLE: Implementing the before/3 Method for Logging in Logtalk\nDESCRIPTION: This example shows how to implement the before/3 method in a Logtalk object that implements the monitoring protocol. The implementation logs messages by writing the object, message, and sender to the output.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/refman/methods/before_3.rst#2025-04-06_snippet_2\n\nLANGUAGE: logtalk\nCODE:\n```\n:- object(...,\n    implements(monitoring),\n    ...).\n\n    % write a log message when a message is sent:\n    before(Object, Message, Sender) :-\n        writeq(Object), write('::'), writeq(Message),\n        write(' from '), writeq(Sender), nl.\n```\n\n----------------------------------------\n\nTITLE: Enumerating Context Breakpoints in Logtalk\nDESCRIPTION: Enumerates, by backtracking, all defined context breakpoints.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/debuggerp_0.rst.txt#2025-04-06_snippet_16\n\nLANGUAGE: Logtalk\nCODE:\n```\nspying/4\n```\n\n----------------------------------------\n\nTITLE: Domain Error Usage Example\nDESCRIPTION: Example showing how to use domain_error/2 to throw an error when an invalid color value is provided.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/refman/methods/domain_error_2.rst.txt#2025-04-06_snippet_3\n\nLANGUAGE: prolog\nCODE:\n```\n...,\natom(Color),\n\\+ color(Color),\ndomain_error(color, Color).\n```\n\n----------------------------------------\n\nTITLE: Checking Term Variants in Logtalk\nDESCRIPTION: Defines a predicate to check if two terms are variants (structurally equivalent).\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/termp_0.rst.txt#2025-04-06_snippet_7\n\nLANGUAGE: Logtalk\nCODE:\n```\nvariant(Term1,Term2)\n```\n\n----------------------------------------\n\nTITLE: Time Parametric Object Query\nDESCRIPTION: Retrieves the current time using a parametric time object with variables for hours, minutes, and seconds.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/parametric/NOTES.md#2025-04-06_snippet_8\n\nLANGUAGE: logtalk\nCODE:\n```\ntime(Hours, Mins, Secs)::now.\n```\n\n----------------------------------------\n\nTITLE: Declaring Multifile Predicates with multifile/1 Directive\nDESCRIPTION: The multifile/1 directive allows predicate clauses to be defined across multiple objects and categories, commonly used for hook predicates in Logtalk.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/userman/predicates.rst#2025-04-06_snippet_25\n\nLANGUAGE: logtalk\nCODE:\n```\n:- multifile(Name/Arity).\n```\n\n----------------------------------------\n\nTITLE: Type-checking ULID Validation\nDESCRIPTION: Example of type-checking a ULID with invalid characters.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/libraries/ulid.rst#2025-04-06_snippet_9\n\nLANGUAGE: logtalk\nCODE:\n```\n| ?- type::check(ulid(atom), '01BX5ZIKBKALTAV9OEVGEMMVRY').\nuncaught exception: domain_error(ulid,'01BX5ZIKBKALTAV9OEVGEMMVRY')\n```\n\n----------------------------------------\n\nTITLE: Partition/4 Meta-predicate with User-defined Predicate\nDESCRIPTION: Demonstrates the use of the partition/4 meta-predicate with a predicate defined in the pseudo-object user.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/metapredicates/NOTES.md#2025-04-06_snippet_5\n\nLANGUAGE: logtalk\nCODE:\n```\nmeta::partition(even_integer, [1,2,3,4,5], Included, Excluded).\n```\n\n----------------------------------------\n\nTITLE: Void Element Example\nDESCRIPTION: Example of generating a horizontal rule with a class attribute\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/libraries/html.rst#2025-04-06_snippet_2\n\nLANGUAGE: prolog\nCODE:\n```\nhr([class-separator])\n```\n\n----------------------------------------\n\nTITLE: Enumerating Debug-Compiled Entities in Logtalk\nDESCRIPTION: Enumerates, by backtracking, all entities compiled in debug mode.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/debuggerp_0.rst.txt#2025-04-06_snippet_4\n\nLANGUAGE: Logtalk\nCODE:\n```\ndebugging/1\n```\n\n----------------------------------------\n\nTITLE: Saving a named database to a file\nDESCRIPTION: Saves all dynamic predicates in the 'my_db' database to a file named 'my_db.pl'.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/named_databases/NOTES.md#2025-04-06_snippet_7\n\nLANGUAGE: logtalk\nCODE:\n```\ndb_save(my_db, 'my_db.pl').\n```\n\n----------------------------------------\n\nTITLE: Checking Term Subsumption in Logtalk\nDESCRIPTION: Defines a deprecated predicate to check if one term subsumes another. It's recommended to use the standard 'subsumes_term/2' predicate instead.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/termp_0.rst.txt#2025-04-06_snippet_4\n\nLANGUAGE: Logtalk\nCODE:\n```\nsubsumes(General,Specific)\n```\n\n----------------------------------------\n\nTITLE: Querying Class Instances\nDESCRIPTION: Retrieves all instances of the class metaclass.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/roots/NOTES.md#2025-04-06_snippet_5\n\nLANGUAGE: logtalk\nCODE:\n```\nclass::instances(Instances).\n```\n\n----------------------------------------\n\nTITLE: Specifying Modes for message_tokens//2 Method in Logtalk\nDESCRIPTION: Specifies the calling modes for the message_tokens//2 method, indicating it accepts non-variable terms for both arguments and can return zero or more solutions.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/refman/methods/message_tokens_2.rst#2025-04-06_snippet_1\n\nLANGUAGE: Prolog\nCODE:\n```\nmessage_tokens(+nonvar, +nonvar) - zero_or_more\n```\n\n----------------------------------------\n\nTITLE: QuickCheck Test Dialect in Logtalk\nDESCRIPTION: Shows the syntax for QuickCheck testing, which automatically generates and runs random tests based on predicate mode templates.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/devtools/lgtunit.rst#2025-04-06_snippet_13\n\nLANGUAGE: Logtalk\nCODE:\n```\nquick_check(Test, Template, Options).\nquick_check(Test, Template).\n```\n\n----------------------------------------\n\nTITLE: Parsing Decimal Dot in Logtalk\nDESCRIPTION: Parses a decimal dot. Accepts an atomic value as input or output. Returns zero or one proof.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/number_grammars_1.rst.txt#2025-04-06_snippet_11\n\nLANGUAGE: Logtalk\nCODE:\n```\ndot(Dot)\n```\n\n----------------------------------------\n\nTITLE: Running Code Metrics Tool Unit Tests in Logtalk\nDESCRIPTION: This query loads and runs the unit tests for the code_metrics tool. It's useful for verifying the tool's functionality.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/tools/code_metrics/SCRIPT.txt#2025-04-06_snippet_1\n\nLANGUAGE: Logtalk\nCODE:\n```\n| ?- logtalk_load(code_metrics(tester)).\n```\n\n----------------------------------------\n\nTITLE: Printing Greeting Message in Neo4j-Logtalk Integration\nDESCRIPTION: Logtalk code to print a greeting message using the Neo4j connection, with a check for the Jupyter environment.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/neo4j/NOTES.md#2025-04-06_snippet_3\n\nLANGUAGE: logtalk\nCODE:\n```\n(current_object(jupyter) -> true; hello_world('bolt://localhost:7687', 'neo4j', 'password')::print_greeting('Hello world!')).\n```\n\n----------------------------------------\n\nTITLE: Using the alias/2 Directive in Logtalk\nDESCRIPTION: The alias/2 directive definition that allows creating alternative names for inherited or imported predicates. This helps improve readability and solve inheritance conflicts.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/userman/predicates.rst#2025-04-06_snippet_20\n\nLANGUAGE: logtalk\nCODE:\n```\n:- alias(Entity, [\n    Predicate1 as Alias1,\n    Predicate2 as Alias2,\n    ...\n]).\n```\n\n----------------------------------------\n\nTITLE: Benchmarking FFT Performance with Medium Input in Logtalk\nDESCRIPTION: Measures the execution time of FFT calculations for a medium-sized input (N=8192) using 1, 2, and 4 threads.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/threads/fft/NOTES.md#2025-04-06_snippet_4\n\nLANGUAGE: logtalk\nCODE:\n```\nN=8192, cgenerator::list(N, L), time(fft(1)::fft(N,L,F1)), time(fft(2)::fft(N,L,F2)), time(fft(4)::fft(N,L,F3)).\n```\n\n----------------------------------------\n\nTITLE: Integrating Circle Function Using Single-Threaded QuadSplit2D Method\nDESCRIPTION: Performs integration of the circle function over a square domain using quadsplit2d with 1 thread and measures execution time.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/threads/integration2d/NOTES.md#2025-04-06_snippet_2\n\nLANGUAGE: logtalk\nCODE:\n```\ntime(quadsplit2d(1)::integrate(circle, -2, 2, -2, 2, 2, 2.5e-10, Integral)).\n```\n\n----------------------------------------\n\nTITLE: Querying Date and Time Parametric Objects in Logtalk\nDESCRIPTION: Shows queries using date and time parametric objects, including getting today's date and current time.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/parvars/NOTES.md#2025-04-06_snippet_2\n\nLANGUAGE: logtalk\nCODE:\n```\ndate(Year, Month, Day)::today.\n```\n\nLANGUAGE: logtalk\nCODE:\n```\ndate(Year, _, _)::today, \\+ date(Year, _, _)::leap_year.\n```\n\nLANGUAGE: logtalk\nCODE:\n```\ntime(Hours, Mins, Secs)::now.\n```\n\n----------------------------------------\n\nTITLE: Write Canonical Predicate Reference\nDESCRIPTION: Reference to the ISO Prolog standard predicate that may cause compilation reporting issues when implemented incorrectly.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/faq/troubleshooting.rst#2025-04-06_snippet_1\n\nLANGUAGE: restructuredtext\nCODE:\n```\n``write_canonical/2``\n```\n\n----------------------------------------\n\nTITLE: Generating Multiple Expected Terms with Custom Error in Logtalk\nDESCRIPTION: Constructs expected terms with the values generated by calling the given goal. If the goal fails or throws an error, it returns an expected term with the custom error specified by the Error parameter.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/expected_0.rst.txt#2025-04-06_snippet_5\n\nLANGUAGE: Logtalk\nCODE:\n```\nfrom_generator(Goal,Value,Error,Expected)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Messages from Split Queue\nDESCRIPTION: Retrieves messages from the split queue implementation, showing top priority messages first.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/engines/pmq/NOTES.md#2025-04-06_snippet_8\n\nLANGUAGE: logtalk\nCODE:\n```\nsplit::messages(List).\n```\n\n----------------------------------------\n\nTITLE: Meta-predicate Template for threaded_ignore/1\nDESCRIPTION: The meta-predicate template showing that threaded_ignore/1 takes a goal argument (represented by 0) that will be executed as a callable term.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/refman/predicates/threaded_ignore_1.rst.txt#2025-04-06_snippet_1\n\nLANGUAGE: prolog\nCODE:\n```\nthreaded_ignore(0)\n```\n\n----------------------------------------\n\nTITLE: Moving Entire Stack\nDESCRIPTION: Moves the entire stack by moving the bottom block, demonstrating event propagation.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/blocks/NOTES.md#2025-04-06_snippet_8\n\nLANGUAGE: logtalk\nCODE:\n```\nd::move(9, 1).\n```\n\n----------------------------------------\n\nTITLE: Setting EDCG Hook in Logtalk\nDESCRIPTION: Shows how to enable the EDCG hook for a source file, either by setting it as a compiler option when loading the file or by adding a directive at the beginning of the source file.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/library/edcg/NOTES.md#2025-04-06_snippet_0\n\nLANGUAGE: logtalk\nCODE:\n```\n| ?- logtalk_load(source, [hook(edcg)]).\n```\n\nLANGUAGE: logtalk\nCODE:\n```\n:- set_logtalk_flag(hook, edcg).\n```\n\n----------------------------------------\n\nTITLE: Sample Requirements File Format\nDESCRIPTION: Example format for a packs requirements file showing registry and pack declarations.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/tools/packs/NOTES.md#2025-04-06_snippet_11\n\nLANGUAGE: prolog\nCODE:\n```\nregistry(talkshow, 'https://github.com/LogtalkDotOrg/talkshow.git').\npack(talkshow, logtalk, 3:45:0).\npack(talkshow, lflat, 2:1:0).\n```\n\n----------------------------------------\n\nTITLE: Loading JIProlog .jip Files in Prolog\nDESCRIPTION: Example of loading .jip files using the JIProlog load/1 predicate. This snippet demonstrates how to load the Logtalk compiler, runtime, and an application file.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/scripts/embedding/jiprolog/NOTES.md#2025-04-06_snippet_0\n\nLANGUAGE: Prolog\nCODE:\n```\n:- load('logtalk.jip').\n:- load('application.jip').\n```\n\n----------------------------------------\n\nTITLE: Second Hook Object in Multiple Hook Objects Example\nDESCRIPTION: Definition of a second hook object (h2) for the multiple hook objects example, providing different expansion rules.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/userman/expansion.rst#2025-04-06_snippet_9\n\nLANGUAGE: logtalk\nCODE:\n```\n:- object(h2,\n    implements(expanding)).\n\n    term_expansion((:- public(a/0)), (:- public(c/0))).\n    term_expansion(a, c).\n\n:- end_object.\n```\n\n----------------------------------------\n\nTITLE: Looking Up Key-Value Pair in Dictionary in Logtalk\nDESCRIPTION: Looks up a matching key-value pair in a dictionary. Can be used to find a specific key or enumerate all pairs.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/dictionaryp_0.rst.txt#2025-04-06_snippet_11\n\nLANGUAGE: Logtalk\nCODE:\n```\nlookup(Key,Value,Dictionary)\n```\n\n----------------------------------------\n\nTITLE: Enumerating Log Entries\nDESCRIPTION: Enumerates all log entries using backtracking, displaying the date and entry content for each log item.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/logs/NOTES.md#2025-04-06_snippet_5\n\nLANGUAGE: logtalk\nCODE:\n```\n%%table\nobject::log_entry(Date, Entry).\n```\n\n----------------------------------------\n\nTITLE: Finding a Specific Option in Options List in Logtalk\nDESCRIPTION: The option/2 predicate finds the first occurrence of an option in the options list. It succeeds if Option unifies with a matching option from the list, and fails otherwise.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/options_protocol_0.rst.txt#2025-04-06_snippet_6\n\nLANGUAGE: prolog\nCODE:\n```\noption(Option,Options)\n```\n\n----------------------------------------\n\nTITLE: Defining Predicate Info Pair Score Hook in Logtalk\nDESCRIPTION: This predicate sets the score for predicate info/2 directive pairs. It provides fine-grained control over scoring individual predicate info documentation elements.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/doc_metric_0.rst.txt#2025-04-06_snippet_6\n\nLANGUAGE: Logtalk\nCODE:\n```\npredicate_info_pair_score_hook(Pair,Entity,Predicate,Score)\n```\n\n----------------------------------------\n\nTITLE: Compiling Source Files with Debug Mode\nDESCRIPTION: Commands to compile source files with debug mode and source data enabled for port profiling.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/devtools/ports_profiler.rst#2025-04-06_snippet_2\n\nLANGUAGE: prolog\nCODE:\n```\n| ?- logtalk_load(my_source_file, [debug(on), source_data(on)]).\n```\n\nLANGUAGE: prolog\nCODE:\n```\n| ?- set_logtalk_flag(debug, on), set_logtalk_flag(source_data, on).\n```\n\n----------------------------------------\n\nTITLE: Create Protocol Predicate Definition\nDESCRIPTION: Defines the signature and structure of the create_protocol/3 predicate for creating new dynamic protocols.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/refman/predicates/create_protocol_3.rst.txt#2025-04-06_snippet_0\n\nLANGUAGE: prolog\nCODE:\n```\ncreate_protocol(Identifier, Relations, Directives)\n```\n\n----------------------------------------\n\nTITLE: Alternative Mode Declaration for atom_concat/3 in Logtalk\nDESCRIPTION: An alternative way to specify the mode for atom concatenation using zero_or_one instead of one, providing the same information but in a different format.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/userman/predicates.rst.txt#2025-04-06_snippet_7\n\nLANGUAGE: logtalk\nCODE:\n```\n:- mode(atom_concat(+atom, +atom, ?atom), zero_or_one).\n```\n\n----------------------------------------\n\nTITLE: Declaring Predicate Mode with Error Possibility in Logtalk\nDESCRIPTION: A mode directive example showing how to specify that a predicate can throw an error even with valid calls. This example documents the open/3 predicate which can throw errors like permission errors.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/userman/predicates.rst.txt#2025-04-06_snippet_4\n\nLANGUAGE: logtalk\nCODE:\n```\n:- mode(open(@source_sink, @io_mode, --stream), one_or_error).\n```\n\n----------------------------------------\n\nTITLE: Asserting Clauses to Other Objects Using uses/2\nDESCRIPTION: Illustrates how to assert clauses into another object when the predicates are listed in a uses/2 directive, showing both compile-time and runtime resolution.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/refman/methods/asserta_1.rst.txt#2025-04-06_snippet_3\n\nLANGUAGE: logtalk\nCODE:\n```\n:- object(reasoner(_KnowledgeBase_)).\n\n    :- uses(_KnowledgeBase_, [\n        foo/1, bar/1\n    ]).\n\n    baz(X) :-\n       % compiled as _KnowledgeBase_::assertz(foo(X))\n       asserta(foo(X)).\n\n   foobar(Name, Argument) :-\n      Clause =.. [Name, Argument],\n      % runtime resolved to _KnowledgeBase_::assertz(Clause)\n      % when Name is either foo or bar\n      asserta(Clause).\n\n    ...\n```\n\n----------------------------------------\n\nTITLE: Implementing Comparing Protocol for Custom Set Elements in Logtalk\nDESCRIPTION: Defines a custom object (rainbow_colors) that implements the comparingp protocol for use with the set(Type) parametric object.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/library/sets/NOTES.md#2025-04-06_snippet_5\n\nLANGUAGE: Logtalk\nCODE:\n```\n:- object(rainbow_colors,\n\timplements(comparingp)).\n\n\torder(red,    1).\n\torder(orange, 2).\n\torder(yellow, 3).\n\torder(green,  4).\n\torder(blue,   5).\n\torder(indigo, 6).\n\torder(violet, 7).\n\n\tColor1 < Color2 :-\n\t\torder(Color1, N1),\n\t\torder(Color2, N2),\n\t\t{N1 < N2}.\n\n\tColor1 =< Color2 :-\n\t\torder(Color1, N1),\n\t\torder(Color2, N2),\n\t\t{N1 =< N2}.\n\n\t...\n\n:- end_object.\n```\n\n----------------------------------------\n\nTITLE: Predicate Using Multiple External Method Calls in Logtalk\nDESCRIPTION: Example of a predicate that makes multiple calls to methods defined in other objects, showing the verbose syntax required when not using the uses directive.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/userman/predicates.rst.txt#2025-04-06_snippet_13\n\nLANGUAGE: logtalk\nCODE:\n```\nfoo :-\n    ...,\n    findall(X, list::member(X, L), A),\n    list::append(A, B, C),\n    list::select(Y, C, R),\n```\n\n----------------------------------------\n\nTITLE: Accessing Module Properties in Logtalk\nDESCRIPTION: Predicate for accessing module properties such as exports/1, file/1, file/2, declares/2, defines/2, calls/2, and provides/3 when available. Used in diagram generation to retrieve module information.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/modules_diagram_support_0.rst.txt#2025-04-06_snippet_0\n\nLANGUAGE: Prolog\nCODE:\n```\nmodule_property(Module, Property)\n```\n\n----------------------------------------\n\nTITLE: Referencing Test Directory Path in RST\nDESCRIPTION: ReStructuredText literal formatting for the test directory path reference.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/libraries/core.rst.txt#2025-04-06_snippet_2\n\nLANGUAGE: rst\nCODE:\n```\n``tests/logtalk/entities``\n```\n\n----------------------------------------\n\nTITLE: Defining threaded_engine_post/2 Predicate in Logtalk\nDESCRIPTION: Defines the threaded_engine_post/2 predicate, which posts a term to the engine term queue. This predicate requires a backend Prolog compiler with compatible multi-threading primitives.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/refman/predicates/threaded_engine_post_2.rst.txt#2025-04-06_snippet_0\n\nLANGUAGE: Prolog\nCODE:\n```\nthreaded_engine_post(Engine, Term)\n```\n\n----------------------------------------\n\nTITLE: Generating an Atom Identifier with Custom Randomness\nDESCRIPTION: Example of generating a random identifier as an atom with 240 bits (30 bytes) of randomness.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/libraries/ids.rst#2025-04-06_snippet_3\n\nLANGUAGE: logtalk\nCODE:\n```\n| ?- ids(atom, 30)::generate(Identifier).\nIdentifier = 'ie/jYcLsqo8ZguCOF1ZNPFDRvJ03Ww5Qa9e0FxRB'\nyes\n```\n\n----------------------------------------\n\nTITLE: Basic Syntax of if/1 Directive in Logtalk\nDESCRIPTION: Defines the basic syntax for the if/1 directive in Logtalk. The directive takes a callable goal as an argument and conditionally compiles the following code if the goal succeeds.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/refman/directives/if_1.rst#2025-04-06_snippet_0\n\nLANGUAGE: logtalk\nCODE:\n```\nif(Goal)\n```\n\n----------------------------------------\n\nTITLE: Modes and Number of Proofs for threaded_ignore/1\nDESCRIPTION: Specifies that threaded_ignore/1 accepts a callable term as input and generates one solution (always succeeds).\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/refman/predicates/threaded_ignore_1.rst.txt#2025-04-06_snippet_2\n\nLANGUAGE: prolog\nCODE:\n```\nthreaded_ignore(@callable) - one\n```\n\n----------------------------------------\n\nTITLE: File Property Inspection\nDESCRIPTION: Added includes(File) property to logtalk::loaded_file_property/2 to enumerate included files via backtracking.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/RELEASE_NOTES.md#2025-04-06_snippet_72\n\nLANGUAGE: logtalk\nCODE:\n```\nlogtalk::loaded_file_property/2\n```\n\n----------------------------------------\n\nTITLE: Querying Prototype Predicates\nDESCRIPTION: Uses reflection to list all public predicates of the mountain_bike object.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/predicate_lookups/NOTES.md#2025-04-06_snippet_5\n\nLANGUAGE: logtalk\nCODE:\n```\nmountain_bike::current_predicate(Predicate).\n```\n\n----------------------------------------\n\nTITLE: Loading Logtalk miscellaneous examples\nDESCRIPTION: This snippet loads the example and required library files for the miscellaneous Logtalk examples.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/miscellaneous/NOTES.md#2025-04-06_snippet_1\n\nLANGUAGE: logtalk\nCODE:\n```\nlogtalk_load(miscellaneous(loader)).\n```\n\n----------------------------------------\n\nTITLE: Dumping Trace to File\nDESCRIPTION: Example of dumping a goal trace to a file using dump_trace predicates.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/devtools/debugger.rst.txt#2025-04-06_snippet_4\n\nLANGUAGE: logtalk\nCODE:\n```\n| ?- dump_trace::start_redirect_to_file('trace.txt', some_goal),\n        dump_trace::stop_redirect_to_file.\n```\n\n----------------------------------------\n\nTITLE: Merging Two Heaps in Logtalk\nDESCRIPTION: Merges two heaps into a single heap. Takes two input heaps and returns the merged heap.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/heapp_0.rst.txt#2025-04-06_snippet_3\n\nLANGUAGE: Logtalk\nCODE:\n```\nmerge(Heap1,Heap2,NewHeap)\n```\n\n----------------------------------------\n\nTITLE: Defining Setup and Cleanup Goals in Logtalk Tests\nDESCRIPTION: Shows how to define setup/0 and cleanup/0 goals for test objects. This example demonstrates a cleanup goal that deletes a file after running tests.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/tools/lgtunit/NOTES.md#2025-04-06_snippet_34\n\nLANGUAGE: Logtalk\nCODE:\n```\ncleanup :-\n\t\tthis(This),\n\t\tobject_property(This, file(_,Directory)),\n\t\tatom_concat(Directory, serialized_objects, File),\n\t\tcatch(ignore(os::delete_file(File)), _, true).\n```\n\n----------------------------------------\n\nTITLE: Using Reified QuickCheck Results in Logtalk\nDESCRIPTION: Shows how to use the quick_check/3 predicate to get results in reified form for both passing and failing tests.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/quick_check/NOTES.md#2025-04-06_snippet_6\n\nLANGUAGE: logtalk\nCODE:\n```\nlgtunit::quick_check(same_length_2_prop(+list), Result, []).\n```\n\nLANGUAGE: logtalk\nCODE:\n```\nlgtunit::quick_check(broken_nth1_3_prop(+list), Result, [n(250)]).\n```\n\n----------------------------------------\n\nTITLE: Generating Timestamp-based ULID\nDESCRIPTION: Shows how to generate a ULID using a Unix epoch timestamp in milliseconds.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/libraries/ulid.rst#2025-04-06_snippet_5\n\nLANGUAGE: logtalk\nCODE:\n```\n| ?- time_stamp(Milliseconds), ulid(atom)::generate(Seconds, ULID).\nSeconds = 1684245175344, ULID = '01H0JDBQ1GAWJF35C44Y5S97DX'\nyes\n```\n\n----------------------------------------\n\nTITLE: Basic Syntax for asserta/1 Method in Logtalk\nDESCRIPTION: Defines the syntax options for the asserta/1 method, which can take either a clause head or a full clause with head and body.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/refman/methods/asserta_1.rst.txt#2025-04-06_snippet_0\n\nLANGUAGE: logtalk\nCODE:\n```\nasserta(Head)\nasserta((Head:-Body))\n```\n\n----------------------------------------\n\nTITLE: Calculating Running Sum Query 3\nDESCRIPTION: Query to calculate running sum for first three numbers, returning result in Sums list.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/engines/sums/NOTES.md#2025-04-06_snippet_3\n\nLANGUAGE: logtalk\nCODE:\n```\nsums::rd(3, Sums).\n```\n\n----------------------------------------\n\nTITLE: Generating XML documentation for library entities with custom XSLT file\nDESCRIPTION: Example of using library/2 predicate to generate XML documentation for all library entities for conversion to PDF A4 format using a custom XSLT file.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/lgtdocp_0.rst.txt#2025-04-06_snippet_0\n\nLANGUAGE: logtalk\nCODE:\n```\nlibrary(library,[xslfile('logtalk_entity_to_pdf_a4.xsl')])\n```\n\n----------------------------------------\n\nTITLE: Using Labels to Classify QuickCheck Tests\nDESCRIPTION: Example showing how to define a labeling predicate that categorizes integers as either 'even' or 'odd'.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/tools/lgtunit/NOTES.md#2025-04-06_snippet_11\n\nLANGUAGE: prolog\nCODE:\n```\nlabel(I, Label) :-\n\t(\tI mod 2 =:= 0 ->\n\t\tLabel = even\n\t;\tLabel = odd\n\t).\n```\n\n----------------------------------------\n\nTITLE: Generating Random Tests with quick_check/1 in Logtalk\nDESCRIPTION: Generates and runs random tests using default options for a predicate given its mode template. Fails and prints the test when a generated test fails.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/lgtunit_0.rst.txt#2025-04-06_snippet_14\n\nLANGUAGE: logtalk\nCODE:\n```\nquick_check(Template)\n```\n\n----------------------------------------\n\nTITLE: Float Sequence Generation Predicate\nDESCRIPTION: Creates a list containing N equally spaced float numbers between Lower and Upper bounds. Requires N > 0 and Lower <= Upper.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/float_0.rst.txt#2025-04-06_snippet_1\n\nLANGUAGE: prolog\nCODE:\n```\nsequence(Lower,Upper,N,List)\n```\n\n----------------------------------------\n\nTITLE: Defining the threaded_exit/1-2 predicate syntax in Logtalk\nDESCRIPTION: Defines the syntax for the threaded_exit/1 and threaded_exit/2 predicates that retrieve results from goals executed in separate threads.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/refman/predicates/threaded_exit_1_2.rst.txt#2025-04-06_snippet_0\n\nLANGUAGE: logtalk\nCODE:\n```\nthreaded_exit(Goal)\nthreaded_exit(Goal, Tag)\n```\n\n----------------------------------------\n\nTITLE: Installing D2 and Graphviz on Windows using Chocolatey\nDESCRIPTION: Command to install required diagram generation tools D2 and Graphviz using Chocolatey package manager on Windows.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/devtools/diagrams.rst.txt#2025-04-06_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n> choco install d2 graphviz\n```\n\n----------------------------------------\n\nTITLE: Printing a Comment Message in Logtalk\nDESCRIPTION: Shows how to print a comment message about redefining an entity using print_message/3. The message term is parameterized with the entity type and name.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/userman/printing.rst.txt#2025-04-06_snippet_1\n\nLANGUAGE: Prolog\nCODE:\n```\n| ?- logtalk::print_message(comment, core, redefining_entity(object, foo)).\n```\n\n----------------------------------------\n\nTITLE: Threaded Engine Create Predicate Signature in Logtalk\nDESCRIPTION: Defines the signature for the threaded_engine_create/3 predicate that creates a new engine for proving a goal with an answer template for solution bindings.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/refman/predicates/threaded_engine_create_3.rst.txt#2025-04-06_snippet_0\n\nLANGUAGE: prolog\nCODE:\n```\nthreaded_engine_create(AnswerTemplate, Goal, Engine)\n```\n\n----------------------------------------\n\nTITLE: Syntax Error Method Definition\nDESCRIPTION: The basic syntax and usage pattern for the syntax_error/1 built-in method that throws a syntax error with a description.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/refman/methods/syntax_error_1.rst#2025-04-06_snippet_0\n\nLANGUAGE: prolog\nCODE:\n```\nsyntax_error(Description)\n```\n\n----------------------------------------\n\nTITLE: Goal Expansion Method Signature\nDESCRIPTION: Method signature showing the predicate name and arity with its arguments.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/refman/methods/goal_expansion_2.rst#2025-04-06_snippet_0\n\nLANGUAGE: logtalk\nCODE:\n```\ngoal_expansion(Goal, ExpandedGoal)\n```\n\n----------------------------------------\n\nTITLE: Enumerating Local or Visible Operators in Logtalk\nDESCRIPTION: Example of how to use current_op/3 to enumerate local operators or operators visible in the 'this' context by backtracking.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/refman/methods/current_op_3.rst.txt#2025-04-06_snippet_2\n\nLANGUAGE: Logtalk\nCODE:\n```\ncurrent_op(Priority, Specifier, Operator)\n```\n\n----------------------------------------\n\nTITLE: Reading CSV File and Returning Data as List in Logtalk\nDESCRIPTION: Reads a CSV file and returns the data as a list of rows, where each row is a list of fields. Fails if the file cannot be parsed. Requires file name as input and returns the rows as output.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/csv_protocol_0.rst.txt#2025-04-06_snippet_2\n\nLANGUAGE: Logtalk\nCODE:\n```\nread_file(File,Rows)\n```\n\n----------------------------------------\n\nTITLE: Querying Class Ancestors\nDESCRIPTION: Retrieves the ancestor classes of the class metaclass.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/roots/NOTES.md#2025-04-06_snippet_3\n\nLANGUAGE: logtalk\nCODE:\n```\nclass::ancestors(Ancestors).\n```\n\n----------------------------------------\n\nTITLE: Installing Texinfo on Ubuntu Linux\nDESCRIPTION: This snippet shows the command to install the Texinfo package on Ubuntu Linux systems. Texinfo is required for some experimental features of the 'help' tool.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/devtools/help.rst#2025-04-06_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\n$ sudo apt install info\n```\n\n----------------------------------------\n\nTITLE: Defining a Debug Monitor for Term Expansion in Logtalk\nDESCRIPTION: This code snippet defines a monitor object for debugging term expansions. It implements the monitoring protocol and writes out the results of term_expansion/2 calls.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/userman/expansion.rst#2025-04-06_snippet_18\n\nLANGUAGE: Logtalk\nCODE:\n```\n:- initialization(\n    define_events(after, edcg, _, _, expansions_debug)\n).\n\n\n:- object(expansions_debug,\n    implements(monitoring)).\n\n    after(edcg, term_expansion(T,E), _) :-\n        writeq(term_expansion(T,E)), nl.\n\n:- end_object.\n```\n\n----------------------------------------\n\nTITLE: Loading Java Library in Logtalk\nDESCRIPTION: Command to load all entities in the Java library by loading the loader.lgt file.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/libraries/java.rst.txt#2025-04-06_snippet_0\n\nLANGUAGE: logtalk\nCODE:\n```\n| ?- logtalk_load(java(loader)).\n```\n\n----------------------------------------\n\nTITLE: Defining Make Target for Tests in Logtalk\nDESCRIPTION: Specifies a make target for automatically running the test set with logtalk_make/1. Possible values are 'all' and 'check'.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/lgtunit_0.rst.txt#2025-04-06_snippet_33\n\nLANGUAGE: logtalk\nCODE:\n```\nmake(Target)\n```\n\n----------------------------------------\n\nTITLE: Using Meta-Types for Custom Generator in Logtalk\nDESCRIPTION: Alternative definition of the 'odd' type generator using the constrain/2 meta-type to generate values satisfying a closure.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/libraries/arbitrary.rst#2025-04-06_snippet_4\n\nLANGUAGE: prolog\nCODE:\n```\narbitrary::arbitrary(odd, Arbitrary) :-\n    arbitrary(constrain(integer, [Arbitrary]>>(Arbitrary mod 2 =:= 1)), Arbitrary).\n```\n\n----------------------------------------\n\nTITLE: List Member Test Message\nDESCRIPTION: Demonstrates logging of a list membership test message.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/msglog/NOTES.md#2025-04-06_snippet_2\n\nLANGUAGE: logtalk\nCODE:\n```\n%%table\nlist::member(X, [1, 2, 3]).\n```\n\n----------------------------------------\n\nTITLE: Threaded Notify Usage Example\nDESCRIPTION: Demonstrates how to send a 'data_available' notification using the threaded_notify/1 predicate.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/refman/predicates/threaded_notify_1.rst#2025-04-06_snippet_2\n\nLANGUAGE: prolog\nCODE:\n```\n..., threaded_notify(data_available), ...\n```\n\n----------------------------------------\n\nTITLE: Creating a Derived Prototype Object in Logtalk\nDESCRIPTION: Example demonstrating how to create a prototype 'mickey' that extends another prototype 'mouse', adding a public alias/1 predicate with one clause defining mickey's alias as 'mortimer'.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/refman/predicates/create_object_4.rst.txt#2025-04-06_snippet_3\n\nLANGUAGE: logtalk\nCODE:\n```\n% create a prototype derived from a parent prototype:\n| ?- create_object(\n        mickey,\n        [extends(mouse)],\n        [public(alias/1)],\n        [alias(mortimer)]\n    ).\n```\n\n----------------------------------------\n\nTITLE: Using Parameter Variables with use_module/2 in Logtalk\nDESCRIPTION: This snippet illustrates how to use a parameter variable in place of the module identifier in use_module/2, allowing for dynamic selection of the module at runtime within a parametric object or category.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/refman/directives/use_module_2.rst.txt#2025-04-06_snippet_4\n\nLANGUAGE: Logtalk\nCODE:\n```\n:- object(bar(_OptionsModule_)).\n\n    :- use_module(_OptionsModule_, [\n        set/2, get/2, reset/0\n    ]).\n```\n\n----------------------------------------\n\nTITLE: Testing piped hook object with a(key-value)\nDESCRIPTION: Shows the use of a piped hook object with a key-value pair.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/expansion/NOTES.md#2025-04-06_snippet_17\n\nLANGUAGE: logtalk\nCODE:\n```\npiped<<a(key-value).\n```\n\n----------------------------------------\n\nTITLE: Reading a TSV File into a Dynamic Predicate in Logtalk\nDESCRIPTION: Example of reading a TSV file and asserting its content as facts of a dynamic predicate, skipping the header row.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/libraries/tsv.rst#2025-04-06_snippet_4\n\nLANGUAGE: logtalk\nCODE:\n```\n| ?- tsv(skip)::read_file('test_files/data.tsv', user, p/3).\nyes\n\n| ?-  p(A,B,C).\n\nA = 'Paul', B = 23, C = '1115 W Franklin' ? ;\n...\n```\n\n----------------------------------------\n\nTITLE: Reified Quick Check for Property-Based Testing in Logtalk\nDESCRIPTION: Performs a reified quick check for property-based testing, reporting various outcomes such as passed, failed, error, or broken tests.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/lgtunit_0.rst.txt#2025-04-06_snippet_11\n\nLANGUAGE: Logtalk\nCODE:\n```\nquick_check(Template, Result, Options)\n```\n\n----------------------------------------\n\nTITLE: Logtalk Protocol Declarations\nDESCRIPTION: Declaration list of Logtalk protocols and their predicate arities, including protocols for pseudo-random generation, queues, sets, statistics, term I/O, UUID generation, and other data structure operations.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/entity_index.rst.txt#2025-04-06_snippet_1\n\nLANGUAGE: logtalk\nCODE:\n```\npseudo_random_protocol <pseudo_random_protocol_0>\nqueuep <queuep_0>\nrandom_protocol <random_protocol_0>\nregistry_protocol <registry_protocol_0>\nsampling_protocol <sampling_protocol_0>\nsetp <setp_0>\nstatisticsp <statisticsp_0>\nterm_io_protocol <term_io_protocol_0>\ntermp <termp_0>\ntimep <timep_0>\ntsv_protocol <tsv_protocol_0>\nulid_protocol <ulid_protocol_0>\nunion_find_protocol <union_find_protocol_0>\nuuid_protocol <uuid_protocol_0>\nvarlistp <varlistp_0>\nzipperp <zipperp_0>\n```\n\n----------------------------------------\n\nTITLE: Testing Output Predicates in Logtalk\nDESCRIPTION: Demonstrates testing the put_char/2 predicate using lgtunit's set_text_output and text_output_assertion predicates.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/devtools/lgtunit.rst.txt#2025-04-06_snippet_20\n\nLANGUAGE: logtalk\nCODE:\n```\ntest(put_char_2_02, true(Assertion)) :-\n       ^^set_text_output(out, 'qwert'),\n       put_char(out, y),\n       ^^text_output_assertion(out, 'qwerty', Assertion).\n```\n\n----------------------------------------\n\nTITLE: Loading the Patching Example in Logtalk\nDESCRIPTION: Loads the patching example module which demonstrates complementing categories for patching broken object predicates.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/patching/NOTES.md#2025-04-06_snippet_1\n\nLANGUAGE: logtalk\nCODE:\n```\nlogtalk_load(patching(loader)).\n```\n\n----------------------------------------\n\nTITLE: Example Implementation of a meta_non_terminal in Logtalk\nDESCRIPTION: Demonstrates how to declare and implement a meta_non_terminal 'phrase/2' that takes a closure and a normal argument, where the closure is called with the normal argument.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/refman/directives/meta_non_terminal_1.rst#2025-04-06_snippet_2\n\nLANGUAGE: logtalk\nCODE:\n```\n:- meta_non_terminal(phrase(1, *)).\nphrase(X, T) --> call(X, T).\n```\n\n----------------------------------------\n\nTITLE: Defining type_error/2 Method in Logtalk\nDESCRIPTION: Signature of the type_error/2 built-in method in Logtalk. It takes two arguments: Type and Culprit. This method is used to throw a type error when an argument's type is incorrect.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/refman/methods/type_error_2.rst.txt#2025-04-06_snippet_0\n\nLANGUAGE: Logtalk\nCODE:\n```\ntype_error(Type, Culprit)\n```\n\n----------------------------------------\n\nTITLE: create_object/4 Predicate Signature in Logtalk\nDESCRIPTION: Defines the signature of the create_object/4 predicate which is used to create a new dynamic object. The predicate takes four arguments: an identifier, relations to other entities, directives, and clauses.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/refman/predicates/create_object_4.rst.txt#2025-04-06_snippet_0\n\nLANGUAGE: logtalk\nCODE:\n```\ncreate_object(Identifier, Relations, Directives, Clauses)\n```\n\n----------------------------------------\n\nTITLE: Logtalk Flag Usage Modes in Prolog\nDESCRIPTION: Specifies the usage mode and number of proofs for the set_logtalk_flag/2 predicate. It indicates that both arguments must be instantiated, with Flag being an atom and Value being a non-variable.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/refman/predicates/set_logtalk_flag_2.rst#2025-04-06_snippet_1\n\nLANGUAGE: Prolog\nCODE:\n```\nset_logtalk_flag(+atom, +nonvar) - one\n```\n\n----------------------------------------\n\nTITLE: Generating Version 1 UUID as Character List in Logtalk\nDESCRIPTION: Shows how to generate a version 1 UUID represented as a list of characters using the uuid(chars) parametric object. This representation is useful for character-by-character manipulation.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/library/uuid/NOTES.md#2025-04-06_snippet_3\n\nLANGUAGE: logtalk\nCODE:\n```\n| ?- uuid(chars)::uuid_v1([0xf2,0xd1,0x90,0x94,0xdc,0x4b], UUID).\nUUID = ['0','0',d,e,'9','0',c,'0',-,'8','2',c,f,-,'1','1',e,b,-,\n        a,'9','8','5',-,f,'2',d,'1','9','0','9','4',d,c,'4',b]\nyes\n```\n\n----------------------------------------\n\nTITLE: Predicate/Method Help Access\nDESCRIPTION: Provides help on built-in control constructs, directives, predicates, or methods using Functor/Arity notation.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/help_0.rst.txt#2025-04-06_snippet_1\n\nLANGUAGE: logtalk\nCODE:\n```\n(/)/2\n```\n\n----------------------------------------\n\nTITLE: Querying Mother Relationships in Simpsons Family\nDESCRIPTION: Demonstrates how to query mother relationships in the Simpsons family using the defined relations.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/family/NOTES.md#2025-04-06_snippet_3\n\nLANGUAGE: logtalk\nCODE:\n```\n%%table\nsimpsons::mother(Mother, Child).\n```\n\n----------------------------------------\n\nTITLE: Parametric Object Proxies Example\nDESCRIPTION: Shows how to define a parametric object with proxies represented as Prolog facts for different object instances.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/userman/objects.rst#2025-04-06_snippet_13\n\nLANGUAGE: logtalk\nCODE:\n```\n:- object(circle(_Id_, _Radius_, _Color_)).\n\n    :- public(area/1).\n    ...\n\n:- end_object.\n\n% parametric object proxies:\ncircle('#1', 1.23, blue).\ncircle('#2', 3.71, yellow).\ncircle('#3', 0.39, green).\ncircle('#4', 5.74, black).\ncircle('#5', 8.32, cyan).\n```\n\n----------------------------------------\n\nTITLE: Loading the Functions Example Module\nDESCRIPTION: Loads the functions example module which contains the implementation of various root-finding methods and test functions.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/threads/functions/NOTES.md#2025-04-06_snippet_1\n\nLANGUAGE: logtalk\nCODE:\n```\nlogtalk_load(functions(loader)).\n```\n\n----------------------------------------\n\nTITLE: Threaded Wait Predicate Modes\nDESCRIPTION: Declaration of supported argument modes and proofs for the threaded_wait predicate.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/refman/predicates/threaded_wait_1.rst.txt#2025-04-06_snippet_1\n\nLANGUAGE: prolog\nCODE:\n```\nthreaded_wait(?term) - one\nthreaded_wait(+list(term)) - one\n```\n\n----------------------------------------\n\nTITLE: Querying Rhonda's Relationship\nDESCRIPTION: Queries the 'rhonda' prototype to determine her boyfriend, demonstrating relationships between prototypes.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/prototypes/NOTES.md#2025-04-06_snippet_3\n\nLANGUAGE: logtalk\nCODE:\n```\nrhonda::boyfriend(Melmacian).\n```\n\n----------------------------------------\n\nTITLE: Printing Logtalk, Prolog backend, and kernel versions\nDESCRIPTION: This snippet prints the versions of Logtalk, the Prolog backend, and the kernel if running as a notebook.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/engines/yield/NOTES.md#2025-04-06_snippet_0\n\nLANGUAGE: logtalk\nCODE:\n```\n%versions\n```\n\n----------------------------------------\n\nTITLE: Loading Source with Automatic File and Line Context for Assertions\nDESCRIPTION: Command to load a source file with the assertions(debug) hook, which automatically adds file and line context information to all assertion calls.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/devtools/assertions.rst.txt#2025-04-06_snippet_5\n\nLANGUAGE: prolog\nCODE:\n```\nlogtalk_load(source, [hook(assertions(debug))])\n```\n\n----------------------------------------\n\nTITLE: Remembering Referenced Logtalk File in Diagram\nDESCRIPTION: Predicate to remember a referenced Logtalk file in the diagram. It takes a file path as an argument and is compiled with the 'static' flag.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/file_diagram_1.rst.txt#2025-04-06_snippet_1\n\nLANGUAGE: Logtalk\nCODE:\n```\nremember_referenced_logtalk_file(Path)\n```\n\n----------------------------------------\n\nTITLE: Default Message Prefix and Stream Settings in Logtalk\nDESCRIPTION: This snippet shows the default message prefix and stream settings used by Logtalk when no custom definitions exist for a given message kind and component pair.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/userman/printing.rst.txt#2025-04-06_snippet_4\n\nLANGUAGE: prolog\nCODE:\n```\nkind_prefix_stream(banner,         '',       user_output).\nkind_prefix_stream(help,           '',       user_output).\nkind_prefix_stream(question,       '',       user_output).\nkind_prefix_stream(question(_),    '',       user_output).\nkind_prefix_stream(information,    '% ',     user_output).\nkind_prefix_stream(information(_), '% ',     user_output).\nkind_prefix_stream(comment,        '% ',     user_output).\nkind_prefix_stream(comment(_),     '% ',     user_output).\nkind_prefix_stream(warning,        '*     ', user_error).\nkind_prefix_stream(warning(_),     '*     ', user_error).\nkind_prefix_stream(error,          '!     ', user_error).\nkind_prefix_stream(error(_),       '!     ', user_error).\nkind_prefix_stream(debug,          '>>> ',   user_error).\nkind_prefix_stream(debug(_),       '>>> ',   user_error).\n```\n\n----------------------------------------\n\nTITLE: Type Validation Examples using valid/2\nDESCRIPTION: Examples showing how to use the type::valid/2 predicate to check if terms match specified types.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/library/types/NOTES.md#2025-04-06_snippet_2\n\nLANGUAGE: logtalk\nCODE:\n```\n| ?- type::valid(positive_integer, 42).\n\n| ?- type::valid(positive_integer, -13).\n```\n\n----------------------------------------\n\nTITLE: Setting Flag Values - Logtalk\nDESCRIPTION: Predicate to set the value of a flag. Takes a flag name and new value as arguments.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/flags_0.rst.txt#2025-04-06_snippet_1\n\nLANGUAGE: logtalk\nCODE:\n```\nset_flag_value(Flag,NewValue)\n```\n\n----------------------------------------\n\nTITLE: Hot Patching a Logtalk Object with a Category\nDESCRIPTION: Demonstrates how to use a category to hot patch an existing object, wrapping its original predicate definition.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/userman/categories.rst#2025-04-06_snippet_7\n\nLANGUAGE: Logtalk\nCODE:\n```\n:- category(logging,\n    complements(bird)).\n\n    make_sound :-\n        write('Started making sound...'), nl,\n        @make_sound,\n        write('... finished making sound.'), nl.\n\n:- end_category.\n```\n\n----------------------------------------\n\nTITLE: Decoding Base64 to String in Logtalk\nDESCRIPTION: Demonstrates decoding Base64 data to a string using base64::parse/2 predicate, with inputs as atom and list of chars.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/libraries/base64.rst.txt#2025-04-06_snippet_4\n\nLANGUAGE: prolog\nCODE:\n```\n| ?- base64::parse(atom('SGVsbG8gd29ybGQh'), Bytes),\n     atom_codes(Atom, Bytes).\nAtom = 'Hello world!'\nBytes = [72,101,108,108,111,32,119,111,114,108,100,33]\nyes\n\n| ?- base64::parse(chars(['S','G','V',s,b,'G','8',g,d,'2','9',y,b,'G','Q',h]), Bytes),\n     atom_codes(Atom, Bytes).\nAtom = 'Hello world!'\nBytes = [72,101,108,108,111,32,119,111,114,108,100,33]\nyes\n```\n\n----------------------------------------\n\nTITLE: Meta-predicate Template Definition - Logtalk\nDESCRIPTION: Specifies the meta-predicate templates for both versions of threaded_call.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/refman/predicates/threaded_call_1_2.rst.txt#2025-04-06_snippet_1\n\nLANGUAGE: prolog\nCODE:\n```\nthreaded_call(0)\nthreaded_call(0, *)\n```\n\n----------------------------------------\n\nTITLE: Running All Unit Tests in Logtalk\nDESCRIPTION: Executes all defined unit tests in the current context.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/lgtunit_0.rst.txt#2025-04-06_snippet_26\n\nLANGUAGE: logtalk\nCODE:\n```\nrun_tests\n```\n\n----------------------------------------\n\nTITLE: Loading the Mutations Library in Logtalk\nDESCRIPTION: Command to load all entities in the mutations library by loading the loader.lgt file. This makes all mutation functionality available in the Logtalk environment.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/libraries/mutations.rst#2025-04-06_snippet_0\n\nLANGUAGE: logtalk\nCODE:\n```\n| ?- logtalk_load(mutations(loader)).\n```\n\n----------------------------------------\n\nTITLE: Loading ULID Library Tests\nDESCRIPTION: Demonstrates how to load the testing module for the ULID library.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/libraries/ulid.rst#2025-04-06_snippet_1\n\nLANGUAGE: logtalk\nCODE:\n```\n| ?- logtalk_load(ulid(tester)).\n```\n\n----------------------------------------\n\nTITLE: Two-Thread Fibonacci Calculation\nDESCRIPTION: Calculates the 24th Fibonacci number using two threads with timing measurement.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/threads/fibonacci/NOTES.md#2025-04-06_snippet_2\n\nLANGUAGE: logtalk\nCODE:\n```\ntime(fibonacci(2)::fib(24, N)).\n```\n\n----------------------------------------\n\nTITLE: Syntax Definition of (<<)/2 Control Construct in Logtalk\nDESCRIPTION: Defines the syntax for the (<<)/2 control construct, which allows calling a goal within the context of a specified object or parametric object proxy.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/refman/control/context_switch_2.rst#2025-04-06_snippet_0\n\nLANGUAGE: Logtalk\nCODE:\n```\nObject<<Goal\n{Proxy}<<Goal\n```\n\n----------------------------------------\n\nTITLE: Loading the Debug Messages Tool in Logtalk\nDESCRIPTION: Query to load the debug_messages tool in a Logtalk session.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/tools/debug_messages/NOTES.md#2025-04-06_snippet_0\n\nLANGUAGE: Prolog\nCODE:\n```\n| ?- logtalk_load(debug_messages(loader)).\n```\n\n----------------------------------------\n\nTITLE: Creating Decorator Pipeline\nDESCRIPTION: This snippet creates a pipeline of decorators, combining a colored shape with a named shape decorator.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/design_patterns/structural/decorator/NOTES.md#2025-04-06_snippet_6\n\nLANGUAGE: logtalk\nCODE:\n```\ncreate_object(NamedShape, [extends(named_shape)], [], [shape(colored_shape(o1,blue)), name(thingy)]).\n```\n\n----------------------------------------\n\nTITLE: Conditional Compilation for Portable Prolog Code in Logtalk\nDESCRIPTION: Demonstrates using conditional compilation directives to handle differences in built-in predicates across Prolog backends.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/userman/predicates.rst.txt#2025-04-06_snippet_35\n\nLANGUAGE: logtalk\nCODE:\n```\n:- if(predicate_property(msort(_, _), built_in)).\n\n    msort(List, Sorted) :-\n        {msort(List, Sorted)}.\n\n:- else.\n\n    length(List, Length) :-\n        ...\n\n:- endif.\n```\n\n----------------------------------------\n\nTITLE: Printing Logtalk, Prolog, and Kernel Versions\nDESCRIPTION: This snippet prints the versions of Logtalk, the Prolog backend, and the kernel if running as a notebook.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/classmethods/NOTES.md#2025-04-06_snippet_0\n\nLANGUAGE: logtalk\nCODE:\n```\n%versions\n```\n\n----------------------------------------\n\nTITLE: Using Expand Library Alias Paths as Hook When Loading Source Files\nDESCRIPTION: Shows how to use the expand_library_alias_paths hook object when compiling a Logtalk source file using the hook/1 option.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/libraries/expand_library_alias_paths.rst.txt#2025-04-06_snippet_1\n\nLANGUAGE: prolog\nCODE:\n```\n| ?- logtalk_load(my_source_file, [hook(expand_library_alias_paths)]).\n```\n\n----------------------------------------\n\nTITLE: Declaring repeat/0 Method Signature\nDESCRIPTION: Method signature for the repeat/0 built-in predicate that provides infinite backtracking. This public method can be used as a message to an object and always succeeds with infinite choice-points.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/refman/methods/repeat_0.rst#2025-04-06_snippet_0\n\nLANGUAGE: logtalk\nCODE:\n```\nrepeat\n```\n\n----------------------------------------\n\nTITLE: Random Element Replacement\nDESCRIPTION: Predicate that selects a random member from a list, replaces it with a new element, and returns the modified list.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/random_protocol_0.rst.txt#2025-04-06_snippet_4\n\nLANGUAGE: logtalk\nCODE:\n```\nselect(-term,+list(term),@term,-list(term))\n```\n\n----------------------------------------\n\nTITLE: Setting Suppress Goal Hook in Logtalk\nDESCRIPTION: Demonstrates how to set the suppress_goal_hook as the default hook or for a specific file to enable goal suppression in clause bodies.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/libraries/hook_objects.rst#2025-04-06_snippet_10\n\nLANGUAGE: Prolog\nCODE:\n```\n| ?- set_logtalk_flag(hook, suppress_goal_hook).\n```\n\nLANGUAGE: Logtalk\nCODE:\n```\n:- set_logtalk_flag(hook, suppress_goal_hook).\n```\n\n----------------------------------------\n\nTITLE: Printing Version Information\nDESCRIPTION: Prints Logtalk, Prolog backend, and kernel version information when running in notebook mode.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/threads/buffer/NOTES.md#2025-04-06_snippet_2\n\nLANGUAGE: logtalk\nCODE:\n```\n%versions\n```\n\n----------------------------------------\n\nTITLE: Resetting all counters in Logtalk\nDESCRIPTION: Predicate that resets all existing named counters to zero. This is useful for initializing the system or clearing all counter values at once.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/counters_0.rst.txt#2025-04-06_snippet_4\n\nLANGUAGE: Logtalk\nCODE:\n```\nreset_counters\n```\n\n----------------------------------------\n\nTITLE: Meta-predicate Template\nDESCRIPTION: Template declaration showing that once/1 takes a goal argument of type 0.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/refman/methods/once_1.rst#2025-04-06_snippet_1\n\nLANGUAGE: logtalk\nCODE:\n```\nonce(0)\n```\n\n----------------------------------------\n\nTITLE: Hot Patching an Object with the Listing Category\nDESCRIPTION: Example of hot patching a 'data' object by creating a complementing category that extends the listing category, allowing dynamic introspection of the object's state.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/libraries/listing.rst.txt#2025-04-06_snippet_4\n\nLANGUAGE: logtalk\nCODE:\n```\n| ?- create_category(patch, [extends(listing),complements(data)], [], []).\nyes\n\n| ?- data::listing.\n...\n```\n\n----------------------------------------\n\nTITLE: Hot Patching an Object with the Listing Category\nDESCRIPTION: Example of hot patching a 'data' object by creating a complementing category that extends the listing category, allowing dynamic introspection of the object's state.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/libraries/listing.rst.txt#2025-04-06_snippet_4\n\nLANGUAGE: logtalk\nCODE:\n```\n| ?- create_category(patch, [extends(listing),complements(data)], [], []).\nyes\n\n| ?- data::listing.\n...\n```\n\n----------------------------------------\n\nTITLE: Defining Table of Contents for Reflection Methods in reStructuredText\nDESCRIPTION: This snippet defines a table of contents for reflection methods documentation in Logtalk using reStructuredText syntax. It includes links to current_op/3, current_predicate/1, and predicate_property/2 method documentation.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/refman/methods/reflection_methods.rst#2025-04-06_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. toctree::\n   :maxdepth: 1\n\n   current_op_3\n   current_predicate_1\n   predicate_property_2\n```\n\n----------------------------------------\n\nTITLE: Extracting Keys from Pairs\nDESCRIPTION: The keys/2 predicate extracts a list of all keys from a list of pairs.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/pairs_0.rst.txt#2025-04-06_snippet_1\n\nLANGUAGE: logtalk\nCODE:\n```\nkeys(Pairs,Keys)\n```\n\n----------------------------------------\n\nTITLE: Goal Expansion Examples\nDESCRIPTION: Examples showing how to define goal expansions for write/1 and read/1 predicates. The first expands write/1 into a sequence of write_term/2 and nl/0, while the second adds a prompt before reading.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/refman/methods/goal_expansion_2.rst.txt#2025-04-06_snippet_2\n\nLANGUAGE: prolog\nCODE:\n```\ngoal_expansion(write(Term), (write_term(Term, []), nl)).\ngoal_expansion(read(Term), (write('Input: '), {read(Term)})).\n```\n\n----------------------------------------\n\nTITLE: Goal Suppression Usage Example\nDESCRIPTION: Demonstrates the usage of the -- prefix operator to mark a goal for suppression in a clause body.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/suppress_goal_hook_0.rst.txt#2025-04-06_snippet_1\n\nLANGUAGE: logtalk\nCODE:\n```\n--Goal\n```\n\n----------------------------------------\n\nTITLE: Creating Expected Terms from Errors in Logtalk\nDESCRIPTION: Constructs an expected term from an error that represents that the expected value is missing. This predicate takes an Error term and returns an Expected term.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/expected_0.rst.txt#2025-04-06_snippet_0\n\nLANGUAGE: Logtalk\nCODE:\n```\nof_unexpected(Error,Expected)\n```\n\n----------------------------------------\n\nTITLE: Using threaded/1 for Parallel Goal Execution in Logtalk\nDESCRIPTION: Demonstrates how to use threaded/1 to execute a conjunction or disjunction of goals in parallel threads.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/refman/predicates/threaded_1.rst.txt#2025-04-06_snippet_3\n\nLANGUAGE: Prolog\nCODE:\n```\nthreaded((Goal, Goals))\nthreaded((Goal; Goals))\n```\n\n----------------------------------------\n\nTITLE: Reading TSV File into List of Rows in Logtalk\nDESCRIPTION: Demonstrates reading a TSV file into a list of rows, where each row is represented as a list of fields.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/libraries/tsv.rst.txt#2025-04-06_snippet_2\n\nLANGUAGE: Logtalk\nCODE:\n```\n| ?- tsv::read_file('test_files/data.tsv', Rows).\n\nRows = [['Name','Age','Address'], ['Paul',23,'1115 W Franklin'], ['Bessy the Cow',5,'Big Farm Way'], ['Zeke,45,'W Main St']]\nyes\n```\n\n----------------------------------------\n\nTITLE: Testing Coroutining Library in Logtalk\nDESCRIPTION: Command to load and run tests for the coroutining library predicates using the tester.lgt file.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/library/coroutining/NOTES.md#2025-04-06_snippet_1\n\nLANGUAGE: prolog\nCODE:\n```\n| ?- logtalk_load(coroutining(tester)).\n```\n\n----------------------------------------\n\nTITLE: Predicate Syntax Definition - Logtalk\nDESCRIPTION: Defines the syntax for the threaded_call predicate with both single and tagged argument versions.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/refman/predicates/threaded_call_1_2.rst.txt#2025-04-06_snippet_0\n\nLANGUAGE: prolog\nCODE:\n```\nthreaded_call(Goal)\nthreaded_call(Goal, Tag)\n```\n\n----------------------------------------\n\nTITLE: Implementing Test Cleanup Predicate in Logtalk\nDESCRIPTION: Example of a cleanup/0 predicate that deletes temporary files created during tests, executed after all unit tests in the object have run.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/devtools/lgtunit.rst#2025-04-06_snippet_43\n\nLANGUAGE: logtalk\nCODE:\n```\ncleanup :-\n       this(This),\n       object_property(This, file(_,Directory)),\n       atom_concat(Directory, serialized_objects, File),\n       catch(ignore(os::delete_file(File)), _, true).\n```\n\n----------------------------------------\n\nTITLE: Debug Handler Deactivation Predicate\nDESCRIPTION: Predicate that deactivates the currently active debug handler provider if one exists.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/logtalk_0.rst.txt#2025-04-06_snippet_1\n\nLANGUAGE: logtalk\nCODE:\n```\ndeactivate_debug_handler\n```\n\n----------------------------------------\n\nTITLE: Implementing compile_aux_clauses/1 method in Logtalk\nDESCRIPTION: Added a compile_aux_clauses/1 public method to the built-in object \"logtalk\", based on a predicate with the same name in SWI-Prolog. This method is used for compiling auxiliary clauses generated for supporting an expanded goal.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/RELEASE_NOTES.md#2025-04-06_snippet_131\n\nLANGUAGE: Logtalk\nCODE:\n```\ncompile_aux_clauses/1\n```\n\n----------------------------------------\n\nTITLE: Custom HTML Elements Definition in Logtalk\nDESCRIPTION: Example showing how to extend the html5 object to support custom HTML elements.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/library/html/NOTES.md#2025-04-06_snippet_7\n\nLANGUAGE: prolog\nCODE:\n```\n:- object(html5custom,\n    extends(html5)).\n\n    normal_element(foo, inline).\n    normal_element(bar, block).\n    normal_element(Name, Display) :-\n        ^^normal_element(Name, Display).\n\n:- end_object.\n```\n\n----------------------------------------\n\nTITLE: Reading Text Files to Terms with Custom Tail in Logtalk\nDESCRIPTION: Reads a text file into a list of terms with a custom tail terminator. Takes a file name as input and returns the file contents as a list of Prolog terms terminated by the given tail.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/reader_0.rst.txt#2025-04-06_snippet_5\n\nLANGUAGE: Logtalk\nCODE:\n```\nfile_to_terms(File,Terms,Tail)\n```\n\n----------------------------------------\n\nTITLE: Example Queries Using instantiates_class/2-3 in Logtalk\nDESCRIPTION: Demonstrates how to use the instantiates_class/2-3 predicate in queries. The first example checks if water_jug instantiates state_space, while the second enumerates all state_space instances with public instantiation relation.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/refman/predicates/instantiates_class_2_3.rst.txt#2025-04-06_snippet_2\n\nLANGUAGE: logtalk\nCODE:\n```\n% check that the water_jug is an instante of state_space:\n| ?- instantiates_class(water_jug, state_space).\n\n% enumerate the state_space instances where the\n% instantiation relation is public:\n| ?- instantiates_class(Space, state_space, public).\n```\n\n----------------------------------------\n\nTITLE: Loading Ports Profiler Test Suite\nDESCRIPTION: Command to load the test suite for the ports_profiler tool.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/devtools/ports_profiler.rst#2025-04-06_snippet_1\n\nLANGUAGE: prolog\nCODE:\n```\n| ?- logtalk_load(ports_profiler(tester)).\n```\n\n----------------------------------------\n\nTITLE: Loading Arbitrary Library in Logtalk\nDESCRIPTION: Shows how to load all entities in the arbitrary library using the loader.lgt file.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/libraries/arbitrary.rst.txt#2025-04-06_snippet_0\n\nLANGUAGE: logtalk\nCODE:\n```\n| ?- logtalk_load(arbitrary(loader)).\n```\n\n----------------------------------------\n\nTITLE: Local Predicate Access Error\nDESCRIPTION: Shows error handling when attempting to access an undeclared local predicate\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/scopes/NOTES.md#2025-04-06_snippet_5\n\nLANGUAGE: logtalk\nCODE:\n```\ncatch(prototype::local(_), Error, true).\n```\n\n----------------------------------------\n\nTITLE: Defining Private Counter Predicate in Logtalk\nDESCRIPTION: Defines the private 'counter_/2' predicate as an internal counter for the number of mutations available for a given type.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/mutations_store_0.rst.txt#2025-04-06_snippet_3\n\nLANGUAGE: Logtalk\nCODE:\n```\ncounter_(Type,N)\n```\n\n----------------------------------------\n\nTITLE: Querying Coupe Engine Properties in Logtalk\nDESCRIPTION: Retrieves engine properties (reference, cylinders, horsepower, and RPM) for the coupe object, combining properties from both sport and classic categories.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/carengines/NOTES.md#2025-04-06_snippet_5\n\nLANGUAGE: logtalk\nCODE:\n```\ncoupe::(reference(Name), cylinders(Cylinders), horsepower_rpm(HP, RPM)).\n```\n\n----------------------------------------\n\nTITLE: Declaring Multifile Predicates in Prolog\nDESCRIPTION: Example of a multifile predicate declaration in Prolog that defines a city data structure with four components: name, district, population, and neighbors.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/userman/migration.rst#2025-04-06_snippet_1\n\nLANGUAGE: prolog\nCODE:\n```\n% city(Name, District, Population, Neighbors)\n:- multifile(city/4).\n```\n\n----------------------------------------\n\nTITLE: ReStructuredText Table of Contents Definition\nDESCRIPTION: Defines a table of contents tree structure for documentation pages related to Logtalk compilation and loading predicates.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/refman/predicates/compiling_predicates.rst#2025-04-06_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. toctree::\n   :maxdepth: 1\n\n   logtalk_compile_1\n   logtalk_compile_2\n   logtalk_load_1\n   logtalk_load_2\n   logtalk_make_0\n   logtalk_make_1\n   logtalk_make_target_action_1\n   logtalk_library_path_2\n   logtalk_load_context_2\n```\n\n----------------------------------------\n\nTITLE: Testing Zippers Library in Logtalk\nDESCRIPTION: This snippet shows how to load the tester.lgt file to test the predicates in the zippers library. It uses the logtalk_load/1 predicate to load the tester file.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/libraries/zippers.rst#2025-04-06_snippet_1\n\nLANGUAGE: Prolog\nCODE:\n```\n| ?- logtalk_load(zippers(tester)).\n```\n\n----------------------------------------\n\nTITLE: Prolog Dynamic Directive Example\nDESCRIPTION: Example showing SWI-Prolog's proprietary dynamic/2 directive usage and table property declarations.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/RELEASE_NOTES.md#2025-04-06_snippet_49\n\nLANGUAGE: prolog\nCODE:\n```\ndynamic/2\n```\n\n----------------------------------------\n\nTITLE: Removing Context Breakpoints in Logtalk\nDESCRIPTION: Removes all matching context breakpoints.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/debuggerp_0.rst.txt#2025-04-06_snippet_17\n\nLANGUAGE: Logtalk\nCODE:\n```\nnospy/4\n```\n\n----------------------------------------\n\nTITLE: Running a Third Set of Specific Benchmark Tests\nDESCRIPTION: Executes specific benchmark tests with IDs s31, s32, and s33 with 1,000,000 repetitions each.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/benchmarks/NOTES.md#2025-04-06_snippet_9\n\nLANGUAGE: logtalk\nCODE:\n```\nbenchmarks::run(s31, 1000000), benchmarks::run(s32, 1000000), benchmarks::run(s33, 1000000).\n```\n\n----------------------------------------\n\nTITLE: Using eos//0 in a Logtalk Grammar Rule\nDESCRIPTION: This example demonstrates how to use the eos//0 method in a grammar rule. It defines a rule that matches the sequence 'abc' followed by the end-of-input.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/refman/methods/eos_0.rst#2025-04-06_snippet_2\n\nLANGUAGE: Logtalk\nCODE:\n```\nabc --> a, b, c, eos.\n```\n\n----------------------------------------\n\nTITLE: Viewing Available Interpreters in Verdi Neruda Shell\nDESCRIPTION: Command to display the list of available interpreters in the Verdi Neruda shell interface, showing both parametric and non-parametric options.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/contributions/verdi_neruda.rst#2025-04-06_snippet_3\n\nLANGUAGE: Prolog\nCODE:\n```\ninterpreters.\n```\n\n----------------------------------------\n\nTITLE: Reading a Line from Text Stream to Characters with Line Feed in Logtalk\nDESCRIPTION: Reads a line from a text stream into a list of characters, keeping the end-of-line marker normalized to line feed. The list is terminated by the given tail, which becomes empty at end of file.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/reader_0.rst.txt#2025-04-06_snippet_17\n\nLANGUAGE: Logtalk\nCODE:\n```\nline_to_chars(Stream,Chars,Tail)\n```\n\n----------------------------------------\n\nTITLE: Implementing a Protocol in a Logtalk Object\nDESCRIPTION: Updated definition of the 'list' object that implements the 'listp' protocol. Shows how to declare that an object implements a specific protocol.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/tutorial/lists.rst.txt#2025-04-06_snippet_6\n\nLANGUAGE: logtalk\nCODE:\n```\n:- object(list,\n    implements(listp)).\n\n    append([], List, List).\n    append([Head| Tail], List, [Head| Tail2]) :-\n        append(Tail, List, Tail2).\n    ...\n\n:- end_object.\n```\n\n----------------------------------------\n\nTITLE: Using Heap with Less Than Comparison\nDESCRIPTION: Demonstrates using a parameterized object alias with heap(<) to insert elements and find the minimum value.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/object_aliases/NOTES.md#2025-04-06_snippet_3\n\nLANGUAGE: logtalk\nCODE:\n```\nsimple(<)::insert_top([3-c,1-a,2-b], Top).\n```\n\n----------------------------------------\n\nTITLE: Usage Examples of conforms_to_protocol/2-3\nDESCRIPTION: Demonstrates practical usage examples of the conforms_to_protocol/2-3 predicate, showing how to enumerate objects and categories that conform to specific protocols with different constraints.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/refman/predicates/conforms_to_protocol_2_3.rst#2025-04-06_snippet_2\n\nLANGUAGE: logtalk\nCODE:\n```\n% enumerate objects and categories that conform to the listp protocol:\n| ?- conforms_to_protocol(Object, listp).\n\n% enumerate objects and categories that privately conform to the listp protocol:\n| ?- conforms_to_protocol(Object, listp, private).\n\n% enumerate only objects that conform to the listp protocol:\n| ?- current_object(Object), conforms_to_protocol(Object, listp).\n\n% enumerate only categories that conform to the serialization protocol:\n| ?- current_category(Category), conforms_to_protocol(Category, serialization).\n```\n\n----------------------------------------\n\nTITLE: Parametric Delegation with Implementing Delegate\nDESCRIPTION: Demonstrates parametric object implementation with an implementing delegate.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/delegates/NOTES.md#2025-04-06_snippet_6\n\nLANGUAGE: logtalk\nCODE:\n```\na_delegator(a_delegate)::operation(String).\n```\n\n----------------------------------------\n\nTITLE: Event Representation in Logtalk\nDESCRIPTION: Demonstrates the basic tuple structure used to represent events in Logtalk, showing both simple form and refined form with event type. Events consist of Object, Message, and Sender components.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/userman/events.rst#2025-04-06_snippet_0\n\nLANGUAGE: logtalk\nCODE:\n```\n(Object, Message, Sender)\n```\n\nLANGUAGE: logtalk\nCODE:\n```\n(Event, Object, Message, Sender)\n```\n\n----------------------------------------\n\nTITLE: Defining Triggered Breakpoints in Logtalk\nDESCRIPTION: Example of setting a triggered breakpoint that only activates when another specific breakpoint is hit first. In this case, the breakpoint for mars at line 98 is triggered by the breakpoint for planet at line 76.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/userman/debugging.rst.txt#2025-04-06_snippet_12\n\nLANGUAGE: text\nCODE:\n```\n| ?- debugger::spy(mars, 98, planet-76).\n\nTriggered breakpoint added.\nyes\n```\n\n----------------------------------------\n\nTITLE: Entity Scanning in Logtalk\nDESCRIPTION: Method to scan a loaded entity for dead code. Accepts an entity identifier and fails if the entity does not exist.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/dead_code_scanner_0.rst.txt#2025-04-06_snippet_0\n\nLANGUAGE: logtalk\nCODE:\n```\nentity(Entity)\n```\n\n----------------------------------------\n\nTITLE: Reading CSV Stream and Returning Data as List in Logtalk\nDESCRIPTION: Reads a CSV stream and returns the data as a list of rows, where each row is a list of fields. Fails if the stream cannot be parsed. Requires stream or alias as input and returns the rows as output.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/csv_protocol_0.rst.txt#2025-04-06_snippet_3\n\nLANGUAGE: Logtalk\nCODE:\n```\nread_stream(Stream,Rows)\n```\n\n----------------------------------------\n\nTITLE: Restarting and reloading persistency example\nDESCRIPTION: Simulates restarting Logtalk and reloading the persistency example.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/persistency/NOTES.md#2025-04-06_snippet_7\n\nLANGUAGE: logtalk\nCODE:\n```\nlogtalk_load(persistency(loader)).\n```\n\n----------------------------------------\n\nTITLE: List Property Testing Predicates - Logtalk\nDESCRIPTION: Predicates for testing list properties such as length, prefix/suffix relationships, and membership checking.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/varlistp_0.rst.txt#2025-04-06_snippet_2\n\nLANGUAGE: logtalk\nCODE:\n```\nlength(@list,?integer)\nprefix(?list,@list)\nsuffix(?list,@list)\nmemberchk(@var,@list)\n```\n\n----------------------------------------\n\nTITLE: Step-by-Step Logic Translation Example 1\nDESCRIPTION: Shows detailed step-by-step translation of the proposition (p v ~q) => (r & k) with intermediate conversion steps.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/logic/NOTES.md#2025-04-06_snippet_3\n\nLANGUAGE: logtalk\nCODE:\n```\ntranslator::step_by_step((p v ~q) => (r & k), Cs).\n```\n\n----------------------------------------\n\nTITLE: Category Definition Syntax in Logtalk using BNF\nDESCRIPTION: Describes the syntax for defining categories in Logtalk, including category identifiers and their relationships with protocols, other categories, and objects.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/refman/grammar.rst.txt#2025-04-06_snippet_2\n\nLANGUAGE: bnf\nCODE:\n```\ncategory ::=\n   begin_category_directive  ( category_term )* end_category_directive\n\nbegin_category_directive ::=\n   \":- category(\" category_identifier ( \",\" category_relations )? \").\"\n\nend_category_directive ::=\n   \":- end_category.\"\n\ncategory_relations ::=\n   category_relation\n   | category_relation \",\" category_relations\n\ncategory_relation ::=\n   implements_protocols\n   | extends_categories\n   | complements_objects\n```\n\n----------------------------------------\n\nTITLE: Mode Templates for Class Instances in Logtalk\nDESCRIPTION: Template and mode declarations for class instances in Logtalk. These templates specify the expected types of arguments in the object directive when instantiating classes.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/refman/directives/object_1_5.rst#2025-04-06_snippet_7\n\nLANGUAGE: logtalk\nCODE:\n```\nobject(+object_identifier,\n    instantiates(+instantiated_objects))\n\nobject(+object_identifier,\n    implements(+implemented_protocols),\n    instantiates(+instantiated_objects))\n\nobject(+object_identifier,\n    imports(+imported_categories),\n    instantiates(+instantiated_objects))\n\nobject(+object_identifier,\n    implements(+implemented_protocols),\n    imports(+imported_categories),\n    instantiates(+instantiated_objects))\n```\n\n----------------------------------------\n\nTITLE: Load Planets Example\nDESCRIPTION: Loads the planets example module using the loader file\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/planets/NOTES.md#2025-04-06_snippet_1\n\nLANGUAGE: logtalk\nCODE:\n```\nlogtalk_load(planets(loader)).\n```\n\n----------------------------------------\n\nTITLE: Testing protected term expansion\nDESCRIPTION: Shows that term expansion does not occur for protected predicates in the exp_protected object.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/expansion/NOTES.md#2025-04-06_snippet_4\n\nLANGUAGE: logtalk\nCODE:\n```\nexp_protected::expand_term(8, Term).\n```\n\n----------------------------------------\n\nTITLE: Counting Unit Tests in Logtalk\nDESCRIPTION: Returns the number of defined unit tests. This predicate is useful for getting an overview of the test suite size.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/lgtunit_0.rst.txt#2025-04-06_snippet_6\n\nLANGUAGE: Logtalk\nCODE:\n```\nnumber_of_tests(NumberOfTests)\n```\n\n----------------------------------------\n\nTITLE: Resetting Monitor in Logtalk\nDESCRIPTION: Predicate to reset the monitor, deactivating and deleting all spy points. It has a compilation flag of 'static' and returns one proof.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/monitorp_0.rst.txt#2025-04-06_snippet_3\n\nLANGUAGE: Logtalk\nCODE:\n```\nreset_monitor/0\n```\n\n----------------------------------------\n\nTITLE: Calculating Circle Area with Parameter Passing\nDESCRIPTION: Calculates the area of a red_circle object with radius 3.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/sicstus/NOTES.md#2025-04-06_snippet_5\n\nLANGUAGE: logtalk\nCODE:\n```\nred_circle(3)::area(Area).\n```\n\n----------------------------------------\n\nTITLE: Saving Objects to a File\nDESCRIPTION: Uses the serializer object to save all objects that implement the 'abc' protocol to a file named 'abc_objects'.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/serialization/NOTES.md#2025-04-06_snippet_4\n\nLANGUAGE: logtalk\nCODE:\n```\nserializer::save(abc, abc_objects).\n```\n\n----------------------------------------\n\nTITLE: Running Default QuickCheck Tests on List Length Property in Logtalk\nDESCRIPTION: Executes the default number of random tests for the same_length_2_prop property.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/quick_check/NOTES.md#2025-04-06_snippet_3\n\nLANGUAGE: logtalk\nCODE:\n```\nlgtunit::quick_check(same_length_2_prop(+list)).\n```\n\n----------------------------------------\n\nTITLE: Equivalent Sequence for Instantiation Error in Logtalk\nDESCRIPTION: This code snippet shows the equivalent sequence of calls that the instantiation_error/0 method performs internally. It retrieves the current context and throws an error with the instantiation_error type and the current context.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/refman/methods/instantiation_error_0.rst.txt#2025-04-06_snippet_1\n\nLANGUAGE: Logtalk\nCODE:\n```\n...,\ncontext(Context),\nthrow(error(instantiation_error, Context)).\n```\n\n----------------------------------------\n\nTITLE: Using Predicate Aliases in Logtalk\nDESCRIPTION: Shows how to use predicate aliases to change argument order when calling library or built-in predicates, as an alternative to lambda expressions.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/userman/predicates.rst.txt#2025-04-06_snippet_34\n\nLANGUAGE: logtalk\nCODE:\n```\n:- uses(user, [\n   atom_length(Atom, Length) as length_atom(Length, Atom)\n]).\n\nfilter(Length, Atoms, Filtered) :-\n    meta::include(length_atom(Length), Atoms, Filtered).\n```\n\n----------------------------------------\n\nTITLE: Modes and Number of Proofs for threaded_once/1-2 in Logtalk\nDESCRIPTION: Defines the calling modes for threaded_once/1 and threaded_once/2, showing that both predicates succeed exactly once. The first argument must be ground, and the second is an output variable.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/refman/predicates/threaded_once_1_2.rst.txt#2025-04-06_snippet_2\n\nLANGUAGE: prolog\nCODE:\n```\nthreaded_once(@callable) - one\nthreaded_once(@callable, --nonvar) - one\n```\n\n----------------------------------------\n\nTITLE: Checking Versions in Logtalk\nDESCRIPTION: Prints the versions of Logtalk, Prolog backend, and kernel when running as a notebook.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/parstructs/NOTES.md#2025-04-06_snippet_0\n\nLANGUAGE: logtalk\nCODE:\n```\n%versions\n```\n\n----------------------------------------\n\nTITLE: Eight-Thread Fibonacci Calculation\nDESCRIPTION: Calculates the 24th Fibonacci number using eight threads with timing measurement.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/threads/fibonacci/NOTES.md#2025-04-06_snippet_4\n\nLANGUAGE: logtalk\nCODE:\n```\ntime(fibonacci(8)::fib(24, N)).\n```\n\n----------------------------------------\n\nTITLE: Browsing Man Pages in Logtalk Help Tool\nDESCRIPTION: This snippet shows how to browse the 'man' pages of Logtalk scripts using the 'help' tool. It demonstrates the usage of the man/1 predicate.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/devtools/help.rst#2025-04-06_snippet_3\n\nLANGUAGE: prolog\nCODE:\n```\n| ?- help::man(logtalk_tester).\n```\n\n----------------------------------------\n\nTITLE: Identifying Another Bird in Logtalk\nDESCRIPTION: A Logtalk query to initiate another bird identification process, with a condition to skip if running as a Jupyter notebook.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/birds/NOTES.md#2025-04-06_snippet_4\n\nLANGUAGE: logtalk\nCODE:\n```\n(current_object(jupyter) -> true; expert::identify).\n```\n\n----------------------------------------\n\nTITLE: Temporal After Relation\nDESCRIPTION: Checks if Interval1 takes place after Interval2. Returns zero or one solutions.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/intervalp_0.rst.txt#2025-04-06_snippet_3\n\nLANGUAGE: Logtalk\nCODE:\n```\nafter(Interval1,Interval2)\n```\n\n----------------------------------------\n\nTITLE: Preparing a Dynamic Predicate for TSV Data in Logtalk\nDESCRIPTION: Example of creating a dynamic predicate that will be used to store TSV data when reading a file.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/libraries/tsv.rst#2025-04-06_snippet_3\n\nLANGUAGE: logtalk\nCODE:\n```\n| ?- assertz(p(_,_,_)), retractall(p(_,_,_)).\nyes\n```\n\n----------------------------------------\n\nTITLE: Mode Declaration for current_op/3 in Logtalk\nDESCRIPTION: Specifies the calling modes and determinism for the current_op/3 method. It indicates that all arguments can be either input or output (represented by the ? prefix) and that the predicate can succeed zero or more times.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/refman/methods/current_op_3.rst#2025-04-06_snippet_1\n\nLANGUAGE: logtalk\nCODE:\n```\ncurrent_op(?operator_priority, ?operator_specifier, ?atom) - zero_or_more\n```\n\n----------------------------------------\n\nTITLE: Instance Definition Lookup Chain\nDESCRIPTION: Shows the complete definition lookup chain from instance through class hierarchy.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/predicate_lookups/NOTES.md#2025-04-06_snippet_9\n\nLANGUAGE: logtalk\nCODE:\n```\nsailplane::structure(Structure).\n```\n\n----------------------------------------\n\nTITLE: Using Tags with Threaded Calls in Logtalk (Second Call)\nDESCRIPTION: Makes a second tagged threaded call which will receive a different tag identifier.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/threads/nondet/NOTES.md#2025-04-06_snippet_10\n\nLANGUAGE: logtalk\nCODE:\n```\nthreaded_call(lists::member(X, [1,2,3]), Tag).\n```\n\n----------------------------------------\n\nTITLE: Example Usage of define_events/5 in Prolog\nDESCRIPTION: Demonstrates how to use the define_events/5 predicate to define a 'debugger' as a monitor for member/2 messages sent to the 'list' object.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/refman/predicates/define_events_5.rst#2025-04-06_snippet_2\n\nLANGUAGE: Prolog\nCODE:\n```\n% define \"debugger\" as a monitor for member/2 messages\n% sent to the \"list\" object:\n| ?- define_events(_, list, member(_, _), _ , debugger).\n```\n\n----------------------------------------\n\nTITLE: Defining from_generator/2 Predicate in Logtalk\nDESCRIPTION: Constructs optional terms with the values generated by calling the given closure. On closure error or failure, returns an empty optional. Can return one or more proofs based on the generator.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/optional_0.rst.txt#2025-04-06_snippet_5\n\nLANGUAGE: Logtalk\nCODE:\n```\nfrom_generator(Closure,Optional)\n```\n\n----------------------------------------\n\nTITLE: Interactive Compiler Flag Setting\nDESCRIPTION: Example of interactively setting Logtalk compiler flags using the logtalk_compile/2 and logtalk_load/2 predicates.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/userman/programming.rst#2025-04-06_snippet_14\n\nLANGUAGE: text\nCODE:\n```\n| ?- logtalk_compile(Files, Options).\n```\n\nLANGUAGE: text\nCODE:\n```\n| ?- logtalk_load(Files, Options).\n```\n\n----------------------------------------\n\nTITLE: Using Meta Non-Terminals in DCG Rules with Logtalk\nDESCRIPTION: Demonstrates the use of a meta-non-terminal in DCG rules using the meta_nt object.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/dcgs/NOTES.md#2025-04-06_snippet_19\n\nLANGUAGE: logtalk\nCODE:\n```\nlogtalk << phrase(meta_nt::repeat(bases::octal, 2, 4, Digits), [3,7,4,1,0,3,6], Rest).\n```\n\n----------------------------------------\n\nTITLE: Fixing Individual Options in Logtalk\nDESCRIPTION: The fix_option/2 predicate transforms or corrects a single option as needed. This is typically called by fix_options/2 to process each option in a list.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/options_protocol_0.rst.txt#2025-04-06_snippet_10\n\nLANGUAGE: prolog\nCODE:\n```\nfix_option(Option,FixedOption)\n```\n\n----------------------------------------\n\nTITLE: Creating and loading a database from a file\nDESCRIPTION: Creates a new database 'foo_db' and loads the previously saved 'my_db.pl' file into it.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/named_databases/NOTES.md#2025-04-06_snippet_9\n\nLANGUAGE: logtalk\nCODE:\n```\ndb_create(foo_db), db_load(foo_db, 'my_db.pl').\n```\n\n----------------------------------------\n\nTITLE: Printing Entity-Specific Port Profiling Data in Logtalk\nDESCRIPTION: Prints a table with all port profiling data for the specified entity. This predicate is compiled with the 'static' flag and provides one proof for a given entity identifier.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/ports_profiler_0.rst.txt#2025-04-06_snippet_3\n\nLANGUAGE: Logtalk\nCODE:\n```\ndata(Entity)\n```\n\n----------------------------------------\n\nTITLE: Example of Creating an Engine in Logtalk\nDESCRIPTION: Demonstrates how to create a new engine named 'worker_1' to enumerate elements from a list, using member/2 as the goal and X as the answer template.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/refman/predicates/threaded_engine_create_3.rst.txt#2025-04-06_snippet_3\n\nLANGUAGE: prolog\nCODE:\n```\n% create a new engine to enumerate list elements:\n| ?- threaded_engine_create(X, member(X, [1,2,3]), worker_1).\n```\n\n----------------------------------------\n\nTITLE: Setting Breakpoints in Logtalk\nDESCRIPTION: Sets a predicate or clause breakpoint, or a list of breakpoints. Fails if a breakpoint is invalid.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/debuggerp_0.rst.txt#2025-04-06_snippet_9\n\nLANGUAGE: Logtalk\nCODE:\n```\nspy/1\n```\n\n----------------------------------------\n\nTITLE: Commit Date Query Predicate\nDESCRIPTION: Predicate that returns the date of the latest commit in strict ISO 8601 format.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/git_protocol_0.rst.txt#2025-04-06_snippet_2\n\nLANGUAGE: prolog\nCODE:\n```\ncommit_date(+Directory, -Date)\n```\n\n----------------------------------------\n\nTITLE: RestructuredText Documentation Header\nDESCRIPTION: RST documentation header and toctree setup for Logtalk super calls documentation\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/refman/control/super_calls.rst#2025-04-06_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. _super_calls:\n\nCalling imported and inherited predicates\n=========================================\n\n.. toctree::\n   :maxdepth: 1\n\n   call_super_1\n```\n\n----------------------------------------\n\nTITLE: Defining Shrinker for Odd Integers in Logtalk\nDESCRIPTION: Shows how to define a shrinker for the 'odd' type to be used in QuickCheck.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/library/arbitrary/NOTES.md#2025-04-06_snippet_4\n\nLANGUAGE: logtalk\nCODE:\n```\n:- multifile(arbitrary::shrinker/1).\narbitrary::shrinker(odd).\n\n:- multifile(arbitrary::shrink/3).\narbitrary::shrink(odd, Large, Small) :-\n\tinteger(Large),\n\t(\tLarge < -1 ->\n\t\tSmall is Large + 2\n\t;\tLarge > 1,\n\t\tSmall is Large - 2\n\t).\n```\n\n----------------------------------------\n\nTITLE: Loading Prolog Module for Linting\nDESCRIPTION: Example of loading a Prolog module file for linting analysis using Logtalk's loader with source data enabled.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/devtools/linter.rst#2025-04-06_snippet_0\n\nLANGUAGE: prolog\nCODE:\n```\n| ?- logtalk_load(module, [source_data(on)]).\n```\n\n----------------------------------------\n\nTITLE: Using Assertion/2 Predicate in Logtalk\nDESCRIPTION: Example of using the assertion/2 predicate in a Logtalk predicate. It includes a context term 'foo_list_alerts' and checks if the input list L is non-empty.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/devtools/assertions.rst#2025-04-06_snippet_3\n\nLANGUAGE: Logtalk\nCODE:\n```\nfoo(L) :-\n    assertions::assertion(foo_list_alerts, non_empty_list(L)),\n    ...\n```\n\n----------------------------------------\n\nTITLE: Loading Logtalk Source with Suppressed Assertions\nDESCRIPTION: Query to load a Logtalk source file with a hook that suppresses all assertion calls, useful for production environments.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/devtools/assertions.rst#2025-04-06_snippet_6\n\nLANGUAGE: Prolog\nCODE:\n```\nlogtalk_load(source, [hook(assertions(production))])\n```\n\n----------------------------------------\n\nTITLE: Defining an Object that Imports Categories in Logtalk\nDESCRIPTION: Syntax for creating an object that imports one or more categories, which allows for code reuse across multiple objects without using inheritance.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/userman/objects.rst#2025-04-06_snippet_2\n\nLANGUAGE: logtalk\nCODE:\n```\n:- object(Object,\n    imports([Category1, Category2, ...])).\n    ...\n:- end_object.\n```\n\n----------------------------------------\n\nTITLE: Linting Unique Pack Specification in Logtalk (Prolog)\nDESCRIPTION: Checks the pack specification for a given pack. Fails if the pack is unknown, available from multiple registries, or if linting detects errors. Requires pack name as an atom.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/packs_0.rst.txt#2025-04-06_snippet_11\n\nLANGUAGE: prolog\nCODE:\n```\nlint(Pack)\n```\n\n----------------------------------------\n\nTITLE: Library Entity Dynamic Predicate Declaration\nDESCRIPTION: Defines a dynamic predicate that maintains a table of documented entities per library. Takes library name, primary and secondary sort keys, and entity as arguments.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/lgtdoc_0.rst.txt#2025-04-06_snippet_0\n\nLANGUAGE: logtalk\nCODE:\n```\nlibrary_entity_(Library,PrimarySortKey,SecondarySortKey,Entity)\n```\n\n----------------------------------------\n\nTITLE: Loading ECLiPSe .eco Files with Command-Line Options\nDESCRIPTION: Example command for loading generated .eco files with ECLiPSe. The -L iso and -t user options are required for successfully loading the generated files.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/scripts/embedding/eclipse/NOTES.md#2025-04-06_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\neclipse -L iso -t user -f loader.eco\n```\n\n----------------------------------------\n\nTITLE: Object Declaration: backend_random Prolog Object\nDESCRIPTION: Backend random number generator object that uses the Prolog compiler's built-in random generator. Implements pseudo_random_protocol and sampling_protocol interfaces and depends on the list object. Notable for providing basic random/1, get_seed/1, and set_seed/1 predicates with varying portability across Prolog implementations.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/backend_random_0.rst.txt#2025-04-06_snippet_0\n\nLANGUAGE: prolog\nCODE:\n```\nbackend_random\n```\n\n----------------------------------------\n\nTITLE: Infinite Stream Generation\nDESCRIPTION: Shows generation of infinite streams using coinduction.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/coinduction/NOTES.md#2025-04-06_snippet_4\n\nLANGUAGE: logtalk\nCODE:\n```\nstreams::nat_stream([0, s(0), s(s(0))| T]).\n```\n\n----------------------------------------\n\nTITLE: Computing List Length with EDCG\nDESCRIPTION: Uses the synopsis object to compute the length of a given list using the EDCG approach.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/edcgs/NOTES.md#2025-04-06_snippet_8\n\nLANGUAGE: logtalk\nCODE:\n```\nsynopsis::len([a,b,a], Len).\n```\n\n----------------------------------------\n\nTITLE: Defining the false/0 Method in Logtalk\nDESCRIPTION: The false/0 method is a built-in method in Logtalk that always fails. It can be used as a message to an object and is declared as a public method. This method has no arguments and always produces one proof.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/refman/methods/false_0.rst#2025-04-06_snippet_0\n\nLANGUAGE: Prolog\nCODE:\n```\nfalse\n```\n\n----------------------------------------\n\nTITLE: Randomizing Seed with Integer in Logtalk\nDESCRIPTION: Randomizes the random generator using a positive integer to compute a new seed. It's recommended to use a large integer or discard the first dozen random values when using a small integer argument.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/random_0.rst.txt#2025-04-06_snippet_1\n\nLANGUAGE: Logtalk\nCODE:\n```\nrandomize(Seed)\n```\n\n----------------------------------------\n\nTITLE: Magic Clause Transformation in Logtalk\nDESCRIPTION: The magicise/4 predicate transforms a clause (Head :- Body) into a magic clause (NewHead :- NewBody). This is part of the magic sets optimization technique used in logic programming.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/magic_0.rst.txt#2025-04-06_snippet_0\n\nLANGUAGE: logtalk\nCODE:\n```\nmagicise(Head,Body,NewHead,NewBody)\n```\n\n----------------------------------------\n\nTITLE: Using map_reduce/5 Metapredicate in Logtalk\nDESCRIPTION: Maps a list and applies a fold left (reduce) operation to the resulting list. Takes mapping and reducing callable terms, an initial accumulator, an input list, and produces a result term.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/metap_0.rst.txt#2025-04-06_snippet_9\n\nLANGUAGE: logtalk\nCODE:\n```\nmap_reduce(Map,Reduce,Accumulator,List,Result)\n```\n\n----------------------------------------\n\nTITLE: Testing the HTML Library\nDESCRIPTION: Code to load the test file for the HTML library predicates.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/libraries/html.rst.txt#2025-04-06_snippet_5\n\nLANGUAGE: prolog\nCODE:\n```\n| ?- logtalk_load(html(tester)).\n```\n\n----------------------------------------\n\nTITLE: Improving Readability with alias/2 Directive\nDESCRIPTION: Example of using alias/2 to give an alternative name to an inherited predicate, allowing both the original name (width/1) and a more domain-specific name (side/1) to be used with the square object.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/userman/predicates.rst#2025-04-06_snippet_21\n\nLANGUAGE: logtalk\nCODE:\n```\n:- object(square,\n    extends(rectangle)).\n\n    :- alias(rectangle, [width/1 as side/1]).\n\n    ...\n\n:- end_object.\n```\n\n----------------------------------------\n\nTITLE: Installing Package with Signature Verification\nDESCRIPTION: Example showing package installation with both verbose output and signature verification enabled\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/devtools/packs.rst#2025-04-06_snippet_24\n\nLANGUAGE: logtalk\nCODE:\n```\n| ?- packs::install(reg, bar, 1:1:2, [verbose(true), checksig(true)]).\n```\n\n----------------------------------------\n\nTITLE: Adding a Registry from URL in Logtalk\nDESCRIPTION: Adds a new registry using default options and deriving the registry name from the URL basename.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/registries_0.rst.txt#2025-04-06_snippet_5\n\nLANGUAGE: logtalk\nCODE:\n```\nadd(URL)\n```\n\n----------------------------------------\n\nTITLE: Threaded Predicate Declaration\nDESCRIPTION: Basic syntax for the threaded predicate showing its usage with conjunctions and disjunctions of goals.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/refman/predicates/threaded_1.rst#2025-04-06_snippet_0\n\nLANGUAGE: prolog\nCODE:\n```\nthreaded(Conjunction)\nthreaded(Disjunction)\n```\n\n----------------------------------------\n\nTITLE: Generating ULID with Date Components\nDESCRIPTION: Example of generating a ULID using discrete timestamp components (year, month, day, hours, minutes, seconds, milliseconds).\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/libraries/ulid.rst.txt#2025-04-06_snippet_6\n\nLANGUAGE: logtalk\nCODE:\n```\n| ?- ulid(atom)::generate(2023, 5, 17, 16, 23, 38, 591, ULID).\nULID = '01H0N8CDAZK75C5H3BJSGS4VCQ'\nyes\n```\n\n----------------------------------------\n\nTITLE: 7-bit PCDATA Handling with DCG in Logtalk\nDESCRIPTION: Private DCG rule for representing ASCII characters in XML-compatible format, using standard character entities for special characters.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/xml_0.rst.txt#2025-04-06_snippet_12\n\nLANGUAGE: Logtalk\nCODE:\n```\npcdata_7bit(Code)\n```\n\n----------------------------------------\n\nTITLE: Lambda Expressions with Free Variables in Logtalk\nDESCRIPTION: Shows how to use lambda-free variables in a lambda expression, where N is bound by the between/3 goal and fixed across all implicit calls made by map/3.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/userman/predicates.rst.txt#2025-04-06_snippet_32\n\nLANGUAGE: text\nCODE:\n```\n| ?- between(1, 3, N), meta::map({N}/[X,Y]>>(Y is N*X), [1,2,3], L).\nN = 1, L = [1,2,3] ;\nN = 2, L = [2,4,6] ;\nN = 3, L = [3,6,9]\nyes\n```\n\n----------------------------------------\n\nTITLE: Pretty Printing Clauses in Logtalk\nDESCRIPTION: Pretty prints a clause to the current output stream. This predicate takes one argument (the clause) and provides one proof.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/listing_0.rst.txt#2025-04-06_snippet_2\n\nLANGUAGE: Logtalk\nCODE:\n```\nportray_clause(Clause)\n```\n\n----------------------------------------\n\nTITLE: Loading Code Metrics Tool in Logtalk\nDESCRIPTION: This snippet shows how to load the code_metrics tool in Logtalk. It's the first step required before using any of the tool's functionalities.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/tools/code_metrics/SCRIPT.txt#2025-04-06_snippet_0\n\nLANGUAGE: Logtalk\nCODE:\n```\n| ?- logtalk_load(code_metrics(loader)).\n```\n\n----------------------------------------\n\nTITLE: Template and Modes for elif/1 Directive in Logtalk\nDESCRIPTION: The template showing the expected mode for the elif/1 directive, where the argument must be a callable term.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/refman/directives/elif_1.rst.txt#2025-04-06_snippet_1\n\nLANGUAGE: Logtalk\nCODE:\n```\nelif(@callable)\n```\n\n----------------------------------------\n\nTITLE: Loading Wrapped Prolog Files in Logtalk\nDESCRIPTION: This code snippet demonstrates how to load Prolog files using the custom wrapper hook object. It uses logtalk_load/2 with the hook option to apply the wrapper to the loaded files.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/userman/expansion.rst#2025-04-06_snippet_14\n\nLANGUAGE: Logtalk\nCODE:\n```\n| ?- logtalk_load(\n         ['my_car.pl', 'lease_car.pl'],\n         [hook(wrapper(car_protocol))]\n     ).\n\nyes\n```\n\n----------------------------------------\n\nTITLE: Library Documentation Access\nDESCRIPTION: Predicates for accessing help on standard Logtalk libraries, library predicates, and non-terminals.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/help_0.rst.txt#2025-04-06_snippet_5\n\nLANGUAGE: logtalk\nCODE:\n```\nlibrary/0\nlibrary(Topic)\n```\n\n----------------------------------------\n\nTITLE: Protocol Identifiers Syntax in Logtalk using BNF\nDESCRIPTION: Specifies that protocol identifiers in Logtalk can only be atoms.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/refman/grammar.rst.txt#2025-04-06_snippet_17\n\nLANGUAGE: bnf\nCODE:\n```\nprotocol_identifier ::=\n   atom\n```\n\n----------------------------------------\n\nTITLE: Defining repeat/0 Method Mode\nDESCRIPTION: Mode declaration for the repeat/0 method indicating it provides one or more solutions through backtracking.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/refman/methods/repeat_0.rst#2025-04-06_snippet_1\n\nLANGUAGE: logtalk\nCODE:\n```\nrepeat - one_or_more\n```\n\n----------------------------------------\n\nTITLE: Conditionally Skipping Tests in Logtalk Unit Tests\nDESCRIPTION: Shows how to conditionally skip a test using the condition/1 option in the test/3 dialect, which skips the test if the condition fails or generates an error.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/devtools/lgtunit.rst#2025-04-06_snippet_24\n\nLANGUAGE: logtalk\nCODE:\n```\n   test(test_id, true, [condition(current_prolog_flag(bounded,true))) :-\n       ...\n```\n\n----------------------------------------\n\nTITLE: Retrieving Operating System Type in Logtalk\nDESCRIPTION: Returns the operating system type. Possible values are unix, windows, and unknown.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/osp_0.rst.txt#2025-04-06_snippet_16\n\nLANGUAGE: prolog\nCODE:\n```\noperating_system_type(Type)\n```\n\n----------------------------------------\n\nTITLE: Specification of modes and proof count for set_logtalk_flag/2 in Logtalk\nDESCRIPTION: Defines the modes and number of proofs for the set_logtalk_flag/2 predicate, indicating it requires both arguments to be instantiated and returns exactly one solution.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/refman/predicates/set_logtalk_flag_2.rst.txt#2025-04-06_snippet_1\n\nLANGUAGE: logtalk\nCODE:\n```\nset_logtalk_flag(+atom, +nonvar) - one\n```\n\n----------------------------------------\n\nTITLE: Querying Circle Proxies in Logtalk\nDESCRIPTION: Demonstrates how to query and print information for all circle proxies.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/proxies/NOTES.md#2025-04-06_snippet_3\n\nLANGUAGE: logtalk\nCODE:\n```\nforall(circle(Id, R, C), circle(Id, R, C)::print).\n```\n\n----------------------------------------\n\nTITLE: Retracting Clause from Explicit Object in Logtalk\nDESCRIPTION: Example of retracting a matching clause from a public dynamic predicate in a specified object.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/refman/methods/retract_1.rst#2025-04-06_snippet_4\n\nLANGUAGE: Prolog\nCODE:\n```\nObject::retract(Clause)\n```\n\n----------------------------------------\n\nTITLE: Java-Logtalk Array Conversion\nDESCRIPTION: Demonstrates bidirectional conversion between Logtalk terms and Java arrays\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/jpl/NOTES.md#2025-04-06_snippet_4\n\nLANGUAGE: logtalk\nCODE:\n```\njava::terms_to_array([x,[1,a,7,[y,z]],k,[],3.14,foo(bar)], Array), java::array_to_terms(Array, List).\n```\n\n----------------------------------------\n\nTITLE: Solving Hexagon Puzzle using CLP(FD) in Logtalk\nDESCRIPTION: Shows how to solve a hexagon puzzle using CLP(FD) constraints in Logtalk.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/constraints/swipl/NOTES.md#2025-04-06_snippet_3\n\nLANGUAGE: logtalk\nCODE:\n```\nhexagon::mhex(Vs).\n```\n\n----------------------------------------\n\nTITLE: Simulating Book Button Click in Logtalk\nDESCRIPTION: Demonstrates the interaction of the 'book' button object with the mediator by simulating a click event.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/design_patterns/behavioral/mediator/NOTES.md#2025-04-06_snippet_2\n\nLANGUAGE: logtalk\nCODE:\n```\nbook_button::click.\n```\n\n----------------------------------------\n\nTITLE: Flag Validator Validate Predicate\nDESCRIPTION: Protocol predicate for validating a flag value. Takes a term as input and operates in zero_or_one mode with static compilation.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/flags_validator_0.rst.txt#2025-04-06_snippet_1\n\nLANGUAGE: logtalk\nCODE:\n```\nvalidate(@term)\n```\n\n----------------------------------------\n\nTITLE: Defining Recursive Type Generator for Binary Trees in Logtalk\nDESCRIPTION: Example of defining a generator for a recursive type (binary tree) with a depth limit.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/library/arbitrary/NOTES.md#2025-04-06_snippet_6\n\nLANGUAGE: logtalk\nCODE:\n```\n:- category(binary_tree).\n\n\t:- multifile(type::type/1).\n\ttype::type(node(_)).\n\n\t:- multifile(type::check/2).\n\ttype::check(node(_), Term) :-\n\t\t(\tcheck(Term) ->\n\t\t\ttrue\n\t\t;\tvar(Term) ->\n\t\t\tthrow(instantiation_error)\n\t\t;\tthrow(type_error(node(_), Term))\n\t\t).\n\n\tcheck(Term) :-\n\t\t(\tinteger(Term) ->\n\t\t\ttrue\n\t\t;\tcompound(Term),\n\t\t\tTerm = node(Left, Right),\n\t\t\tcheck(Left),\n\t\t\tcheck(Right)\n\t\t).\n\n\t:- multifile(arbitrary::arbitrary/1).\n\tarbitrary::arbitrary(node(_)).\n\n\t:- multifile(arbitrary::arbitrary/2).\n\tarbitrary::arbitrary(node(Depth), Arbitrary) :-\n\t(\tDepth > 1 ->\n\t\tNewDepth is Depth - 1,\n\t\ttype::arbitrary(\n\t\t\ttypes_frequency([\n\t\t\t\tinteger - 1,\n\t\t\t\tcompound(\n\t\t\t\t\tnode,\n\t\t\t\t\t[\n\t\t\t\t\t\ttypes([node(NewDepth), integer]),\n\t\t\t\t\t\ttypes([node(NewDepth), integer])\n\t\t\t\t\t]\n\t\t\t\t) - 3\n\t\t\t]),\n\t\t\tArbitrary\n\t\t)\n\t;\ttype::arbitrary(\n\tinteger, Arbitrary)\n\t).\n\n:- end_category.\n```\n\n----------------------------------------\n\nTITLE: Testing the CBOR Library in Logtalk\nDESCRIPTION: Shows how to run the test suite for the CBOR library by loading the tester.lgt file, which contains test cases to verify the functionality of the library predicates.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/library/cbor/NOTES.md#2025-04-06_snippet_4\n\nLANGUAGE: logtalk\nCODE:\n```\n| ?- logtalk_load(cbor(tester)).\n```\n\n----------------------------------------\n\nTITLE: Declaring Public Grammar Rule Non-terminal in Logtalk\nDESCRIPTION: Demonstrates how to declare a grammar rule non-terminal as public using the scope directive with the // operator to differentiate from regular predicates.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/userman/predicates.rst.txt#2025-04-06_snippet_37\n\nLANGUAGE: logtalk\nCODE:\n```\n:- public(expr//1).\n```\n\n----------------------------------------\n\nTITLE: Running Whisper Example with 3 Engines\nDESCRIPTION: Executes the whisper query with 3 engines and an initial value of 1, which passes the value through three engines, incrementing it each time.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/engines/whisper/NOTES.md#2025-04-06_snippet_4\n\nLANGUAGE: logtalk\nCODE:\n```\nwhisper::whisper(3, 1, Final).\n```\n\n----------------------------------------\n\nTITLE: Loading the Self vs This Example in Logtalk\nDESCRIPTION: This code loads the 'self_vs_this' example using the Logtalk loader.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/self_vs_this/NOTES.md#2025-04-06_snippet_1\n\nLANGUAGE: logtalk\nCODE:\n```\nlogtalk_load(self_vs_this(loader)).\n```\n\n----------------------------------------\n\nTITLE: Testing Security Limit\nDESCRIPTION: Attempts to transfer 400 units from Jane's account to John's account, which exceeds the maximum transfer limit of 200.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/aspects/NOTES.md#2025-04-06_snippet_3\n\nLANGUAGE: logtalk\nCODE:\n```\nbank::transfer(jane, john, 400).\n```\n\n----------------------------------------\n\nTITLE: Object Cloning Predicate Definition in Logtalk\nDESCRIPTION: Defines a clone/1 predicate that creates a copy of an object. It can either generate a new object identifier or accept a specified one as input. The predicate operates in zero_or_one proof mode.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/cloning_0.rst.txt#2025-04-06_snippet_0\n\nLANGUAGE: logtalk\nCODE:\n```\nclone(?object)\n```\n\n----------------------------------------\n\nTITLE: Defining CSV Object with Parameters in Logtalk\nDESCRIPTION: Defines the csv object with parameters for header handling, separator specification, and quote handling. This object implements the csv_protocol and provides various predicates for CSV file and stream operations.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/csv_3.rst.txt#2025-04-06_snippet_0\n\nLANGUAGE: Logtalk\nCODE:\n```\ncsv(Header,Separator,IgnoreQuotes)\n```\n\n----------------------------------------\n\nTITLE: Specifying Modes and Proofs for current_op/3 in Logtalk\nDESCRIPTION: Defines the mode and number of proofs for the current_op/3 method. It indicates that all arguments can be input or output, and the method can return zero or more results.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/refman/methods/current_op_3.rst.txt#2025-04-06_snippet_1\n\nLANGUAGE: Logtalk\nCODE:\n```\ncurrent_op(?operator_priority, ?operator_specifier, ?atom) - zero_or_more\n```\n\n----------------------------------------\n\nTITLE: Installing Tool Dependencies on RedHat\nDESCRIPTION: Terminal commands for installing third-party dependencies required by various Logtalk tools using dnf package manager on RedHat-based Linux distributions.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/tools/NOTES.md#2025-04-06_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\n$ sudo dnf install graphviz\n$ sudo dnf install texinfo pandoc\n$ sudo dnf install libxslt fop\n$ sudo dnf install bsdtar gnupg2 git curl wget direnv\n```\n\n----------------------------------------\n\nTITLE: Declaring Module Aliases with use_module/1\nDESCRIPTION: Shows the basic syntax for declaring module aliases using the use_module/1 directive. The directive takes a list of Module as Alias pairs.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/refman/directives/use_module_1.rst#2025-04-06_snippet_0\n\nLANGUAGE: logtalk\nCODE:\n```\nuse_module([Module as Alias, ...])\n```\n\n----------------------------------------\n\nTITLE: Finding Defined Events in Logtalk\nDESCRIPTION: Uses the current_event/5 predicate to retrieve currently defined events. It can return sets of matching events if some arguments are free variables.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/userman/events.rst#2025-04-06_snippet_3\n\nLANGUAGE: text\nCODE:\n```\n| ?- current_event(Event, Object, Message, Sender, Monitor).\n```\n\n----------------------------------------\n\nTITLE: Defining a Self-Instantiating Class in Logtalk\nDESCRIPTION: Simplified approach for creating a self-instantiating class (a class that is its own metaclass) when a full reflective system is not needed.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/userman/objects.rst#2025-04-06_snippet_9\n\nLANGUAGE: logtalk\nCODE:\n```\n:- object(class,\n    instantiates(class)).\n    ...\n:- end_object.\n```\n\n----------------------------------------\n\nTITLE: Printing Version Information\nDESCRIPTION: Prints Logtalk, Prolog backend, and kernel versions when running as a notebook.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/includes/NOTES.md#2025-04-06_snippet_0\n\nLANGUAGE: logtalk\nCODE:\n```\n%versions\n```\n\n----------------------------------------\n\nTITLE: Specifying Modes for threaded_engine_post/2 in Logtalk\nDESCRIPTION: Specifies the modes and number of proofs for the threaded_engine_post/2 predicate. It takes a non-variable Engine and a term, producing one proof.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/refman/predicates/threaded_engine_post_2.rst.txt#2025-04-06_snippet_1\n\nLANGUAGE: Prolog\nCODE:\n```\nthreaded_engine_post(@nonvar, @term) - one\n```\n\n----------------------------------------\n\nTITLE: Goal Expansion Method Signature\nDESCRIPTION: Method signature showing the arguments for goal_expansion/2 predicate that defines how goals should be expanded during compilation.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/refman/methods/goal_expansion_2.rst.txt#2025-04-06_snippet_0\n\nLANGUAGE: prolog\nCODE:\n```\ngoal_expansion(Goal, ExpandedGoal)\n```\n\n----------------------------------------\n\nTITLE: Converting DOT to SVG using Alternative Graphviz Layouts\nDESCRIPTION: Commands to convert DOT format diagrams to SVG using different Graphviz layout engines (fdp and circo).\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/devtools/diagrams.rst.txt#2025-04-06_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\nfdp -Tsvg diagram.dot > diagram.svg\ncirco -Tsvg diagram.dot > diagram.svg\n```\n\n----------------------------------------\n\nTITLE: Two-Threaded Merge Sort\nDESCRIPTION: Generates a list of 20000 random floats and performs merge sort using two threads. Compares performance with the single-threaded version.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/threads/sorting/NOTES.md#2025-04-06_snippet_3\n\nLANGUAGE: logtalk\nCODE:\n```\ngenerator::list(20000, List), time(msort(2)::msort(List, Sorted)).\n```\n\n----------------------------------------\n\nTITLE: Querying Neo4j Database from Logtalk\nDESCRIPTION: Logtalk query to find people Neo knows in the Matrix using the Neo4j database connection.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/neo4j/NOTES.md#2025-04-06_snippet_4\n\nLANGUAGE: logtalk\nCODE:\n```\nmatrix('bolt://localhost:7687', 'neo4j', 'password')::neo_knows(Who).\n```\n\n----------------------------------------\n\nTITLE: Logtalk Predicate Documentation Format\nDESCRIPTION: Example format showing how predicates are documented with their arity and implementing modules using reStructuredText directives\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/predicate_index.rst.txt#2025-04-06_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n``predicate_name/arity``\n--------------\n\n.. toctree::\n   :maxdepth: 1\n\n* :ref:`implementing_module <implementing_module/0::predicate_name/arity>`\n```\n\n----------------------------------------\n\nTITLE: Adding Logtalk Mode to jEdit Catalog\nDESCRIPTION: XML entry that needs to be added to the jEdit catalog file to enable Logtalk file recognition and syntax support. Defines file extension patterns for Logtalk source files.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/coding/jedit/NOTES.md#2025-04-06_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n<MODE NAME=\"logtalk\" FILE=\"logtalk.xml\" FILE_NAME_GLOB=\"*.{lgt,logtalk}\" />\n```\n\n----------------------------------------\n\nTITLE: Defining Node in Logtalk Graph\nDESCRIPTION: Writes a node using the specified options. Takes a stream or alias, identifier, label, caption, list of lines, kind, and a list of compound options as input.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/graph_language_protocol_0.rst.txt#2025-04-06_snippet_5\n\nLANGUAGE: Logtalk\nCODE:\n```\nnode(Stream,Identifier,Label,Caption,Lines,Kind,Options)\n```\n\n----------------------------------------\n\nTITLE: Asserting Clauses for Test Predicate\nDESCRIPTION: This snippet asserts multiple clauses for the predicate a/1, which will be used in subsequent queries to demonstrate the meta-predicates.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/engines/emetas/NOTES.md#2025-04-06_snippet_2\n\nLANGUAGE: logtalk\nCODE:\n```\nassertz(a(2)), assertz(a(1)), assertz(a(4)), assertz(a(3)).\n```\n\n----------------------------------------\n\nTITLE: Benchmarking FFT Performance with Very Large Input in Logtalk\nDESCRIPTION: Measures the execution time of FFT calculations for a very large input (N=65536) using 1, 2, and 4 threads.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/threads/fft/NOTES.md#2025-04-06_snippet_5\n\nLANGUAGE: logtalk\nCODE:\n```\nN is 65536, cgenerator::list(N, L), time(fft(1)::fft(N,L,F1)), time(fft(2)::fft(N,L,F2)), time(fft(4)::fft(N,L,F3)).\n```\n\n----------------------------------------\n\nTITLE: Interval Constructor Predicate\nDESCRIPTION: Creates a new interval given start and end points. The start point must strictly precede the end point. Returns zero or one solutions.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/intervalp_0.rst.txt#2025-04-06_snippet_0\n\nLANGUAGE: Logtalk\nCODE:\n```\nnew(Start,End,Interval)\n```\n\n----------------------------------------\n\nTITLE: Load Hello World Example\nDESCRIPTION: Loads the hello_world example program using the Logtalk loader predicate.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/hello_world/NOTES.md#2025-04-06_snippet_1\n\nLANGUAGE: logtalk\nCODE:\n```\nlogtalk_load(hello_world(loader)).\n```\n\n----------------------------------------\n\nTITLE: Example of Message Sending in Logtalk\nDESCRIPTION: Demonstrates how to use the message sending construct to call the member/2 predicate on the list object with a list of numbers.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/refman/control/send_to_object_2.rst.txt#2025-04-06_snippet_2\n\nLANGUAGE: Logtalk\nCODE:\n```\n| ?- list::member(X, [1, 2, 3]).\n\nX = 1 ;\nX = 2 ;\nX = 3\nyes\n```\n\n----------------------------------------\n\nTITLE: Sending Priority Messages to Queue\nDESCRIPTION: Sends multiple messages to the pmq priority queue with different priority levels (first number) and content (second value).\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/engines/pmq/NOTES.md#2025-04-06_snippet_2\n\nLANGUAGE: logtalk\nCODE:\n```\npmq::(send(13-let), send(5-out), send(11-the), send(17-who), send(7-dogs)).\n```\n\n----------------------------------------\n\nTITLE: Setting Flag Values with Old Value Return - Logtalk\nDESCRIPTION: Predicate to set a flag value while returning the old value. Takes flag name, old value and new value arguments.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/flags_0.rst.txt#2025-04-06_snippet_2\n\nLANGUAGE: logtalk\nCODE:\n```\nset_flag_value(Flag,OldValue,NewValue)\n```\n\n----------------------------------------\n\nTITLE: Advanced Loader File with Multiple Configurations\nDESCRIPTION: Complex loader file example showing flag settings and multiple file loads with different compiler options.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/userman/programming.rst.txt#2025-04-06_snippet_8\n\nLANGUAGE: prolog\nCODE:\n```\n:- initialization((\n    % set project-specific global flags\n    set_logtalk_flag(source_data, off),\n    % load the project source files\n    logtalk_load(\n        [source1, source2, source3],\n        % source file-specific flags\n        [portability(warning)]),\n    logtalk_load(\n        [source4, source5],\n        % source file-specific flags\n        [portability(silent)])\n)).\n```\n\n----------------------------------------\n\nTITLE: Establishing Agent Friendship\nDESCRIPTION: Creates a friendship connection between the Paul and Nathalie agents.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/threads/birthdays/NOTES.md#2025-04-06_snippet_2\n\nLANGUAGE: logtalk\nCODE:\n```\npaul::new_friend(nathalie).\n```\n\n----------------------------------------\n\nTITLE: Defining Table of Contents for Logtalk User Manual in reStructuredText\nDESCRIPTION: This snippet uses the reStructuredText toctree directive to define the structure of the Logtalk user manual. It specifies a maximum depth of 2 and lists the various sections of the manual.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/userman/index.rst#2025-04-06_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. toctree::\n   :maxdepth: 2\n\n   declarative\n   features\n   nomenclature\n   messages\n   objects\n   protocols\n   categories\n   predicates\n   inheritance\n   events\n   threads\n   errors\n   reflection\n   programming\n   printing\n   expansion\n   documenting\n   debugging\n   performance\n   installing\n   migration\n```\n\n----------------------------------------\n\nTITLE: Reproducing Sequences of Arbitrary Terms in Logtalk\nDESCRIPTION: Example of using get_seed/1 and set_seed/1 to reproduce sequences of arbitrary values for debugging and testing purposes.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/libraries/arbitrary.rst#2025-04-06_snippet_12\n\nLANGUAGE: prolog\nCODE:\n```\n| ?- type::get_seed(Seed).\nSeed = seed(3172, 9814, 20125)\nyes\n\n| ?- type::arbitrary(integer, Arbitrary).\nArbitrary = -816\nyes\n\n| ?- type::arbitrary(integer, Arbitrary).\nArbitrary = -113\nyes\n\n| ?- type::arbitrary(integer, Arbitrary).\nArbitrary = 446\n\n| ?- type::set_seed(seed(3172, 9814, 20125)).\nyes\n\n| ?- type::arbitrary(integer, Arbitrary).\nArbitrary = -816\nyes\n\n| ?- type::arbitrary(integer, Arbitrary).\nArbitrary = -113\nyes\n\n| ?- type::arbitrary(integer, Arbitrary).\nArbitrary = 446\nyes\n```\n\n----------------------------------------\n\nTITLE: Querying Parametric Object Product in Logtalk\nDESCRIPTION: Retrieves the seats property from the car object created with the parametric builder.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/design_patterns/creational/builder/NOTES.md#2025-04-06_snippet_3\n\nLANGUAGE: logtalk\nCODE:\n```\ncar(3, 2, red)::seats(Seats).\n```\n\n----------------------------------------\n\nTITLE: Configuring Jupyter Notebook for Logtalk\nDESCRIPTION: YAML configuration for a Jupyter notebook to use Logtalk. It specifies the file format, Jupytext version, and kernel settings for Logtalk.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/coinduction/NOTES.md#2025-04-06_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\njupyter:\n  jupytext:\n    text_representation:\n      extension: .md\n      format_name: markdown\n      format_version: '1.3'\n      jupytext_version: 1.16.7\n  kernelspec:\n    display_name: Logtalk\n    language: logtalk\n    name: logtalk_kernel\n---\n```\n\n----------------------------------------\n\nTITLE: Loading Template Method Design Pattern Implementation\nDESCRIPTION: Loads the sample implementation of the Template Method design pattern from the specified location.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/design_patterns/behavioral/template_method/NOTES.md#2025-04-06_snippet_1\n\nLANGUAGE: logtalk\nCODE:\n```\nlogtalk_load(design_patterns('behavioral/template_method/loader')).\n```\n\n----------------------------------------\n\nTITLE: Internal Implementation Pattern\nDESCRIPTION: Shows the equivalent sequence of goals used internally when calling representation_error/1.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/refman/methods/representation_error_1.rst#2025-04-06_snippet_1\n\nLANGUAGE: prolog\nCODE:\n```\n...,\ncontext(Context),\nthrow(error(representation_error(Flag), Context)).\n```\n\n----------------------------------------\n\nTITLE: Test Dialect with Options in Logtalk\nDESCRIPTION: Illustrates a test dialect that supports individual condition, setup, or cleanup goals for tests.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/devtools/lgtunit.rst#2025-04-06_snippet_12\n\nLANGUAGE: Logtalk\nCODE:\n```\ntest(Test, Outcome, Options) :- Goal.\n```\n\n----------------------------------------\n\nTITLE: Insert Dictionary Entry\nDESCRIPTION: Inserts or updates a key-value pair by traversing nested keys.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/nested_dictionary_protocol_0.rst.txt#2025-04-06_snippet_7\n\nLANGUAGE: logtalk\nCODE:\n```\ninsert_in(OldDictionary,Keys,Value,NewDictionary)\n```\n\n----------------------------------------\n\nTITLE: Using Multifile Non-Terminal nt//1\nDESCRIPTION: Demonstrates use of the multifile non-terminal nt//1 with phrase/3 for list processing, showing different pattern matching cases.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/multifile/NOTES.md#2025-04-06_snippet_3\n\nLANGUAGE: logtalk\nCODE:\n```\nlogtalk << phrase(main::nt(X), [1,2,3], Rest).\n```\n\n----------------------------------------\n\nTITLE: Goal Expansion Examples\nDESCRIPTION: Example implementations showing how to expand write/1 to write_term/2 with newline and read/1 to include a prompt.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/refman/methods/goal_expansion_2.rst#2025-04-06_snippet_2\n\nLANGUAGE: logtalk\nCODE:\n```\ngoal_expansion(write(Term), (write_term(Term, []), nl)).\ngoal_expansion(read(Term), (write('Input: '), {read(Term)})).\n```\n\n----------------------------------------\n\nTITLE: Writing Graph Footer in Logtalk\nDESCRIPTION: Writes a graph footer using the specified options. Takes a stream or alias, atom identifier, label, kind, and a list of compound options as input.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/graph_language_protocol_0.rst.txt#2025-04-06_snippet_4\n\nLANGUAGE: Logtalk\nCODE:\n```\ngraph_footer(Stream,Identifier,Label,Kind,Options)\n```\n\n----------------------------------------\n\nTITLE: Creating SICStus Prolog Pre-compiled Version of 'sleepy' Example\nDESCRIPTION: This snippet demonstrates how to create a SICStus Prolog pre-compiled version of the 'sleepy' text adventure example. It uses the sicstus_logtalk_po.sh script to generate pre-compiled files and shows how to load and run the example.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/scripts/embedding/SCRIPT.txt#2025-04-06_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\n$ cd \"$LOGTALKHOME/scripts/embedding/sicstus/\"\n$ ./sicstus_logtalk_po.sh -c -d \"$HOME\"/collect -l \"$LOGTALKUSER/examples/adventure/sleepy.lgt\"\n$ cd ~/collect\n$ sicstus --goal \"load_files(['logtalk.po','application.po']).\"\n| ?- sleepy::start.\n```\n\n----------------------------------------\n\nTITLE: Finding Root Using Bisection Method for Function f2\nDESCRIPTION: Demonstrates using the bisection method to find the root of function f2 in the range [1.0, 1.3] with a tolerance of 1.0e-15.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/threads/functions/NOTES.md#2025-04-06_snippet_5\n\nLANGUAGE: logtalk\nCODE:\n```\nbisection::find_root(f2, 1.0, 1.3, 1.0e-15, Zero).\n```\n\n----------------------------------------\n\nTITLE: Using Object-Defined Operator in Functor Notation\nDESCRIPTION: Shows how to correctly use an operator defined within an object by using standard functor notation instead of infix notation.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/operators/NOTES.md#2025-04-06_snippet_3\n\nLANGUAGE: logtalk\nCODE:\n```\n%%table\ndouble::double(I, J).\n```\n\n----------------------------------------\n\nTITLE: Defining Arbitrary Maximum Size in Logtalk\nDESCRIPTION: Multifile predicate declaration and definition that sets the maximum size limit to 7. When multiple definitions exist, the first valid one is used, with a default fallback value of 42.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/libraries/arbitrary.rst#2025-04-06_snippet_13\n\nLANGUAGE: logtalk\nCODE:\n```\n:- multifile(arbitrary::max_size/1).\narbitrary::max_size(7).\n```\n\n----------------------------------------\n\nTITLE: Loading Prolog Code with Object Wrapper Hook\nDESCRIPTION: This snippet demonstrates how to load Prolog code using the object_wrapper_hook, enabling source data for metric analysis in Logtalk.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/devtools/code_metrics.rst#2025-04-06_snippet_7\n\nLANGUAGE: prolog\nCODE:\n```\n| ?- logtalk_load(code, [hook(object_wrapper_hook), source_data(on)]).\n```\n\n----------------------------------------\n\nTITLE: Declaring Alias Directive Syntax in Logtalk\nDESCRIPTION: Shows the basic syntax patterns for declaring aliases for predicates and grammar rule non-terminals. Supports both Name/Arity as Alias/Arity and Name//Arity as Alias//Arity formats.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/refman/directives/alias_2.rst.txt#2025-04-06_snippet_0\n\nLANGUAGE: logtalk\nCODE:\n```\nalias(Entity, [Name/Arity as Alias/Arity, ...])\nalias(Entity, [Name//Arity as Alias//Arity, ...])\n```\n\n----------------------------------------\n\nTITLE: Reading a Line from Text Stream to Characters in Logtalk\nDESCRIPTION: Reads a line from a text stream into a list of characters, discarding end-of-line characters. Returns 'end_of_file' atom when reaching the end of file.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/reader_0.rst.txt#2025-04-06_snippet_16\n\nLANGUAGE: Logtalk\nCODE:\n```\nline_to_chars(Stream,Chars)\n```\n\n----------------------------------------\n\nTITLE: Installing Package by Name in Logtalk\nDESCRIPTION: Predicate for installing a package by name only, if the name is unique across all registries.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/packs_0.rst.txt#2025-04-06_snippet_3\n\nLANGUAGE: logtalk\nCODE:\n```\ninstall(Pack)\n```\n\n----------------------------------------\n\nTITLE: Meta-predicate Template Definition\nDESCRIPTION: Specifies the meta-predicate template for once/1, indicating it takes a goal argument (0).\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/refman/methods/once_1.rst.txt#2025-04-06_snippet_1\n\nLANGUAGE: logtalk\nCODE:\n```\nonce(0)\n```\n\n----------------------------------------\n\nTITLE: Defining Parametric Test Object in Logtalk\nDESCRIPTION: Example of creating a parametric test object that extends lgtunit to test multiple implementations of a protocol.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/devtools/lgtunit.rst.txt#2025-04-06_snippet_1\n\nLANGUAGE: logtalk\nCODE:\n```\n:- object(tests(_RandomObject_),\n    extends(lgtunit)).\n\n    :- uses(_RandomObject_, [\n        random/1, between/3, member/2,\n        ...\n    ]).\n\n    test(between_3_in_interval) :-\n        between(1, 10, Random),\n        1 =< Random, Random =< 10.\n\n    ...\n\n:- end_object.\n```\n\n----------------------------------------\n\nTITLE: Creating Table of Contents Structure in reStructuredText\nDESCRIPTION: This snippet defines the structure of the FAQ documentation using reStructuredText toctree directive. It creates a hierarchical table of contents with a maximum depth of 2 levels, listing various FAQ categories.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/faq/index.rst.txt#2025-04-06_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n===\nFAQ\n===\n\n.. toctree::\n   :maxdepth: 2\n\n   general\n   compatibility\n   installation\n   portability\n   programming\n   troubleshooting\n   usability\n   deployment\n   performance\n   licensing\n   support\n```\n\n----------------------------------------\n\nTITLE: Executing Bank Transfer\nDESCRIPTION: Performs a bank transfer of 100 units from John's account to Jane's account.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/aspects/NOTES.md#2025-04-06_snippet_2\n\nLANGUAGE: logtalk\nCODE:\n```\nbank::transfer(john, jane, 100).\n```\n\n----------------------------------------\n\nTITLE: Fixed Implementation of every_other/2\nDESCRIPTION: Corrected implementation of the every_other/2 predicate that properly handles lists with odd number of elements.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/tools/lgtunit/NOTES.md#2025-04-06_snippet_19\n\nLANGUAGE: prolog\nCODE:\n```\nevery_other([], []).\nevery_other([H| T], L) :-\n\tevery_other(T, H, L).\n\nevery_other([], X, [X]).\nevery_other([_| T], X, [X| L]) :-\n\tevery_other(T, L).\n```\n\n----------------------------------------\n\nTITLE: Calculating Circle Area Using Class Method\nDESCRIPTION: This snippet demonstrates the use of the 'area/2' class method to calculate the area of a circle given its radius.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/classmethods/NOTES.md#2025-04-06_snippet_2\n\nLANGUAGE: logtalk\nCODE:\n```\ncircle::area(1.0, Area).\n```\n\n----------------------------------------\n\nTITLE: RST Table of Contents for Logtalk Built-in Methods\nDESCRIPTION: Sphinx documentation toctree directive that organizes Logtalk built-in methods documentation into logical categories for navigation\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/refman/methods/index.rst#2025-04-06_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. toctree::\n   :maxdepth: 2\n\n   logic_and_control_methods\n   context_methods\n   reflection_methods\n   database_methods\n   meta_call_methods\n   error_handling_methods\n   solution_methods\n   event_methods\n   forwarding_methods\n   dcg_methods\n   expansion_methods\n   coinduction_methods\n   printing_methods\n   asking_methods\n```\n\n----------------------------------------\n\nTITLE: Specifying Modes and Proofs for expand_goal/2 in Prolog\nDESCRIPTION: Defines the modes and number of proofs for the expand_goal/2 method. It indicates that both arguments can be either input or output (represented by ?term), and the method provides only one proof.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/refman/methods/expand_goal_2.rst.txt#2025-04-06_snippet_1\n\nLANGUAGE: prolog\nCODE:\n```\nexpand_goal(?term, ?term) - one\n```\n\n----------------------------------------\n\nTITLE: Querying tabled path finding predicate\nDESCRIPTION: Demonstrates the use of tabling to handle a left-recursive path finding predicate. The order of solutions may depend on the tabling strategy.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/tabling/NOTES.md#2025-04-06_snippet_2\n\nLANGUAGE: logtalk\nCODE:\n```\npaths::path(1, Y).\n```\n\n----------------------------------------\n\nTITLE: Using Dynamic State Builder in Logtalk\nDESCRIPTION: Uses the dynamically created builder to construct a car with specific properties.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/design_patterns/creational/builder/NOTES.md#2025-04-06_snippet_5\n\nLANGUAGE: logtalk\nCODE:\n```\no2::(set_wheels(3), set_seats(2), set_color(red), get_result(Car)).\n```\n\n----------------------------------------\n\nTITLE: Asserting and querying local predicate in descendant object\nDESCRIPTION: Shows how asserting a local definition for p/1 in the descendant object overrides the inherited definition.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/dynpred/NOTES.md#2025-04-06_snippet_3\n\nLANGUAGE: logtalk\nCODE:\n```\ndescendant::(assertz(p(descendant)), p(Value)).\n```\n\n----------------------------------------\n\nTITLE: Testing Non-deterministic Predicates with all/1 in Logtalk\nDESCRIPTION: Shows how to test non-deterministic predicates to ensure that all solutions satisfy a given assertion using the all/1 outcome.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/devtools/lgtunit.rst#2025-04-06_snippet_31\n\nLANGUAGE: logtalk\nCODE:\n```\n   test(atom_list, all(atom(Item))) :-\n       member(Item, [a, b, c]).\n```\n\n----------------------------------------\n\nTITLE: Testing Non-deterministic Predicates with all/1 in Logtalk\nDESCRIPTION: Shows how to test non-deterministic predicates to ensure that all solutions satisfy a given assertion using the all/1 outcome.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/devtools/lgtunit.rst#2025-04-06_snippet_31\n\nLANGUAGE: logtalk\nCODE:\n```\n   test(atom_list, all(atom(Item))) :-\n       member(Item, [a, b, c]).\n```\n\n----------------------------------------\n\nTITLE: Installing RedHat Dependencies\nDESCRIPTION: Commands for installing tool dependencies on RedHat Linux.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/devtools/overview.rst.txt#2025-04-06_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\n$ sudo dnf install graphviz\n$ sudo dnf install texinfo pandoc\n$ sudo dnf install libxslt fop\n$ sudo dnf install bsdtar gnupg2 git curl wget direnv\n```\n\n----------------------------------------\n\nTITLE: Loading the Iterator Design Pattern Implementation\nDESCRIPTION: Loads the Iterator design pattern sample implementation from the Logtalk design patterns library.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/design_patterns/behavioral/iterator/NOTES.md#2025-04-06_snippet_1\n\nLANGUAGE: logtalk\nCODE:\n```\nlogtalk_load(design_patterns('behavioral/iterator/loader')).\n```\n\n----------------------------------------\n\nTITLE: Defining ReStructuredText Documentation Structure\nDESCRIPTION: ReStructuredText markup defining the documentation structure for Logtalk's all-solutions methods, including a table of contents directive listing the available methods.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/refman/methods/solution_methods.rst#2025-04-06_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. _solutions_methods:\n\nAll solutions\n=============\n\n.. toctree::\n   :maxdepth: 1\n\n   bagof_3\n   findall_3\n   findall_4\n   forall_2\n   setof_3\n```\n\n----------------------------------------\n\nTITLE: Defining Capitals Object in Logtalk\nDESCRIPTION: Logtalk code defining a 'capitals' object with predicates for storing country and capital information.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/apache_poi/NOTES.md#2025-04-06_snippet_6\n\nLANGUAGE: logtalk\nCODE:\n```\n:- object(capitals).\n\n    :- public([\n\t\tcapitals/4,\n\t\tcapitals/5\n\t]).\n\n\t% continents\n\tcapitals(europe, 0, 0, 3).\n\tcapitals(africa, 1, 0, 3).\n\t% europe\n\tcapitals(0, 0, 0, string, 'Country').\n\tcapitals(0, 0, 1, string, 'Capital').\n\tcapitals(0, 1, 0, string, 'Portugal').\n\tcapitals(0, 1, 1, string, 'Lisboa').\n\tcapitals(0, 2, 0, string, 'Spain').\n\tcapitals(0, 2, 1, string, 'Madrid').\n\tcapitals(0, 3, 0, string, 'France').\n\tcapitals(0, 3, 1, string, 'Paris').\n\t% africa\n\tcapitals(1, 0, 0, string, 'Country').\n\tcapitals(1, 0, 1, string, 'Capital').\n\tcapitals(1, 1, 0, string, 'Angola').\n \tcapitals(1, 1, 1, string, 'Luanda').\n\tcapitals(1, 2, 0, string, 'Egypt').\n\tcapitals(1, 2, 1, string, 'Cairo').\n\tcapitals(1, 3, 0, string, 'Cape Verde').\n\tcapitals(1, 3, 1, string, 'Praia').\n\n:- end_object.\n```\n\n----------------------------------------\n\nTITLE: Setting Global Debug Flag\nDESCRIPTION: Command to enable debugging globally by setting the debug flag to on.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/devtools/debugger.rst.txt#2025-04-06_snippet_3\n\nLANGUAGE: logtalk\nCODE:\n```\n| ?- set_logtalk_flag(debug, on).\n```\n\n----------------------------------------\n\nTITLE: Demonstrating a non-null dog object behavior\nDESCRIPTION: Shows how a regular dog object responds to the make_sound predicate with its specific implementation.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/design_patterns/behavioral/null_object/NOTES.md#2025-04-06_snippet_2\n\nLANGUAGE: logtalk\nCODE:\n```\ndog::make_sound.\n```\n\n----------------------------------------\n\nTITLE: Specifying Modes for current_logtalk_flag/2 in Prolog\nDESCRIPTION: Specifies the modes and number of proofs for the current_logtalk_flag/2 predicate. It indicates that both arguments can be either input (bound) or output (unbound) and that the predicate can succeed zero or more times.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/refman/predicates/current_logtalk_flag_2.rst#2025-04-06_snippet_1\n\nLANGUAGE: Prolog\nCODE:\n```\ncurrent_logtalk_flag(?atom, ?atom) - zero_or_more\n```\n\n----------------------------------------\n\nTITLE: Employee Parametric Object Salary Update\nDESCRIPTION: Gives a salary raise to an employee using the give_raise/2 method that returns a new parametric object with updated salary.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/parametric/NOTES.md#2025-04-06_snippet_11\n\nLANGUAGE: logtalk\nCODE:\n```\nemployee(sally, 21, 1200)::give_raise(250, NewId).\n```\n\n----------------------------------------\n\nTITLE: Starting XPCE File Viewer in Logtalk\nDESCRIPTION: This code snippet starts the XPCE file viewer application. It uses the view object to call the file_viewer/1 predicate, passing the home directory as an argument.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/xpce/NOTES.md#2025-04-06_snippet_2\n\nLANGUAGE: logtalk\nCODE:\n```\nview::file_viewer('$HOME').\n```\n\n----------------------------------------\n\nTITLE: Simulating Search Button Click in Logtalk\nDESCRIPTION: Demonstrates the interaction of the 'search' button object with the mediator by simulating a click event.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/design_patterns/behavioral/mediator/NOTES.md#2025-04-06_snippet_4\n\nLANGUAGE: logtalk\nCODE:\n```\nsearch_button::click.\n```\n\n----------------------------------------\n\nTITLE: Testing Fourth Diamond Problem Variant\nDESCRIPTION: Sends message m/0 to object d4, demonstrating a variant where both inherited method definitions are used.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/diamonds/NOTES.md#2025-04-06_snippet_8\n\nLANGUAGE: logtalk\nCODE:\n```\nd4::m.\n```\n\n----------------------------------------\n\nTITLE: Generating Version 1 UUID as Character List in Logtalk\nDESCRIPTION: Generates a version 1 UUID as a list of characters using the uuid(chars)::uuid_v1/2 predicate.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/libraries/uuid.rst.txt#2025-04-06_snippet_3\n\nLANGUAGE: Prolog\nCODE:\n```\n| ?- uuid(chars)::uuid_v1([0xf2,0xd1,0x90,0x94,0xdc,0x4b], UUID).\nUUID = ['0','0',d,e,'9','0',c,'0',-,'8','2',c,f,-,'1','1',e,b,-,\n           a,'9','8','5',-,f,'2',d,'1','9','0','9','4',d,c,'4',b]\nyes\n```\n\n----------------------------------------\n\nTITLE: Defining Private Predicate for CHR Interpreter in Logtalk\nDESCRIPTION: Declares a private predicate chr_rule_/1 for internal use in the CHR interpreter. This predicate is marked as dynamic, allowing for runtime modifications.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/toychrdb_0.rst.txt#2025-04-06_snippet_2\n\nLANGUAGE: Logtalk\nCODE:\n```\nchr_rule_/1\n```\n\n----------------------------------------\n\nTITLE: Loading the Integration2D Example Module\nDESCRIPTION: Loads the integration2d module which contains the implementation of the quadrature methods for numerical integration.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/threads/integration2d/NOTES.md#2025-04-06_snippet_1\n\nLANGUAGE: logtalk\nCODE:\n```\nlogtalk_load(integration2d(loader)).\n```\n\n----------------------------------------\n\nTITLE: Examples of Using current_op/3 in Logtalk\nDESCRIPTION: Demonstrates various ways to call the current_op/3 method, including enumerating local operators, operators visible in self, and public operators visible for an explicit object.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/refman/methods/current_op_3.rst#2025-04-06_snippet_2\n\nLANGUAGE: logtalk\nCODE:\n```\ncurrent_op(Priority, Specifier, Operator)\n```\n\nLANGUAGE: logtalk\nCODE:\n```\n::current_op(Priority, Specifier, Operator)\n```\n\nLANGUAGE: logtalk\nCODE:\n```\nObject::current_op(Priority, Specifier, Operator)\n```\n\n----------------------------------------\n\nTITLE: Loading Git Object in Logtalk\nDESCRIPTION: Instruction for loading the 'git' object in Logtalk. This is required to use the predicates provided by the object.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/git_0.rst.txt#2025-04-06_snippet_0\n\nLANGUAGE: Logtalk\nCODE:\n```\nlogtalk_load(git(loader))\n```\n\n----------------------------------------\n\nTITLE: Usage Examples of phrase/2 in Logtalk\nDESCRIPTION: Demonstrates three common usage patterns for the phrase/2 method: parsing with a local non-terminal, with a non-terminal in the scope of self, and with a public non-terminal of an explicit object.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/refman/methods/phrase_2.rst.txt#2025-04-06_snippet_3\n\nLANGUAGE: logtalk\nCODE:\n```\nphrase(NonTerminal, Input)\nphrase(::NonTerminal, Input)\nphrase(Object::NonTerminal, Input)\n```\n\n----------------------------------------\n\nTITLE: Querying Events with current_event/5 in Logtalk\nDESCRIPTION: Demonstrates how to use the current_event/5 predicate to enumerate all events monitored by a specific object (in this case, the 'debugger' object). This query will backtrack through all matching events.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/refman/predicates/current_event_5.rst.txt#2025-04-06_snippet_2\n\nLANGUAGE: Prolog\nCODE:\n```\n| ?- current_event(Event, Object, Message, Sender, debugger).\n```\n\n----------------------------------------\n\nTITLE: Extensions List Predicate\nDESCRIPTION: Returns a list containing all direct descendants of an object. Takes a single parameter Extensions that returns the list of descendant objects.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/proto_hierarchyp_0.rst.txt#2025-04-06_snippet_3\n\nLANGUAGE: logtalk\nCODE:\n```\nextensions(-list)\n```\n\n----------------------------------------\n\nTITLE: Loading and Testing Debug Messages\nDESCRIPTION: Example queries showing how to load and test the debug message functionality without any debug messages enabled.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/devtools/debug_messages.rst.txt#2025-04-06_snippet_3\n\nLANGUAGE: prolog\nCODE:\n```\n| ?- {debug_messages(loader), foo}.\n...\nyes\n\n| ?- foo::(bar, baz).\nyes\n```\n\n----------------------------------------\n\nTITLE: Retrieving Time Component from Parametric xyzt Object in Logtalk\nDESCRIPTION: Retrieves the time component from a specific parametric xyzt object, showing inheritance of the time predicate from t.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/mi/NOTES.md#2025-04-06_snippet_7\n\nLANGUAGE: logtalk\nCODE:\n```\nxyzt(2,3,4,7)::time(T).\n```\n\n----------------------------------------\n\nTITLE: Format to Character Codes List Predicate (4-arg)\nDESCRIPTION: Writes formatted output to a list of character codes with specified tail list using a format string and arguments list.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/term_io_protocol_0.rst.txt#2025-04-06_snippet_10\n\nLANGUAGE: logtalk\nCODE:\n```\nformat_to_codes(Format,Arguments,Codes,Tail)\n```\n\n----------------------------------------\n\nTITLE: Object Directives Syntax in Logtalk using BNF\nDESCRIPTION: Specifies directives that can appear within object definitions, such as initialization directives.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/refman/grammar.rst.txt#2025-04-06_snippet_25\n\nLANGUAGE: bnf\nCODE:\n```\nobject_directive ::=\n   \":- initialization(\" callable \").\"\n```\n\n----------------------------------------\n\nTITLE: Calculating Average Value in World2\nDESCRIPTION: Example of using the inheritance approach to query the 'average' predicate in the world2 object, which calculates the average of values in that world's dataset.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/design_patterns/ai/many_worlds/NOTES.md#2025-04-06_snippet_3\n\nLANGUAGE: logtalk\nCODE:\n```\nworld2::average(Average).\n```\n\n----------------------------------------\n\nTITLE: Multifile Predicate Declaration in Logtalk Protocols\nDESCRIPTION: The compiler now detects and reports attempts to declare multifile predicates in protocols.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/RELEASE_NOTES.md#2025-04-06_snippet_95\n\nLANGUAGE: Logtalk\nCODE:\n```\nmultifile/1\n```\n\n----------------------------------------\n\nTITLE: Get Local Message - Prototype\nDESCRIPTION: Demonstrates calling the local/1 predicate on the prototype object using self message.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/self_messages/NOTES.md#2025-04-06_snippet_3\n\nLANGUAGE: logtalk\nCODE:\n```\nprototype::get_local(Local).\n```\n\n----------------------------------------\n\nTITLE: FCube Decision Predicate with Return Value\nDESCRIPTION: Predicate that applies the prover to a given formula and returns its counter-model as a compound term.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/fcube_0.rst.txt#2025-04-06_snippet_3\n\nLANGUAGE: logtalk\nCODE:\n```\ndecide(Formula,CounterModel)\n```\n\n----------------------------------------\n\nTITLE: Example Usage of resource_error/1 in Logtalk\nDESCRIPTION: An example showing how to use resource_error/1 to signal that a resource (gas) is not available when a tank is empty.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/refman/methods/resource_error_1.rst#2025-04-06_snippet_3\n\nLANGUAGE: logtalk\nCODE:\n```\n...,\nempty(Tank),\nresource_error(gas).\n```\n\n----------------------------------------\n\nTITLE: Recursively Processing Logtalk Library\nDESCRIPTION: Recursively processes a library of source files using the given options. It has a static compilation flag and accepts a library name and list of options as arguments.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/code_metric_0.rst.txt#2025-04-06_snippet_3\n\nLANGUAGE: Logtalk\nCODE:\n```\nprocess_rlibrary(Library,Options)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Object Ancestors in a Hierarchy\nDESCRIPTION: Retrieves the ancestor objects of a red_circle object in the inheritance hierarchy.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/sicstus/NOTES.md#2025-04-06_snippet_6\n\nLANGUAGE: logtalk\nCODE:\n```\nred_circle(3)::ancestors(As).\n```\n\n----------------------------------------\n\nTITLE: Decoding Morse Code Messages with DCG in Logtalk\nDESCRIPTION: Uses the morse object to decode a Morse code message using DCG rules and the Logtalk built-in object.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/dcgs/NOTES.md#2025-04-06_snippet_3\n\nLANGUAGE: logtalk\nCODE:\n```\nlogtalk << phrase(morse::morse(Message), \"... --- ...\").\n```\n\n----------------------------------------\n\nTITLE: Logtalk Message Cache Predicate Definition\nDESCRIPTION: Defines a dynamic predicate that caches messages emitted by the lgtunit tool during test execution. The predicate uses the callable mode and can return zero or more proofs.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/xunit_net_v2_output_0.rst.txt#2025-04-06_snippet_0\n\nLANGUAGE: logtalk\nCODE:\n```\nmessage_cache_/1\n```\n\n----------------------------------------\n\nTITLE: End Category Directive Syntax\nDESCRIPTION: Shows the basic syntax for the end_category directive used to terminate a category definition\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/refman/directives/end_category_0.rst.txt#2025-04-06_snippet_0\n\nLANGUAGE: logtalk\nCODE:\n```\nend_category\n```\n\n----------------------------------------\n\nTITLE: Loading the HTML Library\nDESCRIPTION: Command to load all entities in the HTML library\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/libraries/html.rst#2025-04-06_snippet_3\n\nLANGUAGE: prolog\nCODE:\n```\n| ?- logtalk_load(html(loader)).\n```\n\n----------------------------------------\n\nTITLE: Threaded Engine Destroy Signature\nDESCRIPTION: Basic signature and syntax for the threaded_engine_destroy/1 predicate that stops and destroys an engine.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/refman/predicates/threaded_engine_destroy_1.rst.txt#2025-04-06_snippet_0\n\nLANGUAGE: prolog\nCODE:\n```\nthreaded_engine_destroy(Engine)\n```\n\n----------------------------------------\n\nTITLE: Generating Coverage Report with Source Code Links\nDESCRIPTION: Demonstrates how to generate a coverage report with links to source code hosted on GitHub using xsltproc.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/devtools/lgtunit.rst.txt#2025-04-06_snippet_51\n\nLANGUAGE: bash\nCODE:\n```\n$ xsltproc \\\n  --stringparam url https://github.com/LogtalkDotOrg/logtalk3/blob/master \\\n  -o coverage_report.html coverage_report.xml\n```\n\n----------------------------------------\n\nTITLE: Benchmarking Goals with Result in Logtalk\nDESCRIPTION: Benchmarks a goal and returns the total execution time in seconds plus its result (success, failure, or error). Uses CPU clock.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/lgtunit_0.rst.txt#2025-04-06_snippet_16\n\nLANGUAGE: logtalk\nCODE:\n```\nbenchmark_reified(Goal,Time,Result)\n```\n\n----------------------------------------\n\nTITLE: Specifying usage modes for fail/0 method in Logtalk\nDESCRIPTION: Defines the usage mode for the fail/0 method, indicating it always fails and provides exactly one proof (attempt).\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/refman/methods/fail_0.rst.txt#2025-04-06_snippet_1\n\nLANGUAGE: logtalk\nCODE:\n```\nfail - one\n```\n\n----------------------------------------\n\nTITLE: Loading the Dependents Library in Logtalk\nDESCRIPTION: Command to load all entities in the dependents library using the loader utility file. This Logtalk query loads the library components in a Logtalk environment.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/library/dependents/NOTES.md#2025-04-06_snippet_0\n\nLANGUAGE: logtalk\nCODE:\n```\n| ?- logtalk_load(dependents(loader)).\n```\n\n----------------------------------------\n\nTITLE: Testing ToyCHR Port in Logtalk\nDESCRIPTION: Command to load and run tests for the ToyCHR port predicates using the tester.lgt file. This should be executed in a Logtalk environment.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/ports/toychr.rst.txt#2025-04-06_snippet_1\n\nLANGUAGE: Prolog\nCODE:\n```\n| ?- logtalk_load(toychr(tester)).\n```\n\n----------------------------------------\n\nTITLE: Loading Optionals Library in Logtalk\nDESCRIPTION: This snippet demonstrates how to load all entities in the optionals library using the loader.lgt file.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/libraries/optionals.rst#2025-04-06_snippet_0\n\nLANGUAGE: Prolog\nCODE:\n```\n| ?- logtalk_load(optionals(loader)).\n```\n\n----------------------------------------\n\nTITLE: Loading the Heaps Library in Logtalk\nDESCRIPTION: Command to load all entities in the heaps library using the loader.lgt file.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/libraries/heaps.rst#2025-04-06_snippet_0\n\nLANGUAGE: prolog\nCODE:\n```\n| ?- logtalk_load(heaps(loader)).\n```\n\n----------------------------------------\n\nTITLE: Defining Modes and Number of Proofs for context/1 in Logtalk\nDESCRIPTION: Specification for the context/1 method indicating it outputs a callable term and returns one proof.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/refman/methods/context_1.rst#2025-04-06_snippet_1\n\nLANGUAGE: logtalk\nCODE:\n```\ncontext(--callable) - one\n```\n\n----------------------------------------\n\nTITLE: Parsing Hexadecimal Digit Sequence in Logtalk\nDESCRIPTION: Parses a sequence of zero or more hexadecimal digits. Accepts a list of atomic values as input or output. Returns one proof.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/number_grammars_1.rst.txt#2025-04-06_snippet_5\n\nLANGUAGE: Logtalk\nCODE:\n```\nhex_digits(HexDigits)\n```\n\n----------------------------------------\n\nTITLE: Basic Threaded Call in Logtalk\nDESCRIPTION: Example of making an asynchronous call to a method without waiting for a reply.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/userman/threads.rst#2025-04-06_snippet_6\n\nLANGUAGE: logtalk\nCODE:\n```\n..., threaded_ignore(agent::happy_birthday), ...\n```\n\n----------------------------------------\n\nTITLE: Print Version Information\nDESCRIPTION: Prints the versions of Logtalk, Prolog backend, and kernel if running as a notebook.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/bench/NOTES.md#2025-04-06_snippet_0\n\nLANGUAGE: logtalk\nCODE:\n```\n%versions\n```\n\n----------------------------------------\n\nTITLE: Defining List Protocol in Logtalk\nDESCRIPTION: Creates a protocol that defines the interface for list operations. Shows basic protocol structure with public predicate declarations.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/tutorial/lists.rst#2025-04-06_snippet_1\n\nLANGUAGE: logtalk\nCODE:\n```\n:- protocol(listp).\n\n    :- public([\n        append/3, length/2, member/2\n    ]).\n\n:- end_protocol.\n```\n\n----------------------------------------\n\nTITLE: Tracking Referenced Modules in Logtalk Diagram\nDESCRIPTION: Dynamic predicate maintaining a table of referenced Prolog modules in the diagram, including the referencer and the referenced module.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/entity_diagram_1.rst.txt#2025-04-06_snippet_5\n\nLANGUAGE: Logtalk\nCODE:\n```\nreferenced_module_(Referencer,Entity)\n```\n\n----------------------------------------\n\nTITLE: Basic Ackermann Function Queries\nDESCRIPTION: Demonstrates basic usage of the Ackermann function with different input parameters.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/ack/NOTES.md#2025-04-06_snippet_2\n\nLANGUAGE: logtalk\nCODE:\n```\nack::ack(2, 4, V).\n```\n\nLANGUAGE: logtalk\nCODE:\n```\nack::ack(3, 3, V).\n```\n\nLANGUAGE: logtalk\nCODE:\n```\nack::ack(3, 4, V).\n```\n\n----------------------------------------\n\nTITLE: Loading Command Pattern Implementation\nDESCRIPTION: Loads the design pattern sample implementation from the behavioral/command directory.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/design_patterns/behavioral/command/NOTES.md#2025-04-06_snippet_1\n\nLANGUAGE: logtalk\nCODE:\n```\nlogtalk_load(design_patterns('behavioral/command/loader')).\n```\n\n----------------------------------------\n\nTITLE: Generating Version 1 UUID as Character List in Logtalk\nDESCRIPTION: Generates a version 1 UUID as a list of characters using the uuid(chars)::uuid_v1/2 predicate.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/libraries/uuid.rst.txt#2025-04-06_snippet_3\n\nLANGUAGE: Prolog\nCODE:\n```\n| ?- uuid(chars)::uuid_v1([0xf2,0xd1,0x90,0x94,0xdc,0x4b], UUID).\nUUID = ['0','0',d,e,'9','0',c,'0',-,'8','2',c,f,-,'1','1',e,b,-,\n           a,'9','8','5',-,f,'2',d,'1','9','0','9','4',d,c,'4',b]\nyes\n```\n\n----------------------------------------\n\nTITLE: Checking Versions in Logtalk\nDESCRIPTION: Prints version information for Logtalk, Prolog backend, and kernel when running in notebook mode.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/object_aliases/NOTES.md#2025-04-06_snippet_0\n\nLANGUAGE: logtalk\nCODE:\n```\n%versions\n```\n\n----------------------------------------\n\nTITLE: Creating Predicate Aliases with uses/2 Directive\nDESCRIPTION: Extended uses/2 directive that creates aliases for predicates to avoid naming conflicts when importing from multiple objects. Uses the notation 'Predicate as Alias' or 'Predicate::Alias'.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/userman/predicates.rst#2025-04-06_snippet_16\n\nLANGUAGE: logtalk\nCODE:\n```\n:- uses(btrees, [new/1 as new_btree/1]).\n:- uses(queues, [new/1 as new_queue/1]).\n```\n\n----------------------------------------\n\nTITLE: Testing Hook Flows Library in Logtalk\nDESCRIPTION: Command to load the tester.lgt file for testing the hook_flows library predicates.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/libraries/hook_flows.rst.txt#2025-04-06_snippet_1\n\nLANGUAGE: Logtalk\nCODE:\n```\n| ?- logtalk_load(hook_flows(tester)).\n```\n\n----------------------------------------\n\nTITLE: Configuring Logtalk for Profiling with SWI-Prolog XPCE\nDESCRIPTION: Queries to set up Logtalk for profiling with SWI-Prolog XPCE profiler, including setting the optimize flag and loading the statistics library.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/tools/profiler/NOTES.md#2025-04-06_snippet_2\n\nLANGUAGE: Prolog\nCODE:\n```\n?- set_logtalk_flag(optimize, on).\ntrue.\n\n?- use_module(library(statistics)).\ntrue.\n\n?- profile(... :: ...).\n...\n```\n\n----------------------------------------\n\nTITLE: Defining current_event/5 Predicate in Logtalk\nDESCRIPTION: Defines the current_event/5 predicate, which enumerates all defined events in Logtalk. The predicate takes five arguments: Event, Object, Message, Sender, and Monitor. It can backtrack to provide multiple solutions.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/refman/predicates/current_event_5.rst.txt#2025-04-06_snippet_0\n\nLANGUAGE: Prolog\nCODE:\n```\ncurrent_event(Event, Object, Message, Sender, Monitor)\n```\n\n----------------------------------------\n\nTITLE: Runtime Flag Management\nDESCRIPTION: Examples of managing Logtalk flags at runtime using set_logtalk_flag/2 and checking flag values with current_logtalk_flag/2.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/userman/programming.rst#2025-04-06_snippet_15\n\nLANGUAGE: text\nCODE:\n```\n| ?- set_logtalk_flag(unknown_entities, silent).\n```\n\nLANGUAGE: text\nCODE:\n```\n| ?- current_logtalk_flag(unknown_entities, Value).\n\nValue = silent\nyes\n```\n\n----------------------------------------\n\nTITLE: Implementing threaded/1 predicate optimization in Logtalk\nDESCRIPTION: Updated the implementation of the threaded/1 multi-threading built-in predicate to use a performance optimization based on term_variables/2. Replaced setup_call_cleanup/3 with catch/3 for improved performance.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/RELEASE_NOTES.md#2025-04-06_snippet_125\n\nLANGUAGE: Logtalk\nCODE:\n```\nthreaded/1\n```\n\n----------------------------------------\n\nTITLE: Declaring EDCG Accumulators in Logtalk\nDESCRIPTION: Shows how to declare accumulators using the short form acc_info/5 or the long form acc_info/7, specifying the accumulator name, term, left and right variables, and the joining predicate.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/library/edcg/NOTES.md#2025-04-06_snippet_5\n\nLANGUAGE: logtalk\nCODE:\n```\nacc_info(Acc, Term, Left, Right, Joiner).\n```\n\nLANGUAGE: logtalk\nCODE:\n```\nacc_info(Acc, Term, Left, Right, Joiner, LStart, RStart).\n```\n\n----------------------------------------\n\nTITLE: Setting Multiple Inequality Constraints in Logtalk\nDESCRIPTION: The dif/1 predicate sets a set of constraints that are true if and only if all terms in a list are different. It takes a list of terms as its argument.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/coroutining_0.rst.txt#2025-04-06_snippet_1\n\nLANGUAGE: Logtalk\nCODE:\n```\ndif(Terms)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Current Date in Logtalk\nDESCRIPTION: Defines the 'today/3' predicate that returns the current date as year, month, and day integers. This predicate provides one solution when called with unbound variables.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/datep_0.rst.txt#2025-04-06_snippet_0\n\nLANGUAGE: Logtalk\nCODE:\n```\ntoday(Year,Month,Day)\n```\n\n----------------------------------------\n\nTITLE: Printing Logtalk, Prolog backend, and kernel versions\nDESCRIPTION: Prints the versions of Logtalk, Prolog backend, and kernel if running as a notebook.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/persistency/NOTES.md#2025-04-06_snippet_0\n\nLANGUAGE: logtalk\nCODE:\n```\n%versions\n```\n\n----------------------------------------\n\nTITLE: Creating New Brick Stack Tuple\nDESCRIPTION: This code creates a new brick stack relationship between bricks 'd' and 'a'.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/bricks/NOTES.md#2025-04-06_snippet_11\n\nLANGUAGE: logtalk\nCODE:\n```\nbrick_stack::add_tuple([d, a]).\n```\n\n----------------------------------------\n\nTITLE: Processing Directories with rdirectory/2 in Logtalk\nDESCRIPTION: This predicate recursively processes a directory and its subdirectories to convert Prolog files to Logtalk objects using specified options. It analyzes Prolog source files and advises on missing directives needed for proper conversion.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/wrapper_0.rst.txt#2025-04-06_snippet_0\n\nLANGUAGE: Logtalk\nCODE:\n```\nrdirectory/2\n```\n\n----------------------------------------\n\nTITLE: Prolog Library Reference Tracking\nDESCRIPTION: Protected predicate for remembering referenced Prolog libraries in the diagram.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/library_diagram_1.rst.txt#2025-04-06_snippet_3\n\nLANGUAGE: logtalk\nCODE:\n```\nremember_referenced_prolog_library(Library,Path)\n```\n\n----------------------------------------\n\nTITLE: Declaring Explain Predicate in Logtalk Tutor Object\nDESCRIPTION: Defines the 'explain//1' predicate in the tutor object. This predicate generates an explanation for a given message. It is compiled with the 'static' flag and accepts a callable term as input.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/tutor_0.rst.txt#2025-04-06_snippet_1\n\nLANGUAGE: Logtalk\nCODE:\n```\nexplain(Message)\n```\n\n----------------------------------------\n\nTITLE: All Permutations Benchmark\nDESCRIPTION: Runs the all permutations algorithm with input size 7 and measures execution time.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/permutations/NOTES.md#2025-04-06_snippet_5\n\nLANGUAGE: logtalk\nCODE:\n```\ntime(permutations::all(7, _)).\n```\n\n----------------------------------------\n\nTITLE: Creating First Instance with Key 'apple'\nDESCRIPTION: Demonstrates accessing/creating a new instance using the key 'apple'.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/design_patterns/creational/lazy_initialization/NOTES.md#2025-04-06_snippet_2\n\nLANGUAGE: logtalk\nCODE:\n```\nfruit::new(apple, Instance).\n```\n\n----------------------------------------\n\nTITLE: Defining the self/1 Method Signature in Logtalk\nDESCRIPTION: The signature of the self/1 method that unifies its argument with the object that received the message under processing. This private method provides access to the calling object's identifier.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/refman/methods/self_1.rst.txt#2025-04-06_snippet_0\n\nLANGUAGE: logtalk\nCODE:\n```\nself(Self)\n```\n\n----------------------------------------\n\nTITLE: Defining Mutation Predicate in Logtalk\nDESCRIPTION: Defines the 'mutation/3' predicate for returning a random mutation of a term into another term of the same type. The input Term is assumed to be valid for the given Type.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/mutations_store_0.rst.txt#2025-04-06_snippet_0\n\nLANGUAGE: Logtalk\nCODE:\n```\nmutation(Type,Term,Mutation)\n```\n\n----------------------------------------\n\nTITLE: Displaying Customer Bill\nDESCRIPTION: Prints the total bill for the first customer, showing the sum of all added items with applied strategies.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/design_patterns/behavioral/strategy/NOTES.md#2025-04-06_snippet_6\n\nLANGUAGE: logtalk\nCODE:\n```\nfirst::print_bill.\n```\n\n----------------------------------------\n\nTITLE: Storing Random Generator Seed Values in Logtalk\nDESCRIPTION: Private predicate that stores the current random generator seed values. This is used internally by the fast_random object to maintain state between random number generation calls.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/fast_random_0.rst.txt#2025-04-06_snippet_2\n\nLANGUAGE: Logtalk\nCODE:\n```\nseed_(S0,S1,S2)\n```\n\n----------------------------------------\n\nTITLE: Transposing Pair Lists\nDESCRIPTION: The transpose/2 predicate swaps keys and values in a list of pairs while maintaining order.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/pairs_0.rst.txt#2025-04-06_snippet_5\n\nLANGUAGE: logtalk\nCODE:\n```\ntranspose(Pairs,TransposedPairs)\n```\n\n----------------------------------------\n\nTITLE: Playing the TBBT Game in Logtalk\nDESCRIPTION: This code initiates a game of Rock Paper Scissors Lizard Spock by calling the 'play' predicate of the 'game' object.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/engines/tbbt/NOTES.md#2025-04-06_snippet_3\n\nLANGUAGE: logtalk\nCODE:\n```\ngame::play.\n```\n\n----------------------------------------\n\nTITLE: Testing the Hook Flows Library in Logtalk\nDESCRIPTION: Command to load and run tests for the hook_flows library using the tester.lgt file.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/libraries/hook_flows.rst#2025-04-06_snippet_1\n\nLANGUAGE: prolog\nCODE:\n```\n| ?- logtalk_load(hook_flows(tester)).\n```\n\n----------------------------------------\n\nTITLE: Writing CSV File with Quoted Fields in Logtalk\nDESCRIPTION: Example of writing CSV data to a file with all non-numeric fields double-quoted.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/libraries/csv.rst.txt#2025-04-06_snippet_6\n\nLANGUAGE: prolog\nCODE:\n```\n| ?- csv(keep, comma, false)::write_file('output.csv', user, p/3).\nyes\n```\n\n----------------------------------------\n\nTITLE: Creating Subclass1 Instance\nDESCRIPTION: Creates and initializes a new instance of subclass1 using the new/1 predicate.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/metaclasses/NOTES.md#2025-04-06_snippet_3\n\nLANGUAGE: logtalk\nCODE:\n```\nsubclass1::new(I).\n```\n\n----------------------------------------\n\nTITLE: Mode Declarations\nDESCRIPTION: Defines the modes and number of proofs for different call//1-N variants.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/refman/methods/call_1.rst.txt#2025-04-06_snippet_3\n\nLANGUAGE: prolog\nCODE:\n```\ncall(+callable) - zero_or_more\ncall(+callable, ?term) - zero_or_more\ncall(+callable, ?term, ?term) - zero_or_more\n```\n\n----------------------------------------\n\nTITLE: Flaky Test Counter in Logtalk Unit Testing\nDESCRIPTION: Dynamic counter tracking the number of failed tests that are marked as flaky (expected to fail occasionally).\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/lgtunit_0.rst.txt#2025-04-06_snippet_80\n\nLANGUAGE: Logtalk\nCODE:\n```\nflaky_(Counter)\n```\n\n----------------------------------------\n\nTITLE: Loading Assertions Tool in Logtalk\nDESCRIPTION: Query to load the assertions tool in Logtalk. This makes the assertion predicates available for use in source code.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/tools/assertions/NOTES.md#2025-04-06_snippet_0\n\nLANGUAGE: Logtalk\nCODE:\n```\n| ?- logtalk_load(assertions(loader)).\n```\n\n----------------------------------------\n\nTITLE: Setting Global Debug Mode\nDESCRIPTION: Command to enable debug mode globally at runtime.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/userman/debugging.rst#2025-04-06_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n| ?- set_logtalk_flag(debug, on).\n```\n\n----------------------------------------\n\nTITLE: Adding and Testing New Concentric Relations in Logtalk\nDESCRIPTION: Adds a new concentric relation, moves a polygon, and checks the results to demonstrate the propagation of movement through concentric relations.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/polygons/NOTES.md#2025-04-06_snippet_5\n\nLANGUAGE: logtalk\nCODE:\n```\nconcentric::add_tuple([t, p]).\n\np::move(2, 7).\n\nconcentric::tuple(Tuple), write(Tuple), nl, fail; true.\n\nt::position(Xt, Yt), s::position(Xs, Ys), p::position(Xp, Yp), h::position(Xh, Yh).\n\nafter_event_registry::monitors(Monitors).\n```\n\n----------------------------------------\n\nTITLE: Reset All Counters Predicate\nDESCRIPTION: Public predicate that resets all integer counters to their initial state. Compiled with static and synchronized flags for thread safety.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/genint_core_0.rst.txt#2025-04-06_snippet_0\n\nLANGUAGE: logtalk\nCODE:\n```\nreset_genint/0\n```\n\n----------------------------------------\n\nTITLE: Method Signature - Logtalk abolish/1\nDESCRIPTION: Method signature showing the basic syntax for the abolish/1 predicate.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/refman/methods/abolish_1.rst.txt#2025-04-06_snippet_0\n\nLANGUAGE: logtalk\nCODE:\n```\nabolish(Predicate)\n```\n\n----------------------------------------\n\nTITLE: Public Category Import in Logtalk\nDESCRIPTION: Demonstrates the default public scope when importing a category.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/userman/categories.rst.txt#2025-04-06_snippet_20\n\nLANGUAGE: logtalk\nCODE:\n```\n:- object(Object,\n    imports(public::Category)).\n    ...\n:- end_object.\n```\n\n----------------------------------------\n\nTITLE: Equivalent Prolog Implementation of type_error/2\nDESCRIPTION: Equivalent implementation of type_error/2 using Prolog goals. It retrieves the current context and throws an error with the specified type and culprit.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/refman/methods/type_error_2.rst.txt#2025-04-06_snippet_1\n\nLANGUAGE: Prolog\nCODE:\n```\n...,\ncontext(Context),\nthrow(error(type_error(Type,Culprit), Context)).\n```\n\n----------------------------------------\n\nTITLE: Testing Compound Undefined Predicate\nDESCRIPTION: Tests a predicate that fails due to undefined dependencies\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/closed_world_assumption/NOTES.md#2025-04-06_snippet_6\n\nLANGUAGE: logtalk\nCODE:\n```\nhouse::practical.\n```\n\n----------------------------------------\n\nTITLE: Reading Text Streams to Character Codes in Logtalk\nDESCRIPTION: Reads a text stream into a list of character codes. Takes a stream or alias as input and returns the stream contents as a list of character codes without closing the stream.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/reader_0.rst.txt#2025-04-06_snippet_8\n\nLANGUAGE: Logtalk\nCODE:\n```\nstream_to_codes(Stream,Codes)\n```\n\n----------------------------------------\n\nTITLE: Specifying Modes and Proofs for findall/4 in Logtalk\nDESCRIPTION: Describes the input/output modes and the number of proofs for the findall/4 method.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/refman/methods/findall_4.rst#2025-04-06_snippet_2\n\nLANGUAGE: Logtalk\nCODE:\n```\nfindall(?term, +callable, ?list, ?term) - zero_or_one\n```\n\n----------------------------------------\n\nTITLE: Defining logtalk_library_path/2 Predicate in Logtalk\nDESCRIPTION: Signature of the logtalk_library_path/2 predicate, which is dynamic and multifile. It allows declaring aliases to library paths, with paths ending in a directory separator.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/refman/predicates/logtalk_library_path_2.rst#2025-04-06_snippet_0\n\nLANGUAGE: Prolog\nCODE:\n```\nlogtalk_library_path(Library, Path)\n```\n\n----------------------------------------\n\nTITLE: Validating Term in Logtalk\nDESCRIPTION: Defines predicates to check if a term is valid and to throw an exception if it's not.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/termp_0.rst.txt#2025-04-06_snippet_6\n\nLANGUAGE: Logtalk\nCODE:\n```\nvalid(Term)\n```\n\nLANGUAGE: Logtalk\nCODE:\n```\ncheck(Term)\n```\n\n----------------------------------------\n\nTITLE: Checking Counter Values\nDESCRIPTION: Displays the initial counter values from the database.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/includes/NOTES.md#2025-04-06_snippet_5\n\nLANGUAGE: logtalk\nCODE:\n```\ncounters::counter(Counter, Value).\n```\n\n----------------------------------------\n\nTITLE: Defining Character Object in Logtalk\nDESCRIPTION: Defines the 'character' object in Logtalk, specifying its implementation, extension, and inheritance details. It provides character predicates and inherits functionality from other objects and protocols.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/character_0.rst.txt#2025-04-06_snippet_0\n\nLANGUAGE: Logtalk\nCODE:\n```\n``character``\n=============\n\nCharacter predicates (most of them assume an ASCII representation).\n\n| **Availability:** \n|    ``logtalk_load(types(loader))``\n\n| **Author:** Paulo Moura\n| **Version:** 1:9:0\n| **Date:** 2019-06-29\n\n| **Compilation flags:**\n|    ``static, context_switching_calls``\n\n\n| **Implements:**\n|    ``public`` :ref:`characterp <characterp/0>`\n| **Extends:**\n|    ``public`` :ref:`atom <atom/0>`\n```\n\n----------------------------------------\n\nTITLE: Disconnecting from Redis Server in Logtalk\nDESCRIPTION: Closes the connection to a Redis server. Takes a connection handle previously obtained through connect/1 or connect/3.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/redis_0.rst.txt#2025-04-06_snippet_2\n\nLANGUAGE: logtalk\nCODE:\n```\ndisconnect(Connection)\n```\n\n----------------------------------------\n\nTITLE: Finding Root Using Multi-Threading for Function f2\nDESCRIPTION: Uses multi-threading to concurrently run all root-finding methods for function f2 in the range [1.0, 1.3] with a tolerance of 1.0e-15. Returns both the root value and the method that found it first.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/threads/functions/NOTES.md#2025-04-06_snippet_12\n\nLANGUAGE: logtalk\nCODE:\n```\nfunction_root::find_root(f2, 1.0, 1.3, 1.0e-15, Zero, Method).\n```\n\n----------------------------------------\n\nTITLE: Specifying mode and determinism for retractall/1\nDESCRIPTION: Defines the mode declaration for the retractall/1 method, indicating it takes a callable term as input and succeeds exactly once.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/refman/methods/retractall_1.rst.txt#2025-04-06_snippet_1\n\nLANGUAGE: Logtalk\nCODE:\n```\nretractall(@callable) - one\n```\n\n----------------------------------------\n\nTITLE: Running a Test Set in Logtalk\nDESCRIPTION: Runs a test set as part of executing multiple test sets as a unified set.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/lgtunit_0.rst.txt#2025-04-06_snippet_28\n\nLANGUAGE: logtalk\nCODE:\n```\nrun_test_set\n```\n\n----------------------------------------\n\nTITLE: Debugging with Verbose Option and Shrinking\nDESCRIPTION: Example showing how verbose output displays the shrinking process when a counter-example is found, progressively simplifying the failing case.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/tools/lgtunit/NOTES.md#2025-04-06_snippet_14\n\nLANGUAGE: prolog\nCODE:\n```\n| ?- lgtunit::quick_check(atom(+atomic), [v(true), ec(false)]).\n% Passed:    atom('dyO=Xv_MX-3b/U4KH U')\n*     Failure:   atom(-198)\n*     Shrinked:  atom(-99)\n*     Shrinked:  atom(-49)\n*     Shrinked:  atom(-24)\n*     Shrinked:  atom(-12)\n*     Shrinked:  atom(-6)\n*     Shrinked:  atom(-3)\n*     Shrinked:  atom(-1)\n*     Shrinked:  atom(0)\n*     quick check test failure (at test 2 after 8 shrinks):\n*       atom(0)\n*     starting seed: seed(3172,9814,20125)\n*     test seed:     seed(7035,19506,18186)\nno\n```\n\n----------------------------------------\n\nTITLE: Calculating Distance in the Parametric xyzt Object in Logtalk\nDESCRIPTION: Calculates the distance from the origin for a specific point in space-time using the parametric xyzt object, demonstrating inheritance of the distance predicate from xyz.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/mi/NOTES.md#2025-04-06_snippet_6\n\nLANGUAGE: logtalk\nCODE:\n```\nxyzt(2,3,4,7)::distance(D).\n```\n\n----------------------------------------\n\nTITLE: Date with Day of Week Example\nDESCRIPTION: Example demonstrating date handling with day of week, where Monday=1 through Sunday=7.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/iso8601_0.rst.txt#2025-04-06_snippet_1\n\nLANGUAGE: prolog\nCODE:\n```\ndate(JD,2000,2,29,DoW)\nJD=2451604,DoW=2\n```\n\n----------------------------------------\n\nTITLE: Parsing JSON Objects with Different Representations in Logtalk\nDESCRIPTION: Shows how to parse JSON objects into different term representations using the json parametric object.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/library/json/NOTES.md#2025-04-06_snippet_3\n\nLANGUAGE: Prolog\nCODE:\n```\n| ?- json(curly,dash,atom)::parse(atom('{\"a\":1, \"b\":2, \"c\":3}'), JSON).\nJSON = {a-1, b-2, c-3}\nyes\n\n| ?- json(list,equal,atom)::parse(atom('{\"a\":1, \"b\":2, \"c\":3}'), JSON).\nJSON = json([a=1, b=2, c=3])\nyes\n\n| ?- json(curly,colon,atom)::parse(atom('{\"a\":1, \"b\":2, \"c\":3}'), JSON).\nJSON = {a:1, b:2, c:3}\nyes\n```\n\n----------------------------------------\n\nTITLE: Mode Declaration for resource_error/1 in Logtalk\nDESCRIPTION: Specifies the calling mode for resource_error/1, indicating it expects a non-variable as input and will generate an error.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/refman/methods/resource_error_1.rst#2025-04-06_snippet_2\n\nLANGUAGE: logtalk\nCODE:\n```\nresource_error(@nonvar) - error\n```\n\n----------------------------------------\n\nTITLE: Testing List Member Predicate with Message Counter\nDESCRIPTION: Sends a message to the spied list object to find members of a list, which will be monitored with all answers retrieved.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/profiling/NOTES.md#2025-04-06_snippet_6\n\nLANGUAGE: logtalk\nCODE:\n```\nlist::member(X, [1, 2, 3]).\n```\n\n----------------------------------------\n\nTITLE: Defining the Meta-predicate Template for threaded/1 in Logtalk\nDESCRIPTION: Specifies the meta-predicate template for threaded/1, indicating it takes a callable goal (0) as its argument.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/refman/predicates/threaded_1.rst.txt#2025-04-06_snippet_1\n\nLANGUAGE: Prolog\nCODE:\n```\nthreaded(0)\n```\n\n----------------------------------------\n\nTITLE: Performance Timing Queries\nDESCRIPTION: Demonstrates timing measurements for Ackermann function calls using the time/1 predicate, compatible with SWI-Prolog, Trealla Prolog, XVM, and YAP backends.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/ack/NOTES.md#2025-04-06_snippet_3\n\nLANGUAGE: logtalk\nCODE:\n```\ntime(true).\n```\n\nLANGUAGE: logtalk\nCODE:\n```\ntime(ack::ack(2, 4, V)).\n```\n\nLANGUAGE: logtalk\nCODE:\n```\ntime(ack::ack(3, 3, V)).\n```\n\nLANGUAGE: logtalk\nCODE:\n```\ntime(ack::ack(3, 4, V)).\n```\n\n----------------------------------------\n\nTITLE: Modes and Number of Proofs for call//1-N in Logtalk\nDESCRIPTION: Specifies the mode declarations for call//1-N, indicating the expected argument types and instantiation patterns. The '+callable' indicates the closure must be bound, while '?term' means the argument can be any term.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/refman/methods/call_1.rst#2025-04-06_snippet_3\n\nLANGUAGE: Logtalk\nCODE:\n```\ncall(+callable) - zero_or_more\ncall(+callable, ?term) - zero_or_more\ncall(+callable, ?term, ?term) - zero_or_more\n...\n```\n\n----------------------------------------\n\nTITLE: Implementing squares_and_cubes/6 in Logtalk\nDESCRIPTION: Auxiliary predicate for computing the skewness statistic. Takes a list of numbers, their mean, initial squares sum, returns final squares sum, initial cubes sum, and returns final cubes sum.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/statistics_0.rst.txt#2025-04-06_snippet_1\n\nLANGUAGE: Logtalk\nCODE:\n```\nsquares_and_cubes(List,Mean,Squares0,Squares,Cubes0,Cubes)\n```\n\n----------------------------------------\n\nTITLE: Specifying Modes for predicate_property/2 in Logtalk\nDESCRIPTION: Defines the mode and number of proofs for the predicate_property/2 method. It expects a bound callable term and a predicate property (which can be a variable), and may return zero or more solutions.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/refman/methods/predicate_property_2.rst.txt#2025-04-06_snippet_1\n\nLANGUAGE: Logtalk\nCODE:\n```\npredicate_property(+callable, ?predicate_property) - zero_or_more\n```\n\n----------------------------------------\n\nTITLE: Generating Allure Report with Project and Commit in Bash\nDESCRIPTION: Shows how to generate an Allure report using the logtalk_allure_report script in Bash, specifying the project name and git commit hash.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/devtools/lgtunit.rst.txt#2025-04-06_snippet_44\n\nLANGUAGE: bash\nCODE:\n```\n$ logtalk_allure_report -- Project='Deep Thought' Commit=`git rev-parse --short HEAD`\n```\n\n----------------------------------------\n\nTITLE: Modes and Number of Proofs for call/1-N in Logtalk\nDESCRIPTION: Specifies the calling modes and number of proofs for call/1-N, indicating that the first argument must be callable with subsequent arguments being any terms.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/refman/methods/call_N.rst#2025-04-06_snippet_2\n\nLANGUAGE: logtalk\nCODE:\n```\ncall(+callable) - zero_or_more\ncall(+callable, ?term) - zero_or_more\ncall(+callable, ?term, ?term) - zero_or_more\n...\n```\n\n----------------------------------------\n\nTITLE: XML to Document Conversion in Logtalk\nDESCRIPTION: Private predicate that translates a list of character codes into a Prolog term representing an XML document, with options to control layout and character handling.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/xml_0.rst.txt#2025-04-06_snippet_4\n\nLANGUAGE: Logtalk\nCODE:\n```\nxml_to_document(Options,XML,Document)\n```\n\n----------------------------------------\n\nTITLE: Updating a Registry with Options in Logtalk\nDESCRIPTION: Updates a defined registry using specified options. Fails if the registry is not defined.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/registries_0.rst.txt#2025-04-06_snippet_6\n\nLANGUAGE: logtalk\nCODE:\n```\nupdate(Registry, Options)\n```\n\n----------------------------------------\n\nTITLE: Print Version Information in Logtalk\nDESCRIPTION: Prints the versions of Logtalk, Prolog backend, and kernel when running in a notebook environment.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/hooks/NOTES.md#2025-04-06_snippet_0\n\nLANGUAGE: logtalk\nCODE:\n```\n%versions\n```\n\n----------------------------------------\n\nTITLE: Calculating Hailstone Sequence Length in Logtalk\nDESCRIPTION: Calculates the length of the Hailstone sequence for the number 27, returning the number of steps required to reach 1.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/hailstone/NOTES.md#2025-04-06_snippet_4\n\nLANGUAGE: logtalk\nCODE:\n```\nhailstone::sequence_length(27, Length).\n```\n\n----------------------------------------\n\nTITLE: Passed Test Counter in Logtalk Unit Testing\nDESCRIPTION: Dynamic counter tracking the number and total time (both CPU and wall time) for passed tests.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/lgtunit_0.rst.txt#2025-04-06_snippet_78\n\nLANGUAGE: Logtalk\nCODE:\n```\npassed_(Counter,CPUTime,WallTime)\n```\n\n----------------------------------------\n\nTITLE: Sudoku Solver Implementation\nDESCRIPTION: Implements a Sudoku puzzle solver using CLP(FD) constraints\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/constraints/yap/NOTES.md#2025-04-06_snippet_3\n\nLANGUAGE: logtalk\nCODE:\n```\nsoduku::sudoku(Rows), append(Rows, Vs), label(Vs).\n\nsoduku::(problem(1, Rows), sudoku(Rows)), append(Rows, Vs), label(Vs).\n\n(current_object(jupyter) -> true; soduku::(problem(1, Rows), show([ff], Rows))).\n\n(current_object(jupyter) -> true; soduku::show([ff], Rows)).\n```\n\n----------------------------------------\n\nTITLE: Loading Abstract Factory Design Pattern Implementation\nDESCRIPTION: Loads the sample implementation of the Abstract Factory design pattern from the design patterns directory.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/design_patterns/creational/abstract_factory/NOTES.md#2025-04-06_snippet_1\n\nLANGUAGE: logtalk\nCODE:\n```\nlogtalk_load(design_patterns('creational/abstract_factory/loader')).\n```\n\n----------------------------------------\n\nTITLE: Checking Loaded Entities in Debug Mode in Logtalk\nDESCRIPTION: Enumerates all loaded entities compiled in debug mode using the debugger::debugging/1 predicate.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/userman/debugging.rst.txt#2025-04-06_snippet_4\n\nLANGUAGE: prolog\nCODE:\n```\n| ?- debugger::debugging(Entity).\n```\n\n----------------------------------------\n\nTITLE: Example of Specializing an Inherited Method in Logtalk\nDESCRIPTION: Example showing how to use the (^^)/1 control construct to specialize an inherited method by adding functionality before calling the parent implementation.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/refman/control/call_super_1.rst.txt#2025-04-06_snippet_2\n\nLANGUAGE: logtalk\nCODE:\n```\n% specialize the inherited definition\n% of the init/0 predicate:\ninit :-\n    assertz(counter(0)),\n    ^^init.\n```\n\n----------------------------------------\n\nTITLE: Retrieving Parameter Values in Parametric Objects\nDESCRIPTION: Shows how to use the parameter/2 method to access parameters in parametric objects, which allows objects to be instantiated with different values.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/userman/predicates.rst.txt#2025-04-06_snippet_44\n\nLANGUAGE: logtalk\nCODE:\n```\n:- object(block(_Color)).\n\n    :- public(test/0).\n\n    test :-\n        parameter(1, Color),\n        write('Color parameter value is '),\n        writeq(Color), nl.\n\n:- end_object.\n```\n\n----------------------------------------\n\nTITLE: Browsing Handbook Documentation in Logtalk\nDESCRIPTION: Example queries for accessing the Logtalk handbook and API documentation using the help tool\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/tools/help/NOTES.md#2025-04-06_snippet_2\n\nLANGUAGE: logtalk\nCODE:\n```\n| ?- help::handbook.\n```\n\nLANGUAGE: logtalk\nCODE:\n```\n| ?- help::handbook(base64).\n```\n\nLANGUAGE: logtalk\nCODE:\n```\n| ?- help::handbook(logtalk_load/2).\n```\n\nLANGUAGE: logtalk\nCODE:\n```\n| ?- help::apis.\n```\n\nLANGUAGE: logtalk\nCODE:\n```\n| ?- help::apis(check/2).\n```\n\nLANGUAGE: logtalk\nCODE:\n```\n| ?- help::apis(message_tokens//2).\n```\n\nLANGUAGE: logtalk\nCODE:\n```\n| ?- help::man(logtalk_tester).\n```\n\n----------------------------------------\n\nTITLE: Referenced Prolog Directory Dynamic Predicate - referenced_prolog_directory_/1\nDESCRIPTION: Dynamic predicate that maintains a table of referenced Prolog directories in the diagram. Allows querying of stored paths.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/directory_diagram_1.rst.txt#2025-04-06_snippet_5\n\nLANGUAGE: logtalk\nCODE:\n```\nreferenced_prolog_directory_(?atom)\n```\n\n----------------------------------------\n\nTITLE: Reordering Predicate Arguments with uses/2 Directive\nDESCRIPTION: Example of using predicate aliases to change the order of predicate arguments without using lambda expressions, making a fold_left predicate available with different argument ordering.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/userman/predicates.rst#2025-04-06_snippet_18\n\nLANGUAGE: logtalk\nCODE:\n```\n:- uses(meta, [\n    fold_left(Closure, Result0, List, Result) as foldl(Closure, List, Result0, Result)\n]).\n```\n\n----------------------------------------\n\nTITLE: Creating a Dynamic Protocol at Runtime in Logtalk\nDESCRIPTION: Shows how to use the create_protocol/3 built-in predicate to create a new dynamic protocol during program execution. The predicate takes the protocol name, its relations, and directives as arguments.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/userman/protocols.rst#2025-04-06_snippet_3\n\nLANGUAGE: prolog\nCODE:\n```\n| ?- create_protocol(Protocol, Relations, Directives).\n```\n\n----------------------------------------\n\nTITLE: Defining Private Mutation Predicate in Logtalk\nDESCRIPTION: Defines the private 'mutation/4' predicate for returning a random mutation of a term into another term of the same type using a specific mutator N.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/mutations_store_0.rst.txt#2025-04-06_snippet_2\n\nLANGUAGE: Logtalk\nCODE:\n```\nmutation(Type,N,Term,Mutation)\n```\n\n----------------------------------------\n\nTITLE: Retrieving List of All Class Leaf Subclasses in Logtalk\nDESCRIPTION: Predicate that returns a list containing all class leaf subclasses. Takes a single parameter Leaves which will be bound to the list of all leaf subclasses.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/class_hierarchyp_0.rst.txt#2025-04-06_snippet_11\n\nLANGUAGE: logtalk\nCODE:\n```\nleaf_classes(Leaves)\n```\n\n----------------------------------------\n\nTITLE: List Element Deletion\nDESCRIPTION: Predicate that removes all occurrences of an element from a list using ==/2 comparison.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/listp_0.rst.txt#2025-04-06_snippet_2\n\nLANGUAGE: logtalk\nCODE:\n```\ndelete(List,Element,Remaining)\n```\n\n----------------------------------------\n\nTITLE: Loading Diamond Problem Example\nDESCRIPTION: Loads the diamond problem example files into the Logtalk environment using the loader file.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/diamonds/NOTES.md#2025-04-06_snippet_1\n\nLANGUAGE: logtalk\nCODE:\n```\nlogtalk_load(diamonds(loader)).\n```\n\n----------------------------------------\n\nTITLE: Loading the Bottles Implementation\nDESCRIPTION: Loads the Logtalk implementation of the '99 Bottles of Beer' program using the loader file. The implementation includes an initialization/1 directive that automatically runs the program when loaded.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/bottles/NOTES.md#2025-04-06_snippet_1\n\nLANGUAGE: logtalk\nCODE:\n```\nlogtalk_load(bottles(loader)).\n```\n\n----------------------------------------\n\nTITLE: Loading Builder Design Pattern Implementation in Logtalk\nDESCRIPTION: Loads the sample implementation of the Builder design pattern from the design patterns directory.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/design_patterns/creational/builder/NOTES.md#2025-04-06_snippet_1\n\nLANGUAGE: logtalk\nCODE:\n```\nlogtalk_load(design_patterns('creational/builder/loader')).\n```\n\n----------------------------------------\n\nTITLE: Meta-predicate Template for phrase/3 in Logtalk\nDESCRIPTION: Specifies the meta-predicate template for phrase/3, showing its calling pattern with argument types.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/refman/methods/phrase_3.rst.txt#2025-04-06_snippet_1\n\nLANGUAGE: Logtalk\nCODE:\n```\nphrase(2, *, *)\n```\n\n----------------------------------------\n\nTITLE: Testing Error Case\nDESCRIPTION: Tests an undeclared predicate that generates an error\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/closed_world_assumption/NOTES.md#2025-04-06_snippet_7\n\nLANGUAGE: logtalk\nCODE:\n```\nhouse::fun.\n```\n\n----------------------------------------\n\nTITLE: Type-checking ULID Format\nDESCRIPTION: Example of type-checking a ULID string for valid format and characters.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/libraries/ulid.rst.txt#2025-04-06_snippet_8\n\nLANGUAGE: logtalk\nCODE:\n```\n| ?- type::check(ulid(atom), '01BX5ZIKBKALTAV9OEVGEMMVRY').\nuncaught exception: domain_error(ulid,'01BX5ZIKBKALTAV9OEVGEMMVRY')\n```\n\n----------------------------------------\n\nTITLE: Deactivating the Ports Profiler in Logtalk\nDESCRIPTION: Deactivates the ports profiler. This predicate is compiled with the 'static' flag and provides one proof.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/ports_profiler_0.rst.txt#2025-04-06_snippet_1\n\nLANGUAGE: Logtalk\nCODE:\n```\nstop/0\n```\n\n----------------------------------------\n\nTITLE: Generating an Identifier with Default Settings\nDESCRIPTION: Example of generating a random identifier using the default 160 bits of randomness, returned as an atom.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/libraries/ids.rst#2025-04-06_snippet_2\n\nLANGUAGE: logtalk\nCODE:\n```\n| ?- ids::generate(Identifier).\nIdentifier = '2gpMzqAFXBO5mYFIPX1qMkHxgGE='\nyes\n```\n\n----------------------------------------\n\nTITLE: Loading Error Examples\nDESCRIPTION: Loads a set of entities that demonstrate common compiler errors in Logtalk.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/errors/NOTES.md#2025-04-06_snippet_3\n\nLANGUAGE: logtalk\nCODE:\n```\nlogtalk_load(errors(errors_loader)).\n```\n\n----------------------------------------\n\nTITLE: File Cleanup Predicate in Logtalk Unit Testing\nDESCRIPTION: Closes any stream associated with the file and deletes it if it exists. File paths are relative to the tests object path.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/lgtunit_0.rst.txt#2025-04-06_snippet_66\n\nLANGUAGE: Logtalk\nCODE:\n```\nclean_file(File)\n```\n\n----------------------------------------\n\nTITLE: Grammar non-terminals in Logtalk\nDESCRIPTION: New non-terminals added to the sequence_grammars library object in Logtalk for parsing sequences.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/RELEASE_NOTES.md#2025-04-06_snippet_5\n\nLANGUAGE: Logtalk\nCODE:\n```\nsequence_grammars::zero_or_more(P, S) --> ...\nsequence_grammars::one_or_more(P, S) --> ...\nsequence_grammars::without(P, S) --> ...\n```\n\n----------------------------------------\n\nTITLE: Removing All Breakpoints and Log Points in Logtalk\nDESCRIPTION: Removes all breakpoints and log points.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/debuggerp_0.rst.txt#2025-04-06_snippet_18\n\nLANGUAGE: Logtalk\nCODE:\n```\nnospyall/0\n```\n\n----------------------------------------\n\nTITLE: Defining abolish_protocol/1 Predicate in Prolog\nDESCRIPTION: Specifies the syntax and mode for the abolish_protocol/1 predicate. It takes a protocol identifier as an argument and has one proof.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/refman/predicates/abolish_protocol_1.rst.txt#2025-04-06_snippet_0\n\nLANGUAGE: Prolog\nCODE:\n```\nabolish_protocol(@protocol_identifier) - one\n```\n\n----------------------------------------\n\nTITLE: Interval Protocol Aliases\nDESCRIPTION: Defines shorthand aliases for the interval relation predicates inherited from the intervalp protocol, providing shorter names for common operations.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/interval_0.rst.txt#2025-04-06_snippet_1\n\nLANGUAGE: logtalk\nCODE:\n```\nintervalp before/2 as b/2\nintervalp after/2 as bi/2\nintervalp meets/2 as m/2\nintervalp met_by/2 as mi/2\nintervalp overlaps/2 as o/2\nintervalp overlapped_by/2 as oi/2\nintervalp starts/2 as s/2\nintervalp started_by/2 as si/2\nintervalp during/2 as d/2\nintervalp contains/2 as di/2\nintervalp finishes/2 as f/2\nintervalp finished_by/2 as fi/2\nintervalp equal/2 as eq/2\n```\n\n----------------------------------------\n\nTITLE: Endif Directive Usage Example\nDESCRIPTION: An example demonstrating the use of endif directive with a conditional compilation block that checks the date and displays a message on May 25th.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/refman/directives/endif_0.rst.txt#2025-04-06_snippet_2\n\nLANGUAGE: logtalk\nCODE:\n```\n:- if(date::today(_,5,25)).\n\n    :- initialization(write('Happy Towel Day!\\n')).\n\n:- endif.\n```\n\n----------------------------------------\n\nTITLE: Threaded Directive Usage Example\nDESCRIPTION: Example showing how to declare an object as thread-enabled using the threaded/0 directive.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/refman/directives/threaded_0.rst.txt#2025-04-06_snippet_1\n\nLANGUAGE: logtalk\nCODE:\n```\n:- threaded.\n```\n\n----------------------------------------\n\nTITLE: Described Assertion Check in Logtalk\nDESCRIPTION: Performs an assertion check with a description. Throws an error using the description if the assertion fails or throws an error, helping to distinguish between different assertions.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/lgtunit_0.rst.txt#2025-04-06_snippet_10\n\nLANGUAGE: Logtalk\nCODE:\n```\nassertion(Description, Assertion)\n```\n\n----------------------------------------\n\nTITLE: Calling Methods with Selective Debug Messages\nDESCRIPTION: Query showing output when only specific debug message groups are enabled.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/tools/debug_messages/NOTES.md#2025-04-06_snippet_9\n\nLANGUAGE: Prolog\nCODE:\n```\n| ?- foo::(bar, baz).\nbar/0 called\nyes\n```\n\n----------------------------------------\n\nTITLE: Specifying Modes and Proofs for message_tokens//2\nDESCRIPTION: Defines the usage mode for the message_tokens//2 non-terminal, indicating that both arguments must be non-variables and that the predicate can succeed zero or more times.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/refman/methods/message_tokens_2.rst.txt#2025-04-06_snippet_1\n\nLANGUAGE: prolog\nCODE:\n```\nmessage_tokens(+nonvar, +nonvar) - zero_or_more\n```\n\n----------------------------------------\n\nTITLE: Querying Protocol Extension Relationships with Scope in Logtalk\nDESCRIPTION: Demonstrates how to find protocol extension relationships while also retrieving the extension scope, using the extends_protocol/3 built-in predicate.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/userman/protocols.rst#2025-04-06_snippet_9\n\nLANGUAGE: prolog\nCODE:\n```\n| ?- extends_protocol(Protocol1, Protocol2, Scope).\n```\n\n----------------------------------------\n\nTITLE: Retrieving Multiple Answers as a Table\nDESCRIPTION: Shows how to retrieve multiple answers from a pengine engine in a tabular format.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/pengines/NOTES.md#2025-04-06_snippet_14\n\nLANGUAGE: logtalk\nCODE:\n```\n%%table\nengines::answer(2, A1).\n```\n\n----------------------------------------\n\nTITLE: Adding Log Entry\nDESCRIPTION: Adds a new entry to the object's log with a custom message.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/logs/NOTES.md#2025-04-06_snippet_3\n\nLANGUAGE: logtalk\nCODE:\n```\nobject::add_log_entry('something interesting happens').\n```\n\n----------------------------------------\n\nTITLE: Handling Dynamic Predicates in Logtalk Categories (This Context)\nDESCRIPTION: Shows how to define and handle dynamic predicates within a Logtalk category using the context of 'this'.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/userman/categories.rst#2025-04-06_snippet_4\n\nLANGUAGE: Logtalk\nCODE:\n```\n:- category(attributes).\n\n    :- public(attribute/2).\n    :- public(set_attribute/2).\n    :- public(del_attribute/2).\n\n    :- private(attribute_/2).\n    :- dynamic(attribute_/2).\n\n    attribute(Attribute, Value) :-\n        % call in the context of \"this\"\n        attribute_(Attribute, Value).\n\n    set_attribute(Attribute, Value) :-\n        % retract old clauses in \"this\"\n        retractall(attribute_(Attribute, _)),\n        % asserts clause in \"this\"\n        assertz(attribute_(Attribute, Value)).\n\n    del_attribute(Attribute, Value) :-\n        % retract clause in \"this\"\n        retract(attribute_(Attribute, Value)).\n\n:- end_category.\n```\n\n----------------------------------------\n\nTITLE: Connecting to Redis Server with Custom Host and Port in Logtalk\nDESCRIPTION: Connects to a Redis server running on the specified host and port. Returns a connection handle that can be used with other Redis operations.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/redis_0.rst.txt#2025-04-06_snippet_1\n\nLANGUAGE: logtalk\nCODE:\n```\nconnect(Host,Port,Connection)\n```\n\n----------------------------------------\n\nTITLE: Defining current_category/1 Predicate in Logtalk\nDESCRIPTION: Defines the current_category/1 predicate, which enumerates all currently defined categories (static, dynamic, or built-in) by backtracking.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/refman/predicates/current_category_1.rst.txt#2025-04-06_snippet_0\n\nLANGUAGE: Prolog\nCODE:\n```\ncurrent_category(Category)\n```\n\n----------------------------------------\n\nTITLE: Reading a Line from Text Stream to Character Codes with Line Feed in Logtalk\nDESCRIPTION: Reads a line from a text stream into a list of character codes, keeping the end-of-line marker normalized to line feed code. The list is terminated by the given tail, which becomes empty at end of file.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/reader_0.rst.txt#2025-04-06_snippet_19\n\nLANGUAGE: Logtalk\nCODE:\n```\nline_to_codes(Stream,Codes,Tail)\n```\n\n----------------------------------------\n\nTITLE: Find All Members with Tail - Logtalk Meta-Predicate\nDESCRIPTION: Finds all members of a list that satisfy a test, appending given tail to result. Takes member template, list, test predicate, result and tail list.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/metap_0.rst.txt#2025-04-06_snippet_3\n\nLANGUAGE: logtalk\nCODE:\n```\nfindall_member(Member,List,Test,Result,Tail)\n```\n\n----------------------------------------\n\nTITLE: Creating and manipulating a bounded point\nDESCRIPTION: Shows creation of a bounded point with specified coordinate limits, printing its position, moving it within bounds, and printing again.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/points/NOTES.md#2025-04-06_snippet_3\n\nLANGUAGE: logtalk\nCODE:\n```\nbounded_point::new(Point, [position-(1, 3), bounds(x)-(0, 13), bounds(y)-(-7, 7)]), Point::(print, move(7, 4), print).\n```\n\n----------------------------------------\n\nTITLE: Testing Logtalk Zippers Library\nDESCRIPTION: Command to load and run tests for the zippers library predicates using the tester.lgt file.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/library/zippers/NOTES.md#2025-04-06_snippet_1\n\nLANGUAGE: logtalk\nCODE:\n```\n| ?- logtalk_load(zippers(tester)).\n```\n\n----------------------------------------\n\nTITLE: Reloading example with debug statements discarded\nDESCRIPTION: This snippet reloads the debug hooks example with debugging statements disabled using the loader_production file.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/debug_hooks/NOTES.md#2025-04-06_snippet_6\n\nLANGUAGE: logtalk\nCODE:\n```\nlogtalk_load(debug_hooks(loader_production)).\n```\n\n----------------------------------------\n\nTITLE: Logtalk Question Prompt Stream Method Signature\nDESCRIPTION: Method signature showing the structure and arguments for the question_prompt_stream predicate. Takes Kind, Component, Prompt and Stream parameters.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/refman/methods/question_prompt_stream_4.rst#2025-04-06_snippet_0\n\nLANGUAGE: logtalk\nCODE:\n```\nquestion_prompt_stream(Kind, Component, Prompt, Stream)\n```\n\n----------------------------------------\n\nTITLE: Checking Logtalk and Prolog versions\nDESCRIPTION: Command to display the versions of Logtalk, the Prolog backend, and the kernel if running as a notebook.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/clustering/NOTES.md#2025-04-06_snippet_1\n\nLANGUAGE: logtalk\nCODE:\n```\n%versions\n```\n\n----------------------------------------\n\nTITLE: Querying Objects Derived from state_space in Logtalk\nDESCRIPTION: Example query to enumerate objects derived from the state_space prototype using the extends_object/2 predicate.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/refman/predicates/extends_object_2_3.rst.txt#2025-04-06_snippet_2\n\nLANGUAGE: prolog\nCODE:\n```\n| ?- extends_object(Object, state_space).\n```\n\n----------------------------------------\n\nTITLE: Using SWI-Prolog Graphical Tracer for Logtalk\nDESCRIPTION: Example of using the SWI-Prolog graphical tracer (gtrace/0-1) for debugging Logtalk source code.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/adapters/NOTES.md#2025-04-06_snippet_4\n\nLANGUAGE: Prolog\nCODE:\n```\n?- gtrace(foo::bar).\n```\n\n----------------------------------------\n\nTITLE: Load Context Predicate Mode Declaration\nDESCRIPTION: Specifies the mode and number of proofs for the logtalk_load_context predicate.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/refman/predicates/logtalk_load_context_2.rst#2025-04-06_snippet_1\n\nLANGUAGE: logtalk\nCODE:\n```\nlogtalk_load_context(?callable, -nonvar) - zero_or_more\n```\n\n----------------------------------------\n\nTITLE: Defining Dynamic Predicate for Debugging Status in Logtalk\nDESCRIPTION: Defines a dynamic predicate 'debugging_/0' that is true if debugging is enabled. This predicate is used internally by the debugger to track its state.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/debugger_0.rst.txt#2025-04-06_snippet_0\n\nLANGUAGE: Logtalk\nCODE:\n```\ndebugging_/0\n```\n\n----------------------------------------\n\nTITLE: Accessing another inherited predicate in derived prototype\nDESCRIPTION: Another example of inherited predicate access in a derived prototype.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/roles/NOTES.md#2025-04-06_snippet_4\n\nLANGUAGE: logtalk\nCODE:\n```\ndescendant::bar(X, Y).\n```\n\n----------------------------------------\n\nTITLE: XML Fault Identification in Logtalk\nDESCRIPTION: Private predicate that identifies parts of an XML term that cannot be serialized, providing error details including the path to the problematic element.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/xml_0.rst.txt#2025-04-06_snippet_9\n\nLANGUAGE: Logtalk\nCODE:\n```\nfault(Term,Indentation,SubTerm,Path,Message)\n```\n\n----------------------------------------\n\nTITLE: Loading Fibonacci Example in Logtalk\nDESCRIPTION: Loads the Fibonacci calculation module using logtalk_load/1 predicate.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/threads/fibonacci/NOTES.md#2025-04-06_snippet_0\n\nLANGUAGE: logtalk\nCODE:\n```\nlogtalk_load(fibonacci(loader)).\n```\n\n----------------------------------------\n\nTITLE: Loading Tutor Object in Logtalk\nDESCRIPTION: Demonstrates how to load the tutor object at startup in Logtalk. This is the recommended usage method for the tutor object.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/tutor_0.rst.txt#2025-04-06_snippet_0\n\nLANGUAGE: Logtalk\nCODE:\n```\nlogtalk_load(tutor(loader))\n```\n\n----------------------------------------\n\nTITLE: Content Callback Example\nDESCRIPTION: Example of defining and using a callback predicate for content generation\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/libraries/html.rst#2025-04-06_snippet_8\n\nLANGUAGE: prolog\nCODE:\n```\ncontent(strong('Hello world!')).\n```\n\n----------------------------------------\n\nTITLE: Example Usage of current_object/1 in Logtalk\nDESCRIPTION: Demonstrates how to use the current_object/1 predicate to enumerate all defined objects in a Logtalk system, showing example results.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/refman/predicates/current_object_1.rst#2025-04-06_snippet_2\n\nLANGUAGE: logtalk\nCODE:\n```\n% enumerate the defined objects:\n| ?- current_object(Object).\n\nObject = user ;\nObject = logtalk ;\n...\n```\n\n----------------------------------------\n\nTITLE: Evaluation Error Method Declaration\nDESCRIPTION: The basic syntax and structure of the evaluation_error method that takes an error type as argument.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/refman/methods/evaluation_error_1.rst.txt#2025-04-06_snippet_0\n\nLANGUAGE: prolog\nCODE:\n```\nevaluation_error(Error)\n```\n\n----------------------------------------\n\nTITLE: Deleting Dynamic Objects\nDESCRIPTION: Cleans up by deleting all the dynamically created objects (instance, classes, and abstract class).\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/reflection/NOTES.md#2025-04-06_snippet_10\n\nLANGUAGE: logtalk\nCODE:\n```\nc::delete(i), class::delete(c), abstract_class::delete(ac), object::delete(j).\n```\n\n----------------------------------------\n\nTITLE: Example Usage of dynamic/0 Directive in Logtalk\nDESCRIPTION: Demonstrates how to use the dynamic/0 directive in a Logtalk entity definition to make the entity and all its contents dynamic.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/refman/directives/dynamic_0.rst#2025-04-06_snippet_2\n\nLANGUAGE: logtalk\nCODE:\n```\n:- dynamic.\n```\n\n----------------------------------------\n\nTITLE: Content Callback Example\nDESCRIPTION: Example of defining and using a callback predicate for content generation\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/libraries/html.rst#2025-04-06_snippet_8\n\nLANGUAGE: prolog\nCODE:\n```\ncontent(strong('Hello world!')).\n```\n\n----------------------------------------\n\nTITLE: File Path Resolution in LogTalk\nDESCRIPTION: Predicate that converts relative file paths to absolute paths relative to the tests object path. Handles both relative and absolute paths.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/lgtunit_0.rst.txt#2025-04-06_snippet_34\n\nLANGUAGE: logtalk\nCODE:\n```\nfile_path(File,Path)\n```\n\n----------------------------------------\n\nTITLE: Descendant Object Predicate Access\nDESCRIPTION: Shows access to inherited public and protected predicates from descendant objects\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/scopes/NOTES.md#2025-04-06_snippet_7\n\nLANGUAGE: logtalk\nCODE:\n```\ndescendant::d_foo(Foo).\n```\n\nLANGUAGE: logtalk\nCODE:\n```\ndescendant::d_bar(Bar).\n```\n\n----------------------------------------\n\nTITLE: Defining the context/1 Built-in Method in Logtalk\nDESCRIPTION: Declaration of the context/1 method which returns the execution context for a predicate clause. The method returns a term in the format logtalk(Head,ExecutionContext) where Head is the head of the clause containing the call.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/refman/methods/context_1.rst#2025-04-06_snippet_0\n\nLANGUAGE: logtalk\nCODE:\n```\ncontext(Context)\n```\n\n----------------------------------------\n\nTITLE: Setting Hook Object Using Directive\nDESCRIPTION: Example of using the set_logtalk_flag/2 directive within a source file to specify a hook object for term and goal expansion.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/userman/expansion.rst#2025-04-06_snippet_7\n\nLANGUAGE: logtalk\nCODE:\n```\n:- set_logtalk_flag(hook, hook_object).\n```\n\n----------------------------------------\n\nTITLE: Implementing Dictionary Operations in Logtalk\nDESCRIPTION: Added values/2 predicate to the dictionaries library protocol for retrieving all values from a dictionary.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/RELEASE_NOTES.md#2025-04-06_snippet_56\n\nLANGUAGE: Logtalk\nCODE:\n```\nvalues(Dictionary, Values)\n```\n\n----------------------------------------\n\nTITLE: Version Number Header 4\nDESCRIPTION: Version header showing release version 2.33.2 date\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/RELEASE_NOTES.md#2025-04-06_snippet_143\n\nLANGUAGE: text\nCODE:\n```\n2.33.2 - November 3, 2008\n=========================\n```\n\n----------------------------------------\n\nTITLE: Academic Reference - BibTeX\nDESCRIPTION: BibTeX entries for the academic paper this implementation is based on\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/assumptions/NOTES.md#2025-04-06_snippet_5\n\nLANGUAGE: text\nCODE:\n```\n@inproceedings{DBLP:conf/slp/TarauDF95,\n\tauthor    = {Paul Tarau and Ver{\\'o}nica Dahl and Andrew Fall},\n\ttitle     = {Backtrackable State with Linear Assumptions, Continuations and Hidden Accumulator Grammars},\n\tbooktitle = {ILPS},\n\tyear      = {1995},\n\tpages     = {642},\n\tcrossref  = {DBLP:conf/slp/1995},\n\tbibsource = {DBLP, http://dblp.uni-trier.de}\n}\n\n@proceedings{DBLP:conf/slp/1995,\n\teditor    = {John W. Lloyd},\n\ttitle     = {Logic Programming, Proceedings of the 1995 International Symposium, Portland, Oregon, USA, December 4-7, 1995},\n\tbooktitle = {ILPS},\n\tpublisher = {MIT Press},\n\tyear      = {1995},\n\tisbn      = {0-262-62099-5},\n\tbibsource = {DBLP, http://dblp.uni-trier.de}\n}\n```\n\n----------------------------------------\n\nTITLE: Current Protocol Usage Example\nDESCRIPTION: Example query demonstrating how to enumerate defined protocols, showing sample output with protocols like expanding, monitoring, and forwarding.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/refman/predicates/current_protocol_1.rst.txt#2025-04-06_snippet_2\n\nLANGUAGE: prolog\nCODE:\n```\n% enumerate the defined protocols:\n| ?- current_protocol(Protocol).\n\nProtocol = expanding ;\nProtocol = monitoring ;\nProtocol = forwarding ;\n...\n```\n\n----------------------------------------\n\nTITLE: Loading Code with Term-Expansion Hook in Logtalk\nDESCRIPTION: Initialization directive showing how to load a mock object first and then load the application with the mock as a hook. This allows the term-expansion to take effect when compiling the application code.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/devtools/lgtunit.rst#2025-04-06_snippet_51\n\nLANGUAGE: logtalk\nCODE:\n```\n:- initialization((\n    ...,\n    logtalk_load(mock_login),\n    logtalk_load(user_management, [hook(mock_login)]),\n    ...\n)).\n```\n\n----------------------------------------\n\nTITLE: File Loading Status Predicate\nDESCRIPTION: Enumerates loaded files by backtracking, returning their full paths.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/logtalk_0.rst.txt#2025-04-06_snippet_4\n\nLANGUAGE: logtalk\nCODE:\n```\nloaded_file(Path)\n```\n\n----------------------------------------\n\nTITLE: Asynchronous Prime Number Calculation Using Threads in Logtalk\nDESCRIPTION: Shows how to rewrite the prime number calculation example using threaded_call/1 and threaded_exit/1 for asynchronous execution.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/userman/threads.rst#2025-04-06_snippet_4\n\nLANGUAGE: Logtalk\nCODE:\n```\nprime_numbers(N, M, Primes) :-\n    M > N,\n    N1 is N + (M - N) // 2,\n    N2 is N1 + 1,\n    threaded_call(prime_numbers(N2, M, [], Acc)),\n    threaded_call(prime_numbers(N, N1, Acc, Primes)),\n    threaded_exit(prime_numbers(N2, M, [], Acc)),\n    threaded_exit(prime_numbers(N, N1, Acc, Primes)).\n\nprime_numbers(N, M, Acc, Primes) :-\n    ...\n```\n\n----------------------------------------\n\nTITLE: Defining forall/2 Method Signature in Logtalk\nDESCRIPTION: Basic signature and usage pattern for the forall/2 meta-predicate that implements a generate-and-test loop.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/refman/methods/forall_2.rst.txt#2025-04-06_snippet_0\n\nLANGUAGE: logtalk\nCODE:\n```\nforall(Generator, Test)\n```\n\n----------------------------------------\n\nTITLE: Defining of/2 Predicate in Logtalk\nDESCRIPTION: Constructs an optional term holding the given value. Takes a value and an output parameter that will be unified with an optional term containing the value. Returns exactly one proof.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/optional_0.rst.txt#2025-04-06_snippet_1\n\nLANGUAGE: Logtalk\nCODE:\n```\nof(Value,Optional)\n```\n\n----------------------------------------\n\nTITLE: Creating Empty Set in Logtalk\nDESCRIPTION: Example of creating a new empty set using the new/1 predicate.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/libraries/sets.rst#2025-04-06_snippet_2\n\nLANGUAGE: logtalk\nCODE:\n```\n| ?- set::new(Set).\nSet = []\nyes\n```\n\n----------------------------------------\n\nTITLE: Parallel Process Configuration in Prolog\nDESCRIPTION: Prolog code defining a library path for parallel Logtalk processes using temporary directories.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/userman/programming.rst#2025-04-06_snippet_2\n\nLANGUAGE: prolog\nCODE:\n```\n:- multifile(logtalk_library_path/2).\n:- dynamic(logtalk_library_path/2).\n\nlogtalk_library_path(scratch_directory, Directory) :-\n    temporary_name(lgtXXXXXX, Name),\n    decompose_file_name(Name, _, Prefix, _),\n    atom_concat('/tmp/', Prefix, Directory),\n    (   file_exists(Directory) ->\n        true\n    ;   make_directory(Directory)\n    ).\n```\n\n----------------------------------------\n\nTITLE: Loading Redis Library in Logtalk\nDESCRIPTION: Instructions for loading the Redis library in Logtalk. This snippet shows how to use the logtalk_load/1 predicate to load the library's loader file.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/libraries/redis.rst#2025-04-06_snippet_0\n\nLANGUAGE: Prolog\nCODE:\n```\n| ?- logtalk_load(redis(loader)).\n```\n\n----------------------------------------\n\nTITLE: Collecting Terminals Until Stop Condition in Logtalk\nDESCRIPTION: Collects input terminals until one of the specified stop terminals is found. The stop terminals are excluded from the collected terminals.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/sequence_grammars_0.rst.txt#2025-04-06_snippet_6\n\nLANGUAGE: Logtalk\nCODE:\n```\nwithout(StopTerminals,Terminals)\n```\n\n----------------------------------------\n\nTITLE: Equivalent Implementation of resource_error/1 in Logtalk\nDESCRIPTION: Shows the internal implementation equivalent of the resource_error/1 method. It gets the current context and throws an error term with the resource_error/1 functor and the provided resource type.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/refman/methods/resource_error_1.rst.txt#2025-04-06_snippet_1\n\nLANGUAGE: logtalk\nCODE:\n```\n...,\ncontext(Context),\nthrow(error(resource_error(Resource), Context)).\n```\n\n----------------------------------------\n\nTITLE: Expert System Weather Rules\nDESCRIPTION: Demonstrates an expert system rule query for weather conditions.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/metainterpreters/NOTES.md#2025-04-06_snippet_7\n\nLANGUAGE: logtalk\nCODE:\n```\nrules::prove(weather(Weather)).\n```\n\n----------------------------------------\n\nTITLE: Starting the Logtalk Debugger in Trace Mode\nDESCRIPTION: Example of starting the Logtalk debugger in trace mode using the debugger::trace predicate, which will trace execution of all objects compiled in debug mode.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/userman/debugging.rst.txt#2025-04-06_snippet_18\n\nLANGUAGE: text\nCODE:\n```\n| ?- debugger::trace.\n\nyes\n```\n\n----------------------------------------\n\nTITLE: Querying Capitals\nDESCRIPTION: Tests the include/1 directive as an entity directive by retrieving a list of capitals.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/includes/NOTES.md#2025-04-06_snippet_3\n\nLANGUAGE: logtalk\nCODE:\n```\ncountries::capitals(Capitals).\n```\n\n----------------------------------------\n\nTITLE: Running SRQ All Solutions Example\nDESCRIPTION: Finds all solutions to the SRQ constraint problem\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/constraints/bp/NOTES.md#2025-04-06_snippet_8\n\nLANGUAGE: logtalk\nCODE:\n```\nsrq::q_all.\n```\n\n----------------------------------------\n\nTITLE: Displaying Version Information in Logtalk\nDESCRIPTION: Prints Logtalk, Prolog backend, and kernel versions. This snippet is designed to run in a Jupyter notebook environment.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/design_patterns/behavioral/mediator/NOTES.md#2025-04-06_snippet_0\n\nLANGUAGE: logtalk\nCODE:\n```\n%versions\n```\n\n----------------------------------------\n\nTITLE: Loading a Tester File with the Curly Braces Shorthand\nDESCRIPTION: Example of using the {File} shorthand notation to load and run tests via a Logtalk tester file.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/userman/programming.rst#2025-04-06_snippet_6\n\nLANGUAGE: text\nCODE:\n```\n| ?- {tester}.\n```\n\n----------------------------------------\n\nTITLE: Loading a Tester File with the Curly Braces Shorthand\nDESCRIPTION: Example of using the {File} shorthand notation to load and run tests via a Logtalk tester file.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/userman/programming.rst#2025-04-06_snippet_6\n\nLANGUAGE: text\nCODE:\n```\n| ?- {tester}.\n```\n\n----------------------------------------\n\nTITLE: Connecting iPhone with MicroUSB to Lightning Adapter\nDESCRIPTION: This code shows the use of an adapter to connect an iPhone to a MicroUSB charger, chaining two chargers together.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/design_patterns/structural/adapter/NOTES.md#2025-04-06_snippet_3\n\nLANGUAGE: logtalk\nCODE:\n```\niphone_micro_usb_recharger(iphone)::connect.\n```\n\n----------------------------------------\n\nTITLE: Importing the Listing Category with Private Scope in an Object\nDESCRIPTION: Example of importing the listing category with private scope in a data_store object, with a method that uses the listing functionality for debugging purposes.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/libraries/listing.rst.txt#2025-04-06_snippet_2\n\nLANGUAGE: logtalk\nCODE:\n```\n:- object(data_store,\n    imports(private::listing)).\n\n    debug :-\n        ^^listing(data/4).\n    ...\n\n:- end_object.\n```\n\n----------------------------------------\n\nTITLE: Specifying Pack Versions in Logtalk\nDESCRIPTION: Defines available versions of the pack, including status, URL, checksum, dependencies, and portability information. This predicate can return multiple results for different versions.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/pack_protocol_0.rst.txt#2025-04-06_snippet_4\n\nLANGUAGE: Logtalk\nCODE:\n```\nversion(Version,Status,URL,Checksum,Dependencies,Portability)\n```\n\n----------------------------------------\n\nTITLE: Declaring Modes and Proofs for Context Switch Operator\nDESCRIPTION: Defines the syntax modes and number of proofs for the context switching operator (<<)/2, showing both standard and proxy forms.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/refman/control/context_switch_2.rst.txt#2025-04-06_snippet_0\n\nLANGUAGE: logtalk\nCODE:\n```\n+object_identifier<<+callable - zero_or_more\n{+object_identifier}<<+callable - zero_or_more\n```\n\n----------------------------------------\n\nTITLE: Executing Image Processing with Cascade Pattern in Logtalk\nDESCRIPTION: Demonstrates running the process_image/2 predicate from the cascade object, which uses the cascade pattern to handle errors. The code executes the predicate 10 times to show different possible outcomes.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/cascade/NOTES.md#2025-04-06_snippet_1\n\nLANGUAGE: logtalk\nCODE:\n```\n%%table\ninteger::between(1, 10, _), catch(cascade::process_image(image, Final), Error, true).\n```\n\n----------------------------------------\n\nTITLE: Adding a Term as Last Entry with Reference in Logtalk\nDESCRIPTION: The recordz/3 predicate adds a term as the last term for the given key and returns its reference. It accepts a key, a term to store, and unifies the third argument with a reference to the stored term.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/recorded_database_core_0.rst.txt#2025-04-06_snippet_2\n\nLANGUAGE: logtalk\nCODE:\n```\nrecordz(Key,Term,Reference)\n```\n\n----------------------------------------\n\nTITLE: Disabling Event Tracing in Logtalk\nDESCRIPTION: Uses the abolish_events/5 predicate to stop tracing events.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/userman/events.rst#2025-04-06_snippet_9\n\nLANGUAGE: text\nCODE:\n```\n| ?- abolish_events(_, _, _, _, tracer).\n\nyes\n```\n\n----------------------------------------\n\nTITLE: Defining product/2 Predicate for Number Lists in Logtalk\nDESCRIPTION: Calculates the product of all numbers in a list. Fails if the list is empty.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/numberlistp_0.rst.txt#2025-04-06_snippet_3\n\nLANGUAGE: Logtalk\nCODE:\n```\nproduct(List,Product)\n```\n\n----------------------------------------\n\nTITLE: Simple Test Dialect Implementation\nDESCRIPTION: Example of implementing a custom test dialect by defining a simple_dialect object that implements expanding.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/devtools/lgtunit.rst.txt#2025-04-06_snippet_3\n\nLANGUAGE: logtalk\nCODE:\n```\n:- object(simple_dialect,\n    implements(expanding)).\n\n    term_expansion(begin_of_file, [(:- object(tests,extends(lgtunit)))]).\n    term_expansion((Head :- Body), [test(Head) :- Body]).\n    term_expansion(end_of_file, [(:- end_object)]).\n\n:- end_object.\n```\n\n----------------------------------------\n\nTITLE: Making a Threaded Call with Commitment to First Solution in Logtalk\nDESCRIPTION: Demonstrates using threaded_once/1 to make a threaded call that commits to the first solution found for a non-deterministic goal.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/threads/nondet/NOTES.md#2025-04-06_snippet_4\n\nLANGUAGE: logtalk\nCODE:\n```\nthreaded_once(lists::member(X, [1,2,3])).\n```\n\n----------------------------------------\n\nTITLE: Checking System Versions\nDESCRIPTION: Prints the versions of Logtalk, Prolog backend, and kernel if running as a notebook.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/design_patterns/structural/proxy/NOTES.md#2025-04-06_snippet_0\n\nLANGUAGE: logtalk\nCODE:\n```\n%versions\n```\n\n----------------------------------------\n\nTITLE: Testing ToyCHR in Logtalk\nDESCRIPTION: This snippet shows how to load the tester.lgt file to test the ToyCHR port predicates.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/ports/toychr/NOTES.md#2025-04-06_snippet_1\n\nLANGUAGE: Logtalk\nCODE:\n```\n| ?- logtalk_load(toychr(tester)).\n```\n\n----------------------------------------\n\nTITLE: Creating Virtual Environment\nDESCRIPTION: Shell command example for creating a new virtual environment using lgtenv script.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/devtools/packs.rst#2025-04-06_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\n$ lgtenv -d ~/my_venv -c -p logtalk_packs\n```\n\n----------------------------------------\n\nTITLE: Running Tools Doclet Generator\nDESCRIPTION: Loads and runs the tools_doclet which generates diagrams in the $LOGTALKUSER/tools/doclet/docs directory.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/tools/doclet/SCRIPT.txt#2025-04-06_snippet_2\n\nLANGUAGE: logtalk\nCODE:\n```\n| ?- logtalk_load(doclet(tools_doclet)).\n```\n\n----------------------------------------\n\nTITLE: Loading the lgtdoc Tool in Logtalk\nDESCRIPTION: Command to load the lgtdoc tool into a Logtalk session.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/tools/lgtdoc/NOTES.md#2025-04-06_snippet_0\n\nLANGUAGE: logtalk\nCODE:\n```\n?- logtalk_load(lgtdoc(loader)).\n```\n\n----------------------------------------\n\nTITLE: Testing Code Metrics Tool in Logtalk\nDESCRIPTION: Query to load and run tests for the code_metrics tool.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/tools/code_metrics/NOTES.md#2025-04-06_snippet_1\n\nLANGUAGE: Prolog\nCODE:\n```\n| ?- logtalk_load(code_metrics(tester)).\n```\n\n----------------------------------------\n\nTITLE: Loading non-patched vault objects in Logtalk\nDESCRIPTION: This snippet loads the non-patched vault objects from the 'complements_restrict' directory.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/complements/restrict/NOTES.md#2025-04-06_snippet_1\n\nLANGUAGE: logtalk\nCODE:\n```\nlogtalk_load(complements_restrict(vaults)).\n```\n\n----------------------------------------\n\nTITLE: Defining Dynamic Predicate for Zap to Port in Logtalk\nDESCRIPTION: Defines a dynamic predicate 'zap_to_port_/1' that represents the port to zap to. It takes the port as an argument.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/debugger_0.rst.txt#2025-04-06_snippet_12\n\nLANGUAGE: Logtalk\nCODE:\n```\nzap_to_port_/1\n```\n\n----------------------------------------\n\nTITLE: Three-Way Partition - Logtalk Meta-Predicate\nDESCRIPTION: Partitions a list into three lists (less, equal, greater) using a comparison predicate. Takes closure, list, value, and returns three partitioned lists.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/metap_0.rst.txt#2025-04-06_snippet_5\n\nLANGUAGE: logtalk\nCODE:\n```\npartition(Closure,List,Value,Less,Equal,Greater)\n```\n\n----------------------------------------\n\nTITLE: Declaring call/1-N Meta-predicate Template in Logtalk\nDESCRIPTION: Defines the meta-predicate template for call/1-N, specifying how arguments are treated during compilation.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/refman/methods/call_N.rst.txt#2025-04-06_snippet_1\n\nLANGUAGE: logtalk\nCODE:\n```\ncall(0)\ncall(1, *)\ncall(2, *, *)\n...\n```\n\n----------------------------------------\n\nTITLE: Accessing Existing Instance with Key 'apple'\nDESCRIPTION: Demonstrates accessing an existing instance using the previously used key 'apple'.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/design_patterns/creational/lazy_initialization/NOTES.md#2025-04-06_snippet_4\n\nLANGUAGE: logtalk\nCODE:\n```\nfruit::new(apple, Instance).\n```\n\n----------------------------------------\n\nTITLE: Version Number Header 3\nDESCRIPTION: Version header showing release version 2.34.0 date\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/RELEASE_NOTES.md#2025-04-06_snippet_142\n\nLANGUAGE: text\nCODE:\n```\n2.34.0 - November 26, 2008\n==========================\n```\n\n----------------------------------------\n\nTITLE: Querying inherited predicate in descendant object\nDESCRIPTION: Demonstrates querying a predicate p/1 inherited from the root object in the descendant object.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/dynpred/NOTES.md#2025-04-06_snippet_2\n\nLANGUAGE: logtalk\nCODE:\n```\ndescendant::p(Value).\n```\n\n----------------------------------------\n\nTITLE: Abolish Method Signature in Logtalk\nDESCRIPTION: The signature for the abolish/1 built-in method, which takes a predicate indicator as an argument to abolish dynamically declared predicates.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/refman/methods/abolish_1.rst#2025-04-06_snippet_0\n\nLANGUAGE: logtalk\nCODE:\n```\nabolish(Predicate)\n```\n\n----------------------------------------\n\nTITLE: Defining sum/2 Predicate for Number Lists in Logtalk\nDESCRIPTION: Calculates the sum of all numbers in a list. Returns zero if the list is empty.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/numberlistp_0.rst.txt#2025-04-06_snippet_4\n\nLANGUAGE: Logtalk\nCODE:\n```\nsum(List,Sum)\n```\n\n----------------------------------------\n\nTITLE: Example Usage of type_error/2 in Logtalk\nDESCRIPTION: Example of using the type_error/2 method in Logtalk. It checks if Name is not an atom and throws a type error if the condition is true.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/refman/methods/type_error_2.rst.txt#2025-04-06_snippet_3\n\nLANGUAGE: Logtalk\nCODE:\n```\n...,\n\\+ atom(Name),\ntype_error(atom, Name).\n```\n\n----------------------------------------\n\nTITLE: Enumerating Unit Test Identifiers in Logtalk\nDESCRIPTION: Enumerates, by backtracking, the identifiers of all defined unit tests. This predicate can be used to list all available tests.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/lgtunit_0.rst.txt#2025-04-06_snippet_5\n\nLANGUAGE: Logtalk\nCODE:\n```\ntest(Identifier)\n```\n\n----------------------------------------\n\nTITLE: Domain Constraint with Integer Intersection\nDESCRIPTION: Example of using domain constraints with integers where the intersection of two domains results in a single value that satisfies both constraints.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/attvars/NOTES.md#2025-04-06_snippet_3\n\nLANGUAGE: logtalk\nCODE:\n```\ndomain(integer)::domain(X, [1,2]), domain(integer)::domain(X, [1,3]).\n```\n\n----------------------------------------\n\nTITLE: Testing goal expansion within protected object\nDESCRIPTION: Shows goal expansion within the desc_protected object using a test predicate.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/expansion/NOTES.md#2025-04-06_snippet_11\n\nLANGUAGE: logtalk\nCODE:\n```\ndesc_protected::test_goal_expansion(write(Term), EGoal).\n```\n\n----------------------------------------\n\nTITLE: Pack Specification Object Implementation in Logtalk\nDESCRIPTION: Example of a pack specification object implementing the pack_protocol. Defines pack metadata, version information, dependencies and distribution details.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/devtools/packs.rst#2025-04-06_snippet_15\n\nLANGUAGE: logtalk\nCODE:\n```\n:- object(lflat_pack,\n    implements(pack_protocol)).\n\n    :- info([\n        version is 1:0:0,\n        author is 'Paulo Moura',\n        date is 2021-10-18,\n        comment is 'L-FLAT - Logtalk Formal Language and Automata Toolkit pack spec.'\n    ]).\n\n    name(lflat).\n\n    description('L-FLAT - Logtalk Formal Language and Automata Toolkit').\n\n    license('MIT').\n\n    home('https://github.com/l-flat/lflat').\n\n    version(\n        2:1:0,\n        stable,\n        'https://github.com/l-flat/lflat/archive/refs/tags/v2.1.0.tar.gz',\n        sha256 - '9c298c2a08c4e2a1972c14720ef1498e7f116c7cd8bf7702c8d22d8ff549b6a1',\n        [logtalk @>= 3:42:0],\n        all\n    ).\n\n    version(\n        2:0:2,\n        stable,\n        'https://github.com/l-flat/lflat/archive/refs/tags/v2.0.2.tar.gz',\n        sha256 - '8774b3863efc03bb6c284935885dcf34f69f115656d2496a33a446b6199f3e19',\n        [logtalk @>= 3:36:0],\n        all\n    ).\n\n:- end_object.\n```\n\n----------------------------------------\n\nTITLE: Removing All Breakpoints in Logtalk\nDESCRIPTION: Demonstrates how to remove all breakpoints using the debugger's nospyall/0 predicate.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/userman/debugging.rst#2025-04-06_snippet_15\n\nLANGUAGE: text\nCODE:\n```\n| ?- debugger::nospyall.\n\nAll breakpoints removed.\nyes\n```\n\n----------------------------------------\n\nTITLE: Loading Decorator Pattern Implementation\nDESCRIPTION: This snippet loads the Decorator design pattern sample implementation from the specified file path.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/design_patterns/structural/decorator/NOTES.md#2025-04-06_snippet_1\n\nLANGUAGE: logtalk\nCODE:\n```\nlogtalk_load(design_patterns('structural/decorator/loader')).\n```\n\n----------------------------------------\n\nTITLE: Creating Empty Nested Dictionary in Logtalk\nDESCRIPTION: Example of creating a new empty nested dictionary using the navltree implementation.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/libraries/nested_dictionaries.rst.txt#2025-04-06_snippet_2\n\nLANGUAGE: logtalk\nCODE:\n```\n| ?- navltree::new(Dictionary).\nDictionary = ...\nyes\n```\n\n----------------------------------------\n\nTITLE: Defining Predicate Aliases with uses/2 in Logtalk\nDESCRIPTION: Shows how to use the extended version of the uses/2 directive to declare predicate aliases, which can help resolve conflicts or provide more meaningful names.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/userman/predicates.rst.txt#2025-04-06_snippet_15\n\nLANGUAGE: Logtalk\nCODE:\n```\n:- uses(btrees, [new/1 as new_btree/1]).\n:- uses(queues, [new/1 as new_queue/1]).\n```\n\n----------------------------------------\n\nTITLE: Loading Version Information in Logtalk\nDESCRIPTION: Command to print Logtalk, Prolog backend, and kernel version information when running as a notebook.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/engines/sums/NOTES.md#2025-04-06_snippet_0\n\nLANGUAGE: logtalk\nCODE:\n```\n%versions\n```\n\n----------------------------------------\n\nTITLE: Tolerance-Based Number Equality in Logtalk\nDESCRIPTION: Compares two numbers for close equality using relative and absolute tolerances. Uses a standard formula combining both tolerance types.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/lgtunit_0.rst.txt#2025-04-06_snippet_23\n\nLANGUAGE: logtalk\nCODE:\n```\ntolerance_equal(Number1,Number2,RelativeTolerance,AbsoluteTolerance)\n```\n\n----------------------------------------\n\nTITLE: Converting List of Pairs to Dictionary in Logtalk\nDESCRIPTION: Converts a list of key-value pairs to a dictionary. Takes a list of pairs as input and returns a dictionary.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/dictionaryp_0.rst.txt#2025-04-06_snippet_0\n\nLANGUAGE: Logtalk\nCODE:\n```\nas_dictionary(Pairs,Dictionary)\n```\n\n----------------------------------------\n\nTITLE: Testing Patched Predicate Scope for last/3\nDESCRIPTION: Demonstrates that the patch fixes the predicate scope issue for last/3, correctly generating a permission error for private predicates.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/patching/NOTES.md#2025-04-06_snippet_6\n\nLANGUAGE: logtalk\nCODE:\n```\nbroken::last(_, _, _).\n```\n\n----------------------------------------\n\nTITLE: Multiple Synchronized Predicates\nDESCRIPTION: Declaration of multiple synchronized predicates that share the same mutex for thread safety.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/userman/threads.rst#2025-04-06_snippet_8\n\nLANGUAGE: logtalk\nCODE:\n```\n:- synchronized([\n    odd_numbers/2,\n    even_numbers/2]).\n```\n\n----------------------------------------\n\nTITLE: Load Prolog Benchmark File\nDESCRIPTION: Loads a specific Prolog benchmark file for comparison testing.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/bench/NOTES.md#2025-04-06_snippet_5\n\nLANGUAGE: logtalk\nCODE:\n```\n['$LOGTALKUSER/examples/bench/boyer.pl'].\n```\n\n----------------------------------------\n\nTITLE: Defining Map Meta-Predicate with Closure in Logtalk\nDESCRIPTION: Example of defining a map/2 meta-predicate that uses a closure argument in Logtalk. This demonstrates how to declare and implement a meta-predicate with a closure argument.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/userman/predicates.rst#2025-04-06_snippet_34\n\nLANGUAGE: Logtalk\nCODE:\n```\n:- public(map/2).\n:- meta_predicate(map(1, *)).\n\nmap(_, []).\nmap(Closure, [Arg| Args]) :-\n    call(Closure, Arg),\n    map(Closure, Args).\n```\n\n----------------------------------------\n\nTITLE: Checking Versions\nDESCRIPTION: Prints version information for Logtalk, Prolog backend, and kernel\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/constraints/bp/NOTES.md#2025-04-06_snippet_0\n\nLANGUAGE: logtalk\nCODE:\n```\n%versions\n```\n\n----------------------------------------\n\nTITLE: Temporal Finished By Relation\nDESCRIPTION: Checks if Interval1 is finished by Interval2. Returns zero or one solutions.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/intervalp_0.rst.txt#2025-04-06_snippet_13\n\nLANGUAGE: Logtalk\nCODE:\n```\nfinished_by(Interval1,Interval2)\n```\n\n----------------------------------------\n\nTITLE: Usage Examples - logtalk_compile/2\nDESCRIPTION: Practical examples showing how to compile different types of source files with various compiler flags.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/refman/predicates/logtalk_compile_2.rst.txt#2025-04-06_snippet_2\n\nLANGUAGE: prolog\nCODE:\n```\n% compile to disk the \"list\" source file in the\n% current directory using default compiler flags:\n| ?- logtalk_compile(list, []).\n\n% compile to disk the \"tree\" source file in the \"types\"\n% library directory with the source_data flag turned on:\n| ?- logtalk_compile(types(tree), [source_data(on)]).\n\n% compile to disk the \"file_system\" source file in the\n% current directory with portability warnings suppressed:\n| ?- logtalk_compile(file_system, [portability(silent)]).\n```\n\n----------------------------------------\n\nTITLE: Executing Code After File Loading in Logtalk\nDESCRIPTION: Example of using the initialization/1 directive to call the init/0 predicate after loading the source file containing the directive.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/refman/directives/initialization_1.rst.txt#2025-04-06_snippet_1\n\nLANGUAGE: logtalk\nCODE:\n```\n:- initialization(init).\n```\n\n----------------------------------------\n\nTITLE: Creating macOS-Style Button\nDESCRIPTION: Creates a button with macOS appearance using the abstract factory pattern and renders it.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/design_patterns/creational/abstract_factory/NOTES.md#2025-04-06_snippet_3\n\nLANGUAGE: logtalk\nCODE:\n```\nfactory(macos)::create_button(Button), Button::paint.\n```\n\n----------------------------------------\n\nTITLE: Usage Modes and Number of Proofs for term_expansion/2 in Logtalk\nDESCRIPTION: Specifies the expected input/output modes and number of proof solutions for the term_expansion/2 method. It accepts a non-variable term and returns either a single non-variable term or a list of non-variable terms.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/refman/methods/term_expansion_2.rst#2025-04-06_snippet_1\n\nLANGUAGE: Logtalk\nCODE:\n```\nterm_expansion(+nonvar, -nonvar) - zero_or_one\nterm_expansion(+nonvar, -list(nonvar)) - zero_or_one\n```\n\n----------------------------------------\n\nTITLE: Using the Timer Object for Performance Testing in Logtalk\nDESCRIPTION: Uses the timer object to execute a message 1000 times and calculate the average execution time.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/profiling/NOTES.md#2025-04-06_snippet_13\n\nLANGUAGE: logtalk\nCODE:\n```\ntimer::timer(list::length([1, 2, 3], _), 1000, Time).\n```\n\n----------------------------------------\n\nTITLE: Delaying Goal Execution in Logtalk\nDESCRIPTION: The freeze/2 predicate delays the execution of a goal until a variable is bound. It takes a variable and a goal as arguments.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/coroutining_0.rst.txt#2025-04-06_snippet_2\n\nLANGUAGE: Logtalk\nCODE:\n```\nfreeze(Variable,Goal)\n```\n\n----------------------------------------\n\nTITLE: Encoding URL to Base64URL in Logtalk\nDESCRIPTION: This example demonstrates how to encode a URL into Base64URL format using the base64url::generate/2 predicate.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/library/base64/NOTES.md#2025-04-06_snippet_3\n\nLANGUAGE: Prolog\nCODE:\n```\n| ?- base64url::generate(atom(Base64URL), 'https://logtalk.org').\nBase64URL == 'aHR0cHM6Ly9sb2d0YWxrLm9yZw'\nyes\n```\n\n----------------------------------------\n\nTITLE: Binary Tree Generator Implementation\nDESCRIPTION: Complex example showing how to generate arbitrary binary trees with depth control.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/libraries/arbitrary.rst.txt#2025-04-06_snippet_7\n\nLANGUAGE: logtalk\nCODE:\n```\n:- category(binary_tree).\n\n    :- multifile(type::type/1).\n    type::type(node(_)).\n\n    :- multifile(type::check/2).\n    type::check(node(_), Term) :-\n        (   check(Term) ->\n            true\n        ;   var(Term) ->\n            throw(instantiation_error)\n        ;   throw(type_error(node(_), Term))\n        ).\n\n    check(Term) :-\n        (   integer(Term) ->\n            true\n        ;   compound(Term),\n            Term = node(Left, Right),\n            check(Left),\n            check(Right)\n        ).\n\n    :- multifile(arbitrary::arbitrary/1).\n    arbitrary::arbitrary(node(_)).\n\n    :- multifile(arbitrary::arbitrary/2).\n    arbitrary::arbitrary(node(Depth), Arbitrary) :-\n    (   Depth > 1 ->\n        NewDepth is Depth - 1,\n        type::arbitrary(\n            types_frequency([\n                integer - 1,\n                compound(\n                    node,\n                    [\n                        types([node(NewDepth), integer]),\n                        types([node(NewDepth), integer])\n                    ]\n                ) - 3\n            ]),\n            Arbitrary\n        )\n    ;   type::arbitrary(\n    integer, Arbitrary)\n    ).\n\n:- end_category.\n```\n\n----------------------------------------\n\nTITLE: Defining instantiates_class/2-3 Predicate Syntax in Logtalk\nDESCRIPTION: Defines the syntax of the instantiates_class/2-3 predicate which enumerates pairs of objects where the first instantiates the second. The third argument specifies the relation scope.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/refman/predicates/instantiates_class_2_3.rst.txt#2025-04-06_snippet_0\n\nLANGUAGE: logtalk\nCODE:\n```\ninstantiates_class(Instance, Class)\ninstantiates_class(Instance, Class, Scope)\n```\n\n----------------------------------------\n\nTITLE: Disabling Event Support in Logtalk\nDESCRIPTION: Turns off event support to clean up after the profiling demonstration.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/profiling/NOTES.md#2025-04-06_snippet_14\n\nLANGUAGE: logtalk\nCODE:\n```\nset_logtalk_flag(events, deny).\n```\n\n----------------------------------------\n\nTITLE: Conditional Closure Application for Expected Terms in Logtalk\nDESCRIPTION: Predicates that apply closures based on the state of the expected term. These allow for different actions to be taken depending on whether the term holds a value or an error.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/expected_1.rst.txt#2025-04-06_snippet_1\n\nLANGUAGE: Logtalk\nCODE:\n```\nif_expected(Closure)\n\nif_unexpected(Closure)\n\nif_expected_or_else(ExpectedClosure,UnexpectedClosure)\n```\n\n----------------------------------------\n\nTITLE: Generating Random Node Identifier in Logtalk\nDESCRIPTION: Generates a list of six random bytes that can be used as a node identifier for version 1 UUIDs. This is useful when a MAC address is not available or should not be disclosed for privacy reasons.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/uuid_protocol_0.rst.txt#2025-04-06_snippet_3\n\nLANGUAGE: Logtalk\nCODE:\n```\nrandom_node(Node)\n```\n\n----------------------------------------\n\nTITLE: Constructing Heap from List in Logtalk\nDESCRIPTION: Constructs a heap from a list of key-value pairs. Takes a list of pairs and returns a heap.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/heapp_0.rst.txt#2025-04-06_snippet_7\n\nLANGUAGE: Logtalk\nCODE:\n```\nas_heap(List,Heap)\n```\n\n----------------------------------------\n\nTITLE: Loading the Inlining Example\nDESCRIPTION: Loads the 'inlining' example using the Logtalk load predicate.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/inlining/NOTES.md#2025-04-06_snippet_1\n\nLANGUAGE: logtalk\nCODE:\n```\nlogtalk_load(inlining(loader)).\n```\n\n----------------------------------------\n\nTITLE: Defining Primary Declaration for Multifile Predicates\nDESCRIPTION: Example showing the primary declaration of a multifile predicate in an object, establishing both the scope (public) and the multifile property for the predicate.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/userman/predicates.rst#2025-04-06_snippet_26\n\nLANGUAGE: logtalk\nCODE:\n```\n:- object(main).\n\n    :- public(a/1).\n    :- multifile(a/1).\n    a(1).\n\n:- end_object.\n```\n\n----------------------------------------\n\nTITLE: Printing Port Profiling Data in Logtalk\nDESCRIPTION: Prints a table with all port profiling data. This predicate is compiled with the 'static' flag and provides one proof.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/ports_profiler_0.rst.txt#2025-04-06_snippet_2\n\nLANGUAGE: Logtalk\nCODE:\n```\ndata/0\n```\n\n----------------------------------------\n\nTITLE: Defining Deterministic Test in lgtunit Tool\nDESCRIPTION: Code snippet showing how to define a test in the lgtunit tool that checks if a goal is deterministic, i.e. succeeds once without leaving a choice-point.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/RELEASE_NOTES.md#2025-04-06_snippet_100\n\nLANGUAGE: Logtalk\nCODE:\n```\n% Example test definition\n:- det(goal_to_test).\n```\n\n----------------------------------------\n\nTITLE: Loading Versions Information in Logtalk\nDESCRIPTION: Prints the versions of Logtalk, the Prolog backend, and the kernel when running as a notebook.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/threads/nondet/NOTES.md#2025-04-06_snippet_0\n\nLANGUAGE: logtalk\nCODE:\n```\n%versions\n```\n\n----------------------------------------\n\nTITLE: Defining Base Object Class in Logtalk\nDESCRIPTION: Implements the root object class that contains predicates common to all objects. This class serves as the root of the inheritance graph.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/tutorial/reflection.rst#2025-04-06_snippet_0\n\nLANGUAGE: logtalk\nCODE:\n```\n:- object(object,\n    instantiates(class)).\n\n    % predicates common to all objects\n\n:- end_object.\n```\n\n----------------------------------------\n\nTITLE: Defining Message Prefixes and Streams in Logtalk\nDESCRIPTION: Example showing how to define custom message prefixes and output streams for different message types using message_prefix_stream/4 predicate.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/userman/printing.rst#2025-04-06_snippet_3\n\nLANGUAGE: logtalk\nCODE:\n```\n:- multifile(logtalk::message_prefix_stream/4).\n:- dynamic(logtalk::message_prefix_stream/4).\n\nlogtalk::message_prefix_stream(comment, my_app, '% ', user_output).\nlogtalk::message_prefix_stream(warning, my_app, '* ', user_error).\n```\n\n----------------------------------------\n\nTITLE: Broadcasting Multiple Messages\nDESCRIPTION: Example of sending multiple messages to the same object in a single query.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/userman/messages.rst.txt#2025-04-06_snippet_4\n\nLANGUAGE: logtalk\nCODE:\n```\n| ?- Object::(Message1, Message2, ...).\n```\n\n----------------------------------------\n\nTITLE: Defining Message Prefixes and Streams in Logtalk\nDESCRIPTION: Example showing how to define custom message prefixes and output streams for different message types using message_prefix_stream/4 predicate.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/userman/printing.rst#2025-04-06_snippet_3\n\nLANGUAGE: logtalk\nCODE:\n```\n:- multifile(logtalk::message_prefix_stream/4).\n:- dynamic(logtalk::message_prefix_stream/4).\n\nlogtalk::message_prefix_stream(comment, my_app, '% ', user_output).\nlogtalk::message_prefix_stream(warning, my_app, '* ', user_error).\n```\n\n----------------------------------------\n\nTITLE: Listing Properties of Aliased Predicate\nDESCRIPTION: Shows properties of the income/1 predicate which is an alias for salary/1, added by the dynamic category.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/complements/allow/NOTES.md#2025-04-06_snippet_12\n\nLANGUAGE: logtalk\nCODE:\n```\n%%table\nemployee::predicate_property(income(_), Property).\n```\n\n----------------------------------------\n\nTITLE: Defining Logtalk3 Compiler Flags Grammar in BNF\nDESCRIPTION: Specifies the grammar rule for Logtalk3 compiler flags. This rule defines the structure of compiler flag declarations in Logtalk3 code.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/refman/grammar.rst#2025-04-06_snippet_9\n\nLANGUAGE: BNF\nCODE:\n```\ncompiler_flag ::=\n   flag \"(\" flag_value \")\"\n```\n\n----------------------------------------\n\nTITLE: Listing Term Variables in Logtalk\nDESCRIPTION: Defines a deprecated predicate to list all variables in a term. It's recommended to use the standard 'term_variables/2' predicate instead.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/termp_0.rst.txt#2025-04-06_snippet_8\n\nLANGUAGE: Logtalk\nCODE:\n```\nvariables(Term,List)\n```\n\n----------------------------------------\n\nTITLE: Using logtalk_tester with GitHub Issue Creation\nDESCRIPTION: This shell command demonstrates how to use the logtalk_tester script with the -b option to automatically create GitHub issues for failed tests. It specifies the Prolog backend, source directory, and GitHub repository URL.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/tools/issue_creator/NOTES.md#2025-04-06_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\n$ logtalk_tester \\\n\t-p gnu \\\n\t-b github \\\n\t-s \"/home/jdoe/foo/\" \\\n\t-u https://github.com/jdoe/foo/tree/55aa900775befa135e0d5b48ea63098df8b97f5c/\n```\n\n----------------------------------------\n\nTITLE: Retrieving All Class Superclasses in Logtalk\nDESCRIPTION: Predicate that returns all class superclasses through backtracking. Takes a single parameter Superclass which can be instantiated or a variable to be bound to superclass objects.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/class_hierarchyp_0.rst.txt#2025-04-06_snippet_6\n\nLANGUAGE: logtalk\nCODE:\n```\nsuperclass(Superclass)\n```\n\n----------------------------------------\n\nTITLE: Using find_at_most/4 Meta-Predicate (Limit 3)\nDESCRIPTION: This snippet tests the find_at_most/4 meta-predicate, which collects up to 3 solutions of a(X) into a list.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/engines/emetas/NOTES.md#2025-04-06_snippet_5\n\nLANGUAGE: logtalk\nCODE:\n```\nemetas::find_at_most(3, X, a(X), Xs).\n```\n\n----------------------------------------\n\nTITLE: Using the assertion/1-2 Predicate in Logtalk Unit Tests\nDESCRIPTION: Demonstrates how to use the assertion predicate for checking test results, which provides better debugging information than direct checking.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/devtools/lgtunit.rst#2025-04-06_snippet_27\n\nLANGUAGE: logtalk\nCODE:\n```\n   test(compare_3_order_less) :-\n       compare(Order, 1, 2),\n       ^^assertion(Order == (<)).\n```\n\n----------------------------------------\n\nTITLE: Solving Process C Execution Constraints\nDESCRIPTION: This query computes the number of times process 'c' can be executed and its dependencies using the process_model object.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/process_modeling/NOTES.md#2025-04-06_snippet_3\n\nLANGUAGE: logtalk\nCODE:\n```\n%%table\nprocess_model::solve([c(C)], Dependencies).\n```\n\n----------------------------------------\n\nTITLE: Define Loop Predicate\nDESCRIPTION: Defines a recursive loop predicate that continuously fetches from the engine queue.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/engines/ebench/NOTES.md#2025-04-06_snippet_6\n\nLANGUAGE: logtalk\nCODE:\n```\nassertz((loop :- threaded_engine_fetch(_),loop)).\n```\n\n----------------------------------------\n\nTITLE: Checking Logtalk Version Information\nDESCRIPTION: Prints the versions of Logtalk, Prolog backend, and kernel for verification purposes.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/design_patterns/behavioral/observer/NOTES.md#2025-04-06_snippet_0\n\nLANGUAGE: logtalk\nCODE:\n```\n%versions\n```\n\n----------------------------------------\n\nTITLE: Loading the expansion example\nDESCRIPTION: Loads the expansion example files using the Logtalk load predicate.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/expansion/NOTES.md#2025-04-06_snippet_1\n\nLANGUAGE: logtalk\nCODE:\n```\nlogtalk_load(expansion(loader)).\n```\n\n----------------------------------------\n\nTITLE: Listing Stage Performers\nDESCRIPTION: Shows all horsemen currently on stage using the stage object's list predicate.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/now_you_see_me/NOTES.md#2025-04-06_snippet_2\n\nLANGUAGE: logtalk\nCODE:\n```\nstage::list.\n```\n\n----------------------------------------\n\nTITLE: Using Format Predicates in Logtalk Objects\nDESCRIPTION: Illustrates how to use the format/2 and format/3 predicates in Logtalk objects or categories using the uses/2 directive.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/library/format/NOTES.md#2025-04-06_snippet_2\n\nLANGUAGE: Logtalk\nCODE:\n```\n:- uses(format, [\n\tformat/2, format/3\n]).\n```\n\n----------------------------------------\n\nTITLE: Adding Pack Notes in Logtalk\nDESCRIPTION: Provides notes for specific actions and versions of the pack. This predicate can return multiple results for different combinations of actions and versions.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/pack_protocol_0.rst.txt#2025-04-06_snippet_5\n\nLANGUAGE: Logtalk\nCODE:\n```\nnote(Action,Version,Note)\n```\n\n----------------------------------------\n\nTITLE: Entity and Predicate Scope Syntax in Logtalk using BNF\nDESCRIPTION: Specifies the three visibility levels (public, protected, private) used in Logtalk to control access to entity predicates and entity relationships.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/refman/grammar.rst.txt#2025-04-06_snippet_13\n\nLANGUAGE: bnf\nCODE:\n```\nscope ::=\n   \"public\"\n   | \"protected\"\n   | \"private\"\n```\n\n----------------------------------------\n\nTITLE: Executing Shell Commands for Documentation in Logtalk\nDESCRIPTION: The 'shell_command/1' predicate defines a table of shell commands to convert intermediate documentation files into user-friendly formats. Commands are executed in the order they are defined.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/doclet_0.rst.txt#2025-04-06_snippet_2\n\nLANGUAGE: Logtalk\nCODE:\n```\nshell_command(Command)\n```\n\n----------------------------------------\n\nTITLE: Using Suppress Goal Hook\nDESCRIPTION: Examples of setting and using the suppress_goal_hook to remove goals from clause bodies.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/libraries/hook_objects.rst.txt#2025-04-06_snippet_8\n\nLANGUAGE: logtalk\nCODE:\n```\n| ?- set_logtalk_flag(hook, suppress_goal_hook).\n```\n\nLANGUAGE: logtalk\nCODE:\n```\n:- set_logtalk_flag(hook, suppress_goal_hook).\n```\n\nLANGUAGE: logtalk\nCODE:\n```\nfoo :-\n    bar,\n    -- baz,\n    quux.\n```\n\n----------------------------------------\n\nTITLE: Engine Task Loop\nDESCRIPTION: Implementation of a recursive loop for handling tasks in a threaded engine.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/userman/threads.rst#2025-04-06_snippet_12\n\nLANGUAGE: logtalk\nCODE:\n```\nloop :-\n    threaded_engine_fetch(Task),\n    handle(Task),\n    loop.\n```\n\n----------------------------------------\n\nTITLE: Testing Recorded Database Library in Logtalk\nDESCRIPTION: Command to load and run tests for the recorded_database library predicates using the tester.lgt file.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/libraries/recorded_database.rst#2025-04-06_snippet_1\n\nLANGUAGE: logtalk\nCODE:\n```\n| ?- logtalk_load(recorded_database(tester)).\n```\n\n----------------------------------------\n\nTITLE: Loading the Redis Library in Logtalk\nDESCRIPTION: Command to load the Redis client library in Logtalk. This needs to be executed in a Logtalk console to make the Redis functionality available in your application.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/libraries/redis.rst.txt#2025-04-06_snippet_0\n\nLANGUAGE: prolog\nCODE:\n```\n| ?- logtalk_load(redis(loader)).\n```\n\n----------------------------------------\n\nTITLE: Enabling Debug Messages for a Component\nDESCRIPTION: Query to enable all debug messages for the 'xyz' component, allowing all debug messages to be displayed.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/tools/debug_messages/NOTES.md#2025-04-06_snippet_5\n\nLANGUAGE: Prolog\nCODE:\n```\n| ?- debug_messages::enable(xyx).\n```\n\n----------------------------------------\n\nTITLE: Implementing Cleanup in Logtalk Tests\nDESCRIPTION: Demonstrates how to clean up temporary files and directories after test completion using protected predicates. Relative paths are interpreted relative to the test object location.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/devtools/lgtunit.rst.txt#2025-04-06_snippet_28\n\nLANGUAGE: logtalk\nCODE:\n```\ncleanup :-\n    ^^clean_file('foo.txt'),\n    ^^clean_directory('tmp').\n```\n\n----------------------------------------\n\nTITLE: Browsing man files in Logtalk\nDESCRIPTION: New predicate added to the help tool for inline browsing of man files in Logtalk.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/RELEASE_NOTES.md#2025-04-06_snippet_6\n\nLANGUAGE: Logtalk\nCODE:\n```\nhelp::man(Topic).\n```\n\n----------------------------------------\n\nTITLE: Creating an Instance of a Class\nDESCRIPTION: Creates an instance 'i' of the class 'c' and retrieves all instances of 'c'.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/reflection/NOTES.md#2025-04-06_snippet_7\n\nLANGUAGE: logtalk\nCODE:\n```\nc::new(i), c::instances(Instances).\n```\n\n----------------------------------------\n\nTITLE: Protocol Creation Predicate Signature\nDESCRIPTION: Signature of the create_protocol/3 predicate that creates new dynamic protocols.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/refman/predicates/create_protocol_3.rst#2025-04-06_snippet_0\n\nLANGUAGE: prolog\nCODE:\n```\ncreate_protocol(Identifier, Relations, Directives)\n```\n\n----------------------------------------\n\nTITLE: Running N-Queens Example\nDESCRIPTION: Solves the N-Queens constraint problem\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/constraints/bp/NOTES.md#2025-04-06_snippet_6\n\nLANGUAGE: logtalk\nCODE:\n```\nqueens3::top.\n```\n\n----------------------------------------\n\nTITLE: Check Empty Dictionary\nDESCRIPTION: Checks if a dictionary is empty. Returns true or false.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/nested_dictionary_protocol_0.rst.txt#2025-04-06_snippet_1\n\nLANGUAGE: logtalk\nCODE:\n```\nempty(Dictionary)\n```\n\n----------------------------------------\n\nTITLE: Establishing Concentric Relations in Logtalk\nDESCRIPTION: Creates concentric relations between pairs of polygons using the add_tuple/1 method of the concentric object.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/polygons/NOTES.md#2025-04-06_snippet_2\n\nLANGUAGE: logtalk\nCODE:\n```\nconcentric::add_tuple([t, s]).\n\nconcentric::add_tuple([p, h]).\n```\n\n----------------------------------------\n\nTITLE: Verifying Class Variable Sharing Across Instances\nDESCRIPTION: Confirms that the class variable update made through instance1 is reflected when accessed through other instances.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/classvars/NOTES.md#2025-04-06_snippet_4\n\nLANGUAGE: logtalk\nCODE:\n```\ninstance2::cv(Value2), instance3::cv(Value3).\n```\n\n----------------------------------------\n\nTITLE: Testing Logtalk Queue Library\nDESCRIPTION: Command to load and run tests for the queue library predicates.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/libraries/queues.rst#2025-04-06_snippet_1\n\nLANGUAGE: logtalk\nCODE:\n```\n| ?- logtalk_load(queues(tester)).\n```\n\n----------------------------------------\n\nTITLE: Meta-interpreter Solver Query\nDESCRIPTION: Uses the basic meta-interpreter to solve a query for p(X).\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/metainterpreters/NOTES.md#2025-04-06_snippet_3\n\nLANGUAGE: logtalk\nCODE:\n```\n%%table\ndatabase::solve(p(X)).\n```\n\n----------------------------------------\n\nTITLE: Compiling otherwise Constructs\nDESCRIPTION: Change to compile otherwise -> Goal and otherwise *-> Goal constructs as Goal when otherwise/0 is a built-in predicate, printing a deprecated warning.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/RELEASE_NOTES.md#2025-04-06_snippet_20\n\nLANGUAGE: Logtalk\nCODE:\n```\notherwise -> Goal\notherwise *-> Goal\n```\n\n----------------------------------------\n\nTITLE: Logtalk Linter Hook Predicate Definition\nDESCRIPTION: New experimental linter hook predicate enabling user-defined linter warnings. The predicate is named logtalk_linter_hook/7 but no implementation details are provided in the text.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/RELEASE_NOTES.md#2025-04-06_snippet_36\n\n\n\n----------------------------------------\n\nTITLE: Synchronized Database Updates with threaded_exit and Variable Binding\nDESCRIPTION: Performs three synchronized database updates with variable binding using threaded_exit/1, demonstrating how to retrieve results from threaded computations.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/threads/sync/NOTES.md#2025-04-06_snippet_7\n\nLANGUAGE: logtalk\nCODE:\n```\nthreaded_exit(nasty2::update_db(X)), threaded_exit(nasty2::update_db(Y)), threaded_exit(nasty2::update_db(Z)).\n```\n\n----------------------------------------\n\nTITLE: Defining Compiler Flags in BNF for Logtalk\nDESCRIPTION: Defines the formal grammar for compiler flags in Logtalk. Compiler flags are represented as a flag identifier followed by a flag value, enclosed in parentheses.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/refman/grammar.rst.txt#2025-04-06_snippet_33\n\nLANGUAGE: bnf\nCODE:\n```\ncompiler_flag ::=\n   flag \"(\" flag_value \")\"\n```\n\n----------------------------------------\n\nTITLE: Accessing Object Parameters Using this/1 Method in Logtalk\nDESCRIPTION: Demonstrates accessing all object parameters at once using the built-in this/1 method. This approach allows accessing multiple parameters in a single call.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/userman/objects.rst.txt#2025-04-06_snippet_12\n\nLANGUAGE: logtalk\nCODE:\n```\n:- object(foo(_Bar, _Baz, ...)).\n\n    ...\n    baz :-\n        this(foo(_, Baz, ...)),\n        baz(Baz),\n        ... .\n```\n\n----------------------------------------\n\nTITLE: Listing Registries in Logtalk\nDESCRIPTION: Prints a list of all defined registries, including how they are defined (git, archive, or directory) and if they are pinned.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/registries_0.rst.txt#2025-04-06_snippet_0\n\nLANGUAGE: logtalk\nCODE:\n```\nlist/0\n```\n\n----------------------------------------\n\nTITLE: Ensuring Logtalk File is Loaded Only Once\nDESCRIPTION: Shows how to use the logtalk_load/2 predicate with the reload(skip) option to ensure a file is only loaded once, similar to Prolog's ensure_loaded/1 directive.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/faq/usability.rst#2025-04-06_snippet_1\n\nLANGUAGE: Logtalk\nCODE:\n```\nlogtalk_load(File, [reload(skip)])\n```\n\n----------------------------------------\n\nTITLE: Accessing Nested Values\nDESCRIPTION: The value/3 predicate retrieves a value using a path (single key or list of keys for nested pairs). Fails if path doesn't exist.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/pairs_0.rst.txt#2025-04-06_snippet_4\n\nLANGUAGE: logtalk\nCODE:\n```\nvalue(Pairs,Path,Value)\n```\n\n----------------------------------------\n\nTITLE: Parsing Shell Commands with DCG in Logtalk\nDESCRIPTION: Uses the shell object to parse command-line shell input using DCG rules.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/dcgs/NOTES.md#2025-04-06_snippet_8\n\nLANGUAGE: logtalk\nCODE:\n```\nshell::parse(\"pwd; cd ..; ls -a\", L).\n```\n\n----------------------------------------\n\nTITLE: Accessing Object Parameters Using this/1 Method in Logtalk\nDESCRIPTION: Demonstrates accessing all object parameters at once using the built-in this/1 method. This approach allows accessing multiple parameters in a single call.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/userman/objects.rst.txt#2025-04-06_snippet_12\n\nLANGUAGE: logtalk\nCODE:\n```\n:- object(foo(_Bar, _Baz, ...)).\n\n    ...\n    baz :-\n        this(foo(_, Baz, ...)),\n        baz(Baz),\n        ... .\n```\n\n----------------------------------------\n\nTITLE: Reset Specific Counter Predicate\nDESCRIPTION: Public predicate that resets a specific named counter. Takes an atom as input parameter. Compiled with static and synchronized flags for thread safety.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/genint_core_0.rst.txt#2025-04-06_snippet_1\n\nLANGUAGE: logtalk\nCODE:\n```\nreset_genint(Counter)\n```\n\n----------------------------------------\n\nTITLE: Recursively Processing Directory of Logtalk Source Files\nDESCRIPTION: Recursively processes a directory of source files using the given options. It has a static compilation flag and accepts a path and list of options as arguments.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/code_metric_0.rst.txt#2025-04-06_snippet_1\n\nLANGUAGE: Logtalk\nCODE:\n```\nprocess_rdirectory(Path,Options)\n```\n\n----------------------------------------\n\nTITLE: Summing Natural Numbers with EDCG\nDESCRIPTION: Uses the list_sums object to calculate the sum of natural numbers from 1 to 4, starting with an accumulator value of 0.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/edcgs/NOTES.md#2025-04-06_snippet_4\n\nLANGUAGE: logtalk\nCODE:\n```\nlist_sums::sum_first_n(4, 0, Sum).\n```\n\n----------------------------------------\n\nTITLE: Cloning Gasoline Car Prototype\nDESCRIPTION: Creates a clone of the updated prototype and describes its properties\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/design_patterns/creational/prototype/NOTES.md#2025-04-06_snippet_5\n\nLANGUAGE: logtalk\nCODE:\n```\ncar::clone(Clone), Clone::describe.\n```\n\n----------------------------------------\n\nTITLE: Object Wrapper Hook Predicate Definition\nDESCRIPTION: Defines a hook predicate that wraps Prolog file contents into a Logtalk object. Takes a Name parameter for the object name and Relations parameter as a list of object entity relations. Requires static and context_switching_calls compilation flags.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/object_wrapper_hook_2.rst.txt#2025-04-06_snippet_0\n\nLANGUAGE: logtalk\nCODE:\n```\nobject_wrapper_hook(Name,Relations)\n```\n\n----------------------------------------\n\nTITLE: Testing Child Driver Access\nDESCRIPTION: Tests if Wheeler can drive the car through the proxy object, demonstrating access control.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/design_patterns/structural/proxy/NOTES.md#2025-04-06_snippet_6\n\nLANGUAGE: logtalk\nCODE:\n```\ncar_proxy(packard_645, wheeler)::drive.\n```\n\n----------------------------------------\n\nTITLE: Mode Templates for Prototype Extensions in Logtalk\nDESCRIPTION: Template and mode declarations for prototype extensions in Logtalk. These templates specify the expected types of arguments in the object directive when extending other objects.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/refman/directives/object_1_5.rst#2025-04-06_snippet_6\n\nLANGUAGE: logtalk\nCODE:\n```\nobject(+object_identifier,\n    extends(+extended_objects))\n\nobject(+object_identifier,\n    implements(+implemented_protocols),\n    extends(+extended_objects))\n\nobject(+object_identifier,\n    imports(+imported_categories),\n    extends(+extended_objects))\n\nobject(+object_identifier,\n    implements(+implemented_protocols),\n    imports(+imported_categories),\n    extends(+extended_objects))\n```\n\n----------------------------------------\n\nTITLE: Implementing Mock Login Using Hot Patching in Logtalk\nDESCRIPTION: Defines a complementing category to patch the user management object with test credentials.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/tools/lgtunit/NOTES.md#2025-04-06_snippet_43\n\nLANGUAGE: logtalk\nCODE:\n```\n:- category(mock_login,\n\t\tcomplements(user_management)).\n\n\t\tlogin(jdoe, test123).\n\n:- end_category.\n```\n\n----------------------------------------\n\nTITLE: Setting a Hook Object with Logtalk Directive\nDESCRIPTION: Directive to set a hook object for pre-processing the current source file. This is an alternative to using the hook/1 compiler option.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/libraries/hook_flows.rst#2025-04-06_snippet_2\n\nLANGUAGE: logtalk\nCODE:\n```\n:- set_logtalk_flag(hook, HookObject).\n```\n\n----------------------------------------\n\nTITLE: Loading PDDL Parser Library in Logtalk\nDESCRIPTION: Command to load all entities in the PDDL parser library using the loader file.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/contributions/pddl_parser.rst#2025-04-06_snippet_0\n\nLANGUAGE: prolog\nCODE:\n```\n?- logtalk_load(pddl_parser(loader)).\n```\n\n----------------------------------------\n\nTITLE: Testing Output Stream Operations in Logtalk\nDESCRIPTION: Example of testing output predicates using set_text_output and text_output_assertion to verify that characters are written correctly to output streams.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/devtools/lgtunit.rst#2025-04-06_snippet_38\n\nLANGUAGE: logtalk\nCODE:\n```\ntest(put_char_2_02, true(Assertion)) :-\n       ^^set_text_output(out, 'qwert'),\n       put_char(out, y),\n       ^^text_output_assertion(out, 'qwerty', Assertion).\n```\n\n----------------------------------------\n\nTITLE: Expanding Library Paths in Logtalk\nDESCRIPTION: Examples of using the expand_library_path/2 predicate from the logtalk built-in object to expand library aliases into full paths.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/refman/predicates/logtalk_library_path_2.rst#2025-04-06_snippet_3\n\nLANGUAGE: Prolog\nCODE:\n```\n| ?- logtalk::expand_library_path(viewpoints, Path).\n\nPath = '/Users/pmoura/logtalk/examples/viewpoints/'.\nyes\n\n| ?- logtalk::expand_library_path(viewpoints('loader.lgt'), Path).\n\nPath = '/Users/pmoura/logtalk/examples/viewpoints/loader.lgt'.\nyes\n```\n\n----------------------------------------\n\nTITLE: Accessing inherited predicate in derived prototype\nDESCRIPTION: Shows that derived prototypes inherit predicates from their parents.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/roles/NOTES.md#2025-04-06_snippet_3\n\nLANGUAGE: logtalk\nCODE:\n```\ndescendant::foo(Foo).\n```\n\n----------------------------------------\n\nTITLE: Predicate Declaration\nDESCRIPTION: Declaration syntax for the extends_category predicate with 2 and 3 arguments.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/refman/predicates/extends_category_2_3.rst#2025-04-06_snippet_0\n\nLANGUAGE: prolog\nCODE:\n```\nextends_category(Category, ParentCategory)\nextends_category(Category, ParentCategory, Scope)\n```\n\n----------------------------------------\n\nTITLE: Solving Sudoku using CLP(FD) in Logtalk\nDESCRIPTION: Demonstrates solving a Sudoku puzzle using CLP(FD) constraints in Logtalk.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/constraints/swipl/NOTES.md#2025-04-06_snippet_4\n\nLANGUAGE: logtalk\nCODE:\n```\nsoduku::sudoku(Rows), append(Rows, Vs), label(Vs).\n```\n\n----------------------------------------\n\nTITLE: Defining Class Instances in Logtalk\nDESCRIPTION: Syntax for creating class instances in Logtalk. The directive can be used with different combinations of options to implement protocols, import categories, and instantiate classes.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/refman/directives/object_1_5.rst#2025-04-06_snippet_2\n\nLANGUAGE: logtalk\nCODE:\n```\nobject(Object,\n    instantiates(Classes))\n\nobject(Object,\n    implements(Protocols),\n    instantiates(Classes))\n\nobject(Object,\n    imports(Categories),\n    instantiates(Classes))\n\nobject(Object,\n    implements(Protocols),\n    imports(Categories),\n    instantiates(Classes))\n```\n\n----------------------------------------\n\nTITLE: Definition of the else/0 directive in Logtalk\nDESCRIPTION: The basic syntax for the else/0 directive in Logtalk. It starts an else branch when performing conditional compilation, where code following this directive is compiled if and only if the goal in the matching if/1 or elif/1 directive is false.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/refman/directives/else_0.rst.txt#2025-04-06_snippet_0\n\nLANGUAGE: Logtalk\nCODE:\n```\nelse\n```\n\n----------------------------------------\n\nTITLE: Querying newly asserted predicate in class instance\nDESCRIPTION: Shows that the newly asserted predicate p2/1 is available for class instances.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/dynpred/NOTES.md#2025-04-06_snippet_9\n\nLANGUAGE: logtalk\nCODE:\n```\ninstance::p2(X).\n```\n\n----------------------------------------\n\nTITLE: Deleting Spy Points in Logtalk\nDESCRIPTION: Predicate to delete all matching spy points. It takes four arguments: Event, Object, Message, and Sender. It has a compilation flag of 'static' and returns one proof.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/monitorp_0.rst.txt#2025-04-06_snippet_6\n\nLANGUAGE: Logtalk\nCODE:\n```\ndel_spy_points(Event,Object,Message,Sender)\n```\n\n----------------------------------------\n\nTITLE: Testing Patched is_proper_list/1 Predicate with Valid List\nDESCRIPTION: Verifies the patched implementation of the is_proper_list/1 predicate in the broken object with a proper list input [1,2,3].\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/patching/NOTES.md#2025-04-06_snippet_3\n\nLANGUAGE: logtalk\nCODE:\n```\nbroken::is_proper_list([1,2,3]).\n```\n\n----------------------------------------\n\nTITLE: Map Operations in Logtalk\nDESCRIPTION: Shows the use of map/2-3 meta-predicates with Prolog built-in predicates for various operations.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/metapredicates/NOTES.md#2025-04-06_snippet_10\n\nLANGUAGE: logtalk\nCODE:\n```\nmeta::map(integer, [1,2,3,4,5]).\n```\n\nLANGUAGE: logtalk\nCODE:\n```\nmeta::map(char_code, [a,b,c,d,e], Codes).\n```\n\n----------------------------------------\n\nTITLE: Querying a_date Object for Year Property\nDESCRIPTION: Demonstrates accessing a property (year) directly available in the a_date object.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/design_patterns/structural/twin/NOTES.md#2025-04-06_snippet_2\n\nLANGUAGE: logtalk\nCODE:\n```\na_date::year(Year).\n```\n\n----------------------------------------\n\nTITLE: Defining abolish_events/5 Predicate Signature\nDESCRIPTION: Defines the signature and basic structure of the abolish_events/5 predicate that removes event monitoring settings.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/refman/predicates/abolish_events_5.rst.txt#2025-04-06_snippet_0\n\nLANGUAGE: prolog\nCODE:\n```\nabolish_events(Event, Object, Message, Sender, Monitor)\n```\n\n----------------------------------------\n\nTITLE: Defining Log Points with Custom Messages in Logtalk\nDESCRIPTION: Examples of defining log points that print custom messages when execution reaches them. Log points can use static text or dynamically insert values using $KEYWORD placeholders.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/userman/debugging.rst.txt#2025-04-06_snippet_17\n\nLANGUAGE: text\nCODE:\n```\n| ?- debugger::log(agent, 99, '% At the secret headquarters!').\n     Log point added.\nyes\n\n| ?- debugger::log(loop, 42, 'Message $PREDICATE from $SENDER at thread $THREAD').\n     Log point added.\nyes\n```\n\n----------------------------------------\n\nTITLE: Defining Dynamic Predicate for Context Spy Points in Logtalk\nDESCRIPTION: Defines a dynamic predicate 'spying_context_/4' that represents a table of context spy points. It takes sender, this, self, and goal as arguments.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/debugger_0.rst.txt#2025-04-06_snippet_8\n\nLANGUAGE: Logtalk\nCODE:\n```\nspying_context_/4\n```\n\n----------------------------------------\n\nTITLE: Defining Dynamic Predicate for Context Spy Points in Logtalk\nDESCRIPTION: Defines a dynamic predicate 'spying_context_/4' that represents a table of context spy points. It takes sender, this, self, and goal as arguments.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/debugger_0.rst.txt#2025-04-06_snippet_8\n\nLANGUAGE: Logtalk\nCODE:\n```\nspying_context_/4\n```\n\n----------------------------------------\n\nTITLE: Dictionary Unit Definition in Logtalk\nDESCRIPTION: Defines a dictionary unit with lookup functionality using key-value pairs stored in a list. The implementation includes recursive lookup through the list structure.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/units/NOTES.md#2025-04-06_snippet_0\n\nLANGUAGE: logtalk\nCODE:\n```\n:- unit(dict(ST)).\n\ndict(ST).\n\nlookup(KEY, VALUE) :- ST=[KEY=VALUE|_].\nlookup(KEY, VALUE) :- ST=[_|STx], dict(STx) :> lookup(KEY, VALUE).\n```\n\n----------------------------------------\n\nTITLE: Loading Meta Library in Logtalk\nDESCRIPTION: This snippet demonstrates how to load the main entities of the meta library in Logtalk using the loader.lgt file.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/library/meta/NOTES.md#2025-04-06_snippet_0\n\nLANGUAGE: Logtalk\nCODE:\n```\n| ?- logtalk_load(meta(loader)).\n```\n\n----------------------------------------\n\nTITLE: XML Pretty Printing in Logtalk\nDESCRIPTION: Outputs a formatted representation of an XML document to the current output stream, making the XML structure more readable for humans.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/xml_0.rst.txt#2025-04-06_snippet_3\n\nLANGUAGE: Logtalk\nCODE:\n```\npp(XMLDocument)\n```\n\n----------------------------------------\n\nTITLE: Defining Domain Error in Logtalk\nDESCRIPTION: Specifies the structure for a domain error in Logtalk, where Term is of the correct type but not in the specified Domain.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/type_0.rst.txt#2025-04-06_snippet_6\n\nLANGUAGE: prolog\nCODE:\n```\ndomain_error(Domain,Term)\n```\n\n----------------------------------------\n\nTITLE: Defining Counter Predicate in Logtalk\nDESCRIPTION: Defines the 'counter/2' predicate representing a table of the number of mutations available per type.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/mutations_store_0.rst.txt#2025-04-06_snippet_1\n\nLANGUAGE: Logtalk\nCODE:\n```\ncounter(Type,N)\n```\n\n----------------------------------------\n\nTITLE: Loading Roots Example in Logtalk\nDESCRIPTION: Loads the roots example and required library files using the loader utility.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/roots/NOTES.md#2025-04-06_snippet_1\n\nLANGUAGE: logtalk\nCODE:\n```\nlogtalk_load(roots(loader)).\n```\n\n----------------------------------------\n\nTITLE: Importing the listing Category with Private Scope in Logtalk\nDESCRIPTION: Example of an object importing the listing category with private scope and using it for debugging purposes.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/libraries/listing.rst#2025-04-06_snippet_2\n\nLANGUAGE: logtalk\nCODE:\n```\n:- object(data_store,\n    imports(private::listing)).\n\n    debug :-\n        ^^listing(data/4).\n    ...\n\n:- end_object.\n```\n\n----------------------------------------\n\nTITLE: Disabling Debug Messages for a Component\nDESCRIPTION: Query to disable all debug messages for the 'xyz' component.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/tools/debug_messages/NOTES.md#2025-04-06_snippet_7\n\nLANGUAGE: Prolog\nCODE:\n```\n| ?- debug_messages::disable(xyx).\n```\n\n----------------------------------------\n\nTITLE: Retrieving Single Pengine Answer On Demand\nDESCRIPTION: Demonstrates retrieving a single answer from a previously created pengine query.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/pengines/NOTES.md#2025-04-06_snippet_7\n\nLANGUAGE: logtalk\nCODE:\n```\nengines::answer(my_question, Answer).\n```\n\n----------------------------------------\n\nTITLE: Printing Version Information in Logtalk\nDESCRIPTION: Command to display version information for Logtalk, Prolog backend, and kernel when running in a notebook environment.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/errors/NOTES.md#2025-04-06_snippet_0\n\nLANGUAGE: logtalk\nCODE:\n```\n%versions\n```\n\n----------------------------------------\n\nTITLE: Loading Logtalk Module in SWI-Prolog\nDESCRIPTION: Prolog query to load the Logtalk module in SWI-Prolog after installing the Logtalk pack.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/adapters/NOTES.md#2025-04-06_snippet_3\n\nLANGUAGE: Prolog\nCODE:\n```\n?- use_module(library(logtalk)).\n```\n\n----------------------------------------\n\nTITLE: Extracting Time Components from ULID\nDESCRIPTION: Demonstrates how to extract individual date and time components from a ULID.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/libraries/ulid.rst#2025-04-06_snippet_8\n\nLANGUAGE: logtalk\nCODE:\n```\n| ?- ulid(atom)::timestamp('01H0N8CDAZK75C5H3BJSGS4VCQ', Year, Month, Day, Hours, Minutes, Seconds, Milliseconds).\nYear = 2023, Month = 5, Day = 17, Hours = 16, Minutes = 23, Seconds = 38, Milliseconds = 591\nyes\n```\n\n----------------------------------------\n\nTITLE: Finding Next Pair in Dictionary in Logtalk\nDESCRIPTION: Finds the next key-value pair in a dictionary given a key. Fails if there is no next pair.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/dictionaryp_0.rst.txt#2025-04-06_snippet_16\n\nLANGUAGE: Logtalk\nCODE:\n```\nnext(Dictionary,Key,Next,Value)\n```\n\n----------------------------------------\n\nTITLE: Loading the Base Employee Object\nDESCRIPTION: Loads the employee object with complements flag set to allow, making it available for complementation by categories.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/complements/allow/NOTES.md#2025-04-06_snippet_1\n\nLANGUAGE: logtalk\nCODE:\n```\nlogtalk_load(complements_allow(employee)).\n```\n\n----------------------------------------\n\nTITLE: Restoring Virtual Environment from Requirements File\nDESCRIPTION: Logtalk/Prolog query to restore a virtual environment configuration from a previously saved requirements file.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/devtools/packs.rst.txt#2025-04-06_snippet_13\n\nLANGUAGE: prolog\nCODE:\n```\n| ?- packs::restore('requirements.lgt').\n```\n\n----------------------------------------\n\nTITLE: Fixed List Processing Predicate Implementation\nDESCRIPTION: Corrected implementation of the every_other predicate that handles all input cases correctly.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/devtools/lgtunit.rst#2025-04-06_snippet_19\n\nLANGUAGE: prolog\nCODE:\n```\nevery_other([], []).\nevery_other([H| T], L) :-\n    every_other(T, H, L).\n\nevery_other([], X, [X]).\nevery_other([_| T], X, [X| L]) :-\n    every_other(T, L).\n```\n\n----------------------------------------\n\nTITLE: Set Text Output with Alias in Logtalk\nDESCRIPTION: Creates a temporary file with the given text contents and associates it with the specified alias. Uses default stream options for file operations.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/lgtunit_0.rst.txt#2025-04-06_snippet_42\n\nLANGUAGE: logtalk\nCODE:\n```\nset_text_output(Alias,Contents)\n```\n\n----------------------------------------\n\nTITLE: Predicate Template - library/1\nDESCRIPTION: Creates all supported diagrams for a library using default options.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/diagrams_1.rst.txt#2025-04-06_snippet_8\n\nLANGUAGE: logtalk\nCODE:\n```\nlibrary(Library)\n```\n\n----------------------------------------\n\nTITLE: Loading Logtalk Meta-predicates Example\nDESCRIPTION: Loads the metapredicates example and required library files in Logtalk.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/metapredicates/NOTES.md#2025-04-06_snippet_0\n\nLANGUAGE: logtalk\nCODE:\n```\nlogtalk_load(metapredicates(loader)).\n```\n\n----------------------------------------\n\nTITLE: Delegation with Non-Implementing Delegate\nDESCRIPTION: Shows delegation behavior when the delegate doesn't implement the required predicate.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/delegates/NOTES.md#2025-04-06_snippet_3\n\nLANGUAGE: logtalk\nCODE:\n```\na_delegator::set_delegate(an_object), a_delegator::operation(String).\n```\n\n----------------------------------------\n\nTITLE: Defining Test Label Predicate in Prolog\nDESCRIPTION: Predicate that classifies generated integer tests as either 'even' or 'odd' for test coverage analysis.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/devtools/lgtunit.rst#2025-04-06_snippet_17\n\nLANGUAGE: prolog\nCODE:\n```\nlabel(I, Label) :-\n    (   I mod 2 =:= 0 ->\n        Label = even\n    ;   Label = odd\n    ).\n```\n\n----------------------------------------\n\nTITLE: Retrieving Commit Hash with Git Library in Logtalk\nDESCRIPTION: Demonstrates the usage of the commit_hash/2 predicate to obtain the hash of the latest commit in a git repository.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/libraries/git.rst#2025-04-06_snippet_4\n\nLANGUAGE: prolog\nCODE:\n```\n| ?- git::commit_hash('/Users/pmoura/Documents/Logtalk/logtalk3', Hash).\n\nHash = eccaa1a2a9495fef441915bbace84e0a4b0394a2\nyes\n```\n\n----------------------------------------\n\nTITLE: Creating Brick Stack Relationships\nDESCRIPTION: This code creates relationships between bricks to form a stack.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/bricks/NOTES.md#2025-04-06_snippet_5\n\nLANGUAGE: logtalk\nCODE:\n```\nbrick_stack::add_tuple([c,d]), brick_stack::add_tuple([b,c]), brick_stack::add_tuple([a,b]).\n```\n\n----------------------------------------\n\nTITLE: Retrieving Priority-Ordered Messages\nDESCRIPTION: Retrieves messages from the pmq priority queue in order of priority from highest to lowest.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/engines/pmq/NOTES.md#2025-04-06_snippet_3\n\nLANGUAGE: logtalk\nCODE:\n```\npmq::messages(Messages).\n```\n\n----------------------------------------\n\nTITLE: Loading Versions Information in Logtalk\nDESCRIPTION: Prints Logtalk, Prolog backend, and kernel versions when running as a notebook.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/design_patterns/creational/builder/NOTES.md#2025-04-06_snippet_0\n\nLANGUAGE: logtalk\nCODE:\n```\n%versions\n```\n\n----------------------------------------\n\nTITLE: Loading the Activation Nodes Example\nDESCRIPTION: This snippet loads the activation nodes example using the Logtalk loader.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/ncl/activation_nodes/NOTES.md#2025-04-06_snippet_1\n\nLANGUAGE: logtalk\nCODE:\n```\nlogtalk_load(activation_nodes(loader)).\n```\n\n----------------------------------------\n\nTITLE: Defining the retractall/1 method signature in Logtalk\nDESCRIPTION: Defines the retractall/1 method which retracts all clauses with a matching head for an object dynamic predicate. This method can be used with predicates from the current object, self, or an explicit object.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/refman/methods/retractall_1.rst.txt#2025-04-06_snippet_0\n\nLANGUAGE: Logtalk\nCODE:\n```\nretractall(Head)\n```\n\n----------------------------------------\n\nTITLE: Using Optional Terms with Value in Logtalk\nDESCRIPTION: Demonstrates how to use the 'optional' parametric object to handle an optional term with a value, using the 'or_else' predicate.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/libraries/optionals.rst.txt#2025-04-06_snippet_3\n\nLANGUAGE: Prolog\nCODE:\n```\n| ?- optional::of(1, Optional), optional(Optional)::or_else(Term, 0).\nOptional = optional(1),\nTerm = 1\nyes\n```\n\n----------------------------------------\n\nTITLE: Accessing Specific Handbook Topics in Logtalk\nDESCRIPTION: Predicate that opens the Texinfo version of the Handbook at a specific topic. It accepts atoms, predicate indicators, or non-terminal indicators as parameters.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/help_info_support_0.rst.txt#2025-04-06_snippet_1\n\nLANGUAGE: Prolog\nCODE:\n```\nhandbook/1\n```\n\n----------------------------------------\n\nTITLE: Declaring Synchronized Predicates Template\nDESCRIPTION: Template and mode declarations for the synchronized/1 directive, showing how to declare synchronized predicates and non-terminals.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/refman/directives/synchronized_1.rst.txt#2025-04-06_snippet_0\n\nLANGUAGE: logtalk\nCODE:\n```\nsynchronized(+predicate_indicator_term)\nsynchronized(+non_terminal_indicator_term)\n```\n\n----------------------------------------\n\nTITLE: Alias Directive Template and Modes in Logtalk\nDESCRIPTION: Defines the template and modes for the alias directive, specifying the expected types for entity identifier and alias lists.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/refman/directives/alias_2.rst.txt#2025-04-06_snippet_1\n\nLANGUAGE: logtalk\nCODE:\n```\nalias(@entity_identifier, +list(predicate_indicator_alias))\nalias(@entity_identifier, +list(non_terminal_indicator_alias))\n```\n\n----------------------------------------\n\nTITLE: Testing private term expansion\nDESCRIPTION: Demonstrates that term expansion does not occur for private predicates in the exp_private object.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/expansion/NOTES.md#2025-04-06_snippet_6\n\nLANGUAGE: logtalk\nCODE:\n```\nexp_private::expand_term(8, Term).\n```\n\n----------------------------------------\n\nTITLE: Running Parallel Process Setup\nDESCRIPTION: Command to start Logtalk with parallel process configuration using GNU Prolog.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/userman/programming.rst.txt#2025-04-06_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ gplgt --init-goal \"consult('parallel_logtalk_processes_setup.pl')\"\n```\n\n----------------------------------------\n\nTITLE: Retrieve Text Output Contents with Options in Logtalk\nDESCRIPTION: Returns the contents of a temporary file opened with specific options and alias. Useful for inspecting the actual output produced by code being tested.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/lgtunit_0.rst.txt#2025-04-06_snippet_50\n\nLANGUAGE: logtalk\nCODE:\n```\ntext_output_contents(Alias,Contents,Options)\n```\n\n----------------------------------------\n\nTITLE: Auxiliary Predicate Counter in Logtalk Unit Testing\nDESCRIPTION: Counter for generating unique auxiliary predicate names during test compilation.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/lgtunit_0.rst.txt#2025-04-06_snippet_74\n\nLANGUAGE: Logtalk\nCODE:\n```\nauxiliary_predicate_counter_(Counter)\n```\n\n----------------------------------------\n\nTITLE: Loading Logtalk and SICStus Example Files\nDESCRIPTION: Loads the SICStus example files and necessary library supporting files to run the example code.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/sicstus/NOTES.md#2025-04-06_snippet_0\n\nLANGUAGE: logtalk\nCODE:\n```\nlogtalk_load(sicstus(loader)).\n```\n\n----------------------------------------\n\nTITLE: Creating Subclass2 Instance\nDESCRIPTION: Creates a new instance of subclass2 using the new/1 predicate.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/metaclasses/NOTES.md#2025-04-06_snippet_4\n\nLANGUAGE: logtalk\nCODE:\n```\nsubclass2::new(I).\n```\n\n----------------------------------------\n\nTITLE: Defining HTML Doctype in Logtalk\nDESCRIPTION: Private predicate for specifying the HTML doctype. Takes a single argument representing the doctype declaration.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/html_0.rst.txt#2025-04-06_snippet_3\n\nLANGUAGE: Logtalk\nCODE:\n```\ndoctype(DocType)\n```\n\n----------------------------------------\n\nTITLE: Validating MAC Addresses with DCG in Logtalk\nDESCRIPTION: Uses the macaddr object to validate a MAC address using DCG rules.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/dcgs/NOTES.md#2025-04-06_snippet_2\n\nLANGUAGE: logtalk\nCODE:\n```\nmacaddr::valid(\"00:1e:4a:ef:72:8b\").\n```\n\n----------------------------------------\n\nTITLE: Testing Setof/3 Wrapper in Logtalk\nDESCRIPTION: Demonstrates the use of a setof/3 wrapper meta-predicate in Logtalk.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/metapredicates/NOTES.md#2025-04-06_snippet_3\n\nLANGUAGE: logtalk\nCODE:\n```\nwrappers_client::p(L).\n```\n\nLANGUAGE: logtalk\nCODE:\n```\nwrappers_client::q(L).\n```\n\n----------------------------------------\n\nTITLE: Private Dynamic Table for Enabled Components in Logtalk\nDESCRIPTION: Private dynamic predicate that maintains a table of components with currently enabled debug and debug(Group) messages. This predicate supports retrieval of component terms through backtracking.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/debug_messages_0.rst.txt#2025-04-06_snippet_6\n\nLANGUAGE: logtalk\nCODE:\n```\nenabled_/1\n```\n\n----------------------------------------\n\nTITLE: Version Number Header 2\nDESCRIPTION: Version header showing release version 2.34.1 date\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/RELEASE_NOTES.md#2025-04-06_snippet_141\n\nLANGUAGE: text\nCODE:\n```\n2.34.1 - December 15, 2008\n==========================\n```\n\n----------------------------------------\n\nTITLE: Testing Dynamic Binding - Final Value\nDESCRIPTION: Tests final value after retraction to confirm return to original state.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/super_calls/NOTES.md#2025-04-06_snippet_9\n\nLANGUAGE: logtalk\nCODE:\n```\nbottom::value(Value).\n```\n\n----------------------------------------\n\nTITLE: Loading PDDL Parser in Logtalk\nDESCRIPTION: Instructions for loading all entities in the PDDL parser library using the loader.lgt file.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/contributions/pddl_parser/README.txt#2025-04-06_snippet_0\n\nLANGUAGE: Prolog\nCODE:\n```\n?- logtalk_load(pddl_parser(loader)).\n```\n\n----------------------------------------\n\nTITLE: Attempting to Update a Pinned Pack in Logtalk\nDESCRIPTION: Shows the error message received when trying to update a pinned pack.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/devtools/packs.rst.txt#2025-04-06_snippet_38\n\nLANGUAGE: logtalk\nCODE:\n```\n| ?- packs::update(bar).\n```\n\n----------------------------------------\n\nTITLE: Installing Ubuntu Linux Dependencies\nDESCRIPTION: Commands to install required dependencies on Ubuntu Linux systems using apt package manager.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/tools/packs/NOTES.md#2025-04-06_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\n$ sudo apt update\n$ sudo apt install coreutils curl wget libarchive-tools gnupg2 git direnv\n```\n\n----------------------------------------\n\nTITLE: Loading the Class Variables Example\nDESCRIPTION: Loads the classvars example using Logtalk's module loading system.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/classvars/NOTES.md#2025-04-06_snippet_1\n\nLANGUAGE: logtalk\nCODE:\n```\nlogtalk_load(classvars(loader)).\n```\n\n----------------------------------------\n\nTITLE: Documenting Multiple Valid Modes for atom_concat/3\nDESCRIPTION: Two mode directives specifying different valid usage patterns for the standard atom_concat/3 predicate: one for splitting atoms into prefix and suffix, and one for concatenating two atoms.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/userman/predicates.rst#2025-04-06_snippet_6\n\nLANGUAGE: logtalk\nCODE:\n```\n:- mode(atom_concat(?atom, ?atom, +atom), one_or_more).\n:- mode(atom_concat(+atom, +atom, -atom), one).\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Usage Examples of phrase/2 in Logtalk\nDESCRIPTION: Provides examples of how to use the phrase/2 method with different scopes: local, self, and explicit object.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/refman/methods/phrase_2.rst#2025-04-06_snippet_3\n\nLANGUAGE: Logtalk\nCODE:\n```\nphrase(NonTerminal, Input)\nphrase(::NonTerminal, Input)\nphrase(Object::NonTerminal, Input)\n```\n\n----------------------------------------\n\nTITLE: Examples of threaded_exit/1-2 usage in Logtalk\nDESCRIPTION: Demonstrates how to use threaded_exit/1-2 in different contexts: retrieving results from an asynchronous goal, retrieving results from an asynchronous self-message, and retrieving results from an asynchronous message to any object.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/refman/predicates/threaded_exit_1_2.rst.txt#2025-04-06_snippet_2\n\nLANGUAGE: logtalk\nCODE:\n```\nthreaded_exit(Goal)\nthreaded_exit(::Goal)\nthreaded_exit(Object::Goal)\n```\n\n----------------------------------------\n\nTITLE: Documenting Multiple Valid Modes for atom_concat/3\nDESCRIPTION: Two mode directives specifying different valid usage patterns for the standard atom_concat/3 predicate: one for splitting atoms into prefix and suffix, and one for concatenating two atoms.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/userman/predicates.rst#2025-04-06_snippet_6\n\nLANGUAGE: logtalk\nCODE:\n```\n:- mode(atom_concat(?atom, ?atom, +atom), one_or_more).\n:- mode(atom_concat(+atom, +atom, -atom), one).\n```\n\n----------------------------------------\n\nTITLE: Print Message Usage Example\nDESCRIPTION: Example showing how to use print_message to output information about redefining an entity within Logtalk core functionality.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/refman/methods/print_message_3.rst#2025-04-06_snippet_2\n\nLANGUAGE: prolog\nCODE:\n```\n..., logtalk::print_message(information, core, redefining_entity(object, foo)), ...\n```\n\n----------------------------------------\n\nTITLE: Running Multi-threaded Takeuchi Function with Larger Input\nDESCRIPTION: This snippet demonstrates running the multi-threaded version of the Takeuchi function with larger input parameters (21, 14, 7) and timing the execution.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/threads/tak/NOTES.md#2025-04-06_snippet_5\n\nLANGUAGE: logtalk\nCODE:\n```\ntime(tak(3)::tak(21, 14, 7, R)).\n```\n\n----------------------------------------\n\nTITLE: Defining imports_category/2-3 Predicate in Prolog\nDESCRIPTION: Specifies the syntax and modes for the imports_category/2-3 predicate, which enumerates importation relations between objects and categories. The predicate can be called with 2 or 3 arguments, with the third argument representing the scope of the importation.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/refman/predicates/imports_category_2_3.rst#2025-04-06_snippet_0\n\nLANGUAGE: Prolog\nCODE:\n```\nimports_category(Object, Category)\n\nimports_category(Object, Category, Scope)\n```\n\n----------------------------------------\n\nTITLE: Versatile Test Dialect in Logtalk\nDESCRIPTION: Demonstrates a more versatile test dialect supporting various test outcomes including success, determinism, failure, and exception throwing.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/devtools/lgtunit.rst#2025-04-06_snippet_10\n\nLANGUAGE: Logtalk\nCODE:\n```\nsucceeds(Test) :- Goal.\ndeterministic(Test) :- Goal.\nfails(Test) :- Goal.\nthrows(Test, Ball) :- Goal.\nthrows(Test, Balls) :- Goal.\n```\n\n----------------------------------------\n\nTITLE: Benchmark Plain Query\nDESCRIPTION: Times execution of a basic query with 1000 repetitions.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/bench/NOTES.md#2025-04-06_snippet_9\n\nLANGUAGE: logtalk\nCODE:\n```\ntime((between(1,1000,_),top,fail;true)).\n```\n\n----------------------------------------\n\nTITLE: Wrapping Prolog File as Logtalk Object\nDESCRIPTION: Illustrates various ways to use the object_wrapper_hook to wrap the contents of a plain Prolog file as a Logtalk object, optionally implementing a protocol or with specific object relations.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/libraries/hook_objects.rst#2025-04-06_snippet_6\n\nLANGUAGE: Prolog\nCODE:\n```\n| ?- logtalk_load('plain.pl', [hook(object_wrapper_hook)]).\n```\n\nLANGUAGE: Prolog\nCODE:\n```\n| ?- logtalk_load('world_1.pl', [hook(object_wrapper_hook(some_protocol))]).\n```\n\nLANGUAGE: Prolog\nCODE:\n```\n| ?- logtalk_load('foo.pl', [hook(object_wrapper_hook(bar,[imports(some_category))]).\n```\n\n----------------------------------------\n\nTITLE: Declaring bfs_interpreter Object in Logtalk\nDESCRIPTION: Defines the bfs_interpreter object, which implements a breadth-first interpreter for general logic programs. It implements the interpreterp protocol and uses the counter and queue objects.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/bfs_interpreter_0.rst.txt#2025-04-06_snippet_0\n\nLANGUAGE: Logtalk\nCODE:\n```\nbfs_interpreter\n```\n\n----------------------------------------\n\nTITLE: Generating Multiple Expected Terms with Default Error in Logtalk\nDESCRIPTION: Constructs expected terms with the values generated by calling the given goal. If the goal fails, it returns an expected term with the atom 'fail'. If the goal throws an error, it returns that error in the expected term.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/expected_0.rst.txt#2025-04-06_snippet_6\n\nLANGUAGE: Logtalk\nCODE:\n```\nfrom_generator(Goal,Value,Expected)\n```\n\n----------------------------------------\n\nTITLE: Declaring threaded_notify/1 Predicate Signature\nDESCRIPTION: Shows the predicate signatures and supported argument patterns for threaded_notify/1. Accepts either a single term or a list of terms as notifications.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/refman/predicates/threaded_notify_1.rst.txt#2025-04-06_snippet_0\n\nLANGUAGE: prolog\nCODE:\n```\nthreaded_notify(Term)\nthreaded_notify([Term| Terms])\n```\n\n----------------------------------------\n\nTITLE: Dynamic Table for Referenced Logtalk Files\nDESCRIPTION: Dynamic predicate representing a table of referenced Logtalk files in the diagram. It stores file paths and can be queried for zero or more results.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/file_diagram_1.rst.txt#2025-04-06_snippet_4\n\nLANGUAGE: Logtalk\nCODE:\n```\nreferenced_logtalk_file_(Path)\n```\n\n----------------------------------------\n\nTITLE: Testing the ids Library in Logtalk\nDESCRIPTION: Command to test the 'ids' library predicates by loading the tester.lgt file.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/libraries/ids.rst#2025-04-06_snippet_1\n\nLANGUAGE: logtalk\nCODE:\n```\n| ?- logtalk_load(ids(tester)).\n```\n\n----------------------------------------\n\nTITLE: Predicate Template - libraries/1\nDESCRIPTION: Creates all supported diagrams for libraries using default options and 'libraries' as filename prefix.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/diagrams_1.rst.txt#2025-04-06_snippet_2\n\nLANGUAGE: logtalk\nCODE:\n```\nlibraries(Libraries)\n```\n\n----------------------------------------\n\nTITLE: Creating an Instantiable Class\nDESCRIPTION: Creates a new instantiable class 'c' and displays its interface.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/reflection/NOTES.md#2025-04-06_snippet_6\n\nLANGUAGE: logtalk\nCODE:\n```\nclass::new(c), c::print.\n```\n\n----------------------------------------\n\nTITLE: Benchmark Infinite Stream Engine Creation\nDESCRIPTION: Creates 2000 engines with infinite repeat goals and measures performance.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/engines/ebench/NOTES.md#2025-04-06_snippet_4\n\nLANGUAGE: logtalk\nCODE:\n```\ntime((between(1,2000,I),atom_number(A,I),threaded_engine_create(_,repeat,A),fail)).\n```\n\n----------------------------------------\n\nTITLE: Defining Dynamic Predicate for Triggered Breakpoints in Logtalk\nDESCRIPTION: Defines a dynamic predicate 'triggered_breakpoint_/4' that represents a table of defined triggered breakpoints. It takes entity, line, trigger entity, and trigger line as arguments.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/debugger_0.rst.txt#2025-04-06_snippet_16\n\nLANGUAGE: Logtalk\nCODE:\n```\ntriggered_breakpoint_/4\n```\n\n----------------------------------------\n\nTITLE: Loading the Hook Flows Library in Logtalk\nDESCRIPTION: Command to load all entities in the hook_flows library using the loader.lgt file.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/libraries/hook_flows.rst#2025-04-06_snippet_0\n\nLANGUAGE: prolog\nCODE:\n```\n| ?- logtalk_load(hook_flows(loader)).\n```\n\n----------------------------------------\n\nTITLE: Car Sequencing Problem with Indexicals (Method 1)\nDESCRIPTION: Solves the car sequencing problem using the first implementation with CLP(FD) indexicals. Uses the 'ff' (first-fail) labeling strategy.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/constraints/sicstus/NOTES.md#2025-04-06_snippet_2\n\nLANGUAGE: logtalk\nCODE:\n```\n%%table\ncars_ix::cars_ix([ff], X).\n```\n\n----------------------------------------\n\nTITLE: Alternative Fold Operations in Logtalk\nDESCRIPTION: Shows alternatives to fold_left/4 and fold_right/4 when there isn't an initial value.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/metapredicates/NOTES.md#2025-04-06_snippet_8\n\nLANGUAGE: logtalk\nCODE:\n```\nmeta::fold_left_1([X,Y,Z]>>(Z is X+Y), [1,2,3,4,5], R).\n```\n\nLANGUAGE: logtalk\nCODE:\n```\nmeta::fold_right_1([X,Y,Z]>>(Z is X-Y), [1,2,3,4,5], R).\n```\n\nLANGUAGE: logtalk\nCODE:\n```\nmeta::fold_right_1([X,Y,Z]>>(Z is X*Y), [1,2,3,4,5], R).\n```\n\n----------------------------------------\n\nTITLE: Modes and Proof Types for extends_protocol in Logtalk\nDESCRIPTION: Defines the calling modes for extends_protocol/2-3, specifying that both protocol identifiers can be either variables or ground terms, and the predicate can yield zero or more results through backtracking.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/refman/predicates/extends_protocol_2_3.rst#2025-04-06_snippet_1\n\nLANGUAGE: prolog\nCODE:\n```\nextends_protocol(?protocol_identifier, ?protocol_identifier) - zero_or_more\nextends_protocol(?protocol_identifier, ?protocol_identifier, ?scope) - zero_or_more\n```\n\n----------------------------------------\n\nTITLE: Testing Basic Light Command\nDESCRIPTION: Demonstrates direct command execution by turning on a light object.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/design_patterns/behavioral/command/NOTES.md#2025-04-06_snippet_2\n\nLANGUAGE: logtalk\nCODE:\n```\nlight(l1)::turn_on.\n```\n\n----------------------------------------\n\nTITLE: Accessing New logtalk_load_context/2 Keys in Logtalk\nDESCRIPTION: New keys added to the logtalk_load_context/2 built-in predicate, providing access to parameter variables, variable names, and singleton variables.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/RELEASE_NOTES.md#2025-04-06_snippet_11\n\nLANGUAGE: Logtalk\nCODE:\n```\nlogtalk_load_context(parameter_variables, Variables),\nlogtalk_load_context(variable_names(Term), Names),\nlogtalk_load_context(singletons(Term), Singletons)\n```\n\n----------------------------------------\n\nTITLE: Accessing APIs Documentation in Logtalk\nDESCRIPTION: Predicate that opens the Texinfo version of the APIs documentation for inline browsing. This predicate requires a compatible Prolog backend running on a POSIX system.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/help_info_support_0.rst.txt#2025-04-06_snippet_2\n\nLANGUAGE: Prolog\nCODE:\n```\napis/0\n```\n\n----------------------------------------\n\nTITLE: Verifying Reverted Salary Value\nDESCRIPTION: Confirms that after removing the dynamic category, the salary value returns to its original state.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/complements/allow/NOTES.md#2025-04-06_snippet_14\n\nLANGUAGE: logtalk\nCODE:\n```\nemployee::salary(Salary).\n```\n\n----------------------------------------\n\nTITLE: Calling object::sum/2 without debugging statements (type error)\nDESCRIPTION: This snippet demonstrates calling the sum/2 predicate without debugging statements, resulting in a type error for a non-evaluable term.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/debug_hooks/NOTES.md#2025-04-06_snippet_9\n\nLANGUAGE: logtalk\nCODE:\n```\nobject::sum([1,2,3,a], Sum).\n```\n\n----------------------------------------\n\nTITLE: Generating Version 4 UUID as Atom\nDESCRIPTION: Example of generating a random version 4 UUID as an atom.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/libraries/uuid.rst#2025-04-06_snippet_5\n\nLANGUAGE: logtalk\nCODE:\n```\n| ?- uuid::uuid_v4(UUID).\nUUID = '1c652782-69c5-4252-88c8-09e576a44db5'\nyes\n```\n\n----------------------------------------\n\nTITLE: Generating CBOR Encoding from Logtalk Terms\nDESCRIPTION: Shows how to encode Logtalk/Prolog terms into CBOR binary representation using the generate/2 predicate. The example encodes a list containing an atom and a map with key-value pair.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/library/cbor/NOTES.md#2025-04-06_snippet_1\n\nLANGUAGE: logtalk\nCODE:\n```\n| ?- cbor::generate([a,{b-c}], Encoding).\nEncoding = [0x9f,0x61,0x61,0xbf,0x61,0x62,0x61,0x63,0xff,0xff]\nyes\n```\n\n----------------------------------------\n\nTITLE: Defining Dynamic Predicate for Log Points in Logtalk\nDESCRIPTION: Defines a dynamic predicate 'log_point_/3' that represents a table of log points. It takes entity, line, and message as arguments.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/debugger_0.rst.txt#2025-04-06_snippet_14\n\nLANGUAGE: Logtalk\nCODE:\n```\nlog_point_/3\n```\n\n----------------------------------------\n\nTITLE: Running DCG Test Cases in Logtalk\nDESCRIPTION: Executes the Logtalk DCG translator test cases using the dcgtest object.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/dcgs/NOTES.md#2025-04-06_snippet_15\n\nLANGUAGE: logtalk\nCODE:\n```\ndcgtest::run.\n```\n\n----------------------------------------\n\nTITLE: Syntax of conforms_to_protocol/2-3 in Logtalk\nDESCRIPTION: Shows the syntax forms for the conforms_to_protocol predicate with 2 or 3 arguments, where it checks if objects or categories conform to specified protocols.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/refman/predicates/conforms_to_protocol_2_3.rst#2025-04-06_snippet_0\n\nLANGUAGE: logtalk\nCODE:\n```\nconforms_to_protocol(Object, Protocol)\nconforms_to_protocol(Category, Protocol)\n\nconforms_to_protocol(Object, Protocol, Scope)\nconforms_to_protocol(Category, Protocol, Scope)\n```\n\n----------------------------------------\n\nTITLE: Generating JSON in Different Formats with Logtalk\nDESCRIPTION: Examples of generating JSON in different formats (codes, chars, atom) using the generate/2 predicate in Logtalk.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/libraries/json.rst#2025-04-06_snippet_4\n\nLANGUAGE: Prolog\nCODE:\n```\n| ?- json::generate(codes(Encoding), [a,{b-c}]).\nEncoding = [91,34,97,34,44,123,34,98,34,58,34,99,34,125,93]\nyes\n\n| ?- json::generate(chars(Encoding), [a,{b-c}]).\nEncoding = ['[','\\'',a,'\\'',',','{','\\'',b,'\\'',':','\\'',c,'\\'','}',']']\nYes\n\n| ?- json::generate(atom(Encoding), [a,{b-c}]).\nEncoding = '[\"a\",{\"b\":\"c\"}]'\nYes\n```\n\n----------------------------------------\n\nTITLE: Library Path Definition\nDESCRIPTION: Example of defining library paths using logtalk_library_path/2 predicate.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/userman/programming.rst.txt#2025-04-06_snippet_9\n\nLANGUAGE: prolog\nCODE:\n```\n:- multifile(logtalk_library_path/2).\n:- dynamic(logtalk_library_path/2).\n\nlogtalk_library_path(shapes, '$LOGTALKUSER/examples/shapes/').\n```\n\n----------------------------------------\n\nTITLE: Parsing Single Hexadecimal Digit in Logtalk\nDESCRIPTION: Parses a single hexadecimal digit. Accepts an atomic value as input or output. Returns zero or one proof.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/number_grammars_1.rst.txt#2025-04-06_snippet_4\n\nLANGUAGE: Logtalk\nCODE:\n```\nhex_digit(HexDigit)\n```\n\n----------------------------------------\n\nTITLE: Printing Student Description\nDESCRIPTION: Prints a description of a student object using the 'print' predicate.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/people/NOTES.md#2025-04-06_snippet_5\n\nLANGUAGE: logtalk\nCODE:\n```\no4::print.\n```\n\n----------------------------------------\n\nTITLE: Connecting iPhone Lightning Charger\nDESCRIPTION: This snippet demonstrates connecting an iPhone recharger using the Lightning connector.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/design_patterns/structural/adapter/NOTES.md#2025-04-06_snippet_2\n\nLANGUAGE: logtalk\nCODE:\n```\niphone_recharger(iphone)::connect.\n```\n\n----------------------------------------\n\nTITLE: Hot Patching with Listing Category\nDESCRIPTION: Example of hot patching an object to add the listing category functionality.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/library/listing/NOTES.md#2025-04-06_snippet_4\n\nLANGUAGE: logtalk\nCODE:\n```\n| ?- create_category(patch, [extends(listing),complements(data)], [], []).\nyes\n\n| ?- data::listing.\n...\n```\n\n----------------------------------------\n\nTITLE: Template and Modes for Coinductive Directive in Logtalk\nDESCRIPTION: Specifies the template and modes for the coinductive/1 directive, showing the accepted argument types including predicate indicators, non-terminal indicators, and coinductive predicate templates.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/refman/directives/coinductive_1.rst#2025-04-06_snippet_1\n\nLANGUAGE: logtalk\nCODE:\n```\ncoinductive(+predicate_indicator_term)\ncoinductive(+non_terminal_indicator_term)\ncoinductive(+coinductive_predicate_template_term)\n```\n\n----------------------------------------\n\nTITLE: Scanning a Specific Entity for Dead Code in Logtalk\nDESCRIPTION: Applies the dead_code_scanner to a specific entity (in this case, the logtalk object) to find unused predicates within it.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/tools/dead_code_scanner/SCRIPT.txt#2025-04-06_snippet_6\n\nLANGUAGE: prolog\nCODE:\n```\n| ?- dead_code_scanner::entity(logtalk).\n```\n\n----------------------------------------\n\nTITLE: Basic Type Checking in Logtalk\nDESCRIPTION: Demonstrates how to use the type::check/2 predicate which fails or generates an error for invalid types.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/userman/errors.rst#2025-04-06_snippet_7\n\nLANGUAGE: logtalk\nCODE:\n```\n..., type::check(temperature(celsius), 42.0), ...\n```\n\n----------------------------------------\n\nTITLE: Querying Extended Simpsons Family Parents\nDESCRIPTION: Demonstrates querying parent relationships in the extended Simpsons family tree.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/family_alt/NOTES.md#2025-04-06_snippet_4\n\nLANGUAGE: logtalk\nCODE:\n```\n%%table\nfamily(simpsons_extended)::parent(Parent, Child).\n```\n\n----------------------------------------\n\nTITLE: Querying a_date Object for Hour Property via Twin\nDESCRIPTION: Shows message forwarding to the twin object by querying the a_date object for an hour property that's actually implemented by its twin (a_time).\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/design_patterns/structural/twin/NOTES.md#2025-04-06_snippet_3\n\nLANGUAGE: logtalk\nCODE:\n```\na_date::hour(Hour).\n```\n\n----------------------------------------\n\nTITLE: Testing the OS Library in Logtalk\nDESCRIPTION: Command to load the test suite for the OS library predicates using the tester.lgt file.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/libraries/os.rst#2025-04-06_snippet_1\n\nLANGUAGE: prolog\nCODE:\n```\n| ?- logtalk_load(os(tester)).\n```\n\n----------------------------------------\n\nTITLE: Testing JSON Library in Logtalk\nDESCRIPTION: Demonstrates how to load and run tests for the JSON library predicates using the tester.lgt file.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/libraries/json.rst#2025-04-06_snippet_1\n\nLANGUAGE: Prolog\nCODE:\n```\n| ?- logtalk_load(json(tester)).\n```\n\n----------------------------------------\n\nTITLE: Basic Syntax of if/1 Directive in Logtalk\nDESCRIPTION: Defines the syntax for the if/1 directive which takes a Goal argument that determines whether the following code is compiled.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/refman/directives/if_1.rst.txt#2025-04-06_snippet_0\n\nLANGUAGE: logtalk\nCODE:\n```\nif(Goal)\n```\n\n----------------------------------------\n\nTITLE: Defining Cleanup Goals in Logtalk Tests\nDESCRIPTION: Example of defining a cleanup/0 predicate to delete a file after running tests.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/devtools/lgtunit.rst.txt#2025-04-06_snippet_24\n\nLANGUAGE: logtalk\nCODE:\n```\ncleanup :-\n       this(This),\n       object_property(This, file(_,Directory)),\n       atom_concat(Directory, serialized_objects, File),\n       catch(ignore(os::delete_file(File)), _, true).\n```\n\n----------------------------------------\n\nTITLE: Calling object::append/3 without debugging statements\nDESCRIPTION: This snippet demonstrates calling the append/3 predicate without the debugging statements active.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/debug_hooks/NOTES.md#2025-04-06_snippet_7\n\nLANGUAGE: logtalk\nCODE:\n```\nobject::append([1,2,3], [4,5], List).\n```\n\n----------------------------------------\n\nTITLE: Executing Append with Iterative Deepening DFS\nDESCRIPTION: Example of using the iterative deepening depth-first search interpreter with increment 1 to append two lists.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/contributions/verdi_neruda/README.txt#2025-04-06_snippet_2\n\nLANGUAGE: Logtalk\nCODE:\n```\nprove(iddfs_interpreter(1), append([a,b], [c,d], Xs), demodb).\n```\n\n----------------------------------------\n\nTITLE: Sample Query for Kruskal's Algorithm with Union-Find in Logtalk\nDESCRIPTION: Demonstrates a sample query using the kruskal object to find a minimum spanning tree for a weighted graph. The query includes a graph with vertices and weighted edges, and returns the resulting minimum spanning tree.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/libraries/union_find.rst#2025-04-06_snippet_3\n\nLANGUAGE: logtalk\nCODE:\n```\n| ?- kruskal::kruskal(g([a,b,c,d,e,f,g]-[7-(a,b), 5-(a,d), 8-(b,c), 7-(b,e), 9-(b,d), 5-(c,e), 15-(d,e), 6-(d,f), 8-(e,f), 9-(e,g), 11-(f,g)]), Tree).\n\nTree = g([a,b,c,d,e,f,g]-[5-(a,d),5-(c,e),6-(d,f),7-(a,b),7-(b,e),9-(e,g)])\nyes\n```\n\n----------------------------------------\n\nTITLE: Using plus/3 predicate for reversible integer addition\nDESCRIPTION: Reversible integer sum predicate that requires at least two of the arguments to be instantiated to integers. Can be used for addition or to find the difference between two integers.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/integer_0.rst.txt#2025-04-06_snippet_1\n\nLANGUAGE: logtalk\nCODE:\n```\nplus(I,J,Sum)\n```\n\n----------------------------------------\n\nTITLE: JList Dialog Example\nDESCRIPTION: Demonstrates JList dialog integration, skipped if running in Jupyter\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/jpl/NOTES.md#2025-04-06_snippet_8\n\nLANGUAGE: logtalk\nCODE:\n```\n(current_object(jupyter) -> true; jlist::display).\n```\n\n----------------------------------------\n\nTITLE: Testing public term expansion\nDESCRIPTION: Demonstrates term expansion using a public predicate in the exp_public object.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/expansion/NOTES.md#2025-04-06_snippet_2\n\nLANGUAGE: logtalk\nCODE:\n```\nexp_public::expand_term(8, Term).\n```\n\n----------------------------------------\n\nTITLE: Creating New AVL Tree Dictionary in Logtalk\nDESCRIPTION: Demonstrates creating a new dictionary using the AVL tree implementation with the new/1 predicate.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/libraries/dictionaries.rst#2025-04-06_snippet_2\n\nLANGUAGE: prolog\nCODE:\n```\n| ?- avltree::new(Dictionary).\nDictionary = ...\nyes\n```\n\n----------------------------------------\n\nTITLE: Querying Derived Prototype Properties in Logtalk (Color)\nDESCRIPTION: Shows that the fred prototype has a different color (white) than its parent prototype clyde, demonstrating property override in derived prototypes.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/elephants/NOTES.md#2025-04-06_snippet_5\n\nLANGUAGE: logtalk\nCODE:\n```\nfred::color(C).\n```\n\n----------------------------------------\n\nTITLE: Using find_all/3 Meta-Predicate\nDESCRIPTION: This snippet tests the threaded engine implementation of the standard findall/3 meta-predicate, collecting all solutions of a(X) into a list.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/engines/emetas/NOTES.md#2025-04-06_snippet_4\n\nLANGUAGE: logtalk\nCODE:\n```\nemetas::find_all(X, a(X), List).\n```\n\n----------------------------------------\n\nTITLE: Sample Query for Kruskal's Algorithm with Union-Find in Logtalk\nDESCRIPTION: Demonstrates a sample query using the kruskal object to find a minimum spanning tree for a weighted graph. The query includes a graph with vertices and weighted edges, and returns the resulting minimum spanning tree.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/libraries/union_find.rst#2025-04-06_snippet_3\n\nLANGUAGE: logtalk\nCODE:\n```\n| ?- kruskal::kruskal(g([a,b,c,d,e,f,g]-[7-(a,b), 5-(a,d), 8-(b,c), 7-(b,e), 9-(b,d), 5-(c,e), 15-(d,e), 6-(d,f), 8-(e,f), 9-(e,g), 11-(f,g)]), Tree).\n\nTree = g([a,b,c,d,e,f,g]-[5-(a,d),5-(c,e),6-(d,f),7-(a,b),7-(b,e),9-(e,g)])\nyes\n```\n\n----------------------------------------\n\nTITLE: Sending Second Batch of Messages\nDESCRIPTION: Sends another batch of priority messages to the queue to demonstrate continued operation.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/engines/pmq/NOTES.md#2025-04-06_snippet_5\n\nLANGUAGE: logtalk\nCODE:\n```\npmq::(send(8-fun), send(11-have), send(3-':-)')).\n```\n\n----------------------------------------\n\nTITLE: Requesting a Named Instance\nDESCRIPTION: Requests the named instance 'i2' from the multiton class, which creates the instance if it doesn't already exist.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/design_patterns/creational/multiton/NOTES.md#2025-04-06_snippet_4\n\nLANGUAGE: logtalk\nCODE:\n```\nmultiton::instance(i2).\n```\n\n----------------------------------------\n\nTITLE: Loading Metaclasses Example\nDESCRIPTION: Loads the metaclasses example module using the Logtalk loader.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/metaclasses/NOTES.md#2025-04-06_snippet_1\n\nLANGUAGE: logtalk\nCODE:\n```\nlogtalk_load(metaclasses(loader)).\n```\n\n----------------------------------------\n\nTITLE: Suppressing Output in Logtalk Tests\nDESCRIPTION: Shows how to suppress output in tests using suppress_text_output or suppress_binary_output predicates. This is useful for preventing clutter in test logs.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/tools/lgtunit/NOTES.md#2025-04-06_snippet_32\n\nLANGUAGE: Logtalk\nCODE:\n```\ntest(proxies_04, true(Color == yellow)) :-\n\t\t^^suppress_text_output,\n\t\t{circle('#2', Color)}::print.\n```\n\n----------------------------------------\n\nTITLE: Querying instantiation relationships with scope in Logtalk\nDESCRIPTION: Shows how to query instantiation relationships with their scope information using the instantiates_class/3 built-in predicate.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/userman/objects.rst#2025-04-06_snippet_17\n\nLANGUAGE: text\nCODE:\n```\n| ?- instantiates_class(Instance, Class, Scope).\n```\n\n----------------------------------------\n\nTITLE: Defining hook_set(Set) Object in Logtalk\nDESCRIPTION: Defines the hook_set(Set) object in Logtalk. This object uses a set of hook objects to expand terms and goals, trying them in sequence until one succeeds in expanding the current term or goal.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/hook_set_1.rst.txt#2025-04-06_snippet_0\n\nLANGUAGE: Logtalk\nCODE:\n```\nhook_set(Set)\n```\n\n----------------------------------------\n\nTITLE: Extended Categories Syntax in Logtalk using BNF\nDESCRIPTION: Specifies the syntax for referring to extended categories in Logtalk, including individual categories, sequences, and lists, with optional scope specifiers.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/refman/grammar.rst.txt#2025-04-06_snippet_9\n\nLANGUAGE: bnf\nCODE:\n```\nextended_categories ::=\n   extended_category\n   | extended_category_sequence\n   | extended_category_list\n\nextended_category ::=\n   category_identifier\n   | scope \"::\" category_identifier\n\nextended_category_sequence ::=\n   extended_category\n   | extended_category \",\" extended_category_sequence\n\nextended_category_list ::=\n   \"[\" extended_category_sequence \"]\"\n```\n\n----------------------------------------\n\nTITLE: Printing Logtalk, Prolog backend, and kernel versions\nDESCRIPTION: This snippet prints the versions of Logtalk, the Prolog backend, and the kernel if running as a notebook.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/instmethods/NOTES.md#2025-04-06_snippet_0\n\nLANGUAGE: logtalk\nCODE:\n```\n%versions\n```\n\n----------------------------------------\n\nTITLE: Testing Patched is_proper_list/1 Predicate with Variable\nDESCRIPTION: Tests the patched implementation of is_proper_list/1 with an uninstantiated variable, which should correctly return false.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/patching/NOTES.md#2025-04-06_snippet_4\n\nLANGUAGE: logtalk\nCODE:\n```\nbroken::is_proper_list(_).\n```\n\n----------------------------------------\n\nTITLE: Benchmark Loop Engine Creation\nDESCRIPTION: Creates 2000 engines running the loop predicate and measures performance.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/engines/ebench/NOTES.md#2025-04-06_snippet_7\n\nLANGUAGE: logtalk\nCODE:\n```\ntime((between(1,2000,I),atom_number(A,I),threaded_engine_create(_,loop,A),fail)).\n```\n\n----------------------------------------\n\nTITLE: Defining Logtalk_load/2 Predicate in Logtalk\nDESCRIPTION: Defines the logtalk_load/2 predicate, which compiles and loads Logtalk source files. It can handle single files or lists of files, and accepts compiler flags as a second argument.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/refman/predicates/logtalk_load_2.rst.txt#2025-04-06_snippet_0\n\nLANGUAGE: Logtalk\nCODE:\n```\nlogtalk_load(File, Flags)\nlogtalk_load(Files, Flags)\n```\n\n----------------------------------------\n\nTITLE: Printing Profiling Data for a Single Predicate in Logtalk\nDESCRIPTION: Illustrates how to print a table with profiling data for a specific predicate of an entity.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/devtools/ports_profiler.rst.txt#2025-04-06_snippet_6\n\nLANGUAGE: Prolog\nCODE:\n```\n| ?- ports_profiler::data(Entity, Predicate).\n```\n\n----------------------------------------\n\nTITLE: Finding Engine Name Example in Logtalk\nDESCRIPTION: This example demonstrates how to find the name of the engine making a query using the threaded_engine_self/1 predicate. The Engine variable will be unified with the name of the current engine.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/refman/predicates/threaded_engine_self_1.rst#2025-04-06_snippet_1\n\nLANGUAGE: Prolog\nCODE:\n```\n..., threaded_engine_self(Engine), ...\n```\n\n----------------------------------------\n\nTITLE: Loading POEM Example in Logtalk\nDESCRIPTION: Loads the POEM example implementation using the Logtalk loader mechanism\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/poem/NOTES.md#2025-04-06_snippet_1\n\nLANGUAGE: logtalk\nCODE:\n```\nlogtalk_load(poem(loader)).\n```\n\n----------------------------------------\n\nTITLE: Resetting the Stop Watch Monitor in Logtalk\nDESCRIPTION: Resets the stop_watch monitor, clearing any collected timing data.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/profiling/NOTES.md#2025-04-06_snippet_12\n\nLANGUAGE: logtalk\nCODE:\n```\nstop_watch::reset_monitor.\n```\n\n----------------------------------------\n\nTITLE: Querying Properties of the Monitoring Protocol in Prolog\nDESCRIPTION: Demonstrates how to use the protocol_property/2 predicate to enumerate the properties of the built-in monitoring protocol in Logtalk.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/refman/predicates/protocol_property_2.rst.txt#2025-04-06_snippet_2\n\nLANGUAGE: Prolog\nCODE:\n```\n% enumerate the properties of the monitoring built-in protocol:\n| ?- protocol_property(monitoring, Property).\n\nProperty = source_data ;\nProperty = static ;\nProperty = built_in ;\n...\n```\n\n----------------------------------------\n\nTITLE: Loading the TBBT Game Module in Logtalk\nDESCRIPTION: This code loads the 'tbbt' module, which contains the implementation of the Rock Paper Scissors Lizard Spock game.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/engines/tbbt/NOTES.md#2025-04-06_snippet_1\n\nLANGUAGE: logtalk\nCODE:\n```\nlogtalk_load(tbbt(loader)).\n```\n\n----------------------------------------\n\nTITLE: Example Usage of define_events/5\nDESCRIPTION: Demonstrates how to use define_events/5 to set up monitoring of member/2 messages sent to a list object.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/refman/predicates/define_events_5.rst.txt#2025-04-06_snippet_2\n\nLANGUAGE: logtalk\nCODE:\n```\n% define \"debugger\" as a monitor for member/2 messages\n% sent to the \"list\" object:\n| ?- define_events(_, list, member(_, _), _ , debugger).\n```\n\n----------------------------------------\n\nTITLE: Using Object Proxies\nDESCRIPTION: Demonstrates the use of object proxies to represent and print student information.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/people/NOTES.md#2025-04-06_snippet_6\n\nLANGUAGE: logtalk\nCODE:\n```\n{student('Roosevelt Franklin', _, _)}::print.\n```\n\n----------------------------------------\n\nTITLE: Magic Predicate Symbol Transformation in Logtalk\nDESCRIPTION: The magic/2 predicate transforms a predicate symbol by prefixing it with 'magic_'. This is used in the magic sets transformation process.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/magic_0.rst.txt#2025-04-06_snippet_1\n\nLANGUAGE: logtalk\nCODE:\n```\nmagic(Old,New)\n```\n\n----------------------------------------\n\nTITLE: Writing Predicate Data to a TSV File in Logtalk\nDESCRIPTION: Example of writing the content of a predicate to a TSV file.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/libraries/tsv.rst#2025-04-06_snippet_5\n\nLANGUAGE: logtalk\nCODE:\n```\n| ?- tsv::write_file('output.tsv', user, p/3).\nyes\n```\n\n----------------------------------------\n\nTITLE: Executing Parametric Command\nDESCRIPTION: Shows how to execute a command using parametric object identifiers.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/design_patterns/behavioral/command/NOTES.md#2025-04-06_snippet_3\n\nLANGUAGE: logtalk\nCODE:\n```\nflip_up_command(light(l1))::execute.\n```\n\n----------------------------------------\n\nTITLE: Unicode Scripts Predicates in Prolog\nDESCRIPTION: Defines predicates unicode_script/6 and unicode_script_category/3 for handling Unicode script properties.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/library/unicode_data/README.md#2025-04-06_snippet_0\n\nLANGUAGE: prolog\nCODE:\n```\nunicode_script/6\nunicode_script_category/3\n```\n\n----------------------------------------\n\nTITLE: Generating Allure Report with Project and Commit in PowerShell\nDESCRIPTION: This snippet shows how to generate an Allure report using the logtalk_allure_report script in PowerShell, specifying the project name and git commit hash.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/devtools/lgtunit.rst#2025-04-06_snippet_66\n\nLANGUAGE: powershell\nCODE:\n```\nPS> logtalk_allure_report -e \"Project='Deep Thought',Commit=bf166b6\"\n```\n\n----------------------------------------\n\nTITLE: Trace Meta-interpreter Execution\nDESCRIPTION: Traces the execution of p(X) showing the proof construction steps.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/metainterpreters/NOTES.md#2025-04-06_snippet_5\n\nLANGUAGE: logtalk\nCODE:\n```\ndatabase::trace(p(X)).\n```\n\n----------------------------------------\n\nTITLE: Testing XML Parser Library in Logtalk\nDESCRIPTION: This snippet shows how to load the tester.lgt file to test the library predicates of the XML parser.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/contributions/xml_parser.rst#2025-04-06_snippet_1\n\nLANGUAGE: Logtalk\nCODE:\n```\n| ?- logtalk_load(xml_parser(tester)).\n```\n\n----------------------------------------\n\nTITLE: Base Counter Storage Predicate\nDESCRIPTION: Dynamic predicate that stores the mapping between generator bases and their respective counters. Used internally to track state.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/gensym_core_0.rst.txt#2025-04-06_snippet_3\n\nLANGUAGE: logtalk\nCODE:\n```\nbase_(Base,Counter)\n```\n\n----------------------------------------\n\nTITLE: Declaring Module Predicates in Logtalk\nDESCRIPTION: This snippet shows the basic syntax for the use_module/2 directive, which declares predicates from external modules for use within a Logtalk entity. It allows omitting the module qualifier when calling these predicates.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/refman/directives/use_module_2.rst.txt#2025-04-06_snippet_0\n\nLANGUAGE: Logtalk\nCODE:\n```\nuse_module(Module, [Name/Arity, ...])\nuse_module(Module, [Name/Arity as Alias/Arity, ...])\n\nuse_module(Module, [Predicate as Alias, ...])\n\nuse_module(Module, [Name//Arity, ...])\nuse_module(Module, [Name//Arity as Alias//Arity, ...])\n\nuse_module(Module, [op(Precedence,Associativity,Operator), ...])\n```\n\n----------------------------------------\n\nTITLE: Defining Format/3 Predicate in Logtalk\nDESCRIPTION: Defines the format/3 predicate for writing formatted output to a specified stream. It accepts a stream, format specification, and list of arguments.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/format_0.rst.txt#2025-04-06_snippet_0\n\nLANGUAGE: Logtalk\nCODE:\n```\nformat(Stream,Format,Arguments)\n```\n\n----------------------------------------\n\nTITLE: Querying Predicate Properties\nDESCRIPTION: Demonstrates reflection to query properties of a specific predicate in mountain_bike object.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/predicate_lookups/NOTES.md#2025-04-06_snippet_6\n\nLANGUAGE: logtalk\nCODE:\n```\nmountain_bike::predicate_property(frame(_), Property).\n```\n\n----------------------------------------\n\nTITLE: Running PDDL Parser Tests from Parser Directory\nDESCRIPTION: Command to execute unit tests for the PDDL parser from within the parser's directory. Tests are based on IPC 2008 problem sets.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/contributions/pddl_parser.rst#2025-04-06_snippet_1\n\nLANGUAGE: prolog\nCODE:\n```\n?- logtalk_load(tester).\n```\n\n----------------------------------------\n\nTITLE: Loading the Fault Diagnosis Example in Logtalk\nDESCRIPTION: Loads the LPA faults example and its required library files using the Logtalk loader predicate.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/lpa/faults/NOTES.md#2025-04-06_snippet_1\n\nLANGUAGE: logtalk\nCODE:\n```\nlogtalk_load(lpa_faults(loader)).\n```\n\n----------------------------------------\n\nTITLE: Creating New Stack Relationship\nDESCRIPTION: Establishes a new stacking relationship between blocks d and a.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/blocks/NOTES.md#2025-04-06_snippet_11\n\nLANGUAGE: logtalk\nCODE:\n```\nblock_stack::add_tuple(d-a).\n```\n\n----------------------------------------\n\nTITLE: Using initialization/1 Directive in Logtalk Object\nDESCRIPTION: Example of using the initialization/1 directive within a Logtalk object to print a debug message with the starting date after loading the object.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/refman/directives/initialization_1.rst#2025-04-06_snippet_2\n\nLANGUAGE: Logtalk\nCODE:\n```\n:- object(log).\n\n    :- initialization(start_date).\n\n    start_date :-\n        os::date_time(Year, Month, Day, _, _, _, _),\n        logtalk::print_message(debug, my_app, 'Starting date: ~d-~d-~d~n'+[Year,Month,Day]).\n\n:- end_object.\n```\n\n----------------------------------------\n\nTITLE: Private Predicate Access Error\nDESCRIPTION: Shows error handling when attempting to access a private predicate\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/scopes/NOTES.md#2025-04-06_snippet_4\n\nLANGUAGE: logtalk\nCODE:\n```\ncatch(prototype::baz(_), Error, true).\n```\n\n----------------------------------------\n\nTITLE: Defining the create_logtalk_flag/3 Predicate in Logtalk\nDESCRIPTION: The signature of the create_logtalk_flag/3 predicate, which takes a flag name, initial value, and list of options as arguments.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/refman/predicates/create_logtalk_flag_3.rst#2025-04-06_snippet_0\n\nLANGUAGE: prolog\nCODE:\n```\ncreate_logtalk_flag(Flag, Value, Options)\n```\n\n----------------------------------------\n\nTITLE: Applying Code Metrics to Prolog Modules in Logtalk\nDESCRIPTION: Example of how to apply code metrics to a Prolog module named 'module.pl' using Logtalk.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/devtools/code_metrics.rst#2025-04-06_snippet_2\n\nLANGUAGE: Logtalk\nCODE:\n```\n\n```\n\n----------------------------------------\n\nTITLE: Computing Prime Numbers Using And-Parallelism in Logtalk\nDESCRIPTION: Demonstrates how to compute prime numbers in a given interval by splitting the interval and running each sub-interval computation in a separate thread. This implementation uses the threaded/1 predicate to achieve and-parallelism.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/userman/threads.rst.txt#2025-04-06_snippet_1\n\nLANGUAGE: logtalk\nCODE:\n```\nprime_numbers(N, M, Primes) :-\n    M > N,\n    N1 is N + (M - N) // 2,\n    N2 is N1 + 1,\n    threaded((\n        prime_numbers(N2, M, [], Acc),\n        prime_numbers(N, N1, Acc, Primes)\n    )).\n\nprime_numbers(N, M, Acc, Primes) :-\n    ...\n```\n\n----------------------------------------\n\nTITLE: GitLab CLI Authentication for issue_creator\nDESCRIPTION: This bash command demonstrates how to authenticate the GitLab CLI (glab) for use with the issue_creator tool. It uses a directly provided token for authentication.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/devtools/issue_creator.rst#2025-04-06_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nglab auth login --hostname <string> --token <string>\n```\n\n----------------------------------------\n\nTITLE: Stopping Debugging in Logtalk\nDESCRIPTION: Stops debugging for all defined breakpoints and turns off tracing. Does not remove defined breakpoints.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/debuggerp_0.rst.txt#2025-04-06_snippet_2\n\nLANGUAGE: Logtalk\nCODE:\n```\nnodebug/0\n```\n\n----------------------------------------\n\nTITLE: Querying Concentric Relations and Positions in Logtalk\nDESCRIPTION: Retrieves and displays concentric tuples and polygon positions using various queries and the position/2 method.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/polygons/NOTES.md#2025-04-06_snippet_3\n\nLANGUAGE: logtalk\nCODE:\n```\nconcentric::tuple(Tuple), write(Tuple), nl, fail; true.\n\nt::position(Xt, Yt), s::position(Xs, Ys), p::position(Xp, Yp), h::position(Xh, Yh).\n\nafter_event_registry::monitors(Ma).\n```\n\n----------------------------------------\n\nTITLE: Profiling Output Example in Logtalk\nDESCRIPTION: Sample output showing the profiling information printed by the stop_watch monitor when a message is sent to the profiled object.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/tutorial/profiling.rst#2025-04-06_snippet_4\n\nLANGUAGE: text\nCODE:\n```\n| ?- foo::bar(X).\n\nfoo <-- bar(X) from user\nSTARTING at 12.87415 seconds\nfoo <-- bar(1) from user\nENDING at 12.87419 seconds\n\nX = 1\nyes\n```\n\n----------------------------------------\n\nTITLE: Generating a Hailstone Sequence in Logtalk\nDESCRIPTION: Generates a Hailstone sequence starting from the number 10. The sequence follows the Collatz conjecture rules until reaching 1.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/hailstone/NOTES.md#2025-04-06_snippet_2\n\nLANGUAGE: logtalk\nCODE:\n```\nhailstone::generate_sequence(10, Sequence).\n```\n\n----------------------------------------\n\nTITLE: Setting Gasoline Car Prototype\nDESCRIPTION: Changes the prototype instance to a gasoline car configuration\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/design_patterns/creational/prototype/NOTES.md#2025-04-06_snippet_4\n\nLANGUAGE: logtalk\nCODE:\n```\ncar::set_prototype(gasoline_car_prototype).\n```\n\n----------------------------------------\n\nTITLE: Basic Directive Usage\nDESCRIPTION: Shows the basic syntax for using the elif/1 directive in conditional compilation.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/refman/directives/elif_1.rst#2025-04-06_snippet_1\n\nLANGUAGE: logtalk\nCODE:\n```\nelif(Goal)\n```\n\n----------------------------------------\n\nTITLE: Stopping the Message Counter Monitor in Logtalk\nDESCRIPTION: Stops and resets the message_counter monitor, clearing collected data.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/profiling/NOTES.md#2025-04-06_snippet_8\n\nLANGUAGE: logtalk\nCODE:\n```\nmessage_counter::stop.\n```\n\n----------------------------------------\n\nTITLE: Defining the set_logtalk_flag/2 predicate syntax in Logtalk\nDESCRIPTION: Specifies the syntax for the set_logtalk_flag/2 predicate which sets global, default flag values in Logtalk.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/refman/predicates/set_logtalk_flag_2.rst.txt#2025-04-06_snippet_0\n\nLANGUAGE: logtalk\nCODE:\n```\nset_logtalk_flag(Flag, Value)\n```\n\n----------------------------------------\n\nTITLE: Testing protected goal expansion\nDESCRIPTION: Shows that goal expansion does not occur for protected predicates in the exp_protected object.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/expansion/NOTES.md#2025-04-06_snippet_5\n\nLANGUAGE: logtalk\nCODE:\n```\nexp_protected::expand_goal(write(Term), EGoal).\n```\n\n----------------------------------------\n\nTITLE: Logtalk Make Target Usage - Target 'missing'\nDESCRIPTION: Support added for new logtalk_make/1 target to list missing entities and predicates, accessible via {?} shortcut\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/RELEASE_NOTES.md#2025-04-06_snippet_83\n\nLANGUAGE: Logtalk\nCODE:\n```\nlogtalk_make(missing).\n```\n\n----------------------------------------\n\nTITLE: Testing Third Diamond Problem Variant - Default Method\nDESCRIPTION: Sends message m/0 to object d3, showing which inherited definition is used by default in the third variant of the diamond problem.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/diamonds/NOTES.md#2025-04-06_snippet_7\n\nLANGUAGE: logtalk\nCODE:\n```\nd3::m.\n```\n\n----------------------------------------\n\nTITLE: Retrieving All Class Leaf Instances in Logtalk\nDESCRIPTION: Predicate that returns all class leaf instances through backtracking. Leaf instances are instances that don't have their own instances. Takes a single parameter Leaf which can be instantiated or a variable to be bound to leaf instance objects.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/class_hierarchyp_0.rst.txt#2025-04-06_snippet_8\n\nLANGUAGE: logtalk\nCODE:\n```\nleaf_instance(Leaf)\n```\n\n----------------------------------------\n\nTITLE: Initializing Stream Variable in Logtalk\nDESCRIPTION: Creates a new stream variable with an empty initial state. Throws a type error if the argument is not a variable.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/streamvars_0.rst.txt#2025-04-06_snippet_0\n\nLANGUAGE: Logtalk\nCODE:\n```\nnew(Variable)\n```\n\n----------------------------------------\n\nTITLE: Loading the Dates Library in Logtalk\nDESCRIPTION: Command for loading all entities in the dates library using the loader utility file. This makes the date and time objects available for use in Logtalk applications.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/library/dates/NOTES.md#2025-04-06_snippet_0\n\nLANGUAGE: logtalk\nCODE:\n```\n| ?- logtalk_load(dates(loader)).\n```\n\n----------------------------------------\n\nTITLE: Retrieving Epsilon Value in Logtalk\nDESCRIPTION: Returns the epsilon value used in the definition of the (=~=)/2 predicate for approximate equality comparisons.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/lgtunit_0.rst.txt#2025-04-06_snippet_25\n\nLANGUAGE: logtalk\nCODE:\n```\nepsilon(Epsilon)\n```\n\n----------------------------------------\n\nTITLE: Sender Method Signature\nDESCRIPTION: Basic syntax for the sender/1 built-in method that unifies its argument with the object that sent the message under processing.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/refman/methods/sender_1.rst#2025-04-06_snippet_0\n\nLANGUAGE: logtalk\nCODE:\n```\nsender(Sender)\n```\n\n----------------------------------------\n\nTITLE: Reified Determinism Check in Logtalk\nDESCRIPTION: Performs a reified determinism check, returning a boolean value indicating if the goal succeeded without leaving choice-points.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/lgtunit_0.rst.txt#2025-04-06_snippet_8\n\nLANGUAGE: Logtalk\nCODE:\n```\ndeterministic(Goal, Deterministic)\n```\n\n----------------------------------------\n\nTITLE: Modes and Number of Proofs for conforms_to_protocol/2-3\nDESCRIPTION: Defines the mode declarations for the predicate, indicating parameter types and instantiation patterns, along with the number of solutions expected (zero_or_more).\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/refman/predicates/conforms_to_protocol_2_3.rst#2025-04-06_snippet_1\n\nLANGUAGE: logtalk\nCODE:\n```\nconforms_to_protocol(?object_identifier, ?protocol_identifier) - zero_or_more\nconforms_to_protocol(?category_identifier, ?protocol_identifier) - zero_or_more\n\nconforms_to_protocol(?object_identifier, ?protocol_identifier, ?scope) - zero_or_more\nconforms_to_protocol(?category_identifier, ?protocol_identifier, ?scope) - zero_or_more\n```\n\n----------------------------------------\n\nTITLE: Backtrackable Parameter Update\nDESCRIPTION: Demonstrates backtrackable update of a parameter 'b' in a dictionary structure, showing how the value reverts on backtracking.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/parstructs/NOTES.md#2025-04-06_snippet_2\n\nLANGUAGE: logtalk\nCODE:\n```\nobj(Dict)::init([a-1, b-2, c-3]), (obj(Dict)::b_set(b, 9), obj(Dict)::get(b, B), write(b-B), nl, fail; obj(Dict)::get(b, B), write(b-B), nl).\n```\n\n----------------------------------------\n\nTITLE: Houses Puzzle Solution\nDESCRIPTION: Solves the houses logical puzzle with multiple attributes per house\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/puzzles/NOTES.md#2025-04-06_snippet_6\n\nLANGUAGE: logtalk\nCODE:\n```\nhouses::(houses(Solution), print(Solution)).\n```\n\n----------------------------------------\n\nTITLE: Importing Recorded Database Core in Logtalk Object\nDESCRIPTION: This example demonstrates how to import the recorded_database_core category into a Logtalk object, making the database local and minimizing potential record clashes. It uses private import to restrict the scope of the library predicates.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/libraries/recorded_database.rst.txt#2025-04-06_snippet_2\n\nLANGUAGE: Logtalk\nCODE:\n```\n:- object(foo,\n    imports(private::recorded_database_core)).\n\n    bar :-\n        ^^recorda(key, value(1)),\n        ...\n\n:- end_object.\n```\n\n----------------------------------------\n\nTITLE: Defining use_module/2 Directive Syntax in Logtalk\nDESCRIPTION: Specifies the syntax for the use_module/2 directive, including variations for predicates, non-terminals, and operators. It allows importing module predicates and defining aliases.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/refman/directives/use_module_2.rst#2025-04-06_snippet_0\n\nLANGUAGE: Logtalk\nCODE:\n```\nuse_module(Module, [Name/Arity, ...])\nuse_module(Module, [Name/Arity as Alias/Arity, ...])\n\nuse_module(Module, [Predicate as Alias, ...])\n\nuse_module(Module, [Name//Arity, ...])\nuse_module(Module, [Name//Arity as Alias//Arity, ...])\n\nuse_module(Module, [op(Precedence,Associativity,Operator), ...])\n```\n\n----------------------------------------\n\nTITLE: Message Forwarding Handler Predicate Definition in Logtalk\nDESCRIPTION: Defines the forward/1 predicate template that handles forwarding of messages that an object does not understand. The predicate accepts a message parameter of type callable and can return zero or more proofs.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/forwarding_0.rst.txt#2025-04-06_snippet_0\n\nLANGUAGE: logtalk\nCODE:\n```\nforward(@callable)\n```\n\n----------------------------------------\n\nTITLE: Mapping List to Pairs\nDESCRIPTION: The map/3 predicate transforms a list into pairs using a closure to compute keys from list elements.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/pairs_0.rst.txt#2025-04-06_snippet_9\n\nLANGUAGE: logtalk\nCODE:\n```\nmap(Closure,List,Pairs)\n```\n\n----------------------------------------\n\nTITLE: Searching API Documentation for Predicate\nDESCRIPTION: Command to search for documentation on a specific predicate (string_match/2) in the APIs documentation.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/tools/help/SCRIPT.txt#2025-04-06_snippet_11\n\nLANGUAGE: logtalk\nCODE:\n```\n| ?- help::apis(string_match/2).\n```\n\n----------------------------------------\n\nTITLE: Loading Logtalk Libraries Inside Source Files\nDESCRIPTION: Pattern for loading Logtalk libraries, examples, or tools from within a source file.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/QUICK_START.md#2025-04-06_snippet_3\n\nLANGUAGE: prolog\nCODE:\n```\nlogtalk_load(<name>(loader))\n```\n\n----------------------------------------\n\nTITLE: Loading Mediator Design Pattern Implementation in Logtalk\nDESCRIPTION: Loads the Mediator design pattern sample implementation from the 'behavioral/mediator' directory.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/design_patterns/behavioral/mediator/NOTES.md#2025-04-06_snippet_1\n\nLANGUAGE: logtalk\nCODE:\n```\nlogtalk_load(design_patterns('behavioral/mediator/loader')).\n```\n\n----------------------------------------\n\nTITLE: Implementing message_tokens//2 Method in Logtalk\nDESCRIPTION: Example showing how to define the message_tokens//2 method as multifile and dynamic, with an implementation for redefining entity messages that formats an error about redefining an entity.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/refman/methods/message_tokens_2.rst#2025-04-06_snippet_2\n\nLANGUAGE: Prolog\nCODE:\n```\n:- multifile(logtalk::message_tokens//2).\n:- dynamic(logtalk::message_tokens//2).\n\nlogtalk::message_tokens(redefining_entity(Type, Entity), core) -->\n    ['Redefining ~w ~q'-[Type, Entity], nl].\n```\n\n----------------------------------------\n\nTITLE: Retrieving All Solutions from a Non-Deterministic Threaded Call in Logtalk\nDESCRIPTION: Shows how to retrieve through backtracking all solutions for a previously executed non-deterministic threaded goal.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/threads/nondet/NOTES.md#2025-04-06_snippet_3\n\nLANGUAGE: logtalk\nCODE:\n```\n%%table\nthreaded_exit(lists::member(X, [1,2,3])).\n```\n\n----------------------------------------\n\nTITLE: Installing Latest Package Version in Logtalk\nDESCRIPTION: Predicate for installing the latest version of a package from a specified registry using default options.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/packs_0.rst.txt#2025-04-06_snippet_2\n\nLANGUAGE: logtalk\nCODE:\n```\ninstall(Registry,Pack)\n```\n\n----------------------------------------\n\nTITLE: Using self/1 Method in Logtalk Example\nDESCRIPTION: Demonstrates how to use the self/1 method to retrieve and display the current object in a test predicate. The self/1 call is compiled into a unification at the start of the clause body.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/refman/methods/self_1.rst#2025-04-06_snippet_2\n\nLANGUAGE: prolog\nCODE:\n```\n% upon compilation, the write/1 call will be\n% the first goal in the clause body\ntest :-\n    self(Self),\n    write('executing a method in behalf of '),\n    writeq(Self), nl.\n```\n\n----------------------------------------\n\nTITLE: Printing Logtalk, Prolog, and Kernel Versions\nDESCRIPTION: This snippet prints the versions of Logtalk, the Prolog backend, and the kernel if running in a notebook environment.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/design_patterns/structural/decorator/NOTES.md#2025-04-06_snippet_0\n\nLANGUAGE: logtalk\nCODE:\n```\n%versions\n```\n\n----------------------------------------\n\nTITLE: Checking Logtalk and System Versions\nDESCRIPTION: Prints the versions of Logtalk, Prolog backend, and kernel for reference when running in a Jupyter notebook environment.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/threads/functions/NOTES.md#2025-04-06_snippet_0\n\nLANGUAGE: logtalk\nCODE:\n```\n%versions\n```\n\n----------------------------------------\n\nTITLE: Generating Version 4 UUID as Character List in Logtalk\nDESCRIPTION: Demonstrates generating a version 4 UUID represented as a list of characters using the uuid(chars) parametric object. This provides an alternative representation format.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/library/uuid/NOTES.md#2025-04-06_snippet_6\n\nLANGUAGE: logtalk\nCODE:\n```\n| ?- uuid(chars)::uuid_v4(UUID).\nUUID = [d,'3',d,'3','3','5','1','3',-,'8','1',e,c,-,'4',d,'2','6',-,\n        '9',f,'2','2',-,e,d,'9','5',e,'0','0',e,'1','5','7','0']\nyes\n```\n\n----------------------------------------\n\nTITLE: Category Definition Grammar in BNF\nDESCRIPTION: Defines the syntax for category definitions including directives and relations.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/refman/grammar.rst#2025-04-06_snippet_2\n\nLANGUAGE: bnf\nCODE:\n```\ncategory ::=\n   begin_category_directive  ( category_term )* end_category_directive\n\nbegin_category_directive ::=\n   \":- category(\" category_identifier ( \",\" category_relations )? \").\"\n```\n\n----------------------------------------\n\nTITLE: Template and Argument Modes for protected/1 in Logtalk\nDESCRIPTION: Specifies the template and argument modes for the protected/1 directive, indicating that it accepts predicate indicators, non-terminal indicators, or operator declarations as input arguments.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/refman/directives/protected_1.rst.txt#2025-04-06_snippet_1\n\nLANGUAGE: logtalk\nCODE:\n```\nprotected(+predicate_indicator_term)\nprotected(+non_terminal_indicator_term)\nprotected(+operator_declaration)\n```\n\n----------------------------------------\n\nTITLE: Defining Logtalk Packs Library Path\nDESCRIPTION: Logtalk initialization code to define the logtalk_packs library alias based on the current directory.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/tools/packs/NOTES.md#2025-04-06_snippet_8\n\nLANGUAGE: prolog\nCODE:\n```\n:- initialization((\n\tlogtalk_load_context(directory, Directory),\n\tassertz(logtalk_library_path(logtalk_packs, Directory))\n)).\n```\n\n----------------------------------------\n\nTITLE: Defining phrase/2 Method Syntax in Logtalk\nDESCRIPTION: Specifies the syntax for the phrase/2 method, including variations for different scopes (local, self, and explicit object).\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/refman/methods/phrase_2.rst#2025-04-06_snippet_0\n\nLANGUAGE: Logtalk\nCODE:\n```\nphrase(GrammarRuleBody, Input)\nphrase(::GrammarRuleBody, Input)\nphrase(Object::GrammarRuleBody, Input)\n```\n\n----------------------------------------\n\nTITLE: Getting Git Commit Hash\nDESCRIPTION: Demonstrates retrieving the full hash of the latest commit using commit_hash/2 predicate.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/libraries/git.rst.txt#2025-04-06_snippet_4\n\nLANGUAGE: logtalk\nCODE:\n```\n| ?- git::commit_hash('/Users/pmoura/Documents/Logtalk/logtalk3', Hash).\n\nHash = eccaa1a2a9495fef441915bbace84e0a4b0394a2\nyes\n```\n\n----------------------------------------\n\nTITLE: Convert Term to Dictionary\nDESCRIPTION: Creates a nested dictionary from a curly-bracketed term representation.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/nested_dictionary_protocol_0.rst.txt#2025-04-06_snippet_2\n\nLANGUAGE: logtalk\nCODE:\n```\nas_nested_dictionary(Term,Dictionary)\n```\n\n----------------------------------------\n\nTITLE: Water Jugs Problem with Depth-First Search\nDESCRIPTION: Solves the water jugs problem using depth-first search with performance monitoring\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/searching/NOTES.md#2025-04-06_snippet_9\n\nLANGUAGE: logtalk\nCODE:\n```\nperformance::init, water_jug::initial_state(Initial), depth_first(10)::solve(water_jug, Initial, Path), water_jug::print_path(Path), performance::report.\n```\n\n----------------------------------------\n\nTITLE: Querying Age from Base Prototype\nDESCRIPTION: Demonstrates querying the age property from the base joe_person prototype.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/viewpoints/NOTES.md#2025-04-06_snippet_1\n\nLANGUAGE: logtalk\nCODE:\n```\njoe_person::age(Age).\n```\n\n----------------------------------------\n\nTITLE: Dumping Trace to File\nDESCRIPTION: Example of redirecting a goal trace to a file using dump_trace predicates.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/devtools/debugger.rst#2025-04-06_snippet_4\n\nLANGUAGE: logtalk\nCODE:\n```\n| ?- dump_trace::start_redirect_to_file('trace.txt', some_goal),\n        dump_trace::stop_redirect_to_file.\n```\n\n----------------------------------------\n\nTITLE: Generator Testing Examples\nDESCRIPTION: Examples of testing generator predicates using all/1 outcome and forall/2 with assertion/2.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/devtools/lgtunit.rst.txt#2025-04-06_snippet_17\n\nLANGUAGE: logtalk\nCODE:\n```\ntest(test_solution_generator, all(test(X,Y,Z))) :-\n    generator(X, Y, Z).\n\n:- uses(lgtunit, [assertion/2]).\n...\n\ntest(test_solution_generator_2) :-\n    forall(\n        generator(X, Y, Z),\n        assertion(generator(X), test(X,Y,Z))\n    ).\n```\n\n----------------------------------------\n\nTITLE: Examples of Using Recursive Type Generators in Logtalk\nDESCRIPTION: Sample query results showing different arbitrary binary trees generated with a maximum depth of 4.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/libraries/arbitrary.rst#2025-04-06_snippet_9\n\nLANGUAGE: prolog\nCODE:\n```\n| ?- type::arbitrary(node(4), Arbitrary).\nArbitrary = 907\nyes\n\n| ?- type::arbitrary(node(4), Arbitrary).\nArbitrary = node(node(node(522, 509), node(83, 453)), node(454, -197))\nyes\n\n| ?- type::arbitrary(node(4), Arbitrary).\nArbitrary = node(node(-875, -866), -254)\nyes\n\n| ?- type::arbitrary(node(4), Arbitrary).\nArbitrary = node(-133, -831)\nyes\n```\n\n----------------------------------------\n\nTITLE: Implementing Stop Watch Profiler in Logtalk\nDESCRIPTION: Defines a stop_watch object that implements the monitoring protocol and handles before and after events to print profiling information.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/tutorial/profiling.rst.txt#2025-04-06_snippet_3\n\nLANGUAGE: logtalk\nCODE:\n```\n:- object(stop_watch,\n    % event handler predicates protocol\n    implements(monitoring)).\n\n    :- uses(time, [cpu_time/1]).\n\n    before(Object, Message, Sender) :-\n        write(Object), write(' <-- '), writeq(Message),\n        write(' from '), write(Sender), nl, write('STARTING at '),\n        cpu_time(Seconds), write(Seconds), write(' seconds'), nl.\n\n    after(Object, Message, Sender) :-\n        write(Object), write(' <-- '), writeq(Message),\n        write(' from '), write(Sender), nl, write('ENDING at '),\n        cpu_time(Seconds), write(Seconds), write(' seconds'), nl.\n\n:- end_object.\n```\n\n----------------------------------------\n\nTITLE: Retrieving Second Batch of Messages\nDESCRIPTION: Retrieves the second batch of messages in priority order.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/engines/pmq/NOTES.md#2025-04-06_snippet_6\n\nLANGUAGE: logtalk\nCODE:\n```\npmq::messages(Messages).\n```\n\n----------------------------------------\n\nTITLE: Loading Proxies Example in Logtalk\nDESCRIPTION: Loads the 'proxies' example module in Logtalk.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/proxies/NOTES.md#2025-04-06_snippet_2\n\nLANGUAGE: logtalk\nCODE:\n```\nlogtalk_load(proxies(loader)).\n```\n\n----------------------------------------\n\nTITLE: Loading Logtalk Grammars Library\nDESCRIPTION: Command to load all entities in the grammars library using the loader file\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/libraries/grammars.rst.txt#2025-04-06_snippet_0\n\nLANGUAGE: logtalk\nCODE:\n```\n| ?- logtalk_load(grammars(loader)).\n```\n\n----------------------------------------\n\nTITLE: Querying Descendant1 Interface\nDESCRIPTION: Queries the interface of 'descendant1' which extends 'prototype1' using public inheritance, demonstrating inheritance chain visibility.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/inheritance/NOTES.md#2025-04-06_snippet_6\n\nLANGUAGE: logtalk\nCODE:\n```\ndescendant1::interface.\n```\n\n----------------------------------------\n\nTITLE: Querying for Defined Protocols in Logtalk\nDESCRIPTION: Demonstrates how to use the current_protocol/1 built-in predicate to find all defined protocols by backtracking or to test if a specific protocol is defined.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/userman/protocols.rst#2025-04-06_snippet_2\n\nLANGUAGE: prolog\nCODE:\n```\n| ?- current_protocol(Protocol).\n```\n\n----------------------------------------\n\nTITLE: FCube Decision Predicate with Output\nDESCRIPTION: Predicate that applies the prover to a given formula and prints its counter-model.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/fcube_0.rst.txt#2025-04-06_snippet_2\n\nLANGUAGE: logtalk\nCODE:\n```\ndecide(Formula)\n```\n\n----------------------------------------\n\nTITLE: Conditional Compilation Directives Syntax in Logtalk using BNF\nDESCRIPTION: Defines the conditional compilation directives in Logtalk for controlling which parts of code get compiled based on conditions.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/refman/grammar.rst.txt#2025-04-06_snippet_24\n\nLANGUAGE: bnf\nCODE:\n```\nconditional_compilation_directive ::=\n   \":- if(\" callable \").\" \n   | \":- elif(\" callable \").\" \n   | \":- else.\" \n   | \":- endif.\" \n```\n\n----------------------------------------\n\nTITLE: Benchmark Deterministic Engine Creation\nDESCRIPTION: Creates 2000 engines with deterministic true goals and measures performance.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/engines/ebench/NOTES.md#2025-04-06_snippet_2\n\nLANGUAGE: logtalk\nCODE:\n```\ntime((between(1,2000,I),atom_number(A,I),threaded_engine_create(_,true,A),fail)).\n```\n\n----------------------------------------\n\nTITLE: Tar Command Detection (Logtalk)\nDESCRIPTION: Predicate that returns the appropriate tar command name based on the operating system being used.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/packs_common_0.rst.txt#2025-04-06_snippet_7\n\nLANGUAGE: logtalk\nCODE:\n```\ntar_command(-atom)\n```\n\n----------------------------------------\n\nTITLE: Running Steiner Triple Example\nDESCRIPTION: Finds Steiner triple systems using constraints\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/constraints/bp/NOTES.md#2025-04-06_snippet_5\n\nLANGUAGE: logtalk\nCODE:\n```\nsteiner::go.\n```\n\n----------------------------------------\n\nTITLE: Running All Benchmark Tests with Custom Iterations in Logtalk\nDESCRIPTION: This snippet runs all benchmark tests with a specified number of iterations (20) using the mtbatch module.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/threads/mtbatch/NOTES.md#2025-04-06_snippet_3\n\nLANGUAGE: logtalk\nCODE:\n```\nmtbatch::run(20).\n```\n\n----------------------------------------\n\nTITLE: Testing Square Side Alias\nDESCRIPTION: Demonstrates the use of the side/1 alias for a square object. This alias is likely mapped to the width or height of the square.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/aliases/NOTES.md#2025-04-06_snippet_2\n\nLANGUAGE: logtalk\nCODE:\n```\nsquare(2)::side(Side).\n```\n\n----------------------------------------\n\nTITLE: Defining message_cache_/1 predicate in Logtalk\nDESCRIPTION: Defines a dynamic predicate message_cache_/1 that stores messages emitted by the lgtunit tool when running tests. It has a template of message_cache_(Message) and can be called with zero or more proofs.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/xunit_net_v2_report_0.rst.txt#2025-04-06_snippet_0\n\nLANGUAGE: Logtalk\nCODE:\n```\nmessage_cache_/1\n```\n\n----------------------------------------\n\nTITLE: Template and Modes for multifile/1 Directive in Logtalk\nDESCRIPTION: Defines the template and mode specifications for the multifile/1 directive, showing the expected argument types for both predicate and non-terminal indicators.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/refman/directives/multifile_1.rst#2025-04-06_snippet_1\n\nLANGUAGE: logtalk\nCODE:\n```\nmultifile(+qualified_predicate_indicator_term)\nmultifile(+qualified_non_terminal_indicator_term)\n```\n\n----------------------------------------\n\nTITLE: Testing Mutations Library in Logtalk\nDESCRIPTION: Command to load and run the tester file for the mutations library predicates.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/library/mutations/NOTES.md#2025-04-06_snippet_1\n\nLANGUAGE: logtalk\nCODE:\n```\n| ?- logtalk_load(mutations(tester)).\n```\n\n----------------------------------------\n\nTITLE: Using XML Entities in Documentation\nDESCRIPTION: Example of using XML entities for author, license and copyright information in info/1 directives\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/userman/documenting.rst#2025-04-06_snippet_5\n\nLANGUAGE: prolog\nCODE:\n```\n:- info([\n    version is 1:1:0,\n    author is {author},\n    license is {license},\n    copyright is {copyright}\n]).\n```\n\n----------------------------------------\n\nTITLE: Planning a Trip with Logtalk Planner\nDESCRIPTION: Uses the loaded planner module to plan a trip from Imperial College in London to AIAI in Edinburgh. The result will be stored in the variable L, containing the recommended route.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/lo/planner/NOTES.md#2025-04-06_snippet_2\n\nLANGUAGE: logtalk\nCODE:\n```\nplan(london)::from(imperial, aiai, L).\n```\n\n----------------------------------------\n\nTITLE: Generating Version 1 UUID as Atom\nDESCRIPTION: Example of generating a version 1 UUID with a specific node ID, returning result as an atom.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/libraries/uuid.rst#2025-04-06_snippet_2\n\nLANGUAGE: logtalk\nCODE:\n```\n| ?- uuid::uuid_v1([0xf2,0xd1,0x90,0x94,0xdc,0x4b], UUID).\nUUID = '00a66fc0-82cf-11eb-bc83-f2d19094dc4b'\nyes\n```\n\n----------------------------------------\n\nTITLE: Difference List Implementation\nDESCRIPTION: Alternative implementation of the list protocol using difference lists, demonstrating protocol reuse with different implementations.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/tutorial/lists.rst#2025-04-06_snippet_4\n\nLANGUAGE: logtalk\nCODE:\n```\n:- object(difflist,\n    implements(listp).\n\n    append(L1-X, X-L2, L1-L2).\n    ...\n\n:- end_object.\n```\n\n----------------------------------------\n\nTITLE: Debug Event Format Change\nDESCRIPTION: Modified debug events fact/4 and rule/4 to fact/3 and rule/3 by removing entity argument since it's available from execution context.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/RELEASE_NOTES.md#2025-04-06_snippet_98\n\nLANGUAGE: Logtalk\nCODE:\n```\nfact/3\nrule/3\n```\n\n----------------------------------------\n\nTITLE: Logtalk Documentation Structure\nDESCRIPTION: ReStructuredText toctree directive that organizes documentation for entity property predicates, linking to separate pages for category, object, and protocol properties.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/refman/predicates/enumerating_entity_property_predicates.rst#2025-04-06_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. toctree::\n   :maxdepth: 1\n\n   category_property_2\n   object_property_2\n   protocol_property_2\n```\n\n----------------------------------------\n\nTITLE: Setting Meta Compiler as Default Hook Object in Logtalk\nDESCRIPTION: This snippet shows how to set meta_compiler as the default hook object for optimizing meta-calls in Logtalk. Note that optimizations are only applied to entities compiled with the optimize flag turned on.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/libraries/meta_compiler.rst.txt#2025-04-06_snippet_2\n\nLANGUAGE: Prolog\nCODE:\n```\n| ?- set_logtalk_flag(hook, meta_compiler).\n```\n\n----------------------------------------\n\nTITLE: Sorting List in Ascending Order in Logtalk\nDESCRIPTION: Defines a private predicate sort/2 that sorts a list in ascending order. It takes an input list and returns a sorted list.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/set_1.rst.txt#2025-04-06_snippet_0\n\nLANGUAGE: Logtalk\nCODE:\n```\nsort/2\n```\n\n----------------------------------------\n\nTITLE: Run LIPS Benchmark (10000 iterations)\nDESCRIPTION: Computes Million Logical Inferences Per Second (MLIPS) by averaging over 10000 repetitions of the list reverse operation.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/lips/NOTES.md#2025-04-06_snippet_3\n\nLANGUAGE: logtalk\nCODE:\n```\nlips::mlips(10000, MLIPS).\n```\n\n----------------------------------------\n\nTITLE: Querying Employee Name\nDESCRIPTION: Retrieves the name property from the employee object using message sending.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/complements/allow/NOTES.md#2025-04-06_snippet_2\n\nLANGUAGE: logtalk\nCODE:\n```\nemployee::name(Name).\n```\n\n----------------------------------------\n\nTITLE: Learn Clauses Predicate Definition\nDESCRIPTION: Predicate that learns and returns a set of clauses. Takes a single argument that receives the learned clauses as a list.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/metagol_example_protocol_0.rst.txt#2025-04-06_snippet_0\n\nLANGUAGE: logtalk\nCODE:\n```\nlearn(Clauses)\n```\n\n----------------------------------------\n\nTITLE: Representing HTML List Elements in Prolog\nDESCRIPTION: Demonstrates how to represent an ordered list with attributes and list items in Prolog term format for conversion to HTML.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/libraries/html.rst.txt#2025-04-06_snippet_0\n\nLANGUAGE: prolog\nCODE:\n```\nol([type-a], [li(foo), li(bar), li(baz)])\n```\n\n----------------------------------------\n\nTITLE: Sorting Lists Using Colors Order\nDESCRIPTION: Sorts a list of color names using a custom color ordering defined in the colours object.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/sicstus/NOTES.md#2025-04-06_snippet_2\n\nLANGUAGE: logtalk\nCODE:\n```\nsort(colours)::sort([orange, indigo, red, yellow, violet, blue, green], Sorted).\n```\n\n----------------------------------------\n\nTITLE: Direct Logic Translation Example\nDESCRIPTION: Demonstrates direct translation of a logic proposition (p v ~q) => (r & k) to clausal form without intermediate steps.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/logic/NOTES.md#2025-04-06_snippet_2\n\nLANGUAGE: logtalk\nCODE:\n```\ntranslator::translate((p v ~q) => (r & k), Cs).\n```\n\n----------------------------------------\n\nTITLE: Loading Individual Logtalk Library\nDESCRIPTION: Example of loading an individual library (random) using the loader notation with the logtalk_load predicate.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/libraries/overview.rst#2025-04-06_snippet_0\n\nLANGUAGE: prolog\nCODE:\n```\n| ?- logtalk_load(random(loader)).\n```\n\n----------------------------------------\n\nTITLE: Testing the Union-Find Library in Logtalk\nDESCRIPTION: Shows how to load and run the test suite for the union-find library using the tester.lgt file.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/libraries/union_find.rst#2025-04-06_snippet_1\n\nLANGUAGE: logtalk\nCODE:\n```\n| ?- logtalk_load(union_find(tester)).\n```\n\n----------------------------------------\n\nTITLE: Debugging object::append/3 predicate\nDESCRIPTION: This snippet demonstrates debugging the append/3 predicate defined in the object, showing recursive cases and base case.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/debug_hooks/NOTES.md#2025-04-06_snippet_2\n\nLANGUAGE: logtalk\nCODE:\n```\nobject::append([1,2,3], [4,5], List).\n```\n\n----------------------------------------\n\nTITLE: Retrieving Commit Author Using commit_author/2\nDESCRIPTION: Example query showing how to get the author of the latest commit in a git repository.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/library/git/NOTES.md#2025-04-06_snippet_3\n\nLANGUAGE: Prolog\nCODE:\n```\n| ?- git::commit_author('/Users/pmoura/Documents/Logtalk/logtalk3', Author).\n\nAuthor = 'Paulo Moura'\nyes\n```\n\n----------------------------------------\n\nTITLE: Querying Class Superclass\nDESCRIPTION: Retrieves the superclass(es) of the class metaclass.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/roots/NOTES.md#2025-04-06_snippet_6\n\nLANGUAGE: logtalk\nCODE:\n```\nclass::superclass(Super).\n```\n\n----------------------------------------\n\nTITLE: Load Benchmarking Module\nDESCRIPTION: Loads the ebench benchmarking module required for running the tests.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/engines/ebench/NOTES.md#2025-04-06_snippet_1\n\nLANGUAGE: logtalk\nCODE:\n```\nlogtalk_load(ebench(loader)).\n```\n\n----------------------------------------\n\nTITLE: Loading the Permutations Benchmark\nDESCRIPTION: Loads the permutations benchmark code using the loader file.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/permutations/NOTES.md#2025-04-06_snippet_1\n\nLANGUAGE: logtalk\nCODE:\n```\nlogtalk_load(permutations(loader)).\n```\n\n----------------------------------------\n\nTITLE: Defining normalize_unit/2 Predicate for Number Lists in Logtalk\nDESCRIPTION: Normalizes a list of numbers to a unit vector (Euclidean norm of 1). The caller must handle arithmetic exceptions if the list is not normalizable.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/numberlistp_0.rst.txt#2025-04-06_snippet_17\n\nLANGUAGE: Logtalk\nCODE:\n```\nnormalize_unit(List,NormalizedList)\n```\n\n----------------------------------------\n\nTITLE: Type Validation Examples\nDESCRIPTION: Examples showing type validation using the valid/2 predicate for checking positive integers.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/libraries/types.rst#2025-04-06_snippet_3\n\nLANGUAGE: prolog\nCODE:\n```\n| ?- type::valid(positive_integer, 42).\n| ?- type::valid(positive_integer, -13).\n```\n\n----------------------------------------\n\nTITLE: Loading CLP(FD) Library\nDESCRIPTION: Loads the CLP(FD) library and configures term writing settings\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/constraints/yap/NOTES.md#2025-04-06_snippet_0\n\nLANGUAGE: logtalk\nCODE:\n```\nlogtalk_load(clp_yap(loader)).\n\nset_prolog_flag(toplevel_print_options, [quoted(true), portray(true), max_depth(50), priority(699)]).\n```\n\n----------------------------------------\n\nTITLE: Type Checking with Context in Logtalk\nDESCRIPTION: Example showing how to implement type checking for predicate arguments using the context method and type library.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/userman/predicates.rst#2025-04-06_snippet_49\n\nLANGUAGE: logtalk\nCODE:\n```\nfoo(A, N) :-\n    % type-check arguments\n    context(Context),\n    type::check(atom, A, Context),\n    type::check(integer, N, Context),\n    % arguments are fine; go ahead\n    ... .\n```\n\n----------------------------------------\n\nTITLE: Specifying Modes and Proofs for current_protocol/1 in Logtalk\nDESCRIPTION: Defines the mode declaration for current_protocol/1, indicating it accepts a protocol identifier as input (which can be a variable for enumeration) and can return zero or more solutions.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/refman/predicates/current_protocol_1.rst#2025-04-06_snippet_1\n\nLANGUAGE: logtalk\nCODE:\n```\ncurrent_protocol(?protocol_identifier) - zero_or_more\n```\n\n----------------------------------------\n\nTITLE: Printing Version Information in Logtalk\nDESCRIPTION: Prints the versions of Logtalk, Prolog backend, and kernel when running in a notebook environment.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/instvars/NOTES.md#2025-04-06_snippet_0\n\nLANGUAGE: logtalk\nCODE:\n```\n%versions\n```\n\n----------------------------------------\n\nTITLE: Defining Logtalk Documentation Structure with reStructuredText\nDESCRIPTION: Creates a toctree directive in reStructuredText format to organize the built-in predicates documentation into logical categories. The maxdepth parameter is set to 2, indicating the depth of sections to display in the table of contents.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/refman/predicates/index.rst.txt#2025-04-06_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. toctree::\n   :maxdepth: 2\n\n   enumerating_entity_predicates\n   enumerating_entity_property_predicates\n   creating_entity_predicates\n   abolishing_entity_predicates\n   entity_relation_predicates\n   event_handling_predicates\n   multi_threading_predicates\n   engine_predicates\n   compiling_predicates\n   flag_predicates\n   linter_predicates\n```\n\n----------------------------------------\n\nTITLE: Loading the LPA Timetables Example in Logtalk\nDESCRIPTION: Loads the example and required library files to set up the timetable management system.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/lpa/timetables/NOTES.md#2025-04-06_snippet_2\n\nLANGUAGE: logtalk\nCODE:\n```\nlogtalk_load(lpa_timetables(loader)).\n```\n\n----------------------------------------\n\nTITLE: EDCG Predicate Declaration Syntax\nDESCRIPTION: Demonstrates how to declare predicates with hidden parameters for EDCG usage.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/libraries/edcg.rst.txt#2025-04-06_snippet_5\n\nLANGUAGE: logtalk\nCODE:\n```\npred_info(Name, Arity, List).\n```\n\n----------------------------------------\n\nTITLE: Defining question_prompt_stream/4 Method in Logtalk\nDESCRIPTION: This snippet shows the signature of the question_prompt_stream/4 method, which is used to specify the default prompt and input stream for asking questions. It takes arguments for the kind of question, the component, the prompt text, and the input stream.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/refman/methods/question_prompt_stream_4.rst.txt#2025-04-06_snippet_0\n\nLANGUAGE: Prolog\nCODE:\n```\nquestion_prompt_stream(Kind, Component, Prompt, Stream)\n```\n\n----------------------------------------\n\nTITLE: Accessing Loaded File Properties in Logtalk\nDESCRIPTION: Predicate for accessing loaded source file properties, including basename/1, directory/1, and parent/1 when available. Used to gather information about loaded Prolog source files for diagram generation.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/modules_diagram_support_0.rst.txt#2025-04-06_snippet_1\n\nLANGUAGE: Prolog\nCODE:\n```\nloaded_file_property(File, Property)\n```\n\n----------------------------------------\n\nTITLE: Defining Equality Operator in Logtalk Protocol\nDESCRIPTION: Defines the equality operator (=:=) which evaluates to true if Term1 is equal to Term2. It uses static compilation flags and works with term inputs.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/comparingp_0.rst.txt#2025-04-06_snippet_4\n\nLANGUAGE: Logtalk\nCODE:\n```\nTerm1=:=Term2\n```\n\n----------------------------------------\n\nTITLE: Custom Hook Pipeline Example in Logtalk\nDESCRIPTION: Example showing how to use a pipeline of hook objects for source code expansion.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/userman/expansion.rst.txt#2025-04-06_snippet_5\n\nLANGUAGE: prolog\nCODE:\n```\n| ?- logtalk_load(\n         source,\n         [hook(hook_pipeline([backend_adapter_hook, my_expansion]))]\n     ).\n```\n\n----------------------------------------\n\nTITLE: Loading Basic Types Library in Logtalk\nDESCRIPTION: Command to load all entities in the basic_types library using the loader.lgt file.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/library/basic_types/NOTES.md#2025-04-06_snippet_0\n\nLANGUAGE: logtalk\nCODE:\n```\n| ?- logtalk_load(basic_types(loader)).\n```\n\n----------------------------------------\n\nTITLE: Mode Declaration for findall/3 in Logtalk\nDESCRIPTION: The mode declaration for findall/3 showing expected argument types and determinism. It takes a term, a callable goal, and a list, with zero or one proofs.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/refman/methods/findall_3.rst#2025-04-06_snippet_2\n\nLANGUAGE: logtalk\nCODE:\n```\nfindall(?term, +callable, ?list) - zero_or_one\n```\n\n----------------------------------------\n\nTITLE: Defining a Custom Type in Logtalk\nDESCRIPTION: Shows how to declare a new custom type by extending the type object's multifile predicate.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/userman/errors.rst#2025-04-06_snippet_4\n\nLANGUAGE: logtalk\nCODE:\n```\n:- multifile(type::type/1).\ntype::type(temperature(_Unit)).\n```\n\n----------------------------------------\n\nTITLE: Querying source_data Flag Value in Prolog\nDESCRIPTION: Demonstrates how to use the current_logtalk_flag/2 predicate to retrieve the current value of the source_data flag in Logtalk.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/refman/predicates/current_logtalk_flag_2.rst#2025-04-06_snippet_2\n\nLANGUAGE: Prolog\nCODE:\n```\n| ?- current_logtalk_flag(source_data, Value).\n```\n\n----------------------------------------\n\nTITLE: Generating XML Documentation for Directory Entities in Logtalk\nDESCRIPTION: Creates XML documenting files for all entities in a specified directory using default options. Takes a single atom argument representing the directory path.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/lgtdocp_0.rst.txt#2025-04-06_snippet_6\n\nLANGUAGE: Logtalk\nCODE:\n```\ndirectory(Directory)\n```\n\n----------------------------------------\n\nTITLE: Loading the persistency example\nDESCRIPTION: Loads the persistency example using the loader file.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/persistency/NOTES.md#2025-04-06_snippet_1\n\nLANGUAGE: logtalk\nCODE:\n```\nlogtalk_load(persistency(loader)).\n```\n\n----------------------------------------\n\nTITLE: Adding Multiple Elements to Queue\nDESCRIPTION: Example of creating a new queue and adding multiple elements using join_all/3 predicate.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/libraries/queues.rst#2025-04-06_snippet_3\n\nLANGUAGE: logtalk\nCODE:\n```\n| ?- queue::(new(Queue0), join_all([1,2,3], Queue0, Queue1)).\nQueue0 = ...,\nQueue1 = ...\nyes\n```\n\n----------------------------------------\n\nTITLE: Creating Expected Terms from Values in Logtalk\nDESCRIPTION: Constructs an expected term from an expected value. This predicate takes a Value term and returns an Expected term representing that value.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/expected_0.rst.txt#2025-04-06_snippet_1\n\nLANGUAGE: Logtalk\nCODE:\n```\nof_expected(Value,Expected)\n```\n\n----------------------------------------\n\nTITLE: Loading the Twin Design Pattern Implementation\nDESCRIPTION: Loads the twin design pattern sample implementation from the design patterns directory.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/design_patterns/structural/twin/NOTES.md#2025-04-06_snippet_1\n\nLANGUAGE: logtalk\nCODE:\n```\nlogtalk_load(design_patterns('structural/twin/loader')).\n```\n\n----------------------------------------\n\nTITLE: Loading Types Library Tester\nDESCRIPTION: Command to load the testing module for the types library.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/libraries/types.rst#2025-04-06_snippet_2\n\nLANGUAGE: prolog\nCODE:\n```\n| ?- logtalk_load(types(tester)).\n```\n\n----------------------------------------\n\nTITLE: Compiling Prolog File with Wrapper Hook in Logtalk\nDESCRIPTION: Compiles a plain Prolog source file named 'zipper.pl' using the wrapper hook object to generate a Logtalk object wrapper.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/wrappers/NOTES.md#2025-04-06_snippet_2\n\nLANGUAGE: logtalk\nCODE:\n```\nlogtalk_load('zipper.pl', [hook(wrapper)]).\n```\n\n----------------------------------------\n\nTITLE: Creating Root Instance\nDESCRIPTION: Creates a new instance of the root class using the new/1 predicate.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/metaclasses/NOTES.md#2025-04-06_snippet_2\n\nLANGUAGE: logtalk\nCODE:\n```\nroot::new(I).\n```\n\n----------------------------------------\n\nTITLE: Using expecteds/2 predicate in Logtalk\nDESCRIPTION: Returns the values stored in the expected terms that hold a value. Takes a list of expected terms and unifies the second argument with a list of their values.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/either_0.rst.txt#2025-04-06_snippet_0\n\nLANGUAGE: logtalk\nCODE:\n```\nexpecteds(Expecteds,Values)\n```\n\n----------------------------------------\n\nTITLE: Defining meta-predicate template for question_hook/6 in Logtalk\nDESCRIPTION: Specifies the meta-predicate template for question_hook/6, showing which arguments are meta-arguments. The fifth argument is a meta-argument of arity 1.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/refman/methods/question_hook_6.rst#2025-04-06_snippet_2\n\nLANGUAGE: logtalk\nCODE:\n```\nquestion_hook(*, *, *, *, 1, *)\n```\n\n----------------------------------------\n\nTITLE: HTML Entity Example in RST\nDESCRIPTION: Example of an HTML entity that may not render correctly in Gecko-based browsers when viewing XML documentation.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/faq/troubleshooting.rst#2025-04-06_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n``&ndash;``\n```\n\n----------------------------------------\n\nTITLE: Setting CLASSPATH Environment Path in Terminal\nDESCRIPTION: Command line instructions for setting up the Java CLASSPATH environment variable in a Unix/Linux environment.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/document_converter/NOTES.md#2025-04-06_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n$ cd \"$LOGTALKUSER/examples/document_converter\"\n$ . set_classpath.sh\n```\n\n----------------------------------------\n\nTITLE: Testing Base64 Library in Logtalk\nDESCRIPTION: This snippet demonstrates how to load the tester file to test the base64 library predicates.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/library/base64/NOTES.md#2025-04-06_snippet_1\n\nLANGUAGE: Prolog\nCODE:\n```\n| ?- logtalk_load(base64(tester)).\n```\n\n----------------------------------------\n\nTITLE: Defining meta-predicate template for question_hook/6 in Logtalk\nDESCRIPTION: Specifies the meta-predicate template for question_hook/6, showing which arguments are meta-arguments. The fifth argument is a meta-argument of arity 1.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/refman/methods/question_hook_6.rst#2025-04-06_snippet_2\n\nLANGUAGE: logtalk\nCODE:\n```\nquestion_hook(*, *, *, *, 1, *)\n```\n\n----------------------------------------\n\nTITLE: Loading Wrapped Prolog Code\nDESCRIPTION: Commands to load and lint wrapped Prolog code using Logtalk's source data analysis.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/devtools/linter.rst.txt#2025-04-06_snippet_2\n\nLANGUAGE: prolog\nCODE:\n```\n| ?- logtalk_load(code, [source_data(on)]).\n```\n\n----------------------------------------\n\nTITLE: Loading Logtalk Entity Example\nDESCRIPTION: Example of the recommended way to load a Logtalk entity by using the library loader. This ensures all dependencies are loaded and required flags are set.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/entity_index.rst.txt#2025-04-06_snippet_0\n\nLANGUAGE: prolog\nCODE:\n```\nlogtalk_load(library_name(loader))\n```\n\n----------------------------------------\n\nTITLE: Using Empty Optional Term with or_else in Logtalk\nDESCRIPTION: This example demonstrates the use of 'or_else' predicate with an empty optional term.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/libraries/optionals.rst#2025-04-06_snippet_4\n\nLANGUAGE: Prolog\nCODE:\n```\n| ?- optional::empty(Optional), optional(Optional)::or_else(Term, 0).\nOptional = empty,\nTerm = 0\nyes\n```\n\n----------------------------------------\n\nTITLE: Setting Logtalk Flag Directive Template\nDESCRIPTION: Template and modes for the set_logtalk_flag/2 directive showing the expected parameter types.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/refman/directives/set_logtalk_flag_2.rst.txt#2025-04-06_snippet_0\n\nLANGUAGE: logtalk\nCODE:\n```\nset_logtalk_flag(+atom, +nonvar)\n```\n\n----------------------------------------\n\nTITLE: Using Hook Pipeline for Custom Expansion Workflow in Logtalk\nDESCRIPTION: This code snippet shows how to use a pipeline of hook objects for custom expansion workflows. It applies backend-specific expansions followed by a custom expansion when compiling a source file.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/userman/expansion.rst#2025-04-06_snippet_15\n\nLANGUAGE: Logtalk\nCODE:\n```\n| ?- logtalk_load(\n         source,\n         [hook(hook_pipeline([backend_adapter_hook, my_expansion]))]\n     ).\n```\n\n----------------------------------------\n\nTITLE: Printing Logtalk, Prolog backend, and kernel versions\nDESCRIPTION: Displays version information for Logtalk, the Prolog backend, and the kernel if running as a notebook.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/roles/NOTES.md#2025-04-06_snippet_0\n\nLANGUAGE: logtalk\nCODE:\n```\n%versions\n```\n\n----------------------------------------\n\nTITLE: Dead Code Scanner Integration Example\nDESCRIPTION: Example showing how to integrate the dead_code_scanner tool with logtalk_make/1 using multifile and dynamic declarations.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/refman/predicates/logtalk_make_target_action_1.rst#2025-04-06_snippet_2\n\nLANGUAGE: prolog\nCODE:\n```\n:- multifile(logtalk_make_target_action/1).\n:- dynamic(logtalk_make_target_action/1).\n\nlogtalk_make_target_action(check) :-\n    dead_code_scanner::all.\n```\n\n----------------------------------------\n\nTITLE: Type Error Handling for Integer Temperature in Logtalk\nDESCRIPTION: Demonstrates error handling when providing an integer instead of required float value for temperature.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/my_types/NOTES.md#2025-04-06_snippet_6\n\nLANGUAGE: logtalk\nCODE:\n```\ncatch(type::check(temperature(celsius), 38), Error, true).\n```\n\n----------------------------------------\n\nTITLE: Recompiling All Loaded Files in Debug Mode in Logtalk\nDESCRIPTION: Uses the logtalk_make/1 built-in predicate to recompile all loaded files in debug mode that were not compiled with explicit debug or optimize flags.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/userman/debugging.rst.txt#2025-04-06_snippet_3\n\nLANGUAGE: prolog\nCODE:\n```\n| ?- logtalk_make(debug).\n```\n\n----------------------------------------\n\nTITLE: Using Lazy List with Member Predicate in Logtalk\nDESCRIPTION: Demonstrates creating a lazy list of random numbers and accessing its elements using the list::member/2 predicate. Each element is computed on demand as needed.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/engines/lazy/NOTES.md#2025-04-06_snippet_2\n\nLANGUAGE: logtalk\nCODE:\n```\nlazy::find_all(X, (repeat,random::random(X)), List), list::member(E, List).\n```\n\n----------------------------------------\n\nTITLE: Loading ECLiPSe Constraint Solver Library in Logtalk\nDESCRIPTION: Loads the ECLiPSe Constraint Solver library for use with Logtalk. This step is necessary before running any of the constraint-based examples.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/constraints/eclipse/NOTES.md#2025-04-06_snippet_0\n\nLANGUAGE: logtalk\nCODE:\n```\nlogtalk_load(clp_eclipse(loader)).\n```\n\n----------------------------------------\n\nTITLE: Loading All Logtalk Libraries\nDESCRIPTION: Example showing how to load all Logtalk libraries using the all_loader.lgt file.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/libraries/overview.rst.txt#2025-04-06_snippet_1\n\nLANGUAGE: prolog\nCODE:\n```\n| ?- logtalk_load(library(all_loader)).\n```\n\n----------------------------------------\n\nTITLE: Declaring Non-Standard Prolog Meta-Predicates in Adapter Files\nDESCRIPTION: Shows how to explicitly declare non-standard Prolog meta-predicates in adapter files using an internal predicate.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/userman/predicates.rst#2025-04-06_snippet_55\n\nLANGUAGE: logtalk\nCODE:\n```\n'$lgt_prolog_meta_predicate'(det_call(_), det_call(0), predicate).\n```\n\n----------------------------------------\n\nTITLE: Defining a Basic Reflective System in Logtalk\nDESCRIPTION: Demonstrates how to define a set of objects that provide the basis for a reflective system in Logtalk, including object, class, and abstract_class.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/userman/objects.rst.txt#2025-04-06_snippet_8\n\nLANGUAGE: logtalk\nCODE:\n```\n:- set_logtalk_flag(unknown_entities, silent).\n\n:- object(object,\n    instantiates(class)).\n    ...\n:- end_object.\n\n:- object(class,\n    instantiates(class),\n    specializes(abstract_class)).\n    ...\n:- end_object.\n\n:- object(abstract_class,\n    instantiates(class),\n    specializes(object)).\n    ...\n:- end_object.\n```\n\n----------------------------------------\n\nTITLE: Setting Diesel Car Prototype\nDESCRIPTION: Sets the prototype instance to a diesel car configuration\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/design_patterns/creational/prototype/NOTES.md#2025-04-06_snippet_2\n\nLANGUAGE: logtalk\nCODE:\n```\ncar::set_prototype(diesel_car_prototype).\n```\n\n----------------------------------------\n\nTITLE: Generating Entity Diagram with Default Options in Logtalk\nDESCRIPTION: Creates a diagram for all entities in a loaded source file using default options. The file can be identified by name, basename, full path, or library notation.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/entity_diagram_1.rst.txt#2025-04-06_snippet_1\n\nLANGUAGE: Logtalk\nCODE:\n```\nfile(File)\n```\n\n----------------------------------------\n\nTITLE: Defining Lambda Expressions Grammar in BNF\nDESCRIPTION: BNF grammar rules for Logtalk lambda expressions, including free variables and parameters definitions.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/refman/grammar.rst.txt#2025-04-06_snippet_30\n\nLANGUAGE: bnf\nCODE:\n```\nlambda_expression ::=\n      lambda_free_variables \"/\" lambda_parameters \">>\" callable\n      | lambda_free_variables \"/\" callable\n      | lambda_parameters \">>\" callable\n\n   lambda_free_variables ::=\n      \"{\" variables? \"}\"\n\n   lambda_parameters ::=\n      \"[\" terms? \"]\"\n```\n\n----------------------------------------\n\nTITLE: Using Assertions with Directive in Logtalk\nDESCRIPTION: Example of using a uses/2 directive to simplify the syntax when using multiple assertions in a Logtalk object or category.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/devtools/assertions.rst#2025-04-06_snippet_4\n\nLANGUAGE: Logtalk\nCODE:\n```\n:- uses(assertions, [assertion/1, assertion/2]).\n```\n\n----------------------------------------\n\nTITLE: Recognizing a Parallelogram with Vertex Mapping\nDESCRIPTION: Recognizes a parallelogram by defining its edges and querying for its class and vertex mapping. The vertices rotation results in four solutions per class.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/ncl/figures/NOTES.md#2025-04-06_snippet_2\n\nLANGUAGE: logtalk\nCODE:\n```\nfigures(_, _, _, _, _, _, _, _, _, _, _, _, _, _, _)::(\\n\\t\\tedge(1, 2,  0, 20),\\n\\t\\tedge(2, 3, 45, 30),\\n\\t\\tedge(3, 4,  0, 20),\\n\\t\\tedge(4, 1, 45, 30),\\n\\t\\tclass(Name, X, Y, Z, P)\\n\\t).\n```\n\n----------------------------------------\n\nTITLE: Loading Adapter Design Pattern Implementation\nDESCRIPTION: This code loads the sample implementation of the Adapter design pattern from the Logtalk design patterns library.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/design_patterns/structural/adapter/NOTES.md#2025-04-06_snippet_1\n\nLANGUAGE: logtalk\nCODE:\n```\nlogtalk_load(design_patterns('structural/adapter/loader')).\n```\n\n----------------------------------------\n\nTITLE: Querying Mutation Algorithm Counts in Logtalk\nDESCRIPTION: Example of using mutations_store::counter/2 predicate to query the number of available mutation algorithms per type.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/library/mutations/NOTES.md#2025-04-06_snippet_3\n\nLANGUAGE: logtalk\nCODE:\n```\n| ?- mutations_store::counter(Type, Count).\nType = atom,\nCount = 6 ;\nType = integer,\nCount = 7 ;\n...\n```\n\n----------------------------------------\n\nTITLE: Checking Block Positions\nDESCRIPTION: Retrieves and displays the current positions of all blocks after movement.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/blocks/NOTES.md#2025-04-06_snippet_9\n\nLANGUAGE: logtalk\nCODE:\n```\na::position(Xa, Ya), b::position(Xb, Yb), c::position(Xc, Yc), d::position(Xd, Yd).\n```\n\n----------------------------------------\n\nTITLE: Checking Unicode Block Information\nDESCRIPTION: Demonstrates usage of the unicode_block/2 and unicode_block/3 predicates from the unicode_blocks.pl file to query Unicode block information.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/libraries/unicode_data.rst#2025-04-06_snippet_3\n\nLANGUAGE: Prolog\nCODE:\n```\n?- unicode_block(CodePoint, Block).\n?- unicode_block(Start, End, Block).\n```\n\n----------------------------------------\n\nTITLE: Printing Logtalk, Prolog Backend, and Kernel Versions\nDESCRIPTION: Prints the versions of Logtalk, the Prolog backend, and the kernel when running as a notebook.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/ncl/figures/NOTES.md#2025-04-06_snippet_0\n\nLANGUAGE: logtalk\nCODE:\n```\n%versions\n```\n\n----------------------------------------\n\nTITLE: Pairs Library Mapping Predicate\nDESCRIPTION: Added predicate map/3 to the pairs library for mapping operations on pairs.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/RELEASE_NOTES.md#2025-04-06_snippet_79\n\nLANGUAGE: Logtalk\nCODE:\n```\nmap/3\n```\n\n----------------------------------------\n\nTITLE: Template and Modes for Category Directive in Logtalk\nDESCRIPTION: Specifies the input modes for the category directive parameters, showing all valid combinations of the directive with proper type annotations for identifiers, protocols, categories, and objects.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/refman/directives/category_1_4.rst#2025-04-06_snippet_1\n\nLANGUAGE: logtalk\nCODE:\n```\ncategory(+category_identifier)\n\ncategory(+category_identifier,\n    implements(+implemented_protocols))\n\ncategory(+category_identifier,\n    extends(+extended_categories))\n\ncategory(+category_identifier,\n    complements(+complemented_objects))\n\ncategory(+category_identifier,\n    implements(+implemented_protocols),\n    extends(+extended_categories))\n\ncategory(+category_identifier,\n    implements(+implemented_protocols),\n    complements(+complemented_objects))\n\ncategory(+category_identifier,\n    extends(+extended_categories),\n    complements(+complemented_objects))\n\ncategory(+category_identifier,\n    implements(+implemented_protocols),\n    extends(+extended_categories),\n    complements(+complemented_objects))\n```\n\n----------------------------------------\n\nTITLE: Defining Subject Timetables in Prolog\nDESCRIPTION: This snippet presents the timetable organized by subjects, showing which year groups are taught by which teachers during different periods. It uses Prolog syntax to represent the schedule for each subject.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/lpa/timetables/NOTES.md#2025-04-06_snippet_9\n\nLANGUAGE: prolog\nCODE:\n```\nSUBJECT: maths\np1: second_year taught by brian\np1: third_year taught by dave\np2: fourth_year taught by dave\np3: first_year taught by brian\n\nSUBJECT: music\np2: second_year taught by brian\np4: first_year taught by brian\np5: third_year taught by brian\n\nSUBJECT: french\np1: first_year taught by nicky\np1: fourth_year taught by clive\np3: second_year taught by nicky\np4: third_year taught by clive\n\nSUBJECT: prolog\np2: second_year taught by clive\np3: third_year taught by clive\np5: first_year taught by clive\n\nSUBJECT: biology\np2: first_year taught by nicky\np4: second_year taught by nicky\np5: fourth_year taught by nicky\n\nSUBJECT: prolog++\np1: second_year taught by phil\np2: first_year taught by phil\np4: fourth_year taught by phil\np5: third_year taught by phil\n\nSUBJECT: accountancy\np1: first_year taught by diane\np2: third_year taught by diane\np3: fourth_year taught by diane\np5: second_year taught by diane\n\ntrue.\n```\n\n----------------------------------------\n\nTITLE: EDCG Accumulator Declaration - Short Form\nDESCRIPTION: Shows the short form for declaring accumulators in EDCG, specifying the accumulator name, term to be accumulated, and the accumulating function.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/libraries/edcg.rst.txt#2025-04-06_snippet_6\n\nLANGUAGE: logtalk\nCODE:\n```\nacc_info(Acc, Term, Left, Right, Joiner).\n```\n\n----------------------------------------\n\nTITLE: Calculating Object Metrics in Logtalk\nDESCRIPTION: This snippet queries the side length, area, and perimeter of the 'q2' object. It uses individual message sends instead of message broadcasting to work around a XSB parser bug.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/shapes/ch/NOTES.md#2025-04-06_snippet_4\n\nLANGUAGE: logtalk\nCODE:\n```\nq2::side(Side), q2::area(Area), q2::perimeter(Perimeter).\n```\n\n----------------------------------------\n\nTITLE: Printing Logtalk, Prolog backend, and kernel versions\nDESCRIPTION: This snippet prints the versions of Logtalk, the Prolog backend, and the kernel if running as a notebook.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/debug_hooks/NOTES.md#2025-04-06_snippet_0\n\nLANGUAGE: logtalk\nCODE:\n```\n%versions\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Memento Pattern Usage\nDESCRIPTION: This snippet demonstrates a sample sequence of operations using the Memento pattern, including setting states, saving mementos, and restoring from mementos.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/design_patterns/behavioral/memento/NOTES.md#2025-04-06_snippet_2\n\nLANGUAGE: logtalk\nCODE:\n```\noriginator::(\n\t\tset(s1),\n\t\tset(s2),\n\t\tsave_to_memento(Momento1),\n\t\tset(s3),\n\t\tsave_to_memento(Momento2),\n\t\tset(s4),\n\t\trestore_from_memento(Momento1),\n\t\tset(s5),\n\t\trestore_from_memento(Momento2)\n\t).\n```\n\n----------------------------------------\n\nTITLE: Defining Table of Contents for Logtalk Directives in reStructuredText\nDESCRIPTION: This code snippet defines a table of contents for Logtalk directives documentation using reStructuredText syntax. It specifies a maximum depth of 2 and includes links to four different directive categories.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/refman/directives/index.rst#2025-04-06_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. toctree::\n   :maxdepth: 2\n\n   source_file_directives\n   conditional_compilation_directives\n   entity_directives\n   predicate_directives\n```\n\n----------------------------------------\n\nTITLE: Included Directory Dynamic Predicate - included_directory_/1\nDESCRIPTION: Dynamic predicate that maintains a table of Logtalk directories already included in the diagram. Allows querying of stored paths.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/directory_diagram_1.rst.txt#2025-04-06_snippet_3\n\nLANGUAGE: logtalk\nCODE:\n```\nincluded_directory_(?atom)\n```\n\n----------------------------------------\n\nTITLE: Running Hook Flows Tests in Logtalk\nDESCRIPTION: Command to load and run the test suite for the hook_flows library.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/library/hook_flows/NOTES.md#2025-04-06_snippet_1\n\nLANGUAGE: prolog\nCODE:\n```\n| ?- logtalk_load(hook_flows(tester)).\n```\n\n----------------------------------------\n\nTITLE: Defining tests_results_summary/7 predicate\nDESCRIPTION: Updated lgtunit tool message predicate to better support flaky tests reporting\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/RELEASE_NOTES.md#2025-04-06_snippet_30\n\nLANGUAGE: Prolog\nCODE:\n```\ntests_results_summary(Total, Passed, Failed, Skipped, Others, Flaky, Time)\n```\n\n----------------------------------------\n\nTITLE: Loading Genint Library in Logtalk\nDESCRIPTION: This snippet demonstrates how to load all entities in the genint library using the loader.lgt file.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/libraries/genint.rst.txt#2025-04-06_snippet_0\n\nLANGUAGE: Logtalk\nCODE:\n```\n| ?- logtalk_load(genint(loader)).\n```\n\n----------------------------------------\n\nTITLE: Loading Benchmarks without Event Support\nDESCRIPTION: Loads the benchmark suite with event support turned off and using static binding.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/benchmarks/NOTES.md#2025-04-06_snippet_2\n\nLANGUAGE: logtalk\nCODE:\n```\nlogtalk_load(benchmarks(loader_no_events)).\n```\n\n----------------------------------------\n\nTITLE: Initializing Application Root Path in Logtalk\nDESCRIPTION: Example of using an initialization directive to set up a library path alias for an application's root directory using the current loading context.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/refman/predicates/logtalk_library_path_2.rst#2025-04-06_snippet_1\n\nLANGUAGE: Prolog\nCODE:\n```\n:- initialization((\n   logtalk_load_context(directory, Directory),\n   asserta(logtalk_library_path(my_application_root, Directory))\n)).\n```\n\n----------------------------------------\n\nTITLE: Converting XML to RST with Sphinx Configuration\nDESCRIPTION: Command examples for using lgt2rst tool to convert documentation to RST format and configure Sphinx documentation. The -s flag triggers sphinx-quickstart and accepts additional configuration parameters in non-interactive mode.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/tools/lgtdoc/xml/NOTES.md#2025-04-06_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nlgt2rst -s -- -q -p \"My Project\" -a \"J. Doe\" -v \"1.12\"\n```\n\n----------------------------------------\n\nTITLE: Camp Swampy Puzzle\nDESCRIPTION: Solves Mort's Letter puzzle about bed assignments at Camp Swampy\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/puzzles/NOTES.md#2025-04-06_snippet_10\n\nLANGUAGE: logtalk\nCODE:\n```\ncamp_swampy::(beds(S), print(S)).\n```\n\n----------------------------------------\n\nTITLE: Defining Pack Name in Logtalk\nDESCRIPTION: Specifies the pack name. This predicate is expected to return a single atom representing the pack name.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/pack_protocol_0.rst.txt#2025-04-06_snippet_0\n\nLANGUAGE: Logtalk\nCODE:\n```\nname(Name)\n```\n\n----------------------------------------\n\nTITLE: New Predicates in types and statistics Libraries\nDESCRIPTION: Added new predicates min_max/3 and modes/2 to the types and statistics libraries.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/RELEASE_NOTES.md#2025-04-06_snippet_22\n\nLANGUAGE: Logtalk\nCODE:\n```\nmin_max(List, Min, Max).\nmodes(List, Modes).\n```\n\n----------------------------------------\n\nTITLE: Parents List Predicate\nDESCRIPTION: Returns a list containing all object parents. Takes a single parameter Parents that returns the list of parent objects.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/proto_hierarchyp_0.rst.txt#2025-04-06_snippet_1\n\nLANGUAGE: logtalk\nCODE:\n```\nparents(-list)\n```\n\n----------------------------------------\n\nTITLE: Testing Second Diamond Problem Variant\nDESCRIPTION: Sends message m/0 to object d2, demonstrating the second variant of the diamond problem where the solution makes the other inherited definition visible.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/diamonds/NOTES.md#2025-04-06_snippet_4\n\nLANGUAGE: logtalk\nCODE:\n```\nd2::m.\n```\n\n----------------------------------------\n\nTITLE: Querying Inlined Predicate Properties\nDESCRIPTION: Retrieves the definition properties of the inlined 'a/2' predicate from the 'inlining' object.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/inlining/NOTES.md#2025-04-06_snippet_3\n\nLANGUAGE: logtalk\nCODE:\n```\nobject_property(inlining, defines(a/2, Properties)).\n```\n\n----------------------------------------\n\nTITLE: Using Expected Terms with Parametric Objects\nDESCRIPTION: Examples demonstrating how to use expected terms with the expected parametric object, showing both successful and unsuccessful cases.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/library/expecteds/NOTES.md#2025-04-06_snippet_3\n\nLANGUAGE: logtalk\nCODE:\n```\n| ?- expected::of_expected(1, Expected), expected(Expected)::or_else(Value, 0).\nExpected = expected(1),\nValue = 1\nyes\n```\n\nLANGUAGE: logtalk\nCODE:\n```\n| ?- expected::of_unexpected(-1, Expected), expected(Expected)::or_else(Value, 0).\nExpected = unexpected(-1),\nValue = 0\nyes\n```\n\n----------------------------------------\n\nTITLE: Configuring PDT Runtime for Logtalk on Windows\nDESCRIPTION: Configuration command for PDT runtime preferences on Windows to enable Logtalk integration with SWI-Prolog. Specifies the command to start SWI-Prolog with Logtalk integration script.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/coding/pdt/NOTES.md#2025-04-06_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\ncmd.exe /c start \"cmdwindow\" /min \"C:\\Program Files\\pl\\bin\\swipl-win.exe\" -s \"%LOGTALKHOME%\\integration\\logtalk_swi.pl\"\n```\n\n----------------------------------------\n\nTITLE: Defining modes/2 Predicate for Number Lists in Logtalk\nDESCRIPTION: Returns a list of modes (most frequent values) from a list of numbers in ascending order. Fails if the list is empty.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/numberlistp_0.rst.txt#2025-04-06_snippet_7\n\nLANGUAGE: Logtalk\nCODE:\n```\nmodes(List,Modes)\n```\n\n----------------------------------------\n\nTITLE: Checking Versions in Logtalk\nDESCRIPTION: Prints the versions of Logtalk, Prolog backend, and kernel when running as a notebook.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/aspects/NOTES.md#2025-04-06_snippet_0\n\nLANGUAGE: logtalk\nCODE:\n```\n%versions\n```\n\n----------------------------------------\n\nTITLE: Defining multifile predicates in Logtalk user pseudo-object\nDESCRIPTION: Changes the 'user' pseudo-object to declare the 'before/3' and 'after/3' predicates as multifile to avoid predicate existence errors when using this object as a monitor without definitions for these predicates in 'user'.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/RELEASE_NOTES.md#2025-04-06_snippet_15\n\nLANGUAGE: Logtalk\nCODE:\n```\n:- multifile(before/3).\n:- multifile(after/3).\n```\n\n----------------------------------------\n\nTITLE: Defining mode/2 Directive in Logtalk\nDESCRIPTION: The mode/2 directive specifies the instantiation mode and number of proofs for predicates or grammar rule non-terminals. It takes a predicate mode term or non-terminal mode term as the first argument and the number of proofs as the second argument.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/refman/directives/mode_2.rst#2025-04-06_snippet_0\n\nLANGUAGE: Logtalk\nCODE:\n```\nmode(Mode, NumberOfProofs)\n```\n\n----------------------------------------\n\nTITLE: Checking Versions in Logtalk\nDESCRIPTION: Prints the versions of Logtalk, Prolog backend, and kernel when running in a notebook environment.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/now_you_see_me/NOTES.md#2025-04-06_snippet_0\n\nLANGUAGE: logtalk\nCODE:\n```\n%versions\n```\n\n----------------------------------------\n\nTITLE: Defining Message Sending Table of Contents in reStructuredText\nDESCRIPTION: This snippet defines a table of contents for message sending documentation using reStructuredText syntax. It includes links to 'send_to_object_2' and 'send_to_self_1' predicates.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/refman/control/message_sending.rst#2025-04-06_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. _message_sending:\n\nMessage sending\n===============\n\n.. toctree::\n   :maxdepth: 1\n\n   send_to_object_2\n   send_to_self_1\n```\n\n----------------------------------------\n\nTITLE: Verifying the Float to Integer Conversion Result\nDESCRIPTION: Confirms the result of the previous conversion by explicitly calculating the same operation: rounding the result of multiplying the original number by itself and dividing by 2.0.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/design_patterns/logic/threading_state/NOTES.md#2025-04-06_snippet_3\n\nLANGUAGE: logtalk\nCODE:\n```\nInteger is round((12.34 * 12.34) /2.0).\n```\n\n----------------------------------------\n\nTITLE: Bill of Materials Example with DCG in Logtalk\nDESCRIPTION: Uses the bom object to list parts for different items using DCG rules.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/dcgs/NOTES.md#2025-04-06_snippet_7\n\nLANGUAGE: logtalk\nCODE:\n```\nbom::parts(bike, L).\n```\n\nLANGUAGE: logtalk\nCODE:\n```\nbom::parts(wheel, L).\n```\n\n----------------------------------------\n\nTITLE: Loading Logtalk Events Library\nDESCRIPTION: This snippet shows how to load all entities in the Logtalk events library using the loader file.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/library/events/NOTES.md#2025-04-06_snippet_0\n\nLANGUAGE: Logtalk\nCODE:\n```\n| ?- logtalk_load(events(loader)).\n```\n\n----------------------------------------\n\nTITLE: Printing books with extras using kilograms\nDESCRIPTION: This snippet prints a variant of the book list using kilograms instead of grams by mapping optionals.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/books/NOTES.md#2025-04-06_snippet_3\n\nLANGUAGE: logtalk\nCODE:\n```\ndata_processing::print_kg.\n```\n\n----------------------------------------\n\nTITLE: Implementing For-To Loop in Logtalk\nDESCRIPTION: Defines a for-to loop construct that calls a Goal while counting up from First to Last with an increment of 1. It uses meta-predicate notation to handle callable arguments.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/loopp_0.rst.txt#2025-04-06_snippet_4\n\nLANGUAGE: Logtalk\nCODE:\n```\nforto(First,Last,Goal)\n```\n\n----------------------------------------\n\nTITLE: Uses/1 Template and Modes\nDESCRIPTION: Defines the template and modes for the uses/1 directive, showing that it takes a list of object aliases as input.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/refman/directives/uses_1.rst#2025-04-06_snippet_1\n\nLANGUAGE: logtalk\nCODE:\n```\nuses(+object_alias_list)\n```\n\n----------------------------------------\n\nTITLE: Example Usage of mode/2 Directive for atom_concat in Logtalk\nDESCRIPTION: Demonstrates how to use the mode/2 directive with the atom_concat/3 predicate to document that it can be used in two different ways: splitting an atom or concatenating atoms.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/refman/directives/mode_2.rst.txt#2025-04-06_snippet_2\n\nLANGUAGE: logtalk\nCODE:\n```\n:- mode(atom_concat(-atom, -atom, +atom), one_or_more).\n:- mode(atom_concat(+atom, +atom, -atom), one).\n```\n\n----------------------------------------\n\nTITLE: Logtalk Debug Event Predicate References\nDESCRIPTION: References to key debug event predicates - trace_event/2 and debug_handler/3 that can intercept debug events in Logtalk applications. These multifile predicates are used for debugging and profiling purposes.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/userman/performance.rst.txt#2025-04-06_snippet_3\n\nLANGUAGE: logtalk\nCODE:\n```\nlogtalk::trace_event/2\n```\n\nLANGUAGE: logtalk\nCODE:\n```\nlogtalk::debug_handler/3\n```\n\n----------------------------------------\n\nTITLE: Defining findall/4 Method Signature in Logtalk\nDESCRIPTION: Specifies the signature of the findall/4 method, which finds all solutions for a given goal and collects them into a list with a specified tail.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/refman/methods/findall_4.rst#2025-04-06_snippet_0\n\nLANGUAGE: Logtalk\nCODE:\n```\nfindall(Template, Goal, List, Tail)\n```\n\n----------------------------------------\n\nTITLE: Using Double Curly Brackets to Bypass Logtalk Compiler in Grammar Rules\nDESCRIPTION: Demonstrates how to use double curly brackets {{}} to bypass the Logtalk compiler when calling external predicates from grammar rules.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/userman/predicates.rst.txt#2025-04-06_snippet_41\n\nLANGUAGE: logtalk\nCODE:\n```\nbar :-\n    write('bar predicate called'), nl.\n\n\n:- object(bypass).\n\n    :- public(foo//0).\n\n    foo --> {{bar}}.\n\n:- end_object.\n```\n\n----------------------------------------\n\nTITLE: Testing private goal expansion\nDESCRIPTION: Shows that goal expansion does not occur for private predicates in the exp_private object.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/expansion/NOTES.md#2025-04-06_snippet_7\n\nLANGUAGE: logtalk\nCODE:\n```\nexp_private::expand_goal(write(Term), EGoal).\n```\n\n----------------------------------------\n\nTITLE: Testing Solution Generators with forall/2 in Logtalk\nDESCRIPTION: Demonstrates testing predicates that generate multiple solutions using the forall/2 predicate with custom assertion descriptions.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/devtools/lgtunit.rst#2025-04-06_snippet_34\n\nLANGUAGE: logtalk\nCODE:\n```\n   :- uses(lgtunit, [assertion/2]).\n   ...\n\n   test(test_solution_generator_2) :-\n       forall(\n           generator(X, Y, Z),\n           assertion(generator(X), test(X,Y,Z))\n       ).\n```\n\n----------------------------------------\n\nTITLE: Generating ULID from Date Components\nDESCRIPTION: Example of generating a ULID using discrete timestamp components.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/library/ulid/NOTES.md#2025-04-06_snippet_6\n\nLANGUAGE: prolog\nCODE:\n```\n| ?- ulid(atom)::generate(2023, 5, 17, 16, 23, 38, 591, ULID).\nULID = '01H0N8CDAZK75C5H3BJSGS4VCQ'\nyes\n```\n\n----------------------------------------\n\nTITLE: Object Property Predicates\nDESCRIPTION: Newly added object and category property predicates for counting rules.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/RELEASE_NOTES.md#2025-04-06_snippet_75\n\nLANGUAGE: Prolog\nCODE:\n```\nnumber_of_rules/1\\nnumber_of_user_rules/1\n```\n\n----------------------------------------\n\nTITLE: Printing Logtalk, Prolog Backend, and Kernel Versions\nDESCRIPTION: This snippet prints the versions of Logtalk, the Prolog backend, and the kernel if running as a notebook.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/design_patterns/structural/marker_interface/NOTES.md#2025-04-06_snippet_0\n\nLANGUAGE: logtalk\nCODE:\n```\n%versions\n```\n\n----------------------------------------\n\nTITLE: Defining Meta-Types in Logtalk\nDESCRIPTION: Shows how to define a meta-type (a type with arguments that are also types) by adding a clause to the type::meta_type/3 multifile predicate. The example defines a tuple meta-type with three type arguments.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/libraries/types.rst.txt#2025-04-06_snippet_7\n\nLANGUAGE: prolog\nCODE:\n```\n:- multifile(type::meta_type/3).\ntype::meta_type(tuple(Type1, Type2, Type3), [Type1, Type2, Type3], []).\n```\n\n----------------------------------------\n\nTITLE: Querying Prototype Properties in Logtalk (Color)\nDESCRIPTION: Demonstrates querying the color property from the clyde prototype, returning grey as the color of the prototypical elephant.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/elephants/NOTES.md#2025-04-06_snippet_3\n\nLANGUAGE: logtalk\nCODE:\n```\nclyde::color(C).\n```\n\n----------------------------------------\n\nTITLE: Generating Student's t Distribution Values in Logtalk\nDESCRIPTION: Predicate that returns a standard Student's t distributed random value based on the provided degrees of freedom. It takes a positive integer as the degrees of freedom parameter and returns a float value.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/sampling_protocol_0.rst.txt#2025-04-06_snippet_0\n\nLANGUAGE: logtalk\nCODE:\n```\nstandard_t(DegreesOfFreedom,Value)\n```\n\n----------------------------------------\n\nTITLE: Extracting PDF Contents\nDESCRIPTION: Retrieves the text contents from a PDF document into a variable.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/document_converter/NOTES.md#2025-04-06_snippet_5\n\nLANGUAGE: logtalk\nCODE:\n```\ndocument::contents('test_files/sample.pdf', Contents).\n```\n\n----------------------------------------\n\nTITLE: Displaying Help for Text Conversion Script\nDESCRIPTION: Command to display help information for the lgt2txt script that converts XML documentation to plain text format.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/tools/lgtdoc/xml/NOTES.md#2025-04-06_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nlgt2txt.sh -h\n```\n\n----------------------------------------\n\nTITLE: Moving Modified Brick Stack\nDESCRIPTION: This snippet moves the modified stack to a new position by moving the bottom brick.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/bricks/NOTES.md#2025-04-06_snippet_12\n\nLANGUAGE: logtalk\nCODE:\n```\nb::move(5, 1).\n```\n\n----------------------------------------\n\nTITLE: Using Double Curly Brackets to Bypass Logtalk Compiler in Grammar Rules\nDESCRIPTION: Demonstrates how to use double curly brackets {{}} to bypass the Logtalk compiler when calling external predicates from grammar rules.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/userman/predicates.rst.txt#2025-04-06_snippet_41\n\nLANGUAGE: logtalk\nCODE:\n```\nbar :-\n    write('bar predicate called'), nl.\n\n\n:- object(bypass).\n\n    :- public(foo//0).\n\n    foo --> {{bar}}.\n\n:- end_object.\n```\n\n----------------------------------------\n\nTITLE: Sending String Message to Decorator Object\nDESCRIPTION: This snippet sends the 'string/0' message to a colored shape decorator object, demonstrating how the decorator adds functionality to the base object.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/design_patterns/structural/decorator/NOTES.md#2025-04-06_snippet_2\n\nLANGUAGE: logtalk\nCODE:\n```\ncolored_shape(circle, red)::string.\n```\n\n----------------------------------------\n\nTITLE: Defining the add_directive_before_entity_ predicate in Logtalk\nDESCRIPTION: Table of directives to be added before the entity opening directive. This dynamic predicate stores directives that should be inserted before an entity is defined.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/wrapper_0.rst.txt#2025-04-06_snippet_23\n\nLANGUAGE: logtalk\nCODE:\n```\nadd_directive_before_entity_(Object,Directive)\n```\n\n----------------------------------------\n\nTITLE: Printing Logtalk, Prolog, and Kernel Versions in Logtalk\nDESCRIPTION: This code snippet prints the versions of Logtalk, the Prolog backend, and the kernel when run in a Jupyter notebook environment.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/xpce/NOTES.md#2025-04-06_snippet_0\n\nLANGUAGE: logtalk\nCODE:\n```\n%versions\n```\n\n----------------------------------------\n\nTITLE: Initializing Assignable Variable with Value\nDESCRIPTION: Makes a variable assignable and sets its initial state to a specified non-variable value. Throws errors if first argument is not a variable or second is not instantiated.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/assignvarsp_0.rst.txt#2025-04-06_snippet_1\n\nLANGUAGE: logtalk\nCODE:\n```\nassignable(Variable,Value)\n```\n\n----------------------------------------\n\nTITLE: RST Documentation Structure for DCG Methods\nDESCRIPTION: ReStructuredText documentation outline defining the structure for DCG methods documentation, including toctree entries for various DCG-related predicates and methods.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/refman/methods/dcg_methods.rst#2025-04-06_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. _dcg_methods:\n\nDefinite clause grammar rules\n=============================\n\n.. toctree::\n   :maxdepth: 1\n\n   call_1\n   catch_3\n   eos_0\n   phrase_1\n   phrase_2\n   phrase_3\n```\n\n----------------------------------------\n\nTITLE: Loading Encodings Example\nDESCRIPTION: Loads the encodings example files into the Logtalk environment\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/encodings/NOTES.md#2025-04-06_snippet_1\n\nLANGUAGE: logtalk\nCODE:\n```\nlogtalk_load(encodings(loader)).\n```\n\n----------------------------------------\n\nTITLE: Reading CSV File into Dynamic Predicate in Logtalk\nDESCRIPTION: Demonstrates how to read a CSV file and assert its contents as facts of a dynamic predicate.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/library/csv/NOTES.md#2025-04-06_snippet_4\n\nLANGUAGE: Logtalk\nCODE:\n```\n| ?- assertz(p(_,_,_)), retractall(p(_,_,_)).\nyes\n\n| ?- csv(keep, comma, true)::read_file('test_files/crlf_ending.csv', user, p/3).\nyes\n\n| ?-  p(A,B,C).\n\nA = aaa\nB = bbb\nC = ccc ? ;\n\nA = zzz\nB = yyy\nC = xxx\n```\n\n----------------------------------------\n\nTITLE: Accessing inherited predicate in an instance\nDESCRIPTION: Shows an instance accessing an inherited predicate.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/roles/NOTES.md#2025-04-06_snippet_8\n\nLANGUAGE: logtalk\nCODE:\n```\ninstance::foo(Foo).\n```\n\n----------------------------------------\n\nTITLE: Loading the Parametric Example\nDESCRIPTION: Loads the parametric example module using the Logtalk loader.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/parametric/NOTES.md#2025-04-06_snippet_1\n\nLANGUAGE: logtalk\nCODE:\n```\nlogtalk_load(parametric(loader)).\n```\n\n----------------------------------------\n\nTITLE: Loading Source File with Meta-Compiler and Optimization in Logtalk\nDESCRIPTION: Demonstrates loading a source file with the meta_compiler hook and optimization enabled using compiler options.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/library/meta_compiler/NOTES.md#2025-04-06_snippet_3\n\nLANGUAGE: Prolog\nCODE:\n```\n| ?- logtalk_load(my_source_file, [hook(meta_compiler), optimize(on)]).\n```\n\n----------------------------------------\n\nTITLE: Enumerating Public and Protected Operators in Logtalk\nDESCRIPTION: Example of how to use current_op/3 to enumerate public and protected operators visible in the 'self' context by backtracking.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/refman/methods/current_op_3.rst.txt#2025-04-06_snippet_3\n\nLANGUAGE: Logtalk\nCODE:\n```\n::current_op(Priority, Specifier, Operator)\n```\n\n----------------------------------------\n\nTITLE: Example Usage of info/2 Directive\nDESCRIPTION: Demonstrates practical examples of using the info/2 directive to document a predicate empty/1 and a grammar rule sentence//0 with comments and argument names.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/refman/directives/info_2.rst.txt#2025-04-06_snippet_2\n\nLANGUAGE: logtalk\nCODE:\n```\n:- info(empty/1, [\n    comment is 'True if the argument is an empty list.',\n    argnames is ['List']\n]).\n\n:- info(sentence//0, [\n    comment is 'Rewrites a sentence into a noun phrase and a verb phrase.'\n]).\n```\n\n----------------------------------------\n\nTITLE: Defining a Logtalk Object for Hot Patching\nDESCRIPTION: Shows how to define a Logtalk object that allows complementing (hot patching) by setting the appropriate flag.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/userman/categories.rst#2025-04-06_snippet_6\n\nLANGUAGE: Logtalk\nCODE:\n```\n:- object(bird).\n\n    :- set_logtalk_flag(complements, allow).\n\n    :- public(make_sound/0).\n    make_sound :-\n        write('Chirp, chirp!'), nl.\n\n:- end_object.\n```\n\n----------------------------------------\n\nTITLE: Querying Greek Mythology\nDESCRIPTION: Retrieves Greek mythology divinity names in both English and Greek from the mythology object with error handling\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/encodings/NOTES.md#2025-04-06_snippet_5\n\nLANGUAGE: logtalk\nCODE:\n```\ncatch(mythology::divinity(English, Greek), Error, true).\n```\n\n----------------------------------------\n\nTITLE: Querying Derived Prototype Properties in Logtalk (Number of Legs)\nDESCRIPTION: Demonstrates how the fred prototype, which is derived from clyde, inherits the number of legs property.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/elephants/NOTES.md#2025-04-06_snippet_4\n\nLANGUAGE: logtalk\nCODE:\n```\nfred::number_of_legs(N).\n```\n\n----------------------------------------\n\nTITLE: Library Path Initialization Example\nDESCRIPTION: Shows how to define a library alias based on the source directory using logtalk_load_context in an initialization directive.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/refman/predicates/logtalk_load_context_2.rst#2025-04-06_snippet_4\n\nLANGUAGE: logtalk\nCODE:\n```\n:- initialization((\n    logtalk_load_context(directory, Directory),\n    assertz(logtalk_library_path(my_app, Directory))\n)).\n```\n\n----------------------------------------\n\nTITLE: Benchmarking Interpreters in Verdi Neruda\nDESCRIPTION: Examples of using the benchmark/3 command to compare the number of logical inferences performed by different interpreters when executing the same Prolog query.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/contributions/verdi_neruda.rst#2025-04-06_snippet_6\n\nLANGUAGE: Prolog\nCODE:\n```\nbenchmark(dfs_interpreter, append([a,b,c,d],[e,f], Xs), demodb).  ->\ndfs_interpreter inferences: 5\n```\n\nLANGUAGE: Prolog\nCODE:\n```\nbenchmark(iddfs_interpreter(1), append([a,b,c,d],[e,f], Xs), demodb).\n-> iddfs_interpreter(1) inferences: 15\n```\n\n----------------------------------------\n\nTITLE: Multiple Inheritance Object Definition\nDESCRIPTION: Example demonstrating multiple inheritance in Logtalk where an object extends multiple parent objects. The lookup procedure traverses the parent objects from left to right.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/userman/inheritance.rst#2025-04-06_snippet_7\n\nLANGUAGE: logtalk\nCODE:\n```\n:- object(foo,\n    extends((bar, baz))).\n```\n\n----------------------------------------\n\nTITLE: Defining write_to_stream_hook Object in Logtalk\nDESCRIPTION: Declaration of the write_to_stream_hook object with two parameters: Stream and Options. This object writes term-expansion results to a stream using write_term/3 options.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/write_to_stream_hook_2.rst.txt#2025-04-06_snippet_0\n\nLANGUAGE: Logtalk\nCODE:\n```\nwrite_to_stream_hook(Stream,Options)\n```\n\n----------------------------------------\n\nTITLE: Cloning Dictionary with Original and Clone Pairs in Logtalk\nDESCRIPTION: Clones a dictionary with unbound values, returning lists of pairs for both the original and the clone.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/dictionaryp_0.rst.txt#2025-04-06_snippet_4\n\nLANGUAGE: Logtalk\nCODE:\n```\nclone(Dictionary,Pairs,Clone,ClonePairs)\n```\n\n----------------------------------------\n\nTITLE: Documenting Predicate Exceptions in Logtalk\nDESCRIPTION: Example of using the info/1 directive to document a predicate's exceptions. It includes the predicate name, comment, argument names, and possible exceptions with their error types.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/userman/documenting.rst.txt#2025-04-06_snippet_4\n\nLANGUAGE: logtalk\nCODE:\n```\n:- info(check_option/1, [\n    comment is 'Succeeds if the option is valid. Throws an error otherwise.',\n    argnames is ['Option'],\n    exceptions is [\n        '``Option`` is a variable' - instantiation_error,\n        '``Option`` is neither a variable nor a compound term' - type_error(compound, 'Option'),\n        '``Option`` is a compound term but not a valid option' - domain_error(option, 'Option')\n    ]\n]).\n```\n\n----------------------------------------\n\nTITLE: Basic Lambda Query in Logtalk\nDESCRIPTION: Demonstrates a simple lambda expression using the call/N built-in method to calculate the square of a number.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/lambdas/NOTES.md#2025-04-06_snippet_2\n\nLANGUAGE: logtalk\nCODE:\n```\nlogtalk << call([X,Y]>>(Y is X*X), 5, R).\n```\n\n----------------------------------------\n\nTITLE: Running Logtalk Grammars Tests\nDESCRIPTION: Command to load and run the minimal tests for the grammars library predicates\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/libraries/grammars.rst.txt#2025-04-06_snippet_1\n\nLANGUAGE: logtalk\nCODE:\n```\n| ?- logtalk_load(grammars(tester)).\n```\n\n----------------------------------------\n\nTITLE: Accessing another inherited predicate in an instance\nDESCRIPTION: Another example of an instance accessing an inherited predicate.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/roles/NOTES.md#2025-04-06_snippet_9\n\nLANGUAGE: logtalk\nCODE:\n```\ninstance::bar(X, Y).\n```\n\n----------------------------------------\n\nTITLE: Setting Expand Library Alias Paths as Default Hook Object\nDESCRIPTION: Demonstrates how to set expand_library_alias_paths as the default hook object using the set_logtalk_flag/2 predicate.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/libraries/expand_library_alias_paths.rst.txt#2025-04-06_snippet_2\n\nLANGUAGE: prolog\nCODE:\n```\n| ?- set_logtalk_flag(hook, expand_library_alias_paths).\n```\n\n----------------------------------------\n\nTITLE: Declaring Predicates in EDCG\nDESCRIPTION: Demonstrates how to declare predicates with hidden parameters in EDCG for Logtalk using pred_info/3.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/libraries/edcg.rst#2025-04-06_snippet_2\n\nLANGUAGE: logtalk\nCODE:\n```\npred_info(Name, Arity, List).\n```\n\n----------------------------------------\n\nTITLE: Handling undefined predicate in class object\nDESCRIPTION: Shows error handling when querying an undefined predicate p1/1 in the class object.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/dynpred/NOTES.md#2025-04-06_snippet_5\n\nLANGUAGE: logtalk\nCODE:\n```\ncatch(class::p1(X), Error, true).\n```\n\n----------------------------------------\n\nTITLE: Displaying Logtalk, Prolog Backend, and Kernel Versions\nDESCRIPTION: Command to print the versions of Logtalk, the underlying Prolog backend, and the kernel when running in a Jupyter notebook environment.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/design_patterns/logic/threading_state/NOTES.md#2025-04-06_snippet_0\n\nLANGUAGE: logtalk\nCODE:\n```\n%versions\n```\n\n----------------------------------------\n\nTITLE: Grouping Consecutive Pairs\nDESCRIPTION: The group_consecutive_by_key/2 predicate groups consecutive pairs with the same key, maintaining value order.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/pairs_0.rst.txt#2025-04-06_snippet_7\n\nLANGUAGE: logtalk\nCODE:\n```\ngroup_consecutive_by_key(Pairs,Groups)\n```\n\n----------------------------------------\n\nTITLE: Checking Empty Stage\nDESCRIPTION: Verifies that the stage is empty after hiding the performers.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/now_you_see_me/NOTES.md#2025-04-06_snippet_4\n\nLANGUAGE: logtalk\nCODE:\n```\nstage::list.\n```\n\n----------------------------------------\n\nTITLE: Processing Purchase Request with President in Chain of Responsibility\nDESCRIPTION: Demonstrates a purchase request of 27000 units that will be approved by the President in the chain.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/design_patterns/behavioral/chain_of_responsibility/NOTES.md#2025-04-06_snippet_5\n\nLANGUAGE: logtalk\nCODE:\n```\nmanager::process_request(27000).\n```\n\n----------------------------------------\n\nTITLE: Creating Expected Terms Example\nDESCRIPTION: Example showing how to create an expected term using the expected object constructor.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/library/expecteds/NOTES.md#2025-04-06_snippet_2\n\nLANGUAGE: logtalk\nCODE:\n```\n| ?- expected::of_expected(1, Expected).\n```\n\n----------------------------------------\n\nTITLE: Loading Neo4j Example in Logtalk\nDESCRIPTION: Logtalk command to load the Neo4j example module.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/neo4j/NOTES.md#2025-04-06_snippet_2\n\nLANGUAGE: logtalk\nCODE:\n```\nlogtalk_load(neo4j(loader)).\n```\n\n----------------------------------------\n\nTITLE: Loading Nested Dictionaries Library in Logtalk\nDESCRIPTION: Command to load all entities in the nested dictionaries library using the loader file.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/library/nested_dictionaries/NOTES.md#2025-04-06_snippet_0\n\nLANGUAGE: logtalk\nCODE:\n```\n| ?- logtalk_load(nested_dictionaries(loader)).\n```\n\n----------------------------------------\n\nTITLE: Loading Apache POI Example in Logtalk\nDESCRIPTION: Logtalk code to load the Apache POI example.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/apache_poi/NOTES.md#2025-04-06_snippet_2\n\nLANGUAGE: logtalk\nCODE:\n```\nlogtalk_load(apache_poi(loader)).\n```\n\n----------------------------------------\n\nTITLE: Converting Characters to Codes with maplist/3 in Logtalk\nDESCRIPTION: Uses the Prolog backend's maplist/3 predicate to convert a list of characters into their corresponding ASCII codes within a Logtalk object.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/symbiosis/NOTES.md#2025-04-06_snippet_2\n\nLANGUAGE: logtalk\nCODE:\n```\nsymbiosis::q(L).\n```\n\n----------------------------------------\n\nTITLE: Using Hook Option for Source File Compilation\nDESCRIPTION: Example of using the expand_library_alias_paths hook when compiling a source file in Logtalk.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/library/expand_library_alias_paths/NOTES.md#2025-04-06_snippet_1\n\nLANGUAGE: logtalk\nCODE:\n```\n| ?- logtalk_load(my_source_file, [hook(expand_library_alias_paths)]).\n```\n\n----------------------------------------\n\nTITLE: Calculating least common multiple in Logtalk\nDESCRIPTION: New library predicate to calculate the least common multiple of a list of numbers in Logtalk.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/RELEASE_NOTES.md#2025-04-06_snippet_3\n\nLANGUAGE: Logtalk\nCODE:\n```\nnumberlist::least_common_multiple(List, LCM).\n```\n\n----------------------------------------\n\nTITLE: Template and modes for the else/0 directive\nDESCRIPTION: Formal specification of the else/0 directive template, showing it takes no arguments.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/refman/directives/else_0.rst.txt#2025-04-06_snippet_1\n\nLANGUAGE: Logtalk\nCODE:\n```\nelse\n```\n\n----------------------------------------\n\nTITLE: Testing the Loops Library in Logtalk\nDESCRIPTION: Command to load and run the tests for the 'loops' library predicates. This loads the tester.lgt file which contains test cases for the library functionality.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/libraries/loops.rst.txt#2025-04-06_snippet_1\n\nLANGUAGE: logtalk\nCODE:\n```\n| ?- logtalk_load(loops(tester)).\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Usage of imports_category/2-3 in Prolog\nDESCRIPTION: Provides example queries using the imports_category/2-3 predicate. The first example checks if a specific object imports a category, while the second enumerates objects that privately import a category.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/refman/predicates/imports_category_2_3.rst#2025-04-06_snippet_2\n\nLANGUAGE: Prolog\nCODE:\n```\n% check that the xref_diagram object imports the diagram category:\n| ?- imports_category(xref_diagram, diagram).\n\n% enumerate the objects that privately import the diagram category:\n| ?- imports_category(Object, diagram, private).\n```\n\n----------------------------------------\n\nTITLE: Declaring Passed Arguments in EDCG\nDESCRIPTION: Illustrates the short and long forms of declaring passed arguments in EDCG for Logtalk using pass_info/1 and pass_info/2.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/libraries/edcg.rst#2025-04-06_snippet_4\n\nLANGUAGE: logtalk\nCODE:\n```\npass_info(Pass).\n```\n\nLANGUAGE: logtalk\nCODE:\n```\npass_info(Pass, PStart).\n```\n\n----------------------------------------\n\nTITLE: Verifying Age Update via Viewpoint\nDESCRIPTION: Shows how to verify the age update through a different viewpoint (joe_chess_player).\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/viewpoints/NOTES.md#2025-04-06_snippet_4\n\nLANGUAGE: logtalk\nCODE:\n```\njoe_chess_player::age(Age).\n```\n\n----------------------------------------\n\nTITLE: Printing extras with declared weight\nDESCRIPTION: This snippet prints a list of extras with declared weight using the data_processing object.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/books/NOTES.md#2025-04-06_snippet_4\n\nLANGUAGE: logtalk\nCODE:\n```\ndata_processing::print_heavy_extras.\n```\n\n----------------------------------------\n\nTITLE: Defining Term Validation Predicate in Logtalk\nDESCRIPTION: Predicate template and mode declaration for validating if a term is a closed list of numbers. Uses the static compilation flag and accepts a non-variable term as input.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/statisticsp_0.rst.txt#2025-04-06_snippet_1\n\nLANGUAGE: logtalk\nCODE:\n```\nvalid(@nonvar)\n```\n\n----------------------------------------\n\nTITLE: Library Path Generation Predicate\nDESCRIPTION: Added predicate make_library_path/1 to the os library for path manipulation.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/RELEASE_NOTES.md#2025-04-06_snippet_77\n\nLANGUAGE: Logtalk\nCODE:\n```\nmake_library_path/1\n```\n\n----------------------------------------\n\nTITLE: Using Object Wrapper Hook to Load Plain Prolog Code\nDESCRIPTION: Command to load plain Prolog code using the object_wrapper_hook with source data enabled. This is an alternative to manually defining a wrapper object for applying metrics to Prolog code.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/tools/code_metrics/NOTES.md#2025-04-06_snippet_6\n\nLANGUAGE: Prolog\nCODE:\n```\n| ?- logtalk_load(code, [hook(object_wrapper_hook), source_data(on)]).\n```\n\n----------------------------------------\n\nTITLE: Defining Dynamic Predicate for Predicate Spy Points in Logtalk\nDESCRIPTION: Defines a dynamic predicate 'spying_predicate_/3' that represents a table of predicate spy points. It takes functor, arity, and original predicate indicator as arguments.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/debugger_0.rst.txt#2025-04-06_snippet_7\n\nLANGUAGE: Logtalk\nCODE:\n```\nspying_predicate_/3\n```\n\n----------------------------------------\n\nTITLE: Defining ignore/1 Method Signature in Logtalk\nDESCRIPTION: Specifies the signature of the ignore/1 built-in method in Logtalk. This method takes a single argument 'Goal' and succeeds regardless of whether the goal succeeds or fails.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/refman/methods/ignore_1.rst.txt#2025-04-06_snippet_0\n\nLANGUAGE: Logtalk\nCODE:\n```\nignore(Goal)\n```\n\n----------------------------------------\n\nTITLE: Loading a Logtalk Object\nDESCRIPTION: Example of loading a Logtalk object using the logtalk_load/1 predicate. This demonstrates how to compile and load a Logtalk object into the system.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/tutorial/lists.rst.txt#2025-04-06_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n| ?- logtalk_load(list).\n\nobject list loaded\nyes\n```\n\n----------------------------------------\n\nTITLE: Constraint Examples with Lambda in Logtalk\nDESCRIPTION: Demonstrates the use of lambda expressions with constraints using different Prolog backend compilers.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/lambdas/NOTES.md#2025-04-06_snippet_6\n\nLANGUAGE: logtalk\nCODE:\n```\nXss = [[1,2],[3]], meta::map(meta::map([X,Y,Z]>>(X+Y#=Z)), Xss, Yss, Zss).\n```\n\nLANGUAGE: logtalk\nCODE:\n```\nXs = [A,B], meta::map({Y}/[X,Z]>>(clpfd:(X+Y #= Z)), Xs, Zs).\n```\n\n----------------------------------------\n\nTITLE: Predicate Modes - logtalk_compile/2\nDESCRIPTION: Defines the predicate modes and number of proofs, showing input argument types and expected outcomes.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/refman/predicates/logtalk_compile_2.rst.txt#2025-04-06_snippet_1\n\nLANGUAGE: prolog\nCODE:\n```\nlogtalk_compile(@source_file_name, @list(compiler_flag)) - zero_or_one\nlogtalk_compile(@list(source_file_name), @list(compiler_flag)) - zero_or_one\n```\n\n----------------------------------------\n\nTITLE: Loading Versions Check in Logtalk\nDESCRIPTION: Prints version information for Logtalk, Prolog backend, and kernel versions when running as a notebook.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/my_types/NOTES.md#2025-04-06_snippet_0\n\nLANGUAGE: logtalk\nCODE:\n```\n%versions\n```\n\n----------------------------------------\n\nTITLE: Loading Logtalk Versions\nDESCRIPTION: Prints the versions of Logtalk, Prolog backend, and kernel\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/scopes/NOTES.md#2025-04-06_snippet_0\n\nLANGUAGE: logtalk\nCODE:\n```\n%versions\n```\n\n----------------------------------------\n\nTITLE: Template and Modes for if/1 Directive in Logtalk\nDESCRIPTION: Defines the template and modes for the if/1 directive, specifying that it takes a callable term as input.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/refman/directives/if_1.rst.txt#2025-04-06_snippet_1\n\nLANGUAGE: logtalk\nCODE:\n```\nif(@callable)\n```\n\n----------------------------------------\n\nTITLE: Defining Next Number Relationships in Prolog/Logtalk\nDESCRIPTION: Establishes sequential relationships between consecutive numbers from 0 to 5 using the next/2 predicate. Each fact defines that one number follows another in sequence.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/operators/next.txt#2025-04-06_snippet_0\n\nLANGUAGE: prolog\nCODE:\n```\n0 next 1.\n1 next 2.\n2 next 3.\n3 next 4.\n4 next 5.\n```\n\n----------------------------------------\n\nTITLE: Enabling Specific Debug Message Groups in Logtalk\nDESCRIPTION: Predicate for enabling debug(Group) messages for a specific component and group combination. This predicate has static compilation flag and accepts component and group terms as input.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/debug_messages_0.rst.txt#2025-04-06_snippet_3\n\nLANGUAGE: logtalk\nCODE:\n```\nenable/2\n```\n\n----------------------------------------\n\nTITLE: Question Prompt Stream Method Mode Declaration\nDESCRIPTION: Specifies the mode declaration for the method showing argument types and number of possible solutions.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/refman/methods/question_prompt_stream_4.rst#2025-04-06_snippet_1\n\nLANGUAGE: logtalk\nCODE:\n```\nquestion_prompt_stream(?nonvar, ?nonvar, ?atom, ?stream_or_alias) - zero_or_more\n```\n\n----------------------------------------\n\nTITLE: Dead Predicate Detection in Logtalk\nDESCRIPTION: Method that returns an ordered set of local predicates and non-terminals that are not used by scoped predicates for a loaded entity.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/dead_code_scanner_0.rst.txt#2025-04-06_snippet_4\n\nLANGUAGE: logtalk\nCODE:\n```\npredicates(Entity,Predicates)\n```\n\n----------------------------------------\n\nTITLE: Representing an Event in Logtalk\nDESCRIPTION: Defines the structure of an event in Logtalk as an ordered tuple containing the event type, object, message, and sender.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/userman/events.rst.txt#2025-04-06_snippet_0\n\nLANGUAGE: Logtalk\nCODE:\n```\n(Event, Object, Message, Sender)\n```\n\n----------------------------------------\n\nTITLE: Loading Missing Data Example\nDESCRIPTION: Loads the missing data example module using the loader file.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/missing_data/NOTES.md#2025-04-06_snippet_1\n\nLANGUAGE: logtalk\nCODE:\n```\nlogtalk_load(missing_data(loader)).\n```\n\n----------------------------------------\n\nTITLE: Finding Complementing Categories\nDESCRIPTION: Queries for categories that complement objects in the loaded system.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/complements/allow/NOTES.md#2025-04-06_snippet_7\n\nLANGUAGE: logtalk\nCODE:\n```\n%%table\ncomplements_object(Category, Object).\n```\n\n----------------------------------------\n\nTITLE: Using a Subsumed Goal with Threaded Exit in Logtalk\nDESCRIPTION: Shows how to use threaded_exit/1 with a subsumed goal (more specific than the original goal) to retrieve only matching solutions.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/threads/nondet/NOTES.md#2025-04-06_snippet_13\n\nLANGUAGE: logtalk\nCODE:\n```\nthreaded_exit(lists::member(2, [1,2,3,2])).\n```\n\n----------------------------------------\n\nTITLE: Extracting Timestamp from ULID\nDESCRIPTION: Shows how to extract the Unix epoch timestamp from a ULID.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/libraries/ulid.rst#2025-04-06_snippet_7\n\nLANGUAGE: logtalk\nCODE:\n```\n| ?- ulid(atom)::timestamp('01H0JDBQ1GAWJF35C44Y5S97DX', Milliseconds).\nMilliseconds = 1684245175344\nyes\n```\n\n----------------------------------------\n\nTITLE: End Protocol Usage Example\nDESCRIPTION: Demonstrates how to use the end_protocol directive in practice with proper Logtalk syntax.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/refman/directives/end_protocol_0.rst#2025-04-06_snippet_1\n\nLANGUAGE: logtalk\nCODE:\n```\n:- end_protocol.\n```\n\n----------------------------------------\n\nTITLE: Running Multiple Test Sets in Logtalk\nDESCRIPTION: Runs two or more test sets as a unified set, generating a single code coverage report if requested. It's equivalent to run/0 for a single test set.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/lgtunit_0.rst.txt#2025-04-06_snippet_4\n\nLANGUAGE: Logtalk\nCODE:\n```\nrun_test_sets(TestObjects)\n```\n\n----------------------------------------\n\nTITLE: Testing Circle Radius Alias\nDESCRIPTION: Demonstrates the use of the r/1 alias for a circle object. This alias is likely mapped to the radius of the circle.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/aliases/NOTES.md#2025-04-06_snippet_6\n\nLANGUAGE: logtalk\nCODE:\n```\ncircle(3)::r(Radius).\n```\n\n----------------------------------------\n\nTITLE: Implementing Abstract Class in Logtalk\nDESCRIPTION: Defines the abstract_class that specializes object and adds predicates common to all classes. It serves as the default meta-class for abstract classes.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/tutorial/reflection.rst#2025-04-06_snippet_1\n\nLANGUAGE: logtalk\nCODE:\n```\n:- object(abstract_class,\n    instantiates(class),\n    specializes(object)).\n\n    % predicates common to all classes\n\n:- end_object.\n```\n\n----------------------------------------\n\nTITLE: Running Tests from Specific File in Logtalk\nDESCRIPTION: Executes all the tests defined in a specified file.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/lgtunit_0.rst.txt#2025-04-06_snippet_27\n\nLANGUAGE: logtalk\nCODE:\n```\nrun_tests(File)\n```\n\n----------------------------------------\n\nTITLE: Get Local Message - Parent\nDESCRIPTION: Demonstrates calling the local/1 predicate on the parent object using self message.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/self_messages/NOTES.md#2025-04-06_snippet_2\n\nLANGUAGE: logtalk\nCODE:\n```\nparent::get_local(Local).\n```\n\n----------------------------------------\n\nTITLE: Printing Logtalk, Prolog Backend, and Kernel Versions\nDESCRIPTION: This snippet prints the versions of Logtalk, the Prolog backend, and the kernel being used in the notebook environment.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/process_modeling/NOTES.md#2025-04-06_snippet_0\n\nLANGUAGE: logtalk\nCODE:\n```\n%versions\n```\n\n----------------------------------------\n\nTITLE: Defining Modes and Proofs for phrase//1 in Prolog\nDESCRIPTION: Specifies the mode and number of proofs for the phrase//1 method. It takes a callable term as input and can produce zero or more solutions.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/refman/methods/phrase_1.rst#2025-04-06_snippet_2\n\nLANGUAGE: Prolog\nCODE:\n```\nphrase(+callable) - zero_or_more\n```\n\n----------------------------------------\n\nTITLE: Loading Adventure Games in Logtalk\nDESCRIPTION: Loads the adventure game modules using the Logtalk loader.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/adventure/NOTES.md#2025-04-06_snippet_1\n\nLANGUAGE: logtalk\nCODE:\n```\nlogtalk_load(adventure(loader)).\n```\n\n----------------------------------------\n\nTITLE: Protected Predicate for Flattening Goal Conjunctions in Logtalk\nDESCRIPTION: The flatten_goals//1 predicate is a DCG-based predicate that flattens a conjunction of goals into a list. It accepts a callable term representing a conjunction and produces one proof. It is marked with the 'static' compilation flag.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/flatting_0.rst.txt#2025-04-06_snippet_0\n\nLANGUAGE: Logtalk\nCODE:\n```\nflatten_goals//1\n```\n\n----------------------------------------\n\nTITLE: Defining Public Predicate cat/2 in Logtalk\nDESCRIPTION: Defines the public predicate 'cat/2' which returns the values stored in non-empty optional terms. It takes a list of optional terms and returns a list of their values.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/maybe_0.rst.txt#2025-04-06_snippet_0\n\nLANGUAGE: Logtalk\nCODE:\n```\ncat(Optionals,Values)\n```\n\n----------------------------------------\n\nTITLE: Loading Debug Messages Library in Logtalk\nDESCRIPTION: Query to load the debug_messages library tool into a Logtalk session.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/devtools/debug_messages.rst.txt#2025-04-06_snippet_0\n\nLANGUAGE: prolog\nCODE:\n```\n| ?- logtalk_load(debug_messages(loader)).\n```\n\n----------------------------------------\n\nTITLE: Loading the Self vs Super Example\nDESCRIPTION: Loads the self_vs_super example using the Logtalk loader.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/self_vs_super/NOTES.md#2025-04-06_snippet_1\n\nLANGUAGE: logtalk\nCODE:\n```\nlogtalk_load(self_vs_super(loader)).\n```\n\n----------------------------------------\n\nTITLE: Reading Text Streams to Character Codes with Custom Tail in Logtalk\nDESCRIPTION: Reads a text stream into a list of character codes with a custom tail terminator. Takes a stream or alias as input and returns the stream contents as a list of character codes terminated by the given tail.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/reader_0.rst.txt#2025-04-06_snippet_9\n\nLANGUAGE: Logtalk\nCODE:\n```\nstream_to_codes(Stream,Codes,Tail)\n```\n\n----------------------------------------\n\nTITLE: Load Benchmark Example\nDESCRIPTION: Loads the benchmark example files into the environment.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/bench/NOTES.md#2025-04-06_snippet_1\n\nLANGUAGE: logtalk\nCODE:\n```\nlogtalk_load(bench(loader)).\n```\n\n----------------------------------------\n\nTITLE: Working with Test Data Files in Logtalk\nDESCRIPTION: Example of using the file_path/2 predicate to expand relative paths to test data files into absolute paths, allowing tests to run independently of the current directory.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/devtools/lgtunit.rst#2025-04-06_snippet_47\n\nLANGUAGE: logtalk\nCODE:\n```\n% check that the encoding/1 option is accepted\ntest(lgt_unicode_open_4_01, true) :-\n       ^^file_path(sample_utf_8, Path),\n       open(Path, write, Stream, [encoding('UTF-8')]),\n       close(Stream).\n```\n\n----------------------------------------\n\nTITLE: Implementing Protocol in Logtalk Category\nDESCRIPTION: Shows how to implement a protocol in a category using the implements directive.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/tutorial/attributes.rst#2025-04-06_snippet_1\n\nLANGUAGE: logtalk\nCODE:\n```\n:- category(attributes,\n    implements(attributes_protocol)).\n\n    ...\n\n:- end_category.\n```\n\n----------------------------------------\n\nTITLE: Defining Dynamic Predicate for Directory Sub-Diagrams in Logtalk\nDESCRIPTION: Defines a dynamic predicate sub_diagram_/2 to support the generation of directory sub-diagrams. It takes a Project and Directory as arguments and can be called with atom inputs or outputs.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/directory_load_diagram_1.rst.txt#2025-04-06_snippet_0\n\nLANGUAGE: logtalk\nCODE:\n```\nsub_diagram_/2\n```\n\nLANGUAGE: logtalk\nCODE:\n```\nsub_diagram_(Project,Directory)\n```\n\nLANGUAGE: logtalk\nCODE:\n```\nsub_diagram_(?atom,?atom)\n```\n\n----------------------------------------\n\nTITLE: Loading the Expand Library Alias Paths Library in Logtalk\nDESCRIPTION: Demonstrates how to load all entities in the expand_library_alias_paths library using the loader utility file.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/libraries/expand_library_alias_paths.rst.txt#2025-04-06_snippet_0\n\nLANGUAGE: prolog\nCODE:\n```\n| ?- logtalk_load(expand_library_alias_paths(loader)).\n```\n\n----------------------------------------\n\nTITLE: Loading Bridge Pattern Implementation\nDESCRIPTION: Loads the Bridge design pattern sample implementation from the design patterns directory.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/design_patterns/structural/bridge/NOTES.md#2025-04-06_snippet_0\n\nLANGUAGE: logtalk\nCODE:\n```\nlogtalk_load(design_patterns('structural/bridge/loader')).\n```\n\n----------------------------------------\n\nTITLE: Mocking Using Term-Expansion in Logtalk\nDESCRIPTION: Implementation of a hook object that uses term-expansion to mock a login predicate by replacing its implementation with a simple fact. This approach modifies the code at compile-time without changing the original source.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/devtools/lgtunit.rst#2025-04-06_snippet_50\n\nLANGUAGE: logtalk\nCODE:\n```\n:- object(mock_login,\n    implements(expanding)).\n\n    term_expansion((login(_, _) :- _), login(jdoe, test123)).\n\n:- end_object.\n```\n\n----------------------------------------\n\nTITLE: Sending Second Batch to Split Queue\nDESCRIPTION: Sends the second batch of messages to the split queue implementation.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/engines/pmq/NOTES.md#2025-04-06_snippet_10\n\nLANGUAGE: logtalk\nCODE:\n```\nsplit::(send(8-fun), send(11-have), send(3-':-)')).\n```\n\n----------------------------------------\n\nTITLE: Defining a Category That Implements Protocols in Logtalk\nDESCRIPTION: Demonstrates how to define a category that implements one or more protocols, allowing the category to provide implementations for protocol predicates.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/userman/categories.rst.txt#2025-04-06_snippet_1\n\nLANGUAGE: logtalk\nCODE:\n```\n:- category(Category,\n    implements([Protocol1, Protocol2, ...])).\n    ...\n:- end_category.\n```\n\n----------------------------------------\n\nTITLE: Defining Term Expansion in Logtalk\nDESCRIPTION: Defines a term expansion predicate that is called until it succeeds on all terms read while compiling a source file. It excludes terms skipped by conditional compilation directives or wrapped using the {}/1 compiler bypass control construct.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/expanding_0.rst.txt#2025-04-06_snippet_1\n\nLANGUAGE: Prolog\nCODE:\n```\nterm_expansion(Term, ExpandedTerms)\n```\n\n----------------------------------------\n\nTITLE: Example Usage of object_property/2\nDESCRIPTION: Demonstrates querying properties of the built-in logtalk object through backtracking.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/refman/predicates/object_property_2.rst.txt#2025-04-06_snippet_2\n\nLANGUAGE: prolog\nCODE:\n```\n% enumerate the properties of the logtalk built-in object:\n| ?- object_property(logtalk, Property).\n\nProperty = context_switching_calls ;\nProperty = source_data ;\nProperty = threaded ;\nProperty = static ;\nProperty = built_in ;\n...\n```\n\n----------------------------------------\n\nTITLE: XHTML 1.1 Document Generation in Logtalk\nDESCRIPTION: Example of generating an XHTML 1.1 document with title and paragraph elements to a file.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/library/html/NOTES.md#2025-04-06_snippet_4\n\nLANGUAGE: prolog\nCODE:\n```\n| ?- xhtml11::generate(\n         file('hello.html'),\n         html([lang=en], [head(title('Hello world!')), body(p('Bye!'))])\n     ).\n```\n\n----------------------------------------\n\nTITLE: Querying List Parametric Object in Logtalk\nDESCRIPTION: Demonstrates various queries using the list parametric object, including member, last, and nextto predicates.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/parvars/NOTES.md#2025-04-06_snippet_1\n\nLANGUAGE: logtalk\nCODE:\n```\n%%table\n[1, 2, 3]::member(X).\n```\n\nLANGUAGE: logtalk\nCODE:\n```\n[1, 2, 3]::last(X).\n```\n\nLANGUAGE: logtalk\nCODE:\n```\n[1, 2, 3]::nextto(2, Y).\n```\n\nLANGUAGE: logtalk\nCODE:\n```\n\\+ []::member(X).\n```\n\n----------------------------------------\n\nTITLE: Mode Declaration for consistency_error/3 in Logtalk\nDESCRIPTION: Specifies the mode declaration for the consistency_error/3 method, indicating that the first argument should be an instantiated atom, while the second and third arguments should be non-variable terms.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/refman/methods/consistency_error_3.rst.txt#2025-04-06_snippet_2\n\nLANGUAGE: prolog\nCODE:\n```\nconsistency_error(+atom, @nonvar, @nonvar) - error\n```\n\n----------------------------------------\n\nTITLE: Flag Validator Print Flags Predicate\nDESCRIPTION: Protocol predicate for validating the validator object itself. Operates in zero_or_one mode with static compilation.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/flags_validator_0.rst.txt#2025-04-06_snippet_0\n\nLANGUAGE: logtalk\nCODE:\n```\nprint_flags/0\n```\n\n----------------------------------------\n\nTITLE: Selective Inheritance for Handling Exceptions in Logtalk\nDESCRIPTION: Shows how to implement selective inheritance (differential inheritance) to represent exceptions to inherited behavior, using a flightless bird example.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/userman/inheritance.rst.txt#2025-04-06_snippet_3\n\nLANGUAGE: logtalk\nCODE:\n```\n:- object(bird).\n\n    :- public(mode/1).\n\n    mode(walks).\n    mode(flies).\n\n:- end_object.\n\n\n:- object(penguin,\n    extends(bird)).\n\n    mode(swims).\n    mode(Mode) :-\n        ^^mode(Mode),\n        Mode \\== flies.\n\n:- end_object.\n```\n\n----------------------------------------\n\nTITLE: Lambda Benchmarks in Logtalk\nDESCRIPTION: Runs performance benchmarks comparing lambda expressions with traditional predicate calls.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/lambdas/NOTES.md#2025-04-06_snippet_5\n\nLANGUAGE: logtalk\nCODE:\n```\nlambda_benchmarks::bench1.\n```\n\nLANGUAGE: logtalk\nCODE:\n```\nlambda_benchmarks::bench2.\n```\n\n----------------------------------------\n\nTITLE: Wrapping Prolog Code for Profiling in Logtalk\nDESCRIPTION: Shows how to wrap plain Prolog code in a Logtalk object for profiling purposes.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/tools/ports_profiler/NOTES.md#2025-04-06_snippet_9\n\nLANGUAGE: Logtalk\nCODE:\n```\n:- object(code).\n\n\t:- public(foo/2).\n\t:- include('code.pl').\n\n:- end_object.\n```\n\n----------------------------------------\n\nTITLE: Super Call Pattern\nDESCRIPTION: Common pattern for using super calls in predicate redefinition.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/userman/messages.rst.txt#2025-04-06_snippet_6\n\nLANGUAGE: logtalk\nCODE:\n```\nPredicate :-\n    ...,            % do something\n    ^^Predicate,    % call inherited definition\n    ... .\n```\n\n----------------------------------------\n\nTITLE: PowerShell Prompt Configuration\nDESCRIPTION: PowerShell profile configuration for automatic environment loading.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/devtools/packs.rst#2025-04-06_snippet_10\n\nLANGUAGE: powershell\nCODE:\n```\nfunction prompt {\n    Set-PsEnv\n    'PS ' + $(Get-Location) + '> '\n}\n```\n\n----------------------------------------\n\nTITLE: Stop and Print Message Log\nDESCRIPTION: Stops the message recording and prints the logged messages.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/msglog/NOTES.md#2025-04-06_snippet_5\n\nLANGUAGE: logtalk\nCODE:\n```\nmsglog::(stop, print).\n```\n\n----------------------------------------\n\nTITLE: Displaying Command History\nDESCRIPTION: Shows how to display the history of executed commands.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/design_patterns/behavioral/command/NOTES.md#2025-04-06_snippet_5\n\nLANGUAGE: logtalk\nCODE:\n```\nswitch::history.\n```\n\n----------------------------------------\n\nTITLE: Specifying Modes for print_message_token/4 in Logtalk\nDESCRIPTION: Defines the mode declaration for print_message_token/4, specifying input types and the number of proofs (zero or one).\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/refman/methods/print_message_token_4.rst#2025-04-06_snippet_1\n\nLANGUAGE: Prolog\nCODE:\n```\nprint_message_token(@stream_or_alias, @atom, @nonvar, @list(nonvar)) - zero_or_one\n```\n\n----------------------------------------\n\nTITLE: Loading PMQ Module and Dependencies\nDESCRIPTION: Loads the priority message queue (pmq) module and its required libraries.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/engines/pmq/NOTES.md#2025-04-06_snippet_1\n\nLANGUAGE: logtalk\nCODE:\n```\nlogtalk_load(pmq(loader)).\n```\n\n----------------------------------------\n\nTITLE: Loading Ports Profiler in Logtalk\nDESCRIPTION: Loads the ports profiler tool into the Logtalk environment\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/tools/ports_profiler/SCRIPT.txt#2025-04-06_snippet_0\n\nLANGUAGE: logtalk\nCODE:\n```\n| ?- {ports_profiler(loader)}.\n```\n\n----------------------------------------\n\nTITLE: Declaring Dynamic Predicates and Non-Terminals in Logtalk\nDESCRIPTION: This snippet shows various syntax options for declaring dynamic predicates and non-terminals using the dynamic/1 directive in Logtalk. It includes examples for single predicates, multiple predicates, and qualified predicates with entity or module specifiers.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/refman/directives/dynamic_1.rst#2025-04-06_snippet_0\n\nLANGUAGE: Logtalk\nCODE:\n```\ndynamic(Name/Arity)\ndynamic((Name/Arity, ...))\ndynamic([Name/Arity, ...])\n\ndynamic(Entity::Name/Arity)\ndynamic((Entity::Name/Arity, ...))\ndynamic([Entity::Name/Arity, ...])\n\ndynamic(Module:Name/Arity)\ndynamic((Module:Name/Arity, ...))\ndynamic([Module:Name/Arity, ...])\n\ndynamic(Name//Arity)\ndynamic((Name//Arity, ...))\ndynamic([Name//Arity, ...])\n\ndynamic(Entity::Name//Arity)\ndynamic((Entity::Name//Arity, ...))\ndynamic([Entity::Name//Arity, ...])\n\ndynamic(Module:Name//Arity)\ndynamic((Module:Name//Arity, ...))\ndynamic([Module:Name//Arity, ...])\n```\n\n----------------------------------------\n\nTITLE: Equivalent Implementation of consistency_error/3 in Logtalk\nDESCRIPTION: Demonstrates the equivalent sequence of goals that consistency_error/3 executes, showing how it gets the current context and throws an error with the appropriate format.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/refman/methods/consistency_error_3.rst#2025-04-06_snippet_1\n\nLANGUAGE: logtalk\nCODE:\n```\n...,\ncontext(Context),\nthrow(error(consistency_error(Consistency,Argument1,Argument2), Context)).\n```\n\n----------------------------------------\n\nTITLE: Reversing a List in Logtalk\nDESCRIPTION: Reverses the order of elements in a list.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/listp_0.rst.txt#2025-04-06_snippet_11\n\nLANGUAGE: Logtalk\nCODE:\n```\nreverse(List,Reversed)\n```\n\n----------------------------------------\n\nTITLE: Alias Directive Usage Examples in Logtalk\nDESCRIPTION: Demonstrates practical examples of using the alias directive to resolve predicate name conflicts and define alternative names for non-terminals.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/refman/directives/alias_2.rst.txt#2025-04-06_snippet_2\n\nLANGUAGE: logtalk\nCODE:\n```\n% resolve a predicate name conflict:\n:- alias(list, [member/2 as list_member/2]).\n:- alias(set,  [member/2 as set_member/2]).\n\n% define an alternative name for a non-terminal:\n:- alias(words, [singular//0 as peculiar//0]).\n```\n\n----------------------------------------\n\nTITLE: Querying Parametric Categories in Logtalk\nDESCRIPTION: Demonstrates a query using a parametric category for speech advice.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/parvars/NOTES.md#2025-04-06_snippet_5\n\nLANGUAGE: logtalk\nCODE:\n```\nspeech(winter, wedding)::advice.\n```\n\n----------------------------------------\n\nTITLE: Enabling Debug Messages for Components in Logtalk\nDESCRIPTION: Predicate for enabling all debug and debug(Group) messages for a specified component. This predicate has static compilation flag and accepts a component term as input.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/debug_messages_0.rst.txt#2025-04-06_snippet_0\n\nLANGUAGE: logtalk\nCODE:\n```\nenable/1\n```\n\n----------------------------------------\n\nTITLE: Defining rule/3 Predicate in Logtalk Database Protocol\nDESCRIPTION: Defines the rule/3 predicate for the databasep protocol. This predicate is automatically generated using term-expansion and includes the tail of the Body as the third argument.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/databasep_0.rst.txt#2025-04-06_snippet_1\n\nLANGUAGE: Logtalk\nCODE:\n```\nrule(Head,Body,Tail)\n```\n\n----------------------------------------\n\nTITLE: Loading the Factory Method Design Pattern Implementation\nDESCRIPTION: Loads the factory method design pattern sample implementation from the design patterns library. This is required before using the pattern examples.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/design_patterns/creational/factory_method/NOTES.md#2025-04-06_snippet_0\n\nLANGUAGE: logtalk\nCODE:\n```\nlogtalk_load(design_patterns('creational/factory_method/loader')).\n```\n\n----------------------------------------\n\nTITLE: Loading CSV Library in Logtalk\nDESCRIPTION: Demonstrates how to load all entities in the CSV library using the loader file.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/libraries/csv.rst#2025-04-06_snippet_0\n\nLANGUAGE: prolog\nCODE:\n```\n| ?- logtalk_load(csv(loader)).\n```\n\n----------------------------------------\n\nTITLE: Testing Validity of Options List in Logtalk\nDESCRIPTION: The valid_options/1 predicate succeeds if all options in a list are valid. Unlike check_options/1, it fails silently without throwing errors when invalid options are found.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/options_protocol_0.rst.txt#2025-04-06_snippet_3\n\nLANGUAGE: prolog\nCODE:\n```\nvalid_options(Options)\n```\n\n----------------------------------------\n\nTITLE: Using Prolog Module Hook in Logtalk\nDESCRIPTION: Demonstrates how to use the prolog_module_hook to apply expansion rules from a Prolog module in Logtalk.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/library/hook_objects/NOTES.md#2025-04-06_snippet_5\n\nLANGUAGE: Logtalk\nCODE:\n```\n:- set_logtalk_flag(hook, prolog_module_hook(user)).\n```\n\n----------------------------------------\n\nTITLE: Prefix with Length Checking in Logtalk\nDESCRIPTION: Checks if a list is a prefix of a given length of another list.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/listp_0.rst.txt#2025-04-06_snippet_7\n\nLANGUAGE: Logtalk\nCODE:\n```\nprefix(Prefix,Length,List)\n```\n\n----------------------------------------\n\nTITLE: Validating IBAN with DCG in Logtalk\nDESCRIPTION: Uses the iban object to validate an International Bank Account Number (IBAN) using DCG rules.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/dcgs/NOTES.md#2025-04-06_snippet_13\n\nLANGUAGE: logtalk\nCODE:\n```\niban::valid(\"GB82 WEST 1234 5698 7654 32\").\n```\n\n----------------------------------------\n\nTITLE: Computing Total Scratchcards (Part 2) in Logtalk\nDESCRIPTION: Retrieves the directory of the scratchcards object, constructs the path to the input test file, and calculates the total number of scratchcards for part 2 of the problem.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/scratchcards/NOTES.md#2025-04-06_snippet_3\n\nLANGUAGE: logtalk\nCODE:\n```\nobject_property(scratchcards, file(_, Directory)),\natom_concat(Directory, 'test_files/input', File),\nscratchcards::total(File, Total).\n```\n\n----------------------------------------\n\nTITLE: Observer update/1 Predicate in Logtalk\nDESCRIPTION: This predicate is called when an observed object is updated. It follows the observer design pattern where observer objects are notified of changes in subject objects. The predicate accepts a Change parameter that contains information about the update.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/observer_0.rst.txt#2025-04-06_snippet_0\n\nLANGUAGE: logtalk\nCODE:\n```\nupdate(Change)\n```\n\n----------------------------------------\n\nTITLE: Loading Parametric Variables Example in Logtalk\nDESCRIPTION: Loads the parametric variables example using the loader file.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/parvars/NOTES.md#2025-04-06_snippet_0\n\nLANGUAGE: logtalk\nCODE:\n```\nlogtalk_load(parvars(loader)).\n```\n\n----------------------------------------\n\nTITLE: Printing Logtalk, Prolog, and Kernel Versions\nDESCRIPTION: This snippet prints the versions of Logtalk, the Prolog backend, and the kernel if running as a notebook.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/design_patterns/structural/facade/NOTES.md#2025-04-06_snippet_0\n\nLANGUAGE: logtalk\nCODE:\n```\n%versions\n```\n\n----------------------------------------\n\nTITLE: Sorting Lists Using Standard Prolog Order\nDESCRIPTION: Sorts a list of integers using the Prolog built-in standard order operators through the user pseudo-object.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/sicstus/NOTES.md#2025-04-06_snippet_3\n\nLANGUAGE: logtalk\nCODE:\n```\nsort(user)::sort([3, 1, 4, 2, 9], Sorted).\n```\n\n----------------------------------------\n\nTITLE: Interpreter List Output in Verdi Neruda Shell\nDESCRIPTION: Sample output showing the available interpreters in Verdi Neruda, including depth-first search, breadth-first search, iterative deepening depth-first search, bottom-up, and A* interpreters.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/contributions/verdi_neruda.rst#2025-04-06_snippet_4\n\nLANGUAGE: Text\nCODE:\n```\ndfs_interpreter\nbfs_interpreter\niddfs_interpreter(A)\nbup_interpreter\na_star_interpreter(A)\n```\n\n----------------------------------------\n\nTITLE: Decrementing a counter in Logtalk\nDESCRIPTION: Predicate that decrements the value of a named counter by one. The counter must already exist as a non-variable term.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/counters_0.rst.txt#2025-04-06_snippet_2\n\nLANGUAGE: Logtalk\nCODE:\n```\ndecrement_counter(Counter)\n```\n\n----------------------------------------\n\nTITLE: Using Imported Meta-predicate\nDESCRIPTION: Shows how to call a predicate using a meta-predicate imported from another module\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/modules/NOTES.md#2025-04-06_snippet_3\n\nLANGUAGE: logtalk\nCODE:\n```\ntest::test.\n```\n\n----------------------------------------\n\nTITLE: Defining a Prototype in a Prototype-Based Hierarchy in Logtalk\nDESCRIPTION: Syntax for creating a prototype object that extends another prototype (parent), establishing a prototype-based inheritance hierarchy for code sharing.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/userman/objects.rst#2025-04-06_snippet_4\n\nLANGUAGE: logtalk\nCODE:\n```\n:- object(Prototype,\n    extends(Parent)).\n    ...\n:- end_object.\n```\n\n----------------------------------------\n\nTITLE: Defining current_op/3 reflection method in Logtalk\nDESCRIPTION: Added a new built-in reflection method current_op/3 to Logtalk.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/RELEASE_NOTES.md#2025-04-06_snippet_120\n\nLANGUAGE: Logtalk\nCODE:\n```\n* NEW: Built-in reflection method `current_op/3`.\n```\n\n----------------------------------------\n\nTITLE: Salt Puzzle Solutions\nDESCRIPTION: Multiple solutions for the salt measuring puzzle using breadth-first search with different quantities\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/searching/NOTES.md#2025-04-06_snippet_10\n\nLANGUAGE: logtalk\nCODE:\n```\nperformance::init, salt(100, 500, 200)::initial_state(Initial), breadth_first(6)::solve(salt(100, 500, 200), Initial, Path), salt(100, 500, 200)::print_path(Path), performance::report.\n```\n\nLANGUAGE: logtalk\nCODE:\n```\nperformance::init, salt(200, 250, 550)::initial_state(Initial), breadth_first(7)::solve(salt(200, 250, 550), Initial, Path), salt(200, 250, 550)::print_path(Path), performance::report.\n```\n\nLANGUAGE: logtalk\nCODE:\n```\nperformance::init, salt(100, 250, 550)::initial_state(Initial), breadth_first(11)::solve(salt(100, 250, 550), Initial, Path), salt(100, 250, 550)::print_path(Path), performance::report.\n```\n\n----------------------------------------\n\nTITLE: Displaying Version Information in Logtalk\nDESCRIPTION: Displays the versions of Logtalk, the Prolog backend, and the kernel when running in a Jupyter notebook environment.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/shapes/ph/NOTES.md#2025-04-06_snippet_0\n\nLANGUAGE: logtalk\nCODE:\n```\n%versions\n```\n\n----------------------------------------\n\nTITLE: Loading ToyCHR in Logtalk\nDESCRIPTION: This snippet demonstrates how to load all entities in the ToyCHR port using the loader.lgt file.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/ports/toychr/NOTES.md#2025-04-06_snippet_0\n\nLANGUAGE: Logtalk\nCODE:\n```\n| ?- logtalk_load(toychr(loader)).\n```\n\n----------------------------------------\n\nTITLE: Asynchronous List Computation\nDESCRIPTION: Demonstrates asynchronous computation using product sum of two sequences of integers using async calls.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/futures/NOTES.md#2025-04-06_snippet_2\n\nLANGUAGE: logtalk\nCODE:\n```\ninteger::sequence(1,100,List1), integer::sequence(101,200,List2), list_math::product_sum(List1,List2,Result).\n```\n\n----------------------------------------\n\nTITLE: Predicate Template - libraries/3\nDESCRIPTION: Creates all supported diagrams for a set of libraries with specified options. Project argument is used as prefix for diagram filenames.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/diagrams_1.rst.txt#2025-04-06_snippet_0\n\nLANGUAGE: logtalk\nCODE:\n```\nlibraries(Project,Libraries,Options)\n```\n\n----------------------------------------\n\nTITLE: Selecting Specific Tests in Logtalk\nDESCRIPTION: Example of using the (+)/1 operator to select specific tests for execution during debugging.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/tools/lgtunit/NOTES.md#2025-04-06_snippet_27\n\nLANGUAGE: logtalk\nCODE:\n```\n:- object(tests,\n\textends(lgtunit)).\n\n\tcover(ack).\n\n\ttest(ack_1, true(Result == 11)) :-\n\t\tack::ack(2, 4, Result).\n\n\t+ test(ack_2, true(Result == 61)) :-\n\t\tack::ack(3, 3, Result).\n\n\ttest(ack_3, true(Result == 125)) :-\n\t\tack::ack(3, 4, Result).\n\n:- end_object.\n```\n\n----------------------------------------\n\nTITLE: EditorConfig Definition\nDESCRIPTION: EditorConfig file for setting indentation preferences according to coding guidelines.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/RELEASE_NOTES.md#2025-04-06_snippet_61\n\nLANGUAGE: EditorConfig\nCODE:\n```\n.editorconfig\n```\n\n----------------------------------------\n\nTITLE: Implementing For-Downto Loop in Logtalk\nDESCRIPTION: Defines a for-downto loop construct that calls a Goal while counting down from First to Last with a decrement of 1. It uses meta-predicate notation to handle callable arguments.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/loopp_0.rst.txt#2025-04-06_snippet_7\n\nLANGUAGE: Logtalk\nCODE:\n```\nfordownto(First,Last,Goal)\n```\n\n----------------------------------------\n\nTITLE: Defining Uses/2 Directive Syntax\nDESCRIPTION: Shows the various syntax patterns for the uses/2 directive including predicate indicators, aliases, and operator declarations.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/refman/directives/uses_2.rst#2025-04-06_snippet_0\n\nLANGUAGE: logtalk\nCODE:\n```\nuses(Object, [Name/Arity, ...])\nuses(Object, [Name/Arity as Alias/Arity, ...])\n\nuses(Object, [Predicate as Alias, ...])\n\nuses(Object, [Name//Arity, ...])\nuses(Object, [Name//Arity as Alias//Arity, ...])\n\nuses(Object, [op(Precedence, Associativity, Operator), ...])\n```\n\n----------------------------------------\n\nTITLE: Calculate Earth Weight\nDESCRIPTION: Calculates the weight of object m1 on Earth\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/planets/NOTES.md#2025-04-06_snippet_2\n\nLANGUAGE: logtalk\nCODE:\n```\nearth::weight(m1, W1).\n```\n\n----------------------------------------\n\nTITLE: Implementing forward/1 in a Proxy Object in Logtalk\nDESCRIPTION: Demonstrates how to implement the forward/1 method in a proxy object. This example delegates unknown messages to a 'real' object.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/refman/methods/forward_1.rst.txt#2025-04-06_snippet_2\n\nLANGUAGE: Logtalk\nCODE:\n```\n:- object(proxy,\n    implements(forwarding),\n    ...).\n\n    forward(Message) :-\n        % delegate unknown messages to the \"real\" object\n        [real::Message].\n```\n\n----------------------------------------\n\nTITLE: Creating New Set in Logtalk\nDESCRIPTION: Demonstrates creating a new empty set using the new/1 predicate from the set object.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/library/sets/NOTES.md#2025-04-06_snippet_2\n\nLANGUAGE: Logtalk\nCODE:\n```\n| ?- set::new(Set).\nSet = []\nyes\n```\n\n----------------------------------------\n\nTITLE: Querying Object Properties in Logtalk\nDESCRIPTION: This snippet queries multiple properties (color, side, and position) of the 'q1' object. It uses individual message sends instead of message broadcasting to work around a XSB parser bug.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/shapes/ch/NOTES.md#2025-04-06_snippet_3\n\nLANGUAGE: logtalk\nCODE:\n```\nq1::color(Color), q1::side(Side), q1::position(X, Y).\n```\n\n----------------------------------------\n\nTITLE: Loading the Recipe Example in Logtalk\nDESCRIPTION: Loads the recipe example modules using Logtalk's module loading mechanism.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/recipes/NOTES.md#2025-04-06_snippet_1\n\nLANGUAGE: logtalk\nCODE:\n```\nlogtalk_load(recipes(loader)).\n```\n\n----------------------------------------\n\nTITLE: Making a Threaded Call with a List Containing Duplicates in Logtalk\nDESCRIPTION: Demonstrates making a threaded call with a list that contains duplicate elements.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/threads/nondet/NOTES.md#2025-04-06_snippet_12\n\nLANGUAGE: logtalk\nCODE:\n```\nthreaded_call(lists::member(X, [1,2,3,2])).\n```\n\n----------------------------------------\n\nTITLE: Syntax definition for threaded_call/1-2 in Logtalk\nDESCRIPTION: Defines the syntax for the threaded_call predicate in both its single and double argument forms. This predicate allows asynchronous goal execution in a new thread.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/refman/predicates/threaded_call_1_2.rst#2025-04-06_snippet_0\n\nLANGUAGE: prolog\nCODE:\n```\nthreaded_call(Goal)\nthreaded_call(Goal, Tag)\n```\n\n----------------------------------------\n\nTITLE: Template and modes for info/2 directive in Logtalk\nDESCRIPTION: Defines the template and modes for the info/2 directive, showing argument types and their directionality.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/refman/directives/info_2.rst#2025-04-06_snippet_1\n\nLANGUAGE: logtalk\nCODE:\n```\ninfo(+predicate_indicator, +predicate_info_list)\ninfo(+non_terminal_indicator, +predicate_info_list)\n```\n\n----------------------------------------\n\nTITLE: Browsing API Documentation\nDESCRIPTION: Examples of accessing API documentation and man pages using the help tool.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/devtools/help.rst.txt#2025-04-06_snippet_3\n\nLANGUAGE: prolog\nCODE:\n```\n| ?- help::apis.\n\n| ?- help::apis(check/2).\n\n| ?- help::apis(message_tokens//2).\n\n| ?- help::man(logtalk_tester).\n```\n\n----------------------------------------\n\nTITLE: Printing Logtalk, Prolog Backend, and Kernel Versions\nDESCRIPTION: This snippet prints the versions of Logtalk, the Prolog backend, and the kernel if running as a notebook.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/design_patterns/behavioral/memento/NOTES.md#2025-04-06_snippet_0\n\nLANGUAGE: logtalk\nCODE:\n```\n%versions\n```\n\n----------------------------------------\n\nTITLE: Printing Class Interfaces\nDESCRIPTION: Displays the public and protected interfaces of the three main classes: object, abstract_class, and class.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/reflection/NOTES.md#2025-04-06_snippet_2\n\nLANGUAGE: logtalk\nCODE:\n```\nobject::print, abstract_class::print, class::print.\n```\n\n----------------------------------------\n\nTITLE: Reading Terms from Character Lists in Logtalk\nDESCRIPTION: Predicates for reading Prolog terms from character lists, including versions that handle remaining characters and custom read options.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/term_io_protocol_0.rst.txt#2025-04-06_snippet_1\n\nLANGUAGE: Logtalk\nCODE:\n```\nread_term_from_chars(Chars,Term,Options)\n```\n\nLANGUAGE: Logtalk\nCODE:\n```\nread_term_from_chars(Chars,Term,Tail,Options)\n```\n\nLANGUAGE: Logtalk\nCODE:\n```\nread_from_chars(Chars,Term)\n```\n\n----------------------------------------\n\nTITLE: Converting Heap to Sorted List in Logtalk\nDESCRIPTION: Returns the current set of pairs in the heap as a list, sorted into ascending order of the keys.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/heapp_0.rst.txt#2025-04-06_snippet_6\n\nLANGUAGE: Logtalk\nCODE:\n```\nas_list(Heap,List)\n```\n\n----------------------------------------\n\nTITLE: Loading Sets Library in Logtalk\nDESCRIPTION: Shows how to load all entities in the sets library using the loader file.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/libraries/sets.rst#2025-04-06_snippet_0\n\nLANGUAGE: logtalk\nCODE:\n```\n| ?- logtalk_load(sets(loader)).\n```\n\n----------------------------------------\n\nTITLE: Asserting and Retracting Module Predicates with Explicit Qualification\nDESCRIPTION: Example showing how to assert and retract clauses for dynamic predicates in Prolog modules using explicitly qualified module arguments.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/userman/predicates.rst.txt#2025-04-06_snippet_65\n\nLANGUAGE: logtalk\nCODE:\n```\n:- object(...).\n\n    :- dynamic(m:bar/1).\n\n    foo(X) :-\n        retractall(m:bar(_)),\n        assertz(m:bar(X)),\n        ...\n\n:- end_object.\n```\n\n----------------------------------------\n\nTITLE: Converting Between XML and Compound Terms with DCG in Logtalk\nDESCRIPTION: Uses the xml object to convert between compound terms and XML representations using DCG rules.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/dcgs/NOTES.md#2025-04-06_snippet_11\n\nLANGUAGE: logtalk\nCODE:\n```\nxml::convert(word(child, children), word(singular, plural), XML).\n```\n\nLANGUAGE: logtalk\nCODE:\n```\nxml::convert(Term, Interpretation, '<word><singular>child</singular><plural>children</plural></word>').\n```\n\n----------------------------------------\n\nTITLE: Querying Restored Objects\nDESCRIPTION: Verifies that the objects were correctly restored by querying all objects that conform to the 'abc' protocol and retrieving their predicate values.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/serialization/NOTES.md#2025-04-06_snippet_7\n\nLANGUAGE: logtalk\nCODE:\n```\n%%table\nconforms_to_protocol(Object, abc), Object::(a(A), b(B), c(C)).\n```\n\n----------------------------------------\n\nTITLE: Defining proper_suffix/3 predicate in Logtalk\nDESCRIPTION: Defines a predicate to check if Suffix is a proper suffix of length Length of List. It is a static predicate with two usage modes, allowing for different input/output combinations.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/listp_0.rst.txt#2025-04-06_snippet_30\n\nLANGUAGE: Logtalk\nCODE:\n```\nproper_suffix(Suffix,Length,List)\n```\n\n----------------------------------------\n\nTITLE: Using unexpecteds/2 predicate in Logtalk\nDESCRIPTION: Returns the errors stored in the expected terms that hold an error. Takes a list of expected terms and unifies the second argument with a list of their errors.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/either_0.rst.txt#2025-04-06_snippet_1\n\nLANGUAGE: logtalk\nCODE:\n```\nunexpecteds(Expecteds,Errors)\n```\n\n----------------------------------------\n\nTITLE: Specifying Modes and Proofs for threaded/1 in Logtalk\nDESCRIPTION: Defines the mode and number of proofs for the threaded/1 predicate, indicating it takes a callable term and produces zero or one solution.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/refman/predicates/threaded_1.rst.txt#2025-04-06_snippet_2\n\nLANGUAGE: Prolog\nCODE:\n```\nthreaded(+callable) - zero_or_one\n```\n\n----------------------------------------\n\nTITLE: Attempting to Request an Invalid Instance\nDESCRIPTION: Tries to request an instance 'foobar' that is not a member of the defined named instances, which fails.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/design_patterns/creational/multiton/NOTES.md#2025-04-06_snippet_6\n\nLANGUAGE: logtalk\nCODE:\n```\nmultiton::instance(foobar).\n```\n\n----------------------------------------\n\nTITLE: Checking Shop1 Sales Statistics\nDESCRIPTION: Queries the total units sold and income for shop1, demonstrating individual state tracking.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/design_patterns/structural/flyweight/NOTES.md#2025-04-06_snippet_5\n\nLANGUAGE: logtalk\nCODE:\n```\nshop1::(total_units_sold(Units), total_income(Income)).\n```\n\n----------------------------------------\n\nTITLE: Testing Prototype Local Call\nDESCRIPTION: Demonstrates calling get_local/1 predicate on prototype object to retrieve local value.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/super_calls/NOTES.md#2025-04-06_snippet_2\n\nLANGUAGE: logtalk\nCODE:\n```\nprototype::get_local(Local).\n```\n\n----------------------------------------\n\nTITLE: Implementing Protocol in Logtalk Category\nDESCRIPTION: Shows how to implement a protocol in a Logtalk category. The category declaration uses the 'implements' directive to specify the protocol being implemented.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/userman/protocols.rst.txt#2025-04-06_snippet_10\n\nLANGUAGE: logtalk\nCODE:\n```\n:- category(Object,\n    implements(Protocol)).\n    ...\n:- end_category.\n```\n\n----------------------------------------\n\nTITLE: Creating AVL Tree Dictionary from Key-Value Pairs in Logtalk\nDESCRIPTION: Shows how to create an AVL tree dictionary from a list of key-value pairs using the as_dictionary/2 predicate.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/libraries/dictionaries.rst.txt#2025-04-06_snippet_3\n\nLANGUAGE: prolog\nCODE:\n```\n| ?- avltree::as_dictionary([a-1,c-3,b-2], Dictionary).\nDictionary = ...\nyes\n```\n\n----------------------------------------\n\nTITLE: Testing goal expansion within public object\nDESCRIPTION: Shows goal expansion within the desc_public object using a test predicate.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/expansion/NOTES.md#2025-04-06_snippet_9\n\nLANGUAGE: logtalk\nCODE:\n```\ndesc_public::test_goal_expansion(write(Term), EGoal).\n```\n\n----------------------------------------\n\nTITLE: Example Implementation\nDESCRIPTION: Example showing multifile and dynamic declarations along with implementation for information messages in the core component.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/refman/methods/message_prefix_stream_4.rst#2025-04-06_snippet_2\n\nLANGUAGE: prolog\nCODE:\n```\n:- multifile(logtalk::message_prefix_stream/4).\n:- dynamic(logtalk::message_prefix_stream/4).\n\nlogtalk::message_prefix_stream(information, core, '% ', user_output).\n```\n\n----------------------------------------\n\nTITLE: Activating the ports profiler\nDESCRIPTION: This snippet activates the ports profiler using the start/0 predicate from the ports_profiler object.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/defaulty/NOTES.md#2025-04-06_snippet_2\n\nLANGUAGE: logtalk\nCODE:\n```\nports_profiler::start.\n```\n\n----------------------------------------\n\nTITLE: Goal Expansion Mode Declaration\nDESCRIPTION: Mode declaration specifying that the first argument must be bound to a callable term and the second argument will be unified with the expanded goal. The predicate provides zero or one solutions.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/refman/methods/goal_expansion_2.rst.txt#2025-04-06_snippet_1\n\nLANGUAGE: prolog\nCODE:\n```\ngoal_expansion(+callable, -callable) - zero_or_one\n```\n\n----------------------------------------\n\nTITLE: Printing Logtalk, Prolog backend, and kernel versions\nDESCRIPTION: This code snippet prints the versions of Logtalk, the Prolog backend, and the kernel if running as a notebook.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/threads/barriers/NOTES.md#2025-04-06_snippet_0\n\nLANGUAGE: logtalk\nCODE:\n```\n%versions\n```\n\n----------------------------------------\n\nTITLE: Defining clause/2 Method Signature in Logtalk\nDESCRIPTION: Specifies the signature of the clause/2 method, which takes a Head and Body as arguments to enumerate clauses of a dynamic predicate.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/refman/methods/clause_2.rst#2025-04-06_snippet_0\n\nLANGUAGE: Logtalk\nCODE:\n```\nclause(Head, Body)\n```\n\n----------------------------------------\n\nTITLE: Querying Object Properties Example in Prolog\nDESCRIPTION: Demonstrates how to use the object_property/2 predicate to enumerate properties of the built-in 'logtalk' object. This example shows multiple results obtained through backtracking.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/refman/predicates/object_property_2.rst#2025-04-06_snippet_1\n\nLANGUAGE: prolog\nCODE:\n```\n% enumerate the properties of the logtalk built-in object:\n| ?- object_property(logtalk, Property).\n\nProperty = context_switching_calls ;\nProperty = source_data ;\nProperty = threaded ;\nProperty = static ;\nProperty = built_in ;\n...\n```\n\n----------------------------------------\n\nTITLE: Using Multiple Hook Objects with hook_flows Library\nDESCRIPTION: Commands to load the hook_flows library and set up multiple hook objects or modules for handling term and goal expansions from different sources.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/userman/migration.rst#2025-04-06_snippet_6\n\nLANGUAGE: text\nCODE:\n```\n| ?- logtalk_load(hook_flows(loader)).\n...\n\n| ?- set_logtalk_flag(hook, hook_set([user, system])).\n...\n```\n\n----------------------------------------\n\nTITLE: Flag Value Options\nDESCRIPTION: Common flag values used throughout the configuration system for enabling/disabling features and setting warning levels.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/userman/programming.rst#2025-04-06_snippet_18\n\nLANGUAGE: logtalk\nCODE:\n```\nunsupported\nsupported\nwarning\nsilent\nerror\ndefault\non\noff\n```\n\n----------------------------------------\n\nTITLE: Running Grammar Library Tests\nDESCRIPTION: Command to run the minimal tests for the library predicates using the tester file\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/library/grammars/NOTES.md#2025-04-06_snippet_1\n\nLANGUAGE: prolog\nCODE:\n```\n| ?- logtalk_load(grammars(tester)).\n```\n\n----------------------------------------\n\nTITLE: Using Heap with Greater Than Comparison\nDESCRIPTION: Demonstrates using a parameterized object alias with heap(>) to insert elements and find the maximum value.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/object_aliases/NOTES.md#2025-04-06_snippet_4\n\nLANGUAGE: logtalk\nCODE:\n```\nsimple(>)::insert_top([3-c,1-a,2-b], Top).\n```\n\n----------------------------------------\n\nTITLE: Installing Tool Dependencies on Ubuntu\nDESCRIPTION: Terminal commands for installing third-party dependencies required by various Logtalk tools using apt package manager on Ubuntu Linux.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/tools/NOTES.md#2025-04-06_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n$ sudo apt install graphviz\n$ sudo apt install texinfo pandoc\n$ sudo apt install xsltproc fop texlive-latex-extra tex-gyre latexmk\n$ sudo apt install coreutils libarchive-tools gnupg2 git curl wget direnv\n$ sudo apt install gh\n```\n\n----------------------------------------\n\nTITLE: Defining logging_to_file_/2 Predicate in Logtalk\nDESCRIPTION: Declaration of the dynamic predicate logging_to_file_/2 that tracks the logging status for log files. It associates a file alias with its current status and supports querying with zero_or_more proofs.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/logging_0.rst.txt#2025-04-06_snippet_1\n\nLANGUAGE: logtalk\nCODE:\n```\nlogging_to_file_(Alias,Status)\n```\n\n----------------------------------------\n\nTITLE: Extending Categories in Logtalk\nDESCRIPTION: Illustrates how to define a Logtalk category that extends other categories.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/userman/categories.rst#2025-04-06_snippet_2\n\nLANGUAGE: Logtalk\nCODE:\n```\n:- category(Category,\n    extends([Category1, Category2, ...])).\n    ...\n:- end_category.\n```\n\n----------------------------------------\n\nTITLE: Defining euclidean_norm/2 Predicate for Number Lists in Logtalk\nDESCRIPTION: Calculates the Euclidean norm of a list of numbers. Fails if the list is empty.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/numberlistp_0.rst.txt#2025-04-06_snippet_8\n\nLANGUAGE: Logtalk\nCODE:\n```\neuclidean_norm(List,Norm)\n```\n\n----------------------------------------\n\nTITLE: Resetting Profiling Data in Logtalk\nDESCRIPTION: Shows how to reset all profiling data or data for a specific entity.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/tools/ports_profiler/NOTES.md#2025-04-06_snippet_7\n\nLANGUAGE: Logtalk\nCODE:\n```\n| ?- ports_profiler::reset.\n| ?- ports_profiler::reset(Entity).\n```\n\n----------------------------------------\n\nTITLE: Custom Type Implementation for Sets\nDESCRIPTION: Example of implementing the comparingp protocol for custom set element types using rainbow colors.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/libraries/sets.rst.txt#2025-04-06_snippet_5\n\nLANGUAGE: logtalk\nCODE:\n```\n:- object(rainbow_colors,\n    implements(comparingp)).\n\n    order(red,    1).\n    order(orange, 2).\n    order(yellow, 3).\n    order(green,  4).\n    order(blue,   5).\n    order(indigo, 6).\n    order(violet, 7).\n\n    Color1 < Color2 :-\n        order(Color1, N1),\n        order(Color2, N2),\n        {N1 < N2}.\n\n    Color1 =< Color2 :-\n        order(Color1, N1),\n        order(Color2, N2),\n        {N1 =< N2}.\n\n    ...\n\n:- end_object.\n```\n\n----------------------------------------\n\nTITLE: Configuring URL Prefixes for TextMate in Logtalk Diagrams\nDESCRIPTION: Sets the URL code prefix for generating local links to open files and directories in TextMate when creating Logtalk diagrams.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/tools/diagrams/NOTES.md#2025-04-06_snippet_13\n\nLANGUAGE: prolog\nCODE:\n```\nurl_prefixes('txmt://open?url=file://', DocPrefix)\n```\n\n----------------------------------------\n\nTITLE: Installing d2 and Graphviz on Windows using Chocolatey\nDESCRIPTION: Command for installing the required d2 and Graphviz tools on Windows using the Chocolatey package manager.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/tools/diagrams/NOTES.md#2025-04-06_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\n> choco install d2 graphviz\n```\n\n----------------------------------------\n\nTITLE: Date Parametric Object Query\nDESCRIPTION: Retrieves today's date using a parametric date object with variables for year, month, and day.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/parametric/NOTES.md#2025-04-06_snippet_6\n\nLANGUAGE: logtalk\nCODE:\n```\ndate(Year, Month, Day)::today.\n```\n\n----------------------------------------\n\nTITLE: Defining rule/4 Predicate in Logtalk Database Protocol\nDESCRIPTION: Defines the rule/4 predicate for the databasep protocol. This predicate is automatically generated using term-expansion and includes the length of the Body as the third argument.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/databasep_0.rst.txt#2025-04-06_snippet_0\n\nLANGUAGE: Logtalk\nCODE:\n```\nrule(Head,Body,Length,Tail)\n```\n\n----------------------------------------\n\nTITLE: Geometric Shape Hierarchy Structure\nDESCRIPTION: Defines the hierarchical structure of geometric shapes, showing the inheritance relationships from shape down to specific square instances q1 and q2.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/shapes/NOTES.md#2025-04-06_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nshape\n\tpolygon\n\t\tregular_polygon\n\t\t\tsquare\n\t\t\t\tq1\n\t\t\t\tq2\n```\n\n----------------------------------------\n\nTITLE: Deactivating the ports profiler\nDESCRIPTION: This snippet deactivates the ports profiler using the stop/0 predicate from the ports_profiler object.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/defaulty/NOTES.md#2025-04-06_snippet_8\n\nLANGUAGE: logtalk\nCODE:\n```\nports_profiler::stop.\n```\n\n----------------------------------------\n\nTITLE: Profiling the defaulty representation\nDESCRIPTION: This snippet profiles the count_atomics/3 predicate using the defaulty representation with a sample input list.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/defaulty/NOTES.md#2025-04-06_snippet_3\n\nLANGUAGE: logtalk\nCODE:\n```\ndefaulty::count_atomics([a,1,_,b,2,_,c,3,_], As, Ns).\n```\n\n----------------------------------------\n\nTITLE: Loading Verdi Neruda in Logtalk\nDESCRIPTION: Instructions for loading the Verdi Neruda library in a Logtalk environment, either using the bundled version or a custom installation.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/contributions/verdi_neruda.rst#2025-04-06_snippet_0\n\nLANGUAGE: Prolog\nCODE:\n```\n{verdi_neruda(loader)}.\n```\n\nLANGUAGE: Prolog\nCODE:\n```\n{loader}.\n```\n\n----------------------------------------\n\nTITLE: Defining Question Asking Methods in reStructuredText\nDESCRIPTION: This snippet defines a toctree for question asking methods in Logtalk. It includes links to three specific implementations: ask_question_5, question_hook_6, and question_prompt_stream_4.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/refman/methods/asking_methods.rst#2025-04-06_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. _asking_methods:\n\nQuestion asking\n===============\n\n.. toctree::\n   :maxdepth: 1\n\n   ask_question_5\n   question_hook_6\n   question_prompt_stream_4\n```\n\n----------------------------------------\n\nTITLE: Error Generation Implementation\nDESCRIPTION: Shows the equivalent implementation of how the representation error is generated using context and throw predicates.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/refman/methods/representation_error_1.rst.txt#2025-04-06_snippet_1\n\nLANGUAGE: prolog\nCODE:\n```\n...,\ncontext(Context),\nthrow(error(representation_error(Flag), Context)).\n```\n\n----------------------------------------\n\nTITLE: Creating and manipulating a history point\nDESCRIPTION: Demonstrates creation of a history point that stores previous positions, printing its current position and history, moving it, and printing updated information.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/points/NOTES.md#2025-04-06_snippet_4\n\nLANGUAGE: logtalk\nCODE:\n```\nhistory_point::new(Point, [position-(1, 3)]), Point::(print, move(7, 4), print).\n```\n\n----------------------------------------\n\nTITLE: Type Entity Dynamic Predicate Declaration\nDESCRIPTION: Defines a dynamic predicate that maintains a table of documented entities per type. Takes type name, primary and secondary sort keys, and entity as arguments.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/lgtdoc_0.rst.txt#2025-04-06_snippet_2\n\nLANGUAGE: logtalk\nCODE:\n```\ntype_entity_(Type,PrimarySortKey,SecondarySortKey,Entity)\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Debug Complementing Category in Logtalk\nDESCRIPTION: Example of creating a more complex complementing category that extends listing and adds a custom debug predicate to filter listings by key.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/libraries/listing.rst#2025-04-06_snippet_5\n\nLANGUAGE: logtalk\nCODE:\n```\n| ?- create_category(\n        patch,\n        [extends(listing),complements(data)],\n        [public(debug/1)],\n        [(debug(Key) :- ::listing(p(Key,Datum)))]\n    ).\nyes\n\n| ?- data::debug(k42).\n...\n```\n\n----------------------------------------\n\nTITLE: Deprecated Grouping Operation\nDESCRIPTION: The group_by_key/2 predicate is deprecated, equivalent to group_sorted_by_key/2.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/pairs_0.rst.txt#2025-04-06_snippet_8\n\nLANGUAGE: logtalk\nCODE:\n```\ngroup_by_key(Pairs,Groups)\n```\n\n----------------------------------------\n\nTITLE: Cleaning Up Test Environment in Logtalk\nDESCRIPTION: Cleans up the environment after running a test set. Defaults to true if not defined.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/lgtunit_0.rst.txt#2025-04-06_snippet_32\n\nLANGUAGE: logtalk\nCODE:\n```\ncleanup\n```\n\n----------------------------------------\n\nTITLE: Modes and Proof Specifications for Message Delegation in Logtalk\nDESCRIPTION: Specifies the valid modes and number of proofs for the []/1 control construct, indicating that both object and message must be bound at call time and may generate zero or more solutions.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/refman/control/delegate_message_1.rst#2025-04-06_snippet_1\n\nLANGUAGE: logtalk\nCODE:\n```\n[+object_identifier::+callable] - zero_or_more\n[{+object_identifier}::+callable] - zero_or_more\n```\n\n----------------------------------------\n\nTITLE: Examples Triggering Consistency Errors in Logtalk\nDESCRIPTION: Provides examples of code that would trigger consistency errors when compiled, including a predicate alias with different arity than the original and a meta-predicate template that is inconsistent with how closures are used.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/refman/methods/consistency_error_3.rst.txt#2025-04-06_snippet_3\n\nLANGUAGE: prolog\nCODE:\n```\n% code that will trigger consistency errors when compiled:\n\n% predicates (and non-terminals) aliases must have the same\n% arity as the original predicates (and non-terminals)\n:- uses(list, [\n    member/2 as in/1\n]).\n\n% meta-predicate templates should be consistent with how closures\n% are used regarding the number of additional arguments\n:- public(p/2).\n:- meta_predicate(p(1, *)).\n\np(G, A) :-\n    call(G, A, 2).\n```\n\n----------------------------------------\n\nTITLE: Running Second Lambda Benchmark in Logtalk\nDESCRIPTION: Executes the second benchmark comparing three approaches to adding 1 to every integer in a list [1..100000]: using a local predicate, using map/3 with integer::plus/3, and using map/3 with a lambda expression.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/lambdas_compiled/NOTES.md#2025-04-06_snippet_3\n\nLANGUAGE: logtalk\nCODE:\n```\nlambda_benchmarks::bench2.\n```\n\n----------------------------------------\n\nTITLE: Defining logtalk_compile/1 Predicate in Logtalk\nDESCRIPTION: Defines the logtalk_compile/1 predicate for compiling Logtalk source files to disk. It can compile a single file or a list of files using default compiler flag values. The predicate supports various file path notations and extensions.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/refman/predicates/logtalk_compile_1.rst.txt#2025-04-06_snippet_0\n\nLANGUAGE: Logtalk\nCODE:\n```\nlogtalk_compile(File)\nlogtalk_compile(Files)\n```\n\n----------------------------------------\n\nTITLE: Loading GUI Version of Questions Example in Logtalk\nDESCRIPTION: This code loads the GUI version of the questions example, which uses a Java GUI dialog for question presentation.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/questions/NOTES.md#2025-04-06_snippet_3\n\nLANGUAGE: logtalk\nCODE:\n```\nlogtalk_load(questions(loader_gui)).\n```\n\n----------------------------------------\n\nTITLE: Permutation-based Route Search\nDESCRIPTION: Implements blind search by generating all possible permutations of the town list to find a route.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/lo/travellers/NOTES.md#2025-04-06_snippet_5\n\nLANGUAGE: logtalk\nCODE:\n```\npermute::route([london, brighton, portsmouth, exeter, oxford, aberystwyth], Route).\n```\n\n----------------------------------------\n\nTITLE: Creating Empty Set in Logtalk\nDESCRIPTION: Example of creating a new empty set using the new/1 predicate.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/libraries/sets.rst.txt#2025-04-06_snippet_2\n\nLANGUAGE: prolog\nCODE:\n```\n| ?- set::new(Set).\nSet = []\nyes\n```\n\n----------------------------------------\n\nTITLE: Creating Object Wrapper for Plain Prolog Files\nDESCRIPTION: Example showing how to create diagrams for plain Prolog files by defining an object that includes the Prolog file content.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/devtools/diagrams.rst#2025-04-06_snippet_10\n\nLANGUAGE: logtalk\nCODE:\n```\n:- object(code).\n    :- include('code.pl').\n:- end_object.\n```\n\n----------------------------------------\n\nTITLE: Testing ISO 8601 Library in Logtalk\nDESCRIPTION: Command to load and run tests for the ISO 8601 library predicates using the tester.lgt file\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/contributions/iso8601.rst#2025-04-06_snippet_1\n\nLANGUAGE: logtalk\nCODE:\n```\n| ?- logtalk_load(iso8601(tester)).\n```\n\n----------------------------------------\n\nTITLE: Creating Child Driver Instance\nDESCRIPTION: Creates a new driver instance for Wheeler with an age of 7.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/design_patterns/structural/proxy/NOTES.md#2025-04-06_snippet_5\n\nLANGUAGE: logtalk\nCODE:\n```\ndriver::new(wheeler, 'Wheeler', 7).\n```\n\n----------------------------------------\n\nTITLE: Checking System Versions in Logtalk\nDESCRIPTION: Prints the versions of Logtalk, Prolog backend, and kernel when running in a notebook environment.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/design_patterns/structural/flyweight/NOTES.md#2025-04-06_snippet_0\n\nLANGUAGE: logtalk\nCODE:\n```\n%versions\n```\n\n----------------------------------------\n\nTITLE: Complementing Objects with Logtalk Categories\nDESCRIPTION: Demonstrates how to use categories to complement existing objects, providing hot patching functionality.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/userman/categories.rst#2025-04-06_snippet_5\n\nLANGUAGE: Logtalk\nCODE:\n```\n:- category(Category,\n    complements([Object1, Object2, ....])).\n    ...\n:- end_category.\n```\n\n----------------------------------------\n\nTITLE: Logtalk Make Example Usage\nDESCRIPTION: Example showing how to use logtalk_make to reload all modified files.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/refman/predicates/logtalk_make_0.rst#2025-04-06_snippet_2\n\nLANGUAGE: logtalk\nCODE:\n```\n% reload all files modified since last loaded:\n| ?- logtalk_make.\n```\n\n----------------------------------------\n\nTITLE: Empty List Membership Test\nDESCRIPTION: Tests that the empty list contains no members using negation and the member/1 predicate.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/parametric/NOTES.md#2025-04-06_snippet_5\n\nLANGUAGE: logtalk\nCODE:\n```\n\\+ []::member(_).\n```\n\n----------------------------------------\n\nTITLE: Loading Warning Examples\nDESCRIPTION: Loads a set of entities that demonstrate common compiler warnings in Logtalk.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/errors/NOTES.md#2025-04-06_snippet_2\n\nLANGUAGE: logtalk\nCODE:\n```\nlogtalk_load(errors(warnings_loader)).\n```\n\n----------------------------------------\n\nTITLE: Wrapping Plain Prolog Code in Logtalk Object\nDESCRIPTION: Example of wrapping plain Prolog code in a Logtalk object to enable linting capabilities.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/devtools/linter.rst.txt#2025-04-06_snippet_1\n\nLANGUAGE: logtalk\nCODE:\n```\n:- object(code).\n    :- include('code.pl').\n:- end_object.\n```\n\n----------------------------------------\n\nTITLE: Step-by-Step Logic Translation Example 3\nDESCRIPTION: Shows translation of a classical logic example involving universal quantification of men and mortality.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/logic/NOTES.md#2025-04-06_snippet_5\n\nLANGUAGE: logtalk\nCODE:\n```\ntranslator::step_by_step(all(X, men(X) => mortal(X)), Cs).\n```\n\n----------------------------------------\n\nTITLE: Example Usage of term_expansion/2\nDESCRIPTION: Demonstrates practical examples of using term_expansion/2 to modify license declarations and convert measurement units.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/refman/methods/term_expansion_2.rst.txt#2025-04-06_snippet_2\n\nLANGUAGE: prolog\nCODE:\n```\nterm_expansion((:- license(default)), (:- license(gplv3))).\nterm_expansion(data(Millimeters), data(Meters)) :- Meters is Millimeters / 1000.\n```\n\n----------------------------------------\n\nTITLE: Loading Scopes Example\nDESCRIPTION: Loads the scopes example module into the Logtalk environment\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/scopes/NOTES.md#2025-04-06_snippet_1\n\nLANGUAGE: logtalk\nCODE:\n```\nlogtalk_load(scopes(loader)).\n```\n\n----------------------------------------\n\nTITLE: Defining the clause/2 Method Signature in Logtalk\nDESCRIPTION: The signature of the clause/2 built-in method that enumerates clauses of a dynamic predicate by backtracking.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/refman/methods/clause_2.rst.txt#2025-04-06_snippet_0\n\nLANGUAGE: logtalk\nCODE:\n```\nclause(Head, Body)\n```\n\n----------------------------------------\n\nTITLE: Integer Range Test Message\nDESCRIPTION: Demonstrates logging of an integer range generation message.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/msglog/NOTES.md#2025-04-06_snippet_4\n\nLANGUAGE: logtalk\nCODE:\n```\n%%table\ninteger::between(1, 4, N).\n```\n\n----------------------------------------\n\nTITLE: Disabling Debug Messages for Components in Logtalk\nDESCRIPTION: Predicate for disabling all debug and debug(Group) messages for a specified component. This predicate has static compilation flag and accepts a component term as input.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/debug_messages_0.rst.txt#2025-04-06_snippet_1\n\nLANGUAGE: logtalk\nCODE:\n```\ndisable/1\n```\n\n----------------------------------------\n\nTITLE: Asking the Ultimate Question with GUI in Logtalk\nDESCRIPTION: This snippet asks the ultimate question using a GUI dialog if supported by the Prolog backend. It includes a check to skip execution if running as a notebook.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/questions/NOTES.md#2025-04-06_snippet_4\n\nLANGUAGE: logtalk\nCODE:\n```\n(current_object(jupyter) -> true; logtalk::ask_question(question, hitchhikers, ultimate_question, '=='(42), N)).\n```\n\n----------------------------------------\n\nTITLE: Loading the Serialization Example\nDESCRIPTION: Loads the serialization example module in Logtalk using the loader file.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/serialization/NOTES.md#2025-04-06_snippet_1\n\nLANGUAGE: logtalk\nCODE:\n```\nlogtalk_load(serialization(loader)).\n```\n\n----------------------------------------\n\nTITLE: Implementing Type Checking for Custom Types\nDESCRIPTION: Demonstrates how to implement the check/2 predicate for a custom temperature type with validation for different temperature scales.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/userman/errors.rst#2025-04-06_snippet_5\n\nLANGUAGE: logtalk\nCODE:\n```\n:- multifile(type::check/2).\ntype::check(temperature(Unit), Term) :-\n    check_temperature(Unit, Term).\n\n% given that temperature has only a lower bound, we make use of the library\n% property/2 type to define the necessary test expression for each unit\ncheck_temperature(celsius, Term) :-\n    type::check(property(float, [Temperature]>>(Temperature >= -273.15)), Term).\ncheck_temperature(fahrenheit, Term) :-\n    type::check(property(float, [Temperature]>>(Temperature >= -459.67)), Term).\ncheck_temperature(kelvin, Term) :-\n    type::check(property(float, [Temperature]>>(Temperature >= 0.0)), Term).\n```\n\n----------------------------------------\n\nTITLE: Modes and proofs for threaded_call/1-2 in Logtalk\nDESCRIPTION: Defines the calling modes for threaded_call/1-2, specifying that the Goal must be instantiated to a callable term, while Tag is an output variable that will be instantiated. Both forms provide exactly one proof.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/refman/predicates/threaded_call_1_2.rst#2025-04-06_snippet_2\n\nLANGUAGE: prolog\nCODE:\n```\nthreaded_call(@callable) - one\nthreaded_call(@callable, --nonvar) - one\n```\n\n----------------------------------------\n\nTITLE: Syntax Definition for assertz/1 in Logtalk\nDESCRIPTION: Defines the syntax for the assertz/1 method in Logtalk, which can assert either a simple head or a head-body clause as the last clause for a dynamic predicate.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/refman/methods/assertz_1.rst#2025-04-06_snippet_0\n\nLANGUAGE: prolog\nCODE:\n```\nassertz(Head)\nasssertz((Head:-Body))\n```\n\n----------------------------------------\n\nTITLE: Querying Queue Head Element\nDESCRIPTION: Example of creating a queue, adding an element, and querying the head using head/2 predicate.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/libraries/queues.rst.txt#2025-04-06_snippet_4\n\nLANGUAGE: logtalk\nCODE:\n```\n| ?- queue::(new(Queue0), join(1, Queue0, Queue1), head(Queue1, Head)).\nQueue0 = ...,\nQueue1 = ...,\nHead = 1\nyes\n```\n\n----------------------------------------\n\nTITLE: Setting Context Breakpoints in Logtalk\nDESCRIPTION: Sets a context breakpoint.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/debuggerp_0.rst.txt#2025-04-06_snippet_15\n\nLANGUAGE: Logtalk\nCODE:\n```\nspy/4\n```\n\n----------------------------------------\n\nTITLE: Querying Age from Viewpoint\nDESCRIPTION: Shows how to query the age property through a viewpoint (joe_sportsman).\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/viewpoints/NOTES.md#2025-04-06_snippet_2\n\nLANGUAGE: logtalk\nCODE:\n```\njoe_sportsman::age(Age).\n```\n\n----------------------------------------\n\nTITLE: Generating Custom Character Code List Identifier in Logtalk\nDESCRIPTION: This snippet shows how to generate an identifier represented by a list of character codes using 64 bits (8 bytes) of randomness.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/library/ids/NOTES.md#2025-04-06_snippet_5\n\nLANGUAGE: prolog\nCODE:\n```\n| ?- ids(codes, 8)::generate(Identifier).\nIdentifier = [111,81,86,55,99,79,70,77,65,74,103,61]\nyes\n```\n\n----------------------------------------\n\nTITLE: Finding Unique Elements in a List with EDCG (Single Element)\nDESCRIPTION: Uses the unique object to find the set of unique elements in a list containing a single element.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/edcgs/NOTES.md#2025-04-06_snippet_6\n\nLANGUAGE: logtalk\nCODE:\n```\nunique::unique([a], Unique).\n```\n\n----------------------------------------\n\nTITLE: Running Packs Tool Tests\nDESCRIPTION: Logtalk query to run the test suite for the packs management tool.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/tools/packs/NOTES.md#2025-04-06_snippet_6\n\nLANGUAGE: prolog\nCODE:\n```\n| ?- logtalk_load(packs(tester)).\n```\n\n----------------------------------------\n\nTITLE: GitHub Authentication Example\nDESCRIPTION: Installing a package using GitHub authentication with a personal access token\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/devtools/packs.rst#2025-04-06_snippet_25\n\nLANGUAGE: logtalk\nCODE:\n```\n| ?- packs::install(reg, bar, 1:1:2, [curl('--header \"Authorization: token foo42\"')]).\n```\n\n----------------------------------------\n\nTITLE: Sorting a List with Key and Order in Logtalk\nDESCRIPTION: Sorts a list using a specified key and order, with options for removing or keeping duplicates and sorting in ascending or descending order.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/listp_0.rst.txt#2025-04-06_snippet_20\n\nLANGUAGE: Logtalk\nCODE:\n```\nsort(Key,Order,List,Sorted)\n```\n\n----------------------------------------\n\nTITLE: Set Counter Value Predicate\nDESCRIPTION: Public predicate that sets the counter to a specified numeric value. Takes a number as input parameter. Uses static compilation flag and returns one proof.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/counter_0.rst.txt#2025-04-06_snippet_2\n\nLANGUAGE: logtalk\nCODE:\n```\nset(+number)\n```\n\n----------------------------------------\n\nTITLE: Delegation with Implementing Delegate\nDESCRIPTION: Demonstrates delegation when the delegate implements the required predicate.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/delegates/NOTES.md#2025-04-06_snippet_4\n\nLANGUAGE: logtalk\nCODE:\n```\na_delegator::set_delegate(a_delegate), a_delegator::operation(String).\n```\n\n----------------------------------------\n\nTITLE: Loading Observer Pattern Implementation\nDESCRIPTION: Loads the Observer design pattern implementation from the behavioral patterns directory.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/design_patterns/behavioral/observer/NOTES.md#2025-04-06_snippet_1\n\nLANGUAGE: logtalk\nCODE:\n```\nlogtalk_load(design_patterns('behavioral/observer/loader')).\n```\n\n----------------------------------------\n\nTITLE: Defining a Protocol that Extends Other Protocols in Logtalk\nDESCRIPTION: Shows how to define a protocol that extends one or more existing protocols. This allows for creating more specialized protocols that inherit declarations from parent protocols.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/userman/protocols.rst#2025-04-06_snippet_1\n\nLANGUAGE: logtalk\nCODE:\n```\n:- protocol(Protocol,\n    extends([Protocol1, Protocol2, ...])).\n    ...\n:- end_protocol.\n```\n\n----------------------------------------\n\nTITLE: Getting Current Branch Name Using branch/2\nDESCRIPTION: Example query showing how to retrieve the name of the current local branch in a git repository.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/library/git/NOTES.md#2025-04-06_snippet_5\n\nLANGUAGE: Prolog\nCODE:\n```\n| ?- git::branch('/Users/pmoura/Documents/Logtalk/logtalk3', Branch).\n\nBranch = master\nyes\n```\n\n----------------------------------------\n\nTITLE: Predicate Modes and Proofs - Logtalk\nDESCRIPTION: Defines the calling modes and number of proofs for the threaded_call predicate variants.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/refman/predicates/threaded_call_1_2.rst.txt#2025-04-06_snippet_2\n\nLANGUAGE: prolog\nCODE:\n```\nthreaded_call(@callable) - one\nthreaded_call(@callable, --nonvar) - one\n```\n\n----------------------------------------\n\nTITLE: Defining Meta-predicate Template for ask_question/5 in Logtalk\nDESCRIPTION: Specifies the meta-predicate template for ask_question/5, indicating that the fourth argument is a meta-argument (closure) that will be called with one additional argument.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/refman/methods/ask_question_5.rst.txt#2025-04-06_snippet_2\n\nLANGUAGE: Logtalk\nCODE:\n```\nask_question(*, *, *, 1, *)\n```\n\n----------------------------------------\n\nTITLE: Running Profiled Query\nDESCRIPTION: Executes a test query that will be profiled involving missionaries and cannibals problem solving\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/tools/ports_profiler/SCRIPT.txt#2025-04-06_snippet_3\n\nLANGUAGE: logtalk\nCODE:\n```\n| ?- miss_cann::initial_state(Initial), hill_climbing(16)::solve(miss_cann, Initial, Path, Cost), miss_cann::print_path(Path).\n```\n\n----------------------------------------\n\nTITLE: Check Logging Status Predicate - logging/1\nDESCRIPTION: Predicate that succeeds if logging is enabled for the specified file alias.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/loggingp_0.rst.txt#2025-04-06_snippet_4\n\nLANGUAGE: logtalk\nCODE:\n```\nlogging(+atom)\n```\n\n----------------------------------------\n\nTITLE: Checking Existence of Specific Engine in Prolog\nDESCRIPTION: This example demonstrates how to check if a specific engine named 'worker_1' exists using the threaded_engine/1 predicate.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/refman/predicates/threaded_engine_1.rst.txt#2025-04-06_snippet_1\n\nLANGUAGE: Prolog\nCODE:\n```\n| ?- threaded_engine(worker_1).\n```\n\n----------------------------------------\n\nTITLE: Loading Visitor Pattern Implementation\nDESCRIPTION: Loads the visitor design pattern sample implementation from the design patterns directory.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/design_patterns/behavioral/visitor/NOTES.md#2025-04-06_snippet_0\n\nLANGUAGE: logtalk\nCODE:\n```\nlogtalk_load(design_patterns('behavioral/visitor/loader')).\n```\n\n----------------------------------------\n\nTITLE: Creating SWI-Prolog QLF Files with Bash Script\nDESCRIPTION: Bash shell script for POSIX systems that creates Logtalk QLF files. The script generates a logtalk.qlf file with the Logtalk compiler and runtime, and an optional application.qlf file.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/scripts/embedding/swipl/NOTES.md#2025-04-06_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nswipl_logtalk_qlf.sh\n```\n\n----------------------------------------\n\nTITLE: Defining a counter in Logtalk\nDESCRIPTION: Predicate that associates a named counter with its integer value. This can be used to check if a counter exists and retrieve its current value.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/counters_0.rst.txt#2025-04-06_snippet_0\n\nLANGUAGE: Logtalk\nCODE:\n```\ncounter(Counter,Value)\n```\n\n----------------------------------------\n\nTITLE: Checking Versions in Logtalk\nDESCRIPTION: Print Logtalk, Prolog backend, and kernel versions when running as a notebook\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/encodings/NOTES.md#2025-04-06_snippet_0\n\nLANGUAGE: logtalk\nCODE:\n```\n%versions\n```\n\n----------------------------------------\n\nTITLE: Testing public goal expansion\nDESCRIPTION: Demonstrates goal expansion using a public predicate in the exp_public object.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/expansion/NOTES.md#2025-04-06_snippet_3\n\nLANGUAGE: logtalk\nCODE:\n```\nexp_public::expand_goal(write(Term), EGoal).\n```\n\n----------------------------------------\n\nTITLE: Alternative Make Integration in Test Object\nDESCRIPTION: Alternative way to integrate tests with make system inside the test object.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/devtools/lgtunit.rst#2025-04-06_snippet_6\n\nLANGUAGE: logtalk\nCODE:\n```\n:- object(tests, extends(lgtunit)).\n\n    make(check).\n    ...\n\n:- end_object.\n```\n\n----------------------------------------\n\nTITLE: Threaded Engine Destroy Examples\nDESCRIPTION: Example usage showing how to stop a single engine and how to stop all running engines using forall/2.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/refman/predicates/threaded_engine_destroy_1.rst#2025-04-06_snippet_2\n\nLANGUAGE: prolog\nCODE:\n```\n% stop the worker_1 engine:\n| ?- threaded_engine_destroy(worker_1).\n\n% stop all engines:\n| ?- forall(\n    threaded_engine(Engine),\n    threaded_engine_destroy(Engine)\n).\n```\n\n----------------------------------------\n\nTITLE: Message Sending Syntax in Logtalk\nDESCRIPTION: Basic syntax for sending a message to self using the (::)/1 operator.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/refman/control/send_to_self_1.rst.txt#2025-04-06_snippet_0\n\nLANGUAGE: logtalk\nCODE:\n```\n::Message\n```\n\n----------------------------------------\n\nTITLE: Private Import of Listing Category\nDESCRIPTION: Example of an object importing the listing category with private scope and using it for debugging.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/library/listing/NOTES.md#2025-04-06_snippet_2\n\nLANGUAGE: logtalk\nCODE:\n```\n:- object(data_store,\n\t\timports(private::listing)).\n\n\t\tdebug :-\n\t\t\t^^listing(data/4).\n\t\t...\n\n\t:- end_object.\n```\n\n----------------------------------------\n\nTITLE: Finding the Longest Hailstone Sequence in a Range in Logtalk\nDESCRIPTION: Identifies the number between 1 and 100000 that produces the longest Hailstone sequence, returning both the number and the length of its sequence.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/hailstone/NOTES.md#2025-04-06_snippet_5\n\nLANGUAGE: logtalk\nCODE:\n```\nhailstone::longest_sequence(1, 100000, N, Length).\n```\n\n----------------------------------------\n\nTITLE: Format to Character Codes List Predicate (3-arg)\nDESCRIPTION: Writes formatted output to a list of character codes using a format string and arguments list. Shorthand version that uses empty tail list.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/term_io_protocol_0.rst.txt#2025-04-06_snippet_9\n\nLANGUAGE: logtalk\nCODE:\n```\nformat_to_codes(Format,Arguments,Codes)\n```\n\n----------------------------------------\n\nTITLE: SHA256Sum Command Detection (Logtalk)\nDESCRIPTION: Predicate that returns the appropriate sha256sum command name for POSIX systems. Fails if neither gsha256sum nor sha256sum commands are available.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/packs_common_0.rst.txt#2025-04-06_snippet_6\n\nLANGUAGE: logtalk\nCODE:\n```\nsha256sum_command(-atom)\n```\n\n----------------------------------------\n\nTITLE: Defining a Protocol that Extends Other Protocols in Logtalk\nDESCRIPTION: Shows how to define a protocol that extends one or more existing protocols. This allows for creating more specialized protocols that inherit declarations from parent protocols.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/userman/protocols.rst#2025-04-06_snippet_1\n\nLANGUAGE: logtalk\nCODE:\n```\n:- protocol(Protocol,\n    extends([Protocol1, Protocol2, ...])).\n    ...\n:- end_protocol.\n```\n\n----------------------------------------\n\nTITLE: Pattern for Calling Inherited Predicates in Logtalk\nDESCRIPTION: Illustrates a common pattern for calling inherited predicate definitions when redefining a predicate, allowing for additional functionality before and after the inherited behavior.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/userman/messages.rst#2025-04-06_snippet_6\n\nLANGUAGE: Logtalk\nCODE:\n```\nPredicate :-\n    ...,            % do something\n    ^^Predicate,    % call inherited definition\n    ... .           % do something more\n```\n\n----------------------------------------\n\nTITLE: Displaying Filtered Profiling Data\nDESCRIPTION: Demonstrates how to display profiling information for a specific entity by filtering the results.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/tools/profiler/SCRIPT.txt#2025-04-06_snippet_5\n\nLANGUAGE: logtalk\nCODE:\n```\n| ?- profiler::data(salt(_,_,_)).\n```\n\n----------------------------------------\n\nTITLE: Loading Logtalk Logging Library\nDESCRIPTION: Command to load all entities in the logging library using the loader utility file. This needs to be executed in a Logtalk/Prolog interpreter prompt.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/libraries/logging.rst.txt#2025-04-06_snippet_0\n\nLANGUAGE: logtalk\nCODE:\n```\n| ?- logtalk_load(logging(loader)).\n```\n\n----------------------------------------\n\nTITLE: Logtalk Make Predicate Declaration\nDESCRIPTION: Basic predicate declaration showing the syntax for the logtalk_make/0 predicate.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/refman/predicates/logtalk_make_0.rst.txt#2025-04-06_snippet_0\n\nLANGUAGE: logtalk\nCODE:\n```\nlogtalk_make\n```\n\n----------------------------------------\n\nTITLE: Executing Backtracking Nodes Example in Logtalk\nDESCRIPTION: Runs the backtracking nodes example with three nodes (n(1), n(2), n(3)). Uses bagof/3 to collect all nodes into a list L, demonstrating the spreading activation mechanism.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/ncl/backtracking_nodes/NOTES.md#2025-04-06_snippet_2\n\nLANGUAGE: logtalk\nCODE:\n```\nbacktracking(X,Y,Z)::(n(2), n(1), n(3)), bagof(E, backtracking(X,Y,Z)::n(E), L).\n```\n\n----------------------------------------\n\nTITLE: Testing List Length with Stop Watch in Logtalk\nDESCRIPTION: Sends a message to the list object to calculate the length of a list, which will be timed by the stop_watch monitor.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/profiling/NOTES.md#2025-04-06_snippet_11\n\nLANGUAGE: logtalk\nCODE:\n```\nlist::length([1, 2, 3], Length).\n```\n\n----------------------------------------\n\nTITLE: Defining Prototype Extensions in Logtalk\nDESCRIPTION: Syntax for defining prototype extensions with optional protocol implementation and category imports.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/refman/directives/object_1_5.rst.txt#2025-04-06_snippet_1\n\nLANGUAGE: logtalk\nCODE:\n```\nobject(Object,\n    extends(Objects))\n\nobject(Object,\n    implements(Protocols),\n    extends(Objects))\n\nobject(Object,\n    imports(Categories),\n    extends(Objects))\n\nobject(Object,\n    implements(Protocols),\n    imports(Categories),\n    extends(Objects))\n```\n\n----------------------------------------\n\nTITLE: Loading Philosophers Example\nDESCRIPTION: Loads the philosophers example and required library files\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/threads/philosophers/NOTES.md#2025-04-06_snippet_1\n\nLANGUAGE: logtalk\nCODE:\n```\nlogtalk_load(philosophers(loader)).\n```\n\n----------------------------------------\n\nTITLE: Loading the IDs Library in Logtalk\nDESCRIPTION: This snippet demonstrates how to load all entities in the 'ids' library using the loader file.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/library/ids/NOTES.md#2025-04-06_snippet_0\n\nLANGUAGE: prolog\nCODE:\n```\n| ?- logtalk_load(ids(loader)).\n```\n\n----------------------------------------\n\nTITLE: Verifying Test Conditions in Logtalk\nDESCRIPTION: Checks conditions for running tests. Defaults to true if not defined.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/lgtunit_0.rst.txt#2025-04-06_snippet_30\n\nLANGUAGE: logtalk\nCODE:\n```\ncondition\n```\n\n----------------------------------------\n\nTITLE: Enabling Objects to Make Multi-threading Calls with the threaded Directive in Logtalk\nDESCRIPTION: Shows how to use the threaded directive to enable an object to make multi-threading calls in Logtalk. This directive must be included in the object's scope to allow it to use threading capabilities.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/userman/threads.rst.txt#2025-04-06_snippet_0\n\nLANGUAGE: logtalk\nCODE:\n```\n:- threaded.\n```\n\n----------------------------------------\n\nTITLE: Loading Buffer Example\nDESCRIPTION: Loads the buffer example and required library files.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/threads/buffer/NOTES.md#2025-04-06_snippet_0\n\nLANGUAGE: logtalk\nCODE:\n```\nlogtalk_load(buffer(loader)).\n```\n\n----------------------------------------\n\nTITLE: Clean Text Output Files in Logtalk\nDESCRIPTION: Cleans up the temporary file used when testing text output. Should be called after completing text output tests to remove any temporary files created during testing.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/lgtunit_0.rst.txt#2025-04-06_snippet_53\n\nLANGUAGE: logtalk\nCODE:\n```\nclean_text_output\n```\n\n----------------------------------------\n\nTITLE: Referencing Logtalk Make Predicates in ReStructuredText\nDESCRIPTION: This snippet demonstrates how to create hyperlinks to the Logtalk make predicate documentation using ReStructuredText syntax. It includes links for logtalk_make/0, logtalk_make/1, and logtalk_make_target_action/1 predicates.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/devtools/make.rst#2025-04-06_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n- `../refman/predicates/logtalk_make_0.html <../refman/predicates/logtalk_make_0.html>`__\n- `../refman/predicates/logtalk_make_1.html <../refman/predicates/logtalk_make_1.html>`__\n- `../refman/predicates/logtalk_make_target_action_1.html <../refman/predicates/logtalk_make_target_action_1.html>`__\n```\n\n----------------------------------------\n\nTITLE: Checking Versions\nDESCRIPTION: Prints the versions of Logtalk, Prolog backend, and kernel if running in a notebook environment.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/futures/NOTES.md#2025-04-06_snippet_0\n\nLANGUAGE: logtalk\nCODE:\n```\n%versions\n```\n\n----------------------------------------\n\nTITLE: Loading Prolog Module in Logtalk\nDESCRIPTION: Loads a Prolog module with source data enabled for analysis.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/devtools/code_metrics.rst.txt#2025-04-06_snippet_5\n\nLANGUAGE: prolog\nCODE:\n```\n| ?- logtalk_load(module, [source_data(on)]).\n```\n\n----------------------------------------\n\nTITLE: Include Directive Usage Examples\nDESCRIPTION: Demonstrates various ways to use the include directive with different file path specifications including library notation, relative paths, and absolute paths.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/refman/directives/include_1.rst#2025-04-06_snippet_2\n\nLANGUAGE: logtalk\nCODE:\n```\n% include the \"raw_1.txt\" text file found\n% on the \"data\" library directory:\n:- include(data('raw_1.txt')).\n\n% include a \"factbase.pl\" file in the same directory\n% of the source file containing the directive:\n:- include('factbase.pl').\n\n% include a file given its absolute path:\n:- include('/home/me/databases/countries.pl').\n\n% create a wrapper object for a Prolog file using\n% library notation to define the file path:\n| ?- create_object(cities, [], [public(city/4), include(geo('cities.pl'))], []).\n```\n\n----------------------------------------\n\nTITLE: Tracing Object Messages in Logtalk\nDESCRIPTION: Shows the output of tracing a message sent to the 'any' object after enabling event tracing.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/userman/events.rst.txt#2025-04-06_snippet_8\n\nLANGUAGE: Prolog\nCODE:\n```\n| ?- any::bar(X).\n\ncall: any <-- bar(X) from user\nexit: any <-- bar(bar) from user\nX = bar\n\nyes\n```\n\n----------------------------------------\n\nTITLE: Loading Zippers Library in Logtalk\nDESCRIPTION: This snippet demonstrates how to load all entities in the 'zippers' library using the loader.lgt file. It uses the logtalk_load/1 predicate to load the library.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/libraries/zippers.rst.txt#2025-04-06_snippet_0\n\nLANGUAGE: Logtalk\nCODE:\n```\n| ?- logtalk_load(zippers(loader)).\n```\n\n----------------------------------------\n\nTITLE: Set Protocol Predicate Templates\nDESCRIPTION: Template definitions for the core set operation predicates including modes and proof counts.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/setp_0.rst.txt#2025-04-06_snippet_0\n\nLANGUAGE: prolog\nCODE:\n```\nas_set(@list,-set)\nas_list(@set,-list)\ndelete(+set,@term,?set)\ndisjoint(+set,+set)\nequal(+set,+set)\nempty(+set)\ninsert(+set,+term,?set)\ninsert_all(+list,+set,?set)\nintersect(+set,+set)\nintersection(+set,+set,?set)\nintersection(+set,+set,?set,?set)\nsize(+set,?integer)\nmember(+term,+set)\nmemberchk(+term,+set)\npowerset(+set,-list)\nproduct(+set,+set,-set)\nselect(?term,+set,?set)\nselectchk(?term,+set,?set)\nsubset(+set,+set)\nsubtract(+set,+set,?set)\nsymdiff(+set,+set,?set)\nunion(+set,+set,?set)\nunion(+set,+set,?set,?set)\n```\n\n----------------------------------------\n\nTITLE: Changing Strategy at Runtime\nDESCRIPTION: Changes the billing strategy from normal to happy hour and adds another item to the first customer's bill.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/design_patterns/behavioral/strategy/NOTES.md#2025-04-06_snippet_4\n\nLANGUAGE: logtalk\nCODE:\n```\nfirst::(set_strategy(happy_hour_strategy), add(1.0, 2)).\n```\n\n----------------------------------------\n\nTITLE: Querying Agent Age\nDESCRIPTION: Queries the current age of the Nathalie agent.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/threads/birthdays/NOTES.md#2025-04-06_snippet_5\n\nLANGUAGE: logtalk\nCODE:\n```\nnathalie::age(Age).\n```\n\n----------------------------------------\n\nTITLE: Stopping Debug Mode in Logtalk\nDESCRIPTION: Example of stopping debug mode using the debugger::nodebug predicate, which disables the debugger but doesn't remove any defined breakpoints or log points.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/userman/debugging.rst.txt#2025-04-06_snippet_24\n\nLANGUAGE: text\nCODE:\n```\n| ?- debugger::nodebug.\n\nyes\n```\n\n----------------------------------------\n\nTITLE: Wrapping Prolog File as Logtalk Object\nDESCRIPTION: Shows various ways to use object_wrapper_hook to wrap a plain Prolog file as a Logtalk object, optionally implementing a protocol or with specific object relations.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/library/hook_objects/NOTES.md#2025-04-06_snippet_6\n\nLANGUAGE: Logtalk\nCODE:\n```\n| ?- logtalk_load('plain.pl', [hook(object_wrapper_hook)]).\n```\n\nLANGUAGE: Logtalk\nCODE:\n```\n| ?- logtalk_load('world_1.pl', [hook(object_wrapper_hook(some_protocol))]).\n```\n\nLANGUAGE: Logtalk\nCODE:\n```\n| ?- logtalk_load('foo.pl', [hook(object_wrapper_hook(bar,[imports(some_category)])).\n```\n\n----------------------------------------\n\nTITLE: Loading XHTML 1.1 Generation Object in Logtalk\nDESCRIPTION: This snippet shows how to load the 'xhtml11' object in Logtalk. It requires the html loader to be loaded first.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/xhtml11_0.rst.txt#2025-04-06_snippet_0\n\nLANGUAGE: Logtalk\nCODE:\n```\nlogtalk_load(html(loader))\n```\n\n----------------------------------------\n\nTITLE: Creating an Instance of the Root Object\nDESCRIPTION: Creates an instance 'j' of the root object and displays its interface.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/reflection/NOTES.md#2025-04-06_snippet_9\n\nLANGUAGE: logtalk\nCODE:\n```\nobject::new(j), j::print.\n```\n\n----------------------------------------\n\nTITLE: Setting a Monitor for Events in Logtalk\nDESCRIPTION: The set_monitor/4 predicate registers a monitor for matching events. It establishes a monitoring relationship where the Monitor object will be notified of events matching the specified Object, Message, and Sender pattern.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/event_registryp_0.rst.txt#2025-04-06_snippet_4\n\nLANGUAGE: logtalk\nCODE:\n```\nset_monitor(Object,Message,Sender,Monitor)\n```\n\n----------------------------------------\n\nTITLE: Mode declaration for asserta/1 in Logtalk\nDESCRIPTION: Specifies the mode and number of proofs for the asserta/1 method. It accepts a clause as input and provides one proof.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/refman/methods/asserta_1.rst#2025-04-06_snippet_1\n\nLANGUAGE: logtalk\nCODE:\n```\nasserta(+clause) - one\n```\n\n----------------------------------------\n\nTITLE: Threaded Engine Destroy Usage Mode\nDESCRIPTION: Specification of the predicate's usage mode, indicating it takes a non-variable argument and provides one proof.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/refman/predicates/threaded_engine_destroy_1.rst#2025-04-06_snippet_1\n\nLANGUAGE: prolog\nCODE:\n```\nthreaded_engine_destroy(@nonvar) - one\n```\n\n----------------------------------------\n\nTITLE: Benchmark Deterministic Engine Destruction\nDESCRIPTION: Destroys 2000 engines and measures performance.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/engines/ebench/NOTES.md#2025-04-06_snippet_3\n\nLANGUAGE: logtalk\nCODE:\n```\ntime((between(1,2000,I),atom_number(A,I),threaded_engine_destroy(A),fail)).\n```\n\n----------------------------------------\n\nTITLE: Text Entry Dialog Example\nDESCRIPTION: Shows JOptionPane text entry dialog integration, skipped if running in Jupyter\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/jpl/NOTES.md#2025-04-06_snippet_9\n\nLANGUAGE: logtalk\nCODE:\n```\n(current_object(jupyter) -> true; text_entry::text(Text)).\n```\n\n----------------------------------------\n\nTITLE: Creating Logtalk Flag Predicate Signature\nDESCRIPTION: Defines the predicate signature for creating new Logtalk flags with value and options parameters.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/refman/predicates/create_logtalk_flag_3.rst.txt#2025-04-06_snippet_0\n\nLANGUAGE: prolog\nCODE:\n```\ncreate_logtalk_flag(Flag, Value, Options)\n```\n\n----------------------------------------\n\nTITLE: Logtalk Load Predicate Signature\nDESCRIPTION: Core predicate signature showing the two supported argument patterns - single file or list of files with compiler flags.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/refman/predicates/logtalk_load_2.rst#2025-04-06_snippet_0\n\nLANGUAGE: logtalk\nCODE:\n```\nlogtalk_load(File, Flags)\nlogtalk_load(Files, Flags)\n```\n\n----------------------------------------\n\nTITLE: Loading Attributed Variables Module\nDESCRIPTION: Loads the attributed variables example and required library files using the loader.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/attvars/NOTES.md#2025-04-06_snippet_1\n\nLANGUAGE: logtalk\nCODE:\n```\nlogtalk_load(attvars(loader)).\n```\n\n----------------------------------------\n\nTITLE: Getting Day Names in Logtalk\nDESCRIPTION: Defines the 'name_of_day/3' predicate that associates day indexes with their full and abbreviated names. It can be used to convert between numeric day representation and textual names.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/datep_0.rst.txt#2025-04-06_snippet_2\n\nLANGUAGE: Logtalk\nCODE:\n```\nname_of_day(Index,Name,Short)\n```\n\n----------------------------------------\n\nTITLE: Removing Context Breakpoints in Logtalk\nDESCRIPTION: Example of removing all context breakpoints where the value of self is the atom 'foo', using the debugger's nospy/4 predicate.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/userman/debugging.rst.txt#2025-04-06_snippet_15\n\nLANGUAGE: text\nCODE:\n```\n| ?- debugger::nospy(_, _, foo, _).\n\nAll matching context breakpoints removed.\nyes\n```\n\n----------------------------------------\n\nTITLE: Loading the Trebuchet Module in Logtalk\nDESCRIPTION: Loads the trebuchet module using the Logtalk loader system, making its predicates available for solving the problem.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/trebuchet/NOTES.md#2025-04-06_snippet_1\n\nLANGUAGE: logtalk\nCODE:\n```\nlogtalk_load(trebuchet(loader)).\n```\n\n----------------------------------------\n\nTITLE: Generating Null UUID\nDESCRIPTION: Shows how to generate a null UUID (all zeros).\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/libraries/uuid.rst#2025-04-06_snippet_8\n\nLANGUAGE: logtalk\nCODE:\n```\n| ?- uuid::uuid_null(UUID).\nUUID = '00000000-0000-0000-0000-000000000000'\nyes\n```\n\n----------------------------------------\n\nTITLE: Loading Git Library in Logtalk\nDESCRIPTION: Demonstrates how to load all entities in the git library using the loader.lgt file.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/libraries/git.rst#2025-04-06_snippet_0\n\nLANGUAGE: prolog\nCODE:\n```\n| ?- logtalk_load(git(loader)).\n```\n\n----------------------------------------\n\nTITLE: Resetting Profiling Data for a Specific Entity in Logtalk\nDESCRIPTION: Demonstrates how to reset profiling data for a specific entity.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/devtools/ports_profiler.rst.txt#2025-04-06_snippet_8\n\nLANGUAGE: Prolog\nCODE:\n```\n| ?- ports_profiler::reset(Entity).\n```\n\n----------------------------------------\n\nTITLE: Output Category Definition Example\nDESCRIPTION: Example of defining a simple category with a public output predicate.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/userman/categories.rst.txt#2025-04-06_snippet_21\n\nLANGUAGE: logtalk\nCODE:\n```\n:- category(output).\n\n    :- public(out/1).\n\n    out(X) :-\n        write(X), nl.\n\n:- end_category.\n```\n\n----------------------------------------\n\nTITLE: Checking Versions in Logtalk Notebook\nDESCRIPTION: A command to print the versions of Logtalk, the Prolog backend, and the kernel when running in a Jupyter notebook environment.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/edcgs/NOTES.md#2025-04-06_snippet_0\n\nLANGUAGE: logtalk\nCODE:\n```\n%versions\n```\n\n----------------------------------------\n\nTITLE: Defining a Basic List Protocol in Logtalk\nDESCRIPTION: Creation of a 'listp' protocol that defines the interface for list operations. This protocol declares the public predicates that implementing objects must provide.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/tutorial/lists.rst.txt#2025-04-06_snippet_4\n\nLANGUAGE: logtalk\nCODE:\n```\n:- protocol(listp).\n\n    :- public([\n        append/3, length/2, member/2\n    ]).\n\n:- end_protocol.\n```\n\n----------------------------------------\n\nTITLE: Querying a_time Object for Day Property via Twin\nDESCRIPTION: Shows message forwarding to the twin object by querying the a_time object for a day property that's actually implemented by its twin (a_date).\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/design_patterns/structural/twin/NOTES.md#2025-04-06_snippet_5\n\nLANGUAGE: logtalk\nCODE:\n```\na_time::day(Day).\n```\n\n----------------------------------------\n\nTITLE: Running Logtalk Tests with Source Code Links\nDESCRIPTION: Shows how to run Logtalk tests using the logtalk_tester script, including options for generating source code links in the report.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/devtools/lgtunit.rst.txt#2025-04-06_snippet_48\n\nLANGUAGE: bash\nCODE:\n```\n$ cd $LOGTALKUSER\n$ logtalk_tester \\\n  -p gnu \\\n  -f xunit \\\n  -s \"$LOGTALKUSER\" \\\n  -u \"https://github.com/LogtalkDotOrg/logtalk3/tree/3e4ea295986fb09d0d4aade1f3b4968e29ef594e\"\n```\n\n----------------------------------------\n\nTITLE: Method Modes and Proofs for assertz/1\nDESCRIPTION: Specifies the mode declaration and number of proofs for the assertz/1 method. It accepts a clause as input and succeeds exactly once.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/refman/methods/assertz_1.rst#2025-04-06_snippet_1\n\nLANGUAGE: prolog\nCODE:\n```\nassertz(+clause) - one\n```\n\n----------------------------------------\n\nTITLE: Type Checking Implementation in Logtalk\nDESCRIPTION: The 'check/2' multifile predicate implements the actual type checking logic and is used to extend the type system. New types can be added by defining clauses for this predicate.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/type_0.rst.txt#2025-04-06_snippet_2\n\nLANGUAGE: Logtalk\nCODE:\n```\ncheck(Type,Term)\n```\n\n----------------------------------------\n\nTITLE: Type Checking Implementation in Logtalk\nDESCRIPTION: The 'check/2' multifile predicate implements the actual type checking logic and is used to extend the type system. New types can be added by defining clauses for this predicate.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/type_0.rst.txt#2025-04-06_snippet_2\n\nLANGUAGE: Logtalk\nCODE:\n```\ncheck(Type,Term)\n```\n\n----------------------------------------\n\nTITLE: Local Development Pack Version\nDESCRIPTION: Example of defining a pack version for local development using a file system path\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/devtools/packs.rst.txt#2025-04-06_snippet_24\n\nLANGUAGE: prolog\nCODE:\n```\nversion(\n    0:11:0,\n    beta,\n    'file:///home/jdoe/work/my_awesome_library',\n    none,\n    [],\n    all\n).\n```\n\n----------------------------------------\n\nTITLE: Restoring Objects from File\nDESCRIPTION: Uses the serializer object to restore the previously saved objects from the 'abc_objects' file.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/serialization/NOTES.md#2025-04-06_snippet_6\n\nLANGUAGE: logtalk\nCODE:\n```\nserializer::restore(abc_objects).\n```\n\n----------------------------------------\n\nTITLE: Testing Type Validity in Logtalk\nDESCRIPTION: Shows how to use the type::valid/2 predicate to test if a value matches a specified type without generating errors.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/userman/errors.rst#2025-04-06_snippet_6\n\nLANGUAGE: logtalk\nCODE:\n```\n..., type::valid(temperature(celsius), 42.0), ...\n```\n\n----------------------------------------\n\nTITLE: Defining from_generator/3 Predicate in Logtalk\nDESCRIPTION: Constructs optional terms with the values generated by calling the given goal. On goal error or failure, returns an empty optional. Can return one or more proofs based on the generator.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/optional_0.rst.txt#2025-04-06_snippet_4\n\nLANGUAGE: Logtalk\nCODE:\n```\nfrom_generator(Goal,Value,Optional)\n```\n\n----------------------------------------\n\nTITLE: Extension Query Predicate\nDESCRIPTION: Returns all direct descendants of an object through backtracking. Takes an Extension parameter of type object.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/proto_hierarchyp_0.rst.txt#2025-04-06_snippet_2\n\nLANGUAGE: logtalk\nCODE:\n```\nextension(?object)\n```\n\n----------------------------------------\n\nTITLE: Loading Constraint Examples\nDESCRIPTION: Loads the B-Prolog constraint programming examples\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/constraints/bp/NOTES.md#2025-04-06_snippet_1\n\nLANGUAGE: logtalk\nCODE:\n```\nlogtalk_load(clp_bp(loader)).\n```\n\n----------------------------------------\n\nTITLE: Querying Recipe Ingredients in Logtalk\nDESCRIPTION: Queries the green_soup object for its list of ingredients using object messaging syntax.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/recipes/NOTES.md#2025-04-06_snippet_2\n\nLANGUAGE: logtalk\nCODE:\n```\ngreen_soup::ingredients(Ingredients).\n```\n\n----------------------------------------\n\nTITLE: Natural Language Parsing with Grammar Rules in Logtalk\nDESCRIPTION: Defines an object that processes natural language sentences using grammar rules, showing how to call imported grammar rules from categories with the :: message operator.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/userman/predicates.rst.txt#2025-04-06_snippet_38\n\nLANGUAGE: logtalk\nCODE:\n```\n:- object(sentence,\n    imports(determiners, nouns, verbs)).\n\n    :- public(parse/2).\n\n    parse(List, true) :-\n        phrase(sentence, List).\n    parse(_, false).\n\n    sentence --> noun_phrase, verb_phrase.\n\n    noun_phrase --> ::determiner, ::noun.\n    noun_phrase --> ::noun.\n\n    verb_phrase --> ::verb.\n    verb_phrase --> ::verb, noun_phrase.\n\n:- end_object.\n```\n\n----------------------------------------\n\nTITLE: Predicate Info Declaration in Logtalk\nDESCRIPTION: Dynamic predicate that declares predicates with hidden parameters. Takes predicate name, arity and list of hidden parameters as arguments.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/edcg_0.rst.txt#2025-04-06_snippet_0\n\nLANGUAGE: Logtalk\nCODE:\n```\npred_info(?atom,?integer,?list(atom))\n```\n\n----------------------------------------\n\nTITLE: Using partition/3 predicate in Logtalk\nDESCRIPTION: Retrieves and partitions the values and errors held by the expected terms. Takes a list of expected terms and unifies the second and third arguments with lists of values and errors respectively.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/either_0.rst.txt#2025-04-06_snippet_2\n\nLANGUAGE: logtalk\nCODE:\n```\npartition(Expecteds,Values,Errors)\n```\n\n----------------------------------------\n\nTITLE: Processing All Loaded Logtalk Source Code\nDESCRIPTION: Processes all loaded source code using the given options. It has a static compilation flag and accepts a list of options as an argument.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/code_metric_0.rst.txt#2025-04-06_snippet_4\n\nLANGUAGE: Logtalk\nCODE:\n```\nprocess_all(Options)\n```\n\n----------------------------------------\n\nTITLE: Completing the Timetable in Logtalk\nDESCRIPTION: Attempts to create 5 more entries in the timetable, which triggers automated conflict resolution when scheduling conflicts occur, showing teacher and subject swaps to resolve conflicts.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/lpa/timetables/NOTES.md#2025-04-06_snippet_6\n\nLANGUAGE: logtalk\nCODE:\n```\ntimetable::make(5).\n```\n\n----------------------------------------\n\nTITLE: Resolution Steps Counter\nDESCRIPTION: Counts resolution steps for reversing a 30-element list, used for LIPS benchmarking.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/metainterpreters/NOTES.md#2025-04-06_snippet_6\n\nLANGUAGE: logtalk\nCODE:\n```\nlists::steps(reverse([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30],_), Steps).\n```\n\n----------------------------------------\n\nTITLE: Querying a_time Object for Day Property via Twin\nDESCRIPTION: Shows message forwarding to the twin object by querying the a_time object for a day property that's actually implemented by its twin (a_date).\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/design_patterns/structural/twin/NOTES.md#2025-04-06_snippet_5\n\nLANGUAGE: logtalk\nCODE:\n```\na_time::day(Day).\n```\n\n----------------------------------------\n\nTITLE: Using best_of/3 Meta-Predicate\nDESCRIPTION: This snippet demonstrates the use of the best_of/3 meta-predicate to find the largest value returned by the generator a(X).\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/engines/emetas/NOTES.md#2025-04-06_snippet_3\n\nLANGUAGE: logtalk\nCODE:\n```\nemetas::best_of(X, (>), a(X)).\n```\n\n----------------------------------------\n\nTITLE: Creating New Term Instance in Logtalk\nDESCRIPTION: Defines a predicate to create a new term instance if meaningful.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/termp_0.rst.txt#2025-04-06_snippet_2\n\nLANGUAGE: Logtalk\nCODE:\n```\nnew(Term)\n```\n\n----------------------------------------\n\nTITLE: Legacy Prolog Predicate References\nDESCRIPTION: List of legacy Prolog predicates that are now detected and reported by the system: on_exception/3, raise_exception/1, abolish/2, otherwise/0, and prolog_flag/2-3.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/RELEASE_NOTES.md#2025-04-06_snippet_46\n\nLANGUAGE: prolog\nCODE:\n```\non_exception/3, raise_exception/1, abolish/2, otherwise/0, prolog_flag/2-3\n```\n\n----------------------------------------\n\nTITLE: Call Method Syntax Variants\nDESCRIPTION: Shows the different syntax patterns for using the call//1-N method with closures and arguments.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/refman/methods/call_1.rst.txt#2025-04-06_snippet_0\n\nLANGUAGE: prolog\nCODE:\n```\ncall(Closure)\ncall(Closure, Arg1, ...)\ncall(Object::Closure, Arg1, ...)\ncall(::Closure, Arg1, ...)\ncall(^^Closure, Arg1, ...)\n```\n\n----------------------------------------\n\nTITLE: Usage Example of Uninstantiation Error\nDESCRIPTION: Example showing how to check for a variable and throw an uninstantiation error if the condition is not met.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/refman/methods/uninstantiation_error_1.rst.txt#2025-04-06_snippet_2\n\nLANGUAGE: logtalk\nCODE:\n```\n...,\nvar(Handler),\nuninstantiation_error(my_stream).\n```\n\n----------------------------------------\n\nTITLE: Compiled Benchmark Using lgtunit\nDESCRIPTION: Runs a compiled benchmark using lgtunit to ensure accurate timing.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/bench/NOTES.md#2025-04-06_snippet_7\n\nLANGUAGE: logtalk\nCODE:\n```\nlogtalk<<(lgtunit::benchmark(boyer::top,1000,Time)).\n```\n\n----------------------------------------\n\nTITLE: Proper Prefix with Length Checking in Logtalk\nDESCRIPTION: Checks if a list is a proper prefix of a given length of another list.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/listp_0.rst.txt#2025-04-06_snippet_9\n\nLANGUAGE: Logtalk\nCODE:\n```\nproper_prefix(Prefix,Length,List)\n```\n\n----------------------------------------\n\nTITLE: Finite state machine recognition example (unsuccessful)\nDESCRIPTION: This snippet demonstrates using a finite state machine to attempt recognizing a sequence of inputs. The sequence [0,1,1,2,1,2,1,0] is not recognized, resulting in backtracking.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/assign_parameters/NOTES.md#2025-04-06_snippet_4\n\nLANGUAGE: logtalk\nCODE:\n```\n{fsm(T, I, F)}::recognise([0,1,1,2,1,2,1,0]).\n```\n\n----------------------------------------\n\nTITLE: Defining empty/1 Predicate in Logtalk\nDESCRIPTION: Constructs an empty optional term. Takes an output parameter that will be unified with an empty optional term. Returns exactly one proof.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/optional_0.rst.txt#2025-04-06_snippet_0\n\nLANGUAGE: Logtalk\nCODE:\n```\nempty(Optional)\n```\n\n----------------------------------------\n\nTITLE: Implementing Debug Handler Start/Stop Controls in Logtalk\nDESCRIPTION: Shows how to implement public predicates that activate and deactivate a custom debug handler. These predicates provide a clean interface for users to start and stop debugging sessions.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/userman/debugging.rst.txt#2025-04-06_snippet_34\n\nLANGUAGE: prolog\nCODE:\n```\n:- public(start/0).\nstart :-\n   logtalk::activate_debug_handler(my_debug_handler).\n\n:- public(stop/0).\nstop :-\n   logtalk::deactivate_debug_handler.\n```\n\n----------------------------------------\n\nTITLE: Loading Specific Hook Object in Logtalk\nDESCRIPTION: Demonstrates how to load a specific hook object, using backend_adapter_hook as an example.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/library/hook_objects/NOTES.md#2025-04-06_snippet_1\n\nLANGUAGE: Logtalk\nCODE:\n```\n| ?- logtalk_load(hook_objects(backend_adapter_hook)).\n```\n\n----------------------------------------\n\nTITLE: Testing Logtalk Loops Library\nDESCRIPTION: Command to load and run the tests for the loops library using the tester.lgt file.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/library/loops/NOTES.md#2025-04-06_snippet_1\n\nLANGUAGE: prolog\nCODE:\n```\n| ?- logtalk_load(loops(tester)).\n```\n\n----------------------------------------\n\nTITLE: Retrieving Updated Instance Variable Values\nDESCRIPTION: Gets the values of the instance variable for all instances after modifying instance1, showing individual instance state.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/instvars/NOTES.md#2025-04-06_snippet_4\n\nLANGUAGE: logtalk\nCODE:\n```\ninstance1::ivar(Value1), instance2::ivar(Value2), instance3::ivar(Value3).\n```\n\n----------------------------------------\n\nTITLE: Sample query for yield with argument 1\nDESCRIPTION: This query demonstrates the yield operation with argument 1, expected to return a list containing [1].\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/engines/yield/NOTES.md#2025-04-06_snippet_2\n\nLANGUAGE: logtalk\nCODE:\n```\nyield::yield(1, List).\n```\n\n----------------------------------------\n\nTITLE: Float Sequence with Step Predicate\nDESCRIPTION: Generates a list of float numbers between Lower and Upper bounds with specified Step spacing. Returns both the sequence list and its length. Requires Lower <= Upper.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/float_0.rst.txt#2025-04-06_snippet_2\n\nLANGUAGE: prolog\nCODE:\n```\nsequence(Lower,Upper,Step,List,Length)\n```\n\n----------------------------------------\n\nTITLE: Importing Category into Logtalk Object\nDESCRIPTION: Demonstrates how to import a category into an object to reuse its predicates.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/tutorial/attributes.rst#2025-04-06_snippet_2\n\nLANGUAGE: logtalk\nCODE:\n```\n:- object(person,\n    imports(attributes)).\n\n    ...\n\n:- end_object.\n```\n\n----------------------------------------\n\nTITLE: Running Category-based Philosophers Implementation\nDESCRIPTION: Executes five philosophers with 5 meals each and 5-second maximum think/eat times using the category-based implementation\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/threads/philosophers/NOTES.md#2025-04-06_snippet_2\n\nLANGUAGE: logtalk\nCODE:\n```\nthreaded_ignore(p1::run(5, 5)), threaded_ignore(p2::run(5, 5)), threaded_ignore(p3::run(5, 5)), threaded_ignore(p4::run(5, 5)), threaded_ignore(p5::run(5, 5)).\n```\n\n----------------------------------------\n\nTITLE: Displaying Complete Profiling Data\nDESCRIPTION: Shows how to print all collected profiling information after executing the profiled goal.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/tools/profiler/SCRIPT.txt#2025-04-06_snippet_4\n\nLANGUAGE: logtalk\nCODE:\n```\n| ?- profiler::data.\n```\n\n----------------------------------------\n\nTITLE: Predicate Syntax for threaded_ignore/1 in Logtalk\nDESCRIPTION: The syntax definition for the threaded_ignore/1 predicate, which executes a goal asynchronously in a new thread and discards the result.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/refman/predicates/threaded_ignore_1.rst.txt#2025-04-06_snippet_0\n\nLANGUAGE: prolog\nCODE:\n```\nthreaded_ignore(Goal)\n```\n\n----------------------------------------\n\nTITLE: Defining true/0 Method in Prolog\nDESCRIPTION: Defines the true/0 method, which always succeeds. This built-in method is declared as public and can be used as a message to an object. It has one mode and produces one proof.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/refman/methods/true_0.rst.txt#2025-04-06_snippet_0\n\nLANGUAGE: prolog\nCODE:\n```\ntrue\n```\n\nLANGUAGE: prolog\nCODE:\n```\ntrue - one\n```\n\n----------------------------------------\n\nTITLE: Running QuickCheck Tests with Labels\nDESCRIPTION: Example showing how to use the l/1 option to classify generated test cases, providing distribution statistics about the test data.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/tools/lgtunit/NOTES.md#2025-04-06_snippet_12\n\nLANGUAGE: prolog\nCODE:\n```\n| ?- lgtunit::quick_check(integer(+byte), [l(label), n(10000)]).\n% 10000 random tests passed, 0 discarded\n% starting seed: seed(25513,20881,16407)\n% even: 5037/10000 (50.370000%)\n% odd: 4963/10000 (49.630000%)\nyes\n```\n\n----------------------------------------\n\nTITLE: Testing Dynamic Binding - Updated Value\nDESCRIPTION: Tests updated value after assertion to show dynamic binding effect.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/super_calls/NOTES.md#2025-04-06_snippet_7\n\nLANGUAGE: logtalk\nCODE:\n```\nbottom::value(Value).\n```\n\n----------------------------------------\n\nTITLE: Storing Random Generator Seed Values in Logtalk\nDESCRIPTION: Private predicate that stores the current random generator seed values. It takes three integer arguments representing the seed components.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/random_0.rst.txt#2025-04-06_snippet_2\n\nLANGUAGE: Logtalk\nCODE:\n```\nseed_(S0,S1,S2)\n```\n\n----------------------------------------\n\nTITLE: Saving Generated Wrapper Objects with save/1 in Logtalk\nDESCRIPTION: Saves the generated wrapper objects and loader files for all advised Prolog files using specified options. Wrappers are saved in the same directories as the original Prolog files.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/wrapper_0.rst.txt#2025-04-06_snippet_10\n\nLANGUAGE: Logtalk\nCODE:\n```\nsave/1\n```\n\n----------------------------------------\n\nTITLE: Printing Logtalk, Prolog backend, and kernel versions\nDESCRIPTION: Displays version information for Logtalk, the Prolog backend, and the kernel if running as a notebook.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/dynpred/NOTES.md#2025-04-06_snippet_0\n\nLANGUAGE: logtalk\nCODE:\n```\n%versions\n```\n\n----------------------------------------\n\nTITLE: Defining predicate_property/2 Method Signature in Logtalk\nDESCRIPTION: The method signature for predicate_property/2, which enumerates properties of visible object predicates. It takes a predicate specification and a property term as arguments.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/refman/methods/predicate_property_2.rst#2025-04-06_snippet_0\n\nLANGUAGE: logtalk\nCODE:\n```\npredicate_property(Predicate, Property)\n```\n\n----------------------------------------\n\nTITLE: Setting Up Profiler in Logtalk\nDESCRIPTION: Demonstrates how to set up the stop_watch profiler to monitor all messages sent to a specific object using the define_events/5 predicate.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/tutorial/profiling.rst.txt#2025-04-06_snippet_4\n\nLANGUAGE: logtalk\nCODE:\n```\n| ?- define_events(_, foo, _, _, stop_watch).\n\nyes\n```\n\n----------------------------------------\n\nTITLE: Sorting a List with Custom Comparison in Logtalk\nDESCRIPTION: Sorts a list using a user-specified comparison predicate, removing duplicates.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/listp_0.rst.txt#2025-04-06_snippet_19\n\nLANGUAGE: Logtalk\nCODE:\n```\nsort(Closure,List,Sorted)\n```\n\n----------------------------------------\n\nTITLE: Testing Meta-Compiler Library in Logtalk\nDESCRIPTION: Shows the command to load the tester.lgt file for testing the library predicates.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/library/meta_compiler/NOTES.md#2025-04-06_snippet_1\n\nLANGUAGE: Prolog\nCODE:\n```\n| ?- logtalk_load(meta_compiler(tester)).\n```\n\n----------------------------------------\n\nTITLE: Querying Pack Installation Directory in Logtalk\nDESCRIPTION: Demonstrates how to retrieve the installation directory for all packs.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/devtools/packs.rst.txt#2025-04-06_snippet_41\n\nLANGUAGE: logtalk\nCODE:\n```\n| ?- packs::prefix(Directory).\n```\n\n----------------------------------------\n\nTITLE: Implementing Public Protocol in Logtalk Object\nDESCRIPTION: Demonstrates the default public scope when implementing a protocol in a Logtalk object. The 'public::' prefix is implicit when no scope is specified.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/userman/protocols.rst.txt#2025-04-06_snippet_13\n\nLANGUAGE: logtalk\nCODE:\n```\n:- object(Object,\n    implements(public::Protocol)).\n    ...\n:- end_object.\n```\n\n----------------------------------------\n\nTITLE: Loading SICStus Prolog .po Files\nDESCRIPTION: Examples of how to load the created .po files and saved states in SICStus Prolog. The .po files can be loaded using load_files/1-2 predicates while saved states can be loaded using the sicstus -r command.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/scripts/embedding/sicstus/NOTES.md#2025-04-06_snippet_0\n\nLANGUAGE: prolog\nCODE:\n```\nload_files/1-2  % For loading .po files\nsicstus -r SavedStateFile  % For loading saved states\n```\n\n----------------------------------------\n\nTITLE: Counter Storage Predicate\nDESCRIPTION: Private dynamic predicate that stores the current counter value internally. Takes a number parameter and returns zero or one proofs.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/counter_0.rst.txt#2025-04-06_snippet_5\n\nLANGUAGE: logtalk\nCODE:\n```\nc(?number)\n```\n\n----------------------------------------\n\nTITLE: Defining Predicate and Clause Breakpoints in Logtalk Debugger\nDESCRIPTION: Uses the debugger::spy/1 predicate to define predicate and clause breakpoints. The argument can be a predicate indicator, non-terminal indicator, clause location, or a list of breakpoints.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/userman/debugging.rst.txt#2025-04-06_snippet_7\n\nLANGUAGE: prolog\nCODE:\n```\n| ?- debugger::spy(person-42).\n\nAll specified breakpoints added.\nyes\n\n| ?- debugger::spy(foo/2).\n\nAll specified breakpoints added.\nyes\n\n| ?- debugger::spy([foo/4, bar//1, agent-99]).\n\nAll specified breakpoints added.\nyes\n```\n\n----------------------------------------\n\nTITLE: Example of Delegating Unknown Messages in Logtalk\nDESCRIPTION: Demonstrates how to use the []/1 control construct to delegate unknown messages to a 'backup' object in Logtalk. This is typically used in the definition of object handlers for unknown messages.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/refman/control/delegate_message_1.rst.txt#2025-04-06_snippet_2\n\nLANGUAGE: Logtalk\nCODE:\n```\n% delegate unknown messages to the \"backup\" object:\nforward(Message) :-\n    [backup::Message].\n```\n\n----------------------------------------\n\nTITLE: Unit Testing Outcomes in Logtalk\nDESCRIPTION: Updated lgtunit tool test/2 dialect with new outcome values for exceptions and errors.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/RELEASE_NOTES.md#2025-04-06_snippet_108\n\nLANGUAGE: Logtalk\nCODE:\n```\ntest/2\n```\n\n----------------------------------------\n\nTITLE: Calculating Running Sum Query 1\nDESCRIPTION: Query to calculate running sum for first number, returning result in Sums list.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/engines/sums/NOTES.md#2025-04-06_snippet_2\n\nLANGUAGE: logtalk\nCODE:\n```\nsums::rd(1, Sums).\n```\n\n----------------------------------------\n\nTITLE: Finding Root Using Newton Method for Function f1\nDESCRIPTION: Demonstrates using Newton's method to find the root of function f1 in the range [1.0, 2.3] with a tolerance of 1.0e-15.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/threads/functions/NOTES.md#2025-04-06_snippet_3\n\nLANGUAGE: logtalk\nCODE:\n```\nnewton::find_root(f1, 1.0, 2.3, 1.0e-15, Zero).\n```\n\n----------------------------------------\n\nTITLE: Applying the Dead Code Scanner to Itself in Logtalk\nDESCRIPTION: Uses the dead_code_scanner tool to scan its own library code for dead code. This is a good way to test the tool's functionality.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/tools/dead_code_scanner/SCRIPT.txt#2025-04-06_snippet_3\n\nLANGUAGE: prolog\nCODE:\n```\n| ?- dead_code_scanner::library(dead_code_scanner).\n```\n\n----------------------------------------\n\nTITLE: Loading the OS Library in Logtalk\nDESCRIPTION: Command to load all entities in the OS library using the loader.lgt file.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/libraries/os.rst#2025-04-06_snippet_0\n\nLANGUAGE: prolog\nCODE:\n```\n| ?- logtalk_load(os(loader)).\n```\n\n----------------------------------------\n\nTITLE: Template and Modes for Discontiguous Directive in Logtalk\nDESCRIPTION: This snippet specifies the template and modes for using the discontiguous/1 directive in Logtalk. It shows that the directive accepts predicate indicator terms and non-terminal indicator terms as arguments.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/refman/directives/discontiguous_1.rst#2025-04-06_snippet_1\n\nLANGUAGE: Logtalk\nCODE:\n```\ndiscontiguous(+predicate_indicator_term)\ndiscontiguous(+non_terminal_indicator_term)\n```\n\n----------------------------------------\n\nTITLE: Updating Package to Specific Version in Logtalk\nDESCRIPTION: Predicate for updating an installed package to a specified version with options. Includes various update configuration options.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/packs_0.rst.txt#2025-04-06_snippet_4\n\nLANGUAGE: logtalk\nCODE:\n```\nupdate(Pack,Version,Options)\n```\n\n----------------------------------------\n\nTITLE: Initializing Logtalk Application Test Script\nDESCRIPTION: This snippet provides a template for a Logtalk application test script. It includes a copyright notice and a commented placeholder for the actual test code.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/coding/xcode/Logtalk Application/SCRIPT.txt#2025-04-06_snippet_0\n\nLANGUAGE: Logtalk\nCODE:\n```\n=================================================================\n<PROJECTNAME>\nRelease 1.0\n\nCopyright (c) <YEAR> <ORGANIZATIONNAME>.  All Rights Reserved.\n=================================================================\n\n% sample script for testing/running <PROJECTNAME> Logtalk application\n```\n\n----------------------------------------\n\nTITLE: Abolishing All Objects of the Protocol\nDESCRIPTION: Removes all objects that conform to the 'abc' protocol to demonstrate that the restoration process works independently of existing objects.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/serialization/NOTES.md#2025-04-06_snippet_5\n\nLANGUAGE: logtalk\nCODE:\n```\nforall(conforms_to_protocol(Object,abc), abolish_object(Object)).\n```\n\n----------------------------------------\n\nTITLE: Using Assertion/1 Predicate in Logtalk\nDESCRIPTION: Example of using the assertion/1 predicate in a Logtalk predicate. It checks if the input list L is non-empty.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/devtools/assertions.rst#2025-04-06_snippet_2\n\nLANGUAGE: Logtalk\nCODE:\n```\nfoo(L) :-\n    assertions::assertion(non_empty_list(L)),\n    ...\n```\n\n----------------------------------------\n\nTITLE: Creating a New Twin Time Object\nDESCRIPTION: Creates a new time object dynamically with a reference to its twin date object, initializing it with hour, minutes, and seconds values.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/design_patterns/structural/twin/NOTES.md#2025-04-06_snippet_6\n\nLANGUAGE: logtalk\nCODE:\n```\ntime::new(twin_time, twin_date, [hour(12),minutes(37),seconds(17)]).\n```\n\n----------------------------------------\n\nTITLE: Loading Lambda Compilation Tester in Logtalk\nDESCRIPTION: Loads the tester module for the lambdas_compiled example to run the performance tests.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/lambdas_compiled/NOTES.md#2025-04-06_snippet_1\n\nLANGUAGE: logtalk\nCODE:\n```\nlogtalk_load(lambdas_compiled(tester)).\n```\n\n----------------------------------------\n\nTITLE: Shell Initialization Predicate\nDESCRIPTION: Declares an initialization predicate init/0 with static compilation flag. Used to initialize the shell environment.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/shell_1.rst.txt#2025-04-06_snippet_1\n\nLANGUAGE: logtalk\nCODE:\n```\ninit/0\n```\n\n----------------------------------------\n\nTITLE: Testing Parent Local Call\nDESCRIPTION: Demonstrates calling get_local/1 predicate on parent object to retrieve local value.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/super_calls/NOTES.md#2025-04-06_snippet_1\n\nLANGUAGE: logtalk\nCODE:\n```\nparent::get_local(Local).\n```\n\n----------------------------------------\n\nTITLE: RST Table of Contents for Control Constructs\nDESCRIPTION: ReStructuredText markup defining the table of contents for control constructs documentation sections, including message sending, delegation, super calls, and context switching calls.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/refman/control/index.rst#2025-04-06_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. toctree::\n   :maxdepth: 2\n\n   message_sending\n   message_delegation\n   super_calls\n   call_in_this\n   external_calls\n   context_switching_calls\n```\n\n----------------------------------------\n\nTITLE: Defining Tutorial Table of Contents in reStructuredText\nDESCRIPTION: A reStructuredText toctree directive that defines the structure of the Logtalk tutorial documentation. The directive includes references to four tutorial topics: lists, attributes, reflection, and profiling, with a maximum depth of 2 levels.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/tutorial/index.rst.txt#2025-04-06_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. toctree::\n   :maxdepth: 2\n\n   lists\n   attributes\n   reflection\n   profiling\n```\n\n----------------------------------------\n\nTITLE: Syntax Error Implementation Details\nDESCRIPTION: Shows the equivalent implementation sequence using context/1 predicate and throw/1 to generate a syntax error in the standard runtime format.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/refman/methods/syntax_error_1.rst#2025-04-06_snippet_1\n\nLANGUAGE: prolog\nCODE:\n```\n...,\ncontext(Context),\nthrow(error(syntax_error(Description), Context)).\n```\n\n----------------------------------------\n\nTITLE: Specifying modes and proofs for create_category/4 in Logtalk\nDESCRIPTION: Defines the modes of usage and number of proofs for the create_category/4 predicate, indicating it expects a category identifier, a list of relations, directives, and clauses.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/refman/predicates/create_category_4.rst#2025-04-06_snippet_1\n\nLANGUAGE: logtalk\nCODE:\n```\ncreate_category(?category_identifier, @list(category_relation), @list(category_directive), @list(clause)) - one\n```\n\n----------------------------------------\n\nTITLE: Shell Expansion Object Declaration in Logtalk\nDESCRIPTION: Defines a shell expansion object that implements the expanding protocol and extends rule_expansion. The object is loaded via the verdi_neruda loader and uses static and context_switching_calls compilation flags.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/shell_expansion_1.rst.txt#2025-04-06_snippet_0\n\nLANGUAGE: prolog\nCODE:\n```\nshell_expansion(Mode)\n```\n\n----------------------------------------\n\nTITLE: Loading Queue Library in Logtalk\nDESCRIPTION: Command to load all entities in the queue library using the loader file.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/library/queues/NOTES.md#2025-04-06_snippet_0\n\nLANGUAGE: logtalk\nCODE:\n```\n| ?- logtalk_load(queues(loader)).\n```\n\n----------------------------------------\n\nTITLE: Querying Spy Points in Logtalk\nDESCRIPTION: Predicate to query current spy points. It takes four arguments: Event, Object, Message, and Sender. It has a compilation flag of 'static' and can return zero or more proofs.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/monitorp_0.rst.txt#2025-04-06_snippet_4\n\nLANGUAGE: Logtalk\nCODE:\n```\nspy_point(Event,Object,Message,Sender)\n```\n\n----------------------------------------\n\nTITLE: Defining the consistency_error/3 Method Signature in Logtalk\nDESCRIPTION: Shows the signature of the consistency_error/3 built-in method which throws a consistency error when two directives or predicate arguments are individually correct but together are inconsistent.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/refman/methods/consistency_error_3.rst#2025-04-06_snippet_0\n\nLANGUAGE: logtalk\nCODE:\n```\nconsistency_error(Consistency, Argument1, Argument2)\n```\n\n----------------------------------------\n\nTITLE: Finding Categories that Complement Objects in Logtalk\nDESCRIPTION: Query to identify which categories complement specific objects in the loaded example, showing the relationship between the patch category and broken object.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/patching/NOTES.md#2025-04-06_snippet_2\n\nLANGUAGE: logtalk\nCODE:\n```\ncomplements_object(Category, Object).\n```\n\n----------------------------------------\n\nTITLE: Testing the Intervals Library in Logtalk\nDESCRIPTION: Command to load and run tests for the intervals library predicates using the tester.lgt file. This verifies the correct implementation of Allen's interval algebra relations.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/libraries/intervals.rst#2025-04-06_snippet_1\n\nLANGUAGE: logtalk\nCODE:\n```\n| ?- logtalk_load(intervals(tester)).\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Self vs This Context in Logtalk\nDESCRIPTION: This snippet illustrates the differences between 'self' and 'this' by calling the context/0 predicate on the 'aircraft' object.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/self_vs_this/NOTES.md#2025-04-06_snippet_2\n\nLANGUAGE: logtalk\nCODE:\n```\naircraft::context.\n```\n\n----------------------------------------\n\nTITLE: Executing POEM Example\nDESCRIPTION: Runs the POEM example by calling the run/0 predicate on the poem object\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/poem/NOTES.md#2025-04-06_snippet_2\n\nLANGUAGE: logtalk\nCODE:\n```\npoem::run.\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Make Actions with Hook Predicate in Logtalk\nDESCRIPTION: The logtalk_make_target_action_1 user-defined hook predicate allows for defining additional actions for make targets, such as running tests on 'make check' or regenerating API documentation on 'make documentation'.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/devtools/make.rst.txt#2025-04-06_snippet_1\n\nLANGUAGE: Logtalk\nCODE:\n```\nlogtalk_make_target_action_1\n```\n\n----------------------------------------\n\nTITLE: Method Mode Declaration\nDESCRIPTION: Specifies the mode declaration for print_message/3, indicating it takes three non-variable arguments and provides one proof.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/refman/methods/print_message_3.rst.txt#2025-04-06_snippet_1\n\nLANGUAGE: logtalk\nCODE:\n```\nprint_message(+nonvar, +nonvar, +nonvar) - one\n```\n\n----------------------------------------\n\nTITLE: Guessing CSV Arity in Logtalk\nDESCRIPTION: Demonstrates how to use the guess_arity/2 method to determine the number of fields or columns per record in a CSV file.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/library/csv/NOTES.md#2025-04-06_snippet_6\n\nLANGUAGE: Logtalk\nCODE:\n```\n| ?- csv(keep, comma, false)::guess_arity('test_files/crlf_ending.csv', Arity).\nIs this the proper reading of a line of this file (y/n)? [aaa,bbb,ccc]\n|> y.\n\nArity = 3\n```\n\n----------------------------------------\n\nTITLE: Defining Scoped Generators and Shrinkers in Logtalk\nDESCRIPTION: Example of using the (::)/2 meta-type to define scoped generators and shrinkers, avoiding conflicts with third-party definitions.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/libraries/arbitrary.rst#2025-04-06_snippet_10\n\nLANGUAGE: prolog\nCODE:\n```\n:- object(scoped).\n\n    % the same predicate is used for both generating and validating\n    :- public(custom/1).\n    custom(Term) :-\n        (   var(Term) ->\n            % assume predicate used as a generator\n            random::random(Term)\n        ;   % assume predicate used as a validator\n            float(Term)\n        ).\n\n    % a predicate with the same name is used for shrinking\n    :- public(custom/2).\n    custom(Larger, Small) :-\n        Small is Larger / 2.\n\n:- end_object.\n```\n\n----------------------------------------\n\nTITLE: Defining Scoped Generators and Shrinkers in Logtalk\nDESCRIPTION: Example of using the (::)/2 meta-type to define scoped generators and shrinkers, avoiding conflicts with third-party definitions.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/libraries/arbitrary.rst#2025-04-06_snippet_10\n\nLANGUAGE: prolog\nCODE:\n```\n:- object(scoped).\n\n    % the same predicate is used for both generating and validating\n    :- public(custom/1).\n    custom(Term) :-\n        (   var(Term) ->\n            % assume predicate used as a generator\n            random::random(Term)\n        ;   % assume predicate used as a validator\n            float(Term)\n        ).\n\n    % a predicate with the same name is used for shrinking\n    :- public(custom/2).\n    custom(Larger, Small) :-\n        Small is Larger / 2.\n\n:- end_object.\n```\n\n----------------------------------------\n\nTITLE: Retrieving Current Branch with Git Library in Logtalk\nDESCRIPTION: Shows how to use the branch/2 predicate to get the name of the current local branch in a git repository.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/libraries/git.rst#2025-04-06_snippet_5\n\nLANGUAGE: prolog\nCODE:\n```\n| ?- git::branch('/Users/pmoura/Documents/Logtalk/logtalk3', Branch).\n\nBranch = master\nyes\n```\n\n----------------------------------------\n\nTITLE: Package Path Predicate\nDESCRIPTION: Returns or prints the path prefix where Logtalk packages and registries are installed.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/packs_common_0.rst.txt#2025-04-06_snippet_4\n\nLANGUAGE: logtalk\nCODE:\n```\nlogtalk_packs(LogtalkPacks)\n```\n\n----------------------------------------\n\nTITLE: Querying Geometric Properties of Object q2 in Logtalk\nDESCRIPTION: Retrieves geometric properties (side length, area, perimeter) from the 'q2' object using individual message sends instead of broadcasting to work around a XSB parser limitation.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/shapes/ph/NOTES.md#2025-04-06_snippet_5\n\nLANGUAGE: logtalk\nCODE:\n```\nq2::side(Side), q2::area(Area), q2::perimeter(Perimeter).\n```\n\n----------------------------------------\n\nTITLE: Meta-Predicate Template for (\\+)/1 in Logtalk\nDESCRIPTION: Defines the meta-predicate template for the (\\+)/1 built-in method in Logtalk. The '0' indicates that the argument is a goal.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/refman/methods/not_1.rst.txt#2025-04-06_snippet_1\n\nLANGUAGE: Logtalk\nCODE:\n```\n\\+ 0\n```\n\n----------------------------------------\n\nTITLE: Testing the Intervals Library in Logtalk\nDESCRIPTION: Command to load and run tests for the intervals library predicates using the tester.lgt file. This verifies the correct implementation of Allen's interval algebra relations.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/libraries/intervals.rst#2025-04-06_snippet_1\n\nLANGUAGE: logtalk\nCODE:\n```\n| ?- logtalk_load(intervals(tester)).\n```\n\n----------------------------------------\n\nTITLE: Checking for Leap Year in Logtalk\nDESCRIPTION: Defines the 'leap_year/1' predicate that checks if a given year is a leap year. It succeeds once if the year is a leap year, and fails otherwise.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/datep_0.rst.txt#2025-04-06_snippet_1\n\nLANGUAGE: Logtalk\nCODE:\n```\nleap_year(Year)\n```\n\n----------------------------------------\n\nTITLE: Opening a vault with correct password in Logtalk\nDESCRIPTION: This snippet demonstrates opening the 'my_vault' object with the correct password.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/complements/restrict/NOTES.md#2025-04-06_snippet_2\n\nLANGUAGE: logtalk\nCODE:\n```\nmy_vault::open('!\"#$%&/()=').\n```\n\n----------------------------------------\n\nTITLE: Testing the Diagrams Tool in Logtalk\nDESCRIPTION: Logtalk query to load and run the tester for the diagrams tool.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/devtools/diagrams.rst#2025-04-06_snippet_4\n\nLANGUAGE: prolog\nCODE:\n```\n| ?- logtalk_load(diagrams(tester)).\n```\n\n----------------------------------------\n\nTITLE: Creating a New Twin Date Object\nDESCRIPTION: Creates a new date object dynamically with a reference to its twin time object, initializing it with year, month, and day values.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/design_patterns/structural/twin/NOTES.md#2025-04-06_snippet_7\n\nLANGUAGE: logtalk\nCODE:\n```\ndate::new(twin_date, twin_time, [year(2003),month(9),day(23)]).\n```\n\n----------------------------------------\n\nTITLE: Custom Type Definition\nDESCRIPTION: Example showing how to define a custom 'age' type with validation rules using multifile predicates.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/libraries/types.rst#2025-04-06_snippet_5\n\nLANGUAGE: prolog\nCODE:\n```\n:- multifile(type::type/1).\ntype::type(age).\n\n:- multifile(type::check/2).\ntype::check(age, Term) :-\n    type::check(between(non_negative_integer, 0, 150), Term).\n```\n\n----------------------------------------\n\nTITLE: Using the arbitrary Category in Logtalk\nDESCRIPTION: Example of accessing arbitrary predicates via the type object to generate random integers.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/libraries/arbitrary.rst#2025-04-06_snippet_2\n\nLANGUAGE: prolog\nCODE:\n```\n| ?- type::arbitrary(integer, Arbitrary).\nArbitrary = -816\nyes\n```\n\n----------------------------------------\n\nTITLE: DCG Call with Lambda Expression Usage\nDESCRIPTION: Mentioned example of using call//1 built-in non-terminal with a lambda expression to access grammar rule input list, but no actual code is shown in the text.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/RELEASE_NOTES.md#2025-04-06_snippet_37\n\n\n\n----------------------------------------\n\nTITLE: Expanding Terms Using Entity Information in Logtalk\nDESCRIPTION: An example showing how to expand source file terms only if they are entity terms by checking if the entity_identifier key exists in the compilation context.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/refman/predicates/logtalk_load_context_2.rst.txt#2025-04-06_snippet_1\n\nLANGUAGE: logtalk\nCODE:\n```\n% expand source file terms only if they are entity terms\nterm_expansion(Term, ExpandedTerms) :-\n    logtalk_load_context(entity_identifier, _),\n    ....\n```\n\n----------------------------------------\n\nTITLE: Defining Public Predicate for Default Entity Diagram Generation in Logtalk\nDESCRIPTION: Defines a public predicate 'entity/1' that creates a diagram for a single entity using default options. It takes an entity identifier as its only argument.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/xref_diagram_1.rst.txt#2025-04-06_snippet_1\n\nLANGUAGE: Logtalk\nCODE:\n```\nentity(Entity)\n```\n\n----------------------------------------\n\nTITLE: Retrieving List of All Class Superclasses in Logtalk\nDESCRIPTION: Predicate that returns a list containing all class superclasses. Takes a single parameter Superclasses which will be bound to the list of all superclasses.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/class_hierarchyp_0.rst.txt#2025-04-06_snippet_7\n\nLANGUAGE: logtalk\nCODE:\n```\nsuperclasses(Superclasses)\n```\n\n----------------------------------------\n\nTITLE: Specifying modes and proofs for create_category/4 in Logtalk\nDESCRIPTION: Defines the modes of usage and number of proofs for the create_category/4 predicate, indicating it expects a category identifier, a list of relations, directives, and clauses.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/refman/predicates/create_category_4.rst#2025-04-06_snippet_1\n\nLANGUAGE: logtalk\nCODE:\n```\ncreate_category(?category_identifier, @list(category_relation), @list(category_directive), @list(clause)) - one\n```\n\n----------------------------------------\n\nTITLE: Value Sharing Example - Score Query\nDESCRIPTION: Demonstrates value sharing by querying the score property from different objects.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/viewpoints/NOTES.md#2025-04-06_snippet_5\n\nLANGUAGE: logtalk\nCODE:\n```\njoe_person::score(Score).\n```\n\nLANGUAGE: logtalk\nCODE:\n```\njoe_employee::score(Score).\n```\n\n----------------------------------------\n\nTITLE: Dictionary Initialization in Logtalk\nDESCRIPTION: Creates a dictionary instance with key-value pairs.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/units/NOTES.md#2025-04-06_snippet_2\n\nLANGUAGE: logtalk\nCODE:\n```\ndict([a=1,b=2,c=3,d=4,e=5])::dict(Dict).\n```\n\n----------------------------------------\n\nTITLE: Running Logtalk Tests with XML Coverage and Path Suppression\nDESCRIPTION: Command to run Logtalk tests with XML code coverage reporting (-c xml) while suppressing the home directory path (-s $HOME/logtalk/) in the results.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/tools/lgtunit/NOTES.md#2025-04-06_snippet_58\n\nLANGUAGE: shell\nCODE:\n```\n$ logtalk_tester -c xml -s $HOME/logtalk/\n```\n\n----------------------------------------\n\nTITLE: Displaying German language banner\nDESCRIPTION: This snippet displays the welcome message in German using the localization mechanism.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/localizations/NOTES.md#2025-04-06_snippet_2\n\nLANGUAGE: logtalk\nCODE:\n```\nmy_game(de)::banner.\n```\n\n----------------------------------------\n\nTITLE: Example Usage of logtalk_make/1\nDESCRIPTION: Demonstrates common usage patterns including reloading files in debug mode, checking for code issues, and cleaning intermediate files.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/refman/predicates/logtalk_make_1.rst#2025-04-06_snippet_2\n\nLANGUAGE: prolog\nCODE:\n```\n% reload loaded source files in debug mode:\n| ?- logtalk_make(debug).\n\n% check for code issues in the loaded source files:\n| ?- logtalk_make(check).\n\n% delete all intermediate files generated by\n% the compilation of Logtalk source files:\n| ?- logtalk_make(clean).\n```\n\n----------------------------------------\n\nTITLE: Loading os_types Category in Logtalk\nDESCRIPTION: Loading directive for the os_types category. Required to use the operating system related types.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/os_types_0.rst.txt#2025-04-06_snippet_0\n\nLANGUAGE: logtalk\nCODE:\n```\nlogtalk_load(os(loader))\n```\n\n----------------------------------------\n\nTITLE: Parameter Variable Example\nDESCRIPTION: Demonstrates using parameter variables with the uses/2 directive for flexible implementation testing.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/refman/directives/uses_2.rst.txt#2025-04-06_snippet_6\n\nLANGUAGE: logtalk\nCODE:\n```\n:- object(tests(_HeapObject_),\n    extends(lgtunit)).\n\n    :- uses(_HeapObject_, [\n        as_heap/2, as_list/2, valid/1, new/1,\n        insert/4, insert_all/3, delete/4, merge/3,\n        empty/1, size/2, top/3, top_next/5\n    ]).\n```\n\n----------------------------------------\n\nTITLE: Saving Packs Requirements\nDESCRIPTION: Logtalk query to save the current packs setup to a requirements file.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/tools/packs/NOTES.md#2025-04-06_snippet_9\n\nLANGUAGE: prolog\nCODE:\n```\n| ?- packs::save('requirements.lgt').\n```\n\n----------------------------------------\n\nTITLE: Loading Logtalk Profiler Tool\nDESCRIPTION: Query to load the Logtalk profiler tool using the loader file.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/tools/profiler/NOTES.md#2025-04-06_snippet_0\n\nLANGUAGE: Prolog\nCODE:\n```\n?- logtalk_load(profiler(loader)).\n```\n\n----------------------------------------\n\nTITLE: Specifying Modes and Proofs for threaded_cancel/1 in Logtalk\nDESCRIPTION: Defines the mode and number of proofs for the threaded_cancel/1 predicate. It expects a non-variable Tag argument and provides one proof.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/refman/predicates/threaded_cancel_1.rst.txt#2025-04-06_snippet_1\n\nLANGUAGE: Prolog\nCODE:\n```\nthreaded_cancel(+nonvar) - one\n```\n\n----------------------------------------\n\nTITLE: Testing the TSV Library in Logtalk\nDESCRIPTION: A command to test the TSV library predicates by loading the tester.lgt file.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/library/tsv/NOTES.md#2025-04-06_snippet_1\n\nLANGUAGE: Logtalk\nCODE:\n```\n| ?- logtalk_load(tsv(tester)).\n```\n\n----------------------------------------\n\nTITLE: Querying facts from a named database\nDESCRIPTION: Demonstrates the use of db_call/2 to query all facts for the foo/1 predicate in the 'my_db' database.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/named_databases/NOTES.md#2025-04-06_snippet_5\n\nLANGUAGE: logtalk\nCODE:\n```\n%%table\ndb_call(my_db, foo(X)).\n```\n\n----------------------------------------\n\nTITLE: Running the Interactive Fault Diagnosis Process\nDESCRIPTION: Starts the interactive fault diagnosis process if not running in a Jupyter notebook environment. The code checks if the jupyter object exists and only runs the fault diagnosis if it's not present.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/lpa/faults/NOTES.md#2025-04-06_snippet_2\n\nLANGUAGE: logtalk\nCODE:\n```\n(current_object(jupyter) -> true; fault::findall).\n```\n\n----------------------------------------\n\nTITLE: Public Predicate Access\nDESCRIPTION: Demonstrates sending a message to access a public predicate\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/scopes/NOTES.md#2025-04-06_snippet_2\n\nLANGUAGE: logtalk\nCODE:\n```\nprototype::foo(Foo).\n```\n\n----------------------------------------\n\nTITLE: Defining Base Object Class in Logtalk\nDESCRIPTION: Definition of the object class that serves as the root of the inheritance graph. Contains predicates common to all objects and instantiates from class.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/tutorial/reflection.rst.txt#2025-04-06_snippet_0\n\nLANGUAGE: logtalk\nCODE:\n```\n:- object(object,\n    instantiates(class)).\n\n    % predicates common to all objects\n\n:- end_object.\n```\n\n----------------------------------------\n\nTITLE: Loading the Hanoi Example in Logtalk\nDESCRIPTION: Loads the Towers of Hanoi implementation from the hanoi directory using the loader file.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/threads/hanoi/NOTES.md#2025-04-06_snippet_1\n\nLANGUAGE: logtalk\nCODE:\n```\nlogtalk_load(hanoi(loader)).\n```\n\n----------------------------------------\n\nTITLE: Getting a List of Dead Predicates for a Category in Logtalk\nDESCRIPTION: Retrieves a complete list of all dead (unused) predicates in the specified category (core_messages).\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/tools/dead_code_scanner/SCRIPT.txt#2025-04-06_snippet_7\n\nLANGUAGE: prolog\nCODE:\n```\n| ?- dead_code_scanner::predicates(core_messages, DeadPredicates).\n```\n\n----------------------------------------\n\nTITLE: Loading a Prolog Module for Dead Code Scanning in Logtalk\nDESCRIPTION: This snippet demonstrates how to load a Prolog module named 'module.pl' into Logtalk for dead code scanning. It uses the logtalk_load/2 predicate with the source_data flag set to on.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/devtools/dead_code_scanner.rst.txt#2025-04-06_snippet_5\n\nLANGUAGE: logtalk\nCODE:\n```\n| ?- logtalk_load(module, [source_data(on)]).\n```\n\n----------------------------------------\n\nTITLE: Disable Logging Predicate - disable_logging/1\nDESCRIPTION: Predicate to disable logging for a file specified by alias. Fails if the alias is not defined.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/loggingp_0.rst.txt#2025-04-06_snippet_6\n\nLANGUAGE: logtalk\nCODE:\n```\ndisable_logging(+atom)\n```\n\n----------------------------------------\n\nTITLE: Defining Inheritance Diagram Object in Logtalk\nDESCRIPTION: Object declaration for generating inheritance diagrams. Takes a Format parameter specifying the graph language file format. Requires logtalk_load(diagrams(loader)) for availability. Uses static and context_switching_calls compilation flags.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/inheritance_diagram_1.rst.txt#2025-04-06_snippet_0\n\nLANGUAGE: logtalk\nCODE:\n```\ninheritance_diagram(Format)\n```\n\n----------------------------------------\n\nTITLE: Creating New Queue in Logtalk\nDESCRIPTION: Example showing how to create a new empty queue using the new/1 predicate.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/library/queues/NOTES.md#2025-04-06_snippet_2\n\nLANGUAGE: logtalk\nCODE:\n```\n| ?- queue::new(Queue).\nQueue = ...\nyes\n```\n\n----------------------------------------\n\nTITLE: Defining Dynamic Predicate for Unleashed Skipping in Logtalk\nDESCRIPTION: Defines a dynamic predicate 'skipping_unleashed_/1' that is true if skipping a goal with a specific invocation number while showing intermediate ports as unleashed.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/debugger_0.rst.txt#2025-04-06_snippet_3\n\nLANGUAGE: Logtalk\nCODE:\n```\nskipping_unleashed_/1\n```\n\n----------------------------------------\n\nTITLE: Loading Population Object in Logtalk\nDESCRIPTION: Command to load the statistics module containing the population object. This must be executed before using the population object.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/population_0.rst.txt#2025-04-06_snippet_0\n\nLANGUAGE: Logtalk\nCODE:\n```\nlogtalk_load(statistics(loader))\n```\n\n----------------------------------------\n\nTITLE: Discontiguous Directive Usage Examples\nDESCRIPTION: Demonstrates practical examples of using the discontiguous directive for single predicates, pairs, and lists of predicates.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/refman/directives/discontiguous_1.rst.txt#2025-04-06_snippet_2\n\nLANGUAGE: logtalk\nCODE:\n```\n:- discontiguous(counter/1).\n\n:- discontiguous((lives/2, works/2)).\n\n:- discontiguous([db/4, key/2, file/3]).\n```\n\n----------------------------------------\n\nTITLE: Accessing Parametric Object Proxies\nDESCRIPTION: Syntax for accessing parametric object proxies using the {}/1 notation in control constructs.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/RELEASE_NOTES.md#2025-04-06_snippet_103\n\nLANGUAGE: Logtalk\nCODE:\n```\n% Accessing parametric object proxy\n{ParametricObject}::predicate\n```\n\n----------------------------------------\n\nTITLE: Testing the term_io Library in Logtalk\nDESCRIPTION: Command to load and run the tests for the term_io library using the tester.lgt file. This validates the correct behavior of the library predicates.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/libraries/term_io.rst#2025-04-06_snippet_1\n\nLANGUAGE: logtalk\nCODE:\n```\n| ?- logtalk_load(term_io(tester)).\n```\n\n----------------------------------------\n\nTITLE: Querying Prototype1 Interface with Public Inheritance\nDESCRIPTION: Queries the interface of 'prototype1' which extends 'parent' using public inheritance, showing visibility of inherited predicates.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/inheritance/NOTES.md#2025-04-06_snippet_3\n\nLANGUAGE: logtalk\nCODE:\n```\nprototype1::interface.\n```\n\n----------------------------------------\n\nTITLE: Specifying Modes for Retract Method in Logtalk\nDESCRIPTION: Defines the mode and number of proofs for the retract/1 method. It takes a clause as input and can succeed zero or more times.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/refman/methods/retract_1.rst#2025-04-06_snippet_1\n\nLANGUAGE: Prolog\nCODE:\n```\nretract(+clause) - zero_or_more\n```\n\n----------------------------------------\n\nTITLE: Encapsulating Multifile Predicates with Parametric Objects\nDESCRIPTION: Example of defining a parametric object to encapsulate predicates that work with multifile predicate clauses, using the city/4 predicate as the object identifier.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/userman/migration.rst.txt#2025-04-06_snippet_2\n\nLANGUAGE: logtalk\nCODE:\n```\n:- object(city(_Name, _District, _Population, _Neighbors)).\n\n    % predicates for working with city/4 clauses\n\n:- end_object.\n```\n\n----------------------------------------\n\nTITLE: Usage Modes - Logtalk abolish/1\nDESCRIPTION: Specification of the usage mode and number of proofs for the abolish/1 method.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/refman/methods/abolish_1.rst.txt#2025-04-06_snippet_1\n\nLANGUAGE: logtalk\nCODE:\n```\nabolish(@predicate_indicator) - one\n```\n\n----------------------------------------\n\nTITLE: Loading Birthdays Example in Logtalk\nDESCRIPTION: Loads the birthdays example module using the Logtalk loader.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/threads/birthdays/NOTES.md#2025-04-06_snippet_0\n\nLANGUAGE: logtalk\nCODE:\n```\nlogtalk_load(birthdays(loader)).\n```\n\n----------------------------------------\n\nTITLE: Retrieving Pack README Path in Logtalk\nDESCRIPTION: Example showing how to retrieve the path to a pack's README.md file.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/tools/packs/NOTES.md#2025-04-06_snippet_27\n\nLANGUAGE: prolog\nCODE:\n```\n| ?- packs::readme(lflat, Path).\n```\n\n----------------------------------------\n\nTITLE: Querying specialization relationships with scope in Logtalk\nDESCRIPTION: Shows how to query specialization relationships with their scope information using the specializes_class/3 built-in predicate.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/userman/objects.rst#2025-04-06_snippet_19\n\nLANGUAGE: text\nCODE:\n```\n| ?- specializes_class(Class, Superclass, Scope).\n```\n\n----------------------------------------\n\nTITLE: Calculate Jupiter Weight\nDESCRIPTION: Calculates the weight of object m2 on Jupiter for comparison\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/planets/NOTES.md#2025-04-06_snippet_5\n\nLANGUAGE: logtalk\nCODE:\n```\njupiter::weight(m2, W2).\n```\n\n----------------------------------------\n\nTITLE: Defining Time Object in Logtalk\nDESCRIPTION: Defines a time object with a cpu_time/1 predicate to get the current CPU time for profiling purposes.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/tutorial/profiling.rst.txt#2025-04-06_snippet_2\n\nLANGUAGE: logtalk\nCODE:\n```\n:- object(time).\n\n    :- public(cpu_time/1).\n    :- mode(cpu_time(-number), one).\n    ...\n\n:- end_object.\n```\n\n----------------------------------------\n\nTITLE: Validating Dates in Logtalk\nDESCRIPTION: Defines the 'valid/3' predicate that checks if a combination of year, month, and day represents a valid date. It succeeds once if the date is valid, and fails otherwise.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/datep_0.rst.txt#2025-04-06_snippet_5\n\nLANGUAGE: Logtalk\nCODE:\n```\nvalid(Year,Month,Day)\n```\n\n----------------------------------------\n\nTITLE: Defining Dynamic Predicate for Skipping Status in Logtalk\nDESCRIPTION: Defines a dynamic predicate 'skipping_/0' that is true if skipping is enabled. This predicate is used internally by the debugger to control execution flow.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/debugger_0.rst.txt#2025-04-06_snippet_2\n\nLANGUAGE: Logtalk\nCODE:\n```\nskipping_/0\n```\n\n----------------------------------------\n\nTITLE: Template and Modes for if/1 Directive in Logtalk\nDESCRIPTION: Specifies the template and mode declaration for the if/1 directive, indicating that it expects a callable term as input.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/refman/directives/if_1.rst#2025-04-06_snippet_1\n\nLANGUAGE: logtalk\nCODE:\n```\nif(@callable)\n```\n\n----------------------------------------\n\nTITLE: Accessing Object Properties with Parameter Passing\nDESCRIPTION: Retrieves the color property from a red_circle object with radius 3.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/sicstus/NOTES.md#2025-04-06_snippet_4\n\nLANGUAGE: logtalk\nCODE:\n```\nred_circle(3)::color(Color).\n```\n\n----------------------------------------\n\nTITLE: Checking Exported Predicates\nDESCRIPTION: Tests the module export/1 directive by listing current predicates\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/modules/NOTES.md#2025-04-06_snippet_4\n\nLANGUAGE: logtalk\nCODE:\n```\nexports::current_predicate(Pred).\n```\n\n----------------------------------------\n\nTITLE: Running Whisper Example with 0 Engines\nDESCRIPTION: Executes the whisper query with 0 engines and an initial value of 1, returning the final result without modification.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/engines/whisper/NOTES.md#2025-04-06_snippet_2\n\nLANGUAGE: logtalk\nCODE:\n```\nwhisper::whisper(0, 1, Final).\n```\n\n----------------------------------------\n\nTITLE: Describing Business Laptop Configuration\nDESCRIPTION: Queries and displays the specifications of the business laptop model with enhanced specifications.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/laptops/NOTES.md#2025-04-06_snippet_3\n\nLANGUAGE: logtalk\nCODE:\n```\nbusiness::describe.\n```\n\n----------------------------------------\n\nTITLE: Setting Stream Variable Value in Logtalk\nDESCRIPTION: Sets the state of a stream variable to a specified value, initializing the variable if needed.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/streamvars_0.rst.txt#2025-04-06_snippet_2\n\nLANGUAGE: Logtalk\nCODE:\n```\nVariable <= Value\n```\n\n----------------------------------------\n\nTITLE: Closed Input Stream Helper in Logtalk Unit Testing\nDESCRIPTION: Opens a temporary file for reading in the same directory as the tests object with the given options, closes it, and returns its stream handle.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/lgtunit_0.rst.txt#2025-04-06_snippet_68\n\nLANGUAGE: Logtalk\nCODE:\n```\nclosed_input_stream(Stream,Options)\n```\n\n----------------------------------------\n\nTITLE: Testing Timeout Library in Logtalk\nDESCRIPTION: Command to load and run the tests for the timeout library predicates.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/library/timeout/NOTES.md#2025-04-06_snippet_1\n\nLANGUAGE: logtalk\nCODE:\n```\n| ?- logtalk_load(timeout(tester)).\n```\n\n----------------------------------------\n\nTITLE: Creating Nested Dictionary from Curly Bracketed Term\nDESCRIPTION: Example showing how to create a nested dictionary from a curly bracketed term representation using as_nested_dictionary/2.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/library/nested_dictionaries/NOTES.md#2025-04-06_snippet_3\n\nLANGUAGE: logtalk\nCODE:\n```\n| ?- navltree::as_nested_dictionary(\n        {a-1, b-{c-3, d-{e-7,f-8}}},\n        Dictionary\n     ).\n```\n\n----------------------------------------\n\nTITLE: Defining Dynamic Predicate for Write Max Depth in Logtalk\nDESCRIPTION: Defines a dynamic predicate 'write_max_depth_/1' that represents the current term write maximum depth. It takes the maximum depth as an argument.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/debugger_0.rst.txt#2025-04-06_snippet_13\n\nLANGUAGE: Logtalk\nCODE:\n```\nwrite_max_depth_/1\n```\n\n----------------------------------------\n\nTITLE: Using asserta/1 in a Category Implementation\nDESCRIPTION: Example of using asserta/1 in a category that implements an attributes_protocol. It demonstrates asserting clauses both in 'this' (the target object) and in 'self' (the category).\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/refman/methods/asserta_1.rst#2025-04-06_snippet_2\n\nLANGUAGE: logtalk\nCODE:\n```\n:- category(attributes,\n    implements(attributes_protocol)).\n\n    :- private(attr_/1).\n    :- dynamic(attr_/1).\n\n    set_in_this(A, X) :-\n       asserta(attr_(A, X)).\n\n    set_in_self(A, X) :-\n       ::asserta(attr_(A, X)).\n\n    ...\n```\n\n----------------------------------------\n\nTITLE: Enabling Vim Features for Logtalk in .vimrc\nDESCRIPTION: Configuration lines to add to .vimrc file to enable syntax highlighting, file type indentation, and plugins for Logtalk development.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/coding/vim/NOTES.md#2025-04-06_snippet_1\n\nLANGUAGE: vim\nCODE:\n```\nsyntax on\nfiletype indent on\nfiletype plugin on\n```\n\n----------------------------------------\n\nTITLE: Defining Ignore Meta-Predicate in Logtalk\nDESCRIPTION: Example of defining the ignore/1 meta-predicate in Logtalk. This demonstrates how to declare and implement a simple meta-predicate with a goal argument.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/userman/predicates.rst#2025-04-06_snippet_33\n\nLANGUAGE: Logtalk\nCODE:\n```\n:- public(ignore/1).\n:- meta_predicate(ignore(0)).\n\nignore(Goal) :-\n   (Goal -> true; true).\n```\n\n----------------------------------------\n\nTITLE: Exclude List Elements - Logtalk Meta-Predicate\nDESCRIPTION: Returns a list of all elements that fail to satisfy a predicate. Takes a closure as predicate, input list, and returns filtered list.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/metap_0.rst.txt#2025-04-06_snippet_1\n\nLANGUAGE: logtalk\nCODE:\n```\nexclude(Closure,List,Excluded)\n```\n\n----------------------------------------\n\nTITLE: Querying Category Protocol Implementation\nDESCRIPTION: Using implements_protocol/3 and conforms_to_protocol/3 to find category-protocol relationships.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/userman/categories.rst#2025-04-06_snippet_13\n\nLANGUAGE: text\nCODE:\n```\n| ?- implements_protocol(Category, Protocol, Scope).\n```\n\n----------------------------------------\n\nTITLE: Implementing print_message_token/4 Hook in Logtalk\nDESCRIPTION: Example of implementing the print_message_token/4 hook to ignore all flush tokens. Includes multifile and dynamic declarations.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/refman/methods/print_message_token_4.rst#2025-04-06_snippet_2\n\nLANGUAGE: Prolog\nCODE:\n```\n:- multifile(logtalk::print_message_token/4).\n:- dynamic(logtalk::print_message_token/4).\n\n% ignore all flush tokens\nlogtalk::print_message_token(_Stream, _Prefix, flush, _Tokens).\n```\n\n----------------------------------------\n\nTITLE: Private Category Import in Logtalk\nDESCRIPTION: Demonstrates importing a category with private scope, making all public and protected predicates private.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/userman/categories.rst.txt#2025-04-06_snippet_18\n\nLANGUAGE: logtalk\nCODE:\n```\n:- object(Object,\n    imports(private::Category)).\n    ...\n:- end_object.\n```\n\n----------------------------------------\n\nTITLE: Mode and Error Specification for resource_error/1 in Logtalk\nDESCRIPTION: Defines the calling mode for resource_error/1, indicating it requires a non-variable term as input and always results in an error.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/refman/methods/resource_error_1.rst.txt#2025-04-06_snippet_2\n\nLANGUAGE: logtalk\nCODE:\n```\nresource_error(@nonvar) - error\n```\n\n----------------------------------------\n\nTITLE: Loading Dates Library in Logtalk\nDESCRIPTION: Code snippet demonstrating how to load all entities in the dates library using the loader utility file.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/libraries/dates.rst.txt#2025-04-06_snippet_0\n\nLANGUAGE: logtalk\nCODE:\n```\n| ?- logtalk_load(dates(loader)).\n```\n\n----------------------------------------\n\nTITLE: Composing Top-level Graphic\nDESCRIPTION: Adds composite graphics cg1 and cg2 to the main composite graphic cg\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/design_patterns/structural/composite/NOTES.md#2025-04-06_snippet_6\n\nLANGUAGE: logtalk\nCODE:\n```\ncg::(add(cg1), add(cg2)).\n```\n\n----------------------------------------\n\nTITLE: Loading Composite Pattern Implementation\nDESCRIPTION: Loads the composite design pattern sample implementation from the design patterns directory\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/design_patterns/structural/composite/NOTES.md#2025-04-06_snippet_1\n\nLANGUAGE: logtalk\nCODE:\n```\nlogtalk_load(design_patterns('structural/composite/loader')).\n```\n\n----------------------------------------\n\nTITLE: Generating Exponential Distribution Values in Logtalk\nDESCRIPTION: Predicate that returns a standard exponential distributed random value. It takes no input parameters and returns a float value representing the random sample.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/sampling_protocol_0.rst.txt#2025-04-06_snippet_2\n\nLANGUAGE: logtalk\nCODE:\n```\nstandard_exponential(Value)\n```\n\n----------------------------------------\n\nTITLE: Modes and Number of Proofs for phrase/3 in Logtalk\nDESCRIPTION: Defines the calling modes and expected number of proofs for the phrase/3 method, indicating it can produce zero or more solutions with a callable first argument and list second and third arguments.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/refman/methods/phrase_3.rst.txt#2025-04-06_snippet_2\n\nLANGUAGE: Logtalk\nCODE:\n```\nphrase(+callable, ?list, ?list) - zero_or_more\n```\n\n----------------------------------------\n\nTITLE: Using Redis Console Mode in Logtalk\nDESCRIPTION: Sends a request to a Redis server running on localhost at the default port and prints the reply directly. Useful for interactive testing and debugging.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/redis_0.rst.txt#2025-04-06_snippet_4\n\nLANGUAGE: logtalk\nCODE:\n```\nconsole(Request)\n```\n\n----------------------------------------\n\nTITLE: Squares Placement with Specialized Constraint\nDESCRIPTION: Solves the squares placement problem using the 'dual' model with 'spec' (specialized) constraint method.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/constraints/sicstus/NOTES.md#2025-04-06_snippet_6\n\nLANGUAGE: logtalk\nCODE:\n```\nsquares::squares(dual,spec).\n```\n\n----------------------------------------\n\nTITLE: Usage Examples of (\\+)/1 in Logtalk\nDESCRIPTION: Demonstrates various ways to use the (\\+)/1 built-in method in Logtalk, including not-provable goals in different contexts.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/refman/methods/not_1.rst.txt#2025-04-06_snippet_3\n\nLANGUAGE: Logtalk\nCODE:\n```\n\\+ Goal\n\\+ ::Goal\n\\+ Object::Goal\n```\n\n----------------------------------------\n\nTITLE: Enumerating Record Key-Term Pairs in Logtalk\nDESCRIPTION: The recorded/2 predicate enumerates, by backtracking, all record key-term pairs without returning references.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/recorded_database_core_0.rst.txt#2025-04-06_snippet_5\n\nLANGUAGE: logtalk\nCODE:\n```\nrecorded(Key,Term)\n```\n\n----------------------------------------\n\nTITLE: Creating Dynamic State Builder in Logtalk\nDESCRIPTION: Creates a new builder using the dynamic state approach to the Builder pattern.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/design_patterns/creational/builder/NOTES.md#2025-04-06_snippet_4\n\nLANGUAGE: logtalk\nCODE:\n```\nbuilder::new(Builder).\n```\n\n----------------------------------------\n\nTITLE: Using Locally Defined Operator with Functor Notation\nDESCRIPTION: Demonstrates how to correctly query terms using a locally defined operator by using standard functor notation.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/operators/NOTES.md#2025-04-06_snippet_8\n\nLANGUAGE: logtalk\nCODE:\n```\n%%table\ngraph1::edge(N1, N2).\n```\n\n----------------------------------------\n\nTITLE: Adding facts to a named database\nDESCRIPTION: Adds three facts to the 'my_db' database using the db_assertz/2 predicate.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/named_databases/NOTES.md#2025-04-06_snippet_4\n\nLANGUAGE: logtalk\nCODE:\n```\ndb_assertz(my_db, foo(1)), db_assertz(my_db, foo(2)), db_assertz(my_db, foo(3)).\n```\n\n----------------------------------------\n\nTITLE: Asynchronous Messages with Synchronized Output Operations\nDESCRIPTION: Sends three asynchronous messages to nasty2 object, which uses synchronized/1 directive for its methods. This demonstrates proper synchronization of output operations.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/threads/sync/NOTES.md#2025-04-06_snippet_5\n\nLANGUAGE: logtalk\nCODE:\n```\nthreaded_ignore(nasty2::io(alpha)), threaded_ignore(nasty2::io(digit)), threaded_ignore(nasty2::io(alpha)).\n```\n\n----------------------------------------\n\nTITLE: Cleaning Up Instances and Relationships\nDESCRIPTION: Removes all block stack relationships and deletes all block instances.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/blocks/NOTES.md#2025-04-06_snippet_12\n\nLANGUAGE: logtalk\nCODE:\n```\nblock_stack::remove_all_tuples.\n```\n\nLANGUAGE: logtalk\nCODE:\n```\nblock::delete_all.\n```\n\n----------------------------------------\n\nTITLE: Defining Ignore Meta-Predicate in Logtalk\nDESCRIPTION: Example of defining the ignore/1 meta-predicate in Logtalk. This demonstrates how to declare and implement a simple meta-predicate with a goal argument.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/userman/predicates.rst#2025-04-06_snippet_33\n\nLANGUAGE: Logtalk\nCODE:\n```\n:- public(ignore/1).\n:- meta_predicate(ignore(0)).\n\nignore(Goal) :-\n   (Goal -> true; true).\n```\n\n----------------------------------------\n\nTITLE: Benchmarking DFS and IDDFS Interpreters in Prolog\nDESCRIPTION: Comparison of inference counts between depth-first search and iterative deepening depth-first search interpreters.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/contributions/verdi_neruda.rst.txt#2025-04-06_snippet_2\n\nLANGUAGE: prolog\nCODE:\n```\nbenchmark(dfs_interpreter, append([a,b,c,d],[e,f], Xs), demodb).\nbenchmark(iddfs_interpreter(1), append([a,b,c,d],[e,f], Xs), demodb).\n```\n\n----------------------------------------\n\nTITLE: Using Parameter Variables in Logtalk Directives\nDESCRIPTION: Enhanced support for using parameter variables in uses/2 and use_module/2 directives within parametric objects or categories.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/RELEASE_NOTES.md#2025-04-06_snippet_53\n\nLANGUAGE: Logtalk\nCODE:\n```\nuses(ParameterVariable, [predicate1/1, predicate2/2])\n```\n\nLANGUAGE: Logtalk\nCODE:\n```\nuse_module(ParameterVariable, [predicate1/1, predicate2/2])\n```\n\n----------------------------------------\n\nTITLE: Generating HTML Fragment\nDESCRIPTION: Example of generating an unordered list fragment to current output stream\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/libraries/html.rst#2025-04-06_snippet_7\n\nLANGUAGE: prolog\nCODE:\n```\n| ?- current_output(Stream),\n        html5::generate(stream(Stream), ul([li(foo), li(bar), li(baz)])).\n```\n\n----------------------------------------\n\nTITLE: Reset All Flags - Logtalk\nDESCRIPTION: Predicate to reset all flags to their default values.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/flags_0.rst.txt#2025-04-06_snippet_3\n\nLANGUAGE: logtalk\nCODE:\n```\nreset_flags\n```\n\n----------------------------------------\n\nTITLE: Testing Dynamic Binding - Assert Middle Value\nDESCRIPTION: Asserts a new dynamic value in middle object to demonstrate dynamic binding.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/super_calls/NOTES.md#2025-04-06_snippet_6\n\nLANGUAGE: logtalk\nCODE:\n```\nmiddle::assertz(d(middle)).\n```\n\n----------------------------------------\n\nTITLE: Querying Sedan Engine Properties in Logtalk\nDESCRIPTION: Retrieves engine properties (reference, cylinders, horsepower, and RPM) for the sedan object defined in the classic category.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/carengines/NOTES.md#2025-04-06_snippet_4\n\nLANGUAGE: logtalk\nCODE:\n```\nsedan::(reference(Name), cylinders(Cylinders), horsepower_rpm(HP, RPM)).\n```\n\n----------------------------------------\n\nTITLE: Getting Git Commit Author\nDESCRIPTION: Shows how to retrieve the author of the latest commit using commit_author/2 predicate.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/libraries/git.rst.txt#2025-04-06_snippet_3\n\nLANGUAGE: logtalk\nCODE:\n```\n| ?- git::commit_author('/Users/pmoura/Documents/Logtalk/logtalk3', Author).\n\nAuthor = 'Paulo Moura'\nyes\n```\n\n----------------------------------------\n\nTITLE: Specifying Template and Modes for Info Directive in Logtalk\nDESCRIPTION: Defines the template and mode for the info/1 directive, indicating that it takes a single argument of type entity_info_list.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/refman/directives/info_1.rst.txt#2025-04-06_snippet_1\n\nLANGUAGE: Logtalk\nCODE:\n```\ninfo(+entity_info_list)\n```\n\n----------------------------------------\n\nTITLE: Equivalent Implementation of system_error/0 in Logtalk\nDESCRIPTION: The sequence of goals that is equivalent to calling the system_error/0 built-in method. It gets the current context and throws a system_error with that context.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/refman/methods/system_error_0.rst.txt#2025-04-06_snippet_1\n\nLANGUAGE: logtalk\nCODE:\n```\n...,\ncontext(Context),\nthrow(error(system_error, Context)).\n```\n\n----------------------------------------\n\nTITLE: Defining the message_tokens//2 Non-terminal in Logtalk\nDESCRIPTION: The syntax definition of the message_tokens//2 non-terminal which takes a Message term and a Component identifier as arguments. This hook is used to rewrite message terms into token lists.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/refman/methods/message_tokens_2.rst.txt#2025-04-06_snippet_0\n\nLANGUAGE: prolog\nCODE:\n```\nmessage_tokens(Message, Component)\n```\n\n----------------------------------------\n\nTITLE: Loading Packs Tool in Logtalk\nDESCRIPTION: Logtalk query to load the packs management tool.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/tools/packs/NOTES.md#2025-04-06_snippet_5\n\nLANGUAGE: prolog\nCODE:\n```\n| ?- logtalk_load(packs(loader)).\n```\n\n----------------------------------------\n\nTITLE: Running Logtalk Unit Tests with xUnit Output Format\nDESCRIPTION: Bash command using the logtalk_tester script to run tests with GNU Prolog backend and generate xUnit format output reports. The -f xunit option specifies the output format.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/tools/lgtunit/NOTES.md#2025-04-06_snippet_48\n\nLANGUAGE: bash\nCODE:\n```\n$ logtalk_tester -p gnu -f xunit\n```\n\n----------------------------------------\n\nTITLE: Processing Complete Data Only\nDESCRIPTION: Processes and prints only complete data entries, skipping those with missing information.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/missing_data/NOTES.md#2025-04-06_snippet_3\n\nLANGUAGE: logtalk\nCODE:\n```\ndata_processing::print_complete.\n```\n\n----------------------------------------\n\nTITLE: Prolog operator notation\nDESCRIPTION: Number notation for representing characters in Prolog, used in syntax highlighting support\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/RELEASE_NOTES.md#2025-04-06_snippet_64\n\nLANGUAGE: Prolog\nCODE:\n```\n0'\\Char\n```\n\n----------------------------------------\n\nTITLE: Querying object properties in Logtalk\nDESCRIPTION: Shows how to query the properties of a defined object using the object_property/2 built-in predicate to retrieve various metadata about objects.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/userman/objects.rst#2025-04-06_snippet_27\n\nLANGUAGE: text\nCODE:\n```\n| ?- object_property(Object, Property).\n```\n\n----------------------------------------\n\nTITLE: Declaring uses/1 Directive in Logtalk\nDESCRIPTION: Demonstrates the syntax for declaring object aliases using the uses/1 directive. This directive is typically used to shorten long object names, simplify message sending to parameterized objects, and facilitate experimentation with different object implementations.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/refman/directives/uses_1.rst.txt#2025-04-06_snippet_0\n\nLANGUAGE: Logtalk\nCODE:\n```\nuses([Object as Alias, ...])\n```\n\n----------------------------------------\n\nTITLE: Describing Basic Laptop Configuration\nDESCRIPTION: Queries and displays the specifications of the basic laptop model including CPU, memory, display, and keyboard configuration.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/laptops/NOTES.md#2025-04-06_snippet_2\n\nLANGUAGE: logtalk\nCODE:\n```\nbasic::describe.\n```\n\n----------------------------------------\n\nTITLE: Specifying Predicate Modes\nDESCRIPTION: Defines the modes and number of proofs for both variants of the extends_protocol predicate.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/refman/predicates/extends_protocol_2_3.rst.txt#2025-04-06_snippet_1\n\nLANGUAGE: prolog\nCODE:\n```\nextends_protocol(?protocol_identifier, ?protocol_identifier) - zero_or_more\nextends_protocol(?protocol_identifier, ?protocol_identifier, ?scope) - zero_or_more\n```\n\n----------------------------------------\n\nTITLE: Threaded Notify Predicate Signature\nDESCRIPTION: Specifies the syntax and modes for the threaded_notify/1 predicate, which can accept either a single term or a list of terms as notifications.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/refman/predicates/threaded_notify_1.rst#2025-04-06_snippet_0\n\nLANGUAGE: prolog\nCODE:\n```\nthreaded_notify(Term)\nthreaded_notify([Term| Terms])\n```\n\n----------------------------------------\n\nTITLE: Testing the Dead Code Scanner Tool in Logtalk\nDESCRIPTION: This snippet demonstrates how to load the tester file for the dead_code_scanner tool. It uses the logtalk_load/1 predicate to load the tester file.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/devtools/dead_code_scanner.rst#2025-04-06_snippet_1\n\nLANGUAGE: logtalk\nCODE:\n```\n| ?- logtalk_load(dead_code_scanner(tester)).\n```\n\n----------------------------------------\n\nTITLE: Calling Multifile Predicate a/1\nDESCRIPTION: Demonstrates calling the multifile predicate a/1 through the main object, which returns numeric values 1 through 5.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/multifile/NOTES.md#2025-04-06_snippet_1\n\nLANGUAGE: logtalk\nCODE:\n```\nmain::a(X).\n```\n\n----------------------------------------\n\nTITLE: Querying Alf's Attributes\nDESCRIPTION: Iterates through all predicates defined for the 'alf' prototype and displays their values. This demonstrates how to access and print prototype attributes.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/prototypes/NOTES.md#2025-04-06_snippet_2\n\nLANGUAGE: logtalk\nCODE:\n```\nforall(alf::current_predicate(F/A), (functor(P,F,A), alf::P, writeq(P), nl)).\n```\n\n----------------------------------------\n\nTITLE: Defining Private Dynamic Predicate for Diagram State Management in Logtalk\nDESCRIPTION: Defines a private dynamic predicate 'included_predicate_/1' that maintains a table of predicates already included in the diagram for the entity under processing.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/xref_diagram_1.rst.txt#2025-04-06_snippet_2\n\nLANGUAGE: Logtalk\nCODE:\n```\nincluded_predicate_(Predicate)\n```\n\n----------------------------------------\n\nTITLE: Logtalk Make Predicate Declaration\nDESCRIPTION: Basic syntax declaration for the logtalk_make predicate that reloads modified source files.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/refman/predicates/logtalk_make_0.rst#2025-04-06_snippet_0\n\nLANGUAGE: logtalk\nCODE:\n```\nlogtalk_make\n```\n\n----------------------------------------\n\nTITLE: Using Suppress Goal Hook in Logtalk\nDESCRIPTION: Shows how to use the suppress_goal_hook to suppress specific goals in a predicate's body by prefixing them with the -- operator.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/libraries/hook_objects.rst#2025-04-06_snippet_11\n\nLANGUAGE: Logtalk\nCODE:\n```\nfoo :-\n    bar,\n    -- baz,\n    quux.\n```\n\n----------------------------------------\n\nTITLE: Querying logtalk_library_path/2 in Logtalk\nDESCRIPTION: Examples of querying the logtalk_library_path/2 predicate to retrieve library paths and aliases.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/refman/predicates/logtalk_library_path_2.rst.txt#2025-04-06_snippet_2\n\nLANGUAGE: Prolog\nCODE:\n```\n| ?- logtalk_library_path(viewpoints, Path).\n\nPath = examples('viewpoints/')\nyes\n\n| ?- logtalk_library_path(Library, Path).\n\nLibrary = home,\nPath = '$HOME/' ;\n\nLibrary = logtalk_home,\nPath = '$LOGTALKHOME/' ;\n\nLibrary = logtalk_user\nPath = '$LOGTALKUSER/' ;\n\nLibrary = examples\nPath = logtalk_user('examples/') ;\n\nLibrary = library\nPath = logtalk_user('library/') ;\n\nLibrary = viewpoints\nPath = examples('viewpoints/')\nyes\n```\n\n----------------------------------------\n\nTITLE: Using Logtalk syntax highlighting for Prolog files\nDESCRIPTION: Command example showing how to use the Logtalk syntax highlighting settings with plain Prolog files by specifying the syntax option.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/coding/highlight/NOTES.md#2025-04-06_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nhighlight --syntax=lgt --out-format=xhtml --input=foo.pl --output=foo.html\n```\n\n----------------------------------------\n\nTITLE: Initializing the Timetable in Logtalk\nDESCRIPTION: Sets up the initial state of the timetable system before populating it with data.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/lpa/timetables/NOTES.md#2025-04-06_snippet_3\n\nLANGUAGE: logtalk\nCODE:\n```\ntimetable::setup.\n```\n\n----------------------------------------\n\nTITLE: Loading the Reflection Example\nDESCRIPTION: Loads the reflection example which contains the implementation of the reflective class-based system.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/reflection/NOTES.md#2025-04-06_snippet_1\n\nLANGUAGE: logtalk\nCODE:\n```\nlogtalk_load(reflection(loader)).\n```\n\n----------------------------------------\n\nTITLE: Multifile Predicate Declaration for GNU Prolog Compatibility\nDESCRIPTION: Example of declaring multifile predicates to work around GNU Prolog's gplc limitation when compiling calls to multifile predicates that are not defined in the same file.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/scripts/embedding/gprolog/NOTES.md#2025-04-06_snippet_1\n\nLANGUAGE: prolog\nCODE:\n```\n:- if(current_logtalk_flag(prolog_dialect, gnu)).\n    % workaround gplc limitation when dealing with multifile predicates\n    % that are called from a file but not defined in that file\n    :- multifile(logtalk_library_path/2).\n:- endif.\n```\n\n----------------------------------------\n\nTITLE: Querying Logtalk Pack Information\nDESCRIPTION: SWI-Prolog query to get information about the Logtalk pack, which can be used to find the full path of the Logtalk installation directory.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/scripts/pack/logtalk/README.md#2025-04-06_snippet_1\n\nLANGUAGE: prolog\nCODE:\n```\n?- pack_info(logtalk).\n```\n\n----------------------------------------\n\nTITLE: Updating All Registries in Logtalk\nDESCRIPTION: Updates all defined registries using default options.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/registries_0.rst.txt#2025-04-06_snippet_8\n\nLANGUAGE: logtalk\nCODE:\n```\nupdate/0\n```\n\n----------------------------------------\n\nTITLE: Text Input Stream Setup\nDESCRIPTION: Creates and manages temporary text input files for testing with configurable options and aliases.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/lgtunit_0.rst.txt#2025-04-06_snippet_36\n\nLANGUAGE: logtalk\nCODE:\n```\nset_text_input(Alias,Contents,Options)\nset_text_input(Alias,Contents)\nset_text_input(Contents)\n```\n\n----------------------------------------\n\nTITLE: Predicate Definition in Logtalk\nDESCRIPTION: Defines the abolish_object/1 predicate signature and its purpose of abolishing a dynamic object.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/refman/predicates/abolish_object_1.rst.txt#2025-04-06_snippet_0\n\nLANGUAGE: logtalk\nCODE:\n```\nabolish_object(Object)\n```\n\n----------------------------------------\n\nTITLE: Declaring Private Operators in Logtalk\nDESCRIPTION: Shows the syntax for declaring private operators using the private/1 directive. This allows the definition of operators that are only visible within the object containing the directive.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/refman/directives/private_1.rst#2025-04-06_snippet_1\n\nLANGUAGE: Logtalk\nCODE:\n```\nprivate(op(Precedence,Associativity,Operator))\nprivate((op(Precedence,Associativity,Operator), ...))\nprivate([op(Precedence,Associativity,Operator), ...])\n```\n\n----------------------------------------\n\nTITLE: Meta-predicate Template for threaded_once/1-2 in Logtalk\nDESCRIPTION: The meta-predicate template for threaded_once/1 and threaded_once/2, indicating that the first argument is a callable term (0) and the second is any term (*).\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/refman/predicates/threaded_once_1_2.rst.txt#2025-04-06_snippet_1\n\nLANGUAGE: prolog\nCODE:\n```\nthreaded_once(0)\nthreaded_once(0, *)\n```\n\n----------------------------------------\n\nTITLE: Dumping Trace to File in Logtalk\nDESCRIPTION: Example of using the dump_trace object to redirect a goal trace to a file and then stop the redirection.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/tools/debugger/NOTES.md#2025-04-06_snippet_4\n\nLANGUAGE: Prolog\nCODE:\n```\n| ?- dump_trace::start_redirect_to_file('trace.txt', some_goal),\n     dump_trace::stop_redirect_to_file.\n```\n\n----------------------------------------\n\nTITLE: Generating a Character List Identifier\nDESCRIPTION: Example of generating a random identifier as a list of characters with 64 bits (8 bytes) of randomness.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/libraries/ids.rst#2025-04-06_snippet_4\n\nLANGUAGE: logtalk\nCODE:\n```\n| ?- ids(chars, 8)::generate(Identifier).\nIdentifier = ['5','0','8','V',d,'S',c,y,n,o,'A',=]\nyes\n```\n\n----------------------------------------\n\nTITLE: Declaring Dynamic Predicate for Test Counter in Logtalk\nDESCRIPTION: Defines a dynamic predicate test_count_/1 used as a counter for the number of tests executed.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/tap_output_0.rst.txt#2025-04-06_snippet_2\n\nLANGUAGE: Logtalk\nCODE:\n```\ntest_count_/1\n```\n\n----------------------------------------\n\nTITLE: Source Files Structure in Logtalk using BNF\nDESCRIPTION: Defines the structure of Logtalk source files, which can contain directives, clauses, grammar rules, and entity definitions.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/refman/grammar.rst.txt#2025-04-06_snippet_19\n\nLANGUAGE: bnf\nCODE:\n```\nsource_file ::=\n   ( source_file_content )*\n\nsource_file_content ::=\n   source_file_directive\n   | clause\n   | grammar_rule\n   | entity\n```\n\n----------------------------------------\n\nTITLE: Single-Threaded Merge Sort\nDESCRIPTION: Generates a list of 20000 random floats and performs merge sort using a single thread. Uses the 'time/1' predicate to measure performance.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/threads/sorting/NOTES.md#2025-04-06_snippet_2\n\nLANGUAGE: logtalk\nCODE:\n```\ngenerator::list(20000, List), time(msort(1)::msort(List, Sorted)).\n```\n\n----------------------------------------\n\nTITLE: Modes and Number of Proofs for threaded_engine_post/2\nDESCRIPTION: Specifies the modes and number of proofs for the threaded_engine_post/2 predicate. It indicates that the first argument must be instantiated to a non-variable (the engine name) and the second can be any term.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/refman/predicates/threaded_engine_post_2.rst#2025-04-06_snippet_1\n\nLANGUAGE: logtalk\nCODE:\n```\nthreaded_engine_post(@nonvar, @term) - one\n```\n\n----------------------------------------\n\nTITLE: Testing Input Stream Operations with get_char/2 in Logtalk\nDESCRIPTION: Examples of unit tests for get_char/2 predicate that takes a stream alias argument, showing how to set up and verify input operations on named streams.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/devtools/lgtunit.rst#2025-04-06_snippet_37\n\nLANGUAGE: logtalk\nCODE:\n```\ntest(get_char_2_01, true(Char == 'q')) :-\n       ^^set_text_input(in, 'qwerty'),\n       get_char(in, Char).\n\n   test(get_char_2_02, true(Assertion)) :-\n       ^^set_text_input(in, 'qwerty'),\n       get_char(in, _Char),\n       ^^text_input_assertion(in, 'werty', Assertion).\n```\n\n----------------------------------------\n\nTITLE: Defining phrase//1 Method Signature in Prolog\nDESCRIPTION: Defines the signature of the phrase//1 method, which takes a GrammarRuleBody as its argument. This method is used to parse grammar rules using implicit arguments.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/refman/methods/phrase_1.rst#2025-04-06_snippet_0\n\nLANGUAGE: Prolog\nCODE:\n```\nphrase(GrammarRuleBody)\n```\n\n----------------------------------------\n\nTITLE: Printing Logtalk, Prolog backend, and kernel versions\nDESCRIPTION: This snippet prints the versions of Logtalk, the Prolog backend, and the kernel if running as a notebook.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/complements/restrict/NOTES.md#2025-04-06_snippet_0\n\nLANGUAGE: logtalk\nCODE:\n```\n%versions\n```\n\n----------------------------------------\n\nTITLE: Setting Default Hook Object\nDESCRIPTION: Command to set expand_library_alias_paths as the default hook object using Logtalk flags.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/library/expand_library_alias_paths/NOTES.md#2025-04-06_snippet_2\n\nLANGUAGE: logtalk\nCODE:\n```\n| ?- set_logtalk_flag(hook, expand_library_alias_paths).\n```\n\n----------------------------------------\n\nTITLE: Printing Logtalk, Prolog, and Kernel Versions\nDESCRIPTION: Displays version information for Logtalk, the Prolog backend, and the kernel if running in a notebook environment.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/prototypes/NOTES.md#2025-04-06_snippet_0\n\nLANGUAGE: logtalk\nCODE:\n```\n%versions\n```\n\n----------------------------------------\n\nTITLE: Setting Binary Output with Alias\nDESCRIPTION: Creates a temporary file for binary output with given alias and contents. File is created in the tests object directory.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/lgtunit_0.rst.txt#2025-04-06_snippet_56\n\nLANGUAGE: logtalk\nCODE:\n```\nset_binary_output(Alias,Bytes)\n```\n\n----------------------------------------\n\nTITLE: Highlighting Prolog Files with Logtalk Lexer\nDESCRIPTION: Command to use Logtalk lexer for highlighting Prolog source files\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/coding/rouge/NOTES.md#2025-04-06_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\n$ rougify highlight -l logtalk -i source.pl > source.html\n```\n\n----------------------------------------\n\nTITLE: Dependent Storage Predicate\nDESCRIPTION: Private dynamic predicate used as a table to store dependent objects. Can return zero or more solutions when querying stored dependents.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/subject_0.rst.txt#2025-04-06_snippet_5\n\nLANGUAGE: logtalk\nCODE:\n```\ndependent_(Dependent)\n```\n\n----------------------------------------\n\nTITLE: Defining Logtalk Language in Kod Editor\nDESCRIPTION: This code snippet shows the header used by Kod to define the Logtalk language for syntax highlighting. It specifies the title, file type, and file extension for Logtalk source files.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/coding/kod/NOTES.md#2025-04-06_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n# @title Logtalk\n# @matchuti public.logtalk-source\n# @matchext lgt\n```\n\n----------------------------------------\n\nTITLE: Accessing Man Pages for Logtalk Scripts\nDESCRIPTION: Predicate that opens the man page of a specified script for inline browsing. This predicate requires a compatible Prolog backend running on a POSIX system.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/help_info_support_0.rst.txt#2025-04-06_snippet_4\n\nLANGUAGE: Prolog\nCODE:\n```\nman/1\n```\n\n----------------------------------------\n\nTITLE: Querying Pack Dependencies in Logtalk (Prolog)\nDESCRIPTION: Prints a list of all installed packs that depend on the given pack from the specified registry. Fails if the pack is unknown. Requires registry and pack names as atoms.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/packs_0.rst.txt#2025-04-06_snippet_8\n\nLANGUAGE: prolog\nCODE:\n```\ndependents(Registry,Pack)\n```\n\n----------------------------------------\n\nTITLE: HTML5 Object Declaration\nDESCRIPTION: Basic declaration of the html5 object in Logtalk that handles HTML5 content generation. The object is loaded via html(loader) and imports public predicates from the html object.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/html5_0.rst.txt#2025-04-06_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n``html5``\n```\n\n----------------------------------------\n\nTITLE: Installing Logtalk for a Single User on POSIX Systems Using Bash\nDESCRIPTION: These commands install Logtalk in the user's home directory by running the installation script. This approach is suitable for users without administrative privileges who want their own installation.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/INSTALL.md#2025-04-06_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n% cd scripts\n% ./install.sh -p $HOME\n```\n\n----------------------------------------\n\nTITLE: Displaying the Timetable in Logtalk\nDESCRIPTION: Prints the current state of the timetable, showing schedules organized by form, period, teacher, and subject.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/lpa/timetables/NOTES.md#2025-04-06_snippet_5\n\nLANGUAGE: logtalk\nCODE:\n```\ntimetable::print.\n```\n\n----------------------------------------\n\nTITLE: Recognizing a Rhombus with Perpendicularity Check\nDESCRIPTION: Recognizes a rhombus by defining its edges, considering perpendicularity, and querying for its class.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/ncl/figures/NOTES.md#2025-04-06_snippet_7\n\nLANGUAGE: logtalk\nCODE:\n```\nfigures_split(_, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _)::(\\n\\t\\tedge(a, b, 45, 10),\\n\\t\\tedge(b, c,  0, 10),\\n\\t\\tedge(c, d, 45, 10),\\n\\t\\tedge(d, a,  0, 10),\\n\\t\\tperpendicular,\\n\\t\\tclass(Name)\\n\\t).\n```\n\n----------------------------------------\n\nTITLE: Using setof/3 with Self-sent Messages in Logtalk\nDESCRIPTION: Shows how to use setof/3 to find a set of solutions by sending a message to self in Logtalk.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/refman/methods/setof_3.rst#2025-04-06_snippet_4\n\nLANGUAGE: Logtalk\nCODE:\n```\nsetof(Template, ::Message, List)\n```\n\n----------------------------------------\n\nTITLE: Extracting Values from Expected Terms in Logtalk\nDESCRIPTION: Predicates to retrieve the value or error held by an expected term. These throw errors if the term doesn't contain the requested type of content.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/expected_1.rst.txt#2025-04-06_snippet_2\n\nLANGUAGE: Logtalk\nCODE:\n```\nunexpected(Error)\n\nexpected(Value)\n```\n\n----------------------------------------\n\nTITLE: Loading the Elephants Example in Logtalk\nDESCRIPTION: Loads the elephants example module in Logtalk using the loader file.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/elephants/NOTES.md#2025-04-06_snippet_1\n\nLANGUAGE: logtalk\nCODE:\n```\nlogtalk_load(elephants(loader)).\n```\n\n----------------------------------------\n\nTITLE: Stopping Tracing in Logtalk\nDESCRIPTION: Stops tracing of calls compiled in debug mode. Debugger will still stop at defined breakpoints.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/debuggerp_0.rst.txt#2025-04-06_snippet_6\n\nLANGUAGE: Logtalk\nCODE:\n```\nnotrace/0\n```\n\n----------------------------------------\n\nTITLE: Bridge Problem with Hill Climbing\nDESCRIPTION: Solves the bridge crossing problem using hill climbing search with performance monitoring\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/searching/NOTES.md#2025-04-06_snippet_7\n\nLANGUAGE: logtalk\nCODE:\n```\nperformance::init, bridge::initial_state(Initial), hill_climbing(30)::solve(bridge, Initial, Path, Cost), bridge::print_path(Path), performance::report.\n```\n\n----------------------------------------\n\nTITLE: Defining Teacher Assignments in Prolog\nDESCRIPTION: This snippet defines teacher assignments for different year groups and subjects across multiple periods. It uses Prolog syntax to represent the relationships between teachers, subjects, and year groups.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/lpa/timetables/NOTES.md#2025-04-06_snippet_7\n\nLANGUAGE: prolog\nCODE:\n```\nfourth_year: diane teaches accountancy\n\nPERIOD: p4\nfirst_year: brian teaches music\nsecond_year: nicky teaches biology\nthird_year: clive teaches french\nfourth_year: phil teaches prolog++\n\nPERIOD: p5\nfirst_year: clive teaches prolog\nsecond_year: diane teaches accountancy\nthird_year: phil teaches prolog++\nfourth_year: nicky teaches biology\n```\n\n----------------------------------------\n\nTITLE: Defining the false/0 Built-in Method in Logtalk\nDESCRIPTION: The false/0 method is a built-in predicate in Logtalk that always fails. It can be used as a message to an object and is declared as a public method.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/refman/methods/false_0.rst.txt#2025-04-06_snippet_0\n\nLANGUAGE: Prolog\nCODE:\n```\nfalse\n```\n\n----------------------------------------\n\nTITLE: Querying Spreadsheet Contents in Logtalk\nDESCRIPTION: Logtalk query to list all clauses of the db/5 predicate representing spreadsheet cell contents.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/apache_poi/NOTES.md#2025-04-06_snippet_5\n\nLANGUAGE: logtalk\nCODE:\n```\ndb(SheetIndex, RowIndex, ColumnIndex, CellType, CellValue).\n```\n\n----------------------------------------\n\nTITLE: Erasing a Record by Reference in Logtalk\nDESCRIPTION: The erase/1 predicate removes a record identified by its reference. It fails if there is no record with the given reference.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/recorded_database_core_0.rst.txt#2025-04-06_snippet_6\n\nLANGUAGE: logtalk\nCODE:\n```\nerase(Reference)\n```\n\n----------------------------------------\n\nTITLE: Using template argument notation in lgtunit QuickCheck tests\nDESCRIPTION: Demonstrates the new {}/1 template argument notation in lgtunit QuickCheck tests for specifying argument values as-is instead of generating random values.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/RELEASE_NOTES.md#2025-04-06_snippet_68\n\nLANGUAGE: Logtalk\nCODE:\n```\nquick_check(predicate(Arg1, {Arg2}, Arg3)) :- \n    % Test implementation\n```\n\n----------------------------------------\n\nTITLE: Querying CBOR Text String Parsing in Logtalk\nDESCRIPTION: Examples of parsing CBOR-encoded text strings into different Logtalk representations including atoms, chars, and codes.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/libraries/cbor.rst#2025-04-06_snippet_0\n\nLANGUAGE: logtalk\nCODE:\n```\n| ?- cbor::parse([0x65,0x68,0x65,0x6c,0x6c,0x6f], Term).\nTerm = hello\nyes\n\n| ?- cbor(atom)::parse([0x65,0x68,0x65,0x6c,0x6c,0x6f], Term).\nTerm = hello\nyes\n\n| ?- cbor(chars)::parse([0x65,0x68,0x65,0x6c,0x6c,0x6f], Term).\nTerm = chars([h,e,l,l,o])\nyes\n\n| ?- cbor(codes)::parse([0x65,0x68,0x65,0x6c,0x6c,0x6f], Term).\nTerm = codes([104,101,108,108,111])\nyes\n```\n\n----------------------------------------\n\nTITLE: Example of Module Alias Declaration in Logtalk\nDESCRIPTION: Mentioned in the notes as a new example 'module_aliases' that illustrates the use of module aliases, but no actual code snippet is provided in the text.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/RELEASE_NOTES.md#2025-04-06_snippet_35\n\n\n\n----------------------------------------\n\nTITLE: Converting Prolog Comment Directive to Logtalk Info Directive\nDESCRIPTION: Example of rewriting a Prolog comment/2 directive into a Logtalk info/2 directive using the '$lgt_prolog_term_expansion'/2 predicate. Converts a predicate documentation comment into Logtalk's native documentation format.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/userman/migration.rst#2025-04-06_snippet_7\n\nLANGUAGE: prolog\nCODE:\n```\n:- comment(foo/2, \"Brief description of the predicate\").\n```\n\n----------------------------------------\n\nTITLE: Running Whisper Example with 1 Engine\nDESCRIPTION: Executes the whisper query with 1 engine and an initial value of 1, which passes the value through one engine, incrementing it once.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/engines/whisper/NOTES.md#2025-04-06_snippet_3\n\nLANGUAGE: logtalk\nCODE:\n```\nwhisper::whisper(1, 1, Final).\n```\n\n----------------------------------------\n\nTITLE: Logtalk control constructs\nDESCRIPTION: Control constructs for message sending and debugging in Logtalk\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/RELEASE_NOTES.md#2025-04-06_snippet_66\n\nLANGUAGE: Logtalk\nCODE:\n```\n<</2\n```\n\n----------------------------------------\n\nTITLE: Querying File Loading Dependencies in Logtalk\nDESCRIPTION: New property 'parent/1' added to logtalk::loaded_file_property/2 method to retrieve file loading dependencies.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/RELEASE_NOTES.md#2025-04-06_snippet_106\n\nLANGUAGE: Logtalk\nCODE:\n```\nlogtalk::loaded_file_property/2\n```\n\n----------------------------------------\n\nTITLE: Enumerating persisted terms\nDESCRIPTION: Retrieves and displays the persisted terms after reloading.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/persistency/NOTES.md#2025-04-06_snippet_8\n\nLANGUAGE: logtalk\nCODE:\n```\n%%table\npersistency::state(S).\n```\n\n----------------------------------------\n\nTITLE: Defining take/3 predicate in Logtalk\nDESCRIPTION: Defines a predicate to take the first N elements of a list. It fails if the list has fewer than N elements. It is a static predicate that takes N and List as input and returns Elements as output.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/listp_0.rst.txt#2025-04-06_snippet_31\n\nLANGUAGE: Logtalk\nCODE:\n```\ntake(N,List,Elements)\n```\n\n----------------------------------------\n\nTITLE: Checking Specific Engine Name in Logtalk\nDESCRIPTION: This example shows how to check if the engine making the query is a specific engine (in this case, 'worker_1'). The predicate will succeed if the current engine is named 'worker_1', and fail otherwise.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/refman/predicates/threaded_engine_self_1.rst#2025-04-06_snippet_2\n\nLANGUAGE: Prolog\nCODE:\n```\n..., threaded_engine_self(worker_1), ...\n```\n\n----------------------------------------\n\nTITLE: Basic Logtalk Flag Usage\nDESCRIPTION: Example showing how to set the compiler flag for unknown entity warnings to silent mode.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/refman/directives/set_logtalk_flag_2.rst.txt#2025-04-06_snippet_1\n\nLANGUAGE: logtalk\nCODE:\n```\n:- set_logtalk_flag(unknown_entities, silent).\n```\n\n----------------------------------------\n\nTITLE: Verifying Operator Scope Limitation\nDESCRIPTION: Confirms that the locally defined 'edge' operator has not become globally visible by checking if it exists as a current operator.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/operators/NOTES.md#2025-04-06_snippet_10\n\nLANGUAGE: logtalk\nCODE:\n```\ncurrent_op(P, T, edge).\n```\n\n----------------------------------------\n\nTITLE: Converting Pack XML Documentation to HTML in Logtalk\nDESCRIPTION: Shell command example showing how to convert the generated XML documentation files to HTML format using the lgt2html script.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/tools/packs/NOTES.md#2025-04-06_snippet_30\n\nLANGUAGE: bash\nCODE:\n```\n$ cd xml_docs\n$ lgt2html\n```\n\n----------------------------------------\n\nTITLE: Retracting facts from a named database\nDESCRIPTION: Uses db_retract/2 to retrieve and remove facts from the 'foo_db' database one by one.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/named_databases/NOTES.md#2025-04-06_snippet_10\n\nLANGUAGE: logtalk\nCODE:\n```\n%%table\ndb_retract(foo_db, foo(X)).\n```\n\n----------------------------------------\n\nTITLE: Running Parametric Object Philosophers Implementation\nDESCRIPTION: Executes five philosophers with 5 meals each and 5-second maximum think/eat times using the parametric object implementation\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/threads/philosophers/NOTES.md#2025-04-06_snippet_3\n\nLANGUAGE: logtalk\nCODE:\n```\nthreaded_ignore(philosopher(p1,cs1,cs2)::run(5, 5)), threaded_ignore(philosopher(p2,cs2,cs3)::run(5, 5)), threaded_ignore(philosopher(p3,cs3,cs4)::run(5, 5)), threaded_ignore(philosopher(p4,cs4,cs5)::run(5, 5)), threaded_ignore(philosopher(p5,cs1,cs5)::run(5, 5)).\n```\n\n----------------------------------------\n\nTITLE: Abolishing Categories in Logtalk\nDESCRIPTION: Using abolish_category/1 built-in predicate to remove dynamic categories at runtime.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/userman/categories.rst#2025-04-06_snippet_11\n\nLANGUAGE: text\nCODE:\n```\n| ?- abolish_category(Category).\n```\n\n----------------------------------------\n\nTITLE: Template and Modes for initialization/1 Directive in Logtalk\nDESCRIPTION: Shows the template and mode declaration for the initialization/1 directive, indicating it requires a callable term as input.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/refman/directives/initialization_1.rst.txt#2025-04-06_snippet_3\n\nLANGUAGE: logtalk\nCODE:\n```\ninitialization(@callable)\n```\n\n----------------------------------------\n\nTITLE: Finding Option with Default Fallback in Logtalk\nDESCRIPTION: The option/3 predicate attempts to find an option in the options list, falling back to a default value if not found. It unifies Option with a matching option from the list or with Default if no match exists.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/options_protocol_0.rst.txt#2025-04-06_snippet_7\n\nLANGUAGE: prolog\nCODE:\n```\noption(Option,Options,Default)\n```\n\n----------------------------------------\n\nTITLE: Example: Conditional Predicate Definition in Logtalk\nDESCRIPTION: Example of using if/1 to check if a built-in predicate exists and providing a definition when it's absent.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/refman/directives/if_1.rst.txt#2025-04-06_snippet_2\n\nLANGUAGE: logtalk\nCODE:\n```\n:- if(\\+ predicate_property(length(_,_), built_in)).\n\n    length(List, Length) :-\n        ...\n\n:- endif.\n```\n\n----------------------------------------\n\nTITLE: Example Usage - Logtalk abolish/1\nDESCRIPTION: Examples showing different ways to use the abolish/1 method for local, self, and explicit object predicates.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/refman/methods/abolish_1.rst.txt#2025-04-06_snippet_2\n\nLANGUAGE: logtalk\nCODE:\n```\nabolish(Predicate)\n::abolish(Predicate)\nObject::abolish(Predicate)\n```\n\n----------------------------------------\n\nTITLE: Finding Root Using Multi-Threading for Function f1\nDESCRIPTION: Uses multi-threading to concurrently run all root-finding methods for function f1 in the range [1.0, 2.3] with a tolerance of 1.0e-15. Returns both the root value and the method that found it first.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/threads/functions/NOTES.md#2025-04-06_snippet_11\n\nLANGUAGE: logtalk\nCODE:\n```\nfunction_root::find_root(f1, 1.0, 2.3, 1.0e-15, Zero, Method).\n```\n\n----------------------------------------\n\nTITLE: Type Checking Invalid Kelvin Temperature in Logtalk\nDESCRIPTION: Demonstrates validation of an invalid Kelvin temperature (-12.1) which should fail as Kelvin cannot be negative.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/my_types/NOTES.md#2025-04-06_snippet_5\n\nLANGUAGE: logtalk\nCODE:\n```\ntype::valid(temperature(kelvin), -12.1).\n```\n\n----------------------------------------\n\nTITLE: Simplifying Mathematical Expression in Logtalk\nDESCRIPTION: Demonstrates simplification of the expression x^1 + x0 - x1 using the simplify method. The result is 0 as shown in the comment.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/symdiff/NOTES.md#2025-04-06_snippet_2\n\nLANGUAGE: logtalk\nCODE:\n```\n(x**1 + x*0 - x*1)::simplify(S).\n```\n\n----------------------------------------\n\nTITLE: Removing Breakpoints in Logtalk\nDESCRIPTION: Removes all matching predicate and clause breakpoints.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/debuggerp_0.rst.txt#2025-04-06_snippet_11\n\nLANGUAGE: Logtalk\nCODE:\n```\nnospy/1\n```\n\n----------------------------------------\n\nTITLE: Check Versions in Logtalk\nDESCRIPTION: Print Logtalk, Prolog backend, and kernel versions when running as a notebook.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/around_methods/NOTES.md#2025-04-06_snippet_0\n\nLANGUAGE: logtalk\nCODE:\n```\n%versions\n```\n\n----------------------------------------\n\nTITLE: Defining directory_dependency_diagram Object in Logtalk\nDESCRIPTION: This snippet defines the directory_dependency_diagram(Format) object in Logtalk. It specifies the Format parameter, which represents the graph language file format for the generated diagram.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/directory_dependency_diagram_1.rst.txt#2025-04-06_snippet_0\n\nLANGUAGE: logtalk\nCODE:\n```\ndirectory_dependency_diagram(Format)\n```\n\n----------------------------------------\n\nTITLE: Demonstrating String Escaping in Logtalk3\nDESCRIPTION: This snippet shows various ways to escape special characters in double-quoted strings in Logtalk3. It includes examples of escaping double quotes, backslashes, control characters, and using octal and hexadecimal escape sequences.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/coding/subethaedit4/Logtalk.seemode/Contents/Resources/ExampleSyntax.txt#2025-04-06_snippet_3\n\nLANGUAGE: Logtalk\nCODE:\n```\nwrite(\"Double-quoted term with a double-quote (\\\") inside using a control escape sequence.\"),\nwrite(\"Double-quoted term with a backslash (\\\\) inside.\"),\nwrite(\"Double-quoted term with control escape sequences: \\a \\b \\r \\f \\t \\n \\v\"),\nwrite(\"Double-quoted term with an octal escape sequence: \\123\\.\"),\nwrite(\"Double-quoted term with an hexadecimal escape sequence: \\x123f\\.\").\n```\n\n----------------------------------------\n\nTITLE: Checking Enabled Debug Message Groups in Logtalk\nDESCRIPTION: Predicate that enumerates by backtracking the enabled debug(Group) messages for each component. This predicate has static compilation flag and can be used to retrieve or check component and group term combinations.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/debug_messages_0.rst.txt#2025-04-06_snippet_5\n\nLANGUAGE: logtalk\nCODE:\n```\nenabled/2\n```\n\n----------------------------------------\n\nTITLE: Loading Doclet Base Implementation\nDESCRIPTION: Query to load just the base doclet tool implementation without any custom doclet definitions.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/devtools/doclet.rst#2025-04-06_snippet_1\n\nLANGUAGE: prolog\nCODE:\n```\n| ?- logtalk_load(doclet(loader)).\n```\n\n----------------------------------------\n\nTITLE: Configuring Shell Variables for Logtalk TextMate Integration\nDESCRIPTION: Shell variable configuration required for Logtalk bundle commands in TextMate to enable compilation and documentation generation. These variables define the command paths for various Logtalk operations.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/coding/textmate2/NOTES.md#2025-04-06_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nLOGTALK_COMMAND\n\tset to the name of the shell script you use to launch Logtalk \n\tfollowed by the option to run a goal at startup (e.g., `yaplgt -g`)\nLOGTALK_HTML_COMMAND\n\tset to the name of the shell script you use to generate the (X)HTML \n\tdocumentation (e.g., `lgt2html`)\nLOGTALK_PDF_COMMAND\n\tset to the name of the shell script you use to generate the PDF \n\tdocumentation (e.g., `lgt2pdf`)\nLOGTALK_TXT_COMMAND\n\tset to the name of the shell script you use to generate the TXT \n\tdocumentation (e.g., `lgt2txt`)\n```\n\n----------------------------------------\n\nTITLE: Defining Registry Name in Logtalk\nDESCRIPTION: Specifies the registry name predicate. It should return a valid unquoted atom.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/registry_protocol_0.rst.txt#2025-04-06_snippet_0\n\nLANGUAGE: Logtalk\nCODE:\n```\nname(Name)\n```\n\n----------------------------------------\n\nTITLE: Loading the yield example\nDESCRIPTION: This snippet loads the yield example using the logtalk_load/1 predicate.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/engines/yield/NOTES.md#2025-04-06_snippet_1\n\nLANGUAGE: logtalk\nCODE:\n```\nlogtalk_load(yield(loader)).\n```\n\n----------------------------------------\n\nTITLE: Date with Week Number Example\nDESCRIPTION: Example showing date handling with ISO week numbers and year of week.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/iso8601_0.rst.txt#2025-04-06_snippet_2\n\nLANGUAGE: prolog\nCODE:\n```\ndate(_,2000,1,1,DoW,Week)\nDoW=6,Week=week(52,1999)\n```\n\n----------------------------------------\n\nTITLE: Loading Doclet Base Implementation\nDESCRIPTION: Query to load just the base doclet tool implementation without any custom doclet definitions.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/devtools/doclet.rst#2025-04-06_snippet_1\n\nLANGUAGE: prolog\nCODE:\n```\n| ?- logtalk_load(doclet(loader)).\n```\n\n----------------------------------------\n\nTITLE: Loading Logtalk Libraries at Top-Level\nDESCRIPTION: Pattern for loading Logtalk libraries at the top-level interpreter using the shortcut notation.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/QUICK_START.md#2025-04-06_snippet_5\n\nLANGUAGE: prolog\nCODE:\n```\n{<name>(loader)}\n```\n\n----------------------------------------\n\nTITLE: Get Random Seed Predicate in Logtalk\nDESCRIPTION: Predicate to retrieve the current random generator seed. The seed is returned as an opaque ground term. This predicate is synchronized when compiled with thread support.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/pseudo_random_protocol_0.rst.txt#2025-04-06_snippet_0\n\nLANGUAGE: logtalk\nCODE:\n```\nget_seed(Seed)\n```\n\n----------------------------------------\n\nTITLE: Initiating Bird Identification in Logtalk\nDESCRIPTION: A Logtalk query to start the bird identification process, with a condition to skip if running as a Jupyter notebook.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/birds/NOTES.md#2025-04-06_snippet_3\n\nLANGUAGE: logtalk\nCODE:\n```\n(current_object(jupyter) -> true; expert::identify).\n```\n\n----------------------------------------\n\nTITLE: Loading Message Logger\nDESCRIPTION: Loads the message logger example and required library files.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/msglog/NOTES.md#2025-04-06_snippet_0\n\nLANGUAGE: logtalk\nCODE:\n```\nlogtalk_load(msglog(loader)).\n```\n\n----------------------------------------\n\nTITLE: Loading hacker complementing category in Logtalk\nDESCRIPTION: This snippet loads the 'hacker' complementing category from the 'complements_restrict' directory.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/complements/restrict/NOTES.md#2025-04-06_snippet_4\n\nLANGUAGE: logtalk\nCODE:\n```\nlogtalk_load(complements_restrict(hacker)).\n```\n\n----------------------------------------\n\nTITLE: Printing Logtalk, Prolog backend, and kernel versions\nDESCRIPTION: This snippet prints the versions of Logtalk, the Prolog backend, and the kernel if running as a notebook.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/assign_parameters/NOTES.md#2025-04-06_snippet_0\n\nLANGUAGE: logtalk\nCODE:\n```\n%versions\n```\n\n----------------------------------------\n\nTITLE: Loading Logtalk Loops Library\nDESCRIPTION: Command to load the main entities of the loops library using the loader.lgt file.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/library/loops/NOTES.md#2025-04-06_snippet_0\n\nLANGUAGE: prolog\nCODE:\n```\n| ?- logtalk_load(loops(loader)).\n```\n\n----------------------------------------\n\nTITLE: Dynamic Predicates with Runtime-Known Arguments\nDESCRIPTION: Example showing how to assert and retract clauses when the predicate arguments are only known at runtime, using explicit qualification or the external call control construct.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/userman/predicates.rst.txt#2025-04-06_snippet_68\n\nLANGUAGE: logtalk\nCODE:\n```\n:- object(...).\n\n    add(X) :-\n        % assert clause X in module m\n        assertz(m:X),\n        ...\n\n    remove(Y) :-\n        % retract all clauses in user whose head unifies with Y\n        {retractall(Y)},\n        ...\n\n:- end_object.\n```\n\n----------------------------------------\n\nTITLE: Loading the barrier synchronization example\nDESCRIPTION: This code loads the barrier synchronization example using the 'logtalk_load' predicate.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/threads/barriers/NOTES.md#2025-04-06_snippet_1\n\nLANGUAGE: logtalk\nCODE:\n```\nlogtalk_load(barriers(loader)).\n```\n\n----------------------------------------\n\nTITLE: Checking Logtalk and Prolog versions\nDESCRIPTION: Command to display the Logtalk, Prolog backend, and kernel versions when running in notebook format.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/design_patterns/behavioral/null_object/NOTES.md#2025-04-06_snippet_0\n\nLANGUAGE: logtalk\nCODE:\n```\n%versions\n```\n\n----------------------------------------\n\nTITLE: Printing Composite Contents\nDESCRIPTION: Prints the contents of the top-level composite graphic cg, showing the complete object hierarchy\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/design_patterns/structural/composite/NOTES.md#2025-04-06_snippet_7\n\nLANGUAGE: logtalk\nCODE:\n```\ncg::print.\n```\n\n----------------------------------------\n\nTITLE: Generating API Documentation Shell Commands\nDESCRIPTION: Shell commands for generating API documentation from Logtalk source files using lgt2rst tool\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/userman/documenting.rst#2025-04-06_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ cd xml_docs\n$ lgt2rst -s -m\n$ open _build/html/index.html\n```\n\n----------------------------------------\n\nTITLE: Wrapping Prolog Code in Logtalk Object\nDESCRIPTION: This snippet shows how to define a Logtalk object that includes a plain Prolog file, allowing Logtalk metrics to be applied to the Prolog code.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/devtools/code_metrics.rst#2025-04-06_snippet_4\n\nLANGUAGE: logtalk\nCODE:\n```\n:- object(code).\n    :- include('code.pl').\n:- end_object.\n```\n\n----------------------------------------\n\nTITLE: Declaration of nologall Predicate in Logtalk\nDESCRIPTION: Declaration of the nologall/0 predicate that removes all log points in the debugging session. It has a static compilation flag and provides exactly one proof.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/debuggerp_0.rst.txt#2025-04-06_snippet_23\n\nLANGUAGE: logtalk\nCODE:\n```\nnologall/0\n```\n\n----------------------------------------\n\nTITLE: Listing Available Benchmark Tests\nDESCRIPTION: Displays all available benchmark tests with their IDs and corresponding test goals.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/benchmarks/NOTES.md#2025-04-06_snippet_4\n\nLANGUAGE: logtalk\nCODE:\n```\n%%table\nbenchmarks::benchmark(Id, Goal).\n```\n\n----------------------------------------\n\nTITLE: Using logtalk_tester with GitHub for Bug Reporting\nDESCRIPTION: This bash command demonstrates how to use the logtalk_tester script with the -b option to automatically create bug reports on GitHub. It specifies the Prolog backend, GitHub as the bug reporting platform, source directory, and repository URL.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/devtools/issue_creator.rst#2025-04-06_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ logtalk_tester \\\n    -p gnu \\\n    -b github \\\n    -s \"/home/jdoe/foo/\" \\\n    -u https://github.com/jdoe/foo/tree/55aa900775befa135e0d5b48ea63098df8b97f5c/\n```\n\n----------------------------------------\n\nTITLE: Loading Logtalk Intervals Library\nDESCRIPTION: Command to load all entities in the intervals library using the loader.lgt file.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/libraries/intervals.rst.txt#2025-04-06_snippet_0\n\nLANGUAGE: logtalk\nCODE:\n```\n| ?- logtalk_load(intervals(loader)).\n```\n\n----------------------------------------\n\nTITLE: Setting Binary Output with Stream Options\nDESCRIPTION: Creates and opens a temporary file for writing binary content with specified stream options. The file is created in the tests object directory.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/lgtunit_0.rst.txt#2025-04-06_snippet_55\n\nLANGUAGE: logtalk\nCODE:\n```\nset_binary_output(Alias,Contents,Options)\n```\n\n----------------------------------------\n\nTITLE: Checking Predicate Properties\nDESCRIPTION: Query to check predicate properties including line numbers for debugging purposes.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/devtools/debugger.rst.txt#2025-04-06_snippet_6\n\nLANGUAGE: logtalk\nCODE:\n```\n| ?- object_property(Entity, defines(Functor/Arity, Properties)).\n```\n\n----------------------------------------\n\nTITLE: Printing Logtalk, Prolog Backend, and Kernel Versions in Logtalk\nDESCRIPTION: This snippet prints the versions of Logtalk, the Prolog backend, and the kernel if running as a notebook.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/questions/NOTES.md#2025-04-06_snippet_0\n\nLANGUAGE: logtalk\nCODE:\n```\n%versions\n```\n\n----------------------------------------\n\nTITLE: Highlighting Logtalk Source Files with source-highlight\nDESCRIPTION: Example command for converting a Logtalk source file to syntax-highlighted XHTML output while preserving tab formatting.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/coding/source-highlight/NOTES.md#2025-04-06_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n% source-highlight --tab=4 --out-format xhtml --input foo.lgt --output foo.html\n```\n\n----------------------------------------\n\nTITLE: Defining max/2 Predicate for Number Lists in Logtalk\nDESCRIPTION: Determines the maximum value in a list of numbers using arithmetic order. Fails if the list is empty.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/numberlistp_0.rst.txt#2025-04-06_snippet_1\n\nLANGUAGE: Logtalk\nCODE:\n```\nmax(List,Maximum)\n```\n\n----------------------------------------\n\nTITLE: Configuring Logtalk File Type Detection in Vim\nDESCRIPTION: Configuration entry required in filetype.vim to recognize Logtalk source files with .lgt and .logtalk extensions.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/coding/vim/NOTES.md#2025-04-06_snippet_0\n\nLANGUAGE: vim\nCODE:\n```\n\" Logtalk source files\nau BufNewFile,BufRead *.lgt                     setf logtalk\nau BufNewFile,BufRead *.logtalk                 setf logtalk\n```\n\n----------------------------------------\n\nTITLE: Testing Logtalk Loops Library\nDESCRIPTION: Command to load and run the test suite for the loops library using the tester.lgt file\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/libraries/loops.rst#2025-04-06_snippet_1\n\nLANGUAGE: logtalk\nCODE:\n```\n| ?- logtalk_load(loops(tester)).\n```\n\n----------------------------------------\n\nTITLE: Type Generator Template\nDESCRIPTION: Template predicate for generating arbitrary values of specified types.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/arbitrary_0.rst.txt#2025-04-06_snippet_0\n\nLANGUAGE: logtalk\nCODE:\n```\narbitrary(Type, Term)\n```\n\n----------------------------------------\n\nTITLE: Attempting to open vault with hacker's password in Logtalk\nDESCRIPTION: This snippet demonstrates an attempt to open the vault using the hacker's replaced password, which fails.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/complements/restrict/NOTES.md#2025-04-06_snippet_5\n\nLANGUAGE: logtalk\nCODE:\n```\nmy_vault::open('1234567890').\n```\n\n----------------------------------------\n\nTITLE: Installing Logtalk System-wide on POSIX Systems with Administrative Rights\nDESCRIPTION: These commands perform a system-wide Logtalk installation using sudo. This installation makes all files read-only for non-admin users to prevent tampering, suitable for shared environments like computer labs.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/INSTALL.md#2025-04-06_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n% cd scripts\n% sudo ./install.sh\n```\n\n----------------------------------------\n\nTITLE: Creating Initial Timetable Entries in Logtalk\nDESCRIPTION: Populates the timetable with 2 entries, which creates a partially filled timetable with teachers, subjects, and forms assigned to specific periods.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/lpa/timetables/NOTES.md#2025-04-06_snippet_4\n\nLANGUAGE: logtalk\nCODE:\n```\ntimetable::make(2).\n```\n\n----------------------------------------\n\nTITLE: Testing Logtalk Genint Library\nDESCRIPTION: Command to load and run tests for the genint library predicates using the tester.lgt file\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/library/genint/NOTES.md#2025-04-06_snippet_1\n\nLANGUAGE: logtalk\nCODE:\n```\n| ?- logtalk_load(genint(tester)).\n```\n\n----------------------------------------\n\nTITLE: Asserting Clauses in Different Scopes in Logtalk\nDESCRIPTION: Illustrates how to use assertz/1 to assert clauses with different scopes (private, protected, public) depending on how the method is called.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/refman/methods/assertz_1.rst.txt#2025-04-06_snippet_1\n\nLANGUAGE: Logtalk\nCODE:\n```\nassertz(Clause)\n::assertz(Clause)\nObject::assertz(Clause)\n```\n\n----------------------------------------\n\nTITLE: Four-Threaded Prime Calculation\nDESCRIPTION: Calculates prime numbers in range 1-500000 using four threads and measures execution time.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/threads/primes/NOTES.md#2025-04-06_snippet_4\n\nLANGUAGE: logtalk\nCODE:\n```\ntime(primes(4)::primes(1, 500000, Primes)).\n```\n\n----------------------------------------\n\nTITLE: Entity-Local Operators in Logtalk Example File\nDESCRIPTION: Complete example of using entity-local operators in a Logtalk file. This code demonstrates how operators declared within an object scope affect term reading and writing within that object, but not outside it.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/refman/directives/op_3.rst#2025-04-06_snippet_3\n\nLANGUAGE: logtalk\nCODE:\n```\n:- initialization((write(<=>(1,2)), nl)).\n\n:- object(ops).\n\n    :- op(700, xfx, <=>).\n\n    :- public(w/1).\n    w(Term) :-\n        write(Term), nl.\n\n    :- public(r/1).\n    r(Term) :-\n        read(Term).\n\n:- end_object.\n```\n\n----------------------------------------\n\nTITLE: Entity-Local Operators in Logtalk Example File\nDESCRIPTION: Complete example of using entity-local operators in a Logtalk file. This code demonstrates how operators declared within an object scope affect term reading and writing within that object, but not outside it.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/refman/directives/op_3.rst#2025-04-06_snippet_3\n\nLANGUAGE: logtalk\nCODE:\n```\n:- initialization((write(<=>(1,2)), nl)).\n\n:- object(ops).\n\n    :- op(700, xfx, <=>).\n\n    :- public(w/1).\n    w(Term) :-\n        write(Term), nl.\n\n    :- public(r/1).\n    r(Term) :-\n        read(Term).\n\n:- end_object.\n```\n\n----------------------------------------\n\nTITLE: Finding Root Using Muller Method for Function f2\nDESCRIPTION: Demonstrates using Muller's method to find the root of function f2 in the range [1.0, 1.3] with a tolerance of 1.0e-15.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/threads/functions/NOTES.md#2025-04-06_snippet_7\n\nLANGUAGE: logtalk\nCODE:\n```\nmuller::find_root(f2, 1.0, 1.3, 1.0e-15, Zero).\n```\n\n----------------------------------------\n\nTITLE: Cleaning Up Polygon Instances and Relations in Logtalk\nDESCRIPTION: Removes all concentric tuples and deletes polygon instances to clean up the example state.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/polygons/NOTES.md#2025-04-06_snippet_6\n\nLANGUAGE: logtalk\nCODE:\n```\nconcentric::remove_all_tuples.\n\ntriangle::delete(t).\n\nsquare::delete(s).\n\npentagon::delete(p).\n\nhexagon::delete(h).\n```\n\n----------------------------------------\n\nTITLE: Four-Thread Fibonacci Calculation\nDESCRIPTION: Calculates the 24th Fibonacci number using four threads with timing measurement.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/threads/fibonacci/NOTES.md#2025-04-06_snippet_3\n\nLANGUAGE: logtalk\nCODE:\n```\ntime(fibonacci(4)::fib(24, N)).\n```\n\n----------------------------------------\n\nTITLE: Retracting Clause from Dynamic Predicate in Logtalk\nDESCRIPTION: Example of retracting a matching clause from a dynamic predicate in the current context (this).\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/refman/methods/retract_1.rst#2025-04-06_snippet_2\n\nLANGUAGE: Prolog\nCODE:\n```\nretract(Clause)\n```\n\n----------------------------------------\n\nTITLE: Hot Patching an Object with the listing Category in Logtalk\nDESCRIPTION: Example of dynamically creating a complementing category to add listing capabilities to an existing object for debugging purposes.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/libraries/listing.rst#2025-04-06_snippet_4\n\nLANGUAGE: logtalk\nCODE:\n```\n| ?- create_category(patch, [extends(listing),complements(data)], [], []).\nyes\n\n| ?- data::listing.\n...\n```\n\n----------------------------------------\n\nTITLE: Defining Type Error in Logtalk\nDESCRIPTION: Specifies the structure for a type error in Logtalk, where Term is not of the expected Type.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/type_0.rst.txt#2025-04-06_snippet_5\n\nLANGUAGE: prolog\nCODE:\n```\ntype_error(Type,Term)\n```\n\n----------------------------------------\n\nTITLE: Defining once/1 Method Signature\nDESCRIPTION: The basic syntax and signature for the once/1 method that takes a Goal parameter.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/refman/methods/once_1.rst.txt#2025-04-06_snippet_0\n\nLANGUAGE: logtalk\nCODE:\n```\nonce(Goal)\n```\n\n----------------------------------------\n\nTITLE: Generating Gamma Distribution Values in Logtalk\nDESCRIPTION: Predicate that returns a standard gamma distributed random value based on the provided shape parameter. It takes a positive float as the shape parameter and returns a float value.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/sampling_protocol_0.rst.txt#2025-04-06_snippet_3\n\nLANGUAGE: logtalk\nCODE:\n```\nstandard_gamma(Shape,Value)\n```\n\n----------------------------------------\n\nTITLE: Print Goal Hook Usage Examples\nDESCRIPTION: Demonstrates the three ways to print goals using prefix operators: - (before), + (after), and * (before and after). The hook uses the comment message for printing.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/print_goal_hook_0.rst.txt#2025-04-06_snippet_0\n\nLANGUAGE: logtalk\nCODE:\n```\n- Goal    % prints goal before calling it\n+ Goal    % prints goal after calling it\n* Goal    % prints goal before and after calling it\n```\n\n----------------------------------------\n\nTITLE: Reading CSV File Line by Line and Saving as Object Predicates in Logtalk\nDESCRIPTION: Reads a CSV file line by line and saves the data as clauses for the specified object predicate. Fails if the file cannot be parsed. Requires file name, object identifier, and predicate indicator as input.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/csv_protocol_0.rst.txt#2025-04-06_snippet_4\n\nLANGUAGE: Logtalk\nCODE:\n```\nread_file_by_line(File,Object,Predicate)\n```\n\n----------------------------------------\n\nTITLE: Phrase Built-in Methods in Logtalk\nDESCRIPTION: Runtime calls to the phrase/2-3 built-in methods where the first argument is only known at runtime now ensure exceptions include the error/2 wrapper with its context argument.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/RELEASE_NOTES.md#2025-04-06_snippet_94\n\nLANGUAGE: Logtalk\nCODE:\n```\nphrase/2-3\n```\n\n----------------------------------------\n\nTITLE: Checking Versions in Logtalk\nDESCRIPTION: Prints Logtalk, Prolog backend, and kernel versions when running in a notebook environment.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/parametric/NOTES.md#2025-04-06_snippet_0\n\nLANGUAGE: logtalk\nCODE:\n```\n%versions\n```\n\n----------------------------------------\n\nTITLE: Running All Benchmark Tests with Custom Repetitions\nDESCRIPTION: Executes all benchmark tests 100,000 times each for more accurate measurements.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/benchmarks/NOTES.md#2025-04-06_snippet_6\n\nLANGUAGE: logtalk\nCODE:\n```\nbenchmarks::run(100000).\n```\n\n----------------------------------------\n\nTITLE: Defining Meta-Predicate Template Modes in Logtalk\nDESCRIPTION: Implementation of new meta-predicate template mode indicators where (/) represents a predicate indicator, [/] represents a list of predicate indicators, and [0] represents a list of goals.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/RELEASE_NOTES.md#2025-04-06_snippet_134\n\nLANGUAGE: Logtalk\nCODE:\n```\nmeta_predicate template_mode(\"/\", \"/\", \"[/]\", \"[0]\")\n```\n\n----------------------------------------\n\nTITLE: Logtalk Directory Loading\nDESCRIPTION: Predicates for loading documentation from a directory or directory and subdirectories\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/RELEASE_NOTES.md#2025-04-06_snippet_81\n\nLANGUAGE: Logtalk\nCODE:\n```\ndirectory/1-2\nrdirectory/1-2\n```\n\n----------------------------------------\n\nTITLE: Object Definition Syntax in Logtalk using BNF\nDESCRIPTION: Specifies the syntax for defining objects in Logtalk, including directives, object identifiers, and various relationship types such as prototype relations and non-prototype relations.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/refman/grammar.rst.txt#2025-04-06_snippet_1\n\nLANGUAGE: bnf\nCODE:\n```\nobject ::=\n   begin_object_directive ( object_term )* end_object_directive\n\nbegin_object_directive ::=\n   \":- object(\" object_identifier ( \",\" object_relations )? \").\" \n\nend_object_directive ::=\n   \":- end_object.\"\n\nobject_relations ::=\n   prototype_relations\n   | non_prototype_relations\n\nprototype_relations ::=\n   prototype_relation\n   | prototype_relation \",\" prototype_relations\n\nprototype_relation ::=\n   implements_protocols\n   | imports_categories\n   | extends_objects\n\nnon_prototype_relations ::=\n   non_prototype_relation\n   | non_prototype_relation \",\" non_prototype_relations\n\nnon_prototype_relation ::=\n   implements_protocols\n   | imports_categories\n   | instantiates_classes\n   | specializes_classes\n```\n\n----------------------------------------\n\nTITLE: Assertion Predicate Definition - Single Argument\nDESCRIPTION: Defines the assertion/1 predicate that checks if an assertion is true. It uses structured message printing with silent messages for success and error messages for failure.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/assertions_1.rst.txt#2025-04-06_snippet_0\n\nLANGUAGE: logtalk\nCODE:\n```\nassertion(Goal)\n```\n\n----------------------------------------\n\nTITLE: Adding another term\nDESCRIPTION: Adds a new term 'c' to the persistency object's state.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/persistency/NOTES.md#2025-04-06_snippet_9\n\nLANGUAGE: logtalk\nCODE:\n```\npersistency::add(c).\n```\n\n----------------------------------------\n\nTITLE: Testing Patched is_proper_list/1 Predicate with Partial List\nDESCRIPTION: Tests the patched implementation of is_proper_list/1 with a partial list [a,b,c|_], which should correctly return false.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/patching/NOTES.md#2025-04-06_snippet_5\n\nLANGUAGE: logtalk\nCODE:\n```\nbroken::is_proper_list([a,b,c|_]).\n```\n\n----------------------------------------\n\nTITLE: Dynamic Directive Usage Example\nDESCRIPTION: Example showing how to use the dynamic/0 directive in a Logtalk source file. The directive is preceded by the directive operator :-\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/refman/directives/dynamic_0.rst.txt#2025-04-06_snippet_1\n\nLANGUAGE: logtalk\nCODE:\n```\n:- dynamic.\n```\n\n----------------------------------------\n\nTITLE: Meta Non-Terminal Example Implementation\nDESCRIPTION: Demonstrates a practical example of using meta_non_terminal directive to define a phrase non-terminal with a meta-argument.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/refman/directives/meta_non_terminal_1.rst.txt#2025-04-06_snippet_2\n\nLANGUAGE: logtalk\nCODE:\n```\n:- meta_non_terminal(phrase(1, *)).\nphrase(X, T) --> call(X, T).\n```\n\n----------------------------------------\n\nTITLE: Run All Benchmarks\nDESCRIPTION: Executes all benchmark tests with 1000 repetitions.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/bench/NOTES.md#2025-04-06_snippet_2\n\nLANGUAGE: logtalk\nCODE:\n```\nrun.\n```\n\n----------------------------------------\n\nTITLE: Pinning a Pack in Logtalk\nDESCRIPTION: Example showing how to pin a pack to prevent accidental updating or deleting.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/tools/packs/NOTES.md#2025-04-06_snippet_31\n\nLANGUAGE: prolog\nCODE:\n```\n| ?- packs::pin(bar).\n```\n\n----------------------------------------\n\nTITLE: Instance Superclass Declaration Lookup\nDESCRIPTION: Demonstrates predicate declaration lookup in class superclasses.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/predicate_lookups/NOTES.md#2025-04-06_snippet_8\n\nLANGUAGE: logtalk\nCODE:\n```\nsailplane::purpose(Purpose).\n```\n\n----------------------------------------\n\nTITLE: Manipulating Rectangle Parametric Object in Logtalk\nDESCRIPTION: Demonstrates initializing and moving a rectangle parametric object.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/parvars/NOTES.md#2025-04-06_snippet_3\n\nLANGUAGE: logtalk\nCODE:\n```\nrectangle(W, H, X, Y)::init, rectangle(W, H, X, Y)::move(3, 4, NR), NR::position(X2, Y2).\n```\n\n----------------------------------------\n\nTITLE: Sending Message Example in Logtalk\nDESCRIPTION: Demonstrates sending a message to an object in Logtalk, which generates before and after events for profiling.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/tutorial/profiling.rst.txt#2025-04-06_snippet_0\n\nLANGUAGE: logtalk\nCODE:\n```\n| ?- foo::bar(X).\n\nX = 1\nyes\n```\n\n----------------------------------------\n\nTITLE: Complemented Objects Syntax in Logtalk using BNF\nDESCRIPTION: Defines the syntax for referring to complemented objects in Logtalk, including individual objects, sequences, and lists.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/refman/grammar.rst.txt#2025-04-06_snippet_12\n\nLANGUAGE: bnf\nCODE:\n```\ncomplemented_objects ::=\n   object_identifier\n   | complemented_object_sequence\n   | complemented_object_list\n\ncomplemented_object_sequence ::=\n   object_identifier\n   | object_identifier \",\" complemented_object_sequence\n\ncomplemented_object_list ::=\n   \"[\" complemented_object_sequence \"]\"\n```\n\n----------------------------------------\n\nTITLE: Loading FFT Implementation in Logtalk\nDESCRIPTION: Loads the FFT implementation and required library files using the logtalk_load/1 predicate.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/threads/fft/NOTES.md#2025-04-06_snippet_0\n\nLANGUAGE: logtalk\nCODE:\n```\nlogtalk_load(fft(loader)).\n```\n\n----------------------------------------\n\nTITLE: Loading Logtalk Queue Library\nDESCRIPTION: Command to load all entities in the queue library using the loader file.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/libraries/queues.rst.txt#2025-04-06_snippet_0\n\nLANGUAGE: logtalk\nCODE:\n```\n| ?- logtalk_load(queues(loader)).\n```\n\n----------------------------------------\n\nTITLE: Creating a Stand-alone Prototype Object in Logtalk\nDESCRIPTION: Example showing how to create a simple stand-alone object (prototype) named 'translator' with a public int/2 predicate that has one clause defining int(0, zero).\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/refman/predicates/create_object_4.rst.txt#2025-04-06_snippet_2\n\nLANGUAGE: logtalk\nCODE:\n```\n% create a stand-alone object (a prototype):\n| ?- create_object(\n        translator,\n        [],\n        [public(int/2)],\n        [int(0, zero)]\n    ).\n```\n\n----------------------------------------\n\nTITLE: Enumerating Conditional Breakpoints in Logtalk\nDESCRIPTION: Enumerates, by backtracking, all conditional and triggered breakpoints.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/debuggerp_0.rst.txt#2025-04-06_snippet_13\n\nLANGUAGE: Logtalk\nCODE:\n```\nspying/3\n```\n\n----------------------------------------\n\nTITLE: Type Checking Fahrenheit Temperature in Logtalk\nDESCRIPTION: Validates if a given value (101.2) is a valid Fahrenheit temperature.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/my_types/NOTES.md#2025-04-06_snippet_3\n\nLANGUAGE: logtalk\nCODE:\n```\ntype::check(temperature(fahrenheit), 101.2).\n```\n\n----------------------------------------\n\nTITLE: Loading Blackboard Example\nDESCRIPTION: Loads the blackboard example and required library files into the Logtalk environment.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/threads/blackboard/NOTES.md#2025-04-06_snippet_1\n\nLANGUAGE: logtalk\nCODE:\n```\nlogtalk_load(blackboard(loader)).\n```\n\n----------------------------------------\n\nTITLE: Method Signature for term_expansion/2\nDESCRIPTION: Defines the signature and modes for the term_expansion/2 method, which takes a term and returns its expansion.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/refman/methods/term_expansion_2.rst.txt#2025-04-06_snippet_0\n\nLANGUAGE: prolog\nCODE:\n```\nterm_expansion(Term, Expansion)\n```\n\n----------------------------------------\n\nTITLE: Testing the Heaps Library in Logtalk\nDESCRIPTION: Command to load and run the tests for the heaps library using the tester.lgt file.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/libraries/heaps.rst#2025-04-06_snippet_1\n\nLANGUAGE: prolog\nCODE:\n```\n| ?- logtalk_load(heaps(tester)).\n```\n\n----------------------------------------\n\nTITLE: Conditionally Enabling Bug Report Creation in CI/CD Pipeline\nDESCRIPTION: Example of using an environment variable to conditionally enable or disable automatic bug report creation in a CI/CD pipeline.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/devtools/issue_creator.rst.txt#2025-04-06_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nlogtalk_tester.sh $AUTO_BUG_REPORTS -p ...\n```\n\n----------------------------------------\n\nTITLE: Querying Prototype Properties in Logtalk\nDESCRIPTION: Demonstrates querying the number of sides for a square object, which is defined as a prototype that can be used as a template for other objects.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/shapes/ph/NOTES.md#2025-04-06_snippet_2\n\nLANGUAGE: logtalk\nCODE:\n```\nsquare::nsides(N).\n```\n\n----------------------------------------\n\nTITLE: Adding Ellipse to Second Composite\nDESCRIPTION: Adds ellipse e4 to the composite graphic cg2\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/design_patterns/structural/composite/NOTES.md#2025-04-06_snippet_5\n\nLANGUAGE: logtalk\nCODE:\n```\ncg2::add(e4).\n```\n\n----------------------------------------\n\nTITLE: Testing First Diamond Problem Variant\nDESCRIPTION: Sends message m/0 to object d1, demonstrating the first variant of the diamond problem where Logtalk's predicate lookup algorithm determines which inherited definition is visible.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/diamonds/NOTES.md#2025-04-06_snippet_3\n\nLANGUAGE: logtalk\nCODE:\n```\nd1::m.\n```\n\n----------------------------------------\n\nTITLE: FCube GNU Banner Predicate\nDESCRIPTION: Predicate that prints the copyright and license information banner.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/fcube_0.rst.txt#2025-04-06_snippet_0\n\nLANGUAGE: logtalk\nCODE:\n```\ngnu/0\n```\n\n----------------------------------------\n\nTITLE: IDDFS Interpreter Object Declaration in Logtalk\nDESCRIPTION: Object declaration for an iterative deepening depth-first interpreter with a configurable increment parameter. The object implements the interpreterp protocol and uses counter and dfs_interpreter objects. Default increment value is 1.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/iddfs_interpreter_1.rst.txt#2025-04-06_snippet_0\n\nLANGUAGE: logtalk\nCODE:\n```\niddfs_interpreter(Increment)\n```\n\n----------------------------------------\n\nTITLE: Defining Event Registry Object in Logtalk\nDESCRIPTION: This snippet defines the 'event_registry' object in Logtalk. It specifies the object's metadata, compilation flags, and implemented protocol. The object is used for managing before and after events registry predicates.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/event_registry_0.rst.txt#2025-04-06_snippet_0\n\nLANGUAGE: Logtalk\nCODE:\n```\n\"event_registry\"\n==================\n\nBefore and after events registry predicates.\n\n| **Availability:** \n|    ``logtalk_load(events(loader))``\n\n| **Author:** Paulo Moura\n| **Version:** 1:1:0\n| **Date:** 2009-10-08\n\n| **Compilation flags:**\n|    ``static, context_switching_calls, events``\n\n\n| **Implements:**\n|    ``public`` :ref:`event_registryp <event_registryp/0>`\n\n| **Remarks:**\n|    (none)\n\n| **Inherited public predicates:**\n|     :ref:`event_registryp/0::del_monitors/0`  :ref:`event_registryp/0::del_monitors/4`  :ref:`event_registryp/0::monitor/1`  :ref:`event_registryp/0::monitor/4`  :ref:`event_registryp/0::monitored/1`  :ref:`event_registryp/0::monitors/1`  :ref:`event_registryp/0::set_monitor/4`\n```\n\n----------------------------------------\n\nTITLE: Describing the eos//0 non-terminal in Logtalk\nDESCRIPTION: Describes the syntax and implementation of the eos//0 method which is used to match the end-of-input in DCG rules by checking that the implicit difference list unifies with []-[].\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/refman/methods/eos_0.rst.txt#2025-04-06_snippet_0\n\nLANGUAGE: logtalk\nCODE:\n```\neos\n```\n\n----------------------------------------\n\nTITLE: Testing the Ports Profiler in Logtalk\nDESCRIPTION: Loads the tester file for the ports_profiler tool to run tests.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/devtools/ports_profiler.rst.txt#2025-04-06_snippet_1\n\nLANGUAGE: Prolog\nCODE:\n```\n| ?- logtalk_load(ports_profiler(tester)).\n```\n\n----------------------------------------\n\nTITLE: Setting File-Specific Hook Object in Logtalk\nDESCRIPTION: Demonstrates how to set a file-specific hook object (identity_hook) using a directive at the beginning of a source file.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/library/hook_objects/NOTES.md#2025-04-06_snippet_3\n\nLANGUAGE: Logtalk\nCODE:\n```\n:- set_logtalk_flag(hook, identity_hook).\n```\n\n----------------------------------------\n\nTITLE: Defining average/2 Predicate for Number Lists in Logtalk\nDESCRIPTION: Calculates the arithmetic mean of a list of numbers. Fails if the list is empty.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/numberlistp_0.rst.txt#2025-04-06_snippet_5\n\nLANGUAGE: Logtalk\nCODE:\n```\naverage(List,Average)\n```\n\n----------------------------------------\n\nTITLE: Declaring class_hierarchy Category in Logtalk\nDESCRIPTION: This snippet declares the class_hierarchy category in Logtalk. It specifies the category name and indicates that it implements the public class_hierarchyp protocol.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/class_hierarchy_0.rst.txt#2025-04-06_snippet_0\n\nLANGUAGE: Logtalk\nCODE:\n```\n``class_hierarchy``\n```\n\n----------------------------------------\n\nTITLE: Defining setof/3 Method Signature\nDESCRIPTION: The main signature of the setof/3 method that collects unique solutions for a goal into a sorted list.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/refman/methods/setof_3.rst.txt#2025-04-06_snippet_0\n\nLANGUAGE: prolog\nCODE:\n```\nsetof(Template, Goal, List)\n```\n\n----------------------------------------\n\nTITLE: Creating New Queue\nDESCRIPTION: Example of creating a new empty queue using the new/1 predicate.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/libraries/queues.rst.txt#2025-04-06_snippet_2\n\nLANGUAGE: logtalk\nCODE:\n```\n| ?- queue::new(Queue).\nQueue = ...\nyes\n```\n\n----------------------------------------\n\nTITLE: Temporal Equality Relation\nDESCRIPTION: Checks if Interval1 is equal to Interval2. Returns zero or one solutions.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/intervalp_0.rst.txt#2025-04-06_snippet_14\n\nLANGUAGE: Logtalk\nCODE:\n```\nequal(Interval1,Interval2)\n```\n\n----------------------------------------\n\nTITLE: Alternative XPCE Profiler Usage with Logtalk\nDESCRIPTION: Shows an alternative way to use the SWI-Prolog XPCE profiler with Logtalk by using the << operator to avoid profiling the compiler.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/devtools/profiler.rst#2025-04-06_snippet_3\n\nLANGUAGE: prolog\nCODE:\n```\n?- logtalk << (prolog_statistics:profile(... :: ...)).\n...\n```\n\n----------------------------------------\n\nTITLE: Parsing Number (Integer or Float) in Logtalk\nDESCRIPTION: Parses a number, which can be either an integer or a float. Accepts a number as input or output. Returns zero or one proof.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/number_grammars_1.rst.txt#2025-04-06_snippet_9\n\nLANGUAGE: Logtalk\nCODE:\n```\nnumber(Number)\n```\n\n----------------------------------------\n\nTITLE: Testing Optionals Library in Logtalk\nDESCRIPTION: This snippet shows how to load the tester file to test the optionals library predicates.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/libraries/optionals.rst#2025-04-06_snippet_1\n\nLANGUAGE: Prolog\nCODE:\n```\n| ?- logtalk_load(optionals(tester)).\n```\n\n----------------------------------------\n\nTITLE: Bibliographic Reference Citation\nDESCRIPTION: Academic citation for the paper detailing Logtalk's meta-predicate implementation and safety rules.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/securemp/NOTES.md#2025-04-06_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n@inproceedings{pmoura09b,\n\tauthor = {Paulo Moura},\n\ttitle = \"{Secure Implementation of Meta-predicates}\",\n\tbooktitle = {Proceedings of the Eleventh International Symposium on Practical Aspects of Declarative Languages},\n\teditor = \"Andy Gill and Terrance Swift\",\n\tseries = \"Lecture Notes in Computer Science\",\n\tvolume = \"5418\",\n\tmonth = jan,\n\tyear = {2009},\n\tpages = \"269--283\",\n\tpublisher = \"Springer-Verlag\",\n\taddress = \"Berlin Heidelberg\",\n}\n```\n\n----------------------------------------\n\nTITLE: Differentiating and Simplifying Polynomial in Logtalk\nDESCRIPTION: Differentiates the expression 2x^3 + x^2 - 4x and then simplifies the result. The intermediate differentiation result and final simplified form are shown in the comment.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/symdiff/NOTES.md#2025-04-06_snippet_3\n\nLANGUAGE: logtalk\nCODE:\n```\n(2*x**3 + x**2 - 4*x)::diff(D), D::simplify(S).\n```\n\n----------------------------------------\n\nTITLE: Loading Interpreter Pattern Implementation\nDESCRIPTION: Loads the interpreter design pattern sample implementation from the behavioral patterns directory.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/design_patterns/behavioral/interpreter/NOTES.md#2025-04-06_snippet_1\n\nLANGUAGE: logtalk\nCODE:\n```\nlogtalk_load(design_patterns('behavioral/interpreter/loader')).\n```\n\n----------------------------------------\n\nTITLE: Printing Version Information in Logtalk\nDESCRIPTION: Command to print Logtalk, Prolog backend, and kernel versions when executed in a Jupyter notebook environment.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/tests_dsl/NOTES.md#2025-04-06_snippet_0\n\nLANGUAGE: logtalk\nCODE:\n```\n%versions\n```\n\n----------------------------------------\n\nTITLE: Defining approximately_equal/2 in Logtalk\nDESCRIPTION: Definition of the new approximately_equal/2 predicate added to the number library object.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/RELEASE_NOTES.md#2025-04-06_snippet_8\n\nLANGUAGE: Logtalk\nCODE:\n```\napproximately_equal(X, Y) :- ...\n```\n\n----------------------------------------\n\nTITLE: Starting Computer Using Facade with Default Components\nDESCRIPTION: This snippet shows an alternative way to start the computer using the facade interface with default components.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/design_patterns/structural/facade/NOTES.md#2025-04-06_snippet_3\n\nLANGUAGE: logtalk\nCODE:\n```\ncomputer_facade::start.\n```\n\n----------------------------------------\n\nTITLE: Loading Logtalk Tutor Tool\nDESCRIPTION: Command to load the tutor tool which provides enhanced compiler error messages and warnings with explanations.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/QUICK_START.md#2025-04-06_snippet_2\n\nLANGUAGE: prolog\nCODE:\n```\n{tutor(loader)}\n```\n\n----------------------------------------\n\nTITLE: Throwing Instantiation Error in Logtalk\nDESCRIPTION: This snippet demonstrates the usage of the instantiation_error/0 built-in method in Logtalk. It throws an instantiation error when called, which is equivalent to throwing an error with the context of the current execution.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/refman/methods/instantiation_error_0.rst.txt#2025-04-06_snippet_0\n\nLANGUAGE: Logtalk\nCODE:\n```\ninstantiation_error\n```\n\n----------------------------------------\n\nTITLE: Defining rule/2 Predicate in Logtalk Database Protocol\nDESCRIPTION: Defines the rule/2 predicate for the databasep protocol. This predicate is automatically generated using term-expansion.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/databasep_0.rst.txt#2025-04-06_snippet_2\n\nLANGUAGE: Logtalk\nCODE:\n```\nrule(Head,Body)\n```\n\n----------------------------------------\n\nTITLE: Complete Date Information Example\nDESCRIPTION: Example showing full date handling including Julian day, calendar date, day of week, week number and day of year.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/iso8601_0.rst.txt#2025-04-06_snippet_3\n\nLANGUAGE: prolog\nCODE:\n```\ndate(2451649,Year,Month,Day,_,_,DoY)\nYear=2000,Month=4,Day=14,DoY=105\n```\n\n----------------------------------------\n\nTITLE: Defining throw/1 Method Signature in Logtalk\nDESCRIPTION: Defines the signature of the throw/1 built-in method in Logtalk. This method is used to throw an exception and is declared as private, meaning it cannot be used as a message to an object.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/refman/methods/throw_1.rst.txt#2025-04-06_snippet_0\n\nLANGUAGE: Logtalk\nCODE:\n```\nthrow(Exception)\n```\n\n----------------------------------------\n\nTITLE: Profiling the tagged representation\nDESCRIPTION: This snippet profiles the count_atomics/3 predicate using the tagged representation with a sample input list.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/defaulty/NOTES.md#2025-04-06_snippet_6\n\nLANGUAGE: logtalk\nCODE:\n```\ntagged::count_atomics([a(a),n(1),o(_),a(b),n(2),o(_),a(c),n(3),o(_)], As, Ns).\n```\n\n----------------------------------------\n\nTITLE: Collecting One or More Terminals in Logtalk Sequence Grammar\nDESCRIPTION: Eagerly collects one or more terminals that satisfy the given closure. It takes a callable closure and returns a list of atomic terminals.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/sequence_grammars_0.rst.txt#2025-04-06_snippet_1\n\nLANGUAGE: Logtalk\nCODE:\n```\none_or_more(Closure,Terminals)\n```\n\n----------------------------------------\n\nTITLE: Loading the Redis Library in Logtalk\nDESCRIPTION: Command to load the Redis client library in Logtalk by loading the loader.lgt file. This is the first step required to use the Redis library functionalities.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/library/redis/NOTES.md#2025-04-06_snippet_0\n\nLANGUAGE: Prolog\nCODE:\n```\n| ?- logtalk_load(redis(loader)).\n```\n\n----------------------------------------\n\nTITLE: Testing term expansion within protected object\nDESCRIPTION: Demonstrates term expansion within the desc_protected object using a test predicate.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/expansion/NOTES.md#2025-04-06_snippet_10\n\nLANGUAGE: logtalk\nCODE:\n```\ndesc_protected::test_term_expansion(8, Term).\n```\n\n----------------------------------------\n\nTITLE: Generating Documentation on POSIX Systems\nDESCRIPTION: These commands build the Logtalk manuals and update HTML documentation on POSIX systems. They should be run after the basic installation when working with a source archive or git repo clone.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/INSTALL.md#2025-04-06_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\n$ cd manuals/sources\n$ ./build_manuals.sh\n$ cd ../../scripts\n$ ./update_html_docs.sh\n```\n\n----------------------------------------\n\nTITLE: Water Jugs Problem with Breadth-First Search\nDESCRIPTION: Solves the water jugs problem using breadth-first search with performance monitoring\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/searching/NOTES.md#2025-04-06_snippet_8\n\nLANGUAGE: logtalk\nCODE:\n```\nperformance::init, water_jug::initial_state(Initial), breadth_first(6)::solve(water_jug, Initial, Path), water_jug::print_path(Path), performance::report.\n```\n\n----------------------------------------\n\nTITLE: Sending Multiple Messages to an Object\nDESCRIPTION: Demonstrates sending a conjunction of messages/goals to a square object to retrieve various properties.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/sicstus/NOTES.md#2025-04-06_snippet_8\n\nLANGUAGE: logtalk\nCODE:\n```\nsquare(2)::side(Side), square(2)::width(Width), square(2)::height(Height), square(2)::area(Area).\n```\n\n----------------------------------------\n\nTITLE: Modes and Number of Proofs for (^^)/1 in Logtalk\nDESCRIPTION: Specification of the calling mode for the (^^)/1 control construct, indicating it accepts a callable term and may return zero or more results.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/refman/control/call_super_1.rst.txt#2025-04-06_snippet_1\n\nLANGUAGE: logtalk\nCODE:\n```\n^^+callable - zero_or_more\n```\n\n----------------------------------------\n\nTITLE: Defining setof/3 Method Signature in Logtalk\nDESCRIPTION: Defines the signature of the setof/3 method, which collects a set of unique solutions for a given goal, sorted using standard term order.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/refman/methods/setof_3.rst#2025-04-06_snippet_0\n\nLANGUAGE: Logtalk\nCODE:\n```\nsetof(Template, Goal, List)\n```\n\n----------------------------------------\n\nTITLE: Logtalk Project License and Copyright Information\nDESCRIPTION: This markdown comment block contains the copyright and license information for the Logtalk project. It specifies the Apache License 2.0 terms and conditions for using the software.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/searching/NOTES.md#2025-04-06_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n<!--\n________________________________________________________________________\n\nThis file is part of Logtalk <https://logtalk.org/>  \nSPDX-FileCopyrightText: 1998-2025 Paulo Moura <pmoura@logtalk.org>  \nSPDX-License-Identifier: Apache-2.0\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n________________________________________________________________________\n-->\n```\n\n----------------------------------------\n\nTITLE: Loading Logtalk Debugger\nDESCRIPTION: Command to load the Logtalk debugger tool at the top-level interpreter.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/userman/debugging.rst#2025-04-06_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n| ?- logtalk_load(debugger(loader)).\n```\n\n----------------------------------------\n\nTITLE: Squares Placement with Disjoint Constraint\nDESCRIPTION: Solves the squares placement problem using the 'dual' model with 'disjoint' constraint method.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/constraints/sicstus/NOTES.md#2025-04-06_snippet_8\n\nLANGUAGE: logtalk\nCODE:\n```\nsquares::squares(dual,disjoint).\n```\n\n----------------------------------------\n\nTITLE: Resetting a counter in Logtalk\nDESCRIPTION: Predicate that resets a named counter to zero. If the counter doesn't exist, it will be created with an initial value of zero.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/counters_0.rst.txt#2025-04-06_snippet_3\n\nLANGUAGE: Logtalk\nCODE:\n```\nreset_counter(Counter)\n```\n\n----------------------------------------\n\nTITLE: Example Usage of category_property/2 in Logtalk\nDESCRIPTION: Demonstrates how to use the category_property/2 predicate to enumerate all properties of the core_messages built-in category through backtracking.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/refman/predicates/category_property_2.rst#2025-04-06_snippet_2\n\nLANGUAGE: prolog\nCODE:\n```\n% enumerate the properties of the core_messages built-in category:\n| ?- category_property(core_messages, Property).\n\nProperty = source_data ;\nProperty = static ;\nProperty = built_in ;\n...\n```\n\n----------------------------------------\n\nTITLE: Implementing squares_and_hypers/6 in Logtalk\nDESCRIPTION: Auxiliary predicate for computing the kurtosis statistic. Takes a list of numbers, their mean, initial squares sum, returns final squares sum, initial fourth powers sum, and returns final fourth powers sum.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/statistics_0.rst.txt#2025-04-06_snippet_2\n\nLANGUAGE: Logtalk\nCODE:\n```\nsquares_and_hypers(List,Mean,Squares0,Squares,Hypers0,Hypers)\n```\n\n----------------------------------------\n\nTITLE: Validating a List of Options in Logtalk\nDESCRIPTION: The check_options/1 predicate checks if all options in a list are valid, throwing errors for invalid inputs. It verifies that the input is a proper list of compound terms representing valid options.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/options_protocol_0.rst.txt#2025-04-06_snippet_1\n\nLANGUAGE: prolog\nCODE:\n```\ncheck_options(Options)\n```\n\n----------------------------------------\n\nTITLE: Accessing Specific APIs Documentation Topics in Logtalk\nDESCRIPTION: Predicate that opens the Texinfo version of the APIs documentation at a specific topic. It accepts atoms, predicate indicators, or non-terminal indicators as parameters.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/help_info_support_0.rst.txt#2025-04-06_snippet_3\n\nLANGUAGE: Prolog\nCODE:\n```\napis/1\n```\n\n----------------------------------------\n\nTITLE: Adding set_text_input/3 and set_binary_input/3 to lgtunit tool\nDESCRIPTION: New predicates added to the lgtunit tool to allow passing extra options to implicit calls of the open/4 built-in predicate for text and binary input.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/RELEASE_NOTES.md#2025-04-06_snippet_88\n\nLANGUAGE: Logtalk\nCODE:\n```\nset_text_input/3\nset_binary_input/3\n```\n\n----------------------------------------\n\nTITLE: Version Check Command\nDESCRIPTION: Logtalk command to print version information for Logtalk, Prolog backend, and kernel when running in notebook mode.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/securemp/NOTES.md#2025-04-06_snippet_1\n\nLANGUAGE: logtalk\nCODE:\n```\n%versions\n```\n\n----------------------------------------\n\nTITLE: Running All Benchmark Tests with Default Repetitions\nDESCRIPTION: Executes all benchmark tests using the default number of repetitions.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/benchmarks/NOTES.md#2025-04-06_snippet_5\n\nLANGUAGE: logtalk\nCODE:\n```\nbenchmarks::run.\n```\n\n----------------------------------------\n\nTITLE: Example Implementation of message_prefix_file/6 in Logtalk\nDESCRIPTION: Demonstrates how to implement the message_prefix_file/6 method by adding multifile and dynamic declarations and defining a rule to handle comment messages from the 'app' component by appending them to a file with a '% ' prefix.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/refman/methods/message_prefix_file_6.rst.txt#2025-04-06_snippet_2\n\nLANGUAGE: logtalk\nCODE:\n```\n:- multifile(logtalk::message_prefix_file/6).\n:- dynamic(logtalk::message_prefix_file/6).\n\nlogtalk::message_prefix_file(comment, app, '% ', 'comments.txt', append, []).\n```\n\n----------------------------------------\n\nTITLE: Internal Implementation of Uninstantiation Error\nDESCRIPTION: Shows the equivalent implementation using context and throw predicates to generate the error in the runtime's standard format.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/refman/methods/uninstantiation_error_1.rst.txt#2025-04-06_snippet_1\n\nLANGUAGE: logtalk\nCODE:\n```\n...,\ncontext(Context),\nthrow(error(uninstantiation_error(Culprit), Context)).\n```\n\n----------------------------------------\n\nTITLE: Generating Random Tree in Logtalk\nDESCRIPTION: Definition of the random_tree/1 predicate, which generates a random tree. It takes one argument 'Tree' and is designed to be used in output mode.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/benchmark_generators_0.rst.txt#2025-04-06_snippet_1\n\nLANGUAGE: Logtalk\nCODE:\n```\nrandom_tree(Tree)\n```\n\n----------------------------------------\n\nTITLE: Enabling Event Tracing in Logtalk\nDESCRIPTION: Demonstrates how to enable event tracing by setting the events flag to 'allow' and defining events for the tracer object.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/userman/events.rst.txt#2025-04-06_snippet_7\n\nLANGUAGE: Prolog\nCODE:\n```\n| ?- set_logtalk_flag(events, allow).\n\nyes\n\n| ?- define_events(_, _, _, _, tracer).\n\nyes\n```\n\n----------------------------------------\n\nTITLE: Defining arithmetic_function/1 directive in SWI-Prolog config\nDESCRIPTION: Updated the SWI-Prolog config file to provide limited support for the arithmetic_function/1 proprietary directive, compiling arithmetic functions as global instead of local to objects or categories.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/RELEASE_NOTES.md#2025-04-06_snippet_126\n\nLANGUAGE: Prolog\nCODE:\n```\narithmetic_function/1\n```\n\n----------------------------------------\n\nTITLE: Example Implementation of message_prefix_file/6 in Logtalk\nDESCRIPTION: Demonstrates how to implement the message_prefix_file/6 method by adding multifile and dynamic declarations and defining a rule to handle comment messages from the 'app' component by appending them to a file with a '% ' prefix.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/refman/methods/message_prefix_file_6.rst.txt#2025-04-06_snippet_2\n\nLANGUAGE: logtalk\nCODE:\n```\n:- multifile(logtalk::message_prefix_file/6).\n:- dynamic(logtalk::message_prefix_file/6).\n\nlogtalk::message_prefix_file(comment, app, '% ', 'comments.txt', append, []).\n```\n\n----------------------------------------\n\nTITLE: Version Format in info/1 Directives\nDESCRIPTION: New compound term format for representing version data in info/1 directives, using Major:Minor:Day structure.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/RELEASE_NOTES.md#2025-04-06_snippet_40\n\nLANGUAGE: logtalk\nCODE:\n```\nMajor:Minor:Day\n```\n\n----------------------------------------\n\nTITLE: Passing Environment Information to Allure Reports (PowerShell)\nDESCRIPTION: Examples of passing environment information pairs to the Allure report generator using the PowerShell script. The syntax differs from Bash, using comma-separated pairs inside a string.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/tools/lgtunit/NOTES.md#2025-04-06_snippet_52\n\nLANGUAGE: powershell\nCODE:\n```\nPS> logtalk_allure_report -e \"Backend='GNU Prolog',Version=1.5.0\"\n```\n\nLANGUAGE: powershell\nCODE:\n```\nPS> logtalk_allure_report -e \"Project='Deep Thought',Commit=bf166b6\"\n```\n\n----------------------------------------\n\nTITLE: Using Hook Pipeline for Debugging Expansions in Logtalk\nDESCRIPTION: This code snippet demonstrates how to use a pipeline of hook objects to write expansion results to a file for debugging purposes. It uses the hook_pipeline/1 and write_to_stream_hook objects.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/userman/expansion.rst#2025-04-06_snippet_21\n\nLANGUAGE: Logtalk\nCODE:\n```\n| ?- {hook_flows(loader), hook_objects(loader)}.\n...\n\n| ?- open('unique_expanded.lgt', write, Stream),\n     logtalk_compile(\n         unique,\n         [hook(hook_pipeline([edcg,write_to_stream_hook(Stream,[quoted(true)])]))]\n     ),\n     close(Stream).\n...\n```\n\n----------------------------------------\n\nTITLE: Declaring Built-in Directive in Logtalk\nDESCRIPTION: The built_in/0 directive is used to declare an entity as built-in. Built-in entities are static and cannot be redefined once loaded. This directive is typically used for pre-defined protocols, categories, and objects that are automatically loaded at startup.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/refman/directives/built_in_0.rst.txt#2025-04-06_snippet_0\n\nLANGUAGE: Logtalk\nCODE:\n```\nbuilt_in\n```\n\n----------------------------------------\n\nTITLE: Defining ancestors/1 predicate in Logtalk\nDESCRIPTION: Returns a list of all object ancestors. It is a static predicate that unifies its argument with a list of all ancestors.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/hierarchyp_0.rst.txt#2025-04-06_snippet_1\n\nLANGUAGE: Logtalk\nCODE:\n```\nancestors(Ancestors)\n```\n\n----------------------------------------\n\nTITLE: Clean Binary Input Files in Logtalk\nDESCRIPTION: Cleans up the temporary file used when testing binary input. Should be called after completing binary input tests to remove any temporary files created during testing.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/lgtunit_0.rst.txt#2025-04-06_snippet_40\n\nLANGUAGE: logtalk\nCODE:\n```\nclean_binary_input\n```\n\n----------------------------------------\n\nTITLE: Loading Blocks Example and Library Files\nDESCRIPTION: Loads the blocks example and required library files into the Logtalk environment.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/blocks/NOTES.md#2025-04-06_snippet_1\n\nLANGUAGE: logtalk\nCODE:\n```\nlogtalk_load(blocks(loader)).\n```\n\n----------------------------------------\n\nTITLE: Loading Pack Tests in Logtalk\nDESCRIPTION: Example showing how to load and run tests for an installed pack using the tester file.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/tools/packs/NOTES.md#2025-04-06_snippet_34\n\nLANGUAGE: prolog\nCODE:\n```\n| ?- {foo(tester)}.\n```\n\n----------------------------------------\n\nTITLE: Inherited Public Predicate Access\nDESCRIPTION: Demonstrates accessing inherited public predicates in descendant objects\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/scopes/NOTES.md#2025-04-06_snippet_6\n\nLANGUAGE: logtalk\nCODE:\n```\ndescendant::p_foo(Foo).\n```\n\nLANGUAGE: logtalk\nCODE:\n```\ndescendant::p_bar(Bar).\n```\n\nLANGUAGE: logtalk\nCODE:\n```\ndescendant::p_baz(Baz).\n```\n\n----------------------------------------\n\nTITLE: Logtalk Load Predicate Modes\nDESCRIPTION: Specification of predicate modes and number of proofs, showing input arguments and determinism.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/refman/predicates/logtalk_load_2.rst#2025-04-06_snippet_1\n\nLANGUAGE: logtalk\nCODE:\n```\nlogtalk_load(@source_file_name, @list(compiler_flag)) - zero_or_one\nlogtalk_load(@list(source_file_name), @list(compiler_flag)) - zero_or_one\n```\n\n----------------------------------------\n\nTITLE: Loading Wrapped Prolog Code for Profiling in Logtalk\nDESCRIPTION: Shows how to load wrapped Prolog code as a Logtalk object for profiling.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/devtools/ports_profiler.rst.txt#2025-04-06_snippet_12\n\nLANGUAGE: Prolog\nCODE:\n```\n| ?- logtalk_load(code, [debug(on), source_data(on)]).\n```\n\n----------------------------------------\n\nTITLE: Enumerating Public Operators for Explicit Object in Logtalk\nDESCRIPTION: Example of how to use current_op/3 to enumerate public operators visible for an explicitly specified object by backtracking.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/refman/methods/current_op_3.rst.txt#2025-04-06_snippet_4\n\nLANGUAGE: Logtalk\nCODE:\n```\nObject::current_op(Priority, Specifier, Operator)\n```\n\n----------------------------------------\n\nTITLE: Loading Files into an Object in Logtalk\nDESCRIPTION: Demonstrates how to use the include/1 directive to load the contents of a file into an object. This example shows loading a Prolog file into a Logtalk object.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/userman/objects.rst.txt#2025-04-06_snippet_20\n\nLANGUAGE: logtalk\nCODE:\n```\n:- object(cities).\n\n    :- public(city/4).\n\n    :- include(dbs('cities.pl')).\n\n:- end_object.\n```\n\n----------------------------------------\n\nTITLE: Loading Logtalk Zippers Library\nDESCRIPTION: Command to load all entities in the zippers library using the loader.lgt file.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/library/zippers/NOTES.md#2025-04-06_snippet_0\n\nLANGUAGE: logtalk\nCODE:\n```\n| ?- logtalk_load(zippers(loader)).\n```\n\n----------------------------------------\n\nTITLE: Defining Format/2 Predicate in Logtalk\nDESCRIPTION: Defines the format/2 predicate for writing formatted output to the current output stream. It accepts a format specification and list of arguments.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/format_0.rst.txt#2025-04-06_snippet_1\n\nLANGUAGE: Logtalk\nCODE:\n```\nformat(Format,Arguments)\n```\n\n----------------------------------------\n\nTITLE: Getting Help for Built-in Predicates\nDESCRIPTION: Command to get documentation for a specific built-in predicate (logtalk_load/2) using the help system.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/tools/help/SCRIPT.txt#2025-04-06_snippet_3\n\nLANGUAGE: logtalk\nCODE:\n```\n| ?- help::logtalk_load/2.\n```\n\n----------------------------------------\n\nTITLE: Character Test Message\nDESCRIPTION: Shows logging of a character type test message.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/msglog/NOTES.md#2025-04-06_snippet_3\n\nLANGUAGE: logtalk\nCODE:\n```\ncharacter::is_alpha(p).\n```\n\n----------------------------------------\n\nTITLE: Configuring Jupyter Environment for Logtalk\nDESCRIPTION: YAML configuration block that defines Jupyter notebook settings including text representation format and kernel specifications for Logtalk integration.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/lambdas/NOTES.md#2025-04-06_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\njupyter:\n  jupytext:\n    text_representation:\n      extension: .md\n      format_name: markdown\n      format_version: '1.3'\n      jupytext_version: '1.16.7'\n  kernelspec:\n    display_name: Logtalk\n    language: logtalk\n    name: logtalk_kernel\n```\n\n----------------------------------------\n\nTITLE: Loading and Running a Doclet in Logtalk\nDESCRIPTION: The standard query to load and run a doclet. This loads both the doclet loader and the user-defined doclet implementation, triggering the documentation generation process.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/devtools/doclet.rst.txt#2025-04-06_snippet_0\n\nLANGUAGE: logtalk\nCODE:\n```\n| ?- logtalk_load([doclet(loader), doclet]).\n```\n\n----------------------------------------\n\nTITLE: Reset Counter Predicate\nDESCRIPTION: Public predicate that resets the counter value to zero. Uses static compilation flag and returns one proof.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/counter_0.rst.txt#2025-04-06_snippet_4\n\nLANGUAGE: logtalk\nCODE:\n```\nreset/0\n```\n\n----------------------------------------\n\nTITLE: Binary Input Stream Management\nDESCRIPTION: Creates and manages temporary binary input files for testing with byte-level content control.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/lgtunit_0.rst.txt#2025-04-06_snippet_37\n\nLANGUAGE: logtalk\nCODE:\n```\nset_binary_input(Alias,Bytes,Options)\nset_binary_input(Alias,Bytes)\nset_binary_input(Bytes)\n```\n\n----------------------------------------\n\nTITLE: Usage Mode Declaration\nDESCRIPTION: Specifies the mode declaration for the representation_error/1 method, indicating it takes an atom as input and results in an error.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/refman/methods/representation_error_1.rst.txt#2025-04-06_snippet_2\n\nLANGUAGE: prolog\nCODE:\n```\nrepresentation_error(+atom) - error\n```\n\n----------------------------------------\n\nTITLE: Method Signature in Logtalk\nDESCRIPTION: Basic syntax definition for the findall/3 method that collects solutions into a list.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/refman/methods/findall_3.rst.txt#2025-04-06_snippet_0\n\nLANGUAGE: logtalk\nCODE:\n```\nfindall(Template, Goal, List)\n```\n\n----------------------------------------\n\nTITLE: Wrapping Plain Prolog Code for Profiling in Logtalk\nDESCRIPTION: Demonstrates how to wrap plain Prolog code in a Logtalk object for profiling purposes.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/devtools/ports_profiler.rst.txt#2025-04-06_snippet_11\n\nLANGUAGE: Logtalk\nCODE:\n```\n:- object(code).\n\n    :- public(foo/2).\n    :- include('code.pl').\n\n:- end_object.\n```\n\n----------------------------------------\n\nTITLE: Installing Texinfo on Ubuntu Linux\nDESCRIPTION: Shell command to install the required Texinfo package on Ubuntu Linux systems.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/devtools/help.rst.txt#2025-04-06_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\n$ sudo apt install info\n```\n\n----------------------------------------\n\nTITLE: Info Directive Example\nDESCRIPTION: Example of info/2 directive syntax showing the since key for documenting predicate version information.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/RELEASE_NOTES.md#2025-04-06_snippet_14\n\nLANGUAGE: Logtalk\nCODE:\n```\ninfo/2\n```\n\n----------------------------------------\n\nTITLE: Printing profiling data for tagged representation\nDESCRIPTION: This snippet prints the profiling data collected for the tagged representation using the data/0 predicate from the ports_profiler object.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/defaulty/NOTES.md#2025-04-06_snippet_7\n\nLANGUAGE: logtalk\nCODE:\n```\nports_profiler::data.\n```\n\n----------------------------------------\n\nTITLE: Loading Memento Design Pattern Implementation\nDESCRIPTION: This code loads the Memento design pattern sample implementation from the specified file path.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/design_patterns/behavioral/memento/NOTES.md#2025-04-06_snippet_1\n\nLANGUAGE: logtalk\nCODE:\n```\nlogtalk_load(design_patterns('behavioral/memento/loader')).\n```\n\n----------------------------------------\n\nTITLE: Logtalk Library Reference Tracking\nDESCRIPTION: Protected predicate for remembering referenced Logtalk libraries in the diagram.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/library_diagram_1.rst.txt#2025-04-06_snippet_2\n\nLANGUAGE: logtalk\nCODE:\n```\nremember_referenced_logtalk_library(Library,Path)\n```\n\n----------------------------------------\n\nTITLE: Benchmark Logtalk Query\nDESCRIPTION: Times execution of a Logtalk-specific query with 1000 repetitions.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/bench/NOTES.md#2025-04-06_snippet_10\n\nLANGUAGE: logtalk\nCODE:\n```\ntime((between(1,1000,_),boyer::top,fail;true)).\n```\n\n----------------------------------------\n\nTITLE: Defining foo/1 Predicate in User Context\nDESCRIPTION: Defines a foo/1 predicate in the user context to be used in subsequent examples.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/self_vs_super/NOTES.md#2025-04-06_snippet_2\n\nLANGUAGE: logtalk\nCODE:\n```\nfoo(X).\n```\n\n----------------------------------------\n\nTITLE: Starting the Synchronous Concurrency Team in Logtalk\nDESCRIPTION: Starts the file reader and line writer threads that communicate with each other for the synchronous concurrency task.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/threads/team/NOTES.md#2025-04-06_snippet_2\n\nLANGUAGE: logtalk\nCODE:\n```\nteam::start.\n```\n\n----------------------------------------\n\nTITLE: Defining a Parametric Object in Logtalk3\nDESCRIPTION: This snippet shows how to define a parametric object in Logtalk3. It takes three parameters: a variable, a string, and a float number. The object implements a protocol, imports a category, and extends a parent object with a parameter.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/coding/subethaedit4/Logtalk.seemode/Contents/Resources/ExampleSyntax.txt#2025-04-06_snippet_6\n\nLANGUAGE: Logtalk\nCODE:\n```\n:- object(parametric(Parameter, \"String\", 33.78),\n\timplements(protocol),\n\timports(category),\n\textends(parent(Parameter))).\n\n:- end_object.\n```\n\n----------------------------------------\n\nTITLE: Running a Profiled Goal\nDESCRIPTION: Demonstrates how to execute and profile a complex goal involving multiple predicates and objects.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/tools/profiler/SCRIPT.txt#2025-04-06_snippet_3\n\nLANGUAGE: logtalk\nCODE:\n```\n| ?- profiler::profile((salt(100, 250, 550)::initial_state(Initial), breadth_first(11)::solve(salt(100, 250, 550), Initial, Path), salt(100, 250, 550)::print_path(Path))).\n```\n\n----------------------------------------\n\nTITLE: Skipping Individual Tests in Logtalk\nDESCRIPTION: Examples of skipping tests using the (-)/1 operator and test/3 dialect with condition options.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/tools/lgtunit/NOTES.md#2025-04-06_snippet_26\n\nLANGUAGE: logtalk\nCODE:\n```\n- test(not_yet_ready) :-\n\t...\n\n- test(xyz_reset, true, [note('Feature xyz reset not yet implemented')]) :-\n\t...\n\ntest(test_id, true, [condition(current_prolog_flag(bounded,true))) :-\n\t...\n```\n\n----------------------------------------\n\nTITLE: Path Configuration\nDESCRIPTION: Addition of library alias 'tests' to the paths configuration file.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/RELEASE_NOTES.md#2025-04-06_snippet_60\n\nLANGUAGE: Prolog\nCODE:\n```\npaths/paths.pl\n```\n\n----------------------------------------\n\nTITLE: Loading and Linting Prolog Module\nDESCRIPTION: Example showing how to load and lint a Prolog module file using Logtalk's linter with source data enabled.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/devtools/linter.rst.txt#2025-04-06_snippet_0\n\nLANGUAGE: prolog\nCODE:\n```\n| ?- logtalk_load(module, [source_data(on)]).\n```\n\n----------------------------------------\n\nTITLE: Logtalk Load Usage Examples\nDESCRIPTION: Examples demonstrating common usage patterns including loading files from current directory, library files, and using compiler flags.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/refman/predicates/logtalk_load_2.rst#2025-04-06_snippet_2\n\nLANGUAGE: logtalk\nCODE:\n```\n% compile and load the \"list\" source file in the\n% current directory using default compiler flags:\n| ?- logtalk_load(list, []).\n\n% compile and load the \"tree\" source file in the \"types\"\n% library directory with the source_data flag turned on:\n| ?- logtalk_load(types(tree)).\n\n% compile and load the \"file_system\" source file in the\n% current directory with portability warnings suppressed:\n| ?- logtalk_load(file_system, [portability(silent)]).\n```\n\n----------------------------------------\n\nTITLE: Implementing Equivalent Functionality for syntax_error/1 in Logtalk\nDESCRIPTION: The implementation equivalent of calling syntax_error/1, showing how it captures the current context and throws a properly formatted error term.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/refman/methods/syntax_error_1.rst.txt#2025-04-06_snippet_1\n\nLANGUAGE: prolog\nCODE:\n```\n...,\ncontext(Context),\nthrow(error(syntax_error(Description), Context)).\n```\n\n----------------------------------------\n\nTITLE: Loading the Logtalk Help Tool\nDESCRIPTION: This snippet shows how to load the 'help' tool in Logtalk. It uses the logtalk_load/1 predicate to load the tool's loader file.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/devtools/help.rst#2025-04-06_snippet_0\n\nLANGUAGE: prolog\nCODE:\n```\n| ?- logtalk_load(help(loader)).\n```\n\n----------------------------------------\n\nTITLE: Loading Git Library in Logtalk\nDESCRIPTION: Shows how to load the git library entities using the loader file.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/libraries/git.rst.txt#2025-04-06_snippet_0\n\nLANGUAGE: logtalk\nCODE:\n```\n| ?- logtalk_load(git(loader)).\n```\n\n----------------------------------------\n\nTITLE: Generating Documentation for a Logtalk Library\nDESCRIPTION: This snippet shows the process of generating documentation for a Logtalk library named 'my_app'. It includes loading the library, loading the lgtdoc tool, and then using the lgtdoc::library/1 predicate to generate the documentation.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/devtools/lgtdoc.rst.txt#2025-04-06_snippet_4\n\nLANGUAGE: prolog\nCODE:\n```\n| ?- {my_app(loader)}.\n...\n\n| ?- {lgtdoc(loader)}.\n...\n\n| ?- lgtdoc::library(my_app).\n...\n```\n\n----------------------------------------\n\nTITLE: Creating Empty Dictionary\nDESCRIPTION: Creates an empty nested dictionary data structure. Returns one solution.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/nested_dictionary_protocol_0.rst.txt#2025-04-06_snippet_0\n\nLANGUAGE: logtalk\nCODE:\n```\nnew(Dictionary)\n```\n\n----------------------------------------\n\nTITLE: Retrieve Default Text Output Contents in Logtalk\nDESCRIPTION: Returns the contents of the default temporary file. Simplifies retrieving the actual output for inspection and verification in tests.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/lgtunit_0.rst.txt#2025-04-06_snippet_52\n\nLANGUAGE: logtalk\nCODE:\n```\ntext_output_contents(Contents)\n```\n\n----------------------------------------\n\nTITLE: Printing Logtalk and Prolog Versions in Logtalk\nDESCRIPTION: A Logtalk query to print the versions of Logtalk, the Prolog backend, and the kernel if running as a Jupyter notebook.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/birds/NOTES.md#2025-04-06_snippet_1\n\nLANGUAGE: logtalk\nCODE:\n```\n%versions\n```\n\n----------------------------------------\n\nTITLE: Accessing Queue Head Element\nDESCRIPTION: Example of creating a queue, adding an element, and accessing the head element using head/2 predicate.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/libraries/queues.rst#2025-04-06_snippet_4\n\nLANGUAGE: logtalk\nCODE:\n```\n| ?- queue::(new(Queue0), join(1, Queue0, Queue1), head(Queue1, Head)).\nQueue0 = ...,\nQueue1 = ...,\nHead = 1\nyes\n```\n\n----------------------------------------\n\nTITLE: Java Value Reference Predicate\nDESCRIPTION: Added predicate value_reference/2 to the Java library for handling Java references.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/RELEASE_NOTES.md#2025-04-06_snippet_78\n\nLANGUAGE: Logtalk\nCODE:\n```\nvalue_reference/2\n```\n\n----------------------------------------\n\nTITLE: Updating build_release.sh script for Logtalk\nDESCRIPTION: Improved the build_release.sh POSIX shell script to accept an optional version identifier argument, using the contents of the VERSION.txt file as a fallback value.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/RELEASE_NOTES.md#2025-04-06_snippet_123\n\nLANGUAGE: Shell\nCODE:\n```\n* IMPROVED: The `build_release.sh` POSIX shell script now takes as an optional\nargument a version identifier, using the contents of the `VERSION.txt` file as\na fallback value.\n```\n\n----------------------------------------\n\nTITLE: Connecting to Redis Server on Localhost with Default Port in Logtalk\nDESCRIPTION: Connects to a Redis server running on localhost using the default port 6379. Returns a connection handle that can be used with other Redis operations.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/redis_0.rst.txt#2025-04-06_snippet_0\n\nLANGUAGE: logtalk\nCODE:\n```\nconnect(Connection)\n```\n\n----------------------------------------\n\nTITLE: Enumerating Leashed Ports in Logtalk\nDESCRIPTION: Enumerates, by backtracking, all leashed ports.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/debuggerp_0.rst.txt#2025-04-06_snippet_8\n\nLANGUAGE: Logtalk\nCODE:\n```\nleashing/1\n```\n\n----------------------------------------\n\nTITLE: Defining Table of Contents in reStructuredText for Logtalk Libraries\nDESCRIPTION: This snippet defines a table of contents (toctree) in reStructuredText format, listing all available Logtalk library modules. It sets the maximum depth to 2 levels.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/libraries/index.rst.txt#2025-04-06_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. toctree::\n   :maxdepth: 2\n\n   overview\n   arbitrary\n   assignvars\n   base64\n   basic_types\n   cbor\n   core\n   coroutining\n   csv\n   dates\n   dependents\n   dictionaries\n   dif\n   edcg\n   events\n   expand_library_alias_paths\n   expecteds\n   format\n   genint\n   gensym\n   git\n   grammars\n   heaps\n   hierarchies\n   hook_flows\n   hook_objects\n   html\n   ids\n   intervals\n   java\n   json\n   listing\n   logging\n   loops\n   meta\n   meta_compiler\n   mutations\n   nested_dictionaries\n   optionals\n   options\n   os\n   queues\n   random\n   reader\n   recorded_database\n   redis\n   sets\n   statistics\n   term_io\n   timeout\n   tsv\n   types\n   ulid\n   unicode_data\n   union_find\n   uuid\n   zippers\n```\n\n----------------------------------------\n\nTITLE: Using bagof/3 with Explicit Object Message in Logtalk\nDESCRIPTION: Example of using bagof/3 to find solutions by sending a message to an explicit object.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/refman/methods/bagof_3.rst#2025-04-06_snippet_5\n\nLANGUAGE: Logtalk\nCODE:\n```\nbagof(Template, Object::Message, List)\n```\n\n----------------------------------------\n\nTITLE: Loading the arbitrary Library in Logtalk\nDESCRIPTION: Command to load all entities in the arbitrary library using the loader.lgt file.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/libraries/arbitrary.rst#2025-04-06_snippet_0\n\nLANGUAGE: prolog\nCODE:\n```\n| ?- logtalk_load(arbitrary(loader)).\n```\n\n----------------------------------------\n\nTITLE: Tokenizing Text with DCG in Logtalk\nDESCRIPTION: Uses the tokenizer object to convert a string into a list of tokens using DCG rules.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/dcgs/NOTES.md#2025-04-06_snippet_9\n\nLANGUAGE: logtalk\nCODE:\n```\ntokenizer::tokens(\" We owe $1,048,576.24 to Agent 007 for Version 3.14159! \", Tokens).\n```\n\n----------------------------------------\n\nTITLE: Listing Event Monitors\nDESCRIPTION: This code lists all before and after event monitors currently active.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/bricks/NOTES.md#2025-04-06_snippet_7\n\nLANGUAGE: logtalk\nCODE:\n```\nbefore_event_registry::monitors(BeforeMonitors), after_event_registry::monitors(AfterMonitors).\n```\n\n----------------------------------------\n\nTITLE: Testing the TSV Library in Logtalk\nDESCRIPTION: Command to load and run tests for the TSV library predicates using the tester.lgt file.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/libraries/tsv.rst#2025-04-06_snippet_1\n\nLANGUAGE: logtalk\nCODE:\n```\n| ?- logtalk_load(tsv(tester)).\n```\n\n----------------------------------------\n\nTITLE: Executing Recursive Adaptive Trapezium Integration with 4 Threads\nDESCRIPTION: Integrates the 'quiver' function using the recursive adaptive trapezium method (NP=0) with 4 threads from 0.001 to 0.999 with a specified error tolerance.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/threads/integration/NOTES.md#2025-04-06_snippet_2\n\nLANGUAGE: logtalk\nCODE:\n```\nquadrec(4)::integrate(quiver, 0.001, 0.999, 0, 1.0e-10, Integral).\n```\n\n----------------------------------------\n\nTITLE: Defining Classes in Logtalk\nDESCRIPTION: Syntax for defining classes with optional protocol implementation and category imports.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/refman/directives/object_1_5.rst.txt#2025-04-06_snippet_3\n\nLANGUAGE: logtalk\nCODE:\n```\nobject(Object,\n    specializes(Classes))\n\nobject(Object,\n    implements(Protocols),\n    specializes(Classes))\n\nobject(Object,\n    imports(Categories),\n    specializes(Classes))\n\nobject(Object,\n    implements(Protocols),\n    imports(Categories),\n    specializes(Classes))\n```\n\n----------------------------------------\n\nTITLE: Expert System Location Rules\nDESCRIPTION: Demonstrates an expert system rule query for location recommendations.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/metainterpreters/NOTES.md#2025-04-06_snippet_8\n\nLANGUAGE: logtalk\nCODE:\n```\nrules::prove(goto(Where)).\n```\n\n----------------------------------------\n\nTITLE: Enumerating Defined Registries in Logtalk\nDESCRIPTION: Backtracks through all defined registries, providing their name, URL, definition type, and pinned status.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/registries_0.rst.txt#2025-04-06_snippet_2\n\nLANGUAGE: logtalk\nCODE:\n```\ndefined(Registry, URL, HowDefined, Pinned)\n```\n\n----------------------------------------\n\nTITLE: Querying Protocol Implementation Relationships in Logtalk\nDESCRIPTION: Shows how to use the implements_protocol/2 built-in predicate to find which objects or categories implement which protocols.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/userman/protocols.rst#2025-04-06_snippet_10\n\nLANGUAGE: prolog\nCODE:\n```\n| ?- implements_protocol(ObjectOrCategory, Protocol).\n```\n\n----------------------------------------\n\nTITLE: Declaring a Dynamic Protocol in Logtalk\nDESCRIPTION: Shows how to declare a protocol as dynamic using the dynamic/0 directive. Dynamic protocols can be abolished during program execution, but have a performance cost compared to static protocols.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/userman/protocols.rst#2025-04-06_snippet_7\n\nLANGUAGE: logtalk\nCODE:\n```\n:- dynamic.\n```\n\n----------------------------------------\n\nTITLE: Transforming Expected Terms in Logtalk\nDESCRIPTION: Predicates for mapping and flat mapping expected terms. These allow for transforming the value held by an expected term or creating a new expected term based on the current one.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/expected_1.rst.txt#2025-04-06_snippet_3\n\nLANGUAGE: Logtalk\nCODE:\n```\nmap(Closure,NewExpected)\n\nflat_map(Closure,NewExpected)\n```\n\n----------------------------------------\n\nTITLE: Example of Using protocol_property/2 in Logtalk\nDESCRIPTION: Demonstrates how to enumerate the properties of the built-in monitoring protocol. The query returns multiple properties such as source_data, static, and built_in through backtracking.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/refman/predicates/protocol_property_2.rst#2025-04-06_snippet_2\n\nLANGUAGE: logtalk\nCODE:\n```\n% enumerate the properties of the monitoring built-in protocol:\n| ?- protocol_property(monitoring, Property).\n\nProperty = source_data ;\nProperty = static ;\nProperty = built_in ;\n...\n```\n\n----------------------------------------\n\nTITLE: Listing After Events and Monitors\nDESCRIPTION: Displays all registered 'after' events and their associated monitors.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/blocks/NOTES.md#2025-04-06_snippet_7\n\nLANGUAGE: logtalk\nCODE:\n```\n%%table\ncurrent_event(after, Object, Message, Sender, Monitor).\n```\n\n----------------------------------------\n\nTITLE: Implementing os::date_time/7 and os::cpu_time/1 for JIProlog\nDESCRIPTION: Fixed definitions of the os::date_time/7 and os::cpu_time/1 predicates for JIProlog in the operating-system library.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/RELEASE_NOTES.md#2025-04-06_snippet_90\n\nLANGUAGE: Prolog\nCODE:\n```\nos::date_time/7\nos::cpu_time/1\n```\n\n----------------------------------------\n\nTITLE: Loading the Hailstone Sequence Module in Logtalk\nDESCRIPTION: Loads the hailstone implementation using the loader file that contains necessary dependencies and initialization code.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/hailstone/NOTES.md#2025-04-06_snippet_1\n\nLANGUAGE: logtalk\nCODE:\n```\nlogtalk_load(hailstone(loader)).\n```\n\n----------------------------------------\n\nTITLE: Get Undefined Message - Parent\nDESCRIPTION: Shows failure behavior when calling an undefined predicate on parent object.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/self_messages/NOTES.md#2025-04-06_snippet_6\n\nLANGUAGE: logtalk\nCODE:\n```\nparent::get_undefined(_).\n```\n\n----------------------------------------\n\nTITLE: Querying Object with Terms Using Operators\nDESCRIPTION: Queries the triple object for terms using operators that were read from a file.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/operators/NOTES.md#2025-04-06_snippet_5\n\nLANGUAGE: logtalk\nCODE:\n```\n%%table\ntriple::triple(I, J).\n```\n\n----------------------------------------\n\nTITLE: Examples of Using extends_protocol in Logtalk\nDESCRIPTION: Demonstrates practical examples of querying protocol extension relationships using extends_protocol/2-3. Shows how to find protocols extended by a specific protocol and protocols that extend another one with a specific scope.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/refman/predicates/extends_protocol_2_3.rst#2025-04-06_snippet_2\n\nLANGUAGE: prolog\nCODE:\n```\n% enumerate the protocols extended by the listp protocol:\n| ?- extends_protocol(listp, Protocol).\n\n% enumerate protocols that privately extend the termp protocol:\n| ?- extends_protocol(Protocol, termp, private).\n```\n\n----------------------------------------\n\nTITLE: Printing Version Information in Logtalk\nDESCRIPTION: Command to display Logtalk, Prolog backend, and kernel version information when running as a notebook.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/engines/whisper/NOTES.md#2025-04-06_snippet_0\n\nLANGUAGE: logtalk\nCODE:\n```\n%versions\n```\n\n----------------------------------------\n\nTITLE: Finding Root Using Newton Method for Humps Function\nDESCRIPTION: Demonstrates using Newton's method to find the root of the humps function in the range [-1.0, 2.0] with a tolerance of 1.0e-15. This attempt fails with a float overflow error.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/threads/functions/NOTES.md#2025-04-06_snippet_10\n\nLANGUAGE: logtalk\nCODE:\n```\nnewton::find_root(humps, -1.0, 2.0, 1.0e-15, Zero).\n```\n\n----------------------------------------\n\nTITLE: Replacing Sub-Atoms in Logtalk\nDESCRIPTION: Replaces all occurrences of 'Old' with 'New' in 'Input', returning 'Output'. Returns 'Input' if 'Old' is empty. Fails if 'Output' doesn't unify with the result.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/atom_0.rst.txt#2025-04-06_snippet_0\n\nLANGUAGE: Logtalk\nCODE:\n```\nreplace_sub_atom(Old,New,Input,Output)\n```\n\n----------------------------------------\n\nTITLE: Breaking Stack and Moving Block\nDESCRIPTION: Breaks the stack by moving a middle block, demonstrating automatic relation updates.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/blocks/NOTES.md#2025-04-06_snippet_10\n\nLANGUAGE: logtalk\nCODE:\n```\nb::move(3, 1).\n```\n\n----------------------------------------\n\nTITLE: Example of Using threaded_engine_yield/1 in Logtalk\nDESCRIPTION: A simple example showing how to yield the atom 'ready' as an engine answer within a predicate.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/refman/predicates/threaded_engine_yield_1.rst#2025-04-06_snippet_2\n\nLANGUAGE: Logtalk\nCODE:\n```\n% returns the atom \"ready\" as an engine answer:\n..., threaded_engine_yield(ready), ...\n```\n\n----------------------------------------\n\nTITLE: Definition of logtalk_load/1 Predicate in Logtalk\nDESCRIPTION: Defines the syntax of the logtalk_load/1 predicate which accepts either a single source file or a list of source files to compile and load.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/refman/predicates/logtalk_load_1.rst#2025-04-06_snippet_0\n\nLANGUAGE: prolog\nCODE:\n```\nlogtalk_load(File)\nlogtalk_load(Files)\n```\n\n----------------------------------------\n\nTITLE: Run LIPS Benchmark (100000 iterations)\nDESCRIPTION: Computes Million Logical Inferences Per Second (MLIPS) by averaging over 100000 repetitions of the list reverse operation.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/lips/NOTES.md#2025-04-06_snippet_2\n\nLANGUAGE: logtalk\nCODE:\n```\nlips::mlips(MLIPS).\n```\n\n----------------------------------------\n\nTITLE: Appending Lists Using IDDFS Interpreter in Prolog\nDESCRIPTION: Example demonstrating list append operation using iterative deepening depth-first search interpreter with increment of 1.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/contributions/verdi_neruda.rst.txt#2025-04-06_snippet_1\n\nLANGUAGE: prolog\nCODE:\n```\nprove(iddfs_interpreter(1), append([a,b], [c,d], Xs), demodb).\n```\n\n----------------------------------------\n\nTITLE: Printing Version Information in Logtalk\nDESCRIPTION: A command to display Logtalk, Prolog backend, and kernel versions when running in notebook mode.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/complements/allow/NOTES.md#2025-04-06_snippet_0\n\nLANGUAGE: logtalk\nCODE:\n```\n%versions\n```\n\n----------------------------------------\n\nTITLE: Querying Installed Packs Directory in Logtalk\nDESCRIPTION: Example showing how to retrieve the directory where packs are installed.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/tools/packs/NOTES.md#2025-04-06_snippet_35\n\nLANGUAGE: prolog\nCODE:\n```\n| ?- packs::prefix(Directory).\n```\n\n----------------------------------------\n\nTITLE: Loading the tabling example\nDESCRIPTION: Loads the tabling example using the Logtalk load predicate.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/tabling/NOTES.md#2025-04-06_snippet_1\n\nLANGUAGE: logtalk\nCODE:\n```\nlogtalk_load(tabling(loader)).\n```\n\n----------------------------------------\n\nTITLE: Testing the IDs Library in Logtalk\nDESCRIPTION: This snippet shows how to load the tester file to run tests for the 'ids' library predicates.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/library/ids/NOTES.md#2025-04-06_snippet_1\n\nLANGUAGE: prolog\nCODE:\n```\n| ?- logtalk_load(ids(tester)).\n```\n\n----------------------------------------\n\nTITLE: Declaring a Dynamic Protocol in Logtalk\nDESCRIPTION: Shows how to declare a protocol as dynamic using the dynamic/0 directive. Dynamic protocols can be abolished during program execution, but have a performance cost compared to static protocols.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/userman/protocols.rst#2025-04-06_snippet_7\n\nLANGUAGE: logtalk\nCODE:\n```\n:- dynamic.\n```\n\n----------------------------------------\n\nTITLE: Declaring Meta-predicate Template for ignore/1 in Logtalk\nDESCRIPTION: Defines the meta-predicate template for ignore/1, indicating that it takes a goal (0) as its argument.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/refman/methods/ignore_1.rst.txt#2025-04-06_snippet_1\n\nLANGUAGE: Logtalk\nCODE:\n```\nignore(0)\n```\n\n----------------------------------------\n\nTITLE: Updating a Registry with Default Options in Logtalk\nDESCRIPTION: Updates a defined registry using default options. Fails if the registry is not defined.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/registries_0.rst.txt#2025-04-06_snippet_7\n\nLANGUAGE: logtalk\nCODE:\n```\nupdate(Registry)\n```\n\n----------------------------------------\n\nTITLE: Generating ULID as Atom\nDESCRIPTION: Example of generating a ULID using the default atom representation.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/library/ulid/NOTES.md#2025-04-06_snippet_2\n\nLANGUAGE: prolog\nCODE:\n```\n| ?- ulid::generate(ULID).\nULID = '01H0J31SYQXHJZWPRAKHQ6YVYH'\nyes\n```\n\n----------------------------------------\n\nTITLE: Long Form Pass Info Declaration\nDESCRIPTION: Dynamic predicate for declaring passed arguments with start value. Passed arguments are treated as accumulators with =/2 as joiner.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/edcg_0.rst.txt#2025-04-06_snippet_3\n\nLANGUAGE: Logtalk\nCODE:\n```\npass_info(?atom,?term)\n```\n\n----------------------------------------\n\nTITLE: Enabling Event Tracing in Logtalk\nDESCRIPTION: Sets the events flag to allow and defines events for tracing using the tracer object.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/userman/events.rst#2025-04-06_snippet_7\n\nLANGUAGE: text\nCODE:\n```\n| ?- set_logtalk_flag(events, allow).\n\nyes\n\n| ?- define_events(_, _, _, _, tracer).\n\nyes\n```\n\n----------------------------------------\n\nTITLE: Creating a new named database\nDESCRIPTION: Creates a new named database called 'my_db' using the db_create/1 predicate.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/named_databases/NOTES.md#2025-04-06_snippet_2\n\nLANGUAGE: logtalk\nCODE:\n```\ndb_create(my_db).\n```\n\n----------------------------------------\n\nTITLE: Installing a Pack with Signature Verification in Logtalk\nDESCRIPTION: Example showing how to install a pack with both verbose output and signature verification enabled.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/tools/packs/NOTES.md#2025-04-06_snippet_22\n\nLANGUAGE: prolog\nCODE:\n```\n| ?- packs::install(reg, bar, 1:1:2, [verbose(true), checksig(true)]).\n```\n\n----------------------------------------\n\nTITLE: Defining Number of Rules Metric Object in Logtalk\nDESCRIPTION: Defines the 'nor_metric' object for measuring the number of entity rules. The metric score is represented as number_of_rules(Total, User). It imports code_metrics_utilities and code_metric objects, and uses list and logtalk objects.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/nor_metric_0.rst.txt#2025-04-06_snippet_0\n\nLANGUAGE: Logtalk\nCODE:\n```\nnor_metric\n```\n\n----------------------------------------\n\nTITLE: Generating XML Documentation for Entities in Multiple Files with Options in Logtalk\nDESCRIPTION: Creates XML documenting files for all entities in loaded source files using specified options. Files can be given by name, basename, full path, or library notation. Takes a list of atoms for files and a list of options.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/lgtdocp_0.rst.txt#2025-04-06_snippet_7\n\nLANGUAGE: Logtalk\nCODE:\n```\nfiles(Files,Options)\n```\n\n----------------------------------------\n\nTITLE: Loading Zippers Library in Logtalk\nDESCRIPTION: This snippet demonstrates how to load all entities in the zippers library using the loader.lgt file. It uses the logtalk_load/1 predicate to load the library.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/libraries/zippers.rst#2025-04-06_snippet_0\n\nLANGUAGE: Prolog\nCODE:\n```\n| ?- logtalk_load(zippers(loader)).\n```\n\n----------------------------------------\n\nTITLE: Running Stable Logtalk Docker Container\nDESCRIPTION: Command to run an interactive container from the latest stable Logtalk release with a top-level interpreter.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/scripts/docker/swi-prolog/README.md#2025-04-06_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -it --name logtalk_latest \"logtalk/logtalk3-swi:latest\"\n```\n\n----------------------------------------\n\nTITLE: Generating Coverage Report with Source Code Links in Bash\nDESCRIPTION: This snippet demonstrates how to generate a coverage report with source code links to GitHub using xsltproc and custom parameters.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/devtools/lgtunit.rst#2025-04-06_snippet_71\n\nLANGUAGE: bash\nCODE:\n```\n$ xsltproc \\\n  --stringparam url https://github.com/LogtalkDotOrg/logtalk3/blob/master \\\n  -o coverage_report.html coverage_report.xml\n```\n\n----------------------------------------\n\nTITLE: Loading Logtalk Dependents Library\nDESCRIPTION: Code snippet showing how to load all entities in the dependents library using the loader utility file.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/libraries/dependents.rst.txt#2025-04-06_snippet_0\n\nLANGUAGE: logtalk\nCODE:\n```\n| ?- logtalk_load(dependents(loader)).\n```\n\n----------------------------------------\n\nTITLE: Installing Ubuntu Dependencies\nDESCRIPTION: Commands for installing tool dependencies on Ubuntu Linux.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/devtools/overview.rst.txt#2025-04-06_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\n$ sudo apt install graphviz\n$ sudo apt install texinfo pandoc\n$ sudo apt install xsltproc fop texlive-latex-extra tex-gyre latexmk\n$ sudo apt install coreutils libarchive-tools gnupg2 git curl wget direnv\n$ sudo apt install gh\n```\n\n----------------------------------------\n\nTITLE: Testing Assignvars Library in Logtalk\nDESCRIPTION: This snippet shows how to load the tester.lgt file to test the library predicates of the assignvars library.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/library/assignvars/NOTES.md#2025-04-06_snippet_1\n\nLANGUAGE: Logtalk\nCODE:\n```\n| ?- logtalk_load(assignvars(tester)).\n```\n\n----------------------------------------\n\nTITLE: Checking Binary Output Direct\nDESCRIPTION: Verifies that the current temporary file contains expected binary contents.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/lgtunit_0.rst.txt#2025-04-06_snippet_59\n\nLANGUAGE: logtalk\nCODE:\n```\ncheck_binary_output(Bytes)\n```\n\n----------------------------------------\n\nTITLE: Testing Solution Generators with all/1 in Logtalk\nDESCRIPTION: Shows how to test predicates that generate multiple solutions by checking that all solutions satisfy a condition using the all/1 outcome.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/devtools/lgtunit.rst#2025-04-06_snippet_33\n\nLANGUAGE: logtalk\nCODE:\n```\n   test(test_solution_generator, all(test(X,Y,Z))) :-\n       generator(X, Y, Z).\n```\n\n----------------------------------------\n\nTITLE: Installing D2 and Graphviz on MacOS using MacPorts\nDESCRIPTION: Command to install required diagram generation tools D2 and Graphviz using MacPorts package manager on macOS.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/devtools/diagrams.rst.txt#2025-04-06_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ sudo port install d2 graphviz\n```\n\n----------------------------------------\n\nTITLE: Temporal Started By Relation\nDESCRIPTION: Checks if Interval1 is started by Interval2. Returns zero or one solutions.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/intervalp_0.rst.txt#2025-04-06_snippet_9\n\nLANGUAGE: Logtalk\nCODE:\n```\nstarted_by(Interval1,Interval2)\n```\n\n----------------------------------------\n\nTITLE: Defining end_protocol Directive Syntax\nDESCRIPTION: Basic syntax definition for the end_protocol directive in Logtalk.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/refman/directives/end_protocol_0.rst.txt#2025-04-06_snippet_0\n\nLANGUAGE: logtalk\nCODE:\n```\nend_protocol\n```\n\n----------------------------------------\n\nTITLE: Declaring Discontiguous Predicates and Non-Terminals in Logtalk\nDESCRIPTION: This snippet shows the various syntax options for using the discontiguous/1 directive in Logtalk. It allows declaration of discontiguous predicates and grammar rule non-terminals, though its use is generally discouraged due to limited backend Prolog compiler support.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/refman/directives/discontiguous_1.rst#2025-04-06_snippet_0\n\nLANGUAGE: Logtalk\nCODE:\n```\ndiscontiguous(Name/Arity)\ndiscontiguous((Name/Arity, ...))\ndiscontiguous([Name/Arity, ...])\n\ndiscontiguous(Name//Arity)\ndiscontiguous((Name//Arity, ...))\ndiscontiguous([Name//Arity, ...])\n```\n\n----------------------------------------\n\nTITLE: Enumerating Normal HTML Elements in Logtalk\nDESCRIPTION: Backtracks through all normal HTML elements, specifying whether each is inline or block. Takes two arguments: the element name and its display type (inline or block).\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/html_0.rst.txt#2025-04-06_snippet_2\n\nLANGUAGE: Logtalk\nCODE:\n```\nnormal_element(Element,Display)\n```\n\n----------------------------------------\n\nTITLE: Loading and Scanning a Logtalk Application\nDESCRIPTION: This snippet demonstrates how to load a Logtalk application and scan it for dead code using the dead_code_scanner tool. It assumes an application with the library alias 'my_app'.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/devtools/dead_code_scanner.rst#2025-04-06_snippet_3\n\nLANGUAGE: logtalk\nCODE:\n```\n| ?- logtalk_load(my_app(loader)).\n...\n| ?- dead_code_scanner::library(my_app).\n```\n\n----------------------------------------\n\nTITLE: Setting up the CLASSPATH from terminal\nDESCRIPTION: Instructions for setting the Java CLASSPATH environment variable when running the example from a terminal, using a provided Bash script.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/clustering/NOTES.md#2025-04-06_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n$ cd \"$LOGTALKUSER/examples/document_converter\"\n$ . set_classpath.sh\n```\n\n----------------------------------------\n\nTITLE: Sorting with Meta-predicates in Logtalk\nDESCRIPTION: Uses the sort/2 meta-predicate to sort a list of integers, demonstrating the use of the user pseudo-object for Prolog database operations.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/metapredicates/NOTES.md#2025-04-06_snippet_2\n\nLANGUAGE: logtalk\nCODE:\n```\nsort(user)::sort([3, 1, 4, 2, 9], Sorted).\n```\n\n----------------------------------------\n\nTITLE: Testing the Coroutining Library in Logtalk\nDESCRIPTION: Command to load the tester file for the coroutining library, which runs tests for the library predicates to ensure they work as expected.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/libraries/coroutining.rst.txt#2025-04-06_snippet_1\n\nLANGUAGE: prolog\nCODE:\n```\n| ?- logtalk_load(coroutining(tester)).\n```\n\n----------------------------------------\n\nTITLE: Loading Lambda Examples in Logtalk\nDESCRIPTION: Loads the lambda examples into the Logtalk environment.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/lambdas/NOTES.md#2025-04-06_snippet_1\n\nLANGUAGE: logtalk\nCODE:\n```\nlogtalk_load(lambdas(loader)).\n```\n\n----------------------------------------\n\nTITLE: Checking Instance Interface\nDESCRIPTION: Verifies that the instance 'i' has no interface since its class 'c' doesn't declare any predicates.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/reflection/NOTES.md#2025-04-06_snippet_8\n\nLANGUAGE: logtalk\nCODE:\n```\n\\+ i::current_predicate(_).\n```\n\n----------------------------------------\n\nTITLE: Revealing Performers\nDESCRIPTION: Makes all horsemen reappear on stage using the magic object's show predicate.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/now_you_see_me/NOTES.md#2025-04-06_snippet_5\n\nLANGUAGE: logtalk\nCODE:\n```\nmagic::show.\n```\n\n----------------------------------------\n\nTITLE: Setting Local Score Value\nDESCRIPTION: Shows how to set a local score value for a specific viewpoint, demonstrating value independence.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/viewpoints/NOTES.md#2025-04-06_snippet_6\n\nLANGUAGE: logtalk\nCODE:\n```\njoe_chess_player::set_score(2200), joe_chess_player::score(Score).\n```\n\n----------------------------------------\n\nTITLE: Check Versions in Logtalk\nDESCRIPTION: Prints version information for Logtalk, Prolog backend, and kernel when running in notebook mode\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/relations/NOTES.md#2025-04-06_snippet_0\n\nLANGUAGE: logtalk\nCODE:\n```\n%versions\n```\n\n----------------------------------------\n\nTITLE: Generating Cross-Reference Diagram for Wrapped Prolog File in Prolog\nDESCRIPTION: This snippet demonstrates how to load a wrapped Prolog file and generate a cross-reference diagram using the Logtalk diagrams tool. It shows two methods: one using a manually created wrapper and another using the object_wrapper_hook.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/tools/diagrams/NOTES.md#2025-04-06_snippet_18\n\nLANGUAGE: prolog\nCODE:\n```\n| ?- logtalk_load(code),\n     xref_diagram::entity(code).\n```\n\nLANGUAGE: prolog\nCODE:\n```\n| ?- logtalk_load(hook_objects(loader)).\n...\n\n| ?- logtalk_load(code, [hook(object_wrapper_hook)]),\n     xref_diagram::entity(code).\n```\n\n----------------------------------------\n\nTITLE: Declaring Entities for Code Coverage in Logtalk Tests\nDESCRIPTION: Example of declaring which entities should have code coverage information collected during testing. The cover/1 predicate is used to specify objects for which coverage data will be gathered.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/devtools/lgtunit.rst#2025-04-06_snippet_57\n\nLANGUAGE: logtalk\nCODE:\n```\ncover(foo).\ncover(bar).\n```\n\n----------------------------------------\n\nTITLE: Implementing Recorded Database in Logtalk Object\nDESCRIPTION: Example showing how to import the recorded_database_core category privately into an object to create a local database scope.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/library/recorded_database/NOTES.md#2025-04-06_snippet_2\n\nLANGUAGE: logtalk\nCODE:\n```\n:- object(foo,\n\t\timports(private::recorded_database_core)).\n\n\t\tbar :-\n\t\t\t^^recorda(key, value(1)),\n\t\t\t...\n\n\t:- end_object.\n```\n\n----------------------------------------\n\nTITLE: Once Method Signature\nDESCRIPTION: Basic syntax for the once/1 method that executes a goal exactly once.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/refman/methods/once_1.rst#2025-04-06_snippet_0\n\nLANGUAGE: logtalk\nCODE:\n```\nonce(Goal)\n```\n\n----------------------------------------\n\nTITLE: Getting System Time Stamp in Logtalk\nDESCRIPTION: Returns a system-dependent time stamp that can be used for sorting but should be otherwise regarded as an opaque term.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/osp_0.rst.txt#2025-04-06_snippet_12\n\nLANGUAGE: prolog\nCODE:\n```\ntime_stamp(Time)\n```\n\n----------------------------------------\n\nTITLE: Checking Text File with Options\nDESCRIPTION: Verifies text file contents match expected text using specified stream options.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/lgtunit_0.rst.txt#2025-04-06_snippet_64\n\nLANGUAGE: logtalk\nCODE:\n```\ncheck_text_file(File,Contents,Options)\n```\n\n----------------------------------------\n\nTITLE: Object Identifiers Syntax in Logtalk using BNF\nDESCRIPTION: Specifies that object identifiers in Logtalk can be either atoms or compound terms.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/refman/grammar.rst.txt#2025-04-06_snippet_15\n\nLANGUAGE: bnf\nCODE:\n```\nobject_identifier ::=\n   atom\n   | compound\n```\n\n----------------------------------------\n\nTITLE: Syntax Declaration for dynamic/1 Directive in Logtalk\nDESCRIPTION: Defines the allowed syntactic forms for the dynamic/1 directive, including support for predicate indicators, grammar rule non-terminals, and qualified predicates with entity or module identifiers.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/refman/directives/dynamic_1.rst.txt#2025-04-06_snippet_0\n\nLANGUAGE: Logtalk\nCODE:\n```\ndynamic(Name/Arity)\ndynamic((Name/Arity, ...))\ndynamic([Name/Arity, ...])\n\ndynamic(Entity::Name/Arity)\ndynamic((Entity::Name/Arity, ...))\ndynamic([Entity::Name/Arity, ...])\n\ndynamic(Module:Name/Arity)\ndynamic((Module:Name/Arity, ...))\ndynamic([Module:Name/Arity, ...])\n\ndynamic(Name//Arity)\ndynamic((Name//Arity, ...))\ndynamic([Name//Arity, ...])\n\ndynamic(Entity::Name//Arity)\ndynamic((Entity::Name//Arity, ...))\ndynamic([Entity::Name//Arity, ...])\n\ndynamic(Module:Name//Arity)\ndynamic((Module:Name//Arity, ...))\ndynamic([Module:Name//Arity, ...])\n```\n\n----------------------------------------\n\nTITLE: Generating Version 1 UUID in Logtalk\nDESCRIPTION: Generates a version 1 UUID using a given MAC address or a random 6-byte node identifier. The MAC address is provided as a list of six bytes. This predicate follows RFC 4122 specifications.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/uuid_protocol_0.rst.txt#2025-04-06_snippet_0\n\nLANGUAGE: Logtalk\nCODE:\n```\nuuid_v1(MAC,UUID)\n```\n\n----------------------------------------\n\nTITLE: Importing Format Predicates in Logtalk Objects\nDESCRIPTION: Directive to import format/2 and format/3 predicates into a Logtalk object or category for implicit message-sending.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/libraries/format.rst#2025-04-06_snippet_2\n\nLANGUAGE: logtalk\nCODE:\n```\n:- uses(format, [\n    format/2, format/3\n]).\n```\n\n----------------------------------------\n\nTITLE: Adding Multiple Elements to Queue in Logtalk\nDESCRIPTION: Example demonstrating how to create a queue and add multiple elements using join_all/3 predicate.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/library/queues/NOTES.md#2025-04-06_snippet_3\n\nLANGUAGE: logtalk\nCODE:\n```\n| ?- queue::(new(Queue0), join_all([1,2,3], Queue0, Queue1)).\nQueue0 = ...,\nQueue1 = ...\nyes\n```\n\n----------------------------------------\n\nTITLE: Testing Options Library in Logtalk\nDESCRIPTION: Command to load and run tests for the options library predicates.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/libraries/options.rst.txt#2025-04-06_snippet_1\n\nLANGUAGE: prolog\nCODE:\n```\n| ?- logtalk_load(options(tester)).\n```\n\n----------------------------------------\n\nTITLE: Creating Directory if Not Exists in Logtalk\nDESCRIPTION: Ensures that a directory exists by creating it if necessary.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/osp_0.rst.txt#2025-04-06_snippet_2\n\nLANGUAGE: prolog\nCODE:\n```\nensure_directory(Directory)\n```\n\n----------------------------------------\n\nTITLE: Defining Less Than or Equal Operator in Logtalk Protocol\nDESCRIPTION: Defines the less than or equal operator (=<) which evaluates to true if Term1 is less than or equal to Term2. It uses static compilation flags and works with term inputs.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/comparingp_0.rst.txt#2025-04-06_snippet_1\n\nLANGUAGE: Logtalk\nCODE:\n```\nTerm1=<Term2\n```\n\n----------------------------------------\n\nTITLE: Testing the Logtalk Reader Library\nDESCRIPTION: Command to load and run the tests for the reader library predicates using the tester.lgt file.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/libraries/reader.rst#2025-04-06_snippet_1\n\nLANGUAGE: Prolog\nCODE:\n```\n| ?- logtalk_load(reader(tester)).\n```\n\n----------------------------------------\n\nTITLE: Meta-predicate Template for ignore/1 in Logtalk\nDESCRIPTION: The meta-predicate template for ignore/1, indicating it takes a goal of arity 0 as its argument.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/refman/methods/ignore_1.rst#2025-04-06_snippet_1\n\nLANGUAGE: logtalk\nCODE:\n```\nignore(0)\n```\n\n----------------------------------------\n\nTITLE: Demonstrating the null animal object behavior\nDESCRIPTION: Shows how the null_animal object responds to the same make_sound predicate but with an empty implementation that does nothing.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/design_patterns/behavioral/null_object/NOTES.md#2025-04-06_snippet_4\n\nLANGUAGE: logtalk\nCODE:\n```\nnull_animal::make_sound.\n```\n\n----------------------------------------\n\nTITLE: Demonstrating the null animal object behavior\nDESCRIPTION: Shows how the null_animal object responds to the same make_sound predicate but with an empty implementation that does nothing.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/design_patterns/behavioral/null_object/NOTES.md#2025-04-06_snippet_4\n\nLANGUAGE: logtalk\nCODE:\n```\nnull_animal::make_sound.\n```\n\n----------------------------------------\n\nTITLE: Parametric Category Import Example\nDESCRIPTION: Shows how to import parametric categories into an object with specific parameter values.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/userman/categories.rst.txt#2025-04-06_snippet_24\n\nLANGUAGE: logtalk\nCODE:\n```\n:- object(speech(Season, Event),\n    imports([dress(Season), speech(Event)])).\n    ...\n:- end_object.\n```\n\n----------------------------------------\n\nTITLE: Using Prolog User-Defined Plain Predicates in Logtalk\nDESCRIPTION: Shows how to use the uses/2 directive to call a user-defined Prolog plain predicate (bar/0) without explicit qualification.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/userman/predicates.rst.txt#2025-04-06_snippet_54\n\nLANGUAGE: logtalk\nCODE:\n```\n:- uses(user, [bar/0]).\n\nfoo :-\n    ...,\n    bar,\n    ...\n```\n\n----------------------------------------\n\nTITLE: Documentation File Access\nDESCRIPTION: Series of predicates providing access to HTML documentation files for various Logtalk components.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/help_0.rst.txt#2025-04-06_snippet_4\n\nLANGUAGE: logtalk\nCODE:\n```\nbuilt_in_directive(Functor,Arity,Directory,Basename)\nbuilt_in_predicate(Functor,Arity,Directory,Basename)\nbuilt_in_method(Functor,Arity,Directory,Basename)\ncontrol_construct(Functor,Arity,Directory,Basename)\nbuilt_in_non_terminal(Functor,Arity,Directory,Basename)\n```\n\n----------------------------------------\n\nTITLE: Node and Edge Handling in Logtalk\nDESCRIPTION: Predicates for saving, enumerating and outputting graph nodes and edges.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/diagram_1.rst.txt#2025-04-06_snippet_7\n\nLANGUAGE: logtalk\nCODE:\n```\nnode(?nonvar,?nonvar,?nonvar,?list(compound),?atom,?list(compound))\nedge(?nonvar,?nonvar,?list(nonvar),?atom,?list(compound))\nsave_edge(+nonvar,+nonvar,+list(nonvar),+atom,+list(compound))\n```\n\n----------------------------------------\n\nTITLE: Loading JSON Library in Logtalk\nDESCRIPTION: Demonstrates how to load all entities in the JSON library using the loader file.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/library/json/NOTES.md#2025-04-06_snippet_0\n\nLANGUAGE: Prolog\nCODE:\n```\n| ?- logtalk_load(json(loader)).\n```\n\n----------------------------------------\n\nTITLE: Loading CBOR Library in Logtalk\nDESCRIPTION: Command to load all entities in the CBOR library using the loader file.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/libraries/cbor.rst#2025-04-06_snippet_3\n\nLANGUAGE: logtalk\nCODE:\n```\n| ?- logtalk_load(cbor(loader)).\n```\n\n----------------------------------------\n\nTITLE: Before Event Handler Protocol in Logtalk\nDESCRIPTION: Defines the before/3 predicate template for handling before events. This handler is called before message processing and can prevent method lookup or execution by failing.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/monitoring_0.rst.txt#2025-04-06_snippet_0\n\nLANGUAGE: logtalk\nCODE:\n```\nbefore(Object,Message,Sender)\n```\n\n----------------------------------------\n\nTITLE: Referenced Predicate Names\nDESCRIPTION: Core Logtalk predicates for compiling and loading source files\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/RELEASE_NOTES.md#2025-04-06_snippet_149\n\nLANGUAGE: Prolog\nCODE:\n```\nlogtalk_compile/1-2\nlogtalk_load/1-2\n```\n\n----------------------------------------\n\nTITLE: Checking Versions in Logtalk Jupyter Notebook\nDESCRIPTION: Outputs the current versions of Logtalk, the Prolog backend, and the kernel when running in a Jupyter notebook environment.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/lpa/faults/NOTES.md#2025-04-06_snippet_0\n\nLANGUAGE: logtalk\nCODE:\n```\n%versions\n```\n\n----------------------------------------\n\nTITLE: Benchmarking Queries in Logtalk\nDESCRIPTION: Demonstrates benchmarking various queries using the time/1 predicate.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/proxies/NOTES.md#2025-04-06_snippet_8\n\nLANGUAGE: logtalk\nCODE:\n```\ntime(circle(one, 7, red)::id(Id)).\n```\n\nLANGUAGE: logtalk\nCODE:\n```\ntime(circle(one, 7, red)::radius(Radius)).\n```\n\nLANGUAGE: logtalk\nCODE:\n```\ntime(circle(one, 7, red)::color(Color)).\n```\n\nLANGUAGE: logtalk\nCODE:\n```\nId0 = one, time(circle(Id0, 7, red)::id(Id)).\n```\n\nLANGUAGE: logtalk\nCODE:\n```\nRadius0 = 7, time(circle(one, Radius0, red)::radius(Radius)).\n```\n\nLANGUAGE: logtalk\nCODE:\n```\nColor0 = red, time(circle(one, 7, Color0)::color(Color)).\n```\n\nLANGUAGE: logtalk\nCODE:\n```\ntime({circle('#2', Radius, Color)}::id(Id)).\n```\n\n----------------------------------------\n\nTITLE: Domain Error Usage Mode\nDESCRIPTION: Specification of the calling mode and expected behavior for the domain_error/2 method.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/refman/methods/domain_error_2.rst.txt#2025-04-06_snippet_2\n\nLANGUAGE: prolog\nCODE:\n```\ndomain_error(+atom, @nonvar) - error\n```\n\n----------------------------------------\n\nTITLE: Printing Version Information\nDESCRIPTION: Command to print Logtalk, Prolog backend, and kernel versions when running as a notebook\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/threads/philosophers/NOTES.md#2025-04-06_snippet_0\n\nLANGUAGE: logtalk\nCODE:\n```\n%versions\n```\n\n----------------------------------------\n\nTITLE: Signature and Calling Patterns for call//1-N in Logtalk\nDESCRIPTION: Shows the various formats for using the call//1-N non-terminal with different calling contexts, including direct calls, super calls, self calls, and calls to explicit objects.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/refman/methods/call_1.rst#2025-04-06_snippet_0\n\nLANGUAGE: Logtalk\nCODE:\n```\ncall(Closure)\ncall(Closure, Arg1, ...)\ncall(Object::Closure, Arg1, ...)\ncall(::Closure, Arg1, ...)\ncall(^^Closure, Arg1, ...)\n...\n```\n\n----------------------------------------\n\nTITLE: Archive Format Validation (Logtalk)\nDESCRIPTION: Predicate that validates if a given archive format extension is supported. Returns true only for supported formats.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/packs_common_0.rst.txt#2025-04-06_snippet_8\n\nLANGUAGE: logtalk\nCODE:\n```\nsupported_archive(+atom)\n```\n\n----------------------------------------\n\nTITLE: IPv4 Address Grammar Definition\nDESCRIPTION: Grammar for parsing IPv4 addresses in XXX.XXX.XXX.XXX format where each XXX is an octet between 0-255. Takes a list of integers as argument and produces zero or one parse.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/ip_grammars_1.rst.txt#2025-04-06_snippet_0\n\nLANGUAGE: logtalk\nCODE:\n```\nipv4//1\n```\n\n----------------------------------------\n\nTITLE: Usage Modes and Proof Count for logtalk_load/1\nDESCRIPTION: Specifies the calling modes and number of proofs for the logtalk_load/1 predicate, indicating it accepts a source file name or a list of source file names as input and returns zero or one solutions.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/refman/predicates/logtalk_load_1.rst#2025-04-06_snippet_1\n\nLANGUAGE: prolog\nCODE:\n```\nlogtalk_load(@source_file_name) - zero_or_one\nlogtalk_load(@list(source_file_name)) - zero_or_one\n```\n\n----------------------------------------\n\nTITLE: Loading ToyCHR Port in Logtalk\nDESCRIPTION: Command to load all entities in the ToyCHR port using the loader.lgt file. This should be executed in a Logtalk environment.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/ports/toychr.rst.txt#2025-04-06_snippet_0\n\nLANGUAGE: Prolog\nCODE:\n```\n| ?- logtalk_load(toychr(loader)).\n```\n\n----------------------------------------\n\nTITLE: Loading Viewpoints Example\nDESCRIPTION: Loads the viewpoints example module into the Logtalk environment.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/viewpoints/NOTES.md#2025-04-06_snippet_0\n\nLANGUAGE: logtalk\nCODE:\n```\nlogtalk_load(viewpoints(loader)).\n```\n\n----------------------------------------\n\nTITLE: Running All Library Tests with Shell Commands\nDESCRIPTION: Shell commands for running all library tests using ECLiPSe as the backend Prolog compiler.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/libraries/overview.rst.txt#2025-04-06_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ cd ~/logtalk/library\n$ logtalk_tester -p eclipse\n```\n\n----------------------------------------\n\nTITLE: Printing Predicate-Specific Profiling Data in Logtalk\nDESCRIPTION: Demonstrates printing profiling data for a specific predicate within an entity.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/tools/ports_profiler/NOTES.md#2025-04-06_snippet_6\n\nLANGUAGE: Logtalk\nCODE:\n```\n| ?- ports_profiler::data(Entity, Predicate).\n```\n\n----------------------------------------\n\nTITLE: Setting Default Hook Object in Logtalk\nDESCRIPTION: Sets the default_workflow_hook as the default hook object for the Logtalk compiler.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/library/hook_objects/NOTES.md#2025-04-06_snippet_2\n\nLANGUAGE: Logtalk\nCODE:\n```\n| ?- set_logtalk_flag(hook, default_workflow_hook).\n```\n\n----------------------------------------\n\nTITLE: Installing Linux Dependencies with APT\nDESCRIPTION: Commands to install required dependencies on Ubuntu/Debian Linux using APT package manager.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/devtools/packs.rst#2025-04-06_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\n$ sudo apt update\n$ sudo apt install coreutils curl wget libarchive-tools gnupg2 git direnv\n```\n\n----------------------------------------\n\nTITLE: Querying Protocol Relationships in Logtalk\nDESCRIPTION: Shows how to use built-in predicates to query protocol relationships, such as extension and implementation.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/userman/protocols.rst.txt#2025-04-06_snippet_7\n\nLANGUAGE: prolog\nCODE:\n```\n| ?- extends_protocol(Protocol1, Protocol2).\n| ?- extends_protocol(Protocol1, Protocol2, Scope).\n| ?- implements_protocol(ObjectOrCategory, Protocol).\n| ?- implements_protocol(ObjectOrCategory, Protocol, Scope).\n```\n\n----------------------------------------\n\nTITLE: Representation Error Method Signature\nDESCRIPTION: Method signature showing the basic form of the representation_error/1 predicate that takes a Flag argument representing the type of representation error.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/refman/methods/representation_error_1.rst.txt#2025-04-06_snippet_0\n\nLANGUAGE: prolog\nCODE:\n```\nrepresentation_error(Flag)\n```\n\n----------------------------------------\n\nTITLE: Abolishing a Dynamic Protocol in Logtalk\nDESCRIPTION: Demonstrates how to remove a dynamic protocol using the abolish_protocol/1 built-in predicate. The predicate requires the identifier of an existing dynamic protocol.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/userman/protocols.rst#2025-04-06_snippet_6\n\nLANGUAGE: prolog\nCODE:\n```\n| ?- abolish_protocol(Protocol).\n```\n\n----------------------------------------\n\nTITLE: Loading ULID Library Tests\nDESCRIPTION: Command to load the ULID library test suite.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/library/ulid/NOTES.md#2025-04-06_snippet_1\n\nLANGUAGE: prolog\nCODE:\n```\n| ?- logtalk_load(ulid(tester)).\n```\n\n----------------------------------------\n\nTITLE: Defining Entity Info Score Hook in Logtalk\nDESCRIPTION: This predicate sets the maximum score for entity info/1 directives. It allows customization of the scoring system for entity documentation.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/doc_metric_0.rst.txt#2025-04-06_snippet_1\n\nLANGUAGE: Logtalk\nCODE:\n```\nentity_info_score_hook(Entity,MaximumScore)\n```\n\n----------------------------------------\n\nTITLE: Listing All Objects Conforming to Recipe Protocol\nDESCRIPTION: Demonstrates how the conforms_to_protocol/2 predicate returns all objects implementing the recipe protocol, including the parametric object.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/recipes/NOTES.md#2025-04-06_snippet_9\n\nLANGUAGE: logtalk\nCODE:\n```\n%%table\nconforms_to_protocol(Recipe, recipep).\n```\n\n----------------------------------------\n\nTITLE: Decoding Base64URL to URL in Logtalk\nDESCRIPTION: Shows how to decode a Base64URL encoded string back to a URL using base64url::parse/2 predicate.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/libraries/base64.rst.txt#2025-04-06_snippet_5\n\nLANGUAGE: prolog\nCODE:\n```\n| ?- base64url::parse(atom('aHR0cHM6Ly9sb2d0YWxrLm9yZw'), URL).\nURL == 'https://logtalk.org'\nyes\n```\n\n----------------------------------------\n\nTITLE: Configuring URL Prefixes for Zed in Logtalk Diagrams\nDESCRIPTION: Sets the URL code prefix for generating local links to open files and directories in Zed when creating Logtalk diagrams.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/tools/diagrams/NOTES.md#2025-04-06_snippet_10\n\nLANGUAGE: prolog\nCODE:\n```\nurl_prefixes('zed://file/', DocPrefix)\n```\n\n----------------------------------------\n\nTITLE: Two-Threaded Quicksort\nDESCRIPTION: Generates a list of 20000 random floats and performs quicksort using two threads. Compares performance with the single-threaded version.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/threads/sorting/NOTES.md#2025-04-06_snippet_6\n\nLANGUAGE: logtalk\nCODE:\n```\ngenerator::list(20000, List), time(qsort(2)::qsort(List, Sorted)).\n```\n\n----------------------------------------\n\nTITLE: Loading Sets Library Test Suite\nDESCRIPTION: Demonstrates how to load the test suite for the sets library predicates.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/libraries/sets.rst#2025-04-06_snippet_1\n\nLANGUAGE: logtalk\nCODE:\n```\n| ?- logtalk_load(sets(tester)).\n```\n\n----------------------------------------\n\nTITLE: Graphviz Reference URL\nDESCRIPTION: URL reference for the Graphviz project, which provides the DOT language and related tools used for generating diagrams in Logtalk3.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/devtools/diagrams.rst#2025-04-06_snippet_8\n\nLANGUAGE: text\nCODE:\n```\nhttp://www.graphviz.org/\n```\n\n----------------------------------------\n\nTITLE: Random Element Selection with Rest List\nDESCRIPTION: Predicate that selects a random member from a list and returns both the selected element and the remaining list elements.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/random_protocol_0.rst.txt#2025-04-06_snippet_3\n\nLANGUAGE: logtalk\nCODE:\n```\nselect(-term,+list(term),-list(term))\n```\n\n----------------------------------------\n\nTITLE: Failed Test Counter in Logtalk Unit Testing\nDESCRIPTION: Dynamic counter tracking the number and total time (both CPU and wall time) for failed tests.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/lgtunit_0.rst.txt#2025-04-06_snippet_79\n\nLANGUAGE: Logtalk\nCODE:\n```\nfailed_(Counter,CPUTime,WallTime)\n```\n\n----------------------------------------\n\nTITLE: Usage Examples of protected/1 Directive in Logtalk\nDESCRIPTION: Demonstrates practical examples of using the protected/1 directive with different syntax patterns, including declaring a single predicate, a comma-separated list, and an array-style list of predicates as protected.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/refman/directives/protected_1.rst.txt#2025-04-06_snippet_2\n\nLANGUAGE: logtalk\nCODE:\n```\n:- protected(init/1).\n\n:- protected((print/2, convert/4)).\n\n:- protected([load/1, save/3]).\n```\n\n----------------------------------------\n\nTITLE: Enumerating Threaded Engines in Prolog\nDESCRIPTION: The threaded_engine/1 predicate enumerates all existing engines by backtracking. Engine names are opaque terms. This predicate requires a backend Prolog compiler with compatible multi-threading primitives.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/refman/predicates/threaded_engine_1.rst.txt#2025-04-06_snippet_0\n\nLANGUAGE: Prolog\nCODE:\n```\nthreaded_engine(Engine)\n```\n\n----------------------------------------\n\nTITLE: Defining Entity Properties Grammar in BNF\nDESCRIPTION: BNF grammar rules for Logtalk entity properties including category, object, and protocol properties.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/refman/grammar.rst.txt#2025-04-06_snippet_31\n\nLANGUAGE: bnf\nCODE:\n```\ncategory_property ::=\n      \"static\"\n      | \"dynamic\"\n      | \"built_in\"\n      | \"file(\" atom \")\"\n      | \"file(\" atom \",\" atom \")\"\n      | \"lines(\" integer \",\" integer \")\"\n```\n\n----------------------------------------\n\nTITLE: Defining Dynamic Predicate for Timestamp in Logtalk\nDESCRIPTION: Defines a dynamic predicate 'timestamp_/6' to cache the starting tests timestamp. It stores year, month, day, hours, minutes, and seconds as integers.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/coverage_report_0.rst.txt#2025-04-06_snippet_0\n\nLANGUAGE: Logtalk\nCODE:\n```\ntimestamp_(Year,Month,Day,Hours,Minutes,Seconds)\n```\n\n----------------------------------------\n\nTITLE: Basic Syntax Declaration for {}/1 Control Construct\nDESCRIPTION: Demonstrates the basic syntax patterns for using the {}/1 control construct with goals, closures, and terms.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/refman/control/external_call_1.rst#2025-04-06_snippet_0\n\nLANGUAGE: logtalk\nCODE:\n```\n{Goal}\n{Closure}\n{Term}\n```\n\n----------------------------------------\n\nTITLE: Loading points example and required library files\nDESCRIPTION: Loads the points example and necessary library files using the Logtalk loader.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/points/NOTES.md#2025-04-06_snippet_1\n\nLANGUAGE: logtalk\nCODE:\n```\nlogtalk_load(points(loader)).\n```\n\n----------------------------------------\n\nTITLE: Loading Base64 Library in Logtalk\nDESCRIPTION: Demonstrates how to load all entities in the base64 library using the loader.lgt utility file.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/libraries/base64.rst.txt#2025-04-06_snippet_0\n\nLANGUAGE: prolog\nCODE:\n```\n| ?- logtalk_load(base64(loader)).\n```\n\n----------------------------------------\n\nTITLE: Creating Brick Instances\nDESCRIPTION: This snippet creates four brick instances (a, b, c, d) with initial positions on the 'ground'.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/bricks/NOTES.md#2025-04-06_snippet_2\n\nLANGUAGE: logtalk\nCODE:\n```\nbrick::new(a, [position-(8, 1)]), brick::new(b, [position-(6, 1)]), brick::new(c, [position-(4, 1)]), brick::new(d, [position-(2, 1)]).\n```\n\n----------------------------------------\n\nTITLE: Template and Modes for protocol/1-2 Directive in Logtalk\nDESCRIPTION: Specifies the template and mode declarations for the protocol/1-2 directive. Shows the expected argument types, with protocol_identifier and extended_protocols being input arguments, denoted by the + prefix.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/refman/directives/protocol_1_2.rst#2025-04-06_snippet_1\n\nLANGUAGE: logtalk\nCODE:\n```\nprotocol(+protocol_identifier)\n\nprotocol(+protocol_identifier,\n    extends(+extended_protocols))\n```\n\n----------------------------------------\n\nTITLE: Sample Debug Message Object Definition\nDESCRIPTION: Example Logtalk object demonstrating debug message implementation with two methods that print debug messages for different groups.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/devtools/debug_messages.rst.txt#2025-04-06_snippet_2\n\nLANGUAGE: logtalk\nCODE:\n```\n:- object(foo).\n\n    :- public([bar/0, baz/0]).\n    :- uses(logtalk, [print_message/3]).\n\n    bar :-\n        print_message(debug(bar), xyz, @'bar/0 called').\n\n    baz :-\n        print_message(debug(baz), xyz, @'baz/0 called').\n\n:- end_object.\n```\n\n----------------------------------------\n\nTITLE: Parsing Float in Logtalk\nDESCRIPTION: Parses a float number. Accepts a float as input or output. Returns zero or one proof.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/number_grammars_1.rst.txt#2025-04-06_snippet_8\n\nLANGUAGE: Logtalk\nCODE:\n```\nfloat(Float)\n```\n\n----------------------------------------\n\nTITLE: Changing Strategy and Finalizing Bill\nDESCRIPTION: Changes the second customer's strategy to normal, adds more items, and prints the final bill.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/design_patterns/behavioral/strategy/NOTES.md#2025-04-06_snippet_7\n\nLANGUAGE: logtalk\nCODE:\n```\nsecond::(set_strategy(normal_strategy), add(1.3, 2), add(2.5, 1), print_bill).\n```\n\n----------------------------------------\n\nTITLE: Managing File-Local Operator Scope in Logtalk\nDESCRIPTION: Example showing how to declare and then undefine an operator to keep it local to a file. This pattern declares the operator before entities that use it and then undeclares it at the end.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/userman/predicates.rst#2025-04-06_snippet_12\n\nLANGUAGE: logtalk\nCODE:\n```\n% before any entity that uses the operator\n:- op(400, xfx, results).\n\n...\n\n% after all entities that used the operator\n:- op(0, xfx, results).\n```\n\n----------------------------------------\n\nTITLE: Configuring SWI-Prolog Library URL Mappings and Layout Options in Logtalk\nDESCRIPTION: This configuration snippet defines URL mappings for SWI-Prolog libraries to their GitHub repositories, specifies path prefixes to omit, directories to exclude from processing, and sets a top-to-bottom layout preference.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/tools/diagrams/SCRIPT.txt#2025-04-06_snippet_5\n\nLANGUAGE: prolog\nCODE:\n```\npath_url_prefixes(Library, 'https://github.com/SWI-Prolog/swipl-devel/tree/master/library/', ''),\n\t\tomit_path_prefixes([ClioPatria, SWIhttp, SWIpldoc, SWIsemweb, Library, Home]),\n\t\texclude_directories([web, test, scripts, w3c, etc, rdf, 'Windows', 'Java']),\n\t\tlayout(top_to_bottom)\n```\n\n----------------------------------------\n\nTITLE: Installing a Pack with GitLab Authentication in Logtalk\nDESCRIPTION: Demonstrates passing authentication headers to curl when installing a pack from GitLab using a private token.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/devtools/packs.rst.txt#2025-04-06_snippet_30\n\nLANGUAGE: logtalk\nCODE:\n```\n| ?- packs::install(reg, bar, 1:1:2, [curl('--header \"PRIVATE-TOKEN: foo42\"')]).\n```\n\n----------------------------------------\n\nTITLE: Disabling Unknown Entities Warnings in Logtalk\nDESCRIPTION: An example of using set_logtalk_flag/2 to globally turn off compiler warnings for unknown entities. This can be useful for suppressing certain types of warnings during development or compilation.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/refman/predicates/set_logtalk_flag_2.rst#2025-04-06_snippet_2\n\nLANGUAGE: Prolog\nCODE:\n```\n% turn off globally and by default the compiler\n% unknown entities warnings:\n| ?- set_logtalk_flag(unknown_entities, silent).\n```\n\n----------------------------------------\n\nTITLE: Defining conforms_to_protocol/2-3 in Logtalk\nDESCRIPTION: Defines the syntax and modes for the conforms_to_protocol/2-3 predicate, which checks if objects or categories conform to protocols. It supports querying with different scopes (public, protected, private) and implements a transitive closure for protocol implementation.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/refman/predicates/conforms_to_protocol_2_3.rst.txt#2025-04-06_snippet_0\n\nLANGUAGE: Logtalk\nCODE:\n```\nconforms_to_protocol(Object, Protocol)\nconforms_to_protocol(Category, Protocol)\n\nconforms_to_protocol(Object, Protocol, Scope)\nconforms_to_protocol(Category, Protocol, Scope)\n```\n\n----------------------------------------\n\nTITLE: Declaring deprecated built-in predicates in Logtalk\nDESCRIPTION: Support for declaring deprecated built-in predicates (with or without advised alternatives) in Logtalk adapter files.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/RELEASE_NOTES.md#2025-04-06_snippet_1\n\nLANGUAGE: Logtalk\nCODE:\n```\ndeprecated_builtin_predicate(Predicate, Arity).\ndeprecated_builtin_predicate(Predicate, Arity, Alternative).\n```\n\n----------------------------------------\n\nTITLE: Checking Monitor Status in Logtalk\nDESCRIPTION: Predicate to check if the monitor is currently active. It has a compilation flag of 'static' and returns zero or one proof.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/monitorp_0.rst.txt#2025-04-06_snippet_0\n\nLANGUAGE: Logtalk\nCODE:\n```\nmonitor_activated/0\n```\n\n----------------------------------------\n\nTITLE: Converting DOT to SVG using Graphviz alternatives\nDESCRIPTION: Commands to convert DOT files to SVG format using alternative Graphviz layout engines (fdp and circo).\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/devtools/diagrams.rst#2025-04-06_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nfdp -Tsvg diagram.dot > diagram.svg\ncirco -Tsvg diagram.dot > diagram.svg\n```\n\n----------------------------------------\n\nTITLE: Loading the Non-Deterministic Threading Example in Logtalk\nDESCRIPTION: Loads the non-deterministic threading example module using the loader file.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/threads/nondet/NOTES.md#2025-04-06_snippet_1\n\nLANGUAGE: logtalk\nCODE:\n```\nlogtalk_load(nondet(loader)).\n```\n\n----------------------------------------\n\nTITLE: Loading CBOR Library in Logtalk\nDESCRIPTION: Instructions for loading all entities in the CBOR library using the loader.lgt file.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/libraries/cbor.rst.txt#2025-04-06_snippet_3\n\nLANGUAGE: Logtalk\nCODE:\n```\n| ?- logtalk_load(cbor(loader)).\n```\n\n----------------------------------------\n\nTITLE: Comparing Floats for Approximate Equality in Logtalk\nDESCRIPTION: Compares two floats or lists of floats for approximate equality using 100*epsilon for absolute error and 99.999% accuracy for relative error if absolute comparison fails.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/number_0.rst.txt#2025-04-06_snippet_4\n\nLANGUAGE: Logtalk\nCODE:\n```\n=~=(Float1,Float2)\n```\n\n----------------------------------------\n\nTITLE: Append Program Example in Prolog\nDESCRIPTION: Sample Prolog code from the demo database showing the classic append/3 predicate implementation, which concatenates two lists.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/contributions/verdi_neruda.rst#2025-04-06_snippet_2\n\nLANGUAGE: Prolog\nCODE:\n```\nappend([],A,A) if\n    true.\nappend([A|B],C,[A|D]) if\n    append(B,C,D).\n.\n.\n.\n```\n\n----------------------------------------\n\nTITLE: Parsing Natural Number in Logtalk\nDESCRIPTION: Parses a natural number (non-negative integer). Accepts a non-negative integer as input or output. Returns zero or one proof.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/number_grammars_1.rst.txt#2025-04-06_snippet_6\n\nLANGUAGE: Logtalk\nCODE:\n```\nnatural(Natural)\n```\n\n----------------------------------------\n\nTITLE: Comparing Numbers for Approximate Equality in Logtalk\nDESCRIPTION: Compares two numbers for approximate equality using the epsilon arithmetic constant. It uses the formula abs(Number1 - Number2) =< max(abs(Number1), abs(Number2)) * epsilon.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/number_0.rst.txt#2025-04-06_snippet_0\n\nLANGUAGE: Logtalk\nCODE:\n```\napproximately_equal(Number1,Number2)\n```\n\n----------------------------------------\n\nTITLE: System Error Method Declaration\nDESCRIPTION: Basic declaration of the system_error/0 method that throws a system error when runtime execution can no longer proceed.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/refman/methods/system_error_0.rst#2025-04-06_snippet_0\n\nLANGUAGE: logtalk\nCODE:\n```\nsystem_error\n```\n\n----------------------------------------\n\nTITLE: Discontiguous Predicate Declaration in Logtalk\nDESCRIPTION: Using the discontiguous directive to declare that a predicate's clauses may not be contiguous in the source code. This should be avoided when possible as it makes code harder to read.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/userman/predicates.rst.txt#2025-04-06_snippet_9\n\nLANGUAGE: logtalk\nCODE:\n```\n:- discontiguous(foo/1).\n```\n\n----------------------------------------\n\nTITLE: Implementing Protocol in Attributes Category\nDESCRIPTION: Shows how to implement a protocol in the attributes category, allowing for interface specification separate from implementation.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/tutorial/attributes.rst.txt#2025-04-06_snippet_1\n\nLANGUAGE: logtalk\nCODE:\n```\n:- category(attributes,\n    implements(attributes_protocol)).\n\n    ...\n\n:- end_category.\n```\n\n----------------------------------------\n\nTITLE: Temporal Met By Relation\nDESCRIPTION: Checks if Interval1 is met by Interval2. Returns zero or one solutions.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/intervalp_0.rst.txt#2025-04-06_snippet_5\n\nLANGUAGE: Logtalk\nCODE:\n```\nmet_by(Interval1,Interval2)\n```\n\n----------------------------------------\n\nTITLE: Writing Terms to Character Lists in Logtalk\nDESCRIPTION: Predicates for writing Prolog terms to character lists, including variants that handle custom tails and write options.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/term_io_protocol_0.rst.txt#2025-04-06_snippet_4\n\nLANGUAGE: Logtalk\nCODE:\n```\nwrite_term_to_chars(Term,Chars,Options)\n```\n\nLANGUAGE: Logtalk\nCODE:\n```\nwrite_term_to_chars(Term,Chars,Tail,Options)\n```\n\nLANGUAGE: Logtalk\nCODE:\n```\nwrite_to_chars(Term,Chars)\n```\n\n----------------------------------------\n\nTITLE: Randomizing Seed in Logtalk\nDESCRIPTION: Randomizes the random generator using a positive integer to compute a new seed. Large integers are recommended for better randomization, or when using small values, the first dozen random values should be discarded.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/fast_random_0.rst.txt#2025-04-06_snippet_1\n\nLANGUAGE: Logtalk\nCODE:\n```\nrandomize(Seed)\n```\n\n----------------------------------------\n\nTITLE: Modes and Proofs for parameter/2 Method in Logtalk\nDESCRIPTION: Specifies the calling modes and number of proofs for the parameter/2 method, indicating it accepts an integer and returns at most one term.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/refman/methods/parameter_2.rst#2025-04-06_snippet_1\n\nLANGUAGE: logtalk\nCODE:\n```\nparameter(+integer, ?term) - zero_or_one\n```\n\n----------------------------------------\n\nTITLE: Testing Observer Pattern Event\nDESCRIPTION: Demonstrates triggering an observed event by sending a ping message to the subject object, which will be captured by the observer.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/design_patterns/behavioral/observer/NOTES.md#2025-04-06_snippet_2\n\nLANGUAGE: logtalk\nCODE:\n```\nsubject::ping(Reply).\n```\n\n----------------------------------------\n\nTITLE: Testing Timeout Library in Logtalk\nDESCRIPTION: This snippet shows how to load and run tests for the timeout library predicates using the tester.lgt file.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/libraries/timeout.rst#2025-04-06_snippet_1\n\nLANGUAGE: Prolog\nCODE:\n```\n| ?- logtalk_load(timeout(tester)).\n```\n\n----------------------------------------\n\nTITLE: Creating and Drawing Dynamic Circle with API1\nDESCRIPTION: Creates a new dynamic circle using drawing_api_1, resizes it by 25%, and draws it. Shows object composition and delegation.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/design_patterns/structural/bridge/NOTES.md#2025-04-06_snippet_2\n\nLANGUAGE: logtalk\nCODE:\n```\ncircle::new(Circle1, [drawing_api(drawing_api_1), x(1.0), y(2.0), radius(3.0)]),\nCircle1::(resize(25), draw).\n```\n\n----------------------------------------\n\nTITLE: File Scanning with Options in Logtalk\nDESCRIPTION: Method to scan all entities in a loaded source file for dead code using specified options. The file can be referenced by name, basename, full path, or library notation.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/dead_code_scanner_0.rst.txt#2025-04-06_snippet_1\n\nLANGUAGE: logtalk\nCODE:\n```\nfile(File,Options)\n```\n\n----------------------------------------\n\nTITLE: Binary Input Assertion with Custom Alias in Logtalk\nDESCRIPTION: Returns an assertion for checking that a temporary file referenced by the given alias contains the expected binary contents. The predicate generates a test assertion that can be used in unit tests.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/lgtunit_0.rst.txt#2025-04-06_snippet_38\n\nLANGUAGE: logtalk\nCODE:\n```\nbinary_input_assertion(Alias,Bytes,Assertion)\n```\n\n----------------------------------------\n\nTITLE: Listing All Dynamic Predicates in Logtalk\nDESCRIPTION: Lists all clauses of all visible dynamic predicates to the current output stream. This predicate takes no arguments and provides one proof.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/listing_0.rst.txt#2025-04-06_snippet_0\n\nLANGUAGE: Logtalk\nCODE:\n```\nlisting/0\n```\n\n----------------------------------------\n\nTITLE: Declaring Dynamic Predicate sub_diagram_/2 in Logtalk\nDESCRIPTION: This snippet declares the sub_diagram_/2 predicate as dynamic. It represents a table of directory sub-diagrams to support their generation, with Project and Directory as parameters.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/directory_dependency_diagram_1.rst.txt#2025-04-06_snippet_1\n\nLANGUAGE: logtalk\nCODE:\n```\nsub_diagram_(Project,Directory)\n```\n\n----------------------------------------\n\nTITLE: Querying Unicode Categories\nDESCRIPTION: Shows how to use the unicode_category/2 predicate from unicode_categories.pl to get the category of a Unicode code point.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/libraries/unicode_data.rst#2025-04-06_snippet_4\n\nLANGUAGE: Prolog\nCODE:\n```\n?- unicode_category(CodePoint, Category).\n```\n\n----------------------------------------\n\nTITLE: Implementing Parametric Object with parameter/2 in Logtalk\nDESCRIPTION: Demonstrates the use of parameter/2 in a parametric object 'box' to access color and weight parameters.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/refman/methods/parameter_2.rst.txt#2025-04-06_snippet_2\n\nLANGUAGE: Logtalk\nCODE:\n```\n:- object(box(_Color, _Weight)).\n\n    ...\n\n    % this clause is translated into\n    % a fact upon compilation\n    color(Color) :-\n        parameter(1, Color).\n\n    % upon compilation, the >/2 call will be\n    % the single goal in the clause body\n    heavy :-\n        parameter(2, Weight),\n        Weight > 10.\n    ...\n```\n\n----------------------------------------\n\nTITLE: Using Debug Meta-messages in Tests\nDESCRIPTION: Example of using debug meta-messages for test logging that can be toggled with the debug flag.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/tools/lgtunit/NOTES.md#2025-04-06_snippet_45\n\nLANGUAGE: logtalk\nCODE:\n```\n:- uses(logtalk, [\n\t\tprint_message(debug, my_app, Message) as dbg(Message)\n\t]).\n\n\ttest(some_test_id, ...) :-\n\t\t...,\n\t\tdbg('Some intermediate value'-Value),\n\t\t...,\n\t\tdbg([Stream]>>custom_print_goal(Stream, ...)),\n\t\t...\n```\n\n----------------------------------------\n\nTITLE: Defining between/3 predicate\nDESCRIPTION: Code change to use standard between/3 predicate internally in the compiler and benchmarks example instead of custom implementation\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/RELEASE_NOTES.md#2025-04-06_snippet_29\n\nLANGUAGE: Prolog\nCODE:\n```\nbetween(Lower, Upper, Value)\n```\n\n----------------------------------------\n\nTITLE: Starting Nani Search Adventure in Logtalk\nDESCRIPTION: Conditional statement to start the Nani Search text adventure if not running in a Jupyter notebook environment.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/adventure/NOTES.md#2025-04-06_snippet_5\n\nLANGUAGE: logtalk\nCODE:\n```\n(current_object(jupyter) -> true; nani_search::main).\n```\n\n----------------------------------------\n\nTITLE: Loading Object Wrapper Hook\nDESCRIPTION: Command to load the object wrapper hook functionality in Logtalk.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/object_wrapper_hook_0.rst.txt#2025-04-06_snippet_0\n\nLANGUAGE: logtalk\nCODE:\n```\nlogtalk_load(hook_objects(loader))\n```\n\n----------------------------------------\n\nTITLE: Argument Order Change Example\nDESCRIPTION: Shows how to use predicate aliases to change the order of predicate arguments.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/refman/directives/uses_2.rst.txt#2025-04-06_snippet_5\n\nLANGUAGE: logtalk\nCODE:\n```\n:- uses(meta, [\n    fold_left(Closure,Accumulator,List,Result) as foldl(Closure,List,Accumulator,Result)\n]).\n```\n\n----------------------------------------\n\nTITLE: Generating Version 4 UUID as Atom in Logtalk\nDESCRIPTION: Generates a version 4 UUID as an atom using the uuid::uuid_v4/1 predicate.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/libraries/uuid.rst.txt#2025-04-06_snippet_5\n\nLANGUAGE: Prolog\nCODE:\n```\n| ?- uuid::uuid_v4(UUID).\nUUID = '1c652782-69c5-4252-88c8-09e576a44db5'\nyes\n```\n\n----------------------------------------\n\nTITLE: Using Hook Pipeline with Compiler Option\nDESCRIPTION: Example of how to use the hook_pipeline object with the compiler option to apply a pipeline of hook objects to expand source files. The Pipeline parameter is a list of hook objects to be applied in sequence.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/hook_pipeline_1.rst.txt#2025-04-06_snippet_0\n\nLANGUAGE: logtalk\nCODE:\n```\nhook(hook_pipeline(Pipeline))\n```\n\n----------------------------------------\n\nTITLE: Saving Spreadsheet in Logtalk\nDESCRIPTION: Logtalk code to save the 'capitals' object data to an Excel spreadsheet.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/apache_poi/NOTES.md#2025-04-06_snippet_7\n\nLANGUAGE: logtalk\nCODE:\n```\nspreadsheet::save(capitals, capitals, 'capitals.xls').\n```\n\n----------------------------------------\n\nTITLE: Example Usage of threaded_engine_next_reified/2 in Logtalk\nDESCRIPTION: Demonstrates how to use the threaded_engine_next_reified/2 predicate to get the next reified answer from a worker engine named 'worker_1'.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/refman/predicates/threaded_engine_next_reified_2.rst.txt#2025-04-06_snippet_2\n\nLANGUAGE: Prolog\nCODE:\n```\n% get the next reified answer from the worker_1 engine:\n| ?- threaded_engine_next_reified(worker_1, Answer).\n```\n\n----------------------------------------\n\nTITLE: Using threaded_engine_next_reified/2 Predicate in Logtalk\nDESCRIPTION: The predicate signature for retrieving an answer from an engine and signaling it to compute the next answer. It blocks until an answer is available and returns answers as terms the(Answer), no, or exception(Error).\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/refman/predicates/threaded_engine_next_reified_2.rst#2025-04-06_snippet_0\n\nLANGUAGE: prolog\nCODE:\n```\nthreaded_engine_next_reified(Engine, Answer)\n```\n\n----------------------------------------\n\nTITLE: Testing Simple Meta-predicates in Logtalk\nDESCRIPTION: Demonstrates the use of simple meta-predicate definitions from the 'goals.lgt' file.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/metapredicates/NOTES.md#2025-04-06_snippet_1\n\nLANGUAGE: logtalk\nCODE:\n```\nsimple_client::test_whatever.\n```\n\nLANGUAGE: logtalk\nCODE:\n```\nsimple_client::test_whatever_all.\n```\n\nLANGUAGE: logtalk\nCODE:\n```\nsimple_client_alt::test_whatever.\n```\n\nLANGUAGE: logtalk\nCODE:\n```\nsimple_client_alt::test_whatever_all.\n```\n\n----------------------------------------\n\nTITLE: Load Assumptions Example - Logtalk\nDESCRIPTION: Loads the assumptions example module into the environment\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/assumptions/NOTES.md#2025-04-06_snippet_1\n\nLANGUAGE: logtalk\nCODE:\n```\nlogtalk_load(assumptions(loader)).\n```\n\n----------------------------------------\n\nTITLE: Defining Entity and Predicate Weight Hook in Logtalk\nDESCRIPTION: This predicate allows customization of the relative weight between entity documentation and predicates documentation in percentage. The sum of the two values must be equal to 100.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/doc_metric_0.rst.txt#2025-04-06_snippet_0\n\nLANGUAGE: Logtalk\nCODE:\n```\nentity_predicates_weights_hook(EntityWeight,PredicatesWeight)\n```\n\n----------------------------------------\n\nTITLE: Throwing Permission Error in Logtalk\nDESCRIPTION: Demonstrates the basic syntax for calling the permission_error/3 method. This method throws a permission error with specified operation, permission type, and culprit.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/refman/methods/permission_error_3.rst#2025-04-06_snippet_0\n\nLANGUAGE: Prolog\nCODE:\n```\npermission_error(Operation, PermissionType, Culprit)\n```\n\n----------------------------------------\n\nTITLE: Template and Modes for Public Directive in Logtalk\nDESCRIPTION: Specifies the template and modes for the public/1 directive. The directive accepts predicate indicators, non-terminal indicators, or operator declarations as input arguments.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/refman/directives/public_1.rst.txt#2025-04-06_snippet_1\n\nLANGUAGE: logtalk\nCODE:\n```\npublic(+predicate_indicator_term)\npublic(+non_terminal_indicator_term)\npublic(+operator_declaration)\n```\n\n----------------------------------------\n\nTITLE: Specifying catch/3 Method Modes and Proofs in Prolog\nDESCRIPTION: Specifies the modes and number of proofs for the catch/3 method. It indicates that all arguments are potentially input or output, and the method can succeed zero or more times.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/refman/methods/catch_3.rst.txt#2025-04-06_snippet_1\n\nLANGUAGE: Prolog\nCODE:\n```\ncatch(?callable, ?term, ?callable) - zero_or_more\n```\n\n----------------------------------------\n\nTITLE: Multi-threading and Engine Operations\nDESCRIPTION: Demonstrates thread handling and engine operations in Logtalk including thread creation, management and engine control predicates.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/coding/subethaedit4/Logtalk.seemode/Contents/Resources/ExampleSyntax.txt#2025-04-06_snippet_2\n\nLANGUAGE: logtalk\nCODE:\n```\nmulti_threading :-\n\t\tthreaded(Goals),\n\t\tthreaded_call(Goal),\n\t\tthreaded_call(Goal, Tag),\n\t\tthreaded_once(Goal),\n\t\tthreaded_once(Goal, Tag),\n\t\tthreaded_ignore(Goal),\n\t\tthreaded_exit(Goal),\n\t\tthreaded_exit(Goal, Tag),\n\t\tthreaded_peek(Goal),\n\t\tthreaded_peek(Goal, Tag),\n\t\tthreaded_cancel(Tag),\n\t\tthreaded_wait(Notification),\n\t\tthreaded_notify(Notification).\n```\n\n----------------------------------------\n\nTITLE: Loading Logtalk Debugger\nDESCRIPTION: Query to load the Logtalk debugger tool. This must be executed manually at the top-level interpreter or automatically from a settings file.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/tools/debugger/NOTES.md#2025-04-06_snippet_0\n\nLANGUAGE: Prolog\nCODE:\n```\n| ?- logtalk_load(debugger(loader)).\n```\n\n----------------------------------------\n\nTITLE: Loading Timeout Library in Logtalk\nDESCRIPTION: Command to load all entities in the timeout library using the loader file.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/library/timeout/NOTES.md#2025-04-06_snippet_0\n\nLANGUAGE: logtalk\nCODE:\n```\n| ?- logtalk_load(timeout(loader)).\n```\n\n----------------------------------------\n\nTITLE: Calling object::sum/2 without debugging statements (instantiation error)\nDESCRIPTION: This snippet shows calling the sum/2 predicate without debugging statements, resulting in an instantiation error.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/debug_hooks/NOTES.md#2025-04-06_snippet_8\n\nLANGUAGE: logtalk\nCODE:\n```\nobject::sum([1,2,3,_], Sum).\n```\n\n----------------------------------------\n\nTITLE: Loading Futures Module\nDESCRIPTION: Loads the futures example module into the Logtalk environment.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/futures/NOTES.md#2025-04-06_snippet_1\n\nLANGUAGE: logtalk\nCODE:\n```\nlogtalk_load(futures(loader)).\n```\n\n----------------------------------------\n\nTITLE: Predicate Signature Definition in Logtalk\nDESCRIPTION: Defines the signature and basic structure of the define_events/5 predicate which takes Event, Object, Message, Sender and Monitor as parameters.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/refman/predicates/define_events_5.rst.txt#2025-04-06_snippet_0\n\nLANGUAGE: logtalk\nCODE:\n```\ndefine_events(Event, Object, Message, Sender, Monitor)\n```\n\n----------------------------------------\n\nTITLE: Defining protocol directive syntax in Logtalk\nDESCRIPTION: Shows the basic syntax for the protocol/1-2 directive, which is used to declare a protocol with optional extension of other protocols.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/refman/directives/protocol_1_2.rst.txt#2025-04-06_snippet_0\n\nLANGUAGE: logtalk\nCODE:\n```\nprotocol(Protocol)\n\nprotocol(Protocol,\n    extends(Protocols))\n```\n\n----------------------------------------\n\nTITLE: Generating Version 4 UUID as Atom in Logtalk\nDESCRIPTION: Shows how to generate a random version 4 UUID as an atom. Version 4 UUIDs use random or pseudo-random numbers for generation.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/library/uuid/NOTES.md#2025-04-06_snippet_5\n\nLANGUAGE: logtalk\nCODE:\n```\n| ?- uuid::uuid_v4(UUID).\nUUID = '1c652782-69c5-4252-88c8-09e576a44db5'\nyes\n```\n\n----------------------------------------\n\nTITLE: Enumerating Clause Profiling Data in Logtalk\nDESCRIPTION: Enumerates, by backtracking, all collected clause profiling data. This predicate is compiled with the 'dynamic' flag and can provide zero or more proofs for given entity, functor, arity, clause number, and count.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/ports_profiler_0.rst.txt#2025-04-06_snippet_9\n\nLANGUAGE: Logtalk\nCODE:\n```\nclause(Entity,Functor,Arity,ClauseNumber,Count)\n```\n\n----------------------------------------\n\nTITLE: Enumerating Default Options in Logtalk\nDESCRIPTION: The default_option/1 predicate enumerates all default options through backtracking. It can be used to retrieve individual default options one at a time.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/options_protocol_0.rst.txt#2025-04-06_snippet_4\n\nLANGUAGE: prolog\nCODE:\n```\ndefault_option(Option)\n```\n\n----------------------------------------\n\nTITLE: Declaring a dynamic predicate in a named database\nDESCRIPTION: Declares a dynamic predicate 'foo/1' in the 'my_db' database using db_dynamic/2.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/named_databases/NOTES.md#2025-04-06_snippet_3\n\nLANGUAGE: logtalk\nCODE:\n```\ndb_dynamic(my_db, foo/1).\n```\n\n----------------------------------------\n\nTITLE: Library Dependency Diagrams\nDESCRIPTION: Examples of generating file loading and dependency diagrams for libraries, including options for URL linking and path prefixes.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/tools/diagrams/SCRIPT.txt#2025-04-06_snippet_3\n\nLANGUAGE: logtalk\nCODE:\n```\n| ?- file_load_diagram::library(searching).\n| ?- library_load_diagram(dot)::rlibrary(tools, [zoom(true)]).\n| ?- file_dependency_diagram::library(searching, [omit_path_prefixes(['$LOGTALKUSER'])]).\n```\n\n----------------------------------------\n\nTITLE: Specifying Modes for conforms_to_protocol/2-3 in Logtalk\nDESCRIPTION: Defines the modes and number of proofs for the conforms_to_protocol/2-3 predicate. It shows that the predicate can be called with variables or identifiers for objects, categories, protocols, and scopes, returning zero or more results.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/refman/predicates/conforms_to_protocol_2_3.rst.txt#2025-04-06_snippet_1\n\nLANGUAGE: Logtalk\nCODE:\n```\nconforms_to_protocol(?object_identifier, ?protocol_identifier) - zero_or_more\nconforms_to_protocol(?category_identifier, ?protocol_identifier) - zero_or_more\n\nconforms_to_protocol(?object_identifier, ?protocol_identifier, ?scope) - zero_or_more\nconforms_to_protocol(?category_identifier, ?protocol_identifier, ?scope) - zero_or_more\n```\n\n----------------------------------------\n\nTITLE: One Ground Constraint Demo\nDESCRIPTION: Demonstrates the oneground constraint functionality\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/constraints/yap/NOTES.md#2025-04-06_snippet_5\n\nLANGUAGE: logtalk\nCODE:\n```\noneground::oneground(X, Y, Z), Y = 5.\n```\n\n----------------------------------------\n\nTITLE: Internal counter representation in Logtalk\nDESCRIPTION: Private predicate that stores the table of named counters. It is dynamically defined and maintains the association between counter names and their values.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/counters_0.rst.txt#2025-04-06_snippet_5\n\nLANGUAGE: Logtalk\nCODE:\n```\ncounter_(Counter,Value)\n```\n\n----------------------------------------\n\nTITLE: MinHeap Object Declaration - Logtalk\nDESCRIPTION: Code snippet showing the minimum heap object identifier as used in Logtalk. This object extends the heap object with standard comparison operators.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/minheap_0.rst.txt#2025-04-06_snippet_0\n\nLANGUAGE: logtalk\nCODE:\n```\nminheap\n```\n\n----------------------------------------\n\nTITLE: Parsing Single Decimal Digit in Logtalk\nDESCRIPTION: Parses a single decimal digit. Accepts an atomic value as input or output. Returns zero or one proof.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/number_grammars_1.rst.txt#2025-04-06_snippet_2\n\nLANGUAGE: Logtalk\nCODE:\n```\ndigit(Digit)\n```\n\n----------------------------------------\n\nTITLE: Running All Library Tests with Shell Commands\nDESCRIPTION: Shell commands for running all library tests using the logtalk_tester automation script with ECLiPSe as the Prolog backend.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/libraries/overview.rst#2025-04-06_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ cd ~/logtalk/library\n$ logtalk_tester -p eclipse\n```\n\n----------------------------------------\n\nTITLE: Loading the checkpoint synchronization example\nDESCRIPTION: Loads the checkpoint synchronization example using the Logtalk loader.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/threads/checkpoint/NOTES.md#2025-04-06_snippet_1\n\nLANGUAGE: logtalk\nCODE:\n```\nlogtalk_load(checkpoint(loader)).\n```\n\n----------------------------------------\n\nTITLE: Defining Table of Contents for Logtalk Built-in Predicates in reStructuredText\nDESCRIPTION: This code snippet defines a table of contents using reStructuredText syntax. It specifies the structure for documenting Logtalk's built-in predicates, organized into different categories.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/refman/predicates/index.rst#2025-04-06_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n===================\nBuilt-in predicates\n===================\n\n.. toctree::\n   :maxdepth: 2\n\n   enumerating_entity_predicates\n   enumerating_entity_property_predicates\n   creating_entity_predicates\n   abolishing_entity_predicates\n   entity_relation_predicates\n   event_handling_predicates\n   multi_threading_predicates\n   engine_predicates\n   compiling_predicates\n   flag_predicates\n   linter_predicates\n```\n\n----------------------------------------\n\nTITLE: Calling object::sum/2 without debugging statements (invalid list)\nDESCRIPTION: This snippet shows calling the sum/2 predicate without debugging statements using an invalid list argument, resulting in failure.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/debug_hooks/NOTES.md#2025-04-06_snippet_10\n\nLANGUAGE: logtalk\nCODE:\n```\nobject::sum(wrong, Sum).\n```\n\n----------------------------------------\n\nTITLE: Running PDDL Parser Tests from Any Directory\nDESCRIPTION: Command to run unit tests for the PDDL parser from any directory location.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/contributions/pddl_parser.rst#2025-04-06_snippet_2\n\nLANGUAGE: prolog\nCODE:\n```\n?- logtalk_load(pddl_parser(tester)).\n```\n\n----------------------------------------\n\nTITLE: Entity and Manual Access\nDESCRIPTION: Predicates for accessing help on Logtalk entities and accessing user/reference manuals.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/help_0.rst.txt#2025-04-06_snippet_6\n\nLANGUAGE: logtalk\nCODE:\n```\nentity(Entity)\nmanuals/0\n```\n\n----------------------------------------\n\nTITLE: Object Initialization in Logtalk\nDESCRIPTION: Demonstrates how to use the initialization/1 directive to define a goal to be executed when an object is loaded. Examples show local predicate calls and messages to other objects.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/userman/objects.rst.txt#2025-04-06_snippet_18\n\nLANGUAGE: logtalk\nCODE:\n```\n:- object(foo).\n\n    :- initialization(init).\n    :- private(init/0).\n\n    init :-\n        ... .\n\n    ...\n\n:- end_object.\n```\n\nLANGUAGE: logtalk\nCODE:\n```\n:- object(assembler).\n\n    :- initialization(control::start).\n    ...\n\n:- end_object.\n```\n\nLANGUAGE: logtalk\nCODE:\n```\n:- object(profiler,\n    imports(monitor)).\n\n    :- initialization(::reset).\n    ...\n\n:- end_object.\n```\n\n----------------------------------------\n\nTITLE: Loading CBOR Library Tests in Logtalk\nDESCRIPTION: Command to load the test suite for the CBOR library predicates.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/libraries/cbor.rst#2025-04-06_snippet_4\n\nLANGUAGE: logtalk\nCODE:\n```\n| ?- logtalk_load(cbor(tester)).\n```\n\n----------------------------------------\n\nTITLE: Test Suite Running Flag in Logtalk Unit Testing\nDESCRIPTION: Internal dynamic flag used to track when running multiple test sets as a unified set.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/lgtunit_0.rst.txt#2025-04-06_snippet_72\n\nLANGUAGE: Logtalk\nCODE:\n```\nrunning_test_sets_\n```\n\n----------------------------------------\n\nTITLE: Print Message Token Mode Declaration\nDESCRIPTION: Specifies the mode declaration for the print_message_token method, indicating parameter types and expected number of solutions.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/refman/methods/print_message_token_4.rst.txt#2025-04-06_snippet_1\n\nLANGUAGE: prolog\nCODE:\n```\nprint_message_token(@stream_or_alias, @atom, @nonvar, @list(nonvar)) - zero_or_one\n```\n\n----------------------------------------\n\nTITLE: Declaring threaded_engine_fetch/1 Predicate in Prolog\nDESCRIPTION: Defines the signature of the threaded_engine_fetch/1 predicate, which fetches a term from the engine term queue. It blocks until a term is available and fails if not called from within an engine.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/refman/predicates/threaded_engine_fetch_1.rst.txt#2025-04-06_snippet_0\n\nLANGUAGE: Prolog\nCODE:\n```\nthreaded_engine_fetch(Term)\n```\n\n----------------------------------------\n\nTITLE: Generating Entity Diagram for Points Example\nDESCRIPTION: Example showing how to generate an entity diagram for a source file using default options. Requires the source_data flag to be enabled.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/tools/diagrams/SCRIPT.txt#2025-04-06_snippet_1\n\nLANGUAGE: logtalk\nCODE:\n```\n| ?- set_logtalk_flag(source_data, on), logtalk_load(points(loader)).\n| ?- entity_diagram(dot)::file(points).\n```\n\n----------------------------------------\n\nTITLE: Defining a Simplified Reflective Class in Logtalk\nDESCRIPTION: Shows a simplified way to define a reflective class in Logtalk by making the class its own metaclass.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/userman/objects.rst.txt#2025-04-06_snippet_9\n\nLANGUAGE: logtalk\nCODE:\n```\n:- object(class,\n    instantiates(class)).\n    ...\n:- end_object.\n```\n\n----------------------------------------\n\nTITLE: Loading Object Aliases Example\nDESCRIPTION: Loads the object_aliases example module into the Logtalk environment.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/object_aliases/NOTES.md#2025-04-06_snippet_1\n\nLANGUAGE: logtalk\nCODE:\n```\nlogtalk_load(object_aliases(loader)).\n```\n\n----------------------------------------\n\nTITLE: Setting Code Prefix for Better Profiler Output\nDESCRIPTION: Shows how to set the code_prefix flag to get user-level object and predicate names instead of compiler-generated internal names when using the SWI-Prolog and YAP profilers.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/devtools/profiler.rst#2025-04-06_snippet_4\n\nLANGUAGE: prolog\nCODE:\n```\n?- set_logtalk_flag(code_prefix, '.').\n```\n\n----------------------------------------\n\nTITLE: Listing Employee Object Predicates\nDESCRIPTION: Uses findall/3 to retrieve all predicates defined in the employee object before any complementation.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/complements/allow/NOTES.md#2025-04-06_snippet_4\n\nLANGUAGE: logtalk\nCODE:\n```\nfindall(Predicate, employee::current_predicate(Predicate), Predicates).\n```\n\n----------------------------------------\n\nTITLE: Specifying Modes and Number of Proofs for false/0 in Logtalk\nDESCRIPTION: This snippet defines the mode and number of proofs for the false/0 method. It indicates that the method takes no arguments and provides one proof (which always fails).\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/refman/methods/false_0.rst.txt#2025-04-06_snippet_1\n\nLANGUAGE: Prolog\nCODE:\n```\nfalse - one\n```\n\n----------------------------------------\n\nTITLE: Processing Data with Defaults\nDESCRIPTION: Processes and prints data using default values for missing information.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/missing_data/NOTES.md#2025-04-06_snippet_2\n\nLANGUAGE: logtalk\nCODE:\n```\ndata_processing::print.\n```\n\n----------------------------------------\n\nTITLE: Input/Output Stream Predicates in Logtalk\nDESCRIPTION: Built-in predicates for managing input and output streams in Logtalk.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/coding/subethaedit2/Logtalk.mode/Contents/Resources/AutocompleteAdditions.txt#2025-04-06_snippet_19\n\nLANGUAGE: logtalk\nCODE:\n```\ncurrent_input()\ncurrent_output()\nset_input()\nset_output()\nopen(, , , )\nopen(, , )\nclose(, )\nclose()\nflush_output()\nflush_output\nstream_property(, )\nset_stream_position(, )\nat_end_of_stream()\nat_end_of_stream\n```\n\n----------------------------------------\n\nTITLE: Loading Help Tool in Logtalk\nDESCRIPTION: Command to load the help tool into Logtalk environment\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/tools/help/NOTES.md#2025-04-06_snippet_0\n\nLANGUAGE: logtalk\nCODE:\n```\n| ?- logtalk_load(help(loader)).\n```\n\n----------------------------------------\n\nTITLE: Loading Meta Library in Logtalk\nDESCRIPTION: This snippet demonstrates how to load the main entities in the 'meta' library using the loader.lgt file.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/libraries/meta.rst#2025-04-06_snippet_0\n\nLANGUAGE: Prolog\nCODE:\n```\n| ?- logtalk_load(meta(loader)).\n```\n\n----------------------------------------\n\nTITLE: Package Reset Predicate\nDESCRIPTION: Resets the package system by deleting all defined registries and installed packs along with their directory structure.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/packs_common_0.rst.txt#2025-04-06_snippet_1\n\nLANGUAGE: logtalk\nCODE:\n```\nreset/0\n```\n\n----------------------------------------\n\nTITLE: Parsing Integer in Logtalk\nDESCRIPTION: Parses an integer. Accepts an integer as input or output. Returns zero or one proof.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/number_grammars_1.rst.txt#2025-04-06_snippet_7\n\nLANGUAGE: Logtalk\nCODE:\n```\ninteger(Integer)\n```\n\n----------------------------------------\n\nTITLE: Logtalk Load Predicate Modes\nDESCRIPTION: Specification of predicate modes and number of proofs, showing input requirements and execution behavior.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/refman/predicates/logtalk_load_1.rst.txt#2025-04-06_snippet_1\n\nLANGUAGE: logtalk\nCODE:\n```\nlogtalk_load(@source_file_name) - zero_or_one\nlogtalk_load(@list(source_file_name)) - zero_or_one\n```\n\n----------------------------------------\n\nTITLE: Meta-Predicate Declaration Example\nDESCRIPTION: Example of meta_predicate/1 directive usage with goal meta-arguments passed to call/2-N predicates.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/RELEASE_NOTES.md#2025-04-06_snippet_74\n\nLANGUAGE: Prolog\nCODE:\n```\nmeta_predicate/1\n```\n\n----------------------------------------\n\nTITLE: Loading Dependents Library in Logtalk\nDESCRIPTION: Command to load all entities in the dependents library using the loader utility file.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/libraries/dependents.rst#2025-04-06_snippet_0\n\nLANGUAGE: logtalk\nCODE:\n```\n| ?- logtalk_load(dependents(loader)).\n```\n\n----------------------------------------\n\nTITLE: Dynamic Predicate for Tracking Undefined Calls in Logtalk\nDESCRIPTION: Internal dynamic table that tracks object predicates that are called but not defined locally. Used during analysis to identify missing implementations.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/wrapper_0.rst.txt#2025-04-06_snippet_15\n\nLANGUAGE: Logtalk\nCODE:\n```\npredicate_called_but_not_defined_/2\n```\n\n----------------------------------------\n\nTITLE: Querying Circle Object Protocol\nDESCRIPTION: Retrieves and displays the public predicates of the circle(_) object. This shows the available operations on a circle, including aliases.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/aliases/NOTES.md#2025-04-06_snippet_5\n\nLANGUAGE: logtalk\nCODE:\n```\n%%table\ncircle(_)::current_predicate(Predicate).\n```\n\n----------------------------------------\n\nTITLE: Loading the Diagrams Tool Tests\nDESCRIPTION: Query to load the test suite for the diagrams tool.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/devtools/diagrams.rst.txt#2025-04-06_snippet_4\n\nLANGUAGE: logtalk\nCODE:\n```\n| ?- logtalk_load(diagrams(tester)).\n```\n\n----------------------------------------\n\nTITLE: Loading the Meta Compiler Library in Logtalk\nDESCRIPTION: Shows how to load the main entities in the meta_compiler library using the loader.lgt file.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/libraries/meta_compiler.rst#2025-04-06_snippet_0\n\nLANGUAGE: prolog\nCODE:\n```\n| ?- logtalk_load(meta_compiler(loader)).\n```\n\n----------------------------------------\n\nTITLE: Path Finding Example - Logtalk\nDESCRIPTION: Demonstrates path finding between nodes 1 and 5 using assumptions\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/assumptions/NOTES.md#2025-04-06_snippet_2\n\nLANGUAGE: logtalk\nCODE:\n```\n%%table\npaths::init, paths::path(1, 5, Path).\n```\n\n----------------------------------------\n\nTITLE: Generating Coverage Report with Custom Path Prefix\nDESCRIPTION: Demonstrates how to generate a coverage report using xsltproc with custom path prefix suppression and GitHub source code links.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/devtools/lgtunit.rst.txt#2025-04-06_snippet_53\n\nLANGUAGE: bash\nCODE:\n```\n$ xsltproc \\\n  --stringparam prefix logtalk/ \\\n  --stringparam url https://github.com/LogtalkDotOrg/logtalk3/blob/master \\\n  -o coverage_report.html coverage_report.xml\n```\n\n----------------------------------------\n\nTITLE: Defining Message Tokenization Rules in Logtalk\nDESCRIPTION: Example of defining grammar rules for message_tokens//2 to translate message terms into output tokens with formatting.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/userman/printing.rst#2025-04-06_snippet_2\n\nLANGUAGE: text\nCODE:\n```\n:- multifile(logtalk::message_tokens//2).\n:- dynamic(logtalk::message_tokens//2).\n\nlogtalk::message_tokens(redefining_entity(Type, Entity), core) -->\n    ['Redefining ~w ~q'-[Type, Entity], nl].\n```\n\n----------------------------------------\n\nTITLE: Stopping Trace Mode in Logtalk\nDESCRIPTION: Shows how to stop tracing (but still allowing the debugger to pause at defined breakpoints) using the debugger's notrace/0 predicate.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/userman/debugging.rst#2025-04-06_snippet_19\n\nLANGUAGE: text\nCODE:\n```\n| ?- debugger::notrace.\n\nyes\n```\n\n----------------------------------------\n\nTITLE: Loading the mtbatch Module in Logtalk\nDESCRIPTION: This snippet loads the mtbatch module, which contains the multi-threading benchmark tests.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/threads/mtbatch/NOTES.md#2025-04-06_snippet_1\n\nLANGUAGE: logtalk\nCODE:\n```\nlogtalk_load(mtbatch(loader)).\n```\n\n----------------------------------------\n\nTITLE: Installing a Pack with Signature Checking in Logtalk\nDESCRIPTION: Shows how to install a pack while enabling signature checking and verbose output for security purposes.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/devtools/packs.rst.txt#2025-04-06_snippet_28\n\nLANGUAGE: logtalk\nCODE:\n```\n| ?- packs::install(reg, bar, 1:1:2, [verbose(true), checksig(true)]).\n```\n\n----------------------------------------\n\nTITLE: Enabling Debug Messages for a Specific Group\nDESCRIPTION: Query to enable debug messages only for the 'bar' group in the 'xyz' component, providing fine-grained control.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/tools/debug_messages/NOTES.md#2025-04-06_snippet_8\n\nLANGUAGE: Prolog\nCODE:\n```\n| ?- debug_messages::enable(xyx, bar).\n```\n\n----------------------------------------\n\nTITLE: Querying Category Properties in Logtalk\nDESCRIPTION: Illustrates the use of the category_property/2 built-in predicate to find the properties of defined categories. Various properties such as static/dynamic status, file information, and predicate declarations can be queried.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/userman/categories.rst.txt#2025-04-06_snippet_16\n\nLANGUAGE: prolog\nCODE:\n```\n| ?- category_property(Category, Property).\n```\n\n----------------------------------------\n\nTITLE: Defining Public Predicates for CHR Interpreter in Logtalk\nDESCRIPTION: Declares public predicates for the CHR interpreter, including chr_is/2, chr_trace/0, chr_notrace/0, chr_spy/1, chr_nospy/0, chr_no_spy/1, and chr_option/2. These predicates are marked as static.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/toychrdb_0.rst.txt#2025-04-06_snippet_0\n\nLANGUAGE: Logtalk\nCODE:\n```\nchr_is/2\nchr_trace/0\nchr_notrace/0\nchr_spy/1\nchr_nospy/0\nchr_no_spy/1\nchr_option/2\n```\n\n----------------------------------------\n\nTITLE: Predicate Entity Dynamic Predicate Declaration\nDESCRIPTION: Defines a dynamic predicate that maintains a table of public predicates for all documented entities. Takes predicate indicator, primary and secondary sort keys, and entity identifier as arguments.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/lgtdoc_0.rst.txt#2025-04-06_snippet_3\n\nLANGUAGE: logtalk\nCODE:\n```\npredicate_entity_(Predicate,PrimarySortKey,SecondarySortKey,Entity)\n```\n\n----------------------------------------\n\nTITLE: Testing Logtalk Intervals Library\nDESCRIPTION: Command to load and run tests for the intervals library predicates using the tester.lgt file.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/libraries/intervals.rst.txt#2025-04-06_snippet_1\n\nLANGUAGE: logtalk\nCODE:\n```\n| ?- logtalk_load(intervals(tester)).\n```\n\n----------------------------------------\n\nTITLE: Accessing ToyCHR Source Repository\nDESCRIPTION: URL to the original ToyCHR implementation which is being ported to Logtalk.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/ports/toychr.rst#2025-04-06_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nhttps://www.comp.nus.edu.sg/~gregory/toychr/\n```\n\n----------------------------------------\n\nTITLE: Querying predicate in class instance\nDESCRIPTION: Demonstrates querying a predicate p1/1 defined for class instances.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/dynpred/NOTES.md#2025-04-06_snippet_6\n\nLANGUAGE: logtalk\nCODE:\n```\ninstance::p1(X).\n```\n\n----------------------------------------\n\nTITLE: Creating Text File with Options\nDESCRIPTION: Creates a text file with specified contents and stream options. Supports both atom and list content formats.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/lgtunit_0.rst.txt#2025-04-06_snippet_62\n\nLANGUAGE: logtalk\nCODE:\n```\ncreate_text_file(File,Contents,Options)\n```\n\n----------------------------------------\n\nTITLE: Testing the Statistics Library in Logtalk\nDESCRIPTION: Command to load and run tests for the statistics library using the tester.lgt file. This verifies that the library predicates are functioning correctly.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/libraries/statistics.rst.txt#2025-04-06_snippet_1\n\nLANGUAGE: logtalk\nCODE:\n```\n| ?- logtalk_load(statistics(tester)).\n```\n\n----------------------------------------\n\nTITLE: Logtalk List Operations\nDESCRIPTION: List manipulation predicates added to listp protocol and list objects\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/RELEASE_NOTES.md#2025-04-06_snippet_82\n\nLANGUAGE: Logtalk\nCODE:\n```\nprefix/3\nsuffix/3\n```\n\n----------------------------------------\n\nTITLE: Defining Output File Name in Logtalk\nDESCRIPTION: Constructs the diagram file basename by adding a graph language dependent extension to the given name. Takes an atom as input and outputs an atom.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/graph_language_protocol_0.rst.txt#2025-04-06_snippet_0\n\nLANGUAGE: Logtalk\nCODE:\n```\noutput_file_name(Name,Basename)\n```\n\n----------------------------------------\n\nTITLE: Loading Hook Objects Library in Logtalk\nDESCRIPTION: Demonstrates how to load the entire hook objects library or specific hook objects.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/libraries/hook_objects.rst.txt#2025-04-06_snippet_0\n\nLANGUAGE: logtalk\nCODE:\n```\n| ?- logtalk_load(hook_objects(loader)).\n```\n\nLANGUAGE: logtalk\nCODE:\n```\n| ?- logtalk_load(hook_objects(backend_adapter_hook)).\n```\n\n----------------------------------------\n\nTITLE: Running the Activation Nodes Example\nDESCRIPTION: This snippet runs the activation nodes example by calling the a, b, and c predicates on an activation object.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/ncl/activation_nodes/NOTES.md#2025-04-06_snippet_2\n\nLANGUAGE: logtalk\nCODE:\n```\nactivation(_,_,_)::(a(a),b(b),c(c)).\n```\n\n----------------------------------------\n\nTITLE: Declaring Public Grammar Rules and Operators in Logtalk\nDESCRIPTION: Examples of using scope directives to declare grammar rule non-terminals and operators as public in Logtalk.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/userman/predicates.rst#2025-04-06_snippet_1\n\nLANGUAGE: logtalk\nCODE:\n```\n:- public(url//1).\n\n:- public(op(800, fx, tag)).\n```\n\n----------------------------------------\n\nTITLE: Configuring URL Prefixes for Cursor in Logtalk Diagrams\nDESCRIPTION: Sets the URL code prefix for generating local links to open files and directories in Cursor when creating Logtalk diagrams.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/tools/diagrams/NOTES.md#2025-04-06_snippet_7\n\nLANGUAGE: prolog\nCODE:\n```\nurl_prefixes('cursor://file/', DocPrefix)\n```\n\n----------------------------------------\n\nTITLE: Defining the Phrase Method Signature\nDESCRIPTION: Defines the core syntax for the phrase//1 method that takes a grammar rule body argument.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/refman/methods/phrase_1.rst.txt#2025-04-06_snippet_0\n\nLANGUAGE: prolog\nCODE:\n```\nphrase(GrammarRuleBody)\n```\n\n----------------------------------------\n\nTITLE: Specifying Modes and Proofs for ignore/1 in Logtalk\nDESCRIPTION: Declares the mode and number of proofs for ignore/1, indicating it takes a callable term as input and produces one proof.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/refman/methods/ignore_1.rst.txt#2025-04-06_snippet_2\n\nLANGUAGE: Logtalk\nCODE:\n```\nignore(+callable) - one\n```\n\n----------------------------------------\n\nTITLE: Directory Path Management Predicate - remember_included_directory/1\nDESCRIPTION: Predicate to remember an included Logtalk directory in the diagram. Takes a Path atom as input and stores it for later use.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/directory_diagram_1.rst.txt#2025-04-06_snippet_0\n\nLANGUAGE: logtalk\nCODE:\n```\nremember_included_directory(+atom)\n```\n\n----------------------------------------\n\nTITLE: Changing Working Directory in Logtalk\nDESCRIPTION: This snippet shows how to change the working directory in Logtalk. It uses a non-standard predicate '$lgt_change_directory'/1 to set the directory to the XML parser contributions folder.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/contributions/xml_parser/SCRIPT.txt#2025-04-06_snippet_2\n\nLANGUAGE: prolog\nCODE:\n```\n| ?- '$lgt_change_directory'('$LOGTALKUSER/contributions/xml_parser').\n```\n\n----------------------------------------\n\nTITLE: Loading Timeout Library in Logtalk\nDESCRIPTION: This snippet demonstrates how to load all entities in the timeout library using the loader.lgt file.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/libraries/timeout.rst#2025-04-06_snippet_0\n\nLANGUAGE: Prolog\nCODE:\n```\n| ?- logtalk_load(timeout(loader)).\n```\n\n----------------------------------------\n\nTITLE: Running Format Library Tests in Logtalk\nDESCRIPTION: Shows how to run minimal tests for the format library predicates using the tester.lgt file.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/library/format/NOTES.md#2025-04-06_snippet_1\n\nLANGUAGE: Prolog\nCODE:\n```\n| ?- logtalk_load(format(tester)).\n```\n\n----------------------------------------\n\nTITLE: Enumerating Circle X-Radius Properties\nDESCRIPTION: Lists all the properties of the rx/1 predicate for a circle object. This shows the original predicate's properties for comparison with its alias.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/aliases/NOTES.md#2025-04-06_snippet_8\n\nLANGUAGE: logtalk\nCODE:\n```\n%%table\ncircle(3)::predicate_property(rx(_), Property).\n```\n\n----------------------------------------\n\nTITLE: Configuring Sphinx Documentation Dependencies\nDESCRIPTION: Specifies exact versions of Python packages required for generating documentation using Sphinx with ReadTheDocs theme and spelling checker. Includes core Sphinx package, theme package, spelling extension, and syntax highlighting via Pygments.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/requirements.txt#2025-04-06_snippet_0\n\nLANGUAGE: pip\nCODE:\n```\nsphinx==7.4.7\nsphinx_rtd_theme==2.0.0\nsphinxcontrib-spelling==8.0.1\npygments==2.19.1\n```\n\n----------------------------------------\n\nTITLE: Loading Operators Example in Logtalk\nDESCRIPTION: Loads the operators example files using the loader utility.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/operators/NOTES.md#2025-04-06_snippet_1\n\nLANGUAGE: logtalk\nCODE:\n```\nlogtalk_load(operators(loader)).\n```\n\n----------------------------------------\n\nTITLE: Prime Numbers Generation\nDESCRIPTION: Shows generation of prime numbers in increasing order using interactors.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/engines/interactors/NOTES.md#2025-04-06_snippet_3\n\nLANGUAGE: logtalk\nCODE:\n```\ninteractors::prime(P).\n```\n\n----------------------------------------\n\nTITLE: Creating Empty Nested Dictionary in Logtalk\nDESCRIPTION: Example of creating a new empty nested dictionary using the navltree implementation.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/library/nested_dictionaries/NOTES.md#2025-04-06_snippet_2\n\nLANGUAGE: logtalk\nCODE:\n```\n| ?- navltree::new(Dictionary).\n```\n\n----------------------------------------\n\nTITLE: Linting Pack Specification in Logtalk (Prolog)\nDESCRIPTION: Checks the pack specification for a given registry and pack. Fails if the pack is unknown or if linting detects errors. Requires registry and pack names as atoms.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/packs_0.rst.txt#2025-04-06_snippet_10\n\nLANGUAGE: prolog\nCODE:\n```\nlint(Registry,Pack)\n```\n\n----------------------------------------\n\nTITLE: Loading Mock Login Hook Object in Test Driver\nDESCRIPTION: Initialization code to load the mock login hook object and user management with the hook.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/tools/lgtunit/NOTES.md#2025-04-06_snippet_42\n\nLANGUAGE: logtalk\nCODE:\n```\n:- initialization((\n\t\t...,\n\t\tlogtalk_load(mock_login),\n\t\tlogtalk_load(user_management, [hook(mock_login)]),\n\t\t...\n\t)).\n```\n\n----------------------------------------\n\nTITLE: Alternative Profiling Call for SWI-Prolog XPCE\nDESCRIPTION: Alternative query to profile Logtalk code using SWI-Prolog XPCE profiler without profiling the compiler itself.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/tools/profiler/NOTES.md#2025-04-06_snippet_3\n\nLANGUAGE: Prolog\nCODE:\n```\n?- logtalk << (prolog_statistics:profile(... :: ...)).\n...\n```\n\n----------------------------------------\n\nTITLE: Loading the Logtalk Help System\nDESCRIPTION: Command to load the Logtalk help system module using the logtalk_load/1 predicate.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/tools/help/SCRIPT.txt#2025-04-06_snippet_0\n\nLANGUAGE: logtalk\nCODE:\n```\n| ?- logtalk_load(help(loader)).\n```\n\n----------------------------------------\n\nTITLE: Defining logtalk_make Alias in Prolog\nDESCRIPTION: Defines aliases for the logtalk_make predicate to allow shorter calls. {*} is defined as an alias for logtalk_make(all) and {!} for logtalk_make(clean).\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/RELEASE_NOTES.md#2025-04-06_snippet_113\n\nLANGUAGE: Prolog\nCODE:\n```\n* ADDED: Aliases `{*}` for the `logtalk_make(all)` call and `{!}` for the\n`logtalk_make(clean)` call.\n```\n\n----------------------------------------\n\nTITLE: Generate Next Integer Predicate\nDESCRIPTION: Public predicate that generates the next integer for a given counter. Takes a counter name and returns a non-negative integer. Compiled with static and synchronized flags for thread safety.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/genint_core_0.rst.txt#2025-04-06_snippet_2\n\nLANGUAGE: logtalk\nCODE:\n```\ngenint(Counter,Integer)\n```\n\n----------------------------------------\n\nTITLE: Splitting Large Markdown Documentation Files for LLM Compatibility\nDESCRIPTION: Commands for splitting large Markdown API documentation files into smaller pieces for use with LLMs and AI coding tools, helping to avoid hallucinations by providing complete API references while staying under file size limits.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/NOTES.md#2025-04-06_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ split -p '### (debugger|lgtunit|packs)' LogtalkAPIs-3.90.1.md LogtalkAPIs_\n$ for file in \"LogtalkAPIs_\"*; do mv \"$file\" \"${file}.md\"; done\n```\n\n----------------------------------------\n\nTITLE: Loading Benchmark Generators in Logtalk\nDESCRIPTION: Instruction for loading the benchmark_generators object in Logtalk. This is required to use the object's functionality.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/benchmark_generators_0.rst.txt#2025-04-06_snippet_0\n\nLANGUAGE: Logtalk\nCODE:\n```\nlogtalk_load(verdi_neruda(loader))\n```\n\n----------------------------------------\n\nTITLE: Parsing Number Sign in Logtalk\nDESCRIPTION: Parses a number sign (plus or minus). Accepts an atomic value as input or output. Returns zero or one proof.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/number_grammars_1.rst.txt#2025-04-06_snippet_10\n\nLANGUAGE: Logtalk\nCODE:\n```\nsign(Sign)\n```\n\n----------------------------------------\n\nTITLE: Querying Square Object Protocol\nDESCRIPTION: Retrieves and displays the public predicates of the square(_) object. This shows the available operations on a square, including aliases.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/aliases/NOTES.md#2025-04-06_snippet_1\n\nLANGUAGE: logtalk\nCODE:\n```\n%%table\nsquare(_)::current_predicate(Predicate).\n```\n\n----------------------------------------\n\nTITLE: Template and Modes for built_in/0 Directive in Logtalk\nDESCRIPTION: Shows the template and modes for the built_in/0 directive. This format illustrates how the directive should be used in Logtalk code.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/refman/directives/built_in_0.rst#2025-04-06_snippet_1\n\nLANGUAGE: logtalk\nCODE:\n```\nbuilt_in\n```\n\n----------------------------------------\n\nTITLE: Loading Document Converter\nDESCRIPTION: Loads the document converter example module into the Logtalk environment.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/document_converter/NOTES.md#2025-04-06_snippet_3\n\nLANGUAGE: logtalk\nCODE:\n```\nlogtalk_load(document_converter(loader)).\n```\n\n----------------------------------------\n\nTITLE: Defining Dynamic Predicate for Jump to Invocation Number in Logtalk\nDESCRIPTION: Defines a dynamic predicate 'jump_to_invocation_number_/1' that represents the invocation number to jump to. It takes the number as an argument.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/debugger_0.rst.txt#2025-04-06_snippet_11\n\nLANGUAGE: Logtalk\nCODE:\n```\njump_to_invocation_number_/1\n```\n\n----------------------------------------\n\nTITLE: Defining the file_being_advised_ predicate in Logtalk\nDESCRIPTION: Table of files being advised with their respective directories and names. This dynamic predicate tracks files that are being processed for advice, storing path information and the base name without extension.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/wrapper_0.rst.txt#2025-04-06_snippet_27\n\nLANGUAGE: logtalk\nCODE:\n```\nfile_being_advised_(File,Path,Directory,Name)\n```\n\n----------------------------------------\n\nTITLE: Initializing Protocol and Category Directives in Logtalk\nDESCRIPTION: The initialization/1 directive is no longer supported in protocols and categories due to compile-time object context requirements.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/RELEASE_NOTES.md#2025-04-06_snippet_91\n\nLANGUAGE: Logtalk\nCODE:\n```\ninitialization/1\n```\n\n----------------------------------------\n\nTITLE: Logtalk Make Target Usage - Target 'circular'\nDESCRIPTION: Support added for new logtalk_make/1 target to list circular references between pairs and trios of objects, accessible via {@} shortcut\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/RELEASE_NOTES.md#2025-04-06_snippet_84\n\nLANGUAGE: Logtalk\nCODE:\n```\nlogtalk_make(circular).\n```\n\n----------------------------------------\n\nTITLE: Complex Unification in Logtalk\nDESCRIPTION: This code snippet demonstrates a complex unification operation in Logtalk. It involves multiple variables (C, H, I, D, E) and compound terms using the 'v' functor. The snippet showcases how Logtalk handles circular references and nested term structures in unification.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/coinduction/NOTES.md#2025-04-06_snippet_8\n\nLANGUAGE: Logtalk\nCODE:\n```\nC = _S3, % where\n    _S3 = v(c, [v(h, [_S3]), _S4]),\n    _S4 = v(i, [_S3, v(e, [_S1, _S4])]),\nH = v(h, [_S3]),\nI = v(i, [_S3, v(e, [_S1, _S4])]),\nD = v(d, [_S2]),\nE = v(e, [_S1, _S4]) ;\nfalse.\n```\n\n----------------------------------------\n\nTITLE: Searching the Handbook by Topic\nDESCRIPTION: Command to search for a specific topic (base64) in the Texinfo version of the Handbook.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/tools/help/SCRIPT.txt#2025-04-06_snippet_8\n\nLANGUAGE: logtalk\nCODE:\n```\n| ?- help::handbook(base64).\n```\n\n----------------------------------------\n\nTITLE: Applying Second Hot Patch to Override Recipe Level\nDESCRIPTION: Loads a second patch that specifically overrides the level descriptor for the green_soup recipe to 'hard'.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/recipes/NOTES.md#2025-04-06_snippet_7\n\nLANGUAGE: logtalk\nCODE:\n```\nlogtalk_load(recipes(patch_2)).\n```\n\n----------------------------------------\n\nTITLE: Browsing the API Documentation\nDESCRIPTION: Command to access the Texinfo version of the Logtalk APIs documentation on POSIX systems.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/tools/help/SCRIPT.txt#2025-04-06_snippet_10\n\nLANGUAGE: logtalk\nCODE:\n```\n| ?- help::apis.\n```\n\n----------------------------------------\n\nTITLE: Using Print Goal Hook in Logtalk\nDESCRIPTION: Illustrates how to use the print_goal_hook to print selected goals before, after, or both before and after calling them in an entity's source code.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/libraries/hook_objects.rst#2025-04-06_snippet_9\n\nLANGUAGE: Logtalk\nCODE:\n```\nfoo :-\n    - bar,   % print goal before calling it\n    + baz,   % print goal after calling it\n    * quux.  % print goal before and after calling it\n```\n\n----------------------------------------\n\nTITLE: Creating Multiple Concurrent Pengine Engines\nDESCRIPTION: Shows how to create multiple pengine engines that can be used concurrently.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/pengines/NOTES.md#2025-04-06_snippet_12\n\nLANGUAGE: logtalk\nCODE:\n```\nengines::ask(E2).\n```\n\nLANGUAGE: logtalk\nCODE:\n```\nengines::ask(E3).\n```\n\n----------------------------------------\n\nTITLE: Converting XML Coverage Reports to HTML using xsltproc\nDESCRIPTION: Command to transform an XML code coverage report into HTML format using the xsltproc processor. This enables viewing the report in a web browser.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/tools/lgtunit/NOTES.md#2025-04-06_snippet_56\n\nLANGUAGE: shell\nCODE:\n```\n$ xsltproc -o coverage_report.html coverage_report.xml\n```\n\n----------------------------------------\n\nTITLE: Defining the threaded/1 Predicate Signature in Logtalk\nDESCRIPTION: Specifies the signature of the threaded/1 predicate, which takes a conjunction or disjunction of goals as its argument.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/refman/predicates/threaded_1.rst.txt#2025-04-06_snippet_0\n\nLANGUAGE: Prolog\nCODE:\n```\nthreaded(Conjunction)\nthreaded(Disjunction)\n```\n\n----------------------------------------\n\nTITLE: Querying Coupe Object Predicates in Logtalk\nDESCRIPTION: Displays all public predicates available for the coupe object using current_predicate/1.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/carengines/NOTES.md#2025-04-06_snippet_3\n\nLANGUAGE: logtalk\nCODE:\n```\n%%table\ncoupe::current_predicate(Predicate).\n```\n\n----------------------------------------\n\nTITLE: Loading Bird Identification Expert System in Logtalk\nDESCRIPTION: A Logtalk command to load the bird identification expert system and required library files.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/birds/NOTES.md#2025-04-06_snippet_2\n\nLANGUAGE: logtalk\nCODE:\n```\nlogtalk_load(birds(loader)).\n```\n\n----------------------------------------\n\nTITLE: Map Storage in Logtalk\nDESCRIPTION: Private predicate that stores a Key-Data pair in a map. Map1 is identical to Map0 except for the addition of the Key-Data pair. Used for building entity mappings.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/xml_0.rst.txt#2025-04-06_snippet_7\n\nLANGUAGE: Logtalk\nCODE:\n```\nmap_store(Map0,Key,Data,Map1)\n```\n\n----------------------------------------\n\nTITLE: ReStructuredText Table of Contents for All Solutions Methods\nDESCRIPTION: A ReStructuredText toctree directive that lists the available all-solutions method documentation pages in Logtalk.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/refman/methods/solution_methods.rst.txt#2025-04-06_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. toctree::\n   :maxdepth: 1\n\n   bagof_3\n   findall_3\n   findall_4\n   forall_2\n   setof_3\n```\n\n----------------------------------------\n\nTITLE: Testing Queue Library in Logtalk\nDESCRIPTION: Command to load and run tests for the queue library predicates.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/library/queues/NOTES.md#2025-04-06_snippet_1\n\nLANGUAGE: logtalk\nCODE:\n```\n| ?- logtalk_load(queues(tester)).\n```\n\n----------------------------------------\n\nTITLE: Linting All Pack Specifications in Logtalk (Prolog)\nDESCRIPTION: Checks all pack specifications in the system. This predicate always succeeds, providing a comprehensive lint of all available packs.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/packs_0.rst.txt#2025-04-06_snippet_12\n\nLANGUAGE: prolog\nCODE:\n```\nlint\n```\n\n----------------------------------------\n\nTITLE: Example Usage of abolish_object/1 in Logtalk\nDESCRIPTION: An example query demonstrating how to use the abolish_object/1 predicate to abolish an object named 'list'.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/refman/predicates/abolish_object_1.rst#2025-04-06_snippet_1\n\nLANGUAGE: Logtalk\nCODE:\n```\n| ?- abolish_object(list).\n```\n\n----------------------------------------\n\nTITLE: Defining Library Paths in Logtalk\nDESCRIPTION: The logtalk_library_path/2 predicate is used to declare library paths, allowing compilation and loading of libraries and library files using library names instead of full paths. This makes it easier to relocate libraries.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/CUSTOMIZE.md#2025-04-06_snippet_0\n\nLANGUAGE: logtalk\nCODE:\n```\nlogtalk_library_path/2\n```\n\n----------------------------------------\n\nTITLE: Describing Registry Entries in Logtalk\nDESCRIPTION: Prints all entries for a specified registry. Requires the registry name as an atom argument.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/registries_0.rst.txt#2025-04-06_snippet_1\n\nLANGUAGE: logtalk\nCODE:\n```\ndescribe(Registry)\n```\n\n----------------------------------------\n\nTITLE: Compiled Test Definition in Logtalk Unit Testing\nDESCRIPTION: Stores compiled unit tests with variable sharing between a test and its options, tracking identifier, variables, and expected outcome.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/lgtunit_0.rst.txt#2025-04-06_snippet_73\n\nLANGUAGE: Logtalk\nCODE:\n```\ntest(Identifier,Variables,Outcome)\n```\n\n----------------------------------------\n\nTITLE: Using DIF Predicates in Logtalk\nDESCRIPTION: Directive to enable implicit message-sending for dif/1-2 predicates in objects or categories.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/libraries/dif.rst#2025-04-06_snippet_2\n\nLANGUAGE: prolog\nCODE:\n```\n:- uses(dif, [\n    dif/2, dif/1\n]).\n```\n\n----------------------------------------\n\nTITLE: Generating XML Documentation for All Loaded Entities with Options in Logtalk\nDESCRIPTION: Creates XML documenting files for all loaded entities using specified options. Takes a single list argument containing the options.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/lgtdocp_0.rst.txt#2025-04-06_snippet_11\n\nLANGUAGE: Logtalk\nCODE:\n```\nall(Options)\n```\n\n----------------------------------------\n\nTITLE: Testing the Profiler Tool in Logtalk\nDESCRIPTION: Query to load the tester file for the profiler tool. This allows testing the profiler functionality.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/devtools/profiler.rst.txt#2025-04-06_snippet_1\n\nLANGUAGE: prolog\nCODE:\n```\n| ?- logtalk_load(profiler(tester)).\n```\n\n----------------------------------------\n\nTITLE: Declaring Multifile Predicates for User Monitor in Prolog\nDESCRIPTION: Defines multifile directives for before/3 and after/3 predicates to allow the user pseudo-object to act as a monitor in plain Prolog code.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/userman/events.rst#2025-04-06_snippet_10\n\nLANGUAGE: text\nCODE:\n```\n:- multifile(before/3).\n:- multifile(after/3).\n```\n\n----------------------------------------\n\nTITLE: Defining Existence Error in Logtalk\nDESCRIPTION: Specifies the structure for an existence error in Logtalk, where Term is of the correct type and domain but the resource it represents does not exist.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/type_0.rst.txt#2025-04-06_snippet_7\n\nLANGUAGE: prolog\nCODE:\n```\nexistence_error(Type,Term)\n```\n\n----------------------------------------\n\nTITLE: Testing Third Diamond Problem Variant - Second Method\nDESCRIPTION: Sends message c3_m/0 to object d3, accessing the method inherited from object c3 in the third variant of the diamond problem.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/diamonds/NOTES.md#2025-04-06_snippet_6\n\nLANGUAGE: logtalk\nCODE:\n```\nd3::c3_m.\n```\n\n----------------------------------------\n\nTITLE: Using object_wrapper_hook for Plain Prolog Files in Logtalk\nDESCRIPTION: This snippet shows how to use the object_wrapper_hook from the hook_objects library to load and analyze a plain Prolog file for dead code. It first loads the hook_objects library, then uses it to load the Prolog file.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/devtools/dead_code_scanner.rst.txt#2025-04-06_snippet_8\n\nLANGUAGE: logtalk\nCODE:\n```\n| ?- logtalk_load(hook_objects(loader)).\n```\n\nLANGUAGE: logtalk\nCODE:\n```\n| ?- logtalk_load(code, [hook(object_wrapper_hook), source_data(on), optimize(on)]).\n```\n\n----------------------------------------\n\nTITLE: Defining Goal Expansion in Logtalk\nDESCRIPTION: Defines a goal expansion predicate that is called recursively until a fixed point is reached on goals found while compiling a source file. It excludes goals wrapped using the {}/1 compiler bypass control construct.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/expanding_0.rst.txt#2025-04-06_snippet_0\n\nLANGUAGE: Prolog\nCODE:\n```\ngoal_expansion(Goal, ExpandedGoal)\n```\n\n----------------------------------------\n\nTITLE: Defining call/1-N Method Syntax in Logtalk\nDESCRIPTION: Defines the syntax for the call/1-N built-in method, which allows calling a goal constructed by appending additional arguments to a closure.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/refman/methods/call_N.rst.txt#2025-04-06_snippet_0\n\nLANGUAGE: logtalk\nCODE:\n```\ncall(Goal)\ncall(Closure, Arg1, ...)\n```\n\n----------------------------------------\n\nTITLE: Declaring Flaky Tests in Logtalk\nDESCRIPTION: Shows how to declare a test as flaky using the flaky/0 test option. Flaky tests are those that may pass or fail non-deterministically due to external conditions like network load.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/devtools/lgtunit.rst.txt#2025-04-06_snippet_29\n\nLANGUAGE: logtalk\nCODE:\n```\ntest(foo, true, [flaky]) :-\n    ...\n```\n\n----------------------------------------\n\nTITLE: Resetting All Port Profiling Data in Logtalk\nDESCRIPTION: Resets all port profiling data. This predicate is compiled with the 'static' flag and provides one proof.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/ports_profiler_0.rst.txt#2025-04-06_snippet_5\n\nLANGUAGE: Logtalk\nCODE:\n```\nreset/0\n```\n\n----------------------------------------\n\nTITLE: Replaying Command History\nDESCRIPTION: Demonstrates how to replay previously executed commands from history.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/design_patterns/behavioral/command/NOTES.md#2025-04-06_snippet_6\n\nLANGUAGE: logtalk\nCODE:\n```\nswitch::reply_history.\n```\n\n----------------------------------------\n\nTITLE: Catch/3 Method Signature in Logtalk\nDESCRIPTION: The method signature for the catch/3 built-in method which catches exceptions thrown by a goal. This private method follows the ISO Prolog standard definition and cannot be used as a message to an object.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/refman/methods/catch_3.rst#2025-04-06_snippet_0\n\nLANGUAGE: prolog\nCODE:\n```\ncatch(Goal, Catcher, Recovery)\n```\n\n----------------------------------------\n\nTITLE: Comparing Numbers with Custom Epsilon in Logtalk\nDESCRIPTION: Compares two numbers for approximate equality using a user-defined epsilon value. It uses the formula abs(Number1 - Number2) =< max(abs(Number1), abs(Number2)) * Epsilon.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/number_0.rst.txt#2025-04-06_snippet_1\n\nLANGUAGE: Logtalk\nCODE:\n```\napproximately_equal(Number1,Number2,Epsilon)\n```\n\n----------------------------------------\n\nTITLE: Querying Object Ancestors\nDESCRIPTION: Retrieves the ancestor classes of the object root class.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/roots/NOTES.md#2025-04-06_snippet_4\n\nLANGUAGE: logtalk\nCODE:\n```\nobject::ancestors(Ancestors).\n```\n\n----------------------------------------\n\nTITLE: Meta-predicate Template for phrase/3 in Logtalk\nDESCRIPTION: Defines the meta-predicate template for phrase/3, showing that the first argument is a predicate of arity 2, while the second and third arguments are regular terms.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/refman/methods/phrase_3.rst#2025-04-06_snippet_1\n\nLANGUAGE: Logtalk\nCODE:\n```\nphrase(2, *, *)\n```\n\n----------------------------------------\n\nTITLE: Skipped Test Counter in Logtalk Unit Testing\nDESCRIPTION: Dynamic counter tracking the number of skipped tests during a test run.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/lgtunit_0.rst.txt#2025-04-06_snippet_77\n\nLANGUAGE: Logtalk\nCODE:\n```\nskipped_(Counter)\n```\n\n----------------------------------------\n\nTITLE: Defining threaded_once/1-2 Predicate in Logtalk\nDESCRIPTION: The syntax definition for the threaded_once/1 and threaded_once/2 predicates, which execute a goal asynchronously in a new thread and find only the first solution.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/refman/predicates/threaded_once_1_2.rst.txt#2025-04-06_snippet_0\n\nLANGUAGE: prolog\nCODE:\n```\nthreaded_once(Goal)\nthreaded_once(Goal, Tag)\n```\n\n----------------------------------------\n\nTITLE: Process Setup Script\nDESCRIPTION: Sample script for setting up parallel Logtalk processes with operating system process ID handling.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/RELEASE_NOTES.md#2025-04-06_snippet_62\n\nLANGUAGE: Prolog\nCODE:\n```\nparallel_logtalk_processes_setup.pl\n```\n\n----------------------------------------\n\nTITLE: Logtalk Object Declaration - expand_library_alias_paths\nDESCRIPTION: RST documentation block declaring the expand_library_alias_paths object with its availability, author information, version, compilation flags, and implementation details.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/expand_library_alias_paths_0.rst.txt#2025-04-06_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. index:: single: expand_library_alias_paths\n.. _expand_library_alias_paths/0:\n\n.. rst-class:: right\n\n**object**\n\n``expand_library_alias_paths``\n```\n\n----------------------------------------\n\nTITLE: Creating Nested Dictionary from Curly Bracketed Term\nDESCRIPTION: Example of creating a nested dictionary from a curly bracketed term representation using as_nested_dictionary/2.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/libraries/nested_dictionaries.rst.txt#2025-04-06_snippet_3\n\nLANGUAGE: logtalk\nCODE:\n```\n| ?- navltree::as_nested_dictionary(\n    {a-1, b-{c-3, d-{e-7,f-8}}},\n    Dictionary\n).\n\nDictionary = ...\nyes\n```\n\n----------------------------------------\n\nTITLE: Verifying Instance Creation\nDESCRIPTION: Checks that the requested instance 'i2' now exists as an object in the system.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/design_patterns/creational/multiton/NOTES.md#2025-04-06_snippet_5\n\nLANGUAGE: logtalk\nCODE:\n```\ncurrent_object(i2).\n```\n\n----------------------------------------\n\nTITLE: Predicate Template - libraries/2\nDESCRIPTION: Creates all supported diagrams for libraries using default options. Project argument is used as prefix for diagram filenames.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/diagrams_1.rst.txt#2025-04-06_snippet_1\n\nLANGUAGE: logtalk\nCODE:\n```\nlibraries(Project,Libraries)\n```\n\n----------------------------------------\n\nTITLE: Retrieving List of All Class Descendant Instances in Logtalk\nDESCRIPTION: Predicate that returns a list containing all class descendant instances. Takes a single parameter Descendants which will be bound to the list of all descendant instances.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/class_hierarchyp_0.rst.txt#2025-04-06_snippet_13\n\nLANGUAGE: logtalk\nCODE:\n```\ndescendant_instances(Descendants)\n```\n\n----------------------------------------\n\nTITLE: Executing Airplane Travel Journey\nDESCRIPTION: Calls the journey predicate on the travel_by_airplane object to print the steps for an airplane trip.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/design_patterns/behavioral/template_method/NOTES.md#2025-04-06_snippet_3\n\nLANGUAGE: logtalk\nCODE:\n```\ntravel_by_airplane::journey.\n```\n\n----------------------------------------\n\nTITLE: Starting Debugger Trace Redirection to File in Logtalk\nDESCRIPTION: Starts redirecting debugger trace messages to a specified file for a given goal. This predicate accepts a filename and a callable goal. It is a meta-predicate that can be called multiple times with different outputs.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/dump_trace_0.rst.txt#2025-04-06_snippet_0\n\nLANGUAGE: logtalk\nCODE:\n```\nstart_redirect_to_file(File,Goal)\n```\n\n----------------------------------------\n\nTITLE: Querying Object Predicates with current_predicate/1 in Logtalk\nDESCRIPTION: Demonstrates a query using the current_predicate/1 method to enumerate predicates in the 'foo' object, including those from uses directives.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/refman/methods/current_predicate_1.rst#2025-04-06_snippet_3\n\nLANGUAGE: Logtalk\nCODE:\n```\n| ?- foo::pred(X).\nX = pred/1 ;\nX = baz/1 ;\nX = quux/2 ;\nno\n```\n\n----------------------------------------\n\nTITLE: Defining Dynamic Log File Table in Logtalk\nDESCRIPTION: Defines a dynamic predicate 'log_file_/2' that represents a table of log files. It takes an Alias (atom) and a File (nonvar) as arguments.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/logger_0.rst.txt#2025-04-06_snippet_0\n\nLANGUAGE: Logtalk\nCODE:\n```\nlog_file_(Alias,File)\n```\n\n----------------------------------------\n\nTITLE: Adding memberchk/2 predicate to Logtalk library\nDESCRIPTION: Added a memberchk/2 predicate to the library \"setp\" protocol and \"set\" object.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/RELEASE_NOTES.md#2025-04-06_snippet_130\n\nLANGUAGE: Logtalk\nCODE:\n```\nmemberchk/2\n```\n\n----------------------------------------\n\nTITLE: Meta-Type Definition\nDESCRIPTION: Example demonstrating how to define a meta-type that accepts other types as arguments.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/libraries/types.rst#2025-04-06_snippet_6\n\nLANGUAGE: prolog\nCODE:\n```\n:- multifile(type::meta_type/3).\ntype::meta_type(tuple(Type1, Type2, Type3), [Type1, Type2, Type3], []).\n```\n\n----------------------------------------\n\nTITLE: Meta-Type Definition\nDESCRIPTION: Example demonstrating how to define a meta-type that accepts other types as arguments.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/libraries/types.rst#2025-04-06_snippet_6\n\nLANGUAGE: prolog\nCODE:\n```\n:- multifile(type::meta_type/3).\ntype::meta_type(tuple(Type1, Type2, Type3), [Type1, Type2, Type3], []).\n```\n\n----------------------------------------\n\nTITLE: Parsing JSON File in Logtalk\nDESCRIPTION: Shows how to parse a JSON file into a Prolog term using the parse/2 predicate.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/library/json/NOTES.md#2025-04-06_snippet_5\n\nLANGUAGE: Prolog\nCODE:\n```\n| ?- json::parse(file('simple/roundtrip_array_obj_array.json'), Term).\nTerm = [{a-[b]}]\nyes\n```\n\n----------------------------------------\n\nTITLE: System Configuration Flags in Logtalk\nDESCRIPTION: General system configuration flags for Logtalk including scratch directory location, message reporting, code prefix, optimization settings, source data retention and debug mode.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/userman/programming.rst.txt#2025-04-06_snippet_17\n\nLANGUAGE: text\nCODE:\n```\nscratch_directory(Directory)\\nreport(Option)\\ncode_prefix(Character)\\noptimize(Option)\\nsource_data(Option)\\ndebug(Option)\n```\n\n----------------------------------------\n\nTITLE: Declaring Multifile Predicates for User Monitor in Prolog\nDESCRIPTION: Defines multifile directives for before/3 and after/3 predicates to allow the user pseudo-object to act as a monitor in plain Prolog code.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/userman/events.rst#2025-04-06_snippet_10\n\nLANGUAGE: text\nCODE:\n```\n:- multifile(before/3).\n:- multifile(after/3).\n```\n\n----------------------------------------\n\nTITLE: Attempting to Use Object-Defined Operator in Infix Notation\nDESCRIPTION: Demonstrates that operators defined inside an object are not visible outside that object. This results in a syntax error.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/operators/NOTES.md#2025-04-06_snippet_2\n\nLANGUAGE: logtalk\nCODE:\n```\ndouble::(I double J).\n```\n\n----------------------------------------\n\nTITLE: Exception Handling for XML Parsing in Logtalk\nDESCRIPTION: Private hook predicate that raises exceptions for faults detected in the XML document structure, providing information about the error type, location, and context.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/xml_0.rst.txt#2025-04-06_snippet_10\n\nLANGUAGE: Logtalk\nCODE:\n```\nexception(Message,Document,Culprit,Path)\n```\n\n----------------------------------------\n\nTITLE: Loading Mutations Library in Logtalk\nDESCRIPTION: Command to load all entities in the mutations library using the loader file.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/library/mutations/NOTES.md#2025-04-06_snippet_0\n\nLANGUAGE: logtalk\nCODE:\n```\n| ?- logtalk_load(mutations(loader)).\n```\n\n----------------------------------------\n\nTITLE: Querying Unique Pack Dependencies in Logtalk (Prolog)\nDESCRIPTION: Prints a list of all installed packs that depend on the given pack if unique across all registries. Fails if the pack is unknown or available from multiple registries. Requires pack name as an atom.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/packs_0.rst.txt#2025-04-06_snippet_9\n\nLANGUAGE: prolog\nCODE:\n```\ndependents(Pack)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Operating System Release in Logtalk\nDESCRIPTION: Returns the operating system release. On POSIX systems it returns uname -r, on Windows it uses WMI code.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/osp_0.rst.txt#2025-04-06_snippet_19\n\nLANGUAGE: prolog\nCODE:\n```\noperating_system_release(Release)\n```\n\n----------------------------------------\n\nTITLE: Setting Logtalk Code Prefix for Profiling\nDESCRIPTION: Query to set the Logtalk code_prefix flag for better readability of profiling results in SWI-Prolog and YAP.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/tools/profiler/NOTES.md#2025-04-06_snippet_4\n\nLANGUAGE: Prolog\nCODE:\n```\n?- set_logtalk_flag(code_prefix, '.').\n```\n\n----------------------------------------\n\nTITLE: Finding Bugs with QuickCheck and Reporting Counter-examples\nDESCRIPTION: Example showing how QuickCheck discovers a bug in a predicate that should always return non-negative floats.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/tools/lgtunit/NOTES.md#2025-04-06_snippet_15\n\nLANGUAGE: prolog\nCODE:\n```\n| ?- lgtunit::quick_check(random::random(-negative_float)).\n*     quick check test failure (at test 1 after 0 shrinks):\n*       random::random(0.09230089279334841)\n*     starting seed: seed(3172,9814,20125)\n*     test seed:     seed(3172,9814,20125)\nno\n```\n\n----------------------------------------\n\nTITLE: Installing d2 and Graphviz using Chocolatey\nDESCRIPTION: Command to install the d2 and Graphviz diagram generation tools using the Chocolatey package manager on Windows.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/devtools/diagrams.rst#2025-04-06_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\n> choco install d2 graphviz\n```\n\n----------------------------------------\n\nTITLE: Loading Logtalk Module with Source Data\nDESCRIPTION: This snippet demonstrates how to load a Logtalk module with source data enabled, which is necessary for applying metrics.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/devtools/code_metrics.rst#2025-04-06_snippet_3\n\nLANGUAGE: prolog\nCODE:\n```\n| ?- logtalk_load(module, [source_data(on)]).\n```\n\n----------------------------------------\n\nTITLE: Creating an Attributes Category with Dynamic Predicates (This Context)\nDESCRIPTION: Defines a category that handles dynamic predicates in the context of 'this', tying those dynamic predicates to the object importing the category.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/userman/categories.rst.txt#2025-04-06_snippet_4\n\nLANGUAGE: logtalk\nCODE:\n```\n:- category(attributes).\n\n    :- public(attribute/2).\n    :- public(set_attribute/2).\n    :- public(del_attribute/2).\n\n    :- private(attribute_/2).\n    :- dynamic(attribute_/2).\n\n    attribute(Attribute, Value) :-\n        % call in the context of \"this\"\n        attribute_(Attribute, Value).\n\n    set_attribute(Attribute, Value) :-\n        % retract old clauses in \"this\"\n        retractall(attribute_(Attribute, _)),\n        % asserts clause in \"this\"\n        assertz(attribute_(Attribute, Value)).\n\n    del_attribute(Attribute, Value) :-\n        % retract clause in \"this\"\n        retract(attribute_(Attribute, Value)).\n\n:- end_category.\n```\n\n----------------------------------------\n\nTITLE: Loading the HTML Library Tests\nDESCRIPTION: Command to load the library test predicates\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/libraries/html.rst#2025-04-06_snippet_4\n\nLANGUAGE: prolog\nCODE:\n```\n| ?- logtalk_load(html(tester)).\n```\n\n----------------------------------------\n\nTITLE: Overriding Pengine Meta-Predicate Template in Logtalk\nDESCRIPTION: This directive is necessary to override the pengine_create/1 meta-predicate template due to ambiguity with the ':' meta-predicate argument specifier when using Pengines from within Logtalk objects.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/pengines/NOTES.md#2025-04-06_snippet_0\n\nLANGUAGE: logtalk\nCODE:\n```\n:- meta_predicate(pengines:pengine_create(*)).\n```\n\n----------------------------------------\n\nTITLE: Printing Versions in Logtalk\nDESCRIPTION: This snippet prints the versions of Logtalk, the Prolog backend, and the kernel if running as a notebook.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/shapes/ch/NOTES.md#2025-04-06_snippet_0\n\nLANGUAGE: logtalk\nCODE:\n```\n%versions\n```\n\n----------------------------------------\n\nTITLE: Detecting Homebrew installation on Apple Silicon in Logtalk Bash scripts\nDESCRIPTION: Updates all Bash shell integration scripts to also look into the '/opt/homebrew/share' directory (used by Homebrew on Apple Silicon) when the 'LOGTALKHOME' environment variable is not defined.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/RELEASE_NOTES.md#2025-04-06_snippet_18\n\nLANGUAGE: Bash\nCODE:\n```\nif [ -z \"$LOGTALKHOME\" ]; then\n    if [ -d /opt/homebrew/share/logtalk ]; then\n        LOGTALKHOME=/opt/homebrew/share/logtalk\n    fi\nfi\n```\n\n----------------------------------------\n\nTITLE: Git Archive Download Commands\nDESCRIPTION: Commands to download and verify pack archives using git archive\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/devtools/packs.rst#2025-04-06_snippet_19\n\nLANGUAGE: bash\nCODE:\n```\n$ git archive --output=foo-v1.0.1.zip --remote=git@gitlab.com:me/foo.git v1.0.1\n$ openssl sha256 foo-v1.0.1.zip\n```\n\n----------------------------------------\n\nTITLE: Converting XML Documentation to HTML in Bash\nDESCRIPTION: Bash commands to navigate to the XML documentation directory and convert Logtalk documentation from XML to HTML format using the lgt2html script with a custom title.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/devtools/lgtdoc.rst#2025-04-06_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n$ cd xml_docs\n$ lgt2html -t \"My app\"\n```\n\n----------------------------------------\n\nTITLE: Usage Examples of findall/3 in Logtalk\nDESCRIPTION: Examples demonstrating how to use findall/3 in different contexts: within the current object/category, with self-sent messages, and with messages to explicit objects.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/refman/methods/findall_3.rst#2025-04-06_snippet_3\n\nLANGUAGE: logtalk\nCODE:\n```\nfindall(Template, Goal, List)\nfindall(Template, ::Message, List)\nfindall(Template, Object::Message, List)\n```\n\n----------------------------------------\n\nTITLE: Updating Dictionary Parameters\nDESCRIPTION: Demonstrates how to update dictionary parameters by doubling their values\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/pardicts/NOTES.md#2025-04-06_snippet_4\n\nLANGUAGE: logtalk\nCODE:\n```\nDict = _{m:2,n:3}, obj(Dict)::double.\n```\n\n----------------------------------------\n\nTITLE: Setting Logtalk Environment Variables in C Shell\nDESCRIPTION: These C shell (csh) commands define the essential Logtalk environment variables. They accomplish the same purpose as the bash versions but use csh syntax.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/INSTALL.md#2025-04-06_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nsetenv LOGTALKHOME /your/logtalk/installation/directory\nsetenv LOGTALKUSER \"${HOME}\"/logtalk\n```\n\n----------------------------------------\n\nTITLE: Setting Additional Path Variables for Direct Clone Usage in Bash\nDESCRIPTION: These bash commands extend the PATH and other environment variables when running Logtalk directly from a clone directory without formal installation. They ensure tools, scripts, and documentation are accessible.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/INSTALL.md#2025-04-06_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nPATH=$PATH:$LOGTALKHOME/tools/diagrams\nPATH=$PATH:$LOGTALKHOME/tools/lgtdoc/xml\nPATH=$PATH:$LOGTALKHOME/tools/packs\nPATH=$PATH:$LOGTALKHOME/scripts\nPATH=$PATH:$LOGTALKHOME/integration\nMANPATH=$MANPATH:$LOGTALKHOME/man\nINFOPATH=$INFOPATH:$LOGTALKHOME/docs:$LOGTALKHOME/manuals\nexport PATH MANPATH INFOPATH\n```\n\n----------------------------------------\n\nTITLE: Event Handling Predicates in Logtalk\nDESCRIPTION: Built-in predicates for managing events in Logtalk.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/coding/subethaedit2/Logtalk.mode/Contents/Resources/AutocompleteAdditions.txt#2025-04-06_snippet_16\n\nLANGUAGE: logtalk\nCODE:\n```\ncurrent_event(, , , , )\ndefine_events(, , , , )\nabolish_events(, , , , )\n```\n\n----------------------------------------\n\nTITLE: Running the Logtalk User Setup Script in POSIX Systems\nDESCRIPTION: Shell command for creating local copies of Logtalk user-modifiable files in the user's home directory on POSIX systems. This creates directories with appropriate read/write permissions for the current user.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/INSTALL.md#2025-04-06_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\n% logtalk_user_setup\n```\n\n----------------------------------------\n\nTITLE: Declaring a Dynamic Category in Logtalk\nDESCRIPTION: Illustrates how to declare a category as dynamic using the dynamic/0 directive. This must precede any predicate directives or clauses in the category source code.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/userman/categories.rst.txt#2025-04-06_snippet_11\n\nLANGUAGE: logtalk\nCODE:\n```\n:- dynamic.\n```\n\n----------------------------------------\n\nTITLE: Complete Test Initialization Setup\nDESCRIPTION: Sample initialization code showing how to set up and run tests automatically.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/devtools/lgtunit.rst#2025-04-06_snippet_4\n\nLANGUAGE: logtalk\nCODE:\n```\n:- initialization((\n    set_logtalk_flag(report, warnings),\n    logtalk_load(basic_types(loader)),\n    logtalk_load(lgtunit(loader)),\n    logtalk_load(source, [source_data(on), debug(on)]),\n    logtalk_load(tests, [hook(lgtunit)]),\n    tests::run\n)).\n```\n\n----------------------------------------\n\nTITLE: ReStructuredText Documentation Headers\nDESCRIPTION: Documentation section headers using ReStructuredText format for external predicate calling documentation.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/refman/control/external_calls.rst.txt#2025-04-06_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. _external_calls:\n\nCalling external predicates\n===========================\n\n.. toctree::\n   :maxdepth: 1\n\n   external_call_1\n```\n\n----------------------------------------\n\nTITLE: Prolog Thread Local Directive\nDESCRIPTION: Example of expanding thread_local/1 directives to both thread_local/1 and dynamic/1 in SWI-Prolog.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/RELEASE_NOTES.md#2025-04-06_snippet_51\n\nLANGUAGE: prolog\nCODE:\n```\nthread_local/1\n```\n\n----------------------------------------\n\nTITLE: Solving Towers of Hanoi with Two Threads in Logtalk\nDESCRIPTION: Solves the Towers of Hanoi problem for 24 disks using two threads and measures the execution time.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/threads/hanoi/NOTES.md#2025-04-06_snippet_3\n\nLANGUAGE: logtalk\nCODE:\n```\ntime(hanoi(2)::run(24)).\n```\n\n----------------------------------------\n\nTITLE: Example Predicate Reference\nDESCRIPTION: Reference to predicate definitions and declarations including min/2, flatten/2, and other predicates that were fixed for steadfastness issues.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/RELEASE_NOTES.md#2025-04-06_snippet_58\n\nLANGUAGE: Logtalk\nCODE:\n```\nmin/2, flatten/2, min/3, max/3, delete_min/4, delete_max/4, insert/4, top_next/4, zip_index/4\n```\n\n----------------------------------------\n\nTITLE: Loading the Wrapper Tool in Logtalk\nDESCRIPTION: This snippet shows how to load the wrapper tool in a Logtalk environment. It uses the logtalk_load/1 predicate to load the wrapper tool's loader file.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/tools/wrapper/NOTES.md#2025-04-06_snippet_0\n\nLANGUAGE: Prolog\nCODE:\n```\n| ?- logtalk_load(wrapper(loader)).\n```\n\n----------------------------------------\n\nTITLE: Modes and Number of Proofs for (<<)/2 in Logtalk\nDESCRIPTION: Specifies the modes and number of proofs for the (<<)/2 control construct, indicating that it can have zero or more proofs for both object identifiers and parametric object proxies.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/refman/control/context_switch_2.rst#2025-04-06_snippet_1\n\nLANGUAGE: Logtalk\nCODE:\n```\n+object_identifier<<+callable - zero_or_more\n{+object_identifier}<<+callable - zero_or_more\n```\n\n----------------------------------------\n\nTITLE: Using Optional Terms with or_else/3\nDESCRIPTION: Examples demonstrating how to use optional terms with the or_else/3 predicate for both present and empty values.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/library/optionals/NOTES.md#2025-04-06_snippet_3\n\nLANGUAGE: logtalk\nCODE:\n```\n| ?- optional::of(1, Optional), optional(Optional)::or_else(Term, 0).\nOptional = optional(1),\nTerm = 1\nyes\n```\n\nLANGUAGE: logtalk\nCODE:\n```\n| ?- optional::empty(Optional), optional(Optional)::or_else(Term, 0).\nOptional = empty,\nTerm = 0\nyes\n```\n\n----------------------------------------\n\nTITLE: Get Undefined Message - Prototype\nDESCRIPTION: Shows failure behavior when calling an undefined predicate on prototype object.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/self_messages/NOTES.md#2025-04-06_snippet_7\n\nLANGUAGE: logtalk\nCODE:\n```\nprototype::get_undefined(_).\n```\n\n----------------------------------------\n\nTITLE: Generating Version 1 UUID as Atom in Logtalk\nDESCRIPTION: Demonstrates generating a version 1 UUID (timestamp-based) with a specific node ID as an atom. Version 1 UUIDs include timestamp and node identifier information.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/library/uuid/NOTES.md#2025-04-06_snippet_2\n\nLANGUAGE: logtalk\nCODE:\n```\n| ?- uuid::uuid_v1([0xf2,0xd1,0x90,0x94,0xdc,0x4b], UUID).\nUUID = '00a66fc0-82cf-11eb-bc83-f2d19094dc4b'\nyes\n```\n\n----------------------------------------\n\nTITLE: Running All Library Tests with Command Line Script\nDESCRIPTION: Example of using the logtalk_tester automation script to run all library tests from the command line, specifying a particular Prolog backend compiler (ECLiPSe in this case).\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/library/NOTES.md#2025-04-06_snippet_3\n\nLANGUAGE: Bash\nCODE:\n```\n$ cd ~/logtalk/library\n$ logtalk_tester -p eclipse\n```\n\n----------------------------------------\n\nTITLE: JPL Java Integration Code Example\nDESCRIPTION: Code references for the terms_to_array/2 and array_to_terms/2-3 predicates added to the java library object, specifically for SWI-Prolog/YAP JPL library implementation.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/RELEASE_NOTES.md#2025-04-06_snippet_73\n\nLANGUAGE: Prolog\nCODE:\n```\nterms_to_array/2\\narray_to_terms/2\\narray_to_terms/3\n```\n\n----------------------------------------\n\nTITLE: Event Handler and Method Expansion Predicates in Logtalk\nDESCRIPTION: Built-in predicates for event handling, goal expansion, and term expansion in Logtalk.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/coding/subethaedit2/Logtalk.mode/Contents/Resources/AutocompleteAdditions.txt#2025-04-06_snippet_12\n\nLANGUAGE: logtalk\nCODE:\n```\nbefore(, , )\nafter(, , )\n\nforward()\n\nphrase(, )\nphrase(, , )\ngoal_expansion(, )\nterm_expansion(, )\nexpand_term(, )\nexpand_goal(, )\n```\n\n----------------------------------------\n\nTITLE: Accessing Logtalk Help System\nDESCRIPTION: Command to display help information after loading the help module.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/QUICK_START.md#2025-04-06_snippet_1\n\nLANGUAGE: prolog\nCODE:\n```\nhelp::help\n```\n\n----------------------------------------\n\nTITLE: Backend Prolog Compiler Flags in Logtalk\nDESCRIPTION: Flags for configuring the backend Prolog compiler behavior including underscore variable handling, compiler flags and loader flags.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/userman/programming.rst.txt#2025-04-06_snippet_16\n\nLANGUAGE: text\nCODE:\n```\nunderscore_variables(Option)\\nprolog_compiler(Flags)\\nprolog_loader(Flags)\n```\n\n----------------------------------------\n\nTITLE: Loading Logtalk Logging Library\nDESCRIPTION: This snippet demonstrates how to load all entities in the logging library using the loader utility file.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/library/logging/NOTES.md#2025-04-06_snippet_0\n\nLANGUAGE: Prolog\nCODE:\n```\n| ?- logtalk_load(logging(loader)).\n```\n\n----------------------------------------\n\nTITLE: Installing Texinfo on macOS via Homebrew\nDESCRIPTION: Shell command to install the required Texinfo package using Homebrew on macOS.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/devtools/help.rst.txt#2025-04-06_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\n$ brew install texinfo\n```\n\n----------------------------------------\n\nTITLE: Specifying the Mode and Proof for ask_question/5 in Logtalk\nDESCRIPTION: Mode declaration for the ask_question/5 method, specifying that the first three arguments must be instantiated, the fourth must be callable, and the fifth is an output argument. It provides one proof.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/refman/methods/ask_question_5.rst#2025-04-06_snippet_1\n\nLANGUAGE: logtalk\nCODE:\n```\nask_question(+nonvar, +nonvar, +nonvar, +callable, -term) - one\n```\n\n----------------------------------------\n\nTITLE: Defining before/3 Method in Logtalk\nDESCRIPTION: This snippet shows the signature of the before/3 method and its mode declaration. It's used for handling before events in message passing, automatically called by the runtime for messages sent using the control_send_to_object_2 construct.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/refman/methods/before_3.rst.txt#2025-04-06_snippet_0\n\nLANGUAGE: Logtalk\nCODE:\n```\nbefore(Object, Message, Sender)\n```\n\nLANGUAGE: Logtalk\nCODE:\n```\nbefore(?object_identifier, ?callable, ?object_identifier) - zero_or_more\n```\n\n----------------------------------------\n\nTITLE: Testing Input Operations in Logtalk\nDESCRIPTION: Shows the beginning of a test for the standard get_char/1 predicate that reads a character from the current input stream, demonstrating input/output testing.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/devtools/lgtunit.rst#2025-04-06_snippet_35\n\nLANGUAGE: logtalk\nCODE:\n```\n   test(get_char_1_01, true(Char == 'q')) :-\n\n```\n\n----------------------------------------\n\nTITLE: Current Time Retrieval in Logtalk\nDESCRIPTION: Predicate that returns the current time as hours, minutes, and seconds. Returns integers for each time component.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/timep_0.rst.txt#2025-04-06_snippet_0\n\nLANGUAGE: logtalk\nCODE:\n```\nnow(-integer,-integer,-integer)\n```\n\n----------------------------------------\n\nTITLE: Testing Broken Property with QuickCheck in Logtalk\nDESCRIPTION: Demonstrates QuickCheck's ability to find and return a counter-example for a broken property.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/quick_check/NOTES.md#2025-04-06_snippet_5\n\nLANGUAGE: logtalk\nCODE:\n```\nlgtunit::quick_check(broken_nth1_3_prop(+list), [n(25)]).\n```\n\n----------------------------------------\n\nTITLE: Testing Broken Property with QuickCheck in Logtalk\nDESCRIPTION: Demonstrates QuickCheck's ability to find and return a counter-example for a broken property.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/quick_check/NOTES.md#2025-04-06_snippet_5\n\nLANGUAGE: logtalk\nCODE:\n```\nlgtunit::quick_check(broken_nth1_3_prop(+list), [n(25)]).\n```\n\n----------------------------------------\n\nTITLE: Dynamic Table for Included Files\nDESCRIPTION: Dynamic predicate representing a table of Logtalk files already included in the diagram. It stores file paths and can be queried for zero or more results.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/file_diagram_1.rst.txt#2025-04-06_snippet_3\n\nLANGUAGE: Logtalk\nCODE:\n```\nincluded_file_(Path)\n```\n\n----------------------------------------\n\nTITLE: Verifying the Fixed Implementation with the Same Seed\nDESCRIPTION: Example showing how to verify the bug fix using the same test seed that uncovered the original issue.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/tools/lgtunit/NOTES.md#2025-04-06_snippet_20\n\nLANGUAGE: prolog\nCODE:\n```\n| ?- lgtunit::quick_check(\n\t\tevery_other(+list(integer), -list(integer)),\n\t\t[rs(seed(3172,9814,20125))]\n\t ).\n% 100 random tests passed, 0 discarded\n% starting seed: seed(3172,9814,20125)\nyes\n```\n\n----------------------------------------\n\nTITLE: Loading Proto Hierarchy Category\nDESCRIPTION: Command to load the proto_hierarchy category into a Logtalk application. This category provides prototype hierarchy predicates and is available through the hierarchies loader.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/proto_hierarchy_0.rst.txt#2025-04-06_snippet_0\n\nLANGUAGE: logtalk\nCODE:\n```\nlogtalk_load(hierarchies(loader))\n```\n\n----------------------------------------\n\nTITLE: Synchronized Log Entry Wrapper\nDESCRIPTION: Implementation of a synchronized wrapper predicate for thread-safe log writing.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/userman/threads.rst#2025-04-06_snippet_9\n\nLANGUAGE: logtalk\nCODE:\n```\n:- synchronized(sync_write_log_entry/2).\n\nsync_write_log_entry(File, Entry) :-\n    log::write_log_entry(File, Entry).\n```\n\n----------------------------------------\n\nTITLE: Usage Modes for threaded_cancel/1 Predicate in Logtalk\nDESCRIPTION: Specifies the mode and number of proofs for the threaded_cancel/1 predicate. It accepts a non-variable Tag argument and provides exactly one proof.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/refman/predicates/threaded_cancel_1.rst#2025-04-06_snippet_1\n\nLANGUAGE: Logtalk\nCODE:\n```\nthreaded_cancel(+nonvar) - one\n```\n\n----------------------------------------\n\nTITLE: Basic Test Dialect in Logtalk\nDESCRIPTION: Illustrates the simplest test dialect for specifying tests expected to succeed.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/devtools/lgtunit.rst#2025-04-06_snippet_9\n\nLANGUAGE: Logtalk\nCODE:\n```\ntest(Test) :- Goal.\n```\n\n----------------------------------------\n\nTITLE: Syntax Definition of current_category/1 Predicate in Logtalk\nDESCRIPTION: Formal syntax definition for the current_category/1 predicate, which takes a Category parameter and enumerates all currently defined categories in a Logtalk system.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/refman/predicates/current_category_1.rst#2025-04-06_snippet_0\n\nLANGUAGE: prolog\nCODE:\n```\ncurrent_category(Category)\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Predicate Context Usage\nDESCRIPTION: Example showing the {}/1 control construct which is now opaque to cuts in Logtalk 3.x. This change ensures consistent semantics whether the argument is known at compile time or runtime.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/UPGRADING.md#2025-04-06_snippet_0\n\nLANGUAGE: logtalk\nCODE:\n```\n{}/1\n```\n\n----------------------------------------\n\nTITLE: Defining Entity Info Pair Score Hook in Logtalk\nDESCRIPTION: This predicate sets the score for relevant entity info/1 directive pairs. It provides fine-grained control over scoring individual documentation elements.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/doc_metric_0.rst.txt#2025-04-06_snippet_2\n\nLANGUAGE: Logtalk\nCODE:\n```\nentity_info_pair_score_hook(Pair,Entity,Score)\n```\n\n----------------------------------------\n\nTITLE: Logtalk Make Functionality Shortcuts\nDESCRIPTION: Presents shortcuts for various Logtalk make operations, including reloading modified files, cleaning intermediate files, listing missing entities, and checking for circular references.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/faq/usability.rst#2025-04-06_snippet_2\n\nLANGUAGE: Logtalk\nCODE:\n```\n{*}\n```\n\nLANGUAGE: Logtalk\nCODE:\n```\n{!}\n```\n\nLANGUAGE: Logtalk\nCODE:\n```\n{?}\n```\n\nLANGUAGE: Logtalk\nCODE:\n```\n{@}\n```\n\n----------------------------------------\n\nTITLE: Defining Dynamic Sub-diagram Predicate in Logtalk\nDESCRIPTION: Defines a dynamic predicate sub_diagram_/1 that stores file sub-diagrams information. Used internally to support diagram generation with atom arguments and multiple possible proofs.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/file_dependency_diagram_1.rst.txt#2025-04-06_snippet_0\n\nLANGUAGE: logtalk\nCODE:\n```\nsub_diagram_/1\n```\n\n----------------------------------------\n\nTITLE: Checking Element Selection from a List in Logtalk\nDESCRIPTION: Checks if an element can be selected from a list and returns the list of remaining elements.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/listp_0.rst.txt#2025-04-06_snippet_15\n\nLANGUAGE: Logtalk\nCODE:\n```\nselectchk(Element,List,Remaining)\n```\n\n----------------------------------------\n\nTITLE: Adding Ellipses to First Composite\nDESCRIPTION: Adds three ellipses (e1, e2, e3) to the composite graphic cg1\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/design_patterns/structural/composite/NOTES.md#2025-04-06_snippet_4\n\nLANGUAGE: logtalk\nCODE:\n```\ncg1::(add(e1), add(e2), add(e3)).\n```\n\n----------------------------------------\n\nTITLE: Mode Templates for Classes in Logtalk\nDESCRIPTION: Template and mode declarations for classes in Logtalk. These templates specify the expected types of arguments in the object directive when creating classes that specialize other classes.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/refman/directives/object_1_5.rst#2025-04-06_snippet_8\n\nLANGUAGE: logtalk\nCODE:\n```\nobject(+object_identifier,\n    specializes(+specialized_objects))\n\nobject(+object_identifier,\n    implements(+implemented_protocols),\n    specializes(+specialized_objects))\n\nobject(+object_identifier,\n    imports(+imported_categories),\n    specializes(+specialized_objects))\n\nobject(+object_identifier,\n    implements(+implemented_protocols),\n    imports(+imported_categories),\n    specializes(+specialized_objects))\n```\n\n----------------------------------------\n\nTITLE: Representation Error Method Signature\nDESCRIPTION: Method signature showing the basic form of the representation_error/1 predicate that takes a Flag argument.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/refman/methods/representation_error_1.rst#2025-04-06_snippet_0\n\nLANGUAGE: prolog\nCODE:\n```\nrepresentation_error(Flag)\n```\n\n----------------------------------------\n\nTITLE: Learning Train Classification with Metagol in Logtalk\nDESCRIPTION: This example demonstrates Metagol learning a predicate 'e/1' for classifying trains based on their characteristics.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/ports/metagol/SCRIPT.txt#2025-04-06_snippet_7\n\nLANGUAGE: Logtalk\nCODE:\n```\n| ?- trains::learn.\n\n% learning e/1\n% clauses: 1\n% clauses: 2\ne(A):-has_car(A,B),e_1(B).\ne_1(A):-short(A),closed(A).\nyes\n```\n\n----------------------------------------\n\nTITLE: Updating Documentation in Logtalk\nDESCRIPTION: The 'update/0' predicate updates project documentation by calling a sequence of goals and executing shell commands. It fails if any goal or command fails.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/doclet_0.rst.txt#2025-04-06_snippet_0\n\nLANGUAGE: Logtalk\nCODE:\n```\nupdate/0\n```\n\n----------------------------------------\n\nTITLE: Defining print_message_token/4 Method in Logtalk\nDESCRIPTION: Signature of the print_message_token/4 method, which is used for printing a message token. It takes a stream, prefix, token, and list of tokens as arguments.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/refman/methods/print_message_token_4.rst#2025-04-06_snippet_0\n\nLANGUAGE: Prolog\nCODE:\n```\nprint_message_token(Stream, Prefix, Token, Tokens)\n```\n\n----------------------------------------\n\nTITLE: Defining make clause for automatic test running in Logtalk\nDESCRIPTION: Shows how to define a make clause in a test set object to automatically run tests when calling logtalk_make/1 with specific targets.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/RELEASE_NOTES.md#2025-04-06_snippet_67\n\nLANGUAGE: Logtalk\nCODE:\n```\nmake(Target) :- \n    ( Target == check ; Target == all ).\n```\n\n----------------------------------------\n\nTITLE: Declaring Accumulators in EDCG\nDESCRIPTION: Shows the short and long forms of declaring accumulators in EDCG for Logtalk using acc_info/5 and acc_info/7.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/libraries/edcg.rst#2025-04-06_snippet_3\n\nLANGUAGE: logtalk\nCODE:\n```\nacc_info(Acc, Term, Left, Right, Joiner).\n```\n\nLANGUAGE: logtalk\nCODE:\n```\nacc_info(Acc, Term, Left, Right, Joiner, LStart, RStart).\n```\n\n----------------------------------------\n\nTITLE: Loading the Dead Code Scanner Tool in Logtalk\nDESCRIPTION: This snippet shows how to load the dead_code_scanner tool in Logtalk. It uses the logtalk_load/1 predicate to load the tool's loader file.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/devtools/dead_code_scanner.rst#2025-04-06_snippet_0\n\nLANGUAGE: logtalk\nCODE:\n```\n| ?- logtalk_load(dead_code_scanner(loader)).\n```\n\n----------------------------------------\n\nTITLE: Generating Custom Character List Identifier in Logtalk\nDESCRIPTION: This example demonstrates how to generate an identifier represented by a list of characters using 64 bits (8 bytes) of randomness.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/library/ids/NOTES.md#2025-04-06_snippet_4\n\nLANGUAGE: prolog\nCODE:\n```\n| ?- ids(chars, 8)::generate(Identifier).\nIdentifier = ['5','0','8','V',d,'S',c,y,n,o,'A',=]\nyes\n```\n\n----------------------------------------\n\nTITLE: Attempting to Update a Pinned Pack in Logtalk\nDESCRIPTION: Example showing the error message when attempting to update a pinned pack.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/tools/packs/NOTES.md#2025-04-06_snippet_32\n\nLANGUAGE: prolog\nCODE:\n```\n| ?- packs::update(bar).\n```\n\n----------------------------------------\n\nTITLE: Viewing Script Help in PowerShell\nDESCRIPTION: Command to display help information for the SICStus Prolog script in Windows PowerShell environments, showing available options and usage instructions.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/scripts/embedding/sicstus/NOTES.md#2025-04-06_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\nsicstus_logtalk_po.ps1 -h\n```\n\n----------------------------------------\n\nTITLE: Reading Terms with Operators from File\nDESCRIPTION: Demonstrates reading terms that use operators from a file using the triple object.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/operators/NOTES.md#2025-04-06_snippet_4\n\nLANGUAGE: logtalk\nCODE:\n```\ntriple::read_from_file.\n```\n\n----------------------------------------\n\nTITLE: Solving Knight's Tour Problem using CLP(FD) in Logtalk\nDESCRIPTION: Demonstrates solving the Knight's Tour problem for a 6x6 board using CLP(FD) constraints in Logtalk.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/constraints/swipl/NOTES.md#2025-04-06_snippet_6\n\nLANGUAGE: logtalk\nCODE:\n```\nknight::n_tour(N, Ts), meta::map(clpfd:label, Ts).\n```\n\n----------------------------------------\n\nTITLE: Loading Parstructs Example\nDESCRIPTION: Loads the parstructs example module into the Logtalk environment.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/parstructs/NOTES.md#2025-04-06_snippet_1\n\nLANGUAGE: logtalk\nCODE:\n```\nlogtalk_load(parstructs(loader)).\n```\n\n----------------------------------------\n\nTITLE: Predicate Template - rlibrary/2\nDESCRIPTION: Creates all supported diagrams for a library and its sub-libraries with specified options.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/diagrams_1.rst.txt#2025-04-06_snippet_5\n\nLANGUAGE: logtalk\nCODE:\n```\nrlibrary(Library,Options)\n```\n\n----------------------------------------\n\nTITLE: Usage Example in Logtalk\nDESCRIPTION: Demonstrates how to use the abolish_object/1 predicate to remove a dynamic object named 'list'.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/refman/predicates/abolish_object_1.rst.txt#2025-04-06_snippet_2\n\nLANGUAGE: logtalk\nCODE:\n```\n| ?- abolish_object(list).\n```\n\n----------------------------------------\n\nTITLE: Loading Backtracking Nodes Example in Logtalk\nDESCRIPTION: Loads the backtracking nodes example code using Logtalk's module loader.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/ncl/backtracking_nodes/NOTES.md#2025-04-06_snippet_1\n\nLANGUAGE: logtalk\nCODE:\n```\nlogtalk_load(backtracking_nodes(loader)).\n```\n\n----------------------------------------\n\nTITLE: Decoding Base64URL to URL in Logtalk\nDESCRIPTION: This example shows how to decode a Base64URL-encoded string back into a URL using the base64url::parse/2 predicate.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/library/base64/NOTES.md#2025-04-06_snippet_5\n\nLANGUAGE: Prolog\nCODE:\n```\n| ?- base64url::parse(atom('aHR0cHM6Ly9sb2d0YWxrLm9yZw'), URL).\nURL == 'https://logtalk.org'\nyes\n```\n\n----------------------------------------\n\nTITLE: Running Library Unit Tests\nDESCRIPTION: Example of how to run unit tests for a specific Logtalk library by loading its tester file, which contains test cases to verify library functionality.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/library/NOTES.md#2025-04-06_snippet_2\n\nLANGUAGE: Prolog\nCODE:\n```\n| ?- logtalk_load(random(tester)).\n```\n\n----------------------------------------\n\nTITLE: Defining create_logtalk_flag/3 predicate in Logtalk\nDESCRIPTION: Addition of a new built-in predicate create_logtalk_flag/3 for creating new flags, based on the specification of create_prolog_flag/3 in SWI-Prolog.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/RELEASE_NOTES.md#2025-04-06_snippet_86\n\nLANGUAGE: Logtalk\nCODE:\n```\ncreate_logtalk_flag/3\n```\n\n----------------------------------------\n\nTITLE: Predicate Properties and Mode Declarations in Logtalk\nDESCRIPTION: Directives for specifying predicate properties, modes, and meta-predicates in Logtalk.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/coding/subethaedit2/Logtalk.mode/Contents/Resources/AutocompleteAdditions.txt#2025-04-06_snippet_4\n\nLANGUAGE: logtalk\nCODE:\n```\ncalls().\ninfo([]).\ninfo(/, []).\nmode(, one).\nmode(, zero).\nmode(, zero_or_one).\nmode(, zero_or_more).\nmode(, one_or_more).\nmode(, error).\nmultifile(/).\ncoinductive(/).\nbuilt_in.\ndynamic(/).\ndynamic.\ndiscontiguous(/).\nmeta_predicate().\nmeta_non_terminal().\n```\n\n----------------------------------------\n\nTITLE: Installing MacPorts Dependencies\nDESCRIPTION: Commands for installing tool dependencies using MacPorts package manager.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/devtools/overview.rst.txt#2025-04-06_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\n$ sudo port install d2 graphviz\n$ sudo port install texinfo pandoc\n$ sudo port install libxslt fop texlive\n$ sudo port install gsed\n$ sudo port install coreutils gsed libarchive gnupg2 git curl wget direnv\n$ sudo port install gh glab\n```\n\n----------------------------------------\n\nTITLE: Loading SICStus CLP(FD) Example\nDESCRIPTION: Loads the constraint logic programming example files for SICStus Prolog, which includes necessary libraries and example code.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/constraints/sicstus/NOTES.md#2025-04-06_snippet_1\n\nLANGUAGE: logtalk\nCODE:\n```\nlogtalk_load(clp_sicstus(loader)).\n```\n\n----------------------------------------\n\nTITLE: Skipping Tests in Logtalk\nDESCRIPTION: Examples of different ways to skip tests using the (-)/1 operator and test/3 dialect with note/1 and condition/1 options.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/devtools/lgtunit.rst.txt#2025-04-06_snippet_11\n\nLANGUAGE: logtalk\nCODE:\n```\n- test(not_yet_ready) :-\n    ...\n\n- test(xyz_reset, true, [note('Feature xyz reset not yet implemented')]) :-\n    ...\n\ntest(test_id, true, [condition(current_prolog_flag(bounded,true))]) :-\n    ...\n```\n\n----------------------------------------\n\nTITLE: Loading Logtalk Genint Library\nDESCRIPTION: Command to load all entities in the genint library using the loader.lgt file\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/library/genint/NOTES.md#2025-04-06_snippet_0\n\nLANGUAGE: logtalk\nCODE:\n```\n| ?- logtalk_load(genint(loader)).\n```\n\n----------------------------------------\n\nTITLE: Defining Triple Facts in Logtalk\nDESCRIPTION: Three facts defining a relationship between numbers and their triple values using the 'triple' predicate. The predicate associates a number with its value multiplied by three.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/operators/triple.txt#2025-04-06_snippet_0\n\nLANGUAGE: Logtalk\nCODE:\n```\n1 triple 3.\n2 triple 6.\n3 triple 9.\n```\n\n----------------------------------------\n\nTITLE: Loading the dynpred example\nDESCRIPTION: Loads the dynamic predicate example files into the Logtalk environment.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/dynpred/NOTES.md#2025-04-06_snippet_1\n\nLANGUAGE: logtalk\nCODE:\n```\nlogtalk_load(dynpred(loader)).\n```\n\n----------------------------------------\n\nTITLE: Querying Packs Storage Directory\nDESCRIPTION: Logtalk/Prolog query to retrieve the current directory used for storing registries and packs.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/devtools/packs.rst.txt#2025-04-06_snippet_7\n\nLANGUAGE: prolog\nCODE:\n```\n| ?- packs::logtalk_packs(Directory).\n```\n\n----------------------------------------\n\nTITLE: Hook Pipeline Example\nDESCRIPTION: Shows how to use hook_pipeline object to combine expansion and file output hooks.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/libraries/hook_objects.rst.txt#2025-04-06_snippet_6\n\nLANGUAGE: logtalk\nCODE:\n```\n| ?- logtalk_compile('input.pl', [hook(hook_pipeline([expansions,write_to_file_hook('output.pl')]))]).\n```\n\n----------------------------------------\n\nTITLE: Loading Logtalk Core Files in Lean Prolog\nDESCRIPTION: This snippet demonstrates how to compile and collect Logtalk core files into a single file for use with Lean Prolog. It includes the necessary steps to compile core components and combine them with adapter and paths files.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/adapters/unsupported/NOTES.md#2025-04-06_snippet_0\n\nLANGUAGE: Prolog\nCODE:\n```\n| ?- logtalk_compile([\n\t\tcore(expanding),\n\t\tcore(monitoring),\n\t\tcore(forwarding),\n\t\tcore(user),\n\t\tcore(logtalk),\n\t\tcore(core_messages)],\n\t\t[optimize(on), scratch_directory('$HOME/collect')]).\n```\n\n----------------------------------------\n\nTITLE: Computing Total Steps for Input File (Part 2) in Logtalk\nDESCRIPTION: This code calculates the total number of steps for the 'test_files/input' file using the part 2 solution method.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/haunted_wasteland/NOTES.md#2025-04-06_snippet_5\n\nLANGUAGE: logtalk\nCODE:\n```\nobject_property(haunted_wasteland, file(_, Directory)),\natom_concat(Directory, 'test_files/input', File),\nhaunted_wasteland::steps_2(File, Steps).\n```\n\n----------------------------------------\n\nTITLE: Module Declaration with Predicate Aliases\nDESCRIPTION: Support for declaring predicate aliases in module/2 directives when compiling modules as objects\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/RELEASE_NOTES.md#2025-04-06_snippet_44\n\nLANGUAGE: Logtalk\nCODE:\n```\nmodule/2\n```\n\n----------------------------------------\n\nTITLE: Solving Puzzle Example\nDESCRIPTION: Solves a constraint-based puzzle\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/constraints/bp/NOTES.md#2025-04-06_snippet_4\n\nLANGUAGE: logtalk\nCODE:\n```\npuzzle::solve(V).\n```\n\n----------------------------------------\n\nTITLE: Loading Unicode Data Files in Logtalk\nDESCRIPTION: Directive usage for loading Unicode data files, switching from ensure_loaded/1 to include/1 for better portability across Prolog systems.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/library/unicode_data/HISTORY.md#2025-04-06_snippet_0\n\nLANGUAGE: Prolog\nCODE:\n```\ninclude/1\n```\n\nLANGUAGE: Prolog\nCODE:\n```\nensure_loaded/1\n```\n\n----------------------------------------\n\nTITLE: Generating HTML Fragment with Unordered List\nDESCRIPTION: Demonstrates generating just a fragment of HTML (an unordered list) to the current output stream.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/libraries/html.rst.txt#2025-04-06_snippet_8\n\nLANGUAGE: prolog\nCODE:\n```\n| ?- current_output(Stream),\n        html5::generate(stream(Stream), ul([li(foo), li(bar), li(baz)])).\n\n<ul>\n<li>\nfoo</li>\n<li>\nbar</li>\n<li>\nbaz</li>\n</ul>\n\nStream = ...\n```\n\n----------------------------------------\n\nTITLE: Defining Predicate Mode Score Hook in Logtalk\nDESCRIPTION: This predicate sets the maximum score for predicate mode/2 directives. It allows customization of scoring for predicate mode documentation.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/doc_metric_0.rst.txt#2025-04-06_snippet_3\n\nLANGUAGE: Logtalk\nCODE:\n```\npredicate_mode_score_hook(Entity,Predicate,MaximumScore)\n```\n\n----------------------------------------\n\nTITLE: Incremental Route Building\nDESCRIPTION: Demonstrates building a route incrementally by adding one town at a time using the incremental algorithm.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/lo/travellers/NOTES.md#2025-04-06_snippet_2\n\nLANGUAGE: logtalk\nCODE:\n```\nincremental::route([london, brighton, portsmouth, exeter, oxford, aberystwyth], Route).\n```\n\n----------------------------------------\n\nTITLE: Recording Test Execution Time in Logtalk\nDESCRIPTION: Example of using the note/1 option with benchmark predicate to record and report execution time of a specific sub-goal within a test.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/devtools/lgtunit.rst#2025-04-06_snippet_45\n\nLANGUAGE: logtalk\nCODE:\n```\ntest(foobar, true, [note(bar(seconds-Time))]) :-\n       foo(...),\n       benchmark(bar(...), Time).\n```\n\n----------------------------------------\n\nTITLE: Implementation Example of question_hook/6\nDESCRIPTION: Shows how to declare and implement the question_hook/6 method, including proper multifile and dynamic declarations, with an example that provides a pre-defined answer.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/refman/methods/question_hook_6.rst.txt#2025-04-06_snippet_3\n\nLANGUAGE: logtalk\nCODE:\n```\n:- multifile(logtalk::question_hook/6).\n:- dynamic(logtalk::question_hook/6).\n\n% use a pre-defined answer instead of asking the user\nlogtalk::question_hook(upper_limit, question, my_app, _, _, 3.7).\n```\n\n----------------------------------------\n\nTITLE: Declaration Syntax for built_in/0 Directive in Logtalk\nDESCRIPTION: Shows the basic syntax for the built_in/0 directive which declares an entity as built-in. Built-in entities must be static and cannot be redefined once loaded.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/refman/directives/built_in_0.rst#2025-04-06_snippet_0\n\nLANGUAGE: logtalk\nCODE:\n```\nbuilt_in\n```\n\n----------------------------------------\n\nTITLE: Setting Up Source Analysis Flags in Logtalk\nDESCRIPTION: Queries to enable source data and optimization flags required for code analysis\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/tools/dead_code_scanner/NOTES.md#2025-04-06_snippet_2\n\nLANGUAGE: prolog\nCODE:\n```\n| ?- set_logtalk_flag(source_data, on),\n     set_logtalk_flag(optimize, on).\n```\n\n----------------------------------------\n\nTITLE: Converting Assertion Failures to Errors in Logtalk\nDESCRIPTION: Logtalk category defining a message hook to convert assertion failures into runtime errors by throwing an exception.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/devtools/assertions.rst#2025-04-06_snippet_8\n\nLANGUAGE: Logtalk\nCODE:\n```\n:- category(assertions_failures_to_errors).\n\n    :- multifile(logtalk::message_hook/4).\n    :- dynamic(logtalk::message_hook/4).\n\n    logtalk::message_hook(Message, error, assertions, Tokens) :-\n        % uncomment the next two lines to also print the default message\n        % logtalk::message_prefix_stream(error, assertions, Prefix, Stream),\n        % logtalk::print_message_tokens(Stream, Prefix, Tokens),\n        throw(error(Message, _)).\n\n:- end_category.\n```\n\n----------------------------------------\n\nTITLE: Loading the Coroutining Library in Logtalk\nDESCRIPTION: Command to load all entities in the coroutining library using the loader.lgt file. This is the standard way to make the library available for use in Logtalk applications.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/libraries/coroutining.rst.txt#2025-04-06_snippet_0\n\nLANGUAGE: prolog\nCODE:\n```\n| ?- logtalk_load(coroutining(loader)).\n```\n\n----------------------------------------\n\nTITLE: Defining message forwarding handler in Logtalk\nDESCRIPTION: Shows usage of the forward/1 message forwarding handler with the (::)/1 control construct.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/RELEASE_NOTES.md#2025-04-06_snippet_117\n\nLANGUAGE: Logtalk\nCODE:\n```\n::forward(Message)\n```\n\n----------------------------------------\n\nTITLE: Checking Versions in Logtalk\nDESCRIPTION: Displays the versions of Logtalk, the Prolog backend, and the kernel when running as a Jupyter notebook.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/wrappers/NOTES.md#2025-04-06_snippet_0\n\nLANGUAGE: logtalk\nCODE:\n```\n%versions\n```\n\n----------------------------------------\n\nTITLE: Pre-formatted Text Element\nDESCRIPTION: Example showing how pre element content is handled literally rather than as nested elements\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/libraries/html.rst#2025-04-06_snippet_1\n\nLANGUAGE: prolog\nCODE:\n```\npre([foo,bar,baz])\n```\n\n----------------------------------------\n\nTITLE: Testing Meta-predicates with List Return\nDESCRIPTION: Tests compilation and use of meta-predicates returning a list of names\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/modules/NOTES.md#2025-04-06_snippet_7\n\nLANGUAGE: logtalk\nCODE:\n```\ntest::names(Names).\n```\n\n----------------------------------------\n\nTITLE: Testing the ISO 8601 Library in Logtalk\nDESCRIPTION: Command to load and run tests for the iso8601 library predicates using the tester.lgt file.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/contributions/iso8601.rst.txt#2025-04-06_snippet_1\n\nLANGUAGE: logtalk\nCODE:\n```\n| ?- logtalk_load(iso8601(tester)).\n```\n\n----------------------------------------\n\nTITLE: Querying Database Contents in Verdi Neruda\nDESCRIPTION: Examples of how to list the available databases and view their contents in the Verdi Neruda shell interface.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/contributions/verdi_neruda.rst#2025-04-06_snippet_1\n\nLANGUAGE: Prolog\nCODE:\n```\ndatabases.\n```\n\nLANGUAGE: Prolog\nCODE:\n```\nlisting(demodb).\n```\n\n----------------------------------------\n\nTITLE: Generating Version 4 UUID as Character List\nDESCRIPTION: Shows how to generate a version 4 UUID returned as a list of characters.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/libraries/uuid.rst#2025-04-06_snippet_6\n\nLANGUAGE: logtalk\nCODE:\n```\n| ?- uuid(chars)::uuid_v4(UUID).\nUUID = [d,'3',d,'3','3','5','1','3',-,'8','1',e,c,-,'4',d,'2','6',-,\n           '9',f,'2','2',-,e,d,'9','5',e,'0','0',e,'1','5','7','0']\nyes\n```\n\n----------------------------------------\n\nTITLE: Loading the Coroutining Library in Logtalk\nDESCRIPTION: Command to load all entities in the coroutining library using the loader.lgt file. This is the standard way to make the library available for use in Logtalk applications.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/libraries/coroutining.rst.txt#2025-04-06_snippet_0\n\nLANGUAGE: prolog\nCODE:\n```\n| ?- logtalk_load(coroutining(loader)).\n```\n\n----------------------------------------\n\nTITLE: Importing lgtunit Assertion Predicates\nDESCRIPTION: Demonstrates how to import the assertion predicates from lgtunit to use them in a test object. This allows checking test conditions within test methods.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/devtools/lgtunit.rst#2025-04-06_snippet_61\n\nLANGUAGE: logtalk\nCODE:\n```\n:- uses(lgtunit, [assertion/1, assertion/2]).\n```\n\n----------------------------------------\n\nTITLE: Constructing Expected Term from Closure in Logtalk\nDESCRIPTION: Constructs an expected term holding a value bound by calling the given closure. If the closure fails, it returns an expected term with the atom 'fail'. If the closure throws an error, it returns that error in the expected term.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/expected_0.rst.txt#2025-04-06_snippet_4\n\nLANGUAGE: Logtalk\nCODE:\n```\nfrom_goal(Closure,Expected)\n```\n\n----------------------------------------\n\nTITLE: Printing Logtalk Version Information\nDESCRIPTION: Prints the Logtalk, Prolog backend, and kernel versions when running as a notebook.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/permutations/NOTES.md#2025-04-06_snippet_0\n\nLANGUAGE: logtalk\nCODE:\n```\n%versions\n```\n\n----------------------------------------\n\nTITLE: Enumerating Square Side Alias Properties\nDESCRIPTION: Lists all the properties of the side/1 predicate alias for a square object. This includes information about its aliasing, scope, and implementation details.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/aliases/NOTES.md#2025-04-06_snippet_3\n\nLANGUAGE: logtalk\nCODE:\n```\n%%table\nsquare(2)::predicate_property(side(_), Property).\n```\n\n----------------------------------------\n\nTITLE: Demonstrating bagof/3 Usage Examples in Prolog\nDESCRIPTION: Provides examples of how to use the bagof/3 method in different contexts within Logtalk.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/refman/methods/bagof_3.rst.txt#2025-04-06_snippet_3\n\nLANGUAGE: Prolog\nCODE:\n```\nbagof(Template, Goal, List)\nbagof(Template, ::Message, List)\nbagof(Template, Object::Message, List)\n```\n\n----------------------------------------\n\nTITLE: Defining the question_hook/6 method signature in Logtalk\nDESCRIPTION: Shows the signature of the question_hook/6 method which intercepts questions asked by the system. This method is declared as public, multifile, and dynamic in the logtalk built-in object.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/refman/methods/question_hook_6.rst#2025-04-06_snippet_0\n\nLANGUAGE: logtalk\nCODE:\n```\nquestion_hook(Question, Kind, Component, Tokens, Check, Answer)\n```\n\n----------------------------------------\n\nTITLE: Loading Chain of Responsibility Design Pattern in Logtalk\nDESCRIPTION: Loads the Chain of Responsibility design pattern sample implementation from the design patterns library in Logtalk.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/design_patterns/behavioral/chain_of_responsibility/NOTES.md#2025-04-06_snippet_1\n\nLANGUAGE: logtalk\nCODE:\n```\nlogtalk_load(design_patterns('behavioral/chain_of_responsibility/loader')).\n```\n\n----------------------------------------\n\nTITLE: Loading Nested Dictionaries Library in Logtalk\nDESCRIPTION: Shows how to load all entities in the nested_dictionaries library using the loader.lgt file.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/libraries/nested_dictionaries.rst#2025-04-06_snippet_0\n\nLANGUAGE: logtalk\nCODE:\n```\n| ?- logtalk_load(nested_dictionaries(loader)).\n```\n\n----------------------------------------\n\nTITLE: Remembering Included Logtalk File in Diagram\nDESCRIPTION: Predicate to remember an included Logtalk file in the diagram. It takes a file path as an argument and is compiled with the 'static' flag.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/file_diagram_1.rst.txt#2025-04-06_snippet_0\n\nLANGUAGE: Logtalk\nCODE:\n```\nremember_included_file(Path)\n```\n\n----------------------------------------\n\nTITLE: Creating a Synchronized Wrapper Predicate in Logtalk\nDESCRIPTION: Shows how to create a synchronized wrapper predicate for a non-thread-safe predicate in another object.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/userman/threads.rst.txt#2025-04-06_snippet_9\n\nLANGUAGE: Logtalk\nCODE:\n```\n:- synchronized(sync_write_log_entry/2).\n\nsync_write_log_entry(File, Entry) :-\n    log::write_log_entry(File, Entry).\n```\n\n----------------------------------------\n\nTITLE: Benchmark Loop Engine Destruction\nDESCRIPTION: Destroys 2000 loop engines and measures performance.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/engines/ebench/NOTES.md#2025-04-06_snippet_8\n\nLANGUAGE: logtalk\nCODE:\n```\ntime((between(1,2000,I),atom_number(A,I),threaded_engine_destroy(A),fail)).\n```\n\n----------------------------------------\n\nTITLE: Using Hook Objects for Source File Expansion in Logtalk\nDESCRIPTION: Example of using multiple hook objects to expand different parts of a source file by setting the hook flag.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/userman/expansion.rst.txt#2025-04-06_snippet_2\n\nLANGUAGE: Logtalk\nCODE:\n```\n:- object(h1,\n    implements(expanding)).\n\n    term_expansion((:- public(a/0)), (:- public(b/0))).\n    term_expansion(a, b).\n\n:- end_object.\n\n:- object(h2,\n    implements(expanding)).\n\n    term_expansion((:- public(a/0)), (:- public(c/0))).\n    term_expansion(a, c).\n\n:- end_object.\n\n:- set_logtalk_flag(hook, h1).\n\n:- object(s1).\n\n    :- public(a/0).\n    a.\n\n:- end_object.\n\n\n:- set_logtalk_flag(hook, h2).\n\n:- object(s2).\n\n    :- public(a/0).\n    a.\n\n:- end_object.\n```\n\n----------------------------------------\n\nTITLE: Using this/1 in a Logtalk Predicate\nDESCRIPTION: Example of using the this/1 method in a Logtalk predicate to retrieve and display the identifier of the object executing the predicate.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/refman/methods/this_1.rst#2025-04-06_snippet_2\n\nLANGUAGE: Logtalk\nCODE:\n```\ntest :-\n    this(This),\n    write('Using a predicate clause contained in '),\n    writeq(This), nl.\n```\n\n----------------------------------------\n\nTITLE: Printing Debug Message After Object Loading in Logtalk\nDESCRIPTION: Demonstrates using initialization/1 within an object to print a debug message with the current date after loading the object definition.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/refman/directives/initialization_1.rst.txt#2025-04-06_snippet_2\n\nLANGUAGE: logtalk\nCODE:\n```\n:- object(log).\n\n    :- initialization(start_date).\n\n    start_date :-\n        os::date_time(Year, Month, Day, _, _, _, _),\n        logtalk::print_message(debug, my_app, 'Starting date: ~d-~d-~d~n'+[Year,Month,Day]).\n\n:- end_object.\n```\n\n----------------------------------------\n\nTITLE: Defining Detailed Predicate Mode Score Hook in Logtalk\nDESCRIPTION: This predicate sets the score for a specific predicate mode/2 directive. It provides fine-grained control over scoring individual predicate mode documentation.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/doc_metric_0.rst.txt#2025-04-06_snippet_4\n\nLANGUAGE: Logtalk\nCODE:\n```\npredicate_mode_score_hook(Template,Solutions,Entity,Predicate,Score)\n```\n\n----------------------------------------\n\nTITLE: Loading Logtalk Grammar Library\nDESCRIPTION: Command to load all entities in the grammar library using the loader file\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/library/grammars/NOTES.md#2025-04-06_snippet_0\n\nLANGUAGE: prolog\nCODE:\n```\n| ?- logtalk_load(grammars(loader)).\n```\n\n----------------------------------------\n\nTITLE: Querying Diameter of Decorated Object\nDESCRIPTION: This snippet demonstrates how the decorator forwards an undefined message (diameter/1) to the decorated circle object.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/design_patterns/structural/decorator/NOTES.md#2025-04-06_snippet_3\n\nLANGUAGE: logtalk\nCODE:\n```\ncolored_shape(circle, red)::diameter(Diameter).\n```\n\n----------------------------------------\n\nTITLE: Usage Example\nDESCRIPTION: Demonstrates how to use the abolish_category/1 predicate to abolish a category named 'monitoring'.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/refman/predicates/abolish_category_1.rst#2025-04-06_snippet_2\n\nLANGUAGE: logtalk\nCODE:\n```\n| ?- abolish_category(monitoring).\n```\n\n----------------------------------------\n\nTITLE: Running XML Parser Test Queries in Logtalk\nDESCRIPTION: These snippets demonstrate how to run test queries for the XML parser in Logtalk. They use the test/1 predicate with different arguments (q1, q2, q12) to execute specific tests.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/contributions/xml_parser/SCRIPT.txt#2025-04-06_snippet_3\n\nLANGUAGE: prolog\nCODE:\n```\n|  ?- test(q1).\n```\n\nLANGUAGE: prolog\nCODE:\n```\n|  ?- test(q2).\n```\n\nLANGUAGE: prolog\nCODE:\n```\n|  ?- test(q12).\n```\n\n----------------------------------------\n\nTITLE: Disabling Event Tracing in Logtalk\nDESCRIPTION: Demonstrates how to stop tracing by abolishing events for the tracer object.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/userman/events.rst.txt#2025-04-06_snippet_9\n\nLANGUAGE: Prolog\nCODE:\n```\n| ?- abolish_events(_, _, _, _, tracer).\n\nyes\n```\n\n----------------------------------------\n\nTITLE: Defining Documentation Goals in Logtalk\nDESCRIPTION: The 'doc_goal/1' predicate defines a table of goals, typically using the 'diagrams' and 'lgtdoc' tools, to generate documentation. Goals are called in order within the 'user' pseudo-object context.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/doclet_0.rst.txt#2025-04-06_snippet_1\n\nLANGUAGE: Logtalk\nCODE:\n```\ndoc_goal(Goal)\n```\n\n----------------------------------------\n\nTITLE: Method Mode Declaration for message_prefix_file/6 in Logtalk\nDESCRIPTION: Specifies the calling modes and argument types for the message_prefix_file/6 method, indicating it can be called with the first two arguments being non-variable terms, the next three being atoms, and the last being a list of compound terms.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/refman/methods/message_prefix_file_6.rst#2025-04-06_snippet_1\n\nLANGUAGE: logtalk\nCODE:\n```\nmessage_prefix_file(?nonvar, ?nonvar, ?atom, ?atom, ?atom, ?list(compound)) - zero_or_more\n```\n\n----------------------------------------\n\nTITLE: Fired Clause Tracker in Logtalk Unit Testing\nDESCRIPTION: Dynamic predicate tracking clauses that were fired during test execution, storing entity, predicate, and clause identifiers.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/lgtunit_0.rst.txt#2025-04-06_snippet_81\n\nLANGUAGE: Logtalk\nCODE:\n```\nfired_(Entity,Predicate,Clause)\n```\n\n----------------------------------------\n\nTITLE: Date Format in Info Directives\nDESCRIPTION: Code snippet format change to use ISO 8601 standard date format Year-Month-Day in info/1 directives\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/RELEASE_NOTES.md#2025-04-06_snippet_45\n\nLANGUAGE: Logtalk\nCODE:\n```\ninfo/1\n```\n\n----------------------------------------\n\nTITLE: Loading Logtalk Debugger\nDESCRIPTION: Query to load the Logtalk debugger tool into the environment.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/devtools/debugger.rst#2025-04-06_snippet_0\n\nLANGUAGE: logtalk\nCODE:\n```\n| ?- logtalk_load(debugger(loader)).\n```\n\n----------------------------------------\n\nTITLE: Loading Queue Library Tests\nDESCRIPTION: Command to load the test suite for the queue library predicates.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/libraries/queues.rst.txt#2025-04-06_snippet_1\n\nLANGUAGE: logtalk\nCODE:\n```\n| ?- logtalk_load(queues(tester)).\n```\n\n----------------------------------------\n\nTITLE: Print Message Tokens Usage Example\nDESCRIPTION: Example demonstrating how to use the print_message_tokens method to print a message with tokens.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/refman/methods/print_message_tokens_3.rst#2025-04-06_snippet_2\n\nLANGUAGE: prolog\nCODE:\n```\n...,\nlogtalk::print_message_tokens(user_error, '% ', ['Redefining ~w ~q'-[object,foo], nl]),\n...\n```\n\n----------------------------------------\n\nTITLE: Installing Texinfo on macOS using MacPorts\nDESCRIPTION: This snippet shows the command to install the Texinfo package on macOS using MacPorts. Texinfo is required for some experimental features of the 'help' tool.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/devtools/help.rst#2025-04-06_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\n$ sudo port install texinfo\n```\n\n----------------------------------------\n\nTITLE: Attempting to Use a Locally Defined Operator\nDESCRIPTION: Shows that operators defined locally in a source file are not globally visible, resulting in a syntax error.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/operators/NOTES.md#2025-04-06_snippet_7\n\nLANGUAGE: logtalk\nCODE:\n```\ngraph1::(N1 edge N2).\n```\n\n----------------------------------------\n\nTITLE: Declaring File Load Diagram Object in Logtalk\nDESCRIPTION: This snippet declares the file_load_diagram object in Logtalk, specifying its availability, author, version, and compilation flags. It also extends the file_load_diagram(dot) object.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/file_load_diagram_0.rst.txt#2025-04-06_snippet_0\n\nLANGUAGE: Logtalk\nCODE:\n```\nobject(file_load_diagram).\n\n:- use_module(logtalk).\n:- use_module(diagrams(loader)).\n\n:- info([\n    version is 2:1:0,\n    author is 'Paulo Moura',\n    date is 2019-06-13,\n    comment is 'Predicates for generating file loading dependency diagrams in DOT format.'\n]).\n\n:- set_logtalk_flag(static, on).\n:- set_logtalk_flag(context_switching_calls, allow).\n\n:- extends(public(file_load_diagram(dot))).\n```\n\n----------------------------------------\n\nTITLE: Loading Instance Variables Example in Logtalk\nDESCRIPTION: Loads the instance variables example module using the loader file.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/instvars/NOTES.md#2025-04-06_snippet_1\n\nLANGUAGE: logtalk\nCODE:\n```\nlogtalk_load(instvars(loader)).\n```\n\n----------------------------------------\n\nTITLE: Processing Single File with file/1 in Logtalk\nDESCRIPTION: A simplified version of file/2 that uses default options for processing a single Prolog file.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/wrapper_0.rst.txt#2025-04-06_snippet_9\n\nLANGUAGE: Logtalk\nCODE:\n```\nfile/1\n```\n\n----------------------------------------\n\nTITLE: Loading UUID Generator Object\nDESCRIPTION: Command to load the UUID generator object into Logtalk\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/uuid_0.rst.txt#2025-04-06_snippet_0\n\nLANGUAGE: prolog\nCODE:\n```\nlogtalk_load(uuid(loader))\n```\n\n----------------------------------------\n\nTITLE: Checking Logtalk and Prolog versions\nDESCRIPTION: Command to print the Logtalk, Prolog backend, and kernel versions when running in a notebook environment.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/named_databases/NOTES.md#2025-04-06_snippet_0\n\nLANGUAGE: logtalk\nCODE:\n```\n%versions\n```\n\n----------------------------------------\n\nTITLE: Processing Multiple Files with files/2 in Logtalk\nDESCRIPTION: Processes a list of Prolog files to advise on conversion to Logtalk objects using specified options.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/wrapper_0.rst.txt#2025-04-06_snippet_6\n\nLANGUAGE: Logtalk\nCODE:\n```\nfiles/2\n```\n\n----------------------------------------\n\nTITLE: Running Another Set of Specific Benchmark Tests\nDESCRIPTION: Executes specific benchmark tests with IDs s21, s22, and s23 with 1,000,000 repetitions each.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/benchmarks/NOTES.md#2025-04-06_snippet_8\n\nLANGUAGE: logtalk\nCODE:\n```\nbenchmarks::run(s21, 1000000), benchmarks::run(s22, 1000000), benchmarks::run(s23, 1000000).\n```\n\n----------------------------------------\n\nTITLE: Installing PowerShell Set-PsEnv Module\nDESCRIPTION: Command to install the Set-PsEnv module from PowerShell Gallery for virtual environment support.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/devtools/packs.rst#2025-04-06_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nPS> Install-Module -Name Set-PsEnv\n```\n\n----------------------------------------\n\nTITLE: Defining set_logtalk_flag/2 Directive in Logtalk\nDESCRIPTION: Specifies the template and modes for the set_logtalk_flag/2 directive, which is used to set local flag values in Logtalk entities or source files.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/refman/directives/set_logtalk_flag_2.rst#2025-04-06_snippet_0\n\nLANGUAGE: Logtalk\nCODE:\n```\nset_logtalk_flag(+atom, +nonvar)\n```\n\n----------------------------------------\n\nTITLE: Version Check in Logtalk\nDESCRIPTION: Command to print Logtalk, Prolog backend, and kernel versions when running in notebook mode.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/document_converter/NOTES.md#2025-04-06_snippet_1\n\nLANGUAGE: logtalk\nCODE:\n```\n%versions\n```\n\n----------------------------------------\n\nTITLE: Creating Predicate Aliases to Avoid Operator Conflicts\nDESCRIPTION: Using a predicate alias to resolve conflict between ECLiPSe IC Constraint Solver's (::)/2 domain operator and Logtalk's (::)/2 message-sending operator.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/userman/predicates.rst.txt#2025-04-06_snippet_59\n\nLANGUAGE: logtalk\nCODE:\n```\n:- use_module(ic, [(::)/2 as ins/2]).\n```\n\n----------------------------------------\n\nTITLE: Threaded Engine Predicates in Logtalk\nDESCRIPTION: Built-in predicates for working with threaded engines in Logtalk, including creation, destruction, and communication.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/coding/subethaedit2/Logtalk.mode/Contents/Resources/AutocompleteAdditions.txt#2025-04-06_snippet_9\n\nLANGUAGE: logtalk\nCODE:\n```\nthreaded_engine()\nthreaded_engine_create(, , )\nthreaded_engine_destroy()\nthreaded_engine_self()\nthreaded_engine_next(, )\nthreaded_engine_next_reified(, )\nthreaded_engine_yield()\nthreaded_engine_post(, )\nthreaded_engine_fetch()\n```\n\n----------------------------------------\n\nTITLE: Enumerating Circle Radius Alias Properties\nDESCRIPTION: Lists all the properties of the r/1 predicate alias for a circle object. This includes information about its aliasing, scope, and implementation details.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/aliases/NOTES.md#2025-04-06_snippet_7\n\nLANGUAGE: logtalk\nCODE:\n```\n%%table\ncircle(3)::predicate_property(r(_), Property).\n```\n\n----------------------------------------\n\nTITLE: Using Content Callback\nDESCRIPTION: Example of using the callback in HTML generation\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/libraries/html.rst#2025-04-06_snippet_9\n\nLANGUAGE: prolog\nCODE:\n```\n| ?- current_output(Stream),\n        html5::generate(stream(Stream), span(user::content)).\n```\n\n----------------------------------------\n\nTITLE: Expanding Goal Arguments in Directives\nDESCRIPTION: Change to expand goal arguments in initialization/1, if/1, and elif/1 directives inside entities using preceding uses/2 or use_module/2 directives.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/RELEASE_NOTES.md#2025-04-06_snippet_19\n\nLANGUAGE: Logtalk\nCODE:\n```\ninitialization(Goal).\nif(Goal).\nelif(Goal).\n```\n\n----------------------------------------\n\nTITLE: Defining RestructuredText Documentation Structure\nDESCRIPTION: A RestructuredText toctree directive that defines the documentation structure and hierarchy for the developer tools section, listing all available tools as separate documentation pages.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/devtools/index.rst#2025-04-06_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. toctree::\n   :maxdepth: 2\n\n   overview\n   asdf\n   assertions\n   code_metrics\n   dead_code_scanner\n   debug_messages\n   debugger\n   diagrams\n   doclet\n   help\n   issue_creator\n   lgtdoc\n   lgtunit\n   linter\n   make\n   packs\n   ports_profiler\n   profiler\n   tutor\n   wrapper\n```\n\n----------------------------------------\n\nTITLE: Alias Directive Usage Examples\nDESCRIPTION: Demonstrates practical examples of using alias directive to resolve predicate name conflicts and define alternative names for non-terminals.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/refman/directives/alias_2.rst#2025-04-06_snippet_2\n\nLANGUAGE: logtalk\nCODE:\n```\n% resolve a predicate name conflict:\n:- alias(list, [member/2 as list_member/2]).\n:- alias(set,  [member/2 as set_member/2]).\n\n% define an alternative name for a non-terminal:\n:- alias(words, [singular//0 as peculiar//0]).\n```\n\n----------------------------------------\n\nTITLE: Accessing Dictionary Parameters - Product\nDESCRIPTION: Shows accessing dictionary parameters to calculate product of m and n values\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/pardicts/NOTES.md#2025-04-06_snippet_3\n\nLANGUAGE: logtalk\nCODE:\n```\nobj(_{m:2,n:3})::product(Sum).\n```\n\n----------------------------------------\n\nTITLE: Conditional Issue Creation in CI/CD Pipeline\nDESCRIPTION: This shell command demonstrates how to conditionally enable or disable automatic bug report creation in a CI/CD pipeline based on an environment variable.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/tools/issue_creator/NOTES.md#2025-04-06_snippet_5\n\nLANGUAGE: Shell\nCODE:\n```\nlogtalk_tester.sh $AUTO_BUG_REPORTS -p ...\n```\n\n----------------------------------------\n\nTITLE: Defining repeat/0 Method in Logtalk\nDESCRIPTION: Basic syntax for the repeat/0 built-in method that provides infinite backtracking. Always succeeds when called and on backtracking with infinite choice-points.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/refman/methods/repeat_0.rst.txt#2025-04-06_snippet_0\n\nLANGUAGE: logtalk\nCODE:\n```\nrepeat\n```\n\n----------------------------------------\n\nTITLE: Installing d2 and Graphviz using MacPorts\nDESCRIPTION: Command to install the d2 and Graphviz diagram generation tools using the MacPorts package manager on macOS.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/devtools/diagrams.rst#2025-04-06_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ sudo port install d2 graphviz\n```\n\n----------------------------------------\n\nTITLE: Defining Events in Logtalk\nDESCRIPTION: Uses the define_events/5 predicate to create new events. If any argument is a free variable, it defines a set of matching events.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/userman/events.rst#2025-04-06_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n| ?- define_events(Event, Object, Message, Sender, Monitor).\n```\n\n----------------------------------------\n\nTITLE: Starting Logtalk with GNU Prolog\nDESCRIPTION: Command line example showing how to start Logtalk using GNU Prolog as the backend compiler on POSIX systems.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/userman/programming.rst#2025-04-06_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ gplgt\n...\n```\n\n----------------------------------------\n\nTITLE: Processing Multiple Directories with directories/1 in Logtalk\nDESCRIPTION: A simplified version of directories/2 that uses default options for processing Prolog files in multiple directories.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/wrapper_0.rst.txt#2025-04-06_snippet_5\n\nLANGUAGE: Logtalk\nCODE:\n```\ndirectories/1\n```\n\n----------------------------------------\n\nTITLE: Defining Predicate Modes and Proofs\nDESCRIPTION: Specifies the mode declaration for logtalk_make/1, indicating it takes an atom as input and returns zero or one solutions.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/refman/predicates/logtalk_make_1.rst#2025-04-06_snippet_1\n\nLANGUAGE: prolog\nCODE:\n```\nlogtalk_make(+atom) - zero_or_one\n```\n\n----------------------------------------\n\nTITLE: Starting Wumpus Adventure in Logtalk\nDESCRIPTION: Conditional statement to start the Hunt the Wumpus text adventure if not running in a Jupyter notebook environment.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/adventure/NOTES.md#2025-04-06_snippet_4\n\nLANGUAGE: logtalk\nCODE:\n```\n(current_object(jupyter) -> true; wumpus::main).\n```\n\n----------------------------------------\n\nTITLE: Dictionary Operations Example in Logtalk\nDESCRIPTION: Example demonstrating multiple dictionary operations: creating a new dictionary, inserting a key-value pair, updating a value for a key, and looking up a value.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/library/dictionaries/NOTES.md#2025-04-06_snippet_4\n\nLANGUAGE: prolog\nCODE:\n```\n| ?- avltree::(\n\t\tnew(Dictionary0),\n\t\tinsert(Dictionary0, a, 1, Dictionary1),\n\t\tupdate(Dictionary1, a, 2, Dictionary2),\n\t\tlookup(a, Value, Dictionary2)\n\t).\nDictionary0 = ...,\nDictionary1 = ...,\nDictionary2 = ...,\nValue = 2\nyes\n```\n\n----------------------------------------\n\nTITLE: Implementing before/3 Method in Logtalk Object\nDESCRIPTION: This example demonstrates how to implement the before/3 method in a Logtalk object. It writes a log message when a message is sent, including the object, message, and sender details.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/refman/methods/before_3.rst.txt#2025-04-06_snippet_1\n\nLANGUAGE: Logtalk\nCODE:\n```\n:- object(...,\n    implements(monitoring),\n    ...).\n\n    % write a log message when a message is sent:\n    before(Object, Message, Sender) :-\n        writeq(Object), write('::'), writeq(Message),\n        write(' from '), writeq(Sender), nl.\n```\n\n----------------------------------------\n\nTITLE: Resetting Debugger Settings in Logtalk\nDESCRIPTION: Resets all debugging settings including breakpoints, log points, and leashed ports, and turns off debugging.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/debuggerp_0.rst.txt#2025-04-06_snippet_0\n\nLANGUAGE: Logtalk\nCODE:\n```\nreset/0\n```\n\n----------------------------------------\n\nTITLE: Using flaky/0 test option in lgtunit\nDESCRIPTION: Example of using the new flaky/0 test option in lgtunit for declaring flaky tests.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/RELEASE_NOTES.md#2025-04-06_snippet_9\n\nLANGUAGE: Logtalk\nCODE:\n```\ntest(flaky_test, [flaky]) :- ...\n```\n\n----------------------------------------\n\nTITLE: ReStructuredText Database Methods Navigation\nDESCRIPTION: ReStructuredText markup defining the database methods documentation structure with a table of contents linking to individual method documentation pages.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/refman/methods/database_methods.rst#2025-04-06_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. _database_methods:\n\nDatabase\n========\n\n.. toctree::\n   :maxdepth: 1\n\n   abolish_1\n   asserta_1\n   assertz_1\n   clause_2\n   retract_1\n   retractall_1\n```\n\n----------------------------------------\n\nTITLE: Defining Control Structures in Logtalk\nDESCRIPTION: Basic control structures for conditional execution and loops in Logtalk. These include if-elif-else statements and object definitions with various parameters.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/coding/subethaedit2/Logtalk.mode/Contents/Resources/AutocompleteAdditions.txt#2025-04-06_snippet_0\n\nLANGUAGE: logtalk\nCODE:\n```\nif()\nelif()\nelse\nendif\nobject(, , , , ).\nobject(, , , ).\nobject(, , ).\nobject(, ).\nobject().\n```\n\n----------------------------------------\n\nTITLE: Examples of Synchronized Directive Usage in Logtalk\nDESCRIPTION: These examples demonstrate different ways to use the synchronized directive in Logtalk. It includes declaring a single predicate, multiple predicates in a tuple, and multiple predicates in a list.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/refman/directives/synchronized_1.rst#2025-04-06_snippet_1\n\nLANGUAGE: Logtalk\nCODE:\n```\n:- synchronized(db_update/1).\n\n:- synchronized((write_stream/2, read_stream/2)).\n\n:- synchronized([add_to_queue/2, remove_from_queue/2]).\n```\n\n----------------------------------------\n\nTITLE: Directory Scanning in Logtalk\nDESCRIPTION: Method to scan all entities in all loaded files from a specified directory for dead code using given options.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/dead_code_scanner_0.rst.txt#2025-04-06_snippet_2\n\nLANGUAGE: logtalk\nCODE:\n```\ndirectory(Directory,Options)\n```\n\n----------------------------------------\n\nTITLE: Make Functionality Shortcuts in Logtalk\nDESCRIPTION: Documents the shortcut syntax for Logtalk's make functionality including reloading modified files, cleaning intermediate files, and checking for missing or circular dependencies.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/faq/usability.rst.txt#2025-04-06_snippet_2\n\nLANGUAGE: logtalk\nCODE:\n```\n{*}    % shortcut for logtalk_make(all)\n{!}    % shortcut for logtalk_make(clean)\n{?}    % shortcut for logtalk_make(missing)\n{@}    % shortcut for logtalk_make(circular)\n```\n\n----------------------------------------\n\nTITLE: Implementing before/3 Method in Logtalk Object\nDESCRIPTION: This example demonstrates how to implement the before/3 method in a Logtalk object. It writes a log message when a message is sent, including the object, message, and sender details.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/refman/methods/before_3.rst.txt#2025-04-06_snippet_1\n\nLANGUAGE: Logtalk\nCODE:\n```\n:- object(...,\n    implements(monitoring),\n    ...).\n\n    % write a log message when a message is sent:\n    before(Object, Message, Sender) :-\n        writeq(Object), write('::'), writeq(Message),\n        write(' from '), writeq(Sender), nl.\n```\n\n----------------------------------------\n\nTITLE: Binary Output Assertion Direct\nDESCRIPTION: Creates an assertion to verify binary contents of current temporary file.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/lgtunit_0.rst.txt#2025-04-06_snippet_61\n\nLANGUAGE: logtalk\nCODE:\n```\nbinary_output_assertion(Bytes,Assertion)\n```\n\n----------------------------------------\n\nTITLE: Setting Logtalk Clean Flag Example\nDESCRIPTION: Example of setting the clean flag to off using a Logtalk query, which prevents deletion of intermediate Prolog files generated during compilation.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/userman/programming.rst.txt#2025-04-06_snippet_18\n\nLANGUAGE: text\nCODE:\n```\n| ?- set_logtalk_flag(clean, off).\n```\n\n----------------------------------------\n\nTITLE: Internal Implementation of evaluation_error/1 in Logtalk\nDESCRIPTION: Shows the equivalent implementation of the evaluation_error/1 method, which retrieves the current context and throws a standardized error term.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/refman/methods/evaluation_error_1.rst#2025-04-06_snippet_1\n\nLANGUAGE: logtalk\nCODE:\n```\n...,\ncontext(Context),\nthrow(error(evaluation_error(Error), Context)).\n```\n\n----------------------------------------\n\nTITLE: Generating Version 1 UUID as Character Codes in Logtalk\nDESCRIPTION: Demonstrates generating a version 1 UUID represented as a list of character codes using the uuid(codes) parametric object. This representation is useful for low-level processing.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/library/uuid/NOTES.md#2025-04-06_snippet_4\n\nLANGUAGE: logtalk\nCODE:\n```\n| ?- uuid(codes)::uuid_v1([0xf2,0xd1,0x90,0x94,0xdc,0x4b], UUID).\nUUID = [48,48,52,99,99,54,99,48,45,56,50,99,102,45,49,49,101,98,45,\n        98,57,102,52,45,102,50,100,49,57,48,57,52,100,99,52,98]\nyes\n```\n\n----------------------------------------\n\nTITLE: Generating Version 1 UUID as Character Codes in Logtalk\nDESCRIPTION: Demonstrates generating a version 1 UUID represented as a list of character codes using the uuid(codes) parametric object. This representation is useful for low-level processing.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/library/uuid/NOTES.md#2025-04-06_snippet_4\n\nLANGUAGE: logtalk\nCODE:\n```\n| ?- uuid(codes)::uuid_v1([0xf2,0xd1,0x90,0x94,0xdc,0x4b], UUID).\nUUID = [48,48,52,99,99,54,99,48,45,56,50,99,102,45,49,49,101,98,45,\n        98,57,102,52,45,102,50,100,49,57,48,57,52,100,99,52,98]\nyes\n```\n\n----------------------------------------\n\nTITLE: Usage Example\nDESCRIPTION: Example showing how to throw a representation error when a character code exceeds the valid range.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/refman/methods/representation_error_1.rst#2025-04-06_snippet_2\n\nLANGUAGE: prolog\nCODE:\n```\n...,\nCode > 127,\nrepresentation_error(character_code).\n```\n\n----------------------------------------\n\nTITLE: RST Table of Contents for Logic Control Methods\nDESCRIPTION: ReStructuredText markup defining the table of contents for logic and control method documentation, listing fundamental predicates.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/refman/methods/logic_and_control_methods.rst.txt#2025-04-06_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. toctree::\n   :maxdepth: 1\n\n   cut_0\n   true_0\n   fail_0\n   false_0\n   repeat_0\n```\n\n----------------------------------------\n\nTITLE: Tracking Referenced Entities in Logtalk Diagram\nDESCRIPTION: Dynamic predicate maintaining a table of referenced Logtalk entities in the diagram, including the referencer and the referenced entity.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/entity_diagram_1.rst.txt#2025-04-06_snippet_4\n\nLANGUAGE: Logtalk\nCODE:\n```\nreferenced_entity_(Referencer,Entity)\n```\n\n----------------------------------------\n\nTITLE: Running a Specific Benchmark Test in Logtalk\nDESCRIPTION: This snippet runs only the 'primes' benchmark test with a specified number of iterations (10) using the mtbatch module.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/threads/mtbatch/NOTES.md#2025-04-06_snippet_4\n\nLANGUAGE: logtalk\nCODE:\n```\nmtbatch::run(primes, 10).\n```\n\n----------------------------------------\n\nTITLE: Handling newly asserted predicate in class object\nDESCRIPTION: Demonstrates that the newly asserted predicate p2/1 is not available for the class object itself.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/dynpred/NOTES.md#2025-04-06_snippet_8\n\nLANGUAGE: logtalk\nCODE:\n```\ncatch(class::p2(Value), Error, true).\n```\n\n----------------------------------------\n\nTITLE: Compiled Test Table in Logtalk Unit Testing\nDESCRIPTION: Dynamic table storing compiled tests with their identifiers and implementations.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/lgtunit_0.rst.txt#2025-04-06_snippet_75\n\nLANGUAGE: Logtalk\nCODE:\n```\ntest_(Identifier,Test)\n```\n\n----------------------------------------\n\nTITLE: Creating a Dictionary from Key-Value Pairs\nDESCRIPTION: Example of creating a dictionary from a list of key-value pairs using the as_dictionary/2 predicate.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/library/dictionaries/NOTES.md#2025-04-06_snippet_3\n\nLANGUAGE: prolog\nCODE:\n```\n| ?- avltree::as_dictionary([a-1,c-3,b-2], Dictionary).\nDictionary = ...\nyes\n```\n\n----------------------------------------\n\nTITLE: Querying Unicode Arabic Shaping\nDESCRIPTION: Example of using the unicode_arabic_shaping/4 predicate provided by the unicode_arabic_shaping.pl file.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/libraries/unicode_data.rst#2025-04-06_snippet_2\n\nLANGUAGE: Prolog\nCODE:\n```\n?- unicode_arabic_shaping(CodePoint, JoiningType, JoiningGroup, Shape).\n```\n\n----------------------------------------\n\nTITLE: Loading JSON Library in Logtalk\nDESCRIPTION: Demonstrates how to load all entities in the JSON library using the loader.lgt file.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/libraries/json.rst.txt#2025-04-06_snippet_0\n\nLANGUAGE: Prolog\nCODE:\n```\n| ?- logtalk_load(json(loader)).\n```\n\n----------------------------------------\n\nTITLE: Parametric Delegation with Non-Implementing Delegate\nDESCRIPTION: Shows parametric object implementation with a non-implementing delegate.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/delegates/NOTES.md#2025-04-06_snippet_5\n\nLANGUAGE: logtalk\nCODE:\n```\na_delegator(an_object)::operation(String).\n```\n\n----------------------------------------\n\nTITLE: Referenced Logtalk Directory Dynamic Predicate - referenced_logtalk_directory_/1\nDESCRIPTION: Dynamic predicate that maintains a table of referenced Logtalk directories in the diagram. Allows querying of stored paths.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/directory_diagram_1.rst.txt#2025-04-06_snippet_4\n\nLANGUAGE: logtalk\nCODE:\n```\nreferenced_logtalk_directory_(?atom)\n```\n\n----------------------------------------\n\nTITLE: Computing Scratchcard Points (Part 1) in Logtalk\nDESCRIPTION: Retrieves the directory of the scratchcards object, constructs the path to the sample test file, and calculates the points for part 1 of the problem.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/scratchcards/NOTES.md#2025-04-06_snippet_2\n\nLANGUAGE: logtalk\nCODE:\n```\nobject_property(scratchcards, file(_, Directory)),\natom_concat(Directory, 'test_files/sample', File),\nscratchcards::points(File, Points).\n```\n\n----------------------------------------\n\nTITLE: Creating a Specific Dynamic Protocol in Logtalk\nDESCRIPTION: Demonstrates creating a specific dynamic protocol 'ppp' that extends 'qqq' and declares two public predicates.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/userman/protocols.rst.txt#2025-04-06_snippet_4\n\nLANGUAGE: prolog\nCODE:\n```\n| ?- create_protocol(ppp, [extends(qqq)], [public([foo/1, bar/1])]).\n```\n\n----------------------------------------\n\nTITLE: Create Protocol Mode Declaration\nDESCRIPTION: Specifies the mode declaration for create_protocol/3, indicating parameter types and number of proofs.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/refman/predicates/create_protocol_3.rst.txt#2025-04-06_snippet_1\n\nLANGUAGE: prolog\nCODE:\n```\ncreate_protocol(?protocol_identifier, @list(protocol_relation), @list(protocol_directive)) - one\n```\n\n----------------------------------------\n\nTITLE: Loading Entity Diagram Object in Logtalk\nDESCRIPTION: Command to load the entity_diagram object in Logtalk. This is required to use the functionality for generating entity diagrams.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/entity_diagram_0.rst.txt#2025-04-06_snippet_0\n\nLANGUAGE: Logtalk\nCODE:\n```\nlogtalk_load(diagrams(loader))\n```\n\n----------------------------------------\n\nTITLE: Declaring a Dynamic Protocol in Logtalk\nDESCRIPTION: Demonstrates how to declare a protocol as dynamic using the dynamic/0 directive in the protocol source code.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/userman/protocols.rst.txt#2025-04-06_snippet_6\n\nLANGUAGE: logtalk\nCODE:\n```\n:- dynamic.\n```\n\n----------------------------------------\n\nTITLE: Testing Code Metrics Tool in Logtalk\nDESCRIPTION: Command to load and run tests for the code metrics tool.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/devtools/code_metrics.rst.txt#2025-04-06_snippet_1\n\nLANGUAGE: logtalk\nCODE:\n```\n| ?- logtalk_load(code_metrics(tester)).\n```\n\n----------------------------------------\n\nTITLE: Loading Options Library in Logtalk\nDESCRIPTION: Command to load all entities in the options library using the loader utility file.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/libraries/options.rst.txt#2025-04-06_snippet_0\n\nLANGUAGE: prolog\nCODE:\n```\n| ?- logtalk_load(options(loader)).\n```\n\n----------------------------------------\n\nTITLE: Modifying a Class Variable Through One Instance\nDESCRIPTION: Updates the class variable through one instance, setting its value to 1.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/classvars/NOTES.md#2025-04-06_snippet_3\n\nLANGUAGE: logtalk\nCODE:\n```\ninstance1::set_cv(1).\n```\n\n----------------------------------------\n\nTITLE: Configuring Taglist Plugin for Logtalk Source Browsing\nDESCRIPTION: Configuration entry for the Taglist plugin to enable source code browsing for Logtalk files with proper categorization of code elements.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/coding/vim/NOTES.md#2025-04-06_snippet_2\n\nLANGUAGE: vim\nCODE:\n```\nlet tlist_logtalk_settings = 'logtalk;o:Objects;p:Protocols;c:Categories;m:Modules;u:Public predicates;r:Protected predicates;v:Private predicates'\n```\n\n----------------------------------------\n\nTITLE: Loading the Family Example in Logtalk\nDESCRIPTION: Loads the family example module using the Logtalk loader predicate.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/family/NOTES.md#2025-04-06_snippet_1\n\nLANGUAGE: logtalk\nCODE:\n```\nlogtalk_load(family(loader)).\n```\n\n----------------------------------------\n\nTITLE: Solving Towers of Hanoi with Eight Threads in Logtalk\nDESCRIPTION: Solves the Towers of Hanoi problem for 24 disks using eight threads and measures the execution time.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/threads/hanoi/NOTES.md#2025-04-06_snippet_5\n\nLANGUAGE: logtalk\nCODE:\n```\ntime(hanoi(8)::run(24)).\n```\n\n----------------------------------------\n\nTITLE: Confirming Predicate Inlining\nDESCRIPTION: Checks if the 'between/3' predicate is inlined by querying the predicate properties of 'a/2'.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/inlining/NOTES.md#2025-04-06_snippet_2\n\nLANGUAGE: logtalk\nCODE:\n```\ninlining::predicate_property(a(_,_), inline).\n```\n\n----------------------------------------\n\nTITLE: Processing Single Directory with directory/2 in Logtalk\nDESCRIPTION: Processes all Prolog files in a single directory (non-recursively) to advise on conversion to Logtalk objects using specified options.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/wrapper_0.rst.txt#2025-04-06_snippet_2\n\nLANGUAGE: Logtalk\nCODE:\n```\ndirectory/2\n```\n\n----------------------------------------\n\nTITLE: Checking Extended Object Protocol\nDESCRIPTION: Retrieves all predicates of the employee object after complementation, showing added functionality.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/complements/allow/NOTES.md#2025-04-06_snippet_10\n\nLANGUAGE: logtalk\nCODE:\n```\nemployee::predicates(Predicates).\n```\n\n----------------------------------------\n\nTITLE: Example Requirements File Format for Virtual Environments\nDESCRIPTION: Sample content of a requirements file showing the format used to define registries and packs for a virtual environment setup.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/devtools/packs.rst.txt#2025-04-06_snippet_12\n\nLANGUAGE: prolog\nCODE:\n```\nregistry(talkshow, 'https://github.com/LogtalkDotOrg/talkshow.git').\npack(talkshow, logtalk, 3:45:0).\npack(talkshow, lflat, 2:1:0).\n```\n\n----------------------------------------\n\nTITLE: Value Access and Fallback Predicates\nDESCRIPTION: Predicates for accessing optional term values with fallback options\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/optional_1.rst.txt#2025-04-06_snippet_3\n\nLANGUAGE: logtalk\nCODE:\n```\nget(Value)\nor_else(Value,Default)\nor_else_get(Value,Closure)\nor_else_call(Value,Goal)\nor_else_fail(Value)\nor_else_throw(Value,Error)\n```\n\n----------------------------------------\n\nTITLE: Object Definition with Explicit Public Scope\nDESCRIPTION: Example showing object definition with explicit public scope keyword when importing a category. The public scope keyword is explicitly declared in the imports directive.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/userman/inheritance.rst#2025-04-06_snippet_5\n\nLANGUAGE: logtalk\nCODE:\n```\n:- object(Object,\n    imports(public::Category)).\n\n    ...\n\n:- end_object.\n```\n\n----------------------------------------\n\nTITLE: Printing Logtalk, Prolog Backend, and Kernel Versions\nDESCRIPTION: This command prints the versions of Logtalk, the Prolog backend, and the kernel if running in a Jupyter notebook environment.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/ncl/free_nodes/NOTES.md#2025-04-06_snippet_0\n\nLANGUAGE: logtalk\nCODE:\n```\n%versions\n```\n\n----------------------------------------\n\nTITLE: Configuring URL Prefixes for IDEA in Logtalk Diagrams\nDESCRIPTION: Sets the URL code prefix for generating local links to open files and directories in IDEA when creating Logtalk diagrams.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/tools/diagrams/NOTES.md#2025-04-06_snippet_14\n\nLANGUAGE: prolog\nCODE:\n```\nurl_prefixes('idea://open?file=', DocPrefix)\n```\n\n----------------------------------------\n\nTITLE: Testing the Java Library in Logtalk\nDESCRIPTION: Command to test the Java library predicates by loading the tester.lgt file.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/library/java/NOTES.md#2025-04-06_snippet_1\n\nLANGUAGE: prolog\nCODE:\n```\n| ?- logtalk_load(java(tester)).\n```\n\n----------------------------------------\n\nTITLE: Loading a Logtalk Library\nDESCRIPTION: Demonstrates how to load a Logtalk library using the logtalk_load/1 predicate. This is the recommended way to load any library, including developer tools, ports, and contributions.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/library_index.rst.txt#2025-04-06_snippet_0\n\nLANGUAGE: Prolog\nCODE:\n```\nlogtalk_load(library_name(loader))\n```\n\n----------------------------------------\n\nTITLE: New Predicate in types Library\nDESCRIPTION: Added new predicate integer::sequence/4 to the types library.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/RELEASE_NOTES.md#2025-04-06_snippet_24\n\nLANGUAGE: Logtalk\nCODE:\n```\ninteger::sequence(Start, End, Step, Sequence).\n```\n\n----------------------------------------\n\nTITLE: Sender Method Mode Declaration\nDESCRIPTION: Mode declaration showing that the sender/1 method takes an object identifier argument that can be input or output, with zero or one possible solutions.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/refman/methods/sender_1.rst#2025-04-06_snippet_1\n\nLANGUAGE: logtalk\nCODE:\n```\nsender(?object_identifier) - zero_or_one\n```\n\n----------------------------------------\n\nTITLE: Defining Mode and Determinism for logtalk_linter_hook/7 in Logtalk\nDESCRIPTION: Specification of the mode declaration and determinism property for the logtalk_linter_hook/7 predicate. This indicates the expected instantiation patterns of arguments and that the predicate provides zero or one solution.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/refman/predicates/logtalk_linter_hook_7.rst.txt#2025-04-06_snippet_1\n\nLANGUAGE: prolog\nCODE:\n```\nlogtalk_linter_hook(@callable, +atom, +atom, +pair(integer), +atom, @object_identifier, --callable) - zero_or_one\n```\n\n----------------------------------------\n\nTITLE: Defining the else/0 Directive in Logtalk\nDESCRIPTION: Specifies the syntax for the 'else' directive in Logtalk, which is used to start an else branch in conditional compilation. The code following this directive is compiled if the goal in the matching 'if' or 'elif' directive is false.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/refman/directives/else_0.rst#2025-04-06_snippet_0\n\nLANGUAGE: Logtalk\nCODE:\n```\nelse\n```\n\n----------------------------------------\n\nTITLE: Pre-formatted Text Element in Logtalk HTML\nDESCRIPTION: Example demonstrating pre element content handling where content is never interpreted as nested elements.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/library/html/NOTES.md#2025-04-06_snippet_1\n\nLANGUAGE: prolog\nCODE:\n```\npre([foo,bar,baz])\n```\n\n----------------------------------------\n\nTITLE: Demonstrating New Meta-Messages in Logtalk\nDESCRIPTION: Examples of the new meta-messages added to Logtalk's message printing mechanism. These allow calling user-defined printing goals with stream and prefix information.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/RELEASE_NOTES.md#2025-04-06_snippet_10\n\nLANGUAGE: Logtalk\nCODE:\n```\n[Stream,Prefix]>>Goal\n[Stream]>>Goal\n```\n\n----------------------------------------\n\nTITLE: Testing piped hook object with c(key-value)\nDESCRIPTION: Shows the use of a piped hook object with a third key-value pair.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/expansion/NOTES.md#2025-04-06_snippet_19\n\nLANGUAGE: logtalk\nCODE:\n```\npiped<<c(key-value).\n```\n\n----------------------------------------\n\nTITLE: Creating Empty Nested Dictionary in Logtalk\nDESCRIPTION: Example of creating a new empty nested dictionary using the new/1 predicate with the navltree implementation.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/libraries/nested_dictionaries.rst#2025-04-06_snippet_2\n\nLANGUAGE: logtalk\nCODE:\n```\n| ?- navltree::new(Dictionary).\nDictionary = ...\nyes\n```\n\n----------------------------------------\n\nTITLE: Setting EDCG Hook Flag in Source Files\nDESCRIPTION: Demonstrates how to add a directive at the beginning of a source file to use the EDCG hook.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/libraries/edcg.rst.txt#2025-04-06_snippet_1\n\nLANGUAGE: prolog\nCODE:\n```\n:- set_logtalk_flag(hook, edcg).\n```\n\n----------------------------------------\n\nTITLE: Converting XML Documentation to HTML in Bash\nDESCRIPTION: Shows the shell commands to convert generated XML documentation to HTML format.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/devtools/packs.rst.txt#2025-04-06_snippet_36\n\nLANGUAGE: bash\nCODE:\n```\n$ cd xml_docs\n$ lgt2html\n```\n\n----------------------------------------\n\nTITLE: Checking Versions in Logtalk\nDESCRIPTION: Prints the Logtalk, Prolog backend, and kernel versions when running in a notebook environment.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/family/NOTES.md#2025-04-06_snippet_0\n\nLANGUAGE: logtalk\nCODE:\n```\n%versions\n```\n\n----------------------------------------\n\nTITLE: Generating XML documentation for entities in current directory for PDF conversion\nDESCRIPTION: Example of using directory/2 predicate to generate XML documentation for all entities in the current directory using a custom XSLT file for later conversion to PDF A4 files.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/lgtdocp_0.rst.txt#2025-04-06_snippet_5\n\nLANGUAGE: logtalk\nCODE:\n```\ndirectory('.',[xslfile('logtalk_entity_to_pdf_a4.xsl')])\n```\n\n----------------------------------------\n\nTITLE: Loading Help Tool in Logtalk\nDESCRIPTION: Command to load the help tool into the Logtalk environment.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/devtools/help.rst.txt#2025-04-06_snippet_0\n\nLANGUAGE: prolog\nCODE:\n```\n| ?- logtalk_load(help(loader)).\n```\n\n----------------------------------------\n\nTITLE: Example: Conditional Predicate Definition in Logtalk\nDESCRIPTION: Demonstrates using if/1 to conditionally define a predicate (length/2) if it doesn't already exist as a built-in predicate in the Prolog backend.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/refman/directives/if_1.rst#2025-04-06_snippet_2\n\nLANGUAGE: logtalk\nCODE:\n```\n:- if(\\+ predicate_property(length(_,_), built_in)).\n\n    length(List, Length) :-\n        ...\n\n:- endif.\n```\n\n----------------------------------------\n\nTITLE: Threaded Wait Predicate Modes in Logtalk\nDESCRIPTION: Specifies the valid modes and number of proofs for the threaded_wait/1 predicate, supporting both single terms and lists of terms.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/refman/predicates/threaded_wait_1.rst#2025-04-06_snippet_1\n\nLANGUAGE: logtalk\nCODE:\n```\nthreaded_wait(?term) - one\nthreaded_wait(+list(term)) - one\n```\n\n----------------------------------------\n\nTITLE: Loading FCube Prover in Logtalk\nDESCRIPTION: Command to load all entities in the FCube prover port using the loader file.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/ports/fcube/NOTES.md#2025-04-06_snippet_0\n\nLANGUAGE: Prolog\nCODE:\n```\n| ?- logtalk_load(fcube(loader)).\n```\n\n----------------------------------------\n\nTITLE: Rewriting Prolog comment directive to Logtalk info directive in Prolog\nDESCRIPTION: This code snippet demonstrates how to rewrite a Prolog 'comment/2' directive into a Logtalk 'info/2' directive using the '$lgt_prolog_term_expansion'/2 predicate. It converts the string description to an atom.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/userman/migration.rst.txt#2025-04-06_snippet_7\n\nLANGUAGE: prolog\nCODE:\n```\n'$lgt_prolog_term_expansion'(\n        (:- comment(F/A, String)),\n        (:- info(F/A, [comment is Atom]))\n) :-\n    atom_codes(Atom, String).\n```\n\n----------------------------------------\n\nTITLE: Message Mode Specification\nDESCRIPTION: Specifies the mode and number of proofs for the message sending construct.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/refman/control/send_to_self_1.rst.txt#2025-04-06_snippet_1\n\nLANGUAGE: logtalk\nCODE:\n```\n::+callable - zero_or_more\n```\n\n----------------------------------------\n\nTITLE: Specifying Modes for threaded_engine_next_reified/2 in Logtalk\nDESCRIPTION: Specifies the modes and number of proofs for the threaded_engine_next_reified/2 predicate. It expects a non-variable Engine and can unify Answer with a non-variable term.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/refman/predicates/threaded_engine_next_reified_2.rst.txt#2025-04-06_snippet_1\n\nLANGUAGE: Prolog\nCODE:\n```\nthreaded_engine_next_reified(@nonvar, ?nonvar) - one\n```\n\n----------------------------------------\n\nTITLE: Domain Error Mode Declaration\nDESCRIPTION: Specifies the mode declaration for the domain_error method, indicating argument types and behavior.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/refman/methods/domain_error_2.rst#2025-04-06_snippet_2\n\nLANGUAGE: prolog\nCODE:\n```\ndomain_error(+atom, @nonvar) - error\n```\n\n----------------------------------------\n\nTITLE: Signing Pack Archives with GPG\nDESCRIPTION: Commands for signing pack archives using GPG to create detached signatures in .asc or .sig format\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/devtools/packs.rst.txt#2025-04-06_snippet_20\n\nLANGUAGE: shell\nCODE:\n```\n$ gpg --armor --detach-sign v1.0.0.tar.gz\n```\n\nLANGUAGE: shell\nCODE:\n```\n$ gpg --detach-sign v1.0.0.tar.gz\n```\n\n----------------------------------------\n\nTITLE: Running the Benchmark with a Baseline Case in Logtalk\nDESCRIPTION: Example of running the benchmark predicate with a true goal to establish a baseline for timing measurements in Logtalk.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/userman/messages.rst.txt#2025-04-06_snippet_11\n\nLANGUAGE: text\nCODE:\n```\n| ?- benchmark(true).\n```\n\n----------------------------------------\n\nTITLE: Processing Logtalk Library\nDESCRIPTION: Processes a library of source files using the given options. It has a static compilation flag and accepts a library name and list of options as arguments.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/code_metric_0.rst.txt#2025-04-06_snippet_2\n\nLANGUAGE: Logtalk\nCODE:\n```\nprocess_library(Library,Options)\n```\n\n----------------------------------------\n\nTITLE: Threaded Engine Destroy Predicate Definition\nDESCRIPTION: Core predicate definition showing the syntax for destroying a threaded engine.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/refman/predicates/threaded_engine_destroy_1.rst#2025-04-06_snippet_0\n\nLANGUAGE: prolog\nCODE:\n```\nthreaded_engine_destroy(Engine)\n```\n\n----------------------------------------\n\nTITLE: Starting Logtalk with ECLiPSe\nDESCRIPTION: PowerShell command example showing how to start Logtalk using ECLiPSe as the backend compiler on Windows.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/userman/programming.rst#2025-04-06_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nPS> eclipselgt.ps1\n...\n```\n\n----------------------------------------\n\nTITLE: Example of Using threaded_engine_post/2 in Logtalk\nDESCRIPTION: Demonstrates how to use the threaded_engine_post/2 predicate to post the atom 'ready' to the worker_1 engine queue.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/refman/predicates/threaded_engine_post_2.rst#2025-04-06_snippet_2\n\nLANGUAGE: logtalk\nCODE:\n```\n% post the atom \"ready\" to the worker_1 engine queue:\n| ?- threaded_engine_post(worker_1, ready).\n```\n\n----------------------------------------\n\nTITLE: Typical Porting Workflow Using Wrapper Tool\nDESCRIPTION: This snippet demonstrates the typical workflow for porting Prolog code to Logtalk using the wrapper tool. It includes wrapping a directory of Prolog code and saving the generated wrapper objects.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/devtools/wrapper.rst.txt#2025-04-06_snippet_1\n\nLANGUAGE: Prolog\nCODE:\n```\n| ?- wrapper::rdirectory(root_directory_of_prolog_code).\n...\n| ?- wrapper::save.\n...\n```\n\n----------------------------------------\n\nTITLE: Typical Porting Workflow Using Wrapper Tool\nDESCRIPTION: This snippet demonstrates the typical workflow for porting Prolog code to Logtalk using the wrapper tool. It includes wrapping a directory of Prolog code and saving the generated wrapper objects.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/devtools/wrapper.rst.txt#2025-04-06_snippet_1\n\nLANGUAGE: Prolog\nCODE:\n```\n| ?- wrapper::rdirectory(root_directory_of_prolog_code).\n...\n| ?- wrapper::save.\n...\n```\n\n----------------------------------------\n\nTITLE: Defining Dynamic Predicate for Enabled Triggered Breakpoints in Logtalk\nDESCRIPTION: Defines a dynamic predicate 'triggered_breakpoint_enabled_/2' that represents a table of enabled triggered breakpoints. It takes entity and line as arguments.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/debugger_0.rst.txt#2025-04-06_snippet_17\n\nLANGUAGE: Logtalk\nCODE:\n```\ntriggered_breakpoint_enabled_/2\n```\n\n----------------------------------------\n\nTITLE: Loading the instmethods example in Logtalk\nDESCRIPTION: This snippet loads the instmethods example using the Logtalk load predicate.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/instmethods/NOTES.md#2025-04-06_snippet_1\n\nLANGUAGE: logtalk\nCODE:\n```\nlogtalk_load(instmethods(loader)).\n```\n\n----------------------------------------\n\nTITLE: Specifying throw/1 Method Mode in Logtalk/Prolog\nDESCRIPTION: Defines the mode declaration for the throw/1 method. It requires a non-variable term as input and always results in an error condition when executed.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/refman/methods/throw_1.rst#2025-04-06_snippet_1\n\nLANGUAGE: prolog\nCODE:\n```\nthrow(+nonvar) - error\n```\n\n----------------------------------------\n\nTITLE: Testing Dictionaries Library in Logtalk\nDESCRIPTION: Command to load and run tests for the dictionaries library using the tester file.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/library/dictionaries/NOTES.md#2025-04-06_snippet_1\n\nLANGUAGE: prolog\nCODE:\n```\n| ?- logtalk_load(dictionaries(tester)).\n```\n\n----------------------------------------\n\nTITLE: Windows Chocolatey Installation - PowerShell\nDESCRIPTION: PowerShell commands for installing tool dependencies using Chocolatey package manager on Windows.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/devtools/overview.rst#2025-04-06_snippet_6\n\nLANGUAGE: powershell\nCODE:\n```\n> choco install pandoc xsltproc\n> choco install d2 graphviz\n> choco install xsltproc apache-fop texlive\n> choco install gnupg git\n> choco install gh glab\n> choco install wget\n> choco install sed\n```\n\n----------------------------------------\n\nTITLE: Defining Dynamic Sub-Diagram Predicate in Logtalk\nDESCRIPTION: Defines a dynamic predicate sub_diagram_/1 that maintains a table of library sub-diagrams. This predicate supports the generation of library dependency diagrams with atom arguments.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/library_load_diagram_1.rst.txt#2025-04-06_snippet_0\n\nLANGUAGE: logtalk\nCODE:\n```\nsub_diagram_/1\n```\n\n----------------------------------------\n\nTITLE: Loading the Ping-Pong Example in Logtalk\nDESCRIPTION: Loads the ping_pong module using the Logtalk loader, which sets up the necessary objects and predicates for the example.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/threads/ping_pong/NOTES.md#2025-04-06_snippet_1\n\nLANGUAGE: logtalk\nCODE:\n```\nlogtalk_load(ping_pong(loader)).\n```\n\n----------------------------------------\n\nTITLE: Asserting new predicate in class object\nDESCRIPTION: Shows how to assert a new predicate p2/1 in the class object, which implicitly declares it as dynamic.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/dynpred/NOTES.md#2025-04-06_snippet_7\n\nLANGUAGE: logtalk\nCODE:\n```\nclass::assertz(p2(class)).\n```\n\n----------------------------------------\n\nTITLE: Defining Message-Sending Operators in Logtalk\nDESCRIPTION: Declares operators used for message-sending control constructs in Logtalk. These operators remain active for the duration of the Prolog session and are compatible with ISO Prolog standards.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/userman/messages.rst#2025-04-06_snippet_0\n\nLANGUAGE: Logtalk\nCODE:\n```\n:- op(600, xfy, ::).\n:- op(600,  fy, ::).\n:- op(600,  fy, ^^).\n```\n\n----------------------------------------\n\nTITLE: Defining Quick Check Test Options in Logtalk\nDESCRIPTION: Specifies options for verbose test generation and progress bar display when using Quick Check tests.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/lgtunit_0.rst.txt#2025-04-06_snippet_13\n\nLANGUAGE: logtalk\nCODE:\n```\nv(Boolean)\n```\n\nLANGUAGE: logtalk\nCODE:\n```\npb(Boolean,Tick)\n```\n\n----------------------------------------\n\nTITLE: Print Message Tokens Method Signature\nDESCRIPTION: Method signature showing the structure and parameters for the print_message_tokens/3 built-in method.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/refman/methods/print_message_tokens_3.rst#2025-04-06_snippet_0\n\nLANGUAGE: prolog\nCODE:\n```\nprint_message_tokens(Stream, Prefix, Tokens)\n```\n\n----------------------------------------\n\nTITLE: Checking Logtalk and Prolog Versions\nDESCRIPTION: Displays the current Logtalk, Prolog backend, and kernel versions when running in a notebook environment.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/constraints/sicstus/NOTES.md#2025-04-06_snippet_0\n\nLANGUAGE: logtalk\nCODE:\n```\n%versions\n```\n\n----------------------------------------\n\nTITLE: Checking List Length Equality in Logtalk\nDESCRIPTION: Checks if two lists have the same length.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/listp_0.rst.txt#2025-04-06_snippet_12\n\nLANGUAGE: Logtalk\nCODE:\n```\nsame_length(List1,List2)\n```\n\n----------------------------------------\n\nTITLE: Activating the Message Counter Monitor in Logtalk\nDESCRIPTION: Activates the message_counter monitor to begin collecting data on message calls and exits.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/profiling/NOTES.md#2025-04-06_snippet_4\n\nLANGUAGE: logtalk\nCODE:\n```\nmessage_counter::activate_monitor.\n```\n\n----------------------------------------\n\nTITLE: Example: Retracting clauses in an explicit object\nDESCRIPTION: Example of using retractall/1 to remove all clauses with a matching head of a public dynamic predicate in an explicitly specified object.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/refman/methods/retractall_1.rst.txt#2025-04-06_snippet_4\n\nLANGUAGE: Logtalk\nCODE:\n```\nObject::retractall(Head)\n```\n\n----------------------------------------\n\nTITLE: Decoding Base64 to Text in Logtalk (Char List Input)\nDESCRIPTION: This example demonstrates decoding Base64 data to original text using the base64::parse/2 predicate, with the input as a list of characters.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/libraries/base64.rst#2025-04-06_snippet_6\n\nLANGUAGE: prolog\nCODE:\n```\n| ?- base64::parse(chars(['S','G','V',s,b,'G','8',g,d,'2','9',y,b,'G','Q',h]), Bytes),\n     atom_codes(Atom, Bytes).\nAtom = 'Hello world!'\nBytes = [72,101,108,108,111,32,119,111,114,108,100,33]\nyes\n```\n\n----------------------------------------\n\nTITLE: Constructing Expected Term from Goal with Custom Error in Logtalk\nDESCRIPTION: Constructs an expected term holding a value bound by calling the given goal. If the goal fails or throws an error, it returns an expected term with the custom error specified by the Error parameter.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/expected_0.rst.txt#2025-04-06_snippet_2\n\nLANGUAGE: Logtalk\nCODE:\n```\nfrom_goal(Goal,Value,Error,Expected)\n```\n\n----------------------------------------\n\nTITLE: Loading a Wrapped Prolog File for Dead Code Scanning in Logtalk\nDESCRIPTION: This snippet demonstrates how to load a wrapped Prolog file 'code.lgt' into Logtalk for dead code scanning. It uses logtalk_load/2 with source_data and optimize flags set to on.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/devtools/dead_code_scanner.rst.txt#2025-04-06_snippet_7\n\nLANGUAGE: logtalk\nCODE:\n```\n| ?- logtalk_load(code, [source_data(on), optimize(on)]).\n```\n\n----------------------------------------\n\nTITLE: Defining define_events/5 Predicate in Prolog\nDESCRIPTION: Signature of the define_events/5 predicate, which defines new events for monitoring object messages. It specifies the event type, object, message, sender, and monitor object.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/refman/predicates/define_events_5.rst#2025-04-06_snippet_0\n\nLANGUAGE: Prolog\nCODE:\n```\ndefine_events(Event, Object, Message, Sender, Monitor)\n```\n\n----------------------------------------\n\nTITLE: Specifying Modes for current_category/1 in Logtalk\nDESCRIPTION: Specifies the mode and number of proofs for the current_category/1 predicate. It takes a category identifier as an argument and can produce zero or more solutions.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/refman/predicates/current_category_1.rst.txt#2025-04-06_snippet_1\n\nLANGUAGE: Prolog\nCODE:\n```\ncurrent_category(?category_identifier) - zero_or_more\n```\n\n----------------------------------------\n\nTITLE: Predicate Template - all_libraries/1\nDESCRIPTION: Creates all supported diagrams for all loaded libraries with specified options.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/diagrams_1.rst.txt#2025-04-06_snippet_3\n\nLANGUAGE: logtalk\nCODE:\n```\nall_libraries(Options)\n```\n\n----------------------------------------\n\nTITLE: Loading Prolog Module for Profiling in Logtalk\nDESCRIPTION: Shows how to load a Prolog module file for profiling using Logtalk's ability to compile modules as objects.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/devtools/ports_profiler.rst.txt#2025-04-06_snippet_10\n\nLANGUAGE: Prolog\nCODE:\n```\n| ?- logtalk_load(module, [debug(on), source_data(on)]).\n```\n\n----------------------------------------\n\nTITLE: Generating a XHTML 1.1 Document\nDESCRIPTION: Shows how to generate a XHTML 1.1 document from Prolog terms and write it to a file.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/libraries/html.rst.txt#2025-04-06_snippet_7\n\nLANGUAGE: prolog\nCODE:\n```\n| ?- xhtml11::generate(\n            file('hello.html'),\n            html([lang=en], [head(title('Hello world!')), body(p('Bye!'))])\n        ).\n```\n\n----------------------------------------\n\nTITLE: Loading Prolog Module for Metrics Analysis in Logtalk\nDESCRIPTION: Command to load a Prolog module file as an object with source data enabled, allowing Logtalk to apply metrics to it. This approach works for Prolog modules that Logtalk can compile as objects.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/tools/code_metrics/NOTES.md#2025-04-06_snippet_2\n\nLANGUAGE: Prolog\nCODE:\n```\n| ?- logtalk_load(module, [source_data(on)]).\n```\n\n----------------------------------------\n\nTITLE: Checking Versions in Logtalk\nDESCRIPTION: Prints version information for Logtalk, Prolog backend, and kernel when running in notebook mode.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/threads/blackboard/NOTES.md#2025-04-06_snippet_0\n\nLANGUAGE: logtalk\nCODE:\n```\n%versions\n```\n\n----------------------------------------\n\nTITLE: Querying Area of Dynamic Circle Instance\nDESCRIPTION: This code queries the area of the dynamically created circle instance 'o1'.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/classmethods/NOTES.md#2025-04-06_snippet_5\n\nLANGUAGE: logtalk\nCODE:\n```\no1::area(Area).\n```\n\n----------------------------------------\n\nTITLE: Interval Object Declaration and Properties\nDESCRIPTION: Basic interval object declaration showing key properties including availability, version, compilation flags and protocol implementations. The object represents temporal intervals as i/2 terms with start and end points.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/interval_0.rst.txt#2025-04-06_snippet_0\n\nLANGUAGE: logtalk\nCODE:\n```\ninterval\nImplements: public intervalp\nCompilation flags: static, context_switching_calls\nVersion: 1:2:1\nAvailability: logtalk_load(intervals(loader))\n```\n\n----------------------------------------\n\nTITLE: Querying Latin Names\nDESCRIPTION: Retrieves a list of names with Latin characters from the latin object with error handling\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/encodings/NOTES.md#2025-04-06_snippet_3\n\nLANGUAGE: logtalk\nCODE:\n```\ncatch(latin::name(Name), Error, true).\n```\n\n----------------------------------------\n\nTITLE: Generating Normal Distribution Values in Logtalk\nDESCRIPTION: Predicate that returns a standard normally (Gaussian) distributed random value using a default mean of 0.0 and a default deviation of 1.0. It takes no input parameters and returns a float value.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/sampling_protocol_0.rst.txt#2025-04-06_snippet_4\n\nLANGUAGE: logtalk\nCODE:\n```\nstandard_normal(Value)\n```\n\n----------------------------------------\n\nTITLE: Usage Examples - Logtalk\nDESCRIPTION: Demonstrates different ways to use the threaded_call predicate with various goal types.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/refman/predicates/threaded_call_1_2.rst.txt#2025-04-06_snippet_3\n\nLANGUAGE: prolog\nCODE:\n```\nthreaded_call(Goal)\nthreaded_call(::Message)\nthreaded_call(Object::Message)\n```\n\n----------------------------------------\n\nTITLE: Printing Logtalk, Prolog backend, and kernel versions\nDESCRIPTION: This code snippet prints the versions of Logtalk, the Prolog backend, and the kernel if running as a notebook.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/miscellaneous/NOTES.md#2025-04-06_snippet_0\n\nLANGUAGE: logtalk\nCODE:\n```\n%versions\n```\n\n----------------------------------------\n\nTITLE: Loading issue_creator Object in Logtalk\nDESCRIPTION: This code snippet shows how to load the issue_creator object in Logtalk. It is typically used in the context of the logtalk_tester automation script with the -b option.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/issue_creator_0.rst.txt#2025-04-06_snippet_0\n\nLANGUAGE: Logtalk\nCODE:\n```\nlogtalk_load(issue_creator(loader))\n```\n\n----------------------------------------\n\nTITLE: Using Object Wrapper Hook\nDESCRIPTION: Example showing how to use the object_wrapper_hook from hook_objects library for linting Prolog code.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/devtools/linter.rst.txt#2025-04-06_snippet_3\n\nLANGUAGE: prolog\nCODE:\n```\n| ?- logtalk_load(hook_objects(loader)).\n```\n\nLANGUAGE: prolog\nCODE:\n```\n| ?- logtalk_load(code, [hook(object_wrapper_hook), source_data(on)]).\n```\n\n----------------------------------------\n\nTITLE: Template and Mode Specification for dynamic/1 Directive\nDESCRIPTION: Specifies the template and mode declarations for the dynamic/1 directive, indicating that it accepts qualified predicate indicators or qualified non-terminal indicators as arguments.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/refman/directives/dynamic_1.rst.txt#2025-04-06_snippet_1\n\nLANGUAGE: Logtalk\nCODE:\n```\ndynamic(+qualified_predicate_indicator_term)\ndynamic(+qualified_non_terminal_indicator_term)\n```\n\n----------------------------------------\n\nTITLE: Threaded Engine Fetch Mode Declaration\nDESCRIPTION: Specifies the mode declaration for the threaded_engine_fetch predicate, indicating it accepts any term and provides zero or one solutions.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/refman/predicates/threaded_engine_fetch_1.rst#2025-04-06_snippet_1\n\nLANGUAGE: prolog\nCODE:\n```\nthreaded_engine_fetch(?term) - zero_or_one\n```\n\n----------------------------------------\n\nTITLE: Loading Metagol Library in Logtalk\nDESCRIPTION: This snippet shows how to load the Metagol library in Logtalk. Metagol is a meta-interpretive learning system.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/ports/metagol/SCRIPT.txt#2025-04-06_snippet_0\n\nLANGUAGE: Logtalk\nCODE:\n```\n| ?- logtalk_load(metagol(loader)).\n```\n\n----------------------------------------\n\nTITLE: Checking Environment Versions in Logtalk\nDESCRIPTION: A command to print the versions of Logtalk, the Prolog backend, and the kernel when running in a Jupyter notebook environment.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/threads/ping_pong/NOTES.md#2025-04-06_snippet_0\n\nLANGUAGE: logtalk\nCODE:\n```\n%versions\n```\n\n----------------------------------------\n\nTITLE: Printing Logtalk and Prolog Versions\nDESCRIPTION: Prints information about the running Logtalk instance, Prolog backend, and kernel versions when executed in a notebook environment.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/benchmarks/NOTES.md#2025-04-06_snippet_0\n\nLANGUAGE: logtalk\nCODE:\n```\n%versions\n```\n\n----------------------------------------\n\nTITLE: Conditional Bug Report Creation in CI/CD Pipeline\nDESCRIPTION: This bash snippet demonstrates how to conditionally use the -b option in a CI/CD pipeline based on an environment variable. This allows for temporary disabling of automatic bug report creation.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/devtools/issue_creator.rst#2025-04-06_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nlogtalk_tester.sh $AUTO_BUG_REPORTS -p ...\n```\n\n----------------------------------------\n\nTITLE: Declaring Dynamic Predicate partial_/1 in Logtalk\nDESCRIPTION: Declares a dynamic predicate partial_/1 that caches the total number of tests per test set. It takes an integer argument representing the count.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/tap_report_0.rst.txt#2025-04-06_snippet_0\n\nLANGUAGE: Logtalk\nCODE:\n```\npartial_(Count)\n```\n\n----------------------------------------\n\nTITLE: Defining the initialization/1 Directive Syntax in Logtalk\nDESCRIPTION: Shows the syntax for the initialization/1 directive, which defines a goal to be called after an object or source file has been loaded into memory.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/refman/directives/initialization_1.rst.txt#2025-04-06_snippet_0\n\nLANGUAGE: logtalk\nCODE:\n```\ninitialization(Goal)\n```\n\n----------------------------------------\n\nTITLE: Running XVM Logtalk Script Help on Bash\nDESCRIPTION: Command to display help information for the XVM Logtalk script on POSIX systems using Bash.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/scripts/embedding/xvm/NOTES.md#2025-04-06_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nxvm_logtalk_pl.sh -h\n```\n\n----------------------------------------\n\nTITLE: Checking List Reverse Property with QuickCheck in Logtalk\nDESCRIPTION: Verifies that reversing a list twice returns the original list using QuickCheck.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/quick_check/NOTES.md#2025-04-06_snippet_2\n\nLANGUAGE: logtalk\nCODE:\n```\nlgtunit::quick_check(reverse_2_twice_prop(+list)).\n```\n\n----------------------------------------\n\nTITLE: Checking Logtalk and Prolog Version Information\nDESCRIPTION: Prints the Logtalk version, Prolog backend version, and kernel information when executed in a Jupyter notebook environment.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/bottles/NOTES.md#2025-04-06_snippet_0\n\nLANGUAGE: logtalk\nCODE:\n```\n%versions\n```\n\n----------------------------------------\n\nTITLE: Learning Higher-Order Functions with Metagol in Logtalk\nDESCRIPTION: This example shows Metagol learning a higher-order function 'f/2' that uses the 'map' predicate with 'my_succ'.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/ports/metagol/SCRIPT.txt#2025-04-06_snippet_4\n\nLANGUAGE: Logtalk\nCODE:\n```\n| ?- higher_order1::learn.\n\n% learning f/2\n% clauses: 1\nf(A,B):-map(A,B,my_succ).\nyes\n```\n\n----------------------------------------\n\nTITLE: Reporting Test Execution Time in Logtalk\nDESCRIPTION: Shows how to report the execution time of a test sub-goal using the note/1 option and a benchmarking predicate.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/tools/lgtunit/NOTES.md#2025-04-06_snippet_36\n\nLANGUAGE: Logtalk\nCODE:\n```\ntest(foobar, true, [note(bar(seconds-Time))]) :-\n\t\tfoo(...),\n\t\tbenchmark(bar(...), Time).\n```\n\n----------------------------------------\n\nTITLE: Enabling Occurs Check in XVM for Coinduction Support\nDESCRIPTION: Command-line example showing how to start XVM with the occurs check enabled, which is required for Logtalk coinduction support.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/adapters/NOTES.md#2025-04-06_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n$ xvmlgt --enable-occurs-check\n```\n\n----------------------------------------\n\nTITLE: Forward Method Mode Declaration\nDESCRIPTION: Specifies the mode and number of proofs for the forward/1 method, indicating it takes a callable term and can return zero or more solutions.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/refman/methods/forward_1.rst#2025-04-06_snippet_1\n\nLANGUAGE: logtalk\nCODE:\n```\nforward(+callable) - zero_or_more\n```\n\n----------------------------------------\n\nTITLE: Loading Wrapped Prolog Code for Analysis in Logtalk\nDESCRIPTION: This snippet demonstrates how to load wrapped Prolog code for analysis with the dead_code_scanner tool in Logtalk. It uses the logtalk_load/2 predicate with source_data and optimize options set to on.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/devtools/dead_code_scanner.rst#2025-04-06_snippet_7\n\nLANGUAGE: logtalk\nCODE:\n```\n| ?- logtalk_load(code, [source_data(on), optimize(on)]).\n```\n\n----------------------------------------\n\nTITLE: Default Delegation Operation\nDESCRIPTION: Demonstrates operation call without a delegate set, returning default implementation.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/delegates/NOTES.md#2025-04-06_snippet_2\n\nLANGUAGE: logtalk\nCODE:\n```\na_delegator::operation(String).\n```\n\n----------------------------------------\n\nTITLE: Generating CSS for Syntax Highlighting\nDESCRIPTION: Command to generate the CSS file required for styling the highlighted code\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/coding/rouge/NOTES.md#2025-04-06_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n$ rougify style > source.css\n```\n\n----------------------------------------\n\nTITLE: Template and Modes for uses/2 Directive\nDESCRIPTION: Defines the template and modes for different variations of the uses/2 directive including predicate indicators, aliases, and operators.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/refman/directives/uses_2.rst.txt#2025-04-06_snippet_1\n\nLANGUAGE: logtalk\nCODE:\n```\nuses(+object_identifier, +predicate_indicator_list)\nuses(+object_identifier, +predicate_indicator_alias_list)\n\nuses(+object_identifier, +predicate_template_alias_list)\n\nuses(+object_identifier, +non_terminal_indicator_list)\nuses(+object_identifier, +non_terminal_indicator_alias_list)\n\nuses(+object_identifier, +operator_list)\n```\n\n----------------------------------------\n\nTITLE: Throwing Existence Error in Logtalk\nDESCRIPTION: This snippet demonstrates the usage of the existence_error/2 method to throw an existence error. It is equivalent to using context/1 and throw/1 predicates to generate errors in the same format as the runtime.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/refman/methods/existence_error_2.rst#2025-04-06_snippet_0\n\nLANGUAGE: Prolog\nCODE:\n```\nexistence_error(Thing, Culprit)\n```\n\nLANGUAGE: Prolog\nCODE:\n```\n...,\ncontext(Context),\nthrow(error(existence_error(Thing,Culprit), Context)).\n```\n\n----------------------------------------\n\nTITLE: Threaded Engine Create Predicate Signature\nDESCRIPTION: The main predicate signature showing the structure and parameters for creating a threaded engine.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/refman/predicates/threaded_engine_create_3.rst#2025-04-06_snippet_0\n\nLANGUAGE: prolog\nCODE:\n```\nthreaded_engine_create(AnswerTemplate, Goal, Engine)\n```\n\n----------------------------------------\n\nTITLE: Tracing Program Execution in Logtalk\nDESCRIPTION: Shows an example of tracing program execution using the 'family' example. The output displays the debugger's trace information for the query.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/userman/debugging.rst#2025-04-06_snippet_18\n\nLANGUAGE: text\nCODE:\n```\n| ?- addams::sister(Sister, Sibling).\n     Call: (1) sister(_1082,_1104) ?\n     Rule: (1) sister(_1082,_1104) ?\n     Call: (2) ::female(_1082) ?\n     Call: (3) female(_1082) ?\n     Fact: (3) female(morticia) ?\n    *Exit: (3) female(morticia) ?\n    *Exit: (2) ::female(morticia) ?\n    ...\n```\n\n----------------------------------------\n\nTITLE: Threaded Exit Predicate Syntax\nDESCRIPTION: Basic syntax declarations for the threaded_exit predicate with one or two arguments.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/refman/predicates/threaded_exit_1_2.rst#2025-04-06_snippet_0\n\nLANGUAGE: prolog\nCODE:\n```\nthreaded_exit(Goal)\nthreaded_exit(Goal, Tag)\n```\n\n----------------------------------------\n\nTITLE: Executing Basic Benchmarking in Logtalk/Prolog\nDESCRIPTION: Example command for establishing a performance baseline by benchmarking a simple 'true' goal. This provides a reference point for minimum execution time.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/userman/messages.rst#2025-04-06_snippet_11\n\nLANGUAGE: text\nCODE:\n```\n| ?- benchmark(true).\n```\n\n----------------------------------------\n\nTITLE: Querying Engine Name in Prolog\nDESCRIPTION: Predicate signature showing the format for threaded_engine_self that takes an Engine parameter. Used to get or check the current engine name.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/refman/predicates/threaded_engine_self_1.rst.txt#2025-04-06_snippet_0\n\nLANGUAGE: prolog\nCODE:\n```\nthreaded_engine_self(Engine)\n```\n\n----------------------------------------\n\nTITLE: Inserting Key-Value Pair into Heap in Logtalk\nDESCRIPTION: Inserts a new key-value pair into a heap, returning the updated heap. Takes the key, value, current heap, and returns the new heap.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/heapp_0.rst.txt#2025-04-06_snippet_0\n\nLANGUAGE: Logtalk\nCODE:\n```\ninsert(Key,Value,Heap,NewHeap)\n```\n\n----------------------------------------\n\nTITLE: Changing PowerShell Execution Policy for Logtalk Embedding Scripts\nDESCRIPTION: Command to change the PowerShell execution policy to allow running of unsigned scripts, which may be necessary for using the Logtalk embedding scripts on Windows.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/scripts/embedding/NOTES.md#2025-04-06_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nPowerShell.exe -ExecutionPolicy Unrestricted\n```\n\n----------------------------------------\n\nTITLE: Defining Dynamic Predicate for Quasi-Skipping Status in Logtalk\nDESCRIPTION: Defines a dynamic predicate 'quasi_skipping_/0' that is true if quasi-skipping is enabled. This predicate is used internally by the debugger for flow control.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/debugger_0.rst.txt#2025-04-06_snippet_4\n\nLANGUAGE: Logtalk\nCODE:\n```\nquasi_skipping_/0\n```\n\n----------------------------------------\n\nTITLE: Alternative Implementation of a List Protocol using Difference Lists\nDESCRIPTION: Definition of a 'difflist' object that provides an alternative implementation of the 'listp' protocol using difference lists. Shows how different objects can implement the same interface.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/tutorial/lists.rst.txt#2025-04-06_snippet_7\n\nLANGUAGE: logtalk\nCODE:\n```\n:- object(difflist,\n    implements(listp).\n\n    append(L1-X, X-L2, L1-L2).\n    ...\n\n:- end_object.\n```\n\n----------------------------------------\n\nTITLE: Write to File Hook Object Declaration\nDESCRIPTION: Object declaration for write_to_file_hook that implements term writing functionality with file and options parameters. The object implements the expanding interface and uses static and context_switching_calls compilation flags.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/write_to_file_hook_2.rst.txt#2025-04-06_snippet_0\n\nLANGUAGE: logtalk\nCODE:\n```\nwrite_to_file_hook(File,Options)\n```\n\n----------------------------------------\n\nTITLE: Checking Versions in Logtalk\nDESCRIPTION: Prints the versions of Logtalk, Prolog backend, and kernel when running as a notebook.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/threads/primes/NOTES.md#2025-04-06_snippet_0\n\nLANGUAGE: logtalk\nCODE:\n```\n%versions\n```\n\n----------------------------------------\n\nTITLE: Squares Placement with Cardinality Constraint\nDESCRIPTION: Solves the squares placement problem using the 'dual' model with 'card' (cardinality) constraint method.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/constraints/sicstus/NOTES.md#2025-04-06_snippet_5\n\nLANGUAGE: logtalk\nCODE:\n```\nsquares::squares(dual,card).\n```\n\n----------------------------------------\n\nTITLE: Predicate Modes - extends_object/2-3\nDESCRIPTION: Mode declarations showing the predicate accepts object identifiers as input/output and returns zero or more solutions.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/refman/predicates/extends_object_2_3.rst#2025-04-06_snippet_1\n\nLANGUAGE: prolog\nCODE:\n```\nextends_object(?object_identifier, ?object_identifier) - zero_or_more\nextends_object(?object_identifier, ?object_identifier, ?scope) - zero_or_more\n```\n\n----------------------------------------\n\nTITLE: Modes and Number of Proofs for existence_error/2\nDESCRIPTION: This snippet shows the mode declaration for the existence_error/2 method, indicating that both arguments should be non-variable terms and that calling this method results in an error.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/refman/methods/existence_error_2.rst#2025-04-06_snippet_1\n\nLANGUAGE: Prolog\nCODE:\n```\nexistence_error(@nonvar, @nonvar) - error\n```\n\n----------------------------------------\n\nTITLE: New Execution Context Predicate\nDESCRIPTION: Updated execution_context predicate from 6 to 7 arguments to support new entity context parameter in the Logtalk built-in object.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/RELEASE_NOTES.md#2025-04-06_snippet_97\n\nLANGUAGE: Logtalk\nCODE:\n```\nexecution_context/7\n```\n\n----------------------------------------\n\nTITLE: Mode Declaration for print_message_tokens/3 in Logtalk\nDESCRIPTION: Specifies the mode declaration for print_message_tokens/3, indicating expected argument types and determinism. It takes a stream or alias, an atom prefix, and a list of nonvar tokens, with zero or one solutions.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/refman/methods/print_message_tokens_3.rst.txt#2025-04-06_snippet_1\n\nLANGUAGE: Logtalk\nCODE:\n```\nprint_message_tokens(@stream_or_alias, +atom, @list(nonvar)) - zero_or_one\n```\n\n----------------------------------------\n\nTITLE: Permutation Checking in Logtalk\nDESCRIPTION: Checks if two lists are permutations of the same list.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/listp_0.rst.txt#2025-04-06_snippet_5\n\nLANGUAGE: Logtalk\nCODE:\n```\npermutation(List,Permutation)\n```\n\n----------------------------------------\n\nTITLE: Creating an Abstract Class\nDESCRIPTION: Creates a new abstract class 'ac', verifies it is indeed an abstract class, and prints its interface.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/reflection/NOTES.md#2025-04-06_snippet_4\n\nLANGUAGE: logtalk\nCODE:\n```\nabstract_class::new(ac), ac::abstract_class, ac::print.\n```\n\n----------------------------------------\n\nTITLE: Defining Predicate Info Score Hook in Logtalk\nDESCRIPTION: This predicate sets the maximum score for predicate info/2 directives. It allows customization of scoring for predicate info documentation.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/doc_metric_0.rst.txt#2025-04-06_snippet_5\n\nLANGUAGE: Logtalk\nCODE:\n```\npredicate_info_score_hook(Entity,Predicate,MaximumScore)\n```\n\n----------------------------------------\n\nTITLE: Setting Logtalk Path Prefix Suppression\nDESCRIPTION: Example of setting the suppress_path_prefix flag to hide user-specific paths in documentation and logs.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/devtools/overview.rst.txt#2025-04-06_snippet_2\n\nLANGUAGE: prolog\nCODE:\n```\n| ?- set_logtalk_flag(suppress_path_prefix, '/home/jdoe/').\n```\n\n----------------------------------------\n\nTITLE: Initializing Stream Variable with Value in Logtalk\nDESCRIPTION: Creates a new stream variable with a specified initial value. Throws a type error if the first argument is not a variable.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/streamvars_0.rst.txt#2025-04-06_snippet_1\n\nLANGUAGE: Logtalk\nCODE:\n```\nnew(Variable, Value)\n```\n\n----------------------------------------\n\nTITLE: Logtalk Flag Creation Example\nDESCRIPTION: Demonstrates creating a new boolean flag named pretty_print_blobs with a default value of false and empty options list.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/refman/predicates/create_logtalk_flag_3.rst.txt#2025-04-06_snippet_2\n\nLANGUAGE: prolog\nCODE:\n```\n% create a new boolean flag with default value set to false:\n| ?- create_logtalk_flag(pretty_print_blobs, false, []).\n```\n\n----------------------------------------\n\nTITLE: Testing Base64 Library in Logtalk\nDESCRIPTION: This snippet shows how to load the tester.lgt file to test the base64 library predicates.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/libraries/base64.rst#2025-04-06_snippet_1\n\nLANGUAGE: prolog\nCODE:\n```\n| ?- logtalk_load(base64(tester)).\n```\n\n----------------------------------------\n\nTITLE: Loading Unicode Data Files in Prolog\nDESCRIPTION: Demonstrates how to load all Unicode data files using the unicode_data.pl utility file. This is used for testing portability across Prolog compilers.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/libraries/unicode_data.rst#2025-04-06_snippet_0\n\nLANGUAGE: Prolog\nCODE:\n```\n?- [unicode_data].\n```\n\n----------------------------------------\n\nTITLE: Running Pack Tests in Logtalk\nDESCRIPTION: Shows how to run tests for a specific pack using its tester file.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/devtools/packs.rst.txt#2025-04-06_snippet_40\n\nLANGUAGE: logtalk\nCODE:\n```\n| ?- {foo(tester)}.\n```\n\n----------------------------------------\n\nTITLE: Querying Objects Publicly Derived from list in Logtalk\nDESCRIPTION: Example query to enumerate objects publicly derived from the list prototype using the extends_object/3 predicate with the public scope.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/refman/predicates/extends_object_2_3.rst.txt#2025-04-06_snippet_3\n\nLANGUAGE: prolog\nCODE:\n```\n| ?- extends_object(Object, list, public).\n```\n\n----------------------------------------\n\nTITLE: Defining Predicate Alias Shorthands in Logtalk\nDESCRIPTION: This example demonstrates how to define a predicate alias that is also a shorthand, allowing for more concise and readable code when using complex module predicates.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/refman/directives/use_module_2.rst.txt#2025-04-06_snippet_3\n\nLANGUAGE: Logtalk\nCODE:\n```\n:- use_module(pairs, [\n    map_list_to_pairs(length, Lists, Pairs) as length_pairs(Lists, Pairs)\n]).\n```\n\n----------------------------------------\n\nTITLE: Printing Logtalk, Prolog Backend, and Kernel Versions in Logtalk\nDESCRIPTION: This snippet prints the versions of Logtalk, the Prolog backend, and the kernel if running as a Jupyter notebook. It uses the %versions directive.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/metapredicates_compiled/NOTES.md#2025-04-06_snippet_0\n\nLANGUAGE: logtalk\nCODE:\n```\n%versions\n```\n\n----------------------------------------\n\nTITLE: Checking Environment Versions in Logtalk\nDESCRIPTION: Prints the versions of Logtalk, the Prolog backend, and the kernel when running in a Jupyter notebook environment.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/classvars/NOTES.md#2025-04-06_snippet_0\n\nLANGUAGE: logtalk\nCODE:\n```\n%versions\n```\n\n----------------------------------------\n\nTITLE: Retrieving All Class Descendant Instances in Logtalk\nDESCRIPTION: Predicate that returns all class descendant instances through backtracking. Descendant instances include all instances of the class and its subclasses. Takes a single parameter Descendant which can be instantiated or a variable to be bound to descendant instance objects.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/class_hierarchyp_0.rst.txt#2025-04-06_snippet_12\n\nLANGUAGE: logtalk\nCODE:\n```\ndescendant_instance(Descendant)\n```\n\n----------------------------------------\n\nTITLE: Printing Logtalk, Prolog backend, and kernel versions\nDESCRIPTION: This snippet prints the versions of Logtalk, the Prolog backend, and the kernel if running as a notebook.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/defaulty/NOTES.md#2025-04-06_snippet_0\n\nLANGUAGE: logtalk\nCODE:\n```\n%versions\n```\n\n----------------------------------------\n\nTITLE: Random Float Generation in Logtalk\nDESCRIPTION: Predicate that generates a random float value in the interval [0.0, 1.0[. Marked as synchronized when thread support is enabled.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/random_protocol_0.rst.txt#2025-04-06_snippet_0\n\nLANGUAGE: logtalk\nCODE:\n```\nrandom(-float)\n```\n\n----------------------------------------\n\nTITLE: Direct Database Query\nDESCRIPTION: Demonstrates direct predicate call to p/1 in the database object.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/metainterpreters/NOTES.md#2025-04-06_snippet_2\n\nLANGUAGE: logtalk\nCODE:\n```\n%%table\ndatabase::p(X).\n```\n\n----------------------------------------\n\nTITLE: Loading the Lazy Evaluation Module in Logtalk\nDESCRIPTION: Loads the lazy evaluation module which provides an alternative implementation to the standard findall/3 meta-predicate.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/engines/lazy/NOTES.md#2025-04-06_snippet_0\n\nLANGUAGE: logtalk\nCODE:\n```\nlogtalk_load(lazy(loader)).\n```\n\n----------------------------------------\n\nTITLE: Directory Creation in Install Script\nDESCRIPTION: Unix shell command for creating Logtalk installation directory using mkdir with -p flag\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/RELEASE_NOTES.md#2025-04-06_snippet_34\n\nLANGUAGE: Shell\nCODE:\n```\nmkdir -p\n```\n\n----------------------------------------\n\nTITLE: HTML Output for Pre-formatted Text\nDESCRIPTION: Demonstrates the HTML output generated from a pre-formatted text element in Prolog term notation.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/libraries/html.rst.txt#2025-04-06_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<pre>\n[foo,bar,baz]\n</pre>\n```\n\n----------------------------------------\n\nTITLE: Specifying Modes and Number of Proofs for false/0 in Logtalk\nDESCRIPTION: This code snippet specifies the mode and number of proofs for the false/0 method. It indicates that the method takes no arguments and produces one proof.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/refman/methods/false_0.rst#2025-04-06_snippet_1\n\nLANGUAGE: Prolog\nCODE:\n```\nfalse - one\n```\n\n----------------------------------------\n\nTITLE: Using the SHJS Logtalk Test File\nDESCRIPTION: Instructions for using the 'source.html' test file to verify Logtalk syntax highlighting in SHJS. The file should be copied to the root of the SHJS distribution directory and opened in a web browser.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/coding/shjs/NOTES.md#2025-04-06_snippet_1\n\nLANGUAGE: Text\nCODE:\n```\nThe file `source.html` is a test file based on the `../tests/source.lgt`\\nfile. To use this test file, copy it to the root of your SHJS distribution\\ndirectory and open it in your favorite web browser.\n```\n\n----------------------------------------\n\nTITLE: Basic uses/2 Example\nDESCRIPTION: Demonstrates basic usage of the uses/2 directive with list operations and data storage predicates.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/refman/directives/uses_2.rst.txt#2025-04-06_snippet_2\n\nLANGUAGE: logtalk\nCODE:\n```\n:- uses(list,  [append/3, member/2]).\n:- uses(store, [data/2]).\n:- uses(user,  [table/4]).\n\nfoo :-\n    ...,\n    % the same as findall(X, list::member(X, L), A)\n    findall(X, member(X, L), A),\n    % the same as list::append(A, B, C)\n    append(A, B, C),\n    % the same as store::assertz(data(X, C))\n    assertz(data(X, C)),\n    % call the table/4 predicate in \"user\"\n    table(X, Y, Z, T),\n    ...\n```\n\n----------------------------------------\n\nTITLE: Void Element Example in Logtalk HTML\nDESCRIPTION: Example showing how to represent a void element (hr) with class attribute.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/library/html/NOTES.md#2025-04-06_snippet_2\n\nLANGUAGE: prolog\nCODE:\n```\nhr([class-separator])\n```\n\n----------------------------------------\n\nTITLE: Defining Conditional Tests in Logtalk with Parameter Variables\nDESCRIPTION: Example of an attempted test definition with parameter variables in the condition option, which will not work correctly due to implementation limitations in Logtalk.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/tools/lgtunit/NOTES.md#2025-04-06_snippet_60\n\nLANGUAGE: prolog\nCODE:\n```\ntest(some_id, true, [condition(_ParVar_ == 42)]) :-\n\t...\n```\n\n----------------------------------------\n\nTITLE: Skipping Tests with Operator Prefix in Logtalk Unit Tests\nDESCRIPTION: Shows how to skip a test by prefixing the test clause head with the (-)/1 operator, with an example using the test/3 dialect that includes a note explaining why the test is skipped.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/devtools/lgtunit.rst#2025-04-06_snippet_22\n\nLANGUAGE: logtalk\nCODE:\n```\n   - test(not_yet_ready) :-\n       ...\n```\n\n----------------------------------------\n\nTITLE: Deprecated Control Construct\nDESCRIPTION: The deprecated :/1 control construct that was replaced by the more versatile (^^)/1 super control construct in Logtalk 3.x.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/UPGRADING.md#2025-04-06_snippet_1\n\nLANGUAGE: logtalk\nCODE:\n```\n:/1\n```\n\n----------------------------------------\n\nTITLE: Printing Logtalk, Prolog, and Kernel Versions in Logtalk\nDESCRIPTION: This snippet prints the versions of Logtalk, the Prolog backend, and the kernel (if running as a notebook).\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/threads/mtbatch/NOTES.md#2025-04-06_snippet_0\n\nLANGUAGE: logtalk\nCODE:\n```\n%versions\n```\n\n----------------------------------------\n\nTITLE: Predicate Mode Declaration\nDESCRIPTION: Specifies the mode and number of proofs for the threaded/1 predicate.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/refman/predicates/threaded_1.rst#2025-04-06_snippet_2\n\nLANGUAGE: prolog\nCODE:\n```\nthreaded(+callable) - zero_or_one\n```\n\n----------------------------------------\n\nTITLE: Logtalk Initialization Directive Example\nDESCRIPTION: Example of an initialization directive in Prolog for starting a Logtalk application automatically when running the generated executable. Uses canonical notation to avoid syntax errors.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/scripts/embedding/gprolog/NOTES.md#2025-04-06_snippet_0\n\nLANGUAGE: prolog\nCODE:\n```\n:- initialization('::'(app,start)).\n```\n\n----------------------------------------\n\nTITLE: Generating HTML Coverage Reports with Custom Path and URL Parameters\nDESCRIPTION: Command to generate an HTML coverage report with custom prefix and URL parameters. This enables proper linking to source code in the report.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/tools/lgtunit/NOTES.md#2025-04-06_snippet_59\n\nLANGUAGE: shell\nCODE:\n```\n$ xsltproc \\\n  --stringparam prefix logtalk/ \\\n  --stringparam url https://github.com/LogtalkDotOrg/logtalk3/blob/master \\\n  -o coverage_report.html coverage_report.xml\n```\n\n----------------------------------------\n\nTITLE: Representing Void HTML Elements with Attributes\nDESCRIPTION: Shows how to represent void HTML elements (elements without content) using Prolog terms with attribute lists.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/libraries/html.rst.txt#2025-04-06_snippet_3\n\nLANGUAGE: prolog\nCODE:\n```\nhr([class-separator])\n```\n\n----------------------------------------\n\nTITLE: Generating HTML with Syntax Highlighting\nDESCRIPTION: Command to generate HTML output with syntax highlighting for a Logtalk source file\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/coding/rouge/NOTES.md#2025-04-06_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ rougify highlight -f html -i source.lgt > source.html\n```\n\n----------------------------------------\n\nTITLE: Operator Usage Examples Output in Logtalk\nDESCRIPTION: Shows the interactive usage and output of the defined operators, demonstrating differences between global and local operator scope.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/refman/directives/op_3.rst.txt#2025-04-06_snippet_4\n\nLANGUAGE: text\nCODE:\n```\n| ?- {ops}.\n<=>(1,2)\ntrue.\n\n| ?- ops::w(<=>(1,2)).\n1<=>2\ntrue.\n\n| ?- ops::r(T).\n|: 3<=>4.\n\nT = <=>(3, 4).\n\n| ?- read(T).\n|: 5<=>6.\n\nSYNTAX ERROR: operator expected\n```\n\n----------------------------------------\n\nTITLE: Loading Metagol Examples in Logtalk\nDESCRIPTION: This snippet demonstrates how to load all the Metagol examples in Logtalk.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/ports/metagol/SCRIPT.txt#2025-04-06_snippet_1\n\nLANGUAGE: Logtalk\nCODE:\n```\n| ?- logtalk_load(metagol('examples/loader')).\n```\n\n----------------------------------------\n\nTITLE: Loading the Intervals Library in Logtalk\nDESCRIPTION: Command to load all entities in the intervals library by loading the loader.lgt file. This is the entry point for using the intervals library functionality.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/library/intervals/NOTES.md#2025-04-06_snippet_0\n\nLANGUAGE: logtalk\nCODE:\n```\n| ?- logtalk_load(intervals(loader)).\n```\n\n----------------------------------------\n\nTITLE: Specifying UTF-8 Encoding in Logtalk\nDESCRIPTION: An example of using the encoding/1 directive to specify UTF-8 encoding for a Logtalk source file. This is the recommended encoding for portable code that cannot be expressed using ASCII.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/refman/directives/encoding_1.rst#2025-04-06_snippet_1\n\nLANGUAGE: Logtalk\nCODE:\n```\n:- encoding('UTF-8').\n```\n\n----------------------------------------\n\nTITLE: Overriding Portray Clause in Listing\nDESCRIPTION: Example showing how to override the inherited portray_clause/1 predicate with a backend system native implementation.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/library/listing/NOTES.md#2025-04-06_snippet_3\n\nLANGUAGE: logtalk\nCODE:\n```\n:- object(thing,\n\t\timports(listing)).\n\n\t\t:- uses(user, [portray_clause/1]).\n\t\t...\n\n\t:- end_object.\n```\n\n----------------------------------------\n\nTITLE: Recompiling Example in Optimal Mode in Logtalk\nDESCRIPTION: Recompiles the example in optimal mode for performance benchmarking.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/proxies/NOTES.md#2025-04-06_snippet_7\n\nLANGUAGE: logtalk\nCODE:\n```\nlogtalk_make(optimal).\n```\n\n----------------------------------------\n\nTITLE: Example of Integrating Tool with logtalk_make/1 in Logtalk\nDESCRIPTION: Demonstrates how to integrate the dead_code_scanner tool with the logtalk_make/1 predicate by defining a custom action for the 'check' target using the logtalk_make_target_action/1 hook.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/refman/predicates/logtalk_make_target_action_1.rst.txt#2025-04-06_snippet_2\n\nLANGUAGE: logtalk\nCODE:\n```\n:- multifile(logtalk_make_target_action/1).\n:- dynamic(logtalk_make_target_action/1).\n\nlogtalk_make_target_action(check) :-\n    dead_code_scanner::all.\n```\n\n----------------------------------------\n\nTITLE: Collecting Zero or More Terminals in Logtalk Sequence Grammar\nDESCRIPTION: Eagerly collects zero or more terminals that satisfy the given closure. It takes a callable closure and returns a list of atomic terminals.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/sequence_grammars_0.rst.txt#2025-04-06_snippet_0\n\nLANGUAGE: Logtalk\nCODE:\n```\nzero_or_more(Closure,Terminals)\n```\n\n----------------------------------------\n\nTITLE: Writing File Header in Logtalk\nDESCRIPTION: Writes the output file header using the specified options. Takes a stream or alias, an atom identifier, and a list of compound options as input.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/graph_language_protocol_0.rst.txt#2025-04-06_snippet_1\n\nLANGUAGE: Logtalk\nCODE:\n```\nfile_header(Stream,Identifier,Options)\n```\n\n----------------------------------------\n\nTITLE: Loading Predicate Lookups Example\nDESCRIPTION: Loads the predicate lookups example module into the Logtalk environment.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/predicate_lookups/NOTES.md#2025-04-06_snippet_0\n\nLANGUAGE: logtalk\nCODE:\n```\nlogtalk_load(predicate_lookups(loader)).\n```\n\n----------------------------------------\n\nTITLE: Solving Towers of Hanoi with Sixteen Threads in Logtalk\nDESCRIPTION: Solves the Towers of Hanoi problem for 24 disks using sixteen threads and measures the execution time.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/threads/hanoi/NOTES.md#2025-04-06_snippet_6\n\nLANGUAGE: logtalk\nCODE:\n```\ntime(hanoi(16)::run(24)).\n```\n\n----------------------------------------\n\nTITLE: Eight-Threaded Prime Calculation\nDESCRIPTION: Calculates prime numbers in range 1-500000 using eight threads and measures execution time.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/threads/primes/NOTES.md#2025-04-06_snippet_5\n\nLANGUAGE: logtalk\nCODE:\n```\ntime(primes(8)::primes(1, 500000, Primes)).\n```\n\n----------------------------------------\n\nTITLE: Running CxProlog File Generation Script in Bash\nDESCRIPTION: Command for viewing help information for the CxProlog file generation script in Bash. This displays all available options and their descriptions.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/scripts/embedding/cxprolog/NOTES.md#2025-04-06_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncxprolog_logtalk_pl.sh -h\n```\n\n----------------------------------------\n\nTITLE: Defining Dynamic Predicate for Leaping Status in Logtalk\nDESCRIPTION: Defines a dynamic predicate 'leaping_/1' that is true if leaping is enabled in tracing or debugging mode. It takes the mode as an argument.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/debugger_0.rst.txt#2025-04-06_snippet_5\n\nLANGUAGE: Logtalk\nCODE:\n```\nleaping_/1\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Event Tracing in Logtalk\nDESCRIPTION: Shows the output of tracing a message sent to the 'any' object after enabling event tracing.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/userman/events.rst#2025-04-06_snippet_8\n\nLANGUAGE: text\nCODE:\n```\n| ?- any::bar(X).\n\ncall: any <-- bar(X) from user\nexit: any <-- bar(bar) from user\nX = bar\n\nyes\n```\n\n----------------------------------------\n\nTITLE: Defining expand_goal/2 Method Signature in Logtalk\nDESCRIPTION: Defines the signature of the expand_goal/2 method, which takes a Goal and returns an ExpandedGoal. This method is used to expand a goal, either by unification or by recursive application of goal_expansion/2 predicates.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/refman/methods/expand_goal_2.rst#2025-04-06_snippet_0\n\nLANGUAGE: Logtalk\nCODE:\n```\nexpand_goal(Goal, ExpandedGoal)\n```\n\n----------------------------------------\n\nTITLE: Loading Base64 Library in Logtalk\nDESCRIPTION: This snippet shows how to load all entities in the base64 library using the loader utility file.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/library/base64/NOTES.md#2025-04-06_snippet_0\n\nLANGUAGE: Prolog\nCODE:\n```\n| ?- logtalk_load(base64(loader)).\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Types for QuickCheck Tests in Logtalk\nDESCRIPTION: This example shows how to define a custom 'bit' type with values 0 and 1 by implementing the necessary multifile predicates for both type checking and generating arbitrary values.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/devtools/lgtunit.rst#2025-04-06_snippet_21\n\nLANGUAGE: logtalk\nCODE:\n```\n   :- multifile(type::type/1).\n   type::type(bit).\n\n   :- multifile(type::check/2).\n   type::check(bit, Term) :-\n       once((Term == 0; Term == 1)).\n\n   :- multifile(arbitrary::arbitrary/1).\n   arbitrary::arbitrary(bit).\n\n   :- multifile(arbitrary::arbitrary/2).\n   arbitrary::arbitrary(bit, Arbitrary) :-\n       random::member(Arbitrary, [0, 1]).\n```\n\n----------------------------------------\n\nTITLE: Using Module Aliases with Parametric Objects for Second Data Source\nDESCRIPTION: Demonstrates using a different parameter ('data2') with the parametric object to access an alternative data source through module aliases.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/module_aliases/NOTES.md#2025-04-06_snippet_5\n\nLANGUAGE: logtalk\nCODE:\n```\npardata(data2)::all(Data).\n```\n\n----------------------------------------\n\nTITLE: Line-by-Line TSV File Reading\nDESCRIPTION: Reads a TSV file line by line and saves data as clauses for a specified object predicate. Takes file path, target object, and predicate indicator as arguments.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/tsv_protocol_0.rst.txt#2025-04-06_snippet_4\n\nLANGUAGE: logtalk\nCODE:\n```\nread_file_by_line(File,Object,Predicate)\n```\n\n----------------------------------------\n\nTITLE: Displaying Logtalk and Prolog Version Information\nDESCRIPTION: Displays the versions of Logtalk, the Prolog backend, and the kernel being used for the notebook session.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/threads/team/NOTES.md#2025-04-06_snippet_0\n\nLANGUAGE: logtalk\nCODE:\n```\n%versions\n```\n\n----------------------------------------\n\nTITLE: Accessing public predicate in self-metaclass\nDESCRIPTION: Demonstrates that a class that is its own metaclass can access its own public predicates using message-sending.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/roles/NOTES.md#2025-04-06_snippet_5\n\nLANGUAGE: logtalk\nCODE:\n```\nsuperclass::foo(Foo).\n```\n\n----------------------------------------\n\nTITLE: Using Object Wrapper Hook for Prolog Code Analysis\nDESCRIPTION: This snippet shows how to use the object_wrapper_hook from the hook_objects library to analyze plain Prolog code with the dead_code_scanner tool in Logtalk.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/devtools/dead_code_scanner.rst#2025-04-06_snippet_8\n\nLANGUAGE: logtalk\nCODE:\n```\n| ?- logtalk_load(hook_objects(loader)).\n...\n| ?- logtalk_load(code, [hook(object_wrapper_hook), source_data(on), optimize(on)]).\n```\n\n----------------------------------------\n\nTITLE: Defining extends_protocol Predicate in Logtalk\nDESCRIPTION: Syntax definition for the extends_protocol/2-3 predicate that enumerates protocol extension relationships. The predicate can identify which protocols extend others and with what scope (public, protected, or private).\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/refman/predicates/extends_protocol_2_3.rst#2025-04-06_snippet_0\n\nLANGUAGE: prolog\nCODE:\n```\nextends_protocol(Protocol, ParentProtocol)\nextends_protocol(Protocol, ParentProtocol, Scope)\n```\n\n----------------------------------------\n\nTITLE: Method Modes for term_expansion/2\nDESCRIPTION: Specifies the allowed modes and number of proofs for the term_expansion/2 method. Supports both single term and list expansions.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/refman/methods/term_expansion_2.rst.txt#2025-04-06_snippet_1\n\nLANGUAGE: prolog\nCODE:\n```\nterm_expansion(+nonvar, -nonvar) - zero_or_one\nterm_expansion(+nonvar, -list(nonvar)) - zero_or_one\n```\n\n----------------------------------------\n\nTITLE: Making a Threaded Call with a Non-Deterministic Goal in Logtalk\nDESCRIPTION: Demonstrates how to make a threaded call with a non-deterministic goal that finds members of a list.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/threads/nondet/NOTES.md#2025-04-06_snippet_2\n\nLANGUAGE: logtalk\nCODE:\n```\nthreaded_call(lists::member(X, [1,2,3])).\n```\n\n----------------------------------------\n\nTITLE: Loading the Wrapper Hook Object in Logtalk\nDESCRIPTION: Loads the hook object that will be used to create object wrappers for plain Prolog code.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/wrappers/NOTES.md#2025-04-06_snippet_1\n\nLANGUAGE: logtalk\nCODE:\n```\nlogtalk_load(wrappers(wrapper)).\n```\n\n----------------------------------------\n\nTITLE: Getting Help for Built-in Non-terminals\nDESCRIPTION: Command to access documentation for a built-in non-terminal (eos//0) using the help system.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/tools/help/SCRIPT.txt#2025-04-06_snippet_4\n\nLANGUAGE: logtalk\nCODE:\n```\n| ?- help::eos//0.\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Types for QuickCheck Tests in Logtalk\nDESCRIPTION: This example shows how to define a custom 'bit' type with values 0 and 1 by implementing the necessary multifile predicates for both type checking and generating arbitrary values.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/devtools/lgtunit.rst#2025-04-06_snippet_21\n\nLANGUAGE: logtalk\nCODE:\n```\n   :- multifile(type::type/1).\n   type::type(bit).\n\n   :- multifile(type::check/2).\n   type::check(bit, Term) :-\n       once((Term == 0; Term == 1)).\n\n   :- multifile(arbitrary::arbitrary/1).\n   arbitrary::arbitrary(bit).\n\n   :- multifile(arbitrary::arbitrary/2).\n   arbitrary::arbitrary(bit, Arbitrary) :-\n       random::member(Arbitrary, [0, 1]).\n```\n\n----------------------------------------\n\nTITLE: Querying extension relationships with scope for prototypes in Logtalk\nDESCRIPTION: Shows how to query extension relationships with their scope information using the extends_object/3 built-in predicate.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/userman/objects.rst#2025-04-06_snippet_21\n\nLANGUAGE: text\nCODE:\n```\n| ?- extends_object(Object, Parent, Scope).\n```\n\n----------------------------------------\n\nTITLE: Defining Category Directive Syntax in Logtalk\nDESCRIPTION: Specifies the various forms of the category/1-4 directive for defining categories in Logtalk, including options for implementing protocols, extending categories, and complementing objects.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/refman/directives/category_1_4.rst.txt#2025-04-06_snippet_0\n\nLANGUAGE: logtalk\nCODE:\n```\ncategory(Category)\n\ncategory(Category,\n    implements(Protocols))\n\ncategory(Category,\n    extends(Categories))\n\ncategory(Category,\n    complements(Objects))\n\ncategory(Category,\n    implements(Protocols),\n    extends(Categories))\n\ncategory(Category,\n    implements(Protocols),\n    complements(Objects))\n\ncategory(Category,\n    extends(Categories),\n    complements(Objects))\n\ncategory(Category,\n    implements(Protocols),\n    extends(Categories),\n    complements(Objects))\n```\n\n----------------------------------------\n\nTITLE: Loading Wrapper Tool in Logtalk\nDESCRIPTION: Command to load the wrapper tool into a Logtalk environment\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/devtools/wrapper.rst#2025-04-06_snippet_0\n\nLANGUAGE: prolog\nCODE:\n```\n| ?- logtalk_load(wrapper(loader)).\n```\n\n----------------------------------------\n\nTITLE: Directory Path Example\nDESCRIPTION: Reference to the tools directory path structure used for developer tools in Logtalk 3.x\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/UPGRADING.md#2025-04-06_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\ntools\n```\n\n----------------------------------------\n\nTITLE: Instantiated Objects Syntax in Logtalk using BNF\nDESCRIPTION: Defines the syntax for referring to instantiated objects (classes) in Logtalk, including individual objects, sequences, and lists, with optional scope specifiers.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/refman/grammar.rst.txt#2025-04-06_snippet_10\n\nLANGUAGE: bnf\nCODE:\n```\ninstantiated_objects ::=\n   instantiated_object\n   | instantiated_object_sequence\n   | instantiated_object_list\n\ninstantiated_object ::=\n   object_identifier\n   | scope \"::\" object_identifier\n\ninstantiated_object_sequence ::=\n   instantiated_object\n   | instantiated_object \",\" instantiated_object_sequence\n\ninstantiated_object_list ::=\n   \"[\" instantiated_object_sequence \"]\"\n```\n\n----------------------------------------\n\nTITLE: Specifying Modes and Proofs for threaded_engine_fetch/1 in Prolog\nDESCRIPTION: Specifies the mode and number of proofs for the threaded_engine_fetch/1 predicate. It takes a term as an argument and returns zero or one proof.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/refman/predicates/threaded_engine_fetch_1.rst.txt#2025-04-06_snippet_1\n\nLANGUAGE: Prolog\nCODE:\n```\nthreaded_engine_fetch(?term) - zero_or_one\n```\n\n----------------------------------------\n\nTITLE: Unicode Special Casing in Prolog\nDESCRIPTION: Implements unicode_special_casing/5 predicate for handling Unicode special casing rules.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/library/unicode_data/README.md#2025-04-06_snippet_1\n\nLANGUAGE: prolog\nCODE:\n```\nunicode_special_casing/5\n```\n\n----------------------------------------\n\nTITLE: Multi-threading Predicates in Logtalk\nDESCRIPTION: Built-in predicates for multi-threading operations in Logtalk, including thread creation, cancellation, and synchronization.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/coding/subethaedit2/Logtalk.mode/Contents/Resources/AutocompleteAdditions.txt#2025-04-06_snippet_8\n\nLANGUAGE: logtalk\nCODE:\n```\nthreaded()\nthreaded_call()\nthreaded_call(, )\nthreaded_once()\nthreaded_once(, )\nthreaded_ignore()\nthreaded_exit()\nthreaded_exit(, )\nthreaded_peek()\nthreaded_peek(, )\nthreaded_cancel()\nthreaded_wait()\nthreaded_notify()\n```\n\n----------------------------------------\n\nTITLE: Breaking Brick Stack\nDESCRIPTION: This snippet breaks the stack in half by moving brick 'b' to the ground.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/bricks/NOTES.md#2025-04-06_snippet_10\n\nLANGUAGE: logtalk\nCODE:\n```\nb::move(3, 1).\n```\n\n----------------------------------------\n\nTITLE: Declaring Object Availability\nDESCRIPTION: RST code showing how to load the automation_report object using the lgtunit loader.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/automation_report_0.rst.txt#2025-04-06_snippet_1\n\nLANGUAGE: rst\nCODE:\n```\n``logtalk_load(lgtunit(loader))``\n```\n\n----------------------------------------\n\nTITLE: Loading the Null Object design pattern implementation\nDESCRIPTION: Loads the sample implementation of the Null Object design pattern from the design patterns library.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/design_patterns/behavioral/null_object/NOTES.md#2025-04-06_snippet_1\n\nLANGUAGE: logtalk\nCODE:\n```\nlogtalk_load(design_patterns('behavioral/null_object/loader')).\n```\n\n----------------------------------------\n\nTITLE: Defining Halstead Metric Object in Logtalk\nDESCRIPTION: Object definition for computing Halstead complexity metrics. Takes a Stroud coefficient parameter for calculating programming time estimates. Implements various complexity metrics including vocabulary, length, volume, difficulty, effort, and bug estimates.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/halstead_metric_1.rst.txt#2025-04-06_snippet_0\n\nLANGUAGE: logtalk\nCODE:\n```\nhalstead_metric(Stroud)\n```\n\n----------------------------------------\n\nTITLE: Using a Debug Monitor for Term Expansion in Logtalk\nDESCRIPTION: This code snippet demonstrates how to use the debug monitor for term expansions. It loads the monitor, sets the events flag, and then loads a file to observe the expansions.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/userman/expansion.rst#2025-04-06_snippet_19\n\nLANGUAGE: Logtalk\nCODE:\n```\n| ?- {expansions_debug}.\n...\n\n| ?- set_logtalk_flag(events, allow).\nyes\n\n| ?- {edcgs(loader)}.\n...\nterm_expansion(begin_of_file,begin_of_file)\nterm_expansion((:-object(gemini)),[(:-object(gemini)),(:-op(1200,xfx,-->>))])\nterm_expansion(acc_info(castor,A,B,C,true),[])\nterm_expansion(pass_info(pollux),[])\nterm_expansion(pred_info(p,1,[castor,pollux]),[])\nterm_expansion(pred_info(q,1,[castor,pollux]),[])\nterm_expansion(pred_info(r,1,[castor,pollux]),[])\nterm_expansion((p(A)-->>B is A+1,q(B),r(B)),(p(A,C,D,E):-B is A+1,q(B,C,F,E),r(B,F,D,E)))\nterm_expansion((q(A)-->>[]),(q(A,B,B,C):-true))\nterm_expansion((r(A)-->>[]),(r(A,B,B,C):-true))\nterm_expansion(end_of_file,end_of_file)\n...\n```\n\n----------------------------------------\n\nTITLE: Advanced URL Linking Examples\nDESCRIPTION: Examples of generating diagrams with GitHub repository links and documentation URLs, including commit-specific links.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/tools/diagrams/SCRIPT.txt#2025-04-06_snippet_4\n\nLANGUAGE: logtalk\nCODE:\n```\n| ?- entity_diagram::library(core, [title('Logtalk core entities'), node_type_captions(true), url_prefixes('https://github.com/LogtalkDotOrg/logtalk3/tree/master/', 'https://logtalk.org/library/'), omit_path_prefixes(['$LOGTALKUSER', '$LOGTALKHOME'])]).\n```\n\n----------------------------------------\n\nTITLE: Loading Logtalk Library Example\nDESCRIPTION: Example showing how to load an individual Logtalk library using the random library as an example.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/libraries/overview.rst.txt#2025-04-06_snippet_0\n\nLANGUAGE: prolog\nCODE:\n```\n| ?- logtalk_load(random(loader)).\n```\n\n----------------------------------------\n\nTITLE: Template and modes for protocol directive in Logtalk\nDESCRIPTION: Specifies the template and mode indicators for the protocol/1-2 directive, showing that protocol identifiers must be provided as input arguments.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/refman/directives/protocol_1_2.rst.txt#2025-04-06_snippet_1\n\nLANGUAGE: logtalk\nCODE:\n```\nprotocol(+protocol_identifier)\n\nprotocol(+protocol_identifier,\n    extends(+extended_protocols))\n```\n\n----------------------------------------\n\nTITLE: Modes and Number of Proofs for specializes_class/2-3\nDESCRIPTION: Specifies the modes and number of proofs for the specializes_class/2 and specializes_class/3 predicates, indicating parameter types and expected backtracking behavior.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/refman/predicates/specializes_class_2_3.rst#2025-04-06_snippet_1\n\nLANGUAGE: logtalk\nCODE:\n```\nspecializes_class(?object_identifier, ?object_identifier) - zero_or_more\nspecializes_class(?object_identifier, ?object_identifier, ?scope) - zero_or_more\n```\n\n----------------------------------------\n\nTITLE: Running the Trealla Prolog script on Windows systems\nDESCRIPTION: Command to display help information for the PowerShell script that creates Trealla Prolog files from Logtalk core files on Windows systems.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/scripts/embedding/trealla/NOTES.md#2025-04-06_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\ntrealla_logtalk_pl.ps1 -h\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Type and Generator for Odd Integers in Logtalk\nDESCRIPTION: Demonstrates how to define a new type 'odd' and its corresponding arbitrary value generator.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/library/arbitrary/NOTES.md#2025-04-06_snippet_3\n\nLANGUAGE: logtalk\nCODE:\n```\n:- multifile(type::type/1).\ntype::type(odd).\n\n:- multifile(type::check/2).\ntype::check(odd, Term) :-\n\t(\tvar(Term) ->\n\t\tthrow(instantiation_error)\n\t;\tinteger(Term),\n\t\tTerm mod 2 =:= 1 ->\n\t\ttrue\n\t;\tthrow(type_error(odd, Term))\n\t).\n\n:- multifile(arbitrary::arbitrary/1).\narbitrary::arbitrary(odd).\n\n:- multifile(arbitrary::arbitrary/2).\narbitrary::arbitrary(odd, Arbitrary) :-\n\ttype::arbitrary(integer, Arbitrary0),\n\t(\tArbitrary0 mod 2 =:= 1 ->\n\t\tArbitrary = Arbitrary0\n\t;\tArbitrary is Arbitrary0 + 1\n\t).\n```\n\n----------------------------------------\n\nTITLE: Loading UUID Library Tests\nDESCRIPTION: Demonstrates how to load the testing module for the UUID library.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/libraries/uuid.rst#2025-04-06_snippet_1\n\nLANGUAGE: logtalk\nCODE:\n```\n| ?- logtalk_load(uuid(tester)).\n```\n\n----------------------------------------\n\nTITLE: Loading Required Packs in Application Loader File\nDESCRIPTION: Initialization code for an application's loader file that loads required packs before loading the application files.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/devtools/packs.rst.txt#2025-04-06_snippet_14\n\nLANGUAGE: prolog\nCODE:\n```\n:- initialization((\n    % load required packs\n    logtalk_load(foo(loader)),\n    logtalk_load(bar(loader)),\n    ...\n    % load application files\n    ...\n)).\n```\n\n----------------------------------------\n\nTITLE: Extended Objects Syntax in Logtalk using BNF\nDESCRIPTION: Defines the syntax for referring to extended objects in Logtalk, including individual objects, sequences, and lists, with optional scope specifiers.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/refman/grammar.rst.txt#2025-04-06_snippet_8\n\nLANGUAGE: bnf\nCODE:\n```\nextended_objects ::=\n   extended_object\n   | extended_object_sequence\n   | extended_object_list\n\nextended_object ::=\n   object_identifier\n   | scope \"::\" object_identifier\n\nextended_object_sequence ::=\n   extended_object\n   | extended_object \",\" extended_object_sequence\n\nextended_object_list ::=\n   \"[\" extended_object_sequence \"]\"\n```\n\n----------------------------------------\n\nTITLE: Definition of instantiates_class Predicate in Logtalk\nDESCRIPTION: Defines the syntax for the instantiates_class/2 and instantiates_class/3 predicates, showing their argument patterns.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/refman/predicates/instantiates_class_2_3.rst#2025-04-06_snippet_0\n\nLANGUAGE: logtalk\nCODE:\n```\ninstantiates_class(Instance, Class)\ninstantiates_class(Instance, Class, Scope)\n```\n\n----------------------------------------\n\nTITLE: Displaying Bird Classification Hierarchy in Logtalk\nDESCRIPTION: A text representation of the bird classification hierarchy used in the expert system. It shows the organization of orders, families, and individual bird species.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/birds/NOTES.md#2025-04-06_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n\t<order>\n\t\t<family>\n\t\t\t<bird>\n\n\torder\n\t\tfalconiforms\n\t\t\tfalcon\n\t\t\t\tperegrine_falcon\n\t\t\t\tsparrow_hawk\n\t\t\tvulture\n\t\t\t\tcalifornia_condor\n\t\t\t\tturkey_vulture\n\t\tpasserformes\n\t\t\tflycatcher\n\t\t\t\tash_throated_flycatcher\n\t\t\t\tgreat_crested_flycatcher\n\t\t\tswallow\n\t\t\t\tbarn_swallow\n\t\t\t\tcliff_swallow\n\t\t\t\tpurple_martin\n\t\ttubenose\n\t\t\tfulmar\n\t\t\talbatross\n\t\t\t\tblack_footed_albatross\n\t\t\t\tlaysan_albatross\n\t\twaterfowl\n\t\t\tduck\n\t\t\t\tfemale_mallard\n\t\t\t\tmale_mallard\n\t\t\t\tpintail\n\t\t\tgoose\n\t\t\t\tcanada_goose\n\t\t\t\tsnow_goose\n\t\t\tswan\n\t\t\t\ttrumpeter_swan\n\t\t\t\twhistling_swan\n```\n\n----------------------------------------\n\nTITLE: Simple Text Output Assertion in Logtalk\nDESCRIPTION: Returns an assertion for checking that the default temporary file contains the expected text contents. Simplifies creating test assertions for standard output testing.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/lgtunit_0.rst.txt#2025-04-06_snippet_49\n\nLANGUAGE: logtalk\nCODE:\n```\ntext_output_assertion(Contents,Assertion)\n```\n\n----------------------------------------\n\nTITLE: Suppressing Compiler Errors in Logtalk Tests\nDESCRIPTION: Demonstrates how to suppress expected compiler errors by defining clauses for the logtalk::message_hook/4 hook predicate. This example suppresses a specific domain error.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/tools/lgtunit/NOTES.md#2025-04-06_snippet_33\n\nLANGUAGE: Logtalk\nCODE:\n```\n:- multifile(logtalk::message_hook/4).\n:- dynamic(logtalk::message_hook/4).\n\n% ignore expected domain error\nlogtalk::message_hook(compiler_error(_,_,error(domain_error(foo,bar),_)), error, core, _).\n```\n\n----------------------------------------\n\nTITLE: Defining list occurrences in Logtalk\nDESCRIPTION: New library predicates to count the number of occurrences of list elements in Logtalk.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/RELEASE_NOTES.md#2025-04-06_snippet_2\n\nLANGUAGE: Logtalk\nCODE:\n```\nlist::occurrences(List, Occurrences).\nlist::occurrences(List, Element, Count).\n```\n\n----------------------------------------\n\nTITLE: Creating GNU Prolog Executable with Logtalk and 'searching' Example\nDESCRIPTION: This snippet shows how to create a GNU Prolog executable that includes the Logtalk compiler/runtime and the 'searching' example. It demonstrates how to load a specific Logtalk file and execute a query.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/scripts/embedding/SCRIPT.txt#2025-04-06_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ cd \"$LOGTALKHOME/scripts/embedding/gprolog/\"\n$ ./gprolog_embed_logtalk.sh -c -d \"$HOME\"/collect -l \"$LOGTALKUSER/examples/searching/loader.lgt\"\n$ ~/collect/logtalk\n| ?- farmer::initial_state(Initial), depth_first(10)::solve(farmer, Initial, Path), farmer::print_path(Path).\n```\n\n----------------------------------------\n\nTITLE: Qualifying Goal in Default User Module\nDESCRIPTION: Abstract representation of how to qualify a goal so that it's called in the default user module, removing references to specific Prolog compilers.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/RELEASE_NOTES.md#2025-04-06_snippet_101\n\nLANGUAGE: Logtalk\nCODE:\n```\n% Abstract qualification of goal\nuser::Goal\n```\n\n----------------------------------------\n\nTITLE: Loading Meta Compiler Library in Logtalk\nDESCRIPTION: This snippet shows how to load the main entities of the meta_compiler library using the loader.lgt file.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/libraries/meta_compiler.rst.txt#2025-04-06_snippet_0\n\nLANGUAGE: Prolog\nCODE:\n```\n| ?- logtalk_load(meta_compiler(loader)).\n```\n\n----------------------------------------\n\nTITLE: Loading Profiling Example in Logtalk\nDESCRIPTION: Loads the profiling example and the required library files.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/profiling/NOTES.md#2025-04-06_snippet_1\n\nLANGUAGE: logtalk\nCODE:\n```\nlogtalk_load(profiling(loader)).\n```\n\n----------------------------------------\n\nTITLE: Current Event Predicate Declaration\nDESCRIPTION: Declaration of the current_event/5 predicate that enumerates defined events by backtracking. The predicate takes event type, object, message, sender and monitor arguments.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/refman/predicates/current_event_5.rst#2025-04-06_snippet_0\n\nLANGUAGE: prolog\nCODE:\n```\ncurrent_event(Event, Object, Message, Sender, Monitor)\n```\n\n----------------------------------------\n\nTITLE: Defining Library Alias Using Source Directory in Logtalk\nDESCRIPTION: An example showing how to define a library alias based on the source directory using the directory key in an initialization directive.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/refman/predicates/logtalk_load_context_2.rst.txt#2025-04-06_snippet_3\n\nLANGUAGE: logtalk\nCODE:\n```\n% define a library alias based on the source directory\n:- initialization((\n    logtalk_load_context(directory, Directory),\n    assertz(logtalk_library_path(my_app, Directory))\n)).\n```\n\n----------------------------------------\n\nTITLE: Implementing Incremented For-To Loop in Logtalk\nDESCRIPTION: Defines an incremented for-to loop construct that calls a Goal while counting up from First to Last with a specified Increment, binding Count to each value. It uses meta-predicate notation to handle callable arguments.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/loopp_0.rst.txt#2025-04-06_snippet_6\n\nLANGUAGE: Logtalk\nCODE:\n```\nforto(Count,First,Last,Increment,Goal)\n```\n\n----------------------------------------\n\nTITLE: Printing Initial Object Log\nDESCRIPTION: Prints the initial log of the object, which is automatically initialized when the object is loaded.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/logs/NOTES.md#2025-04-06_snippet_2\n\nLANGUAGE: logtalk\nCODE:\n```\nobject::print_log.\n```\n\n----------------------------------------\n\nTITLE: Listing Predicate Properties\nDESCRIPTION: Lists all properties of the exports module's public predicate p/1\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/modules/NOTES.md#2025-04-06_snippet_5\n\nLANGUAGE: logtalk\nCODE:\n```\n%%table\nexports::predicate_property(p(_), Prop).\n```\n\n----------------------------------------\n\nTITLE: Defining Context Breakpoints for Specific Objects in Logtalk\nDESCRIPTION: Example of setting a context breakpoint that will pause execution whenever a predicate defined on the object named 'foo' is called, regardless of sender or self.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/userman/debugging.rst.txt#2025-04-06_snippet_13\n\nLANGUAGE: text\nCODE:\n```\n| ?- debugger::spy(_, foo, _, _).\n\nSpy point set.\nyes\n```\n\n----------------------------------------\n\nTITLE: Defining Dynamic Predicate for Conditional Breakpoints in Logtalk\nDESCRIPTION: Defines a dynamic predicate 'conditional_breakpoint_/3' that represents a table of conditional breakpoints. It takes entity, line, and condition as arguments.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/debugger_0.rst.txt#2025-04-06_snippet_15\n\nLANGUAGE: Logtalk\nCODE:\n```\nconditional_breakpoint_/3\n```\n\n----------------------------------------\n\nTITLE: Querying Descendant2 Interface\nDESCRIPTION: Queries the interface of 'descendant2' which extends 'prototype2' using public inheritance, showing visibility through inheritance chain.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/inheritance/NOTES.md#2025-04-06_snippet_7\n\nLANGUAGE: logtalk\nCODE:\n```\ndescendant2::interface.\n```\n\n----------------------------------------\n\nTITLE: Entity Relationships and Directives in Logtalk\nDESCRIPTION: Various directives for specifying entity relationships, encoding, and ending entity definitions in Logtalk.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/coding/subethaedit2/Logtalk.mode/Contents/Resources/AutocompleteAdditions.txt#2025-04-06_snippet_2\n\nLANGUAGE: logtalk\nCODE:\n```\nencoding()\ncomplements()\nextends()\nimplements()\nimports()\ninstantiates()\nspecializes()\nend_object.\nend_protocol.\nend_category.\n```\n\n----------------------------------------\n\nTITLE: Defining the multifile_directive_ predicate in Logtalk\nDESCRIPTION: Table of declared multifile predicates. This dynamic predicate tracks multifile predicate declarations with the object, source line number, and predicate indicator.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/wrapper_0.rst.txt#2025-04-06_snippet_22\n\nLANGUAGE: logtalk\nCODE:\n```\nmultifile_directive_(Object,Line,Predicate)\n```\n\n----------------------------------------\n\nTITLE: Checking Versions in Logtalk\nDESCRIPTION: Prints the versions of Logtalk, Prolog backend, and kernel when running in a notebook environment.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/design_patterns/behavioral/command/NOTES.md#2025-04-06_snippet_0\n\nLANGUAGE: logtalk\nCODE:\n```\n%versions\n```\n\n----------------------------------------\n\nTITLE: Logtalk Object Definition with Directives\nDESCRIPTION: Defines a prototype object with various directives including info, built-in settings, initialization, and module usage declarations.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/coding/subethaedit4/Logtalk.seemode/Contents/Resources/ExampleSyntax.txt#2025-04-06_snippet_0\n\nLANGUAGE: logtalk\nCODE:\n```\n:- object(prototype,\n\timplements(protocol),\n\timports(category),\n\textends(parent)).\n\n\t:- info([\n\t\tversion is 1:51:0,\n\t\tauthor is 'Paulo Moura',\n\t\tdate is 2024-09-14,\n\t\tcomment is 'Sample prototype for testing syntax coloring.'\n\t]).\n```\n\n----------------------------------------\n\nTITLE: Accessing Logtalk Compilation Target in Prolog\nDESCRIPTION: New key added to the logtalk_load_context/2 built-in predicate for getting the full path of the intermediate Prolog file generated during compilation of a Logtalk source file.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/RELEASE_NOTES.md#2025-04-06_snippet_112\n\nLANGUAGE: Prolog\nCODE:\n```\nlogtalk_load_context(target, Path)\n```\n\n----------------------------------------\n\nTITLE: Defining Registry Clone URL in Logtalk\nDESCRIPTION: Specifies the registry git clone URL predicate. It should return an HTTPS URL ending with .git as an atom.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/registry_protocol_0.rst.txt#2025-04-06_snippet_3\n\nLANGUAGE: Logtalk\nCODE:\n```\nclone(URL)\n```\n\n----------------------------------------\n\nTITLE: Sphinx Documentation Dependencies Configuration\nDESCRIPTION: Specifies exact versions of Python packages required for building Sphinx documentation with Read the Docs theme, spell checking support, and syntax highlighting.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/sources/requirements.txt#2025-04-06_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nsphinx==7.4.7\nsphinx_rtd_theme==2.0.0\nsphinxcontrib-spelling==8.0.1\npygments==2.19.1\n```\n\n----------------------------------------\n\nTITLE: Wrapping Prolog Code in Logtalk Object\nDESCRIPTION: Creates a Logtalk object that includes a Prolog file for analysis. This allows applying Logtalk metrics to plain Prolog code.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/devtools/code_metrics.rst.txt#2025-04-06_snippet_6\n\nLANGUAGE: logtalk\nCODE:\n```\n:- object(code).\n    :- include('code.pl').\n:- end_object.\n```\n\n----------------------------------------\n\nTITLE: Loading Metagol Port in Logtalk\nDESCRIPTION: Command to load all entities in the Metagol port using the loader.lgt file.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/ports/metagol/NOTES.md#2025-04-06_snippet_0\n\nLANGUAGE: Logtalk\nCODE:\n```\n| ?- logtalk_load(metagol(loader)).\n```\n\n----------------------------------------\n\nTITLE: Reading Excel Spreadsheet in Logtalk\nDESCRIPTION: Logtalk code to read a sample Excel spreadsheet and store its contents in a user object.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/apache_poi/NOTES.md#2025-04-06_snippet_3\n\nLANGUAGE: logtalk\nCODE:\n```\nspreadsheet::load('test_files/sample.xlsx', user, db).\n```\n\n----------------------------------------\n\nTITLE: Enumerating Default Options with default_option/1 in Logtalk\nDESCRIPTION: Provides access to default options for wrapper generation via backtracking. Allows inspection of individual default settings used in the conversion process.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/wrapper_0.rst.txt#2025-04-06_snippet_12\n\nLANGUAGE: Logtalk\nCODE:\n```\ndefault_option/1\n```\n\n----------------------------------------\n\nTITLE: Loading State Design Pattern Implementation\nDESCRIPTION: This snippet loads the State design pattern sample implementation from the specified path.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/design_patterns/behavioral/state/NOTES.md#2025-04-06_snippet_1\n\nLANGUAGE: logtalk\nCODE:\n```\nlogtalk_load(design_patterns('behavioral/state/loader')).\n```\n\n----------------------------------------\n\nTITLE: Delete Dictionary Entry\nDESCRIPTION: Deletes a matching key-value pair by traversing nested keys.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/nested_dictionary_protocol_0.rst.txt#2025-04-06_snippet_8\n\nLANGUAGE: logtalk\nCODE:\n```\ndelete_in(OldDictionary,Keys,Value,NewDictionary)\n```\n\n----------------------------------------\n\nTITLE: Using Inequality Constraints with ToyCHR\nDESCRIPTION: Example query demonstrating transitive inequality constraints with ToyCHR. When given leq(X,Y) and leq(Y,Z), the system infers leq(X,Z) through constraint propagation.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/ports/toychr/SCRIPT.txt#2025-04-06_snippet_3\n\nLANGUAGE: prolog\nCODE:\n```\n| ?- leq::chr_is(Result, (leq(X,Y), leq(Y,Z))).\n```\n\n----------------------------------------\n\nTITLE: Loading a Prolog Module Library in Logtalk\nDESCRIPTION: Example of loading a CLP(FD) Prolog library in a Logtalk loader file with an empty import list to avoid adding the module-exported predicates to plain Prolog.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/userman/predicates.rst.txt#2025-04-06_snippet_57\n\nLANGUAGE: prolog\nCODE:\n```\n:- use_module(library(clpfd), []).\n```\n\n----------------------------------------\n\nTITLE: Loading bup_interpreter in Logtalk\nDESCRIPTION: This code snippet shows how to load the bup_interpreter object in Logtalk. It requires the verdi_neruda loader.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/bup_interpreter_0.rst.txt#2025-04-06_snippet_0\n\nLANGUAGE: Logtalk\nCODE:\n```\nlogtalk_load(verdi_neruda(loader))\n```\n\n----------------------------------------\n\nTITLE: Loading CBOR Object in Logtalk\nDESCRIPTION: Command to load the CBOR object implementation into Logtalk environment. Required before using any CBOR functionality.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/cbor_0.rst.txt#2025-04-06_snippet_0\n\nLANGUAGE: logtalk\nCODE:\n```\nlogtalk_load(cbor(loader))\n```\n\n----------------------------------------\n\nTITLE: Testing the UUID Library in Logtalk\nDESCRIPTION: Shows how to load and run the test suite for the UUID library. This is useful for verifying that the library functions correctly in your environment.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/library/uuid/NOTES.md#2025-04-06_snippet_1\n\nLANGUAGE: logtalk\nCODE:\n```\n| ?- logtalk_load(uuid(tester)).\n```\n\n----------------------------------------\n\nTITLE: Defining Table of Contents for Logtalk Compilation Predicates\nDESCRIPTION: This reStructuredText code defines a table of contents for documentation pages related to Logtalk predicates for compiling and loading source files. It includes links to individual predicate documentation pages.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/refman/predicates/compiling_predicates.rst.txt#2025-04-06_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. toctree::\n   :maxdepth: 1\n\n   logtalk_compile_1\n   logtalk_compile_2\n   logtalk_load_1\n   logtalk_load_2\n   logtalk_make_0\n   logtalk_make_1\n   logtalk_make_target_action_1\n   logtalk_library_path_2\n   logtalk_load_context_2\n```\n\n----------------------------------------\n\nTITLE: Using imports_category/3 in Prolog Query\nDESCRIPTION: Example query using imports_category/3 to enumerate objects that privately import the diagram category.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/refman/predicates/imports_category_2_3.rst.txt#2025-04-06_snippet_3\n\nLANGUAGE: Prolog\nCODE:\n```\n| ?- imports_category(Object, diagram, private).\n```\n\n----------------------------------------\n\nTITLE: Example Usage of logtalk_load/2 in Logtalk\nDESCRIPTION: Demonstrates various ways to use the logtalk_load/2 predicate, including loading a single file, loading from a library, and using compiler flags.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/refman/predicates/logtalk_load_2.rst.txt#2025-04-06_snippet_1\n\nLANGUAGE: Logtalk\nCODE:\n```\n% compile and load the \"list\" source file in the\n% current directory using default compiler flags:\n| ?- logtalk_load(list, []).\n\n% compile and load the \"tree\" source file in the \"types\"\n% library directory with the source_data flag turned on:\n| ?- logtalk_load(types(tree)).\n\n% compile and load the \"file_system\" source file in the\n% current directory with portability warnings suppressed:\n| ?- logtalk_load(file_system, [portability(silent)]).\n```\n\n----------------------------------------\n\nTITLE: Loading Marker Interface Design Pattern Implementation\nDESCRIPTION: This code loads the sample implementation of the Marker Interface design pattern from the design patterns library.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/design_patterns/structural/marker_interface/NOTES.md#2025-04-06_snippet_1\n\nLANGUAGE: logtalk\nCODE:\n```\nlogtalk_load(design_patterns('structural/marker_interface/loader')).\n```\n\n----------------------------------------\n\nTITLE: Generating Allure Report with Project and Commit in PowerShell\nDESCRIPTION: Shows how to generate an Allure report using the logtalk_allure_report script in PowerShell, specifying the project name and git commit hash.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/devtools/lgtunit.rst.txt#2025-04-06_snippet_46\n\nLANGUAGE: powershell\nCODE:\n```\nPS> logtalk_allure_report -e \"Project='Deep Thought',Commit=bf166b6\"\n```\n\n----------------------------------------\n\nTITLE: Printing Version Information in Logtalk Jupyter Notebook\nDESCRIPTION: Displays the current versions of Logtalk, the Prolog backend, and the kernel when running the notebook.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/lambdas_compiled/NOTES.md#2025-04-06_snippet_0\n\nLANGUAGE: logtalk\nCODE:\n```\n%versions\n```\n\n----------------------------------------\n\nTITLE: Retrieving Default Instance Variable Values\nDESCRIPTION: Gets the initial values of the instance variable for three instances, demonstrating the inheritance of default values from the root class.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/instvars/NOTES.md#2025-04-06_snippet_2\n\nLANGUAGE: logtalk\nCODE:\n```\ninstance1::ivar(Value1), instance2::ivar(Value2), instance3::ivar(Value3).\n```\n\n----------------------------------------\n\nTITLE: Loading Lazy Initialization Pattern Implementation\nDESCRIPTION: Loads the design pattern sample implementation from the specified path.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/design_patterns/creational/lazy_initialization/NOTES.md#2025-04-06_snippet_1\n\nLANGUAGE: logtalk\nCODE:\n```\nlogtalk_load(design_patterns('creational/lazy_initialization/loader')).\n```\n\n----------------------------------------\n\nTITLE: Defining rescale/3 Predicate for Number Lists in Logtalk\nDESCRIPTION: Rescales all numbers in a list by a given factor.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/numberlistp_0.rst.txt#2025-04-06_snippet_19\n\nLANGUAGE: Logtalk\nCODE:\n```\nrescale(List,Factor,RescaledList)\n```\n\n----------------------------------------\n\nTITLE: Setting Hook Object with Logtalk Directive\nDESCRIPTION: Directive to set a hook object for pre-processing a source file, used at the top of the file.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/libraries/hook_flows.rst.txt#2025-04-06_snippet_2\n\nLANGUAGE: Logtalk\nCODE:\n```\n:- set_logtalk_flag(hook, HookObject).\n```\n\n----------------------------------------\n\nTITLE: Tagged Asynchronous Calls in Logtalk\nDESCRIPTION: Demonstrates using threaded_call/2 and threaded_exit/2 with tags to link specific asynchronous calls and their results.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/userman/threads.rst#2025-04-06_snippet_5\n\nLANGUAGE: Logtalk\nCODE:\n```\n?- threaded_call(member(X, [1,2,3]), Tag).\n\nTag = 1\nyes\n\n?- threaded_call(member(X, [1,2,3]), Tag).\n\nTag = 2\nyes\n\n?- threaded_exit(member(X, [1,2,3]), 2).\n\nX = 1 ;\nX = 2 ;\nX = 3\nyes\n```\n\n----------------------------------------\n\nTITLE: Loading Git Library Tests\nDESCRIPTION: Demonstrates loading the test suite for the git library.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/libraries/git.rst.txt#2025-04-06_snippet_1\n\nLANGUAGE: logtalk\nCODE:\n```\n| ?- logtalk_load(git(tester)).\n```\n\n----------------------------------------\n\nTITLE: New Predicates in statistics Library\nDESCRIPTION: Added new predicates fractile/3 and weighted_mean/3 to the statistics library.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/RELEASE_NOTES.md#2025-04-06_snippet_23\n\nLANGUAGE: Logtalk\nCODE:\n```\nfractile(List, Fraction, Value).\nweighted_mean(Values, Weights, Mean).\n```\n\n----------------------------------------\n\nTITLE: Specifying Modes for implements_protocol/2-3 in Logtalk\nDESCRIPTION: Defines the modes and number of proofs for the implements_protocol/2-3 predicate. It shows that the predicate can be called with various combinations of instantiated and uninstantiated arguments.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/refman/predicates/implements_protocol_2_3.rst#2025-04-06_snippet_1\n\nLANGUAGE: Prolog\nCODE:\n```\nimplements_protocol(?object_identifier, ?protocol_identifier) - zero_or_more\nimplements_protocol(?category_identifier, ?protocol_identifier) - zero_or_more\n\nimplements_protocol(?object_identifier, ?protocol_identifier, ?scope) - zero_or_more\nimplements_protocol(?category_identifier, ?protocol_identifier, ?scope) - zero_or_more\n```\n\n----------------------------------------\n\nTITLE: Configuring Dev Container for VSCode with Logtalk\nDESCRIPTION: JSON configuration file for setting up a VSCode development container with Logtalk. This configuration specifies the container image, required extensions, and Logtalk settings for integrating with VSCode.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/scripts/docker/portable/README.md#2025-04-06_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"name\": \"Logtalk\",\n    \"image\": \"logtalk/logtalk3-portable:latest\",\n    \"customizations\": {\n        \"vscode\": {\n            \"extensions\": [\n                \"logtalkdotorg.logtalk-extension-pack\"\n            ],\n            \"settings\": {\n                \"logtalk.home.path\": \"/usr/local/share/logtalk\",\n                \"logtalk.user.path\": \"/root/logtalk\",\n                \"logtalk.backend\": \"swi\"\n            }\n         }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Prolog Multifile Predicates in Logtalk\nDESCRIPTION: Shows how to define clauses for Prolog module multifile predicates within Logtalk objects, allowing integration with constraint packages and other module libraries.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/userman/predicates.rst#2025-04-06_snippet_66\n\nLANGUAGE: prolog\nCODE:\n```\n:- multifile(clpfd:run_propagator/2).\nclpfd:run_propagator(..., ...) :-\n    ...\n```\n\n----------------------------------------\n\nTITLE: Defining Registry Archive URL in Logtalk\nDESCRIPTION: Specifies the registry archive download URL predicate. It should return an HTTPS URL as an atom.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/registry_protocol_0.rst.txt#2025-04-06_snippet_4\n\nLANGUAGE: Logtalk\nCODE:\n```\narchive(URL)\n```\n\n----------------------------------------\n\nTITLE: Thread synchronization predicates\nDESCRIPTION: Experimental predicates for thread coordination allowing suspension and notification between threads.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/RELEASE_NOTES.md#2025-04-06_snippet_145\n\nLANGUAGE: Logtalk\nCODE:\n```\nthreaded_wait/1\nthreaded_notify/1\n```\n\n----------------------------------------\n\nTITLE: Creating Elderly Driver Instance\nDESCRIPTION: Creates a new driver instance for Mr. Magoo with an age of 87.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/design_patterns/structural/proxy/NOTES.md#2025-04-06_snippet_2\n\nLANGUAGE: logtalk\nCODE:\n```\ndriver::new(magoo, 'Mr. Magoo', 87).\n```\n\n----------------------------------------\n\nTITLE: Generating Code Coverage Reports with GitHub Source Links\nDESCRIPTION: Command to generate an HTML coverage report with links to source code on GitHub. Uses xsltproc with the url parameter pointing to the GitHub repository.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/tools/lgtunit/NOTES.md#2025-04-06_snippet_57\n\nLANGUAGE: shell\nCODE:\n```\n$ xsltproc \\\n  --stringparam url https://github.com/LogtalkDotOrg/logtalk3/blob/master \\\n  -o coverage_report.html coverage_report.xml\n```\n\n----------------------------------------\n\nTITLE: Configuring Jupyter Notebook for Logtalk\nDESCRIPTION: This YAML configuration sets up a Jupyter notebook for Logtalk programming. It specifies the text representation format, Jupytext version, and kernel details for Logtalk.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/document_converter/jars/NOTES.md#2025-04-06_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\njupyter:\n  jupytext:\n    text_representation:\n      extension: .md\n      format_name: markdown\n      format_version: '1.3'\n      jupytext_version: 1.16.7\n  kernelspec:\n    display_name: Logtalk\n    language: logtalk\n    name: logtalk_kernel\n---\n```\n\n----------------------------------------\n\nTITLE: Defining ancestor/1 predicate in Logtalk\nDESCRIPTION: Returns all object ancestors through backtracking. It is a static predicate that can be called with either a bound or unbound Ancestor argument.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/hierarchyp_0.rst.txt#2025-04-06_snippet_0\n\nLANGUAGE: Logtalk\nCODE:\n```\nancestor(Ancestor)\n```\n\n----------------------------------------\n\nTITLE: Loading Union-Find Library in Logtalk\nDESCRIPTION: Instructions for loading all entities in the union-find library using the loader file.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/libraries/union_find.rst.txt#2025-04-06_snippet_0\n\nLANGUAGE: Logtalk\nCODE:\n```\n| ?- logtalk_load(union_find(loader)).\n```\n\n----------------------------------------\n\nTITLE: Protocol Creation Example\nDESCRIPTION: Example showing how to create a new logging protocol that extends monitoring protocol with specific public predicates.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/refman/predicates/create_protocol_3.rst#2025-04-06_snippet_2\n\nLANGUAGE: prolog\nCODE:\n```\n| ?- create_protocol(\n           logging,\n           [extends(monitoring)],\n           [public([log_file/1, log_on/0, log_off/0])]\n        ).\n```\n\n----------------------------------------\n\nTITLE: Loading the slides example\nDESCRIPTION: This snippet loads the slides example using the Logtalk loader.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/slides/NOTES.md#2025-04-06_snippet_1\n\nLANGUAGE: logtalk\nCODE:\n```\nlogtalk_load(slides(loader)).\n```\n\n----------------------------------------\n\nTITLE: Specifying Mode and Number of Proofs for retractall/1 in Logtalk\nDESCRIPTION: Indicates the mode declaration for the retractall/1 method, showing it expects a non-variable callable term as input and produces one proof.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/refman/methods/retractall_1.rst#2025-04-06_snippet_1\n\nLANGUAGE: logtalk\nCODE:\n```\nretractall(@callable) - one\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Static Binding in Logtalk\nDESCRIPTION: Example of static binding in Logtalk, which has zero overhead compared to plain Prolog calls. This requires the optimize flag to be turned on.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/userman/performance.rst.txt#2025-04-06_snippet_0\n\nLANGUAGE: logtalk\nCODE:\n```\n% Assuming optimize flag is on\n:- set_logtalk_flag(optimize, on).\n\n% Object definition\n:- object(example).\n    :- public(test/0).\n    test :- other_object::static_method.\n:- end_object.\n```\n\n----------------------------------------\n\nTITLE: Predicate Definition in Logtalk\nDESCRIPTION: Defines the basic syntax and usage of the abolish_category/1 predicate which takes a category identifier as input and abolishes the corresponding dynamic category.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/refman/predicates/abolish_category_1.rst#2025-04-06_snippet_0\n\nLANGUAGE: logtalk\nCODE:\n```\nabolish_category(Category)\n```\n\n----------------------------------------\n\nTITLE: Specifying Modes and Number of Proofs for true/0 in Logtalk\nDESCRIPTION: Defines the mode and number of proofs for the true/0 built-in method. It has one mode with one proof.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/refman/methods/true_0.rst#2025-04-06_snippet_1\n\nLANGUAGE: logtalk\nCODE:\n```\ntrue - one\n```\n\n----------------------------------------\n\nTITLE: Implementing an Attributes Category Using Self in Logtalk\nDESCRIPTION: Category implementation of attribute management using the self context. This approach uses the message to self control structure to ensure that attribute storage is managed by the object importing the category.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/userman/predicates.rst.txt#2025-04-06_snippet_24\n\nLANGUAGE: logtalk\nCODE:\n```\n:- category(attributes).\n\n    :- public(get/2).\n    :- public(set/2).\n\n    :- private(attribute_/2).\n    :- dynamic(attribute_/2).\n\n    get(Var, Value) :-\n        ::attribute_(Var, Value).\n\n    set(Var, Value) :-\n        ::retractall(attribute_(Var, _)),\n        ::asserta(attribute_(Var, Value).\n\n:- end_category.\n```\n\n----------------------------------------\n\nTITLE: Abbreviated Commit Hash Query Predicate\nDESCRIPTION: Predicate that returns the abbreviated hash of the latest commit.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/git_protocol_0.rst.txt#2025-04-06_snippet_4\n\nLANGUAGE: prolog\nCODE:\n```\ncommit_hash_abbreviated(+Directory, -Hash)\n```\n\n----------------------------------------\n\nTITLE: Call Unpatched Bird Sound Method\nDESCRIPTION: Demonstrates calling the original make_sound/0 predicate before applying the around method patch.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/around_methods/NOTES.md#2025-04-06_snippet_2\n\nLANGUAGE: logtalk\nCODE:\n```\nbird::make_sound.\n```\n\n----------------------------------------\n\nTITLE: Branch Query Predicate\nDESCRIPTION: Predicate that returns the name of the current git branch for a given directory. Fails if the directory is not a git repository.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/git_protocol_0.rst.txt#2025-04-06_snippet_0\n\nLANGUAGE: prolog\nCODE:\n```\nbranch(+Directory, ?Branch)\n```\n\n----------------------------------------\n\nTITLE: Endif Directive Template\nDESCRIPTION: The template showing the endif directive format used in Logtalk programs.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/refman/directives/endif_0.rst.txt#2025-04-06_snippet_1\n\nLANGUAGE: logtalk\nCODE:\n```\nendif\n```\n\n----------------------------------------\n\nTITLE: Checking Highlight support for Logtalk\nDESCRIPTION: Command to check if Highlight installation already includes support for Logtalk by listing available language scripts and looking for the 'lgt' extension.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/coding/highlight/NOTES.md#2025-04-06_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nhighlight --list-scripts=langs\n```\n\n----------------------------------------\n\nTITLE: Declaration of set_write_max_depth Predicate in Logtalk\nDESCRIPTION: Declaration of the set_write_max_depth/1 predicate that sets the default term maximum write depth. For most backends, a value of zero means the whole term is written. It takes a non-negative integer parameter.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/debuggerp_0.rst.txt#2025-04-06_snippet_25\n\nLANGUAGE: logtalk\nCODE:\n```\nset_write_max_depth(MaxDepth)\n```\n\n----------------------------------------\n\nTITLE: Mode Declaration for abolish/1 Method in Logtalk\nDESCRIPTION: Specifies the call mode for the abolish/1 method, indicating it takes a non-variable predicate indicator as input and succeeds exactly once.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/refman/methods/abolish_1.rst#2025-04-06_snippet_1\n\nLANGUAGE: logtalk\nCODE:\n```\nabolish(@predicate_indicator) - one\n```\n\n----------------------------------------\n\nTITLE: Defining Protocols and Categories in Logtalk\nDESCRIPTION: Syntax for defining protocols and categories in Logtalk, including inheritance and implementation relationships.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/coding/subethaedit2/Logtalk.mode/Contents/Resources/AutocompleteAdditions.txt#2025-04-06_snippet_1\n\nLANGUAGE: logtalk\nCODE:\n```\nprotocol(, extends()).\nprotocol().\ncategory(, complements()).\ncategory(, extends()).\ncategory(, implements()).\ncategory().\n```\n\n----------------------------------------\n\nTITLE: Running the metered concurrency example\nDESCRIPTION: This snippet executes the metered concurrency example by calling the run predicate of the metered_concurrency object.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/threads/metered_concurrency/NOTES.md#2025-04-06_snippet_2\n\nLANGUAGE: logtalk\nCODE:\n```\nmetered_concurrency::run.\n```\n\n----------------------------------------\n\nTITLE: Declaring automation_report Object Name\nDESCRIPTION: RST directive declaring the automation_report object name in the documentation.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/automation_report_0.rst.txt#2025-04-06_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n``automation_report``\n```\n\n----------------------------------------\n\nTITLE: Using Command Invoker\nDESCRIPTION: Demonstrates storing and executing multiple commands using the switch invoker object.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/design_patterns/behavioral/command/NOTES.md#2025-04-06_snippet_4\n\nLANGUAGE: logtalk\nCODE:\n```\nswitch::(\n\t\tstore_and_execute(flip_up_command(light(kitchen))),\n\t\tstore_and_execute(flip_up_command(coffee_maker))\n\t).\n```\n\n----------------------------------------\n\nTITLE: Installation File Paths for BBEdit/TextWrangler\nDESCRIPTION: Directory paths for installing the logtalk.plist file to enable Logtalk syntax highlighting in BBEdit and TextWrangler editors.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/coding/bbedit/NOTES.md#2025-04-06_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n~/Library/Application Support/BBEdit/Language Modules/\n~/Library/Application Support/TextWrangler/Language Modules/\n\n/Library/Application Support/BBEdit/Language Modules/\n/Library/Application Support/TextWrangler/Language Modules/\n```\n\n----------------------------------------\n\nTITLE: Predicate Signature in Logtalk\nDESCRIPTION: Basic signature and usage patterns for the logtalk_compile/2 predicate, showing both single file and multiple files compilation formats.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/refman/predicates/logtalk_compile_2.rst#2025-04-06_snippet_0\n\nLANGUAGE: logtalk\nCODE:\n```\nlogtalk_compile(File, Flags)\nlogtalk_compile(Files, Flags)\n```\n\n----------------------------------------\n\nTITLE: Loading the UUID Library in Logtalk\nDESCRIPTION: Demonstrates how to load the UUID library in Logtalk by loading the loader.lgt file. This is the first step required before using any of the library's functionality.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/library/uuid/NOTES.md#2025-04-06_snippet_0\n\nLANGUAGE: logtalk\nCODE:\n```\n| ?- logtalk_load(uuid(loader)).\n```\n\n----------------------------------------\n\nTITLE: Virtual Environment Configuration\nDESCRIPTION: Code pattern mentioned in relation to creating and using virtual environments with the packs tool system.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/RELEASE_NOTES.md#2025-04-06_snippet_28\n\nLANGUAGE: Logtalk\nCODE:\n```\npacks::save('environment_name').\npacks::restore('environment_name').\n```\n\n----------------------------------------\n\nTITLE: Loading Car Engines Example in Logtalk\nDESCRIPTION: Loads the carengines example using the loader file.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/carengines/NOTES.md#2025-04-06_snippet_1\n\nLANGUAGE: logtalk\nCODE:\n```\nlogtalk_load(carengines(loader)).\n```\n\n----------------------------------------\n\nTITLE: Testing Metagol Port in Logtalk\nDESCRIPTION: Command to load and run tests for the Metagol port using the tester.lgt file.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/ports/metagol/NOTES.md#2025-04-06_snippet_1\n\nLANGUAGE: Logtalk\nCODE:\n```\n| ?- logtalk_load(metagol(tester)).\n```\n\n----------------------------------------\n\nTITLE: Loading the Arbitrary Library in Logtalk\nDESCRIPTION: Shows how to load all entities in the 'arbitrary' library using the loader file.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/library/arbitrary/NOTES.md#2025-04-06_snippet_0\n\nLANGUAGE: prolog\nCODE:\n```\n| ?- logtalk_load(arbitrary(loader)).\n```\n\n----------------------------------------\n\nTITLE: Testing hook object with alternative goals\nDESCRIPTION: Shows the use of a hook object 'cooked' with alternative goals.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/expansion/NOTES.md#2025-04-06_snippet_15\n\nLANGUAGE: logtalk\nCODE:\n```\ncooked << (ha, hb, hc).\n```\n\n----------------------------------------\n\nTITLE: Predicate Definition in Logtalk\nDESCRIPTION: Defines the basic syntax and usage of the abolish_category/1 predicate which takes a category identifier as input and abolishes the corresponding dynamic category.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/refman/predicates/abolish_category_1.rst#2025-04-06_snippet_0\n\nLANGUAGE: logtalk\nCODE:\n```\nabolish_category(Category)\n```\n\n----------------------------------------\n\nTITLE: Local Development Pack Specification\nDESCRIPTION: Prolog code showing pack version specification for local development using file:// URLs, both for directories and archives.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/tools/packs/NOTES.md#2025-04-06_snippet_19\n\nLANGUAGE: prolog\nCODE:\n```\nversion(\n\t0:11:0,\n\tbeta,\n\t'file:///home/jdoe/work/my_awesome_library',\n\tnone,\n\t[],\n\tall\n).\n\nversion(\n\t1:0:0,\n\tstable,\n\t'file:///home/jdoe/work/my_awesome_library/v1.0.0.tar.gz',\n\tsha256 - '1944773afba1908cc6194297ff6b5ac649a844ef69a69b2bcdf267cfa8bfce1e',\n\t[],\n\tall\n).\n```\n\n----------------------------------------\n\nTITLE: Evaluation Error Method Mode Declaration\nDESCRIPTION: Specifies the mode declaration for the evaluation_error method, indicating it takes a non-variable argument and generates an error.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/refman/methods/evaluation_error_1.rst.txt#2025-04-06_snippet_2\n\nLANGUAGE: prolog\nCODE:\n```\nevaluation_error(@nonvar) - error\n```\n\n----------------------------------------\n\nTITLE: Example of a Prolog Multifile Predicate Declaration\nDESCRIPTION: Example of defining a Prolog module multifile predicate with explicitly prefixed clause head.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/userman/predicates.rst.txt#2025-04-06_snippet_63\n\nLANGUAGE: prolog\nCODE:\n```\n:- multifile(clpfd:run_propagator/2).\nclpfd:run_propagator(..., ...) :-\n    ...\n```\n\n----------------------------------------\n\nTITLE: Loading Metagol Library in Logtalk\nDESCRIPTION: Command to load all entities in the Metagol port using the loader file.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/ports/metagol.rst#2025-04-06_snippet_0\n\nLANGUAGE: logtalk\nCODE:\n```\n| ?- logtalk_load(metagol(loader)).\n```\n\n----------------------------------------\n\nTITLE: Loading the Hierarchies Library in Logtalk\nDESCRIPTION: Command to load all entities in the hierarchies library using the loader.lgt file.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/libraries/hierarchies.rst#2025-04-06_snippet_0\n\nLANGUAGE: logtalk\nCODE:\n```\n| ?- logtalk_load(hierarchies(loader)).\n```\n\n----------------------------------------\n\nTITLE: Splitting Markdown Documentation for LLM Processing\nDESCRIPTION: Commands to split large Markdown documentation files into smaller chunks based on section headers for compatibility with LLM file size limitations. Uses POSIX split utility with pattern matching and file renaming.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/NOTES.md#2025-04-06_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ split -p '## (Reference Manual|Developer Tools)' TheLogtalkHandbook-3.90.1.md TheLogtalkHandbook_\n$ for file in \"TheLogtalkHandbook_\"*; do mv \"$file\" \"${file}.md\"; done\n```\n\n----------------------------------------\n\nTITLE: Logtalk Make Usage Example\nDESCRIPTION: Example showing how to use the logtalk_make/0 predicate to reload modified files.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/refman/predicates/logtalk_make_0.rst.txt#2025-04-06_snippet_2\n\nLANGUAGE: logtalk\nCODE:\n```\n% reload all files modified since last loaded:\n| ?- logtalk_make.\n```\n\n----------------------------------------\n\nTITLE: Specifying Mode and Number of Proofs for message_hook/4\nDESCRIPTION: Defines the mode declaration for message_hook/4, specifying expected argument types and that the predicate provides zero or one solution.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/refman/methods/message_hook_4.rst.txt#2025-04-06_snippet_1\n\nLANGUAGE: logtalk\nCODE:\n```\nmessage_hook(@nonvar, @nonvar, @nonvar, @list(nonvar)) - zero_or_one\n```\n\n----------------------------------------\n\nTITLE: Template and Usage Modes for mode/2 Directive in Logtalk\nDESCRIPTION: Specifies the detailed template for the mode/2 directive showing how it can be used with predicates and non-terminals. The plus signs indicate that arguments should be instantiated at call time.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/refman/directives/mode_2.rst.txt#2025-04-06_snippet_1\n\nLANGUAGE: logtalk\nCODE:\n```\nmode(+predicate_mode_term, +number_of_proofs)\nmode(+non_terminal_mode_term, +number_of_proofs)\n```\n\n----------------------------------------\n\nTITLE: Displaying French language banner\nDESCRIPTION: This snippet displays the welcome message in French using the localization mechanism.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/localizations/NOTES.md#2025-04-06_snippet_4\n\nLANGUAGE: logtalk\nCODE:\n```\nmy_game(fr)::banner.\n```\n\n----------------------------------------\n\nTITLE: Using Tags with Threaded Calls in Logtalk (First Call)\nDESCRIPTION: Demonstrates using tags to distinguish between threaded calls by making a first tagged threaded call.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/threads/nondet/NOTES.md#2025-04-06_snippet_9\n\nLANGUAGE: logtalk\nCODE:\n```\nthreaded_call(lists::member(X, [1,2,3]), Tag).\n```\n\n----------------------------------------\n\nTITLE: Testing Defined Predicate\nDESCRIPTION: Tests a public predicate that is defined to be true\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/closed_world_assumption/NOTES.md#2025-04-06_snippet_2\n\nLANGUAGE: logtalk\nCODE:\n```\nhouse::attic.\n```\n\n----------------------------------------\n\nTITLE: Adding Multiple Elements to Queue End in Logtalk\nDESCRIPTION: Predicate to add multiple new elements at the end of the queue. It takes a list of elements and a queue as input, and returns the new queue.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/queuep_0.rst.txt#2025-04-06_snippet_3\n\nLANGUAGE: Logtalk\nCODE:\n```\njoin_all(List,Queue,NewQueue)\n```\n\n----------------------------------------\n\nTITLE: Loading Metainterpreters Example\nDESCRIPTION: Loads the metainterpreters example module into the Logtalk environment.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/metainterpreters/NOTES.md#2025-04-06_snippet_1\n\nLANGUAGE: logtalk\nCODE:\n```\nlogtalk_load(metainterpreters(loader)).\n```\n\n----------------------------------------\n\nTITLE: Defining List Sorting Predicate in Logtalk\nDESCRIPTION: Added predicate sort/4 to the list object, modeled after SWI-Prolog's sort/4 built-in predicate specification.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/RELEASE_NOTES.md#2025-04-06_snippet_69\n\nLANGUAGE: logtalk\nCODE:\n```\nlist::sort/4\n```\n\n----------------------------------------\n\nTITLE: Testing Genint Library in Logtalk\nDESCRIPTION: This snippet shows how to load the tester.lgt file to test the genint library predicates.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/libraries/genint.rst.txt#2025-04-06_snippet_1\n\nLANGUAGE: Logtalk\nCODE:\n```\n| ?- logtalk_load(genint(tester)).\n```\n\n----------------------------------------\n\nTITLE: Usage Examples\nDESCRIPTION: Demonstrates practical usage examples of the implements_protocol predicate for checking and enumerating protocol implementations.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/refman/predicates/implements_protocol_2_3.rst.txt#2025-04-06_snippet_2\n\nLANGUAGE: prolog\nCODE:\n```\n% check that the list object implements the listp protocol:\n| ?- implements_protocol(list, listp).\n\n% check that the list object publicly implements the listp protocol:\n| ?- implements_protocol(list, listp, public).\n\n% enumerate only objects that implement the listp protocol:\n| ?- current_object(Object), implements_protocol(Object, listp).\n\n% enumerate only categories that implement the serialization protocol:\n| ?- current_category(Category), implements_protocol(Category, serialization).\n```\n\n----------------------------------------\n\nTITLE: Defining Event Handling Structure in reStructuredText\nDESCRIPTION: This snippet defines the structure for event handling documentation in reStructuredText format. It sets up a table of contents for 'before_3' and 'after_3' methods.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/refman/methods/event_methods.rst#2025-04-06_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. _event_methods:\n\nEvent handling\n==============\n\n.. toctree::\n   :maxdepth: 1\n\n   before_3\n   after_3\n```\n\n----------------------------------------\n\nTITLE: Predicate Template - library/2\nDESCRIPTION: Creates all supported diagrams for a library using specified options.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/diagrams_1.rst.txt#2025-04-06_snippet_7\n\nLANGUAGE: logtalk\nCODE:\n```\nlibrary(Library,Options)\n```\n\n----------------------------------------\n\nTITLE: Logtalk Load with Options\nDESCRIPTION: Shows how to load Logtalk files with custom compiler options using the logtalk_compile/2 or logtalk_load/2 predicates.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/userman/programming.rst.txt#2025-04-06_snippet_12\n\nLANGUAGE: logtalk\nCODE:\n```\n| ?- logtalk_compile(Files, Options).\n```\n\n----------------------------------------\n\nTITLE: Defining fail/0 Method Signature in Logtalk\nDESCRIPTION: Declaration of the fail/0 method which always fails. This is a built-in method that can be used as a message to an object and follows the ISO Prolog standard definition.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/refman/methods/fail_0.rst#2025-04-06_snippet_0\n\nLANGUAGE: logtalk\nCODE:\n```\nfail\n```\n\n----------------------------------------\n\nTITLE: Defining the throw/1 Method Signature in Logtalk/Prolog\nDESCRIPTION: The signature of the throw/1 built-in method that takes an Exception term as its argument. This method throws an exception and is declared private, meaning it cannot be used as a message to an object.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/refman/methods/throw_1.rst#2025-04-06_snippet_0\n\nLANGUAGE: prolog\nCODE:\n```\nthrow(Exception)\n```\n\n----------------------------------------\n\nTITLE: Font Package Options for Bold Keywords in LaTeX\nDESCRIPTION: These are alternative font packages that support bold face for keywords in code listings. Only one of these packages should be used at a time, depending on the preferred font style.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/coding/latex/listings/NOTES.md#2025-04-06_snippet_1\n\nLANGUAGE: LaTeX\nCODE:\n```\n\\usepackage[scaled=0.8]{couriers}\n\\usepackage{pxfonts}\n\\usepackage{lmodern}\n\\usepackage{txfonts}\n```\n\n----------------------------------------\n\nTITLE: Resetting Random Seed in Logtalk\nDESCRIPTION: Resets the random generator seed to its default value. This predicate is recommended for use when reproducibility is not required.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/random_0.rst.txt#2025-04-06_snippet_0\n\nLANGUAGE: Logtalk\nCODE:\n```\nreset_seed/0\n```\n\n----------------------------------------\n\nTITLE: Querying Prototype2 Interface with Protected Inheritance\nDESCRIPTION: Queries the interface of 'prototype2' which extends 'parent' using protected inheritance, showing how public predicates become protected.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/inheritance/NOTES.md#2025-04-06_snippet_4\n\nLANGUAGE: logtalk\nCODE:\n```\nprototype2::interface.\n```\n\n----------------------------------------\n\nTITLE: Cleaning up point instances\nDESCRIPTION: Deletes all instances of the different point types to clean up the environment.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/points/NOTES.md#2025-04-06_snippet_6\n\nLANGUAGE: logtalk\nCODE:\n```\npoint::delete_all, bounded_point::delete_all, history_point::delete_all, bounded_history_point::delete_all.\n```\n\n----------------------------------------\n\nTITLE: Configuring URL Prefixes for BBEdit in Logtalk Diagrams\nDESCRIPTION: Sets the URL code prefix for generating local links to open files and directories in BBEdit when creating Logtalk diagrams.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/tools/diagrams/NOTES.md#2025-04-06_snippet_11\n\nLANGUAGE: prolog\nCODE:\n```\nurl_prefixes('x-bbedit://open?url=file://', DocPrefix)\n```\n\n----------------------------------------\n\nTITLE: Managing Prolog Dynamic Predicates with Explicit Module Qualification\nDESCRIPTION: Shows how to assert and retract clauses for Prolog dynamic predicates using explicit module qualification within Logtalk objects.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/userman/predicates.rst#2025-04-06_snippet_68\n\nLANGUAGE: prolog\nCODE:\n```\n:- object(...).\n\n    :- dynamic(m:bar/1).\n\n    foo(X) :-\n        retractall(m:bar(_)),\n        assertz(m:bar(X)),\n        ...\n\n:- end_object.\n```\n\n----------------------------------------\n\nTITLE: Configuring PDT Runtime for Logtalk on Linux\nDESCRIPTION: Configuration settings for PDT runtime preferences on Linux to enable Logtalk integration with SWI-Prolog. Includes the SWI-Prolog executable command with memory settings and required environment variables.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/coding/pdt/NOTES.md#2025-04-06_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\n/usr/bin/swipl -L4m -G4m -T4m -s /usr/share/logtalk/integration/logtalk_swi.pl\nLOGTALKHOME=/usr/share/logtalk, LOGTALKUSER=/home/pmoura/logtalk\n```\n\n----------------------------------------\n\nTITLE: Creating AVL Tree Dictionary from Key-Value Pairs in Logtalk\nDESCRIPTION: Shows how to create a new AVL tree dictionary from a list of key-value pairs using the as_dictionary/2 predicate.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/libraries/dictionaries.rst#2025-04-06_snippet_3\n\nLANGUAGE: prolog\nCODE:\n```\n| ?- avltree::as_dictionary([a-1,c-3,b-2], Dictionary).\nDictionary = ...\nyes\n```\n\n----------------------------------------\n\nTITLE: Setting Logtalk Environment Variables in Bash Shell\nDESCRIPTION: These bash shell commands define the essential Logtalk environment variables. LOGTALKHOME points to the installation directory, and LOGTALKUSER points to the user-specific files directory.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/INSTALL.md#2025-04-06_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nexport LOGTALKHOME=/your/logtalk/installation/directory\nexport LOGTALKUSER=$HOME/logtalk\n```\n\n----------------------------------------\n\nTITLE: Retrieving Solutions from a Threaded Engine in Logtalk\nDESCRIPTION: Shows how to retrieve solutions from a threaded engine using the threaded_engine_next/2 predicate.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/userman/threads.rst.txt#2025-04-06_snippet_11\n\nLANGUAGE: Logtalk\nCODE:\n```\n| ?- threaded_engine_next(worker, X).\n```\n\n----------------------------------------\n\nTITLE: Loading CSV Library in Logtalk\nDESCRIPTION: Demonstrates how to load all entities in the CSV library using the loader file.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/library/csv/NOTES.md#2025-04-06_snippet_0\n\nLANGUAGE: Logtalk\nCODE:\n```\n| ?- logtalk_load(csv(loader)).\n```\n\n----------------------------------------\n\nTITLE: Meta-predicate Template Definition\nDESCRIPTION: Meta-predicate template showing that both arguments are callable goals (represented by 0).\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/refman/methods/forall_2.rst#2025-04-06_snippet_1\n\nLANGUAGE: logtalk\nCODE:\n```\nforall(0, 0)\n```\n\n----------------------------------------\n\nTITLE: Print Message Tokens Mode Declaration\nDESCRIPTION: Defines the mode declaration and number of proofs for the print_message_tokens method, specifying parameter types and expected behavior.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/refman/methods/print_message_tokens_3.rst#2025-04-06_snippet_1\n\nLANGUAGE: prolog\nCODE:\n```\nprint_message_tokens(@stream_or_alias, +atom, @list(nonvar)) - zero_or_one\n```\n\n----------------------------------------\n\nTITLE: Querying Public User Predicates in Logtalk\nDESCRIPTION: Demonstrates how to find all visible user predicates that are declared public using the current_predicate/1 built-in method.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/userman/predicates.rst.txt#2025-04-06_snippet_48\n\nLANGUAGE: text\nCODE:\n```\n| ?- some_object::current_predicate(Name/Arity).\n```\n\n----------------------------------------\n\nTITLE: Setting Spatial Coordinates with the xyzt Object in Logtalk\nDESCRIPTION: Sets the spatial coordinates (x, y, z) of the xyzt object using the rotate predicate inherited from the xyz object.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/mi/NOTES.md#2025-04-06_snippet_2\n\nLANGUAGE: logtalk\nCODE:\n```\nxyzt::rotate(1, 2, 3).\n```\n\n----------------------------------------\n\nTITLE: Alias Directive Template and Modes\nDESCRIPTION: Defines the template and modes for alias directive usage with entity identifiers and predicate/non-terminal indicators.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/refman/directives/alias_2.rst#2025-04-06_snippet_1\n\nLANGUAGE: logtalk\nCODE:\n```\nalias(@entity_identifier, +list(predicate_indicator_alias))\nalias(@entity_identifier, +list(non_terminal_indicator_alias))\n```\n\n----------------------------------------\n\nTITLE: Implementing findall_member/4-5 predicates in Logtalk\nDESCRIPTION: Added predicates findall_member/4-5 to the library object \"meta\" based on Richard O'Keefe's draft Prolog library proposal.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/RELEASE_NOTES.md#2025-04-06_snippet_133\n\nLANGUAGE: Logtalk\nCODE:\n```\nfindall_member/4-5\n```\n\n----------------------------------------\n\nTITLE: Using SWI-Prolog Graphical Tracer with Logtalk\nDESCRIPTION: Examples of using the gtrace/0-1 predicates to trace Logtalk queries with the SWI-Prolog graphical tracer.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/tools/debugger/NOTES.md#2025-04-06_snippet_5\n\nLANGUAGE: Prolog\nCODE:\n```\n| ?- gtrace(foo::bar).\n```\n\nLANGUAGE: Prolog\nCODE:\n```\n| ?- gtrace, foo::bar.\n```\n\n----------------------------------------\n\nTITLE: Instance Predicate Listing\nDESCRIPTION: Lists all public predicates of the sailplane instance using reflection.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/predicate_lookups/NOTES.md#2025-04-06_snippet_10\n\nLANGUAGE: logtalk\nCODE:\n```\nsailplane::current_predicate(Predicate).\n```\n\n----------------------------------------\n\nTITLE: Defining the message_tokens//2 Method Signature in Logtalk\nDESCRIPTION: Defines the signature of the message_tokens//2 non-terminal method that rewrites a message term into a list of tokens. It takes a message and a component as parameters.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/refman/methods/message_tokens_2.rst#2025-04-06_snippet_0\n\nLANGUAGE: Prolog\nCODE:\n```\nmessage_tokens(Message, Component)\n```\n\n----------------------------------------\n\nTITLE: Loading Version Information in Logtalk\nDESCRIPTION: Prints Logtalk, Prolog backend, and kernel versions when running as a notebook.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/carengines/NOTES.md#2025-04-06_snippet_0\n\nLANGUAGE: logtalk\nCODE:\n```\n%versions\n```\n\n----------------------------------------\n\nTITLE: Configuration Declaration Example - Logtalk\nDESCRIPTION: Example showing configuration notation using aliases and paths, demonstrating the logtalk_library_path/2 predicate syntax\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/RELEASE_NOTES.md#2025-04-06_snippet_147\n\nLANGUAGE: Logtalk\nCODE:\n```\nlogtalk_library_path(alias(path))\n```\n\n----------------------------------------\n\nTITLE: Retrieving All Current Monitors in Logtalk\nDESCRIPTION: The monitors/1 predicate returns a list of all current monitors registered in the event system. It takes an output parameter Monitors that will be unified with a list of object identifiers.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/event_registryp_0.rst.txt#2025-04-06_snippet_0\n\nLANGUAGE: logtalk\nCODE:\n```\nmonitors(Monitors)\n```\n\n----------------------------------------\n\nTITLE: SSH Repository URL Format\nDESCRIPTION: Standard format for SSH repository clone URLs\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/devtools/packs.rst#2025-04-06_snippet_18\n\nLANGUAGE: text\nCODE:\n```\ngit@<hostname>:path/to/project.git\n```\n\n----------------------------------------\n\nTITLE: Loading Date Object in Logtalk\nDESCRIPTION: This code snippet shows how to load the 'date' object in Logtalk. It is necessary to execute this command before using the date predicates.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/date_0.rst.txt#2025-04-06_snippet_0\n\nLANGUAGE: Logtalk\nCODE:\n```\nlogtalk_load(dates(loader))\n```\n\n----------------------------------------\n\nTITLE: threaded_engine_next/2 Predicate Signature in Logtalk\nDESCRIPTION: Defines the signature of the threaded_engine_next/2 predicate, which retrieves an answer from an engine and signals it to compute the next answer.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/refman/predicates/threaded_engine_next_2.rst.txt#2025-04-06_snippet_0\n\nLANGUAGE: prolog\nCODE:\n```\nthreaded_engine_next(Engine, Answer)\n```\n\n----------------------------------------\n\nTITLE: Querying Simpsons Family Mothers\nDESCRIPTION: Shows how to query mother relationships in the Simpsons family using the parametric object.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/family_alt/NOTES.md#2025-04-06_snippet_3\n\nLANGUAGE: logtalk\nCODE:\n```\n%%table\nfamily(simpsons)::mother(Mother, Child).\n```\n\n----------------------------------------\n\nTITLE: Loading CSV Library in Logtalk\nDESCRIPTION: Demonstrates how to load all entities in the CSV library using the loader file.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/library/csv/NOTES.md#2025-04-06_snippet_0\n\nLANGUAGE: Logtalk\nCODE:\n```\n| ?- logtalk_load(csv(loader)).\n```\n\n----------------------------------------\n\nTITLE: Installing a Pack with Update Option in Logtalk\nDESCRIPTION: Example showing how to install a pack with the update(true) option to ensure an existing installation is updated to the specified version.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/tools/packs/NOTES.md#2025-04-06_snippet_21\n\nLANGUAGE: prolog\nCODE:\n```\n| ?- packs::install(reg, bar, 1:1:2, [update(true)]).\n```\n\n----------------------------------------\n\nTITLE: Example Usage of Permission Error in Logtalk\nDESCRIPTION: Shows an example of using the permission_error/3 method when a file is not writable. This demonstrates how to throw a permission error for a file modification operation.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/refman/methods/permission_error_3.rst.txt#2025-04-06_snippet_1\n\nLANGUAGE: Logtalk\nCODE:\n```\n...,\n\\+ writable(File),\npermission_error(modify, file, File).\n```\n\n----------------------------------------\n\nTITLE: Testing Correct Super Call\nDESCRIPTION: Shows correct super call usage that preserves self value when calling inherited predicate.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/super_calls/NOTES.md#2025-04-06_snippet_3\n\nLANGUAGE: logtalk\nCODE:\n```\nprototype::correct(Local).\n```\n\n----------------------------------------\n\nTITLE: Accessing Object Parameters Using parameter/2 Method in Logtalk\nDESCRIPTION: Shows how to access individual object parameters using the built-in parameter/2 method. This approach allows accessing parameters by their index.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/userman/objects.rst.txt#2025-04-06_snippet_11\n\nLANGUAGE: logtalk\nCODE:\n```\n:- object(foo(_Bar, _Baz, ...)).\n\n    ...\n    bar(Bar) :-\n        parameter(1, Bar).\n\n    baz :-\n        parameter(2, Baz),\n        baz(Baz),\n        ... .\n```\n\n----------------------------------------\n\nTITLE: Testing FCube Library in Logtalk\nDESCRIPTION: Command to load and run tests for the FCube port predicates using the tester file.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/ports/fcube.rst#2025-04-06_snippet_1\n\nLANGUAGE: logtalk\nCODE:\n```\n| ?- logtalk_load(fcube(tester)).\n```\n\n----------------------------------------\n\nTITLE: Loading the dif Library in Logtalk\nDESCRIPTION: Command to load all entities in the dif library by loading the loader.lgt file using logtalk_load/1 predicate.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/libraries/dif.rst.txt#2025-04-06_snippet_0\n\nLANGUAGE: logtalk\nCODE:\n```\n| ?- logtalk_load(dif(loader)).\n```\n\n----------------------------------------\n\nTITLE: threaded_engine_next/2 Predicate Signature in Logtalk\nDESCRIPTION: Defines the signature of the threaded_engine_next/2 predicate, which retrieves an answer from an engine and signals it to compute the next answer.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/refman/predicates/threaded_engine_next_2.rst.txt#2025-04-06_snippet_0\n\nLANGUAGE: prolog\nCODE:\n```\nthreaded_engine_next(Engine, Answer)\n```\n\n----------------------------------------\n\nTITLE: Print Message Token Implementation Example\nDESCRIPTION: Demonstrates how to implement a custom print_message_token hook that ignores flush tokens. Includes multifile and dynamic declarations.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/refman/methods/print_message_token_4.rst.txt#2025-04-06_snippet_2\n\nLANGUAGE: prolog\nCODE:\n```\n:- multifile(logtalk::print_message_token/4).\n:- dynamic(logtalk::print_message_token/4).\n\n% ignore all flush tokens\nlogtalk::print_message_token(_Stream, _Prefix, flush, _Tokens).\n```\n\n----------------------------------------\n\nTITLE: Loading the metered concurrency example\nDESCRIPTION: This code loads the metered concurrency example using the Logtalk loader.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/threads/metered_concurrency/NOTES.md#2025-04-06_snippet_1\n\nLANGUAGE: logtalk\nCODE:\n```\nlogtalk_load(metered_concurrency(loader)).\n```\n\n----------------------------------------\n\nTITLE: Circular Route Generation\nDESCRIPTION: Creates a circular route that returns to the starting point after visiting all towns.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/lo/travellers/NOTES.md#2025-04-06_snippet_4\n\nLANGUAGE: logtalk\nCODE:\n```\ncircular::route([london, brighton, portsmouth, exeter, oxford, aberystwyth], Route).\n```\n\n----------------------------------------\n\nTITLE: Defining a Documented List Protocol in Logtalk\nDESCRIPTION: Enhanced version of the 'listp' protocol with documentation using mode/2 directives. This version documents the call/return modes and the expected number of proofs for each predicate.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/tutorial/lists.rst.txt#2025-04-06_snippet_5\n\nLANGUAGE: logtalk\nCODE:\n```\n:- protocol(listp).\n\n    :- public(append/3).\n    :- mode(append(?list, ?list, ?list), zero_or_more).\n\n    :- public(length/2).\n    :- mode(length(?list, ?integer), zero_or_more).\n\n    :- public(member/2).\n    :- mode(member(?term, ?list), zero_or_more).\n\n:- end_protocol.\n```\n\n----------------------------------------\n\nTITLE: Retrieving Class Variable Values from Multiple Instances\nDESCRIPTION: Queries the value of the class variable from three different instances to demonstrate they share the same initial value.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/classvars/NOTES.md#2025-04-06_snippet_2\n\nLANGUAGE: logtalk\nCODE:\n```\ninstance1::cv(Value1), instance2::cv(Value2), instance3::cv(Value3).\n```\n\n----------------------------------------\n\nTITLE: Removing and Returning Queue Head in Logtalk\nDESCRIPTION: Predicate to remove and return the first element of the queue. It takes a queue as input, returns the head element and the new queue after removal.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/queuep_0.rst.txt#2025-04-06_snippet_9\n\nLANGUAGE: Logtalk\nCODE:\n```\nserve(Queue,Head,NewQueue)\n```\n\n----------------------------------------\n\nTITLE: Generating Cauchy Distribution Values in Logtalk\nDESCRIPTION: Predicate that returns a standard Cauchy distributed random value based on the provided location and scale parameters. It takes two float parameters and returns a float value.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/sampling_protocol_0.rst.txt#2025-04-06_snippet_1\n\nLANGUAGE: logtalk\nCODE:\n```\nstandard_cauchy(Location,Scale,Value)\n```\n\n----------------------------------------\n\nTITLE: Defining spy_point_/4 Predicate in Logtalk\nDESCRIPTION: Declares a private predicate 'spy_point_/4' for storing current spy points. It is dynamically compiled and can be called with various modes of arguments.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/monitor_0.rst.txt#2025-04-06_snippet_0\n\nLANGUAGE: Logtalk\nCODE:\n```\nspy_point_/4\n```\n\nLANGUAGE: Logtalk\nCODE:\n```\nspy_point_(Event,Object,Message,Sender)\n```\n\nLANGUAGE: Logtalk\nCODE:\n```\nspy_point_(?event,?object,?callable,?object)\n```\n\n----------------------------------------\n\nTITLE: Operator and Initialization Directives in Logtalk\nDESCRIPTION: Directives for defining operators, initialization, encoding, and file inclusion in Logtalk.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/coding/subethaedit2/Logtalk.mode/Contents/Resources/AutocompleteAdditions.txt#2025-04-06_snippet_5\n\nLANGUAGE: logtalk\nCODE:\n```\nop(, , ).\ninitialization().\nencoding().\nensure_loaded().\ninclude().\nsynchronized(/).\nsynchronized.\nthreaded.\n```\n\n----------------------------------------\n\nTITLE: Loading Versions Information\nDESCRIPTION: Prints version information for Logtalk, Prolog backend, and kernel\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/modules/NOTES.md#2025-04-06_snippet_0\n\nLANGUAGE: logtalk\nCODE:\n```\n%versions\n```\n\n----------------------------------------\n\nTITLE: Starting Spider Adventure in Logtalk\nDESCRIPTION: Conditional statement to start the Spider text adventure if not running in a Jupyter notebook environment.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/adventure/NOTES.md#2025-04-06_snippet_3\n\nLANGUAGE: logtalk\nCODE:\n```\n(current_object(jupyter) -> true; spider::start).\n```\n\n----------------------------------------\n\nTITLE: Template and Modes for Uses/2\nDESCRIPTION: Defines the template and modes for using the uses/2 directive with different parameter types.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/refman/directives/uses_2.rst#2025-04-06_snippet_1\n\nLANGUAGE: logtalk\nCODE:\n```\nuses(+object_identifier, +predicate_indicator_list)\nuses(+object_identifier, +predicate_indicator_alias_list)\n\nuses(+object_identifier, +predicate_template_alias_list)\n\nuses(+object_identifier, +non_terminal_indicator_list)\nuses(+object_identifier, +non_terminal_indicator_alias_list)\n\nuses(+object_identifier, +operator_list)\n```\n\n----------------------------------------\n\nTITLE: Query Example in Logtalk\nDESCRIPTION: Example query showing the usage and output of calling the pred/1 predicate that uses current_predicate/1.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/refman/methods/current_predicate_1.rst.txt#2025-04-06_snippet_2\n\nLANGUAGE: logtalk\nCODE:\n```\n| ?- foo::pred(X).\nX = pred/1 ;\nX = baz/1 ;\nX = quux/2 ;\nno\n```\n\n----------------------------------------\n\nTITLE: Testing FCube Prover Implementation\nDESCRIPTION: Command to load and run tests for the FCube prover port using the tester file.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/ports/fcube/NOTES.md#2025-04-06_snippet_1\n\nLANGUAGE: Prolog\nCODE:\n```\n| ?- logtalk_load(fcube(tester)).\n```\n\n----------------------------------------\n\nTITLE: Defining Dynamic Predicate for Breakpoints in Logtalk\nDESCRIPTION: Defines a dynamic predicate 'breakpoint_/2' that represents a table of unconditional breakpoints. It takes an entity identifier and a line number as arguments.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/debugger_0.rst.txt#2025-04-06_snippet_6\n\nLANGUAGE: Logtalk\nCODE:\n```\nbreakpoint_/2\n```\n\n----------------------------------------\n\nTITLE: Protocol Definition Syntax in Logtalk using BNF\nDESCRIPTION: Specifies the syntax for defining protocols in Logtalk, including protocol identifiers and their extension relationships with other protocols.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/refman/grammar.rst.txt#2025-04-06_snippet_3\n\nLANGUAGE: bnf\nCODE:\n```\nprotocol ::=\n   begin_protocol_directive  ( protocol_directive )* end_protocol_directive\n\nbegin_protocol_directive ::=\n   \":- protocol(\" protocol_identifier ( \",\" extends_protocols)? \").\"\n\nend_protocol_directive ::=\n   \":- end_protocol.\"\n```\n\n----------------------------------------\n\nTITLE: Implementing Private Protocol Inheritance in Logtalk\nDESCRIPTION: Shows how to make all public and protected predicates from an implemented protocol private to the implementing object by using the private:: prefix.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/userman/inheritance.rst.txt#2025-04-06_snippet_4\n\nLANGUAGE: logtalk\nCODE:\n```\n:- object(Object,\n    implements(private::Protocol)).\n\n    % all the Protocol public and protected\n    % predicates become private predicates\n    % for the Object clients\n\n    ...\n\n:- end_object.\n```\n\n----------------------------------------\n\nTITLE: Using Object Wrapper Hook for Prolog Code in Logtalk\nDESCRIPTION: Shows an alternative method of wrapping Prolog code using the object_wrapper_hook for profiling.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/tools/ports_profiler/NOTES.md#2025-04-06_snippet_11\n\nLANGUAGE: Logtalk\nCODE:\n```\n| ?- logtalk_load(hook_objects(loader)).\n| ?- logtalk_load(\n\t     code,\n\t     [hook(object_wrapper_hook), debug(on),\n\t      source_data(on), context_switching_calls(allow)]\n\t ).\n```\n\n----------------------------------------\n\nTITLE: Loading the Flags Library in Logtalk\nDESCRIPTION: Command to load all entities in the Flags library using the loader.lgt file.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/contributions/flags/NOTES.md#2025-04-06_snippet_0\n\nLANGUAGE: logtalk\nCODE:\n```\n?- logtalk_load(flags(loader)).\n```\n\n----------------------------------------\n\nTITLE: Mode Declaration\nDESCRIPTION: Specifies the argument modes and number of proofs for the findall/3 method.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/refman/methods/findall_3.rst.txt#2025-04-06_snippet_2\n\nLANGUAGE: logtalk\nCODE:\n```\nfindall(?term, +callable, ?list) - zero_or_one\n```\n\n----------------------------------------\n\nTITLE: System Error Implementation Context\nDESCRIPTION: Shows the equivalent implementation of system_error/0 using context retrieval and throw predicates. This demonstrates how system errors are constructed and thrown.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/refman/methods/system_error_0.rst#2025-04-06_snippet_1\n\nLANGUAGE: logtalk\nCODE:\n```\n...,\ncontext(Context),\nthrow(error(system_error, Context)).\n```\n\n----------------------------------------\n\nTITLE: Configuring Logtalk Project Settings in YAML\nDESCRIPTION: This YAML configuration file defines various settings for the Logtalk project, including repository structure, code analysis tools, and version control preferences. It specifies directories to be ignored, language detection overrides, and custom properties for the project.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/coding/subethaedit4/Logtalk.seemode/Contents/Resources/ChangeLog.txt#2025-04-06_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# Repository structure\nlibraries:\n  - library\n\n# Vendored code that GitHub should ignore in language statistics\nlinguist:\n  vendored:\n    - library/\n    - manuals/sources/\n    - scripts/\n\n# Language overrides\nlinguist:\n  detectable:\n    - logtalk\n  language_aliases:\n    - logtalk\n\n# Exclude files and directories from the release archives\nexport-ignore:\n  - .github/\n  - scripts/\n  - .appveyor.yml\n  - .gitattributes\n  - .gitignore\n  - .travis.yml\n\n# Project custom properties\ncustom:\n  - key: x-logtalk-domain\n    value: Logic and Constraint Logic Programming\n  - key: x-logtalk-omit\n    value: examples, learning, scratch, tests, tools, wenv\n```\n\n----------------------------------------\n\nTITLE: Initializing Application Root Path in Logtalk\nDESCRIPTION: Example of using an initialization directive to set up a library path alias for an application's root directory using the current loading context.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/refman/predicates/logtalk_library_path_2.rst.txt#2025-04-06_snippet_1\n\nLANGUAGE: Prolog\nCODE:\n```\n:- initialization((\n   logtalk_load_context(directory, Directory),\n   asserta(logtalk_library_path(my_application_root, Directory))\n)).\n```\n\n----------------------------------------\n\nTITLE: Converting List to Set in Logtalk\nDESCRIPTION: Example of creating a set from a list of terms using the as_set/2 predicate.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/libraries/sets.rst.txt#2025-04-06_snippet_3\n\nLANGUAGE: prolog\nCODE:\n```\n| ?- set::as_set([1,3,2,1,2], Set).\nSet = [1, 2, 3]\nyes\n```\n\n----------------------------------------\n\nTITLE: Threaded Directive Basic Declaration\nDESCRIPTION: Basic syntax for declaring the threaded/0 directive to enable multi-threading support for an object.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/refman/directives/threaded_0.rst.txt#2025-04-06_snippet_0\n\nLANGUAGE: logtalk\nCODE:\n```\nthreaded\n```\n\n----------------------------------------\n\nTITLE: Type Validation Usage Examples\nDESCRIPTION: Examples of using the type validation predicates in different ways.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/userman/errors.rst.txt#2025-04-06_snippet_6\n\nLANGUAGE: prolog\nCODE:\n```\n..., type::valid(temperature(celsius), 42.0), ...\n```\n\nLANGUAGE: prolog\nCODE:\n```\n..., type::check(temperature(celsius), 42.0), ...\n```\n\nLANGUAGE: prolog\nCODE:\n```\n...,\ncontext(Context),\ntype::check(temperature(celsius), 42.0, Context),\n...\n```\n\n----------------------------------------\n\nTITLE: Asserting Clauses into Another Object Using uses/2\nDESCRIPTION: Example showing how to assert clauses into another object with predicates listed using a uses/2 directive. The method call is compiled to target the referenced knowledge base object.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/refman/methods/asserta_1.rst#2025-04-06_snippet_3\n\nLANGUAGE: logtalk\nCODE:\n```\n:- object(reasoner(_KnowledgeBase_)).\n\n    :- uses(_KnowledgeBase_, [\n        foo/1, bar/1\n    ]).\n\n    baz(X) :-\n       % compiled as _KnowledgeBase_::assertz(foo(X))\n       asserta(foo(X)).\n\n   foobar(Name, Argument) :-\n      Clause =.. [Name, Argument],\n      % runtime resolved to _KnowledgeBase_::assertz(Clause)\n      % when Name is either foo or bar\n      asserta(Clause).\n\n    ...\n```\n\n----------------------------------------\n\nTITLE: Profiler Output Example in Logtalk\nDESCRIPTION: Shows the output of the stop_watch profiler when a message is sent to the monitored object, displaying start and end times.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/tutorial/profiling.rst.txt#2025-04-06_snippet_5\n\nLANGUAGE: logtalk\nCODE:\n```\n| ?- foo::bar(X).\n\nfoo <-- bar(X) from user\nSTARTING at 12.87415 seconds\nfoo <-- bar(1) from user\nENDING at 12.87419 seconds\n\nX = 1\nyes\n```\n\n----------------------------------------\n\nTITLE: Accessing inherited predicate in an empty instance\nDESCRIPTION: Demonstrates that even an empty instance can access inherited predicates.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/roles/NOTES.md#2025-04-06_snippet_10\n\nLANGUAGE: logtalk\nCODE:\n```\nempty_instance::foo(Foo).\n```\n\n----------------------------------------\n\nTITLE: Missionaries and Cannibals with Hill Climbing\nDESCRIPTION: Solves the missionaries and cannibals river crossing problem using hill climbing search\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/searching/NOTES.md#2025-04-06_snippet_5\n\nLANGUAGE: logtalk\nCODE:\n```\nmiss_cann::initial_state(Initial), hill_climbing(16)::solve(miss_cann, Initial, Path, Cost), miss_cann::print_path(Path).\n```\n\n----------------------------------------\n\nTITLE: Example of no specific code snippets\nDESCRIPTION: This documentation contains conceptual comparisons between programming languages but no actual code examples.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/userman/nomenclature.rst.txt#2025-04-06_snippet_0\n\n\n\n----------------------------------------\n\nTITLE: Suppressing Goals in Logtalk\nDESCRIPTION: Demonstrates how to use suppress_goal_hook to suppress specific goals in a clause body.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/library/hook_objects/NOTES.md#2025-04-06_snippet_9\n\nLANGUAGE: Logtalk\nCODE:\n```\n| ?- set_logtalk_flag(hook, suppress_goal_hook).\n```\n\nLANGUAGE: Logtalk\nCODE:\n```\nfoo :-\n\tbar,\n\t-- baz,\n\tquux.\n```\n\n----------------------------------------\n\nTITLE: Mode Declaration\nDESCRIPTION: Mode declaration indicating once/1 takes a callable term as input and produces zero or one solutions.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/refman/methods/once_1.rst#2025-04-06_snippet_2\n\nLANGUAGE: logtalk\nCODE:\n```\nonce(+callable) - zero_or_one\n```\n\n----------------------------------------\n\nTITLE: Importing Coroutining Predicates in Logtalk\nDESCRIPTION: Directive to import coroutining predicates into an object or category for implicit message-sending. Specifies the commonly used predicates dif/2, dif/1, freeze/2, frozen/2, and when/2.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/library/coroutining/NOTES.md#2025-04-06_snippet_2\n\nLANGUAGE: prolog\nCODE:\n```\n:- uses(coroutining, [\n\tdif/2, dif/1, freeze/2, frozen/2, when/2\n]).\n```\n\n----------------------------------------\n\nTITLE: Stopping Profiler in Logtalk\nDESCRIPTION: Demonstrates how to stop profiling messages sent to a specific object using the abolish_events/5 predicate.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/tutorial/profiling.rst.txt#2025-04-06_snippet_6\n\nLANGUAGE: logtalk\nCODE:\n```\n| ?- abolish_events(_, foo, _, _, stop_watch).\n\nyes\n```\n\n----------------------------------------\n\nTITLE: Method Signature for message_prefix_file/6 in Logtalk\nDESCRIPTION: Defines the signature of the message_prefix_file/6 method which specifies the prefix and file for copying messages of a given kind and component. The method takes the message kind, component, prefix, target file, write mode, and options as parameters.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/refman/methods/message_prefix_file_6.rst#2025-04-06_snippet_0\n\nLANGUAGE: logtalk\nCODE:\n```\nmessage_prefix_file(Kind, Component, Prefix, File, Mode, Options)\n```\n\n----------------------------------------\n\nTITLE: Representing Parametric Object Proxies in Logtalk\nDESCRIPTION: Shows examples of proxy terms that reference the parametric object 'circle'.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/proxies/NOTES.md#2025-04-06_snippet_1\n\nLANGUAGE: logtalk\nCODE:\n```\ncircle(1, blue)\ncircle(2, yellow)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Command Line Arguments in Logtalk\nDESCRIPTION: Implementation of command_line_arguments/1 predicate in the 'cc' example for accessing program arguments.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/RELEASE_NOTES.md#2025-04-06_snippet_136\n\nLANGUAGE: Logtalk\nCODE:\n```\ncommand_line_arguments(Arguments)\n```\n\n----------------------------------------\n\nTITLE: Attempting to send message to class without metaclass\nDESCRIPTION: Shows that a class without a metaclass cannot receive any messages as the predicate declaration lookup would start in the metaclass.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/roles/NOTES.md#2025-04-06_snippet_6\n\nLANGUAGE: logtalk\nCODE:\n```\n\\+ subclass::current_predicate(_).\n```\n\n----------------------------------------\n\nTITLE: Querying Sister Relationships in Addams Family\nDESCRIPTION: Demonstrates how to query sister relationships in the Addams family using the defined relations.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/family/NOTES.md#2025-04-06_snippet_2\n\nLANGUAGE: logtalk\nCODE:\n```\n%%table\naddams::sister(Sister, Sibling).\n```\n\n----------------------------------------\n\nTITLE: Running Java Integration Benchmarks\nDESCRIPTION: Executes performance benchmarks comparing direct JPL calls with Logtalk's abstraction layer\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/jpl/NOTES.md#2025-04-06_snippet_5\n\nLANGUAGE: logtalk\nCODE:\n```\nbenchmarks::run.\n```\n\n----------------------------------------\n\nTITLE: Local Archive Pack Version\nDESCRIPTION: Example of declaring a local archive version of a pack\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/devtools/packs.rst#2025-04-06_snippet_21\n\nLANGUAGE: prolog\nCODE:\n```\nversion(\n    1:0:0,\n    stable,\n    'file:///home/jdoe/work/my_awesome_library/v1.0.0.tar.gz',\n    sha256 - '1944773afba1908cc6194297ff6b5ac649a844ef69a69b2bcdf267cfa8bfce1e',\n    [],\n    all\n).\n```\n\n----------------------------------------\n\nTITLE: Using Parametric Object Builder in Logtalk\nDESCRIPTION: Demonstrates the parametric object approach to the Builder pattern, creating a car with specific properties.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/design_patterns/creational/builder/NOTES.md#2025-04-06_snippet_2\n\nLANGUAGE: logtalk\nCODE:\n```\nbuilder(_)::(set_wheels(3), set_seats(2), set_color(red), get_result(Car)).\n```\n\n----------------------------------------\n\nTITLE: HTML Fragment Generation in Logtalk\nDESCRIPTION: Example showing how to generate an unordered list fragment to the current output stream.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/library/html/NOTES.md#2025-04-06_snippet_5\n\nLANGUAGE: prolog\nCODE:\n```\n| ?- current_output(Stream),\n     html5::generate(stream(Stream), ul([li(foo), li(bar), li(baz)])).\n```\n\n----------------------------------------\n\nTITLE: Generating Character Codes Identifier\nDESCRIPTION: Generates a random identifier using 64 bits (8 bytes) of randomness, returning a list of character codes.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/libraries/ids.rst.txt#2025-04-06_snippet_5\n\nLANGUAGE: logtalk\nCODE:\n```\n| ?- ids(codes, 8)::generate(Identifier).\nIdentifier = [111,81,86,55,99,79,70,77,65,74,103,61]\nyes\n```\n\n----------------------------------------\n\nTITLE: Using Parameter Variables with use_module/2 in Logtalk\nDESCRIPTION: Demonstrates the use of a parameter variable as the module identifier in use_module/2, allowing for dynamic binding of module predicates at runtime.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/refman/directives/use_module_2.rst#2025-04-06_snippet_4\n\nLANGUAGE: Logtalk\nCODE:\n```\n:- object(bar(_OptionsModule_)).\n\n    :- use_module(_OptionsModule_, [\n        set/2, get/2, reset/0\n    ]).\n```\n\n----------------------------------------\n\nTITLE: Declaring Entities for Code Coverage in Logtalk Tests\nDESCRIPTION: Shows how to declare objects for which code coverage information should be collected using the cover/1 predicate in a test object.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/devtools/lgtunit.rst.txt#2025-04-06_snippet_37\n\nLANGUAGE: logtalk\nCODE:\n```\ncover(foo).\ncover(bar).\n```\n\n----------------------------------------\n\nTITLE: Accessing Logtalk Manuals\nDESCRIPTION: Command to access the User and Reference manuals using the help system.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/tools/help/SCRIPT.txt#2025-04-06_snippet_6\n\nLANGUAGE: logtalk\nCODE:\n```\n| ?- help::manuals.\n```\n\n----------------------------------------\n\nTITLE: Verifying Runtime Patch of Salary Predicate\nDESCRIPTION: Demonstrates the effect of the dynamic patch on the salary predicate, showing the modified value.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/complements/allow/NOTES.md#2025-04-06_snippet_9\n\nLANGUAGE: logtalk\nCODE:\n```\nemployee::salary(Salary).\n```\n\n----------------------------------------\n\nTITLE: Implementing Simple Message Forwarding in Logtalk\nDESCRIPTION: Defines a simplified version of forward/1 predicate that handles unknown messages by forwarding them to another object without preserving the original sender.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/userman/errors.rst.txt#2025-04-06_snippet_8\n\nLANGUAGE: Logtalk\nCODE:\n```\nforward(Message) :-\n    Object::Message.\n```\n\n----------------------------------------\n\nTITLE: Calling Exported Module Predicate\nDESCRIPTION: Demonstrates calling an exported module predicate using message sending syntax\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/modules/NOTES.md#2025-04-06_snippet_2\n\nLANGUAGE: logtalk\nCODE:\n```\ntest::names.\n```\n\n----------------------------------------\n\nTITLE: Threaded Engine Destroy Mode\nDESCRIPTION: Mode declaration showing that the predicate takes a non-variable argument and provides one solution.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/refman/predicates/threaded_engine_destroy_1.rst.txt#2025-04-06_snippet_1\n\nLANGUAGE: prolog\nCODE:\n```\nthreaded_engine_destroy(@nonvar) - one\n```\n\n----------------------------------------\n\nTITLE: Usage Example\nDESCRIPTION: Demonstrates how to use print_message/3 to print an information message about redefining an entity.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/refman/methods/print_message_3.rst.txt#2025-04-06_snippet_2\n\nLANGUAGE: logtalk\nCODE:\n```\n..., logtalk::print_message(information, core, redefining_entity(object, foo)), ...\n```\n\n----------------------------------------\n\nTITLE: Logtalk Make Predicate Mode\nDESCRIPTION: Specification of the predicate mode indicating it returns one proof.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/refman/predicates/logtalk_make_0.rst.txt#2025-04-06_snippet_1\n\nLANGUAGE: logtalk\nCODE:\n```\nlogtalk_make - one\n```\n\n----------------------------------------\n\nTITLE: Solving Process B Execution Constraints\nDESCRIPTION: This query computes the number of times process 'b' can be executed and its dependencies using the process_model object.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/process_modeling/NOTES.md#2025-04-06_snippet_2\n\nLANGUAGE: logtalk\nCODE:\n```\n%%table\nprocess_model::solve([b(B)], Dependencies).\n```\n\n----------------------------------------\n\nTITLE: Set Object Declaration in Logtalk\nDESCRIPTION: Basic object declaration named 'set' implementing set operations. Available through loading sets(loader). Uses ==/2 for element comparison and standard term ordering.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/set_0.rst.txt#2025-04-06_snippet_0\n\nLANGUAGE: logtalk\nCODE:\n```\nset\n```\n\n----------------------------------------\n\nTITLE: Automata Examples\nDESCRIPTION: Shows usage of coinduction with various automata implementations.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/coinduction/NOTES.md#2025-04-06_snippet_6\n\nLANGUAGE: logtalk\nCODE:\n```\nautomaton::automaton(s0, X).\n```\n\n----------------------------------------\n\nTITLE: Defining Queue Object in Logtalk\nDESCRIPTION: Defines the 'queue' object in Logtalk, which implements queue predicates using difference lists. It implements the 'queuep' protocol and extends the 'compound' object.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/queue_0.rst.txt#2025-04-06_snippet_0\n\nLANGUAGE: Logtalk\nCODE:\n```\nqueue\n```\n\n----------------------------------------\n\nTITLE: Preventing Expansion with Identity Hook in Logtalk\nDESCRIPTION: This code snippet demonstrates how to prevent expansion of a source file by using the identity_hook object. It uses a directive to set the hook flag at the beginning of the file.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/userman/expansion.rst#2025-04-06_snippet_16\n\nLANGUAGE: Logtalk\nCODE:\n```\n:- set_logtalk_flag(hook, identity_hook).\n```\n\n----------------------------------------\n\nTITLE: Implementing Protocol in Object\nDESCRIPTION: Shows basic syntax for implementing a protocol in a Logtalk object. The protocol is implemented with default public scope.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/userman/protocols.rst#2025-04-06_snippet_13\n\nLANGUAGE: logtalk\nCODE:\n```\n:- object(Object,\n    implements(Protocol)).\n    ...\n:- end_object.\n```\n\n----------------------------------------\n\nTITLE: Testing the Flags Library in Logtalk\nDESCRIPTION: Command to test the Flags library predicates by loading the tester.lgt file.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/contributions/flags/NOTES.md#2025-04-06_snippet_1\n\nLANGUAGE: logtalk\nCODE:\n```\n| ?- logtalk_load(flags(tester)).\n```\n\n----------------------------------------\n\nTITLE: Mode and Proof Specification\nDESCRIPTION: Defines the mode declaration for once/1, specifying it takes a callable term as input and produces zero or one solutions.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/refman/methods/once_1.rst.txt#2025-04-06_snippet_2\n\nLANGUAGE: logtalk\nCODE:\n```\nonce(+callable) - zero_or_one\n```\n\n----------------------------------------\n\nTITLE: File Inclusion in Logtalk Object\nDESCRIPTION: Shows how to include external file contents into a Logtalk object using the include/1 directive.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/userman/objects.rst#2025-04-06_snippet_15\n\nLANGUAGE: logtalk\nCODE:\n```\n:- object(cities).\n\n    :- public(city/4).\n\n    :- include(dbs('cities.pl')).\n\n:- end_object.\n```\n\n----------------------------------------\n\nTITLE: Example Usage of context/1 for Type-checking in Logtalk\nDESCRIPTION: This example demonstrates how to use the context/1 method to obtain execution context for type-checking predicate arguments. The context is passed to the type::check/3 predicate to provide error reporting information.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/refman/methods/context_1.rst#2025-04-06_snippet_2\n\nLANGUAGE: logtalk\nCODE:\n```\nfoo(A, N) :-\n    % type-check arguments\n    context(Context),\n    type::check(atom, A, Context),\n    type::check(integer, N, Context),\n    % arguments are fine; go ahead\n    ... .\n```\n\n----------------------------------------\n\nTITLE: Accessing Logtalk Load Context in Prolog\nDESCRIPTION: New key added to the logtalk_load_context/2 built-in predicate for accessing the variable names of the last term read during compilation. This feature was first introduced by SWI-Prolog.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/RELEASE_NOTES.md#2025-04-06_snippet_110\n\nLANGUAGE: Prolog\nCODE:\n```\nlogtalk_load_context(variable_names, Names)\n```\n\n----------------------------------------\n\nTITLE: Type-checking ULID Values\nDESCRIPTION: Example of validating a ULID using the ulid type checker, showing error handling for invalid input.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/library/ulid/NOTES.md#2025-04-06_snippet_8\n\nLANGUAGE: prolog\nCODE:\n```\n| ?- type::check(ulid(atom), '01BX5ZIKBKALTAV9OEVGEMMVRY').\nuncaught exception: domain_error(ulid,'01BX5ZIKBKALTAV9OEVGEMMVRY')\n```\n\n----------------------------------------\n\nTITLE: Modes and Number of Proofs for phrase/2 in Logtalk\nDESCRIPTION: Specifies the mode declaration for phrase/2, indicating that the first argument should be a callable term (input), the second argument is a list (input or output), and the predicate can succeed zero or more times.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/refman/methods/phrase_2.rst.txt#2025-04-06_snippet_2\n\nLANGUAGE: logtalk\nCODE:\n```\nphrase(+callable, ?list) - zero_or_more\n```\n\n----------------------------------------\n\nTITLE: Predicate Declaration - extends_category/2-3\nDESCRIPTION: Function signatures showing the supported predicate forms for querying category extension relationships.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/refman/predicates/extends_category_2_3.rst.txt#2025-04-06_snippet_0\n\nLANGUAGE: prolog\nCODE:\n```\nextends_category(Category, ParentCategory)\nextends_category(Category, ParentCategory, Scope)\n```\n\n----------------------------------------\n\nTITLE: Sender Method Usage Example\nDESCRIPTION: Example showing how to use the sender/1 method to retrieve and display the sender of a message within a test predicate.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/refman/methods/sender_1.rst#2025-04-06_snippet_2\n\nLANGUAGE: logtalk\nCODE:\n```\ntest :-\n    sender(Sender),\n    write('executing a method to answer a message sent by '),\n    writeq(Sender), nl.\n```\n\n----------------------------------------\n\nTITLE: Specifying Docker Hub URL for Logtalk Images\nDESCRIPTION: Provides the Docker Hub URL where Logtalk Docker images can be downloaded. This allows users to easily access and use pre-configured Logtalk environments with various Prolog backends.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/scripts/docker/NOTES.md#2025-04-06_snippet_1\n\nLANGUAGE: Markdown\nCODE:\n```\n\thttps://hub.docker.com/u/logtalk/\n```\n\n----------------------------------------\n\nTITLE: Testing Heaps Library in Logtalk\nDESCRIPTION: Command to load and run tests for the heaps library predicates using the tester.lgt file.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/library/heaps/NOTES.md#2025-04-06_snippet_1\n\nLANGUAGE: logtalk\nCODE:\n```\n| ?- logtalk_load(heaps(tester)).\n```\n\n----------------------------------------\n\nTITLE: Installing a Pack with GitLab Authentication in Logtalk\nDESCRIPTION: Example showing how to install a pack while passing GitLab authentication tokens to curl via command-line options.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/tools/packs/NOTES.md#2025-04-06_snippet_24\n\nLANGUAGE: prolog\nCODE:\n```\n| ?- packs::install(reg, bar, 1:1:2, [curl('--header \"PRIVATE-TOKEN: foo42\"')]).\n```\n\n----------------------------------------\n\nTITLE: Specifying Modes for question_prompt_stream/4 in Logtalk\nDESCRIPTION: This code snippet defines the modes and number of proofs for the question_prompt_stream/4 method. It specifies that the method can be called with any combination of instantiated or uninstantiated arguments, and may have zero or more solutions.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/refman/methods/question_prompt_stream_4.rst.txt#2025-04-06_snippet_1\n\nLANGUAGE: Prolog\nCODE:\n```\nquestion_prompt_stream(?nonvar, ?nonvar, ?atom, ?stream_or_alias) - zero_or_more\n```\n\n----------------------------------------\n\nTITLE: Mode Declaration for {}/1 Control Construct\nDESCRIPTION: Specifies the calling modes and number of proofs for the {}/1 control construct.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/refman/control/external_call_1.rst#2025-04-06_snippet_1\n\nLANGUAGE: logtalk\nCODE:\n```\n{+callable} - zero_or_more\n```\n\n----------------------------------------\n\nTITLE: Modes and Proofs for syntax_error/1 in Logtalk\nDESCRIPTION: The method's calling mode specification, indicating that it expects a non-variable Description argument and results in an error condition.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/refman/methods/syntax_error_1.rst.txt#2025-04-06_snippet_2\n\nLANGUAGE: prolog\nCODE:\n```\nsyntax_error(@nonvar) - error\n```\n\n----------------------------------------\n\nTITLE: Method Signature for ignore/1 in Logtalk\nDESCRIPTION: The basic signature for the Logtalk built-in method ignore/1, which takes a goal as its argument and succeeds regardless of whether the goal succeeds or fails.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/refman/methods/ignore_1.rst#2025-04-06_snippet_0\n\nLANGUAGE: logtalk\nCODE:\n```\nignore(Goal)\n```\n\n----------------------------------------\n\nTITLE: Predicate Scope and Module Directives in Logtalk\nDESCRIPTION: Directives for specifying predicate scope (public, protected, private) and module usage in Logtalk.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/coding/subethaedit2/Logtalk.mode/Contents/Resources/AutocompleteAdditions.txt#2025-04-06_snippet_3\n\nLANGUAGE: logtalk\nCODE:\n```\npublic(/).\nprotected(/).\nprivate(/).\nuses(, [/]).\nuses([ as ]).\nuse_module(, [/]).\nexport(/).\nreexport(/).\n```\n\n----------------------------------------\n\nTITLE: Syntax Definition for threaded_engine_post/2 in Logtalk\nDESCRIPTION: Defines the syntax for the threaded_engine_post/2 predicate, which posts a term to an engine's term queue. This requires a backend Prolog compiler with compatible multi-threading primitives.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/refman/predicates/threaded_engine_post_2.rst#2025-04-06_snippet_0\n\nLANGUAGE: logtalk\nCODE:\n```\nthreaded_engine_post(Engine, Term)\n```\n\n----------------------------------------\n\nTITLE: Checking initial state\nDESCRIPTION: Verifies that there is no initial state in the persistency object.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/persistency/NOTES.md#2025-04-06_snippet_2\n\nLANGUAGE: logtalk\nCODE:\n```\n\\+ persistency::state(_).\n```\n\n----------------------------------------\n\nTITLE: Type Checking Celsius Temperature in Logtalk\nDESCRIPTION: Validates if a given value (38.7) is a valid Celsius temperature.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/my_types/NOTES.md#2025-04-06_snippet_2\n\nLANGUAGE: logtalk\nCODE:\n```\ntype::check(temperature(celsius), 38.7).\n```\n\n----------------------------------------\n\nTITLE: Querying Addams Family Sisters\nDESCRIPTION: Demonstrates how to query sister relationships in the Addams family using the parametric object.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/family_alt/NOTES.md#2025-04-06_snippet_2\n\nLANGUAGE: logtalk\nCODE:\n```\n%%table\nfamily(addams)::sister(Sister, Sibling).\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Keywords for Logtalk Syntax Highlighting\nDESCRIPTION: This example shows how to add additional keywords to the Logtalk syntax highlighting without modifying the lstlang0.sty file, using the morekeywords option.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/coding/latex/listings/NOTES.md#2025-04-06_snippet_3\n\nLANGUAGE: LaTeX\nCODE:\n```\nmorekeywords={extends_object, implements_protocol}\n```\n\n----------------------------------------\n\nTITLE: Compiling Prolog Source Files as Logtalk in Logtalk\nDESCRIPTION: Added support for compiling Prolog source files as Logtalk source files using the logtalk_compile/1-2 and logtalk_load/1-2 built-in predicates.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/RELEASE_NOTES.md#2025-04-06_snippet_93\n\nLANGUAGE: Logtalk\nCODE:\n```\nlogtalk_compile/1-2\n```\n\nLANGUAGE: Logtalk\nCODE:\n```\nlogtalk_load/1-2\n```\n\n----------------------------------------\n\nTITLE: Loading the Dead Code Scanner Tool in Logtalk\nDESCRIPTION: Loads the dead_code_scanner tool using the loader file. This makes the tool available for use in the current Logtalk session.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/tools/dead_code_scanner/SCRIPT.txt#2025-04-06_snippet_1\n\nLANGUAGE: prolog\nCODE:\n```\n| ?- logtalk_load(dead_code_scanner(loader)).\n```\n\n----------------------------------------\n\nTITLE: Loading Logtalk Aliases Example\nDESCRIPTION: Loads the aliases example file into the Logtalk environment. This step is necessary to make the defined objects and their predicates available for use.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/aliases/NOTES.md#2025-04-06_snippet_0\n\nLANGUAGE: logtalk\nCODE:\n```\nlogtalk_load(aliases(loader)).\n```\n\n----------------------------------------\n\nTITLE: Defining Table of Contents for Error Handling Methods in reStructuredText\nDESCRIPTION: This snippet defines a table of contents using reStructuredText syntax, listing various error handling methods available in Logtalk. Each method is listed with its name and arity.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/refman/methods/error_handling_methods.rst#2025-04-06_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. toctree::\n   :maxdepth: 1\n\n   catch_3\n   throw_1\n   instantiation_error_0\n   uninstantiation_error_1\n   type_error_2\n   domain_error_2\n   consistency_error_3\n   existence_error_2\n   permission_error_3\n   representation_error_1\n   evaluation_error_1\n   resource_error_1\n   syntax_error_1\n   system_error_0\n```\n\n----------------------------------------\n\nTITLE: Accessing Proxies Using Logtalk Notation\nDESCRIPTION: Shows how to access proxies represented as Prolog facts using Logtalk notation.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/proxies/NOTES.md#2025-04-06_snippet_4\n\nLANGUAGE: logtalk\nCODE:\n```\n{circle(_, _, _)}::print, fail; true.\n```\n\n----------------------------------------\n\nTITLE: Adding debugger command 'p' in Logtalk\nDESCRIPTION: Added a debugger command \"p\" to the Logtalk built-in debugger, which prints the current goal using the print/1 predicate when available.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/RELEASE_NOTES.md#2025-04-06_snippet_128\n\nLANGUAGE: Logtalk\nCODE:\n```\np\n```\n\n----------------------------------------\n\nTITLE: Calling method on instance1 in Logtalk\nDESCRIPTION: This snippet calls the method/0 predicate on instance1, which inherits the default implementation from the root class.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/instmethods/NOTES.md#2025-04-06_snippet_2\n\nLANGUAGE: logtalk\nCODE:\n```\ninstance1::method.\n```\n\n----------------------------------------\n\nTITLE: Debugging Events for Facts and Rules in Logtalk\nDESCRIPTION: Debug events fact/3 and rule/3 have been reverted to fact/4 and rule/4 with the first argument being the container entity to display correct source file information for multifile predicates.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/RELEASE_NOTES.md#2025-04-06_snippet_92\n\nLANGUAGE: Logtalk\nCODE:\n```\nfact/4\n```\n\nLANGUAGE: Logtalk\nCODE:\n```\nrule/4\n```\n\n----------------------------------------\n\nTITLE: Natural Numbers Generation\nDESCRIPTION: Demonstrates getting natural numbers in increasing order using interactors.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/engines/interactors/NOTES.md#2025-04-06_snippet_2\n\nLANGUAGE: logtalk\nCODE:\n```\ninteractors::natural(N).\n```\n\n----------------------------------------\n\nTITLE: Checking if Heap is Empty in Logtalk\nDESCRIPTION: Checks if the given heap is empty. Returns true if the heap contains no elements.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/heapp_0.rst.txt#2025-04-06_snippet_4\n\nLANGUAGE: Logtalk\nCODE:\n```\nempty(Heap)\n```\n\n----------------------------------------\n\nTITLE: Specifying Mode and Proofs for retract/1 in Logtalk\nDESCRIPTION: Defines the mode and number of proofs for the retract/1 method, indicating it takes a non-variable clause as input and can succeed zero or more times.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/refman/methods/retract_1.rst.txt#2025-04-06_snippet_1\n\nLANGUAGE: Logtalk\nCODE:\n```\nretract(+clause) - zero_or_more\n```\n\n----------------------------------------\n\nTITLE: Unicode Category Predicates\nDESCRIPTION: Implementation of predicates for checking Unicode categories and generating code point pairs.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/library/unicode_data/HISTORY.md#2025-04-06_snippet_1\n\nLANGUAGE: Prolog\nCODE:\n```\nunicode_category/2\n```\n\n----------------------------------------\n\nTITLE: Defining Public Predicate for Entity Diagram Generation in Logtalk\nDESCRIPTION: Defines a public predicate 'entity/2' that creates a diagram for a single entity using specified options. It takes an entity identifier and a list of options as arguments.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/xref_diagram_1.rst.txt#2025-04-06_snippet_0\n\nLANGUAGE: Logtalk\nCODE:\n```\nentity(Entity,Options)\n```\n\n----------------------------------------\n\nTITLE: Querying Packs Directory\nDESCRIPTION: Logtalk query to retrieve the configured packs directory location.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/devtools/packs.rst#2025-04-06_snippet_7\n\nLANGUAGE: logtalk\nCODE:\n```\n| ?- packs::logtalk_packs(Directory).\n```\n\n----------------------------------------\n\nTITLE: Loading Reader Library in Logtalk\nDESCRIPTION: Demonstrates how to load all entities in the reader library using the loader.lgt file.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/libraries/reader.rst.txt#2025-04-06_snippet_0\n\nLANGUAGE: Logtalk\nCODE:\n```\n| ?- logtalk_load(reader(loader)).\n```\n\n----------------------------------------\n\nTITLE: Saving Messages to Files with message_prefix_file in Logtalk\nDESCRIPTION: This snippet shows how to use the logtalk::message_prefix_file/6 hook predicate to copy messages to files without diverting them from their default stream.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/userman/printing.rst.txt#2025-04-06_snippet_5\n\nLANGUAGE: prolog\nCODE:\n```\n:- multifile(logtalk::message_prefix_file/6).\n:- dynamic(logtalk::message_prefix_file/6).\n\nlogtalk::message_prefix_file(error,   app, '! ', 'log.txt', append, []).\nlogtalk::message_prefix_file(warning, app, '! ', 'log.txt', append, []).\n```\n\n----------------------------------------\n\nTITLE: Starting Logtalk with ECLiPSe\nDESCRIPTION: Command to start Logtalk using ECLiPSe as the backend compiler on Windows using PowerShell 7.2+.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/userman/programming.rst.txt#2025-04-06_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nPS> eclipselgt.ps1\n```\n\n----------------------------------------\n\nTITLE: Entity Relations Documentation Structure in RST\nDESCRIPTION: ReStructuredText markup defining the documentation structure for Logtalk entity relation predicates, including a table of contents for various relationship predicates.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/refman/predicates/entity_relation_predicates.rst.txt#2025-04-06_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. _entity_relation_predicates:\n\nObjects, categories, and protocols relations\n============================================\n\n.. toctree::\n   :maxdepth: 1\n\n   extends_object_2_3\n   extends_protocol_2_3\n   extends_category_2_3\n   implements_protocol_2_3\n   conforms_to_protocol_2_3\n   complements_object_2\n   imports_category_2_3\n   instantiates_class_2_3\n   specializes_class_2_3\n```\n\n----------------------------------------\n\nTITLE: Demonstrating predicate_property/2 Usage in Logtalk\nDESCRIPTION: An example object 'foo' that uses the predicate_property/2 method to enumerate properties of predicates. It includes a uses/2 directive and a public predicate definition.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/refman/methods/predicate_property_2.rst.txt#2025-04-06_snippet_2\n\nLANGUAGE: Logtalk\nCODE:\n```\n:- object(foo).\n\n    :- uses(bar, [\n        baz/1, quux/2\n    ]).\n\n    :- public(pred/1).\n    pred_prop(Pred, Prop) :-\n       predicate_property(Pred, Prop).\n\n:- end_object.\n```\n\n----------------------------------------\n\nTITLE: Equivalent Implementation of permission_error/3 in Logtalk\nDESCRIPTION: Shows the equivalent implementation of the permission_error/3 method using context/1 and throw/1 predicates. This demonstrates how the error is constructed and thrown.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/refman/methods/permission_error_3.rst#2025-04-06_snippet_1\n\nLANGUAGE: Prolog\nCODE:\n```\n...,\ncontext(Context),\nthrow(error(permission_error(Operation,PermissionType,Culprit), Context)).\n```\n\n----------------------------------------\n\nTITLE: Creating Windows-Style Button\nDESCRIPTION: Creates a button with Windows appearance using the abstract factory pattern and renders it.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/design_patterns/creational/abstract_factory/NOTES.md#2025-04-06_snippet_4\n\nLANGUAGE: logtalk\nCODE:\n```\nfactory(windows)::create_button(Button), Button::paint.\n```\n\n----------------------------------------\n\nTITLE: Calling Methods with Debug Messages Enabled\nDESCRIPTION: Query showing the output when debug messages are enabled for a component.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/tools/debug_messages/NOTES.md#2025-04-06_snippet_6\n\nLANGUAGE: Prolog\nCODE:\n```\n| ?- foo::(bar, baz).\nbar/0 called\nbaz/0 called\nyes\n```\n\n----------------------------------------\n\nTITLE: Loading Coinduction Example\nDESCRIPTION: Loads the coinduction example files.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/coinduction/NOTES.md#2025-04-06_snippet_2\n\nLANGUAGE: logtalk\nCODE:\n```\nlogtalk_load(coinduction(loader)).\n```\n\n----------------------------------------\n\nTITLE: Building Logtalk Documentation with Make\nDESCRIPTION: This command cleans the build directory, generates HTML, PDF, and ePub versions of the Logtalk documentation using Make.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/NOTES.md#2025-04-06_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ make clean && make html && make latexpdf && make epub\n```\n\n----------------------------------------\n\nTITLE: Threaded Engine Destroy Examples\nDESCRIPTION: Example usage showing how to stop a single engine and how to stop all engines using forall/2.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/refman/predicates/threaded_engine_destroy_1.rst.txt#2025-04-06_snippet_2\n\nLANGUAGE: prolog\nCODE:\n```\n% stop the worker_1 engine:\n| ?- threaded_engine_destroy(worker_1).\n\n% stop all engines:\n| ?- forall(\n    threaded_engine(Engine),\n    threaded_engine_destroy(Engine)\n).\n```\n\n----------------------------------------\n\nTITLE: Loading Optionals Library in Logtalk\nDESCRIPTION: Demonstrates how to load all entities in the optionals library using the loader file.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/libraries/optionals.rst.txt#2025-04-06_snippet_0\n\nLANGUAGE: Prolog\nCODE:\n```\n| ?- logtalk_load(optionals(loader)).\n```\n\n----------------------------------------\n\nTITLE: Unicode Unihan Variants in Prolog\nDESCRIPTION: Provides unicode_unihan_variant/2 and unicode_unihan_variant/3 predicates for handling Unihan variant characters.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/library/unicode_data/README.md#2025-04-06_snippet_2\n\nLANGUAGE: prolog\nCODE:\n```\nunicode_unihan_variant/2-3\n```\n\n----------------------------------------\n\nTITLE: Basic Category Import in Logtalk\nDESCRIPTION: Shows the basic syntax for importing one or more categories into a Logtalk object.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/userman/categories.rst.txt#2025-04-06_snippet_17\n\nLANGUAGE: logtalk\nCODE:\n```\n:- object(Object,\n    imports([Category1, Category2, ...])).\n    ...\n:- end_object.\n```\n\n----------------------------------------\n\nTITLE: Querying Instance3 Interface\nDESCRIPTION: Queries the interface of 'instance3' which instantiates 'subclass3' that specializes 'root' with private inheritance, showing no visible predicates.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/inheritance/NOTES.md#2025-04-06_snippet_12\n\nLANGUAGE: logtalk\nCODE:\n```\ninstance3::interface.\n```\n\n----------------------------------------\n\nTITLE: Defining os::wall_time/1 for various Prolog systems\nDESCRIPTION: Fixed implementation of the os::wall_time/1 predicate for Quintus Prolog, SICStus Prolog, SWI-Prolog, and YAP in the operating-system library.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/RELEASE_NOTES.md#2025-04-06_snippet_89\n\nLANGUAGE: Prolog\nCODE:\n```\nos::wall_time/1\n```\n\n----------------------------------------\n\nTITLE: Loading Statistics Library in Logtalk\nDESCRIPTION: Command for loading all entities in the statistics library using the loader file.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/library/statistics/NOTES.md#2025-04-06_snippet_0\n\nLANGUAGE: logtalk\nCODE:\n```\n| ?- logtalk_load(statistics(loader)).\n```\n\n----------------------------------------\n\nTITLE: Retracting Clause from Self in Logtalk\nDESCRIPTION: Example of retracting a matching clause from a public or protected dynamic predicate in the current object (self).\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/refman/methods/retract_1.rst#2025-04-06_snippet_3\n\nLANGUAGE: Prolog\nCODE:\n```\n::retract(Clause)\n```\n\n----------------------------------------\n\nTITLE: Adding Search Functionality to HTML Documentation\nDESCRIPTION: Conditionally includes a search functionality link in the HTML version of the documentation using a Sphinx-specific directive.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/index.rst.txt#2025-04-06_snippet_1\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. only:: builder_html\n\n   * :ref:`search`\n```\n\n----------------------------------------\n\nTITLE: Loading Logtalk Options Library\nDESCRIPTION: Command to load all entities in the options library using the loader utility file.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/libraries/options.rst#2025-04-06_snippet_0\n\nLANGUAGE: prolog\nCODE:\n```\n| ?- logtalk_load(options(loader)).\n```\n\n----------------------------------------\n\nTITLE: Implementing predicate_property/2 in ECLiPSe config\nDESCRIPTION: Added a partial implementation of the ISO Prolog predicate_property/2 predicate to the ECLiPSe config file.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/RELEASE_NOTES.md#2025-04-06_snippet_129\n\nLANGUAGE: Prolog\nCODE:\n```\npredicate_property/2\n```\n\n----------------------------------------\n\nTITLE: Defining Object Inheritance with Public Scope in Logtalk\nDESCRIPTION: This snippet demonstrates how to define an object that imports a category with public scope. The public scope keyword can be omitted as it's the default.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/userman/inheritance.rst.txt#2025-04-06_snippet_6\n\nLANGUAGE: logtalk\nCODE:\n```\n:- object(Object,\n    imports(public::Category)).\n\n    ...\n\n:- end_object.\n```\n\n----------------------------------------\n\nTITLE: Defining Logtalk Library Paths\nDESCRIPTION: Example of defining library paths using the logtalk_library_path/2 predicate, making a 'shapes' alias for a directory.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/userman/programming.rst#2025-04-06_snippet_10\n\nLANGUAGE: logtalk\nCODE:\n```\n:- multifile(logtalk_library_path/2).\n:- dynamic(logtalk_library_path/2).\n\nlogtalk_library_path(shapes, '$LOGTALKUSER/examples/shapes/').\n```\n\n----------------------------------------\n\nTITLE: Defining Prolog File Extensions in Logtalk Adapters\nDESCRIPTION: Support added for defining multiple Prolog file name extensions in adapter files, including a new 'object' file type for compiler-generated intermediate Prolog files.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/RELEASE_NOTES.md#2025-04-06_snippet_96\n\nLANGUAGE: Prolog\nCODE:\n```\nprolog_file_extension(pl).\nprolog_file_extension(prolog).\nobject_file_extension(pl).\n```\n\n----------------------------------------\n\nTITLE: Unicode Version Information in Prolog\nDESCRIPTION: Implements unicode_version/3 predicate for handling Unicode version information.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/library/unicode_data/README.md#2025-04-06_snippet_3\n\nLANGUAGE: prolog\nCODE:\n```\nunicode_version/3\n```\n\n----------------------------------------\n\nTITLE: Printing Version Information in Logtalk\nDESCRIPTION: Prints the versions of Logtalk, the Prolog backend, and kernel when running as a notebook.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/symdiff/NOTES.md#2025-04-06_snippet_0\n\nLANGUAGE: logtalk\nCODE:\n```\n%versions\n```\n\n----------------------------------------\n\nTITLE: Specifying Modes and Proofs for bagof/3 in Prolog\nDESCRIPTION: Describes the expected modes of the arguments and the number of proofs for the bagof/3 method.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/refman/methods/bagof_3.rst.txt#2025-04-06_snippet_2\n\nLANGUAGE: Prolog\nCODE:\n```\nbagof(@term, +callable, -list) - zero_or_more\n```\n\n----------------------------------------\n\nTITLE: Loading Assignvars Library in Logtalk\nDESCRIPTION: This snippet demonstrates how to load all entities in the assignvars library using the loader.lgt file.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/libraries/assignvars.rst#2025-04-06_snippet_0\n\nLANGUAGE: prolog\nCODE:\n```\n| ?- logtalk_load(assignvars(loader)).\n```\n\n----------------------------------------\n\nTITLE: Abolishing a Dynamic Protocol in Logtalk\nDESCRIPTION: Shows how to abolish an existing dynamic protocol using the abolish_protocol/1 predicate.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/userman/protocols.rst.txt#2025-04-06_snippet_5\n\nLANGUAGE: prolog\nCODE:\n```\n| ?- abolish_protocol(Protocol).\n```\n\n----------------------------------------\n\nTITLE: Specifying Modes and Proofs for bagof/3 in Logtalk\nDESCRIPTION: Defines the mode declaration and number of proofs for bagof/3 method.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/refman/methods/bagof_3.rst#2025-04-06_snippet_2\n\nLANGUAGE: Logtalk\nCODE:\n```\nbagof(@term, +callable, -list) - zero_or_more\n```\n\n----------------------------------------\n\nTITLE: Direct Benchmark Using lgtunit\nDESCRIPTION: Uses the lgtunit tool to directly benchmark a specific test.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/bench/NOTES.md#2025-04-06_snippet_6\n\nLANGUAGE: logtalk\nCODE:\n```\nlgtunit::benchmark(boyer::top,1000,Time).\n```\n\n----------------------------------------\n\nTITLE: Passing Note Puzzle\nDESCRIPTION: Solves the passing note puzzle involving students, subjects and colors\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/puzzles/NOTES.md#2025-04-06_snippet_9\n\nLANGUAGE: logtalk\nCODE:\n```\nnote::(students(S), print(S)).\n```\n\n----------------------------------------\n\nTITLE: Defining threaded/1 predicate usage\nDESCRIPTION: New built-in predicate for executing conjunction goals in parallel threads, simplifying multi-threading operations that previously required separate threaded_call/1 and threaded_exit/1 calls.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/RELEASE_NOTES.md#2025-04-06_snippet_144\n\nLANGUAGE: Logtalk\nCODE:\n```\nthreaded/1\n```\n\n----------------------------------------\n\nTITLE: Stopping Trace Mode in Logtalk Debugger\nDESCRIPTION: Example of stopping trace mode using the debugger::notrace predicate, which turns off automatic tracing but still allows the debugger to pause at defined breakpoints.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/userman/debugging.rst.txt#2025-04-06_snippet_21\n\nLANGUAGE: text\nCODE:\n```\n| ?- debugger::notrace.\n\nyes\n```\n\n----------------------------------------\n\nTITLE: Defining Dynamic Predicate in Logtalk\nDESCRIPTION: Declares a dynamic predicate 'generated_predicate_/1' which serves as a table of generated auxiliary predicates. It uses the dynamic compilation flag and specifies the predicate template and mode.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/meta_compiler_0.rst.txt#2025-04-06_snippet_0\n\nLANGUAGE: Logtalk\nCODE:\n```\ngenerated_predicate_/1\n```\n\n----------------------------------------\n\nTITLE: Modes and Number of Proofs for phrase/3 in Logtalk\nDESCRIPTION: Specifies the calling modes for phrase/3, indicating that the first argument must be bound to a callable term, while the input and rest lists can be either bound or free variables. The predicate can succeed zero or more times.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/refman/methods/phrase_3.rst#2025-04-06_snippet_2\n\nLANGUAGE: Logtalk\nCODE:\n```\nphrase(+callable, ?list, ?list) - zero_or_more\n```\n\n----------------------------------------\n\nTITLE: Threaded Exit Predicate Modes\nDESCRIPTION: Mode declarations showing argument types and number of possible proofs for threaded_exit predicate.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/refman/predicates/threaded_exit_1_2.rst#2025-04-06_snippet_1\n\nLANGUAGE: prolog\nCODE:\n```\nthreaded_exit(+callable) - zero_or_more\nthreaded_exit(+callable, +nonvar) - zero_or_more\n```\n\n----------------------------------------\n\nTITLE: Domain Error Usage Example\nDESCRIPTION: Demonstrates practical usage of domain_error/2 for validating color values.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/refman/methods/domain_error_2.rst#2025-04-06_snippet_3\n\nLANGUAGE: prolog\nCODE:\n```\n...,\natom(Color),\n\\+ color(Color),\ndomain_error(color, Color).\n```\n\n----------------------------------------\n\nTITLE: Querying predicates in an instance\nDESCRIPTION: Demonstrates that an instance can receive messages for predicates declared in its class(es) and in its class(es) superclass(es).\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/roles/NOTES.md#2025-04-06_snippet_7\n\nLANGUAGE: logtalk\nCODE:\n```\ninstance::current_predicate(P).\n```\n\n----------------------------------------\n\nTITLE: Declaring Object Aliases in Logtalk\nDESCRIPTION: New uses/1 directive for declaring object aliases in Logtalk objects and categories. The aliased object can be a parameter variable in parametric objects or categories.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/RELEASE_NOTES.md#2025-04-06_snippet_52\n\nLANGUAGE: Logtalk\nCODE:\n```\nuses(AliasedObject)\n```\n\n----------------------------------------\n\nTITLE: Querying Prototype Properties in Logtalk (Number of Legs)\nDESCRIPTION: Demonstrates querying the number of legs property from the clyde prototype, which is a standalone prototypical elephant object.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/elephants/NOTES.md#2025-04-06_snippet_2\n\nLANGUAGE: logtalk\nCODE:\n```\nclyde::number_of_legs(N).\n```\n\n----------------------------------------\n\nTITLE: Checking Versions\nDESCRIPTION: Prints version information for Logtalk, Prolog backend, and kernel\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/pardicts/NOTES.md#2025-04-06_snippet_0\n\nLANGUAGE: logtalk\nCODE:\n```\n%versions\n```\n\n----------------------------------------\n\nTITLE: Example of conditional compilation with else/0 in Logtalk\nDESCRIPTION: An example demonstrating conditional compilation where different initialization code runs based on whether the Prolog backend uses bounded arithmetic. The else branch runs only when bounded arithmetic is not true.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/refman/directives/else_0.rst.txt#2025-04-06_snippet_2\n\nLANGUAGE: Logtalk\nCODE:\n```\n:- if(current_prolog_flag(bounded, true)).\n\n    :- initialization(\n        logtalk::print_message(warning,app,bounded_arithmetic)\n    ).\n\n:- else.\n\n    :- initialization(\n        logtalk::print_message(comment,app,unbounded_arithmetic)\n    ).\n\n:- endif.\n```\n\n----------------------------------------\n\nTITLE: Temporal Finishes Relation\nDESCRIPTION: Checks if Interval1 finishes Interval2. Returns zero or one solutions.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/intervalp_0.rst.txt#2025-04-06_snippet_12\n\nLANGUAGE: Logtalk\nCODE:\n```\nfinishes(Interval1,Interval2)\n```\n\n----------------------------------------\n\nTITLE: Operator Template and Mode Declaration in Logtalk\nDESCRIPTION: Defines the template and mode specification for the op/3 directive, showing parameter types and instantiation modes.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/refman/directives/op_3.rst.txt#2025-04-06_snippet_1\n\nLANGUAGE: logtalk\nCODE:\n```\nop(+integer, +associativity, +atom_or_atom_list)\n```\n\n----------------------------------------\n\nTITLE: Directory Lookup Predicate\nDESCRIPTION: Enumerates installed packs/registries and their directories through backtracking. Accepts atom inputs for resource and directory parameters.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/packs_common_0.rst.txt#2025-04-06_snippet_3\n\nLANGUAGE: logtalk\nCODE:\n```\ndirectory(Resource,Directory)\n```\n\n----------------------------------------\n\nTITLE: Parsing JSON String with Different Representations in Logtalk\nDESCRIPTION: Demonstrates parsing a JSON string into different term representations using the json object and its parametric versions.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/library/json/NOTES.md#2025-04-06_snippet_2\n\nLANGUAGE: Prolog\nCODE:\n```\n| ?- json::parse(codes([34,104,101,108,108,111,34]), Term).\nTerm = hello\nyes\n\n| ?- json(atom)::parse(codes([34,104,101,108,108,111,34]), Term).\nTerm = hello\nyes\n\n| ?- json(chars)::parse(codes([34,104,101,108,108,111,34]), Term).\nTerm = chars([h,e,l,l,o])\nyes\n\n| ?- json(codes)::parse(codes([34,104,101,108,108,111,34]), Term).\nTerm = codes([104,101,108,108,111])\nyes\n```\n\n----------------------------------------\n\nTITLE: Defining Table of Contents for Logtalk Reference Manual in reStructuredText\nDESCRIPTION: This snippet creates a table of contents using Sphinx's toctree directive with a maximum depth of 2. It includes links to grammar documentation, control structures, directives, predicates, and methods sections.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/refman/index.rst#2025-04-06_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. toctree::\n   :maxdepth: 2\n\n   grammar\n   control/index\n   directives/index\n   predicates/index\n   methods/index\n```\n\n----------------------------------------\n\nTITLE: Checking File Permissions in Logtalk\nDESCRIPTION: Checks if a file has a specific permission (read, write, or execute). Throws an error if the file does not exist.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/osp_0.rst.txt#2025-04-06_snippet_6\n\nLANGUAGE: prolog\nCODE:\n```\nfile_permission(File, Permission)\n```\n\n----------------------------------------\n\nTITLE: Loading Logtalk Tutor Tool\nDESCRIPTION: This snippet shows how to load the 'tutor' tool in Logtalk. It uses the logtalk_load/1 predicate to load the tool's loader file.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/devtools/tutor.rst.txt#2025-04-06_snippet_0\n\nLANGUAGE: Prolog\nCODE:\n```\n| ?- logtalk_load(tutor(loader)).\n```\n\n----------------------------------------\n\nTITLE: Loading Logtalk Module in Prolog\nDESCRIPTION: Directive to load Logtalk as a module in SWI-Prolog. This allows on-demand loading of Logtalk functionality.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/scripts/pack-experimental/logtalk/README.md#2025-04-06_snippet_0\n\nLANGUAGE: prolog\nCODE:\n```\n:- use_module(library(logtalk)).\n```\n\n----------------------------------------\n\nTITLE: Defining sender/1 Method Signature in Prolog\nDESCRIPTION: Defines the signature of the sender/1 method, which unifies its argument with the object that sent the message under processing.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/refman/methods/sender_1.rst.txt#2025-04-06_snippet_0\n\nLANGUAGE: prolog\nCODE:\n```\nsender(Sender)\n```\n\n----------------------------------------\n\nTITLE: Printing Version Information\nDESCRIPTION: Prints version information for Logtalk, Prolog backend, and kernel if running in notebook mode.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/laptops/NOTES.md#2025-04-06_snippet_1\n\nLANGUAGE: logtalk\nCODE:\n```\n%versions\n```\n\n----------------------------------------\n\nTITLE: Version Check Command in Logtalk\nDESCRIPTION: Command to print Logtalk, Prolog backend, and kernel versions when running in a notebook environment.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/design_patterns/creational/lazy_initialization/NOTES.md#2025-04-06_snippet_0\n\nLANGUAGE: logtalk\nCODE:\n```\n%versions\n```\n\n----------------------------------------\n\nTITLE: Defining Class Instances in Logtalk\nDESCRIPTION: Syntax for defining class instances with optional protocol implementation and category imports.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/refman/directives/object_1_5.rst.txt#2025-04-06_snippet_2\n\nLANGUAGE: logtalk\nCODE:\n```\nobject(Object,\n    instantiates(Classes))\n\nobject(Object,\n    implements(Protocols),\n    instantiates(Classes))\n\nobject(Object,\n    imports(Categories),\n    instantiates(Classes))\n\nobject(Object,\n    implements(Protocols),\n    imports(Categories),\n    instantiates(Classes))\n```\n\n----------------------------------------\n\nTITLE: Loading the Cascade Example in Logtalk\nDESCRIPTION: Loads the cascade example implementation using the loader file.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/cascade/NOTES.md#2025-04-06_snippet_0\n\nLANGUAGE: logtalk\nCODE:\n```\nlogtalk_load(cascade(loader)).\n```\n\n----------------------------------------\n\nTITLE: Loading Logtalk Source with Assertion Suppression\nDESCRIPTION: Query to load a Logtalk source file with a hook for suppressing assertion calls. This is useful for production environments where assertions are not needed.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/tools/assertions/NOTES.md#2025-04-06_snippet_5\n\nLANGUAGE: Logtalk\nCODE:\n```\nlogtalk_load(source, [hook(assertions(production))])\n```\n\n----------------------------------------\n\nTITLE: Creating a Threaded Engine in Logtalk\nDESCRIPTION: Demonstrates how to create a threaded engine using the threaded_engine_create/3 predicate, which allows for lazy computation of solutions.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/userman/threads.rst.txt#2025-04-06_snippet_10\n\nLANGUAGE: Logtalk\nCODE:\n```\n| ?- threaded_engine_create(X, member(X, [1,2,3]), worker).\n```\n\n----------------------------------------\n\nTITLE: Format to Characters List Predicate (3-arg)\nDESCRIPTION: Writes formatted output to a list of characters using a format string and arguments list. Shorthand version that uses empty tail list.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/term_io_protocol_0.rst.txt#2025-04-06_snippet_7\n\nLANGUAGE: logtalk\nCODE:\n```\nformat_to_chars(Format,Arguments,Chars)\n```\n\n----------------------------------------\n\nTITLE: Wrapping Synchronized Predicate Calls\nDESCRIPTION: Example of how calls to synchronized predicates are wrapped using the once/1 meta-predicate when using a single-threaded Prolog compiler.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/RELEASE_NOTES.md#2025-04-06_snippet_102\n\nLANGUAGE: Logtalk\nCODE:\n```\n% Wrapping synchronized predicate call\nonce(SynchronizedPredicateCall)\n```\n\n----------------------------------------\n\nTITLE: Method Signature for print_message_tokens/3 in Logtalk\nDESCRIPTION: Defines the signature of the print_message_tokens/3 method, which takes a stream, prefix, and tokens as parameters. This is a built-in method declared in the logtalk object.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/refman/methods/print_message_tokens_3.rst.txt#2025-04-06_snippet_0\n\nLANGUAGE: Logtalk\nCODE:\n```\nprint_message_tokens(Stream, Prefix, Tokens)\n```\n\n----------------------------------------\n\nTITLE: Installing Windows Dependencies Using Chocolatey\nDESCRIPTION: Command to install required Windows dependencies (GnuPG, Git, and Wget) using the Chocolatey package manager.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/tools/packs/NOTES.md#2025-04-06_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n> choco install gnupg git wget\n```\n\n----------------------------------------\n\nTITLE: Unicode Script Predicate\nDESCRIPTION: Predicate for handling Unicode scripts, relocated to a new file for better performance.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/library/unicode_data/HISTORY.md#2025-04-06_snippet_3\n\nLANGUAGE: Prolog\nCODE:\n```\nunicode_script/2\n```\n\n----------------------------------------\n\nTITLE: Modes and Proof Count for \\+/1 in Logtalk\nDESCRIPTION: Specification of the calling modes and number of proofs for \\+/1. It requires a callable term as input and provides zero or one solutions.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/refman/methods/not_1.rst#2025-04-06_snippet_3\n\nLANGUAGE: logtalk\nCODE:\n```\n\\+ +callable - zero_or_one\n```\n\n----------------------------------------\n\nTITLE: Instance Class Declaration Lookup\nDESCRIPTION: Shows predicate declaration lookup starting at the instance class.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/predicate_lookups/NOTES.md#2025-04-06_snippet_7\n\nLANGUAGE: logtalk\nCODE:\n```\nparaglider::structure(Structure).\n```\n\n----------------------------------------\n\nTITLE: Logtalk meta-type predicate declaration\nDESCRIPTION: Declaration of multifile predicate type::meta_type/3 for describing registered meta-types\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/RELEASE_NOTES.md#2025-04-06_snippet_63\n\nLANGUAGE: Logtalk\nCODE:\n```\ntype::meta_type/3\n```\n\n----------------------------------------\n\nTITLE: Querying extension relationships for prototypes in Logtalk\nDESCRIPTION: Shows how to query extension relationships between prototype objects and their parents using the extends_object/2 built-in predicate.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/userman/objects.rst#2025-04-06_snippet_20\n\nLANGUAGE: text\nCODE:\n```\n| ?- extends_object(Object, Parent).\n```\n\n----------------------------------------\n\nTITLE: Load Complementing Category Patch\nDESCRIPTION: Loads the patch category that defines the around method for the make_sound/0 predicate.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/around_methods/NOTES.md#2025-04-06_snippet_3\n\nLANGUAGE: logtalk\nCODE:\n```\nlogtalk_load(around_methods(patch)).\n```\n\n----------------------------------------\n\nTITLE: Logtalk Flags and Settings\nDESCRIPTION: A list of Logtalk flags and settings that control various aspects of the system's behavior and configuration.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/coding/subethaedit2/Logtalk.mode/Contents/Resources/AutocompleteAdditions.txt#2025-04-06_snippet_24\n\nLANGUAGE: logtalk\nCODE:\n```\nunknown_entities\nsingleton_variables\nunknown_predicates\nundefined_predicates\nunderscore_variables\nportability\nredefined_built_ins\nmissing_directives\nduplicated_directives\ndeprecated\ntrivial_goal_fails\nalways_true_or_false_goals\nlambda_variables\nsuspicious_calls\ncatchall_catch\ncomplements\ndynamic_declarations\nevents\ncontext_switching_calls\nscratch_directory\nreport\nreload\nhook\ncode_prefix\noptimize\ndebug\nclean\nsource_data\nversion\nprolog_dialect\nprolog_version\nprolog_compatible_version\nencoding_directive\nthreads\nengines\nmodules\ntabling\ncoinduction\nprolog_compiler\nprolog_loader\n```\n\n----------------------------------------\n\nTITLE: Testing the Expecteds Library in Logtalk\nDESCRIPTION: This snippet shows how to load and run tests for the 'expecteds' library predicates using the tester.lgt file.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/libraries/expecteds.rst.txt#2025-04-06_snippet_1\n\nLANGUAGE: Prolog\nCODE:\n```\n| ?- logtalk_load(expecteds(tester)).\n```\n\n----------------------------------------\n\nTITLE: ULID Types Category Declaration\nDESCRIPTION: Declaration of the ulid_types category that provides ULID type definitions supporting atom, chars, and codes representations. The category requires loading via logtalk_load(ulid(loader)) and uses the list and type modules.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/ulid_types_0.rst.txt#2025-04-06_snippet_0\n\nLANGUAGE: logtalk\nCODE:\n```\nulid_types\n```\n\n----------------------------------------\n\nTITLE: Activating Monitor in Logtalk\nDESCRIPTION: Predicate to activate all spy points and start monitoring. It has a compilation flag of 'static' and returns one proof.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/monitorp_0.rst.txt#2025-04-06_snippet_1\n\nLANGUAGE: Logtalk\nCODE:\n```\nactivate_monitor/0\n```\n\n----------------------------------------\n\nTITLE: Sorting Lists Using Rational Numbers Order\nDESCRIPTION: Demonstrates sorting a list of rational numbers using a custom sort order defined in the rational object.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/sicstus/NOTES.md#2025-04-06_snippet_1\n\nLANGUAGE: logtalk\nCODE:\n```\nsort(rational)::sort([1/8, 2/7, 6/5, 2/9, 1/3], Sorted).\n```\n\n----------------------------------------\n\nTITLE: Removing Dynamic Category\nDESCRIPTION: Abolishes the dynamic_patch category, reverting the runtime modifications to the employee object.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/complements/allow/NOTES.md#2025-04-06_snippet_13\n\nLANGUAGE: logtalk\nCODE:\n```\nabolish_category(dynamic_patch).\n```\n\n----------------------------------------\n\nTITLE: Defining a Reflexive Logtalk Class\nDESCRIPTION: Shows the syntax for defining a reflexive Logtalk class that is both an instance of a metaclass and a specialization of a superclass.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/userman/objects.rst.txt#2025-04-06_snippet_7\n\nLANGUAGE: logtalk\nCODE:\n```\n:- object(Class,\n    instantiates(Metaclass),\n    specializes(Superclass)).\n    ...\n:- end_object.\n```\n\n----------------------------------------\n\nTITLE: Defining Events in Logtalk\nDESCRIPTION: Uses the define_events/5 predicate to create new events. If any argument is a free variable, it defines a set of matching events.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/userman/events.rst.txt#2025-04-06_snippet_1\n\nLANGUAGE: Prolog\nCODE:\n```\n| ?- define_events(Event, Object, Message, Sender, Monitor).\n```\n\n----------------------------------------\n\nTITLE: Encoding URL to Base64URL in Logtalk\nDESCRIPTION: This snippet demonstrates encoding a URL to Base64URL format using the base64url::generate/2 predicate, which is safer for URL encoding.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/libraries/base64.rst#2025-04-06_snippet_4\n\nLANGUAGE: prolog\nCODE:\n```\n| ?- base64url::generate(atom(Base64URL), 'https://logtalk.org').\nBase64URL == 'aHR0cHM6Ly9sb2d0YWxrLm9yZw'\nyes\n```\n\n----------------------------------------\n\nTITLE: Overriding Default Size of Generated Terms in Logtalk\nDESCRIPTION: Shows how to override the default size (42) for generated terms by defining a clause for the arbitrary::max_size/1 multifile predicate.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/library/arbitrary/NOTES.md#2025-04-06_snippet_9\n\nLANGUAGE: logtalk\nCODE:\n```\n:- multifile(arbitrary::max_size/1).\narbitrary::max_size(7).\n```\n\n----------------------------------------\n\nTITLE: Loading Security Test Suite\nDESCRIPTION: Command to load the secure meta-predicates example and test suite to verify compilation and runtime error messages.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/securemp/NOTES.md#2025-04-06_snippet_2\n\nLANGUAGE: logtalk\nCODE:\n```\nlogtalk_load(securemp(loader)).\n```\n\n----------------------------------------\n\nTITLE: Call Method Signature in Logtalk\nDESCRIPTION: Shows the basic syntax for the call/1-N method, which allows calling a goal or appending additional arguments to a closure.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/refman/methods/call_N.rst#2025-04-06_snippet_0\n\nLANGUAGE: logtalk\nCODE:\n```\ncall(Goal)\ncall(Closure, Arg1, ...)\n```\n\n----------------------------------------\n\nTITLE: Loading Facade Design Pattern Implementation\nDESCRIPTION: This snippet loads the Facade design pattern sample implementation from the design patterns directory.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/design_patterns/structural/facade/NOTES.md#2025-04-06_snippet_1\n\nLANGUAGE: logtalk\nCODE:\n```\nlogtalk_load(design_patterns('structural/facade/loader')).\n```\n\n----------------------------------------\n\nTITLE: Defining leaves/1 predicate in Logtalk\nDESCRIPTION: Returns a list of all object leaves. It is a static predicate that unifies its argument with a list of all leaves in the hierarchy.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/hierarchyp_0.rst.txt#2025-04-06_snippet_3\n\nLANGUAGE: Logtalk\nCODE:\n```\nleaves(Leaves)\n```\n\n----------------------------------------\n\nTITLE: Defining FAQ Table of Contents in reStructuredText\nDESCRIPTION: This snippet defines the structure of the Logtalk FAQ using a toctree directive in reStructuredText. It lists various sections of the FAQ, including general questions, compatibility, installation, and more.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/faq/index.rst#2025-04-06_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n===\nFAQ\n===\n\n.. toctree::\n   :maxdepth: 2\n\n   general\n   compatibility\n   installation\n   portability\n   programming\n   troubleshooting\n   usability\n   deployment\n   performance\n   licensing\n   support\n```\n\n----------------------------------------\n\nTITLE: Querying Loaded File Properties in Logtalk\nDESCRIPTION: New methods added to the logtalk object for querying properties of loaded files. The loaded_file/1 predicate checks if a file is loaded, while loaded_file_property/2 retrieves specific properties of a loaded file.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/RELEASE_NOTES.md#2025-04-06_snippet_109\n\nLANGUAGE: Logtalk\nCODE:\n```\nlogtalk::loaded_file/1\nlogtalk::loaded_file_property/2\n```\n\n----------------------------------------\n\nTITLE: Querying Multiple Properties of Object q1 in Logtalk\nDESCRIPTION: Retrieves multiple properties (color, side length, and position) from the 'q1' object using individual message sends instead of broadcasting to work around a XSB parser limitation.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/shapes/ph/NOTES.md#2025-04-06_snippet_4\n\nLANGUAGE: logtalk\nCODE:\n```\nq1::color(Color), q1::side(Side), q1::position(X, Y).\n```\n\n----------------------------------------\n\nTITLE: Displaying Version Information in Logtalk\nDESCRIPTION: Prints the Logtalk, Prolog backend, and kernel versions when running in a notebook environment.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/recipes/NOTES.md#2025-04-06_snippet_0\n\nLANGUAGE: logtalk\nCODE:\n```\n%versions\n```\n\n----------------------------------------\n\nTITLE: Prototype Definition Lookup\nDESCRIPTION: Demonstrates lookup of predicate definition starting at the prototype itself.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/predicate_lookups/NOTES.md#2025-04-06_snippet_3\n\nLANGUAGE: logtalk\nCODE:\n```\nmountain_bike::frame(Material).\n```\n\n----------------------------------------\n\nTITLE: Loading Symbiosis Example in Logtalk\nDESCRIPTION: Loads the symbiosis example in Logtalk. This is a prerequisite for running the subsequent code snippets.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/symbiosis/NOTES.md#2025-04-06_snippet_0\n\nLANGUAGE: logtalk\nCODE:\n```\nlogtalk_load(symbiosis(loader)).\n```\n\n----------------------------------------\n\nTITLE: Using Object Wrapper Hook for Prolog Code\nDESCRIPTION: Demonstrates how to use the object_wrapper_hook from the hook_objects library to wrap Prolog code for testing.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/devtools/lgtunit.rst.txt#2025-04-06_snippet_40\n\nLANGUAGE: prolog\nCODE:\n```\n| ?- logtalk_load(hook_objects(loader)).\n...\n\n| ?- logtalk_load(plain, [hook(object_wrapper_hook)]).\n...\n```\n\n----------------------------------------\n\nTITLE: Print Version Information in Logtalk\nDESCRIPTION: Prints the versions of Logtalk, Prolog backend, and kernel when running in a notebook environment.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/testing/NOTES.md#2025-04-06_snippet_0\n\nLANGUAGE: logtalk\nCODE:\n```\n%versions\n```\n\n----------------------------------------\n\nTITLE: Threaded Notify Predicate Modes\nDESCRIPTION: Defines the predicate modes and number of proofs, indicating that the argument must be instantiated (ground) and the predicate is deterministic.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/refman/predicates/threaded_notify_1.rst#2025-04-06_snippet_1\n\nLANGUAGE: prolog\nCODE:\n```\nthreaded_notify(@term) - one\nthreaded_notify(@list(term)) - one\n```\n\n----------------------------------------\n\nTITLE: Mode Declaration\nDESCRIPTION: Specifies the input/output modes and number of proofs for the setof/3 predicate.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/refman/methods/setof_3.rst.txt#2025-04-06_snippet_2\n\nLANGUAGE: prolog\nCODE:\n```\nsetof(@term, +callable, -list) - zero_or_more\n```\n\n----------------------------------------\n\nTITLE: Defining and Using a Category in Logtalk\nDESCRIPTION: Shows how to define a category with a public predicate and how to call that predicate from an object importing the category.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/userman/categories.rst#2025-04-06_snippet_16\n\nLANGUAGE: Logtalk\nCODE:\n```\n:- category(output).\n\n    :- public(out/1).\n\n    out(X) :-\n        write(X), nl.\n\n:- end_category.\n```\n\nLANGUAGE: Logtalk\nCODE:\n```\n:- object(worker,\n    imports(output)).\n\n    ...\n    do(Task) :-\n        execute(Task, Result),\n        ::out(Result).\n    ...\n\n:- end_object.\n```\n\n----------------------------------------\n\nTITLE: Defining and Using a Category in Logtalk\nDESCRIPTION: Shows how to define a category with a public predicate and how to call that predicate from an object importing the category.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/userman/categories.rst#2025-04-06_snippet_16\n\nLANGUAGE: Logtalk\nCODE:\n```\n:- category(output).\n\n    :- public(out/1).\n\n    out(X) :-\n        write(X), nl.\n\n:- end_category.\n```\n\nLANGUAGE: Logtalk\nCODE:\n```\n:- object(worker,\n    imports(output)).\n\n    ...\n    do(Task) :-\n        execute(Task, Result),\n        ::out(Result).\n    ...\n\n:- end_object.\n```\n\n----------------------------------------\n\nTITLE: Checking Versions in Logtalk Notebook\nDESCRIPTION: Prints the Logtalk, Prolog backend, and kernel versions in the notebook environment.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/design_patterns/creational/multiton/NOTES.md#2025-04-06_snippet_0\n\nLANGUAGE: logtalk\nCODE:\n```\n%versions\n```\n\n----------------------------------------\n\nTITLE: Broadcasting Messages in Logtalk\nDESCRIPTION: Demonstrates the extended syntax for sending multiple messages to the same object, improving program readability. This is semantically equivalent to sending individual messages.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/userman/messages.rst#2025-04-06_snippet_4\n\nLANGUAGE: Logtalk\nCODE:\n```\n| ?- Object::(Message1, Message2, ...).\n```\n\n----------------------------------------\n\nTITLE: Defining uses_diagram(Format) Object in Logtalk\nDESCRIPTION: Declares the uses_diagram(Format) object, which extends entity_diagram(Format) and uses the logtalk object. It is used to generate entity diagrams focusing on uses/2 and use_module/2 relations.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/uses_diagram_1.rst.txt#2025-04-06_snippet_0\n\nLANGUAGE: Logtalk\nCODE:\n```\nuses_diagram(Format)\n```\n\n----------------------------------------\n\nTITLE: Loading Standard Library and Obtaining Coupling Metrics in Logtalk\nDESCRIPTION: These queries load the standard library and then apply the coupling metric to all its entities. It shows how to analyze a large set of code.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/tools/code_metrics/SCRIPT.txt#2025-04-06_snippet_3\n\nLANGUAGE: Logtalk\nCODE:\n```\n| ?- logtalk_load(library(all_loader)).\n```\n\nLANGUAGE: Logtalk\nCODE:\n```\n| ?- coupling_metric::library(library).\n```\n\n----------------------------------------\n\nTITLE: Adding Items with Normal Strategy\nDESCRIPTION: Adds an item to the first customer's bill using the normal billing strategy.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/design_patterns/behavioral/strategy/NOTES.md#2025-04-06_snippet_3\n\nLANGUAGE: logtalk\nCODE:\n```\nfirst::add(1.0, 1).\n```\n\n----------------------------------------\n\nTITLE: Reading Text Files to Character Codes with Custom Tail in Logtalk\nDESCRIPTION: Reads a text file into a list of character codes with a custom tail terminator. Takes a file name as input and returns the file contents as a list of character codes terminated by the given tail.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/reader_0.rst.txt#2025-04-06_snippet_1\n\nLANGUAGE: Logtalk\nCODE:\n```\nfile_to_codes(File,Codes,Tail)\n```\n\n----------------------------------------\n\nTITLE: Setting Logtalk Flag for QuickCheck Warnings\nDESCRIPTION: Ensures that QuickCheck warnings are printed by setting the appropriate Logtalk flag.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/quick_check/NOTES.md#2025-04-06_snippet_1\n\nLANGUAGE: logtalk\nCODE:\n```\nset_logtalk_flag(report, warnings).\n```\n\n----------------------------------------\n\nTITLE: Defining Backend Adapter Hook Object in Logtalk\nDESCRIPTION: This snippet defines the backend_adapter_hook object, which implements the expanding protocol. It applies expansion rules from the Prolog backend adapter file and is loaded using the hook_objects(loader).\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/backend_adapter_hook_0.rst.txt#2025-04-06_snippet_0\n\nLANGUAGE: Logtalk\nCODE:\n```\nbackend_adapter_hook\n```\n\n----------------------------------------\n\nTITLE: Documentation URL Management in Logtalk\nDESCRIPTION: Protected predicate that adds documentation URLs when using the url_prefixes/2 option.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/library_diagram_1.rst.txt#2025-04-06_snippet_0\n\nLANGUAGE: logtalk\nCODE:\n```\nadd_library_documentation_url(Kind,Options,Library,NodeOptions)\n```\n\n----------------------------------------\n\nTITLE: Converting Assertion Failures into Runtime Errors in Logtalk\nDESCRIPTION: Category definition that converts assertion failures into runtime errors by throwing an exception when an assertion fails, optionally also displaying the original message.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/devtools/assertions.rst.txt#2025-04-06_snippet_8\n\nLANGUAGE: logtalk\nCODE:\n```\n:- category(assertions_failures_to_errors).\n\n    :- multifile(logtalk::message_hook/4).\n    :- dynamic(logtalk::message_hook/4).\n\n    logtalk::message_hook(Message, error, assertions, Tokens) :-\n        % uncomment the next two lines to also print the default message\n        % logtalk::message_prefix_stream(error, assertions, Prefix, Stream),\n        % logtalk::print_message_tokens(Stream, Prefix, Tokens),\n        throw(error(Message, _)).\n\n:- end_category.\n```\n\n----------------------------------------\n\nTITLE: Computing Calibration for Sample 1 in Logtalk\nDESCRIPTION: Retrieves the directory where the trebuchet object is stored, constructs the path to the sample_1 test file, and computes the calibration value using the solution predicate.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/trebuchet/NOTES.md#2025-04-06_snippet_2\n\nLANGUAGE: logtalk\nCODE:\n```\nobject_property(trebuchet, file(_, Directory)),\natom_concat(Directory, 'test_files/sample_1', File),\ntrebuchet::solution(File, Calibration).\n```\n\n----------------------------------------\n\nTITLE: Loading the Format Library in Logtalk\nDESCRIPTION: Code to load all entities in the format library using the loader.lgt file.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/libraries/format.rst#2025-04-06_snippet_0\n\nLANGUAGE: prolog\nCODE:\n```\n| ?- logtalk_load(format(loader)).\n```\n\n----------------------------------------\n\nTITLE: Loading DIF Library in Logtalk\nDESCRIPTION: Command to load all entities in the dif library using the loader.lgt file.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/libraries/dif.rst#2025-04-06_snippet_0\n\nLANGUAGE: prolog\nCODE:\n```\n| ?- logtalk_load(dif(loader)).\n```\n\n----------------------------------------\n\nTITLE: Version String Declaration\nDESCRIPTION: Version string indicating Logtalk version 3.91.0 beta 1\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/VERSION.txt#2025-04-06_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n3.91.0-b01\n```\n\n----------------------------------------\n\nTITLE: Installing Python Dependencies for Logtalk Tools\nDESCRIPTION: Command-line instructions for installing required Python packages (Pygments, Sphinx, and sphinx_rtd_theme) using pip to support various Logtalk tools, particularly lgtdoc.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/tools/NOTES.md#2025-04-06_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ pip install --upgrade pygments\n$ pip install --upgrade sphinx\n$ pip install --upgrade sphinx_rtd_theme\n```\n\n----------------------------------------\n\nTITLE: Meta-predicate Template Declaration\nDESCRIPTION: Declares the meta-predicate template for setof/3, showing argument types.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/refman/methods/setof_3.rst.txt#2025-04-06_snippet_1\n\nLANGUAGE: prolog\nCODE:\n```\nsetof(*, ^, *)\n```\n\n----------------------------------------\n\nTITLE: Loading Puzzle Files\nDESCRIPTION: Loads the puzzle example files and required library dependencies\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/puzzles/NOTES.md#2025-04-06_snippet_1\n\nLANGUAGE: logtalk\nCODE:\n```\nlogtalk_load(puzzles(loader)).\n```\n\n----------------------------------------\n\nTITLE: Declaring Uses/1 Directive Syntax\nDESCRIPTION: Shows the basic syntax for the uses/1 directive that declares object aliases.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/refman/directives/uses_1.rst#2025-04-06_snippet_0\n\nLANGUAGE: logtalk\nCODE:\n```\nuses([Object as Alias, ...])\n```\n\n----------------------------------------\n\nTITLE: Pack Management Predicates in Logtalk\nDESCRIPTION: A collection of predicate specifications for managing Logtalk packs. Each predicate includes compilation flags, templates, modes, number of proofs, and detailed exception specifications.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/packs_0.rst.txt#2025-04-06_snippet_7\n\nLANGUAGE: logtalk\nCODE:\n```\nupdate(Pack)\nupdate/0\nuninstall(Pack,Options)\nuninstall(Pack)\nuninstall/0\nclean(Registry,Pack)\nclean(Pack)\nclean/0\nsave(File,Options)\nsave(File)\nrestore(File,Options)\nrestore(File)\ndependents(Registry,Pack,Dependents)\n```\n\n----------------------------------------\n\nTITLE: Setting Leashed Ports\nDESCRIPTION: Commands to set which debugging ports should pause for user interaction.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/userman/debugging.rst#2025-04-06_snippet_5\n\nLANGUAGE: text\nCODE:\n```\n| ?- debugger::leash([call, exit, fail]).\n```\n\nLANGUAGE: text\nCODE:\n```\n| ?- debugger::leash(loose).\n```\n\n----------------------------------------\n\nTITLE: Querying Root Object Interface\nDESCRIPTION: Queries the interface of the 'root' object which is the starting point for the class-based hierarchy.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/inheritance/NOTES.md#2025-04-06_snippet_9\n\nLANGUAGE: logtalk\nCODE:\n```\nroot::interface.\n```\n\n----------------------------------------\n\nTITLE: Testing Compound Defined Predicate\nDESCRIPTION: Tests a predicate that is true based on other defined predicates\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/closed_world_assumption/NOTES.md#2025-04-06_snippet_5\n\nLANGUAGE: logtalk\nCODE:\n```\nhouse::pleasant.\n```\n\n----------------------------------------\n\nTITLE: Deleting Specific Monitored Events in Logtalk\nDESCRIPTION: The del_monitors/4 predicate removes all monitoring relationships that match the specified pattern. It allows for selective removal of monitors based on Object, Message, Sender, and Monitor criteria.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/event_registryp_0.rst.txt#2025-04-06_snippet_5\n\nLANGUAGE: logtalk\nCODE:\n```\ndel_monitors(Object,Message,Sender,Monitor)\n```\n\n----------------------------------------\n\nTITLE: Fixing Options List in Logtalk\nDESCRIPTION: The fix_options/2 predicate processes a list of options, applying any necessary transformations or corrections to produce a fixed list of options.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/options_protocol_0.rst.txt#2025-04-06_snippet_9\n\nLANGUAGE: prolog\nCODE:\n```\nfix_options(Options,FixedOptions)\n```\n\n----------------------------------------\n\nTITLE: Meta-predicate Template for findall/3 in Logtalk\nDESCRIPTION: The meta-predicate template for findall/3, indicating that the second argument is a goal (0) while the first and third arguments are regular terms (*).\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/refman/methods/findall_3.rst#2025-04-06_snippet_1\n\nLANGUAGE: logtalk\nCODE:\n```\nfindall(*, 0, *)\n```\n\n----------------------------------------\n\nTITLE: Dynamic Predicate for Tracking Missing Directives in Logtalk\nDESCRIPTION: Internal dynamic table that records missing predicate directives identified during analysis. Used to generate advice for completing the Prolog to Logtalk conversion.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/wrapper_0.rst.txt#2025-04-06_snippet_19\n\nLANGUAGE: Logtalk\nCODE:\n```\nmissing_predicate_directive_/3\n```\n\n----------------------------------------\n\nTITLE: Printing books with extras\nDESCRIPTION: This snippet prints a list of books that have extras using the data_processing object.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/books/NOTES.md#2025-04-06_snippet_2\n\nLANGUAGE: logtalk\nCODE:\n```\ndata_processing::print.\n```\n\n----------------------------------------\n\nTITLE: System Error Mode Declaration\nDESCRIPTION: Specifies the mode declaration for the system_error/0 method, indicating it always results in an error.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/refman/methods/system_error_0.rst#2025-04-06_snippet_2\n\nLANGUAGE: logtalk\nCODE:\n```\nsystem_error - error\n```\n\n----------------------------------------\n\nTITLE: Querying Object Predicate in Logtalk\nDESCRIPTION: This snippet demonstrates that objects playing the role of classes define predicates for their instances, not for themselves, by attempting to query the 'nsides' predicate of the 'square' object.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/shapes/ch/NOTES.md#2025-04-06_snippet_2\n\nLANGUAGE: logtalk\nCODE:\n```\ncatch(square::nsides(N), Error, true).\n```\n\n----------------------------------------\n\nTITLE: Generating Library Documentation Example\nDESCRIPTION: Sample sequence of commands to load an application and generate its documentation using lgtdoc.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/tools/lgtdoc/NOTES.md#2025-04-06_snippet_4\n\nLANGUAGE: logtalk\nCODE:\n```\n?- {my_app(loader)}.\n...\n\n?- {lgtdoc(loader)}.\n...\n\n?- lgtdoc::library(my_app).\n...\n```\n\n----------------------------------------\n\nTITLE: Defining a Logtalk Instance of a Class\nDESCRIPTION: Illustrates the syntax for defining a Logtalk object as an instance of a class using the instantiates directive.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/userman/objects.rst.txt#2025-04-06_snippet_5\n\nLANGUAGE: logtalk\nCODE:\n```\n:- object(Object,\n    instantiates(Class)).\n    ...\n:- end_object.\n```\n\n----------------------------------------\n\nTITLE: Testing Recorded Database Library in Logtalk\nDESCRIPTION: Command to load and run tests for the recorded_database library predicates.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/library/recorded_database/NOTES.md#2025-04-06_snippet_1\n\nLANGUAGE: logtalk\nCODE:\n```\n| ?- logtalk_load(recorded_database(tester)).\n```\n\n----------------------------------------\n\nTITLE: Retrieving Stream Variable Value in Logtalk\nDESCRIPTION: Unifies a value with the current state of a stream variable.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/streamvars_0.rst.txt#2025-04-06_snippet_3\n\nLANGUAGE: Logtalk\nCODE:\n```\nVariable => Value\n```\n\n----------------------------------------\n\nTITLE: Predicate Mode Declaration in Prolog\nDESCRIPTION: Specifies the predicate mode declaration indicating that both arguments can be either input or output, with zero or more solutions possible.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/refman/predicates/complements_object_2.rst.txt#2025-04-06_snippet_1\n\nLANGUAGE: prolog\nCODE:\n```\ncomplements_object(?category_identifier, ?object_identifier) - zero_or_more\n```\n\n----------------------------------------\n\nTITLE: Querying Packs Directory\nDESCRIPTION: Logtalk query to retrieve the current packs storage directory.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/tools/packs/NOTES.md#2025-04-06_snippet_7\n\nLANGUAGE: prolog\nCODE:\n```\n| ?- packs::logtalk_packs(Directory).\n```\n\n----------------------------------------\n\nTITLE: Setting Global Debug and Source Data Flags in Logtalk\nDESCRIPTION: Shows how to set global debug and source data flags before compiling source files for profiling.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/tools/ports_profiler/NOTES.md#2025-04-06_snippet_2\n\nLANGUAGE: Logtalk\nCODE:\n```\n| ?- set_logtalk_flag(debug, on), set_logtalk_flag(source_data, on).\n```\n\n----------------------------------------\n\nTITLE: Decoding CBOR to Logtalk Term\nDESCRIPTION: Example of decoding a CBOR byte sequence to a Logtalk term using the cbor::parse/2 predicate.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/libraries/cbor.rst.txt#2025-04-06_snippet_2\n\nLANGUAGE: Logtalk\nCODE:\n```\n| ?- cbor::parse([0x9f,0x61,0x61,0xbf,0x61,0x62,0x61,0x63,0xff,0xff], Term).\nTerm = [a,{b-c}]\nyes\n```\n\n----------------------------------------\n\nTITLE: Jam Thief Puzzle Basic Query\nDESCRIPTION: Determines who stole the jam in the puzzle scenario\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/puzzles/NOTES.md#2025-04-06_snippet_4\n\nLANGUAGE: logtalk\nCODE:\n```\njam_thief::thief(Thief).\n```\n\n----------------------------------------\n\nTITLE: Installing an Encrypted Pack in Logtalk\nDESCRIPTION: Shows how to install a GPG-encrypted pack by providing the passphrase through the gpg option.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/devtools/packs.rst.txt#2025-04-06_snippet_31\n\nLANGUAGE: logtalk\nCODE:\n```\n| ?- packs::install(reg, bar, 1:1:2, [gpg('--batch --passphrase test123')]).\n```\n\n----------------------------------------\n\nTITLE: Browsing the Handbook\nDESCRIPTION: Command to browse the Texinfo version of the Logtalk Handbook on POSIX systems.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/tools/help/SCRIPT.txt#2025-04-06_snippet_7\n\nLANGUAGE: logtalk\nCODE:\n```\n| ?- help::handbook.\n```\n\n----------------------------------------\n\nTITLE: Example of Using evaluation_error/1 for Division by Zero in Logtalk\nDESCRIPTION: Demonstrates how to use the evaluation_error/1 method to throw a zero_divisor error when a divisor is found to be zero.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/refman/methods/evaluation_error_1.rst#2025-04-06_snippet_3\n\nLANGUAGE: logtalk\nCODE:\n```\n...,\nDivisor =:= 0,\nevaluation_error(zero_divisor).\n```\n\n----------------------------------------\n\nTITLE: Example: Retracting clauses in self\nDESCRIPTION: Example of using retractall/1 to remove all clauses with a matching head of a public or protected dynamic predicate in self.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/refman/methods/retractall_1.rst.txt#2025-04-06_snippet_3\n\nLANGUAGE: Logtalk\nCODE:\n```\n::retractall(Head)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Term by Reference in Logtalk\nDESCRIPTION: The instance/2 predicate retrieves the term associated with a given reference.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/recorded_database_core_0.rst.txt#2025-04-06_snippet_7\n\nLANGUAGE: logtalk\nCODE:\n```\ninstance(Reference,Term)\n```\n\n----------------------------------------\n\nTITLE: Cloning Diesel Car Prototype\nDESCRIPTION: Creates a clone of the current prototype and describes its properties\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/design_patterns/creational/prototype/NOTES.md#2025-04-06_snippet_3\n\nLANGUAGE: logtalk\nCODE:\n```\ncar::clone(Clone), Clone::describe.\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Usage Examples of threaded_peek/1-2 in Prolog\nDESCRIPTION: Provides example usages of the threaded_peek/1 and threaded_peek/2 predicates. These examples show how to check for asynchronous goal proofs and message results.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/refman/predicates/threaded_peek_1_2.rst.txt#2025-04-06_snippet_2\n\nLANGUAGE: Prolog\nCODE:\n```\nthreaded_peek(Goal)\nthreaded_peek(::Goal)\nthreaded_peek(Object::Goal)\n```\n\n----------------------------------------\n\nTITLE: Formatted Writing in Logtalk\nDESCRIPTION: A predicate for writing formatted output to an atom using the de facto standard format specification, supporting a format string and a list of arguments.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/term_io_protocol_0.rst.txt#2025-04-06_snippet_6\n\nLANGUAGE: Logtalk\nCODE:\n```\nformat_to_atom(Format,Arguments,Atom)\n```\n\n----------------------------------------\n\nTITLE: Resetting Profiling Data\nDESCRIPTION: Shows how to reset the profiling data before running a new profiling session.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/tools/profiler/SCRIPT.txt#2025-04-06_snippet_2\n\nLANGUAGE: logtalk\nCODE:\n```\n| ?- profiler::reset.\n```\n\n----------------------------------------\n\nTITLE: Installing d2 and Graphviz on macOS using Homebrew\nDESCRIPTION: Command for installing the required d2 and Graphviz tools on macOS using the Homebrew package manager.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/tools/diagrams/NOTES.md#2025-04-06_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ brew install d2 graphviz\n```\n\n----------------------------------------\n\nTITLE: Shell Commands for Fixing Script Permissions\nDESCRIPTION: Shell commands to fix executable permissions on script files when using SWI-Prolog 7.3.28 or older versions.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/scripts/pack-experimental/logtalk/README.md#2025-04-06_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n$ cd $HOME/lib/swipl/pack/logtalk/logtalk-3.91.0\n$ chmod a+x scripts/cleandist.sh\n$ ./scripts/cleandist.sh\n```\n\n----------------------------------------\n\nTITLE: Defining Integer Previous Relations in Prolog\nDESCRIPTION: Defines five facts establishing the previous number relationship between consecutive integers from 0 to 5. Each line states that a number is the previous value of the next number in sequence.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/operators/previous.txt#2025-04-06_snippet_0\n\nLANGUAGE: prolog\nCODE:\n```\n1 previous 0.\n2 previous 1.\n3 previous 2.\n4 previous 3.\n5 previous 4.\n```\n\n----------------------------------------\n\nTITLE: Generating Steiner Triples using Constraint Programming in Logtalk\nDESCRIPTION: Generates Steiner triples for a set of 9 elements using constraint programming. This example showcases how to handle combinatorial problems.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/constraints/eclipse/NOTES.md#2025-04-06_snippet_2\n\nLANGUAGE: logtalk\nCODE:\n```\nsteiner::steiner(9,X).\n```\n\n----------------------------------------\n\nTITLE: Fixed Point Prevention in Goal Expansion\nDESCRIPTION: An object demonstrating how Logtalk prevents infinite loops in goal expansion by checking that a goal was not the result of a previous expansion of the same goal.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/userman/expansion.rst#2025-04-06_snippet_3\n\nLANGUAGE: logtalk\nCODE:\n```\n:- object(fixed_point,\n    implements(expanding)).\n\n    goal_expansion(a, b).\n    goal_expansion(b, c).\n    goal_expansion(c, (a -> b; c)).\n\n:- end_object.\n```\n\n----------------------------------------\n\nTITLE: Fixing Script Permissions on Older SWI-Prolog Versions\nDESCRIPTION: Shell commands to fix executable permissions on Logtalk scripts when using SWI-Prolog 7.3.28 or older. This is needed because the archive library in older versions doesn't preserve executable permissions.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/scripts/pack/logtalk/README.md#2025-04-06_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n$ cd $HOME/lib/swipl/pack/logtalk/logtalk-3.91.0\n$ chmod a+x scripts/cleandist.sh\n$ ./scripts/cleandist.sh\n```\n\n----------------------------------------\n\nTITLE: Testing Base64 Library in Logtalk\nDESCRIPTION: Shows how to load the tester.lgt file to test the base64 library predicates.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/libraries/base64.rst.txt#2025-04-06_snippet_1\n\nLANGUAGE: prolog\nCODE:\n```\n| ?- logtalk_load(base64(tester)).\n```\n\n----------------------------------------\n\nTITLE: Generating Version 1 UUID as Character Code List in Logtalk\nDESCRIPTION: Generates a version 1 UUID as a list of character codes using the uuid(codes)::uuid_v1/2 predicate.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/libraries/uuid.rst.txt#2025-04-06_snippet_4\n\nLANGUAGE: Prolog\nCODE:\n```\n| ?- uuid(codes)::uuid_v1([0xf2,0xd1,0x90,0x94,0xdc,0x4b], UUID).\nUUID = [48,48,52,99,99,54,99,48,45,56,50,99,102,45,49,49,101,98,45,\n           98,57,102,52,45,102,50,100,49,57,48,57,52,100,99,52,98]\nyes\n```\n\n----------------------------------------\n\nTITLE: Decoding CBOR Data in Logtalk\nDESCRIPTION: Example of using the parse/2 predicate to decode CBOR-encoded data into Logtalk data structures.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/libraries/cbor.rst#2025-04-06_snippet_2\n\nLANGUAGE: logtalk\nCODE:\n```\n| ?- cbor::parse([0x9f,0x61,0x61,0xbf,0x61,0x62,0x61,0x63,0xff,0xff], Term).\nTerm = [a,{b-c}]\nyes\n```\n\n----------------------------------------\n\nTITLE: Testing the arbitrary Library in Logtalk\nDESCRIPTION: Command to test the arbitrary library predicates using the tester.lgt file.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/libraries/arbitrary.rst#2025-04-06_snippet_1\n\nLANGUAGE: prolog\nCODE:\n```\n| ?- logtalk_load(arbitrary(tester)).\n```\n\n----------------------------------------\n\nTITLE: Defining Recursive Type Generator for Binary Trees in Logtalk\nDESCRIPTION: Complex example defining a binary tree type with a generator that creates random trees up to a specified depth.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/libraries/arbitrary.rst#2025-04-06_snippet_8\n\nLANGUAGE: prolog\nCODE:\n```\n:- category(binary_tree).\n\n    :- multifile(type::type/1).\n    type::type(node(_)).\n\n    :- multifile(type::check/2).\n    type::check(node(_), Term) :-\n        (   check(Term) ->\n            true\n        ;   var(Term) ->\n            throw(instantiation_error)\n        ;   throw(type_error(node(_), Term))\n        ).\n\n    check(Term) :-\n        (   integer(Term) ->\n            true\n        ;   compound(Term),\n            Term = node(Left, Right),\n            check(Left),\n            check(Right)\n        ).\n\n    :- multifile(arbitrary::arbitrary/1).\n    arbitrary::arbitrary(node(_)).\n\n    :- multifile(arbitrary::arbitrary/2).\n    arbitrary::arbitrary(node(Depth), Arbitrary) :-\n    (   Depth > 1 ->\n        NewDepth is Depth - 1,\n        type::arbitrary(\n            types_frequency([\n                integer - 1,\n                compound(\n                    node,\n                    [\n                        types([node(NewDepth), integer]),\n                        types([node(NewDepth), integer])\n                    ]\n                ) - 3\n            ]),\n            Arbitrary\n        )\n    ;   type::arbitrary(\n    integer, Arbitrary)\n    ).\n\n:- end_category.\n```\n\n----------------------------------------\n\nTITLE: Defining eos//0 Method in Logtalk\nDESCRIPTION: The eos//0 method is a built-in non-terminal that matches the end-of-input in grammar rules. It is implemented by checking if the implicit difference list unifies with []-[].\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/refman/methods/eos_0.rst#2025-04-06_snippet_0\n\nLANGUAGE: Logtalk\nCODE:\n```\neos\n```\n\n----------------------------------------\n\nTITLE: Using the (^^)/1 Control Construct in Logtalk\nDESCRIPTION: The basic syntax for the (^^)/1 control construct, which calls an imported or inherited predicate definition while preserving the execution context.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/refman/control/call_super_1.rst.txt#2025-04-06_snippet_0\n\nLANGUAGE: logtalk\nCODE:\n```\n^^Predicate\n```\n\n----------------------------------------\n\nTITLE: Displaying English language banner\nDESCRIPTION: This snippet displays the welcome message in English using the localization mechanism.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/localizations/NOTES.md#2025-04-06_snippet_3\n\nLANGUAGE: logtalk\nCODE:\n```\nmy_game(en)::banner.\n```\n\n----------------------------------------\n\nTITLE: Setting Up ASCII Stack Monitor\nDESCRIPTION: This code sets up an ASCII stack monitor to visually track brick movements.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/bricks/NOTES.md#2025-04-06_snippet_3\n\nLANGUAGE: logtalk\nCODE:\n```\nafter_event_registry::set_monitor(_, move(_,_), _, stack_monitor).\n```\n\n----------------------------------------\n\nTITLE: Learn and Print Predicate Definition\nDESCRIPTION: Predicate that learns and prints a set of clauses to output. Takes no arguments and performs learning with side effects.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/metagol_example_protocol_0.rst.txt#2025-04-06_snippet_1\n\nLANGUAGE: logtalk\nCODE:\n```\nlearn\n```\n\n----------------------------------------\n\nTITLE: README Template Structure for Logtalk Application\nDESCRIPTION: A template README file for Logtalk applications with placeholder tags for project name, year, organization name, and project description. The template includes copyright information and is structured with horizontal separators.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/coding/xcode/Logtalk Application/NOTES.txt#2025-04-06_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n=================================================================\n<PROJECTNAME>\nRelease 1.0\n\nCopyright (c) <YEAR> <ORGANIZATIONNAME>.  All Rights Reserved.\n=================================================================\n\nDescription of <PROJECTNAME> Logtalk application\n```\n\n----------------------------------------\n\nTITLE: Load Unpatched Bird Object\nDESCRIPTION: Loads the initial bird object containing the original make_sound/0 predicate definition.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/around_methods/NOTES.md#2025-04-06_snippet_1\n\nLANGUAGE: logtalk\nCODE:\n```\nlogtalk_load(around_methods(bird)).\n```\n\n----------------------------------------\n\nTITLE: Loading Logtalk Tutor Tool\nDESCRIPTION: Loads the tutor tool which provides explanations and fix suggestions for compiler warnings and error messages.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/errors/NOTES.md#2025-04-06_snippet_1\n\nLANGUAGE: logtalk\nCODE:\n```\nlogtalk_load(tutor(loader)).\n```\n\n----------------------------------------\n\nTITLE: Equivalent Implementation of instantiation_error/0 in Logtalk\nDESCRIPTION: This code snippet shows the equivalent implementation of the instantiation_error/0 method using context/1 and throw/1 predicates. It retrieves the current context and throws an error with the instantiation_error type.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/refman/methods/instantiation_error_0.rst#2025-04-06_snippet_1\n\nLANGUAGE: Logtalk\nCODE:\n```\n...,\ncontext(Context),\nthrow(error(instantiation_error, Context)).\n```\n\n----------------------------------------\n\nTITLE: Defining a Logtalk Object Importing Categories\nDESCRIPTION: Illustrates the syntax for defining a Logtalk object that imports one or more categories using the imports directive.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/userman/objects.rst.txt#2025-04-06_snippet_2\n\nLANGUAGE: logtalk\nCODE:\n```\n:- object(Object,\n    imports([Category1, Category2, ...])).\n    ...\n:- end_object.\n```\n\n----------------------------------------\n\nTITLE: Defining after/3 Method Signature in Logtalk\nDESCRIPTION: Specifies the signature of the after/3 method, which takes an Object, Message, and Sender as arguments. This method is called automatically by the Logtalk runtime for messages sent using the send_to_object/2 control construct in objects with the events flag set to allow.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/refman/methods/after_3.rst.txt#2025-04-06_snippet_0\n\nLANGUAGE: Logtalk\nCODE:\n```\nafter(Object, Message, Sender)\n```\n\n----------------------------------------\n\nTITLE: Reloading Modified Logtalk Source Files\nDESCRIPTION: New built-in predicate logtalk_make/1 added for reloading all modified source files or cleaning up intermediate files generated during compilation.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/RELEASE_NOTES.md#2025-04-06_snippet_111\n\nLANGUAGE: Logtalk\nCODE:\n```\nlogtalk_make(all)\nlogtalk_make(clean)\n```\n\n----------------------------------------\n\nTITLE: Templates and Modes for meta_non_terminal/1 Directive in Logtalk\nDESCRIPTION: Defines the acceptable argument modes for the meta_non_terminal/1 directive, showing unqualified, object/category-qualified, and module-qualified template forms.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/refman/directives/meta_non_terminal_1.rst#2025-04-06_snippet_1\n\nLANGUAGE: logtalk\nCODE:\n```\nmeta_non_terminal(+meta_non_terminal_template_term)\n\nmeta_non_terminal(+object_identifier::+meta_non_terminal_template_term)\nmeta_non_terminal(+category_identifier::+meta_non_terminal_template_term)\n\nmeta_non_terminal(+module_identifier:+meta_non_terminal_template_term)\n```\n\n----------------------------------------\n\nTITLE: Method Signature for current_op/3 in Logtalk\nDESCRIPTION: Signature for the current_op/3 method that enumerates operators declared for an object through backtracking. It provides the structure for how to call this built-in method.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/refman/methods/current_op_3.rst#2025-04-06_snippet_0\n\nLANGUAGE: logtalk\nCODE:\n```\ncurrent_op(Priority, Specifier, Operator)\n```\n\n----------------------------------------\n\nTITLE: Parsing CBOR Encoding into Logtalk Terms\nDESCRIPTION: Demonstrates how to decode CBOR binary representation into corresponding Logtalk/Prolog terms using the parse/2 predicate. The example decodes a CBOR array containing a text string and a map.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/library/cbor/NOTES.md#2025-04-06_snippet_2\n\nLANGUAGE: logtalk\nCODE:\n```\n| ?- cbor::parse([0x9f,0x61,0x61,0xbf,0x61,0x62,0x61,0x63,0xff,0xff], Term).\nTerm = [a,{b-c}]\nyes\n```\n\n----------------------------------------\n\nTITLE: Predicate Mode Declaration\nDESCRIPTION: Specifies the mode and number of proofs for the abolish_object/1 predicate, indicating it takes an object identifier as input and provides one solution.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/refman/predicates/abolish_object_1.rst.txt#2025-04-06_snippet_1\n\nLANGUAGE: logtalk\nCODE:\n```\nabolish_object(+object_identifier) - one\n```\n\n----------------------------------------\n\nTITLE: Testing the Coroutining Library in Logtalk\nDESCRIPTION: Command to load and run tests for the coroutining library predicates using the tester.lgt file.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/libraries/coroutining.rst#2025-04-06_snippet_1\n\nLANGUAGE: prolog\nCODE:\n```\n| ?- logtalk_load(coroutining(tester)).\n```\n\n----------------------------------------\n\nTITLE: Dictionary Size Predicate in Logtalk\nDESCRIPTION: Returns the number of entries in a dictionary. Uses static compilation flag and accepts dictionary input with integer output.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/dictionaryp_0.rst.txt#2025-04-06_snippet_27\n\nLANGUAGE: logtalk\nCODE:\n```\nsize(@dictionary,?integer) - one\n```\n\n----------------------------------------\n\nTITLE: Installing Required Dependencies with Homebrew on macOS\nDESCRIPTION: Terminal command for installing the necessary dependencies using Homebrew package manager on macOS systems.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/devtools/packs.rst.txt#2025-04-06_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n$ brew install coreutils wget libarchive gnupg2 git direnv\n```\n\n----------------------------------------\n\nTITLE: Method Signature for current_op/3 in Logtalk\nDESCRIPTION: Signature for the current_op/3 method that enumerates operators declared for an object through backtracking. It provides the structure for how to call this built-in method.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/refman/methods/current_op_3.rst#2025-04-06_snippet_0\n\nLANGUAGE: logtalk\nCODE:\n```\ncurrent_op(Priority, Specifier, Operator)\n```\n\n----------------------------------------\n\nTITLE: Example Usage of abolish_events/5\nDESCRIPTION: Demonstrates how to use abolish_events/5 to remove all events for messages sent to a specific object.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/refman/predicates/abolish_events_5.rst.txt#2025-04-06_snippet_2\n\nLANGUAGE: prolog\nCODE:\n```\n% abolish all events for messages sent to the \"list\"\n% object being monitored by the \"debugger\" object:\n| ?- abolish_events(_, list, _, _, debugger).\n```\n\n----------------------------------------\n\nTITLE: Loading the Dif Library in Logtalk\nDESCRIPTION: Demonstrates how to load the dif library using the loader.lgt file. This makes all entities in the library available for use in the Logtalk environment.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/library/dif/NOTES.md#2025-04-06_snippet_0\n\nLANGUAGE: Logtalk\nCODE:\n```\n| ?- logtalk_load(dif(loader)).\n```\n\n----------------------------------------\n\nTITLE: Checking Split Queue After Retrieval\nDESCRIPTION: Demonstrates that the split queue is also emptied after retrieving messages.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/engines/pmq/NOTES.md#2025-04-06_snippet_9\n\nLANGUAGE: logtalk\nCODE:\n```\nsplit::messages(List).\n```\n\n----------------------------------------\n\nTITLE: Domain Error Handling for Negative Kelvin in Logtalk\nDESCRIPTION: Shows error handling when attempting to use an invalid negative Kelvin temperature value.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/my_types/NOTES.md#2025-04-06_snippet_7\n\nLANGUAGE: logtalk\nCODE:\n```\ncatch(type::check(temperature(kelvin), -12.1, my_error_context), Error, true).\n```\n\n----------------------------------------\n\nTITLE: Parent Query Predicate\nDESCRIPTION: Returns all object parents through backtracking. Supports static compilation and takes a Parent parameter of type object.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/proto_hierarchyp_0.rst.txt#2025-04-06_snippet_0\n\nLANGUAGE: logtalk\nCODE:\n```\nparent(?object)\n```\n\n----------------------------------------\n\nTITLE: Searching the Handbook for Predicate Documentation\nDESCRIPTION: Command to find documentation for a specific predicate (logtalk_load/2) in the Handbook.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/tools/help/SCRIPT.txt#2025-04-06_snippet_9\n\nLANGUAGE: logtalk\nCODE:\n```\n| ?- help::handbook(logtalk_load/2).\n```\n\n----------------------------------------\n\nTITLE: Adding a Term as First Entry with Reference in Logtalk\nDESCRIPTION: The recorda/3 predicate adds a term as the first term for the given key and returns its reference. It accepts a key, a term to store, and unifies the third argument with a reference to the stored term.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/recorded_database_core_0.rst.txt#2025-04-06_snippet_0\n\nLANGUAGE: logtalk\nCODE:\n```\nrecorda(Key,Term,Reference)\n```\n\n----------------------------------------\n\nTITLE: Configuring PATH for Logtalk and Prolog Backends in Git for Windows\nDESCRIPTION: This Bash script sets up the PATH environment variable to include various Prolog backends and Logtalk scripts for use in Git for Windows.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/tools/lgtunit/NOTES.md#2025-04-06_snippet_4\n\nLANGUAGE: Bash\nCODE:\n```\n$ cat ~/.profile\n# YAP\nexport PATH=\"/C/Program Files/Yap64/bin\":$PATH\n# GNU Prolog\nexport PATH=\"/C/GNU-Prolog/bin\":$PATH\n# SWI/Prolog\nexport PATH=\"/C/Program Files/swipl/bin\":$PATH\n# ECLiPSe\nexport PATH=\"/C/Program Files/ECLiPSe 7.0/lib/x86_64_nt\":$PATH\n# SICStus Prolog\nexport PATH=\"/C/Program Files/SICStus Prolog VC16 4.6.0/bin\":$PATH\n# Logtalk\nexport PATH=\"$LOGTALKHOME/scripts\":\"$LOGTALKHOME/integration\":$PATH\n```\n\n----------------------------------------\n\nTITLE: Creating Loader File for Logtalk Registry\nDESCRIPTION: This snippet shows the contents of a loader.lgt file used to load the registry object and all pack object files in a Logtalk registry. It uses the initialization/1 directive to load the necessary files when the loader is executed.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/devtools/packs.rst.txt#2025-04-06_snippet_16\n\nLANGUAGE: logtalk\nCODE:\n```\n:- initialization((\n    logtalk_load(jdoe_awesome_packs_registry),\n    logtalk_load(foo_pack),\n    logtalk_load(bar_pack),\n    ...\n)).\n```\n\n----------------------------------------\n\nTITLE: Loading the Classmethods Example\nDESCRIPTION: This code loads the classmethods example into the Logtalk environment.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/classmethods/NOTES.md#2025-04-06_snippet_1\n\nLANGUAGE: logtalk\nCODE:\n```\nlogtalk_load(classmethods(loader)).\n```\n\n----------------------------------------\n\nTITLE: Running Dead Code Scanner Tool Unit Tests in Logtalk\nDESCRIPTION: Loads and runs the unit tests for the dead_code_scanner tool to verify that it's working correctly.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/tools/dead_code_scanner/SCRIPT.txt#2025-04-06_snippet_2\n\nLANGUAGE: prolog\nCODE:\n```\n| ?- logtalk_load(dead_code_scanner(tester)).\n```\n\n----------------------------------------\n\nTITLE: Loading EDCG Library in Logtalk\nDESCRIPTION: Shows how to load a Logtalk source file that contains EDCGs using the required hook option.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/libraries/edcg.rst.txt#2025-04-06_snippet_0\n\nLANGUAGE: prolog\nCODE:\n```\n| ?- logtalk_load(source, [hook(edcg)]).\n```\n\n----------------------------------------\n\nTITLE: Accessing General Logtalk Help\nDESCRIPTION: Command to get general online help for Logtalk by calling the help/0 predicate on the help object.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/tools/help/SCRIPT.txt#2025-04-06_snippet_1\n\nLANGUAGE: logtalk\nCODE:\n```\n| ?- help::help.\n```\n\n----------------------------------------\n\nTITLE: Generating ULID with Unix Timestamp\nDESCRIPTION: Example of generating a ULID using a specific Unix timestamp in milliseconds.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/libraries/ulid.rst.txt#2025-04-06_snippet_5\n\nLANGUAGE: logtalk\nCODE:\n```\n| ?- time_stamp(Milliseconds), ulid(atom)::generate(Seconds, ULID).\nSeconds = 1684245175344, ULID = '01H0JDBQ1GAWJF35C44Y5S97DX'\nyes\n```\n\n----------------------------------------\n\nTITLE: Defining Hit Count Breakpoints in Logtalk\nDESCRIPTION: Example of setting a hit count breakpoint that triggers when the unification count is less than or equal to 2 for the planet object at line 41.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/userman/debugging.rst.txt#2025-04-06_snippet_11\n\nLANGUAGE: text\nCODE:\n```\n| ?- debugger::spy(planet, 41, =<(2)).\n\nConditional breakpoint added.\nyes\n```\n\n----------------------------------------\n\nTITLE: Looking Up Multiple Key-Value Pairs in Dictionary in Logtalk\nDESCRIPTION: Looks up multiple key-value pairs in a dictionary. Fails if any key is not found or a value doesn't unify.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/dictionaryp_0.rst.txt#2025-04-06_snippet_12\n\nLANGUAGE: Logtalk\nCODE:\n```\nlookup(Pairs,Dictionary)\n```\n\n----------------------------------------\n\nTITLE: Example Usage of instantiation_error/0 in Logtalk\nDESCRIPTION: This example demonstrates how to use the instantiation_error/0 method in a Logtalk program. It checks if a variable 'Handler' is uninstantiated and throws an instantiation error if it is.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/refman/methods/instantiation_error_0.rst.txt#2025-04-06_snippet_2\n\nLANGUAGE: Logtalk\nCODE:\n```\n...,\nvar(Handler),\ninstantiation_error.\n```\n\n----------------------------------------\n\nTITLE: Testing TSV Library in Logtalk\nDESCRIPTION: Shows how to load the tester file to test the TSV library predicates.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/libraries/tsv.rst.txt#2025-04-06_snippet_1\n\nLANGUAGE: Logtalk\nCODE:\n```\n| ?- logtalk_load(tsv(tester)).\n```\n\n----------------------------------------\n\nTITLE: Loading the defaulty example and ports_profiler tool\nDESCRIPTION: This snippet loads the defaulty example and the ports_profiler tool using the logtalk_load/1 predicate.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/defaulty/NOTES.md#2025-04-06_snippet_1\n\nLANGUAGE: logtalk\nCODE:\n```\nlogtalk_load(defaulty(loader)).\n```\n\n----------------------------------------\n\nTITLE: Parsing Bit Sequence in Logtalk\nDESCRIPTION: Parses a sequence of one or more bits. Accepts a list of integers as input or output. Returns zero or one proof.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/number_grammars_1.rst.txt#2025-04-06_snippet_1\n\nLANGUAGE: Logtalk\nCODE:\n```\nbits(Bits)\n```\n\n----------------------------------------\n\nTITLE: Defining Private Dynamic Predicate for External Predicate References in Logtalk\nDESCRIPTION: Defines a private dynamic predicate 'external_predicate_/1' that maintains a table of external predicate references for all the entities under processing.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/xref_diagram_1.rst.txt#2025-04-06_snippet_4\n\nLANGUAGE: Logtalk\nCODE:\n```\nexternal_predicate_(Reference)\n```\n\n----------------------------------------\n\nTITLE: Debugging object::sum/2 predicate with instantiation error\nDESCRIPTION: This snippet shows debugging the sum/2 predicate with an uninstantiated variable, resulting in an instantiation error.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/debug_hooks/NOTES.md#2025-04-06_snippet_3\n\nLANGUAGE: logtalk\nCODE:\n```\nobject::sum([1,2,3,_], Sum).\n```\n\n----------------------------------------\n\nTITLE: Shorthand Predicate Alias Example\nDESCRIPTION: Demonstrates how to create shorthand aliases for predicates with partially instantiated arguments.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/refman/directives/uses_2.rst.txt#2025-04-06_snippet_4\n\nLANGUAGE: logtalk\nCODE:\n```\n:- uses(logtalk, [\n    print_message(debug, my_app, Message) as dbg(Message)\n]).\n```\n\n----------------------------------------\n\nTITLE: Sending Commands to Redis Server in Logtalk\nDESCRIPTION: Sends a request to a Redis server and returns its reply. The request should be formatted as a compound term with the Redis command name as the functor and the command arguments as the term arguments.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/redis_0.rst.txt#2025-04-06_snippet_3\n\nLANGUAGE: logtalk\nCODE:\n```\nsend(Connection,Request,Reply)\n```\n\n----------------------------------------\n\nTITLE: Running Producer-Consumer Threads\nDESCRIPTION: Starts producer and consumer threads with a buffer size of 7 items. The producer runs with a 1.2 second delay and the consumer with a 3.7 second delay. Both threads will process 25 items.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/threads/buffer/NOTES.md#2025-04-06_snippet_1\n\nLANGUAGE: logtalk\nCODE:\n```\nthreaded_ignore(producer(7,1.2)::run(25)), threaded_ignore(consumer(7,3.7)::run(25)).\n```\n\n----------------------------------------\n\nTITLE: Configuring source-highlight Language Map for Logtalk\nDESCRIPTION: Entries to add to the lang.map file to enable Logtalk syntax highlighting support in source-highlight.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/coding/source-highlight/NOTES.md#2025-04-06_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nlgt = logtalk.lang\nlogtalk = logtalk.lang\n```\n\n----------------------------------------\n\nTITLE: Abolishing predicate in class object\nDESCRIPTION: Demonstrates how to abolish (remove) a predicate p2/1 from the class object.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/dynpred/NOTES.md#2025-04-06_snippet_10\n\nLANGUAGE: logtalk\nCODE:\n```\nclass::abolish(p2/1).\n```\n\n----------------------------------------\n\nTITLE: Loading Flags Library in Logtalk\nDESCRIPTION: This snippet demonstrates how to load all entities in the 'flags' library using the loader.lgt file.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/contributions/flags.rst.txt#2025-04-06_snippet_0\n\nLANGUAGE: Logtalk\nCODE:\n```\n?- logtalk_load(flags(loader)).\n```\n\n----------------------------------------\n\nTITLE: Specifying Modes for logtalk_compile/1 in Logtalk\nDESCRIPTION: Defines the modes and number of proofs for the logtalk_compile/1 predicate. It specifies that the predicate accepts a source file name or a list of source file names as input, and may succeed once or fail.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/refman/predicates/logtalk_compile_1.rst.txt#2025-04-06_snippet_1\n\nLANGUAGE: Logtalk\nCODE:\n```\nlogtalk_compile(@source_file_name) - zero_or_one\nlogtalk_compile(@list(source_file_name)) - zero_or_one\n```\n\n----------------------------------------\n\nTITLE: Declaring Cut Method in Logtalk\nDESCRIPTION: The cut operator (!) is a built-in method that always succeeds and discards choice-points. It follows ISO Prolog standard definition and can be used as a message to an object.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/refman/methods/cut_0.rst#2025-04-06_snippet_0\n\nLANGUAGE: logtalk\nCODE:\n```\n!\n```\n\n----------------------------------------\n\nTITLE: Querying Category Extension Relationships in Logtalk\nDESCRIPTION: Demonstrates the use of extends_category/2 and extends_category/3 built-in predicates to find which categories extend other categories, optionally including the extension scope.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/userman/categories.rst.txt#2025-04-06_snippet_14\n\nLANGUAGE: prolog\nCODE:\n```\n| ?- extends_category(Category1, Category2).\n```\n\nLANGUAGE: prolog\nCODE:\n```\n| ?- extends_category(Category1, Category2, Scope).\n```\n\n----------------------------------------\n\nTITLE: Mode Declaration for current_category/1 in Logtalk\nDESCRIPTION: Specifies the mode declaration for current_category/1, indicating it accepts a variable or ground category identifier and can succeed multiple times through backtracking.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/refman/predicates/current_category_1.rst#2025-04-06_snippet_1\n\nLANGUAGE: prolog\nCODE:\n```\ncurrent_category(?category_identifier) - zero_or_more\n```\n\n----------------------------------------\n\nTITLE: Defining the self/1 Method Syntax in Logtalk\nDESCRIPTION: Shows the syntax of the self/1 built-in method which unifies its argument with the object that received the message under processing.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/refman/methods/self_1.rst#2025-04-06_snippet_0\n\nLANGUAGE: prolog\nCODE:\n```\nself(Self)\n```\n\n----------------------------------------\n\nTITLE: Querying Number of User-Defined Clauses in Logtalk\nDESCRIPTION: New entity property to get the number of user-defined clauses for an entity.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/RELEASE_NOTES.md#2025-04-06_snippet_105\n\nLANGUAGE: Logtalk\nCODE:\n```\nnumber_of_user_clauses/1\n```\n\n----------------------------------------\n\nTITLE: Retrieving Frozen Goal in Logtalk\nDESCRIPTION: The frozen/2 predicate unifies Goal with the goal delayed by Variable. If no goals are frozen on Variable, Goal is unified with true.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/coroutining_0.rst.txt#2025-04-06_snippet_3\n\nLANGUAGE: Logtalk\nCODE:\n```\nfrozen(Variable,Goal)\n```\n\n----------------------------------------\n\nTITLE: Defining object_property/2 Predicate Signature\nDESCRIPTION: Defines the signature of the object_property/2 predicate that enumerates object properties.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/refman/predicates/object_property_2.rst.txt#2025-04-06_snippet_0\n\nLANGUAGE: prolog\nCODE:\n```\nobject_property(Object, Property)\n```\n\n----------------------------------------\n\nTITLE: Testing the term_io Library in Logtalk\nDESCRIPTION: Command to load the tester.lgt file which contains tests for the term_io library predicates. This enables verification that the library is working correctly.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/libraries/term_io.rst.txt#2025-04-06_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n| ?- logtalk_load(term_io(tester)).\n```\n\n----------------------------------------\n\nTITLE: Defining Table of Contents for Logic and Control Methods in reStructuredText\nDESCRIPTION: This snippet defines a table of contents for logic and control methods documentation using reStructuredText syntax. It includes references to cut, true, fail, false, and repeat predicates.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/refman/methods/logic_and_control_methods.rst#2025-04-06_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. toctree::\n   :maxdepth: 1\n\n   cut_0\n   true_0\n   fail_0\n   false_0\n   repeat_0\n```\n\n----------------------------------------\n\nTITLE: Predicate Template - rlibrary/1\nDESCRIPTION: Creates all supported diagrams for a library and its sub-libraries using default options.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/diagrams_1.rst.txt#2025-04-06_snippet_6\n\nLANGUAGE: logtalk\nCODE:\n```\nrlibrary(Library)\n```\n\n----------------------------------------\n\nTITLE: EDCG Length Counter Example in Logtalk\nDESCRIPTION: Demonstrates a complete EDCG example that counts the length of a list using the 'adder' accumulator and the 'dcg' built-in accumulator, showcasing accumulator declarations, predicate declarations, and grammar rule definitions.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/library/edcg/NOTES.md#2025-04-06_snippet_3\n\nLANGUAGE: logtalk\nCODE:\n```\n% declare accumulators\nacc_info(adder, X, In, Out, integer::plus(X,In,Out)).\n\n% declare predicates using these hidden arguments\npred_info(len,0,[adder,dcg]).\npred_info(increment,0,[adder]).\n\nincrement -->>\n    % add one to the accumulator\n    [1]:adder.\n\n\nlen(Xs,N) :-\n    len(0,N,Xs,[]).\n\nlen -->>\n    % 'dcg' accumulator has an element\n    [_],\n    !,\n\t% increment the 'adder' accumulator\n    increment,\n    len.\nlen -->>\n    [].\n```\n\n----------------------------------------\n\nTITLE: Logtalk Directory Reference Predicate - remember_referenced_logtalk_directory/1\nDESCRIPTION: Predicate to remember a referenced Logtalk directory in the diagram. Takes a Path atom as input and stores it for later use.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/directory_diagram_1.rst.txt#2025-04-06_snippet_1\n\nLANGUAGE: logtalk\nCODE:\n```\nremember_referenced_logtalk_directory(+atom)\n```\n\n----------------------------------------\n\nTITLE: Loading the Random Library in Logtalk\nDESCRIPTION: Command to load all entities in the random library using the loader.lgt file.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/libraries/random.rst.txt#2025-04-06_snippet_0\n\nLANGUAGE: prolog\nCODE:\n```\n| ?- logtalk_load(random(loader)).\n```\n\n----------------------------------------\n\nTITLE: Printing Logtalk, Prolog backend, and kernel versions\nDESCRIPTION: This snippet prints the versions of Logtalk, the Prolog backend, and the kernel if running as a notebook.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/slides/NOTES.md#2025-04-06_snippet_0\n\nLANGUAGE: logtalk\nCODE:\n```\n%versions\n```\n\n----------------------------------------\n\nTITLE: Implementation Equivalent of consistency_error/3 in Logtalk\nDESCRIPTION: Shows the equivalent implementation of calling the consistency_error/3 method, which gets the current context and throws an error with the consistency error term and context.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/refman/methods/consistency_error_3.rst.txt#2025-04-06_snippet_1\n\nLANGUAGE: prolog\nCODE:\n```\n...,\ncontext(Context),\nthrow(error(consistency_error(Consistency,Argument1,Argument2), Context)).\n```\n\n----------------------------------------\n\nTITLE: Defining Context Switching Documentation Structure\nDESCRIPTION: ReStructuredText markup defining the documentation structure for context switching calls, including table of contents and section headers.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/refman/control/context_switching_calls.rst.txt#2025-04-06_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. _context_switching_calls:\n\nContext switching calls\n=======================\n\n.. toctree::\n   :maxdepth: 1\n\n   context_switch_2\n```\n\n----------------------------------------\n\nTITLE: Configuring URL Prefixes for Windsurf in Logtalk Diagrams\nDESCRIPTION: Sets the URL code prefix for generating local links to open files and directories in Windsurf when creating Logtalk diagrams.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/tools/diagrams/NOTES.md#2025-04-06_snippet_9\n\nLANGUAGE: prolog\nCODE:\n```\nurl_prefixes('windsurf://file/', DocPrefix)\n```\n\n----------------------------------------\n\nTITLE: Explaining Game Rules in Logtalk\nDESCRIPTION: This snippet calls the 'explain' predicate of the 'game' object to display the rules of the Rock Paper Scissors Lizard Spock game.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/engines/tbbt/NOTES.md#2025-04-06_snippet_2\n\nLANGUAGE: logtalk\nCODE:\n```\ngame::explain.\n```\n\n----------------------------------------\n\nTITLE: Integrating Circle Function Using QuadSplit2D with 4 Threads\nDESCRIPTION: Performs integration of the circle function over a square domain using quadsplit2d with 4 threads and measures execution time.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/threads/integration2d/NOTES.md#2025-04-06_snippet_3\n\nLANGUAGE: logtalk\nCODE:\n```\ntime(quadsplit2d(4)::integrate(circle, -2, 2, -2, 2, 2, 2.5e-10, Integral)).\n```\n\n----------------------------------------\n\nTITLE: Defining from_goal/3 Predicate in Logtalk\nDESCRIPTION: Constructs an optional term holding a value bound by calling the given goal. Returns an empty optional term if the goal fails or throws an error. Defined as a meta-predicate that calls the provided goal.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/optional_0.rst.txt#2025-04-06_snippet_2\n\nLANGUAGE: Logtalk\nCODE:\n```\nfrom_goal(Goal,Value,Optional)\n```\n\n----------------------------------------\n\nTITLE: Using logtalk_tester with Custom Issue Labels\nDESCRIPTION: This shell command shows how to use the logtalk_tester script with custom issue labels (bug and auto) for GitHub. It demonstrates overriding the default label using the -b option.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/tools/issue_creator/NOTES.md#2025-04-06_snippet_4\n\nLANGUAGE: Shell\nCODE:\n```\n$ logtalk_tester \\\n\t-p gnu \\\n\t-b github:bug,auto \\\n\t-s \"/home/jdoe/foo/\" \\\n\t-u https://github.com/jdoe/foo/tree/55aa900775befa135e0d5b48ea63098df8b97f5c/\n```\n\n----------------------------------------\n\nTITLE: Declaring Dynamic Predicates in Logtalk\nDESCRIPTION: Example of dynamic directive that declares a predicate can be modified at runtime (asserted/retracted). Dynamic predicates can represent persistent mutable object state.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/userman/predicates.rst#2025-04-06_snippet_10\n\nLANGUAGE: logtalk\nCODE:\n```\n:- dynamic(foo/1).\n```\n\n----------------------------------------\n\nTITLE: Accessing Variable Names During Term Expansion in Logtalk\nDESCRIPTION: An example demonstrating how to access the variable names of a term being expanded during term expansion using the variable_names/1 key.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/refman/predicates/logtalk_load_context_2.rst.txt#2025-04-06_snippet_2\n\nLANGUAGE: logtalk\nCODE:\n```\n% expand source file term while accessing its variable names\nterm_expansion(Term, ExpandedTerms) :-\n    logtalk_load_context(variable_names(Term), VariableNames),\n    ....\n```\n\n----------------------------------------\n\nTITLE: Calculate Mars Weight\nDESCRIPTION: Calculates the weight of object m1 on Mars for comparison\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/planets/NOTES.md#2025-04-06_snippet_3\n\nLANGUAGE: logtalk\nCODE:\n```\nmars::weight(m1, W1).\n```\n\n----------------------------------------\n\nTITLE: Printing a Banner Message in Logtalk\nDESCRIPTION: Demonstrates using the print_message/3 predicate to print a banner message in Logtalk. The predicate takes the message kind, component, and message term as arguments.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/userman/printing.rst.txt#2025-04-06_snippet_0\n\nLANGUAGE: Prolog\nCODE:\n```\n| ?- logtalk::print_message(banner, core, banner).\n```\n\n----------------------------------------\n\nTITLE: Example Usage of current_category/1 in Logtalk\nDESCRIPTION: Demonstrates how to use the current_category/1 predicate to enumerate defined categories in a Logtalk query.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/refman/predicates/current_category_1.rst.txt#2025-04-06_snippet_2\n\nLANGUAGE: Prolog\nCODE:\n```\n% enumerate the defined categories:\n| ?- current_category(Category).\n\nCategory = core_messages ;\n...\n```\n\n----------------------------------------\n\nTITLE: Creating Binary File\nDESCRIPTION: Creates a binary file with specified byte contents at given path relative to tests object.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/lgtunit_0.rst.txt#2025-04-06_snippet_63\n\nLANGUAGE: logtalk\nCODE:\n```\ncreate_binary_file(File,Bytes)\n```\n\n----------------------------------------\n\nTITLE: Loading EDCG Library in Logtalk\nDESCRIPTION: Demonstrates how to load the EDCG library in Logtalk using the compiler option 'hook(edcg)' or by setting a Logtalk flag.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/libraries/edcg.rst#2025-04-06_snippet_0\n\nLANGUAGE: logtalk\nCODE:\n```\n| ?- logtalk_load(source, [hook(edcg)]).\n```\n\nLANGUAGE: logtalk\nCODE:\n```\n:- set_logtalk_flag(hook, edcg).\n```\n\n----------------------------------------\n\nTITLE: Testing Basic Types Library in Logtalk\nDESCRIPTION: Command to test the library predicates by loading the tester.lgt file from the types library.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/library/basic_types/NOTES.md#2025-04-06_snippet_1\n\nLANGUAGE: logtalk\nCODE:\n```\n| ?- logtalk_load(types(tester)).\n```\n\n----------------------------------------\n\nTITLE: Using expand_library_alias_paths as a Hook Option in Logtalk\nDESCRIPTION: Demonstrates how to use the expand_library_alias_paths hook object with the hook/1 option when compiling a source file.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/libraries/expand_library_alias_paths.rst#2025-04-06_snippet_1\n\nLANGUAGE: prolog\nCODE:\n```\n| ?- logtalk_load(my_source_file, [hook(expand_library_alias_paths)]).\n```\n\n----------------------------------------\n\nTITLE: Defining Registry Notes in Logtalk\nDESCRIPTION: Specifies the registry notes predicate. It should return a table of notes per action (add, update, delete) as atoms.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/registry_protocol_0.rst.txt#2025-04-06_snippet_5\n\nLANGUAGE: Logtalk\nCODE:\n```\nnote(Action,Note)\n```\n\n----------------------------------------\n\nTITLE: Loading Sets Library in Logtalk\nDESCRIPTION: Demonstrates how to load all entities in the sets library using the loader file.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/library/sets/NOTES.md#2025-04-06_snippet_0\n\nLANGUAGE: Logtalk\nCODE:\n```\n| ?- logtalk_load(sets(loader)).\n```\n\n----------------------------------------\n\nTITLE: Debugging object::sum/2 predicate with invalid list\nDESCRIPTION: This snippet shows debugging the sum/2 predicate with an invalid list argument, resulting in a type error.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/debug_hooks/NOTES.md#2025-04-06_snippet_5\n\nLANGUAGE: logtalk\nCODE:\n```\nobject::sum(wrong, Sum).\n```\n\n----------------------------------------\n\nTITLE: Stream Position Getter in Logtalk Unit Testing\nDESCRIPTION: Returns a syntactically valid stream position by opening a temporary file in the same directory as the tests object.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/lgtunit_0.rst.txt#2025-04-06_snippet_70\n\nLANGUAGE: Logtalk\nCODE:\n```\nstream_position(Position)\n```\n\n----------------------------------------\n\nTITLE: Reading a TSV File into a List of Rows in Logtalk\nDESCRIPTION: Example showing how to read a TSV file into a list of rows, where each row is represented as a list of fields.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/library/tsv/NOTES.md#2025-04-06_snippet_2\n\nLANGUAGE: Logtalk\nCODE:\n```\n| ?- tsv::read_file('test_files/data.tsv', Rows).\n\nRows = [['Name','Age','Address'], ['Paul',23,'1115 W Franklin'], ['Bessy the Cow',5,'Big Farm Way'], ['Zeke,45,'W Main St']]\nyes\n```\n\n----------------------------------------\n\nTITLE: Loading Hook Flows Library in Logtalk\nDESCRIPTION: Command to load all entities in the hook_flows library using the loader.lgt file.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/libraries/hook_flows.rst.txt#2025-04-06_snippet_0\n\nLANGUAGE: Logtalk\nCODE:\n```\n| ?- logtalk_load(hook_flows(loader)).\n```\n\n----------------------------------------\n\nTITLE: Defining bagof/3 Method Signature in Logtalk\nDESCRIPTION: Specifies the signature of the bagof/3 method, which collects a bag of solutions for a given goal and template.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/refman/methods/bagof_3.rst#2025-04-06_snippet_0\n\nLANGUAGE: Logtalk\nCODE:\n```\nbagof(Template, Goal, List)\n```\n\n----------------------------------------\n\nTITLE: Alternative Mode Specification for atom_concat/3\nDESCRIPTION: An alternative mode directive for atom_concat/3 showing a different way to specify the same concatenation behavior using zero_or_one instead of one as the success pattern.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/userman/predicates.rst#2025-04-06_snippet_7\n\nLANGUAGE: logtalk\nCODE:\n```\n:- mode(atom_concat(+atom, +atom, ?atom), zero_or_one).\n```\n\n----------------------------------------\n\nTITLE: Sending a Message in Logtalk\nDESCRIPTION: Example of sending a message to an object in Logtalk, which generates before and after events for profiling.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/tutorial/profiling.rst#2025-04-06_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n| ?- foo::bar(X).\n\nX = 1\nyes\n```\n\n----------------------------------------\n\nTITLE: Loading TSV Module in Logtalk\nDESCRIPTION: Command to load the TSV module in Logtalk. This is required to use the TSV file handling predicates.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/tsv_0.rst.txt#2025-04-06_snippet_0\n\nLANGUAGE: Logtalk\nCODE:\n```\nlogtalk_load(tsv(loader))\n```\n\n----------------------------------------\n\nTITLE: Configuring URL Prefixes for PearAI in Logtalk Diagrams\nDESCRIPTION: Sets the URL code prefix for generating local links to open files and directories in PearAI when creating Logtalk diagrams.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/tools/diagrams/NOTES.md#2025-04-06_snippet_8\n\nLANGUAGE: prolog\nCODE:\n```\nurl_prefixes('pearai://file/', DocPrefix)\n```\n\n----------------------------------------\n\nTITLE: Defining Predicate Properties Grammar in BNF\nDESCRIPTION: BNF grammar specification for Logtalk predicate properties including scope, visibility, and meta-predicate definitions.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/refman/grammar.rst.txt#2025-04-06_snippet_32\n\nLANGUAGE: bnf\nCODE:\n```\npredicate_property ::=\n      \"static\"\n      | \"dynamic\"\n      | \"scope(\" scope \")\"\n      | \"private\"\n      | \"protected\"\n      | \"public\"\n      | \"logtalk\"\n      | \"prolog\"\n      | \"foreign\"\n```\n\n----------------------------------------\n\nTITLE: Creating Dynamic Object\nDESCRIPTION: This snippet creates a dynamic circle object with a specified radius, demonstrating object creation in Logtalk.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/design_patterns/structural/decorator/NOTES.md#2025-04-06_snippet_4\n\nLANGUAGE: logtalk\nCODE:\n```\ncreate_object(Circle, [extends(circle)], [], [radius(7.0)]).\n```\n\n----------------------------------------\n\nTITLE: Defining the fail/0 method syntax in Logtalk\nDESCRIPTION: Represents the syntax of the fail/0 built-in method that always fails. It is declared as a public method and can be used as a message to an object.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/refman/methods/fail_0.rst.txt#2025-04-06_snippet_0\n\nLANGUAGE: logtalk\nCODE:\n```\nfail\n```\n\n----------------------------------------\n\nTITLE: Loading Logtalk XWam File in XSB\nDESCRIPTION: Example of how to load the generated logtalk.xwam file using XSB's loader:load/1 predicate.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/scripts/embedding/xsb/NOTES.md#2025-04-06_snippet_0\n\nLANGUAGE: prolog\nCODE:\n```\n| ?- loader:load(logtalk).\n```\n\n----------------------------------------\n\nTITLE: Querying Logtalk flags in Prolog\nDESCRIPTION: Demonstrates querying Logtalk flags using the current_logtalk_flag/2 built-in predicate.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/RELEASE_NOTES.md#2025-04-06_snippet_118\n\nLANGUAGE: Prolog\nCODE:\n```\ncurrent_logtalk_flag(Flag, Value)\n```\n\n----------------------------------------\n\nTITLE: Testing Logtalk Dictionaries Library\nDESCRIPTION: Shows how to load and run tests for the dictionaries library predicates using the tester.lgt file.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/libraries/dictionaries.rst.txt#2025-04-06_snippet_1\n\nLANGUAGE: prolog\nCODE:\n```\n| ?- logtalk_load(dictionaries(tester)).\n```\n\n----------------------------------------\n\nTITLE: Loading Ackermann Function Module\nDESCRIPTION: Loads the Ackermann function implementation module using the loader file.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/ack/NOTES.md#2025-04-06_snippet_1\n\nLANGUAGE: logtalk\nCODE:\n```\nlogtalk_load(ack(loader)).\n```\n\n----------------------------------------\n\nTITLE: Testing Logtalk Dictionaries Library\nDESCRIPTION: Shows how to load and run tests for the dictionaries library predicates using the tester.lgt file.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/libraries/dictionaries.rst.txt#2025-04-06_snippet_1\n\nLANGUAGE: prolog\nCODE:\n```\n| ?- logtalk_load(dictionaries(tester)).\n```\n\n----------------------------------------\n\nTITLE: Defining Core Module Label in RST\nDESCRIPTION: ReStructuredText label definition for the core library documentation section.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/libraries/core.rst.txt#2025-04-06_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. _library_core:\n```\n\n----------------------------------------\n\nTITLE: Method Mode Declaration\nDESCRIPTION: Specifies the argument modes and number of proofs for the method\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/refman/methods/message_prefix_stream_4.rst.txt#2025-04-06_snippet_1\n\nLANGUAGE: prolog\nCODE:\n```\nmessage_prefix_stream(?nonvar, ?nonvar, ?atom, ?stream_or_alias) - zero_or_more\n```\n\n----------------------------------------\n\nTITLE: Usage Examples of \\+/1 in Different Logtalk Contexts\nDESCRIPTION: Examples demonstrating how to use \\+/1 in different contexts: within the current object/category, with self, or with an explicit object.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/refman/methods/not_1.rst#2025-04-06_snippet_4\n\nLANGUAGE: logtalk\nCODE:\n```\n\\+ Goal\n```\n\nLANGUAGE: logtalk\nCODE:\n```\n\\+ ::Goal\n```\n\nLANGUAGE: logtalk\nCODE:\n```\n\\+ Object::Goal\n```\n\n----------------------------------------\n\nTITLE: Category Directives Grammar\nDESCRIPTION: BNF grammar rules specifying the syntax for category directives in Logtalk, including built-in, dynamic, info and other directive types.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/refman/grammar.rst.txt#2025-04-06_snippet_26\n\nLANGUAGE: bnf\nCODE:\n```\ncategory_directive ::=\n   \":- built_in.\"\n   | \":- dynamic.\"\n   | \":- info(\" entity_info_list \").\"\n   | \":- set_logtalk_flag(\" atom \",\" nonvar \").\"\n   | \":- include(\" source_file_name \").\"\n   | \":- uses(\" object_alias_list \").\"\n   | \":- use_module(\" module_alias_list \").\"\n   | conditional_compilation_directive\n   | predicate_directive\n```\n\n----------------------------------------\n\nTITLE: Appending Lists Using DFS Interpreter in Prolog\nDESCRIPTION: Example showing basic list append operation using the depth-first search interpreter.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/contributions/verdi_neruda.rst.txt#2025-04-06_snippet_0\n\nLANGUAGE: prolog\nCODE:\n```\nprove(dfs_interpreter, append([a,b], [c,d], Xs), demodb).\n```\n\n----------------------------------------\n\nTITLE: Testing the Dif Library in Logtalk\nDESCRIPTION: Shows how to load the tester.lgt file to run tests for the dif library predicates, ensuring they function correctly in the current Prolog backend.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/library/dif/NOTES.md#2025-04-06_snippet_1\n\nLANGUAGE: Logtalk\nCODE:\n```\n| ?- logtalk_load(dif(tester)).\n```\n\n----------------------------------------\n\nTITLE: Threaded Peek Usage Examples\nDESCRIPTION: Example usage patterns showing how to check for asynchronous goal results, including checking results for self messages and object messages.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/refman/predicates/threaded_peek_1_2.rst#2025-04-06_snippet_2\n\nLANGUAGE: logtalk\nCODE:\n```\nthreaded_peek(Goal)\nthreaded_peek(::Goal)\nthreaded_peek(Object::Goal)\n```\n\n----------------------------------------\n\nTITLE: Options Category Declaration\nDESCRIPTION: Core declaration of the options category that provides options processing functionality. Available through logtalk_load(options(loader)).\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/options_0.rst.txt#2025-04-06_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n``options``\n```\n\n----------------------------------------\n\nTITLE: Defining a Logtalk Object Wrapper for Plain Prolog Code\nDESCRIPTION: Code snippet showing how to define a Logtalk object that includes plain Prolog code. This enables the application of Logtalk metrics to standard Prolog code by wrapping it in an object container.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/tools/code_metrics/NOTES.md#2025-04-06_snippet_3\n\nLANGUAGE: Logtalk\nCODE:\n```\n:- object(code).\n\t:- include('code.pl').\n:- end_object.\n```\n\n----------------------------------------\n\nTITLE: Defining a Logtalk Object Wrapper for Plain Prolog Code\nDESCRIPTION: Code snippet showing how to define a Logtalk object that includes plain Prolog code. This enables the application of Logtalk metrics to standard Prolog code by wrapping it in an object container.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/tools/code_metrics/NOTES.md#2025-04-06_snippet_3\n\nLANGUAGE: Logtalk\nCODE:\n```\n:- object(code).\n\t:- include('code.pl').\n:- end_object.\n```\n\n----------------------------------------\n\nTITLE: Importing Assertion Predicates with uses/2 Directive in Logtalk\nDESCRIPTION: Directive to import the assertion predicates from the assertions object, allowing a more concise syntax for assertions in the code.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/devtools/assertions.rst.txt#2025-04-06_snippet_4\n\nLANGUAGE: logtalk\nCODE:\n```\n:- uses(assertions, [assertion/1, assertion/2]).\n```\n\n----------------------------------------\n\nTITLE: Using Prolog Module Hook\nDESCRIPTION: Shows how to use expansion rules from a Prolog module through the prolog_module_hook.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/libraries/hook_objects.rst.txt#2025-04-06_snippet_4\n\nLANGUAGE: logtalk\nCODE:\n```\n:- set_logtalk_flag(hook, prolog_module_hook(user)).\n```\n\n----------------------------------------\n\nTITLE: Printing Comment Message in Logtalk\nDESCRIPTION: Example showing how to print a comment message with parameters using print_message/3 predicate.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/userman/printing.rst#2025-04-06_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n| ?- logtalk::print_message(comment, core, redefining_entity(object, foo)).\n```\n\n----------------------------------------\n\nTITLE: Method Mode Declaration\nDESCRIPTION: Specification of parameter modes and expected number of proofs for the message_prefix_stream method.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/refman/methods/message_prefix_stream_4.rst#2025-04-06_snippet_1\n\nLANGUAGE: prolog\nCODE:\n```\nmessage_prefix_stream(?nonvar, ?nonvar, ?atom, ?stream_or_alias) - zero_or_more\n```\n\n----------------------------------------\n\nTITLE: Loading the issue_creator Tool in Logtalk\nDESCRIPTION: Command to load the issue_creator tool in a Logtalk environment using a Prolog query.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/devtools/issue_creator.rst.txt#2025-04-06_snippet_0\n\nLANGUAGE: prolog\nCODE:\n```\n?- logtalk_load(issue_creator(loader)).\n```\n\n----------------------------------------\n\nTITLE: Usage Examples\nDESCRIPTION: Example queries demonstrating how to use the extends_category predicate.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/refman/predicates/extends_category_2_3.rst#2025-04-06_snippet_2\n\nLANGUAGE: prolog\nCODE:\n```\n% enumerate the categories extended by the derailleur category:\n| ?- extends_category(derailleur, Category).\n\n% enumerate categories that privately extend the basics category:\n| ?- extends_category(Category, basics, private).\n```\n\n----------------------------------------\n\nTITLE: Generating ULID from Unix Timestamp\nDESCRIPTION: Example of generating a ULID using a Unix epoch timestamp in milliseconds.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/library/ulid/NOTES.md#2025-04-06_snippet_5\n\nLANGUAGE: prolog\nCODE:\n```\n| ?- time_stamp(Milliseconds), ulid(atom)::generate(Seconds, ULID).\nSeconds = 1684245175344, ULID = '01H0JDBQ1GAWJF35C44Y5S97DX'\nyes\n```\n\n----------------------------------------\n\nTITLE: Testing the Logtalk Meta Library\nDESCRIPTION: Demonstrates how to load and run the tests for the meta library predicates using the tester.lgt file.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/libraries/meta.rst.txt#2025-04-06_snippet_1\n\nLANGUAGE: logtalk\nCODE:\n```\n| ?- logtalk_load(meta(tester)).\n```\n\n----------------------------------------\n\nTITLE: Prototype Direct Declaration Lookup\nDESCRIPTION: Demonstrates lookup of predicate declaration directly in a prototype object.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/predicate_lookups/NOTES.md#2025-04-06_snippet_1\n\nLANGUAGE: logtalk\nCODE:\n```\nbike::frame(Material).\n```\n\n----------------------------------------\n\nTITLE: Resetting Entity-Specific Port Profiling Data in Logtalk\nDESCRIPTION: Resets all port profiling data for the specified entity. This predicate is compiled with the 'static' flag and provides one proof for a given entity identifier.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/ports_profiler_0.rst.txt#2025-04-06_snippet_6\n\nLANGUAGE: Logtalk\nCODE:\n```\nreset(Entity)\n```\n\n----------------------------------------\n\nTITLE: Using Object Wrapper Hook for Linting\nDESCRIPTION: Example of using the object_wrapper_hook from hook_objects library to lint Prolog code.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/devtools/linter.rst#2025-04-06_snippet_3\n\nLANGUAGE: prolog\nCODE:\n```\n| ?- logtalk_load(hook_objects(loader)).\n```\n\nLANGUAGE: prolog\nCODE:\n```\n| ?- logtalk_load(code, [hook(object_wrapper_hook), source_data(on)]).\n```\n\n----------------------------------------\n\nTITLE: Testing Sets Library in Logtalk\nDESCRIPTION: Shows how to load and run tests for the sets library predicates using the tester file.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/library/sets/NOTES.md#2025-04-06_snippet_1\n\nLANGUAGE: Logtalk\nCODE:\n```\n| ?- logtalk_load(sets(tester)).\n```\n\n----------------------------------------\n\nTITLE: Declaring logtalk_make/1 Predicate Signature\nDESCRIPTION: The core predicate declaration showing the structure and parameters for the logtalk_make/1 built-in predicate.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/refman/predicates/logtalk_make_1.rst#2025-04-06_snippet_0\n\nLANGUAGE: prolog\nCODE:\n```\nlogtalk_make(Target)\n```\n\n----------------------------------------\n\nTITLE: Generating ULID as Character List\nDESCRIPTION: Example of generating a ULID as a list of characters using the parametric object ulid(chars).\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/libraries/ulid.rst.txt#2025-04-06_snippet_3\n\nLANGUAGE: logtalk\nCODE:\n```\n| ?- ulid(chars)::generate(ULID).\nULID = ['0','1','H','0','J','3','2','Y','V','5','V','S','P','K','5','P','4','5','G','G','0','9','8','8','M','2']\nyes\n```\n\n----------------------------------------\n\nTITLE: Printing Version Information in Logtalk\nDESCRIPTION: Displays the versions of Logtalk, Prolog backend, and kernel if running in a notebook environment.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/adventure/NOTES.md#2025-04-06_snippet_0\n\nLANGUAGE: logtalk\nCODE:\n```\n%versions\n```\n\n----------------------------------------\n\nTITLE: Using Bypass Control Constructs in DCG and Logtalk\nDESCRIPTION: Demonstrates the use of the {}/1 control constructs in both DCG rules and Logtalk using the bypass object.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/dcgs/NOTES.md#2025-04-06_snippet_14\n\nLANGUAGE: logtalk\nCODE:\n```\nlogtalk << phrase(bypass::foo, _, _).\n```\n\n----------------------------------------\n\nTITLE: Querying Predefined Decorated Object\nDESCRIPTION: These snippets show queries on a predefined decorated object (my_named_shape) from the source file.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/design_patterns/structural/decorator/NOTES.md#2025-04-06_snippet_8\n\nLANGUAGE: logtalk\nCODE:\n```\nmy_named_shape::string.\n```\n\nLANGUAGE: logtalk\nCODE:\n```\nmy_named_shape::diameter(Diameter).\n```\n\n----------------------------------------\n\nTITLE: Testing File Directive\nDESCRIPTION: Tests the include/1 directive as a file directive by finding all vowels.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/includes/NOTES.md#2025-04-06_snippet_2\n\nLANGUAGE: logtalk\nCODE:\n```\nfindall(Vowel, vowel(Vowel), Vowels).\n```\n\n----------------------------------------\n\nTITLE: Checking Versions in Logtalk\nDESCRIPTION: Prints the versions of Logtalk, Prolog backend, and kernel\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/closed_world_assumption/NOTES.md#2025-04-06_snippet_0\n\nLANGUAGE: logtalk\nCODE:\n```\n%versions\n```\n\n----------------------------------------\n\nTITLE: Testing goal expansion within private object\nDESCRIPTION: Shows that goal expansion does not occur within the desc_private object using a test predicate.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/expansion/NOTES.md#2025-04-06_snippet_13\n\nLANGUAGE: logtalk\nCODE:\n```\ndesc_private::test_goal_expansion(write(Term), EGoal).\n```\n\n----------------------------------------\n\nTITLE: Loading Format Library in Logtalk\nDESCRIPTION: Demonstrates how to load all entities in the format library using the loader.lgt file.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/library/format/NOTES.md#2025-04-06_snippet_0\n\nLANGUAGE: Prolog\nCODE:\n```\n| ?- logtalk_load(format(loader)).\n```\n\n----------------------------------------\n\nTITLE: Starting Tracing in Logtalk\nDESCRIPTION: Starts tracing all calls compiled in debug mode.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/debuggerp_0.rst.txt#2025-04-06_snippet_5\n\nLANGUAGE: Logtalk\nCODE:\n```\ntrace/0\n```\n\n----------------------------------------\n\nTITLE: Using phrase/3 with Grammar Rules in Logtalk\nDESCRIPTION: Demonstrates the syntax for using phrase/3 method to apply grammar rules to difference lists. The method can be called with local non-terminals, non-terminals in the scope of self, or public non-terminals of explicit objects.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/refman/methods/phrase_3.rst.txt#2025-04-06_snippet_0\n\nLANGUAGE: Logtalk\nCODE:\n```\nphrase(GrammarRuleBody, Input, Rest)\nphrase(::GrammarRuleBody, Input, Rest)\nphrase(Object::GrammarRuleBody, Input, Rest)\n```\n\n----------------------------------------\n\nTITLE: Documenting Grammar Rule Non-terminals with info/2 Directive\nDESCRIPTION: Shows how to use the info/2 directive to document grammar rule non-terminals, providing information about their purpose and functionality.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/userman/predicates.rst.txt#2025-04-06_snippet_42\n\nLANGUAGE: logtalk\nCODE:\n```\n:- public(sentence//0).\n\n:- info(sentence//0, [\n    comment is 'Rewrites sentence into noun and verb phrases.'\n]).\n```\n\n----------------------------------------\n\nTITLE: Querying Parent Object Interface\nDESCRIPTION: Queries the interface of the 'parent' object to show its public, protected, and private predicates.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/inheritance/NOTES.md#2025-04-06_snippet_2\n\nLANGUAGE: logtalk\nCODE:\n```\nparent::interface.\n```\n\n----------------------------------------\n\nTITLE: Demonstrating PDDL to Prolog Conversion\nDESCRIPTION: This snippet shows an example of how the parser converts PDDL syntax to Prolog syntax. It demonstrates the conversion of a simple 'on' predicate.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/contributions/pddl_parser.rst.txt#2025-04-06_snippet_0\n\nLANGUAGE: PDDL\nCODE:\n```\n(on ?x ?y)\n```\n\nLANGUAGE: Prolog\nCODE:\n```\non(?x, ?y)\n```\n\n----------------------------------------\n\nTITLE: Defining a Content Callback for HTML Generation\nDESCRIPTION: Shows how to define a predicate that will be used as a callback to generate HTML content dynamically.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/libraries/html.rst.txt#2025-04-06_snippet_9\n\nLANGUAGE: prolog\nCODE:\n```\ncontent(strong('Hello world!')).\n```\n\n----------------------------------------\n\nTITLE: Creating an Expected Term in Logtalk\nDESCRIPTION: This example demonstrates how to create an expected term using the of_expected/2 predicate from the 'expected' object.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/libraries/expecteds.rst.txt#2025-04-06_snippet_2\n\nLANGUAGE: Prolog\nCODE:\n```\n| ?- expected::of_expected(1, Expected).\n```\n\n----------------------------------------\n\nTITLE: Throwing Permission Error in Logtalk\nDESCRIPTION: Demonstrates the usage of the permission_error/3 method to throw a permission error. This method is equivalent to throwing an error with context information.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/refman/methods/permission_error_3.rst.txt#2025-04-06_snippet_0\n\nLANGUAGE: Logtalk\nCODE:\n```\npermission_error(Operation, PermissionType, Culprit)\n```\n\nLANGUAGE: Logtalk\nCODE:\n```\n...,\ncontext(Context),\nthrow(error(permission_error(Operation,PermissionType,Culprit), Context)).\n```\n\n----------------------------------------\n\nTITLE: Testing Basic Types Library in Logtalk\nDESCRIPTION: Command to load and run tests for the library predicates using the tester.lgt file from the types library\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/libraries/basic_types.rst.txt#2025-04-06_snippet_1\n\nLANGUAGE: logtalk\nCODE:\n```\n| ?- logtalk_load(types(tester)).\n```\n\n----------------------------------------\n\nTITLE: Loading the Expecteds Library in Logtalk\nDESCRIPTION: Code for loading all entities in the 'expecteds' library using the loader.lgt file.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/libraries/expecteds.rst#2025-04-06_snippet_0\n\nLANGUAGE: prolog\nCODE:\n```\n| ?- logtalk_load(expecteds(loader)).\n```\n\n----------------------------------------\n\nTITLE: Loading the TSV Library in Logtalk\nDESCRIPTION: Command to load all entities in the TSV library using the loader.lgt file.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/libraries/tsv.rst#2025-04-06_snippet_0\n\nLANGUAGE: logtalk\nCODE:\n```\n| ?- logtalk_load(tsv(loader)).\n```\n\n----------------------------------------\n\nTITLE: Generating ULID as Character List\nDESCRIPTION: Shows how to generate a ULID as a list of characters using the chars parameter.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/libraries/ulid.rst#2025-04-06_snippet_3\n\nLANGUAGE: logtalk\nCODE:\n```\n| ?- ulid(chars)::generate(ULID).\nULID = ['0','1','H','0','J','3','2','Y','V','5','V','S','P','K','5','P','4','5','G','G','0','9','8','8','M','2']\nyes\n```\n\n----------------------------------------\n\nTITLE: Pack Version Declaration with SSH URL\nDESCRIPTION: Example of declaring a pack version using SSH URL for git archive download\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/devtools/packs.rst#2025-04-06_snippet_17\n\nLANGUAGE: prolog\nCODE:\n```\nversion(\n    1:0:1,\n    stable,\n    'git@gitlab.com:me/foo.git/v1.0.1.zip',\n    sha256 - '0894c7cdb8968b6bbcf00e3673c1c16cfa98232573af30ceddda207b20a7a207',\n    [logtalk @>= 3:36:0],\n    all\n).\n```\n\n----------------------------------------\n\nTITLE: Temporal Contains Relation\nDESCRIPTION: Checks if Interval1 contains Interval2. Returns zero or one solutions.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/intervalp_0.rst.txt#2025-04-06_snippet_11\n\nLANGUAGE: Logtalk\nCODE:\n```\ncontains(Interval1,Interval2)\n```\n\n----------------------------------------\n\nTITLE: Referencing the 'user' pseudo-object in Logtalk\nDESCRIPTION: This snippet demonstrates how to reference the built-in 'user' pseudo-object in Logtalk. The 'user' pseudo-object contains all user predicate definitions not encapsulated in a Logtalk entity or Prolog module.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/userman/objects.rst#2025-04-06_snippet_28\n\nLANGUAGE: Logtalk\nCODE:\n```\nuser\n```\n\n----------------------------------------\n\nTITLE: Generating Character List Identifier\nDESCRIPTION: Generates a random identifier using 64 bits (8 bytes) of randomness, returning a list of characters.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/libraries/ids.rst.txt#2025-04-06_snippet_4\n\nLANGUAGE: logtalk\nCODE:\n```\n| ?- ids(chars, 8)::generate(Identifier).\nIdentifier = ['5','0','8','V',d,'S',c,y,n,o,'A',=]\nyes\n```\n\n----------------------------------------\n\nTITLE: Using the Dif Library Predicates with Implicit Message Sending\nDESCRIPTION: Demonstrates how to add a uses/2 directive to an object or category to enable implicit message sending for the dif/1 and dif/2 predicates from the dif library.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/library/dif/NOTES.md#2025-04-06_snippet_2\n\nLANGUAGE: Logtalk\nCODE:\n```\n:- uses(dif, [\n\tdif/2, dif/1\n]).\n```\n\n----------------------------------------\n\nTITLE: Configuring Prolog Library Path for a Prolog Pack\nDESCRIPTION: Example code showing how to configure a Prolog system to recognize an installed Prolog pack by setting up a file_search_path entry.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/tools/packs/NOTES.md#2025-04-06_snippet_36\n\nLANGUAGE: prolog\nCODE:\n```\n:- multifile(file_search_path/2).\n:- dynamic(file_search_path/2).\n\nfile_search_path(library, '$LOGTALKPACKS/packs/pl_pack').\n```\n\n----------------------------------------\n\nTITLE: Interval Validation Predicate\nDESCRIPTION: Checks if the given interval is valid. Returns zero or one solutions.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/intervalp_0.rst.txt#2025-04-06_snippet_1\n\nLANGUAGE: Logtalk\nCODE:\n```\nvalid(Interval)\n```\n\n----------------------------------------\n\nTITLE: Loading the Logtalk Profiler\nDESCRIPTION: Shows how to load the Logtalk profiler module using the logtalk_load/1 predicate.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/tools/profiler/SCRIPT.txt#2025-04-06_snippet_0\n\nLANGUAGE: logtalk\nCODE:\n```\n| ?- logtalk_load(profilers(loader)).\n```\n\n----------------------------------------\n\nTITLE: Example Usage of encoding/1 Directive in Logtalk\nDESCRIPTION: This example demonstrates how to use the encoding/1 directive to specify UTF-8 encoding for a Logtalk source file. The directive must be placed at the very beginning of the file.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/refman/directives/encoding_1.rst.txt#2025-04-06_snippet_1\n\nLANGUAGE: Logtalk\nCODE:\n```\n:- encoding('UTF-8').\n```\n\n----------------------------------------\n\nTITLE: Loading and Running Tests Written in a Custom DSL\nDESCRIPTION: Command to load the tests_dsl(tester) module which contains tests written in the custom Domain Specific Language and executes them using the lgtunit tool.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/tests_dsl/NOTES.md#2025-04-06_snippet_1\n\nLANGUAGE: logtalk\nCODE:\n```\nlogtalk_load(tests_dsl(tester)).\n```\n\n----------------------------------------\n\nTITLE: Loading the Free Nodes Example in Logtalk\nDESCRIPTION: This command loads the free_nodes example using the Logtalk loader. It's necessary to run before executing the example.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/ncl/free_nodes/NOTES.md#2025-04-06_snippet_1\n\nLANGUAGE: logtalk\nCODE:\n```\nlogtalk_load(free_nodes(loader)).\n```\n\n----------------------------------------\n\nTITLE: Fibonacci Calculation using Fold in Logtalk\nDESCRIPTION: Demonstrates the use of fold_left/4 meta-predicate to calculate Fibonacci numbers.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/metapredicates/NOTES.md#2025-04-06_snippet_11\n\nLANGUAGE: logtalk\nCODE:\n```\nfibonacci::nth(10, Fib).\n```\n\nLANGUAGE: logtalk\nCODE:\n```\ninteger::between(0, 5, Nth), fibonacci::nth(Nth, Fib).\n```\n\n----------------------------------------\n\nTITLE: Message File Logging Configuration\nDESCRIPTION: Example demonstrating how to configure message logging to files using message_prefix_file/6 predicate.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/userman/printing.rst#2025-04-06_snippet_5\n\nLANGUAGE: logtalk\nCODE:\n```\n:- multifile(logtalk::message_prefix_file/6).\n:- dynamic(logtalk::message_prefix_file/6).\n\nlogtalk::message_prefix_file(error,   app, '! ', 'log.txt', append, []).\nlogtalk::message_prefix_file(warning, app, '! ', 'log.txt', append, []).\n```\n\n----------------------------------------\n\nTITLE: Printing Logtalk and Prolog Version Information\nDESCRIPTION: Command to display Logtalk, Prolog backend, and kernel versions when running in a notebook environment.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/inheritance/NOTES.md#2025-04-06_snippet_0\n\nLANGUAGE: logtalk\nCODE:\n```\n%versions\n```\n\n----------------------------------------\n\nTITLE: Checking Versions in Logtalk\nDESCRIPTION: Prints version information for Logtalk, Prolog backend, and kernel when running in a notebook environment.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/lo/travellers/NOTES.md#2025-04-06_snippet_0\n\nLANGUAGE: logtalk\nCODE:\n```\n%versions\n```\n\n----------------------------------------\n\nTITLE: Signing Pack Archive with GPG\nDESCRIPTION: Commands for signing pack archives using GPG to create .asc or .sig signature files\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/devtools/packs.rst#2025-04-06_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\n$ gpg --armor --detach-sign v1.0.0.tar.gz\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ gpg --detach-sign v1.0.0.tar.gz\n```\n\n----------------------------------------\n\nTITLE: Defining Table of Contents for Logtalk Built-in Methods in reStructuredText\nDESCRIPTION: This snippet defines a table of contents using reStructuredText syntax, listing various categories of Logtalk built-in methods. It uses the 'toctree' directive to create a nested structure of documentation pages.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/refman/methods/index.rst.txt#2025-04-06_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. toctree::\n   :maxdepth: 2\n\n   logic_and_control_methods\n   context_methods\n   reflection_methods\n   database_methods\n   meta_call_methods\n   error_handling_methods\n   solution_methods\n   event_methods\n   forwarding_methods\n   dcg_methods\n   expansion_methods\n   coinduction_methods\n   printing_methods\n   asking_methods\n```\n\n----------------------------------------\n\nTITLE: Adding a Term as First Entry in Logtalk\nDESCRIPTION: The recorda/2 predicate adds a term as the first term for the given key without returning a reference. It accepts a key and a term to store.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/recorded_database_core_0.rst.txt#2025-04-06_snippet_1\n\nLANGUAGE: logtalk\nCODE:\n```\nrecorda(Key,Term)\n```\n\n----------------------------------------\n\nTITLE: Closure Execution in User Context in Logtalk\nDESCRIPTION: Shows how to call a closure in the context of the 'user' pseudo-object, extending it with additional arguments.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/refman/control/external_call_1.rst.txt#2025-04-06_snippet_3\n\nLANGUAGE: logtalk\nCODE:\n```\n% call a closure in the context of \"user\":\ncall_in_user(F, X, Y, Z) :-\n    call({F}, X, Y, Z).\n```\n\n----------------------------------------\n\nTITLE: Using a CLP(FD) Module in a Logtalk Puzzle Solver Object\nDESCRIPTION: Implementation of the SEND+MORE=MONEY puzzle using the CLP(FD) library in a Logtalk object. The object imports specific predicates and operators from the clpfd module to solve the constraint satisfaction problem.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/userman/predicates.rst.txt#2025-04-06_snippet_58\n\nLANGUAGE: logtalk\nCODE:\n```\n:- object(puzzle).\n\n    :- public(puzzle/1).\n\n    :- use_module(clpfd, [\n        all_different/1, ins/2, label/1,\n        (#=)/2, (#\\=)/2,\n        op(700, xfx, #=), op(700, xfx, #\\=)\n    ]).\n\n    puzzle([S,E,N,D] + [M,O,R,E] = [M,O,N,E,Y]) :-\n        Vars = [S,E,N,D,M,O,R,Y],\n        Vars ins 0..9,\n        all_different(Vars),\n                  S*1000 + E*100 + N*10 + D +\n                  M*1000 + O*100 + R*10 + E #=\n        M*10000 + O*1000 + N*100 + E*10 + Y,\n        M #\\= 0, S #\\= 0,\n        label([M,O,N,E,Y]).\n\n:- end_object.\n```\n\n----------------------------------------\n\nTITLE: Meta-non-terminal Templates\nDESCRIPTION: Shows the template patterns for using call//1-N with different arities.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/refman/methods/call_1.rst.txt#2025-04-06_snippet_2\n\nLANGUAGE: prolog\nCODE:\n```\ncall(0)\ncall(1, *)\ncall(2, *, *)\n```\n\n----------------------------------------\n\nTITLE: Using the info/2 directive for predicate documentation in Logtalk\nDESCRIPTION: Pattern for the info/2 directive used to provide arbitrary user-defined information about a predicate or grammar rule non-terminal. The first argument is the predicate indicator (Name/Arity or Name//Arity), followed by key-value pairs.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/userman/documenting.rst.txt#2025-04-06_snippet_2\n\nLANGUAGE: logtalk\nCODE:\n```\n:- info(Name/Arity, [\n    Key1 is Value1,\n    Key2 is Value2,\n    ...\n]).\n```\n\n----------------------------------------\n\nTITLE: Mode Declaration for {}/1 in Logtalk\nDESCRIPTION: Specifies the argument mode and the number of proofs for the {}/1 control construct. It accepts a callable term as input and can generate zero or more proofs.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/refman/control/external_call_1.rst.txt#2025-04-06_snippet_1\n\nLANGUAGE: logtalk\nCODE:\n```\n{+callable} - zero_or_more\n```\n\n----------------------------------------\n\nTITLE: Single-Thread Fibonacci Calculation\nDESCRIPTION: Calculates the 24th Fibonacci number using a single thread with timing measurement.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/threads/fibonacci/NOTES.md#2025-04-06_snippet_1\n\nLANGUAGE: logtalk\nCODE:\n```\ntime(fibonacci(1)::fib(24, N)).\n```\n\n----------------------------------------\n\nTITLE: Verifying Overridden Recipe Property in Logtalk\nDESCRIPTION: Confirms that the level property of green_soup was successfully overridden by the second patch.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/recipes/NOTES.md#2025-04-06_snippet_8\n\nLANGUAGE: logtalk\nCODE:\n```\ngreen_soup::level(Level).\n```\n\n----------------------------------------\n\nTITLE: Category Implementation Using assertz/1\nDESCRIPTION: Example demonstrating how to use assertz/1 within a category to assert clauses in 'this' context and in 'self' context. Shows the difference between local assertion and using the :: operator.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/refman/methods/assertz_1.rst#2025-04-06_snippet_2\n\nLANGUAGE: logtalk\nCODE:\n```\n:- category(attributes,\n    implements(attributes_protocol)).\n\n    :- private(attr_/1).\n    :- dynamic(attr_/1).\n\n    set_in_this(A, X) :-\n       assertz(attr_(A, X)).\n\n    set_in_self(A, X) :-\n       ::assertz(attr_(A, X)).\n\n    ...\n```\n\n----------------------------------------\n\nTITLE: Print Version Information - Logtalk\nDESCRIPTION: Prints the versions of Logtalk, Prolog backend, and kernel\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/assumptions/NOTES.md#2025-04-06_snippet_0\n\nLANGUAGE: logtalk\nCODE:\n```\n%versions\n```\n\n----------------------------------------\n\nTITLE: Loading Logtalk Logging Library\nDESCRIPTION: Command to load all entities in the Logtalk logging library using the loader utility file.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/libraries/logging.rst#2025-04-06_snippet_0\n\nLANGUAGE: logtalk\nCODE:\n```\n| ?- logtalk_load(logging(loader)).\n```\n\n----------------------------------------\n\nTITLE: Defining message_hook/4 Method Signature in Logtalk\nDESCRIPTION: Declaration of the message_hook/4 predicate that serves as a hook for intercepting message printing. The method is called when printing messages and allows custom message handling.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/refman/methods/message_hook_4.rst.txt#2025-04-06_snippet_0\n\nLANGUAGE: logtalk\nCODE:\n```\nmessage_hook(Message, Kind, Component, Tokens)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Grammar Rule Non-Terminals in Logtalk\nDESCRIPTION: Defines a predicate to find all grammar rule non-terminals declared for an object using the predicate_property/2 method.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/userman/predicates.rst#2025-04-06_snippet_52\n\nLANGUAGE: logtalk\nCODE:\n```\ncurrent_non_terminal(Object, Name//Args) :-\n    Object::current_predicate(Name/Arity),\n    functor(Predicate, Functor, Arity),\n    Object::predicate_property(Predicate, non_terminal(Name//Args)).\n```\n\n----------------------------------------\n\nTITLE: Testing UUID Library in Logtalk\nDESCRIPTION: Loads the tester.lgt file to test the UUID library predicates.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/libraries/uuid.rst.txt#2025-04-06_snippet_1\n\nLANGUAGE: Prolog\nCODE:\n```\n| ?- logtalk_load(uuid(tester)).\n```\n\n----------------------------------------\n\nTITLE: Using a CLP(FD) Module in a Logtalk Puzzle Solver Object\nDESCRIPTION: Implementation of the SEND+MORE=MONEY puzzle using the CLP(FD) library in a Logtalk object. The object imports specific predicates and operators from the clpfd module to solve the constraint satisfaction problem.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/userman/predicates.rst.txt#2025-04-06_snippet_58\n\nLANGUAGE: logtalk\nCODE:\n```\n:- object(puzzle).\n\n    :- public(puzzle/1).\n\n    :- use_module(clpfd, [\n        all_different/1, ins/2, label/1,\n        (#=)/2, (#\\=)/2,\n        op(700, xfx, #=), op(700, xfx, #\\=)\n    ]).\n\n    puzzle([S,E,N,D] + [M,O,R,E] = [M,O,N,E,Y]) :-\n        Vars = [S,E,N,D,M,O,R,Y],\n        Vars ins 0..9,\n        all_different(Vars),\n                  S*1000 + E*100 + N*10 + D +\n                  M*1000 + O*100 + R*10 + E #=\n        M*10000 + O*1000 + N*100 + E*10 + Y,\n        M #\\= 0, S #\\= 0,\n        label([M,O,N,E,Y]).\n\n:- end_object.\n```\n\n----------------------------------------\n\nTITLE: Querying Patched Recipe Property in Logtalk\nDESCRIPTION: Queries the newly added level property of the mashed_peas recipe after applying the first patch.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/recipes/NOTES.md#2025-04-06_snippet_6\n\nLANGUAGE: logtalk\nCODE:\n```\nmashed_peas::level(Level).\n```\n\n----------------------------------------\n\nTITLE: Declaring Operators in Logtalk using op/3 Directive\nDESCRIPTION: The op/3 directive syntax for declaring operators, showing both single operator and list of operators forms. The directive takes precedence, associativity, and operator name(s) as arguments.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/refman/directives/op_3.rst#2025-04-06_snippet_0\n\nLANGUAGE: logtalk\nCODE:\n```\nop(Precedence, Associativity, Operator)\nop(Precedence, Associativity, [Operator, ...])\n```\n\n----------------------------------------\n\nTITLE: Testing the Meta Compiler Library in Logtalk\nDESCRIPTION: Demonstrates how to load the test suite for the meta_compiler library using the tester.lgt file.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/libraries/meta_compiler.rst#2025-04-06_snippet_1\n\nLANGUAGE: prolog\nCODE:\n```\n| ?- logtalk_load(meta_compiler(tester)).\n```\n\n----------------------------------------\n\nTITLE: Loading Debug Messages Test Suite\nDESCRIPTION: Query to load the test suite for the debug_messages library.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/devtools/debug_messages.rst.txt#2025-04-06_snippet_1\n\nLANGUAGE: prolog\nCODE:\n```\n| ?- logtalk_load(debug_messages(tester)).\n```\n\n----------------------------------------\n\nTITLE: Loading PDDL Parser Library in Logtalk\nDESCRIPTION: This code snippet demonstrates how to load all entities in the PDDL parser library using Logtalk. It uses the logtalk_load/1 predicate to load the loader file.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/contributions/pddl_parser.rst.txt#2025-04-06_snippet_1\n\nLANGUAGE: Prolog\nCODE:\n```\n?- logtalk_load(pddl_parser(loader)).\n```\n\n----------------------------------------\n\nTITLE: Finding Properties of a Message Accepted by an Object\nDESCRIPTION: Lists all properties of the side/1 message accepted by any square object using the predicate_property/2 predicate.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/sicstus/NOTES.md#2025-04-06_snippet_10\n\nLANGUAGE: logtalk\nCODE:\n```\n%%table\nsquare(_)::predicate_property(side(_), Prop).\n```\n\n----------------------------------------\n\nTITLE: Generating ULID as Character Codes\nDESCRIPTION: Demonstrates generating a ULID as a list of character codes.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/libraries/ulid.rst#2025-04-06_snippet_4\n\nLANGUAGE: logtalk\nCODE:\n```\n| ?- ulid(codes)::generate(ULID).\nULID = [48,49,72,48,74,51,52,66,54,48,55,57,54,49,67,82,70,65,67,51,67,67,86,82,48,66]\nyes\n```\n\n----------------------------------------\n\nTITLE: Running XVM Logtalk Script Help on PowerShell\nDESCRIPTION: Command to display help information for the XVM Logtalk script on Windows systems using PowerShell.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/scripts/embedding/xvm/NOTES.md#2025-04-06_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nxvm_logtalk_pl.ps1 -h\n```\n\n----------------------------------------\n\nTITLE: Deleting Top Pair from Heap in Logtalk\nDESCRIPTION: Deletes and returns the top pair in a heap, returning the updated heap. Takes the current heap and returns the top key, top value, and the new heap.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/heapp_0.rst.txt#2025-04-06_snippet_2\n\nLANGUAGE: Logtalk\nCODE:\n```\ndelete(Heap,TopKey,TopValue,NewHeap)\n```\n\n----------------------------------------\n\nTITLE: Referencing the 'logtalk' object in Logtalk\nDESCRIPTION: This snippet shows how to reference the built-in 'logtalk' object in Logtalk. The 'logtalk' object provides various utility predicates for message printing, debugging, and accessing internal databases.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/userman/objects.rst#2025-04-06_snippet_29\n\nLANGUAGE: Logtalk\nCODE:\n```\nlogtalk\n```\n\n----------------------------------------\n\nTITLE: Message Sending Syntax in Logtalk\nDESCRIPTION: Basic syntax for sending a message to self using the (::)/1 control construct.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/refman/control/send_to_self_1.rst#2025-04-06_snippet_0\n\nLANGUAGE: logtalk\nCODE:\n```\n::Message\n```\n\n----------------------------------------\n\nTITLE: Loading Heaps Library in Logtalk\nDESCRIPTION: Command to load all entities in the heaps library using the loader.lgt file.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/library/heaps/NOTES.md#2025-04-06_snippet_0\n\nLANGUAGE: logtalk\nCODE:\n```\n| ?- logtalk_load(heaps(loader)).\n```\n\n----------------------------------------\n\nTITLE: Deleting Maximum Key-Value Pair from Dictionary in Logtalk\nDESCRIPTION: Deletes the pair with the maximum key from a dictionary, returning the deleted pair and the updated dictionary.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/dictionaryp_0.rst.txt#2025-04-06_snippet_20\n\nLANGUAGE: Logtalk\nCODE:\n```\ndelete_max(OldDictionary,Key,Value,NewDictionary)\n```\n\n----------------------------------------\n\nTITLE: Reset Flags by Group - Logtalk\nDESCRIPTION: Predicate to reset all flags in a specified group to their default values.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/flags_0.rst.txt#2025-04-06_snippet_4\n\nLANGUAGE: logtalk\nCODE:\n```\nreset_flags(Group)\n```\n\n----------------------------------------\n\nTITLE: Defining a Logtalk Object with Debug Messages\nDESCRIPTION: Example Logtalk object 'foo' within component 'xyz' that uses debug messages with different groups (bar and baz).\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/tools/debug_messages/NOTES.md#2025-04-06_snippet_2\n\nLANGUAGE: Logtalk\nCODE:\n```\n:- object(foo).\n\n\t:- public([bar/0, baz/0]).\n\t:- uses(logtalk, [print_message/3]).\n\n\tbar :-\n\t\tprint_message(debug(bar), xyz, @'bar/0 called').\n\n\tbaz :-\n\t\tprint_message(debug(baz), xyz, @'baz/0 called').\n\n:- end_object.\n```\n\n----------------------------------------\n\nTITLE: Finding Root Using Newton Method for Function f2\nDESCRIPTION: Demonstrates using Newton's method to find the root of function f2 in the range [1.0, 1.3] with a tolerance of 1.0e-15.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/threads/functions/NOTES.md#2025-04-06_snippet_6\n\nLANGUAGE: logtalk\nCODE:\n```\nnewton::find_root(f2, 1.0, 1.3, 1.0e-15, Zero).\n```\n\n----------------------------------------\n\nTITLE: Testing Assignvars Library in Logtalk\nDESCRIPTION: Command to load the tester.lgt file for testing the assignvars library predicates.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/libraries/assignvars.rst.txt#2025-04-06_snippet_1\n\nLANGUAGE: prolog\nCODE:\n```\n| ?- logtalk_load(assignvars(tester)).\n```\n\n----------------------------------------\n\nTITLE: Specifying Modes and Number of Proofs for existence_error/2\nDESCRIPTION: Defines the mode and number of proofs for the existence_error/2 method. It specifies that both arguments should be non-variable terms and that calling this method results in an error.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/refman/methods/existence_error_2.rst.txt#2025-04-06_snippet_1\n\nLANGUAGE: Logtalk\nCODE:\n```\nexistence_error(@nonvar, @nonvar) - error\n```\n\n----------------------------------------\n\nTITLE: Template for nolog Predicate in Logtalk\nDESCRIPTION: Template for the nolog/3 predicate used to remove log points for a specified entity. It takes an entity identifier (object or category), line number, and message as parameters.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/debuggerp_0.rst.txt#2025-04-06_snippet_22\n\nLANGUAGE: logtalk\nCODE:\n```\nnolog(Entity,Line,Message)\n```\n\n----------------------------------------\n\nTITLE: Setting expand_library_alias_paths as Default Hook Object in Logtalk\nDESCRIPTION: Shows how to set expand_library_alias_paths as the default hook object using the set_logtalk_flag/2 predicate.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/libraries/expand_library_alias_paths.rst#2025-04-06_snippet_2\n\nLANGUAGE: prolog\nCODE:\n```\n| ?- set_logtalk_flag(hook, expand_library_alias_paths).\n```\n\n----------------------------------------\n\nTITLE: Applying Hot Patch to Add Default Recipe Level\nDESCRIPTION: Loads a patch that extends all recipe objects with a level/1 descriptor, setting 'easy' as the default value.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/recipes/NOTES.md#2025-04-06_snippet_5\n\nLANGUAGE: logtalk\nCODE:\n```\nlogtalk_load(recipes(patch_1)).\n```\n\n----------------------------------------\n\nTITLE: Loading the Questions Example in Logtalk\nDESCRIPTION: This code loads the questions example module in Logtalk.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/questions/NOTES.md#2025-04-06_snippet_1\n\nLANGUAGE: logtalk\nCODE:\n```\nlogtalk_load(questions(loader)).\n```\n\n----------------------------------------\n\nTITLE: Setting Meta-Compiler as Default Hook Object in Logtalk\nDESCRIPTION: Illustrates how to set meta_compiler as the default hook object for optimization, applicable to entities compiled with the optimize flag on.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/library/meta_compiler/NOTES.md#2025-04-06_snippet_2\n\nLANGUAGE: Prolog\nCODE:\n```\n| ?- set_logtalk_flag(hook, meta_compiler).\n```\n\n----------------------------------------\n\nTITLE: Method Mode Declaration\nDESCRIPTION: Specifies the mode declaration for syntax_error/1, indicating it takes a non-variable argument and results in an error.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/refman/methods/syntax_error_1.rst#2025-04-06_snippet_2\n\nLANGUAGE: prolog\nCODE:\n```\nsyntax_error(@nonvar) - error\n```\n\n----------------------------------------\n\nTITLE: TSV File Writing Predicate in Logtalk\nDESCRIPTION: Writes data from object predicate clauses to a TSV file. Takes file name, object identifier, and predicate indicator as arguments. Includes comprehensive error handling for invalid inputs and file operations.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/tsv_protocol_0.rst.txt#2025-04-06_snippet_6\n\nLANGUAGE: logtalk\nCODE:\n```\nwrite_file(File,Object,Predicate)\n```\n\n----------------------------------------\n\nTITLE: Compiling Logtalk Source with Debug Flag\nDESCRIPTION: Example of compiling Logtalk source code with the debug flag enabled, which is required for using the debugger.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/tools/debugger/NOTES.md#2025-04-06_snippet_2\n\nLANGUAGE: Prolog\nCODE:\n```\n| ?- logtalk_load(my_buggy_code, [debug(on)]).\n```\n\n----------------------------------------\n\nTITLE: Halting the process\nDESCRIPTION: Halts the current Logtalk process to simulate a session end.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/persistency/NOTES.md#2025-04-06_snippet_6\n\nLANGUAGE: logtalk\nCODE:\n```\nhalt.\n```\n\n----------------------------------------\n\nTITLE: Querying Instance1 Interface\nDESCRIPTION: Queries the interface of 'instance1' which instantiates 'subclass1' that specializes 'root' with public inheritance.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/inheritance/NOTES.md#2025-04-06_snippet_10\n\nLANGUAGE: logtalk\nCODE:\n```\ninstance1::interface.\n```\n\n----------------------------------------\n\nTITLE: Loading Logtalk Optional Libraries Example\nDESCRIPTION: Example of loading the 'optionals' library from within a source file.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/QUICK_START.md#2025-04-06_snippet_4\n\nLANGUAGE: prolog\nCODE:\n```\nlogtalk_load(optionals(loader))\n```\n\n----------------------------------------\n\nTITLE: Print Version Information\nDESCRIPTION: Prints the versions of Logtalk, Prolog backend, and kernel when running in notebook mode.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/lips/NOTES.md#2025-04-06_snippet_0\n\nLANGUAGE: logtalk\nCODE:\n```\n%versions\n```\n\n----------------------------------------\n\nTITLE: Testing hook object with multiple goals\nDESCRIPTION: Demonstrates the use of a hook object 'cooked' with multiple goals.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/expansion/NOTES.md#2025-04-06_snippet_14\n\nLANGUAGE: logtalk\nCODE:\n```\ncooked << (aa, bb, cc).\n```\n\n----------------------------------------\n\nTITLE: Loading Union-Find Library in Logtalk\nDESCRIPTION: This snippet shows how to load all entities in the union-find library using the loader.lgt file.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/library/union_find/NOTES.md#2025-04-06_snippet_0\n\nLANGUAGE: Logtalk\nCODE:\n```\n| ?- logtalk_load(union_find(loader)).\n```\n\n----------------------------------------\n\nTITLE: Example: Error Handling in Conditional Compilation\nDESCRIPTION: Example demonstrating how to handle errors in test goals using the catch/3 control construct to convert errors into failures.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/refman/directives/if_1.rst.txt#2025-04-06_snippet_4\n\nLANGUAGE: logtalk\nCODE:\n```\n:- if(catch(\\+ log(7,_), _, fail)).\n\n   % define the legacy log/2 predicate\n   log(X, Y) :- Y is log(X).\n\n:- endif.\n```\n\n----------------------------------------\n\nTITLE: Synchronized Predicate Examples\nDESCRIPTION: Examples showing different ways to declare synchronized predicates and non-terminals, including single predicate declaration, multiple predicates sharing a mutex, and list syntax.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/refman/directives/synchronized_1.rst.txt#2025-04-06_snippet_1\n\nLANGUAGE: logtalk\nCODE:\n```\n:- synchronized(db_update/1).\n\n:- synchronized((write_stream/2, read_stream/2)).\n\n:- synchronized([add_to_queue/2, remove_from_queue/2]).\n```\n\n----------------------------------------\n\nTITLE: Declaring Public Predicates and Non-Terminals in Logtalk\nDESCRIPTION: Demonstrates the syntax for declaring public predicates, grammar rule non-terminals, and operators using the public/1 directive. Multiple formats are shown including single, multiple, and list declarations.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/refman/directives/public_1.rst#2025-04-06_snippet_0\n\nLANGUAGE: Logtalk\nCODE:\n```\npublic(Name/Arity)\npublic((Name/Arity, ...))\npublic([Name/Arity, ...])\n\npublic(Name//Arity)\npublic((Name//Arity, ...))\npublic([Name//Arity, ...])\n\npublic(op(Precedence,Associativity,Operator))\npublic((op(Precedence,Associativity,Operator), ...))\npublic([op(Precedence,Associativity,Operator), ...])\n```\n\n----------------------------------------\n\nTITLE: Declaring Dynamic Predicate sub_diagram_/1 in Logtalk\nDESCRIPTION: Declares a dynamic private predicate sub_diagram_/1 within the library_dependency_diagram object. This predicate is used to maintain a table of library sub-diagrams to support their generation.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/library_dependency_diagram_1.rst.txt#2025-04-06_snippet_1\n\nLANGUAGE: Logtalk\nCODE:\n```\nsub_diagram_(Library)\n```\n\n----------------------------------------\n\nTITLE: Defining Protected Predicates for CHR Interpreter in Logtalk\nDESCRIPTION: Declares protected predicates for internal use in the CHR interpreter, including current_prog/1 and various chr_option predicates. Most are marked as dynamic, allowing for runtime modifications.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/toychrdb_0.rst.txt#2025-04-06_snippet_1\n\nLANGUAGE: Logtalk\nCODE:\n```\ncurrent_prog/1\nchr_option_print_trace/0\nchr_option_trace_interactive/0\nchr_option_optimization_level/1\nchr_option_show_stack/0\nchr_option_show_store/0\nchr_option_show_history/0\nchr_option_show_id/0\nchr_option_allow_deep_guards/0\nchr_next_state/1\nchr_spy_point/1\n```\n\n----------------------------------------\n\nTITLE: Testing the Profiler Tool in Logtalk\nDESCRIPTION: Demonstrates how to load the tester file for the profiler tool to run tests.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/devtools/profiler.rst#2025-04-06_snippet_1\n\nLANGUAGE: prolog\nCODE:\n```\n| ?- logtalk_load(profiler(tester)).\n```\n\n----------------------------------------\n\nTITLE: Querying Dynamic Decorated Object\nDESCRIPTION: These snippets show how to query the dynamically created and decorated circle object for its string representation and diameter.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/design_patterns/structural/decorator/NOTES.md#2025-04-06_snippet_5\n\nLANGUAGE: logtalk\nCODE:\n```\ncolored_shape(o1, blue)::string.\n```\n\nLANGUAGE: logtalk\nCODE:\n```\ncolored_shape(o1, blue)::diameter(Diameter).\n```\n\n----------------------------------------\n\nTITLE: Defining expand_term/2 Method Signature in Logtalk\nDESCRIPTION: Specifies the signature of the expand_term/2 method, which takes a Term and returns its Expansion. This method is commonly used to expand grammar rules into clauses and can be customized using term_expansion/2 hook predicates.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/refman/methods/expand_term_2.rst#2025-04-06_snippet_0\n\nLANGUAGE: Logtalk\nCODE:\n```\nexpand_term(Term, Expansion)\n```\n\n----------------------------------------\n\nTITLE: Using logtalk_tester with Custom Labels for Bug Reporting\nDESCRIPTION: This bash command shows how to use the logtalk_tester script with custom labels for bug reporting. It specifies both 'bug' and 'auto' labels for GitHub issues.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/devtools/issue_creator.rst#2025-04-06_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ logtalk_tester \\\n    -p gnu \\\n    -b github:bug,auto \\\n    -s \"/home/jdoe/foo/\" \\\n    -u https://github.com/jdoe/foo/tree/55aa900775befa135e0d5b48ea63098df8b97f5c/\n```\n\n----------------------------------------\n\nTITLE: Printing Logtalk, Prolog backend, and kernel versions\nDESCRIPTION: This snippet prints the versions of Logtalk, the Prolog backend, and the kernel if running as a notebook.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/localizations/NOTES.md#2025-04-06_snippet_0\n\nLANGUAGE: logtalk\nCODE:\n```\n%versions\n```\n\n----------------------------------------\n\nTITLE: Generating Allure Report with Backend and Version in Bash\nDESCRIPTION: This snippet demonstrates how to generate an Allure report using the logtalk_allure_report script in Bash, specifying the backend and version.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/devtools/lgtunit.rst#2025-04-06_snippet_63\n\nLANGUAGE: bash\nCODE:\n```\n$ logtalk_allure_report -- Backend='GNU Prolog' Version=1.5.0\n```\n\n----------------------------------------\n\nTITLE: Current Event Predicate Mode Declaration\nDESCRIPTION: Mode declaration showing that all arguments can be input or output with zero or more solutions possible through backtracking.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/refman/predicates/current_event_5.rst#2025-04-06_snippet_1\n\nLANGUAGE: prolog\nCODE:\n```\ncurrent_event(?event, ?term, ?term, ?term, ?object_identifier) - zero_or_more\n```\n\n----------------------------------------\n\nTITLE: Enabling Objects to Make Multi-threading Calls in Logtalk\nDESCRIPTION: The threaded directive is used to enable an object to make multi-threading calls in Logtalk.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/userman/threads.rst#2025-04-06_snippet_0\n\nLANGUAGE: Logtalk\nCODE:\n```\n:- threaded.\n```\n\n----------------------------------------\n\nTITLE: Rebuild Lexer Mappings\nDESCRIPTION: Command to rebuild Pygments lexer mappings after updating lexer files\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/coding/pygments/NOTES.md#2025-04-06_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ python _mapping.py\n```\n\n----------------------------------------\n\nTITLE: Referenced Logtalk Library Storage\nDESCRIPTION: Dynamic private predicate for storing referenced Logtalk libraries in the diagram.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/library_diagram_1.rst.txt#2025-04-06_snippet_5\n\nLANGUAGE: logtalk\nCODE:\n```\nreferenced_logtalk_library_(Library,Path)\n```\n\n----------------------------------------\n\nTITLE: Parameter Variable Access in Logtalk Object\nDESCRIPTION: Demonstrates accessing object parameters using parameter variables with special _Name_ syntax in a Logtalk object definition.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/userman/objects.rst#2025-04-06_snippet_10\n\nLANGUAGE: logtalk\nCODE:\n```\n:- object(foo(_Bar_, _Baz_, ...)).\n\n    ...\n    bar(_Bar_).\n\n    baz :-\n        baz(_Baz_),\n        ... .\n```\n\n----------------------------------------\n\nTITLE: Printing Version Information in Logtalk\nDESCRIPTION: Print Logtalk, Prolog backend, and kernel version information when running as a notebook.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/metainterpreters/NOTES.md#2025-04-06_snippet_0\n\nLANGUAGE: logtalk\nCODE:\n```\n%versions\n```\n\n----------------------------------------\n\nTITLE: Testing the term_io Library in Logtalk\nDESCRIPTION: This snippet shows how to load the tester.lgt file to test the predicates in the term_io library.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/library/term_io/NOTES.md#2025-04-06_snippet_1\n\nLANGUAGE: Logtalk\nCODE:\n```\n| ?- logtalk_load(term_io(tester)).\n```\n\n----------------------------------------\n\nTITLE: Git Archive Download Command\nDESCRIPTION: Shell commands for downloading and verifying pack archives using git archive and computing SHA256 checksums.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/tools/packs/NOTES.md#2025-04-06_snippet_18\n\nLANGUAGE: shell\nCODE:\n```\n$ git archive --output=foo-v1.0.1.zip --remote=git@gitlab.com:me/foo.git v1.0.1\n$ openssl sha256 foo-v1.0.1.zip\n```\n\n----------------------------------------\n\nTITLE: Resetting Random Seed in Logtalk\nDESCRIPTION: Resets the random generator seed to its default value. This predicate is useful when you need a repeatable sequence of random numbers.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/fast_random_0.rst.txt#2025-04-06_snippet_0\n\nLANGUAGE: Logtalk\nCODE:\n```\nreset_seed/0\n```\n\n----------------------------------------\n\nTITLE: Running Packs Tool Tests\nDESCRIPTION: Logtalk query to run the packs tool test suite.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/devtools/packs.rst#2025-04-06_snippet_6\n\nLANGUAGE: logtalk\nCODE:\n```\n| ?- logtalk_load(packs(tester)).\n```\n\n----------------------------------------\n\nTITLE: Using the dif Predicates with Implicit Message-Sending in Logtalk\nDESCRIPTION: Directive for importing the dif predicates into an object or category to allow implicit message-sending. This makes dif/1 and dif/2 available without explicit qualification.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/libraries/dif.rst.txt#2025-04-06_snippet_2\n\nLANGUAGE: logtalk\nCODE:\n```\n:- uses(dif, [\n    dif/2, dif/1\n]).\n```\n\n----------------------------------------\n\nTITLE: Syntax Highlighting with Tab Size Configuration\nDESCRIPTION: Command to generate HTML output with syntax highlighting and custom tab size settings\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/coding/pygments/NOTES.md#2025-04-06_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ pygmentize -F whitespace:tabsize=4 -O full,style=friendly -o source.html source.lgt\n```\n\n----------------------------------------\n\nTITLE: Overriding Module Meta-Predicate Specifications\nDESCRIPTION: Demonstrates how to override ambiguous meta-predicate directives from Prolog modules when used in Logtalk objects, providing clear meta-argument specifiers for the Logtalk compiler.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/userman/predicates.rst#2025-04-06_snippet_63\n\nLANGUAGE: prolog\nCODE:\n```\n:- module(foo, [bar/2]).\n\n:- meta_predicate(bar(*, :)).\n```\n\n----------------------------------------\n\nTITLE: Generating Allure Report with Project and Commit in Bash\nDESCRIPTION: This snippet shows how to generate an Allure report using the logtalk_allure_report script in Bash, specifying the project name and git commit hash.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/devtools/lgtunit.rst#2025-04-06_snippet_64\n\nLANGUAGE: bash\nCODE:\n```\n$ logtalk_allure_report -- Project='Deep Thought' Commit=`git rev-parse --short HEAD`\n```\n\n----------------------------------------\n\nTITLE: Checking Versions in Logtalk\nDESCRIPTION: Prints the versions of Logtalk, Prolog backend, and kernel being used.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/family_alt/NOTES.md#2025-04-06_snippet_0\n\nLANGUAGE: logtalk\nCODE:\n```\n%versions\n```\n\n----------------------------------------\n\nTITLE: Git Archive Download Commands\nDESCRIPTION: Commands for downloading pack archives using git archive and computing checksums\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/devtools/packs.rst.txt#2025-04-06_snippet_23\n\nLANGUAGE: shell\nCODE:\n```\n$ git archive --output=foo-v1.0.1.zip --remote=git@gitlab.com:me/foo.git v1.0.1\n$ openssl sha256 foo-v1.0.1.zip\n```\n\n----------------------------------------\n\nTITLE: Specifying Modes and Proofs for forward/1 in Logtalk\nDESCRIPTION: Specifies the mode and number of proofs for the forward/1 method. It takes a callable term as input and can succeed zero or more times.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/refman/methods/forward_1.rst.txt#2025-04-06_snippet_1\n\nLANGUAGE: Logtalk\nCODE:\n```\nforward(+callable) - zero_or_more\n```\n\n----------------------------------------\n\nTITLE: Specifying Mode and Number of Proofs for expand_goal/2 in Logtalk\nDESCRIPTION: Specifies the mode declaration and number of proofs for the expand_goal/2 method. It indicates that both arguments can be either input or output, and the method provides one proof.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/refman/methods/expand_goal_2.rst#2025-04-06_snippet_1\n\nLANGUAGE: Logtalk\nCODE:\n```\nexpand_goal(?term, ?term) - one\n```\n\n----------------------------------------\n\nTITLE: Querying Area of Static Circle Instance\nDESCRIPTION: This code queries the area of a static circle instance named 'c42'.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/classmethods/NOTES.md#2025-04-06_snippet_3\n\nLANGUAGE: logtalk\nCODE:\n```\nc42::area(Area).\n```\n\n----------------------------------------\n\nTITLE: Testing term expansion within public object\nDESCRIPTION: Demonstrates term expansion within the desc_public object using a test predicate.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/expansion/NOTES.md#2025-04-06_snippet_8\n\nLANGUAGE: logtalk\nCODE:\n```\ndesc_public::test_term_expansion(8, Term).\n```\n\n----------------------------------------\n\nTITLE: Loading Dictionary Unit in Logtalk\nDESCRIPTION: Loads the dictionary unit implementation using the Logtalk loader.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/units/NOTES.md#2025-04-06_snippet_1\n\nLANGUAGE: logtalk\nCODE:\n```\nlogtalk_load(units(loader)).\n```\n\n----------------------------------------\n\nTITLE: Generating Basic ULID as Atom\nDESCRIPTION: Example of generating a ULID in its default atom representation.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/libraries/ulid.rst.txt#2025-04-06_snippet_2\n\nLANGUAGE: logtalk\nCODE:\n```\n| ?- ulid::generate(ULID).\nULID = '01H0J31SYQXHJZWPRAKHQ6YVYH'\nyes\n```\n\n----------------------------------------\n\nTITLE: Checking Versions in Logtalk\nDESCRIPTION: Prints version information for Logtalk, Prolog backend, and kernel when running in notebook mode.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/metaclasses/NOTES.md#2025-04-06_snippet_0\n\nLANGUAGE: logtalk\nCODE:\n```\n%versions\n```\n\n----------------------------------------\n\nTITLE: Printing Logtalk, Prolog backend, and kernel versions\nDESCRIPTION: Prints the versions of Logtalk, the Prolog backend, and the kernel when running as a notebook.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/threads/checkpoint/NOTES.md#2025-04-06_snippet_0\n\nLANGUAGE: logtalk\nCODE:\n```\n%versions\n```\n\n----------------------------------------\n\nTITLE: Loading Java Library in Logtalk\nDESCRIPTION: Command to load all entities in the Java library for Logtalk. This loads the 'loader.lgt' file, which includes all necessary components.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/libraries/java.rst#2025-04-06_snippet_0\n\nLANGUAGE: prolog\nCODE:\n```\n| ?- logtalk_load(java(loader)).\n```\n\n----------------------------------------\n\nTITLE: Using endif/0 in Conditional Compilation Example in Logtalk\nDESCRIPTION: This example demonstrates how to use the endif/0 directive in conjunction with if/1 for conditional compilation. It conditionally initializes a 'Happy Towel Day' message if the current date is May 25th.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/refman/directives/endif_0.rst#2025-04-06_snippet_1\n\nLANGUAGE: Logtalk\nCODE:\n```\n:- if(date::today(_,5,25)).\n\n    :- initialization(write('Happy Towel Day!\\n')).\n\n:- endif.\n```\n\n----------------------------------------\n\nTITLE: Defining abolish_events/5 Predicate in Logtalk\nDESCRIPTION: Defines the abolish_events/5 predicate, which is used to abolish all matching events. It can remove 'before' and 'after' events based on the provided arguments.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/refman/predicates/abolish_events_5.rst#2025-04-06_snippet_0\n\nLANGUAGE: Logtalk\nCODE:\n```\nabolish_events(Event, Object, Message, Sender, Monitor)\n```\n\n----------------------------------------\n\nTITLE: Declaring Dynamic Predicate for Test Set Cache in Logtalk\nDESCRIPTION: Defines a dynamic predicate partial_/1 used as a cache to store the total number of tests per test set.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/tap_output_0.rst.txt#2025-04-06_snippet_1\n\nLANGUAGE: Logtalk\nCODE:\n```\npartial_/1\n```\n\n----------------------------------------\n\nTITLE: Displaying Help for ECLiPSe Logtalk Script (POSIX)\nDESCRIPTION: Command to show help and options for the POSIX bash shell script that creates ECLiPSe .eco files from Logtalk.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/scripts/embedding/eclipse/NOTES.md#2025-04-06_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\neclipse_logtalk_eco.sh -h\n```\n\n----------------------------------------\n\nTITLE: Declaring Source File Encoding in Logtalk\nDESCRIPTION: The encoding/1 directive is used to declare the text encoding of a Logtalk source file. It must be the first term in the file, placed on the first line. The directive requires a backend Prolog compiler that supports the chosen encoding.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/refman/directives/encoding_1.rst.txt#2025-04-06_snippet_0\n\nLANGUAGE: Logtalk\nCODE:\n```\nencoding(Encoding)\n```\n\n----------------------------------------\n\nTITLE: Mode Declaration for evaluation_error/1 in Logtalk\nDESCRIPTION: Defines the calling mode for the evaluation_error/1 method, indicating it expects a non-variable argument and always results in an error.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/refman/methods/evaluation_error_1.rst#2025-04-06_snippet_2\n\nLANGUAGE: logtalk\nCODE:\n```\nevaluation_error(@nonvar) - error\n```\n\n----------------------------------------\n\nTITLE: Retrieving Second Batch from Split Queue\nDESCRIPTION: Retrieves the second batch of messages from the split queue implementation.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/engines/pmq/NOTES.md#2025-04-06_snippet_11\n\nLANGUAGE: logtalk\nCODE:\n```\nsplit::messages(List).\n```\n\n----------------------------------------\n\nTITLE: Setting Logtalk Flag in Prolog\nDESCRIPTION: Sets global, default flag values in Logtalk. The predicate takes two arguments: Flag (an atom) and Value (a non-variable). It can be used to configure compiler behavior and other Logtalk settings.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/refman/predicates/set_logtalk_flag_2.rst#2025-04-06_snippet_0\n\nLANGUAGE: Prolog\nCODE:\n```\nset_logtalk_flag(Flag, Value)\n```\n\n----------------------------------------\n\nTITLE: Defining implements_protocol/2-3 Predicate in Logtalk\nDESCRIPTION: Defines the syntax and modes for the implements_protocol/2-3 predicate, which enumerates pairs of entities (objects or categories) that implement a protocol. It also specifies the relation scope.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/refman/predicates/implements_protocol_2_3.rst#2025-04-06_snippet_0\n\nLANGUAGE: Prolog\nCODE:\n```\nimplements_protocol(Object, Protocol)\nimplements_protocol(Category, Protocol)\n\nimplements_protocol(Object, Protocol, Scope)\nimplements_protocol(Category, Protocol, Scope)\n```\n\n----------------------------------------\n\nTITLE: Reified Solution Collection from Engine\nDESCRIPTION: Alternative pattern for collecting solutions using reified responses from an engine.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/userman/threads.rst#2025-04-06_snippet_11\n\nLANGUAGE: logtalk\nCODE:\n```\ncollect_all_reified(no, _, []).\ncollect_all_reified(the(Answer), Engine, [Answer| Answers]) :-\n    threaded_engine_next_reified(Engine, Reified),\n    collect_all_reified(Reified, Engine, Answers).\n```\n\n----------------------------------------\n\nTITLE: TTY Control Predicates\nDESCRIPTION: Terminal control predicates ttyput/1 and ttytab/1.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/RELEASE_NOTES.md#2025-04-06_snippet_47\n\nLANGUAGE: prolog\nCODE:\n```\nttyput/1, ttytab/1\n```\n\n----------------------------------------\n\nTITLE: Checking Suffix with Length in Logtalk\nDESCRIPTION: Checks if a list is a suffix of a given length of another list.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/listp_0.rst.txt#2025-04-06_snippet_28\n\nLANGUAGE: Logtalk\nCODE:\n```\nsuffix(Suffix,Length,List)\n```\n\n----------------------------------------\n\nTITLE: Setting Up a Basic Reflective System in Logtalk\nDESCRIPTION: Example showing how to set up a reflective system with the foundational objects: object, class, and abstract_class. The system provides a hierarchical structure with both instantiation and specialization relationships.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/userman/objects.rst#2025-04-06_snippet_8\n\nLANGUAGE: logtalk\nCODE:\n```\n% avoid the inevitable unknown entity warnings as in a\n% reflective system there will always be references to\n% an entity that will be defined after the reference\n\n:- set_logtalk_flag(unknown_entities, silent).\n\n\n% default root of the inheritance graph\n% providing predicates common to all objects\n\n:- object(object,\n    instantiates(class)).\n    ...\n:- end_object.\n\n\n% default metaclass for all classes providing\n% predicates common to all instantiable classes\n\n:- object(class,\n    instantiates(class),\n    specializes(abstract_class)).\n    ...\n:- end_object.\n\n\n% default metaclass for all abstract classes\n% providing predicates common to all classes\n\n:- object(abstract_class,\n    instantiates(class),\n    specializes(object)).\n    ...\n:- end_object.\n```\n\n----------------------------------------\n\nTITLE: Category Terms Syntax in Logtalk using BNF\nDESCRIPTION: Defines the elements that can appear within a category definition: directives, clauses, and grammar rules.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/refman/grammar.rst.txt#2025-04-06_snippet_22\n\nLANGUAGE: bnf\nCODE:\n```\ncategory_term ::=\n   category_directive\n   | clause\n   | grammar_rule\n```\n\n----------------------------------------\n\nTITLE: Reading a TSV File into a Dynamic Predicate in Logtalk\nDESCRIPTION: Example showing how to read a TSV file and assert its data using a user-defined dynamic predicate, skipping the header row.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/library/tsv/NOTES.md#2025-04-06_snippet_4\n\nLANGUAGE: Logtalk\nCODE:\n```\n| ?- tsv(skip)::read_file('test_files/data.tsv', user, p/3).\nyes\n\n| ?-  p(A,B,C).\n\nA = 'Paul', B = 23, C = '1115 W Franklin' ? ;\n...\n```\n\n----------------------------------------\n\nTITLE: Modes and Proofs for Message Sending in Logtalk\nDESCRIPTION: Specifies the modes and number of proofs for the message sending control construct. It shows that both object identifier and message must be instantiated.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/refman/control/send_to_object_2.rst.txt#2025-04-06_snippet_1\n\nLANGUAGE: Logtalk\nCODE:\n```\n+object_identifier::+callable - zero_or_more\n{+object_identifier}::+callable - zero_or_more\n```\n\n----------------------------------------\n\nTITLE: Stopping Debugger Trace Redirection in Logtalk\nDESCRIPTION: Stops redirecting debugger trace messages to a file. This predicate is deterministic and succeeds exactly once when called.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/dump_trace_0.rst.txt#2025-04-06_snippet_1\n\nLANGUAGE: logtalk\nCODE:\n```\nstop_redirect_to_file\n```\n\n----------------------------------------\n\nTITLE: Scanning a Library for Dead Code in Logtalk\nDESCRIPTION: This snippet demonstrates how to use the dead_code_scanner to scan a library named 'my_app' for dead code. It assumes the library has been loaded with the necessary flags set.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/devtools/dead_code_scanner.rst.txt#2025-04-06_snippet_3\n\nLANGUAGE: logtalk\nCODE:\n```\n| ?- dead_code_scanner::library(my_app).\n```\n\n----------------------------------------\n\nTITLE: Syntax Variants of coinductive/1 Directive in Logtalk\nDESCRIPTION: Shows the different syntax variants for declaring coinductive predicates, including single predicates, lists of predicates, and predicate templates. The directive supports both regular predicates (Name/Arity) and grammar rule non-terminals (Name//Arity).\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/refman/directives/coinductive_1.rst.txt#2025-04-06_snippet_0\n\nLANGUAGE: logtalk\nCODE:\n```\ncoinductive(Name/Arity)\ncoinductive((Name/Arity, ...))\ncoinductive([Name/Arity, ...])\n\ncoinductive(Name//Arity)\ncoinductive((Name//Arity, ...))\ncoinductive([Name//Arity, ...])\n\ncoinductive(Template)\ncoinductive((Template1, ...))\ncoinductive([Template1, ...])\n```\n\n----------------------------------------\n\nTITLE: Loading the Figures Example\nDESCRIPTION: Loads the figures example into the Logtalk environment.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/ncl/figures/NOTES.md#2025-04-06_snippet_1\n\nLANGUAGE: logtalk\nCODE:\n```\nlogtalk_load(figures(loader)).\n```\n\n----------------------------------------\n\nTITLE: Printing Logtalk, Prolog, and Kernel Versions in Logtalk\nDESCRIPTION: This snippet prints the versions of Logtalk, the Prolog backend, and the kernel if running as a notebook.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/haunted_wasteland/NOTES.md#2025-04-06_snippet_0\n\nLANGUAGE: logtalk\nCODE:\n```\n%versions\n```\n\n----------------------------------------\n\nTITLE: Message Prefix Stream Method Signature\nDESCRIPTION: Method signature showing the arguments for specifying message prefix and stream\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/refman/methods/message_prefix_stream_4.rst.txt#2025-04-06_snippet_0\n\nLANGUAGE: prolog\nCODE:\n```\nmessage_prefix_stream(Kind, Component, Prefix, Stream)\n```\n\n----------------------------------------\n\nTITLE: Checking Versions in Logtalk\nDESCRIPTION: Prints the versions of Logtalk, Prolog backend, and kernel\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/design_patterns/structural/composite/NOTES.md#2025-04-06_snippet_0\n\nLANGUAGE: logtalk\nCODE:\n```\n%versions\n```\n\n----------------------------------------\n\nTITLE: Loading Pattern Implementation\nDESCRIPTION: Loads the Prototype design pattern sample implementation from the design patterns directory\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/design_patterns/creational/prototype/NOTES.md#2025-04-06_snippet_1\n\nLANGUAGE: logtalk\nCODE:\n```\nlogtalk_load(design_patterns('creational/prototype/loader')).\n```\n\n----------------------------------------\n\nTITLE: Protected Category Import in Logtalk\nDESCRIPTION: Shows how to import a category with protected scope, making all public predicates protected.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/userman/categories.rst.txt#2025-04-06_snippet_19\n\nLANGUAGE: logtalk\nCODE:\n```\n:- object(Object,\n    imports(protected::Category)).\n    ...\n:- end_object.\n```\n\n----------------------------------------\n\nTITLE: Package Setup Predicate\nDESCRIPTION: Ensures required registry and packs directory structure exists while preserving existing registries and installed packs.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/packs_common_0.rst.txt#2025-04-06_snippet_0\n\nLANGUAGE: logtalk\nCODE:\n```\nsetup/0\n```\n\n----------------------------------------\n\nTITLE: Printing Logtalk, Prolog backend, and kernel versions\nDESCRIPTION: This snippet prints the versions of Logtalk, the Prolog backend, and the kernel if running as a notebook.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/books/NOTES.md#2025-04-06_snippet_0\n\nLANGUAGE: logtalk\nCODE:\n```\n%versions\n```\n\n----------------------------------------\n\nTITLE: Mode Declaration\nDESCRIPTION: Specifies the calling mode for the method, indicating it takes an atom as input and results in an error.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/refman/methods/representation_error_1.rst#2025-04-06_snippet_3\n\nLANGUAGE: prolog\nCODE:\n```\nrepresentation_error(+atom) - error\n```\n\n----------------------------------------\n\nTITLE: Defining RST Documentation Structure for Execution Context\nDESCRIPTION: RST (reStructuredText) code defining the documentation structure for Logtalk execution context methods, including a table of contents tree with links to specific method documentation files.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/refman/methods/context_methods.rst#2025-04-06_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. _context_methods:\n\nExecution context\n=================\n\n.. toctree::\n   :maxdepth: 1\n\n   context_1\n   parameter_2\n   self_1\n   sender_1\n   this_1\n```\n\n----------------------------------------\n\nTITLE: Specifying call/1-N Modes and Number of Proofs in Logtalk\nDESCRIPTION: Defines the operational modes for call/1-N, indicating argument types and determinism characteristics.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/refman/methods/call_N.rst.txt#2025-04-06_snippet_2\n\nLANGUAGE: logtalk\nCODE:\n```\ncall(+callable) - zero_or_more\ncall(+callable, ?term) - zero_or_more\ncall(+callable, ?term, ?term) - zero_or_more\n...\n```\n\n----------------------------------------\n\nTITLE: Goal Expansion Method Mode Declaration\nDESCRIPTION: Specifies the mode declaration for the method, indicating input/output parameters and number of solutions.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/refman/methods/goal_expansion_2.rst#2025-04-06_snippet_1\n\nLANGUAGE: logtalk\nCODE:\n```\ngoal_expansion(+callable, -callable) - zero_or_one\n```\n\n----------------------------------------\n\nTITLE: Printing Logtalk, Prolog, and Kernel Versions\nDESCRIPTION: Prints the versions of Logtalk, the Prolog backend, and the kernel if running as a notebook.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/self_vs_super/NOTES.md#2025-04-06_snippet_0\n\nLANGUAGE: logtalk\nCODE:\n```\n%versions\n```\n\n----------------------------------------\n\nTITLE: Creating Car Object\nDESCRIPTION: Dynamically creates a Packard 645 car object that extends the base car class.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/design_patterns/structural/proxy/NOTES.md#2025-04-06_snippet_3\n\nLANGUAGE: logtalk\nCODE:\n```\ncreate_object(packard_645, [extends(car)], [], []).\n```\n\n----------------------------------------\n\nTITLE: Testing Java Library in Logtalk\nDESCRIPTION: Command to load and run tests for the Java library predicates in Logtalk. This loads the 'tester.lgt' file, which contains the test suite.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/libraries/java.rst#2025-04-06_snippet_1\n\nLANGUAGE: prolog\nCODE:\n```\n| ?- logtalk_load(java(tester)).\n```\n\n----------------------------------------\n\nTITLE: Syntax Forms of multifile/1 Directive in Logtalk\nDESCRIPTION: Lists all the possible syntax forms for the multifile/1 directive in Logtalk. This includes variations for predicates and grammar rule non-terminals, with or without entity qualifiers.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/refman/directives/multifile_1.rst#2025-04-06_snippet_0\n\nLANGUAGE: logtalk\nCODE:\n```\nmultifile(Name/Arity)\nmultifile((Name/Arity, ...))\nmultifile([Name/Arity, ...])\n\nmultifile(Entity::Name/Arity)\nmultifile((Entity::Name/Arity, ...))\nmultifile([Entity::Name/Arity, ...])\n\nmultifile(Module:Name/Arity)\nmultifile((Module:Name/Arity, ...))\nmultifile([Module:Name/Arity, ...])\n\nmultifile(Name//Arity)\nmultifile((Name//Arity, ...))\nmultifile([Name//Arity, ...])\n\nmultifile(Entity::Name//Arity)\nmultifile((Entity::Name//Arity, ...))\nmultifile([Entity::Name//Arity, ...])\n\nmultifile(Module:Name//Arity)\nmultifile((Module:Name//Arity, ...))\nmultifile([Module:Name//Arity, ...])\n```\n\n----------------------------------------\n\nTITLE: Loading Ports Profiler in Logtalk\nDESCRIPTION: Basic command to load the ports_profiler tool into a Logtalk session.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/devtools/ports_profiler.rst#2025-04-06_snippet_0\n\nLANGUAGE: prolog\nCODE:\n```\n| ?- logtalk_load(ports_profiler(loader)).\n```\n\n----------------------------------------\n\nTITLE: Calculating Walker Movements with DCG in Logtalk\nDESCRIPTION: Uses the walker object to calculate the ending position after a series of movements using DCG rules.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/dcgs/NOTES.md#2025-04-06_snippet_10\n\nLANGUAGE: logtalk\nCODE:\n```\nwalker::walk([n(5), e(4), s(2), nw(8), s(5), se(1), n(4)], Ending).\n```\n\n----------------------------------------\n\nTITLE: Testing ToyCHR Library in Logtalk\nDESCRIPTION: Command to load and run the test suite for the ToyCHR port using the tester.lgt file.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/ports/toychr.rst#2025-04-06_snippet_2\n\nLANGUAGE: prolog\nCODE:\n```\n| ?- logtalk_load(toychr(tester)).\n```\n\n----------------------------------------\n\nTITLE: Mode and Proof Declaration for ignore/1 in Logtalk\nDESCRIPTION: Specifies the expected mode of operation for ignore/1, indicating it requires a callable term as input and provides one proof.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/refman/methods/ignore_1.rst#2025-04-06_snippet_2\n\nLANGUAGE: logtalk\nCODE:\n```\nignore(+callable) - one\n```\n\n----------------------------------------\n\nTITLE: Creating Predicate Alias Shorthands in Logtalk\nDESCRIPTION: Illustrates how to define a predicate alias that also serves as a shorthand, simplifying the calling of module predicates with partially instantiated arguments.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/refman/directives/use_module_2.rst#2025-04-06_snippet_3\n\nLANGUAGE: Logtalk\nCODE:\n```\n:- use_module(pairs, [\n    map_list_to_pairs(length, Lists, Pairs) as length_pairs(Lists, Pairs)\n]).\n```\n\n----------------------------------------\n\nTITLE: Defining ask_question/5 Method Signature in Logtalk\nDESCRIPTION: Defines the signature of the ask_question/5 built-in method, which takes arguments for the question kind, component, question term, check closure, and answer variable.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/refman/methods/ask_question_5.rst.txt#2025-04-06_snippet_0\n\nLANGUAGE: Logtalk\nCODE:\n```\nask_question(Kind, Component, Question, Check, Answer)\n```\n\n----------------------------------------\n\nTITLE: Defining Meta-predicate Template for phrase/2 in Logtalk\nDESCRIPTION: Specifies the meta-predicate template for the phrase/2 method, indicating argument types.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/refman/methods/phrase_2.rst#2025-04-06_snippet_1\n\nLANGUAGE: Logtalk\nCODE:\n```\nphrase(2, *)\n```\n\n----------------------------------------\n\nTITLE: Printing Version Information in Logtalk\nDESCRIPTION: Displays the Logtalk version, Prolog backend, and kernel version information when running in a Jupyter notebook environment.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/cascade/NOTES.md#2025-04-06_snippet_2\n\nLANGUAGE: logtalk\nCODE:\n```\n%versions\n```\n\n----------------------------------------\n\nTITLE: Installing Tool Dependencies on macOS with Homebrew\nDESCRIPTION: Terminal commands for installing third-party dependencies required by various Logtalk tools using the Homebrew package manager on macOS.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/tools/NOTES.md#2025-04-06_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n$ brew install d2 graphviz\n$ brew install texinfo pandoc\n$ brew install libxslt fop texlive\n$ brew install allure gsed\n$ brew install coreutils libarchive gnupg2 git curl wget direnv\n$ brew install gh glab\n```\n\n----------------------------------------\n\nTITLE: Skipping Tests with Note Explanation in Logtalk Unit Tests\nDESCRIPTION: Demonstrates skipping a test with the test/3 dialect while providing a note that explains why the test is being skipped.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/devtools/lgtunit.rst#2025-04-06_snippet_23\n\nLANGUAGE: logtalk\nCODE:\n```\n   - test(xyz_reset, true, [note('Feature xyz reset not yet implemented')]) :-\n       ...\n```\n\n----------------------------------------\n\nTITLE: Defining the findall/3 Method Signature in Logtalk\nDESCRIPTION: The basic syntax of the findall/3 built-in method that collects all solutions for a goal into a list. It succeeds with an empty list when the goal has no solutions.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/refman/methods/findall_3.rst#2025-04-06_snippet_0\n\nLANGUAGE: logtalk\nCODE:\n```\nfindall(Template, Goal, List)\n```\n\n----------------------------------------\n\nTITLE: Application Loader Configuration\nDESCRIPTION: Example of an application loader file that loads required packs.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/devtools/packs.rst#2025-04-06_snippet_12\n\nLANGUAGE: logtalk\nCODE:\n```\n:- initialization((\n    % load required packs\n    logtalk_load(foo(loader)),\n    logtalk_load(bar(loader)),\n    ...\n    % load application files\n    ...\n)).\n```\n\n----------------------------------------\n\nTITLE: Using abolish_protocol/1 Predicate in Prolog\nDESCRIPTION: Demonstrates how to use the abolish_protocol/1 predicate to abolish a protocol named 'listp'. This example shows the predicate being called in a Prolog query.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/refman/predicates/abolish_protocol_1.rst#2025-04-06_snippet_1\n\nLANGUAGE: Prolog\nCODE:\n```\n| ?- abolish_protocol(listp).\n```\n\n----------------------------------------\n\nTITLE: Syntax Patterns for meta_non_terminal/1 Directive in Logtalk\nDESCRIPTION: Shows the various syntax forms for the meta_non_terminal/1 directive, including entity-qualified and module-qualified variants with single templates, conjunctions, and lists.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/refman/directives/meta_non_terminal_1.rst#2025-04-06_snippet_0\n\nLANGUAGE: logtalk\nCODE:\n```\nmeta_non_terminal(Template)\nmeta_non_terminal((Template, ...))\nmeta_non_terminal([Template, ...])\n\nmeta_non_terminal(Entity::Template)\nmeta_non_terminal((Entity::Template, ...))\nmeta_non_terminal([Entity::Template, ...])\n\nmeta_non_terminal(Module:Template)\nmeta_non_terminal((Module:Template, ...))\nmeta_non_terminal([Module:Template, ...])\n```\n\n----------------------------------------\n\nTITLE: Attempting to Uninstall a Pinned Pack in Logtalk\nDESCRIPTION: Example showing the error message when attempting to uninstall a pinned pack.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/tools/packs/NOTES.md#2025-04-06_snippet_33\n\nLANGUAGE: prolog\nCODE:\n```\n| ?- packs::uninstall(bar).\n```\n\n----------------------------------------\n\nTITLE: Adding Element to Queue Front in Logtalk\nDESCRIPTION: Predicate to add a new element at the front of the queue. It takes an element and a queue as input, and returns the new queue.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/queuep_0.rst.txt#2025-04-06_snippet_4\n\nLANGUAGE: Logtalk\nCODE:\n```\njump(Element,Queue,NewQueue)\n```\n\n----------------------------------------\n\nTITLE: Implementing Protocols in a Logtalk Category\nDESCRIPTION: Shows how to define a Logtalk category that implements one or more protocols.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/userman/categories.rst#2025-04-06_snippet_1\n\nLANGUAGE: Logtalk\nCODE:\n```\n:- category(Category,\n    implements([Protocol1, Protocol2, ...])).\n    ...\n:- end_category.\n```\n\n----------------------------------------\n\nTITLE: Loading Plain Prolog Wrapped in Logtalk Object\nDESCRIPTION: Command to load a Logtalk object containing plain Prolog code with source data enabled for metrics analysis. This is used after defining an object wrapper for plain Prolog code.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/tools/code_metrics/NOTES.md#2025-04-06_snippet_4\n\nLANGUAGE: Prolog\nCODE:\n```\n| ?- logtalk_load(code, [source_data(on)]).\n```\n\n----------------------------------------\n\nTITLE: Testing Reader Library in Logtalk\nDESCRIPTION: Shows the command to load the tester.lgt file for testing the reader library predicates.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/libraries/reader.rst.txt#2025-04-06_snippet_1\n\nLANGUAGE: Logtalk\nCODE:\n```\n| ?- logtalk_load(reader(tester)).\n```\n\n----------------------------------------\n\nTITLE: Defining Format Object Predicate in Logtalk\nDESCRIPTION: Predicate that returns the identifier of the object implementing the current graph language. Used for diagram formatting.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/diagram_1.rst.txt#2025-04-06_snippet_4\n\nLANGUAGE: logtalk\nCODE:\n```\nformat_object(-object_identifier)\n```\n\n----------------------------------------\n\nTITLE: Term Difference Constraint in Logtalk\nDESCRIPTION: Sets a constraint that evaluates to true if and only if two given terms are different. Takes two terms as input and provides zero or one solutions.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/dif_0.rst.txt#2025-04-06_snippet_0\n\nLANGUAGE: logtalk\nCODE:\n```\ndif(Term1,Term2)\n```\n\n----------------------------------------\n\nTITLE: Setting Up Flags for Dead Code Scanning in Logtalk\nDESCRIPTION: This snippet shows how to set the necessary Logtalk flags (source_data and optimize) for effective dead code scanning. These flags should be set before loading the code to be analyzed.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/devtools/dead_code_scanner.rst.txt#2025-04-06_snippet_2\n\nLANGUAGE: logtalk\nCODE:\n```\n| ?- set_logtalk_flag(source_data, on),\n     set_logtalk_flag(optimize, on).\n```\n\n----------------------------------------\n\nTITLE: Merging User Options with Defaults in Logtalk\nDESCRIPTION: The merge_options/2 predicate combines user-provided options with default options, applying any necessary fixes via fix_options/2. The caller is responsible for ensuring user options are valid if required.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/options_protocol_0.rst.txt#2025-04-06_snippet_8\n\nLANGUAGE: prolog\nCODE:\n```\nmerge_options(UserOptions,Options)\n```\n\n----------------------------------------\n\nTITLE: Loading the Multiton Design Pattern Sample\nDESCRIPTION: Loads the implementation of the Multiton design pattern from the Logtalk design patterns library.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/design_patterns/creational/multiton/NOTES.md#2025-04-06_snippet_1\n\nLANGUAGE: logtalk\nCODE:\n```\nlogtalk_load(design_patterns('creational/multiton/loader')).\n```\n\n----------------------------------------\n\nTITLE: Running the Trealla Prolog script on POSIX systems\nDESCRIPTION: Command to display help information for the Bash shell script that creates Trealla Prolog files from Logtalk core files on POSIX systems.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/scripts/embedding/trealla/NOTES.md#2025-04-06_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ntrealla_logtalk_pl.sh -h\n```\n\n----------------------------------------\n\nTITLE: Defining Dynamic Predicate for Invocation Number in Logtalk\nDESCRIPTION: Defines a dynamic predicate 'invocation_number_/1' that represents the current call stack invocation number. It takes the number as an argument.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/debugger_0.rst.txt#2025-04-06_snippet_10\n\nLANGUAGE: Logtalk\nCODE:\n```\ninvocation_number_/1\n```\n\n----------------------------------------\n\nTITLE: Checking Versions in Logtalk\nDESCRIPTION: Command to print Logtalk, Prolog backend, and kernel versions when running in notebook mode\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/puzzles/NOTES.md#2025-04-06_snippet_0\n\nLANGUAGE: logtalk\nCODE:\n```\n%versions\n```\n\n----------------------------------------\n\nTITLE: Using Parameter Variables in Logtalk Parametric Object\nDESCRIPTION: Shows an alternative implementation of the 'box' object using parameter variables instead of explicit parameter/2 calls.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/refman/methods/parameter_2.rst.txt#2025-04-06_snippet_3\n\nLANGUAGE: Logtalk\nCODE:\n```\n:- object(box(_Color_, _Weight_)).\n\n    ...\n\n    color(_Color_).\n\n    heavy :-\n        _Weight_ > 10.\n\n    ...\n```\n\n----------------------------------------\n\nTITLE: Defining Make Target Action Predicate\nDESCRIPTION: Signature and type definition for the logtalk_make_target_action predicate that takes a Target argument.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/refman/predicates/logtalk_make_target_action_1.rst#2025-04-06_snippet_0\n\nLANGUAGE: prolog\nCODE:\n```\nlogtalk_make_target_action(Target)\n```\n\n----------------------------------------\n\nTITLE: Disabling Specific Debug Message Groups in Logtalk\nDESCRIPTION: Predicate for disabling debug(Group) messages for a specific component and group combination. This predicate has static compilation flag and accepts component and group terms as input.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/debug_messages_0.rst.txt#2025-04-06_snippet_4\n\nLANGUAGE: logtalk\nCODE:\n```\ndisable/2\n```\n\n----------------------------------------\n\nTITLE: Mode and Proof Declaration\nDESCRIPTION: Specification of argument modes and number of possible proofs for the predicate.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/refman/methods/forall_2.rst#2025-04-06_snippet_2\n\nLANGUAGE: logtalk\nCODE:\n```\nforall(@callable, @callable) - zero_or_one\n```\n\n----------------------------------------\n\nTITLE: Coinductive Success Hook Method Signatures\nDESCRIPTION: Defines the signatures for the coinductive success hook predicates that are called when coinductive predicates succeed.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/refman/methods/coinductive_success_hook_1_2.rst#2025-04-06_snippet_0\n\nLANGUAGE: logtalk\nCODE:\n```\ncoinductive_success_hook(Head, Hypothesis)\ncoinductive_success_hook(Head)\n```\n\n----------------------------------------\n\nTITLE: Enumerating Clause Location Data in Logtalk\nDESCRIPTION: Enumerates, by backtracking, all collected profiled clause location data. This predicate is compiled with the 'static' flag and can provide zero or more proofs for given entity, functor, arity, clause number, file, and begin line.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/ports_profiler_0.rst.txt#2025-04-06_snippet_8\n\nLANGUAGE: Logtalk\nCODE:\n```\nclause_location(Entity,Functor,Arity,ClauseNumber,File,BeginLine)\n```\n\n----------------------------------------\n\nTITLE: Empty Map Check in Logtalk\nDESCRIPTION: Private predicate that succeeds if the given Map is null. Used for handling entity mappings in the XML parser.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/xml_0.rst.txt#2025-04-06_snippet_5\n\nLANGUAGE: Logtalk\nCODE:\n```\nempty_map(Map)\n```\n\n----------------------------------------\n\nTITLE: Print Version Information\nDESCRIPTION: Prints Logtalk, Prolog backend, and kernel versions when running as a notebook.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/self_messages/NOTES.md#2025-04-06_snippet_0\n\nLANGUAGE: logtalk\nCODE:\n```\n%versions\n```\n\n----------------------------------------\n\nTITLE: Binary Output Assertion with Alias\nDESCRIPTION: Creates an assertion to verify binary contents of temporary file referenced by alias.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/lgtunit_0.rst.txt#2025-04-06_snippet_60\n\nLANGUAGE: logtalk\nCODE:\n```\nbinary_output_assertion(Alias,Bytes,Assertion)\n```\n\n----------------------------------------\n\nTITLE: Domain Constraint with Multiple Values Intersection\nDESCRIPTION: Example of domain constraints with integers where the intersection of domains results in multiple possible values, showing how constraints are represented.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/attvars/NOTES.md#2025-04-06_snippet_4\n\nLANGUAGE: logtalk\nCODE:\n```\ndomain(integer)::domain(X, [1,2,3]), domain(integer)::domain(X, [1,3]).\n```\n\n----------------------------------------\n\nTITLE: Retrieving All Default Options in Logtalk\nDESCRIPTION: The default_options/1 predicate returns a complete list of all default options at once, rather than requiring backtracking to collect them all.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/options_protocol_0.rst.txt#2025-04-06_snippet_5\n\nLANGUAGE: prolog\nCODE:\n```\ndefault_options(Options)\n```\n\n----------------------------------------\n\nTITLE: Testing Gensym Library in Logtalk\nDESCRIPTION: Command to load and run tests for the gensym library using the tester.lgt file.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/libraries/gensym.rst.txt#2025-04-06_snippet_1\n\nLANGUAGE: prolog\nCODE:\n```\n| ?- logtalk_load(gensym(tester)).\n```\n\n----------------------------------------\n\nTITLE: Predicate Definition - logtalk_compile/2\nDESCRIPTION: Core predicate signature showing the two supported formats - for single file and multiple files compilation with compiler flags.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/refman/predicates/logtalk_compile_2.rst.txt#2025-04-06_snippet_0\n\nLANGUAGE: prolog\nCODE:\n```\nlogtalk_compile(File, Flags)\nlogtalk_compile(Files, Flags)\n```\n\n----------------------------------------\n\nTITLE: Displaying Execution Context in Object Hierarchy\nDESCRIPTION: Shows the execution context using a method defined in the hierarchy root and specialized in each descendant using super calls.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/sicstus/NOTES.md#2025-04-06_snippet_7\n\nLANGUAGE: logtalk\nCODE:\n```\nred_circle(3)::context.\n```\n\n----------------------------------------\n\nTITLE: Loading the Haunted Wasteland Solution in Logtalk\nDESCRIPTION: This code loads the Logtalk implementation for the Haunted Wasteland problem.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/haunted_wasteland/NOTES.md#2025-04-06_snippet_1\n\nLANGUAGE: logtalk\nCODE:\n```\nlogtalk_load(haunted_wasteland(loader)).\n```\n\n----------------------------------------\n\nTITLE: Writing Expanded Terms to File in Logtalk\nDESCRIPTION: Demonstrates how to use write_to_file_hook in combination with a custom expansion hook to write expanded terms to a file.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/library/hook_objects/NOTES.md#2025-04-06_snippet_7\n\nLANGUAGE: Logtalk\nCODE:\n```\n| ?- logtalk_compile(\n         'input.pl',\n         [hook(hook_pipeline([\n             expansions,\n             write_to_file_hook('output.pl')\n         ]))]\n     ).\n```\n\n----------------------------------------\n\nTITLE: Defining Not-Provable Meta-Predicate in Logtalk\nDESCRIPTION: Syntax for the (\\+)/1 built-in method in Logtalk. It takes a Goal as an argument and is true if call(Goal) is false. This method is declared as private and cannot be used as a message to an object.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/refman/methods/not_1.rst.txt#2025-04-06_snippet_0\n\nLANGUAGE: Logtalk\nCODE:\n```\n\\+ Goal\n```\n\n----------------------------------------\n\nTITLE: JTable Display Example\nDESCRIPTION: Shows JTable component integration, skipped if running in Jupyter\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/jpl/NOTES.md#2025-04-06_snippet_7\n\nLANGUAGE: logtalk\nCODE:\n```\n(current_object(jupyter) -> true; flags_table::display).\n```\n\n----------------------------------------\n\nTITLE: Message Prefix Stream Method Signature\nDESCRIPTION: Method signature showing the parameters for specifying message prefix and stream for a given kind and component.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/refman/methods/message_prefix_stream_4.rst#2025-04-06_snippet_0\n\nLANGUAGE: prolog\nCODE:\n```\nmessage_prefix_stream(Kind, Component, Prefix, Stream)\n```\n\n----------------------------------------\n\nTITLE: GPG Encrypted Package Installation\nDESCRIPTION: Installing a GPG encrypted package using a passphrase\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/devtools/packs.rst#2025-04-06_snippet_27\n\nLANGUAGE: logtalk\nCODE:\n```\n| ?- packs::install(reg, bar, 1:1:2, [gpg('--batch --passphrase test123')]).\n```\n\n----------------------------------------\n\nTITLE: reST Documentation Structure for Logtalk Linter\nDESCRIPTION: reStructuredText documentation structure defining the linter section and including a toctree reference to linter hook predicate documentation.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/refman/predicates/linter_predicates.rst.txt#2025-04-06_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. _linter_predicates:\n\nLinter\n======\n\n.. toctree::\n   :maxdepth: 1\n\n   logtalk_linter_hook_7\n```\n\n----------------------------------------\n\nTITLE: Defining Make Target Action Predicate\nDESCRIPTION: Signature and type definition for the logtalk_make_target_action predicate that takes a Target argument.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/refman/predicates/logtalk_make_target_action_1.rst#2025-04-06_snippet_0\n\nLANGUAGE: prolog\nCODE:\n```\nlogtalk_make_target_action(Target)\n```\n\n----------------------------------------\n\nTITLE: GPG Archive Signing Commands\nDESCRIPTION: Shell commands for creating detached signatures for package archives using GPG, demonstrating both .asc and .sig file creation.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/tools/packs/NOTES.md#2025-04-06_snippet_16\n\nLANGUAGE: shell\nCODE:\n```\n$ gpg --armor --detach-sign v1.0.0.tar.gz\n$ gpg --detach-sign v1.0.0.tar.gz\n```\n\n----------------------------------------\n\nTITLE: Version Number Header\nDESCRIPTION: Version header showing release version 2.35.0 date\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/RELEASE_NOTES.md#2025-04-06_snippet_140\n\nLANGUAGE: text\nCODE:\n```\n2.35.0 - January 16, 2009\n=========================\n```\n\n----------------------------------------\n\nTITLE: Adding Multiple Elements to Queue Front in Logtalk\nDESCRIPTION: Predicate to add multiple new elements at the front of the queue. It takes a list of elements and a queue as input, and returns the new queue.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/queuep_0.rst.txt#2025-04-06_snippet_5\n\nLANGUAGE: Logtalk\nCODE:\n```\njump_all(Elements,Queue,NewQueue)\n```\n\n----------------------------------------\n\nTITLE: Defining a Bird Object with Complement Support\nDESCRIPTION: Creates an object with the complements flag set to allow, making it possible for categories to complement (patch) this object.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/userman/categories.rst.txt#2025-04-06_snippet_6\n\nLANGUAGE: logtalk\nCODE:\n```\n:- object(bird).\n\n    :- set_logtalk_flag(complements, allow).\n\n    :- public(make_sound/0).\n    make_sound :-\n        write('Chirp, chirp!'), nl.\n\n:- end_object.\n```\n\n----------------------------------------\n\nTITLE: Testing Types Library in Logtalk\nDESCRIPTION: Command to load and run the types library test suite.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/library/types/NOTES.md#2025-04-06_snippet_1\n\nLANGUAGE: logtalk\nCODE:\n```\n| ?- logtalk_load(types(tester)).\n```\n\n----------------------------------------\n\nTITLE: Loading Logtalk Dictionaries Library\nDESCRIPTION: Demonstrates how to load all entities in the dictionaries library using the loader.lgt file.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/libraries/dictionaries.rst.txt#2025-04-06_snippet_0\n\nLANGUAGE: prolog\nCODE:\n```\n| ?- logtalk_load(dictionaries(loader)).\n```\n\n----------------------------------------\n\nTITLE: Defining Message Operators in Logtalk\nDESCRIPTION: Operator declarations for message-sending control constructs in Logtalk, defining the :: and ^^ operators used for object communication.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/userman/messages.rst.txt#2025-04-06_snippet_0\n\nLANGUAGE: logtalk\nCODE:\n```\n:- op(600, xfy, ::).\n:- op(600,  fy, ::).\n:- op(600,  fy, ^^).\n```\n\n----------------------------------------\n\nTITLE: Predicate Mode Declaration for current_logtalk_flag/2\nDESCRIPTION: This shows the mode declaration for current_logtalk_flag/2, indicating that both arguments can be either input (bound) or output (variable) parameters, and that the predicate can produce zero or more solutions through backtracking.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/refman/predicates/current_logtalk_flag_2.rst.txt#2025-04-06_snippet_1\n\nLANGUAGE: prolog\nCODE:\n```\ncurrent_logtalk_flag(?atom, ?atom) - zero_or_more\n```\n\n----------------------------------------\n\nTITLE: Installing Set-PsEnv Module from PowerShell Gallery\nDESCRIPTION: PowerShell command to install the Set-PsEnv module, which is required for virtual environments on Windows systems.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/devtools/packs.rst.txt#2025-04-06_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nPS> Install-Module -Name Set-PsEnv\n```\n\n----------------------------------------\n\nTITLE: Suppressing Assertions in Production Code\nDESCRIPTION: Command to load a source file with the assertions(production) hook, which suppresses all assertion calls for production use, improving performance.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/devtools/assertions.rst.txt#2025-04-06_snippet_6\n\nLANGUAGE: prolog\nCODE:\n```\nlogtalk_load(source, [hook(assertions(production))])\n```\n\n----------------------------------------\n\nTITLE: Testing OS Library in Logtalk\nDESCRIPTION: Command to load and run tests for the OS library predicates using the tester.lgt file\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/libraries/os.rst.txt#2025-04-06_snippet_1\n\nLANGUAGE: prolog\nCODE:\n```\n| ?- logtalk_load(os(tester)).\n```\n\n----------------------------------------\n\nTITLE: Specifying Modes and Proofs for current_object/1 in Prolog\nDESCRIPTION: Defines the mode and number of proofs for the current_object/1 predicate. It accepts an object identifier as input and can return zero or more results through backtracking.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/refman/predicates/current_object_1.rst.txt#2025-04-06_snippet_1\n\nLANGUAGE: prolog\nCODE:\n```\ncurrent_object(?object_identifier) - zero_or_more\n```\n\n----------------------------------------\n\nTITLE: Updating logtalk_load_context/2 predicate in Logtalk\nDESCRIPTION: Added a 'source' key to the logtalk_load_context/2 built-in predicate for accessing the absolute path to the source file under compilation.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/RELEASE_NOTES.md#2025-04-06_snippet_121\n\nLANGUAGE: Logtalk\nCODE:\n```\n* ADDED: A `source` key to the `logtalk_load_context/2` built-in predicate\nfor accessing the absolute path to the source file under compilation.\n```\n\n----------------------------------------\n\nTITLE: Checking Logtalk and Prolog Versions\nDESCRIPTION: Command to display Logtalk, Prolog backend, and kernel versions when running as a notebook.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/pengines/NOTES.md#2025-04-06_snippet_1\n\nLANGUAGE: logtalk\nCODE:\n```\n%versions\n```\n\n----------------------------------------\n\nTITLE: Defining Temporary File Path Predicate in Logtalk\nDESCRIPTION: Defines a private predicate temporary_file_/1 for generating a Logtalk session and term_io specific temporary file path. It is declared as dynamic and takes an atom as an output argument.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/term_io_0.rst.txt#2025-04-06_snippet_0\n\nLANGUAGE: Logtalk\nCODE:\n```\ntemporary_file_/1\n```\n\n----------------------------------------\n\nTITLE: Meta-predicate Template for call/1-N in Logtalk\nDESCRIPTION: Defines the meta-predicate templates for call/1-N, showing how the first argument is a goal or closure with various arities.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/refman/methods/call_N.rst#2025-04-06_snippet_1\n\nLANGUAGE: logtalk\nCODE:\n```\ncall(0)\ncall(1, *)\ncall(2, *, *)\n...\n```\n\n----------------------------------------\n\nTITLE: Merging User and Default Options in Logtalk\nDESCRIPTION: Protected predicate that combines user-provided options with default settings to produce the final option set used for wrapper generation.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/wrapper_0.rst.txt#2025-04-06_snippet_14\n\nLANGUAGE: Logtalk\nCODE:\n```\nmerge_options/2\n```\n\n----------------------------------------\n\nTITLE: Generating Subsequences in Logtalk\nDESCRIPTION: Generates subsequences from a list, preserving element order.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/listp_0.rst.txt#2025-04-06_snippet_23\n\nLANGUAGE: Logtalk\nCODE:\n```\nsubsequence(List,Subsequence,Remaining)\n```\n\n----------------------------------------\n\nTITLE: Checking Versions in Logtalk\nDESCRIPTION: Prints the versions of Logtalk, Prolog backend, and kernel when running in a notebook environment.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/ack/NOTES.md#2025-04-06_snippet_0\n\nLANGUAGE: logtalk\nCODE:\n```\n%versions\n```\n\n----------------------------------------\n\nTITLE: Generating ULID as Character Codes\nDESCRIPTION: Example of generating a ULID using character codes representation.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/library/ulid/NOTES.md#2025-04-06_snippet_4\n\nLANGUAGE: prolog\nCODE:\n```\n| ?- ulid(codes)::generate(ULID).\nULID = [48,49,72,48,74,51,52,66,54,48,55,57,54,49,67,82,70,65,67,51,67,67,86,82,48,66]\nyes\n```\n\n----------------------------------------\n\nTITLE: Defining Table of Contents in reStructuredText for Logtalk Handbook\nDESCRIPTION: This snippet defines the table of contents for the Logtalk Handbook using reStructuredText syntax. It specifies a maximum depth of 3 levels and includes various sections of the handbook.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/index_latexpdf.rst#2025-04-06_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. toctree::\n   :maxdepth: 3\n   :caption: Contents\n\n   userman/index\n   refman/index\n   tutorial/index\n   faq/index\n   devtools/index\n   libraries/index\n   ports/index\n   contributions/index\n   glossary\n   bibliography\n```\n\n----------------------------------------\n\nTITLE: Defining Registry Description in Logtalk\nDESCRIPTION: Specifies the registry description predicate. It should return a one-line description as an atom.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/registry_protocol_0.rst.txt#2025-04-06_snippet_1\n\nLANGUAGE: Logtalk\nCODE:\n```\ndescription(Description)\n```\n\n----------------------------------------\n\nTITLE: Sublime Text Installation Paths\nDESCRIPTION: Directory paths for installing Logtalk package files in Sublime Text across different operating systems.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/coding/sublimetext/NOTES.md#2025-04-06_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nmacOS:\n\t~/Library/Application Support/Sublime Text/Packages/Logtalk/\nLinux:\n\t~/.config/sublime-text/Packages/Logtalk\nWindows:\n\t%APPDATA%\\Sublime Text\\Packages\\Logtalk\n```\n\n----------------------------------------\n\nTITLE: Loading the EDCG Example\nDESCRIPTION: Loads the EDCG example files using the Logtalk loader predicate.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/edcgs/NOTES.md#2025-04-06_snippet_1\n\nLANGUAGE: logtalk\nCODE:\n```\nlogtalk_load(edcgs(loader)).\n```\n\n----------------------------------------\n\nTITLE: Restructured Text Table of Contents for Control Constructs\nDESCRIPTION: A toctree directive that organizes documentation sections for different control constructs in Logtalk.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/refman/control/index.rst.txt#2025-04-06_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. toctree::\n   :maxdepth: 2\n\n   message_sending\n   message_delegation\n   super_calls\n   call_in_this\n   external_calls\n   context_switching_calls\n```\n\n----------------------------------------\n\nTITLE: Loading the People Example\nDESCRIPTION: Loads the 'people' example into the Logtalk environment.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/people/NOTES.md#2025-04-06_snippet_1\n\nLANGUAGE: logtalk\nCODE:\n```\nlogtalk_load(people(loader)).\n```\n\n----------------------------------------\n\nTITLE: Defining threaded_cancel/1 Predicate Signature in Logtalk\nDESCRIPTION: Specifies the signature of the threaded_cancel/1 predicate, which takes a Tag argument to cancel a tagged threaded call. The predicate succeeds if there's no asynchronous call with the given tag, assuming it has already terminated or been canceled.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/refman/predicates/threaded_cancel_1.rst.txt#2025-04-06_snippet_0\n\nLANGUAGE: Prolog\nCODE:\n```\nthreaded_cancel(Tag)\n```\n\n----------------------------------------\n\nTITLE: Example of Code Triggering Consistency Errors in Logtalk\nDESCRIPTION: Shows two examples that would trigger consistency errors: using a predicate alias with different arity, and using a meta-predicate with inconsistent closure specification.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/refman/methods/consistency_error_3.rst#2025-04-06_snippet_3\n\nLANGUAGE: logtalk\nCODE:\n```\n% code that will trigger consistency errors when compiled:\n\n% predicates (and non-terminals) aliases must have the same\n% arity as the original predicates (and non-terminals)\n:- uses(list, [\n    member/2 as in/1\n]).\n\n% meta-predicate templates should be consistent with how closures\n% are used regarding the number of additional arguments\n:- public(p/2).\n:- meta_predicate(p(1, *)).\n\np(G, A) :-\n    call(G, A, 2).\n```\n\n----------------------------------------\n\nTITLE: Collecting All Pengine Answers with Engines Object\nDESCRIPTION: Shows how to use the 'engines' object to create a pengine and collect all its answers in a list.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/pengines/NOTES.md#2025-04-06_snippet_4\n\nLANGUAGE: logtalk\nCODE:\n```\nengines::(ask(Engine), answers(Engine, Answers)).\n```\n\n----------------------------------------\n\nTITLE: Loading the Main Developer Tools in Logtalk\nDESCRIPTION: Code example showing how to load the main developer tools package in Logtalk using the tools(loader) notation with the logtalk_load/1 predicate.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/tools/NOTES.md#2025-04-06_snippet_0\n\nLANGUAGE: logtalk\nCODE:\n```\n| ?- logtalk_load(tools(loader)).\n```\n\n----------------------------------------\n\nTITLE: Loading Logtalk On-Demand in SWI-Prolog\nDESCRIPTION: Prolog query to load Logtalk on-demand in SWI-Prolog by directly loading the integration file.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/adapters/NOTES.md#2025-04-06_snippet_1\n\nLANGUAGE: Prolog\nCODE:\n```\n?- ['$LOGTALKHOME/integration/logtalk_swi.pl'].\n```\n\n----------------------------------------\n\nTITLE: Defining the this/1 Method in Logtalk\nDESCRIPTION: Specification of the this/1 method, which unifies its argument with the identifier of the object calling this method or the object importing the category.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/refman/methods/this_1.rst#2025-04-06_snippet_0\n\nLANGUAGE: Logtalk\nCODE:\n```\nthis(This)\n```\n\n----------------------------------------\n\nTITLE: Installing a GPG-Encrypted Pack with Passphrase in Logtalk\nDESCRIPTION: Example showing how to install a GPG-encrypted pack by providing the passphrase using command-line options.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/tools/packs/NOTES.md#2025-04-06_snippet_25\n\nLANGUAGE: prolog\nCODE:\n```\n| ?- packs::install(reg, bar, 1:1:2, [gpg('--batch --passphrase test123')]).\n```\n\n----------------------------------------\n\nTITLE: Applying Documentation Metric to Specific Entity in Logtalk\nDESCRIPTION: This query applies the documentation metric to the 'logtalk' entity. It demonstrates how to analyze a single entity for a specific metric.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/tools/code_metrics/SCRIPT.txt#2025-04-06_snippet_4\n\nLANGUAGE: Logtalk\nCODE:\n```\n| ?- doc_metric::entity(logtalk).\n```\n\n----------------------------------------\n\nTITLE: Dynamic Table for Referenced Prolog Files\nDESCRIPTION: Dynamic predicate representing a table of referenced Prolog files in the diagram. It stores file paths and can be queried for zero or more results.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/file_diagram_1.rst.txt#2025-04-06_snippet_5\n\nLANGUAGE: Logtalk\nCODE:\n```\nreferenced_prolog_file_(Path)\n```\n\n----------------------------------------\n\nTITLE: Displaying Full Profiling Data\nDESCRIPTION: Shows the collected profiling data for all entities and predicates with port statistics\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/tools/ports_profiler/SCRIPT.txt#2025-04-06_snippet_4\n\nLANGUAGE: logtalk\nCODE:\n```\n| ?- ports_profiler::data.\n```\n\n----------------------------------------\n\nTITLE: Defining Greater Than Operator in Logtalk Protocol\nDESCRIPTION: Defines the greater than operator (>) which evaluates to true if Term1 is greater than Term2. It uses static compilation flags and works with term inputs.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/comparingp_0.rst.txt#2025-04-06_snippet_2\n\nLANGUAGE: Logtalk\nCODE:\n```\nTerm1>Term2\n```\n\n----------------------------------------\n\nTITLE: Implementing Protected Protocol\nDESCRIPTION: Demonstrates implementing a protocol with protected scope, making all public predicates protected.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/userman/protocols.rst#2025-04-06_snippet_16\n\nLANGUAGE: logtalk\nCODE:\n```\n:- object(Object,\n    implements(protected::Protocol)).\n    ...\n:- end_object.\n```\n\n----------------------------------------\n\nTITLE: Multifile Directive Template and Modes\nDESCRIPTION: Specifies the template and modes for using the multifile directive with qualified predicate and non-terminal indicators.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/refman/directives/multifile_1.rst.txt#2025-04-06_snippet_1\n\nLANGUAGE: logtalk\nCODE:\n```\nmultifile(+qualified_predicate_indicator_term)\nmultifile(+qualified_non_terminal_indicator_term)\n```\n\n----------------------------------------\n\nTITLE: Loading ISO 8601 Library in Logtalk\nDESCRIPTION: This snippet demonstrates how to load all entities in the ISO 8601 library using the loader.lgt file in Logtalk.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/contributions/iso8601/NOTES.md#2025-04-06_snippet_0\n\nLANGUAGE: Logtalk\nCODE:\n```\n| ?- logtalk_load(iso8601(loader)).\n```\n\n----------------------------------------\n\nTITLE: Accessing Lazy List Elements by Position in Logtalk\nDESCRIPTION: Shows how to retrieve elements from a lazy list of random numbers by their position using the list::nth1/3 predicate. The list is constructed lazily, generating elements only when required.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/engines/lazy/NOTES.md#2025-04-06_snippet_3\n\nLANGUAGE: logtalk\nCODE:\n```\nlazy::find_all(X, (repeat,random::random(X)), List), list::nth1(N, List, E).\n```\n\n----------------------------------------\n\nTITLE: Specialized Objects Syntax in Logtalk using BNF\nDESCRIPTION: Specifies the syntax for referring to specialized objects (superclasses) in Logtalk, including individual objects, sequences, and lists, with optional scope specifiers.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/refman/grammar.rst.txt#2025-04-06_snippet_11\n\nLANGUAGE: bnf\nCODE:\n```\nspecialized_objects ::=\n   specialized_object\n   | specialized_object_sequence\n   | specialized_object_list\n\nspecialized_object ::=\n   object_identifier\n   | scope \"::\" object_identifier\n\nspecialized_object_sequence ::=\n   specialized_object\n   | specialized_object \",\" specialized_object_sequence\n\nspecialized_object_list ::=\n   \"[\" specialized_object_sequence \"]\"\n```\n\n----------------------------------------\n\nTITLE: GitHub CLI Authentication for issue_creator\nDESCRIPTION: This bash command shows how to authenticate the GitHub CLI (gh) for use with the issue_creator tool. It uses a token stored in a file for authentication.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/devtools/issue_creator.rst#2025-04-06_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ngh auth login --hostname <string> --with-token < token.txt\n```\n\n----------------------------------------\n\nTITLE: Splitting Multi-Library Diagrams with ccomps Command\nDESCRIPTION: Command to split a diagram with multiple disconnected library or directory graphs into separate subdiagrams using the ccomps command-line tool from Graphviz.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/devtools/diagrams.rst#2025-04-06_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\nccomps -x -o subdiagram.dot diagram.dot\n```\n\n----------------------------------------\n\nTITLE: Using Local Operators for File Conversion\nDESCRIPTION: Demonstrates using local operators to read from one file and write to another file, converting terms in the process.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/operators/NOTES.md#2025-04-06_snippet_6\n\nLANGUAGE: logtalk\nCODE:\n```\nreverse::reverse_file.\n```\n\n----------------------------------------\n\nTITLE: Using setof/3 for Local Solutions in Logtalk\nDESCRIPTION: Demonstrates how to use setof/3 to find a set of solutions in the context of the current object or category.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/refman/methods/setof_3.rst#2025-04-06_snippet_3\n\nLANGUAGE: Logtalk\nCODE:\n```\nsetof(Template, Goal, List)\n```\n\n----------------------------------------\n\nTITLE: Checking Versions in Logtalk\nDESCRIPTION: Prints the versions of Logtalk, Prolog backend, and kernel if running as a notebook.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/logic/NOTES.md#2025-04-06_snippet_0\n\nLANGUAGE: logtalk\nCODE:\n```\n%versions\n```\n\n----------------------------------------\n\nTITLE: Error Handling Methods TOC in RST\nDESCRIPTION: ReStructuredText table of contents listing all available error handling methods in Logtalk, including predicates for different types of errors like instantiation, type, domain, and system errors.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/refman/methods/error_handling_methods.rst.txt#2025-04-06_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. _error_handling_methods:\n\nError handling\n==============\n\n.. toctree::\n   :maxdepth: 1\n\n   catch_3\n   throw_1\n   instantiation_error_0\n   uninstantiation_error_1\n   type_error_2\n   domain_error_2\n   consistency_error_3\n   existence_error_2\n   permission_error_3\n   representation_error_1\n   evaluation_error_1\n   resource_error_1\n   syntax_error_1\n   system_error_0\n```\n\n----------------------------------------\n\nTITLE: Defining Predicate Aliases with use_module/2 in Logtalk\nDESCRIPTION: Shows how to use the extended notation of use_module/2 to define predicate aliases, allowing for more meaningful names in the calling context.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/refman/directives/use_module_2.rst#2025-04-06_snippet_2\n\nLANGUAGE: Logtalk\nCODE:\n```\n:- use_module(ugraphs, [transpose_ugraph/2 as transpose/2]).\n\nconvert_graph :-\n    ...,\n    % the same as ugraphs:transpose_ugraph(Graph0, Graph)\n    transpose(Graph0, Graph),\n    ...\n```\n\n----------------------------------------\n\nTITLE: Learning Family Relationships with Metagol in Logtalk\nDESCRIPTION: This example shows Metagol learning the concept of 'grandparent' from given examples of father and mother relationships.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/ports/metagol/SCRIPT.txt#2025-04-06_snippet_2\n\nLANGUAGE: Logtalk\nCODE:\n```\n| ?- family::learn.\n\n% learning grandparent/2\n% clauses: 1\n% clauses: 2\n% clauses: 3\ngrandparent(A,B) :- grandparent_1(A,C), grandparent_1(C,B).\ngrandparent_1(A,B) :- father(A,B).\ngrandparent_1(A,B) :- mother(A,B).\nyes\n```\n\n----------------------------------------\n\nTITLE: Checking Versions in Logtalk\nDESCRIPTION: Displays the versions of Logtalk, Prolog backend, and kernel when executed in a Jupyter notebook environment.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/elephants/NOTES.md#2025-04-06_snippet_0\n\nLANGUAGE: logtalk\nCODE:\n```\n%versions\n```\n\n----------------------------------------\n\nTITLE: Generating Version 1 UUID as Atom in Logtalk\nDESCRIPTION: Generates a version 1 UUID as an atom using the uuid::uuid_v1/2 predicate.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/libraries/uuid.rst.txt#2025-04-06_snippet_2\n\nLANGUAGE: Prolog\nCODE:\n```\n| ?- uuid::uuid_v1([0xf2,0xd1,0x90,0x94,0xdc,0x4b], UUID).\nUUID = '00a66fc0-82cf-11eb-bc83-f2d19094dc4b'\nyes\n```\n\n----------------------------------------\n\nTITLE: Run Benchmarks with Custom Repetitions\nDESCRIPTION: Executes all benchmark tests with a specified number of repetitions.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/bench/NOTES.md#2025-04-06_snippet_3\n\nLANGUAGE: logtalk\nCODE:\n```\nrun(2000).\n```\n\n----------------------------------------\n\nTITLE: Testing Meta Library in Logtalk\nDESCRIPTION: This snippet shows how to load the tester.lgt file to test the predicates in the 'meta' library.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/libraries/meta.rst#2025-04-06_snippet_1\n\nLANGUAGE: Prolog\nCODE:\n```\n| ?- logtalk_load(meta(tester)).\n```\n\n----------------------------------------\n\nTITLE: Example Protocol Extension Queries\nDESCRIPTION: Demonstrates example queries for enumerating protocol extensions and checking specific extension relationships.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/refman/predicates/extends_protocol_2_3.rst.txt#2025-04-06_snippet_2\n\nLANGUAGE: prolog\nCODE:\n```\n% enumerate the protocols extended by the listp protocol:\n| ?- extends_protocol(listp, Protocol).\n\n% enumerate protocols that privately extend the termp protocol:\n| ?- extends_protocol(Protocol, termp, private).\n```\n\n----------------------------------------\n\nTITLE: Meta-predicate template for threaded_call/1-2 in Logtalk\nDESCRIPTION: Specifies the meta-predicate templates for threaded_call/1-2, indicating that the first argument is a callable goal (0) and the second argument is any term (*).\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/refman/predicates/threaded_call_1_2.rst#2025-04-06_snippet_1\n\nLANGUAGE: prolog\nCODE:\n```\nthreaded_call(0)\nthreaded_call(0, *)\n```\n\n----------------------------------------\n\nTITLE: Defining Uninstantiation Error Method in Logtalk\nDESCRIPTION: Method signature and basic usage pattern for throwing uninstantiation errors when a variable is required but a bound argument is provided.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/refman/methods/uninstantiation_error_1.rst.txt#2025-04-06_snippet_0\n\nLANGUAGE: logtalk\nCODE:\n```\nuninstantiation_error(Culprit)\n```\n\n----------------------------------------\n\nTITLE: Setting Up a Dynamic Predicate for TSV Data in Logtalk\nDESCRIPTION: Command to define and prepare a dynamic predicate that will hold the TSV data.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/library/tsv/NOTES.md#2025-04-06_snippet_3\n\nLANGUAGE: Logtalk\nCODE:\n```\n| ?- assertz(p(_,_,_)), retractall(p(_,_,_)).\nyes\n```\n\n----------------------------------------\n\nTITLE: Entity Relationship Predicates in Logtalk\nDESCRIPTION: Built-in predicates for querying relationships between Logtalk entities.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/coding/subethaedit2/Logtalk.mode/Contents/Resources/AutocompleteAdditions.txt#2025-04-06_snippet_15\n\nLANGUAGE: logtalk\nCODE:\n```\ncomplements_object(, )\nconforms_to_protocol(, , )\nconforms_to_protocol(, )\nextends_object(, , )\nextends_object(, )\nextends_protocol(, , )\nextends_protocol(, )\nextends_category(, , )\nextends_category(, )\nimplements_protocol(, , )\nimplements_protocol(, )\ninstantiates_class(, , )\ninstantiates_class(, )\nspecializes_class(, , )\nspecializes_class(, )\nimports_category(, , )\nimports_category(, )\n```\n\n----------------------------------------\n\nTITLE: Saving terms to permanent storage\nDESCRIPTION: Saves the current terms in the persistency object to permanent storage.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/persistency/NOTES.md#2025-04-06_snippet_5\n\nLANGUAGE: logtalk\nCODE:\n```\npersistency::save.\n```\n\n----------------------------------------\n\nTITLE: Guessing CSV Separator in Logtalk\nDESCRIPTION: Demonstrates how to use the CSV library to guess the separator used in a CSV file, prompting the user for confirmation.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/libraries/csv.rst#2025-04-06_snippet_2\n\nLANGUAGE: prolog\nCODE:\n```\n| ?- csv::guess_separator('test_files/crlf_ending.csv', Separator).\nIs this the proper reading of a line of this file (y/n)? [aaa,bb,ccc]\n|> y.\n\nSeparator = comma ?\n```\n\n----------------------------------------\n\nTITLE: Configuring URL Prefixes for PyCharm in Logtalk Diagrams\nDESCRIPTION: Sets the URL code prefix for generating local links to open files and directories in PyCharm when creating Logtalk diagrams.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/tools/diagrams/NOTES.md#2025-04-06_snippet_15\n\nLANGUAGE: prolog\nCODE:\n```\nurl_prefixes('pycharm://open?file=', DocPrefix)\n```\n\n----------------------------------------\n\nTITLE: Loading Unicode Data Files in Logtalk\nDESCRIPTION: Shows how to load all Unicode data files using the Logtalk version (unicode_data.lgt) of the utility file. This uses Logtalk's implementation of include/1 and logtalk_load/1.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/libraries/unicode_data.rst#2025-04-06_snippet_1\n\nLANGUAGE: Logtalk\nCODE:\n```\n?- logtalk_load(unicode_data).\n```\n\n----------------------------------------\n\nTITLE: Querying Descendant3 Interface\nDESCRIPTION: Queries the interface of 'descendant3' which extends 'prototype3' using public inheritance, showing that no predicates are visible due to previous private inheritance.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/inheritance/NOTES.md#2025-04-06_snippet_8\n\nLANGUAGE: logtalk\nCODE:\n```\ndescendant3::interface.\n```\n\n----------------------------------------\n\nTITLE: Running Zoom Doclet Generator\nDESCRIPTION: Loads and runs the zoom_doclet tool which generates documentation and diagrams in the $LOGTALKUSER/tools/doclet/docs directory.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/tools/doclet/SCRIPT.txt#2025-04-06_snippet_1\n\nLANGUAGE: logtalk\nCODE:\n```\n| ?- logtalk_load(doclet(zoom_doclet)).\n```\n\n----------------------------------------\n\nTITLE: Define Log File Predicate - define_log_file/2\nDESCRIPTION: Predicate for defining a new log file with given alias and filename while preserving existing content. Logging is enabled by default.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/loggingp_0.rst.txt#2025-04-06_snippet_1\n\nLANGUAGE: logtalk\nCODE:\n```\ndefine_log_file(+atom,+atom)\n```\n\n----------------------------------------\n\nTITLE: Example of Logtalk Error Term\nDESCRIPTION: Provides a concrete example of a Logtalk error term for a permission error when trying to modify a private predicate.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/userman/errors.rst#2025-04-06_snippet_1\n\nLANGUAGE: logtalk\nCODE:\n```\nerror(\n    permission_error(modify,private_predicate,p/0),\n    logtalk(foo::abolish(p/0), _)\n)\n```\n\n----------------------------------------\n\nTITLE: Essential Number Equality in Logtalk\nDESCRIPTION: Compares two numbers for essential equality given an epsilon value. Uses a standard formula that is stronger than approximate equality.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/lgtunit_0.rst.txt#2025-04-06_snippet_22\n\nLANGUAGE: logtalk\nCODE:\n```\nessentially_equal(Number1,Number2,Epsilon)\n```\n\n----------------------------------------\n\nTITLE: Proving Goals with Different Interpreters in Verdi Neruda\nDESCRIPTION: Examples of using the prove/3 command to execute Prolog queries using different interpreters, showing how to append two lists using depth-first search and iterative deepening interpreters.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/contributions/verdi_neruda.rst#2025-04-06_snippet_5\n\nLANGUAGE: Prolog\nCODE:\n```\nprove(dfs_interpreter, append([a,b], [c,d], Xs), demodb).\n```\n\nLANGUAGE: Prolog\nCODE:\n```\nprove(iddfs_interpreter(1), append([a,b], [c,d], Xs), demodb).\n```\n\n----------------------------------------\n\nTITLE: Deleting Minimum Key-Value Pair from Dictionary in Logtalk\nDESCRIPTION: Deletes the pair with the minimum key from a dictionary, returning the deleted pair and the updated dictionary.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/dictionaryp_0.rst.txt#2025-04-06_snippet_19\n\nLANGUAGE: Logtalk\nCODE:\n```\ndelete_min(OldDictionary,Key,Value,NewDictionary)\n```\n\n----------------------------------------\n\nTITLE: Specifying Template and Modes for uses/1 Directive in Logtalk\nDESCRIPTION: Defines the template and modes for the uses/1 directive. The directive takes a list of object aliases as its argument, which must be instantiated (+) when the directive is called.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/refman/directives/uses_1.rst.txt#2025-04-06_snippet_1\n\nLANGUAGE: Logtalk\nCODE:\n```\nuses(+object_alias_list)\n```\n\n----------------------------------------\n\nTITLE: Extracting Logtalk Source Archive\nDESCRIPTION: Shell command for extracting the Logtalk source distribution archive file (lgt3xxx.tar.bz2) using tar with bzip2 decompression.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/userman/installing.rst#2025-04-06_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n% tar -jxvf lgt3xxx.tar.bz2\n```\n\n----------------------------------------\n\nTITLE: Defining extends_protocol Predicate Signatures\nDESCRIPTION: Defines the primary signatures for the extends_protocol predicate that enumerates protocol extension relationships.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/refman/predicates/extends_protocol_2_3.rst.txt#2025-04-06_snippet_0\n\nLANGUAGE: prolog\nCODE:\n```\nextends_protocol(Protocol, ParentProtocol)\nextends_protocol(Protocol, ParentProtocol, Scope)\n```\n\n----------------------------------------\n\nTITLE: Creating Optional Terms in Logtalk\nDESCRIPTION: Illustrates the use of the 'optional' object to construct optional terms with a value.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/libraries/optionals.rst.txt#2025-04-06_snippet_2\n\nLANGUAGE: Prolog\nCODE:\n```\n| ?- optional::of(1, Optional).\n```\n\n----------------------------------------\n\nTITLE: Loading Default Float Mutations in Logtalk\nDESCRIPTION: Directive to load the default float mutations functionality into a Logtalk program. Requires the mutations loader.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/default_float_mutations_0.rst.txt#2025-04-06_snippet_0\n\nLANGUAGE: prolog\nCODE:\n```\nlogtalk_load(mutations(loader))\n```\n\n----------------------------------------\n\nTITLE: Defining Meta-calls Table of Contents in reStructuredText\nDESCRIPTION: This snippet defines a table of contents for meta-call methods documentation using reStructuredText syntax. It includes links to documentation for call/N, ignore/1, once/1, and not/1 methods.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/refman/methods/meta_call_methods.rst.txt#2025-04-06_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. toctree::\n   :maxdepth: 1\n\n   call_N\n   ignore_1\n   once_1\n   not_1\n```\n\n----------------------------------------\n\nTITLE: Examples of Object Definitions in Logtalk\nDESCRIPTION: Examples of different object definitions in Logtalk, including simple objects, objects that implement protocols, objects that extend other objects, and objects with combinations of different relationships.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/refman/directives/object_1_5.rst#2025-04-06_snippet_10\n\nLANGUAGE: logtalk\nCODE:\n```\n:- object(list).\n\n:- object(list,\n    implements(listp)).\n\n:- object(list,\n    extends(compound)).\n\n:- object(list,\n    implements(listp),\n    extends(compound)).\n\n:- object(object,\n    imports(initialization),\n    instantiates(class)).\n\n:- object(abstract_class,\n    instantiates(class),\n    specializes(object)).\n\n:- object(agent,\n    imports(private::attributes)).\n```\n\n----------------------------------------\n\nTITLE: Using Declared Module Predicates in Logtalk\nDESCRIPTION: This example demonstrates how to use the use_module/2 directive to declare predicates from various modules and then use them without module qualifiers in the code. It also shows how to use predicate aliases.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/refman/directives/use_module_2.rst.txt#2025-04-06_snippet_1\n\nLANGUAGE: Logtalk\nCODE:\n```\n:- use_module(lists, [append/3, member/2]).\n:- use_module(store, [data/2]).\n:- use_module(user,  [foo/1 as bar/1]).\n\nfoo :-\n    ...,\n    % same as findall(X, lists:member(X, L), A)\n    findall(X, member(X, L), A),\n    % same as lists:append(A, B, C)\n    append(A, B, C),\n    % same as assertz(store:data(X, C))\n    assertz(data(X, C)),\n    % same as retractall(user:foo(_))\n    retractall(bar(_)),\n    ...\n```\n\n----------------------------------------\n\nTITLE: Example Queries Using specializes_class/2-3\nDESCRIPTION: Example queries demonstrating the use of specializes_class/2 to enumerate subclasses of state_space and specializes_class/3 to find subclasses with a public specialization relation.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/refman/predicates/specializes_class_2_3.rst#2025-04-06_snippet_2\n\nLANGUAGE: logtalk\nCODE:\n```\n% enumerate the state_space subclasses:\n| ?- specializes_class(Subclass, state_space).\n\n% enumerate the state_space subclasses where the\n% specialization relation is public:\n| ?- specializes_class(Subclass, state_space, public).\n```\n\n----------------------------------------\n\nTITLE: Checking Logtalk and Prolog Backend Versions\nDESCRIPTION: Prints the versions of Logtalk, the underlying Prolog backend, and the Jupyter kernel if running as a notebook.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/threads/sync/NOTES.md#2025-04-06_snippet_0\n\nLANGUAGE: logtalk\nCODE:\n```\n%versions\n```\n\n----------------------------------------\n\nTITLE: Using Grammar Library with Character Lists\nDESCRIPTION: Example of using the blank_grammars object with character lists (chars) through implicit message-sending\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/library/grammars/NOTES.md#2025-04-06_snippet_2\n\nLANGUAGE: logtalk\nCODE:\n```\n:- uses(blank_grammars(chars), [\n\twhite_spaces//0, new_lines//0\n]).\n```\n\n----------------------------------------\n\nTITLE: Running Single-threaded Takeuchi Function\nDESCRIPTION: This snippet demonstrates running the single-threaded version of the Takeuchi function with input parameters (18, 12, 6) and timing the execution.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/threads/tak/NOTES.md#2025-04-06_snippet_2\n\nLANGUAGE: logtalk\nCODE:\n```\ntime(tak(1)::tak(18, 12, 6, R)).\n```\n\n----------------------------------------\n\nTITLE: Loading the Pengines Example\nDESCRIPTION: Loads the pengines example components using the loader file.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/pengines/NOTES.md#2025-04-06_snippet_2\n\nLANGUAGE: logtalk\nCODE:\n```\nlogtalk_load(pengines(loader)).\n```\n\n----------------------------------------\n\nTITLE: Loading ULID Library in Logtalk\nDESCRIPTION: Command to load all entities in the ULID library using the loader file.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/libraries/ulid.rst.txt#2025-04-06_snippet_0\n\nLANGUAGE: logtalk\nCODE:\n```\n| ?- logtalk_load(ulid(loader)).\n```\n\n----------------------------------------\n\nTITLE: QuickCheck with Control Constructs in Logtalk\nDESCRIPTION: Shows the use of (::)/2 and (<<)/2 control constructs in QuickCheck templates.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/quick_check/NOTES.md#2025-04-06_snippet_8\n\nLANGUAGE: logtalk\nCODE:\n```\nlgtunit::quick_check(list::length(+list, -integer)).\n```\n\nLANGUAGE: logtalk\nCODE:\n```\nlgtunit::quick_check(list<<length(+list, -integer)).\n```\n\n----------------------------------------\n\nTITLE: Loading Required LaTeX Packages for Logtalk Syntax Highlighting\nDESCRIPTION: These lines load the necessary packages for using Logtalk syntax highlighting in LaTeX documents. The listings package provides the core syntax highlighting functionality, while textcomp is required for the upquote option.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/coding/latex/listings/NOTES.md#2025-04-06_snippet_0\n\nLANGUAGE: LaTeX\nCODE:\n```\n\\usepackage{listings}\n\\usepackage{textcomp}\n```\n\n----------------------------------------\n\nTITLE: Examples of Using threaded_ignore/1 in Logtalk\nDESCRIPTION: Examples demonstrating different ways to use threaded_ignore/1 with regular goals and message-sending goals in Logtalk.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/refman/predicates/threaded_ignore_1.rst.txt#2025-04-06_snippet_3\n\nLANGUAGE: prolog\nCODE:\n```\nthreaded_ignore(Goal)\nthreaded_ignore(::Message)\nthreaded_ignore(Object::Message)\n```\n\n----------------------------------------\n\nTITLE: Equivalent Context Implementation\nDESCRIPTION: Shows the equivalent implementation using context and throw predicates that the method uses internally.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/refman/methods/uninstantiation_error_1.rst#2025-04-06_snippet_1\n\nLANGUAGE: logtalk\nCODE:\n```\n...,\ncontext(Context),\nthrow(error(uninstantiation_error(Culprit), Context)).\n```\n\n----------------------------------------\n\nTITLE: Loading Logtalk Dictionaries Library\nDESCRIPTION: Demonstrates how to load all entities in the Logtalk dictionaries library using the loader.lgt file.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/libraries/dictionaries.rst#2025-04-06_snippet_0\n\nLANGUAGE: prolog\nCODE:\n```\n| ?- logtalk_load(dictionaries(loader)).\n```\n\n----------------------------------------\n\nTITLE: Creating SWI-Prolog QLF Files for 'spider' Example\nDESCRIPTION: This snippet demonstrates how to create SWI-Prolog QLF (Quick Load Format) files from the 'spider' text adventure example. It uses the swipl_logtalk_qlf.sh script to generate the QLF files and shows how to load and run the example.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/scripts/embedding/SCRIPT.txt#2025-04-06_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n$ cd \"$LOGTALKHOME/scripts/embedding/swipl/\"\n$ ./swipl_logtalk_qlf.sh -c -d \"$HOME\"/collect -l \"$LOGTALKUSER/examples/adventure/spider.lgt\"\n$ cd ~/collect\n$ swipl -g \"[logtalk, application]\"\n| ?- spider::start.\n```\n\n----------------------------------------\n\nTITLE: Finding All Messages Accepted by an Object\nDESCRIPTION: Lists all messages (predicates) that are accepted by a square object using the current_predicate/1 predicate.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/sicstus/NOTES.md#2025-04-06_snippet_9\n\nLANGUAGE: logtalk\nCODE:\n```\n%%table\nsquare(2)::current_predicate(Pred).\n```\n\n----------------------------------------\n\nTITLE: Displaying ASDF Section Header in Markdown\nDESCRIPTION: This code snippet shows how to create a section header for 'asdf' using Markdown syntax. It uses backticks to format the text as inline code and equals signs to create a second-level header.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/tools/asdf/NOTES.md#2025-04-06_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n`asdf`\n======\n```\n\n----------------------------------------\n\nTITLE: Creating YAP Saved State for 'wumpus' Example\nDESCRIPTION: This snippet demonstrates how to create a YAP saved state from the 'wumpus' text adventure example. It uses the yap_logtalk_pl.sh script to generate an executable saved state.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/scripts/embedding/SCRIPT.txt#2025-04-06_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\n$ cd \"$LOGTALKHOME/scripts/embedding/yap/\"\n$ ./yap_logtalk_pl.sh -c -x -d \"$HOME\"/collect -n wumpus -l \"$LOGTALKUSER/examples/adventure/wumpus.lgt\" -g \"'::'(wumpus,main),halt\"\n$ ~/collect/wumpus\n```\n\n----------------------------------------\n\nTITLE: Testing the lgtdoc Tool in Logtalk\nDESCRIPTION: This snippet demonstrates how to load the tester file for the lgtdoc tool. This is used to run tests on the tool itself.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/devtools/lgtdoc.rst.txt#2025-04-06_snippet_1\n\nLANGUAGE: prolog\nCODE:\n```\n| ?- logtalk_load(lgtdoc(tester)).\n```\n\n----------------------------------------\n\nTITLE: Configuring Default Options for Logtalk Code Listings in LaTeX\nDESCRIPTION: This lstset command configures the default appearance of all Logtalk code listings in the document, including font style, keyword formatting, line numbers, spacing, and frame options.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/coding/latex/listings/NOTES.md#2025-04-06_snippet_2\n\nLANGUAGE: LaTeX\nCODE:\n```\n\\lstset{\n\tlanguage=Logtalk,\n\tbasicstyle=\\small\\ttfamily,\n\tkeywordstyle=\\bfseries,\n\ttabsize=4,\n\tnumbers=none, numberstyle=\\tiny, stepnumber=1, numbersep=5pt,\n\tshowspaces=false, showstringspaces=false,\n\tcaptionpos=b,\n\tframe=lines,\n\tupquote=true,\n\tframextopmargin=6pt, framexbottommargin=6pt,\n\taboveskip=\\medskipamount, lineskip={-2.0pt}\n}\n```\n\n----------------------------------------\n\nTITLE: Defining log_file_/2 Predicate in Logtalk\nDESCRIPTION: Declaration of the dynamic predicate log_file_/2 that maintains a table of log files. It associates a symbolic alias with a file path and supports querying with zero_or_more proofs.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/logging_0.rst.txt#2025-04-06_snippet_0\n\nLANGUAGE: logtalk\nCODE:\n```\nlog_file_(Alias,File)\n```\n\n----------------------------------------\n\nTITLE: Simplified Message Forwarding in Logtalk\nDESCRIPTION: This snippet shows a simplified version of message forwarding in Logtalk using the forward/1 predicate. It does not preserve the original sender of the message.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/userman/errors.rst#2025-04-06_snippet_10\n\nLANGUAGE: Logtalk\nCODE:\n```\nforward(Message) :-\n    Object::Message.\n```\n\n----------------------------------------\n\nTITLE: Converting Difference List to Regular List in Logtalk\nDESCRIPTION: Returns a regular list containing the elements of the given difference list. Takes a difference list as input and outputs a regular list.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/difflist_0.rst.txt#2025-04-06_snippet_1\n\nLANGUAGE: Logtalk\nCODE:\n```\nas_list(DiffList, List)\n```\n\n----------------------------------------\n\nTITLE: Benchmarking Different Interpreters\nDESCRIPTION: Commands to compare inference counts between DFS and IDDFS interpreters when appending lists.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/contributions/verdi_neruda/README.txt#2025-04-06_snippet_3\n\nLANGUAGE: Logtalk\nCODE:\n```\nbenchmark(dfs_interpreter, append([a,b,c,d],[e,f], Xs), demodb).\nbenchmark(iddfs_interpreter(1), append([a,b,c,d],[e,f], Xs), demodb).\n```\n\n----------------------------------------\n\nTITLE: Defining the add_directive_ binary predicate in Logtalk\nDESCRIPTION: Table of directives to be added. This dynamic predicate tracks directives that should be added to an object during compilation or loading.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/wrapper_0.rst.txt#2025-04-06_snippet_24\n\nLANGUAGE: logtalk\nCODE:\n```\nadd_directive_(Object,Directive)\n```\n\n----------------------------------------\n\nTITLE: End Category Directive Example\nDESCRIPTION: Demonstrates the practical usage of the end_category directive with proper Logtalk syntax\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/refman/directives/end_category_0.rst.txt#2025-04-06_snippet_1\n\nLANGUAGE: logtalk\nCODE:\n```\n:- end_category.\n```\n\n----------------------------------------\n\nTITLE: Printing Logtalk, Prolog, and Kernel Versions\nDESCRIPTION: This snippet prints the versions of Logtalk, the Prolog backend, and the kernel if running as a notebook.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/bricks/NOTES.md#2025-04-06_snippet_0\n\nLANGUAGE: logtalk\nCODE:\n```\n%versions\n```\n\n----------------------------------------\n\nTITLE: Retrieving Command Line Arguments in Logtalk\nDESCRIPTION: Returns a list with the command line arguments that occur after '--'.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/osp_0.rst.txt#2025-04-06_snippet_20\n\nLANGUAGE: prolog\nCODE:\n```\ncommand_line_arguments(Arguments)\n```\n\n----------------------------------------\n\nTITLE: Implementing Gensym in Logtalk Object\nDESCRIPTION: Example of importing the gensym_core category privately into a Logtalk object to create local generators and minimize name clashes.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/libraries/gensym.rst.txt#2025-04-06_snippet_2\n\nLANGUAGE: logtalk\nCODE:\n```\n:- object(foo,\n    imports(private::gensym_core)).\n\n    bar :-\n        ^^gensym(p, S),\n        ...\n\n:- end_object.\n```\n\n----------------------------------------\n\nTITLE: Display Logtalk Version Information\nDESCRIPTION: Prints version information for Logtalk, the Prolog backend, and the kernel when running in notebook mode.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/hello_world/NOTES.md#2025-04-06_snippet_0\n\nLANGUAGE: logtalk\nCODE:\n```\n%versions\n```\n\n----------------------------------------\n\nTITLE: Defining the elif/1 Directive Syntax in Logtalk\nDESCRIPTION: The basic syntax for the elif/1 directive in Logtalk, which takes a Goal parameter that determines whether the following code should be compiled.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/refman/directives/elif_1.rst.txt#2025-04-06_snippet_0\n\nLANGUAGE: Logtalk\nCODE:\n```\nelif(Goal)\n```\n\n----------------------------------------\n\nTITLE: Wrapping Plain Prolog Code for Linting\nDESCRIPTION: Example of wrapping plain Prolog code in a Logtalk object for linting, showing object definition with file inclusion.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/devtools/linter.rst#2025-04-06_snippet_1\n\nLANGUAGE: logtalk\nCODE:\n```\n:- object(code).\n    :- include('code.pl').\n:- end_object.\n```\n\n----------------------------------------\n\nTITLE: Info Directive Template and Mode\nDESCRIPTION: Template showing the expected mode declaration for the info/1 directive where entity_info_list is an input argument.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/refman/directives/info_1.rst#2025-04-06_snippet_1\n\nLANGUAGE: logtalk\nCODE:\n```\ninfo(+entity_info_list)\n```\n\n----------------------------------------\n\nTITLE: Removing Conditional Breakpoints in Logtalk\nDESCRIPTION: Removes all matching conditional and triggered breakpoints.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/debuggerp_0.rst.txt#2025-04-06_snippet_14\n\nLANGUAGE: Logtalk\nCODE:\n```\nnospy/3\n```\n\n----------------------------------------\n\nTITLE: Loading Logtalk Tutor Tool\nDESCRIPTION: This snippet demonstrates how to load the Logtalk tutor tool using a Prolog query. The tool is loaded using the logtalk_load/1 predicate with the tutor(loader) argument.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/tools/tutor/NOTES.md#2025-04-06_snippet_0\n\nLANGUAGE: Prolog\nCODE:\n```\n| ?- logtalk_load(tutor(loader)).\n```\n\n----------------------------------------\n\nTITLE: Starting Sleepy Adventure in Logtalk\nDESCRIPTION: Conditional statement to start the Sleepy text adventure if not running in a Jupyter notebook environment.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/adventure/NOTES.md#2025-04-06_snippet_2\n\nLANGUAGE: logtalk\nCODE:\n```\n(current_object(jupyter) -> true; sleepy::start).\n```\n\n----------------------------------------\n\nTITLE: Defining Object with Parameter Variables in Logtalk\nDESCRIPTION: Example of creating an object with a parameter variable _Color_ and a test method that writes the parameter value.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/userman/predicates.rst#2025-04-06_snippet_48\n\nLANGUAGE: logtalk\nCODE:\n```\n:- object(block(_Color_)).\n\n    :- public(test/0).\n\n    test :-\n        write('Color parameter value is '),\n        writeq(_Color_), nl.\n\n:- end_object.\n```\n\n----------------------------------------\n\nTITLE: Querying specialization relationships in Logtalk\nDESCRIPTION: Shows how to query specialization relationships between classes and superclasses using the specializes_class/2 built-in predicate.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/userman/objects.rst#2025-04-06_snippet_18\n\nLANGUAGE: text\nCODE:\n```\n| ?- specializes_class(Class, Superclass).\n```\n\n----------------------------------------\n\nTITLE: Listing All Existing Engines in Prolog\nDESCRIPTION: This example shows how to use the threaded_engine/1 predicate with forall/2 to write the names of all existing engines to the output.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/refman/predicates/threaded_engine_1.rst.txt#2025-04-06_snippet_2\n\nLANGUAGE: Prolog\nCODE:\n```\n| ?- forall(\n    threaded_engine(Engine),\n    (writeq(Engine), nl)\n).\n```\n\n----------------------------------------\n\nTITLE: Adding Line Numbers to Highlighted Code\nDESCRIPTION: Command to generate HTML with line numbers for a Logtalk source file\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/coding/rouge/NOTES.md#2025-04-06_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n$ rougify highlight -f html -F line_numbers=true -i source.lgt > source.html\n```\n\n----------------------------------------\n\nTITLE: Declaring Non-Standard Prolog Meta-Predicates in Adapter Files\nDESCRIPTION: Shows how to declare non-standard Prolog meta-predicates in Logtalk adapter files using the internal predicate '$lgt_prolog_meta_predicate'/3.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/userman/predicates.rst.txt#2025-04-06_snippet_52\n\nLANGUAGE: logtalk\nCODE:\n```\n'$lgt_prolog_meta_predicate'(det_call(_), det_call(0), predicate).\n```\n\n----------------------------------------\n\nTITLE: Write Term Usage with Variable Names Option\nDESCRIPTION: Example showing write_term/2-3 usage with variable_names/1 option for Prolog standard predicates\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/RELEASE_NOTES.md#2025-04-06_snippet_33\n\nLANGUAGE: Prolog\nCODE:\n```\nwrite_term(Term, [variable_names(Names)])\n```\n\n----------------------------------------\n\nTITLE: Loading Source Files with Documentation Support\nDESCRIPTION: Example of loading a source file with the source_data flag enabled to support documentation generation.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/tools/lgtdoc/NOTES.md#2025-04-06_snippet_2\n\nLANGUAGE: logtalk\nCODE:\n```\n?- logtalk_load(source_file, [source_data(on)]).\n```\n\n----------------------------------------\n\nTITLE: Citation Reference for Lean Prolog System\nDESCRIPTION: BibTeX citation for Paul Tarau's paper describing the architecture of interactors in the Lean Prolog System.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/engines/interactors/NOTES.md#2025-04-06_snippet_0\n\nLANGUAGE: bibtex\nCODE:\n```\n@article{Tarau2000,\n\tauthor=\"Paul Tarau\",\n\ttitle=\"Architecture and Implementation Aspects of the Lean Prolog System\",\n\turl=\"http://www.cse.unt.edu/~tarau/research/LeanProlog/ArchitectureOfLeanProlog.pdf\"\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Allure Report with Backend and Version in PowerShell\nDESCRIPTION: This snippet demonstrates how to generate an Allure report using the logtalk_allure_report script in PowerShell, specifying the backend and version.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/devtools/lgtunit.rst#2025-04-06_snippet_65\n\nLANGUAGE: powershell\nCODE:\n```\nPS> logtalk_allure_report -e \"Backend='GNU Prolog',Version=1.5.0\"\n```\n\n----------------------------------------\n\nTITLE: Loading Logtalk Tools - Prolog\nDESCRIPTION: Commands for loading the main developer tools or specific tool modules in Logtalk using Prolog queries.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/devtools/overview.rst#2025-04-06_snippet_0\n\nLANGUAGE: prolog\nCODE:\n```\n| ?- logtalk_load(tools(loader)).\n```\n\nLANGUAGE: prolog\nCODE:\n```\n| ?- logtalk_load(lgtunit(loader)).\n```\n\nLANGUAGE: prolog\nCODE:\n```\n| ?- set_logtalk_flag(suppress_path_prefix, '/home/jdoe/').\n```\n\n----------------------------------------\n\nTITLE: Loading the ids Library in Logtalk\nDESCRIPTION: Command to load all entities in the 'ids' library by loading the loader.lgt file.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/libraries/ids.rst#2025-04-06_snippet_0\n\nLANGUAGE: logtalk\nCODE:\n```\n| ?- logtalk_load(ids(loader)).\n```\n\n----------------------------------------\n\nTITLE: Querying Category Properties\nDESCRIPTION: Using category_property/2 to query properties of defined categories.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/userman/categories.rst#2025-04-06_snippet_14\n\nLANGUAGE: text\nCODE:\n```\n| ?- category_property(Category, Property).\n```\n\n----------------------------------------\n\nTITLE: Restoring Packs Requirements\nDESCRIPTION: Logtalk query to restore a saved packs setup from a requirements file.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/tools/packs/NOTES.md#2025-04-06_snippet_10\n\nLANGUAGE: prolog\nCODE:\n```\n| ?- packs::restore('requirements.lgt').\n```\n\n----------------------------------------\n\nTITLE: Integrating Logtalk Syntax Highlighting in SHJS\nDESCRIPTION: To add or update Logtalk support in SHJS, replace the 'sh_logtalk.js' file in the SHJS distribution's 'lang' directory with the newer file from this directory.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/coding/shjs/NOTES.md#2025-04-06_snippet_0\n\nLANGUAGE: Text\nCODE:\n```\nIf support for Logtalk is not included or if it is outdated in your SHJS\\ndistribution, just replace the file `sh_logtalk.js` in the SHJS distribution\\n`lang` directory with the newer file from this directory.\n```\n\n----------------------------------------\n\nTITLE: Processing Directory of Logtalk Source Files\nDESCRIPTION: Processes a directory of source files using the given options. It has a static compilation flag and accepts a path and list of options as arguments.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/code_metric_0.rst.txt#2025-04-06_snippet_0\n\nLANGUAGE: Logtalk\nCODE:\n```\nprocess_directory(Path,Options)\n```\n\n----------------------------------------\n\nTITLE: Attempting to Call a Private Predicate in Logtalk\nDESCRIPTION: Example showing what happens when trying to call a non-public predicate from outside an object. This demonstrates Logtalk's exception handling for visibility violations.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/tutorial/lists.rst.txt#2025-04-06_snippet_3\n\nLANGUAGE: text\nCODE:\n```\n| ?- list::length([1, 2, 3], 0, L).\n\nuncaught exception:\n    error(\n        existence_error(predicate_declaration, length/3),\n        logtalk(list::length([1,2,3],0,_), ...)\n    )\n```\n\n----------------------------------------\n\nTITLE: Setting Up Test Environment in Logtalk\nDESCRIPTION: Prepares the environment before running a test set. Defaults to true if not defined.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/lgtunit_0.rst.txt#2025-04-06_snippet_31\n\nLANGUAGE: logtalk\nCODE:\n```\nsetup\n```\n\n----------------------------------------\n\nTITLE: Running YAP Logtalk PowerShell Script Help Option\nDESCRIPTION: Command to display the usage help information for the YAP Logtalk PowerShell script on Windows systems.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/scripts/embedding/yap/NOTES.md#2025-04-06_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nyap_logtalk_pl.ps1 -h\n```\n\n----------------------------------------\n\nTITLE: Defining Stand-alone Objects in Logtalk\nDESCRIPTION: Basic syntax for defining stand-alone objects (prototypes) with optional protocol implementation and category imports.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/refman/directives/object_1_5.rst.txt#2025-04-06_snippet_0\n\nLANGUAGE: logtalk\nCODE:\n```\nobject(Object)\n\nobject(Object,\n    implements(Protocols))\n\nobject(Object,\n    imports(Categories))\n\nobject(Object,\n    implements(Protocols),\n    imports(Categories))\n```\n\n----------------------------------------\n\nTITLE: Defining the elif/1 Directive Syntax in Logtalk\nDESCRIPTION: The basic syntax for the elif/1 directive in Logtalk, which takes a Goal parameter that determines whether the following code should be compiled.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/refman/directives/elif_1.rst.txt#2025-04-06_snippet_0\n\nLANGUAGE: Logtalk\nCODE:\n```\nelif(Goal)\n```\n\n----------------------------------------\n\nTITLE: Cleaning Up Brick Stack Example\nDESCRIPTION: This code cleans up the example by removing all tuples, unset monitors, and deleting brick instances.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/bricks/NOTES.md#2025-04-06_snippet_13\n\nLANGUAGE: logtalk\nCODE:\n```\nbrick_stack::remove_all_tuples.\n```\n\nLANGUAGE: logtalk\nCODE:\n```\nafter_event_registry::del_monitors(_, _, _, stack_monitor).\n```\n\nLANGUAGE: logtalk\nCODE:\n```\nbrick::delete_all.\n```\n\n----------------------------------------\n\nTITLE: Testing Undefined but Declared Predicate\nDESCRIPTION: Tests a public predicate that is declared but has no definition\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/closed_world_assumption/NOTES.md#2025-04-06_snippet_3\n\nLANGUAGE: logtalk\nCODE:\n```\nhouse::cellar.\n```\n\n----------------------------------------\n\nTITLE: Extracting Values from Pairs\nDESCRIPTION: The values/2 predicate extracts a list of all values from a list of pairs.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/pairs_0.rst.txt#2025-04-06_snippet_3\n\nLANGUAGE: logtalk\nCODE:\n```\nvalues(Pairs,Values)\n```\n\n----------------------------------------\n\nTITLE: Defining Table of Contents for Multi-threading Engine Predicates in reStructuredText\nDESCRIPTION: This snippet defines a table of contents for multi-threading engine predicates using reStructuredText syntax. It includes links to documentation for various predicates related to thread creation, destruction, and management.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/refman/predicates/engine_predicates.rst.txt#2025-04-06_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. toctree::\n   :maxdepth: 1\n\n   threaded_engine_create_3\n   threaded_engine_destroy_1\n   threaded_engine_1\n   threaded_engine_self_1\n   threaded_engine_next_2\n   threaded_engine_next_reified_2\n   threaded_engine_yield_1\n   threaded_engine_post_2\n   threaded_engine_fetch_1\n```\n\n----------------------------------------\n\nTITLE: Defining the current_object/1 Predicate in Logtalk\nDESCRIPTION: Specification of the current_object/1 predicate that enumerates all currently defined objects (static, dynamic, or built-in) through backtracking.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/refman/predicates/current_object_1.rst#2025-04-06_snippet_0\n\nLANGUAGE: logtalk\nCODE:\n```\ncurrent_object(Object)\n```\n\n----------------------------------------\n\nTITLE: Include Directive Template and Modes\nDESCRIPTION: Specifies the template and modes for the include directive, showing it accepts a source file name as an argument.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/refman/directives/include_1.rst#2025-04-06_snippet_1\n\nLANGUAGE: logtalk\nCODE:\n```\ninclude(@source_file_name)\n```\n\n----------------------------------------\n\nTITLE: Using Debug Meta-Messages in Logtalk\nDESCRIPTION: Examples of using various meta-messages for debugging, including simple messages, key-value pairs, formatted output, and lists with titles.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/userman/debugging.rst.txt#2025-04-06_snippet_31\n\nLANGUAGE: logtalk\nCODE:\n```\n| ?- logtalk::print_message(debug, core, @'Phase 1 completed').\nyes\n\n| ?- logtalk::print_message(debug, core, [Stream]>>write(Stream,foo)).\nyes\n\n| ?- set_logtalk_flag(debug, on).\nyes\n\n| ?- logtalk::print_message(debug, core, [Stream]>>write(Stream,foo)).\nfoo\nyes\n\n| ?- logtalk::print_message(debug, core, @'Phase 1 completed').\n>>> Phase 1 completed\nyes\n\n| ?- logtalk::print_message(debug, core, answer-42).\n>>> answer: 42\nyes\n\n| ?- logtalk::print_message(debug, core, 'Position: <~d,~d>'+[42,23]).\n>>> Position: <42,23>\nyes\n\n| ?- logtalk::print_message(debug, core, [arthur,ford,marvin]).\n>>> - arthur\n>>> - ford\n>>> - marvin\nyes\n\n| ?- logtalk::print_message(debug, core, names::[arthur,ford,marvin]).\n>>> names:\n>>> - arthur\n>>> - ford\n>>> - marvin\nyes\n```\n\n----------------------------------------\n\nTITLE: File Dependency Diagram Object Declaration\nDESCRIPTION: Main object declaration for file_dependency_diagram with Format parameter that specifies the graph language output format. Imports file_diagram and uses various supporting modules.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/file_dependency_diagram_1.rst.txt#2025-04-06_snippet_1\n\nLANGUAGE: logtalk\nCODE:\n```\nfile_dependency_diagram(Format)\n```\n\n----------------------------------------\n\nTITLE: Displaying Version Information in Logtalk\nDESCRIPTION: Command to print Logtalk, Prolog backend, and kernel versions when running in a Jupyter notebook environment.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/trebuchet/NOTES.md#2025-04-06_snippet_0\n\nLANGUAGE: logtalk\nCODE:\n```\n%versions\n```\n\n----------------------------------------\n\nTITLE: Question Prompt Stream Method Implementation Example\nDESCRIPTION: Example implementation showing how to declare and define the method for the debugger component.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/refman/methods/question_prompt_stream_4.rst#2025-04-06_snippet_2\n\nLANGUAGE: logtalk\nCODE:\n```\n:- multifile(logtalk::question_prompt_stream/4).\n:- dynamic(logtalk::question_prompt_stream/4).\n\nlogtalk::question_prompt_stream(question, debugger, '    > ', user_input).\n```\n\n----------------------------------------\n\nTITLE: Scoped Generator Example\nDESCRIPTION: Example of defining scoped generators and shrinkers to avoid naming conflicts.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/libraries/arbitrary.rst.txt#2025-04-06_snippet_8\n\nLANGUAGE: logtalk\nCODE:\n```\n:- object(scoped).\n\n    % the same predicate is used for both generating and validating\n    :- public(custom/1).\n    custom(Term) :-\n        (   var(Term) ->\n            % assume predicate used as a generator\n            random::random(Term)\n        ;   % assume predicate used as a validator\n            float(Term)\n        ).\n\n    % a predicate with the same name is used for shrinking\n    :- public(custom/2).\n    custom(Larger, Small) :-\n        Small is Larger / 2.\n\n:- end_object.\n```\n\n----------------------------------------\n\nTITLE: Specifying Modes and Proofs for threaded_peek/1-2 in Prolog\nDESCRIPTION: Defines the modes and number of proofs for the threaded_peek/1 and threaded_peek/2 predicates. Both predicates expect a callable term as the first argument and return zero or one proofs.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/refman/predicates/threaded_peek_1_2.rst.txt#2025-04-06_snippet_1\n\nLANGUAGE: Prolog\nCODE:\n```\nthreaded_peek(+callable) - zero_or_one\nthreaded_peek(+callable, +nonvar) - zero_or_one\n```\n\n----------------------------------------\n\nTITLE: Querying Countries by Population\nDESCRIPTION: Tests the include/1 directive as an entity directive by getting sets of countries with identical populations.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/includes/NOTES.md#2025-04-06_snippet_4\n\nLANGUAGE: logtalk\nCODE:\n```\nsetof(Countries, countries::same_population(Countries), Solutions).\n```\n\n----------------------------------------\n\nTITLE: Implementing Pack Specification Object in Logtalk\nDESCRIPTION: This snippet demonstrates how to create a pack specification object that implements the pack_protocol. It includes metadata, pack information, and version specifications with dependencies and checksums.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/devtools/packs.rst.txt#2025-04-06_snippet_19\n\nLANGUAGE: logtalk\nCODE:\n```\n:- object(lflat_pack,\n    implements(pack_protocol)).\n\n    :- info([\n        version is 1:0:0,\n        author is 'Paulo Moura',\n        date is 2021-10-18,\n        comment is 'L-FLAT - Logtalk Formal Language and Automata Toolkit pack spec.'\n    ]).\n\n    name(lflat).\n\n    description('L-FLAT - Logtalk Formal Language and Automata Toolkit').\n\n    license('MIT').\n\n    home('https://github.com/l-flat/lflat').\n\n    version(\n        2:1:0,\n        stable,\n        'https://github.com/l-flat/lflat/archive/refs/tags/v2.1.0.tar.gz',\n        sha256 - '9c298c2a08c4e2a1972c14720ef1498e7f116c7cd8bf7702c8d22d8ff549b6a1',\n        [logtalk @>= 3:42:0],\n        all\n    ).\n\n    version(\n        2:0:2,\n        stable,\n        'https://github.com/l-flat/lflat/archive/refs/tags/v2.0.2.tar.gz',\n        sha256 - '8774b3863efc03bb6c284935885dcf34f69f115656d2496a33a446b6199f3e19',\n        [logtalk @>= 3:36:0],\n        all\n    ).\n\n:- end_object.\n```\n\n----------------------------------------\n\nTITLE: Declaring Non-Standard Prolog Built-in Meta-Predicates in Logtalk\nDESCRIPTION: Demonstrates how to override the meta-predicate template for non-standard Prolog built-in meta-predicates.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/userman/predicates.rst#2025-04-06_snippet_54\n\nLANGUAGE: logtalk\nCODE:\n```\n:- meta_predicate(user::det_call(0)).\n```\n\n----------------------------------------\n\nTITLE: Module Usage Pattern in uses/2 and use_module/2 Directives\nDESCRIPTION: Example showing support for using parameter variables in the second argument of uses/2 and use_module/2 directives\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/RELEASE_NOTES.md#2025-04-06_snippet_42\n\nLANGUAGE: Logtalk\nCODE:\n```\nuses/2, use_module/2\n```\n\n----------------------------------------\n\nTITLE: Making Imported Predicates Part of an Object's Protocol\nDESCRIPTION: Example showing how to make an imported predicate (modes/2) part of an object's public protocol by combining uses/2 with a scope directive, enabling direct message sending to the object.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/userman/predicates.rst#2025-04-06_snippet_19\n\nLANGUAGE: logtalk\nCODE:\n```\n:- public(modes/2).\n:- uses(numberlist, [modes/2]).\n```\n\n----------------------------------------\n\nTITLE: Working with Test Data Files in Logtalk\nDESCRIPTION: Shows how to use the file_path/2 predicate to handle test data file paths.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/devtools/lgtunit.rst.txt#2025-04-06_snippet_27\n\nLANGUAGE: logtalk\nCODE:\n```\ntest(lgt_unicode_open_4_01, true) :-\n       ^^file_path(sample_utf_8, Path),\n       open(Path, write, Stream, [encoding('UTF-8')]),\n       close(Stream).\n```\n\n----------------------------------------\n\nTITLE: Loading Interactors Example\nDESCRIPTION: Loads the interactors example module in Logtalk.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/engines/interactors/NOTES.md#2025-04-06_snippet_1\n\nLANGUAGE: logtalk\nCODE:\n```\nlogtalk_load(interactors(loader)).\n```\n\n----------------------------------------\n\nTITLE: Loading Heaps Library in Logtalk\nDESCRIPTION: Command to load all entities in the heaps library using the loader.lgt file.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/libraries/heaps.rst.txt#2025-04-06_snippet_0\n\nLANGUAGE: logtalk\nCODE:\n```\n| ?- logtalk_load(heaps(loader)).\n```\n\n----------------------------------------\n\nTITLE: Loading Object Wrapper Hook in Logtalk\nDESCRIPTION: This snippet shows how to load the object_wrapper_hook from the hook_objects library, which provides an alternative method for wrapping Prolog code.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/devtools/code_metrics.rst#2025-04-06_snippet_6\n\nLANGUAGE: prolog\nCODE:\n```\n| ?- logtalk_load(hook_objects(loader)).\n```\n\n----------------------------------------\n\nTITLE: Writing Predicate Data to a TSV File in Logtalk\nDESCRIPTION: Example showing how to write data from a predicate to a TSV file.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/library/tsv/NOTES.md#2025-04-06_snippet_5\n\nLANGUAGE: Logtalk\nCODE:\n```\n| ?- tsv::write_file('output.tsv', user, p/3).\nyes\n```\n\n----------------------------------------\n\nTITLE: Include List Elements - Logtalk Meta-Predicate\nDESCRIPTION: Returns a list of all elements that satisfy a predicate. Takes a closure as predicate, input list, and returns filtered list.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/metap_0.rst.txt#2025-04-06_snippet_0\n\nLANGUAGE: logtalk\nCODE:\n```\ninclude(Closure,List,Included)\n```\n\n----------------------------------------\n\nTITLE: Printing profiling data for defaulty representation\nDESCRIPTION: This snippet prints the profiling data collected for the defaulty representation using the data/0 predicate from the ports_profiler object.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/defaulty/NOTES.md#2025-04-06_snippet_4\n\nLANGUAGE: logtalk\nCODE:\n```\nports_profiler::data.\n```\n\n----------------------------------------\n\nTITLE: Generating Custom Atom Identifier in Logtalk\nDESCRIPTION: This snippet shows how to generate an identifier represented by an atom using 240 bits (30 bytes) of randomness.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/library/ids/NOTES.md#2025-04-06_snippet_3\n\nLANGUAGE: prolog\nCODE:\n```\n| ?- ids(atom, 30)::generate(Identifier).\nIdentifier = 'ie/jYcLsqo8ZguCOF1ZNPFDRvJ03Ww5Qa9e0FxRB'\nyes\n```\n\n----------------------------------------\n\nTITLE: FCube Main Prover Predicate\nDESCRIPTION: Main predicate that reads a formula and applies the prover, printing its counter-model.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/fcube_0.rst.txt#2025-04-06_snippet_1\n\nLANGUAGE: logtalk\nCODE:\n```\nfcube/0\n```\n\n----------------------------------------\n\nTITLE: Stopping Profiling in Logtalk\nDESCRIPTION: Example of using the abolish_events/5 predicate to stop profiling messages sent to a specific object.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/tutorial/profiling.rst#2025-04-06_snippet_5\n\nLANGUAGE: text\nCODE:\n```\n| ?- abolish_events(_, foo, _, _, stop_watch).\n\nyes\n```\n\n----------------------------------------\n\nTITLE: Retrieving Space-Time Coordinates from xyzt Object in Logtalk\nDESCRIPTION: Queries the xyzt object to retrieve the current space-time coordinates, showing how the object combines state from both parent objects.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/mi/NOTES.md#2025-04-06_snippet_4\n\nLANGUAGE: logtalk\nCODE:\n```\nxyzt::xyzt(X, Y, Z, T).\n```\n\n----------------------------------------\n\nTITLE: UltiSnips Logtalk Object Template Example\nDESCRIPTION: Example of a code snippet template provided by UltiSnips integration, showing the basic structure of a Logtalk object that gets inserted when typing 'OBJ' followed by the expansion key.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/coding/vim/NOTES.md#2025-04-06_snippet_3\n\nLANGUAGE: logtalk\nCODE:\n```\n:- object().\n\n:- end_object.\n```\n\n----------------------------------------\n\nTITLE: Defining the current_object/1 Predicate in Logtalk\nDESCRIPTION: Specification of the current_object/1 predicate that enumerates all currently defined objects (static, dynamic, or built-in) through backtracking.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/refman/predicates/current_object_1.rst#2025-04-06_snippet_0\n\nLANGUAGE: logtalk\nCODE:\n```\ncurrent_object(Object)\n```\n\n----------------------------------------\n\nTITLE: Specifying Template and Modes for Category Directive in Logtalk\nDESCRIPTION: Defines the template and modes for the category/1-4 directive, indicating the expected arguments and their types for different variations of the directive.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/refman/directives/category_1_4.rst.txt#2025-04-06_snippet_1\n\nLANGUAGE: logtalk\nCODE:\n```\ncategory(+category_identifier)\n\ncategory(+category_identifier,\n    implements(+implemented_protocols))\n\ncategory(+category_identifier,\n    extends(+extended_categories))\n\ncategory(+category_identifier,\n    complements(+complemented_objects))\n\ncategory(+category_identifier,\n    implements(+implemented_protocols),\n    extends(+extended_categories))\n\ncategory(+category_identifier,\n    implements(+implemented_protocols),\n    complements(+complemented_objects))\n\ncategory(+category_identifier,\n    extends(+extended_categories),\n    complements(+complemented_objects))\n\ncategory(+category_identifier,\n    implements(+implemented_protocols),\n    extends(+extended_categories),\n    complements(+complemented_objects))\n```\n\n----------------------------------------\n\nTITLE: Loading Benchmarks with Event Support\nDESCRIPTION: Loads the benchmark suite with event support turned on and using static binding.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/benchmarks/NOTES.md#2025-04-06_snippet_1\n\nLANGUAGE: logtalk\nCODE:\n```\nlogtalk_load(benchmarks(loader_events)).\n```\n\n----------------------------------------\n\nTITLE: Implementing Private Protocol in Logtalk Object\nDESCRIPTION: Illustrates how to implement a protocol with private scope in a Logtalk object. The 'private::' prefix is used to make all public and protected predicates private.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/userman/protocols.rst.txt#2025-04-06_snippet_11\n\nLANGUAGE: logtalk\nCODE:\n```\n:- object(Object,\n    implements(private::Protocol)).\n    ...\n:- end_object.\n```\n\n----------------------------------------\n\nTITLE: Declaring Dynamic Predicate for Report Generation Flag in Logtalk\nDESCRIPTION: Defines a dynamic predicate generating_/0 used as a flag to detect if a report is in progress when processing multiple test sets as a unified set.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/tap_output_0.rst.txt#2025-04-06_snippet_0\n\nLANGUAGE: Logtalk\nCODE:\n```\ngenerating_/0\n```\n\n----------------------------------------\n\nTITLE: Defining current_logtalk_flag/2 Predicate in Prolog\nDESCRIPTION: Defines the current_logtalk_flag/2 predicate, which enumerates the current Logtalk flag values by backtracking. It accepts a Flag and Value as arguments, both of which can be either variables or atoms.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/refman/predicates/current_logtalk_flag_2.rst#2025-04-06_snippet_0\n\nLANGUAGE: Prolog\nCODE:\n```\ncurrent_logtalk_flag(Flag, Value)\n```\n\n----------------------------------------\n\nTITLE: Checking Test Results with Assertions in Logtalk Unit Tests\nDESCRIPTION: Shows different approaches for checking test results using deterministic assertions, the assertion/1-2 utility predicates, and direct goal checking in the test body.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/devtools/lgtunit.rst#2025-04-06_snippet_26\n\nLANGUAGE: logtalk\nCODE:\n```\n   test(compare_3_order_less, deterministic(Order == (<))) :-\n       compare(Order, 1, 2).\n```\n\n----------------------------------------\n\nTITLE: Installing Windows PowerShell Add-ons\nDESCRIPTION: Command for installing required PowerShell module for environment variable management.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/devtools/overview.rst.txt#2025-04-06_snippet_9\n\nLANGUAGE: powershell\nCODE:\n```\nPS> Install-Module -Name Set-PsEnv\n```\n\n----------------------------------------\n\nTITLE: Defining protocol_property/2 Predicate in Logtalk\nDESCRIPTION: Syntax definition for the protocol_property/2 predicate that enumerates properties of currently defined protocols. This predicate accepts a protocol identifier and a property parameter.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/refman/predicates/protocol_property_2.rst#2025-04-06_snippet_0\n\nLANGUAGE: logtalk\nCODE:\n```\nprotocol_property(Protocol, Property)\n```\n\n----------------------------------------\n\nTITLE: Template and Modes for encoding/1 Directive in Logtalk\nDESCRIPTION: This code snippet shows the template and mode declaration for the encoding/1 directive. The Encoding argument must be an atom representing a valid encoding name.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/refman/directives/encoding_1.rst.txt#2025-04-06_snippet_2\n\nLANGUAGE: Logtalk\nCODE:\n```\nencoding(+atom)\n```\n\n----------------------------------------\n\nTITLE: Loading Family Alternative Example\nDESCRIPTION: Loads the family_alt example module into the Logtalk environment.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/family_alt/NOTES.md#2025-04-06_snippet_1\n\nLANGUAGE: logtalk\nCODE:\n```\nlogtalk_load(family_alt(loader)).\n```\n\n----------------------------------------\n\nTITLE: Hexagon Problem Solver\nDESCRIPTION: Finds solutions for the magic hexagon problem using constraints\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/constraints/yap/NOTES.md#2025-04-06_snippet_2\n\nLANGUAGE: logtalk\nCODE:\n```\nhexagon::mhex(Vs).\n```\n\n----------------------------------------\n\nTITLE: Generating ULID with Discrete Time Components\nDESCRIPTION: Example of generating a ULID using individual date and time components.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/libraries/ulid.rst#2025-04-06_snippet_6\n\nLANGUAGE: logtalk\nCODE:\n```\n| ?- ulid(atom)::generate(2023, 5, 17, 16, 23, 38, 591, ULID).\nULID = '01H0N8CDAZK75C5H3BJSGS4VCQ'\nyes\n```\n\n----------------------------------------\n\nTITLE: Database Manipulation with Uses Directive in Logtalk\nDESCRIPTION: Example demonstrating database operations with the uses directive to manipulate data in the user module.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/userman/predicates.rst#2025-04-06_snippet_50\n\nLANGUAGE: logtalk\nCODE:\n```\n:- object(an_object).\n\n    :- uses(user, [data/1]).\n\n    :- public(some_predicate/1).\n    some_predicate(Arg) :-\n        retractall(data(_)),\n        assertz(data(Arg)).\n\n:- end_object.\n```\n\n----------------------------------------\n\nTITLE: Specifying Predicate Mode and Determinism in Logtalk\nDESCRIPTION: Example of using the mode/2 directive to specify the calling mode and determinism of a predicate in Logtalk. This example declares the member/2 predicate with its argument types and instantiation modes, and specifies that it can have zero or more solutions.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/userman/predicates.rst.txt#2025-04-06_snippet_3\n\nLANGUAGE: logtalk\nCODE:\n```\n:- mode(member(?term, ?list), zero_or_more).\n```\n\n----------------------------------------\n\nTITLE: Uses Directive with Predicate Alias - Logtalk\nDESCRIPTION: Example showing how to define predicate aliases when using the uses/2 directive\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/RELEASE_NOTES.md#2025-04-06_snippet_148\n\nLANGUAGE: Logtalk\nCODE:\n```\nPredicate::Alias\n```\n\n----------------------------------------\n\nTITLE: Defining the true/0 Built-in Method in Logtalk\nDESCRIPTION: The signature of the true/0 built-in method which always succeeds. It is declared as a public method and can be used as a message to an object.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/refman/methods/true_0.rst#2025-04-06_snippet_0\n\nLANGUAGE: logtalk\nCODE:\n```\ntrue\n```\n\n----------------------------------------\n\nTITLE: Loading the Statistics Library in Logtalk\nDESCRIPTION: Command to load all entities in the statistics library using the loader.lgt file. This makes all the statistics predicates available for use in your Logtalk application.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/libraries/statistics.rst.txt#2025-04-06_snippet_0\n\nLANGUAGE: logtalk\nCODE:\n```\n| ?- logtalk_load(statistics(loader)).\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Message Prefixes and Output Streams in Logtalk\nDESCRIPTION: This snippet demonstrates how to use the logtalk::message_prefix_stream/4 hook predicate to define custom message line prefixes and output streams for different message kinds and components.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/userman/printing.rst.txt#2025-04-06_snippet_3\n\nLANGUAGE: prolog\nCODE:\n```\n:- multifile(logtalk::message_prefix_stream/4).\n:- dynamic(logtalk::message_prefix_stream/4).\n\nlogtalk::message_prefix_stream(comment, my_app, '% ', user_output).\nlogtalk::message_prefix_stream(warning, my_app, '* ', user_error).\n```\n\n----------------------------------------\n\nTITLE: Updating Package with Options in Logtalk\nDESCRIPTION: Predicate for updating an installed package to its latest version with specified options.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/packs_0.rst.txt#2025-04-06_snippet_5\n\nLANGUAGE: logtalk\nCODE:\n```\nupdate(Pack,Options)\n```\n\n----------------------------------------\n\nTITLE: Checking Test Results with Assertions in Logtalk Unit Tests\nDESCRIPTION: Shows different approaches for checking test results using deterministic assertions, the assertion/1-2 utility predicates, and direct goal checking in the test body.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/devtools/lgtunit.rst#2025-04-06_snippet_26\n\nLANGUAGE: logtalk\nCODE:\n```\n   test(compare_3_order_less, deterministic(Order == (<))) :-\n       compare(Order, 1, 2).\n```\n\n----------------------------------------\n\nTITLE: Loading the XML Parser Library in Logtalk\nDESCRIPTION: Shows how to load all entities in the xml_parser library using the loader.lgt file. This is the primary way to include the XML parser functionality in a Logtalk application.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/contributions/xml_parser.rst.txt#2025-04-06_snippet_0\n\nLANGUAGE: logtalk\nCODE:\n```\n| ?- logtalk_load(xml_parser(loader)).\n```\n\n----------------------------------------\n\nTITLE: Loading suppress_goal_hook Object\nDESCRIPTION: Directive to load the suppress_goal_hook object into a Logtalk program. This must be called before using the goal suppression functionality.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/suppress_goal_hook_0.rst.txt#2025-04-06_snippet_0\n\nLANGUAGE: logtalk\nCODE:\n```\nlogtalk_load(hook_objects(loader))\n```\n\n----------------------------------------\n\nTITLE: Testing ISO 8601 Library in Logtalk\nDESCRIPTION: This snippet shows how to load and run tests for the ISO 8601 library predicates using the tester.lgt file in Logtalk.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/contributions/iso8601/NOTES.md#2025-04-06_snippet_1\n\nLANGUAGE: Logtalk\nCODE:\n```\n| ?- logtalk_load(iso8601(tester)).\n```\n\n----------------------------------------\n\nTITLE: Checking Directory Existence in Logtalk\nDESCRIPTION: Predicate that succeeds if the specified directory exists, regardless of directory permissions.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/osp_0.rst.txt#2025-04-06_snippet_1\n\nLANGUAGE: prolog\nCODE:\n```\ndirectory_exists(Directory)\n```\n\n----------------------------------------\n\nTITLE: Inline Formatting Examples for Logtalk Documentation\nDESCRIPTION: Examples of inline text formatting using Markdown or reStructuredText syntax, which can be used in Logtalk documentation comments and later converted to various output formats.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/userman/documenting.rst.txt#2025-04-06_snippet_10\n\nLANGUAGE: markdown\nCODE:\n```\nMark *italic text* with one asterisk.\nMark **bold text** with two asterisks.\nMark ``monospaced text`` with two backquotes.\n```\n\n----------------------------------------\n\nTITLE: Defining a Class that Specializes Another Class in Logtalk\nDESCRIPTION: Syntax for creating a class that specializes another class (superclass), establishing a specialization relationship in a class-based hierarchy.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/userman/objects.rst#2025-04-06_snippet_6\n\nLANGUAGE: logtalk\nCODE:\n```\n:- object(Class,\n    specializes(Superclass)).\n    ...\n:- end_object.\n```\n\n----------------------------------------\n\nTITLE: Defining a Class that Specializes Another Class in Logtalk\nDESCRIPTION: Syntax for creating a class that specializes another class (superclass), establishing a specialization relationship in a class-based hierarchy.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/userman/objects.rst#2025-04-06_snippet_6\n\nLANGUAGE: logtalk\nCODE:\n```\n:- object(Class,\n    specializes(Superclass)).\n    ...\n:- end_object.\n```\n\n----------------------------------------\n\nTITLE: Random Seed Management\nDESCRIPTION: Predicates for getting and setting the random generator seed.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/arbitrary_0.rst.txt#2025-04-06_snippet_3\n\nLANGUAGE: logtalk\nCODE:\n```\nget_seed(Seed)\nset_seed(Seed)\n```\n\n----------------------------------------\n\nTITLE: Declaring EDCG Passed Arguments in Logtalk\nDESCRIPTION: Shows how to declare passed arguments using the short form pass_info/1 or the long form pass_info/2, which are conceptually similar to accumulators with an equality joiner.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/library/edcg/NOTES.md#2025-04-06_snippet_6\n\nLANGUAGE: logtalk\nCODE:\n```\npass_info(Pass).\n```\n\nLANGUAGE: logtalk\nCODE:\n```\npass_info(Pass, PStart).\n```\n\n----------------------------------------\n\nTITLE: Defining Table of Contents for Message Delegation in reStructuredText\nDESCRIPTION: This RST code snippet defines a table of contents for the message delegation documentation, including a single entry for 'delegate_message_1'.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/refman/control/message_delegation.rst.txt#2025-04-06_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. toctree::\n   :maxdepth: 1\n\n   delegate_message_1\n```\n\n----------------------------------------\n\nTITLE: Attempting to open a vault with incorrect password in Logtalk\nDESCRIPTION: This snippet shows an attempt to open the 'my_vault' object with an incorrect password, which will be rejected.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/complements/restrict/NOTES.md#2025-04-06_snippet_3\n\nLANGUAGE: logtalk\nCODE:\n```\nmy_vault::open('abc123').\n```\n\n----------------------------------------\n\nTITLE: Loading the lgtdoc Tool in Logtalk\nDESCRIPTION: Query to load the lgtdoc tool into a Logtalk session. This must be executed before using any of the documentation generation features.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/devtools/lgtdoc.rst#2025-04-06_snippet_0\n\nLANGUAGE: logtalk\nCODE:\n```\n| ?- logtalk_load(lgtdoc(loader)).\n```\n\n----------------------------------------\n\nTITLE: Load Registry Predicate (Logtalk)\nDESCRIPTION: Predicate for loading all registry files from a specified directory. Accepts a directory path as an atom argument.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/packs_common_0.rst.txt#2025-04-06_snippet_5\n\nLANGUAGE: logtalk\nCODE:\n```\nload_registry(+atom)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Logtalk Flag Values with current_logtalk_flag/2\nDESCRIPTION: The current_logtalk_flag/2 predicate is used to enumerate current Logtalk flag values through backtracking. It can be used to query specific flag values or to iterate through all flags and their values.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/refman/predicates/current_logtalk_flag_2.rst.txt#2025-04-06_snippet_0\n\nLANGUAGE: prolog\nCODE:\n```\ncurrent_logtalk_flag(Flag, Value)\n```\n\n----------------------------------------\n\nTITLE: Opening Generated HTML Documentation\nDESCRIPTION: Bash command to open the generated HTML documentation index file in the default web browser.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/userman/documenting.rst.txt#2025-04-06_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n$ open _build/html/index.html\n```\n\n----------------------------------------\n\nTITLE: Predicate Declaration - logtalk_compile/1\nDESCRIPTION: Defines the basic syntax for the logtalk_compile predicate that accepts either a single file or list of files.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/refman/predicates/logtalk_compile_1.rst#2025-04-06_snippet_0\n\nLANGUAGE: logtalk\nCODE:\n```\nlogtalk_compile(File)\nlogtalk_compile(Files)\n```\n\n----------------------------------------\n\nTITLE: Using Prolog Module Expansions in Logtalk\nDESCRIPTION: This code snippet shows how to use expansions defined in a Prolog module within a Logtalk custom workflow. It uses the prolog_module_hook/1 object as part of a hook set.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/userman/expansion.rst#2025-04-06_snippet_17\n\nLANGUAGE: Logtalk\nCODE:\n```\n| ?- logtalk_load(\n         source,\n         [hook(hook_set([prolog_module_hook(functions), my_expansion]))]\n     ).\n```\n\n----------------------------------------\n\nTITLE: Solving Puzzle using CLP(FD) in Logtalk\nDESCRIPTION: Demonstrates solving a puzzle using the CLP(FD) constraints in Logtalk.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/constraints/swipl/NOTES.md#2025-04-06_snippet_2\n\nLANGUAGE: logtalk\nCODE:\n```\npuzzle::solve(Sum=Rs).\n```\n\n----------------------------------------\n\nTITLE: Defining imports_category/2-3 Predicate in Prolog\nDESCRIPTION: Specification of the imports_category/2-3 predicate, showing its arity and arguments. It enumerates importation relations between objects and categories, with an optional scope parameter.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/refman/predicates/imports_category_2_3.rst.txt#2025-04-06_snippet_0\n\nLANGUAGE: Prolog\nCODE:\n```\nimports_category(Object, Category)\n\nimports_category(Object, Category, Scope)\n```\n\n----------------------------------------\n\nTITLE: Testing List Empty Predicate with Message Counter\nDESCRIPTION: Sends a message to the spied list object to test if a list is empty, which will be monitored.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/profiling/NOTES.md#2025-04-06_snippet_5\n\nLANGUAGE: logtalk\nCODE:\n```\nlist::empty([]).\n```\n\n----------------------------------------\n\nTITLE: Adding terms to persistency object\nDESCRIPTION: Adds two terms 'a' and 'b' to the persistency object's state.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/persistency/NOTES.md#2025-04-06_snippet_3\n\nLANGUAGE: logtalk\nCODE:\n```\npersistency::(add(a), add(b)).\n```\n\n----------------------------------------\n\nTITLE: Local Archive Pack Version\nDESCRIPTION: Example of defining a pack version using a local archive file with checksum\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/devtools/packs.rst.txt#2025-04-06_snippet_25\n\nLANGUAGE: prolog\nCODE:\n```\nversion(\n    1:0:0,\n    stable,\n    'file:///home/jdoe/work/my_awesome_library/v1.0.0.tar.gz',\n    sha256 - '1944773afba1908cc6194297ff6b5ac649a844ef69a69b2bcdf267cfa8bfce1e',\n    [],\n    all\n).\n```\n\n----------------------------------------\n\nTITLE: Setting Logtalk Hook to Use Module Term Expansions\nDESCRIPTION: Command for setting the Logtalk hook flag to use a module as a hook object for term and goal expansions when compiling Prolog modules as objects.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/userman/migration.rst.txt#2025-04-06_snippet_5\n\nLANGUAGE: text\nCODE:\n```\n| ?- set_logtalk_flag(hook, system).\n```\n\n----------------------------------------\n\nTITLE: Testing a Prolog Module Predicate with QuickCheck\nDESCRIPTION: Example showing how to test a predicate from a Prolog module using QuickCheck.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/tools/lgtunit/NOTES.md#2025-04-06_snippet_22\n\nLANGUAGE: prolog\nCODE:\n```\n| ?- lgtunit::quick_check(\n\t\tpairs:pairs_keys_values(\n\t\t\t+list(pair(atom,integer)),\n\t\t\t-list(atom),\n\t\t\t-list(integer)\n\t\t)\n\t ).\n% 100 random tests passed, 0 discarded\n% starting seed: seed(3172,9814,20125)\nyes\n```\n\n----------------------------------------\n\nTITLE: Viewing Help for Bash Script Options\nDESCRIPTION: Command to display help information for the bash script options. Shows a list and description of all available script parameters.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/scripts/embedding/swipl/NOTES.md#2025-04-06_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nswipl_logtalk_qlf.sh -h\n```\n\n----------------------------------------\n\nTITLE: Viewing Help for PowerShell Script Options\nDESCRIPTION: Command to display help information for the PowerShell script options. Shows a list and description of all available script parameters.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/scripts/embedding/swipl/NOTES.md#2025-04-06_snippet_3\n\nLANGUAGE: powershell\nCODE:\n```\nswipl_logtalk_qlf.ps1 -h\n```\n\n----------------------------------------\n\nTITLE: Defining Table of Contents for Logtalk Flag Predicates in reStructuredText\nDESCRIPTION: This reStructuredText snippet defines a table of contents for Logtalk flag predicates documentation. It includes links to three specific predicates: current_logtalk_flag/2, set_logtalk_flag/2, and create_logtalk_flag/3.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/refman/predicates/flag_predicates.rst#2025-04-06_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. toctree::\n   :maxdepth: 1\n\n   current_logtalk_flag_2\n   set_logtalk_flag_2\n   create_logtalk_flag_3\n```\n\n----------------------------------------\n\nTITLE: Testing the Git Library in Logtalk\nDESCRIPTION: Command to load the tester file for testing the git library predicates.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/library/git/NOTES.md#2025-04-06_snippet_1\n\nLANGUAGE: Prolog\nCODE:\n```\n| ?- logtalk_load(git(tester)).\n```\n\n----------------------------------------\n\nTITLE: Using lgtunit Assertion Predicates in Tests\nDESCRIPTION: Directive to import the assertion predicates from the lgtunit object into the test object. This is required when using these predicates with local predicate calls to ensure proper message passing context.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/tools/lgtunit/NOTES.md#2025-04-06_snippet_46\n\nLANGUAGE: logtalk\nCODE:\n```\n:- uses(lgtunit, [assertion/1, assertion/2]).\n```\n\n----------------------------------------\n\nTITLE: Enumerating Metric Scores for Logtalk Object in Logtalk\nDESCRIPTION: These queries retrieve scores for number of clauses, depth of inheritance tree, and coupling metrics for the built-in logtalk object. They show how to get specific metric scores for an entity.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/tools/code_metrics/SCRIPT.txt#2025-04-06_snippet_5\n\nLANGUAGE: Logtalk\nCODE:\n```\n| ?- noc_metric::entity_score(logtalk, Score).\n```\n\nLANGUAGE: Logtalk\nCODE:\n```\n| ?- dit_metric::entity_score(logtalk, Score).\n```\n\nLANGUAGE: Logtalk\nCODE:\n```\n| ?- coupling_metric::entity_score(logtalk, Score).\n```\n\n----------------------------------------\n\nTITLE: Installing Python Dependencies\nDESCRIPTION: Commands for installing required Python packages for documentation generation.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/devtools/overview.rst.txt#2025-04-06_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n$ pip install --upgrade pygments\n$ pip install --upgrade sphinx\n$ pip install --upgrade sphinx_rtd_theme\n```\n\nLANGUAGE: shell\nCODE:\n```\n$ cd manuals/sources\n$ python3 -m pip install -r requirements.txt\n```\n\n----------------------------------------\n\nTITLE: Logtalk Sample Loader Files\nDESCRIPTION: Reference to sample configuration files provided in the Logtalk distribution for loading applications, defining settings, and running tests.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/userman/installing.rst#2025-04-06_snippet_1\n\nLANGUAGE: prolog\nCODE:\n```\nloader-sample.lgt\nsettings-sample.lgt\ntester-sample.lgt\n```\n\n----------------------------------------\n\nTITLE: Enumerating Square Width Properties\nDESCRIPTION: Lists all the properties of the width/1 predicate for a square object. This shows the original predicate's properties for comparison with its alias.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/aliases/NOTES.md#2025-04-06_snippet_4\n\nLANGUAGE: logtalk\nCODE:\n```\n%%table\nsquare(2)::predicate_property(width(_), Property).\n```\n\n----------------------------------------\n\nTITLE: Loading Encrypted Logtalk Files Pattern\nDESCRIPTION: Code pattern for loading encrypted Logtalk files in driver files. It uses directory context management to ensure files are loaded from the correct location.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/adapters/NOTES.md#2025-04-06_snippet_7\n\nLANGUAGE: prolog\nCODE:\n```\n...,\nlogtalk_load_context(directory, Directory),\ncurrent_directory(Current),\nsetup_call_cleanup(\n\tchange_directory(Directory),\n\tload_files([...]),\n\tchange_directory(Current)\n),\n...,\n```\n\n----------------------------------------\n\nTITLE: Checking Expected Term Status in Logtalk\nDESCRIPTION: Predicates to check if an expected term holds a value or an error. These are useful for conditional logic based on the expected term's state.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/expected_1.rst.txt#2025-04-06_snippet_0\n\nLANGUAGE: Logtalk\nCODE:\n```\nis_expected/0\n\nis_unexpected/0\n```\n\n----------------------------------------\n\nTITLE: Scanning a Single Logtalk Entity\nDESCRIPTION: This snippet shows how to scan a single Logtalk entity for dead code using the dead_code_scanner tool. It uses the entity/1 predicate of the dead_code_scanner object.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/devtools/dead_code_scanner.rst#2025-04-06_snippet_4\n\nLANGUAGE: logtalk\nCODE:\n```\n| ?- dead_code_scanner::entity(some_object).\n```\n\n----------------------------------------\n\nTITLE: Testing the Broken Predicate Manually\nDESCRIPTION: Manual test case that fails to expose the bug in the every_other/2 predicate.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/tools/lgtunit/NOTES.md#2025-04-06_snippet_17\n\nLANGUAGE: prolog\nCODE:\n```\n| ?- every_other([1,2,3,4,5,6], List).\nList = [2, 4, 6]\nyes\n```\n\n----------------------------------------\n\nTITLE: Defining Greater Than or Equal Operator in Logtalk Protocol\nDESCRIPTION: Defines the greater than or equal operator (>=) which evaluates to true if Term1 is equal to or greater than Term2. It uses static compilation flags and works with term inputs.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/comparingp_0.rst.txt#2025-04-06_snippet_3\n\nLANGUAGE: Logtalk\nCODE:\n```\nTerm1>=Term2\n```\n\n----------------------------------------\n\nTITLE: Using Prolog Module Predicates with Directives in Logtalk\nDESCRIPTION: Shows how to use the use_module/2 directive to call Prolog module predicates without explicit qualification.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/userman/predicates.rst#2025-04-06_snippet_59\n\nLANGUAGE: logtalk\nCODE:\n```\n:- use_module(module, [bar/0]).\n\nfoo :-\n    ...,\n    bar,\n    ...\n```\n\n----------------------------------------\n\nTITLE: Displaying Pack Information in Logtalk\nDESCRIPTION: Illustrates how to print detailed information about a specific pack.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/devtools/packs.rst.txt#2025-04-06_snippet_34\n\nLANGUAGE: logtalk\nCODE:\n```\n| ?- packs::describe(lflat).\n```\n\n----------------------------------------\n\nTITLE: Processing Purchase Request with Manager in Chain of Responsibility\nDESCRIPTION: Demonstrates a purchase request of 3500 units that will be approved by the Manager in the chain.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/design_patterns/behavioral/chain_of_responsibility/NOTES.md#2025-04-06_snippet_2\n\nLANGUAGE: logtalk\nCODE:\n```\nmanager::process_request(3500).\n```\n\n----------------------------------------\n\nTITLE: Loading Multifile Example\nDESCRIPTION: Loads the multifile example and required library files using logtalk_load/1.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/multifile/NOTES.md#2025-04-06_snippet_0\n\nLANGUAGE: logtalk\nCODE:\n```\nlogtalk_load(multifile(loader)).\n```\n\n----------------------------------------\n\nTITLE: Loading the Profiler Tool in Logtalk\nDESCRIPTION: Shows how to load the profiler tool using the logtalk_load/1 predicate with the profiler loader.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/devtools/profiler.rst#2025-04-06_snippet_0\n\nLANGUAGE: prolog\nCODE:\n```\n?- logtalk_load(profiler(loader)).\n```\n\n----------------------------------------\n\nTITLE: Modes and Number of Proofs for current_object/1\nDESCRIPTION: Specifies the modes and number of proofs for the current_object/1 predicate, indicating it can be called with a variable or object identifier and returns multiple solutions.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/refman/predicates/current_object_1.rst#2025-04-06_snippet_1\n\nLANGUAGE: logtalk\nCODE:\n```\ncurrent_object(?object_identifier) - zero_or_more\n```\n\n----------------------------------------\n\nTITLE: Defining complements_object/2 Predicate Signature\nDESCRIPTION: Defines the signature and basic usage of the complements_object/2 predicate that enumerates category-object complement relationships.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/refman/predicates/complements_object_2.rst#2025-04-06_snippet_0\n\nLANGUAGE: logtalk\nCODE:\n```\ncomplements_object(Category, Object)\n```\n\n----------------------------------------\n\nTITLE: Representing Teacher Timetables in Prolog\nDESCRIPTION: This snippet shows the timetable for individual teachers, specifying which subjects they teach to which year groups during different periods. It uses a structured format to represent the schedule for each teacher.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/lpa/timetables/NOTES.md#2025-04-06_snippet_8\n\nLANGUAGE: prolog\nCODE:\n```\nTEACHER: nicky\np1: teach french to first_year\np2: teach biology to first_year\np3: teach french to second_year\np4: teach biology to second_year\np5: teach biology to fourth_year\n\nTEACHER: brian\np1: teach maths to second_year\np2: teach music to second_year\np3: teach maths to first_year\np4: teach music to first_year\np5: teach music to third_year\n\nTEACHER: dave\np1: teach maths to third_year\np2: teach maths to fourth_year\np3:\np4:\np5:\n\nTEACHER: clive\np1: teach french to fourth_year\np2: teach prolog to second_year\np3: teach prolog to third_year\np4: teach french to third_year\np5: teach prolog to first_year\n\nTEACHER: diane\np1: teach accountancy to first_year\np2: teach accountancy to third_year\np3: teach accountancy to fourth_year\np4:\np5: teach accountancy to second_year\n\nTEACHER: phil\np1: teach prolog++ to second_year\np2: teach prolog++ to first_year\np3:\np4: teach prolog++ to fourth_year\np5: teach prolog++ to third_year\n```\n\n----------------------------------------\n\nTITLE: Specifying Modes and Proofs for ask_question/5 in Logtalk\nDESCRIPTION: Specifies the input/output modes and number of proofs for the ask_question/5 method, indicating that it takes nonvar inputs for the first four arguments and returns a term as the answer.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/refman/methods/ask_question_5.rst.txt#2025-04-06_snippet_1\n\nLANGUAGE: Logtalk\nCODE:\n```\nask_question(+nonvar, +nonvar, +nonvar, +callable, -term) - one\n```\n\n----------------------------------------\n\nTITLE: Term Write Depth Example in Prolog\nDESCRIPTION: Demonstrates writing a nested list with a maximum depth limit using write_term/3 predicate.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/userman/debugging.rst#2025-04-06_snippet_22\n\nLANGUAGE: prolog\nCODE:\n```\n| ?- write_term([0,1,2,3,4,5,6,7,8,9], [max_depth(5)]).\n\n[0,1,2,3,4|...]\nyes\n```\n\n----------------------------------------\n\nTITLE: Processing Directories with rdirectory/1 in Logtalk\nDESCRIPTION: A simplified version of rdirectory/2 that uses default options for converting Prolog files in a directory and its subdirectories to Logtalk objects.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/wrapper_0.rst.txt#2025-04-06_snippet_1\n\nLANGUAGE: Logtalk\nCODE:\n```\nrdirectory/1\n```\n\n----------------------------------------\n\nTITLE: Mode Declarations for Threaded Engine Creation\nDESCRIPTION: Specifies the valid modes and number of proofs for the threaded engine creation predicate.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/refman/predicates/threaded_engine_create_3.rst#2025-04-06_snippet_2\n\nLANGUAGE: prolog\nCODE:\n```\nthreaded_engine_create(@term, @callable, @nonvar) - one\nthreaded_engine_create(@term, @callable, --nonvar) - one\n```\n\n----------------------------------------\n\nTITLE: Querying category-object complementation relationships in Logtalk\nDESCRIPTION: Shows how to query which categories explicitly complement which objects using the complements_object/2 built-in predicate.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/userman/objects.rst#2025-04-06_snippet_26\n\nLANGUAGE: text\nCODE:\n```\n| ?- complements_object(Category, Object).\n```\n\n----------------------------------------\n\nTITLE: Preprocessing Test Results for External Allure Report Generation\nDESCRIPTION: Command to run the logtalk_allure_report script with the -p option, which only preprocesses the xUnit test results without generating the actual report. Useful when using external Allure reporting tools.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/tools/lgtunit/NOTES.md#2025-04-06_snippet_50\n\nLANGUAGE: bash\nCODE:\n```\n$ logtalk_allure_report -p\n```\n\n----------------------------------------\n\nTITLE: Defining Pack Home URL in Logtalk\nDESCRIPTION: Specifies the pack's home URL, which should be an HTTPS or file URL. This predicate returns a single atom containing the URL.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/pack_protocol_0.rst.txt#2025-04-06_snippet_3\n\nLANGUAGE: Logtalk\nCODE:\n```\nhome(Home)\n```\n\n----------------------------------------\n\nTITLE: Defining Edge Cases for Odd Integers in Logtalk\nDESCRIPTION: Demonstrates how to define edge cases for the 'odd' type for use in QuickCheck implementations.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/library/arbitrary/NOTES.md#2025-04-06_snippet_5\n\nLANGUAGE: logtalk\nCODE:\n```\n:- multifile(arbitrary::edge_case/2).\narbitrary::edge_case(odd,  1).\narbitrary::edge_case(odd, -1).\n```\n\n----------------------------------------\n\nTITLE: Checking Versions in Logtalk\nDESCRIPTION: Prints the versions of Logtalk, Prolog backend, and kernel when running as a notebook.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/missing_data/NOTES.md#2025-04-06_snippet_0\n\nLANGUAGE: logtalk\nCODE:\n```\n%versions\n```\n\n----------------------------------------\n\nTITLE: Threaded Engine Fetch Usage Example\nDESCRIPTION: Demonstrates how to use the threaded_engine_fetch predicate within a logic flow to retrieve a term from the engine term queue.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/refman/predicates/threaded_engine_fetch_1.rst#2025-04-06_snippet_2\n\nLANGUAGE: prolog\nCODE:\n```\n..., threaded_engine_fetch(Term), ...\n```\n\n----------------------------------------\n\nTITLE: Threaded Engine Fetch Usage Example\nDESCRIPTION: Demonstrates how to use the threaded_engine_fetch predicate within a logic flow to retrieve a term from the engine term queue.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/refman/predicates/threaded_engine_fetch_1.rst#2025-04-06_snippet_2\n\nLANGUAGE: prolog\nCODE:\n```\n..., threaded_engine_fetch(Term), ...\n```\n\n----------------------------------------\n\nTITLE: Generating Reports with Source Code Links for Logtalk Tests\nDESCRIPTION: Complex example showing how to generate test reports with links to the source code on GitHub. Uses the -s option to suppress path prefixes and -u to specify the base URL for the source code repository.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/tools/lgtunit/NOTES.md#2025-04-06_snippet_54\n\nLANGUAGE: bash\nCODE:\n```\n$ cd $LOGTALKUSER\n$ logtalk_tester \\\n  -p gnu \\\n  -f xunit \\\n  -s \"$LOGTALKUSER\" \\\n  -u \"https://github.com/LogtalkDotOrg/logtalk3/tree/3e4ea295986fb09d0d4aade1f3b4968e29ef594e\"\n```\n\n----------------------------------------\n\nTITLE: Testing the Code Metrics Tool in Logtalk\nDESCRIPTION: Query to load and run tests for the code_metrics tool.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/devtools/code_metrics.rst#2025-04-06_snippet_1\n\nLANGUAGE: Logtalk\nCODE:\n```\n| ?- logtalk_load(code_metrics(tester)).\n```\n\n----------------------------------------\n\nTITLE: Loading the Profiler Tool in Logtalk\nDESCRIPTION: Shows how to load the profiler tool using the logtalk_load/1 predicate with the profiler loader.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/devtools/profiler.rst#2025-04-06_snippet_0\n\nLANGUAGE: prolog\nCODE:\n```\n?- logtalk_load(profiler(loader)).\n```\n\n----------------------------------------\n\nTITLE: Loading FCube Library in Logtalk\nDESCRIPTION: Command to load all entities in the FCube port using the loader file.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/ports/fcube.rst#2025-04-06_snippet_0\n\nLANGUAGE: logtalk\nCODE:\n```\n| ?- logtalk_load(fcube(loader)).\n```\n\n----------------------------------------\n\nTITLE: Loading Logtalk in SWI-Prolog\nDESCRIPTION: Directive to load Logtalk on-demand in SWI-Prolog. This loads the logtalk module which initializes the Logtalk environment.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/scripts/pack/logtalk/README.md#2025-04-06_snippet_0\n\nLANGUAGE: prolog\nCODE:\n```\n:- use_module(library(logtalk)).\n```\n\n----------------------------------------\n\nTITLE: Changed with Argument - Notify Dependents of Specific Change\nDESCRIPTION: Predicate that notifies all dependent objects when the receiver changes as specified by the Change argument. Accepts a non-variable argument.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/subject_0.rst.txt#2025-04-06_snippet_1\n\nLANGUAGE: logtalk\nCODE:\n```\nchanged(Change)\n```\n\n----------------------------------------\n\nTITLE: MacPorts Dependencies Installation - Shell\nDESCRIPTION: Shell commands for installing tool dependencies using MacPorts package manager on macOS.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/devtools/overview.rst#2025-04-06_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n$ sudo port install d2 graphviz\n$ sudo port install texinfo pandoc\n$ sudo port install libxslt fop texlive\n$ sudo port install gsed\n$ sudo port install coreutils gsed libarchive gnupg2 git curl wget direnv\n$ sudo port install gh glab\n```\n\n----------------------------------------\n\nTITLE: Event Representation in Logtalk\nDESCRIPTION: Shows the representation of before and after events generated by sending a message to an object in Logtalk.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/tutorial/profiling.rst.txt#2025-04-06_snippet_1\n\nLANGUAGE: logtalk\nCODE:\n```\n(before, foo, bar(X), user)\n(after, foo, bar(1), user)\n```\n\n----------------------------------------\n\nTITLE: Defining Inequality Operator in Logtalk Protocol\nDESCRIPTION: Defines the inequality operator (=\\=) which evaluates to true if Term1 is not equal to Term2. It uses static compilation flags and works with term inputs.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/comparingp_0.rst.txt#2025-04-06_snippet_5\n\nLANGUAGE: Logtalk\nCODE:\n```\nTerm1=\\=Term2\n```\n\n----------------------------------------\n\nTITLE: Generating Cross-Reference Diagram\nDESCRIPTION: Example of generating a predicate call cross-referencing diagram for a source file and single entity.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/tools/diagrams/SCRIPT.txt#2025-04-06_snippet_2\n\nLANGUAGE: logtalk\nCODE:\n```\n| ?- xref_diagram(dot)::file(points).\n| ?- xref_diagram(dot)::entity(point).\n| ?- xref_diagram(dot)::entity(point, [url_prefixes('','')]).\n```\n\n----------------------------------------\n\nTITLE: Retrieving Pack README Path in Logtalk\nDESCRIPTION: Shows how to get the file path of a pack's README.md file.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/devtools/packs.rst.txt#2025-04-06_snippet_33\n\nLANGUAGE: logtalk\nCODE:\n```\n| ?- packs::readme(lflat, Path).\n```\n\n----------------------------------------\n\nTITLE: Simulating View Button Click in Logtalk\nDESCRIPTION: Demonstrates the interaction of the 'view' button object with the mediator by simulating a click event.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/design_patterns/behavioral/mediator/NOTES.md#2025-04-06_snippet_3\n\nLANGUAGE: logtalk\nCODE:\n```\nview_button::click.\n```\n\n----------------------------------------\n\nTITLE: Configuring Sphinx Table of Contents for Logtalk Handbook\nDESCRIPTION: Sets up the table of contents structure for the Logtalk Handbook using Sphinx's toctree directive. It defines the depth, caption, and includes various documentation sections.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/index.rst.txt#2025-04-06_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. toctree::\n   :maxdepth: 3\n   :caption: Contents\n\n   userman/index\n   refman/index\n   tutorial/index\n   faq/index\n   devtools/index\n   libraries/index\n   ports/index\n   contributions/index\n   glossary\n   bibliography\n   genindex\n```\n\n----------------------------------------\n\nTITLE: Searching API Documentation for Non-terminal\nDESCRIPTION: Command to search for documentation on a specific non-terminal (body_term//2) in the APIs documentation.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/tools/help/SCRIPT.txt#2025-04-06_snippet_12\n\nLANGUAGE: logtalk\nCODE:\n```\n| ?- help::apis(body_term//2).\n```\n\n----------------------------------------\n\nTITLE: Usage Examples\nDESCRIPTION: Examples showing how to use threaded/1 with conjunctions and disjunctions.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/refman/predicates/threaded_1.rst#2025-04-06_snippet_3\n\nLANGUAGE: prolog\nCODE:\n```\nthreaded((Goal, Goals))\nthreaded((Goal; Goals))\n```\n\n----------------------------------------\n\nTITLE: Loading Instructions for CSV Questions Module\nDESCRIPTION: Directive showing how to load the CSV questions functionality into a Logtalk program.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/csv_guess_questions_0.rst.txt#2025-04-06_snippet_1\n\nLANGUAGE: prolog\nCODE:\n```\nlogtalk_load(csv(loader))\n```\n\n----------------------------------------\n\nTITLE: (@)/1 Control Construct Syntax in Logtalk\nDESCRIPTION: Demonstrates the basic syntax of the (@)/1 control construct for calling predicate definitions in the 'this' context.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/refman/control/call_in_this_1.rst#2025-04-06_snippet_0\n\nLANGUAGE: logtalk\nCODE:\n```\n@Predicate\n```\n\n----------------------------------------\n\nTITLE: Loading a Prolog Module as a Logtalk Object\nDESCRIPTION: Demonstrates how to compile and load a Prolog module as a Logtalk object, which allows testing and code coverage for Prolog modules.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/devtools/lgtunit.rst#2025-04-06_snippet_58\n\nLANGUAGE: prolog\nCODE:\n```\n| ?- logtalk_load(module).\n...\n```\n\n----------------------------------------\n\nTITLE: Loading Debug Messages Tool and Example Object\nDESCRIPTION: Query to load both the debug_messages tool and the example 'foo' object.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/tools/debug_messages/NOTES.md#2025-04-06_snippet_3\n\nLANGUAGE: Prolog\nCODE:\n```\n| ?- {debug_messages(loader), foo}.\n```\n\n----------------------------------------\n\nTITLE: Loading Wrapped Prolog Files in Logtalk\nDESCRIPTION: Example of loading Prolog files using the wrapper hook object to convert them into Logtalk objects.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/userman/expansion.rst.txt#2025-04-06_snippet_4\n\nLANGUAGE: prolog\nCODE:\n```\n| ?- logtalk_load(\n         ['my_car.pl', 'lease_car.pl'],\n         [hook(wrapper(car_protocol))]\n     ).\n```\n\n----------------------------------------\n\nTITLE: Loading Uses Diagram Object in Logtalk\nDESCRIPTION: Command to load the uses_diagram object via the diagrams loader\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/uses_diagram_0.rst.txt#2025-04-06_snippet_0\n\nLANGUAGE: logtalk\nCODE:\n```\nlogtalk_load(diagrams(loader))\n```\n\n----------------------------------------\n\nTITLE: Defining the remove_directive_ predicate in Logtalk\nDESCRIPTION: Table of directives to be removed. This dynamic predicate tracks directives that should be removed from an object during code transformation or compilation.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/wrapper_0.rst.txt#2025-04-06_snippet_26\n\nLANGUAGE: logtalk\nCODE:\n```\nremove_directive_(Object,Directive)\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Self Message Behavior\nDESCRIPTION: Shows how self messages reset the sender context, leading to an existence error when trying to call foo/1.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/self_vs_super/NOTES.md#2025-04-06_snippet_4\n\nLANGUAGE: logtalk\nCODE:\n```\ncatch(proto::meta_self(foo, X), Error, true).\n```\n\n----------------------------------------\n\nTITLE: ReStructuredText Document Structure\nDESCRIPTION: Basic ReStructuredText document structure showing the ports section header and table of contents directive for port documentation.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/ports/index.rst.txt#2025-04-06_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n=====\nPorts\n=====\n\nThe documentation of each port can also be found in the port directory in the ``NOTES.md`` file.\n\n.. toctree::\n   :maxdepth: 2\n\n   fcube\n   metagol\n   toychr\n```\n\n----------------------------------------\n\nTITLE: Querying Object-Category Importation in Logtalk\nDESCRIPTION: Shows how to use the imports_category/2 and imports_category/3 built-in predicates to find which objects import which categories, optionally including the importation scope.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/userman/categories.rst.txt#2025-04-06_snippet_13\n\nLANGUAGE: prolog\nCODE:\n```\n| ?- imports_category(Object, Category).\n```\n\nLANGUAGE: prolog\nCODE:\n```\n| ?- imports_category(Object, Category, Scope).\n```\n\n----------------------------------------\n\nTITLE: Testing Java Library in Logtalk\nDESCRIPTION: Command to load and run tests for the Java library by loading the tester.lgt file.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/libraries/java.rst.txt#2025-04-06_snippet_1\n\nLANGUAGE: logtalk\nCODE:\n```\n| ?- logtalk_load(java(tester)).\n```\n\n----------------------------------------\n\nTITLE: Declaring Discontiguous Predicates in Logtalk\nDESCRIPTION: Example of discontiguous directive that allows a predicate's clauses to be non-contiguous in the source code. This directive should be used sparingly as it can make code harder to read.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/userman/predicates.rst#2025-04-06_snippet_9\n\nLANGUAGE: logtalk\nCODE:\n```\n:- discontiguous(foo/1).\n```\n\n----------------------------------------\n\nTITLE: Specifying fail/0 Method Mode\nDESCRIPTION: Mode declaration for the fail/0 method indicating it provides one proof and always fails.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/refman/methods/fail_0.rst#2025-04-06_snippet_1\n\nLANGUAGE: logtalk\nCODE:\n```\nfail - one\n```\n\n----------------------------------------\n\nTITLE: Prolog version term representation\nDESCRIPTION: Compound term structure for representing Prolog version numbers\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/RELEASE_NOTES.md#2025-04-06_snippet_65\n\nLANGUAGE: Prolog\nCODE:\n```\nv/3\n```\n\n----------------------------------------\n\nTITLE: User-specific Installation Path for GtkSourceView 3.x\nDESCRIPTION: Directory path for installing the Logtalk language specification file (logtalk.lang) in the user's home directory for GtkSourceView 3.x.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/coding/gtksourceview3/NOTES.md#2025-04-06_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n~/.local/share/gtksourceview-3.0/language-specs/\n```\n\n----------------------------------------\n\nTITLE: Loading Buckets Example\nDESCRIPTION: Loads the buckets example and required libraries into the Logtalk environment.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/threads/buckets/NOTES.md#2025-04-06_snippet_1\n\nLANGUAGE: logtalk\nCODE:\n```\nlogtalk_load(buckets(loader)).\n```\n\n----------------------------------------\n\nTITLE: Date Conversion Example - Current Date\nDESCRIPTION: Example showing how to get the current date and convert between Julian day numbers and calendar dates.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/iso8601_0.rst.txt#2025-04-06_snippet_0\n\nLANGUAGE: prolog\nCODE:\n```\ndate(JD,Year,Month,Day)\nJD=2453471,Year=2005,Month=4,Day=10\n```\n\n----------------------------------------\n\nTITLE: Displaying Predicate-Specific Profiling Data\nDESCRIPTION: Shows profiling data for a specific predicate (print_path/1) within an entity (state_space)\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/tools/ports_profiler/SCRIPT.txt#2025-04-06_snippet_6\n\nLANGUAGE: logtalk\nCODE:\n```\n| ?- ports_profiler::data(state_space, print_path/1).\n```\n\n----------------------------------------\n\nTITLE: Running YAP Logtalk Shell Script Help Option\nDESCRIPTION: Command to display the usage help information for the YAP Logtalk shell script on POSIX systems.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/scripts/embedding/yap/NOTES.md#2025-04-06_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nyap_logtalk_pl.sh -h\n```\n\n----------------------------------------\n\nTITLE: Loading genint Object in Logtalk\nDESCRIPTION: Demonstrates how to load the genint object in Logtalk. This is required to use the functionality provided by the genint object.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/genint_0.rst.txt#2025-04-06_snippet_0\n\nLANGUAGE: Logtalk\nCODE:\n```\nlogtalk_load(genint(loader))\n```\n\n----------------------------------------\n\nTITLE: Windows PowerShell Add-ons Installation - PowerShell\nDESCRIPTION: PowerShell command for installing additional PowerShell modules on Windows.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/devtools/overview.rst#2025-04-06_snippet_7\n\nLANGUAGE: powershell\nCODE:\n```\nPS> Install-Module -Name Set-PsEnv\n```\n\n----------------------------------------\n\nTITLE: Using Split Queue Implementation\nDESCRIPTION: Demonstrates the alternative split implementation that separates top messages from normal messages while keeping send order.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/engines/pmq/NOTES.md#2025-04-06_snippet_7\n\nLANGUAGE: logtalk\nCODE:\n```\nsplit::(send(13-let), send(5-out), send(11-the), send(17-who), send(7-dogs)).\n```\n\n----------------------------------------\n\nTITLE: Finding Previous Pair in Dictionary in Logtalk\nDESCRIPTION: Finds the previous key-value pair in a dictionary given a key. Fails if there is no previous pair.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/dictionaryp_0.rst.txt#2025-04-06_snippet_15\n\nLANGUAGE: Logtalk\nCODE:\n```\nprevious(Dictionary,Key,Previous,Value)\n```\n\n----------------------------------------\n\nTITLE: Displaying Entity-Specific Profiling Data\nDESCRIPTION: Shows profiling data filtered for a specific entity (miss_cann)\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/tools/ports_profiler/SCRIPT.txt#2025-04-06_snippet_5\n\nLANGUAGE: logtalk\nCODE:\n```\n| ?- ports_profiler::data(miss_cann).\n```\n\n----------------------------------------\n\nTITLE: SSH Repository URL Format\nDESCRIPTION: Standard format for SSH repository cloning URLs used in pack definitions\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/devtools/packs.rst.txt#2025-04-06_snippet_22\n\nLANGUAGE: text\nCODE:\n```\ngit@<hostname>:path/to/project.git\n```\n\n----------------------------------------\n\nTITLE: Displaying All Initialized Keys\nDESCRIPTION: Shows all keys that have been initialized in the system.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/design_patterns/creational/lazy_initialization/NOTES.md#2025-04-06_snippet_5\n\nLANGUAGE: logtalk\nCODE:\n```\nfruit::show_all.\n```\n\n----------------------------------------\n\nTITLE: Defining the end_object/0 Directive in Logtalk\nDESCRIPTION: The end_object/0 directive is used to mark the end of an object definition in Logtalk. It serves as a terminator for object definitions initiated with the object/1-5 directives.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/refman/directives/end_object_0.rst.txt#2025-04-06_snippet_0\n\nLANGUAGE: logtalk\nCODE:\n```\nend_object\n```\n\n----------------------------------------\n\nTITLE: Declaring Dynamic Predicate test_count_/1 in Logtalk\nDESCRIPTION: Declares a dynamic predicate test_count_/1 that serves as a test counter. It takes an integer argument representing the current count.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/tap_report_0.rst.txt#2025-04-06_snippet_1\n\nLANGUAGE: Logtalk\nCODE:\n```\ntest_count_(Count)\n```\n\n----------------------------------------\n\nTITLE: Predicate Definition in Prolog\nDESCRIPTION: Defines the complements_object/2 predicate signature that enumerates category-object complementing relationships.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/refman/predicates/complements_object_2.rst.txt#2025-04-06_snippet_0\n\nLANGUAGE: prolog\nCODE:\n```\ncomplements_object(Category, Object)\n```\n\n----------------------------------------\n\nTITLE: Configuring Logtalk Snippets Author in Emacs\nDESCRIPTION: This snippet demonstrates how to set the author name for Logtalk snippets in the Emacs init file. It uses setq-default to set the logtalk-snippets-author variable.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/coding/emacs/NOTES.md#2025-04-06_snippet_0\n\nLANGUAGE: Emacs Lisp\nCODE:\n```\n(setq-default logtalk-snippets-author \"Your Name\")\n```\n\n----------------------------------------\n\nTITLE: Generating Version 1 UUID as Character List\nDESCRIPTION: Shows how to generate a version 1 UUID returned as a list of characters.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/libraries/uuid.rst#2025-04-06_snippet_3\n\nLANGUAGE: logtalk\nCODE:\n```\n| ?- uuid(chars)::uuid_v1([0xf2,0xd1,0x90,0x94,0xdc,0x4b], UUID).\nUUID = ['0','0',d,e,'9','0',c,'0',-,'8','2',c,f,-,'1','1',e,b,-,\n           a,'9','8','5',-,f,'2',d,'1','9','0','9','4',d,c,'4',b]\nyes\n```\n\n----------------------------------------\n\nTITLE: Predicate Mode Declaration for threaded_engine_next/2 in Logtalk\nDESCRIPTION: Specifies the mode and determinism for the threaded_engine_next/2 predicate, indicating it takes a non-variable engine name and returns a term, with zero or one solutions.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/refman/predicates/threaded_engine_next_2.rst#2025-04-06_snippet_1\n\nLANGUAGE: prolog\nCODE:\n```\nthreaded_engine_next(@nonvar, ?term) - zero_or_one\n```\n\n----------------------------------------\n\nTITLE: Testing the Debug Messages Tool in Logtalk\nDESCRIPTION: Query to load the test file for the debug_messages tool.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/tools/debug_messages/NOTES.md#2025-04-06_snippet_1\n\nLANGUAGE: Prolog\nCODE:\n```\n| ?- logtalk_load(debug_messages(tester)).\n```\n\n----------------------------------------\n\nTITLE: Meta Non-Terminal Declaration Syntax\nDESCRIPTION: Shows the different valid syntax forms for declaring meta non-terminals, including single templates, lists, and qualified references with entity and module identifiers.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/refman/directives/meta_non_terminal_1.rst.txt#2025-04-06_snippet_0\n\nLANGUAGE: logtalk\nCODE:\n```\nmeta_non_terminal(Template)\nmeta_non_terminal((Template, ...))\nmeta_non_terminal([Template, ...])\n\nmeta_non_terminal(Entity::Template)\nmeta_non_terminal((Entity::Template, ...))\nmeta_non_terminal([Entity::Template, ...])\n\nmeta_non_terminal(Module:Template)\nmeta_non_terminal((Module:Template, ...))\nmeta_non_terminal([Module:Template, ...])\n```\n\n----------------------------------------\n\nTITLE: Specifying Modes and Proofs for sender/1 in Prolog\nDESCRIPTION: Specifies the mode and number of proofs for the sender/1 method, indicating it takes an object identifier as an argument and returns zero or one proof.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/refman/methods/sender_1.rst.txt#2025-04-06_snippet_1\n\nLANGUAGE: prolog\nCODE:\n```\nsender(?object_identifier) - zero_or_one\n```\n\n----------------------------------------\n\nTITLE: Loading the Many Worlds Design Pattern Implementation\nDESCRIPTION: Command to load the sample implementation of the 'Many worlds' design pattern from the design patterns directory.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/design_patterns/ai/many_worlds/NOTES.md#2025-04-06_snippet_1\n\nLANGUAGE: logtalk\nCODE:\n```\nlogtalk_load(design_patterns('ai/many_worlds/loader')).\n```\n\n----------------------------------------\n\nTITLE: Loading the Logtalk Reader Library\nDESCRIPTION: Command to load all entities in the reader library using the loader.lgt file in a Logtalk environment.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/libraries/reader.rst#2025-04-06_snippet_0\n\nLANGUAGE: Prolog\nCODE:\n```\n| ?- logtalk_load(reader(loader)).\n```\n\n----------------------------------------\n\nTITLE: Defining ReStructuredText Table of Contents for Logtalk Libraries\nDESCRIPTION: This snippet defines a table of contents in reStructuredText format, listing all the available Logtalk libraries. It uses the 'toctree' directive to create a hierarchical structure of documentation links.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/libraries/index.rst#2025-04-06_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. toctree::\n   :maxdepth: 2\n\n   overview\n   arbitrary\n   assignvars\n   base64\n   basic_types\n   cbor\n   core\n   coroutining\n   csv\n   dates\n   dependents\n   dictionaries\n   dif\n   edcg\n   events\n   expand_library_alias_paths\n   expecteds\n   format\n   genint\n   gensym\n   git\n   grammars\n   heaps\n   hierarchies\n   hook_flows\n   hook_objects\n   html\n   ids\n   intervals\n   java\n   json\n   listing\n   logging\n   loops\n   meta\n   meta_compiler\n   mutations\n   nested_dictionaries\n   optionals\n   options\n   os\n   queues\n   random\n   reader\n   recorded_database\n   redis\n   sets\n   statistics\n   term_io\n   timeout\n   tsv\n   types\n   ulid\n   unicode_data\n   union_find\n   uuid\n   zippers\n```\n\n----------------------------------------\n\nTITLE: Testing JSON Library in Logtalk\nDESCRIPTION: Shows how to load and run tests for the JSON library predicates using the tester.lgt file.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/libraries/json.rst.txt#2025-04-06_snippet_1\n\nLANGUAGE: Prolog\nCODE:\n```\n| ?- logtalk_load(json(tester)).\n```\n\n----------------------------------------\n\nTITLE: Testing Prolog System Warnings in Logtalk\nDESCRIPTION: Demonstrates how to test Prolog system warnings by redirecting the error stream. This example sets up a test for an initialization/1 directive failure warning.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/tools/lgtunit/NOTES.md#2025-04-06_snippet_31\n\nLANGUAGE: Logtalk\nCODE:\n```\ntest(singletons_warning, true(Assertion)) :-\n\t\t^^set_text_output(''),\n\t\tcurrent_output(Stream),\n\t\tset_stream(Stream, alias(user_error)),\n\t\tconsult(broken_file),\n\t\t^^text_output_assertion('WARNING: initialization/1 directive failed', Assertion).\n```\n\n----------------------------------------\n\nTITLE: Displaying Version Information in Logtalk\nDESCRIPTION: Displays the Logtalk, Prolog backend, and kernel versions when running in a Jupyter notebook environment.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/threads/hanoi/NOTES.md#2025-04-06_snippet_0\n\nLANGUAGE: logtalk\nCODE:\n```\n%versions\n```\n\n----------------------------------------\n\nTITLE: Computing Intersection of Two Dictionaries in Logtalk\nDESCRIPTION: Computes the intersection of two dictionaries, returning a new dictionary with common keys whose values unify.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/dictionaryp_0.rst.txt#2025-04-06_snippet_14\n\nLANGUAGE: Logtalk\nCODE:\n```\nintersection(Dictionary1,Dictionary2,Intersection)\n```\n\n----------------------------------------\n\nTITLE: Term Input/Output and Operator Predicates in Logtalk\nDESCRIPTION: Built-in predicates for reading and writing terms, and managing operators in Logtalk.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/coding/subethaedit2/Logtalk.mode/Contents/Resources/AutocompleteAdditions.txt#2025-04-06_snippet_22\n\nLANGUAGE: logtalk\nCODE:\n```\nread(, )\nread()\nread_term(, , )\nread_term(, )\nwrite(, )\nwrite()\nwriteq(, )\nwriteq()\nwrite_canonical(, )\nwrite_canonical()\nwrite_term()\ncurrent_op(, , )\ncurrent_char_conversion()\nchar_conversion()\n```\n\n----------------------------------------\n\nTITLE: Printing Logtalk, Prolog, and Kernel Versions\nDESCRIPTION: This snippet prints the versions of Logtalk, the Prolog backend, and the kernel if running as a notebook.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/design_patterns/structural/adapter/NOTES.md#2025-04-06_snippet_0\n\nLANGUAGE: logtalk\nCODE:\n```\n%versions\n```\n\n----------------------------------------\n\nTITLE: Private Records Table Predicate in Logtalk\nDESCRIPTION: The record_/3 private predicate maintains the records table. It's defined as dynamic to allow database manipulation.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/recorded_database_core_0.rst.txt#2025-04-06_snippet_8\n\nLANGUAGE: logtalk\nCODE:\n```\nrecord_(Key,Term,Reference)\n```\n\n----------------------------------------\n\nTITLE: Loading Application for Profiling\nDESCRIPTION: Loads the application to be profiled (searching module in this case)\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/tools/ports_profiler/SCRIPT.txt#2025-04-06_snippet_2\n\nLANGUAGE: logtalk\nCODE:\n```\n| ?- {searching(loader)}.\n```\n\n----------------------------------------\n\nTITLE: Installing Required Python Packages for Logtalk Documentation\nDESCRIPTION: These commands install or upgrade the necessary Python packages (Pygments, Sphinx, and sphinx_rtd_theme) for building the Logtalk documentation.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/NOTES.md#2025-04-06_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ python3 -m pip install --upgrade pygments\n$ python3 -m pip install --upgrade sphinx\n$ python3 -m pip install --upgrade sphinx_rtd_theme\n```\n\n----------------------------------------\n\nTITLE: Loading dit_metric Object\nDESCRIPTION: Command to load the dit_metric object from the code_metrics library.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/dit_metric_0.rst.txt#2025-04-06_snippet_0\n\nLANGUAGE: logtalk\nCODE:\n```\nlogtalk_load(code_metrics(loader))\n```\n\n----------------------------------------\n\nTITLE: Defining an Extended Protocol in Logtalk3\nDESCRIPTION: This snippet shows how to define an extended protocol in Logtalk3. The protocol extends a minimal protocol, demonstrating Logtalk's ability to create hierarchical protocol structures.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/coding/subethaedit4/Logtalk.seemode/Contents/Resources/ExampleSyntax.txt#2025-04-06_snippet_8\n\nLANGUAGE: Logtalk\nCODE:\n```\n:- protocol(extended,\n\textends(minimal)).\n\n:- end_protocol.\n```\n\n----------------------------------------\n\nTITLE: Retrieving Defined Named Instances\nDESCRIPTION: Gets a list of all named instances defined in the multiton class. Returns a list of identifiers [i1, i2, i3].\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/design_patterns/creational/multiton/NOTES.md#2025-04-06_snippet_2\n\nLANGUAGE: logtalk\nCODE:\n```\nmultiton::instances(Instances).\n```\n\n----------------------------------------\n\nTITLE: Long Form Accumulator Info Declaration\nDESCRIPTION: Dynamic predicate for declaring accumulators in long form with full parameter specification including term, left/right arguments, joiner function and start values.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/edcg_0.rst.txt#2025-04-06_snippet_1\n\nLANGUAGE: Logtalk\nCODE:\n```\nacc_info(?atom,?term,?term,?term,?callable,?term,?term)\n```\n\n----------------------------------------\n\nTITLE: Computing Steps for Sample 2 (Part 1) in Logtalk\nDESCRIPTION: This code calculates the number of steps for the 'test_files/sample_2' file, which is also part of the first part of the problem.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/haunted_wasteland/NOTES.md#2025-04-06_snippet_3\n\nLANGUAGE: logtalk\nCODE:\n```\nobject_property(haunted_wasteland, file(_, Directory)),\natom_concat(Directory, 'test_files/sample_2', File),\nhaunted_wasteland::steps_1(File, Steps).\n```\n\n----------------------------------------\n\nTITLE: Enabling Selective Debug Messages\nDESCRIPTION: Example demonstrating how to enable debug messages for a specific group within a component.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/devtools/debug_messages.rst.txt#2025-04-06_snippet_5\n\nLANGUAGE: prolog\nCODE:\n```\n| ?- debug_messages::disable(xyx).\nyes\n\n| ?- debug_messages::enable(xyx, bar).\nyes\n\n| ?- foo::(bar, baz).\nbar/0 called\nyes\n```\n\n----------------------------------------\n\nTITLE: Loading the Threading State Design Pattern Implementation\nDESCRIPTION: Loads the sample implementation of the Threading State design pattern from the design patterns library.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/design_patterns/logic/threading_state/NOTES.md#2025-04-06_snippet_1\n\nLANGUAGE: logtalk\nCODE:\n```\nlogtalk_load(design_patterns('logic/threading_state/loader')).\n```\n\n----------------------------------------\n\nTITLE: Defining chebyshev_norm/2 Predicate for Number Lists in Logtalk\nDESCRIPTION: Calculates the Chebyshev norm of a list of numbers. Fails if the list is empty.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/numberlistp_0.rst.txt#2025-04-06_snippet_9\n\nLANGUAGE: Logtalk\nCODE:\n```\nchebyshev_norm(List,Norm)\n```\n\n----------------------------------------\n\nTITLE: Testing the dif Library in Logtalk\nDESCRIPTION: Command to load the test suite for the dif library by loading the tester.lgt file using logtalk_load/1 predicate.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/libraries/dif.rst.txt#2025-04-06_snippet_1\n\nLANGUAGE: logtalk\nCODE:\n```\n| ?- logtalk_load(dif(tester)).\n```\n\n----------------------------------------\n\nTITLE: Loading Logtalk Events Library\nDESCRIPTION: This snippet demonstrates how to load all entities in the Logtalk events library using the loader file. It uses the logtalk_load/1 predicate to load the events(loader) file.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/libraries/events.rst.txt#2025-04-06_snippet_0\n\nLANGUAGE: Prolog\nCODE:\n```\n| ?- logtalk_load(events(loader)).\n```\n\n----------------------------------------\n\nTITLE: Defining Table of Contents for Message Forwarding in reStructuredText\nDESCRIPTION: This snippet defines a table of contents for the message forwarding documentation using reStructuredText syntax. It specifies a maximum depth of 1 and includes a link to the 'forward_1' document.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/refman/methods/forwarding_methods.rst#2025-04-06_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. toctree::\n   :maxdepth: 1\n\n   forward_1\n```\n\n----------------------------------------\n\nTITLE: Set Operations in Logtalk\nDESCRIPTION: Demonstrates common set operations like intersection and symmetric difference between two sets.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/libraries/sets.rst#2025-04-06_snippet_4\n\nLANGUAGE: logtalk\nCODE:\n```\n| ?- set::(\n    as_set([1,3,2,1,2], Set1),\n    as_set([7,4,2,5,1], Set2),\n    intersection(Set1, Set2, Intersection),\n    symdiff(Set1, Set2, Difference)\n).\nSet1 = [1, 2, 3],\nSet2 = [1, 2, 4, 5, 7],\nIntersection = [1, 2],\nDifference = [3, 4, 5, 7]\nyes\n```\n\n----------------------------------------\n\nTITLE: Overriding the portray_clause/1 Predicate in Logtalk\nDESCRIPTION: Example showing how to override the inherited portray_clause/1 predicate with a backend system's native implementation using the uses/2 directive.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/libraries/listing.rst.txt#2025-04-06_snippet_3\n\nLANGUAGE: logtalk\nCODE:\n```\n:- object(thing,\n    imports(listing)).\n\n    :- uses(user, [portray_clause/1]).\n    ...\n\n:- end_object.\n```\n\n----------------------------------------\n\nTITLE: Loading the term_io Library in Logtalk\nDESCRIPTION: This snippet demonstrates how to load all entities in the term_io library using the loader.lgt file.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/library/term_io/NOTES.md#2025-04-06_snippet_0\n\nLANGUAGE: Logtalk\nCODE:\n```\n| ?- logtalk_load(term_io(loader)).\n```\n\n----------------------------------------\n\nTITLE: Modes and Proofs Specification\nDESCRIPTION: Specification of argument modes and number of possible proofs for forall/2.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/refman/methods/forall_2.rst.txt#2025-04-06_snippet_2\n\nLANGUAGE: logtalk\nCODE:\n```\nforall(@callable, @callable) - zero_or_one\n```\n\n----------------------------------------\n\nTITLE: Listing Public Predicates of the xyzt Object in Logtalk\nDESCRIPTION: Enumerates all public predicates of the xyzt object, showing which ones are inherited from parent objects xyz and t.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/mi/NOTES.md#2025-04-06_snippet_5\n\nLANGUAGE: logtalk\nCODE:\n```\n%%table\nxyzt::current_predicate(Functor/Arity), functor(Pred, Functor, Arity), xyzt::predicate_property(Pred, declared_in(Object)).\n```\n\n----------------------------------------\n\nTITLE: Querying Category Properties with category_property/2 in Logtalk\nDESCRIPTION: The category_property/2 predicate enumerates properties associated with defined categories. It accepts a category identifier and a property parameter, and returns all matching properties through backtracking.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/refman/predicates/category_property_2.rst#2025-04-06_snippet_0\n\nLANGUAGE: prolog\nCODE:\n```\ncategory_property(Category, Property)\n```\n\n----------------------------------------\n\nTITLE: Loading the Whisper Example in Logtalk\nDESCRIPTION: Loads the whisper example module using the logtalk_load/1 predicate.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/engines/whisper/NOTES.md#2025-04-06_snippet_1\n\nLANGUAGE: logtalk\nCODE:\n```\nlogtalk_load(whisper(loader)).\n```\n\n----------------------------------------\n\nTITLE: Accessing Dictionary Parameters - Sum\nDESCRIPTION: Demonstrates accessing dictionary parameters to calculate sum of m and n values\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/pardicts/NOTES.md#2025-04-06_snippet_2\n\nLANGUAGE: logtalk\nCODE:\n```\nobj(_{m:2,n:3})::sum(Sum).\n```\n\n----------------------------------------\n\nTITLE: Setting Print Goal Hook in Logtalk\nDESCRIPTION: Shows how to set the print_goal_hook as the default hook for debugging purposes, allowing printing of selected goals before or after calling them.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/libraries/hook_objects.rst#2025-04-06_snippet_8\n\nLANGUAGE: Prolog\nCODE:\n```\n| ?- set_logtalk_flag(hook, print_goal_hook).\n```\n\n----------------------------------------\n\nTITLE: Defining Table of Contents for Logtalk User Manual in reStructuredText\nDESCRIPTION: A reStructuredText toctree directive that defines the structure and content organization for the Logtalk User Manual. The directive includes a maxdepth parameter of 2 and lists all the available documentation sections.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/userman/index.rst.txt#2025-04-06_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. toctree::\n   :maxdepth: 2\n\n   declarative\n   features\n   nomenclature\n   messages\n   objects\n   protocols\n   categories\n   predicates\n   inheritance\n   events\n   threads\n   errors\n   reflection\n   programming\n   printing\n   expansion\n   documenting\n   debugging\n   performance\n   installing\n   migration\n```\n\n----------------------------------------\n\nTITLE: Printing Logtalk, Prolog Backend, and Kernel Versions\nDESCRIPTION: This snippet prints the versions of Logtalk, the Prolog backend, and the kernel if running as a notebook.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/engines/emetas/NOTES.md#2025-04-06_snippet_0\n\nLANGUAGE: logtalk\nCODE:\n```\n%versions\n```\n\n----------------------------------------\n\nTITLE: Loading Logtalk Events Library\nDESCRIPTION: This snippet demonstrates how to load all entities in the Logtalk events library using the loader file. It uses the logtalk_load/1 predicate to load the events(loader) file.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/libraries/events.rst.txt#2025-04-06_snippet_0\n\nLANGUAGE: Prolog\nCODE:\n```\n| ?- logtalk_load(events(loader)).\n```\n\n----------------------------------------\n\nTITLE: Graphviz DOT Reference URL\nDESCRIPTION: URL reference for DOT language documentation and related tools in the Graphviz project.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/devtools/diagrams.rst.txt#2025-04-06_snippet_8\n\nLANGUAGE: plaintext\nCODE:\n```\nhttp://www.graphviz.org/\n```\n\n----------------------------------------\n\nTITLE: Reading Binary Files to Bytes in Logtalk\nDESCRIPTION: Reads a binary file into a list of bytes. Takes a file name as input and returns the file contents as a list of bytes.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/reader_0.rst.txt#2025-04-06_snippet_6\n\nLANGUAGE: Logtalk\nCODE:\n```\nfile_to_bytes(File,Bytes)\n```\n\n----------------------------------------\n\nTITLE: Example of Verbose Message Sending in Logtalk\nDESCRIPTION: Code snippet demonstrating verbose message sending to an object's predicates, which motivates the uses directive. The example shows explicit message sending to list methods in a predicate definition.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/userman/predicates.rst#2025-04-06_snippet_13\n\nLANGUAGE: logtalk\nCODE:\n```\nfoo :-\n    ...,\n    findall(X, list::member(X, L), A),\n    list::append(A, B, C),\n    list::select(Y, C, R),\n```\n\n----------------------------------------\n\nTITLE: Loading Timing Predicate\nDESCRIPTION: Ensures the time/1 predicate is loaded in SWI-Prolog by calling it with a simple goal.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/permutations/NOTES.md#2025-04-06_snippet_2\n\nLANGUAGE: logtalk\nCODE:\n```\ntime(true).  % auto-load the predicate in the case of SWI-Prolog\n```\n\n----------------------------------------\n\nTITLE: Validating Gregorian Calendar Dates in Logtalk\nDESCRIPTION: The valid_date/3 predicate validates a given date in the Gregorian calendar. It checks if the provided year, month, and day combination is valid, including leap year considerations.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/iso8601_0.rst.txt#2025-04-06_snippet_5\n\nLANGUAGE: Logtalk\nCODE:\n```\nvalid_date(Year,Month,Day)\n```\n\n----------------------------------------\n\nTITLE: Computing Calibration for Sample 2 in Logtalk\nDESCRIPTION: Retrieves the directory where the trebuchet object is stored, constructs the path to the sample_2 test file, and computes the calibration value using the solution predicate.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/trebuchet/NOTES.md#2025-04-06_snippet_3\n\nLANGUAGE: logtalk\nCODE:\n```\nobject_property(trebuchet, file(_, Directory)),\natom_concat(Directory, 'test_files/sample_2', File),\ntrebuchet::solution(File, Calibration).\n```\n\n----------------------------------------\n\nTITLE: Using Parametric Object Proxies in Logtalk\nDESCRIPTION: Demonstrates using the {}/1 construct with parametric objects, where the object identifier is computed dynamically.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/refman/control/external_call_1.rst.txt#2025-04-06_snippet_5\n\nLANGUAGE: logtalk\nCODE:\n```\n% use parametric object proxies:\n| ?- {circle(Id, Radius, Color)}::area(Area).\n...\n```\n\n----------------------------------------\n\nTITLE: Loading Logtalk Libraries\nDESCRIPTION: Demonstrates how to properly load a Logtalk library using the logtalk_load/1 predicate. This ensures that all required dependencies are loaded and necessary flags are set.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/directory_index.rst.txt#2025-04-06_snippet_0\n\nLANGUAGE: Logtalk\nCODE:\n```\nlogtalk_load(library_name(loader))\n```\n\n----------------------------------------\n\nTITLE: Reading Text Files to Characters with Custom Tail in Logtalk\nDESCRIPTION: Reads a text file into a list of characters with a custom tail terminator. Takes a file name as input and returns the file contents as a list of characters terminated by the given tail.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/reader_0.rst.txt#2025-04-06_snippet_3\n\nLANGUAGE: Logtalk\nCODE:\n```\nfile_to_chars(File,Chars,Tail)\n```\n\n----------------------------------------\n\nTITLE: Creating an Object with Initialization Goal in Logtalk\nDESCRIPTION: Example showing how to create an object 'runner' that instantiates the 'runners' class with an initialization directive that calls the start method, including clauses for length and time attributes.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/refman/predicates/create_object_4.rst.txt#2025-04-06_snippet_6\n\nLANGUAGE: logtalk\nCODE:\n```\n% create an object with an initialization goal:\n| ?- create_object(\n        runner,\n        [instantiates(runners)],\n        [initialization(::start)],\n        [length(22), time(60)]\n    ).\n```\n\n----------------------------------------\n\nTITLE: Short Form Accumulator Info Declaration\nDESCRIPTION: Dynamic predicate for declaring accumulators in short form without start values.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/edcg_0.rst.txt#2025-04-06_snippet_2\n\nLANGUAGE: Logtalk\nCODE:\n```\nacc_info(?atom,?term,?term,?term,?callable)\n```\n\n----------------------------------------\n\nTITLE: Checking Empty Queue in Logtalk\nDESCRIPTION: Predicate to check if a queue is empty. It takes a queue as input and succeeds if the queue is empty.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/queuep_0.rst.txt#2025-04-06_snippet_0\n\nLANGUAGE: Logtalk\nCODE:\n```\nempty(Queue)\n```\n\n----------------------------------------\n\nTITLE: Loading the Assertions Library in Logtalk\nDESCRIPTION: Command to load the assertions library using the loader predicate. This makes the assertion functionality available in a Logtalk session.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/devtools/assertions.rst.txt#2025-04-06_snippet_0\n\nLANGUAGE: prolog\nCODE:\n```\n| ?- logtalk_load(assertions(loader)).\n```\n\n----------------------------------------\n\nTITLE: Benchmark Infinite Stream Engine Destruction\nDESCRIPTION: Destroys 2000 infinite stream engines and measures performance.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/engines/ebench/NOTES.md#2025-04-06_snippet_5\n\nLANGUAGE: logtalk\nCODE:\n```\ntime((between(1,2000,I),atom_number(A,I),threaded_engine_destroy(A),fail)).\n```\n\n----------------------------------------\n\nTITLE: Citation for UPN Metric Paper\nDESCRIPTION: BibTeX citation for Trevor Moores' paper on Applying Complexity Measures to Rule-Based Prolog Programs.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/devtools/code_metrics.rst.txt#2025-04-06_snippet_3\n\nLANGUAGE: bibtex\nCODE:\n```\n@article{MOORES199845,\n    title = \"Applying Complexity Measures to Rule-Based Prolog Programs\",\n    journal = \"Journal of Systems and Software\",\n    volume = \"44\",\n    number = \"1\",\n    pages = \"45 - 52\",\n    year = \"1998\",\n    issn = \"0164-1212\",\n    doi = \"https://doi.org/10.1016/S0164-1212(98)10042-0\",\n    url = \"http://www.sciencedirect.com/science/article/pii/S0164121298100420\",\n    author = \"Trevor T Moores\"\n}\n```\n\n----------------------------------------\n\nTITLE: Checking Variable Occurrence in Term in Logtalk\nDESCRIPTION: Defines a predicate to check if a variable occurs in a given term.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/termp_0.rst.txt#2025-04-06_snippet_3\n\nLANGUAGE: Logtalk\nCODE:\n```\noccurs(Variable,Term)\n```\n\n----------------------------------------\n\nTITLE: Loading Delegates Example\nDESCRIPTION: Loads the delegates implementation using the loader file.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/delegates/NOTES.md#2025-04-06_snippet_1\n\nLANGUAGE: logtalk\nCODE:\n```\nlogtalk_load(delegates(loader)).\n```\n\n----------------------------------------\n\nTITLE: Loading Logtalk Queue Library\nDESCRIPTION: Command to load all entities in the queue library using the loader file.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/libraries/queues.rst#2025-04-06_snippet_0\n\nLANGUAGE: logtalk\nCODE:\n```\n| ?- logtalk_load(queues(loader)).\n```\n\n----------------------------------------\n\nTITLE: Modes and Proofs for (\\+)/1 in Logtalk\nDESCRIPTION: Specifies the mode and number of proofs for the (\\+)/1 built-in method. It takes a callable term as input and returns zero or one proof.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/refman/methods/not_1.rst.txt#2025-04-06_snippet_2\n\nLANGUAGE: Logtalk\nCODE:\n```\n\\+ +callable - zero_or_one\n```\n\n----------------------------------------\n\nTITLE: Load Self Messages Example\nDESCRIPTION: Loads the self_messages example module into the Logtalk environment.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/self_messages/NOTES.md#2025-04-06_snippet_1\n\nLANGUAGE: logtalk\nCODE:\n```\nlogtalk_load(self_messages(loader)).\n```\n\n----------------------------------------\n\nTITLE: Loading Recorded Database Library in Logtalk\nDESCRIPTION: Command to load all entities in the recorded_database library using the loader file.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/library/recorded_database/NOTES.md#2025-04-06_snippet_0\n\nLANGUAGE: logtalk\nCODE:\n```\n| ?- logtalk_load(recorded_database(loader)).\n```\n\n----------------------------------------\n\nTITLE: Example Usage of end_protocol\nDESCRIPTION: Practical example showing how to use the end_protocol directive in Logtalk code.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/refman/directives/end_protocol_0.rst.txt#2025-04-06_snippet_2\n\nLANGUAGE: logtalk\nCODE:\n```\n:- end_protocol.\n```\n\n----------------------------------------\n\nTITLE: Prolog Module Hook Usage Example\nDESCRIPTION: Example of using Prolog module expansions within a hook set workflow.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/userman/expansion.rst.txt#2025-04-06_snippet_7\n\nLANGUAGE: prolog\nCODE:\n```\n| ?- logtalk_load(\n         source,\n         [hook(hook_set([prolog_module_hook(functions), my_expansion]))]\n     ).\n```\n\n----------------------------------------\n\nTITLE: Loading the EDCG Library\nDESCRIPTION: Shows how to load all entities in the EDCG library using the loader utility file.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/libraries/edcg.rst.txt#2025-04-06_snippet_2\n\nLANGUAGE: prolog\nCODE:\n```\n| ?- logtalk_load(edcg(loader)).\n```\n\n----------------------------------------\n\nTITLE: Creating Optional Term in Logtalk\nDESCRIPTION: This example demonstrates how to create an optional term using the 'of' predicate from the 'optional' object.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/libraries/optionals.rst#2025-04-06_snippet_2\n\nLANGUAGE: Prolog\nCODE:\n```\n| ?- optional::of(1, Optional).\n```\n\n----------------------------------------\n\nTITLE: Predicate Directives Grammar\nDESCRIPTION: Extensive BNF grammar specification for predicate-related directives in Logtalk, including alias, synchronized, scope, mode and other directive types with their associated rules and components.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/refman/grammar.rst.txt#2025-04-06_snippet_28\n\nLANGUAGE: bnf\nCODE:\n```\npredicate_directive ::=\n   alias_directive\n   | synchronized_directive\n   | uses_directive\n   | use_module_directive\n   | scope_directive\n   | mode_directive\n   | meta_predicate_directive\n   | meta_non_terminal_directive\n   | info_directive\n   | dynamic_directive\n   | discontiguous_directive\n   | multifile_directive\n   | coinductive_directive\n   | operator_directive\n```\n\n----------------------------------------\n\nTITLE: Throwing Instantiation Error in Logtalk\nDESCRIPTION: This snippet demonstrates the usage of the instantiation_error/0 method. It throws an instantiation error when called, which is equivalent to throwing an error with the context.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/refman/methods/instantiation_error_0.rst#2025-04-06_snippet_0\n\nLANGUAGE: Logtalk\nCODE:\n```\ninstantiation_error\n```\n\n----------------------------------------\n\nTITLE: Decoding Java Exceptions in Prolog\nDESCRIPTION: Decodes a Java exception into its corresponding cause and stack trace. This helps in handling and debugging Java exceptions from within Prolog code.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/java_utils_protocol_0.rst.txt#2025-04-06_snippet_4\n\nLANGUAGE: Prolog\nCODE:\n```\ndecode_exception(Exception, Cause, StackTrace)\n```\n\n----------------------------------------\n\nTITLE: Printing Logtalk, Prolog backend, and kernel versions\nDESCRIPTION: Displays version information for Logtalk, the Prolog backend, and the kernel if running in a notebook environment.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/points/NOTES.md#2025-04-06_snippet_0\n\nLANGUAGE: logtalk\nCODE:\n```\n%versions\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Laptop Configuration\nDESCRIPTION: Creates a new custom laptop instance with specified CPU, display, and keyboard parameters.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/laptops/NOTES.md#2025-04-06_snippet_4\n\nLANGUAGE: logtalk\nCODE:\n```\ncustom::new(faster, thirteen, dvorak, Laptop).\n```\n\n----------------------------------------\n\nTITLE: Verbose Message Handling Configuration\nDESCRIPTION: Category implementation for printing all silent compiler messages by intercepting the message system.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/userman/printing.rst#2025-04-06_snippet_7\n\nLANGUAGE: logtalk\nCODE:\n```\n:- category(my_verbose_logtalk_message_settings).\n\n    :- multifile(logtalk::message_hook/4).\n    :- dynamic(logtalk::message_hook/4).\n\n    logtalk::message_hook(_Message, silent, core, Tokens) :-\n        logtalk::message_prefix_stream(comment, core, Prefix, Stream),\n        logtalk::print_message_tokens(Stream, Prefix, Tokens).\n\n    logtalk::message_hook(_Message, silent(Key), core, Tokens) :-\n        logtalk::message_prefix_stream(comment(Key), core, Prefix, Stream),\n        logtalk::print_message_tokens(Stream, Prefix, Tokens).\n\n:- end_category.\n```\n\n----------------------------------------\n\nTITLE: Implementing variance/6 in Logtalk\nDESCRIPTION: Auxiliary predicate for computing the variance of a list of numbers. Takes a list, starting length, returns final length, mean value, initial M2 value, and returns final M2 value for variance calculation.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/statistics_0.rst.txt#2025-04-06_snippet_3\n\nLANGUAGE: Logtalk\nCODE:\n```\nvariance(List,Length0,Length,Mean,M20,M2)\n```\n\n----------------------------------------\n\nTITLE: Defining Prolog Shell Object with Interpreters Parameter\nDESCRIPTION: Declares a shell object that takes Interpreters parameter. The object provides shell functionality for Prolog interpreters and requires the verdi_neruda loader.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/shell_1.rst.txt#2025-04-06_snippet_0\n\nLANGUAGE: logtalk\nCODE:\n```\nshell(Interpreters)\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Differences Between Logtalk and ISO Prolog for \\+/1\nDESCRIPTION: Example illustrating how Logtalk's implementation of \\+/1 differs from ISO Prolog standard when handling meta-variables. In ISO Prolog, cut is transparent, while in Logtalk it's wrapped in a meta-call.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/refman/methods/not_1.rst#2025-04-06_snippet_1\n\nLANGUAGE: prolog\nCODE:\n```\n| ?- X = !, \\+ (member(Y,[1,2,3]), X, write(Y), fail).\n1\n\nX = !\n```\n\nLANGUAGE: logtalk\nCODE:\n```\nyes\n| ?- logtalk << (X = !, \\+ (member(Y,[1,2,3]), X, write(Y), fail)).\n123\n\nX = !\n```\n\n----------------------------------------\n\nTITLE: Creating JAR File from JIProlog .jip Files using Shell Command\nDESCRIPTION: Shell command to create a JAR file containing Logtalk .jip files. This command packages the init.pl file along with all .jip files into a single logtalk.jar file for distribution.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/scripts/embedding/jiprolog/NOTES.md#2025-04-06_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\n$ jar cf logtalk.jar init.pl *.jip\n```\n\n----------------------------------------\n\nTITLE: Commit Message Query Predicate\nDESCRIPTION: Predicate that returns the message of the latest commit.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/git_protocol_0.rst.txt#2025-04-06_snippet_5\n\nLANGUAGE: prolog\nCODE:\n```\ncommit_message(+Directory, -Message)\n```\n\n----------------------------------------\n\nTITLE: Querying Logtalk Pack Information\nDESCRIPTION: Query to retrieve information about the installed Logtalk pack, including its installation path.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/scripts/pack-experimental/logtalk/README.md#2025-04-06_snippet_1\n\nLANGUAGE: prolog\nCODE:\n```\n?- pack_info(logtalk).\n```\n\n----------------------------------------\n\nTITLE: Tracking Included Modules in Logtalk Diagram\nDESCRIPTION: Dynamic predicate maintaining a table of Prolog modules already included in the diagram.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/entity_diagram_1.rst.txt#2025-04-06_snippet_3\n\nLANGUAGE: Logtalk\nCODE:\n```\nincluded_module_(Module)\n```\n\n----------------------------------------\n\nTITLE: Simplified Object Inheritance Syntax in Logtalk\nDESCRIPTION: This snippet shows the simplified syntax for object inheritance where the public scope keyword is omitted, which is equivalent to the previous example.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/userman/inheritance.rst.txt#2025-04-06_snippet_7\n\nLANGUAGE: logtalk\nCODE:\n```\n:- object(Object,\n    imports(Category)).\n\n    ...\n\n:- end_object.\n```\n\n----------------------------------------\n\nTITLE: Passing Environment Information to Allure Reports (Bash)\nDESCRIPTION: Examples of passing environment information pairs to the Allure report generator using the Bash script. This adds contextual information about the test environment to the generated report.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/tools/lgtunit/NOTES.md#2025-04-06_snippet_51\n\nLANGUAGE: bash\nCODE:\n```\n$ logtalk_allure_report -- Backend='GNU Prolog' Version=1.5.0\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ logtalk_allure_report -- Project='Deep Thought' Commit=`git rev-parse --short HEAD`\n```\n\n----------------------------------------\n\nTITLE: Checking Queue After Retrieval\nDESCRIPTION: Demonstrates that the queue is emptied after retrieving messages.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/engines/pmq/NOTES.md#2025-04-06_snippet_4\n\nLANGUAGE: logtalk\nCODE:\n```\npmq::messages(Messages).\n```\n\n----------------------------------------\n\nTITLE: Saving Generated Wrapper Objects with save/0 in Logtalk\nDESCRIPTION: A simplified version of save/1 that uses default options for saving generated wrapper objects and loader files.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/wrapper_0.rst.txt#2025-04-06_snippet_11\n\nLANGUAGE: Logtalk\nCODE:\n```\nsave/0\n```\n\n----------------------------------------\n\nTITLE: Wrapping Plain Prolog Code in Logtalk Object\nDESCRIPTION: Example of how to wrap plain Prolog code in a Logtalk object for analysis\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/tools/dead_code_scanner/NOTES.md#2025-04-06_snippet_4\n\nLANGUAGE: logtalk\nCODE:\n```\n:- object(code).\n    :- include('code.pl').\n:- end_object.\n```\n\n----------------------------------------\n\nTITLE: Info Directive Syntax\nDESCRIPTION: Basic syntax for the info/1 directive showing the expected format with Key-Value pairs.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/refman/directives/info_1.rst#2025-04-06_snippet_0\n\nLANGUAGE: logtalk\nCODE:\n```\ninfo([Key is Value, ...])\n```\n\n----------------------------------------\n\nTITLE: Loading the Inheritance Example\nDESCRIPTION: Loads the inheritance example module into the Logtalk environment.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/inheritance/NOTES.md#2025-04-06_snippet_1\n\nLANGUAGE: logtalk\nCODE:\n```\nlogtalk_load(inheritance(loader)).\n```\n\n----------------------------------------\n\nTITLE: Setting Default Hook Object in Logtalk\nDESCRIPTION: Illustrates how to set the default hook object to restore the default compiler expansion workflow using the set_logtalk_flag/2 predicate.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/libraries/hook_objects.rst#2025-04-06_snippet_2\n\nLANGUAGE: Prolog\nCODE:\n```\n| ?- set_logtalk_flag(hook, default_workflow_hook).\n```\n\n----------------------------------------\n\nTITLE: Modes and Proofs for protocol_property/2 in Logtalk\nDESCRIPTION: Specification of the calling modes and number of proofs for the protocol_property/2 predicate. Both arguments can be either instantiated or variables, and the predicate can succeed zero or more times.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/refman/predicates/protocol_property_2.rst#2025-04-06_snippet_1\n\nLANGUAGE: logtalk\nCODE:\n```\nprotocol_property(?protocol_identifier, ?protocol_property) - zero_or_more\n```\n\n----------------------------------------\n\nTITLE: Loading Timeout Library in Logtalk\nDESCRIPTION: Demonstrates how to load all entities in the timeout library using the loader.lgt file.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/libraries/timeout.rst.txt#2025-04-06_snippet_0\n\nLANGUAGE: Prolog\nCODE:\n```\n| ?- logtalk_load(timeout(loader)).\n```\n\n----------------------------------------\n\nTITLE: Loading UUID Library in Logtalk\nDESCRIPTION: Shows how to load the UUID library using the loader file.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/libraries/uuid.rst#2025-04-06_snippet_0\n\nLANGUAGE: logtalk\nCODE:\n```\n| ?- logtalk_load(uuid(loader)).\n```\n\n----------------------------------------\n\nTITLE: Creating a Logtalk Object Wrapper for Plain Prolog Code\nDESCRIPTION: Shows how to define a Logtalk object that wraps plain Prolog code using an include/1 directive. This allows testing and code coverage for plain Prolog code.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/devtools/lgtunit.rst#2025-04-06_snippet_59\n\nLANGUAGE: logtalk\nCODE:\n```\n:- object(plain).\n\n    :- include('plain.pl').\n\n:- end_object.\n```\n\n----------------------------------------\n\nTITLE: Creating a Logtalk Object Wrapper for Plain Prolog Code\nDESCRIPTION: Shows how to define a Logtalk object that wraps plain Prolog code using an include/1 directive. This allows testing and code coverage for plain Prolog code.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/devtools/lgtunit.rst#2025-04-06_snippet_59\n\nLANGUAGE: logtalk\nCODE:\n```\n:- object(plain).\n\n    :- include('plain.pl').\n\n:- end_object.\n```\n\n----------------------------------------\n\nTITLE: Prolog Library Path Configuration\nDESCRIPTION: Example of configuring file_search_path for Prolog packages\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/devtools/packs.rst#2025-04-06_snippet_32\n\nLANGUAGE: prolog\nCODE:\n```\n:- multifile(file_search_path/2).\n:- dynamic(file_search_path/2).\n\nfile_search_path(library, '$LOGTALKPACKS/packs/pl_pack').\n```\n\n----------------------------------------\n\nTITLE: Exhausting Pengine Engine Answers\nDESCRIPTION: Demonstrates retrieving the remaining answers from a pengine engine until no more are available.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/pengines/NOTES.md#2025-04-06_snippet_15\n\nLANGUAGE: logtalk\nCODE:\n```\nengines::answer(3, A2).\n```\n\nLANGUAGE: logtalk\nCODE:\n```\nengines::answer(3, A2).\n```\n\nLANGUAGE: logtalk\nCODE:\n```\nengines::answer(3, A2).\n```\n\n----------------------------------------\n\nTITLE: Implementing Recorded Database in Logtalk Object\nDESCRIPTION: Example of importing the recorded_database_core category privately into a Logtalk object to create a local database scope.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/libraries/recorded_database.rst#2025-04-06_snippet_2\n\nLANGUAGE: logtalk\nCODE:\n```\n:- object(foo,\n    imports(private::recorded_database_core)).\n\n    bar :-\n        ^^recorda(key, value(1)),\n        ...\n\n:- end_object.\n```\n\n----------------------------------------\n\nTITLE: Defining Clauses and Goals Grammar in BNF\nDESCRIPTION: BNF grammar specification for Logtalk clauses and goals, including message sending, super calls, and context switching constructs.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/refman/grammar.rst.txt#2025-04-06_snippet_29\n\nLANGUAGE: bnf\nCODE:\n```\nclause ::=\n      object_identifier \"::\" head \":-\" body\n      | module_identifier \":\" head \":-\" body\n      | head \":-\" body\n      | object_identifier \"::\" fact\n      | module_identifier \":\" fact\n      | fact\n\n   goal ::=\n      message_sending\n      | super_call\n      | external_call\n      | context_switching_call\n      | callable\n```\n\n----------------------------------------\n\nTITLE: Testing Hierarchies Library in Logtalk\nDESCRIPTION: Command to load and run tests for the hierarchies library using the tester.lgt file\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/libraries/hierarchies.rst.txt#2025-04-06_snippet_1\n\nLANGUAGE: logtalk\nCODE:\n```\n| ?- logtalk_load(hierarchies(tester)).\n```\n\n----------------------------------------\n\nTITLE: Markdown Text Formatting Examples\nDESCRIPTION: Examples of common Markdown/reStructuredText formatting syntax for documentation\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/userman/documenting.rst#2025-04-06_snippet_6\n\nLANGUAGE: text\nCODE:\n```\nMark *italic text* with one asterisk.\nMark **bold text** with two asterisks.\nMark ``monospaced text`` with two backquotes.\n```\n\n----------------------------------------\n\nTITLE: Loading CLP(FD) Library in Logtalk\nDESCRIPTION: Loads the CLP(FD) library for Logtalk using the loader file. This step is necessary before running any of the examples.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/constraints/swipl/NOTES.md#2025-04-06_snippet_0\n\nLANGUAGE: logtalk\nCODE:\n```\nlogtalk_load(clp_swipl(loader)).\n```\n\n----------------------------------------\n\nTITLE: Generating Basic ULID as Atom\nDESCRIPTION: Example of generating a ULID in the default atom format.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/libraries/ulid.rst#2025-04-06_snippet_2\n\nLANGUAGE: logtalk\nCODE:\n```\n| ?- ulid::generate(ULID).\nULID = '01H0J31SYQXHJZWPRAKHQ6YVYH'\nyes\n```\n\n----------------------------------------\n\nTITLE: Markdown Text Formatting Examples\nDESCRIPTION: Examples of common Markdown/reStructuredText formatting syntax for documentation\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/userman/documenting.rst#2025-04-06_snippet_6\n\nLANGUAGE: text\nCODE:\n```\nMark *italic text* with one asterisk.\nMark **bold text** with two asterisks.\nMark ``monospaced text`` with two backquotes.\n```\n\n----------------------------------------\n\nTITLE: Displaying Logtalk and Prolog Version Information\nDESCRIPTION: Command to print Logtalk, Prolog backend, and kernel version information when running in a notebook environment.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/attvars/NOTES.md#2025-04-06_snippet_0\n\nLANGUAGE: logtalk\nCODE:\n```\n%versions\n```\n\n----------------------------------------\n\nTITLE: Defining Meta-predicate Template for ask_question/5 in Logtalk\nDESCRIPTION: Meta-predicate template for ask_question/5, indicating that the fourth argument is a predicate with arity 1, while the other arguments are normal terms.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/refman/methods/ask_question_5.rst#2025-04-06_snippet_2\n\nLANGUAGE: logtalk\nCODE:\n```\nask_question(*, *, *, 1, *)\n```\n\n----------------------------------------\n\nTITLE: Debug Messages Usage Examples\nDESCRIPTION: Series of Logtalk queries demonstrating how to use the debug_messages tool to control debug output for specific components and groups.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/devtools/debug_messages.rst#2025-04-06_snippet_3\n\nLANGUAGE: prolog\nCODE:\n```\n| ?- {debug_messages(loader), foo}.\n...\nyes\n\n| ?- foo::(bar, baz).\nyes\n```\n\nLANGUAGE: prolog\nCODE:\n```\n| ?- debug_messages::enable(xyx).\nyes\n\n| ?- foo::(bar, baz).\nbar/0 called\nbaz/0 called\nyes\n```\n\nLANGUAGE: prolog\nCODE:\n```\n| ?- debug_messages::disable(xyx).\nyes\n\n| ?- debug_messages::enable(xyx, bar).\nyes\n\n| ?- foo::(bar, baz).\nbar/0 called\nyes\n```\n\n----------------------------------------\n\nTITLE: Example of info/1 directive for entity documentation in Logtalk\nDESCRIPTION: A concrete example of using the info/1 directive to document an entity with version, author, date, comment, and custom diagram information.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/userman/documenting.rst.txt#2025-04-06_snippet_1\n\nLANGUAGE: logtalk\nCODE:\n```\n:- info([\n    version is 2:1:0,\n    author is 'Paulo Moura',\n    date is 2000-11-20,\n    comment is 'Building representation.',\n    diagram is 'UML Class Diagram #312'\n]).\n```\n\n----------------------------------------\n\nTITLE: Setting Logtalk flags in Prolog\nDESCRIPTION: Shows how to set Logtalk flags using the set_logtalk_flag/2 built-in predicate.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/RELEASE_NOTES.md#2025-04-06_snippet_119\n\nLANGUAGE: Prolog\nCODE:\n```\nset_logtalk_flag(Flag, Value)\n```\n\n----------------------------------------\n\nTITLE: Updating Value in Dictionary by Key in Logtalk\nDESCRIPTION: Updates the value associated with a key in a dictionary, returning the updated dictionary. Fails if the key is not found.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/dictionaryp_0.rst.txt#2025-04-06_snippet_7\n\nLANGUAGE: Logtalk\nCODE:\n```\nupdate(OldDictionary,Key,NewValue,NewDictionary)\n```\n\n----------------------------------------\n\nTITLE: Date Format in info/1 Directives\nDESCRIPTION: ISO 8601 standard format for dates in info/1 directives, using Year-Month-Day structure instead of the old Year/Month/Day format.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/RELEASE_NOTES.md#2025-04-06_snippet_41\n\nLANGUAGE: logtalk\nCODE:\n```\nYear-Month-Day\n```\n\n----------------------------------------\n\nTITLE: Commit Hash Query Predicate\nDESCRIPTION: Predicate that returns the full hash of the latest commit.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/git_protocol_0.rst.txt#2025-04-06_snippet_3\n\nLANGUAGE: prolog\nCODE:\n```\ncommit_hash(+Directory, -Hash)\n```\n\n----------------------------------------\n\nTITLE: Pack Version Specification in Prolog\nDESCRIPTION: Example of a pack version specification using version/6 predicate, including version number, stability status, download URL, checksum and dependencies.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/tools/packs/NOTES.md#2025-04-06_snippet_17\n\nLANGUAGE: prolog\nCODE:\n```\nversion(\n\t1:0:1,\n\tstable,\n\t'git@gitlab.com:me/foo.git/v1.0.1.zip',\n\tsha256 - '0894c7cdb8968b6bbcf00e3673c1c16cfa98232573af30ceddda207b20a7a207',\n\t[logtalk @>= 3:36:0],\n\tall\n).\n```\n\n----------------------------------------\n\nTITLE: Loading Base Doclet Tool in Logtalk\nDESCRIPTION: Loads the base doclet tool which is required for documentation generation.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/tools/doclet/SCRIPT.txt#2025-04-06_snippet_0\n\nLANGUAGE: logtalk\nCODE:\n```\n| ?- logtalk_load(doclet(loader)).\n```\n\n----------------------------------------\n\nTITLE: Color Chooser Dialog Example\nDESCRIPTION: Demonstrates JColorChooser dialog integration, skipped if running in Jupyter\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/jpl/NOTES.md#2025-04-06_snippet_6\n\nLANGUAGE: logtalk\nCODE:\n```\n(current_object(jupyter) -> true; color_chooser::color(Color)).\n```\n\n----------------------------------------\n\nTITLE: Testing the Logtalk Help Tool\nDESCRIPTION: This snippet demonstrates how to load the tester file for the 'help' tool. It uses the logtalk_load/1 predicate to load the tester file.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/devtools/help.rst#2025-04-06_snippet_1\n\nLANGUAGE: prolog\nCODE:\n```\n| ?- logtalk_load(help(tester)).\n```\n\n----------------------------------------\n\nTITLE: Checking scope of asserted predicates in prototype\nDESCRIPTION: Shows how to check the resulting scope (public, protected, private) of the asserted predicates in the prototype object.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/dynpred/NOTES.md#2025-04-06_snippet_13\n\nLANGUAGE: logtalk\nCODE:\n```\nprototype::dynamic_predicates.\n```\n\n----------------------------------------\n\nTITLE: Example Usage of Built-in Directive in Logtalk\nDESCRIPTION: This example demonstrates how to use the built_in/0 directive in a Logtalk entity declaration. The directive is placed at the beginning of the entity definition to mark it as built-in.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/refman/directives/built_in_0.rst.txt#2025-04-06_snippet_1\n\nLANGUAGE: Logtalk\nCODE:\n```\n:- built_in.\n```\n\n----------------------------------------\n\nTITLE: ReStructuredText Context Switching Documentation\nDESCRIPTION: RST markup for context switching calls documentation section with toctree directive including context_switch_2 reference.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/refman/control/context_switching_calls.rst#2025-04-06_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. _context_switching_calls:\n\nContext switching calls\n=======================\n\n.. toctree::\n   :maxdepth: 1\n\n   context_switch_2\n```\n\n----------------------------------------\n\nTITLE: Testing Git Library in Logtalk\nDESCRIPTION: Shows how to load the tester.lgt file to test the library predicates.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/libraries/git.rst#2025-04-06_snippet_1\n\nLANGUAGE: prolog\nCODE:\n```\n| ?- logtalk_load(git(tester)).\n```\n\n----------------------------------------\n\nTITLE: Sample Append Program Definition in Prolog\nDESCRIPTION: Basic definition of the append predicate showing the recursive implementation for list concatenation.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/contributions/verdi_neruda.rst.txt#2025-04-06_snippet_3\n\nLANGUAGE: prolog\nCODE:\n```\nappend([],A,A) if\n    true.\nappend([A|B],C,[A|D]) if\n    append(B,C,D).\n```\n\n----------------------------------------\n\nTITLE: Loading Closed World Assumption Example\nDESCRIPTION: Loads the closed world assumption example module\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/closed_world_assumption/NOTES.md#2025-04-06_snippet_1\n\nLANGUAGE: logtalk\nCODE:\n```\nlogtalk_load(closed_world_assumption(loader)).\n```\n\n----------------------------------------\n\nTITLE: Building Nightly Docker Image for Logtalk\nDESCRIPTION: Command to build a Docker image for the nightly (latest) version of Logtalk with SWI-Prolog.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/scripts/docker/swi-prolog/README.md#2025-04-06_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker build -t=\"logtalk/logtalk3-swi:nightly\" .\n```\n\n----------------------------------------\n\nTITLE: Meta-non-terminal Template Definition\nDESCRIPTION: Specifies the meta-non-terminal template with arity 0.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/refman/methods/phrase_1.rst.txt#2025-04-06_snippet_1\n\nLANGUAGE: prolog\nCODE:\n```\nphrase(0)\n```\n\n----------------------------------------\n\nTITLE: Defining Parametric Test Object in Logtalk\nDESCRIPTION: Demonstrates how to create a parametric test object for testing multiple implementations of the same protocol, such as the random_protocol.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/devtools/lgtunit.rst#2025-04-06_snippet_7\n\nLANGUAGE: Logtalk\nCODE:\n```\n:- object(tests(_RandomObject_),\n    extends(lgtunit)).\n\n    :- uses(_RandomObject_, [\n        random/1, between/3, member/2,\n        ...\n    ]).\n\n    test(between_3_in_interval) :-\n        between(1, 10, Random),\n        1 =< Random, Random =< 10.\n\n    ...\n\n:- end_object.\n```\n\n----------------------------------------\n\nTITLE: Configuring Prolog Pack Library Path\nDESCRIPTION: Shows how to add a file_search_path/2 fact for a Prolog pack to enable library loading.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/devtools/packs.rst.txt#2025-04-06_snippet_42\n\nLANGUAGE: prolog\nCODE:\n```\n:- multifile(file_search_path/2).\n:- dynamic(file_search_path/2).\n\nfile_search_path(library, '$LOGTALKPACKS/packs/pl_pack').\n```\n\n----------------------------------------\n\nTITLE: Creating New AVL Tree Dictionary in Logtalk\nDESCRIPTION: Demonstrates the creation of a new AVL tree dictionary using the new/1 predicate from the avltree object.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/libraries/dictionaries.rst.txt#2025-04-06_snippet_2\n\nLANGUAGE: prolog\nCODE:\n```\n| ?- avltree::new(Dictionary).\nDictionary = ...\nyes\n```\n\n----------------------------------------\n\nTITLE: Using Prolog Module Hook in Logtalk\nDESCRIPTION: Shows how to use expansion rules defined in a Prolog module by setting the prolog_module_hook with a specific module name.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/libraries/hook_objects.rst#2025-04-06_snippet_5\n\nLANGUAGE: Logtalk\nCODE:\n```\n:- set_logtalk_flag(hook, prolog_module_hook(user)).\n```\n\n----------------------------------------\n\nTITLE: Using else/0 in Conditional Compilation for Arithmetic Handling\nDESCRIPTION: Demonstrates the use of 'else/0' in a conditional compilation scenario where different initialization messages are printed based on whether the Prolog compiler uses bounded or unbounded arithmetic.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/refman/directives/else_0.rst#2025-04-06_snippet_1\n\nLANGUAGE: Logtalk\nCODE:\n```\n:- if(current_prolog_flag(bounded, true)).\n\n    :- initialization(\n        logtalk::print_message(warning,app,bounded_arithmetic)\n    ).\n\n:- else.\n\n    :- initialization(\n        logtalk::print_message(comment,app,unbounded_arithmetic)\n    ).\n\n:- endif.\n```\n\n----------------------------------------\n\nTITLE: Running the checkpoint synchronization example\nDESCRIPTION: Executes the checkpoint synchronization example by calling the run predicate of the checkpoint object.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/threads/checkpoint/NOTES.md#2025-04-06_snippet_2\n\nLANGUAGE: logtalk\nCODE:\n```\ncheckpoint::run.\n```\n\n----------------------------------------\n\nTITLE: Grades Assumption Tests - Logtalk\nDESCRIPTION: Tests grade assignments using linear assumptions for course enrollment\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/assumptions/NOTES.md#2025-04-06_snippet_4\n\nLANGUAGE: logtalk\nCODE:\n```\ngrades::(assumel(take(hans, german)), grade(hans)).\n```\n\nLANGUAGE: logtalk\nCODE:\n```\ngrades::(assumel(take(hans, italian)), grade(hans)).\n```\n\n----------------------------------------\n\nTITLE: Making Multiple Variant Threaded Calls in Logtalk\nDESCRIPTION: Demonstrates making two variant threaded calls in succession, which will be processed independently.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/threads/nondet/NOTES.md#2025-04-06_snippet_6\n\nLANGUAGE: logtalk\nCODE:\n```\nthreaded_call(lists::member(X, [1,2,3])), threaded_call(lists::member(Y, [1,2,3])).\n```\n\n----------------------------------------\n\nTITLE: Defining Message Tokenization Rules in Logtalk\nDESCRIPTION: Demonstrates how to define grammar rules for the message_tokens//2 multifile non-terminal to translate a message term into a list of tokens for output.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/userman/printing.rst.txt#2025-04-06_snippet_2\n\nLANGUAGE: Prolog\nCODE:\n```\n:- multifile(logtalk::message_tokens//2).\n:- dynamic(logtalk::message_tokens//2).\n\nlogtalk::message_tokens(redefining_entity(Type, Entity), core) -->\n    ['Redefining ~w ~q'-[Type, Entity], nl].\n```\n\n----------------------------------------\n\nTITLE: Setting Hook Object Flag in Logtalk\nDESCRIPTION: Directive to set a hook object for source file preprocessing at the entity or file level.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/library/hook_flows/NOTES.md#2025-04-06_snippet_2\n\nLANGUAGE: prolog\nCODE:\n```\n:- set_logtalk_flag(hook, HookObject).\n```\n\n----------------------------------------\n\nTITLE: Generating Arbitrary Integer in Logtalk\nDESCRIPTION: Example of using the 'arbitrary' category to generate a random integer via the 'type' object.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/library/arbitrary/NOTES.md#2025-04-06_snippet_2\n\nLANGUAGE: prolog\nCODE:\n```\n| ?- type::arbitrary(integer, Arbitrary).\nArbitrary = -816\nyes\n```\n\n----------------------------------------\n\nTITLE: Running Logtalk Tests with Path Prefix Suppression in Bash\nDESCRIPTION: This snippet shows how to run Logtalk tests with XML coverage output and suppress the local path prefix for better portability.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/devtools/lgtunit.rst#2025-04-06_snippet_72\n\nLANGUAGE: bash\nCODE:\n```\n$ logtalk_tester -c xml -s $HOME/logtalk/\n```\n\n----------------------------------------\n\nTITLE: Using XML Entities in Logtalk Documentation\nDESCRIPTION: Example of using XML entities in an info/1 directive to include author, license, and copyright information. These entities are defined in a custom.ent file and replaced during XML processing.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/userman/documenting.rst.txt#2025-04-06_snippet_9\n\nLANGUAGE: logtalk\nCODE:\n```\n:- info([\n    version is 1:1:0,\n    author is {author},\n    license is {license},\n    copyright is {copyright}\n]).\n```\n\n----------------------------------------\n\nTITLE: Logtalk Flag Management Predicates\nDESCRIPTION: Built-in predicates for managing Logtalk flags, which control various aspects of the system's behavior.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/coding/subethaedit2/Logtalk.mode/Contents/Resources/AutocompleteAdditions.txt#2025-04-06_snippet_17\n\nLANGUAGE: logtalk\nCODE:\n```\nset_logtalk_flag(, )\ncurrent_logtalk_flag(, )\ncreate_logtalk_flag(, , )\n```\n\n----------------------------------------\n\nTITLE: Checking if Dictionary is Empty in Logtalk\nDESCRIPTION: Checks if a dictionary is empty. Returns true if the dictionary contains no key-value pairs.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/dictionaryp_0.rst.txt#2025-04-06_snippet_10\n\nLANGUAGE: Logtalk\nCODE:\n```\nempty(Dictionary)\n```\n\n----------------------------------------\n\nTITLE: Documenting Grammar Rule Non-Terminals in Logtalk\nDESCRIPTION: Example of using the info/2 directive to document a grammar rule non-terminal.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/userman/predicates.rst#2025-04-06_snippet_45\n\nLANGUAGE: logtalk\nCODE:\n```\n:- public(sentence//0).\n\n:- info(sentence//0, [\n    comment is 'Rewrites sentence into noun and verb phrases.'\n]).\n```\n\n----------------------------------------\n\nTITLE: Retrieving Top Pair from Heap in Logtalk\nDESCRIPTION: Returns the top pair in the heap without modifying the heap. Fails if the heap is empty.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/heapp_0.rst.txt#2025-04-06_snippet_8\n\nLANGUAGE: Logtalk\nCODE:\n```\ntop(Heap,TopKey,TopValue)\n```\n\n----------------------------------------\n\nTITLE: Monitored Missionaries and Cannibals Solution\nDESCRIPTION: Same missionaries and cannibals solution with performance monitoring enabled\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/searching/NOTES.md#2025-04-06_snippet_6\n\nLANGUAGE: logtalk\nCODE:\n```\nperformance::init, miss_cann::initial_state(Initial), hill_climbing(16)::solve(miss_cann, Initial, Path, Cost), miss_cann::print_path(Path), performance::report.\n```\n\n----------------------------------------\n\nTITLE: Loading Doclet Tool in Logtalk\nDESCRIPTION: This query loads the doclet tool itself, which provides the base functionality for creating and running doclets.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/tools/doclet/NOTES.md#2025-04-06_snippet_1\n\nLANGUAGE: Logtalk\nCODE:\n```\n| ?- logtalk_load(doclet(loader)).\n```\n\n----------------------------------------\n\nTITLE: Presorted Route Planning\nDESCRIPTION: Shows route planning using geographical distance presorting before applying the incremental algorithm.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/lo/travellers/NOTES.md#2025-04-06_snippet_3\n\nLANGUAGE: logtalk\nCODE:\n```\npresort::route([london, brighton, portsmouth, exeter, oxford, aberystwyth], Route).\n```\n\n----------------------------------------\n\nTITLE: Installing d2 and Graphviz on macOS using MacPorts\nDESCRIPTION: Command for installing the required d2 and Graphviz tools on macOS using the MacPorts package manager.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/tools/diagrams/NOTES.md#2025-04-06_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ sudo port install d2 graphviz\n```\n\n----------------------------------------\n\nTITLE: Running Library Unit Tests\nDESCRIPTION: Example showing how to run unit tests for a specific library using the random library as an example.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/libraries/overview.rst.txt#2025-04-06_snippet_2\n\nLANGUAGE: prolog\nCODE:\n```\n| ?- logtalk_load(random(tester)).\n```\n\n----------------------------------------\n\nTITLE: Loading Dates Library in Logtalk\nDESCRIPTION: This snippet shows how to load all entities in the dates library using the loader utility file.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/libraries/dates.rst#2025-04-06_snippet_0\n\nLANGUAGE: prolog\nCODE:\n```\n| ?- logtalk_load(dates(loader)).\n```\n\n----------------------------------------\n\nTITLE: Imported Categories Syntax in Logtalk using BNF\nDESCRIPTION: Specifies the syntax for referring to imported categories in Logtalk, including individual categories, sequences, and lists, with optional scope specifiers.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/refman/grammar.rst.txt#2025-04-06_snippet_7\n\nLANGUAGE: bnf\nCODE:\n```\nimported_categories ::=\n   imported_category\n   | imported_category_sequence\n   | imported_category_list\n\nimported_category ::=\n   category_identifier\n   | scope \"::\" category_identifier\n\nimported_category_sequence ::=\n   imported_category\n   | imported_category \",\" imported_category_sequence\n\nimported_category_list ::=\n   \"[\" imported_category_sequence \"]\"\n```\n\n----------------------------------------\n\nTITLE: Syntax Definitions for protected/1 Directive in Logtalk\nDESCRIPTION: Defines the accepted syntax patterns for the protected/1 directive, including variations for predicates, grammar rule non-terminals, and operators. Shows how the directive can accept single elements, comma-separated lists, or array-style lists.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/refman/directives/protected_1.rst.txt#2025-04-06_snippet_0\n\nLANGUAGE: logtalk\nCODE:\n```\nprotected(Name/Arity)\nprotected((Name/Arity, ...))\nprotected([Name/Arity, ...])\n\nprotected(Name//Arity)\nprotected((Name//Arity, ...))\nprotected([Name//Arity, ...])\n\nprotected(op(Precedence,Associativity,Operator))\nprotected((op(Precedence,Associativity,Operator), ...))\nprotected([op(Precedence,Associativity,Operator), ...])\n```\n\n----------------------------------------\n\nTITLE: Creating SICStus Prolog Saved State for 'sleepy' Example\nDESCRIPTION: This snippet shows how to create a SICStus Prolog saved state from the 'sleepy' text adventure example. It uses the sicstus_logtalk_po.sh script with additional options to generate an executable saved state.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/scripts/embedding/SCRIPT.txt#2025-04-06_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\n$ cd \"$LOGTALKHOME/scripts/embedding/sicstus/\"\n$ ./sicstus_logtalk_po.sh -c -x -d \"$HOME\"/collect -n sleepy -l \"$LOGTALKUSER/examples/adventure/sleepy.lgt\" -g \"'::'(sleepy,start),halt\"\n$ cd ~/collect\n$ sicstus -r sleepy.sav\n```\n\n----------------------------------------\n\nTITLE: State Space and Search Strategy Hierarchy Structure\nDESCRIPTION: Text representation of the object hierarchies used to implement state spaces and search strategies\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/searching/NOTES.md#2025-04-06_snippet_2\n\nLANGUAGE: text\nCODE:\n```\nstate_space\n\tfarmer\n\twater_jug\n\tsalt(Quantity, Measure1, Measure2)\n\theuristic_state_space\n\t\tbridge\n\t\teight_puzzle\n\t\tmiss_cann\n\nsearch_strategy\n\tblind_search(Bound)\n\t\tbreadth_first(Bound)\n\t\tdepth_first(Bound)\n\theuristic_search(Threshold)\n\t\tbest_first(Threshold)\n\t\thill_climbing(Threshold)\n```\n\n----------------------------------------\n\nTITLE: Specifying Mode and Number of Proofs for after/3 in Logtalk\nDESCRIPTION: Defines the mode and number of proofs for the after/3 method. It indicates that all arguments are input/output and the predicate can succeed zero or more times.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/refman/methods/after_3.rst#2025-04-06_snippet_1\n\nLANGUAGE: Prolog\nCODE:\n```\nafter(?object_identifier, ?callable, ?object_identifier) - zero_or_more\n```\n\n----------------------------------------\n\nTITLE: RST Table of Contents Configuration\nDESCRIPTION: RST directive configuring the table of contents for port documentation with maxdepth of 2, listing fcube, metagol, and toychr ports.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/ports/index.rst#2025-04-06_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. toctree::\n   :maxdepth: 2\n\n   fcube\n   metagol\n   toychr\n```\n\n----------------------------------------\n\nTITLE: Retrieving Commit Hash Using commit_hash/2\nDESCRIPTION: Example query demonstrating how to get the hash of the latest commit in a git repository.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/library/git/NOTES.md#2025-04-06_snippet_4\n\nLANGUAGE: Prolog\nCODE:\n```\n| ?- git::commit_hash('/Users/pmoura/Documents/Logtalk/logtalk3', Hash).\n\nHash = eccaa1a2a9495fef441915bbace84e0a4b0394a2\nyes\n```\n\n----------------------------------------\n\nTITLE: Loading Nested Dictionaries Test Suite in Logtalk\nDESCRIPTION: Demonstrates how to load the test suite for the nested_dictionaries library predicates.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/libraries/nested_dictionaries.rst#2025-04-06_snippet_1\n\nLANGUAGE: logtalk\nCODE:\n```\n| ?- logtalk_load(nested_dictionaries(tester)).\n```\n\n----------------------------------------\n\nTITLE: Term Expansion Rule for Comment Conversion\nDESCRIPTION: Implementation of the term expansion rule that converts Prolog comment directives to Logtalk info directives. Uses atom_codes/2 to convert the comment string to an atom.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/userman/migration.rst#2025-04-06_snippet_8\n\nLANGUAGE: prolog\nCODE:\n```\n'$lgt_prolog_term_expansion'(\n           (:- comment(F/A, String)),\n           (:- info(F/A, [comment is Atom]))\n   ) :-\n       atom_codes(Atom, String).\n```\n\n----------------------------------------\n\nTITLE: Defining the threaded_engine_yield/1 Predicate in Logtalk\nDESCRIPTION: Signature of the threaded_engine_yield/1 predicate which returns an answer independent of the solutions of the engine goal. It blocks until the returned answer is consumed.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/refman/predicates/threaded_engine_yield_1.rst#2025-04-06_snippet_0\n\nLANGUAGE: Logtalk\nCODE:\n```\nthreaded_engine_yield(Answer)\n```\n\n----------------------------------------\n\nTITLE: Get Default Message - Prototype\nDESCRIPTION: Demonstrates inheritance of default/1 predicate by prototype object from parent object.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/self_messages/NOTES.md#2025-04-06_snippet_5\n\nLANGUAGE: logtalk\nCODE:\n```\nprototype::get_default(Local).\n```\n\n----------------------------------------\n\nTITLE: Defining the resource_error/1 Method Signature in Logtalk\nDESCRIPTION: The signature for the resource_error/1 built-in method that throws an error when a required resource is not available.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/refman/methods/resource_error_1.rst#2025-04-06_snippet_0\n\nLANGUAGE: logtalk\nCODE:\n```\nresource_error(Resource)\n```\n\n----------------------------------------\n\nTITLE: Defining Modes and Proofs for setof/3 in Logtalk\nDESCRIPTION: Specifies the mode declaration for setof/3, indicating input/output expectations and the number of proofs (zero_or_more).\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/refman/methods/setof_3.rst#2025-04-06_snippet_2\n\nLANGUAGE: Logtalk\nCODE:\n```\nsetof(@term, +callable, -list) - zero_or_more\n```\n\n----------------------------------------\n\nTITLE: Identity Hook Flag Setting in Logtalk\nDESCRIPTION: Directive to prevent source file expansion by setting the identity hook.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/userman/expansion.rst.txt#2025-04-06_snippet_6\n\nLANGUAGE: logtalk\nCODE:\n```\n:- set_logtalk_flag(hook, identity_hook).\n```\n\n----------------------------------------\n\nTITLE: Configuring Neo4j for Logtalk Integration\nDESCRIPTION: Configuration settings for the neo4j.conf file to disable authentication and configure the Bolt connector for use with Logtalk.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/neo4j/NOTES.md#2025-04-06_snippet_0\n\nLANGUAGE: text\nCODE:\n```\ndbms.security.auth_enabled=false\n\nserver.bolt.enabled=true\nserver.bolt.tls_level=DISABLED\nserver.bolt.listen_address=:7687\nserver.bolt.advertised_address=:7687\n```\n\n----------------------------------------\n\nTITLE: Loading Meta-Compiler Library in Logtalk\nDESCRIPTION: Demonstrates how to load the main entities of the meta_compiler library using the loader.lgt file.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/library/meta_compiler/NOTES.md#2025-04-06_snippet_0\n\nLANGUAGE: Prolog\nCODE:\n```\n| ?- logtalk_load(meta_compiler(loader)).\n```\n\n----------------------------------------\n\nTITLE: Loading Library Dependency Diagram Object in Logtalk\nDESCRIPTION: This code snippet shows how to load the library_dependency_diagram object in Logtalk. It is required to use the predicates for generating library dependency diagrams.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/library_dependency_diagram_0.rst.txt#2025-04-06_snippet_0\n\nLANGUAGE: Logtalk\nCODE:\n```\nlogtalk_load(diagrams(loader))\n```\n\n----------------------------------------\n\nTITLE: Loading the Takeuchi Function Example\nDESCRIPTION: This snippet loads the Takeuchi function example using the Logtalk loader.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/threads/tak/NOTES.md#2025-04-06_snippet_1\n\nLANGUAGE: logtalk\nCODE:\n```\nlogtalk_load(tak(loader)).\n```\n\n----------------------------------------\n\nTITLE: Run Specific Benchmark\nDESCRIPTION: Executes a single specified benchmark test with custom repetition count.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/bench/NOTES.md#2025-04-06_snippet_4\n\nLANGUAGE: logtalk\nCODE:\n```\nrun(nreverse, 10000).\n```\n\n----------------------------------------\n\nTITLE: Selecting an Element from a List in Logtalk\nDESCRIPTION: Selects an element from a list and returns the list of remaining elements.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/listp_0.rst.txt#2025-04-06_snippet_14\n\nLANGUAGE: Logtalk\nCODE:\n```\nselect(Element,List,Remaining)\n```\n\n----------------------------------------\n\nTITLE: Loading Mutations Library in Logtalk\nDESCRIPTION: Command to load all entities in the mutations library using the loader.lgt file.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/libraries/mutations.rst.txt#2025-04-06_snippet_0\n\nLANGUAGE: logtalk\nCODE:\n```\n| ?- logtalk_load(mutations(loader)).\n```\n\n----------------------------------------\n\nTITLE: Generating stepped integer sequences with sequence/4\nDESCRIPTION: Enhanced sequence predicate that generates a list with the sequence of integers in the interval [Lower,Upper] by Step. Assumes Lower =< Upper, Step >= 1 and fails otherwise.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/integer_0.rst.txt#2025-04-06_snippet_4\n\nLANGUAGE: logtalk\nCODE:\n```\nsequence(Lower,Upper,Step,List)\n```\n\n----------------------------------------\n\nTITLE: Testing Union-Find Library in Logtalk\nDESCRIPTION: This snippet demonstrates how to load the tester.lgt file to test the union-find library predicates.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/library/union_find/NOTES.md#2025-04-06_snippet_1\n\nLANGUAGE: Logtalk\nCODE:\n```\n| ?- logtalk_load(union_find(tester)).\n```\n\n----------------------------------------\n\nTITLE: Testing Logtalk Diagrams Tool\nDESCRIPTION: Query to load and run the diagrams tool test suite.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/tools/diagrams/NOTES.md#2025-04-06_snippet_4\n\nLANGUAGE: prolog\nCODE:\n```\n?- logtalk_load(diagrams(tester)).\n```\n\n----------------------------------------\n\nTITLE: Using Module Aliases for Data Source\nDESCRIPTION: Demonstrates accessing data through a module alias called 'data_source'. The alias abstracts the concrete module implementation.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/module_aliases/NOTES.md#2025-04-06_snippet_3\n\nLANGUAGE: logtalk\nCODE:\n```\ndata_source::all(Data).\n```\n\n----------------------------------------\n\nTITLE: Loading Diagram Tools in Logtalk\nDESCRIPTION: Basic example of loading the diagram generation tools in Logtalk.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/tools/diagrams/SCRIPT.txt#2025-04-06_snippet_0\n\nLANGUAGE: logtalk\nCODE:\n```\n| ?- logtalk_load(diagrams(loader)).\n```\n\n----------------------------------------\n\nTITLE: Dynamic Directive Template and Modes in Logtalk\nDESCRIPTION: This snippet shows the template and modes for using the dynamic/1 directive in Logtalk. It specifies that the directive accepts qualified predicate indicator terms or qualified non-terminal indicator terms as arguments.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/refman/directives/dynamic_1.rst#2025-04-06_snippet_1\n\nLANGUAGE: Logtalk\nCODE:\n```\ndynamic(+qualified_predicate_indicator_term)\ndynamic(+qualified_non_terminal_indicator_term)\n```\n\n----------------------------------------\n\nTITLE: Testing IDs Library in Logtalk\nDESCRIPTION: Command to load and run the test suite for the ids library.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/libraries/ids.rst.txt#2025-04-06_snippet_1\n\nLANGUAGE: logtalk\nCODE:\n```\n| ?- logtalk_load(ids(tester)).\n```\n\n----------------------------------------\n\nTITLE: Decoding Base64URL to URL in Logtalk\nDESCRIPTION: This snippet shows decoding a Base64URL encoded string back to its original URL using the base64url::parse/2 predicate.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/libraries/base64.rst#2025-04-06_snippet_7\n\nLANGUAGE: prolog\nCODE:\n```\n| ?- base64url::parse(atom('aHR0cHM6Ly9sb2d0YWxrLm9yZw'), URL).\nURL == 'https://logtalk.org'\nyes\n```\n\n----------------------------------------\n\nTITLE: Loading a Prolog Module for Analysis in Logtalk\nDESCRIPTION: This snippet demonstrates how to load a Prolog module file for analysis with the dead_code_scanner tool in Logtalk. It uses the logtalk_load/2 predicate with the source_data option set to on.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/devtools/dead_code_scanner.rst#2025-04-06_snippet_5\n\nLANGUAGE: logtalk\nCODE:\n```\n| ?- logtalk_load(module, [source_data(on)]).\n```\n\n----------------------------------------\n\nTITLE: End Object Directive Syntax\nDESCRIPTION: The basic syntax for the end_object directive that marks the end of an object definition.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/refman/directives/end_object_0.rst#2025-04-06_snippet_0\n\nLANGUAGE: logtalk\nCODE:\n```\nend_object\n```\n\n----------------------------------------\n\nTITLE: Creating ECLiPSe Files for 'wumpus' Example\nDESCRIPTION: This snippet shows how to create ECLiPSe files for embedding the 'wumpus' text adventure example. It uses the eclipse_logtalk_eco.sh script to generate the necessary files and demonstrates how to load them.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/scripts/embedding/SCRIPT.txt#2025-04-06_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\n$ cd \"$LOGTALKHOME/scripts/embedding/eclipse/\"\n$ ./eclipse_logtalk_eco.sh -c -d \"$HOME\"/collect -l \"$LOGTALKUSER/examples/adventure/wumpus.lgt\" -g \"'::'(wumpus,main),halt\"\n$ cd ~/collect/\n$ eclipse -L iso -t user -f loader.eco\n```\n\n----------------------------------------\n\nTITLE: Loading Logtalk in SWI-Prolog macOS GUI Application\nDESCRIPTION: Code snippet for setting up environment variables and loading Logtalk in the SWI-Prolog.app macOS GUI application. It defines LOGTALKHOME and LOGTALKUSER variables and loads the Logtalk integration file.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/adapters/NOTES.md#2025-04-06_snippet_0\n\nLANGUAGE: Prolog\nCODE:\n```\n:- if((\n\tcurrent_prolog_flag(home,HOME),\n\tsub_atom(HOME,_,_,0,'SWI-Prolog.app/Contents/swipl')\n)).\n\n\t:- setenv('LOGTALKHOME', '/opt/local/share/logtalk').\n\t:- setenv('LOGTALKUSER', '/Users/pmoura/logtalk').\n\t:- ['$LOGTALKHOME/integration/logtalk_swi.pl'].\n\n:- endif.\n```\n\n----------------------------------------\n\nTITLE: Defining the ask_question/5 Method Signature in Logtalk\nDESCRIPTION: Signature of the ask_question/5 built-in method that allows asking a question with validation. The Question is converted to text using the message_tokens/2 hook predicate, and the Check argument is a closure for validating user input.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/refman/methods/ask_question_5.rst#2025-04-06_snippet_0\n\nLANGUAGE: logtalk\nCODE:\n```\nask_question(Kind, Component, Question, Check, Answer)\n```\n\n----------------------------------------\n\nTITLE: Installing Logtalk Pack in SWI-Prolog\nDESCRIPTION: Prolog query to install the Logtalk pack for SWI-Prolog using the pack_install/1 predicate.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/adapters/NOTES.md#2025-04-06_snippet_2\n\nLANGUAGE: Prolog\nCODE:\n```\n?- pack_install(logtalk).\n```\n\n----------------------------------------\n\nTITLE: Generating HTML5 Document\nDESCRIPTION: Example of generating a complete HTML5 document with title and paragraph\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/libraries/html.rst#2025-04-06_snippet_5\n\nLANGUAGE: prolog\nCODE:\n```\n| ?- html5::generate(\n            file('hello.html'),\n            html([lang=en], [head(title('Hello world!')), body(p('Bye!'))])\n        ).\n```\n\n----------------------------------------\n\nTITLE: Removing Conditional Breakpoints in Logtalk\nDESCRIPTION: Example of removing conditional breakpoints using the debugger's nospy/3 predicate, which removes all breakpoints matching the specified pattern.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/userman/debugging.rst.txt#2025-04-06_snippet_10\n\nLANGUAGE: text\nCODE:\n```\n| ?- debugger::nospy(planet, _, _).\n\nAll matching conditional breakpoints removed.\nyes\n```\n\n----------------------------------------\n\nTITLE: Printing Logtalk, Prolog backend, and kernel versions\nDESCRIPTION: Prints the versions of Logtalk, the Prolog backend, and the kernel if running as a notebook.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/expansion/NOTES.md#2025-04-06_snippet_0\n\nLANGUAGE: logtalk\nCODE:\n```\n%versions\n```\n\n----------------------------------------\n\nTITLE: Printing Logtalk, Prolog Backend, and Kernel Versions\nDESCRIPTION: This snippet prints the versions of Logtalk, the Prolog backend, and the kernel if running as a notebook.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/self_vs_this/NOTES.md#2025-04-06_snippet_0\n\nLANGUAGE: logtalk\nCODE:\n```\n%versions\n```\n\n----------------------------------------\n\nTITLE: Threaded Wait Predicate Signature\nDESCRIPTION: Signature and modes for the threaded_wait predicate that suspends a thread until matching notifications are received.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/refman/predicates/threaded_wait_1.rst.txt#2025-04-06_snippet_0\n\nLANGUAGE: prolog\nCODE:\n```\nthreaded_wait(Term)\nthreaded_wait([Term| Terms])\n```\n\n----------------------------------------\n\nTITLE: Checking Versions in Logtalk Notebook\nDESCRIPTION: Prints the versions of Logtalk, the Prolog backend, and the kernel when running in a notebook environment.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/serialization/NOTES.md#2025-04-06_snippet_0\n\nLANGUAGE: logtalk\nCODE:\n```\n%versions\n```\n\n----------------------------------------\n\nTITLE: Compiler Error and Warning Examples\nDESCRIPTION: Sample compiler output showing error and warning message formatting with prefixes.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/userman/programming.rst.txt#2025-04-06_snippet_5\n\nLANGUAGE: text\nCODE:\n```\n!     Existence error: directive object/1 does not exist\n!       in directive end_object/0\n!       in file /home/jdoe/logtalk/examples/errors/unmatched_directive.lgt at or above line 27\n\n*     No matching clause for goal: baz(a)\n*       while compiling object main_include_compiler_warning\n*       in file /home/jdoe/logtalk/examples/errors/include_compiler_warning.lgt between lines 38-39\n```\n\n----------------------------------------\n\nTITLE: Loading Logtalk Source with Automatic Context Information\nDESCRIPTION: Query to load a Logtalk source file with a hook that automatically adds file and line context information to assertion calls.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/devtools/assertions.rst#2025-04-06_snippet_5\n\nLANGUAGE: Prolog\nCODE:\n```\nlogtalk_load(source, [hook(assertions(debug))])\n```\n\n----------------------------------------\n\nTITLE: Defining abolish_object/1 Predicate in Logtalk\nDESCRIPTION: Specification of the abolish_object/1 predicate, which takes an object identifier as an argument and abolishes the corresponding dynamic object. The predicate has one mode and produces one proof.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/refman/predicates/abolish_object_1.rst#2025-04-06_snippet_0\n\nLANGUAGE: Logtalk\nCODE:\n```\nabolish_object(Object)\n```\n\nLANGUAGE: Logtalk\nCODE:\n```\nabolish_object(+object_identifier) - one\n```\n\n----------------------------------------\n\nTITLE: Testing Nested Dictionaries Library in Logtalk\nDESCRIPTION: Command to load and run tests for the nested_dictionaries library using the tester file.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/libraries/nested_dictionaries.rst.txt#2025-04-06_snippet_1\n\nLANGUAGE: logtalk\nCODE:\n```\n| ?- logtalk_load(nested_dictionaries(tester)).\n```\n\n----------------------------------------\n\nTITLE: Interleaving Operations Between Pengine Answers\nDESCRIPTION: Shows how other operations can be performed between requesting consecutive answers from a pengine.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/pengines/NOTES.md#2025-04-06_snippet_8\n\nLANGUAGE: logtalk\nCODE:\n```\nwrite('Pause for tea ...').\n```\n\n----------------------------------------\n\nTITLE: Loading Super Calls Example in Logtalk\nDESCRIPTION: Loads the super_calls example module into the Logtalk environment.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/super_calls/NOTES.md#2025-04-06_snippet_0\n\nLANGUAGE: logtalk\nCODE:\n```\nlogtalk_load(super_calls(loader)).\n```\n\n----------------------------------------\n\nTITLE: Type Shrinker Template\nDESCRIPTION: Template predicate for shrinking values to smaller values of the same type.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/arbitrary_0.rst.txt#2025-04-06_snippet_1\n\nLANGUAGE: logtalk\nCODE:\n```\nshrink(Type, Large, Small)\n```\n\n----------------------------------------\n\nTITLE: Running Logtalk Tests with Source Code Links in Bash\nDESCRIPTION: This snippet shows how to run Logtalk tests using the GNU Prolog backend, generating an xUnit report with source code links to GitHub.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/devtools/lgtunit.rst#2025-04-06_snippet_68\n\nLANGUAGE: bash\nCODE:\n```\n$ cd $LOGTALKUSER\n$ logtalk_tester \\\n  -p gnu \\\n  -f xunit \\\n  -s \"$LOGTALKUSER\" \\\n  -u \"https://github.com/LogtalkDotOrg/logtalk3/tree/3e4ea295986fb09d0d4aade1f3b4968e29ef594e\"\n```\n\n----------------------------------------\n\nTITLE: Defining proper_suffix/2 predicate in Logtalk\nDESCRIPTION: Defines a predicate to check if Suffix is a proper suffix of List. It is a static predicate that can be called with Suffix as input or output and List as input.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/listp_0.rst.txt#2025-04-06_snippet_29\n\nLANGUAGE: Logtalk\nCODE:\n```\nproper_suffix(Suffix,List)\n```\n\n----------------------------------------\n\nTITLE: Loading lgtunit Test Suite\nDESCRIPTION: Query to load and test the lgtunit tool itself.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/devtools/lgtunit.rst#2025-04-06_snippet_1\n\nLANGUAGE: logtalk\nCODE:\n```\n| ?- logtalk_load(lgtunit(tester)).\n```\n\n----------------------------------------\n\nTITLE: Checking Logtalk System Version Information\nDESCRIPTION: Displays version information for Logtalk, the Prolog backend, and kernel if running as a notebook.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/operators/NOTES.md#2025-04-06_snippet_0\n\nLANGUAGE: logtalk\nCODE:\n```\n%versions\n```\n\n----------------------------------------\n\nTITLE: Using Module Aliases with Parametric Objects for First Data Source\nDESCRIPTION: Shows how to use module aliases with parametric objects, allowing different data sources to be specified as parameters. This example uses 'data1' parameter.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/module_aliases/NOTES.md#2025-04-06_snippet_4\n\nLANGUAGE: logtalk\nCODE:\n```\npardata(data1)::all(Data).\n```\n\n----------------------------------------\n\nTITLE: Loading Logtalk Diagrams Tool\nDESCRIPTION: Query to load the diagrams tool into a Logtalk session.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/tools/diagrams/NOTES.md#2025-04-06_snippet_3\n\nLANGUAGE: prolog\nCODE:\n```\n?- logtalk_load(diagrams(loader)).\n```\n\n----------------------------------------\n\nTITLE: Object Definition Grammar in BNF\nDESCRIPTION: Specifies the syntax for defining objects including directives and relations.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/refman/grammar.rst#2025-04-06_snippet_1\n\nLANGUAGE: bnf\nCODE:\n```\nobject ::=\n   begin_object_directive ( object_term )* end_object_directive\n\nbegin_object_directive ::=\n   \":- object(\" object_identifier ( \",\" object_relations )? \").\"\n```\n\n----------------------------------------\n\nTITLE: Testing the Intervals Library in Logtalk\nDESCRIPTION: Command to load the test suite for the intervals library by loading the tester.lgt file. This allows users to verify the correct functioning of the library predicates.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/library/intervals/NOTES.md#2025-04-06_snippet_1\n\nLANGUAGE: logtalk\nCODE:\n```\n| ?- logtalk_load(intervals(tester)).\n```\n\n----------------------------------------\n\nTITLE: Handling abolished predicate in class instance\nDESCRIPTION: Shows error handling when querying the abolished predicate p2/1 in a class instance.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/dynpred/NOTES.md#2025-04-06_snippet_11\n\nLANGUAGE: logtalk\nCODE:\n```\ncatch(instance::p2(_), Error, true).\n```\n\n----------------------------------------\n\nTITLE: Character Input/Output Predicates in Logtalk\nDESCRIPTION: Built-in predicates for reading and writing characters in Logtalk.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/coding/subethaedit2/Logtalk.mode/Contents/Resources/AutocompleteAdditions.txt#2025-04-06_snippet_20\n\nLANGUAGE: logtalk\nCODE:\n```\nget_char(, )\nget_char()\nget_code(, )\nget_code()\npeek_char(, )\npeek_char()\npeek_code(, )\npeek_code()\nput_char(, )\nput_char()\nput_code(, )\nput_code()\nnl()\nnl\n```\n\n----------------------------------------\n\nTITLE: Creating SWI-Prolog Saved State for 'spider' Example\nDESCRIPTION: This snippet shows how to create a SWI-Prolog saved state from the 'spider' text adventure example. It uses the swipl_logtalk_qlf.sh script with additional options to generate an executable saved state.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/scripts/embedding/SCRIPT.txt#2025-04-06_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n$ cd \"$LOGTALKHOME/scripts/embedding/swipl/\"\n$ ./swipl_logtalk_qlf.sh -c -x -d \"$HOME\"/collect -n spider -l \"$LOGTALKUSER/examples/adventure/spider.lgt\" -g \"'::'(spider,start),halt\"\n$ ~/collect/spider\n```\n\n----------------------------------------\n\nTITLE: Loading Code with Hot Patching in Logtalk\nDESCRIPTION: Initialization directive showing how to enable complementing categories and load a patch after loading the application. This setup allows runtime modification of object behavior.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/devtools/lgtunit.rst#2025-04-06_snippet_53\n\nLANGUAGE: logtalk\nCODE:\n```\n:- initialization((\n    ...,\n    set_logtalk_flag(complements, allow),\n    logtalk_load(application),\n    logtalk_load(mock_login),\n    ...\n)).\n```\n\n----------------------------------------\n\nTITLE: Retrieving Results from First Variant Threaded Call in Logtalk\nDESCRIPTION: Shows how the first threaded_exit/1 call will pick one of the previously executed variant threaded calls and retrieve all its solutions.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/threads/nondet/NOTES.md#2025-04-06_snippet_7\n\nLANGUAGE: logtalk\nCODE:\n```\n%%table\nthreaded_exit(lists::member(X, [1,2,3])).\n```\n\n----------------------------------------\n\nTITLE: Testing Logtalk Debugger\nDESCRIPTION: Query to load the tester file for the Logtalk debugger tool.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/tools/debugger/NOTES.md#2025-04-06_snippet_1\n\nLANGUAGE: Prolog\nCODE:\n```\n| ?- logtalk_load(debugger(tester)).\n```\n\n----------------------------------------\n\nTITLE: Generating Null UUID in Logtalk\nDESCRIPTION: Demonstrates using the uuid_null/1 predicate to generate the null UUID (all zeros). The null UUID is a special case useful as a placeholder or default value.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/library/uuid/NOTES.md#2025-04-06_snippet_8\n\nLANGUAGE: logtalk\nCODE:\n```\n| ?- uuid::uuid_null(UUID).\nUUID = '00000000-0000-0000-0000-000000000000'\nyes\n```\n\n----------------------------------------\n\nTITLE: FCube Academic Citation\nDESCRIPTION: BibTeX citation for the original FCube paper describing the prover implementation.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/ports/fcube.rst#2025-04-06_snippet_2\n\nLANGUAGE: bibtex\nCODE:\n```\n@InProceedings{10.1007/978-3-642-16242-8_21,\n    author=\"Ferrari, Mauro and Fiorentini, Camillo and Fiorino, Guido\",\n    editor=\"Ferm{\\\"{u}}ller, Christian G. and Voronkov, Andrei\",\n    title=\"fCube: An Efficient Prover for Intuitionistic Propositional Logic\",\n    booktitle=\"Logic for Programming, Artificial Intelligence, and Reasoning\",\n    year=\"2010\",\n    publisher=\"Springer Berlin Heidelberg\",\n    address=\"Berlin, Heidelberg\",\n    pages=\"294--301\",\n    isbn=\"978-3-642-16242-8\"\n}\n```\n\n----------------------------------------\n\nTITLE: Setting a Predicate Breakpoint and Seeing Marker in Output\nDESCRIPTION: Example of setting a predicate breakpoint on female/2 and observing how the debugger marks the breakpoint with a '+' character in the trace output.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/userman/debugging.rst.txt#2025-04-06_snippet_20\n\nLANGUAGE: text\nCODE:\n```\n| ?- debugger::spy(female/2).\n\nyes\n\n| ?- addams::sister(Sister, Sibling).\n     Call: (1) sister(_1078,_1100) ?\n     Rule: (1) sister(_1078,_1100) ?\n     Call: (2) ::female(_1078) ?\n  +  Call: (3) female(_1078) ?\n```\n\n----------------------------------------\n\nTITLE: Syntax Definition of {}/1 in Logtalk\nDESCRIPTION: Shows the basic syntax patterns for the {}/1 control construct, which can take a Goal, Closure, or Term as its argument.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/refman/control/external_call_1.rst.txt#2025-04-06_snippet_0\n\nLANGUAGE: logtalk\nCODE:\n```\n{Goal}\n{Closure}\n{Term}\n```\n\n----------------------------------------\n\nTITLE: EDCG Passed Argument Declaration - Long Form\nDESCRIPTION: Shows the long form for declaring passed arguments in EDCG, including a default starting value.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/libraries/edcg.rst.txt#2025-04-06_snippet_9\n\nLANGUAGE: logtalk\nCODE:\n```\npass_info(Pass, PStart).\n```\n\n----------------------------------------\n\nTITLE: Generating Pack API Documentation in Logtalk\nDESCRIPTION: Example query that generates XML documentation for a pack using the lgtdoc tool, which can later be converted to HTML or other formats.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/tools/packs/NOTES.md#2025-04-06_snippet_29\n\nLANGUAGE: prolog\nCODE:\n```\n| ?- {lflat(loader)},\n     {lgtdoc(loader)},\n     logtalk::expand_library_path(lflat, Path),\n     lgtdoc::rdirectory(Path).\n```\n\n----------------------------------------\n\nTITLE: Testing Dynamic Binding - Initial Value\nDESCRIPTION: Tests initial value with dynamic binding through super calls.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/super_calls/NOTES.md#2025-04-06_snippet_5\n\nLANGUAGE: logtalk\nCODE:\n```\nbottom::value(Value).\n```\n\n----------------------------------------\n\nTITLE: FCube Academic Citation\nDESCRIPTION: BibTeX citation for the academic paper describing FCube, authored by Ferrari, Fiorentini, and Fiorino.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/ports/fcube.rst.txt#2025-04-06_snippet_1\n\nLANGUAGE: bibtex\nCODE:\n```\n@InProceedings{10.1007/978-3-642-16242-8_21,\n    author=\"Ferrari, Mauro and Fiorentini, Camillo and Fiorino, Guido\",\n    editor=\"Ferm{\\\"u}ller, Christian G. and Voronkov, Andrei\",\n    title=\"fCube: An Efficient Prover for Intuitionistic Propositional Logic\",\n    booktitle=\"Logic for Programming, Artificial Intelligence, and Reasoning\",\n    year=\"2010\",\n    publisher=\"Springer Berlin Heidelberg\",\n    address=\"Berlin, Heidelberg\",\n    pages=\"294--301\",\n    isbn=\"978-3-642-16242-8\"\n}\n```\n\n----------------------------------------\n\nTITLE: Loading the ISO 8601 Library in Logtalk\nDESCRIPTION: Command to load all entities in the iso8601 library by using the loader.lgt file.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/contributions/iso8601.rst.txt#2025-04-06_snippet_0\n\nLANGUAGE: logtalk\nCODE:\n```\n| ?- logtalk_load(iso8601(loader)).\n```\n\n----------------------------------------\n\nTITLE: Installing a Pack with GitHub Authentication in Logtalk\nDESCRIPTION: Illustrates how to pass authentication headers to curl when installing a pack from GitHub using a personal access token.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/devtools/packs.rst.txt#2025-04-06_snippet_29\n\nLANGUAGE: logtalk\nCODE:\n```\n| ?- packs::install(reg, bar, 1:1:2, [curl('--header \"Authorization: token foo42\"')]).\n```\n\n----------------------------------------\n\nTITLE: Meta-predicate Template for threaded_ignore/1\nDESCRIPTION: The meta-predicate template definition for threaded_ignore/1, indicating it takes a callable goal as its argument.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/refman/predicates/threaded_ignore_1.rst#2025-04-06_snippet_1\n\nLANGUAGE: prolog\nCODE:\n```\nthreaded_ignore(0)\n```\n\n----------------------------------------\n\nTITLE: Loading the clustering example\nDESCRIPTION: Loads the clustering example loader file, which includes all necessary Logtalk objects and predicates for performing clustering operations.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/clustering/NOTES.md#2025-04-06_snippet_3\n\nLANGUAGE: logtalk\nCODE:\n```\nlogtalk_load(clustering(loader)).\n```\n\n----------------------------------------\n\nTITLE: Loading Example\nDESCRIPTION: Loads the includes example module using logtalk_load/1 predicate.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/includes/NOTES.md#2025-04-06_snippet_1\n\nLANGUAGE: logtalk\nCODE:\n```\nlogtalk_load(includes(loader)).\n```\n\n----------------------------------------\n\nTITLE: Generating HTML Content in Logtalk\nDESCRIPTION: Generates HTML content using the specified representation (stream or file) for the given term. The predicate takes two arguments: the sink (output destination) and the term to be converted to HTML.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/html_0.rst.txt#2025-04-06_snippet_0\n\nLANGUAGE: Logtalk\nCODE:\n```\ngenerate(Sink,Term)\n```\n\n----------------------------------------\n\nTITLE: Content Callback Usage in Logtalk HTML\nDESCRIPTION: Example demonstrating content callback mechanism for dynamic HTML generation.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/library/html/NOTES.md#2025-04-06_snippet_6\n\nLANGUAGE: prolog\nCODE:\n```\ncontent(strong('Hello world!')).\n\n| ?- current_output(Stream),\n     html5::generate(stream(Stream), span(user::content)).\n```\n\n----------------------------------------\n\nTITLE: Defining manhattan_distance/3 Predicate for Number Lists in Logtalk\nDESCRIPTION: Calculates the Manhattan distance between two lists of numbers. Fails if the lists are empty or have different lengths.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/numberlistp_0.rst.txt#2025-04-06_snippet_13\n\nLANGUAGE: Logtalk\nCODE:\n```\nmanhattan_distance(List1,List2,Distance)\n```\n\n----------------------------------------\n\nTITLE: Loading Logtalk Optionals Library\nDESCRIPTION: Command to load all entities in the optionals library using the loader file.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/library/optionals/NOTES.md#2025-04-06_snippet_0\n\nLANGUAGE: logtalk\nCODE:\n```\n| ?- logtalk_load(optionals(loader)).\n```\n\n----------------------------------------\n\nTITLE: Threaded Wait Predicate Definition in Logtalk\nDESCRIPTION: Defines the syntax and modes for the threaded_wait/1 predicate that suspends thread execution until matching notifications are received.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/refman/predicates/threaded_wait_1.rst#2025-04-06_snippet_0\n\nLANGUAGE: logtalk\nCODE:\n```\nthreaded_wait(Term)\nthreaded_wait([Term| Terms])\n```\n\n----------------------------------------\n\nTITLE: Printing Logtalk, Prolog backend, and kernel versions\nDESCRIPTION: This snippet prints the versions of Logtalk, the Prolog backend, and the kernel if running as a notebook.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/patches/NOTES.md#2025-04-06_snippet_0\n\nLANGUAGE: logtalk\nCODE:\n```\n%versions\n```\n\n----------------------------------------\n\nTITLE: Verifying patched init/0 predicate in proto object\nDESCRIPTION: This snippet verifies the patch in the 'patch' category for the predicate 'init/0' defined in the object 'proto'.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/patches/NOTES.md#2025-04-06_snippet_3\n\nLANGUAGE: logtalk\nCODE:\n```\nproto::init.\n```\n\n----------------------------------------\n\nTITLE: Loading ULID Library in Logtalk\nDESCRIPTION: Shows how to load the ULID library entities using the loader file.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/libraries/ulid.rst#2025-04-06_snippet_0\n\nLANGUAGE: logtalk\nCODE:\n```\n| ?- logtalk_load(ulid(loader)).\n```\n\n----------------------------------------\n\nTITLE: Method Usage Mode in Logtalk\nDESCRIPTION: Specifies the usage mode for the this/1 method, indicating it takes an object identifier argument and returns zero or one solutions.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/refman/methods/this_1.rst.txt#2025-04-06_snippet_1\n\nLANGUAGE: logtalk\nCODE:\n```\nthis(?object_identifier) - zero_or_one\n```\n\n----------------------------------------\n\nTITLE: Loading ToyCHR Examples in Logtalk\nDESCRIPTION: Command to load all the example constraint handling rule programs that come with the ToyCHR port.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/ports/toychr/SCRIPT.txt#2025-04-06_snippet_1\n\nLANGUAGE: prolog\nCODE:\n```\n| ?- logtalk_load(toychr('examples/loader')).\n```\n\n----------------------------------------\n\nTITLE: Loading the Shapes Example in Logtalk\nDESCRIPTION: Loads the 'shapes_ph' example module using the Logtalk loader predicate, which includes the prototype-based shapes implementation.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/shapes/ph/NOTES.md#2025-04-06_snippet_1\n\nLANGUAGE: logtalk\nCODE:\n```\nlogtalk_load(shapes_ph(loader)).\n```\n\n----------------------------------------\n\nTITLE: Running Nightly Logtalk Docker Container\nDESCRIPTION: Command to run an interactive container from the nightly Logtalk build with a top-level interpreter.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/scripts/docker/swi-prolog/README.md#2025-04-06_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -it --name logtalk_nightly \"logtalk/logtalk3-swi:nightly\"\n```\n\n----------------------------------------\n\nTITLE: Declaring Accumulators and Predicates in EDCG\nDESCRIPTION: Shows how to declare accumulators and predicates using hidden arguments in EDCG syntax for Logtalk.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/libraries/edcg.rst#2025-04-06_snippet_1\n\nLANGUAGE: logtalk\nCODE:\n```\n% declare accumulators\nacc_info(adder, X, In, Out, integer::plus(X,In,Out)).\n\n% declare predicates using these hidden arguments\npred_info(len,0,[adder,dcg]).\npred_info(increment,0,[adder]).\n\nincrement -->>\n    % add one to the accumulator\n    [1]:adder.\n\n\nlen(Xs,N) :-\n    len(0,N,Xs,[]).\n\nlen -->>\n    % 'dcg' accumulator has an element\n    [_],\n    !,\n    % increment the 'adder' accumulator\n    increment,\n    len.\nlen -->>\n    [].\n```\n\n----------------------------------------\n\nTITLE: Highlighting Prolog Files Using Logtalk Language Definition\nDESCRIPTION: Command to use the Logtalk language definition for highlighting plain Prolog files by specifying the source language explicitly.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/coding/source-highlight/NOTES.md#2025-04-06_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n% source-highlight --src-lang lgt --out-format xhtml --input foo.pl --output foo.html\n```\n\n----------------------------------------\n\nTITLE: Updating a Pack with Options in Logtalk\nDESCRIPTION: Demonstrates how to install a pack with specific options, such as updating an existing installation and enabling verbose output.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/devtools/packs.rst.txt#2025-04-06_snippet_27\n\nLANGUAGE: logtalk\nCODE:\n```\n| ?- packs::install(reg, bar, 1:1:2, [update(true)]).\n```\n\n----------------------------------------\n\nTITLE: Starting Debug Mode in Logtalk\nDESCRIPTION: Example of starting debug mode using the debugger::debug predicate, which enables debugging with breakpoints without tracing every execution step.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/userman/debugging.rst.txt#2025-04-06_snippet_22\n\nLANGUAGE: text\nCODE:\n```\n| ?- debugger::debug.\n\nyes\n```\n\n----------------------------------------\n\nTITLE: Loading the Diagrams Tool in Logtalk\nDESCRIPTION: Query to load the diagrams tool into a Logtalk session.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/devtools/diagrams.rst.txt#2025-04-06_snippet_3\n\nLANGUAGE: logtalk\nCODE:\n```\n| ?- logtalk_load(diagrams(loader)).\n```\n\n----------------------------------------\n\nTITLE: Loading ToyCHR Library in Logtalk\nDESCRIPTION: Command to load all entities in the ToyCHR port using the loader.lgt file.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/ports/toychr.rst#2025-04-06_snippet_1\n\nLANGUAGE: prolog\nCODE:\n```\n| ?- logtalk_load(toychr(loader)).\n```\n\n----------------------------------------\n\nTITLE: Enumerating Logtalk Sub-libraries\nDESCRIPTION: Enumerates, by backtracking, all library sub-libraries. It has a static compilation flag and accepts a library and sub-library as arguments.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/code_metric_0.rst.txt#2025-04-06_snippet_6\n\nLANGUAGE: Logtalk\nCODE:\n```\nsub_library(Library,SubLibrary)\n```\n\n----------------------------------------\n\nTITLE: Loading Doclet Tool in Logtalk\nDESCRIPTION: Basic query to load both the doclet loader and the user-defined doclet implementation files. The doclet files should be named 'doclet.lgt' or 'doclet.logtalk'.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/devtools/doclet.rst#2025-04-06_snippet_0\n\nLANGUAGE: prolog\nCODE:\n```\n| ?- logtalk_load([doclet(loader), doclet]).\n```\n\n----------------------------------------\n\nTITLE: XUnit Message Cache Predicate Definition\nDESCRIPTION: Defines a dynamic predicate that caches messages emitted by the lgtunit tool during test execution. The predicate stores test messages for later conversion to xUnit XML format output.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/xunit_output_0.rst.txt#2025-04-06_snippet_0\n\nLANGUAGE: logtalk\nCODE:\n```\nmessage_cache_/1\n```\n\n----------------------------------------\n\nTITLE: Implementing Registry Specification Object in Logtalk\nDESCRIPTION: This snippet demonstrates how to create a registry specification object that implements the registry_protocol. It includes metadata like version, author, and description, as well as methods for defining the registry name, description, home URL, clone URL, and archive URL.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/devtools/packs.rst.txt#2025-04-06_snippet_15\n\nLANGUAGE: logtalk\nCODE:\n```\n:- object(jdoe_awesome_packs_registry,\n    implements(registry_protocol)).\n\n    :- info([\n        version is 1:0:0,\n        author is 'John Doe',\n        date is 2021-10-18,\n        comment is 'John Doe awesome packs registry spec.'\n    ]).\n\n    name(jdoe_awesome_packs).\n\n    description('John Doe awesome packs').\n\n    home('https://example.com/jdoe_awesome_packs').\n\n    clone('https://github.com/jdoe/jdoe_awesome_packs.git').\n\n    archive('https://github.com/jdoe/jdoe_awesome_packs/archive/main.zip').\n\n:- end_object.\n```\n\n----------------------------------------\n\nTITLE: Loading Expand Library Alias Paths in Logtalk\nDESCRIPTION: Command to load the expand_library_alias_paths library using the loader utility file.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/library/expand_library_alias_paths/NOTES.md#2025-04-06_snippet_0\n\nLANGUAGE: logtalk\nCODE:\n```\n| ?- logtalk_load(expand_library_alias_paths(loader)).\n```\n\n----------------------------------------\n\nTITLE: Redirecting Assertion Messages in Logtalk\nDESCRIPTION: Logtalk category defining a message hook to redirect assertion failure and error messages to a custom log file.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/devtools/assertions.rst#2025-04-06_snippet_7\n\nLANGUAGE: Logtalk\nCODE:\n```\n:- category(redirect_assertions_messages).\n\n    :- multifile(logtalk::message_hook/4).\n    :- dynamic(logtalk::message_hook/4).\n\n    logtalk::message_hook(Message, error, assertions, _) :-\n        writeq(my_log_file, Message), write(my_log_file, '.\\n').\n\n:- end_category.\n```\n\n----------------------------------------\n\nTITLE: Dynamic Predicate for Tracking Module Predicate Calls in Logtalk\nDESCRIPTION: Internal dynamic table that keeps track of module predicate calls during analysis. Used to generate appropriate use_module/2 directives in wrapper objects.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/wrapper_0.rst.txt#2025-04-06_snippet_17\n\nLANGUAGE: Logtalk\nCODE:\n```\nmodule_predicate_called_/3\n```\n\n----------------------------------------\n\nTITLE: Loading and Running Metapredicates Compiled Tests in Logtalk\nDESCRIPTION: This snippet loads the metapredicates_compiled tester module and runs the associated tests. It demonstrates how to load and execute tests for the compiled metapredicates example.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/metapredicates_compiled/NOTES.md#2025-04-06_snippet_1\n\nLANGUAGE: logtalk\nCODE:\n```\nlogtalk_load(metapredicates_compiled(tester)).\n```\n\n----------------------------------------\n\nTITLE: TSV Stream Writing Predicate in Logtalk\nDESCRIPTION: Writes data from object predicate clauses to a TSV stream. Takes stream or alias, object identifier, and predicate indicator as arguments. Includes comprehensive error handling for stream operations and invalid inputs.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/tsv_protocol_0.rst.txt#2025-04-06_snippet_7\n\nLANGUAGE: logtalk\nCODE:\n```\nwrite_stream(Stream,Object,Predicate)\n```\n\n----------------------------------------\n\nTITLE: Mode Declaration for consistency_error/3 in Logtalk\nDESCRIPTION: Specifies the mode declaration for consistency_error/3, indicating the expected types of arguments and that it always results in an error.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/refman/methods/consistency_error_3.rst#2025-04-06_snippet_2\n\nLANGUAGE: logtalk\nCODE:\n```\nconsistency_error(+atom, @nonvar, @nonvar) - error\n```\n\n----------------------------------------\n\nTITLE: Defining scalar_product/3 Predicate for Number Lists in Logtalk\nDESCRIPTION: Calculates the scalar product of two lists of numbers. Fails if the lists are empty or have different lengths.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/numberlistp_0.rst.txt#2025-04-06_snippet_14\n\nLANGUAGE: Logtalk\nCODE:\n```\nscalar_product(List1,List2,Product)\n```\n\n----------------------------------------\n\nTITLE: Getting Help for Library Entities\nDESCRIPTION: Command to get documentation for a specific library entity (random) using the help system with the library/1 predicate.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/tools/help/SCRIPT.txt#2025-04-06_snippet_5\n\nLANGUAGE: logtalk\nCODE:\n```\n| ?- help::library(random).\n```\n\n----------------------------------------\n\nTITLE: Usage Examples\nDESCRIPTION: Demonstrates different ways to use the threaded_once predicate with various goal types.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/refman/predicates/threaded_once_1_2.rst#2025-04-06_snippet_3\n\nLANGUAGE: prolog\nCODE:\n```\nthreaded_once(Goal)\nthreaded_once(::Message)\nthreaded_once(Object::Message)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Second Pengine Answer\nDESCRIPTION: Retrieves the next answer from the previously created pengine query.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/pengines/NOTES.md#2025-04-06_snippet_9\n\nLANGUAGE: logtalk\nCODE:\n```\nengines::answer(my_question, Answer).\n```\n\n----------------------------------------\n\nTITLE: Defining least_common_multiple/2 Predicate for Number Lists in Logtalk\nDESCRIPTION: Computes the least common multiple of a list of two or more positive integers. Fails for empty lists, single-element lists, or lists containing zero.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/numberlistp_0.rst.txt#2025-04-06_snippet_20\n\nLANGUAGE: Logtalk\nCODE:\n```\nleast_common_multiple(Integers,LeastCommonMultiple)\n```\n\n----------------------------------------\n\nTITLE: Defining Meta-calls TOC Structure in RST\nDESCRIPTION: RestructuredText markup defining the table of contents structure for meta-call documentation, listing the available meta-call predicates.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/refman/methods/meta_call_methods.rst#2025-04-06_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. toctree::\n   :maxdepth: 1\n\n   call_N\n   ignore_1\n   once_1\n   not_1\n```\n\n----------------------------------------\n\nTITLE: Testing Logtalk Sets Library\nDESCRIPTION: Command to load and run tests for the sets library predicates.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/libraries/sets.rst.txt#2025-04-06_snippet_1\n\nLANGUAGE: prolog\nCODE:\n```\n| ?- logtalk_load(sets(tester)).\n```\n\n----------------------------------------\n\nTITLE: Template and Modes for use_module/1\nDESCRIPTION: Specifies the template and mode for the use_module/1 directive, indicating it takes a module alias list as a required argument.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/refman/directives/use_module_1.rst#2025-04-06_snippet_1\n\nLANGUAGE: logtalk\nCODE:\n```\nuse_module(+module_alias_list)\n```\n\n----------------------------------------\n\nTITLE: Computing GCD Using ToyCHR Constraints\nDESCRIPTION: Example query using the GCD constraint handler to find the greatest common divisor of 9 and 6. The result is obtained through constraint simplification.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/ports/toychr/SCRIPT.txt#2025-04-06_snippet_2\n\nLANGUAGE: prolog\nCODE:\n```\n| ?- gcd::chr_is(GCD, (gcd(9), gcd(6))).\n```\n\n----------------------------------------\n\nTITLE: Test Driver Configuration\nDESCRIPTION: Example of a tester.lgt driver file that loads and configures the test environment with custom dialects.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/devtools/lgtunit.rst.txt#2025-04-06_snippet_4\n\nLANGUAGE: logtalk\nCODE:\n```\n:- initialization((\n    set_logtalk_flag(report, warnings),\n    logtalk_load(lgtunit(loader)),\n    logtalk_load(library(hook_flows_loader)),\n    logtalk_load(simple_dialect),\n    logtalk_load(tests, [hook(hook_pipeline([simple_dialect,lgtunit]))]),\n    tests::run\n)).\n```\n\n----------------------------------------\n\nTITLE: Querying logtalk_library_path/2 in Logtalk\nDESCRIPTION: Example queries demonstrating how to retrieve library paths using the logtalk_library_path/2 predicate, including predefined and custom library aliases.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/refman/predicates/logtalk_library_path_2.rst#2025-04-06_snippet_2\n\nLANGUAGE: Prolog\nCODE:\n```\n| ?- logtalk_library_path(viewpoints, Path).\n\nPath = examples('viewpoints/')\nyes\n\n| ?- logtalk_library_path(Library, Path).\n\nLibrary = home,\nPath = '$HOME/' ;\n\nLibrary = logtalk_home,\nPath = '$LOGTALKHOME/' ;\n\nLibrary = logtalk_user\nPath = '$LOGTALKUSER/' ;\n\nLibrary = examples\nPath = logtalk_user('examples/') ;\n\nLibrary = library\nPath = logtalk_user('library/') ;\n\nLibrary = viewpoints\nPath = examples('viewpoints/')\nyes\n```\n\n----------------------------------------\n\nTITLE: Using Library Entity Operators in Logtalk\nDESCRIPTION: Example of importing and using operators defined in a library entity (lgtunit) within a client entity in Logtalk. This is done using the uses/2 directive to make the operator available for use.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/userman/predicates.rst.txt#2025-04-06_snippet_2\n\nLANGUAGE: logtalk\nCODE:\n```\n:- uses(lgtunit, [\n    op(700, xfx, =~=), (=~=)/2\n]).\n```\n\n----------------------------------------\n\nTITLE: Testing OS Library in Logtalk\nDESCRIPTION: Command to load and run tests for the OS library predicates\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/library/os/NOTES.md#2025-04-06_snippet_1\n\nLANGUAGE: logtalk\nCODE:\n```\n| ?- logtalk_load(os(tester)).\n```\n\n----------------------------------------\n\nTITLE: ReStructuredText Table of Contents Definition\nDESCRIPTION: Defines a table of contents tree for contribution documentation modules with a maximum depth of 2 levels.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/contributions/index.rst.txt#2025-04-06_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. toctree::\n   :maxdepth: 2\n\n   flags\n   iso8601\n   pddl_parser\n   verdi_neruda\n   xml_parser\n```\n\n----------------------------------------\n\nTITLE: Loading Now You See Me Example\nDESCRIPTION: Loads the example module using the Logtalk loader.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/now_you_see_me/NOTES.md#2025-04-06_snippet_1\n\nLANGUAGE: logtalk\nCODE:\n```\nlogtalk_load(now_you_see_me(loader)).\n```\n\n----------------------------------------\n\nTITLE: Loading the Loops Library in Logtalk\nDESCRIPTION: Command to load the main entities in the 'loops' library by loading the loader.lgt file. This is required before using any of the loop predicates in your Logtalk applications.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/libraries/loops.rst.txt#2025-04-06_snippet_0\n\nLANGUAGE: logtalk\nCODE:\n```\n| ?- logtalk_load(loops(loader)).\n```\n\n----------------------------------------\n\nTITLE: Retrieving List of All Class Instances in Logtalk\nDESCRIPTION: Predicate that returns a list containing all class instances. Takes a single parameter Instances which will be bound to the list of all instances.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/class_hierarchyp_0.rst.txt#2025-04-06_snippet_3\n\nLANGUAGE: logtalk\nCODE:\n```\ninstances(Instances)\n```\n\n----------------------------------------\n\nTITLE: Updating GNU Prolog adapter file for Logtalk\nDESCRIPTION: Improved the GNU Prolog adapter file to include dummy definitions for Prolog built-in predicates used in Logtalk but not called when using GNU Prolog as the back-end compiler.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/RELEASE_NOTES.md#2025-04-06_snippet_122\n\nLANGUAGE: Prolog\nCODE:\n```\n* IMPROVED: The GNU Prolog adapter file now includes dummy definitions for\nProlog built-in predicates used in the Logtalk compiler or runtime but that\nare never called when using GNU Prolog as the back-end compiler. This allows\nusing GNU Prolog `gplc` utility to generate executables that embed Logtalk\nwithout requiring patching of the Logtalk core files or the adapter file.\n```\n\n----------------------------------------\n\nTITLE: Loading Prolog Module Resources in a Loader File\nDESCRIPTION: Example of loading Prolog modules without exports in a Logtalk loader file.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/userman/programming.rst#2025-04-06_snippet_9\n\nLANGUAGE: logtalk\nCODE:\n```\n:- use_module(library(clpfd), []).\n...\n\n:- initialization((\n    ...\n)).\n```\n\n----------------------------------------\n\nTITLE: Private Reference Counter Predicate in Logtalk\nDESCRIPTION: The reference_/1 private predicate maintains a reference count for the recorded database. It's defined as dynamic to allow updates.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/recorded_database_core_0.rst.txt#2025-04-06_snippet_9\n\nLANGUAGE: logtalk\nCODE:\n```\nreference_(Reference)\n```\n\n----------------------------------------\n\nTITLE: Configuring Library Path in Settings\nDESCRIPTION: Logtalk initialization code to set up the logtalk_packs library path.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/devtools/packs.rst#2025-04-06_snippet_8\n\nLANGUAGE: logtalk\nCODE:\n```\n:- initialization((\n    logtalk_load_context(directory, Directory),\n    assertz(logtalk_library_path(logtalk_packs, Directory))\n)).\n```\n\n----------------------------------------\n\nTITLE: Loading the Logging Example\nDESCRIPTION: Loads the logging example module using the Logtalk loader.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/logs/NOTES.md#2025-04-06_snippet_1\n\nLANGUAGE: logtalk\nCODE:\n```\nlogtalk_load(logs(loader)).\n```\n\n----------------------------------------\n\nTITLE: Querying Asian Countries\nDESCRIPTION: Retrieves country information in Asian languages from the asian object with error handling\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/encodings/NOTES.md#2025-04-06_snippet_4\n\nLANGUAGE: logtalk\nCODE:\n```\ncatch(asian::country(Country, Name, Capital), Error, true).\n```\n\n----------------------------------------\n\nTITLE: CDATA Generation with DCG in Logtalk\nDESCRIPTION: Private DCG rule for generating CDATA sections in XML output, which represent character data that should not be parsed by the XML processor.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/xml_0.rst.txt#2025-04-06_snippet_14\n\nLANGUAGE: Logtalk\nCODE:\n```\ncdata_generation(Codes)\n```\n\n----------------------------------------\n\nTITLE: Loading the Emetas Example\nDESCRIPTION: This snippet loads the emetas example, which contains the implementations of the meta-predicates using threaded engines.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/engines/emetas/NOTES.md#2025-04-06_snippet_1\n\nLANGUAGE: logtalk\nCODE:\n```\nlogtalk_load(emetas(loader)).\n```\n\n----------------------------------------\n\nTITLE: Collecting One or More Terminals Without Closure in Logtalk\nDESCRIPTION: Eagerly collects one or more terminals without a specific closure. It returns a list of atomic terminals.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/sequence_grammars_0.rst.txt#2025-04-06_snippet_3\n\nLANGUAGE: Logtalk\nCODE:\n```\none_or_more(Terminals)\n```\n\n----------------------------------------\n\nTITLE: Defining extends_object/2-3 Predicate in Logtalk\nDESCRIPTION: Defines the extends_object/2-3 predicate, which enumerates pairs of objects where the first extends the second. The relation scope can be specified as public, protected, or private.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/refman/predicates/extends_object_2_3.rst.txt#2025-04-06_snippet_0\n\nLANGUAGE: prolog\nCODE:\n```\nextends_object(Prototype, Parent)\nextends_object(Prototype, Parent, Scope)\n```\n\n----------------------------------------\n\nTITLE: Renaming Files or Directories in Logtalk\nDESCRIPTION: Renames a file or directory. Throws an error if the file or directory does not exist.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/osp_0.rst.txt#2025-04-06_snippet_8\n\nLANGUAGE: prolog\nCODE:\n```\nrename_file(Old, New)\n```\n\n----------------------------------------\n\nTITLE: Threaded Wait Usage Example in Logtalk\nDESCRIPTION: Demonstrates how to use threaded_wait/1 to suspend execution until receiving a specific data_available notification.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/refman/predicates/threaded_wait_1.rst#2025-04-06_snippet_2\n\nLANGUAGE: logtalk\nCODE:\n```\n..., threaded_wait(data_available), ...\n```\n\n----------------------------------------\n\nTITLE: Example of Around Method Implementation Using (@)/1 in Logtalk\nDESCRIPTION: Demonstrates how to use the (@)/1 control construct to implement an around method in a complementing category, adding behavior before and after calling the original predicate definition.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/refman/control/call_in_this_1.rst.txt#2025-04-06_snippet_2\n\nLANGUAGE: logtalk\nCODE:\n```\nmake_sound :-\n    write('Started making sound...'), nl,\n    @make_sound,\n    write('... finished making sound.'), nl.\n```\n\n----------------------------------------\n\nTITLE: QuickCheck Testing of Prolog Predicates in Logtalk\nDESCRIPTION: Demonstrates how to use QuickCheck to test Prolog predicates without explicitly defining properties.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/quick_check/NOTES.md#2025-04-06_snippet_7\n\nLANGUAGE: logtalk\nCODE:\n```\nlgtunit::quick_check(length(+list, -integer)).\n```\n\n----------------------------------------\n\nTITLE: Parsing PDDL Problem File with Rest\nDESCRIPTION: Parses a PDDL 3.0 problem file and returns both the parsed content as a compound term and any remaining content. This is particularly useful when domain and problem definitions are contained in a single file.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/pddl_0.rst.txt#2025-04-06_snippet_3\n\nLANGUAGE: logtalk\nCODE:\n```\nparse_problem(File,Output,RestOfFile)\n```\n\n----------------------------------------\n\nTITLE: Importing the Gensym Core Category into a Logtalk Object\nDESCRIPTION: Demonstrates how to import the gensym_core category into a Logtalk object to create local atom generators, minimizing potential generator name clashes.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/libraries/gensym.rst#2025-04-06_snippet_2\n\nLANGUAGE: logtalk\nCODE:\n```\n:- object(foo,\n    imports(private::gensym_core)).\n\n    bar :-\n        ^^gensym(p, S),\n        ...\n\n:- end_object.\n```\n\n----------------------------------------\n\nTITLE: Installing Required Dependencies with MacPorts on macOS\nDESCRIPTION: Terminal command for installing the necessary dependencies using MacPorts package manager on macOS systems.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/devtools/packs.rst.txt#2025-04-06_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n$ sudo port install coreutils wget libarchive gnupg2 git direnv\n```\n\n----------------------------------------\n\nTITLE: Logtalk Entity Enumeration Documentation Structure\nDESCRIPTION: RST documentation structure defining the table of contents for entity enumeration predicates, including current_category/1, current_object/1, and current_protocol/1.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/refman/predicates/enumerating_entity_predicates.rst#2025-04-06_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. _enumerating_entity_predicates:\n\nEnumerating objects, categories and protocols\n=============================================\n\n.. toctree::\n   :maxdepth: 1\n\n   current_category_1\n   current_object_1\n   current_protocol_1\n```\n\n----------------------------------------\n\nTITLE: Loading the ToyCHR Port in Logtalk\nDESCRIPTION: Command to load the ToyCHR port into a Logtalk session. This must be done before running any constraint handling rule examples.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/ports/toychr/SCRIPT.txt#2025-04-06_snippet_0\n\nLANGUAGE: prolog\nCODE:\n```\n| ?- logtalk_load(toychr(loader)).\n```\n\n----------------------------------------\n\nTITLE: Loading All Logtalk Libraries\nDESCRIPTION: Example of loading all libraries at once using the all_loader.lgt file through the library predicate.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/libraries/overview.rst#2025-04-06_snippet_1\n\nLANGUAGE: prolog\nCODE:\n```\n| ?- logtalk_load(library(all_loader)).\n```\n\n----------------------------------------\n\nTITLE: Basic Logtalk Loader File Structure\nDESCRIPTION: Example of a basic loader file that sets project-specific flags and loads multiple source files, using the initialization/1 directive for portability.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/userman/programming.rst#2025-04-06_snippet_7\n\nLANGUAGE: logtalk\nCODE:\n```\n:- initialization((\n    % set project-specific global flags\n    set_logtalk_flag(events, allow),\n    % load the project source files\n    logtalk_load([source1, source2, source3])\n)).\n```\n\n----------------------------------------\n\nTITLE: Basic Logtalk Loader File Structure\nDESCRIPTION: Example of a basic loader file that sets project-specific flags and loads multiple source files, using the initialization/1 directive for portability.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/userman/programming.rst#2025-04-06_snippet_7\n\nLANGUAGE: logtalk\nCODE:\n```\n:- initialization((\n    % set project-specific global flags\n    set_logtalk_flag(events, allow),\n    % load the project source files\n    logtalk_load([source1, source2, source3])\n)).\n```\n\n----------------------------------------\n\nTITLE: Loading Source File with Meta Compiler Hook and Optimization in Logtalk\nDESCRIPTION: This snippet demonstrates how to load a source file using the meta_compiler hook and enable optimization. This approach is used when meta_compiler is not set as the default hook object.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/libraries/meta_compiler.rst.txt#2025-04-06_snippet_3\n\nLANGUAGE: Prolog\nCODE:\n```\n| ?- logtalk_load(my_source_file, [hook(meta_compiler), optimize(on)]).\n```\n\n----------------------------------------\n\nTITLE: Loading the TSV Library in Logtalk\nDESCRIPTION: A command to load all entities in the TSV library by loading the loader.lgt file.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/library/tsv/NOTES.md#2025-04-06_snippet_0\n\nLANGUAGE: Logtalk\nCODE:\n```\n| ?- logtalk_load(tsv(loader)).\n```\n\n----------------------------------------\n\nTITLE: Specifying Modes and Proofs for parameter/2 in Logtalk\nDESCRIPTION: Defines the mode and number of proofs for the parameter/2 method, indicating it takes an integer and a term, with zero or one proof.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/refman/methods/parameter_2.rst.txt#2025-04-06_snippet_1\n\nLANGUAGE: Logtalk\nCODE:\n```\nparameter(+integer, ?term) - zero_or_one\n```\n\n----------------------------------------\n\nTITLE: Example Usage of abolish_events/5 in Logtalk\nDESCRIPTION: Demonstrates how to use the abolish_events/5 predicate to remove all events for messages sent to the 'list' object being monitored by the 'debugger' object.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/refman/predicates/abolish_events_5.rst#2025-04-06_snippet_2\n\nLANGUAGE: Logtalk\nCODE:\n```\n% abolish all events for messages sent to the \"list\"\n% object being monitored by the \"debugger\" object:\n| ?- abolish_events(_, list, _, _, debugger).\n```\n\n----------------------------------------\n\nTITLE: Loading the Code Metrics Tool in Logtalk\nDESCRIPTION: Query to load the code_metrics tool in a Logtalk environment.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/devtools/code_metrics.rst#2025-04-06_snippet_0\n\nLANGUAGE: Logtalk\nCODE:\n```\n| ?- logtalk_load(code_metrics(loader)).\n```\n\n----------------------------------------\n\nTITLE: Retrieving Operating System Name in Logtalk\nDESCRIPTION: Returns the operating system name. On POSIX systems it returns uname -s, on macOS it returns 'Darwin', and on Windows it returns 'Windows'.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/osp_0.rst.txt#2025-04-06_snippet_17\n\nLANGUAGE: prolog\nCODE:\n```\noperating_system_name(Name)\n```\n\n----------------------------------------\n\nTITLE: Loading ULID Library in Logtalk\nDESCRIPTION: Command to load all entities in the ULID library using the loader file.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/library/ulid/NOTES.md#2025-04-06_snippet_0\n\nLANGUAGE: prolog\nCODE:\n```\n| ?- logtalk_load(ulid(loader)).\n```\n\n----------------------------------------\n\nTITLE: Testing Options Library in Logtalk\nDESCRIPTION: This code shows how to load the tester.lgt file to test the predicates in the options library.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/library/options/NOTES.md#2025-04-06_snippet_1\n\nLANGUAGE: Prolog\nCODE:\n```\n| ?- logtalk_load(options(tester)).\n```\n\n----------------------------------------\n\nTITLE: EDCG Passed Argument Declaration - Short Form\nDESCRIPTION: Shows the short form for declaring passed arguments in EDCG, which are conceptually similar to accumulators with =/2 as the joiner function.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/libraries/edcg.rst.txt#2025-04-06_snippet_8\n\nLANGUAGE: logtalk\nCODE:\n```\npass_info(Pass).\n```\n\n----------------------------------------\n\nTITLE: Defining Private Dynamic Predicate for Referenced Predicates in Logtalk\nDESCRIPTION: Defines a private dynamic predicate 'referenced_predicate_/1' that maintains a table of referenced predicates for the entity under processing.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/xref_diagram_1.rst.txt#2025-04-06_snippet_3\n\nLANGUAGE: Logtalk\nCODE:\n```\nreferenced_predicate_(Predicate)\n```\n\n----------------------------------------\n\nTITLE: Loading Proxy Pattern Implementation\nDESCRIPTION: Loads the proxy design pattern sample implementation from the design patterns directory.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/design_patterns/structural/proxy/NOTES.md#2025-04-06_snippet_1\n\nLANGUAGE: logtalk\nCODE:\n```\nlogtalk_load(design_patterns('structural/proxy/loader')).\n```\n\n----------------------------------------\n\nTITLE: Defining the non_standard_predicate_call_ predicate in Logtalk\nDESCRIPTION: Table of called non-standard predicates. This dynamic predicate tracks non-standard predicate calls with the calling object and the predicate indicator.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/wrapper_0.rst.txt#2025-04-06_snippet_20\n\nLANGUAGE: logtalk\nCODE:\n```\nnon_standard_predicate_call_(Object,Predicate)\n```\n\n----------------------------------------\n\nTITLE: Specifying Modes and Proofs for current_predicate/1 in Logtalk\nDESCRIPTION: Specifies the mode and number of proofs for the current_predicate/1 method, indicating it accepts a predicate indicator as input and can return zero or more results.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/refman/methods/current_predicate_1.rst#2025-04-06_snippet_1\n\nLANGUAGE: Logtalk\nCODE:\n```\ncurrent_predicate(?predicate_indicator) - zero_or_more\n```\n\n----------------------------------------\n\nTITLE: Measuring Wall Time in Logtalk\nDESCRIPTION: Returns the wall time (real-world elapsed time) in seconds.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/osp_0.rst.txt#2025-04-06_snippet_15\n\nLANGUAGE: prolog\nCODE:\n```\nwall_time(Seconds)\n```\n\n----------------------------------------\n\nTITLE: Non-Terminal Help Access\nDESCRIPTION: Provides help on built-in non-terminals using Functor//Arity notation.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/help_0.rst.txt#2025-04-06_snippet_2\n\nLANGUAGE: logtalk\nCODE:\n```\n(//)/2\n```\n\n----------------------------------------\n\nTITLE: Querying Properties of core_messages Category in Prolog\nDESCRIPTION: Demonstrates how to use the category_property/2 predicate to enumerate properties of the core_messages built-in category. This example shows how to query for various properties of a specific category.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/refman/predicates/category_property_2.rst.txt#2025-04-06_snippet_1\n\nLANGUAGE: Prolog\nCODE:\n```\n% enumerate the properties of the core_messages built-in category:\n| ?- category_property(core_messages, Property).\n\nProperty = source_data ;\nProperty = static ;\nProperty = built_in ;\n...\n```\n\n----------------------------------------\n\nTITLE: Incrementing Integers with maplist/3 and Local Predicate Lambda in Logtalk\nDESCRIPTION: Demonstrates using maplist/3 with a lambda expression containing a local predicate to add one to each integer in a list within a Logtalk object.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/symbiosis/NOTES.md#2025-04-06_snippet_5\n\nLANGUAGE: logtalk\nCODE:\n```\nsymbiosis::t(L).\n```\n\n----------------------------------------\n\nTITLE: Adding Multiple Elements as Block to Queue Front in Logtalk\nDESCRIPTION: Predicate to add multiple new elements as a block at the front of the queue. It takes a list of elements and a queue as input, and returns the new queue.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/queuep_0.rst.txt#2025-04-06_snippet_6\n\nLANGUAGE: Logtalk\nCODE:\n```\njump_all_block(Elements,Queue,NewQueue)\n```\n\n----------------------------------------\n\nTITLE: Overriding the portray_clause/1 Predicate in Logtalk\nDESCRIPTION: Example showing how to override the portray_clause/1 predicate provided by the listing category with a backend system implementation.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/libraries/listing.rst#2025-04-06_snippet_3\n\nLANGUAGE: logtalk\nCODE:\n```\n:- object(thing,\n    imports(listing)).\n\n    :- uses(user, [portray_clause/1]).\n    ...\n\n:- end_object.\n```\n\n----------------------------------------\n\nTITLE: Loading Coroutining Library in Logtalk\nDESCRIPTION: Command to load all entities in the coroutining library using the loader.lgt file.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/library/coroutining/NOTES.md#2025-04-06_snippet_0\n\nLANGUAGE: prolog\nCODE:\n```\n| ?- logtalk_load(coroutining(loader)).\n```\n\n----------------------------------------\n\nTITLE: Loading lgtunit Tool in Logtalk\nDESCRIPTION: Query to load the lgtunit testing framework.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/devtools/lgtunit.rst#2025-04-06_snippet_0\n\nLANGUAGE: logtalk\nCODE:\n```\n| ?- logtalk_load(lgtunit(loader)).\n```\n\n----------------------------------------\n\nTITLE: Learning Constants with Metagol in Logtalk\nDESCRIPTION: This example demonstrates Metagol learning a predicate 'p/2' involving constants.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/ports/metagol/SCRIPT.txt#2025-04-06_snippet_3\n\nLANGUAGE: Logtalk\nCODE:\n```\n| ?- constants1::learn.\n\n% learning p/2\n% clauses: 1\n% clauses: 2\n% clauses: 3\np(4,A).\np(A,2).\np(1,A).\nyes\n```\n\n----------------------------------------\n\nTITLE: Setting Logtalk Compiler Flag in SWI-Prolog\nDESCRIPTION: Sets a compiler flag in the SWI-Prolog adapter to turn off singleton variable checking when loading compiled Logtalk files. This works around an issue with reporting singleton variables in generated code.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/RELEASE_NOTES.md#2025-04-06_snippet_114\n\nLANGUAGE: Prolog\nCODE:\n```\n* CHANGED: The SWI-Prolog adapter file now turns off singleton variables check\nwhen loading the intermediate Prolog files generated by the compilation of\nLogtalk source files.\n```\n\n----------------------------------------\n\nTITLE: Loading the assign_parameters example\nDESCRIPTION: This snippet loads the assign_parameters example into the Logtalk environment.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/assign_parameters/NOTES.md#2025-04-06_snippet_1\n\nLANGUAGE: logtalk\nCODE:\n```\nlogtalk_load(assign_parameters(loader)).\n```\n\n----------------------------------------\n\nTITLE: Creating Trealla Prolog Files for 'wumpus' Example\nDESCRIPTION: This snippet demonstrates how to create Trealla Prolog files for embedding the 'wumpus' text adventure example. It uses the trealla_logtalk_pl.sh script to generate the necessary files and shows how to load them.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/scripts/embedding/SCRIPT.txt#2025-04-06_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\n$ cd \"$LOGTALKHOME/scripts/embedding/trealla/\"\n$ ./trealla_logtalk_pl.sh -c -d \"$HOME\"/collect -l \"$LOGTALKUSER/examples/adventure/wumpus.lgt\" -g \"'::'(wumpus,main),halt\"\n$ cd ~/collect/\n$ tpl -l loader.pl\n```\n\n----------------------------------------\n\nTITLE: Loading the Listing Library in Logtalk\nDESCRIPTION: Command to load all entities in the listing library using the loader utility file.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/library/listing/NOTES.md#2025-04-06_snippet_0\n\nLANGUAGE: logtalk\nCODE:\n```\n| ?- logtalk_load(listing(loader)).\n```\n\n----------------------------------------\n\nTITLE: GitHub CLI Authentication Command\nDESCRIPTION: This command authenticates and logs in to GitHub using the GitHub CLI. It's typically used in CI/CD pipelines before running tests that will create issues.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/tools/issue_creator/NOTES.md#2025-04-06_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\ngh auth login --hostname <string> --with-token < token.txt\n```\n\n----------------------------------------\n\nTITLE: Running PDDL Parser Unit Tests\nDESCRIPTION: Commands for running all unit tests for the PDDL parser, either from the parser's directory or from any directory.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/contributions/pddl_parser/README.txt#2025-04-06_snippet_1\n\nLANGUAGE: Prolog\nCODE:\n```\n?- logtalk_load(tester).\n```\n\nLANGUAGE: Prolog\nCODE:\n```\n?- logtalk_load(pddl_parser(tester)).\n```\n\n----------------------------------------\n\nTITLE: Loading lgtunit Library in Logtalk\nDESCRIPTION: Example query for loading the lgtunit testing framework\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/tools/lgtunit/NOTES.md#2025-04-06_snippet_0\n\nLANGUAGE: logtalk\nCODE:\n```\n| ?- logtalk_load(lgtunit(loader)).\n```\n\n----------------------------------------\n\nTITLE: List Operations\nDESCRIPTION: Demonstrates coinductive list operations like membership and append.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/coinduction/NOTES.md#2025-04-06_snippet_5\n\nLANGUAGE: logtalk\nCODE:\n```\nX = [1, 2, 3| X], lists::comember(2, X).\n```\n\n----------------------------------------\n\nTITLE: Collecting Remaining Pengine Answers\nDESCRIPTION: Demonstrates collecting all remaining answers from a pengine in a list.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/pengines/NOTES.md#2025-04-06_snippet_11\n\nLANGUAGE: logtalk\nCODE:\n```\nengines::answers(my_question, Answers).\n```\n\n----------------------------------------\n\nTITLE: Running Unit Tests with Output to File in Logtalk\nDESCRIPTION: Runs unit tests and writes results to a specified file. The Mode parameter can be 'write' to create a new file or 'append' to add results to an existing file.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/lgtunit_0.rst.txt#2025-04-06_snippet_3\n\nLANGUAGE: Logtalk\nCODE:\n```\nrun(File, Mode)\n```\n\n----------------------------------------\n\nTITLE: Generating XML documentation for tool entities for browser viewing\nDESCRIPTION: Example of using rlibrary/1 predicate to generate XML documentation for all tool entities that can be viewed directly in a browser after indexing with the lgt2xml script.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/lgtdocp_0.rst.txt#2025-04-06_snippet_1\n\nLANGUAGE: logtalk\nCODE:\n```\nrlibrary(tools)\n```\n\n----------------------------------------\n\nTITLE: Term Token Support\nDESCRIPTION: Added support for term(Term, Options) token in structured message printing to allow specifying term writing options.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/RELEASE_NOTES.md#2025-04-06_snippet_99\n\nLANGUAGE: Logtalk\nCODE:\n```\nterm(Term, Options)\n```\n\n----------------------------------------\n\nTITLE: Running Limited QuickCheck Tests on List Length Property in Logtalk\nDESCRIPTION: Performs 25 random tests on the same_length_3_prop property using QuickCheck.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/quick_check/NOTES.md#2025-04-06_snippet_4\n\nLANGUAGE: logtalk\nCODE:\n```\nlgtunit::quick_check(same_length_3_prop(+list), [n(25)]).\n```\n\n----------------------------------------\n\nTITLE: Homebrew Dependencies Installation - Shell\nDESCRIPTION: Shell commands for installing tool dependencies using Homebrew package manager on macOS.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/devtools/overview.rst#2025-04-06_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n$ brew install d2 graphviz\n$ brew install texinfo pandoc\n$ brew install libxslt fop texlive\n$ brew install allure gsed\n$ brew install coreutils libarchive gnupg2 git curl wget direnv\n$ brew install gh glab\n```\n\n----------------------------------------\n\nTITLE: Getting Queue Length in Logtalk\nDESCRIPTION: Predicate to get the length of a queue. It takes a queue as input and returns its length.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/queuep_0.rst.txt#2025-04-06_snippet_8\n\nLANGUAGE: Logtalk\nCODE:\n```\nlength(Queue,Length)\n```\n\n----------------------------------------\n\nTITLE: Enabling Event Support\nDESCRIPTION: Enables event support for messages sent at the command-line through the user pseudo-object.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/threads/birthdays/NOTES.md#2025-04-06_snippet_3\n\nLANGUAGE: logtalk\nCODE:\n```\nset_logtalk_flag(events, allow).\n```\n\n----------------------------------------\n\nTITLE: Defining Less Than Operator in Logtalk Protocol\nDESCRIPTION: Defines the less than operator (<) which evaluates to true if Term1 is less than Term2. It uses static compilation flags and works with term inputs.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/comparingp_0.rst.txt#2025-04-06_snippet_0\n\nLANGUAGE: Logtalk\nCODE:\n```\nTerm1<Term2\n```\n\n----------------------------------------\n\nTITLE: Printing All Profiling Data in Logtalk\nDESCRIPTION: Displays a table with all collected profile data after profiling.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/tools/ports_profiler/NOTES.md#2025-04-06_snippet_4\n\nLANGUAGE: Logtalk\nCODE:\n```\n| ?- ports_profiler::data.\n```\n\n----------------------------------------\n\nTITLE: Basic Package Update in Logtalk\nDESCRIPTION: Predicate reference for updating a package (implementation details not provided in source).\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/packs_0.rst.txt#2025-04-06_snippet_6\n\nLANGUAGE: logtalk\nCODE:\n```\nupdate(Pack)\n```\n\n----------------------------------------\n\nTITLE: Logtalk Make Usage Examples\nDESCRIPTION: Example usage of logtalk_make/1 showing how to reload files in debug mode, check for code issues, and clean intermediate files.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/refman/predicates/logtalk_make_1.rst.txt#2025-04-06_snippet_2\n\nLANGUAGE: prolog\nCODE:\n```\n% reload loaded source files in debug mode:\n| ?- logtalk_make(debug).\n\n% check for code issues in the loaded source files:\n| ?- logtalk_make(check).\n\n% delete all intermediate files generated by\n% the compilation of Logtalk source files:\n| ?- logtalk_make(clean).\n```\n\n----------------------------------------\n\nTITLE: Calling Super Predicate\nDESCRIPTION: Using the ^^ operator to call inherited predicate definitions when redefining a predicate.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/userman/messages.rst.txt#2025-04-06_snippet_5\n\nLANGUAGE: logtalk\nCODE:\n```\n..., ^^Predicate, ....\n```\n\n----------------------------------------\n\nTITLE: Differentiating and Simplifying Logarithmic Expression in Logtalk\nDESCRIPTION: Differentiates the expression ln(x^2 + 2x - 7) + 4x and simplifies the result. This demonstrates the handling of logarithmic functions in the symbolic differentiation system.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/symdiff/NOTES.md#2025-04-06_snippet_4\n\nLANGUAGE: logtalk\nCODE:\n```\n(log(x**2 + 2*x - 7) + 4*x)::diff(D), D::simplify(S).\n```\n\n----------------------------------------\n\nTITLE: Adding a Term as Last Entry in Logtalk\nDESCRIPTION: The recordz/2 predicate adds a term as the last term for the given key without returning a reference. It accepts a key and a term to store.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/recorded_database_core_0.rst.txt#2025-04-06_snippet_3\n\nLANGUAGE: logtalk\nCODE:\n```\nrecordz(Key,Term)\n```\n\n----------------------------------------\n\nTITLE: Loading OS Library in Logtalk\nDESCRIPTION: Command to load all entities in the OS library using the loader file\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/library/os/NOTES.md#2025-04-06_snippet_0\n\nLANGUAGE: logtalk\nCODE:\n```\n| ?- logtalk_load(os(loader)).\n```\n\n----------------------------------------\n\nTITLE: Loading the expand_library_alias_paths Library in Logtalk\nDESCRIPTION: Shows how to load all entities in the expand_library_alias_paths library using the loader.lgt utility file.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/libraries/expand_library_alias_paths.rst#2025-04-06_snippet_0\n\nLANGUAGE: prolog\nCODE:\n```\n| ?- logtalk_load(expand_library_alias_paths(loader)).\n```\n\n----------------------------------------\n\nTITLE: Declaration of write_max_depth Predicate in Logtalk\nDESCRIPTION: Declaration of the write_max_depth/1 predicate that retrieves the current term write maximum depth. When not defined, the backend default is used. It takes a non-negative integer parameter.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/debuggerp_0.rst.txt#2025-04-06_snippet_24\n\nLANGUAGE: logtalk\nCODE:\n```\nwrite_max_depth(MaxDepth)\n```\n\n----------------------------------------\n\nTITLE: GtkSourceView User Installation Path\nDESCRIPTION: User-specific directory path for installing the Logtalk language specification file\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/coding/gtksourceview2/NOTES.md#2025-04-06_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\n~/.gnome2/gtksourceview-2.0/language-specs/\n```\n\n----------------------------------------\n\nTITLE: Setting Spy Point in Logtalk with Graphical Tracer\nDESCRIPTION: Example of using the gspy/1 predicate to set a spy point on a Logtalk predicate when using the graphical tracer.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/tools/debugger/NOTES.md#2025-04-06_snippet_6\n\nLANGUAGE: Prolog\nCODE:\n```\n| ?- gspy(Entity::Functor/Arity).\n```\n\n----------------------------------------\n\nTITLE: Starting Bucket Operations\nDESCRIPTION: Initiates the random shuffling of bucket contents. The bucket values are random numbers and their sum varies between runs and backends.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/threads/buckets/NOTES.md#2025-04-06_snippet_2\n\nLANGUAGE: logtalk\nCODE:\n```\nbuckets::start.\n```\n\n----------------------------------------\n\nTITLE: Mode Declaration Example\nDESCRIPTION: Example showing the mode/2 directive syntax for declaring predicate modes including zero_or_more_or_error and one_or_more_or_error proofs.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/RELEASE_NOTES.md#2025-04-06_snippet_12\n\nLANGUAGE: Logtalk\nCODE:\n```\nmode/2\n```\n\n----------------------------------------\n\nTITLE: GitLab CLI Authentication Command\nDESCRIPTION: This command authenticates and logs in to GitLab using the GitLab CLI. It's typically used in CI/CD pipelines before running tests that will create issues.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/tools/issue_creator/NOTES.md#2025-04-06_snippet_3\n\nLANGUAGE: Shell\nCODE:\n```\nglab auth login --hostname <string> --token <string>\n```\n\n----------------------------------------\n\nTITLE: Loading XML Parser in Logtalk\nDESCRIPTION: This snippet shows how to load the XML parser in Logtalk using the logtalk_load/1 predicate. It loads the loader file for the xml_parser.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/contributions/xml_parser/SCRIPT.txt#2025-04-06_snippet_0\n\nLANGUAGE: prolog\nCODE:\n```\n| ?- logtalk_load(xml_parser(loader)).\n```\n\n----------------------------------------\n\nTITLE: Accessing Logtalk Help in ECLiPSe Prolog\nDESCRIPTION: Special syntax required when using ECLiPSe Prolog to avoid a clash with the built-in 'help' operator, by wrapping the object name in parentheses.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/tools/help/SCRIPT.txt#2025-04-06_snippet_2\n\nLANGUAGE: logtalk\nCODE:\n```\n| ?- (help)::help.\n```\n\n----------------------------------------\n\nTITLE: Calling overridden method on instance2 in Logtalk\nDESCRIPTION: This snippet calls the method/0 predicate on instance2, which overrides the inherited method with its own implementation.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/instmethods/NOTES.md#2025-04-06_snippet_3\n\nLANGUAGE: logtalk\nCODE:\n```\ninstance2::method.\n```\n\n----------------------------------------\n\nTITLE: Example implementation of question_hook/6 in Logtalk\nDESCRIPTION: Shows how to implement the question_hook/6 method to provide pre-defined answers instead of asking the user. The example declares the method as multifile and dynamic, then defines a rule for a specific question.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/refman/methods/question_hook_6.rst#2025-04-06_snippet_3\n\nLANGUAGE: logtalk\nCODE:\n```\n:- multifile(logtalk::question_hook/6).\n:- dynamic(logtalk::question_hook/6).\n\n% use a pre-defined answer instead of asking the user\nlogtalk::question_hook(upper_limit, question, my_app, _, _, 3.7).\n```\n\n----------------------------------------\n\nTITLE: Creating a New Dictionary with AVL Tree Implementation\nDESCRIPTION: Example of creating a new empty dictionary using the AVL tree implementation.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/library/dictionaries/NOTES.md#2025-04-06_snippet_2\n\nLANGUAGE: prolog\nCODE:\n```\n| ?- avltree::new(Dictionary).\nDictionary = ...\nyes\n```\n\n----------------------------------------\n\nTITLE: Retrieving Java Value Reference in Prolog\nDESCRIPTION: Returns an opaque term representing a Java value with the given name. Useful for interfacing Prolog with Java objects.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/java_utils_protocol_0.rst.txt#2025-04-06_snippet_0\n\nLANGUAGE: Prolog\nCODE:\n```\nvalue_reference(Value, Reference)\n```\n\n----------------------------------------\n\nTITLE: Installing MacOS Dependencies via Homebrew\nDESCRIPTION: Command to install required dependencies on macOS using the Homebrew package manager.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/tools/packs/NOTES.md#2025-04-06_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n$ brew install coreutils wget libarchive gnupg2 git direnv\n```\n\n----------------------------------------\n\nTITLE: Reading Binary Files to Bytes with Custom Tail in Logtalk\nDESCRIPTION: Reads a binary file into a list of bytes with a custom tail terminator. Takes a file name as input and returns the file contents as a list of bytes terminated by the given tail.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/reader_0.rst.txt#2025-04-06_snippet_7\n\nLANGUAGE: Logtalk\nCODE:\n```\nfile_to_bytes(File,Bytes,Tail)\n```\n\n----------------------------------------\n\nTITLE: Complex Logtalk Flag Usage in Object Context\nDESCRIPTION: Extended example demonstrating multiple flag settings within an object context, including event handling and suspicious call checking.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/refman/directives/set_logtalk_flag_2.rst.txt#2025-04-06_snippet_2\n\nLANGUAGE: logtalk\nCODE:\n```\n:- object(...).\n\n    % generate events for messages sent from this object:\n    :- set_logtalk_flag(events, allow).\n    ...\n\n    % turn off suspicious call lint checks for the next predicate:\n    :- set_logtalk_flag(suspicious_calls, silent).\n    foo :-\n        ...\n    :- set_logtalk_flag(suspicious_calls, warning).\n    ...\n```\n\n----------------------------------------\n\nTITLE: Comparing Numbers with Tolerance in Logtalk\nDESCRIPTION: Compares two numbers for close equality using relative and absolute tolerances. It uses the formula abs(Number1 - Number2) =< max(RelativeTolerance * max(abs(Number1), abs(Number2)), AbsoluteTolerance).\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/number_0.rst.txt#2025-04-06_snippet_3\n\nLANGUAGE: Logtalk\nCODE:\n```\ntolerance_equal(Number1,Number2,RelativeTolerance,AbsoluteTolerance)\n```\n\n----------------------------------------\n\nTITLE: Querying Spreadsheet Metadata in Logtalk\nDESCRIPTION: Logtalk query to list all clauses of the db/4 predicate representing spreadsheet sheets and row counts.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/apache_poi/NOTES.md#2025-04-06_snippet_4\n\nLANGUAGE: logtalk\nCODE:\n```\ndb(SheetName, SheetIndex, FirstRow, LastRow).\n```\n\n----------------------------------------\n\nTITLE: Temperature-controlled Softmax Function Implementation in Logtalk\nDESCRIPTION: Computes the softmax of a list of floats with a specified temperature parameter, returning a probability distribution. The temperature controls the shape of the distribution: higher values (>1.0) make it more uniform, lower values (<1.0) concentrate probability on the largest input values.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/numberlistp_0.rst.txt#2025-04-06_snippet_23\n\nLANGUAGE: Logtalk\nCODE:\n```\nsoftmax(Floats,Temperature,Softmax)\n```\n\n----------------------------------------\n\nTITLE: Generating Entity Diagram from File in Logtalk\nDESCRIPTION: Creates a diagram for all entities in a loaded source file using specified options. The file can be identified by name, basename, full path, or library notation.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/entity_diagram_1.rst.txt#2025-04-06_snippet_0\n\nLANGUAGE: Logtalk\nCODE:\n```\nfile(File,Options)\n```\n\n----------------------------------------\n\nTITLE: Type Registration in Logtalk\nDESCRIPTION: The 'type/1' multifile predicate serves as a registry of defined types. New types must be registered by adding a clause to this predicate along with a corresponding check/2 clause.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/type_0.rst.txt#2025-04-06_snippet_3\n\nLANGUAGE: Logtalk\nCODE:\n```\ntype(Type)\n```\n\n----------------------------------------\n\nTITLE: Checking Versions\nDESCRIPTION: Prints the versions of Logtalk, Prolog backend, and kernel\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/design_patterns/creational/prototype/NOTES.md#2025-04-06_snippet_0\n\nLANGUAGE: logtalk\nCODE:\n```\n%versions\n```\n\n----------------------------------------\n\nTITLE: Verifying FFT Results Against Known Values in Logtalk\nDESCRIPTION: Compares FFT results for a known input sequence against expected outputs from Matlab, using 4 and 8 threads.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/threads/fft/NOTES.md#2025-04-06_snippet_2\n\nLANGUAGE: logtalk\nCODE:\n```\nN=8, L=[c(1,0),c(2,0),c(3,0),c(4,0),c(5,0),c(6,0),c(7,0),c(8,0)], fft(4)::fft(N,L,F4), fft(8)::fft(N,L,F8).\n```\n\n----------------------------------------\n\nTITLE: Sorting Lists of Lists with maplist/3 in Logtalk\nDESCRIPTION: Demonstrates sorting lists of lists using the Prolog backend's maplist/3 predicate within a Logtalk object.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/symbiosis/NOTES.md#2025-04-06_snippet_3\n\nLANGUAGE: logtalk\nCODE:\n```\nsymbiosis::r(L).\n```\n\n----------------------------------------\n\nTITLE: Sorting Lists of Lists with maplist/3 in Logtalk\nDESCRIPTION: Demonstrates sorting lists of lists using the Prolog backend's maplist/3 predicate within a Logtalk object.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/symbiosis/NOTES.md#2025-04-06_snippet_3\n\nLANGUAGE: logtalk\nCODE:\n```\nsymbiosis::r(L).\n```\n\n----------------------------------------\n\nTITLE: Querying Employee Salary\nDESCRIPTION: Retrieves the salary property from the employee object using message sending.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/complements/allow/NOTES.md#2025-04-06_snippet_3\n\nLANGUAGE: logtalk\nCODE:\n```\nemployee::salary(Salary).\n```\n\n----------------------------------------\n\nTITLE: Current Protocol Mode Declaration\nDESCRIPTION: Specifies the mode and proof characteristics of the predicate. The ?protocol_identifier indicates it accepts either input or output, with zero_or_more indicating it can return multiple solutions via backtracking.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/refman/predicates/current_protocol_1.rst.txt#2025-04-06_snippet_1\n\nLANGUAGE: prolog\nCODE:\n```\ncurrent_protocol(?protocol_identifier) - zero_or_more\n```\n\n----------------------------------------\n\nTITLE: Send-More-Money Puzzle with Indexicals\nDESCRIPTION: Solves the classic Send-More-Money cryptarithmetic puzzle using CLP(FD) indexicals with leftmost labeling strategy.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/constraints/sicstus/NOTES.md#2025-04-06_snippet_11\n\nLANGUAGE: logtalk\nCODE:\n```\nsmm::smm_ix([leftmost],value).\n```\n\n----------------------------------------\n\nTITLE: Super Control Construct\nDESCRIPTION: The (^^)/1 control construct that allows calling any imported or inherited predicate with static binding support when optimize flag is enabled.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/UPGRADING.md#2025-04-06_snippet_2\n\nLANGUAGE: logtalk\nCODE:\n```\n(^^)/1\n```\n\n----------------------------------------\n\nTITLE: GtkSourceView System Installation Path\nDESCRIPTION: System-wide directory path for installing the Logtalk language specification file\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/coding/gtksourceview2/NOTES.md#2025-04-06_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n${prefix}/share/gtksourceview-2.0/language-specs/\n```\n\n----------------------------------------\n\nTITLE: Loading Verdi Neruda in Logtalk\nDESCRIPTION: Commands to load the Verdi Neruda system in Logtalk, either using the bundled version or a local installation.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/contributions/verdi_neruda/README.txt#2025-04-06_snippet_0\n\nLANGUAGE: Logtalk\nCODE:\n```\n{verdi_neruda(loader)}.\n```\n\nLANGUAGE: Logtalk\nCODE:\n```\n{loader}.\n```\n\n----------------------------------------\n\nTITLE: Private Directive Syntax in Logtalk\nDESCRIPTION: Shows the various syntax formats for using the private/1 directive to declare private predicates, non-terminals, and operators in Logtalk. Private entities can only be accessed from within the object where they are declared.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/refman/directives/private_1.rst.txt#2025-04-06_snippet_0\n\nLANGUAGE: prolog\nCODE:\n```\nprivate(Name/Arity)\nprivate((Name/Arity, ...))\nprivate([Name/Arity, ...])\n\nprivate(Name//Arity)\nprivate((Name//Arity, ...))\nprivate([Name//Arity, ...])\n\n\nprivate(op(Precedence,Associativity,Operator))\nprivate((op(Precedence,Associativity,Operator), ...))\nprivate([op(Precedence,Associativity,Operator), ...])\n```\n\n----------------------------------------\n\nTITLE: Defining built-in entity directive in Logtalk\nDESCRIPTION: Adds a new entity directive 'built_in' for declaring entities as built-in.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/RELEASE_NOTES.md#2025-04-06_snippet_115\n\nLANGUAGE: Logtalk\nCODE:\n```\nbuilt_in.\n```\n\n----------------------------------------\n\nTITLE: Installing Windows Chocolatey Dependencies\nDESCRIPTION: Commands for installing tool dependencies using Windows Chocolatey package manager.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/devtools/overview.rst.txt#2025-04-06_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\n> choco install pandoc xsltproc\n> choco install d2 graphviz\n> choco install xsltproc apache-fop texlive\n> choco install gnupg git\n> choco install gh glab\n> choco install wget\n> choco install sed\n```\n\n----------------------------------------\n\nTITLE: Loading XML Parser Examples in Logtalk\nDESCRIPTION: This snippet demonstrates how to load the example files for the XML parser in Logtalk. It uses the logtalk_load/1 predicate to load the examples file.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/contributions/xml_parser/SCRIPT.txt#2025-04-06_snippet_1\n\nLANGUAGE: prolog\nCODE:\n```\n| ?- logtalk_load(xml_parser(examples)).\n```\n\n----------------------------------------\n\nTITLE: Testing the XML Parser Library in Logtalk\nDESCRIPTION: Demonstrates how to load the test suite for the xml_parser library. This loads the tester.lgt file which contains tests for the library predicates.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/contributions/xml_parser.rst.txt#2025-04-06_snippet_1\n\nLANGUAGE: logtalk\nCODE:\n```\n| ?- logtalk_load(xml_parser(tester)).\n```\n\n----------------------------------------\n\nTITLE: Creating a Named Pengine Query\nDESCRIPTION: Creates a named pengine query that can be accessed later for on-demand retrieval of answers.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/pengines/NOTES.md#2025-04-06_snippet_5\n\nLANGUAGE: logtalk\nCODE:\n```\nengines::ask(my_question).\n```\n\n----------------------------------------\n\nTITLE: Using initialization/1 Directive in Logtalk Source File\nDESCRIPTION: Example of using the initialization/1 directive in a Logtalk source file to call the init/0 predicate after loading the file.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/refman/directives/initialization_1.rst#2025-04-06_snippet_1\n\nLANGUAGE: Logtalk\nCODE:\n```\n:- initialization(init).\n```\n\n----------------------------------------\n\nTITLE: Setting Instance Variable Value\nDESCRIPTION: Changes the value of the instance variable for instance1 using the setter method.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/instvars/NOTES.md#2025-04-06_snippet_3\n\nLANGUAGE: logtalk\nCODE:\n```\ninstance1::set_ivar(1).\n```\n\n----------------------------------------\n\nTITLE: Enable Logging Predicate - enable_logging/1\nDESCRIPTION: Predicate to enable logging for a file specified by alias. Fails if the alias is not defined.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/loggingp_0.rst.txt#2025-04-06_snippet_5\n\nLANGUAGE: logtalk\nCODE:\n```\nenable_logging(+atom)\n```\n\n----------------------------------------\n\nTITLE: Printing Logtalk and Prolog Versions\nDESCRIPTION: Prints the versions of Logtalk, the Prolog backend, and the kernel if running as a notebook.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/logs/NOTES.md#2025-04-06_snippet_0\n\nLANGUAGE: logtalk\nCODE:\n```\n%versions\n```\n\n----------------------------------------\n\nTITLE: Displaying Logtalk, Prolog, and Kernel Versions\nDESCRIPTION: Prints the versions of Logtalk, the Prolog backend, and the kernel if running as a notebook.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/design_patterns/behavioral/template_method/NOTES.md#2025-04-06_snippet_0\n\nLANGUAGE: logtalk\nCODE:\n```\n%versions\n```\n\n----------------------------------------\n\nTITLE: Expanding Rule Definition in Logtalk\nDESCRIPTION: Defines a heuristic rule expansion that converts rules of the form 'p if f and g' into the structure 'rule(p, [f,g|Tail], Length, Tail)'. This object implements the expanding interface and extends rule_expansion(Mode).\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/heuristic_expansion_1.rst.txt#2025-04-06_snippet_0\n\nLANGUAGE: logtalk\nCODE:\n```\nheuristic_expansion(Mode)\n```\n\n----------------------------------------\n\nTITLE: Activating the Stop Watch Monitor in Logtalk\nDESCRIPTION: Activates the stop_watch monitor to time execution of the spied predicate.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/profiling/NOTES.md#2025-04-06_snippet_10\n\nLANGUAGE: logtalk\nCODE:\n```\nstop_watch::activate_monitor.\n```\n\n----------------------------------------\n\nTITLE: Generating reStructuredText Table of Contents for Logtalk3 Libraries and Tools\nDESCRIPTION: This code snippet uses reStructuredText to create a nested table of contents for various Logtalk3 libraries and tools. It organizes the content into sections based on directory structure and provides links to individual module documentation.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/directory_index.rst.txt#2025-04-06_snippet_1\n\nLANGUAGE: reStructuredText\nCODE:\n```\n``library/timeout/``\n--------------------\n\n.. toctree::\n   :maxdepth: 1\n\n\n\n   timeout <timeout_0>\n\n``library/tsv/``\n----------------\n\n.. toctree::\n   :maxdepth: 1\n\n\n\n   tsv <tsv_0>\n   tsv(Header) <tsv_1>\n   tsv_protocol <tsv_protocol_0>\n\n``library/types/``\n------------------\n\n.. toctree::\n   :maxdepth: 1\n\n\n\n   atom <atom_0>\n   atomic <atomic_0>\n   callable <callable_0>\n   character <character_0>\n   characterp <characterp_0>\n   comparingp <comparingp_0>\n   compound <compound_0>\n   difflist <difflist_0>\n   float <float_0>\n   integer <integer_0>\n   list <list_0>\n   list(Type) <list_1>\n   listp <listp_0>\n   natural <natural_0>\n   number <number_0>\n   numberlist <numberlist_0>\n   numberlistp <numberlistp_0>\n   pairs <pairs_0>\n   term <term_0>\n   termp <termp_0>\n   type <type_0>\n   varlist <varlist_0>\n   varlistp <varlistp_0>\n```\n\n----------------------------------------\n\nTITLE: Defining Test Condition Predicate in Prolog\nDESCRIPTION: Example predicate defining a condition to filter generated tests by constraining integers between 0 and 127.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/devtools/lgtunit.rst#2025-04-06_snippet_16\n\nLANGUAGE: prolog\nCODE:\n```\ncondition(I) :-\n    between(0, 127, I).\n```\n\n----------------------------------------\n\nTITLE: Meta-Type Definition in Logtalk\nDESCRIPTION: The 'meta_type/3' predicate defines meta-types that have one or more sub-type arguments. It enumerates the sub-types and optional values for parameterized types.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/type_0.rst.txt#2025-04-06_snippet_4\n\nLANGUAGE: Logtalk\nCODE:\n```\nmeta_type(MetaType,SubTypes,Values)\n```\n\n----------------------------------------\n\nTITLE: Mode and Proof Declarations\nDESCRIPTION: Defines the calling modes and number of proofs for both predicate variants.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/refman/predicates/threaded_once_1_2.rst#2025-04-06_snippet_2\n\nLANGUAGE: prolog\nCODE:\n```\nthreaded_once(@callable) - one\nthreaded_once(@callable, --nonvar) - one\n```\n\n----------------------------------------\n\nTITLE: Finding Root Using Bisection Method for Function f1\nDESCRIPTION: Demonstrates using the bisection method to find the root of function f1 in the range [1.0, 2.3] with a tolerance of 1.0e-15.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/threads/functions/NOTES.md#2025-04-06_snippet_2\n\nLANGUAGE: logtalk\nCODE:\n```\nbisection::find_root(f1, 1.0, 2.3, 1.0e-15, Zero).\n```\n\n----------------------------------------\n\nTITLE: Listing Block Stack Tuples\nDESCRIPTION: Retrieves and displays all current block stack relationships.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/blocks/NOTES.md#2025-04-06_snippet_6\n\nLANGUAGE: logtalk\nCODE:\n```\nblock_stack::tuples(Tuples).\n```\n\n----------------------------------------\n\nTITLE: Creating Linux-Style Button\nDESCRIPTION: Creates a button with Linux appearance using the abstract factory pattern and renders it.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/design_patterns/creational/abstract_factory/NOTES.md#2025-04-06_snippet_2\n\nLANGUAGE: logtalk\nCODE:\n```\nfactory(linux)::create_button(Button), Button::paint.\n```\n\n----------------------------------------\n\nTITLE: Logtalk Predicate Declaration\nDESCRIPTION: Declaration of variant/2 predicate in lgtunit tool for checking test results with variables\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/RELEASE_NOTES.md#2025-04-06_snippet_80\n\nLANGUAGE: Logtalk\nCODE:\n```\nvariant/2\n```\n\n----------------------------------------\n\nTITLE: Definition of threaded_cancel/1 Predicate in Logtalk\nDESCRIPTION: The predicate cancels a tagged threaded call. It succeeds even when no asynchronous call with the given tag exists, assuming the call has already terminated. This requires a backend Prolog compiler with compatible multi-threading support.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/refman/predicates/threaded_cancel_1.rst#2025-04-06_snippet_0\n\nLANGUAGE: Logtalk\nCODE:\n```\nthreaded_cancel(Tag)\n```\n\n----------------------------------------\n\nTITLE: Compiling Source Files for Port Profiling in Logtalk\nDESCRIPTION: Demonstrates how to compile source files with debug mode and source data enabled for port profiling.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/devtools/ports_profiler.rst.txt#2025-04-06_snippet_2\n\nLANGUAGE: Prolog\nCODE:\n```\n| ?- logtalk_load(my_source_file, [debug(on), source_data(on)]).\n```\n\n----------------------------------------\n\nTITLE: Defining Table of Contents for Logtalk Source File Directives in reStructuredText\nDESCRIPTION: This snippet defines a table of contents for Logtalk source file directives using reStructuredText syntax. It specifies a maximum depth of 1 and lists individual directive pages.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/refman/directives/source_file_directives.rst.txt#2025-04-06_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. toctree::\n   :maxdepth: 1\n\n   encoding_1\n   include_1\n   initialization_1\n   op_3\n   set_logtalk_flag_2\n```\n\n----------------------------------------\n\nTITLE: Testing CSV Library in Logtalk\nDESCRIPTION: Shows how to load the tester file to test the CSV library predicates.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/libraries/csv.rst#2025-04-06_snippet_1\n\nLANGUAGE: prolog\nCODE:\n```\n| ?- logtalk_load(csv(tester)).\n```\n\n----------------------------------------\n\nTITLE: Definition of threaded_ignore/1 Predicate in Logtalk\nDESCRIPTION: The syntax definition of the threaded_ignore/1 predicate, which proves a goal asynchronously in a new thread, discarding the result regardless of success, failure, or exception.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/refman/predicates/threaded_ignore_1.rst#2025-04-06_snippet_0\n\nLANGUAGE: prolog\nCODE:\n```\nthreaded_ignore(Goal)\n```\n\n----------------------------------------\n\nTITLE: Category Definition in Logtalk\nDESCRIPTION: Defines the code_metrics_messages category that provides message translations for the code_metrics tool. Requires loading via logtalk_load(code_metrics(loader)).\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/code_metrics_messages_0.rst.txt#2025-04-06_snippet_0\n\nLANGUAGE: logtalk\nCODE:\n```\ncode_metrics_messages\n```\n\n----------------------------------------\n\nTITLE: Generating Prime Numbers with ToyCHR\nDESCRIPTION: Query that uses ToyCHR constraints to check if 11 is a prime number and generate all prime numbers up to 11 as part of the solution.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/ports/toychr/SCRIPT.txt#2025-04-06_snippet_5\n\nLANGUAGE: prolog\nCODE:\n```\n| ?- primes::chr_is(Result, candidate(11)).\n```\n\n----------------------------------------\n\nTITLE: Testing Optionals Library in Logtalk\nDESCRIPTION: Shows how to load and run tests for the optionals library predicates using the tester file.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/libraries/optionals.rst.txt#2025-04-06_snippet_1\n\nLANGUAGE: Prolog\nCODE:\n```\n| ?- logtalk_load(optionals(tester)).\n```\n\n----------------------------------------\n\nTITLE: Loading Dead Code Scanner Tool in Logtalk\nDESCRIPTION: Query to load the dead code scanner tool into a Logtalk environment\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/tools/dead_code_scanner/NOTES.md#2025-04-06_snippet_0\n\nLANGUAGE: prolog\nCODE:\n```\n| ?- logtalk_load(dead_code_scanner(loader)).\n```\n\n----------------------------------------\n\nTITLE: Cloning Dictionary with Unbound Values in Logtalk\nDESCRIPTION: Clones a dictionary using the same keys but with all values unbound. Returns the new clone and a list of all pairs in the clone.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/dictionaryp_0.rst.txt#2025-04-06_snippet_3\n\nLANGUAGE: Logtalk\nCODE:\n```\nclone(Dictionary,Clone,ClonePairs)\n```\n\n----------------------------------------\n\nTITLE: Enumerating Void HTML Elements in Logtalk\nDESCRIPTION: Backtracks through all void HTML elements. This predicate takes a single argument representing the element name.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/html_0.rst.txt#2025-04-06_snippet_1\n\nLANGUAGE: Logtalk\nCODE:\n```\nvoid_element(Element)\n```\n\n----------------------------------------\n\nTITLE: Prolog Directory Reference Predicate - remember_referenced_prolog_directory/1\nDESCRIPTION: Predicate to remember a referenced Prolog directory in the diagram. Takes a Path atom as input and stores it for later use.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/directory_diagram_1.rst.txt#2025-04-06_snippet_2\n\nLANGUAGE: logtalk\nCODE:\n```\nremember_referenced_prolog_directory(+atom)\n```\n\n----------------------------------------\n\nTITLE: Deleting Key-Value Pair from Dictionary in Logtalk\nDESCRIPTION: Deletes a matching key-value pair from a dictionary, returning the updated dictionary. Fails if the key is not found or the value doesn't unify.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/dictionaryp_0.rst.txt#2025-04-06_snippet_6\n\nLANGUAGE: Logtalk\nCODE:\n```\ndelete(OldDictionary,Key,Value,NewDictionary)\n```\n\n----------------------------------------\n\nTITLE: Declaring SWI-Prolog Meta-Predicates in Logtalk\nDESCRIPTION: Added declarations for SWI-Prolog built-in meta-predicates and predicates in the Logtalk adapter file.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/RELEASE_NOTES.md#2025-04-06_snippet_54\n\nLANGUAGE: Logtalk\nCODE:\n```\nmeta_predicate(tnot(0)).\nmeta_predicate(table(0)).\nmeta_predicate(untable(0)).\n```\n\n----------------------------------------\n\nTITLE: Enabling Top-Level Message Goal Events\nDESCRIPTION: Configures Logtalk to generate events for top-level message goals.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/blocks/NOTES.md#2025-04-06_snippet_4\n\nLANGUAGE: logtalk\nCODE:\n```\nset_logtalk_flag(events, allow).\n```\n\n----------------------------------------\n\nTITLE: Splitting Disconnected Graphs with ccomps\nDESCRIPTION: Command for splitting a diagram containing multiple disconnected library or directory graphs into separate subdiagrams using the ccomps utility.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/devtools/diagrams.rst.txt#2025-04-06_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\nccomps -x -o subdiagram.dot diagram.dot\n```\n\n----------------------------------------\n\nTITLE: Loading File Dependency Diagram Object in Logtalk\nDESCRIPTION: This code snippet shows how to load the file_dependency_diagram object in Logtalk. It is necessary to load this object before using its predicates for generating file contents dependency diagrams.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/file_dependency_diagram_0.rst.txt#2025-04-06_snippet_0\n\nLANGUAGE: Logtalk\nCODE:\n```\nlogtalk_load(diagrams(loader))\n```\n\n----------------------------------------\n\nTITLE: Resetting profiling data\nDESCRIPTION: This snippet resets the profiling data using the reset/0 predicate from the ports_profiler object before profiling the tagged representation.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/defaulty/NOTES.md#2025-04-06_snippet_5\n\nLANGUAGE: logtalk\nCODE:\n```\nports_profiler::reset.\n```\n\n----------------------------------------\n\nTITLE: Verify time/1 Predicate\nDESCRIPTION: Confirms availability of the time/1 predicate.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/bench/NOTES.md#2025-04-06_snippet_8\n\nLANGUAGE: logtalk\nCODE:\n```\ntime(true).\n```\n\n----------------------------------------\n\nTITLE: Syntax of asserta/1 method in Logtalk\nDESCRIPTION: Shows the syntax for using the asserta/1 method to assert a clause as the first one for a dynamic predicate. The method can accept either a simple head or a head-body rule.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/refman/methods/asserta_1.rst#2025-04-06_snippet_0\n\nLANGUAGE: logtalk\nCODE:\n```\nasserta(Head)\nasserta((Head:-Body))\n```\n\n----------------------------------------\n\nTITLE: List Transformation Predicates - Logtalk\nDESCRIPTION: Predicates for transforming lists including flattening nested lists, removing duplicates, and reversing lists.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/varlistp_0.rst.txt#2025-04-06_snippet_3\n\nLANGUAGE: logtalk\nCODE:\n```\nflatten(@list,-list)\nremove_duplicates(+list,-list)\nreverse(@list,?list)\n```\n\n----------------------------------------\n\nTITLE: Using Domain Constraints in ToyCHR\nDESCRIPTION: Query demonstrating domain constraints in ToyCHR where a variable N must be in the intersection of two domains [1,2,3] and [3,4,5], resulting in N=3.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/ports/toychr/SCRIPT.txt#2025-04-06_snippet_6\n\nLANGUAGE: prolog\nCODE:\n```\n| ?- dom::chr_is(_, (dom(N, [1,2,3]), dom(N, [3,4,5]))).\n```\n\n----------------------------------------\n\nTITLE: Integrating i15 Function Using QuadRec2D with 16 Threads\nDESCRIPTION: Performs integration of the i15 test function over a square domain using quadrec2d with 16 threads and measures execution time.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/threads/integration2d/NOTES.md#2025-04-06_snippet_10\n\nLANGUAGE: logtalk\nCODE:\n```\ntime(quadrec2d(16)::integrate(i15, -2,2,-2,2, 2, 1.0e-4, Integral)).\n```\n\n----------------------------------------\n\nTITLE: Browsing Handbook Documentation\nDESCRIPTION: Examples of using the experimental features to browse handbook documentation at the top-level interpreter.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/devtools/help.rst.txt#2025-04-06_snippet_2\n\nLANGUAGE: prolog\nCODE:\n```\n| ?- help::handbook.\n\n| ?- help::handbook(base64).\n\n| ?- help::handbook(logtalk_load/2).\n```\n\n----------------------------------------\n\nTITLE: Printing Logtalk, Prolog Backend, and Kernel Versions\nDESCRIPTION: This snippet prints the versions of Logtalk, the Prolog backend, and the kernel if running as a notebook.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/ncl/activation_nodes/NOTES.md#2025-04-06_snippet_0\n\nLANGUAGE: logtalk\nCODE:\n```\n%versions\n```\n\n----------------------------------------\n\nTITLE: Printing Logtalk and Prolog Versions\nDESCRIPTION: Prints the versions of Logtalk, Prolog backend, and kernel if running as a notebook.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/people/NOTES.md#2025-04-06_snippet_0\n\nLANGUAGE: logtalk\nCODE:\n```\n%versions\n```\n\n----------------------------------------\n\nTITLE: Specifying Mode and Number of Proofs for expand_term/2 in Logtalk\nDESCRIPTION: Specifies the mode and number of proofs for the expand_term/2 method. It indicates that both arguments can be input or output (represented by ?), and the method provides one proof.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/refman/methods/expand_term_2.rst.txt#2025-04-06_snippet_1\n\nLANGUAGE: Logtalk\nCODE:\n```\nexpand_term(?term, ?term) - one\n```\n\n----------------------------------------\n\nTITLE: Loading the roles example\nDESCRIPTION: Loads the 'roles' example using the Logtalk loader.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/roles/NOTES.md#2025-04-06_snippet_1\n\nLANGUAGE: logtalk\nCODE:\n```\nlogtalk_load(roles(loader)).\n```\n\n----------------------------------------\n\nTITLE: Printing Version Information in Logtalk\nDESCRIPTION: Prints the Logtalk, Prolog backend, and kernel versions when running in a Jupyter notebook environment.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/scratchcards/NOTES.md#2025-04-06_snippet_0\n\nLANGUAGE: logtalk\nCODE:\n```\n%versions\n```\n\n----------------------------------------\n\nTITLE: Fixed List Processing Predicate\nDESCRIPTION: Corrected version of the every_other predicate that properly handles lists of all lengths.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/devtools/lgtunit.rst.txt#2025-04-06_snippet_8\n\nLANGUAGE: prolog\nCODE:\n```\nevery_other([], []).\nevery_other([H| T], L) :-\n    every_other(T, H, L).\n\nevery_other([], X, [X]).\nevery_other([_| T], X, [X| L]) :-\n    every_other(T, L).\n```\n\n----------------------------------------\n\nTITLE: Creating Ellipse Objects\nDESCRIPTION: Creates four ellipse objects (e1, e2, e3, e4) using the ellipse class\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/design_patterns/structural/composite/NOTES.md#2025-04-06_snippet_2\n\nLANGUAGE: logtalk\nCODE:\n```\nellipse::(new(e1), new(e2), new(e3), new(e4)).\n```\n\n----------------------------------------\n\nTITLE: Category Definition in Logtalk Documentation\nDESCRIPTION: RST documentation block defining the dead_code_scanner_messages category, its availability, authors, version and compilation flags.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/dead_code_scanner_messages_0.rst.txt#2025-04-06_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. index:: single: dead_code_scanner_messages\n.. _dead_code_scanner_messages/0:\n\n.. rst-class:: right\n\n**category**\n\n``dead_code_scanner_messages``\n==============================\n```\n\n----------------------------------------\n\nTITLE: Fixed List Processing Predicate\nDESCRIPTION: Corrected version of the every_other predicate that properly handles lists of all lengths.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/devtools/lgtunit.rst.txt#2025-04-06_snippet_8\n\nLANGUAGE: prolog\nCODE:\n```\nevery_other([], []).\nevery_other([H| T], L) :-\n    every_other(T, H, L).\n\nevery_other([], X, [X]).\nevery_other([_| T], X, [X| L]) :-\n    every_other(T, L).\n```\n\n----------------------------------------\n\nTITLE: Generating Calendar Month Data in Logtalk\nDESCRIPTION: The calendar_month/3 predicate computes a calendar month representation. It returns a compound term with year, month, and a list of week and weekday numbers for the specified month.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/iso8601_0.rst.txt#2025-04-06_snippet_7\n\nLANGUAGE: Logtalk\nCODE:\n```\ncalendar_month(Year,Month,Calendar)\n```\n\n----------------------------------------\n\nTITLE: Creating GNU Prolog Executable with Logtalk Compiler/Runtime\nDESCRIPTION: This snippet demonstrates how to create a GNU Prolog executable that includes the Logtalk compiler and runtime. It uses the gprolog_embed_logtalk.sh script to generate the executable.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/scripts/embedding/SCRIPT.txt#2025-04-06_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ cd \"$LOGTALKHOME/scripts/embedding/gprolog/\"\n$ ./gprolog_embed_logtalk.sh -c -d \"$HOME\"/collect -s none\n$ ~/collect/logtalk\n```\n\n----------------------------------------\n\nTITLE: Loading the named_databases example\nDESCRIPTION: Loads the named_databases example into the Logtalk environment using the loader file.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/named_databases/NOTES.md#2025-04-06_snippet_1\n\nLANGUAGE: logtalk\nCODE:\n```\nlogtalk_load(named_databases(loader)).\n```\n\n----------------------------------------\n\nTITLE: Harry Potter Potions Puzzle\nDESCRIPTION: Solves the Room of Potions logical puzzle from Harry Potter, determining the contents of 7 potion bottles\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/puzzles/NOTES.md#2025-04-06_snippet_2\n\nLANGUAGE: logtalk\nCODE:\n```\npotions::potions(P1, P2, P3, P4, P5, P6, P7).\n```\n\n----------------------------------------\n\nTITLE: Configuring Path Environment Variables for Logtalk\nDESCRIPTION: Shell commands to set up PATH environment variables for SICStus Prolog and Logtalk executables.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/devtools/lgtunit.rst.txt#2025-04-06_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nexport PATH=\"/C/Program Files/SICStus Prolog VC16 4.6.0/bin\":$PATH\n# Logtalk\nexport PATH=\"$LOGTALKHOME/scripts\":\"$LOGTALKHOME/integration\":$PATH\n```\n\n----------------------------------------\n\nTITLE: Implementation Equivalent of resource_error/1 in Logtalk\nDESCRIPTION: Shows the equivalent implementation of the resource_error/1 method, which gets the current context and throws an error term with resource_error/1 and context information.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/refman/methods/resource_error_1.rst#2025-04-06_snippet_1\n\nLANGUAGE: logtalk\nCODE:\n```\n...,\ncontext(Context),\nthrow(error(resource_error(Resource), Context)).\n```\n\n----------------------------------------\n\nTITLE: Retrieving List of All Class Subclasses in Logtalk\nDESCRIPTION: Predicate that returns a list containing all class subclasses. Takes a single parameter Subclasses which will be bound to the list of all subclasses.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/class_hierarchyp_0.rst.txt#2025-04-06_snippet_5\n\nLANGUAGE: logtalk\nCODE:\n```\nsubclasses(Subclasses)\n```\n\n----------------------------------------\n\nTITLE: Disabling Event Support\nDESCRIPTION: Disables event support for command-line messages.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/threads/birthdays/NOTES.md#2025-04-06_snippet_6\n\nLANGUAGE: logtalk\nCODE:\n```\nset_logtalk_flag(events, deny).\n```\n\n----------------------------------------\n\nTITLE: Category Identifiers Syntax in Logtalk using BNF\nDESCRIPTION: Specifies that category identifiers in Logtalk can be either atoms or compound terms.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/refman/grammar.rst.txt#2025-04-06_snippet_16\n\nLANGUAGE: bnf\nCODE:\n```\ncategory_identifier ::=\n   atom\n   | compound\n```\n\n----------------------------------------\n\nTITLE: Using SWI-Prolog Graphical Tracer\nDESCRIPTION: Examples of using the gtrace predicates with SWI-Prolog's graphical tracer.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/devtools/debugger.rst#2025-04-06_snippet_5\n\nLANGUAGE: logtalk\nCODE:\n```\n| ?- gtrace(foo::bar).\n```\n\nLANGUAGE: logtalk\nCODE:\n```\n| ?- gtrace, foo::bar.\n```\n\n----------------------------------------\n\nTITLE: EDCG Operator Declaration\nDESCRIPTION: Public operator declaration for the -->> operator used in EDCG grammar rules.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/edcg_0.rst.txt#2025-04-06_snippet_5\n\nLANGUAGE: Logtalk\nCODE:\n```\nop(1200,xfx,-->>)\n```\n\n----------------------------------------\n\nTITLE: Loading the Module Aliases Example\nDESCRIPTION: Loads the module_aliases example using the loader file which initializes the necessary components for the demonstration.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/module_aliases/NOTES.md#2025-04-06_snippet_2\n\nLANGUAGE: logtalk\nCODE:\n```\nlogtalk_load(module_aliases(loader)).\n```\n\n----------------------------------------\n\nTITLE: Installing Tool Dependencies on Windows with Chocolatey\nDESCRIPTION: Command prompt instructions for installing third-party dependencies required by various Logtalk tools using the Chocolatey package manager on Windows.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/tools/NOTES.md#2025-04-06_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\n> choco install pandoc xsltproc\n> choco install d2 graphviz\n> choco install xsltproc apache-fop texlive\n> choco install gnupg git\n> choco install gh glab\n> choco install wget\n> choco install sed\n```\n\n----------------------------------------\n\nTITLE: Querying Instance2 Interface\nDESCRIPTION: Queries the interface of 'instance2' which instantiates 'subclass2' that specializes 'root' with protected inheritance.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/inheritance/NOTES.md#2025-04-06_snippet_11\n\nLANGUAGE: logtalk\nCODE:\n```\ninstance2::interface.\n```\n\n----------------------------------------\n\nTITLE: Enumerating Sub-directories with Loaded Logtalk Files\nDESCRIPTION: Enumerates, by backtracking, all directory sub-directories containing loaded files. It has a static compilation flag and accepts a directory and sub-directory as arguments.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/code_metric_0.rst.txt#2025-04-06_snippet_5\n\nLANGUAGE: Logtalk\nCODE:\n```\nsub_directory(Directory,SubDirectory)\n```\n\n----------------------------------------\n\nTITLE: Maximum Size Configuration\nDESCRIPTION: Predicate for defining the maximum size for types where size is meaningful.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/arbitrary_0.rst.txt#2025-04-06_snippet_4\n\nLANGUAGE: logtalk\nCODE:\n```\nmax_size(Size)\n```\n\n----------------------------------------\n\nTITLE: Solving Zebra Puzzle using Constraint Programming in Logtalk\nDESCRIPTION: Solves the classic zebra puzzle using constraint programming. This example shows how to handle complex logical constraints and relations.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/constraints/eclipse/NOTES.md#2025-04-06_snippet_4\n\nLANGUAGE: logtalk\nCODE:\n```\nzebra::zebra.\n```\n\n----------------------------------------\n\nTITLE: Loading Logtalk Debugger\nDESCRIPTION: Command to load the Logtalk debugger tool using the logtalk_load/1 predicate.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/devtools/debugger.rst.txt#2025-04-06_snippet_0\n\nLANGUAGE: logtalk\nCODE:\n```\n| ?- logtalk_load(debugger(loader)).\n```\n\n----------------------------------------\n\nTITLE: Configuring Git Attributes for Logtalk Files\nDESCRIPTION: Git attributes configuration to specify how .lgt and .logtalk files should be handled for diff operations.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/coding/git/NOTES.md#2025-04-06_snippet_0\n\nLANGUAGE: git\nCODE:\n```\n*.lgt diff=logtalk\n*.logtalk diff=logtalk\n```\n\n----------------------------------------\n\nTITLE: Loading the listing Library in Logtalk\nDESCRIPTION: Command to load all entities in the listing library using the loader.lgt utility file.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/libraries/listing.rst#2025-04-06_snippet_0\n\nLANGUAGE: logtalk\nCODE:\n```\n| ?- logtalk_load(listing(loader)).\n```\n\n----------------------------------------\n\nTITLE: Creating Windows Integration Shortcut for SWI-Prolog with Logtalk\nDESCRIPTION: This is an example command for creating a Windows shortcut to SWI-Prolog with Logtalk integration. It demonstrates how to connect a non-standard Prolog installation with Logtalk.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/INSTALL.md#2025-04-06_snippet_3\n\nLANGUAGE: PowerShell\nCODE:\n```\nG:\\swipl\\bin\\swipl-win.exe -s \"%LOGTALKHOME%\\integration\\logtalk_swi.pl\"\n```\n\n----------------------------------------\n\nTITLE: Example Usage of threaded_engine_next/2 in Logtalk\nDESCRIPTION: Demonstrates retrieving the next answer from a worker_1 engine using the threaded_engine_next/2 predicate in a Logtalk query.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/refman/predicates/threaded_engine_next_2.rst#2025-04-06_snippet_2\n\nLANGUAGE: prolog\nCODE:\n```\n% get the next answer from the worker_1 engine:\n| ?- threaded_engine_next(worker_1, Answer).\n```\n\n----------------------------------------\n\nTITLE: Loading Genint Library in Logtalk\nDESCRIPTION: Command to load all entities in the genint library using the loader.lgt file\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/libraries/genint.rst#2025-04-06_snippet_0\n\nLANGUAGE: logtalk\nCODE:\n```\n| ?- logtalk_load(genint(loader)).\n```\n\n----------------------------------------\n\nTITLE: Loading Default Compound Mutations\nDESCRIPTION: Command to load the default compound mutations functionality into Logtalk.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/default_compound_mutations_0.rst.txt#2025-04-06_snippet_0\n\nLANGUAGE: prolog\nCODE:\n```\nlogtalk_load(mutations(loader))\n```\n\n----------------------------------------\n\nTITLE: Defining RST Table of Contents for Conditional Compilation\nDESCRIPTION: ReStructuredText markup defining the documentation structure for conditional compilation directives, including table of contents with links to individual directive documentation.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/refman/directives/conditional_compilation_directives.rst#2025-04-06_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. _conditional_compilation_directives:\n\nConditional compilation directives\n==================================\n\n.. toctree::\n   :maxdepth: 1\n\n   if_1\n   elif_1\n   else_0\n   endif_0\n```\n\n----------------------------------------\n\nTITLE: Sample Configuration File Reference\nDESCRIPTION: Reference to a sample Sphinx configuration file added to the lgtdoc tool.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/RELEASE_NOTES.md#2025-04-06_snippet_59\n\nLANGUAGE: Python\nCODE:\n```\nconf-sample.py\n```\n\n----------------------------------------\n\nTITLE: Configuring URL Prefixes for MacVim in Logtalk Diagrams\nDESCRIPTION: Sets the URL code prefix for generating local links to open files and directories in MacVim when creating Logtalk diagrams.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/tools/diagrams/NOTES.md#2025-04-06_snippet_12\n\nLANGUAGE: prolog\nCODE:\n```\nurl_prefixes('mvim://open?url=file://', DocPrefix)\n```\n\n----------------------------------------\n\nTITLE: Signature of message_prefix_file/6 Method in Logtalk\nDESCRIPTION: Defines the signature of the message_prefix_file/6 method, which specifies the prefix and file for copying messages of a given kind and component. This method is part of the logtalk built-in object.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/refman/methods/message_prefix_file_6.rst.txt#2025-04-06_snippet_0\n\nLANGUAGE: logtalk\nCODE:\n```\nmessage_prefix_file(Kind, Component, Prefix, File, Mode, Options)\n```\n\n----------------------------------------\n\nTITLE: Loading the lgtdoc Test Suite\nDESCRIPTION: Command to load and run the test suite for the lgtdoc tool.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/tools/lgtdoc/NOTES.md#2025-04-06_snippet_1\n\nLANGUAGE: logtalk\nCODE:\n```\n?- logtalk_load(lgtdoc(tester)).\n```\n\n----------------------------------------\n\nTITLE: Installing Required Dependencies on Ubuntu Linux\nDESCRIPTION: Terminal commands for installing the necessary dependencies using apt package manager on Ubuntu Linux systems.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/devtools/packs.rst.txt#2025-04-06_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\n$ sudo apt update\n$ sudo apt install coreutils curl wget libarchive-tools gnupg2 git direnv\n```\n\n----------------------------------------\n\nTITLE: Retrieving All Object Classes in Logtalk\nDESCRIPTION: Predicate that returns all object classes through backtracking. Takes a single parameter Class which can be instantiated or a variable to be bound to class objects.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/class_hierarchyp_0.rst.txt#2025-04-06_snippet_0\n\nLANGUAGE: logtalk\nCODE:\n```\nclass(Class)\n```\n\n----------------------------------------\n\nTITLE: Running FCube Module Tests in Logtalk\nDESCRIPTION: Command to load and run the FCube module tests. This allows verification that the FCube module is working correctly.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/ports/fcube/SCRIPT.txt#2025-04-06_snippet_1\n\nLANGUAGE: logtalk\nCODE:\n```\n| ?- logtalk_load(fcube(tester')).\n```\n\n----------------------------------------\n\nTITLE: Setting Git Diff Pattern for Logtalk Files\nDESCRIPTION: Git configuration that defines the pattern for identifying function headers in Logtalk files during diff operations. This helps in providing better context in diff outputs.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/coding/git/NOTES.md#2025-04-06_snippet_1\n\nLANGUAGE: git\nCODE:\n```\n[diff \"logtalk\"]\n    xfuncname =\"^[ \\t]*(:- (object|protocol|category)\\((.*)(\\)[.]|[,]))$\"\n```\n\n----------------------------------------\n\nTITLE: Defining Table of Contents for Source File Directives in reStructuredText\nDESCRIPTION: This snippet defines a table of contents for Logtalk source file directives using reStructuredText syntax. It sets the maximum depth to 1 and lists individual directive documentation pages.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/refman/directives/source_file_directives.rst#2025-04-06_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. toctree::\n   :maxdepth: 1\n\n   encoding_1\n   include_1\n   initialization_1\n   op_3\n   set_logtalk_flag_2\n```\n\n----------------------------------------\n\nTITLE: Installing Set-PsEnv PowerShell Module\nDESCRIPTION: PowerShell command to install the Set-PsEnv module required for virtual environment support on Windows.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/tools/packs/NOTES.md#2025-04-06_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nPS> Install-Module -Name Set-PsEnv\n```\n\n----------------------------------------\n\nTITLE: Entity Introspection Predicates in Logtalk\nDESCRIPTION: Built-in predicates for querying and manipulating Logtalk entities (objects, protocols, categories).\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/coding/subethaedit2/Logtalk.mode/Contents/Resources/AutocompleteAdditions.txt#2025-04-06_snippet_14\n\nLANGUAGE: logtalk\nCODE:\n```\ncurrent_object()\ncurrent_protocol()\ncurrent_category()\n\ncreate_object(, , , )\ncreate_protocol(, , )\ncreate_category(, , , )\n\nobject_property(, )\nprotocol_property(, )\ncategory_property(, )\n\nabolish_object()\nabolish_protocol()\nabolish_category()\n```\n\n----------------------------------------\n\nTITLE: Displaying Version Information in Logtalk\nDESCRIPTION: This snippet prints the versions of Logtalk, the Prolog backend, and the kernel when running in a Jupyter notebook environment.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/engines/tbbt/NOTES.md#2025-04-06_snippet_0\n\nLANGUAGE: logtalk\nCODE:\n```\n%versions\n```\n\n----------------------------------------\n\nTITLE: Enabling Debug Mode in Logtalk\nDESCRIPTION: Sets the debug flag to enable collection of port data through debug hooks\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/tools/ports_profiler/SCRIPT.txt#2025-04-06_snippet_1\n\nLANGUAGE: logtalk\nCODE:\n```\n| ?- set_logtalk_flag(debug, on).\n```\n\n----------------------------------------\n\nTITLE: Dynamic Predicate for Tracking Unknown Predicate Calls in Logtalk\nDESCRIPTION: Internal dynamic table that tracks calls to predicates that aren't defined anywhere in the analyzed code. Used to identify potential issues in the conversion process.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/wrapper_0.rst.txt#2025-04-06_snippet_18\n\nLANGUAGE: Logtalk\nCODE:\n```\nunknown_predicate_called_/2\n```\n\n----------------------------------------\n\nTITLE: Performing Other Operations Between Pengine Answers\nDESCRIPTION: Example of executing other operations while a pengine is active, demonstrating the asynchronous nature of the implementation.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/pengines/NOTES.md#2025-04-06_snippet_6\n\nLANGUAGE: logtalk\nCODE:\n```\nwrite('Doing something else ...').\n```\n\n----------------------------------------\n\nTITLE: Loading the Dictionaries Library in Logtalk\nDESCRIPTION: Command to load all entities in the dictionaries library using the loader file.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/library/dictionaries/NOTES.md#2025-04-06_snippet_0\n\nLANGUAGE: prolog\nCODE:\n```\n| ?- logtalk_load(dictionaries(loader)).\n```\n\n----------------------------------------\n\nTITLE: Testing Logtalk Profiler Tool\nDESCRIPTION: Query to load the tester file for the Logtalk profiler tool.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/tools/profiler/NOTES.md#2025-04-06_snippet_1\n\nLANGUAGE: Prolog\nCODE:\n```\n| ?- logtalk_load(profiler(tester)).\n```\n\n----------------------------------------\n\nTITLE: Testing Third Diamond Problem Variant - First Method\nDESCRIPTION: Sends message b3_m/0 to object d3, accessing the method inherited from object b3 in the third variant of the diamond problem.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/diamonds/NOTES.md#2025-04-06_snippet_5\n\nLANGUAGE: logtalk\nCODE:\n```\nd3::b3_m.\n```\n\n----------------------------------------\n\nTITLE: Compile Updated Lexer Files\nDESCRIPTION: Commands to compile the updated Pygments lexer files after replacing Logtalk definitions\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/coding/pygments/NOTES.md#2025-04-06_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ python -m py_compile prolog.py\n$ python -m py_compile other.py\n```\n\n----------------------------------------\n\nTITLE: Testing the Reader Object in Logtalk\nDESCRIPTION: Shows the command to load the tester.lgt file for testing the library predicates of the reader object.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/library/reader/NOTES.md#2025-04-06_snippet_1\n\nLANGUAGE: prolog\nCODE:\n```\n| ?- logtalk_load(reader(tester)).\n```\n\n----------------------------------------\n\nTITLE: Running Library Unit Tests\nDESCRIPTION: Example of running unit tests for a specific library (random) using the tester file.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/libraries/overview.rst#2025-04-06_snippet_2\n\nLANGUAGE: prolog\nCODE:\n```\n| ?- logtalk_load(random(tester)).\n```\n\n----------------------------------------\n\nTITLE: Checking Enabled Debug Messages in Logtalk\nDESCRIPTION: Predicate that enumerates by backtracking all components with enabled debug and debug(Group) messages. This predicate has static compilation flag and can be used to retrieve or check component terms.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/debug_messages_0.rst.txt#2025-04-06_snippet_2\n\nLANGUAGE: logtalk\nCODE:\n```\nenabled/1\n```\n\n----------------------------------------\n\nTITLE: Loading Expecteds Library in Logtalk\nDESCRIPTION: Command to load all entities in the expecteds library using the loader file.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/library/expecteds/NOTES.md#2025-04-06_snippet_0\n\nLANGUAGE: logtalk\nCODE:\n```\n| ?- logtalk_load(expecteds(loader)).\n```\n\n----------------------------------------\n\nTITLE: Example Error Instance\nDESCRIPTION: Demonstrates a specific error instance for a permission error when trying to modify a private predicate.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/userman/errors.rst.txt#2025-04-06_snippet_1\n\nLANGUAGE: prolog\nCODE:\n```\nerror(\n    permission_error(modify,private_predicate,p/0),\n    logtalk(foo::abolish(p/0), _)\n)\n```\n\n----------------------------------------\n\nTITLE: Running CxProlog File Generation Script in PowerShell\nDESCRIPTION: Command for viewing help information for the CxProlog file generation script in PowerShell. This displays all available options and their descriptions.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/scripts/embedding/cxprolog/NOTES.md#2025-04-06_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\ncxprolog_logtalk_pl.ps1 -h\n```\n\n----------------------------------------\n\nTITLE: Generating Single-File Allure Report in Bash\nDESCRIPTION: This snippet demonstrates how to generate a single-file Allure report with a custom title using the logtalk_allure_report script.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/devtools/lgtunit.rst#2025-04-06_snippet_69\n\nLANGUAGE: bash\nCODE:\n```\n$ logtalk_allure_report -s -t \"My Amazing Tests Report\"\n```\n\n----------------------------------------\n\nTITLE: Defining Assertions in Logtalk\nDESCRIPTION: New assertions tool defining assertion/1-2 meta-predicates for adding assertions to code.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/RELEASE_NOTES.md#2025-04-06_snippet_107\n\nLANGUAGE: Logtalk\nCODE:\n```\nassertion/1-2\n```\n\n----------------------------------------\n\nTITLE: Installing Texinfo on macOS using Homebrew\nDESCRIPTION: This snippet shows the command to install the Texinfo package on macOS using Homebrew. Texinfo is required for some experimental features of the 'help' tool.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/devtools/help.rst#2025-04-06_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\n$ brew install texinfo\n```\n\n----------------------------------------\n\nTITLE: Loading the Packs Tool\nDESCRIPTION: Logtalk query to load the packs tool library.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/devtools/packs.rst#2025-04-06_snippet_5\n\nLANGUAGE: logtalk\nCODE:\n```\n| ?- logtalk_load(packs(loader)).\n```\n\n----------------------------------------\n\nTITLE: Verifying Completeness of Library Path Definitions\nDESCRIPTION: Prolog query to check if all required library paths are defined for a loaded Logtalk application, ensuring the embedded application will be relocatable.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/scripts/embedding/NOTES.md#2025-04-06_snippet_2\n\nLANGUAGE: prolog\nCODE:\n```\n| ?- setof(Library, File^(logtalk::loaded_file_property(File, library(Library))), Libraries),\n     member(Missing, Libraries),\n     \\+ logtalk_library_path(Missing, _).\n```\n\n----------------------------------------\n\nTITLE: Term Unification and Type Testing Predicates in Logtalk\nDESCRIPTION: Built-in predicates for term unification and type testing in Logtalk.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/coding/subethaedit2/Logtalk.mode/Contents/Resources/AutocompleteAdditions.txt#2025-04-06_snippet_13\n\nLANGUAGE: logtalk\nCODE:\n```\nsubsumes_term(, )\nunify_with_occurs_check(, )\n\natom()\natomic()\ninteger()\nfloat()\ncallable()\ncompound()\nnonvar()\nvar()\nnumber()\nground()\nacyclic_term()\n\ncompare()\n```\n\n----------------------------------------\n\nTITLE: Loading Logtalk Grammars Tests\nDESCRIPTION: Command to load and run the minimal tests for the library predicates.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/libraries/grammars.rst#2025-04-06_snippet_1\n\nLANGUAGE: logtalk\nCODE:\n```\n| ?- logtalk_load(grammars(tester)).\n```\n\n----------------------------------------\n\nTITLE: Entity Prefix Format\nDESCRIPTION: Pattern showing conversion of entity prefix to template format\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/RELEASE_NOTES.md#2025-04-06_snippet_43\n\nLANGUAGE: Logtalk\nCODE:\n```\nEntity::Functor/Arity\n```\n\n----------------------------------------\n\nTITLE: Citation for Cyclomatic Complexity Paper\nDESCRIPTION: BibTeX citation for Thomas McCabe's paper on Complexity Measure.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/devtools/code_metrics.rst.txt#2025-04-06_snippet_4\n\nLANGUAGE: bibtex\nCODE:\n```\n@inproceedings{McCabe:1976:CM:800253.807712,\n    author = \"McCabe, Thomas J.\",\n    title = \"A Complexity Measure\",\n    booktitle = \"Proceedings of the 2Nd International Conference on Software Engineering\",\n    series = \"ICSE '76\",\n    year = 1976,\n    location = \"San Francisco, California, USA\",\n    pages = \"407--\",\n    url = \"http://dl.acm.org/citation.cfm?id=800253.807712\",\n    acmid = 807712,\n    publisher = \"IEEE Computer Society Press\",\n    address = \"Los Alamitos, CA, USA\",\n    keywords = \"Basis, Complexity measure, Control flow, Decomposition, Graph theory, Independence, Linear, Modularization, Programming, Reduction, Software, Testing\"\n}\n```\n\n----------------------------------------\n\nTITLE: Control and Exception Handling Predicates in Logtalk\nDESCRIPTION: Built-in predicates for control flow, exception handling, and error generation in Logtalk.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/coding/subethaedit2/Logtalk.mode/Contents/Resources/AutocompleteAdditions.txt#2025-04-06_snippet_10\n\nLANGUAGE: logtalk\nCODE:\n```\ntrue\nfail\nfalse\ncall()\nignore()\nonce()\ncatch(, , )\nthrow()\ninstantiation_error\nuninstantiation_error()\ntype_error(, )\ndomain_error(, )\nconsistency_error(, , )\nexistence_error(, )\npermission_error(, , )\nrepresentation_error()\nevaluation_error()\nresource_error()\nsyntax_error()\nsystem_error\n```\n\n----------------------------------------\n\nTITLE: Context and Reflection Predicates in Logtalk\nDESCRIPTION: Built-in predicates for accessing context information and reflection capabilities in Logtalk.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/coding/subethaedit2/Logtalk.mode/Contents/Resources/AutocompleteAdditions.txt#2025-04-06_snippet_11\n\nLANGUAGE: logtalk\nCODE:\n```\ncontext()\nparameter(, )\nself()\nsender()\nthis()\n\ncurrent_predicate()\npredicate_property(, )\n```\n\n----------------------------------------\n\nTITLE: Checking Logtalk and Prolog Version Information\nDESCRIPTION: Displays version information for Logtalk, the Prolog backend, and the kernel when running in a Jupyter notebook environment.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/design_patterns/behavioral/iterator/NOTES.md#2025-04-06_snippet_0\n\nLANGUAGE: logtalk\nCODE:\n```\n%versions\n```\n\n----------------------------------------\n\nTITLE: Creating SWI-Prolog QLF Files with PowerShell Script\nDESCRIPTION: PowerShell script for Windows systems that creates Logtalk QLF files. The script generates a logtalk.qlf file with the Logtalk compiler and runtime, and an optional application.qlf file.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/scripts/embedding/swipl/NOTES.md#2025-04-06_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nswipl_logtalk_qlf.ps1\n```\n\n----------------------------------------\n\nTITLE: Setting Default Hook Object in Logtalk\nDESCRIPTION: Command to set the default hook object to a module containing term and goal expansion code when compiling Prolog modules as Logtalk objects.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/userman/migration.rst#2025-04-06_snippet_5\n\nLANGUAGE: text\nCODE:\n```\n| ?- set_logtalk_flag(hook, system).\n...\n```\n\n----------------------------------------\n\nTITLE: Defining a Registry Specification Object in Logtalk\nDESCRIPTION: This snippet demonstrates how to create a registry specification object that implements the registry_protocol. It includes metadata about the registry and defines required predicates.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/tools/packs/NOTES.md#2025-04-06_snippet_13\n\nLANGUAGE: logtalk\nCODE:\n```\n:- object(jdoe_awesome_packs_registry,\n\timplements(registry_protocol)).\n\n\t:- info([\n\t\tversion is 1:0:0,\n\t\tauthor is 'John Doe',\n\t\tdate is 2021-10-18,\n\t\tcomment is 'John Doe awesome packs registry spec.'\n\t]).\n\n\tname(jdoe_awesome_packs).\n\n\tdescription('John Doe awesome packs').\n\n\thome('https://example.com/jdoe_awesome_packs').\n\n\tclone('https://github.com/jdoe/jdoe_awesome_packs.git').\n\n\tarchive('https://github.com/jdoe/jdoe_awesome_packs/archive/main.zip').\n\n:- end_object.\n```\n\n----------------------------------------\n\nTITLE: Graph Path Finding\nDESCRIPTION: Finds cyclic paths in graphs using coinductive path finding.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/coinduction/NOTES.md#2025-04-06_snippet_7\n\nLANGUAGE: logtalk\nCODE:\n```\ncp1::path(a, Path).\n```\n\n----------------------------------------\n\nTITLE: Testing the EDCG Library in Logtalk\nDESCRIPTION: Shows how to load the test file for the EDCG library to verify its functionality.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/library/edcg/NOTES.md#2025-04-06_snippet_2\n\nLANGUAGE: logtalk\nCODE:\n```\n| ?- logtalk_load(edcgs(tester)).\n```\n\n----------------------------------------\n\nTITLE: Pack Management Query Examples\nDESCRIPTION: Prolog queries demonstrating common pack management operations like listing available packs, installing, updating and describing packs.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/tools/packs/NOTES.md#2025-04-06_snippet_20\n\nLANGUAGE: prolog\nCODE:\n```\n| ?- packs::available.\n| ?- packs::installed.\n| ?- packs::installed(talkshow).\n| ?- packs::describe(bar).\n| ?- packs::describe(reg, bar).\n| ?- packs::install(bar).\n| ?- {bar(loader)}.\n```\n\n----------------------------------------\n\nTITLE: Constructing an Ordered List with EDCG\nDESCRIPTION: Uses the list_constructors object to create an ordered list from 1 to N (where N=7), appending to an empty list.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/edcgs/NOTES.md#2025-04-06_snippet_2\n\nLANGUAGE: logtalk\nCODE:\n```\nlist_constructors::flist(7, [], L).\n```\n\n----------------------------------------\n\nTITLE: Domain Error Implementation Context\nDESCRIPTION: Shows how the domain_error/2 method is implemented internally using context and throw predicates.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/refman/methods/domain_error_2.rst#2025-04-06_snippet_1\n\nLANGUAGE: prolog\nCODE:\n```\n...,\ncontext(Context),\nthrow(error(domain_error(Domain,Culprit), Context)).\n```\n\n----------------------------------------\n\nTITLE: Converting Logtalk source file to HTML with Highlight\nDESCRIPTION: Example command for converting a Logtalk source file to HTML using Highlight with specific formatting options including tab replacement, output format, and style selection.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/coding/highlight/NOTES.md#2025-04-06_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nhighlight --replace-tabs=4 --out-format=xhtml --input=foo.lgt --output=foo.html --style=molokai\n```\n\n----------------------------------------\n\nTITLE: Testing Assignvars Library in Logtalk\nDESCRIPTION: This snippet shows how to load the tester file to test the assignvars library predicates.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/libraries/assignvars.rst#2025-04-06_snippet_1\n\nLANGUAGE: prolog\nCODE:\n```\n| ?- logtalk_load(assignvars(tester)).\n```\n\n----------------------------------------\n\nTITLE: Mapping Prolog File Extensions to Logtalk Syntax in bat Configuration\nDESCRIPTION: Configuration lines to add to bat's config file to map Prolog file extensions (.pl and .pro) to use the Logtalk syntax highlighter.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/coding/bat/NOTES.md#2025-04-06_snippet_1\n\nLANGUAGE: plain\nCODE:\n```\n--map-syntax pl:logtalk\n--map-syntax pro:logtalk\n```\n\n----------------------------------------\n\nTITLE: Loading All Logtalk Libraries\nDESCRIPTION: Example of how to load all library entities using the all_loader.lgt file. This command will load all library components except for large Unicode data files.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/library/all.md#2025-04-06_snippet_0\n\nLANGUAGE: logtalk\nCODE:\n```\n| ?- logtalk_load(library(all_loader)).\n```\n\n----------------------------------------\n\nTITLE: Printing Car Components Using Visitor\nDESCRIPTION: Uses the visitor/1 meta-predicate with a lambda expression closure to print all components of a sedan object.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/design_patterns/behavioral/visitor/NOTES.md#2025-04-06_snippet_1\n\nLANGUAGE: logtalk\nCODE:\n```\nsedan::visitor([Component]>>(write(Component),nl)).\n```\n\n----------------------------------------\n\nTITLE: Setting Additional Path Variables for Direct Clone Usage in C Shell\nDESCRIPTION: These C shell commands extend the PATH and other environment variables when running Logtalk directly from a clone directory without formal installation, using csh syntax.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/INSTALL.md#2025-04-06_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nsetenv PATH \"${PATH}\":\"${LOGTALKHOME}\"/tools/diagrams\nsetenv PATH \"${PATH}\":\"${LOGTALKHOME}\"/tools/lgtdoc/xml\nsetenv PATH \"${PATH}\":\"${LOGTALKHOME}\"/tools/packs\nsetenv PATH \"${PATH}\":\"${LOGTALKHOME}\"/scripts\nsetenv PATH \"${PATH}\":\"${LOGTALKHOME}\"/integration\nsetenv MANPATH \"${MANPATH}\":\"${LOGTALKHOME}\"/man\nsetenv INFOPATH ${INFOPATH}:\"${LOGTALKHOME}\"/docs:\"${LOGTALKHOME}\"/manuals\n```\n\n----------------------------------------\n\nTITLE: Logtalk Object Alias Delegation\nDESCRIPTION: Example demonstrating new support for using object aliases in message delegation control construct\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/RELEASE_NOTES.md#2025-04-06_snippet_26\n\nLANGUAGE: Logtalk\nCODE:\n```\n::Alias::Message\n```\n\n----------------------------------------\n\nTITLE: GitLab Authentication Example\nDESCRIPTION: Installing a package using GitLab authentication with a private token\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/devtools/packs.rst#2025-04-06_snippet_26\n\nLANGUAGE: logtalk\nCODE:\n```\n| ?- packs::install(reg, bar, 1:1:2, [curl('--header \"PRIVATE-TOKEN: foo42\"')]).\n```\n\n----------------------------------------\n\nTITLE: Unicode Alphabetic Predicate\nDESCRIPTION: Predicate for checking Unicode alphabetic characters, moved to a new implementation file for improved performance.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/library/unicode_data/HISTORY.md#2025-04-06_snippet_2\n\nLANGUAGE: Prolog\nCODE:\n```\nunicode_alphabetic/1\n```\n\n----------------------------------------\n\nTITLE: Loading Default Atom Mutations Module in Logtalk\nDESCRIPTION: Command to load the default atom mutations functionality into a Logtalk program. This must be executed before using the mutations functionality.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/default_atom_mutations_0.rst.txt#2025-04-06_snippet_0\n\nLANGUAGE: logtalk\nCODE:\n```\nlogtalk_load(mutations(loader))\n```\n\n----------------------------------------\n\nTITLE: Domain Error Implementation Context\nDESCRIPTION: Shows how the domain_error/2 method is implemented internally using context and throw predicates.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/refman/methods/domain_error_2.rst#2025-04-06_snippet_1\n\nLANGUAGE: prolog\nCODE:\n```\n...,\ncontext(Context),\nthrow(error(domain_error(Domain,Culprit), Context)).\n```\n\n----------------------------------------\n\nTITLE: Version Data Flag Structure\nDESCRIPTION: Defines the version_data flag structure used to identify Logtalk version information. Contains major, minor, patch version numbers and release status.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/userman/programming.rst#2025-04-06_snippet_17\n\nLANGUAGE: prolog\nCODE:\n```\nlogtalk(Major,Minor,Patch,Status)\n```\n\n----------------------------------------\n\nTITLE: Converting TextMate Bundle to Atom Language Package for Logtalk\nDESCRIPTION: Shell commands to convert the Logtalk TextMate bundle into an Atom package for syntax highlighting and to set the correct version number based on the installed Logtalk version.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/coding/atom/NOTES.md#2025-04-06_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ apm init --package ~/.atom/packages/language-logtalk --convert $LOGTALKHOME/coding/textmate2/Logtalk.tmbundle\n$ sed -i.bak \"s/0.0.0/$(sed -e 's/-.*$//' < $LOGTALKUSER/VERSION.txt)/\" ~/.atom/packages/language-logtalk/package.json\n```\n\n----------------------------------------\n\nTITLE: Loading the CBOR Library in Logtalk\nDESCRIPTION: Shows how to load all entities in the CBOR library using the loader.lgt file, which is the standard approach for loading Logtalk libraries.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/library/cbor/NOTES.md#2025-04-06_snippet_3\n\nLANGUAGE: logtalk\nCODE:\n```\n| ?- logtalk_load(cbor(loader)).\n```\n\n----------------------------------------\n\nTITLE: Loading the Team Module in Logtalk\nDESCRIPTION: Loads the team module that contains the implementation of the synchronous concurrency task for Rosetta Code.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/threads/team/NOTES.md#2025-04-06_snippet_1\n\nLANGUAGE: logtalk\nCODE:\n```\nlogtalk_load(team(loader)).\n```\n\n----------------------------------------\n\nTITLE: All-Solutions Predicates in Logtalk\nDESCRIPTION: Built-in predicates for finding all solutions to a goal in Logtalk, including forall, findall, bagof, and setof.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/coding/subethaedit2/Logtalk.mode/Contents/Resources/AutocompleteAdditions.txt#2025-04-06_snippet_7\n\nLANGUAGE: logtalk\nCODE:\n```\nforall(, )\nfindall(, , )\nbagof(, , )\nsetof(, , )\n```\n\n----------------------------------------\n\nTITLE: Printing Logtalk, Prolog backend, and kernel versions\nDESCRIPTION: Prints version information for Logtalk, the Prolog backend, and the kernel if running as a notebook.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/tabling/NOTES.md#2025-04-06_snippet_0\n\nLANGUAGE: logtalk\nCODE:\n```\n%versions\n```\n\n----------------------------------------\n\nTITLE: Viewing Script Help in Bash\nDESCRIPTION: Command to display help information for the SICStus Prolog script in Bash environments, showing available options and usage instructions.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/scripts/embedding/sicstus/NOTES.md#2025-04-06_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsicstus_logtalk_po.sh -h\n```\n\n----------------------------------------\n\nTITLE: Predicate Modes - logtalk_compile/1\nDESCRIPTION: Specifies the calling modes and number of proofs for the predicate, indicating it accepts a source file name or list of source file names as input.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/refman/predicates/logtalk_compile_1.rst#2025-04-06_snippet_1\n\nLANGUAGE: logtalk\nCODE:\n```\nlogtalk_compile(@source_file_name) - zero_or_one\nlogtalk_compile(@list(source_file_name)) - zero_or_one\n```\n\n----------------------------------------\n\nTITLE: Registry Loader Implementation in Logtalk\nDESCRIPTION: Loader file that initializes the registry by loading the registry object and all pack object files.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/devtools/packs.rst#2025-04-06_snippet_14\n\nLANGUAGE: logtalk\nCODE:\n```\n:- initialization((\n    logtalk_load(jdoe_awesome_packs_registry),\n    logtalk_load(foo_pack),\n    logtalk_load(bar_pack),\n    ...\n)).\n```\n\n----------------------------------------\n\nTITLE: Scanning Library for Dead Code in Logtalk\nDESCRIPTION: Example query showing how to scan a library named 'my_app' for dead code after loading it\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/tools/dead_code_scanner/NOTES.md#2025-04-06_snippet_3\n\nLANGUAGE: prolog\nCODE:\n```\n| ?- logtalk_load(my_app(loader)).\n| ?- dead_code_scanner::library(my_app).\n```\n\n----------------------------------------\n\nTITLE: Using commit_log/3 to Access Git Commit Information\nDESCRIPTION: Example query demonstrating how to retrieve formatted output from the git log command using the commit_log/3 predicate with format options.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/library/git/NOTES.md#2025-04-06_snippet_2\n\nLANGUAGE: Prolog\nCODE:\n```\n| ?- git::commit_log('/Users/pmoura/logtalk3', '%h%n%B', Output),\n     write(Output), nl.\n\neccaa1a2a\nUpdate SVG diagrams\n\nOutput = 'eccaa1a2a\\nUpdate SVG diagrams\\n'\nyes\n```\n\n----------------------------------------\n\nTITLE: Accessing prototype predicate\nDESCRIPTION: Demonstrates that prototypes can declare and define their own predicates.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/roles/NOTES.md#2025-04-06_snippet_2\n\nLANGUAGE: logtalk\nCODE:\n```\nprototype::foo(Foo).\n```\n\n----------------------------------------\n\nTITLE: Loading Code with Debug Flag\nDESCRIPTION: Example of loading source code with debugging enabled using the debug(on) compiler flag.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/devtools/debugger.rst.txt#2025-04-06_snippet_2\n\nLANGUAGE: logtalk\nCODE:\n```\n| ?- logtalk_load(my_buggy_code, [debug(on)]).\n```\n\n----------------------------------------\n\nTITLE: Powershell Documentation Generation Commands\nDESCRIPTION: PowerShell commands for generating HTML documentation using the lgt2html script\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/userman/documenting.rst#2025-04-06_snippet_4\n\nLANGUAGE: text\nCODE:\n```\nPS > cd xml_docs\nPS > lgt2html.ps1 -p saxon\n```\n\n----------------------------------------\n\nTITLE: Checking Binary Output with Alias\nDESCRIPTION: Verifies that a temporary file referenced by alias contains expected binary contents.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/lgtunit_0.rst.txt#2025-04-06_snippet_58\n\nLANGUAGE: logtalk\nCODE:\n```\ncheck_binary_output(Alias,Bytes)\n```\n\n----------------------------------------\n\nTITLE: Loading Sums Example in Logtalk\nDESCRIPTION: Loads the sums example module using the Logtalk loader.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/engines/sums/NOTES.md#2025-04-06_snippet_1\n\nLANGUAGE: logtalk\nCODE:\n```\nlogtalk_load(sums(loader)).\n```\n\n----------------------------------------\n\nTITLE: Counter State Storage Predicate\nDESCRIPTION: Private dynamic predicate that maintains the current state of counters. Stores counter names and their latest generated values.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/genint_core_0.rst.txt#2025-04-06_snippet_3\n\nLANGUAGE: logtalk\nCODE:\n```\ncounter_(Counter,Latest)\n```\n\n----------------------------------------\n\nTITLE: Generating Documentation on Windows\nDESCRIPTION: These PowerShell commands build the Logtalk manuals and update HTML documentation on Windows systems. They should be run after the basic installation when working with a source archive or git repo clone.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/INSTALL.md#2025-04-06_snippet_9\n\nLANGUAGE: PowerShell\nCODE:\n```\nC:\\> cd manuals\\sources\nC:\\> build_manuals.ps1\nC:\\> cd ..\\..\\scripts\nC:\\> update_html_docs.ps1\n```\n\n----------------------------------------\n\nTITLE: Generating XHTML Coverage Report with xsltproc in Bash\nDESCRIPTION: This snippet shows how to use xsltproc to generate an XHTML coverage report from the XML coverage data.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/devtools/lgtunit.rst#2025-04-06_snippet_70\n\nLANGUAGE: bash\nCODE:\n```\n$ xsltproc -o coverage_report.html coverage_report.xml\n```\n\n----------------------------------------\n\nTITLE: Defining Logtalk Library Path Example\nDESCRIPTION: Sample code from settings file showing how to define the logtalk_packs library alias referenced in the documentation updates.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/RELEASE_NOTES.md#2025-04-06_snippet_27\n\nLANGUAGE: Logtalk\nCODE:\n```\nlogtalk_library_path(logtalk_packs, '/path/to/packs/directory')\n```\n\n----------------------------------------\n\nTITLE: Setting up PowerShell Prompt for Virtual Environments\nDESCRIPTION: PowerShell function definition for customizing the prompt to automatically load environment variables from .env files when changing directories.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/devtools/packs.rst.txt#2025-04-06_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\nfunction prompt {\n    Set-PsEnv\n    'PS ' + $(Get-Location) + '> '\n}\n```\n\n----------------------------------------\n\nTITLE: Loading FCube Port in Logtalk\nDESCRIPTION: Command to load all entities from the FCube port into Logtalk using the loader file.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/ports/fcube.rst.txt#2025-04-06_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n| ?- logtalk_load(fcube(loader)).\n```\n\n----------------------------------------\n\nTITLE: Type Error Method Declaration\nDESCRIPTION: Basic syntax for calling the type_error/2 method with Type and Culprit arguments.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/refman/methods/type_error_2.rst#2025-04-06_snippet_0\n\nLANGUAGE: prolog\nCODE:\n```\ntype_error(Type, Culprit)\n```\n\n----------------------------------------\n\nTITLE: URL Space Decoding (Logtalk)\nDESCRIPTION: Predicate that decodes encoded spaces (%20) in URLs to actual spaces. Takes an encoded URL and returns the decoded version.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/packs_common_0.rst.txt#2025-04-06_snippet_10\n\nLANGUAGE: logtalk\nCODE:\n```\ndecode_url_spaces(+atom,-atom)\n```\n\n----------------------------------------\n\nTITLE: Syntax Highlighting for Prolog Files\nDESCRIPTION: Command to use Logtalk lexer for highlighting Prolog source files\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/coding/pygments/NOTES.md#2025-04-06_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n$ pygmentize -l logtalk -O full,style=friendly -o source.html source.pl\n```\n\n----------------------------------------\n\nTITLE: Building Stable Release Docker Image for Logtalk\nDESCRIPTION: Command to build a Docker image for a specific stable release of Logtalk, setting both version-specific and latest tags.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/scripts/docker/swi-prolog/README.md#2025-04-06_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndocker build --build-arg LOGTALK_VERSION=lgt3091stable -t=\"logtalk/logtalk3-swi:3091\" -t=\"logtalk/logtalk3-swi:latest\" .\n```\n\n----------------------------------------\n\nTITLE: Defining entity_prefix/2 predicate in Logtalk\nDESCRIPTION: Added an entity_prefix/2 predicate to the \"logtalk\" built-in object, along with utility predicates for decompiling predicate heads and indicators.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/RELEASE_NOTES.md#2025-04-06_snippet_124\n\nLANGUAGE: Logtalk\nCODE:\n```\nentity_prefix/2\n```\n\n----------------------------------------\n\nTITLE: Executing Append Program with DFS Interpreter\nDESCRIPTION: Example of using the depth-first search interpreter to append two lists using the demo database.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/contributions/verdi_neruda/README.txt#2025-04-06_snippet_1\n\nLANGUAGE: Logtalk\nCODE:\n```\nprove(dfs_interpreter, append([a,b], [c,d], Xs), demodb).\n```\n\n----------------------------------------\n\nTITLE: Loading Varlist Object in Logtalk\nDESCRIPTION: This snippet shows how to load the 'varlist' object in Logtalk. It requires the types loader to be loaded first.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/varlist_0.rst.txt#2025-04-06_snippet_0\n\nLANGUAGE: logtalk\nCODE:\n```\nlogtalk_load(types(loader))\n```\n\n----------------------------------------\n\nTITLE: Checking Package Dependencies\nDESCRIPTION: Query to list all packages that depend on a specific package\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/devtools/packs.rst#2025-04-06_snippet_28\n\nLANGUAGE: logtalk\nCODE:\n```\n| ?- packs::dependents(reg, bar, Dependents).\n```\n\n----------------------------------------\n\nTITLE: Example: Prolog Compiler-Specific Code in Logtalk\nDESCRIPTION: Example of using if/1 to conditionally include code specific to a particular backend Prolog compiler (SWI-Prolog in this case).\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/refman/directives/if_1.rst.txt#2025-04-06_snippet_3\n\nLANGUAGE: logtalk\nCODE:\n```\n:- if(current_logtalk_flag(prolog_dialect, swi)).\n\n    % SWI-Prolog specific code\n    :- set_prolog_flag(double_quotes, codes).\n\n:- endif.\n```\n\n----------------------------------------\n\nTITLE: Using logtalk_tester to Automate Testing with Seeds\nDESCRIPTION: Command-line example showing how to use logtalk_tester script with a specific random seed.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/tools/lgtunit/NOTES.md#2025-04-06_snippet_21\n\nLANGUAGE: bash\nCODE:\n```\n$ logtalk_tester -r \"seed(3172,9814,20125)\"\n```\n\n----------------------------------------\n\nTITLE: Non-portable Dynamic Directive in Prolog\nDESCRIPTION: Shows a less portable way of writing dynamic directives in Prolog using operator syntax, which may cause issues when compiling modules as Logtalk objects.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/userman/migration.rst.txt#2025-04-06_snippet_4\n\nLANGUAGE: text\nCODE:\n```\n:- dynamic foo/1, bar/2.\n```\n\n----------------------------------------\n\nTITLE: Writing a Hailstone Sequence to Output in Logtalk\nDESCRIPTION: Writes the Hailstone sequence for the number 10 to the output stream, displaying all numbers in the sequence in order.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/hailstone/NOTES.md#2025-04-06_snippet_3\n\nLANGUAGE: logtalk\nCODE:\n```\nhailstone::write_sequence(10).\n```\n\n----------------------------------------\n\nTITLE: Specifying mode and number of proofs for eos//0\nDESCRIPTION: Defines the mode and number of proofs for the eos//0 method, indicating it has no arguments and returns zero or one proof.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/refman/methods/eos_0.rst.txt#2025-04-06_snippet_1\n\nLANGUAGE: logtalk\nCODE:\n```\neos - zero_or_one\n```\n\n----------------------------------------\n\nTITLE: Defining Tutorial Table of Contents in reStructuredText\nDESCRIPTION: This code snippet defines a table of contents for the Logtalk tutorial using reStructuredText's toctree directive. It specifies a maximum depth of 2 and links to four tutorial sections: lists, attributes, reflection, and profiling.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/tutorial/index.rst#2025-04-06_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. toctree::\n   :maxdepth: 2\n\n   lists\n   attributes\n   reflection\n   profiling\n```\n\n----------------------------------------\n\nTITLE: Testing Statistics Library in Logtalk\nDESCRIPTION: Command for loading and running tests for the statistics library predicates using the tester file.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/library/statistics/NOTES.md#2025-04-06_snippet_1\n\nLANGUAGE: logtalk\nCODE:\n```\n| ?- logtalk_load(statistics(tester)).\n```\n\n----------------------------------------\n\nTITLE: Using logtalk_load_context/2 in Logtalk\nDESCRIPTION: Example of using the new 'entity_relation' key with logtalk_load_context/2 to access entity relations during compilation.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/RELEASE_NOTES.md#2025-04-06_snippet_7\n\nLANGUAGE: Logtalk\nCODE:\n```\nlogtalk_load_context(entity_relation, Relation)\n```\n\n----------------------------------------\n\nTITLE: Listing Docker Configuration Files\nDESCRIPTION: Lists the key files present in each Docker configuration directory for Logtalk. It includes the Dockerfile for configuring Logtalk with a specific Prolog backend and the README.md file used for project description on Docker Hub.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/scripts/docker/NOTES.md#2025-04-06_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n- `Dockerfile`  \n\tthe docker file configuring Logtalk with a specific Prolog backend\n\tor a selection of the supported backends\n\n- `README.md`  \n\tthe `README.md` file automatically used as the project description\n\twhen creating an automated build at Docker Hub\n```\n\n----------------------------------------\n\nTITLE: Directory Files Filtering Predicate\nDESCRIPTION: Added os::directory_files/3 predicate to filter file lists by type, extension, path format, and dot files.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/RELEASE_NOTES.md#2025-04-06_snippet_70\n\nLANGUAGE: logtalk\nCODE:\n```\nos::directory_files/3\n```\n\n----------------------------------------\n\nTITLE: Querying Pack Dependencies in Logtalk\nDESCRIPTION: Demonstrates how to retrieve a list of packs that depend on a specific pack.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/devtools/packs.rst.txt#2025-04-06_snippet_32\n\nLANGUAGE: logtalk\nCODE:\n```\n| ?- packs::dependents(reg, bar, Dependents).\n```\n\n----------------------------------------\n\nTITLE: Declaring Non-Standard Prolog Built-in Meta-Predicates in Logtalk\nDESCRIPTION: Demonstrates how to declare a non-standard Prolog built-in meta-predicate (det_call/1) to ensure proper compilation in Logtalk.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/userman/predicates.rst.txt#2025-04-06_snippet_51\n\nLANGUAGE: logtalk\nCODE:\n```\n:- meta_predicate(user::det_call(0)).\n```\n\n----------------------------------------\n\nTITLE: Proper Prefix Checking in Logtalk\nDESCRIPTION: Checks if a list is a proper prefix of another list.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/listp_0.rst.txt#2025-04-06_snippet_8\n\nLANGUAGE: Logtalk\nCODE:\n```\nproper_prefix(Prefix,List)\n```\n\n----------------------------------------\n\nTITLE: Logtalk Compilation and Loading Predicates\nDESCRIPTION: Built-in predicates for compiling, loading, and managing Logtalk source files.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/coding/subethaedit2/Logtalk.mode/Contents/Resources/AutocompleteAdditions.txt#2025-04-06_snippet_18\n\nLANGUAGE: logtalk\nCODE:\n```\nlogtalk_compile(, [])\nlogtalk_compile()\nlogtalk_load(, [])\nlogtalk_load()\nlogtalk_library_path(, )\nlogtalk_load_context(, )\nlogtalk_make()\nlogtalk_make\nlogtalk_make_target_action()\n```\n\n----------------------------------------\n\nTITLE: Include Directive Template and Modes\nDESCRIPTION: Template showing the mode declaration for the include directive with source file name parameter.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/refman/directives/include_1.rst.txt#2025-04-06_snippet_1\n\nLANGUAGE: logtalk\nCODE:\n```\ninclude(@source_file_name)\n```\n\n----------------------------------------\n\nTITLE: Referencing Portability FAQ Sections in reStructuredText\nDESCRIPTION: This snippet defines internal references for different sections of the portability FAQ using reStructuredText syntax. It includes references for the main portability section and two subsections about Prolog and OS portability.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/faq/portability.rst#2025-04-06_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. _faq_portability:\n\nPortability\n===========\n\n* :ref:`faq_portability_prolog`\n* :ref:`faq_portability_os`\n\n.. _faq_portability_prolog:\n\n.. _faq_portability_os:\n```\n\n----------------------------------------\n\nTITLE: Loading the localization example\nDESCRIPTION: This snippet loads the localization example files using the Logtalk loader.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/localizations/NOTES.md#2025-04-06_snippet_1\n\nLANGUAGE: logtalk\nCODE:\n```\nlogtalk_load(localizations(loader)).\n```\n\n----------------------------------------\n\nTITLE: Using Custom Test Dialects with a Logtalk Driver File\nDESCRIPTION: This Logtalk initialization code demonstrates how to use a custom test dialect by loading necessary components and setting up a hook pipeline.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/tools/lgtunit/NOTES.md#2025-04-06_snippet_8\n\nLANGUAGE: Logtalk\nCODE:\n```\n:- initialization((\n\tset_logtalk_flag(report, warnings),\n\tlogtalk_load(lgtunit(loader)),\n\tlogtalk_load(library(hook_flows_loader)),\n\tlogtalk_load(simple_dialect),\n\tlogtalk_load(tests, [hook(hook_pipeline([simple_dialect,lgtunit]))]),\n\ttests::run\n)).\n```\n\n----------------------------------------\n\nTITLE: Enabling All Debug Messages\nDESCRIPTION: Example showing how to enable all debug messages for a component and test the result.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/devtools/debug_messages.rst.txt#2025-04-06_snippet_4\n\nLANGUAGE: prolog\nCODE:\n```\n| ?- debug_messages::enable(xyx).\nyes\n\n| ?- foo::(bar, baz).\nbar/0 called\nbaz/0 called\nyes\n```\n\n----------------------------------------\n\nTITLE: Fold Operations in Logtalk\nDESCRIPTION: Illustrates the differences between left and right folds and demonstrates their use with various predicates and operations.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/metapredicates/NOTES.md#2025-04-06_snippet_6\n\nLANGUAGE: logtalk\nCODE:\n```\nfolds::left(Left).\n```\n\nLANGUAGE: logtalk\nCODE:\n```\nfolds::right(Right).\n```\n\nLANGUAGE: logtalk\nCODE:\n```\nmeta::fold_left([Y, X, [X|Y]]>>true, [], [1,2,3,4,5,6,7,8,9], R).\n```\n\nLANGUAGE: logtalk\nCODE:\n```\nmeta::fold_right([X, Y, [X|Y]]>>true, [], [1,2,3,4,5,6,7,8,9], R).\n```\n\nLANGUAGE: logtalk\nCODE:\n```\nmeta::fold_left([X,Y,Z]>>(Z is X + Y), 0, [1,2,3], Sum).\n```\n\nLANGUAGE: logtalk\nCODE:\n```\nmeta::fold_left(meta::fold_left([X,Y,Z]>>(Z is X + Y)), 0, [[1,2,3],[4,5,6]], Sum).\n```\n\nLANGUAGE: logtalk\nCODE:\n```\nmeta::fold_left(sum_squares, 0, [1,2,3], Result).\n```\n\nLANGUAGE: logtalk\nCODE:\n```\nmeta::fold_left(atom_concat, 'PREFIX', [abc,def,ghi], Result).\n```\n\nLANGUAGE: logtalk\nCODE:\n```\nmeta::fold_right(atom_concat, 'SUFIX', [abc,def,ghi], Result).\n```\n\n----------------------------------------\n\nTITLE: Testing CBOR Library in Logtalk\nDESCRIPTION: Instructions for testing the CBOR library predicates using the tester.lgt file.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/libraries/cbor.rst.txt#2025-04-06_snippet_4\n\nLANGUAGE: Logtalk\nCODE:\n```\n| ?- logtalk_load(cbor(tester)).\n```\n\n----------------------------------------\n\nTITLE: Testing the Dead Code Scanner Tool in Logtalk\nDESCRIPTION: This snippet demonstrates how to load the tester file for the dead_code_scanner tool. It uses the logtalk_load/1 predicate with the tester file as an argument.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/devtools/dead_code_scanner.rst.txt#2025-04-06_snippet_1\n\nLANGUAGE: logtalk\nCODE:\n```\n| ?- logtalk_load(dead_code_scanner(tester)).\n```\n\n----------------------------------------\n\nTITLE: Ubuntu Dependencies Installation - Shell\nDESCRIPTION: Shell commands for installing tool dependencies using apt package manager on Ubuntu Linux.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/devtools/overview.rst#2025-04-06_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\n$ sudo apt install graphviz\n$ sudo apt install texinfo pandoc\n$ sudo apt install xsltproc fop texlive-latex-extra tex-gyre latexmk\n$ sudo apt install coreutils libarchive-tools gnupg2 git curl wget direnv\n$ sudo apt install gh\n```\n\n----------------------------------------\n\nTITLE: Defining Sequential Numeric Facts for Predicate a/1\nDESCRIPTION: Defines a single predicate 'a' with arity 1 through a sequence of facts. Each fact maps to a single integer value from 0 through 9, creating a simple lookup table or enumeration.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/threads/team/input.txt#2025-04-06_snippet_0\n\nLANGUAGE: prolog\nCODE:\n```\na(0).\na(1).\na(2).\na(3).\na(4).\na(5).\na(6).\na(7).\na(8).\na(9).\n```\n\n----------------------------------------\n\nTITLE: RPM Macros Configuration for Logtalk Packaging\nDESCRIPTION: Required RPM macro definitions that must be present in the ~/.rpmmacros configuration file for building Logtalk RPM packages. Specifies packager information, distribution, vendor, and build directories.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/scripts/linux/NOTES.md#2025-04-06_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n%packager      Paulo Moura <pmoura@logtalk.org>\n%distribution  Logtalk.org\n%vendor        Logtalk.org\n%_topdir       %(echo $HOME)/rpmbuild\n%_tmppath     /var/tmp\n```\n\n----------------------------------------\n\nTITLE: Generating Coverage Report with Custom Prefix and URL in Bash\nDESCRIPTION: This snippet demonstrates how to generate a coverage report with a custom prefix to be suppressed and a GitHub URL for source code links.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/devtools/lgtunit.rst#2025-04-06_snippet_73\n\nLANGUAGE: bash\nCODE:\n```\n$ xsltproc \\\n  --stringparam prefix logtalk/ \\\n  --stringparam url https://github.com/LogtalkDotOrg/logtalk3/blob/master \\\n  -o coverage_report.html coverage_report.xml\n```\n\n----------------------------------------\n\nTITLE: Example Usage with Family Relations\nDESCRIPTION: Complete example showing profiler usage with the family example, including loading, starting profiling, running queries, and viewing results.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/devtools/ports_profiler.rst#2025-04-06_snippet_4\n\nLANGUAGE: prolog\nCODE:\n```\n| ?- {ports_profiler(loader)}.\n...\nyes\n\n| ?- set_logtalk_flag(debug, on).\nyes\n\n| ?- logtalk_load(family(loader)).\n...\nyes\n\n| ?- ports_profiler::start.\nyes\n\n| ?- addams::sister(Sister, Sibling).\nSister = wednesday,\nSibling = pubert ;\nSister = wednesday,\nSibling = pugsley ;\nSister = wednesday,\nSibling = pubert ;\nSister = wednesday,\nSibling = pugsley ;\nno\n\n| ?- ports_profiler::data.\n```\n\n----------------------------------------\n\nTITLE: Logtalk License and Copyright Notice\nDESCRIPTION: HTML comment containing the copyright and Apache 2.0 license information for the Logtalk project.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/lpa/timetables/NOTES.md#2025-04-06_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<!--\n________________________________________________________________________\n\nThis file is part of Logtalk <https://logtalk.org/>  \nSPDX-FileCopyrightText: 1998-2025 Paulo Moura <pmoura@logtalk.org>  \nSPDX-License-Identifier: Apache-2.0\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n________________________________________________________________________\n-->\n```\n\n----------------------------------------\n\nTITLE: Using abolish_protocol/1 Predicate in Prolog\nDESCRIPTION: Demonstrates how to use the abolish_protocol/1 predicate to abolish a dynamic protocol named 'listp'.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/refman/predicates/abolish_protocol_1.rst.txt#2025-04-06_snippet_1\n\nLANGUAGE: Prolog\nCODE:\n```\n| ?- abolish_protocol(listp).\n```\n\n----------------------------------------\n\nTITLE: Implementing setup_call_cleanup/3 in SICStus Prolog adapter\nDESCRIPTION: Updated implementation of setup_call_cleanup/3 in the SICStus Prolog adapter file to make the setup goal call deterministic and only define if not already present.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/RELEASE_NOTES.md#2025-04-06_snippet_87\n\nLANGUAGE: Prolog\nCODE:\n```\nsetup_call_cleanup/3\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Linter Warning in Logtalk\nDESCRIPTION: Example of implementing a custom linter warning using logtalk_linter_hook/7. This example warns about using list::append/3 to construct a list from a head and a tail.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/refman/predicates/logtalk_linter_hook_7.rst#2025-04-06_snippet_2\n\nLANGUAGE: Prolog\nCODE:\n```\n:- multifile(user::logtalk_linter_hook/7).\n% warn about using list::append/3 to construct a list from an head and a tail\nuser::logtalk_linter_hook(\n    list::append(L1,L2,L), suspicious_calls,\n    File, Lines, Type, Entity,\n    suspicious_call(File, Lines, Type, Entity, list::append(L1,L2,L), [L=[Head|L2]])\n) :-\n    nonvar(L1),\n    L1 = [Head].\n```\n\n----------------------------------------\n\nTITLE: Installing Tool Dependencies on macOS with MacPorts\nDESCRIPTION: Terminal commands for installing third-party dependencies required by various Logtalk tools using the MacPorts package manager on macOS.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/tools/NOTES.md#2025-04-06_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n$ sudo port install d2 graphviz\n$ sudo port install texinfo pandoc\n$ sudo port install libxslt fop texlive\n$ sudo port install gsed\n$ sudo port install coreutils gsed libarchive gnupg2 git curl wget direnv\n$ sudo port install gh glab\n```\n\n----------------------------------------\n\nTITLE: Loading ISO 8601 Library in Logtalk\nDESCRIPTION: Command to load all entities in the ISO 8601 library using the loader.lgt file\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/contributions/iso8601.rst#2025-04-06_snippet_0\n\nLANGUAGE: logtalk\nCODE:\n```\n| ?- logtalk_load(iso8601(loader)).\n```\n\n----------------------------------------\n\nTITLE: Loading Module Files\nDESCRIPTION: Compiles and loads Prolog module files as Logtalk objects using the loader\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/modules/NOTES.md#2025-04-06_snippet_1\n\nLANGUAGE: logtalk\nCODE:\n```\nlogtalk_load(modules(loader)).\n```\n\n----------------------------------------\n\nTITLE: Attempting to Uninstall a Pinned Pack in Logtalk\nDESCRIPTION: Illustrates the error message received when attempting to uninstall a pinned pack.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/devtools/packs.rst.txt#2025-04-06_snippet_39\n\nLANGUAGE: logtalk\nCODE:\n```\n| ?- packs::uninstall(bar).\n```\n\n----------------------------------------\n\nTITLE: Debugging Unit Tests with the Logtalk Debugger\nDESCRIPTION: Example of how to debug a failed unit test using the Logtalk debugger. The code loads the debugger, activates tracing, and runs a specific test for debugging purposes.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/devtools/lgtunit.rst#2025-04-06_snippet_55\n\nLANGUAGE: logtalk\nCODE:\n```\n| ?- logtalk_load(debugger(loader)).\n...\n\n| ?- debugger::trace.\n...\n\n| ?- tests::run(test_foo).\n...\n```\n\n----------------------------------------\n\nTITLE: Map-Reduce Operation in Logtalk\nDESCRIPTION: Uses the map_reduce/5 meta-predicate to simulate salary cuts in a company structure.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/metapredicates/NOTES.md#2025-04-06_snippet_12\n\nLANGUAGE: logtalk\nCODE:\n```\ncompany::(company(C1), get_salary(company(C1),S1)).\n```\n\nLANGUAGE: logtalk\nCODE:\n```\ncompany::(company(C1), cut_salary(company(C1), C2), get_salary(C2, S2)).\n```\n\n----------------------------------------\n\nTITLE: Defining the dynamic_directive_ predicate in Logtalk\nDESCRIPTION: Table of declared dynamic predicates. This predicate tracks dynamic predicate declarations, storing the object, source line number, and predicate indicator.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/wrapper_0.rst.txt#2025-04-06_snippet_21\n\nLANGUAGE: logtalk\nCODE:\n```\ndynamic_directive_(Object,Line,Predicate)\n```\n\n----------------------------------------\n\nTITLE: Installing Python Dependencies from Requirements File\nDESCRIPTION: Alternative approach to install Python dependencies using a requirements.txt file, which ensures using the same versions as those used to build the official Logtalk documentation.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/tools/NOTES.md#2025-04-06_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ cd manuals/sources\n$ python3 -m pip install -r requirements.txt\n```\n\n----------------------------------------\n\nTITLE: Create Protocol Usage Example\nDESCRIPTION: Demonstrates how to create a new logging protocol that extends monitoring protocol with specific public predicates.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/refman/predicates/create_protocol_3.rst.txt#2025-04-06_snippet_2\n\nLANGUAGE: prolog\nCODE:\n```\n| ?- create_protocol(\n           logging,\n           [extends(monitoring)],\n           [public([log_file/1, log_on/0, log_off/0])]\n        ).\n```\n\n----------------------------------------\n\nTITLE: Predicate Modes in Logtalk\nDESCRIPTION: Defines the modes and number of proofs for the logtalk_compile/2 predicate, specifying input types and expected outcomes.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/refman/predicates/logtalk_compile_2.rst#2025-04-06_snippet_1\n\nLANGUAGE: logtalk\nCODE:\n```\nlogtalk_compile(@source_file_name, @list(compiler_flag)) - zero_or_one\nlogtalk_compile(@list(source_file_name), @list(compiler_flag)) - zero_or_one\n```\n\n----------------------------------------\n\nTITLE: Printing Entity-Specific Profiling Data in Logtalk\nDESCRIPTION: Shows how to print profiling data for a specific entity.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/tools/ports_profiler/NOTES.md#2025-04-06_snippet_5\n\nLANGUAGE: Logtalk\nCODE:\n```\n| ?- ports_profiler::data(Entity).\n```\n\n----------------------------------------\n\nTITLE: Defining the end_category/0 Directive Syntax in Logtalk\nDESCRIPTION: Syntax definition for the end_category directive which is used to mark the end of a category definition in Logtalk programming.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/refman/directives/end_category_0.rst#2025-04-06_snippet_0\n\nLANGUAGE: logtalk\nCODE:\n```\nend_category\n```\n\n----------------------------------------\n\nTITLE: Setting Source Data Flag for Dead Code Detection in Logtalk\nDESCRIPTION: Enables the source_data flag which is required for the dead code scanner to work properly. This flag ensures that source code information is preserved during compilation.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/tools/dead_code_scanner/SCRIPT.txt#2025-04-06_snippet_0\n\nLANGUAGE: prolog\nCODE:\n```\n| ?- set_logtalk_flag(source_data, on).\n```\n\n----------------------------------------\n\nTITLE: Multifile Directive Usage Examples\nDESCRIPTION: Demonstrates practical examples of using the multifile directive to declare multifile predicates with and without user qualification.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/refman/directives/multifile_1.rst.txt#2025-04-06_snippet_2\n\nLANGUAGE: logtalk\nCODE:\n```\n:- multifile(table/3).\n:- multifile(user::hook/2).\n```\n\n----------------------------------------\n\nTITLE: Suppressing Compiler Error Messages with message_hook in Logtalk\nDESCRIPTION: Example of defining logtalk::message_hook/4 clauses to suppress specific expected compiler error messages during testing.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/devtools/lgtunit.rst#2025-04-06_snippet_41\n\nLANGUAGE: logtalk\nCODE:\n```\n:- multifile(logtalk::message_hook/4).\n:- dynamic(logtalk::message_hook/4).\n\n% ignore expected domain error\nlogtalk::message_hook(compiler_error(_,_,error(domain_error(foo,bar),_)), error, core, _).\n```\n\n----------------------------------------\n\nTITLE: Installing PowerShell Environment Module for Windows\nDESCRIPTION: PowerShell command to install the Set-PsEnv module, which is useful for supporting environment variables in Windows PowerShell for some Logtalk tools.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/tools/NOTES.md#2025-04-06_snippet_10\n\nLANGUAGE: powershell\nCODE:\n```\nPS> Install-Module -Name Set-PsEnv\n```\n\n----------------------------------------\n\nTITLE: Running Prolog Conformance Tests with SWI-Prolog\nDESCRIPTION: Example commands for running the conformance test suite with SWI-Prolog. Shows both standard installation path and git repository clone scenarios.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/tests/prolog/NOTES.md#2025-04-06_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ cd $LOGTALKUSER/tests/prolog\n$ logtalk_tester -p swi\n```\n\nLANGUAGE: shell\nCODE:\n```\n$ logtalk_tester.sh -p swi\n```\n\n----------------------------------------\n\nTITLE: Logtalk Make Usage Mode\nDESCRIPTION: Specification of the predicate's usage mode indicating it provides one proof.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/refman/predicates/logtalk_make_0.rst#2025-04-06_snippet_1\n\nLANGUAGE: logtalk\nCODE:\n```\nlogtalk_make - one\n```\n\n----------------------------------------\n\nTITLE: Defining a Sample Object in Logtalk\nDESCRIPTION: Creates an 'any' object with two public predicates, bar/1 and foo/1, for demonstration purposes.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/userman/events.rst.txt#2025-04-06_snippet_6\n\nLANGUAGE: Logtalk\nCODE:\n```\n:- object(any).\n\n    :- public(bar/1).\n    bar(bar).\n\n    :- public(foo/1).\n    foo(foo).\n\n:- end_object.\n```\n\n----------------------------------------\n\nTITLE: Hiding Performers\nDESCRIPTION: Executes the hide operation using the magic object to make all horsemen disappear from stage.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/now_you_see_me/NOTES.md#2025-04-06_snippet_3\n\nLANGUAGE: logtalk\nCODE:\n```\nmagic::hide.\n```\n\n----------------------------------------\n\nTITLE: Environment Variable Configuration\nDESCRIPTION: Sets the CLASSPATH and TIKA_CONFIG environment variables required for Apache Tika integration.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/document_converter/NOTES.md#2025-04-06_snippet_2\n\nLANGUAGE: logtalk\nCODE:\n```\nsetenv('CLASSPATH', './jars/tika-app-2.8.0.jar'), setenv('TIKA_CONFIG', './jars/tika-config.xml').\n```\n\n----------------------------------------\n\nTITLE: Loading Code Metrics Tool in Logtalk\nDESCRIPTION: Command to load the code metrics tool into a Logtalk environment.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/devtools/code_metrics.rst.txt#2025-04-06_snippet_0\n\nLANGUAGE: logtalk\nCODE:\n```\n| ?- logtalk_load(code_metrics(loader)).\n```\n\n----------------------------------------\n\nTITLE: SHJS Source Code Formatting Recommendation\nDESCRIPTION: SHJS expects source code to be wrapped in 'pre' tags and doesn't provide tab setting control. For optimal results, it's recommended to convert tabs to spaces in the source code before copying it to HTML files.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/coding/shjs/NOTES.md#2025-04-06_snippet_2\n\nLANGUAGE: Text\nCODE:\n```\nSHJS expects the source code to be wrapped in `pre` tags and doesn't seem to\\nprovide any control over tab settings. Therefore, for best results, convert\\nthe tabs in your source code to spaces before copying it to your HTML files.\n```\n\n----------------------------------------\n\nTITLE: Adding Multiple Elements to Queue\nDESCRIPTION: Example of creating a new queue and adding multiple elements using join_all/3 predicate.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/libraries/queues.rst.txt#2025-04-06_snippet_3\n\nLANGUAGE: logtalk\nCODE:\n```\n| ?- queue::(new(Queue0), join_all([1,2,3], Queue0, Queue1)).\nQueue0 = ...,\nQueue1 = ...\nyes\n```\n\n----------------------------------------\n\nTITLE: Checking Predicate Line Numbers\nDESCRIPTION: Query to check the starting line number of a predicate definition for debugging purposes.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/devtools/debugger.rst#2025-04-06_snippet_6\n\nLANGUAGE: logtalk\nCODE:\n```\n| ?- object_property(Entity, defines(Functor/Arity, Properties)).\n```\n\n----------------------------------------\n\nTITLE: Defining Table of Contents in reStructuredText for Logtalk Handbook\nDESCRIPTION: This snippet defines the table of contents structure for the Logtalk Handbook using reStructuredText syntax. It specifies the depth, caption, and included sections of the documentation.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/index.rst#2025-04-06_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. toctree::\n   :maxdepth: 3\n   :caption: Contents\n\n   userman/index\n   refman/index\n   tutorial/index\n   faq/index\n   devtools/index\n   libraries/index\n   ports/index\n   contributions/index\n   glossary\n   bibliography\n   genindex\n```\n\n----------------------------------------\n\nTITLE: Declaring Dynamic Categories\nDESCRIPTION: Using the dynamic/0 directive to declare a category as dynamic in source code.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/userman/categories.rst#2025-04-06_snippet_12\n\nLANGUAGE: text\nCODE:\n```\n:- dynamic.\n```\n\n----------------------------------------\n\nTITLE: Checking for Remaining Answers\nDESCRIPTION: Example of checking whether any answers remain from a pengine query.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/pengines/NOTES.md#2025-04-06_snippet_10\n\nLANGUAGE: logtalk\nCODE:\n```\nwrite('Any answers left?').\n```\n\n----------------------------------------\n\nTITLE: Installing Logtalk System-wide with Custom Prefix on POSIX Systems\nDESCRIPTION: This command installs Logtalk with a custom installation prefix. It allows administrators to specify a non-default installation location for the system-wide installation.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/INSTALL.md#2025-04-06_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n% sudo ./install.sh -p /opt/local\n```\n\n----------------------------------------\n\nTITLE: Configuring Jupyter Notebook for Logtalk\nDESCRIPTION: This YAML snippet defines the Jupyter notebook configuration for Logtalk. It specifies the text representation format, jupytext version, and kernel specifications for Logtalk.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/searching/NOTES.md#2025-04-06_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\njupyter:\n  jupytext:\n    text_representation:\n      extension: .md\n      format_name: markdown\n      format_version: '1.3'\n      jupytext_version: 1.16.7\n  kernelspec:\n    display_name: Logtalk\n    language: logtalk\n    name: logtalk_kernel\n---\n```\n\n----------------------------------------\n\nTITLE: Checking Rouge Language Support\nDESCRIPTION: Command to list all supported languages in Rouge\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/coding/rouge/NOTES.md#2025-04-06_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ rougify list\n```\n\n----------------------------------------\n\nTITLE: Loading Base64 Library in Logtalk\nDESCRIPTION: This snippet demonstrates how to load all entities in the base64 library using the loader.lgt utility file.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/libraries/base64.rst#2025-04-06_snippet_0\n\nLANGUAGE: prolog\nCODE:\n```\n| ?- logtalk_load(base64(loader)).\n```\n\n----------------------------------------\n\nTITLE: Generating Package Documentation\nDESCRIPTION: Example of generating API documentation for a package using lgtdoc tool\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/devtools/packs.rst#2025-04-06_snippet_31\n\nLANGUAGE: logtalk\nCODE:\n```\n| ?- {lflat(loader)},\n        {lgtdoc(loader)},\n        logtalk::expand_library_path(lflat, Path),\n        lgtdoc::rdirectory(Path).\n```\n\n----------------------------------------\n\nTITLE: Loading Specific Logtalk Tool\nDESCRIPTION: Example of loading a specific tool (lgtunit) using library notation.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/devtools/overview.rst.txt#2025-04-06_snippet_1\n\nLANGUAGE: prolog\nCODE:\n```\n| ?- logtalk_load(lgtunit(loader)).\n```\n\n----------------------------------------\n\nTITLE: Example Usage of end_object/0 Directive in Logtalk\nDESCRIPTION: This example shows how to properly terminate an object definition using the end_object/0 directive with the standard Logtalk directive notation.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/refman/directives/end_object_0.rst.txt#2025-04-06_snippet_1\n\nLANGUAGE: logtalk\nCODE:\n```\n:- end_object.\n```\n\n----------------------------------------\n\nTITLE: Creating RPM Build Directory Structure\nDESCRIPTION: Shell commands for manually creating the required RPM build directory structure in the user's home directory. Creates the rpmbuild directory and its necessary subdirectories.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/scripts/linux/NOTES.md#2025-04-06_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ cd $HOME\n$ mkdir rpmbuild\n$ cd rpmbuild\n$ mkdir RPMS SOURCES SPECS SRPMS BUILD\n```\n\n----------------------------------------\n\nTITLE: Loading Flyweight Pattern Implementation\nDESCRIPTION: Loads the Flyweight design pattern sample implementation from the structural patterns directory.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/design_patterns/structural/flyweight/NOTES.md#2025-04-06_snippet_1\n\nLANGUAGE: logtalk\nCODE:\n```\nlogtalk_load(design_patterns('structural/flyweight/loader')).\n```\n\n----------------------------------------\n\nTITLE: Random list operations in Logtalk\nDESCRIPTION: New predicates for performing random operations on lists in the Logtalk random library.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/RELEASE_NOTES.md#2025-04-06_snippet_4\n\nLANGUAGE: Logtalk\nCODE:\n```\nrandom::select(List, Element, NewElement, NewList).\nrandom::swap(List, SwappedList).\nrandom::swap_consecutive(List, SwappedList).\n```\n\n----------------------------------------\n\nTITLE: Handling proprietary Prolog directive for loading foreign files in Prolog\nDESCRIPTION: This snippet shows how to handle a proprietary Prolog directive 'load_foreign_files/3' using the '$lgt_prolog_term_expansion'/2 predicate. The directive is discarded after triggering the side effect of loading the foreign library files.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/userman/migration.rst.txt#2025-04-06_snippet_8\n\nLANGUAGE: prolog\nCODE:\n```\n'$lgt_prolog_term_expansion'(\n        (:- load_foreign_files(Files,Libs,InitRoutine)),\n        []\n) :-\n    load_foreign_files(Files,Libs,InitRoutine).\n```\n\n----------------------------------------\n\nTITLE: Logtalk and Prolog Built-in Predicates\nDESCRIPTION: Various built-in predicates for Logtalk and Prolog, including atom manipulation, term manipulation, and arithmetic operations.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/coding/subethaedit2/Logtalk.mode/Contents/Resources/AutocompleteAdditions.txt#2025-04-06_snippet_23\n\nLANGUAGE: logtalk\nCODE:\n```\nrepeat\n\natom_length(, )\natom_concat(, , )\natom_chars(, )\natom_codes(, )\nsub_atom(, , , , )\nchar_code(, )\nnumber_chars(, )\nnumber_codes(, )\n\nset_prolog_flag(, )\ncurrent_prolog_flag(, )\n\narg(, , )\ncopy_term(, )\nfunctor(, , )\nnumbervars(, , )\nterm_variables(, )\n\nkeysort(, )\nsort(, )\n\nhalt().\nhalt.\n\nabs()\nacos()\nasin()\natan()\natan2()\nceiling()\ncos()\nexp()\nfloat_fractional_part()\nfloat_integer_part()\nfloor()\nlog()\nmax(, )\nmin(, )\nmod(, )\nrem(, )\ndiv(, )\nround()\nsign()\nsin()\nsqrt()\ntan()\ntruncate()\nxor()\n```\n\n----------------------------------------\n\nTITLE: Specifying Modes and Proofs for extends_object/2-3 in Logtalk\nDESCRIPTION: Defines the modes and number of proofs for the extends_object/2-3 predicate. Both arguments can be input or output, and the predicate can return zero or more results.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/refman/predicates/extends_object_2_3.rst.txt#2025-04-06_snippet_1\n\nLANGUAGE: prolog\nCODE:\n```\nextends_object(?object_identifier, ?object_identifier) - zero_or_more\nextends_object(?object_identifier, ?object_identifier, ?scope) - zero_or_more\n```\n\n----------------------------------------\n\nTITLE: Pack Management Commands\nDESCRIPTION: Example Logtalk queries for managing packs including listing, installing, and updating\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/devtools/packs.rst#2025-04-06_snippet_22\n\nLANGUAGE: prolog\nCODE:\n```\n| ?- packs::available.\n```\n\nLANGUAGE: prolog\nCODE:\n```\n| ?- packs::installed.\n```\n\nLANGUAGE: prolog\nCODE:\n```\n| ?- packs::installed(talkshow).\n```\n\nLANGUAGE: prolog\nCODE:\n```\n| ?- packs::describe(bar).\n```\n\nLANGUAGE: prolog\nCODE:\n```\n| ?- packs::describe(reg, bar).\n```\n\nLANGUAGE: prolog\nCODE:\n```\n| ?- packs::install(bar).\n```\n\nLANGUAGE: prolog\nCODE:\n```\n| ?- {bar(loader)}.\n```\n\nLANGUAGE: prolog\nCODE:\n```\n| ?- packs::update(bar).\n```\n\n----------------------------------------\n\nTITLE: Enumerating current terms\nDESCRIPTION: Retrieves and displays the current terms in the persistency object's state.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/persistency/NOTES.md#2025-04-06_snippet_4\n\nLANGUAGE: logtalk\nCODE:\n```\npersistency::state(S).\n```\n\n----------------------------------------\n\nTITLE: Displaying Version Information in Logtalk Jupyter Notebook\nDESCRIPTION: Displays the versions of Logtalk, the underlying Prolog backend, and the Jupyter kernel when executed in a notebook environment.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/threads/integration/NOTES.md#2025-04-06_snippet_0\n\nLANGUAGE: logtalk\nCODE:\n```\n%versions\n```\n\n----------------------------------------\n\nTITLE: Loading the FCube Module in Logtalk\nDESCRIPTION: Command to load the FCube port in a Logtalk session. This is the first step required before using the FCube theorem prover.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/ports/fcube/SCRIPT.txt#2025-04-06_snippet_0\n\nLANGUAGE: logtalk\nCODE:\n```\n| ?- logtalk_load(fcube(loader)).\n```\n\n----------------------------------------\n\nTITLE: Load LIPS Benchmark\nDESCRIPTION: Loads the LIPS benchmark implementation using the Logtalk loader.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/lips/NOTES.md#2025-04-06_snippet_1\n\nLANGUAGE: logtalk\nCODE:\n```\nlogtalk_load(lips(loader)).\n```\n\n----------------------------------------\n\nTITLE: Implementing Do-While Loop in Logtalk\nDESCRIPTION: Defines a do-while loop construct that executes an Action and continues while a Condition is true. It uses meta-predicate notation to handle callable arguments.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/loopp_0.rst.txt#2025-04-06_snippet_1\n\nLANGUAGE: Logtalk\nCODE:\n```\ndowhile(Action,Condition)\n```\n\n----------------------------------------\n\nTITLE: Enabling Global Documentation Support in Logtalk\nDESCRIPTION: Alternative method to enable documentation support by setting the source_data flag globally for all loaded files in the current session.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/devtools/lgtdoc.rst#2025-04-06_snippet_3\n\nLANGUAGE: logtalk\nCODE:\n```\n| ?- set_logtalk_flag(source_data, on).\n```\n\n----------------------------------------\n\nTITLE: Generating Inheritance Diagram for Logtalk Library in Prolog\nDESCRIPTION: This snippet demonstrates how to generate an inheritance diagram for the Logtalk library. It sets up source code and API documentation URLs, loads necessary components, and configures diagram options including path prefixes and omissions.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/tools/diagrams/NOTES.md#2025-04-06_snippet_16\n\nLANGUAGE: prolog\nCODE:\n```\n| ?- GitHub  = 'https://github.com/LogtalkDotOrg/logtalk3/commit/eb156d46e135ac47ef23adcc5d20d49dd8b66abb',\n     APIDocs = 'https://logtalk.org/library/',\n     logtalk_load(diagrams(loader)),\n     set_logtalk_flag(source_data, on),\n     logtalk_load(library(all_loader)),\n     inheritance_diagram::rlibrary(library, [\n         title('Logtalk library'),\n         node_type_captions(true),\n         zoom(true),\n         path_url_prefixes('$LOGTALKUSER/', GitHub, APIDocs),\n         path_url_prefixes('$LOGTALKHOME/', GitHub, APIDocs),\n         omit_path_prefixes(['$LOGTALKUSER/', '$LOGTALKHOME/', '$HOME/'])\n     ]).\n```\n\n----------------------------------------\n\nTITLE: Loading the FCube Module in Logtalk\nDESCRIPTION: Command to load the FCube port in a Logtalk session. This is the first step required before using the FCube theorem prover.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/ports/fcube/SCRIPT.txt#2025-04-06_snippet_0\n\nLANGUAGE: logtalk\nCODE:\n```\n| ?- logtalk_load(fcube(loader)).\n```\n\n----------------------------------------\n\nTITLE: Enabling Event Support in Logtalk\nDESCRIPTION: Turns on event support for messages sent at the command-line from the pseudo-object _user_.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/profiling/NOTES.md#2025-04-06_snippet_2\n\nLANGUAGE: logtalk\nCODE:\n```\nset_logtalk_flag(events, allow).\n```\n\n----------------------------------------\n\nTITLE: Houses Puzzle Water Query\nDESCRIPTION: Specific query to find who drinks water in the houses puzzle\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/puzzles/NOTES.md#2025-04-06_snippet_8\n\nLANGUAGE: logtalk\nCODE:\n```\nhouses::water_drinker(Drinker).\n```\n\n----------------------------------------\n\nTITLE: New Environment Variable Predicates\nDESCRIPTION: Addition of new predicates for handling environment variables and directories in config files.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/RELEASE_NOTES.md#2025-04-06_snippet_138\n\nLANGUAGE: Prolog\nCODE:\n```\n'$lgt_environment_variable'/2\n'$lgt_startup_directory'/1\n'$lgt_user_directory'/1\n```\n\n----------------------------------------\n\nTITLE: Printing Logtalk and Prolog Versions\nDESCRIPTION: Prints the versions of Logtalk, the Prolog backend, and the kernel if running as a notebook.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/blocks/NOTES.md#2025-04-06_snippet_0\n\nLANGUAGE: logtalk\nCODE:\n```\n%versions\n```\n\n----------------------------------------\n\nTITLE: Defining the current_protocol/1 Predicate in Logtalk\nDESCRIPTION: Syntax definition for the current_protocol/1 predicate that enumerates all currently defined protocols, whether static, dynamic, or built-in.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/refman/predicates/current_protocol_1.rst#2025-04-06_snippet_0\n\nLANGUAGE: logtalk\nCODE:\n```\ncurrent_protocol(Protocol)\n```\n\n----------------------------------------\n\nTITLE: Loading Metagol Port in Logtalk\nDESCRIPTION: Command to load all entities in the Metagol port using the loader.lgt file.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/ports/metagol.rst.txt#2025-04-06_snippet_0\n\nLANGUAGE: Logtalk\nCODE:\n```\n| ?- logtalk_load(metagol(loader)).\n```\n\n----------------------------------------\n\nTITLE: Setting Log Points in Logtalk\nDESCRIPTION: Shows how to set log points using the debugger's log/3 predicate. Two examples are provided: one with a simple message and another using placeholders for runtime information.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/userman/debugging.rst#2025-04-06_snippet_16\n\nLANGUAGE: text\nCODE:\n```\n| ?- debugger::log(agent, 99, '% At the secret headquarters!').\n     Log point added.\nyes\n\n| ?- debugger::log(loop, 42, 'Message $PREDICATE from $SENDER at thread $THREAD').\n     Log point added.\nyes\n```\n\n----------------------------------------\n\nTITLE: Setting Log Points in Logtalk\nDESCRIPTION: Shows how to set log points using the debugger's log/3 predicate. Two examples are provided: one with a simple message and another using placeholders for runtime information.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/userman/debugging.rst#2025-04-06_snippet_16\n\nLANGUAGE: text\nCODE:\n```\n| ?- debugger::log(agent, 99, '% At the secret headquarters!').\n     Log point added.\nyes\n\n| ?- debugger::log(loop, 42, 'Message $PREDICATE from $SENDER at thread $THREAD').\n     Log point added.\nyes\n```\n\n----------------------------------------\n\nTITLE: Creating a Protocol with Predicate Declarations\nDESCRIPTION: Creates a protocol named 'abc' with three public predicates: a/1, b/1, and c/1. This protocol will be used to define the interface for serializable objects.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/serialization/NOTES.md#2025-04-06_snippet_2\n\nLANGUAGE: logtalk\nCODE:\n```\ncreate_protocol(abc, [], [public([a/1,b/1,c/1])]).\n```\n\n----------------------------------------\n\nTITLE: Loading Logtalk Tutor Tool\nDESCRIPTION: Query to load the 'tutor' tool in Logtalk. This should be executed at the Logtalk prompt to make the tool available.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/devtools/tutor.rst#2025-04-06_snippet_0\n\nLANGUAGE: prolog\nCODE:\n```\n| ?- logtalk_load(tutor(loader)).\n```\n\n----------------------------------------\n\nTITLE: Defining a Basic Protocol in Logtalk\nDESCRIPTION: Shows the basic syntax for defining a self-contained protocol in Logtalk that doesn't depend on any other entity. The protocol declaration is encapsulated between protocol/1 and end_protocol/0 directives.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/userman/protocols.rst#2025-04-06_snippet_0\n\nLANGUAGE: logtalk\nCODE:\n```\n:- protocol(Protocol).\n    ...\n:- end_protocol.\n```\n\n----------------------------------------\n\nTITLE: Defining a Basic Protocol in Logtalk\nDESCRIPTION: Shows the basic syntax for defining a self-contained protocol in Logtalk that doesn't depend on any other entity. The protocol declaration is encapsulated between protocol/1 and end_protocol/0 directives.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/userman/protocols.rst#2025-04-06_snippet_0\n\nLANGUAGE: logtalk\nCODE:\n```\n:- protocol(Protocol).\n    ...\n:- end_protocol.\n```\n\n----------------------------------------\n\nTITLE: Reading CSV Files Line by Line\nDESCRIPTION: Change to the csv library predicates read_file_by_line/2-3 to skip empty lines in CSV files.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/RELEASE_NOTES.md#2025-04-06_snippet_21\n\nLANGUAGE: Logtalk\nCODE:\n```\nread_file_by_line(File, Lines).\nread_file_by_line(File, Lines, Options).\n```\n\n----------------------------------------\n\nTITLE: Setting Java CLASSPATH for Apache POI in Bash\nDESCRIPTION: Bash command to set the Java CLASSPATH environment variable for Apache POI libraries.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/apache_poi/NOTES.md#2025-04-06_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n$ cd \"$LOGTALKUSER/examples/apache_poi\"\n$ . set_classpath.sh\n```\n\n----------------------------------------\n\nTITLE: Computing Calibration for Full Input in Logtalk\nDESCRIPTION: Retrieves the directory where the trebuchet object is stored, constructs the path to the main input test file, and computes the final calibration value using the solution predicate for part 2 of the problem.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/trebuchet/NOTES.md#2025-04-06_snippet_4\n\nLANGUAGE: logtalk\nCODE:\n```\nobject_property(trebuchet, file(_, Directory)),\natom_concat(Directory, 'test_files/input', File),\ntrebuchet::solution(File, Calibration).\n```\n\n----------------------------------------\n\nTITLE: System-wide Installation Path for GtkSourceView 3.x\nDESCRIPTION: Directory path for installing the Logtalk language specification file (logtalk.lang) system-wide in GtkSourceView 3.x.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/coding/gtksourceview3/NOTES.md#2025-04-06_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n${prefix}/share/gtksourceview-3.0/language-specs/\n```\n\n----------------------------------------\n\nTITLE: Retrieving Results Using a Specific Tag in Logtalk\nDESCRIPTION: Shows how to retrieve results from a specific threaded call by using its assigned tag (tag 2 in this case).\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/threads/nondet/NOTES.md#2025-04-06_snippet_11\n\nLANGUAGE: logtalk\nCODE:\n```\n%%table\nthreaded_exit(lists::member(X, [1,2,3]), 2).\n```\n\n----------------------------------------\n\nTITLE: Installing D2 and Graphviz on MacOS using Homebrew\nDESCRIPTION: Command to install required diagram generation tools D2 and Graphviz using Homebrew package manager on macOS.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/devtools/diagrams.rst.txt#2025-04-06_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ brew install d2 graphviz\n```\n\n----------------------------------------\n\nTITLE: Displaying Version Information in Logtalk\nDESCRIPTION: Prints the Logtalk, Prolog backend, and kernel versions when running as a notebook.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/profiling/NOTES.md#2025-04-06_snippet_0\n\nLANGUAGE: logtalk\nCODE:\n```\n%versions\n```\n\n----------------------------------------\n\nTITLE: List Element Access Predicates - Logtalk\nDESCRIPTION: Predicates for accessing list elements including nth element access (both 0 and 1-based indexing) and last element retrieval.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/varlistp_0.rst.txt#2025-04-06_snippet_1\n\nLANGUAGE: logtalk\nCODE:\n```\nnth0(?integer,+list,@var)\nnth1(?integer,+list,@var)\nlast(@list,@var)\n```\n\n----------------------------------------\n\nTITLE: Installing d2 and Graphviz using Homebrew\nDESCRIPTION: Command to install the d2 and Graphviz diagram generation tools using the Homebrew package manager on macOS.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/devtools/diagrams.rst#2025-04-06_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ brew install d2 graphviz\n```\n\n----------------------------------------\n\nTITLE: Installing Required Dependencies with Chocolatey on Windows\nDESCRIPTION: Command for installing GnuPG, Git, and Wget using the Chocolatey package manager on Windows systems.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/devtools/packs.rst.txt#2025-04-06_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n> choco install gnupg git wget\n```\n\n----------------------------------------\n\nTITLE: Retrieving Results from Second Variant Threaded Call in Logtalk\nDESCRIPTION: Shows how a second threaded_exit/1 call will pick the remaining variant threaded call and retrieve all its solutions.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/threads/nondet/NOTES.md#2025-04-06_snippet_8\n\nLANGUAGE: logtalk\nCODE:\n```\n%%table\nthreaded_exit(lists::member(X, [1,2,3])).\n```\n\n----------------------------------------\n\nTITLE: Defining phrase-like predicates in Logtalk\nDESCRIPTION: Support for declaring phrase-like predicates that call non-terminals in Logtalk adapter files. This helps prevent false positive linter warnings of non-terminals called as predicates.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/RELEASE_NOTES.md#2025-04-06_snippet_0\n\nLANGUAGE: Logtalk\nCODE:\n```\nphrase_like_predicate(Predicate, Arity).\n```\n\n----------------------------------------\n\nTITLE: Displaying Version Information in Logtalk Notebook\nDESCRIPTION: Command to display Logtalk, Prolog backend, and kernel versions when running in a Jupyter notebook environment.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/patching/NOTES.md#2025-04-06_snippet_0\n\nLANGUAGE: logtalk\nCODE:\n```\n%versions\n```\n\n----------------------------------------\n\nTITLE: Querying Dynamic Twin Time Object for Year Property\nDESCRIPTION: Demonstrates accessing a property through the dynamically created twin objects - querying the twin_time object for a year property that's implemented by its twin (twin_date).\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/design_patterns/structural/twin/NOTES.md#2025-04-06_snippet_8\n\nLANGUAGE: logtalk\nCODE:\n```\ntwin_time::year(Year).\n```\n\n----------------------------------------\n\nTITLE: Starting Message Recording\nDESCRIPTION: Initiates the recording of user messages using the msglog object.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/msglog/NOTES.md#2025-04-06_snippet_1\n\nLANGUAGE: logtalk\nCODE:\n```\nmsglog::record.\n```\n\n----------------------------------------\n\nTITLE: Checking source-highlight Logtalk Support\nDESCRIPTION: Command to check if your source-highlight installation already includes support for Logtalk by listing available languages.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/coding/source-highlight/NOTES.md#2025-04-06_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n% source-highlight --lang-list\n```\n\n----------------------------------------\n\nTITLE: Checking System Versions in Logtalk\nDESCRIPTION: Displays version information for Logtalk, the Prolog backend, and Jupyter kernel\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/poem/NOTES.md#2025-04-06_snippet_0\n\nLANGUAGE: logtalk\nCODE:\n```\n%versions\n```\n\n----------------------------------------\n\nTITLE: Creating a Dynamic Protocol in Logtalk Runtime\nDESCRIPTION: Shows how to create a new dynamic protocol at runtime using the create_protocol/3 predicate.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/userman/protocols.rst.txt#2025-04-06_snippet_3\n\nLANGUAGE: prolog\nCODE:\n```\n| ?- create_protocol(Protocol, Relations, Directives).\n```\n\n----------------------------------------\n\nTITLE: Loading XML Parser Library in Logtalk\nDESCRIPTION: This snippet demonstrates how to load all entities in the XML parser library using the loader.lgt file.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/contributions/xml_parser.rst#2025-04-06_snippet_0\n\nLANGUAGE: Logtalk\nCODE:\n```\n| ?- logtalk_load(xml_parser(loader)).\n```\n\n----------------------------------------\n\nTITLE: Invoking Logtalk Make Tool in Markdown\nDESCRIPTION: Shows the basic command to invoke the Logtalk make tool at the command line.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/tools/make/NOTES.md#2025-04-06_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n`make`\n```\n\n----------------------------------------\n\nTITLE: Querying books with extras\nDESCRIPTION: This snippet retrieves a list of book titles that have extras using the data_processing object.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/books/NOTES.md#2025-04-06_snippet_5\n\nLANGUAGE: logtalk\nCODE:\n```\ndata_processing::books_with_extras(Titles).\n```\n\n----------------------------------------\n\nTITLE: Configuring RST Documentation Structure for Message Sending\nDESCRIPTION: RST (reStructuredText) configuration for organizing message sending documentation, including toctree directive for sub-pages.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/refman/control/message_sending.rst.txt#2025-04-06_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. _message_sending:\n\nMessage sending\n===============\n\n.. toctree::\n   :maxdepth: 1\n\n   send_to_object_2\n   send_to_self_1\n```\n\n----------------------------------------\n\nTITLE: Printing Environment Versions in Logtalk\nDESCRIPTION: A simple command to print the versions of Logtalk, the Prolog backend, and the kernel when running in a Jupyter notebook environment.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/hailstone/NOTES.md#2025-04-06_snippet_0\n\nLANGUAGE: logtalk\nCODE:\n```\n%versions\n```\n\n----------------------------------------\n\nTITLE: Testing Flags Library in Logtalk\nDESCRIPTION: Command to load and run tests for the Flags library predicates using the tester.lgt file.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/contributions/flags.rst#2025-04-06_snippet_1\n\nLANGUAGE: logtalk\nCODE:\n```\n| ?- logtalk_load(flags(tester)).\n```\n\n----------------------------------------\n\nTITLE: Scanning a Single Entity for Dead Code in Logtalk\nDESCRIPTION: This snippet shows how to use the dead_code_scanner to analyze a single entity named 'some_object' for dead code. It uses the entity/1 predicate of the dead_code_scanner.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/devtools/dead_code_scanner.rst.txt#2025-04-06_snippet_4\n\nLANGUAGE: logtalk\nCODE:\n```\n| ?- dead_code_scanner::entity(some_object).\n```\n\n----------------------------------------\n\nTITLE: Computing Steps for Sample 1 (Part 1) in Logtalk\nDESCRIPTION: This snippet computes the number of steps for the 'test_files/sample_1' file, which is part of the first part of the problem.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/examples/haunted_wasteland/NOTES.md#2025-04-06_snippet_2\n\nLANGUAGE: logtalk\nCODE:\n```\nobject_property(haunted_wasteland, file(_, Directory)),\natom_concat(Directory, 'test_files/sample_1', File),\nhaunted_wasteland::steps_1(File, Steps).\n```\n\n----------------------------------------\n\nTITLE: Defining Parametric Test Objects in Logtalk\nDESCRIPTION: This Logtalk code demonstrates how to create parameterized unit tests using parametric test objects. It allows testing multiple implementations of the same protocol.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/tools/lgtunit/NOTES.md#2025-04-06_snippet_5\n\nLANGUAGE: Logtalk\nCODE:\n```\n:- object(tests(_RandomObject_),\n\textends(lgtunit)).\n\n\t:- uses(_RandomObject_, [\n\t\trandom/1, between/3, member/2,\n\t\t...\n\t]).\n\n\ttest(between_3_in_interval) :-\n\t\tbetween(1, 10, Random),\n\t\t1 =< Random, Random =< 10.\n\n\t...\n\n:- end_object.\n```\n\n----------------------------------------\n\nTITLE: Setting Global Debug and Source Data Flags in Logtalk\nDESCRIPTION: Shows how to set global flags for debug mode and source data before compiling source files.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/devtools/ports_profiler.rst.txt#2025-04-06_snippet_3\n\nLANGUAGE: Prolog\nCODE:\n```\n| ?- set_logtalk_flag(debug, on), set_logtalk_flag(source_data, on).\n```\n\n----------------------------------------\n\nTITLE: Defining Dynamic Predicate for File Line Hit Count in Logtalk\nDESCRIPTION: Defines a dynamic predicate 'file_line_hit_count_/3' that represents a table of file and line hit counts. It takes file, line, and count as arguments.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/debugger_0.rst.txt#2025-04-06_snippet_18\n\nLANGUAGE: Logtalk\nCODE:\n```\nfile_line_hit_count_/3\n```\n\n----------------------------------------\n\nTITLE: Testing the Hierarchies Library in Logtalk\nDESCRIPTION: This snippet shows how to load the tester.lgt file to test the predicates in the hierarchies library.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/library/hierarchies/NOTES.md#2025-04-06_snippet_1\n\nLANGUAGE: Logtalk\nCODE:\n```\n| ?- logtalk_load(hierarchies(tester)).\n```\n\n----------------------------------------\n\nTITLE: Using @/1 Goal Annotation in Complementing Categories\nDESCRIPTION: Experimental goal annotation that allows calling the original predicate definition in a patched object from a complementing category that is providing a new definition of that predicate.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/RELEASE_NOTES.md#2025-04-06_snippet_38\n\nLANGUAGE: logtalk\nCODE:\n```\n@/1\n```\n\n----------------------------------------\n\nTITLE: Threaded Peek Predicate Signature\nDESCRIPTION: Declaration of the threaded_peek predicate with its two variants - one taking a single Goal argument and another taking both Goal and Tag arguments.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/sources/refman/predicates/threaded_peek_1_2.rst#2025-04-06_snippet_0\n\nLANGUAGE: logtalk\nCODE:\n```\nthreaded_peek(Goal)\nthreaded_peek(Goal, Tag)\n```\n\n----------------------------------------\n\nTITLE: Private Dynamic Table for Component-Group Combinations in Logtalk\nDESCRIPTION: Private dynamic predicate that maintains a table of currently enabled debug(Group) messages per component. This predicate supports retrieval of component and group term combinations through backtracking.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/debug_messages_0.rst.txt#2025-04-06_snippet_7\n\nLANGUAGE: logtalk\nCODE:\n```\nenabled_/2\n```\n\n----------------------------------------\n\nTITLE: Using print/1 with Custom Term Writing in Prolog\nDESCRIPTION: Shows how the print/1 predicate uses the portray/1 hook to display terms according to custom formatting rules.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/userman/debugging.rst.txt#2025-04-06_snippet_27\n\nLANGUAGE: prolog\nCODE:\n```\n| ?- print(e(x1,x7)).\n\nx1 ---> x7\nyes\n```\n\n----------------------------------------\n\nTITLE: Generating Multiple Expected Terms from Closure in Logtalk\nDESCRIPTION: Constructs expected terms with the values generated by calling the given closure. If the closure fails, it returns an expected term with the atom 'fail'. If the closure throws an error, it returns that error in the expected term.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/expected_0.rst.txt#2025-04-06_snippet_7\n\nLANGUAGE: Logtalk\nCODE:\n```\nfrom_generator(Closure,Expected)\n```\n\n----------------------------------------\n\nTITLE: Shell Script Update for File Permissions\nDESCRIPTION: Update to the cplgtdirs.sh shell script to make all copied files writable by the user.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/RELEASE_NOTES.md#2025-04-06_snippet_151\n\nLANGUAGE: shell\nCODE:\n```\ncplgtdirs.sh\n```\n\n----------------------------------------\n\nTITLE: Defining Syntax for threaded_peek/1-2 in Prolog\nDESCRIPTION: Specifies the syntax for the threaded_peek/1 and threaded_peek/2 predicates. These predicates check if the result of proving a goal in a new thread is already available without blocking execution.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/refman/predicates/threaded_peek_1_2.rst.txt#2025-04-06_snippet_0\n\nLANGUAGE: Prolog\nCODE:\n```\nthreaded_peek(Goal)\nthreaded_peek(Goal, Tag)\n```\n\n----------------------------------------\n\nTITLE: Writing File Footer in Logtalk\nDESCRIPTION: Writes the output file footer using the specified options. Takes a stream or alias, an atom identifier, and a list of compound options as input.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/graph_language_protocol_0.rst.txt#2025-04-06_snippet_2\n\nLANGUAGE: Logtalk\nCODE:\n```\nfile_footer(Stream,Identifier,Options)\n```\n\n----------------------------------------\n\nTITLE: Defining a Simple Predicate in Logtalk3\nDESCRIPTION: This snippet defines a simple predicate named 'sort' in Logtalk3. The predicate contains several atoms that are typically keywords in Logtalk, demonstrating that they can be used as regular atoms within a predicate definition.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/coding/subethaedit4/Logtalk.seemode/Contents/Resources/ExampleSyntax.txt#2025-04-06_snippet_4\n\nLANGUAGE: Logtalk\nCODE:\n```\nsort :-\n\tforall,\n\tobject,\n\twrite,\n\tnumber.\n```\n\n----------------------------------------\n\nTITLE: Referenced Prolog Library Storage\nDESCRIPTION: Dynamic private predicate for storing referenced Prolog libraries in the diagram.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/library_diagram_1.rst.txt#2025-04-06_snippet_6\n\nLANGUAGE: logtalk\nCODE:\n```\nreferenced_prolog_library_(Library,Path)\n```\n\n----------------------------------------\n\nTITLE: Included Library Storage\nDESCRIPTION: Dynamic private predicate for storing included Logtalk libraries in the diagram.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/library_diagram_1.rst.txt#2025-04-06_snippet_4\n\nLANGUAGE: logtalk\nCODE:\n```\nincluded_library_(Library,Path)\n```\n\n----------------------------------------\n\nTITLE: Database Manipulation Predicates in Logtalk\nDESCRIPTION: Built-in predicates for asserting, retracting, and querying the Logtalk/Prolog database.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/coding/subethaedit2/Logtalk.mode/Contents/Resources/AutocompleteAdditions.txt#2025-04-06_snippet_6\n\nLANGUAGE: logtalk\nCODE:\n```\nasserta()\nassertz()\nclause(, )\nretract()\nretractall()\nabolish()\n```\n\n----------------------------------------\n\nTITLE: Using map/7 Metapredicate in Logtalk\nDESCRIPTION: Applies a closure to elements from multiple lists. The predicate operates with a 7-arity closure and takes multiple lists as arguments. It has a static compilation flag and supports multiple proof scenarios.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/metap_0.rst.txt#2025-04-06_snippet_8\n\nLANGUAGE: logtalk\nCODE:\n```\nmap(Closure,List1,List2,List3,List4,List5,List6,List7)\n```\n\n----------------------------------------\n\nTITLE: Check Logtalk Lexer Support Command\nDESCRIPTION: Command to verify Pygments' built-in support for Logtalk syntax highlighting\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/coding/pygments/NOTES.md#2025-04-06_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ pygmentize -H lexer Logtalk\n```\n\n----------------------------------------\n\nTITLE: Convert Dictionary to Term\nDESCRIPTION: Creates a curly-bracketed term representation from a nested dictionary.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/nested_dictionary_protocol_0.rst.txt#2025-04-06_snippet_3\n\nLANGUAGE: logtalk\nCODE:\n```\nas_curly_bracketed(Dictionary,Term)\n```\n\n----------------------------------------\n\nTITLE: Running a Theorem Proving Example with FCube in Logtalk\nDESCRIPTION: Example of using the FCube theorem prover to decide the validity of a logical formula and generate a counter-model if the formula is not valid. The example uses the decide/2 predicate from the fcube object.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/ports/fcube/SCRIPT.txt#2025-04-06_snippet_2\n\nLANGUAGE: logtalk\nCODE:\n```\n| ?- fcube::decide((((a && b) => c) <=> ((a => c) v (b => c))), CounterModel).\n```\n\n----------------------------------------\n\nTITLE: Defining min_max/3 Predicate for Number Lists in Logtalk\nDESCRIPTION: Determines both the minimum and maximum values in a list of numbers using arithmetic order. Fails if the list is empty.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/numberlistp_0.rst.txt#2025-04-06_snippet_2\n\nLANGUAGE: Logtalk\nCODE:\n```\nmin_max(List,Minimum,Maximum)\n```\n\n----------------------------------------\n\nTITLE: Implementing Sleep Functionality in Logtalk\nDESCRIPTION: Suspends execution for the given number of seconds.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/osp_0.rst.txt#2025-04-06_snippet_21\n\nLANGUAGE: prolog\nCODE:\n```\nsleep(Seconds)\n```\n\n----------------------------------------\n\nTITLE: Defining Pack Description in Logtalk\nDESCRIPTION: Provides a one-line description of the pack. This predicate is expected to return a single atom containing the pack description.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/pack_protocol_0.rst.txt#2025-04-06_snippet_1\n\nLANGUAGE: Logtalk\nCODE:\n```\ndescription(Description)\n```\n\n----------------------------------------\n\nTITLE: Validating Term Types in Logtalk\nDESCRIPTION: The 'valid/2' predicate checks if a given term conforms to a specified type and fails silently if not. It's used for non-throwing type validation.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/type_0.rst.txt#2025-04-06_snippet_0\n\nLANGUAGE: Logtalk\nCODE:\n```\nvalid(Type,Term)\n```\n\n----------------------------------------\n\nTITLE: Processing Multiple Files with files/1 in Logtalk\nDESCRIPTION: A simplified version of files/2 that uses default options for processing a list of Prolog files.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/wrapper_0.rst.txt#2025-04-06_snippet_7\n\nLANGUAGE: Logtalk\nCODE:\n```\nfiles/1\n```\n\n----------------------------------------\n\nTITLE: Defining Sphinx Documentation Structure for Logtalk APIs\nDESCRIPTION: Sphinx toctree directive configuration that sets up the documentation hierarchy and navigation structure for Logtalk APIs. Includes maxdepth setting of 3 and links to various index pages.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/docs/_sources/index.rst.txt#2025-04-06_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. toctree::\n   :maxdepth: 3\n   :caption: Contents\n\n   library_index\n   directory_index\n   entity_index\n   predicate_index\n```\n\n----------------------------------------\n\nTITLE: Defining a Category in Logtalk3\nDESCRIPTION: This snippet demonstrates how to define a category in Logtalk3. The category implements a protocol and extends another category, showcasing the hierarchical nature of Logtalk's category system.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/coding/subethaedit4/Logtalk.seemode/Contents/Resources/ExampleSyntax.txt#2025-04-06_snippet_7\n\nLANGUAGE: Logtalk\nCODE:\n```\n:- category(category,\n\timplements(protocol),\n\textends(other_category)).\n\n:- end_category.\n```\n\n----------------------------------------\n\nTITLE: Module-related Directives in Logtalk3\nDESCRIPTION: This snippet demonstrates various module-related directives in Logtalk3. It includes module definition, use_module directives, reexport directives, and an export directive, showcasing Logtalk's interoperability with Prolog modules.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/coding/subethaedit4/Logtalk.seemode/Contents/Resources/ExampleSyntax.txt#2025-04-06_snippet_9\n\nLANGUAGE: Logtalk\nCODE:\n```\n:- module(module, [foo/1, bar/2]).\n\n:- use_module(library).\n:- use_module(library, [baz/3]).\n\n:- reexport(library).\n:- reexport(library, [qux/4]).\n\n:- export(quux/5).\n```\n\n----------------------------------------\n\nTITLE: Decoding Base64 to Text in Logtalk\nDESCRIPTION: These examples show how to decode Base64 data back into text using the base64::parse/2 predicate, with input as an atom and as a list of chars.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/library/base64/NOTES.md#2025-04-06_snippet_4\n\nLANGUAGE: Prolog\nCODE:\n```\n| ?- base64::parse(atom('SGVsbG8gd29ybGQh'), Bytes),\n     atom_codes(Atom, Bytes).\nAtom = 'Hello world!'\nBytes = [72,101,108,108,111,32,119,111,114,108,100,33]\nyes\n\n| ?- base64::parse(chars(['S','G','V',s,b,'G','8',g,d,'2','9',y,b,'G','Q',h]), Bytes),\n     atom_codes(Atom, Bytes).\nAtom = 'Hello world!'\nBytes = [72,101,108,108,111,32,119,111,114,108,100,33]\nyes\n```\n\n----------------------------------------\n\nTITLE: Logtalk Loading Context Flag Access\nDESCRIPTION: Added flags key to logtalk_load_context/2 built-in predicate for accessing compilation flags of source files\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/RELEASE_NOTES.md#2025-04-06_snippet_85\n\nLANGUAGE: Logtalk\nCODE:\n```\nlogtalk_load_context(flags, Flags)\n```\n\n----------------------------------------\n\nTITLE: New Prolog Feature Predicate\nDESCRIPTION: Definition of a new predicate '$lgt_prolog_feature'/2 added to all config files for representing backend Prolog supported features.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/RELEASE_NOTES.md#2025-04-06_snippet_137\n\nLANGUAGE: Prolog\nCODE:\n```\n'$lgt_prolog_feature'/2\n```\n\n----------------------------------------\n\nTITLE: Checking PowerShell version in Logtalk scripts\nDESCRIPTION: Updates all PowerShell tool scripts to check for and require version 7.2 or later.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/RELEASE_NOTES.md#2025-04-06_snippet_17\n\nLANGUAGE: PowerShell\nCODE:\n```\nif ($PSVersionTable.PSVersion.Major -lt 7 -or ($PSVersionTable.PSVersion.Major -eq 7 -and $PSVersionTable.PSVersion.Minor -lt 2)) {\n    Write-Host \"Error: This script requires PowerShell version 7.2 or later.\"\n    exit 1\n}\n```\n\n----------------------------------------\n\nTITLE: Logtalk Compiler Directive Example\nDESCRIPTION: Example showing the expanded clause/3 method support to allow unbound first two arguments when third argument is bound, following de facto standard\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/RELEASE_NOTES.md#2025-04-06_snippet_25\n\nLANGUAGE: Logtalk\nCODE:\n```\nclause(Head, Body, Ref)\n```\n\n----------------------------------------\n\nTITLE: Testing Metagol Port in Logtalk\nDESCRIPTION: Command to load and run tests for the Metagol port predicates using the tester.lgt file.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/manuals/_sources/ports/metagol.rst.txt#2025-04-06_snippet_1\n\nLANGUAGE: Logtalk\nCODE:\n```\n| ?- logtalk_load(metagol(tester)).\n```\n\n----------------------------------------\n\nTITLE: Running Individual Test Sets with SWI-Prolog\nDESCRIPTION: Series of commands showing how to run specific test sets for different Logtalk components including core tests, Prolog tests, tools, examples, and contributions.\nSOURCE: https://github.com/LogtalkDotOrg/logtalk3/blob/master/tests/NOTES.md#2025-04-06_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ cd $LOGTALKUSER/tests/logtalk\n$ logtalk_tester -p swi\n...\n\n$ cd $LOGTALKUSER/tests/prolog\n$ logtalk_tester -p swi\n...\n\n$ cd $LOGTALKUSER/tools\n$ logtalk_tester -p swi\n...\n\n$ cd $LOGTALKUSER/examples\n$ logtalk_tester -p swi\n...\n\n$ cd $LOGTALKUSER/contributions\n$ logtalk_tester -p swi\n```"
  }
]