[
  {
    "owner": "navideck",
    "repo": "universal_ble",
    "content": "TITLE: Scanning for BLE Devices in Dart\nDESCRIPTION: This snippet shows how to set up a scan result handler, start scanning for BLE devices with optional filters, and stop scanning using UniversalBLE.\nSOURCE: https://github.com/navideck/universal_ble/blob/main/README.md#2025-04-22_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\n// Set a scan result handler\nUniversalBle.onScanResult = (bleDevice) {\n  // e.g. Use BleDevice ID to connect\n}\n\n// Perform a scan\nUniversalBle.startScan();\n\n// Or optionally add a scan filter\nUniversalBle.startScan(\n  scanFilter: ScanFilter(\n    withServices: [\"SERVICE_UUID\"],\n    withManufacturerData: [ManufacturerDataFilter(companyIdentifier: 0x004c)],\n    withNamePrefix: [\"NAME_PREFIX\"],\n  )\n);\n\n// Stop scanning\nUniversalBle.stopScan();\n```\n\n----------------------------------------\n\nTITLE: Reading and Writing BLE Data in Dart\nDESCRIPTION: This code demonstrates how to read from and write to BLE characteristics, subscribe to notifications, and handle value changes using UniversalBLE.\nSOURCE: https://github.com/navideck/universal_ble/blob/main/README.md#2025-04-22_snippet_7\n\nLANGUAGE: dart\nCODE:\n```\n// Read data from a characteristic\nUniversalBle.readValue(deviceId, serviceId, characteristicId);\n\n// Write data to a characteristic\nUniversalBle.writeValue(deviceId, serviceId, characteristicId, value);\n\n// Subscribe to a characteristic\nUniversalBle.setNotifiable(deviceId, serviceId, characteristicId, BleInputProperty.notification);\n\n// Get characteristic updates in `onValueChange`\nUniversalBle.onValueChange = (String deviceId, String characteristicId, Uint8List value) {\n  debugPrint('onValueChange $deviceId, $characteristicId, ${hex.encode(value)}');\n}\n\n// Unsubscribe from a characteristic\nUniversalBle.setNotifiable(deviceId, serviceId, characteristicId, BleInputProperty.disabled);\n```\n\n----------------------------------------\n\nTITLE: Connecting to BLE Devices in Dart\nDESCRIPTION: This code demonstrates how to connect to a BLE device, disconnect from it, and handle connection state changes using UniversalBLE.\nSOURCE: https://github.com/navideck/universal_ble/blob/main/README.md#2025-04-22_snippet_5\n\nLANGUAGE: dart\nCODE:\n```\n// Connect to a device using the `deviceId` of the BleDevice received from `UniversalBle.onScanResult`\nString deviceId = bleDevice.deviceId;\nUniversalBle.connect(deviceId);\n\n// Disconnect from a device\nUniversalBle.disconnect(deviceId);\n\n// Get connection/disconnection updates\nUniversalBle.onConnectionChange = (String deviceId, bool isConnected, String? error) {\n  debugPrint('OnConnectionChange $deviceId, $isConnected Error: $error');\n}\n\n// Get current connection state\n// Can be connected, disconnected, connecting or disconnecting\nBleConnectionState connectionState = await bleDevice.connectionState;\n```\n\n----------------------------------------\n\nTITLE: Checking Bluetooth Availability in Dart\nDESCRIPTION: This code demonstrates how to check Bluetooth availability before scanning and listen for availability changes using UniversalBLE.\nSOURCE: https://github.com/navideck/universal_ble/blob/main/README.md#2025-04-22_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nAvailabilityState state = await UniversalBle.getBluetoothAvailabilityState();\n// Start scan only if Bluetooth is powered on\nif (state == AvailabilityState.poweredOn) {\n  UniversalBle.startScan();\n}\n\n// Or listen to bluetooth availability changes\nUniversalBle.onAvailabilityChange = (state) {\n  if (state == AvailabilityState.poweredOn) {\n    UniversalBle.startScan();\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Managing Bluetooth Availability in Dart\nDESCRIPTION: This code demonstrates how to check Bluetooth availability, handle availability changes, and enable/disable Bluetooth programmatically using UniversalBLE.\nSOURCE: https://github.com/navideck/universal_ble/blob/main/README.md#2025-04-22_snippet_9\n\nLANGUAGE: dart\nCODE:\n```\n// Get current Bluetooth availability state\nAvailabilityState availabilityState = UniversalBle.getBluetoothAvailabilityState(); // e.g. poweredOff or poweredOn,\n\n// Receive Bluetooth availability changes\nUniversalBle.onAvailabilityChange = (state) {\n  // Handle the new Bluetooth availability state\n};\n\n// Enable Bluetooth programmatically\nUniversalBle.enableBluetooth();\n\n// Disable Bluetooth programmatically\nUniversalBle.disableBluetooth();\n```\n\n----------------------------------------\n\nTITLE: Pairing BLE Devices in Dart\nDESCRIPTION: This snippet shows how to initiate pairing, check pairing status, and handle pairing state changes for BLE devices using UniversalBLE across different platforms.\nSOURCE: https://github.com/navideck/universal_ble/blob/main/README.md#2025-04-22_snippet_8\n\nLANGUAGE: dart\nCODE:\n```\n// Pair on Android, Windows, Linux\nawait UniversalBle.pair(deviceId);\n\n// Pair on Apple and web with encrypted characteristic\nUniversalBle.pair(deviceId, pairingCommand: BleCommand(service:\"SERVICE\", characteristic:\"ENCRYPTED_CHARACTERISTIC\"));\n\n// Check current pairing state\nbool? isPaired = UniversalBle.isPaired(deviceId);\n\n// Handle pairing state changes\nUniversalBle.onPairingStateChange = (String deviceId, bool isPaired) {\n  // Handle pairing state change\n}\n\n// Unpair\nUniversalBle.unpair(deviceId);\n```\n\n----------------------------------------\n\nTITLE: Importing UniversalBLE in Dart\nDESCRIPTION: This code demonstrates how to import the UniversalBLE package in a Dart file to use its functionality.\nSOURCE: https://github.com/navideck/universal_ble/blob/main/README.md#2025-04-22_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:universal_ble/universal_ble.dart';\n```\n\n----------------------------------------\n\nTITLE: Adding UniversalBLE Dependency in Flutter\nDESCRIPTION: This snippet shows how to add the universal_ble package as a dependency in a Flutter project's pubspec.yaml file.\nSOURCE: https://github.com/navideck/universal_ble/blob/main/README.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ndependencies:\n  universal_ble:\n```\n\n----------------------------------------\n\nTITLE: Requesting MTU for BLE Connection in Dart\nDESCRIPTION: This snippet shows how to request a specific Maximum Transmission Unit (MTU) for a BLE connection using UniversalBLE, noting that the actual MTU may differ due to platform limitations.\nSOURCE: https://github.com/navideck/universal_ble/blob/main/README.md#2025-04-22_snippet_10\n\nLANGUAGE: dart\nCODE:\n```\nint mtu = await UniversalBle.requestMtu(widget.deviceId, 247);\n```\n\n----------------------------------------\n\nTITLE: Getting System Devices in Dart\nDESCRIPTION: This snippet shows how to retrieve already connected BLE devices using UniversalBLE, which is useful for devices connected through previous sessions or system settings.\nSOURCE: https://github.com/navideck/universal_ble/blob/main/README.md#2025-04-22_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\n// Get already connected devices.\n// You can set `withServices` to narrow down the results.\n// On `Apple`, `withServices` is required to get any connected devices. If not passed, several [18XX] generic services will be set by default.\nList<BleDevice> devices = await UniversalBle.getSystemDevices(withServices: []);\n```\n\n----------------------------------------\n\nTITLE: Adding Android Bluetooth Permissions to AndroidManifest.xml\nDESCRIPTION: Configures the required Bluetooth permissions in the Android manifest file, handling different permission requirements across Android SDK versions.\nSOURCE: https://github.com/navideck/universal_ble/blob/main/README.md#2025-04-22_snippet_18\n\nLANGUAGE: xml\nCODE:\n```\n<uses-permission android:name=\"android.permission.BLUETOOTH_CONNECT\" />\\n<uses-permission android:name=\"android.permission.BLUETOOTH\" android:maxSdkVersion=\"30\" />\\n<uses-permission android:name=\"android.permission.BLUETOOTH_ADMIN\" android:maxSdkVersion=\"30\" />\\n<uses-permission android:name=\"android.permission.ACCESS_COARSE_LOCATION\" android:maxSdkVersion=\"28\" />\\n<uses-permission android:name=\"android.permission.ACCESS_FINE_LOCATION\" android:maxSdkVersion=\"30\" />\\n<uses-permission android:name=\"android.permission.BLUETOOTH_SCAN\" android:usesPermissionFlags=\"neverForLocation\" />\n```\n\n----------------------------------------\n\nTITLE: Adding Android Location Permissions for iBeacons\nDESCRIPTION: Alternative permission configuration for Android apps that use iBeacons or BLUETOOTH_SCAN for location determination, requiring more extensive location access.\nSOURCE: https://github.com/navideck/universal_ble/blob/main/README.md#2025-04-22_snippet_19\n\nLANGUAGE: xml\nCODE:\n```\n<uses-permission android:name=\"android.permission.ACCESS_FINE_LOCATION\" />\\n<uses-permission android:name=\"android.permission.BLUETOOTH_SCAN\" />\n```\n\n----------------------------------------\n\nTITLE: Discovering BLE Services in Dart\nDESCRIPTION: This snippet shows how to discover services for a connected BLE device using UniversalBLE.\nSOURCE: https://github.com/navideck/universal_ble/blob/main/README.md#2025-04-22_snippet_6\n\nLANGUAGE: dart\nCODE:\n```\n// Discover services of a specific device\nUniversalBle.discoverServices(deviceId);\n```\n\n----------------------------------------\n\nTITLE: Configuring Command Timeout in UniversalBLE\nDESCRIPTION: Sets the timeout duration for all BLE commands. The default is 10 seconds, but this can be customized or disabled entirely by setting the timeout to null.\nSOURCE: https://github.com/navideck/universal_ble/blob/main/README.md#2025-04-22_snippet_14\n\nLANGUAGE: dart\nCODE:\n```\n// Change timeout\\nUniversalBle.timeout = const Duration(seconds: 10);\\n\\n// Disable timeout\\nUniversalBle.timeout = null;\n```\n\n----------------------------------------\n\nTITLE: Configuring Per-Device Command Queue in UniversalBLE\nDESCRIPTION: Sets the queue type to create separate queues for each device, allowing commands to be executed in parallel across different devices while maintaining sequential execution for each individual device.\nSOURCE: https://github.com/navideck/universal_ble/blob/main/README.md#2025-04-22_snippet_11\n\nLANGUAGE: dart\nCODE:\n```\n// Create a separate queue for each device.\\nUniversalBle.queueType = QueueType.perDevice;\n```\n\n----------------------------------------\n\nTITLE: Setting Queue Update Callback in UniversalBLE\nDESCRIPTION: Configures a callback function to receive updates about the command queue state, providing the queue identifier and number of remaining items for monitoring queue progress.\nSOURCE: https://github.com/navideck/universal_ble/blob/main/README.md#2025-04-22_snippet_13\n\nLANGUAGE: dart\nCODE:\n```\n// Get queue state updates\\nUniversalBle.onQueueUpdate = (String id, int remainingItems) {\\n  debugPrint(\"Queue: $id Remaining: $remainingItems\");\\n};\n```\n\n----------------------------------------\n\nTITLE: Disabling Command Queue in UniversalBLE\nDESCRIPTION: Disables the command queue completely to allow all commands to execute in parallel, even for the same device. This is not recommended for platforms like Android that may struggle with rapid consecutive commands.\nSOURCE: https://github.com/navideck/universal_ble/blob/main/README.md#2025-04-22_snippet_12\n\nLANGUAGE: dart\nCODE:\n```\n// Disable queue\\nUniversalBle.queueType = QueueType.none;\n```\n\n----------------------------------------\n\nTITLE: Converting String to 128-bit UUID Format\nDESCRIPTION: Uses the BleUuidParser.string() utility method to convert any UUID string format (short or long) to the standardized 128-bit UUID format in lowercase.\nSOURCE: https://github.com/navideck/universal_ble/blob/main/README.md#2025-04-22_snippet_15\n\nLANGUAGE: dart\nCODE:\n```\nBleUuidParser.string(\"180A\"); // \"0000180a-0000-1000-8000-00805f9b34fb\"\\n\\nBleUuidParser.string(\"0000180A-0000-1000-8000-00805F9B34FB\"); // \"0000180a-0000-1000-8000-00805f9b34fb\"\n```\n\n----------------------------------------\n\nTITLE: Comparing Different UUID Formats\nDESCRIPTION: Uses the BleUuidParser.compare() utility method to check if two differently formatted UUIDs (different cases, short/long formats) represent the same UUID.\nSOURCE: https://github.com/navideck/universal_ble/blob/main/README.md#2025-04-22_snippet_17\n\nLANGUAGE: dart\nCODE:\n```\nBleUuidParser.compare(\"180a\",\"0000180A-0000-1000-8000-00805F9B34FB\"); // true\n```\n\n----------------------------------------\n\nTITLE: Converting Number to 128-bit UUID Format\nDESCRIPTION: Uses the BleUuidParser.number() utility method to convert a numeric UUID representation to the standardized 128-bit UUID format string.\nSOURCE: https://github.com/navideck/universal_ble/blob/main/README.md#2025-04-22_snippet_16\n\nLANGUAGE: dart\nCODE:\n```\nBleUuidParser.number(0x180A); // \"0000180a-0000-1000-8000-00805f9b34fb\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Web Service Access in UniversalBLE\nDESCRIPTION: Sets up the scan filter with required services for web platform scanning, which is necessary to ensure access to those services after connecting to a device.\nSOURCE: https://github.com/navideck/universal_ble/blob/main/README.md#2025-04-22_snippet_20\n\nLANGUAGE: dart\nCODE:\n```\nScanFilter(\\n  withServices: kIsWeb ?  [\"SERVICE_UUID\"] : [],\\n)\n```\n\n----------------------------------------\n\nTITLE: Using PlatformConfig for Web Optional Services\nDESCRIPTION: Configures optional services for web platform access without applying them as scan filters, allowing more flexible service access after connection.\nSOURCE: https://github.com/navideck/universal_ble/blob/main/README.md#2025-04-22_snippet_21\n\nLANGUAGE: dart\nCODE:\n```\nUniversalBle.startScan(\\n  platformConfig: PlatformConfig(\\n    web: WebOptions(\\n      optionalServices: [\"SERVICE_UUID\"]\\n    )\\n  )\\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Linux Snap Package for Bluetooth Access\nDESCRIPTION: Adds the required 'bluez' plug declaration in the snapcraft.yaml file for Linux applications packaged as snaps to enable Bluetooth functionality.\nSOURCE: https://github.com/navideck/universal_ble/blob/main/README.md#2025-04-22_snippet_23\n\nLANGUAGE: xml\nCODE:\n```\n...\\n  plugs:\\n    - bluez\n```\n\n----------------------------------------\n\nTITLE: Configuring Windows Flutter Application in CMake\nDESCRIPTION: This CMake script configures the build process for a Windows Flutter application. It defines the executable target with required source files, applies standard build settings, adds version information as preprocessor definitions, disables problematic Windows macros, and links necessary libraries including Flutter dependencies.\nSOURCE: https://github.com/navideck/universal_ble/blob/main/example/windows/runner/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.14)\nproject(runner LANGUAGES CXX)\n\n# Define the application target. To change its name, change BINARY_NAME in the\n# top-level CMakeLists.txt, not the value here, or `flutter run` will no longer\n# work.\n#\n# Any new source files that you add to the application should be added here.\nadd_executable(${BINARY_NAME} WIN32\n  \"flutter_window.cpp\"\n  \"main.cpp\"\n  \"utils.cpp\"\n  \"win32_window.cpp\"\n  \"${FLUTTER_MANAGED_DIR}/generated_plugin_registrant.cc\"\n  \"Runner.rc\"\n  \"runner.exe.manifest\"\n)\n\n# Apply the standard set of build settings. This can be removed for applications\n# that need different build settings.\napply_standard_settings(${BINARY_NAME})\n\n# Add preprocessor definitions for the build version.\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"FLUTTER_VERSION=\\\"${FLUTTER_VERSION}\\\"\")\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"FLUTTER_VERSION_MAJOR=${FLUTTER_VERSION_MAJOR}\")\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"FLUTTER_VERSION_MINOR=${FLUTTER_VERSION_MINOR}\")\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"FLUTTER_VERSION_PATCH=${FLUTTER_VERSION_PATCH}\")\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"FLUTTER_VERSION_BUILD=${FLUTTER_VERSION_BUILD}\")\n\n# Disable Windows macros that collide with C++ standard library functions.\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"NOMINMAX\")\n\n# Add dependency libraries and include directories. Add any application-specific\n# dependencies here.\ntarget_link_libraries(${BINARY_NAME} PRIVATE flutter flutter_wrapper_app)\ntarget_link_libraries(${BINARY_NAME} PRIVATE \"dwmapi.lib\")\ntarget_include_directories(${BINARY_NAME} PRIVATE \"${CMAKE_SOURCE_DIR}\")\n\n# Run the Flutter tool portions of the build. This must not be removed.\nadd_dependencies(${BINARY_NAME} flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Creating Custom UniversalBLE Platform Implementation\nDESCRIPTION: Demonstrates how to create and set a custom platform implementation for UniversalBLE, which can be useful for testing or extending platform-specific functionality.\nSOURCE: https://github.com/navideck/universal_ble/blob/main/README.md#2025-04-22_snippet_22\n\nLANGUAGE: dart\nCODE:\n```\n// Create a class that extends UniversalBlePlatform\\nclass UniversalBleMock extends UniversalBlePlatform {\\n  // Implement all commands\\n}\\n\\nUniversalBle.setInstance(UniversalBleMock());\n```\n\n----------------------------------------\n\nTITLE: Setting up Universal BLE CMake Project Configuration\nDESCRIPTION: Initializes the CMake project with version requirements, project name, and basic configuration settings. Sets up the project language and policy requirements along with important version variables.\nSOURCE: https://github.com/navideck/universal_ble/blob/main/windows/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.21)\nset(PROJECT_NAME \"universal_ble\")\nproject(${PROJECT_NAME} LANGUAGES CXX)\ncmake_policy(VERSION 3.14...3.25)\ninclude(FetchContent)\nset(CPPWINRT_VERSION \"2.0.220418.1\")\nset(PLUGIN_NAME \"universal_ble_plugin\")\n```\n\n----------------------------------------\n\nTITLE: Configuring NuGet Installation for Windows Dependencies\nDESCRIPTION: Sets up NuGet package manager for downloading and installing Windows-specific dependencies. This section downloads the NuGet executable if not found and installs the Microsoft.Windows.CppWinRT package at the specified version.\nSOURCE: https://github.com/navideck/universal_ble/blob/main/windows/CMakeLists.txt#2025-04-22_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\n# ############### NuGet intall begin ################\nFetchContent_Declare(nuget\n  URL \"https://dist.nuget.org/win-x86-commandline/v6.0.0/nuget.exe\"\n  URL_HASH SHA256=04eb6c4fe4213907e2773e1be1bbbd730e9a655a3c9c58387ce8d4a714a5b9e1\n  DOWNLOAD_NO_EXTRACT true\n)\n\nfind_program(NUGET nuget)\n\nif(NOT NUGET)\n  # message(\"Nuget.exe not found, trying to download or use cached version.\")\n  FetchContent_MakeAvailable(nuget)\n  set(NUGET ${nuget_SOURCE_DIR}/nuget.exe)\nendif()\n\nexecute_process(COMMAND\n  ${NUGET} install \"Microsoft.Windows.CppWinRT\" -Version ${CPPWINRT_VERSION} -OutputDirectory packages\n  WORKING_DIRECTORY ${CMAKE_BINARY_DIR}\n  RESULT_VARIABLE ret)\n\nif(NOT ret EQUAL 0)\n  message(FATAL_ERROR \"Failed to install nuget package Microsoft.Windows.CppWinRT.${CPPWINRT_VERSION}\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Defining Plugin Source Files\nDESCRIPTION: Creates a list of all source files required for the Universal BLE plugin. Includes core implementation files, helper utilities, generated code, and specialized components for BLE functionality.\nSOURCE: https://github.com/navideck/universal_ble/blob/main/windows/CMakeLists.txt#2025-04-22_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nlist(APPEND PLUGIN_SOURCES\n  \"src/universal_ble_plugin.cpp\"\n  \"src/universal_ble_plugin.h\"\n  \"src/helper/universal_enum.h\"\n  \"src/helper/universal_ble_base.h\"\n  \"src/helper/utils.cpp\"\n  \"src/helper/utils.h\"\n  \"src/ui_thread_handler.hpp\"\n  \"src/generated/universal_ble.g.cpp\"\n  \"src/generated/universal_ble.g.h\"\n  \"src/pin_entry.h\"\n  \"src/universal_ble_filter_util.cpp\"\n  \"src/universal_ble_filter_util.h\"\n  \"src/universal_ble_thread_safe.h\"\n  \"src/enum_parser.h\"\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Shared Library Target\nDESCRIPTION: Defines the plugin as a shared library target, including C API header and implementation files. Applies standard settings to the target and sets up visibility properties for the library.\nSOURCE: https://github.com/navideck/universal_ble/blob/main/windows/CMakeLists.txt#2025-04-22_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library(${PLUGIN_NAME} SHARED\n  \"include/universal_ble/universal_ble_plugin_c_api.h\"\n  \"universal_ble_plugin_c_api.cpp\"\n  ${PLUGIN_SOURCES}\n)\n\napply_standard_settings(${PLUGIN_NAME})\n```\n\n----------------------------------------\n\nTITLE: Importing NuGet Dependencies\nDESCRIPTION: Sets up property imports for the Windows Runtime C++ dependency (CppWinRT). Configures project properties to use the NuGet packages installed earlier and links the target with the appropriate libraries.\nSOURCE: https://github.com/navideck/universal_ble/blob/main/windows/CMakeLists.txt#2025-04-22_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\n# ############### NuGet import begin ################\nset_target_properties(${PLUGIN_NAME} PROPERTIES VS_PROJECT_IMPORT\n  ${CMAKE_BINARY_DIR}/packages/Microsoft.Windows.CppWinRT.${CPPWINRT_VERSION}/build/native/Microsoft.Windows.CppWinRT.props\n)\n\ntarget_link_libraries(${PLUGIN_NAME} PRIVATE\n  ${CMAKE_BINARY_DIR}/packages/Microsoft.Windows.CppWinRT.${CPPWINRT_VERSION}/build/native/Microsoft.Windows.CppWinRT.targets\n)\n```\n\n----------------------------------------\n\nTITLE: Finalizing Plugin Target Configuration\nDESCRIPTION: Completes the plugin configuration by setting visibility presets, compiler definitions, include directories, and linking with Flutter dependencies. Sets up an empty list for bundled libraries.\nSOURCE: https://github.com/navideck/universal_ble/blob/main/windows/CMakeLists.txt#2025-04-22_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\nset_target_properties(${PLUGIN_NAME} PROPERTIES\n  CXX_VISIBILITY_PRESET hidden)\ntarget_compile_definitions(${PLUGIN_NAME} PRIVATE FLUTTER_PLUGIN_IMPL)\n\ntarget_include_directories(${PLUGIN_NAME} INTERFACE\n  \"${CMAKE_CURRENT_SOURCE_DIR}/include\")\ntarget_link_libraries(${PLUGIN_NAME} PRIVATE flutter flutter_wrapper_plugin)\n\nset(universal_ble_bundled_libraries\n  \"\"\n  PARENT_SCOPE\n)\n```\n\n----------------------------------------\n\nTITLE: Initializing Project Configuration with CMake for Universal BLE Example\nDESCRIPTION: Sets up the basic project configuration including project name, required CMake version, and executable name. This defines the foundation for the build system.\nSOURCE: https://github.com/navideck/universal_ble/blob/main/example/windows/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\n# Project-level configuration.\ncmake_minimum_required(VERSION 3.14)\nproject(universal_ble_example LANGUAGES CXX)\n\n# The name of the executable created for the application. Change this to change\n# the on-disk name of your application.\nset(BINARY_NAME \"universal_ble_example\")\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake Policies and Build Types\nDESCRIPTION: Sets modern CMake behavior and defines build configuration types (Debug, Profile, Release). This ensures proper configuration based on whether a multi-config generator is used.\nSOURCE: https://github.com/navideck/universal_ble/blob/main/example/windows/CMakeLists.txt#2025-04-22_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\n# Explicitly opt in to modern CMake behaviors to avoid warnings with recent\n# versions of CMake.\ncmake_policy(VERSION 3.14...3.25)\n\n# Define build configuration option.\nget_property(IS_MULTICONFIG GLOBAL PROPERTY GENERATOR_IS_MULTI_CONFIG)\nif(IS_MULTICONFIG)\n  set(CMAKE_CONFIGURATION_TYPES \"Debug;Profile;Release\"\n    CACHE STRING \"\" FORCE)\nelse()\n  if(NOT CMAKE_BUILD_TYPE AND NOT CMAKE_CONFIGURATION_TYPES)\n    set(CMAKE_BUILD_TYPE \"Debug\" CACHE\n      STRING \"Flutter build mode\" FORCE)\n    set_property(CACHE CMAKE_BUILD_TYPE PROPERTY STRINGS\n      \"Debug\" \"Profile\" \"Release\")\n  endif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting Up Flutter Tool Backend with Custom Command\nDESCRIPTION: Defines a custom command that runs the Flutter tool backend to generate necessary libraries and headers. Uses a _phony_ target to ensure the command runs on each build.\nSOURCE: https://github.com/navideck/universal_ble/blob/main/example/linux/flutter/CMakeLists.txt#2025-04-22_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nadd_custom_command(\n  OUTPUT ${FLUTTER_LIBRARY} ${FLUTTER_LIBRARY_HEADERS}\n    ${CMAKE_CURRENT_BINARY_DIR}/_phony_\n  COMMAND ${CMAKE_COMMAND} -E env\n    ${FLUTTER_TOOL_ENVIRONMENT}\n    \"${FLUTTER_ROOT}/packages/flutter_tools/bin/tool_backend.sh\"\n      ${FLUTTER_TARGET_PLATFORM} ${CMAKE_BUILD_TYPE}\n  VERBATIM\n)\nadd_custom_target(flutter_assemble DEPENDS\n  \"${FLUTTER_LIBRARY}\"\n  ${FLUTTER_LIBRARY_HEADERS}\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Profile Build Mode Flags for Universal BLE\nDESCRIPTION: Configures linker and compiler flags for the Profile build mode to match Release settings. This ensures performance-optimized builds with profiling capabilities.\nSOURCE: https://github.com/navideck/universal_ble/blob/main/example/windows/CMakeLists.txt#2025-04-22_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\n# Define settings for the Profile build mode.\nset(CMAKE_EXE_LINKER_FLAGS_PROFILE \"${CMAKE_EXE_LINKER_FLAGS_RELEASE}\")\nset(CMAKE_SHARED_LINKER_FLAGS_PROFILE \"${CMAKE_SHARED_LINKER_FLAGS_RELEASE}\")\nset(CMAKE_C_FLAGS_PROFILE \"${CMAKE_C_FLAGS_RELEASE}\")\nset(CMAKE_CXX_FLAGS_PROFILE \"${CMAKE_CXX_FLAGS_RELEASE}\")\n```\n\n----------------------------------------\n\nTITLE: Configuring Unicode Support and Standard Compilation Settings\nDESCRIPTION: Adds Unicode definitions and defines a function for applying standard compilation settings to targets. This configures C++17 support, warning levels, exception handling, and debug preprocessor definitions.\nSOURCE: https://github.com/navideck/universal_ble/blob/main/example/windows/CMakeLists.txt#2025-04-22_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\n# Use Unicode for all projects.\nadd_definitions(-DUNICODE -D_UNICODE)\n\n# Compilation settings that should be applied to most targets.\n#\n# Be cautious about adding new options here, as plugins use this function by\n# default. In most cases, you should add new options to specific targets instead\n# of modifying this function.\nfunction(APPLY_STANDARD_SETTINGS TARGET)\n  target_compile_features(${TARGET} PUBLIC cxx_std_17)\n  target_compile_options(${TARGET} PRIVATE /W4 /WX /wd\"4100\")\n  target_compile_options(${TARGET} PRIVATE /EHsc)\n  target_compile_definitions(${TARGET} PRIVATE \"_HAS_EXCEPTIONS=0\")\n  target_compile_definitions(${TARGET} PRIVATE \"$<$<CONFIG:Debug>:_DEBUG>\")\nendfunction()\n```\n\n----------------------------------------\n\nTITLE: Setting Up Flutter and Application Build\nDESCRIPTION: Configures Flutter library integration, adds the application build directory, and enables tests. This includes the runner directory and generated plugins for the Universal BLE project.\nSOURCE: https://github.com/navideck/universal_ble/blob/main/example/windows/CMakeLists.txt#2025-04-22_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\n# Flutter library and tool build rules.\nset(FLUTTER_MANAGED_DIR \"${CMAKE_CURRENT_SOURCE_DIR}/flutter\")\nadd_subdirectory(${FLUTTER_MANAGED_DIR})\n\n# Application build; see runner/CMakeLists.txt.\nadd_subdirectory(\"runner\")\n\n# Enable the test target.\nset(include_universal_ble_tests TRUE)\n\n# Generated plugin build rules, which manage building the plugins and adding\n# them to the application.\ninclude(flutter/generated_plugins.cmake)\n```\n\n----------------------------------------\n\nTITLE: Configuring Installation Paths for Universal BLE Example\nDESCRIPTION: Sets up installation directories and default installation prefix. This prepares for the deployment of the application bundle by defining where executables and support files will be installed.\nSOURCE: https://github.com/navideck/universal_ble/blob/main/example/windows/CMakeLists.txt#2025-04-22_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\n# === Installation ===\n# Support files are copied into place next to the executable, so that it can\n# run in place. This is done instead of making a separate bundle (as on Linux)\n# so that building and running from within Visual Studio will work.\nset(BUILD_BUNDLE_DIR \"$<TARGET_FILE_DIR:${BINARY_NAME}>\")\n# Make the \"install\" step default, as it's required to run.\nset(CMAKE_VS_INCLUDE_INSTALL_TO_DEFAULT_BUILD 1)\nif(CMAKE_INSTALL_PREFIX_INITIALIZED_TO_DEFAULT)\n  set(CMAKE_INSTALL_PREFIX \"${BUILD_BUNDLE_DIR}\" CACHE PATH \"...\" FORCE)\nendif()\n\nset(INSTALL_BUNDLE_DATA_DIR \"${CMAKE_INSTALL_PREFIX}/data\")\nset(INSTALL_BUNDLE_LIB_DIR \"${CMAKE_INSTALL_PREFIX}\")\n```\n\n----------------------------------------\n\nTITLE: Installing Universal BLE Application and Runtime Components\nDESCRIPTION: Configures the installation of the application binary, ICU data file, and Flutter library. This ensures all necessary runtime components are properly deployed to their respective directories.\nSOURCE: https://github.com/navideck/universal_ble/blob/main/example/windows/CMakeLists.txt#2025-04-22_snippet_6\n\nLANGUAGE: CMake\nCODE:\n```\ninstall(TARGETS ${BINARY_NAME} RUNTIME DESTINATION \"${CMAKE_INSTALL_PREFIX}\"\n  COMPONENT Runtime)\n\ninstall(FILES \"${FLUTTER_ICU_DATA_FILE}\" DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\"\n  COMPONENT Runtime)\n\ninstall(FILES \"${FLUTTER_LIBRARY}\" DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n  COMPONENT Runtime)\n\nif(PLUGIN_BUNDLED_LIBRARIES)\n  install(FILES \"${PLUGIN_BUNDLED_LIBRARIES}\"\n    DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n    COMPONENT Runtime)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Installing Flutter Assets and AOT Library\nDESCRIPTION: Configures the installation of Flutter assets and AOT library (for non-Debug builds). This ensures clean installation of assets by removing previous versions and properly installing the AOT library for optimized builds.\nSOURCE: https://github.com/navideck/universal_ble/blob/main/example/windows/CMakeLists.txt#2025-04-22_snippet_7\n\nLANGUAGE: CMake\nCODE:\n```\n# Fully re-copy the assets directory on each build to avoid having stale files\n# from a previous install.\nset(FLUTTER_ASSET_DIR_NAME \"flutter_assets\")\ninstall(CODE \"\n  file(REMOVE_RECURSE \\\"${INSTALL_BUNDLE_DATA_DIR}/${FLUTTER_ASSET_DIR_NAME}\\\")\n  \" COMPONENT Runtime)\ninstall(DIRECTORY \"${PROJECT_BUILD_DIR}/${FLUTTER_ASSET_DIR_NAME}\"\n  DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\" COMPONENT Runtime)\n\n# Install the AOT library on non-Debug builds only.\ninstall(FILES \"${AOT_LIBRARY}\" DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\"\n  CONFIGURATIONS Profile;Release\n  COMPONENT Runtime)\n```\n\n----------------------------------------\n\nTITLE: Configuring Flutter Windows Build Environment in CMake\nDESCRIPTION: Sets up the basic CMake environment for Flutter Windows projects. Includes minimum CMake version requirement and loads configuration from the Flutter tool.\nSOURCE: https://github.com/navideck/universal_ble/blob/main/example/windows/flutter/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\n# This file controls Flutter-level build steps. It should not be edited.\ncmake_minimum_required(VERSION 3.14)\n\nset(EPHEMERAL_DIR \"${CMAKE_CURRENT_SOURCE_DIR}/ephemeral\")\n\n# Configuration provided via flutter tool.\ninclude(${EPHEMERAL_DIR}/generated_config.cmake)\n\n# TODO: Move the rest of this into files in ephemeral. See\n# https://github.com/flutter/flutter/issues/57146.\nset(WRAPPER_ROOT \"${EPHEMERAL_DIR}/cpp_client_wrapper\")\n\n# Set fallback configurations for older versions of the flutter tool.\nif (NOT DEFINED FLUTTER_TARGET_PLATFORM)\n  set(FLUTTER_TARGET_PLATFORM \"windows-x64\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Defining Flutter Library Configuration in CMake\nDESCRIPTION: Sets up the Flutter library paths and headers. Publishes paths to parent scope for installation and defines library headers required for building.\nSOURCE: https://github.com/navideck/universal_ble/blob/main/example/windows/flutter/CMakeLists.txt#2025-04-22_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\n# === Flutter Library ===\nset(FLUTTER_LIBRARY \"${EPHEMERAL_DIR}/flutter_windows.dll\")\n\n# Published to parent scope for install step.\nset(FLUTTER_LIBRARY ${FLUTTER_LIBRARY} PARENT_SCOPE)\nset(FLUTTER_ICU_DATA_FILE \"${EPHEMERAL_DIR}/icudtl.dat\" PARENT_SCOPE)\nset(PROJECT_BUILD_DIR \"${PROJECT_DIR}/build/\" PARENT_SCOPE)\nset(AOT_LIBRARY \"${PROJECT_DIR}/build/windows/app.so\" PARENT_SCOPE)\n\nlist(APPEND FLUTTER_LIBRARY_HEADERS\n  \"flutter_export.h\"\n  \"flutter_windows.h\"\n  \"flutter_messenger.h\"\n  \"flutter_plugin_registrar.h\"\n  \"flutter_texture_registrar.h\"\n)\nlist(TRANSFORM FLUTTER_LIBRARY_HEADERS PREPEND \"${EPHEMERAL_DIR}/\")\nadd_library(flutter INTERFACE)\ntarget_include_directories(flutter INTERFACE\n  \"${EPHEMERAL_DIR}\"\n)\ntarget_link_libraries(flutter INTERFACE \"${FLUTTER_LIBRARY}.lib\")\nadd_dependencies(flutter flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Setting Up C++ Wrapper Sources for Flutter in CMake\nDESCRIPTION: Defines the C++ wrapper source files needed for plugins and applications. Groups sources into core, plugin, and app categories.\nSOURCE: https://github.com/navideck/universal_ble/blob/main/example/windows/flutter/CMakeLists.txt#2025-04-22_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\n# === Wrapper ===\nlist(APPEND CPP_WRAPPER_SOURCES_CORE\n  \"core_implementations.cc\"\n  \"standard_codec.cc\"\n)\nlist(TRANSFORM CPP_WRAPPER_SOURCES_CORE PREPEND \"${WRAPPER_ROOT}/\")\nlist(APPEND CPP_WRAPPER_SOURCES_PLUGIN\n  \"plugin_registrar.cc\"\n)\nlist(TRANSFORM CPP_WRAPPER_SOURCES_PLUGIN PREPEND \"${WRAPPER_ROOT}/\")\nlist(APPEND CPP_WRAPPER_SOURCES_APP\n  \"flutter_engine.cc\"\n  \"flutter_view_controller.cc\"\n)\nlist(TRANSFORM CPP_WRAPPER_SOURCES_APP PREPEND \"${WRAPPER_ROOT}/\")\n```\n\n----------------------------------------\n\nTITLE: Creating Flutter Plugin Wrapper Library in CMake\nDESCRIPTION: Defines and configures the static library for Flutter plugin wrappers. Sets compiler options, dependencies, and include directories for plugin development.\nSOURCE: https://github.com/navideck/universal_ble/blob/main/example/windows/flutter/CMakeLists.txt#2025-04-22_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\n# Wrapper sources needed for a plugin.\nadd_library(flutter_wrapper_plugin STATIC\n  ${CPP_WRAPPER_SOURCES_CORE}\n  ${CPP_WRAPPER_SOURCES_PLUGIN}\n)\napply_standard_settings(flutter_wrapper_plugin)\nset_target_properties(flutter_wrapper_plugin PROPERTIES\n  POSITION_INDEPENDENT_CODE ON)\nset_target_properties(flutter_wrapper_plugin PROPERTIES\n  CXX_VISIBILITY_PRESET hidden)\ntarget_link_libraries(flutter_wrapper_plugin PUBLIC flutter)\ntarget_include_directories(flutter_wrapper_plugin PUBLIC\n  \"${WRAPPER_ROOT}/include\"\n)\nadd_dependencies(flutter_wrapper_plugin flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Creating Flutter App Wrapper Library in CMake\nDESCRIPTION: Defines and configures the static library for Flutter application wrappers. Sets dependencies and include directories needed for application development.\nSOURCE: https://github.com/navideck/universal_ble/blob/main/example/windows/flutter/CMakeLists.txt#2025-04-22_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\n# Wrapper sources needed for the runner.\nadd_library(flutter_wrapper_app STATIC\n  ${CPP_WRAPPER_SOURCES_CORE}\n  ${CPP_WRAPPER_SOURCES_APP}\n)\napply_standard_settings(flutter_wrapper_app)\ntarget_link_libraries(flutter_wrapper_app PUBLIC flutter)\ntarget_include_directories(flutter_wrapper_app PUBLIC\n  \"${WRAPPER_ROOT}/include\"\n)\nadd_dependencies(flutter_wrapper_app flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Configuring Flutter Tool Backend Integration in CMake\nDESCRIPTION: Sets up custom commands to run the Flutter tool backend, which generates necessary files. Creates a phony output to ensure the command runs on each build and defines a custom target for assembly.\nSOURCE: https://github.com/navideck/universal_ble/blob/main/example/windows/flutter/CMakeLists.txt#2025-04-22_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\n# === Flutter tool backend ===\n# _phony_ is a non-existent file to force this command to run every time,\n# since currently there's no way to get a full input/output list from the\n# flutter tool.\nset(PHONY_OUTPUT \"${CMAKE_CURRENT_BINARY_DIR}/_phony_\")\nset_source_files_properties(\"${PHONY_OUTPUT}\" PROPERTIES SYMBOLIC TRUE)\nadd_custom_command(\n  OUTPUT ${FLUTTER_LIBRARY} ${FLUTTER_LIBRARY_HEADERS}\n    ${CPP_WRAPPER_SOURCES_CORE} ${CPP_WRAPPER_SOURCES_PLUGIN}\n    ${CPP_WRAPPER_SOURCES_APP}\n    ${PHONY_OUTPUT}\n  COMMAND ${CMAKE_COMMAND} -E env\n    ${FLUTTER_TOOL_ENVIRONMENT}\n    \"${FLUTTER_ROOT}/packages/flutter_tools/bin/tool_backend.bat\"\n      ${FLUTTER_TARGET_PLATFORM} $<CONFIG>\n  VERBATIM\n)\nadd_custom_target(flutter_assemble DEPENDS\n  \"${FLUTTER_LIBRARY}\"\n  ${FLUTTER_LIBRARY_HEADERS}\n  ${CPP_WRAPPER_SOURCES_CORE}\n  ${CPP_WRAPPER_SOURCES_PLUGIN}\n  ${CPP_WRAPPER_SOURCES_APP}\n)\n```\n\n----------------------------------------\n\nTITLE: Defining List Prepend Function in CMake\nDESCRIPTION: A function that prepends a prefix to each element in a list. This serves as a replacement for list(TRANSFORM ... PREPEND ...) which isn't available in CMake 3.10.\nSOURCE: https://github.com/navideck/universal_ble/blob/main/example/linux/flutter/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nfunction(list_prepend LIST_NAME PREFIX)\n    set(NEW_LIST \"\")\n    foreach(element ${${LIST_NAME}})\n        list(APPEND NEW_LIST \"${PREFIX}${element}\")\n    endforeach(element)\n    set(${LIST_NAME} \"${NEW_LIST}\" PARENT_SCOPE)\nendfunction()\n```\n\n----------------------------------------\n\nTITLE: Setting Up System Dependencies for Flutter Linux with PkgConfig\nDESCRIPTION: Configures the required system-level dependencies for Flutter on Linux including GTK, GLIB, and GIO using PkgConfig.\nSOURCE: https://github.com/navideck/universal_ble/blob/main/example/linux/flutter/CMakeLists.txt#2025-04-22_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nfind_package(PkgConfig REQUIRED)\npkg_check_modules(GTK REQUIRED IMPORTED_TARGET gtk+-3.0)\npkg_check_modules(GLIB REQUIRED IMPORTED_TARGET glib-2.0)\npkg_check_modules(GIO REQUIRED IMPORTED_TARGET gio-2.0)\n```\n\n----------------------------------------\n\nTITLE: Defining Flutter Library Headers List in CMake\nDESCRIPTION: Creates a list of Flutter library header files needed for the build process, then prepends the ephemeral directory path to each header file path.\nSOURCE: https://github.com/navideck/universal_ble/blob/main/example/linux/flutter/CMakeLists.txt#2025-04-22_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nlist(APPEND FLUTTER_LIBRARY_HEADERS\n  \"fl_basic_message_channel.h\"\n  \"fl_binary_codec.h\"\n  \"fl_binary_messenger.h\"\n  \"fl_dart_project.h\"\n  \"fl_engine.h\"\n  \"fl_json_message_codec.h\"\n  \"fl_json_method_codec.h\"\n  \"fl_message_codec.h\"\n  \"fl_method_call.h\"\n  \"fl_method_channel.h\"\n  \"fl_method_codec.h\"\n  \"fl_method_response.h\"\n  \"fl_plugin_registrar.h\"\n  \"fl_plugin_registry.h\"\n  \"fl_standard_message_codec.h\"\n  \"fl_standard_method_codec.h\"\n  \"fl_string_codec.h\"\n  \"fl_value.h\"\n  \"fl_view.h\"\n  \"flutter_linux.h\"\n)\nlist_prepend(FLUTTER_LIBRARY_HEADERS \"${EPHEMERAL_DIR}/flutter_linux/\")\n```\n\n----------------------------------------\n\nTITLE: Configuring Flutter Interface Library in CMake\nDESCRIPTION: Creates and configures a Flutter interface library with appropriate include directories and link libraries including GTK, GLIB, and GIO dependencies.\nSOURCE: https://github.com/navideck/universal_ble/blob/main/example/linux/flutter/CMakeLists.txt#2025-04-22_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library(flutter INTERFACE)\ntarget_include_directories(flutter INTERFACE\n  \"${EPHEMERAL_DIR}\"\n)\ntarget_link_libraries(flutter INTERFACE \"${FLUTTER_LIBRARY}\")\ntarget_link_libraries(flutter INTERFACE\n  PkgConfig::GTK\n  PkgConfig::GLIB\n  PkgConfig::GIO\n)\nadd_dependencies(flutter flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake Project for Universal BLE Flutter Application\nDESCRIPTION: This CMake script configures a Flutter Linux application with Universal BLE support. It sets up project parameters, defines compilation settings, configures dependencies, and establishes installation procedures for the application and its assets.\nSOURCE: https://github.com/navideck/universal_ble/blob/main/example/linux/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\n# Project-level configuration.\ncmake_minimum_required(VERSION 3.10)\nproject(runner LANGUAGES CXX)\n\n# The name of the executable created for the application. Change this to change\n# the on-disk name of your application.\nset(BINARY_NAME \"universal_ble_example\")\n# The unique GTK application identifier for this application. See:\n# https://wiki.gnome.org/HowDoI/ChooseApplicationID\nset(APPLICATION_ID \"com.navideck.universal_ble\")\n\n# Explicitly opt in to modern CMake behaviors to avoid warnings with recent\n# versions of CMake.\ncmake_policy(SET CMP0063 NEW)\n\n# Load bundled libraries from the lib/ directory relative to the binary.\nset(CMAKE_INSTALL_RPATH \"$ORIGIN/lib\")\n\n# Root filesystem for cross-building.\nif(FLUTTER_TARGET_PLATFORM_SYSROOT)\n  set(CMAKE_SYSROOT ${FLUTTER_TARGET_PLATFORM_SYSROOT})\n  set(CMAKE_FIND_ROOT_PATH ${CMAKE_SYSROOT})\n  set(CMAKE_FIND_ROOT_PATH_MODE_PROGRAM NEVER)\n  set(CMAKE_FIND_ROOT_PATH_MODE_PACKAGE ONLY)\n  set(CMAKE_FIND_ROOT_PATH_MODE_LIBRARY ONLY)\n  set(CMAKE_FIND_ROOT_PATH_MODE_INCLUDE ONLY)\nendif()\n\n# Define build configuration options.\nif(NOT CMAKE_BUILD_TYPE AND NOT CMAKE_CONFIGURATION_TYPES)\n  set(CMAKE_BUILD_TYPE \"Debug\" CACHE\n    STRING \"Flutter build mode\" FORCE)\n  set_property(CACHE CMAKE_BUILD_TYPE PROPERTY STRINGS\n    \"Debug\" \"Profile\" \"Release\")\nendif()\n\n# Compilation settings that should be applied to most targets.\n#\n# Be cautious about adding new options here, as plugins use this function by\n# default. In most cases, you should add new options to specific targets instead\n# of modifying this function.\nfunction(APPLY_STANDARD_SETTINGS TARGET)\n  target_compile_features(${TARGET} PUBLIC cxx_std_14)\n  target_compile_options(${TARGET} PRIVATE -Wall -Werror)\n  target_compile_options(${TARGET} PRIVATE \"$<$<NOT:$<CONFIG:Debug>>:-O3>\")\n  target_compile_definitions(${TARGET} PRIVATE \"$<$<NOT:$<CONFIG:Debug>>:NDEBUG>\")\nendfunction()\n\n# Flutter library and tool build rules.\nset(FLUTTER_MANAGED_DIR \"${CMAKE_CURRENT_SOURCE_DIR}/flutter\")\nadd_subdirectory(${FLUTTER_MANAGED_DIR})\n\n# System-level dependencies.\nfind_package(PkgConfig REQUIRED)\npkg_check_modules(GTK REQUIRED IMPORTED_TARGET gtk+-3.0)\n\nadd_definitions(-DAPPLICATION_ID=\"${APPLICATION_ID}\")\n\n# Define the application target. To change its name, change BINARY_NAME above,\n# not the value here, or `flutter run` will no longer work.\n#\n# Any new source files that you add to the application should be added here.\nadd_executable(${BINARY_NAME}\n  \"main.cc\"\n  \"my_application.cc\"\n  \"${FLUTTER_MANAGED_DIR}/generated_plugin_registrant.cc\"\n)\n\n# Apply the standard set of build settings. This can be removed for applications\n# that need different build settings.\napply_standard_settings(${BINARY_NAME})\n\n# Add dependency libraries. Add any application-specific dependencies here.\ntarget_link_libraries(${BINARY_NAME} PRIVATE flutter)\ntarget_link_libraries(${BINARY_NAME} PRIVATE PkgConfig::GTK)\n\n# Run the Flutter tool portions of the build. This must not be removed.\nadd_dependencies(${BINARY_NAME} flutter_assemble)\n\n# Only the install-generated bundle's copy of the executable will launch\n# correctly, since the resources must in the right relative locations. To avoid\n# people trying to run the unbundled copy, put it in a subdirectory instead of\n# the default top-level location.\nset_target_properties(${BINARY_NAME}\n  PROPERTIES\n  RUNTIME_OUTPUT_DIRECTORY \"${CMAKE_BINARY_DIR}/intermediates_do_not_run\"\n)\n\n# Enable the test target.\nset(include_universal_ble_tests TRUE)\n\n# Generated plugin build rules, which manage building the plugins and adding\n# them to the application.\ninclude(flutter/generated_plugins.cmake)\n\n\n# === Installation ===\n# By default, \"installing\" just makes a relocatable bundle in the build\n# directory.\nset(BUILD_BUNDLE_DIR \"${PROJECT_BINARY_DIR}/bundle\")\nif(CMAKE_INSTALL_PREFIX_INITIALIZED_TO_DEFAULT)\n  set(CMAKE_INSTALL_PREFIX \"${BUILD_BUNDLE_DIR}\" CACHE PATH \"...\" FORCE)\nendif()\n\n# Start with a clean build bundle directory every time.\ninstall(CODE \"\n  file(REMOVE_RECURSE \\\"${BUILD_BUNDLE_DIR}/\\\")\n  \" COMPONENT Runtime)\n\nset(INSTALL_BUNDLE_DATA_DIR \"${CMAKE_INSTALL_PREFIX}/data\")\nset(INSTALL_BUNDLE_LIB_DIR \"${CMAKE_INSTALL_PREFIX}/lib\")\n\ninstall(TARGETS ${BINARY_NAME} RUNTIME DESTINATION \"${CMAKE_INSTALL_PREFIX}\"\n  COMPONENT Runtime)\n\ninstall(FILES \"${FLUTTER_ICU_DATA_FILE}\" DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\"\n  COMPONENT Runtime)\n\ninstall(FILES \"${FLUTTER_LIBRARY}\" DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n  COMPONENT Runtime)\n\nforeach(bundled_library ${PLUGIN_BUNDLED_LIBRARIES})\n  install(FILES \"${bundled_library}\"\n    DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n    COMPONENT Runtime)\nendforeach(bundled_library)\n\n# Fully re-copy the assets directory on each build to avoid having stale files\n# from a previous install.\nset(FLUTTER_ASSET_DIR_NAME \"flutter_assets\")\ninstall(CODE \"\n  file(REMOVE_RECURSE \\\"${INSTALL_BUNDLE_DATA_DIR}/${FLUTTER_ASSET_DIR_NAME}\\\")\n  \" COMPONENT Runtime)\ninstall(DIRECTORY \"${PROJECT_BUILD_DIR}/${FLUTTER_ASSET_DIR_NAME}\"\n  DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\" COMPONENT Runtime)\n\n# Install the AOT library on non-Debug builds only.\nif(NOT CMAKE_BUILD_TYPE MATCHES \"Debug\")\n  install(FILES \"${AOT_LIBRARY}\" DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n    COMPONENT Runtime)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Opening Xcode Workspace Command\nDESCRIPTION: Terminal command to open the Flutter project's Xcode workspace for launch screen customization.\nSOURCE: https://github.com/navideck/universal_ble/blob/main/example/ios/Runner/Assets.xcassets/LaunchImage.imageset/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nopen ios/Runner.xcworkspace\n```\n\n----------------------------------------\n\nTITLE: Markdown Changelog Documentation\nDESCRIPTION: Version history documentation showing changes, improvements, and fixes across multiple releases of the Universal BLE plugin from version 0.8.0 to 0.18.0.\nSOURCE: https://github.com/navideck/universal_ble/blob/main/CHANGELOG.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## 0.18.0\n* Improve docs for isPaired\n\n## 0.17.0\n* Fix Windows crash when calling pair APIs with an unknown deviceId\n* Fix Windows crash when calling startScan again after some time\n* Fix Windows warning `Unable to establish connection on channel` when hot restarting\n* Refactor native Windows code\n* Improve Android permission documentation\n\n## 0.16.0\n* BREAKING CHANGE: `payload` is now `payloadPrefix`\n* BREAKING CHANGE: `mask` is now `payloadMask`\n* Bump bluez to 0.8.3\n* Do not normalize UUIDs on native side\n* Reverse _permissionStatus return values in example app\n* Improve readme\n* Improve ManufacturerDataFilter\n```"
  }
]