[
  {
    "owner": "pallets-eco",
    "repo": "flask-sqlalchemy",
    "content": "TITLE: Configuring Flask-SQLAlchemy with Application\nDESCRIPTION: Connects the Flask-SQLAlchemy extension to a Flask application instance. This example configures a SQLite database connection and initializes the extension with the app.\nSOURCE: https://github.com/pallets-eco/flask-sqlalchemy/blob/main/docs/quickstart.rst#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n# create the app\napp = Flask(__name__)\n# configure the SQLite database, relative to the app instance folder\napp.config[\"SQLALCHEMY_DATABASE_URI\"] = \"sqlite:///project.db\"\n# initialize the app with the extension\ndb.init_app(app)\n```\n\n----------------------------------------\n\nTITLE: Initializing Flask-SQLAlchemy Extension\nDESCRIPTION: Creates a SQLAlchemy object with a custom declarative base class. This is the first step in setting up Flask-SQLAlchemy in your application.\nSOURCE: https://github.com/pallets-eco/flask-sqlalchemy/blob/main/docs/quickstart.rst#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom flask import Flask\nfrom flask_sqlalchemy import SQLAlchemy\nfrom sqlalchemy.orm import DeclarativeBase\n\nclass Base(DeclarativeBase):\n  pass\n\ndb = SQLAlchemy(model_class=Base)\n```\n\n----------------------------------------\n\nTITLE: Initializing and Using Flask-SQLAlchemy in Python\nDESCRIPTION: This snippet demonstrates how to set up a Flask application with SQLAlchemy integration using Flask-SQLAlchemy. It shows database configuration, model definition, table creation, data insertion, and querying.\nSOURCE: https://github.com/pallets-eco/flask-sqlalchemy/blob/main/README.md#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom flask import Flask\nfrom flask_sqlalchemy import SQLAlchemy\nfrom sqlalchemy.orm import DeclarativeBase, Mapped, mapped_column\n\napp = Flask(__name__)\napp.config[\"SQLALCHEMY_DATABASE_URI\"] = \"sqlite:///example.sqlite\"\n\nclass Base(DeclarativeBase):\n  pass\n\ndb = SQLAlchemy(app, model_class=Base)\n\nclass User(db.Model):\n    id: Mapped[int] = mapped_column(primary_key=True)\n    username: Mapped[str] = mapped_column(unique=True)\n\nwith app.app_context():\n    db.create_all()\n\n    db.session.add(User(username=\"example\"))\n    db.session.commit()\n\n    users = db.session.scalars(db.select(User))\n```\n\n----------------------------------------\n\nTITLE: Creating Database Tables with Flask-SQLAlchemy\nDESCRIPTION: Creates all database tables defined in your models. This operation requires an application context and should be run after all models are defined.\nSOURCE: https://github.com/pallets-eco/flask-sqlalchemy/blob/main/docs/quickstart.rst#2025-04-22_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nwith app.app_context():\n    db.create_all()\n```\n\n----------------------------------------\n\nTITLE: Querying Data with Flask-SQLAlchemy\nDESCRIPTION: Shows how to execute select queries using the modern SQLAlchemy syntax. The first example retrieves a single user by username, while the second example retrieves all users ordered by username.\nSOURCE: https://github.com/pallets-eco/flask-sqlalchemy/blob/main/docs/queries.rst#2025-04-22_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nuser = db.session.execute(db.select(User).filter_by(username=username)).scalar_one()\n\nusers = db.session.execute(db.select(User).order_by(User.username)).scalars()\n```\n\n----------------------------------------\n\nTITLE: Inserting Data with Flask-SQLAlchemy\nDESCRIPTION: Demonstrates how to add a new user object to the database by adding it to the session and committing the changes. This is the standard pattern for inserting new records in Flask-SQLAlchemy.\nSOURCE: https://github.com/pallets-eco/flask-sqlalchemy/blob/main/docs/queries.rst#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nuser = User()\ndb.session.add(user)\ndb.session.commit()\n```\n\n----------------------------------------\n\nTITLE: Example Connection Strings for Different Databases in Flask-SQLAlchemy\nDESCRIPTION: Provides example connection strings for SQLite, PostgreSQL, and MySQL/MariaDB databases. Shows the specific format for each database type, including how relative paths work with SQLite.\nSOURCE: https://github.com/pallets-eco/flask-sqlalchemy/blob/main/docs/config.rst#2025-04-22_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n# SQLite, relative to Flask instance path\nsqlite:///project.db\n\n# PostgreSQL\npostgresql://scott:tiger@localhost/project\n\n# MySQL / MariaDB\nmysql://scott:tiger@localhost/project\n```\n\n----------------------------------------\n\nTITLE: Defining Connection URL Format in Flask-SQLAlchemy\nDESCRIPTION: Shows the basic syntax for database connection URLs in Flask-SQLAlchemy. The format includes dialect, username, password, host, port, and database components, with some parts being optional depending on the database type.\nSOURCE: https://github.com/pallets-eco/flask-sqlalchemy/blob/main/docs/config.rst#2025-04-22_snippet_0\n\nLANGUAGE: text\nCODE:\n```\ndialect://username:password@host:port/database\n```\n\n----------------------------------------\n\nTITLE: Customizing the Model Class with a custom base and ID generation in Flask-SQLAlchemy\nDESCRIPTION: Creates a custom base class that automatically adds integer primary keys to all models, with foreign keys for joined-table inheritance. This example demonstrates how to pass a custom model class to the SQLAlchemy constructor.\nSOURCE: https://github.com/pallets-eco/flask-sqlalchemy/blob/main/docs/customizing.rst#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom sqlalchemy import Integer, String, ForeignKey\nfrom sqlalchemy.orm import DeclarativeBase, Mapped, mapped_column, declared_attr\n\nclass Base(DeclarativeBase):\n    @declared_attr.cascading\n    @classmethod\n    def id(cls):\n        for base in cls.__mro__[1:-1]:\n            if getattr(base, \"__table__\", None) is not None:\n                    return mapped_column(ForeignKey(base.id), primary_key=True)\n            else:\n                return mapped_column(Integer, primary_key=True)\n\ndb = SQLAlchemy(app, model_class=Base)\n\nclass User(db.Model):\n    name: Mapped[str]\n\nclass Employee(User):\n    title: Mapped[str]\n```\n\n----------------------------------------\n\nTITLE: Creating Abstract Model Base Classes in Flask-SQLAlchemy\nDESCRIPTION: Demonstrates how to create an abstract model base class that adds timestamp functionality to specific models. The abstract class adds created and updated fields that are automatically set and updated with UTC timestamps.\nSOURCE: https://github.com/pallets-eco/flask-sqlalchemy/blob/main/docs/customizing.rst#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom datetime import datetime, timezone\nfrom sqlalchemy.orm import Mapped, mapped_column\n\nclass TimestampModel(db.Model):\n    __abstract__ = True\n    created: Mapped[datetime] = mapped_column(default=lambda: datetime.now(timezone.utc))\n    updated: Mapped[datetime] = mapped_column(default=lambda: datetime.now(timezone.utc), onupdate=lambda: datetime.now(timezone.utc))\n\nclass Author(db.Model):\n    id: Mapped[int] = mapped_column(primary_key=True)\n    username: Mapped[str] = mapped_column(unique=True)\n\nclass Post(TimestampModel):\n    id: Mapped[int] = mapped_column(primary_key=True)\n    title: Mapped[str]\n```\n\n----------------------------------------\n\nTITLE: Using Mixins with Flask-SQLAlchemy Models\nDESCRIPTION: Shows how to implement a mixin class to add timestamp functionality to specific models instead of using an abstract base class. The mixin provides created and updated fields with automatic UTC timestamp handling.\nSOURCE: https://github.com/pallets-eco/flask-sqlalchemy/blob/main/docs/customizing.rst#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nclass TimestampMixin:\n    created: Mapped[datetime] = mapped_column(default=lambda: datetime.now(timezone.utc))\n    updated: Mapped[datetime] = mapped_column(default=lambda: datetime.now(timezone.utc), onupdate=lambda: datetime.now(timezone.utc))\n\nclass Post(TimestampMixin, db.Model):\n    id: Mapped[int] = mapped_column(primary_key=True)\n    title: Mapped[str]\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Query Class in Flask-SQLAlchemy\nDESCRIPTION: Demonstrates how to create a custom query class that extends Flask-SQLAlchemy's Query with additional functionality. This example adds a get_or method that returns a default value when a record is not found.\nSOURCE: https://github.com/pallets-eco/flask-sqlalchemy/blob/main/docs/customizing.rst#2025-04-22_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom flask_sqlalchemy.query import Query\n\nclass GetOrQuery(Query):\n    def get_or(self, ident, default=None):\n        out = self.get(ident)\n\n        if out is None:\n            return default\n\n        return out\n\ndb = SQLAlchemy(query_class=GetOrQuery)\n\nuser = User.query.get_or(user_id, anonymous_user)\n```\n\n----------------------------------------\n\nTITLE: Creating Tables with Binds in Flask-SQLAlchemy\nDESCRIPTION: This snippet demonstrates how to create a table associated with a specific bind using the bind_key parameter in the Table constructor. The user_table is associated with the 'auth' bind.\nSOURCE: https://github.com/pallets-eco/flask-sqlalchemy/blob/main/docs/binds.rst#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nuser_table = db.Table(\n    \"user\",\n    db.Column(\"id\", db.Integer, primary_key=True),\n    bind_key=\"auth\",\n)\n```\n\n----------------------------------------\n\nTITLE: Implementing Flask Routes with SQLAlchemy Queries\nDESCRIPTION: Demonstrates how to use Flask-SQLAlchemy in Flask routes to perform common database operations including listing, creating, viewing, and deleting users.\nSOURCE: https://github.com/pallets-eco/flask-sqlalchemy/blob/main/docs/quickstart.rst#2025-04-22_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n@app.route(\"/users\")\ndef user_list():\n    users = db.session.execute(db.select(User).order_by(User.username)).scalars()\n    return render_template(\"user/list.html\", users=users)\n\n@app.route(\"/users/create\", methods=[\"GET\", \"POST\"])\ndef user_create():\n    if request.method == \"POST\":\n        user = User(\n            username=request.form[\"username\"],\n            email=request.form[\"email\"],\n        )\n        db.session.add(user)\n        db.session.commit()\n        return redirect(url_for(\"user_detail\", id=user.id))\n\n    return render_template(\"user/create.html\")\n\n@app.route(\"/user/<int:id>\")\ndef user_detail(id):\n    user = db.get_or_404(User, id)\n    return render_template(\"user/detail.html\", user=user)\n\n@app.route(\"/user/<int:id>/delete\", methods=[\"GET\", \"POST\"])\ndef user_delete(id):\n    user = db.get_or_404(User, id)\n\n    if request.method == \"POST\":\n        db.session.delete(user)\n        db.session.commit()\n        return redirect(url_for(\"user_list\"))\n\n    return render_template(\"user/delete.html\", user=user)\n```\n\n----------------------------------------\n\nTITLE: Creating and Dropping Tables Across Multiple Binds in Flask-SQLAlchemy\nDESCRIPTION: This snippet shows various ways to create and drop tables across different binds using the create_all() and drop_all() methods. It demonstrates how to operate on all binds, specific binds, or a subset of binds.\nSOURCE: https://github.com/pallets-eco/flask-sqlalchemy/blob/main/docs/binds.rst#2025-04-22_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n# create tables for all binds\ndb.create_all()\n\n# create tables for the default and \"auth\" binds\ndb.create_all(bind_key=[None, \"auth\"])\n\n# create tables for the \"meta\" bind\ndb.create_all(bind_key=\"meta\")\n\n# drop tables for the default bind\ndb.drop_all(bind_key=None)\n```\n\n----------------------------------------\n\nTITLE: Displaying Paginated Items in Jinja Template\nDESCRIPTION: Shows how to iterate through paginated items in a Jinja template. The page object can be iterated directly to access each item in the current page.\nSOURCE: https://github.com/pallets-eco/flask-sqlalchemy/blob/main/docs/pagination.rst#2025-04-22_snippet_1\n\nLANGUAGE: jinja\nCODE:\n```\n<ul>\n  {% for user in page %}\n    <li>{{ user.username }}\n  {% endfor %}\n</ul>\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Messages to 404 Errors in Flask-SQLAlchemy\nDESCRIPTION: Shows how to add a custom error message when using the one_or_404 query method. This provides more context in the 404 error page about why the resource wasn't found.\nSOURCE: https://github.com/pallets-eco/flask-sqlalchemy/blob/main/docs/queries.rst#2025-04-22_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nuser = db.one_or_404(\n    db.select(User).filter_by(username=username),\n    description=f\"No user named '{username}'.\"\n)\n```\n\n----------------------------------------\n\nTITLE: Creating a pytest Fixture for Flask-SQLAlchemy Application Context\nDESCRIPTION: This Python code defines a pytest fixture that provides an application context for tests. It also shows how to use the fixture in a test function to simplify context management.\nSOURCE: https://github.com/pallets-eco/flask-sqlalchemy/blob/main/docs/contexts.rst#2025-04-22_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport pytest\n\n@pytest.fixture\ndef app_ctx(app):\n    with app.app_context():\n        yield\n\n@pytest.mark.usefixtures(\"app_ctx\")\ndef test_user_model():\n    user = User()\n    db.session.add(user)\n    db.session.commit()\n```\n\n----------------------------------------\n\nTITLE: Managing Application Context in Flask-SQLAlchemy Tests\nDESCRIPTION: This Python test function shows how to use a manual application context in a test scenario. It demonstrates adding and committing a user to the database within the context.\nSOURCE: https://github.com/pallets-eco/flask-sqlalchemy/blob/main/docs/contexts.rst#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ndef test_user_model(app):\n    user = User()\n\n    with app.app_context():\n        db.session.add(user)\n        db.session.commit()\n```\n\n----------------------------------------\n\nTITLE: Using Flask-SQLAlchemy Query Methods for Views\nDESCRIPTION: Demonstrates specialized query methods for Flask views that automatically return 404 errors for missing entries. The examples show retrieving users by ID and username with proper error handling.\nSOURCE: https://github.com/pallets-eco/flask-sqlalchemy/blob/main/docs/queries.rst#2025-04-22_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n@app.route(\"/user-by-id/<int:id>\")\ndef user_by_id(id):\n    user = db.get_or_404(User, id)\n    return render_template(\"show_user.html\", user=user)\n\n@app.route(\"/user-by-username/<username>\")\ndef user_by_username(username):\n    user = db.one_or_404(db.select(User).filter_by(username=username))\n    return render_template(\"show_user.html\", user=user)\n```\n\n----------------------------------------\n\nTITLE: Connecting to Model Commit Events in Flask-SQLAlchemy\nDESCRIPTION: This snippet demonstrates how to connect a function to the 'models_committed' signal in Flask-SQLAlchemy. The connected function will receive a list of changes after each commit operation.\nSOURCE: https://github.com/pallets-eco/flask-sqlalchemy/blob/main/docs/track-modifications.rst#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom flask_sqlalchemy.track_modifications import models_committed\n\ndef get_modifications(sender: Flask, changes: list[tuple[t.Any, str]]) -> None:\n    ...\n\nmodels_committed.connect(get_modifications)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Recorded Queries in Flask-SQLAlchemy\nDESCRIPTION: Use the get_recorded_queries function to retrieve a list of query info objects. Each object contains detailed information about executed SQL queries, including the SQL statement, parameters, execution time, and location in the code.\nSOURCE: https://github.com/pallets-eco/flask-sqlalchemy/blob/main/docs/record-queries.rst#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom flask_sqlalchemy import get_recorded_queries\n\nrecorded_queries = get_recorded_queries()\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom MetaData with Naming Conventions\nDESCRIPTION: Demonstrates how to initialize SQLAlchemy with custom metadata configuration and naming conventions for database constraints. This helps maintain consistent constraint names across database migrations.\nSOURCE: https://github.com/pallets-eco/flask-sqlalchemy/blob/main/docs/legacy-quickstart.rst#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom sqlalchemy import MetaData\nfrom flask_sqlalchemy import SQLAlchemy\n\ndb = SQLAlchemy(metadata=MetaData(naming_convention={\n    \"ix\": 'ix_%(column_0_label)s',\n    \"uq\": \"uq_%(table_name)s_%(column_0_name)s\",\n    \"ck\": \"ck_%(table_name)s_%(constraint_name)s\",\n    \"fk\": \"fk_%(table_name)s_%(column_0_name)s_%(referred_table_name)s\",\n    \"pk\": \"pk_%(table_name)s\"\n}))\n```\n\n----------------------------------------\n\nTITLE: Initializing Flask-SQLAlchemy Extension\nDESCRIPTION: Shows how to create the basic SQLAlchemy database instance for Flask applications using the legacy 1.x API. Creates a db object that will serve as the entry point for database operations.\nSOURCE: https://github.com/pallets-eco/flask-sqlalchemy/blob/main/docs/legacy-quickstart.rst#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom flask import Flask\nfrom flask_sqlalchemy import SQLAlchemy\nfrom sqlalchemy.orm import DeclarativeBase\n\ndb = SQLAlchemy()\n```\n\n----------------------------------------\n\nTITLE: Model Query Helper Methods\nDESCRIPTION: Shows the new model query helper methods added in version 3.0+ for 404 handling and pagination.\nSOURCE: https://github.com/pallets-eco/flask-sqlalchemy/blob/main/CHANGES.rst#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nmodel = db.get_or_404(Model, id)\nfirst_item = db.first_or_404(select(Model))\none_item = db.one_or_404(select(Model))\npagination = db.paginate(select(Model))\n```\n\n----------------------------------------\n\nTITLE: Defining SQLAlchemy Models with Type Annotations\nDESCRIPTION: Demonstrates how to define a SQLAlchemy model class with type annotations. The model creates a database table with columns for id, username, and email.\nSOURCE: https://github.com/pallets-eco/flask-sqlalchemy/blob/main/docs/quickstart.rst#2025-04-22_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom sqlalchemy import Integer, String\nfrom sqlalchemy.orm import Mapped, mapped_column\n\nclass User(db.Model):\n    id: Mapped[int] = mapped_column(primary_key=True)\n    username: Mapped[str] = mapped_column(unique=True)\n    email: Mapped[str]\n```\n\n----------------------------------------\n\nTITLE: Database URI Configuration Example\nDESCRIPTION: Demonstrates the format for configuring database URI and binds in Flask-SQLAlchemy 3.0+.\nSOURCE: https://github.com/pallets-eco/flask-sqlalchemy/blob/main/CHANGES.rst#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nSQLALCHEMY_DATABASE_URI = \"sqlite:///file:name.db?uri=true\"\nSQLALCHEMY_BINDS = {\n    \"bind_key\": {\n        \"url\": \"sqlite:///other.db\",\n        \"engine_opts\": {}\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Referencing Python Code Properties\nDESCRIPTION: Code property references mentioned throughout the changelog, including `__tablename__`, `declarative_base()`, `SQLAlchemy.__init__`, `DeclarativeMeta`, and other core Flask-SQLAlchemy components.\nSOURCE: https://github.com/pallets-eco/flask-sqlalchemy/blob/main/CHANGES.rst#2025-04-22_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n__tablename__\ndeclarative_base()\nSQLAlchemy.__init__\nDeclarativeMeta\n_BoundDeclarativeMeta\nDefaultMeta\nquery_class\nmodel_class\ndb.session\n__bind_key__\nSQLALCHEMY_ECHO\nSQLALCHEMY_DATABASE_URI\ndeclared_attr\nMetaData\nSignallingSession\nBaseQuery\ndb.Query\ndb.relation\ndb.relationship\ndb.dynamic_loader\ndb.Table\n```\n\n----------------------------------------\n\nTITLE: Customizing Session Query Class in Flask-SQLAlchemy\nDESCRIPTION: Shows how to customize only the session.query interface by passing the query_cls key to the session_options argument in the SQLAlchemy constructor. This affects only queries created via the session.\nSOURCE: https://github.com/pallets-eco/flask-sqlalchemy/blob/main/docs/customizing.rst#2025-04-22_snippet_8\n\nLANGUAGE: python\nCODE:\n```\ndb = SQLAlchemy(session_options={\"query_cls\": GetOrQuery})\n```\n\n----------------------------------------\n\nTITLE: Disabling Table Name Generation in Flask-SQLAlchemy\nDESCRIPTION: Demonstrates how to disable Flask-SQLAlchemy's automatic table name generation by setting the disable_autonaming parameter to True in the SQLAlchemy constructor, requiring explicit table name declaration for all models.\nSOURCE: https://github.com/pallets-eco/flask-sqlalchemy/blob/main/docs/customizing.rst#2025-04-22_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nclass Base(sa_orm.DeclarativeBase):\n    pass\n\ndb = SQLAlchemy(app, model_class=Base, disable_autonaming=True)\n```\n\n----------------------------------------\n\nTITLE: Displaying RuntimeError for Missing Application Context in Flask-SQLAlchemy\nDESCRIPTION: This snippet shows the error message that occurs when trying to use the database without an active application context. It explains the typical cause and suggests a solution using app.app_context().\nSOURCE: https://github.com/pallets-eco/flask-sqlalchemy/blob/main/docs/contexts.rst#2025-04-22_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nRuntimeError: Working outside of application context.\n\nThis typically means that you attempted to use functionality that needed\nthe current application. To solve this, set up an application context\nwith app.app_context(). See the documentation for more information.\n```\n\n----------------------------------------\n\nTITLE: Updating Data with Flask-SQLAlchemy\nDESCRIPTION: Shows how to update an existing user record by modifying its attributes and committing the changes. The session tracks the modifications to the object and translates them to SQL updates.\nSOURCE: https://github.com/pallets-eco/flask-sqlalchemy/blob/main/docs/queries.rst#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nuser.verified = True\ndb.session.commit()\n```\n\n----------------------------------------\n\nTITLE: Example of Pagination.iter_pages() Output\nDESCRIPTION: Demonstrates the output of the iter_pages() method on a Pagination object. This example shows the page numbers that would be yielded for a dataset with 20 pages when the current page is 7.\nSOURCE: https://github.com/pallets-eco/flask-sqlalchemy/blob/main/docs/pagination.rst#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nusers.iter_pages()\n[1, 2, None, 5, 6, 7, 8, 9, 10, 11, None, 19, 20]\n```\n\n----------------------------------------\n\nTITLE: Installing Flask-SQLAlchemy Development Dependencies\nDESCRIPTION: Commands to install the development dependencies and Flask-SQLAlchemy in editable mode. This setup allows you to modify the code and immediately see the effects without reinstalling.\nSOURCE: https://github.com/pallets-eco/flask-sqlalchemy/blob/main/CONTRIBUTING.rst#2025-04-22_snippet_4\n\nLANGUAGE: text\nCODE:\n```\n$ pip install -r requirements/dev.txt && pip install -e .\n```\n\n----------------------------------------\n\nTITLE: Running the Full Test Suite for Flask-SQLAlchemy with Tox\nDESCRIPTION: Command to run the full test suite in parallel using tox. This tests against all supported environments and configurations.\nSOURCE: https://github.com/pallets-eco/flask-sqlalchemy/blob/main/CONTRIBUTING.rst#2025-04-22_snippet_10\n\nLANGUAGE: text\nCODE:\n```\n$ tox p\n```\n\n----------------------------------------\n\nTITLE: Cloning the Flask-SQLAlchemy Repository for Development\nDESCRIPTION: Commands to clone the Flask-SQLAlchemy repository to your local machine after forking it. This creates a local copy to work with for development.\nSOURCE: https://github.com/pallets-eco/flask-sqlalchemy/blob/main/CONTRIBUTING.rst#2025-04-22_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n$ git clone https://github.com/{username}/flask-sqlalchemy\n$ cd flask-sqlalchemy\n```\n\n----------------------------------------\n\nTITLE: Creating a Python Virtual Environment for Flask-SQLAlchemy Development\nDESCRIPTION: Commands to create and activate a Python virtual environment for Flask-SQLAlchemy development on Unix/Linux systems. This isolates the development dependencies from the system Python installation.\nSOURCE: https://github.com/pallets-eco/flask-sqlalchemy/blob/main/CONTRIBUTING.rst#2025-04-22_snippet_2\n\nLANGUAGE: text\nCODE:\n```\n$ python3 -m venv .venv\n$ . .venv/bin/activate\n```\n\n----------------------------------------\n\nTITLE: Defining SQLAlchemy Model Class\nDESCRIPTION: Shows how to define a SQLAlchemy model class using the db.Model base class. Creates a User model with id, username, and email fields with appropriate constraints.\nSOURCE: https://github.com/pallets-eco/flask-sqlalchemy/blob/main/docs/legacy-quickstart.rst#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    username = db.Column(db.String, unique=True, nullable=False)\n    email = db.Column(db.String)\n```\n\n----------------------------------------\n\nTITLE: Activating Python Virtual Environment on Windows for Flask-SQLAlchemy\nDESCRIPTION: Command to activate a Python virtual environment on Windows systems for Flask-SQLAlchemy development. Windows uses a different activation script compared to Unix/Linux systems.\nSOURCE: https://github.com/pallets-eco/flask-sqlalchemy/blob/main/CONTRIBUTING.rst#2025-04-22_snippet_3\n\nLANGUAGE: text\nCODE:\n```\n> .venv\\Scripts\\activate\n```\n\n----------------------------------------\n\nTITLE: Configuring Git with User Information for Flask-SQLAlchemy Development\nDESCRIPTION: Commands to configure Git with username and email prior to contributing to Flask-SQLAlchemy. These settings are essential for proper attribution of commits in the project history.\nSOURCE: https://github.com/pallets-eco/flask-sqlalchemy/blob/main/CONTRIBUTING.rst#2025-04-22_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n$ git config --global user.name 'your name'\n$ git config --global user.email 'your email'\n```\n\n----------------------------------------\n\nTITLE: Creating a Branch for Bug or Documentation Fixes in Flask-SQLAlchemy\nDESCRIPTION: Git commands to create a new branch from the latest release branch for bug or documentation fixes. This ensures your changes are based on the appropriate version for backporting.\nSOURCE: https://github.com/pallets-eco/flask-sqlalchemy/blob/main/CONTRIBUTING.rst#2025-04-22_snippet_6\n\nLANGUAGE: text\nCODE:\n```\n$ git fetch origin\n$ git checkout -b your-branch-name origin/3.0.x\n```\n\n----------------------------------------\n\nTITLE: Creating a Branch for Feature Additions in Flask-SQLAlchemy\nDESCRIPTION: Git commands to create a new branch from the main branch for feature additions or changes. New features should be developed against the main development branch.\nSOURCE: https://github.com/pallets-eco/flask-sqlalchemy/blob/main/CONTRIBUTING.rst#2025-04-22_snippet_7\n\nLANGUAGE: text\nCODE:\n```\n$ git fetch origin\n$ git checkout -b your-branch-name origin/main\n```\n\n----------------------------------------\n\nTITLE: Committing Release Version for Flask-SQLAlchemy\nDESCRIPTION: Git command to commit the release version changes with a standard message. This records the version update in the repository history.\nSOURCE: https://github.com/pallets-eco/flask-sqlalchemy/blob/main/CONTRIBUTING.rst#2025-04-22_snippet_14\n\nLANGUAGE: text\nCODE:\n```\n$ git commit -am 'release version A.B.C'\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple Database Binds in Flask-SQLAlchemy\nDESCRIPTION: This snippet demonstrates how to configure multiple database connections using the SQLALCHEMY_DATABASE_URI for the default connection and SQLALCHEMY_BINDS for additional connections. It shows how to specify different database types and engine options.\nSOURCE: https://github.com/pallets-eco/flask-sqlalchemy/blob/main/docs/binds.rst#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nSQLALCHEMY_DATABASE_URI = \"postgresql:///main\"\nSQLALCHEMY_BINDS = {\n    \"meta\": \"sqlite:////path/to/meta.db\",\n    \"auth\": {\n        \"url\": \"mysql://localhost/users\",\n        \"pool_recycle\": 3600,\n    },\n}\n```\n\n----------------------------------------\n\nTITLE: Creating and Pushing a Release Tag for Flask-SQLAlchemy\nDESCRIPTION: Git commands to create an annotated tag for the release and push it to the repository. This marks the specific commit that represents the release.\nSOURCE: https://github.com/pallets-eco/flask-sqlalchemy/blob/main/CONTRIBUTING.rst#2025-04-22_snippet_15\n\nLANGUAGE: text\nCODE:\n```\n$ git tag -am 'release version A.B.C' A.B.C\n$ git push origin A.B.C\n```\n\n----------------------------------------\n\nTITLE: Cloning and Preparing the Flask-SQLAlchemy Repository\nDESCRIPTION: Commands for cloning the Flask-SQLAlchemy repository and navigating to the Flaskr example directory. Includes checkout to the correct version tag to ensure compatibility with documentation.\nSOURCE: https://github.com/pallets-eco/flask-sqlalchemy/blob/main/examples/flaskr/README.rst#2025-04-22_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n# clone the repository\n$ git clone https://github.com/pallets/flask-sqlalchemy\n$ cd flask-sqlalchemy/examples/flaskr\n# checkout the correct version\n$ git checkout correct-version-tag\n```\n\n----------------------------------------\n\nTITLE: Creating Python Virtual Environment on Unix-like Systems\nDESCRIPTION: Commands for creating and activating a Python virtual environment on Unix-like systems. This isolates the project dependencies from the system Python installation.\nSOURCE: https://github.com/pallets-eco/flask-sqlalchemy/blob/main/examples/flaskr/README.rst#2025-04-22_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n$ python3 -m venv venv\n$ . venv/bin/activate\n```\n\n----------------------------------------\n\nTITLE: Creating Python Virtual Environment on Windows\nDESCRIPTION: Commands for creating and activating a Python virtual environment on Windows command prompt. This isolates the project dependencies from the system Python installation.\nSOURCE: https://github.com/pallets-eco/flask-sqlalchemy/blob/main/examples/flaskr/README.rst#2025-04-22_snippet_2\n\nLANGUAGE: text\nCODE:\n```\n$ py -3 -m venv venv\n$ venv\\Scripts\\activate.bat\n```\n\n----------------------------------------\n\nTITLE: Installing from Main Branch with Source Dependencies\nDESCRIPTION: Commands for installing Flask-SQLAlchemy from source and the Flaskr application when using the main branch. This ensures you're using the latest development version of Flask-SQLAlchemy.\nSOURCE: https://github.com/pallets-eco/flask-sqlalchemy/blob/main/examples/flaskr/README.rst#2025-04-22_snippet_4\n\nLANGUAGE: text\nCODE:\n```\n$ pip install -e ../..\n$ pip install -e .\n```\n\n----------------------------------------\n\nTITLE: Basic Pagination Query in Flask-SQLAlchemy\nDESCRIPTION: Demonstrates how to use the paginate method on a database select statement to get a Pagination object. This example shows querying a list of users ordered by join date and passing the pagination object to a template.\nSOURCE: https://github.com/pallets-eco/flask-sqlalchemy/blob/main/docs/pagination.rst#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\npage = db.paginate(db.select(User).order_by(User.join_date))\nreturn render_template(\"user/list.html\", page=page)\n```\n\n----------------------------------------\n\nTITLE: Running Flaskr Application on Unix-like Systems\nDESCRIPTION: Commands for setting up environment variables, initializing the database, and running the Flaskr application on Unix-like systems. FLASK_ENV=development enables development features like interactive debugger.\nSOURCE: https://github.com/pallets-eco/flask-sqlalchemy/blob/main/examples/flaskr/README.rst#2025-04-22_snippet_5\n\nLANGUAGE: text\nCODE:\n```\n$ export FLASK_APP=flaskr\n$ export FLASK_ENV=development\n$ flask init-db\n$ flask run\n```\n\n----------------------------------------\n\nTITLE: Running Tests with Coverage Reporting\nDESCRIPTION: Commands for running tests with coverage analysis and generating reports. Includes commands for console output and HTML report generation for detailed coverage inspection.\nSOURCE: https://github.com/pallets-eco/flask-sqlalchemy/blob/main/examples/flaskr/README.rst#2025-04-22_snippet_8\n\nLANGUAGE: text\nCODE:\n```\n$ coverage run -m pytest\n$ coverage report\n$ coverage html  # open htmlcov/index.html in a browser\n```\n\n----------------------------------------\n\nTITLE: Pip Dependencies Configuration\nDESCRIPTION: A pip-compile generated requirements file that specifies exact versions of Python packages needed for development and testing. Includes type checking tools (mypy, pyright), testing framework (pytest), and their dependencies.\nSOURCE: https://github.com/pallets-eco/flask-sqlalchemy/blob/main/requirements/typing.txt#2025-04-22_snippet_0\n\nLANGUAGE: pip\nCODE:\n```\niniconfig==2.0.0\n    # via pytest\nmypy==1.13.0\n    # via -r typing.in\nmypy-extensions==1.0.0\n    # via mypy\nnodeenv==1.9.1\n    # via pyright\npackaging==24.1\n    # via pytest\npluggly==1.5.0\n    # via pytest\npyright==1.1.386\n    # via -r typing.in\npytest==8.3.3\n    # via -r typing.in\ntyping-extensions==4.12.2\n    # via\n    #   mypy\n    #   pyright\n```\n\n----------------------------------------\n\nTITLE: Displaying Flask-SQLAlchemy Title Image in reStructuredText\nDESCRIPTION: This snippet shows how to include and align the Flask-SQLAlchemy title image in the documentation using reStructuredText syntax.\nSOURCE: https://github.com/pallets-eco/flask-sqlalchemy/blob/main/docs/index.rst#2025-04-22_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. image:: _static/flask-sqlalchemy-title.png\n    :align: center\n```\n\n----------------------------------------\n\nTITLE: Creating Table of Contents for User Guide in reStructuredText\nDESCRIPTION: This snippet demonstrates how to create a table of contents for the User Guide section using reStructuredText directives.\nSOURCE: https://github.com/pallets-eco/flask-sqlalchemy/blob/main/docs/index.rst#2025-04-22_snippet_1\n\nLANGUAGE: rst\nCODE:\n```\n.. toctree::\n    :maxdepth: 2\n\n    quickstart\n    config\n    models\n    queries\n    pagination\n    contexts\n    binds\n    record-queries\n    track-modifications\n    customizing\n```\n\n----------------------------------------\n\nTITLE: Implementing Pagination with Flask-SQLAlchemy\nDESCRIPTION: Example of using the paginate() method to handle pagination in Flask-SQLAlchemy. This creates a Pagination object that can be passed to a template.\nSOURCE: https://github.com/pallets-eco/flask-sqlalchemy/blob/main/docs/legacy-query.rst#2025-04-22_snippet_3\n\nLANGUAGE: python\nCODE:\n```\npage = User.query.order_by(User.join_date).paginate()\nreturn render_template(\"user/list.html\", page=page)\n```\n\n----------------------------------------\n\nTITLE: Creating Table of Contents for API Reference in reStructuredText\nDESCRIPTION: This snippet shows how to create a table of contents for the API Reference section using reStructuredText directives.\nSOURCE: https://github.com/pallets-eco/flask-sqlalchemy/blob/main/docs/index.rst#2025-04-22_snippet_2\n\nLANGUAGE: rst\nCODE:\n```\n.. toctree::\n    :maxdepth: 2\n\n    api\n```\n\n----------------------------------------\n\nTITLE: Creating Table of Contents for Additional Information in reStructuredText\nDESCRIPTION: This snippet demonstrates how to create a table of contents for the Additional Information section using reStructuredText directives.\nSOURCE: https://github.com/pallets-eco/flask-sqlalchemy/blob/main/docs/index.rst#2025-04-22_snippet_3\n\nLANGUAGE: rst\nCODE:\n```\n.. toctree::\n    :maxdepth: 2\n\n    license\n    changes\n```\n\n----------------------------------------\n\nTITLE: Defining Models with Binds in Flask-SQLAlchemy\nDESCRIPTION: This snippet shows how to associate a model with a specific database bind by setting the __bind_key__ class attribute. In this case, the User model is associated with the 'auth' bind.\nSOURCE: https://github.com/pallets-eco/flask-sqlalchemy/blob/main/docs/binds.rst#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nclass User(db.Model):\n    __bind_key__ = \"auth\"\n    id = db.Column(db.Integer, primary_key=True)\n```\n\n----------------------------------------\n\nTITLE: Performing Basic Queries with Flask-SQLAlchemy Legacy Interface\nDESCRIPTION: Examples of basic queries using the legacy query interface in Flask-SQLAlchemy. Shows how to get a user by ID and by username.\nSOURCE: https://github.com/pallets-eco/flask-sqlalchemy/blob/main/docs/legacy-query.rst#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n# get the user with id 5\nuser = User.query.get(5)\n\n# get a user by username\nuser = User.query.filter_by(username=username).one()\n```\n\n----------------------------------------\n\nTITLE: Deleting Data with Flask-SQLAlchemy\nDESCRIPTION: Demonstrates how to delete a user record from the database by passing the object to the session's delete method and committing the changes.\nSOURCE: https://github.com/pallets-eco/flask-sqlalchemy/blob/main/docs/queries.rst#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ndb.session.delete(user)\ndb.session.commit()\n```\n\n----------------------------------------\n\nTITLE: Creating Database Tables with Manual Application Context in Flask-SQLAlchemy\nDESCRIPTION: This Python function demonstrates how to create a Flask application, configure it, import models, and create database tables using db.create_all() within a manually pushed application context.\nSOURCE: https://github.com/pallets-eco/flask-sqlalchemy/blob/main/docs/contexts.rst#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ndef create_app():\n    app = Flask(__name__)\n    app.config.from_object(\"project.config\")\n\n    import project.models\n\n    with app.app_context():\n        db.create_all()\n\n    return app\n```\n\n----------------------------------------\n\nTITLE: Creating Database Tables\nDESCRIPTION: Demonstrates how to create all defined database tables within a Flask application context using the create_all() method.\nSOURCE: https://github.com/pallets-eco/flask-sqlalchemy/blob/main/docs/legacy-quickstart.rst#2025-04-22_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nwith app.app_context():\n    db.create_all()\n```\n\n----------------------------------------\n\nTITLE: Customizing the Session Class in Flask-SQLAlchemy\nDESCRIPTION: Shows how to create and use a custom session class that extends both ShardedSession and Flask-SQLAlchemy's Session. This enables implementing custom session behavior such as horizontal sharding.\nSOURCE: https://github.com/pallets-eco/flask-sqlalchemy/blob/main/docs/customizing.rst#2025-04-22_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom sqlalchemy.ext.horizontal_shard import ShardedSession\nfrom flask_sqlalchemy.session import Session\n\nclass CustomSession(ShardedSession, Session):\n    ...\n\ndb = SQLAlchemy(session_options={\"class_\": CustomSession})\n```\n\n----------------------------------------\n\nTITLE: Using 404 Helper Methods in Flask-SQLAlchemy Views\nDESCRIPTION: Demonstrates how to use one_or_404() in a Flask view function to raise a 404 error if a user doesn't exist with the specified username.\nSOURCE: https://github.com/pallets-eco/flask-sqlalchemy/blob/main/docs/legacy-query.rst#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n@app.route(\"/user/<username>\")\ndef show_user(username):\n    user = User.query.filter_by(username=username).one_or_404()\n    return render_template(\"show_user.html\", user=user)\n```\n\n----------------------------------------\n\nTITLE: Customizing Query Class for Specific Models in Flask-SQLAlchemy\nDESCRIPTION: Shows how to customize the query interface for a specific model by setting the query_class attribute on the model class. This applies the custom query behavior only to that model.\nSOURCE: https://github.com/pallets-eco/flask-sqlalchemy/blob/main/docs/customizing.rst#2025-04-22_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nclass User(db.Model):\n    query_class = GetOrQuery\n```\n\n----------------------------------------\n\nTITLE: Rendering Pagination Widget in Jinja\nDESCRIPTION: A Jinja macro that renders a pagination widget with navigation links. It displays the current range of items, total count, and generates links to other pages while highlighting the current page.\nSOURCE: https://github.com/pallets-eco/flask-sqlalchemy/blob/main/docs/pagination.rst#2025-04-22_snippet_3\n\nLANGUAGE: jinja\nCODE:\n```\n{% macro render_pagination(pagination, endpoint) %}\n  <div class=\"page-items\">\n    {{ pagination.first }} - {{ pagination.last }} of {{ pagination.total }}\n  </div>\n  <div class=pagination>\n    {% for page in pagination.iter_pages() %}\n      {% if page %}\n        {% if page != pagination.page %}\n          <a href=\"{{ url_for(endpoint, page=page) }}\">{{ page }}</a>\n        {% else %}\n          <strong>{{ page }}</strong>\n        {% endif %}\n      {% else %}\n        <span class=ellipsis>…</span>\n      {% endif %}\n    {% endfor %}\n  </div>\n{% endmacro %}\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Messages to 404 Errors in Flask-SQLAlchemy\nDESCRIPTION: Shows how to add a custom message to a 404 error when using one_or_404() in Flask-SQLAlchemy.\nSOURCE: https://github.com/pallets-eco/flask-sqlalchemy/blob/main/docs/legacy-query.rst#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nuser = User.query.filter_by(username=username).one_or_404(\n    description=f\"No user named '{username}'.\"\n)\n```\n\n----------------------------------------\n\nTITLE: Enabling Query Recording in Flask-SQLAlchemy Configuration\nDESCRIPTION: To enable query recording in Flask-SQLAlchemy, set the SQLALCHEMY_RECORD_QUERIES configuration option to True in the Flask app config. This allows for debugging and performance analysis of SQL queries.\nSOURCE: https://github.com/pallets-eco/flask-sqlalchemy/blob/main/docs/record-queries.rst#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\napp.config['SQLALCHEMY_RECORD_QUERIES'] = True\n```\n\n----------------------------------------\n\nTITLE: Customizing Query Class for Dynamic Relationships in Flask-SQLAlchemy\nDESCRIPTION: Demonstrates how to customize the query interface for a specific dynamic relationship by passing the query_class argument to the relationship function. This provides custom query behavior for that relationship only.\nSOURCE: https://github.com/pallets-eco/flask-sqlalchemy/blob/main/docs/customizing.rst#2025-04-22_snippet_7\n\nLANGUAGE: python\nCODE:\n```\ndb.relationship(User, lazy=\"dynamic\", query_class=GetOrQuery)\n```\n\n----------------------------------------\n\nTITLE: Version Check Python Import Example\nDESCRIPTION: Shows the recommended way to check Flask-SQLAlchemy version using importlib.metadata instead of the deprecated __version__ attribute.\nSOURCE: https://github.com/pallets-eco/flask-sqlalchemy/blob/main/CHANGES.rst#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom importlib.metadata import version\nflask_sqlalchemy_version = version(\"flask-sqlalchemy\")\n```\n\n----------------------------------------\n\nTITLE: Installing Flask-SQLAlchemy with pip\nDESCRIPTION: Command to install or update Flask-SQLAlchemy using pip. This installs the latest version of the extension from PyPI.\nSOURCE: https://github.com/pallets-eco/flask-sqlalchemy/blob/main/docs/quickstart.rst#2025-04-22_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n$ pip install -U Flask-SQLAlchemy\n```\n\n----------------------------------------\n\nTITLE: Running Flaskr Application on Windows\nDESCRIPTION: Commands for setting up environment variables, initializing the database, and running the Flaskr application on Windows command prompt. Uses 'set' instead of 'export' for environment variables.\nSOURCE: https://github.com/pallets-eco/flask-sqlalchemy/blob/main/examples/flaskr/README.rst#2025-04-22_snippet_6\n\nLANGUAGE: text\nCODE:\n```\n> set FLASK_APP=flaskr\n> set FLASK_ENV=development\n> flask init-db\n> flask run\n```\n\n----------------------------------------\n\nTITLE: Installing Flaskr Application\nDESCRIPTION: Command for installing the Flaskr application in development mode. The -e flag installs the package in editable mode, allowing changes to be immediately reflected without reinstallation.\nSOURCE: https://github.com/pallets-eco/flask-sqlalchemy/blob/main/examples/flaskr/README.rst#2025-04-22_snippet_3\n\nLANGUAGE: text\nCODE:\n```\n$ pip install -e .\n```\n\n----------------------------------------\n\nTITLE: Installing and Running Tests for Flaskr\nDESCRIPTION: Commands for installing test dependencies and running the test suite with pytest. The [test] extra installs all required testing dependencies.\nSOURCE: https://github.com/pallets-eco/flask-sqlalchemy/blob/main/examples/flaskr/README.rst#2025-04-22_snippet_7\n\nLANGUAGE: text\nCODE:\n```\n$ pip install -e '.[test]'\n$ python3 -m pytest\n```\n\n----------------------------------------\n\nTITLE: Running Basic Tests for Flask-SQLAlchemy with Pytest\nDESCRIPTION: Command to run the basic test suite using pytest. This verifies that your changes don't break existing functionality.\nSOURCE: https://github.com/pallets-eco/flask-sqlalchemy/blob/main/CONTRIBUTING.rst#2025-04-22_snippet_9\n\nLANGUAGE: text\nCODE:\n```\n$ pytest\n```\n\n----------------------------------------\n\nTITLE: Running Test Coverage for Flask-SQLAlchemy\nDESCRIPTION: Commands to collect coverage information and generate a coverage report. This helps identify code that needs additional testing.\nSOURCE: https://github.com/pallets-eco/flask-sqlalchemy/blob/main/CONTRIBUTING.rst#2025-04-22_snippet_11\n\nLANGUAGE: text\nCODE:\n```\n$ pip install \"coverage[toml]\"\n$ coverage run -m pytest\n$ coverage html\n```\n\n----------------------------------------\n\nTITLE: Installing Pre-commit Hooks for Flask-SQLAlchemy Development\nDESCRIPTION: Command to install pre-commit hooks that automatically run code formatters and linters before each commit. This ensures code quality and consistency across contributions.\nSOURCE: https://github.com/pallets-eco/flask-sqlalchemy/blob/main/CONTRIBUTING.rst#2025-04-22_snippet_5\n\nLANGUAGE: text\nCODE:\n```\n$ pre-commit install\n```\n\n----------------------------------------\n\nTITLE: Building Documentation for Flask-SQLAlchemy\nDESCRIPTION: Commands to build the documentation using Sphinx. This converts the reStructuredText files into HTML for viewing in a browser.\nSOURCE: https://github.com/pallets-eco/flask-sqlalchemy/blob/main/CONTRIBUTING.rst#2025-04-22_snippet_12\n\nLANGUAGE: text\nCODE:\n```\n$ cd docs\n$ make html\n```\n\n----------------------------------------\n\nTITLE: Including Changes File in RST Documentation\nDESCRIPTION: A reStructuredText directive that includes the contents of the CHANGES.rst file from the parent directory into the current document.\nSOURCE: https://github.com/pallets-eco/flask-sqlalchemy/blob/main/docs/changes.rst#2025-04-22_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. include:: ../CHANGES.rst\n```\n\n----------------------------------------\n\nTITLE: Pushing Changes and Creating a Pull Request for Flask-SQLAlchemy\nDESCRIPTION: Command to push your local branch to your fork on GitHub before creating a pull request. This uploads your changes to GitHub so they can be reviewed and merged.\nSOURCE: https://github.com/pallets-eco/flask-sqlalchemy/blob/main/CONTRIBUTING.rst#2025-04-22_snippet_8\n\nLANGUAGE: text\nCODE:\n```\n$ git push --set-upstream fork your-branch-name\n```\n\n----------------------------------------\n\nTITLE: Defining Test Dependencies for Flask-SQLAlchemy with pip-compile\nDESCRIPTION: This pip-compiled file specifies the exact versions of test dependencies for the Flask-SQLAlchemy project. It includes pytest and its required packages, ensuring consistent testing environments.\nSOURCE: https://github.com/pallets-eco/flask-sqlalchemy/blob/main/requirements/tests.txt#2025-04-22_snippet_0\n\nLANGUAGE: pip\nCODE:\n```\n#\n# This file is autogenerated by pip-compile with Python 3.13\n# by the following command:\n#\n#    pip-compile tests.in\n#\niniconfig==2.0.0\n    # via pytest\npackaging==24.1\n    # via pytest\npluggy==1.5.0\n    # via pytest\npytest==8.3.3\n    # via -r tests.in\n```\n\n----------------------------------------\n\nTITLE: Creating a Release Branch for Flask-SQLAlchemy\nDESCRIPTION: Command to create a release branch for preparing a new release. Release branches are used to isolate release preparation from ongoing development.\nSOURCE: https://github.com/pallets-eco/flask-sqlalchemy/blob/main/CONTRIBUTING.rst#2025-04-22_snippet_13\n\nLANGUAGE: text\nCODE:\n```\n$ git switch -c release-A.B.C A.B.x\n```\n\n----------------------------------------\n\nTITLE: Generating pip requirements for Flask-SQLAlchemy documentation\nDESCRIPTION: This is a pip-compiled requirements file created from docs.in that lists all the dependencies needed for building Flask-SQLAlchemy documentation. It includes Sphinx, Pallets themes, and various Sphinx extensions along with all their dependencies at specific versions.\nSOURCE: https://github.com/pallets-eco/flask-sqlalchemy/blob/main/requirements/docs.txt#2025-04-22_snippet_0\n\nLANGUAGE: pip\nCODE:\n```\n#\n# This file is autogenerated by pip-compile with Python 3.13\n# by the following command:\n#\n#    pip-compile docs.in\n#\nalabaster==1.0.0\n    # via sphinx\nbabel==2.16.0\n    # via sphinx\ncertifi==2024.8.30\n    # via requests\ncharset-normalizer==3.4.0\n    # via requests\ndocutils==0.21.2\n    # via sphinx\nidna==3.10\n    # via requests\nimagesize==1.4.1\n    # via sphinx\njinja2==3.1.4\n    # via sphinx\nmarkupsafe==3.0.2\n    # via jinja2\npackaging==24.1\n    # via\n    #   pallets-sphinx-themes\n    #   sphinx\npallets-sphinx-themes==2.3.0\n    # via -r docs.in\npygments==2.18.0\n    # via sphinx\nrequests==2.32.3\n    # via sphinx\nsnowballstemmer==2.2.0\n    # via sphinx\nsphinx==8.1.3\n    # via\n    #   -r docs.in\n    #   pallets-sphinx-themes\n    #   sphinx-notfound-page\n    #   sphinxcontrib-log-cabinet\nsphinx-notfound-page==1.0.4\n    # via pallets-sphinx-themes\nsphinxcontrib-applehelp==2.0.0\n    # via sphinx\nsphinxcontrib-devhelp==2.0.0\n    # via sphinx\nsphinxcontrib-htmlhelp==2.1.0\n    # via sphinx\nsphinxcontrib-jsmath==1.0.1\n    # via sphinx\nsphinxcontrib-log-cabinet==1.0.1\n    # via -r docs.in\nsphinxcontrib-qthelp==2.0.0\n    # via sphinx\nsphinxcontrib-serializinghtml==2.0.0\n    # via sphinx\nurllib3==2.2.3\n    # via requests\n```\n\n----------------------------------------\n\nTITLE: Merging a Fix Release Branch into Main for Flask-SQLAlchemy\nDESCRIPTION: Git commands to merge a fix release branch back into the main branch after a release. This ensures that all fixes are incorporated into future development.\nSOURCE: https://github.com/pallets-eco/flask-sqlalchemy/blob/main/CONTRIBUTING.rst#2025-04-22_snippet_16\n\nLANGUAGE: text\nCODE:\n```\n$ git switch A.B.x\n$ git pull\n$ git switch main\n$ git merge A.B.x\n$ git push\n```\n\n----------------------------------------\n\nTITLE: Generating pip-compiled Requirements with pip-compile\nDESCRIPTION: Command used to generate the requirements file from dev.in input file using pip-compile with Python 3.13.\nSOURCE: https://github.com/pallets-eco/flask-sqlalchemy/blob/main/requirements/dev.txt#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\npip-compile dev.in\n```\n\n----------------------------------------\n\nTITLE: Creating a New Fix Release Branch after a Feature Release\nDESCRIPTION: Git commands to create a new branch for fix releases after a feature release. This branch will be used for any future bug fixes to the feature release.\nSOURCE: https://github.com/pallets-eco/flask-sqlalchemy/blob/main/CONTRIBUTING.rst#2025-04-22_snippet_17\n\nLANGUAGE: text\nCODE:\n```\n$ git switch main\n$ git pull\n$ git switch -c A.B.x\n$ git push\n```\n\n----------------------------------------\n\nTITLE: Pip-compile Generated Requirements for Flask-SQLAlchemy Build Dependencies\nDESCRIPTION: This is an automatically generated pip requirements file created by running pip-compile on build.in. It specifies the exact versions of build (1.2.2.post1), packaging (24.1), and pyproject-hooks (1.2.0) needed for building the Flask-SQLAlchemy project.\nSOURCE: https://github.com/pallets-eco/flask-sqlalchemy/blob/main/requirements/build.txt#2025-04-22_snippet_0\n\nLANGUAGE: pip\nCODE:\n```\nbuild==1.2.2.post1\n    # via -r build.in\npackaging==24.1\n    # via build\npyproject-hooks==1.2.0\n    # via build\n```\n\n----------------------------------------\n\nTITLE: Including BSD-3-Clause License Text in reStructuredText\nDESCRIPTION: This snippet uses the 'literalinclude' directive to embed the contents of the LICENSE.txt file into the document. The 'language' option is set to 'text' to ensure proper formatting of the license text.\nSOURCE: https://github.com/pallets-eco/flask-sqlalchemy/blob/main/docs/license.rst#2025-04-22_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. literalinclude:: ../LICENSE.txt\n    :language: text\n```"
  }
]