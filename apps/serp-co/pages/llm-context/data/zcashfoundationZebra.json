[
  {
    "owner": "zcashfoundation",
    "repo": "zebra",
    "content": "TITLE: Acquiring Readiness in Order to Prevent Deadlocks (Rust)\nDESCRIPTION: This snippet illustrates how to safely poll readiness for multiple verifiers (such as checkpoint and block verifiers) in a fixed order to avoid possible deadlocks or hangs in concurrent async logic. By enforcing strict order—checkpoint before block—contention between buffer slots is reduced and forward progress is guaranteed. The method uses the ready! macro, expects self to have checkpoint and block verifier fields, and returns a Poll upon readiness. Proper buffer sizing is implied, and errors are mapped as appropriate. Inputs are the context and self reference, and output is a ready or pending poll state with verification result.\nSOURCE: https://github.com/zcashfoundation/zebra/blob/main/book/src/dev/rfcs/0011-async-rust-in-zebra.md#_snippet_3\n\nLANGUAGE: rust\nCODE:\n```\n// We acquire checkpoint readiness before block readiness, to avoid an unlikely\n// hang during the checkpoint to block verifier transition. If the checkpoint and\n// block verifiers are contending for the same buffer/batch, we want the checkpoint\n// verifier to win, so that checkpoint verification completes, and block verification\n// can start. (Buffers and batches have multiple slots, so this contention is unlikely.)\n//\n// The chain verifier holds one slot in each verifier, for each concurrent task.\n// Therefore, any shared buffers or batches polled by these verifiers should double\n// their bounds. (For example, the state service buffer.)\nready!(self\n    .checkpoint\n    .poll_ready(cx)\n    .map_err(VerifyChainError::Checkpoint))?;\nready!(self.block.poll_ready(cx).map_err(VerifyChainError::Block))?;\nPoll::Ready(Ok(()))\n```\n\n----------------------------------------\n\nTITLE: Starting Zebra with Docker Compose\nDESCRIPTION: Uses Docker Compose to build (if necessary) and start the Zebra service defined in the `docker/docker-compose.yml` file within the cloned Zebra repository. This is the recommended way to run Zebra with Docker.\nSOURCE: https://github.com/zcashfoundation/zebra/blob/main/book/src/user/docker.md#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\ndocker compose -f docker/docker-compose.yml up\n```\n\n----------------------------------------\n\nTITLE: Atomic Shutdown Flag Implementation - Rust\nDESCRIPTION: This code demonstrates how Zebra uses an atomic boolean flag (`IS_SHUTTING_DOWN`) to signal shutdown status across threads. It utilizes `AtomicBool` from the `std::sync::atomic` module and specifies `Ordering::SeqCst` for memory ordering to prevent data races during shutdown. The code includes functions to check and set the shutdown flag.\nSOURCE: https://github.com/zcashfoundation/zebra/blob/main/book/src/dev/rfcs/0011-async-rust-in-zebra.md#_snippet_7\n\nLANGUAGE: rust\nCODE:\n```\n/// A flag to indicate if Zebra is shutting down.\n//\n/// Initialized to `false` at startup.\npub static IS_SHUTTING_DOWN: AtomicBool = AtomicBool::new(false);\n\n/// Returns true if the application is shutting down.\npub fn is_shutting_down() -> bool {\n    // ## Correctness:\n    //\n    // Since we're shutting down, and this is a one-time operation,\n    // performance is not important. So we use the strongest memory\n    // ordering.\n    // https://doc.rust-lang.org/nomicon/atomics.html#sequentially-consistent\n    IS_SHUTTING_DOWN.load(Ordering::SeqCst)\n}\n\n/// Sets the Zebra shutdown flag to `true`.\npub fn set_shutting_down() {\n    IS_SHUTTING_DOWN.store(true, Ordering::SeqCst);\n}\n```\n\n----------------------------------------\n\nTITLE: Briefly Holding std::sync::Mutex for Cloning Shared State (Rust)\nDESCRIPTION: This code snippet shows a non-async-aware (threaded) mutex being briefly held solely for the duration of a state clone operation. It is used when a data structure must be shared between async and non-async code, and an async mutex is not possible or efficient. The lock is held only for cloning, minimizing thread blocking and contention. The input is a shared address book protected by std::sync::Mutex, and after cloning, further transformation is performed outside the lock. No other locks should be acquired and no await points should occur while holding this lock.\nSOURCE: https://github.com/zcashfoundation/zebra/blob/main/book/src/dev/rfcs/0011-async-rust-in-zebra.md#_snippet_2\n\nLANGUAGE: rust\nCODE:\n```\n// # Correctness\n//\n// Briefly hold the address book threaded mutex while\n// cloning the address book. Then sanitize after releasing\n// the lock.\nlet peers = address_book.lock().unwrap().clone();\nlet mut peers = peers.sanitized();\n```\n\n----------------------------------------\n\nTITLE: Configuring Zebra - zebrad.toml\nDESCRIPTION: This snippet configures the `zebrad.toml` file for connecting to the testnet. It sets the network to 'Testnet', includes a testnet transparent address for mining rewards, enables the RPC server, and disables cookie authentication.  The example config shows settings for consensus, mempool, network, RPC, state, sync, tracing, and mining.\nSOURCE: https://github.com/zcashfoundation/zebra/blob/main/book/src/user/mining-testnet-s-nomp.md#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n    [consensus]\n    checkpoint_sync = true\n\n    [mempool]\n    eviction_memory_time = '1h'\n    tx_cost_limit = 80000000\n\n    [metrics]\n\n    [network]\n    crawl_new_peer_interval = '1m 1s'\n    initial_mainnet_peers = [\n        'dnsseed.z.cash:8233',\n        'dnsseed.str4d.xyz:8233',\n        'mainnet.seeder.zfnd.org:8233',\n        'mainnet.is.yolo.money:8233',\n    ]\n    initial_testnet_peers = [\n        'dnsseed.testnet.z.cash:18233',\n        'testnet.seeder.zfnd.org:18233',\n        'testnet.is.yolo.money:18233',\n    ]\n    listen_addr = '0.0.0.0:18233'\n    network = 'Testnet'\n    peerset_initial_target_size = 25\n\n    [rpc]\n    debug_force_finished_sync = false\n    parallel_cpu_threads = 1\n    listen_addr = '127.0.0.1:18232'\n    enable_cookie_auth = false\n\n    [state]\n    cache_dir = '/home/ar/.cache/zebra'\n    delete_old_database = true\n    ephemeral = false\n\n    [sync]\n    checkpoint_verify_concurrency_limit = 1000\n    download_concurrency_limit = 50\n    full_verify_concurrency_limit = 20\n    parallel_cpu_threads = 0\n\n    [tracing]\n    buffer_limit = 128000\n    force_use_color = false\n    use_color = true\n    use_journald = false\n\n    [mining]\n    miner_address = 't27eWDgjFYJGVXmzrXeVjnb5J3uXDM9xH9v'\n```\n\n----------------------------------------\n\nTITLE: Configuring Zebra for Regtest (TOML)\nDESCRIPTION: Example TOML configuration snippet for running Zebra on the Regtest network. Includes sections for enabling mining (`[mining]`), setting the network to Regtest (`[network]`), optionally configuring network upgrade activation heights (`[network.testnet_parameters.activation_heights]`), making the state ephemeral (`[state]`), and enabling the RPC server (`[rpc]`). These settings are necessary for mining blocks and interacting with the node via RPC on Regtest.\nSOURCE: https://github.com/zcashfoundation/zebra/blob/main/book/src/user/regtest.md#_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[mining]\nminer_address = 't27eWDgjFYJGVXmzrXeVjnb5J3uXDM9xH9v'\n    \n[network]\nnetwork = \"Regtest\"\n\n# This section may be omitted when testing only Canopy\n[network.testnet_parameters.activation_heights]\n# Configured activation heights must be greater than or equal to 1, \n# block height 0 is reserved for the Genesis network upgrade in Zebra\nNU5 = 1 \n\n# This section may be omitted if a persistent Regtest chain state is desired\n[state]\nephemeral = true\n\n# This section may be omitted if it's not necessary to send transactions to Zebra's mempool\n[rpc]\nlisten_addr = \"0.0.0.0:18232\"\n```\n\n----------------------------------------\n\nTITLE: Running Zebra\nDESCRIPTION: This command starts the Zebra node. If the configuration file is in the default directory, Zebra will automatically read it. You can specify a custom configuration file path using the `-c` flag.\nSOURCE: https://github.com/zcashfoundation/zebra/blob/main/book/src/user/mining.md#_snippet_3\n\nLANGUAGE: console\nCODE:\n```\nzebrad\n```\n\n----------------------------------------\n\nTITLE: State Service Request/Response API in Rust\nDESCRIPTION: API definition for the state service, including CommitBlock and CommitFinalizedBlock for writing blocks to state, and Depth and Tip requests for reading state information.\nSOURCE: https://github.com/zcashfoundation/zebra/blob/main/book/src/dev/rfcs/0005-state-updates.md#_snippet_19\n\nLANGUAGE: rust\nCODE:\n```\nCommitBlock {\n    block: Arc<Block>,\n    sprout_anchor: sprout::tree::Root,\n    sapling_anchor: sapling::tree::Root,\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Zebra Configuration File\nDESCRIPTION: This command generates a default Zebra configuration file and saves it to the specified directory. The `-o` flag specifies the output file path.\nSOURCE: https://github.com/zcashfoundation/zebra/blob/main/book/src/user/mining.md#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\nmkdir -p ~/.config\nzebrad generate -o ~/.config/zebrad.toml\n```\n\n----------------------------------------\n\nTITLE: Serializing/Deserializing ValueBalance and Amount for Disk Storage in Zebra (Rust)\nDESCRIPTION: Implements the `IntoDisk` and `FromDisk` traits for `ValueBalance` and `Amount`. This allows these structs to be serialized into and deserialized from byte arrays ([u8; 32] for `ValueBalance`, [u8; 8] for `Amount`) for persistent storage in a disk database like RocksDB. It handles the conversion between in-memory structures and disk-friendly byte formats required for persistence.\nSOURCE: https://github.com/zcashfoundation/zebra/blob/main/book/src/dev/rfcs/0012-value-pools.md#_snippet_15\n\nLANGUAGE: Rust\nCODE:\n```\nimpl IntoDisk for ValueBalance<C> {\n    type Bytes = [u8; 32];\n\n    fn as_bytes(&self) -> Self::Bytes {\n        [self.transparent.to_bytes(), self.sprout.to_bytes(),\n        self.sapling.to_bytes(), self.orchard.to_bytes()].concat()\n    }\n}\n\nimpl FromDisk for ValueBalance<C> {\n    fn from_bytes(bytes: impl AsRef<[u8]>) -> Self {\n        let array = bytes.as_ref().try_into().unwrap();\n        ValueBalance {\n            transparent: Amount::from_bytes(array[0..8]).try_into().unwrap()\n            sprout: Amount::from_bytes(array[8..16]).try_into().unwrap()\n            sapling: Amount::from_bytes(array[16..24]).try_into().unwrap()\n            orchard: Amount::from_bytes(array[24..32]).try_into().unwrap()\n        }\n    }\n}\n\nimpl IntoDisk for Amount {\n    type Bytes = [u8; 8];\n\n    fn as_bytes(&self) -> Self::Bytes {\n        self.to_bytes()\n    }\n}\n\nimpl FromDisk for Amount {\n    fn from_bytes(bytes: impl AsRef<[u8]>) -> Self {\n        let array = bytes.as_ref().try_into().unwrap();\n        Amount::from_bytes(array)\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining V5 Sapling Spend Structures in Rust\nDESCRIPTION: This set of Rust structs models the V5 Sapling spending components for Zcash transactions, reflecting protocol requirements for segregated serialization of spend data. The `Spend` struct is generic over an anchor variant to differentiate anchor types (V4 vs. V5). `SpendPrefixInTransactionV5` contains the subset of fields for the V5 transaction prefix serialization, excluding proof and signature which are stored separately. The code requires the `AnchorVariant` trait, `commitment`, `note`, `redjubjub` cryptographic types, and `Groth16Proof` for zero-knowledge proof representation. Serialization uses custom derive traits `ZcashSerialize` and `ZcashDeserialize`. Note that `Spend<SharedAnchor>` lacks direct (de)serialization and must be split and recombined via provided conversion methods.\nSOURCE: https://github.com/zcashfoundation/zebra/blob/main/book/src/dev/rfcs/0010-v5-transaction.md#_snippet_3\n\nLANGUAGE: Rust\nCODE:\n```\nstruct Spend<AnchorV: AnchorVariant> {\n    cv: commitment::ValueCommitment,\n    per_spend_anchor: AnchorV::PerSpend,\n    nullifier: note::Nullifier,\n    rk: redjubjub::VerificationKeyBytes<SpendAuth>,\n    // This field is stored in a separate array in v5 transactions, see:\n    // https://zips.z.cash/protocol/nu5.pdf#txnencodingandconsensus\n    // parse using `zcash_deserialize_external_count` and `zcash_serialize_external_count`\n    zkproof: Groth16Proof,\n    // This fields is stored in another separate array in v5 transactions\n    spend_auth_sig: redjubjub::Signature<SpendAuth>,\n}\n\n/// The serialization prefix fields of a `Spend` in Transaction V5.\n///\n/// In `V5` transactions, spends are split into multiple arrays, so the prefix,\n/// proof, and signature must be serialised and deserialized separately.\n///\n/// Serialized as `SpendDescriptionV5` in [protocol specification §7.3].\nstruct SpendPrefixInTransactionV5 {\n    cv: commitment::ValueCommitment,\n    nullifier: note::Nullifier,\n    rk: redjubjub::VerificationKeyBytes<SpendAuth>,\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Zebra State Request Enum\nDESCRIPTION: This code snippet shows the definition of the `zebra_state::Request` enum, which represents the set of operations supported by the Zebra state service. The enum includes variants for committing blocks (finalized and non-finalized), querying block depth, retrieving the tip, requesting a block locator, fetching transactions, and retrieving blocks by hash or height.\nSOURCE: https://github.com/zcashfoundation/zebra/blob/main/book/src/dev/rfcs/0005-state-updates.md#_snippet_1\n\nLANGUAGE: Rust\nCODE:\n```\npub enum Request {\n    CommitBlock {\n        block: Arc<Block>,\n    },\n    CommitFinalizedBlock {\n        block: Arc<Block>,\n    },\n    Depth(Hash),\n    Tip,\n    BlockLocator,\n    Transaction(Hash),\n    Block(HashOrHeight),\n\n    // .. some variants omitted\n}\n```\n\n----------------------------------------\n\nTITLE: Queue and Commit Finalized Blocks in Rust\nDESCRIPTION: Function that commits blocks to the finalized state in RocksDB, checking block ordering, updating transaction data, and maintaining chain anchors and history.\nSOURCE: https://github.com/zcashfoundation/zebra/blob/main/book/src/dev/rfcs/0005-state-updates.md#_snippet_17\n\nLANGUAGE: rust\nCODE:\n```\npub(super) fn queue_and_commit_finalized_blocks(&mut self, queued_block: QueuedBlock)\n```\n\n----------------------------------------\n\nTITLE: Configuring Zebra for Custom Testnet\nDESCRIPTION: This snippet demonstrates a basic configuration file setup for a custom Testnet.  It sets up the mining parameters, the network to Testnet, disables peers, sets network parameters and activation heights for network upgrades.\nSOURCE: https://github.com/zcashfoundation/zebra/blob/main/book/src/user/custom-testnets.md#_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[mining]\nminer_address = 't27eWDgjFYJGVXmzrXeVjnb5J3uXDM9xH9v'\n    \n[network]\nnetwork = \"Testnet\"\n\n# No peers\ninitial_testnet_peers = []\n\n[network.testnet_parameters]\nnetwork_name = \"ConfiguredTestnet_1\"\n# The Testnet network magic is not reserved, but it's not recommended\n# for use with incompatible Testnet parameters like those in this config.\nnetwork_magic = [0, 1, 0, 255]\nslow_start_interval = 0\ntarget_difficulty_limit = \"0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f\"\ndisable_pow = true\n\n# Configured activation heights must be greater than 0, and less than\n# 2^31. Block height 0 is reserved for the Genesis network upgrade in Zebra.\n#\n# Network upgrades must be activated in the order that they were added to Zcash,\n# configuring the activation heights of recent network upgrades will activate\n# any omitted prior network upgrades at the same height. \n#\n# For example, configuring the activation height of NU5 to block height 1 without\n# configuring any other network upgrade activation heights will set the\n# activation heights of BeforeOverwinter, Overwinter, Sapling, Blossom, \n# Heartwood, and Canopy at block height 1 as well.\n[network.testnet_parameters.activation_heights]\nNU5 = 1\n\n# This section may be omitted if it's not necessary to \n# add transactions to Zebra's mempool\n[rpc]\nlisten_addr = \"0.0.0.0:18232\"\n```\n\n----------------------------------------\n\nTITLE: Saving Tip Value Pool During Block Commit in Zebra (Rust)\nDESCRIPTION: Saves the chain's tip value pool into the \"tip_chain_value_pool\" RocksDB column family during the block commit process. For the genesis block (height 0), it stores the default `ValueBalance`. For subsequent blocks, it calculates the new pool value by adding the current block's value balance to the previous tip's value pool and inserts it into the database using a batch write, ensuring the cumulative state is persisted.\nSOURCE: https://github.com/zcashfoundation/zebra/blob/main/book/src/dev/rfcs/0012-value-pools.md#_snippet_21\n\nLANGUAGE: Rust\nCODE:\n```\n// Consensus rule: The block height of the genesis block is 0\n// https://zips.z.cash/protocol/protocol.pdf#blockchain\nif height == block::Height(0) {\n    batch.zs_insert(tip_chain_value_pool, height, ValueBalance::default());\n} else {\n    let current_pool = self.current_value_pool();\n    batch.zs_insert(tip_chain_value_pool, height, (current_pool + finalized.block_value_balance)?);\n}\n```\n\n----------------------------------------\n\nTITLE: Removing the tip block from a Chain in Rust\nDESCRIPTION: The `pop_tip` function removes the highest height block from the chain's non-finalized segment, updating associated cumulative data and removing related hashes, UTXOs, and nullifiers, preparing the chain for reorganization.\nSOURCE: https://github.com/zcashfoundation/zebra/blob/main/book/src/dev/rfcs/0005-state-updates.md#_snippet_6\n\nLANGUAGE: rust\nCODE:\n```\nfn pop_tip(&mut self) {\n    // Remove highest height block from self.blocks\n    // Update cumulative data members and remove associated hashes, utxos, nullifiers\n}\n```\n\n----------------------------------------\n\nTITLE: Running Zebra with Prometheus and Grafana using Docker Compose\nDESCRIPTION: First builds the necessary images (including a Zebra image with the `prometheus` feature) using the `docker-compose.grafana.yml` file, then starts the Zebra, Prometheus, and Grafana services defined within it. This sets up a monitoring stack for Zebra.\nSOURCE: https://github.com/zcashfoundation/zebra/blob/main/book/src/user/docker.md#_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\ndocker compose -f docker/docker-compose.grafana.yml build --no-cache\ndocker compose -f docker/docker-compose.grafana.yml up\n```\n\n----------------------------------------\n\nTITLE: Validating Block Subsidy Consensus Rules in Rust\nDESCRIPTION: Defines the primary consensus validation function `subsidy_is_valid` located in `zebra-consensus/src/block/check.rs`. This function orchestrates the validation of all subsidy-related rules (founders' reward, funding streams, shielded coinbase) for a given block on a specific network.\nSOURCE: https://github.com/zcashfoundation/zebra/blob/main/book/src/dev/rfcs/drafts/xxxx-block-subsidy.md#_snippet_4\n\nLANGUAGE: Rust\nCODE:\n```\n`subsidy_is_valid(Network, &Block) -> Result<(), BlockError>`\n```\n\n----------------------------------------\n\nTITLE: Asynchronous State Service Interface Using Tower in Rust\nDESCRIPTION: This snippet outlines the architecture and behavior guarantees of the asynchronous state service interface built on Tower's Service trait with a Buffer wrapper, facilitating shared access through an actor model and message passing over an mpsc channel. It explains the distinction between external API behaviors and internal RocksDB access, allowing controlled synchronous writes and flexible synchronous or asynchronous reads. The State service serializes requests, ensuring linearization and preventing write races, while enabling asynchronous reads to observe consistent or later states. Dependencies include Tower's Service, futures for asynchronous operations, and RocksDB for state persistence.\nSOURCE: https://github.com/zcashfoundation/zebra/blob/main/book/src/dev/rfcs/0005-state-updates.md#_snippet_2\n\n\n\n----------------------------------------\n\nTITLE: Sample Zebra Configuration File\nDESCRIPTION: This sample configuration file is provided to guide users on how to set up the Zebra node for a private testnet. It configures the consensus mechanism, memory management, metrics, mining, network settings, RPC access, state management, synchronization, and tracing. The primary focus is to configure the `network` and `network.testnet_parameters` sections, and specifically the `initial_testnet_peers` and the `network.testnet_parameters.activation_heights`.\nSOURCE: https://github.com/zcashfoundation/zebra/blob/main/book/src/dev/private-testnet.md#_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\n```\n[consensus]\ncheckpoint_sync = true\n\n[mempool]\neviction_memory_time = \"1h\"\ntx_cost_limit = 80000000\n\n[metrics]\n\n[mining]\ndebug_like_zcashd = true\nminer_address = \"t27eWDgjFYJGVXmzrXeVjnb5J3uXDM9xH9v\"\n# if you want to enable mining, which also requires selecting the `internal-miner` compilation feature\ninternal_miner = true\n\n[network]\n# This will save peers to a file. Take care that it also reads peers from it;\n# if you want to be truly isolated and only connect to the other participants,\n# either disable this or delete the peers file before starting.\ncache_dir = true\ncrawl_new_peer_interval = \"1m 1s\"\n\ninitial_mainnet_peers = []\n\ninitial_testnet_peers = [\n    # List the other participant's Tailscale IPs here.\n    # You can also keep the default DNS seeders if you wish.\n    \"100.10.0.1:18233\",\n]\n\nlisten_addr = \"0.0.0.0:18233\"\nmax_connections_per_ip = 1\nnetwork = \"Testnet\"\npeerset_initial_target_size = 25\n\n[network.testnet_parameters]\n\n[network.testnet_parameters.activation_heights]\nBeforeOverwinter = 1\nOverwinter = 207_500\nSapling = 280_000\nBlossom = 584_000\nHeartwood = 903_800\nCanopy = 1_028_500\nNU5 = 1_842_420\nNU6 = 2_969_920\n\n[rpc]\ndebug_force_finished_sync = false\nparallel_cpu_threads = 0\nlisten_addr = \"127.0.0.1:8232\"\nindexer_listen_addr = \"127.0.0.1:8231\"\n\n[state]\ndelete_old_database = true\nephemeral = false\n\n[sync]\ncheckpoint_verify_concurrency_limit = 1000\ndownload_concurrency_limit = 50\nfull_verify_concurrency_limit = 20\nparallel_cpu_threads = 0\n\n[tracing]\nbuffer_limit = 128000\nforce_use_color = false\nuse_color = true\nuse_journald = false\n# This enables debug network logging. It can be useful but it's very verbose!\nfilter = 'info,zebra_network=debug'\n```\n```\n\n----------------------------------------\n\nTITLE: Removing the root block from a Chain in Rust\nDESCRIPTION: The `pop_root` function removes the lowest height block from a chain's non-finalized segment, updating various cumulative data structures (such as hashes, work, UTXOs, and nullifiers), and returns the removed block. This method maintains chain consistency during reorganization.\nSOURCE: https://github.com/zcashfoundation/zebra/blob/main/book/src/dev/rfcs/0005-state-updates.md#_snippet_4\n\nLANGUAGE: rust\nCODE:\n```\npub fn pop_root(&mut self) -> Arc<Block> {\n    // Remove the lowest height block from self.blocks\n    // Update cumulative data members\n    // Remove associated hashes and utxos\n    // Return the removed block\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Chain State with Value Balance in Zebra (Rust)\nDESCRIPTION: Implements the `UpdateWith` trait for the `Chain` struct, defining how the chain's `value_pool` is updated and reverted using a `ValueBalance`. It modifies the pool by adding the provided balance, returning a `Result` indicating success or failure.\nSOURCE: https://github.com/zcashfoundation/zebra/blob/main/book/src/dev/rfcs/0012-value-pools.md#_snippet_13\n\nLANGUAGE: Rust\nCODE:\n```\nimpl UpdateWith<ValueBalance<NegativeAllowed>> for Chain {\n    fn update_chain_state_with(&mut self, value_balance: &ValueBalance<NegativeAllowed>) -> Result<(), Err> {\n        self.value_pool = (self.value_pool + value_balance)?;\n        Ok(())\n    }\n    fn revert_chain_state_with(&mut self, value_balance: &ValueBalance<NegativeAllowed>) -> Result<(), Err> {\n        self.value_pool = (self.value_pool + value_balance)?;\n        Ok(())\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Definition and State Update of Chain Type for Non-finalized Blockchain Segments in Rust\nDESCRIPTION: This snippet provides the Rust struct definition for the Chain type, describing its role in representing a non-finalized portion of a blockchain with ordered maps and indices for blocks, transactions, UTXOs, and note commitment trees for multiple shielded pools (Sprout, Sapling, Orchard). It caches cumulative state updates and tracks anchors, nullifiers, partial transparent address data, cumulative work, and chain value pools. The push method details how a new block is integrated, updating internal indices and cumulative metadata, ensuring consistent contextual validation as the tip advances. Dependencies include standard collections (BTreeMap, HashMap, HashSet), cryptographic primitives for blocks and transactions, and note commitment tree implementations.\nSOURCE: https://github.com/zcashfoundation/zebra/blob/main/book/src/dev/rfcs/0005-state-updates.md#_snippet_3\n\nLANGUAGE: rust\nCODE:\n```\n#[derive(Debug, Clone)]\npub struct Chain {\n    // The function `eq_internal_state` must be updated every time a field is added to [`Chain`].\n    /// The configured network for this chain.\n    network: Network,\n\n    /// The contextually valid blocks which form this non-finalized partial chain, in height order.\n    pub(crate) blocks: BTreeMap<block::Height, ContextuallyValidBlock>,\n\n    /// An index of block heights for each block hash in `blocks`.\n    pub height_by_hash: HashMap<block::Hash, block::Height>,\n\n    /// An index of [`TransactionLocation`]s for each transaction hash in `blocks`.\n    pub tx_loc_by_hash: HashMap<transaction::Hash, TransactionLocation>,\n\n    /// The [`transparent::Utxo`]s created by `blocks`.\n    ///\n    /// Note that these UTXOs may not be unspent.\n    /// Outputs can be spent by later transactions or blocks in the chain.\n    //\n    // TODO: replace OutPoint with OutputLocation?\n    pub(crate) created_utxos: HashMap<transparent::OutPoint, transparent::OrderedUtxo>,\n    /// The [`transparent::OutPoint`]s spent by `blocks`,\n    /// including those created by earlier transactions or blocks in the chain.\n    pub(crate) spent_utxos: HashSet<transparent::OutPoint>,\n\n    /// The Sprout note commitment tree of the tip of this [`Chain`],\n    /// including all finalized notes, and the non-finalized notes in this chain.\n    pub(super) sprout_note_commitment_tree: sprout::tree::NoteCommitmentTree,\n    /// The Sprout note commitment tree for each anchor.\n    /// This is required for interstitial states.\n    pub(crate) sprout_trees_by_anchor:\n        HashMap<sprout::tree::Root, sprout::tree::NoteCommitmentTree>,\n    /// The Sapling note commitment tree of the tip of this [`Chain`],\n    /// including all finalized notes, and the non-finalized notes in this chain.\n    pub(super) sapling_note_commitment_tree: sapling::tree::NoteCommitmentTree,\n    /// The Sapling note commitment tree for each height.\n    pub(crate) sapling_trees_by_height: BTreeMap<block::Height, sapling::tree::NoteCommitmentTree>,\n    /// The Orchard note commitment tree of the tip of this [`Chain`],\n    /// including all finalized notes, and the non-finalized notes in this chain.\n    pub(super) orchard_note_commitment_tree: orchard::tree::NoteCommitmentTree,\n    /// The Orchard note commitment tree for each height.\n    pub(crate) orchard_trees_by_height: BTreeMap<block::Height, orchard::tree::NoteCommitmentTree>,\n    /// The ZIP-221 history tree of the tip of this [`Chain`],\n    /// including all finalized blocks, and the non-finalized `blocks` in this chain.\n    pub(crate) history_tree: HistoryTree,\n\n    /// The Sprout anchors created by `blocks`.\n    pub(crate) sprout_anchors: MultiSet<sprout::tree::Root>,\n    /// The Sprout anchors created by each block in `blocks`.\n    pub(crate) sprout_anchors_by_height: BTreeMap<block::Height, sprout::tree::Root>,\n    /// The Sapling anchors created by `blocks`.\n    pub(crate) sapling_anchors: MultiSet<sapling::tree::Root>,\n    /// The Sapling anchors created by each block in `blocks`.\n    pub(crate) sapling_anchors_by_height: BTreeMap<block::Height, sapling::tree::Root>,\n    /// The Orchard anchors created by `blocks`.\n    pub(crate) orchard_anchors: MultiSet<orchard::tree::Root>,\n    /// The Orchard anchors created by each block in `blocks`.\n    pub(crate) orchard_anchors_by_height: BTreeMap<block::Height, orchard::tree::Root>,\n\n    /// The Sprout nullifiers revealed by `blocks`.\n    pub(super) sprout_nullifiers: HashSet<sprout::Nullifier>,\n    /// The Sapling nullifiers revealed by `blocks`.\n    pub(super) sapling_nullifiers: HashSet<sapling::Nullifier>,\n    /// The Orchard nullifiers revealed by `blocks`.\n    pub(super) orchard_nullifiers: HashSet<orchard::Nullifier>,\n\n    /// Partial transparent address index data from `blocks`.\n    pub(super) partial_transparent_transfers: HashMap<transparent::Address, TransparentTransfers>,\n\n    /// The cumulative work represented by `blocks`.\n    ///\n    /// Since the best chain is determined by the largest cumulative work,\n    /// the work represented by finalized blocks can be ignored,\n    /// because they are common to all non-finalized chains.\n    pub(super) partial_cumulative_work: PartialCumulativeWork,\n\n    /// The chain value pool balances of the tip of this [`Chain`],\n    /// including the block value pool changes from all finalized blocks,\n    /// and the non-finalized blocks in this chain.\n    ///\n    /// When a new chain is created from the finalized tip,\n    /// it is initialized with the finalized tip chain value pool balances.\n    pub(crate) chain_value_pools: ValueBalance<NonNegative>,\n}\n\n#### `pub fn push(&mut self, block: Arc<Block>)`\n\nPush a block into a chain as the new tip\n\n1. Update cumulative data members\n    - Add the block's hash to `height_by_hash`\n    - Add work to `self.partial_cumulative_work`\n    - For each `transaction` in `block`\n      - Add key: `transaction.hash` and value: `(height, tx_index)` to `tx_loc_by_hash`\n      - Add created utxos to `self.created_utxos`\n      - Add spent utxos to `self.spent_utxos`\n      - Add nullifiers to the appropriate `self.<version>_nullifiers`\n\n2. Add block to `self.blocks`\n```\n\n----------------------------------------\n\nTITLE: Running the Default Zebra Docker Image\nDESCRIPTION: Starts a Zebra container named 'zebra' using the official `zfnd/zebra` image from Docker Hub. This provides a quick way to get a Zebra node running without persistent state.\nSOURCE: https://github.com/zcashfoundation/zebra/blob/main/book/src/user/docker.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ndocker run --name zebra zfnd/zebra\n```\n\n----------------------------------------\n\nTITLE: Chain Comparison Implementation in Rust\nDESCRIPTION: The `Ord` implementation for `Chain` compares chains primarily by their `partial_cumulative_work`, using chain tip hashes as tie-breakers to ensure consistent ordering. This comparison facilitates chain reorganization decisions during consensus.\nSOURCE: https://github.com/zcashfoundation/zebra/blob/main/book/src/dev/rfcs/0005-state-updates.md#_snippet_7\n\nLANGUAGE: rust\nCODE:\n```\nimpl Ord for Chain {\n    fn cmp(&self, other: &Self) -> std::cmp::Ordering {\n        // Compare by partial_cumulative_work, then by chain tip hashes\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Tracing and Metrics in Async Functions - Rust\nDESCRIPTION: This snippet demonstrates how Zebra monitors client requests using the `tracing` and `metrics` crates. It logs trace and debug information, creates related spans for work, and increments counters for specific events (like canceled requests). It depends on the `tracing` and `metrics` crates and expects an `InProgressClientRequest` as input.\nSOURCE: https://github.com/zcashfoundation/zebra/blob/main/book/src/dev/rfcs/0011-async-rust-in-zebra.md#_snippet_10\n\nLANGUAGE: rust\nCODE:\n```\n/// Handle an incoming client request, possibly generating outgoing messages to the\n/// remote peer.\n//\n/// NOTE: the caller should use .instrument(msg.span) to instrument the function.\nasync fn handle_client_request(&mut self, req: InProgressClientRequest) {\n    trace!(?req.request);\n\n    let InProgressClientRequest { request, tx, span } = req;\n\n    if tx.is_canceled() {\n        metrics::counter!(\"peer.canceled\", 1);\n        tracing::debug!(\"ignoring canceled request\");\n        return;\n    }\n    ...\n}\n```\n\n----------------------------------------\n\nTITLE: Function to validate the difficulty threshold of a candidate block\nDESCRIPTION: Checks whether the difficulty threshold specified in a candidate block's header matches the expected threshold computed using the current difficulty adjustment context. Ensures consensus rules are obeyed by comparing actual and computed difficulty thresholds, returning an error if invalid.\nSOURCE: https://github.com/zcashfoundation/zebra/blob/main/book/src/dev/rfcs/0006-contextual-difficulty.md#_snippet_2\n\nLANGUAGE: Rust\nCODE:\n```\npub fn difficulty_threshold_is_valid(difficulty_threshold: CompactDifficulty,\n                                     expected_difficulty: AdjustedDifficulty)\n                                     -> Result<(), ValidateContextError> { ... }\n```\n\n----------------------------------------\n\nTITLE: Implementing value_balance for Transaction Inputs in Zebra (Rust)\nDESCRIPTION: Defines Input::value_balance for transparent transaction inputs. Computes the value balance by consulting the provided utxos mapping, which must include every input spent by the transaction. Assumes utxos are checked in transaction/state and returns the appropriate ValueBalance, propagating errors if utxos are missing or time out. Requires HashMap of OutPoint to Utxo, and all type dependencies are part of Zebra’s transparent module.\nSOURCE: https://github.com/zcashfoundation/zebra/blob/main/book/src/dev/rfcs/0012-value-pools.md#_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nimpl Input {\n    fn value_balance(&self, utxos: &HashMap<OutPoint, Utxo>) -> ValueBalance<NegativeAllowed> {\n\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Installing nheqminer\nDESCRIPTION: This command installs the nheqminer CPU miner which supports multiple Equihash solvers. The install involves cloning the nheqminer repository, checking out the zebra-mining branch for the correct fixes, and compiling it using cmake with the tromp solver enabled. The `-j $(nproc)` flag tells make to use all available CPU cores.\nSOURCE: https://github.com/zcashfoundation/zebra/blob/main/book/src/user/mining-testnet-s-nomp.md#_snippet_11\n\nLANGUAGE: shell\nCODE:\n```\ngit clone https://github.com/ZcashFoundation/nheqminer\ncd nheqminer\ngit checkout zebra-mining\n\nmkdir build\ncd build\ncmake -DUSE_CUDA_DJEZO=OFF -DUSE_CPU_XENONCAT=OFF -DUSE_CPU_TROMP=ON ..\nmake -j $(nproc)\n```\n\n----------------------------------------\n\nTITLE: Calculating Median Timespan/Time - Zcash PoW - Rust\nDESCRIPTION: These methods on `AdjustedDifficulty` implement the Zcash specification's calculations for the median timespan (`ActualTimespanBounded`, `ActualTimespan`) and the median time (`MedianTime`) from a sequence of past block times. The median timespan is the difference between medians of block times from specific windows within the last 28 blocks, used as a factor in difficulty adjustment. The `median_time` function finds the median time within a window of 11 block times.\nSOURCE: https://github.com/zcashfoundation/zebra/blob/main/book/src/dev/rfcs/0006-contextual-difficulty.md#_snippet_4\n\nLANGUAGE: Rust\nCODE:\n```\n/// Calculate the bounded median timespan. The median timespan is the\n/// difference of medians of the timespan times, which are the `time`s from\n/// the previous `PoWAveragingWindow + PoWMedianBlockSpan` (28) blocks in the\n/// relevant chain.\n///\n/// Uses the candidate block's `height' and `network` to calculate the\n/// `AveragingWindowTimespan` for that block.\n///\n/// The median timespan is damped by the `PoWDampingFactor`, and bounded by\n/// `PoWMaxAdjustDown` and `PoWMaxAdjustUp`.\n///\n/// Implements `ActualTimespanBounded` from the Zcash specification.\n///\n/// Note: This calculation only uses `PoWMedianBlockSpan` (11) times at the\n/// start and end of the timespan times. timespan times `[11..=16]` are ignored.\nfn median_timespan_bounded(&self) -> Duration { ... }\n\n/// Calculate the median timespan. The median timespan is the difference of\n/// medians of the timespan times, which are the `time`s from the previous\n/// `PoWAveragingWindow + PoWMedianBlockSpan` (28) blocks in the relevant chain.\n///\n/// Implements `ActualTimespan` from the Zcash specification.\n///\n/// See `median_timespan_bounded` for details.\nfn median_timespan(&self) -> Duration { ... }\n\n/// Calculate the median of the `median_block_span_times`: the `time`s from a\n/// slice of `PoWMedianBlockSpan` (11) blocks in the relevant chain.\n///\n/// Implements `MedianTime` from the Zcash specification.\nfn median_time(mut median_block_span_times: [DateTime<Utc>; POW_MEDIAN_BLOCK_SPAN])\n               -> DateTime<Utc> { ... }\n```\n\n----------------------------------------\n\nTITLE: Calculating ShieldedData Value Balance for Sapling Pool in Zebra (Rust)\nDESCRIPTION: Defines sapling::ShieldedData::value_balance to extract the value delta represented by Sapling shielded components. Integrates into the per-transaction and per-block pool calculation infrastructure. Located in shielded_data.rs within the Sapling transaction module.\nSOURCE: https://github.com/zcashfoundation/zebra/blob/main/book/src/dev/rfcs/0012-value-pools.md#_snippet_4\n\nLANGUAGE: rust\nCODE:\n```\npub fn value_balance(&self) -> ValueBalance<NegativeAllowed> {\n\n}\n\n```\n\n----------------------------------------\n\nTITLE: Checking Testnet Minimum Difficulty - Zcash PoW - Rust\nDESCRIPTION: This method on `NetworkUpgrade` determines if a candidate block on the Testnet qualifies for the minimum difficulty adjustment as specified in ZIPs 205 and 208. It checks if the block is on Testnet, is above the minimum difficulty start height (299188), and if the time difference between the current and previous block is strictly greater than the calculated Testnet minimum difficulty gap.\nSOURCE: https://github.com/zcashfoundation/zebra/blob/main/book/src/dev/rfcs/0006-contextual-difficulty.md#_snippet_6\n\nLANGUAGE: Rust\nCODE:\n```\n/// Returns true if the gap between `block_time` and `previous_block_time` is                             \n/// greater than the Testnet minimum difficulty time gap. This time gap                                   \n/// depends on the `network` and `block_height`.                                                          \n///                                                                                                       \n/// Returns false on Mainnet, when `block_height` is less than the minimum                                \n/// difficulty start height, and when the time gap is too small.                                          \n///                                                                                                       \n/// `block_time` can be less than, equal to, or greater than                                              \n/// `previous_block_time`, because block times are provided by miners.                                    \n///                                                                                                       \n/// Implements the Testnet minimum difficulty adjustment from ZIPs 205 and 208.                           \n///                                                                                                       \n/// Spec Note: Some parts of ZIPs 205 and 208 previously specified an incorrect                           \n/// check for the time gap. This function implements the correct \"greater than\"                           \n/// check.                                                                                                \npub fn is_testnet_min_difficulty_block(\n    network: Network,\n    block_height: block::Height,\n    block_time: DateTime<Utc>,\n    previous_block_time: DateTime<Utc>,\n) -> bool { ... }\n```\n\n----------------------------------------\n\nTITLE: Configuring Zebra to Sync Testnet to Custom Block Height in TOML\nDESCRIPTION: This snippet shows the critical parts of the Zebra configuration file enabling the node to sync to a specified testnet block height (2,599,958) after the Nu5 activation. The [network] section sets the listening address and network type, while the [state] section configures Zebra to stop syncing at the designated block height and specifies a cache directory location. Used as a base config for running a custom testnet fork.\nSOURCE: https://github.com/zcashfoundation/zebra/blob/main/book/src/user/fork-zebra-testnet.md#_snippet_0\n\nLANGUAGE: TOML\nCODE:\n```\n[network]\nlisten_addr = \"0.0.0.0:18233\"\nnetwork = \"Testnet\"\n\n[state]\ndebug_stop_at_height = 2599958\ncache_dir = \"/home/user/.cache/zebra\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Zebra for a Custom Testnet with Mainnet Parameters\nDESCRIPTION: This configuration showcases how to configure a Zebra node to run on a custom Testnet, potentially mimicking Mainnet parameters for testing. It covers setting miner addresses, network parameters, and network upgrade activation heights. It includes setting `disable_pow` to `false` which is not recommended with the given target difficulty limit.\nSOURCE: https://github.com/zcashfoundation/zebra/blob/main/book/src/user/custom-testnets.md#_snippet_1\n\nLANGUAGE: toml\nCODE:\n```\n[mining]\n# The Mainnet address prefixes are reserved, all custom Testnets currently\n# use the default public Testnet's address prefixes.\nminer_address = 't27eWDgjFYJGVXmzrXeVjnb5J3uXDM9xH9v'\n    \n[network]\nnetwork = \"Testnet\"\n\n# No peers\ninitial_testnet_peers = []\n\n[network.testnet_parameters]\n# The Mainnet, Testnet, and Regtest network names are reserved.\nnetwork_name = \"ConfiguredTestnet_2\"\n\n# The Mainnet and Regtest network magics are reserved.\nnetwork_magic = [0, 1, 0, 255]\n\nslow_start_interval = 20_000\ngenesis_hash = \"00040fe8ec8471911baa1db1266ea15dd06b4a8a5c453883c000b031973dce08\"\n\n# Note that setting `disable_pow` to `false` with this target difficultly \n# limit will make it very difficult to mine valid blocks onto the chain and\n# is not recommended.\ntarget_difficulty_limit = \"0008000000000000000000000000000000000000000000000000000000000000\"\ndisable_pow = false\n\n# Note that these activation heights are not recommended unless copying the\n# Mainnet best chain and checkpoints to a custom Testnet. Custom Testnets will\n# only try to use the Testnet checkpoints (if the checkpoint file's genesis hash \n# matches the expected network genesis hash), so the Mainnet checkpoints will need\n# to be copied into the Testnet checkpoints file as well.\n[network.testnet_parameters.activation_heights]\nBeforeOverwinter = 1\nOverwinter = 347_500\nSapling = 419_200\nBlossom = 653_600\nHeartwood = 903_000\nCanopy = 1_046_400\nNU5 = 1_687_104\n\n# This section may be omitted if it's not necessary to \n# add transactions to Zebra's mempool\n[rpc]\nlisten_addr = \"0.0.0.0:18232\"\n```\n\n----------------------------------------\n\nTITLE: Troubleshooting Build Dependencies and Compiler Issues (Bash)\nDESCRIPTION: These guidelines help resolve common build issues involving dependencies like clang, libclang, g++, MSVC++, or rustc. They recommend installing necessary packages, updating to latest stable versions, or using alternative compilers such as clang or Xcode for smoother Zebra compilation.\nSOURCE: https://github.com/zcashfoundation/zebra/blob/main/book/src/user/install.md#_snippet_7\n\n\n\n----------------------------------------\n\nTITLE: Handling Network Packets and Datagram Send/Receive in Zebra's Network Module\nDESCRIPTION: This code snippet manages network communication by handling incoming network packets, processing datagrams, and sending responses. It requires dependencies on network I/O libraries and manages buffers to serialize and deserialize data. The core functions include reading packets, processing them, and sending responses asynchronously to maintain network connectivity and data exchange efficacy.\nSOURCE: https://github.com/zcashfoundation/zebra/blob/main/zebra-test/src/vectors/block-test-1-842-467.txt#_snippet_0\n\nLANGUAGE: Rust\nCODE:\n```\n040000009b0cc61db12789e71f38f2670acd5897cec3a3045001546a2dad6f44636238006d453e8ef73f6f6d7b0b16e30af30b6630bff5681a73934844784cd2859ada3db42e0633681cca334bb046e4e2bab6ac5460b9d4199d92195ba0ced0729a8b9f63855e62acfe761f240077b915a8ed7ad4c080720a50514c57acea2e8ee0405b4213959fb4f40000fd400500b77b138a22750db5fcd202d6aeaeddffaa56b7d6031d67791501d37c196156246c427e56c50b1c47d80219bf91c95314bebf1b3651525d4942c8fa5d5b6f221fbf788f6117d79e0502f9a1ff185ed9029c2ec012f90695c889ef7459f2219ac43a3d48b094584d5b2c3aea0af18d41509a4802cc75c7f0fa32281cd8d52427ca259b31748d990ba4df29dbf1ff396e7f04942ad3160e7de9f945cca3e51ab83f0e61bab1361d0c0166b70aada45fd3580f92c582186b30b98cae90b9310a7fcb1a661a3dc9c334ba1d650d4e1e27f96ccf1e5b8bc5355eb8c78d88221eb66babe12e34f79afa1ec261550ac8bce311d4669c88512293612d1e12a506bafb1e08c908aa6471893582ed3fc7013e9b0a2b09ff2e8fbf8330c26fb0135cea614700e2fd53e9d636eaba39242adc6789dc196397f63aa68f52feb483440e36463f1a7aa5d30c6653ba3ea7459e2e6e9df709efac05308ba932e8378a9ddffb0e975dbade66781a5f0a4b23fd5b15f4ca881665c5ec1ac8ef3c361b1701048d5b1408051f2bd2cd7d466814c61eb560ab19e73e478892ed89c6b131d0ea32e18105c68c9e800f33a095de892368ba35f1517e7c41a0f80ab5637122aa5c391a67ebb5987cd302c06dc51efd013af75a1965318e812287f125b752e2006bb650fe31e886b424a78a2e754efd92df42952a95b73081a6661487ba0ef164c67013ff4dce5316ade06219bfa0a45e32ba53972cbf03553baaef1f78e260cfc55b120538baf318c2e261715f013f1d2d21aab51152853a1bf4be1c1bc4aa24899a1a274ea5923009c3b7aa3b75fb2e2514097ccee2865e2cefc6733c1bd3d2d12e8f6dcd73150b4d14fb8a805ea781531d0bf0eb6da0605b3e33230dae5b3e4db7e4940ef7e700d65d931badfaf40f24fb627aeea014854734a3720970eee90e9ed2d20702547106d7ac1d35aa4d60ddadd2a0855251f9840e15799c3dd19236f17ffaa1f40e9e3f80ab3ddb8a8206e07861dfcd85cfc91fd2f50048c3c24b4a5e91c11df2f59487127b5b1965648497a5e2d5267f7d77070612e7b0b620d11ba5e9567abf5cfabb14659ef6fa1d833c19135f28b1a1ba64e4cd77a62540dc9a6e24067f3a942fa34d3f1feb01e5741065a32f397f8baf3b478a019e92c9e9774383ba0a60e502a30ddea2a508b61de2c2cf8ad745b7060f2fbb5d576a927fab9e13ce6d28b9ab3d55f027a9330affb47ef9a47a0321153d9739d9560837a240134123ab46e704b35e397b1c19e73da262553726d852983f7f9b22eaff5d896e10cea3b88093af46b1b858d737d4cd9b70b59ea5b82f422aa0cfa5446150d82620bdf85341e577d3a9221fabdf618b4e0959d640d2856ccbb5d6010fb14cb2390a86d7625e65499d8299788cdff6e28abb5705e6026593bfc257fca9f82af5c64dc897527988b579be2bf6471aadcef0ef43e155518140c801e8a05561eb16644da15627911940af04219659d7fa5f3fbc2db620a65de4e78a86708463a95295d61eb6aeb0b7ab7b04e5a1094e3b4145e1ba82be49f31a5195bdb0328c1c3c95a261a6b1979b5cc6656754ce5a1fd69a24710ec7bb04e42e3b23fb0f91c8b1e7701219e67858d1639bf64e919e49ad6a308c028f778affa004fd3dca029b8218fd4ae20d6d022566e56023795e5fd18aa90add8a042b2dd8899261d144258fa495d46d120dcd06906a726491ef51819852bdc05b3f877869ff6050190b48dbfa1d5303125882bce897e86577ea3b0c6a07df42ba4182af3eeabbd25de5504485ec0c39403256ffefd96d2df42fe11db89a6d71d7376a53ddd5b63590d60fa21b1ef769eb93a4322124ba4065336ce06976bf0967a5214f6efaf75ba1dd0cae182178fc1c02050000800a27a726b4d0d6c200000000231d1c00010000000000000000000000000000000000000000000000000000000000000000ffffffff0603231d1c0101ffffffff0468b6e60e000000001976a9149875aea085c4ac8a3493e14002a9d383e07ee9c988ac286bee000000000017a9140c0bcca02f3cba01a5d7423ac3903d40586399eb8738c94d010000000017a9144e3f0d9a33a2721604cbae2de8d9171e21f8fbe48740787d010000000017a91471e1df05024288a00802de81e08c437859586c8787000000050000800a27a726b4d0d6c2000000004a1d1c0000000000029c62e202c9a610454d9f91fe8027c0bea78ba3953c8930fe69c362969f3286192e590c0aa41166bba9da77350eb368f60ff890997fac1f5f8f85302426fa2910f7d88660aa3ddda6b17004b3e2856d4627da84309e1db250aa1ba86e4af6d93ece0ca4f2f5f0044d5ea149db9dceb9c5812e35ddab702caab9977885cddd3416fa38f4c6e84d69de5faf60ac3333a13cdd0db248e7e0c7a3ed6c8a4b77700807a091a4a61d4531a38e4635b9e97e6f139611729a648ba90b6bd7cac7facb8a0389d15e3bc7e211df4c8d4eddcf436ca54812c35c8b63f29ef2626d31c6919f3cc93ef98c7af35b0d008264ae1ebaca52df3efbdbac97fdac49a3a04007c195be9304301d153d008d0a8c468fb20aa4597141f9bc1feaf98da5c02bcd341a9c974ecb7d6b319c1b64a6de09ff8e04bc1e173f64fb8ec2fd9284b1f86dfe1927fb223e15661103a754e48f1914c672f1eea038434b113dda720e002814045c7c3b7b02cb9538fefc8fbfa2eb35f55f9d3fb18b5244e54777fe86f568d6c9bbcba2a9e64fc29979c517b61675064f26e5261dcf3c138cc264abcd44f7452a3fb3ef799b37460f2375165bb7959d1d94a015a8875faf5242ac606ed5e3f554e44e2211dd6a5982d3bd7fe4172dd1b7011760d88fa2751c8120d1ffe90eb408c72869815ebdff4b128c9667073328d31795a5941a9deb14666923837e8983a3aa9c4461637cdfe4447fcd00bc9ed9cfa262a1e8f17c07c99bd083f64214499ad162eb012a141b0435b086f501ee1c752e36c2544e058b69915866ff8e00094bc6ad30bef08a2128148eadbf756794b99eb615f5fc6794ea86076ba40da60fc1f8b883e7521bf211b5aa92b634a8f74c7eff847ed1c1fb33a05cad34d87cab30b36eae29cb48d6791e7872bb3edf08dd57a11ab1feb89416fb38ade3261a66c9d89ea95a55ca7fa7fe850e1b204683c3aba928e18ede7f7a1a52b1da4cd96151e39be9068b7daeebafe86f9ecefd818e5c7917ba76aee6c045c1255c7dd55e31da61a2b9d9a96f1a1b7632092209e25f42b9803598732db168ba523cf173418f03300b3a9087dbdc83bf59b32a17e511b84345d142690a0319aec301e51db5d381d84d3e973a1d3f4a9d6abffee55e5e31b70c74d4620abbef002666fbf20790784f702fb82b0fc4525ea4d7824bf30a07ce492465a88e9ed142dd1152b60095367fec3295d55e45959b18cbf2d72fe8f45a3f48b889104fde804c57689ca9d2ef24c78c04a212e0545ef60848015057623d3cdd66f6bf4242814356272f8cb7a06debb9bce63d8408f7c8478f0612207ca1d5952d293e2e15d4309540bafee8b25983e2648851c9d09e06da98fca0aa0c7ad72c6d29262323157b772d49b3734012364ff0a5b8a6d1b5165fd7007009d427a9842d034f9a68c35c8a5bb5a36d473d3c16c16d30f04e74eb0695ffecbc67a0bb5376777bcbd073f0ae7e8bb59ec20e0e188dcc3d52315b6df96879b458e9f07be8cb4934c29f2f5f324da73108d4a8720b561a9547c422f3ef4082e6be0ae5f915e54b6825c72ab71c4eecdf13282f2bc1c0a1f83e81ed611bace753130736884598fc843b0e168954b54885370bc83be9d645d8788e9ad4947fea54e54cb7adfe401432fd3e224d6fa1293a722b7dd43a39e7823a8feee66f599abda22ada2cdb02f10c6961b043e3c6f97cda5cfef8d9d8528b79ce2d7994e8c2c4f105506579d1c05387583c32674b8774de9e3f097e25caa187624fdae00b055e2a9c0cf749cc5d38a7471cae87f876fc5fc471e89c6357dafe05c68df18740be43d1e15436a84a973fd3e6f3c146924ede02963391e53a7ca2674f1628dcc205dc10a6693ebf34417cb1f8e2b3e966a90019624c82a8dff18655e6ddb7d152c7e15d07a6189a67615cc024258b7ce89fe88fe9acf97d64470f3259f7141655913c99fe14f70a3e357384fc651dc0e7cf073ba44c940598d3efb87a47e9797a6b029edc433c4879984b963d274197f7786b0070066dcde74a8d9fa550c4fc5976e1c83a665696c9ea5181053ae09e5f2058156d7fbb6df52b9aa796a520b77e6c646c95c19a091857fa18c699b6c57529ca5a828847b63a445de63404c40588ff5c8594fcd34cd1373f7083e57cc8df3e9608dcf188dc3a99c23029b5393d1a034d8b0cf7c2ffa9ea76a93c7e520595031d5825c61af2510ea7906de9aaafd74d6776198cf8d65e429144b4d1620811de3ec25c5ccfa96adde2f9a02692e41f8b97de77e22f08b938bd3c60fe732e8e68470d829e22037c82a15a832a03e8030000000000007750114ca6b95e44197e30ec98cadfb0dec1f1fb1a416eb4ef87f1dffb0f5937fd601cf5d3020280513b3b842f110bb6c41801df68172fc4ddc485cac6d8f1d7a7393de705c64e8a0d149345b9faee3ea2f651e2912b958ff4d2c875f0316d12fc380798d0a6f54cbbb3437f94be9000f1446adfff51e9f0e5c8421167e344ca325a2c1bcc8378b3bba36eba52a734613a33207115e4b3a092eb0c49abe3131174cb2aaebb5b7b4f19c1f0a08ad146844b8727439693e906cca86d1edc1ee8f50cfcbe2a6ed0ecc7912d6dc55ef60cf1440a397c49f6d275e75bef2eb9e1de5c2753046625d20d3703b66ae91314861986e5f534418dc42a2ecd0e74f77a83ea94ee8e490f3dbf83c16cf4b005d2e3176fa212c0177b41ade2f1bfb02705ccaff6f31f4242384bae9f850f869e354fc22a6ac63445ddcb783be55acc132f2c0d86be9e8745c0d5a0208e2a3cf0dad2698f35f87f4e6c0de883182f67ef186fae44749632f7b24a0c3e0d49bfb2ebb331b8df43ad44d45e51f20abcdf6fd9ae56a1f49f0c0c093135fcb2740c7cb883039a2f0422bf82c229f118c7f0d988e43e40cf3348994b5342df8d261256a91c13ff5a64093b9cbea98d00107f3699cb0052fd8db3f1779f002809cf1bf557c6513489736728ba71699567dfdbcf033fc25ee59b8f4fc561858c4f0de2fe9b845179554b54a8944e42fa2ee349abcb768543fc0d3eb1fd0ae55a7cbd750374c27fa9c5b5e446ffd892e22dd9b2a8a24e9aada795dd3f9bb28e04ea79f96ac4a78715577c3d425bc6\n```\n\n----------------------------------------\n\nTITLE: Enforcing the Remaining Transaction Value Consensus Rule in Zebra (Rust)\nDESCRIPTION: Shows how to enforce the consensus rule that a transaction’s transparent pool must remain nonnegative following all value pool transformations. Invokes tx.value_balance().remaining_transaction_value()? inside a transaction validation flow. Errors propagate if the rule is violated. Designed to be placed as a basic check in the Rust codebase, with documentation linking to the consensus spec.\nSOURCE: https://github.com/zcashfoundation/zebra/blob/main/book/src/dev/rfcs/0012-value-pools.md#_snippet_8\n\nLANGUAGE: rust\nCODE:\n```\n..\n// Check the remaining transaction value consensus rule:\ntx.value_balance().remaining_transaction_value()?;\n..\n\n```\n\n----------------------------------------\n\nTITLE: Generating Default Configuration - Zebra - Console\nDESCRIPTION: This command creates the necessary directory and generates a default `zebrad.toml` configuration file. This file can then be edited to customize Zebra settings, such as enabling the RPC endpoint. It requires the `zebrad` executable to be in the system's PATH.\nSOURCE: https://github.com/zcashfoundation/zebra/blob/main/book/src/user/openapi.md#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\nmkdir -p ~/.config\nzebrad generate -o ~/.config/zebrad.toml\n```\n\n----------------------------------------\n\nTITLE: Relaying Transactions Over Tor with stolon crate (Rust)\nDESCRIPTION: This async Rust function, send_transaction, provides the main relay operation for Stolon, sending a Zcash transaction over a freshly established Tor connection to a peer. Dependencies include the stolon crate, async Rust, Arc<Transaction>, and proper Tor connectivity with DNS and peer addresses. Inputs are Tor and peer SocketAddr and an Arc-wrapped Transaction; the function returns Ok on success or a BoxError on failure. Used both internally and in the standalone binary for anonymous transaction propagation.\nSOURCE: https://github.com/zcashfoundation/zebra/blob/main/book/src/dev/rfcs/drafts/xxxx-stolon.md#_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\npub async fn send_transaction(\n    tor_addr: SocketAddr,\n    peer_addr: SocketAddr,\n    transaction: Arc<Transaction>,\n) -> Result<(), BoxError>\n```\n\n----------------------------------------\n\nTITLE: V5 Support for Sapling Data with Updated Anchor Handling in Rust\nDESCRIPTION: Models `ShieldedData` for Sapling transactions with a generic `AnchorVariant`, accommodating different anchor types between V4 and V5. The structure enforces conditional presence of value balance and binding signature, based on transaction features.\nSOURCE: https://github.com/zcashfoundation/zebra/blob/main/book/src/dev/rfcs/0010-v5-transaction.md#_snippet_2\n\nLANGUAGE: Rust\nCODE:\n```\nstruct sapling::ShieldedData<AnchorV: AnchorVariant> {\n    value_balance: Amount,\n    transfers: sapling::TransferData<AnchorV>,\n    binding_sig: redjubjub::Signature<Binding>,\n}\n\n/// TransferData ensures that:\n/// * there is at least one spend or output, and\n/// * the shared anchor is only present when there are spends\nenum sapling::TransferData<AnchorV: AnchorVariant> {\n    /// In Transaction::V5, if there are any spends,\n    /// there must also be a shared spend anchor.\n    SpendsAndMaybeOutputs {\n        shared_anchor: AnchorV::Shared,\n        spends: AtLeastOne<Spend<AnchorV>>,\n        maybe_outputs: Vec<Output>,\n    }\n\n    /// If there are no spends, there must not be a shared\n    /// anchor.\n    JustOutputs {\n        outputs: AtLeastOne<Output>,\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Calculating Block Value Balance Using Transactions in Zebra (Rust)\nDESCRIPTION: Adds a method to Block that computes the total pool value balance for the block, by summing the value balance of every contained transaction. The provided utxos map must cover all transaction inputs, including txs created and spent in the same block. Expects at least one coinbase transaction; fails if not. Used to enforce chain-level value correctness and pass balance data to Zebra's state.\nSOURCE: https://github.com/zcashfoundation/zebra/blob/main/book/src/dev/rfcs/0012-value-pools.md#_snippet_7\n\nLANGUAGE: rust\nCODE:\n```\n/// utxos must contain the utxos of every input in the transaction,\n/// including UTXOs created by a transaction in this block,\n/// then spent by a later transaction that's also in this block.\npub fn value_balance(&self, utxos: &HashMap<transparent::OutPoint, Utxo>) -> ValueBalance<NegativeAllowed> {\n    self.transactions()\n        .map(Transaction::value_balance)\n        .sum()\n        .expect(\"Each block should have at least one coinbase transaction\")\n}\n\n```\n\n----------------------------------------\n\nTITLE: Calculating ShieldedData Value Balance for Orchard Pool in Zebra (Rust)\nDESCRIPTION: Implements orchard::ShieldedData::value_balance to return the value delta for the Orchard pool, as defined by the field valueBalanceOrchard. Enables aggregation of shielded value changes for Orchard actions in a transaction or block. Located in the orchard/shielded_data.rs module.\nSOURCE: https://github.com/zcashfoundation/zebra/blob/main/book/src/dev/rfcs/0012-value-pools.md#_snippet_5\n\nLANGUAGE: rust\nCODE:\n```\npub fn value_balance(&self) -> ValueBalance<NegativeAllowed> {\n\n}\n\n```\n\n----------------------------------------\n\nTITLE: Adding Value Balance Field to FinalizedBlock Struct in Zebra (Rust)\nDESCRIPTION: Modifies the `FinalizedBlock` struct to include a `block_value_balance` field. This field stores the aggregated value balance for all transactions within the block, covering transparent, sprout, sapling, and orchard pools. It makes this important consensus-critical information available directly within the finalized block structure.\nSOURCE: https://github.com/zcashfoundation/zebra/blob/main/book/src/dev/rfcs/0012-value-pools.md#_snippet_17\n\nLANGUAGE: Rust\nCODE:\n```\npub struct FinalizedBlock {\n    ..\n    /// The value balance for transparent, sprout, sapling and orchard\n    /// inside all the transactions of this block.\n    pub(crate) block_value_balance: ValueBalance<NegativeAllowed>,\n}\n```\n\n----------------------------------------\n\nTITLE: Constructing Isolated Peer Connections with zebra-network (Rust)\nDESCRIPTION: This async Rust function, connect_isolated, establishes a minimally-distinguishable, isolated peer connection using a pre-established TcpStream (e.g., over Tor). It configures handshake parameters for improved anonymity and uses a no-op service handler to ignore inbound requests. Dependencies include zebra-network, tokio, and asynchronous Rust support. Inputs are a TcpStream and a user_agent string; output is a boxed async Service for requests/responses or an error. Intended for constructing Tor-backed, anonymous connections to Zcash peers.\nSOURCE: https://github.com/zcashfoundation/zebra/blob/main/book/src/dev/rfcs/drafts/xxxx-stolon.md#_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\npub async fn connect_isolated(\n    conn: TcpStream,\n    user_agent: String,\n) -> Result<BoxService<Request, Response, BoxedStdError>, BoxedStdError>\n```\n\n----------------------------------------\n\nTITLE: Building Zebra Project - cargo build\nDESCRIPTION: This command builds the Zebra project, compiling all its Rust source code. It's a fundamental step to ensure that all code dependencies are met and there are no compiler errors before testing.  The command's output is either successful compilation or compilation errors to be resolved.\nSOURCE: https://github.com/zcashfoundation/zebra/blob/main/book/src/dev/ecc-updates.md#_snippet_1\n\nLANGUAGE: Rust\nCODE:\n```\ncargo build\n```\n\n----------------------------------------\n\nTITLE: Configuring Zebra's RPC Settings for lightwalletd\nDESCRIPTION: TOML configuration for Zebra's RPC server to allow lightwalletd connections. This disables cookie authentication, sets the listening address to localhost on port 8232 (Mainnet), and enables multi-threading.\nSOURCE: https://github.com/zcashfoundation/zebra/blob/main/book/src/user/lightwalletd.md#_snippet_1\n\nLANGUAGE: toml\nCODE:\n```\n[rpc]\n# listen for RPC queries on localhost\nlisten_addr = '127.0.0.1:8232'\n\n# automatically use multiple CPU threads\nparallel_cpu_threads = 0\n\n# disable cookie auth\nenable_cookie_auth = false\n```\n\n----------------------------------------\n\nTITLE: Running Zebra with a Persistent Volume Mount\nDESCRIPTION: Starts a Zebra container named 'zebra' using the `zfnd/zebra` image, mounting the pre-created `zebrad-cache` volume to `/home/zebra/.cache/zebra` inside the container. This ensures Zebra's state is preserved.\nSOURCE: https://github.com/zcashfoundation/zebra/blob/main/book/src/user/docker.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ndocker run \\\n  --mount source=zebrad-cache,target=/home/zebra/.cache/zebra \\\n  --name zebra \\\n  zfnd/zebra\n```\n\n----------------------------------------\n\nTITLE: Testing Zebra Project - cargo test\nDESCRIPTION: This command runs all the tests defined within the Zebra project, ensuring all test code compiles and the tests themselves pass. It validates that all functionality is working as intended after dependency upgrades. The command's output lists the test results; any failures indicate code that needs to be fixed.\nSOURCE: https://github.com/zcashfoundation/zebra/blob/main/book/src/dev/ecc-updates.md#_snippet_2\n\nLANGUAGE: Rust\nCODE:\n```\ncargo test\n```\n\n----------------------------------------\n\nTITLE: Implementing value_balance for Transaction Outputs in Zebra (Rust)\nDESCRIPTION: Adds Output::value_balance to compute the contribution of an output to the value balance. This method does not require UTXO context, simply returning the output’s balance representation. Meant for use in assembling total transaction balances across transparent outputs, supporting correct shielded pool accounting. Output and ValueBalance types are defined in the core transparent module.\nSOURCE: https://github.com/zcashfoundation/zebra/blob/main/book/src/dev/rfcs/0012-value-pools.md#_snippet_2\n\nLANGUAGE: rust\nCODE:\n```\nimpl Output {\n    fn value_balance(&self) -> ValueBalance<NegativeAllowed> {\n\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Constructing a New Chain in NonFinalizedState in Rust\nDESCRIPTION: The `commit_new_chain` method creates a fresh chain starting with a given block, inserting it into the chain set, fundamental for building new verification branches.\nSOURCE: https://github.com/zcashfoundation/zebra/blob/main/book/src/dev/rfcs/0005-state-updates.md#_snippet_11\n\nLANGUAGE: rust\nCODE:\n```\npub(super) fn commit_new_chain(&mut self, block: Arc<Block>) {\n    // Create new chain, push block, insert into chain set\n}\n```\n\n----------------------------------------\n\nTITLE: Calculating General Block Subsidies and Utilities in Rust\nDESCRIPTION: Provides functions to calculate the total block subsidy and the miner's portion based on block height and network. Includes a utility function to find transparent outputs matching a specific amount within a transaction and a function to validate shielded coinbase rules.\nSOURCE: https://github.com/zcashfoundation/zebra/blob/main/book/src/dev/rfcs/drafts/xxxx-block-subsidy.md#_snippet_1\n\nLANGUAGE: Rust\nCODE:\n```\n`block_subsidy(Height, Network) -> Result<Amount<NonNegative>, Error>` - Total block subsidy.\n```\n\nLANGUAGE: Rust\nCODE:\n```\n`miner_subsidy(Height, Network) -> Result<Amount<NonNegative>, Error>` - Miner portion.\n```\n\nLANGUAGE: Rust\nCODE:\n```\n`find_output_with_amount(&Transaction, Amount<NonNegative>) -> Vec<transparent::Output>` - Outputs where value equal to Amount.\n```\n\nLANGUAGE: Rust\nCODE:\n```\n`shielded_coinbase(Height, Network, &Transaction) -> Result<(), Error>` - Validate shielded coinbase rules.\n```\n\n----------------------------------------\n\nTITLE: Starting Zebra with Custom Configuration (Bash)\nDESCRIPTION: This command starts the Zebra daemon (`zebrad start`) using a custom configuration file specified by the `-c` flag. It points to the `zebrad.toml` file created and modified in the previous steps.\nSOURCE: https://github.com/zcashfoundation/zebra/blob/main/book/src/user/metrics.md#_snippet_3\n\nLANGUAGE: Bash\nCODE:\n```\nzebrad -c zebrad.toml start\n```\n\n----------------------------------------\n\nTITLE: Representing Spendable UTXO Response with CoinBase Flag in Rust\nDESCRIPTION: This Rust snippet defines the Response variant SpendableUtxo containing a Utxo struct with additional metadata for transparent outputs. The Utxo struct includes the underlying transparent output, the height at which it was created, and a flag indicating if it originated from a coinbase transaction. This enables the state service to provide detailed spendability information in asynchronous queries while enforcing coinbase maturity rules.\nSOURCE: https://github.com/zcashfoundation/zebra/blob/main/book/src/dev/rfcs/0004-asynchronous-script-verification.md#_snippet_1\n\nLANGUAGE: Rust\nCODE:\n```\nenum Response::SpendableUtxo(Utxo)\n\npub struct Utxo {\n    /// The output itself.\n    pub output: transparent::Output,\n\n    /// The height at which the output was created.\n    pub height: block::Height,\n\n    /// Whether the output originated in a coinbase transaction.\n    pub from_coinbase: bool,\n}\n```\n\n----------------------------------------\n\nTITLE: Running Zebra with Lightwalletd using Docker Compose\nDESCRIPTION: Uses Docker Compose with the `docker/docker-compose.lwd.yml` file to start both Zebra and Lightwalletd services. This configuration typically enables Zebra's RPC without cookie authentication, configured via environment variables in the compose file itself (method 3).\nSOURCE: https://github.com/zcashfoundation/zebra/blob/main/book/src/user/docker.md#_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\ndocker compose -f docker/docker-compose.lwd.yml up\n```\n\n----------------------------------------\n\nTITLE: QueuedBlocks Data Structure in Rust\nDESCRIPTION: The `QueuedBlocks` structure manages blocks that are waiting for their parent blocks to arrive, tracking queued blocks by their parent hash and height, facilitating efficient batch processing once parent blocks are available.\nSOURCE: https://github.com/zcashfoundation/zebra/blob/main/book/src/dev/rfcs/0005-state-updates.md#_snippet_12\n\nLANGUAGE: rust\nCODE:\n```\nstruct QueuedBlocks {\n    blocks: HashMap<block::Hash, QueuedBlock>,\n    by_parent: HashMap<block::Hash, Vec<block::Hash>>,\n    by_height: BTreeMap<block::Height, Vec<block::Hash>>,\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Orchard ShieldedData Structure for Zcash V5 Transactions in Rust\nDESCRIPTION: This struct models the Orchard shielded data component introduced in Zcash V5 transactions. It contains flags as a bitfield, a net value balance, a shared Merkle tree root anchor, a zero-knowledge proof (`Halo2Proof`), a non-empty list of authorized actions, and a binding signature using RedPallas. The ordering of fields aligns with deserialization order per specification. This requires dependencies on `orchard::Flags`, `Amount` type, the `Halo2Proof` crate, and RedPallas signature types. The struct has serialization support for Zcash consensus compatibility.\nSOURCE: https://github.com/zcashfoundation/zebra/blob/main/book/src/dev/rfcs/0010-v5-transaction.md#_snippet_6\n\nLANGUAGE: Rust\nCODE:\n```\nstruct orchard::ShieldedData {\n    flags: Flags,\n    value_balance: Amount,\n    shared_anchor: orchard::tree::Root,\n    proof: Halo2Proof,\n    actions: AtLeastOne<AuthorizedAction>,\n    binding_sig: redpallas::Signature<Binding>,\n}\n```\n\n----------------------------------------\n\nTITLE: Storing Chain Value Pool at the Tip in Nonfinalized State Chain Struct (Rust)\nDESCRIPTION: Amends the Chain struct in zebra-state to store the complete value pool balance for the current tip (nonfinalized state). Also requires commit_new_chain() to receive finalized_tip_value_balance and forward it to Chain::new, ensuring that finalized/nonfinalized chain splits maintain correct accounting. The value_pool field is enforced as always nonnegative at the chain tip.\nSOURCE: https://github.com/zcashfoundation/zebra/blob/main/book/src/dev/rfcs/0012-value-pools.md#_snippet_11\n\nLANGUAGE: rust\nCODE:\n```\npub struct Chain {\n    ..\n    /// The chain value pool balance at the tip of this chain.\n    value_pool: ValueBalance<NonNegative>,\n}\n\n```\n\n----------------------------------------\n\nTITLE: Calculating Zcash Funding Streams in Rust\nDESCRIPTION: Provides functions for calculating Zcash funding stream amounts and determining the recipient addresses for a specific block height and network. Recipient addresses can be either transparent P2SH or Sapling addresses.\nSOURCE: https://github.com/zcashfoundation/zebra/blob/main/book/src/dev/rfcs/drafts/xxxx-block-subsidy.md#_snippet_3\n\nLANGUAGE: Rust\nCODE:\n```\n`funding_stream(height, network) -> Result<Amount<NonNegative>, Error>` - Funding stream portion for this block.\n```\n\nLANGUAGE: Rust\nCODE:\n```\n`funding_stream_address(height, network) -> Result<FundingStreamAddress, Error>` - Address of the funding stream receiver at this block. The funding streams addresses can be transparent `zebra_chain::transparent:Address::PayToScriptHash` or `zebra_chain::sapling:Address` addresses.\n```\n\n----------------------------------------\n\nTITLE: Deriving Arbitrary Trait Implementations with proptest in Rust\nDESCRIPTION: This snippet shows how to derive the Arbitrary trait for a struct using Rust's attribute macros, enabling automatic generation of randomised test cases with the proptest crate. It requires the proptest crate and conditional compilation to only include the implementation for tests or when the feature \"proptest-impl\" is enabled. This setup ensures that Arbitrary impls update automatically with structural changes in the types and are available for property-based testing.\nSOURCE: https://github.com/zcashfoundation/zebra/blob/main/book/src/dev/proptests.md#_snippet_0\n\nLANGUAGE: Rust\nCODE:\n```\n#[cfg_attr(any(test, feature = \"proptest-impl\"), derive(Arbitrary))]\nstruct Example(u32);\n```\n\n----------------------------------------\n\nTITLE: Compiling Zebra from Source on Linux Using Git\nDESCRIPTION: This sequence clones the Zebra repository from GitHub, checks out a specific release tag, then builds and runs the Zebra node (`zebrad`) using Cargo. It is intended for users who prefer manual compilation from source code, providing control over the build process and enabling custom modifications.\nSOURCE: https://github.com/zcashfoundation/zebra/blob/main/book/src/user/install.md#_snippet_4\n\nLANGUAGE: console\nCODE:\n```\ngit clone https://github.com/ZcashFoundation/zebra.git\ncd zebra\ngit checkout v2.2.0\n\ncargo build --release --bin zebrad\ntarget/release/zebrad start\n```\n\n----------------------------------------\n\nTITLE: Running s-nomp\nDESCRIPTION: This command starts the `s-nomp` mining pool software.  Before executing, the user needs to edit the zcash.json configuration file, specifically changing the port of `daemons[0].port` to match the Zebra port that was configured. It then starts the s-nomp pool.\nSOURCE: https://github.com/zcashfoundation/zebra/blob/main/book/src/user/mining-testnet-s-nomp.md#_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\nnpm start\n```\n\n----------------------------------------\n\nTITLE: Configuring Zebra Sync Lookahead and Requests (TOML)\nDESCRIPTION: This TOML configuration snippet adjusts the Zebra node's synchronization parameters. It sets a smaller `lookahead_limit` and `max_concurrent_block_requests` to reduce the number of blocks downloaded concurrently, which can improve performance on slower network connections.\nSOURCE: https://github.com/zcashfoundation/zebra/blob/main/book/src/user/troubleshooting.md#_snippet_1\n\nLANGUAGE: toml\nCODE:\n```\n[sync]\nlookahead_limit = 1000\nmax_concurrent_block_requests = 25\n```\n\n----------------------------------------\n\nTITLE: Accepting a Block into the Blockchain\nDESCRIPTION: The `AcceptBlock` function is responsible for the more in-depth validation and integration of a block, including contextual checks. It calls `AcceptBlockHeader` for contextual header validation, re-runs `CheckBlock` with proof verification disabled, and performs `ContextualCheckBlock` for context-dependent block and transaction validations.\nSOURCE: https://github.com/zcashfoundation/zebra/blob/main/book/src/dev/rfcs/drafts/data-flow-2020-07-22.md#_snippet_4\n\nLANGUAGE: C++\nCODE:\n```\nAcceptBlock(block, state, chainparams, pindex);\n// Located at https://github.com/zcash/zcash/blob/ab2b7c0969391d8a57d90d008665da02f3f618e7/src/main.cpp#L4180\n```\n\n----------------------------------------\n\nTITLE: Configuring Zebra Network Peer Set Size (TOML)\nDESCRIPTION: This TOML configuration snippet adjusts the target number of peers Zebra connects to initially. Setting a lower `peerset_initial_target_size` can reduce network load and improve performance, particularly on slower or less stable network connections.\nSOURCE: https://github.com/zcashfoundation/zebra/blob/main/book/src/user/troubleshooting.md#_snippet_2\n\nLANGUAGE: toml\nCODE:\n```\n[network]\npeerset_initial_target_size = 25\n```\n\n----------------------------------------\n\nTITLE: Enabling Zebra's Internal Miner for Regtest (TOML)\nDESCRIPTION: TOML configuration snippet to enable Zebra's experimental internal miner feature for the Regtest network. Setting `internal_miner = true` within the `[mining]` section instructs Zebra to automatically mine blocks on Regtest when compiled with the `internal-miner` feature flag.\nSOURCE: https://github.com/zcashfoundation/zebra/blob/main/book/src/user/regtest.md#_snippet_2\n\nLANGUAGE: toml\nCODE:\n```\n[mining]\ninternal_miner = true\n```\n\n----------------------------------------\n\nTITLE: Starting Zebra Scanner with gRPC Server Configuration in Bash\nDESCRIPTION: Command to start the zebra-scanner with a Sapling viewing key and configure both the Zebra RPC and scanner gRPC servers with their respective listen addresses. The scanner will start at a specific birthday height.\nSOURCE: https://github.com/zcashfoundation/zebra/blob/main/book/src/user/shielded-scan-grpc-server.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nzebra-scanner --sapling-keys-to-scan '{\"key\":\"zxviews1q0duytgcqqqqpqre26wkl45gvwwwd706xw608hucmvfalr759ejwf7qshjf5r9aa7323zulvz6plhttp5mltqcgs9t039cx2d09mgq05ts63n8u35hyv6h9nc9ctqqtue2u7cer2mqegunuulq2luhq3ywjcz35yyljewa4mgkgjzyfwh6fr6jd0dzd44ghk0nxdv2hnv4j5nxfwv24rwdmgllhe0p8568sgqt9ckt02v2kxf5ahtql6s0ltjpkckw8gtymxtxuu9gcr0swvz\", \"birthday_height\": 419200}' --zebrad-cache-dir /media/alfredo/stuff/chain/zebra --zebra-rpc-listen-addr '127.0.0.1:8232' --listen-addr '127.0.0.1:8231'\n```\n\n----------------------------------------\n\nTITLE: Getting Averaging Window Timespan - Zcash Network Upgrade - Rust\nDESCRIPTION: These methods on `NetworkUpgrade` provide access to the constant `AveragingWindowTimespan` duration specific to a network upgrade or determined by the network and block height. This value is a crucial parameter used in the Zcash Proof-of-Work difficulty adjustment calculations.\nSOURCE: https://github.com/zcashfoundation/zebra/blob/main/book/src/dev/rfcs/0006-contextual-difficulty.md#_snippet_5\n\nLANGUAGE: Rust\nCODE:\n```\nimpl NetworkUpgrade {\n    /// Returns the `AveragingWindowTimespan` for the network upgrade.\n    pub fn averaging_window_timespan(&self) -> Duration { ... }\n\n    /// Returns the `AveragingWindowTimespan` for `network` and `height`.\n    pub fn averaging_window_timespan_for_height(network: Network,\n                                                height: block::Height)\n                                                -> Duration { ... }\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Zebra Configuration File\nDESCRIPTION: Command to generate a default Zebra configuration file in the user's preferences directory, which will be customized for lightwalletd compatibility.\nSOURCE: https://github.com/zcashfoundation/zebra/blob/main/book/src/user/lightwalletd.md#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\nzebrad generate -o ~/.config/zebrad.toml\n```\n\n----------------------------------------\n\nTITLE: Generating Default Zebra Configuration (Shell)\nDESCRIPTION: Executes the `zebrad generate` command to output a default configuration file in TOML format. While Zebra uses internal defaults if no config file is present, generating one provides a template for customization.\nSOURCE: https://github.com/zcashfoundation/zebra/blob/main/book/src/user/run.md#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nzebrad generate\n```\n\n----------------------------------------\n\nTITLE: Downloading and Building lightwalletd\nDESCRIPTION: Commands to clone the lightwalletd repository and build it using Go. This requires having Go installed on the system.\nSOURCE: https://github.com/zcashfoundation/zebra/blob/main/book/src/user/lightwalletd.md#_snippet_3\n\nLANGUAGE: console\nCODE:\n```\ngit clone https://github.com/zcash/lightwalletd\ncd lightwalletd\nmake\nmake install\n```\n\n----------------------------------------\n\nTITLE: Modeling Orchard AuthorizedAction with SpendAuth Signature for Zcash V5 in Rust\nDESCRIPTION: The `AuthorizedAction` struct represents an individual authorized Orchard action paired with its Spend Authorization signature, conforming to V5 transaction structural rules requiring a signature per action. The `action` field holds the `Action` type (defined externally), and `spend_auth_sig` stores the signature of type `redpallas::Signature<SpendAuth>`. Serialization is split: `AuthorizedAction` lacks direct (de)serialization and must be decomposed with `into_parts` and recombined with `from_parts`. Dependencies include the `Action` type and RedPallas signature types. This design facilitates compliance with the protocol's separate array encoding of signatures.\nSOURCE: https://github.com/zcashfoundation/zebra/blob/main/book/src/dev/rfcs/0010-v5-transaction.md#_snippet_7\n\nLANGUAGE: Rust\nCODE:\n```\n/// An authorized action description.\n///\n/// Every authorized Orchard `Action` must have a corresponding `SpendAuth` signature.\nstruct orchard::AuthorizedAction {\n    action: Action,\n    // This field is stored in a separate array in v5 transactions, see:\n    // https://zips.z.cash/protocol/nu5.pdf#txnencodingandconsensus\n    // parse using `zcash_deserialize_external_count` and `zcash_serialize_external_count`\n    spend_auth_sig: redpallas::Signature<SpendAuth>,\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring RPC Endpoint in Zebra\nDESCRIPTION: This configuration snippet enables the RPC endpoint in the Zebra configuration file. The `listen_addr` parameter specifies the IP address and port that Zebra will listen on for RPC requests. The standard port for mainnet RPC is 8232.\nSOURCE: https://github.com/zcashfoundation/zebra/blob/main/book/src/user/mining.md#_snippet_2\n\nLANGUAGE: toml\nCODE:\n```\n[rpc]\nlisten_addr = \"127.0.0.1:8232\"\n```\n\n----------------------------------------\n\nTITLE: Committing New Chain State with Pool Data in Zebra (Rust)\nDESCRIPTION: Calls the `commit_new_chain` method on the in-memory state (`self.mem`). This operation finalizes a prepared block, incorporating the history tree and the current value pool fetched from disk (`self.disk.get_pool()`). It's a core step in updating the finalized state after processing a new block.\nSOURCE: https://github.com/zcashfoundation/zebra/blob/main/book/src/dev/rfcs/0012-value-pools.md#_snippet_14\n\nLANGUAGE: Rust\nCODE:\n```\nself.mem\n    .commit_new_chain(prepared, self.disk.history_tree(), self.disk.get_pool())?;\n```\n\n----------------------------------------\n\nTITLE: Generating Default Zebra Configuration File (Bash)\nDESCRIPTION: This command uses the installed `zebrad` binary to generate a default configuration file named `zebrad.toml` in the current directory. This file contains all configurable options for Zebra.\nSOURCE: https://github.com/zcashfoundation/zebra/blob/main/book/src/user/metrics.md#_snippet_1\n\nLANGUAGE: Bash\nCODE:\n```\nzebrad generate -o zebrad.toml\n```\n\n----------------------------------------\n\nTITLE: Converting PreparedBlock to FinalizedBlock with Value Balance in Zebra (Rust)\nDESCRIPTION: Implements the `From` trait to convert a `PreparedBlock` into a `FinalizedBlock`. During this conversion process, it extracts the `block_value_balance` computed for the prepared block and populates the corresponding field in the newly created `FinalizedBlock` instance, ensuring the value balance is carried forward to the finalized state.\nSOURCE: https://github.com/zcashfoundation/zebra/blob/main/book/src/dev/rfcs/0012-value-pools.md#_snippet_18\n\nLANGUAGE: Rust\nCODE:\n```\nimpl From<PreparedBlock> for FinalizedBlock {\n    fn from(prepared: PreparedBlock) -> Self {\n        let PreparedBlock {\n            ..\n            block_value_balance,\n        } = prepared;\n        Self {\n            ..\n            block_value_value_balance,\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Orchard Flags Bitfield for Zcash V5 Transactions in Rust\nDESCRIPTION: This bitflags definition models per-transaction Orchard flags as an 8-bit field, with individual bits enabling or disabling spending and output capabilities. `ENABLE_SPENDS` enables spending non-zero-valued Orchard notes, while `ENABLE_OUTPUTS` enables creating new non-zero-valued Orchard notes. Bits 2 through 7 are reserved and must be zero according to protocol consensus rules. This struct uses the `bitflags` crate and enforces consensus constraints to maintain protocol compliance.\nSOURCE: https://github.com/zcashfoundation/zebra/blob/main/book/src/dev/rfcs/0010-v5-transaction.md#_snippet_8\n\nLANGUAGE: Rust\nCODE:\n```\nbitflags! {\n    /// Per-Transaction flags for Orchard.\n    ///\n    /// The spend and output flags are passed to the `Halo2Proof` verifier, which verifies\n    /// the relevant note spending and creation consensus rules.\n    struct orchard::Flags: u8 {\n        /// Enable spending non-zero valued Orchard notes.\n        ///\n        /// \"the `enableSpendsOrchard` flag, if present, MUST be 0 for coinbase transactions\"\n        const ENABLE_SPENDS = 0b00000001;\n        /// Enable creating new non-zero valued Orchard notes.\n        const ENABLE_OUTPUTS = 0b00000010;\n        // Reserved, zeros (bits 2 .. 7)\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Zebra Binary with Cargo (Shell)\nDESCRIPTION: This command builds and installs the `zebrad` binary from the current directory using the Rust package manager, Cargo. The `--locked` flag ensures the build uses the exact dependency versions specified in the `Cargo.lock` file.\nSOURCE: https://github.com/zcashfoundation/zebra/blob/main/README.md#_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\ncargo install --locked zebrad\n```\n\n----------------------------------------\n\nTITLE: Adding Block Value Balances to PreparedBlock in Zebra State (Rust)\nDESCRIPTION: Describes the addition of a new block_value_balance field to the PreparedBlock struct in the state request layer, to capture and transfer the per-block value pool data produced during consensus checks. This enables correct state progression and rollback of value pools in the non-finalized chain. The ValueBalance is parameterized for pools allowing negative balances as per per-block rules.\nSOURCE: https://github.com/zcashfoundation/zebra/blob/main/book/src/dev/rfcs/0012-value-pools.md#_snippet_9\n\nLANGUAGE: rust\nCODE:\n```\npub struct PreparedBlock {\n    ..\n    /// The value balances for each pool for this block.\n    pub block_value_balance: ValuePool<NegativeAllowed>,\n}\n\n```\n\n----------------------------------------\n\nTITLE: Calculating Zcash Founders' Reward in Rust\nDESCRIPTION: Contains functions specific to the Zcash founders' reward calculation. These determine the reward amount for a given block height and network, calculate the height interval for address changes, retrieve the P2SH recipient address for a specific block, and find transaction outputs matching a given address.\nSOURCE: https://github.com/zcashfoundation/zebra/blob/main/book/src/dev/rfcs/drafts/xxxx-block-subsidy.md#_snippet_2\n\nLANGUAGE: Rust\nCODE:\n```\n`founders_reward(Height, Network) -> Result<Amount<NonNegative>, Error>` - Founders reward portion for this block.\n```\n\nLANGUAGE: Rust\nCODE:\n```\n`founders_address_change_interval() -> Height` - Calculates the founders reward change interval. `FounderAddressChangeInterval` in the protocol specs.\n```\n\nLANGUAGE: Rust\nCODE:\n```\n`founders_reward_address(Height, Network) -> Result<PayToScriptHash, Error>` - Address of the receiver founder at this block. All specified founders reward addresses are transparent `zebra_chain::transparent:Address::PayToScriptHash` addresses.\n```\n\nLANGUAGE: Rust\nCODE:\n```\n`find_output_with_address(&Transaction, Address)` - Outputs where `lock_script` equal to `Address`.\n```\n\n----------------------------------------\n\nTITLE: Passing Block Value Balance from Consensus to State in Zebra (Rust)\nDESCRIPTION: Demonstrates passing the computed block value balance (acquired via block.value_balance()) into the PreparedBlock struct in consensus code, linking the per-block pool computation to update logic in state. This code is found in zebra-consensus/src/block.rs.\nSOURCE: https://github.com/zcashfoundation/zebra/blob/main/book/src/dev/rfcs/0012-value-pools.md#_snippet_10\n\nLANGUAGE: rust\nCODE:\n```\nlet block_value_balance = block.value_balance();\nlet prepared_block = zs::PreparedBlock {\n    ..\n    block_value_balance,\n};\n\n```\n\n----------------------------------------\n\nTITLE: Scanning for Transactions with the Scan Method in Bash\nDESCRIPTION: Example of how to use the Scan method to start scanning for transactions using a Sapling extended full viewing key. This will stream results from Zebra's state and new blocks as they're validated.\nSOURCE: https://github.com/zcashfoundation/zebra/blob/main/book/src/user/shielded-scan-grpc-server.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ngrpcurl -plaintext -d '{ \"keys\": { \"key\": [\"sapling_extended_full_viewing_key\"] } }' '127.0.0.1:8231' scanner.Scanner/Scan\n```\n\n----------------------------------------\n\nTITLE: Starting Zebra Daemon (Shell)\nDESCRIPTION: This command executes the installed `zebrad` binary, starting the Zebra full-node daemon. The node will initialize and begin connecting to the Zcash network to sync the blockchain.\nSOURCE: https://github.com/zcashfoundation/zebra/blob/main/README.md#_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nzebrad start\n```\n\n----------------------------------------\n\nTITLE: Validating Block Header (Non-Contextual)\nDESCRIPTION: The `CheckBlockHeader` function verifies aspects of the block header that don't depend on the blockchain state. This includes checking that the block version is not too old, validating the Equihash solution against parameters `n` and `k`, and checking that the proof of work parameters like `params.powLimit` are valid.\nSOURCE: https://github.com/zcashfoundation/zebra/blob/main/book/src/dev/rfcs/drafts/data-flow-2020-07-22.md#_snippet_2\n\nLANGUAGE: C++\nCODE:\n```\nCheckBlockHeader(block.GetBlockHeader(), state, fCheckPOW);\n// Located at https://github.com/zcash/zcash/blob/ab2b7c09699d8a57d90d008665da02f3f618e7/src/main.cpp#L3900\n```\n\n----------------------------------------\n\nTITLE: Initializing Blockchain Node with Rust for Network Operations\nDESCRIPTION: This snippet shows how to set up a basic blockchain node in Rust, including network socket initialization and listening for peer connections. It requires the 'std::net' library and handles TCP connections for peer-to-peer communication within the system.\nSOURCE: https://github.com/zcashfoundation/zebra/blob/main/zebra-test/src/vectors/block-main-1-687-107.txt#_snippet_1\n\nLANGUAGE: Rust\nCODE:\n```\nuse std::net::{TcpListener, TcpStream};\n\nfn main() {\n    let listener = TcpListener::bind(\"127.0.0.1:8080\").expect(\"Could not bind socket\");\n    for stream in listener.incoming() {\n        match stream {\n            Ok(stream) => handle_connection(stream),\n            Err(e) => eprintln!(\"Connection failed: {}\", e),\n        }\n    }\n}\n\nfn handle_connection(stream: TcpStream) {\n    // Handle peer connection\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Zebra Mining with Docker Environment Variables\nDESCRIPTION: This snippet refers to configuring Zebra for mining support by passing `MINER_ADDRESS` and port mappings as environment variables in Docker. It presumes familiarity with Docker environment configuration and links to the relevant Zebra mining documentation. It allows Zebra to participate in mining activities by providing necessary network parameters.\nSOURCE: https://github.com/zcashfoundation/zebra/blob/main/book/src/user/install.md#_snippet_2\n\n\n\n----------------------------------------\n\nTITLE: Representing Zcash Transaction V5 with Shielded Data in Rust\nDESCRIPTION: The `Transaction::V5` enum variant defines the fields composing a Zcash V5 transaction. It includes standard fields like `lock_time`, `expiry_height`, and vectors of transparent inputs and outputs. For shielded data, it holds optional Sapling and Orchard components, respectively `sapling_shielded_data` using `SharedAnchor` and `orchard_shielded_data`. This representation accommodates the protocol's split serialization approach for shielded parts. Fields require serialization implementations (`ZcashSerialize` and `ZcashDeserialize`), with dependencies on blockchain types such as `LockTime`, `block::Height`, and shielded data modules.\nSOURCE: https://github.com/zcashfoundation/zebra/blob/main/book/src/dev/rfcs/0010-v5-transaction.md#_snippet_5\n\nLANGUAGE: Rust\nCODE:\n```\nenum Transaction::V5 {\n    lock_time: LockTime,\n    expiry_height: block::Height,\n    inputs: Vec<transparent::Input>,\n    outputs: Vec<transparent::Output>,\n    sapling_shielded_data: Option<sapling::ShieldedData<SharedAnchor>>,\n    orchard_shielded_data: Option<orchard::ShieldedData>,\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Docker Volume for Zebra State\nDESCRIPTION: Creates a named Docker volume called `zebrad-cache`. This volume can be mounted into the Zebra container to persist blockchain data and cache across container restarts.\nSOURCE: https://github.com/zcashfoundation/zebra/blob/main/book/src/user/docker.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ndocker volume create zebrad-cache\n```\n\n----------------------------------------\n\nTITLE: Writing Data to Column Family\nDESCRIPTION: This Rust snippet shows how to insert data into a column family using `new_batch_for_writing()` and `write_batch()` for writing. The code creates a batch, inserts a value, and then writes the batch to the database. This illustrates the process of writing to a column family.\nSOURCE: https://github.com/zcashfoundation/zebra/blob/main/book/src/dev/state-db-upgrades.md#_snippet_3\n\nLANGUAGE: rust\nCODE:\n```\nimpl Storage {\n    /// Insert a sapling scanning `key`, and mark all heights before `birthday_height` so they\n    /// won't be scanned.\n    pub(crate) fn insert_sapling_key(\n        &mut self,\n        storage: &Storage,\n        sapling_key: &SaplingScanningKey,\n        birthday_height: Option<Height>,\n    ) {\n        ...\n        self.sapling_tx_ids_cf()\n            .new_batch_for_writing()\n            .zs_insert(&index, &None)\n            .write_batch()\n            .expect(\"unexpected database write failure\");\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Generating and Starting Zebra Node with Custom Configuration in Shell\nDESCRIPTION: Commands to generate a default Zebra configuration file and start the Zebra node with a custom configuration file to apply the desired settings. These shell commands facilitate preparing Zebra to sync up to the designated block height in the custom network setup.\nSOURCE: https://github.com/zcashfoundation/zebra/blob/main/book/src/user/fork-zebra-testnet.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nzebrad generate -o myconf.toml\n\nzebrad -c myconf.toml start\n```\n\n----------------------------------------\n\nTITLE: Checking Transaction Finality\nDESCRIPTION: The `IsFinalTx` function determines if a transaction is considered 'final' and thus ready to be included in a block. This check is based on the transaction's lock time and sequence numbers relative to the block height and timestamp, preventing transactions from being included before their specified lock time.\nSOURCE: https://github.com/zcashfoundation/zebra/blob/main/book/src/dev/rfcs/drafts/data-flow-2020-07-22.md#_snippet_9\n\nLANGUAGE: C++\nCODE:\n```\n// Called by ContextualCheckBlock\nIsFinalTx(tx, nHeight, blockTime);\n// Located at https://github.com/zcash/zcash/blob/ab2b7c0969391d8a57d90d008665da02f3f618e7/src/main.cpp#L675\n\n// IsFinalTx calls:\ntx::IsFinal(nBlockHeight, nBlockTime);\n// Located at https://github.com/zcash/zcash/blob/6d9573c66e33b5b742c49ab35e816d74d4ab55b1/src/primitives/transaction.h#L401\n```\n\n----------------------------------------\n\nTITLE: Running Prometheus and Grafana via Docker (Bash)\nDESCRIPTION: These Docker commands set up and run Prometheus and Grafana containers. They create persistent storage volumes, run Prometheus configured to scrape Zebra's metrics endpoint (using a provided `prometheus.yaml`), and run Grafana, exposing its web interface on port 3030. Requires Docker and `sudo` privileges.\nSOURCE: https://github.com/zcashfoundation/zebra/blob/main/book/src/user/metrics.md#_snippet_4\n\nLANGUAGE: Bash\nCODE:\n```\n# create a storage volume for grafana (once)\nsudo docker volume create grafana-storage\n# create a storage volume for prometheus (once)\nsudo docker volume create prometheus-storage\n\n# run prometheus with the included config\nsudo docker run --detach --network host --volume prometheus-storage:/prometheus --volume /path/to/zebra/prometheus.yaml:/etc/prometheus/prometheus.yml  prom/prometheus\n\n# run grafana\nsudo docker run --detach --network host --env GF_SERVER_HTTP_PORT=3030 --env GF_SERVER_HTTP_ADDR=localhost --volume grafana-storage:/var/lib/grafana grafana/grafana\n```\n\n----------------------------------------\n\nTITLE: Starting Zebra Blockchain Synchronization\nDESCRIPTION: Command to start Zebra and begin synchronizing with the Zcash blockchain. This process may take a while depending on hardware specifications.\nSOURCE: https://github.com/zcashfoundation/zebra/blob/main/book/src/user/lightwalletd.md#_snippet_2\n\nLANGUAGE: console\nCODE:\n```\nzebrad start\n```\n\n----------------------------------------\n\nTITLE: Configuring Miner Address in Zebra\nDESCRIPTION: This configuration snippet sets the miner address in the Zebra configuration file. The `miner_address` parameter specifies the transparent Zcash address where mining rewards will be sent.  Zebra currently supports `p2pkh` and `p2sh` transparent addresses.\nSOURCE: https://github.com/zcashfoundation/zebra/blob/main/book/src/user/mining.md#_snippet_1\n\nLANGUAGE: toml\nCODE:\n```\n[mining]\nminer_address = 't3dvVE3SQEi7kqNzwrfNePxZ1d4hUyztBA1'\n```\n\n----------------------------------------\n\nTITLE: Running nheqminer\nDESCRIPTION: This command runs the nheqminer CPU miner. It specifies the pool address, the user, and the number of threads to use. Replace `127.0.0.1:1234` with the correct s-nomp address.  The `-t 1` flag is added as a workaround to fix a potential issue where Control-C is ignored and the miner can not be killed.\nSOURCE: https://github.com/zcashfoundation/zebra/blob/main/book/src/user/mining-testnet-s-nomp.md#_snippet_12\n\nLANGUAGE: shell\nCODE:\n```\n./nheqminer -l 127.0.0.1:1234 -u tmRGc4CD1UyUdbSJmTUzcB6oDqk4qUaHnnh.worker1 -t 1\n```\n\n----------------------------------------\n\nTITLE: Listing Available Scanner Methods using gRPC Reflection in Bash\nDESCRIPTION: Command to list all available methods in the Scanner service using gRPC reflection. This is useful for discovering the API endpoints provided by the service.\nSOURCE: https://github.com/zcashfoundation/zebra/blob/main/book/src/user/shielded-scan-grpc-server.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ngrpcurl -plaintext '127.0.0.1:8231' list scanner.Scanner\n```\n\n----------------------------------------\n\nTITLE: Using Non-Streaming Scanning with RegisterKeys and GetResults in Bash\nDESCRIPTION: Two-step example showing how to register keys for scanning without streaming, and then retrieve the results after allowing time for scanning. This approach is useful for batch processing.\nSOURCE: https://github.com/zcashfoundation/zebra/blob/main/book/src/user/shielded-scan-grpc-server.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ngrpcurl -plaintext -d '{ \"keys\": { \"key\": [\"sapling_extended_full_viewing_key\"] } }' '127.0.0.1:8231' scanner.Scanner/RegisterKeys\ngrpcurl -plaintext -d '{ \"keys\": [\"sapling_extended_full_viewing_key\"] }' '127.0.0.1:8231' scanner.Scanner/GetResults\n```\n\n----------------------------------------\n\nTITLE: Installing zecwallet-cli Light Wallet\nDESCRIPTION: Command to install zecwallet-cli, a command-line light wallet client that can connect to the lightwalletd service.\nSOURCE: https://github.com/zcashfoundation/zebra/blob/main/book/src/user/lightwalletd.md#_snippet_5\n\nLANGUAGE: console\nCODE:\n```\ncargo install --locked --git https://github.com/adityapk00/zecwallet-light-cli\n```\n\n----------------------------------------\n\nTITLE: Defining Column Family and Associated Types\nDESCRIPTION: This snippet defines the name and type of a column family for storing sapling transaction IDs. It provides type aliases for safe access and encapsulates the database interaction within a method to ensure type correctness. This is a pattern for defining and using column families in Zebra.\nSOURCE: https://github.com/zcashfoundation/zebra/blob/main/book/src/dev/state-db-upgrades.md#_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\n/// The name of the sapling transaction IDs result column family.\npub const SAPLING_TX_IDS: &str = \"sapling_tx_ids\";\n\n/// The column families supported by the running `zebra-scan` database code.\npub const SCANNER_COLUMN_FAMILIES_IN_CODE: &[&str] = &[\n    sapling::SAPLING_TX_IDS,\n];\n\n/// The type for reading sapling transaction IDs results from the database.\npub type SaplingTxIdsCf<'cf> =\n    TypedColumnFamily<'cf, SaplingScannedDatabaseIndex, Option<SaplingScannedResult>>;\n```\n\n----------------------------------------\n\nTITLE: Starting the Zebra Full Node (Shell)\nDESCRIPTION: Executes the `zebrad start` command to launch the Zebra full node process. This command initiates the node, which will then connect to the Zcash network and begin synchronizing the blockchain.\nSOURCE: https://github.com/zcashfoundation/zebra/blob/main/book/src/user/run.md#_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nzebrad start\n```\n\n----------------------------------------\n\nTITLE: Install Redis for s-nomp\nDESCRIPTION: This command installs Redis, and development libraries required by S-nomp using pacman (Arch Linux package manager). This assumes the user is on Arch Linux.\nSOURCE: https://github.com/zcashfoundation/zebra/blob/main/book/src/user/mining-testnet-s-nomp.md#_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nsudo pacman -S redis boost libsodium\n```\n\n----------------------------------------\n\nTITLE: Initializing JSON-RPC Server\nDESCRIPTION: Logs showing Zebra attempting to bind to the configured JSON-RPC listener address and port. This indicates the startup of the optional service that allows external applications to query Zebra and submit transactions via RPC.\nSOURCE: https://github.com/zcashfoundation/zebra/blob/main/book/src/user/startup.md#_snippet_4\n\nLANGUAGE: text\nCODE:\n```\nzebra_rpc::server: Trying to open RPC endpoint at 127.0.0.1:57638...\nzebra_rpc::server: Opened RPC endpoint at 127.0.0.1:57638\n```\n\n----------------------------------------\n\nTITLE: Initializing Block and Transaction Verifiers\nDESCRIPTION: Logs indicating the initialization of Zebra's core verification components. This includes loading necessary cryptographic parameters for Sprout and Sapling and setting up the chain verifier, which enforces consensus rules based on the chosen synchronization mode (checkpoint or full).\nSOURCE: https://github.com/zcashfoundation/zebra/blob/main/book/src/user/startup.md#_snippet_5\n\nLANGUAGE: text\nCODE:\n```\nzebrad::commands::start: initializing verifiers\ninit{config=Config { ... } ... }: zebra_consensus::primitives::groth16::params: checking and loading Zcash Sapling and Sprout parameters\ninit{config=Config { checkpoint_sync: true, ... } ... }: zebra_consensus::chain: initializing chain verifier tip=None max_checkpoint_height=Height(1644839)\n...\n```\n\n----------------------------------------\n\nTITLE: Parsing raw block and transaction data in Python\nDESCRIPTION: This snippet demonstrates functions for parsing raw hexadecimal block data into structured formats, extracting transactions, and decoding transaction inputs and outputs. It enables processing of blockchain data received over the network or from storage, converting it into usable Python objects for further validation or analysis.\nSOURCE: https://github.com/zcashfoundation/zebra/blob/main/zebra-test/src/vectors/block-main-0-434-873.txt#_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\ndef parse_block_data(raw_block_hex):\n    # Parses raw hexadecimal block data into a structured block object\n    block_bytes = bytes.fromhex(raw_block_hex)\n    # Implementation details for parsing block header, transactions, etc.\n    return block_structured\n\ndef extract_transactions(block_structured):\n    # Extracts transactions list from a parsed block\n    return block_structured.transactions\n\ndef decode_transaction_input(tx_input_hex):\n    # Decodes a raw transaction input from hexadecimal to a structured format\n    input_bytes = bytes.fromhex(tx_input_hex)\n    # Implementation details for decoding\n    return decoded_input\n\ndef decode_transaction_output(tx_output_hex):\n    # Decodes a raw transaction output from hexadecimal to a structured format\n    output_bytes = bytes.fromhex(tx_output_hex)\n    # Implementation details for decoding\n    return decoded_output\n```\n\n----------------------------------------\n\nTITLE: Queueing a Block in QueuedBlocks in Rust\nDESCRIPTION: The `queue` method adds a new block awaiting parent arrival, updating internal mappings by parent hash and height to facilitate parent-dependent verification once the parent is available.\nSOURCE: https://github.com/zcashfoundation/zebra/blob/main/book/src/dev/rfcs/0005-state-updates.md#_snippet_13\n\nLANGUAGE: rust\nCODE:\n```\npub fn queue(&mut self, new: QueuedBlock) {\n    // Extract hashes and height, insert into blocks, by_parent, by_height\n}\n```\n\n----------------------------------------\n\nTITLE: Submitting Blocks via RPC on Zebra Regtest (Rust)\nDESCRIPTION: Rust code example demonstrating how to mine and submit a block to Zebra running on Regtest via RPC. It fetches a block template using `getblocktemplate`, constructs a block using `proposal_block_from_template` (from `zebra-chain`), serializes and hex-encodes it, and submits it using the `submitblock` RPC method. Requires an RPC client (`RpcRequestClient`) and dependencies like `hex`, `zebra-chain`, and `tokio` (implied by `.await`).\nSOURCE: https://github.com/zcashfoundation/zebra/blob/main/book/src/user/regtest.md#_snippet_4\n\nLANGUAGE: rust\nCODE:\n```\nlet client = RpcRequestClient::new(rpc_address);\n\nlet block_template: GetBlockTemplate = client\n    .json_result_from_call(\"getblocktemplate\", \"[]\".to_string())\n    .await\n    .expect(\"response should be success output with a serialized `GetBlockTemplate`\");\n\nlet network_upgrade = if block_template.height < NU5_ACTIVATION_HEIGHT {\n    NetworkUpgrade::Canopy\n} else {\n    NetworkUpgrade::Nu5\n};\n\nlet block_data = hex::encode(\n    proposal_block_from_template(&block_template, TimeSource::default(), network_upgrade)?\n        .zcash_serialize_to_vec()?,\n);\n\nlet submit_block_response = client\n    .text_from_call(\"submitblock\", format!(r#\"[\"{block_data}\"]\"#))\n    .await?;\n\nlet was_submission_successful = submit_block_response.contains(r#\"\"result\":null\"#);\n```\n\n----------------------------------------\n\nTITLE: Run Kibana\nDESCRIPTION: This command executes the Kibana binary, starting the visualization dashboard.  Kibana requires an enrollment token from Elasticsearch and the elastic password to configure.\nSOURCE: https://github.com/zcashfoundation/zebra/blob/main/book/src/user/elasticsearch.md#_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\n./bin/kibana\n```\n\n----------------------------------------\n\nTITLE: Displaying zebra-scanner Help (Bash)\nDESCRIPTION: Executes the `zebra-scanner` binary with the `--help` flag to display its available command-line arguments and usage instructions.\nSOURCE: https://github.com/zcashfoundation/zebra/blob/main/book/src/user/shielded-scan.md#_snippet_1\n\nLANGUAGE: Bash\nCODE:\n```\nzebra-scanner --help\n```\n\n----------------------------------------\n\nTITLE: Starting Zebra Daemon - Zebra - Console\nDESCRIPTION: This command starts the Zebra node using the configuration found in the default location (`~/.config/zebrad.toml`). It assumes the configuration file has been set up correctly, including enabling and specifying the RPC listen address if desired. Requires the `zebrad` executable to be available.\nSOURCE: https://github.com/zcashfoundation/zebra/blob/main/book/src/user/openapi.md#_snippet_2\n\nLANGUAGE: console\nCODE:\n```\nzebrad\n```\n\n----------------------------------------\n\nTITLE: Finalizing a Block in NonFinalizedState in Rust\nDESCRIPTION: The `finalize` method moves the lowest height block from the best chain to finalized state, updating the chain set by removing the root, adjusting other chains accordingly, and returning the finalized block to ensure consensus finalization.\nSOURCE: https://github.com/zcashfoundation/zebra/blob/main/book/src/dev/rfcs/0005-state-updates.md#_snippet_9\n\nLANGUAGE: rust\nCODE:\n```\npub fn finalize(&mut self) -> Arc<Block> {\n    // Extract best chain\n    // Pop root block\n    // Update chain set and other chains\n    // Return finalized block\n}\n```\n\n----------------------------------------\n\nTITLE: Defining RocksDB Column Family for Tip Value Pool in Zebra (Rust)\nDESCRIPTION: Defines a new column family descriptor for a RocksDB database instance used by Zebra's state service. This column family, named \"tip_chain_value_pool\", is specifically designated to store the cumulative value balance of the chain tip, allowing for efficient retrieval of this critical state data.\nSOURCE: https://github.com/zcashfoundation/zebra/blob/main/book/src/dev/rfcs/0012-value-pools.md#_snippet_19\n\nLANGUAGE: Rust\nCODE:\n```\nrocksdb::ColumnFamilyDescriptor::new(\"tip_chain_value_pool\", db_options.clone()),\n```\n\n----------------------------------------\n\nTITLE: Starting Zebra with Docker (Shell)\nDESCRIPTION: This command pulls and runs the latest official Zebra Docker image. It starts the full node which will then begin syncing the Zcash blockchain.\nSOURCE: https://github.com/zcashfoundation/zebra/blob/main/README.md#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ndocker run zfnd/zebra:latest\n```\n\n----------------------------------------\n\nTITLE: Queue and Commit Non-Finalized Blocks in Rust\nDESCRIPTION: Function that processes new blocks by checking for duplicates, queuing blocks, and committing them when their parent blocks are available. Handles block validation and chain reorganization.\nSOURCE: https://github.com/zcashfoundation/zebra/blob/main/book/src/dev/rfcs/0005-state-updates.md#_snippet_16\n\nLANGUAGE: rust\nCODE:\n```\npub(super) fn queue_and_commit_non_finalized_blocks(&mut self, new: Arc<Block>) -> tokio::sync::oneshot::Receiver<block::Hash>\n```\n\n----------------------------------------\n\nTITLE: Defining and Operating on ValueBalance Types in Zebra (Rust)\nDESCRIPTION: Implements the ValueBalance struct to represent transaction and block value pool balances for Zcash, parameterized by constraint C. Provides arithmetic operators (+, -, +=, -=, sum), allowing typesafe manipulations of balances, and defines a key consensus-checking method remaining_transaction_value, which ensures that the transparent value, less the sum of shielded pools, is nonnegative as required by Zcash consensus. Each implementation returns a Result to properly handle overflow, constraint, or consensus errors. Requires Amount implementations and serde for serialization.\nSOURCE: https://github.com/zcashfoundation/zebra/blob/main/book/src/dev/rfcs/0012-value-pools.md#_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\n#[serde(bound = \"C: Constraint\")]\nstruct ValueBalance<C = NegativeAllowed> {\n    transparent: Amount<C>,\n    sprout: Amount<C>,\n    sapling: Amount<C>,\n    orchard: Amount<C>,\n}\n\nimpl ValueBalance {\n    /// [Consensus rule]: The remaining value in the transparent transaction value pool MUST be nonnegative.\n    ///\n    /// This rule applies to Block and Mempool transactions.\n    ///\n    /// [Consensus rule]: https://zips.z.cash/protocol/protocol.pdf#transactions\n    fn remaining_transaction_value(&self) -> Result<Amount<NonNegative>, Err> {\n        // This rule checks the transparent value balance minus the sum of the sprout, sapling, and orchard\n        // value balances in a transaction is nonnegative\n        self.transparent - [self.sprout + self.sapling + self.orchard].sum()\n    }\n}\n\nimpl Add for Result<ValueBalance<C>>\nwhere\n    C: Constraint,\n{\n\n}\n\nimpl Sub for Result<ValueBalance<C>>\nwhere\n    C: Constraint,\n{\n\n}\n\nimpl AddAssign for Result<ValueBalance<C>>\nwhere\n    C: Constraint,\n{\n\n}\n\nimpl SubAssign for Result<ValueBalance<C>>\nwhere\n    C: Constraint,\n{\n\n}\n\nimpl Sum for Result<ValueBalance<C>>\nwhere\n    C: Constraint,\n{\n\n}\n\nimpl Default for ValueBalance<C>\nwhere\n    C: Constraint,\n{\n\n}\n\n```\n\n----------------------------------------\n\nTITLE: Calculating JoinSplitData Value Balance in Zebra (Rust)\nDESCRIPTION: Introduces value_balance for JoinSplitData, allowing shielded JoinSplits to provide their value deltas for use in transaction and block value pool calculations. Designed for the joinsplit.rs implementation and is consistent with overall modular computation of pool balances throughout the transaction structure.\nSOURCE: https://github.com/zcashfoundation/zebra/blob/main/book/src/dev/rfcs/0012-value-pools.md#_snippet_3\n\nLANGUAGE: rust\nCODE:\n```\npub fn value_balance(&self) -> ValueBalance<NegativeAllowed> {\n\n}\n\n```\n\n----------------------------------------\n\nTITLE: Aggregating Transaction Value Balance in Zebra (Rust)\nDESCRIPTION: Implements a method on Transaction that computes the net pool balance for the entire transaction. Accepts a complete UTXO mapping for all inputs, and recursively uses value_balance methods for all components. Ensures accurate accounting of shielded and transparent transfers per consensus rules. Returns ValueBalance<NegativeAllowed> for use in block and consensus validation.\nSOURCE: https://github.com/zcashfoundation/zebra/blob/main/book/src/dev/rfcs/0012-value-pools.md#_snippet_6\n\nLANGUAGE: rust\nCODE:\n```\n/// utxos must contain the utxos of every input in the transaction,\n/// including UTXOs created by earlier transactions in this block.\npub fn value_balance(&self, utxos: &HashMap<transparent::OutPoint, Utxo>) -> ValueBalance<NegativeAllowed> {\n\n}\n\n```\n\n----------------------------------------\n\nTITLE: Integration Testing Async Code in Zebrad - Rust\nDESCRIPTION: This code snippet shows an integration test in `zebrad` that synchronizes to a specific height on the Zcash mainnet. It uses a `sync_until` function (not shown) and checks if `zebrad` can sync blocks, cancel a sync, and reload disk state after a restart.  It depends on functions like `sync_until` and constants like `LARGE_CHECKPOINT_TEST_HEIGHT`, `Mainnet`, and timeout values.\nSOURCE: https://github.com/zcashfoundation/zebra/blob/main/book/src/dev/rfcs/0011-async-rust-in-zebra.md#_snippet_8\n\nLANGUAGE: rust\nCODE:\n```\n/// Test if `zebrad` can sync some larger checkpoints on mainnet.\n#[test]\nfn sync_large_checkpoints_mainnet() -> Result<()> {\n    let reuse_tempdir = sync_until(\n        LARGE_CHECKPOINT_TEST_HEIGHT,\n        Mainnet,\n        STOP_AT_HEIGHT_REGEX,\n        LARGE_CHECKPOINT_TIMEOUT,\n        None,\n    )?;\n\n    // if stopping corrupts the rocksdb database, zebrad might hang or crash here\n    // if stopping does not write the rocksdb database to disk, Zebra will\n    // sync, rather than stopping immediately at the configured height\n    sync_until(\n        (LARGE_CHECKPOINT_TEST_HEIGHT - 1).unwrap(),\n        Mainnet,\n        \"previous state height is greater than the stop height\",\n        STOP_ON_LOAD_TIMEOUT,\n        Some(reuse_tempdir),\n    )?;\n\n    Ok(())\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Zebra Configuration File Using CLI (Bash)\nDESCRIPTION: This snippet generates a default `zebrad` configuration file in the user's preferences directory using the `zebrad generate` command. It facilitates initial setup by creating the `zebrad.toml` file, which can be customized later. Dependencies include having Zebra installed and available in the system PATH.\nSOURCE: https://github.com/zcashfoundation/zebra/blob/main/book/src/user/install.md#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\nzebrad generate -o ~/.config/zebrad.toml\n```\n\n----------------------------------------\n\nTITLE: Getting Handle for Tip Chain Value Pool Column Family in Zebra (Rust)\nDESCRIPTION: Retrieves the handle for the \"tip_chain_value_pool\" column family from the RocksDB database instance (`self.db`). This handle provides a reference needed to perform read and write operations specifically within this column family, enabling interaction with the stored tip value pool data.\nSOURCE: https://github.com/zcashfoundation/zebra/blob/main/book/src/dev/rfcs/0012-value-pools.md#_snippet_20\n\nLANGUAGE: Rust\nCODE:\n```\nlet tip_chain_value_pool = self.db.cf_handle(\"tip_chain_value_pool\").unwrap();\n```\n\n----------------------------------------\n\nTITLE: Pruning QueuedBlocks by Finalized Height in Rust\nDESCRIPTION: The `prune_by_height` method discards all queued blocks whose height is less than or equal to the finalized height, preventing indefinite growth of the queued block set and aligning with finality.\nSOURCE: https://github.com/zcashfoundation/zebra/blob/main/book/src/dev/rfcs/0005-state-updates.md#_snippet_15\n\nLANGUAGE: rust\nCODE:\n```\npub fn prune_by_height(&mut self, finalized_height: block::Height) {\n    // Remove queued blocks with height <= finalized_height\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Zebra Logging Filter for Specific Component (TOML)\nDESCRIPTION: This TOML configuration snippet sets the logging filter for Zebra's tracing component, allowing different levels for different parts of the application. Here, it sets the overall filter to 'info' but enables 'debug' logging specifically for the `zebra_network` component, providing detailed network activity logs while keeping other logs concise.\nSOURCE: https://github.com/zcashfoundation/zebra/blob/main/book/src/user/troubleshooting.md#_snippet_4\n\nLANGUAGE: toml\nCODE:\n```\n[tracing]\nfilter = 'info,zebra_network=debug'\n```\n\n----------------------------------------\n\nTITLE: Building Zebra with Prometheus Feature using Cargo (Bash)\nDESCRIPTION: This command uses `cargo install` to build the `zebrad` binary from the ZcashFoundation/zebra GitHub repository. It specifically enables the `prometheus` feature flag, which is required for exposing metrics, and uses the `--locked` flag for reproducible builds.\nSOURCE: https://github.com/zcashfoundation/zebra/blob/main/book/src/user/metrics.md#_snippet_0\n\nLANGUAGE: Bash\nCODE:\n```\ncargo install --features prometheus --locked --git https://github.com/ZcashFoundation/zebra zebrad\n```\n\n----------------------------------------\n\nTITLE: Dequeue Children Blocks in QueuedBlocks in Rust\nDESCRIPTION: The `dequeue_children` function retrieves and removes all blocks waiting on a specific parent hash, cleaning up the associated mappings to maintain consistency after parent block arrival.\nSOURCE: https://github.com/zcashfoundation/zebra/blob/main/book/src/dev/rfcs/0005-state-updates.md#_snippet_14\n\nLANGUAGE: rust\nCODE:\n```\npub fn dequeue_children(&mut self, parent: block::Hash) -> Vec<QueuedBlock> {\n    // Remove and return queued blocks awaiting parent\n}\n```\n\n----------------------------------------\n\nTITLE: Build Zebra with Elasticsearch feature\nDESCRIPTION: This command builds and installs the Zebra binary with the `elasticsearch` feature enabled. The `elasticsearch` feature enables the functionality of exporting blockchain data to Elasticsearch. It uses `cargo install` to install Zebra from the GitHub repository with the specified feature and dependencies.\nSOURCE: https://github.com/zcashfoundation/zebra/blob/main/book/src/user/elasticsearch.md#_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\ncargo install --features elasticsearch --locked --git https://github.com/ZcashFoundation/zebra zebrad\n```\n\n----------------------------------------\n\nTITLE: Zebra Synchronization Log\nDESCRIPTION: This log snippet indicates that Zebra has finished the initial sync to the chain tip. The sync percentage is 100%, and the current height and network upgrade are displayed.\nSOURCE: https://github.com/zcashfoundation/zebra/blob/main/book/src/user/mining.md#_snippet_4\n\nLANGUAGE: console\nCODE:\n```\n...\n2023-02-21T18:41:09.088931Z  INFO {zebrad=\"4daedbc\" net=\"Main\"}: zebrad::components::sync::progress: finished initial sync to chain tip, using gossiped blocks sync_percent=100.000% current_height=Height(1992055) network_upgrade=Nu5 remaining_sync_blocks=1 time_since_last_state_block=0s\n...\n```\n\n----------------------------------------\n\nTITLE: Creating and Accessing Column Family with Method\nDESCRIPTION: This Rust code snippet demonstrates how to create a typed handle to a column family and access it through a method. The `sapling_tx_ids_cf()` method retrieves a typed column family instance, ensuring type safety when interacting with the database. It shows a structured way of interacting with column families.\nSOURCE: https://github.com/zcashfoundation/zebra/blob/main/book/src/dev/state-db-upgrades.md#_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nimpl Storage {\n    /// Returns a typed handle to the `sapling_tx_ids` column family.\n    pub(crate) fn sapling_tx_ids_cf(&self) -> SaplingTxIdsCf {\n        SaplingTxIdsCf::new(&self.db, SAPLING_TX_IDS)\n            .expect(\"column family was created when database was created\")\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Parsing Zcash Block in Hexadecimal Format\nDESCRIPTION: Complete hexadecimal representation of a Zcash block including header information, transaction data, inputs, outputs, and scripts. The block contains mining attribution (\"Mined by AntPool\") and multiple transactions with their signature scripts and output addresses.\nSOURCE: https://github.com/zcashfoundation/zebra/blob/main/zebra-test/src/vectors/block-main-0-434-873.txt#_snippet_0\n\nLANGUAGE: hexadecimal\nCODE:\n```\\n```\n\n----------------------------------------\n\nTITLE: Checking Server Status with GetInfo in Bash\nDESCRIPTION: Command to check if the gRPC server is running by calling the GetInfo method. This verifies connectivity and returns basic information about the scanner, such as the minimum Sapling birthday height.\nSOURCE: https://github.com/zcashfoundation/zebra/blob/main/book/src/user/shielded-scan-grpc-server.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngrpcurl -plaintext '127.0.0.1:8231' scanner.Scanner/GetInfo\n```\n\n----------------------------------------\n\nTITLE: Definition of constants for difficulty averaging window and median block span\nDESCRIPTION: Defines compile-time constants used for difficulty threshold averaging and median time span calculations based on Zcash specification. These constants underpin calculations in difficulty adjustment routines.\nSOURCE: https://github.com/zcashfoundation/zebra/blob/main/book/src/dev/rfcs/0006-contextual-difficulty.md#_snippet_0\n\nLANGUAGE: Rust\nCODE:\n```\npub const POW_AVERAGING_WINDOW: usize = 17;\npub const POW_MEDIAN_BLOCK_SPAN: usize = 11;\n```\n\n----------------------------------------\n\nTITLE: Running lightwalletd with Zebra as Backend\nDESCRIPTION: Command to start the lightwalletd service using Zebra as the backend. It specifies paths for configuration, data directory, and logs stdout for debugging.\nSOURCE: https://github.com/zcashfoundation/zebra/blob/main/book/src/user/lightwalletd.md#_snippet_4\n\nLANGUAGE: console\nCODE:\n```\nlightwalletd --zcash-conf-path ~/.config/zcash.conf --data-dir ~/.cache/lightwalletd --log-file /dev/stdout\n```\n\n----------------------------------------\n\nTITLE: Using Futures-Aware Mutex for Async Handshakes (Rust)\nDESCRIPTION: This function, typically part of a peer connection protocol, uses a futures-aware mutex (`futures::lock::Mutex`) to protect shared state (nonces) during async handshake negotiation. Such usage prevents task blocking and allows the mutex to yield to the async scheduler, avoiding deadlocks/deadtime. It requires that `nonces` be an Arc-protected async mutex, and the function parameters include peer connection, configuration, and user agent data. Used in the context of network handshakes with strict timeouts, it outputs either success (version/service agreement) or a handshake error, and the critical section is short-lived to maintain efficiency.\nSOURCE: https://github.com/zcashfoundation/zebra/blob/main/book/src/dev/rfcs/0011-async-rust-in-zebra.md#_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\npub async fn negotiate_version(\n    peer_conn: &mut Framed<TcpStream, Codec>,\n    addr: &SocketAddr,\n    config: Config,\n    nonces: Arc<futures::lock::Mutex<HashSet<Nonce>>>,\n    user_agent: String,\n    our_services: PeerServices,\n    relay: bool,\n) -> Result<(Version, PeerServices), HandshakeError> {\n    // Create a random nonce for this connection\n    let local_nonce = Nonce::default();\n    // # Correctness\n    //\n    // It is ok to wait for the lock here, because handshakes have a short\n    // timeout, and the async mutex will be released when the task times\n    // out.\n    nonces.lock().await.insert(local_nonce);\n\n    ...\n}\n```\n\n----------------------------------------\n\nTITLE: Creating and signing a new Zcash transaction in Python\nDESCRIPTION: This code snippet outlines steps to construct a new Zcash transaction, including adding inputs and outputs, signing each input with private keys, and calculating transaction signatures. It relies on cryptographic dependencies and prepares the transaction for broadcast or storage, ensuring integrity and authenticity.\nSOURCE: https://github.com/zcashfoundation/zebra/blob/main/zebra-test/src/vectors/block-main-0-434-873.txt#_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\ndef create_transaction(inputs, outputs, private_keys):\n    tx = Transaction()\n    for inp in inputs:\n        tx.add_input(inp)\n    for out in outputs:\n        tx.add_output(out)\n    for i, inp in enumerate(tx.inputs):\n        # Sign each input with corresponding private key\n        signature = sign_input(tx, i, private_keys[i])\n        inp.signature = signature\n    tx.compute_signature_hash()\n    return tx\n\ndef sign_input(transaction, input_index, private_key):\n    # Creates cryptographic signature for transaction input\n    data_to_sign = transaction.get_input_data(input_index)\n    signature = cryptographic_sign(data_to_sign, private_key)\n    return signature\n```\n\n----------------------------------------\n\nTITLE: PendingUtxos Structure Definition in Rust\nDESCRIPTION: This code snippet defines the `PendingUtxos` struct in Rust, which is responsible for managing pending UTXO requests. It includes fields for storing outpoints and oneshot senders, along with methods for queueing requests, responding to requests, checking against known UTXOs, and pruning expired entries.\nSOURCE: https://github.com/zcashfoundation/zebra/blob/main/book/src/dev/rfcs/0004-asynchronous-script-verification.md#_snippet_2\n\nLANGUAGE: rust\nCODE:\n```\n// sketch\n#[derive(Default, Debug)]\nstruct PendingUtxos(HashMap<OutPoint, oneshot::Sender<Utxo>>);\n\nimpl PendingUtxos {\n    // adds the outpoint and returns (wrapped) rx end of oneshot\n    // checks the spend height and restriction before sending the utxo response\n    // return can be converted to `Service::Future`\n    pub fn queue(\n        &mut self,\n        outpoint: OutPoint,\n        spend_height: Height,\n        spend_restriction: SpendRestriction,\n    ) -> impl Future<Output=Result<Response, ...>>;\n\n    // if outpoint is a hashmap key, remove the entry and send output on the channel\n    pub fn respond(&mut self, outpoint: OutPoint, output: transparent::Output);\n\n    /// check the list of pending UTXO requests against the supplied `utxos`\n    pub fn check_against(&mut self, utxos: &HashMap<transparent::OutPoint, Utxo>);\n\n    // scans the hashmap and removes any entries with closed senders\n    pub fn prune(&mut self);\n}\n```\n\n----------------------------------------\n\nTITLE: Validating blockchain state and transaction signatures in Python\nDESCRIPTION: This snippet provides functions to verify transaction signatures and blockchain integrity. It includes routines to check that each transaction input's signature is valid against the referenced public key, and to validate the overall chain continuity, ensuring consensus correctness.\nSOURCE: https://github.com/zcashfoundation/zebra/blob/main/zebra-test/src/vectors/block-main-0-434-873.txt#_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\ndef validate_transaction_signature(tx_input, public_key):\n    data = tx_input.data\n    signature = tx_input.signature\n    return verify_signature(data, signature, public_key)\n\ndef verify_signature(data, signature, public_key):\n    # Verifies that the signature is valid for the given data and public key\n    return cryptographic_verify(data, signature, public_key)\n\ndef validate_blockchain(chain):\n    for i in range(1, len(chain)):\n        prev_block = chain[i - 1]\n        current_block = chain[i]\n        if not is_valid_chain_link(prev_block, current_block):\n            return False\n    return True\n\ndef is_valid_chain_link(prev_block, current_block):\n    # Checks if current block correctly references previous block\n    return current_block.header.prev_hash == hash(prev_block.header)\n```\n\n----------------------------------------\n\nTITLE: Exploring Method Signatures with gRPC Reflection in Bash\nDESCRIPTION: Command sequence that uses gRPC reflection to explore the request and response types for the GetResults method. This shows the full type hierarchy of the API for this method.\nSOURCE: https://github.com/zcashfoundation/zebra/blob/main/book/src/user/shielded-scan-grpc-server.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ngrpcurl -plaintext '127.0.0.1:8231' describe scanner.Scanner.GetResults \\\n&& grpcurl -plaintext '127.0.0.1:8231' describe scanner.GetResultsRequest \\\n&& grpcurl -plaintext '127.0.0.1:8231' describe scanner.GetResultsResponse \\\n&& grpcurl -plaintext '127.0.0.1:8231' describe scanner.Results \\\n&& grpcurl -plaintext '127.0.0.1:8231' describe scanner.Transactions \\\n&& grpcurl -plaintext '127.0.0.1:8231' describe scanner.Transaction\n```\n\n----------------------------------------\n\nTITLE: Sharing Progress with Tokio Select Macro - Rust\nDESCRIPTION: This code snippet demonstrates how Zebra's peer crawler task uses the `tokio::select!` macro to avoid starvation and deadlocks when working with multiple futures. It handles handshakes, crawl timers, and demand requests, ensuring progress on all ready futures. The snippet also spawns independent tasks for each handshake to prevent blocking.\nSOURCE: https://github.com/zcashfoundation/zebra/blob/main/book/src/dev/rfcs/0011-async-rust-in-zebra.md#_snippet_5\n\nLANGUAGE: rust\nCODE:\n```\n// CORRECTNESS\n//\n// To avoid hangs and starvation, the crawler must:\n// - spawn a separate task for each handshake, so they can make progress\n//   independently (and avoid deadlocking each other)\n// - use the `select!` macro for all actions, because the `select` function\n//   is biased towards the first ready future\n\nloop {\n    let crawler_action = tokio::select! {\n        a = handshakes.next() => a,\n        a = crawl_timer.next() => a,\n        _ = demand_rx.next() => {\n            if let Some(candidate) = candidates.next().await {\n                // candidates.next has a short delay, and briefly holds the address\n                // book lock, so it shouldn't hang\n                DemandHandshake { candidate }\n            } else {\n                DemandCrawl\n            }\n        }\n    };\n\n    match crawler_action {\n        DemandHandshake { candidate } => {\n            // spawn each handshake into an independent task, so it can make\n            // progress independently of the crawls\n            let hs_join =\n                tokio::spawn(dial(candidate, connector.clone()));\n            handshakes.push(Box::pin(hs_join));\n        }\n        DemandCrawl => {\n            // update has timeouts, and briefly holds the address book\n            // lock, so it shouldn't hang\n            candidates.update().await?;\n        }\n        // handle handshake responses and the crawl timer\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Cloning the Zebra Repository for Docker Compose\nDESCRIPTION: Clones a specific version (v2.2.0) of the ZcashFoundation/zebra repository with limited history (`--depth 1`) and changes the current directory into the cloned repository. This is a prerequisite for using the provided Docker Compose files.\nSOURCE: https://github.com/zcashfoundation/zebra/blob/main/book/src/user/docker.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ngit clone --depth 1 --branch v2.2.0 https://github.com/ZcashFoundation/zebra.git\ncd zebra\n```\n\n----------------------------------------\n\nTITLE: Parsing and handling blockchain block data in Rust\nDESCRIPTION: This code snippet involves parsing raw block data and extracting relevant blockchain information. It processes block headers, transactions, and verifies the integrity of data. Dependencies include Rust standard libraries and blockchain-specific crates for cryptography and data validation. Inputs include raw binary data representing blocks; outputs are structured block objects or error logs if parsing fails.\nSOURCE: https://github.com/zcashfoundation/zebra/blob/main/zebra-test/src/vectors/orchard-shielded-data-4.txt#_snippet_0\n\nLANGUAGE: Rust\nCODE:\n```\n1b51b1e49d9a6643835f2fe1d0fc252fc438e162b3a3c86b270d519fabcf9605d69e012a8f9b48ab5b7237bd49e36ba44f8233f563b72144cbe942591dbae19ded098460a546d1bcd3d3b378500dcf12403198e1ed8bac9f40a214763770ef004083299228c7a0f37f6f39b589a9d0fbc9fc5628ffffc17ffdc7c1585aca38a1aa589fc3337e8917ce3337e6615d58edca701b7967342b4b1aaeccfac99f9cd793b1f7a123952ddc457491e38a0b3c75431f5f2137735a2fcb6717c0d113dc071bdb3ba72305eb057e477b64b9089d2218ac6e1e56c96443a0f0159b04d168b7b1981d4a39c3bfb38e2880b7a53f0eea11dce05593de3c80692c8c0a3dd9a01852baf3df0ab14c507c8e729ca55c6f03ba95f854f108dd41d706d600d0e8f5cf0d49b2cf31e1b3c6ceab53df45cead7872cc1b108f5b42dac5bafc51b906f4aa64602a221c50bbc193bd018230a76e2b0be1e31079047440592f2337fa5f76eb9b297945b11088d8e2a2c440bf0f5800fd1b92fcf6d96b54158dcb25c26101e081aee4ae2b5e7da305449c78bfee2a992f3da911e1a1ad134c4ebed87aa70501690b3a28b04c3315ed504a1f5d0f3f788c638a4923453b76806ae2e24c8ad04af6def9f312\n```\n\n----------------------------------------\n\nTITLE: Creating Amount from Little-Endian Bytes in Zebra (Rust)\nDESCRIPTION: Adds a `from_bytes` method to the `Amount` struct. This function deserializes an `Amount` from an 8-byte little-endian array, converting it to an `i64` and then into an `Amount` struct, including the necessary `PhantomData`. This method is required for implementing `FromDisk` for `Amount`, enabling deserialization from disk storage.\nSOURCE: https://github.com/zcashfoundation/zebra/blob/main/book/src/dev/rfcs/0012-value-pools.md#_snippet_16\n\nLANGUAGE: Rust\nCODE:\n```\n/// From little endian byte array\npub fn from_bytes(&self, bytes: [u8; 8]) -> Self {\n    let amount = i64::from_le_bytes(bytes).try_into().unwrap();\n    Self(amount, PhantomData)\n}\n```\n\n----------------------------------------\n\nTITLE: Proptest Seed Configuration for SpendingKey Test Case\nDESCRIPTION: A proptest seed entry that reproduces a failure case for SpendingKey testing. The seed references a test case where the SpendingKey has Mainnet network type and all-zero bytes, which previously caused test failures.\nSOURCE: https://github.com/zcashfoundation/zebra/blob/main/zebra-chain/proptest-regressions/keys/sapling/tests.txt#_snippet_0\n\nLANGUAGE: proptest-seeds\nCODE:\n```\ncc 14cc005b0333245bcb502328cfdad9a44032fe7b3fb38a8a17c2eaa10b26dd38 # shrinks to spending_key = SpendingKey { network: Mainnet, bytes: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }\n```\n\n----------------------------------------\n\nTITLE: V4 Transaction Struct with Anchor Variants in Rust\nDESCRIPTION: Defines the structure of a V4 transaction with separate fields for inputs, outputs, lock time, expiry height, optional joinsplit data, and optional sapling shielded data, incorporating the concept of anchor variants to support different transaction versions.\nSOURCE: https://github.com/zcashfoundation/zebra/blob/main/book/src/dev/rfcs/0010-v5-transaction.md#_snippet_0\n\nLANGUAGE: Rust\nCODE:\n```\nenum Transaction::V4 {\n    inputs: Vec<transparent::Input>,\n    outputs: Vec<transparent::Output>,\n    lock_time: LockTime,\n    expiry_height: block::Height,\n    joinsplit_data: Option<JoinSplitData<Groth16Proof>>,\n    sapling_shielded_data: Option<sapling::ShieldedData<PerSpendAnchor>>,\n}\n\n```\n\n----------------------------------------\n\nTITLE: Modeling Sapling Output Serialization Variants for V4 and V5 in Rust\nDESCRIPTION: This snippet defines the `Output` struct representing Sapling output fields, which are consistent across V4 and V5 transactions. Additionally, it differentiates serialization wrappers: `OutputInTransactionV4` wraps the entire output for V4 serialization, whereas `OutputPrefixInTransactionV5` holds the prefix fields for V5 serialization where outputs are split into multiple arrays. The code requires cryptographic types such as `commitment::ValueCommitment`, `jubjub::Fq`, ephemeral keys, encrypted note types, and `Groth16Proof`. Serialization is handled via `ZcashSerialize` and `ZcashDeserialize` traits with conversion methods to split and recombine outputs depending on transaction version.\nSOURCE: https://github.com/zcashfoundation/zebra/blob/main/book/src/dev/rfcs/0010-v5-transaction.md#_snippet_4\n\nLANGUAGE: Rust\nCODE:\n```\nstruct Output {\n    cv: commitment::ValueCommitment,\n    cm_u: jubjub::Fq,\n    ephemeral_key: keys::EphemeralPublicKey,\n    enc_ciphertext: note::EncryptedNote,\n    out_ciphertext: note::WrappedNoteKey,\n    // This field is stored in a separate array in v5 transactions, see:\n    // https://zips.z.cash/protocol/nu5.pdf#txnencodingandconsensus\n    // parse using `zcash_deserialize_external_count` and `zcash_serialize_external_count`\n    zkproof: Groth16Proof,\n}\n\n/// Wrapper for `Output` serialization in a `V4` transaction.\nstruct OutputInTransactionV4(pub Output);\n\n/// The serialization prefix fields of an `Output` in Transaction V5.\n///\n/// In `V5` transactions, spends are split into multiple arrays, so the prefix\n/// and proof must be serialised and deserialized separately.\n///\n/// Serialized as `OutputDescriptionV5` in [protocol specification §7.3].\nstruct OutputPrefixInTransactionV5 {\n    cv: commitment::ValueCommitment,\n    cm_u: jubjub::Fq,\n    ephemeral_key: keys::EphemeralPublicKey,\n    enc_ciphertext: note::EncryptedNote,\n    out_ciphertext: note::WrappedNoteKey,\n}\n```\n\n----------------------------------------\n\nTITLE: Building Zebra with Cargo Features (Rust)\nDESCRIPTION: This command installs Zebra with specific optional features enabled, such as prometheus, sentry, elasticsearch, or shielded-scan, by passing the `--features` flag to `cargo install`. It allows customization of Zebra's capabilities for monitoring, tracing, or experimental features. Dependencies include having Rust and Cargo installed and configured.\nSOURCE: https://github.com/zcashfoundation/zebra/blob/main/book/src/user/install.md#_snippet_3\n\nLANGUAGE: console\nCODE:\n```\ncargo install --features=\"prometheus sentry elasticsearch shielded-scan\" ...\n```\n\n----------------------------------------\n\nTITLE: Custom Zebra Configuration File for Isolated Testnet Fork in TOML\nDESCRIPTION: Configuration snippet demonstrating key settings for running an isolated Zebra testnet fork with mining enabled. Includes the mempool configuration to enable processing at all heights, mining parameters including a miner payout address, network options with initial peers for block propagation, RPC listening address, and cache directory path to reuse synced state. This configuration supports mining and block template submission after the fork activation.\nSOURCE: https://github.com/zcashfoundation/zebra/blob/main/book/src/user/fork-zebra-testnet.md#_snippet_3\n\nLANGUAGE: TOML\nCODE:\n```\n[mempool]\ndebug_enable_at_height = 0\n\n[mining]\ndebug_like_zcashd = true\nminer_address = 't27eWDgjFYJGVXmzrXeVjnb5J3uXDM9xH9v'\n\n[network]\ncache_dir = false\ninitial_testnet_peers = [\n  \"dnsseed.testnet.z.cash:18233\",\n  \"testnet.seeder.zfnd.org:18233\",\n  \"testnet.is.yolo.money:18233\",\n]\nlisten_addr = \"0.0.0.0:18233\"\nnetwork = \"Testnet\"\n\n[rpc]\nlisten_addr = \"0.0.0.0:18232\"\n\n[state]\ncache_dir = \"/home/oxarbitrage/.cache/zebra\"\n```\n\n----------------------------------------\n\nTITLE: Proptest Seeds Configuration for Transaction Testing in Zebra\nDESCRIPTION: Configuration entries for proptest that save specific failure cases related to transaction handling in the Zebra blockchain implementation. These seeds help reproduce issues with transaction removal operations and rejection handling.\nSOURCE: https://github.com/zcashfoundation/zebra/blob/main/zebrad/proptest-regressions/components/mempool/storage/tests/prop.txt#_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\ncc b258d507c0b2aef6c2793bdb3fc29e6367e62fba9df378ea6797e9bc97fd2780 # shrinks to input = RemoveSameEffects { transactions: alloc::vec::Vec<zebra_chain::transaction::unmined::UnminedTx><zebra_chain::transaction::unmined::UnminedTx>, len=2, mined_ids_to_remove: std::collections::hash::set::HashSet<zebra_chain::transaction::hash::Hash><zebra_chain::transaction::hash::Hash>, len=2 }\ncc 4616d813ba54e7b7475a1adb880905dfb05a63b59a18dc079893bf963ae92097 # shrinks to rejection_error = SameEffectsChain(Expired), mut rejection_template = Witnessed(WtxId { id: transaction::Hash(\"0000000000000000000000000000000000000000000000000000000000000000\"), auth_digest: AuthDigest(\"353b92c552d72e06b512c81f909991b291ca0fec5251d6696755091100000000\") })\n```\n\n----------------------------------------\n\nTITLE: AnchorVariant Trait and Implementations for V4 and V5 in Rust\nDESCRIPTION: Defines an `AnchorVariant` trait with implementations for `PerSpendAnchor` and `SharedAnchor`, modeling the difference in anchor handling between V4 and V5 transactions. These types control whether an anchor is per-spend or shared across spends.\nSOURCE: https://github.com/zcashfoundation/zebra/blob/main/book/src/dev/rfcs/0010-v5-transaction.md#_snippet_1\n\nLANGUAGE: Rust\nCODE:\n```\nstruct PerSpendAnchor {}\nstruct SharedAnchor {}\n\n/// This field is not present in this transaction version.\nstruct FieldNotPresent;\n\nimpl AnchorVariant for PerSpendAnchor {\n    type Shared = FieldNotPresent;\n    type PerSpend = sapling::tree::Root;\n}\n\nimpl AnchorVariant for SharedAnchor {\n    type Shared = sapling::tree::Root;\n    type PerSpend = FieldNotPresent;\n}\n\ntrait AnchorVariant {\n    type Shared;\n    type PerSpend;\n}\n\n```\n\n----------------------------------------\n\nTITLE: Adding RPC methods for blockchain queries and transaction handling in Rust\nDESCRIPTION: These snippets describe the implementation of various RPC methods such as 'get_address_tx_ids', 'getaddressbalance', 'getaddressutxos', and support for transaction relays in Zebra. They include logic for handling RPC requests, response formatting, and optional features. Dependencies include Zebra's state and transaction modules, along with RPC response types.\nSOURCE: https://github.com/zcashfoundation/zebra/blob/main/CHANGELOG.md#_snippet_3\n\nLANGUAGE: Rust\nCODE:\n```\nimpl RpcHandler {\n    async fn get_address_tx_ids(&self, request: GetAddressTxIdsRequest) -> RpcResult<GetAddressTxIdsResponse> {\n        // Implementation logic for fetching transaction IDs associated with an address\n    }\n    async fn get_address_balance(&self, request: GetAddressBalanceRequest) -> RpcResult<GetAddressBalanceResponse> {\n        // Logic to retrieve balance for a transparent address\n    }\n    async fn get_address_utxos(&self, request: GetAddressUtxosRequest) -> RpcResult<GetAddressUtxosResponse> {\n        // Logic to retrieve UTXOs for an address\n    }\n    async fn send_transaction(&self, tx: Transaction) -> RpcResult<SendTransactionResult> {\n        // Logic for relaying a transaction to the network\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Serialized Zcash V2 Transaction with JoinSplit Data\nDESCRIPTION: A textual representation of a Zcash V2 transaction object identified by the hash 'cc970b...'. It includes empty inputs/outputs, a lock time, and detailed JoinSplit data containing cryptographic elements like anchors, nullifiers, commitments, keys, proofs (Bctv14Proof), and encrypted ciphertexts. This format is likely used for debugging or testing within the Zebra project.\nSOURCE: https://github.com/zcashfoundation/zebra/blob/main/zebra-chain/proptest-regressions/transaction/tests.txt#_snippet_0\n\nLANGUAGE: Text\nCODE:\n```\ncc 970b01026847bf606d6588be7c6df352ee8c02a077432fca9c958aa825b3d543 # shrinks to tx = V2 { inputs: [], outputs: [], lock_time: Height(block::Height(0)), joinsplit_data: Some(JoinSplitData { first: JoinSplit { vpub_old: 0, vpub_new: 0, anchor: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], nullifiers: [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]], commitments: [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 22, 79, 106, 101, 97, 249, 137, 44, 11], [175, 229, 144, 49, 91, 35, 169, 102, 1, 142, 194, 21, 15, 219, 38, 242, 68, 80, 218, 212, 39, 190, 219, 73, 163, 241, 235, 226, 73, 251, 124, 181]], ephemeral_key: [67, 226, 107, 92, 119, 105, 106, 159, 101, 114, 207, 224, 9, 82, 213, 178, 214, 156, 52, 213, 39, 218, 107, 96, 239, 98, 109, 227, 224, 45, 234, 203], random_seed: [54, 236, 144, 247, 83, 249, 55, 22, 16, 162, 21, 7, 211, 163, 182, 128, 182, 14, 176, 132, 138, 78, 227, 184, 212, 205, 43, 205, 195, 228, 152, 120], vmacs: [[87, 89, 104, 68, 16, 157, 75, 207, 23, 160, 37, 130, 237, 64, 248, 116, 58, 212, 173, 83, 114, 77, 2, 86, 65, 164, 89, 83, 177, 27, 253, 195], [176, 254, 5, 73, 182, 182, 51, 12, 119, 76, 115, 97, 22, 2, 3, 146, 170, 236, 136, 6, 231, 170, 157, 30, 224, 166, 19, 205, 219, 45, 37, 159]], zkproof: Bctv14Proof(\"cd3a96636561cab7e0d719a5cdf84dc3f2667ec7b6cccfa1e4771d466333c6fb3685f07ddc5ef635ac4bde77f9bab73d144db848cf62bd553521878fc3fb9e0034f4aa5c03c3290e70e001b9f9558c847926ae0d4801d4b7c5bb1aa138e9064fa54ab810cb24169d221018038feb6a58405992c1ca42d6cedbbb7f8ea38f4da3e8f7b51421c6e973f00121d3dd77390de13c9510a6b73fc7af93346bd2aa129a8a753c1aaf3f2ab5ee3c8b52a254f90bd3f55b7f7a0ef62d90f68652f95d8fd5b43fd0e4753834322788e17c4325dc8e74536d62c6867dda17f7eddaca71cd84f7da8f3662f2e53696d9190208bc46ca9d6f3985645cb230507a13a5439898b8bc8815b12cbda35476a06a0a4df010bd5a4e006f87ba386fa861e67717b3dcaa727f9763f16a6471\"), enc_ciphertexts: [[65, 206, 10, 5, 19, 98, 30, 235, 29, 133, 136, 161, 98, 30, 5, 191, 192, 231, 190, 39, 182, 40, 51, 241, 90, 132, 31, 10, 121, 220, 144, 82, 193, 68, 199, 33, 110, 227, 122, 102, 243, 63, 226, 169, 5, 123, 0, 50, 18, 118, 124, 43, 192, 203, 80, 111, 91, 179, 174, 254, 139, 176, 138, 227, 174, 14, 41, 100, 40, 134, 189, 185, 255, 39, 174, 229, 218, 48, 119, 28, 143, 136, 236, 213, 35, 200, 223, 208, 129, 130, 186, 37, 2], [56, 118, 188, 209, 55, 212, 241, 50, 50, 189, 23, 116, 127, 242, 176, 203, 233, 23, 177, 179, 163, 222, 121, 7, 192, 26, 179, 134, 192, 170, 14, 229, 24, 20, 226, 27, 79, 157, 127, 82, 116, 140, 186, 143, 226, 49, 31, 125, 211, 178, 71]] }, rest: [JoinSplit { vpub_old: 17173579853933010390, vpub_new: 13390459429905795147, anchor: [123, 124, 219, 139, 86, 164, 72, 60, 210, 26, 253, 138, 189, 24, 35, 75, 203, 198, 238, 234, 224, 240, 119, 81, 31, 235, 54, 232, 93, 36, 193, 96], nullifiers: [[224, 87, 222, 220, 127, 7, 90, 208, 45, 239, 140, 105, 53, 139, 85, 120, 168, 211, 172, 97, 145, 139, 2, 226, 58, 105, 27, 199, 111, 66, 119, 89], [13, 65, 167, 197, 152, 14, 53, 94, 26, 34, 177, 13, 102, 156, 166, 196, 48, 195, 4, 109, 109, 195, 30, 153, 55, 248, 101, 234, 243, 185, 213, 121]], commitments: [[99, 238, 42, 132, 122, 15, 141, 195, 30, 61, 137, 43, 223, 108, 197, 42, 38, 178, 135, 16, 116, 27, 117, 144, 64, 47, 125, 190, 154, 159, 38, 207], [92, 242, 6, 34, 173, 207, 184, 241, 74, 37, 26, 107, 27, 10, 135, 144, 245, 90, 245, 152, 1, 223, 203, 80, 41, 235, 44, 180, 100, 26, 205, 45]], ephemeral_key: [253, 135, 190, 96, 49, 127, 99, 218, 170, 168, 83, 101, 2, 51, 54, 37, 236, 23, 31, 139, 53, 254, 41, 206, 251, 1, 7, 74, 70, 200, 111, 111], random_seed: [179, 182, 51, 252, 54, 57, 171, 126, 41, 239, 180, 157, 100, 137, 159, 82, 165, 140, 173, 14, 194, 110, 37, 31, 145, 212, 178, 76, 232, 240, 199, 220], vmacs: [[27, 20, 163, 14, 102, 215, 6, 61, 191, 90, 7, 166, 210, 227, 139, 158, 80, 181, 223, 58, 231, 184, 230, 57, 219, 81, 33, 59, 121, 255, 95, 128], [227, 60, 90, 70, 197, 196, 172, 95, 251, 176, 30, 249, 43, 51, 175, 193, 91, 129, 150, 100, 149, 246, 198, 103, 94, 244, 183, 255, 251, 242, 182, 221]], zkproof: Bctv14Proof(\"c05c42285cd5d0bce6132ccf45265678f76f6bb7911b71336e57ffb77d344d8a9c91fea1b12f373cded133ef05b5d5fbcaebe33557e236729dde386d69373360d99b3d70740d5017d389403a6bee3ae61c4545d5464f139f56a05ab56f6bba8cf7f16053486ba6f6ee8d5284fa63a3e88a89bd4f146d800902e95804921802b27a6e627d8082227fd07d65ed8a43da4aa5edb884958720f85ec74687580a7fdb5d014eb30cbcd32733722643404d1345ecd37e54240db342329acde757d8ed955a29f286d55837cf86ec4f60f12deb5060bb61cc5dc5066c7564a87f304e3905c5ca8df72078c9c77c84a67f712488de23245e8c820e45dc4eabb402d3960f8972fe2dcba22712b2be938bceefe7a8cdb4241e7244f4a18f0ce4957e4250de234826412c31b23806\"), enc_ciphertexts: [[21, 83, 42, 58, 180, 76, 131, 27, 63, 103, 10, 200, 219, 159, 1, 172, 20, 77, 163, 116, 211, 72, 6, 214, 102, 133, 102, 202, 55, 105, 200, 166, 125, 180, 148, 89, 94, 6, 3, 188, 62, 180, 162, 180, 54, 207, 189, 236, 78, 110, 75, 7, 232, 189, 159], [90, 14, 73, 172, 103, 66, 31, 158, 60, 242, 14, 18, 203, 66, 84, 102, 42, 255, 22, 207, 210, 29, 1, 236, 146, 215, 144, 49, 227, 148, 143, 188, 105, 152, 63, 63, 2, 243, 127, 120, 144, 11, 142, 227, 221, 210, 187]] }], pub_key: [58, 72, 187, 224, 188, 9, 29, 99, 224, 66, 149, 165, 109, 165, 217, 16, 179, 157, 64, 252, 155, 227, 210, 43, 130, 219, 13, 230, 214, 229, 71, 11], sig: [16010176868490725509, 7887742659580712849, 8657997692506174447, 4365825095054003462, 1771367463574841238, 4777045573149003376, 4029938572438198196, 13178274858355317902] }) }\n```\n\n----------------------------------------\n\nTITLE: Registering Wakeups Before Returning Poll::Pending with ready! Macro (Rust)\nDESCRIPTION: This Rust code snippet demonstrates the correct way to avoid missed wakeups when implementing asynchronous polling by ensuring that a wakeup is registered prior to returning Poll::Pending. It is used inside a Service's poll loop, leveraging the ready! macro to handle potential Pending states from inner services. Dependencies include the `ready!` macro and are typically used within Tower services and Tokio-based async runtimes. The expected input is a mutable reference to a service object; the output is a result of polling service readiness, and care must be taken to ensure this pattern is followed any time Poll::Pending can be returned.\nSOURCE: https://github.com/zcashfoundation/zebra/blob/main/book/src/dev/rfcs/0011-async-rust-in-zebra.md#_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\n// CORRECTNESS\n//\n// The current task must be scheduled for wakeup every time we return\n// `Poll::Pending`.\n//\n//`ready!` returns `Poll::Pending` when the service is unready, and\n// the inner `poll_ready` schedules this task for wakeup.\n//\n// `cancel.poll` also schedules this task for wakeup if it is canceled.\nlet res = ready!(this\n    .service\n    .as_mut()\n    .expect(\"poll after ready\")\n    .poll_ready(cx));\n```\n\n----------------------------------------\n\nTITLE: Releasing std::sync::Mutex Before Awaiting Future (Rust)\nDESCRIPTION: Here, a critical section holds a std::sync::Mutex lock for just enough time to perform synchronous computation and update shared state, after which the lock is dropped before any async `await`. This pattern is enforced by the Rust compiler, preventing the lock from being held across await boundaries (which would otherwise block the async executor's thread). Useful for scenarios where non-async mutexes are required (e.g., shared between async/non-async code), it outputs a prepared value for further async rate-limited processing, and inputs include the address book and its associated logic.\nSOURCE: https://github.com/zcashfoundation/zebra/blob/main/book/src/dev/rfcs/0011-async-rust-in-zebra.md#_snippet_4\n\nLANGUAGE: rust\nCODE:\n```\n// # Correctness\n//\n// In this critical section, we hold the address mutex, blocking the\n// current thread, and all async tasks scheduled on that thread.\n//\n// To avoid deadlocks, the critical section:\n// - must not acquire any other locks\n// - must not await any futures\n//\n// To avoid hangs, any computation in the critical section should\n// be kept to a minimum.\nlet reconnect = {\n    let mut guard = self.address_book.lock().unwrap();\n    ...\n    let reconnect = guard.reconnection_peers().next()?;\n\n    let reconnect = MetaAddr::new_reconnect(&reconnect.addr, &reconnect.services);\n    guard.update(reconnect);\n    reconnect\n};\n\n// SECURITY: rate-limit new candidate connections\nsleep.await;\n```\n\n----------------------------------------\n\nTITLE: Installing zebra-scanner using Cargo (Bash)\nDESCRIPTION: Installs the `zebra-scanner` binary from the latest release Zebra repository using Rust's package manager, `cargo`. The `--locked` flag ensures that the `Cargo.lock` file is used for dependency versions. The binary will typically be placed in `~/.cargo/bin/`.\nSOURCE: https://github.com/zcashfoundation/zebra/blob/main/book/src/user/shielded-scan.md#_snippet_0\n\nLANGUAGE: Bash\nCODE:\n```\ncargo install --locked --git https://github.com/ZcashFoundation/zebra zebra-scan\n```\n\n----------------------------------------\n\nTITLE: Mempool Architecture Flow Diagram in Mermaid\nDESCRIPTION: A Mermaid diagram illustrating the architecture of the Zebra mempool, showing the transaction flow between components, external services, and the various processing stages from transaction submission to verification and storage.\nSOURCE: https://github.com/zcashfoundation/zebra/blob/main/book/src/dev/diagrams/mempool-architecture.md#_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\ngraph TD\n    %% External Components\n    Net[Network Service] \n    State[State Service]\n    TxVerifier[Transaction Verifier]\n    RPC[RPC Service]\n    \n    %% Mempool Main Components\n    Mempool{{Mempool Service}}\n    Storage{{Storage}}\n    Downloads{{Transaction Downloads}}\n    Crawler{{Crawler}}\n    QueueChecker{{Queue Checker}}\n    \n    %% Transaction Flow\n    Net -->|1- Poll peers| Mempool\n    RPC -->|1- Direct submit| Mempool\n    Crawler -->|1- Poll peers| Net\n    Crawler -->|2- Queue transactions| Mempool\n    \n    Mempool -->|3- Queue for download| Downloads\n    Downloads -->|4a- Download request| Net\n    Net -->|4b- Transaction data| Downloads\n    \n    Downloads -->|5a- Verify request| TxVerifier\n    TxVerifier -->|5b- Verification result| Downloads\n    \n    Downloads -->|6a- Check UTXO| State\n    State -->|6b- UTXO data| Downloads\n    \n    Downloads -->|7- Store verified tx| Storage\n    \n    QueueChecker -->|8a- Check for verified| Mempool\n    Mempool -->|8b- Process verified| QueueChecker\n    \n    Storage -->|9- Query responses| Mempool\n    Mempool -->|10- Gossip new tx| Net\n    \n    %% State Management\n    State -->|Chain tip changes| Mempool\n    Mempool -->|Updates verification context| Downloads\n    \n    %% Mempool responds to service requests\n    RPC -->|Query mempool| Mempool\n    Mempool -->|Mempool data| RPC\n    \n    %% Styling\n    classDef external fill:#444,stroke:#888,stroke-width:1px,color:white;\n    classDef component fill:#333,stroke:#888,stroke-width:1px,color:white;\n    \n    class Net,State,TxVerifier,RPC external;\n    class Mempool,Storage,Downloads,Crawler,QueueChecker component;\n```\n\n----------------------------------------\n\nTITLE: Prioritizing Cancellation Futures with Tokio Select - Rust\nDESCRIPTION: This snippet illustrates how Zebra prioritizes cancellation futures over other futures (like peer receiver futures) to prevent starvation under heavy load. It uses nested `future::select` calls to ensure that cancellation and timeouts take precedence. The code depends on the `futures` crate for `future::select`.\nSOURCE: https://github.com/zcashfoundation/zebra/blob/main/book/src/dev/rfcs/0011-async-rust-in-zebra.md#_snippet_6\n\nLANGUAGE: rust\nCODE:\n```\n// CORRECTNESS\n//\n// Currently, select prefers the first future if multiple\n// futures are ready.\n//\n// If multiple futures are ready, we want the cancellation\n// to take priority, then the timeout, then peer responses.\nlet cancel = future::select(tx.cancellation(), timer_ref);\nmatch future::select(cancel, peer_rx.next()) {\n    ...\n}\n```\n\n----------------------------------------\n\nTITLE: Initiating a Blockchain Scan with zebra-scanner (Bash)\nDESCRIPTION: Runs the `zebra-scanner` command to scan the blockchain using a specific Sapling viewing key (e.g., the ZECpages public key) and its birthday height. It requires specifying the path to the `zebrad` cache directory (`--zebrad-cache-dir`) and the `zebrad` RPC listen address (`--zebra-rpc-listen-addr`). The `RUST_LOG=info` environment variable sets the logging level to INFO.\nSOURCE: https://github.com/zcashfoundation/zebra/blob/main/book/src/user/shielded-scan.md#_snippet_2\n\nLANGUAGE: Bash\nCODE:\n```\nRUST_LOG=info zebra-scanner --sapling-keys-to-scan '{\"key\":\"zxviews1q0duytgcqqqqpqre26wkl45gvwwwd706xw608hucmvfalr759ejwf7qshjf5r9aa7323zulvz6plhttp5mltqcgs9t039cx2d09mgq05ts63n8u35hyv6h9nc9ctqqtue2u7cer2mqegunuulq2luhq3ywjcz35yyljewa4mgkgjzyfwh6fr6jd0dzd44ghk0nxdv2hnv4j5nxfwv24rwdmgllhe0p8568sgqt9ckt02v2kxf5ahtql6s0ltjpkckw8gtymxtxuu9gcr0swvz\", \"birthday_height\": 419200}' --zebrad-cache-dir /media/alfredo/stuff/chain/zebra --zebra-rpc-listen-addr '127.0.0.1:8232'\n```\n\n----------------------------------------\n\nTITLE: Checking Dependency Issues - cargo deny check bans\nDESCRIPTION: This command checks for dependency issues, specifically banned dependencies, within the Zebra project.  This relies on `cargo deny` and its configuration file. This checks the dependencies to ensure they meet the requirements specified in `deny.toml`. The output of the command indicates any violations or issues.\nSOURCE: https://github.com/zcashfoundation/zebra/blob/main/book/src/dev/ecc-updates.md#_snippet_3\n\nLANGUAGE: Rust\nCODE:\n```\ncargo deny check bans\n```\n\n----------------------------------------\n\nTITLE: Bitcoin Transaction Hexadecimal Data with Multiple Inputs\nDESCRIPTION: Raw Bitcoin transaction data in hexadecimal format showing multiple transaction inputs. Each input contains signature scripts with ECDSA signatures (starting with hex 47/48 for signature length) and a public key. The transaction appears to follow standard Bitcoin serialization format.\nSOURCE: https://github.com/zcashfoundation/zebra/blob/main/zebra-test/src/vectors/block-main-0-419-202.txt#_snippet_0\n\nLANGUAGE: hexadecimal\nCODE:\n```\n0695cf603bb1179441ffffffff2f106cd2db629706c39720d691c0a23f333fb78552d5802b5b2628c8637b269fbb0000006a47304402204e8b0fd677dfca337e36afc35995b1c05a8bdb592406bdba213af6fc43173af60220551e3e6574401f9dfaefb5d91a4de1626d9c20991f5ac32cc635f3d0f0dcb5c2012103c91f93e3af970a8343c3bcb05826c57cd6e092af08661e0695cf603bb1179441ffffffff36f1da5c83b79d87eccf5e17dc82a86c1223c42bb5398c4fdcada2f7b3be0321af0000006a47304402202320e8824637797ad92c0882c81c2b55f9f3bd1719b75ec34251a54e47d1e05202207108711762ab278fdc8a9fa8719d206e0c7545a0ec2a8ad0ffc598d489d804b7012103c91f93e3af970a8343c3bcb05826c57cd6e092af08661e0695cf603bb1179441ffffffff6e6acee14caf4078d4632f748c65d95c8bdc4c22519ad35c0b065b14c1cfcf06a90000006b483045022100d336281a241dd330b1a5918b4a041889b553e289670f199ee713d782ab83ca9e02202597e950771c0d9cf0a39df7ccd1386433a8725b9378f6c985b013ed6e6d5416012103c91f93e3af970a8343c3bcb05826c57cd6e092af08661e0695cf603bb1179441ffffffff13a5e2fff34236f319f3a426e55f260d6887086d2f388597c14d316eac1df2219e0000006a47304402203be9cb2348f65ed835d4d8071903ca51ebcc6f45d911f3deeda391317a9114fb02201c6a6c27ec812f8a0de6e8bdfc1238ed73da8771db9c24329f30475133161e51012103c91f93e3af970a8343c3bcb05826c57cd6e092af08661e0695cf603bb1179441ffffffff6dcbe8982824d523b5b892e7ec11c466dfd08da1f8db8964719d8dcdb4e3c1ce960000006a473044022074ba99fe2576bf143ac635a2d067c7f34817874d4e3cceeada345f0ac3767f97022030835a9a9327ef9a723da53892968af1839038fedb9c8eac3df0dcd0a690c594012103c91f93e3af970a8343c3bcb05826c57cd6e092af08661e0695cf603bb1179441ffffffff658a7ee92072d40f8f10b62aad3495a307c321b920ec987a419d5b1d13c19c3da40000006b483045022100f4b944bedb95bdf9183dfdbd1a3cc1abe3240341e422e689bd0c89ea01c3260a02203026a6cd94b3ac108a4937012e67e10d82b961a3cf0b5889afaf8ed9471fe405012103c91f93e3af970a8343c3bcb05826c57cd6e092af08661e0695cf603bb1179441ffffffff7fd7793d1f05427a2a31805b8028060c9c1cf4caf3be701f1e5532705cd4a92caa0000006a473044022044c2343d048eaa8f9dbf3d8bc1bfd280391792e2bf5b2afa302f9f6a4aab3ad6022014ab1bb0ac7df2e16ca212bbb38d8f8093c63823cdbb84aed3a73f71043acb73012103c91f93e3af970a8343c3bcb05826c57cd6e092af08661e0695cf603bb1179441ffffffff0858aeee9033fe471f76d54278c61abd0d77fb596f80c9c2d0a487318355dee5aa0000006a47304402207e2988fad2932002ef551ba8662c3a48350f24fbde98bd47d7335d5c4c653bf902203dea4e9f30ef7267b9a22984fa1914ea8148811db897e0ba0a5ca261d0923076012103c91f93e3af970a8343c3bcb05826c57cd6e092af08661e0695cf603bb1179441ffffffff6c113cdb2981597164b26c9cbc8a0a16d3e6cc804bf5a6cf2cf99e6649fae936800000006a47304402200e82aa729f29b34d428b11c84ca46b32d1f5c3e2b36d6627a324adb27820718802200893e7215d925f4b3d576378e824e65cdd6420f780ff1b73464d151fdecf4f56012103c91f93e3af970a8343c3bcb05826c57cd6e092af08661e0695cf603bb1179441ffffffffb0e652ea04e43a57c93cd3ec42508b1b9c433b03e62158778cee861f81069b60b30000006a473044022036d137feeaba6d16da17a3d30cab0738d7b2342eeddcd538d65f6bcdd2b80cd0022015cb995c09ddf113b64fb2597fcb585eb235bb52ade9749c06a180244be08502012103c91f93e3af970a8343c3bcb05826c57cd6e092af08661e0695cf603bb1179441ffffffff2f05bc54a7e65587123832d72550b634c46c7a92bdffa79af3fe80698ad13edd9e0000006a47304402204684fff5f3e48e72669784a92887bfb450092a258d814ce3838140164281e65b022051be838ae002500f1694d7f43062ceef3cf9030da1c902d7b37698b6e4a9a2bf012103c91f93e3af970a8343c3bcb05826c57cd6e092af08661e0695cf603bb1179441ffffffff25e306063315306ae1352d88dbc12d4e4f53fd0b550171dd696fb1c98880a445b10000006b483045022100a710d66faee0aeb6ec1b1ddabb12353c3f70914390d3dbb933a862b695c9ea6d0220711334c94d4b28c9d053f8b4b23bcdb54dfbcc84f5bbdcdcd0adc8113f146c2b012103c91f93e3af970a8343c3bcb05826c57cd6e092af08661e0695cf603bb1179441ffffffffc119228c08f1298ad27198c846421b89aac57e60b003088eb74104c029705110980000006b483045022100fd4f0837afd1aee16174b083639939768f42e311c491c3c68f7640f655ba118502206a7b84bf91de8a37958344ccd50932afe258ab6ca1327bb7757aaaa8a15b5756012103c91f93e3af970a8343c3bcb05826c57cd6e092af08661e0695cf603bb1179441ffffffff67195acb2f2a24bf8ef5e38150504a1a87644b95902b33ed48c8727713beac04ba0000006b483045022100bbc84ba528d74b6014d1634bb2b418d1ba464dfc13fdaad491784ae6673d9a9c02205c27616b728e3692ab156c3a886d1686fd2566b09db76e7dfcecc18cef4fab7d012103c91f93e3af970a8343c3bcb05826c57cd6e092af08661e0695cf603bb1179441ffffffff5c51ff192ec5be9701430c1ed7c568cd3b0026e9f507e6f75ae9d4dcb75c6cabb40000006a4730440220695976660d686250e007f2a670befed65313f50b0284b1f678c31c03be181b7502203f2dffa8889bd035144b2a027aec8745b0286f3c678f79e4d6d265ecd976e66f012103c91f93e3af970a8343c3bcb05826c57cd6e092af08661e0695cf603bb1179441ffffffffc966caa0e58a4403ad43ce85ce79b97cc2a7ee84b2fb7864ee4614bcdaf8d50ea50000006a473044022049d37d327d7fa6c459fd51ee98c0fe606ec85d6cfc8425fd88643fea7ad7cf6e02202c4be6617b14cb38ea6371d93ed8b5b51d4aede4fc17e55beb82970cce3f4e5b012103c91f93e3af970a8343c3bcb05826c57cd6e092af08661e0695cf603bb1179441ffffffff87437fcf10efef14d3c946fea62f1cf7c9232df549e14ac8b81d95fca55c8931a80000006b483045022100f1a90137ce83debfa2de6d9d98c16dd5dea17d6ac4e41ceff3d54b5725c209f602200a6d1a45ae9836657aa12680a7d63a143d98467d3d07ed05d559a67fa1e022e8012103c91f93e3af970a8343c3bcb05826c57cd6e092af08661e0695cf603bb1179441ffffffff5f4c5bf124ffa6e4d521db95fc289511cb98f14379b4c2bc056b673c6fb25804a20000006b483045022100c66ad370517204faf74c048e84ddced276fbcd203883f469777692fe1ade450e02201bc91eddc38a8688a9979d8f60933dc81aaaae2cba66c877e391b82fd9e645eb012103c91f93e3af970a8343c3bcb05826c57cd6e092af08661e0695cf603bb1179441ffffffff80497f128ba33b5feb9d5573e065443c7c042e319f31406d7384d0dcaa4db2baa90000006b4830450221008f468ae67e220331733d14bc6027780b13d0016ae748f59033b4b0273d904bc902201705f3cebab02e1fe6cf57e94981c59fef38226ea940a34768f20a4ddefdc5c0012103c91f93e3af970a8343c3bcb05826c57cd6e092af08661e0695cf603bb1179441ffffffffe79cea6e8b0b437bfb8cef2bc46f51dfe0a6ab09201120d64ceb01a2a21e76729d0000006a473044022072d9b9a8e76c3ffa072cd8f1d4e421a0fe3a1ba5526b3208b99c30e10dcaf8e602204d238759fc01c11b056b0aaeaefdbabb89fe3a4442235e99edf75f7a5b1bab06012103c91f93e3af970a8343c3bcb05826c57cd6e092af08661e0695cf603bb1179441ffffffff3051cbaf0e5aac43c8c2b3dcd0ba90278a5e4c78bcda66e3c4a0b1e3b136080df10000006a47304402205572a516a6ac9e7f9eea5b53512742052bdfbd5ee222cffc5ef7cb609f8a4ccd02205a13916ba5248760e0b81669e90d0a1ad2e76be71031ad11f5f3357860747b44012103c91f93e3af970a8343c3bcb05826c57cd6e092af08661e0695cf603bb1179441ffffffff517f649bb4752193d2090704732efad98fab76f0c7d87d36b3f026934a40b333c50000006a4730440220695f5fa2385e123bb8d6191bec941ce0c853e66c8cd127d5f307cdfb673e09150220377812b9430cb90fd0b1a28d202091f8131acb6f4bcb1072f6103e344ae25fda012103c91f93e3af970a8343c3bcb05826c57cd6e092af08661e0695cf603bb1179441ffffffffb680d4c633c3bc314f7f8e8db328c68d490cd778607bcea41467fa85d30680e1da0000006b4830450221008b3005c2ff4f032d4b9a9e708c24c8517182fa00df8f9d54473e54e73de04ac3022029c6f5e7457a8f64c0be8713e6e19e8093be3b4919a1204ea76346e3b1797b1e012103c91f93e3af970a8343c3bcb05826c57cd6e092af08661e0695cf603bb1179441ffffffff000000000095650600000000000000000000000102c7de090000000000000000000000003e55eebe5c60dd6aafb9fef2fdca323e67226e64cefdf9f514ad714cdae9f6d436fac2079827f5cbf6402d5a7815f7a3e36df5bbfd5191569bb3dbd9408d82273b44387b7346dae88ed11df219fccc32ed40489e710983b0ca4b775243c3a3bc151a894936509445cb74e8e172549c2635b7e9c243bc77c9b0e49668583e5fd10586087b51ddf633f582a9a6ce04a7f11683eac0ece1e5a8f3a842a3decc442dbe6fe6828630ea644fdd82dc94f65e3b0da5b1f64d96c43837b7745a7b7beb12787276a39932a88e00b94fb95651af41b307b26328d43fb19aab97480e713a8493a8b337e3000b1480eab3fbfb311d90c8ce439fb8288fc112bbe70fcaaeb79e2866bbecd61ed5c744d53d644b5d7805889736280cccdd1535446a4f07f8d4d0a234b504aac13cbfa6c2159cda97df03278caca9b44b482f88dbced1ed8ca0ba14043a8456e438aaadcd0b872047afb580772d182fa5231dbd7f8ac15cbd16147a70b327054491cd7c1d10af3d8a065813e64bd6fdb2ebcd075e0a798863e5c116bc219fdb29e05685f314f106beb8a5e814cae90a61c561a8fcd7a9eaa002a8c46b2db9fbfbe7b83b59de6056614e658304f109f018cb14a18b589e571fecbc21746e79d1a037c502bc6dd9f3a0f35b70f07d91bb4789eac84dfaaa6bf9f64faea09043c1a39b26e313c94d8d0f2f259ce671680d32d3cdd4678eec8f8917e5d52ef9055f54f5ac34a55be0dbbdd5408335ee2cf5306b5996f0f94433921e941dc1af0798b7636b8a743d104b10fe330f0c3bb5218182163f1439830b25643bb3d2f309ca5e6456577c5ced96922d9bd7f1652f20c3d572bb2bb24298970620d7bffc0ce437ca6521c51cd2cb7f917b6a638ce8dbbd367f7cc1ddbcaafd26773ae451c9568ce4a8625c708f4e15994228ef467f046289503e582a934f21b3a07b230aca5d7b1dac1b797e1a7d33cb740377290af429f40ad520d6da6f1253edb274b61b73be5531be45a49eb21fe664272df7faa95c0d2bdc3bc45af4f9131513df5d6d7c0afaac692e2e5105c79dfe5baf44883e86a5e31b8c9ed87e456b459dbc60626a8ae48c0014861afce9f2285288f7b09c09e960eab1fa25a91d1bc0f3cc6c65a0c3b08a0daf04e89a8e93eb5f305dcce14d15edab034268af31008bc36c262baf0dd25583a36a57284c4d3822c41fd9656456e192a4b5a590336e4f8d0ed5180858eac5548c4e74663fb57dbc00ebb56ae8a2f89fcee28202d84072ad85bf6512cb120850c6707141537b3a2f5cff6d9a988c953e2b67ec8f9d8b905e4313a237d7e35c06497eecb1ff9c671888c7938b5294a123c7584d846bfad2052c549fd5c56a26a09c537a06ac5136f34130ae553f44ee046b46d45aed6eb0f16232a8a9659cfba6802c527c602b1a8a28ae475449e3fc35a9a12a12afc110608084980e32a3bb874e30bcb166620132b7a1972f59c7495e4a3e1ef9b698ee9c2edcd899f0a24ca5eca756fa2768c6d58e835a85e0cefb6a9da7ba6f88c017be726fc6dffe423c8f9debb2aeed0955a68ff9164ddc9483a4a7910c3e329877e8a4ad6726890a34aa6677198dae3c018cfbb23f7869a6e90adcff2acc15811a1444409d11e3fb9913bb2294781224cc634488a9d93ad38e47320024b962884715c4ce1a378f13450e8997fd85c162c7d808b1f04da5ebb2eeb9d084184dda74c636fe477497d9d25c5e69ba30bc108000ffdaa4b806eb3b5f54edada3abecfc1ee3aa43273a539a0002f451e05f520b85a28f2c2813dff61f42b614246043a57da250a6ed04d471c99f87896c4183dbb2c7c35ce13e812cd81f3e16ebc2a7101f7652f5644338b97a1d03f2119217b113ad8fc6a957e97209cc75376eb8f70204b092cab833d78f5fe7e1038b398ebe2f248f378ba92adc8e0bf3e3caecaf4ed2110273c76e1f6cb04843c395ea1a1d25f7ea2c5336cdbeb29b4f5138b4089c018f3a951d5d5c3e584d59dad3dcc018c42f4886e7fee14d3c3c30f831933a0b40b3f57b958cf926bdfac99d876b63a5b44493debf00c3edfa56b275b341997f081ebd56b4944e6c1cb057ef1994b2c2d47ea88af0d959d33d7de1dd8367cabf250fe4640a7ff4523861a6fe1c0ebddb4f56f132d53f39db82f3a427e67836d65fceddeae1f8442428aedabf28a56d035e5415aab1b890f812\n```\n\n----------------------------------------\n\nTITLE: Starting Mining Pool and Miner for Forked Zcash Testnet in Shell\nDESCRIPTION: Shell commands to start the s-nomp mining pool, which coordinates mining work, and the nheqminer Equihash miner, which mines blocks by connecting to the pool. The miner command specifies the pool’s local IP and port, miner’s payout address, and number of threads to use. These steps integrate mining into the forked network.\nSOURCE: https://github.com/zcashfoundation/zebra/blob/main/book/src/user/fork-zebra-testnet.md#_snippet_4\n\nLANGUAGE: Shell\nCODE:\n```\nnpm start\n\nnheqminer -l 127.0.0.1:1234 -u tmRGc4CD1UyUdbSJmTUzcB6oDqk4qUaHnnh.worker1 -t 1\n```\n\n----------------------------------------\n\nTITLE: Data structure `AdjustedDifficulty` for difficulty adjustment context\nDESCRIPTION: Represents the context necessary to compute the adjusted difficulty for a candidate block, including relevant past difficulties and times, candidate's height and network. Provides initializers (`new_from_block`, `new_from_header`) for setting up this context, useful for validating block headers and blocks.\nSOURCE: https://github.com/zcashfoundation/zebra/blob/main/book/src/dev/rfcs/0006-contextual-difficulty.md#_snippet_1\n\nLANGUAGE: Rust\nCODE:\n```\nstruct AdjustedDifficulty {\n    candidate_time: DateTime<Utc>,\n    candidate_height: block::Height,\n    network: Network,\n    relevant_difficulty_thresholds: [CompactDifficulty; POW_AVERAGING_WINDOW + POW_MEDIAN_BLOCK_SPAN],\n    relevant_times: [DateTime<Utc>; POW_AVERAGING_WINDOW + POW_MEDIAN_BLOCK_SPAN],\n}\n\n/// Initializes `AdjustedDifficulty` from a full `Block`, containing headers and data.\npub fn new_from_block<C>(candidate_block: &Block,\n                         network: Network,\n                         context: C)\n                         -> AdjustedDifficulty\n    where\n        C: IntoIterator<Item = (CompactDifficulty, DateTime<Utc>)>,\n{ ... }\n\n/// Initializes `AdjustedDifficulty` from a block header, for header-only validation scenarios.\npub fn new_from_header<C>(candidate_header: &block::Header,\n                          previous_block_height: block::Height,\n                          network: Network,\n                          context: C)\n                          -> AdjustedDifficulty\n    where\n        C: IntoIterator<Item = (CompactDifficulty, DateTime<Utc>)>,\n{ ... }\n```\n\n----------------------------------------\n\nTITLE: Defining Zcash Funding Stream Receivers and Associated Protocol Constants in Rust\nDESCRIPTION: This Rust snippet defines an enumeration for funding stream receiver categories (BootstrapProject, ZcashFoundation, MajorGrants) as per the Zcash protocol specification §7.9.1, alongside associated constants: an array of category–numerator tuples (for computing distribution ratios), a global denominator constant, and height ranges for funding stream applicability based on network. It demonstrates how protocol parameters for block subsidy distribution are modeled for use in subsequent calculation and verification logic. Dependencies include the 'Network' and 'Height' types, as well as the standard Rust core 'Range' type. Inputs are hardcoded per the Zcash ZIPs; outputs are constants and an enum for use in consensus logic elsewhere in the implementation. No user input or external data is required, but integration with other consensus code and protocol upgrade handling is necessary.\nSOURCE: https://github.com/zcashfoundation/zebra/blob/main/book/src/dev/rfcs/drafts/xxxx-block-subsidy.md#_snippet_0\n\nLANGUAGE: Rust\nCODE:\n```\n/// The funding stream receiver categories\npub enum FundingStreamReceiver {\n    BootstrapProject, // TODO: it might be clearer to call this ECC, no-one uses the legal name\n    ZcashFoundation,\n    MajorGrants,\n}\n\n/// The numerator for each funding stream receiving category \n/// as described in [protocol specification §7.9.1][7.9.1].\n/// \n/// [7.9.1]: https://zips.z.cash/protocol/protocol.pdf#zip214fundingstreams\nconst FUNDING_STREAM_RECEIVER_NUMERATORS: &[(FundingStreamReceiver, u64)] = &[\n    (FundingStreamReceiver::BootstrapProject, 7),\n    (FundingStreamReceiver::ZcashFoundation, 5),\n    (FundingStreamReceiver::MajorGrants, 8),\n];\n\n/// Denominator as described in [protocol specification §7.9.1][7.9.1].\n/// \n/// [7.9.1]: https://zips.z.cash/protocol/protocol.pdf#zip214fundingstreams\npub const FUNDING_STREAM_RECEIVER_DENOMINATOR: u64 = 100;\n\n\n/// Start and end Heights for funding streams \n/// as described in [protocol specification §7.9.1][7.9.1].\n/// \n/// [7.9.1]: https://zips.z.cash/protocol/protocol.pdf#zip214fundingstreams\nconst FUNDING_STREAM_HEIGHT_RANGES: &[(Network, Range<_>)] = &[\n    (Network::Mainnet, Height(1_046_400)..Height(2_726_400)),\n    (Network::Testnet, Height(1_028_500)..Height(2_796_000)),\n];\n```\n\n----------------------------------------\n\nTITLE: Installing Zebra with Cargo from GitHub Tag (Rust)\nDESCRIPTION: This command installs Zebra directly from a specific GitHub repository tag using Cargo's `--git` and `--tag` options. It simplifies installation without manual source compilation, suitable for users wanting an initial setup or testing the latest code from a specific release.\nSOURCE: https://github.com/zcashfoundation/zebra/blob/main/book/src/user/install.md#_snippet_5\n\nLANGUAGE: console\nCODE:\n```\ncargo install --git https://github.com/ZcashFoundation/zebra --tag v2.2.0 zebrad\n```\n\n----------------------------------------\n\nTITLE: Run Zebra\nDESCRIPTION: This command executes the Zebra binary, initiating the synchronization with the Zcash testnet. It assumes that the configuration file is in the default path.  This triggers Zebra to start syncing and indexing blockchain data to Elasticsearch.\nSOURCE: https://github.com/zcashfoundation/zebra/blob/main/book/src/user/elasticsearch.md#_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\nzebrad\n```\n\n----------------------------------------\n\nTITLE: Storing Proptest Failure Seeds\nDESCRIPTION: A collection of seeds representing previously failed test cases identified by the `proptest` framework. Each line starting with `cc` provides a seed hash followed by a comment indicating the specific shrunk parameters (like network, block height, or block lists) that caused the test failure. This configuration ensures these specific edge cases are consistently re-verified during testing.\nSOURCE: https://github.com/zcashfoundation/zebra/blob/main/zebra-state/proptest-regressions/service/tests.txt#_snippet_0\n\nLANGUAGE: Configuration\nCODE:\n```\ncc 37aea4b0880d7d9029ea4fad0136bd8553f81eea0435122737ec513f4f6fb73c # shrinks to (network, nu_activation_height, chain) = (Mainnet, Height(1046400), alloc::vec::Vec<alloc::sync::Arc<zebra_chain::block::Block>><alloc::sync::Arc<zebra_chain::block::Block>>, len=101)\ncc 1a833b934966164ec7170c4bbdd7c48723ac0c873203af5f7880539ff1c095bf # shrinks to (network, finalized_blocks, non_finalized_blocks) = (Mainnet, alloc::vec::Vec<zebra_state::request::FinalizedBlock><zebra_state::request::FinalizedBlock>, len=2, alloc::vec::Vec<zebra_state::request::PreparedBlock><zebra_state::request::PreparedBlock>, len=9)\ncc 5fe3b32843194422a1ed411c7187c013d0cfd5c5f4a238643df1d5a7decd12c0 # shrinks to (network, finalized_blocks, non_finalized_blocks) = (Mainnet, alloc::vec::Vec<zebra_state::request::FinalizedBlock><zebra_state::request::FinalizedBlock>, len=2, alloc::vec::Vec<zebra_state::request::PreparedBlock><zebra_state::request::PreparedBlock>, len=9)\n```\n\n----------------------------------------\n\nTITLE: Calculation of mean target difficulty from recent blocks\nDESCRIPTION: Computes the arithmetic mean of the difficulty thresholds from the recent 'PoWAveragingWindow' (17) blocks. This value is used to determine the network's target difficulty for the next block, aligning difficulty adjustments with network conditions.\nSOURCE: https://github.com/zcashfoundation/zebra/blob/main/book/src/dev/rfcs/0006-contextual-difficulty.md#_snippet_3\n\nLANGUAGE: Rust\nCODE:\n```\nimpl AdjustedDifficulty {\n    /// Calculate the arithmetic mean of the averaging window thresholds...\n    fn mean_target_difficulty(&self) -> ExpandedDifficulty { ... }\n}\n```\n\n----------------------------------------\n\nTITLE: Initiating Block Processing in Zcash\nDESCRIPTION: The process of handling a new incoming block starts with the `ProcessNewBlock` function. This top-level function orchestrates the initial non-contextual checks, marking the block as received, performing contextual validation, and finally activating the block if it's valid and part of the best chain.\nSOURCE: https://github.com/zcashfoundation/zebra/blob/main/book/src/dev/rfcs/drafts/data-flow-2020-07-22.md#_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\nProcessNewBlock(block, fForceProcessing);\n// Located at main.cpp:4258\n```\n\n----------------------------------------\n\nTITLE: Parsing Raw Zcash Block Data in Hexadecimal Format\nDESCRIPTION: Raw hexadecimal representation of multiple Zcash blocks containing transaction data, block headers, and various blockchain elements. This data includes version information, previous block hashes, merkle roots, timestamps, nonces, and transaction details.\nSOURCE: https://github.com/zcashfoundation/zebra/blob/main/zebra-test/src/vectors/block-main-0-949-496.txt#_snippet_0\n\nLANGUAGE: hex\nCODE:\n```\n04000000ddb4e9970a6d8e05d2ccc6883a1f26488ee9a2d4344b626eca75020100000000680b9265b33bb6a6ef07a2ee71a85e064a92e2951ae4fbe07434c4889e4f5297058a6b9e510b12d80a9a20a6d83d44c93ca0b4909b3b0197e7540b50544a5d4428aa455f2159021cda28d23d74000000000000000000000000002b0000000000000000000003d656fd400501a34f33094ee01f5ecd8372687525f8dda12cf01f112f13f48ecbac33b599e17d265d073067a2e4a6020c76c7ef379fa2419248919fc66d6d9126120db51719a64dc4ab07a6393625724209d0c97d5da38c97df1af2a1343907dac71d0a83741eeebd363b4d56d3f84b4243236e18e64dbd1685d760ca489e70451ffe2e25f8dfc3b86b1381786ca70039441836e0785790824030f2d3102f60dd9cfef78e0cf25c0f6fbabd2ef00291d43fd298d497228af0f993a45804af6bd53e5f24090da9bbe058b920aa3677cf6dac725bcddfd9bb091624bc43e86df545d0aa3162f6061aaba99f4c2442aecd562cd4618bc3983a852af1b60714f13ea928034ec3673dc6af88ac8f2275a23d79593e86365fa80a10f44b5b4d805b2a6082a733e9c02539a8ee03af04a950cc8aab122994d0f0b25007e32c3d3bee0d61107a6f609dd1afba974a84faa4bcc10658869af7a403431bb97e5fc1512fd8d03eb5e2e12e111c5cd942417a7770b49176939c0e96538f4ecc466da8ffbf900cce64e336f60777c708f6a6c058be81ec5e5f65091f6fd6067cf34867b94ab3ca377b94d12afaaf3a7b05a9f4f09e8c6c3bd8aec1a0b4607a7a49379cd8ca32f1870a1e4f50d6da070462fdd9d4b128ef1c257c0f8d2dee456eefa7ba8087e3104dba0b74eb1dfd9e3eca76ef0258276ff2101404b3abaadd9f9b14d4970691ff2bc1d799e3289551c34cedebaf0d207f48683f1286f51fd26878989055a5d2715675bc2caf9da415a611a45685b1ed7981a51d2243b8468275f7e96e322b656d95d8d77db2d248b365d40c26c1467731170d98ffb7e690a4bbad47f4be65e85e594a194ab5c969e734023be200071572577ba6e1362dfcf09814df1df3865aa5de90e30c699404de49115f066d5f9619297e07b1bbccb8fc85d0f2bbe14d11695a86155f9501e9a0b93394c9bff5e5318e620efc98f2623e0e1d058acf6034653a49f15271e495a0b9b92d96bc59d818ad8b4bd55ff5eb54e5c2714c73a0c28f7256db2627ddb2a61090a43dc28a47bef7f5a14abcef7a3c10284281d22b6ef835c7c714954b6cb53e516cde79a442bb3b92aa9b1913419018b305cd97271e645e419a3b648391561d2fb5a8e943e02467017d03d37002793dc75c902365cae766ff2553e755e9a970d26f76950231ddafcb0bc8b10314f0798227eff08fc2d3a0dc0956e590bb9273abedf820ff159b28a132a23167383f1b73d2479a5011e2a6b68bda4accba3bfef6588f501314db9b9e60b9f266c6b3d67a38cad3a419e5000590c68b570311b361d3226840cb783f45097e97625eed4ec69f998702fb5788f1c7cd025ee59878d5be1167e90b7f476a2a808c22bbe71e1568e6bf6e308a17df2d443fb4877dd0c6460ccf6cf5ce44a4ff79b1036e6e40fd3a8ab5eda3035f01e31138decab69e8606f00b767543394f762602086768f4c50d8a1570c9093ce41eb6ac9c03c9d871f8d31a52a9c0309e81a43fee85ff552cb843b227174156d001fe110097fed30cbdf214aa43eb5dab7c95d904e8c28ab0953d72d525825572cd102f8fc03894436f711a12186efe0ace17796bec9a9155b5de3d56f280fcfb21da2d9fcc1c180556390e8af4fb0059a84be7de1c32c2dbd67e150b69ef44c8afbe5d816f72e3895aeb01489f4dc73b0d534337bd0c5565eb06b7aaf5f4b226617d9a253a186d77c60831c075b373e29ab89a5ecb0a6f5e251922ae718c20eff1cfbb63b3489e639b05d51bdf84740d335d92bc378771d12fc2d63677cf28f986fcea93293f4dabf3e0ce05bcd73737cbfe03aa8f3e17ac001509d3d2e30db7e3f55767263cc56a86701cf97c199307d686efad962570fffaae5a7dc79ac74a5b20fc040400008085202f89010000000000000000000000000000000000000000000000000000000000000000ffffffff0503f87c0e00ffffffff01405973070000000017a914358d5a7f5e2a687eeba360bb473f3c38890674f3870000000000000000b95132e2ffffffff0001f9e9a64065c43fbc60c602dc3b58cdecbbb49ad43a3dd9ae49b48a61c493545e0ba8ec2cb4071d2a8904aa768e5bd9d878be5cf6e172e7c85138731f36f14546dfd77cabcfeece274285111a796b2334fe7a924240327705bb9215c842866303599b366203fa9ca7232f34be1fdc1778b919350976f0b9cb05ed1653b284060cdba7d093da43e19c1e725b0e21de993f3ad8f84194c4e58b128109673fdf9c4d8220f32f22ee17a4616c128b41ff2cb47bcc603b5200d0fa77ce8df9356fa99864ba26f45c6d27f9c4c35cb143293348eb6d9f650be7dc23a78b9682d72cbc0ad42de4f6f81101eb8a8a3eaea1699f7d81c7cee82c76c33f7161a97f6327a8e4befe2cde0ddff7be8373c7609092ad360c0c756863ff4136e0a4d66d0ac511de63e8b9bfd8810a26733df9a34c0e4509b60d1ab3e428dc3a31760a1c316c26610893f92ce6e23c6796aacd4b0c49ab4b151dbec0fcd857a1d0a4d257a4e5f7d9034db2382a51e02df810379e7b9f82d92f34a5dcac5cd1f40f04c9c3923b7fb7d0eb3ae8c1ed6349b772ba79979c9c0a6fb6d88784c6244a50f88ee53974dffae55641021ddfa93a147dbe26c6e3769b5f16a5c3dee1e437aebd0b333640aa9f689a57628d84608461fd749b4f154776d54c0d79585ea34d2423ce3eb110e8c521fb77ec40f1c5ae6dbf6f463ed1cde946c6a8e528731104b895dc65dc0abe0485df3a2136a7c8ac76807f3e4dd4c968bf11d6de2e5d1d0ea40b5f2e8e3b35b5945e28c08ecb68b5146fe7dcd047692e7726a3b0e099925123e5952df5a8a6ba69429f38d7e89a7a95ae0f9525d09d7703963b9b4d2fd9a523bb46cb42779253c86cc1073cf9251ddd97386b871566dff7ec5804c7b8220277341150600ee99e5a04831bec0e1dcc1aca4189226e20292920589a1192e6e10962a27344b15625ff76da58d39536dfef75708aa4ab4a4bb1ceed6c87f297c6891e5ddc3c45379d6f991459b28bee977db2ea9cdf1e386648c339a118f0d891bb7fd5423074cceb2da4b1a248754fa2f304c8c77db4e01956e6742a9115cf83db3f2c5b0d86eb8e3784deb51e888f861249a05554f568f81d314654abf3a649526ac13f21de1a300d55f4699455b9829b81b3cc24a1ceb500a16c1b5912d5defef285604e4f489ba18ca3893525869e4102f0c5ca2855a39ba696ca14864896595e53ba498295f8cdb04235664b1268b19ec98f32f0cef611005aae828ad35c2415ffd6abca16b741a4971f926e839f329e71be02c98c5c2d99bf8f7b2b9718e8f07c6754f1b169057fc69618487ed0b419878d2e5ca5f7f6d94acc00e3ea15bc141b92caade6c8b19c1cf94e5de49f0b301c05a1930bf0d09a2bc1cd643fd01d9e081998ad38eb7ee8a8f5c9fda9254597ec507b4f08480669a380060400008085202f8901fa4fc5d47bb8b72d75a958621c4a84504bbe081ac80176c2b1e89457f9298f09010000006b48304502210089ce9f77b6eab970946fa1924b611393efb6f2b816ad5f94431c54703ac251db02207ec2fe8f67def1e8a3b57bfce71f6e7f09e71cdb9de3038ff8acff17aa45b85e012102169ef254a968648c37c5dcb9c21d2fdf20a562e2868029694740434080c1887affffffff0220920000000000001976a9146bdb1eeafb9123d1f9cc8866bbfc18918aa2266a88acf7e5801f000000001976a91462e92a2bb72dadef2d9f4175081fa6e3ad69e74488ac00000000207d0e0000000000000000000000000400008085202f8901456585068c62053ba45b79595ce9251c8669f3b89acfabeee90de34329e00056010000006b483045022100e310bf1c0f2f38eefafb0ca52aa779ab8a5f2c62400a437f5aa8ce76908e2007022016834e91f89a33e50b689fad50ccfccb25badd006c6d2f8884a7e59f5ded2ebb01210224c5d6e287b4f193fe48e874f0ce3ce7e0659c68effc6773502ee726b68a6a56ffffffff0292060c00000000001976a91477572fcc9f7438cb37052fc4cdfdf1d35e27502788ac29a30d02000000001976a9144554bb3b9c3653c588d9136cdcfe254260be742a88ac00000000207d0e0000000000000000000000000400008085202f89013a36d0f8dcb0bf014fb55620d4c662e98844120ca4febe64b59632aa925b2685010000006a473044022020461e25eaf01b87b5042752e3882d981386c5c59569e2b5f64769a2369a3c9f02205649e78045191a95be83d35bc888d6a0a6c035e4d73f640625b3e5fcdd95158701210224c5d6e287b4f193fe48e874f0ce3ce7e0659c68effc6773502ee726b68a6a56ffffffff02b63c0000000000001976a914d4c85652bd2adacb8e668da6d6b2f2501353e7b888accd450d02000000001976a9144554bb3b9c3653c588d9136cdcfe254260be742a88ac00000000207d0e000000000000000000000000\n```\n\n----------------------------------------\n\nTITLE: Changing Owners of Deleted or Placeholder Zebra Crates - Shell\nDESCRIPTION: This set of shell commands creates a 'placeholders' directory, generates new placeholder Rust crates, and iterates through them to update crate owners using cargo owner. The commands automate adding a new individual owner and removing a previous one for multiple crate names. Prerequisites include installed 'cargo' and valid login credentials. The snippet uses shell control structures (for loop, pushd/popd) to process batches efficiently.\nSOURCE: https://github.com/zcashfoundation/zebra/blob/main/book/src/dev/crate-owners.md#_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\n$ mkdir placeholders\n$ cd placeholders\n$ for crate in tower-batch-cpu zebra zebra-cli zebra-client; do cargo new $crate; pushd $crate; cargo owner --add oxarbitrage; cargo owner --remove dconnolly; popd; done\n     Created binary (application) `zebra-cli` package\n~/zebra-cli ~\n    Updating crates.io index\n       Owner user oxarbitrage has been invited to be an owner of crate zebra-cli\n    Updating crates.io index\n       Owner removing [\"dconnolly\"] from crate zebra-cli\n~\n     Created binary (application) `zebra-client` package\n~/zebra-client ~\n    Updating crates.io index\n       Owner user oxarbitrage has been invited to be an owner of crate zebra-client\n    Updating crates.io index\n       Owner removing [\"dconnolly\"] from crate zebra-client\n~\n...\n```\n\n----------------------------------------\n\nTITLE: Forking a Chain in Rust\nDESCRIPTION: The `fork` method creates a new chain fork at a specified block hash if it exists within the current chain, cloning the existing chain and popping tips until the fork point is reached. It provides a way to branch the chain at a specific point.\nSOURCE: https://github.com/zcashfoundation/zebra/blob/main/book/src/dev/rfcs/0005-state-updates.md#_snippet_5\n\nLANGUAGE: rust\nCODE:\n```\npub fn fork(&self, new_tip: block::Hash) -> Option<Self> {\n    // Clone self, then pop tips until reaching the new_tip hash\n    // Return the forked chain or None if new_tip not in chain\n}\n```\n\n----------------------------------------\n\nTITLE: Accepting Block Header (Contextual)\nDESCRIPTION: The `AcceptBlockHeader` function performs checks on the block header that require the context of the previous block in the chain. It re-validates the header using `CheckBlockHeader` and then runs `ContextualCheckBlockHeader` to check proof of work, timestamp rules (against previous block and soft fork rules), and enforces minimum block version.\nSOURCE: https://github.com/zcashfoundation/zebra/blob/main/book/src/dev/rfcs/drafts/data-flow-2020-07-22.md#_snippet_5\n\nLANGUAGE: C++\nCODE:\n```\nAcceptBlockHeader(block.GetBlockHeader(), state, chainparams, ppindex);\n// Located at https://github.com/zcash/zcash/blob/ab2b7c0969391d8a57d90d008665da02f3f618e7/src/main.cpp#L4130\n```\n\n----------------------------------------\n\nTITLE: Running Zebra with zebrad.toml\nDESCRIPTION: This command starts the Zebra node using the configuration file `zebrad.toml`. The user should replace  `zebrad.toml` with the correct config file if it has a different name. This command requires a valid configuration file set up as described previously.\nSOURCE: https://github.com/zcashfoundation/zebra/blob/main/book/src/user/mining-testnet-s-nomp.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nzebrad -c zebrad.toml\n```\n\n----------------------------------------\n\nTITLE: Raw Zcash Block Data in Hexadecimal Format\nDESCRIPTION: A complete hexadecimal representation of a serialized Zcash block. This contains the block header, transaction data, proofs, and other blockchain-specific information in raw binary format encoded as hex characters.\nSOURCE: https://github.com/zcashfoundation/zebra/blob/main/zebra-test/src/vectors/block-test-0-279-999.txt#_snippet_0\n\nLANGUAGE: hex\nCODE:\n```\n04000000a5d2197718a26614c4d078a5eef17e5c16208938e2631ebb3dbaf08148930d00a7cfb7c4a6654629893f2311f3f23bc2294fc5afcc90232aee7b9cad326154fcfbc2f4300c01f0b7820d00e3347c8da4ee614674376cbc45359daa54f9b5493eec3d825b860d121f39006ab4ac12bc9b5e1faa29740e9e0351ad75588dab47ecd0429877e5cf0000fd4005004687d1fd45bdf6b76a1293b9e00dc4dd13920773246abef8e9dadfc5d6807373e75e6ccae2937923060b7ad6694b970503ec4126275fe096ee0fc77bd321696cbd4b6c773983d90d48bbf875a45e38593a240d035abad7e58b39595923218669327cae4d3f98a47d45d17b45c5150d0d16f1456c8c34a9fe70e49faf600a6364abdd0a08d3b045285c9c750fca8c6935d1a8105608e0b4169613073702e4a5ec7bdce063f8588e01c4cd48760db113e0b082a9f97ff569f73f1ddcbe0989656400a1a783accca2794ebaf089e88333b1cb13784c315ab5bb7ffcdbd2c7ef6b92e97d5addb79420685a177bd89f9f29ef3388073d671fa0a09f384c09db3174dd5f29c6fcaed29efbfc6b32036d962d2c2083fe9abdd46e09afb2d4f60958857162d89808050ee986e2464498c03fa971fd8ea9d6a0f1107cfa0e2535a2f90295e6815371f2fd69d92f2f3b45ff725e009340ea0eac8be5c846658ef2dc5fbed1c5fc71d71355bfe82c98da86cc36e1d82bc6a57afa3c19044e361f5aad1258ab27178684703950716704e0dd0a7e42964ad136519b1d6224257c77c54e469e48f58fd6084ec2903bda3a69fdba30fe4ecfafce7f4d39a92674682bb5c566cec57d00f76e78da5e3a36df5ceb3427f2325d071ae5e1d2f9b3ed9a5f7efaebbb17cd253feebbb0a46dfa47cb2665d92dbba1c5a053f2474701f2d9d52725bd179bd7b2e2eb7e58827ccf99f5d611207245bf10f4ffafdb425f6b1f1a0613fe9d1f5e1a08eb8f2663a9cbb8b8d290bfad04f90820ff087c25102cf0e4192cb4dd91549b5be85d8ebe56f869da12421aa5ba1dc4e7cb5ef1c10e3c8c4131ca50b97a21ce7f5fdc18236cf817b9f0f7d32c233e5f3eb9cc1681d3ca35178bcaf659b67db2e8c4a1fdeffb0f61330135c3374dae74b0cbc44398432c239eea9e0dae009169ce6065a92bb8db12e6f5da6a5970570dd9de38f82c339ca766df3c83d3be343c97cd7603b81bef2c5d9b5a7576dc1dc376a528a2de68520eac199daa3a723b7e1c2d0bdfe3acf71b2168eec610c5f1eea4038eaeb013e203bd82aab03bb6dd10e20d05bb72841c55b966a3471b124b4a55948f74b0b1b2a3342b7208f49639a2e01ae7f4f13175be4207ae158f9318b70a1641b103aa37a9cf25a1c1ff55dd01529fbb3d90032c2cde970ed1b0a7ddb13e9f2a803c5fa96bcff916b62a974623ed9f378aa1ca2b59dc4e251c9e47ec1679cf89a5a642258dbe457231b674755d1f78385a403e46569a33aa37fee8ec00fd6394df32a57febff03d945497f942da762b700721296c2357f257e8d0d1949e32506d7694ecdf8b1f0a4646a5d33d49c047f1a8a7f35a5e1094bdab105748839b6dec1d15eb4e5517886f7b2d571e12d68e5f62d3ec27ef3ab37fc2001b51d235e86834301e338b03e6ba10654617d55f8161f81e6c08ad5987db92201dcb3d9a0f8dc7933ac1d398b20634cfa3f90c6168532f2ccd5da169c90ef484e9ae70ee534ddf1d8c5c7a5657c6a5583df40050d49997009cb511571c0656a405b739e0967f085e322b5f5f63ce7156b5747b3f17d2092c1622b3282a21e55527076add6ab7afb16d56ff720d658be56e3c92b90c22d3a1197de9df4233714ed91163e6552559e03521f8f186878216668a29cd7b52f30bd14fe21fa0fde8210fc5f526cfe25921af4f59cd9440b38ea6c1c9b5677b8c9c201e5d4f618a2bfc379930f704fdb5916f68ce0e39b7dae67982f455cb6c67c32190fc6066dfb416717b375ef21727f72cad5e5e66934e65c3f4ca66c1eb6ec51ddb854a5f34f1c25962539f349208a2588bf51ae7ca79ad3cda1f590baad42fa55752233ffb9e610cd6dcaac6438be7a9259dd24dcccaf01030000807082c403010000000000000000000000000000000000000000000000000000000000000000ffffffff0603bf45040110ffffffff0200ca9a3b000000001976a91409cb4ad7f90bc85d3ea1ac5c890a348a15822cae88ac80b2e60e0000000017a9142a71f51b268f74eb3ee5631090589bbf6239bc0c87000000000000000000\n```\n\n----------------------------------------\n\nTITLE: Default Construction for Chain in Rust\nDESCRIPTION: The `Default` trait implementation for `Chain` initializes an empty chain with zero work and empty data structures, setting the chain to its initial state ready to be built upon the tip of the finalized chain.\nSOURCE: https://github.com/zcashfoundation/zebra/blob/main/book/src/dev/rfcs/0005-state-updates.md#_snippet_8\n\nLANGUAGE: rust\nCODE:\n```\nimpl Default for Chain {\n    fn default() -> Self {\n        // Initialize empty chain with zero work and empty tracking structures\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Performing Contextual Block Checks\nDESCRIPTION: The `ContextualCheckBlock` function performs checks on the block's content (specifically transactions) that depend on the blockchain state or the context provided by the previous block. It iterates through the block's transactions, calling `ContextualCheckTransaction` for each, and also enforces block-level rules like BIP 34 and Founder's Reward distribution based on block height.\nSOURCE: https://github.com/zcashfoundation/zebra/blob/main/book/src/dev/rfcs/drafts/data-flow-2020-07-22.md#_snippet_7\n\nLANGUAGE: C++\nCODE:\n```\nContextualCheckBlock(block, state, chainparams, pindexPrev);\n// Located at https://github.com/zcash/zcash/blob/ab2b7c0969391d8a57d90d008665da02f3f618e7/src/main.cpp#L4065\n```\n\n----------------------------------------\n\nTITLE: Proptest Seed for Network Peer Selection Failure Case 2 - Rust\nDESCRIPTION: This snippet provides another specific input seed that caused a failure in a property test for network peer selection. Similar to the first case, it includes a unique hash and the specific data structure (`peers` as a list of `MetaAddr`, `initial_candidates`, and `extra_candidates`) that caused the test to fail. This seed is used by the proptest runner to ensure the issue remains fixed.\nSOURCE: https://github.com/zcashfoundation/zebra/blob/main/zebra-network/proptest-regressions/peer_set/candidate_set/tests/prop.txt#_snippet_1\n\nLANGUAGE: Rust\nCODE:\n```\ncc 788fe2c47a4af559e9a921764d1ce8fcfd0743361c19e6e7a06adc093bc19078 # shrinks to peers = [MetaAddr { addr: [::e9:8050:dbf7:5665]:27188, services: NODE_NETWORK, last_seen: DateTime32 { timestamp: 1623573029, calendar: 2021-06-13T08:30:29Z }, last_connection_state: NeverAttemptedAlternate }, MetaAddr { addr: 106.27.232.177:51742, services: NODE_NETWORK, last_seen: DateTime32 { timestamp: 1623573029, calendar: 2021-06-13T08:30:29Z }, last_connection_state: NeverAttemptedAlternate }, MetaAddr { addr: 127.0.0.1:30827, services: NODE_NETWORK, last_seen: DateTime32 { timestamp: 1623573029, calendar: 2021-06-13T08:30:29Z }, last_connection_state: NeverAttemptedAlternate }, MetaAddr { addr: 0.0.0.0:21948, services: NODE_NETWORK, last_seen: DateTime32 { timestamp: 1623573029, calendar: 2021-06-13T08:30:29Z }, last_connection_state: NeverAttemptedAlternate }, MetaAddr { addr: 0.0.0.0:38186, services: NODE_NETWORK, last_seen: DateTime32 { timestamp: 1623573029, calendar: 2021-06-13T08:30:29Z }, last_connection_state: NeverAttemptedAlternate }, MetaAddr { addr: [4db2:96e6:38c5:fd62:e964:9338:4ce8:bfa0]:32686, services: NODE_NETWORK, last_seen: DateTime32 { timestamp: 1623573029, calendar: 2021-06-13T08:30:29Z }, last_connection_state: NeverAttemptedAlternate }, MetaAddr { addr: 0.0.0.0:22952, services: NODE_NETWORK, last_seen: DateTime32 { timestamp: 1623573029, calendar: 2021-06-13T08:30:29Z }, last_connection_state: NeverAttemptedAlternate }, MetaAddr { addr: 114.164.73.233:10203, services: NODE_NETWORK, last_seen: DateTime32 { timestamp: 1623573029, calendar: 2021-06-13T08:30:29Z }, last_connection_state: NeverAttemptedAlternate }], initial_candidates = 3, extra_candidates = 3\n```\n\n----------------------------------------\n\nTITLE: Validating Transactions (Contextual)\nDESCRIPTION: The `ContextualCheckTransaction` function performs transaction validation requiring blockchain context, particularly focusing on Sapling+ transactions (v4+). It checks transaction expiry, enforces rules specific to coinbase transactions (like no output descriptions), validates shielded spends and outputs including note commitments for coinbase transactions (ZIP 213), checks joinsplit signatures, and verifies final balances.\nSOURCE: https://github.com/zcashfoundation/zebra/blob/main/book/src/dev/rfcs/drafts/data-flow-2020-07-22.md#_snippet_8\n\nLANGUAGE: C++\nCODE:\n```\n// Called by ContextualCheckBlock for each transaction\nContextualCheckTransaction(tx, state, chainparams, nHeight, blockTime);\n// Located at https://github.com/zcash/zcash/blob/ab2b7c0969391d8a57d90d008665da02f3f618e7/src/main.cpp#L760\n```\n\n----------------------------------------\n\nTITLE: Building Zebra Image with Prometheus Metrics Feature\nDESCRIPTION: Builds a custom Zebra Docker image specifically enabling the `prometheus` feature alongside default release binaries using the `FEATURES` build argument. The image is tagged `zebra:metrics`. This requires Prometheus and Grafana for visualization.\nSOURCE: https://github.com/zcashfoundation/zebra/blob/main/book/src/user/docker.md#_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\n# Build with specific features\ndocker build -f ./docker/Dockerfile --target runtime \\\n    --build-arg FEATURES=\"default-release-binaries prometheus\" \\\n    --tag zebra:metrics .\n```\n\n----------------------------------------\n\nTITLE: Building a Custom Zebra Docker Image\nDESCRIPTION: Builds a custom Docker image for Zebra using the specified Dockerfile (`docker/Dockerfile`), environment file (`docker/.env`), targeting the `runtime` stage, and tagging the resulting image as `zebra:local`. This allows incorporating custom features or modifications. The `docker/.env` file can be used to specify build arguments like `FEATURES`.\nSOURCE: https://github.com/zcashfoundation/zebra/blob/main/book/src/user/docker.md#_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\ndocker build \\\n  --file docker/Dockerfile \\\n  --env-file docker/.env \\\n  --target runtime \\\n  --tag zebra:local \\\n  .\n```\n\n----------------------------------------\n\nTITLE: Modifying Zebra's Peer Address Display\nDESCRIPTION: This code snippet shows how to modify the `peer_addr.rs` file in the Zebra project to disable IP redaction in logs. This allows users to see the actual IP addresses of connected peers, which is useful for debugging during private testnet testing.\nSOURCE: https://github.com/zcashfoundation/zebra/blob/main/book/src/dev/private-testnet.md#_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\n```diff\n--- a/zebra-network/src/meta_addr/peer_addr.rs\n+++ b/zebra-network/src/meta_addr/peer_addr.rs\n@@ -30,7 +30,7 @@ impl fmt::Display for PeerSocketAddr {\n         let ip_version = if self.is_ipv4() { \"v4\" } else { \"v6\" };\n \n         // The port is usually not sensitive, and it's useful for debugging.\n-        f.pad(&format!(\"{}redacted:{}\", ip_version, self.port()))\n+        f.pad(&format!(\"{}:{}\", self.ip(), self.port()))\n     }\n }```\n```\n\n----------------------------------------\n\nTITLE: Commit Block to NonFinalizedState in Rust\nDESCRIPTION: The `commit_block` function adds a new block into the non-finalized state, handling validation for canopy activation, locating or forking chains, and updating the chain set with the new block, ensuring consistency before finalization.\nSOURCE: https://github.com/zcashfoundation/zebra/blob/main/book/src/dev/rfcs/0005-state-updates.md#_snippet_10\n\nLANGUAGE: rust\nCODE:\n```\nfn commit_block(&mut self, block: Arc<Block>) {\n    // Validate block for canopy rules\n    // Find or fork chain at parent\n    // Push block into chain\n    // Update chain set\n}\n```\n\n----------------------------------------\n\nTITLE: Connecting to Initial Peers\nDESCRIPTION: Logs indicating Zebra's attempts to establish connections with the filtered list of initial peers. It reports connection successes and failures and shows the total number of successful handshakes and outbound connections established before starting the ongoing peer address crawler task.\nSOURCE: https://github.com/zcashfoundation/zebra/blob/main/book/src/user/startup.md#_snippet_3\n\nLANGUAGE: text\nCODE:\n```\nadd_initial_peers: zebra_network::peer_set::initialize: connecting to initial peer set initial_peer_count=25 initial_peers={[2a01:4f9:c010:7391::1]:8233, 202.61.207.45:8233, ...}\nadd_initial_peers: zebra_network::peer_set::initialize: an initial peer connection failed successes=5 errors=8 addr=89.58.36.182:8233 e=Connection refused (os error 111)\n...\nadd_initial_peers: zebra_network::peer_set::initialize: finished connecting to initial seed peers handshake_success_total=11 handshake_error_total=14 outbound_connections=11\nzebra_network::peer_set::initialize: sending initial request for peers active_initial_peer_count=11\ncrawl_and_dial: zebra_network::peer_set::initialize: starting the peer address crawler crawl_new_peer_interval=30s outbound_connections=11\n```\n\n----------------------------------------\n\nTITLE: Raw Zcash Block Data in Hexadecimal Format\nDESCRIPTION: This is a complete hexadecimal representation of a Zcash block. It includes the block header, transaction count, and the serialized transaction data including inputs, outputs, and cryptographic signatures.\nSOURCE: https://github.com/zcashfoundation/zebra/blob/main/zebra-test/src/vectors/block-main-0-000-010.txt#_snippet_0\n\nLANGUAGE: hexadecimal\nCODE:\n```\n040000000caa280b9f75c09ec407a2026a4f578a9e1d12b4b560e381474772741f2c06004825e397cf36e2dc4d32c09924231940e14da73bdaf0d37a72d8f18a7002275f0000000000000000000000000000000000000000000000000000000000000000617b1358ffff071fa5556b2500000000000000000000000000000000000000000000000000000000fd400500778fe70985278d941565e13644e59de26059395818bcfdbe4ea2fcadf573b30269e7b576acb4db93af134dc74ff4f013158b6084633ed7084e3e2f19f0a220e589af2457cf4ff103d41114516c25759a8c825d087f853e8686bfa926f724c8b4481fe550b2cdf94a259412c28cb4a099b5d8b513fefaf1ce66607447681994029c3911814b964592b58aa660452dc9dc62474633c514619ee4ed4561a5b273d695a9dc5ffbf3da0352afb9f85815af5998154b39e3a4d96ac5575fcb0fbf0895cc95f256e7f2628b43ebd49d7baa37e9da123bb0cebaca84cd13c5f15c17759af18d973d88e32f593a62a44fac293812a82ea8c885e6f8835f81e603aedbfba0c4198bd5f59aaa515650babda3db61140cc7c29b6d329975ee7a738ba8a3bdd5cea18ffb1235738fe520ada885a4bb648202422e8e56657f40d059d8dbf50bdd66e1adab87ceb8c252fb51db1b26be05ff099ba0978db3c18a20c33a0b8e44c45188a5d2541d047ee195343fe04f77c3b1f7da72c60b1f5dde0924ff3a7b227ac3686d97857ebe9fb627bd350eb410b82a2844667d2b70b0514601c1dd0085553cb232069f550567cc1a72c2c430ff1e94d5add89f74d62d1cbeb581bb1428f94cda53e3ede73cf5d1dbfa5a67179644604f8b3b7ca1b455c59e48c6ca8ba3d5b9921d867da7b2479cb925f9f3fce8f8135165b5df7c7706e4a852fad55d13ab1020de4190e09f023affc9a42fbbfef1e795f743914c44c7a7bf242bd0a21f032d1cab9dea6a97588cda66d405e44b5fe2d680ddfcc83c47dec15f2cf55395018826f0c57ef649455b01480912db9a94b35f51bea3f2007162c83ef43afc5fba0d0c6f9509ecb23d76cb228237dbc82abcf67ee83f11435bfbcae2419bb125a4eabbf9dce2b7af97b7101fe36a5d70503325c3d2921bb911a480877286c9a800c031733b461d75368f833fb6b9241602df969bf930344ba54623745dd451b54efb35f7a18dd19b7b6a282da76988148f735d2a77441541732def1c30d0ce2ed4d4c3479c4963997ff3bc5dad69a1b7274e113700ea354b01ab6751ddced371985cff394c6f1949221dd436d8b34ac2a465b165d0c1310283b39fff1b7e1acc1ce6269b350f961a3275b742dbcd62538f50f3403c5f34f16ee36fa051c4a75aeba2e7dd7dbf0f65074c246cb071d1859fb0d1b8c1f25bea36b3de32ac471c77457a52c105ef88a603e43264cf1c4739fb3a133e7259f9732cafda26a4eea6f5f916770f5b10fe1b59ceffe0d5e775ddfa8352b0fbfab2378bda73f70d547b9dcd0e8009932391140ff28b26d4e676d06c349c93b9fda424cf7924c3603479a1d659833bb54817db3cf6ade12c95bf3d3377367fa9b336dc5a327e539566fca1ebefe7f1dd362e13df7b3dbf618f602203c8176b45a84819d0ba8537b0ae5222d85e1ee76d2048668413f99dc9ddcb829690d0f1b146cc2be8db20293173f5e481a9434233d72d2b4b19bba25321013c58158abc11ea9d79a0157fa5556b2614031b6dc20ed3eb335408d9991952c3805aab3dfac7d61abf322a971b62738ae5967fc79446c2bec7fa3f0f1e150517efdc857fd2e6470daa9284a6a0bc5a705d16277f3bb74cb70b185c59d8cfd43d95a51d310f910bccf60c0048b6d398da33e56011c897a34d05a744157e8b11a501ec010cc9396da6521f6434e3ca9797dbe9e21eb493c05a8cd833741ce5726efb5eee294fbc4b6851e22b7cdc62b177458af9cef6e57a7e808a54c16e11aabc23b997476700e386a6cdbc8dbf310d1fc9cf48fcb24e9d9dd679927056e4d64e24eaa5121d5d242aea07d29ea9c571e813c4aa257837014ad09e0c1e343f6d6b1dcff114df64e45cf6d05bc54c6f9a4d430101000000010000000000000000000000000000000000000000000000000000000000000000ffffffff025a00ffffffff0220a10700000000002321027a46eb513588b01b37ea24303f4b628afd12cc20df789fede0921e43cad3e875ac48e801000000000017a9147d46a730d31f97b1930d3368a967c309bd4d136a8700000000\n```\n\n----------------------------------------\n\nTITLE: Initializing Block Syncer\nDESCRIPTION: Logs indicating the startup of Zebra's block synchronization component. This component is responsible for downloading, verifying, saving, and gossiping blocks from peers to bring the node's state up to the current chain tip. The block gossip task is one of the initial tasks started.\nSOURCE: https://github.com/zcashfoundation/zebra/blob/main/book/src/user/startup.md#_snippet_7\n\nLANGUAGE: text\nCODE:\n```\nzebrad::commands::start: initializing syncer\nzebrad::components::sync::gossip: initializing block gossip task\n```\n\n----------------------------------------\n\nTITLE: Defining AwaitSpendableUtxo Request and SpendRestriction Enum in Rust\nDESCRIPTION: This Rust snippet defines the AwaitSpendableUtxo request enum with fields for specifying which transparent output is awaited and the spend conditions, including spend height and restrictions. The SpendRestriction enum enumerates consensus-based constraints on how transparent coinbase outputs may be spent, differentiating transactions by the type of outputs they contain. This enables asynchronous and conditional waiting on UTXOs in the Zebra state service. Dependencies include the zebra-chain transparent types and block height definitions.\nSOURCE: https://github.com/zcashfoundation/zebra/blob/main/book/src/dev/rfcs/0004-asynchronous-script-verification.md#_snippet_0\n\nLANGUAGE: Rust\nCODE:\n```\nenum Request::AwaitSpendableUtxo {\n    outpoint: OutPoint,\n    spend_height: Height,\n    spend_restriction: SpendRestriction,\n}\n\n/// Consensus rule:\n/// \"A transaction with one or more transparent inputs from coinbase transactions\n/// MUST have no transparent outputs (i.e.tx_out_count MUST be 0).\"\nenum SpendRestriction {\n    /// The UTXO is spent in a transaction with transparent outputs\n    SomeTransparentOutputs,\n    /// The UTXO is spent in a transaction with all shielded outputs\n    AllShieldedOutputs,\n}\n```\n\n----------------------------------------\n\nTITLE: Changing Owners of Current Zebra Crates Using Batch Operations - Shell\nDESCRIPTION: This batch of shell commands clones the main Zebra repository and processes each crate whose name matches the 'tower-*' or 'zebra*' patterns to update ownership. It uses a shell for-loop, pushd/popd for directory context, and cargo owner commands to add a new owner and remove an old one. Prerequisites: installed 'git', 'cargo', and proper access rights. Effective for projects managing large numbers of crates in bulk.\nSOURCE: https://github.com/zcashfoundation/zebra/blob/main/book/src/dev/crate-owners.md#_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\n$ git clone https://github.com/ZcashFoundation/zebra\n$ cd zebra\n$ for crate in tower-* zebra*; do pushd $crate; cargo owner --add oxarbitrage; cargo owner --remove dconnolly; popd; done\n~/zebra/tower-batch-control ~/zebra\n    Updating crates.io index\n       Owner user oxarbitrage already has a pending invitation to be an owner of crate tower-batch-control\n    Updating crates.io index\n       Owner removing [\"dconnolly\"] from crate tower-batch-control\n~/zebra\n~/zebra/tower-fallback ~/zebra\n    Updating crates.io index\n       Owner user oxarbitrage has been invited to be an owner of crate tower-fallback\n    Updating crates.io index\n       Owner removing [\"dconnolly\"] from crate tower-fallback\n~/zebra\n...\n```\n\n----------------------------------------\n\nTITLE: Configuring Zebra Metrics Endpoint (TOML)\nDESCRIPTION: This TOML snippet configures the metrics section within the `zebrad.toml` file. It sets the `endpoint_addr` to `127.0.0.1:9999`, specifying the address and port where Zebra will expose its Prometheus metrics.\nSOURCE: https://github.com/zcashfoundation/zebra/blob/main/book/src/user/metrics.md#_snippet_2\n\nLANGUAGE: TOML\nCODE:\n```\n[metrics]\nendpoint_addr = \"127.0.0.1:9999\"\n```\n\n----------------------------------------\n\nTITLE: Calculating Difficulty Threshold - Zcash PoW - Rust\nDESCRIPTION: These methods on `AdjustedDifficulty` calculate the difficulty threshold (`nBits` field in the block header) for a new block. `expected_difficulty_threshold` incorporates the Testnet minimum difficulty rule (ZIPs 205 and 208), applying `ToCompact(PoWLimit(network))` if the Testnet condition is met. `threshold_bits` implements the standard `ThresholdBits` calculation from the Zcash specification, excluding the Testnet specific modification.\nSOURCE: https://github.com/zcashfoundation/zebra/blob/main/book/src/dev/rfcs/0006-contextual-difficulty.md#_snippet_7\n\nLANGUAGE: Rust\nCODE:\n```\n/// Calculate the expected `difficulty_threshold` for a candidate block, based\n/// on the `candidate_time`, `candidate_height`, `network`, and the\n/// `difficulty_threshold`s and `time`s from the previous\n/// `PoWAveragingWindow + PoWMedianBlockSpan` (28) blocks in the relevant chain.\n///\n/// Implements `ThresholdBits` from the Zcash specification, and the Testnet\n/// minimum difficulty adjustment from ZIPs 205 and 208.\npub fn expected_difficulty_threshold(&self) -> CompactDifficulty { ... }\n\n/// Calculate the `difficulty_threshold` for a candidate block, based on the\n/// `candidate_height`, `network`, and the relevant `difficulty_threshold`s and\n/// `time`s.\n///\n/// See `expected_difficulty_threshold` for details.\n///\n/// Implements `ThresholdBits` from the Zcash specification. (Which excludes the\n/// Testnet minimum difficulty adjustment.)\nfn threshold_bits(&self) -> CompactDifficulty { ... }\n```\n\n----------------------------------------\n\nTITLE: Running Local CI Tests with Docker Compose\nDESCRIPTION: Uses Docker Compose with the `docker/docker-compose.test.yml` file to start the services required for running Zebra's continuous integration tests locally. Requires prior configuration by setting variables in the `test.env` file.\nSOURCE: https://github.com/zcashfoundation/zebra/blob/main/book/src/user/docker.md#_snippet_11\n\nLANGUAGE: shell\nCODE:\n```\ndocker-compose -f docker/docker-compose.test.yml up\n```\n\n----------------------------------------\n\nTITLE: Connecting zecwallet-cli to lightwalletd\nDESCRIPTION: Command to run zecwallet-cli and connect it to the locally running lightwalletd service on port 9067.\nSOURCE: https://github.com/zcashfoundation/zebra/blob/main/book/src/user/lightwalletd.md#_snippet_6\n\nLANGUAGE: console\nCODE:\n```\nzecwallet-cli --server 127.0.0.1:9067\n```\n\n----------------------------------------\n\nTITLE: Copying Zebra State Cache to New Config (Shell)\nDESCRIPTION: Executes the `zebrad copy-state` command to create a new state cache. It uses the configuration specified by `--target-config-path` (which should point to a config with a new `cache_dir`) and copies the state from the source cache up to, but not including, the block height specified by `--max-source-height`. This process is part of the recommended procedure for recovering from finalizing a block from a chain fork.\nSOURCE: https://github.com/zcashfoundation/zebra/blob/main/CHANGELOG.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nzebrad copy-state --target-config-path \"./zebrad-copy-target.toml\" --max-source-height \"2975999\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Zebra Logging Filter to Info (TOML)\nDESCRIPTION: This TOML configuration snippet sets the logging filter for Zebra's tracing component to 'info'. This reduces the volume of log output compared to 'debug' or 'trace' levels, which can help improve performance by reducing disk I/O and CPU usage associated with excessive logging.\nSOURCE: https://github.com/zcashfoundation/zebra/blob/main/book/src/user/troubleshooting.md#_snippet_3\n\nLANGUAGE: toml\nCODE:\n```\n[tracing]\nfilter = 'info'\n```\n\n----------------------------------------\n\nTITLE: Viewing the Zebra RPC Authentication Cookie\nDESCRIPTION: Executes the `cat` command inside a running Zebra Docker container (specified by `<container_name>`) to display the content of the RPC authentication cookie file located at `/home/zebra/.cache/zebra/.cookie`. This cookie is needed by RPC clients when cookie authentication is enabled.\nSOURCE: https://github.com/zcashfoundation/zebra/blob/main/book/src/user/docker.md#_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ndocker exec <container_name> cat /home/zebra/.cache/zebra/.cookie\n```\n\n----------------------------------------\n\nTITLE: Syncing to the Blockchain Tip\nDESCRIPTION: Logs showing the progression of the blockchain synchronization process after initial setup. It includes messages about spawning initial tasks, beginning the genesis block download, waiting for the genesis block, verifying early checkpoint ranges, and starting the main sync loop to extend the state tip and fetch subsequent blocks. Periodic progress updates are also logged.\nSOURCE: https://github.com/zcashfoundation/zebra/blob/main/book/src/user/startup.md#_snippet_8\n\nLANGUAGE: text\nCODE:\n```\nzebrad::commands::start: spawned initial Zebra tasks\nzebrad::components::sync: starting genesis block download and verify\nzebrad::commands::start: initial sync is waiting to download the genesis block sync_percent=0.000 % current_height=None\nsync:checkpoint: zebra_consensus::checkpoint: verified checkpoint range block_count=1 current_range=(Unbounded, Included(Height(0)))\nsync:try_to_sync: zebrad::components::sync: starting sync, obtaining new tips state_tip=Some(Height(0))\nsync:try_to_sync: zebrad::components::sync: extending tips tips.len=1 in_flight=499 lookahead_limit=2000 state_tip=Some(Height(0))\nsync:try_to_sync:obtain_tips:checkpoint: zebra_consensus::checkpoint: verified checkpoint range block_count=400 current_range=(Excluded(Height(0)), Included(Height(400)))\n...\nzebrad::commands::start: estimated progress to chain tip sync_percent=0.537 % current_height=Height(9119) remaining_sync_blocks=1687657 time_since_last_state_block=PT0S\n...\n```\n\n----------------------------------------\n\nTITLE: Disabling RPC Cookie Authentication in zebrad.toml\nDESCRIPTION: Shows the relevant section within a `zebrad.toml` configuration file to disable RPC cookie authentication by setting `enable_cookie_auth = false` under the `[rpc]` section. This is used when configuring Zebra via a custom config file (methods 1 or 2).\nSOURCE: https://github.com/zcashfoundation/zebra/blob/main/book/src/user/docker.md#_snippet_8\n\nLANGUAGE: toml\nCODE:\n```\n[rpc]\n# listen_addr = ...\nenable_cookie_auth = false\n```\n\n----------------------------------------\n\nTITLE: Configuring PropTest Failure Case Seeds\nDESCRIPTION: This configuration file stores specific test cases (seeds) that caused failures in the past when running prop tests. The seeds are read automatically before generating new test cases to reproduce and verify the fix for the previous failures. The seeds are recommended to be version controlled to benefit all developers.\nSOURCE: https://github.com/zcashfoundation/zebra/blob/main/zebra-network/proptest-regressions/protocol/external/tests/prop.txt#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\ncc 62951c0bf7f003f29184881befbd1e8144493b3b14a6dd738ecef9e4c8c06148 # shrinks to inventory_hash = Wtx\n```\n\n----------------------------------------\n\nTITLE: Configuring RPC Listen Address - Zebra - TOML\nDESCRIPTION: This TOML configuration block specifies the address and port for the Zebra RPC server to listen on. It must be added or modified within the `[rpc]` section of the `zebrad.toml` file. The example sets the address to localhost (127.0.0.1) and port 8232.\nSOURCE: https://github.com/zcashfoundation/zebra/blob/main/book/src/user/openapi.md#_snippet_1\n\nLANGUAGE: toml\nCODE:\n```\n[rpc]\nlisten_addr = \"127.0.0.1:8232\"\n```\n\n----------------------------------------\n\nTITLE: Verifying Zebra Regtest Initialization (Console)\nDESCRIPTION: Example log output from Zebra confirming successful initialization on the Regtest network. The `net=\"Regtest\"` part indicates that Zebra is correctly configured and running in Regtest mode.\nSOURCE: https://github.com/zcashfoundation/zebra/blob/main/book/src/user/regtest.md#_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n2024-05-15T21:33:57.044156Z  INFO {zebrad=\"01633af\" net=\"Regtest\"}: zebrad::commands::start: initializing mempool\n```\n\n----------------------------------------\n\nTITLE: Seed for Proptest Failure Case\nDESCRIPTION: This comment provides a seed value for a specific test failure generated by the proptest framework. This seed is used to rerun a particular failing test case, helping developers reproduce the issue.  The comment includes the seed value and the corresponding `SpendingKey` that produced the failure. The purpose is to ensure the same failure is consistently replicated for debugging and verification.\nSOURCE: https://github.com/zcashfoundation/zebra/blob/main/zebra-chain/proptest-regressions/orchard/keys/tests.txt#_snippet_0\n\nLANGUAGE: comment\nCODE:\n```\n# cc 8ba80e3da74dc90c627f620bed08c47e7a13bb2e7762aad6e8c8f362237aed1b # shrinks to spending_key = SpendingKey { network: Mainnet, bytes: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }\n```\n\n----------------------------------------\n\nTITLE: No Code Snippets Provided\nDESCRIPTION: The provided content does not contain any code snippets to document. It consists of release notes, feature descriptions, and high-level project summaries.\nSOURCE: https://github.com/zcashfoundation/zebra/blob/main/CHANGELOG.md#_snippet_6\n\n\n\n----------------------------------------\n\nTITLE: Opening Cached State\nDESCRIPTION: Logs detailing Zebra's process of accessing or creating the cached state database. It includes checks for system file limits required by the database and confirmation of the state cache location and initial state tip status.\nSOURCE: https://github.com/zcashfoundation/zebra/blob/main/book/src/user/startup.md#_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nzebrad::commands::start: initializing node state\nzebra_state::service::finalized_state::disk_db: the open file limit is high enough for Zebra current_limit=1048576 min_limit=512 ideal_limit=1024\nzebra_state::service::finalized_state::disk_db: Opened Zebra state cache at /home/user/.cache/state/v24/mainnet\nzebra_state::service::finalized_state: loaded Zebra state cache tip=None\nzebra_state::service: created new read-only state service\n...\n```\n\n----------------------------------------\n\nTITLE: Enabling Zebra's RPC Server for Regtest Block Submission (TOML)\nDESCRIPTION: TOML configuration snippet required to enable Zebra's RPC server, specifically for submitting blocks mined externally. The `listen_addr` field specifies the address and port for the RPC server to listen on, allowing interaction via methods like `getblocktemplate` and `submitblock`.\nSOURCE: https://github.com/zcashfoundation/zebra/blob/main/book/src/user/regtest.md#_snippet_3\n\nLANGUAGE: toml\nCODE:\n```\n[rpc]\nlisten_addr = \"0.0.0.0:18232\"\n```\n\n----------------------------------------\n\nTITLE: Install `s-nomp` on Debian/Ubuntu\nDESCRIPTION: These commands describe the steps to install s-nomp.  The process involves cloning the repository, checking out the zebra-mining branch to include necessary fixes, installing a node version manager (nodenv or nvm), and installing dependencies with npm. The CXXFLAGS variable is set to gnu++17 to support the required C++ standard.\nSOURCE: https://github.com/zcashfoundation/zebra/blob/main/book/src/user/mining-testnet-s-nomp.md#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\ngit clone https://github.com/ZcashFoundation/s-nomp\ncd s-nomp\ngit checkout zebra-mining\nnodenv install 10\nnodenv local 10\n\nexport CXXFLAGS=\"-std=gnu++17\"\nnpm update\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Installing boost and libsodium\nDESCRIPTION: This command installs the development libraries for boost and libsodium.  These libraries are dependencies of s-nomp.  It is suitable for Debian/Ubuntu systems.\nSOURCE: https://github.com/zcashfoundation/zebra/blob/main/book/src/user/mining-testnet-s-nomp.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nsudo apt install libboost-all-dev\nsudo apt install libsodium-dev\n```\n\n----------------------------------------\n\nTITLE: Passing Finalized Tip Value Balance to Chain Constructor in Zebra State (Rust)\nDESCRIPTION: Augments the creation of Chain in the nonfinalized state by requiring the finalized_tip_value_balance as an argument for Chain::new. This argument is then forwarded in the new instance creation, guaranteeing that pool state correctly spans finalized and nonfinalized sections of the chain. Used for robust startup/resume of chain state with value pool invariant holding.\nSOURCE: https://github.com/zcashfoundation/zebra/blob/main/book/src/dev/rfcs/0012-value-pools.md#_snippet_12\n\nLANGUAGE: rust\nCODE:\n```\nlet mut chain = Chain::new(finalized_tip_history_tree, finalized_tip_value_balance);\n\n```\n\n----------------------------------------\n\nTITLE: Reading Data from Column Family\nDESCRIPTION: This snippet shows how to read data from the database using a column family handle, implementing methods for retrieving specific data by index and within a range. These methods provide an abstraction over low-level database access, making data retrieval safer and easier.\nSOURCE: https://github.com/zcashfoundation/zebra/blob/main/book/src/dev/state-db-upgrades.md#_snippet_2\n\nLANGUAGE: rust\nCODE:\n```\nimpl Storage {\n    /// Returns the result for a specific database index (key, block height, transaction index).\n    pub fn sapling_result_for_index(\n        &self,\n        index: &SaplingScannedDatabaseIndex,\n    ) -> Option<SaplingScannedResult> {\n        self.sapling_tx_ids_cf().zs_get(index).flatten()\n    }\n\n    /// Returns the Sapling indexes and results in the supplied range.\n    fn sapling_results_in_range(\n        &self,\n        range: impl RangeBounds<SaplingScannedDatabaseIndex>,\n    ) -> BTreeMap<SaplingScannedDatabaseIndex, Option<SaplingScannedResult>> {\n        self.sapling_tx_ids_cf().zs_items_in_range_ordered(range)\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding New Network Upgrade Variant and Branch ID in Rust (zcash_primitives and Zebra)\nDESCRIPTION: This snippet conceptually represents the necessary code changes to the Rust crates `zcash_primitives` and Zebra. Users add a new variant `Nu6` to the `NetworkUpgrade` enum and a unique consensus branch ID in Zebra for the new upgrade. The Rust project dependencies must be updated to point to customized branches including these changes. This enables Zebra to recognize and process the new network upgrade in the testnet fork. Requires Rust and cargo build environment.\nSOURCE: https://github.com/zcashfoundation/zebra/blob/main/book/src/user/fork-zebra-testnet.md#_snippet_2\n\nLANGUAGE: Rust\nCODE:\n```\n// Add variant to NetworkUpgrade enum\nenum NetworkUpgrade {\n    // ... existing variants\n    Nu5,\n    Nu6, // new upgrade variant\n}\n\n// Example branch id constant\nconst CONSENSUS_BRANCH_ID_NU6: u32 = 0x00000006;\n\n// Update zebra-chain/Cargo.toml dependency for zcash_primitives\n// zcash_primitives = { git = \"https://github.com/oxarbitrage/librustzcash\", branch = \"nu6-test\", features = [\"transparent-inputs\"] }\n```\n\n----------------------------------------\n\nTITLE: Using rustdoc Links for Documentation in Rust\nDESCRIPTION: Shows examples of how to use `rustdoc` links within doc comments in Rust code. These links allow referencing code elements like types, functions, methods, and enum variants, providing navigation and enabling `rustdoc` lints to catch broken links caused by name changes.\nSOURCE: https://github.com/zcashfoundation/zebra/blob/main/book/src/dev/mass-renames.md#_snippet_5\n\nLANGUAGE: Rust\nCODE:\n```\n//! This is what `rustdoc` links look like:\n//! - [`u32`] type or trait\n//! - [`drop()`] function\n//! - [`Clone::clone()`] method\n//! - [`Option::None`] enum variant\n//! - [`Option::Some(_)`](Option::Some) enum variant with data\n//! - [`HashMap`](std::collections::HashMap) fully-qualified path\n//! - [`BTreeSet<String>`](std::collections::BTreeSet) fully-qualified path with generics\n```\n\n----------------------------------------\n\nTITLE: Confirming Forked Chain Status Using RPC and Log Outputs\nDESCRIPTION: Sample command to query Zebra’s RPC interface for blockchain info to confirm the forked chain tip height and branch ID. Accompanied by expected log excerpt samples from s-nomp pool and Zebra demonstrating block submissions and acceptances after the network upgrade activation, confirming the chain has forked and is processing new blocks.\nSOURCE: https://github.com/zcashfoundation/zebra/blob/main/book/src/user/fork-zebra-testnet.md#_snippet_5\n\nLANGUAGE: Shell\nCODE:\n```\ncurl --silent --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getblockchaininfo\", \"params\": [] }' -H 'Content-type: application/json' http://127.0.0.1:18232/ | jq\n\n# Sample log excerpts\n# s-nomp pool:\n# 2023-11-24 16:32:24 [Pool] (Thread 1) Submitted Block using submitblock successfully\n\n# Zebra:\n# 2023-11-24T19:32:24.661758Z INFO zebra_rpc::methods::get_block_template_rpcs: submit block accepted block_hash=block::Hash(...) block_height=\"2599969\"\n```\n\n----------------------------------------\n\nTITLE: Initializing Transaction Mempool\nDESCRIPTION: Logs showing the initialization of the mempool component, which manages unconfirmed transactions. It lists the background tasks being started for mempool operations like crawling for transactions, checking the queue, and gossiping transaction hashes to peers. The mempool becomes fully operational once Zebra reaches the network's chain tip.\nSOURCE: https://github.com/zcashfoundation/zebra/blob/main/book/src/user/startup.md#_snippet_6\n\nLANGUAGE: text\nCODE:\n```\nzebrad::commands::start: initializing mempool\nzebrad::components::mempool::crawler: initializing mempool crawler task\nzebrad::components::mempool::queue_checker: initializing mempool queue checker task\nzebrad::components::mempool::gossip: initializing transaction gossip task\n```\n\n----------------------------------------\n\nTITLE: Instrumenting Async Functions with Tracing - Rust\nDESCRIPTION: This code snippet demonstrates how Zebra uses the `tracing` crate to instrument an async function.  The `#[instrument]` attribute adds trace logs and debug information to the function, including a specified logging level and skipped fields. The code relies on the `tracing` crate and requires a `block::Hash` argument.\nSOURCE: https://github.com/zcashfoundation/zebra/blob/main/book/src/dev/rfcs/0011-async-rust-in-zebra.md#_snippet_9\n\nLANGUAGE: rust\nCODE:\n```\n/// Queue a block for download and verification.\n//\n/// This method waits for the network to become ready, and returns an error\n/// only if the network service fails. It returns immediately after queuing\n/// the request.\n#[instrument(level = \"debug\", skip(self), fields(%hash))]\npub async fn download_and_verify(&mut self, hash: block::Hash) -> Result<(), Report> {\n    ...\n}\n```\n\n----------------------------------------\n\nTITLE: Validating Block Header (Contextual)\nDESCRIPTION: The `ContextualCheckBlockHeader` function performs validation of the block header based on the preceding block. It checks the Equihash solution, verifies the proof of work difficulty, enforces timestamp rules relative to the previous block and soft fork activations (like the future timestamp rule), rejects blocks with version less than 4, and checks against checkpoints.\nSOURCE: https://github.com/zcashfoundation/zebra/blob/main/book/src/dev/rfcs/drafts/data-flow-2020-07-22.md#_snippet_6\n\nLANGUAGE: C++\nCODE:\n```\nContextualCheckBlockHeader(block.GetBlockHeader(), state, chainparams, pindexPrev);\n// Located at https://github.com/zcash/zcash/blob/ab2b7c0969391d8a57d90d008665da02f3f618e7/src/main.cpp#L3900\n```\n\n----------------------------------------\n\nTITLE: Compiling Zebra on ARM Architecture Using Rust (Rust)\nDESCRIPTION: This guidance explains that on ARM machines, users should install the Rust compiler for ARM to ensure Zebra runs efficiently, as building with x86_64 tools may lead to slow performance. It points to the official Rust installation instructions for ARM architectures.\nSOURCE: https://github.com/zcashfoundation/zebra/blob/main/book/src/user/install.md#_snippet_6\n\n\n\n----------------------------------------\n\nTITLE: RPC server support and network configuration in Markdown\nDESCRIPTION: This documentation outlines Zebra's RPC server features, including methods supported, network protocol upgrades, and performance improvements. Changes reflect the addition of RPC endpoints, response format adjustments, and internal refactorings to optimize data retrieval during syncing and transaction processing.\nSOURCE: https://github.com/zcashfoundation/zebra/blob/main/CHANGELOG.md#_snippet_5\n\nLANGUAGE: Markdown\nCODE:\n```\n# Zebra RPC Support and Network Protocol Changes\n\n- Added support for RPC server support including methods like `getinfo`, `sendrawtransaction`, `getbestblockhash`, `getblock`, and `getrawtransaction`.\n- Updated protocol versions for NU5 activation.\n- Improved RPC response formats to match zcashd.\n- Refactored database and state storage for efficiency.\n\n## Notable changes\n- Enhanced RPC call handling for better client interaction.\n- Performance improvements in cache and state access to reduce sync times.\n- Full support for transparent address indexes and RPC methods.\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Progress Bars in Zebra via TOML (Toml)\nDESCRIPTION: This configuration snippet within the `zebrad.toml` file enables progress bars to display key metrics in the terminal during Zebra's operation. It requires setting the `tracing.progress_bar` parameter to control the level of detail shown; further customization can be explored via Zebra's documentation. This feature enhances monitoring but may have known issues with estimate sizes.\nSOURCE: https://github.com/zcashfoundation/zebra/blob/main/book/src/user/install.md#_snippet_1\n\nLANGUAGE: toml\nCODE:\n```\ntracing.progress_bar = \"detailed\"\n```\n\n----------------------------------------\n\nTITLE: Initializing and Querying Zebra State with Tower Service\nDESCRIPTION: This code snippet demonstrates how to initialize the Zebra state service using the `zebra_state::on_disk::init` function, create a `zebra_state::Request` for a block locator, and interact with the service using the `tower::Service` API. It shows the required steps of calling `ready` before `call` and asserts the type of the response.\nSOURCE: https://github.com/zcashfoundation/zebra/blob/main/book/src/dev/rfcs/0005-state-updates.md#_snippet_0\n\nLANGUAGE: Rust\nCODE:\n```\nuse tower::{Service, ServiceExt};\n\nlet state = zebra_state::on_disk::init(state_config, network);\nlet request = zebra_state::Request::BlockLocator;\nlet response = state.ready_and().await?.call(request).await?;\n\nassert!(matches!(response, zebra_state::Response::BlockLocator(_)));\n```\n\n----------------------------------------\n\nTITLE: Getting Handle for Current Tip Value Pool Column Family in Zebra (Rust)\nDESCRIPTION: Provides a public function `current_value_pool` to retrieve the handle for the \"tip_chain_value_pool\" column family from the database. This function likely allows other components or services within Zebra's state module to easily access the column family handle necessary to query or interact with the stored tip value pool data.\nSOURCE: https://github.com/zcashfoundation/zebra/blob/main/book/src/dev/rfcs/0012-value-pools.md#_snippet_22\n\nLANGUAGE: Rust\nCODE:\n```\npub fn current_value_pool(&self) -> ValuePool<NonNegative> {\n    self.db.cf_handle(\"tip_chain_value_pool\")\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Data within Legacy Batch\nDESCRIPTION: This snippet demonstrates the usage of `with_batch_for_writing()` to update a history tree within a legacy batch. The caller is responsible for writing the batch to the database. This illustrates how to integrate with existing database operations.\nSOURCE: https://github.com/zcashfoundation/zebra/blob/main/book/src/dev/state-db-upgrades.md#_snippet_4\n\nLANGUAGE: rust\nCODE:\n```\nimpl DiskWriteBatch {\n    /// Updates the history tree for the tip, if it is not empty.\n    ///\n    /// The batch must be written to the database by the caller.\n    pub fn update_history_tree(&mut self, db: &ZebraDb, tree: &HistoryTree) {\n        let history_tree_cf = db.history_tree_cf().with_batch_for_writing(self);\n\n        if let Some(tree) = tree.as_ref().as_ref() {\n            // The batch is modified by this method and written by the caller.\n            let _ = history_tree_cf.zs_insert(&(), tree);\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies on Arch Linux (Shell)\nDESCRIPTION: This command uses the pacman package manager to install the necessary build dependencies for Zebra on Arch Linux: Rust toolchain, Clang (including libclang), and Protobuf.\nSOURCE: https://github.com/zcashfoundation/zebra/blob/main/README.md#_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nsudo pacman -S rust clang protobuf\n```\n\n----------------------------------------\n\nTITLE: Visualizing Zebra Service Dependencies using DOT\nDESCRIPTION: This DOT graph definition describes the dependencies between various services within the Zebra node architecture, such as `transaction_verifier`, `state`, `mempool`, `inbound`, `rpc_server`, and `block_verifier_router`. It visualizes the flow of information and control, with dotted lines indicating specific RPC calls like `getblocktemplate`. The graph can be rendered using tools like Graphviz.\nSOURCE: https://github.com/zcashfoundation/zebra/blob/main/book/src/dev/overview.md#_snippet_0\n\nLANGUAGE: dot\nCODE:\n```\ndigraph services {\n    transaction_verifier -> state\n    mempool -> state\n    inbound -> state\n    rpc_server -> state\n    mempool -> transaction_verifier\n    block_verifier_router -> checkpoint_verifier\n    inbound -> mempool\n    rpc_server -> mempool\n    inbound -> block_verifier_router\n    syncer -> block_verifier_router\n    rpc_server -> block_verifier_router [style=dotted]\n    syncer -> peer_set\n    mempool -> peer_set\n    block_verifier -> state\n    checkpoint_verifier -> state\n    block_verifier -> transaction_verifier\n    block_verifier_router -> block_verifier\n    rpc_server -> inbound [style=invis] // for layout of the diagram\n}\n```\n\n----------------------------------------\n\nTITLE: Documenting a Block Retrieval RPC Method in Zebra - Rust\nDESCRIPTION: This Rust code snippet defines the `getblock` RPC method for retrieving a specific blockchain block by hash or height, with options for verbosity. It demonstrates proper use of doc-comments to describe method purpose, expected parameters (`hash_or_height` and optional `verbosity`), and output format. The snippet requires the Zebra project environment and expects valid block identifiers, returning a JSON string or error if the block is not found. It restricts verbosity values for compatibility with client expectations.\nSOURCE: https://github.com/zcashfoundation/zebra/blob/main/zebra-utils/README.md#_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\n/// Returns the requested block by hash or height, as a [`GetBlock`] JSON string.\n/// If the block is not in Zebra's state, returns\n/// [error code `-8`.](https://github.com/zcash/zcash/issues/5758)\n///\n/// zcashd reference: [`getblock`](https://zcash.github.io/rpc/getblock.html)\n/// method: post\n/// tags: blockchain\n///\n/// # Parameters\n///\n/// - `hash_or_height`: (string, required, example=\"1\") The hash or height for the block to be returned.\n/// - `verbosity`: (number, optional, default=1, example=1) 0 for hex encoded data, 1 for a json object, and 2 for json object with transaction data.\n///\n/// # Notes\n///\n/// With verbosity=1, [`lightwalletd` only reads the `tx` field of the\n/// result](https://github.com/zcash/lightwalletd/blob/dfac02093d85fb31fb9a8475b884dd6abca966c7/common/common.go#L152),\n/// and other clients only read the `hash` and `confirmations` fields,\n/// so we only return a few fields for now.\n///\n/// `lightwalletd` and mining clients also do not use verbosity=2, so we don't support it.\n#[rpc(name = \"getblock\")]\nfn get_block(\n   &self,\n   hash_or_height: String,\n   verbosity: Option<u8>,\n) -> BoxFuture<Result<GetBlock>>;\n\n```\n\n----------------------------------------\n\nTITLE: Defining Subsidy Validation Errors in Rust\nDESCRIPTION: Rust enum defining specific error types that can occur during the validation of Zcash block subsidy consensus rules. Errors cover issues like missing coinbase, incorrect founders' reward amounts or addresses, incorrect funding stream amounts or addresses, invalid shielded components in coinbase, and broken shielded transaction rules.\nSOURCE: https://github.com/zcashfoundation/zebra/blob/main/book/src/dev/rfcs/drafts/xxxx-block-subsidy.md#_snippet_5\n\nLANGUAGE: Rust\nCODE:\n```\npub enum SubsidyError {\n    #[error(\"not a coinbase transaction\")]\n    NoCoinbase,\n\n    #[error(\"founders reward amount not found\")]\n    FoundersRewardAmountNotFound,\n    \n    #[error(\"founders reward address not found\")]\n    FoundersRewardAddressNotFound,\n    \n    #[error(\"funding stream amount not found\")]\n    FundingStreamAmountNotFound,\n    \n    #[error(\"funding stream address not found\")]\n    FundingStreamAddressNotFound,\n    \n    #[error(\"invalid shielded descriptions found\")]\n    ShieldedDescriptionsInvalid,\n\n    #[error(\"broken rule in shielded transaction inside coinbase\")]\n    ShieldedRuleBroken,\n}\n```\n\n----------------------------------------\n\nTITLE: Cryptographic Hash Computation using SHA-256 in Python\nDESCRIPTION: This snippet demonstrates how to perform cryptographic hash calculations using the SHA-256 algorithm in Python, essential for blockchain data integrity. It depends on the 'hashlib' library and outputs a hexadecimal hash string given raw input data.\nSOURCE: https://github.com/zcashfoundation/zebra/blob/main/zebra-test/src/vectors/block-main-1-687-107.txt#_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nimport hashlib\n\ndef sha256_hash(data):\n    return hashlib.sha256(data).hexdigest()\n\n# Input data example\ninput_data = b\"sample data\"\nprint(sha256_hash(input_data))\n```\n\n----------------------------------------\n\nTITLE: Documenting a Software Information Retrieval RPC Method in Zebra - Rust\nDESCRIPTION: This snippet illustrates the use of Rust doc-comments and attribute macros to define the `getinfo` RPC method, which returns software information from the Zebra RPC server as a JSON struct. It documents the method's post type, RVN tags, and references to original and custom fields. The approach clearly explains method limitations, such as which fields Zebra may omit compared to zcashd, targeting lightwalletd support.\nSOURCE: https://github.com/zcashfoundation/zebra/blob/main/zebra-utils/README.md#_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\n#[rpc(name = \"getinfo\")]\n/// Returns software information from the RPC server, as a [`GetInfo`] JSON struct.\n///\n/// zcashd reference: [`getinfo`](https://zcash.github.io/rpc/getinfo.html)\n/// method: post\n/// tags: control\n///\n/// # Notes\n///\n/// [The zcashd reference](https://zcash.github.io/rpc/getinfo.html) might not show some fields\n/// in Zebra's [`GetInfo`]. Zebra uses the field names and formats from the\n/// [zcashd code](https://github.com/zcash/zcash/blob/v4.6.0-1/src/rpc/misc.cpp#L86-L87).\n///\n/// Some fields from the zcashd reference are missing from Zebra's [`GetInfo`]. It only contains the fields\n/// [required for lightwalletd support.](https://github.com/zcash/lightwalletd/blob/v0.4.9/common/common.go#L91-L95)\nfn get_info(&self) -> Result<GetInfo>;\n\n```\n\n----------------------------------------\n\nTITLE: Hexadecimal Representation of a Zcash Block\nDESCRIPTION: This is a raw hexadecimal representation of a Zcash block, containing the block header, transaction data, and other blockchain metadata. It includes nonce values, transaction outputs, script data, and cryptographic hashes used in the Zcash blockchain.\nSOURCE: https://github.com/zcashfoundation/zebra/blob/main/zebra-test/src/vectors/block-test-0-299-187.txt#_snippet_0\n\nLANGUAGE: hex\nCODE:\n```\n040000001e8745663d7183b438bd0e37a9d350f2a5d586e8f3dc2fbe98315f1fd8010000198843867743542ebd4d76f413b706d110c4d8945646ad53d1b9fe114f6c33b62155aa92b3ea1ce41bc92a1c10a7db4893ff92e9a4b3a08694ecf7f999df1568c100b65bd5b4021edf027a1d050f0000000000000000000000000000000000000000000000000003fd4005019a418d043a8857e2cf73f71c364f7e7778fcbd4a088a6c7eca146a06b77c713f4f26fbcd876af67529057c04756ddf1f5b7a11453a033d17decd181eeb911dcecf423665667bcfe5766aa041c379a36bdad14608cb1529cbc6708c5899535335ec29ceaf8b5da1ea2bde01630ef23d23bf479398a0f4674a2252f43dc0148a2b028a93d008f828244eada4fd65afd7f73f27368b2f145093c459048f0cb470ee120781b13f5c8301e55ca0bdd20935032342c7ee50d59f85987ded5f0ca644f46d96b5abd49ce4f4165d4a1a6d3b3a324004b3125f4f36f64ff6c8f2f6fdd2780947531348bf0e33aab7e3679463da53832735377f88ff5e743c4c10719b0e5fd6e3d37073ea10a5fe0da3aaf1de843a74d81c780aa2c58fc98319620f6ce8b679f974167510aae242339137a4c4df13f907c39691065d11ec8f68dcb56e3d1e913dee9196c872c4faf344a0befd29025e653b10af53eb8900bb7c196581ef4c4ede8bea1fbc27d0836679fdb20bd43e4d50b93128174aaaf204c5fe8b176a262b62af57f4a8e62cb5ff90d36b370880c15e1ddfa629370ee1324bb097785c5a3286b10dd884b3204bd6ef13036276aff1fdc4f03a9b12d0278015348df0c5b99235b2d4cd3898163adc3a314a20b7c56dd612ccc1b805b92cd4db6def54a75ee6552caeae4690d724e5e3ab5355983e64a6313b5bff39042412fdb6e3b6a7394f466f566e8fa2dedc1c3fdd1d0153653c2a7bf7a17dc333cab478116f7d58f18909dc420981cfc829ee80a3bb4bcaa04b420fdb86fd1d014e57cd9731a595ed28e2a9ec8f225fe7fef12b0df9bfaa614d2e5fd08066c5e5e873a67bd8bca26255e74ac00d562d833f9cf6aca8c999163ee5df347a132d964f0916b7853019421b139339e58653d25cf82b1e9c94bc749813f063546553a900c27530d661ec019e005f5928a147bd6ae9a279d554626c667951701926da3262743b29e186031baaa3ab5a0ea514c801044cc25bf851a2e4c5d8c0a3d35aeafd52ccb2a4351308f33a224ae532873173fc15c7a8765f6bde0c4701c4d484edc8e2cf36a3567ab2c4554da69a8f87ab0fa12f6f2bce791edbb86162db8d3006fc921854270ee3f945560e6fcd47ad22fa89631131831ed5fd2a14618c380448ea138aa0f5260e3dbb176a563bbe330452a3a8b523dc5da993c502236d5506c9e457ecb1070261b72e2704d9820b10b2cb463a771886bf5c171bd186c79d19eb0919ed95d1d069b066e29d1b554e2a90e34d948bfd6b68d526453869484a4ebcd3f2de0499d7db67028f75546e76d22dcacb32992a3f134f0a5e4badb61174075a0b30f4f13a2c94b806cfca790c6000e90221a68b60b6e26698a224ef70377ed76519097dc8fa661e959f6155384363f66dc0d71a7c0101b265e75f45fd8c92a7809ef4d98d1ca2fb6c68740a6783d1a40558d65ad615aa70d8bc122799ff3b721e668424308e21edbaa962640b77532db840b5e16d33622299fce38a6fc90a7420e7c1c2717f67f76aef068c2c12f4656deb3769122103bf509ddd835ef6d42b98d6e433188cad06dda82ede47a022c468ddf6680c35aca592448a4927c4b340bea53bcd1307ab3f9b54fbfe11ad72e409d614d6d5174adb51c221d6dc8f048c6540214ce6aaef45d414c6596cc58032afaf5357862c18c4dfeb0b6f90982f3dc6e85254e557bd1e0bb8fc0d8f97c9fbee80f1e3a5c4ee44db6e8faa79129228a2748bc713f6b9e6981ee9930ec687176c36068829715cf14ecda56f0265b63efce5575faf037723955bb039a632b3e8f796826cbfcaa2b99618e9fc2bb1c1818fe1b24f20ec35b0e27bb6e9828e6f649649c1242a969f6a3dfa314556bdf4ee9963f6ee1b33010400008085202f89010000000000000000000000000000000000000000000000000000000000000000ffffffff0503b3900400ffffffff0200ca9a3b000000001976a9144bb9f3f3de8da40922a1cdb0775a2956289e285188ac80b2e60e0000000017a914fd79e0c84acac223142cf503dc6afde24acac50e8700000000000000000000000000000000000000\n```\n\n----------------------------------------\n\nTITLE: Performing Initial Non-Contextual Block Checks\nDESCRIPTION: The `CheckBlock` function performs basic validation of a block that does not require blockchain state. It checks the block header validity, verifies the Merkle root, enforces size limits, checks the coinbase transaction structure, and iterates through all transactions calling `CheckTransaction` for each.\nSOURCE: https://github.com/zcashfoundation/zebra/blob/main/book/src/dev/rfcs/drafts/data-flow-2020-07-22.md#_snippet_1\n\nLANGUAGE: C++\nCODE:\n```\nCheckBlock(block, fCheckPOW, fCheckMerkleRoot, fCheckSig);\n// Located at https://github.com/zcash/zcash/blob/ab2b7c0969391d8a57d90d008665da02f3f618e7/src/main.cpp#L3930\n```\n\n----------------------------------------\n\nTITLE: Generate Zebra configuration file\nDESCRIPTION: This command generates a default configuration file for Zebra, which can then be modified to enable the Elasticsearch integration.  The configuration file includes sections for network settings and elasticsearch credentials. The file is generated at the path `~/.config/zebrad.toml`.\nSOURCE: https://github.com/zcashfoundation/zebra/blob/main/book/src/user/elasticsearch.md#_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\nzebrad generate -o ~/.config/zebrad.toml\n```\n\n----------------------------------------\n\nTITLE: Blockchain Data Serialization with C++ for Storage\nDESCRIPTION: This snippet demonstrates serialization of blockchain block data in C++ using Protocol Buffers for efficient storage and transmission. It assumes dependencies on protobuf library, takes block objects, and produces serialized byte arrays.\nSOURCE: https://github.com/zcashfoundation/zebra/blob/main/zebra-test/src/vectors/block-main-1-687-107.txt#_snippet_3\n\nLANGUAGE: C++\nCODE:\n```\n#include \"block.pb.h\"\n\nstd::string serializeBlock(const Block& block) {\n    BlockProto proto;\n    proto.set_promised_id(block.promised_id());\n    proto.set_previous_hash(block.previous_hash());\n    // ... set other fields\n    std::string output;\n    proto.SerializeToString(&output);\n    return output;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Multi-threaded RPC Server in Zebra TOML\nDESCRIPTION: This TOML configuration snippet enables multi-threaded RPC server requests in Zebra. By setting `parallel_cpu_threads` to 0, the server uses an isolated thread pool for handling requests, potentially improving RPC performance. Note that activating this feature disables port conflict detection for the RPC server.\nSOURCE: https://github.com/zcashfoundation/zebra/blob/main/CHANGELOG.md#_snippet_2\n\nLANGUAGE: TOML\nCODE:\n```\n[rpc]\nparallel_cpu_threads = 0\n\n```\n\n----------------------------------------\n\nTITLE: Raw Zcash Block Data in Hexadecimal Format\nDESCRIPTION: A complete hexadecimal representation of a Zcash block, containing header information, transaction data, and blockchain metadata. This raw format is typically used for direct blockchain interaction, network transmission, or debugging purposes.\nSOURCE: https://github.com/zcashfoundation/zebra/blob/main/zebra-test/src/vectors/block-test-0-000-002.txt#_snippet_0\n\nLANGUAGE: hex\nCODE:\n```\n04000000238d665a062b9007836a7d8f968ba2f3847af5f542733389a952cf9b86795502d5b3ccfd5e7828c4b2d221bae3178c500e21d33399c39a2508a0a82d53c022580000000000000000000000000000000000000000000000000000000000000000898c1358ffff072000005b7d311fedc046109a4482bd0eccdf21a6089c99fce43633d03352530000fd400500282db5ba22a2c122aba42724a991196cd01cc2b7013318f691d61171db79202d2e5979b0b6d5692cd129eb37b7541ff51b7b2a840b45273f86d2509acfaa39183bb3850f9916ec8246ad9ee785462c9cda0ea202f12c7ccba8cc155096016a87a6fc40a6a44f5f3b309a868f30d9080b128c75234a6c3d019fb7fbe29708d01daaab84e4891a00d15ffdd9a598dd678899102265e2090a4b7b26ec55764febbfd1f5fe791aef8500619578359cb2abfb19844981b5c0e67e86b6549765bd638f3a701b0fc8a56d00c4efb87b55883f1d81012e5b02d44e10ec9bf620f20ad62ca549be934d11103f9142b3201ff31b7791c1636aaeadc512b2c0f801a64959300d5d526c2fc58e2838162659fe59168f2214b41d1ec963d543e2660ea630d031e2671c8c841fa9c1b58f7475bfe958724cf89c038d29306dc0043b93148ab95f6e99017ec5863db2f9130c48187bfd013924b34eaefd1db6b2818f4f6a604185fa774c2c069455c6eb195a5382403404c47db312b29b5d84e44c4a645f06ef7899f0b78962e95d5476bc989dcb9458c24733a435b151c9fb46c32cbebd3318cf3ed7310533cfa0b087d58c687505070858765968d1f7077f0e6dd75ebf15d74bb8c7466ef2f4974df537f5dd64097f4adf8b1cff61c00181ad26f94cca9c01960db31edc454c1650da4f4390b4aa0efd46c9ed527ed8bb068494285da2680993e8d355caf6a0bd42a4d681780db2312eef129aa76c6081ceff231311ea93fd65fb0b80df077c49ca69d8996b1ebcfd74bad793d7914b4748af45f31ad018dd12997bfcf809df3894bbd7a10cc585797915356389b744f71ee58ac25484b635fe12a1b20909c97edb1d7ae20b1ef1c776260ebab06e16a34c2789fb5555ddc954cc38f07ac551ac3b46c1370f4fa1ba22ac35d82134eaa0d3f3198eeef723030072214ede447893a03f706d389ea60ef8a81ff7e20ae920cb1a5219e93e1bd2058df6296dc8ba39e4d403199d2c209c3d6b3b2d462aecc04b0e248e7f1e9d204a1f6b7df51073ae2faab55be3353713743c5db40555bebda203a5c79fc3324cb8fb7629c9391931a1268c97fad6d6ab7ebc583330356372df8c5e9e885422c75ab956932351858452c5904a5aad3d9fd840e356abd580479d9a531cda6de08277008bb3a1bdf08604c1df0d8e8cd475cb455161bfe5d9710bc0dfac4214afeeed4bca6148b54241b8f4ab221502917f261705715c7388d9e91d3685a1f67c484a24b716912fe33a89ca7ebc3a5b77e6b36657c7e2b2e1e8b2b699690ca749339b7b2673fb1083496bbc753fdfc49ff6e921c5e35f27d9175afa7da3793d6a7ad5eb0ab8c9ee0e60a8ae438e3145cf64b5f6417625ca934b9d7acc150efa9b53618c15b4d8318be5de0855696d92ef2e018d97ebd24102e824bbd040aed958a51016a91661180e64932f2316b5ee55923263d19d293996118f511f22912e8c9c435af630099fc47b7c4ab581b7d760418314c0e6e814b3bbddb486517436d56ddc774701072cd77beada2cc94cad87f3d1cb83db4da05c2e141bc175bc8848e548c27584995333ef1d9eadd8d7f028cae60d5b0e9642db7245d388ff58c6a31556319a29c0dc14362b957b6220a428966d66d6c3339a12a503806de7dc4c4561bab6968245e41b27ae89fffbfd1bd2f4104d074f0f2b759576f9e16c0e2f73bedc7c0e0da97698e07ca1d729b113938a6b29c3b19d9b8225303f80d6dc0e39bec343ac9a2d23926ab414666e079e68745998ff73dacbe1645bd004dd06236f615f11d47e9b2d54cf8573d9a295bda88af4b2c6c603db0c0757485a543725b1cc04f7e9f38445ed875ec54317418600b4113600e137417e5d1fc333159a7e365d0101000000010000000000000000000000000000000000000000000000000000000000000000ffffffff03520103ffffffff02a086010000000000232102acce9f6c16986c525fd34759d851ef5b4b85b5019a57bd59747be0ef1ba62523aca86100000000000017a914ef775f1f997f122a062fff1a2d7443abd1f9c6428700000000\n```\n\n----------------------------------------\n\nTITLE: Zcash Transaction Hexadecimal Data\nDESCRIPTION: This snippet represents a complete Zcash transaction encoded as a hexadecimal string.  It includes transaction version, input/output details, script data, and other metadata necessary for Zcash network validation. No external dependencies, assumes a Zcash node can interpret raw transaction data.\nSOURCE: https://github.com/zcashfoundation/zebra/blob/main/zebra-test/src/vectors/block-test-0-280-000.txt#_snippet_0\n\nLANGUAGE: hex\nCODE:\n```\n04000000401689162e846bd8689cef63c48101ce2492ca24453be253e3d6541de6b410009afaeea8a44f1f634c1cf6925c0494bdcca95b07501621627fd859e88b5db5cefbc2f4300c01f0b7820d00e3347c8da4ee614674376cbc45359daa54f9b5493e553e825b58bc111f3500937faa7f5a52439087e33d01f984c4f1988f45e31cd5827eb84ee2860000fd4005004317d1a8a41c857e41051080f92dcbe723ffe9e11b8381a800174d04e0a141e5d77b19b1cb3af40b8813de1fe6a266f8598dfbb2ec26caeb01c5363055d12f018b561edc46e3b9ebe5ad60cb7d0de48f54d60c025db73b4888ccc352e1707b8ca5ef55a312b3b039083184df9113074b1162a372fbe39855580abdf4650f95b0ec055be20d72f20260353704f9f22d9576fe2cba0f675b4ff45947c3972f3061ea521c5e38fb4e00e2ba1b99820f10ac3fc2a79575404d289f3027fe160eae5153a384df86f1d2c266e7e2c6159f355229206affbca0617cf71e8ee50bb66b50559b2c79ffdb2f63c1f7c518ec71e6e7244c596294bb3699bbe1b5016435c2ad9875672c96a18dd1c94d917b0cf25da411fa50a852103cc9608eb4a7513c5a326097ff12871710132642ebaa47ca5c62c06cb46669e2245d82b42a640eeeba155d43bb8e73fe65aee4b59bd978313200b6bba095b438dfe56e04a16756a3ba5071ff4a9f038be859e8d7263f8b8ce385c77d503a512adc68350e8af79aa31f7e15c012b90072fea702cd763d1c1335855d7490198b6d6659b67372ce665e61617a04ee0e665b3a6b99c5897a00f17adb4b965913938dd5b72a01adb63f30076d939d458deb2e1aa5f24c5ec6cc2392d56a9b736731fe5203bc299ff875b7301a43ad543bc6debe9ad53579325aad3bea5856bc61d7dc1500e2355c83235187348b10a78b3a934e526cf451c909aa8523b6e59f97b90042a9949fb07d49735f5aa83734af6df9600881f014542154411fc918ebaa696a432f6227c017c4e136c2e64fdebd265732577da410076d9a89c5c90f2c729fa10a8f6bdc2ab03136e70a0e6525e50e0aafbec15ae258b7bd9c05ef49d409f823643f4093b958f1ed171603e46648ce291e17244247d0a61650abe377963c4501513a7f76ef5bfece840082570b9fe86b3dd95482ae013b7fccbb0d2a9ef7242fa78efce60eff4521390356e965df2bac7b6e6e025cbf7d80dff0fb6a00679fd0f3974b4844dce78a15139cf789632a5d697543438276aed555dadf072b077d3a07c6176a1386fce5bfc5f66171ac011362ed1059a57e9489e798d3cf156d0468fd9a0c66b2ade41ee1b4744b8d58eec649f63e8962fc0b0a647d30f7292955e16f68773d735c8ad67dfcbc3af3aefea79c12a06dbeaf6c19bdeb2da68ab1dd762b69c93fb9f05f1496a0aae8ffdff42bd693ab46d44abcee7dac9f21d2e7aa8fb5cb4de433e49c684606f9cd15b3704a2a4b6e3901ec6ec7988f0609564c68c5fe4356949013fc63442bf94653fd6e88b2f0ecfe56b8ec1b61c93d18e4822015b80f194674e91f5c4033172e3d287c15523223c3d85ebd21e4c746a1d113b31e849a8a8c1fdb9de871536ee54eeba771f9d508f62d47d3314702e91fcd0c80e661946cd1e4cc17da2bd9eedfd53823c78ef0fa54c23369256283c1e63c30ef82f5f35e0c672b7590cccd08c671b29eab30a5e1eeea8faeb9131b2162a6517011801702017d46ab0da1ce7ef9310f88c2edb2da271b34e700fb1bbe8242ab31f671040f9031b19dc9402f3115127685b5fcaa3301957dbc151ee0b213911a2ddb69a7a9ef55bce69687f6fc8e35ce47ce91e33dc3d6b6e5c4a12e63b61859d0de31061f55251a8951633d8cf27b15ad18327d4e5b3d0313e134dfaa4a0bd1a1fad1b6cc42d706a621b80fbf064e68be60dce9bdffb2741199d3302ae4b1d7c9b00bf7d4bbd7cc02c6c3d66261f2af2b3cc6c2ec29200af2f2f1de143195163e00b6fab4a6b893a5ea1614255901976d1c9947cd5405eb915f6b7dcf41f023b934beea10cc14a439fbe235e959b9339e3690ffd0e33e8e72a67a66f3e1866eadcad472c78f95ff9fcc93010400008085202f89010000000000000000000000000000000000000000000000000000000000000000ffffffff0603c045040101ffffffff0200ca9a3b000000001976a914e3618ddab5d2f78a090297c8f2152e15e3a3e11588ac80b2e60e0000000017a9142a71f51b268f74eb3ee5631090589bbf6239bc0c8700000000000000000000000000000000000000\n```\n\n----------------------------------------\n\nTITLE: Relevant Chain Iterator in Rust\nDESCRIPTION: Implementation of an iterator for accessing a chain of blocks starting from a specific hash, used for contextual validation and providing access to the relevant block history.\nSOURCE: https://github.com/zcashfoundation/zebra/blob/main/book/src/dev/rfcs/0005-state-updates.md#_snippet_18\n\nLANGUAGE: rust\nCODE:\n```\nimpl StateService {\n    /// Return an iterator over the relevant chain of the block identified by\n    /// `hash`.\n    ///\n    /// The block identified by `hash` is included in the chain of blocks yielded\n    /// by the iterator.\n    pub fn chain(&self, hash: block::Hash) -> Iter<'_> { ... }\n}\n\nimpl Iterator for Iter<'_>  {\n    type Item = Arc<Block>;\n    ...\n}\nimpl ExactSizeIterator for Iter<'_> { ... }\nimpl FusedIterator for Iter<'_> {}\n```\n\n----------------------------------------\n\nTITLE: Raw Zcash Transaction Data in Hexadecimal Format\nDESCRIPTION: This snippet contains raw hexadecimal data representing Zcash blockchain transactions. It includes transaction inputs with signature scripts, outputs, and other transaction components encoded in the Zcash transaction format.\nSOURCE: https://github.com/zcashfoundation/zebra/blob/main/zebra-test/src/vectors/block-main-0-419-199.txt#_snippet_0\n\nLANGUAGE: hex\nCODE:\n```\\n```\n\n----------------------------------------\n\nTITLE: Bitcoin Transaction Input Data in Hex Format\nDESCRIPTION: Raw Bitcoin transaction input data containing transaction IDs, script signatures with ECDSA signatures, and public keys. Each input references a previous transaction output and includes cryptographic proof of ownership.\nSOURCE: https://github.com/zcashfoundation/zebra/blob/main/zebra-test/src/vectors/block-main-0-903-000.txt#_snippet_1\n\nLANGUAGE: hex\nCODE:\n```\na0b552f9353daabb784850fe335ceaac68b8e8c62e9014388e41d28b9ffbcbffffffffed4ac301ad3c0a945d04763fb859ff8717f26930f62c138a50ce04a5d0d548b5000000006a473044022070edf68da0328dda8ff3cc9e776377f4d723d79375849ff44e43887b17d7fa9e02205351431ae5038fcb17b57614753ee21b43ace293259ae05106a8bf3c233de9d00121038dae9d7422d2b7e193e198811304368364995bbfd689ed1fcd5003921c253011ffffffff2fcf8c1bf363bfe2b1f0c239a5c015342b382f97368030e4827085cdf079f58b000000006b483045022100da05de2079e1b6f8f5f162b961ccc88f52f2c6bd567bc59d14a71cb60127414902202de9008100823973c4a301011502308ece154094fc1d721a5ff0080b5a267d030121036b899959f1cfc893fda691ec56c9fbd284e59ddf3f5f591dbfd6844baa76d32bffffffff\n```\n\n----------------------------------------\n\nTITLE: Performing Basic Non-Contextual Transaction Checks\nDESCRIPTION: The `CheckTransaction` function, and specifically `CheckTransactionWithoutProofVerification` when called without proof verification, performs numerous basic checks on a transaction independent of the blockchain state. This includes verifying the coinbase status, checking for duplicate inputs or nullifiers within the transaction, and validating structural requirements like empty inputs/outputs necessitating shielded components.\nSOURCE: https://github.com/zcashfoundation/zebra/blob/main/book/src/dev/rfcs/drafts/data-flow-2020-07-22.md#_snippet_3\n\nLANGUAGE: C++\nCODE:\n```\n// Called by CheckBlock for each transaction\nCheckTransaction(tx, state, fAllowEmptyShielded);\n// Located at https://github.com/zcash/zcash/blob/ab2b7c0969391d8a57d90d008665da02f3f618e7/src/main.cpp#L1056\n\n// CheckTransaction calls:\nCheckTransactionWithoutProofVerification(tx, state, verifier == ProofVerifier::Disabled, fAllowEmptyShielded);\n// Located at https://github.com/zcash/zcash/blob/ab2b7c0969391d8a57d90d008665da02f3f618e7/src/main.cpp#L1078\n```\n\n----------------------------------------\n\nTITLE: Upgrading ECC Dependencies - cargo upgrade\nDESCRIPTION: This command upgrades specified ECC dependency versions in the Zebra project.  It utilizes `cargo upgrade` to update the dependency versions listed after the `-p` flag. The `--incompatible` flag ensures that potentially breaking changes are included. The command requires `cargo upgrade` and `cargo edit` to be installed. The output is the upgraded versions in the `Cargo.toml` file.\nSOURCE: https://github.com/zcashfoundation/zebra/blob/main/book/src/dev/ecc-updates.md#_snippet_0\n\nLANGUAGE: Rust\nCODE:\n```\ncargo upgrade --incompatible -p bridgetree -p incrementalmerkletree -p orchard -p zcash_primitives -p zcash_proofs -p zcash_address -p zcash_encoding -p zcash_note_encryption -p zcash_script\n```\n\n----------------------------------------\n\nTITLE: Loading Zebra Configuration\nDESCRIPTION: Logs illustrating Zebra's initial loading of configuration settings from its config file. It shows the parsed structure and values for critical parameters like checkpoint sync, network type, listening addresses, initial peers, peerset size, state cache directory, and RPC listener.\nSOURCE: https://github.com/zcashfoundation/zebra/blob/main/book/src/user/startup.md#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nzebrad::commands::start: Starting zebrad\nzebrad::commands::start: config=ZebradConfig {\n  consensus: Config { checkpoint_sync: true, ... },\n  network: Config {\n    listen_addr: 127.0.0.1:8233,\n    network: Mainnet,\n    initial_mainnet_peers: {\n      \"dnsseed.z.cash:8233\",\n      \"mainnet.is.yolo.money:8233\",\n      \"mainnet.seeder.zfnd.org:8233\",\n      \"dnsseed.str4d.xyz:8233\"\n    },\n    peerset_initial_target_size: 25, ...\n  },\n  state: Config { cache_dir: \"/home/user/.cache/state/v24/mainnet\", ... },\n  rpc: Config { listen_addr: Some(127.0.0.1:8232) }, ...\n}\n```\n\n----------------------------------------\n\nTITLE: Handling SQLite Dependencies for Zebra's Tor Feature (Shell)\nDESCRIPTION: This guidance addresses potential linker errors related to missing `libsqlite3` when building Zebra with the optional Tor feature. It recommends installing `libsqlite3` or following Arti instructions and provides alternative commands to build Zebra with all features enabled, ensuring proper dependency resolution.\nSOURCE: https://github.com/zcashfoundation/zebra/blob/main/book/src/user/install.md#_snippet_9\n\nLANGUAGE: console\nCODE:\n```\ncargo build\ncargo build -p zebrad --all-features\n```\n\n----------------------------------------\n\nTITLE: Discovering Initial Peers\nDESCRIPTION: Logs showing the initial steps of network initialization, including attempting to open the listening port specified in the configuration. It also logs the process of resolving IP addresses from DNS seeders and limiting the potential initial peer list to the configured target size.\nSOURCE: https://github.com/zcashfoundation/zebra/blob/main/book/src/user/startup.md#_snippet_2\n\nLANGUAGE: text\nCODE:\n```\nzebrad::commands::start: initializing network\nopen_listener{addr=127.0.0.1:8233}: zebra_network::peer_set::initialize: Trying to open Zcash protocol endpoint at 127.0.0.1:8233...\nopen_listener{addr=127.0.0.1:8233}: zebra_network::peer_set::initialize: Opened Zcash protocol endpoint at 127.0.0.1:8233\nzebra_network::address_book_updater: starting the address book updater\nadd_initial_peers: zebra_network::config: resolved seed peer IP addresses seed=\"mainnet.seeder.zfnd.org:8233\" remote_ip_count=25\n...\nadd_initial_peers: zebra_network::peer_set::initialize: limiting the initial peers list from 112 to 25\n```\n\n----------------------------------------\n\nTITLE: Finalizing Block Processing and Chain Activation\nDESCRIPTION: After successful validation, `ProcessNewBlock` performs final steps. It calls `CheckBlockIndex` to verify the consistency of the block index database and then `ActivateBestChain` to potentially switch the node's main chain to the one including the new block if it extends the current best chain or becomes a better chain.\nSOURCE: https://github.com/zcashfoundation/zebra/blob/main/book/src/dev/rfcs/drafts/data-flow-2020-07-22.md#_snippet_10\n\nLANGUAGE: C++\nCODE:\n```\n// Called by ProcessNewBlock after validation\nCheckBlockIndex(chainparams);\n// Located at https://github.com/zcash/zcash/blob/ab2b7c0969391d8a57d90d008665da02f3f618e7/src/main.cpp#L5125\n\n// Called by ProcessNewBlock after CheckBlockIndex\nActivateBestChain(state, chainparams, pblock);\n// Located at https://github.com/zcash/zcash/blob/ab2b7c0969391d8a57d90d008665da02f3f618e7/src/main.cpp#L3513\n```\n\n----------------------------------------\n\nTITLE: Running tokio-console\nDESCRIPTION: Simple command to start tokio-console which will automatically connect to a running zebrad instance with default configuration settings.\nSOURCE: https://github.com/zcashfoundation/zebra/blob/main/book/src/dev/tokio-console.md#_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\ntokio-console\n```\n\n----------------------------------------\n\nTITLE: Using Unused Imports for rustdoc Links in Rust\nDESCRIPTION: Demonstrates how to add an `#[allow(unused_imports)]` attribute to an import statement solely for the purpose of making a type available for referencing via a simple `rustdoc` link (e.g., [`LinkedList`]) in doc comments within the same module, even if the type isn't used in the code itself.\nSOURCE: https://github.com/zcashfoundation/zebra/blob/main/book/src/dev/mass-renames.md#_snippet_6\n\nLANGUAGE: Rust\nCODE:\n```\n// For rustdoc\n#[allow(unused_imports)]\nuse std::collections::LinkedList;\n\n//! Link to [`LinkedList`].\nstruct Type;\n```\n\n----------------------------------------\n\nTITLE: Managing GitHub Actions Cache Using Shell Commands\nDESCRIPTION: This snippet demonstrates how to list and delete caches in GitHub Actions repositories using GitHub CLI commands. The first command queries all caches for the Zebra repository, showing cache details in JSON format. The second command deletes a cache by its unique ID. These commands require the GitHub CLI (gh) installed and authenticated and are useful for resolving disk space and cache-related CI errors.\nSOURCE: https://github.com/zcashfoundation/zebra/blob/main/book/src/dev/continuous-integration.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\ngh api -H \"Accept: application/vnd.github+json\" repos/ZcashFoundation/Zebra/actions/caches\n```\n\nLANGUAGE: Shell\nCODE:\n```\ngh api --method DELETE -H \"Accept: application/vnd.github+json\" /repos/ZcashFoundation/Zebra/actions/caches/<id>\n```\n\n----------------------------------------\n\nTITLE: Querying Raw Scan Results with ldb (Bash)\nDESCRIPTION: Uses the `ldb` tool to scan and display raw data from the `sapling_tx_ids` column family within the `zebra-scanner` RocksDB database. Requires specifying the database path (`--db`) and the target column family (`--column_family`). The `--hex` flag displays keys and values in hexadecimal, and `scan` iterates through the entries. The `--secondary_path=` argument is necessary when opening a primary DB directly.\nSOURCE: https://github.com/zcashfoundation/zebra/blob/main/book/src/user/shielded-scan.md#_snippet_4\n\nLANGUAGE: Bash\nCODE:\n```\nldb --db=\"$HOME/.cache/zebra/private-scan/v1/mainnet\" --secondary_path= --column_family=sapling_tx_ids --hex scan\n```\n\n----------------------------------------\n\nTITLE: Run Elasticsearch\nDESCRIPTION: This command executes the Elasticsearch binary, initiating the database server. It's a prerequisite for indexing blockchain data from Zebra. The first time Elasticsearch runs, it generates and displays an elastic password and Kibana enrollment token.\nSOURCE: https://github.com/zcashfoundation/zebra/blob/main/book/src/user/elasticsearch.md#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n./bin/elasticsearch\n```\n\n----------------------------------------\n\nTITLE: Applying Renames and Formatting in sed Review Setup in Shell\nDESCRIPTION: Shows the commands to navigate into the base checkout (`zebra-sed`) and apply the exact `sed` rename script used in the PR, followed by running `cargo fmt --all` to standardize formatting. This prepares the base checkout for comparison with the PR branch checkout.\nSOURCE: https://github.com/zcashfoundation/zebra/blob/main/book/src/dev/mass-renames.md#_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\ncd ../zebra-sed\n# run the scripts in the PR or commit message\ngit ls-tree --full-tree -r --name-only HEAD | \\\ngrep -v -e 'path-to-skip' -e 'other-path-to-skip' | \\\nxargs sed -i -e 's/OldName/NewName/g' -e 's/OtherOldName/OtherNewName/g'\ncargo fmt --all\n```\n\n----------------------------------------\n\nTITLE: Installing Redis for s-nomp\nDESCRIPTION: This block of shell commands installs and starts Redis, a dependency for `s-nomp`. It first installs `lsb-release`, then adds the Redis package repository. Afterwards, Redis is installed and finally, the redis-server is started. It is dependent on a Debian/Ubuntu based system.\nSOURCE: https://github.com/zcashfoundation/zebra/blob/main/book/src/user/mining-testnet-s-nomp.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nsudo apt install lsb-release\ncurl -fsSL https://packages.redis.io/gpg | sudo gpg --dearmor -o /usr/share/keyrings/redis-archive-keyring.gpg\n\necho \"deb [signed-by=/usr/share/keyrings/redis-archive-keyring.gpg] https://packages.redis.io/deb $(lsb_release -cs) main\" | sudo tee /etc/apt/sources.list.d/redis.list\n\nsudo apt-get update\nsudo apt-get install redis\nredis-server\n```\n\n----------------------------------------\n\nTITLE: State management and caching configuration in Shell scripts\nDESCRIPTION: These snippets define CI workflow steps and scripts for managing cached state files and disk images, with commands for updating, verifying, and creating state caches. They facilitate faster sync and stable testing environments by reusing state data across builds, with versions and file references carefully managed.\nSOURCE: https://github.com/zcashfoundation/zebra/blob/main/CHANGELOG.md#_snippet_4\n\nLANGUAGE: Shell\nCODE:\n```\n - name: Create cached state disk image\n    run: |\n      ./scripts/create_state_cache.sh --version 1.0.0-beta9\n\n - name: Verify cached state version\n    run: |\n      ./scripts/verify_state_version.sh --expected 1.0.0-beta9\n\n - name: Manage cached state files\n    run: |\n      ./scripts/update_cached_state.sh --sync --version 1.0.0-beta9\n\n```\n\n----------------------------------------\n\nTITLE: Publishing a New Placeholder Crate and Setting Owners - Shell\nDESCRIPTION: This sequence of shell commands initializes a new Rust crate, navigates into its directory, publishes it to crates.io using cargo-release with verbose output, and assigns multiple owners to the crate. It assumes 'cargo', 'cargo-release', and a valid cargo login session. The package name ('new-crate-name') should be replaced with the actual desired crate name. Only users with appropriate permission and installed dependencies can successfully execute these commands.\nSOURCE: https://github.com/zcashfoundation/zebra/blob/main/book/src/dev/crate-owners.md#_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\ncargo new new-crate-name\ncd new-crate-name\ncargo release publish --verbose --package new-crate-name --execute\ncargo owner --add oxarbitrage\ncargo owner --add conradoplg\ncargo owner --add github:zcashfoundation:owners\n```\n\n----------------------------------------\n\nTITLE: Installing RocksDB Tools for Shielded Scan Queries (Shell)\nDESCRIPTION: This instructions mention installing `rocksdb-tools` or `rocksdb` packages to obtain the `ldb` binary, which is essential for querying the scanner database used in Zebra’s shielded scan feature. It is targeted at expert users who need to inspect or analyze the Zebra database.\nSOURCE: https://github.com/zcashfoundation/zebra/blob/main/book/src/user/install.md#_snippet_8\n\n\n\n----------------------------------------\n\nTITLE: Kibana Configuration URL\nDESCRIPTION: This code snippet provides the URL that Kibana generates after it is run for the first time. The URL contains a code to access the Kibana configuration page. The elastic password and the Kibana enrollment token are required to complete the configuration.\nSOURCE: https://github.com/zcashfoundation/zebra/blob/main/book/src/user/elasticsearch.md#_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nKibana has not been configured.\n    \nGo to http://localhost:5601/?code=405316 to get started.\n```\n\n----------------------------------------\n\nTITLE: Logging in to crates.io with Cargo - Shell\nDESCRIPTION: This shell command logs the user into crates.io using Cargo. The user is prompted to enter a token, which can be generated through the crates.io website. A saved token allows authenticated publishing and owner management actions from the terminal. Prerequisite: cargo utility must be installed, and the user should have generated a valid crates.io API token.\nSOURCE: https://github.com/zcashfoundation/zebra/blob/main/book/src/dev/crate-owners.md#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n$ cargo login\nplease paste the token found on https://crates.io/me below\n...\n       Login token for `crates.io` saved\n```\n\n----------------------------------------\n\nTITLE: Copying Zebra Configuration File (Shell)\nDESCRIPTION: Copies the default Zebra configuration file (`zebrad.toml`) from the user's home directory config path to a new file (`zebrad-copy-target.toml`) in the current directory. This is a preparatory step for creating a new state cache with the `copy-state` command, particularly useful for recovery scenarios after a chain fork.\nSOURCE: https://github.com/zcashfoundation/zebra/blob/main/CHANGELOG.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncp ~/.config/zebrad.toml ./zebrad-copy-target.toml\n```\n\n----------------------------------------\n\nTITLE: Installing rocksdb-tools (ldb) on Debian/Ubuntu (Bash)\nDESCRIPTION: Installs the `rocksdb-tools` package, which includes the `ldb` utility, using the `apt` package manager on Debian-based Linux distributions like Ubuntu. This tool is required for querying the raw scanner results database.\nSOURCE: https://github.com/zcashfoundation/zebra/blob/main/book/src/user/shielded-scan.md#_snippet_3\n\nLANGUAGE: Bash\nCODE:\n```\nsudo apt install rocksdb-tools\n```\n\n----------------------------------------\n\nTITLE: ADR Metadata Block\nDESCRIPTION: This YAML-like block defines the required metadata for an ADR. It includes the status of the decision (proposed, rejected, accepted, etc.), the date of the last update, optional dependencies on other ADRs, and a link to the contextual issue or story.\nSOURCE: https://github.com/zcashfoundation/zebra/blob/main/docs/decisions/template.md#_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\nstatus: {[proposed | rejected | accepted | deprecated | … | superseded by [ADR-NAME](adr-file-name.md)]}\ndate: {YYYY-MM-DD when the decision was last updated}\nbuilds-on: {[Short Title](2021-05-15-short-title.md)}\nstory: {description or link to contextual issue}\n```\n\n----------------------------------------\n\nTITLE: Installing dependencies for CPU/GPU miner\nDESCRIPTION: This installs the development libraries needed to compile a CPU or GPU miner. It's for a statically compiled `boost` and `icu`, and `cmake` for Debian/Ubuntu.  For Arch Linux, it installs cmake, boost, and icu.\nSOURCE: https://github.com/zcashfoundation/zebra/blob/main/book/src/user/mining-testnet-s-nomp.md#_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\nsudo pacman -S cmake boost icu\n```\n\n----------------------------------------\n\nTITLE: Install nvm and Python 3.10\nDESCRIPTION: This command installs nvm, Python 3.10 and virtualenv. This assumes the user is on Arch Linux.\nSOURCE: https://github.com/zcashfoundation/zebra/blob/main/book/src/user/mining-testnet-s-nomp.md#_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\nparu -S python310 nvm\nsudo pacman -S python-virtualenv\n```\n\n----------------------------------------\n\nTITLE: Install `s-nomp` on Arch Linux\nDESCRIPTION: This block of code details how to install s-nomp on Arch Linux. It involves cloning the repository, checking out the zebra-mining branch to include necessary fixes, setting up a Python virtual environment, using NVM to install a specific node version and installing dependencies with npm.\nSOURCE: https://github.com/zcashfoundation/zebra/blob/main/book/src/user/mining-testnet-s-nomp.md#_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\ngit clone https://github.com/ZcashFoundation/s-nomp && cd s-nomp\n\nunset npm_config_prefix\nsource /usr/share/nvm/init-nvm.sh\nnvm install 10\nnvm use 10\n\nvirtualenv -p 3.10 s-nomp\nsource s-nomp/bin/activate\n\nnpm update\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Creating a New Decision Record via Template (Shell)\nDESCRIPTION: This snippet demonstrates how to create a new architectural decision record (ADR) using a template file. It utilizes the `cp` command in the shell to copy the template file, renaming the new file according to a specific naming convention. This process is crucial for establishing a consistent structure for documenting architectural decisions. The `template.md` file acts as a starting point, and `NNNN-title-with-dashes.md` is the desired filename.\nSOURCE: https://github.com/zcashfoundation/zebra/blob/main/docs/decisions/README.md#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ncp template.md NNNN-title-with-dashes.md\n```\n\n----------------------------------------\n\nTITLE: Building Zebra with tokio-console Support\nDESCRIPTION: Command to build zebrad with tokio-console support enabled. This requires setting the RUSTFLAGS environment variable with the tokio_unstable configuration flag and using specific cargo features.\nSOURCE: https://github.com/zcashfoundation/zebra/blob/main/book/src/dev/tokio-console.md#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nRUSTFLAGS=\"--cfg tokio_unstable\" cargo build --no-default-features --features=\"tokio-console\" --bin zebrad\n```\n\n----------------------------------------\n\nTITLE: Start Redis on Arch Linux\nDESCRIPTION: This command starts the Redis service. This assumes the user is on Arch Linux.\nSOURCE: https://github.com/zcashfoundation/zebra/blob/main/book/src/user/mining-testnet-s-nomp.md#_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\nsudo systemctl start redis\n```\n\n----------------------------------------\n\nTITLE: Changing Owners of zcash_script Crate - Shell\nDESCRIPTION: This shell command sequence clones the 'zcash_script' repository, navigates to its directory, and manages crate ownership using cargo owner. It invites a new individual owner and removes an existing one for the zcash_script crate. Requires 'git', 'cargo', and authenticated user. Only users with the necessary permissions on crates.io can make these ownership changes.\nSOURCE: https://github.com/zcashfoundation/zebra/blob/main/book/src/dev/crate-owners.md#_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\n$ git clone https://github.com/ZcashFoundation/zcash_script\n$ cd zcash_script\n$ cargo owner --add oxarbitrage\n    Updating crates.io index\n       Owner user oxarbitrage has been invited to be an owner of crate zcash_script\n$ cargo owner --remove dconnolly\n    Updating crates.io index\n       Owner removing [\"dconnolly\"] from crate zcash_script\n```\n\n----------------------------------------\n\nTITLE: Performing Interactive Renames with fastmod in Shell\nDESCRIPTION: Illustrates using `fastmod` for interactive find-and-replace, allowing the user to accept or reject each potential replacement. The `--hidden` flag includes hidden files and directories, and `--fixed-strings` treats the patterns as literal strings rather than regular expressions.\nSOURCE: https://github.com/zcashfoundation/zebra/blob/main/book/src/dev/mass-renames.md#_snippet_4\n\nLANGUAGE: Shell\nCODE:\n```\nfastmod --hidden --fixed-strings \"OldName\" \"NewName\" [paths to change]\n```\n\n----------------------------------------\n\nTITLE: Setting Up Review Environment for sed Changes in Shell\nDESCRIPTION: Provides shell commands to set up a review environment for verifying mass renames done with `sed`. It uses `git worktree` to create separate checkouts of the main branch (or base commit) and the PR branch, allowing for easy comparison after applying the `sed` script to the base checkout.\nSOURCE: https://github.com/zcashfoundation/zebra/blob/main/book/src/dev/mass-renames.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\ncd zebra\ngit fetch --all\n# clear the checkout so we can use main elsewhere\ngit checkout main^\n# Use the base branch or commit for the PR, which is usually main\ngit worktree add ../zebra-sed main\ngit worktree add ../zebra-pr origin/pr-branch-name\n```\n\n----------------------------------------\n\nTITLE: Creating and Sending a Transaction in Go for Blockchain\nDESCRIPTION: This code snippet illustrates how to create a new blockchain transaction in Go, including setting sender and receiver addresses, amount, and digital signature. It depends on custom transaction and cryptography packages, producing a transaction object ready for broadcast in the network.\nSOURCE: https://github.com/zcashfoundation/zebra/blob/main/zebra-test/src/vectors/block-main-1-687-107.txt#_snippet_2\n\nLANGUAGE: Go\nCODE:\n```\npackage main\n\nimport (\n    \"fmt\"\n    \"myproject/crypto\"\n    \"myproject/transaction\"\n)\n\nfunc createTransaction(sender, receiver string, amount float64, privateKey []byte) *transaction.Transaction {\n    tx := &transaction.Transaction{\n        From: sender,\n        To: receiver,\n        Amount: amount,\n    }\n    signature := crypto.Sign(tx, privateKey)\n    tx.Signature = signature\n    return tx\n}\n\nfunc main() {\n    tx := createTransaction(\"addr1\", \"addr2\", 10.5, []byte(\"privatekey\"))\n    fmt.Printf(\"Created transaction: %+v\", tx)\n}\n```\n\n----------------------------------------\n\nTITLE: Performing Universal Renames with sed in Shell\nDESCRIPTION: Demonstrates using `sed` via a shell pipeline to perform universal find-and-replace operations on files tracked by Git. It applies multiple substitutions (`-e 's/OldName/NewName/g'`) simultaneously across the entire repository. The second variation shows how to exclude specific paths using `grep -v`.\nSOURCE: https://github.com/zcashfoundation/zebra/blob/main/book/src/dev/mass-renames.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\ngit ls-tree --full-tree -r --name-only HEAD | \\\nxargs sed -i -e 's/OldName/NewName/g' -e 's/OtherOldName/OtherNewName/g'\n```\n\nLANGUAGE: Shell\nCODE:\n```\ngit ls-tree --full-tree -r --name-only HEAD | \\\ngrep -v -e 'path-to-skip' -e 'other-path-to-skip' | \\\nxargs sed -i -e 's/OldName/NewName/g' -e 's/OtherOldName/OtherNewName/g'\n```\n\n----------------------------------------\n\nTITLE: Initializing Blockchain Data Processing in Python\nDESCRIPTION: This snippet sets up the environment for processing blockchain data, including loading necessary modules, preparing data structures, and establishing initial state for the node. Dependencies include cryptographic libraries and network interfaces.\nSOURCE: https://github.com/zcashfoundation/zebra/blob/main/zebra-test/src/vectors/block-test-1-842-468.txt#_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\\n```\n\n----------------------------------------\n\nTITLE: Comparing Renamed Checkouts with git diff in Shell\nDESCRIPTION: Presents the command to navigate up from the checkouts into the parent directory and use `git diff` to compare the two worktrees (`zebra-sed` and `zebra-pr`). If the renames were applied correctly and consistently, the diff should show no changes.\nSOURCE: https://github.com/zcashfoundation/zebra/blob/main/book/src/dev/mass-renames.md#_snippet_3\n\nLANGUAGE: Shell\nCODE:\n```\ncd ..\ngit diff zebra-sed zebra-pr\n```\n\n----------------------------------------\n\nTITLE: Proptest Failure Case Seed for Zcash JoinSplit Testing\nDESCRIPTION: A recorded seed for a proptest failure case involving JoinSplit and JoinSplitData structures with Groth16Proof in the Zebra Chain module. This seed ensures consistent reproduction of a specific test failure scenario.\nSOURCE: https://github.com/zcashfoundation/zebra/blob/main/zebra-state/proptest-regressions/service/check/tests/prop.txt#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\ncc 3b0fa74b6a4ffeb31638d5a38f832ffc972be3a66e390a2a88d8bcef2519d67c # shrinks to mut joinsplit = zebra_chain::sprout::joinsplit::JoinSplit<zebra_chain::primitives::proofs::groth16::Groth16Proof>, mut joinsplit_data = zebra_chain::transaction::joinsplit::JoinSplitData<zebra_chain::primitives::proofs::groth16::Groth16Proof>\n```\n\n----------------------------------------\n\nTITLE: Tracking proptest failure seeds with comments and specific cases\nDESCRIPTION: Configuration that saves the seeds of previously failing test cases to ensure they're re-run before generating new test cases. It includes two specific failure cases with their hexadecimal seeds and comments about what triggered the failures.\nSOURCE: https://github.com/zcashfoundation/zebra/blob/main/zebra-chain/proptest-regressions/serialization.txt#_snippet_0\n\nLANGUAGE: proptest\nCODE:\n```\ncc ddefa5145f08994fb873af028344fc03d656dcd1f9287fac71dfa98cbd6a5090 # shrinks to s = 65536\ncc c04b21f87727bdd1fd9eb7a1616104fd65fa617f507bb6e8163be6542ff2ed68 # shrinks to bytes = [253, 0, 0, 0, 0, 0, 0, 0, 0]\n```\n\n----------------------------------------\n\nTITLE: Disabling macOS Crash Reporter Dialogs (Shell)\nDESCRIPTION: This shell command disables the macOS Crash Reporter dialog box for the `com.apple.CrashReporter` process, preventing popups during tests that trigger panics. This is useful when running tests that are expected to cause crashes or panics. It modifies a system-wide preference.\nSOURCE: https://github.com/zcashfoundation/zebra/blob/main/book/src/user/troubleshooting.md#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ndefaults write com.apple.CrashReporter DialogType none\n```\n\n----------------------------------------\n\nTITLE: Proptest Seed for Network Peer Selection Failure Case 1 - Rust\nDESCRIPTION: This snippet captures a specific input seed that caused a failure in a property test for network peer selection. It includes a unique hash identifying the seed and the specific data structure (`peers` as a list of `MetaAddr`, `initial_candidates`, and `extra_candidates`) that triggered the issue. The proptest runner uses this exact input to reproduce the failure for regression testing.\nSOURCE: https://github.com/zcashfoundation/zebra/blob/main/zebra-network/proptest-regressions/peer_set/candidate_set/tests/prop.txt#_snippet_0\n\nLANGUAGE: Rust\nCODE:\n```\ncc e27ea62986a1ace4e16dde4b99d8ae8557a6b1e92e3f9a7c6aba0d7b179eb817 # shrinks to peers = [MetaAddr { addr: 0.0.0.0:0, services: NODE_NETWORK, last_seen: DateTime32 { timestamp: 1623572152, calendar: 2021-06-13T08:15:52Z }, last_connection_state: NeverAttemptedAlternate }, MetaAddr { addr: 0.0.0.0:0, services: NODE_NETWORK, last_seen: DateTime32 { timestamp: 1623572152, calendar: 2021-06-13T08:15:52Z }, last_connection_state: NeverAttemptedAlternate }, MetaAddr { addr: 0.0.0.0:1151, services: NODE_NETWORK, last_seen: DateTime32 { timestamp: 1623572152, calendar: 2021-06-13T08:15:52Z }, last_connection_state: NeverAttemptedAlternate }, MetaAddr { addr: 129.65.108.101:9019, services: NODE_NETWORK, last_seen: DateTime32 { timestamp: 1623572152, calendar: 2021-06-13T08:15:52Z }, last_connection_state: NeverAttemptedAlternate }, MetaAddr { addr: 95.68.199.21:46887, services: NODE_NETWORK, last_seen: DateTime32 { timestamp: 1623572152, calendar: 2021-06-13T08:15:52Z }, last_connection_state: NeverAttemptedAlternate }, MetaAddr { addr: 167.206.253.131:43927, services: NODE_NETWORK, last_seen: DateTime32 { timestamp: 1623572152, calendar: 2021-06-13T08:15:52Z }, last_connection_state: NeverAttemptedAlternate }, MetaAddr { addr: 160.138.155.239:63430, services: NODE_NETWORK, last_seen: DateTime32 { timestamp: 1623572152, calendar: 2021-06-13T08:15:52Z }, last_connection_state: NeverAttemptedAlternate }, MetaAddr { addr: [6a4e:a543:8c93:e074:8a2a:5cc4:96f8:ce95]:51071, services: NODE_NETWORK, last_seen: DateTime32 { timestamp: 1623572152, calendar: 2021-06-13T08:15:52Z }, last_connection_state: NeverAttemptedAlternate }], initial_candidates = 0, extra_candidates = 2\n```\n\n----------------------------------------\n\nTITLE: Javascript Function for Validating Blockchain Transactions\nDESCRIPTION: This code provides a JavaScript function to validate a blockchain transaction, including signature verification and balance checks. It requires cryptographic libraries such as 'crypto' and assumes the transaction object structure with signature and address data.\nSOURCE: https://github.com/zcashfoundation/zebra/blob/main/zebra-test/src/vectors/block-main-1-687-107.txt#_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\nfunction validateTransaction(transaction, publicKey) {\n    // Verify signature\n    const validSignature = crypto.verifySignature(transaction.data, transaction.signature, publicKey);\n    // Check balances\n    const senderBalance = getBalance(transaction.from);\n    if (!validSignature || senderBalance < transaction.amount) {\n        return false;\n    }\n    return true;\n}\n\n// Example usage\nconst isValid = validateTransaction(tx, senderPublicKey);\n```\n\n----------------------------------------\n\nTITLE: Analyzing Hexadecimal Transaction Data\nDESCRIPTION: This hexadecimal string represents a serialized Zcash transaction. It encompasses transaction version, input/output details, script data, and other essential parameters for blockchain operations. Careful parsing and interpretation are required to extract meaningful information.\nSOURCE: https://github.com/zcashfoundation/zebra/blob/main/zebra-test/src/vectors/block-main-0-000-202.txt#_snippet_0\n\nLANGUAGE: hex\nCODE:\n```\n04000000efaac18270e32193ed370edc5248fc82c2f10631a41bac03c250eca374360000c04ad19e73aa798345431eb39c14094cc1f3a12298a5a942e6a9aba7c2bc6ae0000000000000000000000000000000000000000000000000000000000000000637e1358f636391e980c0038000000000000000038000c990a000000000000000000000000000003fd4005018016942ceb483b769826e7b73d025677fc97e9cc27e3c42e720f087fe35ab55d8bdde092bbed994b9e03cc1aa721c81529abdaa715ac6d9caa0ae69f3a814a64ccf1002bae0bd9a937af745a7d471bbc1b368707de40405e84f50de73be22ad07d1d8636e833e1d5223edeb0699e6f0507f304aecaf4b91f04d4bbd8a32af52c262792edc5cb3016ee267412b2113a94234030cc0abad860c2ef674346c2a861220e5af07742b705b503afd9d5d77f2a9443d70772814e1424d4ab7d0d4d2ba04db67711f0b8f0de0de179708fdcf541301419ff080bed8b47fbe5f1431bee9c7d5c99f480541c7bcabbdea2a16f19eb9400dfcf6191d62598da800a2634e3fc75411fc9b2e104a442fa34df6e36712d119b21cc1cb0cd5bc0ea614c194f6b554176d9e8190f120ecb53904996acfdd6ce467ac5a710a75fc4b811b60a34f588e644524311cef3b282a97ea373472c05056a8c8264d56f905c065495ce29320b22bd0f6f140d4fee47d98cc4d018136c3faed8f133de56c272080dc135756f452bb249f640a9f02c1240c019a88409295b9f78ed8c6d94d172dd52b03e2a10be7776aa0add3fd049d27049e91df2c5aa48268a29c8dc06fd0bef5d7ea8c5900a64552243a1cec338d8607d64ea0e6f66d5cac9a719ff8f25fa40ce84367b6f5483bb1cb12dfa62d0453360da72fdaf201ab93979d7780005384997726e29afcbdfd0d233a46786d98e3edd210c3fdd23b0c57d41c235d5459347514343ffde132f2febf54fc918943d0a53a35ad6f31bd4f6aebe954b832776e75ef80fffca98c90405d5f29a4f71d3c4e00e6c6c722a0f6ba1214793ac03e88b4682a31a6508289e233065a6013b965e72ba48e5af9936c5ce783919242aece8c6f38cbb8e638a5a372e66021615abb9321e4a02f4cf9e07e4eb65ca8b6d3de9ef42d50eaf01ec9a3b039bcdd3403cb273f5b6f57595073109210df040bbf1cceee39d7f493828df317f0c6e5dc00025b173191c8b0986d437b385294ad013cdc83f8ffb267c0d9fa9e7d4bfb320a547e433654deffdb079700246ec9de9225b3b7a28d26691e2645dc718736a740a64afd48a287a79da4900a917daddfa730437efbd0b0bd3f8c44cfba53da5221e459b604b37b7bc9ea21315e220fad31772ac4754198eb6374dbdfdf9f70301f1bbfe05d0ebb48a1d108df04cd7dd430cb40de913ab0db41095b02ceada44a90e4bab2980102c85961bf4565bb469718370fd6ba461604fab289cdfd7f258741b32b3699dab5d06b85d7e6478d21efbf38425025c502024116d5729d560b378fe6649e01b38faca16eb07c1b8506418e67dd3bc885efebcf36a2a7df416e9f5346054c493e179f593bfda2a32d15898b26718f56a931a87c187ac383c78197ad577673cdd86e30348d096225beeabdfc2153f1e6297d9de425428ae0ebe7e7cb3867d6db623a7553e67255a750414d0dc0bdd6232bfb18fb39173a220665a55ea26b91e95741ec3f36f6771072bbb69290df67c8e22e89b1fa0860938bf3bb819978d24df3296cc98b19f5be85ce66e293885d94a16949bd530ed6181edeb3769fe9bd5ee1b4dc405a14e3e6294f31279ff7e1556ae199c02552f6fa55f9ba49145ed23f4d8a6f82f01d72a18e9860356a463aad1d493c1ac1329526e042904a5288d4e18cf4b12a55d801f89f1e4eaba7eeae1740e1c80621a60f65db9dd5d3f652de2746d983d59e534daf7cb1a9dadbf1da49c31bb7de24027e0e5d20574b5947710e78e2766ea7483f89bb356aeac08bd4e54d43cc12add3d76d20c19f9fa1ac695b6ef967e4bf878ba41136856f84545573bf750f5e0e371e0dd910a52ddd630115699625664dd8d1c763a21da19aaaf4c1f6c7b0101000000010000000000000000000000000000000000000000000000000000000000000000ffffffff2702ca0004637e135810000000000000000000000000000000000d2f6e6f64655374726174756d2f0000000002201d9a00000000002321028f26d5cd57e3817bf66095435d3996b608fc6e448af2bbd2361a0dac7879764eac488726000000000017a9147d46a730d31f97b1930d3368a967c309bd4d136a8700000000\n```\n\n----------------------------------------\n\nTITLE: Zcash Transaction Hex Data\nDESCRIPTION: This snippet shows the raw hexadecimal data for a Zcash transaction. The data is likely a serialized representation of the transaction's structure. This is often a starting point for parsing and understanding the details of the transaction, like the inputs, outputs, and any associated signatures.\nSOURCE: https://github.com/zcashfoundation/zebra/blob/main/zebra-test/src/vectors/block-main-0-903-000.txt#_snippet_0\n\nLANGUAGE: hex\nCODE:\n```\n040000005e0df8f48a743a77c8bb921d62942e00352940bcf463f418231b3b02000000004d95d0a16e4335f5936bc837dfeef851d5cc24af51d3204fb749b11eaa6a059b00000000000000000000000000000000000000000000000000000000000000004832105f4a95021c379ec35e00000000000000000000000000001d0000000000000000004004bc50fd400500456e36b5ab4123fded636adb48cd85992c8e48d10d45c7c26c08f786a063e67140611bb1c9af56675d11d49bbbe7922abe95e622c0a062079a1b51f382eb1220e1e2a78e737d0dc6622b0fc43fa377559da02e020dc939c7d47de9c132a095e2de2cb9a890189b541c0e4db22dcd7f41acf9b25ec538676ca4e38935960fbb5a1f294d2826c786a46de3a93261a56e713e8a11884dd0bf927003385f81756bb85244a2fa52d147046f9ee8de8141970049b3487befa231755a37e09438032662091acc1f6ba56a459d77709b28d13ec3e90dad7dff47278f254a21e2967a7f7e4610c495bfd038b01d34339a2e938fcb8823366207e7aa9b5f3d3511bf34d136ff5169fdae61781e39edf5e2393cc72b2adba614b6907611775983b8dcf8a69546c3eb1e53196d9584eecb8799875f730d2b203391f0d5b500bd5569bfefa495c2fd9b9497ba6f69de171c013c74d1016aedb595081ee3a3bbf3d5aa24f01234a5dc41e233da765e370d9da0d788734d30bc7ccaa8d5fdc4892e4ef53ce89a52cfc18d3369cf4f76fd00aa8be6f3418d9d80d07158f99d15742a03b336e99b100e1edc06dd6c82e1aaad8fee753495e56b8a1e11b931bab20dee9733c46046e9beb4749500c4f17e7b3e3c14132f0b362edb12e46ad9827409644a6ffe58071f2e2b3e607acd45ec90ffd7d0556aa231b2b99ee33caf6607a5f9a0f4f22c8dbefd0bb65e7c142f817bfec9a80f4325fb20a848c7c099379a02c1f56272317ed52f151cd5eaff97c69dc2d2c26d7d16bc7c9f16fbb81324abfc4de2d3146137ae828abb54c926fc96fe3f0a1aedf40e9c55056dec173479896d2f35a9e57a6ded1da926cb51954eeefe8541f85d988e04f7fac9b47724f8a5fa2b0a03fa747d57b1a1f243733355fb84336cd2570a38e679c13c6eda1347ec4b1712825a9921011e743c775178131c4e51a34e63c005da4d39fb9c1b6265b7168cc5c894e76463244f302d850e8cc024065aae02f6eb97676319a6c1383d386b4e1c1de10d16a86f52231e310144f1d70210cc2faae177f713e10b1222344c8b64112bbd238370cdef82cc79f66673280b05634ebc32f7f82849ca147b712ab93358df871baa22928689724ad6a591bc96cc1315302e8f102121ded39c8b6177337f94842f2bd754a941d935679804c5112b9c50ad83eefee291b7c7caf6dec211920d10710aaaa691f3f1996731245366ba5cb5587693f607c7fcf6bad1612b2ce431ccb71cee960eb3922da610f17da8a2f339fbb73f1377313c71d312335d6a8d10266beba5c53f45e6c321fc87657880f2d048cf50318ecf1e671a4c9504cb13716e2aa335d3a8168eb6260ce98ded757d35b2fcf6c0066b0736283e3891ce43ce7fb3059f8897a66757d620f8295ea697f6acd1012eb27c19afa34dccd8d16dc01edbb9443f3520f212b9565e62cee12dbcc411d449e315a9001435990e09d062103f515f9bfee350e654f651e9b526142eaf341c92c41111f5ccd62be467dc38ec798eedbfd07e017a27ba380837d51860c138cac9f03f3d4bfb4c2929b2a7f812b2a903c13f6594f3c5e879a6601b205d068988c4748a8563befa40af6962eba977ecf0cc1d06d6a43ff72280416c34066ef2de56ee3739ba2afe03b3bd091ce50ceb3af3757e5f76f9ea117f7de5e0095a89281b73cad7b5c2b0c02762259040309f73f307bdcc50546b601ba7cb3214e7b02c60e5a8eddf38239f91c223cd48a9ce1d02fed761de5e06cf3d604d03c4d6665444637dfd89214669cffe3a52a71801cc1f3e697c6a09cbd34c5b564957e56c7ea6b3fc6a7d11cb919f8acf6a4b902f81d777edeae2ffa818446d2dc48982182994ebf5468726e342736a1e363753140f0400008085202f89010000000000000000000000000000000000000000000000000000000000000000ffffffff1a0358c70d152f5669614254432f48656c6c6f20776f726c64212fffffffff02a477d01d000000001976a914fb8a6a4c11cb216ce21f9f371dfc9271a469bd6d88ac405973070000000017a9141d4bb379ddd4043ae86c8b96e7183784f9eddf4987000000000000000000000000000000000000000400008085202f890a14e57683c3de6c52d63e713b62916e030cc196e42bfd5e4bd75ff616a57a50711b0000006b48304502210089c321dbff057929ca58f5cc624a7be503d71bcc5abe74eefe81c5ba9835ac86022036333576457f3af56305941b644a2511a813696d0c33bda57a9f445d4d7223ed0121022da36b5bc2597ac8fcd027bc0c3f4938aed4d669cb85000d4f88e1f4c296408dffffffff14e57683c3de6c52d63e713b62916e030cc196e42bfd5e4bd75ff616a57a50711d0000006b483045022100f6f9d1d4459e5728b6ee4ff8e5b0c6bc6aff87cd2ac4e8a9a9e0784837c983aa02205c2a6781a4e5c7cff728f5afb02ce346331ce75b6858de58f287e0dccd392bbf01210258080d3a396eec5de96a2eb2c0ae592e878fc2c42dfa261d0ec52b923b9815beffffffff14e57683c3de6c52d63e713b62916e030cc196e42bfd5e4bd75ff616a57a5071450000006a473044022014099404124b32a47072999559e85a0a0ff7085235609a2aefa461865585a21f022062f079d05b504fae1a7e0ee05fce8b2824b68ee9f8a00b4fca54f0c9c41ebee901210289f142dad45694ce9b2d75b79e813d9375ce42f804bd800ce2ab85807bc296e0ffffffff14e57683c3de6c52d63e713b62916e030cc196e42bfd5e4bd75ff616a57a5071490000006a47304402207196455a4f9549eccf7875331ea3c4c7f7f158ca52c2708456f172e1255579be02200c930c77ec011178bf8b6e2cec6f9fe3672591676c957dc81141d202ace795f7012103c532bfa8167d04b7d02a5d5e79c4dbe006b063565cbccac33ec257223ce5bc35ffffffff14e57683c3de6c52d63e713b62916e030cc196e42bfd5e4bd75ff616a57a50714a0000006b483045022100d80da3c77154c6ed38fade8c1bc094a6c6dd1407764417476a097a91720b9788022024d568cba787960bbf70b8b5bd5bd42e9a0000d6764d18394d179c80ad190485012103eeed0b20ae50bc6072ee47952ffbd3d09d1ece067ee6f9d6b185b86f2979a283ffffffff14e57683c3de6c52d63e713b62916e030cc196e42bfd5e4bd75ff616a57a5071570000006b48304502210083838c1f5f652278741b3b12a11b0793715a2752b7e649060131340207db605d022037e38cf0ee9157271472aa2570fa74d14889e0b4e2fc5ab52ab84d2caf4b92b2012102f7aac9f88990c1fb7ac9da4d525d04bba0d79da15f5ad337a931462659eba53affffffff14e57683c3de6c52d63e713b62916e030cc196e42bfd5e4bd75ff616a57a50715a0000006b483045022100bd42daa4e3bc755f47a6665cfaa2fa31c62b03a3077ff6b2aa0358998eae03ab022071cc4986ee7572f399ffc023526ed0d12717d3edc3167f1bffc45fb36a94f9f5012102e55d06ab7adf96c0a1c2d37f720c11b1658d368c62855948665d51e649b4df3dffffffff9db80071968fe358793c3c11c95d07cc298de27b6223456ca70826afe6ed3784000000006b483045022100bb5d471492f511764b91441f10792405b5375bef52a459a7de3baf457600f755022023b1a18833895b90e1663250f5bddd6023992d614fa5d2498056aae78772d09c012103962e6e5854973f18edd5b37eaa71307e6b966b23b9be5b66dbb69a5223990800ffffffff1debdfee69ae48db44033478d3a56d365768f2770764181b870398008a8f8f7d000000006a47304402203e052f5823c234456281b9c97cc7c5c288cfe01cf0fddcb34f6d80713e2c2c0502205987bfcc5ab1f2a41de4d73dbcff3b26f4ec9c69a15f11668585667561cac7a1012102cb4b3cb20916a6e55cf209301439506539da28674f5decc75e05782417f3f20effffffffe3447e10dda255c2705c57fe6c835afb4fe09752128d60020787943bf67505ea000000006a47304402207f2e252b8ec7a65f99f712413a57331f886c38a0670fe14b848dbe749ea832b902205fa711c94d2d76681b0cd7227daf1719a8cb1a718174e1d87621e236ee38794201210377530eacb9c59d5357dd3c4eb3b21797cf0f58a78f85000a47ab93e2f5c383deffffffff0133ee8ed60e0000001976a914818f4e406adbd680d922ccc2c4711a86366faf3e88ac000000000000000000000000000000000000000400008085202f890a1054ca2bd14c52f8aa6b6fe6a6158bdfcdb8dfcf5f4cde93afad88ce53f17a59570000006b483045022100980060c27d00839e488b052652fa18e91966efa1da060034897946c49173de1f022060eb56f4826099adf97d3cb36ac2d3187394c3bfde09010e2080eb20265359a90121022da36b5bc2597ac8fcd027bc0c3f4938aed4d669cb85000d4f88e1f4c296408dffffffff9e84c939491e7d3ef02b1ea8aa927af2675dfd36ecbb6d08fa14c9686c7b4276000000006b483045022100c7e3af039d2f3e5142dcedf980cf38e5669c383653e28425110d9bd48044681e0220490a0ce08bf2417ed1579cdfa4eb2b436e3087d070e40ef382aa6d5245031eeb0121027f\n```\n\n----------------------------------------\n\nTITLE: Raw Transaction Data (Hex) in Zcash\nDESCRIPTION: This snippet represents raw transaction data in hexadecimal format, potentially including details like version, inputs, outputs, and other relevant information.  It's likely structured according to the Zcash transaction format specifications. The format uses a series of bytes encoded into hexadecimal representation. Interpretation requires knowledge of the specific Zcash transaction structure and field ordering.\nSOURCE: https://github.com/zcashfoundation/zebra/blob/main/zebra-test/src/vectors/block-main-0-000-000.txt#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n040000000000000000000000000000000000000000000000000000000000000000000000db4d7a85b768123f1dff1d4c4cece70083b2d27e117b4ac2e31d087988a5eac4000000000000000000000000000000000000000000000000000000000000000090041358ffff071f5712000000000000000000000000000000000000000000000000000000000000fd4005000a889f00854b8665cd555f4656f68179d31ccadc1b1f7fb0952726313b16941da348284d67add4686121d4e3d930160c1348d8191c25f12b267a6a9c131b5031cbf8af1f79c9d513076a216ec87ed045fa966e01214ed83ca02dc1797270a454720d3206ac7d931a0a680c5c5e099057592570ca9bdf6058343958b31901fce1a15a4f38fd347750912e14004c73dfe588b903b6c03166582eeaf30529b14072a7b3079e3a684601b9b3024054201f7440b0ee9eb1a7120ff43f713735494aa27b1f8bab60d7f398bca14f6abb2adbf29b04099121438a7974b078a11635b594e9170f1086140b4173822dd697894483e1c6b4e8b8dcd5cb12ca4903bc61e108871d4d915a9093c18ac9b02b6716ce1013ca2c1174e319c1a570215bc9ab5f7564765f7be20524dc3fdf8aa356fd94d445e05ab165ad8bb4a0db096c097618c81098f91443c719416d39837af6de85015dca0de89462b1d8386758b2cf8a99e00953b308032ae44c35e05eb71842922eb69797f68813b59caf266cb6c213569ae3280505421a7e3a0a37fdf8e2ea354fc5422816655394a9454bac542a9298f176e211020d63dee6852c40de02267e2fc9d5e1ff2ad9309506f02a1a71a0501b16d0d36f70cdfd8de78116c0c506ee0b8ddfdeb561acadf31746b5a9dd32c21930884397fb1682164cb565cc14e089d66635a32618f7eb05fe05082b8a3fae620571660a6b89886eac53dec109d7cbb6930ca698a168f301a950be152da1be2b9e07516995e20baceebecb5579d7cdbc16d09f3a50cb3c7dffe33f26686d4ff3f8946ee6475e98cf7b3cf9062b6966e838f865ff3de5fb064a37a21da7bb8dfd2501a29e184f207caaba364f36f2329a77515dcb710e29ffbf73e2bbd773fab1f9a6b005567affff605c132e4e4dd69f36bd201005458cfbd2c658701eb2a700251cefd886b1e674ae816d3f719bac64be649c172ba27a4fd55947d95d53ba4cbc73de97b8af5ed4840b659370c556e7376457f51e5ebb66018849923db82c1c9a819f173cccdb8f3324b239609a300018d0fb094adf5bd7cbb3834c69e6d0b3798065c525b20f040e965e1a161af78ff7561cd874f5f1b75aa0bc77f720589e1b810f831eac5073e6dd46d00a2793f70f7427f0f798f2f53a67e615e65d356e66fe40609a958a05edb4c175bcc383ea0530e67ddbe479a898943c6e3074c6fcc252d6014de3a3d292b03f0d88d312fe221be7be7e3c59d07fa0f2f4029e364f1f355c5d01fa53770d0cd76d82bf7e60f6903bc1beb772e6fde4a70be51d9c7e03c8d6d8dfb361a234ba47c470fe630820bbd920715621b9fbedb49fcee165ead0875e6c2b1af16f50b5d6140cc981122fcbcf7c5a4e3772b3661b628e08380abc545957e59f634705b1bbde2f0b4e055a5ec5676d859be77e20962b645e051a880fddb0180b4555789e1f9344a436a84dc5579e2553f1e5fb0a599c137be36cabbed0319831fea3fddf94ddc7971e4bcf02cdc93294a9aab3e3b13e3b058235b4f4ec06ba4ceaa49d675b4ba80716f3bc6976b1fbf9c8bf1f3e3a4dc1cd83ef9cf816667fb94f1e923ff63fef072e6a19321e4812f96cb0ffa864da50ad74deb76917a336f31dce03ed5f0303aad5e6a83634f9fcc371096f8288b8f02ddded5ff1bb9d49331e4a84dbe1543164438fde9ad71dab024779dcdde0b6602b5ae0a6265c14b94edd83b37403f4b78fcd2ed555b596402c28ee81d87a909c4e8722b30c71ecdd861b05f61f8b1231795c76adba2fdefa451b283a5d527955b9f3de1b9828e7b2e74123dd47062ddcc09b05e7fa13cb2212a6fdbc65d7e852cec463ec6fd929f5b8483cf3052113b13dac91b69f49d1b7d1aec01c4a68e41ce1570101000000010000000000000000000000000000000000000000000000000000000000000000ffffffff4d04ffff071f0104455a6361736830623963346565663862376363343137656535303031653335303039383462366665613335363833613763616331343161303433633432303634383335643334ffffffff010000000000000000434104678afdb0fe5548271967f1a67130b7105cd6a828e03909a67962e0ea1f61deb649f6bc3f4cef38c4f35504e51ec112de5c384df7ba0b8d578a4c702b6bf11d5fac00000000\n```\n\n----------------------------------------\n\nTITLE: Parsing Hex-encoded Zcash Block Data\nDESCRIPTION: A hex string representation of a complete Zcash block including block header, transactions, and metadata. This binary data follows the Zcash protocol specification for block serialization format.\nSOURCE: https://github.com/zcashfoundation/zebra/blob/main/zebra-test/src/vectors/block-test-0-000-008.txt#_snippet_0\n\nLANGUAGE: hex\nCODE:\n```\n040000009602d22138bce598c396bc4691d4cef0b67fd3a7f84a9a35a60d921881052f0343a443c43f281258a8aba067ddb775c1423ffdecf0007273d8c908e22b98f8290000000000000000000000000000000000000000000000000000000000000000cd951358ffff072001000d3233ddab5818d448041684dfe38f0448cf2e12ea44818478f35ad70000fd40050068d4c9b1c19f884b49d8bcc74b398a97a1ba17d028602fab3820f2ad2f194345c73555f1079fb5a93c33f15ebe85f99efbebd349cb78e27e369ccd9642e5581a7f9c9c180b92c56f86890d71a7bb7f2fbd84470650fe26fdc7fb55c5f7c221137252711e4cb483710e12590419661ed14a0624aad7e094d9e29a19eba116c0cd3eeb2245839d29668aad5b16a31aaf5b16c829c1d4d26e99a7c55a1543c060e783e57cfb2fc6ec00793892031eed07a0f0e170e9f47bfdf7e897dea319ecb7f5b53976c9e72c8911bd50677b16635fc5b80e4c0ee0334ef5a771ffc639fff15a05b4c9b39f201743ec30206e119f8aa33489b5b084ea75d7d41ac500d17ed2ebb78389fe67f1c4617c6e632ce6dcbb471b1ea11fbc19e969dcdf424286ff213974253b03e3061ba25a92f40b81d68d956fd5bef0e6693ebabfae156f1a224a8ff9ef4542a460ce78e5522e4c9bbe3707cfb6920aeebdf1edd85205b617a96564ab6c723639f3a49b5727d8cd447e640ff73deee9357e92b39709509b9ee5026126fbad62587a25b1349a4c4c54dd108aabb1ae9c444592087176e830e3acc4a113d4f90c5cc9c995138f2aef85f63566ee8de29d249aae0f1920ce13b3212e0b4d1288093dd12d9eec457921eb1262ef1f39e3e50931ca65d9ab78d439eff1b071975691dce80e60933f9f7335deb24700a61f7f5ed69a11e73e9c6914627b80d2e46dd376d3e5ee3db07ceb178a3e052020097d73bba236a7df20c4b41c14c8b914f80662cc4b5e1fa237372ad7c57cc332933dadb831e354619e536c3b896ec36a42497ec4ffec111f52130bb497f2c5710356d795a2eb7c6ac1c20e9bcfc4318e63e71a5b3e3bc3eb16bcfb3c4e71b677cfa3e81560ad909ce362c9835371ac6226b344b22c94936317970aa653cd54e1d20124a868e4d215593d32e55e0101cac9690ed901e9af411e6dd9108050a6e3e07d17918526a86a6f2be652f427367c10b9f8679eba7a18ddb2614ac7479f0ce6c42f3c35852a76c99f8b2f2e069ed13718d3133ed225b0b8b2f68a56225e2f81019034eb9d031ca9a66567dd68729e86b6295cb9350df1087aad8a34dfc8e694a83acb39d97726b378ee0d236f6ee7b19dabbd5887fa9ad439d6a87d1e10714b98a5e459727205fdf6150735ed8035f8d6567c820594328f51754a65d0a7935cabc17871f0ccb3b66c2654cb2ab4e459b9d9f983af5b49486e60b615290e0843f9fe528aee3dfa74959ae3cc1601d94efe1c2d164be7ad17de0e15f12f22a6d8b0ee4d89276c55950e8c83a465050b926a94e5203e7f6109b298717dab18d95e2dda7a19a1d61a433c02efda5db75ed97900101ea48cf890a91cc706927dd6769bce34725b4b6e18837c71c665f41bebce22aa2350d679c1b5b4682001a7ebb73e1f3c8d7281f0cb95e684f061d5c3b52104888bc1a37733d1bc5ba389875a93154937afe8733806b633444f26370b96341ea36205929b52f4efca5615e65cf660ec815b0978dceed6b89bc417de3d6904a91219b0882803431c10665b399e6aa130b8e66c1edaef47b50c5137ea7fd60c576e5d4d86d370185114808256ec1a9fd9d0fd46686bf0046eec525870bc33bed6dc74d115774f0b7496c9455155c2ee1bfa390caa737e5acca8772e3ef25d6e7c7c475c25fcf75e31d65f94671f709d5261b3955b504ede2d6c9fd0fc19e3169a46983296fa0601cab0765b44843f857b4c1c365179e660b0f5107982d0ce23fad13b372c95541389068b709b47cb4c4e884a83696c562ded73b67e271ff5db14a3122d35f4652f05548bc7d179beaf962bf2cb85d15c569755534335ad4ed7a8fc447cc240320a4472e31db763ac1643b1a6f55a2dd2b3b7e91f0101000000010000000000000000000000000000000000000000000000000000000000000000ffffffff03580102ffffffff02801a0600000000002321035e017ce17274f75539e35e93ffaae48b91c2cbdf1a982fe37a7ff0e97cac9b19aca08601000000000017a914ef775f1f997f122a062fff1a2d7443abd1f9c6428700000000\n```\n\n----------------------------------------\n\nTITLE: Analyzing Hexadecimal Transaction Data\nDESCRIPTION: This snippet represents a Zcash transaction encoded in hexadecimal format.  The transaction includes version numbers, input and output data, lock times, and script data.  It likely requires specific Zcash libraries or custom parsing logic to decode and interpret the transaction details.\nSOURCE: https://github.com/zcashfoundation/zebra/blob/main/zebra-test/src/vectors/block-test-0-583-999.txt#_snippet_0\n\nLANGUAGE: hex\nCODE:\n```\n04000000cc0e97e923bf26c13074568930c9dc231254fcc0217401b3b8f0c73171300c002f3f6bf3f1cc0348cd6e0a885caeff2de25b4d7fbd943de7b77ff98bca3dea6352d65fd807f79e306c607c2724b0f547c68b1f23865df805dddd6c420c6c741361f4635dac847f1f02008f5034f2ce3c93c3b5706384a8faf22cbd9b0b3e8bb360b1483879290000fd4005006805292605753b22d7d3a72778befe3ca9b4e4e4049cb31316964063100c02b22b4ea0398fab3179900cc98fe02f0c74a6bd6f218c35e424691ca65fe7512bfbd5407c903583cd0ef3e273ec7a42d64699c90a02d7f67132ce11b92cb902531047aab9b1a8f522d1057e0b058541d2386cfb90b476b8292491341923781650892348f642adde2935144b701236895e5b7510193d3f6e7b92c78d5287062416685cb596140dde050201b165b1e7b6fb639a71d91ee85501ef869771b048cd959c5be35367a18c5610c55cc8da3a3f7b966f0e43b35413c81d96ea3922f33f2def4cdf2c0cd2c7162e0b25824c95335927d19e4dd23025a32db8e6ec06cc90bf99b00caf8503a3671b3260c584239854a609d4896db515b1bcd0da939be75ed4551d2cb952680cbeb8d12b9b9f2fab8447e54875158b90fcbeef0f0ea82504c9bb25cbf00705add8583b29dc6b3ba6b201061ebe74ee2225cb82229571a2deb96387fe7150214539e804a1d151d8c6f2f2f82f79756a092ffd120f5ba3c77e11402ab91912cbd32efbe0f71d90fef51c4176ab4d8ae5aca919422c58c8c054a3d5fb288905c67089ab4932be5cbd8338b154f22d85a13fae1c1adfb32741cd619ec223e42e16d08c72e12f1e478e0f1815c7a2c97911fa87d2ac00579fe53d029af7d7144ebc2f275fcd55374c220bbd685d50b65a474b65028d062c5df34591dcffe330031b7e1a0c611340ae28799f48498a742b5d8b640659f4628a7caf71f0cd16847d2671d5bfa723a7490a7cde31b65a7915c75117615c8e1fc68233f890d3a3f6ed83a26964f3b04b08a45c99316a3511d8774a4958e85d76937e7a31f310c4f59bade7301d40e1d1eeca17dbf8d60fc8161d3069a3135c95099b8cb7b580c8f94bdec76d5ff8c834aead96b6af5a45aaa613c11dcda0431813bed91900a47fcac68c0aa11caa314fb67fb30d1f45dc8fbb11f97941e2290e997ac505b299fa9411af1639d7a3031b17ebe8a9faa1913eb63042eb6f7e470617b9831f022d2f544d8532b530e8ad7ef2d72b50489a85e80b700c7578d8ab9988ba523e509eb7a49ce5ffbff41bfb175a465ce42f216047763ceef0df7ba67c7f461590d669f68ad417c6b3d269aa40fb8df7123d99a4329c04c8ded2bfeccc6bd5d7e0cd3cf2f90499f34b03a8b5ef08124460edb033cc0d9f1b120c12960b1349d1f262da2553d7be3ce7c2037f0791f87319ee5003dd77318a52492f811083884dce438e99195a58c52e5e75006e248a6134a4e47de6fbdfe7b4ef1fae140e757d6a284404e9cf24a674d43d2f2760205ba50e666e06adcbe1306f4aa8286330d8d0e3209cbb4e5d16f405f1756c4a85d850f2688495e28a5532fc3ee25cbab78b51f5d9abc34c88edc748346722213b8d8d0400712b406fb385f3a2639256b59ac5408ab045c116410a4d8120c40b7e7765fba2efe2b9b4a85fc75e07a6fb29a84e6ae28a9bf4773bcd5b29729e7318ad0a1be1d19843fa72f052146bdfe6d515c674fbfef90d257ddeb6845da8bfaee5a8f0b2443189c97fb4b23365e5da1591595386d8837e9bac4b8d7531ed4a0811b1e0a93a1f0f8b50854aef64e7edeeca607ba4e4204b3bbddd6f4ca9efb5e2445d4e012976bbbf3693062c57aa3c819fce5d92c58123f0e41a1ac3344c5b164b34ec0e0ea355a853a19ab41631594c6e5b7c340aa93cf447e5c48ff2c583b8723d20022069513d5331e256ae06b97e83ea2d63f14d486d4d7b74cf428814e2a0b6fc4f825bf2e831b8f0fcf818f74f4c6d7354ca86fd28d8534959afd5b04273341ad679ffe69047543e3ec2983abd2551e4beb9deedf1c2a27d263b5f4ff7e2839c2c4345b1471841e6a9428914be9505010400008085202f89010000000000000000000000000000000000000000000000000000000000000000ffffffff06033fe9080108ffffffff0200ca9a3b000000001976a914521e3f97a7f116f35d95a113523c0bd48fa4056888ac80b2e60e0000000017a91453dafe420ac703a7ec9cc3f593778054b459a8318700000000000000000000000000000000000000\n```\n\n----------------------------------------\n\nTITLE: Zcash Transaction Data\nDESCRIPTION: This is a raw hexadecimal representation of a Zcash transaction.  It contains all necessary information for transaction processing, including version, inputs, outputs, locktime, and potentially other fields related to Zcash-specific features like shielded transactions. The data would be parsed and interpreted by a Zcash client such as Zebra.\nSOURCE: https://github.com/zcashfoundation/zebra/blob/main/zebra-test/src/vectors/block-test-0-584-000.txt#_snippet_0\n\nLANGUAGE: Hexadecimal\nCODE:\n```\n040000007347d23b09fe698ef82338b8d30edc7fd3592d9fb2c352711ed698dd89f25a00f6d6cf234c52a42469a9ca5d52cd12f2c532282d947c431b545802fd4ba79f9552d65fd807f79e306c607c2724b0f547c68b1f23865df805dddd6c420c6c7413e7f8635dffff0720010085099b4583750a062e34e1bf7c1074de4801627e8ee84db8e603ee3f0000fd400500345110a8e8a1dd9eea0661b97489d64ebc193a386c35c469691e99ff554168351cd5103793d3bf4cbe10672ae5f08728126c7dc3c2f37a8eee7fbff65cc82b6be64ad44f7bef5b29747e8e453ae559109f7b6104a8af9039272725702ad2cb42bdaeacdac6b37e200df1dcf2d9d448b59f8121386dc714f72b15fefabf686a66f7992e43ad83f20a8435646446f4ff782b5c7b782cec39b1dcf192cda85e54580bcec95c7d15d4022487d93fc3156b53bdd045ce2519a433fe56f04042a613d28dd7d57f4368c9a441661aa6852f972e8d170c0f9ebf218e67c3039900ddd805aaf5549d57f71790837bec6f7ce5d7c442f15f3bcd1e0dec9cc9d7082e70d8458b1da8652f170855ff7c8b8279ff9fdf57849d76046c4c65bebf55e13fc34836d1bd599bde15124da8f292e8d507ecf218613c1ae53c2b3971a2207d3d271f4ec6cfff55c2fb9abd0a7677889dd048006f91467f1baa57f941ed9f1e7617276b28de0f410aded4006417fa6fc8c532e81d1e59fbb29cff5c82175388ef20ca97d94c61f22b7fcf1f0521aef79bde3583fc00ca8ebea9090cb78ae3bfb1a298b31d1e9303a53d41f1518b534d7a2293267c087a663555e1d92cdd02ae84ce3b9ea5a8459a683121c694ab78d66a1a0eb433f787f550f6e7749c43d9abc61a635af6b624d3c219b35dd0f75ea5f263d43579cd283ecc12a403e87e1fc0497b8d3caee22d2cc658896fe0ef40b41a7e7b6af98bb0eddee5a28c55de257ae7f518b1253fd0643dc8d9d319a48c1450d7d8a0aa1e827159b74a6c45ecf859bd23ecc7f5ff693c41c9d526dfa5db050ccf97d199e8a7395288ef0a7d94fe5d931aa5bc3d8fefc7ba573091c6e8d6e1a3d6dc9f4e70db3b6e10dee7507505ff808c6577fd76753ff2a72f1b452b1a9e49b0d90c077d359d78e319c7d24e5cc27e545c0063feb6389c6165bca412f6221a2bf0c937936f8b0084a5759f0fdf66cfd52049347733b78dfd5ce39d1d3565c76793beb3772332fdb14ac2da143352c01552cdcc7ae4e35f5b4e65d87a634cd55ab053599ac90394fac4296ce287c7cbc43f4a551132e7cbd7c1ed1d6e44612893c4dd23212345a5e0d51ba9609dedcd0f76e60f2b0dcf059b82191cfedae8eb0c3a3ce5a91960a47c6817fe2dd414e1cb183c89a5955df6eb21025ecb9b94d4d0f77d13576a2962ee42696275098617a8740bbe4d40a7f88a0216de190be4e56ff2eb73051186fa29a7620b56e262af36fc30759bf69371a5238e461b591364b1feff93db986125d20129928371036adb1e14d5b5af039b361e56e3849616d73217a814d3344303c8e7c94f651bb6e06e561af0dfddc5f61d5d3ce3601ba01f134d23830bf1a9222f24b2ca5050101aaa95d70a0f61a9a9a2e8fe344366435f63a003143a2b86b38d63c42e70a52617187c564c9b0f7a2ba25f313b6c07f7962b6304d29dd2719cdad7e4320500bf7e7043f7ac480461f8406e49ae5f0afbfeb31ef105b15ecef869268bb90cade31352c2e9b6d3070a5294102815e58ed60d231987bfaf09c855fcbaff23ac7555082aa5b5812ad3ce352d71fd00a4b24e7e0e11d5da6c0c065ed83a617ee16691dd4761fdbe2f42ccad1a455d7c4324dcd83b6b6bd17ed197bf0cb0033e6d30e549c04c87a584d31ea709e37a8c5ef5a2065b7a152597ec7d7baff19b4f4aac82a8875f382605669874ac2241c568dd03422a9fe9610a622edd8006178d362315e1b6f9fb60e91d882a28d688da815006347235ef455b37bd2c63735b78f10e3ce8b71bfa415bf3869354a9f0e50bd59051cf44a96a391248df16a401c163da94a7b6d851bfb595b2ea3649bf32c11b239eaa9f15758ac909a2230e4524614b7c93b1a7010400008085202f89010000000000000000000000000000000000000000000000000000000000000000ffffffff060340e9080101ffffffff020065cd1d000000001976a9142e861a970eaaadc9914dcc1c03e6f7ed88683b5788ac405973070000000017a91453dafe420ac703a7ec9cc3f593778054b459a8318700000000000000000000000000000000000000\n```\n\n----------------------------------------\n\nTITLE: Decoding Hex-Encoded Zcash Data\nDESCRIPTION: This snippet represents a block of data encoded in hexadecimal format. This data likely contains a Zcash transaction. Decoding this would require understanding the Zcash transaction format and parsing the hexadecimal string into its constituent components. Dependencies: Zcash blockchain knowledge, a library for hex decoding (if not done manually), and a Zcash transaction parser.\nSOURCE: https://github.com/zcashfoundation/zebra/blob/main/zebra-test/src/vectors/block-main-0-000-001.txt#_snippet_0\n\nLANGUAGE: unknown\nCODE:\n```\n0400000008ce3d9731b000c08338455c8a4a6bd05da16e26b11daa1b917184ece80f04000946edb9c083c9942d92305444527765fad789c438c717783276a9f7fbf61b850000000000000000000000000000000000000000000000000000000000000000ac7a1358ffff071f7534e8cf161ff2e49d54bdb3bfbcde8cdbf2fc5963c9ec7d86aed4a67e975790fd4005002b2ee0d2f5d0c1ebf5a265b6f5b428f2fdc9aaea07078a6c5cab4f1bbfcd56489863deae6ea3fd8d3d0762e8e5295ff2670c9e90d8e8c68a54a40927e82a65e1d44ced20d835818e172d7b7f5ffe0245d0c3860a3f11af5658d68b6a7253b4684ffef5242fefa77a0bfc3437e8d94df9dc57510f5a128e676dd9ddf23f0ef75b460090f507499585541ab53a470c547ea02723d3a979930941157792c4362e42d3b9faca342a5c05a56909b046b5e92e2870fca7c932ae2c2fdd97d75b6e0ecb501701c1250246093c73efc5ec2838aeb80b59577741aa5ccdf4a631b79f70fc419e28714fa22108d991c29052b2f5f72294c355b57504369313470ecdd8e0ae97fc48e243a38c2ee7315bb05b7de9602047e97449c81e46746513221738dc729d7077a1771cea858865d85261e71e82003ccfbba2416358f023251206d6ef4c5596bc35b2b5bce3e9351798aa2c9904723034e5815c7512d260cc957df5db6adf9ed7272483312d1e68c60955a944e713355089876a704aef06359238f6de5a618f7bd0b4552ba72d05a6165e582f62d55ff2e1b76991971689ba3bee16a520fd85380a6e5a31de4dd4654d561101ce0ca390862d5774921eae2c284008692e9e08562144e8aa1f399a9d3fab0c4559c1f12bc945e626f7a89668613e8829767f4116ee9a4f832cf7c3ade3a7aba8cb04de39edd94d0d05093ed642adf9fbd9d373a80832ffd1c62034e4341546b3515f0e42e6d8570393c6754be5cdb7753b4709527d3f164aebf3d315934f7b3736a1b31052f6cc5699758950331163b3df05b9772e9bf99c8c77f8960e10a15edb06200106f45742d740c422c86b7e4f5a52d3732aa79ee54cfc92f76e03c268ae226477c19924e733caf95b8f350233a5312f4ed349d3ad76f032358f83a6d0d6f83b2a456742aad7f3e615fa72286300f0ea1c9793831ef3a5a4ae08640a6e32f53d1cba0be284b25e923d0d110ba227e54725632efcbbe17c05a9cde976504f6aece0c461b562cfae1b85d5f6782ee27b3e332ac0775f681682ce524b32889f1dc4231226f1aada0703beaf8d41732c9647a0a940a86f8a1be7f239c44fcaa7ed7a055506bdbe1df848f9e047226bee1b6d788a03f6e352eead99b419cfc41741942dbeb7a5c55788d5a3e636d8aab7b36b4db71d16700373bbc1cdeba8f9b1db10bf39a621bc737ea4f4e333698d6e09b51ac7a97fb6fd117ccad1d6b6b3a7451699d5bfe448650396d7b58867b3b0872be13ad0b43da267df0ad77025155f04e20c56d6a9befb3e9c7d23b82cbf3a534295ebda540682cc81be9273781b92519c858f9c25294fbacf75c3b3c15bda6d36de1c83336f93e96910dbdcb190d6ef123c98565ff6df1e903f57d4e4df167ba6b829d6d9713eb2126b0cf869940204137babcc6a1b7cb2f0b94318a7460e5d1a605c249bd2e72123ebad332332c18adcb285ed8874dbde084ebcd4f744465350d57110f037fffed1569d642c258749e65b0d13e117eaa37014a769b5ab479b7c77178880e77099f999abe712e543dbbf626ca9bcfddc42ff2f109d21c8bd464894e55ae504fdf81e1a7694180225da7dac8879abd1036cf26bb50532b8cf138b337a1a1bd1a43f8dd70b7399e2690c8e7a5a1fe099026b8f2a6f65fc0dbedda15ba65e0abd66c7176fb426980549892b4817de78e345a7aeab05744c3def4a2f283b4255b02c91c1af7354a368c67a11703c642a385c7453131ce3a78b24c5e22ab7e136a38498ce82082181884418cb4d6c2920f258a3ad20cfbe7104af1c6c6cb5e58bf29a9901721ad19c0a260cd09a3a772443a45aea4a5c439a95834ef5dc2e26343278947b7b796f796ae9bcadb29e2899a1d7313e6f7bfb6f8b0101000000010000000000000000000000000000000000000000000000000000000000000000ffffffff025100ffffffff0250c30000000000002321027a46eb513588b01b37ea24303f4b628afd12cc20df789fede0921e43cad3e875acd43000000000000017a9147d46a730d31f97b1930d3368a967c309bd4d136a8700000000\n```\n\n----------------------------------------\n\nTITLE: Zcash Block Data Hex Representation\nDESCRIPTION: This snippet presents the raw data of a Zcash block in hexadecimal format. This format is suitable for storage, transmission, and processing by blockchain-related tools. The data can be parsed to extract block header, transactions, and other relevant information.\nSOURCE: https://github.com/zcashfoundation/zebra/blob/main/zebra-test/src/vectors/block-main-0-000-002.txt#_snippet_0\n\nLANGUAGE: hex\nCODE:\n```\n040000008392336da29773c56b1649ab555156ceb7e700ad7c230ea7a4571c7e22bc0700f4b084a7c2fc5a5aa2985f2bcb1d4a9a65562a589d628b0d869c5f1c8dd074890000000000000000000000000000000000000000000000000000000000000000ca7a1358ffff071fa5556cd346010000000000000000000000000000000000000000000000000002fd4005005605e4490c2e7fc1acf199d7401e18ab8d2be4c843103a7ebdd34046d5514559e6ecbe29c00b9adf6f1aa49f1d63b9c20fd9bca4d9bbb381cb82f59cee9f387deb34ec4fd6b1e12f656a554bc21db88bd1560a033e64099c0bef439cdd6055aaa4f79c360ad37d1f1df1fbd35214e17fc5a0b3c0d272b1e693d6ba9e5e0ae71c6ff58545776838c18b756bf98a83a6b9739b4dec356117b2b227f6f6ea3f04fd854aadf27b40b302d3fa50719aa02f99c2003b51eab8c64cfd145117054dcadb604ba65a8854a095bd9f02884a65225baf0547a7ee44882b11343d40b1a6511cbc4db1d2fd840a8cd63610d29c47bd5c920fe13c349d1044185cd40854f8e60a212d59e1fe281e8bd1343a682e95f3ea23fb5ca83f9913bbcb11232ffd7165ea4a475273df1f3bb53cb721548b28f772acf56060da5d26fab50c4f8b87781bf28843bea805340531a61f002b5aad9a0427b597af1a08659f1a7b4b6d69d53b13191cf35512bc3521359dda47911112d06ae5410281d918bf53049f8295f067f2b3794a90cc15358e294c6cbd7896108d7c897e4bf61aa72451a280cfce72e0515b8dc510a52743b7615b25ba2f13419d562f6148fa36132622953c0fb74ea0b4870f86ccc1ece9661b29516a2226ea16b7100dbeb718a674eedbbe9d23ab02fe1c634234f3c1275ae9d7f74c754c66dec0af7331fc1407075a06cba62098a9be09d24889e7d0a6cf77d875131fe1278e6fdea2bfd9423903e1cb4502edcef971c60b064d4d8a9703ff324574e3d0535a59ab091355185499545be1baffddf6c2b654e5c30e7e1291763fd70896217d91d876a9be914a8472fa292ea3cfdc4be84f4c645f62d8ccff990ac4f5c84e0775b147d1532e2d4f3a8fb92fda899280a3e42f2b927dbef872ec6058254eb20e2770efde7c57905e7741321e833533e0006344a4c6deb9a78e8496de1ae1464ef8367ae97714700e76658e2390cb9702d1413b333d7f04fb89dd09cefeb34e0ead616cd5d352a2f348758e0f5fc4220c6a0693acc90b8dcd7a372ecb688d86356c151d9703576af8e904adea9941d1a6296774ba62b4dae7bf0a078f740af040c584f0245ed2ffa351f0b550c8b80e192ba1a75eb40fc42d67b722ea04ea947ed53e831fe057153a8bd6897ddcd43cb558d2766fb05640ed0c1d14eae0739b11ec07e34f3ea6acbd9f807b9ea6476bda5964a9fca1819c854680f75857e57fbf3fc50e3f5b0d25cadadcd9b3428b85b70b95080c9423a836e9e9e2cbd485075a29452d65acf3d5762111d70a0fd389ac7214b96b11eb14ae48ff1e4930ea50d8261472fd8d04877af717b4d463c0d9a6cf397b5b91fb1a898b329c4b46b8c350e3c0122e186bc393fe6d361e117963d38e44e0ccf1c45f33440aaebd8f99ad7b019c6411bb070178fb6b76e085e3bdae4c883f1f4112e7db91c519c48769fe96f56350cc8687679747730f0aad3bc58b78f87d162104beee449e55eab45558241f32cb5a0f30fea0f38632adfc8a2b7292ff89641581bb6e0111af26dad9199596ce8d432e6f7d0a7415aacc473acfb8af68c9c6ef8b60c535da095cd3a02598fd82fe20481dc87bf6ed25fb95633dc7ff8bcf3f81c323546084170e567536b5c4ce9392ae1dc1f201d732134597e3c9353416fa40ff8f2628815e9b980f27a9c05adefa779ef1a35fdfe6423e9f671677311971bd91d9aeb6adf4c45769d07df7a24955f4082730fb0d3f6467472f75add86b827a7b664005931130029553fdb62ad9ffdb64b44701c0d94e7c5f5ba2340e641d9e34737e29b47e619659f458a161648c9fb81dddbcc73f1eebc92fd7f7b70356635f0de19912d82c9a978c2750aacbfbeee3ab62e96f7df7ce918fa30101000000010000000000000000000000000000000000000000000000000000000000000000ffffffff025200ffffffff02a0860100000000002321027a46eb513588b01b37ea24303f4b628afd12cc20df789fede0921e43cad3e875aca86100000000000017a9147d46a730d31f97b1930d3368a967c309bd4d136a8700000000\n```\n\n----------------------------------------\n\nTITLE: Analyzing Hex Data\nDESCRIPTION: This snippet represents a single large hex string, likely representing a Zcash transaction or block. Understanding this data requires familiarity with the Zcash protocol, including transaction structure, script execution, and cryptographic operations.  The hex string contains encoded data, and its interpretation requires a suitable decoder or parser that knows how the underlying data is encoded.\nSOURCE: https://github.com/zcashfoundation/zebra/blob/main/zebra-test/src/vectors/block-main-1-046-400.txt#_snippet_0\n\nLANGUAGE: hex\nCODE:\n```\n040000008c739e06a2b504ce080d86112d26e60f3f3c4ab7d8cd59b2573916000000000065f41fdaa837e7ab65f743883e8ba3fec6a78130ad280bdca90232bbdabd4aba3c008b249a9bda2c022c3188b86f8e3ea5f839fecfe1003b37e5e04f8f8a2148c814b55f5213021c1304783146d10c0300000000000000000000000000000000000000006fe95eacfd40050023a558af567945f27ae37099acd46a552cd67acd041c67ce81ee440d9d29904b80ab2c80c56fed95dd11749f01f4af279d7c5035b334461b92e5565c60e92d75ece1b03825b9f6bc34946edff9c30ec77ba08209c010d4210c9cc2d623b1b9a0340a2076c8b336980f7dea5197f862b1ebde56908bbedfe2db7dbbd5eb23d8cac929dc13319c4dc4fd5a481ded8b03edac12281bbb76140a908d968614691ad4bbe56eb19c5bd602ba9fef2b873f50dd2130e6a0de6c80daa49c3e7610d440ef9dcdc247877d510fcb2dca2d09723f9d7611d26d2f8297e16db7baa36e5c32b1619e7a0d887d287d93d59ae6c8f3c183481be0cc6ac60a63db3b35043d3374e24e693d4a331132bac8ac14a6bbd1f4d011f3737ad08fec9718b62541a7b6350697e8363c901eeac97c82340565f4d523ac8c217531730ddeb528272b5f0a02e21edb8f76034e2cd5184775b51cf66c01bb40b7ac5158590406740982230b7db1886e6b9a072e2907085edbf7bf0a20add334a7aeb6009651f12c72db5c33da0a5b606f931231c5ba9f0cd7da3cd0541384f4c25610e1944ab54b4dfb496d57e90e8ab702daf8db6d2a7cb35dfce067e9288270ac68599f1a034f4ddd8ded26b3a78f2271ef53d03e5af8b5dbbe04f679cc8af31795a881e25257218d32d38c99a4e9515df6d334a26f396419cb7f4667bc7f116e590df802d60462d1cc4618715f406429e7f2fdb7a85be76817ce8a330de2e08d6866663349ef247b365ede69ee10d6fff2066b5989a6f0d2064af370599a3d96428a8a54395b3b78556e1f1ff2a5f6edc4ed5ebbc836b19505169554550730e4905c13f1232de36f62007fb13b0dce6ea86684dea593d7125888a6b0668b197497200a9bab485d85a1827648c0d1afaae58991185b2fed521d23b00758d54cf26ba66f56fbf39f06c27873700139248e2707bb47657a702cdf87c9f6bb031963c0146220c03a58dfff8962a4661a5269a53037327a36056a92f730c713c31d5e6534dd38181574ab8f84c71653ee210dd45be72cfa15948252868972fc1d22430296e7c9c341cb60fe1522a4773e2c90ac07c9c0b0149d6548c88e4ad770a3a2478055a52f474e1baa160acc54bf3a87805a723cc18373ab3db12a6bead7af29ca295e2e9b395da59d037f14e612695fc5b353680215d5bf0e4aee7d1af0320dc9b7b305302f5abdab288b97002c12d919c3dfc31bfc65792dd336d796bc040f07ab84795055d89f90db54ab30c8c31feb20e5043d50b155ef17cdc1399345fced6578eb905e7cc90e0e8e9e84e23139e340c1e972bf7291d0b7afe6e00ff91ef44133ea25c88268e6efdcd27672be7e76ce17101b6f6ecf64e2d69223dc30b38c26840c9ba3478dcd4d2fabf0bfd5f0ccea880f577bdaf0e1bda340027a64d292c0f5bb93827469fe69c8d210545ad06517e9bb3b7452a9817edf44f8786d904ab6b0172ada07a86a0101f0415da931958370c11451dd2cf0774c2dde2a221a52c7a4e016351a8b63c3a97c2ebef3f60379613f03c981f7278313469cc6036996d65ca3fe53984348779585abb94dd5835dfb19dd6feb3e12ea2721e54a22237cd1960c2464f2a71dcd92911ec76039c835874917db11c04853d5eeabdaa51acc8a89b809a9fb2c9791d33168ca527407f6d5f4e30c17670011182d86358d23bce2267411abb1b2f5624bf689cf10811ae1838d4e5d52fb2265ee2a5f731d073bb378117fb63a3de2fa814a44a262f06ffc81e75855634410f391b4aad7bc82daf9313efceb12605f7153e2f02b263d22faa4c0718a4449834fd24caf3cfc9af9ac1e22dd94a37391e3f2e556471d6b1c335785bc19a02f9d3c93efd2521db05373ced8760aaa2e6d3ee799010400008085202f89010000000000000000000000000000000000000000000000000000000000000000ffffffff050380f70f00ffffffff0480b2e60e000000001976a914588219b4d6bba2e535c2f92af7f85f5687ce82ce88ac38c94d010000000017a91418304d852fb0f7cba26908c85a5573933be60cb28740787d010000000017a914931fec54c1fea86e574462cc32013f5400b8912987286bee0000000017a914d45cb1adffb5215a42720532a076f02c7c778c908700000000000000000000000000000000000000\n```\n\n----------------------------------------\n\nTITLE: Parsing Raw Bitcoin Transaction in Hexadecimal Format\nDESCRIPTION: Complete hexadecimal representation of a Bitcoin transaction, containing transaction inputs, outputs, and script data. This raw transaction data includes input references, script signatures, public keys, output addresses with their corresponding amounts, and transaction metadata.\nSOURCE: https://github.com/zcashfoundation/zebra/blob/main/zebra-test/src/vectors/block-main-0-419-201.txt#_snippet_0\n\nLANGUAGE: hex\nCODE:\n```\nf298902035fe1bba1e082dd0eb59022931810c4988ac756506009465060000000000000000000000000400008085202f890123c9a7001939273a9a6566c18aafe830e927a968969b0334324e75ff7230c188010000006a47304402205c45af53cbcff5e2e1b7341e38a8d85265c9958ec52455644c51a8e02410f8f4022005f2079d2e4e238eabff548a23b5f11447249d39ada4f9ae175faa6861bd24150121021f70b9b4677ac8e2fc07d498d922b0daece91e270d822a71e7e952a1445befa9feffffff7aecf30200000000001976a914bda6b0b260a725ee6536887b9102e16b12e405f388ac31541000000000001976a91434d1a100d7e790b3d3b9d7d215d3f0ab863e4cd388ac439b0f00000000001976a9149ed2c9de23aa131f18469f4ee42b1eaaa40ad24388acdd620200000000001976a9141df70efaf5ee23c9f2bd7cbc3fbad8473a7841fd88ac96820e00000000001976a914a9d7d7cf2a9e7dbfefba729bdaf531763bcdb43288accc9e0100000000001976a914edb042e920d4edeb05575eac735d7fc1403a0ac188acc0920100000000001976a914927e77d7545dfd494ca7b9be03a0ef178c7b4ec788acb2ed3000000000001976a91428d87590033913e5e1e6ddad642cedf42f12965f88acb4113100000000001976a91452ae88854dbfcb3eecf2b277274a627f8c677daf88ac010f0c00000000001976a91464e39c3098729a69c8f25898a99d7992fa595c6188ac047a0700000000001976a9144eeea994002f720b4fcbe59de7ff17435223025788ac77f20600000000001976a914ed1729a58d38b260dac97de023fb78a1ab59b15888acaade0d00000000001976a91439d5bf58c7e2a4f924090fbc0f3c8de629cceca888ac4ec30500000000001976a9140166ce948b855357f33d5813fbe6f777a6de531288acd9930300000000001976a914fabc131d3a6dfd2cd0ffdf82cd2eba71678db51e88ac00820300000000001976a914e2c57e6a7001cd7c3e578bd436af0844ad1651ce88ac290d0200000000001976a9149ad64c560a5b1d0a1b1b5bae75c92cbc4104a73b88ac1ddf0900000000001976a914c2e952098be3804a6a68de221f1b43f6ce91bd3088ac464a0a00000000001976a914440d9b290b194369e156149c68413813aaf5d41288ac5fd70400000000001976a914075ef89e817a562cbd5fd6a735c6bad10f1d00e988acb6740b00000000001976a91460aa53dc345a006a7d42c0c7f37c163e004f8d4788ac00af0300000000001976a9142e47f1b6896950b7a379fe3716a83b864e0f5d3d88aca88c0100000000001976a914fb5cbaa77db36f75b02b3221566cfc337eedcef688ac51152e00000000001976a914cd346e495a1825a1be2961ed238294f6db6019b288acc3a60400000000001976a914918a9d1eeadcd678117d54bd3ab08ec34145fc4088ac03920f00000000001976a914281524178ae77d18f099a0a6b19879bbdaf8f5f588ac88340300000000001976a914e5529bfc76c65c386628e07887bcdc14fb6c273e88ac8bbf0100000000001976a9147ddab511a972821892d80be6dd9e6bf516d5d9b588aca4e20300000000001976a91423247fed1db47e3e029842ad1f7909cac9a1f99088ac3dc00100000000001976a91402450625ce17b8ade5d96ad923c533b71b990be988ac434b0200000000001976a91448d9a3750a77b8b82f5fb95a405f11d342ba8f8688acaae90100000000001976a914752bc090f0055d44d7d20ac454ed911c3f813da088ac85940300000000001976a914f274773e46569b35b1ba584fccac244158e425bf88acebc70100000000001976a9142b51e9cb43dde4dd8a92d09a51199cfb3878eb1288ac764709000000000017a9148478c1ca0f689489d400edbf24ed360bfb128c3c8715810400000000001976a914cd659b2a60d65966a5ab501c1f29328dc1d6bd0888acdb730800000000001976a91436f0d5492f2ad3c4300043462465d54264fff58188acf0e90100000000001976a914e6eb386f660823bcc602262dfa6203370b6fe25588ac4d370300000000001976a9147af6b70b345d8f2f5807d8f2e936fbb8e56a525b88ace7a10981010000001976a9148510d7d8869d9cd25696bd3b402b9afb534145e388ac61ab0100000000001976a9146e8176ad3f6eb7f8075d9318fd40ec705ecf268888ac103e0200000000001976a91491fe3ebf64713d7601fa4151953d3854d7c43b9a88acb56c0200000000001976a914c48f448be80cb6042535a6de0f481356c3ea2a7d88ac670d0e00000000001976a91417e28fe7861651c12938f12ba9f8a14a7d8dfb2388ac02a50400000000001976a914fc27269fa1146050c03cc2eee5fb34067cada5be88acb5370200000000001976a914ae45b4f9c5f0bdc45961c147c0025d563f5fbd6088ac56df0d00000000001976a9148be061d98fc66d0b737a6b9ab438145576a6209e88ac5cb70300000000001976a91466b123307a9d25a152591b5881dd894e19cbc7bf88acbb671200000000001976a9148c2fb83742814f9d850b652d1f0689c18dd5b44c88ac80910100000000001976a91429f14b6088ac90287691f250a117e60bf548997688ac9ec00d00000000001976a91492dd72aea8bc0d88ab2496d4970ba4b71c26620588ac4c430200000000001976a9142b48e924f7e2d3c502b6955b959a22d012dbd3e788ac17b31200000000001976a91416eb561b28bfb15512424dc4aea1beee5f9b0d9b88ac1b1c0400000000001976a914e6db0504772a0536da23d24cb1c34742ea91b0fb88acec200300000000001976a914a90706c96920610830cba556ce080172acd1011988acf6b90100000000001976a914b95fce244c05a4d6efb5f0d66d62bbe994ee3dc688ac92d60f00000000001976a9145af09f86329b80868cd6eafbe7f661d2de90e06088ac7b0b0300000000001976a914fe53e449e287f4ee167fbb1dd67d464b2a41a2ce88ac69e90100000000001976a914d8860e4706824829bbc6078b280f033e68865dd188ac245b1200000000001976a914a9e057d5ad6abd0ddda6cb4333f9e62df419ce3588ac3dd21100000000001976a9149f21396975e597a7db0d444421c76fd2aa902c5388acc1190600000000001976a9146862af49f2382df70fec99754c38375dd69fad9288acd9e10100000000001976a914f7ab36178c81f5b1affa601459dae14759edb09988ac1b7e0400000000001976a914a84947bdf33462ce26a9583c3525068184cef6da88ac5dee0c00000000001976a91452af7cf856ef39faddd1249dc796c461ef0e3a6088acee720700000000001976a914e225fdc2595e9b1055170138fb4e96788318a82688aca8c60a00000000001976a91460c9cbaa1affa2923706e1d770a9254fdd860b8988acf18c0100000000001976a9142e7acb0d608bffefe9b141e05cb248abf75691b788acd4f90100000000001976a914b98fc09bc3c10c6cc0f7fefd3c96f67db2dd614888ac79a00100000000001976a914d10b3e32a33322d8bd307b23cb07e8beff7bf5a488acc6880c00000000001976a9145b5d69a8948047d051a7d86c9a11ecbc0df2210488ace9210300000000001976a91474eae7840a65cb87779072179b98d5f4b916b6cd88ac07f30d00000000001976a914311b458e02eecb5e521b6e4c1c7d1d0144f60c8f88ac01050500000000001976a914f8d7dbc1f964a0a09f3d281f1bc1e0de70cfb51b88acd7430b00000000001976a9145ab81b07ca7e912ee27485805c88da53a8c202c688acd7250900000000001976a914bd542261171a4d130dce36677f640bb8c8a387ba88acdf661100000000001976a9144b2a7825cbbe0dff636804feef1ca02b13c00e8488ac96c20100000000001976a914d92d26793500609e8d96d098787c022d17c0277c88ac38ff0400000000001976a9140430cdcdc382b5f9b7b4c9c84dd06539327bd2f688ac15b30100000000001976a914c0866e777e46952593da7ecf59f68242911bbcd588accaea0d00000000001976a91446a7054dbbf8c630e25b4136f6bbd16fce8ab67788ac392f0300000000001976a9145c6efcc3749a5dd6e9cb956ead46d5e5505eac0088acd2c50100000000001976a91445f92dcfb71102201b2a51e587c3d5beea2602fa88ac1baa3200000000001976a914830306eca425b9f91908126b8525d88702c17dfe88ac0b1e0700000000001976a91410301efccfb327b338d0ba9d0f531cb82daaae6588ac61770900000000001976a914740285d23ca48bde547ebda737873e9a3ac6008088ac97470200000000001976a91424da07b3d9f6fd125a5efa1332140b2dcbe4883288acef950500000000001976a9142a250cc3b03c87f5a8dd88f362e42224099875d088ac7d262f00000000001976a9140960710259fd49f43b8e4d58ed7c60ba392a3bc588ac30031800000000001976a914ff08ffa30ffc51315cf8ded41258fafd0d5ed4cb88acf2f81100000000001976a9141264e3eca894c0250c95a6a152973f1ef2e26a8c88ac24410300000000001976a91490dac5455505a40c96fad733fe1aae670367aed988ac80200200000000001976a914a114f69d19f04518032eaeb5da1889a48f3cdcef88ac42dd0100000000001976a91401cf86a965844e2257a38ecaa88108db9c7f0a9b88ac59210200000000001976a914792daf00bc585d8d30b705a6c9fef1f77c5a296488acd7401100000000001976a914c51f091f9fcf1e958dbefe351ce37e69198abd2c88ace1ce0500000000001976a914211caefcc01dca8507ed2fd489fb4a39d626f2c888ac963f0400000000001976a914af2e96e0fedfd5d2dc86302e9a0d7ea7e207fbf788ac149e0100000000001976a9143f851ec5f6f608edee8b7277045ab421122fc85188ac28f70e00000000001976a914d9e4503a79d991d50657fd5f4434010ea058c4c388acac410d00000000001976a91499fa5c0cae55888b5a2ad3f40e69a7376334c30388acb96f08000000000017a9147a308cbd68d8449e668bbf7aa7ee2065e13547c7871ade0600000000001976a914360454875351274d8e1783eac9d293923c7a210088ac2b340300000000001976a9144fc52273cd5cc8237cd5420031b00a2f21d8906388acfaa40100000000001976a9148bee9e53c88870b51e0b533f30fa20f846d5882888ac83033200000000001976a914f759fafa255ba3834a7e670c7808a2e03a16fe3288ac26ad0200000000001976a914780336814fae31b4ffe8e3bc0d5c0c07188e6cb788acc2340f00000000001976a914a7e92c63213dc571a85cddc245948a80456a269188acbda50900000000001976a9143b62a0840a82bc08ce45387bc5d8e083011fb3c688ac79c00100000000001976a914b6ac258c3b744a58518e4a1d7d318e7bbc2a036788ac27bf0200000000001976a914d97341acc339893ef641adb5903b9b0d23ac23e588acf05b0200000000001976a914736f731925e1c3b8f45b2d0c992f24cbfad8b35088ac6e0d0b00000000001976a91445886a95bf4283c80d2879ef671501e75b18b93e88ac51f50100000000001976a91442226949afaa28e59d0fdc071b3c96645c41c6d888ac16450800000000001976a914e10f187fb2d320239c4737a2ca04a2aad8ff5dae88acd2130c00000000001976a9140324d89793dd413e4c334416e424ade35038058388ac26511100000000001976a9144e89563c607c6dfa890125ad88dc425b122fab6c88ac10290600000000001976a91494dc215dd0213eda46401ab26c695d364194d3d488ac015d0300000000001976a9144b42ba26c7faa09c6c8db641446b6d4e1a3cf50988ac5e990200000000001976a9140c5793047e029b13a940ce4733df0f1f9604db1688ac49ed0c00000000001976a9147a70165ae659c1cd1c3df8dfe0dbdee493c2000588ace5a10100000000001976a914cc8e3241f6d156b906026e47e3872741d401366b88ac756506009465060000000000000000000000000400008085202f89010f7ef0fe614bf5d8589a1a31c51b4580f1c09df18dea8a1e9e4627d0c08c8005000000006b4830450221009bf72e03a2c9daf9e7007692d04323c3d9dd2cff784b91fcb883725f080d439802202ea0f4a6c415918eef1a5f60765099094b9d5a58147b707baa9ac500e93651f0012102b19570e8f2fd9570af6d40876555ac0e2b18b47d5a9b61d3af0f4fc9ac6188faffffffff000000000095650600909067ffffffffff000177173a9801b9615226b0916baf4fabeb9c5965529a5627c77c10885717e9c5821d8cad05ec6bbb9d7abb8e154da4f92ea76823a53bb03815bd7bff8b1bcfb01300ce443094a8d9999bccb23e4922e7fd07a93d6aef775127701d5d73b06bca20d6224d438fc0dc6e610fbb03715817c5ac20fea4a8d783abea7b628c6e88231b947a18af0aae430404a02352b62ef10f1eabbe2e1b18c87fafb7acf48fccdae659dcac752455a3198ea8563bf3c6875d6f793d60be4d3850593c91894b45c9a1fc37d7743590b4f304a95224d85c1a67a422344e18d3c9d8efb95383426b7026c69c90f941f6d9b836f1f59b9ab135150833546622bf9c21c01b0de839495793e6e13d6388564ece74ca19aa321516f99d58a290869d9cb7ef469261fe6a4ab47e8cce9fa145016ab840f8dc4de624d140143cce2957428d15184ece428014753f79d0ba50b1eae1af2ab2f9b2e64bef03ef56d349a22faadc64706a6722b4ace861fe4d0e5f8a871b929f2dbc5724e8d34de98d4f5d87b244904e05966351b8ef91e0b73f8687f17140aa9d35831cac03027775489a620b09732b854a9fd941fbdb63f9c77a9628c2ccede18ad5237fcb03785568d98369a3e9a8641ce22b74321e7cc4fa3b144789b97c101f0877\n```"
  }
]