[
  {
    "owner": "cloudflare",
    "repo": "workers-sdk",
    "content": "TITLE: Release Process Documentation in Markdown\nDESCRIPTION: Comprehensive guidelines explaining version classification rules, release schedules, and hotfix release procedures for Wrangler, Miniflare, and C3 packages.\nSOURCE: https://github.com/cloudflare/workers-sdk/blob/main/CONTRIBUTING.md#2025-04-21_snippet_19\n\nLANGUAGE: markdown\nCODE:\n```\n### Types of changes\n\nWe use the following guidelines to determine the kind of change for a PR:\n\n- Bugfixes and experimental, beta, and pre-1.0-package features are considered to be 'patch' changes. Be sure to log warnings when experimental features are used.\n- New stable features and new deprecation warnings for future breaking changes are considered 'minor' changes. These changes shouldn't break existing code, but the deprecation warnings should suggest alternate solutions to not trigger the warning.\n- Breaking changes are considered to be 'major' changes. These are usually when deprecations take effect, or functional breaking behaviour is added with relevant logs (either as errors or warnings). Note: breaking changes for experimental, beta, or pre-1.0-package features are considered to be 'minor' changes.\n\n### Styleguide\n\nWhen contributing to Wrangler, please refer to the [`STYLEGUIDE.md file`](STYLEGUIDE.md) file where possible to help maintain consistent patterns throughout Wrangler.\n\n## Releases\n\nWe generally cut Wrangler releases on Tuesday & Thursday each week. If you need a release cut outside of the regular cadence, please reach out to the [@cloudflare/wrangler-admins](https://github.com/orgs/cloudflare/teams/wrangler-admins) team.\n\n### Hotfix releases\n\nOnly members of `@cloudflare/wrangler` can trigger a hotfix release. A hotfix release should be treated as a solution of last resort—before use, please first check whether the fix can be applied and released using the regular Version Packages release flow.\n\nIf a hotfix release of Wrangler, Miniflare, or C3 is required, you should:\n\n- Prepare a hotfix release PR:\n\n  - Checkout the previous release of `workers-sdk`\n  - Apply the changes that should be in the hotfix\n  - Increment the patch version of the packages that should be released as part of the hotfix\n\n- Get approvals for that PR, and make sure CI checks are passing\n- Manually trigger a hotfix release from that PR using the [\"Release a hotfix\"](https://github.com/cloudflare/workers-sdk/actions/workflows/hotfix-release.yml) GitHub action.\n  - Make sure you set the dist-tag to `latest`\n  - Optionally, you can first publish it to the `hotfix` dist-tag on NPM in order to verify the release.\n- **[CRUCIAL]** Once the hotfix release is out and verified, merge the fixes into main before the next regular release of `workers-sdk`.\n- Make sure that the version number of the next changesets-based release of Wrangler/Miniflare/C3 is greater than the version used for the hotfix by adding a dummy `minor` changeset entry for each of the packages that had a hotfix published.\n```\n\n----------------------------------------\n\nTITLE: Using getAssetFromKV with ES Module and ASSET_NAMESPACE\nDESCRIPTION: Example showing how to use getAssetFromKV with the required ASSET_NAMESPACE parameter in ES Module format, passing the environment variable from the worker.\nSOURCE: https://github.com/cloudflare/workers-sdk/blob/main/packages/kv-asset-handler/README.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nreturn getAssetFromKV(\n\t{\n\t\trequest,\n\t\twaitUntil(promise) {\n\t\t\treturn ctx.waitUntil(promise)\n\t\t},\n\t},\n\t{\n\t\tASSET_NAMESPACE: env.__STATIC_CONTENT,\n\t},\n)\n```\n\n----------------------------------------\n\nTITLE: Using getAssetFromKV with ES Modules in Cloudflare Workers\nDESCRIPTION: Example showing how to use getAssetFromKV function in a Cloudflare Worker using ES Modules format, including error handling for common scenarios.\nSOURCE: https://github.com/cloudflare/workers-sdk/blob/main/packages/kv-asset-handler/README.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport manifestJSON from \"__STATIC_CONTENT_MANIFEST\";\nimport {\n\tgetAssetFromKV,\n\tMethodNotAllowedError,\n\tNotFoundError,\n} from \"@cloudflare/kv-asset-handler\";\n\nconst assetManifest = JSON.parse(manifestJSON);\n\nexport default {\n\tasync fetch(request, env, ctx) {\n\t\tif (request.url.includes(\"/docs\")) {\n\t\t\ttry {\n\t\t\t\treturn await getAssetFromKV(\n\t\t\t\t\t{\n\t\t\t\t\t\trequest,\n\t\t\t\t\t\twaitUntil(promise) {\n\t\t\t\t\t\t\treturn ctx.waitUntil(promise);\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tASSET_NAMESPACE: env.__STATIC_CONTENT,\n\t\t\t\t\t\tASSET_MANIFEST: assetManifest,\n\t\t\t\t\t}\n\t\t\t\t);\n\t\t\t} catch (e) {\n\t\t\t\tif (e instanceof NotFoundError) {\n\t\t\t\t\t// ...\n\t\t\t\t} else if (e instanceof MethodNotAllowedError) {\n\t\t\t\t\t// ...\n\t\t\t\t} else {\n\t\t\t\t\treturn new Response(\"An unexpected error occurred\", { status: 500 });\n\t\t\t\t}\n\t\t\t}\n\t\t} else return fetch(request);\n\t},\n};\n```\n\n----------------------------------------\n\nTITLE: Basic Miniflare Usage Example\nDESCRIPTION: Example showing how to create a Miniflare instance, define a simple Worker script, send a request to it, and properly clean up resources. Demonstrates the core workflow of using Miniflare for testing.\nSOURCE: https://github.com/cloudflare/workers-sdk/blob/main/packages/miniflare/README.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Miniflare } from \"miniflare\";\n\n// Create a new Miniflare instance, starting a workerd server\nconst mf = new Miniflare({\n\tscript: `addEventListener(\"fetch\", (event) => {\n    event.respondWith(new Response(\"Hello Miniflare!\"));\n  })`,\n});\n\n// Send a request to the workerd server, the host is ignored\nconst response = await mf.dispatchFetch(\"http://localhost:8787/\");\nconsole.log(await response.text()); // Hello Miniflare!\n\n// Cleanup Miniflare, shutting down the workerd server\nawait mf.dispose();\n```\n\n----------------------------------------\n\nTITLE: Setting Local workerd Path in Shell\nDESCRIPTION: Demonstrates how to set the MINIFLARE_WORKERD_PATH environment variable to use a local build of the workerd binary with Miniflare.\nSOURCE: https://github.com/cloudflare/workers-sdk/blob/main/packages/miniflare/README.md#2025-04-21_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\n$ export MINIFLARE_WORKERD_PATH=\"<WORKERD_REPO_DIR>/bazel-bin/src/workerd/server/workerd\"\n```\n\n----------------------------------------\n\nTITLE: Using getAssetFromKV with Service Worker in Cloudflare Workers\nDESCRIPTION: Example showing how to use getAssetFromKV function in a Cloudflare Worker using the Service Worker format, with event-based handling and error management.\nSOURCE: https://github.com/cloudflare/workers-sdk/blob/main/packages/kv-asset-handler/README.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport {\n\tgetAssetFromKV,\n\tMethodNotAllowedError,\n\tNotFoundError,\n} from \"@cloudflare/kv-asset-handler\";\n\naddEventListener(\"fetch\", (event) => {\n\tevent.respondWith(handleEvent(event));\n});\n\nasync function handleEvent(event) {\n\tif (event.request.url.includes(\"/docs\")) {\n\t\ttry {\n\t\t\treturn await getAssetFromKV(event);\n\t\t} catch (e) {\n\t\t\tif (e instanceof NotFoundError) {\n\t\t\t\t// ...\n\t\t\t} else if (e instanceof MethodNotAllowedError) {\n\t\t\t\t// ...\n\t\t\t} else {\n\t\t\t\treturn new Response(\"An unexpected error occurred\", { status: 500 });\n\t\t\t}\n\t\t}\n\t} else return fetch(event.request);\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Cloudflare Workers with Package Managers in Bash\nDESCRIPTION: Command to create a new Cloudflare Workers project using npm, pnpm, or yarn package managers. This is the recommended way to quickly start a new project with proper scaffolding.\nSOURCE: https://github.com/cloudflare/workers-sdk/blob/main/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm create cloudflare@latest\n# or\npnpm create cloudflare@latest\n# or\nyarn create cloudflare@latest\n```\n\n----------------------------------------\n\nTITLE: Single Page App Request Handling\nDESCRIPTION: Example of using the serveSinglePageApp helper function to handle routing for single-page applications with frameworks like React Router or VueJS.\nSOURCE: https://github.com/cloudflare/workers-sdk/blob/main/packages/kv-asset-handler/README.md#2025-04-21_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nimport { getAssetFromKV, serveSinglePageApp } from '@cloudflare/kv-asset-handler'\n...\nlet asset = await getAssetFromKV(event, { mapRequestToAsset: serveSinglePageApp })\n```\n\n----------------------------------------\n\nTITLE: Configuring Wrangler Project Settings in TOML\nDESCRIPTION: Basic Wrangler configuration file example showing essential settings including project name, main entry point, and compatibility date settings.\nSOURCE: https://github.com/cloudflare/workers-sdk/blob/main/packages/wrangler/README.md#2025-04-21_snippet_1\n\nLANGUAGE: toml\nCODE:\n```\nname = \"my-worker\"\nmain = \"./src/index.ts\"\ncompatibility_date = \"YYYY-MM-DD\"\n```\n\n----------------------------------------\n\nTITLE: Example Telemetry Event JSON Structure for Create-Cloudflare\nDESCRIPTION: This snippet shows the structure of a typical telemetry event sent to Cloudflare. It includes information such as event type, device ID, timestamp, and various properties related to the user's environment and command execution.\nSOURCE: https://github.com/cloudflare/workers-sdk/blob/main/packages/create-cloudflare/telemetry.md#2025-04-21_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"event\": \"c3 session started\",\n\t\"deviceId\": \"9fd5d422-99a1-4c7d-9666-ca3637927fa6\",\n\t\"timestamp\": 1726760778899,\n\t\"properties\": {\n\t\t\"amplitude_session_id\": 1726760778800,\n\t\t\"amplitude_event_id\": 0,\n\t\"platform\": \"Mac OS\",\n\t\t\"c3Version\": \"2.34.5\",\n\t\t\"isFirstUsage\": false,\n\t\t\"packageManager\": \"npm\",\n\t\t\"args\": {\n\t\t\t\"_\": [],\n\t\t\t\"auto-update\": false,\n\t\t\t\"autoUpdate\": false,\n\t\t\t\"experimental\": false,\n\t\t\t\"open\": true,\n\t\t\t\"$0\": \"create-cloudflare\",\n\t\t\t\"additionalArgs\": []\n\t\t}\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Using Cloudflare Unenv Preset with TypeScript\nDESCRIPTION: This snippet demonstrates how to import and use the cloudflare preset from @cloudflare/unenv-preset within the unenv configuration system. It shows how to define the environment using the preset and access the resulting configuration properties.\nSOURCE: https://github.com/cloudflare/workers-sdk/blob/main/packages/unenv-preset/README.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { cloudflare } from \"@cloudflare/unenv-preset\";\nimport { defineEnv } from \"unenv\";\n\nconst { env } = defineEnv({\n\tpresets: [cloudflare],\n});\n\nconst { alias, inject, external, polyfill } = env;\n```\n\n----------------------------------------\n\nTITLE: Defining MiniflareOptions Type in TypeScript\nDESCRIPTION: Defines the MiniflareOptions type as a combination of SharedOptions and either WorkerOptions or an array of WorkerOptions. This type is used to configure Miniflare instances.\nSOURCE: https://github.com/cloudflare/workers-sdk/blob/main/packages/miniflare/README.md#2025-04-21_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\ntype MiniflareOptions = SharedOptions & (WorkerOptions | { workers: WorkerOptions[] })\n```\n\n----------------------------------------\n\nTITLE: Creating Command Structure in TypeScript\nDESCRIPTION: Demonstrates how to create command namespaces and define a new command with arguments and handler implementation using createNamespace and createCommand utilities.\nSOURCE: https://github.com/cloudflare/workers-sdk/blob/main/packages/wrangler/CONTRIBUTING.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createCommand, createNamespace } from \"../core/create-command\";\nimport { createKVNamespace } from \"./helpers\";\n\n// Namespaces are the prefix before the subcommand\n// eg \"wrangler kv\" in \"wrangler kv put\"\n// eg \"wrangler kv key\" in \"wrangler kv key put\"\nexport const kvNamespace = createNamespace({\n\tmetadata: {\n\t\tdescription: \"Commands for interacting with Workers KV\",\n\t\tstatus: \"stable\",\n\t},\n});\n\n// Every level of namespaces must be defined\n// eg \"wrangler kv key\" in \"wrangler kv key put\"\nexport const kvKeyNamespace = createKVNamespace({\n\tmetadata: {\n\t\tdescription: \"Commands for interacting with Workers KV data\",\n\t\tstatus: \"stable\",\n\t},\n});\n\n// Define the command args, implementation and metadata\nexport const kvKeyPutCommand = createCommand({\n\tmetadata: {\n\t\tdescription: \"Put a key-value pair into a Workers KV namespace\",\n\t\tstatus: \"stable\",\n\t},\n\targs: {\n\t\tkey: {\n\t\t\ttype: \"string\",\n\t\t\tdescription: \"The key to put into the KV namespace\",\n\t\t\tdemandOption: true,\n\t\t},\n\t\tvalue: {\n\t\t\ttype: \"string\",\n\t\t\tdescription: \"The value to put into the KV namespace\",\n\t\t\tdemandOption: true,\n\t\t},\n\t\t\"namespace-id\": {\n\t\t\ttype: \"string\",\n\t\t\tdescription: \"The namespace to put the key-value pair into\",\n\t\t},\n\t},\n\t// the positionalArgs defines which of the args are positional and in what order\n\tpositionalArgs: [\"key\", \"value\"],\n\thandler(args, ctx) {\n\t\t// implementation here\n\t},\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing 401 Authentication Handler with API Keys in Cloudflare Workers\nDESCRIPTION: This code snippet demonstrates how to create a handler function that catches 401 Unauthorized responses, attempts to authenticate using an API key, and then retries the original request. The implementation uses fetch to make API calls and includes error handling for authentication failures.\nSOURCE: https://github.com/cloudflare/workers-sdk/blob/main/packages/edge-preview-authenticated-proxy/README.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nasync function handle401(request, env) {\n  const apiKey = env.API_KEY;\n  const originalResponse = await fetch(request);\n  \n  if (originalResponse.status === 401) {\n    // Authenticate with API key\n    const authResponse = await fetch(\"https://api.example.com/auth\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({ apiKey })\n    });\n    \n    if (!authResponse.ok) {\n      return new Response(\"Authentication failed\", { status: 403 });\n    }\n    \n    const authData = await authResponse.json();\n    const token = authData.token;\n    \n    // Retry the original request with the token\n    const newRequest = new Request(request);\n    newRequest.headers.set(\"Authorization\", `Bearer ${token}`);\n    return fetch(newRequest);\n  }\n  \n  return originalResponse;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring HTTPS for Miniflare in JavaScript\nDESCRIPTION: This snippet demonstrates how to set up HTTPS for Miniflare using custom key and certificate files. It requires generating a self-signed certificate and specifying the paths to the key and certificate files in the Miniflare configuration.\nSOURCE: https://github.com/cloudflare/workers-sdk/blob/main/packages/miniflare/README.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nnew Miniflare({\n\thttpsKeyPath: \"key.pem\",\n\thttpsCertPath: \"cert.pem\",\n});\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Wrangler Command Syntax in Shell\nDESCRIPTION: Shows the basic syntax for Wrangler commands, following an object-verb order and including subcommands with arguments and options.\nSOURCE: https://github.com/cloudflare/workers-sdk/blob/main/STYLEGUIDE.md#2025-04-21_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nwrangler <object / noun> <verb>\n```\n\nLANGUAGE: sh\nCODE:\n```\nwrangler <command> <subcommand> <arg> --<option>`\n```\n\n----------------------------------------\n\nTITLE: Asset Manifest Configuration in ES Module Format\nDESCRIPTION: Demonstrates how to set up and use the ASSET_MANIFEST in ES Module format, including parsing the manifest JSON and customizing asset mappings.\nSOURCE: https://github.com/cloudflare/workers-sdk/blob/main/packages/kv-asset-handler/README.md#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nimport manifestJSON from '__STATIC_CONTENT_MANIFEST'\nlet manifest = JSON.parse(manifestJSON)\nmanifest['index.html'] = 'index.special.html'\n\nreturn getAssetFromKV(\n\t{\n\t\trequest,\n\t\twaitUntil(promise) {\n\t\t\treturn ctx.waitUntil(promise)\n\t\t},\n\t},\n\t{\n\t\tASSET_MANIFEST: manifest,\n\t\t// ...\n\t},\n)\n```\n\n----------------------------------------\n\nTITLE: Generating Test Resources with Miniflare for Cloudflare Workers in JavaScript\nDESCRIPTION: This script initializes Miniflare with KV, R2, and D1 persistence, then populates each storage type with sample data. It creates a KV namespace with a key-value pair, an R2 bucket with an object, and a D1 database with a table and record. After setup, it properly disposes of the Miniflare instance.\nSOURCE: https://github.com/cloudflare/workers-sdk/blob/main/packages/miniflare/test/fixtures/migrations/3.20230821.0/README.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport path from \"node:path\";\nimport url from \"node:url\";\nimport { Miniflare } from \"miniflare\";\n\nconst __filename = url.fileURLToPath(import.meta.url);\nconst __dirname = path.dirname(__filename);\n\nconst mf = new Miniflare({\n\tscript: \"\",\n\tmodules: true,\n\n\tkvPersist: path.join(__dirname, \"kv\"),\n\tkvNamespaces: [\"NAMESPACE\"],\n\n\tr2Persist: path.join(__dirname, \"r2\"),\n\tr2Buckets: [\"BUCKET\"],\n\n\td1Persist: path.join(__dirname, \"d1\"),\n\td1Databases: [\"DATABASE\"],\n});\n\nconst kvNamespace = await mf.getKVNamespace(\"NAMESPACE\");\nawait kvNamespace.put(\"key\", \"value\");\n\nconst r2Bucket = await mf.getR2Bucket(\"BUCKET\");\nawait r2Bucket.put(\"key\", \"value\");\n\nconst d1Database = await mf.getD1Database(\"DATABASE\");\nawait d1Database.exec(\n\t\"CREATE TABLE entries (key TEXT PRIMARY KEY, value TEXT);\"\n);\nawait d1Database\n\t.prepare(\"INSERT INTO entries (key, value) VALUES (?1, ?2)\")\n\t.bind(\"a\", \"1\")\n\t.run();\n\nawait mf.dispose();\n```\n\n----------------------------------------\n\nTITLE: Configuring Mixed Module Types in wrangler.toml\nDESCRIPTION: This TOML configuration demonstrates how to handle mixed module types by defining multiple rules. It specifies CommonJS for .cjs files and a specific JS file, while treating .mjs files as ES modules.\nSOURCE: https://github.com/cloudflare/workers-sdk/blob/main/fixtures/no-bundle-import/CHANGELOG.md#2025-04-21_snippet_3\n\nLANGUAGE: toml\nCODE:\n```\nrules = [\n  { type = \"CommonJS\", globs = [\"nested/say-hello.js\", \"**/*.cjs\"]},\n  { type = \"ESModule\", globs = [\"**/*.mjs\"]}\n]\n```\n\n----------------------------------------\n\nTITLE: Implementing Multiple Choice Prompt in Shell\nDESCRIPTION: Demonstrates the format for a multiple choice prompt in Wrangler, including the command, prompt request, available choices, and user selection handling.\nSOURCE: https://github.com/cloudflare/workers-sdk/blob/main/STYLEGUIDE.md#2025-04-21_snippet_8\n\nLANGUAGE: sh\nCODE:\n```\nWrangler <command>\n<prompt request>\n  ◉ <Choice 1>\n  ○ <Choice 2>\n  ○ <Choice 3>\n\n  #User presses enter#\n\n<response detailing what task/s have been performed and with what values where applicable OR continue to next prompt>\n```\n\n----------------------------------------\n\nTITLE: Default Cache Control Configuration for KV Asset Handler\nDESCRIPTION: Example showing the default cacheControl configuration object with settings for browserTTL, edgeTTL, and bypassCache parameters.\nSOURCE: https://github.com/cloudflare/workers-sdk/blob/main/packages/kv-asset-handler/README.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nlet cacheControl = {\n\tbrowserTTL: null, // do not set cache control ttl on responses\n\tedgeTTL: 2 * 60 * 60 * 24, // 2 days\n\tbypassCache: false, // do not bypass Cloudflare's cache\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Error and Payload Interfaces in TypeScript\nDESCRIPTION: Defines the TypeScript interfaces that 'format-errors' expects for input. The Payload interface defines the structure of data sent to the Worker, including URL, method, headers, and error details. The JsonError interface defines the structure of error objects.\nSOURCE: https://github.com/cloudflare/workers-sdk/blob/main/packages/format-errors/README.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface JsonError {\n\tmessage?: string;\n\tname?: string;\n\tstack?: string;\n\tcause?: JsonError;\n}\nexport interface Payload {\n\turl?: string;\n\tmethod?: string;\n\theaders?: Record<string, string>;\n\terror?: JsonError;\n}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Wrapped Bindings in Miniflare Magic Proxy\nDESCRIPTION: This snippet shows how to use wrapped bindings with the Miniflare magic proxy, allowing access to methods of a wrapped class through the getBindings() function.\nSOURCE: https://github.com/cloudflare/workers-sdk/blob/main/packages/miniflare/CHANGELOG.md#2025-04-21_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Miniflare } from \"miniflare\";\n\nconst mf = new Miniflare({\n\tworkers: [\n\t\t{\n\t\t\twrappedBindings: {\n\t\t\t\tGreeter: {\n\t\t\t\t\tscriptName: \"impl\",\n\t\t\t\t},\n\t\t\t},\n\t\t\tmodules: true,\n\t\t\tscript: `export default { fetch(){ return new Response(''); } }`,\n\t\t},\n\t\t{\n\t\t\tmodules: true,\n\t\t\tname: \"impl\",\n\t\t\tscript: `\n\t\t\t\tclass Greeter {\n\t\t\t\t\tsayHello(name) {\n\t\t\t\t\t\treturn \"Hello \" + name;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\texport default function (env) {\n\t\t\t\t\treturn new Greeter();\n\t\t\t\t}\n\t\t\t`,\n\t\t},\n\t],\n});\n\nconst { Greeter } = await mf.getBindings();\n\nconsole.log(Greeter.sayHello(\"world\")); // <--- prints 'Hello world'\n\nawait mf.dispose();\n```\n\n----------------------------------------\n\nTITLE: Defining Module Rules in JavaScript for Miniflare Worker Configuration\nDESCRIPTION: This snippet demonstrates the default module rules used by Miniflare when 'modules: true' is set. It specifies how different file extensions are treated as either ES Modules or CommonJS modules.\nSOURCE: https://github.com/cloudflare/workers-sdk/blob/main/packages/miniflare/README.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n[\n  { type: \"ESModule\", include: [\"**/*.mjs\"] },\n  { type: \"CommonJS\", include: [\"**/*.js\", \"**/*.cjs\"] },\n]\n```\n\n----------------------------------------\n\nTITLE: Disabling ETag Cache Control\nDESCRIPTION: Shows how to disable ETag-based caching by setting the bypassCache option to true in the cache control configuration.\nSOURCE: https://github.com/cloudflare/workers-sdk/blob/main/packages/kv-asset-handler/README.md#2025-04-21_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\n/* Turn etags off */\nlet cacheControl = {\n\tbypassCache: true,\n};\n```\n\n----------------------------------------\n\nTITLE: Passing Miniflare Instance to Service Binding Handlers in JavaScript\nDESCRIPTION: This snippet demonstrates how to use the new Miniflare-typed parameter in function-valued service binding handlers, providing access to the correct bindings when re-using service functions across instances.\nSOURCE: https://github.com/cloudflare/workers-sdk/blob/main/packages/miniflare/CHANGELOG.md#2025-04-21_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\nimport assert from \"node:assert\";\nimport { Miniflare, Response } from \"miniflare\";\n\nconst mf = new Miniflare({\n\tserviceBindings: {\n\t\tSERVICE(request, instance) {\n\t\t\tassert(instance === mf);\n\t\t\treturn new Response();\n\t\t},\n\t},\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Cloudflare Vite Plugin in Vite Config\nDESCRIPTION: Basic setup for integrating Cloudflare Workers with Vite. This snippet demonstrates how to configure the @cloudflare/vite-plugin in a vite.config.ts file, enabling Vite to work with Cloudflare Workers runtime.\nSOURCE: https://github.com/cloudflare/workers-sdk/blob/main/packages/vite-plugin-cloudflare/README.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// vite.config.ts\n\nimport { defineConfig } from \"vite\";\nimport { cloudflare } from \"@cloudflare/vite-plugin\";\n\nexport default defineConfig({\n  plugins: [cloudflare()],\n});\n```\n\n----------------------------------------\n\nTITLE: Creating R2 Object Storage Schema in SQL\nDESCRIPTION: Defines SQL tables for storing R2 objects, multipart uploads, and multipart parts. Includes fields for object metadata, upload states, and part information.\nSOURCE: https://github.com/cloudflare/workers-sdk/blob/main/packages/miniflare/CONTRIBUTING.md#2025-04-21_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE IF NOT EXISTS _mf_objects (\n  key TEXT PRIMARY KEY,\n  blob_id TEXT,                    -- null if multipart\n  version TEXT NOT NULL,\n  size INTEGER NOT NULL,           -- total size of object (all parts) in bytes\n  etag TEXT NOT NULL,              -- hex MD5 hash if not multipart\n  uploaded INTEGER NOT NULL,       -- milliseconds since unix epoch\n  checksums TEXT NOT NULL,         -- JSON-serialised `R2StringChecksums` (workers-types)\n  http_metadata TEXT NOT NULL,     -- JSON-serialised `R2HTTPMetadata` (workers-types)\n  custom_metadata TEXT NOT NULL    -- JSON-serialised user-defined metadata\n);\n\nCREATE TABLE IF NOT EXISTS _mf_multipart_uploads (\n  upload_id TEXT PRIMARY KEY,\n  key TEXT NOT NULL,\n  http_metadata TEXT NOT NULL,     -- JSON-serialised `R2HTTPMetadata` (workers-types)\n  custom_metadata TEXT NOT NULL,   -- JSON-serialised user-defined metadata\n  state TINYINT DEFAULT 0 NOT NULL -- 0 = IN_PROGRES, 1 = COMPLETED, 2 = ABORTED\n  -- NOTE: we need to keep completed/aborted uploads around for referential\n  -- integrity, and because error messages are different when attempting to\n  -- upload parts to them\n);\n\nCREATE TABLE IF NOT EXISTS _mf_multipart_parts (\n  upload_id TEXT NOT NULL REFERENCES _mf_multipart_uploads(upload_id),\n  part_number INTEGER NOT NULL,\n  blob_id TEXT NOT NULL,\n  size INTEGER NOT NULL,           -- NOTE: used to identify which parts to read for range requests\n  etag TEXT NOT NULL,              -- NOTE: multipart part ETag's are not MD5 checksums\n  checksum_md5 TEXT NOT NULL,      -- NOTE: used in construction of final object's ETag\n  object_key TEXT REFERENCES _mf_objects(key) DEFERRABLE INITIALLY DEFERRED,\n  PRIMARY KEY (upload_id, part_number)\n);\n```\n\n----------------------------------------\n\nTITLE: Configuring Named Entrypoints for Service Bindings in Miniflare\nDESCRIPTION: This snippet shows how to configure named entrypoints for service bindings in Miniflare, allowing binding to specific exports of another Worker.\nSOURCE: https://github.com/cloudflare/workers-sdk/blob/main/packages/miniflare/CHANGELOG.md#2025-04-21_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\nimport { kCurrentWorker, Miniflare } from \"miniflare\";\n\nconst mf = new Miniflare({\n\tworkers: [\n\t\t{\n\t\t\tname: \"a\",\n\t\t\tserviceBindings: {\n\t\t\t\tA_RPC_SERVICE: { name: kCurrentWorker, entrypoint: \"RpcEntrypoint\" },\n\t\t\t\tA_NAMED_SERVICE: { name: \"a\", entrypoint: \"namedEntrypoint\" },\n\t\t\t\tB_NAMED_SERVICE: { name: \"b\", entrypoint: \"anotherNamedEntrypoint\" },\n\t\t\t},\n\t\t\tcompatibilityFlags: [\"rpc\"],\n\t\t\tmodules: true,\n\t\t\tscript: `\n\t\t\timport { WorkerEntrypoint } from \"cloudflare:workers\";\n\n\t\t\texport class RpcEntrypoint extends WorkerEntrypoint {\n\t\t\t\tping() { return \"a:rpc:pong\"; }\n\t\t\t}\n\n\t\t\texport const namedEntrypoint = {\n\t\t\t\tfetch(request, env, ctx) { return new Response(\"a:named:pong\"); }\n\t\t\t};\n\n\t\t\t...\n\t\t\t`,\n\t\t},\n\t\t{\n\t\t\tname: \"b\",\n\t\t\tmodules: true,\n\t\t\tscript: `\n\t\t\texport const anotherNamedEntrypoint = {\n\t\t\t\tfetch(request, env, ctx) { return new Response(\"b:named:pong\"); }\n\t\t\t};\n\t\t\t`,\n\t\t},\n\t],\n});\n```\n\n----------------------------------------\n\nTITLE: Custom Root Paths for Miniflare Options in JavaScript\nDESCRIPTION: This code shows how to use the new rootPath option in Miniflare to customize the resolution of file-path-valued options. It demonstrates shared and per-worker rootPath configurations.\nSOURCE: https://github.com/cloudflare/workers-sdk/blob/main/packages/miniflare/CHANGELOG.md#2025-04-21_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Miniflare } from \"miniflare\";\n\nconst mf1 = new Miniflare({\n\tscriptPath: \"index.mjs\",\n});\n\nconst mf2 = new Miniflare({\n\trootPath: \"a/b\",\n\tscriptPath: \"c/index.mjs\",\n});\n\nconst mf3 = new Miniflare({\n\trootPath: \"/a/b\",\n\tworkers: [\n\t\t{\n\t\t\tname: \"1\",\n\t\t\trootPath: \"c\",\n\t\t\tscriptPath: \"index.mjs\",\n\t\t},\n\t\t{\n\t\t\tname: \"2\",\n\t\t\tscriptPath: \"index.mjs\",\n\t\t},\n\t],\n});\n```\n\n----------------------------------------\n\nTITLE: Removing ASSETS Binding in SPA Templates\nDESCRIPTION: Removes unnecessary ASSETS binding call in React and Vue SPA templates due to SPA mode being enabled by default for compat dates since 2025-04-01.\nSOURCE: https://github.com/cloudflare/workers-sdk/blob/main/packages/create-cloudflare/CHANGELOG.md#2025-04-21_snippet_1\n\nLANGUAGE: Markdown\nCODE:\n```\nremove unnecessary ASSETS binding call in SPA templates\n\nWith SPA mode now enabled by default for compat dates since 2025-04-01, the Workers in the React and Vue templates no longer need this fallback ASSETS binding.\n```\n\n----------------------------------------\n\nTITLE: Adding Support for CF-Connecting-IP Header in Miniflare\nDESCRIPTION: Implements support for the CF-Connecting-IP header to determine the client's IP address in Workers running on Miniflare.\nSOURCE: https://github.com/cloudflare/workers-sdk/blob/main/packages/miniflare/CHANGELOG.md#2025-04-21_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\n// Example usage in a Worker\naddEventListener('fetch', event => {\n  const clientIP = event.request.headers.get('CF-Connecting-IP');\n  // Use clientIP...\n});\n```\n\n----------------------------------------\n\nTITLE: Introducing Bindings View for Wrangler Config in Cloudflare Workers Extension\nDESCRIPTION: This change introduces a bindings view that lists all the KV, D1 and R2 bindings from the Wrangler configuration files (wrangler.toml, wrangler.jsonc), providing an easy overview of configured bindings.\nSOURCE: https://github.com/cloudflare/workers-sdk/blob/main/packages/cloudflare-workers-bindings-extension/CHANGELOG.md#2025-04-21_snippet_6\n\nLANGUAGE: markdown\nCODE:\n```\n- [#7582](https://github.com/cloudflare/workers-sdk/pull/7582) [`ab0ac94`](https://github.com/cloudflare/workers-sdk/commit/ab0ac94849b8cabe6b29340bc5d539a8a9d61ab8) Thanks [@edmundhung](https://github.com/edmundhung)! - Introduce a bindings view that lists all the KV, D1 and R2 bindings on the wrangler config (e.g. `wrangler.toml`, `wrangler.jsonc`)\n```\n\n----------------------------------------\n\nTITLE: Adding Documentation Links in Cloudflare Workers Extension\nDESCRIPTION: This update adds documentation links to the binding created notification and bindings tree view. It improves user access to relevant documentation directly from the extension interface.\nSOURCE: https://github.com/cloudflare/workers-sdk/blob/main/packages/cloudflare-workers-bindings-extension/CHANGELOG.md#2025-04-21_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n- [#7689](https://github.com/cloudflare/workers-sdk/pull/7689) [`3886065`](https://github.com/cloudflare/workers-sdk/commit/38860655ba9a77e3504680b593da0a4e9e8ae903) Thanks [@emily-shen](https://github.com/emily-shen)! - Add documentation links to binding created notification and bindings tree view\n```\n\n----------------------------------------\n\nTITLE: Long-lived Wrangler Command Test in TypeScript\nDESCRIPTION: This example shows how to write a long-lived command test for Wrangler using the WranglerE2ETestHelper class. It demonstrates testing the 'wrangler dev' command, including file watching and rebuilding functionality.\nSOURCE: https://github.com/cloudflare/workers-sdk/blob/main/packages/wrangler/e2e/README.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nit(`can modify worker during ${cmd}`, async () => {\n\tconst helper = new WranglerE2ETestHelper();\n\tawait helper.seed({\n\t\t\"wrangler.toml\": dedent`\n\t\t\tname = \"worker\"\n\t\t\tmain = \"src/index.ts\"\n\t\t\tcompatibility_date = \"2023-01-01\"\n\t\t\tcompatibility_flags = [\"nodejs_compat\"]\n\n\t\t\t[vars]\n\t\t\tKEY = \"value\"\n\t\t`,\n\t\t\"src/index.ts\": dedent`\n\t\t\texport default {\n\t\t\t\tfetch(request) {\n\t\t\t\t\treturn new Response(\"Hello World!\")\n\t\t\t\t}\n\t\t\t}`,\n\t\t\"package.json\": dedent`\n\t\t\t{\n\t\t\t\t\"name\": \"worker\",\n\t\t\t\t\"version\": \"0.0.0\",\n\t\t\t\t\"private\": true\n\t\t\t}\n\t\t`,\n\t});\n\tconst worker = helper.runLongLived(cmd);\n\n\tconst { url } = await worker.waitForReady();\n\n\tawait expect(fetch(url).then((r) => r.text())).resolves.toMatchSnapshot();\n\n\tawait helper.seed({\n\t\t\"src/index.ts\": dedent`\n\t\t\texport default {\n\t\t\t\tfetch(request, env) {\n\t\t\t\t\treturn new Response(\"Updated Worker! \" + env.KEY)\n\t\t\t\t}\n\t\t\t}\n\t\t`,\n\t});\n\n\tawait worker.waitForReload();\n\n\tawait expect(fetchText(url)).resolves.toMatchSnapshot();\n});\n```\n\n----------------------------------------\n\nTITLE: Passing Sources to Format-errors Using PostMessage and MessageChannel\nDESCRIPTION: Demonstrates how to pass source files to the format-errors iframe for enhanced error context. This code sets up a MessageChannel between the parent window and the iframe, listens for source requests, and responds with the requested source files.\nSOURCE: https://github.com/cloudflare/workers-sdk/blob/main/packages/format-errors/README.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst encoder = new TextEncoder();\nconst channel = new MessageChannel();\n\niframeEl.addEventListener(\"load\", () => {\n\tiframeEl.contentWindow?.postMessage(\"PORT\", \"*\", [channel.port2]);\n});\n\nchannel.port1.onmessage = (data) => {\n\tif (data.type === \"RequestSources\") {\n\t\tconst message = {\n\t\t\ttype: \"SourcesLoaded\",\n\t\t\tbody: {\n\t\t\t\tfiles: [\n\t\t\t\t\t{\n\t\t\t\t\t\tpath: \"index.js\",\n\t\t\t\t\t\tcontents: encoder.encode(\"console.log('hi')\"),\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t\tinternalLines: 0,\n\t\t\t},\n\t\t};\n\t\tchannel.port1.postMessage(\n\t\t\tmessage,\n\t\t\tmessage.body.files.map((f) => f.contents.buffer)\n\t\t);\n\t}\n};\n```\n\n----------------------------------------\n\nTITLE: Setting up Mock NPM Registry in Vitest Global Setup\nDESCRIPTION: Example of how to use startMockNpmRegistry() in a Vitest global setup file to create a mock npm registry with locally built packages, create a temporary test project, and install dependencies.\nSOURCE: https://github.com/cloudflare/workers-sdk/blob/main/packages/mock-npm-registry/README.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport default async function ({ provide }: GlobalSetupContext) {\n\tconst stop = await startMockNpmRegistry(\"@cloudflare/vitest-pool-workers\");\n\n\t// Create temporary directory\n\tconst projectPath = await createTestProject();\n\texecSync(\"pnpm install\", { cwd: projectPath, stdio: \"ignore\" });\n\n\tprovide(\"tmpPoolInstallationPath\", projectPath);\n\n```\n\n----------------------------------------\n\nTITLE: Installing Cloudflare Vitest Pool Workers Package\nDESCRIPTION: The package name for the Cloudflare Workers Vitest integration. This package allows developers to write and run Vitest tests specifically for Cloudflare Workers projects.\nSOURCE: https://github.com/cloudflare/workers-sdk/blob/main/packages/vitest-pool-workers/README.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# `@cloudflare/vitest-pool-workers`\n```\n\n----------------------------------------\n\nTITLE: Disabling Create-Cloudflare Telemetry via CLI Command\nDESCRIPTION: This command disables telemetry data collection for Create-Cloudflare using the CLI. It provides users with an easy way to opt-out of data sharing.\nSOURCE: https://github.com/cloudflare/workers-sdk/blob/main/packages/create-cloudflare/telemetry.md#2025-04-21_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nnpm create cloudflare telemetry disable\n```\n\n----------------------------------------\n\nTITLE: Implementing Wrapped Bindings in Miniflare Worker Configuration\nDESCRIPTION: This extensive example demonstrates how to set up and use wrapped bindings in Miniflare. It includes the configuration for multiple Workers, custom service bindings, and the implementation of a custom KV-like storage system.\nSOURCE: https://github.com/cloudflare/workers-sdk/blob/main/packages/miniflare/README.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Miniflare } from \"miniflare\";\nconst store = new Map<string, string>();\nconst mf = new Miniflare({\n  workers: [\n    {\n      wrappedBindings: {\n        MINI_KV: {\n          scriptName: \"mini-kv\", // Use Worker named `mini-kv` for implementation\n          bindings: { NAMESPACE: \"ns\" }, // Override `NAMESPACE` inner binding\n        },\n      },\n      modules: true,\n      script: `export default {\n        async fetch(request, env, ctx) {\n          // Example usage of wrapped binding\n          await env.MINI_KV.set(\"key\", \"value\");\n          return new Response(await env.MINI_KV.get(\"key\"));\n        }\n      }`,\n    },\n    {\n      name: \"mini-kv\",\n      serviceBindings: {\n        // Function-valued service binding for accessing Node.js state\n        async STORE(request) {\n          const { pathname } = new URL(request.url);\n          const key = pathname.substring(1);\n          if (request.method === \"GET\") {\n            const value = store.get(key);\n            const status = value === undefined ? 404 : 200;\n            return new Response(value ?? null, { status });\n          } else if (request.method === \"PUT\") {\n            const value = await request.text();\n            store.set(key, value);\n            return new Response(null, { status: 204 });\n          } else if (request.method === \"DELETE\") {\n            store.delete(key);\n            return new Response(null, { status: 204 });\n          } else {\n            return new Response(null, { status: 405 });\n          }\n        },\n      },\n      modules: true,\n      script: `\n      // Implementation of binding\n      class MiniKV {\n        constructor(env) {\n          this.STORE = env.STORE;\n          this.baseURL = \"http://x/\" + (env.NAMESPACE ?? \"\") + \":\";\n        }\n        async get(key) {\n          const res = await this.STORE.fetch(this.baseURL + key);\n          return res.status === 404 ? null : await res.text();\n        }\n        async set(key, body) {\n          await this.STORE.fetch(this.baseURL + key, { method: \"PUT\", body });\n        }\n        async delete(key) {\n          await this.STORE.fetch(this.baseURL + key, { method: \"DELETE\" });\n        }\n      }\n\n      // env has the type { STORE: Fetcher, NAMESPACE?: string }\n      export default function (env) {\n        return new MiniKV(env);\n      }\n      `,\n    },\n  ],\n});\n```\n\n----------------------------------------\n\nTITLE: Importing WASM module with --no-bundle in JavaScript\nDESCRIPTION: This snippet demonstrates how to import a WebAssembly module in a Worker when using the --no-bundle flag. It shows the basic pattern of importing a .wasm file and using it with WebAssembly.instantiate().\nSOURCE: https://github.com/cloudflare/workers-sdk/blob/main/fixtures/no-bundle-import/CHANGELOG.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// index.js\nimport wasm from './example.wasm'\n\nexport default {\n  async fetch() {\n    await WebAssembly.instantiate(wasm, ...)\n    ...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing KV Asset Handler with npm\nDESCRIPTION: Command to install the @cloudflare/kv-asset-handler package using npm.\nSOURCE: https://github.com/cloudflare/workers-sdk/blob/main/packages/kv-asset-handler/README.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm i @cloudflare/kv-asset-handler\n```\n\n----------------------------------------\n\nTITLE: Defining Asset Worker in Markdown\nDESCRIPTION: This snippet defines the Asset Worker, explaining its role as a Cloudflare Worker for serving static assets. It mentions the worker's usage in production deployments and local development with wrangler dev.\nSOURCE: https://github.com/cloudflare/workers-sdk/blob/main/packages/workers-shared/asset-worker/README.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# `asset-worker`\n\nThe Asset Worker is a [Cloudflare Worker](https://developers.cloudflare.com/workers/) that is responsible of serving static assets. It is deployed in production and is also used in local `wrangler dev`.\n```\n\n----------------------------------------\n\nTITLE: Building Workers Playground Command\nDESCRIPTION: Command to build the Workers Playground package, generating files in the dist directory for Cloudflare Pages deployment.\nSOURCE: https://github.com/cloudflare/workers-sdk/blob/main/packages/workers-playground/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npnpm -F workers-playground build\n```\n\n----------------------------------------\n\nTITLE: Integrating React Plugin with ESLint in TypeScript Projects\nDESCRIPTION: This code snippet shows how to integrate the eslint-plugin-react with ESLint configuration for a TypeScript project. It sets up the React version, adds the React plugin, and enables recommended React rules along with JSX runtime rules.\nSOURCE: https://github.com/cloudflare/workers-sdk/blob/main/packages/vite-plugin-cloudflare/e2e/fixtures/basic/README.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// eslint.config.js\nimport react from \"eslint-plugin-react\";\n\nexport default tseslint.config({\n\t// Set the react version\n\tsettings: { react: { version: \"18.3\" } },\n\tplugins: {\n\t\t// Add the react plugin\n\t\treact,\n\t},\n\trules: {\n\t\t// other rules...\n\t\t// Enable its recommended rules\n\t\t...react.configs.recommended.rules,\n\t\t...react.configs[\"jsx-runtime\"].rules,\n\t},\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring CommonJS Modules rule in wrangler.toml\nDESCRIPTION: This TOML configuration shows how to specify that all .cjs files should be treated as CommonJS modules when using --no-bundle.\nSOURCE: https://github.com/cloudflare/workers-sdk/blob/main/fixtures/no-bundle-import/CHANGELOG.md#2025-04-21_snippet_2\n\nLANGUAGE: toml\nCODE:\n```\nrules = [\n  { type = \"CommonJS\", globs = [\"**/*.cjs\"]},\n]\n```\n\n----------------------------------------\n\nTITLE: Configuring Miniflare Inspector Proxy\nDESCRIPTION: Example showing how to configure the new unsafeInspectorProxy option in Miniflare to enable inspector proxy for specific workers. The proxy allows communication through miniflare's inspectorPort and exposes workers via their names.\nSOURCE: https://github.com/cloudflare/workers-sdk/blob/main/packages/miniflare/CHANGELOG.md#2025-04-21_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Miniflare } from \"miniflare\";\n\nconst mf = new Miniflare({\n\t// the inspector proxy will be accessible through port 9229\n\tinspectorPort: 9229,\n\tworkers: [\n\t\t{\n\t\t\tname: \"worker-a\",\n\t\t\tscriptPath: \"./worker-a.js\",\n\t\t\t// enable the inspector proxy for worker-a\n\t\t\tunsafeInspectorProxy: true,\n\t\t},\n\t\t{\n\t\t\tname: \"worker-b\",\n\t\t\tscriptPath: \"./worker-b.js\",\n\t\t\t// worker-b is not going to be proxied\n\t\t},\n\t\t{\n\t\t\tname: \"worker-c\",\n\t\t\tscriptPath: \"./worker-c.js\",\n\t\t\t// enable the inspector proxy for worker-c\n\t\t\tunsafeInspectorProxy: true,\n\t\t},\n\t],\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Miniflare with UnsafeEval Binding\nDESCRIPTION: Example showing how to set up and use the UnsafeEval binding in Miniflare. This code initializes Miniflare with a modules Worker that uses the UNSAFE_EVAL binding to evaluate JavaScript expressions at runtime. This feature is intended for local testing only.\nSOURCE: https://github.com/cloudflare/workers-sdk/blob/main/packages/miniflare/CHANGELOG.md#2025-04-21_snippet_22\n\nLANGUAGE: typescript\nCODE:\n```\nconst mf = new Miniflare({\n\tlog,\n\tmodules: true,\n\tscript: `\n        export default {\n            fetch(req, env, ctx) {\n                const two = env.UNSAFE_EVAL.eval('1+1');\n                return new Response('two = ' + two); // returns 'two = 2'\n            }\n        }\n    `,\n\tunsafeEvalBinding: \"UNSAFE_EVAL\",\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring ESLint parserOptions for TypeScript in Vite React Projects\nDESCRIPTION: This code snippet demonstrates how to configure the parserOptions property in the ESLint configuration to enable type-aware linting with multiple TypeScript configuration files in a Vite React project.\nSOURCE: https://github.com/cloudflare/workers-sdk/blob/main/packages/vite-plugin-cloudflare/e2e/fixtures/basic/README.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexport default tseslint.config({\n\tlanguageOptions: {\n\t\t// other options...\n\t\tparserOptions: {\n\t\t\tproject: [\"./tsconfig.node.json\", \"./tsconfig.app.json\"],\n\t\t\ttsconfigRootDir: import.meta.dirname,\n\t\t},\n\t},\n});\n```\n\n----------------------------------------\n\nTITLE: Updating Bindings View in Cloudflare Workers Extension\nDESCRIPTION: This change updates the bindings view to list all binding types, providing a more comprehensive overview of available bindings in the extension.\nSOURCE: https://github.com/cloudflare/workers-sdk/blob/main/packages/cloudflare-workers-bindings-extension/CHANGELOG.md#2025-04-21_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n- [#7597](https://github.com/cloudflare/workers-sdk/pull/7597) [`dbf7aac`](https://github.com/cloudflare/workers-sdk/commit/dbf7aac6f58c7dbd7de6d6fd1fb9dc562e36c11b) Thanks [@edmundhung](https://github.com/edmundhung)! - Updates the bindings view to list all binding types\n```\n\n----------------------------------------\n\nTITLE: Configuring Additional Modules in Wrangler TOML\nDESCRIPTION: This TOML configuration demonstrates how to include additional modules in the Wrangler build process. It shows different levels of file inclusion using globs.\nSOURCE: https://github.com/cloudflare/workers-sdk/blob/main/packages/vitest-pool-workers/CHANGELOG.md#2025-04-21_snippet_1\n\nLANGUAGE: toml\nCODE:\n```\nname = \"my-worker\"\nmain = \"src/index.js\"\n\nfind_additional_modules = true\nrules = [\n  { type = \"ESModule\", globs = [\"*.js\"]}\n]\n```\n\nLANGUAGE: toml\nCODE:\n```\nrules = [\n  { type = \"ESModule\", globs = [\"**/*.js\"]}\n]\n```\n\n----------------------------------------\n\nTITLE: Configuring defaultDocument in getAssetFromKV (JavaScript)\nDESCRIPTION: This snippet demonstrates how to customize the defaultDocument option when using getAssetFromKV. It allows specifying a different default document name instead of index.html.\nSOURCE: https://github.com/cloudflare/workers-sdk/blob/main/packages/kv-asset-handler/CHANGELOG.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nreturn getAssetFromKV(event, {\n  defaultDocument: \"index.shtm\",\n});\n```\n\n----------------------------------------\n\nTITLE: Customizing Request Mapping with mapRequestToAsset in KV Asset Handler\nDESCRIPTION: Example showing how to customize the mapRequestToAsset function to modify request paths before looking up assets in KV storage, specifically stripping '/docs' prefix.\nSOURCE: https://github.com/cloudflare/workers-sdk/blob/main/packages/kv-asset-handler/README.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { getAssetFromKV, mapRequestToAsset } from '@cloudflare/kv-asset-handler'\n...\nconst customKeyModifier = request => {\n  let url = request.url\n  //custom key mapping optional\n  url = url.replace('/docs', '').replace(/^\\/+/, '')\n  return mapRequestToAsset(new Request(url, request))\n}\nlet asset = await getAssetFromKV(event, { mapRequestToAsset: customKeyModifier })\n```\n\n----------------------------------------\n\nTITLE: Configuring Service Bindings in Worker-A\nDESCRIPTION: TOML configuration for Worker-A defining service bindings to other Workers with different export patterns.\nSOURCE: https://github.com/cloudflare/workers-sdk/blob/main/fixtures/workers-with-assets-and-service-bindings/README.md#2025-04-21_snippet_3\n\nLANGUAGE: toml\nCODE:\n```\n[[services]]\nbinding = \"DEFAULT_EXPORT\"\nservice = \"worker-b\"\n\n[[services]]\nbinding = \"DEFAULT_ENTRYPOINT\"\nservice = \"worker-c\"\n\n[[services]]\nbinding = \"NAMED_ENTRYPOINT\"\nservice = \"worker-d\"\nentrypoint = \"EntrypointD\"\n```\n\n----------------------------------------\n\nTITLE: Adding UI for Binding Creation in Cloudflare Workers Extension\nDESCRIPTION: This feature adds a user interface to create a binding via the extension, streamlining the process of adding new bindings to Cloudflare Workers projects.\nSOURCE: https://github.com/cloudflare/workers-sdk/blob/main/packages/cloudflare-workers-bindings-extension/CHANGELOG.md#2025-04-21_snippet_5\n\nLANGUAGE: markdown\nCODE:\n```\n- [#7591](https://github.com/cloudflare/workers-sdk/pull/7591) [`4ab7ffc`](https://github.com/cloudflare/workers-sdk/commit/4ab7ffcad7d7824a9d9737c78c3eccf4bcf764d8) Thanks [@emily-shen](https://github.com/emily-shen)! - feat: add ui to add a binding via the extension\n```\n\n----------------------------------------\n\nTITLE: Example of Overlapping Module Rules in wrangler.toml\nDESCRIPTION: This TOML configuration shows an example of overlapping rules that would generate a warning. In this case, dep.js is classified as both CommonJS and ES module, with Wrangler using the first matching rule.\nSOURCE: https://github.com/cloudflare/workers-sdk/blob/main/fixtures/no-bundle-import/CHANGELOG.md#2025-04-21_snippet_4\n\nLANGUAGE: toml\nCODE:\n```\nrules = [\n  { type = \"CommonJS\", globs = [\"dep.js\"]},\n  { type = \"ESModule\", globs = [\"dep.js\"]}\n]\n```\n\n----------------------------------------\n\nTITLE: Configuring ESLint to Disallow Dynamic Imports\nDESCRIPTION: This JavaScript configuration for ESLint sets up a rule to disallow dynamic imports with non-literal arguments, helping prevent unintended wildcard imports.\nSOURCE: https://github.com/cloudflare/workers-sdk/blob/main/packages/vitest-pool-workers/CHANGELOG.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// eslint.config.js\nexport default [\n\t{\n\t\trules: {\n\t\t\t\"no-restricted-syntax\": [\n\t\t\t\t\"error\",\n\t\t\t\t{\n\t\t\t\t\tselector: \"ImportExpression[argument.type!='Literal']\",\n\t\t\t\t\tmessage:\n\t\t\t\t\t\t\"Dynamic imports with non-literal arguments are not allowed.\",\n\t\t\t\t},\n\t\t\t],\n\t\t},\n\t},\n];\n```\n\n----------------------------------------\n\nTITLE: Describing Cache API delete() Operation in workerd\nDESCRIPTION: Specifies the guarantees provided by workerd for the delete() operation and the expected response format.\nSOURCE: https://github.com/cloudflare/workers-sdk/blob/main/packages/miniflare/src/workers/cache/README.md#2025-04-21_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n## .delete()\n\n`workerd` guarantees:\n\n- The method will always be `PURGE`, and the cache key method will always be\n  `GET`\n- The headers will include `Cf-Cache-Namespaces` if this is a namespaced cache\n  (i.e. `caches.open(...)`)\n- The header `X-Real-IP` will be set to `127.0.0.1`\n- The remaining headers will be the cache key headers `workerd` expects:\n- Status `200` on success\n- Status `404` on failure\n- Status `429` on rate limit (which will throw in the user worker)\n```\n\n----------------------------------------\n\nTITLE: Initializing Cloudflare Worker Project with Wrangler CLI\nDESCRIPTION: Command to quickly create a new Hello World worker project using Wrangler CLI. The -y flag automatically accepts default settings.\nSOURCE: https://github.com/cloudflare/workers-sdk/blob/main/packages/wrangler/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx wrangler init my-worker -y\n```\n\n----------------------------------------\n\nTITLE: Adding Validation to Binding Name Input in Cloudflare Workers Extension\nDESCRIPTION: This feature adds validation to the binding name input in the VS Code extension, enhancing data integrity and user input accuracy for Cloudflare Workers configurations.\nSOURCE: https://github.com/cloudflare/workers-sdk/blob/main/packages/cloudflare-workers-bindings-extension/CHANGELOG.md#2025-04-21_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n- [#7600](https://github.com/cloudflare/workers-sdk/pull/7600) [`e3791f7`](https://github.com/cloudflare/workers-sdk/commit/e3791f7d83dd5ad8cdbff5f0afae3625d39391ed) Thanks [@emily-shen](https://github.com/emily-shen)! - feat: add validation to binding name input in vscode extension\n```\n\n----------------------------------------\n\nTITLE: Installing Miniflare via npm\nDESCRIPTION: Command to install Miniflare as a development dependency in a Node.js project using npm.\nSOURCE: https://github.com/cloudflare/workers-sdk/blob/main/packages/miniflare/README.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ npm install miniflare --save-dev\n```\n\n----------------------------------------\n\nTITLE: Adding JSON Schema for Wrangler Config Files\nDESCRIPTION: This update adds a JSON schema for Wrangler configuration files, improving the development experience by providing structure and validation for Wrangler configs.\nSOURCE: https://github.com/cloudflare/workers-sdk/blob/main/packages/cloudflare-workers-bindings-extension/CHANGELOG.md#2025-04-21_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n- [#7602](https://github.com/cloudflare/workers-sdk/pull/7602) [`697f166`](https://github.com/cloudflare/workers-sdk/commit/697f166afb279d494279259460e93cd0aa37e7a9) Thanks [@penalosa](https://github.com/penalosa)! - Add JSON schema for Wrangler config files\n```\n\n----------------------------------------\n\nTITLE: Preview Worker Deployment Command\nDESCRIPTION: Command to deploy changes to the playground preview worker in the test environment.\nSOURCE: https://github.com/cloudflare/workers-sdk/blob/main/packages/workers-playground/README.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npnpm run deploy:testing\n```\n\n----------------------------------------\n\nTITLE: Loading Wrangler in Cloudflare Workers Extension\nDESCRIPTION: This update loads Wrangler into the extension, integrating Wrangler functionality directly into the VS Code environment for Cloudflare Workers development.\nSOURCE: https://github.com/cloudflare/workers-sdk/blob/main/packages/cloudflare-workers-bindings-extension/CHANGELOG.md#2025-04-21_snippet_7\n\nLANGUAGE: markdown\nCODE:\n```\n- [#7560](https://github.com/cloudflare/workers-sdk/pull/7560) [`59eef4f`](https://github.com/cloudflare/workers-sdk/commit/59eef4fe5b3fc0a730fe6c8db318e94db72425ed) Thanks [@penalosa](https://github.com/penalosa)! - Load Wrangler in extension\n```\n\n----------------------------------------\n\nTITLE: Simple Wrangler Command Test in TypeScript\nDESCRIPTION: This example demonstrates how to write a simple command test for Wrangler using the WranglerE2ETestHelper class. It covers creating test files, deploying a worker, and uploading a version.\nSOURCE: https://github.com/cloudflare/workers-sdk/blob/main/packages/wrangler/e2e/README.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ndescribe(\"uploading Worker versions\", () => {\n\tconst workerName = generateResourceName();\n\tconst helper = new WranglerE2ETestHelper();\n\n\tbeforeAll(async () => {\n\t\tawait helper.seed({\n\t\t\t\"wrangler.toml\": dedent`\n\t\t\t\tname = \"${workerName}\"\n\t\t\t\tmain = \"src/index.ts\"\n\t\t\t\tcompatibility_date = \"2023-01-01\"\n\t\t\t`,\n\t\t\t\"src/index.ts\": dedent`\n\t\t\t\texport default {\n\t\t\t\t\tfetch(request) {\n\t\t\t\t\t\treturn new Response(\"Hello World!\")\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t`,\n\t\t\t\"package.json\": dedent`\n\t\t\t\t{\n\t\t\t\t\t\"name\": \"${workerName}\",\n\t\t\t\t\t\"version\": \"0.0.0\",\n\t\t\t\t\t\"private\": true\n\t\t\t\t}\n\t\t\t`,\n\t\t});\n\t});\n\tit(\"deploy worker\", async () => {\n\t\tawait helper.run(\"wrangler deploy\");\n\t});\n\tit(\"upload a version\", async () => {\n\t\tconst upload = await helper.run(\n\t\t\t`wrangler versions upload --message \"Upload via e2e test\" --tag \"e2e-upload\"  --x-versions`\n\t\t);\n\t\t// Check the output looks correct\n\t\texpect(normalize(upload.stdout)).toMatchInlineSnapshot(`\n\t\t\t\"Total Upload: xx KiB / gzip: xx KiB\n\t\t\tUploaded tmp-e2e-worker-00000000-0000-0000-0000-000000000000 (TIMINGS)\n\t\t\tWorker Version ID: 00000000-0000-0000-0000-000000000000\n\t\t\tTo deploy this version to production traffic use the command wrangler versions deploy --experimental-versions\n\t\t\tChanges to non-versioned settings (config properties 'logpush' or 'tail_consumers') take effect after your next deployment using the command wrangler versions deploy --experimental-versions\n\t\t\tChanges to triggers (routes, custom domains, cron schedules, etc) must be applied with the command wrangler triggers deploy --experimental-versions\"\n\t`);\n\t});\n});\n```\n\n----------------------------------------\n\nTITLE: Warning about AI and Vectorize bindings in Cloudflare Workers\nDESCRIPTION: Warning message explaining that Workers AI and Vectorize bindings lack a local simulator, meaning any usage will access your Cloudflare account and incur charges even during local development and testing. Recommends mocking these bindings in tests.\nSOURCE: https://github.com/cloudflare/workers-sdk/blob/main/fixtures/vitest-pool-workers-examples/ai-vectorize/README.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[!WARNING]\n\nBecause Workers AI and Vectorize bindings do not have a local simulator, usage of these bindings will always access your Cloudflare account, and so will incur usage charges even in local development and testing. We recommend mocking any usage of these bindings in your tests as demonstrated in this fixture.\n```\n\n----------------------------------------\n\nTITLE: Running Wrangler E2E Tests in ZSH\nDESCRIPTION: This snippet demonstrates how to run the Wrangler E2E test suite locally using ZSH. It includes setting up environment variables and running the test command.\nSOURCE: https://github.com/cloudflare/workers-sdk/blob/main/packages/wrangler/e2e/README.md#2025-04-21_snippet_0\n\nLANGUAGE: zsh\nCODE:\n```\npnpm i\npnpm build\nCLOUDFLARE_ACCOUNT_ID=8d783f274e1f82dc46744c297b015a2f CLOUDFLARE_API_TOKEN=<cloudflare-testing-api-token> WRANGLER=\"node --no-warnings $PWD/packages/wrangler/bin/wrangler.js\" WRANGLER_IMPORT=\"$PWD/packages/wrangler/wrangler-dist/cli.js\" pnpm --filter wrangler run test:e2e\n```\n\n----------------------------------------\n\nTITLE: Configuring Vitest Pre-bundling with Workers Config\nDESCRIPTION: Example configuration for enabling Vite dependency pre-bundling with Vitest in a Workers environment to handle module resolution issues.\nSOURCE: https://github.com/cloudflare/workers-sdk/blob/main/packages/vitest-pool-workers/CHANGELOG.md#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineWorkersConfig } from \"@cloudflare/vitest-pool-workers/config\";\n\nexport default defineWorkersConfig({\n\ttest: {\n\t\tdeps: {\n\t\t\toptimizer: {\n\t\t\t\tssr: {\n\t\t\t\t\tenabled: true,\n\t\t\t\t\tinclude: [\"your-package-name\"],\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t\tpoolOptions: {\n\t\t\tworkers: {\n\t\t\t\t// ...\n\t\t\t},\n\t\t},\n\t},\n});\n```\n\n----------------------------------------\n\nTITLE: Demonstrating RPC Support in Miniflare Magic Proxy\nDESCRIPTION: This snippet demonstrates how to use RPC (Remote Procedure Call) with service bindings in the Miniflare magic proxy, allowing method calls across different workers.\nSOURCE: https://github.com/cloudflare/workers-sdk/blob/main/packages/miniflare/CHANGELOG.md#2025-04-21_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Miniflare } from \"miniflare\";\n\nconst mf = new Miniflare({\n\tworkers: [\n\t\t{\n\t\t\tmodules: true,\n\t\t\tscript: `export default { fetch() { return new Response(''); } }`,\n\t\t\tserviceBindings: {\n\t\t\t\tSUM: {\n\t\t\t\t\tname: \"sum-worker\",\n\t\t\t\t\tentrypoint: \"SumEntrypoint\",\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t\t{\n\t\t\tmodules: true,\n\t\t\tname: \"sum-worker\",\n\t\t\tscript: `\n\t\t\t\timport { WorkerEntrypoint } from 'cloudflare:workers';\n\n\t\t\t\texport default { fetch() { return new Response(''); } }\n\n\t\t\t\texport class SumEntrypoint extends WorkerEntrypoint {\n\t\t\t\t\tsum(args) {\n\t\t\t\t\t\treturn args.reduce((a, b) => a + b);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t`,\n\t\t},\n\t],\n});\n\nconst { SUM } = await mf.getBindings();\n\nconst numbers = [1, 2, 3];\n\nconsole.log(`The sum of ${numbers.join(\", \")} is ${await SUM.sum(numbers)}`); // <--- prints 'The sum of 1, 2, 3 is 6'\n\nawait mf.dispose();\n```\n\n----------------------------------------\n\nTITLE: Fixing D1 Exports for Binary Values in Miniflare\nDESCRIPTION: Corrects the handling of binary values in D1 database exports by properly padding HEX strings.\nSOURCE: https://github.com/cloudflare/workers-sdk/blob/main/packages/miniflare/CHANGELOG.md#2025-04-21_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\n// Internal Miniflare code (pseudo-code)\nfunction exportD1Data(value) {\n  if (isBinary(value)) {\n    return padHexString(value.toString('hex'));\n  }\n  // Handle other types...\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Vite Plugin E2E Test Implementation\nDESCRIPTION: Example test implementation demonstrating how to test a Worker request using the custom test helpers. Shows setup of test fixture, launching dev server, and verifying API response.\nSOURCE: https://github.com/cloudflare/workers-sdk/blob/main/packages/vite-plugin-cloudflare/e2e/README.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ntest(\"can serve a Worker request\", async ({ expect, seed, viteDev }) => {\n\tconst projectPath = await seed(\"basic\", \"pnpm\");\n\n\tconst proc = await viteDev(projectPath);\n\tconst url = await waitForReady(proc);\n\texpect(await fetchJson(url + \"/api/\")).toEqual({ name: \"Cloudflare\" });\n});\n```\n\n----------------------------------------\n\nTITLE: Running service-worker format WebAssembly worker with Wrangler\nDESCRIPTION: Command to run a service-worker format worker that uses wrangler.toml to bind the WebAssembly module as a global variable, specifying both the worker file and config location.\nSOURCE: https://github.com/cloudflare/workers-sdk/blob/main/fixtures/wasm-app/README.md#2025-04-21_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nnpx wrangler dev worker/service-worker/index.js --config worker/service-worker/wrangler.toml\n```\n\n----------------------------------------\n\nTITLE: Using ES Modules with kv-asset-handler in Cloudflare Workers\nDESCRIPTION: Example showing how to use kv-asset-handler with ES Module workers. It demonstrates importing the manifest JSON, parsing it, and using it with getAssetFromKV in a Worker's fetch handler.\nSOURCE: https://github.com/cloudflare/workers-sdk/blob/main/packages/kv-asset-handler/CHANGELOG.md#2025-04-21_snippet_0\n\nLANGUAGE: JSX\nCODE:\n```\nimport manifestJSON from \"__STATIC_CONTENT_MANIFEST\";\nconst manifest = JSON.parse(manifestJSON);\n\nexport default {\n  fetch(request, env, ctx) {\n    return await getAssetFromKV(\n      {\n        request,\n        waitUntil(promise) {\n          return ctx.waitUntil(promise);\n        },\n      },\n      {\n        ASSET_NAMESPACE: env.ASSET_NAMESPACE,\n        ASSET_MANIFEST: manifest,\n      }\n    );\n    // ...\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Creating Patches for VSCode in the Workers SDK\nDESCRIPTION: Process for making changes to the VSCode codebase and generating patch files. Involves committing changes in the VSCode directory and using git format-patch to create patches that can be applied during setup.\nSOURCE: https://github.com/cloudflare/workers-sdk/blob/main/packages/quick-edit/README.md#2025-04-21_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ngit commit -m \"YOUR MESSAGE\" --no-verify\ngit format-patch -o ../../packages/quick-edit/patches base\n```\n\n----------------------------------------\n\nTITLE: Defining KV Storage Schema in SQL\nDESCRIPTION: This SQL schema defines the table structure for KV storage in Miniflare. It creates a table named '_mf_entries' with columns for key, blob_id, expiration, and metadata.\nSOURCE: https://github.com/cloudflare/workers-sdk/blob/main/packages/miniflare/CONTRIBUTING.md#2025-04-21_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE IF NOT EXISTS _mf_entries (\n  key TEXT PRIMARY KEY,\n  blob_id TEXT NOT NULL,  -- Blob ID stored in `BlobStore`\n  expiration INTEGER,     -- Milliseconds since unix epoch\n  metadata TEXT           -- JSON encoded metadata blob\n);\n```\n\n----------------------------------------\n\nTITLE: Binding to Current Worker using kCurrentWorker Symbol in JavaScript\nDESCRIPTION: This example shows how to use the new kCurrentWorker symbol to create a service binding to the current Worker, simplifying the process of self-referencing in multi-worker setups.\nSOURCE: https://github.com/cloudflare/workers-sdk/blob/main/packages/miniflare/CHANGELOG.md#2025-04-21_snippet_21\n\nLANGUAGE: javascript\nCODE:\n```\nimport { kCurrentWorker, Miniflare } from \"miniflare\";\n\nconst mf = new Miniflare({\n\tserviceBindings: {\n\t\tSELF: kCurrentWorker,\n\t},\n\tmodules: true,\n\tscript: `export default {\n      fetch(request, env, ctx) {\n        const { pathname } = new URL(request.url);\n        if (pathname === \"/recurse\") {\n          return env.SELF.fetch(\"http://placeholder\");\n        }\n        return new Response(\"body\");\n      }\n    }`,\n});\n\nconst response = await mf.dispatchFetch(\"http://placeholder/recurse\");\nconsole.log(await response.text()); // body\n```\n\n----------------------------------------\n\nTITLE: Registering Commands in Wrangler Registry\nDESCRIPTION: Shows how to register commands and namespaces in the Wrangler command registry system.\nSOURCE: https://github.com/cloudflare/workers-sdk/blob/main/packages/wrangler/CONTRIBUTING.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { kvKeyNamespace, kvKeyPutCommand, kvNamespace } from \"./kv\";\n\n// ...\n\nregistry.define([\n\t{ command: \"wrangler kv\", definition: kvNamespace },\n\t{ command: \"wrangler kv key\", definition: kvKeyNamespace },\n\t{ command: \"wrangler kv key put\", definition: kvKeyPutCommand },\n\t// ...other kv commands here\n]);\nregistry.registerNamespace(\"kv\");\n```\n\n----------------------------------------\n\nTITLE: Configuring Environment-Specific Worker Tests in TypeScript\nDESCRIPTION: Example configuration showing how to specify a production environment for worker tests using @cloudflare/vitest-pool-workers. This allows tests to access environment-specific bindings and variables.\nSOURCE: https://github.com/cloudflare/workers-sdk/blob/main/packages/vitest-pool-workers/CHANGELOG.md#2025-04-21_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineWorkersConfig } from \"@cloudflare/vitest-pool-workers/config\";\n\nexport default defineWorkersConfig({\n\ttest: {\n\t\tpoolOptions: {\n\t\t\tworkers: {\n\t\t\t\twrangler: {\n\t\t\t\t\tconfigPath: \"./wrangler.toml\",\n\t\t\t\t\tenvironment: \"production\",\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t},\n});\n```\n\n----------------------------------------\n\nTITLE: Dependabot Changeset Generator\nDESCRIPTION: Script that generates and commits changesets for Dependabot PRs. Utilized in c3-dependabot-versioning-prs.yml and miniflare-dependabot-versioning-prs.yml workflows.\nSOURCE: https://github.com/cloudflare/workers-sdk/blob/main/tools/README.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\ndependabot/generate-dependabot-pr-changesets.ts\n```\n\n----------------------------------------\n\nTITLE: Implementing Yes/No Choice Prompt in Shell\nDESCRIPTION: Demonstrates how to present a yes/no choice prompt to the user in the Wrangler CLI.\nSOURCE: https://github.com/cloudflare/workers-sdk/blob/main/STYLEGUIDE.md#2025-04-21_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\n*choice description* <y/n>\n#User inputs y or n#\n```\n\n----------------------------------------\n\nTITLE: Running service-worker-module format WebAssembly worker with Wrangler\nDESCRIPTION: Command to run a service-worker format worker that imports the WebAssembly module as a regular ES module using Wrangler CLI.\nSOURCE: https://github.com/cloudflare/workers-sdk/blob/main/fixtures/wasm-app/README.md#2025-04-21_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nnpx wrangler dev worker/service-worker-module/index.js\n```\n\n----------------------------------------\n\nTITLE: Using getAssetFromKV with Service Worker and Custom Namespace\nDESCRIPTION: Example showing how to use getAssetFromKV with a custom namespace in Service Worker format.\nSOURCE: https://github.com/cloudflare/workers-sdk/blob/main/packages/kv-asset-handler/README.md#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nreturn getAssetFromKV(event, { ASSET_NAMESPACE: MY_NAMESPACE })\n```\n\n----------------------------------------\n\nTITLE: Adding Workflow Support in Wrangler Dev\nDESCRIPTION: Introduces preliminary support for Workflows when using wrangler dev with Miniflare.\nSOURCE: https://github.com/cloudflare/workers-sdk/blob/main/packages/miniflare/CHANGELOG.md#2025-04-21_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\n// Example Workflow configuration\nconst workflow = {\n  steps: [\n    { name: 'step1', worker: 'worker1' },\n    { name: 'step2', worker: 'worker2' }\n  ]\n};\n// Miniflare would now support executing this workflow\n```\n\n----------------------------------------\n\nTITLE: E2E Test Cleanup Script\nDESCRIPTION: Script to clean up orphaned Pages projects and Workers left behind from e2e tests.\nSOURCE: https://github.com/cloudflare/workers-sdk/blob/main/tools/README.md#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\ne2e/e2eCleanup.ts\n```\n\n----------------------------------------\n\nTITLE: Configuring ES Modules rule in wrangler.toml\nDESCRIPTION: This TOML configuration snippet shows how to specify a module rule that treats all JavaScript files as ES modules. This is necessary when using --no-bundle with JavaScript imports.\nSOURCE: https://github.com/cloudflare/workers-sdk/blob/main/fixtures/no-bundle-import/CHANGELOG.md#2025-04-21_snippet_1\n\nLANGUAGE: toml\nCODE:\n```\nrules = [\n  { type = \"ESModule\", globs = [\"**/*.js\"]},\n]\n```\n\n----------------------------------------\n\nTITLE: Disabling Create-Cloudflare Telemetry via Environment Variable\nDESCRIPTION: This command sets an environment variable to disable telemetry data collection for Create-Cloudflare. It offers an alternative method for users to opt-out of data sharing.\nSOURCE: https://github.com/cloudflare/workers-sdk/blob/main/packages/create-cloudflare/telemetry.md#2025-04-21_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nexport CREATE_CLOUDFLARE_TELEMETRY_DISABLED=1\n```\n\n----------------------------------------\n\nTITLE: Avoiding Wildcard Imports in JavaScript\nDESCRIPTION: This code snippet demonstrates how to avoid using wildcard imports by explicitly importing modules and using a switch statement to handle different routes.\nSOURCE: https://github.com/cloudflare/workers-sdk/blob/main/packages/vitest-pool-workers/CHANGELOG.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// src/index.js\nimport one from \"./one.js\";\nimport two from \"./two.js\";\n\nexport default {\n\tasync fetch() {\n\t\tconst name = new URL(request.url).pathname;\n\t\tswitch (name) {\n\t\t\tcase \"/one.js\":\n\t\t\t\treturn new Response(one);\n\t\t\tcase \"/two.js\":\n\t\t\t\treturn new Response(two);\n\t\t\tdefault:\n\t\t\t\treturn new Response(\"Not found\", { status: 404 });\n\t\t}\n\t},\n};\n```\n\n----------------------------------------\n\nTITLE: API Request Implementation Example\nDESCRIPTION: Demonstrates how to make authenticated API calls using fetchResult with proper type definitions and error handling.\nSOURCE: https://github.com/cloudflare/workers-sdk/blob/main/packages/wrangler/CONTRIBUTING.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ntype UploadResponse = {\n\tjwt?: string;\n};\n\nconst res = await fetchResult<UploadResponse>(\n\t`/accounts/${accountId}/workers/assets/upload`,\n\t{\n\t\tmethod: \"POST\",\n\t\theaders: {\n\t\t\t\"Content-Type\": \"application/json\",\n\t\t},\n\t\tbody: payload,\n\t}\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing Instance.status() Return Type in Miniflare\nDESCRIPTION: Updates the return type of Instance.status() in Miniflare to match the production behavior.\nSOURCE: https://github.com/cloudflare/workers-sdk/blob/main/packages/miniflare/CHANGELOG.md#2025-04-21_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\ninterface Instance {\n  status(): Promise<{\n    instances: number;\n    recentRequests: number[];\n  }>;\n}\n```\n\n----------------------------------------\n\nTITLE: Deploy Non-NPM Packages Script\nDESCRIPTION: Script to deploy packages that have updates but are not automatically deployed to npm via changesets tooling. Used in changesets.yml GitHub workflow for deploying Workers and Pages projects.\nSOURCE: https://github.com/cloudflare/workers-sdk/blob/main/tools/README.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ndeployments/deploy-non-npm-packages()\n```\n\n----------------------------------------\n\nTITLE: Running Code Checks\nDESCRIPTION: Commands for running various code quality checks including type checking, linting, and formatting.\nSOURCE: https://github.com/cloudflare/workers-sdk/blob/main/CONTRIBUTING.md#2025-04-21_snippet_8\n\nLANGUAGE: sh\nCODE:\n```\npnpm run check\npnpm run check:type\npnpm run check:lint\npnpm run check:format\npnpm run prettify\n```\n\n----------------------------------------\n\nTITLE: Displaying Markdown Headings and Links for Create Cloudflare CLI Documentation\nDESCRIPTION: This markdown snippet presents the main heading, a brief description of the create-cloudflare CLI, and provides links to official documentation and community resources.\nSOURCE: https://github.com/cloudflare/workers-sdk/blob/main/packages/create-cloudflare/README.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# create-cloudflare\n\nA CLI for creating and deploying new applications to [Cloudflare](https://developers.cloudflare.com/).\n\nFor more details on how to use the create-cloudflare CLI (C3) please visit the [official C3 documentation](https://developers.cloudflare.com/pages/get-started/c3).\n\n### Community\n\n- Join us [on Discord](https://discord.cloudflare.com)\n- File an issue [on GitHub](https://github.com/cloudflare/workers-sdk/issues/new/choose)\n```\n\n----------------------------------------\n\nTITLE: KV Namespace Configuration\nDESCRIPTION: Configuration for KV namespace binding in wrangler.jsonc file.\nSOURCE: https://github.com/cloudflare/workers-sdk/blob/main/packages/create-cloudflare/templates/next/pages/README.md#2025-04-21_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n\"kv_namespaces\": [{ \"binding\": \"MY_KV_NAMESPACE\", \"id\": \"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\" }]\n```\n\n----------------------------------------\n\nTITLE: Redirects Configuration Example\nDESCRIPTION: Example showing proxying redirect configuration in Pages' _redirects file, where requests to /users/123 will be internally routed to /users/[id].html while preserving the original URL in the browser.\nSOURCE: https://github.com/cloudflare/workers-sdk/blob/main/packages/pages-shared/CHANGELOG.md#2025-04-21_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n/users/:id /users/[id] 200\n```\n\n----------------------------------------\n\nTITLE: Setting Debug Environment Variable for Mock NPM Registry\nDESCRIPTION: Command showing how to set the NODE_DEBUG environment variable to enable additional debug logging for the mock-npm-registry package.\nSOURCE: https://github.com/cloudflare/workers-sdk/blob/main/packages/mock-npm-registry/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nNODE_DEBUG=mock-npm-registry\n```\n\n----------------------------------------\n\nTITLE: Vitest Configuration Template\nDESCRIPTION: Template for configuring Vitest in fixture tests, showing how to merge with shared config\nSOURCE: https://github.com/cloudflare/workers-sdk/blob/main/CONTRIBUTING.md#2025-04-21_snippet_15\n\nLANGUAGE: ts\nCODE:\n```\nimport { defineProject, mergeConfig } from \"vitest/config\";\nimport configShared from \"../../vitest.shared\";\n\nexport default mergeConfig(\n  configShared,\n  defineProject({\n    test: {\n      // config overrides\n    }\n  })\n);\n```\n\n----------------------------------------\n\nTITLE: Enabling Wrangler Telemetry in Bash\nDESCRIPTION: This command demonstrates how to re-enable telemetry collection for Wrangler globally using the CLI.\nSOURCE: https://github.com/cloudflare/workers-sdk/blob/main/packages/wrangler/telemetry.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpx wrangler telemetry enable\n```\n\n----------------------------------------\n\nTITLE: Implementing Default Entrypoint Export in Worker-C\nDESCRIPTION: Worker implementation extending WorkerEntrypoint class with a fetch method, exported as default.\nSOURCE: https://github.com/cloudflare/workers-sdk/blob/main/fixtures/workers-with-assets-and-service-bindings/README.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nexport default class extends WorkerEntrypoint {\n\tasync fetch(){}\n}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Wildcard Import in JavaScript\nDESCRIPTION: This code snippet shows an example of wildcard import that will now bundle all matching files. It demonstrates how a request's pathname is used to dynamically import modules.\nSOURCE: https://github.com/cloudflare/workers-sdk/blob/main/packages/vitest-pool-workers/CHANGELOG.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// src/index.js\nexport default {\n\tasync fetch() {\n\t\tconst url = new URL(request.url);\n\t\tconst name = url.pathname;\n\t\tconst value = (await import(\".\" + name)).default;\n\t\treturn new Response(value);\n\t},\n};\n```\n\n----------------------------------------\n\nTITLE: Running Vitest with Debugger\nDESCRIPTION: Command to run Vitest with step-through debugging support by exposing port 9229 for debugger attachment.\nSOURCE: https://github.com/cloudflare/workers-sdk/blob/main/packages/vitest-pool-workers/CHANGELOG.md#2025-04-21_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nvitest --inspect=9229 --no-file-parallelism\n```\n\n----------------------------------------\n\nTITLE: Running E2E Tests Command\nDESCRIPTION: Command to run end-to-end tests locally with required environment variables\nSOURCE: https://github.com/cloudflare/workers-sdk/blob/main/CONTRIBUTING.md#2025-04-21_snippet_16\n\nLANGUAGE: sh\nCODE:\n```\nWRANGLER=\"node ~/path/to/workers-sdk/packages/wrangler/wrangler-dist/cli.js\" CLOUDFLARE_ACCOUNT_ID=$CLOUDFLARE_TESTING_ACCOUNT_ID CLOUDFLARE_API_TOKEN=$CLOUDFLARE_TESTING_API_TOKEN pnpm run test:e2e\n```\n\n----------------------------------------\n\nTITLE: Implementing Named Entrypoint Export in Worker-D\nDESCRIPTION: Worker implementation with a named class extending WorkerEntrypoint.\nSOURCE: https://github.com/cloudflare/workers-sdk/blob/main/fixtures/workers-with-assets-and-service-bindings/README.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nexport class EntrypointD extends WokrerEntrypoint {}\n```\n\n----------------------------------------\n\nTITLE: E2E Test Sharding Script\nDESCRIPTION: Script that shards e2e tests into separate Turbo runs for better caching and handling of flakey tests.\nSOURCE: https://github.com/cloudflare/workers-sdk/blob/main/tools/README.md#2025-04-21_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\ne2e/runIndividualE2EFiles.ts\n```\n\n----------------------------------------\n\nTITLE: Enabling Create-Cloudflare Telemetry via CLI Command\nDESCRIPTION: This command enables telemetry data collection for Create-Cloudflare using the CLI. It allows users to opt back into data sharing if they previously disabled it.\nSOURCE: https://github.com/cloudflare/workers-sdk/blob/main/packages/create-cloudflare/telemetry.md#2025-04-21_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nnpm create cloudflare telemetry enable\n```\n\n----------------------------------------\n\nTITLE: Running and Building Workspace\nDESCRIPTION: Commands to run and build specific workspace packages.\nSOURCE: https://github.com/cloudflare/workers-sdk/blob/main/CONTRIBUTING.md#2025-04-21_snippet_7\n\nLANGUAGE: sh\nCODE:\n```\npnpm run --filter wrangler start\npnpm run build --filter wrangler\n```\n\n----------------------------------------\n\nTITLE: Deploying a Cloudflare Pages Project with Wrangler CLI\nDESCRIPTION: Commands to navigate to the test fixture directory and deploy static assets to Cloudflare Pages using Wrangler CLI. After successful deployment, a unique URL will be provided to access the deployed application.\nSOURCE: https://github.com/cloudflare/workers-sdk/blob/main/fixtures/pages-workerjs-and-functions-app/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# cd into the test fixture folder\ncd fixtures/pages-workerjs-and-functions-app\n\n# Deploy the directory of static assets as a Pages deployment\nnpx wrangler pages deploy public\n```\n\n----------------------------------------\n\nTITLE: Checking Create-Cloudflare Telemetry Status via CLI Command\nDESCRIPTION: This command checks the current status of telemetry data collection for Create-Cloudflare. It helps users verify whether telemetry is currently enabled or disabled.\nSOURCE: https://github.com/cloudflare/workers-sdk/blob/main/packages/create-cloudflare/telemetry.md#2025-04-21_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\nnpm create cloudflare telemetry status\n```\n\n----------------------------------------\n\nTITLE: Changeset Documentation Example\nDESCRIPTION: Shows how to document new commands in changesets with proper formatting and examples.\nSOURCE: https://github.com/cloudflare/workers-sdk/blob/main/packages/wrangler/CONTRIBUTING.md#2025-04-21_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\nfeat: implement the `wrangler versions deploy` command\n\nThis command allows users to deploy a multiple versions of their Worker.\n\nFor interactive use (to be prompted for all options), run:\n\n- `wrangler versions deploy`\n\nFor non-interactive use, run with CLI args (and `--yes` to accept defaults):\n\n- `wrangler versions deploy --version-id $v1 --percentage 90 --version-id $v2 --percentage 10 --yes`\n```\n\n----------------------------------------\n\nTITLE: Starting a Dev Session with Wrangler CLI\nDESCRIPTION: Command to initiate a development session for the workers-with-assets-only project using Wrangler CLI.\nSOURCE: https://github.com/cloudflare/workers-sdk/blob/main/fixtures/workers-with-assets-only/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nwrangler dev\n```\n\n----------------------------------------\n\nTITLE: Viewing Wrangler Telemetry Data in Bash\nDESCRIPTION: This command demonstrates how to view the telemetry data being collected while using Wrangler. It sets the WRANGLER_LOG environment variable to 'debug' before running the wrangler deploy command.\nSOURCE: https://github.com/cloudflare/workers-sdk/blob/main/packages/wrangler/telemetry.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nWRANGLER_LOG=debug npx wrangler deploy\n```\n\n----------------------------------------\n\nTITLE: Asset Manifest Configuration in Service Worker Format\nDESCRIPTION: Shows how to configure the ASSET_MANIFEST in Service Worker format using a simple object mapping.\nSOURCE: https://github.com/cloudflare/workers-sdk/blob/main/packages/kv-asset-handler/README.md#2025-04-21_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nlet assetManifest = { \"index.html\": \"index.special.html\" }\nreturn getAssetFromKV(event, { ASSET_MANIFEST: assetManifest })\n```\n\n----------------------------------------\n\nTITLE: Installing and Setting up VSCode for Web Development Environment\nDESCRIPTION: Steps for setting up the development environment for VSCode for Web, including installing dependencies, running setup scripts, and starting the development server. Requires Node.js 18 and uses pnpm as the package manager.\nSOURCE: https://github.com/cloudflare/workers-sdk/blob/main/packages/quick-edit/README.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\npnpm install\npnpm run setup\npnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Running Tests for Cloudflare Workers with Assets Fixture\nDESCRIPTION: npm command to execute tests for the Workers Assets with User Worker fixture.\nSOURCE: https://github.com/cloudflare/workers-sdk/blob/main/fixtures/workers-with-assets-run-worker-first/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm run test\n```\n\n----------------------------------------\n\nTITLE: Checking Wrangler Telemetry Status in Bash\nDESCRIPTION: This command shows how to check the current status of Wrangler telemetry using the CLI.\nSOURCE: https://github.com/cloudflare/workers-sdk/blob/main/packages/wrangler/telemetry.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpx wrangler telemetry status\n```\n\n----------------------------------------\n\nTITLE: Fixture Deployment Prevention Script\nDESCRIPTION: Script that prevents accidental creation of git tags and releases for fixtures by checking package.json versioning and privacy settings. Runs as part of the check npm script in test-and-check.yml workflow.\nSOURCE: https://github.com/cloudflare/workers-sdk/blob/main/tools/README.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ndeployments/ensure-fixtures-are-not-deployable.ts\n```\n\n----------------------------------------\n\nTITLE: Organizing Cloudflare Workers Tests with SELF Helper and Direct Calls\nDESCRIPTION: This markdown table outlines the structure of test files for a Cloudflare Worker, showing both integration tests that use the SELF helper from the cloudflare:test module and unit tests that directly call handler functions.\nSOURCE: https://github.com/cloudflare/workers-sdk/blob/main/fixtures/vitest-pool-workers-examples/basics-unit-integration-self/README.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Test                                                                          | Overview                                              |\n| ----------------------------------------------------------------------------- | ----------------------------------------------------- |\n| [fetch-integration-self.test.ts](test/fetch-integration-self.test.ts)         | Basic `fetch` integration test using `SELF`           |\n| [fetch-unit.test.ts](test/fetch-unit.test.ts)                                 | Basic unit test calling `worker.fetch()` directly     |\n| [scheduled-integration-self.test.ts](test/scheduled-integration-self.test.ts) | Basic `scheduled` integration test using `SELF`       |\n| [scheduled-unit.test.ts](test/scheduled-unit.test.ts)                         | Basic unit test calling `worker.scheduled()` directly |\n```\n\n----------------------------------------\n\nTITLE: Setting up Local Development Environment for Cloudflare Pages\nDESCRIPTION: Commands to navigate to the fixture directory and start the local development server using wrangler pages dev.\nSOURCE: https://github.com/cloudflare/workers-sdk/blob/main/fixtures/pages-workerjs-with-config-file-app/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# cd into the test fixture folder\ncd fixtures/pages-workerjs-with-config-file-app\n\n# Start local dev server\nnpx wrangler pages dev\n```\n\n----------------------------------------\n\nTITLE: Markdown Table for Test Files in Cloudflare Worker RPC Project\nDESCRIPTION: This markdown table lists the test files associated with the RPC Worker project, including their file paths and brief descriptions of their purposes.\nSOURCE: https://github.com/cloudflare/workers-sdk/blob/main/fixtures/vitest-pool-workers-examples/rpc/README.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Test                                                      | Overview                                     |\n| --------------------------------------------------------- | -------------------------------------------- |\n| [integration-self.test.ts](test/integration-self.test.ts) | Integration test using `SELF`                |\n| [unit.test.ts](test/unit.test.ts)                         | Unit tests calling exported classes directly |\n```\n\n----------------------------------------\n\nTITLE: Displaying Project Structure and Test Overview in Markdown\nDESCRIPTION: This snippet provides a markdown table that outlines the test file and its purpose within the project. It shows the structure of the project and highlights the integration test using the 'SELF' environment.\nSOURCE: https://github.com/cloudflare/workers-sdk/blob/main/fixtures/vitest-pool-workers-examples/hyperdrive/README.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Test                              | Overview                      |\n| --------------------------------- | ----------------------------- |\n| [echo.test.ts](test/echo.test.ts) | Integration test using `SELF` |\n```\n\n----------------------------------------\n\nTITLE: Minor Version Update for Node Version Support\nDESCRIPTION: This snippet shows a minor version update that extends Node version support for the @cloudflare/workflows-shared package to include Node v18, v20, and v22.\nSOURCE: https://github.com/cloudflare/workers-sdk/blob/main/packages/workflows-shared/CHANGELOG.md#2025-04-21_snippet_2\n\nLANGUAGE: Markdown\nCODE:\n```\n## 0.3.0\n\n### Minor Changes\n\n- [#7334](https://github.com/cloudflare/workers-sdk/pull/7334) [`869ec7b`](https://github.com/cloudflare/workers-sdk/commit/869ec7b916487ec43b958a27bdfea13588c5685f) Thanks [@penalosa](https://github.com/penalosa)! - Packages in Workers SDK now support the versions of Node that Node itself supports (Current, Active, Maintenance). Currently, that includes Node v18, v20, and v22.\n```\n\n----------------------------------------\n\nTITLE: Building VSCode for Web for Production\nDESCRIPTION: Command sequence for building the VSCode for Web package for production after completing the initial setup steps. Includes installing dependencies, running the setup script, and executing the custom build process.\nSOURCE: https://github.com/cloudflare/workers-sdk/blob/main/packages/quick-edit/README.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\npnpm install\npnpm run setup\npnpm run custom:build\n```\n\n----------------------------------------\n\nTITLE: Running Tests for Cloudflare Pages Configuration\nDESCRIPTION: Commands to navigate to the fixture directory and execute the test suite.\nSOURCE: https://github.com/cloudflare/workers-sdk/blob/main/fixtures/pages-workerjs-with-config-file-app/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# cd into the test fixture folder\ncd fixtures/pages-workerjs-with-config-file-app\n\n# Run tests\nnpm run test\n```\n\n----------------------------------------\n\nTITLE: Markdown Header and Description for Cloudflare CLI\nDESCRIPTION: Basic markdown documentation structure defining the scope of CLI-related functionality for the workers-sdk project.\nSOURCE: https://github.com/cloudflare/workers-sdk/blob/main/packages/cli/README.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Cloudflare CLI\n\nAll things related to rendering the CLI for workers-sdk.\n```\n\n----------------------------------------\n\nTITLE: Running Development Server for pages-functions-wasm-app\nDESCRIPTION: Commands to navigate to the test fixture folder and start the development server for the pages-functions-wasm-app project.\nSOURCE: https://github.com/cloudflare/workers-sdk/blob/main/fixtures/pages-functions-wasm-app/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# cd into the test fixture folder\ncd fixtures/pages-functions-wasm-app\n\n# start dev server\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Committing Changes Git Commands\nDESCRIPTION: Commands to stage and commit files to git\nSOURCE: https://github.com/cloudflare/workers-sdk/blob/main/CONTRIBUTING.md#2025-04-21_snippet_13\n\nLANGUAGE: sh\nCODE:\n```\ngit add <paths-to-changes-files>\ngit commit\n```\n\n----------------------------------------\n\nTITLE: Running module format WebAssembly worker with Wrangler\nDESCRIPTION: Command to run a module format worker that imports a WebAssembly module as a regular ES module using Wrangler CLI.\nSOURCE: https://github.com/cloudflare/workers-sdk/blob/main/fixtures/wasm-app/README.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpx wrangler dev worker/module/index.js\n```\n\n----------------------------------------\n\nTITLE: Creating Changeset Command\nDESCRIPTION: Command to create a new changeset for tracking changes\nSOURCE: https://github.com/cloudflare/workers-sdk/blob/main/CONTRIBUTING.md#2025-04-21_snippet_17\n\nLANGUAGE: sh\nCODE:\n```\npnpm changeset\n```\n\n----------------------------------------\n\nTITLE: Formatting Wrangler Command Help Output in Shell\nDESCRIPTION: Demonstrates the structure for Wrangler command help output, including a brief description, command syntax, options, and additional information.\nSOURCE: https://github.com/cloudflare/workers-sdk/blob/main/STYLEGUIDE.md#2025-04-21_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\n🧮 *Brief description of the product, the value it offers and how Wrangler can interact with it*\n\n🔧 *Command is currently in open beta / command is experimental (if relevant)*\n\nCommands:\n  wrangler <command> <subcommand> <arg> *Description of command*\n\nOptions:\n  -<o (option shorthand)>, --<option (option name)>  *Option description* [*data_type*] [default: *true/false*]\n\n\n--------------------\n📣 *Announcement*\n📃 To learn more, visit our documentation on *Product name*: https://developers.cloudflare.com/*productname*\n--------------------\n```\n\n----------------------------------------\n\nTITLE: Adding Home View with Getting Started Information in Cloudflare Workers Extension\nDESCRIPTION: This commit adds a home view to the extension that provides getting started information for users. It enhances the user experience by offering initial guidance within the extension interface.\nSOURCE: https://github.com/cloudflare/workers-sdk/blob/main/packages/cloudflare-workers-bindings-extension/CHANGELOG.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n- [#7777](https://github.com/cloudflare/workers-sdk/pull/7777) [`248bdb2`](https://github.com/cloudflare/workers-sdk/commit/248bdb21d765ab34489a0e695d1243b7664f0ce9) Thanks [@emily-shen](https://github.com/emily-shen)! - feat: add home view with getting started information\n```\n\n----------------------------------------\n\nTITLE: Running module format WebAssembly worker from Wrangler package directory\nDESCRIPTION: Alternative command to run a module format worker from the Wrangler package directory, using npm start and specifying the path to the worker file.\nSOURCE: https://github.com/cloudflare/workers-sdk/blob/main/fixtures/wasm-app/README.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnpm start -- dev ../../examples/wasm-app/worker/module/index.js\n```\n\n----------------------------------------\n\nTITLE: Cloning External Contributors Repository\nDESCRIPTION: Commands for external contributors to clone and set up the workers-sdk repository with proper remote configuration.\nSOURCE: https://github.com/cloudflare/workers-sdk/blob/main/CONTRIBUTING.md#2025-04-21_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ngit clone https://github.com/<your-github-username>/workers-sdk\ncd workers-sdk\n```\n\n----------------------------------------\n\nTITLE: Formatting General Success State in Shell\nDESCRIPTION: Provides a template for displaying a general success state, including action details, success message, and next steps for the user.\nSOURCE: https://github.com/cloudflare/workers-sdk/blob/main/STYLEGUIDE.md#2025-04-21_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\n🌀 *Action verb* *Object*. *details of what is currently happening if necessary*\n🚧 *Updated additional details of the current status if necessary*\n✨ Success. *Add details of and what the user can now do*\n📣 *Announcement*\n\n*Description of what the next steps the user can take to be successful. If there are predictable happy paths following a success state, make those paths clear to the user here.*\n```\n\n----------------------------------------\n\nTITLE: Changeset Validation Script\nDESCRIPTION: Script to validate proper formatting of changesets. Used in both changesets.yml and test-and-check.yml GitHub Action workflows.\nSOURCE: https://github.com/cloudflare/workers-sdk/blob/main/tools/README.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ndeployments/validate-changesets.ts\n```\n\n----------------------------------------\n\nTITLE: Router Worker Title Definition in Markdown\nDESCRIPTION: Markdown title definition for the Router Worker documentation that emphasizes the component name using backticks.\nSOURCE: https://github.com/cloudflare/workers-sdk/blob/main/packages/workers-shared/router-worker/README.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# `router-worker`\n```\n\n----------------------------------------\n\nTITLE: Running Tests\nDESCRIPTION: Commands for running tests across all workspaces or specific packages.\nSOURCE: https://github.com/cloudflare/workers-sdk/blob/main/CONTRIBUTING.md#2025-04-21_snippet_9\n\nLANGUAGE: sh\nCODE:\n```\npnpm i\npnpm run test\npnpm run test --filter wrangler\npnpm run --filter wrangler test:watch\n```\n\n----------------------------------------\n\nTITLE: Displaying Command-related Error in Shell\nDESCRIPTION: Shows the format for displaying a command-related error, including error details, solution steps, command syntax, and options for reporting the issue.\nSOURCE: https://github.com/cloudflare/workers-sdk/blob/main/STYLEGUIDE.md#2025-04-21_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\n✘  ERROR  *API error code if applicable*: *Concise description of what the error is*:\n\nError details:\n*Description of what caused the error*\n\nHow to solve this error:\n*Direction on how to resolve the error*\n\nwrangler *example of full command user tried to run*\n\n*Description of the command's purpose*\n\nPositionals:\n  positional  *Positional description*.  [data-type] [required/optional]\n\nOptions:\n  -o, --option  *Option description* [data type] [default: true/false]\n\nIf you think this is a bug then please create an issue at https://github.com/cloudflare/workers-sdk/issues/new/choose\n\n🪵  Logs were written to <filepath>\n```\n\n----------------------------------------\n\nTITLE: Local Development Command\nDESCRIPTION: Command to start the local Vite development server for the playground frontend.\nSOURCE: https://github.com/cloudflare/workers-sdk/blob/main/packages/workers-playground/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Referencing Cloudflare Workers Shared Package in Markdown\nDESCRIPTION: This snippet shows how to reference the @cloudflare/workers-shared package in a markdown file. It includes a note about the importance of careful review for changes due to its use in production infrastructure.\nSOURCE: https://github.com/cloudflare/workers-sdk/blob/main/packages/workers-shared/README.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# `@cloudflare/workers-shared`\n\nThis is a package that is used at Cloudflare to power some internal features of [Cloudflare Workers](https://developers.cloudflare.com/workers/), as well as their open-source equivalents here in workers-sdk and Wrangler.\n\n> [!NOTE]\n> Since code in this package is used by the Workers infrastructure, it is important that PRs are given careful review with regards to how they could cause a failure in production.\n> Ideally, there should be comprehensive tests for changes being made to give extra confidence about the behavior.\n```\n\n----------------------------------------\n\nTITLE: Version Update Changelog in Markdown\nDESCRIPTION: Markdown formatted changelog entries showing version updates, bug fixes, dependency changes and links to commits for the Cloudflare Vite plugin package.\nSOURCE: https://github.com/cloudflare/workers-sdk/blob/main/packages/vite-plugin-cloudflare/CHANGELOG.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# @cloudflare/vite-plugin\n\n## 1.0.8\n\n### Patch Changes\n\n- Updated dependencies [[`eab7ad9`](https://github.com/cloudflare/workers-sdk/commit/eab7ad9af618bc85a79c077f07c6efcf05ae3f5f), [`62c40d7`](https://github.com/cloudflare/workers-sdk/commit/62c40d792b9555e6e25a5f99ae803e4943c4b56f), [`5de2b9a`](https://github.com/cloudflare/workers-sdk/commit/5de2b9a39a6cb6ac730d0f8f1b60f9f756c24993), [`69864b4`](https://github.com/cloudflare/workers-sdk/commit/69864b416420e2e8877befe8c41a507b78cd4413)]]:\n  - wrangler@4.12.0\n  - miniflare@4.20250416.0\n  - @cloudflare/unenv-preset@2.3.1\n```\n\n----------------------------------------\n\nTITLE: Running E2E Tests with PNPM\nDESCRIPTION: Command to execute end-to-end tests for the Cloudflare vite-plugin using turbo from the monorepo root.\nSOURCE: https://github.com/cloudflare/workers-sdk/blob/main/packages/vite-plugin-cloudflare/e2e/README.md#2025-04-21_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\npnpm test:e2e -F @cloudflare/vite-plugin\n```\n\n----------------------------------------\n\nTITLE: Updating Git Main Branch Commands\nDESCRIPTION: Commands to update local main branch with upstream changes\nSOURCE: https://github.com/cloudflare/workers-sdk/blob/main/CONTRIBUTING.md#2025-04-21_snippet_11\n\nLANGUAGE: sh\nCODE:\n```\ngit switch main\ngit pull upstream main\n```\n\n----------------------------------------\n\nTITLE: Formatting General Error Output in Shell\nDESCRIPTION: Provides a template for displaying a general error, including error details, solution steps, documentation links, and options for reporting the issue.\nSOURCE: https://github.com/cloudflare/workers-sdk/blob/main/STYLEGUIDE.md#2025-04-21_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\n✘  ERROR  *Error code if applicable*: *Concise description of what the error is*\n\nError details:\n*description of what caused the error*\n\nHow to solve this error:\n*direction on how to resolve the error*\n\n--------------------\nTo learn more about ___, read our documentation at https://developers.cloudflare.com/*productname*\n\nIf you think this is a bug then please create an issue at https://github.com/cloudflare/workers-sdk/issues/new/choose\n--------------------\n\n√ Would you like to report this error to Cloudflare? <y/n>\n\n#User inputs y or n#\n\n🪵  Logs were written to <filepath>\n```\n\n----------------------------------------\n\nTITLE: Creating a Note Block in Markdown\nDESCRIPTION: This code snippet demonstrates how to create a note block in Markdown using the blockquote syntax with a NOTE label. It contains a warning about the importance of careful code review for this package.\nSOURCE: https://github.com/cloudflare/workers-sdk/blob/main/packages/pages-shared/README.md#2025-04-21_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n> [!NOTE]\n> Since code in this package is used by the Pages infrastructure, it is important that PRs are given careful review with regards to how they could cause a failure in production.\n> Ideally, there should be comprehensive tests for changes being made to give extra confidence about the behavior.\n```\n\n----------------------------------------\n\nTITLE: Starting Development Session with Wrangler for Workers with SPA Assets\nDESCRIPTION: Command to start a development session using Wrangler CLI for the Workers with Assets in SPA mode test fixture.\nSOURCE: https://github.com/cloudflare/workers-sdk/blob/main/fixtures/workers-with-assets-spa/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nwrangler dev\n```\n\n----------------------------------------\n\nTITLE: Adding Changeset to Git Command\nDESCRIPTION: Command to stage changeset files for commit\nSOURCE: https://github.com/cloudflare/workers-sdk/blob/main/CONTRIBUTING.md#2025-04-21_snippet_18\n\nLANGUAGE: sh\nCODE:\n```\ngit add ./changeset/*.md\n```\n\n----------------------------------------\n\nTITLE: Displaying Success State with Binding in Shell\nDESCRIPTION: Shows the format for displaying a success state after creating a resource, including details and instructions for adding a binding configuration to a Worker.\nSOURCE: https://github.com/cloudflare/workers-sdk/blob/main/STYLEGUIDE.md#2025-04-21_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\n🌀 Creating ___ with title \"___\"\n✨ Success. *Add details of success and what the user can now do*\n📣 *Optional announcement*\n\nTo start interacting with this ___ from a Worker, *If additional steps required, such as obtaining account ID from dash, add them here* \\(then\\) open your Worker's config file and add the following binding configuration:\n\n[[array]]\nbinding = \"<VARIABLE_NAME>\"\nname = \"___\"\nid = \"___\"\n```\n\n----------------------------------------\n\nTITLE: Dependency Version Updates in create-cloudflare Package\nDESCRIPTION: Table of dependency version updates including changes to create-astro, create-vue, nuxi, sv, @angular/create and other packages.\nSOURCE: https://github.com/cloudflare/workers-sdk/blob/main/packages/create-cloudflare/CHANGELOG.md#2025-04-21_snippet_16\n\nLANGUAGE: markdown\nCODE:\n```\n| Dependency   | From  | To     |\n| ------------ | ----- | ------ |\n| create-astro | 4.8.0 | 4.10.0 |\n| create-vue | 3.11.1 | 3.11.2 |\n| nuxi       | 3.12.0 | 3.15.0 |\n| sv         | 0.5.11 | 0.6.1 |\n```\n\n----------------------------------------\n\nTITLE: Deploying Pages Worker.js with Routes App using Wrangler CLI\nDESCRIPTION: This snippet shows how to deploy the static assets of the Pages project to Cloudflare using the Wrangler CLI. It involves changing to the project directory and using the 'wrangler pages deploy' command.\nSOURCE: https://github.com/cloudflare/workers-sdk/blob/main/fixtures/pages-workerjs-with-routes-app/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# cd into the test fixture folder\ncd fixtures/pages-workerjs-with-routes-app\n\n# Deploy the directory of static assets as a Pages deployment\nnpx wrangler pages deploy public\n```\n\n----------------------------------------\n\nTITLE: Cloudflare Employee Repository Setup\nDESCRIPTION: Commands for Cloudflare employees to clone and work with the repository directly.\nSOURCE: https://github.com/cloudflare/workers-sdk/blob/main/CONTRIBUTING.md#2025-04-21_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\ngit clone https://github.com/cloudflare/workers-sdk.git\ncd workers-sdk\n```\n\n----------------------------------------\n\nTITLE: Formatting Written Value Prompt in Shell\nDESCRIPTION: Shows the structure for a written value prompt in Wrangler, including the command, prompt request, default value, and user input handling.\nSOURCE: https://github.com/cloudflare/workers-sdk/blob/main/STYLEGUIDE.md#2025-04-21_snippet_7\n\nLANGUAGE: sh\nCODE:\n```\nwrangler <command>\n<prompt request>\n<defaut_value>\n\n#User enters value then presses enter#\n\n<response detailing what task/s have been performed and with what values where applicable OR continue to next prompt>\n```\n\n----------------------------------------\n\nTITLE: Updating Dependencies in create-cloudflare Package\nDESCRIPTION: Updates the versions of create-vite and nuxi dependencies in the create-cloudflare package.\nSOURCE: https://github.com/cloudflare/workers-sdk/blob/main/packages/create-cloudflare/CHANGELOG.md#2025-04-21_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n| Dependency  | From  | To    |\n| ----------- | ----- | ----- |\n| create-vite | 6.1.1 | 6.3.1 |\n\n| Dependency | From   | To     |\n| ---------- | ------ | ------ |\n| nuxi       | 3.21.1 | 3.23.1 |\n```\n\n----------------------------------------\n\nTITLE: Publishing Pages-WorkerJS-WASM app to Cloudflare Pages\nDESCRIPTION: Commands to navigate to the test fixture directory and deploy the project to Cloudflare Pages. Requires a Cloudflare account to complete deployment.\nSOURCE: https://github.com/cloudflare/workers-sdk/blob/main/fixtures/pages-workerjs-wasm-app/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# cd into the test fixture folder\ncd fixtures/pages-workerjs-wasm-app\n\n# Deploy the directory of static assets as a Pages deployment\nnpm run publish\n```\n\n----------------------------------------\n\nTITLE: Creating New Branches (Cloudflare Employees)\nDESCRIPTION: Commands for Cloudflare employees to create and push new branches.\nSOURCE: https://github.com/cloudflare/workers-sdk/blob/main/CONTRIBUTING.md#2025-04-21_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\ngit checkout -b <new-branch-name>\ngit push origin <new-branch-name>\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies with UV for Python Workers Project\nDESCRIPTION: Commands to create a virtual environment and install dependencies using UV package manager. This setup enables autocomplete and type hints for the Python Workers project.\nSOURCE: https://github.com/cloudflare/workers-sdk/blob/main/packages/create-cloudflare/templates/hello-world/py/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nuv venv\nuv sync\n```\n\n----------------------------------------\n\nTITLE: Updating Dependencies in create-cloudflare Package JSON\nDESCRIPTION: Updates the sv dependency version in the create-cloudflare package.\nSOURCE: https://github.com/cloudflare/workers-sdk/blob/main/packages/create-cloudflare/CHANGELOG.md#2025-04-21_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"sv\": \"0.6.23\"\n}\n```\n\n----------------------------------------\n\nTITLE: Running Tests for the Workers Assets-Only Project\nDESCRIPTION: Command to execute the test suite for the workers-with-assets-only project using npm.\nSOURCE: https://github.com/cloudflare/workers-sdk/blob/main/fixtures/workers-with-assets-only/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm run test\n```\n\n----------------------------------------\n\nTITLE: Updating Miniflare Dependencies in Markdown\nDESCRIPTION: Updates the versions of workerd and @cloudflare/workers-types dependencies for the Miniflare package. The changes are documented in a markdown table format.\nSOURCE: https://github.com/cloudflare/workers-sdk/blob/main/packages/miniflare/CHANGELOG.md#2025-04-21_snippet_6\n\nLANGUAGE: markdown\nCODE:\n```\n| Dependency                | From          | To            |\n| ------------------------- | ------------- | ------------- |\n| workerd                   | 1.20250320.0  | 1.20250321.0  |\n| @cloudflare/workers-types | ^4.20250320.0 | ^4.20250321.0 |\n```\n\n----------------------------------------\n\nTITLE: Updating Miniflare Dependencies in Markdown\nDESCRIPTION: Updates the versions of workerd and @cloudflare/workers-types dependencies for the Miniflare package. The changes are documented in a markdown table format.\nSOURCE: https://github.com/cloudflare/workers-sdk/blob/main/packages/miniflare/CHANGELOG.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Dependency                | From          | To            |\n| ------------------------- | ------------- | ------------- |\n| workerd                   | 1.20250410.0  | 1.20250416.0  |\n| @cloudflare/workers-types | ^4.20250410.0 | ^4.20250415.0 |\n```\n\n----------------------------------------\n\nTITLE: Vue Dependency Update Table\nDESCRIPTION: Markdown table showing version update for create-vue dependency in the create-cloudflare package.\nSOURCE: https://github.com/cloudflare/workers-sdk/blob/main/packages/create-cloudflare/CHANGELOG.md#2025-04-21_snippet_8\n\nLANGUAGE: markdown\nCODE:\n```\n| Dependency | From   | To     |\n| ---------- | ------ | ------ |\n| create-vue | 3.13.0 | 3.14.0 |\n```\n\n----------------------------------------\n\nTITLE: Running Tests for Pages Functions Project\nDESCRIPTION: Commands to navigate to the test fixture directory and execute the test suite for the Pages Functions with Routes application.\nSOURCE: https://github.com/cloudflare/workers-sdk/blob/main/fixtures/pages-functions-with-routes-app/README.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n# cd into the test fixture folder\ncd fixtures/pages-functions-with-routes-app\n\n# Run tests\nnpm run test\n```\n\n----------------------------------------\n\nTITLE: Updating Miniflare Dependencies in Markdown\nDESCRIPTION: Updates the versions of workerd and @cloudflare/workers-types dependencies for the Miniflare package. The changes are documented in a markdown table format.\nSOURCE: https://github.com/cloudflare/workers-sdk/blob/main/packages/miniflare/CHANGELOG.md#2025-04-21_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n| Dependency                | From          | To            |\n| ------------------------- | ------------- | ------------- |\n| workerd                   | 1.20250408.0  | 1.20250409.0  |\n| @cloudflare/workers-types | ^4.20250408.0 | ^4.20250409.0 |\n```\n\n----------------------------------------\n\nTITLE: Version Update Table for create-next-app\nDESCRIPTION: Markdown table showing version update from 15.1.3 to 15.1.4 for create-next-app dependency\nSOURCE: https://github.com/cloudflare/workers-sdk/blob/main/packages/create-cloudflare/CHANGELOG.md#2025-04-21_snippet_9\n\nLANGUAGE: markdown\nCODE:\n```\n| Dependency      | From   | To     |\n| --------------- | ------ | ------ |\n| create-next-app | 15.1.3 | 15.1.4 |\n```\n\n----------------------------------------\n\nTITLE: Running Tests for pages-functions-wasm-app\nDESCRIPTION: Commands to navigate to the test fixture folder and execute the test suite for the pages-functions-wasm-app project.\nSOURCE: https://github.com/cloudflare/workers-sdk/blob/main/fixtures/pages-functions-wasm-app/README.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n# cd into the test fixture folder\ncd fixtures/pages-functions-wasm-app\n\n# Run tests\nnpm run test\n```\n\n----------------------------------------\n\nTITLE: Dependency Version Table - Latest Update\nDESCRIPTION: Markdown table showing dependency version updates for workerd and @cloudflare/workers-types packages.\nSOURCE: https://github.com/cloudflare/workers-sdk/blob/main/packages/miniflare/CHANGELOG.md#2025-04-21_snippet_14\n\nLANGUAGE: markdown\nCODE:\n```\n| Dependency                | From          | To            |\n| ------------------------- | ------------- | ------------- |\n| workerd                   | 1.20241004.0  | 1.20241011.1  |\n| @cloudflare/workers-types | ^4.20241004.0 | ^4.20241011.0 |\n```\n\n----------------------------------------\n\nTITLE: VS Code Test Debug Script\nDESCRIPTION: Script used in VS Code configuration to launch debug sessions for individual test files.\nSOURCE: https://github.com/cloudflare/workers-sdk/blob/main/tools/README.md#2025-04-21_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\ntest/run-test-file.ts\n```\n\n----------------------------------------\n\nTITLE: Updating Next Experimental Template Version in JSON\nDESCRIPTION: Updates the Next experimental template to use version ~15.2.2.\nSOURCE: https://github.com/cloudflare/workers-sdk/blob/main/packages/create-cloudflare/CHANGELOG.md#2025-04-21_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"Next\": \"~15.2.2\"\n}\n```\n\n----------------------------------------\n\nTITLE: Version Change Log Entry Structure\nDESCRIPTION: Markdown structure used for documenting version changes with PR links and commit hashes.\nSOURCE: https://github.com/cloudflare/workers-sdk/blob/main/packages/create-cloudflare/CHANGELOG.md#2025-04-21_snippet_19\n\nLANGUAGE: markdown\nCODE:\n```\n### Patch Changes\n\n- [#6880](https://github.com/cloudflare/workers-sdk/pull/6880) [`be88a62`](https://github.com/cloudflare/workers-sdk/commit/be88a62ad147c5e33da5a295d35693a62eef7943) Thanks [@dependabot](https://github.com/apps/dependabot)!\n```\n\n----------------------------------------\n\nTITLE: Running Tests for Pages Functions Config File Integration\nDESCRIPTION: Commands to navigate to the test fixture directory and run the test suite for the Pages Functions with configuration file integration.\nSOURCE: https://github.com/cloudflare/workers-sdk/blob/main/fixtures/pages-functions-with-config-file-app/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# cd into the test fixture folder\ncd fixtures/pages-functions-with-config-file-app\n\n# Run tests\nnpm run test\n```\n\n----------------------------------------\n\nTITLE: Dependency Version Updates Table\nDESCRIPTION: Markdown table showing dependency version updates for create-cloudflare package, including changes to Angular, Hono, Remix and Nuxi versions.\nSOURCE: https://github.com/cloudflare/workers-sdk/blob/main/packages/create-cloudflare/CHANGELOG.md#2025-04-21_snippet_7\n\nLANGUAGE: markdown\nCODE:\n```\n| Dependency      | From   | To     |\n| --------------- | ------ | ------ |\n| @angular/create | 19.1.2 | 19.1.5 |\n| create-hono     | 0.15.2 | 0.15.3 |\n| create-remix    | 2.15.2 | 2.15.3 |\n| nuxi            | 3.20.0 | 3.21.1 |\n```\n\n----------------------------------------\n\nTITLE: Updating Miniflare Dependencies in Markdown\nDESCRIPTION: Updates the versions of workerd and @cloudflare/workers-types dependencies for the Miniflare package. The changes are documented in a markdown table format.\nSOURCE: https://github.com/cloudflare/workers-sdk/blob/main/packages/miniflare/CHANGELOG.md#2025-04-21_snippet_7\n\nLANGUAGE: markdown\nCODE:\n```\n| Dependency                | From          | To            |\n| ------------------------- | ------------- | ------------- |\n| workerd                   | 1.20250319.0  | 1.20250320.0  |\n| @cloudflare/workers-types | ^4.20250319.0 | ^4.20250320.0 |\n```\n\n----------------------------------------\n\nTITLE: Quick Edit Package Version History\nDESCRIPTION: Changelog entries detailing version updates, bug fixes, and feature additions for the @cloudflare/quick-edit package.\nSOURCE: https://github.com/cloudflare/workers-sdk/blob/main/packages/quick-edit/CHANGELOG.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# @cloudflare/quick-edit\n\n## 0.3.2\n\n### Patch Changes\n\n- [#7040](https://github.com/cloudflare/workers-sdk/pull/7040) [`44c954b`](https://github.com/cloudflare/workers-sdk/commit/44c954b98ac86e9ea98f6e589c419d40c5d7f122) Thanks [@penalosa](https://github.com/penalosa)! - Try and ensure the `d.ts` types are definitely the ones loaded in `quick-edit-extension`\n\n## 0.3.1\n\n### Patch Changes\n\n- [#6998](https://github.com/cloudflare/workers-sdk/pull/6998) [`720a91d`](https://github.com/cloudflare/workers-sdk/commit/720a91d501ca04f677ab75f9da8f4b8b6d24a56f) Thanks [@edmundhung](https://github.com/edmundhung)! - chore: fix build config\n\n## 0.3.0\n\n### Minor Changes\n\n- [#6962](https://github.com/cloudflare/workers-sdk/pull/6962) [`a204747`](https://github.com/cloudflare/workers-sdk/commit/a204747e04afa7592d0cbb5d9fb35d9cd0b2cd49) Thanks [@edmundhung](https://github.com/edmundhung)! - feat: lower autosave delay to 200ms\n```\n\n----------------------------------------\n\nTITLE: Running Tests for Workers with SPA Assets\nDESCRIPTION: Command to execute the test suite for the Workers with Assets in SPA mode test fixture using npm.\nSOURCE: https://github.com/cloudflare/workers-sdk/blob/main/fixtures/workers-with-assets-spa/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm run test\n```\n\n----------------------------------------\n\nTITLE: Formatting Zod Error for Object Union Schema with Color\nDESCRIPTION: This snippet shows the formatted error output for an object union schema with color-coded error messages, highlighting different types of validation failures.\nSOURCE: https://github.com/cloudflare/workers-sdk/blob/main/packages/miniflare/test/snapshots/zod-format.spec.ts.md#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n[2m{[22m\n  [2mkey: [22m[33mfalse[39m[2m,[22m\n[31m       ^ Expected string, received boolean[39m\n  [2mobjects: [[22m\n    [2m/* [0] */ [22m[33mfalse[39m[2m,[22m\n[31m              ^ Expected object, received boolean[39m\n    [2m/* [1] */ {[22m\n      [2ma: [22m[90mundefined[39m[2m,[22m\n[33m         ^1 Required *or*[39m\n      [2mb: [22m[90mundefined[39m[2m,[22m\n[33m         ^1 Required *or*[39m\n      [2mc: [22m[90mundefined[39m[2m,[22m\n[33m         ^1 Required[39m\n    [2m},[22m\n    [2m/* [2] */ {[22m\n      [2ma: [22m[90mundefined[39m[2m,[22m\n[36m         ^2 Required *or*[39m\n      [2mb: [22m[90mundefined[39m[2m,[22m\n[36m         ^2 Required *or*[39m\n      [2mc: [22m[90mundefined[39m[2m,[22m\n[36m         ^2 Required[39m\n    [2m},[22m\n    [2m/* [3] */ {[22m\n      [2ma: [22m[90mundefined[39m[2m,[22m\n[34m         ^3 Required *or*[39m\n      [2mb: [22m[90mundefined[39m[2m,[22m\n[34m         ^3 Required *or*[39m\n      [2mc: [22m[90mundefined[39m[2m,[22m\n[34m         ^3 Required[39m\n    [2m},[22m\n    [2m/* [4] */ {[22m\n      [2ma: [22m[90mundefined[39m[2m,[22m\n[35m         ^4 Required *or*[39m\n      [2mb: [22m[90mundefined[39m[2m,[22m\n[35m         ^4 Required *or*[39m\n      [2mc: [22m[90mundefined[39m[2m,[22m\n[35m         ^4 Required[39m\n    [2m},[22m\n    [2m/* [5] */ {[22m\n      [2ma: [22m[90mundefined[39m[2m,[22m\n[32m         ^5 Required *or*[39m\n      [2mb: [22m[90mundefined[39m[2m,[22m\n[32m         ^5 Required *or*[39m\n      [2mc: [22m[90mundefined[39m[2m,[22m\n[32m         ^5 Required[39m\n    [2m},[22m\n    [2m/* [6] */ {[22m\n      [2ma: [22m[90mundefined[39m[2m,[22m\n[33m         ^6 Required *or*[39m\n      [2mb: [22m[90mundefined[39m[2m,[22m\n[33m         ^6 Required *or*[39m\n      [2mc: [22m[90mundefined[39m[2m,[22m\n[33m         ^6 Required[39m\n    [2m},[22m\n    [2m/* [7] */ {[22m\n      [2ma: [22m[90mundefined[39m[2m,[22m\n[36m         ^7 Required *or*[39m\n      [2mb: [22m[90mundefined[39m[2m,[22m\n[36m         ^7 Required *or*[39m\n      [2mc: [22m[90mundefined[39m[2m,[22m\n[36m         ^7 Required[39m\n    [2m},[22m\n  [2m],[22m\n[2m}[22m\n```\n\n----------------------------------------\n\nTITLE: Version Table in Markdown - Dependency Updates\nDESCRIPTION: Markdown table showing dependency version updates for the create-cloudflare package, including changes to create-qwik versions.\nSOURCE: https://github.com/cloudflare/workers-sdk/blob/main/packages/create-cloudflare/CHANGELOG.md#2025-04-21_snippet_13\n\nLANGUAGE: markdown\nCODE:\n```\n| Dependency  | From   | To     |\n| ----------- | ------ | ------ |\n| create-qwik | 1.10.0 | 1.11.0 |\n```\n\n----------------------------------------\n\nTITLE: Updating Miniflare Dependencies in Markdown\nDESCRIPTION: Updates the versions of workerd and @cloudflare/workers-types dependencies for the Miniflare package. The changes are documented in a markdown table format.\nSOURCE: https://github.com/cloudflare/workers-sdk/blob/main/packages/miniflare/CHANGELOG.md#2025-04-21_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n| Dependency                | From          | To            |\n| ------------------------- | ------------- | ------------- |\n| workerd                   | 1.20250409.0  | 1.20250410.0  |\n| @cloudflare/workers-types | ^4.20250409.0 | ^4.20250410.0 |\n```\n\n----------------------------------------\n\nTITLE: Changelog Entry Markdown\nDESCRIPTION: Version history entries for the workers-playground package, documenting changes from version 0.0.1 to 0.2.4. Includes feature additions, bug fixes, and dependency updates.\nSOURCE: https://github.com/cloudflare/workers-sdk/blob/main/packages/workers-playground/CHANGELOG.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# workers-playground\n\n## 0.2.4\n\n### Patch Changes\n\n- [#8205](https://github.com/cloudflare/workers-sdk/pull/8205) [`6f26beb`](https://github.com/cloudflare/workers-sdk/commit/6f26bebb0d41786cdc10320a0f1558467c563a67) Thanks [@penalosa](https://github.com/penalosa)! - Use today's date as the default starter playground compat date\n```\n\n----------------------------------------\n\nTITLE: Installing Project Dependencies\nDESCRIPTION: Command to install all project dependencies using pnpm package manager.\nSOURCE: https://github.com/cloudflare/workers-sdk/blob/main/CONTRIBUTING.md#2025-04-21_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\ncd workers-sdk\npnpm install\n```\n\n----------------------------------------\n\nTITLE: Version Table in Markdown - Gatsby Update\nDESCRIPTION: Markdown table showing the version update for the Gatsby dependency.\nSOURCE: https://github.com/cloudflare/workers-sdk/blob/main/packages/create-cloudflare/CHANGELOG.md#2025-04-21_snippet_15\n\nLANGUAGE: markdown\nCODE:\n```\n| Dependency | From   | To     |\n| ---------- | ------ | ------ |\n| gatsby     | 5.13.7 | 5.14.0 |\n```\n\n----------------------------------------\n\nTITLE: Updating Next on Workers Template\nDESCRIPTION: Updates the Next on Workers template to use @opennextjs/cloudflare 1.0.0-beta releases.\nSOURCE: https://github.com/cloudflare/workers-sdk/blob/main/packages/create-cloudflare/CHANGELOG.md#2025-04-21_snippet_2\n\nLANGUAGE: Markdown\nCODE:\n```\nUpdate the Next on Workers template to use `@opennextjs/cloudflare` 1.0.0-beta releases\n```\n\n----------------------------------------\n\nTITLE: Disabling Wrangler Telemetry in Bash\nDESCRIPTION: This command shows how to disable telemetry collection for Wrangler globally using the CLI.\nSOURCE: https://github.com/cloudflare/workers-sdk/blob/main/packages/wrangler/telemetry.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpx wrangler telemetry disable\n```\n\n----------------------------------------\n\nTITLE: Changelog Entry for Version 0.1.1\nDESCRIPTION: Documents the addition of a readOnly property to the WorkerLoaded event to enable read-only state in the editor.\nSOURCE: https://github.com/cloudflare/workers-sdk/blob/main/packages/workers-editor-shared/CHANGELOG.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n### Patch Changes\n\n- [#6731](https://github.com/cloudflare/workers-sdk/pull/6731) [`7c95836`](https://github.com/cloudflare/workers-sdk/commit/7c9583695c61903838d62023402df3f9fc36f7cb) Thanks [@WalshyDev](https://github.com/WalshyDev)! - chore: add readOnly property to WorkerLoaded event allowing us to put the editor into a read only state when loading a Worker.\n```\n\n----------------------------------------\n\nTITLE: Adding Upstream Remote Repository\nDESCRIPTION: Commands to add and verify the upstream remote repository configuration.\nSOURCE: https://github.com/cloudflare/workers-sdk/blob/main/CONTRIBUTING.md#2025-04-21_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\ngit remote add upstream https://github.com/cloudflare/workers-sdk\ngit remote -v\norigin\thttps://github.com/<your-github-username>/workers-sdk (fetch)\norigin\thttps://github.com/<your-github-username>/workers-sdk (push)\nupstream\thttps://github.com/cloudflare/workers-sdk (fetch)\nupstream\thttps://github.com/cloudflare/workers-sdk (push)\n```\n\n----------------------------------------\n\nTITLE: Changelog Entry - Version 0.1.0\nDESCRIPTION: Changelog entry documenting the addition of .vsix artifact support in the pre-release registry\nSOURCE: https://github.com/cloudflare/workers-sdk/blob/main/packages/prerelease-registry/CHANGELOG.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n### Minor Changes\n\n- [#6602](https://github.com/cloudflare/workers-sdk/pull/6602) [`bf2e03e`](https://github.com/cloudflare/workers-sdk/commit/bf2e03e76836ef2618bcb00ab27c3624ae35b789) Thanks [@penalosa](https://github.com/penalosa)! - feat: Support `.vsix` artifacts in pre-release registry\n```\n\n----------------------------------------\n\nTITLE: Describing Asset Config Fixture in Markdown\nDESCRIPTION: This Markdown snippet explains the purpose of the asset config fixture, its relationship to the workers-shared package, and the reasons for its Linux-only test execution in CI.\nSOURCE: https://github.com/cloudflare/workers-sdk/blob/main/fixtures/asset-config/README.md#2025-04-21_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n# Asset config fixture\n\nThis is testing the asset worker in the workers-shared package. We cannot use the vitest integration directly in that package because it results in circular dependencies.\n\nSince it runs tests in a workerd context and doesn't depend on the host OS, this fixture only runs test on Linux to reduce wasted time in CI.\n```\n\n----------------------------------------\n\nTITLE: Version Update for createBatch Implementation\nDESCRIPTION: This snippet shows the version update that implements local dev for createBatch functionality in the @cloudflare/workflows-shared package.\nSOURCE: https://github.com/cloudflare/workers-sdk/blob/main/packages/workflows-shared/CHANGELOG.md#2025-04-21_snippet_1\n\nLANGUAGE: Markdown\nCODE:\n```\n## 0.3.1\n\n### Patch Changes\n\n- [#8606](https://github.com/cloudflare/workers-sdk/pull/8606) [`18edbc2`](https://github.com/cloudflare/workers-sdk/commit/18edbc2a6b02e6b7cd0a027e5b90ff043da6ee79) Thanks [@LuisDuarte1](https://github.com/LuisDuarte1)! - Implement local dev for createBatch\n```\n\n----------------------------------------\n\nTITLE: Wrangler Dev Command with Local Flag\nDESCRIPTION: Command referenced in the notes that must be run with Node.js version 16 to work properly with miniflare.\nSOURCE: https://github.com/cloudflare/workers-sdk/blob/main/fixtures/d1-worker-app/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nwrangler dev --local\n```\n\n----------------------------------------\n\nTITLE: Changelog Entry - Version 0.0.4\nDESCRIPTION: Changelog entry documenting the update of c3 openapi template to use chanfana and Hono\nSOURCE: https://github.com/cloudflare/workers-sdk/blob/main/packages/prerelease-registry/CHANGELOG.md#2025-04-21_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n### Patch Changes\n\n- [#6106](https://github.com/cloudflare/workers-sdk/pull/6106) [`286cdd6`](https://github.com/cloudflare/workers-sdk/commit/286cdd68a36c063c606545d42a0274c81398d6b9) Thanks [@G4brym](https://github.com/G4brym)! - Update c3 openapi template to use chanfana and Hono\n```\n\n----------------------------------------\n\nTITLE: Updating Dependencies in create-cloudflare Package JSON\nDESCRIPTION: Updates the create-vue dependency version in the create-cloudflare package.\nSOURCE: https://github.com/cloudflare/workers-sdk/blob/main/packages/create-cloudflare/CHANGELOG.md#2025-04-21_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"create-vue\": \"3.14.2\"\n}\n```\n\n----------------------------------------\n\nTITLE: Publishing and Moving D1 Worker Fixture with Wrangler CLI\nDESCRIPTION: This shell command uses Wrangler CLI version 3.2.0 to publish the D1 worker configuration in dry-run mode, then moves the generated worker file to the correct location for testing.\nSOURCE: https://github.com/cloudflare/workers-sdk/blob/main/packages/miniflare/test/fixtures/d1/README.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ npx wrangler@3.2.0 publish --config test/fixtures/d1/wrangler.toml --dry-run --outdir dist\n$ mv test/fixtures/d1/dist/worker.js test/fixtures/d1/worker.dist.mjs\n```\n\n----------------------------------------\n\nTITLE: Initial Scaffolding for Cloudflare Workers Bindings Extension\nDESCRIPTION: This change sets up the initial scaffolding for the Cloudflare Workers Bindings extension, laying the groundwork for future development and features.\nSOURCE: https://github.com/cloudflare/workers-sdk/blob/main/packages/cloudflare-workers-bindings-extension/CHANGELOG.md#2025-04-21_snippet_8\n\nLANGUAGE: markdown\nCODE:\n```\n- [#7467](https://github.com/cloudflare/workers-sdk/pull/7467) [`ee3ef64`](https://github.com/cloudflare/workers-sdk/commit/ee3ef64149380d306377b5bda9b34ff7e60a3035) Thanks [@penalosa](https://github.com/penalosa)! - Initial scaffolding\n```\n\n----------------------------------------\n\nTITLE: Updating Miniflare Dependencies in Markdown\nDESCRIPTION: Updates the versions of workerd and @cloudflare/workers-types dependencies for the Miniflare package. The changes are documented in a markdown table format.\nSOURCE: https://github.com/cloudflare/workers-sdk/blob/main/packages/miniflare/CHANGELOG.md#2025-04-21_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n| Dependency                | From          | To            |\n| ------------------------- | ------------- | ------------- |\n| workerd                   | 1.20250404.0  | 1.20250405.0  |\n| @cloudflare/workers-types | ^4.20250404.0 | ^4.20250405.0 |\n```\n\n----------------------------------------\n\nTITLE: Changelog Entry - Version 0.0.3\nDESCRIPTION: Changelog entry documenting a fix to only return successful cached responses\nSOURCE: https://github.com/cloudflare/workers-sdk/blob/main/packages/prerelease-registry/CHANGELOG.md#2025-04-21_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n### Patch Changes\n\n- [#5349](https://github.com/cloudflare/workers-sdk/pull/5349) [`820fd38`](https://github.com/cloudflare/workers-sdk/commit/820fd3855c306623ab896dc686a6f9d7c8254238) Thanks [@penalosa](https://github.com/penalosa)! - fix: Only return successful cached responses\n```\n\n----------------------------------------\n\nTITLE: Version Update Table for Nuxt\nDESCRIPTION: Markdown table showing version update from 3.17.2 to 3.20.0 for nuxi dependency\nSOURCE: https://github.com/cloudflare/workers-sdk/blob/main/packages/create-cloudflare/CHANGELOG.md#2025-04-21_snippet_12\n\nLANGUAGE: markdown\nCODE:\n```\n| Dependency | From   | To     |\n| ---------- | ------ | ------ |\n| nuxi       | 3.17.2 | 3.20.0 |\n```\n\n----------------------------------------\n\nTITLE: Updating Dependencies in create-cloudflare Package JSON\nDESCRIPTION: Updates dependency versions for create-next-app and create-solid in the create-cloudflare package.\nSOURCE: https://github.com/cloudflare/workers-sdk/blob/main/packages/create-cloudflare/CHANGELOG.md#2025-04-21_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"create-next-app\": \"15.2.1\",\n  \"create-solid\": \"0.6.1\"\n}\n```\n\n----------------------------------------\n\nTITLE: Changelog Entry for Version 0.1.0\nDESCRIPTION: Initial release of shared utilities for the online editing experience.\nSOURCE: https://github.com/cloudflare/workers-sdk/blob/main/packages/workers-editor-shared/CHANGELOG.md#2025-04-21_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n### Minor Changes\n\n- [#6446](https://github.com/cloudflare/workers-sdk/pull/6446) [`d2b7482`](https://github.com/cloudflare/workers-sdk/commit/d2b7482cb87606b4bfa068fed9204cebc0cb7213) Thanks [@penalosa](https://github.com/penalosa)! - feat: Publish shared utilities for the online editing experience\n```\n\n----------------------------------------\n\nTITLE: Version Update Table for Additional Dependencies\nDESCRIPTION: Additional dependency version updates for packages including create-vite, create-hono, and create-remix.\nSOURCE: https://github.com/cloudflare/workers-sdk/blob/main/packages/create-cloudflare/CHANGELOG.md#2025-04-21_snippet_17\n\nLANGUAGE: markdown\nCODE:\n```\n| Dependency  | From  | To    |\n| ----------- | ----- | ----- |\n| create-vite | 5.5.4 | 5.5.5 |\n| create-hono | 0.12.0 | 0.14.1 |\n| create-remix | 2.12.0 | 2.13.1 |\n```\n\n----------------------------------------\n\nTITLE: Displaying Package Name in Markdown\nDESCRIPTION: This code snippet shows how to format the package name '@cloudflare/pages-shared' in a Markdown file using backticks for inline code formatting.\nSOURCE: https://github.com/cloudflare/workers-sdk/blob/main/packages/pages-shared/README.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n`@cloudflare/pages-shared`\n```\n\n----------------------------------------\n\nTITLE: Running Tests for Pages Worker.js with Routes App\nDESCRIPTION: This snippet demonstrates how to run tests for the Pages project. It involves changing to the project directory and executing the test command using npm.\nSOURCE: https://github.com/cloudflare/workers-sdk/blob/main/fixtures/pages-workerjs-with-routes-app/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# cd into the test fixture folder\ncd fixtures/pages-workerjs-with-routes-app\n\n# Run tests\nnpm run test\n```\n\n----------------------------------------\n\nTITLE: Dependency Version Update Table\nDESCRIPTION: Markdown table showing dependency version updates for the create-cloudflare package.\nSOURCE: https://github.com/cloudflare/workers-sdk/blob/main/packages/create-cloudflare/CHANGELOG.md#2025-04-21_snippet_18\n\nLANGUAGE: markdown\nCODE:\n```\n| Dependency   | From   | To     |\n| ------------ | ------ | ------ |\n| create-solid | 0.5.12 | 0.5.13 |\n```\n\n----------------------------------------\n\nTITLE: Markdown Table of Test Examples\nDESCRIPTION: A comprehensive table listing different example projects and their purposes, including basic unit tests, integration tests, and tests for various Cloudflare services.\nSOURCE: https://github.com/cloudflare/workers-sdk/blob/main/fixtures/vitest-pool-workers-examples/README.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Directory                                                                          | Overview                                                  |\n| ---------------------------------------------------------------------------------- | --------------------------------------------------------- |\n| [✅ basics-unit-integration-self](basics-unit-integration-self)                    | Basic unit tests and integration tests using `SELF`       |\n| [⚠️ basics-integration-auxiliary](basics-integration-auxiliary)                    | Basic integration tests using an auxiliary worker[^1]     |\n| [⚡️ pages-functions-unit-integration-self](pages-functions-unit-integration-self) | Functions unit tests and integration tests using `SELF`   |\n| [📦 kv-r2-caches](kv-r2-caches)                                                    | Isolated tests using KV, R2 and the Cache API             |\n| [📚 d1](d1)                                                                        | Isolated tests using D1 with migrations                   |\n| [📌 durable-objects](durable-objects)                                              | Isolated tests using Durable Objects with direct access   |\n| [🚥 queues](queues)                                                                | Tests using Queue producers and consumers                 |\n| [🚰 pipelines](pipelines)                                                          | Tests using Pipelines                                     |\n| [🚀 hyperdrive](hyperdrive)                                                        | Tests using Hyperdrive with a Vitest managed TCP server   |\n| [🤹 request-mocking](request-mocking)                                              | Tests using declarative/imperative outbound request mocks |\n| [🔌 multiple-workers](multiple-workers)                                            | Tests using multiple auxiliary workers and request mocks  |\n| [⚙️ web-assembly](web-assembly)                                                    | Tests importing WebAssembly modules                       |\n| [🤯 rpc](rpc)                                                                      | Tests using named entrypoints, Durable Objects and RPC    |\n| [🤷 misc](misc)                                                                    | Tests for other assorted Vitest features                  |\n```\n\n----------------------------------------\n\nTITLE: Example of Successful Deployment URL\nDESCRIPTION: Shows the terminal output format when deployment is successful, with the URL to access the deployed Pages application.\nSOURCE: https://github.com/cloudflare/workers-sdk/blob/main/fixtures/pages-functions-with-routes-app/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n✨ Deployment complete! Take a peek over at https:/<hash>.<PROJECT_NAME>.pages.dev\n```\n\n----------------------------------------\n\nTITLE: Running Development Mode for Workers Assets with User Worker\nDESCRIPTION: Command to start a development session using Wrangler CLI for the Workers Assets test fixture.\nSOURCE: https://github.com/cloudflare/workers-sdk/blob/main/fixtures/workers-with-assets/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nwrangler dev\n```\n\n----------------------------------------\n\nTITLE: Version Update Table for Angular Create\nDESCRIPTION: Markdown table showing version update from 19.0.6 to 19.0.7 for @angular/create dependency\nSOURCE: https://github.com/cloudflare/workers-sdk/blob/main/packages/create-cloudflare/CHANGELOG.md#2025-04-21_snippet_10\n\nLANGUAGE: markdown\nCODE:\n```\n| Dependency      | From   | To     |\n| --------------- | ------ | ------ |\n| @angular/create | 19.0.6 | 19.0.7 |\n```\n\n----------------------------------------\n\nTITLE: Directory Path Reference in Markdown\nDESCRIPTION: Reference to the fixtures directory path for examples in markdown format.\nSOURCE: https://github.com/cloudflare/workers-sdk/blob/main/packages/vitest-pool-workers/test/README.md#2025-04-21_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n[`fixtures/vitest-pool-workers-examples`](../../../fixtures/vitest-pool-workers-examples)\n```\n\n----------------------------------------\n\nTITLE: Starting Development Session for Cloudflare Workers with Assets\nDESCRIPTION: Command to initiate a development session using Wrangler CLI for the Workers Assets with User Worker fixture.\nSOURCE: https://github.com/cloudflare/workers-sdk/blob/main/fixtures/workers-with-assets-run-worker-first/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nwrangler dev\n```\n\n----------------------------------------\n\nTITLE: Patch Version Updates Markdown\nDESCRIPTION: Documents patch version updates and dependency changes for Cloudflare Workers SDK components including version numbers and commit references.\nSOURCE: https://github.com/cloudflare/workers-sdk/blob/main/packages/vitest-pool-workers/CHANGELOG.md#2025-04-21_snippet_8\n\nLANGUAGE: markdown\nCODE:\n```\n### Patch Changes\n\n- Updated dependencies [[`bdc121d`](https://github.com/cloudflare/workers-sdk/commit/bdc121de0a05aaa4716269e2a96b3c4ae3385d8e), [`248a318`](https://github.com/cloudflare/workers-sdk/commit/248a318acac293615327affe35b83018a48dddc9), [`e88ad44`](https://github.com/cloudflare/workers-sdk/commit/e88ad444f2dc54bbf4af4ac8d054ab6cd1af6898), [`9fd7eba`](https://github.com/cloudflare/workers-sdk/commit/9fd7eba3f2b526530b6934a613174541ba321eca)]]:\n  - wrangler@3.37.0\n  - miniflare@3.20240320.0\n```\n\n----------------------------------------\n\nTITLE: Specifying bcrypt Dependency in Python Requirements File\nDESCRIPTION: Defines a requirement for the bcrypt Python package version 4.0.1. This package provides bcrypt password hashing functionality for Python applications.\nSOURCE: https://github.com/cloudflare/workers-sdk/blob/main/fixtures/python-worker/requirements.txt#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nbcrypt==4.0.1\n```\n\n----------------------------------------\n\nTITLE: Updating Miniflare Dependencies in Markdown\nDESCRIPTION: Updates the versions of workerd and @cloudflare/workers-types dependencies for the Miniflare package. The changes are documented in a markdown table format.\nSOURCE: https://github.com/cloudflare/workers-sdk/blob/main/packages/miniflare/CHANGELOG.md#2025-04-21_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n| Dependency                | From          | To            |\n| ------------------------- | ------------- | ------------- |\n| workerd                   | 1.20250405.0  | 1.20250408.0  |\n| @cloudflare/workers-types | ^4.20250405.0 | ^4.20250408.0 |\n```\n\n----------------------------------------\n\nTITLE: Updating Miniflare Dependencies in Markdown\nDESCRIPTION: Updates the versions of workerd and @cloudflare/workers-types dependencies for the Miniflare package. The changes are documented in a markdown table format.\nSOURCE: https://github.com/cloudflare/workers-sdk/blob/main/packages/miniflare/CHANGELOG.md#2025-04-21_snippet_5\n\nLANGUAGE: markdown\nCODE:\n```\n| Dependency                | From          | To            |\n| ------------------------- | ------------- | ------------- |\n| workerd                   | 1.20250321.0  | 1.20250404.0  |\n| @cloudflare/workers-types | ^4.20250321.0 | ^4.20250404.0 |\n```\n\n----------------------------------------\n\nTITLE: Updating Miniflare Dependencies in package.json\nDESCRIPTION: Updates the versions of workerd and @cloudflare/workers-types dependencies for the Miniflare package.\nSOURCE: https://github.com/cloudflare/workers-sdk/blob/main/packages/miniflare/CHANGELOG.md#2025-04-21_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"dependencies\": {\n    \"workerd\": \"1.20250204.0\",\n    \"@cloudflare/workers-types\": \"^4.20250204.0\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Running service-worker-module format WebAssembly worker from Wrangler package directory\nDESCRIPTION: Alternative command to run a service-worker-module format worker from the Wrangler package directory, using npm start and specifying the path to the worker file.\nSOURCE: https://github.com/cloudflare/workers-sdk/blob/main/fixtures/wasm-app/README.md#2025-04-21_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nnpm start -- dev ../../examples/wasm-app/worker/service-worker-module/index.js\n```\n\n----------------------------------------\n\nTITLE: Starting local development server for Pages-WorkerJS-WASM app\nDESCRIPTION: Commands to navigate to the test fixture directory and start the local development server.\nSOURCE: https://github.com/cloudflare/workers-sdk/blob/main/fixtures/pages-workerjs-wasm-app/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# cd into the test fixture folder\ncd fixtures/pages-workerjs-wasm-app\n\n# start dev server\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Running Development Server Command\nDESCRIPTION: Command for starting a development server for individual Workers.\nSOURCE: https://github.com/cloudflare/workers-sdk/blob/main/fixtures/workers-with-assets-and-service-bindings/README.md#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncd <worker_directory>\nwrangler dev\n```\n\n----------------------------------------\n\nTITLE: Markdown Changelog Entry\nDESCRIPTION: A markdown-formatted changelog entry documenting version updates for package dependencies, bug fixes, and template improvements.\nSOURCE: https://github.com/cloudflare/workers-sdk/blob/main/packages/create-cloudflare/CHANGELOG.md#2025-04-21_snippet_24\n\nLANGUAGE: markdown\nCODE:\n```\n### Patch Changes\n\n- [#5602](https://github.com/cloudflare/workers-sdk/pull/5602) [`93cd7ae`](https://github.com/cloudflare/workers-sdk/commit/93cd7ae5a0c59ecb85df3890e4e49f461bb8563c) Thanks [@dependabot](https://github.com/apps/dependabot)! - chore: update dependencies of \"create-cloudflare\" package\n\n  The following dependency versions have been updated:\n\n  | Dependency | From   | To     |\n  | ---------- | ------ | ------ |\n  | gatsby     | 5.13.3 | 5.13.4 |\n```\n\n----------------------------------------\n\nTITLE: Updating Dependencies in create-cloudflare Package\nDESCRIPTION: This snippet shows the dependency updates for the create-cloudflare package, listing the old and new versions for various frameworks and tools.\nSOURCE: https://github.com/cloudflare/workers-sdk/blob/main/packages/create-cloudflare/CHANGELOG.md#2025-04-21_snippet_23\n\nLANGUAGE: markdown\nCODE:\n```\n| Dependency | From   | To     |\n| ---------- | ------ | ------ |\n| create-vue | 3.10.2 | 3.10.3 |\n\n| Dependency | From   | To     |\n| ---------- | ------ | ------ |\n| gatsby     | 5.13.5 | 5.13.6 |\n\n| Dependency        | From  | To    |\n| ----------------- | ----- | ----- |\n| create-docusaurus | 3.3.2 | 3.4.0 |\n\n| Dependency  | From  | To    |\n| ----------- | ----- | ----- |\n| create-hono | 0.7.3 | 0.8.1 |\n\n| Dependency      | From   | To     |\n| --------------- | ------ | ------ |\n| @angular/create | 17.3.7 | 18.0.3 |\n\n| Dependency | From   | To     |\n| ---------- | ------ | ------ |\n| nuxi       | 3.11.1 | 3.12.0 |\n\n| Dependency  | From  | To    |\n| ----------- | ----- | ----- |\n| create-qwik | 1.5.5 | 1.5.7 |\n```\n\n----------------------------------------\n\nTITLE: Rendering ASCII Art for 'WAA' Letters\nDESCRIPTION: This ASCII art depicts the letters 'WAA' using a combination of characters, dashes, pipes, and backslashes to create a decorative text-based image. Each letter is enclosed in a box-like structure, giving a 3D appearance.\nSOURCE: https://github.com/cloudflare/workers-sdk/blob/main/fixtures/workers-with-assets-only/public/yay.txt#2025-04-21_snippet_0\n\nLANGUAGE: ASCII\nCODE:\n```\n .----------------.  .----------------.  .-----------------.\n| .--------------. || .--------------. || .--------------. |\n| |  ____  ____  | || |      __      | || |  ____  ____  | |\n| | |_  _||_  _| | || |     /  \\     | || | |_  _||_  _| | |\n| |   \\ \\  / /   | || |    / /\\ \\    | || |   \\ \\  / /   | |\n| |    \\ \\/ /    | || |   / ____ \\   | || |    \\ \\/ /    | |\n| |    _|  |_    | || | _/ /    \\ \\_ | || |    _|  |_    | |\n| |   |______|   | || ||____|  |____|| || |   |______|   | |\n| |              | || |              | || |              | |\n| '--------------' || '--------------' || '--------------' |\n '----------------'  '----------------'  '----------------'\n```\n\n----------------------------------------\n\nTITLE: Pushing Changes to Fork Command\nDESCRIPTION: Command to push local branch changes to remote fork\nSOURCE: https://github.com/cloudflare/workers-sdk/blob/main/CONTRIBUTING.md#2025-04-21_snippet_14\n\nLANGUAGE: sh\nCODE:\n```\ngit push -u origin <new-branch-name>\n```\n\n----------------------------------------\n\nTITLE: File Naming Convention for Miniflare 3 Workers\nDESCRIPTION: Files ending in *.worker.ts are type-checked using @cloudflare/workers-types/experimental instead of @types/node. These files contain internal Worker implementations used by Miniflare 3.\nSOURCE: https://github.com/cloudflare/workers-sdk/blob/main/packages/miniflare/src/workers/README.md#2025-04-21_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n*.worker.ts\n```\n\n----------------------------------------\n\nTITLE: Dependency Version Table - Previous Update\nDESCRIPTION: Earlier version update table for workerd and @cloudflare/workers-types dependencies.\nSOURCE: https://github.com/cloudflare/workers-sdk/blob/main/packages/miniflare/CHANGELOG.md#2025-04-21_snippet_15\n\nLANGUAGE: markdown\nCODE:\n```\n| Dependency                | From          | To            |\n| ------------------------- | ------------- | ------------- |\n| workerd                   | 1.20240925.0  | 1.20241004.0  |\n| @cloudflare/workers-types | ^4.20240925.0 | ^4.20241004.0 |\n```\n\n----------------------------------------\n\nTITLE: Running Pages Functions Local Dev Server with Config File\nDESCRIPTION: Commands to navigate to the test fixture directory and start a local development server to test Pages Functions with a wrangler.toml configuration file.\nSOURCE: https://github.com/cloudflare/workers-sdk/blob/main/fixtures/pages-functions-with-config-file-app/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# cd into the test fixture folder\ncd fixtures/pages-functions-with-config-file-app\n\n# Start local dev server\nnpx wrangler pages dev\n```\n\n----------------------------------------\n\nTITLE: Formatting Zod Error for Array Schema with Invalid Elements\nDESCRIPTION: This snippet shows the formatted error output for an array schema where some elements have incorrect types.\nSOURCE: https://github.com/cloudflare/workers-sdk/blob/main/packages/miniflare/test/snapshots/zod-format.spec.ts.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n[\n  ...,\n  /* [2] */ '3',\n            ^ Expected number, received string\n  ...,\n  /* [5] */ false,\n            ^ Expected number, received boolean\n]\n```\n\n----------------------------------------\n\nTITLE: Running Tests for the Cloudflare Pages Test Fixture\nDESCRIPTION: Commands to navigate to the test fixture directory and execute the test suite to verify that the worker script takes precedence over the functions directory.\nSOURCE: https://github.com/cloudflare/workers-sdk/blob/main/fixtures/pages-workerjs-and-functions-app/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# cd into the test fixture folder\ncd fixtures/pages-workerjs-and-functions-app\n\n# Run tests\nnpm run test\n```\n\n----------------------------------------\n\nTITLE: Formatting Zod Error for Object Schema with Invalid Properties\nDESCRIPTION: This snippet demonstrates the formatted error output for an object schema with multiple invalid property types and a missing required property.\nSOURCE: https://github.com/cloudflare/workers-sdk/blob/main/packages/miniflare/test/snapshots/zod-format.spec.ts.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  ...,\n  b: '2',\n     ^ Expected number, received string\n  ...,\n  g: '7',\n     ^ Expected boolean, received string\n  f: undefined,\n     ^ Required\n}\n```\n\n----------------------------------------\n\nTITLE: Running tests for Pages-WorkerJS-WASM app\nDESCRIPTION: Commands to navigate to the test fixture directory and execute the test suite for the project.\nSOURCE: https://github.com/cloudflare/workers-sdk/blob/main/fixtures/pages-workerjs-wasm-app/README.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n# cd into the test fixture folder\ncd fixtures/pages-workerjs-wasm-app\n\n# Run tests\nnpm run test\n```\n\n----------------------------------------\n\nTITLE: Publishing pages-functions-wasm-app to Cloudflare Pages\nDESCRIPTION: Commands to navigate to the test fixture folder and deploy the static assets as a Cloudflare Pages deployment. Requires a Cloudflare account.\nSOURCE: https://github.com/cloudflare/workers-sdk/blob/main/fixtures/pages-functions-wasm-app/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# cd into the test fixture folder\ncd fixtures/pages-functions-wasm-app\n\n# Deploy the directory of static assets as a Pages deployment\nnpm run publish\n```\n\n----------------------------------------\n\nTITLE: Version Update in Package.json for @cloudflare/workflows-shared\nDESCRIPTION: This snippet shows the version number update for the @cloudflare/workflows-shared package. It includes the version number and a link to the corresponding pull request.\nSOURCE: https://github.com/cloudflare/workers-sdk/blob/main/packages/workflows-shared/CHANGELOG.md#2025-04-21_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n## 0.3.2\n\n### Patch Changes\n\n- [#8775](https://github.com/cloudflare/workers-sdk/pull/8775) [`ec7e621`](https://github.com/cloudflare/workers-sdk/commit/ec7e6212199272f9811a30a84922823c82d7d650) Thanks [@LuisDuarte1](https://github.com/LuisDuarte1)! - Add `waitForEvent` and `sendEvent` support for local dev\n```\n\n----------------------------------------\n\nTITLE: Version Table in Markdown - Multiple Dependencies\nDESCRIPTION: Markdown table showing multiple dependency updates including create-docusaurus, create-remix, and create-vue.\nSOURCE: https://github.com/cloudflare/workers-sdk/blob/main/packages/create-cloudflare/CHANGELOG.md#2025-04-21_snippet_14\n\nLANGUAGE: markdown\nCODE:\n```\n| Dependency        | From  | To    |\n| ----------------- | ----- | ----- |\n| create-docusaurus | 3.6.0 | 3.6.1 |\n```\n\n----------------------------------------\n\nTITLE: Configuring Dependency Pre-Bundling in Vitest for Cloudflare Workers\nDESCRIPTION: This code snippet shows how to configure Dependency Pre-Bundling in Vitest for Cloudflare Workers. It uses the defineWorkersConfig function to set up the test configuration, enabling the SSR optimizer and including specific packages for pre-bundling.\nSOURCE: https://github.com/cloudflare/workers-sdk/blob/main/fixtures/vitest-pool-workers-examples/module-resolution/README.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineWorkersConfig } from \"@cloudflare/vitest-pool-workers/config\";\n\nexport default defineWorkersConfig({\n\ttest: {\n\t\tdeps: {\n\t\t\toptimizer: {\n\t\t\t\tssr: {\n\t\t\t\t\tenabled: true,\n\t\t\t\t\tinclude: [\"your-package-name\"],\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t\tpoolOptions: {\n\t\t\tworkers: {\n\t\t\t\t// ...\n\t\t\t},\n\t\t},\n\t},\n});\n```\n\n----------------------------------------\n\nTITLE: Changelog Entry - Version 0.0.4\nDESCRIPTION: Markdown changelog entry documenting a patch release to test the release process.\nSOURCE: https://github.com/cloudflare/workers-sdk/blob/main/packages/workers.new/CHANGELOG.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n### Patch Changes\n\n- [`07613d3`](https://github.com/cloudflare/workers-sdk/commit/07613d3b231779466ca2528ce07385552ec73501) Thanks [@penalosa](https://github.com/penalosa)! - Trigger release after testing release process\n```\n\n----------------------------------------\n\nTITLE: Syncing with Upstream Repository\nDESCRIPTION: Commands to sync local repository with the upstream main branch.\nSOURCE: https://github.com/cloudflare/workers-sdk/blob/main/CONTRIBUTING.md#2025-04-21_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\ngit switch main\ngit pull upstream main\nFrom https://github.com/cloudflare/workers-sdk\n* branch            main       -> FETCH_HEAD\nAlready up to date.\n```\n\n----------------------------------------\n\nTITLE: Viewing Git Remote Configuration\nDESCRIPTION: Commands to view and verify the remote repository configuration.\nSOURCE: https://github.com/cloudflare/workers-sdk/blob/main/CONTRIBUTING.md#2025-04-21_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\ngit remote -v\norigin\thttps://github.com/<your-github-username>/workers-sdk (fetch)\norigin\thttps://github.com/<your-github-username>/workers-sdk (push)\n```\n\n----------------------------------------\n\nTITLE: Formatting Zod Error for Deeply Nested Schema\nDESCRIPTION: This snippet demonstrates the formatted error output for a complex nested schema with multiple type mismatches and missing required properties.\nSOURCE: https://github.com/cloudflare/workers-sdk/blob/main/packages/miniflare/test/snapshots/zod-format.spec.ts.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  a: '1',\n     ^ Expected number, received string\n  b: {\n    c: 2,\n       ^ Expected string, received number\n    d: [\n      ...,\n      /* [1] */ {\n        e: 42,\n           ^ Expected boolean, received number\n      },\n      /* [2] */ false,\n                ^ Expected object, received boolean\n      /* [3] */ {\n        e: undefined,\n           ^ Required\n      },\n    ],\n    f: [Function: f],\n       ^ Expected array, received function\n  },\n  g: undefined,\n     ^ Required\n}\n```\n\n----------------------------------------\n\nTITLE: Changelog Version Update Notes\nDESCRIPTION: Markdown changelog entries documenting version updates, bug fixes, and dependency changes.\nSOURCE: https://github.com/cloudflare/workers-sdk/blob/main/packages/vitest-pool-workers/CHANGELOG.md#2025-04-21_snippet_6\n\nLANGUAGE: markdown\nCODE:\n```\n### Patch Changes\n\n- [#6633](https://github.com/cloudflare/workers-sdk/pull/6633) [`1a4b4ba`](https://github.com/cloudflare/workers-sdk/commit/1a4b4ba406d7caf72f8ce06fc4d9c3dfdaacbb53) Thanks [@andyjessop](https://github.com/andyjessop)! - Ensures console methods are bound to their instance in Vitest Pool Worker tests\n\n- Updated dependencies [[`21a09e0`](https://github.com/cloudflare/workers-sdk/commit/21a09e06473e28722c3fe73dee9cd49b41807be3), [`a197460`](https://github.com/cloudflare/workers-sdk/commit/a197460f47db47279f2c5536269cd0de2b543576), [`a197460`](https://github.com/cloudflare/workers-sdk/commit/a197460f47db47279f2c5536269cd0de2b543576), [`8d1d464`](https://github.com/cloudflare/workers-sdk/commit/8d1d464f2b549dc7d7020fd45f025cd7c8671ce9)]:\n  - wrangler@3.75.0\n```\n\n----------------------------------------\n\nTITLE: Creating New Git Branch Command\nDESCRIPTION: Command to create and switch to a new branch based on main\nSOURCE: https://github.com/cloudflare/workers-sdk/blob/main/CONTRIBUTING.md#2025-04-21_snippet_12\n\nLANGUAGE: sh\nCODE:\n```\ngit checkout -b <new-branch-name> main\n```\n\n----------------------------------------\n\nTITLE: Describing Cache API put() Operation in workerd\nDESCRIPTION: Outlines the guarantees provided by workerd for the put() operation and the expected response format.\nSOURCE: https://github.com/cloudflare/workers-sdk/blob/main/packages/miniflare/src/workers/cache/README.md#2025-04-21_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n## .put()\n\n`workerd` guarantees:\n\n- The method will always be `PUT`, and the cache key method will always be `GET`\n- The headers will be the headers of the cache key, and the URL will be the URL\n  of the cache key\n- The headers will include `Cf-Cache-Namespaces` if this is a namespaced cache\n  (i.e. `caches.open(...)`)\n- The body contains the serialised response for storage\n  - The serialised response will never: - Have a `206` status code - Have a\n    `Vary: *` header - Have a `304` status code `workerd` expects:\n- A `204` (success) or `413` (failure) response code. It doesn't do anything\n  with either\n```\n\n----------------------------------------\n\nTITLE: Describing Cache API match() Operation in workerd\nDESCRIPTION: Details the guarantees provided by workerd for the match() operation and the expected response format.\nSOURCE: https://github.com/cloudflare/workers-sdk/blob/main/packages/miniflare/src/workers/cache/README.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## .match()\n\n`workerd` guarantees:\n\n- The method will always be `GET`\n- The request headers will include `Cache-Control: only-if-cached` (which\n  Miniflare ignores)\n- The request headers will include `Cf-Cache-Namespaces` if this is a namespaced\n  cache (i.e. `caches.open(...)`) `workerd` expects:\n- The `Cf-Cache-Status` header to be present with the value:\n  - `MISS` if it's a cache miss, in which case the rest of the response is\n    ignored by `workerd`\n  - `HIT` if it's a cache hit, in which case `workerd` sends the response on to\n    the user, including the full headers and full body\n```\n\n----------------------------------------\n\nTITLE: Implementing Addition Function in C for WebAssembly Compilation\nDESCRIPTION: This C code defines a simple addition function that takes two 32-bit integers as input and returns their sum. It's designed to be compiled into WebAssembly for use in web applications.\nSOURCE: https://github.com/cloudflare/workers-sdk/blob/main/packages/vite-plugin-cloudflare/playground/additional-modules/README.md#2025-04-21_snippet_0\n\nLANGUAGE: c\nCODE:\n```\n#include <stdint.h>\n\nint32_t add(int32_t a, int32_t b) {\n    return a + b;\n}\n```\n\n----------------------------------------\n\nTITLE: Version Update Table for SvelteKit\nDESCRIPTION: Markdown table showing version update from 0.6.10 to 0.6.11 for sv dependency\nSOURCE: https://github.com/cloudflare/workers-sdk/blob/main/packages/create-cloudflare/CHANGELOG.md#2025-04-21_snippet_11\n\nLANGUAGE: markdown\nCODE:\n```\n| Dependency | From   | To     |\n| ---------- | ------ | ------ |\n| sv         | 0.6.10 | 0.6.11 |\n```\n\n----------------------------------------\n\nTITLE: Running Test Command\nDESCRIPTION: Command for executing the test suite in CI environment.\nSOURCE: https://github.com/cloudflare/workers-sdk/blob/main/fixtures/workers-with-assets-and-service-bindings/README.md#2025-04-21_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nnpm run test:ci\n```\n\n----------------------------------------\n\nTITLE: Markdown Table of Test Files in Workers-SDK Basics Integration Auxiliary\nDESCRIPTION: A markdown table listing the test files in the project and their purposes. It includes both fetch and scheduled integration tests for auxiliary workers.\nSOURCE: https://github.com/cloudflare/workers-sdk/blob/main/fixtures/vitest-pool-workers-examples/basics-integration-auxiliary/README.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Test                                                                                      | Overview                           |\n| ----------------------------------------------------------------------------------------- | ---------------------------------- |\n| [fetch-integration-auxiliary.test.ts](test/fetch-integration-auxiliary.test.ts)           | Basic `fetch` integration test     |\n| [scheduled-integration-auxiliary.test.ts](test%2Fscheduled-integration-auxiliary.test.ts) | Basic `scheduled` integration test |\n```\n\n----------------------------------------\n\nTITLE: Running service-worker format WebAssembly worker from Wrangler package directory\nDESCRIPTION: Alternative command to run a service-worker format worker from the Wrangler package directory, using npm start and specifying both the worker file and config location.\nSOURCE: https://github.com/cloudflare/workers-sdk/blob/main/fixtures/wasm-app/README.md#2025-04-21_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nnpm start -- dev ../../examples/wasm-app/worker/service-worker/index.js --config ../../examples/wasm-app/worker/service-worker/wrangler.toml\n```\n\n----------------------------------------\n\nTITLE: Package Name Reference in Markdown\nDESCRIPTION: Reference to the main package name being tested in markdown format.\nSOURCE: https://github.com/cloudflare/workers-sdk/blob/main/packages/vitest-pool-workers/test/README.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n`@cloudflare/vitest-pool-workers`\n```\n\n----------------------------------------\n\nTITLE: Miniflare Test Error Example\nDESCRIPTION: Example error message when running Miniflare tests with WARP enabled.\nSOURCE: https://github.com/cloudflare/workers-sdk/blob/main/CONTRIBUTING.md#2025-04-21_snippet_10\n\nLANGUAGE: plain\nCODE:\n```\nfailed: TLS peer's certificate is not trusted; reason = self signed certificate in certificate chain\n```\n\n----------------------------------------\n\nTITLE: Referencing GitHub Pull Request in Markdown\nDESCRIPTION: This snippet shows how to reference a GitHub pull request in a Markdown changelog. It includes the PR number, commit hash, and a brief description of the change.\nSOURCE: https://github.com/cloudflare/workers-sdk/blob/main/fixtures/worker-ts/CHANGELOG.md#2025-04-21_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n- [#3588](https://github.com/cloudflare/workers-sdk/pull/3588) [`64631d8b`](https://github.com/cloudflare/workers-sdk/commit/64631d8b59572f49d65325d8f6fec098c5e912b9) Thanks [@penalosa](https://github.com/penalosa)! - fix: Preserve email handlers when applying middleware to user workers.\n```\n\n----------------------------------------\n\nTITLE: Deploying Pages Functions Project with Routes\nDESCRIPTION: Commands to navigate to the test fixture directory and deploy the static assets to Cloudflare Pages using Wrangler CLI.\nSOURCE: https://github.com/cloudflare/workers-sdk/blob/main/fixtures/pages-functions-with-routes-app/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# cd into the test fixture folder\ncd fixtures/pages-functions-with-routes-app\n\n# Deploy the directory of static assets as a Pages deployment\nnpx wrangler pages deploy public\n```\n\n----------------------------------------\n\nTITLE: Formatting Zod Error for Primitive Schema with Boolean Input\nDESCRIPTION: This snippet shows the formatted error output when validating a boolean input against a number schema using Zod.\nSOURCE: https://github.com/cloudflare/workers-sdk/blob/main/packages/miniflare/test/snapshots/zod-format.spec.ts.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfalse\n^ Expected number, received boolean\n```\n\n----------------------------------------\n\nTITLE: Implementing Default Object Export in Worker-B\nDESCRIPTION: Simple Worker implementation exporting a default object with a fetch method.\nSOURCE: https://github.com/cloudflare/workers-sdk/blob/main/fixtures/workers-with-assets-and-service-bindings/README.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n\tasync fetch() {}\n}\n```\n\n----------------------------------------\n\nTITLE: Starting Development Server Commands\nDESCRIPTION: Commands to start the Next.js development server using different package managers.\nSOURCE: https://github.com/cloudflare/workers-sdk/blob/main/packages/create-cloudflare/templates/next/pages/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm run dev\n# or\nyarn dev\n# or\npnpm dev\n# or\nbun dev\n```\n\n----------------------------------------\n\nTITLE: Running Tests for Workers Assets with User Worker\nDESCRIPTION: Command to execute the test suite for the Workers Assets with User Worker test fixture using npm.\nSOURCE: https://github.com/cloudflare/workers-sdk/blob/main/fixtures/workers-with-assets/README.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnpm run test\n```\n\n----------------------------------------\n\nTITLE: Misc Directory Path Reference in Markdown\nDESCRIPTION: Reference to the misc directory path for additional tests in markdown format.\nSOURCE: https://github.com/cloudflare/workers-sdk/blob/main/packages/vitest-pool-workers/test/README.md#2025-04-21_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n[`misc`](../../../fixtures/vitest-pool-workers-examples/misc)\n```\n\n----------------------------------------\n\nTITLE: KV Example Code Reference Comment\nDESCRIPTION: Comment marker used to identify KV example implementation code in the codebase.\nSOURCE: https://github.com/cloudflare/workers-sdk/blob/main/packages/create-cloudflare/templates/next/pages/README.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// KV Example:\n```\n\n----------------------------------------\n\nTITLE: Dependency Version Update Table\nDESCRIPTION: Markdown table showing dependency version changes from 18.1.3 to 18.1.4 for @angular/create\nSOURCE: https://github.com/cloudflare/workers-sdk/blob/main/packages/create-cloudflare/CHANGELOG.md#2025-04-21_snippet_20\n\nLANGUAGE: markdown\nCODE:\n```\n| Dependency      | From   | To     |\n| --------------- | ------ | ------ |\n| @angular/create | 18.1.3 | 18.1.4 |\n```\n\n----------------------------------------\n\nTITLE: Docusaurus Version Update Table\nDESCRIPTION: Markdown table showing dependency version changes from 3.5.1 to 3.5.2 for create-docusaurus\nSOURCE: https://github.com/cloudflare/workers-sdk/blob/main/packages/create-cloudflare/CHANGELOG.md#2025-04-21_snippet_21\n\nLANGUAGE: markdown\nCODE:\n```\n| Dependency        | From  | To    |\n| ----------------- | ----- | ----- |\n| create-docusaurus | 3.5.1 | 3.5.2 |\n```\n\n----------------------------------------\n\nTITLE: Svelte Version Update Table\nDESCRIPTION: Markdown table showing dependency version changes from 6.3.5 to 6.3.8 for create-svelte\nSOURCE: https://github.com/cloudflare/workers-sdk/blob/main/packages/create-cloudflare/CHANGELOG.md#2025-04-21_snippet_22\n\nLANGUAGE: markdown\nCODE:\n```\n| Dependency    | From  | To    |\n| ------------- | ----- | ----- |\n| create-svelte | 6.3.5 | 6.3.8 |\n```\n\n----------------------------------------\n\nTITLE: Changelog Entry - Version 0.0.3\nDESCRIPTION: Markdown changelog entry documenting a fake patch release.\nSOURCE: https://github.com/cloudflare/workers-sdk/blob/main/packages/workers.new/CHANGELOG.md#2025-04-21_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n### Patch Changes\n\n- [`98781db`](https://github.com/cloudflare/workers-sdk/commit/98781db674c5fac775e4c843bdcc869f0d49c918) Thanks [@penalosa](https://github.com/penalosa)! - trigger fake release\n```\n\n----------------------------------------\n\nTITLE: Changelog Entry - Version 0.0.2\nDESCRIPTION: Markdown changelog entry documenting another fake patch release.\nSOURCE: https://github.com/cloudflare/workers-sdk/blob/main/packages/workers.new/CHANGELOG.md#2025-04-21_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n### Patch Changes\n\n- [`bdecc9b`](https://github.com/cloudflare/workers-sdk/commit/bdecc9b2f4935ce3f9c7956d6b65a5030c1d11bb) Thanks [@penalosa](https://github.com/penalosa)! - trigger fake release\n```\n\n----------------------------------------\n\nTITLE: Changelog Entry - Version 0.0.1\nDESCRIPTION: Markdown changelog entry documenting the addition of Python playground support.\nSOURCE: https://github.com/cloudflare/workers-sdk/blob/main/packages/workers.new/CHANGELOG.md#2025-04-21_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n### Patch Changes\n\n- [#5043](https://github.com/cloudflare/workers-sdk/pull/5043) [`9b1a186`](https://github.com/cloudflare/workers-sdk/commit/9b1a18609753bf0ac87dc4ba3bd3c8d3600c4517) Thanks [@penalosa](https://github.com/penalosa)! - feat: Python playground support\n```\n\n----------------------------------------\n\nTITLE: Changelog Entry - Version 0.0.2\nDESCRIPTION: Changelog entry documenting the addition of a simple index page to prevent 522 errors\nSOURCE: https://github.com/cloudflare/workers-sdk/blob/main/packages/prerelease-registry/CHANGELOG.md#2025-04-21_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n### Patch Changes\n\n- [#2792](https://github.com/cloudflare/workers-sdk/pull/2792) [`4185e960`](https://github.com/cloudflare/workers-sdk/commit/4185e960958e952c669b94d86eacc6b263319ee9) Thanks [@Cyb3r-Jak3](https://github.com/Cyb3r-Jak3)! - feature: simple index page to prevent 522 error\n```"
  }
]