[
  {
    "owner": "ranaroussi",
    "repo": "yfinance",
    "content": "TITLE: Accessing Various Data for a Single Ticker with yfinance (Python)\nDESCRIPTION: This Python snippet shows how to use a `yf.Ticker` object (`dat`) to retrieve various types of financial data for a single stock (\"MSFT\"). It demonstrates accessing general information (`.info`), upcoming events (`.calendar`), analyst price targets, quarterly income statements, historical market data for the past month (`.history()`), and call options data for the first available expiration date.\nSOURCE: https://github.com/ranaroussi/yfinance/blob/main/doc/source/index.rst#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ndat = yf.Ticker(\"MSFT\")\ndat.info\ndat.calendar\ndat.analyst_price_targets\ndat.quarterly_income_stmt\ndat.history(period='1mo')\ndat.option_chain(dat.options[0]).calls\n```\n\n----------------------------------------\n\nTITLE: Initializing Multiple Tickers with yfinance in Python\nDESCRIPTION: This code snippet shows how to access and manage data for multiple tickers simultaneously using the Tickers class from yfinance. By providing a list of comma-separated ticker symbols, you can fetch data for all symbols at once, streamlining batch analysis. This technique requires yfinance and pandas, with outputs such as fetched info and historical data delivered as pandas DataFrames, facilitating multi-ticker data analysis.\nSOURCE: https://github.com/ranaroussi/yfinance/blob/main/doc/source/reference/yfinance.ticker_tickers.rst#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport yfinance as yf\n\ntickers = yf.Tickers(\"AAPL MSFT GOOGL\")\n\n# access individual ticker data\naapl_info = tickers.tickers[\"AAPL\"].info\n\n# batch download\ndata = tickers.history(period=\"1d\")\n```\n\n----------------------------------------\n\nTITLE: Importing yfinance and Initializing a Ticker Object (Python)\nDESCRIPTION: This Python snippet demonstrates the standard way to import the `yfinance` library (aliased as `yf`) and create a `Ticker` object to interact with data for a specific stock symbol, in this case, \"MSFT\" (Microsoft).\nSOURCE: https://github.com/ranaroussi/yfinance/blob/main/doc/source/index.rst#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport yfinance as yf\ndat = yf.Ticker(\"MSFT\")\n```\n\n----------------------------------------\n\nTITLE: Initializing Single Ticker with yfinance in Python\nDESCRIPTION: This snippet demonstrates how to use the yfinance Ticker class to create a ticker object for a single stock or financial instrument. The Ticker object allows Pythonic access to various financial data, such as historical prices, dividends, and company information. To run this code, yfinance must be installed, and you initialize the ticker by providing its symbol as a parameter; outputs are typically pandas DataFrames or Series with requested data.\nSOURCE: https://github.com/ranaroussi/yfinance/blob/main/doc/source/reference/yfinance.ticker_tickers.rst#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport yfinance as yf\n\nticker = yf.Ticker(\"AAPL\")\n\n# get stock info\nticker.info\n\n# get historical market data\nhist = ticker.history(period=\"1mo\")\n```\n\n----------------------------------------\n\nTITLE: Retrieving Fund Data with yfinance (Python)\nDESCRIPTION: This Python snippet illustrates how to fetch data specific to funds or ETFs using `yfinance`. It creates a `Ticker` object for 'SPY' (SPDR S&P 500 ETF Trust), accesses its fund-related data via the `.funds_data` attribute, and then retrieves the fund's description and top holdings.\nSOURCE: https://github.com/ranaroussi/yfinance/blob/main/doc/source/index.rst#_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nspy = yf.Ticker('SPY').funds_data\nspy.description\nspy.top_holdings\n```\n\n----------------------------------------\n\nTITLE: Accessing Funds Data for ETFs/Mutual Funds with yfinance in Python\nDESCRIPTION: This snippet illustrates how the Ticker class exposes fund-specific data through its funds_data attribute for ETFs and Mutual Funds. The funds_data returns a pandas DataFrame containing fund details, top holdings, and comparisons to category averages, offering robust insight for fund analysis. yfinance is required, and key operations revolve around fetching informative DataFrames based on the provided ticker symbol.\nSOURCE: https://github.com/ranaroussi/yfinance/blob/main/doc/source/reference/yfinance.ticker_tickers.rst#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport yfinance as yf\n\nfund_ticker = yf.Ticker(\"SPY\")\nfunds_data = fund_ticker.funds_data\nprint(funds_data)\n```\n\n----------------------------------------\n\nTITLE: Using Proxy Server for Data Download with yfinance in Python\nDESCRIPTION: This snippet demonstrates how to configure yfinance to use a proxy server for its network requests. This is particularly useful in restricted network environments or for privacy reasons. You define a proxies dictionary and pass it when making requests; dependencies include yfinance and network access to the specified proxy address.\nSOURCE: https://github.com/ranaroussi/yfinance/blob/main/doc/source/reference/yfinance.ticker_tickers.rst#_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport yfinance as yf\n\nproxies = {\n    'http': 'http://proxy.example.com:8080',\n    'https': 'http://proxy.example.com:8080',\n}\nticker = yf.Ticker(\"AAPL\", proxies=proxies)\ninfo = ticker.info\n```\n\n----------------------------------------\n\nTITLE: Chaining yfinance Sector/Industry with Tickers (Python)\nDESCRIPTION: This code example, referenced via `literalinclude`, shows how to chain `Sector` or `Industry` objects with `Ticker` objects in `yfinance`. After initializing a `Sector` or `Industry` object, its `tickers` attribute can be accessed to get a list of associated `Ticker` objects, enabling analysis of individual stocks within that sector or industry.\nSOURCE: https://github.com/ranaroussi/yfinance/blob/main/doc/source/reference/yfinance.sector_industry.rst#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n.. literalinclude:: examples/sector_industry_ticker.py\n   :language: python\n```\n\n----------------------------------------\n\nTITLE: Accessing Market Data Using yfinance Market Class in Python\nDESCRIPTION: This code demonstrates how to use the yfinance Market class to access and retrieve market data from Yahoo Finance programmatically. The example requires the yfinance library as a dependency and assumes Internet access to query the remote Yahoo Finance API. Users typically instantiate a Market object and use its available methods to fetch data for different markets such as US, GB, Asia, Europe, commodities, currencies, and cryptocurrencies. Inputs include market symbols or identifiers, and outputs are structured market data as returned by the yfinance API. The code is focused on facilitating readable data access and may be subject to API rate limits or data format changes.\nSOURCE: https://github.com/ranaroussi/yfinance/blob/main/doc/source/reference/yfinance.market.rst#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom yfinance import Market\n\n# Example: Access US market data\nus_market = Market('US')\nus_data = us_market.get_data()\n\nprint(us_data)\n```\n\n----------------------------------------\n\nTITLE: Initializing yfinance Sector/Industry Objects (Python)\nDESCRIPTION: This snippet demonstrates the basic initialization of `Sector` and `Industry` objects in the `yfinance` library. It uses the `literalinclude` directive to pull code from an example file, showing how to create instances using specific sector or industry keys (e.g., 'Technology'). This allows users to access data related to a particular market sector or industry.\nSOURCE: https://github.com/ranaroussi/yfinance/blob/main/doc/source/reference/yfinance.sector_industry.rst#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n.. literalinclude:: examples/sector_industry.py\n   :language: python\n```\n\n----------------------------------------\n\nTITLE: Accessing Search Module Functionality - yfinance - Python\nDESCRIPTION: Demonstrates how to use the yfinance Search module to programmatically query search data related to financial tickers. Dependencies include the yfinance library (ensure it is installed). The example shows how to instantiate and utilize Search to retrieve relevant financial data. Key input parameters usually include a query string; output is structured search results. Replace any placeholder queries and handle possible network or data errors as needed.\nSOURCE: https://github.com/ranaroussi/yfinance/blob/main/doc/source/reference/yfinance.search.rst#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n\"\"\"\nThe `Search` module, allows you to access search data in a Pythonic way.\n\n.. literalinclude:: examples/search.py\n   :language: python\n\"\"\"\n```\n\n----------------------------------------\n\nTITLE: Accessing Lookup Module Functionality - yfinance - Python\nDESCRIPTION: Shows how to use the yfinance Lookup module to look up ticker symbols and related information. This requires the yfinance library to be present in the Python environment. The snippet walks through module instantiation and execution of ticker lookup tasks, typically using parameters such as company names or ticker symbols. Input values can be customized and typical output will include ticker metadata. Ensure correct API usage and consider rate limits when integrating into applications.\nSOURCE: https://github.com/ranaroussi/yfinance/blob/main/doc/source/reference/yfinance.search.rst#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n\"\"\"\nThe `Lookup` module, allows you to look up tickers in a Pythonic way.\n\n.. literalinclude:: examples/lookup.py\n   :language: python\n\"\"\"\n```\n\n----------------------------------------\n\nTITLE: Installing yfinance via pip (Bash)\nDESCRIPTION: This command installs the `yfinance` Python library using the `pip` package manager. It should be run in a bash shell or terminal.\nSOURCE: https://github.com/ranaroussi/yfinance/blob/main/doc/source/index.rst#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ pip install yfinance\n```\n\n----------------------------------------\n\nTITLE: Handling Multiple Tickers with yfinance (Python)\nDESCRIPTION: This Python snippet demonstrates how to work with multiple stock tickers ('MSFT', 'AAPL', 'GOOG') simultaneously. It shows creating a `yf.Tickers` object to manage multiple symbols, accessing information for a specific ticker within the group (`tickers.tickers['MSFT'].info`), and downloading historical data for all specified tickers over a period of one month using `yf.download()`.\nSOURCE: https://github.com/ranaroussi/yfinance/blob/main/doc/source/index.rst#_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ntickers = yf.Tickers('MSFT AAPL GOOG')\ntickers.tickers['MSFT'].info\nyf.download(['MSFT', 'AAPL', 'GOOG'], period='1mo')\n```\n\n----------------------------------------\n\nTITLE: Configuring Proxy Settings using yfinance in Python\nDESCRIPTION: This Python snippet globally sets a proxy server for all network requests made by the yfinance library using the set_config method. Before using, ensure the yfinance library is installed in your Python environment. The key parameter is proxy, which should be replaced with the desired proxy server address string. All subsequent yfinance operations in the session will use this proxy; no per-request configuration is needed.\nSOURCE: https://github.com/ranaroussi/yfinance/blob/main/doc/source/advanced/config.rst#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport yfinance as yf\\nyf.set_config(proxy=\\\"PROXY_SERVER\\\")\n```\n\n----------------------------------------\n\nTITLE: Configuring requests_cache Session for yfinance (Python)\nDESCRIPTION: Demonstrates how to instantiate a requests_cache.CachedSession that caches HTTP requests on disk for yfinance, set a custom User-agent header, and pass the session to a Ticker instance. The snippet relies on the requests_cache and yfinance packages, with session caching to \\\"yfinance.cache\\\". The session must be passed to yf.Ticker for cache-enabled data retrieval. Outputs are stored responses, which speeds repeated queries and reduces Yahoo API calls.\nSOURCE: https://github.com/ranaroussi/yfinance/blob/main/doc/source/advanced/caching.rst#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport requests_cache\nsession = requests_cache.CachedSession('yfinance.cache')\nsession.headers['User-agent'] = 'my-program/1.0'\nticker = yf.Ticker('MSFT', session=session)\n\n# The scraped response will be stored in the cache\nticker.actions\n```\n\n----------------------------------------\n\nTITLE: Enabling Debug Logging in yfinance with Python\nDESCRIPTION: This snippet demonstrates how to import the yfinance library and activate debug-level logging using the enable_debug_mode() function. It requires the yfinance package to be installed (pip install yfinance). The function adjusts the logging configuration so that debug and higher-severity messages are shown with custom formatting, which aids in diagnosing issues with API requests or data retrieval. No arguments are needed; after calling yf.enable_debug_mode(), subsequent operations produce more detailed log output.\nSOURCE: https://github.com/ranaroussi/yfinance/blob/main/doc/source/advanced/logging.rst#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport yfinance as yf\\nyf.enable_debug_mode()\n```\n\n----------------------------------------\n\nTITLE: Combining requests_cache with Rate-Limiting for yfinance (Python)\nDESCRIPTION: Defines a custom CachedLimiterSession class combining caching (SQLiteCache), rate-limiting (Limiter), and queueing (MemoryQueueBucket) for HTTP requests to the yfinance API. Depends on requests, requests_cache, requests_ratelimiter, and pyrate_limiter. Limits requests to 2 every 5 seconds and stores responses in 'yfinance.cache'. This protects against Yahoo's rate-limiting and ensures cache persistence; instantiate and pass this session similarly in yfinance workflows.\nSOURCE: https://github.com/ranaroussi/yfinance/blob/main/doc/source/advanced/caching.rst#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom requests import Session\nfrom requests_cache import CacheMixin, SQLiteCache\nfrom requests_ratelimiter import LimiterMixin, MemoryQueueBucket\nfrom pyrate_limiter import Duration, RequestRate, Limiter\nclass CachedLimiterSession(CacheMixin, LimiterMixin, Session):\n   pass\n\nsession = CachedLimiterSession(\n   limiter=Limiter(RequestRate(2, Duration.SECOND*5)),  # max 2 requests per 5 seconds\n   bucket_class=MemoryQueueBucket,\n   backend=SQLiteCache(\"yfinance.cache\"),\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Persistent Cache Location in yfinance (Python)\nDESCRIPTION: Illustrates changing the default location where yfinance caches persistent data such as timezone information and cookies. Uses the yf.set_tz_cache_location function, which requires yfinance to be imported. The new location should be provided as a string path. This is useful for customization and managing cache storage based on user or deployment needs.\nSOURCE: https://github.com/ranaroussi/yfinance/blob/main/doc/source/advanced/caching.rst#_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport yfinance as yf\nyf.set_tz_cache_location(\"custom/cache/location\")\n```\n\n----------------------------------------\n\nTITLE: Installing nospam and related extras for yfinance (bash)\nDESCRIPTION: Installs yfinance along with the \\\"nospam\\\" optional dependencies to enable caching support, reducing spam and unnecessary load on Yahoo's services. This step ensures required libraries such as requests_cache are present. Run this command in your bash shell before proceeding with caching enhancements.\nSOURCE: https://github.com/ranaroussi/yfinance/blob/main/doc/source/advanced/caching.rst#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install yfinance[nospam]\n```\n\n----------------------------------------\n\nTITLE: Querying Equities and Funds with YFinance Python Module\nDESCRIPTION: This documentation segment introduces the main query interfaces EquityQuery, FundQuery, and the screen function for retrieving and filtering sector and industry market data using yfinance. To utilize these features, ensure that the yfinance module is installed and imported in your Python environment. The key parameters include field names and their supported operand/values, which are referenced through attributes like EquityQuery.valid_fields and FundQuery.valid_values. Expected inputs are query parameters for equities or funds, and outputs are filtered market datasets. The functionality is limited to the fields and values specified by the module's valid_fields and valid_values attributes.\nSOURCE: https://github.com/ranaroussi/yfinance/blob/main/doc/source/reference/yfinance.screener.rst#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n.. autosummary:: \\n   :toctree: api/\\n\\n   EquityQuery\\n   FundQuery\\n   screen\n```\n\n----------------------------------------\n\nTITLE: Generating API Summary for 'download' Function (rst)\nDESCRIPTION: This snippet uses the Sphinx `.. autosummary::` directive to automatically generate a summary entry for the `yfinance.download` function. The `:toctree: api/` option instructs Sphinx to create stub files in the 'api/' subdirectory, linking to the full documentation page for the `download` function.\nSOURCE: https://github.com/ranaroussi/yfinance/blob/main/doc/source/reference/yfinance.functions.rst#_snippet_1\n\nLANGUAGE: rst\nCODE:\n```\n.. autosummary:: \n   :toctree: api/\n\n   download\n```\n\n----------------------------------------\n\nTITLE: Generating API Summary for 'set_tz_cache_location' Function (rst)\nDESCRIPTION: This snippet uses the Sphinx `.. autosummary::` directive to automatically generate a summary entry for the `yfinance.set_tz_cache_location` function. The `:toctree: api/` option instructs Sphinx to create stub files in the 'api/' subdirectory, linking to the full documentation page for the `set_tz_cache_location` function.\nSOURCE: https://github.com/ranaroussi/yfinance/blob/main/doc/source/reference/yfinance.functions.rst#_snippet_3\n\nLANGUAGE: rst\nCODE:\n```\n.. autosummary:: \n   :toctree: api/\n\n   set_tz_cache_location\n```\n\n----------------------------------------\n\nTITLE: Generating API Summary for 'enable_debug_mode' Function (rst)\nDESCRIPTION: This snippet uses the Sphinx `.. autosummary::` directive to automatically generate a summary entry for the `yfinance.enable_debug_mode` function. The `:toctree: api/` option instructs Sphinx to create stub files in the 'api/' subdirectory, linking to the full documentation page for the `enable_debug_mode` function.\nSOURCE: https://github.com/ranaroussi/yfinance/blob/main/doc/source/reference/yfinance.functions.rst#_snippet_2\n\nLANGUAGE: rst\nCODE:\n```\n.. autosummary:: \n   :toctree: api/\n\n   enable_debug_mode\n```\n\n----------------------------------------\n\nTITLE: Setting Default Module in Sphinx (rst)\nDESCRIPTION: The `.. currentmodule::` directive sets the default Python module namespace for subsequent Sphinx directives within the document. In this case, it sets the current module to 'yfinance', ensuring that functions referenced later (like 'download') are assumed to belong to this module.\nSOURCE: https://github.com/ranaroussi/yfinance/blob/main/doc/source/reference/yfinance.functions.rst#_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. currentmodule:: yfinance\n```\n\n----------------------------------------\n\nTITLE: Cloning Forked yfinance Repository using Git\nDESCRIPTION: This command clones a user's forked version of the yfinance repository from GitHub to their local machine. Replace 'your-username' with the actual GitHub username. This is the initial step after forking the project.\nSOURCE: https://github.com/ranaroussi/yfinance/blob/main/doc/source/development/contributing.rst#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/your-username/yfinance.git\n```\n\n----------------------------------------\n\nTITLE: Creating New Git Branch for Development\nDESCRIPTION: This command creates and switches to a new local Git branch named 'feature-branch-name'. Contributors should use descriptive names for their branches related to the feature or bug fix they are working on.\nSOURCE: https://github.com/ranaroussi/yfinance/blob/main/doc/source/development/contributing.rst#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngit checkout -b feature-branch-name\n```\n\n----------------------------------------\n\nTITLE: Committing Changes with Summary and Message using Git\nDESCRIPTION: This command commits staged changes to the local Git repository. It includes a short summary using the '-m' flag and a more detailed commit message provided after another '-m' flag, following project conventions for clear commit history.\nSOURCE: https://github.com/ranaroussi/yfinance/blob/main/doc/source/development/contributing.rst#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ngit commit -m \"short summary\" -m \"full commit message\"\n```\n\n----------------------------------------\n\nTITLE: Squashing Commits and Force-Pushing using Git\nDESCRIPTION: These commands are used to combine multiple commits into fewer, more meaningful ones and update the remote branch. The first command starts an interactive rebase for the last 2 commits (adjust number as needed). The second command force-pushes the rewritten history to the specified remote branch, using '--force-with-lease' for safety.\nSOURCE: https://github.com/ranaroussi/yfinance/blob/main/doc/source/development/contributing.rst#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ngit rebase -i HEAD~2\n```\n\nLANGUAGE: shell\nCODE:\n```\ngit push --force-with-lease origin <branch-name>\n```\n\n----------------------------------------\n\nTITLE: Rebasing Feature Branch onto Dev Branch using Git\nDESCRIPTION: These commands move a feature branch from being based on 'main' to being based on 'dev'. First, checkout the feature branch. Then, rebase it onto 'dev', specifying 'main' as the old base. Finally, force-push the rebased branch to the remote repository using '--force-with-lease' for safety. Replace '<your-branch>' and '<branch-name>' with the actual branch name.\nSOURCE: https://github.com/ranaroussi/yfinance/blob/main/doc/source/development/contributing.rst#_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\ngit checkout <your-branch>\n```\n\nLANGUAGE: shell\nCODE:\n```\ngit rebase --onto dev main <branch-name>\n```\n\nLANGUAGE: shell\nCODE:\n```\ngit push --force-with-lease origin <branch-name>\n```\n\n----------------------------------------\n\nTITLE: Running All Price Unit Tests using Python unittest\nDESCRIPTION: This command executes all unit tests defined within the 'tests.test_prices' Python module using the built-in 'unittest' framework. This is useful for verifying the price-related functionality of yfinance.\nSOURCE: https://github.com/ranaroussi/yfinance/blob/main/doc/source/development/contributing.rst#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\npython -m unittest tests.test_prices\n```\n\n----------------------------------------\n\nTITLE: Running Subset of Price Unit Tests using Python unittest\nDESCRIPTION: This command runs a specific test class, 'TestPriceRepair', located within the 'tests.test_prices' module using Python's 'unittest' framework. This allows focused testing on a particular aspect of price data repair.\nSOURCE: https://github.com/ranaroussi/yfinance/blob/main/doc/source/development/contributing.rst#_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\npython -m unittest tests.test_prices.TestPriceRepair\n```\n\n----------------------------------------\n\nTITLE: Running Specific Unit Test using Python unittest\nDESCRIPTION: This command executes a single, specific test method, 'test_ticker_missing', within the 'TestPriceRepair' class of the 'tests.test_prices' module using Python's 'unittest' framework. This is useful for debugging a particular test case.\nSOURCE: https://github.com/ranaroussi/yfinance/blob/main/doc/source/development/contributing.rst#_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\npython -m unittest tests.test_prices.TestPriceRepair.test_ticker_missing\n```\n\n----------------------------------------\n\nTITLE: Running All Unit Tests in Directory using Python unittest\nDESCRIPTION: This command discovers and runs all unit tests found within the 'tests' directory and its subdirectories using Python's 'unittest' discovery feature. This provides comprehensive testing coverage for the project.\nSOURCE: https://github.com/ranaroussi/yfinance/blob/main/doc/source/development/contributing.rst#_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\npython -m unittest discover -s tests\n```\n\n----------------------------------------\n\nTITLE: Rendering Python Class Documentation Sections with Sphinx Autodoc Template - Jinja2\nDESCRIPTION: This Jinja2 template snippet defines how to render a Sphinx documentation page for a Python class. It includes blocks for displaying class attributes and methods dynamically, using Sphinx's autodoc directives such as .. autoattribute:: and .. automethod::. The template expects variables like objname, module, attributes, and methods to be supplied in the rendering context, and it generates properly indented reStructuredText for use with Sphinx.\nSOURCE: https://github.com/ranaroussi/yfinance/blob/main/doc/source/_templates/autosummary/class.rst#_snippet_0\n\nLANGUAGE: Jinja2\nCODE:\n```\n:orphan:\n\n{{ objname | escape | underline }}\n\n.. currentmodule:: {{ module }}\n\n.. autoclass:: {{ objname }}\n\n   {% block attributes %}\n   {% if attributes %}\n   .. rubric:: Attributes\n   \n   {% for item in attributes %}\n   .. autoattribute:: {{ item }}\n      :noindex:\n   {%- endfor %}\n   {% endif %}\n   {% endblock attributes %}\n\n   {% block methods %}\n   {% if methods %}\n   .. rubric:: Methods\n\n   {% for item in methods %}\n   .. automethod:: {{ item }}\n      :noindex:\n   {%- endfor %}\n   {% endif %}\n   {% endblock methods %}\n```\n\n----------------------------------------\n\nTITLE: Building HTML Documentation Locally with Make (Console)\nDESCRIPTION: This console command, intended to be run within the 'doc/' directory, uses the 'make' utility to manage the Sphinx documentation build process. 'make clean' removes previous build artifacts, and 'make html' instructs Sphinx to generate the documentation in HTML format. The generated files are typically output to 'doc/build/html/'.\nSOURCE: https://github.com/ranaroussi/yfinance/blob/main/doc/source/development/documentation.rst#_snippet_1\n\nLANGUAGE: console\nCODE:\n```\nmake clean && make html\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for Documentation Build (Console)\nDESCRIPTION: This console command uses pip, the Python package installer, to install dependencies listed in the 'requirements.txt' file. This is a prerequisite step for building the documentation locally, ensuring that Sphinx and other necessary tools are installed in the environment.\nSOURCE: https://github.com/ranaroussi/yfinance/blob/main/doc/source/development/documentation.rst#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\npip install -r requirements.txt\n```\n\n----------------------------------------\n\nTITLE: Defining Package Dependencies in requirements.txt - Python\nDESCRIPTION: This snippet lists Python package dependencies with their minimum version requirements, intended for use in a requirements.txt file. When installing dependencies via pip, these constraints ensure that compatible or newer versions of the listed libraries (such as pandas, numpy, requests, etc.) are installed. Each line specifies a package and the minimum version needed, ensuring the environment meets all prerequisites for the yfinance project to run; there are no inputs or outputs, but package installation may fail if the environment is incompatible or lacks permissions.\nSOURCE: https://github.com/ranaroussi/yfinance/blob/main/requirements.txt#_snippet_0\n\nLANGUAGE: requirements\nCODE:\n```\npandas>=1.3.0\\nnumpy>=1.16.5\\nrequests>=2.31\\nmultitasking>=0.0.7\\nplatformdirs>=2.0.0\\npytz>=2022.5\\nfrozendict>=2.3.4\\nbeautifulsoup4>=4.11.1\\npeewee>=3.16.2\\nrequests_cache>=1.0\\nrequests_ratelimiter>=0.3.1\\nscipy>=1.6.3\n```\n\n----------------------------------------\n\nTITLE: Installing yfinance via pip in Bash\nDESCRIPTION: Shows how to install the yfinance Python package using the pip tool in a shell environment. This command assumes that Python and pip are already installed on the system. Running this will download and install the latest version of yfinance and its Python dependencies, enabling you to import and use it in Python scripts or interactive sessions. No additional parameters are required and the output is a properly set up package ready for data access.\nSOURCE: https://github.com/ranaroussi/yfinance/blob/main/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n```bash\\n$ pip install yfinance\\n```\n```"
  }
]