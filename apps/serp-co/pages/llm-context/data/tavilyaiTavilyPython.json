[
  {
    "owner": "tavily-ai",
    "repo": "tavily-python",
    "content": "TITLE: Getting and Printing Full Search API Response\nDESCRIPTION: Demonstrates how to instantiate the TavilyClient, execute a simple search query, and print the full response. This is equivalent to directly querying the Tavily REST API.\nSOURCE: https://github.com/tavily-ai/tavily-python/blob/master/README.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom tavily import TavilyClient\n\n# Step 1. Instantiating your TavilyClient\ntavily_client = TavilyClient(api_key=\"tvly-YOUR_API_KEY\")\n\n# Step 2. Executing a simple search query\nresponse = tavily_client.search(\"Who is Leo Messi?\")\n\n# Step 3. That's it! You've done a Tavily Search!\nprint(response)\n```\n\n----------------------------------------\n\nTITLE: Generating Context for RAG Applications\nDESCRIPTION: Shows how to use the Tavily client to generate search context for Retrieval Augmented Generation (RAG) applications. This method returns a context string that can be directly fed into RAG applications.\nSOURCE: https://github.com/tavily-ai/tavily-python/blob/master/README.md#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom tavily import TavilyClient\n\n# Step 1. Instantiating your TavilyClient\ntavily_client = TavilyClient(api_key=\"tvly-YOUR_API_KEY\")\n\n# Step 2. Executing a context search query\ncontext = tavily_client.get_search_context(query=\"What happened during the Burning Man floods?\")\n\n# Step 3. That's it! You now have a context string that you can feed directly into your RAG Application\nprint(context)\n```\n\n----------------------------------------\n\nTITLE: Getting Quick Answers to Questions\nDESCRIPTION: Demonstrates how to get a concise answer to a question using Tavily's qna_search method. This approach is ideal for integrations with LLMs as it returns a focused answer rather than full search results.\nSOURCE: https://github.com/tavily-ai/tavily-python/blob/master/README.md#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom tavily import TavilyClient\n\n# Step 1. Instantiating your TavilyClient\ntavily_client = TavilyClient(api_key=\"tvly-YOUR_API_KEY\")\n\n# Step 2. Executing a Q&A search query\nanswer = tavily_client.qna_search(query=\"Who is Leo Messi?\")\n\n# Step 3. That's it! Your question has been answered!\nprint(answer)\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Tavily Extract API Usage in Python\nDESCRIPTION: This snippet shows how to use the Tavily Extract API to extract raw content from multiple URLs. It covers instantiating the client, defining URLs, executing the extract request, and processing the response.\nSOURCE: https://github.com/tavily-ai/tavily-python/blob/master/README.md#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom tavily import TavilyClient\n\n# Step 1. Instantiating your TavilyClient\ntavily_client = TavilyClient(api_key=\"tvly-YOUR_API_KEY\")\n\n# Step 2. Defining the list of URLs to extract content from\nurls = [\n    \"https://en.wikipedia.org/wiki/Artificial_intelligence\",\n    \"https://en.wikipedia.org/wiki/Machine_learning\",\n    \"https://en.wikipedia.org/wiki/Data_science\",\n    \"https://en.wikipedia.org/wiki/Quantum_computing\",\n    \"https://en.wikipedia.org/wiki/Climate_change\"\n] # You can provide up to 20 URLs simultaneously\n\n# Step 3. Executing the extract request\nresponse = tavily_client.extract(urls=urls, include_images=True)\n\n# Step 4. Printing the extracted raw content\nfor result in response[\"results\"]:\n    print(f\"URL: {result['url']}\")\n    print(f\"Raw Content: {result['raw_content']}\")\n    print(f\"Images: {result['images']}\\n\")\n\n# Note that URLs that could not be extracted will be stored in response[\"failed_results\"]\n```\n\n----------------------------------------\n\nTITLE: Handling Invalid API Key Error in Tavily SDK\nDESCRIPTION: Example demonstrating error handling for InvalidAPIKeyError when using an incorrect API key\nSOURCE: https://github.com/tavily-ai/tavily-python/blob/master/README.md#2025-04-23_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nfrom tavily import TavilyClient, InvalidAPIKeyError\n\ntavily_client = TavilyClient(api_key=\"invalid-api-key\")\n\ntry:\n    response = tavily_client.search(\"Who is Leo Messi?\")\nexcept InvalidAPIKeyError:\n    print(\"Invalid API key provided. Please check your API key.\")\n```\n\n----------------------------------------\n\nTITLE: Handling Usage Limit Exceeded Error in Tavily SDK\nDESCRIPTION: Example showing how to handle UsageLimitExceededError when API usage limits are exceeded\nSOURCE: https://github.com/tavily-ai/tavily-python/blob/master/README.md#2025-04-23_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nfrom tavily import TavilyClient, UsageLimitExceededError\n\ntavily_client = TavilyClient(api_key=\"valid-api-key\")\n\ntry:\n    response = tavily_client.search(\"Who is Leo Messi?\")\nexcept UsageLimitExceededError:\n    print(\"Usage limit exceeded. Please check your plan's usage limits or consider upgrading.\")\n```\n\n----------------------------------------\n\nTITLE: Handling Missing API Key Error in Tavily SDK\nDESCRIPTION: Example showing how to handle MissingAPIKeyError when initializing TavilyClient without an API key\nSOURCE: https://github.com/tavily-ai/tavily-python/blob/master/README.md#2025-04-23_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom tavily import TavilyClient, MissingAPIKeyError\n\ntry:\n    tavily_client = TavilyClient(api_key=\"\")\nexcept MissingAPIKeyError:\n    print(\"API key is missing. Please provide a valid API key.\")\n```\n\n----------------------------------------\n\nTITLE: Handling Invalid URLs Error in Tavily Extract API\nDESCRIPTION: Example showing how to handle BadRequestError when providing invalid URLs to the extract endpoint\nSOURCE: https://github.com/tavily-ai/tavily-python/blob/master/README.md#2025-04-23_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nfrom tavily import TavilyClient, BadRequestError\n\ntavily_client = TavilyClient(api_key=\"valid-api-key\")\n\ntry:\n  response = tavily_client.extract(urls=[\"https://invalid-url1\", \"https://invalid-url2\"])\nexcept BadRequestError as e:\n  print(e)\n```\n\n----------------------------------------\n\nTITLE: Handling URL Limit Exceeded Error in Tavily Extract API\nDESCRIPTION: Example demonstrating how to handle BadRequestError when exceeding the maximum URL limit in extract endpoint\nSOURCE: https://github.com/tavily-ai/tavily-python/blob/master/README.md#2025-04-23_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nfrom tavily import TavilyClient, BadRequestError\n\ntavily_client = TavilyClient(api_key=\"valid-api-key\")\n\nurls = [\n    \"https://en.wikipedia.org/wiki/Artificial_intelligence\",\n    \"https://en.wikipedia.org/wiki/Machine_learning\",\n    \"https://en.wikipedia.org/wiki/Data_science\",\n    \"https://en.wikipedia.org/wiki/Quantum_computing\",\n    \"https://en.wikipedia.org/wiki/Climate_change\",\n    \"https://en.wikipedia.org/wiki/History_of_feminism\",\n    \"https://en.wikipedia.org/wiki/Blockchain\",\n    \"https://en.wikipedia.org/wiki/Biotechnology\",\n    \"https://en.wikipedia.org/wiki/Cybersecurity\",\n    \"https://en.wikipedia.org/wiki/Astronomy\",\n    \"https://tavily.com/privacy\",\n    \"https://tavily.com/#pricing\",\n    \"https://tavily.com/#faqs\",\n    \"https://www.britannica.com/technology/artificial-intelligence\",\n    \"https://www.britannica.com/story/incredible-facts-about-bees\",\n    \"https://www.britannica.com/topic/feminism\",\n    \"https://www.britannica.com/science/biotechnology\",\n    \"https://www.britannica.com/science/climate-change\",\n    \"https://www.britannica.com/technology/blockchain\",\n    \"https://www.britannica.com/money/market-timing-risks\",\n    \"https://blog.tavily.com/\"\n]\ntry:\n    response = tavily_client.extract(urls=urls)\nexcept BadRequestError as e:\n    print(e)\n```\n\n----------------------------------------\n\nTITLE: Example Response Format for URL Content Extraction in Tavily Python API\nDESCRIPTION: Shows the structure of the response dictionary returned when extracting content from URLs using the Tavily API. The response includes successful results with extracted content and images, failed results with error messages, and response time.\nSOURCE: https://github.com/tavily-ai/tavily-python/blob/master/README.md#2025-04-23_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n{\n    \"results\": [\n        {\n            \"url\": \"https://en.wikipedia.org/wiki/Artificial_intelligence\",\n            \"raw_content\": \"Contents\\nArtificial intelligence\\nArtificial intelligence (AI) is the intelligence of machines or software, as opposed to the intelligence of humans or animals. It is a field of study in computer science that develops and studies intelligent machines. \\\"AI\\\" may also refer to the machines themselves.\\nAI technology is widely used throughout industry, government and science. Some high-profile applications are: advanced web search engines (e.g., Google Search), recommendation systems (used by YouTube, Amazon, and Netflix), understanding human speech (such as Siri and Alexa), self-driving cars (e.g., Waymo), generative or creative tools (ChatGPT and AI art), and competing at the highest level in strategy games (such as chess and Go).[1]\\nArtificial intelligence was founded as an academic discipline in 1956.[2] The field went through multiple cycles of optimism[3][4] followed by disappointment and loss of funding,[5][6] but after 2012, when deep learning surpassed all previous AI techniques,[7] there was a vast increase in funding and interest.\\nThe various sub-fields of AI research are centered around particular goals and the use of particular tools. The traditional goals of AI research include reasoning, knowledge representation, planning, learning, natural language processing, perception, and support for robotics.[a] General intelligence (the ability to solve an arbitrary problem) is among the field's long-term goals.[8]\\nTo solve these problems, AI researchers have adapted and integrated a wide range of problem-solving techniques, including search and mathematical optimization, formal logic, artificial neural networks, and methods based on statistics, operations research, and economics.[b] AI also draws upon psychology, linguistics, philosophy, neuroscience and many other fields.[9]\\nGoals\\nThe general problem of simulating (or creating) intelligence has been broken down into sub-problems. These consist of particular traits or capabilities that researchers expect an intelligent system to display. The traits described below have received the most attention and cover the scope of AI research.[a]\\nReasoning, problem-solving\\nEarly researchers developed algorithms that imitated step-by-step reasoning that humans use when they solve puzzles or make logical deductions.[10] By the late 1980s and 1990s, methods were developed for dealing with uncertain or incomplete information, employing concepts from probability and economics.[11]\\nMany of these algorithms are insufficient for solving large reasoning problems because they experience a \\\"combinatorial explosion\\\": they became exponentially slower as the problems grew larger.[12]\\nEven humans rarely use the step-by-step deduction that early AI research could model. They solve most of their problems using fast, intuitive judgments.[13]\\nAccurate and efficient reasoning is an unsolved problem.\\nKnowledge representation\\nKnowledge representation and knowledge engineering[14] allow AI programs to answer questions intelligently and make deductions about real-world facts. Formal knowledge representations are used in content-based indexing and retrieval,[15] scene interpretation,[16] clinical decision support,[17] knowledge discovery (mining \\\"interesting\\\" and actionable inferences from large databases),[18] and other areas.[19]\\nA knowledge base is a body of knowledge represented in a form that can be used by a program. An ontology is the set of objects, relations, concepts, and properties used by a particular domain of knowledge.[20] Knowledge bases need to represent things such as:\\nobjects, properties, categories and relations between objects;\\n[21]\\nsituations, events, states and time;[22]\\ncauses and effects;[23]\\nknowledge about knowledge (what we know about what other people know);[24]\\ndefault reasoning (things that humans assume are true until they are told differently and will remain true even when other facts are changing);[25] and many other aspects and domains of knowledge.\\nAmong the most difficult problems in KR are: the breadth of commonsense knowledge (the set of atomic facts that the average person knows is enormous);[26] and the sub-symbolic form of most commonsense knowledge (much of what people know is not represented as \\\"facts\\\" or \\\"statements\\\" that they could express verbally).[13]\\nKnowledge acquisition is the difficult problem of obtaining knowledge for AI applications.[c] Modern AI gathers knowledge by \\\"scraping\\\" the internet (including Wikipedia). The knowledge itself was collected by the volunteers and professionals who published the information (who may or may not have agreed to provide their work to AI companies).[29] This \\\"crowd sourced\\\" technique does not guarantee that the knowledge is correct or reliable. The knowledge of Large Language Models (such as ChatGPT) is highly unreliable -- it generates misinformation and falsehoods (known as \\\"hallucinations\\\"). Providing accurate knowledge for these modern AI applications is an unsolved problem.\\nPlanning and decision making\\nAn \\\"agent\\\" is anything that perceives and takes actions in the world. A rational agent has goals or preferences and takes actions to make them happen.[d][30]\\nIn automated planning, the agent has a specific goal.[31] In automated decision making, the agent has preferences – there are some situations it would prefer to be in, and some situations it is trying to avoid. The decision making agent assigns a number to each situation (called the \\\"utility\\\") that measures how much the agent prefers it. For each possible action, it can calculate the \\\"expected utility\\\": the utility of all possible outcomes of the action, weighted by the probability that the outcome will occur. It can then choose the action with the maximum expected utility.[32]\\nIn classical planning, the agent knows exactly what the effect of any action will be.[33]\\nIn most real-world problems, however, the agent may not be certain about the situation they are in (it is \\\"unknown\\\" or \\\"unobservable\\\") and it may not know for certain what will happen after each possible action (it is not \\\"deterministic\\\"). It must choose an action by making a probabilistic guess and then reassess the situation to see if the action worked.[34]\\nIn some problems, the agent's preferences may be uncertain, especially if there are other agents or humans involved. These can be learned (e.g., with inverse reinforcement learning) or the agent can seek information to improve its preferences.[35]\\nInformation value theory can be used to weigh the value of exploratory or experimental actions.[36]\\nThe space of possible future actions and situations is typically intractably large, so the agents must take actions and evaluate situations while being uncertain what the outcome will be.\\nA Markov decision process has a transition model that describes the probability that a particular action will change the state in a particular way, and a reward function that supplies the utility of each state and the cost of each action. A policy associates a decision with each possible state. The policy could be calculated (e.g. by iteration), be heuristic, or it can be learned.[37]\\nGame theory describes rational behavior of multiple interacting agents, and is used in AI programs that make decisions that involve other agents.[38]\\nLearning\\nMachine learning is the study of programs that can improve their performance on a given task automatically.[39]\\nIt has been a part of AI from the beginning.[e]\\nThere are several kinds of machine learning. Unsupervised learning analyzes a stream of data and finds patterns and makes predictions without any other guidance.[42]\\nSupervised learning requires a human to label the input data first, and comes in two main varieties: classification (where the program must learn to predict what category the input belongs in) and regression (where the program must deduce a numeric function based on numeric input).[43]\\nIn reinforcement learning the agent is rewarded for good responses and punished for bad ones. The agent learns to choose responses that are classified as \\\"good\\\".[44]\\nTransfer learning is when the knowledge gained from one problem is applied to a new problem.[45] Deep learning is a type of machine learning that runs inputs through biologically inspired artificial neural networks for all of these types of learning.[46]\\nComputational learning theory can assess learners by computational complexity, by sample complexity (how much data is required), or by other notions of optimization.[47]\\nNatural language processing\\nNatural language processing (NLP)[48] allows programs to read, write and communicate in human languages such as English.\\nSpecific problems include speech recognition, speech synthesis, machine translation, information extraction, information retrieval and question answering.[49]\\nEarly work, based on Noam Chomsky's generative grammar and semantic networks, had difficulty with word-sense disambiguation[f]\",\n            \"images\": []\n        }\n    ],\n    \"failed_results\": [\n        {\n            \"url\": \"https://example.com/non-existent-page\",\n            \"error\": \"Could not fetch content: 404 Not Found\"\n        }\n    ],\n    \"response_time\": 1.25\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Tavily Python Package\nDESCRIPTION: Instructions for installing the Tavily Python package using pip.\nSOURCE: https://github.com/tavily-ai/tavily-python/blob/master/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install tavily-python\n```"
  }
]