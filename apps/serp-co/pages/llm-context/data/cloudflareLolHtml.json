[
  {
    "owner": "cloudflare",
    "repo": "lol-html",
    "content": "TITLE: Rewriting HTML with LOL HTML JavaScript API\nDESCRIPTION: This JavaScript snippet demonstrates how to use the LOL HTMLRewriter class to modify the href attribute of anchor tags, replacing 'http:' with 'https:'.  It uses the element handler to access and modify the attribute and onEndTag to log tag end events. It requires the lol-html package.\nSOURCE: https://github.com/cloudflare/lol-html/blob/master/js-api/README.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n'use strict';\n\nconst { HTMLRewriter } = require('lol-html'); // path/to/lol-html.js\n\nconst chunks = [];\nconst rewriter = new HTMLRewriter('utf8', (chunk) => {\n  chunks.push(chunk);\n});\n\nrewriter.on('a[href]', {\n  element(el) {\n    const href = el\n      .getAttribute('href')\n      .replace('http:', 'https:');\n    el.setAttribute('href', href);\n\n    el.onEndTag((tag)=> {\n      console.log(`Tag ended: ${tag.name}`);\n    });\n  },\n});\n\n[\n  '<div><a href=',\n  'http://example.com>',\n  '</a></div>',\n].forEach((part) => {\n  rewriter.write(Buffer.from(part));\n});\n\nrewriter.end();\n\nconst output = Buffer.concat(chunks).toString('utf8');\nconsole.log(output);\n\n```\n\n----------------------------------------\n\nTITLE: Defer Scripts Usage Example (Shell)\nDESCRIPTION: This shell command downloads an HTML file using `curl`, then pipes it to the `cargo run` command, executing the `defer_scripts` example.  The `defer_scripts` tool reads the HTML from stdin, defers render-blocking scripts, and outputs the modified HTML to stdout.\nSOURCE: https://github.com/cloudflare/lol-html/blob/master/examples/defer_scripts/README.md#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ncurl -NL https://git.io/JeOSZ | cargo run --example=defer_scripts\n```\n\n----------------------------------------\n\nTITLE: Running mixed_content_rewriter example\nDESCRIPTION: This command downloads HTML content using curl, and then executes the `mixed_content_rewriter` example using cargo run.\nSOURCE: https://github.com/cloudflare/lol-html/blob/master/examples/mixed_content_rewriter/README.md#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ncurl -NL https://git.io/JeOSZ | cargo run --example=mixed_content_rewriter\n```\n\n----------------------------------------\n\nTITLE: Building LOL HTML with Rust and wasm-pack\nDESCRIPTION: This bash script details the steps needed to build the LOL HTML project. It requires rustup and wasm-pack to be installed. It first updates rustup, then installs wasm-pack and finally uses wasm-pack to build the project for Node.js in release mode.\nSOURCE: https://github.com/cloudflare/lol-html/blob/master/js-api/README.md#_snippet_1\n\nLANGUAGE: Bash\nCODE:\n```\nrustup update # https://rustup.rs\ncargo install wasm-pack\n\nwasm-pack build --target nodejs --release\n```\n\n----------------------------------------\n\nTITLE: Run All Tests and Linting\nDESCRIPTION: This script runs all available tests, including unit tests, integration tests, C API tests, and linting checks.  It ensures comprehensive testing of the entire project. Requires execution from the project root directory.\nSOURCE: https://github.com/cloudflare/lol-html/blob/master/DEVELOPING.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\n./scripts/test.sh\n```\n\n----------------------------------------\n\nTITLE: Run Unit Tests with Cargo\nDESCRIPTION: This command executes the unit tests defined within the `/src` directory of the project. It utilizes the `cargo test` command, a standard Rust tool for running tests.\nSOURCE: https://github.com/cloudflare/lol-html/blob/master/DEVELOPING.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\ncargo test\n```\n\n----------------------------------------\n\nTITLE: Run Benchmarks with Cargo\nDESCRIPTION: This command executes the benchmark suite for the project using `cargo bench`. Benchmarks measure the performance of specific parts of the code.\nSOURCE: https://github.com/cloudflare/lol-html/blob/master/DEVELOPING.md#_snippet_3\n\nLANGUAGE: Shell\nCODE:\n```\ncargo bench\n```\n\n----------------------------------------\n\nTITLE: Run Tests by Substring\nDESCRIPTION: This script allows running only those tests whose names contain a specified substring.  The substring is passed as an argument to the script. Useful for focusing on specific test cases.\nSOURCE: https://github.com/cloudflare/lol-html/blob/master/DEVELOPING.md#_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\n./scripts/test.sh {substring}\n```\n\n----------------------------------------\n\nTITLE: Run HTML Parser Tracer\nDESCRIPTION: This script executes the HTML parser tracer tool, which provides detailed tracing information about the parsing process for a given HTML input. Use `-h` for help.\nSOURCE: https://github.com/cloudflare/lol-html/blob/master/DEVELOPING.md#_snippet_5\n\nLANGUAGE: Shell\nCODE:\n```\n./scripts/parser_trace.sh -- -h\n```\n\n----------------------------------------\n\nTITLE: Run Benchmarks by Substring\nDESCRIPTION: This command allows running only those benchmarks whose names contain the specified substring.  The substring is passed as an argument to the `cargo bench` command.\nSOURCE: https://github.com/cloudflare/lol-html/blob/master/DEVELOPING.md#_snippet_4\n\nLANGUAGE: Shell\nCODE:\n```\ncargo bench {substring}\n```\n\n----------------------------------------\n\nTITLE: Fuzz with Libfuzzer\nDESCRIPTION: This script runs fuzzing for the crate using Libfuzzer. Fuzzing is an automated testing technique that involves feeding random or malformed data to a program to uncover bugs and vulnerabilities. Requires Rust nightly.\nSOURCE: https://github.com/cloudflare/lol-html/blob/master/DEVELOPING.md#_snippet_7\n\nLANGUAGE: Shell\nCODE:\n```\n./scripts/fuzz_with_libfuzzer.sh\n```\n\n----------------------------------------\n\nTITLE: Fuzz C API with Libfuzzer\nDESCRIPTION: This script runs fuzzing for the C API using Libfuzzer. It helps identify vulnerabilities in the C API of the project. Requires Rust nightly.\nSOURCE: https://github.com/cloudflare/lol-html/blob/master/DEVELOPING.md#_snippet_8\n\nLANGUAGE: Shell\nCODE:\n```\n./scripts/fuzz_c_api_with_libfuzzer.sh\n```\n\n----------------------------------------\n\nTITLE: Fuzz with AFL\nDESCRIPTION: This script runs fuzzing using American Fuzzy Lop (AFL), a popular coverage-guided fuzzer. AFL is used to discover bugs and vulnerabilities by intelligently mutating input data.\nSOURCE: https://github.com/cloudflare/lol-html/blob/master/DEVELOPING.md#_snippet_9\n\nLANGUAGE: Shell\nCODE:\n```\n./scripts/fuzz_with_afl.sh\n```\n\n----------------------------------------\n\nTITLE: Fuzz with Honggfuzz\nDESCRIPTION: This script runs fuzzing using Honggfuzz, another popular feedback-driven fuzzer. Honggfuzz is used to discover bugs and vulnerabilities by generating and mutating input data.\nSOURCE: https://github.com/cloudflare/lol-html/blob/master/DEVELOPING.md#_snippet_10\n\nLANGUAGE: Shell\nCODE:\n```\n./scripts/fuzz_with_hongg.sh\n```\n\n----------------------------------------\n\nTITLE: Print CSS Selector AST\nDESCRIPTION: This script prints the Abstract Syntax Tree (AST) of the CSS selector VM's program for the given list of CSS selectors.  The CSS selectors must be provided in JSON format. Useful for debugging CSS selector logic.\nSOURCE: https://github.com/cloudflare/lol-html/blob/master/DEVELOPING.md#_snippet_6\n\nLANGUAGE: Shell\nCODE:\n```\n./scripts/selectors_ast.sh '[\"selector1\", \"selector2\", ...\"]'\n```"
  }
]