[
  {
    "owner": "abhinandan-kushwaha",
    "repo": "react-native-gifted-charts",
    "content": "TITLE: Basic Chart Component Usage in React Native\nDESCRIPTION: Demonstrates the simplest implementation of various chart types including Bar, Line, Pie, Population Pyramid, and Radar charts. Shows how to initialize each chart with minimal data and how to create horizontal bar charts, area charts, and donut charts using additional props.\nSOURCE: https://github.com/abhinandan-kushwaha/react-native-gifted-charts/blob/master/README.md#2025-04-23_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { BarChart, LineChart, PieChart, PopulationPyramid, RadarChart } from \"react-native-gifted-charts\";\n\n// ...\nconst data=[ {value:50}, {value:80}, {value:90}, {value:70} ]\n\n<BarChart data = {data} />\n<LineChart data = {data} />\n<PieChart data = {data} />\n<PopulationPyramid data = {[{left:10,right:12}, {left:9,right:8}]} />\n<RadarChart data = {[50, 80, 90, 70]} />\n\n// For Horizontal Bar chart, just add the prop horizontal to the <BarChart/> component\n\n<BarChart data = {data} horizontal />\n\n// For Area chart, just add the prop areaChart to the <LineChart/> component\n\n<LineChart data = {data} areaChart />\n\n// For Donut chart, just add the prop donut to the <PieChart/> component\n\n<PieChart data = {data} donut />\n```\n\n----------------------------------------\n\nTITLE: Basic Props Documentation Table in Markdown\nDESCRIPTION: Markdown table documenting basic props for React Native Gifted Charts line chart component. Includes prop names, types, descriptions and default values.\nSOURCE: https://github.com/abhinandan-kushwaha/react-native-gifted-charts/blob/master/docs/LineChart/LineChartProps.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Prop                               | Type                      | Description                                                                                                                                          | Default value                 |\n| ---------------------------------- | ------------------------- | ---------------------------------------------------------------------------------------------------------------------------------------------------- | ----------------------------- |\n| data                               | Array <lineDataItem>      | An item object represents a point in the line chart. It is described in the next table.                                                              | \\_                            |\n| data2                              | Array <lineDataItem>      | Second set of dataPoint for the second line                                                                                                          | \\_                            |\n| data3                              | Array <lineDataItem>      | Third set of dataPoint for the third line                                                                                                            | \\_                            |\n| data4                              | Array <lineDataItem>      | Fourth set of dataPoint for the fourth line                                                                                                          | \\_                            |\n| data5                              | Array <lineDataItem>      | Fifth set of dataPoint for the third line                                                                                                            | \\_                            |\n| dataSet                            | Array<DataSet>            | Array of data sets (used instead of using `data2`, `data3`, `data4` etc)                                                                             | \\_                            |\n| width                              | number                    | Width of the Bar chart                                                                                                                               | width of the parent           |\n| height                             | number                    | Height of the Bar chart (excluding the bottom label)                                                                                                 | 200                           |\n```\n\n----------------------------------------\n\nTITLE: Defining stackData Structure for Stacked Bar Charts in TypeScript\nDESCRIPTION: This snippet demonstrates the required data structure for creating stacked bar charts with react-native-gifted-charts. It shows how to format the stackData array with multiple stacks, each containing multiple sections with properties like value, color, and event handlers.\nSOURCE: https://github.com/abhinandan-kushwaha/react-native-gifted-charts/blob/master/docs/BarChart/BarChartProps.md#2025-04-23_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\n[\n    {\n      stacks:\n        [\n            {\n                value: 10, color: 'red', onPres: someFunction\n            },\n            {\n                value: 20, color: 'blue', marginBottom: 1, onPres: someFunction\n            },\n            ...\n        ],\n      label: 'Jan',\n      ...otherProps,\n    },\n    {\n      stacks:\n        [\n            {\n                value: 8, color: 'red', onPres: someFunction\n            },\n            {\n                value: 17, color: 'blue', marginBottom: 1, onPres: someFunction\n            },\n            ...\n        ],\n      label: 'Feb',\n      ...otherProps,\n    },\n    ...\n]\n```\n\n----------------------------------------\n\nTITLE: Using Animated Bar Chart with Key Prop in TypeScript\nDESCRIPTION: Example showing how to properly render an animated bar chart with a key prop to ensure y-axis labels appear correctly.\nSOURCE: https://github.com/abhinandan-kushwaha/react-native-gifted-charts/blob/master/docs/BarChart/BarChartProps.md#2025-04-23_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\n<BarChart key={'xyz'} data={data} isAnimated />\n```\n\n----------------------------------------\n\nTITLE: Implementing onFocus Event Handler in React Native Gifted Charts\nDESCRIPTION: Example showing how to implement the onFocus callback function for handling focus events on chart data points. The function receives the focused item and its index as parameters and displays an alert with the item's value.\nSOURCE: https://github.com/abhinandan-kushwaha/react-native-gifted-charts/blob/master/docs/LineChart/LineChartProps.md#2025-04-23_snippet_20\n\nLANGUAGE: typescript\nCODE:\n```\nonFocus={(item, index) => {\n    Alert.alert(item.value)\n}}\n```\n\n----------------------------------------\n\nTITLE: X-Axis Configuration Interface\nDESCRIPTION: Interface defining the configuration options for X-axis including thickness, color, labels and styling\nSOURCE: https://github.com/abhinandan-kushwaha/react-native-gifted-charts/blob/master/docs/BarChart/BarChartProps.md#2025-04-23_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\ntype XAxisConfig {\n  thickness?: number\n  color?: ColorValue\n  labelsDistanceFromXaxis?: number\n  labelsHeight?: number\n  labelsTextStyle?: any\n  labelTexts?: string[]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Line Gradient in React Native Gifted Charts\nDESCRIPTION: This snippet demonstrates how to set up a custom gradient for a line chart using the lineGradientComponent prop. It creates a linear gradient with blue and yellow colors.\nSOURCE: https://github.com/abhinandan-kushwaha/react-native-gifted-charts/blob/master/docs/LineChart/LineChartProps.md#2025-04-23_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\nlineGradientId='ggrd' // lineGradientId is required while using lineGradientComponent\nlineGradientComponent={()=>{\n  return(\n    <LinearGradient\n      id=\"ggrd\" // same as lineGradientId\n      x1=\"0\"\n      y1=\"0\"\n      x2={'0'}\n      y2={'1'}>\n      <Stop\n        offset=\"0\"\n        stopColor={'blue'}\n      />\n      <Stop\n        offset=\"1\"\n        stopColor={'yellow'}\n      />\n    </LinearGradient>\n  );\n}}\n```\n\n----------------------------------------\n\nTITLE: DataSet Type Definition for Dynamic Multi-line Charts in React Native Gifted Charts\nDESCRIPTION: Defines the DataSet type for creating dynamic multi-line charts. It supports customization of individual line datasets including styling properties, animation controls, and line appearance options.\nSOURCE: https://github.com/abhinandan-kushwaha/react-native-gifted-charts/blob/master/docs/LineChart/LineChartProps.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ntype DataSet = {\n  data: Array<lineDataItem>;\n  zIndex?: number;\n  thickness?: number;\n  strokeDashArray?: Array<number>;\n  areaChart?: boolean;\n  stepChart?: boolean;\n  startIndex?: number;\n  endIndex?: number;\n  color?: string;\n  hideDataPoints?: boolean;\n  dataPointsHeight?: number;\n  dataPointsWidth?: number;\n  dataPointsRadius?: number;\n  dataPointsColor?: string;\n  dataPointsShape?: string;\n  startFillColor?: string;\n  endFillColor?: string;\n  startOpacity?: number;\n  endOpacity?: number;\n  textFontSize?: number;\n  textColor?: string;\n  showArrow?: boolean;\n  arrowConfig?: arrowConfigType;\n  curved?: boolean;\n  curvature?: number;\n  curveType?: CurveType;\n  lineSegments?: Array<LineSegment>;\n  isSecondary?: boolean;\n  hidePointers?: boolean;\n};\n```\n\n----------------------------------------\n\nTITLE: Setting Quadratic Curve Type in React Native Gifted Charts\nDESCRIPTION: Sets the curve type of a line or area chart to a quadratic bezier curve instead of the default cubic bezier curve. This requires importing the CurveType enum from the library.\nSOURCE: https://github.com/abhinandan-kushwaha/react-native-gifted-charts/blob/master/release-notes/release-notes.md#2025-04-23_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\ncurveType={CurveType.QUADRATIC}\n```\n\n----------------------------------------\n\nTITLE: Rules Configuration Interface\nDESCRIPTION: TypeScript interface defining configuration options for chart rules including length, color, thickness and dash patterns\nSOURCE: https://github.com/abhinandan-kushwaha/react-native-gifted-charts/blob/master/docs/LineChart/LineChartProps.md#2025-04-23_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\ntype RulesConfig = {\n  rulesLength?: number;\n  rulesColor?: ColorValue;\n  rulesThickness?: number;\n  rulesType?: RuleType;\n  dashWidth?: number;\n  dashGap?: number;\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Pointer Configuration Type in TypeScript\nDESCRIPTION: TypeScript type definition for pointerConfig object that enables interactive pointer effects on charts. Includes properties for customizing pointer appearance, behavior, and animation.\nSOURCE: https://github.com/abhinandan-kushwaha/react-native-gifted-charts/blob/master/docs/LineChart/LineChartProps.md#2025-04-23_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\ntype Pointer = {\n  height?: number; // default: 0\n  width?: number; // default: 0\n  radius?: number; // default: 5\n  pointerColor?: ColorValue; // default: 'red'\n  pointer1Color?: ColorValue; // default: 'red'\n  pointer2Color?: ColorValue; // default: 'red'\n  pointer3Color?: ColorValue; // default: 'red'\n  pointer4Color?: ColorValue; // default: 'red'\n  pointer5Color?: ColorValue; // default: 'red'\n  secondaryPointerColor?: ColorValue; // default: 'red'\n  pointerComponent?: Function; // callback function that takes 2 parameters- item,index.  default: null\n  showPointerStrip?: boolean; // default: true\n  pointerStripWidth?: number; // default: containerHeight\n  pointerStripHeight?: number; // default: 1\n  pointerStripColor?: ColorValue; // default: 'black'\n  pointerStripUptoDataPoint?: boolean; // default: false\n  pointerLabelComponent?: Function; // default: null\n  stripOverPointer?: boolean; // default: false\n  shiftPointerLabelX?: number; // default: 0\n  shiftPointerLabelY?: number; // default: 0\n  pointerLabelWidth?: number; // default: 20\n  pointerLabelHeight?: number; // default: 20\n  autoAdjustPointerLabelPosition?: boolean; // default: false\n  pointerVanishDelay?: number; // default: 150\n  activatePointersOnLongPress?: boolean; // default: false\n  activatePointersInstantlyOnTouch?: boolean; // default: true\n  activatePointersDelay?: number; // default: 150\n  initialPointerIndex?: number; // default -1\n  initialPointerAppearDelay?: number; // if isAnimated, then animationDuration, else 0\n  persistPointer?: boolean; // false\n  resetPointerIndexOnRelease?: boolean; // false\n  hidePointer1?: boolean; // default: false\n  hidePointer2?: boolean; // default: false\n  hidePointer3?: boolean; // default: false\n  hidePointer4?: boolean; // default: false\n  hidePointer5?: boolean; // default: false\n  hideSecondaryPointer?: boolean; // default: false\n  strokeDashArray?: Array<number>;\n  barTouchable?: boolean; //default : false (only applicable to bar charts having pointerConfig)\n  pointerEvents?: 'box-none' | 'none' | 'box-only' | 'auto'; // default: \"none\n  dynamicLegendComponent?: Function; // default null\n  dynamicLegendContainerStyle?: Style object; // default null\n  horizontalStripConfig?: HorizontalStripConfig; // config for horizontal strip used for crosshair\n  hidePointerForMissingValues?: boolean; // false\n  hidePointerDataPointForMissingValues?: boolean; // unless explicitly specified, takes the value of hidePointerForMissingValues\n  onTouchStart?: Function\n  onTouchEnd?: Function\n  onResponderGrant?: Function\n  onResponderMove?: Function\n  onResponderEnd?: Function\n  onPointerEnter?: Function\n  onPointerLeave?: Function\n};\n```\n\n----------------------------------------\n\nTITLE: Line Chart Property Types - TypeScript\nDESCRIPTION: Type definitions for line chart customization properties including curve styles, colors, thicknesses, spacing, and line segments. Supports up to 5 different lines with individual styling.\nSOURCE: https://github.com/abhinandan-kushwaha/react-native-gifted-charts/blob/master/docs/LineChart/LineChartProps.md#2025-04-23_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\ninterface LineChartProps {\n  curved?: boolean;               // Controls if lines should be curved\n  curvature?: number;            // Curve intensity (0-1)\n  curveType?: CurveType;         // CUBIC or QUADRATIC\n  color?: ColorValue;            // Main line color\n  color1?: ColorValue;           // First line color\n  // ... colors 2-5\n  thickness?: number;            // Main line thickness\n  thickness1?: number;           // First line thickness\n  // ... thicknesses 2-5\n  spacing1?: number;             // Distance between points in first line\n  // ... spacing 2-5\n  zIndex1?: number;              // Z-index for first line\n  // ... zIndexes 2-5\n  strokeDashArray?: number[];    // Dash pattern [width, gap]\n  strokeDashArray1?: number[];   // Dash pattern for first line\n  // ... strokeDashArrays 2-5\n  strokeLinecap?: Linecap;       // Line end style\n  strokeLinecap1?: Linecap;      // First line end style\n  // ... strokeLinecaps 2-5\n  lineSegments?: LineSegment[];  // Custom line segments\n  // ... lineSegments 2-5\n  highlightedRange?: HighlightedRange;  // Range highlighting\n  startIndex?: number;           // Start index for breaks\n  // ... startIndexes 1-5\n  endIndex?: number;             // End index for breaks\n}\n```\n\n----------------------------------------\n\nTITLE: Secondary Y-Axis Configuration Type\nDESCRIPTION: Comprehensive type definition for secondary Y-axis configuration including scaling, styling, and label customization options\nSOURCE: https://github.com/abhinandan-kushwaha/react-native-gifted-charts/blob/master/docs/BarChart/BarChartProps.md#2025-04-23_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\ntype secondaryYAxisType = {\n  noOfSections?: number,\n  maxValue?: number,\n  mostNegativeValue?: nuepValue?: number,\n  stepHeight?: number,\n  showFractionalValues?: boolean,\n  roundToDigits?: number,\n\n  showYAxisIndices?: boolean,\n  yAxisIndicesHeight?: number,\n  yAxisIndicesWidth?: number,\n  yAxisIndicesColor?: ColorValue,\n\n  yAxisSide?: yAxisSides,\n  yAxisOffset?: number,\n  yAxisThickness?: number,\n  yAxisColor?: ColorValue,\n  yAxisLabelContainerStyle?: any,\n  yAxisLabelTexts: Array<string> | undefined,\n  yAxisTextStyle?: any,\n  yAxisTextNumberOfLines?: number,\n  yAxisLabelWidth?: number,\n  hideYAxisText?: boolean,\n  yAxisLabelPrefix?: string,\n  yAxisLabelSuffix?: string,\n  hideOrigin?: boolean,\n  formatYLabel?: (label: string) => string;\n};\n```\n\n----------------------------------------\n\nTITLE: Secondary Y-Axis Configuration Interface\nDESCRIPTION: TypeScript interface for secondary Y-axis configuration including scaling, styling and label options\nSOURCE: https://github.com/abhinandan-kushwaha/react-native-gifted-charts/blob/master/docs/LineChart/LineChartProps.md#2025-04-23_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\ntype secondaryYAxisType = {\n  noOfSections?: number;\n  maxValue?: number;\n  mostNegativeValue?: number;\n  stepValue?: number;\n  stepHeight?: number;\n  showFractionalValues?: boolean;\n  roundToDigits?: number;\n\n  showYAxisIndices?: boolean;\n  yAxisIndicesHeight?: number;\n  yAxisIndicesWidth?: number;\n  yAxisIndicesColor?: ColorValue;\n\n  yAxisSide?: yAxisSides;\n  yAxisOffset?: number;\n  yAxisThickness?: number;\n  yAxisColor?: ColorValue;\n  yAxisLabelContainerStyle?: any;\n  yAxisLabelTexts: Array<string> | undefined;\n  yAxisTextStyle?: any;\n  yAxisTextNumberOfLines?: number;\n  yAxisLabelWidth?: number;\n  hideYAxisText?: boolean;\n  yAxisLabelPrefix?: string;\n  yAxisLabelSuffix?: string;\n  hideOrigin?: boolean;\n  formatYLabel?: (label: string) => string;\n};\n```\n\n----------------------------------------\n\nTITLE: Defining CustomBackground Type in TypeScript for Gifted Charts\nDESCRIPTION: TypeScript interface definition for the customBackground prop that can be used in Bar, Line, and Area charts. This type allows for customizing the background with properties like color, component, positioning adjustments, and dimensions.\nSOURCE: https://github.com/abhinandan-kushwaha/react-native-gifted-charts/blob/master/release-notes/release-notes.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntype CustomBackground = {\n  color?: ColorValue;\n  component?: Function;\n  horizontalShift?: number;\n  verticalShift?: number;\n  height?: number;\n  width?: number;\n  widthAdjustment?: number;\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Horizontal Strip Configuration Type in TypeScript\nDESCRIPTION: TypeScript type definition for horizontal strip configuration used in chart pointer crosshair effects. Specifies properties for customizing strip appearance and behavior.\nSOURCE: https://github.com/abhinandan-kushwaha/react-native-gifted-charts/blob/master/docs/LineChart/LineChartProps.md#2025-04-23_snippet_19\n\nLANGUAGE: typescript\nCODE:\n```\ntype HorizontalStripConfig = {\n  thickness?: number; // default: pointerStripWidth\n  length?: number; // default: width of the chart\n  color?: ColorValue; // default: pointerStripColor\n  strokeDashArray?: number[]; // default: pointerConfig.strokeDashArray\n  horizontalStripUptoDataPoint?: boolean; // default: false\n  labelComponent?: Function; // default: null\n  labelComponentHeight?: number; // default: 30\n  labelComponentWidth?: number;\n};\n```\n\n----------------------------------------\n\nTITLE: Defining HighlightedRange Type in React Native Gifted Charts\nDESCRIPTION: This snippet defines the HighlightedRange type used for highlighting specific ranges in a line chart. It includes properties for start and end points, color, thickness, and stroke dash array.\nSOURCE: https://github.com/abhinandan-kushwaha/react-native-gifted-charts/blob/master/docs/LineChart/LineChartProps.md#2025-04-23_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\ntype HighlightedRange = {\n  from: number;\n  to: number;\n  color?: string | ColorValue;\n  thickness?: number;\n  strokeDashArray?: Array<number>;\n};\n```\n\n----------------------------------------\n\nTITLE: Defining LineSegment Type in React Native Gifted Charts\nDESCRIPTION: This snippet defines the LineSegment type used for customizing individual segments of a line chart. It includes properties for start and end indices, color, thickness, and stroke dash array.\nSOURCE: https://github.com/abhinandan-kushwaha/react-native-gifted-charts/blob/master/docs/LineChart/LineChartProps.md#2025-04-23_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\ntype LineSegment = {\n  startIndex: number; // required\n  endIndex: number; // required\n  color?: string | ColorValue;\n  thickness?: number;\n  strokeDashArray?: Array<number>;\n};\n```\n\n----------------------------------------\n\nTITLE: Rendering Flow for Multi-Line Charts in React Native\nDESCRIPTION: This code snippet illustrates the rendering process for multi-line charts, including conditional logic for dataSet vs. individual data props, and animated vs. non-animated rendering. It also shows the order of rendering for different chart elements.\nSOURCE: https://github.com/abhinandan-kushwaha/react-native-gifted-charts/blob/master/docs/dev/LineChart/MultiLine.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nLineChart() {\n    BarAndLineChartsWrapper() {\n        renderChartContent() {\n            if (dataSet) {\n                dataSet.forEach(set => {\n                    if (animated) {\n                        renderAnimatedLine(set) -> lineSvgComponent()\n                    }\n                    else {\n                        renderLine(set) -> lineSvgComponent()\n                    }\n                })\n            }\n            else {\n                if (animated) {\n                    renderAnimatedLine(data) -> lineSvgComponent()\n                    renderAnimatedLine(data2) -> lineSvgComponent()\n                    .\n                    .\n                    renderAnimatedLine(data5) -> lineSvgComponent()\n                    renderAnimatedLine(secondaryData) -> lineSvgComponent()\n                }\n                else {\n                    renderLine(data) -> lineSvgComponent()\n                    renderLine(data2) -> lineSvgComponent()\n                    .\n                    .\n                    renderLine(data5) -> lineSvgComponent()\n                    renderLine(secondaryData) -> lineSvgComponent()\n                }\n            }\n\n            // Pointer is rendered at last, after all the lines/curves have been rendered.\n            // This ensures that the pointer appears on top of all UI elements in the chart\n            renderPointer()\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining IntersectionAreaConfig Type in TypeScript\nDESCRIPTION: TypeScript type definition for the intersection area configuration between two datasets in an area chart. Specifies the fillColor property with a default value of white.\nSOURCE: https://github.com/abhinandan-kushwaha/react-native-gifted-charts/blob/master/docs/LineChart/LineChartProps.md#2025-04-23_snippet_21\n\nLANGUAGE: typescript\nCODE:\n```\ntype IntersectionAreaConfig {\n  fillColor: ColorValue // default: 'white'\n}\n```\n\n----------------------------------------\n\nTITLE: Defining LineConfig Type in TypeScript\nDESCRIPTION: TypeScript type definition for line chart configuration including properties for styling, animation, data points, and arrows.\nSOURCE: https://github.com/abhinandan-kushwaha/react-native-gifted-charts/blob/master/docs/BarChart/BarChartProps.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntype lineConfigType = {\n  initialSpacing?: number;\n  spacing?: number;\n  curved?: boolean;\n  curvature: number;\n  curveType: CurveType;\n  isAnimated?: boolean;\n  delay?: number;\n  thickness?: number;\n  color?: ColorValue | String | any;\n  hideDataPoints?: boolean;\n  dataPointsShape?: String;\n  dataPointsWidth?: number;\n  dataPointsHeight?: number;\n  dataPointsColor?: ColorValue | String | any;\n  dataPointsRadius?: number;\n  textColor?: ColorValue | String | any;\n  textFontSize?: number;\n  textShiftX?: number;\n  textShiftY?: number;\n  sfiftX?: number;\n  shiftY?: number;\n  startIndex?: number;\n  endIndex?: number;\n  showArrow?: boolean;\n  arrowConfig?: arrowType;\n  isSecondary?: boolean;\n  focusEnabled?: boolean;\n  focusedDataPointColor?: ColorValue;\n  focusedDataPointRadius?: number;\n  focusedDataPointIndex?: number;\n};\n```\n\n----------------------------------------\n\nTITLE: LineGradient Configuration Example\nDESCRIPTION: JavaScript object showing available props for configuring multicolor line charts with gradients.\nSOURCE: https://github.com/abhinandan-kushwaha/react-native-gifted-charts/blob/master/release-notes/release-notes.md#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nlineGradient?: boolean;\nlineGradientComponent?: () => any;\nlineGradientId?: string;\nlineGradientDirection?: string;\nlineGradientStartColor?: string;\nlineGradientEndColor?: string;\n```\n\n----------------------------------------\n\nTITLE: Defining HighlightedRange Type in TypeScript\nDESCRIPTION: TypeScript interface definition for highlighted range configuration in line charts. Specifies parameters for customizing segments of lines with different styles.\nSOURCE: https://github.com/abhinandan-kushwaha/react-native-gifted-charts/blob/master/release-notes/release-notes.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\ntype HighlightedRange = {\n  from: number;\n  to: number;\n  color?: string | ColorValue;\n  thickness?: number;\n  strokeDashArray?: Array<number>;\n};\n```\n\n----------------------------------------\n\nTITLE: Defining FocusedBarConfig Type in TypeScript\nDESCRIPTION: Type definition for focused bar configuration including styling and custom component properties.\nSOURCE: https://github.com/abhinandan-kushwaha/react-native-gifted-charts/blob/master/docs/BarChart/BarChartProps.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\ntype FocusedBarConfig = {\n  color?: ColorValue;\n  sideColor?: ColorValue;\n  topColor?: ColorValue;\n  gradientColor?: ColorValue;\n  width?: number;\n  borderRadius?: number;\n  roundedTop?: boolean;\n  roundedBottom?: boolean;\n  opacity?: number;\n  barInnerComponent?: (item?: barDataItem, index?: number) => ReactNode;\n};\n```\n\n----------------------------------------\n\nTITLE: Defining secondaryLineConfig Type in TypeScript\nDESCRIPTION: TypeScript type definition for secondaryLineConfig, which controls properties of the secondary line in a chart such as color, thickness, curvature, and data point styling. All properties are optional and will inherit default values from the primary line if not provided.\nSOURCE: https://github.com/abhinandan-kushwaha/react-native-gifted-charts/blob/master/docs/LineChart/LineChartProps.md#2025-04-23_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\ntype secondaryLineConfigType = {\n  zIndex?: number;\n  curved?: boolean;\n  curvature: number;\n  curveType: CurveType; //CurveType is an enum defined below\n  areaChart?: boolean;\n  color?;\n  ColorValue;\n  thickness?: number;\n  zIndex1?: number;\n  strokeDashArray?: Array<number>;\n  strokeLinecap?: Linecap;\n  startIndex?: number;\n  endIndex?: number;\n  hideDataPoints?: boolean;\n  dataPointsHeight?: number;\n  dataPointsWidth?: number;\n  dataPointsRadius?: number;\n  dataPointsColor?: string;\n  dataPointsShape?: string;\n  showValuesAsDataPointsText?: boolean;\n  startFillColor?: string;\n  endFillColor?: string;\n  startOpacity?: number;\n  endOpacity?: number;\n  textFontSize?: number;\n  textColor?: string;\n  showArrow?: boolean;\n  arrowConfig?: arrowConfigType;\n  spacing?: number;\n};\n```\n\n----------------------------------------\n\nTITLE: Reference Configuration Interface\nDESCRIPTION: TypeScript interface for reference line configuration including styling, labels and behavior options\nSOURCE: https://github.com/abhinandan-kushwaha/react-native-gifted-charts/blob/master/docs/LineChart/LineChartProps.md#2025-04-23_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\ntype referenceConfigType = {\n  thickness: number;\n  width: number;\n  color: ColorValue | String | any;\n  type: ruleTypes;\n  dashWidth: number;\n  dashGap: number;\n  labelText: String;\n  labelTextStyle: object;\n  zIndex: number; // default 1\n  resetPointerOnDataChange: boolean; // default true\n};\n```\n\n----------------------------------------\n\nTITLE: X-Axis Configuration Interface\nDESCRIPTION: TypeScript interface for X-axis styling and label configuration\nSOURCE: https://github.com/abhinandan-kushwaha/react-native-gifted-charts/blob/master/docs/LineChart/LineChartProps.md#2025-04-23_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\ntype XAxisConfig {\n  thickness?: number\n  color?: ColorValue\n  labelsDistanceFromXaxis?: number\n  labelsHeight?: number\n  labelsTextStyle?: any\n  labelTexts?: string[]\n}\n```\n\n----------------------------------------\n\nTITLE: Reference Configuration Type Definition\nDESCRIPTION: Type definition for reference line configurations including styling, labels and positioning options\nSOURCE: https://github.com/abhinandan-kushwaha/react-native-gifted-charts/blob/master/docs/BarChart/BarChartProps.md#2025-04-23_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\ntype referenceConfigType = {\n  thickness: number;\n  width: number;\n  color: ColorValue | String | any;\n  type: ruleTypes;\n  dashWidth: number;\n  dashGap: number;\n  labelText: String;\n  labelTextStyle: object;\n  zIndex: number;\n  stripBehindBars: boolean;\n};\n```\n\n----------------------------------------\n\nTITLE: Type Definitions for React Native Gifted Charts Axes Props\nDESCRIPTION: TypeScript interface defining available props for axes and rules configuration in React Native Gifted Charts. Includes properties for customizing axes appearance, labels, rules, reference lines, and vertical lines.\nSOURCE: https://github.com/abhinandan-kushwaha/react-native-gifted-charts/blob/master/docs/LineChart/LineChartProps.md#2025-04-23_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\ninterface AxesProps {\n  xAxisLength?: number;\n  xAxisColor?: ColorValue;\n  xAxisThickness?: number;\n  xAxisType?: RuleType;\n  yAxisColor?: ColorValue;\n  yAxisThickness?: number;\n  yAxisLabelWidth?: number;\n  yAxisTextStyle?: object;\n  yAxisTextNumberOfLines?: number;\n  yAxisLabelContainerStyle?: object;\n  trimYAxisAtTop?: boolean;\n  yAxisExtraHeight?: number;\n  yAxisOffset?: number;\n  horizontalRulesStyle?: object;\n  showFractionalValues?: boolean;\n  roundToDigits?: number;\n  yAxisLabelPrefix?: string;\n  yAxisLabelSuffix?: string;\n  hideYAxisText?: boolean;\n  formatYLabel?: (label: string) => string;\n  yAxisSide?: yAxisSides;\n  rulesLength?: number;\n  rulesColor?: ColorValue;\n  rulesThickness?: number;\n  hideRules?: boolean;\n  rulesType?: RuleType;\n  dashWidth?: number;\n  dashGap?: number;\n  rulesConfigArray?: Array<RulesConfig>;\n  showReferenceLine1?: boolean;\n  referenceLine1Config?: referenceConfigType;\n  referenceLine1Position?: number;\n  showReferenceLine2?: boolean;\n  referenceLine2Config?: referenceConfigType;\n  referenceLine2Position?: number;\n  showReferenceLine3?: boolean;\n  referenceLine3Config?: referenceConfigType;\n  referenceLine3Position?: number;\n  referenceLinesOverChartContent?: boolean;\n  showVerticalLines?: boolean;\n  verticalLinesUptoDataPoint?: boolean;\n  verticalLinesColor?: ColorValue;\n  verticalLinesThickness?: number;\n  verticalLinesHeight?: number;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining CustomBackground Type in TypeScript\nDESCRIPTION: Type definition for custom background configuration including color, component and positioning properties.\nSOURCE: https://github.com/abhinandan-kushwaha/react-native-gifted-charts/blob/master/docs/BarChart/BarChartProps.md#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\ntype CustomBackground = {\n  color?: ColorValue;\n  component?: Function;\n  horizontalShift?: number;\n  verticalShift?: number;\n  height?: number;\n  width?: number;\n  widthAdjustment?: number;\n};\n```\n\n----------------------------------------\n\nTITLE: CustomBackground Type Definition for React Native Gifted Charts\nDESCRIPTION: Defines the CustomBackground type used for customizing the chart background. It allows specifying colors, component functions, positioning adjustments, and dimensional properties for background elements.\nSOURCE: https://github.com/abhinandan-kushwaha/react-native-gifted-charts/blob/master/docs/LineChart/LineChartProps.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\ntype CustomBackground = {\n  color?: ColorValue;\n  component?: Function;\n  horizontalShift?: number;\n  verticalShift?: number;\n  height?: number;\n  width?: number;\n  widthAdjustment?: number;\n};\n```\n\n----------------------------------------\n\nTITLE: Defining XAxisConfig Type for Secondary X-Axis\nDESCRIPTION: TypeScript definition for the secondaryXAxis prop that allows rendering an additional X-axis at the top of the chart. Properties include thickness, color, label positioning and styling options.\nSOURCE: https://github.com/abhinandan-kushwaha/react-native-gifted-charts/blob/master/release-notes/release-notes.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nXAxisConfig {\n  thickness?: number\n  color?: ColorValue\n  labelsDistanceFromXaxis?: number\n  labelsHeight?: number\n  labelsTextStyle?: any\n  labelTexts?: string[]\n}\n```\n\n----------------------------------------\n\nTITLE: Type Definition - Population Pyramid Data Item Interface\nDESCRIPTION: TypeScript interface defining the structure for population pyramid chart data items. Includes properties for configuring bar values, colors, borders, labels, and surplus indicators for both left and right sides of the pyramid.\nSOURCE: https://github.com/abhinandan-kushwaha/react-native-gifted-charts/blob/master/docs/PopulationPyramid/PopulationPyramid.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntype popnPyramidDataItem = {\n  left: number;\n  right: number;\n  leftBarColor?: ColorValue;\n  rightBarColor?: ColorValue;\n  leftBarBorderColor?: ColorValue;\n  rightBarBorderColor?: ColorValue;\n  barBorderWidth?: number;\n  leftBarBorderWidth?: number;\n  rightBarBorderWidth?: number;\n  barBorderRadius?: number;\n  leftBarBorderRadius?: number;\n  rightBarBorderRadius?: number;\n\n  barLabelWidth?: number;\n  barLabelFontSize?: number;\n  barLabelColor?: ColorValue;\n  barLabelFontStyle?: FontStyle;\n  barLabelFontWeight?: FontWeight;\n  barLabelFontFamily?: string;\n\n  leftBarLabel?: string;\n  leftBarLabelWidth?: number;\n  leftBarLabelFontSize?: number;\n  leftBarLabelColor?: ColorValue;\n  leftBarLabelFontStyle?: FontStyle;\n  leftBarLabelFontWeight?: FontWeight;\n  leftBarLabelFontFamily?: string;\n  leftBarLabelShift?: number;\n\n  rightBarLabel?: string;\n  rightBarLabelWidth?: number;\n  rightBarLabelFontSize?: number;\n  rightBarLabelColor?: ColorValue;\n  rightBarLabelFontStyle?: FontStyle;\n  rightBarLabelFontWeight?: FontWeight;\n  rightBarLabelFontFamily?: string;\n  rightBarLabelShift?: number;\n\n  yAxisLabel?: string;\n  midAxisLabel?: string;\n  midAxisLabelFontSize?: number;\n  midAxisLabelColor?: ColorValue;\n  midAxisLabelFontStyle?: FontStyle;\n  midAxisLabelFontWeight?: FontWeight;\n  midAxisLabelFontFamily?: string;\n\n  showSurplus?: boolean;\n  showSurplusLeft?: boolean;\n  showSurplusRight?: boolean;\n  leftSurplusColor?: ColorValue;\n  leftSurplusBorderColor?: ColorValue;\n  rightSurplusColor?: ColorValue;\n  rightSurplusBorderColor?: ColorValue;\n  leftSurplusBorderWidth?: number;\n  rightSurplusBorderWidth?: number;\n};\n```\n\n----------------------------------------\n\nTITLE: Defining LabelLineConfig Type for External Labels in Pie/Donut Charts\nDESCRIPTION: TypeScript definition for the labelLineConfig prop used to customize external labels in Pie and Donut charts. Properties include length and thickness of label lines, colors, and component dimensions.\nSOURCE: https://github.com/abhinandan-kushwaha/react-native-gifted-charts/blob/master/release-notes/release-notes.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ntype LabelLineConfig = {\n  length?: number; // default 10\n  tailLength?: number; // default 8\n  color?: ColorValue; // default 'black'\n  thickness?: number; // default 1\n  labelComponentWidth?: number; // default 20\n  labelComponentHeight?: number; // default 10\n  labelComponentMargin?: number; // default 4\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Pie Chart Tooltip Defaults in JavaScript\nDESCRIPTION: Default configuration options for pie chart tooltips including width, duration, positioning and styling properties.\nSOURCE: https://github.com/abhinandan-kushwaha/react-native-gifted-charts/blob/master/docs/PieChart/PieChartProps.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nPieTooltipDefaults = {\n  tooltipWidth: undefined, // takes the width of the tooltip text\n  persistTooltip: false,\n  tooltipDuration: 1000,\n  tooltipVerticalShift: 30,\n  tooltipHorizontalShift: 20,\n  showValuesAsTooltipText: true,\n  tooltipTextNoOfLines: 3,\n  tooltipBackgroundColor: 'rgba(20,20,20,0.8)',\n  tooltipBorderRadius: 4,\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Label Line Configuration Types in TypeScript\nDESCRIPTION: TypeScript type definition for label line configuration including properties for length, color, thickness and label component dimensions.\nSOURCE: https://github.com/abhinandan-kushwaha/react-native-gifted-charts/blob/master/docs/PieChart/PieChartProps.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ntype LabelLineConfig = {\n  length?: number; // default 10\n  tailLength?: number; // default 8\n  color?: ColorValue; // default 'black'\n  thickness?: number; // default 1\n  labelComponentWidth?: number; // default 20\n  labelComponentHeight?: number; // default 10\n  labelComponentMargin?: number; // default 4\n  avoidOverlappingOfLabels?: boolean; // default true\n};\n```\n\n----------------------------------------\n\nTITLE: Defining GridConfig Type for Radar Chart in TypeScript\nDESCRIPTION: This snippet defines the GridConfig type used for configuring the grid appearance in a Radar Chart. It includes properties for stroke, fill, gradient, and opacity settings.\nSOURCE: https://github.com/abhinandan-kushwaha/react-native-gifted-charts/blob/master/docs/RadarChart/RadarChartProps.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntype GridConfig = {\n  stroke?: string;\n  strokeWidth?: number;\n  strokeDashArray?: number[];\n  fill?: string;\n  gradientColor?: string;\n  showGradient?: boolean;\n  opacity?: number;\n  gradientOpacity?: number;\n  gridSections?: GridSectionConfig[]; // GridSectionConfig is defined below\n};\n```\n\n----------------------------------------\n\nTITLE: Rules Configuration Interface for Chart Rules\nDESCRIPTION: Interface defining the configuration options for chart rules including length, color, thickness and dash patterns\nSOURCE: https://github.com/abhinandan-kushwaha/react-native-gifted-charts/blob/master/docs/BarChart/BarChartProps.md#2025-04-23_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\ntype RulesConfig = {\n  rulesLength?: number;\n  rulesColor?: ColorValue;\n  rulesThickness?: number;\n  rulesType?: RuleType;\n  dashWidth?: number;\n  dashGap?: number;\n};\n```\n\n----------------------------------------\n\nTITLE: Defining PolygonConfig Type for Radar Chart in TypeScript\nDESCRIPTION: This snippet defines the PolygonConfig type used for configuring the polygon appearance in a Radar Chart. It includes properties for stroke, fill, gradient, and animation settings.\nSOURCE: https://github.com/abhinandan-kushwaha/react-native-gifted-charts/blob/master/docs/RadarChart/RadarChartProps.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\ntype PolygonConfig = {\n  stroke?: string;\n  strokeWidth?: number;\n  strokeDashArray?: number[];\n  fill?: string;\n  gradientColor?: string;\n  showGradient?: boolean;\n  opacity?: number;\n  gradientOpacity?: number;\n  showDataValuesAsLabels?: boolean;\n  isAnimated?: boolean;\n  animationDuration?: number;\n};\n```\n\n----------------------------------------\n\nTITLE: Defining LabelConfig Type for Radar Chart in TypeScript\nDESCRIPTION: This snippet defines the LabelConfig type used for configuring label appearance in a Radar Chart. It includes properties for font styling and text alignment.\nSOURCE: https://github.com/abhinandan-kushwaha/react-native-gifted-charts/blob/master/docs/RadarChart/RadarChartProps.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ntype LabelConfig = {\n  fontSize?: number;\n  stroke?: string;\n  textAnchor?: string;\n  alignmentBaseline?: string;\n  fontWeight?: string;\n  fontFamily?: string;\n};\n```\n\n----------------------------------------\n\nTITLE: Defining GridSectionConfig Type for Radar Chart in TypeScript\nDESCRIPTION: This snippet defines the GridSectionConfig type, which is used to configure individual grid sections in a Radar Chart. It includes properties similar to GridConfig but for specific sections.\nSOURCE: https://github.com/abhinandan-kushwaha/react-native-gifted-charts/blob/master/docs/RadarChart/RadarChartProps.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ntype GridSectionConfig = {\n  stroke?: string;\n  strokeWidth?: number;\n  strokeDashArray?: number[];\n  fill?: string;\n  gradientColor?: string;\n  showGradient?: boolean;\n  opacity?: number;\n  gradientOpacity?: number;\n};\n```\n\n----------------------------------------\n\nTITLE: Default Line Configuration in TypeScript\nDESCRIPTION: Default configuration object for line chart settings including styling and behavior properties.\nSOURCE: https://github.com/abhinandan-kushwaha/react-native-gifted-charts/blob/master/docs/BarChart/BarChartProps.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ndefaultLineConfig = {\n  initialSpacing: initialSpacing,\n  curved: false,\n  curvature: 0.2,\n  curveType: CurveType.CUBIC,\n  isAnimated: false,\n  thickness: 1,\n  color: 'black',\n  hideDataPoints: false,\n  dataPointsShape: 'circular',\n  dataPointsWidth: 4,\n  dataPointsHeight: 4,\n  dataPointsColor: 'black',\n  dataPointsRadius: 3,\n  textColor: 'gray',\n  textFontSize: 10,\n  textShiftX: 0,\n  textShiftY: 0,\n  shiftY: 0,\n  delay: 0,\n  startIndex: 0,\n  endIndex: lineData.length - 1,\n  showArrow: false,\n  arrowConfig: {\n    length: 10,\n    width: 10,\n    strokeWidth: 1,\n    strokeColor: 'black',\n    fillColor: 'none',\n    showArrowBase: true,\n  },\n  isSecondary: false,\n  focusEnabled: false,\n  focusedDataPointColor: LineDefaults.focusedDataPointColor,\n  focusedDataPointRadius: LineDefaults.dataPointsRadius,\n};\n```\n\n----------------------------------------\n\nTITLE: Defining AsterLinesConfig Type for Radar Chart in TypeScript\nDESCRIPTION: This snippet defines the AsterLinesConfig type used for configuring the aster lines appearance in a Radar Chart. It includes properties for stroke styling.\nSOURCE: https://github.com/abhinandan-kushwaha/react-native-gifted-charts/blob/master/docs/RadarChart/RadarChartProps.md#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\ntype AsterLinesConfig = {\n  stroke?: string;\n  strokeWidth?: number;\n  strokeDashArray?: number[];\n};\n```\n\n----------------------------------------\n\nTITLE: Defining CurveType Enum for Line Curves\nDESCRIPTION: TypeScript enum definition for CurveType which specifies the type of curve to use for the line chart. It supports CUBIC and QUADRATIC curve types, which affect how the line is rendered between data points.\nSOURCE: https://github.com/abhinandan-kushwaha/react-native-gifted-charts/blob/master/docs/LineChart/LineChartProps.md#2025-04-23_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nenum CurveType {\n  CUBIC,\n  QUADRATIC,\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Rule Types in React Native Gifted Charts\nDESCRIPTION: Type definition for rule styles that can be applied to chart gridlines or reference lines\nSOURCE: https://github.com/abhinandan-kushwaha/react-native-gifted-charts/blob/master/docs/BarChart/BarChartProps.md#2025-04-23_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\ntype RuleType = 'solid' | 'dashed' | 'dotted';\n```\n\n----------------------------------------\n\nTITLE: Prop Correlation Rule in TypeScript\nDESCRIPTION: Mathematical relationship between maxValue, noOfSections, and stepValue props.\nSOURCE: https://github.com/abhinandan-kushwaha/react-native-gifted-charts/blob/master/docs/BarChart/BarChartProps.md#2025-04-23_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nmaxValue = noOfSections * stepValue;\n```\n\n----------------------------------------\n\nTITLE: Defining Rule Types in TypeScript\nDESCRIPTION: Type definition for chart rule styles, supporting solid, dashed, or dotted lines\nSOURCE: https://github.com/abhinandan-kushwaha/react-native-gifted-charts/blob/master/docs/LineChart/LineChartProps.md#2025-04-23_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\ntype RuleType = 'solid' | 'dashed' | 'dotted';\n```\n\n----------------------------------------\n\nTITLE: Defining Linecap Types in TypeScript\nDESCRIPTION: Type definition for SVG line cap styles\nSOURCE: https://github.com/abhinandan-kushwaha/react-native-gifted-charts/blob/master/docs/LineChart/LineChartProps.md#2025-04-23_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\ntype Linecap = 'butt' | 'square' | 'round';\n```\n\n----------------------------------------\n\nTITLE: Relationship Between Chart Scale Props in React Native Gifted Charts\nDESCRIPTION: Demonstrates the mathematical relationship between maxValue, noOfSections, and stepValue props. These three properties must follow a specific formula to ensure consistent chart scaling.\nSOURCE: https://github.com/abhinandan-kushwaha/react-native-gifted-charts/blob/master/docs/LineChart/LineChartProps.md#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nmaxValue = noOfSections * stepValue;\n```\n\n----------------------------------------\n\nTITLE: Defining CurveType Enum in TypeScript\nDESCRIPTION: Enum definition for curve types used in line chart configuration.\nSOURCE: https://github.com/abhinandan-kushwaha/react-native-gifted-charts/blob/master/docs/BarChart/BarChartProps.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nenum CurveType {\n  CUBIC,\n  QUADRATIC,\n}\n```\n\n----------------------------------------\n\nTITLE: EdgePosition Enum Definition for Step Charts in React Native Gifted Charts\nDESCRIPTION: Defines an enum for specifying the edge positions of steps in step charts. It provides three options: AFTER_DATA_POINT, BEFORE_DATA_POINT, and AROUND_DATA_POINT to control where the step transitions occur.\nSOURCE: https://github.com/abhinandan-kushwaha/react-native-gifted-charts/blob/master/docs/LineChart/LineChartProps.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nenum EdgePosition {\n  AFTER_DATA_POINT,\n  BEFORE_DATA_POINT,\n  AROUND_DATA_POINT,\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering BarChart Component in React Native\nDESCRIPTION: This snippet shows the structure of the BarChart component in React Native Gifted Charts. It uses BarAndLineChartsWrapper as a container and passes chart content through the renderChartContent prop.\nSOURCE: https://github.com/abhinandan-kushwaha/react-native-gifted-charts/blob/master/docs/dev/BarChart/index.md#2025-04-23_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n<BarAndLineChartsWrapper\n  renderChartContent={/* actual chart content */}\n  // ... other props\n/>\n```\n\n----------------------------------------\n\nTITLE: Component Property Documentation in Markdown\nDESCRIPTION: Documentation note indicating that PieChartPro component supports animation and curved paths functionality while maintaining compatibility with all props from the standard PieChart component.\nSOURCE: https://github.com/abhinandan-kushwaha/react-native-gifted-charts/blob/master/docs/PieChart/PieChartProps.md#2025-04-23_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n## Animation and Curved paths\n\nAnimation and curved paths are supported in **`<PieChartPro>`** component. It receives all the above props (same as the **`<PieChart>`** component)\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Branch Naming Conventions in Markdown\nDESCRIPTION: This code snippet illustrates the proper naming conventions for new branches when contributing to the project. It specifies formats for feature branches and bug fix branches.\nSOURCE: https://github.com/abhinandan-kushwaha/react-native-gifted-charts/blob/master/CONTRIBUTING.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n1. For a new feature- **feat/feature-name**\n2. For a bug fix, **fix/whatever-fix**\n```"
  }
]