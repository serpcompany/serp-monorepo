[
  {
    "owner": "tinacms",
    "repo": "tinacms",
    "content": "TITLE: Registering Custom Component with TinaCMS\nDESCRIPTION: Example of registering a custom component with the CMS. This allows the schema to reference custom field components by name.\nSOURCE: https://github.com/tinacms/tinacms/blob/main/packages/@tinacms/cli/CHANGELOG.md#2025-04-20_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\ncms.fields.add({\n  name: \"myMapField\",\n  Component: MapPicker,\n});\n```\n\n----------------------------------------\n\nTITLE: Hosting TinaCMS Backend with TinaNodeBackend\nDESCRIPTION: This example illustrates setting up TinaCMS backend hosting using TinaNodeBackend, supporting both local and remote authentication methods. It integrates the database client and auth provider selection based on environment variables, facilitating a consolidated and streamlined approach to managing the TinaCMS backend.\nSOURCE: https://github.com/tinacms/tinacms/blob/main/packages/@tinacms/graphql/CHANGELOG.md#2025-04-20_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  TinaNodeBackend,\n  LocalBackendAuthProvider,\n} from \"@tinacms/datalayer\";\n\nimport { TinaAuthJSOptions, AuthJsBackendAuthProvider } from \"tinacms-authjs\";\n\nimport databaseClient from \"../../../tina/__generated__/databaseClient\";\n\nconst isLocal = process.env.TINA_PUBLIC_IS_LOCAL === \"true\";\n\nconst handler = TinaNodeBackend({\n  authProvider: isLocal\n    ? LocalBackendAuthProvider()\n    : AuthJsBackendAuthProvider({\n        authOptions: TinaAuthJSOptions({\n          databaseClient: databaseClient,\n          secret: process.env.NEXTAUTH_SECRET,\n        }),\n      }),\n  databaseClient,\n});\n\nexport default (req, res) => {\n  // Modify the request here if you need to\n  return handler(req, res);\n};\n```\n\n----------------------------------------\n\nTITLE: Creating TinaCMS Database Configuration\nDESCRIPTION: Example configuration for setting up a TinaCMS database with GitHub provider and MongoDB adapter. Shows both local and production database setup options.\nSOURCE: https://github.com/tinacms/tinacms/blob/main/packages/@tinacms/auth/CHANGELOG.md#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createDatabase, createLocalDatabase } from \"@tinacms/datalayer\";\nimport { MongodbLevel } from \"mongodb-level\";\nimport { GitHubProvider } from \"tinacms-gitprovider-github\";\n\nconst isLocal = process.env.TINA_PUBLIC_IS_LOCAL === \"true\";\n\nexport default isLocal\n  ? createLocalDatabase()\n  : createDatabase({\n      gitProvider: new GitHubProvider({\n        branch: process.env.GITHUB_BRANCH,\n        owner: process.env.GITHUB_OWNER,\n        repo: process.env.GITHUB_REPO,\n        token: process.env.GITHUB_PERSONAL_ACCESS_TOKEN,\n      }),\n      databaseAdapter: new MongodbLevel<string, Record<string, any>>({\n        collectionName: \"tinacms\",\n        dbName: \"tinacms\",\n        mongoUri: process.env.MONGODB_URI,\n      }),\n      namespace: process.env.GITHUB_BRANCH,\n    });\n```\n\n----------------------------------------\n\nTITLE: Configuring TinaCMS Database with GitHubProvider and MongoDB\nDESCRIPTION: Example of updated database.ts file showing how to create a database with GitHubProvider and MongoDB adapter, with conditional configuration for local or production environments.\nSOURCE: https://github.com/tinacms/tinacms/blob/main/packages/tinacms/CHANGELOG.md#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createDatabase, createLocalDatabase } from \"@tinacms/datalayer\";\nimport { MongodbLevel } from \"mongodb-level\";\nimport { GitHubProvider } from \"tinacms-gitprovider-github\";\n\nconst isLocal = process.env.TINA_PUBLIC_IS_LOCAL === \"true\";\n\nexport default isLocal\n  ? createLocalDatabase()\n  : createDatabase({\n      gitProvider: new GitHubProvider({\n        branch: process.env.GITHUB_BRANCH,\n        owner: process.env.GITHUB_OWNER,\n        repo: process.env.GITHUB_REPO,\n        token: process.env.GITHUB_PERSONAL_ACCESS_TOKEN,\n      }),\n      databaseAdapter: new MongodbLevel<string, Record<string, any>>({\n        collectionName: \"tinacms\",\n        dbName: \"tinacms\",\n        mongoUri: process.env.MONGODB_URI,\n      }),\n      namespace: process.env.GITHUB_BRANCH,\n    });\n```\n\n----------------------------------------\n\nTITLE: Consolidated TinaCMS Database Configuration\nDESCRIPTION: Updated database configuration example showing how to use the new API with both local and remote database options using environment variables to determine mode.\nSOURCE: https://github.com/tinacms/tinacms/blob/main/packages/@tinacms/schema-tools/CHANGELOG.md#2025-04-20_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createDatabase, createLocalDatabase, GitHubProvider } from '@tinacms/datalayer';\nimport { MongodbLevel } from 'mongodb-level';\nconst isLocal = process.env.TINA_PUBLIC_IS_LOCAL === 'true';\nexport default isLocal\n  ? createLocalDatabase()\n  : createDatabase({\n      gitProvider: new GitHubProvider(...),\n      databaseAdapter: new MongodbLevel<string, Record<string, any>>(...),\n    });\n```\n\n----------------------------------------\n\nTITLE: Defining Standalone Config Function for TinaCMS in TypeScript\nDESCRIPTION: This snippet shows how to use a leaner 'define' function for the standalone TinaCMS configuration, which uses the apiUrl from client generation and sends it as a global constant to the Vite app, avoiding the need for a generated client.\nSOURCE: https://github.com/tinacms/tinacms/blob/main/packages/tinacms/CHANGELOG.md#2025-04-20_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\ndefineConfig({\n  schema: schema,\n  //.. Everything from define config in `schema.ts`\n  //.. Everything from `schema.config`\n})\n```\n\n----------------------------------------\n\nTITLE: Defining String Field with UI Component in Tina CMS (JavaScript)\nDESCRIPTION: Illustrates how to define a string field with a custom UI component in Tina CMS schema. This allows for more flexible field representations.\nSOURCE: https://github.com/tinacms/tinacms/blob/main/packages/@tinacms/datalayer/CHANGELOG.md#2025-04-20_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  type: \"string\",\n  label: \"Description\",\n  name: \"description\",\n  ui: {\n    component: \"textarea\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring TinaCMS Backend with Authentication Providers\nDESCRIPTION: Example of setting up the TinaCMS backend with conditional authentication providers for local or production environments using the new TinaNodeBackend.\nSOURCE: https://github.com/tinacms/tinacms/blob/main/packages/tinacms/CHANGELOG.md#2025-04-20_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  TinaNodeBackend,\n  LocalBackendAuthProvider,\n} from \"@tinacms/datalayer\";\n\nimport { TinaAuthJSOptions, AuthJsBackendAuthProvider } from \"tinacms-authjs\";\n\nimport databaseClient from \"../../../tina/__generated__/databaseClient\";\n\nconst isLocal = process.env.TINA_PUBLIC_IS_LOCAL === \"true\";\n\nconst handler = TinaNodeBackend({\n  authProvider: isLocal\n    ? LocalBackendAuthProvider()\n    : AuthJsBackendAuthProvider({\n        authOptions: TinaAuthJSOptions({\n          databaseClient: databaseClient,\n          secret: process.env.NEXTAUTH_SECRET,\n        }),\n      }),\n  databaseClient,\n});\n\nexport default (req, res) => {\n  // Modify the request here if you need to\n  return handler(req, res);\n};\n```\n\n----------------------------------------\n\nTITLE: Authorization Backend Handler with Next.js\nDESCRIPTION: This code snippet defines an API handler for authorizing users in a Next.js application. It utilizes the `isAuthorized` function from the `@tinacms/auth` package to check if a user is logged in and verified. If the user is valid, it allows further action such as image uploads. The snippet also explains how to respond to the client based on the user's authentication state and handles cases where a user is not logged in.\nSOURCE: https://github.com/tinacms/tinacms/blob/main/packages/@tinacms/auth/readme.md#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { NextApiHandler } from 'next'\\nimport { isAuthorized } from '@tinacms/auth'\\nconst apiHandler: NextApiHandler = async (req, res) => {\\n  // This will check if the user is logged in. It will return undefined if the user token is not valid\\n  const user = await isAuthorized(req)\\n  if (user && user.verified) {\\n    console.log('this user is logged in')\\n    // now you could (for example) upload images\\n    await imageUploadFunction(req, res)\\n    res.json({\\n       validUser: true,\\n    })\\n    return\\n  } else {\\n    console.log('this user NOT is logged in')\\n    res.json({\\n       validUser: false,\\n    })\\n  }\\n}\\nexport default apiHandler\n```\n\n----------------------------------------\n\nTITLE: Configuring Database with GitHubProvider in TypeScript\nDESCRIPTION: This snippet shows how to set up a database configuration using the new GitHubProvider and MongodbLevel in TypeScript. It requires '@tinacms/datalayer', 'mongodb-level', and 'tinacms-gitprovider-github' packages. The configuration supports both local and remote setups based on environment variables. Inputs include git provider details like branch, owner, and repository, and outputs a configured database object.\nSOURCE: https://github.com/tinacms/tinacms/blob/main/packages/@tinacms/graphql/CHANGELOG.md#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createDatabase, createLocalDatabase } from \"@tinacms/datalayer\";\nimport { MongodbLevel } from \"mongodb-level\";\nimport { GitHubProvider } from \"tinacms-gitprovider-github\";\n\nconst isLocal = process.env.TINA_PUBLIC_IS_LOCAL === \"true\";\n\nexport default isLocal\n  ? createLocalDatabase()\n  : createDatabase({\n      gitProvider: new GitHubProvider({\n        branch: process.env.GITHUB_BRANCH,\n        owner: process.env.GITHUB_OWNER,\n        repo: process.env.GITHUB_REPO,\n        token: process.env.GITHUB_PERSONAL_ACCESS_TOKEN,\n      }),\n      databaseAdapter: new MongodbLevel<string, Record<string, any>>({\n        collectionName: \"tinacms\",\n        dbName: \"tinacms\",\n        mongoUri: process.env.MONGODB_URI,\n      }),\n      namespace: process.env.GITHUB_BRANCH,\n    });\n```\n\n----------------------------------------\n\nTITLE: Creating a Schema File for TinaCloud\nDESCRIPTION: This code defines a schema for the TinaCloud content API using the defineSchema function, specifying collections and fields for Blog Posts and Authors.\nSOURCE: https://github.com/tinacms/tinacms/blob/main/packages/@tinacms/cli/README.md#2025-04-20_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// .tina/schema.ts\nimport { defineSchema } from \"@tinacms/cli\";\n\nexport default defineSchema({\n  collections: [\n    {\n      label: \"Blog Posts\",\n      name: \"post\",\n      path: \"content/posts\",\n      templates: [\n        {\n          label: \"Article\",\n          name: \"article\",\n          fields: [\n            {\n              type: \"text\",\n              label: \"Title\",\n              name: \"title\",\n            },\n            {\n              type: \"reference\",\n              label: \"Author\",\n              name: \"author\",\n              collection: \"authors\",\n            },\n          ],\n        },\n      ],\n    },\n    {\n      label: \"Authors\",\n      name: \"author\",\n      path: \"content/authors\",\n      templates: [\n        {\n          label: \"Author\",\n          name: \"basicAuthor\",\n          fields: [\n            {\n              type: \"text\",\n              label: \"Name\",\n              name: \"name\",\n            },\n            {\n              type: \"text\",\n              label: \"Avatar\",\n              name: \"avatar\",\n            },\n          ],\n        },\n      ],\n    },\n  ],\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring TinaCMS Database with GitHub Provider\nDESCRIPTION: Example of how to create a TinaCMS database connection using the new GitHubProvider and databaseAdapter approach. Shows both local and remote database setup with MongoDB.\nSOURCE: https://github.com/tinacms/tinacms/blob/main/packages/@tinacms/schema-tools/CHANGELOG.md#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createDatabase, createLocalDatabase } from \"@tinacms/datalayer\";\nimport { MongodbLevel } from \"mongodb-level\";\nimport { GitHubProvider } from \"tinacms-gitprovider-github\";\n\nconst isLocal = process.env.TINA_PUBLIC_IS_LOCAL === \"true\";\n\nexport default isLocal\n  ? createLocalDatabase()\n  : createDatabase({\n      gitProvider: new GitHubProvider({\n        branch: process.env.GITHUB_BRANCH,\n        owner: process.env.GITHUB_OWNER,\n        repo: process.env.GITHUB_REPO,\n        token: process.env.GITHUB_PERSONAL_ACCESS_TOKEN,\n      }),\n      databaseAdapter: new MongodbLevel<string, Record<string, any>>({\n        collectionName: \"tinacms\",\n        dbName: \"tinacms\",\n        mongoUri: process.env.MONGODB_URI,\n      }),\n      namespace: process.env.GITHUB_BRANCH,\n    });\n```\n\n----------------------------------------\n\nTITLE: Setting Up TinaCMS Backend with Authentication\nDESCRIPTION: Example showing how to implement the new TinaNodeBackend in a Next.js API route, configuring different authentication providers for local and production environments.\nSOURCE: https://github.com/tinacms/tinacms/blob/main/packages/@tinacms/schema-tools/CHANGELOG.md#2025-04-20_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  TinaNodeBackend,\n  LocalBackendAuthProvider,\n} from \"@tinacms/datalayer\";\n\nimport { TinaAuthJSOptions, AuthJsBackendAuthProvider } from \"tinacms-authjs\";\n\nimport databaseClient from \"../../../tina/__generated__/databaseClient\";\n\nconst isLocal = process.env.TINA_PUBLIC_IS_LOCAL === \"true\";\n\nconst handler = TinaNodeBackend({\n  authProvider: isLocal\n    ? LocalBackendAuthProvider()\n    : AuthJsBackendAuthProvider({\n        authOptions: TinaAuthJSOptions({\n          databaseClient: databaseClient,\n          secret: process.env.NEXTAUTH_SECRET,\n        }),\n      }),\n  databaseClient,\n});\n\nexport default (req, res) => {\n  // Modify the request here if you need to\n  return handler(req, res);\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring TinaCMS Database with GitHubProvider in TypeScript\nDESCRIPTION: This snippet demonstrates how to configure a TinaCMS database using a GitHubProvider for version control. Dependencies include `@tinacms/datalayer`, `mongodb-level`, and `tinacms-gitprovider-github`. Key parameters include GitHub repository details and MongoDB connection URI. Outputs a configured database connection based on the environment.\nSOURCE: https://github.com/tinacms/tinacms/blob/main/packages/@tinacms/mdx/CHANGELOG.md#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createDatabase, createLocalDatabase } from \"@tinacms/datalayer\";\nimport { MongodbLevel } from \"mongodb-level\";\nimport { GitHubProvider } from \"tinacms-gitprovider-github\";\n\nconst isLocal = process.env.TINA_PUBLIC_IS_LOCAL === \"true\";\n\nexport default isLocal\n  ? createLocalDatabase()\n  : createDatabase({\n      gitProvider: new GitHubProvider({\n        branch: process.env.GITHUB_BRANCH,\n        owner: process.env.GITHUB_OWNER,\n        repo: process.env.GITHUB_REPO,\n        token: process.env.GITHUB_PERSONAL_ACCESS_TOKEN,\n      }),\n      databaseAdapter: new MongodbLevel<string, Record<string, any>>({\n        collectionName: \"tinacms\",\n        dbName: \"tinacms\",\n        mongoUri: process.env.MONGODB_URI,\n      }),\n      namespace: process.env.GITHUB_BRANCH,\n    });\n```\n\n----------------------------------------\n\nTITLE: Consolidated Database Configuration in TinaCMS\nDESCRIPTION: This code snippet presents a consolidated example of configuring the TinaCMS database, including both local and remote database setups. It demonstrates using `createDatabase`, `createLocalDatabase`, and `GitHubProvider`, and `MongodbLevel`. The `isLocal` variable determines which configuration to use, enhancing flexibility.\nSOURCE: https://github.com/tinacms/tinacms/blob/main/experimental-examples/tina-cloud-starter/CHANGELOG.md#2025-04-20_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createDatabase, createLocalDatabase, GitHubProvider } from '@tinacms/datalayer';\nimport { MongodbLevel } from 'mongodb-level';\nconst isLocal = process.env.TINA_PUBLIC_IS_LOCAL === 'true';\nexport default isLocal\n  ? createLocalDatabase()\n  : createDatabase({\n        gitProvider: new GitHubProvider(...),\n        databaseAdapter: new MongodbLevel<string, Record<string, any>>(...),\n      });\n```\n\n----------------------------------------\n\nTITLE: Object Type with Fields (Group) Definition\nDESCRIPTION: Example of defining an object type with fields, which is equivalent to the previous 'group' type for creating structured objects with predefined fields.\nSOURCE: https://github.com/tinacms/tinacms/blob/main/packages/@tinacms/cli/CHANGELOG.md#2025-04-20_snippet_29\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  type: \"object\",\n  label: \"Hero\",\n  name: \"hero\",\n  fields: [{\n    label: \"Title\",\n    name: \"title\",\n    type: \"string\"\n  }]\n}\n```\n\n----------------------------------------\n\nTITLE: Consolidated TinaCMS Database Configuration Example\nDESCRIPTION: A complete example showing how to conditionally create either a local or production TinaCMS database configuration with the GitHubProvider.\nSOURCE: https://github.com/tinacms/tinacms/blob/main/packages/tinacms-gitprovider-github/CHANGELOG.md#2025-04-20_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createDatabase, createLocalDatabase, GitHubProvider } from '@tinacms/datalayer';\nimport { MongodbLevel } from 'mongodb-level';\nconst isLocal = process.env.TINA_PUBLIC_IS_LOCAL === 'true';\nexport default isLocal\n  ? createLocalDatabase()\n  : createDatabase({\n      gitProvider: new GitHubProvider(...),\n      databaseAdapter: new MongodbLevel<string, Record<string, any>>(...),\n    });\n```\n\n----------------------------------------\n\nTITLE: Configuring GitHub Git Provider with TinaCMS Database\nDESCRIPTION: Example showing how to set up the GitHub Git Provider when creating a TinaCMS database. The provider is configured with environment variables for the branch, owner, repo, and GitHub Personal Access Token.\nSOURCE: https://github.com/tinacms/tinacms/blob/main/packages/tinacms-gitprovider-github/README.md#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { GithubProvider } from 'tinacms-gitprovider-github'\n// database.{ts,js}\n//...\n\nexport default isLocal ? createLocalDatabase() ? createDatabase({\n    gitProvider: new GitHubProvider({\n        branch: process.env.GITHUB_BRANCH,\n        owner: process.env.GITHUB_OWNER,\n        repo: process.env.GITHUB_REPO,\n        token: process.env.GITHUB_PERSONAL_ACCESS_TOKEN,\n      }),,\n    // ...\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing RouteMappingPlugin for TinaAdmin (TSX)\nDESCRIPTION: This snippet shows how to create and add a RouteMappingPlugin to TinaCMS. The plugin maps document collections to their corresponding URLs, enabling 'View' links in the TinaAdmin interface.\nSOURCE: https://github.com/tinacms/tinacms/blob/main/packages/tinacms/src/admin/README.md#2025-04-20_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nconst App = ({ Component, pageProps }) => {\n  return (\n    <>\n      <TinaEditProvider\n        ...\n        editMode={\n          <TinaCMS\n            ...\n            cmsCallback={(cms) => {\n              import(\"tinacms\").then(({ RouteMappingPlugin }) => {\n                /**\n                 * 1. Define the `RouteMappingPlugin`\n                 **/\n                const RouteMapping = new RouteMappingPlugin(\n                  (collection, document) => {\n                    /**\n                     * Because the `authors` and `global` collections do not\n                     * have dedicated pages, we return `undefined`.\n                     **/\n                    if ([\"authors\", \"global\"].includes(collection.name)) {\n                      return undefined;\n                    }\n\n                    /**\n                     * While the `pages` collection does have dedicated pages,\n                     * their URLs are different than their document names.\n                     **/\n                    if ([\"pages\"].includes(collection.name)) {\n                      if (document._sys.filename === \"home\") {\n                        return `/`;\n                      }\n                      if (document._sys.filename === \"about\") {\n                        return `/about`;\n                      }\n                      return undefined;\n                    }\n                    /**\n                     * Finally, any other collections (`posts`, for example)\n                     * have URLs based on values in the `collection` and `document`.\n                     **/\n                    return `/${collection.name}/${document._sys.filename}`;\n                  }\n                );\n\n                /**\n                 * 2. Add the `RouteMappingPlugin` to the `cms`.\n                 **/\n                cms.plugins.add(RouteMapping);\n              })\n            }}\n            ...\n          >\n            ...\n          </TinaCMS>\n        }\n      >\n        ...\n      </TinaEditProvider>\n    </>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Default Item Values for TinaCMS Collections\nDESCRIPTION: Example of configuring default values for new content items in a collection. The defaultItem property can be defined as a function or object and is used when creating new content.\nSOURCE: https://github.com/tinacms/tinacms/blob/main/packages/@tinacms/schema-tools/CHANGELOG.md#2025-04-20_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\n```ts\ndefaultItem: () => {\n  const m = new Date()\n  return {\n    title: 'New Page',\n    test: 'This is a default value of the test field',\n    filename: `new-page-${\n      m.getUTCFullYear() +\n      '-' +\n      (m.getUTCMonth() + 1) +\n      '-' +\n      m.getUTCDate()\n    }`,\n  }\n},\n```\n```\n\n----------------------------------------\n\nTITLE: TinaCMS Backend Setup with TinaNodeBackend in Next.js\nDESCRIPTION: This code snippet demonstrates setting up the TinaCMS backend in a Next.js application using `TinaNodeBackend`. It incorporates authentication via `LocalBackendAuthProvider` for local development or `AuthJsBackendAuthProvider` for production. It also integrates with a database client and defines a handler function to manage requests.\nSOURCE: https://github.com/tinacms/tinacms/blob/main/experimental-examples/tina-cloud-starter/CHANGELOG.md#2025-04-20_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n    TinaNodeBackend,\n    LocalBackendAuthProvider,\n  } from \\\"@tinacms/datalayer\\\";\n\n  import { TinaAuthJSOptions, AuthJsBackendAuthProvider } from \\\"tinacms-authjs\\\";\n\n  import databaseClient from \\\"../../../tina/__generated__/databaseClient\\\";\n\n  const isLocal = process.env.TINA_PUBLIC_IS_LOCAL === \\\"true\\\";\n\n  const handler = TinaNodeBackend({\n    authProvider: isLocal\n      ? LocalBackendAuthProvider()\n      : AuthJsBackendAuthProvider({\n          authOptions: TinaAuthJSOptions({\n            databaseClient: databaseClient,\n            secret: process.env.NEXTAUTH_SECRET,\n          }),\n        }),\n    databaseClient,\n  });\n\n  export default (req, res) => {\n    // Modify the request here if you need to\n    return handler(req, res);\n  };\n```\n\n----------------------------------------\n\nTITLE: Configuring Field as Body in TinaCMS Collections\nDESCRIPTION: Shows how to define a custom field as the body of a markdown file using the isBody property, replacing the automatic _body field behavior.\nSOURCE: https://github.com/tinacms/tinacms/blob/main/packages/@tinacms/graphql/CHANGELOG.md#2025-04-20_snippet_41\n\nLANGUAGE: js\nCODE:\n```\n{\n  collections: [{\n    name: \"post\",\n    label: \"Post\",\n    path: \"content/posts\",\n    fields: [\n      {\n        name: \"title\",\n        label: \"Title\",\n        type: \"string\"\n      }\n      {\n        name: \"myBody\",\n        label: \"My Body\",\n        type: \"string\",\n        component: 'textarea',\n        isBody: true\n      }\n    ]\n  }]\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Lists with GraphQL - New Format\nDESCRIPTION: Demonstrates the new connection-based format for querying lists using edges and nodes structure, following GraphQL connection spec.\nSOURCE: https://github.com/tinacms/tinacms/blob/main/packages/@tinacms/datalayer/CHANGELOG.md#2025-04-20_snippet_15\n\nLANGUAGE: graphql\nCODE:\n```\n{\n  getPostsList {\n    edges {\n      node {\n        id\n      }\n    }\n  }\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"getPostsList\": {\n      \"edges\": [\n        {\n          \"node\": {\n            \"id\": \"content/posts/voteForPedro.md\"\n          }\n        }\n      ]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: TinaCMS Backend Implementation with Authentication Providers\nDESCRIPTION: Example configuration for hosting a TinaCMS backend in a Next.js API route, demonstrating how to use either LocalBackendAuthProvider for development or AuthJsBackendAuthProvider for production.\nSOURCE: https://github.com/tinacms/tinacms/blob/main/packages/tinacms-gitprovider-github/CHANGELOG.md#2025-04-20_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  TinaNodeBackend,\n  LocalBackendAuthProvider,\n} from \"@tinacms/datalayer\";\n\nimport { TinaAuthJSOptions, AuthJsBackendAuthProvider } from \"tinacms-authjs\";\n\nimport databaseClient from \"../../../tina/__generated__/databaseClient\";\n\nconst isLocal = process.env.TINA_PUBLIC_IS_LOCAL === \"true\";\n\nconst handler = TinaNodeBackend({\n  authProvider: isLocal\n    ? LocalBackendAuthProvider()\n    : AuthJsBackendAuthProvider({\n        authOptions: TinaAuthJSOptions({\n          databaseClient: databaseClient,\n          secret: process.env.NEXTAUTH_SECRET,\n        }),\n      }),\n  databaseClient,\n});\n\nexport default (req, res) => {\n  // Modify the request here if you need to\n  return handler(req, res);\n};\n```\n\n----------------------------------------\n\nTITLE: Using Generated Client to Fetch Collections - TypeScript\nDESCRIPTION: This code snippet demonstrates how to use the Tina client to fetch collections defined in a GraphQL query. It shows how to handle the fetched data once the query execution is complete.\nSOURCE: https://github.com/tinacms/tinacms/blob/main/packages/@tinacms/cli/GeneratedClientDocs.md#2025-04-20_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst client = ExperimentalGetTinaClient();\nconst data = await client.getCollections();\nconsole.log(data.getCollections);\n\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Git Provider in TypeScript\nDESCRIPTION: This code demonstrates how to implement a CustomGitProvider by adhering to the GitProvider interface. The example showcases two asynchronous functions, onPut and onDelete, designed for custom git operations. The implementation is primarily for users not relying on GitHub as their git provider.\nSOURCE: https://github.com/tinacms/tinacms/blob/main/packages/@tinacms/graphql/CHANGELOG.md#2025-04-20_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nclass CustomGitProvider implements GitProvider\n    async onPut(key: string, value: string)\n        // ...\n\n    async onDelete(key: string)\n        // ...\n\n\nconst gitProvider = new CustomGitProvider();\n```\n\n----------------------------------------\n\nTITLE: Remote Content Repository Configuration Example\nDESCRIPTION: Configuration example showing how to set up Tina to serve content from a separate Git repository during local development by specifying the path to the content repo root.\nSOURCE: https://github.com/tinacms/tinacms/blob/main/packages/@tinacms/schema-tools/CHANGELOG.md#2025-04-20_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\n```ts\nlocalContentPath: process.env.REMOTE_ROOT_PATH; // eg. '../../my-content-repo'\n```\n```\n\n----------------------------------------\n\nTITLE: Configuring References to Multiple Collections\nDESCRIPTION: Shows how to define a reference field that can point to multiple collections using the new collections array property instead of the old collection property.\nSOURCE: https://github.com/tinacms/tinacms/blob/main/packages/@tinacms/graphql/CHANGELOG.md#2025-04-20_snippet_43\n\nLANGUAGE: js\nCODE:\n```\n{\n  type: \"reference\",\n  label: \"Author\",\n  name: \"author\",\n  collections: [\"author\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Full Database Configuration Example for TinaCMS in TypeScript\nDESCRIPTION: This consolidated snippet presents the updated code for creating a database in TinaCMS, demonstrating the use of GitHubProvider and MongodbLevel within the context of environment variable configuration.\nSOURCE: https://github.com/tinacms/tinacms/blob/main/examples/kitchen-sink/CHANGELOG.md#2025-04-20_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createDatabase, createLocalDatabase, GitHubProvider } from '@tinacms/datalayer';\nimport { MongodbLevel } from 'mongodb-level';\nconst isLocal = process.env.TINA_PUBLIC_IS_LOCAL === 'true';\nexport default isLocal\n  ? createLocalDatabase()\n  : createDatabase({\n      gitProvider: new GitHubProvider(...),\n      databaseAdapter: new MongodbLevel<string, Record<string, any>>(...),\n    });\n```\n\n----------------------------------------\n\nTITLE: Setting up TinaCMS in Next.js App Component\nDESCRIPTION: Example of how to set up the TinaCMS context in a Next.js _app.js file, showing required and optional props including query, variables, data, isLocalClient, branch, clientId, and callback functions.\nSOURCE: https://github.com/tinacms/tinacms/blob/main/packages/tinacms/CHANGELOG.md#2025-04-20_snippet_15\n\nLANGUAGE: jsx\nCODE:\n```\n// pages/_app.js\nimport TinaCMS from \"tinacms\";\n\nconst App = ({ Component, pageProps }) => {\n  return (\n    <TinaCMS\n      // Required: The query from your `getStaticProps` request\n      query={pageProps.query}\n      // Required: The variables from your `getStaticProps` request\n      variables={pageProps.variables} // Variables used in your query\n      // Required: The data from your `getStaticProps` request\n      data={pageProps.data}\n      // Optional: Set to true when working with the local API\n      isLocalClient={true}\n      // Optional: When using TinaCloud, specify the git branch\n      branch=\"main\"\n      // Optional: Your identifier when connecting to TinaCloud\n      clientId=\"<some-id-from-tina-cloud>\"\n      // Optional: A callback for altering the CMS object if needed\n      cmsCallback={(cms) => {}}\n      // Optional: A callback for altering the form generation if needed\n      formifyCallback={(args) => {}}\n      // Optional: A callback for altering the document creator plugin\n      documentCreatorCallback={(args) => {}}\n    >\n      {(livePageProps) => <Component {...livePageProps} />}\n    </TinaCMS>\n  );\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Setting up Cloudinary API route in Next.js\nDESCRIPTION: Code for creating a catch-all API route for Cloudinary media handling in Next.js. It uses createMediaHandler from next-tinacms-cloudinary and includes authorization checks.\nSOURCE: https://github.com/tinacms/tinacms/blob/main/packages/next-tinacms-cloudinary/README.md#2025-04-20_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport {\n  mediaHandlerConfig,\n  createMediaHandler,\n} from \"next-tinacms-cloudinary/dist/handlers\";\nimport { isAuthorized } from \"@tinacms/auth\";\n\nexport const config = mediaHandlerConfig;\n\nexport default createMediaHandler({\n  cloud_name: process.env.NEXT_PUBLIC_CLOUDINARY_CLOUD_NAME,\n  api_key: process.env.NEXT_PUBLIC_CLOUDINARY_API_KEY,\n  api_secret: process.env.CLOUDINARY_API_SECRET,\n  authorized: async (req, _res) => {\n    if (process.env.NEXT_PUBLIC_USE_LOCAL_CLIENT === \"1\") {\n      return true;\n    }\n    try {\n      const user = await isAuthorized(req);\n      return user && user.verified;\n    } catch (e) {\n      console.error(e);\n      return false;\n    }\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Hosting TinaCMS Self-Hosted Backend\nDESCRIPTION: Illustrates the setup required to host the TinaCMS backend as a single function, rather than the older approach in '/tina/api/gql.ts'. This includes using `TinaNodeBackend`, `LocalBackendAuthProvider`, and `AuthJsBackendAuthProvider` for local or production scenarios. The handler function integrates authentication via environment-configured options and a shared database client, setting the stage for flexible backend hosting.\nSOURCE: https://github.com/tinacms/tinacms/blob/main/packages/@tinacms/scripts/CHANGELOG.md#2025-04-20_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  TinaNodeBackend,\n  LocalBackendAuthProvider,\n} from \"@tinacms/datalayer\";\n\nimport { TinaAuthJSOptions, AuthJsBackendAuthProvider } from \"tinacms-authjs\";\n\nimport databaseClient from \"../../../tina/__generated__/databaseClient\";\n\nconst isLocal = process.env.TINA_PUBLIC_IS_LOCAL === \"true\";\n\nconst handler = TinaNodeBackend({\n  authProvider: isLocal\n    ? LocalBackendAuthProvider()\n    : AuthJsBackendAuthProvider({\n        authOptions: TinaAuthJSOptions({\n          databaseClient: databaseClient,\n          secret: process.env.NEXTAUTH_SECRET,\n        }),\n      }),\n  databaseClient,\n});\n\nexport default (req, res) => {\n  // Modify the request here if you need to\n  return handler(req, res);\n};\n```\n\n----------------------------------------\n\nTITLE: Using Custom Text Field with Validation in TinaCMS\nDESCRIPTION: When custom validation or other logic is needed, a field can specify a custom component that extends an existing plugin. This allows adding validation logic while keeping the field definition serializable.\nSOURCE: https://github.com/tinacms/tinacms/blob/main/packages/tinacms/CHANGELOG.md#2025-04-20_snippet_23\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  type: \"string\",\n  label: \"Description\",\n  name: \"description\",\n  ui: {\n    component: \"myText\"\n  }\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport { TextFieldPlugin } from \"tinacms\";\n\n// ...\n\ncms.fields.add({\n  ...TextFieldPlugin, // spread existing text plugin\n  name: \"myText\",\n  validate: (value) => {\n    someValidationLogic(value);\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Defining String Field Type in TinaCMS\nDESCRIPTION: Basic type definition for a string field in TinaCMS. The 'type' property now represents the lowest form of the shape the field can represent.\nSOURCE: https://github.com/tinacms/tinacms/blob/main/packages/tinacms/CHANGELOG.md#2025-04-20_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  type: \"string\",\n  label: \"Description\",\n  name: \"description\",\n}\n```\n\n----------------------------------------\n\nTITLE: TinaCMS Authentication Provider Migration\nDESCRIPTION: Models how to transition from a legacy authentication system using auth functions to a new architecture employing `authProvider` classes. Examples include creating a custom provider by subclassing `AbstractAuthProvider` and updating the configuration to utilize these new classes. Emphasizes encapsulating login/logout and similar authentication functionalities within dedicated provider classes.\nSOURCE: https://github.com/tinacms/tinacms/blob/main/packages/@tinacms/scripts/CHANGELOG.md#2025-04-20_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\ndefineConfig({\n  admin: {\n    auth: {\n      login() {},\n      logout() {},\n      //...\n    },\n  },\n  //...\n});\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport { AbstractAuthProvider } from \"tinacms\";\nclass CustomAuthProvider extends AbstractAuthProvider {\n  login() {}\n  logout() {}\n  //...\n}\ndefineConfig({\n  authProvider: new CustomAuthProvider(),\n  //...\n});\n```\n\n----------------------------------------\n\nTITLE: New _template Field Format for Polymorphic Objects\nDESCRIPTION: Example of the new format for polymorphic objects using the '_template' field identifier instead of 'template'.\nSOURCE: https://github.com/tinacms/tinacms/blob/main/packages/@tinacms/cli/CHANGELOG.md#2025-04-20_snippet_41\n\nLANGUAGE: md\nCODE:\n```\n---\n---\n\nmyBlocks:\n\n- \\_template: hero\n  title: Hello\n\n---\n```\n\n----------------------------------------\n\nTITLE: Importing Tina Client for Custom GQL Queries - TypeScript\nDESCRIPTION: This snippet illustrates importing the Tina client again when writing custom GraphQL queries, ensuring the client utilizes the types defined by the user’s GraphQL schemas for better type safety and experience.\nSOURCE: https://github.com/tinacms/tinacms/blob/main/packages/@tinacms/cli/GeneratedClientDocs.md#2025-04-20_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ExperimentalGetTinaClient } from \"../path/to/tinaFolder/.tina/__generated__/types\";\n\n```\n\n----------------------------------------\n\nTITLE: Configuring TinaCMS with API URL in React Component\nDESCRIPTION: Example showing how to configure TinaCMS with an API URL in a Next.js _app.tsx file. This approach replaces the deprecated branch, clientId, and isLocalClient props with a single apiURL prop.\nSOURCE: https://github.com/tinacms/tinacms/blob/main/packages/tinacms/CHANGELOG.md#2025-04-20_snippet_12\n\nLANGUAGE: jsx\nCODE:\n```\n// _app.tsx\n// ...\n<TinaCMS apiURL={process.env.NEXT_PUBLIC_TINA_API_URL} {...pageProps}>\n  {(livePageProps) => <Component {...livePageProps} />}\n</TinaCMS>\n```\n\n----------------------------------------\n\nTITLE: Dynamically Loading TinaCMS with Next.js\nDESCRIPTION: Example of dynamically loading TinaCMS in a Next.js application using Next.js dynamic imports and the TinaEditProvider to conditionally render the CMS interface.\nSOURCE: https://github.com/tinacms/tinacms/blob/main/packages/tinacms/CHANGELOG.md#2025-04-20_snippet_16\n\nLANGUAGE: jsx\nCODE:\n```\n// pages/_app.js\nimport dynamic from 'next/dynamic'\nimport { TinaEditProvider } from 'tinacms/dist/edit-state'\nconst TinaCMS = dynamic(() => import('tinacms'), { ssr: false })\n\nconst App({ Component, pageProps }) {\n  return (\n    <>\n      <TinaEditProvider\n        editMode={\n          <TinaCMS {...pageProps}>\n            {livePageProps => <Component {...livePageProps} />}\n          </TinaCMS>\n        }\n      >\n        <Component {...pageProps} />\n      </TinaEditProvider>\n    </>\n  )\n}\n\nexport default App\n```\n\n----------------------------------------\n\nTITLE: Consolidated TinaCMS Database Configuration in TypeScript\nDESCRIPTION: An example of importing and setting up both the GitHubProvider and MongodbLevel for TinaCMS, allowing the app to switch between local and remote database options. This setup is essential for environments where seamless transition between local and remote development is needed.\nSOURCE: https://github.com/tinacms/tinacms/blob/main/packages/@tinacms/mdx/CHANGELOG.md#2025-04-20_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createDatabase, createLocalDatabase, GitHubProvider } from '@tinacms/datalayer';\nimport { MongodbLevel } from 'mongodb-level';\nconst isLocal = process.env.TINA_PUBLIC_IS_LOCAL === 'true';\nexport default isLocal\n  ? createLocalDatabase()\n  : createDatabase({\n      gitProvider: new GitHubProvider(...),\n      databaseAdapter: new MongodbLevel<string, Record<string, any>>(...),\n    });\n```\n\n----------------------------------------\n\nTITLE: Backend Migration: TinaNodeBackend Example\nDESCRIPTION: This snippet shows how to migrate the TinaCMS backend to use `TinaNodeBackend` and either `LocalBackendAuthProvider` or `AuthJsBackendAuthProvider`. It includes importing necessary modules and setting up the handler function to be exported.\nSOURCE: https://github.com/tinacms/tinacms/blob/main/packages/@tinacms/cli/CHANGELOG.md#2025-04-20_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  TinaNodeBackend,\n  LocalBackendAuthProvider,\n} from \"@tinacms/datalayer\";\n\nimport { TinaAuthJSOptions, AuthJsBackendAuthProvider } from \"tinacms-authjs\";\n\nimport databaseClient from \"../../../tina/__generated__/databaseClient\";\n\nconst isLocal = process.env.TINA_PUBLIC_IS_LOCAL === \"true\";\n\nconst handler = TinaNodeBackend({\n  authProvider: isLocal\n    ? LocalBackendAuthProvider()\n    : AuthJsBackendAuthProvider({\n        authOptions: TinaAuthJSOptions({\n          databaseClient: databaseClient,\n          secret: process.env.NEXTAUTH_SECRET,\n        }),\n      }),\n  databaseClient,\n});\n\nexport default (req, res) => {\n  // Modify the request here if you need to\n  return handler(req, res);\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Git Provider\nDESCRIPTION: Example of implementing a custom GitProvider interface for use with a non-GitHub git provider in the TinaCMS database configuration.\nSOURCE: https://github.com/tinacms/tinacms/blob/main/packages/tinacms-authjs/CHANGELOG.md#2025-04-20_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nclass CustomGitProvider implements GitProvider\n    async onPut(key: string, value: string)\n        // ...\n\n    async onDelete(key: string)\n        // ...\n\n\nconst gitProvider = new CustomGitProvider();\n```\n\n----------------------------------------\n\nTITLE: Implementing Visual Editing with String Encoding in React\nDESCRIPTION: This code demonstrates how to use the useVisualEditing hook from @tinacms/vercel-previews to enable visual editing with automatic string encoding. It shows configuration options including query, variables, redirect URL, and string encoding settings.\nSOURCE: https://github.com/tinacms/tinacms/blob/main/packages/@tinacms/vercel-previews/README.md#2025-04-20_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n// pages/[slug].tsx\nimport { useTina } from 'tinacms/dist/react'\nimport { useVisualEditing } from '@tinacms/vercel-previews'\n\nexport const Post = (props) => {\n  const { data: tinaData } = useTina(props)\n  const data = useVisualEditing({\n    data: tinaData,\n    // metadata is derived from the query and variables\n    query: props.query,\n    variables: props.variables,\n    // When clicking on an editable element for the first time, redirect to the TinaCMS app\n    redirect: '/admin',\n    // Only enable visual editing on preview deploys\n    enabled: props.visualEditingEnabled\n    // stringEncoding automatically adds metadata to strings\n    stringEncoding: true,\n    // Alternatively, you can skip some strings from being encoded\n    stringEncoding: {\n      skipPaths: (path) => {\n        if ('page.blocks.0.image' === path) {\n          return true\n        }\n\n        return false\n      }\n    }\n  })\n\n  return (\n    <div>\n      <h1>\n        {data.title}\n      </h1>\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Schema Configuration in TinaCMS\nDESCRIPTION: This snippet demonstrates how to update the schema configuration in TinaCMS to include client information and enable local development. It details necessary additions to the schema for defining the client ID and token, which are essential for interacting with the TinaCMS API.\nSOURCE: https://github.com/tinacms/tinacms/blob/main/packages/@tinacms/graphql/CHANGELOG.md#2025-04-20_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n// .tina/schema.ts\n\nimport { client } from \"./__generated__/client\";\n\n// ...\n\nconst schema = defineSchema({\n+    config: {\n+        branch: \"main\",\n+        clientId: \"***\",\n+        token: \"***\",\n    },\n    collections: [\n        // ...\n    ]\n})\n\n// ...\n- const branch = process.env.NEXT_PUBLIC_VERCEL_GIT_COMMIT_REF\n- const clientId = 'YOUR-CLIENT-ID-HERE'\n- const apiURL =\n-   process.env.NODE_ENV == 'development'\n-     ? 'http://localhost:4001/graphql'\n-    : `https://content.tinajs.io/content/${clientId}/github/${branch}`\nexport const tinaConfig = defineConfig({\n+  client,\n-  apiURl,\n    schema,\n    // ...\n})\n\nexport default schema\n```\n\n----------------------------------------\n\nTITLE: Database Configuration: Local Database\nDESCRIPTION: This snippet shows the implementation of a local database using the `createLocalDatabase` function. It imports the function and calls it with a port number, setting up a local development database.\nSOURCE: https://github.com/tinacms/tinacms/blob/main/examples/tina-self-hosted-demo/CHANGELOG.md#2025-04-20_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createLocalDatabase } from \\\"@tinacms/datalayer\\\";\n  createLocalDatabase(port);\n```\n\n----------------------------------------\n\nTITLE: Database Initialization with GitProvider and DatabaseAdapter in TinaCMS\nDESCRIPTION: This code snippet demonstrates how to initialize the TinaCMS database with a GitProvider (specifically GitHubProvider) and a DatabaseAdapter (MongodbLevel).  It shows how to conditionally create a local or remote database based on the TINA_PUBLIC_IS_LOCAL environment variable. The GitHubProvider is used to handle git-based operations, while the DatabaseAdapter manages the database connection.\nSOURCE: https://github.com/tinacms/tinacms/blob/main/experimental-examples/tina-cloud-starter/CHANGELOG.md#2025-04-20_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createDatabase, createLocalDatabase } from \\\"@tinacms/datalayer\\\";\nimport { MongodbLevel } from \\\"mongodb-level\\\";\nimport { GitHubProvider } from \\\"tinacms-gitprovider-github\\\";\n\nconst isLocal = process.env.TINA_PUBLIC_IS_LOCAL === \\\"true\\\";\n\nexport default isLocal\n  ? createLocalDatabase()\n  : createDatabase({\n      gitProvider: new GitHubProvider({\n        branch: process.env.GITHUB_BRANCH,\n        owner: process.env.GITHUB_OWNER,\n        repo: process.env.GITHUB_REPO,\n        token: process.env.GITHUB_PERSONAL_ACCESS_TOKEN,\n      }),\n      databaseAdapter: new MongodbLevel<string, Record<string, any>>({\n        collectionName: \\\"tinacms\\\",\n        dbName: \\\"tinacms\\\",\n        mongoUri: process.env.MONGODB_URI,\n      }),\n      namespace: process.env.GITHUB_BRANCH,\n    });\n```\n\n----------------------------------------\n\nTITLE: Implementing TinaCMS Backend Routes\nDESCRIPTION: Configuration for setting up TinaCMS backend routes with authentication provider support for both local and production environments.\nSOURCE: https://github.com/tinacms/tinacms/blob/main/packages/@tinacms/auth/CHANGELOG.md#2025-04-20_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  TinaNodeBackend,\n  LocalBackendAuthProvider,\n} from \"@tinacms/datalayer\";\n\nimport { TinaAuthJSOptions, AuthJsBackendAuthProvider } from \"tinacms-authjs\";\n\nimport databaseClient from \"../../../tina/__generated__/databaseClient\";\n\nconst isLocal = process.env.TINA_PUBLIC_IS_LOCAL === \"true\";\n\nconst handler = TinaNodeBackend({\n  authProvider: isLocal\n    ? LocalBackendAuthProvider()\n    : AuthJsBackendAuthProvider({\n        authOptions: TinaAuthJSOptions({\n          databaseClient: databaseClient,\n          secret: process.env.NEXTAUTH_SECRET,\n        }),\n      }),\n  databaseClient,\n});\n\nexport default (req, res) => {\n  // Modify the request here if you need to\n  return handler(req, res);\n};\n```\n\n----------------------------------------\n\nTITLE: Installing TinaCMS Starter Project using NPX\nDESCRIPTION: Command to create a new TinaCMS starter project locally using npx. This allows developers to quickly set up a TinaCMS environment for testing and development.\nSOURCE: https://github.com/tinacms/tinacms/blob/main/packages/tinacms/README.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx create-tina-app@latest\n```\n\n----------------------------------------\n\nTITLE: TinaCMS Self-hosted Database Configuration with GitHub Provider\nDESCRIPTION: Example configuration for setting up a TinaCMS database with the GitHubProvider, showing how to create either a local database for development or a production database with GitHub integration.\nSOURCE: https://github.com/tinacms/tinacms/blob/main/packages/tinacms-gitprovider-github/CHANGELOG.md#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createDatabase, createLocalDatabase } from \"@tinacms/datalayer\";\nimport { MongodbLevel } from \"mongodb-level\";\nimport { GitHubProvider } from \"tinacms-gitprovider-github\";\n\nconst isLocal = process.env.TINA_PUBLIC_IS_LOCAL === \"true\";\n\nexport default isLocal\n  ? createLocalDatabase()\n  : createDatabase({\n      gitProvider: new GitHubProvider({\n        branch: process.env.GITHUB_BRANCH,\n        owner: process.env.GITHUB_OWNER,\n        repo: process.env.GITHUB_REPO,\n        token: process.env.GITHUB_PERSONAL_ACCESS_TOKEN,\n      }),\n      databaseAdapter: new MongodbLevel<string, Record<string, any>>({\n        collectionName: \"tinacms\",\n        dbName: \"tinacms\",\n        mongoUri: process.env.MONGODB_URI,\n      }),\n      namespace: process.env.GITHUB_BRANCH,\n    });\n```\n\n----------------------------------------\n\nTITLE: Custom Git Provider with GitProvider Interface in TypeScript\nDESCRIPTION: This snippet defines a custom Git provider by implementing the GitProvider interface. This is useful for using different git providers other than GitHub. No specific dependencies are required other than the interface definition.\nSOURCE: https://github.com/tinacms/tinacms/blob/main/packages/@tinacms/mdx/CHANGELOG.md#2025-04-20_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nclass CustomGitProvider implements GitProvider\n    async onPut(key: string, value: string)\n        // ...\n\n    async onDelete(key: string)\n        // ...\n\nconst gitProvider = new CustomGitProvider();\n```\n\n----------------------------------------\n\nTITLE: Defining Collections with Fields Instead of Templates in TinaCMS\nDESCRIPTION: Collections can now use 'fields' directly instead of 'templates' for a more straightforward schema definition. This simplifies document structure by removing the need for a '_template' field.\nSOURCE: https://github.com/tinacms/tinacms/blob/main/packages/tinacms/CHANGELOG.md#2025-04-20_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  collections: [\n    {\n      name: \"post\",\n      label: \"Post\",\n      path: \"content/posts\",\n      fields: [\n        {\n          name: \"title\",\n          label: \"Title\",\n          type: \"string\", // read on below to learn more about _type_ changes\n        },\n      ],\n      // defining `fields` and `templates` would result in a compilation error\n    },\n  ];\n}\n```\n\n----------------------------------------\n\nTITLE: Defining TinaCloud User Interface\nDESCRIPTION: This snippet defines a TypeScript interface for the `TinaCloudUser`. It describes the structure of a user object expected from the TinaCloud service, including properties like id, email, verification status, role, and full name.\nSOURCE: https://github.com/tinacms/tinacms/blob/main/packages/@tinacms/auth/readme.md#2025-04-20_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ninterface TinaCloudUser {\\n  id: string\\n  email: string\\n  verified: boolean\\n  role: 'admin' | 'user'\\n  enabled: boolean\\n  fullName: string\\n}\n```\n\n----------------------------------------\n\nTITLE: Updating TinaCMS Schema Configuration in TypeScript\nDESCRIPTION: This snippet shows the changes required in the schema.ts file to configure the clientId, branch, and read-only token instead of using an ApiURL. It also demonstrates how to import and use the new generated client.\nSOURCE: https://github.com/tinacms/tinacms/blob/main/packages/@tinacms/cli/CHANGELOG.md#2025-04-20_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\n// .tina/schema.ts\n\n+ import { client } from \"./__generated__/client\";\n\n// ...\n\nconst schema = defineSchema({\n+    config: {\n+        branch: \"main\",\n+        clientId: \"***\",\n+        token: \"***\",\n      },\n      collections: [\n          // ...\n      ]\n  })\n\n// ...\n- const branch = process.env.NEXT_PUBLIC_VERCEL_GIT_COMMIT_REF\n- const clientId = 'YOUR-CLIENT-ID-HERE'\n- const apiURL =\n-   process.env.NODE_ENV == 'development'\n-     ? 'http://localhost:4001/graphql'\n-    : `https://content.tinajs.io/content/${clientId}/github/${branch}`\nexport const tinaConfig = defineConfig({\n+  client,\n-  apiURl,\n    schema,\n    // ...\n})\n\nexport default schema\n```\n\n----------------------------------------\n\nTITLE: Hosting TinaCMS Backend with TinaNodeBackend in TypeScript\nDESCRIPTION: Provide a self-hosted setup for TinaCMS backend using TinaNodeBackend. Supports local and AuthJS-based configurations, depending on the environment. Utilizes `@tinacms/datalayer` and `tinacms-authjs` for backend setup and authentication.\nSOURCE: https://github.com/tinacms/tinacms/blob/main/packages/@tinacms/mdx/CHANGELOG.md#2025-04-20_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  TinaNodeBackend,\n  LocalBackendAuthProvider,\n} from \"@tinacms/datalayer\";\n\nimport { TinaAuthJSOptions, AuthJsBackendAuthProvider } from \"tinacms-authjs\";\n\nimport databaseClient from \"../../../tina/__generated__/databaseClient\";\n\nconst isLocal = process.env.TINA_PUBLIC_IS_LOCAL === \"true\";\n\nconst handler = TinaNodeBackend({\n  authProvider: isLocal\n    ? LocalBackendAuthProvider()\n    : AuthJsBackendAuthProvider({\n        authOptions: TinaAuthJSOptions({\n          databaseClient: databaseClient,\n          secret: process.env.NEXTAUTH_SECRET,\n        }),\n      }),\n  databaseClient,\n});\n\nexport default (req, res) => {\n  // Modify the request here if you need to\n  return handler(req, res);\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing GitHubProvider for Git Integration\nDESCRIPTION: Example showing how to initialize the new GitHubProvider class that replaces the onPut and onDelete functions in the database configuration.\nSOURCE: https://github.com/tinacms/tinacms/blob/main/packages/tinacms-clerk/CHANGELOG.md#2025-04-20_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst gitProvider = new GitHubProvider({\n  branch: process.env.GITHUB_BRANCH,\n  owner: process.env.GITHUB_OWNER,\n  repo: process.env.GITHUB_REPO,\n  token: process.env.GITHUB_PERSONAL_ACCESS_TOKEN,\n});\n```\n\n----------------------------------------\n\nTITLE: GitHubProvider Implementation in TypeScript\nDESCRIPTION: This TypeScript snippet shows how to implement the GitHubProvider, which replaces traditional onPut/onDelete methods in the TinaCMS database configuration. The class requires parameters like branch, owner, repo, and token for authentication.\nSOURCE: https://github.com/tinacms/tinacms/blob/main/packages/@tinacms/mdx/CHANGELOG.md#2025-04-20_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst gitProvider = new GitHubProvider({\n  branch: process.env.GITHUB_BRANCH,\n  owner: process.env.GITHUB_OWNER,\n  repo: process.env.GITHUB_REPO,\n  token: process.env.GITHUB_PERSONAL_ACCESS_TOKEN,\n});\n```\n\n----------------------------------------\n\nTITLE: Setting up Cloudinary environment variables\nDESCRIPTION: Environment variables required for Cloudinary integration, to be added to a .env file.\nSOURCE: https://github.com/tinacms/tinacms/blob/main/packages/next-tinacms-cloudinary/README.md#2025-04-20_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nNEXT_PUBLIC_CLOUDINARY_CLOUD_NAME=<Your Cloudinary Cloud Name>\nNEXT_PUBLIC_CLOUDINARY_API_KEY=<Your Cloudinary API key>\nCLOUDINARY_API_SECRET=<Your Cloudinary API secret>\n```\n\n----------------------------------------\n\nTITLE: Registering Custom Field Components with TinaCMS\nDESCRIPTION: Custom field components must be registered with the CMS instance to be used in the schema definition. This is done using the 'fields.add' method.\nSOURCE: https://github.com/tinacms/tinacms/blob/main/packages/tinacms/CHANGELOG.md#2025-04-20_snippet_22\n\nLANGUAGE: javascript\nCODE:\n```\ncms.fields.add({\n  name: \"myMapField\",\n  Component: MapPicker,\n});\n```\n\n----------------------------------------\n\nTITLE: Authentication Migration: New API\nDESCRIPTION: This snippet illustrates the new API structure for defining authentication using `authProvider` and `AbstractAuthProvider`. It shows how to create a custom auth provider by extending `AbstractAuthProvider` and implementing `login` and `logout` methods.\nSOURCE: https://github.com/tinacms/tinacms/blob/main/packages/@tinacms/cli/CHANGELOG.md#2025-04-20_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport { AbstractAuthProvider } from \"tinacms\";\nclass CustomAuthProvider extends AbstractAuthProvider {\n  login() {}\n  logout() {}\n  //...\n}\ndefineConfig({\n  authProvider: new CustomAuthProvider(),\n  //...\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Updated TinaCMS Database Configuration\nDESCRIPTION: Example of updated database.ts configuration that uses the new GitHubProvider and databaseAdapter pattern, with conditional local database creation based on environment variables.\nSOURCE: https://github.com/tinacms/tinacms/blob/main/packages/tinacms-authjs/CHANGELOG.md#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createDatabase, createLocalDatabase } from \"@tinacms/datalayer\";\nimport { MongodbLevel } from \"mongodb-level\";\nimport { GitHubProvider } from \"tinacms-gitprovider-github\";\n\nconst isLocal = process.env.TINA_PUBLIC_IS_LOCAL === \"true\";\n\nexport default isLocal\n  ? createLocalDatabase()\n  : createDatabase({\n      gitProvider: new GitHubProvider({\n        branch: process.env.GITHUB_BRANCH,\n        owner: process.env.GITHUB_OWNER,\n        repo: process.env.GITHUB_REPO,\n        token: process.env.GITHUB_PERSONAL_ACCESS_TOKEN,\n      }),\n      databaseAdapter: new MongodbLevel<string, Record<string, any>>({\n        collectionName: \"tinacms\",\n        dbName: \"tinacms\",\n        mongoUri: process.env.MONGODB_URI,\n      }),\n      namespace: process.env.GITHUB_BRANCH,\n    });\n```\n\n----------------------------------------\n\nTITLE: Template Field Changes in Polymorphic Objects\nDESCRIPTION: Shows the change from template to _template in polymorphic objects configuration.\nSOURCE: https://github.com/tinacms/tinacms/blob/main/packages/@tinacms/datalayer/CHANGELOG.md#2025-04-20_snippet_18\n\nLANGUAGE: md\nCODE:\n```\n---\n---\n\nmyBlocks:\n\n- template: hero\n  title: Hello\n\n---\n```\n\nLANGUAGE: md\nCODE:\n```\n---\n---\n\nmyBlocks:\n\n- _template: hero\n  title: Hello\n\n---\n```\n\n----------------------------------------\n\nTITLE: Defensive Coding for Optional Fields in React Components\nDESCRIPTION: Using optional chaining to handle potentially undefined properties in data from TinaCMS. This is important as fields may be optional, not included in the query, or in an intermediate state during editing.\nSOURCE: https://github.com/tinacms/tinacms/blob/main/packages/tinacms/CHANGELOG.md#2025-04-20_snippet_24\n\nLANGUAGE: tsx\nCODE:\n```\nconst MyPage = (props) => {\n  return (\n    <>\n      <h2>{props.getPostDocument.data.title}</h2>\n      <MyCategoryComponent>\n        {props.getPostDocument.data?.category}\n      </MyCategoryComponent>\n    </>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Querying References with GraphQL\nDESCRIPTION: Example of how to query a reference field that can point to multiple collections, using GraphQL fragments to handle different possible types.\nSOURCE: https://github.com/tinacms/tinacms/blob/main/packages/@tinacms/graphql/CHANGELOG.md#2025-04-20_snippet_44\n\nLANGUAGE: graphql\nCODE:\n```\n{\n  getPostDocument(relativePath: \"hello.md\") {\n    data {\n      title\n      author {\n        ...on Author_Document {\n          name\n        }\n        ...on Post_Document {\n          title\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Collections with Fields in TinaCMS\nDESCRIPTION: Example of using the new 'fields' property instead of 'templates' in collection definitions, which results in a more straightforward schema definition and simplifies GraphQL queries.\nSOURCE: https://github.com/tinacms/tinacms/blob/main/packages/@tinacms/graphql/CHANGELOG.md#2025-04-20_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  collections: [\n    {\n      name: \"post\",\n      label: \"Post\",\n      path: \"content/posts\",\n      fields: [\n        {\n          name: \"title\",\n          label: \"Title\",\n          type: \"string\", // read on below to learn more about _type_ changes\n        },\n      ],\n      // defining `fields` and `templates` would result in a compilation error\n    },\n  ];\n}\n```\n\n----------------------------------------\n\nTITLE: Hosting TinaCMS Backend with New Function Structure in TypeScript\nDESCRIPTION: This snippet illustrates how to host the TinaCMS backend using TinaNodeBackend, including authentication handling with LocalBackendAuthProvider or AuthJsBackendAuthProvider based on environment variables.\nSOURCE: https://github.com/tinacms/tinacms/blob/main/examples/kitchen-sink/CHANGELOG.md#2025-04-20_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  TinaNodeBackend,\n  LocalBackendAuthProvider,\n} from \"@tinacms/datalayer\";\n\nimport { TinaAuthJSOptions, AuthJsBackendAuthProvider } from \"tinacms-authjs\";\n\nimport databaseClient from \"../../../tina/__generated__/databaseClient\";\n\nconst isLocal = process.env.TINA_PUBLIC_IS_LOCAL === \"true\";\n\nconst handler = TinaNodeBackend({\n  authProvider: isLocal\n    ? LocalBackendAuthProvider()\n    : AuthJsBackendAuthProvider({\n        authOptions: TinaAuthJSOptions({\n          databaseClient: databaseClient,\n          secret: process.env.NEXTAUTH_SECRET,\n        }),\n      }),\n  databaseClient,\n});\n\nexport default (req, res) => {\n  // Modify the request here if you need to\n  return handler(req, res);\n};\n```\n\n----------------------------------------\n\nTITLE: Login Callback Configuration in TinaCMS\nDESCRIPTION: Example of adding an onLogin callback function to the TinaCMS admin configuration. This function is called when a user successfully logs in to the CMS.\nSOURCE: https://github.com/tinacms/tinacms/blob/main/packages/@tinacms/schema-tools/CHANGELOG.md#2025-04-20_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\n```ts\nimport { defineConfig } from \"tinacms\";\n\nexport default defineConfig({\n  admin: {\n    auth: {\n      onLogin: () => {\n        console.log(\"On Log in!\");\n      },\n    },\n  },\n  /// ...\n});\n```\n```\n\n----------------------------------------\n\nTITLE: Starting Local Development Server\nDESCRIPTION: Command to run the local development server which starts both the GraphQL server and Next.js application in development mode.\nSOURCE: https://github.com/tinacms/tinacms/blob/main/experimental-examples/tina-cloud-starter/content/pages/about.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn dev\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables\nDESCRIPTION: Example environment variable configuration for connecting to TinaCMS hosted content API\nSOURCE: https://github.com/tinacms/tinacms/blob/main/experimental-examples/tina-cloud-starter/README.md#2025-04-20_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nNEXT_PUBLIC_TINA_CLIENT_ID=<get this from the project you create at app.tina.io>\nTINA_TOKEN=<get this from the project you create at app.tina.io>\nNEXT_PUBLIC_TINA_BRANCH=<Specify the branch with Tina configured>\n```\n\n----------------------------------------\n\nTITLE: Updating Schema Configuration in TypeScript for TinaCMS\nDESCRIPTION: This snippet shows the changes required in the schema.ts file to configure the new client, including adding clientId, branch, and read-only token. It also demonstrates the removal of the old apiURL configuration.\nSOURCE: https://github.com/tinacms/tinacms/blob/main/packages/@tinacms/schema-tools/CHANGELOG.md#2025-04-20_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\n+ import { client } from \"./__generated__/client\";\n\n// ...\n\nconst schema = defineSchema({\n+    config: {\n+        branch: \"main\",\n+        clientId: \"***\",\n+        token: \"***\",\n      },\n      collections: [\n          // ...\n      ]\n  })\n\n// ...\n- const branch = process.env.NEXT_PUBLIC_VERCEL_GIT_COMMIT_REF\n- const clientId = 'YOUR-CLIENT-ID-HERE'\n- const apiURL =\n-   process.env.NODE_ENV == 'development'\n-     ? 'http://localhost:4001/graphql'\n-    : `https://content.tinajs.io/content/${clientId}/github/${branch}`\nexport const tinaConfig = defineConfig({\n+  client,\n-  apiURl,\n    schema,\n    // ...\n})\n\nexport default schema\n```\n\n----------------------------------------\n\nTITLE: Database Configuration: GitHub Provider\nDESCRIPTION: This code demonstrates the usage of `GitHubProvider` to replace the `onPut` and `onDelete` configurations. It initializes the `GitHubProvider` with the necessary environment variables for authentication and repository details.\nSOURCE: https://github.com/tinacms/tinacms/blob/main/examples/tina-self-hosted-demo/CHANGELOG.md#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst gitProvider = new GitHubProvider({\n    branch: process.env.GITHUB_BRANCH,\n    owner: process.env.GITHUB_OWNER,\n    repo: process.env.GITHUB_REPO,\n    token: process.env.GITHUB_PERSONAL_ACCESS_TOKEN,\n  });\n```\n\n----------------------------------------\n\nTITLE: Registering Azure Media Store with TinaCMS\nDESCRIPTION: Configuration to register the Azure Media store with TinaCMS instance, typically done in the tina/config.ts file of a Next.js project.\nSOURCE: https://github.com/tinacms/tinacms/blob/main/packages/next-tinacms-azure/README.md#2025-04-20_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { defineConfig } from \"tinacms\";\n\nexport default defineConfig({\n  media: {\n    loadCustomStore: async () => {\n      const pack = await import(\"next-tinacms-azure\");\n      return pack.TinaCloudAzureMediaStore;\n    },\n  },\n  // other configuration options\n});\n\n...\n```\n\n----------------------------------------\n\nTITLE: Configuring local content path in TinaCMS\nDESCRIPTION: This code snippet shows how to configure the `localContentPath` in TinaCMS to point to a remote content repository during local development.  It uses the `process.env.REMOTE_ROOT_PATH` environment variable to specify the path relative to the `.tina/config` file. This allows the CMS to access content from a separate Git repository during local development.\nSOURCE: https://github.com/tinacms/tinacms/blob/main/packages/@tinacms/app/CHANGELOG.md#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n\"localContentPath: process.env.REMOTE_ROOT_PATH; // eg. '../../my-content-repo'\"\n```\n\n----------------------------------------\n\nTITLE: Querying Lists with New GraphQL API Pattern\nDESCRIPTION: Demonstrates the new pattern for querying lists using the edges/nodes structure following the GraphQL connection spec, which enables pagination and additional metadata.\nSOURCE: https://github.com/tinacms/tinacms/blob/main/packages/@tinacms/graphql/CHANGELOG.md#2025-04-20_snippet_39\n\nLANGUAGE: graphql\nCODE:\n```\n{\n  getPostsList {\n    edges {\n      node {\n        id\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Tina Client for Static Props - TypeScript\nDESCRIPTION: This snippet demonstrates how to import the experimental Tina client in a TypeScript file, allowing you to fetch content in a 'getStaticProps' function. The client is sourced from a generated folder and provides access to GraphQL APIs.\nSOURCE: https://github.com/tinacms/tinacms/blob/main/packages/@tinacms/cli/GeneratedClientDocs.md#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ExperimentalGetTinaClient } from \"../path/to/tinaFolder/.tina/__generated__/types\";\n\n```\n\n----------------------------------------\n\nTITLE: Defining Tina Config with Build Configuration\nDESCRIPTION: This code shows how to create a `.tina/config.ts` file with a default export of the define config and build configurations, which allow someone to use tina without having react as a dependency.\nSOURCE: https://github.com/tinacms/tinacms/blob/main/packages/@tinacms/app/CHANGELOG.md#2025-04-20_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// .tina/config.ts\nimport schema from \"./schema\";\n\nexport default defineConfig({\n  schema: schema,\n  //.. Everything from define config in `schema.ts`\n  //.. Everything from `schema.config`\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing TinaCMS Backend with Authentication Providers\nDESCRIPTION: Setup for the consolidated TinaCMS backend API route that handles both local development and production authentication using the new TinaNodeBackend with appropriate auth providers.\nSOURCE: https://github.com/tinacms/tinacms/blob/main/packages/tinacms-authjs/CHANGELOG.md#2025-04-20_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  TinaNodeBackend,\n  LocalBackendAuthProvider,\n} from \"@tinacms/datalayer\";\n\nimport { TinaAuthJSOptions, AuthJsBackendAuthProvider } from \"tinacms-authjs\";\n\nimport databaseClient from \"../../../tina/__generated__/databaseClient\";\n\nconst isLocal = process.env.TINA_PUBLIC_IS_LOCAL === \"true\";\n\nconst handler = TinaNodeBackend({\n  authProvider: isLocal\n    ? LocalBackendAuthProvider()\n    : AuthJsBackendAuthProvider({\n        authOptions: TinaAuthJSOptions({\n          databaseClient: databaseClient,\n          secret: process.env.NEXTAUTH_SECRET,\n        }),\n      }),\n  databaseClient,\n});\n\nexport default (req, res) => {\n  // Modify the request here if you need to\n  return handler(req, res);\n};\n```\n\n----------------------------------------\n\nTITLE: Customizing Filename Generation in TinaCMS\nDESCRIPTION: Configuration for customizing filename generation in TinaCMS collections. This example shows how to provide a custom slugify function or disable filename editing through the UI configuration.\nSOURCE: https://github.com/tinacms/tinacms/blob/main/packages/@tinacms/schema-tools/CHANGELOG.md#2025-04-20_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\n```ts\nname: 'posts',\npath: 'content/posts',\nui: {\n     filename: {\n        slugify: (values) => mySlugifyFunc(values),\n        disabled: true\n        // other field props like `label`, `component`, `parse` can still be used too\n      }\n},\n```\n```\n\n----------------------------------------\n\nTITLE: Configuring Body Field in Collections\nDESCRIPTION: Shows how to configure a custom body field using the isBody property in collection configuration.\nSOURCE: https://github.com/tinacms/tinacms/blob/main/packages/@tinacms/datalayer/CHANGELOG.md#2025-04-20_snippet_16\n\nLANGUAGE: js\nCODE:\n```\n{\n  collections: [{\n    name: \"post\",\n    label: \"Post\",\n    path: \"content/posts\",\n    fields: [\n      {\n        name: \"title\",\n        label: \"Title\",\n        type: \"string\"\n      }\n      {\n        name: \"myBody\",\n        label: \"My Body\",\n        type: \"string\",\n        component: 'textarea',\n        isBody: true\n      }\n    ]\n  }]\n}\n```\n\nLANGUAGE: md\nCODE:\n```\n---\ntitle: Hello, World!\n---\n\nThis is the body of the file, it's edited through the \"My Body\" field in your form.\n```\n\n----------------------------------------\n\nTITLE: Configuring TinaCMS Authentication Provider in TypeScript\nDESCRIPTION: This snippet demonstrates how to create and configure a custom authentication provider for TinaCMS using the new AbstractAuthProvider class.\nSOURCE: https://github.com/tinacms/tinacms/blob/main/packages/next-tinacms-cloudinary/CHANGELOG.md#2025-04-20_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { AbstractAuthProvider } from \"tinacms\";\n\nclass CustomAuthProvider extends AbstractAuthProvider {\n  login() {}\n  logout() {}\n  //...\n}\n\ndefineConfig({\n  authProvider: new CustomAuthProvider(),\n  //...\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Router and Global Properties for TinaCMS Collections\nDESCRIPTION: This code demonstrates how to specify router and global properties on TinaCMS collections. The router property replaces the RouteMapper plugin, while the global property replaces formifyCallback in most cases.\nSOURCE: https://github.com/tinacms/tinacms/blob/main/packages/tinacms/CHANGELOG.md#2025-04-20_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\n...\n  name: 'post',\n  path: 'posts',\n  ui: {\n    router: ({ document }) => {\n      // eg. post items can be previewed at posts/hello-world\n      return `/posts/${document._sys.filename}`;\n    },\n  },\n...\n```\n\nLANGUAGE: typescript\nCODE:\n```\n...\n  name: 'post',\n  path: 'posts',\n  ui: {\n    global: true\n  },\n...\n```\n\n----------------------------------------\n\nTITLE: Implementing a Custom Git Provider for TinaCMS\nDESCRIPTION: Example showing how to implement a custom GitProvider interface for TinaCMS when not using GitHub as the git provider. This demonstrates implementing the required onPut and onDelete methods.\nSOURCE: https://github.com/tinacms/tinacms/blob/main/packages/tinacms-gitprovider-github/CHANGELOG.md#2025-04-20_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nclass CustomGitProvider implements GitProvider\n    async onPut(key: string, value: string)\n        // ...\n\n    async onDelete(key: string)\n        // ...\n\n\nconst gitProvider = new CustomGitProvider();\n```\n\n----------------------------------------\n\nTITLE: GitHubProvider Initialization in TinaCMS\nDESCRIPTION: This code snippet showcases how to initialize the GitHubProvider for use with TinaCMS.  It requires environment variables for the GitHub branch, owner, repository, and personal access token.  This provider is then passed to the createDatabase function for handling git-related operations.\nSOURCE: https://github.com/tinacms/tinacms/blob/main/experimental-examples/tina-cloud-starter/CHANGELOG.md#2025-04-20_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst gitProvider = new GitHubProvider({\n    branch: process.env.GITHUB_BRANCH,\n    owner: process.env.GITHUB_OWNER,\n    repo: process.env.GITHUB_REPO,\n    token: process.env.GITHUB_PERSONAL_ACCESS_TOKEN,\n  });\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Git Provider\nDESCRIPTION: Demonstrates creating a custom git provider by implementing the GitProvider interface\nSOURCE: https://github.com/tinacms/tinacms/blob/main/packages/@tinacms/datalayer/CHANGELOG.md#2025-04-20_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nclass CustomGitProvider implements GitProvider {\n  async onPut(key: string, value: string) {\n    // Custom implementation\n  }\n\n  async onDelete(key: string) {\n    // Custom implementation\n  }\n}\n\nconst gitProvider = new CustomGitProvider();\n```\n\n----------------------------------------\n\nTITLE: Implementing Visual Editing with Manual Data Attributes in React\nDESCRIPTION: This snippet shows how to use the vercelEditInfo helper function to manually add data attributes for visual editing. It demonstrates disabling string encoding and applying the data-vercel-edit-info attribute to specific elements.\nSOURCE: https://github.com/tinacms/tinacms/blob/main/packages/@tinacms/vercel-previews/README.md#2025-04-20_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n// pages/[slug].tsx\nimport { useTina } from 'tinacms/dist/react'\nimport { vercelEditInfo, useVisualEditing } from '@tinacms/vercel-previews'\n\nexport const Post = (props) => {\n  const { data: tinaData } = useTina(props)\n  const data = useVisualEditing({\n    data: tinaData,\n    // metadata is derived from the query and variables\n    query: props.query,\n    variables: props.variables,\n    // When clicking on an editable element for the first time, redirect to the TinaCMS app\n    redirect: '/admin',\n    // Only enable visual editing on preview deploys\n    enabled: props.visualEditingEnabled\n    // stringEncoding automatically adds metadata to strings\n    stringEncoding: false\n  })\n\n  return (\n    <div>\n      <h1 data-vercel-edit-info={vercelEditInfo(data, 'title')}>\n        {data.title}\n      </h1>\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing beforeSubmit Hook in Tina Configuration (JavaScript/TypeScript)\nDESCRIPTION: Example configuration demonstrating how to use the beforeSubmit hook function in a collection's UI settings. This hook runs before form submission and allows for modifying values or adding additional data like timestamps.\nSOURCE: https://github.com/tinacms/tinacms/blob/main/packages/tinacms/CHANGELOG.md#2025-04-20_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\n// tina/config.{ts.js}\n\nexport default defineConfig({\n  schema: {\n    collections: [\n      {\n        ui: {\n          // Example of beforeSubmit\n          beforeSubmit: async ({ values }) => {\n            return {\n              ...values,\n              lastUpdated: new Date().toISOString(),\n            };\n          },\n          //...\n        },\n        //...\n      },\n      //...\n    ],\n  },\n  //...\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring build options for TinaCMS static export\nDESCRIPTION: This code snippet shows how to configure the build options in the TinaCMS configuration for creating a static `index.html` file. The `outputFolder` specifies the directory where the static files will be generated, and the `publicFolder` specifies the directory containing the public assets. This allows using TinaCMS without requiring React as a dependency.\nSOURCE: https://github.com/tinacms/tinacms/blob/main/packages/@tinacms/app/CHANGELOG.md#2025-04-20_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n \".tina/config.ts\\n\\n  export default defineConfig({\\n     build: {\\n       outputFolder: \\\"admin\\\",\\n       publicFolder: \\\"public\\\",\\n    },\\n    //... other config\\n  })\"\n```\n\n----------------------------------------\n\nTITLE: Migrating Database Setup for TinaCMS\nDESCRIPTION: Demonstration of migrating database setup from older configurations using deprecated 'onPut' and 'onDelete' to the new 'gitProvider' approach. The code illustrates how to employ a custom or GitHub-based git provider and adapt existing configurations. The use of classes like `GitHubProvider` and the ability to define a `CustomGitProvider` are central to this approach, requiring implementation of specific Git interaction functions.\nSOURCE: https://github.com/tinacms/tinacms/blob/main/packages/@tinacms/scripts/CHANGELOG.md#2025-04-20_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst gitProvider = new GitHubProvider({\n  branch: process.env.GITHUB_BRANCH,\n  owner: process.env.GITHUB_OWNER,\n  repo: process.env.GITHUB_REPO,\n  token: process.env.GITHUB_PERSONAL_ACCESS_TOKEN,\n});\n```\n\nLANGUAGE: typescript\nCODE:\n```\nclass CustomGitProvider implements GitProvider\n    async onPut(key: string, value: string)\n        // ...\n\n    async onDelete(key: string)\n        // ...\n\n\nconst gitProvider = new CustomGitProvider();\n```\n\nLANGUAGE: typescript\nCODE:\n```\ncreateDatabase({\n-    level: new MongodbLevel<string, Record<string, any>>(...),\n+    databaseAdapter: new MongodbLevel<string, Record<string, any>>(...),\n})\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createLocalDatabase } from \"@tinacms/datalayer\";\ncreateLocalDatabase(port);\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createDatabase, createLocalDatabase, GitHubProvider } from '@tinacms/datalayer';\nimport { MongodbLevel } from 'mongodb-level';\nconst isLocal = process.env.TINA_PUBLIC_IS_LOCAL === 'true';\nexport default isLocal\n  ? createLocalDatabase()\n  : createDatabase({\n      gitProvider: new GitHubProvider(...),\n      databaseAdapter: new MongodbLevel<string, Record<string, any>>(...),\n    });\n```\n\n----------------------------------------\n\nTITLE: Body Field Configuration in Collections\nDESCRIPTION: Shows how to configure a custom body field using the isBody property in collection configuration.\nSOURCE: https://github.com/tinacms/tinacms/blob/main/packages/tinacms/CHANGELOG.md#2025-04-20_snippet_39\n\nLANGUAGE: js\nCODE:\n```\n{\n    collections: [{\n      name: \"post\",\n      label: \"Post\",\n      path: \"content/posts\",\n      fields: [\n        {\n          name: \"title\",\n          label: \"Title\",\n          type: \"string\"\n        }\n        {\n          name: \"myBody\",\n          label: \"My Body\",\n          type: \"string\",\n          component: 'textarea',\n          isBody: true\n        }\n      ]\n    }]\n  }\n```\n\nLANGUAGE: md\nCODE:\n```\n---\ntitle: Hello, World!\n---\n\nThis is the body of the file, it's edited through the \"My Body\" field in your form.\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Git Provider Implementation\nDESCRIPTION: Example implementation of a custom GitProvider interface for users not using GitHub as their git provider, showing the required methods.\nSOURCE: https://github.com/tinacms/tinacms/blob/main/packages/tinacms-clerk/CHANGELOG.md#2025-04-20_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nclass CustomGitProvider implements GitProvider\n    async onPut(key: string, value: string)\n        // ...\n\n    async onDelete(key: string)\n        // ...\n\n\nconst gitProvider = new CustomGitProvider();\n```\n\n----------------------------------------\n\nTITLE: Backend Configuration: TinaNodeBackend\nDESCRIPTION: This TypeScript code demonstrates setting up the TinaCMS backend using `TinaNodeBackend`. It configures the backend with either a `LocalBackendAuthProvider` for local development or an `AuthJsBackendAuthProvider` with authentication options for production. It also imports and uses a `databaseClient`.\nSOURCE: https://github.com/tinacms/tinacms/blob/main/examples/tina-self-hosted-demo/CHANGELOG.md#2025-04-20_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n    TinaNodeBackend,\n    LocalBackendAuthProvider,\n  } from \\\"@tinacms/datalayer\\\";\n\n  import { TinaAuthJSOptions, AuthJsBackendAuthProvider } from \\\"tinacms-authjs\\\";\n\n  import databaseClient from \\\"../../../tina/__generated__/databaseClient\\\";\n\n  const isLocal = process.env.TINA_PUBLIC_IS_LOCAL === \\\"true\\\";\n\n  const handler = TinaNodeBackend({\n    authProvider: isLocal\n      ? LocalBackendAuthProvider()\n      : AuthJsBackendAuthProvider({\n          authOptions: TinaAuthJSOptions({\n            databaseClient: databaseClient,\n            secret: process.env.NEXTAUTH_SECRET,\n          }),\n        }),\n    databaseClient,\n  });\n\n  export default (req, res) => {\n    // Modify the request here if you need to\n    return handler(req, res);\n  };\n```\n\n----------------------------------------\n\nTITLE: Enabling Branch Switcher in TinaCMS Configuration\nDESCRIPTION: This code snippet demonstrates how to enable the Branch Switcher plugin in TinaCMS by setting the 'branch-switcher' feature flag in the cmsCallback function of the TinaCMS configuration.\nSOURCE: https://github.com/tinacms/tinacms/blob/main/packages/tinacms/src/toolkit/plugin-branch-switcher/README.md#2025-04-20_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nexport default defineConfig({\n  cmsCallback: (cms) => {\n    cms.flags.set('branch-switcher', true)\n    return cms\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Aliasing Specific TinaCMS Packages in Next.js\nDESCRIPTION: This code demonstrates how to alias specific TinaCMS packages in a Next.js project's webpack configuration. It uses the aliasTinaDev function with an additional argument to specify which packages to alias.\nSOURCE: https://github.com/tinacms/tinacms/blob/main/packages/@tinacms/webpack-helpers/README.md#2025-04-20_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  webpack: (config, { buildId, dev, isServer, defaultLoaders, webpack }) => {\n    if (dev) {\n      tinaWebpackHelpers.aliasTinaDev(config, '../tinacms', ['@tinacms/forms'])\n    }\n    return config\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Migrating from Legacy Auth Functions to AuthProvider in TinaCMS\nDESCRIPTION: Comparison of previous API and new API for TinaCMS authentication, showing migration from inline auth functions to a class-based approach with AbstractAuthProvider.\nSOURCE: https://github.com/tinacms/tinacms/blob/main/packages/@tinacms/schema-tools/CHANGELOG.md#2025-04-20_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n// Previous API\ndefineConfig({\n  admin: {\n    auth: {\n      login() {},\n      logout() {},\n      //...\n    },\n  },\n  //...\n});\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// New API\nimport { AbstractAuthProvider } from \"tinacms\";\nclass CustomAuthProvider extends AbstractAuthProvider {\n  login() {}\n  logout() {}\n  //...\n}\ndefineConfig({\n  authProvider: new CustomAuthProvider(),\n  //...\n});\n```\n\n----------------------------------------\n\nTITLE: Using Markdown Tables with TinaCMS in TypeScript\nDESCRIPTION: Demonstrates adding support for markdown tables by importing `tinaTableTemplate` and customizing table components in the `TinaMarkdown` rendering. Requires the `tinacms` package and is applied in `tina/config.ts`. It outputs a customized table view rendered in TinaCMS.\nSOURCE: https://github.com/tinacms/tinacms/blob/main/packages/@tinacms/mdx/CHANGELOG.md#2025-04-20_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\n// tina/config.ts\nimport `tinaTableTemplate` from `tinacms`\n\n// add it to the rich-text template\n  {\n    type: 'rich-text',\n    label: 'Body',\n    name: '_body',\n    templates: [\n      tinaTableTemplate\n    ///\n<TinaMarkdown\n  content={props.body}\n  components={{\n    th: (props) => <th className=\"bg-gray-100 font-bold\" {...props} />,\n    td: (props) => <td className=\"bg-gray-100\" {...props} />,\n  }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Authentication Configuration: New API\nDESCRIPTION: This code snippet presents the new API for authentication using `authProvider`. It demonstrates how to create a custom authentication provider by extending the `AbstractAuthProvider` class and implementing the necessary login and logout methods.\nSOURCE: https://github.com/tinacms/tinacms/blob/main/examples/tina-self-hosted-demo/CHANGELOG.md#2025-04-20_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport { AbstractAuthProvider } from \\\"tinacms\\\";\n  class CustomAuthProvider extends AbstractAuthProvider {\n    login() {}\n    logout() {}\n    //...\n  }\n  defineConfig({\n    authProvider: new CustomAuthProvider(),\n    //...\n  });\n```\n\n----------------------------------------\n\nTITLE: Configuring basePath for sub-path deployments\nDESCRIPTION: This code snippet demonstrates how to configure the `basePath` option in the TinaCMS configuration to support sites deployed to sub-paths.  By setting `config.build.basePath` to a specific sub-path, TinaCMS can be correctly served from that location. This is essential for proper routing and asset loading within the CMS.\nSOURCE: https://github.com/tinacms/tinacms/blob/main/packages/@tinacms/cli/CHANGELOG.md#2025-04-20_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\n\"build: {\\n  outputFolder: 'admin',\\n  publicFolder: 'public',\\n  basePath: 'my-site', // site is served at my-domain.com/my-site\\n},\"\n```\n\n----------------------------------------\n\nTITLE: Creating a Database Instance with GitHub Provider and Local Option in TypeScript\nDESCRIPTION: This snippet demonstrates how to create a database instance in TinaCMS using either a local database or a GitHub-backed database based on environment variables. It utilizes the createDatabase and createLocalDatabase functions from the @tinacms/datalayer package.\nSOURCE: https://github.com/tinacms/tinacms/blob/main/examples/kitchen-sink/CHANGELOG.md#2025-04-20_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createDatabase, createLocalDatabase } from \"@tinacms/datalayer\";\nimport { MongodbLevel } from \"mongodb-level\";\nimport { GitHubProvider } from \"tinacms-gitprovider-github\";\n\nconst isLocal = process.env.TINA_PUBLIC_IS_LOCAL === \"true\";\n\nexport default isLocal\n  ? createLocalDatabase()\n  : createDatabase({\n      gitProvider: new GitHubProvider({\n        branch: process.env.GITHUB_BRANCH,\n        owner: process.env.GITHUB_OWNER,\n        repo: process.env.GITHUB_REPO,\n        token: process.env.GITHUB_PERSONAL_ACCESS_TOKEN,\n      }),\n      databaseAdapter: new MongodbLevel<string, Record<string, any>>({\n        collectionName: \"tinacms\",\n        dbName: \"tinacms\",\n        mongoUri: process.env.MONGODB_URI,\n      }),\n      namespace: process.env.GITHUB_BRANCH,\n    });\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple Collection References\nDESCRIPTION: Example of the new reference field configuration that uses an array of collections instead of a single collection property.\nSOURCE: https://github.com/tinacms/tinacms/blob/main/packages/@tinacms/cli/CHANGELOG.md#2025-04-20_snippet_38\n\nLANGUAGE: js\nCODE:\n```\n{\n  type: \"reference\",\n  label: \"Author\",\n  name: \"author\",\n  collections: [\"author\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Setting up Create Tina App for Development\nDESCRIPTION: These commands guide developers through the process of linking the local build of Create Tina App, testing changes, and unlinking when done. This workflow is essential for contributing to the Create Tina App tool.\nSOURCE: https://github.com/tinacms/tinacms/blob/main/packages/create-tina-app/README.md#2025-04-20_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\npnpm link create-tina-app\n```\n\nLANGUAGE: shell\nCODE:\n```\nnpx create-tina-app\n```\n\nLANGUAGE: shell\nCODE:\n```\npnpm unlink\n```\n\n----------------------------------------\n\nTITLE: Configuring TinaCMS with TinaAdmin Flag in Next.js App (TSX)\nDESCRIPTION: This code snippet demonstrates how to enable the TinaAdmin feature by setting the 'tina-admin' flag to true in the TinaCMS configuration within a Next.js _app.tsx file.\nSOURCE: https://github.com/tinacms/tinacms/blob/main/packages/tinacms/src/admin/README.md#2025-04-20_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nconst App = ({ Component, pageProps }) => {\n  return (\n    <>\n      <TinaEditProvider\n        ...\n        editMode={\n          <TinaCMS\n            ...\n            cmsCallback={(cms) => {\n+             cms.flags.set(\"tina-admin\", true);\n            }}\n            ...\n          >\n            ...\n          </TinaCMS>\n        }\n      >\n        ...\n      </TinaEditProvider>\n    </>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Initializing TinaAdmin in Next.js Admin Page (TSX)\nDESCRIPTION: This snippet shows how to set up the TinaAdmin component in a Next.js admin page. It imports TinaAdmin from tinacms and exports it as the default component.\nSOURCE: https://github.com/tinacms/tinacms/blob/main/packages/tinacms/src/admin/README.md#2025-04-20_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n/**\n * pages/admin.tsx\n **/\nimport { TinaAdmin } from \"tinacms\";\nexport default TinaAdmin;\n```\n\n----------------------------------------\n\nTITLE: Setting up API route for S3 media handling in Next.js\nDESCRIPTION: API route setup for handling S3 media operations, including configuration and authorization checks.\nSOURCE: https://github.com/tinacms/tinacms/blob/main/packages/next-tinacms-s3/README.md#2025-04-20_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  mediaHandlerConfig,\n  createMediaHandler,\n} from \"next-tinacms-s3/dist/handlers\";\nimport { isAuthorized } from \"@tinacms/auth\";\n\nexport const config = mediaHandlerConfig;\n\nexport default createMediaHandler({\n  config: {\n    credentials: {\n      accessKeyId: process.env.NEXT_PUBLIC_S3_ACCESS_KEY || '',\n      secretAccessKey: process.env.S3_SECRET_KEY || '',\n    },\n    region: process.env.NEXT_PUBLIC_S3_REGION,\n  },\n  bucket: process.env.NEXT_PUBLIC_S3_BUCKET || '',\n  authorized: async (req, _res) => {\n    if (process.env.NEXT_PUBLIC_USE_LOCAL_CLIENT === \"1\") {\n      return true;\n    }\n    try {\n      const user = await isAuthorized(req);\n      return user && user.verified;\n    } catch (e) {\n      console.error(e);\n      return false;\n    }\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Adding and Configuring Markdown Parser - JavaScript\nDESCRIPTION: This snippet introduces support for an experimental markdown parser in TinaCMS. It shows how to configure a rich-text body field to use the markdown parser, with an option to control escape behavior. The dependencies include TinaCMS and its rich-text field setup. Key configurations are the parser type set to 'markdown', and an optional property 'skipEscaping' which can be set to 'all' or 'html' to control escaping based on how the content is rendered on different platforms.\nSOURCE: https://github.com/tinacms/tinacms/blob/main/packages/@tinacms/mdx/CHANGELOG.md#2025-04-20_snippet_10\n\nLANGUAGE: JavaScript\nCODE:\n```\n{\n  name: \"body\",\n  type: \"rich-text\",\n  parser: {\n    type: \"markdown\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Database Migration: GitHubProvider Usage\nDESCRIPTION: This code snippet demonstrates how to replace `onPut` and `onDelete` with `gitProvider` using the `GitHubProvider` for GitHub integration in the database configuration. It shows how to instantiate the `GitHubProvider` with environment variables.\nSOURCE: https://github.com/tinacms/tinacms/blob/main/packages/@tinacms/cli/CHANGELOG.md#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst gitProvider = new GitHubProvider({\n  branch: process.env.GITHUB_BRANCH,\n  owner: process.env.GITHUB_OWNER,\n  repo: process.env.GITHUB_REPO,\n  token: process.env.GITHUB_PERSONAL_ACCESS_TOKEN,\n});\n```\n\n----------------------------------------\n\nTITLE: Adding onLogin callback to TinaCMS config\nDESCRIPTION: This example demonstrates how to add an `onLogin` callback function to the TinaCMS configuration. The `onLogin` function is called when the user successfully logs in to the CMS. This can be used to trigger custom logic upon login, such as logging the event or redirecting the user.\nSOURCE: https://github.com/tinacms/tinacms/blob/main/packages/@tinacms/app/CHANGELOG.md#2025-04-20_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n \"import { defineConfig } from \\\"tinacms\\\";\\n\\n  export default defineConfig({\\n    admin: {\\n      auth: {\\n        onLogin: () => {\\n          console.log(\\\"On Log in!\\\");\\n        },\\n      },\\n    },\\n    /// ...\\n  });\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Local Content Path in TinaCMS\nDESCRIPTION: This code snippet demonstrates how to configure the local content path in TinaCMS for local development. It shows how to point the configuration to the root of the content repository using the `localContentPath` property and environment variables.  The path should be relative to the `.tina/config` file.\nSOURCE: https://github.com/tinacms/tinacms/blob/main/packages/@tinacms/datalayer/CHANGELOG.md#2025-04-20_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n\"localContentPath: process.env.REMOTE_ROOT_PATH; // eg. '../../my-content-repo'\"\n```\n\n----------------------------------------\n\nTITLE: Registering Cloudinary Media Store in Next.js App\nDESCRIPTION: Code snippet for registering the Cloudinary Media Store with TinaCMS in a Next.js _app.js file. It includes dynamic import of TinaCMS and setup of TinaEditProvider.\nSOURCE: https://github.com/tinacms/tinacms/blob/main/packages/next-tinacms-cloudinary/README.md#2025-04-20_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport dynamic from \"next/dynamic\";\nimport { TinaEditProvider } from \"tinacms/dist/edit-state\";\nimport { Layout } from \"../components/layout\";\nimport { TinaCloudCloudinaryMediaStore } from \"next-tinacms-cloudinary\";\nconst TinaCMS = dynamic(() => import(\"tinacms\"), { ssr: false });\n\nconst App = ({ Component, pageProps }) => {\n  return (\n    <>\n      <TinaEditProvider\n        editMode={\n          <TinaCMS\n            branch=\"main\"\n            clientId={NEXT_PUBLIC_TINA_CLIENT_ID}\n            isLocalClient={Boolean(Number(NEXT_PUBLIC_USE_LOCAL_CLIENT))}\n            mediaStore={async () => {\n              const pack = await import(\"next-tinacms-cloudinary\");\n              return pack.TinaCloudCloudinaryMediaStore;\n            }}\n            {...pageProps}\n          >\n            {(livePageProps) => (\n              <Layout\n                rawData={livePageProps}\n                data={livePageProps.data?.getGlobalDocument?.data}\n              >\n                <Component {...livePageProps} />\n              </Layout>\n            )}\n          </TinaCMS>\n        }\n      >\n        <Layout\n          rawData={pageProps}\n          data={pageProps.data?.getGlobalDocument?.data}\n        >\n          <Component {...pageProps} />\n        </Layout>\n      </TinaEditProvider>\n    </>\n  );\n};\n\n...\n```\n\n----------------------------------------\n\nTITLE: Comparing Old and New GraphQL APIs for Collection Lists\nDESCRIPTION: Example showing the renamed collection list queries, where 'getPostList' becomes 'postConnection' following the relay cursor specification for improved pagination support.\nSOURCE: https://github.com/tinacms/tinacms/blob/main/packages/@tinacms/graphql/CHANGELOG.md#2025-04-20_snippet_9\n\nLANGUAGE: graphql\nCODE:\n```\n# old\n{\n  getPostList { ... }\n}\n\n# new\n{\n  postConnection { ... }\n}\n```\n\n----------------------------------------\n\nTITLE: Transition from Traditional Auth Functions to authProvider Class in JavaScript\nDESCRIPTION: Describes migrating from older authentication methods to a new authProvider class in `defineConfig`. The CustomAuthProvider class extends AbstractAuthProvider. Key functionalities like login and logout should be implemented in the new class structure.\nSOURCE: https://github.com/tinacms/tinacms/blob/main/packages/@tinacms/mdx/CHANGELOG.md#2025-04-20_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\ndefineConfig({\n  admin: {\n    auth: {\n      login() {},\n      logout() {},\n      //...\n    },\n  },\n  //...\n});\n```\n\n----------------------------------------\n\nTITLE: Migration and Renaming in Database Configuration\nDESCRIPTION: This snippet demonstrates how to rename the 'level' property to 'databaseAdapter' in order to clarify the database configuration. This simple migration maintains existing functionality while aligning with new terminology standards.\nSOURCE: https://github.com/tinacms/tinacms/blob/main/packages/@tinacms/graphql/CHANGELOG.md#2025-04-20_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ncreateDatabase({\n-    level: new MongodbLevel<string, Record<string, any>>(...),\n+    databaseAdapter: new MongodbLevel<string, Record<string, any>>(...),\n})\n```\n\n----------------------------------------\n\nTITLE: Migration from Legacy to New TinaCMS Database Configuration\nDESCRIPTION: Example diff showing the migration from the older 'level' property to the newer 'databaseAdapter' property when configuring a TinaCMS database.\nSOURCE: https://github.com/tinacms/tinacms/blob/main/packages/tinacms-gitprovider-github/CHANGELOG.md#2025-04-20_snippet_2\n\nLANGUAGE: diff\nCODE:\n```\ncreateDatabase({\n-    level: new MongodbLevel<string, Record<string, any>>(...),\n+    databaseAdapter: new MongodbLevel<string, Record<string, any>>(...),\n})\n```\n\n----------------------------------------\n\nTITLE: Hiding Create and Delete Actions in TinaCMS Collections\nDESCRIPTION: Configuration example showing how to hide create and delete buttons for a specific collection by setting allowedActions in the collection UI configuration.\nSOURCE: https://github.com/tinacms/tinacms/blob/main/packages/@tinacms/schema-tools/CHANGELOG.md#2025-04-20_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\n```ts\nexport default defineConfig({\n  collections: [\n    {\n      label: \"Global\",\n      name: \"global\",\n      path: \"content/global\",\n      ui: {\n        global: true,\n        allowedActions: {\n          create: false,\n          delete: false,\n        },\n      },\n      format: \"json\",\n      fields: [\n        //...\n      ],\n    },\n  ],\n});\n```\n```\n\n----------------------------------------\n\nTITLE: Defining Collection with Fields in TinaCMS\nDESCRIPTION: Example of using the new 'fields' property instead of 'templates' in a collection definition, which results in a more straightforward schema definition. This approach eliminates the need for a '_template' field in documents.\nSOURCE: https://github.com/tinacms/tinacms/blob/main/packages/@tinacms/cli/CHANGELOG.md#2025-04-20_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  collections: [\n    {\n      name: \"post\",\n      label: \"Post\",\n      path: \"content/posts\",\n      fields: [\n        {\n          name: \"title\",\n          label: \"Title\",\n          type: \"string\", // read on below to learn more about _type_ changes\n        },\n      ],\n      // defining `fields` and `templates` would result in a compilation error\n    },\n  ];\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Media Configuration in TinaCMS Schema\nDESCRIPTION: This snippet explains how to define the media configuration parameters within a TinaCMS schema by specifying the reference depth and media management parameters. It allows customization of the media handling in the Tina client.\nSOURCE: https://github.com/tinacms/tinacms/blob/main/packages/@tinacms/graphql/CHANGELOG.md#2025-04-20_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nconst schema = defineSchema({\n    config: {\n        client: {\n            referenceDepth: 3,\n        },\n    },\n    // ...\n});\n\n// To get the old behavior set referenceDepth to 1.\nconst schema = defineSchema({\n    config: {\n        client: {\n            referenceDepth: 1,\n        },\n    },\n    // ...\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Git Provider for TinaCMS\nDESCRIPTION: Implementation example of a custom GitProvider interface for use with TinaCMS when not using GitHub as the git provider. Demonstrates how to create methods for handling file changes.\nSOURCE: https://github.com/tinacms/tinacms/blob/main/packages/@tinacms/schema-tools/CHANGELOG.md#2025-04-20_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nclass CustomGitProvider implements GitProvider\n    async onPut(key: string, value: string)\n        // ...\n\n    async onDelete(key: string)\n        // ...\n\n\nconst gitProvider = new CustomGitProvider();\n```\n\n----------------------------------------\n\nTITLE: Creating a Local Database Instance with CreateLocalDatabase Function in TypeScript\nDESCRIPTION: This snippet provides an example of implementing a local database using the createLocalDatabase function from the @tinacms/datalayer package, allowing users to run the database locally.\nSOURCE: https://github.com/tinacms/tinacms/blob/main/examples/kitchen-sink/CHANGELOG.md#2025-04-20_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createLocalDatabase } from \"@tinacms/datalayer\";\ncreateLocalDatabase(port);\n```\n\n----------------------------------------\n\nTITLE: Custom Authentication Provider Implementation\nDESCRIPTION: Shows how to create a custom authentication provider by extending AbstractAuthProvider\nSOURCE: https://github.com/tinacms/tinacms/blob/main/packages/@tinacms/datalayer/CHANGELOG.md#2025-04-20_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nclass CustomAuthProvider extends AbstractAuthProvider {\n  login() {}\n  logout() {}\n  //...\n}\n\ndefineConfig({\n  authProvider: new CustomAuthProvider(),\n  //...\n});\n```\n\n----------------------------------------\n\nTITLE: Markdown Output with isBody Field\nDESCRIPTION: Example of how the markdown file would look when using a custom field with isBody set to true, showing how frontmatter and body content are separated.\nSOURCE: https://github.com/tinacms/tinacms/blob/main/packages/@tinacms/cli/CHANGELOG.md#2025-04-20_snippet_37\n\nLANGUAGE: md\nCODE:\n```\n---\ntitle: Hello, World!\n---\n\nThis is the body of the file, it's edited through the \"My Body\" field in your form.\n```\n\n----------------------------------------\n\nTITLE: GraphQL Query to Get Author Documents - GraphQL\nDESCRIPTION: This snippet represents a GraphQL query designed to retrieve an author's document based on a path parameter. It demonstrates how to incorporate variables in a GraphQL query to fetch specific data.\nSOURCE: https://github.com/tinacms/tinacms/blob/main/packages/@tinacms/cli/GeneratedClientDocs.md#2025-04-20_snippet_4\n\nLANGUAGE: graphql\nCODE:\n```\nquery GetAuthorDocument($path: String!) {\n  getAuthorsDocument(relativePath: $path) {\n    data {\n      ...AuthorsParts\n    }\n  }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Converting from Level to DatabaseAdapter in TinaCMS Config\nDESCRIPTION: Diff showing how to migrate from the deprecated 'level' property to the new 'databaseAdapter' property in TinaCMS database configuration.\nSOURCE: https://github.com/tinacms/tinacms/blob/main/packages/@tinacms/schema-tools/CHANGELOG.md#2025-04-20_snippet_2\n\nLANGUAGE: diff\nCODE:\n```\ncreateDatabase({\n-    level: new MongodbLevel<string, Record<string, any>>(...),\n+    databaseAdapter: new MongodbLevel<string, Record<string, any>>(...),\n})\n```\n\n----------------------------------------\n\nTITLE: New authProvider API Usage in JavaScript\nDESCRIPTION: This JavaScript snippet illustrates the updated way of configuring authentication in TinaCMS using a class-based approach. AbstractAuthProvider must be extended to define custom login and logout functionality.\nSOURCE: https://github.com/tinacms/tinacms/blob/main/packages/@tinacms/mdx/CHANGELOG.md#2025-04-20_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport { AbstractAuthProvider } from \"tinacms\";\nclass CustomAuthProvider extends AbstractAuthProvider {\n  login() {}\n  logout() {}\n  //...\n}\ndefineConfig({\n  authProvider: new CustomAuthProvider(),\n  //...\n});\n```\n\n----------------------------------------\n\nTITLE: Updated Database Configuration Example in TypeScript\nDESCRIPTION: Example of the new database.ts file structure using createDatabase or createLocalDatabase, demonstrating the new gitProvider and databaseAdapter parameters that replace the deprecated onPut, onDelete, and level arguments.\nSOURCE: https://github.com/tinacms/tinacms/blob/main/packages/tinacms-clerk/CHANGELOG.md#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createDatabase, createLocalDatabase } from \"@tinacms/datalayer\";\nimport { MongodbLevel } from \"mongodb-level\";\nimport { GitHubProvider } from \"tinacms-gitprovider-github\";\n\nconst isLocal = process.env.TINA_PUBLIC_IS_LOCAL === \"true\";\n\nexport default isLocal\n  ? createLocalDatabase()\n  : createDatabase({\n      gitProvider: new GitHubProvider({\n        branch: process.env.GITHUB_BRANCH,\n        owner: process.env.GITHUB_OWNER,\n        repo: process.env.GITHUB_REPO,\n        token: process.env.GITHUB_PERSONAL_ACCESS_TOKEN,\n      }),\n      databaseAdapter: new MongodbLevel<string, Record<string, any>>({\n        collectionName: \"tinacms\",\n        dbName: \"tinacms\",\n        mongoUri: process.env.MONGODB_URI,\n      }),\n      namespace: process.env.GITHUB_BRANCH,\n    });\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Router for Collection Documents in TinaCMS\nDESCRIPTION: Configuration example showing how to add a custom router function to a collection. This function defines how document URLs are constructed for preview, replacing the need for the RouteMapper plugin.\nSOURCE: https://github.com/tinacms/tinacms/blob/main/packages/@tinacms/schema-tools/CHANGELOG.md#2025-04-20_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\n```ts\n...\n  name: 'post',\n  path: 'posts',\n  ui: {\n    router: ({ document }) => {\n      // eg. post items can be previewed at posts/hello-world\n      return `/posts/${document._sys.filename}`;\n    },\n  },\n...\n```\n```\n\n----------------------------------------\n\nTITLE: Data Storage Key-Value Format\nDESCRIPTION: Demonstrates how attribute data is stored in key-value format with pointers to the actual content files.\nSOURCE: https://github.com/tinacms/tinacms/blob/main/packages/@tinacms/graphql/src/database/README.md#2025-04-20_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n__attribute__#post#post#title#Hello: [\"content/posts/hello.md\"]\n__attribute__#post#post#body#World!: [\"content/posts/hello.md\"]\n```\n\n----------------------------------------\n\nTITLE: Consolidated Database Configuration Example\nDESCRIPTION: Complete example showing the updated database.ts file with conditional local or remote database creation based on environment variables.\nSOURCE: https://github.com/tinacms/tinacms/blob/main/packages/tinacms-clerk/CHANGELOG.md#2025-04-20_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createDatabase, createLocalDatabase, GitHubProvider } from '@tinacms/datalayer';\nimport { MongodbLevel } from 'mongodb-level';\nconst isLocal = process.env.TINA_PUBLIC_IS_LOCAL === 'true';\nexport default isLocal\n  ? createLocalDatabase()\n  : createDatabase({\n      gitProvider: new GitHubProvider(...),\n      databaseAdapter: new MongodbLevel<string, Record<string, any>>(...),\n    });\n```\n\n----------------------------------------\n\nTITLE: Setting a Collection as Global in TinaCMS\nDESCRIPTION: Configuration example showing how to set a collection as global, which replaces the need for formifyCallback in most cases. This makes the collection available globally in the CMS.\nSOURCE: https://github.com/tinacms/tinacms/blob/main/packages/@tinacms/schema-tools/CHANGELOG.md#2025-04-20_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\n```ts\n...\n  name: 'post',\n  path: 'posts',\n  ui: {\n    global: true\n  },\n...\n```\n```\n\n----------------------------------------\n\nTITLE: Database Migration: Consolidated Example\nDESCRIPTION: This consolidated example shows an updated `database.ts` file, using both `createDatabase` and `createLocalDatabase`. It demonstrates the integration of `GitHubProvider` and `MongodbLevel` for database configuration.\nSOURCE: https://github.com/tinacms/tinacms/blob/main/packages/@tinacms/cli/CHANGELOG.md#2025-04-20_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createDatabase, createLocalDatabase, GitHubProvider } from '@tinacms/datalayer';\nimport { MongodbLevel } from 'mongodb-level';\nconst isLocal = process.env.TINA_PUBLIC_IS_LOCAL === 'true';\nexport default isLocal\n  ? createLocalDatabase()\n  : createDatabase({\n      gitProvider: new GitHubProvider(...),\n      databaseAdapter: new MongodbLevel<string, Record<string, any>>(...),\n    });\n```\n\n----------------------------------------\n\nTITLE: New Authentication Provider API\nDESCRIPTION: Example of the new authentication configuration using a custom AuthProvider class that extends AbstractAuthProvider and is passed to defineConfig.\nSOURCE: https://github.com/tinacms/tinacms/blob/main/packages/tinacms-clerk/CHANGELOG.md#2025-04-20_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nimport { AbstractAuthProvider } from \"tinacms\";\nclass CustomAuthProvider extends AbstractAuthProvider {\n  login() {}\n  logout() {}\n  //...\n}\ndefineConfig({\n  authProvider: new CustomAuthProvider(),\n  //...\n});\n```\n\n----------------------------------------\n\nTITLE: Migration from Legacy to New TinaCMS Authentication System\nDESCRIPTION: Comparison of previous and new authentication APIs in TinaCMS, showing the transition from auth functions to an AuthProvider class-based approach.\nSOURCE: https://github.com/tinacms/tinacms/blob/main/packages/tinacms-gitprovider-github/CHANGELOG.md#2025-04-20_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n// Previous API\ndefineConfig({\n  admin: {\n    auth: {\n      login() {},\n      logout() {},\n      //...\n    },\n  },\n  //...\n});\n\n// New API\nimport { AbstractAuthProvider } from \"tinacms\";\nclass CustomAuthProvider extends AbstractAuthProvider {\n  login() {}\n  logout() {}\n  //...\n}\ndefineConfig({\n  authProvider: new CustomAuthProvider(),\n  //...\n});\n```\n\n----------------------------------------\n\nTITLE: Querying with New Typename Convention\nDESCRIPTION: Shows the new convention for __typename values which include proper namespacing to prevent collisions, particularly important when querying polymorphic blocks.\nSOURCE: https://github.com/tinacms/tinacms/blob/main/packages/@tinacms/graphql/CHANGELOG.md#2025-04-20_snippet_47\n\nLANGUAGE: graphql\nCODE:\n```\n{\n  getPageDocument(relativePath: \"home.md\") {\n    data {\n      title\n      myBlocks {\n        ...on Page_Hero_Data {  # previously this would have been Hero_Data\n          # ...\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Simplified GraphQL Query with Fields-based Collections\nDESCRIPTION: When using 'fields' on a collection, the GraphQL query is simplified by removing the need for fragment spreads that were previously required with template-based collections.\nSOURCE: https://github.com/tinacms/tinacms/blob/main/packages/tinacms/CHANGELOG.md#2025-04-20_snippet_18\n\nLANGUAGE: graphql\nCODE:\n```\ngetPostDocument(relativePage: $relativePath) {\n  data {\n    ...on Article_Doc_Data {\n      title\n    }\n  }\n}\n```\n\nLANGUAGE: graphql\nCODE:\n```\ngetPostDocument(relativePage: $relativePath) {\n  data {\n    title\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Up TinaCMS Backend in Next.js API Route\nDESCRIPTION: This code sets up the TinaCMS backend in a Next.js API route, handling both local and remote authentication scenarios using different auth providers.\nSOURCE: https://github.com/tinacms/tinacms/blob/main/packages/next-tinacms-cloudinary/CHANGELOG.md#2025-04-20_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  TinaNodeBackend,\n  LocalBackendAuthProvider,\n} from \"@tinacms/datalayer\";\n\nimport { TinaAuthJSOptions, AuthJsBackendAuthProvider } from \"tinacms-authjs\";\n\nimport databaseClient from \"../../../tina/__generated__/databaseClient\";\n\nconst isLocal = process.env.TINA_PUBLIC_IS_LOCAL === \"true\";\n\nconst handler = TinaNodeBackend({\n  authProvider: isLocal\n    ? LocalBackendAuthProvider()\n    : AuthJsBackendAuthProvider({\n        authOptions: TinaAuthJSOptions({\n          databaseClient: databaseClient,\n          secret: process.env.NEXTAUTH_SECRET,\n        }),\n      }),\n  databaseClient,\n});\n\nexport default (req, res) => {\n  // Modify the request here if you need to\n  return handler(req, res);\n};\n```\n\n----------------------------------------\n\nTITLE: Updating TinaCMS Scripts in package.json\nDESCRIPTION: This snippet shows the recommended changes to the scripts in package.json for separating the GraphQL server into two separate processes. It includes both the new recommended approach and the old -c subcommand approach.\nSOURCE: https://github.com/tinacms/tinacms/blob/main/packages/@tinacms/cli/CHANGELOG.md#2025-04-20_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"scripts\": {\n    \"dev\": \"tinacms build --local && next dev\",\n    \"dev-server\": \"tinacms server:start\",\n    \"build\": \"tinacms build && next build\"\n    // ... Other Scripts\n  }\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"scripts\": {\n    \"dev\": \"tinacms server:start \\\"tinacms build --local && next dev\\\"\",\n    \"dev-server\": \"tinacms server:start\",\n    \"build\": \"tinacms build && next build\"\n    // ... Other Scripts\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using dataJSON in GraphQL Query\nDESCRIPTION: Example of using the new 'dataJSON' field in a GraphQL query to request the entire document data as a single JSON object, useful for complex documents.\nSOURCE: https://github.com/tinacms/tinacms/blob/main/packages/@tinacms/cli/CHANGELOG.md#2025-04-20_snippet_30\n\nLANGUAGE: graphql\nCODE:\n```\ngetThemeDocument(relativePath: $relativePath) {\n  dataJSON\n}\n```\n\n----------------------------------------\n\nTITLE: GraphQL Query to Retrieve Post Document\nDESCRIPTION: This GraphQL query retrieves the document data for a specific post identified by its relative path.\nSOURCE: https://github.com/tinacms/tinacms/blob/main/packages/@tinacms/cli/README.md#2025-04-20_snippet_4\n\nLANGUAGE: graphql\nCODE:\n```\ngetPostsDocument(relativePath: \"voteForPedro.md\") {\n  data {\n    __typename\n    ... on Article_Doc_Data {\n      title\n      author {\n        data {\n          ... on BasicAuthor_Doc_Data {\n            name\n            avatar\n          }\n        }\n      }\n      _body\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Comparing Old and New GraphQL APIs for Document Querying\nDESCRIPTION: Example showing the GraphQL API simplification where 'getPostDocument' is renamed to just the collection name ('post') and the 'data' property is removed, making queries more streamlined and intuitive.\nSOURCE: https://github.com/tinacms/tinacms/blob/main/packages/@tinacms/graphql/CHANGELOG.md#2025-04-20_snippet_8\n\nLANGUAGE: graphql\nCODE:\n```\n# old\n{\n  getPostDocument(relativePath: $relativePath) { ... }\n}\n\n# new\n{\n  post(relativePath: $relativePath) { ... }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring References to Multiple Collections\nDESCRIPTION: Demonstrates how to configure references to multiple collections and query referenced documents.\nSOURCE: https://github.com/tinacms/tinacms/blob/main/packages/@tinacms/datalayer/CHANGELOG.md#2025-04-20_snippet_17\n\nLANGUAGE: js\nCODE:\n```\n{\n  type: \"reference\",\n  label: \"Author\",\n  name: \"author\",\n  collections: [\"author\"]\n}\n```\n\nLANGUAGE: graphql\nCODE:\n```\n{\n  getPostDocument(relativePath: \"hello.md\") {\n    data {\n      title\n      author {\n        ...on Author_Document {\n          name\n        }\n        ...on Post_Document {\n          title\n        }\n      }\n    }\n  }\n```\n\n----------------------------------------\n\nTITLE: Starting the Local GraphQL Server\nDESCRIPTION: This command starts the local TinaCloud GraphQL server for testing content queries.\nSOURCE: https://github.com/tinacms/tinacms/blob/main/packages/@tinacms/cli/README.md#2025-04-20_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nyarn run tinacms server:start\n```\n\n----------------------------------------\n\nTITLE: Updating Authentication Configuration for TinaCMS in TypeScript\nDESCRIPTION: This snippet transitions from the previous deprecated methods for authentication to using the authProvider class. It shows the creation of a CustomAuthProvider that extends AbstractAuthProvider.\nSOURCE: https://github.com/tinacms/tinacms/blob/main/examples/kitchen-sink/CHANGELOG.md#2025-04-20_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nimport { AbstractAuthProvider } from \"tinacms\";\nclass CustomAuthProvider extends AbstractAuthProvider {\n  login() {}\n  logout() {}\n  //...\n}\ndefineConfig({\n  authProvider: new CustomAuthProvider(),\n  //...\n});\n```\n\n----------------------------------------\n\nTITLE: GraphQL Query for Complete Document Data as JSON\nDESCRIPTION: Example of using the new dataJSON field in a GraphQL query to return the entire document data as a single JSON object.\nSOURCE: https://github.com/tinacms/tinacms/blob/main/packages/@tinacms/graphql/CHANGELOG.md#2025-04-20_snippet_35\n\nLANGUAGE: graphql\nCODE:\n```\ngetThemeDocument(relativePath: $relativePath) {\n  dataJSON\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Object Type in Tina CMS Schema (JavaScript)\nDESCRIPTION: Demonstrates how to define an 'object' type in Tina CMS schema, which can represent complex structures like groups or blocks.\nSOURCE: https://github.com/tinacms/tinacms/blob/main/packages/@tinacms/datalayer/CHANGELOG.md#2025-04-20_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  type: \"object\",\n  label: \"Page Sections\",\n  name: \"pageSections\",\n  list: true,\n  templates: [{\n    label: \"Hero\",\n    name: \"hero\",\n    fields: [{\n      label: \"Title\",\n      name: \"title\",\n      type: \"string\"\n    }]\n  }]\n}\n```\n\n----------------------------------------\n\nTITLE: Object Type Definition with Templates (Similar to Blocks)\nDESCRIPTION: The new 'object' type with 'templates' and 'list: true' provides the same functionality as the previous 'blocks' type, allowing polymorphic collections of fields.\nSOURCE: https://github.com/tinacms/tinacms/blob/main/packages/tinacms/CHANGELOG.md#2025-04-20_snippet_33\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  type: \"object\",\n  label: \"Page Sections\",\n  name: \"pageSections\",\n  list: true,\n  templates: [{\n    label: \"Hero\",\n    name: \"hero\",\n    fields: [{\n      label: \"Title\",\n      name: \"title\",\n      type: \"string\"\n    }]\n  }]\n}\n```\n\n----------------------------------------\n\nTITLE: Example Response from dataJSON Query\nDESCRIPTION: Example of the response structure when using the dataJSON field in a query. The entire document data is returned as a single JSON object.\nSOURCE: https://github.com/tinacms/tinacms/blob/main/packages/tinacms/CHANGELOG.md#2025-04-20_snippet_36\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"getThemeDocument\": {\n    \"dataJSON\": {\n      \"every\": \"field\",\n      \"in\": {\n        \"the\": \"document\"\n      },\n      \"is\": \"returned\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Tina CMS Home Page Structure in YAML\nDESCRIPTION: YAML configuration that structures a home page using block templates including hero section, features list, and CTA. The file defines content blocks with headlines, descriptions, action buttons, and feature items organized using Tina's template system.\nSOURCE: https://github.com/tinacms/tinacms/blob/main/examples/kitchen-sink/content/pages/home.md#2025-04-20_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ntitle: Home\nblocks:\n  - headline: The best editor experience for your developer-first sites\n    description: >\n      Tina is an open-source, Git-backed CMS with the ability to add visual\n      editing to your NextJS site\n    actions:\n      - label: Get Started\n        url: 'https://tina.io'\n        variant: secondary\n    _template: hero\n  - title: Features\n    categoriesOther:\n      - IT's ok!\n      - Hey there\n    items:\n      - Query Your Content\n      - Build on Top of Your Components\n      - Command Line Quickstart\n    _template: features\n  - title: New to Tina?\n    description: Learn the basics of the development workflow\n    actions:\n      - label: Check out the docs\n        url: 'https://tina.io/docs/'\n        variant: secondary\n    _template: cta\n_template: blockPage\n```\n\n----------------------------------------\n\nTITLE: Customizing Field UI Component in TinaCMS\nDESCRIPTION: The 'ui' property can be used to customize the component used for a field. This example changes a string field to use a textarea component instead of the default text input.\nSOURCE: https://github.com/tinacms/tinacms/blob/main/packages/tinacms/CHANGELOG.md#2025-04-20_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  type: \"string\",\n  label: \"Description\",\n  name: \"description\",\n  ui: {\n    component: \"textarea\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Uploading images from Frontend with TinaCloud\nDESCRIPTION: This code snippet demonstrates how to upload images in the frontend using the `fetchWithToken` method from the `TinaCloud` client. It retrieves the required token and organization parameters, then makes a request to the given API endpoint to upload the image, while logging the response.\nSOURCE: https://github.com/tinacms/tinacms/blob/main/packages/@tinacms/auth/readme.md#2025-04-20_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst cms = useCMS()\\nconst tinaCloudClient: Client = cms.api.tina\\nconst uploadImage = async () => {\\n  const req = await tinaCloudClient.fetchWithToken(`/api/upload?clientID=${tinaCloudClient.clientId}`)\\n  console.log({ test: await test.json() })\\n}\n```\n\n----------------------------------------\n\nTITLE: GraphQL Field Type Query with Interface\nDESCRIPTION: Example of how field queries would look using GraphQL interfaces\nSOURCE: https://github.com/tinacms/tinacms/blob/main/packages/@tinacms/graphql/readme.md#2025-04-20_snippet_5\n\nLANGUAGE: graphql\nCODE:\n```\nfields {\n  component\n  label\n  name\n  ...on SelectField {\n    options\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Tina Webpack Helpers for Gatsby\nDESCRIPTION: This snippet illustrates how to set up Tina Webpack Helpers in a Gatsby project's webpack configuration. It uses the aliasTinaDev function to alias TinaCMS packages to the local monorepo.\nSOURCE: https://github.com/tinacms/tinacms/blob/main/packages/@tinacms/webpack-helpers/README.md#2025-04-20_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nexports.onCreateWebpackConfig = ({ actions }) => {\n  const config = {\n    resolve: {\n      alias: {},\n    },\n  }\n\n  aliasTinaDev(config, '../tinacms')\n\n  actions.setWebpackConfig(config)\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Lists with New GraphQL API Format\nDESCRIPTION: Example of the new API format for list queries in GraphQL, which uses the connection spec with edges and nodes structure for more comprehensive pagination support.\nSOURCE: https://github.com/tinacms/tinacms/blob/main/packages/@tinacms/cli/CHANGELOG.md#2025-04-20_snippet_34\n\nLANGUAGE: graphql\nCODE:\n```\n{\n  getPostsList {\n    edges {\n      node {\n        id\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using dataJSON Field in GraphQL Query\nDESCRIPTION: The new 'dataJSON' field allows requesting the entire document data as a single JSON object, simplifying queries for documents with many fields.\nSOURCE: https://github.com/tinacms/tinacms/blob/main/packages/tinacms/CHANGELOG.md#2025-04-20_snippet_35\n\nLANGUAGE: graphql\nCODE:\n```\ngetThemeDocument(relativePath: $relativePath) {\n  dataJSON\n}\n```\n\n----------------------------------------\n\nTITLE: Local Database Implementation in TypeScript\nDESCRIPTION: This snippet shows how to implement a local database using the `createLocalDatabase` function from `@tinacms/datalayer`. This is used when running a local instance of TinaCMS without additional dependencies.\nSOURCE: https://github.com/tinacms/tinacms/blob/main/packages/@tinacms/mdx/CHANGELOG.md#2025-04-20_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createLocalDatabase } from \"@tinacms/datalayer\";\ncreateLocalDatabase(port);\n```\n\n----------------------------------------\n\nTITLE: Reference Collections Configuration\nDESCRIPTION: Shows the updated reference field configuration supporting multiple collections and its corresponding GraphQL query.\nSOURCE: https://github.com/tinacms/tinacms/blob/main/packages/tinacms/CHANGELOG.md#2025-04-20_snippet_40\n\nLANGUAGE: js\nCODE:\n```\n{\n    type: \"reference\",\n    label: \"Author\",\n    name: \"author\",\n    collections: [\"author\"]\n  }\n```\n\nLANGUAGE: graphql\nCODE:\n```\n{\n    getPostDocument(relativePath: \"hello.md\") {\n      data {\n        title\n        author {\n          ...on Author_Document {\n            name\n          }\n          ...on Post_Document {\n            title\n          }\n        }\n      }\n    }\n```\n\n----------------------------------------\n\nTITLE: Initializing TinaCMS Database with GitHub Provider\nDESCRIPTION: Configures a non-local database using GitHub as the git provider and MongoDB as the database adapter\nSOURCE: https://github.com/tinacms/tinacms/blob/main/packages/@tinacms/datalayer/CHANGELOG.md#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport default isLocal\n  ? createLocalDatabase()\n  : createDatabase({\n      gitProvider: new GitHubProvider({\n        branch: process.env.GITHUB_BRANCH,\n        owner: process.env.GITHUB_OWNER,\n        repo: process.env.GITHUB_REPO,\n        token: process.env.GITHUB_PERSONAL_ACCESS_TOKEN,\n      }),\n      databaseAdapter: new MongodbLevel<string, Record<string, any>>({\n        collectionName: \"tinacms\",\n        dbName: \"tinacms\",\n        mongoUri: process.env.MONGODB_URI,\n      }),\n      namespace: process.env.GITHUB_BRANCH,\n    });\n```\n\n----------------------------------------\n\nTITLE: Querying Page Title with GraphQL\nDESCRIPTION: A GraphQL query that fetches a page's title based on its relative path. The query takes a relativePath parameter and returns the corresponding page title.\nSOURCE: https://github.com/tinacms/tinacms/blob/main/examples/tina-self-hosted-demo/content/posts/anotherPost.mdx#2025-04-20_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\nquery MyQuery($relativePath: String!) {\n  page(relativePath: $relativePath) {\n    title\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Building TinaCMS Fields in JavaScript\nDESCRIPTION: JavaScript code for building TinaCMS field types by using field definitions in YAML and converting them to GraphQL types. This snippet demonstrates how to transform a text field using a pre-defined method, expecting field details to generate the corresponding GraphQL type.\nSOURCE: https://github.com/tinacms/tinacms/blob/main/packages/@tinacms/datalayer/readme.md#2025-04-20_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nname: Title\nlabel: title\ntype: text\n```\n\nLANGUAGE: js\nCODE:\n```\ntext.build.field({ cache, field });\n```\n\nLANGUAGE: graphql\nCODE:\n```\ntype TextField {\n  name: String\n  label: String\n  component: String\n  description: String\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Collection Fields in Tina CMS Schema (JavaScript)\nDESCRIPTION: Demonstrates how to define fields directly in a collection instead of using templates. This simplifies the schema definition and GraphQL queries.\nSOURCE: https://github.com/tinacms/tinacms/blob/main/packages/@tinacms/datalayer/CHANGELOG.md#2025-04-20_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  collections: [\n    {\n      name: \"post\",\n      label: \"Post\",\n      path: \"content/posts\",\n      fields: [\n        {\n          name: \"title\",\n          label: \"Title\",\n          type: \"string\", // read on below to learn more about _type_ changes\n        },\n      ],\n      // defining `fields` and `templates` would result in a compilation error\n    },\n  ];\n}\n```\n\n----------------------------------------\n\nTITLE: Adding image field to TinaCMS schema\nDESCRIPTION: Example of adding an image field to the TinaCMS schema for use with the S3 media store.\nSOURCE: https://github.com/tinacms/tinacms/blob/main/packages/next-tinacms-s3/README.md#2025-04-20_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n {\n  name: 'hero',\n  type: 'image',\n  label: 'Hero Image',\n }\n```\n\n----------------------------------------\n\nTITLE: Fetching Posts Document using Tina Client - TypeScript\nDESCRIPTION: This snippet shows the process of fetching a posts document using the Tina client within the 'getStaticProps' method. The client fetches properties based on a specified relative path.\nSOURCE: https://github.com/tinacms/tinacms/blob/main/packages/@tinacms/cli/GeneratedClientDocs.md#2025-04-20_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst client = ExperimentalGetTinaClient();\nconst tinaProps = await client.getPostsDocument({relativePath: \"test.md\"});\n\n//...\n\nreturn {\n    props: {\n        ...tinaProps\n    }\n};\n\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Field Plugin with Validation\nDESCRIPTION: Example of extending an existing field plugin to add custom validation logic. This approach is necessary since the schema definition itself cannot contain functions.\nSOURCE: https://github.com/tinacms/tinacms/blob/main/packages/@tinacms/cli/CHANGELOG.md#2025-04-20_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\nimport { TextFieldPlugin } from \"tinacms\";\n\n// ...\n\ncms.fields.add({\n  ...TextFieldPlugin, // spread existing text plugin\n  name: \"myText\",\n  validate: (value) => {\n    someValidationLogic(value);\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Simplified GraphQL Query for Tina CMS Documents (GraphQL)\nDESCRIPTION: Shows how the GraphQL query structure is simplified when using 'fields' instead of 'templates' in collection definitions.\nSOURCE: https://github.com/tinacms/tinacms/blob/main/packages/@tinacms/datalayer/CHANGELOG.md#2025-04-20_snippet_7\n\nLANGUAGE: graphql\nCODE:\n```\ngetPostDocument(relativePage: $relativePath) {\n  data {\n    title\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Local Database Creation in TinaCMS\nDESCRIPTION: This code snippet demonstrates how to create a local database instance within TinaCMS using the `createLocalDatabase` function.  It showcases importing the function and then calling it to initialize the local database, which can be useful for development purposes.\nSOURCE: https://github.com/tinacms/tinacms/blob/main/experimental-examples/tina-cloud-starter/CHANGELOG.md#2025-04-20_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createLocalDatabase } from \\\"@tinacms/datalayer\\\";\ncreateLocalDatabase(port);\n```\n\n----------------------------------------\n\nTITLE: Type Definition with UI Component Override\nDESCRIPTION: Example of specifying a custom UI component for a field using the 'ui' property. In this case, a string field uses a textarea component instead of the default text field.\nSOURCE: https://github.com/tinacms/tinacms/blob/main/packages/@tinacms/cli/CHANGELOG.md#2025-04-20_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  type: \"string\",\n  label: \"Description\",\n  name: \"description\",\n  ui: {\n    component: \"textarea\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Cloudinary Media Handler in TinaCMS\nDESCRIPTION: Example showing how to configure the Cloudinary media handler with the useHttps option. This allows controlling whether images are served over HTTPS (default) or HTTP.\nSOURCE: https://github.com/tinacms/tinacms/blob/main/packages/tinacms/CHANGELOG.md#2025-04-20_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nexport default createMediaHandler(\n  {\n    // ...\n  },\n  {\n    useHttps: false,\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Simplified GraphQL Query with Fields\nDESCRIPTION: Example of a simplified GraphQL query when using 'fields' on a collection, eliminating the need for the '_template' key.\nSOURCE: https://github.com/tinacms/tinacms/blob/main/packages/@tinacms/graphql/CHANGELOG.md#2025-04-20_snippet_17\n\nLANGUAGE: graphql\nCODE:\n```\ngetPostDocument(relativePage: $relativePath) {\n  data {\n    title\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Template Field Updates in Polymorphic Objects\nDESCRIPTION: Demonstrates the change from 'template' to '_template' in polymorphic object definitions.\nSOURCE: https://github.com/tinacms/tinacms/blob/main/packages/tinacms/CHANGELOG.md#2025-04-20_snippet_41\n\nLANGUAGE: md\nCODE:\n```\n---\n---\n\nmyBlocks:\n\n- template: hero\n  title: Hello\n\n---\n```\n\nLANGUAGE: md\nCODE:\n```\n---\n---\n\nmyBlocks:\n\n- _template: hero\n  title: Hello\n\n---\n```\n\n----------------------------------------\n\nTITLE: Initializing Action Component with Popup Template\nDESCRIPTION: This snippet initializes an Action component configured to display a popup. It includes a title and a description. The Action component is used within the TinaCMS framework to provide interactive features. Dependencies include the TinaCMS library, and the expected input values are the _template, title, and description.\nSOURCE: https://github.com/tinacms/tinacms/blob/main/packages/@tinacms/mdx/src/next/tests/mdx-block-object-list-template/out.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n<Action\n  action={{\n    _template: \"popup\",\n    title: \"Say hello\",\n    description: \"This is a description\"\n  }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Object Type with Templates (Blocks) Definition\nDESCRIPTION: Example of defining an object type with templates and list: true, which is equivalent to the previous 'blocks' type for creating polymorphic arrays of content.\nSOURCE: https://github.com/tinacms/tinacms/blob/main/packages/@tinacms/cli/CHANGELOG.md#2025-04-20_snippet_28\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  type: \"object\",\n  label: \"Page Sections\",\n  name: \"pageSections\",\n  list: true,\n  templates: [{\n    label: \"Hero\",\n    name: \"hero\",\n    fields: [{\n      label: \"Title\",\n      name: \"title\",\n      type: \"string\"\n    }]\n  }]\n}\n```\n\n----------------------------------------\n\nTITLE: Frontmatter Block\nDESCRIPTION: This code snippet showcases a frontmatter block. It sets the 'name' field to 'Harrison Ford'. This type of frontmatter is commonly used for defining metadata associated with content files, such as blog posts or pages in a CMS like TinaCMS.\nSOURCE: https://github.com/tinacms/tinacms/blob/main/packages/@tinacms/graphql/src/spec/movies-with-datalayer/content/actors/harrison.md#2025-04-20_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nname: Harrison Ford\n---\n```\n\n----------------------------------------\n\nTITLE: Starting TinaCMS GraphQL Services in Shell\nDESCRIPTION: Step-by-step guide to start the TinaCMS GraphQL server and the GraphiQL app using yarn commands across different terminals. This involves navigating to relevant directories and using yarn commands to initiate the services. All commands are intended to be run in separate terminal sessions.\nSOURCE: https://github.com/tinacms/tinacms/blob/main/packages/@tinacms/datalayer/readme.md#2025-04-20_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n// terminal 1\ncd packages/tina-graphql\nyarn watch\n```\n\nLANGUAGE: sh\nCODE:\n```\n// terminal 2\ncd packages/tina-graphql\nyarn serve\n```\n\nLANGUAGE: sh\nCODE:\n```\n// terminal 3\ncd apps/graphiql\nyarn start\n```\n\n----------------------------------------\n\nTITLE: Markdown File with Custom Body Field\nDESCRIPTION: Example of a markdown file where the body content is managed through a custom field specified with isBody:true in the schema.\nSOURCE: https://github.com/tinacms/tinacms/blob/main/packages/@tinacms/graphql/CHANGELOG.md#2025-04-20_snippet_42\n\nLANGUAGE: md\nCODE:\n```\n---\ntitle: Hello, World!\n---\n\nThis is the body of the file, it's edited through the \"My Body\" field in your form.\n```\n\n----------------------------------------\n\nTITLE: Defining Listable Field in Tina CMS Schema (JavaScript)\nDESCRIPTION: Shows how to define a listable field in Tina CMS schema, which can represent arrays of primitive types.\nSOURCE: https://github.com/tinacms/tinacms/blob/main/packages/@tinacms/datalayer/CHANGELOG.md#2025-04-20_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  type: \"string\",\n  label: \"Categories\",\n  name: \"categories\",\n  list: true\n}\n```\n\n----------------------------------------\n\nTITLE: TinaCMS Action Component with Popup Template\nDESCRIPTION: This snippet demonstrates the usage of the `<Action>` component with the `popup` template. It configures the action to display a popup with a specified title and description when triggered. The `_template` property is set to `popup` to indicate the desired action type.\nSOURCE: https://github.com/tinacms/tinacms/blob/main/packages/@tinacms/mdx/src/next/tests/mdx-block-object-list-template/in.md#2025-04-20_snippet_0\n\nLANGUAGE: JSX\nCODE:\n```\n<Action\n  action={{\n    _template: \"popup\",\n    title: \"Say hello\",\n    description: \"This is a description\"\n  }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Object Type Definition with Fields (Similar to Group)\nDESCRIPTION: The 'object' type with 'fields' provides the same functionality as the previous 'group' type, offering a way to define structured objects with specific fields.\nSOURCE: https://github.com/tinacms/tinacms/blob/main/packages/tinacms/CHANGELOG.md#2025-04-20_snippet_34\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  type: \"object\",\n  label: \"Hero\",\n  name: \"hero\",\n  fields: [{\n    label: \"Title\",\n    name: \"title\",\n    type: \"string\"\n  }]\n}\n```\n\n----------------------------------------\n\nTITLE: Field Definition with Custom Component\nDESCRIPTION: Example of defining a field that uses a custom text component for validation or other custom logic.\nSOURCE: https://github.com/tinacms/tinacms/blob/main/packages/@tinacms/graphql/CHANGELOG.md#2025-04-20_snippet_22\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  type: \"string\",\n  label: \"Description\",\n  name: \"description\",\n  ui: {\n    component: \"myText\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring TinaCMS with Custom Tina.io URLs\nDESCRIPTION: Example showing how to configure TinaCMS with custom Tina.io URLs by supplying a baseUrl or specific identity and content API URLs as props to the TinaCMS component.\nSOURCE: https://github.com/tinacms/tinacms/blob/main/packages/tinacms/CHANGELOG.md#2025-04-20_snippet_14\n\nLANGUAGE: jsx\nCODE:\n```\n<TinaEditProvider\n  editMode={\n    <TinaCMS\n      branch=\"main\"\n      clientId={NEXT_PUBLIC_TINA_CLIENT_ID}\n      tinaioConfig={{\n        baseUrl: \"some-base.io\"\n      }}\n      //...\n```\n\nLANGUAGE: jsx\nCODE:\n```\n<TinaEditProvider\n  editMode={\n    <TinaCMS\n      branch=\"main\"\n      clientId={NEXT_PUBLIC_TINA_CLIENT_ID}\n      tinaioConfig={{\n        identityApiUrl: \"https://some-base.io\"\n        // AND/OR\n        contentApiUrl: \"https://content.some-base.io\"\n      }}\n      //...\n```\n\n----------------------------------------\n\nTITLE: Adding an image field to TinaCMS schema\nDESCRIPTION: Example of adding an image field to the TinaCMS schema in the .tina/schema.ts file.\nSOURCE: https://github.com/tinacms/tinacms/blob/main/packages/next-tinacms-cloudinary/README.md#2025-04-20_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n {\n  name: 'hero',\n  type: 'image',\n  label: 'Hero Image',\n }\n```\n\n----------------------------------------\n\nTITLE: Object Type with Fields for Group\nDESCRIPTION: Example of defining an object type with fields property, which replicates the functionality of the previous 'group' type.\nSOURCE: https://github.com/tinacms/tinacms/blob/main/packages/@tinacms/graphql/CHANGELOG.md#2025-04-20_snippet_34\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  type: \"object\",\n  label: \"Hero\",\n  name: \"hero\",\n  fields: [{\n    label: \"Title\",\n    name: \"title\",\n    type: \"string\"\n  }]\n}\n```\n\n----------------------------------------\n\nTITLE: Defining TinaCMS Templates in YAML\nDESCRIPTION: Template definition in YAML for a TinaCMS Post document, showing how to define fields for documents such as title and author. This YAML snippet outlines the structure needed for the resolver functions to interpret and transform Markdown document data to match the predefined schema.\nSOURCE: https://github.com/tinacms/tinacms/blob/main/packages/@tinacms/datalayer/readme.md#2025-04-20_snippet_2\n\nLANGUAGE: md\nCODE:\n```\n---\ntitle: Hello, World!\nauthor: /authors/homer.md\n---\n```\n\nLANGUAGE: yaml\nCODE:\n```\nlabel: Post\n---\nfields:\n  - name: title\n    label: Title\n    type: text\n  - name: author\n    label: Author\n    type: select\n    config:\n      source:\n        type: pages\n        section: authors\n```\n\n----------------------------------------\n\nTITLE: Initializing TinaCMS with Hugo Static Site\nDESCRIPTION: Command to initialize TinaCMS in a Hugo static site using the CLI tool. Uses workspace mode and static flag for configuration.\nSOURCE: https://github.com/tinacms/tinacms/blob/main/examples/hugo-quickstart/README.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nUSE_WORKSPACE=true node ../../packages/@tinacms/cli/bin/tinacms init --static\n```\n\n----------------------------------------\n\nTITLE: Defining Schema with Custom Format in TinaCMS\nDESCRIPTION: This snippet shows how to define a schema in TinaCMS with a custom format (other than the default `.md`). It highlights the need to explicitly provide the `format` property when using file types other than `.md`, such as `.mdx`.  This ensures that TinaCMS correctly handles and processes files with different extensions.\nSOURCE: https://github.com/tinacms/tinacms/blob/main/packages/@tinacms/datalayer/CHANGELOG.md#2025-04-20_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n  \"// .tina/schema.ts\\n\\n  import { defineSchema } from \\\"tinacms\\\";\\n\\n  const schema = defineSchema({\\n    collections: [\\n      {\\n        name: \\\"page\\\",\\n        path: \\\"content/page\\\",\\n        label: \\\"Page\\\",\\n        // Need to provide the format if the file being used (default is `.md`)\\n        format: \\\"mdx\\\",\\n        fields: [\\n          //...\\n        ],\\n      },\\n    ],\\n  });\\n  //...\\n\\n  export default schema;\"\n```\n\n----------------------------------------\n\nTITLE: Simplified Local Database Setup for TinaCMS\nDESCRIPTION: Example of how to set up a local database for TinaCMS development using the createLocalDatabase function.\nSOURCE: https://github.com/tinacms/tinacms/blob/main/packages/tinacms/CHANGELOG.md#2025-04-20_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createLocalDatabase } from \"@tinacms/datalayer\";\ncreateLocalDatabase(port);\n```\n\n----------------------------------------\n\nTITLE: Partial GraphQL Query Example for Document Data\nDESCRIPTION: A GraphQL query that only requests the title field from a post document. Fields not included in the query won't be available in the response.\nSOURCE: https://github.com/tinacms/tinacms/blob/main/packages/tinacms/CHANGELOG.md#2025-04-20_snippet_25\n\nLANGUAGE: graphql\nCODE:\n```\n{\n  getPostDocument {\n    data {\n      title\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Custom UI Components with TinaCMS\nDESCRIPTION: Fields can use custom components by specifying the component name in the 'ui' property and providing additional configuration options. The custom component must be registered with the CMS.\nSOURCE: https://github.com/tinacms/tinacms/blob/main/packages/tinacms/CHANGELOG.md#2025-04-20_snippet_21\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  type: \"string\",\n  label: \"Description\",\n  name: \"description\",\n  ui: {\n    component: \"myMapField\"\n    someAdditionalMapConfig: 'some-value'\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Comparing Old and New GraphQL APIs for Collections\nDESCRIPTION: Example showing the simplified naming for collection queries, where 'getCollection' and 'getCollections' become 'collection' and 'collections' respectively.\nSOURCE: https://github.com/tinacms/tinacms/blob/main/packages/@tinacms/graphql/CHANGELOG.md#2025-04-20_snippet_10\n\nLANGUAGE: graphql\nCODE:\n```\n# old\n{\n  getCollection(collection: \"post\") {...}\n}\n{\n  getCollections {...}\n}\n\n# new\n{\n  collection(collection: \"post\") {...}\n}\n{\n  collections {...}\n}\n```\n\n----------------------------------------\n\nTITLE: Setting up Azure Storage environment variables\nDESCRIPTION: Environment variables required for connecting to Azure Blob Storage, to be added to a .env file.\nSOURCE: https://github.com/tinacms/tinacms/blob/main/packages/next-tinacms-azure/README.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nAZURE_STORAGE_CONNECTION_STRING=<Your Blob Storage Account connection string, obtained from the Azure Portal>\nAZURE_STORAGE_CONTAINER_NAME=<The name of the Blob Storage container to host your media>\n```\n\n----------------------------------------\n\nTITLE: Configuring TinaCMS Auth Callbacks\nDESCRIPTION: Example of defining TinaCMS configuration with authentication callbacks, specifically showing the onLogin callback implementation.\nSOURCE: https://github.com/tinacms/tinacms/blob/main/packages/@tinacms/auth/CHANGELOG.md#2025-04-20_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineConfig } from \"tinacms\";\n\nexport default defineConfig({\n  admin: {\n    auth: {\n      onLogin: () => {\n        console.log(\"On Log in!\");\n      },\n    },\n  },\n  /// ...\n});\n```\n\n----------------------------------------\n\nTITLE: Adding an image field to TinaCMS schema\nDESCRIPTION: Example of how to add an image field to your TinaCMS schema in tina/config.ts.\nSOURCE: https://github.com/tinacms/tinacms/blob/main/packages/next-tinacms-azure/README.md#2025-04-20_snippet_6\n\nLANGUAGE: ts\nCODE:\n```\n {\n  name: 'hero',\n  type: 'image',\n  label: 'Hero Image',\n }\n```\n\n----------------------------------------\n\nTITLE: Select Field with Options\nDESCRIPTION: When 'options' are provided without 'list: true', the field is represented as a select dropdown allowing a single selection from the provided options.\nSOURCE: https://github.com/tinacms/tinacms/blob/main/packages/tinacms/CHANGELOG.md#2025-04-20_snippet_31\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  type: \"string\",\n  label: \"Categories\",\n  name: \"categories\",\n  options: [\"fitness\", \"movies\", \"music\"]\n}\n```\n\n----------------------------------------\n\nTITLE: New Polymorphic Object Structure\nDESCRIPTION: Shows the new format for polymorphic objects which uses _template as the discriminator field instead of template.\nSOURCE: https://github.com/tinacms/tinacms/blob/main/packages/@tinacms/graphql/CHANGELOG.md#2025-04-20_snippet_46\n\nLANGUAGE: md\nCODE:\n```\n---\n---\n\nmyBlocks:\n\n- \\_template: hero\n  title: Hello\n\n---\n```\n\n----------------------------------------\n\nTITLE: Running TinaCMS CLI Locally\nDESCRIPTION: Shows how to run the TinaCMS CLI locally for testing changes during development.  The `--rootPath` flag is used to specify the application project path.\nSOURCE: https://github.com/tinacms/tinacms/blob/main/CONTRIBUTING.md#2025-04-20_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nnode tinacms/packages/@tinacms/cli/bin/tinacms dev --rootPath {{ APPLICATION PROJECT PATH }}\n```\n\n----------------------------------------\n\nTITLE: Custom UI Component for String Type\nDESCRIPTION: Example of specifying a custom UI component for a string type field by using the 'ui' property.\nSOURCE: https://github.com/tinacms/tinacms/blob/main/packages/@tinacms/graphql/CHANGELOG.md#2025-04-20_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  type: \"string\",\n  label: \"Description\",\n  name: \"description\",\n  ui: {\n    component: \"textarea\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Running Playwright Tests in UI Mode\nDESCRIPTION: Command for running Playwright tests with the UI interface for debugging purposes. This opens the Playwright UI that allows visual inspection and control of test execution.\nSOURCE: https://github.com/tinacms/tinacms/blob/main/playwright/tina-playwright/README.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpx playwright test --ui\n```\n\n----------------------------------------\n\nTITLE: GraphQL Query Example for Document Data\nDESCRIPTION: Example of a GraphQL query for retrieving specific fields from a document in TinaCMS.\nSOURCE: https://github.com/tinacms/tinacms/blob/main/packages/@tinacms/graphql/CHANGELOG.md#2025-04-20_snippet_25\n\nLANGUAGE: graphql\nCODE:\n```\n{\n  getPostDocument {\n    data {\n      title\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Page Structure with TinaCMS YAML Frontmatter\nDESCRIPTION: YAML configuration that defines the page structure including title, SEO metadata, and content blocks. Contains settings for hero section with background image and a call-to-action component with custom styling.\nSOURCE: https://github.com/tinacms/tinacms/blob/main/packages/@tinacms/graphql/src/spec/forestry-sample/content/pages/home.md#2025-04-20_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ntitle: Welcome\nseo:\n  seoTitle: Welcome to our website\n  ogImage: 'http://placehold.it/300x200'\n  ogDescription: You're gonna love this site!\nblocks:\n  - _template: hero\n    description: Welcome!\n    backgroundImage: 'http://placehold.it/300x200'\n  - _template: cta\n    ctaText: Join Us\n    ctaStyle: minimal\n```\n\n----------------------------------------\n\nTITLE: Configuring TinaCloud Homepage Layout in YAML\nDESCRIPTION: YAML configuration that defines the structure of a landing page with multiple content blocks including features sections and a hero component. Contains settings for icons, text content, images, and styling options.\nSOURCE: https://github.com/tinacms/tinacms/blob/main/examples/tina-self-hosted-demo/content/pages/home.md#2025-04-20_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ntitle: TinaCloud Starter\nblocks:\n  - items:\n      - icon:\n          name: ''\n          color: ''\n          style: float\n        title: Here's Another Feature\n        text: >\n          This is where you might talk about the feature, if this wasn't just\n          filler text.\n      - icon:\n          name: ''\n          color: ''\n          style: float\n        title: Here's Another Feature\n        text: >\n          This is where you might talk about the feature, if this wasn't just\n          filler text.\n      - icon:\n          name: ''\n          color: ''\n          style: float\n        title: Here's Another Feature\n        text: >\n          This is where you might talk about the feature, if this wasn't just\n          filler text.\n    _template: features\n  - tagline: This is a new tagline!\n    headline: This is a test\n    text: >\n      This project is set up to show you the basics of working with Tina. You're\n      looking at the landing page, which pulls content from\n      content/pages/home.md, components from components/blocks, and puts them\n      all together in pages/[filename].tsx, all based on a schema defined in\n      .tina/schema.ts.\n    actions:\n      - label: Get Started\n        type: button\n        icon: true\n        link: /posts\n      - label: Read Blog\n        type: link\n        icon: false\n        link: /posts\n    image:\n      src: /uploads/unsplash-75EFpyXu3Wg.jpg\n      alt: >\n        Photo of palm trees at sunset by Adam Birkett -\n        unsplash.com/photos/75EFpyXu3Wg\n    color: default\n    _template: hero\n  - items:\n      - icon:\n          name: BiCodeBlock\n          color: red\n          style: float\n        title: Amazing Feature\n        text: >\n          Aliquam blandit felis rhoncus, eleifend ipsum in, condimentum nibh.\n          Praesent ac faucibus risus, eu lacinia enim.\n      - icon:\n          name: BiLike\n          color: primary\n          style: float\n        title: This Is a Feature\n        text: Vestibulum ante ipsum primis in faucibus orci luctus et ultrices.\n      - icon:\n          name: BiPalette\n          color: green\n          style: float\n        title: Configurable Theme\n        text: >\n          Edit global theme configuration with Tina. Change your theme's primary\n          color, font, or icon set.\n    color: tint\n    _template: features\n```\n\n----------------------------------------\n\nTITLE: Previous GraphQL Query Structure with Templates\nDESCRIPTION: Example of the more complex GraphQL query structure that was required when using templates in collections, requiring fragment spread operators to disambiguate the data structure.\nSOURCE: https://github.com/tinacms/tinacms/blob/main/packages/@tinacms/cli/CHANGELOG.md#2025-04-20_snippet_13\n\nLANGUAGE: graphql\nCODE:\n```\ngetPostDocument(relativePage: $relativePath) {\n  data {\n    ...on Article_Doc_Data {\n      title\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Select Field Definition with Options\nDESCRIPTION: Example of defining a select field using the 'options' property with a string type. This creates a dropdown select UI component.\nSOURCE: https://github.com/tinacms/tinacms/blob/main/packages/@tinacms/cli/CHANGELOG.md#2025-04-20_snippet_26\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  type: \"string\",\n  label: \"Categories\",\n  name: \"categories\",\n  options: [\"fitness\", \"movies\", \"music\"]\n}\n```\n\n----------------------------------------\n\nTITLE: GraphQL Query Fragment for Collections - GraphQL\nDESCRIPTION: This snippet shows a simple GraphQL query to get collections. It can be modified or extended based on the application's needs, providing a foundation for data retrieval in Tina CMS.\nSOURCE: https://github.com/tinacms/tinacms/blob/main/packages/@tinacms/cli/GeneratedClientDocs.md#2025-04-20_snippet_5\n\nLANGUAGE: graphql\nCODE:\n```\nquery getCollections {\n  getCollections {\n    name\n  }\n}\n\n```\n\n----------------------------------------\n\nTITLE: String Type with List Property\nDESCRIPTION: Example of defining a string type as a list, replacing the previous 'list' field with field property approach.\nSOURCE: https://github.com/tinacms/tinacms/blob/main/packages/@tinacms/graphql/CHANGELOG.md#2025-04-20_snippet_30\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  type: \"string\",\n  label: \"Categories\",\n  name: \"categories\",\n  list: true\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Changeset\nDESCRIPTION: This snippet shows the command to create a changeset, which is required for all pull requests.  It ensures that version changes are properly tracked and managed.\nSOURCE: https://github.com/tinacms/tinacms/blob/main/CONTRIBUTING.md#2025-04-20_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n# from the root of the repo\npnpm changeset\n```\n\n----------------------------------------\n\nTITLE: Authentication Migration: Previous API\nDESCRIPTION: This snippet represents the previous API structure for defining authentication in the TinaCMS configuration. It demonstrates the `admin.auth` property with `login` and `logout` functions.\nSOURCE: https://github.com/tinacms/tinacms/blob/main/packages/@tinacms/cli/CHANGELOG.md#2025-04-20_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\ndefineConfig({\n  admin: {\n    auth: {\n      login() {},\n      logout() {\n        //...\n      },\n    },\n  },\n  //...\n});\n```\n\n----------------------------------------\n\nTITLE: Comparing Old and New GraphQL Metadata Fields\nDESCRIPTION: Example showing the new convention for metadata fields which are now prefixed with an underscore (except for 'id'), providing clearer separation between content and metadata.\nSOURCE: https://github.com/tinacms/tinacms/blob/main/packages/@tinacms/graphql/CHANGELOG.md#2025-04-20_snippet_13\n\nLANGUAGE: graphql\nCODE:\n```\n# old\n{\n  getPostDocument(relativePath: $relativePath) {\n    sys {\n      relativePath\n    }\n    values\n  }\n}\n\n# new\n{\n  post(relativePath: $relativePath) {\n    _sys {\n      relativePath\n    }\n    _values\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing next-tinacms-cloudinary package\nDESCRIPTION: Commands for installing the next-tinacms-cloudinary package using Yarn or NPM package managers.\nSOURCE: https://github.com/tinacms/tinacms/blob/main/packages/next-tinacms-cloudinary/README.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nyarn add next-tinacms-cloudinary\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpm install next-tinacms-cloudinary\n```\n\n----------------------------------------\n\nTITLE: Configuring Post Template in TinaCMS Frontmatter YAML\nDESCRIPTION: Basic frontmatter configuration that defines the template type as 'post' for a TinaCMS content piece. This configuration is used to specify how the content should be structured and processed by TinaCMS.\nSOURCE: https://github.com/tinacms/tinacms/blob/main/packages/@tinacms/graphql/src/spec/forestry-sample/mutations/addPendingDocument/_response.md#2025-04-20_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n_template: post\n```\n\n----------------------------------------\n\nTITLE: Complex Hero Component using React\nDESCRIPTION: The Hero component encapsulates a large, visually prominent content section, typically used to welcome visitors. Besides a subtitle and other nested components like Cta, it includes configuration properties for customization. Key parameters include subTitle for additional text and config for styling options.\nSOURCE: https://github.com/tinacms/tinacms/blob/main/packages/@tinacms/graphql/src/spec/movies/content/movies/star-wars.mdx#2025-04-20_snippet_3\n\nLANGUAGE: HTML\nCODE:\n```\n<Hero\n  subTitle={\n  <>\n  ## Some slogan\n\n  <Cta title=\\\"Get Started\\\" />\n  </>\n  }\n  config={{variant: \\\"primary\\\"}}\n>\n  # Welcome to my website\n\n  <Cta\n    title=\\\"Get Started\\\"\n    actions={[{_template: \\\"popup\\\", title: \\\"Click Here!\\\", body: \\\"please?\\\"}]}\n  />\n</Hero>\n```\n\n----------------------------------------\n\nTITLE: TinaCMS Backend Configuration with Multiple Auth Providers\nDESCRIPTION: Configures the TinaCMS backend with local and AuthJS authentication providers\nSOURCE: https://github.com/tinacms/tinacms/blob/main/packages/@tinacms/datalayer/CHANGELOG.md#2025-04-20_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst handler = TinaNodeBackend({\n  authProvider: isLocal\n    ? LocalBackendAuthProvider()\n    : AuthJsBackendAuthProvider({\n        authOptions: TinaAuthJSOptions({\n          databaseClient: databaseClient,\n          secret: process.env.NEXTAUTH_SECRET,\n        }),\n      }),\n  databaseClient,\n});\n\nexport default (req, res) => {\n  return handler(req, res);\n};\n```\n\n----------------------------------------\n\nTITLE: Checkbox Field Definition with Options and List\nDESCRIPTION: Example of defining a checkbox field using both 'options' and 'list: true' properties, allowing multiple selections from predefined options.\nSOURCE: https://github.com/tinacms/tinacms/blob/main/packages/@tinacms/cli/CHANGELOG.md#2025-04-20_snippet_27\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  type: \"string\",\n  label: \"Categories\",\n  name: \"categories\"\n  list: true,\n  options: [\"fitness\", \"movies\", \"music\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Frontmatter Data Structure\nDESCRIPTION: This code snippet shows a YAML-based structure representing a person's information. The frontmatter includes fields like name, birthday (including timezone), height (as a number), and a relative with a markdown file path. This is commonly used to store metadata associated with content files.\nSOURCE: https://github.com/tinacms/tinacms/blob/main/packages/@tinacms/graphql/src/spec/movies-with-datalayer/content/directors/francis.md#2025-04-20_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nname: Francis Ford Coppolla\nbirthday: '1939-04-07T07:00:00.000Z'\nheight: 183\nrelatives:\n    child: content/relative/sofia-coppolla.md\n---\n```\n\n----------------------------------------\n\nTITLE: Custom Field Component with Additional Configuration\nDESCRIPTION: Example of using a custom field component with additional configuration parameters in the 'ui' property.\nSOURCE: https://github.com/tinacms/tinacms/blob/main/packages/@tinacms/graphql/CHANGELOG.md#2025-04-20_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  type: \"string\",\n  label: \"Description\",\n  name: \"description\",\n  ui: {\n    component: \"myMapField\"\n    someAdditionalMapConfig: 'some-value'\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defensive Coding with Optional TinaCMS Fields\nDESCRIPTION: Example of defensive coding in React components to handle optional fields in TinaCMS data, using the optional chaining operator to safely access potentially undefined properties.\nSOURCE: https://github.com/tinacms/tinacms/blob/main/packages/@tinacms/cli/CHANGELOG.md#2025-04-20_snippet_19\n\nLANGUAGE: tsx\nCODE:\n```\nconst MyPage = (props) => {\n  return (\n    <>\n      <h2>{props.getPostDocument.data.title}</h2>\n      <MyCategoryComponent>\n        {props.getPostDocument.data?.category}\n      </MyCategoryComponent>\n    </>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Registering Custom Text Plugin with Validation\nDESCRIPTION: Example of registering a custom text plugin that extends the TextFieldPlugin with custom validation logic.\nSOURCE: https://github.com/tinacms/tinacms/blob/main/packages/@tinacms/graphql/CHANGELOG.md#2025-04-20_snippet_23\n\nLANGUAGE: javascript\nCODE:\n```\nimport { TextFieldPlugin } from \"tinacms\";\n\n// ...\n\ncms.fields.add({\n  ...TextFieldPlugin, // spread existing text plugin\n  name: \"myText\",\n  validate: (value) => {\n    someValidationLogic(value);\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Simplified GraphQL Query with Fields Collection\nDESCRIPTION: Example of simplified GraphQL queries when using the 'fields' property on a collection, eliminating the need for fragment spread operators that were previously required with templates.\nSOURCE: https://github.com/tinacms/tinacms/blob/main/packages/@tinacms/cli/CHANGELOG.md#2025-04-20_snippet_12\n\nLANGUAGE: graphql\nCODE:\n```\ngetPostDocument(relativePage: $relativePath) {\n  data {\n    title\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Markdown-Enabled CTA Component in React\nDESCRIPTION: Renders a clickable call-to-action component that supports markdown text using the Tina CMS library. Allows inline markdown formatting within the component.\nSOURCE: https://github.com/tinacms/tinacms/blob/main/packages/@tinacms/mdx/src/next/tests/mdx-blocks-rich-text-children-on-one-line/out.md#2025-04-20_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<Cta>Click **here**!</Cta>\n```\n\n----------------------------------------\n\nTITLE: Markdown Frontmatter with Categories List\nDESCRIPTION: Example of a markdown document with categories defined as an array in the frontmatter. This shows how list fields are structured in the content.\nSOURCE: https://github.com/tinacms/tinacms/blob/main/packages/tinacms/CHANGELOG.md#2025-04-20_snippet_26\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntitle: \"Hello, World\"\ncategories:\n  - sports\n  - movies\n---\n```\n\n----------------------------------------\n\nTITLE: Renaming Level to Database Adapter in TypeScript Database Configuration\nDESCRIPTION: This snippet shows the changes needed when renaming the deprecated 'level' parameter to 'databaseAdapter' in the createDatabase function. This change improves code clarity and aligns with new guidelines.\nSOURCE: https://github.com/tinacms/tinacms/blob/main/examples/kitchen-sink/CHANGELOG.md#2025-04-20_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\ncreateDatabase({\n-    level: new MongodbLevel<string, Record<string, any>>(...),\n+    databaseAdapter: new MongodbLevel<string, Record<string, any>>(...),\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing the pull-quote Shortcode in TinaCMS\nDESCRIPTION: This snippet showcases the usage of a `pull-quote` shortcode with an attribute `foo` set to \"Testing\".  The shortcode also wraps the content \"Things\", suggesting that it's intended to highlight or stylize that specific text within the document. It requires a closing tag `{{% /pull-quote %}}`.\nSOURCE: https://github.com/tinacms/tinacms/blob/main/packages/@tinacms/mdx/src/next/tests/markdown-shortcodes-rich-text-children-3/out.md#2025-04-20_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n{{% pull-quote foo=\"Testing\" %}}\nThings\n{{% /pull-quote %}}\n```\n\n----------------------------------------\n\nTITLE: Basic Type Definition in TinaCMS\nDESCRIPTION: Basic example of defining a string field type in a schema. The field uses default components based on the primitive type.\nSOURCE: https://github.com/tinacms/tinacms/blob/main/packages/@tinacms/cli/CHANGELOG.md#2025-04-20_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  type: \"string\",\n  label: \"Description\",\n  name: \"description\",\n}\n```\n\n----------------------------------------\n\nTITLE: String List Field Type Definition\nDESCRIPTION: Any primitive type can be represented as a list by adding the 'list: true' property. This example creates a list of strings for categories.\nSOURCE: https://github.com/tinacms/tinacms/blob/main/packages/tinacms/CHANGELOG.md#2025-04-20_snippet_30\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  type: \"string\",\n  label: \"Categories\",\n  name: \"categories\",\n  list: true\n}\n```\n\n----------------------------------------\n\nTITLE: Blog Post Frontmatter Configuration in YAML\nDESCRIPTION: YAML frontmatter configuration block defining blog post metadata including title, hero image path, excerpt text, author reference, and publication date.\nSOURCE: https://github.com/tinacms/tinacms/blob/main/experimental-examples/tina-cloud-starter/content/posts/voteForPedro.mdx#2025-04-20_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ntitle: Vote For Pedro\nheroImg: /uploads/unsplash-lylCw4zcA7I.jpg\nexcerpt: >\n  Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor\n  incididunt ut labore et dolore magna aliqua. Praesent elementum facilisis leo\n  vel fringilla est ullamcorper eget. At imperdiet dui accumsan sit amet nulla\n  facilities morbi tempus.\nauthor: content/authors/pedro.md\ndate: \"2021-07-03T20:30:00.000Z\"\n```\n\n----------------------------------------\n\nTITLE: Registering Custom Field Component with Tina CMS (JavaScript)\nDESCRIPTION: Shows how to register a custom field component with the Tina CMS object on the frontend.\nSOURCE: https://github.com/tinacms/tinacms/blob/main/packages/@tinacms/datalayer/CHANGELOG.md#2025-04-20_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\ncms.fields.add({\n  name: \"myMapField\",\n  Component: MapPicker,\n});\n```\n\n----------------------------------------\n\nTITLE: Registering Custom Field Component with TinaCMS\nDESCRIPTION: Example of registering a custom field component with the TinaCMS instance, allowing it to be used in field definitions.\nSOURCE: https://github.com/tinacms/tinacms/blob/main/packages/@tinacms/graphql/CHANGELOG.md#2025-04-20_snippet_21\n\nLANGUAGE: javascript\nCODE:\n```\ncms.fields.add({\n  name: \"myMapField\",\n  Component: MapPicker,\n});\n```\n\n----------------------------------------\n\nTITLE: React Component with Potential Error in TinaCMS Editing\nDESCRIPTION: Example showing a potential error scenario during TinaCMS editing when iterating through an array of objects with required fields that might be null during editing.\nSOURCE: https://github.com/tinacms/tinacms/blob/main/packages/@tinacms/cli/CHANGELOG.md#2025-04-20_snippet_24\n\nLANGUAGE: tsx\nCODE:\n```\nconst MyPage = (props) => {\n  return props.blocks.map((block) => {\n    return (\n      <>\n        <h2>{block.categories.split(\",\")}</h2>\n      </>\n    );\n  });\n};\n```\n\n----------------------------------------\n\nTITLE: Updating TinaCMS Database Configuration in TypeScript\nDESCRIPTION: This snippet demonstrates how to update the database configuration for TinaCMS, including the new GitHubProvider and changes to the database adapter. It shows both local and remote database setups.\nSOURCE: https://github.com/tinacms/tinacms/blob/main/packages/next-tinacms-cloudinary/CHANGELOG.md#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createDatabase, createLocalDatabase } from \"@tinacms/datalayer\";\nimport { MongodbLevel } from \"mongodb-level\";\nimport { GitHubProvider } from \"tinacms-gitprovider-github\";\n\nconst isLocal = process.env.TINA_PUBLIC_IS_LOCAL === \"true\";\n\nexport default isLocal\n  ? createLocalDatabase()\n  : createDatabase({\n      gitProvider: new GitHubProvider({\n        branch: process.env.GITHUB_BRANCH,\n        owner: process.env.GITHUB_OWNER,\n        repo: process.env.GITHUB_REPO,\n        token: process.env.GITHUB_PERSONAL_ACCESS_TOKEN,\n      }),\n      databaseAdapter: new MongodbLevel<string, Record<string, any>>({\n        collectionName: \"tinacms\",\n        dbName: \"tinacms\",\n        mongoUri: process.env.MONGODB_URI,\n      }),\n      namespace: process.env.GITHUB_BRANCH,\n    });\n```\n\n----------------------------------------\n\nTITLE: Rendering Components with React\nDESCRIPTION: This snippet demonstrates the rendering of content into left and right columns using the \\\\<Test\\\\> component with embedded JSX expressions. It highlights specific parts using the \\\\<Highlight\\\\> component. Ensure React is installed and JSX is supported in the environment.\nSOURCE: https://github.com/tinacms/tinacms/blob/main/packages/@tinacms/mdx/src/next/tests/mdx-blocks-autoformat-nested-mdx/in.md#2025-04-20_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n<Test\\n  leftColumn={<>\n    foo bar baz left\\n  </>}\\n  rightColumn={<>\n    foo bar baz right\\n\\n    <Highlight\\n    content={<>\n    Foo bar baz\n    </>}\\n    />\\n  </>}\\n/>\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\n<Test\\n  leftColumn={\\n    <>\\n    foo bar baz left\\n  </>}\\n  rightColumn={\\n    <>\\n    foo bar baz right\\n\\n    <Highlight\\n      content={\\n        <>\\n          Foo bar baz\\n        </>\\n      }\\n    />\\n  </>}\\n/>\n```\n\n----------------------------------------\n\nTITLE: Checkbox List Field with Options\nDESCRIPTION: When both 'list: true' and 'options' are provided, the field is represented as a set of checkboxes allowing multiple selections from the options.\nSOURCE: https://github.com/tinacms/tinacms/blob/main/packages/tinacms/CHANGELOG.md#2025-04-20_snippet_32\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  type: \"string\",\n  label: \"Categories\",\n  name: \"categories\"\n  list: true,\n  options: [\"fitness\", \"movies\", \"music\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering TestComponent with String Data in React\nDESCRIPTION: This snippet renders a <TestComponent> with an array of rows containing string values. The first row is marked as a header.\nSOURCE: https://github.com/tinacms/tinacms/blob/main/packages/@tinacms/mdx/src/next/tests/mdx-table-like-field/in.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n<TestComponent\nrows={[\n{ celss: [\"Three\", \"Two\", \"One\"], isHeader: true },\n{ celss: [\"C\", \"B\", \"A\"] }\n]}\n/>\n```\n\n----------------------------------------\n\nTITLE: Defensive Coding in Tina CMS React Component (TSX)\nDESCRIPTION: Demonstrates how to handle potentially undefined properties in a React component when working with Tina CMS data.\nSOURCE: https://github.com/tinacms/tinacms/blob/main/packages/@tinacms/datalayer/CHANGELOG.md#2025-04-20_snippet_10\n\nLANGUAGE: tsx\nCODE:\n```\nconst MyPage = (props) => {\n  return (\n    <>\n      <h2>{props.getPostDocument.data.title}</h2>\n      <MyCategoryComponent>\n        {props.getPostDocument.data?.category}\n      </MyCategoryComponent>\n    </>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Setting up environment variables for S3 Bucket access\nDESCRIPTION: Environment variables required for accessing the S3 Bucket, including region, bucket name, access key, and secret key.\nSOURCE: https://github.com/tinacms/tinacms/blob/main/packages/next-tinacms-s3/README.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nNEXT_PUBLIC_S3_REGION=<Your S3 Bucket Name: ex. us-east-1>\nNEXT_PUBLIC_S3_BUCKET=<Your S3 Bucket Name: ex. my-bucket>\nNEXT_PUBLIC_S3_ACCESS_KEY=<Your S3 Bucket access key>\nS3_SECRET_KEY=<Your S3 Bucket access secret>\n```\n\n----------------------------------------\n\nTITLE: Defensive React Component with Optional Properties\nDESCRIPTION: Example of defensively coding a React component to handle optional fields in TinaCMS data.\nSOURCE: https://github.com/tinacms/tinacms/blob/main/packages/@tinacms/graphql/CHANGELOG.md#2025-04-20_snippet_24\n\nLANGUAGE: tsx\nCODE:\n```\nconst MyPage = (props) => {\n  return (\n    <>\n      <h2>{props.getPostDocument.data.title}</h2>\n      <MyCategoryComponent>\n        {props.getPostDocument.data?.category}\n      </MyCategoryComponent>\n    </>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Custom Component with Configuration\nDESCRIPTION: Example of using a custom UI component with additional configuration options in the 'ui' property. This allows for advanced field customization.\nSOURCE: https://github.com/tinacms/tinacms/blob/main/packages/@tinacms/cli/CHANGELOG.md#2025-04-20_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  type: \"string\",\n  label: \"Description\",\n  name: \"description\",\n  ui: {\n    component: \"myMapField\"\n    someAdditionalMapConfig: 'some-value'\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Author Template Front Matter in YAML\nDESCRIPTION: YAML front matter block that defines an author profile template with name and avatar image properties. The configuration includes a template identifier and basic author metadata.\nSOURCE: https://github.com/tinacms/tinacms/blob/main/examples/tina-self-hosted-demo/content/authors/napolean.md#2025-04-20_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nname: Napolean\navatar: https://images.unsplash.com/photo-1606721977440-13e6c3a3505a?ixid=MXwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHw%3D&ixlib=rb-1.2.1&auto=format&fit=crop&w=344&q=80\n_template: author\n---\n```\n\n----------------------------------------\n\nTITLE: Configuring Next.js rewrites for media URLs\nDESCRIPTION: Configuration in next.config.mjs to rewrite media URLs to the appropriate API route.\nSOURCE: https://github.com/tinacms/tinacms/blob/main/packages/next-tinacms-azure/README.md#2025-04-20_snippet_5\n\nLANGUAGE: mjs\nCODE:\n```\nconst nextConfig = {\n  // other config here\n  async rewrites() {\n    return [\n      {\n        source: '/media/:path*',\n        destination: '/api/media/:path*',\n      },\n      // more rewrites here\n    ]\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Git Provider for TinaCMS\nDESCRIPTION: Example of how to implement a custom GitProvider interface for TinaCMS if not using the provided GitHub implementation.\nSOURCE: https://github.com/tinacms/tinacms/blob/main/packages/tinacms/CHANGELOG.md#2025-04-20_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nclass CustomGitProvider implements GitProvider\n    async onPut(key: string, value: string)\n        // ...\n\n    async onDelete(key: string)\n        // ...\n\n\nconst gitProvider = new CustomGitProvider();\n```\n\n----------------------------------------\n\nTITLE: Previous JSON Response Format for List Queries\nDESCRIPTION: Example of the JSON response format from the previous API, showing a simple array structure for list results.\nSOURCE: https://github.com/tinacms/tinacms/blob/main/packages/@tinacms/cli/CHANGELOG.md#2025-04-20_snippet_33\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"getPostsList\": [\n      {\n        \"id\": \"content/posts/voteForPedro.md\"\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using createLocalDatabase for Local Development\nDESCRIPTION: Example of how to use the createLocalDatabase function for setting up a local database during development.\nSOURCE: https://github.com/tinacms/tinacms/blob/main/packages/tinacms-clerk/CHANGELOG.md#2025-04-20_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createLocalDatabase } from \"@tinacms/datalayer\";\ncreateLocalDatabase(port);\n```\n\n----------------------------------------\n\nTITLE: Migrating from level to databaseAdapter Parameter\nDESCRIPTION: Diff showing the required change from the deprecated level parameter to the new databaseAdapter parameter in the createDatabase function.\nSOURCE: https://github.com/tinacms/tinacms/blob/main/packages/tinacms-clerk/CHANGELOG.md#2025-04-20_snippet_3\n\nLANGUAGE: diff\nCODE:\n```\ncreateDatabase({\n-    level: new MongodbLevel<string, Record<string, any>>(...),\n+    databaseAdapter: new MongodbLevel<string, Record<string, any>>(...),\n})\n```\n\n----------------------------------------\n\nTITLE: React Table Component with Markdown Content\nDESCRIPTION: This React component utilizes the Table component from TinaCMS to display markdown content. It creates a table with a single row and column, where the content of the cell is a markdown string.  The markdown string \"# Hello\\n\" is rendered as a level 1 heading.\nSOURCE: https://github.com/tinacms/tinacms/blob/main/packages/@tinacms/mdx/src/next/tests/mdx-basic-nested-objects-2/out.md#2025-04-20_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<Table rows={[{ columns: [{ content: { description: \"# Hello\\n\" } }] }]} />\n```\n\n----------------------------------------\n\nTITLE: Creating a Tina Form in React component\nDESCRIPTION: Example code showing how to create a form using the TinaCMS framework in a React component. It demonstrates the useForm hook with field definitions.\nSOURCE: https://github.com/tinacms/tinacms/blob/main/playwright/tina-playwright/content/page/home.mdx#2025-04-20_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useForm, usePlugin } from 'tinacms'\nimport { usePlugins } from '@tinacms/react-core'\n\nexport default function Page() {\n  const formConfig = {\n    id: 'my-post',\n    label: 'Edit Post',\n    initialValues: {\n      title: 'Some Post',\n      markdownContent: '# H1\\n\\nExample Content'\n    },\n    onSubmit: async () => {\n      //...\n    },\n    fields: [\n      {\n        name: 'title',\n        label: 'Title',\n        component: 'text'\n      },\n      {\n        name: 'markdownContent',\n        label: 'content',\n        component: 'markdown'\n      }\n    ]\n  }\n  \n  // Method 1\n  const [data, form] = useForm(formConfig)\n  usePlugin(form)\n  \n  // Method 2\n  usePlugins(useForm(formConfig))\n  \n  return <h1>{data.title}</h1>\n}\n```\n\n----------------------------------------\n\nTITLE: String Type with List and Options for Checkbox Field\nDESCRIPTION: Example of a string type with both list and options properties, which is represented by a checkbox field in the UI.\nSOURCE: https://github.com/tinacms/tinacms/blob/main/packages/@tinacms/graphql/CHANGELOG.md#2025-04-20_snippet_32\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  type: \"string\",\n  label: \"Categories\",\n  name: \"categories\"\n  list: true,\n  options: [\"fitness\", \"movies\", \"music\"]\n}\n```\n\n----------------------------------------\n\nTITLE: YAML Frontmatter: George Lucas Data\nDESCRIPTION: This YAML snippet defines the frontmatter for a content file, storing information about George Lucas. It includes his name, birthday, height, and a link to a related content file representing one of his children. The `content/relative/jett-lucas.md` value indicates a Markdown file containing data about Jett Lucas.\nSOURCE: https://github.com/tinacms/tinacms/blob/main/packages/@tinacms/graphql/src/spec/movies-with-datalayer/content/directors/george.md#2025-04-20_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nname: George Lucas\nbirthday: '1944-05-14T07:00:00.000Z'\nheight: 168\nrelatives:\n    child: content/relative/jett-lucas.md\n---\n\n```\n\n----------------------------------------\n\nTITLE: Installing next-tinacms-azure package\nDESCRIPTION: Commands to install the next-tinacms-azure package using either Yarn or NPM package managers.\nSOURCE: https://github.com/tinacms/tinacms/blob/main/packages/next-tinacms-azure/README.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nyarn add next-tinacms-azure\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpm install next-tinacms-azure\n```\n\n----------------------------------------\n\nTITLE: List Type Definition in TinaCMS\nDESCRIPTION: Example of defining a list field type using the 'list: true' property. This approach replaces the previous dedicated 'list' field type.\nSOURCE: https://github.com/tinacms/tinacms/blob/main/packages/@tinacms/cli/CHANGELOG.md#2025-04-20_snippet_25\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  type: \"string\",\n  label: \"Categories\",\n  name: \"categories\",\n  list: true\n}\n```\n\n----------------------------------------\n\nTITLE: Registering S3 Bucket Media Store in TinaCMS instance\nDESCRIPTION: Code snippet for registering the S3 Bucket Media Store with a TinaCMS instance in a Next.js _app.js file.\nSOURCE: https://github.com/tinacms/tinacms/blob/main/packages/next-tinacms-s3/README.md#2025-04-20_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport dynamic from \"next/dynamic\";\nimport { TinaEditProvider } from \"tinacms/dist/edit-state\";\nimport { Layout } from \"../components/layout\";\nconst TinaCMS = dynamic(() => import(\"tinacms\"), { ssr: false });\n\nconst App = ({ Component, pageProps }) => {\n  return (\n    <>\n      <TinaEditProvider\n        editMode={\n          <TinaCMS\n            branch=\"main\"\n            clientId={NEXT_PUBLIC_TINA_CLIENT_ID}\n            isLocalClient={Boolean(Number(NEXT_PUBLIC_USE_LOCAL_CLIENT))}\n            mediaStore={async () => {\n              const pack = await import(\"next-tinacms-s3\");\n              return pack.TinaCloudS3MediaStore;\n            }}\n            {...pageProps}\n          >\n            {(livePageProps) => (\n              <Layout\n                rawData={livePageProps}\n                data={livePageProps.data?.getGlobalDocument?.data}\n              >\n                <Component {...livePageProps} />\n              </Layout>\n            )}\n          </TinaCMS>\n        }\n      >\n        <Layout\n          rawData={pageProps}\n          data={pageProps.data?.getGlobalDocument?.data}\n        >\n          <Component {...pageProps} />\n        </Layout>\n      </TinaEditProvider>\n    </>\n  );\n};\n\n...\n```\n\n----------------------------------------\n\nTITLE: Example Post Template Definition\nDESCRIPTION: YAML template configuration for a post with text and select fields\nSOURCE: https://github.com/tinacms/tinacms/blob/main/packages/@tinacms/graphql/readme.md#2025-04-20_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nlabel: Post\n---\nfields:\n  - name: title\n    label: Title\n    type: text\n  - name: author\n    label: Author\n    type: select\n    config:\n      source:\n        type: pages\n        section: authors\n```\n\n----------------------------------------\n\nTITLE: Example Tina Field Configuration\nDESCRIPTION: YAML configuration example showing field definition structure for a text field in Tina\nSOURCE: https://github.com/tinacms/tinacms/blob/main/packages/@tinacms/graphql/readme.md#2025-04-20_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nname: Title\nlabel: title\ntype: text\n```\n\n----------------------------------------\n\nTITLE: Removed Types in TinaCMS Schema System\nDESCRIPTION: A list of completely removed types from the TinaCMS schema system that are no longer available for use in the framework.\nSOURCE: https://github.com/tinacms/tinacms/blob/main/packages/@tinacms/schema-tools/CHANGELOG.md#2025-04-20_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n```\nTemplatable\nTinaIndex\nResolveFormArgs\n```\n```\n\n----------------------------------------\n\nTITLE: Visualizing Git Workflow with Mermaid\nDESCRIPTION: A Mermaid diagram showing a basic Git workflow with branch creation, commits, and merging. The diagram illustrates creating a develop branch, making commits, and merging back to main.\nSOURCE: https://github.com/tinacms/tinacms/blob/main/examples/next-2024/content/posts/hello-world.mdx#2025-04-20_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\ngitGraph\n    commit\n    commit\n    branch develop\n    checkout develop\n    commit\n    commit\n    checkout main\n    merge develop\n    commit\n    commit\n```\n\n----------------------------------------\n\nTITLE: Migrating from Old to New Authentication API\nDESCRIPTION: Comparison between the old authentication API using admin.auth and the new authProvider pattern with AbstractAuthProvider for more flexible authentication implementations.\nSOURCE: https://github.com/tinacms/tinacms/blob/main/packages/tinacms-authjs/CHANGELOG.md#2025-04-20_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// Previous API\ndefineConfig({\n  admin: {\n    auth: {\n      login() {},\n      logout() {},\n      //...\n    },\n  },\n  //...\n});\n\n// New API\nimport { AbstractAuthProvider } from \"tinacms\";\nclass CustomAuthProvider extends AbstractAuthProvider {\n  login() {}\n  logout() {}\n  //...\n}\ndefineConfig({\n  authProvider: new CustomAuthProvider(),\n  //...\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring isBody Field in TinaCMS Collections\nDESCRIPTION: Example of how to configure a field to represent the markdown body content using the isBody property instead of the deprecated _body field.\nSOURCE: https://github.com/tinacms/tinacms/blob/main/packages/@tinacms/cli/CHANGELOG.md#2025-04-20_snippet_36\n\nLANGUAGE: js\nCODE:\n```\n{\n  collections: [{\n    name: \"post\",\n    label: \"Post\",\n    path: \"content/posts\",\n    fields: [\n      {\n        name: \"title\",\n        label: \"Title\",\n        type: \"string\"\n      }\n      {\n        name: \"myBody\",\n        label: \"My Body\",\n        type: \"string\",\n        component: 'textarea',\n        isBody: true\n      }\n    ]\n  }]\n}\n```\n\n----------------------------------------\n\nTITLE: Frontmatter Data for Raiders of the Lost Ark\nDESCRIPTION: This code snippet demonstrates a YAML frontmatter block.  It defines metadata for the movie 'Raiders of the Lost Ark,' including its release date, archived status, director (referencing a content file), genre, and rating. The `director` field demonstrates a content reference, linking to another content file within the system.\nSOURCE: https://github.com/tinacms/tinacms/blob/main/packages/@tinacms/graphql/src/spec/movies-with-datalayer/content/movies/indiana-jones.md#2025-04-20_snippet_0\n\nLANGUAGE: YAML\nCODE:\n```\n---\ntitle: Raiders of the Lost Ark\nreleaseDate: '1981-06-12T07:00:00.000Z'\narchived: true\ndirector: content/directors/george.md\ngenre: action\nrating: 8\n---\n```\n\n----------------------------------------\n\nTITLE: Setting Up Static Build Configuration for TinaCMS\nDESCRIPTION: Example of configuring TinaCMS for a static build that generates an index.html file. This allows using TinaCMS without React as a dependency by specifying output and public folders.\nSOURCE: https://github.com/tinacms/tinacms/blob/main/packages/tinacms/CHANGELOG.md#2025-04-20_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineConfig({\n   build: {\n     outputFolder: \"admin\",\n     publicFolder: \"public\",\n  },\n  //... other config\n})\n```\n\n----------------------------------------\n\nTITLE: Static Build Configuration for TinaCMS\nDESCRIPTION: Configuration for building TinaCMS as a static application. This allows using Tina without React as a dependency by generating a static index.html file that can be deployed to any static hosting.\nSOURCE: https://github.com/tinacms/tinacms/blob/main/packages/@tinacms/schema-tools/CHANGELOG.md#2025-04-20_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\n```ts\n// .tina/config.ts\nimport schema from \"./schema\";\n\nexport default defineConfig({\n  schema: schema,\n  //.. Everything from define config in `schema.ts`\n  //.. Everything from `schema.config`\n});\n```\n```\n\nLANGUAGE: typescript\nCODE:\n```\n```ts\n// .tina/config.ts\n\nexport default defineConfig({\n   build: {\n     outputFolder: \"admin\",\n     publicFolder: \"public\",\n  },\n  //... other config\n})\n```\n```\n\n----------------------------------------\n\nTITLE: Installing TinaCMS Starter App with NPX\nDESCRIPTION: Command to create a new TinaCMS starter site locally using npx. This is the recommended way to get started with TinaCMS for new projects.\nSOURCE: https://github.com/tinacms/tinacms/blob/main/README.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx create-tina-app@latest\n```\n\n----------------------------------------\n\nTITLE: Database Migration: createLocalDatabase Usage\nDESCRIPTION: This snippet showcases the usage of the `createLocalDatabase` function for implementing a local database. It provides a simple example of how to create a local database instance.\nSOURCE: https://github.com/tinacms/tinacms/blob/main/packages/@tinacms/cli/CHANGELOG.md#2025-04-20_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createLocalDatabase } from \"@tinacms/datalayer\";\ncreateLocalDatabase(port);\n```\n\n----------------------------------------\n\nTITLE: Rendering Table Structure with JSX in React\nDESCRIPTION: This snippet demonstrates a React component for rendering a table with rows and columns. It utilizes JSX to structure the table, allowing for dynamic insertion and rendering of content within table cells. The primary input is a \"rows\" array of objects, each containing \"columns\" with \"content\" properties. It outputs a fully constructed table element with nested elements specified by the input structure.\nSOURCE: https://github.com/tinacms/tinacms/blob/main/packages/@tinacms/mdx/src/next/tests/mdx-basic-nested-objects-3/in.md#2025-04-20_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n<Table rows={[\\n    {\\n      columns: [\\n        {\\n          content: \\\"# Hello <World />\\\"\\n        }\\n      ]\\n    }\\n  ]} />\n```\n\n----------------------------------------\n\nTITLE: Configuring Cloudinary Media Handler for HTTPS in TinaCMS\nDESCRIPTION: Code snippet showing how to configure the Cloudinary media handler to use HTTPS. This demonstrates how to override the default setting (which is now true) to revert to HTTP.\nSOURCE: https://github.com/tinacms/tinacms/blob/main/packages/next-tinacms-cloudinary/CHANGELOG.md#2025-04-20_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nexport default createMediaHandler(\n  {\n    // ...\n  },\n  {\n    useHttps: false,\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Updated TypeName Format in GraphQL Queries\nDESCRIPTION: Demonstrates the new namespace-aware typename format for GraphQL queries.\nSOURCE: https://github.com/tinacms/tinacms/blob/main/packages/@tinacms/datalayer/CHANGELOG.md#2025-04-20_snippet_19\n\nLANGUAGE: graphql\nCODE:\n```\n{\n  getPageDocument(relativePath: \"home.md\") {\n    data {\n      title\n      myBlocks {\n        ...on Page_Hero_Data {  # previously this would have been Hero_Data\n          # ...\n        }\n      }\n    }\n  }\n```\n\n----------------------------------------\n\nTITLE: Consolidated Database Configuration Example\nDESCRIPTION: Complete example of a modernized database.ts file with conditional configuration for local or production environments using the new API.\nSOURCE: https://github.com/tinacms/tinacms/blob/main/packages/tinacms/CHANGELOG.md#2025-04-20_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createDatabase, createLocalDatabase, GitHubProvider } from '@tinacms/datalayer';\nimport { MongodbLevel } from 'mongodb-level';\nconst isLocal = process.env.TINA_PUBLIC_IS_LOCAL === 'true';\nexport default isLocal\n  ? createLocalDatabase()\n  : createDatabase({\n      gitProvider: new GitHubProvider(...),\n      databaseAdapter: new MongodbLevel<string, Record<string, any>>(...),\n    });\n```\n\n----------------------------------------\n\nTITLE: Updating package.json Scripts for TinaCMS Development\nDESCRIPTION: This snippet shows the recommended changes to the scripts in package.json for separating the GraphQL server into two separate processes during development. It includes commands for starting the dev server and building the project.\nSOURCE: https://github.com/tinacms/tinacms/blob/main/packages/@tinacms/schema-tools/CHANGELOG.md#2025-04-20_snippet_17\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"scripts\": {\n    \"dev\": \"tinacms build --local && next dev\",\n    \"dev-server\": \"tinacms server:start\",\n    \"build\": \"tinacms build && next build\"\n    // ... Other Scripts\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Movie Metadata YAML Front Matter Definition\nDESCRIPTION: Structured metadata block defining key details about a movie, including title, release details, director link, and classification properties\nSOURCE: https://github.com/tinacms/tinacms/blob/main/packages/@tinacms/graphql/src/spec/movies-with-datalayer/content/movies/the-rock.md#2025-04-20_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntitle: The Rock\nreleaseDate: '1996-06-07T07:00:00.000Z'\ndirector: content/directors/francis.md\narchived: false\ngenre: action\nrating: 7\n---\n```\n\n----------------------------------------\n\nTITLE: TinaCloud Environment Variables\nDESCRIPTION: Environment variables required for connecting to TinaCloud services for content management.\nSOURCE: https://github.com/tinacms/tinacms/blob/main/experimental-examples/tina-cloud-starter/content/pages/about.md#2025-04-20_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nNEXT_PUBLIC_ORGANIZATION_NAME= <YOUR_ORGANIZATION>\nNEXT_PUBLIC_TINA_CLIENT_ID= <YOUR_CLIENT_ID>\n```\n\n----------------------------------------\n\nTITLE: GraphQL Query Definition - JavaScript\nDESCRIPTION: This snippet defines a GraphQL query to fetch data about pets, including their ID, name, type, and image URL. The query is wrapped in gql from the graphql-tag package.\nSOURCE: https://github.com/tinacms/tinacms/blob/main/packages/@tinacms/mdx/src/next/tests/markdown-html-issues/in.md#2025-04-20_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst GET_PETS = gql`  query getPets {\n    pets {\n      id\n      name\n      type\n      img\n    }\n  }`; \n```\n\n----------------------------------------\n\nTITLE: Starting TinaCMS GraphQL Development Servers\nDESCRIPTION: Commands to start the development environment with watch and serve processes for the tina-graphql package\nSOURCE: https://github.com/tinacms/tinacms/blob/main/packages/@tinacms/graphql/readme.md#2025-04-20_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n// terminal 1\ncd packages/tina-graphql\nyarn watch\n\n// terminal 2\ncd packages/tina-graphql\nyarn serve\n```\n\n----------------------------------------\n\nTITLE: Querying Collection Documents in GraphQL\nDESCRIPTION: Example showing how to query documents in a collection after the removal of the 'getDocumentList' query, using the 'collection' query with documents edges and nodes.\nSOURCE: https://github.com/tinacms/tinacms/blob/main/packages/@tinacms/graphql/CHANGELOG.md#2025-04-20_snippet_14\n\nLANGUAGE: graphql\nCODE:\n```\n{\n  collection {\n    documents {\n      edges {\n        node {...}\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting up API routes for Azure media handling\nDESCRIPTION: API route setup for handling media requests, including authorization checks. This is typically placed in app/api/azure/[...media]/route.ts.\nSOURCE: https://github.com/tinacms/tinacms/blob/main/packages/next-tinacms-azure/README.md#2025-04-20_snippet_3\n\nLANGUAGE: ts\nCODE:\n```\nimport { createMediaHandlers } from 'next-tinacms-azure/dist/handlers'\nimport { isAuthorized } from 'next-tinacms-azure/dist/auth'\n\nconst handlers = createMediaHandlers({\n  connectionString: process.env.AZURE_STORAGE_CONNECTION_STRING!,\n  containerName: process.env.AZURE_STORAGE_CONTAINER_NAME!,\n  authorized: async (req) => {\n    try {\n      if (process.env.NODE_ENV == 'development') {\n        return true\n      }\n\n      const user = await isAuthorized(req)\n\n      return user?.verified || false\n    } catch (e) {\n      console.error(e)\n      return false\n    }\n  },\n})\n\nconst { GET, POST, DELETE } = handlers\n\nexport { GET, POST, DELETE }\n```\n\n----------------------------------------\n\nTITLE: Querying with Updated __typename Values\nDESCRIPTION: Example of a GraphQL query using the new namespaced __typename values, which now include proper namespace prefixes to prevent naming collisions.\nSOURCE: https://github.com/tinacms/tinacms/blob/main/packages/@tinacms/cli/CHANGELOG.md#2025-04-20_snippet_42\n\nLANGUAGE: graphql\nCODE:\n```\n{\n  getPageDocument(relativePath: \"home.md\") {\n    data {\n      title\n      myBlocks {\n        ...on Page_Hero_Data {  # previously this would have been Hero_Data\n          # ...\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Querying References Across Multiple Collections\nDESCRIPTION: Example of a GraphQL query using inline fragments to handle references that can point to documents from different collections.\nSOURCE: https://github.com/tinacms/tinacms/blob/main/packages/@tinacms/cli/CHANGELOG.md#2025-04-20_snippet_39\n\nLANGUAGE: graphql\nCODE:\n```\n{\n  getPostDocument(relativePath: \"hello.md\") {\n    data {\n      title\n      author {\n        ...on Author_Document {\n          name\n        }\n        ...on Post_Document {\n          title\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Comparing Old and New GraphQL References Structure\nDESCRIPTION: Example showing the simplified type names for document references, where type names no longer include 'Document' suffix, making queries more concise.\nSOURCE: https://github.com/tinacms/tinacms/blob/main/packages/@tinacms/graphql/CHANGELOG.md#2025-04-20_snippet_12\n\nLANGUAGE: graphql\nCODE:\n```\n# old\n{\n  getPostDocument(relativePath: $relativePath) {\n    data {\n      author {\n        ... on AuthorDocument {\n          data {\n            name\n          }\n        }\n      }\n    }\n  }\n}\n\n# new\n{\n  post(relativePath: $relativePath) {\n    author {\n      ... on Author {\n        name\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing TinaCloud CLI using npm\nDESCRIPTION: This snippet demonstrates how to install the TinaCloud CLI as a development dependency using npm.\nSOURCE: https://github.com/tinacms/tinacms/blob/main/packages/@tinacms/cli/README.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save-dev @tinacms/cli\n```\n\n----------------------------------------\n\nTITLE: Markdown Frontmatter with Empty Categories List\nDESCRIPTION: Example of a markdown document with an empty categories array in the frontmatter. This will result in an empty array in the response.\nSOURCE: https://github.com/tinacms/tinacms/blob/main/packages/tinacms/CHANGELOG.md#2025-04-20_snippet_27\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntitle: \"Hello, World\"\ncategories: []\n---\n```\n\n----------------------------------------\n\nTITLE: Response Format for New List Query Pattern\nDESCRIPTION: Shows the JSON response format from the new GraphQL API pattern with the edges/nodes structure, which allows for pagination and additional metadata.\nSOURCE: https://github.com/tinacms/tinacms/blob/main/packages/@tinacms/graphql/CHANGELOG.md#2025-04-20_snippet_40\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"getPostsList\": {\n      \"edges\": [\n        {\n          \"node\": {\n            \"id\": \"content/posts/voteForPedro.md\"\n          }\n        }\n      ]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring S3 Bucket policy for public read and limited write access\nDESCRIPTION: JSON policy for S3 Bucket configuration, allowing public read access and limited write access for a specific IAM user.\nSOURCE: https://github.com/tinacms/tinacms/blob/main/packages/next-tinacms-s3/README.md#2025-04-20_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"Version\": \"2012-10-17\",\n    \"Statement\": [\n        {\n            \"Sid\": \"PublicRead\",\n            \"Effect\": \"Allow\",\n            \"Principal\": \"*\",\n            \"Action\": \"s3:GetObject\",\n            \"Resource\": \"arn:aws:s3:::<S3-Bucket-NAME>/*\"\n        },\n        {\n            \"Sid\": \"LimitedWrite\",\n            \"Effect\": \"Allow\",\n            \"Principal\": {\n                \"AWS\": \"<ARN of the IAM user>\"\n            },\n            \"Action\": [\n                \"s3:PutObject\",\n                \"s3:PutObjectAcl\",\n                \"s3:DeleteObject\"\n            ],\n            \"Resource\": \"arn:aws:s3:::<S3-Bucket-NAME>/*\"\n        },\n        {\n            \"Sid\": \"ListBucket\",\n            \"Effect\": \"Allow\",\n            \"Principal\": {\n                \"AWS\": \"<ARN of the IAM user>\"\n            },\n            \"Action\": \"s3:ListBucket\",\n            \"Resource\": \"arn:aws:s3:::<S3-Bucket-NAME>\"\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Author Template in YAML Frontmatter\nDESCRIPTION: YAML frontmatter configuration that defines an author template with name and avatar image properties. The template uses TinaCMS's _template attribute to identify it as an author configuration.\nSOURCE: https://github.com/tinacms/tinacms/blob/main/examples/tina-self-hosted-demo/content/authors/pedro.md#2025-04-20_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nname: Pedro\navatar: https://images.unsplash.com/photo-1555959910-80920d0698a4?ixlib=rb-1.2.1&ixid=MXwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHw%3D&auto=format&fit=crop&w=1301&q=80\n_template: author\n---\n```\n\n----------------------------------------\n\nTITLE: Defining YAML Front Matter for TinaCMS Content\nDESCRIPTION: YAML front matter block that defines metadata properties including name, description and location for a TinaCMS content piece.\nSOURCE: https://github.com/tinacms/tinacms/blob/main/experimental-examples/kitchen-sink/content/author/Napolean2.md#2025-04-20_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nname: Melbourne - Napoleon2\ndescription: This is Napolean 2 description\nlocation: melbourne\n---\n```\n\n----------------------------------------\n\nTITLE: Implementing Visual Editing for Nested Objects in React\nDESCRIPTION: This example demonstrates how to use the vercelEditInfo helper function for deeper object structures. It shows how to mark both individual elements and wrapping divs as editable, handling arrays of objects.\nSOURCE: https://github.com/tinacms/tinacms/blob/main/packages/@tinacms/vercel-previews/README.md#2025-04-20_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nexport const NewsletterBlock = (props) => {\n  return (\n    <div>\n      <p data-vercel-edit-info={vercelEditInfo(props, 'message')}>\n        {props.message}\n      </p>\n      <div data-vercel-edit-info={vercelEditInfo(props, 'actions')}>\n        {props.actions.map((action) => {\n          return (\n            <button\n              // notice here that the first value is the action object\n              data-vercel-edit-info={vercelEditInfo(action, 'message')}\n              {...action}\n            />\n          )\n        })}\n      </div>\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Old Template Field Format for Polymorphic Objects\nDESCRIPTION: Example of the old format for polymorphic objects (formerly called blocks) using the 'template' field identifier.\nSOURCE: https://github.com/tinacms/tinacms/blob/main/packages/@tinacms/cli/CHANGELOG.md#2025-04-20_snippet_40\n\nLANGUAGE: md\nCODE:\n```\n---\n---\n\nmyBlocks:\n\n- template: hero\n  title: Hello\n\n---\n```\n\n----------------------------------------\n\nTITLE: Defining Schema for Different File Formats\nDESCRIPTION: This snippet illustrates how to define a schema in TinaCMS that accommodates different file formats beyond the default markdown (.md). It requires specific configuration within the schema to ensure proper handling of these formats.\nSOURCE: https://github.com/tinacms/tinacms/blob/main/packages/@tinacms/graphql/CHANGELOG.md#2025-04-20_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n// .tina/schema.ts\n\nimport { defineSchema } from \"tinacms\";\n\nconst schema = defineSchema({\n    collections: [\n        {\n            name: \"page\",\n            path: \"content/page\",\n            label: \"Page\",\n            // Need to provide the format if the file being used (default is `.md`)\n            format: \"mdx\",\n            fields: [\n                //...\n            ],\n        },\n    ],\n});\n\n//...\n\nexport default schema;\n```\n\n----------------------------------------\n\nTITLE: Querying Lists with Previous GraphQL API Format\nDESCRIPTION: Example of the previous API format for list queries in GraphQL, which returned a simple array of items.\nSOURCE: https://github.com/tinacms/tinacms/blob/main/packages/@tinacms/cli/CHANGELOG.md#2025-04-20_snippet_32\n\nLANGUAGE: graphql\nCODE:\n```\n{\n  getPostsList {\n    id\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Comparing Old and New GraphQL Document Structure\nDESCRIPTION: Example showing the removal of the 'data' property in document queries, with fields now being accessed directly at the root level of the document response.\nSOURCE: https://github.com/tinacms/tinacms/blob/main/packages/@tinacms/graphql/CHANGELOG.md#2025-04-20_snippet_11\n\nLANGUAGE: graphql\nCODE:\n```\n# old\n{\n  getPostDocument(relativePath: $relativePath) {\n    data {\n      title\n    }\n  }\n}\n\n# new\n{\n  post(relativePath: $relativePath) {\n    title\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Markdown Frontmatter with Missing Categories Field\nDESCRIPTION: Example of a markdown document without a categories field in the frontmatter. In the new schema system, this will result in 'categories: null' in the response instead of an empty array.\nSOURCE: https://github.com/tinacms/tinacms/blob/main/packages/tinacms/CHANGELOG.md#2025-04-20_snippet_28\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntitle: \"Hello, World\"\n---\n```\n\n----------------------------------------\n\nTITLE: New JSON Response Format for List Queries\nDESCRIPTION: Example of the JSON response format from the new API, showing the edges and nodes structure that follows the GraphQL connection spec.\nSOURCE: https://github.com/tinacms/tinacms/blob/main/packages/@tinacms/cli/CHANGELOG.md#2025-04-20_snippet_35\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"getPostsList\": {\n      \"edges\": [\n        {\n          \"node\": {\n            \"id\": \"content/posts/voteForPedro.md\"\n          }\n        }\n      ]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Updating npm Scripts for TinaCMS Development\nDESCRIPTION: This snippet showcases the recommended updates to the npm scripts used for starting TinaCMS in development mode. It describes how to run the development server and TinaCMS build process in separate terminals, facilitating a more efficient development workflow.\nSOURCE: https://github.com/tinacms/tinacms/blob/main/packages/@tinacms/graphql/CHANGELOG.md#2025-04-20_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"scripts\": {\n    \"dev\": \"tinacms build --local && next dev\",\n    \"dev-server\": \"tinacms server:start\",\n    \"build\": \"tinacms build && next build\"\n    // ... Other Scripts\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Escape Behavior for Markdown Parser - JavaScript\nDESCRIPTION: This snippet extends the markdown parser configuration in TinaCMS, giving users control over the escape behavior during parsing. Essential parameters include 'skipEscaping', which accepts 'all' or 'html' as values, influencing how characters are escaped, especially beneficial when rendered with external systems like Hugo. No additional dependencies are required beyond the existing TinaCMS setup.\nSOURCE: https://github.com/tinacms/tinacms/blob/main/packages/@tinacms/mdx/CHANGELOG.md#2025-04-20_snippet_11\n\nLANGUAGE: JavaScript\nCODE:\n```\n{\n  name: \"body\",\n  type: \"rich-text\",\n  parser: {\n    type: \"markdown\",\n    skipEscaping: \"all\" // options are \"all\" | \"html\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Markdown Frontmatter Definition\nDESCRIPTION: YAML frontmatter block defining metadata for a blog post, including title and author reference.\nSOURCE: https://github.com/tinacms/tinacms/blob/main/experimental-examples/kitchen-sink/content/post/HelloWorld.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntitle: hello world\nauthor: content/author/test-author.md\n---\n```\n\n----------------------------------------\n\nTITLE: React Component Usage with JSX\nDESCRIPTION: This snippet demonstrates how to use a React component named `Cta` within JSX. The `description` prop receives JSX containing a link to a privacy policy, and children are passed as custom content.\nSOURCE: https://github.com/tinacms/tinacms/blob/main/packages/@tinacms/mdx/src/next/tests/mdx-blocks-multiple-rich-text-fields/out.md#2025-04-20_snippet_0\n\nLANGUAGE: JSX\nCODE:\n```\n<Cta\n  description={<>\n    Read our privacy policy [here](http://example.com)\n  </>}\n>\n  Click **here**!\n</Cta>\n```\n\n----------------------------------------\n\nTITLE: Example dataJSON Response\nDESCRIPTION: Example of the JSON response structure when using the dataJSON field in a GraphQL query, returning the complete document data as a nested JSON object.\nSOURCE: https://github.com/tinacms/tinacms/blob/main/packages/@tinacms/cli/CHANGELOG.md#2025-04-20_snippet_31\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"getThemeDocument\": {\n    \"dataJSON\": {\n      \"every\": \"field\",\n      \"in\": {\n        \"the\": \"document\"\n      },\n      \"is\": \"returned\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: YAML Frontmatter Definition for Movie Metadata\nDESCRIPTION: YAML frontmatter block that defines metadata for a movie entry, including title, director (as a content reference), genre classification, and numerical rating.\nSOURCE: https://github.com/tinacms/tinacms/blob/main/packages/@tinacms/graphql/src/spec/movies/content/movies/indiana-jones.mdx#2025-04-20_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntitle: Indiana Jones\ndirector: content/directors/george.md\ngenre: action\nrating: 8\n---\n```\n\n----------------------------------------\n\nTITLE: Installing TinaCMS Vercel Previews Package\nDESCRIPTION: This snippet shows the npm command to install the @tinacms/vercel-previews package, which is required for implementing Vercel's visual editing features with TinaCMS.\nSOURCE: https://github.com/tinacms/tinacms/blob/main/packages/@tinacms/vercel-previews/README.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @tinacms/vercel-previews\n```\n\n----------------------------------------\n\nTITLE: GraphQL List Query - Previous Implementation\nDESCRIPTION: Shows the previous simple array-based implementation for querying lists in GraphQL.\nSOURCE: https://github.com/tinacms/tinacms/blob/main/packages/tinacms/CHANGELOG.md#2025-04-20_snippet_37\n\nLANGUAGE: graphql\nCODE:\n```\n{\n    getPostsList {\n      id\n    }\n  }\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"data\": {\n      \"getPostsList\": [\n        {\n          \"id\": \"content/posts/voteForPedro.md\"\n        }\n      ]\n    }\n  }\n```\n\n----------------------------------------\n\nTITLE: Example JSON Response from dataJSON Query\nDESCRIPTION: Example of the JSON response returned when using the dataJSON field in a GraphQL query.\nSOURCE: https://github.com/tinacms/tinacms/blob/main/packages/@tinacms/graphql/CHANGELOG.md#2025-04-20_snippet_36\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"getThemeDocument\": {\n    \"dataJSON\": {\n      \"every\": \"field\",\n      \"in\": {\n        \"the\": \"document\"\n      },\n      \"is\": \"returned\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Frontmatter without Array Field in Markdown\nDESCRIPTION: Example of a markdown document with no categories field in the frontmatter. When queried, the categories field will return null instead of an empty array.\nSOURCE: https://github.com/tinacms/tinacms/blob/main/packages/@tinacms/cli/CHANGELOG.md#2025-04-20_snippet_23\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntitle: \"Hello, World\"\n---\n```\n\n----------------------------------------\n\nTITLE: Defining GraphQL Query for Fetching Pets\nDESCRIPTION: This snippet defines a GraphQL query to fetch pet details, including id, name, type, and image. It uses the gql template literal from 'graphql-tag'.\nSOURCE: https://github.com/tinacms/tinacms/blob/main/packages/@tinacms/mdx/src/next/tests/markdown-html-issues/out.md#2025-04-20_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst GET_PETS = gql`  query getPets {\n    pets {\n      id\n      name\n      type\n      img\n    }\n  }`;\n```\n\n----------------------------------------\n\nTITLE: Adding xref Support to Markdown Links\nDESCRIPTION: This snippet shows the syntax for supporting cross-reference links in markdown files using the `xref:` syntax. No additional dependencies are needed, and it ensures markdown renders correctly with the specified reference.\nSOURCE: https://github.com/tinacms/tinacms/blob/main/packages/@tinacms/mdx/CHANGELOG.md#2025-04-20_snippet_9\n\nLANGUAGE: markdown\nCODE:\n```\nClick [here](xref:some-link \"Tester\") to join now\n```\n\n----------------------------------------\n\nTITLE: Installing next-tinacms-s3 package\nDESCRIPTION: Commands for installing the next-tinacms-s3 package using Yarn or NPM package managers.\nSOURCE: https://github.com/tinacms/tinacms/blob/main/packages/next-tinacms-s3/README.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nyarn add next-tinacms-s3\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpm install next-tinacms-s3\n```\n\n----------------------------------------\n\nTITLE: Importing Dependencies for React and Apollo\nDESCRIPTION: This snippet imports necessary React and Apollo Client hooks along with components for rendering pets and a loading indicator. Requires React and Apollo Client libraries.\nSOURCE: https://github.com/tinacms/tinacms/blob/main/packages/@tinacms/mdx/src/next/tests/markdown-html-issues/out.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport React, {useState} from 'react'\nimport gql from 'graphql-tag'\nimport { useQuery, useMutation } from '@apollo/react-hooks'\nimport PetsList from '../components/PetsList'\nimport NewPetModal from '../components/NewPetModal'\nimport Loader from '../components/Loader'\n```\n\n----------------------------------------\n\nTITLE: Pets Component Definition - JavaScript\nDESCRIPTION: This snippet defines the main Pets functional component which initializes state for modal visibility and fetches pet data using the GET_PETS query. It handles loading and error states and returns the appropriate UI.\nSOURCE: https://github.com/tinacms/tinacms/blob/main/packages/@tinacms/mdx/src/next/tests/markdown-html-issues/in.md#2025-04-20_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nexport default function Pets () {\nconst [modal, setModal] = useState(false)\n\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconst { loading, error, data } = useQuery(GET_PETS);\n\nif (loading) return <Loader />;\n\nif (error) return <p>An error occured!</p>;\n```\n\n----------------------------------------\n\nTITLE: Querying dataJSON Field in Tina CMS (GraphQL)\nDESCRIPTION: Shows how to use the new 'dataJSON' field to retrieve the entire data object as a single query key in GraphQL.\nSOURCE: https://github.com/tinacms/tinacms/blob/main/packages/@tinacms/datalayer/CHANGELOG.md#2025-04-20_snippet_13\n\nLANGUAGE: graphql\nCODE:\n```\ngetThemeDocument(relativePath: $relativePath) {\n  dataJSON\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering Test Component with Highlight in React\nDESCRIPTION: This snippet demonstrates the rendering of a Test component in a React application, showcasing a two-column layout where the right column includes a nested Highlight component. The Highlight component is utilized to display specific content with potentially different styling or emphasis. This example assumes a React environment with appropriate component definitions for Test and Highlight available.\nSOURCE: https://github.com/tinacms/tinacms/blob/main/packages/@tinacms/mdx/src/next/tests/mdx-blocks-autoformat-nested-mdx/out.md#2025-04-20_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n<Test\n  leftColumn={<>\\n    foo bar baz left\\n  </>}\\n  rightColumn={<>\\n    foo bar baz right\\n    \\n    <Highlight\\n    content={<>\n    Foo bar baz\\n    </>}\\n    />\\n  </>}\\n/>\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\n<Test\\n  leftColumn={<>\\n    foo bar baz left\\n  </>}\\n  rightColumn={<>\\n    foo bar baz right\\n    \\n    <Highlight\\n    content={<>\\n    Foo bar baz\\n    </>}\\n    />\\n  </>}\\n/>\n```\n\n----------------------------------------\n\nTITLE: Starting GraphiQL Development App\nDESCRIPTION: Command to start the GraphiQL interactive testing application\nSOURCE: https://github.com/tinacms/tinacms/blob/main/packages/@tinacms/graphql/readme.md#2025-04-20_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\n// terminal 3\ncd apps/graphiql\nyarn start\n```\n\n----------------------------------------\n\nTITLE: Querying Lists with Old GraphQL API Pattern\nDESCRIPTION: Shows the previous pattern for querying lists in GraphQL, which returned a simple array of items directly.\nSOURCE: https://github.com/tinacms/tinacms/blob/main/packages/@tinacms/graphql/CHANGELOG.md#2025-04-20_snippet_37\n\nLANGUAGE: graphql\nCODE:\n```\n{\n  getPostsList {\n    id\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Example Markdown Content Structure\nDESCRIPTION: Shows a sample markdown file structure with frontmatter that demonstrates how content is stored in TinaCMS.\nSOURCE: https://github.com/tinacms/tinacms/blob/main/packages/@tinacms/graphql/src/database/README.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntitle: \"Hello\"\n---\n\nWorld!\n```\n\n----------------------------------------\n\nTITLE: Rendering New Pet Modal and Pets List\nDESCRIPTION: This snippet renders the modal for adding a new pet and displays a list of fetched pets. It manages the state of the modal using component state.\nSOURCE: https://github.com/tinacms/tinacms/blob/main/packages/@tinacms/mdx/src/next/tests/markdown-html-issues/out.md#2025-04-20_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst onSubmit = input => {\nsetModal(false)\n}\n\nif (modal) {\nreturn <NewPetModal onSubmit={onSubmit} onCancel={() => setModal(false)} />\n}\nreturn (\n<div className=\"page pets-page\">\n<section>\n<div className=\"row betwee-xs middle-xs\">\n<div className=\"col-xs-10\">\n<h1>Pets</h1>\n</div>\n<div className=\"col-xs-2\">\n<button onClick={() => setModal(true)}>new pet</button>\n</div>\n</div>\n</section>\n<section>\n<PetsList pets={data.pets}/>\n</section>\n</div>\n)\n}\n```\n\n----------------------------------------\n\nTITLE: Using GitHubProvider for Handling Git Operations in TypeScript\nDESCRIPTION: This snippet illustrates how to instantiate a GitHubProvider for managing Git operations within TinaCMS. It highlights the replacement of deprecated onPut and onDelete arguments with the gitProvider.\nSOURCE: https://github.com/tinacms/tinacms/blob/main/examples/kitchen-sink/CHANGELOG.md#2025-04-20_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst gitProvider = new GitHubProvider({\n  branch: process.env.GITHUB_BRANCH,\n  owner: process.env.GITHUB_OWNER,\n  repo: process.env.GITHUB_REPO,\n  token: process.env.GITHUB_PERSONAL_ACCESS_TOKEN,\n});\n```\n\n----------------------------------------\n\nTITLE: Blog Post Frontmatter Configuration in YAML\nDESCRIPTION: YAML frontmatter configuration block defining metadata for a blog post including title, hero image path, excerpt text, author reference and publication date.\nSOURCE: https://github.com/tinacms/tinacms/blob/main/examples/tina-self-hosted-demo/content/posts/voteForPedro.mdx#2025-04-20_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ntitle: Vote For Pedro\nheroImg: /uploads/unsplash-lylCw4zcA7I.jpg\nexcerpt: >\n  Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor\n  incididunt ut labore et dolore magna aliqua. Praesent elementum facilisis leo\n  vel fringilla est ullamcorper eget. At imperdiet dui accumsan sit amet nulla\n  facilities morbi tempus.\nauthor: content/authors/pedro.md\ndate: \"2021-07-03T20:30:00.000Z\"\n```\n\n----------------------------------------\n\nTITLE: Building Project for Production\nDESCRIPTION: Command to create a production build of the project\nSOURCE: https://github.com/tinacms/tinacms/blob/main/experimental-examples/tina-cloud-starter/README.md#2025-04-20_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nyarn build\n```\n\n----------------------------------------\n\nTITLE: Handling Modal Submission - JavaScript\nDESCRIPTION: This snippet defines the onSubmit function used to handle the submission of new pets through the modal. It closes the modal when submission is complete.\nSOURCE: https://github.com/tinacms/tinacms/blob/main/packages/@tinacms/mdx/src/next/tests/markdown-html-issues/in.md#2025-04-20_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst onSubmit = input => {\nsetModal(false)\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Type Definition in TinaCMS\nDESCRIPTION: Example of a basic string type definition in the new schema format, representing the lowest form of the shape.\nSOURCE: https://github.com/tinacms/tinacms/blob/main/packages/@tinacms/graphql/CHANGELOG.md#2025-04-20_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  type: \"string\",\n  label: \"Description\",\n  name: \"description\",\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies with Yarn\nDESCRIPTION: Command to install all project dependencies using Yarn package manager\nSOURCE: https://github.com/tinacms/tinacms/blob/main/experimental-examples/tina-cloud-starter/README.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nyarn install\n```\n\n----------------------------------------\n\nTITLE: Configuring Page Frontmatter in Tina CMS\nDESCRIPTION: Defines a basic page configuration using YAML frontmatter with a title property. Used for metadata and content organization in static site generators.\nSOURCE: https://github.com/tinacms/tinacms/blob/main/packages/@tinacms/graphql/tests/is-title/in.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntitle: Hello\n---\n```\n\n----------------------------------------\n\nTITLE: Updated Database Configuration with Renamed Properties\nDESCRIPTION: Example showing the diff when migrating from the old level property to the new databaseAdapter property in TinaCMS database configuration.\nSOURCE: https://github.com/tinacms/tinacms/blob/main/packages/tinacms/CHANGELOG.md#2025-04-20_snippet_2\n\nLANGUAGE: diff\nCODE:\n```\ncreateDatabase({\n-    level: new MongodbLevel<string, Record<string, any>>(...),\n+    databaseAdapter: new MongodbLevel<string, Record<string, any>>(...),\n})\n```\n\n----------------------------------------\n\nTITLE: Frontmatter with Array in Markdown\nDESCRIPTION: Example of a markdown document with a categories array defined in the frontmatter. This represents a valid document structure with populated list fields.\nSOURCE: https://github.com/tinacms/tinacms/blob/main/packages/@tinacms/cli/CHANGELOG.md#2025-04-20_snippet_21\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntitle: \"Hello, World\"\ncategories:\n  - sports\n  - movies\n---\n```\n\n----------------------------------------\n\nTITLE: CTA Component Example with Markdown\nDESCRIPTION: This code snippet demonstrates a Call to Action (CTA) component with markdown content. The component is designed to render a clickable area with a text label. The markdown content allows for formatting, such as bold text, within the CTA.\nSOURCE: https://github.com/tinacms/tinacms/blob/main/packages/@tinacms/mdx/src/next/tests/mdx-blocks-rich-text-children/in.md#2025-04-20_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n\"<Cta\\n>\\n  ## Click **here**!\\n</Cta>\"\n```\n\n----------------------------------------\n\nTITLE: React Component with Possible Invalid State\nDESCRIPTION: Example of a React component that could fail during editing if a required list field is null.\nSOURCE: https://github.com/tinacms/tinacms/blob/main/packages/@tinacms/graphql/CHANGELOG.md#2025-04-20_snippet_29\n\nLANGUAGE: tsx\nCODE:\n```\nconst MyPage = (props) => {\n  return props.blocks.map((block) => {\n    return (\n      <>\n        <h2>{block.categories.split(\",\")}</h2>\n      </>\n    );\n  });\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Author Profile in TinaCMS YAML\nDESCRIPTION: YAML frontmatter template defining an author profile with name and social media information. The template includes basic author details and a social media array for platform-specific handles.\nSOURCE: https://github.com/tinacms/tinacms/blob/main/packages/@tinacms/graphql/src/spec/forestry-sample/content/authors/homer.md#2025-04-20_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nname: Homer J Simpson\nsocialMedia:\n  - platform: twitter\n    handle: homer\n_template: author\n---\n```\n\n----------------------------------------\n\nTITLE: Setting Site Logo in Hugo\nDESCRIPTION: To set a custom logo for your Hugo site, upload the logo file to the 'static' directory and specify its path in the 'site_logo' parameter under the params section. This replaces the default textual site title with the logo image.\nSOURCE: https://github.com/tinacms/tinacms/blob/main/examples/hugo-quickstart/themes/ananke/README.md#2025-04-20_snippet_10\n\nLANGUAGE: TOML\nCODE:\n```\n[params]\n  site_logo = \"img/logo.svg\"\n```\n\n----------------------------------------\n\nTITLE: TinaCMS Action Component with Link Template\nDESCRIPTION: This snippet shows how to use the `<Action>` component with the `link` template.  When triggered, it navigates to the URL specified in the `url` property. The `_template` property is set to `link` to indicate the desired action type.\nSOURCE: https://github.com/tinacms/tinacms/blob/main/packages/@tinacms/mdx/src/next/tests/mdx-block-object-list-template/in.md#2025-04-20_snippet_1\n\nLANGUAGE: JSX\nCODE:\n```\n<Action\n  action={{\n    _template: \"link\",\n    title: \"Say hello\",\n    url: \"http://example.com\"\n  }}\n/>\n```\n\n----------------------------------------\n\nTITLE: GraphQL Query with Templates Example\nDESCRIPTION: Example of a GraphQL query that requires disambiguation due to the use of templates in collections.\nSOURCE: https://github.com/tinacms/tinacms/blob/main/packages/@tinacms/graphql/CHANGELOG.md#2025-04-20_snippet_16\n\nLANGUAGE: graphql\nCODE:\n```\ngetPostDocument(relativePage: $relativePath) {\n  data {\n    ...on Article_Doc_Data {\n      title\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: TinaCMS Changelog Entries\nDESCRIPTION: Detailed version history showing package updates and dependency changes for TinaCMS related packages. Includes patches, dependency updates, and version increments from 0.69.8 through 1.2.0.\nSOURCE: https://github.com/tinacms/tinacms/blob/main/examples/basic-iframe/CHANGELOG.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n### Patch Changes\n\n- Updated dependencies [efd56e769]\n- Updated dependencies [efd56e769]\n- Updated dependencies [50f86caed]\n  - @tinacms/datalayer@1.1.0\n  - @tinacms/graphql@1.2.0\n  - tinacms@1.2.0\n```\n\n----------------------------------------\n\nTITLE: Registering Custom CSS Files in Hugo\nDESCRIPTION: To register custom CSS files in a Hugo project, specify the file paths relative to the 'assets/ananke/css' directory in the 'custom_css' key under the params section in the config file. This allows Hugo to compile them into the 'main.css' file. All files must be of the same type and the function is currently supported only with Hugo Extended.\nSOURCE: https://github.com/tinacms/tinacms/blob/main/examples/hugo-quickstart/themes/ananke/README.md#2025-04-20_snippet_9\n\nLANGUAGE: TOML\nCODE:\n```\n[params]\n  custom_css = [\"custom.css\",\"special.css\"]\n```\n\n----------------------------------------\n\nTITLE: Database Migration: Renaming Level to databaseAdapter\nDESCRIPTION: This code snippet shows the renaming of the `level` property to `databaseAdapter` in the `createDatabase` configuration. This change aims to improve code clarity and maintainability.\nSOURCE: https://github.com/tinacms/tinacms/blob/main/packages/@tinacms/cli/CHANGELOG.md#2025-04-20_snippet_2\n\nLANGUAGE: diff\nCODE:\n```\ncreateDatabase({\n-    level: new MongodbLevel<string, Record<string, any>>(...),\n+    databaseAdapter: new MongodbLevel<string, Record<string, any>>(...),\n})\n```\n\n----------------------------------------\n\nTITLE: Initializing Action Component with Link Template\nDESCRIPTION: This snippet initializes an Action component configured to act as a link. It features a title and a URL attribute. This component is useful for redirecting users to external resources or pages. Dependencies include the TinaCMS library, and the expected input values are the _template, title, and url.\nSOURCE: https://github.com/tinacms/tinacms/blob/main/packages/@tinacms/mdx/src/next/tests/mdx-block-object-list-template/out.md#2025-04-20_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n<Action\n  action={{\n    _template: \"link\",\n    title: \"Say hello\",\n    url: \"http://example.com\"\n  }}\n/>\n```\n\n----------------------------------------\n\nTITLE: React Component with Potential Null List Issue\nDESCRIPTION: Example of a component that could encounter errors if dealing with null list fields during editing. This illustrates why defaultItem is required for required list fields.\nSOURCE: https://github.com/tinacms/tinacms/blob/main/packages/tinacms/CHANGELOG.md#2025-04-20_snippet_29\n\nLANGUAGE: tsx\nCODE:\n```\nconst MyPage = (props) => {\n  return props.blocks.map((block) => {\n    return (\n      <>\n        <h2>{block.categories.split(\",\")}</h2>\n      </>\n    );\n  });\n};\n```\n\n----------------------------------------\n\nTITLE: Defining YAML Frontmatter\nDESCRIPTION: YAML frontmatter block defining metadata including title and topic tags for the document.\nSOURCE: https://github.com/tinacms/tinacms/blob/main/examples/basic-iframe/content/post/HelloWorld.md#2025-04-20_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntitle: This is a title\ntopic:\n  - programming\n  - blacksmithing\n---\n```\n\n----------------------------------------\n\nTITLE: Configuring Tina Webpack Helpers for Next.js\nDESCRIPTION: This snippet shows how to set up Tina Webpack Helpers in a Next.js project's webpack configuration. It uses the aliasTinaDev function to alias TinaCMS packages to the local monorepo during development.\nSOURCE: https://github.com/tinacms/tinacms/blob/main/packages/@tinacms/webpack-helpers/README.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst tinaWebpackHelpers = require('@tinacms/webpack-helpers')\n\n...\n\nmodule.exports = {\n  webpack: (config, { buildId, dev, isServer, defaultLoaders, webpack }) => {\n    if (dev) {\n      tinaWebpackHelpers.aliasTinaDev(config, '../tinacms')\n    }\n    return config\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Inserting Links in Markdown\nDESCRIPTION: This snippet shows how to create hyperlinks in Markdown. The snippet includes both links with and without title attributes. There are no dependencies required. The expected input is the link text and URL, and the output appears as clickable links in rendered Markdown.\nSOURCE: https://github.com/tinacms/tinacms/blob/main/packages/@tinacms/mdx/src/next/tests/markdown-basic-kitchen-sink/out.md#2025-04-20_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\nThis is [an example](http://example.com \"Example\") link.\n\n[This link](http://example.com) has no title attr.\n```\n\n----------------------------------------\n\nTITLE: React Component for Call-to-Action\nDESCRIPTION: The Cta component renders a call-to-action button on the page, with a customizable title property. It can be used multiple times within host components and requires no additional dependencies. The primary input is the title parameter which specifies button text.\nSOURCE: https://github.com/tinacms/tinacms/blob/main/packages/@tinacms/graphql/src/spec/movies/content/movies/star-wars.mdx#2025-04-20_snippet_1\n\nLANGUAGE: HTML\nCODE:\n```\n<Cta title=\\\"ok\\\"/>\n```\n\n----------------------------------------\n\nTITLE: Markdown Frontmatter Example\nDESCRIPTION: This snippet illustrates the frontmatter section of a Markdown file. It contains metadata about the blog post such as title, hero image, excerpt, author, and date.  The frontmatter is typically used by static site generators or CMS like TinaCMS to manage and display content.\nSOURCE: https://github.com/tinacms/tinacms/blob/main/experimental-examples/tina-cloud-starter/content/posts/anotherPost.mdx#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntitle: 'Just Another Blog Post '\nheroImg: /uploads/unsplash-lylCw4zcA7I.jpg\nexcerpt: >\n  Lorem markdownum evinctus ut cape adhaeret gravis licet progenies ut haesit\n  maxima ille. Est scorpius, mori vel in visaeque Haemoniis viperei furoris e ad\n  vasti, distulit. Crudus sub coniuge iam: dea propera sive\nauthor: content/authors/napolean.md\ndate: 2021-07-12T07:00:00.000Z\n---\n\n```\n\n----------------------------------------\n\nTITLE: Linking with Code in Markdown\nDESCRIPTION: This snippet demonstrates embedding links within code blocks to illustrate code that contains URLs. There are no dependencies necessary for this syntax. The expected input is a code-like string that includes a hyperlink, and the output will be a rendered link in a code context.\nSOURCE: https://github.com/tinacms/tinacms/blob/main/packages/@tinacms/mdx/src/next/tests/markdown-basic-kitchen-sink/out.md#2025-04-20_snippet_5\n\nLANGUAGE: markdown\nCODE:\n```\nThis is a [`link in code`](http://example.com)\n\nThis is a [*bold mark* in a link](http://example.com)\n```\n\n----------------------------------------\n\nTITLE: Implementing Hugo Form Shortcode\nDESCRIPTION: Hugo shortcode implementation for a contact form that can be integrated with Formspree for form submission handling.\nSOURCE: https://github.com/tinacms/tinacms/blob/main/examples/hugo-quickstart/themes/ananke/exampleSite/content/en/contact.md#2025-04-20_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n{{< form-contact action=\"https://example.com\"  >}}\n```\n\n----------------------------------------\n\nTITLE: Adding Ananke Theme to Hugo Configuration\nDESCRIPTION: TOML configuration to add the Ananke theme to your Hugo project using the module system.\nSOURCE: https://github.com/tinacms/tinacms/blob/main/examples/hugo-quickstart/themes/ananke/README.md#2025-04-20_snippet_2\n\nLANGUAGE: toml\nCODE:\n```\ntheme = [\"github.com/theNewDynamic/gohugo-theme-ananke\"]\n```\n\n----------------------------------------\n\nTITLE: Database Configuration: Consolidated Example\nDESCRIPTION: This provides a consolidated example of the updated `database.ts` or `database.js` file, incorporating the use of `createDatabase`, `createLocalDatabase`, `GitHubProvider`, and `MongodbLevel`.  It demonstrates a complete database setup, switching between local and remote configurations based on the `isLocal` environment variable.\nSOURCE: https://github.com/tinacms/tinacms/blob/main/examples/tina-self-hosted-demo/CHANGELOG.md#2025-04-20_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createDatabase, createLocalDatabase, GitHubProvider } from '@tinacms/datalayer';\n  import { MongodbLevel } from 'mongodb-level';\n  const isLocal = process.env.TINA_PUBLIC_IS_LOCAL === 'true';\n  export default isLocal\n    ? createLocalDatabase()\n    : createDatabase({\n        gitProvider: new GitHubProvider(...),\n        databaseAdapter: new MongodbLevel<string, Record<string, any>>(...),\n      });\n```\n\n----------------------------------------\n\nTITLE: Table component in TinaCMS using JSX\nDESCRIPTION: This JSX snippet defines a Table component and populates it with a single row. The row contains a single column, which in turn has content that defines a markdown header.\nSOURCE: https://github.com/tinacms/tinacms/blob/main/packages/@tinacms/mdx/src/next/tests/mdx-basic-nested-objects-2/in.md#2025-04-20_snippet_0\n\nLANGUAGE: JSX\nCODE:\n```\n\"<Table rows={[\\n    {\\n      columns: [\\n        {\\n          content: {\\n            description: \\\"# Hello\\\"\\n          }\\n        }\\n      ]\\n    }\\n  ]} />\"\n```\n\n----------------------------------------\n\nTITLE: Executing TinaCMS Initialization Command in Shell\nDESCRIPTION: This snippet shows the shell command to run the TinaCMS CLI to initialize TinaCMS in a Next.js project. It utilizes the pnpm package manager to execute the CLI script located in the specified path. Ensure that you have pnpm installed as a prerequisite.\nSOURCE: https://github.com/tinacms/tinacms/blob/main/examples/empty/README.md#2025-04-20_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\npnpm exec ../../packages/@tinacms/cli/bin/tinacms init\n```\n\n----------------------------------------\n\nTITLE: Configuring Hugo Theme Frontmatter in YAML\nDESCRIPTION: Sets up the basic configuration for the Ananke Hugo theme including title, description, theme version, and cascade settings for featured images. Contains a comment about ensuring Netlify builds trigger correctly.\nSOURCE: https://github.com/tinacms/tinacms/blob/main/examples/hugo-quickstart/themes/ananke/exampleSite/content/en/_index.md#2025-04-20_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ntitle: \"Ananke: a Hugo Theme\"\n\ndescription: \"The last theme you'll ever need. Maybe.\"\n# 1. To ensure Netlify triggers a build on our exampleSite instance, we need to change a file in the exampleSite directory.\ntheme_version: '2.8.2'\ncascade:\n  featured_image: '/images/gohugo-default-sample-hero-image.jpg'\n```\n\n----------------------------------------\n\nTITLE: Resolving TinaCMS Field Data in JSON\nDESCRIPTION: JSON snippet showing resolved field data from TinaCMS. This specific example demonstrates how a text field's resolver would convert its field data into a JSON object used by TinaCMS for rendering client-side views.\nSOURCE: https://github.com/tinacms/tinacms/blob/main/packages/@tinacms/datalayer/readme.md#2025-04-20_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"title\",\n  \"label\": \"Title\",\n  \"component\": \"text\"\n}\n```\n\n----------------------------------------\n\nTITLE: Markdown Link with Bold & Emphasized Text\nDESCRIPTION: This snippet shows how to create a hyperlink with bold and emphasized text as the display text.  It also include surrounding text and another link to illustrate mixed content.\nSOURCE: https://github.com/tinacms/tinacms/blob/main/packages/@tinacms/mdx/src/next/tests/markdown-basic-marks/out.md#2025-04-20_snippet_7\n\nLANGUAGE: Markdown\nCODE:\n```\n\"***Hello [world](https://example.com \\\"Example Site\\\")** And some other text, which has a [link to something](https://something.com)*\"\n```\n\n----------------------------------------\n\nTITLE: Rendering String Array Prop\nDESCRIPTION: This code snippet shows how to render a React component called `Tags` and pass an array of strings ([`one`, `two`]) as the `items` prop. The component will likely render these strings as tags.\nSOURCE: https://github.com/tinacms/tinacms/blob/main/packages/@tinacms/mdx/src/next/tests/mdx-block-scalar-fields/in.md#2025-04-20_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\n<Tags items={[\"one\", \"two\"]} />\n```\n\n----------------------------------------\n\nTITLE: Defining YAML Frontmatter Metadata\nDESCRIPTION: YAML frontmatter block that defines basic metadata for a content piece, including name (Melbourne - Napoleon), description (authorship info), and location (melbourne).\nSOURCE: https://github.com/tinacms/tinacms/blob/main/experimental-examples/kitchen-sink/content/author/Napolean.md#2025-04-20_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nname: Melbourne - Napoleon\ndescription: Napolean is the first author\nlocation: melbourne\n---\n```\n\n----------------------------------------\n\nTITLE: Markdown Frontmatter with Categories Example\nDESCRIPTION: Example of a markdown document with categories defined in the frontmatter.\nSOURCE: https://github.com/tinacms/tinacms/blob/main/packages/@tinacms/graphql/CHANGELOG.md#2025-04-20_snippet_26\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntitle: \"Hello, World\"\ncategories:\n  - sports\n  - movies\n---\n```\n\n----------------------------------------\n\nTITLE: YAML Frontmatter\nDESCRIPTION: This snippet defines the YAML frontmatter for a content page, including title, rating, genre, and a reference to a director's content file. It's commonly used for structured data in static site generators like TinaCMS.\nSOURCE: https://github.com/tinacms/tinacms/blob/main/packages/@tinacms/graphql/src/spec/movies/mutations/updateDocument/_response.md#2025-04-20_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntitle: A New Hope\nrating: 10\ngenre: scifi\ndirector: content/directors/george.md\n---\n```\n\n----------------------------------------\n\nTITLE: Custom GitProvider Implementation in TinaCMS\nDESCRIPTION: This code snippet outlines how to implement a custom GitProvider in TinaCMS by implementing the GitProvider interface. It requires implementing the `onPut` and `onDelete` methods. This allows users to integrate TinaCMS with git providers other than GitHub.\nSOURCE: https://github.com/tinacms/tinacms/blob/main/experimental-examples/tina-cloud-starter/CHANGELOG.md#2025-04-20_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nclass CustomGitProvider implements GitProvider {\n      async onPut(key: string, value: string) {\n          // ...\n      }\n\n      async onDelete(key: string) {\n          // ...\n      }\n  }\n\n\n  const gitProvider = new CustomGitProvider();\n```\n\n----------------------------------------\n\nTITLE: Querying Page Title with GraphQL\nDESCRIPTION: A GraphQL query that retrieves the title of a page based on its relative path. The query accepts a relativePath parameter to identify which page to fetch data from.\nSOURCE: https://github.com/tinacms/tinacms/blob/main/examples/kitchen-sink/content/post/large-file.mdx#2025-04-20_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\nquery MyQuery($relativePath: String!) {\n  page(relativePath: $relativePath) {\n    title\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Starting Next.js Development Server\nDESCRIPTION: Commands to start the Next.js development server using different package managers (npm, yarn, pnpm, or bun). The server will run on localhost:3000 by default.\nSOURCE: https://github.com/tinacms/tinacms/blob/main/examples/next-2024/README.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm run dev\n# or\nyarn dev\n# or\npnpm dev\n# or\nbun dev\n```\n\n----------------------------------------\n\nTITLE: Basic YAML Frontmatter Configuration\nDESCRIPTION: YAML frontmatter block defining basic metadata including name, description and location fields. Uses standard frontmatter delimiters (---) to mark the configuration section.\nSOURCE: https://github.com/tinacms/tinacms/blob/main/experimental-examples/kitchen-sink/content/author/napolean 3.md#2025-04-20_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nname: Sydney - Napolean\ndescription: test\nlocation: sydney\n---\n```\n\n----------------------------------------\n\nTITLE: Configuring Cloudinary Media Store HTTPS in TypeScript\nDESCRIPTION: Shows how to configure the Cloudinary media store to use HTTPS or revert to HTTP. The default setting is now HTTPS, but can be overridden using the useHttps option when creating the media handler.\nSOURCE: https://github.com/tinacms/tinacms/blob/main/packages/next-tinacms-dos/CHANGELOG.md#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport default createMediaHandler(\n  {\n    // ...\n  },\n  {\n    useHttps: false,\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Representing Lists in Markdown\nDESCRIPTION: This snippet demonstrates the syntax for representing lists, including both unordered and ordered lists in Markdown. There are no dependencies as this is basic Markdown syntax. The expected input is a list of items, which will be rendered as a list in a Markdown processor. Outputs will vary based on the Markdown renderer used, but it typically displays as bullet points or numbered lists.\nSOURCE: https://github.com/tinacms/tinacms/blob/main/packages/@tinacms/mdx/src/next/tests/markdown-basic-kitchen-sink/out.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n- Red\n- Green\n- Blue\n```\n\n----------------------------------------\n\nTITLE: Rendering Table with JSX in JavaScript\nDESCRIPTION: This code snippet demonstrates how to render a table using JSX by creating a Table component with rows and columns to display Markdown content, specifically a header with 'Hello World'. This operation assumes TinaCMS is set up in the environment to render components using JSX.\nSOURCE: https://github.com/tinacms/tinacms/blob/main/packages/@tinacms/mdx/src/next/tests/mdx-basic-nested-objects-3/out.md#2025-04-20_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n<Table rows={[{ columns: [{ content: \\\"# Hello <World />\\n\\\" }] }]} />\n```\n\n----------------------------------------\n\nTITLE: TinaCloud Environment Variables\nDESCRIPTION: Environment variable configuration for connecting to TinaCloud in production.\nSOURCE: https://github.com/tinacms/tinacms/blob/main/examples/tina-self-hosted-demo/content/pages/about.md#2025-04-20_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nNEXT_PUBLIC_ORGANIZATION_NAME= <YOUR_ORGANIZATION>\nNEXT_PUBLIC_TINA_CLIENT_ID= <YOUR_CLIENT_ID>\n```\n\n----------------------------------------\n\nTITLE: Markdown Version History\nDESCRIPTION: Changelog entries documenting version updates and dependency changes for the TinaCMS empty starter template. Each entry includes version number, patch changes, and dependency version updates.\nSOURCE: https://github.com/tinacms/tinacms/blob/main/examples/empty/CHANGELOG.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# starter-empty\n\n## 0.0.30\n\n### Patch Changes\n\n- Updated dependencies [[`921f235`](https://github.com/tinacms/tinacms/commit/921f2356e4615d532d02eefa7103fdb70f83b97a), [`ab43169`](https://github.com/tinacms/tinacms/commit/ab43169af5a95f31fa27bb0236623a031883a1fd), [`b551232`](https://github.com/tinacms/tinacms/commit/b5512326ad0ad9855bc75e2073a3ab2a8ec4c064), [`ea204c9`](https://github.com/tinacms/tinacms/commit/ea204c9045451f3ebea04f503e6158d2016613e4), [`fd664d8`](https://github.com/tinacms/tinacms/commit/fd664d8f4e83941ed1b1f234668ab6341a6178f8)]]:\n  - tinacms@2.7.5\n  - @tinacms/cli@1.9.5\n```\n\n----------------------------------------\n\nTITLE: Defining User Profile in YAML Front Matter\nDESCRIPTION: YAML configuration block that defines user profile data including name, biography, hobbies list, and profile image path. Uses front matter delimiters (---) to mark the YAML block.\nSOURCE: https://github.com/tinacms/tinacms/blob/main/examples/kitchen-sink/content/authors/napolean.md#2025-04-20_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nname: Napolean\nbio: |\n  Like's his tots\nhobbies:\n  - Dancing\nimage: /uploads/llama-4.avif\n---\n```\n\n----------------------------------------\n\nTITLE: Authentication Configuration: Old API\nDESCRIPTION: This shows the previous API for configuring authentication within the `defineConfig` function. It highlights the use of the `admin.auth` property with login and logout functions.\nSOURCE: https://github.com/tinacms/tinacms/blob/main/examples/tina-self-hosted-demo/CHANGELOG.md#2025-04-20_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\ndefineConfig({\n    admin: {\n      auth: {\n        login() {},\n        logout() {},\n        //...\n      },\n    },\n    //...\n  });\n```\n\n----------------------------------------\n\nTITLE: Defining Markdown Frontmatter for Tina CMS Introduction\nDESCRIPTION: This snippet demonstrates how to define frontmatter in a Markdown file for Tina CMS. It sets the title of the page to 'Intro to Tina'.\nSOURCE: https://github.com/tinacms/tinacms/blob/main/examples/kitchen-sink/content/documentation/intro-to-tina.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntitle: Intro to Tina\n---\n```\n\n----------------------------------------\n\nTITLE: Setting up media delivery routes\nDESCRIPTION: API route setup for handling media delivery requests, typically placed in app/api/media/[...path]/route.ts.\nSOURCE: https://github.com/tinacms/tinacms/blob/main/packages/next-tinacms-azure/README.md#2025-04-20_snippet_4\n\nLANGUAGE: ts\nCODE:\n```\nimport { createMediaDeliveryHandlers } from 'next-tinacms-azure/dist/delivery-handlers'\n\nconst handlers = createMediaDeliveryHandlers({\n  connectionString: process.env.AZURE_STORAGE_CONNECTION_STRING!,\n  containerName: process.env.AZURE_STORAGE_CONTAINER_NAME!,\n  authorized: async () => {\n    return true\n  },\n})\n\nconst { GET } = handlers\n\nexport { GET }\n```\n\n----------------------------------------\n\nTITLE: YAML Front Matter Name Definition\nDESCRIPTION: A YAML front matter block that defines a name field with the value 'Harrison Ford'. Uses triple dashes for delimiting the front matter section.\nSOURCE: https://github.com/tinacms/tinacms/blob/main/packages/@tinacms/graphql/src/spec/movies/content/actors/harrison.md#2025-04-20_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nname: Harrison Ford\n---\n```\n\n----------------------------------------\n\nTITLE: Database Adapter Update in TinaCMS\nDESCRIPTION: This diff snippet illustrates the renaming of the `level` property to `databaseAdapter` when configuring the TinaCMS database. This change improves clarity and maintainability of the code. It shows the old and new property names within the createDatabase configuration.\nSOURCE: https://github.com/tinacms/tinacms/blob/main/experimental-examples/tina-cloud-starter/CHANGELOG.md#2025-04-20_snippet_4\n\nLANGUAGE: diff\nCODE:\n```\ncreateDatabase({\n-    level: new MongodbLevel<string, Record<string, any>>(...),\n+    databaseAdapter: new MongodbLevel<string, Record<string, any>>(...),\n})\n```\n\n----------------------------------------\n\nTITLE: Defining YAML Frontmatter in Markdown\nDESCRIPTION: A YAML frontmatter block that defines basic metadata (name) at the top of a markdown document. The frontmatter is enclosed by triple dashes (---) and uses standard YAML key-value syntax.\nSOURCE: https://github.com/tinacms/tinacms/blob/main/packages/@tinacms/graphql/src/spec/movies/content/directors/george.md#2025-04-20_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nname: George Lucas\n---\n```\n\n----------------------------------------\n\nTITLE: Hugo Shortcode Usage\nDESCRIPTION: This snippet shows how to use a Hugo shortcode.  The 'some-feature' shortcode is being called and content is being passed into it. Hugo will process this shortcode during site generation.\nSOURCE: https://github.com/tinacms/tinacms/blob/main/packages/@tinacms/mdx/src/next/tests/markdown-shortcodes-rich-text-children/out.md#2025-04-20_snippet_0\n\nLANGUAGE: hugo\nCODE:\n```\n\"{{\" + \"< some-feature >}}\"\nTesting this thing\n\"{{\" + \"< /some-feature >}}\"\n```\n\n----------------------------------------\n\nTITLE: Starting Development Server\nDESCRIPTION: Command to start the local development server which runs both the GraphQL server and Next.js application.\nSOURCE: https://github.com/tinacms/tinacms/blob/main/examples/tina-self-hosted-demo/content/pages/about.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn dev\n```\n\n----------------------------------------\n\nTITLE: Old Polymorphic Object Structure\nDESCRIPTION: Shows the old format for polymorphic objects (formerly called blocks) which used template as the discriminator field.\nSOURCE: https://github.com/tinacms/tinacms/blob/main/packages/@tinacms/graphql/CHANGELOG.md#2025-04-20_snippet_45\n\nLANGUAGE: md\nCODE:\n```\n---\n---\n\nmyBlocks:\n\n- template: hero\n  title: Hello\n\n---\n```\n\n----------------------------------------\n\nTITLE: YAML Frontmatter Profile Configuration\nDESCRIPTION: Defines basic profile metadata including a name field and avatar image path using YAML frontmatter syntax. The configuration uses --- delimiters to separate the frontmatter section.\nSOURCE: https://github.com/tinacms/tinacms/blob/main/experimental-examples/tina-cloud-starter/content/authors/napolean.md#2025-04-20_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nname: Napolean\navatar: /uploads/llama-2.avif\n---\n```\n\n----------------------------------------\n\nTITLE: Changelog Entry Formatting\nDESCRIPTION: Structured changelog entry showing version changes, patch details, and dependency updates.\nSOURCE: https://github.com/tinacms/tinacms/blob/main/experimental-examples/tina-cloud-starter/CHANGELOG.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## 0.1.63\n\n### Patch Changes\n\n- [#5602](https://github.com/tinacms/tinacms/pull/5602) [`ab43169`](https://github.com/tinacms/tinacms/commit/ab43169af5a95f31fa27bb0236623a031883a1fd) Thanks [@wicksipedia](https://github.com/wicksipedia)! - fix naming of TinaCloud\n\n- Updated dependencies [[`921f235`](https://github.com/tinacms/tinacms/commit/921f2356e4615d532d02eefa7103fdb70f83b97a), [`ab43169`](https://github.com/tinacms/tinacms/commit/ab43169af5a95f31fa27bb0236623a031883a1fd), [`b551232`](https://github.com/tinacms/tinacms/commit/b5512326ad0ad9855bc75e2073a3ab2a8ec4c064), [`ea204c9`](https://github.com/tinacms/tinacms/commit/ea204c9045451f3ebea04f503e6158d2016613e4), [`fd664d8`](https://github.com/tinacms/tinacms/commit/fd664d8f4e83941ed1b1f234668ab6341a6178f8)]:\n  - tinacms@2.7.5\n  - @tinacms/vercel-previews@0.0.63\n  - @tinacms/mdx@1.6.2\n```\n\n----------------------------------------\n\nTITLE: YAML Frontmatter Configuration\nDESCRIPTION: YAML frontmatter configuration block defining the page title, author reference, and categories.\nSOURCE: https://github.com/tinacms/tinacms/blob/main/examples/kitchen-sink/content/post/tinacms-v0.69.7.mdx#2025-04-20_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ntitle: Some Titledfs\nauthor: content/authors/pedro.md\ncategories:\n  - nextjs\n```\n\n----------------------------------------\n\nTITLE: Adding Contact Form Shortcode in Hugo\nDESCRIPTION: Hugo shortcode to add a contact form to a page using Formspree as the form backend.\nSOURCE: https://github.com/tinacms/tinacms/blob/main/examples/hugo-quickstart/themes/ananke/README.md#2025-04-20_snippet_5\n\nLANGUAGE: go\nCODE:\n```\n{{< form-contact action=\"https://formspree.io/your@email.com\" >}}\n```\n\n----------------------------------------\n\nTITLE: Configuring Social Media Links in Hugo\nDESCRIPTION: YAML configuration to add social media follow links to your Hugo site using the Ananke theme.\nSOURCE: https://github.com/tinacms/tinacms/blob/main/examples/hugo-quickstart/themes/ananke/README.md#2025-04-20_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nparams:\n  ananke_socials:\n  - name: twitter\n    url: https://twitter.com/theNewDynamic\n  - name: github\n    url: https://github.com/theNewDynamic\n```\n\n----------------------------------------\n\nTITLE: Example Markdown Content\nDESCRIPTION: Sample markdown file showing frontmatter structure used in TinaCMS\nSOURCE: https://github.com/tinacms/tinacms/blob/main/packages/@tinacms/graphql/readme.md#2025-04-20_snippet_4\n\nLANGUAGE: md\nCODE:\n```\n---\ntitle: Hello, World!\nauthor: /authors/homer.md\n---\n```\n\n----------------------------------------\n\nTITLE: YAML Front Matter Configuration\nDESCRIPTION: Basic YAML front matter block defining test metadata with a title and empty author field.\nSOURCE: https://github.com/tinacms/tinacms/blob/main/experimental-examples/kitchen-sink/content/post/test.md#2025-04-20_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntitle: test\nauthor: ''\n---\n```\n\n----------------------------------------\n\nTITLE: Running Playwright Tests Manually\nDESCRIPTION: Command for running Playwright end-to-end tests in the tina-playwright directory. This executes all tests in the test suite.\nSOURCE: https://github.com/tinacms/tinacms/blob/main/playwright/tina-playwright/README.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx playwright test\n```\n\n----------------------------------------\n\nTITLE: Starting TinaCMS Development Server\nDESCRIPTION: Commands to start the TinaCMS development server using either npm or yarn package managers.\nSOURCE: https://github.com/tinacms/tinacms/blob/main/examples/basic-iframe/README.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm run dev\n# or\nyarn dev\n```\n\n----------------------------------------\n\nTITLE: Configuring Blog Post Frontmatter in YAML\nDESCRIPTION: YAML frontmatter configuration for a blog post that specifies the title, author path reference, and post categories.\nSOURCE: https://github.com/tinacms/tinacms/blob/main/examples/kitchen-sink/content/post/my-folder/a-sub-file.mdx#2025-04-20_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntitle: Some nested file\nauthor: content/authors/napolean.md\ncategories:\n  - nextjs\n---\n```\n\n----------------------------------------\n\nTITLE: Running Hugo in Development\nDESCRIPTION: To preview changes during development, use Hugo's local server by running the command `hugo server` and accessing the site at 'localhost:1313' in the web browser.\nSOURCE: https://github.com/tinacms/tinacms/blob/main/examples/hugo-quickstart/themes/ananke/README.md#2025-04-20_snippet_13\n\nLANGUAGE: Shell\nCODE:\n```\n$ hugo server\n```\n\n----------------------------------------\n\nTITLE: Displaying Recent Posts using Shortcode\nDESCRIPTION: This snippet demonstrates the use of a shortcode to display a list of the five most recent posts in a CMS environment. The 'posts' parameter specifies the number of posts to retrieve. The output is typically rendered directly on a webpage, dynamically displaying content based on the parameter.\nSOURCE: https://github.com/tinacms/tinacms/blob/main/packages/@tinacms/mdx/src/next/tests/wordpress-style-2/out.md#2025-04-20_snippet_0\n\nLANGUAGE: plain text\nCODE:\n```\n[ recent-posts posts=\\\"5\\\" ]\n```\n\n----------------------------------------\n\nTITLE: Setting Global Content Font Color\nDESCRIPTION: This setting allows users to specify the font color for the site's main content at a global level via the 'text_color' parameter in the 'config.toml' file. The value should be a valid Tachyons color class.\nSOURCE: https://github.com/tinacms/tinacms/blob/main/examples/hugo-quickstart/themes/ananke/README.md#2025-04-20_snippet_11\n\nLANGUAGE: TOML\nCODE:\n```\n[params]\n  text_color = \"green\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Commento Comments in Hugo\nDESCRIPTION: TOML configuration to enable Commento comments in your Hugo site using the Ananke theme.\nSOURCE: https://github.com/tinacms/tinacms/blob/main/examples/hugo-quickstart/themes/ananke/README.md#2025-04-20_snippet_4\n\nLANGUAGE: toml\nCODE:\n```\n[params]\n  commentoEnable = true\n```\n\n----------------------------------------\n\nTITLE: Formatting TinaCMS code\nDESCRIPTION: This command formats all code according to project standards using Prettier.\nSOURCE: https://github.com/tinacms/tinacms/blob/main/playwright/tina-playwright/content/page/home.mdx#2025-04-20_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nyarn format\n```\n\n----------------------------------------\n\nTITLE: GraphQL Field Type Query with Union\nDESCRIPTION: Example of field queries using GraphQL unions, showing explicit type definitions\nSOURCE: https://github.com/tinacms/tinacms/blob/main/packages/@tinacms/graphql/readme.md#2025-04-20_snippet_6\n\nLANGUAGE: graphql\nCODE:\n```\nfields {\n  ... on TextareaField {\n    name\n    label\n    component\n  }\n  ... on SelectField {\n    name\n    label\n    component\n    options\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Markdown Bold and Emphasized Text\nDESCRIPTION: This snippet shows how to create both bold and emphasized text simultaneously in Markdown. Triple asterisks or underscores are used to achieve this combined formatting, resulting in text that is both bold and italicized.\nSOURCE: https://github.com/tinacms/tinacms/blob/main/packages/@tinacms/mdx/src/next/tests/markdown-basic-marks/out.md#2025-04-20_snippet_1\n\nLANGUAGE: Markdown\nCODE:\n```\n\"Some ***bold and emphasized*** text\"\n```\n\n----------------------------------------\n\nTITLE: Shell Commands for Setup and Development\nDESCRIPTION: This snippet provides a set of shell commands for setting up the TinaCMS development environment, including checking the Node.js version, enabling corepack, installing dependencies, building and watching packages, and starting the dev server in the example project.\nSOURCE: https://github.com/tinacms/tinacms/blob/main/CONTRIBUTING.md#2025-04-20_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n# check the node version, the .nvmrc file lists the required version\nnode -v\n# install pnpm via corepack\ncorepack enable\n# ensure you have the correct version (check version number in package.json)\npnpm -v\n# install dependencies\npnpm install\n# build all the packages\npnpm run build\n# watch all packages\npnpm run watch\n# in a separate tab, navigate to starter project\ncd examples/basic-iframe\n# start the dev server\npnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Configuring Dynamic Robots.txt Rules in Hugo\nDESCRIPTION: A template that generates different robots.txt content based on the environment. In production, it allows crawling and references the sitemap. In non-production environments, it disallows all crawling.\nSOURCE: https://github.com/tinacms/tinacms/blob/main/examples/hugo-quickstart/themes/ananke/layouts/robots.txt#2025-04-20_snippet_0\n\nLANGUAGE: hugo\nCODE:\n```\nUser-agent: *\n{{/* robotstxt.org - if ENV production variable is false robots will be disallowed. */ -}}\n{{ if eq (getenv \"HUGO_ENV\") \"production\" | or (eq .Site.Params.env \"production\")  -}}\nAllow: /\nSitemap: {{ \"/sitemap.xml\" | absURL }}\n{{ else -}}\nDisallow: /\n{{ end -}}\n```\n\n----------------------------------------\n\nTITLE: Creating Pets Component with Data Fetching Logic\nDESCRIPTION: The main functional component that utilizes the useQuery hook to fetch pet data. It handles loading and error states, and manages the modal for adding new pets.\nSOURCE: https://github.com/tinacms/tinacms/blob/main/packages/@tinacms/mdx/src/next/tests/markdown-html-issues/out.md#2025-04-20_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nexport default function Pets () {\nconst [modal, setModal] = useState(false)\nconst { loading, error, data } = useQuery(GET_PETS);\n\nif (loading) return <Loader />;\n\nif (error) return <p>An error occured!</p>;\n```\n\n----------------------------------------\n\nTITLE: Running Hugo in Production Environment on Windows\nDESCRIPTION: For Windows OS users, enter 'set HUGO_ENV=production' before executing the Hugo build command in order to enable production-specific configurations like Google Analytics in your build.\nSOURCE: https://github.com/tinacms/tinacms/blob/main/examples/hugo-quickstart/themes/ananke/README.md#2025-04-20_snippet_15\n\nLANGUAGE: Shell\nCODE:\n```\nset HUGO_ENV=production\nhugo\n```\n\n----------------------------------------\n\nTITLE: Markdown Link with Bold Text\nDESCRIPTION: This snippet shows how to create a hyperlink with bold text as the link's display text in Markdown. The link includes both the URL and an optional title attribute.\nSOURCE: https://github.com/tinacms/tinacms/blob/main/packages/@tinacms/mdx/src/next/tests/markdown-basic-marks/out.md#2025-04-20_snippet_6\n\nLANGUAGE: Markdown\nCODE:\n```\n\"**Hello [world](https://example.com \\\"Example Site\\\")**\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Body Classes in Hugo\nDESCRIPTION: TOML configuration to set custom body classes for styling in the Ananke theme.\nSOURCE: https://github.com/tinacms/tinacms/blob/main/examples/hugo-quickstart/themes/ananke/README.md#2025-04-20_snippet_8\n\nLANGUAGE: toml\nCODE:\n```\n[params]\n  body_classes = \"avenir bg-near-white\"\n```\n\n----------------------------------------\n\nTITLE: Adding Ananke Theme as Git Submodule\nDESCRIPTION: Git command to add the Ananke theme as a submodule to your Hugo project.\nSOURCE: https://github.com/tinacms/tinacms/blob/main/examples/hugo-quickstart/themes/ananke/README.md#2025-04-20_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ git submodule add https://github.com/theNewDynamic/gohugo-theme-ananke.git themes/ananke\n```\n\n----------------------------------------\n\nTITLE: Copying Environment Configuration\nDESCRIPTION: Command to copy the example environment file to create a local configuration.\nSOURCE: https://github.com/tinacms/tinacms/blob/main/examples/tina-self-hosted-demo/content/pages/about.md#2025-04-20_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\ncp .env.example .env\n```\n\n----------------------------------------\n\nTITLE: Declaring Simple Numeric Variable in JavaScript\nDESCRIPTION: Initializes a numeric constant variable with a literal value. Demonstrates basic variable declaration in JavaScript.\nSOURCE: https://github.com/tinacms/tinacms/blob/main/packages/@tinacms/mdx/src/next/tests/markdown-basic-code-block/out.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst test = 123\n```\n\n----------------------------------------\n\nTITLE: Basic Unordered List in Markdown\nDESCRIPTION: Demonstrates a simple unordered list structure with nested elements using Markdown syntax. Each list item is denoted by an asterisk (*), and nested items are indented.\nSOURCE: https://github.com/tinacms/tinacms/blob/main/packages/@tinacms/mdx/src/next/tests/markdown-basic-lists/in.md#2025-04-20_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n* This is an item\n  * this is a sub-item\n* this is another item\n```\n\n----------------------------------------\n\nTITLE: Initializing Hugo Front Matter Template\nDESCRIPTION: Default Hugo front matter template used to generate new content files. Uses Hugo template functions to format the title and automatically insert the current date.\nSOURCE: https://github.com/tinacms/tinacms/blob/main/examples/hugo-quickstart/themes/ananke/archetypes/default.md#2025-04-20_snippet_0\n\nLANGUAGE: hugo\nCODE:\n```\n---\ntitle: \"{{ replace .File.ContentBaseName \"-\" \" \" | title }}\"\ndate: {{ .Date }}\ntags: []\nfeatured_image: \"\"\ndescription: \"\"\n---\n```\n\n----------------------------------------\n\nTITLE: Running specific TinaCMS tests\nDESCRIPTION: This command demonstrates how to run tests for a specific TinaCMS package. In this example, it runs tests for the @tinacms/scripts package.\nSOURCE: https://github.com/tinacms/tinacms/blob/main/playwright/tina-playwright/content/page/home.mdx#2025-04-20_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\nyarn lerna run test --scope @tinacms/scripts\n```\n\n----------------------------------------\n\nTITLE: Initializing Hugo Module\nDESCRIPTION: Command to initialize a Hugo module for your project. This is the first step in using Ananke as a Hugo module.\nSOURCE: https://github.com/tinacms/tinacms/blob/main/examples/hugo-quickstart/themes/ananke/README.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ hugo mod init github.com/<your_user>/<your_project>\n```\n\n----------------------------------------\n\nTITLE: Unregistered Component with Prop in JSX\nDESCRIPTION: This snippet shows an unregistered component, `<SomeUnregisteredComponen>`, being used with a `hello` prop set to \"world\". This demonstrates how JSX handles attributes passed to components that are not formally registered or defined.\nSOURCE: https://github.com/tinacms/tinacms/blob/main/packages/@tinacms/mdx/src/next/tests/mdx-unregistered-component/out.md#2025-04-20_snippet_0\n\nLANGUAGE: JSX\nCODE:\n```\n\"<SomeUnregisteredComponen hello=\\\"world\\\" />\"\n```\n\n----------------------------------------\n\nTITLE: Customizing Social Media Links in Hugo\nDESCRIPTION: YAML configuration to customize social media link labels and colors in the Ananke theme.\nSOURCE: https://github.com/tinacms/tinacms/blob/main/examples/hugo-quickstart/themes/ananke/README.md#2025-04-20_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\nparams:\n  ananke_socials:\n  - name: twitter\n    url: https://twitter.com/theNewDynamic\n    label: TND Twitter\n  - name: github\n    url: https://github.com/theNewDynamic\n    label: TND GitHub Account\n    color: '#ff6800'\n```\n\n----------------------------------------\n\nTITLE: Rendering Number Array Prop\nDESCRIPTION: This code snippet demonstrates how to render a React component called `Ratings` and pass an array of numbers ([1, 2, 3]) as the `value` prop. The component likely displays a rating system based on the numbers.\nSOURCE: https://github.com/tinacms/tinacms/blob/main/packages/@tinacms/mdx/src/next/tests/mdx-block-scalar-fields/in.md#2025-04-20_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\n<Ratings value={[1, 2, 3]} />\n```\n\n----------------------------------------\n\nTITLE: TinaCMS Feature Shortcode\nDESCRIPTION: This shortcode is designed to include a specified feature within a TinaCMS project. It acts as a placeholder that will be replaced by the actual feature content or logic during the build or rendering process.  No specific language is tied to this shortcode, as its behavior is determined by the templating engine or framework used in conjunction with TinaCMS.\nSOURCE: https://github.com/tinacms/tinacms/blob/main/packages/@tinacms/mdx/src/next/tests/markdown-shortcodes-invalid/in.md#2025-04-20_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n{{% /some-feature %}}\n```\n\n----------------------------------------\n\nTITLE: Basic Markdown Table Example 1\nDESCRIPTION: This snippet demonstrates a basic Markdown table with a header row and a data row.  It illustrates the fundamental structure for creating tables in Markdown, using pipes (|) to separate columns and hyphens (-) to create the header separator.\nSOURCE: https://github.com/tinacms/tinacms/blob/main/packages/@tinacms/mdx/src/next/tests/markdown-basic-tables/out.md#2025-04-20_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n\"| Syntax    | Description |\\n| --------- | ----------- |\\n| Header    | Title       |\\n| Paragraph | Text        |\"\n```\n\n----------------------------------------\n\nTITLE: Markdown Inline Code with Emphasized Text\nDESCRIPTION: This snippet demonstrates how to embed inline code within emphasized text in Markdown. The inline code is enclosed in backticks, and the emphasized text is enclosed in asterisks.\nSOURCE: https://github.com/tinacms/tinacms/blob/main/packages/@tinacms/mdx/src/next/tests/markdown-basic-marks/out.md#2025-04-20_snippet_5\n\nLANGUAGE: Markdown\nCODE:\n```\n\"*Hello `some code`, again*\"\n```\n\n----------------------------------------\n\nTITLE: Markdown List Example\nDESCRIPTION: Demonstrates unordered lists in Markdown using asterisks as list markers. Each list item starts with an asterisk followed by a space and the list item content.\nSOURCE: https://github.com/tinacms/tinacms/blob/main/packages/@tinacms/mdx/src/next/tests/markdown-basic-autoformat-syntax/out.md#2025-04-20_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n\"* Red\\n* Green\\n* Blue\"\n```\n\n----------------------------------------\n\nTITLE: Linting TinaCMS code\nDESCRIPTION: This command runs linting tools across the codebase to ensure code quality and consistency.\nSOURCE: https://github.com/tinacms/tinacms/blob/main/playwright/tina-playwright/content/page/home.mdx#2025-04-20_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nyarn lint\n```\n\n----------------------------------------\n\nTITLE: Rendering Date String Prop\nDESCRIPTION: This code snippet demonstrates how to render a React component called `Date` and pass a date string (\"2022-12-12\") as the `here` prop. The component likely parses this date string and formats or displays it.\nSOURCE: https://github.com/tinacms/tinacms/blob/main/packages/@tinacms/mdx/src/next/tests/mdx-block-scalar-fields/in.md#2025-04-20_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n<Date here=\"2022-12-12\" />\n```\n\n----------------------------------------\n\nTITLE: Rendering TestComponent with Numeric Data in React\nDESCRIPTION: This snippet renders a <TestComponent> with an array of rows containing numeric values. The first row is marked as a header.\nSOURCE: https://github.com/tinacms/tinacms/blob/main/packages/@tinacms/mdx/src/next/tests/mdx-table-like-field/in.md#2025-04-20_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n<TestComponent\nrows={[\n{ celss: [1,2,3], isHeader: true },\n{ celss: [4,5,6] }\n]}\n/>\n```\n\n----------------------------------------\n\nTITLE: Configuring Article Page Frontmatter in YAML\nDESCRIPTION: YAML frontmatter configuration for an Articles page, defining the page title and publication date.\nSOURCE: https://github.com/tinacms/tinacms/blob/main/examples/hugo-quickstart/themes/ananke/exampleSite/content/en/post/_index.md#2025-04-20_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntitle: \"Articles\"\ndate: 2017-03-02T12:00:00-05:00\n---\n```\n\n----------------------------------------\n\nTITLE: Rendering Playground Component with Code and Configuration\nDESCRIPTION: A React component that renders a playground with sample code and dynamic configuration options\nSOURCE: https://github.com/tinacms/tinacms/blob/main/packages/@tinacms/mdx/src/next/tests/mdx-block-object-list-field/out.md#2025-04-20_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<Playground code=\"Some sample code\" config={[{ key: \"width\", value: \"100%\" }]} />\n```\n\n----------------------------------------\n\nTITLE: Composable Tag Note Callout\nDESCRIPTION: A markdown callout indicating that tags are composable with a note-type emphasis\nSOURCE: https://github.com/tinacms/tinacms/blob/main/packages/@tinacms/mdx/src/next/tests/markdown-shortcodes-markdoc/out.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n{% callout type=\"note\" %}\nTags are composable!\n{% /callout %}\n```\n\n----------------------------------------\n\nTITLE: Frontmatter with Empty Array in Markdown\nDESCRIPTION: Example of a markdown document with an empty categories array defined in the frontmatter. The response will be an empty array when queried.\nSOURCE: https://github.com/tinacms/tinacms/blob/main/packages/@tinacms/cli/CHANGELOG.md#2025-04-20_snippet_22\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntitle: \"Hello, World\"\ncategories: []\n---\n```\n\n----------------------------------------\n\nTITLE: Markdown Nested Formatting\nDESCRIPTION: This snippet illustrates nested formatting, where emphasized text contains bold text. This is achieved by placing double asterisks within single asterisks, allowing for layered text styles.\nSOURCE: https://github.com/tinacms/tinacms/blob/main/packages/@tinacms/mdx/src/next/tests/markdown-basic-marks/out.md#2025-04-20_snippet_2\n\nLANGUAGE: Markdown\nCODE:\n```\n\"Marks with *emphasized text nesting **bold** text*\"\n```\n\n----------------------------------------\n\nTITLE: Creating a Markdown table with alignment\nDESCRIPTION: This snippet shows how to create a Markdown table and specify the alignment of the content within each column. Colons (:) in the separator row indicate left, right, or center alignment.\nSOURCE: https://github.com/tinacms/tinacms/blob/main/packages/@tinacms/mdx/src/next/tests/markdown-basic-tables/in.md#2025-04-20_snippet_1\n\nLANGUAGE: Markdown\nCODE:\n```\n\"| Syntax    | Description |   Test Text |\\n| :-------- | :---------- | ----------: |\\n| Header    | Title       | Here's this |\\n| Paragraph | Text        |    And more |\"\n```\n\n----------------------------------------\n\nTITLE: Markdown Frontmatter Without Categories\nDESCRIPTION: Example of a markdown document without categories in the frontmatter, which will result in categories being null.\nSOURCE: https://github.com/tinacms/tinacms/blob/main/packages/@tinacms/graphql/CHANGELOG.md#2025-04-20_snippet_28\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntitle: \"Hello, World\"\n---\n```\n\n----------------------------------------\n\nTITLE: Markdown Frontmatter Block with User Profile Data\nDESCRIPTION: YAML frontmatter block that defines user profile information including name, bio text, and an image file path. The frontmatter is delimited by triple dashes and contains key-value pairs.\nSOURCE: https://github.com/tinacms/tinacms/blob/main/examples/kitchen-sink/content/authors/pedro.md#2025-04-20_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nname: Pedro\nbio: |\n  Vote for me\nimage: /uploads/llama-5.avif\n---\n```\n\n----------------------------------------\n\nTITLE: Rendering String Prop\nDESCRIPTION: This code snippet shows how to render a React component called `Greeting` and pass a string value (\"Hello\") as the `message` prop. The component will display or use this string value to display a greeting.\nSOURCE: https://github.com/tinacms/tinacms/blob/main/packages/@tinacms/mdx/src/next/tests/mdx-block-scalar-fields/in.md#2025-04-20_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<Greeting message=\"Hello\" /> world!\n```\n\n----------------------------------------\n\nTITLE: Defining RootElement Type for MDX Structure in TypeScript\nDESCRIPTION: Defines the structure of a root element in the MDX parsing tree, containing child block elements.\nSOURCE: https://github.com/tinacms/tinacms/blob/main/packages/@tinacms/mdx/spec.md#2025-04-20_snippet_3\n\nLANGUAGE: TypeScript\nCODE:\n```\n{\n  \"children\": BlockElement[],\n  \"type\": \"root\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Hugo Page Front Matter in YAML\nDESCRIPTION: Front matter configuration for a Hugo contact page, specifying page title, image settings, description and menu placement.\nSOURCE: https://github.com/tinacms/tinacms/blob/main/examples/hugo-quickstart/themes/ananke/exampleSite/content/en/contact.md#2025-04-20_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ntitle: Contact\nfeatured_image: ''\nomit_header_text: true\ndescription: We'd love to hear from you\ntype: page\nmenu: main\n```\n\n----------------------------------------\n\nTITLE: Configuring Author Template in YAML for TinaCMS\nDESCRIPTION: YAML frontmatter configuration that defines an author profile template. Includes basic author information like name and social media handles, using TinaCMS's _template system for structured content.\nSOURCE: https://github.com/tinacms/tinacms/blob/main/packages/@tinacms/graphql/src/spec/forestry-sample/content/authors/marge.md#2025-04-20_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nname: Marge Simpson\nsocialMedia:\n  - platform: twitter\n    handle: marge\n_template: author\n---\n```\n\n----------------------------------------\n\nTITLE: Rendering UI and Pets List - JavaScript\nDESCRIPTION: This final snippet renders the main UI for the Pets component, including the modal for adding new pets and displaying the list of fetched pets. It utilizes the PetsList component to present the data.\nSOURCE: https://github.com/tinacms/tinacms/blob/main/packages/@tinacms/mdx/src/next/tests/markdown-html-issues/in.md#2025-04-20_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nif (modal) {\nreturn <NewPetModal onSubmit={onSubmit} onCancel={() => setModal(false)} />\n}\nreturn (\n<div className=\"page pets-page\">\n<section>\n<div className=\"row betwee-xs middle-xs\">\n<div className=\"col-xs-10\">\n<h1>Pets</h1>\n</div>\n<div className=\"col-xs-2\">\n<button onClick={() => setModal(true)}>new pet</button>\n</div>\n</div>\n</section>\n<section>\n<PetsList pets={data.pets}/>\n</section>\n</div>\n)\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies with Yarn\nDESCRIPTION: Command to install project dependencies using Yarn package manager.\nSOURCE: https://github.com/tinacms/tinacms/blob/main/examples/tina-self-hosted-demo/content/pages/about.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nyarn install\n```\n\n----------------------------------------\n\nTITLE: Markdown Frontmatter with Empty Categories Array\nDESCRIPTION: Example of a markdown document with an empty categories array in the frontmatter.\nSOURCE: https://github.com/tinacms/tinacms/blob/main/packages/@tinacms/graphql/CHANGELOG.md#2025-04-20_snippet_27\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntitle: \"Hello, World\"\ncategories: []\n---\n```\n\n----------------------------------------\n\nTITLE: Markdown Mixed Formatting\nDESCRIPTION: This snippet demonstrates mixing bold and emphasized text with overlapping styles. It shows how different formatting styles interact when placed next to each other within a Markdown document.\nSOURCE: https://github.com/tinacms/tinacms/blob/main/packages/@tinacms/mdx/src/next/tests/markdown-basic-marks/out.md#2025-04-20_snippet_3\n\nLANGUAGE: Markdown\nCODE:\n```\n\"**Hello *world*, again** *here*\"\n```\n\n----------------------------------------\n\nTITLE: React Blockquote Component\nDESCRIPTION: This React component renders a blockquote HTML element and displays an author's name below it. It accepts an `author` prop as a string, which is used to display the author's name within a `<cite>` tag.\nSOURCE: https://github.com/tinacms/tinacms/blob/main/packages/@tinacms/mdx/src/next/tests/mdx-blocks-autoformat-nested-mdx-null-children/out.md#2025-04-20_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<Blockquote author=\"Pedro\" />\n```\n\n----------------------------------------\n\nTITLE: Running Hugo in Production Environment\nDESCRIPTION: To build your Hugo site for production, set the environment variable 'HUGO_ENV' to 'production' before running the Hugo build command. On Windows systems, use 'set HUGO_ENV=production'. This ensures production-specific configurations, such as Google Analytics, are included.\nSOURCE: https://github.com/tinacms/tinacms/blob/main/examples/hugo-quickstart/themes/ananke/README.md#2025-04-20_snippet_14\n\nLANGUAGE: Shell\nCODE:\n```\nHUGO_ENV=production hugo\n```\n\n----------------------------------------\n\nTITLE: Rendering Number Prop\nDESCRIPTION: This code snippet shows how to render a React component called `Count` and pass a number (1) as the `number` prop. The component will likely display or use this number value internally.\nSOURCE: https://github.com/tinacms/tinacms/blob/main/packages/@tinacms/mdx/src/next/tests/mdx-block-scalar-fields/in.md#2025-04-20_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<Count number={1} />\n```\n\n----------------------------------------\n\nTITLE: Defining Position Type for Error Reporting in TypeScript\nDESCRIPTION: Defines a Position type for error reporting, containing start and end position information.\nSOURCE: https://github.com/tinacms/tinacms/blob/main/packages/@tinacms/mdx/spec.md#2025-04-20_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\n{\n  \"end\": PositionItem,\n  \"start\": PositionItem\n}\n```\n\n----------------------------------------\n\nTITLE: TinaCMS Shortcode Example\nDESCRIPTION: This snippet demonstrates a custom shortcode 'some-feature' used within a TinaCMS context. It showcases that the shortcode is recognized and processed, even without proper closing syntax.\nSOURCE: https://github.com/tinacms/tinacms/blob/main/packages/@tinacms/mdx/src/next/tests/markdown-shortcodes-unclosed/out.md#2025-04-20_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n\n{{% some-feature %}}\nAnd we didn't close it out, but it should still work\n{{% /some-feature %}}\n\n```\n\n----------------------------------------\n\nTITLE: Defining LIC Element Type in TypeScript\nDESCRIPTION: Defines the structure of a LIC (List Item Content) element with children and a specific type.\nSOURCE: https://github.com/tinacms/tinacms/blob/main/packages/@tinacms/mdx/spec.md#2025-04-20_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n{\n  \"children\": LicElement[],\n  \"type\": \"lic\"\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering Boolean Prop\nDESCRIPTION: This code snippet shows how to render a React component called `MaybeShow` and pass a boolean value (true) as the `toggle` prop. The component probably uses this boolean value to conditionally render content.\nSOURCE: https://github.com/tinacms/tinacms/blob/main/packages/@tinacms/mdx/src/next/tests/mdx-block-scalar-fields/in.md#2025-04-20_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<MaybeShow toggle={true} />\n```\n\n----------------------------------------\n\nTITLE: Response Format for Old List Query Pattern\nDESCRIPTION: Shows the JSON response format from the old GraphQL API pattern, returning a direct array of items.\nSOURCE: https://github.com/tinacms/tinacms/blob/main/packages/@tinacms/graphql/CHANGELOG.md#2025-04-20_snippet_38\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"getPostsList\": [\n      {\n        \"id\": \"content/posts/voteForPedro.md\"\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining PositionItem Type for Detailed Location in TypeScript\nDESCRIPTION: Defines a PositionItem type with detailed location information including line, column, and offset.\nSOURCE: https://github.com/tinacms/tinacms/blob/main/packages/@tinacms/mdx/spec.md#2025-04-20_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\n{\n  \"_bufferIndex?\": number | null,\n  \"_index?\": number | null,\n  \"column?\": number | null,\n  \"line?\": number | null,\n  \"offset?\": number | null\n}\n```\n\n----------------------------------------\n\nTITLE: Localizing Date Format in Hugo\nDESCRIPTION: Specify a custom date format for blog posts and single pages using the 'date_format' parameter. This can be set to '2. January 2006' or use Hugo's predefined layouts starting with version 0.87.0 for localization purposes.\nSOURCE: https://github.com/tinacms/tinacms/blob/main/examples/hugo-quickstart/themes/ananke/README.md#2025-04-20_snippet_12\n\nLANGUAGE: TOML\nCODE:\n```\n[params]\n  date_format = \"2. January 2006\"\n```\n\n----------------------------------------\n\nTITLE: Markdown Code Block\nDESCRIPTION: Demonstrates a code block in Markdown using backticks.  The code block preserves indentation and formatting.\nSOURCE: https://github.com/tinacms/tinacms/blob/main/packages/@tinacms/mdx/src/next/tests/markdown-basic-autoformat-syntax/out.md#2025-04-20_snippet_3\n\nLANGUAGE: Markdown\nCODE:\n```\n\"```\\nIndentation is ignored\\n========\\n```\"\n```\n\n----------------------------------------\n\nTITLE: Deprecation List in TinaCMS Schema System\nDESCRIPTION: A list of deprecated and removed types in the TinaCMS schema system. These types were previously used for collection definitions and field configurations but have been reconfigured or removed.\nSOURCE: https://github.com/tinacms/tinacms/blob/main/packages/@tinacms/schema-tools/CHANGELOG.md#2025-04-20_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n```\nCollectionFieldsWithNamespace\nCollectionTemplates\nCollectionTemplatesWithNamespace\nGlobalTemplate\nObjectType\nReferenceType\nReferenceTypeInner\nReferenceTypeWithNamespace\nRichTextType\nRichTypeWithNamespace\nTinaCloudCollection\nTinaCloudCollectionBase\nTinaCloudCollectionEnriched\nTinaCloudSchema\nTinaCloudSchemaBase\nTinaCloudSchemaConfig\nTinaCloudSchemaEnriched\nTinaCloudSchemaWithNamespace\nTinaCloudTemplateBase\nTinaCloudTemplateEnriched\nTinaFieldBase\nTinaFieldEnriched\nTinaFieldInner\nTinaTemplate\n```\n```\n\n----------------------------------------\n\nTITLE: Starting Development Server\nDESCRIPTION: Command to run the project in development mode locally\nSOURCE: https://github.com/tinacms/tinacms/blob/main/experimental-examples/tina-cloud-starter/README.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn dev\n```\n\n----------------------------------------\n\nTITLE: Non-Composable Tag Warning Callout\nDESCRIPTION: A markdown callout indicating that tags are not composable with a warning-type emphasis\nSOURCE: https://github.com/tinacms/tinacms/blob/main/packages/@tinacms/mdx/src/next/tests/markdown-shortcodes-markdoc/out.md#2025-04-20_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n{% callout type=\"warning\" %}\nTags aren't composable!\n{% /callout %}\n```\n\n----------------------------------------\n\nTITLE: Defining TinaCMS Shortcode with Attributes\nDESCRIPTION: A shortcode demonstrating attribute assignment and open tag syntax in TinaCMS markdown content. The shortcode allows child elements and contains a single attribute 'a' with value 'b'.\nSOURCE: https://github.com/tinacms/tinacms/blob/main/packages/@tinacms/mdx/src/next/tests/markdown-shortcodes-invalid-4/in.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n{{% some-feature a=\"b\" %}}\n```\n\n----------------------------------------\n\nTITLE: BlockQuote Component with React\nDESCRIPTION: This component creates a block quote element with specified attributes, allowing for the inclusion of author details and categorization. The parameters include author (for quote attribution) and categories (to classify the content).\nSOURCE: https://github.com/tinacms/tinacms/blob/main/packages/@tinacms/graphql/src/spec/movies/content/movies/star-wars.mdx#2025-04-20_snippet_2\n\nLANGUAGE: HTML\nCODE:\n```\n<BlockQuote\n  author=\\\"Darth Vader\\\"\n  categories={[\\\"spoiler\\\"]}\n>\n  I am your father\n</BlockQuote>\n```\n\n----------------------------------------\n\nTITLE: Changelog Entry Format in Markdown\nDESCRIPTION: Standard changelog entry format showing dependency updates and version changes for the kitchen-sink-starter project, with references to tinacms package versions.\nSOURCE: https://github.com/tinacms/tinacms/blob/main/experimental-examples/kitchen-sink/CHANGELOG.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## null\n\n### Patch Changes\n\n- Updated dependencies [2e3393ef5]\n  - tinacms@1.6.4\n```\n\n----------------------------------------\n\nTITLE: Checking Go Version in Terminal\nDESCRIPTION: Command to check the installed version of Go on your system. This is important for using Hugo modules.\nSOURCE: https://github.com/tinacms/tinacms/blob/main/examples/hugo-quickstart/themes/ananke/README.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ go version\n```\n\n----------------------------------------\n\nTITLE: Installing TinaCloud CLI using yarn\nDESCRIPTION: This snippet illustrates the installation of the TinaCloud CLI as a development dependency using yarn.\nSOURCE: https://github.com/tinacms/tinacms/blob/main/packages/@tinacms/cli/README.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn add --dev @tinacms/cli\n```\n\n----------------------------------------\n\nTITLE: Hugo Shortcode with Unexpected Attribute\nDESCRIPTION: This snippet shows a Hugo shortcode with an unexpected attribute within the closing tag. Tinacms treats this as literal text, rendering the shortcode as it appears instead of interpreting it as a functional shortcode.\nSOURCE: https://github.com/tinacms/tinacms/blob/main/packages/@tinacms/mdx/src/next/tests/markdown-shortcodes-invalid-3/out.md#2025-04-20_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n\n{{% /some-feature a=\"b\" %}}\n\n```\n\n----------------------------------------\n\nTITLE: Creating a basic Markdown table\nDESCRIPTION: This snippet demonstrates the creation of a simple Markdown table with headers and content. It showcases the basic syntax for defining table rows and columns using pipes (|) and hyphens (-).\nSOURCE: https://github.com/tinacms/tinacms/blob/main/packages/@tinacms/mdx/src/next/tests/markdown-basic-tables/in.md#2025-04-20_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n\"| Syntax    | Description |\\n| --------- | ----------- |\\n| Header    | Title       |\\n| Paragraph | Text        |\"\n```\n\n----------------------------------------\n\nTITLE: Importing Dependencies - JavaScript\nDESCRIPTION: This snippet imports necessary libraries and components for the Pets component. It includes React, GraphQL tools from Apollo Client, and custom components for listing and adding pets.\nSOURCE: https://github.com/tinacms/tinacms/blob/main/packages/@tinacms/mdx/src/next/tests/markdown-html-issues/in.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport React, {useState} from 'react'\nimport gql from 'graphql-tag'\nimport { useQuery, useMutation } from '@apollo/react-hooks'\nimport PetsList from '../components/PetsList'\nimport NewPetModal from '../components/NewPetModal'\nimport Loader from '../components/Loader'\n```\n\n----------------------------------------\n\nTITLE: Hugo Pull Quote Shortcode\nDESCRIPTION: Custom Hugo shortcode for displaying a pull quote with a 'foo' parameter set to 'Testing' and containing content\nSOURCE: https://github.com/tinacms/tinacms/blob/main/examples/kitchen-sink/content/ssg-posts/ssg-postd.md#2025-04-20_snippet_2\n\nLANGUAGE: hugo\nCODE:\n```\n{{% pull-quote foo=\"Testing\" %}}\nThings\n{{% /pull-quote %}}\n```\n\n----------------------------------------\n\nTITLE: Nested Ordered and Unordered List in Markdown\nDESCRIPTION: Illustrates a nested list structure containing both unordered and ordered lists. The unordered list uses asterisks (*), and the ordered list uses numbers followed by a period (1.).\nSOURCE: https://github.com/tinacms/tinacms/blob/main/packages/@tinacms/mdx/src/next/tests/markdown-basic-lists/in.md#2025-04-20_snippet_2\n\nLANGUAGE: Markdown\nCODE:\n```\n* list item 1\n  1. sub list item 1A\n* list item 2\n```\n\n----------------------------------------\n\nTITLE: Defining Author Metadata in YAML Frontmatter for TinaCMS\nDESCRIPTION: A basic frontmatter block that defines an author with a title field. This YAML-style metadata section is typically used at the beginning of Markdown or other content files to provide structured data about the content.\nSOURCE: https://github.com/tinacms/tinacms/blob/main/playwright/tina-playwright/content/author/first_author.mdx#2025-04-20_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nTitle: My first Author\n---\n```\n\n----------------------------------------\n\nTITLE: Basic TinaCMS Post Frontmatter in YAML\nDESCRIPTION: Minimal YAML frontmatter for a TinaCMS post template that specifies the title and template type.\nSOURCE: https://github.com/tinacms/tinacms/blob/main/packages/@tinacms/graphql/src/spec/forestry-sample/mutations/updateDocument/_response.md#2025-04-20_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntitle: Ok\n_template: post\n---\n```\n\n----------------------------------------\n\nTITLE: Using the feature-panel Shortcode in TinaCMS\nDESCRIPTION: This snippet demonstrates how to use a `feature-panel` shortcode. The shortcode, `feature-panel`, is used with the argument \"Test\". It likely represents a custom component or formatting option within the TinaCMS environment.\nSOURCE: https://github.com/tinacms/tinacms/blob/main/packages/@tinacms/mdx/src/next/tests/markdown-shortcodes-rich-text-children-3/out.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n\n{{% feature-panel \"Test\" %}}\n\n```\n\n----------------------------------------\n\nTITLE: List Item with Formatting and Link in Markdown\nDESCRIPTION: Shows how to format text (bold) and include a hyperlink within a Markdown list item. The bold text is achieved using double asterisks (**), and the link uses the standard Markdown link syntax.\nSOURCE: https://github.com/tinacms/tinacms/blob/main/packages/@tinacms/mdx/src/next/tests/markdown-basic-lists/in.md#2025-04-20_snippet_1\n\nLANGUAGE: Markdown\nCODE:\n```\n* this is an **item** and a [link](http://example.com)\n```\n\n----------------------------------------\n\nTITLE: Markdown File with YAML Frontmatter\nDESCRIPTION: A markdown document with YAML frontmatter that defines metadata properties including heading, subtitle and a reference to an author content file. The body contains just a simple test string.\nSOURCE: https://github.com/tinacms/tinacms/blob/main/experimental-examples/kitchen-sink/content/page/home.mdx#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\nheading: 'test-reference field '\nsubtitle: test reference filed\nauthor: content/author/Napolean2.md\n---\n\ntest\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic TinaCMS Template in YAML\nDESCRIPTION: A simple YAML frontmatter configuration that specifies a page title 'Ok' and sets the template to 'template_1'.\nSOURCE: https://github.com/tinacms/tinacms/blob/main/packages/@tinacms/graphql/src/spec/forestry-sample/mutations/createDocument/_response.md#2025-04-20_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntitle: Ok\n_template: template_1\n---\n```\n\n----------------------------------------\n\nTITLE: Hugo Pull Quote Shortcode Implementation\nDESCRIPTION: Implementation of a Hugo-style pull-quote shortcode with a foo parameter and content.\nSOURCE: https://github.com/tinacms/tinacms/blob/main/examples/kitchen-sink/content/post/tinacms-v0.69.7.mdx#2025-04-20_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n{{% pull-quote foo=\"Hello, world\" %}}\nThis is a quote.\n{{% /pull-quote %}}\n```\n\n----------------------------------------\n\nTITLE: Mermaid Flowchart for Christmas Shopping Decisions\nDESCRIPTION: A lightweight flowchart representing a decision process from getting money to choosing gift options\nSOURCE: https://github.com/tinacms/tinacms/blob/main/packages/@tinacms/mdx/src/next/tests/markdown-mermaid/out.md#2025-04-20_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\nflowchart TD\n    A[Christmas] -->|Get money| B(Go shopping)\n    B --> C{Let me think}\n    C -->|One| D[Laptop]\n    C -->|Two| E[iPhone]\n```\n\n----------------------------------------\n\nTITLE: Utilizing Image Syntax in Markdown\nDESCRIPTION: This snippet provides an example of how to include images in a Markdown document, showing both the path and alt text for accessibility. This does not require additional dependencies. The expected input is the image URL and alt text. The output will render as an embedded image in the Markdown viewer.\nSOURCE: https://github.com/tinacms/tinacms/blob/main/packages/@tinacms/mdx/src/next/tests/markdown-basic-kitchen-sink/out.md#2025-04-20_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n![Alt Text](https://get.svg.workers.dev \"Image Title\")\n```\n\n----------------------------------------\n\nTITLE: Defining Page Metadata in Markdown Frontmatter\nDESCRIPTION: Simple markdown frontmatter block defining the page title as 'Introduction'\nSOURCE: https://github.com/tinacms/tinacms/blob/main/examples/kitchen-sink/content/documentation-sections/introduction.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntitle: Introduction\n---\n```\n\n----------------------------------------\n\nTITLE: GraphQL Query Structure\nDESCRIPTION: Example of a basic GraphQL query structure for fetching document data in TinaCMS, showing the nested 'data' property structure.\nSOURCE: https://github.com/tinacms/tinacms/blob/main/packages/@tinacms/cli/CHANGELOG.md#2025-04-20_snippet_20\n\nLANGUAGE: graphql\nCODE:\n```\n{\n  getPostDocument {\n    data {\n      title\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Building TinaCMS packages\nDESCRIPTION: This command builds all packages in the TinaCMS monorepo, preparing them for use or deployment.\nSOURCE: https://github.com/tinacms/tinacms/blob/main/playwright/tina-playwright/content/page/home.mdx#2025-04-20_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nyarn build\n```\n\n----------------------------------------\n\nTITLE: Markdown Thematic Breaks\nDESCRIPTION: Illustrates creating thematic breaks (horizontal rules) in Markdown using asterisks. Multiple asterisks (at least three) on a line create a horizontal rule.\nSOURCE: https://github.com/tinacms/tinacms/blob/main/packages/@tinacms/mdx/src/next/tests/markdown-basic-autoformat-syntax/out.md#2025-04-20_snippet_1\n\nLANGUAGE: Markdown\nCODE:\n```\n\"***\\n\\n***\\n\\n***\\n\\n***\"\n```\n\n----------------------------------------\n\nTITLE: Starting TinaCMS Development Server\nDESCRIPTION: Commands to start the TinaCMS development server using either npm or yarn package managers.\nSOURCE: https://github.com/tinacms/tinacms/blob/main/experimental-examples/kitchen-sink/README.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm run dev\n# or\nyarn dev\n```\n\n----------------------------------------\n\nTITLE: Using Hugo Shortcode in Markdown\nDESCRIPTION: Illustrates the use of a Hugo shortcode named 'some-feature' within a Markdown file. Shortcodes allow you to embed dynamic content or customized layouts into your Markdown pages. The content between the opening and closing tags of the shortcode will be processed by Hugo.\nSOURCE: https://github.com/tinacms/tinacms/blob/main/packages/@tinacms/mdx/src/next/tests/markdown-shortcodes-rich-text-children-2/out.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n\n# hello\n\n{{< some-feature >}}\nTesting this thing\n{{< /some-feature >}}\n\n```\n\n----------------------------------------\n\nTITLE: Including Inline Code in Markdown\nDESCRIPTION: This snippet illustrates how to incorporate inline code within a Markdown document. There are no special dependencies. The expected input is text that represents code, and the output will render it in a monospace font to denote code within the text context.\nSOURCE: https://github.com/tinacms/tinacms/blob/main/packages/@tinacms/mdx/src/next/tests/markdown-basic-kitchen-sink/out.md#2025-04-20_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\nThis paragraph has some `code` in it.\n```\n\n----------------------------------------\n\nTITLE: Defining TinaCMS Project Showcase\nDESCRIPTION: YAML frontmatter configuration defining a showcase section with details about projects built using TinaCMS. Includes project titles, descriptions, and image paths.\nSOURCE: https://github.com/tinacms/tinacms/blob/main/examples/kitchen-sink/content/pages/projects-built-with-tina.md#2025-04-20_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ntitle: Projects Built With Tina\nitems:\n  - title: Paradise Helicopters\n    description: \"A marketing site for Hawaii's largest locally owned and operated helicopter company. Built by\\_[Murmur Creative](https://murmurcreative.com/ \\\"\\\")\\_in Portland, Oregon.\\n\"\n    image: /uploads/llama-1.avif\n  - title: Devolver Digital\n    description: >\n      A marketing site for a boutique game label that works with independent\n      developers from all over the world to produce and promote some of the most\n      original, eccentric, and beloved games of the past decade.\n    image: /uploads/llama-2.avif\n_template: showcase\n```\n\n----------------------------------------\n\nTITLE: Authentication Configuration Migration (Old API) in TinaCMS\nDESCRIPTION: This code snippet shows the previous API for configuring authentication within the TinaCMS `defineConfig` function. It highlights the `admin.auth` property, which contained functions for login, logout, and potentially other authentication-related actions. This API is now deprecated.\nSOURCE: https://github.com/tinacms/tinacms/blob/main/experimental-examples/tina-cloud-starter/CHANGELOG.md#2025-04-20_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\ndefineConfig({\n    admin: {\n      auth: {\n        login() {},\n        logout() {},\n        //...\n      },\n    },\n    //...\n  });\n```\n\n----------------------------------------\n\nTITLE: Copying Environment Configuration\nDESCRIPTION: Command to create a local environment configuration file by copying the example template.\nSOURCE: https://github.com/tinacms/tinacms/blob/main/experimental-examples/tina-cloud-starter/content/pages/about.md#2025-04-20_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\ncp .env.example .env\n```\n\n----------------------------------------\n\nTITLE: Markdown Table Example\nDESCRIPTION: This snippet showcases how to create a table in Markdown. It demonstrates the basic syntax for defining table headers and rows using pipes (|) and hyphens (-).  Different column alignments can be specified using colons (:) in the header row.\nSOURCE: https://github.com/tinacms/tinacms/blob/main/experimental-examples/tina-cloud-starter/content/posts/anotherPost.mdx#2025-04-20_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n| Starting here! | And moving here        |\n| -------------- | ---------------------- |\n| And then here  | And moving here, again |\n\n```\n\n----------------------------------------\n\nTITLE: Watching Packages for Local Development\nDESCRIPTION: Command to run in a separate terminal to watch for changes in the TinaCMS packages during local development. This is used in conjunction with running the CLI locally to test changes.\nSOURCE: https://github.com/tinacms/tinacms/blob/main/CONTRIBUTING.md#2025-04-20_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\npnpm watch\n```\n\n----------------------------------------\n\nTITLE: Rendering React CTA Component with Markdown\nDESCRIPTION: A React component that displays a clickable call-to-action with markdown text support\nSOURCE: https://github.com/tinacms/tinacms/blob/main/packages/@tinacms/mdx/src/next/tests/mdx-blocks-rich-text-children-on-one-line/in.md#2025-04-20_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<Cta>Click **here**!</Cta>\n```\n\n----------------------------------------\n\nTITLE: Markdown Table Example 2 with Alignment\nDESCRIPTION: This snippet extends the basic table example by adding column alignment.  The `:--------` and `----------:` syntax controls the alignment of the content within the columns (left and right respectively). The example also includes additional text in the table cells.\nSOURCE: https://github.com/tinacms/tinacms/blob/main/packages/@tinacms/mdx/src/next/tests/markdown-basic-tables/out.md#2025-04-20_snippet_1\n\nLANGUAGE: Markdown\nCODE:\n```\n\"| Syntax    | Description |   Test Text |\\n| :-------- | :---------- | ----------: |\\n| Header    | Title       | Here's this |\\n| Paragraph | Text        |    And more |\"\n```\n\n----------------------------------------\n\nTITLE: Emphasizing Text in Markdown\nDESCRIPTION: This snippet showcases how to emphasize text using single and double asterisks within a Markdown file. There are no external dependencies. The expected input includes text that requires emphasis, and the output will be rendered as italic and bold text in Markdown viewers.\nSOURCE: https://github.com/tinacms/tinacms/blob/main/packages/@tinacms/mdx/src/next/tests/markdown-basic-kitchen-sink/out.md#2025-04-20_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n*single asterisks*\n\n**double asterisks**\n\nThis is a **paragraph with *nested* emphasis**.\n```\n\n----------------------------------------\n\nTITLE: Authentication Configuration Migration (New API) in TinaCMS\nDESCRIPTION: This code snippet illustrates the new API for configuring authentication in TinaCMS using `authProvider`.  It involves extending the `AbstractAuthProvider` class and implementing the required methods (e.g., login, logout).  This provides a more structured and extensible approach to authentication configuration.\nSOURCE: https://github.com/tinacms/tinacms/blob/main/experimental-examples/tina-cloud-starter/CHANGELOG.md#2025-04-20_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nimport { AbstractAuthProvider } from \\\"tinacms\\\";\n  class CustomAuthProvider extends AbstractAuthProvider {\n    login() {}\n    logout() {}\n    //...\n  }\n  defineConfig({\n    authProvider: new CustomAuthProvider(),\n    //...\n  });\n```\n\n----------------------------------------\n\nTITLE: Installing Project Dependencies with Yarn\nDESCRIPTION: Command to install all required project dependencies using Yarn package manager.\nSOURCE: https://github.com/tinacms/tinacms/blob/main/experimental-examples/tina-cloud-starter/content/pages/about.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nyarn install\n```\n\n----------------------------------------\n\nTITLE: Another Markdown Table Example\nDESCRIPTION: This is another example of a Markdown table. It demonstrates different alignments in the header row. This example showcases how to define table headers and rows using pipes (|) and hyphens (-). Different column alignments can be specified using colons (:) in the header row.\nSOURCE: https://github.com/tinacms/tinacms/blob/main/experimental-examples/tina-cloud-starter/content/posts/anotherPost.mdx#2025-04-20_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n| Syntax    | Description |   Test Text |\n| :-------- | :---------- | ----------: |\n| Header    | Title       | Here's this |\n| Paragraph | Text        |    And more |\n\n```\n\n----------------------------------------\n\nTITLE: Running TinaCMS tests\nDESCRIPTION: This command executes all tests across the TinaCMS project to verify functionality.\nSOURCE: https://github.com/tinacms/tinacms/blob/main/playwright/tina-playwright/content/page/home.mdx#2025-04-20_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nyarn test\n```\n\n----------------------------------------\n\nTITLE: Package Version Updates in Markdown\nDESCRIPTION: Markdown formatted changelog showing version history, patch changes, and dependency updates for the e2e-next package.\nSOURCE: https://github.com/tinacms/tinacms/blob/main/examples/kitchen-sink/CHANGELOG.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# e2e-next\n\n## 0.1.98\n\n### Patch Changes\n\n- Updated dependencies [[`921f235`](https://github.com/tinacms/tinacms/commit/921f2356e4615d532d02eefa7103fdb70f83b97a), [`ab43169`](https://github.com/tinacms/tinacms/commit/ab43169af5a95f31fa27bb0236623a031883a1fd), [`b551232`](https://github.com/tinacms/tinacms/commit/b5512326ad0ad9855bc75e2073a3ab2a8ec4c064), [`ea204c9`](https://github.com/tinacms/tinacms/commit/ea204c9045451f3ebea04f503e6158d2016613e4), [`fd664d8`](https://github.com/tinacms/tinacms/commit/fd664d8f4e83941ed1b1f234668ab6341a6178f8)]]:\n  - tinacms@2.7.5\n  - @tinacms/datalayer@1.3.16\n```\n\n----------------------------------------\n\nTITLE: Hugo Feature Panel Shortcode\nDESCRIPTION: Custom Hugo shortcode for displaying a feature panel with a 'Test' parameter\nSOURCE: https://github.com/tinacms/tinacms/blob/main/examples/kitchen-sink/content/ssg-posts/ssg-postd.md#2025-04-20_snippet_1\n\nLANGUAGE: hugo\nCODE:\n```\n{{% feature-panel \"Test\" %}}\n```\n\n----------------------------------------\n\nTITLE: Legacy Authentication Configuration\nDESCRIPTION: Example of the previous authentication API in TinaCMS config using direct auth functions.\nSOURCE: https://github.com/tinacms/tinacms/blob/main/packages/tinacms/CHANGELOG.md#2025-04-20_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\ndefineConfig({\n  admin: {\n    auth: {\n      login() {},\n      logout() {},\n      //...\n    },\n  },\n  //...\n});\n```\n\n----------------------------------------\n\nTITLE: Querying Lists with GraphQL - Old Format\nDESCRIPTION: Shows the previous format for querying lists in TinaCMS GraphQL API where items were returned as a simple array.\nSOURCE: https://github.com/tinacms/tinacms/blob/main/packages/@tinacms/datalayer/CHANGELOG.md#2025-04-20_snippet_14\n\nLANGUAGE: graphql\nCODE:\n```\n{\n  getPostsList {\n    id\n  }\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"getPostsList\": [\n      {\n        \"id\": \"content/posts/voteForPedro.md\"\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Dependency Version Update in TinaCMS\nDESCRIPTION: Documents an update to @tinacms/datalayer package version to 1.2.29 with reference to commit a65ca13f2.\nSOURCE: https://github.com/tinacms/tinacms/blob/main/packages/tinacms-gitprovider-github/CHANGELOG.md#2025-04-20_snippet_6\n\nLANGUAGE: markdown\nCODE:\n```\n### Patch Changes\n\n- Updated dependencies [a65ca13f2]\n  - @tinacms/datalayer@1.2.29\n```\n\n----------------------------------------\n\nTITLE: Markdown Bold Text\nDESCRIPTION: This snippet demonstrates how to create bold text using double asterisks or double underscores in Markdown. The text enclosed within the asterisks or underscores will be rendered as bold.\nSOURCE: https://github.com/tinacms/tinacms/blob/main/packages/@tinacms/mdx/src/next/tests/markdown-basic-marks/out.md#2025-04-20_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n\"Some **bold** text\"\n```\n\n----------------------------------------\n\nTITLE: Setting Up TinaCMS Database Integration\nDESCRIPTION: These snippets showcase how to configure database settings for TinaCMS, with considerations for local and GitHub-hosted setups using the revised database adapter and git provider configurations. The setup has been updated to use a `GitHubProvider` for GitHub integration and a `createLocalDatabase` function for local development. Ensure environment variables such as `GITHUB_PERSONAL_ACCESS_TOKEN`, `MONGODB_URI`, and others are correctly configured when initiating the database connections.\nSOURCE: https://github.com/tinacms/tinacms/blob/main/packages/@tinacms/scripts/CHANGELOG.md#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createDatabase, createLocalDatabase } from \"@tinacms/datalayer\";\nimport { MongodbLevel } from \"mongodb-level\";\nimport { GitHubProvider } from \"tinacms-gitprovider-github\";\n\nconst isLocal = process.env.TINA_PUBLIC_IS_LOCAL === \"true\";\n\nexport default isLocal\n  ? createLocalDatabase()\n  : createDatabase({\n      gitProvider: new GitHubProvider({\n        branch: process.env.GITHUB_BRANCH,\n        owner: process.env.GITHUB_OWNER,\n        repo: process.env.GITHUB_REPO,\n        token: process.env.GITHUB_PERSONAL_ACCESS_TOKEN,\n      }),\n      databaseAdapter: new MongodbLevel<string, Record<string, any>>({\n        collectionName: \"tinacms\",\n        dbName: \"tinacms\",\n        mongoUri: process.env.MONGODB_URI,\n      }),\n      namespace: process.env.GITHUB_BRANCH,\n    });\n```\n\n----------------------------------------\n\nTITLE: Version History Markdown Documentation\nDESCRIPTION: A changelog written in markdown format tracking version updates from 0.1.26 down to 0.1.1, documenting patch changes and dependency updates for the next-2024 package.\nSOURCE: https://github.com/tinacms/tinacms/blob/main/examples/next-2024/CHANGELOG.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# next-2024\n\n## 0.1.26\n\n### Patch Changes\n\n- Updated dependencies [[`921f235`](https://github.com/tinacms/tinacms/commit/921f2356e4615d532d02eefa7103fdb70f83b97a), [`ab43169`](https://github.com/tinacms/tinacms/commit/ab43169af5a95f31fa27bb0236623a031883a1fd), [`b551232`](https://github.com/tinacms/tinacms/commit/b5512326ad0ad9855bc75e2073a3ab2a8ec4c064), [`ea204c9`](https://github.com/tinacms/tinacms/commit/ea204c9045451f3ebea04f503e6158d2016613e4), [`fd664d8`](https://github.com/tinacms/tinacms/commit/fd664d8f4e83941ed1b1f234668ab6341a6178f8)]:\n  - tinacms@2.7.5\n```\n\n----------------------------------------\n\nTITLE: Markdown Inline Code\nDESCRIPTION: This snippet shows how to represent inline code snippets within a Markdown document. Backticks (` `) are used to enclose the code, which will be displayed in a monospace font.\nSOURCE: https://github.com/tinacms/tinacms/blob/main/packages/@tinacms/mdx/src/next/tests/markdown-basic-marks/out.md#2025-04-20_snippet_4\n\nLANGUAGE: Markdown\nCODE:\n```\n\"Some `inline code` examples\"\n```\n\n----------------------------------------\n\nTITLE: Database Configuration: Replacing Level\nDESCRIPTION: This code highlights the change from using `level` to `databaseAdapter` for database configuration. It shows the diff between the old and new configurations, emphasizing the renaming for clarity.\nSOURCE: https://github.com/tinacms/tinacms/blob/main/examples/tina-self-hosted-demo/CHANGELOG.md#2025-04-20_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ncreateDatabase({\n  -    level: new MongodbLevel<string, Record<string, any>>(...),\n  +    databaseAdapter: new MongodbLevel<string, Record<string, any>>(...),\n})\n```\n\n----------------------------------------\n\nTITLE: Object Type with Templates for Blocks\nDESCRIPTION: Example of defining an object type with templates and list property, which replicates the functionality of the previous 'blocks' type.\nSOURCE: https://github.com/tinacms/tinacms/blob/main/packages/@tinacms/graphql/CHANGELOG.md#2025-04-20_snippet_33\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  type: \"object\",\n  label: \"Page Sections\",\n  name: \"pageSections\",\n  list: true,\n  templates: [{\n    label: \"Hero\",\n    name: \"hero\",\n    fields: [{\n      label: \"Title\",\n      name: \"title\",\n      type: \"string\"\n    }]\n  }]\n}\n```\n\n----------------------------------------\n\nTITLE: Using Hugo Center Shortcode\nDESCRIPTION: This snippet demonstrates how to use a custom Hugo shortcode named 'center'. The content between the opening and closing shortcode tags will be processed by the shortcode definition, presumably to center the enclosed HTML.\nSOURCE: https://github.com/tinacms/tinacms/blob/main/packages/@tinacms/mdx/src/next/tests/FIXME-markdown-shortcodes-block-with-html-children-2/out.md#2025-04-20_snippet_0\n\nLANGUAGE: Hugo\nCODE:\n```\n\"{{\n```\n\nLANGUAGE: Hugo\nCODE:\n```\n< center >}}\n<Some>\n{{\n```\n\nLANGUAGE: Hugo\nCODE:\n```\n< /center >}}\n{{\n```\n\nLANGUAGE: Hugo\nCODE:\n```\n< /center >}}\n```\n\n----------------------------------------\n\nTITLE: YAML Frontmatter Definition\nDESCRIPTION: Basic YAML frontmatter block defining a name property with value 'Francis Ford Coppolla'\nSOURCE: https://github.com/tinacms/tinacms/blob/main/packages/@tinacms/graphql/src/spec/movies/content/directors/francis.md#2025-04-20_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nname: Francis Ford Coppolla\n---\n```\n\n----------------------------------------\n\nTITLE: Hugo Center Shortcode Usage\nDESCRIPTION: This snippet shows how to use a Hugo shortcode named 'center' to center a block of content. The shortcode wraps the enclosed content with opening and closing center tags. This approach is commonly used for simple content alignment within markdown files.\nSOURCE: https://github.com/tinacms/tinacms/blob/main/packages/@tinacms/mdx/src/next/tests/FIXME-markdown-shortcodes-block-with-html-children-2/in.md#2025-04-20_snippet_0\n\nLANGUAGE: Hugo\nCODE:\n```\n{{< center >}}\n<Some>\n{{< /center >}}\n```\n\n----------------------------------------\n\nTITLE: New Authentication Provider Implementation\nDESCRIPTION: Example of the new authentication API in TinaCMS config using a class-based approach with AbstractAuthProvider.\nSOURCE: https://github.com/tinacms/tinacms/blob/main/packages/tinacms/CHANGELOG.md#2025-04-20_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport { AbstractAuthProvider } from \"tinacms\";\nclass CustomAuthProvider extends AbstractAuthProvider {\n  login() {}\n  logout() {}\n  //...\n}\ndefineConfig({\n  authProvider: new CustomAuthProvider(),\n  //...\n});\n```\n\n----------------------------------------\n\nTITLE: Database Migration: Custom Git Provider\nDESCRIPTION: This code snippet illustrates how to implement a custom Git provider by implementing the `GitProvider` interface. It shows the basic structure of a custom `GitProvider` with `onPut` and `onDelete` methods.\nSOURCE: https://github.com/tinacms/tinacms/blob/main/packages/@tinacms/cli/CHANGELOG.md#2025-04-20_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nclass CustomGitProvider implements GitProvider {\n    async onPut(key: string, value: string) {\n        // ...\n    }\n\n    async onDelete(key: string) {\n        // ...\n    }\n}\n\n\nconst gitProvider = new CustomGitProvider();\n```\n\n----------------------------------------\n\nTITLE: Markdown Headers Example\nDESCRIPTION: Shows different levels of headers in Markdown using the '#' symbol. The number of '#' symbols determines the header level (H1, H2, etc.).\nSOURCE: https://github.com/tinacms/tinacms/blob/main/packages/@tinacms/mdx/src/next/tests/markdown-basic-autoformat-syntax/out.md#2025-04-20_snippet_2\n\nLANGUAGE: Markdown\nCODE:\n```\n\"# Headers\\n\\n# Header 1\\n\\n## Header 2\"\n```\n\n----------------------------------------\n\nTITLE: GraphQL List Query - New Connection Implementation\nDESCRIPTION: Demonstrates the new connection-based implementation for list queries using edges and nodes pattern.\nSOURCE: https://github.com/tinacms/tinacms/blob/main/packages/tinacms/CHANGELOG.md#2025-04-20_snippet_38\n\nLANGUAGE: graphql\nCODE:\n```\n{\n    getPostsList {\n      edges {\n        node {\n          id\n        }\n      }\n    }\n  }\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"data\": {\n      \"getPostsList\": {\n        \"edges\": [\n          {\n            \"node\": {\n              \"id\": \"content/posts/voteForPedro.md\"\n            }\n          }\n        ]\n      }\n    }\n  }\n```\n\n----------------------------------------\n\nTITLE: Hugo Shortcode Invocation with Children\nDESCRIPTION: This snippet demonstrates the usage of a Hugo shortcode named 'some-feature'. It includes content between the opening and closing shortcode tags, illustrating how Hugo shortcodes can handle nested content. The example also shows an unclosed shortcode tag, which is expected to be handled gracefully by Hugo.\nSOURCE: https://github.com/tinacms/tinacms/blob/main/packages/@tinacms/mdx/src/next/tests/markdown-shortcodes-invalid-4/out.md#2025-04-20_snippet_0\n\nLANGUAGE: Hugo\nCODE:\n```\n{{% some-feature %}}\nAnd we didn't close it out, but it should still work\n{{% /some-feature %}}\n```\n\n----------------------------------------\n\nTITLE: Configuring Gatsby Plugins for TinaCMS\nDESCRIPTION: This code shows how to configure Gatsby plugins for TinaCMS in a monorepo setup. It demonstrates using relative paths for local plugins and explains why some plugins cannot be imported relatively.\nSOURCE: https://github.com/tinacms/tinacms/blob/main/packages/@tinacms/webpack-helpers/README.md#2025-04-20_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  resolve: \"../tinacms/packages/gatsby-plugin-tinacms\",\n  options: {\n    plugins: [\n      \"../tinacms/packages/gatsby-tinacms-git\",\n      \"gatsby-tinacms-json\",\n      \"gatsby-tinacms-remark\",\n    ],\n    sidebar: {\n      position: \"fixed\",\n      hidden: process.env.NODE_ENV === \"production\"\n    }\n  }\n},\n```\n\n----------------------------------------\n\nTITLE: TinaNodeBackend Implementation for API Routes\nDESCRIPTION: Example showing how to set up a Next.js API route for the TinaCMS backend using TinaNodeBackend with conditional authentication providers based on environment.\nSOURCE: https://github.com/tinacms/tinacms/blob/main/packages/tinacms-clerk/CHANGELOG.md#2025-04-20_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  TinaNodeBackend,\n  LocalBackendAuthProvider,\n} from \"@tinacms/datalayer\";\n\nimport { TinaAuthJSOptions, AuthJsBackendAuthProvider } from \"tinacms-authjs\";\n\nimport databaseClient from \"../../../tina/__generated__/databaseClient\";\n\nconst isLocal = process.env.TINA_PUBLIC_IS_LOCAL === \"true\";\n\nconst handler = TinaNodeBackend({\n  authProvider: isLocal\n    ? LocalBackendAuthProvider()\n    : AuthJsBackendAuthProvider({\n        authOptions: TinaAuthJSOptions({\n          databaseClient: databaseClient,\n          secret: process.env.NEXTAUTH_SECRET,\n        }),\n      }),\n  databaseClient,\n});\n\nexport default (req, res) => {\n  // Modify the request here if you need to\n  return handler(req, res);\n};\n```\n\n----------------------------------------\n\nTITLE: String Type with Options for Select Field\nDESCRIPTION: Example of a string type with options property, which is represented by a select field in the UI.\nSOURCE: https://github.com/tinacms/tinacms/blob/main/packages/@tinacms/graphql/CHANGELOG.md#2025-04-20_snippet_31\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  type: \"string\",\n  label: \"Categories\",\n  name: \"categories\",\n  options: [\"fitness\", \"movies\", \"music\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Basic YAML Frontmatter in TinaCMS\nDESCRIPTION: Simple YAML frontmatter block defining a 'name' field with value 'Sean Connery'. The frontmatter is delimited by triple dashes (---) and contains metadata about the content.\nSOURCE: https://github.com/tinacms/tinacms/blob/main/packages/@tinacms/graphql/src/spec/movies/content/actors/sean.md#2025-04-20_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nname: Sean Connery\n---\n```\n\n----------------------------------------\n\nTITLE: Displaying Version and Change Information in Markdown\nDESCRIPTION: This code snippet shows how version information and changes are formatted in the changelog using Markdown syntax. It includes headings for version numbers, links to pull requests, and descriptions of changes.\nSOURCE: https://github.com/tinacms/tinacms/blob/main/packages/create-tina-app/CHANGELOG.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## 1.3.4\n\n### Patch Changes\n\n- [#5594](https://github.com/tinacms/tinacms/pull/5594) [`95a293c`](https://github.com/tinacms/tinacms/commit/95a293cffab73635dc0677ad5277fc84cbf2c507) Thanks [@brookjeynes-ssw](https://github.com/brookjeynes-ssw)! - feat: Added `bun` package manager.\n  fix: Removed dead code from `install` method.\n- Updated dependencies []:  \n  - @tinacms/metrics@1.0.9\n```\n\n----------------------------------------\n\nTITLE: Updated typename Values Query\nDESCRIPTION: Shows the new namespace-aware typename values in GraphQL queries.\nSOURCE: https://github.com/tinacms/tinacms/blob/main/packages/tinacms/CHANGELOG.md#2025-04-20_snippet_42\n\nLANGUAGE: graphql\nCODE:\n```\n{\n    getPageDocument(relativePath: \"home.md\") {\n      data {\n        title\n        myBlocks {\n          ...on Page_Hero_Data {  # previously this would have been Hero_Data\n            # ...\n          }\n        }\n      }\n    }\n```\n\n----------------------------------------\n\nTITLE: Running TinaCMS development server\nDESCRIPTION: This command starts TinaCMS in development mode, making it available for local testing.\nSOURCE: https://github.com/tinacms/tinacms/blob/main/playwright/tina-playwright/content/page/home.mdx#2025-04-20_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nyarn dev\n```\n\n----------------------------------------\n\nTITLE: JavaScript Code Block\nDESCRIPTION: This is a simple JavaScript code snippet declaring a variable 'it' and assigning the string value 'be' to it. It demonstrates embedding executable code within content managed by TinaCMS.\nSOURCE: https://github.com/tinacms/tinacms/blob/main/packages/@tinacms/graphql/src/spec/movies/mutations/updateDocument/_response.md#2025-04-20_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nlet it = 'be'\n```\n\n----------------------------------------\n\nTITLE: Embedding Inline Code in HTML with React\nDESCRIPTION: This snippet demonstrates the use of an inline code block within a larger HTML document. No external dependencies are necessary, and the inline code appears amongst text content allowing for code display in situ. There are no parameters or outputs beyond its display functionality.\nSOURCE: https://github.com/tinacms/tinacms/blob/main/packages/@tinacms/graphql/src/spec/movies/content/movies/star-wars.mdx#2025-04-20_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\nthis is an** **`inline`**  **code block\n```\n\n----------------------------------------\n\nTITLE: Database Configuration: Custom Git Provider\nDESCRIPTION: This code snippet illustrates how to implement a custom Git provider by implementing the `GitProvider` interface. It shows the basic structure required, with the `onPut` and `onDelete` methods that need to be implemented.\nSOURCE: https://github.com/tinacms/tinacms/blob/main/examples/tina-self-hosted-demo/CHANGELOG.md#2025-04-20_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nclass CustomGitProvider implements GitProvider {\n      async onPut(key: string, value: string) {\n          // ...\n      }\n\n      async onDelete(key: string) {\n          // ...\n      }\n  }\n\n\n  const gitProvider = new CustomGitProvider();\n```\n\n----------------------------------------\n\nTITLE: Implementing a Custom Git Provider in TypeScript\nDESCRIPTION: This code snippet defines a CustomGitProvider class that implements the GitProvider interface to provide customized Git operations within TinaCMS, including the implementation of async functions onPut and onDelete.\nSOURCE: https://github.com/tinacms/tinacms/blob/main/examples/kitchen-sink/CHANGELOG.md#2025-04-20_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nclass CustomGitProvider implements GitProvider\n    async onPut(key: string, value: string)\n        // ...\n\n    async onDelete(key: string)\n        // ...\n```\n\n----------------------------------------\n\nTITLE: Alternative package.json Scripts for TinaCMS Development\nDESCRIPTION: This snippet provides an alternative configuration for package.json scripts, using the -c subcommand to start the dev server and next dev process in the same terminal.\nSOURCE: https://github.com/tinacms/tinacms/blob/main/packages/@tinacms/schema-tools/CHANGELOG.md#2025-04-20_snippet_18\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"scripts\": {\n    \"dev\": \"tinacms server:start \\\"tinacms build --local && next dev\\\"\",\n    \"dev-server\": \"tinacms server:start\",\n    \"build\": \"tinacms build && next build\"\n    // ... Other Scripts\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Git Provider in TypeScript\nDESCRIPTION: This code snippet shows how to implement a custom GitProvider interface for use with TinaCMS when not using the default GitHub provider.\nSOURCE: https://github.com/tinacms/tinacms/blob/main/packages/next-tinacms-cloudinary/CHANGELOG.md#2025-04-20_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nclass CustomGitProvider implements GitProvider {\n    async onPut(key: string, value: string) {\n        // ...\n    }\n\n    async onDelete(key: string) {\n        // ...\n    }\n}\n\nconst gitProvider = new CustomGitProvider();\n```\n\n----------------------------------------\n\nTITLE: Querying Page Title with GraphQL\nDESCRIPTION: A GraphQL query that retrieves a page title based on a relative path parameter. The query uses a single parameter to fetch the title field from a page type.\nSOURCE: https://github.com/tinacms/tinacms/blob/main/examples/kitchen-sink/content/post/large-file.mdx#2025-04-20_snippet_1\n\nLANGUAGE: graphql\nCODE:\n```\nquery MyQuery($relativePath: String!) {\n  page(relativePath: $relativePath) {\n    title\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Unregistered Component with Markdown Child in JSX\nDESCRIPTION: This snippet shows an unregistered component, `<SomeUnregisteredComponen>`, containing Markdown content as a child. It demonstrates how JSX might interpret and render content within unregistered components.\nSOURCE: https://github.com/tinacms/tinacms/blob/main/packages/@tinacms/mdx/src/next/tests/mdx-unregistered-component/out.md#2025-04-20_snippet_1\n\nLANGUAGE: JSX\nCODE:\n```\n\"<SomeUnregisteredComponen>\\n  # Some markdown in the child\\n</SomeUnregisteredComponen>\"\n```\n\n----------------------------------------\n\nTITLE: Setting up development environment and installing dependencies using yarn\nDESCRIPTION: This command installs all dependencies for the TinaCMS project using Yarn, which is required for development.\nSOURCE: https://github.com/tinacms/tinacms/blob/main/playwright/tina-playwright/content/page/home.mdx#2025-04-20_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nyarn\n```\n\n----------------------------------------\n\nTITLE: Previous Authentication Configuration API\nDESCRIPTION: Example of the deprecated authentication configuration using admin.auth with login and logout functions.\nSOURCE: https://github.com/tinacms/tinacms/blob/main/packages/tinacms-clerk/CHANGELOG.md#2025-04-20_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\ndefineConfig({\n  admin: {\n    auth: {\n      login() {},\n      logout() {},\n      //...\n    },\n  },\n  //...\n});\n```\n\n----------------------------------------\n\nTITLE: TOML Frontmatter Configuration\nDESCRIPTION: Defines page metadata including title and last updated timestamp using TOML frontmatter syntax\nSOURCE: https://github.com/tinacms/tinacms/blob/main/examples/basic-iframe/content/page/home.mdx#2025-04-20_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n+++\nTitle = \"Title\"\nlastUpdated = 2023-08-04T14:50:41.204Z\n+++\n```\n\n----------------------------------------\n\nTITLE: Defining YAML Frontmatter Configuration\nDESCRIPTION: YAML frontmatter configuration block that defines profile metadata including name, description and location fields.\nSOURCE: https://github.com/tinacms/tinacms/blob/main/experimental-examples/kitchen-sink/content/author/napolean 4.md#2025-04-20_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nname: Sydney - Napoleon\ndescription: test\nlocation: sydney\n---\n```\n\n----------------------------------------\n\nTITLE: Hugo Frontmatter Definition\nDESCRIPTION: Page frontmatter defining the title 'SSG Post' using YAML syntax\nSOURCE: https://github.com/tinacms/tinacms/blob/main/examples/kitchen-sink/content/ssg-posts/ssg-postd.md#2025-04-20_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntitle: SSG Postd\n---\n```\n\n----------------------------------------\n\nTITLE: Unidentified Code Snippet\nDESCRIPTION: Untyped code snippet with no specific language or context identified.\nSOURCE: https://github.com/tinacms/tinacms/blob/main/packages/@tinacms/mdx/src/next/tests/markdown-basic-code-block/out.md#2025-04-20_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nsome random code\n```"
  }
]