[
  {
    "owner": "ent",
    "repo": "ent",
    "content": "TITLE: Defining User Schema with Fields, Edges, and Indexes in Go using Ent\nDESCRIPTION: This code snippet demonstrates how to define a User schema in Ent. It includes field definitions (age, name, nickname), edge definitions (groups, friends), and an index definition. The schema uses various Ent packages for field types, edge definitions, and index creation.\nSOURCE: https://github.com/ent/ent/blob/master/doc/md/schema-def.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\npackage schema\n\nimport (\n\t\"entgo.io/ent\"\n\t\"entgo.io/ent/schema/field\"\n\t\"entgo.io/ent/schema/edge\"\n\t\"entgo.io/ent/schema/index\"\n)\n\ntype User struct {\n\tent.Schema\n}\n\nfunc (User) Fields() []ent.Field {\n\treturn []ent.Field{\n\t\tfield.Int(\"age\"),\n\t\tfield.String(\"name\"),\n\t\tfield.String(\"nickname\").\n\t\t\tUnique(),\n\t}\n}\n\nfunc (User) Edges() []ent.Edge {\n\treturn []ent.Edge{\n\t\tedge.To(\"groups\", Group.Type),\n\t\tedge.To(\"friends\", User.Type),\n\t}\n}\n\nfunc (User) Indexes() []ent.Index {\n\treturn []ent.Index{\n\t\tindex.Fields(\"age\", \"name\").\n\t\t\tUnique(),\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Defining M2M Group-User Edge Relations\nDESCRIPTION: Schema definitions for many-to-many relationship between groups and users. Shows both sides of the relationship with the Group having many Users and Users belonging to many Groups.\nSOURCE: https://github.com/ent/ent/blob/master/doc/md/schema-edges.mdx#2025-04-22_snippet_15\n\nLANGUAGE: go\nCODE:\n```\n// Edges of the Group.\nfunc (Group) Edges() []ent.Edge {\n\treturn []ent.Edge{\n\t\tedge.To(\"users\", User.Type),\n\t}\n}\n```\n\nLANGUAGE: go\nCODE:\n```\n// Edges of the User.\nfunc (User) Edges() []ent.Edge {\n\treturn []ent.Edge{\n\t\tedge.From(\"groups\", Group.Type).\n\t\t\tRef(\"users\"),\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Running Auto-Migration in Go Application with Ent\nDESCRIPTION: Basic example showing how to run automatic schema migration during application initialization. This ensures the database schema stays aligned with the Ent schema definitions.\nSOURCE: https://github.com/ent/ent/blob/master/doc/md/migrate.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nif err := client.Schema.Create(ctx); err != nil {\n\tlog.Fatalf(\"failed creating schema resources: %v\", err)\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Ent and Generating Initial Schema\nDESCRIPTION: Installs the Ent package and generates an initial Todo schema using the Ent CLI.\nSOURCE: https://github.com/ent/ent/blob/master/doc/md/tutorial-setup.md#2025-04-22_snippet_1\n\nLANGUAGE: console\nCODE:\n```\ngo get entgo.io/ent/cmd/ent\n```\n\nLANGUAGE: console\nCODE:\n```\ngo run -mod=mod entgo.io/ent/cmd/ent new Todo\n```\n\n----------------------------------------\n\nTITLE: Using AND Predicate in Ent Queries (Go)\nDESCRIPTION: Example of using the And predicate to create a conjunction between conditions in Ent queries.\nSOURCE: https://github.com/ent/ent/blob/master/doc/md/predicates.md#2025-04-22_snippet_4\n\nLANGUAGE: go\nCODE:\n```\nclient.Pet.\n\tQuery().\n\tWhere(\n\t\tpet.And(\n\t\t\tpet.HasOwner(),\n\t\t\tpet.Not(pet.HasFriends()),\n\t\t)\n\t).\n\tAll(ctx)\n```\n\n----------------------------------------\n\nTITLE: Implementing a Reusable Transaction Function in Ent\nDESCRIPTION: A best practice pattern for implementing a reusable function that executes callbacks within a transaction context. The function handles transaction creation, error handling, panic recovery, and proper commit/rollback operations.\nSOURCE: https://github.com/ent/ent/blob/master/doc/md/transactions.md#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nfunc WithTx(ctx context.Context, client *ent.Client, fn func(tx *ent.Tx) error) error {\n\ttx, err := client.Tx(ctx)\n\tif err != nil {\n\t\treturn err\n\t}\n\tdefer func() {\n\t\tif v := recover(); v != nil {\n\t\t\ttx.Rollback()\n\t\t\tpanic(v)\n\t\t}\n\t}()\n\tif err := fn(tx); err != nil {\n\t\tif rerr := tx.Rollback(); rerr != nil {\n\t\t\terr = fmt.Errorf(\"%w: rolling back transaction: %v\", err, rerr)\n\t\t}\n\t\treturn err\n\t}\n\tif err := tx.Commit(); err != nil {\n\t\treturn fmt.Errorf(\"committing transaction: %w\", err)\n\t}\n\treturn nil\n}\n```\n\n----------------------------------------\n\nTITLE: Interacting with O2O Bidirectional Edge in Go using Ent\nDESCRIPTION: This snippet shows how to create users, set spouse relationships, and query the spouse edge. It demonstrates creating users, setting spouses, and performing various queries on the spouse relationship.\nSOURCE: https://github.com/ent/ent/blob/master/doc/md/schema-edges.mdx#2025-04-22_snippet_10\n\nLANGUAGE: go\nCODE:\n```\nfunc Do(ctx context.Context, client *ent.Client) error {\n\ta8m, err := client.User.\n\t\tCreate().\n\t\tSetAge(30).\n\t\tSetName(\"a8m\").\n\t\tSave(ctx)\n\tif err != nil {\n\t\treturn fmt.Errorf(\"creating user: %w\", err)\n\t}\n\tnati, err := client.User.\n\t\tCreate().\n\t\tSetAge(28).\n\t\tSetName(\"nati\").\n\t\tSetSpouse(a8m).\n\t\tSave(ctx)\n\tif err != nil {\n\t\treturn fmt.Errorf(\"creating user: %w\", err)\n\t}\n\n\t// Query the spouse edge.\n\t// Unlike `Only`, `OnlyX` panics if an error occurs.\n\tspouse := nati.QuerySpouse().OnlyX(ctx)\n\tfmt.Println(spouse.Name)\n\t// Output: a8m\n\n\tspouse = a8m.QuerySpouse().OnlyX(ctx)\n\tfmt.Println(spouse.Name)\n\t// Output: nati\n\n\t// Query how many users have a spouse.\n\t// Unlike `Count`, `CountX` panics if an error occurs.\n\tcount := client.User.\n\t\tQuery().\n\t\tWhere(user.HasSpouse()).\n\t\tCountX(ctx)\n\tfmt.Println(count)\n\t// Output: 2\n\n\t// Get the user, that has a spouse with name=\"a8m\".\n\tspouse = client.User.\n\t\tQuery().\n\t\tWhere(user.HasSpouseWith(user.Name(\"a8m\"))).\n\t\tOnlyX(ctx)\n\tfmt.Println(spouse.Name)\n\t// Output: nati\n\treturn nil\n}\n```\n\n----------------------------------------\n\nTITLE: Working with JSON Fields in Ent\nDESCRIPTION: This Go code snippet demonstrates how to insert and query JSON data using Ent, including the use of JSON predicates.\nSOURCE: https://github.com/ent/ent/blob/master/doc/website/blog/2022-10-10-json-append.mdx#2025-04-22_snippet_4\n\nLANGUAGE: go\nCODE:\n```\nfunc TestEntJSON(t *testing.T) {\n\tclient := enttest.Open(t, \"sqlite3\", \"file:ent?mode=memory&cache=shared&_fk=1\")\n\tctx := context.Background()\n\t// Insert a user with two comments.\n\tclient.User.Create().\n\t\tSetTags([]schema.Tag{\n\t\t\t{Name: \"hello\", Created: time.Now()},\n\t\t\t{Name: \"goodbye\", Created: time.Now()},\n\t\t}).\n\t\tSaveX(ctx)\n\n\t// Count how many users have more than zero tags.\n\tcount := client.User.Query().\n\t\tWhere(func(s *sql.Selector) {\n\t\t\ts.Where(\n\t\t\t\tsqljson.LenGT(user.FieldTags, 0),\n\t\t\t)\n\t\t}).\n\t\tCountX(ctx)\n\tfmt.Printf(\"count: %d\", count)\n\t// Prints: count: 1\n}\n```\n\n----------------------------------------\n\nTITLE: Defining User Schema with Friendship Edge in Go using Ent\nDESCRIPTION: Schema definition for the User entity with a friends relationship implemented through an edge schema. This demonstrates how to create a many-to-many self-referential relationship using the Through option.\nSOURCE: https://github.com/ent/ent/blob/master/doc/md/schema-edges.mdx#2025-04-22_snippet_20\n\nLANGUAGE: go\nCODE:\n```\n// User holds the schema definition for the User entity.\ntype User struct {\n\tent.Schema\n}\n\n// Fields of the User.\nfunc (User) Fields() []ent.Field {\n\treturn []ent.Field{\n\t\tfield.String(\"name\").\n\t\t\tDefault(\"Unknown\"),\n\t}\n}\n\n// Edges of the User.\nfunc (User) Edges() []ent.Edge {\n\treturn []ent.Edge{\n\t\tedge.To(\"friends\", User.Type).\n\t\t\tThrough(\"friendships\", Friendship.Type),\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Privacy Feature in Ent Schema Generation\nDESCRIPTION: This code snippet demonstrates how to enable the privacy feature in Ent schema generation using the CLI option.\nSOURCE: https://github.com/ent/ent/blob/master/doc/md/privacy.mdx#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\npackage ent\n\n//go:generate go run -mod=mod entgo.io/ent/cmd/ent generate --feature privacy ./schema\n```\n\n----------------------------------------\n\nTITLE: Interacting with M2M Relationship in Go using Ent\nDESCRIPTION: Shows how to create groups and users, establish M2M relationships, and perform complex queries using the Ent client in Go.\nSOURCE: https://github.com/ent/ent/blob/master/examples/README.md#2025-04-22_snippet_14\n\nLANGUAGE: go\nCODE:\n```\nfunc Do(ctx context.Context, client *ent.Client) error {\n\t// Unlike `Save`, `SaveX` panics if an error occurs.\n\thub := client.Group.\n\t\tCreate().\n\t\tSetName(\"GitHub\").\n\t\tSaveX(ctx)\n\tlab := client.Group.\n\t\tCreate().\n\t\tSetName(\"GitLab\").\n\t\tSaveX(ctx)\n\ta8m := client.User.\n\t\tCreate().\n\t\tSetAge(30).\n\t\tSetName(\"a8m\").\n\t\tAddGroups(hub, lab).\n\t\tSaveX(ctx)\n\tnati := client.User.\n\t\tCreate().\n\t\tSetAge(28).\n\t\tSetName(\"nati\").\n\t\tAddGroups(hub).\n\t\tSaveX(ctx)\n\n\t// Query the edges.\n\tgroups, err := a8m.\n\t\tQueryGroups().\n\t\tAll(ctx)\n\tif err != nil {\n\t\treturn fmt.Errorf(\"querying a8m groups: %w\", err)\n\t}\n\tfmt.Println(groups)\n\t// Output: [Group(id=1, name=GitHub) Group(id=2, name=GitLab)]\n\n\tgroups, err = nati.\n\t\tQueryGroups().\n\t\tAll(ctx)\n\tif err != nil {\n\t\treturn fmt.Errorf(\"querying nati groups: %w\", err)\n\t}\n\tfmt.Println(groups)\n\t// Output: [Group(id=1, name=GitHub)]\n\n\t// Traverse the graph.\n\tusers, err := a8m.\n\t\tQueryGroups().                                           // [hub, lab]\n\t\tWhere(group.Not(group.HasUsersWith(user.Name(\"nati\")))).  // [lab]\n\t\tQueryUsers().                                            // [a8m]\n\t\tQueryGroups().                                           // [hub, lab]\n\t\tQueryUsers().                                            // [a8m, nati]\n\t\tAll(ctx)\n\tif err != nil {\n\t\treturn fmt.Errorf(\"traversing the graph: %w\", err)\n\t}\n\tfmt.Println(users)\n\t// Output: [User(id=1, age=30, name=a8m) User(id=2, age=28, name=nati)]\n\treturn nil\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Storage Keys for Ent Edges in Go\nDESCRIPTION: Demonstrates how to configure custom storage settings for different types of edge relationships including O2M and M2M. Shows configuration of column names, foreign key constraints, and join tables.\nSOURCE: https://github.com/ent/ent/blob/master/doc/md/schema-edges.mdx#2025-04-22_snippet_30\n\nLANGUAGE: go\nCODE:\n```\n// Edges of the User.\nfunc (User) Edges() []ent.Edge {\n\treturn []ent.Edge{\n\t\tedge.To(\"pets\", Pet.Type).\n\t\t\t// Set the column name in the \"pets\" table for O2M relationship.\n\t\t\tStorageKey(edge.Column(\"owner_id\")),\n\t\tedge.To(\"cars\", Car.Type).\n\t\t\t// Set the symbol of the foreign-key constraint for O2M relationship.\n\t\t\tStorageKey(edge.Symbol(\"cars_owner_id\")),\n\t\tedge.To(\"friends\", User.Type).\n\t\t\t// Set the join-table, and the column names for a M2M relationship.\n\t\t\tStorageKey(edge.Table(\"friends\"), edge.Columns(\"user_id\", \"friend_id\")),\n\t\tedge.To(\"groups\", Group.Type).\n\t\t\t// Set the join-table, its column names and the symbols\n\t\t\t// of the foreign-key constraints for M2M relationship.\n\t\t\tStorageKey(\n\t\t\t\tedge.Table(\"groups\"),\n\t\t\t\tedge.Columns(\"user_id\", \"group_id\"),\n\t\t\t\tedge.Symbols(\"groups_id1\", \"groups_id2\")\n\t\t\t),\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Up ent Client with SQLite in Go\nDESCRIPTION: Creates an ent client using SQLite and runs schema migration.\nSOURCE: https://github.com/ent/ent/blob/master/doc/md/getting-started.mdx#2025-04-22_snippet_4\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"context\"\n\t\"log\"\n\n    \"entdemo/ent\"\n\n\t_ \"github.com/mattn/go-sqlite3\"\n)\n\nfunc main() {\n\tclient, err := ent.Open(\"sqlite3\", \"file:ent?mode=memory&cache=shared&_fk=1\")\n\tif err != nil {\n\t\tlog.Fatalf(\"failed opening connection to sqlite: %v\", err)\n\t}\n\tdefer client.Close()\n\t// Run the auto migration tool.\n\tif err := client.Schema.Create(context.Background()); err != nil {\n\t\tlog.Fatalf(\"failed creating schema resources: %v\", err)\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Defining M2M Relationship in User Schema (User to Group)\nDESCRIPTION: This code snippet demonstrates how to define a many-to-many relationship from User to Group using edge.From in the User schema. It establishes that a User can belong to multiple groups, and also shows multiple edge definitions in one schema.\nSOURCE: https://github.com/ent/ent/blob/master/doc/md/schema-edges.mdx#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\npackage schema\n\nimport (\n\t\"entgo.io/ent\"\n\t\"entgo.io/ent/schema/edge\"\n)\n\n// User schema.\ntype User struct {\n\tent.Schema\n}\n\n// Fields of the user.\nfunc (User) Fields() []ent.Field {\n\treturn []ent.Field{\n\t\t// ...\n\t}\n}\n\n// Edges of the user.\nfunc (User) Edges() []ent.Edge {\n\treturn []ent.Edge{\n\t\tedge.From(\"groups\", Group.Type).\n\t\t\tRef(\"users\"),\n\t\t// \"pets\" declared in the example above.\n\t\tedge.To(\"pets\", Pet.Type),\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Transaction Hooks in Ent\nDESCRIPTION: Shows how to register hooks that execute on transaction commit or rollback operations. These hooks provide a way to add custom logic before and after a transaction is committed or rolled back.\nSOURCE: https://github.com/ent/ent/blob/master/doc/md/transactions.md#2025-04-22_snippet_4\n\nLANGUAGE: go\nCODE:\n```\nfunc Do(ctx context.Context, client *ent.Client) error {\n    tx, err := client.Tx(ctx)\n    if err != nil {\n        return err\n    }\n    // Add a hook on Tx.Commit.\n    tx.OnCommit(func(next ent.Committer) ent.Committer {\n        return ent.CommitFunc(func(ctx context.Context, tx *ent.Tx) error {\n            // Code before the actual commit.\n            err := next.Commit(ctx, tx)\n            // Code after the transaction was committed.\n            return err\n        })\n    })\n    // Add a hook on Tx.Rollback.\n    tx.OnRollback(func(next ent.Rollbacker) ent.Rollbacker {\n        return ent.RollbackFunc(func(ctx context.Context, tx *ent.Tx) error {\n            // Code before the actual rollback.\n            err := next.Rollback(ctx, tx)\n            // Code after the transaction was rolled back.\n            return err\n        })\n    })\n    //\n    // <Code goes here>\n    //\n    return err\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Up SQLite Test Environment for Ent\nDESCRIPTION: Creates a testable example in Go that sets up an Ent client with an in-memory SQLite database and runs automatic schema migration.\nSOURCE: https://github.com/ent/ent/blob/master/doc/md/tutorial-setup.md#2025-04-22_snippet_4\n\nLANGUAGE: go\nCODE:\n```\npackage todo\n\nimport (\n\t\"context\"\n\t\"log\"\n\t\"todo/ent\"\n\n\t\"entgo.io/ent/dialect\"\n\t_ \"github.com/mattn/go-sqlite3\"\n)\n\nfunc Example_Todo() {\n\t// Create an ent.Client with in-memory SQLite database.\n\tclient, err := ent.Open(dialect.SQLite, \"file:ent?mode=memory&cache=shared&_fk=1\")\n\tif err != nil {\n\t\tlog.Fatalf(\"failed opening connection to sqlite: %v\", err)\n\t}\n\tdefer client.Close()\n\tctx := context.Background()\n\t// Run the automatic migration tool to create all schema resources.\n\tif err := client.Schema.Create(ctx); err != nil {\n\t\tlog.Fatalf(\"failed creating schema resources: %v\", err)\n\t}\n\t// Output:\n}\n```\n\n----------------------------------------\n\nTITLE: Defining User Schema with Relationships\nDESCRIPTION: Schema definition for User entity with age and name fields, plus relationships to pets, other users and groups.\nSOURCE: https://github.com/ent/ent/blob/master/examples/README.md#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\n// User holds the schema definition for the User entity.\ntype User struct {\n\tent.Schema\n}\n\n// Fields of the User.\nfunc (User) Fields() []ent.Field {\n\treturn []ent.Field{\n\t\tfield.Int(\"age\"),\n\t\tfield.String(\"name\"),\n\t}\n}\n\n// Edges of the User.\nfunc (User) Edges() []ent.Edge {\n\treturn []ent.Edge{\n\t\tedge.To(\"pets\", Pet.Type),\n\t\tedge.To(\"friends\", User.Type),\n\t\tedge.From(\"groups\", Group.Type).\n\t\t\tRef(\"users\"),\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing UserTweet Edge Schema with Unique Index in Ent\nDESCRIPTION: Definition of the UserTweet edge schema that enforces a one-to-many relationship between users and tweets. This schema includes a unique index on tweet_id to ensure each tweet has only one author while using a join table structure.\nSOURCE: https://github.com/ent/ent/blob/master/doc/md/schema-edges.mdx#2025-04-22_snippet_27\n\nLANGUAGE: go\nCODE:\n```\n// UserTweet holds the schema definition for the UserTweet entity.\ntype UserTweet struct {\n\tent.Schema\n}\n\n// Fields of the UserTweet.\nfunc (UserTweet) Fields() []ent.Field {\n\treturn []ent.Field{\n\t\tfield.Time(\"created_at\").\n\t\t\tDefault(time.Now),\n\t\tfield.Int(\"user_id\"),\n\t\tfield.Int(\"tweet_id\"),\n\t}\n}\n\n// Edges of the UserTweet.\nfunc (UserTweet) Edges() []ent.Edge {\n\treturn []ent.Edge{\n\t\tedge.To(\"user\", User.Type).\n\t\t\tUnique().\n\t\t\tRequired().\n\t\t\tField(\"user_id\"),\n\t\tedge.To(\"tweet\", Tweet.Type).\n\t\t\tUnique().\n\t\t\tRequired().\n\t\t\tField(\"tweet_id\"),\n\t}\n}\n\n// Indexes of the UserTweet.\nfunc (UserTweet) Indexes() []ent.Index {\n\treturn []ent.Index{\n\t\tindex.Fields(\"tweet_id\").\n\t\t\tUnique(),\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Groups with Users in Go\nDESCRIPTION: Function to query all groups that have associated users using a look-aside predicate\nSOURCE: https://github.com/ent/ent/blob/master/doc/md/getting-started.mdx#2025-04-22_snippet_21\n\nLANGUAGE: go\nCODE:\n```\nfunc QueryGroupWithUsers(ctx context.Context, client *ent.Client) error {\n    groups, err := client.Group.\n    \tQuery().\n    \tWhere(group.HasUsers()).\n    \tAll(ctx)\n    if err != nil {\n    \treturn fmt.Errorf(\"failed getting groups: %w\", err)\n    }\n    log.Println(\"groups returned:\", groups)\n    // Output: (Group(Name=GitHub), Group(Name=GitLab),)\n    return nil\n}\n```\n\n----------------------------------------\n\nTITLE: Advanced Eager Loading with Filtering and Nested Associations in Ent\nDESCRIPTION: Example of querying entities with multiple associations, including nested associations. This demonstrates filtering the main query, limiting associated records, and loading nested associations.\nSOURCE: https://github.com/ent/ent/blob/master/doc/md/eager-load.mdx#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nadmins, err := client.User.\n\tQuery().\n\tWhere(user.Admin(true)).\n\t// Populate the `pets` that associated with the `admins`.\n\tWithPets().\n\t// Populate the first 5 `groups` that associated with the `admins`.\n\tWithGroups(func(q *ent.GroupQuery) {\n\t\tq.Limit(5) \t\t\t\t// Limit to 5.\n\t\tq.WithUsers()           // Populate the `users` of each `groups`.\n\t}).\n\tAll(ctx)\nif err != nil {\n\treturn err\n}\n\n// The returned users look as follows:\n//\n//\t[\n//\t\tUser {\n//\t\t\tID:   1,\n//\t\t\tName: \"admin1\",\n//\t\t\tEdges: {\n//\t\t\t\tPets:   [Pet(...), ...]\n//\t\t\t\tGroups: [\n//\t\t\t\t\tGroup {\n//\t\t\t\t\t\tID:   7,\n//\t\t\t\t\t\tName: \"GitHub\",\n//\t\t\t\t\t\tEdges: {\n//\t\t\t\t\t\t\tUsers: [User(...), ...]\n//\t\t\t\t\t\t\t...\n//\t\t\t\t\t\t}\n//\t\t\t\t\t}\n//\t\t\t\t]\n//\t\t\t}\n//\t\t},\n//\t\t...\n//\t]\n//\nfor _, admin := range admins {\n\tfor _, p := range admin.Edges.Pets {\n\t\tfmt.Printf(\"Admin(%v) -> Pet(%v)\\n\", u.ID, p.ID)\n\t\t// Output:\n\t\t// Admin(...) -> Pet(...)\n\t}\n\tfor _, g := range admin.Edges.Groups {\n\t\tfor _, u := range g.Edges.Users {\n\t\t\tfmt.Printf(\"Admin(%v) -> Group(%v) -> User(%v)\\n\", u.ID, g.ID, u.ID)\n\t\t\t// Output:\n\t\t\t// Admin(...) -> Group(...) -> User(...)\n\t\t}\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Querying User Entity in Go with ent\nDESCRIPTION: Demonstrates how to query a User entity by name using ent.\nSOURCE: https://github.com/ent/ent/blob/master/doc/md/getting-started.mdx#2025-04-22_snippet_6\n\nLANGUAGE: go\nCODE:\n```\nfunc QueryUser(ctx context.Context, client *ent.Client) (*ent.User, error) {\n\tu, err := client.User.\n\t\tQuery().\n\t\tWhere(user.Name(\"a8m\")).\n\t\t// `Only` fails if no user found,\n\t\t// or more than 1 user returned.\n\t\tOnly(ctx)\n\tif err != nil {\n\t\treturn nil, fmt.Errorf(\"failed querying user: %w\", err)\n\t}\n\tlog.Println(\"user returned: \", u)\n\treturn u, nil\n}\n```\n\n----------------------------------------\n\nTITLE: Defining O2M Relationship in User Schema (User to Pet)\nDESCRIPTION: This code snippet shows how to define a one-to-many relationship from User to Pet entities using edge.To in the User schema. It establishes that a User can have multiple pets.\nSOURCE: https://github.com/ent/ent/blob/master/doc/md/schema-edges.mdx#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\npackage schema\n\nimport (\n\t\"entgo.io/ent\"\n\t\"entgo.io/ent/schema/edge\"\n)\n\n// User schema.\ntype User struct {\n\tent.Schema\n}\n\n// Fields of the user.\nfunc (User) Fields() []ent.Field {\n\treturn []ent.Field{\n\t\t// ...\n\t}\n}\n\n// Edges of the user.\nfunc (User) Edges() []ent.Edge {\n\treturn []ent.Edge{\n\t\tedge.To(\"pets\", Pet.Type),\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: M2M Group-User Edge Usage Example\nDESCRIPTION: Example showing how to create and query many-to-many relationships between groups and users, including graph traversal patterns.\nSOURCE: https://github.com/ent/ent/blob/master/doc/md/schema-edges.mdx#2025-04-22_snippet_16\n\nLANGUAGE: go\nCODE:\n```\nfunc Do(ctx context.Context, client *ent.Client) error {\n\thub := client.Group.\n\t\tCreate().\n\t\tSetName(\"GitHub\").\n\t\tSaveX(ctx)\n\tlab := client.Group.\n\t\tCreate().\n\t\tSetName(\"GitLab\").\n\t\tSaveX(ctx)\n\ta8m := client.User.\n\t\tCreate().\n\t\tSetAge(30).\n\t\tSetName(\"a8m\").\n\t\tAddGroups(hub, lab).\n\t\tSaveX(ctx)\n\tnati := client.User.\n\t\tCreate().\n\t\tSetAge(28).\n\t\tSetName(\"nati\").\n\t\tAddGroups(hub).\n\t\tSaveX(ctx)\n\n\t// Query the edges.\n\tgroups, err := a8m.\n\t\tQueryGroups().\n\t\tAll(ctx)\n\tif err != nil {\n\t\treturn fmt.Errorf(\"querying a8m groups: %w\", err)\n\t}\n\tfmt.Println(groups)\n\n\tgroups, err = nati.\n\t\tQueryGroups().\n\t\tAll(ctx)\n\tif err != nil {\n\t\treturn fmt.Errorf(\"querying nati groups: %w\", err)\n\t}\n\tfmt.Println(groups)\n\n\t// Traverse the graph.\n\tusers, err := a8m.\n\t\tQueryGroups().                                           // [hub, lab]\n\t\tWhere(group.Not(group.HasUsersWith(user.Name(\"nati\")))).  // [lab]\n\t\tQueryUsers().                                            // [a8m]\n\t\tQueryGroups().                                           // [hub, lab]\n\t\tQueryUsers().                                            // [a8m, nati]\n\t\tAll(ctx)\n\tif err != nil {\n\t\treturn fmt.Errorf(\"traversing the graph: %w\", err)\n\t}\n\tfmt.Println(users)\n\treturn nil\n}\n```\n\n----------------------------------------\n\nTITLE: Running Ent Migration in Debug Mode\nDESCRIPTION: Shows how to run schema migrations in debug mode, which prints all SQL queries. Useful for troubleshooting migration issues or understanding the database changes being applied.\nSOURCE: https://github.com/ent/ent/blob/master/doc/md/migrate.md#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nerr := client.Debug().Schema.Create(\n\tctx, \n\tmigrate.WithDropIndex(true),\n\tmigrate.WithDropColumn(true),\n)\nif err != nil {\n\tlog.Fatalf(\"failed creating schema resources: %v\", err)\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Global Logging Hook for All Mutations\nDESCRIPTION: Demonstrates how to add a global hook that logs all mutation operations across all entity types, measuring execution time.\nSOURCE: https://github.com/ent/ent/blob/master/doc/md/hooks.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nfunc main() {\n\tclient, err := ent.Open(\"sqlite3\", \"file:ent?mode=memory&cache=shared&_fk=1\")\n\tif err != nil {\n\t\tlog.Fatalf(\"failed opening connection to sqlite: %v\", err)\n\t}\n\tdefer client.Close()\n\tctx := context.Background()\n\t// Run the auto migration tool.\n\tif err := client.Schema.Create(ctx); err != nil {\n\t\tlog.Fatalf(\"failed creating schema resources: %v\", err)\n\t}\n    // Add a global hook that runs on all types and all operations.\n\tclient.Use(func(next ent.Mutator) ent.Mutator {\n\t\treturn ent.MutateFunc(func(ctx context.Context, m ent.Mutation) (ent.Value, error) {\n\t\t\tstart := time.Now()\n\t\t\tdefer func() {\n\t\t\t\tlog.Printf(\"Op=%s\\tType=%s\\tTime=%s\\tConcreteType=%T\\n\", m.Op(), m.Type(), time.Since(start), m)\n\t\t\t}()\n\t\t\treturn next.Mutate(ctx, m)\n\t\t})\n\t})\n    client.User.Create().SetName(\"a8m\").SaveX(ctx)\n    // Output:\n    // 2020/03/21 10:59:10 Op=Create\tType=User\tTime=46.23µs\tConcreteType=*ent.UserMutation\n}\n```\n\n----------------------------------------\n\nTITLE: Writing Ent Schema Migration Changes to a File\nDESCRIPTION: Shows how to use offline mode to write schema changes to an SQL script file instead of executing them directly. Useful for creating migration scripts for manual execution or version control.\nSOURCE: https://github.com/ent/ent/blob/master/doc/md/migrate.md#2025-04-22_snippet_4\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"context\"\n\t\"log\"\n\t\"os\"\n\t\n\t\"<project>/ent\"\n\t\"<project>/ent/migrate\"\n)\n\nfunc main() {\n\tclient, err := ent.Open(\"mysql\", \"root:pass@tcp(localhost:3306)/test\")\n\tif err != nil {\n\t\tlog.Fatalf(\"failed connecting to mysql: %v\", err)\n\t}\n\tdefer client.Close()\n\tctx := context.Background()\n\t// Dump migration changes to an SQL script.\n\tf, err := os.Create(\"migrate.sql\")\n\tif err != nil {\n\t\tlog.Fatalf(\"create migrate file: %v\", err)\n\t}\n\tdefer f.Close()\n\tif err := client.Schema.WriteTo(ctx, f); err != nil {\n\t\tlog.Fatalf(\"failed printing schema changes: %v\", err)\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Go Module for Ent Project\nDESCRIPTION: Creates a new directory for the Ent project and initializes a Go module named 'todo'.\nSOURCE: https://github.com/ent/ent/blob/master/doc/md/tutorial-setup.md#2025-04-22_snippet_0\n\nLANGUAGE: console\nCODE:\n```\nmkdir todo\ncd $_\ngo mod init todo\n```\n\n----------------------------------------\n\nTITLE: Interacting with O2M Edge with Same Type in Go using Ent\nDESCRIPTION: This snippet demonstrates how to create a tree structure using the Node entity, add nodes to the tree, and perform various queries on the tree structure, such as finding leaf nodes and orphan nodes.\nSOURCE: https://github.com/ent/ent/blob/master/doc/md/schema-edges.mdx#2025-04-22_snippet_14\n\nLANGUAGE: go\nCODE:\n```\nfunc Do(ctx context.Context, client *ent.Client) error {\n\troot, err := client.Node.\n\t\tCreate().\n\t\tSetValue(2).\n\t\tSave(ctx)\n\tif err != nil {\n\t\treturn fmt.Errorf(\"creating the root: %w\", err)\n\t}\n\t// Add additional nodes to the tree:\n\t//\n\t//       2\n\t//     /   \\\n\t//    1     4\n\t//        /   \\\n\t//       3     5\n\t//\n\t// Unlike `Save`, `SaveX` panics if an error occurs.\n\tn1 := client.Node.\n\t\tCreate().\n\t\tSetValue(1).\n\t\tSetParent(root).\n\t\tSaveX(ctx)\n\tn4 := client.Node.\n\t\tCreate().\n\t\tSetValue(4).\n\t\tSetParent(root).\n\t\tSaveX(ctx)\n\tn3 := client.Node.\n\t\tCreate().\n\t\tSetValue(3).\n\t\tSetParent(n4).\n\t\tSaveX(ctx)\n\tn5 := client.Node.\n\t\tCreate().\n\t\tSetValue(5).\n\t\tSetParent(n4).\n\t\tSaveX(ctx)\n\n\tfmt.Println(\"Tree leafs\", []int{n1.Value, n3.Value, n5.Value})\n\t// Output: Tree leafs [1 3 5]\n\n\t// Get all leafs (nodes without children).\n\t// Unlike `Int`, `IntX` panics if an error occurs.\n\tints := client.Node.\n\t\tQuery().                             // All nodes.\n\t\tWhere(node.Not(node.HasChildren())). // Only leafs.\n\t\tOrder(ent.Asc(node.FieldValue)).     // Order by their `value` field.\n\t\tGroupBy(node.FieldValue).            // Extract only the `value` field.\n\t\tIntsX(ctx)\n\tfmt.Println(ints)\n\t// Output: [1 3 5]\n\n\t// Get orphan nodes (nodes without parent).\n\t// Unlike `Only`, `OnlyX` panics if an error occurs.\n\torphan := client.Node.\n\t\tQuery().\n\t\tWhere(node.Not(node.HasParent())).\n\t\tOnlyX(ctx)\n\tfmt.Println(orphan)\n\t// Output: Node(id=1, value=2)\n\n\treturn nil\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Node API in GraphQL Resolver\nDESCRIPTION: This code demonstrates how to implement the Node method in the GraphQL query resolver using the Ent Noder interface.\nSOURCE: https://github.com/ent/ent/blob/master/doc/md/graphql.md#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nfunc (r *queryResolver) Node(ctx context.Context, id int) (ent.Noder, error) {\n\treturn r.client.Noder(ctx, id)\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Todo Item in Go using Ent\nDESCRIPTION: Basic example showing how to create a Todo item using Ent client with minimal fields\nSOURCE: https://github.com/ent/ent/blob/master/doc/md/tutorial-todo-crud.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nfunc Example_Todo() {\n\t// ...\n\ttask1, err := client.Todo.Create().Save(ctx)\n\tif err != nil {\n\t\tlog.Fatalf(\"failed creating a todo: %v\", err)\n\t}\n\tfmt.Println(task1)\n\t// Output:\n\t// Todo(id=1)\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing gRPC Server with Ent Integration\nDESCRIPTION: Creates a gRPC server that serves the User service using Ent ORM. Initializes SQLite database connection, runs migrations, and sets up the server to listen on port 5000.\nSOURCE: https://github.com/ent/ent/blob/master/doc/md/tutorial-grpc-server-and-client.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"context\"\n\t\"log\"\n\t\"net\"\n\n\t_ \"github.com/mattn/go-sqlite3\"\n\t\"ent-grpc-example/ent\"\n\t\"ent-grpc-example/ent/proto/entpb\"\n\t\"google.golang.org/grpc\"\n)\n\nfunc main() {\n\t// Initialize an ent client.\n\tclient, err := ent.Open(\"sqlite3\", \"file:ent?mode=memory&cache=shared&_fk=1\")\n\tif err != nil {\n\t\tlog.Fatalf(\"failed opening connection to sqlite: %v\", err)\n\t}\n\tdefer client.Close()\n\n\t// Run the migration tool (creating tables, etc).\n\tif err := client.Schema.Create(context.Background()); err != nil {\n\t\tlog.Fatalf(\"failed creating schema resources: %v\", err)\n\t}\n\n\t// Initialize the generated User service.\n\tsvc := entpb.NewUserService(client)\n\n\t// Create a new gRPC server (you can wire multiple services to a single server).\n\tserver := grpc.NewServer()\n\n\t// Register the User service with the server.\n\tentpb.RegisterUserServiceServer(server, svc)\n\n\t// Open port 5000 for listening to traffic.\n\tlis, err := net.Listen(\"tcp\", \":5000\")\n\tif err != nil {\n\t\tlog.Fatalf(\"failed listening: %s\", err)\n\t}\n\n\t// Listen for traffic indefinitely.\n\tif err := server.Serve(lis); err != nil {\n\t\tlog.Fatalf(\"server ended: %s\", err)\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Appending Values to JSON Array Field in Ent\nDESCRIPTION: This Go code snippet shows how to use the generated AppendTags method to append values to a JSON array field in Ent.\nSOURCE: https://github.com/ent/ent/blob/master/doc/website/blog/2022-10-10-json-append.mdx#2025-04-22_snippet_9\n\nLANGUAGE: go\nCODE:\n```\nfunc TestAppend(t *testing.T) {\n\tclient := enttest.Open(t, \"sqlite3\", \"file:ent?mode=memory&cache=shared&_fk=1\")\n\tctx := context.Background()\n\t// Insert a user with two tags.\n\tu := client.User.Create().\n\t\tSetTags([]string{\"hello\", \"world\"}).\n\t\tSaveX(ctx)\n\n\t// highlight-start\n\tu.Update().AppendTags([]string{\"goodbye\"}).ExecX(ctx)\n\t// highlight-end\n\n\tagain := client.User.GetX(ctx, u.ID)\n\tfmt.Println(again.Tags)\n\t// Prints: [hello world goodbye]\n}\n```\n\n----------------------------------------\n\nTITLE: Defining M2M Relationship Between Two Types in Go using Ent\nDESCRIPTION: Demonstrates how to define a many-to-many relationship between Group and User types using Ent edges in Go.\nSOURCE: https://github.com/ent/ent/blob/master/examples/README.md#2025-04-22_snippet_13\n\nLANGUAGE: go\nCODE:\n```\n// Edges of the Group.\nfunc (Group) Edges() []ent.Edge {\n\treturn []ent.Edge{\n\t\tedge.To(\"users\", User.Type),\n\t}\n}\n```\n\nLANGUAGE: go\nCODE:\n```\n// Edges of the User.\nfunc (User) Edges() []ent.Edge {\n\treturn []ent.Edge{\n\t\tedge.From(\"groups\", Group.Type).\n\t\t\tRef(\"users\"),\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Ent Test Client Setup\nDESCRIPTION: Shows how to create a basic test client using enttest.Open() with SQLite in-memory database. The code demonstrates setting up a test environment with automatic schema migration.\nSOURCE: https://github.com/ent/ent/blob/master/doc/md/testing.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"testing\"\n\n\t\"<project>/ent/enttest\"\n\n\t_ \"github.com/mattn/go-sqlite3\"\n)\n\nfunc TestXXX(t *testing.T) {\n\tclient := enttest.Open(t, \"sqlite3\", \"file:ent?mode=memory&_fk=1\")\n\tdefer client.Close()\n\t// ...\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Tweet Schema with Liked Users Relationship in Ent\nDESCRIPTION: Schema definition for the Tweet entity with a relationship to users who liked it. The relationship references the liked_tweets edge from the User entity and uses the same Like edge schema.\nSOURCE: https://github.com/ent/ent/blob/master/doc/md/schema-edges.mdx#2025-04-22_snippet_23\n\nLANGUAGE: go\nCODE:\n```\n// Tweet holds the schema definition for the Tweet entity.\ntype Tweet struct {\n\tent.Schema\n}\n\n// Fields of the Tweet.\nfunc (Tweet) Fields() []ent.Field {\n\treturn []ent.Field{\n\t\tfield.Text(\"text\"),\n\t}\n}\n\n// Edges of the Tweet.\nfunc (Tweet) Edges() []ent.Edge {\n\treturn []ent.Edge{\n\t\tedge.From(\"liked_users\", User.Type).\n\t\t\tRef(\"liked_tweets\").\n\t\t\tThrough(\"likes\", Like.Type),\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Cars Associated with User in Go\nDESCRIPTION: Shows how to query cars associated with a user and filter specific cars.\nSOURCE: https://github.com/ent/ent/blob/master/doc/md/getting-started.mdx#2025-04-22_snippet_12\n\nLANGUAGE: go\nCODE:\n```\nfunc QueryCars(ctx context.Context, a8m *ent.User) error {\n\tcars, err := a8m.QueryCars().All(ctx)\n\tif err != nil {\n\t\treturn fmt.Errorf(\"failed querying user cars: %w\", err)\n\t}\n\tlog.Println(\"returned cars:\", cars)\n\n\t// What about filtering specific cars.\n\tford, err := a8m.QueryCars().\n\t\tWhere(car.Model(\"Ford\")).\n\t\tOnly(ctx)\n\tif err != nil {\n\t\treturn fmt.Errorf(\"failed querying user cars: %w\", err)\n\t}\n\tlog.Println(ford)\n\treturn nil\n}\n```\n\n----------------------------------------\n\nTITLE: Connecting Todo Items with Edges\nDESCRIPTION: Example showing how to create relationships between Todo items using edges\nSOURCE: https://github.com/ent/ent/blob/master/doc/md/tutorial-todo-crud.md#2025-04-22_snippet_4\n\nLANGUAGE: go\nCODE:\n```\nfunc Example_Todo() {\n\t// ...\n\tif err := task2.Update().SetParent(task1).Exec(ctx); err != nil {\n\t\tlog.Fatalf(\"failed connecting todo2 to its parent: %v\", err)\n\t}\n    // Output:\n    // 1: \"Add GraphQL Example\"\n    // 2: \"Add Tracing Example\"\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Transactional Client in Ent for Go\nDESCRIPTION: This snippet demonstrates how to create a transactional client that wraps an existing function to operate within a transaction context. This approach allows reusing existing code that works with *ent.Client without modification.\nSOURCE: https://github.com/ent/ent/blob/master/doc/md/transactions.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\n// WrapGen wraps the existing \"Gen\" function in a transaction.\nfunc WrapGen(ctx context.Context, client *ent.Client) error {\n\ttx, err := client.Tx(ctx)\n\tif err != nil {\n\t\treturn err\n\t}\n\ttxClient := tx.Client()\n\t// Use the \"Gen\" below, but give it the transactional client; no code changes to \"Gen\".\n\tif err := Gen(ctx, txClient); err != nil {\n\t\treturn rollback(tx, err)\n\t}\n\treturn tx.Commit()\n}\n\n// Gen generates a group of entities.\nfunc Gen(ctx context.Context, client *ent.Client) error {\n\t// ...\n\treturn nil\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Ent Code Generation Tool\nDESCRIPTION: Command to install the Ent code generation tool using Go's package manager. This installs the 'ent' command-line tool that will be used for schema management and code generation.\nSOURCE: https://github.com/ent/ent/blob/master/doc/md/code-gen.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngo get entgo.io/ent/cmd/ent\n```\n\n----------------------------------------\n\nTITLE: Example Linked List Implementation\nDESCRIPTION: This code shows how to work with recursive relationships in Ent. It demonstrates creating a linked list of nodes, traversing it, and making it circular by connecting the tail back to the head.\nSOURCE: https://github.com/ent/ent/blob/master/doc/md/schema-edges.mdx#2025-04-22_snippet_8\n\nLANGUAGE: go\nCODE:\n```\nfunc Do(ctx context.Context, client *ent.Client) error {\n\thead, err := client.Node.\n\t\tCreate().\n\t\tSetValue(1).\n\t\tSave(ctx)\n\tif err != nil {\n\t\treturn fmt.Errorf(\"creating the head: %w\", err)\n\t}\n\tcurr := head\n\t// Generate the following linked-list: 1<->2<->3<->4<->5.\n\tfor i := 0; i < 4; i++ {\n\t\tcurr, err = client.Node.\n\t\t\tCreate().\n\t\t\tSetValue(curr.Value + 1).\n\t\t\tSetPrev(curr).\n\t\t\tSave(ctx)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t}\n\n\t// Loop over the list and print it. `FirstX` panics if an error occur.\n\tfor curr = head; curr != nil; curr = curr.QueryNext().FirstX(ctx) {\n\t\tfmt.Printf(\"%d \", curr.Value)\n\t}\n\t// Output: 1 2 3 4 5\n\n\t// Make the linked-list circular:\n\t// The tail of the list, has no \"next\".\n\ttail, err := client.Node.\n\t\tQuery().\n\t\tWhere(node.Not(node.HasNext())).\n\t\tOnly(ctx)\n\tif err != nil {\n\t\treturn fmt.Errorf(\"getting the tail of the list: %v\", tail)\n\t}\n\ttail, err = tail.Update().SetNext(head).Save(ctx)\n\tif err != nil {\n\t\treturn err\n\t}\n\t// Check that the change actually applied:\n\tprev, err := head.QueryPrev().Only(ctx)\n\tif err != nil {\n\t\treturn fmt.Errorf(\"getting head's prev: %w\", err)\n\t}\n\tfmt.Printf(\"\\n%v\", prev.Value == tail.Value)\n\t// Output: true\n\treturn nil\n}\n```\n\n----------------------------------------\n\nTITLE: Custom SQL Predicate for Filtering by IDs in Ent (Go)\nDESCRIPTION: Example of using a custom predicate with sql.InInts to filter pets by specific owner IDs.\nSOURCE: https://github.com/ent/ent/blob/master/doc/md/predicates.md#2025-04-22_snippet_5\n\nLANGUAGE: go\nCODE:\n```\npets := client.Pet.\n\tQuery().\n\tWhere(func(s *sql.Selector) {\n\t\ts.Where(sql.InInts(pet.FieldOwnerID, 1, 2, 3))\n\t}).\n\tAllX(ctx)\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT DISTINCT `pets`.`id`, `pets`.`owner_id` FROM `pets` WHERE `owner_id` IN (1, 2, 3)\n```\n\n----------------------------------------\n\nTITLE: Defining O2M Edge with Same Type in Go using Ent\nDESCRIPTION: This snippet shows how to define a recursive one-to-many relationship for a tree structure using the Node entity. Each node can have many children and one parent, demonstrating a self-referential relationship.\nSOURCE: https://github.com/ent/ent/blob/master/doc/md/schema-edges.mdx#2025-04-22_snippet_13\n\nLANGUAGE: go\nCODE:\n```\n// Edges of the Node.\nfunc (Node) Edges() []ent.Edge {\n\treturn []ent.Edge{\n\t\tedge.To(\"children\", Node.Type).\n\t\t\tFrom(\"parent\").\n\t\t\tUnique(),\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Defining User Schema Fields in Go\nDESCRIPTION: Adds age and name fields to the User schema.\nSOURCE: https://github.com/ent/ent/blob/master/doc/md/getting-started.mdx#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\n// Fields of the User.\nfunc (User) Fields() []ent.Field {\n\treturn []ent.Field{\n\t\tfield.Int(\"age\").\n\t\t\tPositive(),\n\t\tfield.String(\"name\").\n\t\t\tDefault(\"unknown\"),\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Populating the Graph with Entities and Relationships\nDESCRIPTION: Function to generate and connect entities according to the defined graph structure. Creates a group, users, and pets with specified relationships between them, demonstrating Ent's entity creation and edge connection API.\nSOURCE: https://github.com/ent/ent/blob/master/doc/md/traversals.md#2025-04-22_snippet_4\n\nLANGUAGE: go\nCODE:\n```\nfunc Gen(ctx context.Context, client *ent.Client) error {\n\thub, err := client.Group.\n\t\tCreate().\n\t\tSetName(\"Github\").\n\t\tSave(ctx)\n\tif err != nil {\n\t\treturn fmt.Errorf(\"failed creating the group: %w\", err)\n\t}\n\t// Create the admin of the group.\n\t// Unlike `Save`, `SaveX` panics if an error occurs.\n\tdan := client.User.\n\t\tCreate().\n\t\tSetAge(29).\n\t\tSetName(\"Dan\").\n\t\tAddManage(hub).\n\t\tSaveX(ctx)\n\n\t// Create \"Ariel\" and its pets.\n\ta8m := client.User.\n\t\tCreate().\n\t\tSetAge(30).\n\t\tSetName(\"Ariel\").\n\t\tAddGroups(hub).\n\t\tAddFriends(dan).\n\t\tSaveX(ctx)\n\tpedro := client.Pet.\n\t\tCreate().\n\t\tSetName(\"Pedro\").\n\t\tSetOwner(a8m).\n\t\tSaveX(ctx)\n\txabi := client.Pet.\n\t\tCreate().\n\t\tSetName(\"Xabi\").\n\t\tSetOwner(a8m).\n\t\tSaveX(ctx)\n\n\t// Create \"Alex\" and its pets.\n\talex := client.User.\n\t\tCreate().\n\t\tSetAge(37).\n\t\tSetName(\"Alex\").\n\t\tSaveX(ctx)\n\tcoco := client.Pet.\n\t\tCreate().\n\t\tSetName(\"Coco\").\n\t\tSetOwner(alex).\n\t\tAddFriends(pedro).\n\t\tSaveX(ctx)\n\n\tfmt.Println(\"Pets created:\", pedro, xabi, coco)\n\t// Output:\n\t// Pets created: Pet(id=1, name=Pedro) Pet(id=2, name=Xabi) Pet(id=3, name=Coco)\n\treturn nil\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Required Edge in Card-User Relationship in Ent\nDESCRIPTION: Example of defining a required edge from Card to User, which ensures that a card entity cannot be created without its owner. Starting with Ent v0.10, this also creates NOT NULL constraints in the database.\nSOURCE: https://github.com/ent/ent/blob/master/doc/md/schema-edges.mdx#2025-04-22_snippet_28\n\nLANGUAGE: go\nCODE:\n```\n// Edges of the Card.\nfunc (Card) Edges() []ent.Edge {\n\treturn []ent.Edge{\n\t\tedge.From(\"owner\", User.Type).\n\t\t\tRef(\"card\").\n\t\t\tUnique().\n\t\t\tRequired(),\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Defining O2O Recursive Relationship (Linked List)\nDESCRIPTION: This code snippet demonstrates how to define a one-to-one recursive relationship on the same entity type. It creates a linked list structure where each Node can have one next and one previous node using a combined edge.To and edge.From definition.\nSOURCE: https://github.com/ent/ent/blob/master/doc/md/schema-edges.mdx#2025-04-22_snippet_7\n\nLANGUAGE: go\nCODE:\n```\n// Edges of the Node.\nfunc (Node) Edges() []ent.Edge {\n\treturn []ent.Edge{\n\t\tedge.To(\"next\", Node.Type).\n\t\t\tUnique().\n\t\t\tFrom(\"prev\").\n\t\t\tUnique(),\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Ent Assets in Go\nDESCRIPTION: Command to generate the necessary Ent assets (code) for your project using Go's code generation tool. This will process all schema definitions and create the corresponding entity files.\nSOURCE: https://github.com/ent/ent/blob/master/examples/start/README.md#2025-04-22_snippet_0\n\nLANGUAGE: console\nCODE:\n```\ngo generate ./...\n```\n\n----------------------------------------\n\nTITLE: Implementing Edge Creation Resolver\nDESCRIPTION: Go code implementing the resolver for creating child todos within a parent todo creation.\nSOURCE: https://github.com/ent/ent/blob/master/doc/md/tutorial-todo-gql-mutation-input.md#2025-04-22_snippet_6\n\nLANGUAGE: go\nCODE:\n```\n// CreateChildren is the resolver for the createChildren field.\nfunc (r *createTodoInputResolver) CreateChildren(ctx context.Context, obj *ent.CreateTodoInput, data []*ent.CreateTodoInput) error {\n\t// highlight-start\n\t// NOTE: We need to use the Ent client from the context.\n\t// To ensure we create all of the children in the same transaction.\n\t// See: Transactional Mutations for more information.\n\tc := ent.FromContext(ctx)\n\t// highlight-end\n\tbuilders := make([]*ent.TodoCreate, len(data))\n\tfor i := range data {\n\t\tbuilders[i] = c.Todo.Create().SetInput(*data[i])\n\t}\n\ttodos, err := c.Todo.CreateBulk(builders...).Save(ctx)\n\tif err != nil {\n\t\treturn err\n\t}\n\tids := make([]int, len(todos))\n\tfor i := range todos {\n\t\tids[i] = todos[i].ID\n\t}\n\tobj.ChildIDs = append(obj.ChildIDs, ids...)\n\treturn nil\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Group Entity Schema with Relationships\nDESCRIPTION: Schema definition for the Group entity with a name field and edges connecting to users and a single admin. Establishes the organizational structure in the graph.\nSOURCE: https://github.com/ent/ent/blob/master/doc/md/traversals.md#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\n// Group holds the schema definition for the Group entity.\ntype Group struct {\n\tent.Schema\n}\n\n// Fields of the Group.\nfunc (Group) Fields() []ent.Field {\n\treturn []ent.Field{\n\t\tfield.String(\"name\"),\n\t}\n}\n\n// Edges of the Group.\nfunc (Group) Edges() []ent.Edge {\n\treturn []ent.Edge{\n\t\tedge.To(\"users\", User.Type),\n\t\tedge.To(\"admin\", User.Type).\n\t\t\tUnique(),\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Entity Generation in a Transaction with Ent in Go\nDESCRIPTION: A function that demonstrates how to create multiple related entities in a transaction, including error handling and transaction rollback. This example shows creating groups and users with relationships between them.\nSOURCE: https://github.com/ent/ent/blob/master/doc/md/transactions.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\n// GenTx generates group of entities in a transaction.\nfunc GenTx(ctx context.Context, client *ent.Client) error {\n\ttx, err := client.Tx(ctx)\n\tif err != nil {\n\t\treturn fmt.Errorf(\"starting a transaction: %w\", err)\n\t}\n\thub, err := tx.Group.\n\t\tCreate().\n\t\tSetName(\"Github\").\n\t\tSave(ctx)\n\tif err != nil {\n\t\treturn rollback(tx, fmt.Errorf(\"failed creating the group: %w\", err))\n\t}\n\t// Create the admin of the group.\n\tdan, err := tx.User.\n\t\tCreate().\n\t\tSetAge(29).\n\t\tSetName(\"Dan\").\n\t\tAddManage(hub).\n\t\tSave(ctx)\n\tif err != nil {\n\t\treturn rollback(tx, err)\n\t}\n\t// Create user \"Ariel\".\n\ta8m, err := tx.User.\n\t\tCreate().\n\t\tSetAge(30).\n\t\tSetName(\"Ariel\").\n\t\tAddGroups(hub).\n\t\tAddFriends(dan).\n\t\tSave(ctx)\n\tif err != nil {\n\t\treturn rollback(tx, err)\n\t}\n\tfmt.Println(a8m)\n\t// Output:\n\t// User(id=2, age=30, name=Ariel)\n\t\n\t// Commit the transaction.\n\treturn tx.Commit()\n}\n\n// rollback calls to tx.Rollback and wraps the given error\n// with the rollback error if occurred.\nfunc rollback(tx *ent.Tx, err error) error {\n\tif rerr := tx.Rollback(); rerr != nil {\n\t\terr = fmt.Errorf(\"%w: %v\", err, rerr)\n\t}\n\treturn err\n}\n```\n\n----------------------------------------\n\nTITLE: Using Atlas Diff and Apply Hooks with Ent Migration\nDESCRIPTION: Demonstrates how to hook into Atlas Diff and Apply migration steps. This allows for custom processing of schema changes or implementing custom application logic during the migration process.\nSOURCE: https://github.com/ent/ent/blob/master/doc/md/migrate.md#2025-04-22_snippet_8\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n    \"context\"\n    \"log\"\n\n    \"<project>/ent\"\n    \"<project>/ent/migrate\"\n\n\t\"ariga.io/atlas/sql/migrate\"\n\tatlas \"ariga.io/atlas/sql/schema\"\n\t\"entgo.io/ent/dialect\"\n\t\"entgo.io/ent/dialect/sql/schema\"\n)\n\nfunc main() {\n    client, err := ent.Open(\"mysql\", \"root:pass@tcp(localhost:3306)/test\")\n    if err != nil {\n        log.Fatalf(\"failed connecting to mysql: %v\", err)\n    }\n    defer client.Close()\n    ctx := context.Background()\n    // Run migration.\n    err := \tclient.Schema.Create(\n\t\tctx,\n\t\t// Hook into Atlas Diff process.\n\t\tschema.WithDiffHook(func(next schema.Differ) schema.Differ {\n\t\t\treturn schema.DiffFunc(func(current, desired *atlas.Schema) ([]atlas.Change, error) {\n\t\t\t\t// Before calculating changes.\n\t\t\t\tchanges, err := next.Diff(current, desired)\n\t\t\t\tif err != nil {\n\t\t\t\t\treturn nil, err\n\t\t\t\t}\n\t\t\t\t// After diff, you can filter\n\t\t\t\t// changes or return new ones.\n\t\t\t\treturn changes, nil\n\t\t\t})\n\t\t}),\n\t\t// Hook into Atlas Apply process.\n\t\tschema.WithApplyHook(func(next schema.Applier) schema.Applier {\n\t\t\treturn schema.ApplyFunc(func(ctx context.Context, conn dialect.ExecQuerier, plan *migrate.Plan) error {\n\t\t\t\t// Example to hook into the apply process, or implement\n\t\t\t\t// a custom applier. For example, write to a file.\n\t\t\t\t//\n\t\t\t\t//\tfor _, c := range plan.Changes {\n\t\t\t\t//\t\tfmt.Printf(\"%s: %s\", c.Comment, c.Cmd)\n\t\t\t\t//\t\tif err := conn.Exec(ctx, c.Cmd, c.Args, nil); err != nil {\n\t\t\t\t//\t\t\treturn err\n\t\t\t\t//\t\t}\n\t\t\t\t//\t}\n\t\t\t\t//\n\t\t\t\treturn next.Apply(ctx, conn, plan)\n\t\t\t})\n\t\t}),\n\t)\n    if err != nil {\n        log.Fatalf(\"failed creating schema resources: %v\", err)\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining User and Pet Schemas in Ent (Go)\nDESCRIPTION: This snippet demonstrates how to define User and Pet schemas in Ent, including their fields and edges. It shows a One-to-Many relationship between User and Pet entities.\nSOURCE: https://github.com/ent/ent/blob/master/doc/website/blog/2021-03-12-announcing-edge-field-support.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\n// ent/schema/user.go:\n\n// User holds the schema definition for the User entity.\ntype User struct {\n\tent.Schema\n}\n\n// Fields of the User.\nfunc (User) Fields() []ent.Field {\n\treturn []ent.Field{\n\t\tfield.String(\"name\").\n\t\t\tUnique().\n\t\t\tNotEmpty(),\n\t}\n}\n\n// Edges of the User.\nfunc (User) Edges() []ent.Edge {\n\treturn []ent.Edge{\n\t\tedge.From(\"pets\", Pet.Type).\n\t\t\tRef(\"owner\"),\n\t}\n}\n\n// ent/schema/pet.go\n\n// Pet holds the schema definition for the Pet entity.\ntype Pet struct {\n\tent.Schema\n}\n\n// Fields of the Pet.\nfunc (Pet) Fields() []ent.Field {\n\treturn []ent.Field{\n\t\tfield.String(\"name\").\n\t\t\tNotEmpty(),\n\t}\n}\n\n// Edges of the Pet.\nfunc (Pet) Edges() []ent.Edge {\n\treturn []ent.Edge{\n\t\tedge.To(\"owner\", User.Type).\n\t\t\tUnique().\n\t\t\tRequired(),\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring sql.DB for Ent Client (Option 1)\nDESCRIPTION: This snippet shows how to create an Ent client using a custom sql.DB object. It configures connection pool settings and uses the sql.Open method with a MySQL driver.\nSOURCE: https://github.com/ent/ent/blob/master/doc/md/sql-integration.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n    \"time\"\n\n    \"<your_project>/ent\"\n    \"entgo.io/ent/dialect/sql\"\n)\n\nfunc Open() (*ent.Client, error) {\n    drv, err := sql.Open(\"mysql\", \"<mysql-dsn>\")\n    if err != nil {\n    \treturn nil, err\n    }\n    // Get the underlying sql.DB object of the driver.\n    db := drv.DB()\n    db.SetMaxIdleConns(10)\n    db.SetMaxOpenConns(100)\n    db.SetConnMaxLifetime(time.Hour)\n    return ent.NewClient(ent.Driver(drv)), nil\n}\n```\n\n----------------------------------------\n\nTITLE: Using Atlas Integration for Ent Schema Migration\nDESCRIPTION: Shows how to enable Atlas as the migration engine for Ent. Atlas provides more robust migration capabilities than the default Ent migration system, supporting features not available in the standard migration package.\nSOURCE: https://github.com/ent/ent/blob/master/doc/md/migrate.md#2025-04-22_snippet_7\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n    \"context\"\n    \"log\"\n\n    \"<project>/ent\"\n    \"<project>/ent/migrate\"\n\n    \"entgo.io/ent/dialect/sql/schema\"\n)\n\nfunc main() {\n    client, err := ent.Open(\"mysql\", \"root:pass@tcp(localhost:3306)/test\")\n    if err != nil {\n        log.Fatalf(\"failed connecting to mysql: %v\", err)\n    }\n    defer client.Close()\n    ctx := context.Background()\n    // Run migration.\n    err = client.Schema.Create(ctx, schema.WithAtlas(true))\n    if err != nil {\n        log.Fatalf(\"failed creating schema resources: %v\", err)\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Tweet Schema with User Authorship in Ent\nDESCRIPTION: Schema definition for the Tweet entity with a relationship to its author. The relationship references the tweets edge from the User entity and uses the UserTweet edge schema with an explanatory comment.\nSOURCE: https://github.com/ent/ent/blob/master/doc/md/schema-edges.mdx#2025-04-22_snippet_26\n\nLANGUAGE: go\nCODE:\n```\n// Tweet holds the schema definition for the Tweet entity.\ntype Tweet struct {\n\tent.Schema\n}\n\n// Fields of the Tweet.\nfunc (Tweet) Fields() []ent.Field {\n\treturn []ent.Field{\n\t\tfield.Text(\"text\"),\n\t}\n}\n\n// Edges of the Tweet.\nfunc (Tweet) Edges() []ent.Edge {\n\treturn []ent.Edge{\n\t\tedge.From(\"user\", User.Type).\n\t\t\tRef(\"tweets\").\n\t\t\tThrough(\"tweet_user\", UserTweet.Type).\n\t\t\tComment(\"The uniqueness of the author is enforced on the edge schema\"),\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing an Ent Hook in Go\nDESCRIPTION: This code shows how to create a basic Ent hook function. The hook can perform actions before and after a mutation, and handle any errors that occur during the mutation process.\nSOURCE: https://github.com/ent/ent/blob/master/doc/website/blog/2021-08-12-building-observable-ent-application-with-prometheus.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\npackage example\n\nimport (\n\t\"context\"\n\n\t\"entgo.io/ent\"\n)\n\nfunc exampleHook() ent.Hook {\n\t//use this to init your hook\n\treturn func(next ent.Mutator) ent.Mutator {\n\t\treturn ent.MutateFunc(func(ctx context.Context, m ent.Mutation) (ent.Value, error) {\n\t\t\t// Do something before mutation.\n\t\t\tv, err := next.Mutate(ctx, m)\n\t\t\tif err != nil {\n\t\t\t\t// Do something if error after mutation.\n\t\t\t}\n\t\t\t// Do something after mutation.\n\t\t\treturn v, err\n\t\t})\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Defining O2M Edge Between Two Types in Go using Ent\nDESCRIPTION: This snippet shows how to define a one-to-many relationship between User and Pet entities. A user can have many pets, and a pet has one owner. It demonstrates the edge definitions for both User and Pet schemas.\nSOURCE: https://github.com/ent/ent/blob/master/doc/md/schema-edges.mdx#2025-04-22_snippet_11\n\nLANGUAGE: go\nCODE:\n```\n// User schema\n// Edges of the User.\nfunc (User) Edges() []ent.Edge {\n\treturn []ent.Edge{\n\t\tedge.To(\"pets\", Pet.Type),\n\t}\n}\n\n// Pet schema\n// Edges of the Pet.\nfunc (Pet) Edges() []ent.Edge {\n\treturn []ent.Edge{\n\t\tedge.From(\"owner\", User.Type).\n\t\t\tRef(\"pets\").\n\t\t\tUnique(),\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Ent Framework in Go\nDESCRIPTION: Fetches the latest version of the Ent framework using go get.\nSOURCE: https://github.com/ent/ent/blob/master/doc/website/blog/2023-02-23-simple-cms-with-ent.mdx#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ngo get -u entgo.io/ent@master\n```\n\n----------------------------------------\n\nTITLE: Defining Todo Schema Edges in Ent\nDESCRIPTION: Schema definition for Todo entity relationships, including parent-child relationships\nSOURCE: https://github.com/ent/ent/blob/master/doc/md/tutorial-todo-crud.md#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nfunc (Todo) Edges() []ent.Edge {\n\treturn []ent.Edge{\n\t\tedge.To(\"parent\", Todo.Type).\n\t\t\tUnique().\n\t\t\tFrom(\"children\"),\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Defining M2M Relationship in Group Schema (Group to User)\nDESCRIPTION: This code snippet shows how to define a many-to-many relationship from Group to User entities using edge.To in the Group schema. It establishes that a Group can have multiple users.\nSOURCE: https://github.com/ent/ent/blob/master/doc/md/schema-edges.mdx#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\npackage schema\n\nimport (\n\t\"entgo.io/ent\"\n\t\"entgo.io/ent/schema/edge\"\n)\n\n// Group schema.\ntype Group struct {\n\tent.Schema\n}\n\n// Fields of the group.\nfunc (Group) Fields() []ent.Field {\n\treturn []ent.Field{\n\t\t// ...\n\t}\n}\n\n// Edges of the group.\nfunc (Group) Edges() []ent.Edge {\n\treturn []ent.Edge{\n\t\tedge.To(\"users\", User.Type),\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Using OR Predicate in Ent Queries (Go)\nDESCRIPTION: Example of using the Or predicate to create a disjunction between conditions in Ent queries.\nSOURCE: https://github.com/ent/ent/blob/master/doc/md/predicates.md#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nclient.Pet.\n\tQuery().\n\tWhere(\n\t\tpet.Or(\n\t\t\tpet.HasOwner(),\n\t\t\tpet.Not(pet.HasFriends()),\n\t\t)\n\t).\n\tAll(ctx)\n```\n\n----------------------------------------\n\nTITLE: Defining JSON Field with Slice Type in Ent\nDESCRIPTION: This Go code snippet demonstrates how to define a JSON field with a slice type in an Ent schema, which enables the generation of an AppendTags method.\nSOURCE: https://github.com/ent/ent/blob/master/doc/website/blog/2022-10-10-json-append.mdx#2025-04-22_snippet_8\n\nLANGUAGE: go\nCODE:\n```\n// Fields of the User.\nfunc (User) Fields() []ent.Field {\n\treturn []ent.Field{\n\t\t// highlight-start\n\t\tfield.JSON(\"tags\", []string{}),\n\t\t// highlight-end\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Graph Traversal Example\nDESCRIPTION: Example showing how to traverse the graph from Group to Admin to Friends to Pets to Pet Friends to Owner.\nSOURCE: https://github.com/ent/ent/blob/master/examples/README.md#2025-04-22_snippet_5\n\nLANGUAGE: go\nCODE:\n```\nfunc Traverse(ctx context.Context, client *ent.Client) error {\n\towner, err := client.Group.\n\t\tQuery().\n\t\tWhere(group.Name(\"Github\")).\n\t\tQueryAdmin().\n\t\tQueryFriends().\n\t\tQueryPets().\n\t\tQueryFriends().\n\t\tQueryOwner().\n\t\tOnly(ctx)\n\tif err != nil {\n\t\treturn fmt.Errorf(\"failed querying the owner: %w\", err)\n\t}\n\tfmt.Println(owner)\n\treturn nil\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Users with Their Pets in Ent\nDESCRIPTION: A basic example of using eager loading to query all users with their associated pets. The pet entities are loaded and populated in the Edges field of each user object.\nSOURCE: https://github.com/ent/ent/blob/master/doc/md/eager-load.mdx#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nusers, err := client.User.\n\tQuery().\n\tWithPets().\n\tAll(ctx)\nif err != nil {\n\treturn err\n}\n// The returned users look as follows:\n//\n//\t[\n//\t\tUser {\n//\t\t\tID:   1,\n//\t\t\tName: \"a8m\",\n//\t\t\tEdges: {\n//\t\t\t\tPets: [Pet(...), ...]\n//\t\t\t\t...\n//\t\t\t}\n//\t\t},\n//\t\t...\n//\t]\n//\nfor _, u := range users {\n\tfor _, p := range u.Edges.Pets {\n\t\tfmt.Printf(\"User(%v) -> Pet(%v)\\n\", u.ID, p.ID)\n\t\t// Output:\n\t\t// User(...) -> Pet(...)\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Defining M2M Same-Type Relationship in Ent (Go)\nDESCRIPTION: Demonstrates how to define a many-to-many relationship of the same type (User to User) in Ent, representing a following-followers relationship. This snippet shows the edge definition in the User schema.\nSOURCE: https://github.com/ent/ent/blob/master/examples/README.md#2025-04-22_snippet_15\n\nLANGUAGE: go\nCODE:\n```\n// Edges of the User.\nfunc (User) Edges() []ent.Edge {\n\treturn []ent.Edge{\n\t\tedge.To(\"following\", User.Type).\n\t\t\tFrom(\"followers\"),\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Querying with HasEdge Predicate in Ent (Go)\nDESCRIPTION: Example of using the HasEdge predicate to query for pets that have an owner relationship.\nSOURCE: https://github.com/ent/ent/blob/master/doc/md/predicates.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nclient.Pet.\n\tQuery().\n\tWhere(pet.HasOwner()).\n\tAll(ctx)\n```\n\n----------------------------------------\n\nTITLE: Defining User Schema with Edges in Ent (Go)\nDESCRIPTION: This Go code snippet demonstrates how to define a User schema in Ent, including fields and edges. It shows the graph-based approach to data modeling in Ent, where relationships are defined using edges.\nSOURCE: https://github.com/ent/ent/blob/master/doc/website/blog/2023-01-26-visualizing-with-entviz.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\npackage schema\n\nimport (\n\t\"entgo.io/ent\"\n\t\"entgo.io/ent/schema/edge\"\n)\n\n// User schema.\ntype User struct {\n\tent.Schema\n}\n\n// Fields of the user.\nfunc (User) Fields() []ent.Field {\n\treturn []ent.Field{\n\t\t// ...\n\t}\n}\n\n// Edges of the user.\nfunc (User) Edges() []ent.Edge {\n\treturn []ent.Edge{\n\t\tedge.To(\"pets\", Pet.Type),\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Testing Privacy Rules in Ent Client Operations\nDESCRIPTION: This code snippet shows how to test the implemented privacy rules using different contexts and roles in Ent client operations.\nSOURCE: https://github.com/ent/ent/blob/master/doc/md/privacy.mdx#2025-04-22_snippet_7\n\nLANGUAGE: go\nCODE:\n```\nfunc Do(ctx context.Context, client *ent.Client) error {\n\t// Expect operation to fail, because viewer-context\n\t// is missing (first mutation rule check).\n\tif err := client.User.Create().Exec(ctx); !errors.Is(err, privacy.Deny) {\n\t\treturn fmt.Errorf(\"expect operation to fail, but got %w\", err)\n\t}\n\t// Apply the same operation with \"Admin\" role.\n\tadmin := viewer.NewContext(ctx, viewer.UserViewer{Role: viewer.Admin})\n\tif err := client.User.Create().Exec(admin); err != nil {\n\t\treturn fmt.Errorf(\"expect operation to pass, but got %w\", err)\n\t}\n\t// Apply the same operation with \"ViewOnly\" role.\n\tviewOnly := viewer.NewContext(ctx, viewer.UserViewer{Role: viewer.View})\n\tif err := client.User.Create().Exec(viewOnly); !errors.Is(err, privacy.Deny) {\n\t\treturn fmt.Errorf(\"expect operation to fail, but got %w\", err)\n\t}\n\t// Allow all viewers to query users.\n\tfor _, ctx := range []context.Context{ctx, viewOnly, admin} {\n\t\t// Operation should pass for all viewers.\n\t\tcount := client.User.Query().CountX(ctx)\n\t\tfmt.Println(count)\n\t}\n\treturn nil\n}\n```\n\n----------------------------------------\n\nTITLE: Defining O2O Bidirectional Edge in Go using Ent\nDESCRIPTION: This snippet demonstrates how to define a symmetric one-to-one bidirectional edge called 'spouse' between User entities. Each user can have only one spouse, and the relationship is reciprocal.\nSOURCE: https://github.com/ent/ent/blob/master/doc/md/schema-edges.mdx#2025-04-22_snippet_9\n\nLANGUAGE: go\nCODE:\n```\n// Edges of the User.\nfunc (User) Edges() []ent.Edge {\n\treturn []ent.Edge{\n\t\tedge.To(\"spouse\", User.Type).\n\t\t\tUnique(),\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Immutable Edge in User-Tenant Relationship in Ent\nDESCRIPTION: Example of defining an immutable edge from User to Tenant, which can only be set during entity creation. No setters will be generated for update builders of the entity.\nSOURCE: https://github.com/ent/ent/blob/master/doc/md/schema-edges.mdx#2025-04-22_snippet_29\n\nLANGUAGE: go\nCODE:\n```\n// Edges of the User.\nfunc (User) Edges() []ent.Edge {\n\treturn []ent.Edge{\n\t\tedge.To(\"tenant\", Tenant.Type).\n\t\t\tField(\"tenant_id\").\n\t\t\tUnique().\n\t\t\tRequired().\n\t\t\tImmutable(),\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Defining M2O Relationship in Pet Schema (Pet to User)\nDESCRIPTION: This code snippet demonstrates how to define a many-to-one relationship from Pet to User using edge.From in the Pet schema. It establishes that a Pet can have only one owner by using the Unique method.\nSOURCE: https://github.com/ent/ent/blob/master/doc/md/schema-edges.mdx#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\npackage schema\n\nimport (\n\t\"entgo.io/ent\"\n\t\"entgo.io/ent/schema/edge\"\n)\n\n// Pet holds the schema definition for the Pet entity.\ntype Pet struct {\n\tent.Schema\n}\n\n// Fields of the Pet.\nfunc (Pet) Fields() []ent.Field {\n\treturn []ent.Field{\n\t\t// ...\n\t}\n}\n\n// Edges of the Pet.\nfunc (Pet) Edges() []ent.Edge {\n\treturn []ent.Edge{\n\t\tedge.From(\"owner\", User.Type).\n\t\t\tRef(\"pets\").\n\t\t\tUnique(),\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Defining M2M Bidirectional Relations (Friends)\nDESCRIPTION: Schema definition for symmetric many-to-many relationship between users as friends, where if user A is friend with B, B is also friend with A.\nSOURCE: https://github.com/ent/ent/blob/master/doc/md/schema-edges.mdx#2025-04-22_snippet_18\n\nLANGUAGE: go\nCODE:\n```\n// Edges of the User.\nfunc (User) Edges() []ent.Edge {\n\treturn []ent.Edge{\n\t\tedge.To(\"friends\", User.Type),\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Aggregation in Ent\nDESCRIPTION: Demonstrates how to perform basic aggregation operations in Ent, including summing a single field and aggregating multiple fields simultaneously (sum, min, max, count).\nSOURCE: https://github.com/ent/ent/blob/master/doc/md/aggregate.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"context\"\n\n\t\"<project>/ent\"\n\t\"<project>/ent/payment\"\n\t\"<project>/ent/pet\"\n)\n\nfunc Do(ctx context.Context, client *ent.Client) {\n\t// Aggregate one field.\n\tsum, err := client.Payment.Query().\n\t\tAggregate(\n\t\t\tent.Sum(payment.Amount),\n\t\t).\n\t\tInt(ctx)\n\n\t// Aggregate multiple fields.\n\tvar v []struct {\n\t\tSum, Min, Max, Count int\n\t}\n\terr := client.Pet.Query().\n\t\tAggregate(\n\t\t\tent.Sum(pet.FieldAge),\n\t\t\tent.Min(pet.FieldAge),\n\t\t\tent.Max(pet.FieldAge),\n\t\t\tent.Count(),\n\t\t).\n\t\tScan(ctx, &v)\n}\n```\n\n----------------------------------------\n\nTITLE: Interacting with O2M Edge Between Two Types in Go using Ent\nDESCRIPTION: This snippet demonstrates how to create pets and users, establish relationships between them, and perform queries on the O2M relationship between users and pets.\nSOURCE: https://github.com/ent/ent/blob/master/doc/md/schema-edges.mdx#2025-04-22_snippet_12\n\nLANGUAGE: go\nCODE:\n```\nfunc Do(ctx context.Context, client *ent.Client) error {\n\t// Create the 2 pets.\n\tpedro, err := client.Pet.\n\t\tCreate().\n\t\tSetName(\"pedro\").\n\t\tSave(ctx)\n\tif err != nil {\n\t\treturn fmt.Errorf(\"creating pet: %w\", err)\n\t}\n\tlola, err := client.Pet.\n\t\tCreate().\n\t\tSetName(\"lola\").\n\t\tSave(ctx)\n\tif err != nil {\n\t\treturn fmt.Errorf(\"creating pet: %w\", err)\n\t}\n\t// Create the user, and add its pets on the creation.\n\ta8m, err := client.User.\n\t\tCreate().\n\t\tSetAge(30).\n\t\tSetName(\"a8m\").\n\t\tAddPets(pedro, lola).\n\t\tSave(ctx)\n\tif err != nil {\n\t\treturn fmt.Errorf(\"creating user: %w\", err)\n\t}\n\tfmt.Println(\"User created:\", a8m)\n\t// Output: User(id=1, age=30, name=a8m)\n\n\t// Query the owner. Unlike `Only`, `OnlyX` panics if an error occurs.\n\towner := pedro.QueryOwner().OnlyX(ctx)\n\tfmt.Println(owner.Name)\n\t// Output: a8m\n\n\t// Traverse the sub-graph. Unlike `Count`, `CountX` panics if an error occurs.\n\tcount := pedro.\n\t\tQueryOwner(). // a8m\n\t\tQueryPets().  // pedro, lola\n\t\tCountX(ctx)   // count\n\tfmt.Println(count)\n\t// Output: 2\n\treturn nil\n}\n```\n\n----------------------------------------\n\nTITLE: Example O2O Relationship Usage\nDESCRIPTION: This code shows how to interact with one-to-one relationships in Ent. It demonstrates creating a user with a card, and querying the relationships in both directions using the generated client API.\nSOURCE: https://github.com/ent/ent/blob/master/doc/md/schema-edges.mdx#2025-04-22_snippet_6\n\nLANGUAGE: go\nCODE:\n```\nfunc Do(ctx context.Context, client *ent.Client) error {\n\ta8m, err := client.User.\n\t\tCreate().\n\t\tSetAge(30).\n\t\tSetName(\"Mashraki\").\n\t\tSave(ctx)\n\tif err != nil {\n\t\treturn fmt.Errorf(\"creating user: %w\", err)\n\t}\n\tlog.Println(\"user:\", a8m)\n\tcard1, err := client.Card.\n\t\tCreate().\n\t\tSetOwner(a8m).\n\t\tSetNumber(\"1020\").\n\t\tSetExpired(time.Now().Add(time.Minute)).\n\t\tSave(ctx)\n\tif err != nil {\n    \treturn fmt.Errorf(\"creating card: %w\", err)\n    }\n\tlog.Println(\"card:\", card1)\n\t// Only returns the card of the user,\n\t// and expects that there's only one.\n\tcard2, err := a8m.QueryCard().Only(ctx)\n\tif err != nil {\n\t\treturn fmt.Errorf(\"querying card: %w\", err)\n    }\n\tlog.Println(\"card:\", card2)\n\t// The Card entity is able to query its owner using\n\t// its back-reference.\n\towner, err := card2.QueryOwner().Only(ctx)\n\tif err != nil {\n\t\treturn fmt.Errorf(\"querying owner: %w\", err)\n    }\n\tlog.Println(\"owner:\", owner)\n\treturn nil\n}\n```\n\n----------------------------------------\n\nTITLE: Interacting with O2O Bidirectional Edge in Go using Ent\nDESCRIPTION: Shows how to create users, set spouse relationships, and query the spouse edge using the Ent client in Go.\nSOURCE: https://github.com/ent/ent/blob/master/examples/README.md#2025-04-22_snippet_8\n\nLANGUAGE: go\nCODE:\n```\nfunc Do(ctx context.Context, client *ent.Client) error {\n\ta8m, err := client.User.\n\t\tCreate().\n\t\tSetAge(30).\n\t\tSetName(\"a8m\").\n\t\tSave(ctx)\n\tif err != nil {\n\t\treturn fmt.Errorf(\"creating user: %w\", err)\n\t}\n\tnati, err := client.User.\n\t\tCreate().\n\t\tSetAge(28).\n\t\tSetName(\"nati\").\n\t\tSetSpouse(a8m).\n\t\tSave(ctx)\n\tif err != nil {\n\t\treturn fmt.Errorf(\"creating user: %w\", err)\n\t}\n\n\t// Query the spouse edge.\n\t// Unlike `Only`, `OnlyX` panics if an error occurs.\n\tspouse := nati.QuerySpouse().OnlyX(ctx)\n\tfmt.Println(spouse.Name)\n\t// Output: a8m\n\n\tspouse = a8m.QuerySpouse().OnlyX(ctx)\n\tfmt.Println(spouse.Name)\n\t// Output: nati\n\n\t// Query how many users have a spouse.\n\t// Unlike `Count`, `CountX` panics if an error occurs.\n\tcount := client.User.\n\t\tQuery().\n\t\tWhere(user.HasSpouse()).\n\t\tCountX(ctx)\n\tfmt.Println(count)\n\t// Output: 2\n\n\t// Get the user, that has a spouse with name=\"a8m\".\n\tspouse = client.User.\n\t\tQuery().\n\t\tWhere(user.HasSpouseWith(user.Name(\"a8m\"))).\n\t\tOnlyX(ctx)\n\tfmt.Println(spouse.Name)\n\t// Output: nati\n\treturn nil\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing HTTP Server with Ent ORM in Go\nDESCRIPTION: This snippet shows the implementation of an HTTP server using Ent ORM. It defines a server struct with an Ent client, a constructor, and an index handler that retrieves blog posts from the database and renders them using a template.\nSOURCE: https://github.com/ent/ent/blob/master/doc/website/blog/2023-02-23-simple-cms-with-ent.mdx#2025-04-22_snippet_13\n\nLANGUAGE: go\nCODE:\n```\ntype server struct {\n\tclient *ent.Client\n}\n\nfunc newServer(client *ent.Client) *server {\n\treturn &server{client: client}\n}\n\n// index serves the blog home page\nfunc (s *server) index(w http.ResponseWriter, r *http.Request) {\n\tposts, err := s.client.Post.\n\t\tQuery().\n\t\tWithAuthor().\n\t\tAll(r.Context())\n\tif err != nil {\n\t\thttp.Error(w, err.Error(), http.StatusInternalServerError)\n\t\treturn\n\t}\n\tif err := tmpl.Execute(w, posts); err != nil {\n\t\thttp.Error(w, err.Error(), http.StatusInternalServerError)\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Database Comments in Ent Schema\nDESCRIPTION: Shows how to enable and configure database comments for tables and fields using the entsql.WithComments annotation. Includes examples of adding comments to both schema and individual fields, as well as selectively disabling comments.\nSOURCE: https://github.com/ent/ent/blob/master/doc/md/schema-annotations.md#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\npackage schema\n\nimport (\n\t\"entgo.io/ent\"\n\t\"entgo.io/ent/dialect/entsql\"\n\t\"entgo.io/ent/schema\"\n\t\"entgo.io/ent/schema/field\"\n)\n\n// User holds the schema definition for the User entity.\ntype User struct {\n\tent.Schema\n}\n\n// Annotations of the User.\nfunc (User) Annotations() []schema.Annotation {\n\treturn []schema.Annotation{\n\t\t// Adding this annotation to the schema enables\n\t\t// comments for the table and all its fields.\n\t\tentsql.WithComments(true),\n\t\tschema.Comment(\"Comment that appears in both the schema and the generated code\"),\n\t}\n}\n\n// Fields of the User.\nfunc (User) Fields() []ent.Field {\n\treturn []ent.Field{\n\t\tfield.String(\"name\").\n\t\t\tComment(\"The user's name\"),\n\t\tfield.Int(\"age\").\n            Comment(\"The user's age\"),\n        field.String(\"skipped\").\n            Comment(\"This comment won't be stored in the database\").\n            // Explicitly disable comments for this field.\n            Annotations(\n                entsql.WithComments(false),\n            ),\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Appending Values to JSON Subfield in Ent\nDESCRIPTION: This Go code snippet shows how to use the Modify method with sqljson.Append to append values to a JSON subfield in Ent.\nSOURCE: https://github.com/ent/ent/blob/master/doc/website/blog/2022-10-10-json-append.mdx#2025-04-22_snippet_11\n\nLANGUAGE: go\nCODE:\n```\nfunc TestAppendSubfield(t *testing.T) {\n\tclient := enttest.Open(t, \"sqlite3\", \"file:ent?mode=memory&cache=shared&_fk=1\")\n\tctx := context.Background()\n\t// Insert a user with two tags.\n\tu := client.User.Create().\n\t\tSetMeta(&schema.Meta{\n\t\t\tTags: []string{\"hello\", \"world\"},\n\t\t}).\n\t\tSaveX(ctx)\n\n\t// highlight-start\n\tu.Update().\n\t\tModify(func(u *sql.UpdateBuilder) {\n\t\t\tsqljson.Append(u, user.FieldMeta, []string{\"goodbye\"}, sqljson.Path(\"tags\"))\n\t\t}).\n\t\tExecX(ctx)\n\t// highlight-end\n\n\tagain := client.User.GetX(ctx, u.ID)\n\tfmt.Println(again.Meta.Tags)\n\t// Prints: [hello world goodbye]\n}\n```\n\n----------------------------------------\n\nTITLE: Using the WithTx Helper Function in Ent\nDESCRIPTION: Demonstrates how to use the WithTx helper function to execute code within a transaction context. This pattern simplifies transaction management by abstracting the transaction creation, commit, and rollback operations.\nSOURCE: https://github.com/ent/ent/blob/master/doc/md/transactions.md#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nfunc Do(ctx context.Context, client *ent.Client) {\n\t// WithTx helper.\n\tif err := WithTx(ctx, client, func(tx *ent.Tx) error {\n\t\treturn Gen(ctx, tx.Client())\n\t}); err != nil {\n\t\tlog.Fatal(err)\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Edge Filtering in Ent with HasCarWith (Go)\nDESCRIPTION: Example of filtering users who own a Tesla car using the HasCarWith predicate.\nSOURCE: https://github.com/ent/ent/blob/master/doc/md/predicates.md#2025-04-22_snippet_7\n\nLANGUAGE: go\nCODE:\n```\nusers := client.User.Query().\n\tWhere(user.HasCarWith(car.Model(\"Tesla\"))).\n\tAllX(ctx)\n```\n\n----------------------------------------\n\nTITLE: Defining Schema Hooks for a Credit Card Entity\nDESCRIPTION: Shows how to define hooks directly in the entity schema, including validation logic and post-mutation actions specific to the Card entity.\nSOURCE: https://github.com/ent/ent/blob/master/doc/md/hooks.md#2025-04-22_snippet_4\n\nLANGUAGE: go\nCODE:\n```\npackage schema\n\nimport (\n\t\"context\"\n\t\"fmt\"\n\n    gen \"<project>/ent\"\n    \"<project>/ent/hook\"\n\n\t\"entgo.io/ent\"\n)\n\n// Card holds the schema definition for the CreditCard entity.\ntype Card struct {\n\tent.Schema\n}\n\n// Hooks of the Card.\nfunc (Card) Hooks() []ent.Hook {\n\treturn []ent.Hook{\n\t\t// First hook.\n\t\thook.On(\n\t\t\tfunc(next ent.Mutator) ent.Mutator {\n\t\t\t\treturn hook.CardFunc(func(ctx context.Context, m *gen.CardMutation) (ent.Value, error) {\n\t\t\t\t\tif num, ok := m.Number(); ok && len(num) < 10 {\n\t\t\t\t\t\treturn nil, fmt.Errorf(\"card number is too short\")\n\t\t\t\t\t}\n\t\t\t\t\treturn next.Mutate(ctx, m)\n\t\t\t\t})\n\t\t\t},\n\t\t\t// Limit the hook only for these operations.\n\t\t\tent.OpCreate|ent.OpUpdate|ent.OpUpdateOne,\n\t\t),\n\t\t// Second hook.\n\t\tfunc(next ent.Mutator) ent.Mutator {\n\t\t\treturn ent.MutateFunc(func(ctx context.Context, m ent.Mutation) (ent.Value, error) {\n\t\t\t\tif s, ok := m.(interface{ SetName(string) }); ok {\n\t\t\t\t\ts.SetName(\"Boring\")\n\t\t\t\t}\n\t\t\t\tv, err := next.Mutate(ctx, m)\n\t\t\t\t// Post mutation action.\n\t\t\t\tfmt.Println(\"new value:\", v)\n\t\t\t\treturn v, err\n\t\t\t})\n\t\t},\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Defining User Schema with Liked Tweets Relationship in Ent\nDESCRIPTION: Schema definition for the User entity that includes a relationship to liked tweets implemented through a Like edge schema. This demonstrates a many-to-many relationship between different entity types.\nSOURCE: https://github.com/ent/ent/blob/master/doc/md/schema-edges.mdx#2025-04-22_snippet_22\n\nLANGUAGE: go\nCODE:\n```\n// User holds the schema definition for the User entity.\ntype User struct {\n\tent.Schema\n}\n\n// Fields of the User.\nfunc (User) Fields() []ent.Field {\n\treturn []ent.Field{\n\t\tfield.String(\"name\").\n\t\t\tDefault(\"Unknown\"),\n\t}\n}\n\n// Edges of the User.\nfunc (User) Edges() []ent.Edge {\n\treturn []ent.Edge{\n\t\tedge.To(\"liked_tweets\", Tweet.Type).\n\t\t\tThrough(\"likes\", Like.Type),\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Using Enthistory for CRUD Operations in Go\nDESCRIPTION: This code snippet shows how to use Enthistory for creating a new Tweet and querying its history. It demonstrates that the creation process remains unchanged, while Enthistory automatically records the event. It also shows how to query the history changes of a Tweet.\nSOURCE: https://github.com/ent/ent/blob/master/doc/website/blog/2022-04-07-how-twitter-can-implement.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\n// Creating a new Tweet doesn't change. enthistory automatically modifies\n// your transaction on the fly to record this event in the history table\nclient.Tweet.Create().SetContent(\"hello world!\").SaveX(ctx)\n\n// Querying history changes is as easy as querying any other entity's edge.\nt, _ := client.Tweet.Get(ctx, id)\nhs := client.Tweet.QueryHistory(t).WithChanges().AllX(ctx)\n```\n\n----------------------------------------\n\nTITLE: Defining M2M Same-Type Relations (Followers)\nDESCRIPTION: Schema definition for many-to-many relationship between users and their followers, where a user can follow many users and have many followers.\nSOURCE: https://github.com/ent/ent/blob/master/doc/md/schema-edges.mdx#2025-04-22_snippet_17\n\nLANGUAGE: go\nCODE:\n```\n// Edges of the User.\nfunc (User) Edges() []ent.Edge {\n\treturn []ent.Edge{\n\t\tedge.To(\"following\", User.Type).\n\t\t\tFrom(\"followers\"),\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Annotations to Ent Edges in Go\nDESCRIPTION: Shows how to attach metadata to edges using annotations, which can be used by template extensions. Demonstrates usage with a relay connection annotation.\nSOURCE: https://github.com/ent/ent/blob/master/doc/md/schema-edges.mdx#2025-04-22_snippet_33\n\nLANGUAGE: go\nCODE:\n```\n// Pet schema.\ntype Pet struct {\n\tent.Schema\n}\n\n// Edges of the Pet.\nfunc (Pet) Edges() []ent.Edge {\n\treturn []ent.Edge{\n\t\tedge.To(\"owner\", User.Type).\n\t\t\tRef(\"pets\").\n\t\t\tUnique().\n\t\t\tAnnotations(entgql.RelayConnection()),\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Defining JSON Field in Ent Schema\nDESCRIPTION: This Go code snippet shows how to define a JSON field in an Ent schema, using a custom struct as the backing type.\nSOURCE: https://github.com/ent/ent/blob/master/doc/website/blog/2022-10-10-json-append.mdx#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\ntype Tag struct {\n\tName    string    `json:\"name\"`\n\tCreated time.Time `json:\"created\"`\n}\n\nfunc (User) Fields() []ent.Field {\n\treturn []ent.Field{\n\t\tfield.JSON(\"tags\", []Tag{}),\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Friendship Edge Schema in Ent\nDESCRIPTION: Definition of the Friendship edge schema that connects users in a friendship relationship. This schema includes a created_at timestamp field and the required user_id and friend_id fields that compose the relationship.\nSOURCE: https://github.com/ent/ent/blob/master/doc/md/schema-edges.mdx#2025-04-22_snippet_21\n\nLANGUAGE: go\nCODE:\n```\n// Friendship holds the edge schema definition of the Friendship relationship.\ntype Friendship struct {\n\tent.Schema\n}\n\n// Fields of the Friendship.\nfunc (Friendship) Fields() []ent.Field {\n\treturn []ent.Field{\n\t\tfield.Time(\"created_at\").\n\t\t\tDefault(time.Now),\n\t\tfield.Int(\"user_id\"),\n\t\tfield.Int(\"friend_id\"),\n\t}\n}\n\n// Edges of the Friendship.\nfunc (Friendship) Edges() []ent.Edge {\n\treturn []ent.Edge{\n\t\tedge.To(\"user\", User.Type).\n\t\t\tRequired().\n\t\t\tUnique().\n\t\t\tField(\"user_id\"),\n\t\tedge.To(\"friend\", User.Type).\n\t\t\tRequired().\n\t\t\tUnique().\n\t\t\tField(\"friend_id\"),\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Using WhereInput as Predicates in Go\nDESCRIPTION: Example of using the generated WhereInput as regular predicates in a Go query. It demonstrates how to apply the filter to an Ent query.\nSOURCE: https://github.com/ent/ent/blob/master/doc/md/tutorial-todo-gql-filter-input.md#2025-04-22_snippet_14\n\nLANGUAGE: go\nCODE:\n```\nquery := ent.Todo.Query()\nquery, err := input.Filter(query)\nif err != nil {\n\treturn nil, err\n}\nreturn query.All(ctx)\n```\n\n----------------------------------------\n\nTITLE: Interacting with O2M Relationship in Go using Ent\nDESCRIPTION: Demonstrates how to create users and pets, establish relationships, and query the O2M relationship using the Ent client in Go.\nSOURCE: https://github.com/ent/ent/blob/master/examples/README.md#2025-04-22_snippet_10\n\nLANGUAGE: go\nCODE:\n```\nfunc Do(ctx context.Context, client *ent.Client) error {\n\t// Create the 2 pets.\n\tpedro, err := client.Pet.\n\t\tCreate().\n\t\tSetName(\"pedro\").\n\t\tSave(ctx)\n\tif err != nil {\n\t\treturn fmt.Errorf(\"creating pet: %w\", err)\n\t}\n\tlola, err := client.Pet.\n\t\tCreate().\n\t\tSetName(\"lola\").\n\t\tSave(ctx)\n\tif err != nil {\n\t\treturn fmt.Errorf(\"creating pet: %w\", err)\n\t}\n\t// Create the user, and add its pets on the creation.\n\ta8m, err := client.User.\n\t\tCreate().\n\t\tSetAge(30).\n\t\tSetName(\"a8m\").\n\t\tAddPets(pedro, lola).\n\t\tSave(ctx)\n\tif err != nil {\n\t\treturn fmt.Errorf(\"creating user: %w\", err)\n\t}\n\tfmt.Println(\"User created:\", a8m)\n\t// Output: User(id=1, age=30, name=a8m)\n\n\t// Query the owner. Unlike `Only`, `OnlyX` panics if an error occurs.\n\towner := pedro.QueryOwner().OnlyX(ctx)\n\tfmt.Println(owner.Name)\n\t// Output: a8m\n\n\t// Traverse the sub-graph. Unlike `Count`, `CountX` panics if an error occurs.\n\tcount := pedro.\n\t\tQueryOwner(). // a8m\n\t\tQueryPets().  // pedro, lola\n\t\tCountX(ctx)   // count\n\tfmt.Println(count)\n\t// Output: 2\n\treturn nil\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing CreateTodo Resolver with Ent\nDESCRIPTION: This Go code snippet shows how to implement the CreateTodo resolver by connecting it to Ent-generated code. It uses Ent's fluent API to create and save a new todo item.\nSOURCE: https://github.com/ent/ent/blob/master/doc/md/tutorial-todo-gql.mdx#2025-04-22_snippet_15\n\nLANGUAGE: go\nCODE:\n```\nfunc (r *mutationResolver) CreateTodo(ctx context.Context, input ent.CreateTodoInput) (*ent.Todo, error) {\n\treturn r.client.Todo.Create().SetInput(input).Save(ctx)\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing GraphQL Mutation with Transactional Client in Go\nDESCRIPTION: This code shows how to implement a GraphQL mutation using the transactional ent.Client. It creates a new Todo item using the client obtained from the context, which is managed by the Transactioner handler.\nSOURCE: https://github.com/ent/ent/blob/master/doc/md/graphql.md#2025-04-22_snippet_11\n\nLANGUAGE: go\nCODE:\n```\nfunc (mutationResolver) CreateTodo(ctx context.Context, todo TodoInput) (*ent.Todo, error) {\n\tclient := ent.FromContext(ctx)\n\treturn client.Todo.\n\t\tCreate().\n\t\tSetStatus(todo.Status).\n\t\tSetNillablePriority(todo.Priority).\n\t\tSetText(todo.Text).\n\t\tSetNillableParentID(todo.Parent).\n\t\tSave(ctx)\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Automatic Data Migration with Apply Hook in Go\nDESCRIPTION: This code snippet demonstrates how to create an Apply Hook function that fills null values in a user table. It checks for specific schema changes, creates a temporary client, and updates null name fields to 'Unknown'.\nSOURCE: https://github.com/ent/ent/blob/master/doc/md/data-migrations.mdx#2025-04-22_snippet_12\n\nLANGUAGE: go\nCODE:\n```\nfunc FillNullValues(dbdialect string) schema.ApplyHook {\n\treturn func(next schema.Applier) schema.Applier {\n\t\treturn schema.ApplyFunc(func(ctx context.Context, conn dialect.ExecQuerier, plan *migrate.Plan) error {\n\t\t\t// Search the schema.Change that triggers the data migration.\n\t\t\thasC := func() bool {\n\t\t\t\tfor _, c := range plan.Changes {\n\t\t\t\t\tm, ok := c.Source.(*schema.ModifyTable)\n\t\t\t\t\tif ok && m.T.Name == user.Table && schema.Changes(m.Changes).IndexModifyColumn(user.FieldName) != -1 {\n\t\t\t\t\t\treturn true\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn false\n\t\t\t}()\n\t\t\t// Change was found, apply the data migration.\n\t\t\tif hasC {\n\t\t\t    // At this stage, there are three ways to UPDATE the NULL values to \"Unknown\".\n\t\t\t    // Append a custom migrate.Change to migrate.Plan, execute an SQL statement\n\t\t\t    // directly on the dialect.ExecQuerier, or use the generated ent.Client.\n\n\t\t\t    // Create a temporary client from the migration connection.\n\t\t\t    client := ent.NewClient(\n\t\t\t    \tent.Driver(sql.NewDriver(dbdialect, sql.Conn{ExecQuerier: conn.(*sql.Tx)})),\n\t\t\t    )\n\t\t\t    if err := client.User.\n\t\t\t    \tUpdate().\n\t\t\t    \tSetName(\"Unknown\").\n\t\t\t    \tWhere(user.NameIsNil()).\n\t\t\t    \tExec(ctx); err != nil {\n\t\t\t    \treturn err\n\t\t\t    }\n\t\t\t}\n\t\t\treturn next.Apply(ctx, conn, plan)\n\t\t})\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Example GraphQL Query for Fetching Todos\nDESCRIPTION: This GraphQL query shows how to fetch the list of todos, including their id, text, and status.\nSOURCE: https://github.com/ent/ent/blob/master/doc/md/tutorial-todo-gql.mdx#2025-04-22_snippet_17\n\nLANGUAGE: graphql\nCODE:\n```\nquery {\n  todos {\n    id\n    text\n    status\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Custom SQL JOIN Query Equivalent to HasCarWith in Ent (Go)\nDESCRIPTION: Example of using a custom SQL JOIN to filter users with Tesla cars.\nSOURCE: https://github.com/ent/ent/blob/master/doc/md/predicates.md#2025-04-22_snippet_9\n\nLANGUAGE: go\nCODE:\n```\n// `JOIN` version.\nusers := client.User.Query().\n\tWhere(func(s *sql.Selector) {\n\t\tt := sql.Table(car.Table)\n\t\ts.Join(t).On(s.C(user.FieldID), t.C(car.FieldOwnerID))\n\t\ts.Where(sql.EQ(t.C(car.FieldModel), \"Tesla\"))\n\t}).\n\tAllX(ctx)\n```\n\nLANGUAGE: sql\nCODE:\n```\n-- `JOIN` version.\nSELECT DISTINCT `users`.`id`, `users`.`age`, `users`.`name` FROM `users` JOIN `cars` ON `users`.`id` = `cars`.`owner_id` WHERE `cars`.`model` = 'Tesla'\n```\n\n----------------------------------------\n\nTITLE: Querying Car Owners Using Inverse Edge in Go\nDESCRIPTION: Demonstrates how to query the owner of a car using the inverse edge.\nSOURCE: https://github.com/ent/ent/blob/master/doc/md/getting-started.mdx#2025-04-22_snippet_14\n\nLANGUAGE: go\nCODE:\n```\nfunc QueryCarUsers(ctx context.Context, a8m *ent.User) error {\n\tcars, err := a8m.QueryCars().All(ctx)\n\tif err != nil {\n\t\treturn fmt.Errorf(\"failed querying user cars: %w\", err)\n\t}\n\t// Query the inverse edge.\n\tfor _, c := range cars {\n\t\towner, err := c.QueryOwner().Only(ctx)\n\t\tif err != nil {\n\t\t\treturn fmt.Errorf(\"failed querying car %q owner: %w\", c.Model, err)\n\t\t}\n\t\tlog.Printf(\"car %q owner: %q\\n\", c.Model, owner.Name)\n\t}\n\treturn nil\n}\n```\n\n----------------------------------------\n\nTITLE: Querying a Single Node\nDESCRIPTION: GraphQL query demonstrating how to fetch a single node using the Node interface.\nSOURCE: https://github.com/ent/ent/blob/master/doc/md/tutorial-todo-gql-node.md#2025-04-22_snippet_6\n\nLANGUAGE: graphql\nCODE:\n```\nquery {\n  node(id: 1) {\n    id\n    ... on Todo {\n      text\n    }\n  }\n}\n\n# Output: { \"data\": { \"node\": { \"id\": \"1\", \"text\": \"Create GraphQL Example\" } } }\n```\n\n----------------------------------------\n\nTITLE: Custom Ordering Function in Ent Go\nDESCRIPTION: Demonstrates how to implement custom ordering logic using a custom function that interacts with the SQL selector.\nSOURCE: https://github.com/ent/ent/blob/master/doc/md/paging.mdx#2025-04-22_snippet_8\n\nLANGUAGE: go\nCODE:\n```\nnames, err := client.Pet.Query().\n\tOrder(func(s *sql.Selector) {\n\t\t// Logic goes here.\n\t}).\n\tSelect(pet.FieldName).\n\tStrings(ctx)\n```\n\n----------------------------------------\n\nTITLE: Field Comparison Predicates in Ent (Go)\nDESCRIPTION: Example of comparing different fields within the same record using FieldsEQ, FieldsNEQ, FieldsGT, and FieldsLT predicates.\nSOURCE: https://github.com/ent/ent/blob/master/doc/md/predicates.md#2025-04-22_snippet_14\n\nLANGUAGE: go\nCODE:\n```\nclient.Order.Query().\n\tWhere(\n\t\tsql.FieldsEQ(order.FieldTotal, order.FieldTax),\n        sql.FieldsNEQ(order.FieldTotal, order.FieldDiscount),\n\t).\n\tAll(ctx)\n\nclient.Order.Query().\n\tWhere(\n\t\torder.Or(\n\t\t\tsql.FieldsGT(order.FieldTotal, order.FieldTax),\n\t\t\tsql.FieldsLT(order.FieldTotal, order.FieldDiscount),\n\t\t),\n\t).\n\tAll(ctx)\n```\n\n----------------------------------------\n\nTITLE: Configuring Foreign Key Referential Actions in Ent Schema\nDESCRIPTION: Demonstrates how to customize foreign key behavior using the entsql annotation. This example configures the ON DELETE CASCADE action for posts related to a user.\nSOURCE: https://github.com/ent/ent/blob/master/doc/md/schema-annotations.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\npackage schema\n\nimport (\n\t\"entgo.io/ent\"\n\t\"entgo.io/ent/dialect/entsql\"\n\t\"entgo.io/ent/schema/edge\"\n\t\"entgo.io/ent/schema/field\"\n)\n\n// User holds the schema definition for the User entity.\ntype User struct {\n\tent.Schema\n}\n\n// Fields of the User.\nfunc (User) Fields() []ent.Field {\n\treturn []ent.Field{\n\t\tfield.String(\"name\").\n\t\t\tDefault(\"Unknown\"),\n\t}\n}\n\n// Edges of the User.\nfunc (User) Edges() []ent.Edge {\n\treturn []ent.Edge{\n\t\tedge.To(\"posts\", Post.Type).\n\t\t\tAnnotations(entsql.OnDelete(entsql.Cascade)),\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Ent Configuration for Project Root Execution in Go\nDESCRIPTION: This code updates the Ent configuration to run codegen from the project root directory, adjusting file paths accordingly.\nSOURCE: https://github.com/ent/ent/blob/master/doc/md/tutorial-todo-gql-schema-generator.md#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nfunc main() {\n\tex, err := entgql.NewExtension(\n\t\tentgql.WithWhereInputs(true),\n\t\tentgql.WithConfigPath(\"./gqlgen.yml\"),\n\t\tentgql.WithSchemaGenerator(),\n\t\tentgql.WithSchemaPath(\"./ent.graphql\"),\n\t)\n\tif err != nil {\n\t\tlog.Fatalf(\"creating entgql extension: %v\", err)\n\t}\n\topts := []entc.Option{\n\t\tentc.Extensions(ex),\n\t\tentc.TemplateDir(\"./ent/template\"),\n\t}\n\tif err := entc.Generate(\"./ent/schema\", &gen.Config{}, opts...); err != nil {\n\t\tlog.Fatalf(\"running ent codegen: %v\", err)\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Todo Schema Fields in Ent\nDESCRIPTION: Schema definition for Todo entity including text, created_at, status, and priority fields with their respective types and constraints\nSOURCE: https://github.com/ent/ent/blob/master/doc/md/tutorial-todo-crud.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nfunc (Todo) Fields() []ent.Field {\n\treturn []ent.Field{\n\t\tfield.Text(\"text\").\n\t\t\tNotEmpty(),\n\t\tfield.Time(\"created_at\").\n\t\t\tDefault(time.Now).\n\t\t\tImmutable(),\n\t\tfield.Enum(\"status\").\n\t\t\tNamedValues(\n\t\t\t\t\"InProgress\", \"IN_PROGRESS\",\n\t\t\t\t\"Completed\", \"COMPLETED\",\n\t\t\t).\n\t\t\tDefault(\"IN_PROGRESS\"),\n\t\tfield.Int(\"priority\").\n\t\t\tDefault(0),\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Mixins for Ent Schema in Go\nDESCRIPTION: This example demonstrates how to create custom mixins (TimeMixin and DetailsMixin) that add common fields to Ent schemas. It also shows how to use these mixins in User and Pet schemas.\nSOURCE: https://github.com/ent/ent/blob/master/doc/md/schema-mixin.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\npackage schema\n\nimport (\n\t\"time\"\n\n\t\"entgo.io/ent\"\n\t\"entgo.io/ent/schema/field\"\n\t\"entgo.io/ent/schema/mixin\"\n)\n\n// -------------------------------------------------\n// Mixin definition\n\n// TimeMixin implements the ent.Mixin for sharing\n// time fields with package schemas.\ntype TimeMixin struct{\n\t// We embed the `mixin.Schema` to avoid\n\t// implementing the rest of the methods.\n\tmixin.Schema\n}\n\nfunc (TimeMixin) Fields() []ent.Field {\n\treturn []ent.Field{\n\t\tfield.Time(\"created_at\").\n\t\t\tImmutable().\n\t\t\tDefault(time.Now),\n\t\tfield.Time(\"updated_at\").\n\t\t\tDefault(time.Now).\n\t\t\tUpdateDefault(time.Now),\n\t}\n}\n\n// DetailsMixin implements the ent.Mixin for sharing\n// entity details fields with package schemas.\ntype DetailsMixin struct{\n\t// We embed the `mixin.Schema` to avoid\n\t// implementing the rest of the methods.\n\tmixin.Schema\n}\n\nfunc (DetailsMixin) Fields() []ent.Field {\n\treturn []ent.Field{\n\t\tfield.Int(\"age\").\n\t\t\tPositive(),\n\t\tfield.String(\"name\").\n\t\t\tNotEmpty(),\n\t}\n}\n\n// -------------------------------------------------\n// Schema definition\n\n// User schema mixed-in the TimeMixin and DetailsMixin fields and therefore\n// has 5 fields: `created_at`, `updated_at`, `age`, `name` and `nickname`.\ntype User struct {\n\tent.Schema\n}\n\nfunc (User) Mixin() []ent.Mixin {\n\treturn []ent.Mixin{\n\t\tTimeMixin{},\n\t\tDetailsMixin{},\n\t}\n}\n\nfunc (User) Fields() []ent.Field {\n\treturn []ent.Field{\n\t\tfield.String(\"nickname\").\n\t\t\tUnique(),\n\t}\n}\n\n// Pet schema mixed-in the DetailsMixin fields and therefore\n// has 3 fields: `age`, `name` and `weight`.\ntype Pet struct {\n\tent.Schema\n}\n\nfunc (Pet) Mixin() []ent.Mixin {\n\treturn []ent.Mixin{\n\t\tDetailsMixin{},\n\t}\n}\n\nfunc (Pet) Fields() []ent.Field {\n\treturn []ent.Field{\n\t\tfield.Float(\"weight\"),\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Group By Single Field in Ent\nDESCRIPTION: Demonstrates how to group results by a single field (name) of users and retrieve the distinct values as a string array.\nSOURCE: https://github.com/ent/ent/blob/master/doc/md/aggregate.md#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"context\"\n\t\n\t\"<project>/ent\"\n\t\"<project>/ent/user\"\n)\n\nfunc Do(ctx context.Context, client *ent.Client) {\n\tnames, err := client.User.\n\t\tQuery().\n\t\tGroupBy(user.FieldName).\n\t\tStrings(ctx)\n}\n```\n\n----------------------------------------\n\nTITLE: Filtering Entities Based on Complex Edge Conditions\nDESCRIPTION: Function demonstrating how to filter entities based on conditions involving multiple edge traversals. Shows how to use the HasX predicates to express complex graph queries concisely.\nSOURCE: https://github.com/ent/ent/blob/master/doc/md/traversals.md#2025-04-22_snippet_6\n\nLANGUAGE: go\nCODE:\n```\nfunc Traverse(ctx context.Context, client *ent.Client) error {\n\tpets, err := client.Pet.\n\t\tQuery().\n\t\tWhere(\n\t\t\tpet.HasOwnerWith(\n\t\t\t\tuser.HasFriendsWith(\n\t\t\t\t\tuser.HasManage(),\n\t\t\t\t),\n\t\t\t),\n\t\t).\n\t\tAll(ctx)\n\tif err != nil {\n\t\treturn fmt.Errorf(\"failed querying the pets: %w\", err)\n\t}\n\tfmt.Println(pets)\n\t// Output:\n\t// [Pet(id=1, name=Pedro) Pet(id=2, name=Xabi)]\n\treturn nil\n}\n```\n\n----------------------------------------\n\nTITLE: Applying Custom Privacy Rules in Ent Schema\nDESCRIPTION: This snippet demonstrates how to apply custom privacy rules (DenyIfNoViewer and AllowIfAdmin) in an Ent schema, along with default rules.\nSOURCE: https://github.com/ent/ent/blob/master/doc/md/privacy.mdx#2025-04-22_snippet_6\n\nLANGUAGE: go\nCODE:\n```\n// Policy defines the privacy policy of the User.\nfunc (User) Policy() ent.Policy {\n\treturn privacy.Policy{\n\t\tMutation: privacy.MutationPolicy{\n\t\t\trule.DenyIfNoViewer(),\n\t\t\trule.AllowIfAdmin(),\n\t\t\tprivacy.AlwaysDenyRule(),\n\t\t},\n\t\tQuery: privacy.QueryPolicy{\n\t\t\tprivacy.AlwaysAllowRule(),\n\t\t},\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Command Structures for CLI Application in Go\nDESCRIPTION: Definition of command structs for the CLI application, including LoadCmd for loading markdown files, IndexCmd for creating embeddings, and AskCmd for querying the indexed documents.\nSOURCE: https://github.com/ent/ent/blob/master/doc/website/blog/2025-02-12-rag-with-ent-atlas-pgvector.mdx#2025-04-22_snippet_12\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\ntype (\n\t// LoadCmd loads the markdown files into the database.\n\tLoadCmd struct {\n\t\tPath string `help:\"path to dir with markdown files\" type:\"existingdir\" required:\"\"`\n\t}\n\t// IndexCmd creates the embedding index on the database.\n\tIndexCmd struct {\n\t}\n\t// AskCmd is another leaf command.\n\tAskCmd struct {\n\t\t// Text is the positional argument for the ask command.\n\t\tText string `kong:\"arg,required,help='Text for the ask command.'\"`\n\t}\n)\n```\n\n----------------------------------------\n\nTITLE: Implementing Optimistic Locking Update Function\nDESCRIPTION: Implements an optimistic locking mechanism for updating user records. The function ensures that only one process can update a record at a time by checking version numbers.\nSOURCE: https://github.com/ent/ent/blob/master/doc/website/blog/2021-07-22-database-locking-techniques-with-ent.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nfunc optimisticUpdate(tx *ent.Tx, prev *ent.User, online bool) error {\n\tnextVer := time.Now().UnixNano()\n\n\tn := tx.User.Update().\n\t\tWhere(user.ID(prev.ID), user.Version(prev.Version)).\n\t\tSetVersion(nextVer).\n\t\tSetOnline(online).\n\t\tSaveX(context.Background())\n\n\tif n != 1 {\n\t\treturn fmt.Errorf(\"update failed: user id=%d updated by another process\", prev.ID)\n\t}\n\treturn nil\n}\n```\n\n----------------------------------------\n\nTITLE: Interacting with M2M Bidirectional Relationship in Ent (Go)\nDESCRIPTION: Demonstrates how to create users, add friends, and query the friendship relationship using the Ent client. This example shows the symmetry of the bidirectional relationship.\nSOURCE: https://github.com/ent/ent/blob/master/examples/README.md#2025-04-22_snippet_18\n\nLANGUAGE: go\nCODE:\n```\nfunc Do(ctx context.Context, client *ent.Client) error {\n\t// Unlike `Save`, `SaveX` panics if an error occurs.\n\ta8m := client.User.\n\t\tCreate().\n\t\tSetAge(30).\n\t\tSetName(\"a8m\").\n\t\tSaveX(ctx)\n\tnati := client.User.\n\t\tCreate().\n\t\tSetAge(28).\n\t\tSetName(\"nati\").\n\t\tAddFriends(a8m).\n\t\tSaveX(ctx)\n\n\t// Query friends. Unlike `All`, `AllX` panics if an error occurs.\n\tfriends := nati.\n\t\tQueryFriends().\n\t\tAllX(ctx)\n\tfmt.Println(friends)\n\t// Output: [User(id=1, age=30, name=a8m)]\n\n\tfriends = a8m.\n\t\tQueryFriends().\n\t\tAllX(ctx)\n\tfmt.Println(friends)\n\t// Output: [User(id=2, age=28, name=nati)]\n\n\t// Query the graph:\n\tfriends = client.User.\n\t\tQuery().\n\t\tWhere(user.HasFriends()).\n\t\tAllX(ctx)\n\tfmt.Println(friends)\n\t// Output: [User(id=1, age=30, name=a8m) User(id=2, age=28, name=nati)]\n\treturn nil\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Upsert Operations in Ent\nDESCRIPTION: Demonstrates how to use the SQL upsert feature to perform upsert operations in Ent, including handling conflicts and bulk upserts.\nSOURCE: https://github.com/ent/ent/blob/master/doc/md/features.md#2025-04-22_snippet_6\n\nLANGUAGE: go\nCODE:\n```\n// Use the new values that were set on create.\nid, err := client.User.\n\tCreate().\n\tSetAge(30).\n\tSetName(\"Ariel\").\n\tOnConflict().\n\tUpdateNewValues().\n\tID(ctx)\n\n// In PostgreSQL, the conflict target is required.\nerr := client.User.\n\tCreate().\n\tSetAge(30).\n\tSetName(\"Ariel\").\n\tOnConflictColumns(user.FieldName).\n\tUpdateNewValues().\n\tExec(ctx)\n\n// Bulk upsert is also supported.\nclient.User.\n\tCreateBulk(builders...).\n\tOnConflict(\n\t\tsql.ConflictWhere(...),\n\t\tsql.UpdateWhere(...),\n\t).\n\tUpdateNewValues().\n\tExec(ctx)\n\n// INSERT INTO \"users\" (...) VALUES ... ON CONFLICT WHERE ... DO UPDATE SET ... WHERE ...\n```\n\n----------------------------------------\n\nTITLE: Initializing Server for Todo API with SQLite in Go\nDESCRIPTION: Main function that initializes a SQLite in-memory database, runs migrations to create tables, and serves the API as described in the OpenAPI specification file on localhost:8080.\nSOURCE: https://github.com/ent/ent/blob/master/doc/website/blog/2022-02-15-generate-rest-crud-with-ent-and-ogen.md#2025-04-22_snippet_6\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"context\"\n\t\"log\"\n\t\"net/http\"\n\n\t\"entgo.io/ent/dialect\"\n\t\"entgo.io/ent/dialect/sql/schema\"\n\t\"<your-project>/ent\"\n\t\"<your-project>/ent/ogent\"\n\t_ \"github.com/mattn/go-sqlite3\"\n)\n\nfunc main() {\n\t// Create ent client.\n\tclient, err := ent.Open(dialect.SQLite, \"file:ent?mode=memory&cache=shared&_fk=1\")\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\t// Run the migrations.\n\tif err := client.Schema.Create(context.Background(), schema.WithAtlas(true)); err != nil {\n\t\tlog.Fatal(err)\n\t}\n\t// Start listening.\n\tsrv, err := ogent.NewServer(ogent.NewOgentHandler(client))\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tif err := http.ListenAndServe(\":8080\", srv); err != nil {\n\t\tlog.Fatal(err)\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Ordering by JSON Field Value in Ent Go\nDESCRIPTION: Shows how to sort query results based on values within JSON fields using the sqljson package.\nSOURCE: https://github.com/ent/ent/blob/master/doc/md/paging.mdx#2025-04-22_snippet_9\n\nLANGUAGE: go\nCODE:\n```\nusers := client.User.Query().\n    Order(\n        sqljson.OrderValue(user.FieldData, sqljson.Path(\"key1\", \"key2\")),\n    ).\n    AllX(ctx)\n```\n\n----------------------------------------\n\nTITLE: Complex Todo Query with Multiple Conditions\nDESCRIPTION: Example showing how to query Todo items with complex conditions using Not and HasChildren predicates\nSOURCE: https://github.com/ent/ent/blob/master/doc/md/tutorial-todo-crud.md#2025-04-22_snippet_7\n\nLANGUAGE: go\nCODE:\n```\nfunc Example_Todo() {\n\t// ...\n\n\t// Query all todo items that don't depend on other items and have items that depend them.\n\titems, err := client.Todo.Query().\n\t\tWhere(\n\t\t\ttodo.Not(\n\t\t\t\ttodo.HasParent(),\n\t\t\t),\n\t\t\ttodo.HasChildren(),\n\t\t).\n\t\tAll(ctx)\n\tif err != nil {\n\t\tlog.Fatalf(\"failed querying todos: %v\", err)\n\t}\n\tfor _, t := range items {\n\t\tfmt.Printf(\"%d: %q\\n\", t.ID, t.Text)\n\t}\n\t// Output:\n\t// 1: \"Add GraphQL Example\"\n}\n```\n\n----------------------------------------\n\nTITLE: Installing entviz Package\nDESCRIPTION: Command to install the entviz extension using go get\nSOURCE: https://github.com/ent/ent/blob/master/doc/website/blog/2021-08-26-visualizing-your-data-graph-using-entviz.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngo get github.com/hedwigz/entviz\n```\n\n----------------------------------------\n\nTITLE: Complex Graph Query Example\nDESCRIPTION: Example demonstrating how to query all pets whose owners are friends with a group admin.\nSOURCE: https://github.com/ent/ent/blob/master/examples/README.md#2025-04-22_snippet_6\n\nLANGUAGE: go\nCODE:\n```\nfunc Traverse(ctx context.Context, client *ent.Client) error {\n\tpets, err := client.Pet.\n\t\tQuery().\n\t\tWhere(\n\t\t\tpet.HasOwnerWith(\n\t\t\t\tuser.HasFriendsWith(\n\t\t\t\t\tuser.HasManage(),\n\t\t\t\t),\n\t\t\t),\n\t\t).\n\t\tAll(ctx)\n\tif err != nil {\n\t\treturn fmt.Errorf(\"failed querying the pets: %w\", err)\n\t}\n\tfmt.Println(pets)\n\treturn nil\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Main Function for OAS Server in Go\nDESCRIPTION: This Go code snippet demonstrates how to set up and run the generated OAS server. It includes creating an Ent client, running schema migrations, and starting the HTTP server with the generated handler.\nSOURCE: https://github.com/ent/ent/blob/master/doc/website/blog/2021-09-10-openapi-generator.md#2025-04-22_snippet_13\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"context\"\n\t\"log\"\n\t\"net/http\"\n\n\t\"<your-project>/ent\"\n\telk \"<your-project>/ent/http\"\n\n\t_ \"github.com/mattn/go-sqlite3\"\n\t\"go.uber.org/zap\"\n)\n\nfunc main() {\n\t// Create the ent client.\n\tc, err := ent.Open(\"sqlite3\", \"file:ent?mode=memory&cache=shared&_fk=1\")\n\tif err != nil {\n\t\tlog.Fatalf(\"failed opening connection to sqlite: %v\", err)\n\t}\n\tdefer c.Close()\n\t// Run the auto migration tool.\n\tif err := c.Schema.Create(context.Background()); err != nil {\n\t\tlog.Fatalf(\"failed creating schema resources: %v\", err)\n\t}\n\t// Start listen to incoming requests.\n\tif err := http.ListenAndServe(\":8080\", elk.NewHandler(c, zap.NewExample())); err != nil {\n\t\tlog.Fatal(err)\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Pet Entity Schema with Relationships\nDESCRIPTION: Schema definition for the Pet entity including a name field and edges to represent relationships with other pets (friends) and users (owner). Uses Ent's schema definitions to establish graph connections.\nSOURCE: https://github.com/ent/ent/blob/master/doc/md/traversals.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\n// Pet holds the schema definition for the Pet entity.\ntype Pet struct {\n\tent.Schema\n}\n\n// Fields of the Pet.\nfunc (Pet) Fields() []ent.Field {\n\treturn []ent.Field{\n\t\tfield.String(\"name\"),\n\t}\n}\n\n// Edges of the Pet.\nfunc (Pet) Edges() []ent.Edge {\n\treturn []ent.Edge{\n\t\tedge.To(\"friends\", Pet.Type),\n\t\tedge.From(\"owner\", User.Type).\n\t\t\tRef(\"pets\").\n\t\t\tUnique(),\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Mixin Interface in Go for Ent Schema\nDESCRIPTION: This snippet shows the definition of the Mixin interface in Ent. It includes methods for adding fields, edges, indexes, hooks, policies, and annotations to a schema.\nSOURCE: https://github.com/ent/ent/blob/master/doc/md/schema-mixin.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\ntype Mixin interface {\n\t// Fields returns a slice of fields to add to the schema.\n\tFields() []Field\n\t// Edges returns a slice of edges to add to the schema.\n\tEdges() []Edge\n\t// Indexes returns a slice of indexes to add to the schema.\n\tIndexes() []Index\n\t// Hooks returns a slice of hooks to add to the schema.\n\t// Note that mixin hooks are executed before schema hooks.\n\tHooks() []Hook\n\t// Policy returns a privacy policy to add to the schema.\n\t// Note that mixin policy are executed before schema policy.\n\tPolicy() Policy\n\t// Annotations returns a list of schema annotations to add\n\t// to the schema annotations.\n\tAnnotations() []schema.Annotation\n}\n```\n\n----------------------------------------\n\nTITLE: Mapping GraphQL Filter to Ent Query in Go\nDESCRIPTION: Corresponding Ent query in Go that matches the GraphQL filter input. It filters todos that have a parent and children with IN_PROGRESS status.\nSOURCE: https://github.com/ent/ent/blob/master/doc/md/tutorial-todo-gql-filter-input.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nclient.Todo.\n    Query().\n    Where(\n        todo.HasParent(),\n        todo.HasChildrenWith(\n            todo.StatusEQ(todo.StatusInProgress),\n        ),\n    ).\n    All(ctx)\n```\n\n----------------------------------------\n\nTITLE: Defining Ent Schema for User Entity\nDESCRIPTION: Defines fields and edges for the User entity in the Ent schema.\nSOURCE: https://github.com/ent/ent/blob/master/doc/website/blog/2023-02-23-simple-cms-with-ent.mdx#2025-04-22_snippet_4\n\nLANGUAGE: go\nCODE:\n```\n// Fields of the User.  \nfunc (User) Fields() []ent.Field {  \n   return []ent.Field{  \n      field.String(\"name\"),  \n      field.String(\"email\").\n            Unique(),  \n      field.Time(\"created_at\").\n            Default(time.Now),  \n   }  \n}  \n  \n// Edges of the User.  \nfunc (User) Edges() []ent.Edge {  \n   return []ent.Edge{  \n      edge.To(\"posts\", Post.Type),  \n   }  \n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Privacy Feature in Ent using Go Code\nDESCRIPTION: This code demonstrates how to enable the privacy feature in Ent schema generation using Go code instead of CLI options.\nSOURCE: https://github.com/ent/ent/blob/master/doc/md/privacy.mdx#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\n// +build ignore\n\npackage main\n\n\nimport (\n    \"log\"\n\n    \"entgo.io/ent/entc\"\n    \"entgo.io/ent/entc/gen\"\n)\n\nfunc main() {\n\topts := []entc.Option{\n        entc.FeatureNames(\"privacy\"),\n\t}\n    if err := entc.Generate(\"./schema\", &gen.Config{}, opts...); err != nil {\n\t\tlog.Fatalf(\"running ent codegen: %v\", err)\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Related Data with Ent Graph Traversal in Go\nDESCRIPTION: Demonstrates two equivalent ways to query users belonging to groups about dogs using Ent's graph traversal capabilities. Shows both forward traversal from topics to users and reverse filtering from users through relationships.\nSOURCE: https://github.com/ent/ent/blob/master/doc/website/blog/2023-02-23-simple-cms-with-ent.mdx#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\n// Start traversing from the topic.\nclient.Topic.Query().\n    Where(topic.Name(\"dogs\")).\n    QueryGroups().\n    QueryUsers().\n    All(ctx)\n\n// OR: Start traversing from the users and filter.\nclient.User.Query().\n    Where(\t\t\n        user.HasGroupsWith(  \n            group.HasTopicsWith(  \n                topic.Name(\"dogs\"),  \n            ),  \n        ),\n    ).\n    All(ctx)\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Ent Code Generation with entc Package\nDESCRIPTION: Example of using the entc package programmatically to run Ent code generation with custom configuration. This approach allows for more control over the generation process.\nSOURCE: https://github.com/ent/ent/blob/master/doc/md/code-gen.md#2025-04-22_snippet_4\n\nLANGUAGE: go\nCODE:\n```\n// +build ignore\n\npackage main\n\nimport (\n\t\"log\"\n\n\t\"entgo.io/ent/entc\"\n\t\"entgo.io/ent/entc/gen\"\n\t\"entgo.io/ent/schema/field\"\n)\n\nfunc main() {\n\tif err := entc.Generate(\"./schema\", &gen.Config{}); err != nil {\n\t\tlog.Fatal(\"running ent codegen:\", err)\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Using Built-in Time Mixin in Ent Schema\nDESCRIPTION: This snippet demonstrates how to use the built-in Time mixin provided by the Ent framework to add create_time and update_time fields to a schema.\nSOURCE: https://github.com/ent/ent/blob/master/doc/md/schema-mixin.md#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\npackage schema\n\nimport (\n\t\"entgo.io/ent\"\n\t\"entgo.io/ent/schema/mixin\"\n)\n\ntype Pet struct {\n\tent.Schema\n}\n\nfunc (Pet) Mixin() []ent.Mixin {\n\treturn []ent.Mixin{\n\t\tmixin.Time{},\n\t\t// Or, mixin.CreateTime only for create_time\n\t\t// and mixin.UpdateTime only for update_time.\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: GraphQL Query with Edge Filters\nDESCRIPTION: Example of a GraphQL query using edge (relation) predicates to filter todos.\nSOURCE: https://github.com/ent/ent/blob/master/doc/md/tutorial-todo-gql-filter-input.md#2025-04-22_snippet_10\n\nLANGUAGE: graphql\nCODE:\n```\n{\n  hasParent: true,\n  hasChildrenWith: {\n    status: IN_PROGRESS,\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating and querying a User with Ent and TiDB\nDESCRIPTION: This Go code demonstrates creating a new User record in TiDB using Ent, then querying and printing the user's information.\nSOURCE: https://github.com/ent/ent/blob/master/doc/website/blog/2022-03-17-announcing-preview-support-for-tidb.md#2025-04-22_snippet_4\n\nLANGUAGE: go\nCODE:\n```\nclient.User.Create().\n\tSetAge(30).\n\tSetName(\"hedwigz\").\n\tSaveX(context.Background())\nuser := client.User.Query().FirstX(context.Background())\nfmt.Printf(\"the user: %s is %d years old\\n\", user.Name, user.Age)\n```\n\n----------------------------------------\n\nTITLE: Ordering by Edge Count in Ent Go\nDESCRIPTION: Demonstrates how to sort entities based on the number of related entities they have through edges.\nSOURCE: https://github.com/ent/ent/blob/master/doc/md/paging.mdx#2025-04-22_snippet_4\n\nLANGUAGE: go\nCODE:\n```\nusers, err := client.User.Query().\n\tOrder(\n\t\t// highlight-start\n\t\t// Users without posts are sorted first.\n\t\tuser.ByPostsCount(),\n\t\t// highlight-end\n\t).\n\tAll(ctx)\n\nusers, err := client.User.Query().\n\tOrder(\n\t\t// highlight-start\n\t\t// Users without posts are sorted last.\n\t\tuser.ByPostsCount(\n\t\t\tsql.OrderDesc(),\n\t\t),\n\t\t// highlight-end\n\t).\n\tAll(ctx)\n```\n\n----------------------------------------\n\nTITLE: Defining Ent Schema for Chunk Entity\nDESCRIPTION: Go code defining the Ent schema for the Chunk entity. It specifies fields for path, chunk number, and data, as well as an edge to the Embedding entity.\nSOURCE: https://github.com/ent/ent/blob/master/doc/website/blog/2025-02-12-rag-with-ent-atlas-pgvector.mdx#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\npackage schema\n\nimport (\n\t\"entgo.io/ent\"\n\t\"entgo.io/ent/schema/edge\"\n\t\"entgo.io/ent/schema/field\"\n)\n\n// Chunk holds the schema definition for the Chunk entity.\ntype Chunk struct {\n\tent.Schema\n}\n\n// Fields of the Chunk.\nfunc (Chunk) Fields() []ent.Field {\n\treturn []ent.Field{\n\t\tfield.String(\"path\"),\n\t\tfield.Int(\"nchunk\"),\n\t\tfield.Text(\"data\"),\n\t}\n}\n\n// Edges of the Chunk.\nfunc (Chunk) Edges() []ent.Edge {\n\treturn []ent.Edge{\n\t\tedge.To(\"embedding\", Embedding.Type).StorageKey(edge.Column(\"chunk_id\")).Unique(),\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Enforcing Tenant Privacy Rules in Ent Framework\nDESCRIPTION: This example demonstrates how privacy rules in Ent can prevent operations across mismatched tenant contexts. It shows a failing update operation when attempting to modify a group owned by a different tenant, and a successful operation when using the correct tenant context.\nSOURCE: https://github.com/ent/ent/blob/master/doc/md/privacy.mdx#2025-04-22_snippet_18\n\nLANGUAGE: Go\nCODE:\n```\nfunc Example_DenyMismatchedView(ctx context.Context, client *ent.Client) {\n\t// Continuation of the code above.\n\t\n\t// Expect operation to fail, because the FilterTenantRule rule makes sure\n\t// that tenants can update and delete only their groups.\n\tif err := entgo.Update().SetName(\"fail.go\").Exec(labView); !ent.IsNotFound(err) {\n\t\tlog.Fatal(\"expect operation to fail, since the group (entgo) is managed by a different tenant (hub), but got:\", err)\n\t}\n\n\t// Operation should pass in case it was applied with the right viewer-context.\n\tentgo = entgo.Update().SetName(\"entgo\").SaveX(hubView)\n\tfmt.Println(entgo)\n\n\t// Output:\n\t// Group(id=1, tenant_id=1, name=entgo)\n}\n```\n\n----------------------------------------\n\nTITLE: Sharing Hooks Between Multiple Entity Types\nDESCRIPTION: Demonstrates two approaches to share a hook between multiple entity types: using type assertion or using the generic Mutation interface.\nSOURCE: https://github.com/ent/ent/blob/master/doc/md/hooks.md#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\n// Option 1: use type assertion.\nclient.Use(func(next ent.Mutator) ent.Mutator {\n    type NameSetter interface {\n        SetName(value string)\n    }\n    return ent.MutateFunc(func(ctx context.Context, m ent.Mutation) (ent.Value, error) {\n        // A schema with a \"name\" field must implement the NameSetter interface. \n        if ns, ok := m.(NameSetter); ok {\n            ns.SetName(\"Ariel Mashraki\")\n        }\n        return next.Mutate(ctx, m)\n    })\n})\n\n// Option 2: use the generic ent.Mutation interface.\nclient.Use(func(next ent.Mutator) ent.Mutator {\n\treturn ent.MutateFunc(func(ctx context.Context, m ent.Mutation) (ent.Value, error) {\n        if err := m.SetField(\"name\", \"Ariel Mashraki\"); err != nil {\n            // An error is returned, if the field is not defined in\n\t\t\t// the schema, or if the type mismatch the field type.\n        }\n        return next.Mutate(ctx, m)\n    })\n})\n```\n\n----------------------------------------\n\nTITLE: Generated SQL Migration for Composite Schema\nDESCRIPTION: The generated SQL migration file that creates the user_audit_logs and users tables, defines the audit_users_changes function, and creates the three triggers for audit logging.\nSOURCE: https://github.com/ent/ent/blob/master/doc/md/migration/trigger.mdx#2025-04-22_snippet_6\n\nLANGUAGE: sql\nCODE:\n```\n-- Create \"user_audit_logs\" table\nCREATE TABLE \"user_audit_logs\" (\"id\" bigint NOT NULL GENERATED BY DEFAULT AS IDENTITY, \"operation_type\" character varying NOT NULL, \"operation_time\" character varying NOT NULL, \"old_value\" character varying NULL, \"new_value\" character varying NULL, PRIMARY KEY (\"id\"));\n-- Create \"users\" table\nCREATE TABLE \"users\" (\"id\" bigint NOT NULL GENERATED BY DEFAULT AS IDENTITY, \"name\" character varying NOT NULL, PRIMARY KEY (\"id\"));\n-- Create \"audit_users_changes\" function\nCREATE FUNCTION \"audit_users_changes\" () RETURNS trigger LANGUAGE plpgsql AS $$\nBEGIN\n    IF (TG_OP = 'INSERT') THEN\n        INSERT INTO user_audit_logs(operation_type, operation_time, new_value)\n        VALUES (TG_OP, CURRENT_TIMESTAMP, row_to_json(NEW));\n        RETURN NEW;\n    ELSIF (TG_OP = 'UPDATE') THEN\n        INSERT INTO user_audit_logs(operation_type, operation_time, old_value, new_value)\n        VALUES (TG_OP, CURRENT_TIMESTAMP, row_to_json(OLD), row_to_json(NEW));\n        RETURN NEW;\n    ELSIF (TG_OP = 'DELETE') THEN\n        INSERT INTO user_audit_logs(operation_type, operation_time, old_value)\n        VALUES (TG_OP, CURRENT_TIMESTAMP, row_to_json(OLD));\n        RETURN OLD;\n    END IF;\n    RETURN NULL;\nEND;\n$$;\n-- Create trigger \"users_delete_audit\"\nCREATE TRIGGER \"users_delete_audit\" AFTER DELETE ON \"users\" FOR EACH ROW EXECUTE FUNCTION \"audit_users_changes\"();\n-- Create trigger \"users_insert_audit\"\nCREATE TRIGGER \"users_insert_audit\" AFTER INSERT ON \"users\" FOR EACH ROW EXECUTE FUNCTION \"audit_users_changes\"();\n-- Create trigger \"users_update_audit\"\nCREATE TRIGGER \"users_update_audit\" AFTER UPDATE ON \"users\" FOR EACH ROW EXECUTE FUNCTION \"audit_users_changes\"();\n```\n\n----------------------------------------\n\nTITLE: Generating Initial Entity Schemas with Ent CLI\nDESCRIPTION: Command to generate three entity schemas (Pet, User, Group) using Ent's CLI tool. This establishes the foundation for building the graph structure.\nSOURCE: https://github.com/ent/ent/blob/master/doc/md/traversals.md#2025-04-22_snippet_0\n\nLANGUAGE: console\nCODE:\n```\ngo run -mod=mod entgo.io/ent/cmd/ent new Pet User Group\n```\n\n----------------------------------------\n\nTITLE: Creating Todo Items with GraphQL Mutation\nDESCRIPTION: GraphQL mutation to create todo items, including variables and example output.\nSOURCE: https://github.com/ent/ent/blob/master/doc/md/tutorial-todo-gql-node.md#2025-04-22_snippet_5\n\nLANGUAGE: graphql\nCODE:\n```\nmutation CreateTodo($input: CreateTodoInput!) {\n    createTodo(input: $input) {\n        id\n        text\n        createdAt\n        priority\n        parent {\n            id\n        }\n    }\n}\n\n# Query Variables: { \"input\": { \"text\":\"Create GraphQL Example\", \"status\": \"IN_PROGRESS\", \"priority\": 1 } }\n# Output: { \"data\": { \"createTodo\": { \"id\": \"2\", \"text\": \"Create GraphQL Example\", \"createdAt\": \"2021-03-10T15:02:18+02:00\", \"priority\": 1, \"parent\": null } } }\n```\n\n----------------------------------------\n\nTITLE: Generating Ent Assets\nDESCRIPTION: Runs the Ent code generation tool to create Go code for interacting with the Todo entity.\nSOURCE: https://github.com/ent/ent/blob/master/doc/md/tutorial-setup.md#2025-04-22_snippet_3\n\nLANGUAGE: console\nCODE:\n```\ngo generate ./ent\n```\n\n----------------------------------------\n\nTITLE: Updating Pet Schema with Edge-field Support (Go)\nDESCRIPTION: This snippet shows how to modify the Pet schema to include edge-field support, explicitly defining the foreign key field and mapping it to the edge.\nSOURCE: https://github.com/ent/ent/blob/master/doc/website/blog/2021-03-12-announcing-edge-field-support.md#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\n// pet.go\n// Fields of the Pet.\nfunc (Pet) Fields() []ent.Field {\n\treturn []ent.Field{\n\t\tfield.String(\"name\").\n\t\t\tNotEmpty(),\n\t\tfield.Int(\"owner_id\"), // <-- explicitly add the field we want to contain the FK\n\t}\n}\n\n// Edges of the Pet.\nfunc (Pet) Edges() []ent.Edge {\n\treturn []ent.Edge{\n\t\tedge.To(\"owner\", User.Type).\n\t\t\tField(\"owner_id\"). // <-- tell ent which field holds the reference to the owner\n\t\t\tUnique().\n\t\t\tRequired(),\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Defining O2O Relationship in User Schema (User to Card)\nDESCRIPTION: This code snippet shows how to define a one-to-one relationship from User to Card entities using edge.To with the Unique method. It establishes that a User can have only one card.\nSOURCE: https://github.com/ent/ent/blob/master/doc/md/schema-edges.mdx#2025-04-22_snippet_4\n\nLANGUAGE: go\nCODE:\n```\n// Edges of the user.\nfunc (User) Edges() []ent.Edge {\n\treturn []ent.Edge{\n\t\tedge.To(\"card\", Card.Type).\n\t\t\tUnique(),\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Ent Edges for GraphQL in Go\nDESCRIPTION: This Go code snippet demonstrates how to configure Ent edges for GraphQL using annotations.\nSOURCE: https://github.com/ent/ent/blob/master/doc/md/graphql.md#2025-04-22_snippet_8\n\nLANGUAGE: go\nCODE:\n```\nfunc (Todo) Edges() []ent.Edge {\n    return []ent.Edge{\n        edge.To(\"children\", Todo.Type).\n            Annotations(entgql.Bind()).\n            From(\"parent\").\n            Annotations(entgql.Bind()).\n            Unique(),\n        edge.From(\"owner\", User.Type).\n            Ref(\"tasks\").\n            Annotations(entgql.MapsTo(\"taskOwner\")),\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Interacting with O2M Same Type Relationship in Go using Ent\nDESCRIPTION: Shows how to create and query a tree structure using a recursive O2M relationship with the Ent client in Go.\nSOURCE: https://github.com/ent/ent/blob/master/examples/README.md#2025-04-22_snippet_12\n\nLANGUAGE: go\nCODE:\n```\nfunc Do(ctx context.Context, client *ent.Client) error {\n\troot, err := client.Node.\n\t\tCreate().\n\t\tSetValue(2).\n\t\tSave(ctx)\n\tif err != nil {\n\t\treturn fmt.Errorf(\"creating the root: %w\", err)\n\t}\n\t// Add additional nodes to the tree:\n\t//\n\t//       2\n\t//     /   \\\n\t//    1     4\n\t//        /   \\\n\t//       3     5\n\t//\n\t// Unlike `Save`, `SaveX` panics if an error occurs.\n\tn1 := client.Node.\n\t\tCreate().\n\t\tSetValue(1).\n\t\tSetParent(root).\n\t\tSaveX(ctx)\n\tn4 := client.Node.\n\t\tCreate().\n\t\tSetValue(4).\n\t\tSetParent(root).\n\t\tSaveX(ctx)\n\tn3 := client.Node.\n\t\tCreate().\n\t\tSetValue(3).\n\t\tSetParent(n4).\n\t\tSaveX(ctx)\n\tn5 := client.Node.\n\t\tCreate().\n\t\tSetValue(5).\n\t\tSetParent(n4).\n\t\tSaveX(ctx)\n\n\tfmt.Println(\"Tree leafs\", []int{n1.Value, n3.Value, n5.Value})\n\t// Output: Tree leafs [1 3 5]\n\n\t// Get all leafs (nodes without children).\n\t// Unlike `Int`, `IntX` panics if an error occurs.\n\tints := client.Node.\n\t\tQuery().                             // All nodes.\n\t\tWhere(node.Not(node.HasChildren())). // Only leafs.\n\t\tOrder(ent.Asc(node.FieldValue)).     // Order by their `value` field.\n\t\tGroupBy(node.FieldValue).            // Extract only the `value` field.\n\t\tIntsX(ctx)\n\tfmt.Println(ints)\n\t// Output: [1 3 5]\n\n\t// Get orphan nodes (nodes without parent).\n\t// Unlike `Only`, `OnlyX` panics if an error occurs.\n\torphan := client.Node.\n\t\tQuery().\n\t\tWhere(node.Not(node.HasParent())).\n\t\tOnlyX(ctx)\n\tfmt.Println(orphan)\n\t// Output: Node(id=1, value=2)\n\n\treturn nil\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Ent for GraphQL Filter Generation\nDESCRIPTION: Configuration of Ent's entc.go file to enable GraphQL filter generation. It sets up options for schema generation, where inputs, and schema paths.\nSOURCE: https://github.com/ent/ent/blob/master/doc/md/tutorial-todo-gql-filter-input.md#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nfunc main() {\n\tex, err := entgql.NewExtension(\n\t\tentgql.WithSchemaGenerator(),\n\t\tentgql.WithWhereInputs(true),\n\t\tentgql.WithConfigPath(\"gqlgen.yml\"),\n\t\tentgql.WithSchemaPath(\"ent.graphql\"),\n\t)\n\tif err != nil {\n\t\tlog.Fatalf(\"creating entgql extension: %v\", err)\n\t}\n\topts := []entc.Option{\n\t\tentc.Extensions(ex),\n\t\tentc.TemplateDir(\"./template\"),\n\t}\n\tif err := entc.Generate(\"./schema\", &gen.Config{}, opts...); err != nil {\n\t\tlog.Fatalf(\"running ent codegen: %v\", err)\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Vector Similarity Search Implementation\nDESCRIPTION: Code snippet showing how to perform vector similarity search using pgvector to find relevant document chunks based on the question embedding.\nSOURCE: https://github.com/ent/ent/blob/master/doc/website/blog/2025-02-12-rag-with-ent-atlas-pgvector.mdx#2025-04-22_snippet_22\n\nLANGUAGE: go\nCODE:\n```\nemb := getEmbedding(question)\nembVec := pgvector.NewVector(emb)\nembs := client.Embedding.\n    Query().\n    Order(func(s *sql.Selector) {\n        s.OrderExpr(sql.ExprP(\"embedding <-> $1\", embVec))\n    }).\n    WithChunk().\n    Limit(5).\n    AllX(context.Background())\n```\n\n----------------------------------------\n\nTITLE: Implementing Diff Hook for Column Renaming in Ent (Go)\nDESCRIPTION: This snippet demonstrates how to create a Diff hook in Ent to handle column renaming. It replaces DropColumn and AddColumn changes with a RenameColumn change for the 'users' table.\nSOURCE: https://github.com/ent/ent/blob/master/doc/md/migrate.md#2025-04-22_snippet_9\n\nLANGUAGE: go\nCODE:\n```\nfunc main() {\n    client, err := ent.Open(\"mysql\", \"root:pass@tcp(localhost:3306)/test\")\n    if err != nil {\n        log.Fatalf(\"failed connecting to mysql: %v\", err)\n    }\n    defer client.Close()\n    // ...\n    if err := client.Schema.Create(ctx, schema.WithDiffHook(renameColumnHook)); err != nil {\n        log.Fatalf(\"failed creating schema resources: %v\", err)\n    }\n}\n\nfunc renameColumnHook(next schema.Differ) schema.Differ {\n    return schema.DiffFunc(func(current, desired *atlas.Schema) ([]atlas.Change, error) {\n        changes, err := next.Diff(current, desired)\n        if err != nil {\n            return nil, err\n        }\n        for _, c := range changes {\n            m, ok := c.(*atlas.ModifyTable)\n            // Skip if the change is not a ModifyTable,\n            // or if the table is not the \"users\" table.\n            if !ok || m.T.Name != user.Table {\n                continue\n            }\n            changes := atlas.Changes(m.Changes)\n            switch i, j := changes.IndexDropColumn(\"old_name\"), changes.IndexAddColumn(\"new_name\"); {\n            case i != -1 && j != -1:\n                // Append a new renaming change.\n                changes = append(changes, &atlas.RenameColumn{\n                    From: changes[i].(*atlas.DropColumn).C,\n                    To: changes[j].(*atlas.AddColumn).C,\n                })\n                // Remove the drop and add changes.\n                changes.RemoveIndex(i, j)\n                m.Changes = changes\n            case i != -1 || j != -1:\n                return nil, errors.New(\"old_name and new_name must be present or absent\")\n            }\n        }\n        return changes, nil\n    })\n}\n```\n\n----------------------------------------\n\nTITLE: Using Hook Helpers for Conditional Execution\nDESCRIPTION: Demonstrates how to use hook helper functions to control when hooks are executed based on operations and field changes.\nSOURCE: https://github.com/ent/ent/blob/master/doc/md/hooks.md#2025-04-22_snippet_5\n\nLANGUAGE: go\nCODE:\n```\npackage schema\n\nimport (\n\t\"context\"\n\t\"fmt\"\n\n\t\"<project>/ent/hook\"\n\n\t\"entgo.io/ent\"\n\t\"entgo.io/ent/schema/mixin\"\n)\n\n\ntype SomeMixin struct {\n\tmixin.Schema\n}\n\nfunc (SomeMixin) Hooks() []ent.Hook {\n    return []ent.Hook{\n        // Execute \"HookA\" only for the UpdateOne and DeleteOne operations.\n        hook.On(HookA(), ent.OpUpdateOne|ent.OpDeleteOne),\n\n        // Don't execute \"HookB\" on Create operation.\n        hook.Unless(HookB(), ent.OpCreate),\n\n        // Execute \"HookC\" only if the ent.Mutation is changing the \"status\" field,\n        // and clearing the \"dirty\" field.\n        hook.If(HookC(), hook.And(hook.HasFields(\"status\"), hook.HasClearedFields(\"dirty\"))),\n\n        // Disallow changing the \"password\" field on Update (many) operation.\n        hook.If(\n            hook.FixedError(errors.New(\"password cannot be edited on update many\")),\n            hook.And(\n                hook.HasOp(ent.OpUpdate),\n                hook.Or(\n                \thook.HasFields(\"password\"),\n                \thook.HasClearedFields(\"password\"),\n                ),\n            ),\n        ),\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Transaction Isolation Level (Go)\nDESCRIPTION: Example of implementing a custom TxOpener to set a specific isolation level for transactions.\nSOURCE: https://github.com/ent/ent/blob/master/doc/md/tutorial-todo-gql-tx-mutation.md#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nsrv.Use(entgql.Transactioner{\n\tTxOpener: entgql.TxOpenerFunc(func(ctx context.Context) (context.Context, driver.Tx, error) {\n\t\ttx, err := client.BeginTx(ctx, &sql.TxOptions{Isolation: sql.LevelRepeatableRead})\n\t\tif err != nil {\n\t\t\treturn nil, nil, err\n\t\t}\n\t\tctx = ent.NewTxContext(ctx, tx)\n\t\tctx = ent.NewContext(ctx, tx.Client())\n\t\treturn ctx, tx, nil\n\t}),\n})\n```\n\n----------------------------------------\n\nTITLE: Retrieving Pet with Owner ID Using Eager Loading (Go)\nDESCRIPTION: This code snippet shows how to retrieve a Pet entity with its Owner's ID using eager loading in Ent before the introduction of edge-field support. It demonstrates the verbose and inefficient approach.\nSOURCE: https://github.com/ent/ent/blob/master/doc/website/blog/2021-03-12-announcing-edge-field-support.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nfunc Test(t *testing.T) {\n    ctx := context.Background()\n\tc := enttest.Open(t, dialect.SQLite, \"file:ent?mode=memory&cache=shared&_fk=1\")\n\tdefer c.Close()\n\t\n\t// Create the User\n\tu := c.User.Create().\n\t\tSetUserName(\"rotem\").\n\t\tSaveX(ctx)\n\n\t// Create the Pet\n\tp := c.Pet.\n\t\tCreate().\n\t\tSetOwner(u). // Associate with the user\n\t\tSetName(\"donut\").\n\t\tSaveX(ctx)\n\n\tpetWithOwnerId := c.Pet.Query().\n\t\tWhere(pet.ID(p.ID)).\n\t\tWithOwner(func(query *ent.UserQuery) {\n\t\t\tquery.Select(user.FieldID)\n\t\t}).\n\t\tOnlyX(ctx)\n\tfmt.Println(petWithOwnerId.Edges.Owner.ID)\n\t// Output: 1\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Hooks to an Extension in Go\nDESCRIPTION: Implementation of the Hooks method and a custom hook that enforces a schema validation rule.\nSOURCE: https://github.com/ent/ent/blob/master/doc/md/extension.md#2025-04-22_snippet_8\n\nLANGUAGE: go\nCODE:\n```\nfunc (s *GreetExtension) Hooks() []gen.Hook {\n    return []gen.Hook{\n        DisallowTypeName(\"Shalom\"),\n    }\n}\n\n// DisallowTypeName ensures there is no ent.Schema with the given name in the graph.\nfunc DisallowTypeName(name string) gen.Hook {\n\treturn func(next gen.Generator) gen.Generator {\n\t\treturn gen.GenerateFunc(func(g *gen.Graph) error {\n\t\t\tfor _, node := range g.Nodes {\n\t\t\t\tif node.Name == name {\n\t\t\t\t\treturn fmt.Errorf(\"entc: validation failed, type named %q not allowed\", name)\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn next.Generate(g)\n\t\t})\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Basic Privacy Policy in Ent Schema\nDESCRIPTION: This snippet shows a basic implementation of a privacy policy in an Ent schema, allowing all queries but denying all mutations by default.\nSOURCE: https://github.com/ent/ent/blob/master/doc/md/privacy.mdx#2025-04-22_snippet_4\n\nLANGUAGE: go\nCODE:\n```\npackage schema\n\nimport (\n\t\"entgo.io/ent\"\n\t\"entgo.io/ent/examples/privacyadmin/ent/privacy\"\n)\n\n// User holds the schema definition for the User entity.\ntype User struct {\n\tent.Schema\n}\n\n// Policy defines the privacy policy of the User.\nfunc (User) Policy() ent.Policy {\n\treturn privacy.Policy{\n\t\tMutation: privacy.MutationPolicy{\n            // Deny if not set otherwise. \n\t\t\tprivacy.AlwaysDenyRule(),\n\t\t},\n\t\tQuery: privacy.QueryPolicy{\n            // Allow any viewer to read anything.\n\t\t\tprivacy.AlwaysAllowRule(),\n\t\t},\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Connecting Ent to TiDB and running migrations\nDESCRIPTION: This Go code establishes a connection to TiDB using the MySQL dialect and runs schema migrations using Atlas.\nSOURCE: https://github.com/ent/ent/blob/master/doc/website/blog/2022-03-17-announcing-preview-support-for-tidb.md#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nclient, err := ent.Open(\"mysql\", \"root@tcp(localhost:4000)/test?parseTime=true\")\nif err != nil {\n\tlog.Fatalf(\"failed opening connection to tidb: %v\", err)\n}\ndefer client.Close()\n// Run the auto migration tool, with Atlas.\nif err := client.Schema.Create(context.Background(), schema.WithAtlas(true)); err != nil {\n\tlog.Fatalf(\"failed printing schema changes: %v\", err)\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Privacy Rules in Go\nDESCRIPTION: This code defines two custom privacy rules: DenyIfNoViewer and AllowIfAdmin. These rules check for the presence of a viewer and admin status respectively.\nSOURCE: https://github.com/ent/ent/blob/master/doc/md/privacy.mdx#2025-04-22_snippet_5\n\nLANGUAGE: go\nCODE:\n```\npackage rule\n\nimport (\n\t\"context\"\n\n\t\"entgo.io/ent/examples/privacyadmin/ent/privacy\"\n\t\"entgo.io/ent/examples/privacyadmin/viewer\"\n)\n\n// DenyIfNoViewer is a rule that returns Deny decision if the viewer is\n// missing in the context.\nfunc DenyIfNoViewer() privacy.QueryMutationRule {\n\treturn privacy.ContextQueryMutationRule(func(ctx context.Context) error {\n\t\tview := viewer.FromContext(ctx)\n\t\tif view == nil {\n\t\t\treturn privacy.Denyf(\"viewer-context is missing\")\n\t\t}\n\t\t// Skip to the next privacy rule (equivalent to returning nil).\n\t\treturn privacy.Skip\n\t})\n}\n\n// AllowIfAdmin is a rule that returns Allow decision if the viewer is admin.\nfunc AllowIfAdmin() privacy.QueryMutationRule {\n\treturn privacy.ContextQueryMutationRule(func(ctx context.Context) error {\n\t\tview := viewer.FromContext(ctx)\n\t\tif view.Admin() {\n\t\t\treturn privacy.Allow\n\t\t}\n\t\t// Skip to the next privacy rule (equivalent to returning nil).\n\t\treturn privacy.Skip\n\t})\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Stringer Template in Ent\nDESCRIPTION: This template implements the GoString() method for all generated entity types. It loops over all nodes in the graph and generates a GoString method for each one.\nSOURCE: https://github.com/ent/ent/blob/master/doc/md/templates.md#2025-04-22_snippet_0\n\nLANGUAGE: gotemplate\nCODE:\n```\n{{/* The line below tells Intellij/GoLand to enable the autocompletion based on the *gen.Graph type. */}}\n{{/* gotype: entgo.io/ent/entc/gen.Graph */}}\n\n{{ define \"stringer\" }}\n\n{{/* Add the base header for the generated file */}}\n{{ $pkg := base $.Config.Package }}\n{{ template \"header\" $ }}\n\n{{/* Loop over all nodes and implement the \"GoStringer\" interface */}}\n{{ range $n := $.Nodes }}\n\t{{ $receiver := $n.Receiver }}\n\tfunc ({{ $receiver }} *{{ $n.Name }}) GoString() string {\n\t\tif {{ $receiver }} == nil {\n\t\t\treturn fmt.Sprintf(\"{{ $n.Name }}(nil)\")\n\t\t}\n\t\treturn {{ $receiver }}.String()\n\t}\n{{ end }}\n\n{{ end }}\n```\n\n----------------------------------------\n\nTITLE: Team B Migration SQL File Example\nDESCRIPTION: A SQL migration file created by Team B that tries to create the same 'users' table with a different team-specific column, showing how migration conflicts can arise.\nSOURCE: https://github.com/ent/ent/blob/master/doc/md/versioned-migrations.mdx#2025-04-22_snippet_14\n\nLANGUAGE: sql\nCODE:\n```\n-- create \"users\" table\nCREATE TABLE `users` (\n    `id` bigint NOT NULL AUTO_INCREMENT,\n    // highlight-start\n     `team_b_col` INTEGER NOT NULL,\n    // highlight-end\n     PRIMARY KEY (`id`)\n) CHARSET utf8mb4 COLLATE utf8mb4_bin;\n```\n\n----------------------------------------\n\nTITLE: Ordering by Edge Field in Ent Go\nDESCRIPTION: Shows how to sort entities based on values from their related entities through edges.\nSOURCE: https://github.com/ent/ent/blob/master/doc/md/paging.mdx#2025-04-22_snippet_5\n\nLANGUAGE: go\nCODE:\n```\n// Posts are sorted by their author's name in ascending\n// order with NULLs first unless otherwise specified.\nposts, err := client.Post.Query().\n\tOrder(\n\t\t// highlight-next-line\n\t\tpost.ByAuthorField(user.FieldName),\n\t).\n\tAll(ctx)\n\nposts, err := client.Post.Query().\n\tOrder(\n\t\t// highlight-start\n\t\tpost.ByAuthorField(\n\t\t\tuser.FieldName,\n\t\t\tsql.OrderDesc(),\n\t\t\tsql.OrderNullsFirst(),\n\t\t),\n\t\t// highlight-end\n\t).\n\tAll(ctx)\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Filter Resolver\nDESCRIPTION: Implementation of the custom isCompleted filter resolver in Go. It adds a predicate to filter completed or not completed todos based on the input.\nSOURCE: https://github.com/ent/ent/blob/master/doc/md/tutorial-todo-gql-filter-input.md#2025-04-22_snippet_13\n\nLANGUAGE: go\nCODE:\n```\nfunc (r *todoWhereInputResolver) IsCompleted(ctx context.Context, obj *ent.TodoWhereInput, data *bool) error {\n\tif obj == nil || data == nil {\n\t\treturn nil\n\t}\n\tif *data {\n\t\tobj.AddPredicates(todo.StatusEQ(todo.StatusCompleted))\n\t} else {\n\t\tobj.AddPredicates(todo.StatusNEQ(todo.StatusCompleted))\n\t}\n\treturn nil\n}\n```\n\n----------------------------------------\n\nTITLE: Interacting with M2M Same-Type Relationship in Ent (Go)\nDESCRIPTION: Shows how to create users and query their following/followers relationships using the Ent client. This example demonstrates creating users, adding followers, and traversing the graph.\nSOURCE: https://github.com/ent/ent/blob/master/examples/README.md#2025-04-22_snippet_16\n\nLANGUAGE: go\nCODE:\n```\nfunc Do(ctx context.Context, client *ent.Client) error {\n\t// Unlike `Save`, `SaveX` panics if an error occurs.\n\ta8m := client.User.\n\t\tCreate().\n\t\tSetAge(30).\n\t\tSetName(\"a8m\").\n\t\tSaveX(ctx)\n\tnati := client.User.\n\t\tCreate().\n\t\tSetAge(28).\n\t\tSetName(\"nati\").\n\t\tAddFollowers(a8m).\n\t\tSaveX(ctx)\n\n\t// Query following/followers:\n\n\tflw := a8m.QueryFollowing().AllX(ctx)\n\tfmt.Println(flw)\n\t// Output: [User(id=2, age=28, name=nati)]\n\n\tflr := a8m.QueryFollowers().AllX(ctx)\n\tfmt.Println(flr)\n\t// Output: []\n\n\tflw = nati.QueryFollowing().AllX(ctx)\n\tfmt.Println(flw)\n\t// Output: []\n\n\tflr = nati.QueryFollowers().AllX(ctx)\n\tfmt.Println(flr)\n\t// Output: [User(id=1, age=30, name=a8m)]\n\n\t// Traverse the graph:\n\n\tages := nati.\n\t\tQueryFollowers().       // [a8m]\n\t\tQueryFollowing().       // [nati]\n\t\tGroupBy(user.FieldAge). // [28]\n\t\tIntsX(ctx)\n\tfmt.Println(ages)\n\t// Output: [28]\n\n\tnames := client.User.\n\t\tQuery().\n\t\tWhere(user.Not(user.HasFollowers())).\n\t\tGroupBy(user.FieldName).\n\t\tStringsX(ctx)\n\tfmt.Println(names)\n\t// Output: [a8m]\n\treturn nil\n}\n```\n\n----------------------------------------\n\nTITLE: Migrating Existing Schema to Edge Fields (Go)\nDESCRIPTION: This snippet demonstrates how to migrate an existing Ent schema to use edge fields while maintaining compatibility with the existing database structure by explicitly setting the storage key.\nSOURCE: https://github.com/ent/ent/blob/master/doc/website/blog/2021-03-12-announcing-edge-field-support.md#2025-04-22_snippet_6\n\nLANGUAGE: go\nCODE:\n```\n// In schema/pet.go:\n\n// Fields of the Pet.\nfunc (Pet) Fields() []ent.Field {\n\treturn []ent.Field{\n\t\tfield.String(\"name\").\n\t\t\tNotEmpty(),\n\t\tfield.Int(\"owner_id\").\n\t\t\tStorageKey(\"pet_owner\"), // <-- explicitly set the column name\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Adding entproto.Field Annotations to Ent Schema Fields in Go\nDESCRIPTION: This code demonstrates how to add entproto.Field annotations to Ent schema fields, assigning unique field numbers for Protobuf message generation.\nSOURCE: https://github.com/ent/ent/blob/master/doc/md/tutorial-grpc-generating-proto.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nfunc (User) Fields() []ent.Field {\n\treturn []ent.Field{\n\t\tfield.String(\"name\").\n\t\t\tUnique().\n\t\t\tAnnotations(\n\t\t\t\tentproto.Field(2),\n\t\t\t),\n\t\tfield.String(\"email_address\").\n\t\t\tUnique().\n\t\t\tAnnotations(\n\t\t\t\tentproto.Field(3),\n\t\t\t),\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Defining User Entity Schema with Relationships\nDESCRIPTION: Schema definition for the User entity with age and name fields, plus edges connecting to pets, other users (friends), and groups. Establishes bidirectional relationships in the graph structure.\nSOURCE: https://github.com/ent/ent/blob/master/doc/md/traversals.md#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\n// User holds the schema definition for the User entity.\ntype User struct {\n\tent.Schema\n}\n\n// Fields of the User.\nfunc (User) Fields() []ent.Field {\n\treturn []ent.Field{\n\t\tfield.Int(\"age\"),\n\t\tfield.String(\"name\"),\n\t}\n}\n\n// Edges of the User.\nfunc (User) Edges() []ent.Edge {\n\treturn []ent.Edge{\n\t\tedge.To(\"pets\", Pet.Type),\n\t\tedge.To(\"friends\", User.Type),\n\t\tedge.From(\"groups\", Group.Type).\n\t\t\tRef(\"users\"),\n\t\tedge.From(\"manage\", Group.Type).\n\t\t\tRef(\"admin\"),\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Custom SQL Function with Predicate Builder in Ent (Go)\nDESCRIPTION: Example of using a custom SQL function (DATE) with the sql.P predicate builder in Ent queries.\nSOURCE: https://github.com/ent/ent/blob/master/doc/md/predicates.md#2025-04-22_snippet_12\n\nLANGUAGE: go\nCODE:\n```\nusers := client.User.Query().\n\tSelect(user.FieldID).\n\tWhere(func(s *sql.Selector) {\n\t\ts.Where(sql.P(func(b *sql.Builder) {\n\t\t\tb.WriteString(\"DATE(\").Ident(\"last_login_at\").WriteByte(')'). WriteOp(OpGTE).Arg(value)\n\t\t}))\n\t}).\n\tAllX(ctx)\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT `id` FROM `users` WHERE DATE(`last_login_at`) >= ?\n```\n\n----------------------------------------\n\nTITLE: Querying Dependent Todo Items\nDESCRIPTION: Example showing how to query Todo items that have parent dependencies\nSOURCE: https://github.com/ent/ent/blob/master/doc/md/tutorial-todo-crud.md#2025-04-22_snippet_6\n\nLANGUAGE: go\nCODE:\n```\nfunc Example_Todo() {\n\t// ...\n\n\t// Query all todo items that depend on other items.\n\titems, err := client.Todo.Query().Where(todo.HasParent()).All(ctx)\n\tif err != nil {\n\t\tlog.Fatalf(\"failed querying todos: %v\", err)\n\t}\n\tfor _, t := range items {\n\t\tfmt.Printf(\"%d: %q\\n\", t.ID, t.Text)\n\t}\n\t// Output:\n\t// 2: \"Add Tracing Example\"\n}\n```\n\n----------------------------------------\n\nTITLE: Adding GraphQL Annotations to Todo Schema\nDESCRIPTION: Go code snippet showing how to add GraphQL annotations to the Todo schema for enabling Query and Mutation capabilities.\nSOURCE: https://github.com/ent/ent/blob/master/doc/md/tutorial-todo-gql.mdx#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nfunc (Todo) Annotations() []schema.Annotation {\n\treturn []schema.Annotation{\n\t\tentgql.QueryField(),\n\t\tentgql.Mutations(entgql.MutationCreate()),\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Embedding Generation with OpenAI in Go\nDESCRIPTION: Implementation of the IndexCmd Run method to create embeddings for chunks using OpenAI API. It queries chunks without embeddings, generates embeddings using OpenAI, and saves them to the database.\nSOURCE: https://github.com/ent/ent/blob/master/doc/website/blog/2025-02-12-rag-with-ent-atlas-pgvector.mdx#2025-04-22_snippet_19\n\nLANGUAGE: go\nCODE:\n```\n// Run is the method called when the \"index\" command is executed.\nfunc (cmd *IndexCmd) Run(cli *CLI) error {\n\tclient, err := cli.entClient()\n\tif err != nil {\n\t\treturn fmt.Errorf(\"failed opening connection to postgres: %w\", err)\n\t}\n\tctx := context.Background()\n\tchunks := client.Chunk.Query().\n\t\tWhere(\n\t\t\tchunk.Not(\n\t\t\t\tchunk.HasEmbedding(),\n\t\t\t),\n\t\t).\n\t\tOrder(ent.Asc(chunk.FieldID)).\n\t\tAllX(ctx)\n\tfor _, ch := range chunks {\n\t\tlog.Println(\"Created embedding for chunk\", ch.Path, ch.Nchunk)\n\t\tembedding := getEmbedding(ch.Data)\n\t\t_, err := client.Embedding.Create().\n\t\t\tSetEmbedding(pgvector.NewVector(embedding)).\n\t\t\tSetChunk(ch).\n\t\t\tSave(ctx)\n\t\tif err != nil {\n\t\t\treturn fmt.Errorf(\"error creating embedding: %v\", err)\n\t\t}\n\t}\n\treturn nil\n}\n\n// getEmbedding invokes the OpenAI embedding API to calculate the embedding\n// for the given string. It returns the embedding.\nfunc getEmbedding(data string) []float32 {\n\tclient := openai.NewClient(os.Getenv(\"OPENAI_KEY\"))\n\tqueryReq := openai.EmbeddingRequest{\n\t\tInput: []string{data},\n\t\tModel: openai.AdaEmbeddingV2,\n\t}\n\tqueryResponse, err := client.CreateEmbeddings(context.Background(), queryReq)\n\tif err != nil {\n\t\tlog.Fatalf(\"Error getting embedding: %v\", err)\n\t}\n\treturn queryResponse.Data[0].Embedding\n}\n```\n\n----------------------------------------\n\nTITLE: Defining User schema in Ent\nDESCRIPTION: This Go code defines the User entity schema in Ent, specifying fields for created_at, name, and age.\nSOURCE: https://github.com/ent/ent/blob/master/doc/website/blog/2022-03-17-announcing-preview-support-for-tidb.md#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nfunc (User) Fields() []ent.Field {\n\treturn []ent.Field{\n\t\tfield.Time(\"created_at\").\n\t\t\tDefault(time.Now),\n\t\tfield.String(\"name\"),\n\t\tfield.Int(\"age\"),\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Defining User Schema with Tweets Authorship in Ent\nDESCRIPTION: Schema definition for the User entity with a relationship to authored tweets using an edge schema. This approach allows for potential future migration to many-to-many without data migration.\nSOURCE: https://github.com/ent/ent/blob/master/doc/md/schema-edges.mdx#2025-04-22_snippet_25\n\nLANGUAGE: go\nCODE:\n```\n// User holds the schema definition for the User entity.\ntype User struct {\n\tent.Schema\n}\n\n// Fields of the User.\nfunc (User) Fields() []ent.Field {\n\treturn []ent.Field{\n\t\tfield.String(\"name\").\n\t\t\tDefault(\"Unknown\"),\n\t}\n}\n\n// Edges of the User.\nfunc (User) Edges() []ent.Edge {\n\treturn []ent.Edge{\n\t\tedge.To(\"tweets\", Tweet.Type).\n\t\t\tThrough(\"user_tweets\", UserTweet.Type),\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Prometheus Counter Collector in Go\nDESCRIPTION: This snippet demonstrates how to create a Prometheus counter collector using the promauto package. It sets up a counter for tracking endpoint errors with dynamic labels for the endpoint and error code.\nSOURCE: https://github.com/ent/ent/blob/master/doc/website/blog/2021-08-12-building-observable-ent-application-with-prometheus.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\npackage example\n\nimport (\n\t\"github.com/prometheus/client_golang/prometheus\"\n\t\"github.com/prometheus/client_golang/prometheus/promauto\"\n)\n\nvar (\n\t// List of dynamic labels\n\tlabelNames = []string{\"endpoint\", \"error_code\"}\n\n\t// Create a counter collector\n\texampleCollector = promauto.NewCounterVec(\n\t\tprometheus.CounterOpts{\n\t\t\tName: \"endpoint_errors\",\n\t\t\tHelp: \"Number of errors in endpoints\",\n\t\t},\n\t\tlabelNames,\n\t)\n)\n\n// When using you set the values of the dynamic labels and then increment the counter\nfunc incrementError() {\n\texampleCollector.WithLabelValues(\"/create-user\", \"400\").Inc()\n}\n```\n\n----------------------------------------\n\nTITLE: Performing Multi-Edge Graph Traversal\nDESCRIPTION: Function demonstrating a complex graph traversal starting from a Group entity and following multiple edges to navigate to related entities. Shows how to chain query methods to traverse the graph.\nSOURCE: https://github.com/ent/ent/blob/master/doc/md/traversals.md#2025-04-22_snippet_5\n\nLANGUAGE: go\nCODE:\n```\nfunc Traverse(ctx context.Context, client *ent.Client) error {\n\towner, err := client.Group.\t\t\t// GroupClient.\n\t\tQuery().                     \t// Query builder.\n\t\tWhere(group.Name(\"Github\")). \t// Filter only Github group (only 1).\n\t\tQueryAdmin().                \t// Getting Dan.\n\t\tQueryFriends().              \t// Getting Dan's friends: [Ariel].\n\t\tQueryPets().                 \t// Their pets: [Pedro, Xabi].\n\t\tQueryFriends().              \t// Pedro's friends: [Coco], Xabi's friends: [].\n\t\tQueryOwner().                \t// Coco's owner: Alex.\n\t\tOnly(ctx)                    \t// Expect only one entity to return in the query.\n\tif err != nil {\n\t\treturn fmt.Errorf(\"failed querying the owner: %w\", err)\n\t}\n\tfmt.Println(owner)\n\t// Output:\n\t// User(id=3, age=37, name=Alex)\n\treturn nil\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Ent Code and OpenAPI Spec\nDESCRIPTION: Command to generate both Ent code and OpenAPI specification file.\nSOURCE: https://github.com/ent/ent/blob/master/doc/website/blog/2021-09-10-openapi-generator.md#2025-04-22_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\ngo generate ./...\n```\n\n----------------------------------------\n\nTITLE: Testing Optimistic Concurrency Control\nDESCRIPTION: Test case that verifies the optimistic locking mechanism by attempting concurrent updates on the same record. Demonstrates proper handling of concurrent access conflicts.\nSOURCE: https://github.com/ent/ent/blob/master/doc/website/blog/2021-07-22-database-locking-techniques-with-ent.md#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nfunc TestOCC(t *testing.T) {\n\tclient := enttest.Open(t, \"sqlite3\", \"file:ent?mode=memory&cache=shared&_fk=1\")\n\tctx := context.Background()\n\n\torig := client.User.Create().SetOnline(true).SaveX(ctx)\n\n\tuserCopy := client.User.GetX(ctx, orig.ID)\n\n\ttx, err := client.Tx(ctx)\n\tif err != nil {\n\t\tlog.Fatalf(\"failed creating transaction: %v\", err)\n\t}\n\n\tif err := optimisticUpdate(tx, userCopy, false); err != nil {\n\t\ttx.Rollback()\n\t\tlog.Fatal(\"unexpected failure:\", err)\n\t}\n\n\terr = optimisticUpdate(tx, orig, false)\n\tif err == nil {\n\t\tlog.Fatal(\"expected second update to fail\")\n\t}\n\tfmt.Println(err)\n}\n```\n\n----------------------------------------\n\nTITLE: Traversing Todo Relationships\nDESCRIPTION: Example showing how to traverse Todo relationships to query parent items through their children\nSOURCE: https://github.com/ent/ent/blob/master/doc/md/tutorial-todo-crud.md#2025-04-22_snippet_8\n\nLANGUAGE: go\nCODE:\n```\nfunc Example_Todo() {\n\t// ...\n\t\n\t// Get a parent item through its children and expect the\n\t// query to return exactly one item.\n\tparent, err := client.Todo.Query(). // Query all todos.\n\t\tWhere(todo.HasParent()).        // Filter only those with parents.\n\t\tQueryParent().                  // Continue traversals to the parents.\n\t\tOnly(ctx)                       // Expect exactly one item.\n\tif err != nil {\n\t\tlog.Fatalf(\"failed querying todos: %v\", err)\n\t}\n\tfmt.Printf(\"%d: %q\\n\", parent.ID, parent.Text)\n\t// Output:\n\t// 1: \"Add GraphQL Example\"\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Mixin Schema for Shared Configuration\nDESCRIPTION: Go code demonstrating how to create a Mixin schema to share the same schema configuration across multiple Ent schemas.\nSOURCE: https://github.com/ent/ent/blob/master/doc/md/multischema-migrations.mdx#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\n// Mixin holds the default configuration for most schemas in this package.\ntype Mixin struct {\n\tmixin.Schema\n}\n\n// Annotations of the Mixin.\nfunc (Mixin) Annotations() []schema.Annotation {\n\treturn []schema.Annotation{\n\t\tentsql.Schema(\"db1\"),\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Using Decision Context in Ent Privacy Rules\nDESCRIPTION: This snippet demonstrates how to use privacy.DecisionContext to bind a specific privacy decision to a context, bypassing other rules.\nSOURCE: https://github.com/ent/ent/blob/master/doc/md/privacy.mdx#2025-04-22_snippet_8\n\nLANGUAGE: go\nCODE:\n```\nfunc Do(ctx context.Context, client *ent.Client) error {\n\t// Bind a privacy decision to the context (bypass all other rules).\n\tallow := privacy.DecisionContext(ctx, privacy.Allow)\n\tif err := client.User.Create().Exec(allow); err != nil {\n\t\treturn fmt.Errorf(\"expect operation to pass, but got %w\", err)\n\t}\n    return nil\n}\n```\n\n----------------------------------------\n\nTITLE: Group By with Custom Aggregation on Related Entities\nDESCRIPTION: Shows how to use custom aggregation functions to calculate the average age of pets per user by joining the pet table and grouping by user ID and name.\nSOURCE: https://github.com/ent/ent/blob/master/doc/md/aggregate.md#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"context\"\n\t\"log\"\n\n\t\"<project>/ent\"\n\t\"<project>/ent/pet\"\n\t\"<project>/ent/user\"\n)\n\nfunc Do(ctx context.Context, client *ent.Client) {\n\tvar users []struct {\n\t\tID      int\n\t\tName    string\n\t\tAverage float64\n\t}\n\terr := client.User.Query().\n\t\tGroupBy(user.FieldID, user.FieldName).\n\t\tAggregate(func(s *sql.Selector) string {\n\t\t\tt := sql.Table(pet.Table)\n\t\t\ts.Join(t).On(s.C(user.FieldID), t.C(pet.OwnerColumn))\n\t\t\treturn sql.As(sql.Avg(t.C(pet.FieldAge)), \"average\")\n\t\t}).\n\t\tScan(ctx, &users)\n}\n```\n\n----------------------------------------\n\nTITLE: Adding entproto.Service Annotation in Go\nDESCRIPTION: This snippet shows how to add the entproto.Service annotation to the User schema in Ent, which enables gRPC service generation.\nSOURCE: https://github.com/ent/ent/blob/master/doc/website/blog/2021-03-18-generating-a-grpc-server-with-ent.md#2025-04-22_snippet_10\n\nLANGUAGE: go\nCODE:\n```\nfunc (User) Annotations() []schema.Annotation {\n\treturn []schema.Annotation{\n\t\tentproto.Message(),\n\t\tentproto.Service(), // <-- add this\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Extending GraphQL Input for Edge Creation\nDESCRIPTION: Extends the CreateTodoInput to allow creating child todos in the same mutation.\nSOURCE: https://github.com/ent/ent/blob/master/doc/md/tutorial-todo-gql-mutation-input.md#2025-04-22_snippet_5\n\nLANGUAGE: graphql\nCODE:\n```\nextend input CreateTodoInput {\n  createChildren: [CreateTodoInput!]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Ent for GraphQL Schema Generation in Go\nDESCRIPTION: This snippet shows how to configure Ent to generate a GraphQL schema by adding the WithSchemaGenerator option to the entgql extension.\nSOURCE: https://github.com/ent/ent/blob/master/doc/md/tutorial-todo-gql-schema-generator.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nfunc main() {\n\tex, err := entgql.NewExtension(\n\t\tentgql.WithWhereInputs(true),\n\t\tentgql.WithConfigPath(\"../gqlgen.yml\"),\n\t\tentgql.WithSchemaGenerator(),\n\t\tentgql.WithSchemaPath(\"../ent.graphql\"),\n\t)\n\tif err != nil {\n\t\tlog.Fatalf(\"creating entgql extension: %v\", err)\n\t}\n\topts := []entc.Option{\n\t\tentc.Extensions(ex),\n\t\tentc.TemplateDir(\"./template\"),\n\t}\n\tif err := entc.Generate(\"./schema\", &gen.Config{}, opts...); err != nil {\n\t\tlog.Fatalf(\"running ent codegen: %v\", err)\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Using Named Edges in Ent\nDESCRIPTION: Example of using named edges to preload the same edge with different filters. This enables querying the same edge multiple times with different arguments, which is especially useful for GraphQL integrations.\nSOURCE: https://github.com/ent/ent/blob/master/doc/md/eager-load.mdx#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nposts, err := client.Post.Query().\n    WithNamedComments(\"published\", func(q *ent.CommentQuery) {\n        q.Where(comment.StatusEQ(comment.StatusPublished))\n    })\n    WithNamedComments(\"draft\", func(q *ent.CommentQuery) {\n        q.Where(comment.StatusEQ(comment.StatusDraft))\n    }).\n    Paginate(...)\n\n// Get the preloaded edges by their name:\nfor _, p := range posts {\n    published, err := p.Edges.NamedComments(\"published\")\n    if err != nil {\n        return err\n    }\n    draft, err := p.Edges.NamedComments(\"draft\")\n    if err != nil {\n        return err\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring sql.DB for Ent Client (Option 2)\nDESCRIPTION: This snippet demonstrates an alternative approach to create an Ent client using a custom sql.DB object. It directly uses the database/sql package to open the connection and configure settings.\nSOURCE: https://github.com/ent/ent/blob/master/doc/md/sql-integration.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n    \"database/sql\"\n    \"time\"\n\n    \"<your_project>/ent\"\n    entsql \"entgo.io/ent/dialect/sql\"\n)\n\nfunc Open() (*ent.Client, error) {\n    db, err := sql.Open(\"mysql\", \"<mysql-dsn>\")\n    if err != nil {\n    \treturn nil, err\n    }\n    db.SetMaxIdleConns(10)\n    db.SetMaxOpenConns(100)\n    db.SetConnMaxLifetime(time.Hour)\n    // Create an ent.Driver from `db`.\n    drv := entsql.OpenDB(\"mysql\", db)\n    return ent.NewClient(ent.Driver(drv)), nil\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Category Schema with Edge Relationships\nDESCRIPTION: Schema definition for Category entity showing how to create edges to User entities with gRPC annotations.\nSOURCE: https://github.com/ent/ent/blob/master/doc/md/tutorial-grpc-edges.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\npackage schema\n\nimport (\n\t\"entgo.io/contrib/entproto\"\n\t\"entgo.io/ent\"\n\t\"entgo.io/ent/schema\"\n\t\"entgo.io/ent/schema/edge\"\n\t\"entgo.io/ent/schema/field\"\n)\n\ntype Category struct {\n\tent.Schema\n}\n\nfunc (Category) Fields() []ent.Field {\n\treturn []ent.Field{\n\t\tfield.String(\"name\").\n\t\t\tAnnotations(entproto.Field(2)),\n\t}\n}\n\nfunc (Category) Annotations() []schema.Annotation {\n\treturn []schema.Annotation{\n\t\tentproto.Message(),\n\t}\n}\n\nfunc (Category) Edges() []ent.Edge {\n\treturn []ent.Edge{\n\t\tedge.To(\"admin\", User.Type).\n\t\t\tUnique().\n\t\t\tAnnotations(entproto.Field(3)),\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Ent GraphQL Extension in Go\nDESCRIPTION: This code snippet demonstrates how to set up the entgql extension for an Ent project. It creates a new extension and generates code using entc.\nSOURCE: https://github.com/ent/ent/blob/master/doc/md/graphql.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\n// +build ignore\n\npackage main\n\nimport (\n\t\"log\"\n\n\t\"entgo.io/ent/entc\"\n\t\"entgo.io/ent/entc/gen\"\n\t\"entgo.io/contrib/entgql\"\n)\n\nfunc main() {\n\tex, err := entgql.NewExtension()\n\tif err != nil {\n\t\tlog.Fatalf(\"creating entgql extension: %v\", err)\n\t}\n\tif err := entc.Generate(\"./schema\", &gen.Config{}, entc.Extensions(ex)); err != nil {\n\t\tlog.Fatalf(\"running ent codegen: %v\", err)\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Group By Multiple Fields in Ent\nDESCRIPTION: Shows how to group results by multiple fields (name and age) of users while calculating sum and count aggregations on the grouped data.\nSOURCE: https://github.com/ent/ent/blob/master/doc/md/aggregate.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"context\"\n\t\n\t\"<project>/ent\"\n\t\"<project>/ent/user\"\n)\n\nfunc Do(ctx context.Context, client *ent.Client) {\n\tvar v []struct {\n\t\tName  string `json:\"name\"`\n\t\tAge   int    `json:\"age\"`\n\t\tSum   int    `json:\"sum\"`\n\t\tCount int    `json:\"count\"`\n\t}\n\terr := client.User.Query().\n\t\tGroupBy(user.FieldName, user.FieldAge).\n\t\tAggregate(ent.Count(), ent.Sum(user.FieldAge)).\n\t\tScan(ctx, &v)\n}\n```\n\n----------------------------------------\n\nTITLE: Querying All Todo Items\nDESCRIPTION: Example showing how to query all Todo items from the database\nSOURCE: https://github.com/ent/ent/blob/master/doc/md/tutorial-todo-crud.md#2025-04-22_snippet_5\n\nLANGUAGE: go\nCODE:\n```\nfunc Example_Todo() {\n\t// ...\n\n\t// Query all todo items.\n\titems, err := client.Todo.Query().All(ctx)\n\tif err != nil {\n\t\tlog.Fatalf(\"failed querying todos: %v\", err)\n\t}\n\tfor _, t := range items {\n\t\tfmt.Printf(\"%d: %q\\n\", t.ID, t.Text)\n\t}\n\t// Output:\n\t// 1: \"Add GraphQL Example\"\n\t// 2: \"Add Tracing Example\"\n}\n```\n\n----------------------------------------\n\nTITLE: Defining JSON Field with Struct Type in Ent\nDESCRIPTION: This Go code snippet demonstrates how to define a JSON field with a struct type containing a slice in an Ent schema.\nSOURCE: https://github.com/ent/ent/blob/master/doc/website/blog/2022-10-10-json-append.mdx#2025-04-22_snippet_10\n\nLANGUAGE: go\nCODE:\n```\ntype Meta struct {\n\tTags []string `json:\"tags\"'`\n}\n\n// Fields of the User.\nfunc (User) Fields() []ent.Field {\n\treturn []ent.Field{\n\t\tfield.JSON(\"meta\", &Meta{}),\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Combining Group By with Having Using Custom SQL Modifiers\nDESCRIPTION: Demonstrates how to use custom SQL modifiers to control query parts, specifically using GROUP BY with a HAVING clause to retrieve the oldest users for each role.\nSOURCE: https://github.com/ent/ent/blob/master/doc/md/aggregate.md#2025-04-22_snippet_4\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"context\"\n\t\"log\"\n\n\t\"entgo.io/ent/dialect/sql\"\n\t\"<project>/ent\"\n\t\"<project>/ent/user\"\n)\n\nfunc Do(ctx context.Context, client *ent.Client) {\n\tvar users []struct {\n\t\tId    \tInt\n\t\tAge     Int\n\t\tRole    string\n\t}\n\terr := client.User.Query().\n\t\tModify(func(s *sql.Selector) {\n\t\t\ts.GroupBy(user.Role)\n\t\t\ts.Having(\n\t\t\t\tsql.EQ(\n\t\t\t\t\tuser.FieldAge,\n\t\t\t\t\tsql.Raw(sql.Max(user.FieldAge)),\n\t\t\t\t),\n\t\t\t)\n\t\t}).\n\t\tScanX(ctx, &users)\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Go Generate Commands\nDESCRIPTION: Go code updating the go generate commands to include gqlgen code generation.\nSOURCE: https://github.com/ent/ent/blob/master/doc/md/tutorial-todo-gql.mdx#2025-04-22_snippet_7\n\nLANGUAGE: go\nCODE:\n```\npackage todo\n\n//go:generate go run -mod=mod ./ent/entc.go\n//go:generate go run -mod=mod github.com/99designs/gqlgen\n```\n\n----------------------------------------\n\nTITLE: Type-Safe Ordering by Fields in Ent Go\nDESCRIPTION: Shows how to use generated type-safe ordering functions to sort entities by multiple fields.\nSOURCE: https://github.com/ent/ent/blob/master/doc/md/paging.mdx#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\n// Get all users sorted by their name (and nickname) in ascending order.\nusers, err := client.User.Query().\n\tOrder(\n\t\t// highlight-start\n\t\tuser.ByName(),\n\t\tuser.ByNickname(),\n\t\t// highlight-end\n\t).\n\tAll(ctx)\n\n// Get all users sorted by their nickname in descending order.\nusers, err := client.User.Query().\n\tOrder(\n\t\t// highlight-start\n\t\tuser.ByNickname(\n\t\t\tsql.OrderDesc(),\n\t\t),\n\t\t// highlight-end\n\t).\n\tAll(ctx)\n```\n\n----------------------------------------\n\nTITLE: Generating Assets for Following-Followers Example in Go\nDESCRIPTION: Command to generate all necessary assets for the following-followers example using Go's generate mechanism.\nSOURCE: https://github.com/ent/ent/blob/master/examples/m2mrecur/README.md#2025-04-22_snippet_0\n\nLANGUAGE: console\nCODE:\n```\ngo generate ./...\n```\n\n----------------------------------------\n\nTITLE: Defining GraphQL Mutation for Creating Todos\nDESCRIPTION: This snippet shows how to extend the GraphQL schema with a custom mutation for creating todo items. It uses types generated by Ent for input and output.\nSOURCE: https://github.com/ent/ent/blob/master/doc/md/tutorial-todo-gql.mdx#2025-04-22_snippet_12\n\nLANGUAGE: graphql\nCODE:\n```\ntype Mutation {\n    # The input and the output are types generated by Ent.\n    createTodo(input: CreateTodoInput!): Todo\n}\n```\n\n----------------------------------------\n\nTITLE: Appending Values to JSON Arrays in PostgreSQL\nDESCRIPTION: This SQL snippet demonstrates how to atomically append a value to a JSON array in PostgreSQL, handling edge cases where the field might not exist or be null.\nSOURCE: https://github.com/ent/ent/blob/master/doc/website/blog/2022-10-10-json-append.mdx#2025-04-22_snippet_6\n\nLANGUAGE: sql\nCODE:\n```\nUPDATE \"t\" SET \"c\" = CASE\nWHEN\n    ((\"c\"->'a')::jsonb IS NULL\n    OR (\"c\"->'a')::jsonb = 'null'::jsonb)\nTHEN\n    jsonb_set(\"c\", '{a}', 'new_val', true)\nELSE\n    jsonb_set(\"c\", '{a}', \"c\"->'a' || 'new_val', true)\nEND\n```\n\n----------------------------------------\n\nTITLE: Implementing Row-Level Security in Go Code\nDESCRIPTION: This Go snippet demonstrates how to use the RLS policy in Ent queries by setting the tenant ID in the context.\nSOURCE: https://github.com/ent/ent/blob/master/doc/md/migration/rls.mdx#2025-04-22_snippet_6\n\nLANGUAGE: go\nCODE:\n```\nctx1, ctx2 := sql.WithIntVar(ctx, \"app.current_tenant\", a8m.ID), sql.WithIntVar(ctx, \"app.current_tenant\", r3m.ID)\nusers1 := client.User.Query().AllX(ctx1)\n// Users1 can only see users from tenant a8m.\nusers2 := client.User.Query().AllX(ctx2)\n// Users2 can only see users from tenant r3m.\n```\n\n----------------------------------------\n\nTITLE: Implementing Pessimistic Update Function with Ent\nDESCRIPTION: This function demonstrates how to use pessimistic locking in Ent to ensure only a single process can update a User object's online field. It uses the ForUpdate method to acquire a lock on the database row before updating.\nSOURCE: https://github.com/ent/ent/blob/master/doc/website/blog/2021-07-22-database-locking-techniques-with-ent.md#2025-04-22_snippet_4\n\nLANGUAGE: Go\nCODE:\n```\nfunc pessimisticUpdate(tx *ent.Tx, id int, online bool) (*ent.User, error) {\n\tctx := context.Background()\n\n\t// On our active transaction, we begin a query against the user table\n\tu, err := tx.User.Query().\n\n\t\t// We add a predicate limiting the lock to the user we want to update.\n\t\tWhere(user.ID(id)).\n\n\t\t// We use the ForUpdate method to tell ent to ask our DB to lock\n\t\t// the returned records for update.\n\t\tForUpdate(\n\t\t\t// We specify that the query should not wait for the lock to be\n\t\t\t// released and instead fail immediately if the record is locked.\n\t\t\tsql.WithLockAction(sql.NoWait),\n\t\t).\n\t\tOnly(ctx)\n\t\n\t// If we failed to acquire the lock we do not proceed to update the record.\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\t\n\t// Finally, we set the online field to the desired value. \n\treturn u.Update().SetOnline(online).Save(ctx)\n}\n```\n\n----------------------------------------\n\nTITLE: Running Ent Migration with Atlas Engine in Go\nDESCRIPTION: Example of how to run a database migration using Ent with the new Atlas engine. It demonstrates connecting to a MySQL database and creating the schema using the WithAtlas option.\nSOURCE: https://github.com/ent/ent/blob/master/doc/website/blog/2022-01-20-announcing-new-migration-engine.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\npackage main\nimport (\n    \"context\"\n    \"log\"\n    \"<project>/ent\"\n    \"<project>/ent/migrate\"\n    \"entgo.io/ent/dialect/sql/schema\"\n)\nfunc main() {\n    client, err := ent.Open(\"mysql\", \"root:pass@tcp(localhost:3306)/test\")\n    if err != nil {\n        log.Fatalf(\"failed connecting to mysql: %v\", err)\n    }\n    defer client.Close()\n    ctx := context.Background()\n    // Run migration.\n    err = client.Schema.Create(ctx, schema.WithAtlas(true))\n    if err != nil {\n        log.Fatalf(\"failed creating schema resources: %v\", err)\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Base Privacy Mixin in Go with Ent\nDESCRIPTION: Defines a base mixin schema with privacy policies that enforce viewer context validation and admin permissions for all entities.\nSOURCE: https://github.com/ent/ent/blob/master/doc/md/privacy.mdx#2025-04-22_snippet_9\n\nLANGUAGE: go\nCODE:\n```\n// BaseMixin for all schemas in the graph.\ntype BaseMixin struct {\n\tmixin.Schema\n}\n\n// Policy defines the privacy policy of the BaseMixin.\nfunc (BaseMixin) Policy() ent.Policy {\n\treturn privacy.Policy{\n\t\tQuery: privacy.QueryPolicy{\n\t\t\t// Deny any query operation in case\n\t\t\t// there is no \"viewer context\".\n\t\t\trule.DenyIfNoViewer(),\n\t\t\t// Allow admins to query any information.\n\t\t\trule.AllowIfAdmin(),\n\t\t},\n\t\tMutation: privacy.MutationPolicy{\n\t\t\t// Deny any mutation operation in case\n\t\t\t// there is no \"viewer context\".\n\t\t\trule.DenyIfNoViewer(),\n\t\t},\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Hooks to Ent Schema Migration\nDESCRIPTION: Demonstrates how to add middleware hooks to the migration process. This allows for customizing the migration process, such as modifying tables or creating custom database resources.\nSOURCE: https://github.com/ent/ent/blob/master/doc/md/migrate.md#2025-04-22_snippet_6\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n    \"context\"\n    \"log\"\n\n    \"<project>/ent\"\n    \"<project>/ent/migrate\"\n\n    \"entgo.io/ent/dialect/sql/schema\"\n)\n\nfunc main() {\n    client, err := ent.Open(\"mysql\", \"root:pass@tcp(localhost:3306)/test\")\n    if err != nil {\n        log.Fatalf(\"failed connecting to mysql: %v\", err)\n    }\n    defer client.Close()\n    ctx := context.Background()\n    // Run migration.\n    err = client.Schema.Create(\n        ctx,\n        schema.WithHooks(func(next schema.Creator) schema.Creator {\n            return schema.CreateFunc(func(ctx context.Context, tables ...*schema.Table) error {\n                // Run custom code here.\n                return next.Create(ctx, tables...)\n            })\n        }),\n    )\n    if err != nil {\n        log.Fatalf(\"failed creating schema resources: %v\", err)\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Custom SQL LIKE Pattern in Ent Queries (Go)\nDESCRIPTION: Example of using a custom SQL LIKE predicate to match pet names with a specific pattern.\nSOURCE: https://github.com/ent/ent/blob/master/doc/md/predicates.md#2025-04-22_snippet_11\n\nLANGUAGE: go\nCODE:\n```\npets := client.Pet.Query().\n\tWhere(func(s *sql.Selector){\n\t\ts.Where(sql.Like(pet.Name,\"_B%\"))\n\t}).\n\tAllX(ctx)\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT DISTINCT `pets`.`id`, `pets`.`owner_id`, `pets`.`name`, `pets`.`age`, `pets`.`species` FROM `pets` WHERE `name` LIKE '_B%'\n```\n\n----------------------------------------\n\nTITLE: Applying Ent Hooks in Go\nDESCRIPTION: This snippet illustrates how to apply Ent hooks to specific entities or operations. It shows adding a hook to user mutations and another hook to all update operations across entities.\nSOURCE: https://github.com/ent/ent/blob/master/doc/website/blog/2021-08-12-building-observable-ent-application-with-prometheus.md#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\npackage example\n\nimport (\n\t\"entprom/ent\"\n\t\"entprom/ent/hook\"\n)\n\nfunc main() {\n\tclient, _ := ent.Open(\"sqlite3\", \"file:ent?mode=memory&cache=shared&_fk=1\")\n\n\t// Add a hook only on user mutations.\n\tclient.User.Use(exampleHook())\n\n\t// Add a hook only on update operations.\n\tclient.Use(hook.On(exampleHook(), ent.OpUpdate|ent.OpUpdateOne))\n}\n```\n\n----------------------------------------\n\nTITLE: Defining O2O Bidirectional Edge in Go using Ent\nDESCRIPTION: Demonstrates how to define a symmetric O2O (one-to-one) bidirectional edge named 'spouse' in the User schema using Ent.\nSOURCE: https://github.com/ent/ent/blob/master/examples/README.md#2025-04-22_snippet_7\n\nLANGUAGE: go\nCODE:\n```\n// Edges of the User.\nfunc (User) Edges() []ent.Edge {\n\treturn []ent.Edge{\n\t\tedge.To(\"spouse\", User.Type).\n\t\t\tUnique(),\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Custom SQL IN Query Equivalent to HasCarWith in Ent (Go)\nDESCRIPTION: Example of using a custom SQL subquery with IN operator to filter users with Tesla cars.\nSOURCE: https://github.com/ent/ent/blob/master/doc/md/predicates.md#2025-04-22_snippet_8\n\nLANGUAGE: go\nCODE:\n```\n// `IN` version.\nusers := client.User.Query().\n\tWhere(func(s *sql.Selector) {\n\t\tt := sql.Table(car.Table)\n        s.Where(\n            sql.In(\n                s.C(user.FieldID),\n                sql.Select(t.C(user.FieldID)).From(t).Where(sql.EQ(t.C(car.FieldModel), \"Tesla\")),\n            ),\n        )\n\t}).\n\tAllX(ctx)\n```\n\nLANGUAGE: sql\nCODE:\n```\n-- `IN` version.\nSELECT DISTINCT `users`.`id`, `users`.`age`, `users`.`name` FROM `users` WHERE `users`.`id` IN (SELECT `cars`.`owner_id` FROM `cars` WHERE `cars`.`model` = 'Tesla')\n```\n\n----------------------------------------\n\nTITLE: Configuring Todo Schema for GraphQL Mutations\nDESCRIPTION: Adds annotations to the Todo schema to enable GraphQL mutation support for create and update operations.\nSOURCE: https://github.com/ent/ent/blob/master/doc/md/tutorial-todo-gql-mutation-input.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nfunc (Todo) Annotations() []schema.Annotation {\n\treturn []schema.Annotation{\n\t\tentgql.QueryField(),\n\t\t//highlight-next-line\n\t\tentgql.Mutations(entgql.MutationCreate(), entgql.MutationUpdate()),\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Creating and Mutating Ent Schemas with UpsertSchema\nDESCRIPTION: This example demonstrates how to create new schemas using the UpsertSchema mutator. It creates User and Team schemas with name fields, then prints them to the target directory.\nSOURCE: https://github.com/ent/ent/blob/master/doc/md/generating-ent-schemas.md#2025-04-22_snippet_4\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"log\"\n\n\t\"entgo.io/contrib/schemast\"\n\t\"entgo.io/ent\"\n\t\"entgo.io/ent/schema/field\"\n)\n\nfunc main() {\n\tctx, err := schemast.Load(\"./ent/schema\")\n\tif err != nil {\n\t\tlog.Fatalf(\"failed: %v\", err)\n\t}\n\tmutations := []schemast.Mutator{\n\t\t&schemast.UpsertSchema{\n\t\t\tName: \"User\",\n\t\t\tFields: []ent.Field{\n\t\t\t\tfield.String(\"name\"),\n\t\t\t},\n\t\t},\n\t\t&schemast.UpsertSchema{\n\t\t\tName: \"Team\",\n\t\t\tFields: []ent.Field{\n\t\t\t\tfield.String(\"name\"),\n\t\t\t},\n\t\t},\n\t}\n\terr = schemast.Mutate(ctx, mutations...)\n\tif err := ctx.Print(\"./ent/schema\"); err != nil {\n\t\tlog.Fatalf(\"failed: %v\", err)\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: GraphQL Query with Named Edge Aliases\nDESCRIPTION: Example of a GraphQL query that uses aliases to reference the same edge with different filtering arguments, demonstrating the use case for Ent's named edges feature.\nSOURCE: https://github.com/ent/ent/blob/master/doc/md/eager-load.mdx#2025-04-22_snippet_3\n\nLANGUAGE: graphql\nCODE:\n```\nquery {\n  posts {\n    id\n    title\n    published: comments(where: { status: PUBLISHED }) {\n      edges {\n        node {\n          text\n        }\n      }\n    }\n    draft: comments(where: { status: DRAFT }) {\n      edges {\n        node {\n          text\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Initial Todo Schema in Go\nDESCRIPTION: Shows the initial Todo schema generated by Ent, which includes empty Fields and Edges methods.\nSOURCE: https://github.com/ent/ent/blob/master/doc/md/tutorial-setup.md#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\npackage schema\n\nimport \"entgo.io/ent\"\n\n// Todo holds the schema definition for the Todo entity.\ntype Todo struct {\n\tent.Schema\n}\n\n// Fields of the Todo.\nfunc (Todo) Fields() []ent.Field {\n\treturn nil\n}\n\n// Edges of the Todo.\nfunc (Todo) Edges() []ent.Edge {\n\treturn nil\n}\n```\n\n----------------------------------------\n\nTITLE: Running Code Generation for GraphQL\nDESCRIPTION: This shell command runs the code generation process to generate the necessary Go code based on the GraphQL schema.\nSOURCE: https://github.com/ent/ent/blob/master/doc/md/tutorial-todo-gql.mdx#2025-04-22_snippet_14\n\nLANGUAGE: shell\nCODE:\n```\ngo generate .\n```\n\n----------------------------------------\n\nTITLE: Implementing GraphQL Mutation Resolvers\nDESCRIPTION: Go code implementing the resolvers for createTodo and updateTodo mutations using Ent client.\nSOURCE: https://github.com/ent/ent/blob/master/doc/md/tutorial-todo-gql-mutation-input.md#2025-04-22_snippet_4\n\nLANGUAGE: go\nCODE:\n```\n// CreateTodo is the resolver for the createTodo field.\nfunc (r *mutationResolver) CreateTodo(ctx context.Context, input ent.CreateTodoInput) (*ent.Todo, error) {\n\treturn r.client.Todo.Create().SetInput(input).Save(ctx)\n}\n\n// UpdateTodo is the resolver for the updateTodo field.\nfunc (r *mutationResolver) UpdateTodo(ctx context.Context, id int, input ent.UpdateTodoInput) (*ent.Todo, error) {\n\treturn r.client.Todo.UpdateOneID(id).SetInput(input).Save(ctx)\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Migrations with Atlas CLI\nDESCRIPTION: This shell command uses Atlas to generate a migration for the composite schema.\nSOURCE: https://github.com/ent/ent/blob/master/doc/md/migration/rls.mdx#2025-04-22_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\natlas migrate diff \\\n  --env local\n```\n\n----------------------------------------\n\nTITLE: Initializing GraphQL Server with Transactioner Handler in Go\nDESCRIPTION: This snippet demonstrates how to set up a GraphQL server with the entgql.Transactioner handler. It initializes the server and adds the Transactioner middleware to handle transactions.\nSOURCE: https://github.com/ent/ent/blob/master/doc/md/graphql.md#2025-04-22_snippet_10\n\nLANGUAGE: go\nCODE:\n```\nsrv := handler.NewDefaultServer(todo.NewSchema(client))\nsrv.Use(entgql.Transactioner{TxOpener: client})\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Table Name with Annotations in Go\nDESCRIPTION: Example showing how to use the entsql annotation to set a custom table name for a User entity schema. The annotation overrides the default table name with \"Users\".\nSOURCE: https://github.com/ent/ent/blob/master/doc/md/schema-annotations.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\npackage schema\n\nimport (\n\t\"entgo.io/ent\"\n\t\"entgo.io/ent/dialect/entsql\"\n\t\"entgo.io/ent/schema\"\n\t\"entgo.io/ent/schema/field\"\n)\n\n// User holds the schema definition for the User entity.\ntype User struct {\n\tent.Schema\n}\n\n// Annotations of the User.\nfunc (User) Annotations() []schema.Annotation {\n\treturn []schema.Annotation{\n\t\tentsql.Annotation{Table: \"Users\"},\n\t}\n}\n\n// Fields of the User.\nfunc (User) Fields() []ent.Field {\n\treturn []ent.Field{\n\t\tfield.Int(\"age\"),\n\t\tfield.String(\"name\"),\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Ordering in Ent Go Queries\nDESCRIPTION: Demonstrates basic ordering of query results by field values in ascending order.\nSOURCE: https://github.com/ent/ent/blob/master/doc/md/paging.mdx#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nusers, err := client.User.Query().\n\tOrder(ent.Asc(user.FieldName)).\n\tAll(ctx)\n```\n\n----------------------------------------\n\nTITLE: Selecting Order Terms in Ent Go\nDESCRIPTION: Shows how to retrieve ordering term values from query results for display or pagination purposes.\nSOURCE: https://github.com/ent/ent/blob/master/doc/md/paging.mdx#2025-04-22_snippet_7\n\nLANGUAGE: go\nCODE:\n```\n// Define the alias for the order term.\nconst as = \"pets_count\"\n\n// Query users sorted by the number of pets\n// they have and select the order term.\nusers := client.User.Query().\n\tOrder(\n\t\tuser.ByPetsCount(\n\t\t\tsql.OrderDesc(),\n\t\t\t// highlight-next-line\n\t\t\tsql.OrderSelectAs(as),\n\t\t),\n\t\tuser.ByID(),\n\t).\n\tAllX(ctx)\n\n// Retrieve the order term value.\nfor _, u := range users {\n\t// highlight-next-line\n\tfmt.Println(u.Value(as))\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Basic Hook Function in Entgo\nDESCRIPTION: Shows the interface for a hook function that acts as middleware between mutators, receiving a Mutator and returning a modified Mutator.\nSOURCE: https://github.com/ent/ent/blob/master/doc/md/hooks.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\ntype (\n\t// Mutator is the interface that wraps the Mutate method.\n\tMutator interface {\n\t\t// Mutate apply the given mutation on the graph.\n\t\tMutate(context.Context, Mutation) (Value, error)\n\t}\n\n\t// Hook defines the \"mutation middleware\". A function that gets a Mutator\n\t// and returns a Mutator. For example:\n\t//\n\t//\thook := func(next ent.Mutator) ent.Mutator {\n\t//\t\treturn ent.MutateFunc(func(ctx context.Context, m ent.Mutation) (ent.Value, error) {\n\t//\t\t\tfmt.Printf(\"Type: %s, Operation: %s, ConcreteType: %T\\n\", m.Type(), m.Op(), m)\n\t//\t\t\treturn next.Mutate(ctx, m)\n\t//\t\t})\n\t//\t}\n\t//\n\tHook func(Mutator) Mutator\n)\n```\n\n----------------------------------------\n\nTITLE: Updating GraphQL Resolver for Ordering in Go\nDESCRIPTION: This Go code updates the Todo resolver to include the orderBy argument in the Paginate call.\nSOURCE: https://github.com/ent/ent/blob/master/doc/md/graphql.md#2025-04-22_snippet_7\n\nLANGUAGE: go\nCODE:\n```\nfunc (r *queryResolver) Todos(ctx context.Context, after *ent.Cursor, first *int, before *ent.Cursor, last *int, orderBy *ent.TodoOrder) (*ent.TodoConnection, error) {\n\treturn r.client.Todo.Query().\n\t\tPaginate(ctx, after, first, before, last,\n\t\t\tent.WithTodoOrder(orderBy),\n\t\t)\n}\n```\n\n----------------------------------------\n\nTITLE: Defining O2O Relationship in Card Schema (Card to User)\nDESCRIPTION: This code snippet demonstrates how to define a one-to-one relationship from Card to User using edge.From with Unique and Required methods. It establishes that a Card must have exactly one owner and cannot be created without it.\nSOURCE: https://github.com/ent/ent/blob/master/doc/md/schema-edges.mdx#2025-04-22_snippet_5\n\nLANGUAGE: go\nCODE:\n```\n// Edges of the Card.\nfunc (Card) Edges() []ent.Edge {\n\treturn []ent.Edge{\n\t\tedge.From(\"owner\", User.Type).\n\t\t\tRef(\"card\").\n\t\t\tUnique().\n\t\t\t// We add the \"Required\" method to the builder\n\t\t\t// to make this edge required on entity creation.\n\t\t\t// i.e. Card cannot be created without its owner.\n\t\t\tRequired(),\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Querying with HasEdgeWith Predicate in Ent (Go)\nDESCRIPTION: Example of using the HasEdgeWith predicate to query for pets with owners matching specific conditions.\nSOURCE: https://github.com/ent/ent/blob/master/doc/md/predicates.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nclient.Pet.\n\tQuery().\n\tWhere(pet.HasOwnerWith(user.Name(\"a8m\"))).\n\tAll(ctx)\n```\n\n----------------------------------------\n\nTITLE: Implementing Edge Resolver in Go\nDESCRIPTION: This Go code shows an example of implementing an edge resolver for the Children edge of a Todo entity.\nSOURCE: https://github.com/ent/ent/blob/master/doc/md/graphql.md#2025-04-22_snippet_9\n\nLANGUAGE: go\nCODE:\n```\nfunc (t *Todo) Children(ctx context.Context) ([]*Todo, error) {\n\tresult, err := t.Edges.ChildrenOrErr()\n\tif IsNotLoaded(err) {\n\t\tresult, err = t.QueryChildren().All(ctx)\n\t}\n\treturn result, err\n}\n```\n\n----------------------------------------\n\nTITLE: Testing Tenant Creation with Privacy Rules in Go\nDESCRIPTION: Example test code demonstrating tenant creation under different privacy contexts including missing viewer context and admin permissions.\nSOURCE: https://github.com/ent/ent/blob/master/doc/md/privacy.mdx#2025-04-22_snippet_12\n\nLANGUAGE: go\nCODE:\n```\nfunc Example_CreateTenants(ctx context.Context, client *ent.Client) {\n\t// Expect operation to fail in case viewer-context is missing.\n\t// First mutation privacy policy rule defined in BaseMixin.\n\tif err := client.Tenant.Create().Exec(ctx); !errors.Is(err, privacy.Deny) {\n\t\tlog.Fatal(\"expect tenant creation to fail, but got:\", err)\n\t}\n\n\t// Expect operation to fail in case the ent.User in the viewer-context\n\t// is not an admin user. Privacy policy defined in the Tenant schema.\n\tviewCtx := viewer.NewContext(ctx, viewer.UserViewer{Role: viewer.View})\n\tif err := client.Tenant.Create().Exec(viewCtx); !errors.Is(err, privacy.Deny) {\n\t\tlog.Fatal(\"expect tenant creation to fail, but got:\", err)\n\t}\n\n\t// Operations should pass successfully as the user in the viewer-context\n\t// is an admin user. First mutation privacy policy in Tenant schema.\n\tadminCtx := viewer.NewContext(ctx, viewer.UserViewer{Role: viewer.Admin})\n\thub, err := client.Tenant.Create().SetName(\"GitHub\").Save(adminCtx)\n\tif err != nil {\n\t\tlog.Fatal(\"expect tenant creation to pass, but got:\", err)\n\t}\n\tfmt.Println(hub)\n\n\tlab, err := client.Tenant.Create().SetName(\"GitLab\").Save(adminCtx)\n\tif err != nil {\n\t\tlog.Fatal(\"expect tenant creation to pass, but got:\", err)\n\t}\n\tfmt.Println(lab)\n\t\n\t// Output:\n\t// Tenant(id=1, name=GitHub)\n\t// Tenant(id=2, name=GitLab)\n}\n```\n\n----------------------------------------\n\nTITLE: Automatic Migration Planning Script\nDESCRIPTION: Go script that uses Atlas to automatically plan and generate database migration files based on Ent schema changes.\nSOURCE: https://github.com/ent/ent/blob/master/doc/md/versioned/07-programmatically.mdx#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\n//go:build ignore\n\npackage main\n\nimport (\n    \"context\"\n    \"log\"\n    \"os\"\n\n    \"<project>/ent/migrate\"\n\n    atlas \"ariga.io/atlas/sql/migrate\"\n    \"entgo.io/ent/dialect\"\n    \"entgo.io/ent/dialect/sql/schema\"\n    _ \"github.com/go-sql-driver/mysql\"\n)\n\nconst (\n\tdir = \"ent/migrate/migrations\"\n)\n\nfunc main() {\n    ctx := context.Background()\n    if err := os.MkdirAll(dir, 0755); err != nil {\n\t\tlog.Fatalf(\"creating migration directory: %v\", err)\n\t}\n    dir, err := atlas.NewLocalDir(dir)\n    if err != nil {\n        log.Fatalf(\"failed creating atlas migration directory: %v\", err)\n    }\n    opts := []schema.MigrateOption{\n        schema.WithDir(dir),\n        schema.WithMigrationMode(schema.ModeReplay),\n        schema.WithDialect(dialect.MySQL),\n        schema.WithFormatter(atlas.DefaultFormatter),\n    }\n    if len(os.Args) != 2 {\n        log.Fatalln(\"migration name is required. Use: 'go run -mod=mod ent/migrate/main.go <name>'\")\n    }\n    err = migrate.NamedDiff(ctx, \"mysql://root:pass@localhost:3306/dev\", os.Args[1], opts...)\n    if err != nil {\n        log.Fatalf(\"failed generating migration file: %v\", err)\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Tweet Entity with Enthistory in Go\nDESCRIPTION: This code snippet demonstrates how to define a Tweet entity using Ent and annotate the content field for tracking with Enthistory. It shows the Fields() method of the Tweet struct, which defines the content and created fields.\nSOURCE: https://github.com/ent/ent/blob/master/doc/website/blog/2022-04-07-how-twitter-can-implement.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nfunc (Tweet) Fields() []ent.Field {\n\treturn []ent.Field{\n\t\tfield.String(\"content\").\n\t\t\tAnnotations(enthistory.TrackField()),\n\t\tfield.Time(\"created\").\n\t\t\tDefault(time.Now),\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Loading Existing Ent Schemas with schemast\nDESCRIPTION: This snippet demonstrates how to load an existing schema directory into a schemast.Context object, which allows for programmatic manipulation of Ent schemas. It also shows how to check if a specific schema type exists.\nSOURCE: https://github.com/ent/ent/blob/master/doc/md/generating-ent-schemas.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"fmt\"\n\t\"log\"\n\n\t\"entgo.io/contrib/schemast\"\n)\n\nfunc main() {\n\tctx, err := schemast.Load(\"./ent/schema\")\n\tif err != nil {\n\t\tlog.Fatalf(\"failed: %v\", err)\n\t}\n\tif ctx.HasType(\"user\") {\n\t\tfmt.Println(\"schema directory contains a schema named User!\")\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Adding External Dependencies to Ent Generated Code\nDESCRIPTION: Example of injecting external dependencies into the generated Ent client and builders. This demonstrates adding HTTP client and IO writer dependencies.\nSOURCE: https://github.com/ent/ent/blob/master/doc/md/code-gen.md#2025-04-22_snippet_8\n\nLANGUAGE: go\nCODE:\n```\nfunc main() {\n\topts := []entc.Option{\n\t\tentc.Dependency(\n\t\t\tentc.DependencyType(&http.Client{}),\n\t\t),\n\t\tentc.Dependency(\n\t\t\tentc.DependencyName(\"Writer\"),\n\t\t\tentc.DependencyTypeInfo(&field.TypeInfo{\n\t\t\t\tIdent:   \"io.Writer\",\n\t\t\t\tPkgPath: \"io\",\n\t\t\t}),\n\t\t),\n\t}\n\tif err := entc.Generate(\"./schema\", &gen.Config{}, opts...); err != nil {\n\t\tlog.Fatalf(\"running ent codegen: %v\", err)\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Endpoint with entoas in Go\nDESCRIPTION: Code to add a custom endpoint for marking a Todo as done using the entoas mutation builder in the entc.go file.\nSOURCE: https://github.com/ent/ent/blob/master/doc/website/blog/2022-02-15-generate-rest-crud-with-ent-and-ogen.md#2025-04-22_snippet_13\n\nLANGUAGE: go\nCODE:\n```\n//go:build ignore\n\npackage main\n\nimport (\n\t\"log\"\n\n\t\"entgo.io/contrib/entoas\"\n\t\"entgo.io/ent/entc\"\n\t\"entgo.io/ent/entc/gen\"\n\t\"github.com/ariga/ogent\"\n\t\"github.com/ogen-go/ogen\"\n)\n\nfunc main() {\n\tspec := new(ogen.Spec)\n\toas, err := entoas.NewExtension(\n\t\tentoas.Spec(spec),\n\t\tentoas.Mutations(func(_ *gen.Graph, spec *ogen.Spec) error {\n\t\t\tspec.AddPathItem(\"/todos/{id}/done\", ogen.NewPathItem().\n\t\t\t\tSetDescription(\"Mark an item as done\").\n\t\t\t\tSetPatch(ogen.NewOperation().\n\t\t\t\t\tSetOperationID(\"markDone\").\n\t\t\t\t\tSetSummary(\"Marks a todo item as done.\").\n\t\t\t\t\tAddTags(\"Todo\").\n\t\t\t\t\tAddResponse(\"204\", ogen.NewResponse().SetDescription(\"Item marked as done\")),\n\t\t\t\t).\n\t\t\t\tAddParameters(ogen.NewParameter().\n\t\t\t\t\tInPath().\n\t\t\t\t\tSetName(\"id\").\n\t\t\t\t\tSetRequired(true).\n\t\t\t\t\tSetSchema(ogen.Int()),\n\t\t\t\t),\n\t\t\t)\n\t\t\treturn nil\n\t\t}),\n\t)\n\tif err != nil {\n\t\tlog.Fatalf(\"creating entoas extension: %v\", err)\n\t}\n\togent, err := ogent.NewExtension(spec)\n\tif err != nil {\n\t\tlog.Fatalf(\"creating ogent extension: %v\", err)\n\t}\n\terr = entc.Generate(\"./schema\", &gen.Config{}, entc.Extensions(ogent, oas))\n\tif err != nil {\n\t\tlog.Fatalf(\"running ent codegen: %v\", err)\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Ent for GraphQL Filter Generation\nDESCRIPTION: Demonstrates how to configure Ent to generate GraphQL filter input types.\nSOURCE: https://github.com/ent/ent/blob/master/doc/website/blog/2021-07-01-automatic-graphql-filter-generation.md#2025-04-22_snippet_4\n\nLANGUAGE: go\nCODE:\n```\n// +build ignore\n\npackage main\n\nimport (\n\t\"log\"\n\n\t\"entgo.io/contrib/entgql\"\n\t\"entgo.io/ent/entc\"\n\t\"entgo.io/ent/entc/gen\"\n)\n\nfunc main() {\n\tex, err := entgql.NewExtension(\n\t\tentgql.WithWhereFilters(true),\n\t\tentgql.WithConfigPath(\"../gqlgen.yml\"),\n\t\tentgql.WithSchemaPath(\"<PATH-TO-GRAPHQL-SCHEMA>\"),\n\t)\n\tif err != nil {\n\t\tlog.Fatalf(\"creating entgql extension: %v\", err)\n\t}\n\terr = entc.Generate(\"./schema\", &gen.Config{}, entc.Extensions(ex))\n\tif err != nil {\n\t\tlog.Fatalf(\"running ent codegen: %v\", err)\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Generated gRPC Service Definition in Protocol Buffers\nDESCRIPTION: This snippet shows the generated gRPC service definition in the Protocol Buffers format, including methods for CRUD operations on the User entity.\nSOURCE: https://github.com/ent/ent/blob/master/doc/md/tutorial-grpc-generating-a-service.md#2025-04-22_snippet_1\n\nLANGUAGE: protobuf\nCODE:\n```\nservice UserService {\n  rpc Create ( CreateUserRequest ) returns ( User );\n\n  rpc Get ( GetUserRequest ) returns ( User );\n\n  rpc Update ( UpdateUserRequest ) returns ( User );\n\n  rpc Delete ( DeleteUserRequest ) returns ( google.protobuf.Empty );\n\n  rpc List ( ListUserRequest ) returns ( ListUserResponse );\n\n  rpc BatchCreate ( BatchCreateUsersRequest ) returns ( BatchCreateUsersResponse );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing AskCmd Run Method in Go\nDESCRIPTION: Main implementation of the ask command that handles retrieving similar document chunks and generating AI responses using OpenAI's API. It includes vector similarity search with pgvector and response formatting.\nSOURCE: https://github.com/ent/ent/blob/master/doc/website/blog/2025-02-12-rag-with-ent-atlas-pgvector.mdx#2025-04-22_snippet_21\n\nLANGUAGE: go\nCODE:\n```\nfunc (cmd *AskCmd) Run(ctx *CLI) error {\n\tclient, err := ctx.entClient()\n\tif err != nil {\n\t\treturn fmt.Errorf(\"failed opening connection to postgres: %w\", err)\n\t}\n\tquestion := cmd.Text\n\temb := getEmbedding(question)\n\tembVec := pgvector.NewVector(emb)\n\tembs := client.Embedding.\n\t\tQuery().\n\t\tOrder(func(s *sql.Selector) {\n\t\t\ts.OrderExpr(sql.ExprP(\"embedding <-> $1\", embVec))\n\t\t}).\n\t\tWithChunk().\n\t\tLimit(5).\n\t\tAllX(context.Background())\n\tb := strings.Builder{}\n\tfor _, e := range embs {\n\t\tchnk := e.Edges.Chunk\n\t\tb.WriteString(fmt.Sprintf(\"From file: %v\\n\", chnk.Path))\n\t\tb.WriteString(chnk.Data)\n\t}\n\tquery := fmt.Sprintf(`Use the below information from the ent docs to answer the subsequent question.\nInformation:\n%v\n\nQuestion: %v`, b.String(), question)\n\toac := openai.NewClient(ctx.OpenAIKey)\n\tresp, err := oac.CreateChatCompletion(\n\t\tcontext.Background(),\n\t\topenai.ChatCompletionRequest{\n\t\t\tModel: openai.GPT4o,\n\t\t\tMessages: []openai.ChatCompletionMessage{\n\n\t\t\t\t{\n\t\t\t\t\tRole:    openai.ChatMessageRoleUser,\n\t\t\t\t\tContent: query,\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t)\n\tif err != nil {\n\t\treturn fmt.Errorf(\"error creating chat completion: %v\", err)\n\t}\n\tchoice := resp.Choices[0]\n\tout, err := glamour.Render(choice.Message.Content, \"dark\")\n\tfmt.Print(out)\n\treturn nil\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing entcache Driver\nDESCRIPTION: Example showing how to set up and use entcache driver with an Ent client, including database connection, driver initialization, and basic query execution\nSOURCE: https://github.com/ent/ent/blob/master/doc/website/blog/2021-10-14-introducing-entcache.md#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\n// Open the database connection.\ndb, err := sql.Open(dialect.SQLite, \"file:ent?mode=memory&cache=shared&_fk=1\")\nif err != nil {\n\tlog.Fatal(\"opening database\", err)\n}\n// Decorates the sql.Driver with entcache.Driver.\ndrv := entcache.NewDriver(db)\n// Create an ent.Client.\nclient := ent.NewClient(ent.Driver(drv))\n\n// Tell the entcache.Driver to skip the caching layer\n// when running the schema migration.\nif client.Schema.Create(entcache.Skip(ctx)); err != nil {\n\tlog.Fatal(\"running schema migration\", err)\n}\n\n// Run queries.\nif u, err := client.User.Get(ctx, id); err != nil {\n\tlog.Fatal(\"querying user\", err)\n}\n// The query below is cached.\nif u, err := client.User.Get(ctx, id); err != nil {\n\tlog.Fatal(\"querying user\", err)\n}\n```\n\n----------------------------------------\n\nTITLE: Error Handling Go Code for Migration Generation\nDESCRIPTION: Go code snippet showing error handling for required migration name argument and generation of migration files using Atlas MySQL dialect.\nSOURCE: https://github.com/ent/ent/blob/master/doc/md/versioned-migrations.mdx#2025-04-22_snippet_9\n\nLANGUAGE: go\nCODE:\n```\nlog.Fatalln(\"migration name is required. Use: 'go run -mod=mod ent/migrate/main.go <name>'\")\\n}\\n// Generate migrations using Atlas support for MySQL (note the Ent dialect option passed above).\\nerr = migrate.NamedDiff(ctx, \"mysql://root:pass@localhost:3306/test\", os.Args[1], opts...)\\nif err != nil {\\n\\tlog.Fatalf(\"failed generating migration file: %v\", err)\\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Inverse Edge to Car Schema in Go\nDESCRIPTION: Defines an inverse edge 'owner' in the Car schema, referencing the 'cars' edge in the User schema.\nSOURCE: https://github.com/ent/ent/blob/master/doc/md/getting-started.mdx#2025-04-22_snippet_13\n\nLANGUAGE: go\nCODE:\n```\n// Edges of the Car.\nfunc (Car) Edges() []ent.Edge {\n\treturn []ent.Edge{\n\t\t// Create an inverse-edge called \"owner\" of type `User`\n\t \t// and reference it to the \"cars\" edge (in User schema)\n\t \t// explicitly using the `Ref` method.\n\t \tedge.From(\"owner\", User.Type).\n\t \t\tRef(\"cars\").\n\t\t\t// setting the edge to unique, ensure\n\t\t\t// that a car can have only one owner.\n\t\t\tUnique(),\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Defining GraphQL Ordering Types\nDESCRIPTION: This GraphQL schema snippet defines the necessary types for implementing ordering in queries.\nSOURCE: https://github.com/ent/ent/blob/master/doc/md/graphql.md#2025-04-22_snippet_5\n\nLANGUAGE: graphql\nCODE:\n```\nenum OrderDirection {\n  ASC\n  DESC\n}\n\nenum TodoOrderField {\n  CREATED_AT\n  PRIORITY\n  STATUS\n  TEXT\n}\n\ninput TodoOrder {\n  direction: OrderDirection!\n  field: TodoOrderField\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Group Schema with User Relations in Go\nDESCRIPTION: Schema definition for Group entity with name field and many-to-many relation to Users. Includes unique index on name field.\nSOURCE: https://github.com/ent/ent/blob/master/doc/website/blog/2022-03-14-announcing-versioned-migrations.md#2025-04-22_snippet_8\n\nLANGUAGE: go\nCODE:\n```\npackage schema\n\nimport (\n\t\"entgo.io/ent\"\n\t\"entgo.io/ent/schema/edge\"\n\t\"entgo.io/ent/schema/field\"\n\t\"entgo.io/ent/schema/index\"\n)\n\n// Group holds the schema definition for the Group entity.\ntype Group struct {\n\tent.Schema\n}\n\n// Fields of the Group.\nfunc (Group) Fields() []ent.Field {\n\treturn []ent.Field{\n\t\tfield.String(\"name\"),\n\t}\n}\n\n// Edges of the Group.\nfunc (Group) Edges() []ent.Edge {\n\treturn []ent.Edge{\n\t\tedge.To(\"users\", User.Type),\n\t}\n}\n\n// Indexes of the Group.\nfunc (Group) Indexes() []ent.Index {\n\treturn []ent.Index{\n\t\tindex.Fields(\"name\").Unique(),\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Adding entproto Generation Directive to Ent generate.go File\nDESCRIPTION: This snippet shows how to add a go:generate directive to the Ent generate.go file to invoke the entproto command-line tool for Protobuf generation.\nSOURCE: https://github.com/ent/ent/blob/master/doc/md/tutorial-grpc-generating-proto.md#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\npackage ent\n\n//go:generate go run -mod=mod entgo.io/ent/cmd/ent generate ./schema\n//go:generate go run -mod=mod entgo.io/contrib/entproto/cmd/entproto -path ./schema\n```\n\n----------------------------------------\n\nTITLE: Limiting Query Results in Ent Go\nDESCRIPTION: Demonstrates how to limit the number of entities returned by a query using the Limit method.\nSOURCE: https://github.com/ent/ent/blob/master/doc/md/paging.mdx#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nusers, err := client.User.\n\tQuery().\n\tLimit(n).\n\tAll(ctx)\n```\n\n----------------------------------------\n\nTITLE: Pet Schema with Validation Rules\nDESCRIPTION: Implementation of Pet schema with field and edge validation rules using elk annotations.\nSOURCE: https://github.com/ent/ent/blob/master/doc/website/blog/2021-07-29-generate-a-fully-working-go-crud-http-api-with-ent.md#2025-04-22_snippet_10\n\nLANGUAGE: go\nCODE:\n```\n// Fields of the Pet.\nfunc (Pet) Fields() []ent.Field {\n    return []ent.Field{\n        field.String(\"name\"),\n        field.Int(\"age\").\n            Positive().\n            Annotations(\n                elk.CreateValidation(\"required,gt=0\"),\n                elk.UpdateValidation(\"gt=0\"),\n            ),\n    }\n}\n\n// Edges of the Pet.\nfunc (Pet) Edges() []ent.Edge {\n    return []ent.Edge{\n        edge.From(\"owner\", User.Type).\n            Ref(\"pets\").\n            Unique().\n            Required().\n            Annotations(elk.Validation(\"required\")),\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing the External Service in Go\nDESCRIPTION: Creates a Go implementation for the ExtService that implements the TopUser method defined in the proto file. This service retrieves the user with the highest ID from the database.\nSOURCE: https://github.com/ent/ent/blob/master/doc/md/tutorial-grpc-ext-service.md#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\npackage entpb\n\nimport (\n\t\"context\"\n\n\t\"github.com/rotemtam/ent-grpc-example/ent\"\n\t\"github.com/rotemtam/ent-grpc-example/ent/user\"\n\t\"google.golang.org/protobuf/types/known/emptypb\"\n)\n\n// ExtService implements ExtServiceServer.\ntype ExtService struct {\n\tclient *ent.Client\n\tUnimplementedExtServiceServer\n}\n\n// TopUser returns the user with the highest ID.\nfunc (s *ExtService) TopUser(ctx context.Context, _ *emptypb.Empty) (*User, error) {\n\tid := s.client.User.Query().Aggregate(ent.Max(user.FieldID)).IntX(ctx)\n\tuser := s.client.User.GetX(ctx, id)\n\treturn toProtoUser(user)\n}\n\n// NewExtService returns a new ExtService.\nfunc NewExtService(client *ent.Client) *ExtService {\n\treturn &ExtService{\n\t\tclient: client,\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Defining GraphQL Filter Input\nDESCRIPTION: Example of a GraphQL filter input that can be mapped to an Ent query. It demonstrates filtering todos by parent and children status.\nSOURCE: https://github.com/ent/ent/blob/master/doc/md/tutorial-todo-gql-filter-input.md#2025-04-22_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\n{\n  hasParent: true,\n  hasChildrenWith: {\n    status: IN_PROGRESS,\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Testing Hooks with In-Memory Bucket (Go)\nDESCRIPTION: Example code demonstrating the usage of the implemented hooks with an in-memory bucket, including user creation and deletion scenarios.\nSOURCE: https://github.com/ent/ent/blob/master/doc/website/blog/2021-11-1-sync-to-external-data-systems-using-hooks.md#2025-04-22_snippet_4\n\nLANGUAGE: go\nCODE:\n```\nfunc Example_SyncCreate() {\n\tctx := context.Background()\n\t// Open an in-memory bucket.\n\tbucket, err := blob.OpenBucket(ctx, \"mem://photos/\")\n\tif err != nil {\n\t\tlog.Fatal(\"failed opening bucket:\", err)\n\t}\n\tclient, err := ent.Open(\n\t\tdialect.SQLite,\n\t\t\"file:ent?mode=memory&cache=shared&_fk=1\",\n\t\t// Inject the blob.Bucket on client initialization.\n\t\tent.Bucket(bucket),\n\t)\n\tif err != nil {\n\t\tlog.Fatal(\"failed opening connection to sqlite:\", err)\n\t}\n\tdefer client.Close()\n\tif err := client.Schema.Create(ctx); err != nil {\n\t\tlog.Fatal(\"failed creating schema resources:\", err)\n\t}\n\tif err := client.User.Create().SetName(\"a8m\").SetAvatarURL(\"a8m.png\").Exec(ctx); err == nil {\n\t\tlog.Fatal(\"expect user creation to fail because the image does not exist in the bucket\")\n\t}\n\tif err := bucket.WriteAll(ctx, \"a8m.png\", []byte{255, 255, 255}, nil); err != nil {\n\t\tlog.Fatalf(\"failed uploading image to the bucket: %v\", err)\n\t}\n\tfmt.Printf(\"%q\\n\", keys(ctx, bucket))\n\n\t// User creation should pass as image was uploaded to the bucket.\n\tu := client.User.Create().SetName(\"a8m\").SetAvatarURL(\"a8m.png\").SaveX(ctx)\n\n\t// Deleting a user, should delete also its image from the bucket.\n\tclient.User.DeleteOne(u).ExecX(ctx)\n\tfmt.Printf(\"%q\\n\", keys(ctx, bucket))\n\n\t// Output:\n\t// [\"a8m.png\"]\n\t// []\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Go Generate Commands\nDESCRIPTION: Go code for configuring go generate commands for Ent and GraphQL code generation.\nSOURCE: https://github.com/ent/ent/blob/master/doc/md/tutorial-todo-gql.mdx#2025-04-22_snippet_4\n\nLANGUAGE: go\nCODE:\n```\npackage todo\n\n//go:generate go run -mod=mod ./ent/entc.go\n```\n\n----------------------------------------\n\nTITLE: Defining Schema Hooks for User Entity (Go)\nDESCRIPTION: Implements two hooks: EnsureImageExists to verify avatar existence, and DeleteOrphans to remove orphaned images when a user is deleted.\nSOURCE: https://github.com/ent/ent/blob/master/doc/website/blog/2021-11-1-sync-to-external-data-systems-using-hooks.md#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\n// Hooks of the User.\nfunc (User) Hooks() []ent.Hook {\n\treturn []ent.Hook{\n\t\tEnsureImageExists(),\n\t\tDeleteOrphans(),\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Ent Schema with JSON Field\nDESCRIPTION: Modifies the User schema to include both the original bytes field and the new JSON field\nSOURCE: https://github.com/ent/ent/blob/master/doc/website/blog/2022-12-01-changing-column-types-with-zero-downtime.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nfunc (User) Fields() []ent.Field {\n    return []ent.Field{\n        field.Bytes(\"meta\"),\n        field.JSON(\"meta_json\", &types.Meta{}).Optional(),\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Modifying GraphQL Mutation Resolver (Go)\nDESCRIPTION: Changes to use the client from context in GraphQL mutation resolvers for transactional operations.\nSOURCE: https://github.com/ent/ent/blob/master/doc/md/tutorial-todo-gql-tx-mutation.md#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\n}\n+func (mutationResolver) CreateTodo(ctx context.Context, input ent.CreateTodoInput) (*ent.Todo, error) {\n+\tclient := ent.FromContext(ctx)\n+\treturn client.Todo.Create().SetInput(input).Save(ctx)\n-func (r *mutationResolver) CreateTodo(ctx context.Context, input ent.CreateTodoInput) (*ent.Todo, error) {\n-\treturn r.client.Todo.Create().SetInput(input).Save(ctx)\n}\n```\n\n----------------------------------------\n\nTITLE: Using Filter Types in GraphQL Resolvers\nDESCRIPTION: Demonstrates how to use the new filter types in GraphQL resolvers to filter queries.\nSOURCE: https://github.com/ent/ent/blob/master/doc/website/blog/2021-07-01-automatic-graphql-filter-generation.md#2025-04-22_snippet_8\n\nLANGUAGE: go\nCODE:\n```\nfunc (r *queryResolver) Todos(ctx context.Context, after *ent.Cursor, first *int, before *ent.Cursor, last *int, orderBy *ent.TodoOrder, where *ent.TodoWhereInput) (*ent.TodoConnection, error) {\n\treturn r.client.Todo.Query().\n\t\tPaginate(ctx, after, first, before, last,\n\t\t\tent.WithTodoOrder(orderBy),\n\t\t\tent.WithTodoFilter(where.Filter),\n\t\t)\n}\n```\n\n----------------------------------------\n\nTITLE: Generated Proto Definitions for Entity Relations\nDESCRIPTION: Auto-generated protobuf message definitions showing the relationship between User and Category entities.\nSOURCE: https://github.com/ent/ent/blob/master/doc/md/tutorial-grpc-edges.md#2025-04-22_snippet_2\n\nLANGUAGE: protobuf\nCODE:\n```\nmessage Category {\n  int64 id = 1;\n\n  string name = 2;\n\n  User admin = 3;\n}\n\nmessage User {\n  int64 id = 1;\n\n  string name = 2;\n\n  string email_address = 3;\n\n  google.protobuf.StringValue alias = 4;\n\n  repeated Category administered = 5;\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Ent Code\nDESCRIPTION: This shell command regenerates Ent code after schema changes.\nSOURCE: https://github.com/ent/ent/blob/master/doc/md/versioned/06-verifying-safety.mdx#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ngo generate ./...\n```\n\n----------------------------------------\n\nTITLE: Generated Get Method Implementation for UserService in Go\nDESCRIPTION: This snippet shows the generated implementation of the Get method for the UserService, which retrieves a User entity by ID and handles different view options.\nSOURCE: https://github.com/ent/ent/blob/master/doc/md/tutorial-grpc-generating-a-service.md#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nfunc (svc *UserService) Get(ctx context.Context, req *GetUserRequest) (*User, error) {\n\tvar (\n\t\terr error\n\t\tget *ent.User\n\t)\n\tid := int(req.GetId())\n\tswitch req.GetView() {\n\tcase GetUserRequest_VIEW_UNSPECIFIED, GetUserRequest_BASIC:\n\t\tget, err = svc.client.User.Get(ctx, id)\n\tcase GetUserRequest_WITH_EDGE_IDS:\n\t\tget, err = svc.client.User.Query().\n\t\t\tWhere(user.ID(id)).\n\t\t\tOnly(ctx)\n\tdefault:\n\t\treturn nil, status.Error(codes.InvalidArgument, \"invalid argument: unknown view\")\n\t}\n\tswitch {\n\tcase err == nil:\n\t\treturn toProtoUser(get)\n\tcase ent.IsNotFound(err):\n\t\treturn nil, status.Errorf(codes.NotFound, \"not found: %s\", err)\n\tdefault:\n\t\treturn nil, status.Errorf(codes.Internal, \"internal error: %s\", err)\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Complex GraphQL Query with Filters\nDESCRIPTION: Example of a complex GraphQL query using the new filter types. It demonstrates the use of logical operators (or, not) and field predicates.\nSOURCE: https://github.com/ent/ent/blob/master/doc/md/tutorial-todo-gql-filter-input.md#2025-04-22_snippet_7\n\nLANGUAGE: graphql\nCODE:\n```\nquery {\n  todos(\n    where: {\n      or: [\n        {\n          status: COMPLETED\n        },\n        {\n          not: {\n            hasParent: true,\n            status: IN_PROGRESS\n          }\n        }\n      ]\n    }\n  ) {\n    edges {\n      node {\n        id\n        text\n      }\n      cursor\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining User Entity Schema in Go\nDESCRIPTION: Defines the schema for the User entity with two unique fields: name and email_address.\nSOURCE: https://github.com/ent/ent/blob/master/doc/md/tutorial-grpc-setting-up.md#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\npackage schema\n\nimport (\n\t\"entgo.io/ent\"\n\t\"entgo.io/ent/schema/field\"\n)\n\n// User holds the schema definition for the User entity.\ntype User struct {\n\tent.Schema\n}\n\n// Fields of the User.\nfunc (User) Fields() []ent.Field {\n\treturn []ent.Field{\n\t\tfield.String(\"name\").\n\t\t\tUnique(),\n\t\tfield.String(\"email_address\").\n\t\t\tUnique(),\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Graph Data Structure in Go\nDESCRIPTION: Function to create a sample graph with users, cars, and groups with their relationships\nSOURCE: https://github.com/ent/ent/blob/master/doc/md/getting-started.mdx#2025-04-22_snippet_18\n\nLANGUAGE: go\nCODE:\n```\nfunc CreateGraph(ctx context.Context, client *ent.Client) error {\n\t// First, create the users.\n\ta8m, err := client.User.\n\t\tCreate().\n\t\tSetAge(30).\n\t\tSetName(\"Ariel\").\n\t\tSave(ctx)\n\tif err != nil {\n\t\treturn err\n\t}\n\tneta, err := client.User.\n\t\tCreate().\n\t\tSetAge(28).\n\t\tSetName(\"Neta\").\n\t\tSave(ctx)\n\tif err != nil {\n\t\treturn err\n\t}\n\t// Then, create the cars, and attach them to the users created above.\n\terr = client.Car.\n\t\tCreate().\n\t\tSetModel(\"Tesla\").\n\t\tSetRegisteredAt(time.Now()).\n\t\t// Attach this car to Ariel.\n\t\tSetOwner(a8m).\n\t\tExec(ctx)\n\tif err != nil {\n\t\treturn err\n\t}\n\terr = client.Car.\n\t\tCreate().\n\t\tSetModel(\"Mazda\").\n\t\tSetRegisteredAt(time.Now()).\n\t\t// Attach this car to Ariel.\n\t\tSetOwner(a8m).\n\t\tExec(ctx)\n\tif err != nil {\n\t\treturn err\n\t}\n\terr = client.Car.\n\t\tCreate().\n\t\tSetModel(\"Ford\").\n\t\tSetRegisteredAt(time.Now()).\n\t\t// Attach this car to Neta.\n\t\tSetOwner(neta).\n\t\tExec(ctx)\n\tif err != nil {\n\t\treturn err\n\t}\n\t// Create the groups, and add their users in the creation.\n\terr = client.Group.\n\t\tCreate().\n\t\tSetName(\"GitLab\").\n\t\tAddUsers(neta, a8m).\n\t\tExec(ctx)\n\tif err != nil {\n\t\treturn err\n\t}\n\terr = client.Group.\n\t\tCreate().\n\t\tSetName(\"GitHub\").\n\t\tAddUsers(a8m).\n\t\tExec(ctx)\n\tif err != nil {\n\t\treturn err\n\t}\n\tlog.Println(\"The graph was created successfully\")\n\treturn nil\n}\n```\n\n----------------------------------------\n\nTITLE: Generated gRPC Service Definition in Protobuf\nDESCRIPTION: This snippet shows the automatically generated gRPC service definition in Protobuf format for the User entity.\nSOURCE: https://github.com/ent/ent/blob/master/doc/website/blog/2021-03-18-generating-a-grpc-server-with-ent.md#2025-04-22_snippet_11\n\nLANGUAGE: protobuf\nCODE:\n```\nservice UserService {\n  rpc Create ( CreateUserRequest ) returns ( User );\n\n  rpc Get ( GetUserRequest ) returns ( User );\n\n  rpc Update ( UpdateUserRequest ) returns ( User );\n\n  rpc Delete ( DeleteUserRequest ) returns ( google.protobuf.Empty );\n}\n```\n\n----------------------------------------\n\nTITLE: Mapping Edge Filter Query to Ent Query\nDESCRIPTION: Corresponding Ent query in Go for the GraphQL query with edge filters. It demonstrates filtering todos with a parent and children with IN_PROGRESS status.\nSOURCE: https://github.com/ent/ent/blob/master/doc/md/tutorial-todo-gql-filter-input.md#2025-04-22_snippet_11\n\nLANGUAGE: go\nCODE:\n```\nclient.Todo.\n\tQuery().\n\tWhere(\n\t\ttodo.HasParent(),\n\t\ttodo.HasChildrenWith(\n\t\t\ttodo.StatusEQ(todo.StatusInProgress),\n\t\t),\n\t).\n\tAll(ctx)\n```\n\n----------------------------------------\n\nTITLE: Edge Field Definition with Foreign Keys\nDESCRIPTION: Example showing how to expose foreign keys as regular fields on the schema using the Field option for edges.\nSOURCE: https://github.com/ent/ent/blob/master/doc/md/schema-edges.mdx#2025-04-22_snippet_19\n\nLANGUAGE: go\nCODE:\n```\n// Fields of the Post.\nfunc (Post) Fields() []ent.Field {\n\treturn []ent.Field{\n\t\tfield.Int(\"author_id\").\n\t\t\tOptional(),\n\t}\n}\n\n// Edges of the Post.\nfunc (Post) Edges() []ent.Edge {\n\treturn []ent.Edge{\n\t\tedge.To(\"author\", User.Type).\n\t\t\t// Bind the \"author_id\" field to this edge.\n\t\t\tField(\"author_id\").\n\t\t\tUnique(),\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Defining User Schema with Group Relations in Go\nDESCRIPTION: Schema definition for User entity with username field and many-to-many relation to Groups. Includes unique index on username field.\nSOURCE: https://github.com/ent/ent/blob/master/doc/website/blog/2022-03-14-announcing-versioned-migrations.md#2025-04-22_snippet_7\n\nLANGUAGE: go\nCODE:\n```\npackage schema\n\nimport (\n\t\"entgo.io/ent\"\n\t\"entgo.io/ent/schema/edge\"\n\t\"entgo.io/ent/schema/field\"\n\t\"entgo.io/ent/schema/index\"\n)\n\n// User holds the schema definition for the User entity.\ntype User struct {\n\tent.Schema\n}\n\n// Fields of the User.\nfunc (User) Fields() []ent.Field {\n\treturn []ent.Field{\n\t\tfield.String(\"username\"),\n\t}\n}\n\n// Edges of the User.\nfunc (User) Edges() []ent.Edge {\n\treturn []ent.Edge{\n\t\tedge.From(\"groups\", Group.Type).\n\t\t\tRef(\"users\"),\n\t}\n}\n\n// Indexes of the User.\nfunc (User) Indexes() []ent.Index {\n\treturn []ent.Index{\n\t\tindex.Fields(\"username\").Unique(),\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Generated UserServiceClient Interface in Go\nDESCRIPTION: This snippet shows the generated UserServiceClient interface in Go, which defines the client API for the UserService gRPC service.\nSOURCE: https://github.com/ent/ent/blob/master/doc/md/tutorial-grpc-generating-a-service.md#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\ntype UserServiceClient interface {\n\tCreate(ctx context.Context, in *CreateUserRequest, opts ...grpc.CallOption) (*User, error)\n\tGet(ctx context.Context, in *GetUserRequest, opts ...grpc.CallOption) (*User, error)\n\tUpdate(ctx context.Context, in *UpdateUserRequest, opts ...grpc.CallOption) (*User, error)\n\tDelete(ctx context.Context, in *DeleteUserRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)\n\tList(ctx context.Context, in *ListUserRequest, opts ...grpc.CallOption) (*ListUserResponse, error)\n\tBatchCreate(ctx context.Context, in *BatchCreateUsersRequest, opts ...grpc.CallOption) (*BatchCreateUsersResponse, error)\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Ariel's Cars with Filtering in Go\nDESCRIPTION: Function to query cars connected to Ariel through groups, excluding specific models\nSOURCE: https://github.com/ent/ent/blob/master/doc/md/getting-started.mdx#2025-04-22_snippet_20\n\nLANGUAGE: go\nCODE:\n```\nfunc QueryArielCars(ctx context.Context, client *ent.Client) error {\n\t// Get \"Ariel\" from previous steps.\n\ta8m := client.User.\n\t\tQuery().\n\t\tWhere(\n\t\t\tuser.HasCars(),\n\t\t\tuser.Name(\"Ariel\"),\n\t\t).\n\t\tOnlyX(ctx)\n\tcars, err := a8m. \t\t\t\t\t\t// Get the groups, that a8m is connected to:\n\t\t\tQueryGroups(). \t\t\t\t// (Group(Name=GitHub), Group(Name=GitLab),)\n\t\t\tQueryUsers().  \t\t\t\t// (User(Name=Ariel, Age=30), User(Name=Neta, Age=28),)\n\t\t\tQueryCars().   \t\t\t\t//\n\t\t\tWhere(         \t\t\t\t//\n\t\t\t\tcar.Not( \t\t\t\t//\tGet Neta and Ariel cars, but filter out\n\t\t\t\t\tcar.Model(\"Mazda\"),\t\t//\tthose who named \"Mazda\"\n\t\t\t\t), \t\t\t\t\t\t//\n\t\t\t). \t\t\t\t\t\t\t//\n\t\t\tAll(ctx)\n\tif err != nil {\n\t\treturn fmt.Errorf(\"failed getting cars: %w\", err)\n\t}\n\tlog.Println(\"cars returned:\", cars)\n\t// Output: (Car(Model=Tesla, RegisteredAt=<Time>), Car(Model=Ford, RegisteredAt=<Time>),)\n\treturn nil\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Car and Group Schemas with ent CLI\nDESCRIPTION: Uses ent CLI to generate new schemas for Car and Group entities.\nSOURCE: https://github.com/ent/ent/blob/master/doc/md/getting-started.mdx#2025-04-22_snippet_7\n\nLANGUAGE: console\nCODE:\n```\ngo run -mod=mod entgo.io/ent/cmd/ent new Car Group\n```\n\n----------------------------------------\n\nTITLE: Applying Schema Changes with Atlas Go SDK\nDESCRIPTION: This Go code snippet demonstrates how to use the Atlas Go SDK to programmatically apply schema changes to a database. It initializes an Atlas client and uses the SchemaApply method to update the database schema.\nSOURCE: https://github.com/ent/ent/blob/master/doc/md/migration/trigger.mdx#2025-04-22_snippet_9\n\nLANGUAGE: go\nCODE:\n```\nac, err := atlasexec.NewClient(\".\", \"atlas\")\nif err != nil {\n\tlog.Fatalf(\"failed to initialize client: %w\", err)\n}\n// Automatically update the database with the desired schema.\n// Another option, is to use 'migrate apply' or 'schema apply' manually.\nif _, err := ac.SchemaApply(ctx, &atlasexec.SchemaApplyParams{\n\tEnv: \"local\",\n\tURL: \"postgres://postgres:pass@localhost:5432/database?search_path=public&sslmode=disable\",\n\tAutoApprove: true,\n}); err != nil {\n    log.Fatalf(\"failed to apply schema changes: %w\", err)\n}\n```\n\n----------------------------------------\n\nTITLE: Using Mixin in User Schema\nDESCRIPTION: Go code showing how to incorporate the Mixin schema into a User schema for shared configuration.\nSOURCE: https://github.com/ent/ent/blob/master/doc/md/multischema-migrations.mdx#2025-04-22_snippet_4\n\nLANGUAGE: go\nCODE:\n```\n// User holds the edge schema definition of the User entity.\ntype User struct {\n\tent.Schema\n}\n\n// Mixin defines the schemas that mixed into this schema.\nfunc (User) Mixin() []ent.Mixin {\n\treturn []ent.Mixin{\n//highlight-next-line\n\t\tMixin{},\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Using City-Street Relationship with Edge Index in Ent (Go)\nDESCRIPTION: Shows how to create cities and streets, demonstrating the uniqueness constraint enforced by the edge index. This example creates two cities and attempts to add streets with the same name to each city.\nSOURCE: https://github.com/ent/ent/blob/master/examples/README.md#2025-04-22_snippet_20\n\nLANGUAGE: go\nCODE:\n```\nfunc Do(ctx context.Context, client *ent.Client) error {\n\t// Unlike `Save`, `SaveX` panics if an error occurs.\n\ttlv := client.City.\n\t\tCreate().\n\t\tSetName(\"TLV\").\n\t\tSaveX(ctx)\n\tnyc := client.City.\n\t\tCreate().\n\t\tSetName(\"NYC\").\n\t\tSaveX(ctx)\n\t// Add a street \"ST\" to \"TLV\".\n\tclient.Street.\n\t\tCreate().\n\t\tSetName(\"ST\").\n\t\tSetCity(tlv).\n\t\tSaveX(ctx)\n\t// This operation fails because \"ST\"\n\t// was already created under \"TLV\".\n\tif err := client.Street.\n\t\tCreate().\n\t\tSetName(\"ST\").\n\t\tSetCity(tlv).\n\t\tExec(ctx); err == nil {\n\t\treturn fmt.Errorf(\"expecting creation to fail\")\n\t}\n\t// Add a street \"ST\" to \"NYC\".\n\tclient.Street.\n\t\tCreate().\n\t\tSetName(\"ST\").\n\t\tSetCity(nyc).\n\t\tSaveX(ctx)\n\treturn nil\n}\n```\n\n----------------------------------------\n\nTITLE: Generating User Schema with ent CLI\nDESCRIPTION: Uses the ent CLI to generate a new User schema.\nSOURCE: https://github.com/ent/ent/blob/master/doc/md/getting-started.mdx#2025-04-22_snippet_1\n\nLANGUAGE: console\nCODE:\n```\ngo run -mod=mod entgo.io/ent/cmd/ent new User\n```\n\n----------------------------------------\n\nTITLE: Generated TodoWhereInput Struct in Go\nDESCRIPTION: Shows the automatically generated Go struct for TodoWhereInput, used for filtering Todo queries.\nSOURCE: https://github.com/ent/ent/blob/master/doc/website/blog/2021-07-01-automatic-graphql-filter-generation.md#2025-04-22_snippet_5\n\nLANGUAGE: go\nCODE:\n```\n// TodoWhereInput represents a where input for filtering Todo queries.\ntype TodoWhereInput struct {\n\tNot *TodoWhereInput   `json:\"not,omitempty\"`\n\tOr  []*TodoWhereInput `json:\"or,omitempty\"`\n\tAnd []*TodoWhereInput `json:\"and,omitempty\"`\n\n\t// \"created_at\" field predicates.\n\tCreatedAt      *time.Time  `json:\"createdAt,omitempty\"`\n\tCreatedAtNEQ   *time.Time  `json:\"createdAtNEQ,omitempty\"`\n\tCreatedAtIn    []time.Time `json:\"createdAtIn,omitempty\"`\n\tCreatedAtNotIn []time.Time `json:\"createdAtNotIn,omitempty\"`\n\tCreatedAtGT    *time.Time  `json:\"createdAtGT,omitempty\"`\n\tCreatedAtGTE   *time.Time  `json:\"createdAtGTE,omitempty\"`\n\tCreatedAtLT    *time.Time  `json:\"createdAtLT,omitempty\"`\n\tCreatedAtLTE   *time.Time  `json:\"createdAtLTE,omitempty\"`\n\n\t// \"status\" field predicates.\n\tStatus      *todo.Status  `json:\"status,omitempty\"`\n\tStatusNEQ   *todo.Status  `json:\"statusNEQ,omitempty\"`\n\tStatusIn    []todo.Status `json:\"statusIn,omitempty\"`\n\tStatusNotIn []todo.Status `json:\"statusNotIn,omitempty\"`\n\n    // .. truncated ..\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing the Extension Interface in Go\nDESCRIPTION: The Extension interface definition that must be implemented by all extensions. It includes methods for hooks, annotations, templates, and options.\nSOURCE: https://github.com/ent/ent/blob/master/doc/md/extension.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\ntype Extension interface {\n\t// Hooks holds an optional list of Hooks to apply\n\t// on the graph before/after the code-generation.\n\tHooks() []gen.Hook\n\n\t// Annotations injects global annotations to the gen.Config object that\n\t// can be accessed globally in all templates. Unlike schema annotations,\n\t// being serializable to JSON raw value is not mandatory.\n\t//\n\t//\t{{- with $.Config.Annotations.GQL }}\n\t//\t\t{{/* Annotation usage goes here. */}}\n\t//\t{{- end }}\n\t//\n\tAnnotations() []Annotation\n\n\t// Templates specifies a list of alternative templates\n\t// to execute or to override the default.\n\tTemplates() []*gen.Template\n\n\t// Options specifies a list of entc.Options to evaluate on\n\t// the gen.Config before executing the code generation.\n\tOptions() []Option\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Ent Client and Example Function in Go\nDESCRIPTION: Sets up an Ent client connection to MySQL and defines the main function to run an example. Includes error handling and context creation.\nSOURCE: https://github.com/ent/ent/blob/master/doc/website/blog/2021-10-11-generating-ent-schemas-from-existing-sql-databases.md#2025-04-22_snippet_4\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"context\"\n\t\"fmt\"\n\t\"log\"\n\n\t\"entimport-example/ent\"\n\n\t\"entgo.io/ent/dialect\"\n\t_ \"github.com/go-sql-driver/mysql\"\n)\n\nfunc main() {\n\tclient, err := ent.Open(dialect.MySQL, \"root:pass@tcp(localhost:3306)/entimport?parseTime=True\")\n\tif err != nil {\n\t\tlog.Fatalf(\"failed opening connection to mysql: %v\", err)\n\t}\n\tdefer client.Close()\n\tctx := context.Background()\n\texample(ctx, client)\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Group Schema Fields in Go\nDESCRIPTION: Adds a name field with regex validation to the Group schema.\nSOURCE: https://github.com/ent/ent/blob/master/doc/md/getting-started.mdx#2025-04-22_snippet_9\n\nLANGUAGE: go\nCODE:\n```\n// Fields of the Group.\nfunc (Group) Fields() []ent.Field {\n\treturn []ent.Field{\n\t\tfield.String(\"name\").\n\t\t\t// Regexp validation for group name.\n\t\t\tMatch(regexp.MustCompile(\"[a-zA-Z_]+$\")),\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Get Method for UserService in Go\nDESCRIPTION: This snippet demonstrates the implementation of the Get method for the UserService, which retrieves a user by ID from the database.\nSOURCE: https://github.com/ent/ent/blob/master/doc/website/blog/2021-03-18-generating-a-grpc-server-with-ent.md#2025-04-22_snippet_13\n\nLANGUAGE: go\nCODE:\n```\nfunc (svc *UserService) Get(ctx context.Context, req *GetUserRequest) (*User, error) {\n\tget, err := svc.client.User.Get(ctx, int(req.GetId()))\n\tswitch {\n\tcase err == nil:\n\t\treturn toProtoUser(get), nil\n\tcase ent.IsNotFound(err):\n\t\treturn nil, status.Errorf(codes.NotFound, \"not found: %s\", err)\n\tdefault:\n\t\treturn nil, status.Errorf(codes.Internal, \"internal error: %s\", err)\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling SQL Locking Feature in Ent Generation\nDESCRIPTION: This snippet shows how to modify the generate.go file to enable the sql/lock feature in Ent. This is required to use FOR SHARE/FOR UPDATE statements in your Ent queries.\nSOURCE: https://github.com/ent/ent/blob/master/doc/website/blog/2021-07-22-database-locking-techniques-with-ent.md#2025-04-22_snippet_3\n\nLANGUAGE: Go\nCODE:\n```\n//go:generate go run -mod=mod entgo.io/ent/cmd/ent generate --feature sql/lock ./schema\n```\n\n----------------------------------------\n\nTITLE: Using NOT Predicate in Ent Queries (Go)\nDESCRIPTION: Example of using the Not predicate to negate conditions in Ent queries, filtering out pets whose names start with 'Ari'.\nSOURCE: https://github.com/ent/ent/blob/master/doc/md/predicates.md#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nclient.Pet.\n\tQuery().\n\tWhere(pet.Not(pet.NameHasPrefix(\"Ari\"))).\n\tAll(ctx)\n```\n\n----------------------------------------\n\nTITLE: Setting Up Main Resolver\nDESCRIPTION: Go code for setting up the main GraphQL resolver with Ent client dependency.\nSOURCE: https://github.com/ent/ent/blob/master/doc/md/tutorial-todo-gql.mdx#2025-04-22_snippet_8\n\nLANGUAGE: go\nCODE:\n```\npackage todo\n\nimport (\n\t\"todo/ent\"\n\t\n\t\"github.com/99designs/gqlgen/graphql\"\n)\n\ntype Resolver struct{ client *ent.Client }\n\nfunc NewSchema(client *ent.Client) graphql.ExecutableSchema {\n\treturn NewExecutableSchema(Config{\n\t\tResolvers: &Resolver{client},\n\t})\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Pet with Owner ID Using Edge-field Support (Go)\nDESCRIPTION: This code demonstrates the simplified approach to retrieving a Pet with its Owner's ID after implementing edge-field support in Ent.\nSOURCE: https://github.com/ent/ent/blob/master/doc/website/blog/2021-03-12-announcing-edge-field-support.md#2025-04-22_snippet_4\n\nLANGUAGE: go\nCODE:\n```\nfunc Test(t *testing.T) {\n\tctx := context.Background()\n\tc := enttest.Open(t, dialect.SQLite, \"file:ent?mode=memory&cache=shared&_fk=1\")\n\tdefer c.Close()\n\n\tu := c.User.Create().\n\t\tSetUserName(\"rotem\").\n\t\tSaveX(ctx)\n\n\tp := c.Pet.Create().\n\t\tSetOwner(u).\n\t\tSetName(\"donut\").\n\t\tSaveX(ctx)\n\n\tpetWithOwnerId := c.Pet.GetX(ctx, p.ID) // <-- Simply retrieve the Pet\n\n\tfmt.Println(petWithOwnerId.OwnerID)\n\t// Output: 1\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Todo Query Resolver\nDESCRIPTION: Go code implementing the Todo query resolver to fetch all todos.\nSOURCE: https://github.com/ent/ent/blob/master/doc/md/tutorial-todo-gql.mdx#2025-04-22_snippet_10\n\nLANGUAGE: go\nCODE:\n```\nfunc (r *queryResolver) Todos(ctx context.Context) ([]*ent.Todo, error) {\n\treturn r.client.Todo.Query().All(ctx)\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Query Offset in Ent Go\nDESCRIPTION: Shows how to skip a specific number of entities in a query result using the Offset method.\nSOURCE: https://github.com/ent/ent/blob/master/doc/md/paging.mdx#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nusers, err := client.User.\n\tQuery().\n\tOffset(10).\n\tAll(ctx)\n```\n\n----------------------------------------\n\nTITLE: Testing Pessimistic Locking in Ent\nDESCRIPTION: This test function verifies that when two processes try to edit the same record using pessimistic locking, only one will succeed. It uses a real MySQL instance and demonstrates the behavior of lock acquisition and failure.\nSOURCE: https://github.com/ent/ent/blob/master/doc/website/blog/2021-07-22-database-locking-techniques-with-ent.md#2025-04-22_snippet_5\n\nLANGUAGE: Go\nCODE:\n```\nfunc TestPessimistic(t *testing.T) {\n\tctx := context.Background()\n\tclient := enttest.Open(t, dialect.MySQL, \"root:pass@tcp(localhost:3306)/test?parseTime=True\")\n\n\t// Create the user for the first time.\n\torig := client.User.Create().SetOnline(true).SaveX(ctx)\n\n\t// Open a new transaction. This transaction will acquire the lock on our user record.\n\ttx, err := client.Tx(ctx)\n\tif err != nil {\n\t\tlog.Fatalf(\"failed creating transaction: %v\", err)\n\t}\n\tdefer tx.Commit()\n\t\n\t// Open a second transaction. This transaction is expected to fail at \n\t// acquiring the lock on our user record. \n\ttx2, err := client.Tx(ctx)\n\tif err != nil {\n\t\tlog.Fatalf(\"failed creating transaction: %v\", err)\n\t}\n\tdefer tx.Commit()\n\t\n\t// The first update is expected to succeed.\n\tif _, err := pessimisticUpdate(tx, orig.ID, true); err != nil {\n\t\tlog.Fatalf(\"unexpected error: %s\", err)\n\t}\n\t\n\t// Because we did not run tx.Commit yet, the row is still locked when\n\t// we try to update it a second time. This operation is expected to \n\t// fail. \n\t_, err = pessimisticUpdate(tx2, orig.ID, true)\n\tif err == nil {\n\t\tlog.Fatal(\"expected second update to fail\")\n\t}\n\tfmt.Println(err)\n}\n```\n\n----------------------------------------\n\nTITLE: Generated TodoWhereInput in Go\nDESCRIPTION: Example of a generated TodoWhereInput struct in Go, which represents the filter input for Todo queries. It includes various field predicates and logical operators.\nSOURCE: https://github.com/ent/ent/blob/master/doc/md/tutorial-todo-gql-filter-input.md#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\n// TodoWhereInput represents a where input for filtering Todo queries.\ntype TodoWhereInput struct {\n\tNot *TodoWhereInput   `json:\"not,omitempty\"`\n\tOr  []*TodoWhereInput `json:\"or,omitempty\"`\n\tAnd []*TodoWhereInput `json:\"and,omitempty\"`\n\n\t// \"created_at\" field predicates.\n\tCreatedAt      *time.Time  `json:\"createdAt,omitempty\"`\n\tCreatedAtNEQ   *time.Time  `json:\"createdAtNEQ,omitempty\"`\n\tCreatedAtIn    []time.Time `json:\"createdAtIn,omitempty\"`\n\tCreatedAtNotIn []time.Time `json:\"createdAtNotIn,omitempty\"`\n\tCreatedAtGT    *time.Time  `json:\"createdAtGT,omitempty\"`\n\tCreatedAtGTE   *time.Time  `json:\"createdAtGTE,omitempty\"`\n\tCreatedAtLT    *time.Time  `json:\"createdAtLT,omitempty\"`\n\tCreatedAtLTE   *time.Time  `json:\"createdAtLTE,omitempty\"`\n\n\t// \"status\" field predicates.\n\tStatus      *todo.Status  `json:\"status,omitempty\"`\n\tStatusNEQ   *todo.Status  `json:\"statusNEQ,omitempty\"`\n\tStatusIn    []todo.Status `json:\"statusIn,omitempty\"`\n\tStatusNotIn []todo.Status `json:\"statusNotIn,omitempty\"`\n\n    // .. truncated ..\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Todo Items with Fields\nDESCRIPTION: Example showing how to create Todo items with the text field set\nSOURCE: https://github.com/ent/ent/blob/master/doc/md/tutorial-todo-crud.md#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nfunc Example_Todo() {\n\t// ...\n\ttask1, err := client.Todo.Create().SetText(\"Add GraphQL Example\").Save(ctx)\n\tif err != nil {\n\t\tlog.Fatalf(\"failed creating a todo: %v\", err)\n\t}\n\tfmt.Printf(\"%d: %q\\n\", task1.ID, task1.Text)\n\ttask2, err := client.Todo.Create().SetText(\"Add Tracing Example\").Save(ctx)\n\tif err != nil {\n\t\tlog.Fatalf(\"failed creating a todo: %v\", err)\n\t}\n\tfmt.Printf(\"%d: %q\\n\", task2.ID, task2.Text)\n    // Output:\n    // 1: \"Add GraphQL Example\"\n    // 2: \"Add Tracing Example\"\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Greeting Annotation\nDESCRIPTION: Adds support for customizing the greeting word through annotations.\nSOURCE: https://github.com/ent/ent/blob/master/doc/website/blog/2021-09-02-ent-extension-api.md#2025-04-22_snippet_4\n\nLANGUAGE: go\nCODE:\n```\ntype GreetingWord string\n\nfunc (GreetingWord) Name() string {\n\treturn \"GreetingWord\"\n}\n\ntype GreetExtension struct {\n\tentc.DefaultExtension\n\tWord GreetingWord\n}\n\nfunc (s *GreetExtension) Annotations() []entc.Annotation {\n\treturn []entc.Annotation{\n\t\ts.Word,\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Custom SQL Modifiers to Ent Queries\nDESCRIPTION: Demonstrates how to use the SQL modifier feature to add custom SQL clauses and expressions to Ent queries.\nSOURCE: https://github.com/ent/ent/blob/master/doc/md/features.md#2025-04-22_snippet_4\n\nLANGUAGE: go\nCODE:\n```\nclient.Pet.\n\tQuery().\n\tModify(func(s *sql.Selector) {\n\t\ts.Select(\"SUM(LENGTH(name))\")\n\t}).\n\tIntX(ctx)\n```\n\n----------------------------------------\n\nTITLE: Generated gRPC Service Definition in Protocol Buffers\nDESCRIPTION: This Protocol Buffers snippet shows the resulting gRPC service definition after customizing the method generation. It includes only the Create, Get, List, and BatchCreate methods, as specified in the Ent schema.\nSOURCE: https://github.com/ent/ent/blob/master/doc/md/tutorial-grpc-service-generation-options.md#2025-04-22_snippet_2\n\nLANGUAGE: protobuf\nCODE:\n```\nservice UserService {\n  rpc Create ( CreateUserRequest ) returns ( User );\n\n  rpc Get ( GetUserRequest ) returns ( User );\n\n  rpc List ( ListUserRequest ) returns ( ListUserResponse );\n\n  rpc BatchCreate ( BatchCreateUsersRequest ) returns ( BatchCreateUsersResponse );\n}\n```\n\n----------------------------------------\n\nTITLE: UpsertSchema Mutator Definition in schemast\nDESCRIPTION: This snippet defines the UpsertSchema type which implements the Mutator interface. It's used to add or update a schema in the Context with specified Fields, Edges, Indexes, and Annotations.\nSOURCE: https://github.com/ent/ent/blob/master/doc/md/generating-ent-schemas.md#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\npackage schemast\n\n// UpsertSchema implements Mutator. UpsertSchema will add to the Context the type named\n// Name if not present and rewrite the type's Fields, Edges, Indexes and Annotations methods.\ntype UpsertSchema struct {\n\tName        string\n\tFields      []ent.Field\n\tEdges       []ent.Edge\n\tIndexes     []ent.Index\n\tAnnotations []schema.Annotation\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Base Schema for Shared Configuration\nDESCRIPTION: Go code demonstrating an alternative approach to share schema configuration using a base schema.\nSOURCE: https://github.com/ent/ent/blob/master/doc/md/multischema-migrations.mdx#2025-04-22_snippet_5\n\nLANGUAGE: go\nCODE:\n```\n// base holds the default configuration for most schemas in this package.\ntype base struct {\n\tent.Schema\n}\n\n// Annotations of the base schema.\nfunc (base) Annotations() []schema.Annotation {\n\treturn []schema.Annotation{\n\t\tentsql.Schema(\"db1\"),\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Executing Raw SQL Queries in Ent\nDESCRIPTION: Shows how to use the SQL execquery feature to execute raw SQL statements directly through the Ent client or transaction.\nSOURCE: https://github.com/ent/ent/blob/master/doc/md/features.md#2025-04-22_snippet_5\n\nLANGUAGE: go\nCODE:\n```\n// From ent.Client.\nif _, err := client.ExecContext(ctx, \"TRUNCATE t1\"); err != nil {\n\treturn err\n}\n\n// From ent.Tx.\ntx, err := client.Tx(ctx)\nif err != nil {\n\treturn err\n}\nif err := tx.User.Create().Exec(ctx); err != nil {\n\treturn err\n}\nif _, err := tx.ExecContext(\"SAVEPOINT user_created\"); err != nil {\n\treturn err\n}\n// ...\n```\n\n----------------------------------------\n\nTITLE: Querying Multiple Nodes\nDESCRIPTION: GraphQL query showing how to fetch multiple nodes using the Nodes interface.\nSOURCE: https://github.com/ent/ent/blob/master/doc/md/tutorial-todo-gql-node.md#2025-04-22_snippet_7\n\nLANGUAGE: graphql\nCODE:\n```\nquery {\n  nodes(ids: [1, 2]) {\n    id\n    ... on Todo {\n      text\n    }\n  }\n}\n\n# Output: { \"data\": { \"nodes\": [ { \"id\": \"1\", \"text\": \"Create GraphQL Example\" }, { \"id\": \"2\", \"text\": \"Create Tracing Example\" } ] } }\n```\n\n----------------------------------------\n\nTITLE: Generated Data Migration Function (Single Statement)\nDESCRIPTION: Go function to generate a data migration for backfilling empty user names with a default value. This demonstrates how to create a single-statement data migration using Ent.\nSOURCE: https://github.com/ent/ent/blob/master/doc/md/data-migrations.mdx#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\npackage migratedata\n\n// BackfillUnknown back-fills all empty users' names with the default value 'Unknown'.\nfunc BackfillUnknown(dir *migrate.LocalDir) error {\n\tw := &schema.DirWriter{Dir: dir}\n\tclient := ent.NewClient(ent.Driver(schema.NewWriteDriver(dialect.MySQL, w)))\n\n\t// Change all empty names to 'unknown'.\n\terr := client.User.\n\t\tUpdate().\n\t\tWhere(\n\t\t\tuser.NameEQ(\"\"),\n\t\t).\n\t\tSetName(\"Unknown\").\n\t\tExec(context.Background())\n\tif err != nil {\n\t\treturn fmt.Errorf(\"failed generating statement: %w\", err)\n\t}\n\n\t// Write the content to the migration directory.\n\treturn w.FlushChange(\n\t\t\"unknown_names\",\n\t\t\"Backfill all empty user names with default value 'unknown'.\",\n\t)\n}\n```\n\n----------------------------------------\n\nTITLE: Example GraphQL Mutation for Creating a Todo\nDESCRIPTION: This GraphQL mutation demonstrates how to create a new todo item using the custom mutation. It specifies the text, status, and priority of the todo.\nSOURCE: https://github.com/ent/ent/blob/master/doc/md/tutorial-todo-gql.mdx#2025-04-22_snippet_16\n\nLANGUAGE: graphql\nCODE:\n```\nmutation CreateTodo {\n    createTodo(input: {text: \"Create GraphQL Example\", status: IN_PROGRESS, priority: 1}) {\n        id\n        text\n        createdAt\n        priority\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Definition of schemast.Mutator Interface\nDESCRIPTION: This snippet shows the definition of the Mutator interface in the schemast package, which is used to modify a Context. Any type implementing this interface can be used to manipulate Ent schemas.\nSOURCE: https://github.com/ent/ent/blob/master/doc/md/generating-ent-schemas.md#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\npackage schemast\n\n// Mutator changes a Context.\ntype Mutator interface {\n\tMutate(ctx *Context) error\n}\n```\n\n----------------------------------------\n\nTITLE: Creating gRPC Server in Go\nDESCRIPTION: This snippet shows how to create a gRPC server that serves the generated UserService, including database initialization and server configuration.\nSOURCE: https://github.com/ent/ent/blob/master/doc/website/blog/2021-03-18-generating-a-grpc-server-with-ent.md#2025-04-22_snippet_14\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"context\"\n\t\"log\"\n\t\"net\"\n\n\t_ \"github.com/mattn/go-sqlite3\"\n\t\"ent-grpc-example/ent\"\n\t\"ent-grpc-example/ent/proto/entpb\"\n\t\"google.golang.org/grpc\"\n)\n\nfunc main() {\n\tclient, err := ent.Open(\"sqlite3\", \"file:ent?mode=memory&cache=shared&_fk=1\")\n\tif err != nil {\n\t\tlog.Fatalf(\"failed opening connection to sqlite: %v\", err)\n\t}\n\tdefer client.Close()\n\n\tif err := client.Schema.Create(context.Background()); err != nil {\n\t\tlog.Fatalf(\"failed creating schema resources: %v\", err)\n\t}\n\n\tsvc := entpb.NewUserService(client)\n\n\tserver := grpc.NewServer()\n\n\tentpb.RegisterUserServiceServer(server, svc)\n\n\tlis, err := net.Listen(\"tcp\", \":5000\")\n\tif err != nil {\n\t\tlog.Fatalf(\"failed listening: %s\", err)\n\t}\n\n\tif err := server.Serve(lis); err != nil {\n\t\tlog.Fatalf(\"server ended: %s\", err)\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Extension in Go using DefaultExtension\nDESCRIPTION: A simple example of creating an extension by embedding the DefaultExtension type to avoid implementing all interface methods.\nSOURCE: https://github.com/ent/ent/blob/master/doc/md/extension.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\npackage hello\n\n// GreetExtension implements entc.Extension.\ntype GreetExtension struct {\n\tentc.DefaultExtension\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Annotation to Extension Structure in Go\nDESCRIPTION: Adding the GreetingWord annotation to the GreetExtension struct to store the greeting configuration.\nSOURCE: https://github.com/ent/ent/blob/master/doc/md/extension.md#2025-04-22_snippet_5\n\nLANGUAGE: go\nCODE:\n```\ntype GreetExtension struct {\n\tentc.DefaultExtension\n\tword GreetingWord\n}\n```\n\n----------------------------------------\n\nTITLE: Generated gRPC Service Implementation for Optional Fields\nDESCRIPTION: Generated service code showing how optional fields are handled in the create builder function.\nSOURCE: https://github.com/ent/ent/blob/master/doc/md/tutorial-grpc-optional-fields.md#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nfunc (svc *UserService) createBuilder(user *User) (*ent.UserCreate, error) {\n\tm := svc.client.User.Create()\n\tif user.GetAlias() != nil {\n\t\tuserAlias := user.GetAlias().GetValue()\n\t\tm.SetAlias(userAlias)\n\t}\n\tuserEmailAddress := user.GetEmailAddress()\n\tm.SetEmailAddress(userEmailAddress)\n\tuserName := user.GetName()\n\tm.SetName(userName)\n\tfor _, item := range user.GetAdministered() {\n\t\tadministered := int(item.GetId())\n\t\tm.AddAdministeredIDs(administered)\n\t}\n\treturn m, nil\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Cars Edge to User Schema in Go\nDESCRIPTION: Defines a one-to-many relationship between User and Car entities.\nSOURCE: https://github.com/ent/ent/blob/master/doc/md/getting-started.mdx#2025-04-22_snippet_10\n\nLANGUAGE: go\nCODE:\n```\n// Edges of the User.\nfunc (User) Edges() []ent.Edge {\n\treturn []ent.Edge{\n\t\tedge.To(\"cars\", Car.Type),\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Apply Hook for Handling Nullable to Non-Nullable Column Changes in Ent (Go)\nDESCRIPTION: This snippet shows how to create an Apply hook in Ent to handle changing a nullable column to non-nullable. It updates all rows with NULL values in the specified column before applying the schema changes.\nSOURCE: https://github.com/ent/ent/blob/master/doc/md/migrate.md#2025-04-22_snippet_10\n\nLANGUAGE: go\nCODE:\n```\nfunc main() {\n    client, err := ent.Open(\"mysql\", \"root:pass@tcp(localhost:3306)/test\")\n    if err != nil {\n        log.Fatalf(\"failed connecting to mysql: %v\", err)\n    }\n    defer client.Close()\n    // ...\n    if err := client.Schema.Create(ctx, schema.WithApplyHook(fillNulls)); err != nil {\n        log.Fatalf(\"failed creating schema resources: %v\", err)\n    }\n}\n\nfunc fillNulls(next schema.Applier) schema.Applier {\n\treturn schema.ApplyFunc(func(ctx context.Context, conn dialect.ExecQuerier, plan *migrate.Plan) error {\n\t\t// There are three ways to UPDATE the NULL values to \"Unknown\" in this stage.\n\t\t// Append a custom migrate.Change to the plan, execute an SQL statement directly\n\t\t// on the dialect.ExecQuerier, or use the ent.Client used by the project.\n\n\t\t// Execute a custom SQL statement.\n\t\tquery, args := sql.Dialect(dialect.MySQL).\n\t\t\tUpdate(user.Table).\n\t\t\tSet(user.FieldDropOptional, \"Unknown\").\n\t\t\tWhere(sql.IsNull(user.FieldDropOptional)).\n\t\t\tQuery()\n\t\tif err := conn.Exec(ctx, query, args, nil); err != nil {\n\t\t\treturn err\n\t\t}\n\n\t\t// Append a custom statement to migrate.Plan.\n\t\t//\n\t\t//  plan.Changes = append([]*migrate.Change{\n\t\t//\t    {\n\t\t//\t\t    Cmd: fmt.Sprintf(\"UPDATE users SET %[1]s = '%[2]s' WHERE %[1]s IS NULL\", user.FieldDropOptional, \"Unknown\"),\n\t\t//\t    },\n\t\t//  }, plan.Changes...)\n\n\t\t// Use the ent.Client used by the project.\n\t\t//\n\t\t//  drv := sql.NewDriver(dialect.MySQL, sql.Conn{ExecQuerier: conn.(*sql.Tx)})\n\t\t//  if err := ent.NewClient(ent.Driver(drv)).\n\t\t//  \tUser.\n\t\t//  \tUpdate().\n\t\t//  \tSetDropOptional(\"Unknown\").\n\t\t//  \tWhere(/* Add predicate to filter only rows with NULL values */).\n\t\t//  \tExec(ctx); err != nil {\n\t\t//  \treturn fmt.Errorf(\"fix default values to uppercase: %w\", err)\n\t\t//  }\n\n\t\treturn next.Apply(ctx, conn, plan)\n\t})\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Edge Terms Ordering in Ent Go\nDESCRIPTION: Demonstrates using custom terms for ordering entities based on aggregated values from their edges.\nSOURCE: https://github.com/ent/ent/blob/master/doc/md/paging.mdx#2025-04-22_snippet_6\n\nLANGUAGE: go\nCODE:\n```\n// Ascending order.\nposts, err := client.User.Query().\n\tOrder(\n\t\t// highlight-start\n\t\tuser.ByPosts(\n\t\t\tsql.OrderBySum(post.FieldNumLikes),\n\t\t\tsql.OrderBySum(post.FieldNumViews),\n\t\t),\n\t\t// highlight-end\n\t).\n\tAll(ctx)\n\n// Descending order.\nposts, err := client.User.Query().\n\tOrder(\n\t\t// highlight-start\n\t\tuser.ByPosts(\n\t\t\tsql.OrderBySum(\n\t\t\t\tpost.FieldNumLikes,\n\t\t\t\tsql.OrderDesc(),\n\t\t\t),\n\t\t\tsql.OrderBySum(\n\t\t\t\tpost.FieldNumViews,\n\t\t\t\tsql.OrderDesc(),\n\t\t\t),\n\t\t),\n\t\t// highlight-end\n\t).\n\tAll(ctx)\n```\n\n----------------------------------------\n\nTITLE: Using Annotations in Templates in GoTemplate\nDESCRIPTION: Example of accessing the custom GreetingWord annotation from within a template.\nSOURCE: https://github.com/ent/ent/blob/master/doc/md/extension.md#2025-04-22_snippet_7\n\nLANGUAGE: gotemplate\nCODE:\n```\nfunc ({{ $receiver }} *{{ $n.Name }}) Greet() string {\n    return \"{{ $.Annotations.GreetingWord }}, {{ $n.Name }}\"\n}\n```\n\n----------------------------------------\n\nTITLE: SQL Up Migration for Seeding Admin Data\nDESCRIPTION: SQL commands to insert initial admin group and user data with relationships.\nSOURCE: https://github.com/ent/ent/blob/master/doc/website/blog/2022-03-14-announcing-versioned-migrations.md#2025-04-22_snippet_13\n\nLANGUAGE: sql\nCODE:\n```\nINSERT INTO `groups` (`id`, `name`) VALUES (1, 'Admins');\nINSERT INTO `users` (`id`, `username`) VALUES (1, 'admin');\nINSERT INTO `group_users` (`group_id`, `user_id`) VALUES (1, 1);\n```\n\n----------------------------------------\n\nTITLE: Configuring Ent Code Generation\nDESCRIPTION: Main configuration file for Ent code generation that sets up entoas and ogent extensions\nSOURCE: https://github.com/ent/ent/blob/master/doc/website/blog/2022-02-15-generate-rest-crud-with-ent-and-ogen.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\n//go:build ignore\n\npackage main\n\nimport (\n\t\"log\"\n\n\t\"ariga.io/ogent\"\n\t\"entgo.io/contrib/entoas\"\n\t\"entgo.io/ent/entc\"\n\t\"entgo.io/ent/entc/gen\"\n\t\"github.com/ogen-go/ogen\"\n)\n\nfunc main() {\n\tspec := new(ogen.Spec)\n\toas, err := entoas.NewExtension(entoas.Spec(spec))\n\tif err != nil {\n\t\tlog.Fatalf(\"creating entoas extension: %v\", err)\n\t}\n\togent, err := ogent.NewExtension(spec)\n\tif err != nil {\n\t\tlog.Fatalf(\"creating ogent extension: %v\", err)\n\t}\n\terr = entc.Generate(\"./schema\", &gen.Config{}, entc.Extensions(ogent, oas))\n\tif err != nil {\n\t\tlog.Fatalf(\"running ent codegen: %v\", err)\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Partial Responses in gRPC Requests\nDESCRIPTION: Shows the implementation of partial responses following Google AIP-157, allowing clients to specify whether edge information should be retrieved using a View enum in the request message.\nSOURCE: https://github.com/ent/ent/blob/master/doc/website/blog/2021-06-28-gprc-ready-for-use.md#2025-04-22_snippet_1\n\nLANGUAGE: protobuf\nCODE:\n```\nmessage GetUserRequest {\n    int32 id = 1;\n\n    View view = 2;\n\n    enum View {\n        VIEW_UNSPECIFIED = 0;\n\n        BASIC = 1;\n\n        WITH_EDGE_IDS = 2;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring elk Extension for OAS Server Generation in Go\nDESCRIPTION: This snippet shows how to modify the ent/entc.go file to enable OAS server generation using elk. It adds the elk.GenerateHandlers() function to the elk.NewExtension configuration.\nSOURCE: https://github.com/ent/ent/blob/master/doc/website/blog/2021-09-10-openapi-generator.md#2025-04-22_snippet_10\n\nLANGUAGE: go\nCODE:\n```\nfunc main() {\n\tex, err := elk.NewExtension(\n\t\telk.GenerateSpec(\n\t\t\t[...]\n\t\t),\n+\t\telk.GenerateHandlers(),\n\t)\n\t[...]\n}\n```\n\n----------------------------------------\n\nTITLE: Running Atlas Migration Diff Command for MySQL\nDESCRIPTION: This command generates a migration using Atlas for MySQL 8. It specifies the migration directory, Ent schema location, and uses a Docker container as the development database.\nSOURCE: https://github.com/ent/ent/blob/master/doc/md/components/_atlas_migrate_diff.mdx#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\natlas migrate diff migration_name \\\n  --dir \"file://ent/migrate/migrations\" \\\n  --to \"ent://ent/schema\" \\\n  --dev-url \"docker://mysql/8/ent\"\n```\n\n----------------------------------------\n\nTITLE: Seeding Database with Ent ORM in Go\nDESCRIPTION: This snippet demonstrates how to seed a MySQL database using Ent ORM. It creates a user and a blog post if the database is empty. The code uses Ent's fluent API for querying and creating entities.\nSOURCE: https://github.com/ent/ent/blob/master/doc/website/blog/2023-02-23-simple-cms-with-ent.mdx#2025-04-22_snippet_11\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"context\"\n\t\"flag\"\n\t\"fmt\"\n\t\"log\"\n\n\t\"github.com/rotemtam/ent-blog-example/ent\"\n\n\t_ \"github.com/go-sql-driver/mysql\"\n\t\"github.com/rotemtam/ent-blog-example/ent/user\"\n)\n\nfunc main() {\n\t// Read the connection string to the database from a CLI flag.\n\tvar dsn string\n\tflag.StringVar(&dsn, \"dsn\", \"\", \"database DSN\")\n\tflag.Parse()\n\n\t// Instantiate the Ent client.\n\tclient, err := ent.Open(\"mysql\", dsn)\n\tif err != nil {\n\t\tlog.Fatalf(\"failed connecting to mysql: %v\", err)\n\t}\n\tdefer client.Close()\n\n\tctx := context.Background()\n\t// If we don't have any posts yet, seed the database.\n\tif !client.Post.Query().ExistX(ctx) {\n\t\tif err := seed(ctx, client); err != nil {\n\t\t\tlog.Fatalf(\"failed seeding the database: %v\", err)\n\t\t}\n\t}\n\t// ... Continue with server start.\n}\n\nfunc seed(ctx context.Context, client *ent.Client) error {\n\t// Check if the user \"rotemtam\" already exists.\n\tr, err := client.User.Query().\n\t\tWhere(\n\t\t\tuser.Name(\"rotemtam\"),\n\t\t).\n\t\tOnly(ctx)\n\tswitch {\n\t// If not, create the user.\n\tcase ent.IsNotFound(err):\n\t\tr, err = client.User.Create().\n\t\t\tSetName(\"rotemtam\").\n\t\t\tSetEmail(\"r@hello.world\").\n\t\t\tSave(ctx)\n\t\tif err != nil {\n\t\t\treturn fmt.Errorf(\"failed creating user: %v\", err)\n\t\t}\n\tcase err != nil:\n\t\treturn fmt.Errorf(\"failed querying user: %v\", err)\n\t}\n\t// Finally, create a \"Hello, world\" blogpost.\n\treturn client.Post.Create().\n\t\tSetTitle(\"Hello, World!\").\n\t\tSetBody(\"This is my first post\").\n\t\tSetAuthor(r).\n\t\tExec(ctx)\n}\n```\n\n----------------------------------------\n\nTITLE: Adding OrderBy Argument to GraphQL Pagination Query\nDESCRIPTION: This GraphQL schema snippet shows how to add an orderBy argument to a pagination query for todos.\nSOURCE: https://github.com/ent/ent/blob/master/doc/md/graphql.md#2025-04-22_snippet_6\n\nLANGUAGE: graphql\nCODE:\n```\ntype Query {\n  todos(\n    after: Cursor\n    first: Int\n    before: Cursor\n    last: Int\n    orderBy: TodoOrder\n  ): TodoConnection!\n}\n```\n\n----------------------------------------\n\nTITLE: Custom SQL EXISTS Query Equivalent to HasCarWith in Ent (Go)\nDESCRIPTION: Example of using a custom SQL EXISTS subquery to filter users with Tesla cars.\nSOURCE: https://github.com/ent/ent/blob/master/doc/md/predicates.md#2025-04-22_snippet_10\n\nLANGUAGE: go\nCODE:\n```\n// `EXISTS` version.\nusers := client.User.Query().\n\tWhere(func(s *sql.Selector) {\n\t\tt := sql.Table(car.Table)\n\t\tp := sql.And(\n            sql.EQ(t.C(car.FieldModel), \"Tesla\"),\n\t\t\tsql.ColumnsEQ(s.C(user.FieldID), t.C(car.FieldOwnerID)),\n\t\t)\n\t\ts.Where(sql.Exists(sql.Select().From(t).Where(p)))\n\t}).\n\tAllX(ctx)\n```\n\nLANGUAGE: sql\nCODE:\n```\n-- `EXISTS` version.\nSELECT DISTINCT `users`.`id`, `users`.`age`, `users`.`name` FROM `users` WHERE EXISTS (SELECT * FROM `cars` WHERE `cars`.`model` = 'Tesla' AND `users`.`id` = `cars`.`owner_id`)\n```\n\n----------------------------------------\n\nTITLE: Implementing gRPC Client\nDESCRIPTION: Creates a gRPC client that connects to the server, creates a new user, and retrieves it. Demonstrates basic client-side error handling and RPC calls.\nSOURCE: https://github.com/ent/ent/blob/master/doc/md/tutorial-grpc-server-and-client.md#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"context\"\n\t\"fmt\"\n\t\"log\"\n\t\"math/rand\"\n\t\"time\"\n\n\t\"ent-grpc-example/ent/proto/entpb\"\n\t\"google.golang.org/grpc\"\n\t\"google.golang.org/grpc/status\"\n)\n\nfunc main() {\n\trand.Seed(time.Now().UnixNano())\n\n\t// Open a connection to the server.\n\tconn, err := grpc.Dial(\":5000\", grpc.WithTransportCredentials(insecure.NewCredentials()))\n\tif err != nil {\n\t\tlog.Fatalf(\"failed connecting to server: %s\", err)\n\t}\n\tdefer conn.Close()\n\n\t// Create a User service Client on the connection.\n\tclient := entpb.NewUserServiceClient(conn)\n\n\t// Ask the server to create a random User.\n\tctx := context.Background()\n\tuser := randomUser()\n\tcreated, err := client.Create(ctx, &entpb.CreateUserRequest{\n\t\tUser: user,\n\t})\n\tif err != nil {\n\t\tse, _ := status.FromError(err)\n\t\tlog.Fatalf(\"failed creating user: status=%s message=%s\", se.Code(), se.Message())\n\t}\n\tlog.Printf(\"user created with id: %d\", created.Id)\n\n\t// On a separate RPC invocation, retrieve the user we saved previously.\n\tget, err := client.Get(ctx, &entpb.GetUserRequest{\n\t\tId: created.Id,\n\t})\n\tif err != nil {\n\t\tse, _ := status.FromError(err)\n\t\tlog.Fatalf(\"failed retrieving user: status=%s message=%s\", se.Code(), se.Message())\n\t}\n\tlog.Printf(\"retrieved user with id=%d: %v\", get.Id, get)\n}\n\nfunc randomUser() *entpb.User {\n\treturn &entpb.User{\n\t\tName:         fmt.Sprintf(\"user_%d\", rand.Int()),\n\t\tEmailAddress: fmt.Sprintf(\"user_%d@example.com\", rand.Int()),\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Generated Data Migration Function (Data Seeding)\nDESCRIPTION: Go function to generate a data migration for seeding initial user data. This demonstrates how to create a data seeding migration using Ent.\nSOURCE: https://github.com/ent/ent/blob/master/doc/md/data-migrations.mdx#2025-04-22_snippet_7\n\nLANGUAGE: go\nCODE:\n```\npackage migratedata\n\n// SeedUsers add the initial users to the database.\nfunc SeedUsers(dir *migrate.LocalDir) error {\n\tw := &schema.DirWriter{Dir: dir}\n\tclient := ent.NewClient(ent.Driver(schema.NewWriteDriver(dialect.MySQL, w)))\n\n\t// The statement that generates the INSERT statement.\n\terr := client.User.CreateBulk(\n\t\tclient.User.Create().SetName(\"a8m\").SetAge(1).SetTags([]string{\"foo\"}),\n\t\tclient.User.Create().SetName(\"nati\").SetAge(1).SetTags([]string{\"bar\"}),\n\t).Exec(context.Background())\n\tif err != nil {\n\t\treturn fmt.Errorf(\"failed generating statement: %w\", err)\n\t}\n\n\t// Write the content to the migration directory.\n\treturn w.FlushChange(\n\t\t\"seed_users\",\n\t\t\"Add the initial users to the database.\",\n\t)\n}\n```\n\n----------------------------------------\n\nTITLE: Updating GraphQL Schema for Filter Inputs\nDESCRIPTION: Modification of the GraphQL schema to accept the new filter types. It adds a 'where' parameter of type TodoWhereInput to the todos query.\nSOURCE: https://github.com/ent/ent/blob/master/doc/md/tutorial-todo-gql-filter-input.md#2025-04-22_snippet_5\n\nLANGUAGE: graphql\nCODE:\n```\ntype Query {\n  todos(\n    after: Cursor,\n    first: Int,\n    before: Cursor,\n    last: Int,\n    orderBy: TodoOrder,\n    where: TodoWhereInput,\n  ): TodoConnection!\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Code Generation Hooks in Ent\nDESCRIPTION: Example of creating custom validation hooks for the code generation process. This shows how to add middleware that ensures all fields have a specific struct tag.\nSOURCE: https://github.com/ent/ent/blob/master/doc/md/code-gen.md#2025-04-22_snippet_7\n\nLANGUAGE: go\nCODE:\n```\n// +build ignore\n\npackage main\n\nimport (\n\t\"fmt\"\n\t\"log\"\n\t\"reflect\"\n\n\t\"entgo.io/ent/entc\"\n\t\"entgo.io/ent/entc/gen\"\n)\n\nfunc main() {\n\terr := entc.Generate(\"./schema\", &gen.Config{\n\t\tHooks: []gen.Hook{\n\t\t\tEnsureStructTag(\"json\"),\n\t\t},\n\t})\n\tif err != nil {\n\t\tlog.Fatalf(\"running ent codegen: %v\", err)\n\t}\n}\n\n// EnsureStructTag ensures all fields in the graph have a specific tag name.\nfunc EnsureStructTag(name string) gen.Hook {\n\treturn func(next gen.Generator) gen.Generator {\n\t\treturn gen.GenerateFunc(func(g *gen.Graph) error {\n\t\t\tfor _, node := range g.Nodes {\n\t\t\t\tfor _, field := range node.Fields {\n\t\t\t\t\ttag := reflect.StructTag(field.StructTag)\n\t\t\t\t\tif _, ok := tag.Lookup(name); !ok {\n\t\t\t\t\t\treturn fmt.Errorf(\"struct tag %q is missing for field %s.%s\", name, node.Name, field.Name)\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn next.Generate(g)\n\t\t})\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Executing Ent Query with sqlcomment\nDESCRIPTION: This Go code snippet shows an example of executing an Ent query that will be processed by sqlcomment to add metadata comments.\nSOURCE: https://github.com/ent/ent/blob/master/doc/website/blog/2021-10-19-sqlcomment-support-for-ent.md#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nclient.User.\n\tUpdate().\n\tWhere(\n\t\tuser.Or(\n\t\t\tuser.AgeGT(30),\n\t\t\tuser.Name(\"bar\"),\n\t\t),\n\t\tuser.HasFollowers(),\n\t).\n\tSetName(\"foo\").\n\tSave()\n```\n\n----------------------------------------\n\nTITLE: Using Schema Config Feature in Ent\nDESCRIPTION: Demonstrates how to use the SQL schema config feature to specify different database names for different models in Ent.\nSOURCE: https://github.com/ent/ent/blob/master/doc/md/features.md#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nc, err := ent.Open(dialect, conn, ent.AlternateSchema(ent.SchemaConfig{\n\tUser: \"usersdb\",\n\tCar: \"carsdb\",\n}))\nc.User.Query().All(ctx) // SELECT * FROM `usersdb`.`users`\nc.Car.Query().All(ctx) \t// SELECT * FROM `carsdb`.`cars`\n```\n\n----------------------------------------\n\nTITLE: Testing Edge Creation with gRPC Service\nDESCRIPTION: Integration test demonstrating how to create and verify entity relationships using the generated gRPC service.\nSOURCE: https://github.com/ent/ent/blob/master/doc/md/tutorial-grpc-edges.md#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nfunc TestServiceWithEdges(t *testing.T) {\n\tctx := context.Background()\n\tclient := enttest.Open(t, \"sqlite3\", \"file:ent?mode=memory&cache=shared&_fk=1\")\n\tdefer client.Close()\n\tsvc := entpb.NewUserService(client)\n\tcat := client.Category.Create().SetName(\"cat_1\").SaveX(ctx)\n\tcreate, err := svc.Create(ctx, &entpb.CreateUserRequest{\n\t\tUser: &entpb.User{\n\t\t\tName:         \"user\",\n\t\t\tEmailAddress: \"user@service.code\",\n\t\t\tAdministered: []*entpb.Category{\n\t\t\t\t{Id: int64(cat.ID)},\n\t\t\t},\n\t\t},\n\t})\n\tif err != nil {\n\t\tt.Fatal(\"failed creating user using UserService\", err)\n\t}\n\tcount, err := client.Category.\n\t\tQuery().\n\t\tWhere(\n\t\t\tcategory.HasAdminWith(\n\t\t\t\tuser.ID(int(create.Id)),\n\t\t\t),\n\t\t).\n\t\tCount(ctx)\n\tif err != nil {\n\t\tt.Fatal(\"failed counting categories admin by created user\", err)\n\t}\n\tif count != 1 {\n\t\tt.Fatal(\"expected exactly one group to managed by the created user\")\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Todos in GraphQL\nDESCRIPTION: GraphQL query to fetch all todos.\nSOURCE: https://github.com/ent/ent/blob/master/doc/md/tutorial-todo-gql.mdx#2025-04-22_snippet_11\n\nLANGUAGE: graphql\nCODE:\n```\nquery AllTodos {\n    todos {\n        id\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Bash Script for Verifying Generated Files\nDESCRIPTION: A bash script that can be integrated into any CI flow to verify that all Ent-generated files are properly checked into source control. It runs code generation and then checks if there are any uncommitted changes.\nSOURCE: https://github.com/ent/ent/blob/master/doc/md/ci.mdx#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngo generate ./...\nstatus=$(git status --porcelain)\nif [ -n \"$status\" ]; then\n    echo \"you need to run 'go generate ./...' and commit the changes\"\n    echo \"$status\"\n    exit 1\nfi\n```\n\n----------------------------------------\n\nTITLE: Generated Protobuf Message Definition\nDESCRIPTION: Shows the automatically generated Protobuf message type definition for the User entity.\nSOURCE: https://github.com/ent/ent/blob/master/doc/website/blog/2021-03-18-generating-a-grpc-server-with-ent.md#2025-04-22_snippet_7\n\nLANGUAGE: protobuf\nCODE:\n```\n// Code generated by entproto. DO NOT EDIT.\nsyntax = \"proto3\";\n\npackage entpb;\n\noption go_package = \"ent-grpc-example/ent/proto/entpb\";\n\nmessage User {\n  int32 id = 1;\n\n  string user_name = 2;\n\n  string email_address = 3;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Pet Schema with Relationships\nDESCRIPTION: Schema definition for Pet entity with name field and relationships to other pets and users.\nSOURCE: https://github.com/ent/ent/blob/master/examples/README.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\n// Pet holds the schema definition for the Pet entity.\ntype Pet struct {\n\tent.Schema\n}\n\n// Fields of the Pet.\nfunc (Pet) Fields() []ent.Field {\n\treturn []ent.Field{\n\t\tfield.String(\"name\"),\n\t}\n}\n\n// Edges of the Pet.\nfunc (Pet) Edges() []ent.Edge {\n\treturn []ent.Edge{\n\t\tedge.To(\"friends\", Pet.Type),\n\t\tedge.From(\"owner\", User.Type).\n\t\t\tRef(\"pets\").\n\t\t\tUnique(),\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Annotations in Ent Templates\nDESCRIPTION: Example of how to access field annotations within Ent templates. This template loops through nodes and fields to find and use the EntGQL annotation values.\nSOURCE: https://github.com/ent/ent/blob/master/doc/md/templates.md#2025-04-22_snippet_5\n\nLANGUAGE: gotemplate\nCODE:\n```\n{{ range $node := $.Nodes }}\n\t{{ range $f := $node.Fields }}\n\t\t{{/* Get the annotation by its name. See: Annotation.Name */}}\n\t\t{{ if $annotation := $f.Annotations.EntGQL }}\n\t\t\t{{/* Get the field from the annotation. */}}\n\t\t\t{{ $orderField := $annotation.OrderField }}\n\t\t{{ end }}\n\t{{ end }}\n{{ end }}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Prometheus Metrics Hook for Ent in Go\nDESCRIPTION: This snippet shows the implementation of an Ent hook that collects Prometheus metrics. It tracks total operations, errors, and operation duration for each mutation type and operation.\nSOURCE: https://github.com/ent/ent/blob/master/doc/website/blog/2021-08-12-building-observable-ent-application-with-prometheus.md#2025-04-22_snippet_4\n\nLANGUAGE: go\nCODE:\n```\n// Hook init collectors, count total at beginning error on mutation error and duration also after.\nfunc Hook() ent.Hook {\n\topsProcessedTotal := initOpsProcessedTotal()\n\topsProcessedError := initOpsProcessedError()\n\topsDuration := initOpsDuration()\n\treturn func(next ent.Mutator) ent.Mutator {\n\t\treturn ent.MutateFunc(func(ctx context.Context, m ent.Mutation) (ent.Value, error) {\n\t\t\t// Before mutation, start measuring time.\n\t\t\tstart := time.Now()\n\t\t\t// Extract dynamic labels from mutation.\n\t\t\tlabels := prometheus.Labels{mutationType: m.Type(), mutationOp: m.Op().String()}\n\t\t\t// Increment total ops counter.\n\t\t\topsProcessedTotal.With(labels).Inc()\n\t\t\t// Execute mutation.\n\t\t\tv, err := next.Mutate(ctx, m)\n\t\t\tif err != nil {\n\t\t\t\t// In case of error increment error counter.\n\t\t\t\topsProcessedError.With(labels).Inc()\n\t\t\t}\n\t\t\t// Stop time measure.\n\t\t\tduration := time.Since(start)\n\t\t\t// Record duration in seconds.\n\t\t\topsDuration.With(labels).Observe(duration.Seconds())\n\t\t\treturn v, err\n\t\t})\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Initial SQL Migration\nDESCRIPTION: Generated SQL migration file showing the creation of users and blogs tables with their respective constraints.\nSOURCE: https://github.com/ent/ent/blob/master/doc/md/versioned/07-programmatically.mdx#2025-04-22_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\n-- create \"users\" table\nCREATE TABLE `users` (`id` bigint NOT NULL AUTO_INCREMENT, `name` varchar(255) NOT NULL, `email` varchar(255) NOT NULL, PRIMARY KEY (`id`), UNIQUE INDEX `email` (`email`)) CHARSET utf8mb4 COLLATE utf8mb4_bin;\n-- create \"blogs\" table\nCREATE TABLE `blogs` (`id` bigint NOT NULL AUTO_INCREMENT, `title` varchar(255) NOT NULL, `body` longtext NOT NULL, `created_at` timestamp NOT NULL, `user_blog_posts` bigint NULL, PRIMARY KEY (`id`), CONSTRAINT `blogs_users_blog_posts` FOREIGN KEY (`user_blog_posts`) REFERENCES `users` (`id`) ON DELETE SET NULL) CHARSET utf8mb4 COLLATE utf8mb4_bin;\n```\n\n----------------------------------------\n\nTITLE: Creating a Debug Mode Template for Ent Clients\nDESCRIPTION: This template adds a Debug() method to each entity client, which returns a new client with debug mode enabled. It wraps the driver with a debug driver that logs all queries.\nSOURCE: https://github.com/ent/ent/blob/master/doc/md/templates.md#2025-04-22_snippet_1\n\nLANGUAGE: gotemplate\nCODE:\n```\n{{ define \"debug\" }}\n\n{{/* A template that adds the functionality for running each client <T> in debug mode */}}\n\n{{/* Add the base header for the generated file */}}\n{{ $pkg := base $.Config.Package }}\n{{ template \"header\" $ }}\n\n{{/* Loop over all nodes and add option the \"Debug\" method */}}\n{{ range $n := $.Nodes }}\n\t{{ $client := print $n.Name \"Client\" }}\n\tfunc (c *{{ $client }}) Debug() *{{ $client }} {\n\t\tif c.debug {\n\t\t\treturn c\n\t\t}\n\t\tcfg := config{driver: dialect.Debug(c.driver, c.log), log: c.log, debug: true, hooks: c.hooks}\n\t\treturn &{{ $client }}{config: cfg}\n\t}\n{{ end }}\n\n{{ end }}\n```\n\n----------------------------------------\n\nTITLE: Complex GraphQL Filter for Todos\nDESCRIPTION: Shows a more complex GraphQL filter using OR conditions and nested filters.\nSOURCE: https://github.com/ent/ent/blob/master/doc/website/blog/2021-07-01-automatic-graphql-filter-generation.md#2025-04-22_snippet_1\n\nLANGUAGE: graphql\nCODE:\n```\nquery FilterTodos {\n  todos(\n    where: {\n      or: [\n        {\n          hasParent: false,\n          status: COMPLETED,\n        },\n        {\n          status: IN_PROGRESS,\n          hasParentWith: {\n            priorityLT: 1,\n            statusNEQ: COMPLETED,\n          },\n        }\n      ]\n    },\n  ) {\n    edges {\n      node {\n        id\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining O2M Relationship Between Two Types in Go using Ent\nDESCRIPTION: Shows how to define a one-to-many relationship between User and Pet types using Ent edges in Go.\nSOURCE: https://github.com/ent/ent/blob/master/examples/README.md#2025-04-22_snippet_9\n\nLANGUAGE: go\nCODE:\n```\n// Edges of the User.\nfunc (User) Edges() []ent.Edge {\n\treturn []ent.Edge{\n\t\tedge.To(\"pets\", Pet.Type),\n\t}\n}\n```\n\nLANGUAGE: go\nCODE:\n```\n// Edges of the Pet.\nfunc (Pet) Edges() []ent.Edge {\n\treturn []ent.Edge{\n\t\tedge.From(\"owner\", User.Type).\n\t\t\tRef(\"pets\").\n\t\t\tUnique(),\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Prometheus Metrics Server with Ent in Go\nDESCRIPTION: Server implementation that creates an Ent client with Prometheus metrics collection. Sets up HTTP endpoints for database operations and metrics exposure using promhttp.\nSOURCE: https://github.com/ent/ent/blob/master/doc/website/blog/2021-08-12-building-observable-ent-application-with-prometheus.md#2025-04-22_snippet_5\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"context\"\n\t\"log\"\n\t\"net/http\"\n\n\t\"entprom\"\n\t\"entprom/ent\"\n\n\t_ \"github.com/mattn/go-sqlite3\"\n\t\"github.com/prometheus/client_golang/prometheus/promhttp\"\n)\n\nfunc createClient() *ent.Client {\n\tc, err := ent.Open(\"sqlite3\", \"file:ent?mode=memory&cache=shared&_fk=1\")\n\tif err != nil {\n\t\tlog.Fatalf(\"failed opening connection to sqlite: %v\", err)\n\t}\n\tctx := context.Background()\n\t// Run the auto migration tool.\n\tif err := c.Schema.Create(ctx); err != nil {\n\t\tlog.Fatalf(\"failed creating schema resources: %v\", err)\n\t}\n\treturn c\n}\n\nfunc handler(client *ent.Client) func(w http.ResponseWriter, r *http.Request) {\n\treturn func(w http.ResponseWriter, r *http.Request) {\n\t\tctx := context.Background()\n\t\t// Run operations.\n\t\t_, err := client.User.Create().SetName(\"a8m\").Save(ctx)\n\t\tif err != nil {\n\t\t\thttp.Error(w, err.Error(), http.StatusBadRequest)\n\t\t\treturn\n\t\t}\n\t}\n}\n\nfunc main() {\n\t// Create Ent client and migrate\n\tclient := createClient()\n\t// Use the hook\n\tclient.Use(entprom.Hook())\n\t// Simple handler to run actions on our DB.\n\thttp.HandleFunc(\"/\", handler(client))\n\t// This endpoint sends metrics to the prometheus to collect\n\thttp.Handle(\"/metrics\", promhttp.Handler())\n\tlog.Println(\"server starting on port 8080\")\n\t// Run the server\n\tlog.Fatal(http.ListenAndServe(\":8080\", nil))\n}\n```\n\n----------------------------------------\n\nTITLE: Manual SQL Data Migration Example\nDESCRIPTION: Example of a manually written SQL data migration to backfill NULL or null tags with default values in a users table.\nSOURCE: https://github.com/ent/ent/blob/master/doc/md/data-migrations.mdx#2025-04-22_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\n-- Backfill NULL or null tags with a default value.\nUPDATE `users` SET `tags` = '[\"foo\",\"bar\"]' WHERE `tags` IS NULL OR JSON_CONTAINS(`tags`, 'null', '$');\n```\n\n----------------------------------------\n\nTITLE: Defining User Entity Schema\nDESCRIPTION: Schema definition for a User entity with basic fields like name, email, and creation timestamp\nSOURCE: https://github.com/ent/ent/blob/master/doc/website/blog/2021-08-26-visualizing-your-data-graph-using-entviz.md#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\n// Fields of the User.\nfunc (User) Fields() []ent.Field {\n\treturn []ent.Field{\n\t\tfield.String(\"name\"),\n\t\tfield.String(\"email\"),\n\t\tfield.Time(\"created\").\n\t\t\tDefault(time.Now),\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Applying Atlas Migrations with PostgreSQL\nDESCRIPTION: Shell command to apply database migrations using Atlas with a PostgreSQL database. It specifies the migrations directory and connection URL including credentials, search path, and SSL mode settings.\nSOURCE: https://github.com/ent/ent/blob/master/doc/md/components/_atlas_migrate_apply.mdx#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\natlas migrate apply \\\n  --dir \"file://ent/migrate/migrations\" \\\n  --url \"postgres://postgres:pass@localhost:5432/database?search_path=public&sslmode=disable\"\n```\n\n----------------------------------------\n\nTITLE: Implementing Dual-Write Hook in Ent\nDESCRIPTION: Schema hook implementation to ensure writes to meta_json are replicated to the old meta column\nSOURCE: https://github.com/ent/ent/blob/master/doc/website/blog/2022-12-01-changing-column-types-with-zero-downtime.md#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nfunc (User) Hooks() []ent.Hook {\n\treturn []ent.Hook{\n\t\thook.On(\n\t\t\tfunc(next ent.Mutator) ent.Mutator {\n\t\t\t\treturn hook.UserFunc(func(ctx context.Context, m *gen.UserMutation) (ent.Value, error) {\n\t\t\t\t\tmeta, ok := m.MetaJSON()\n\t\t\t\t\tif !ok {\n\t\t\t\t\t\treturn next.Mutate(ctx, m)\n\t\t\t\t\t}\n\t\t\t\t\tif b, err := json.Marshal(meta); err != nil {\n\t\t\t\t\t\treturn nil, err\n\t\t\t\t\t}\n\t\t\t\t\tm.SetMeta(b)\n\t\t\t\t\treturn next.Mutate(ctx, m)\n\t\t\t\t})\n\t\t\t},\n\t\t\tent.OpCreate,\n\t\t),\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Template for Ent Extension in GoTemplate\nDESCRIPTION: A template file for the greeting extension that adds a Greet method to all generated node types.\nSOURCE: https://github.com/ent/ent/blob/master/doc/md/extension.md#2025-04-22_snippet_2\n\nLANGUAGE: gotemplate\nCODE:\n```\n{{/* Tell Intellij/GoLand to enable the autocompletion based on the *gen.Graph type. */}}\n{{/* gotype: entgo.io/ent/entc/gen.Graph */}}\n\n{{ define \"greet\" }}\n\n{{/* Add the base header for the generated file */}}\n{{ $pkg := base $.Config.Package }}\n{{ template \"header\" $ }}\n\n{{/* Loop over all nodes and add the Greet method */}}\n{{ range $n := $.Nodes }}\n    {{ $receiver := $n.Receiver }}\n    func ({{ $receiver }} *{{ $n.Name }}) Greet() string {\n\t\treturn \"Hello, {{ $n.Name }}\"\n    }\n{{ end }}\n\n{{ end }}\n```\n\n----------------------------------------\n\nTITLE: Creating a Unit Test for Blog Index Page\nDESCRIPTION: A Go test function that verifies the blog index page works correctly. It sets up an in-memory SQLite database, seeds test data, and verifies the HTTP response contains expected content.\nSOURCE: https://github.com/ent/ent/blob/master/doc/website/blog/2023-02-23-simple-cms-with-ent.mdx#2025-04-22_snippet_17\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"context\"\n\t\"io\"\n\t\"net/http\"\n\t\"net/http/httptest\"\n\t\"testing\"\n\n\t_ \"github.com/mattn/go-sqlite3\"\n\t\"github.com/rotemtam/ent-blog-example/ent/enttest\"\n\t\"github.com/stretchr/testify/require\"\n)\n\nfunc TestIndex(t *testing.T) {\n\t// Initialize an Ent client that uses an in memory SQLite db.\n\tclient := enttest.Open(t, \"sqlite3\", \"file:ent?mode=memory&cache=shared&_fk=1\")\n\tdefer client.Close()\n\t\n\t// seed the database with our \"Hello, world\" post and user.\n\terr := seed(context.Background(), client)\n\trequire.NoError(t, err)\n\n\t// Initialize a server and router.\n\tsrv := newServer(client)\n\tr := newRouter(srv)\n\n\t// Create a test server using the `httptest` package.\n\tts := httptest.NewServer(r)\n\tdefer ts.Close()\n\n\t// Make a GET request to the server root path.\n\tresp, err := ts.Client().Get(ts.URL)\n\n\t// Assert we get a 200 OK status code.\n\trequire.NoError(t, err)\n\trequire.Equal(t, http.StatusOK, resp.StatusCode)\n\n\t// Read the response body and assert it contains \"Hello, world!\"\n\tbody, err := io.ReadAll(resp.Body)\n\trequire.NoError(t, err)\n\trequire.Contains(t, string(body), \"Hello, World!\")\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Pet Edge Relations in Go\nDESCRIPTION: Implementation of Pet schema edges showing One-To-Many relation with User schema.\nSOURCE: https://github.com/ent/ent/blob/master/doc/website/blog/2021-07-29-generate-a-fully-working-go-crud-http-api-with-ent.md#2025-04-22_snippet_6\n\nLANGUAGE: go\nCODE:\n```\n// Edges of the Pet.\nfunc (Pet) Edges() []ent.Edge {\n    return []ent.Edge{\n        edge.From(\"owner\", User.Type).\n            Ref(\"pets\").\n            Unique(),\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Row-level Locks in Ent SQL Queries\nDESCRIPTION: Shows how to use the SQL lock feature to apply row-level locking in Ent queries using FOR UPDATE and FOR SHARE clauses.\nSOURCE: https://github.com/ent/ent/blob/master/doc/md/features.md#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\ntx, err := client.Tx(ctx)\nif err != nil {\n\tlog.Fatal(err)\n}\n\ntx.Pet.Query().\n\tWhere(pet.Name(name)).\n\tForUpdate().\n\tOnly(ctx)\n\ntx.Pet.Query().\n\tWhere(pet.ID(id)).\n\tForShare(\n\t\tsql.WithLockTables(pet.Table),\n\t\tsql.WithLockAction(sql.NoWait),\n\t).\n\tOnly(ctx)\n```\n\n----------------------------------------\n\nTITLE: SQL Migration for Data Backfill\nDESCRIPTION: SQL update statement to backfill the meta_json column with data from the meta column\nSOURCE: https://github.com/ent/ent/blob/master/doc/website/blog/2022-12-01-changing-column-types-with-zero-downtime.md#2025-04-22_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\nUPDATE users\nSET meta_json = CASE\n        -- when meta is valid json stores it as is.\n        WHEN JSON_VALID(cast(meta as char)) = 1 THEN cast(cast(meta as char) as json)\n        -- if meta is not valid json, store it as an empty object.\n        ELSE JSON_SET('{}')\n    END\nWHERE meta_json is null;\n```\n\n----------------------------------------\n\nTITLE: Configuring GitHub Action for Ent CI\nDESCRIPTION: This YAML configuration sets up a GitHub Action workflow to verify that all Ent-generated files are properly checked into source control. The workflow runs on pushes to the master branch and on pull requests that modify files in the ent/ directory.\nSOURCE: https://github.com/ent/ent/blob/master/doc/md/ci.mdx#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nname: EntCI\non:\n  push:\n  # Run whenever code is changed in the master.\n    branches:\n      - master\n  # Run on PRs where something changed under the `ent/` directory.\n  pull_request:\n    paths:\n      - 'ent/*'\njobs:\n  ent:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3.0.1\n      - uses: actions/setup-go@v3\n        with:\n          go-version-file: 'go.mod'\n      - uses: ent/contrib/ci@master\n```\n\n----------------------------------------\n\nTITLE: Running Atlas Migration Diff Command for PostgreSQL\nDESCRIPTION: This command generates a migration using Atlas for PostgreSQL 15. It specifies the migration directory, Ent schema location, and uses a Docker container as the development database with the public schema.\nSOURCE: https://github.com/ent/ent/blob/master/doc/md/components/_atlas_migrate_diff.mdx#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\natlas migrate diff migration_name \\\n  --dir \"file://ent/migrate/migrations\" \\\n  --to \"ent://ent/schema\" \\\n  --dev-url \"docker://postgres/15/test?search_path=public\"\n```\n\n----------------------------------------\n\nTITLE: Defining CLI Application Structure with Kong in Go\nDESCRIPTION: Implementation of the main CLI application structure using Kong. Defines global options like database URL and OpenAI key, and sets up subcommands for loading, indexing, and querying documents.\nSOURCE: https://github.com/ent/ent/blob/master/doc/website/blog/2025-02-12-rag-with-ent-atlas-pgvector.mdx#2025-04-22_snippet_11\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"fmt\"\n\t\"os\"\n\n\t\"github.com/alecthomas/kong\"\n)\n\n// CLI holds global options and subcommands.\ntype CLI struct {\n\t// DBURL is read from the environment variable DB_URL.\n\tDBURL     string `kong:\"env='DB_URL',help='Database URL for the application.'\"`\n\tOpenAIKey string `kong:\"env='OPENAI_KEY',help='OpenAI API key for the application.'\"`\n\n\t// Subcommands\n\tLoad  *LoadCmd  `kong:\"cmd,help='Load command that accepts a path.'\"`\n\tIndex *IndexCmd `kong:\"cmd,help='Create embeddings for any chunks that do not have one.'\"`\n\tAsk   *AskCmd   `kong:\"cmd,help='Ask a question about the indexed documents'\"`\n}\n\nfunc main() {\n\tvar cli CLI\n\tapp := kong.Parse(&cli,\n\t\tkong.Name(\"entrag\"),\n\t\tkong.Description(\"Ask questions about markdown files.\"),\n\t\tkong.UsageOnError(),\n\t)\n\tif err := app.Run(&cli); err != nil {\n\t\tfmt.Fprintf(os.Stderr, \"Error: %s\\n\", err)\n\t\tos.Exit(1)\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Document Loading Command in Go\nDESCRIPTION: Implementation of the LoadCmd Run method to load markdown files into the database. It walks through the directory, breaks documents into chunks, and saves them to the database using Ent.\nSOURCE: https://github.com/ent/ent/blob/master/doc/website/blog/2025-02-12-rag-with-ent-atlas-pgvector.mdx#2025-04-22_snippet_14\n\nLANGUAGE: go\nCODE:\n```\nconst (\n\ttokenEncoding = \"cl100k_base\"\n\tchunkSize     = 1000\n)\n\n// Run is the method called when the \"load\" command is executed.\nfunc (cmd *LoadCmd) Run(ctx *CLI) error {\n\tclient, err := ctx.entClient()\n\tif err != nil {\n\t\treturn fmt.Errorf(\"failed opening connection to postgres: %w\", err)\n\t}\n\ttokTotal := 0\n\treturn filepath.WalkDir(ctx.Load.Path, func(path string, d fs.DirEntry, err error) error {\n\t\tif filepath.Ext(path) == \".mdx\" || filepath.Ext(path) == \".md\" {\n\t\t\tchunks := breakToChunks(path)\n\t\t\tfor i, chunk := range chunks {\n\t\t\t\ttokTotal += len(chunk)\n\t\t\t\tclient.Chunk.Create().\n\t\t\t\t\tSetData(chunk).\n\t\t\t\t\tSetPath(path).\n\t\t\t\t\tSetNchunk(i).\n\t\t\t\t\tSaveX(context.Background())\n\t\t\t}\n\t\t}\n\t\treturn nil\n\t})\n}\n\nfunc (c *CLI) entClient() (*ent.Client, error) {\n\treturn ent.Open(\"postgres\", c.DBURL)\n}\n```\n\n----------------------------------------\n\nTITLE: Graph Data Population Example\nDESCRIPTION: Function to populate the graph with sample data including users, pets and their relationships.\nSOURCE: https://github.com/ent/ent/blob/master/examples/README.md#2025-04-22_snippet_4\n\nLANGUAGE: go\nCODE:\n```\nfunc Gen(ctx context.Context, client *ent.Client) error {\n\thub, err := client.Group.\n\t\tCreate().\n\t\tSetName(\"Github\").\n\t\tSave(ctx)\n\tif err != nil {\n\t\treturn fmt.Errorf(\"failed creating the group: %w\", err)\n\t}\n\tdan := client.User.\n\t\tCreate().\n\t\tSetAge(29).\n\t\tSetName(\"Dan\").\n\t\tAddManage(hub).\n\t\tSaveX(ctx)\n\n\ta8m := client.User.\n\t\tCreate().\n\t\tSetAge(30).\n\t\tSetName(\"Ariel\").\n\t\tAddGroups(hub).\n\t\tAddFriends(dan).\n\t\tSaveX(ctx)\n\tpedro := client.Pet.\n\t\tCreate().\n\t\tSetName(\"Pedro\").\n\t\tSetOwner(a8m).\n\t\tSaveX(ctx)\n\txabi := client.Pet.\n\t\tCreate().\n\t\tSetName(\"Xabi\").\n\t\tSetOwner(a8m).\n\t\tSaveX(ctx)\n\n\talex := client.User.\n\t\tCreate().\n\t\tSetAge(37).\n\t\tSetName(\"Alex\").\n\t\tSaveX(ctx)\n\tcoco := client.Pet.\n\t\tCreate().\n\t\tSetName(\"Coco\").\n\t\tSetOwner(alex).\n\t\tAddFriends(pedro).\n\t\tSaveX(ctx)\n\n\tfmt.Println(\"Pets created:\", pedro, xabi, coco)\n\treturn nil\n}\n```\n\n----------------------------------------\n\nTITLE: Applying Database Schema with Atlas\nDESCRIPTION: Commands to set the database URL environment variable and apply the schema to the database using Atlas. This creates the necessary tables and indexes in the PostgreSQL database.\nSOURCE: https://github.com/ent/ent/blob/master/doc/website/blog/2025-02-12-rag-with-ent-atlas-pgvector.mdx#2025-04-22_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nexport DB_URL='postgresql://postgres:pass@localhost:5432/postgres?sslmode=disable'\natlas schema apply --env local\n```\n\n----------------------------------------\n\nTITLE: Extending Generated GraphQL Types in GraphQL\nDESCRIPTION: This example demonstrates how to extend the Query type generated by Ent to add custom fields using GraphQL SDL.\nSOURCE: https://github.com/ent/ent/blob/master/doc/md/tutorial-todo-gql-schema-generator.md#2025-04-22_snippet_5\n\nLANGUAGE: graphql\nCODE:\n```\nextend type Query {\n\t\"\"\"Returns the literal string 'pong'.\"\"\"\n\tping: String!\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Mutation Resolvers for Transactional Client\nDESCRIPTION: Updates the createTodo and updateTodo resolvers to use the transactional client from context.\nSOURCE: https://github.com/ent/ent/blob/master/doc/md/tutorial-todo-gql-mutation-input.md#2025-04-22_snippet_7\n\nLANGUAGE: go\nCODE:\n```\n// CreateTodo is the resolver for the createTodo field.\nfunc (r *mutationResolver) CreateTodo(ctx context.Context, input ent.CreateTodoInput) (*ent.Todo, error) {\n\t// highlight-next-line\n\treturn ent.FromContext(ctx).Todo.Create().SetInput(input).Save(ctx)\n}\n\n// UpdateTodo is the resolver for the updateTodo field.\nfunc (r *mutationResolver) UpdateTodo(ctx context.Context, id int, input ent.UpdateTodoInput) (*ent.Todo, error) {\n\t// highlight-next-line\n\treturn ent.FromContext(ctx).Todo.UpdateOneID(id).SetInput(input).Save(ctx)\n}\n```\n\n----------------------------------------\n\nTITLE: Implement Main HTTP Server\nDESCRIPTION: Main application code that sets up the HTTP server with elk-generated handlers\nSOURCE: https://github.com/ent/ent/blob/master/doc/website/blog/2021-07-29-generate-a-fully-working-go-crud-http-api-with-ent.md#2025-04-22_snippet_5\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"context\"\n\t\"fmt\"\n\t\"log\"\n\t\"net/http\"\n\n\t\"elk-example/ent\"\n\telk \"elk-example/ent/http\"\n\n\t\"github.com/go-chi/chi/v5\"\n\t_ \"github.com/mattn/go-sqlite3\"\n\t\"go.uber.org/zap\"\n)\n\nfunc main() {\n\t// Create the ent client.\n\tc, err := ent.Open(\"sqlite3\", \"./ent.db?_fk=1\")\n\tif err != nil {\n\t\tlog.Fatalf(\"failed opening connection to sqlite: %v\", err)\n\t}\n\tdefer c.Close()\n\t// Run the auto migration tool.\n\tif err := c.Schema.Create(context.Background()); err != nil {\n\t\tlog.Fatalf(\"failed creating schema resources: %v\", err)\n\t}\n\t// Router and Logger.\n\tr, l := chi.NewRouter(), zap.NewExample()\n\t// Create the pet handler.\n\tr.Route(\"/pets\", func(r chi.Router) {\n\t\telk.NewPetHandler(c, l).Mount(r, elk.PetRoutes)\n\t})\n\t// Start listen to incoming requests.\n\tfmt.Println(\"Server running\")\n\tdefer fmt.Println(\"Server stopped\")\n\tif err := http.ListenAndServe(\":8080\", r); err != nil {\n\t\tlog.Fatal(err)\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Atlas Composite Schema Configuration\nDESCRIPTION: HCL configuration for Atlas that combines custom enum types with Ent schema definitions.\nSOURCE: https://github.com/ent/ent/blob/master/doc/md/migration/enum.mdx#2025-04-22_snippet_3\n\nLANGUAGE: hcl\nCODE:\n```\ndata \"composite_schema\" \"app\" {\n  # Load first custom types first.\n  schema \"public\" {\n    url = \"file://schema.sql\"\n  }\n  # Second, load the Ent schema.\n  schema \"public\" {\n    url = \"ent://ent/schema\"\n  }\n}\n\nenv \"local\" {\n  src = data.composite_schema.app.url\n  dev = \"docker://postgres/15/dev?search_path=public\"\n}\n```\n\n----------------------------------------\n\nTITLE: Generated Protocol Buffer Message with Optional Field\nDESCRIPTION: Generated Protocol Buffer message showing how an optional field is represented using StringValue wrapper type.\nSOURCE: https://github.com/ent/ent/blob/master/doc/md/tutorial-grpc-optional-fields.md#2025-04-22_snippet_2\n\nLANGUAGE: protobuf\nCODE:\n```\nmessage User {\n  int32 id = 1;\n\n  string name = 2;\n\n  string email_address = 3;\n\n  google.protobuf.StringValue alias = 4;\n\n  repeated Category administered = 5;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Atlas Composite Schema in HCL\nDESCRIPTION: This HCL configuration sets up a composite schema in Atlas, combining the Ent schema and custom security policies.\nSOURCE: https://github.com/ent/ent/blob/master/doc/md/migration/rls.mdx#2025-04-22_snippet_2\n\nLANGUAGE: hcl\nCODE:\n```\ndata \"composite_schema\" \"app\" {\n  # Load the ent schema first with all tables.\n  schema \"public\" {\n    url = \"ent://ent/schema\"\n  }\n  # Then, load the RLS schema.\n  schema \"public\" {\n    url = \"file://schema.sql\"\n  }\n}\n\nenv \"local\" {\n  src = data.composite_schema.app.url\n  dev = \"docker://postgres/15/dev?search_path=public\"\n}\n```\n\n----------------------------------------\n\nTITLE: Running Ent Code Generation\nDESCRIPTION: Executes the Ent code generation tool to create production code from the schema definition.\nSOURCE: https://github.com/ent/ent/blob/master/doc/md/tutorial-grpc-setting-up.md#2025-04-22_snippet_4\n\nLANGUAGE: console\nCODE:\n```\ngo generate ./...\n```\n\n----------------------------------------\n\nTITLE: Using Extensions in Code Generation Configuration in Go\nDESCRIPTION: Example of setting up and using an extension in the Ent code generation configuration.\nSOURCE: https://github.com/ent/ent/blob/master/doc/md/extension.md#2025-04-22_snippet_9\n\nLANGUAGE: go\nCODE:\n```\n//+build ignore\n\npackage main\n\nimport (\n\t\"fmt\"\n\t\"log\"\n\n\t\"entgo.io/ent/entc\"\n\t\"entgo.io/ent/entc/gen\"\n)\n\nfunc main() {\n\terr := entc.Generate(\"./schema\",\n\t\t&gen.Config{},\n\t\tentc.Extensions(&GreetExtension{\n\t\t\tword: GreetingWord(\"Shalom\"),\n\t\t}),\n\t)\n\tif err != nil {\n\t\tlog.Fatal(\"running ent codegen:\", err)\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Unit Test for Post Addition\nDESCRIPTION: A Go test function that verifies the post creation functionality by submitting a form and checking that the new post appears on the index page.\nSOURCE: https://github.com/ent/ent/blob/master/doc/website/blog/2023-02-23-simple-cms-with-ent.mdx#2025-04-22_snippet_25\n\nLANGUAGE: go\nCODE:\n```\nfunc TestAdd(t *testing.T) {\n\tclient := enttest.Open(t, \"sqlite3\", \"file:ent?mode=memory&cache=shared&_fk=1\")\n\tdefer client.Close()\n\terr := seed(context.Background(), client)\n\trequire.NoError(t, err)\n\n\tsrv := newServer(client)\n\tr := newRouter(srv)\n\n\tts := httptest.NewServer(r)\n\tdefer ts.Close()\n\n\t// Post the form.\n\tresp, err := ts.Client().PostForm(ts.URL+\"/add\", map[string][]string{\n\t\t\"title\": {\"Testing, one, two.\"},\n\t\t\"body\":  {\"This is a test\"},\n\t})\n\trequire.NoError(t, err)\n\t// We should be redirected to the index page and receive 200 OK.\n\trequire.Equal(t, http.StatusOK, resp.StatusCode)\n\n\tbody, err := io.ReadAll(resp.Body)\n\trequire.NoError(t, err)\n\t\n\t// The home page should contain our new post.\n\trequire.Contains(t, string(body), \"This is a test\")\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring entoas Extension with Custom API Details in Go\nDESCRIPTION: This code snippet shows how to configure the entoas extension with custom API title, description, and version. These details will be reflected in the generated OpenAPI Specification.\nSOURCE: https://github.com/ent/ent/blob/master/doc/website/blog/2021-11-15-announcing-entoas.md#2025-04-22_snippet_6\n\nLANGUAGE: go\nCODE:\n```\nfunc main() {\n\tex, err := entoas.NewExtension(\n\t\tentoas.SpecTitle(\"Fridge CMS\"),\n\t\tentoas.SpecDescription(\"API to manage fridges and their cooled contents. **ICY!**\"), \n\t\tentoas.SpecVersion(\"0.0.1\"),\n\t)\n\tif err != nil {\n\t\tlog.Fatalf(\"creating entoas extension: %v\", err)\n\t}\n\terr = entc.Generate(\"./schema\", &gen.Config{}, entc.Extensions(ex))\n\tif err != nil {\n\t\tlog.Fatalf(\"running ent codegen: %v\", err)\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: SQL Queries Generated for Eager Loading (SQL)\nDESCRIPTION: These SQL queries demonstrate the inefficient database operations performed when using eager loading to retrieve a Pet with its Owner's ID before edge-field support.\nSOURCE: https://github.com/ent/ent/blob/master/doc/website/blog/2021-03-12-announcing-edge-field-support.md#2025-04-22_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nSELECT DISTINCT `pets`.`id`, `pets`.`name`, `pets`.`pet_owner` FROM `pets` WHERE `pets`.`id` = ? LIMIT 2 \nSELECT DISTINCT `users`.`id` FROM `users` WHERE `users`.`id` IN (?)\n```\n\n----------------------------------------\n\nTITLE: Implementing the Annotations Method in Go\nDESCRIPTION: Implementation of the Annotations method to make the GreetingWord annotation available in templates.\nSOURCE: https://github.com/ent/ent/blob/master/doc/md/extension.md#2025-04-22_snippet_6\n\nLANGUAGE: go\nCODE:\n```\nfunc (s *GreetExtension) Annotations() []entc.Annotation {\n\treturn []entc.Annotation{\n\t\ts.word,\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Main Function for Blog Application\nDESCRIPTION: The main function that initializes the Ent client with a MySQL database connection, seeds the database if needed, and starts the HTTP server on port 8080.\nSOURCE: https://github.com/ent/ent/blob/master/doc/website/blog/2023-02-23-simple-cms-with-ent.mdx#2025-04-22_snippet_19\n\nLANGUAGE: go\nCODE:\n```\nfunc main() {  \n   // Read the connection string to the database from a CLI flag.  \n   var dsn string  \n   flag.StringVar(&dsn, \"dsn\", \"\", \"database DSN\")  \n   flag.Parse()  \n  \n   // Instantiate the Ent client.  \n   client, err := ent.Open(\"mysql\", dsn)  \n   if err != nil {  \n      log.Fatalf(\"failed connecting to mysql: %v\", err)  \n   }  \n   defer client.Close()  \n  \n   ctx := context.Background()  \n   // If we don't have any posts yet, seed the database.  \n   if !client.Post.Query().ExistX(ctx) {  \n      if err := seed(ctx, client); err != nil {  \n         log.Fatalf(\"failed seeding the database: %v\", err)  \n      }  \n   }  \n   srv := newServer(client)  \n   r := newRouter(srv)  \n   log.Fatal(http.ListenAndServe(\":8080\", r))  \n}\n```\n\n----------------------------------------\n\nTITLE: Defining Ent Schema for Embedding Entity\nDESCRIPTION: Go code defining the Ent schema for the Embedding entity. It includes a field for the vector embedding, an edge to the Chunk entity, and an index for efficient similarity searches.\nSOURCE: https://github.com/ent/ent/blob/master/doc/website/blog/2025-02-12-rag-with-ent-atlas-pgvector.mdx#2025-04-22_snippet_4\n\nLANGUAGE: go\nCODE:\n```\npackage schema\n\nimport (\n\t\"entgo.io/ent\"\n\t\"entgo.io/ent/dialect\"\n\t\"entgo.io/ent/dialect/entsql\"\n\t\"entgo.io/ent/schema/edge\"\n\t\"entgo.io/ent/schema/field\"\n\t\"entgo.io/ent/schema/index\"\n\t\"github.com/pgvector/pgvector-go\"\n)\n\n// Embedding holds the schema definition for the Embedding entity.\ntype Embedding struct {\n\tent.Schema\n}\n\n// Fields of the Embedding.\nfunc (Embedding) Fields() []ent.Field {\n\treturn []ent.Field{\n\t\tfield.Other(\"embedding\", pgvector.Vector{}).\n\t\t\tSchemaType(map[string]string{\n\t\t\t\tdialect.Postgres: \"vector(1536)\",\n\t\t\t}),\n\t}\n}\n\n// Edges of the Embedding.\nfunc (Embedding) Edges() []ent.Edge {\n\treturn []ent.Edge{\n\t\tedge.From(\"chunk\", Chunk.Type).Ref(\"embedding\").Unique().Required(),\n\t}\n}\n\nfunc (Embedding) Indexes() []ent.Index {\n\treturn []ent.Index{\n\t\tindex.Fields(\"embedding\").\n\t\t\tAnnotations(\n\t\t\t\tentsql.IndexType(\"hnsw\"),\n\t\t\t\tentsql.OpClass(\"vector_l2_ops\"),\n\t\t\t),\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Post Creation Handler\nDESCRIPTION: HTTP handler function that creates a new blog post by retrieving the form data and using Ent to store it in the database. It redirects to the index page after successful creation.\nSOURCE: https://github.com/ent/ent/blob/master/doc/website/blog/2023-02-23-simple-cms-with-ent.mdx#2025-04-22_snippet_21\n\nLANGUAGE: go\nCODE:\n```\n// add creates a new blog post.\nfunc (s *server) add(w http.ResponseWriter, r *http.Request) {\n\tauthor, err := s.client.User.Query().Only(r.Context())\n\tif err != nil {\n\t\thttp.Error(w, err.Error(), http.StatusInternalServerError)\n\t\treturn\n\t}\n\tif err := s.client.Post.Create().\n\t\tSetTitle(r.FormValue(\"title\")).\n\t\tSetBody(r.FormValue(\"body\")).\n\t\tSetAuthor(author).\n\t\tExec(r.Context()); err != nil {\n\t\thttp.Error(w, err.Error(), http.StatusInternalServerError)\n\t}\n\thttp.Redirect(w, r, \"/\", http.StatusFound)\n}\n```\n\n----------------------------------------\n\nTITLE: Migration Generator Implementation\nDESCRIPTION: Go program to generate versioned migration files by comparing schema with database state.\nSOURCE: https://github.com/ent/ent/blob/master/doc/website/blog/2022-03-14-announcing-versioned-migrations.md#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"context\"\n\t\"log\"\n\t\"os\"\n\n\t\"ariga.io/atlas/sql/migrate\"\n\t\"entgo.io/ent/dialect/sql\"\n\t\"entgo.io/ent/dialect/sql/schema\"\n\t\"entgo.io/ent/entc\"\n\t\"entgo.io/ent/entc/gen\"\n\t_ \"github.com/go-sql-driver/mysql\"\n)\n\nfunc main() {\n\tif len(os.Args) < 2 {\n\t\tlog.Fatalln(\"no name given\")\n\t}\n\tdir, err := migrate.NewLocalDir(\"migrations\")\n\tif err != nil {\n\t\tlog.Fatalln(err)\n\t}\n\tgraph, err := entc.LoadGraph(\"./ent/schema\", &gen.Config{})\n\tif err != nil {\n\t\tlog.Fatalln(err)\n\t}\n\ttbls, err := graph.Tables()\n\tif err != nil {\n\t\tlog.Fatalln(err)\n\t}\n\tdrv, err := sql.Open(\"mysql\", \"root:pass@tcp(localhost:3306)/ent\")\n\tif err != nil {\n\t\tlog.Fatalln(err)\n\t}\n\tm, err := schema.NewMigrate(drv, schema.WithDir(dir))\n\tif err != nil {\n\t\tlog.Fatalln(err)\n\t}\n\tif err := m.NamedDiff(context.Background(), os.Args[1], tbls...); err != nil {\n\t\tlog.Fatalln(err)\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Prometheus Collectors for Ent Metrics in Go\nDESCRIPTION: This code defines Prometheus collectors for tracking Ent operations. It creates counters for total operations and errors, and a histogram for operation duration, all with labels for mutation type and operation.\nSOURCE: https://github.com/ent/ent/blob/master/doc/website/blog/2021-08-12-building-observable-ent-application-with-prometheus.md#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\n//Ent dynamic dimensions\nconst (\n\tmutationType = \"mutation_type\"\n\tmutationOp   = \"mutation_op\"\n)\n\nvar entLabels = []string{mutationType, mutationOp}\n\n// Create a collector for total operations counter\nfunc initOpsProcessedTotal() *prometheus.CounterVec {\n\treturn promauto.NewCounterVec(\n\t\tprometheus.CounterOpts{\n\t\t\tName: \"ent_operation_total\",\n\t\t\tHelp: \"Number of ent mutation operations\",\n\t\t},\n\t\tentLabels,\n\t)\n}\n\n// Create a collector for error counter\nfunc initOpsProcessedError() *prometheus.CounterVec {\n\treturn promauto.NewCounterVec(\n\t\tprometheus.CounterOpts{\n\t\t\tName: \"ent_operation_error\",\n\t\t\tHelp: \"Number of failed ent mutation operations\",\n\t\t},\n\t\tentLabels,\n\t)\n}\n\n// Create a collector for duration histogram collector\nfunc initOpsDuration() *prometheus.HistogramVec {\n\treturn promauto.NewHistogramVec(\n\t\tprometheus.HistogramOpts{\n\t\t\tName: \"ent_operation_duration_seconds\",\n\t\t\tHelp: \"Time in seconds per operation\",\n\t\t},\n\t\tentLabels,\n\t)\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring gqlgen for Ent Node Interface\nDESCRIPTION: YAML configuration update in gqlgen.yml to use Ent's Noder interface for the Node type.\nSOURCE: https://github.com/ent/ent/blob/master/doc/md/tutorial-todo-gql-node.md#2025-04-22_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nmodels:\n  # Defines the ID field as Go 'int'.\n  ID:\n    model:\n      - github.com/99designs/gqlgen/graphql.IntID\n  Node:\n    model:\n      - todo/ent.Noder\n```\n\n----------------------------------------\n\nTITLE: Enabling Versioned Migrations with Ent CLI\nDESCRIPTION: Configuration for enabling versioned migrations using the Ent CLI by adding the sql/versioned-migration feature flag to the generate command.\nSOURCE: https://github.com/ent/ent/blob/master/doc/md/versioned-migrations.mdx#2025-04-22_snippet_5\n\nLANGUAGE: go\nCODE:\n```\npackage ent\n\n//go:generate go run -mod=mod entgo.io/ent/cmd/ent generate --feature sql/versioned-migration ./schema\n```\n\n----------------------------------------\n\nTITLE: Configure Ent Code Generation with elk Extension\nDESCRIPTION: Setup file for integrating elk extension with Ent's code generation system\nSOURCE: https://github.com/ent/ent/blob/master/doc/website/blog/2021-07-29-generate-a-fully-working-go-crud-http-api-with-ent.md#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\n// +build ignore\n\npackage main\n\nimport (\n\t\"log\"\n\n\t\"entgo.io/ent/entc\"\n\t\"entgo.io/ent/entc/gen\"\n\t\"github.com/masseelch/elk\"\n)\n\nfunc main() {\n\tex, err := elk.NewExtension(\n\t\telk.GenerateSpec(\"openapi.json\"),\n\t\telk.GenerateHandlers(),\n\t)\n\tif err != nil {\n\t\tlog.Fatalf(\"creating elk extension: %v\", err)\n\t}\n\terr = entc.Generate(\"./schema\", &gen.Config{}, entc.Extensions(ex))\n\tif err != nil {\n\t\tlog.Fatalf(\"running ent codegen: %v\", err)\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Installing ent CLI Tool with Go\nDESCRIPTION: Command to install the ent command-line interface tool using Go's install command. The tool is used for code generation and schema management in ent projects.\nSOURCE: https://github.com/ent/ent/blob/master/README.md#2025-04-22_snippet_0\n\nLANGUAGE: console\nCODE:\n```\ngo install entgo.io/ent/cmd/ent@latest\n```\n\n----------------------------------------\n\nTITLE: Defining File Schema in Ent\nDESCRIPTION: Demonstrates how to define a File schema in Ent with fields for name, deletion status, and optional parent ID.\nSOURCE: https://github.com/ent/ent/blob/master/doc/website/blog/2021-07-01-automatic-graphql-filter-generation.md#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\n// File holds the schema definition for the File entity.\ntype File struct {\n\tent.Schema\n}\n// Fields of the File.\nfunc (File) Fields() []ent.Field {\n\treturn []ent.Field{\n\t\tfield.String(\"name\"),\n\t\tfield.Bool(\"deleted\").\n\t\t\tDefault(false),\n\t\tfield.Int(\"parent_id\").\n\t\t\tOptional(),\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: GitHub Action for MariaDB Migration Linting\nDESCRIPTION: A GitHub Action workflow that automates linting of Ent migration files for MariaDB databases. It spins up a MariaDB container to validate migrations, ensuring they are valid and safe to apply.\nSOURCE: https://github.com/ent/ent/blob/master/doc/md/ci.mdx#2025-04-22_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nname: Atlas CI\non:\n  # Run whenever code is changed in the master branch,\n  # change this to your root branch.\n  push:\n    branches:\n      - master\n  # Run on PRs where something changed under the `ent/migrate/migrations/` directory.\n  pull_request:\n    paths:\n      - 'ent/migrate/migrations/*'\njobs:\n  lint:\n    services:\n      # Spin up a maria:11 container to be used as the dev-database for analysis.\n      mariadb:\n        image: mariadb:11\n        env:\n          MYSQL_DATABASE: dev\n          MYSQL_ROOT_PASSWORD: pass\n        ports:\n          - \"3306:3306\"\n        options: >\n          --health-cmd \"healthcheck.sh --su-mysql --connect --innodb_initialized\"\n          --health-interval 10s\n          --health-start-period 10s\n          --health-timeout 5s\n          --health-retries 10\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - uses: ariga/setup-atlas@v0\n        with:\n          cloud-token: ${{ secrets.ATLAS_CLOUD_TOKEN }}\n      - uses: ariga/atlas-action/migrate/lint@v1\n        with:\n          dir: 'file://ent/migrate/migrations'\n          dir-name: 'my-project' # The name of the project in Atlas Cloud\n          dev-url: \"maria://root:pass@localhost:3306/dev\"\n```\n\n----------------------------------------\n\nTITLE: Generating Initial Ent Schema\nDESCRIPTION: Uses the Ent code generator to create an initial User schema.\nSOURCE: https://github.com/ent/ent/blob/master/doc/website/blog/2021-03-18-generating-a-grpc-server-with-ent.md#2025-04-22_snippet_1\n\nLANGUAGE: console\nCODE:\n```\ngo run -mod=mod entgo.io/ent/cmd/ent new User\n```\n\n----------------------------------------\n\nTITLE: Using Global Annotations in Ent Code Generation\nDESCRIPTION: Example of how to inject global annotations during Ent code generation. This code loads a GQLGen config and passes it as an annotation to all templates.\nSOURCE: https://github.com/ent/ent/blob/master/doc/md/templates.md#2025-04-22_snippet_7\n\nLANGUAGE: go\nCODE:\n```\nfunc main() {\n\tcfg, err := config.LoadConfig(\"<path to gqlgen.yml>\")\n\tif err != nil {\n\t\tlog.Fatalf(\"loading gqlgen config: %v\", err)\n\t}\n\topts := []entc.Option{\n\t\tentc.TemplateDir(\"./template\"),\n\t\tentc.Annotations(gqlconfig.Annotation{Config: cfg}),\n\t}\n\terr = entc.Generate(\"./schema\", &gen.Config{\n\t\tTemplates: entgql.AllTemplates,\n\t}, opts...)\n\tif err != nil {\n\t\tlog.Fatalf(\"running ent codegen: %v\", err)\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling Foreign Keys in Ent Schema Migration\nDESCRIPTION: Example showing how to disable foreign key constraints during schema migration. This is useful when the application needs to handle data consistency at the application level instead of relying on database constraints.\nSOURCE: https://github.com/ent/ent/blob/master/doc/md/migrate.md#2025-04-22_snippet_5\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n    \"context\"\n    \"log\"\n\n    \"<project>/ent\"\n    \"<project>/ent/migrate\"\n)\n\nfunc main() {\n    client, err := ent.Open(\"mysql\", \"root:pass@tcp(localhost:3306)/test\")\n    if err != nil {\n        log.Fatalf(\"failed connecting to mysql: %v\", err)\n    }\n    defer client.Close()\n    ctx := context.Background()\n    // Run migration.\n    err = client.Schema.Create(\n        ctx,\n        migrate.WithForeignKeys(false), // Disable foreign keys.\n    )\n    if err != nil {\n        log.Fatalf(\"failed creating schema resources: %v\", err)\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Applying Schema with Atlas Go SDK\nDESCRIPTION: Go code snippet demonstrating how to apply the schema directly to a database using the Atlas Go SDK.\nSOURCE: https://github.com/ent/ent/blob/master/doc/md/migration/extension.mdx#2025-04-22_snippet_8\n\nLANGUAGE: go\nCODE:\n```\nac, err := atlasexec.NewClient(\".\", \"atlas\")\nif err != nil {\n\tlog.Fatalf(\"failed to initialize client: %w\", err)\n}\n// Automatically update the database with the desired schema.\n// Another option, is to use 'migrate apply' or 'schema apply' manually.\nif _, err := ac.SchemaApply(ctx, &atlasexec.SchemaApplyParams{\n\tEnv: \"local\",\n\tURL: \"postgres://postgres:pass@localhost:5432/database?sslmode=disable\",\n\tAutoApprove: true,\n}); err != nil {\n    log.Fatalf(\"failed to apply schema changes: %w\", err)\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Like Edge Schema with Composite Primary Key in Ent\nDESCRIPTION: Definition of the Like edge schema that connects users to tweets they've liked. This schema includes a liked_at timestamp and uses field.ID annotation to create a composite primary key from user_id and tweet_id.\nSOURCE: https://github.com/ent/ent/blob/master/doc/md/schema-edges.mdx#2025-04-22_snippet_24\n\nLANGUAGE: go\nCODE:\n```\n// Like holds the edge schema definition for the Like edge.\ntype Like struct {\n\tent.Schema\n}\n\nfunc (Like) Annotations() []schema.Annotation {\n\treturn []schema.Annotation{\n\t\tfield.ID(\"user_id\", \"tweet_id\"),\n\t}\n}\n\n// Fields of the Like.\nfunc (Like) Fields() []ent.Field {\n\treturn []ent.Field{\n\t\tfield.Time(\"liked_at\").\n\t\t\tDefault(time.Now),\n\t\tfield.Int(\"user_id\"),\n\t\tfield.Int(\"tweet_id\"),\n\t}\n}\n\n// Edges of the Like.\nfunc (Like) Edges() []ent.Edge {\n\treturn []ent.Edge{\n\t\tedge.To(\"user\", User.Type).\n\t\t\tUnique().\n\t\t\tRequired().\n\t\t\tField(\"user_id\"),\n\t\tedge.To(\"tweet\", Tweet.Type).\n\t\t\tUnique().\n\t\t\tRequired().\n\t\t\tField(\"tweet_id\"),\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Migration with Atlas\nDESCRIPTION: Shell command to generate a migration for the schema using Atlas.\nSOURCE: https://github.com/ent/ent/blob/master/doc/md/migration/domain.mdx#2025-04-22_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\natlas migrate diff \\\n  --env local\n```\n\n----------------------------------------\n\nTITLE: Generated User Schema Example\nDESCRIPTION: This snippet shows an example of a User schema generated by the UpsertSchema mutator. It includes a name field and empty implementations for Edges and Annotations methods.\nSOURCE: https://github.com/ent/ent/blob/master/doc/md/generating-ent-schemas.md#2025-04-22_snippet_5\n\nLANGUAGE: go\nCODE:\n```\n// user.go\npackage schema\n\nimport (\n\t\"entgo.io/ent\"\n\t\"entgo.io/ent/schema\"\n\t\"entgo.io/ent/schema/field\"\n)\n\ntype User struct {\n\tent.Schema\n}\n\nfunc (User) Fields() []ent.Field {\n\treturn []ent.Field{field.String(\"name\")}\n}\nfunc (User) Edges() []ent.Edge {\n\treturn nil\n}\nfunc (User) Annotations() []schema.Annotation {\n\treturn nil\n}\n```\n\n----------------------------------------\n\nTITLE: Migration Generation Script with Atlas\nDESCRIPTION: Main script for generating database migrations using Atlas format, setting up the migration directory and configuration options.\nSOURCE: https://github.com/ent/ent/blob/master/doc/md/versioned-migrations.mdx#2025-04-22_snippet_8\n\nLANGUAGE: go\nCODE:\n```\n//go:build ignore\n\npackage main\n\nimport (\n\t\"context\"\n\t\"log\"\n\t\"os\"\n\n\t\"<project>/ent/migrate\"\n\n\tatlas \"ariga.io/atlas/sql/migrate\"\n\t\"entgo.io/ent/dialect\"\n\t\"entgo.io/ent/dialect/sql/schema\"\n\t_ \"github.com/go-sql-driver/mysql\"\n)\n\nfunc main() {\n\tctx := context.Background()\n\tdir, err := atlas.NewLocalDir(\"ent/migrate/migrations\")\n\tif err != nil {\n\t\tlog.Fatalf(\"failed creating atlas migration directory: %v\", err)\n\t}\n\topts := []schema.MigrateOption{\n\t\tschema.WithDir(dir),\n\t\tschema.WithMigrationMode(schema.ModeReplay),\n\t\tschema.WithDialect(dialect.MySQL),\n\t\tschema.WithFormatter(atlas.DefaultFormatter),\n\t}\n\tif len(os.Args) != 2 {\n\t\tlog.Fatalln(\"migration name is required. Use: 'go run -mod=mod ent/migrate/main.go <name>'\")\n\t}\n\terr = migrate.NamedDiff(ctx, \"mysql://root:pass@localhost:3306/test\", os.Args[1], opts...)\n\tif err != nil {\n\t\tlog.Fatalf(\"failed generating migration file: %v\", err)\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Table with JSON Column in MySQL\nDESCRIPTION: This SQL snippet demonstrates how to create a table with a JSON column in MySQL.\nSOURCE: https://github.com/ent/ent/blob/master/doc/website/blog/2022-10-10-json-append.mdx#2025-04-22_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE t1 (jdoc JSON);\n```\n\n----------------------------------------\n\nTITLE: Configuring Go Generate for Custom Ent Generation\nDESCRIPTION: Go file that sets up the go:generate directive to use a custom entc.go script for code generation.\nSOURCE: https://github.com/ent/ent/blob/master/doc/md/code-gen.md#2025-04-22_snippet_5\n\nLANGUAGE: go\nCODE:\n```\npackage ent\n\n//go:generate go run -mod=mod entc.go\n```\n\n----------------------------------------\n\nTITLE: Configuring Atlas for Database Schema Management\nDESCRIPTION: HCL configuration for Atlas, defining the composite schema that includes both the base PostgreSQL configuration and the Ent schema. It also sets up the local environment for development.\nSOURCE: https://github.com/ent/ent/blob/master/doc/website/blog/2025-02-12-rag-with-ent-atlas-pgvector.mdx#2025-04-22_snippet_8\n\nLANGUAGE: hcl\nCODE:\n```\ndata \"composite_schema\" \"schema\" {\n  schema {\n    url = \"file://base.pg.hcl\"\n  }\n  schema \"public\" {\n    url = \"ent://ent/schema\"\n  }\n}\n\nenv \"local\" {\n  url = getenv(\"DB_URL\")\n  schema {\n    src = data.composite_schema.schema.url\n  }\n  dev = \"docker://pgvector/pg17/dev\"\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Atlas Database Tool\nDESCRIPTION: Command to install Atlas, a database schema-as-code tool that integrates with Ent for managing database schemas.\nSOURCE: https://github.com/ent/ent/blob/master/doc/website/blog/2025-02-12-rag-with-ent-atlas-pgvector.mdx#2025-04-22_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ncurl -sSfL https://atlasgo.io/install.sh | sh\n```\n\n----------------------------------------\n\nTITLE: Testing Edge Retrieval with View Options\nDESCRIPTION: Test demonstrating how to retrieve entity relationships using different view options in the gRPC service.\nSOURCE: https://github.com/ent/ent/blob/master/doc/md/tutorial-grpc-edges.md#2025-04-22_snippet_4\n\nLANGUAGE: go\nCODE:\n```\nfunc TestGet(t *testing.T) {\n\tctx := context.Background()\n\tclient := enttest.Open(t, \"sqlite3\", \"file:ent?mode=memory&cache=shared&_fk=1\")\n\tdefer client.Close()\n\tsvc := entpb.NewUserService(client)\n\tuser := client.User.Create().\n\t\tSetName(\"rotemtam\").\n\t\tSetEmailAddress(\"r@entgo.io\").\n\t\tSaveX(ctx)\n\tclient.Category.Create().\n\t\tSetName(\"category\").\n\t\tSetAdmin(user).\n\t\tSaveX(ctx)\n\tget, err := svc.Get(ctx, &entpb.GetUserRequest{\n\t\tId: int64(user.ID),\n\t})\n\tif err != nil {\n\t\tt.Fatal(\"failed retrieving the created user\", err)\n\t}\n\tif len(get.Administered) != 0 {\n\t\tt.Fatal(\"by default edge information is not supposed to be retrieved\")\n\t}\n\tget, err = svc.Get(ctx, &entpb.GetUserRequest{\n\t\tId:   int64(user.ID),\n\t\tView: entpb.GetUserRequest_WITH_EDGE_IDS,\n\t})\n\tif err != nil {\n\t\tt.Fatal(\"failed retrieving the created user\", err)\n\t}\n\tif len(get.Administered) != 1 {\n\t\tt.Fatal(\"using WITH_EDGE_IDS edges should be returned\")\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Updating GraphQL Schema to Accept Filter Types\nDESCRIPTION: Shows how to update the GraphQL schema to accept the new filter types for queries.\nSOURCE: https://github.com/ent/ent/blob/master/doc/website/blog/2021-07-01-automatic-graphql-filter-generation.md#2025-04-22_snippet_7\n\nLANGUAGE: graphql\nCODE:\n```\ntype Query {\n  todos(\n    after: Cursor,\n    first: Int,\n    before: Cursor,\n    last: Int,\n    orderBy: TodoOrder,\n    where: TodoWhereInput,\n  ): TodoConnection!\n}\n```\n\n----------------------------------------\n\nTITLE: Generated Protobuf Message Definition for User Entity\nDESCRIPTION: This is the automatically generated Protobuf message definition for the User entity, created by entproto based on the Ent schema annotations.\nSOURCE: https://github.com/ent/ent/blob/master/doc/md/tutorial-grpc-generating-proto.md#2025-04-22_snippet_3\n\nLANGUAGE: protobuf\nCODE:\n```\nsyntax = \"proto3\";\n\npackage entpb;\n\noption go_package = \"ent-grpc-example/ent/proto/entpb\";\n\nmessage User {\n  int32 id = 1;\n\n  string user_name = 2;\n\n  string email_address = 3;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Ent Schema for Post Entity\nDESCRIPTION: Defines fields and edges for the Post entity in the Ent schema.\nSOURCE: https://github.com/ent/ent/blob/master/doc/website/blog/2023-02-23-simple-cms-with-ent.mdx#2025-04-22_snippet_5\n\nLANGUAGE: go\nCODE:\n```\n// Post holds the schema definition for the Post entity.\ntype Post struct {  \n   ent.Schema  \n}  \n  \n// Fields of the Post.  \nfunc (Post) Fields() []ent.Field {  \n   return []ent.Field{  \n      field.String(\"title\"),  \n      field.Text(\"body\"),  \n      field.Time(\"created_at\").\n            Default(time.Now),  \n   }  \n}  \n  \n// Edges of the Post.\nfunc (Post) Edges() []ent.Edge {  \n   return []ent.Edge{  \n      edge.From(\"author\", User.Type).  \n         Unique().  \n         Ref(\"posts\"),  \n   }  \n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Tenant Filter Rule in Go\nDESCRIPTION: Defines a FilterTenantRule that ensures entities are only accessible within their tenant context. Uses privacy.FilterFunc to implement tenant-based filtering logic.\nSOURCE: https://github.com/ent/ent/blob/master/doc/md/privacy.mdx#2025-04-22_snippet_14\n\nLANGUAGE: go\nCODE:\n```\nfunc FilterTenantRule() privacy.QueryMutationRule {\n\ttype TenantsFilter interface {\n\t\tWhereTenantID(entql.IntP)\n\t}\n\treturn privacy.FilterFunc(func(ctx context.Context, f privacy.Filter) error {\n\t\tview := viewer.FromContext(ctx)\n\t\ttid, ok := view.Tenant()\n\t\tif !ok {\n\t\t\treturn privacy.Denyf(\"missing tenant information in viewer\")\n\t\t}\n\t\ttf, ok := f.(TenantsFilter)\n\t\tif !ok {\n\t\t\treturn privacy.Denyf(\"unexpected filter type %T\", f)\n\t\t}\n\t\ttf.WhereTenantID(entql.IntEQ(tid))\n\t\treturn privacy.Skip\n\t})\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Annotation for Ent Extension in Go\nDESCRIPTION: Definition of a custom annotation that allows configuring the greeting word used in the generated code.\nSOURCE: https://github.com/ent/ent/blob/master/doc/md/extension.md#2025-04-22_snippet_4\n\nLANGUAGE: go\nCODE:\n```\n// GreetingWord implements entc.Annotation.\ntype GreetingWord string\n\n// Name of the annotation. Used by the codegen templates.\nfunc (GreetingWord) Name() string {\n\treturn \"GreetingWord\"\n}\n```\n\n----------------------------------------\n\nTITLE: Creating gRPC Client in Go\nDESCRIPTION: This snippet demonstrates how to create a gRPC client that connects to the server, creates a new user, and retrieves it from the database.\nSOURCE: https://github.com/ent/ent/blob/master/doc/website/blog/2021-03-18-generating-a-grpc-server-with-ent.md#2025-04-22_snippet_15\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"context\"\n\t\"fmt\"\n\t\"log\"\n\t\"math/rand\"\n\t\"time\"\n\n\t\"ent-grpc-example/ent/proto/entpb\"\n\t\"google.golang.org/grpc\"\n\t\"google.golang.org/grpc/status\"\n)\n\nfunc main() {\n\trand.Seed(time.Now().UnixNano())\n\n\tconn, err := grpc.Dial(\":5000\", grpc.WithInsecure())\n\tif err != nil {\n\t\tlog.Fatalf(\"failed connecting to server: %s\", err)\n\t}\n\tdefer conn.Close()\n\n\tclient := entpb.NewUserServiceClient(conn)\n\n\tctx := context.Background()\n\tuser := randomUser()\n\tcreated, err := client.Create(ctx, &entpb.CreateUserRequest{\n\t\tUser: user,\n\t})\n\tif err != nil {\n\t\tse, _ := status.FromError(err)\n\t\tlog.Fatalf(\"failed creating user: status=%s message=%s\", se.Code(), se.Message())\n\t}\n\tlog.Printf(\"user created with id: %d\", created.Id)\n\n\tget, err := client.Get(ctx, &entpb.GetUserRequest{\n\t\tId: created.Id,\n\t})\n\tif err != nil {\n\t\tse, _ := status.FromError(err)\n\t\tlog.Fatalf(\"failed retrieving user: status=%s message=%s\", se.Code(), se.Message())\n\t}\n\tlog.Printf(\"retrieved user with id=%d: %v\", get.Id, get)\n}\n\nfunc randomUser() *entpb.User {\n\treturn &entpb.User{\n\t\tName:         fmt.Sprintf(\"user_%d\", rand.Int()),\n\t\tEmailAddress: fmt.Sprintf(\"user_%d@example.com\", rand.Int()),\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Define Pet Schema\nDESCRIPTION: Schema definition for the Pet entity with name and age fields\nSOURCE: https://github.com/ent/ent/blob/master/doc/website/blog/2021-07-29-generate-a-fully-working-go-crud-http-api-with-ent.md#2025-04-22_snippet_4\n\nLANGUAGE: go\nCODE:\n```\npackage schema\n\nimport (\n\t\"entgo.io/ent\"\n\t\"entgo.io/ent/schema/field\"\n)\n\n// Pet holds the schema definition for the Pet entity.\ntype Pet struct {\n\tent.Schema\n}\n\n// Fields of the Pet.\nfunc (Pet) Fields() []ent.Field {\n\treturn []ent.Field{\n\t\tfield.String(\"name\"),\n\t\tfield.Int(\"age\"),\n\t}\n}\n\n```\n\n----------------------------------------\n\nTITLE: GitHub Action for SQLite Migration Linting\nDESCRIPTION: A GitHub Action workflow that automates linting of Ent migration files for SQLite databases. This workflow validates migrations by using an in-memory SQLite database to ensure they can be applied without errors.\nSOURCE: https://github.com/ent/ent/blob/master/doc/md/ci.mdx#2025-04-22_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nname: Atlas CI\non:\n  # Run whenever code is changed in the master branch,\n  # change this to your root branch.\n  push:\n    branches:\n      - master\n  # Run on PRs where something changed under the `ent/migrate/migrations/` directory.\n  pull_request:\n    paths:\n      - 'ent/migrate/migrations/*'\njobs:\n  lint:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - uses: ariga/setup-atlas@v0\n        with:\n          cloud-token: ${{ secrets.ATLAS_CLOUD_TOKEN }}\n      - uses: ariga/atlas-action/migrate/lint@v1\n        with:\n          dir: 'file://ent/migrate/migrations'\n          dir-name: 'my-project' # The name of the project in Atlas Cloud\n          dev-url: sqlite://file?mode=memory&_fk=1\n```\n\n----------------------------------------\n\nTITLE: Defining Available gRPC Service Method Flags in Go\nDESCRIPTION: This snippet lists the available flags for configuring which gRPC service methods should be generated. These flags can be used with entproto.Methods() in the entproto.Service() annotation.\nSOURCE: https://github.com/ent/ent/blob/master/doc/md/tutorial-grpc-service-generation-options.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\n// Generates a Create gRPC service method for the entproto.Service.\nentproto.MethodCreate\n\n// Generates a Get gRPC service method for the entproto.Service.\nentproto.MethodGet\n\n// Generates an Update gRPC service method for the entproto.Service.\nentproto.MethodUpdate\n\n// Generates a Delete gRPC service method for the entproto.Service.\nentproto.MethodDelete\n\n// Generates a List gRPC service method for the entproto.Service.\nentproto.MethodList\n\n// Generates a Batch Create gRPC service method for the entproto.Service.\nentproto.MethodBatchCreate\n\n// Generates all service methods for the entproto.Service.\n// This is the same behavior as not including entproto.Methods.\nentproto.MethodAll\n```\n\n----------------------------------------\n\nTITLE: Adding User-Post Edge Relationship\nDESCRIPTION: Definition of a one-to-many edge relationship between User and Post entities\nSOURCE: https://github.com/ent/ent/blob/master/doc/website/blog/2021-08-26-visualizing-your-data-graph-using-entviz.md#2025-04-22_snippet_4\n\nLANGUAGE: go\nCODE:\n```\n// Edges of the User.\nfunc (User) Edges() []ent.Edge {\n\treturn []ent.Edge{\n\t\tedge.To(\"posts\", Post.Type),\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Appending Values to JSON Arrays in SQLite\nDESCRIPTION: This SQL snippet shows how to atomically append a value to a JSON array in SQLite, handling edge cases where the field might not exist or be null.\nSOURCE: https://github.com/ent/ent/blob/master/doc/website/blog/2022-10-10-json-append.mdx#2025-04-22_snippet_7\n\nLANGUAGE: sql\nCODE:\n```\nUPDATE `t` SET `c` = CASE\nWHEN\n    (JSON_TYPE(`c`, '$') IS NULL\n    OR JSON_TYPE(`c`, '$') = 'null')\nTHEN\n    JSON_ARRAY(?)\nELSE\n    JSON_INSERT(`c`, '$[#]', ?)\nEND\n```\n\n----------------------------------------\n\nTITLE: Enabling Versioned Migration with entc Package\nDESCRIPTION: Configuration for enabling versioned migration feature flag using the entc package for custom code generation.\nSOURCE: https://github.com/ent/ent/blob/master/doc/md/versioned/07-programmatically.mdx#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\n//go:build ignore\n\npackage main\n\nimport (\n\t\"log\"\n\n\t\"entgo.io/ent/entc\"\n\t\"entgo.io/ent/entc/gen\"\n)\n\nfunc main() {\n\terr := entc.Generate(\"./schema\", &gen.Config{\n\t\tFeatures: []gen.Feature{gen.FeatureVersionedMigration},\n\t})\n\tif err != nil {\n\t\tlog.Fatalf(\"running ent codegen: %v\", err)\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Creating User Entity in Go with ent\nDESCRIPTION: Defines a function to create a new User entity using ent client.\nSOURCE: https://github.com/ent/ent/blob/master/doc/md/getting-started.mdx#2025-04-22_snippet_5\n\nLANGUAGE: go\nCODE:\n```\nfunc CreateUser(ctx context.Context, client *ent.Client) (*ent.User, error) {\n\tu, err := client.User.\n\t\tCreate().\n\t\tSetAge(30).\n\t\tSetName(\"a8m\").\n\t\tSave(ctx)\n\tif err != nil {\n\t\treturn nil, fmt.Errorf(\"failed creating user: %w\", err)\n\t}\n\tlog.Println(\"user was created: \", u)\n\treturn u, nil\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Migrations with Atlas for Ent Schema\nDESCRIPTION: This command generates migration files by comparing the current state to the Ent schema. It uses a MySQL Docker container as the dev database and formats the output as SQL.\nSOURCE: https://github.com/ent/ent/blob/master/entc/integration/multischema/README.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\natlas migrate diff --to ent://versioned/schema \\\n  --dev-url docker://mysql/8 \\\n  --format '{{ sql . \"  \" }}'\n```\n\n----------------------------------------\n\nTITLE: Defining O2M Relationship with Same Type in Go using Ent\nDESCRIPTION: Illustrates how to define a recursive one-to-many relationship for a tree structure using Ent edges in Go.\nSOURCE: https://github.com/ent/ent/blob/master/examples/README.md#2025-04-22_snippet_11\n\nLANGUAGE: go\nCODE:\n```\n// Edges of the Node.\nfunc (Node) Edges() []ent.Edge {\n\treturn []ent.Edge{\n\t\tedge.To(\"children\", Node.Type).\n\t\t\tFrom(\"parent\").\n\t\t\tUnique(),\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Node and Nodes Resolvers\nDESCRIPTION: Go code changes to implement the Node and Nodes resolvers using Ent's client methods.\nSOURCE: https://github.com/ent/ent/blob/master/doc/md/tutorial-todo-gql-node.md#2025-04-22_snippet_4\n\nLANGUAGE: go\nCODE:\n```\nfunc (r *queryResolver) Node(ctx context.Context, id int) (ent.Noder, error) {\n\treturn r.client.Noder(ctx, id)\n}\n\nfunc (r *queryResolver) Nodes(ctx context.Context, ids []int) ([]ent.Noder, error) {\n\treturn r.client.Noders(ctx, ids)\n}\n```\n\n----------------------------------------\n\nTITLE: Mapping Simple GraphQL Query to Ent Query\nDESCRIPTION: Corresponding Ent query in Go for the simple GraphQL query with implicit AND operator.\nSOURCE: https://github.com/ent/ent/blob/master/doc/md/tutorial-todo-gql-filter-input.md#2025-04-22_snippet_9\n\nLANGUAGE: go\nCODE:\n```\nclient.Todo.\n\tQuery().\n\tWhere(\n\t\ttodo.And(\n\t\t\ttodo.StatusEQ(todo.StatusCompleted),\n\t\t\ttodo.TextHasPrefix(\"GraphQL\"),\n\t\t)\n\t).\n\tAll(ctx)\n```\n\n----------------------------------------\n\nTITLE: Complete User Schema Definition in Go\nDESCRIPTION: Complete User schema implementation including fields and edges definitions for One-To-Many relation with Pet schema.\nSOURCE: https://github.com/ent/ent/blob/master/doc/website/blog/2021-07-29-generate-a-fully-working-go-crud-http-api-with-ent.md#2025-04-22_snippet_7\n\nLANGUAGE: go\nCODE:\n```\npackage schema\n\nimport (\n\t\"entgo.io/ent\"\n\t\"entgo.io/ent/schema/edge\"\n\t\"entgo.io/ent/schema/field\"\n)\n\n// User holds the schema definition for the User entity.\ntype User struct {\n\tent.Schema\n}\n\n// Fields of the User.\nfunc (User) Fields() []ent.Field {\n\treturn []ent.Field{\n\t\tfield.String(\"name\"),\n\t\tfield.Int(\"age\"),\n\t}\n}\n\n// Edges of the User.\nfunc (User) Edges() []ent.Edge {\n\treturn []ent.Edge{\n\t\tedge.To(\"pets\", Pet.Type),\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Handler with MarkDone Functionality in Go\nDESCRIPTION: Updated main.go with implementation of the custom MarkDone endpoint handler that updates a Todo's done status to true.\nSOURCE: https://github.com/ent/ent/blob/master/doc/website/blog/2022-02-15-generate-rest-crud-with-ent-and-ogen.md#2025-04-22_snippet_16\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"context\"\n\t\"log\"\n\t\"net/http\"\n\n\t\"entgo.io/ent/dialect\"\n\t\"entgo.io/ent/dialect/sql/schema\"\n\t\"github.com/ariga/ogent/example/todo/ent\"\n\t\"github.com/ariga/ogent/example/todo/ent/ogent\"\n\t_ \"github.com/mattn/go-sqlite3\"\n)\n\ntype handler struct {\n\t*ogent.OgentHandler\n\tclient *ent.Client\n}\n\nfunc (h handler) MarkDone(ctx context.Context, params ogent.MarkDoneParams) (ogent.MarkDoneNoContent, error) {\n\treturn ogent.MarkDoneNoContent{}, h.client.Todo.UpdateOneID(params.ID).SetDone(true).Exec(ctx)\n}\n\nfunc main() {\n\t// Create ent client.\n\tclient, err := ent.Open(dialect.SQLite, \"file:ent?mode=memory&cache=shared&_fk=1\")\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\t// Run the migrations.\n\tif err := client.Schema.Create(context.Background(), schema.WithAtlas(true)); err != nil {\n\t\tlog.Fatal(err)\n\t}\n\t// Create the handler.\n\th := handler{\n\t\tOgentHandler: ogent.NewOgentHandler(client),\n\t\tclient:       client,\n\t}\n\t// Start listening.\n\tsrv := ogent.NewServer(h)\n\tif err := http.ListenAndServe(\":8180\", srv); err != nil {\n\t\tlog.Fatal(err)\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Type-Specific and Operation-Specific Hooks\nDESCRIPTION: Shows how to create hooks that only apply to specific entity types or mutation operations using the hook package.\nSOURCE: https://github.com/ent/ent/blob/master/doc/md/hooks.md#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nfunc main() {\n    // <client was defined in the previous block>\n\n    // Add a hook only on user mutations.\n\tclient.User.Use(func(next ent.Mutator) ent.Mutator {\n        // Use the \"<project>/ent/hook\" to get the concrete type of the mutation.\n\t\treturn hook.UserFunc(func(ctx context.Context, m *ent.UserMutation) (ent.Value, error) {\n\t\t\treturn next.Mutate(ctx, m)\n\t\t})\n\t})\n    \n    // Add a hook only on update operations.\n    client.Use(hook.On(Logger(), ent.OpUpdate|ent.OpUpdateOne))\n    \n    // Reject delete operations.\n    client.Use(hook.Reject(ent.OpDelete|ent.OpDeleteOne))\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Ent Schema Field with Composite Type\nDESCRIPTION: Go code defining an Ent schema field that uses the 'address' composite type in PostgreSQL dialect.\nSOURCE: https://github.com/ent/ent/blob/master/doc/md/migration/composite.mdx#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\n// Fields of the User.\nfunc (User) Fields() []ent.Field {\n\treturn []ent.Field{\n\t\tfield.String(\"address\").\n\t\t\tGoType(&Address{}).\n\t\t\tSchemaType(map[string]string{\n\t\t\t\tdialect.Postgres: \"address\",\n\t\t\t}),\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Adding entproto Package to Project\nDESCRIPTION: Installs the entproto package for Protobuf and gRPC support.\nSOURCE: https://github.com/ent/ent/blob/master/doc/website/blog/2021-03-18-generating-a-grpc-server-with-ent.md#2025-04-22_snippet_2\n\nLANGUAGE: console\nCODE:\n```\ngo get -u entgo.io/contrib/entproto\n```\n\n----------------------------------------\n\nTITLE: Defining Fridge Entity Schema\nDESCRIPTION: Ent schema definition for the Fridge entity with title field and compartments edge.\nSOURCE: https://github.com/ent/ent/blob/master/doc/website/blog/2021-09-10-openapi-generator.md#2025-04-22_snippet_4\n\nLANGUAGE: go\nCODE:\n```\npackage schema\n\nimport (\n\t\"entgo.io/ent\"\n\t\"entgo.io/ent/schema/edge\"\n\t\"entgo.io/ent/schema/field\"\n)\n\n// Fridge holds the schema definition for the Fridge entity.\ntype Fridge struct {\n\tent.Schema\n}\n\n// Fields of the Fridge.\nfunc (Fridge) Fields() []ent.Field {\n\treturn []ent.Field{\n\t\tfield.String(\"title\"),\n\t}\n}\n\n// Edges of the Fridge.\nfunc (Fridge) Edges() []ent.Edge {\n\treturn []ent.Edge{\n\t\tedge.To(\"compartments\", Compartment.Type),\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Defining PostGIS Field in Ent Schema\nDESCRIPTION: Go code snippet showing how to define a field using the PostGIS GEOMETRY type in an Ent schema.\nSOURCE: https://github.com/ent/ent/blob/master/doc/md/migration/extension.mdx#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\n// Fields of the User.\nfunc (User) Fields() []ent.Field {\n\treturn []ent.Field{\n\t\tfield.Bytes(\"location\").\n\t\t\t// Ideally, we would use a custom GoType\n\t\t\t// to represent the \"geometry\" type.\n\t\t\tSchemaType(map[string]string{\n\t\t\t\tdialect.Postgres: \"GEOMETRY(Point, 4326)\",\n\t\t\t}),\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Prometheus Metrics Output Example\nDESCRIPTION: Sample output from the Prometheus metrics endpoint showing operation duration histograms, error counts, and total operation counts for Ent mutations.\nSOURCE: https://github.com/ent/ent/blob/master/doc/website/blog/2021-08-12-building-observable-ent-application-with-prometheus.md#2025-04-22_snippet_6\n\nLANGUAGE: plaintext\nCODE:\n```\n# HELP ent_operation_duration_seconds Time in seconds per operation\n# TYPE ent_operation_duration_seconds histogram\nent_operation_duration_seconds_bucket{mutation_op=\"OpCreate\",mutation_type=\"User\",le=\"0.005\"} 2\nent_operation_duration_seconds_bucket{mutation_op=\"OpCreate\",mutation_type=\"User\",le=\"0.01\"} 2\nent_operation_duration_seconds_bucket{mutation_op=\"OpCreate\",mutation_type=\"User\",le=\"0.025\"} 2\nent_operation_duration_seconds_bucket{mutation_op=\"OpCreate\",mutation_type=\"User\",le=\"0.05\"} 2\nent_operation_duration_seconds_bucket{mutation_op=\"OpCreate\",mutation_type=\"User\",le=\"0.1\"} 2\nent_operation_duration_seconds_bucket{mutation_op=\"OpCreate\",mutation_type=\"User\",le=\"0.25\"} 2\nent_operation_duration_seconds_bucket{mutation_op=\"OpCreate\",mutation_type=\"User\",le=\"0.5\"} 2\nent_operation_duration_seconds_bucket{mutation_op=\"OpCreate\",mutation_type=\"User\",le=\"1\"} 2\nent_operation_duration_seconds_bucket{mutation_op=\"OpCreate\",mutation_type=\"User\",le=\"2.5\"} 2\nent_operation_duration_seconds_bucket{mutation_op=\"OpCreate\",mutation_type=\"User\",le=\"5\"} 2\nent_operation_duration_seconds_bucket{mutation_op=\"OpCreate\",mutation_type=\"User\",le=\"10\"} 2\nent_operation_duration_seconds_bucket{mutation_op=\"OpCreate\",mutation_type=\"User\",le=\"+Inf\"} 2\nent_operation_duration_seconds_sum{mutation_op=\"OpCreate\",mutation_type=\"User\"} 0.000265669\nent_operation_duration_seconds_count{mutation_op=\"OpCreate\",mutation_type=\"User\"} 2\n# HELP ent_operation_error Number of failed ent mutation operations\n# TYPE ent_operation_error counter\nent_operation_error{mutation_op=\"OpCreate\",mutation_type=\"User\"} 1\n# HELP ent_operation_total Number of ent mutation operations\n# TYPE ent_operation_total counter\nent_operation_total{mutation_op=\"OpCreate\",mutation_type=\"User\"} 2\n```\n\n----------------------------------------\n\nTITLE: Inspecting Schema with Atlas\nDESCRIPTION: Shell command to inspect the composite schema and print its SQL representation using Atlas.\nSOURCE: https://github.com/ent/ent/blob/master/doc/md/migration/domain.mdx#2025-04-22_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\natlas schema inspect \\\n  --env local \\\n  --url env://src \\\n  --format '{{ sql . }}'\n```\n\n----------------------------------------\n\nTITLE: Configuring Privacy and Schema Snapshot Features in Ent\nDESCRIPTION: This snippet shows how to enable both privacy and schema snapshot features for enhanced development experience in Ent schema generation.\nSOURCE: https://github.com/ent/ent/blob/master/doc/md/privacy.mdx#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\n//go:generate go run -mod=mod entgo.io/ent/cmd/ent generate --feature privacy,schema/snapshot ./schema\n```\n\n----------------------------------------\n\nTITLE: Protobuf Message with Ent Schema Generation Option\nDESCRIPTION: Enhanced Protobuf message definition that includes the ent.schema.gen option to enable Ent schema generation.\nSOURCE: https://github.com/ent/ent/blob/master/doc/website/blog/2021-05-04-announcing-schema-imports.md#2025-04-22_snippet_1\n\nLANGUAGE: protobuf\nCODE:\n```\nsyntax = \"proto3\";\n\npackage entpb;\n\nimport \"options/opts.proto\";\n\noption go_package = \"github.com/yourorg/project/ent/proto/entpb\";\n\nmessage User {\n  option (ent.schema).gen = true;\n  string name = 1;\n  string email_address = 2;\n}\n```\n\n----------------------------------------\n\nTITLE: Applying Schema Directly with Atlas\nDESCRIPTION: Shell command to apply the schema directly to a database without generating a migration file.\nSOURCE: https://github.com/ent/ent/blob/master/doc/md/migration/domain.mdx#2025-04-22_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\natlas schema apply \\\n  --env local \\\n  --url \"postgres://postgres:pass@localhost:5432/database?search_path=public&sslmode=disable\"\n```\n\n----------------------------------------\n\nTITLE: Defining Composite Type in SQL\nDESCRIPTION: SQL code to create a composite type 'address' with street and city fields.\nSOURCE: https://github.com/ent/ent/blob/master/doc/md/migration/composite.mdx#2025-04-22_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TYPE address AS (\n   street text,\n   city   text\n);\n```\n\n----------------------------------------\n\nTITLE: Configuring Feature Flags in Go for Ent Code Generation\nDESCRIPTION: Shows how to enable feature flags and custom templates when generating Ent code using Go. It includes setting up privacy and EntQL features.\nSOURCE: https://github.com/ent/ent/blob/master/doc/md/features.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\n// +build ignore\n\npackage main\n\nimport (\n\t\"log\"\n\t\"text/template\"\n\n\t\"entgo.io/ent/entc\"\n\t\"entgo.io/ent/entc/gen\"\n)\n\nfunc main() {\n\terr := entc.Generate(\"./schema\", &gen.Config{\n\t\tFeatures: []gen.Feature{\n\t\t\tgen.FeaturePrivacy,\n\t\t\tgen.FeatureEntQL,\n\t\t},\n\t\tTemplates: []*gen.Template{\n\t\t\tgen.MustParse(gen.NewTemplate(\"static\").\n\t\t\t\tFuncs(template.FuncMap{\"title\": strings.ToTitle}).\n\t\t\t\tParseFiles(\"template/static.tmpl\")),\n\t\t},\n\t})\n\tif err != nil {\n\t\tlog.Fatalf(\"running ent codegen: %v\", err)\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Ent Code Generation with Custom Templates\nDESCRIPTION: Main configuration file for ent code generation that sets up dependencies, custom templates, and generation options. Includes HTTP client dependency and custom template files for debug and stringer functionality.\nSOURCE: https://github.com/ent/ent/blob/master/examples/entcpkg/README.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\n// +build ignore\n\npackage main\n\nimport (\n\t\"log\"\n\t\"strings\"\n\t\"text/template\"\n\n\t\"entgo.io/ent/entc\"\n\t\"entgo.io/ent/entc/gen\"\n)\n\nfunc main() {\n\topts := []entc.Option{\n\t\tentc.Dependency(\n\t\t\tentc.DependencyType(&http.Client{}),\n\t\t),\n\t\tentc.TemplateFiles(\n\t\t\t\"template/debug.tmpl\",\n\t\t\t\"template/stringer.tmpl\",\n\t\t),\n    }\n\terr := entc.Generate(\"./schema\", &gen.Config{\n\t\tHeader: `\n\t\t\t// Copyright 2019-present Facebook Inc. All rights reserved.\n\t\t\t// This source code is licensed under the Apache 2.0 license found\n\t\t\t// in the LICENSE file in the root directory of this source tree.\n\n\t\t\t// Code generated by ent, DO NOT EDIT.\n\t\t`,\n\t\t// A usage for custom templates with external functions.\n\t\tTemplates: []*gen.Template{\n\t\t\tgen.MustParse(gen.NewTemplate(\"static\").\n\t\t\t\tFuncs(template.FuncMap{\"title\": strings.ToTitle}).\n\t\t\t\tParseFiles(\"template/static.tmpl\")),\n\t\t},\n\t}, opts...)\n\tif err != nil {\n\t\tlog.Fatal(\"running ent codegen:\", err)\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Applying Atlas Migrations with MySQL\nDESCRIPTION: Shell command to apply database migrations using Atlas with a MySQL database. It specifies the migrations directory and connection URL including credentials.\nSOURCE: https://github.com/ent/ent/blob/master/doc/md/components/_atlas_migrate_apply.mdx#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\natlas migrate apply \\\n  --dir \"file://ent/migrate/migrations\" \\\n  --url \"mysql://root:pass@localhost:3306/example\"\n```\n\n----------------------------------------\n\nTITLE: Adding Field Numbers for Protobuf Generation\nDESCRIPTION: Assigns unique field numbers to each field for Protobuf message type definition.\nSOURCE: https://github.com/ent/ent/blob/master/doc/website/blog/2021-03-18-generating-a-grpc-server-with-ent.md#2025-04-22_snippet_5\n\nLANGUAGE: go\nCODE:\n```\n// Fields of the User.\nfunc (User) Fields() []ent.Field {\n\treturn []ent.Field{\n\t\tfield.String(\"name\").\n\t\t\tUnique().\n\t\t\tAnnotations(\n\t\t\t\tentproto.Field(2),\n\t\t\t),\n\t\tfield.String(\"email_address\").\n\t\t\tUnique().\n\t\t\tAnnotations(\n\t\t\t\tentproto.Field(3),\n\t\t\t),\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Operation Generation in Ent Schema with entoas in Go\nDESCRIPTION: This code demonstrates how to use entoas annotations to customize the generation of API operations. It shows how to exclude specific operations for entities and edges.\nSOURCE: https://github.com/ent/ent/blob/master/doc/website/blog/2021-11-15-announcing-entoas.md#2025-04-22_snippet_7\n\nLANGUAGE: go\nCODE:\n```\n// Edges of the Fridge.\nfunc (Fridge) Edges() []ent.Edge {\n\treturn []ent.Edge{\n\t\tedge.To(\"compartments\", Compartment.Type).\n\t\t\t// Do not generate an endpoint for POST /fridges/{id}/compartments\n\t\t\tAnnotations(\n\t\t\t\tentoas.CreateOperation(\n\t\t\t\t\tentoas.OperationPolicy(entoas.PolicyExclude),\n\t\t\t\t),\n\t\t\t), \n\t}\n}\n\n// Annotations of the Fridge.\nfunc (Fridge) Annotations() []schema.Annotation {\n\treturn []schema.Annotation{\n\t\t// Do not generate an endpoint for DELETE /fridges/{id}\n\t\tentoas.DeleteOperation(entoas.OperationPolicy(entoas.PolicyExclude)),\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Using Wrapper Types in Client Code\nDESCRIPTION: Example of using Protocol Buffer wrapper types in client code to set optional field values.\nSOURCE: https://github.com/ent/ent/blob/master/doc/md/tutorial-grpc-optional-fields.md#2025-04-22_snippet_4\n\nLANGUAGE: go\nCODE:\n```\nfunc randomUser() *entpb.User {\n\treturn &entpb.User{\n\t\tName:         fmt.Sprintf(\"user_%d\", rand.Int()),\n\t\tEmailAddress: fmt.Sprintf(\"user_%d@example.com\", rand.Int()),\n\t\tAlias:        wrapperspb.String(\"John Doe\"),\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Registering External Service with gRPC Server\nDESCRIPTION: Updates the main server file to register both the generated User service and the custom ExtService with the gRPC server. This enables both services to be accessible through the same server.\nSOURCE: https://github.com/ent/ent/blob/master/doc/md/tutorial-grpc-ext-service.md#2025-04-22_snippet_4\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"context\"\n\t\"log\"\n\t\"net\"\n\n\t_ \"github.com/mattn/go-sqlite3\"\n\t\"github.com/rotemtam/ent-grpc-example/ent\"\n\t\"github.com/rotemtam/ent-grpc-example/ent/proto/entpb\"\n\t\"google.golang.org/grpc\"\n)\n\nfunc main() {\n\t// Initialize an ent client.\n\tclient, err := ent.Open(\"sqlite3\", \"file:ent?mode=memory&cache=shared&_fk=1\")\n\tif err != nil {\n\t\tlog.Fatalf(\"failed opening connection to sqlite: %v\", err)\n\t}\n\tdefer client.Close()\n\n\t// Run the migration tool (creating tables, etc).\n\tif err := client.Schema.Create(context.Background()); err != nil {\n\t\tlog.Fatalf(\"failed creating schema resources: %v\", err)\n\t}\n\n\t// Initialize the generated User service.\n\tsvc := entpb.NewUserService(client)\n\n\t// Create a new gRPC server (you can wire multiple services to a single server).\n\tserver := grpc.NewServer()\n\n\t// Register the User service with the server.\n\tentpb.RegisterUserServiceServer(server, svc)\n\n\t// Register the external ExtService service with the server.\n\tentpb.RegisterExtServiceServer(server, entpb.NewExtService(client))\n\n\t// Open port 5000 for listening to traffic.\n\tlis, err := net.Listen(\"tcp\", \":5000\")\n\tif err != nil {\n\t\tlog.Fatalf(\"failed listening: %s\", err)\n\t}\n\n\t// Listen for traffic indefinitely.\n\tif err := server.Serve(lis); err != nil {\n\t\tlog.Fatalf(\"server ended: %s\", err)\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Generated Todo Handler Implementation\nDESCRIPTION: Example of a generated READ route handler for the Todo entity\nSOURCE: https://github.com/ent/ent/blob/master/doc/website/blog/2022-02-15-generate-rest-crud-with-ent-and-ogen.md#2025-04-22_snippet_5\n\nLANGUAGE: go\nCODE:\n```\n// ReadTodo handles GET /todos/{id} requests.\nfunc (h *OgentHandler) ReadTodo(ctx context.Context, params ReadTodoParams) (ReadTodoRes, error) {\n\tq := h.client.Todo.Query().Where(todo.IDEQ(params.ID))\n\te, err := q.Only(ctx)\n\tif err != nil {\n\t\tswitch {\n\t\tcase ent.IsNotFound(err):\n\t\t\treturn &R404{\n\t\t\t\tCode:   http.StatusNotFound,\n\t\t\t\tStatus: http.StatusText(http.StatusNotFound),\n\t\t\t\tErrors: rawError(err),\n\t\t\t}, nil\n\t\tcase ent.IsNotSingular(err):\n\t\t\treturn &R409{\n\t\t\t\tCode:   http.StatusConflict,\n\t\t\t\tStatus: http.StatusText(http.StatusConflict),\n\t\t\t\tErrors: rawError(err),\n\t\t\t}, nil\n\t\tdefault:\n\t\t\t// Let the server handle the error.\n\t\t\treturn nil, err\n\t\t}\n\t}\n\treturn NewTodoRead(e), nil\n}\n```\n\n----------------------------------------\n\nTITLE: Generated Handler Interface with Custom Endpoint in Go\nDESCRIPTION: Generated handler interface in oas_server_gen.go showing the new MarkDone operation alongside standard CRUD operations.\nSOURCE: https://github.com/ent/ent/blob/master/doc/website/blog/2022-02-15-generate-rest-crud-with-ent-and-ogen.md#2025-04-22_snippet_15\n\nLANGUAGE: go\nCODE:\n```\n// Handler handles operations described by OpenAPI v3 specification.\ntype Handler interface {\n\t// CreateTodo implements createTodo operation.\n\t//\n\t// Creates a new Todo and persists it to storage.\n\t//\n\t// POST /todos\n\tCreateTodo(ctx context.Context, req CreateTodoReq) (CreateTodoRes, error)\n\t// DeleteTodo implements deleteTodo operation.\n\t//\n\t// Deletes the Todo with the requested ID.\n\t//\n\t// DELETE /todos/{id}\n\tDeleteTodo(ctx context.Context, params DeleteTodoParams) (DeleteTodoRes, error)\n\t// ListTodo implements listTodo operation.\n\t//\n\t// List Todos.\n\t//\n\t// GET /todos\n\tListTodo(ctx context.Context, params ListTodoParams) (ListTodoRes, error)\n\t// MarkDone implements markDone operation.\n\t//\n\t// PATCH /todos/{id}/done\n\tMarkDone(ctx context.Context, params MarkDoneParams) (MarkDoneNoContent, error)\n\t// ReadTodo implements readTodo operation.\n\t//\n\t// Finds the Todo with the requested ID and returns it.\n\t//\n\t// GET /todos/{id}\n\tReadTodo(ctx context.Context, params ReadTodoParams) (ReadTodoRes, error)\n\t// UpdateTodo implements updateTodo operation.\n\t//\n\t// Updates a Todo and persists changes to storage.\n\t//\n\t// PATCH /todos/{id}\n\tUpdateTodo(ctx context.Context, req UpdateTodoReq, params UpdateTodoParams) (UpdateTodoRes, error)\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing User Schema in Ent (Go)\nDESCRIPTION: Defines a User schema in Ent with 'name' and 'avatar_url' fields, both set as immutable.\nSOURCE: https://github.com/ent/ent/blob/master/doc/website/blog/2021-11-1-sync-to-external-data-systems-using-hooks.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\ntype User struct {\n\tent.Schema\n}\n\nfunc (User) Fields() []ent.Field {\n\treturn []ent.Field{\n\t\tfield.String(\"name\").\n\t\t\tImmutable(),\n\t\tfield.String(\"avatar_url\").\n\t\t\tImmutable(),\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Item Entity Schema\nDESCRIPTION: Ent schema definition for the Item entity with name field and relationship to Compartment entity.\nSOURCE: https://github.com/ent/ent/blob/master/doc/website/blog/2021-09-10-openapi-generator.md#2025-04-22_snippet_6\n\nLANGUAGE: go\nCODE:\n```\npackage schema\n\nimport (\n\t\"entgo.io/ent\"\n\t\"entgo.io/ent/schema/edge\"\n\t\"entgo.io/ent/schema/field\"\n)\n\n// Item holds the schema definition for the Item entity.\ntype Item struct {\n\tent.Schema\n}\n\n// Fields of the Item.\nfunc (Item) Fields() []ent.Field {\n\treturn []ent.Field{\n\t\tfield.String(\"name\"),\n\t}\n}\n\n// Edges of the Item.\nfunc (Item) Edges() []ent.Edge {\n\treturn []ent.Edge{\n\t\tedge.From(\"compartment\", Compartment.Type).\n\t\t\tRef(\"contents\").\n\t\t\tUnique(),\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Adding RelayConnection Annotation to Edge Field in Go\nDESCRIPTION: This snippet shows how to add the entgql.RelayConnection() annotation to an edge field to generate Relay-style connection arguments.\nSOURCE: https://github.com/ent/ent/blob/master/doc/md/tutorial-todo-gql-schema-generator.md#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\n// Edges of the Todo.\nfunc (Todo) Edges() []ent.Edge {\n\treturn []ent.Edge{\n\t\tedge.To(\"parent\", Todo.Type).\n\t\t\tUnique().\n\t\t\tFrom(\"children\").\n\t\t\tAnnotations(entgql.RelayConnection()),\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Field Type for PostgreSQL Domain in Go\nDESCRIPTION: This snippet demonstrates how to create a custom field type for a PostgreSQL domain in Go. It defines a 'DomainString' type that wraps a string and implements the 'driver.Valuer' and 'sql.Scanner' interfaces for database operations.\nSOURCE: https://github.com/ent/ent/blob/master/examples/compositetypes/README.md#2025-04-22_snippet_0\n\nLANGUAGE: Go\nCODE:\n```\ntype DomainString string\n\nfunc (d DomainString) Value() (driver.Value, error) {\n    return string(d), nil\n}\n\nfunc (d *DomainString) Scan(src any) error {\n    switch s := src.(type) {\n    case string:\n        *d = DomainString(s)\n    case []byte:\n        *d = DomainString(s)\n    default:\n        return fmt.Errorf(\"unexpected type for DomainString: %T\", src)\n    }\n    return nil\n}\n```\n\n----------------------------------------\n\nTITLE: Defining GraphQL Mutations\nDESCRIPTION: GraphQL schema definition for createTodo and updateTodo mutations using the generated input types.\nSOURCE: https://github.com/ent/ent/blob/master/doc/md/tutorial-todo-gql-mutation-input.md#2025-04-22_snippet_3\n\nLANGUAGE: graphql\nCODE:\n```\ntype Mutation {\n  createTodo(input: CreateTodoInput!): Todo!\n  updateTodo(id: ID!, input: UpdateTodoInput!): Todo!\n}\n```\n\n----------------------------------------\n\nTITLE: Generated SQL for Single Statement Data Migration\nDESCRIPTION: SQL generated from the single statement data migration function, which updates empty user names to 'Unknown'.\nSOURCE: https://github.com/ent/ent/blob/master/doc/md/data-migrations.mdx#2025-04-22_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\n-- Backfill all empty user names with default value 'unknown'.\nUPDATE `users` SET `name` = 'Unknown' WHERE `users`.`name` = '';\n```\n\n----------------------------------------\n\nTITLE: Updating gqlgen Configuration to Include Custom Schema\nDESCRIPTION: This YAML snippet demonstrates how to add the custom GraphQL schema file to the gqlgen.yml configuration.\nSOURCE: https://github.com/ent/ent/blob/master/doc/md/tutorial-todo-gql.mdx#2025-04-22_snippet_13\n\nLANGUAGE: yaml\nCODE:\n```\nschema:\n  - ent.graphql\n  - todo.graphql\n# ...\n```\n\n----------------------------------------\n\nTITLE: Installing pgvector Go Package\nDESCRIPTION: Command to install the pgvector Go package, which provides support for vector operations and similarity search in PostgreSQL.\nSOURCE: https://github.com/ent/ent/blob/master/doc/website/blog/2025-02-12-rag-with-ent-atlas-pgvector.mdx#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ngo get github.com/pgvector/pgvector-go\n```\n\n----------------------------------------\n\nTITLE: User Schema Edge Configuration with Serialization Groups\nDESCRIPTION: Configuration of User schema edges with elk annotations for serialization group support.\nSOURCE: https://github.com/ent/ent/blob/master/doc/website/blog/2021-07-29-generate-a-fully-working-go-crud-http-api-with-ent.md#2025-04-22_snippet_9\n\nLANGUAGE: go\nCODE:\n```\n// Edges of the User.\nfunc (User) Edges() []ent.Edge {\n    return []ent.Edge{\n        edge.To(\"pets\", Pet.Type).\n            Annotations(elk.Groups(\"user\")),\n    }\n}\n\n// Annotations of the User.\nfunc (User) Annotations() []schema.Annotation {\n    return []schema.Annotation{elk.ReadGroups(\"user\")}\n}\n```\n\n----------------------------------------\n\nTITLE: Integrating pgx with PostgreSQL for Ent\nDESCRIPTION: This snippet demonstrates how to use the pgx driver with PostgreSQL in an Ent client. It includes a function to open a connection and a main function showcasing basic Ent operations.\nSOURCE: https://github.com/ent/ent/blob/master/doc/md/sql-integration.md#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"context\"\n\t\"database/sql\"\n\t\"log\"\n\n\t\"<project>/ent\"\n\n\t\"entgo.io/ent/dialect\"\n\tentsql \"entgo.io/ent/dialect/sql\"\n\t_ \"github.com/jackc/pgx/v5/stdlib\"\n)\n\n// Open new connection\nfunc Open(databaseUrl string) *ent.Client {\n\tdb, err := sql.Open(\"pgx\", databaseUrl)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\n\t// Create an ent.Driver from `db`.\n\tdrv := entsql.OpenDB(dialect.Postgres, db)\n\treturn ent.NewClient(ent.Driver(drv))\n}\n\nfunc main() {\n\tclient := Open(\"postgresql://user:password@127.0.0.1/database\")\n\n\t// Your code. For example:\n\tctx := context.Background()\n\tif err := client.Schema.Create(ctx); err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tusers, err := client.User.Query().All(ctx)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tlog.Println(users)\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Glamour Package\nDESCRIPTION: Command to install the Glamour package for terminal output formatting.\nSOURCE: https://github.com/ent/ent/blob/master/doc/website/blog/2025-02-12-rag-with-ent-atlas-pgvector.mdx#2025-04-22_snippet_23\n\nLANGUAGE: bash\nCODE:\n```\ngo get github.com/charmbracelet/glamour\n```\n\n----------------------------------------\n\nTITLE: Configuring entoas for Simple Model Generation in Go\nDESCRIPTION: This snippet shows how to configure entoas to generate simple models that directly map Ent schemas to the OpenAPI Specification, instead of creating separate schemas for each endpoint.\nSOURCE: https://github.com/ent/ent/blob/master/doc/website/blog/2021-11-15-announcing-entoas.md#2025-04-22_snippet_8\n\nLANGUAGE: go\nCODE:\n```\nex, err := entoas.NewExtension(\n    entoas.SpecTitle(\"Fridge CMS\"),\n    entoas.SpecDescription(\"API to manage fridges and their cooled contents. **ICY!**\"),\n    entoas.SpecVersion(\"0.0.1\"),\n    entoas.SimpleModels(),\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Atlas Composite Schema for Migration\nDESCRIPTION: Atlas HCL configuration that combines the Ent schema with the preserved ent_types table schema for a smooth migration process.\nSOURCE: https://github.com/ent/ent/blob/master/doc/md/globalid.mdx#2025-04-22_snippet_3\n\nLANGUAGE: hcl\nCODE:\n```\ndata \"composite_schema\" \"ent\" {\n  schema \"ent\" {\n    url = \"ent://./ent/schema?globalid=static\"\n  }\n  # This exists to not delete the ent_types table yet.\n  schema \"ent\" {\n    url = \"file://./schema.my.hcl\"\n  }\n}\n\nenv {\n  name = atlas.env\n  src = data.composite_schema.ent.url\n  dev = \"docker://mysql/8/ent\"\n  migration {\n    dir = \"file://./ent/migrate/migrations\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Transactioner to GraphQL Server (Go)\nDESCRIPTION: Modification to add the entgql.Transactioner handler to the GraphQL server initialization.\nSOURCE: https://github.com/ent/ent/blob/master/doc/md/tutorial-todo-gql-tx-mutation.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nsrv := handler.NewDefaultServer(todo.NewSchema(client))\n+srv.Use(entgql.Transactioner{TxOpener: client})\n```\n\n----------------------------------------\n\nTITLE: Defining Ent Schema for Fridge, Compartment, and Item in Go\nDESCRIPTION: This code defines the Ent schema for three entities: Fridge, Compartment, and Item. It includes field definitions and edge relationships between the entities.\nSOURCE: https://github.com/ent/ent/blob/master/doc/website/blog/2021-11-15-announcing-entoas.md#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\npackage schema\n\nimport (\n\t\"entgo.io/ent\"\n\t\"entgo.io/ent/schema/edge\"\n\t\"entgo.io/ent/schema/field\"\n)\n\n// Fridge holds the schema definition for the Fridge entity.\ntype Fridge struct {\n\tent.Schema\n}\n\n// Fields of the Fridge.\nfunc (Fridge) Fields() []ent.Field {\n\treturn []ent.Field{\n\t\tfield.String(\"title\"),\n\t}\n}\n\n// Edges of the Fridge.\nfunc (Fridge) Edges() []ent.Edge {\n\treturn []ent.Edge{\n\t\tedge.To(\"compartments\", Compartment.Type),\n\t}\n}\n\n// Compartment holds the schema definition for the Compartment entity.\ntype Compartment struct {\n\tent.Schema\n}\n\n// Fields of the Compartment.\nfunc (Compartment) Fields() []ent.Field {\n\treturn []ent.Field{\n\t\tfield.String(\"name\"),\n\t}\n}\n\n// Edges of the Compartment.\nfunc (Compartment) Edges() []ent.Edge {\n\treturn []ent.Edge{\n\t\tedge.From(\"fridge\", Fridge.Type).\n\t\t\tRef(\"compartments\").\n\t\t\tUnique(),\n\t\tedge.To(\"contents\", Item.Type),\n\t}\n}\n\n// Item holds the schema definition for the Item entity.\ntype Item struct {\n\tent.Schema\n}\n\n// Fields of the Item.\nfunc (Item) Fields() []ent.Field {\n\treturn []ent.Field{\n\t\tfield.String(\"name\"),\n\t}\n}\n\n// Edges of the Item.\nfunc (Item) Edges() []ent.Edge {\n\treturn []ent.Edge{\n\t\tedge.From(\"compartment\", Compartment.Type).\n\t\t\tRef(\"contents\").\n\t\t\tUnique(),\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Using Annotations in Ent Schema Definition\nDESCRIPTION: Example of how to use annotations in an Ent schema to attach metadata to fields. This example adds an OrderField annotation to a creation_date field.\nSOURCE: https://github.com/ent/ent/blob/master/doc/md/templates.md#2025-04-22_snippet_4\n\nLANGUAGE: go\nCODE:\n```\n// User schema.\ntype User struct {\n\tent.Schema\n}\n\n// Fields of the user.\nfunc (User) Fields() []ent.Field {\n\treturn []ent.Field{\n\t\tfield.Time(\"creation_date\").\n\t\t\tAnnotations(entgql.Annotation{\n\t\t\t\tOrderField: \"CREATED_AT\",\n\t\t\t}),\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Verifying User and Car Data in MySQL\nDESCRIPTION: SQL queries to check the state of the users and cars tables after creating and relating entities.\nSOURCE: https://github.com/ent/ent/blob/master/doc/website/blog/2021-10-11-generating-ent-schemas-from-existing-sql-databases.md#2025-04-22_snippet_8\n\nLANGUAGE: sql\nCODE:\n```\nSELECT *\nFROM users;\n\n+--+---+----+----------+\n|id|age|name|last_name |\n+--+---+----+----------+\n|1 |33 |Zeev|Manilovich|\n+--+---+----+----------+\n\nSELECT *\nFROM cars;\n\n+--+----------+------+-----------+-------+\n|id|model     |color |engine_size|user_id|\n+--+----------+------+-----------+-------+\n|1 |volkswagen|blue  |1400       |1      |\n|2 |delorean  |silver|9999       |1      |\n+--+----------+------+-----------+-------+\n```\n\n----------------------------------------\n\nTITLE: Recalculating Migration Checksums\nDESCRIPTION: Command to recalculate and update migration directory checksums after manual changes\nSOURCE: https://github.com/ent/ent/blob/master/doc/md/versioned/05-custom-migrations.md#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\natlas migrate hash --dir file://ent/migrate/migrations\n```\n\n----------------------------------------\n\nTITLE: Implementing Tenant Mixin Schema in Go with Ent\nDESCRIPTION: Defines a shared mixin schema for entities that have a tenant relationship, including tenant-specific fields and edges.\nSOURCE: https://github.com/ent/ent/blob/master/doc/md/privacy.mdx#2025-04-22_snippet_13\n\nLANGUAGE: go\nCODE:\n```\n// TenantMixin for embedding the tenant info in different schemas.\ntype TenantMixin struct {\n\tmixin.Schema\n}\n\n// Fields for all schemas that embed TenantMixin.\nfunc (TenantMixin) Fields() []ent.Field {\n\treturn []ent.Field{\n\t\tfield.Int(\"tenant_id\").\n\t\t    Immutable(),\n\t}\n}\n\n// Edges for all schemas that embed TenantMixin.\nfunc (TenantMixin) Edges() []ent.Edge {\n\treturn []ent.Edge{\n\t\tedge.To(\"tenant\", Tenant.Type).\n\t\t\tField(\"tenant_id\").\n\t\t\tUnique().\n\t\t\tRequired().\n\t\t\tImmutable(),\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Integrating OpenCensus with MySQL for Ent\nDESCRIPTION: This snippet shows how to use OpenCensus with MySQL in an Ent client. It implements a custom connector that wraps the MySQL driver with OpenCensus tracing options.\nSOURCE: https://github.com/ent/ent/blob/master/doc/md/sql-integration.md#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"context\"\n\t\"database/sql\"\n\t\"database/sql/driver\"\n\n\t\"<project>/ent\"\n\n\t\"contrib.go.opencensus.io/integrations/ocsql\"\n\t\"entgo.io/ent/dialect\"\n\tentsql \"entgo.io/ent/dialect/sql\"\n\t\"github.com/go-sql-driver/mysql\"\n)\n\ntype connector struct {\n\tdsn string\n}\n\nfunc (c connector) Connect(context.Context) (driver.Conn, error) {\n\treturn c.Driver().Open(c.dsn)\n}\n\nfunc (connector) Driver() driver.Driver {\n\treturn ocsql.Wrap(\n\t\tmysql.MySQLDriver{},\n\t\tocsql.WithAllTraceOptions(),\n\t\tocsql.WithRowsClose(false),\n\t\tocsql.WithRowsNext(false),\n\t\tocsql.WithDisableErrSkip(true),\n\t)\n}\n\n// Open new connection and start stats recorder.\nfunc Open(dsn string) *ent.Client {\n\tdb := sql.OpenDB(connector{dsn})\n\t// Create an ent.Driver from `db`.\n\tdrv := entsql.OpenDB(dialect.MySQL, db)\n\treturn ent.NewClient(ent.Driver(drv))\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Entity Operation Policies\nDESCRIPTION: Example of using annotations to configure which operations are exposed in the API for the Fridge entity.\nSOURCE: https://github.com/ent/ent/blob/master/doc/website/blog/2021-09-10-openapi-generator.md#2025-04-22_snippet_9\n\nLANGUAGE: go\nCODE:\n```\n// Annotations of the Fridge.\nfunc (Fridge) Annotations() []schema.Annotation {\n\treturn []schema.Annotation{\n\t\telk.DeletePolicy(elk.Exclude),\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Applying Atlas Migrations with MariaDB\nDESCRIPTION: Shell command to apply database migrations using Atlas with a MariaDB database. It specifies the migrations directory and connection URL including credentials.\nSOURCE: https://github.com/ent/ent/blob/master/doc/md/components/_atlas_migrate_apply.mdx#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\natlas migrate apply \\\n  --dir \"file://ent/migrate/migrations\" \\\n  --url \"maria://root:pass@localhost:3306/example\"\n```\n\n----------------------------------------\n\nTITLE: Configuring GraphQL for Ent Todo App in YAML\nDESCRIPTION: This YAML configuration sets up GraphQL for a todo app using Ent, including schema location, resolver layout, and model bindings.\nSOURCE: https://github.com/ent/ent/blob/master/doc/md/graphql.md#2025-04-22_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nschema:\n  - todo.graphql\n\nresolver:\n  layout: follow-schema\n  dir: .\n\nautobind:\n  - entgo.io/contrib/entgql/internal/todo/ent\n\nmodels:\n  ID:\n    model:\n      - github.com/99designs/gqlgen/graphql.IntID\n  Node:\n    model:\n      - entgo.io/contrib/entgql/internal/todo/ent.Noder\n```\n\n----------------------------------------\n\nTITLE: Configuring gqlgen\nDESCRIPTION: YAML configuration for gqlgen, specifying schema location, resolver implementation, and type mappings.\nSOURCE: https://github.com/ent/ent/blob/master/doc/md/tutorial-todo-gql.mdx#2025-04-22_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nschema:\n  - ent.graphql\n\nresolver:\n  layout: follow-schema\n  dir: .\n\nautobind:\n  - todo/ent\n  - todo/ent/todo\n\nmodels:\n  ID:\n    model:\n      - github.com/99designs/gqlgen/graphql.IntID\n  Node:\n    model:\n      - todo/ent.Noder\n```\n\n----------------------------------------\n\nTITLE: Generating ent Assets for User-Pets O2M Relation\nDESCRIPTION: Command to generate the necessary assets for the User-Pets one-to-many relation example.\nSOURCE: https://github.com/ent/ent/blob/master/examples/o2m2types/README.md#2025-04-22_snippet_0\n\nLANGUAGE: console\nCODE:\n```\ngo generate ./...\n```\n\n----------------------------------------\n\nTITLE: Final Ent Schema After Migration\nDESCRIPTION: Updated User schema after removing the old meta column\nSOURCE: https://github.com/ent/ent/blob/master/doc/website/blog/2022-12-01-changing-column-types-with-zero-downtime.md#2025-04-22_snippet_5\n\nLANGUAGE: go\nCODE:\n```\nfunc (User) Fields() []ent.Field {\n    return []ent.Field{\n      field.JSON(\"meta_json\", &types.Meta{}).Optional(),\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining User Schema in Go\nDESCRIPTION: Go code defining the User schema with a name field in Ent.\nSOURCE: https://github.com/ent/ent/blob/master/doc/md/migration/functional-indexes.mdx#2025-04-22_snippet_2\n\nLANGUAGE: Go\nCODE:\n```\n// User holds the schema definition for the User entity.\ntype User struct {\n\tent.Schema\n}\n\n// Fields of the User.\nfunc (User) Fields() []ent.Field {\n\treturn []ent.Field{\n\t\tfield.String(\"name\").\n\t\t\tComment(\"A unique index is defined on lower(name) in schema.sql\"),\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing DenyMismatchedTenants Rule\nDESCRIPTION: Creates a rule that prevents creation of groups with users from different tenants. Validates tenant relationships during group creation.\nSOURCE: https://github.com/ent/ent/blob/master/doc/md/privacy.mdx#2025-04-22_snippet_16\n\nLANGUAGE: go\nCODE:\n```\nfunc DenyMismatchedTenants() privacy.MutationRule {\n\treturn privacy.GroupMutationRuleFunc(func(ctx context.Context, m *ent.GroupMutation) error {\n\t\ttid, exists := m.TenantID()\n\t\tif !exists {\n\t\t\treturn privacy.Denyf(\"missing tenant information in mutation\")\n\t\t}\n\t\tusers := m.UsersIDs()\n\t\tif len(users) == 0 {\n\t\t\treturn privacy.Skip\n\t\t}\n\t\tids, err := m.Client().User.Query().Where(user.IDIn(users...)).Select(user.FieldTenantID).Ints(privacy.DecisionContext(ctx, privacy.Allow))\n\t\tif err != nil {\n\t\t\treturn privacy.Denyf(\"querying the tenant-ids %v\", err)\n\t\t}\n\t\tif len(ids) != len(users) {\n\t\t\treturn privacy.Denyf(\"one the attached users is not connected to a tenant %v\", err)\n\t\t}\n\t\tfor _, id := range ids {\n\t\t\tif id != tid {\n\t\t\t\treturn privacy.Denyf(\"mismatch tenant-ids for group/users %d != %d\", tid, id)\n\t\t\t}\n\t\t}\n\t\treturn privacy.Skip\n\t})\n}\n```\n\n----------------------------------------\n\nTITLE: Testing Generated Protobuf Structs in Go\nDESCRIPTION: Creates a test file to verify the correct generation and functionality of the Protobuf structs.\nSOURCE: https://github.com/ent/ent/blob/master/doc/website/blog/2021-03-18-generating-a-grpc-server-with-ent.md#2025-04-22_snippet_9\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"testing\"\n\n\t\"ent-grpc-example/ent/proto/entpb\"\n)\n\nfunc TestUserProto(t *testing.T) {\n\tuser := entpb.User{\n\t\tName:     \"rotemtam\",\n\t\tEmailAddress: \"rotemtam@example.com\",\n\t}\n\tif user.GetName() != \"rotemtam\" {\n\t\tt.Fatal(\"expected user name to be rotemtam\")\n\t}\n\tif user.GetEmailAddress() != \"rotemtam@example.com\" {\n\t\tt.Fatal(\"expected email address to be rotemtam@example.com\")\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Ent Generate Directives\nDESCRIPTION: Adds a go:generate directive to invoke the entproto command-line tool.\nSOURCE: https://github.com/ent/ent/blob/master/doc/website/blog/2021-03-18-generating-a-grpc-server-with-ent.md#2025-04-22_snippet_6\n\nLANGUAGE: go\nCODE:\n```\npackage ent\n\n//go:generate go run -mod=mod entgo.io/ent/cmd/ent generate ./schema\n//go:generate go run -mod=mod entgo.io/contrib/entproto/cmd/entproto -path ./schema\n```\n\n----------------------------------------\n\nTITLE: Advanced Ent Test Client Setup with Options\nDESCRIPTION: Demonstrates how to create an Ent test client with additional functional options using enttest.Option. Includes logging and migration options configuration.\nSOURCE: https://github.com/ent/ent/blob/master/doc/md/testing.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nfunc TestXXX(t *testing.T) {\n\topts := []enttest.Option{\n\t\tenttest.WithOptions(ent.Log(t.Log)),\n\t\tenttest.WithMigrateOptions(migrate.WithGlobalUniqueID(true)),\n\t}\n\tclient := enttest.Open(t, \"sqlite3\", \"file:ent?mode=memory&_fk=1\", opts...)\n\tdefer client.Close()\n\t// ...\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Annotation Type for Ent Schema\nDESCRIPTION: This code snippet defines a custom annotation type for Ent schemas that can be used to attach metadata to fields and edges, which can then be accessed in templates.\nSOURCE: https://github.com/ent/ent/blob/master/doc/md/templates.md#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\npackage entgql\n\n// Annotation annotates fields with metadata for templates.\ntype Annotation struct {\n\t// OrderField is the ordering field as defined in graphql schema.\n\tOrderField string\n}\n\n// Name implements ent.Annotation interface.\nfunc (Annotation) Name() string {\n\treturn \"EntGQL\"\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Group Schema with Relationships\nDESCRIPTION: Schema definition for Group entity with name field and relationships to users including admin.\nSOURCE: https://github.com/ent/ent/blob/master/examples/README.md#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\n// Group holds the schema definition for the Group entity.\ntype Group struct {\n\tent.Schema\n}\n\n// Fields of the Group.\nfunc (Group) Fields() []ent.Field {\n\treturn []ent.Field{\n\t\tfield.String(\"name\"),\n\t}\n}\n\n// Edges of the Group.\nfunc (Group) Edges() []ent.Edge {\n\treturn []ent.Edge{\n\t\tedge.To(\"users\", User.Type),\n\t\tedge.To(\"admin\", User.Type).\n\t\t\tUnique(),\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Tenant Mixin in Go with Ent\nDESCRIPTION: Adds the BaseMixin to the Tenant schema to inherit common privacy policies and functionality.\nSOURCE: https://github.com/ent/ent/blob/master/doc/md/privacy.mdx#2025-04-22_snippet_10\n\nLANGUAGE: go\nCODE:\n```\n// Mixin of the Tenant schema.\nfunc (Tenant) Mixin() []ent.Mixin {\n\treturn []ent.Mixin{\n\t\tBaseMixin{},\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Updating GraphQL Resolver for Filter Inputs\nDESCRIPTION: Modification of the GraphQL resolver to use the new filter types. It adds the TodoWhereInput to the Todos query resolver.\nSOURCE: https://github.com/ent/ent/blob/master/doc/md/tutorial-todo-gql-filter-input.md#2025-04-22_snippet_6\n\nLANGUAGE: go\nCODE:\n```\nfunc (r *queryResolver) Todos(ctx context.Context, after *ent.Cursor, first *int, before *ent.Cursor, last *int, orderBy *ent.TodoOrder, where *ent.TodoWhereInput) (*ent.TodoConnection, error) {\n\treturn r.client.Todo.Query().\n\t\tPaginate(ctx, after, first, before, last,\n\t\t\tent.WithTodoOrder(orderBy),\n\t\t\tent.WithTodoFilter(where.Filter),\n\t\t)\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Ent Client and Running Automatic Migration in Go\nDESCRIPTION: This code snippet demonstrates how to connect to a MySQL database using Ent, and then run an automatic migration to create all schema resources. It's typically found in the main.go file of simpler Ent projects.\nSOURCE: https://github.com/ent/ent/blob/master/doc/md/versioned/01-intro.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nfunc main() {\n\t// Connect to the database (MySQL for example).\n\tclient, err := ent.Open(\"mysql\", \"root:pass@tcp(localhost:3306)/test\")\n\tif err != nil {\n\t\tlog.Fatalf(\"failed connecting to mysql: %v\", err)\n\t}\n\tdefer client.Close()\n\tctx := context.Background()\n\t// Run migration.\n\t// highlight-next-line\n\tif err := client.Schema.Create(ctx); err != nil {\n\t\tlog.Fatalf(\"failed creating schema resources: %v\", err)\n\t}\n\t// ... Continue with server start.\n}\n```\n\n----------------------------------------\n\nTITLE: Atlas Migrate Status Output\nDESCRIPTION: Output of the Atlas migrate status command showing the current migration status of the database.\nSOURCE: https://github.com/ent/ent/blob/master/doc/md/versioned/03-upgrade-prod.mdx#2025-04-22_snippet_4\n\nLANGUAGE: text\nCODE:\n```\nMigration Status: OK\n  -- Current Version: 20221114165732\n  -- Next Version:    Already at latest version\n  -- Executed Files:  1\n  -- Pending Files:   0\n```\n\n----------------------------------------\n\nTITLE: Using Base Schema in User Schema\nDESCRIPTION: Go code showing how to embed the base schema into a User schema for shared configuration.\nSOURCE: https://github.com/ent/ent/blob/master/doc/md/multischema-migrations.mdx#2025-04-22_snippet_6\n\nLANGUAGE: go\nCODE:\n```\n// User holds the edge schema definition of the User entity.\ntype User struct {\n//highlight-next-line\n    base\n}\n```\n\n----------------------------------------\n\nTITLE: Simple GraphQL Query with Implicit AND\nDESCRIPTION: Example of a simple GraphQL query where multiple filter fields implicitly use the AND operator.\nSOURCE: https://github.com/ent/ent/blob/master/doc/md/tutorial-todo-gql-filter-input.md#2025-04-22_snippet_8\n\nLANGUAGE: graphql\nCODE:\n```\n{\n  status: COMPLETED,\n  textHasPrefix: \"GraphQL\",\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Field Type in Ent Schema Definition\nDESCRIPTION: This code snippet shows how to implement the custom 'DomainString' field type in an Ent schema definition. It creates a new field type 'DomainString' and sets up the necessary schema annotations for PostgreSQL.\nSOURCE: https://github.com/ent/ent/blob/master/examples/compositetypes/README.md#2025-04-22_snippet_1\n\nLANGUAGE: Go\nCODE:\n```\n// Fields of the User.\nfunc (User) Fields() []ent.Field {\n    return []ent.Field{\n        field.String(\"id\"),\n        field.Other(\"name\", &DomainString{}).SchemaType(map[string]string{\n            dialect.Postgres: \"name_domain\",\n        }),\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: SQL Migration for Adding JSON Column\nDESCRIPTION: SQL statement to add the new JSON column to the users table\nSOURCE: https://github.com/ent/ent/blob/master/doc/website/blog/2022-12-01-changing-column-types-with-zero-downtime.md#2025-04-22_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\n-- modify \"users\" table\nALTER TABLE `users` ADD COLUMN `meta_json` json NULL;\n```\n\n----------------------------------------\n\nTITLE: Validating Migration Directory Integrity with Atlas CLI\nDESCRIPTION: Command to validate if a migration directory and its atlas.sum file are in sync. This helps detect unauthorized or manual changes to migration files.\nSOURCE: https://github.com/ent/ent/blob/master/doc/md/versioned-migrations.mdx#2025-04-22_snippet_17\n\nLANGUAGE: shell\nCODE:\n```\n# If there is no output, the migration directory is in-sync.\natlas migrate validate --dir file://<path-to-your-migration-directory>\n```\n\n----------------------------------------\n\nTITLE: Defining Ent Schema for Tenant and User in Go\nDESCRIPTION: This snippet defines two Ent schema types: Tenant and User. The User type includes a tenant_id field which will be used for Row-Level Security.\nSOURCE: https://github.com/ent/ent/blob/master/doc/md/migration/rls.mdx#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\n// Tenant holds the schema definition for the Tenant entity.\ntype Tenant struct {\n\tent.Schema\n}\n\n// Fields of the Tenant.\nfunc (Tenant) Fields() []ent.Field {\n\treturn []ent.Field{\n\t\tfield.String(\"name\"),\n\t}\n}\n\n// User holds the schema definition for the User entity.\ntype User struct {\n\tent.Schema\n}\n\n// Fields of the User.\nfunc (User) Fields() []ent.Field {\n\treturn []ent.Field{\n\t\tfield.String(\"name\"),\n\t\tfield.Int(\"tenant_id\"),\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Applying DenyMismatchedTenants to Group Schema\nDESCRIPTION: Configures the DenyMismatchedTenants rule for the Group schema, specifically for create operations.\nSOURCE: https://github.com/ent/ent/blob/master/doc/md/privacy.mdx#2025-04-22_snippet_17\n\nLANGUAGE: go\nCODE:\n```\nfunc (Group) Policy() ent.Policy {\n\treturn privacy.Policy{\n\t\tMutation: privacy.MutationPolicy{\n\t\t\tprivacy.OnMutationOperation(\n\t\t\t\trule.DenyMismatchedTenants(),\n\t\t\t\tent.OpCreate,\n\t\t\t),\n\t\t},\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Defining ent_types Table Schema in HCL\nDESCRIPTION: HCL configuration for preserving the ent_types table schema when migrating to the new global ID feature, allowing for potential rollback.\nSOURCE: https://github.com/ent/ent/blob/master/doc/md/globalid.mdx#2025-04-22_snippet_2\n\nLANGUAGE: hcl\nCODE:\n```\nschema \"ent\" {}\n\ntable \"ent_types\" {\n  schema  = schema.ent\n  collate = \"utf8mb4_bin\"\n  column \"id\" {\n    null           = false\n    type           = bigint\n    unsigned       = true\n    auto_increment = true\n  }\n  column \"type\" {\n    null = false\n    type = varchar(255)\n  }\n  primary_key {\n    columns = [column.id]\n  }\n  index \"type\" {\n    unique  = true\n    columns = [column.type]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing EnsureImageExists and DeleteOrphans Hooks (Go)\nDESCRIPTION: Detailed implementation of the EnsureImageExists and DeleteOrphans hooks, including error handling and integration with blob storage.\nSOURCE: https://github.com/ent/ent/blob/master/doc/website/blog/2021-11-1-sync-to-external-data-systems-using-hooks.md#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nfunc EnsureImageExists() ent.Hook {\n\thk := func(next ent.Mutator) ent.Mutator {\n\t\treturn hook.UserFunc(func(ctx context.Context, m *ent.UserMutation) (ent.Value, error) {\n\t\t\tavatarURL, exists := m.AvatarURL()\n\t\t\tif !exists {\n\t\t\t\treturn nil, errors.New(\"avatar field is missing\")\n\t\t\t}\n\t\t\tswitch exists, err := m.Bucket.Exists(ctx, avatarURL); {\n\t\t\tcase err != nil:\n\t\t\t\treturn nil, fmt.Errorf(\"check key existence: %w\", err)\n\t\t\tcase !exists:\n\t\t\t\treturn nil, fmt.Errorf(\"key %q does not exist in the bucket\", avatarURL)\n\t\t\tdefault:\n\t\t\t\treturn next.Mutate(ctx, m)\n\t\t\t}\n\t\t})\n\t}\n\treturn hook.On(hk, ent.OpCreate)\n}\n\nfunc DeleteOrphans() ent.Hook {\n\thk := func(next ent.Mutator) ent.Mutator {\n\t\treturn hook.UserFunc(func(ctx context.Context, m *ent.UserMutation) (ent.Value, error) {\n\t\t\tid, exists := m.ID()\n\t\t\tif !exists {\n\t\t\t\treturn nil, errors.New(\"id field is missing\")\n\t\t\t}\n\t\t\tu, err := m.Client().User.Get(ctx, id)\n\t\t\tif err != nil {\n\t\t\t\treturn nil, fmt.Errorf(\"getting deleted user: %w\", err)\n\t\t\t}\n\t\t\tif err := m.Bucket.Delete(ctx, u.AvatarURL); err != nil {\n\t\t\t\treturn nil, fmt.Errorf(\"deleting user avatar from bucket: %w\", err)\n\t\t\t}\n\t\t\treturn next.Mutate(ctx, m)\n\t\t})\n\t}\n\treturn hook.On(hk, ent.OpDeleteOne)\n}\n```\n\n----------------------------------------\n\nTITLE: Setting up HTTP Router with Chi in Go\nDESCRIPTION: This snippet demonstrates how to set up an HTTP router using the Chi library in Go. It creates a new router, adds middleware for logging and panic recovery, and registers the index handler for the root path.\nSOURCE: https://github.com/ent/ent/blob/master/doc/website/blog/2023-02-23-simple-cms-with-ent.mdx#2025-04-22_snippet_14\n\nLANGUAGE: go\nCODE:\n```\n// newRouter creates a new router with the blog handlers mounted.\nfunc newRouter(srv *server) chi.Router {\n\tr := chi.NewRouter()\n\tr.Use(middleware.Logger)\n\tr.Use(middleware.Recoverer)\n\tr.Get(\"/\", srv.index)\n\treturn r\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Greet Extension Template\nDESCRIPTION: Defines a template that adds a Greet method to each entity type.\nSOURCE: https://github.com/ent/ent/blob/master/doc/website/blog/2021-09-02-ent-extension-api.md#2025-04-22_snippet_2\n\nLANGUAGE: gotemplate\nCODE:\n```\n{{ define \"greet\" }}\n\n    {{/* Add the base header for the generated file */}}\n    {{ $pkg := base $.Config.Package }}\n    {{ template \"header\" $ }}\n\n    {{/* Loop over all nodes and add the Greet method */}}\n    {{ range $n := $.Nodes }}\n        {{ $receiver := $n.Receiver }}\n        func ({{ $receiver }} *{{ $n.Name }}) Greet() string {\n            return \"Greetings, {{ $n.Name }}\"\n        }\n    {{ end }}\n{{ end }}\n```\n\n----------------------------------------\n\nTITLE: Defining Ent Schema Types for Users and Audit Logs in Go\nDESCRIPTION: Go code defining two Ent schema types: User with a name field, and UserAuditLog with fields for tracking changes to users including operation type, time, and old/new values.\nSOURCE: https://github.com/ent/ent/blob/master/doc/md/migration/trigger.mdx#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\n// User holds the schema definition for the User entity.\ntype User struct {\n\tent.Schema\n}\n\n// Fields of the User.\nfunc (User) Fields() []ent.Field {\n\treturn []ent.Field{\n\t\tfield.String(\"name\"),\n\t}\n}\n\n// UserAuditLog holds the schema definition for the UserAuditLog entity.\ntype UserAuditLog struct {\n\tent.Schema\n}\n\n// Fields of the UserAuditLog.\nfunc (UserAuditLog) Fields() []ent.Field {\n\treturn []ent.Field{\n\t\tfield.String(\"operation_type\"),\n\t\tfield.String(\"operation_time\"),\n\t\tfield.String(\"old_value\").\n\t\t\tOptional(),\n\t\tfield.String(\"new_value\").\n\t\t\tOptional(),\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Creating HTML Template for Blog Post List in Go\nDESCRIPTION: This snippet shows an HTML template for displaying a list of blog posts. It uses Go's html/template package and incorporates Bootstrap for styling. The template iterates over a slice of Post objects to render each post's details.\nSOURCE: https://github.com/ent/ent/blob/master/doc/website/blog/2023-02-23-simple-cms-with-ent.mdx#2025-04-22_snippet_12\n\nLANGUAGE: gotemplate\nCODE:\n```\n<html>\n<head>\n    <title>My Blog</title>\n    <link href=\"https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/css/bootstrap.min.css\" rel=\"stylesheet\"\n          integrity=\"sha384-GLhlTQ8iRABdZLl6O3oVMWSktQOp6b7In1Zl3/Jr59b6EGGoI1aFkw7cmDA6j6gD\" crossorigin=\"anonymous\">\n\n</head>\n<body>\n<div class=\"col-lg-8 mx-auto p-4 py-md-5\">\n    <header class=\"d-flex align-items-center pb-3 mb-5 border-bottom\">\n        <a href=\"/\" class=\"d-flex align-items-center text-dark text-decoration-none\">\n            <span class=\"fs-4\">Ent Blog Demo</span>\n        </a>\n    </header>\n\n    <main>\n        <div class=\"row g-5\">\n            <div class=\"col-md-12\">\n                {{- range . }}\n                    <h2>{{ .Title }}</h2>\n                    <p>\n                        {{ .CreatedAt.Format \"2006-01-02\" }} by {{ .Edges.Author.Name }}\n                    </p>\n                    <p>\n                        {{ .Body }}\n                    </p>\n                {{- end }}\n            </div>\n\n        </div>\n    </main>\n    <footer class=\"pt-5 my-5 text-muted border-top\">\n        <p>\n            This is the Ent Blog Demo. It is a simple blog application built with Ent and Go. Get started:\n        </p>\n        <pre>go get entgo.io/ent</pre>\n    </footer>\n</div>\n\n<script src=\"https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/js/bootstrap.bundle.min.js\"\n        integrity=\"sha384-w76AqPfDkMBDXo30jS1Sgez6pr3x5MlQ1ZAGC+nuZB+EYdgRZgiwxhTBTkF7CXvN\"\n        crossorigin=\"anonymous\"></script>\n</body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Defining External gRPC Service in Protobuf\nDESCRIPTION: Creates a new proto file with an external service definition that includes a TopUser method to retrieve the user with the highest ID.\nSOURCE: https://github.com/ent/ent/blob/master/doc/md/tutorial-grpc-ext-service.md#2025-04-22_snippet_0\n\nLANGUAGE: protobuf\nCODE:\n```\nsyntax = \"proto3\";\n\npackage entpb;\n\noption go_package = \"github.com/rotemtam/ent-grpc-example/ent/proto/entpb\";\n\nimport \"entpb/entpb.proto\";\n\nimport \"google/protobuf/empty.proto\";\n\n\nservice ExtService {\n  rpc TopUser ( google.protobuf.Empty ) returns ( User );\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Boolean Wrapper Type in Protocol Buffers\nDESCRIPTION: Example of a Protocol Buffer wrapper type definition for boolean values, showing how optional boolean fields are represented.\nSOURCE: https://github.com/ent/ent/blob/master/doc/md/tutorial-grpc-optional-fields.md#2025-04-22_snippet_0\n\nLANGUAGE: protobuf\nCODE:\n```\n// Wrapper message for `bool`.\n//\n// The JSON representation for `BoolValue` is JSON `true` and `false`.\nmessage BoolValue {\n  // The bool value.\n  bool value = 1;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring entviz Extension\nDESCRIPTION: Implementation of entc.go file to configure and enable the entviz extension for Ent code generation\nSOURCE: https://github.com/ent/ent/blob/master/doc/website/blog/2021-08-26-visualizing-your-data-graph-using-entviz.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nimport (\n\t\"log\"\n\n\t\"entgo.io/ent/entc\"\n\t\"entgo.io/ent/entc/gen\"\n\t\"github.com/hedwigz/entviz\"\n)\n\nfunc main() {\n\terr := entc.Generate(\"./schema\", &gen.Config{}, entc.Extensions(entviz.Extension{}))\n\tif err != nil {\n\t\tlog.Fatalf(\"running ent codegen: %v\", err)\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: GraphQL Todo Query with Parent Edge\nDESCRIPTION: GraphQL query example showing pagination with parent edge relationship.\nSOURCE: https://github.com/ent/ent/blob/master/doc/md/tutorial-todo-gql-field-collection.md#2025-04-22_snippet_3\n\nLANGUAGE: graphql\nCODE:\n```\nquery {\n    todos(last: 10, orderBy: {direction: DESC, field: TEXT}) {\n        edges {\n            node {\n                id\n                text\n                parent {\n                    id\n                }\n            }\n            cursor\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Tenant Filter Rule to TenantMixin\nDESCRIPTION: Applies the FilterTenantRule to all schemas that use the TenantMixin through a Policy method.\nSOURCE: https://github.com/ent/ent/blob/master/doc/md/privacy.mdx#2025-04-22_snippet_15\n\nLANGUAGE: go\nCODE:\n```\nfunc (TenantMixin) Policy() ent.Policy {\n\treturn rule.FilterTenantRule()\n}\n```\n\n----------------------------------------\n\nTITLE: Inspecting Schema with Atlas CLI\nDESCRIPTION: Shell command to inspect the composite schema and print its SQL representation, showing how to view the combined Ent schema and custom triggers.\nSOURCE: https://github.com/ent/ent/blob/master/doc/md/migration/trigger.mdx#2025-04-22_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\natlas schema inspect \\\n  --env local \\\n  --url env://src \\\n  --format '{{ sql . }}'\n```\n\n----------------------------------------\n\nTITLE: Creating Cars and Associating with User in Go\nDESCRIPTION: Demonstrates creating Car entities and associating them with a User entity.\nSOURCE: https://github.com/ent/ent/blob/master/doc/md/getting-started.mdx#2025-04-22_snippet_11\n\nLANGUAGE: go\nCODE:\n```\nfunc CreateCars(ctx context.Context, client *ent.Client) (*ent.User, error) {\n\t// Create a new car with model \"Tesla\".\n\ttesla, err := client.Car.\n\t\tCreate().\n\t\tSetModel(\"Tesla\").\n\t\tSetRegisteredAt(time.Now()).\n\t\tSave(ctx)\n\tif err != nil {\n\t\treturn nil, fmt.Errorf(\"failed creating car: %w\", err)\n\t}\n\tlog.Println(\"car was created: \", tesla)\n\n\t// Create a new car with model \"Ford\".\n\tford, err := client.Car.\n\t\tCreate().\n\t\tSetModel(\"Ford\").\n\t\tSetRegisteredAt(time.Now()).\n\t\tSave(ctx)\n\tif err != nil {\n\t\treturn nil, fmt.Errorf(\"failed creating car: %w\", err)\n\t}\n\tlog.Println(\"car was created: \", ford)\n\n\t// Create a new user, and add it the 2 cars.\n\ta8m, err := client.User.\n\t\tCreate().\n\t\tSetAge(30).\n\t\tSetName(\"a8m\").\n\t\tAddCars(tesla, ford).\n\t\tSave(ctx)\n\tif err != nil {\n\t\treturn nil, fmt.Errorf(\"failed creating user: %w\", err)\n\t}\n\tlog.Println(\"user was created: \", a8m)\n\treturn a8m, nil\n}\n```\n\n----------------------------------------\n\nTITLE: Generated Protobuf Go Generate Directive\nDESCRIPTION: Shows the generated go:generate directive for invoking protoc to generate Go code from the .proto file.\nSOURCE: https://github.com/ent/ent/blob/master/doc/website/blog/2021-03-18-generating-a-grpc-server-with-ent.md#2025-04-22_snippet_8\n\nLANGUAGE: go\nCODE:\n```\npackage entpb\n//go:generate protoc -I=.. --go_out=.. --go-grpc_out=.. --go_opt=paths=source_relative --go-grpc_opt=paths=source_relative --entgrpc_out=.. --entgrpc_opt=paths=source_relative,schema_path=../../schema entpb/entpb.proto\n```\n\n----------------------------------------\n\nTITLE: Creating Migration with Atlas CLI for MySQL\nDESCRIPTION: This command creates a new migration file for MySQL using Atlas CLI to add the 'title' field to the User table.\nSOURCE: https://github.com/ent/ent/blob/master/doc/md/versioned/04-new-migration.mdx#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\natlas migrate diff add_user_title \\\n  --dir \"file://ent/migrate/migrations\" \\\n  --to \"ent://ent/schema\" \\\n  --dev-url \"docker://mysql/8/ent\"\n```\n\n----------------------------------------\n\nTITLE: Applying Schema Directly with Atlas CLI\nDESCRIPTION: Shell command to apply the schema directly to the database without generating a migration file using Atlas CLI.\nSOURCE: https://github.com/ent/ent/blob/master/doc/md/migration/functional-indexes.mdx#2025-04-22_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\natlas schema apply \\\n  --env local \\\n  --url \"postgres://postgres:pass@localhost:5432/database?sslmode=disable\"\n```\n\n----------------------------------------\n\nTITLE: Updating Todo Status with PATCH Request\nDESCRIPTION: Command to update a Todo item's status using a PATCH request, showing how to mark an item as done.\nSOURCE: https://github.com/ent/ent/blob/master/doc/website/blog/2022-02-15-generate-rest-crud-with-ent-and-ogen.md#2025-04-22_snippet_12\n\nLANGUAGE: shell\nCODE:\n```\n↪ curl -X PATCH -H \"Content-Type: application/json\" -d '{\"done\":true}'  localhost:8080/todos/1\n{\n  \"id\": 1,\n  \"title\": \"Give ogen and ogent a Star on GitHub\",\n  \"done\": true\n}\n```\n\n----------------------------------------\n\nTITLE: Annotating Ent Schema with Database Schema\nDESCRIPTION: Go code snippet showing how to annotate an Ent schema with a specific database schema name using the entsql package.\nSOURCE: https://github.com/ent/ent/blob/master/doc/md/multischema-migrations.mdx#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\n// Annotations of the User.\nfunc (User) Annotations() []schema.Annotation {\n\treturn []schema.Annotation{\n\t\tentsql.Schema(\"db3\"),\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Tenant Privacy Policy in Go with Ent\nDESCRIPTION: Defines specific privacy policies for the Tenant entity that only allows admin users to perform mutations.\nSOURCE: https://github.com/ent/ent/blob/master/doc/md/privacy.mdx#2025-04-22_snippet_11\n\nLANGUAGE: go\nCODE:\n```\n// Policy defines the privacy policy of the User.\nfunc (Tenant) Policy() ent.Policy {\n\treturn privacy.Policy{\n\t\tMutation: privacy.MutationPolicy{\n\t\t\t// For Tenant type, we only allow admin users to mutate\n\t\t\t// the tenant information and deny otherwise.\n\t\t\trule.AllowIfAdmin(),\n\t\t\tprivacy.AlwaysDenyRule(),\n\t\t},\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Atlas Migration Integrity File Structure\nDESCRIPTION: Example of the atlas.sum file used to maintain migration directory integrity. It contains checksums of each migration file and a summary hash to detect unauthorized changes.\nSOURCE: https://github.com/ent/ent/blob/master/doc/md/versioned-migrations.mdx#2025-04-22_snippet_16\n\nLANGUAGE: text\nCODE:\n```\nh1:KRFsSi68ZOarsQAJZ1mfSiMSkIOZlMq4RzyF//Pwf8A=\n20220318104614_team_A.sql h1:EGknG5Y6GQYrc4W8e/r3S61Aqx2p+NmQyVz/2m8ZNwA=\n\n```\n\n----------------------------------------\n\nTITLE: Adding GraphQL Annotations to Todo Schema in Go\nDESCRIPTION: This code demonstrates how to add entgql.RelayConnection() and entgql.QueryField() annotations to the Todo schema for generating Relay types and query fields.\nSOURCE: https://github.com/ent/ent/blob/master/doc/md/tutorial-todo-gql-schema-generator.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\n// Edges of the Todo.\nfunc (Todo) Edges() []ent.Edge {\n\treturn []ent.Edge{\n\t\tedge.To(\"parent\", Todo.Type).\n\t\t\tUnique().\n\t\t\tFrom(\"children\"),\n\t}\n}\n\n// Annotations of the Todo.\nfunc (Todo) Annotations() []schema.Annotation {\n\treturn []schema.Annotation{\n\t\tentgql.RelayConnection(),\n\t\tentgql.QueryField(),\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Address Type in Go\nDESCRIPTION: Go code implementing the Address type with Scan and Value methods for database interaction.\nSOURCE: https://github.com/ent/ent/blob/master/doc/md/migration/composite.mdx#2025-04-22_snippet_4\n\nLANGUAGE: go\nCODE:\n```\ntype Address struct {\n\tStreet, City string\n}\n\nvar _ field.ValueScanner = (*Address)(nil)\n\n// Scan implements the database/sql.Scanner interface.\nfunc (a *Address) Scan(v interface{}) (err error) {\n\tswitch v := v.(type) {\n\tcase nil:\n\tcase string:\n\t\t_, err = fmt.Sscanf(v, \"(%q,%q)\", &a.Street, &a.City)\n\tcase []byte:\n\t\t_, err = fmt.Sscanf(string(v), \"(%q,%q)\", &a.Street, &a.City)\n\t}\n\treturn\n}\n\n// Value implements the driver.Valuer interface.\nfunc (a *Address) Value() (driver.Value, error) {\n\treturn fmt.Sprintf(\"(%q,%q)\", a.Street, a.City), nil\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Order Fields in Ent Schema\nDESCRIPTION: This Go code snippet shows how to define order fields in an Ent schema using annotations for GraphQL integration.\nSOURCE: https://github.com/ent/ent/blob/master/doc/md/graphql.md#2025-04-22_snippet_4\n\nLANGUAGE: go\nCODE:\n```\nfunc (Todo) Fields() []ent.Field {\n    return []ent.Field{\n\t    field.Time(\"created_at\").\n\t\t\tDefault(time.Now).\n\t\t\tImmutable().\n\t\t\tAnnotations(\n\t\t\t\tentgql.OrderField(\"CREATED_AT\"),\n\t\t\t),\n\t\tfield.Enum(\"status\").\n\t\t\tNamedValues(\n\t\t\t\t\"InProgress\", \"IN_PROGRESS\",\n\t\t\t\t\"Completed\", \"COMPLETED\",\n\t\t\t).\n\t\t\tAnnotations(\n\t\t\t\tentgql.OrderField(\"STATUS\"),\n\t\t\t),\n\t\tfield.Int(\"priority\").\n\t\t\tDefault(0).\n\t\t\tAnnotations(\n\t\t\t\tentgql.OrderField(\"PRIORITY\"),\n\t\t\t),\n\t\tfield.Text(\"text\").\n\t\t\tNotEmpty().\n\t\t\tAnnotations(\n\t\t\t\tentgql.OrderField(\"TEXT\"),\n\t\t\t),\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Updating User Schema in Go\nDESCRIPTION: This snippet shows a diff of changes made to the User model in Go, modifying the 'Title' field from optional to required.\nSOURCE: https://github.com/ent/ent/blob/master/doc/md/versioned/06-verifying-safety.mdx#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\n// Fields of the User.\nfunc (User) Fields() []ent.Field {\n\treturn []ent.Field{\n\t\tfield.String(\"name\"),\n\t\tfield.String(\"email\").\n\t\t  Unique(),\n--\t\tfield.String(\"title\").\n--         Optional(),\n++\t\tfield.String(\"title\"),\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Todo Entity Schema\nDESCRIPTION: Ent schema definition for a Todo entity with title and done fields\nSOURCE: https://github.com/ent/ent/blob/master/doc/website/blog/2022-02-15-generate-rest-crud-with-ent-and-ogen.md#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\npackage schema\n\nimport (\n\t\"entgo.io/ent\"\n\t\"entgo.io/ent/schema/field\"\n)\n\n// Todo holds the schema definition for the Todo entity.\ntype Todo struct {\n\tent.Schema\n}\n\n// Fields of the Todo.\nfunc (Todo) Fields() []ent.Field {\n\treturn []ent.Field{\n\t\tfield.String(\"title\"),\n\t\tfield.Bool(\"done\"),\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Privacy Policy Methods in Go\nDESCRIPTION: This snippet shows the function signatures for EvalQuery and EvalMutation methods used in defining privacy rules for read and write operations.\nSOURCE: https://github.com/ent/ent/blob/master/doc/md/privacy.mdx#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\n// EvalQuery defines the a read-policy rule.\nfunc(Policy) EvalQuery(context.Context, Query) error\n\n// EvalMutation defines the a write-policy rule.\nfunc(Policy) EvalMutation(context.Context, Mutation) error\n```\n\n----------------------------------------\n\nTITLE: Defining Optional Fields in Protobuf with Wrapper Types\nDESCRIPTION: Demonstrates how entproto generates Protobuf message definitions using wrapper types to represent optional Ent fields. Uses google.protobuf.StringValue for optional string fields.\nSOURCE: https://github.com/ent/ent/blob/master/doc/website/blog/2021-06-28-gprc-ready-for-use.md#2025-04-22_snippet_0\n\nLANGUAGE: protobuf\nCODE:\n```\n// Code generated by entproto. DO NOT EDIT.\nsyntax = \"proto3\";\n\npackage entpb;\n\nimport \"google/protobuf/wrappers.proto\";\n\nmessage User {\n    int32 id = 1;\n\n    string name = 2;\n\n    string email_address = 3;\n\n    google.protobuf.StringValue alias = 4;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Ent to Use entoas Extension in Go\nDESCRIPTION: This code sets up the entoas extension in an Ent project. It creates a new entoas extension and configures Ent to use it during code generation.\nSOURCE: https://github.com/ent/ent/blob/master/doc/website/blog/2021-11-15-announcing-entoas.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\n// +build ignore\n\npackage main\n\nimport (\n\t\"log\"\n\n\t\"entgo.io/contrib/entoas\"\n\t\"entgo.io/ent/entc\"\n\t\"entgo.io/ent/entc/gen\"\n)\n\nfunc main() {\n\tex, err := entoas.NewExtension()\n\tif err != nil {\n\t\tlog.Fatalf(\"creating entoas extension: %v\", err)\n\t}\n\terr = entc.Generate(\"./schema\", &gen.Config{}, entc.Extensions(ex))\n\tif err != nil {\n\t\tlog.Fatalf(\"running ent codegen: %v\", err)\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Custom JSON Predicate in Ent for Counting Records (Go)\nDESCRIPTION: Example of using sqljson.HasKey to count users whose JSON field contains a specific key.\nSOURCE: https://github.com/ent/ent/blob/master/doc/md/predicates.md#2025-04-22_snippet_6\n\nLANGUAGE: go\nCODE:\n```\ncount := client.User.\n\tQuery().\n\tWhere(func(s *sql.Selector) {\n\t\ts.Where(sqljson.HasKey(user.FieldURL, sqljson.Path(\"Scheme\")))\n\t}).\n\tCountX(ctx)\n```\n\nLANGUAGE: sql\nCODE:\n```\n-- PostgreSQL\nSELECT COUNT(DISTINCT \"users\".\"id\") FROM \"users\" WHERE \"url\"->'Scheme' IS NOT NULL\n\n-- SQLite and MySQL\nSELECT COUNT(DISTINCT `users`.`id`) FROM `users` WHERE JSON_EXTRACT(`url`, \"$.Scheme\") IS NOT NULL\n```\n\n----------------------------------------\n\nTITLE: Using Domain Type in Ent Schema\nDESCRIPTION: Go code snippet showing how to use the domain type in an Ent schema field definition.\nSOURCE: https://github.com/ent/ent/blob/master/doc/md/migration/domain.mdx#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\n// Fields of the User.\nfunc (User) Fields() []ent.Field {\n\treturn []ent.Field{\n\t\tfield.String(\"postal_code\").\n\t\t\tSchemaType(map[string]string{\n\t\t\t\tdialect.Postgres: \"us_postal_code\",\n\t\t\t}),\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Migration with Atlas for MySQL\nDESCRIPTION: This shell command uses Atlas to generate a new migration for MySQL based on Ent schema changes.\nSOURCE: https://github.com/ent/ent/blob/master/doc/md/versioned/06-verifying-safety.mdx#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\natlas migrate diff user_title_required \\\n  --dir \"file://ent/migrate/migrations\" \\\n  --to \"ent://ent/schema\" \\\n  --dev-url \"docker://mysql/8/ent\"\n```\n\n----------------------------------------\n\nTITLE: Logging into Atlas\nDESCRIPTION: Shell command to log into Atlas Cloud.\nSOURCE: https://github.com/ent/ent/blob/master/doc/md/migration/functional-indexes.mdx#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ atlas login a8m\n//highlight-next-line-info\nYou are now connected to \"a8m\" on Atlas Cloud.\n```\n\n----------------------------------------\n\nTITLE: Generated Car Schema\nDESCRIPTION: Auto-generated Ent schema for the Car entity including fields and edges definitions\nSOURCE: https://github.com/ent/ent/blob/master/doc/website/blog/2021-10-11-generating-ent-schemas-from-existing-sql-databases.md#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\ntype Car struct {\n\tent.Schema\n}\n\nfunc (Car) Fields() []ent.Field {\n\treturn []ent.Field{field.Int(\"id\"), field.String(\"model\"), field.String(\"color\"), field.Int32(\"engine_size\"), field.Int(\"user_id\").Optional()}\n}\nfunc (Car) Edges() []ent.Edge {\n\treturn []ent.Edge{edge.From(\"user\", User.Type).Ref(\"cars\").Unique().Field(\"user_id\")}\n}\nfunc (Car) Annotations() []schema.Annotation {\n\treturn nil\n}\n```\n\n----------------------------------------\n\nTITLE: Defining M2M Bidirectional Relationship in Ent (Go)\nDESCRIPTION: Shows how to define a bidirectional many-to-many relationship (friends) between users in Ent. This snippet demonstrates the edge definition in the User schema.\nSOURCE: https://github.com/ent/ent/blob/master/examples/README.md#2025-04-22_snippet_17\n\nLANGUAGE: go\nCODE:\n```\n// Edges of the User.\nfunc (User) Edges() []ent.Edge {\n\treturn []ent.Edge{\n\t\tedge.To(\"friends\", User.Type),\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Running Go Test for Ent Project\nDESCRIPTION: Executes the Go test command to verify the Ent setup and SQLite test environment.\nSOURCE: https://github.com/ent/ent/blob/master/doc/md/tutorial-setup.md#2025-04-22_snippet_5\n\nLANGUAGE: console\nCODE:\n```\ngo test\n```\n\n----------------------------------------\n\nTITLE: Configuring sqlcomment Driver with Ent\nDESCRIPTION: This Go code snippet demonstrates how to create and configure the sqlcomment driver with Ent. It sets up the database connection, wraps it with sqlcomment, and creates an Ent client.\nSOURCE: https://github.com/ent/ent/blob/master/doc/website/blog/2021-10-19-sqlcomment-support-for-ent.md#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\n// Create db driver.\ndb, err := sql.Open(\"sqlite3\", \"file:ent?mode=memory&cache=shared&_fk=1\")\nif err != nil {\n\tlog.Fatalf(\"Failed to connect to database: %v\", err)\n}\n\n// Create sqlcomment driver which wraps sqlite driver.\ndrv := sqlcomment.NewDriver(db,\n\tsqlcomment.WithDriverVerTag(),\n\tsqlcomment.WithTags(sqlcomment.Tags{\n\t\tsqlcomment.KeyApplication: \"my-app\",\n\t\tsqlcomment.KeyFramework:   \"net/http\",\n\t}),\n)\n\n// Create and configure ent client.\nclient := ent.NewClient(ent.Driver(drv))\n```\n\n----------------------------------------\n\nTITLE: Setting Transaction Isolation Level in Ent with SQL Driver\nDESCRIPTION: Demonstrates how to set the isolation level for a transaction when using the SQL driver with Ent. This allows for fine-tuning transaction behavior based on the specific requirements of the application.\nSOURCE: https://github.com/ent/ent/blob/master/doc/md/transactions.md#2025-04-22_snippet_5\n\nLANGUAGE: go\nCODE:\n```\ntx, err := client.BeginTx(ctx, &sql.TxOptions{Isolation: sql.LevelRepeatableRead})\n```\n\n----------------------------------------\n\nTITLE: Configuring Atlas with Composite Schema in HCL\nDESCRIPTION: HCL configuration file for Atlas that creates a composite schema data source combining the Ent schema with custom SQL triggers, and defines a local environment for development.\nSOURCE: https://github.com/ent/ent/blob/master/doc/md/migration/trigger.mdx#2025-04-22_snippet_2\n\nLANGUAGE: hcl\nCODE:\n```\ndata \"composite_schema\" \"app\" {\n  # Load the ent schema first with all tables.\n  schema \"public\" {\n    url = \"ent://ent/schema\"\n  }\n  # Then, load the triggers schema.\n  schema \"public\" {\n    url = \"file://schema.sql\"\n  }\n}\n\nenv \"local\" {\n  src = data.composite_schema.app.url\n  dev = \"docker://postgres/15/dev?search_path=public\"\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Versioned Migrations with entc Package\nDESCRIPTION: Setup for enabling versioned migrations when using the Ent code generation package, typically used with extensions like entgql.\nSOURCE: https://github.com/ent/ent/blob/master/doc/md/versioned-migrations.mdx#2025-04-22_snippet_6\n\nLANGUAGE: go\nCODE:\n```\n//go:build ignore\n\npackage main\n\nimport (\n\t\"log\"\n\n\t\"entgo.io/ent/entc\"\n\t\"entgo.io/ent/entc/gen\"\n)\n\nfunc main() {\n\terr := entc.Generate(\"./schema\", &gen.Config{\n\t\tFeatures: []gen.Feature{gen.FeatureVersionedMigration},\n\t})\n\tif err != nil {\n\t\tlog.Fatalf(\"running ent codegen: %v\", err)\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Domain Type in HCL\nDESCRIPTION: HCL code to create a domain type for US postal codes using Atlas Schema HCL language.\nSOURCE: https://github.com/ent/ent/blob/master/doc/md/migration/domain.mdx#2025-04-22_snippet_2\n\nLANGUAGE: hcl\nCODE:\n```\nschema \"public\" {}\n\ndomain \"us_postal_code\" {\n  schema = schema.public\n  type   = text\n  null   = true\n  check \"us_postal_code_check\" {\n    expr = \"((VALUE ~ '^\\\\d{5}$'::text) OR (VALUE ~ '^\\\\d{5}-\\\\d{4}$'::text))\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Ent Code Generation with gqlgen Config\nDESCRIPTION: Go code updating the Ent code generation to include gqlgen configuration.\nSOURCE: https://github.com/ent/ent/blob/master/doc/md/tutorial-todo-gql.mdx#2025-04-22_snippet_6\n\nLANGUAGE: go\nCODE:\n```\n//go:build ignore\n\npackage main\n\nimport (\n    \"log\"\n\n    \"entgo.io/ent/entc\"\n    \"entgo.io/ent/entc/gen\"\n    \"entgo.io/contrib/entgql\"\n)\n\nfunc main() {\n\tex, err := entgql.NewExtension(\n\t\tentgql.WithSchemaGenerator(),\n\t\tentgql.WithSchemaPath(\"ent.graphql\"),\n\t\tentgql.WithConfigPath(\"gqlgen.yml\"),\n\t)\n\tif err != nil {\n\t\tlog.Fatalf(\"creating entgql extension: %v\", err)\n\t}\n\topts := []entc.Option{\n\t\tentc.Extensions(ex),\n\t}\n\tif err := entc.Generate(\"./ent/schema\", &gen.Config{}, opts...); err != nil {\n\t\tlog.Fatalf(\"running ent codegen: %v\", err)\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Running Privacy Multi-Tenant Tests\nDESCRIPTION: Command to execute tests for the privacy multi-tenant implementation\nSOURCE: https://github.com/ent/ent/blob/master/examples/privacytenant/README.md#2025-04-22_snippet_1\n\nLANGUAGE: console\nCODE:\n```\ngo test\n```\n\n----------------------------------------\n\nTITLE: Configuring Ent Generate Command in Go\nDESCRIPTION: This snippet modifies the ent/generate.go file to execute the ent/entc.go file, which is necessary for including the entoas extension in the code generation process.\nSOURCE: https://github.com/ent/ent/blob/master/doc/website/blog/2021-11-15-announcing-entoas.md#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\npackage ent\n\n//go:generate go run -mod=mod entc.go\n```\n\n----------------------------------------\n\nTITLE: Creating Database Migration Files with Atlas for Ent\nDESCRIPTION: Command to generate migration files using Atlas CLI. This creates a diff between the current database state and the Ent schema definitions, saving the migration to the specified directory with SQLite as the development database.\nSOURCE: https://github.com/ent/ent/blob/master/examples/start/README.md#2025-04-22_snippet_1\n\nLANGUAGE: console\nCODE:\n```\natlas migrate diff migration_name \\\n  --dir \"file://ent/migrate/migrations\" \\\n  --to \"ent://ent/schema\" \\\n  --dev-url \"sqlite://file?mode=memory&_fk=1\"\n```\n\n----------------------------------------\n\nTITLE: SQLite Upsert with Update on Conflict\nDESCRIPTION: SQL statement demonstrating upsert operation that updates existing record on conflict.\nSOURCE: https://github.com/ent/ent/blob/master/doc/website/blog/2021-08-05-announcing-upsert-api.md#2025-04-22_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nINSERT INTO users (email, name) values ('rotem@entgo.io', 'Tamir, Rotem')\nON CONFLICT (email) DO UPDATE SET email=excluded.email, name=excluded.name;\n```\n\n----------------------------------------\n\nTITLE: Updating Migration Directory Integrity\nDESCRIPTION: Command to update the migration directory integrity file after adding or modifying migration files.\nSOURCE: https://github.com/ent/ent/blob/master/doc/md/data-migrations.mdx#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\natlas migrate hash \\\n  --dir \"file://my/project/migrations\"\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Struct Tags to Ent Edges in Go\nDESCRIPTION: Shows how to add custom struct tags to generated entities, specifically demonstrating how to override the default JSON tag for an edge.\nSOURCE: https://github.com/ent/ent/blob/master/doc/md/schema-edges.mdx#2025-04-22_snippet_31\n\nLANGUAGE: go\nCODE:\n```\n// Edges of the User.\nfunc (User) Edges() []ent.Edge {\n\treturn []ent.Edge{\n\t\tedge.To(\"pets\", Pet.Type).\n\t\t\t// Override the default json tag \"pets\" with \"owner\" for O2M relationship.\n\t\t\tStructTag(`json:\"owner\"`),\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Initial Database Migration with Atlas\nDESCRIPTION: Uses Atlas to create an initial migration script for setting up the database schema.\nSOURCE: https://github.com/ent/ent/blob/master/doc/website/blog/2023-02-23-simple-cms-with-ent.mdx#2025-04-22_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\natlas migrate diff add_users_posts \\\n  --dir \"file://ent/migrate/migrations\" \\\n  --to \"ent://ent/schema\" \\\n  --dev-url \"docker://mysql/8/ent\"\n```\n\n----------------------------------------\n\nTITLE: Generating Project Assets\nDESCRIPTION: Command to generate required project assets and code files\nSOURCE: https://github.com/ent/ent/blob/master/examples/privacyadmin/README.md#2025-04-22_snippet_0\n\nLANGUAGE: console\nCODE:\n```\ngo generate ./...\n```\n\n----------------------------------------\n\nTITLE: Creating Seed Migration Files via CLI\nDESCRIPTION: Shell command to create new migration files for seeding admin data.\nSOURCE: https://github.com/ent/ent/blob/master/doc/website/blog/2022-03-14-announcing-versioned-migrations.md#2025-04-22_snippet_12\n\nLANGUAGE: shell\nCODE:\n```\nmigrate create -format unix -ext sql -dir migrations seed_admin\n```\n\n----------------------------------------\n\nTITLE: Generating Ent Code\nDESCRIPTION: Runs Ent's code generation to create database access code based on the defined schemas.\nSOURCE: https://github.com/ent/ent/blob/master/doc/website/blog/2023-02-23-simple-cms-with-ent.mdx#2025-04-22_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\ngo generate ./...\n```\n\n----------------------------------------\n\nTITLE: Generated SQL Query with sqlcomment Metadata\nDESCRIPTION: This SQL snippet shows the result of the Ent query after being processed by sqlcomment. It includes the SQL query with a metadata comment appended at the end.\nSOURCE: https://github.com/ent/ent/blob/master/doc/website/blog/2021-10-19-sqlcomment-support-for-ent.md#2025-04-22_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\nUPDATE `users`\nSET `name` = ?\nWHERE (\n    `users`.`age` > ?\n    OR `users`.`name` = ?\n  )\n  AND `users`.`id` IN (\n    SELECT `user_following`.`follower_id`\n    FROM `user_following`\n  )\n  /*application='my-app',db_driver='ent:v0.9.1',framework='net%2Fhttp'*/\n```\n\n----------------------------------------\n\nTITLE: Implementing Optional Field in Ent Schema\nDESCRIPTION: Example of defining an optional string field 'alias' in an Ent schema with Protocol Buffer annotations.\nSOURCE: https://github.com/ent/ent/blob/master/doc/md/tutorial-grpc-optional-fields.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\n// Fields of the User.\nfunc (User) Fields() []ent.Field {\n\treturn []ent.Field{\n\t\tfield.String(\"name\").\n\t\t\tUnique().\n\t\t\tAnnotations(\n\t\t\t\tentproto.Field(2),\n\t\t\t),\n\t\tfield.String(\"email_address\").\n\t\t\tUnique().\n\t\t\tAnnotations(\n\t\t\t\tentproto.Field(3),\n\t\t\t),\n\t\tfield.String(\"alias\").\n\t\t\tOptional().\n\t\t\tAnnotations(entproto.Field(4)),\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Row-Level Security Policy in SQL\nDESCRIPTION: This SQL snippet enables Row-Level Security on the users table and creates a policy that restricts access based on the tenant_id field.\nSOURCE: https://github.com/ent/ent/blob/master/doc/md/migration/rls.mdx#2025-04-22_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\n--- Enable row-level security on the users table.\nALTER TABLE \"users\" ENABLE ROW LEVEL SECURITY;\n\n-- Create a policy that restricts access to rows in the users table based on the current tenant.\nCREATE POLICY tenant_isolation ON \"users\"\n    USING (\"tenant_id\" = current_setting('app.current_tenant')::integer);\n```\n\n----------------------------------------\n\nTITLE: Applying Schema with Atlas Go SDK\nDESCRIPTION: Go code snippet demonstrating how to apply the schema directly to a database using the Atlas Go SDK.\nSOURCE: https://github.com/ent/ent/blob/master/doc/md/migration/domain.mdx#2025-04-22_snippet_9\n\nLANGUAGE: go\nCODE:\n```\nac, err := atlasexec.NewClient(\".\", \"atlas\")\nif err != nil {\n\tlog.Fatalf(\"failed to initialize client: %w\", err)\n}\n// Automatically update the database with the desired schema.\n// Another option, is to use 'migrate apply' or 'schema apply' manually.\nif _, err := ac.SchemaApply(ctx, &atlasexec.SchemaApplyParams{\n\tEnv: \"local\",\n\tURL: \"postgres://postgres:pass@localhost:5432/database?search_path=public&sslmode=disable\",\n\tAutoApprove: true,\n}); err != nil {\n    log.Fatalf(\"failed to apply schema changes: %w\", err)\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Global Annotations in Ent Templates\nDESCRIPTION: Example of how to access global annotations in Ent templates. This template shows how to access GQL configuration at both graph and node levels.\nSOURCE: https://github.com/ent/ent/blob/master/doc/md/templates.md#2025-04-22_snippet_8\n\nLANGUAGE: gotemplate\nCODE:\n```\n{{- with $.Annotations.GQL.Config.StructTag }}\n    {{/* Access the GQL configuration on *gen.Graph */}}\n{{- end }}\n\n{{ range $node := $.Nodes }}\n    {{- with $node.Config.Annotations.GQL.Config.StructTag }}\n        {{/* Access the GQL configuration on *gen.Type */}}\n    {{- end }}\n{{ end }}\n```\n\n----------------------------------------\n\nTITLE: Generated UserServiceClient Interface in Go\nDESCRIPTION: This snippet shows the generated UserServiceClient interface in Go, which defines the client-side API for the UserService.\nSOURCE: https://github.com/ent/ent/blob/master/doc/website/blog/2021-03-18-generating-a-grpc-server-with-ent.md#2025-04-22_snippet_12\n\nLANGUAGE: go\nCODE:\n```\ntype UserServiceClient interface {\n\tCreate(ctx context.Context, in *CreateUserRequest, opts ...grpc.CallOption) (*User, error)\n\tGet(ctx context.Context, in *GetUserRequest, opts ...grpc.CallOption) (*User, error)\n\tUpdate(ctx context.Context, in *UpdateUserRequest, opts ...grpc.CallOption) (*User, error)\n\tDelete(ctx context.Context, in *DeleteUserRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)\n}\n```\n\n----------------------------------------\n\nTITLE: Describing Ent Schema Structure\nDESCRIPTION: Command to get a detailed description of the graph schema, including fields, types, and relationships between entities.\nSOURCE: https://github.com/ent/ent/blob/master/doc/md/code-gen.md#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ngo run -mod=mod entgo.io/ent/cmd/ent describe ./ent/schema\n```\n\n----------------------------------------\n\nTITLE: Generated SQL Migration File\nDESCRIPTION: Example SQL migration file generated by Atlas showing table creation\nSOURCE: https://github.com/ent/ent/blob/master/doc/md/versioned-migrations.mdx#2025-04-22_snippet_11\n\nLANGUAGE: sql\nCODE:\n```\n-- create \"users\" table\\nCREATE TABLE `users` (`id` bigint NOT NULL AUTO_INCREMENT, PRIMARY KEY (`id`)) CHARSET utf8mb4 COLLATE utf8mb4_bin;\n```\n\n----------------------------------------\n\nTITLE: Defining User Schema in Ent\nDESCRIPTION: Schema definition for User entity with username field and unique index.\nSOURCE: https://github.com/ent/ent/blob/master/doc/website/blog/2022-03-14-announcing-versioned-migrations.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\npackage schema\n\nimport (\n\t\"entgo.io/ent\"\n\t\"entgo.io/ent/schema/field\"\n\t\"entgo.io/ent/schema/index\"\n)\n\n// User holds the schema definition for the User entity.\ntype User struct {\n\tent.Schema\n}\n\n// Fields of the User.\nfunc (User) Fields() []ent.Field {\n\treturn []ent.Field{\n\t\tfield.String(\"username\"),\n\t}\n}\n\n// Indexes of the User.\nfunc (User) Indexes() []ent.Index {\n\treturn []ent.Index{\n\t\tindex.Fields(\"username\").Unique(),\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Post Entity Fields\nDESCRIPTION: Schema definition for a Post entity with content and creation timestamp fields\nSOURCE: https://github.com/ent/ent/blob/master/doc/website/blog/2021-08-26-visualizing-your-data-graph-using-entviz.md#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\n// Fields of the Post.\nfunc (Post) Fields() []ent.Field {\n\treturn []ent.Field{\n\t\tfield.String(\"content\"),\n\t\tfield.Time(\"created\").\n\t\t\tDefault(time.Now),\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Atlas Error Message for Non-Clean Database\nDESCRIPTION: Error message returned by Atlas when attempting to run migrations on a non-clean database, indicating the need for baselining.\nSOURCE: https://github.com/ent/ent/blob/master/doc/md/versioned/03-upgrade-prod.mdx#2025-04-22_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nError: sql/migrate: connected database is not clean: found table \"atlas_schema_revisions\" in schema \"db\". baseline version or allow-dirty is required\n```\n\n----------------------------------------\n\nTITLE: Customizing Ent Migration with Atlas Hooks in Go\nDESCRIPTION: Advanced example showing how to customize the Ent migration process using Atlas hooks. It demonstrates hooking into the Diff and Apply steps of the migration process, allowing for custom logic during schema changes.\nSOURCE: https://github.com/ent/ent/blob/master/doc/website/blog/2022-01-20-announcing-new-migration-engine.md#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\npackage main\nimport (\n    \"context\"\n    \"log\"\n    \"<project>/ent\"\n    \"<project>/ent/migrate\"\n\t\"ariga.io/atlas/sql/migrate\"\n\tatlas \"ariga.io/atlas/sql/schema\"\n\t\"entgo.io/ent/dialect\"\n\t\"entgo.io/ent/dialect/sql/schema\"\n)\nfunc main() {\n    client, err := ent.Open(\"mysql\", \"root:pass@tcp(localhost:3306)/test\")\n    if err != nil {\n        log.Fatalf(\"failed connecting to mysql: %v\", err)\n    }\n    defer client.Close()\n    ctx := context.Background()\n    // Run migration.\n    err := \tclient.Schema.Create(\n\t\tctx,\n\t\t// Hook into Atlas Diff process.\n\t\tschema.WithDiffHook(func(next schema.Differ) schema.Differ {\n\t\t\treturn schema.DiffFunc(func(current, desired *atlas.Schema) ([]atlas.Change, error) {\n\t\t\t\t// Before calculating changes.\n\t\t\t\tchanges, err := next.Diff(current, desired)\n\t\t\t\tif err != nil {\n\t\t\t\t\treturn nil, err\n\t\t\t\t}\n\t\t\t\t// After diff, you can filter\n\t\t\t\t// changes or return new ones.\n\t\t\t\treturn changes, nil\n\t\t\t})\n\t\t}),\n\t\t// Hook into Atlas Apply process.\n\t\tschema.WithApplyHook(func(next schema.Applier) schema.Applier {\n\t\t\treturn schema.ApplyFunc(func(ctx context.Context, conn dialect.ExecQuerier, plan *migrate.Plan) error {\n\t\t\t\t// Example to hook into the apply process, or implement\n\t\t\t\t// a custom applier. For example, write to a file.\n\t\t\t\t//\n\t\t\t\t//\tfor _, c := range plan.Changes {\n\t\t\t\t//\t\tfmt.Printf(\"%s: %s\", c.Comment, c.Cmd)\n\t\t\t\t//\t\tif err := conn.Exec(ctx, c.Cmd, c.Args, nil); err != nil {\n\t\t\t\t//\t\t\treturn err\n\t\t\t\t//\t\t}\n\t\t\t\t//\t}\n\t\t\t\t//\n\t\t\t\treturn next.Apply(ctx, conn, plan)\n\t\t\t})\n\t\t}),\n\t)\n    if err != nil {\n        log.Fatalf(\"failed creating schema resources: %v\", err)\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating and Relating Car Entities to User in Go\nDESCRIPTION: Extends the example function to create Car entities, relate them to the User, and demonstrate traversing the entity graph using Ent's query API.\nSOURCE: https://github.com/ent/ent/blob/master/doc/website/blog/2021-10-11-generating-ent-schemas-from-existing-sql-databases.md#2025-04-22_snippet_7\n\nLANGUAGE: go\nCODE:\n```\n// Create Car.\nvw := client.Car.\n    Create().\n    SetModel(\"volkswagen\").\n    SetColor(\"blue\").\n    SetEngineSize(1400).\n    SaveX(ctx)\nfmt.Println(\"First car created:\", vw)\n\n// Update the user - add the car relation.\nclient.User.Update().Where(user.ID(zeev.ID)).AddCars(vw).SaveX(ctx)\n\n// Query all cars that belong to the user.\ncars := zeev.QueryCars().AllX(ctx)\nfmt.Println(\"User cars:\", cars)\n\n// Create a second Car.\ndelorean := client.Car.\n    Create().\n    SetModel(\"delorean\").\n    SetColor(\"silver\").\n    SetEngineSize(9999).\n    SaveX(ctx)\nfmt.Println(\"Second car created:\", delorean)\n\n// Update the user - add another car relation.\nclient.User.Update().Where(user.ID(zeev.ID)).AddCars(delorean).SaveX(ctx)\n\n// Traverse the sub-graph.\ncars = delorean.\n    QueryUser().\n    QueryCars().\n    AllX(ctx)\nfmt.Println(\"User cars:\", cars)\n```\n\n----------------------------------------\n\nTITLE: Updating Router to Include Post Creation Endpoint\nDESCRIPTION: Function that creates a new Chi router with middleware and mounts the blog handlers including the new add post endpoint.\nSOURCE: https://github.com/ent/ent/blob/master/doc/website/blog/2023-02-23-simple-cms-with-ent.mdx#2025-04-22_snippet_22\n\nLANGUAGE: go\nCODE:\n```\n// newRouter creates a new router with the blog handlers mounted.\nfunc newRouter(srv *server) chi.Router {\n\tr := chi.NewRouter()\n\tr.Use(middleware.Logger)\n\tr.Use(middleware.Recoverer)\n\tr.Get(\"/\", srv.index)\n\t// highlight-next-line\n\tr.Post(\"/add\", srv.add)\n\treturn r\n}\n```\n\n----------------------------------------\n\nTITLE: Applying Database Migrations\nDESCRIPTION: Command to apply the generated migrations using golang-migrate tool.\nSOURCE: https://github.com/ent/ent/blob/master/doc/website/blog/2022-03-14-announcing-versioned-migrations.md#2025-04-22_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\nmigrate -source 'file://migrations' -database 'mysql://root:pass@tcp(localhost:3306)/ent' up\n```\n\n----------------------------------------\n\nTITLE: Generating Migration Files via CLI\nDESCRIPTION: Shell command to generate migration files for the updated schema.\nSOURCE: https://github.com/ent/ent/blob/master/doc/website/blog/2022-03-14-announcing-versioned-migrations.md#2025-04-22_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\ngo run -mod=mod main.go add_group_schema\n```\n\n----------------------------------------\n\nTITLE: Creating PostgreSQL Trigger Function and Triggers for Audit Logging\nDESCRIPTION: SQL script that defines a trigger function to audit changes in the users table and creates three triggers for INSERT, UPDATE, and DELETE operations that automatically populate the user_audit_logs table.\nSOURCE: https://github.com/ent/ent/blob/master/doc/md/migration/trigger.mdx#2025-04-22_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\n-- Function to audit changes in the users table.\nCREATE OR REPLACE FUNCTION audit_users_changes()\nRETURNS TRIGGER AS $$\nBEGIN\n    IF (TG_OP = 'INSERT') THEN\n        INSERT INTO user_audit_logs(operation_type, operation_time, new_value)\n        VALUES (TG_OP, CURRENT_TIMESTAMP, row_to_json(NEW));\n        RETURN NEW;\n    ELSIF (TG_OP = 'UPDATE') THEN\n        INSERT INTO user_audit_logs(operation_type, operation_time, old_value, new_value)\n        VALUES (TG_OP, CURRENT_TIMESTAMP, row_to_json(OLD), row_to_json(NEW));\n        RETURN NEW;\n    ELSIF (TG_OP = 'DELETE') THEN\n        INSERT INTO user_audit_logs(operation_type, operation_time, old_value)\n        VALUES (TG_OP, CURRENT_TIMESTAMP, row_to_json(OLD));\n        RETURN OLD;\n    END IF;\n    RETURN NULL;\nEND;\n$$ LANGUAGE plpgsql;\n\n-- Trigger for INSERT operations.\nCREATE TRIGGER users_insert_audit AFTER INSERT ON users FOR EACH ROW EXECUTE FUNCTION audit_users_changes();\n\n-- Trigger for UPDATE operations.\nCREATE TRIGGER users_update_audit AFTER UPDATE ON users FOR EACH ROW EXECUTE FUNCTION audit_users_changes();\n\n-- Trigger for DELETE operations.\nCREATE TRIGGER users_delete_audit AFTER DELETE ON users FOR EACH ROW EXECUTE FUNCTION audit_users_changes();\n```\n\n----------------------------------------\n\nTITLE: Defining PostGIS Extension in Atlas HCL\nDESCRIPTION: HCL configuration to define the PostGIS extension for Atlas schema management.\nSOURCE: https://github.com/ent/ent/blob/master/doc/md/migration/extension.mdx#2025-04-22_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\nschema \"public\" {}\n\nextension \"postgis\" {\n  schema  = schema.public\n  version = \"3.4.2\"\n  comment = \"PostGIS geometry and geography spatial types and functions\"\n}\n```\n\n----------------------------------------\n\nTITLE: Generated SQL Migration\nDESCRIPTION: This SQL snippet shows the generated migration to modify the 'users' table, changing the 'title' column to non-nullable.\nSOURCE: https://github.com/ent/ent/blob/master/doc/md/versioned/06-verifying-safety.mdx#2025-04-22_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\n-- modify \"users\" table\nALTER TABLE `users` MODIFY COLUMN `title` varchar(255) NOT NULL;\n```\n\n----------------------------------------\n\nTITLE: Defining a Global Annotation Type for Ent\nDESCRIPTION: This code defines a global annotation that can be injected into all templates, allowing configuration to be accessible throughout the codebase.\nSOURCE: https://github.com/ent/ent/blob/master/doc/md/templates.md#2025-04-22_snippet_6\n\nLANGUAGE: go\nCODE:\n```\npackage gqlconfig\n\nimport (\n\t\"entgo.io/ent/schema\"\n\t\"github.com/99designs/gqlgen/codegen/config\"\n)\n\n// Annotation defines a custom annotation\n// to be inject globally to all templates.\ntype Annotation struct {\n    Config *config.Config\n}\n\nfunc (Annotation) Name() string {\n    return \"GQL\"\n}\n\nvar _ schema.Annotation = (*Annotation)(nil)\n```\n\n----------------------------------------\n\nTITLE: Initializing Basic Ent Code Generation\nDESCRIPTION: Sets up the basic Ent code generation configuration file that will be used as the foundation for extensions.\nSOURCE: https://github.com/ent/ent/blob/master/doc/website/blog/2021-09-02-ent-extension-api.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\n//+build ignore\n\npackage main\n\nimport (\n    \"log\"\n\n    \"entgo.io/ent/entc\"\n    \"entgo.io/ent/entc/gen\"\n    \"entgo.io/ent/schema/field\"\n)\n\nfunc main() {\n    err := entc.Generate(\"./schema\", &gen.Config{})\n    if err != nil {\n        log.Fatal(\"running ent codegen:\", err)\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Applying Schema Directly with Atlas CLI\nDESCRIPTION: Shell command to apply the schema directly to a Postgres database without generating a migration file.\nSOURCE: https://github.com/ent/ent/blob/master/doc/md/migration/extension.mdx#2025-04-22_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\natlas schema apply \\\n  --env local \\\n  --url \"postgres://postgres:pass@localhost:5432/database?sslmode=disable\"\n```\n\n----------------------------------------\n\nTITLE: SQL Migration Down Script for Group Schema\nDESCRIPTION: SQL commands to remove group-related tables in correct order.\nSOURCE: https://github.com/ent/ent/blob/master/doc/website/blog/2022-03-14-announcing-versioned-migrations.md#2025-04-22_snippet_11\n\nLANGUAGE: sql\nCODE:\n```\nDROP TABLE `group_users`;\nDROP TABLE `groups`;\n```\n\n----------------------------------------\n\nTITLE: Generated SQL Migration Down\nDESCRIPTION: Auto-generated SQL for rolling back the users table creation.\nSOURCE: https://github.com/ent/ent/blob/master/doc/website/blog/2022-03-14-announcing-versioned-migrations.md#2025-04-22_snippet_5\n\nLANGUAGE: sql\nCODE:\n```\nDROP TABLE `users`;\n```\n\n----------------------------------------\n\nTITLE: Generating Ent Schema Files using entc Command\nDESCRIPTION: This command demonstrates how to use the 'entc' tool to generate User and Group schema files for an Ent project. It uses the 'go run' command with the '-mod=mod' flag to ensure proper module resolution.\nSOURCE: https://github.com/ent/ent/blob/master/doc/md/schema-def.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ngo run -mod=mod entgo.io/ent/cmd/ent new User Group\n```\n\n----------------------------------------\n\nTITLE: Running Specific Database Tests\nDESCRIPTION: Examples of running specific test suites using the -run flag, including MySQL and SQLite tests\nSOURCE: https://github.com/ent/ent/blob/master/entc/integration/README.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ngo test -run=MySQL\n\ngo test -run=MySQL/8/Sanity\n\ngo test -run=SQLite/Sanity\n```\n\n----------------------------------------\n\nTITLE: Generated Data Migration Function (Multi Statement)\nDESCRIPTION: Go function to generate a multi-statement data migration for backfilling user tags and appending special tags. This demonstrates how to create a more complex data migration using Ent.\nSOURCE: https://github.com/ent/ent/blob/master/doc/md/data-migrations.mdx#2025-04-22_snippet_5\n\nLANGUAGE: go\nCODE:\n```\npackage migratedata\n\n// BackfillUserTags is used to generate the migration file '20221126185750_backfill_user_tags.sql'.\nfunc BackfillUserTags(dir *migrate.LocalDir) error {\n\tw := &schema.DirWriter{Dir: dir}\n\tclient := ent.NewClient(ent.Driver(schema.NewWriteDriver(dialect.MySQL, w)))\n\n\t// Add defaults \"foo\" and \"bar\" tags for users without any.\n\terr := client.User.\n\t\tUpdate().\n\t\tWhere(func(s *sql.Selector) {\n\t\t\ts.Where(\n\t\t\t\tsql.Or(\n\t\t\t\t\tsql.IsNull(user.FieldTags),\n\t\t\t\t\tsqljson.ValueIsNull(user.FieldTags),\n\t\t\t\t),\n\t\t\t)\n\t\t}).\n\t\tSetTags([]string{\"foo\", \"bar\"}).\n\t\tExec(context.Background())\n\tif err != nil {\n\t\treturn fmt.Errorf(\"failed generating backfill statement: %w\", err)\n\t}\n\t// Document all changes until now with a custom comment.\n\tw.Change(\"Backfill NULL or null tags with a default value.\")\n\n\t// Append the \"org\" special tag for users with a specific prefix or suffix.\n\terr = client.User.\n\t\tUpdate().\n\t\tWhere(\n\t\t\tuser.Or(\n\t\t\t\tuser.NameHasPrefix(\"org-\"),\n\t\t\t\tuser.NameHasSuffix(\"-org\"),\n\t\t\t),\n\t\t\t// Append to only those without this tag.\n\t\t\tfunc(s *sql.Selector) {\n\t\t\t\ts.Where(\n\t\t\t\t\tsql.Not(sqljson.ValueContains(user.FieldTags, \"org\")),\n\t\t\t\t)\n\t\t\t},\n\t\t).\n\t\tAppendTags([]string{\"org\"}).\n\t\tExec(context.Background())\n\tif err != nil {\n\t\treturn fmt.Errorf(\"failed generating backfill statement: %w\", err)\n\t}\n\t// Document all changes until now with a custom comment.\n\tw.Change(\"Append the 'org' tag for organization accounts in case they don't have it.\")\n\n\t// Write the content to the migration directory.\n\treturn w.Flush(\"backfill_user_tags\")\n}\n```\n\n----------------------------------------\n\nTITLE: Updated Ent Schema for User Entity in Go\nDESCRIPTION: Shows the updated User schema in Ent after running entimport, including the new 'phone' field with unique constraint.\nSOURCE: https://github.com/ent/ent/blob/master/doc/website/blog/2021-10-11-generating-ent-schemas-from-existing-sql-databases.md#2025-04-22_snippet_12\n\nLANGUAGE: go\nCODE:\n```\nfunc (User) Fields() []ent.Field {\n\treturn []ent.Field{field.Int(\"id\"), ..., field.String(\"phone\").Optional().Unique()}\n}\n```\n\n----------------------------------------\n\nTITLE: Ordering by JSON Field Length in Ent Go\nDESCRIPTION: Demonstrates how to sort results based on the length of values within JSON fields.\nSOURCE: https://github.com/ent/ent/blob/master/doc/md/paging.mdx#2025-04-22_snippet_10\n\nLANGUAGE: go\nCODE:\n```\nusers := client.User.Query().\n    Order(\n        sqljson.OrderLen(user.FieldData, sqljson.Path(\"key1\", \"key2\")),\n    ).\n    AllX(ctx)\n```\n\n----------------------------------------\n\nTITLE: Applying Migrations with Atlas CLI\nDESCRIPTION: This shell command applies the generated migration to a PostgreSQL database using Atlas.\nSOURCE: https://github.com/ent/ent/blob/master/doc/md/migration/rls.mdx#2025-04-22_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\natlas migrate apply \\\n  --env local \\\n  --url \"postgres://postgres:pass@localhost:5432/database?search_path=public&sslmode=disable\"\n```\n\n----------------------------------------\n\nTITLE: Adding a New Field to User Entity in Go\nDESCRIPTION: This snippet shows how to add a new optional 'title' field to the User entity in the Ent schema.\nSOURCE: https://github.com/ent/ent/blob/master/doc/md/versioned/04-new-migration.mdx#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\n// Fields of the User.\nfunc (User) Fields() []ent.Field {\n\treturn []ent.Field{\n\t\tfield.String(\"name\"),\n\t\tfield.String(\"email\").\n            Unique(),\n\t\tfield.String(\"title\").\n            Optional(),\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Generate Migration Command Example\nDESCRIPTION: Bash command showing how to trigger migration generation with a specific name\nSOURCE: https://github.com/ent/ent/blob/master/doc/md/versioned-migrations.mdx#2025-04-22_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\ngo run -mod=mod ent/migrate/main.go create_users\n```\n\n----------------------------------------\n\nTITLE: Logging into Atlas CLI\nDESCRIPTION: This command logs into the Atlas CLI, which is necessary before performing other operations.\nSOURCE: https://github.com/ent/ent/blob/master/entc/integration/multischema/README.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\natlas login\n```\n\n----------------------------------------\n\nTITLE: Migration Option for Global IDs\nDESCRIPTION: Legacy migration option for enabling global unique IDs. This method is being replaced by the CLI flag approach.\nSOURCE: https://github.com/ent/ent/blob/master/doc/md/features.md#2025-04-22_snippet_8\n\nLANGUAGE: go\nCODE:\n```\nmigrate.WithGlobalUniqueID(true)\n```\n\n----------------------------------------\n\nTITLE: Creating GraphQL Server\nDESCRIPTION: Go code for setting up a GraphQL server with Ent integration.\nSOURCE: https://github.com/ent/ent/blob/master/doc/md/tutorial-todo-gql.mdx#2025-04-22_snippet_9\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"context\"\n\t\"log\"\n\t\"net/http\"\n\n\t\"todo\"\n\t\"todo/ent\"\n\t\"todo/ent/migrate\"\n\n\t\"entgo.io/ent/dialect\"\n\t\"github.com/99designs/gqlgen/graphql/handler\"\n\t\"github.com/99designs/gqlgen/graphql/playground\"\n\n\t_ \"github.com/mattn/go-sqlite3\"\n)\n\nfunc main() {\n\tclient, err := ent.Open(dialect.SQLite, \"file:ent?mode=memory&cache=shared&_fk=1\")\n\tif err != nil {\n\t\tlog.Fatal(\"opening ent client\", err)\n\t}\n\tif err := client.Schema.Create(\n\t\tcontext.Background(),\n\t\tmigrate.WithGlobalUniqueID(true),\n\t); err != nil {\n\t\tlog.Fatal(\"opening ent client\", err)\n\t}\n\n\tsrv := handler.NewDefaultServer(todo.NewSchema(client))\n\thttp.Handle(\"/\",\n\t\tplayground.Handler(\"Todo\", \"/query\"),\n\t)\n\thttp.Handle(\"/query\", srv)\n\tlog.Println(\"listening on :8081\")\n\tif err := http.ListenAndServe(\":8081\", nil); err != nil {\n\t\tlog.Fatal(\"http server terminated\", err)\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Checking Migration Status for MySQL\nDESCRIPTION: Command to check migration status for MySQL database using Atlas CLI\nSOURCE: https://github.com/ent/ent/blob/master/doc/md/versioned-migrations.mdx#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\natlas migrate status \\\n  --dir \"file://ent/migrate/migrations\" \\\n  --url \"mysql://root:pass@localhost:3306/example\"\n```\n\n----------------------------------------\n\nTITLE: Running entviz to Visualize Ent Schema in Go\nDESCRIPTION: This command runs entviz to analyze an Ent schema and create a visualization on the Atlas Playground. It generates a shareable, public link for the schema visualization.\nSOURCE: https://github.com/ent/ent/blob/master/doc/website/blog/2023-01-26-visualizing-with-entviz.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngo run -mod=mod ariga.io/entviz ./path/to/ent/schema\n```\n\n----------------------------------------\n\nTITLE: Configuring Generate Command\nDESCRIPTION: Modifies the generate.go file to invoke the Ent code generation.\nSOURCE: https://github.com/ent/ent/blob/master/doc/website/blog/2021-09-02-ent-extension-api.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\npackage ent\n\n//go:generate go run entc.go\n```\n\n----------------------------------------\n\nTITLE: Generating Schema Migrations with Atlas\nDESCRIPTION: Shell command to generate a migration for the composite schema, creating a migration file that includes both the Ent tables and the custom triggers.\nSOURCE: https://github.com/ent/ent/blob/master/doc/md/migration/trigger.mdx#2025-04-22_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\natlas migrate diff \\\n  --env local\n```\n\n----------------------------------------\n\nTITLE: Generating Migrations with Atlas for PostgreSQL\nDESCRIPTION: Shell command to generate a migration using Atlas for PostgreSQL, specifying the Ent schema location and development database URL.\nSOURCE: https://github.com/ent/ent/blob/master/doc/md/multischema-migrations.mdx#2025-04-22_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\natlas migrate diff \\\n  --to \"ent://ent/schema\" \\\n  --dev-url \"docker://postgres/15/dev\"\n```\n\n----------------------------------------\n\nTITLE: Generated Protobuf Compilation Directive in Go\nDESCRIPTION: This is the automatically generated go:generate directive for compiling the Protobuf definitions into Go code using protoc and various plugins.\nSOURCE: https://github.com/ent/ent/blob/master/doc/md/tutorial-grpc-generating-proto.md#2025-04-22_snippet_4\n\nLANGUAGE: go\nCODE:\n```\npackage entpb\n//go:generate protoc -I=.. --go_out=.. --go-grpc_out=.. --go_opt=paths=source_relative --go-grpc_opt=paths=source_relative --entgrpc_out=.. --entgrpc_opt=paths=source_relative,schema_path=../../schema entpb/entpb.proto\n```\n\n----------------------------------------\n\nTITLE: Generated Ent Predicate Function for File Name\nDESCRIPTION: Shows an automatically generated Ent predicate function for filtering Files by name.\nSOURCE: https://github.com/ent/ent/blob/master/doc/website/blog/2021-07-01-automatic-graphql-filter-generation.md#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\npackage file\n// .. truncated ..\n\n// Name applies the EQ predicate on the \"name\" field.\nfunc Name(v string) predicate.File {\n\treturn predicate.File(func(s *sql.Selector) {\n\t\ts.Where(sql.EQ(s.C(FieldName), v))\n\t})\n}\n```\n\n----------------------------------------\n\nTITLE: Using the Deprecated WithGlobalUniqueID Migration Option\nDESCRIPTION: Example of using the deprecated WithGlobalUniqueID option in Ent schema migration, shown for reference as the approach being replaced.\nSOURCE: https://github.com/ent/ent/blob/master/doc/md/globalid.mdx#2025-04-22_snippet_4\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"context\"\n\t\"log\"\n\t\n\t\"<project>/ent\"\n\t\"<project>/ent/migrate\"\n)\n\nfunc main() {\n\tclient, err := ent.Open(\"mysql\", \"root:pass@tcp(localhost:3306)/test\")\n\tif err != nil {\n\t\tlog.Fatalf(\"failed connecting to mysql: %v\", err)\n\t}\n\tdefer client.Close()\n\tctx := context.Background()\n\t// Run migration.\n\tif err := client.Schema.Create(ctx, migrate.WithGlobalUniqueID(true)); err != nil {\n\t\tlog.Fatalf(\"failed creating schema resources: %v\", err)\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Transaction Skip Functions (Go)\nDESCRIPTION: Examples of different ways to configure the SkipTxFunc to exclude certain operations from transactions.\nSOURCE: https://github.com/ent/ent/blob/master/doc/md/tutorial-todo-gql-tx-mutation.md#2025-04-22_snippet_4\n\nLANGUAGE: go\nCODE:\n```\nsrv.Use(entgql.Transactioner{\n\tTxOpener: client,\n\t// Skip the given operation names from running under a transaction.\n\tSkipTxFunc: entgql.SkipOperations(\"operation1\", \"operation2\"),\n})\n\nsrv.Use(entgql.Transactioner{\n\tTxOpener: client,\n\t// Skip if the operation has a mutation field with the given names.\n\tSkipTxFunc: entgql.SkipIfHasFields(\"field1\", \"field2\"),\n})\n\nsrv.Use(entgql.Transactioner{\n\tTxOpener: client,\n\t// Custom skip function.\n\tSkipTxFunc: func(*ast.OperationDefinition) bool {\n\t    // ...\n    },\n})\n```\n\n----------------------------------------\n\nTITLE: Generating ERD Visualization from Ent Schema using Atlas CLI\nDESCRIPTION: This command uses Atlas to inspect an Ent schema and generate a visualization. It specifies the schema location, uses an in-memory SQLite database as the dev database, and triggers the visualization process.\nSOURCE: https://github.com/ent/ent/blob/master/doc/website/blog/2023-08-13-visualize-with-atlas.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\natlas schema inspect \\\n  -u ent://ent/schema \\\n  --dev-url \"sqlite://demo?mode=memory&_fk=1\" \\\n  --visualize\n```\n\n----------------------------------------\n\nTITLE: Running Atlas Migration Diff Command for SQLite\nDESCRIPTION: This command generates a migration using Atlas for SQLite. It specifies the migration directory, Ent schema location, and uses an in-memory SQLite database with foreign key constraints enabled.\nSOURCE: https://github.com/ent/ent/blob/master/doc/md/components/_atlas_migrate_diff.mdx#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\natlas migrate diff migration_name \\\n  --dir \"file://ent/migrate/migrations\" \\\n  --to \"ent://ent/schema\" \\\n  --dev-url \"sqlite://file?mode=memory&_fk=1\"\n```\n\n----------------------------------------\n\nTITLE: Generating Ent Schema for User and Post Entities\nDESCRIPTION: Uses Ent CLI to generate initial schema files for User and Post entities.\nSOURCE: https://github.com/ent/ent/blob/master/doc/website/blog/2023-02-23-simple-cms-with-ent.mdx#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ngo run -mod=mod entgo.io/ent/cmd/ent new User Post\n```\n\n----------------------------------------\n\nTITLE: Configuring Atlas with Composite Schema\nDESCRIPTION: HCL configuration for Atlas to use a composite schema including both SQL extensions and Ent schema.\nSOURCE: https://github.com/ent/ent/blob/master/doc/md/migration/extension.mdx#2025-04-22_snippet_3\n\nLANGUAGE: hcl\nCODE:\n```\ndata \"composite_schema\" \"app\" {\n  # Install extensions first (PostGIS).\n  schema \"public\" {\n    url = \"file://schema.sql\"\n  }\n  # Then, load the Ent schema.\n  schema \"public\" {\n    url = \"ent://ent/schema\"\n  }\n}\n\nenv \"local\" {\n  src = data.composite_schema.app.url\n  dev = \"docker://postgis/latest/dev\"\n  format {\n    migrate {\n      diff = \"{{ sql . \\\"  \\\" }}\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Atlas Migration Validation Error Output\nDESCRIPTION: Example output when Atlas CLI detects mismatches between migration files and the atlas.sum file, indicating potential unauthorized changes to migration scripts.\nSOURCE: https://github.com/ent/ent/blob/master/doc/md/versioned-migrations.mdx#2025-04-22_snippet_18\n\nLANGUAGE: shell\nCODE:\n```\n# If the migration directory and sum file are out-of-sync the Atlas CLI will tell you.\natlas migrate validate --dir file://<path-to-your-migration-directory>\nError: checksum mismatch\n\nYou have a checksum error in your migration directory.\nThis happens if you manually create or edit a migration file.\nPlease check your migration files and run\n\n'atlas migrate hash'\n\nto re-hash the contents and resolve the error.\n\nexit status 1\n```\n\n----------------------------------------\n\nTITLE: Defining User Entity Schema in Go\nDESCRIPTION: Defines the schema for the User entity with name and email_address fields.\nSOURCE: https://github.com/ent/ent/blob/master/doc/website/blog/2021-03-18-generating-a-grpc-server-with-ent.md#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\npackage schema\n\nimport (\n\t\"entgo.io/ent\"\n\t\"entgo.io/ent/schema\"\n)\n\n// User holds the schema definition for the User entity.\ntype User struct {\n\tent.Schema\n}\n\n// Fields of the User.\nfunc (User) Fields() []ent.Field {\n\treturn []ent.Field{\n\t\tfield.String(\"name\").\n\t\t\tUnique(),\n\t\tfield.String(\"email_address\").\n\t\t\tUnique(),\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing gRPC Service Method Generation in Ent Schema\nDESCRIPTION: This Go code snippet demonstrates how to customize the generation of gRPC service methods for a User schema. It shows how to use entproto.Methods() to specify which methods should be generated, excluding Update and Delete methods.\nSOURCE: https://github.com/ent/ent/blob/master/doc/md/tutorial-grpc-service-generation-options.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nfunc (User) Annotations() []schema.Annotation {\n\treturn []schema.Annotation{\n\t\tentproto.Message(),\n\t\tentproto.Service(\n\t\t\tentproto.Methods(entproto.MethodCreate | entproto.MethodGet | entproto.MethodList | entproto.MethodBatchCreate),\n        ),\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Applying Schema with Atlas Go SDK\nDESCRIPTION: Go code using the Atlas Go SDK to apply schema changes directly to a database.\nSOURCE: https://github.com/ent/ent/blob/master/doc/md/migration/composite.mdx#2025-04-22_snippet_10\n\nLANGUAGE: go\nCODE:\n```\nac, err := atlasexec.NewClient(\".\", \"atlas\")\nif err != nil {\n\tlog.Fatalf(\"failed to initialize client: %w\", err)\n}\n// Automatically update the database with the desired schema.\n// Another option, is to use 'migrate apply' or 'schema apply' manually.\nif _, err := ac.SchemaApply(ctx, &atlasexec.SchemaApplyParams{\n\tEnv: \"local\",\n\tURL: \"postgres://postgres:pass@localhost:5432/database?search_path=public&sslmode=disable\",\n\tAutoApprove: true,\n}); err != nil {\n    log.Fatalf(\"failed to apply schema changes: %w\", err)\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing User Schema\nDESCRIPTION: Defines the User entity schema with an email address field.\nSOURCE: https://github.com/ent/ent/blob/master/doc/website/blog/2021-09-02-ent-extension-api.md#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\npackage schema\n\nimport (\n\t\"entgo.io/ent\"\n\t\"entgo.io/ent/schema/field\"\n)\n\n// User holds the schema definition for the User entity.\ntype User struct {\n\tent.Schema\n}\n\n// Fields of the User.\nfunc (User) Fields() []ent.Field {\n\treturn []ent.Field{\n\t\tfield.String(\"email_address\").\n\t\t\tUnique(),\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Generating a New Migration File with Atlas in Ent\nDESCRIPTION: Command to generate a new versioned migration file using Atlas. This connects the Ent schema with a MySQL database and creates a migration file in the specified directory.\nSOURCE: https://github.com/ent/ent/blob/master/examples/migration/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\natlas migrate diff <migration_name> \\\n  --dir \"file://ent/migrate/migrations\" \\\n  --to \"ent://ent/schema\" \\\n  --dev-url \"docker://mysql/8/ent\"\n```\n\n----------------------------------------\n\nTITLE: SQL Migration Script for Creating Users and Posts Tables\nDESCRIPTION: Generated SQL statements for creating the users and posts tables in MySQL.\nSOURCE: https://github.com/ent/ent/blob/master/doc/website/blog/2023-02-23-simple-cms-with-ent.mdx#2025-04-22_snippet_8\n\nLANGUAGE: sql\nCODE:\n```\n-- create \"users\" table  \nCREATE TABLE `users` (`id` bigint NOT NULL AUTO_INCREMENT, `name` varchar(255) NOT NULL, `email` varchar(255) NOT NULL, `created_at` timestamp NOT NULL, PRIMARY KEY (`id`), UNIQUE INDEX `email` (`email`)) CHARSET utf8mb4 COLLATE utf8mb4_bin;  \n-- create \"posts\" table  \nCREATE TABLE `posts` (`id` bigint NOT NULL AUTO_INCREMENT, `title` varchar(255) NOT NULL, `body` longtext NOT NULL, `created_at` timestamp NOT NULL, `user_posts` bigint NULL, PRIMARY KEY (`id`), INDEX `posts_users_posts` (`user_posts`), CONSTRAINT `posts_users_posts` FOREIGN KEY (`user_posts`) REFERENCES `users` (`id`) ON UPDATE NO ACTION ON DELETE SET NULL) CHARSET utf8mb4 COLLATE utf8mb4_bin;\n```\n\n----------------------------------------\n\nTITLE: Defining JSON Type Structure in Go\nDESCRIPTION: Creates a Meta struct type definition that will be used as the JSON column type\nSOURCE: https://github.com/ent/ent/blob/master/doc/website/blog/2022-12-01-changing-column-types-with-zero-downtime.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\ntype Meta struct {\n\tCreateTime time.Time `json:\"create_time\"`\n\tUpdateTime time.Time `json:\"update_time\"`\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Ent Code Generation with elk Extension\nDESCRIPTION: Main entrypoint for Ent code generation that configures the elk extension to generate OpenAPI specifications.\nSOURCE: https://github.com/ent/ent/blob/master/doc/website/blog/2021-09-10-openapi-generator.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\n// +build ignore\n\npackage main\n\nimport (\n\t\"log\"\n\n\t\"entgo.io/ent/entc\"\n\t\"entgo.io/ent/entc/gen\"\n\t\"github.com/masseelch/elk\"\n)\n\nfunc main() {\n\tex, err := elk.NewExtension(\n\t\telk.GenerateSpec(\"openapi.json\"),\n\t)\n\tif err != nil {\n\t\tlog.Fatalf(\"creating elk extension: %v\", err)\n\t}\n\terr = entc.Generate(\"./schema\", &gen.Config{}, entc.Extensions(ex))\n\tif err != nil {\n\t\tlog.Fatalf(\"running ent codegen: %v\", err)\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Formatting a New Markdown Document for Ent Documentation\nDESCRIPTION: This snippet shows the required front-matter for a new Markdown document in the Ent documentation. It includes the unique identifier and title for the document.\nSOURCE: https://github.com/ent/ent/blob/master/doc/md/writing-docs.md#2025-04-22_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n---\nid: writing-docs\ntitle: Writing Docs\n---\n...\n```\n\n----------------------------------------\n\nTITLE: Generated TodoWhereInput in GraphQL Schema\nDESCRIPTION: Demonstrates the automatically generated GraphQL input type for TodoWhereInput.\nSOURCE: https://github.com/ent/ent/blob/master/doc/website/blog/2021-07-01-automatic-graphql-filter-generation.md#2025-04-22_snippet_6\n\nLANGUAGE: graphql\nCODE:\n```\n\"\"\"\nTodoWhereInput is used for filtering Todo objects.\nInput was generated by ent.\n\"\"\"\ninput TodoWhereInput {\n  not: TodoWhereInput\n  and: [TodoWhereInput!]\n  or: [TodoWhereInput!]\n  \n  \"\"\"created_at field predicates\"\"\"\n  createdAt: Time\n  createdAtNEQ: Time\n  createdAtIn: [Time!]\n  createdAtNotIn: [Time!]\n  createdAtGT: Time\n  createdAtGTE: Time\n  createdAtLT: Time\n  createdAtLTE: Time\n  \n  \"\"\"status field predicates\"\"\"\n  status: Status\n  statusNEQ: Status\n  statusIn: [Status!]\n  statusNotIn: [Status!]\n    \n  # .. truncated ..\n}\n```\n\n----------------------------------------\n\nTITLE: Router Configuration Update in Go\nDESCRIPTION: Adding UserHandler routes to the existing router configuration.\nSOURCE: https://github.com/ent/ent/blob/master/doc/website/blog/2021-07-29-generate-a-fully-working-go-crud-http-api-with-ent.md#2025-04-22_snippet_8\n\nLANGUAGE: diff\nCODE:\n```\n[...]\n    r.Route(\"/pets\", func(r chi.Router) {\n        elk.NewPetHandler(c, l, v).Mount(r, elk.PetRoutes)\n    })\n+    // Create the user handler.\n+    r.Route(\"/users\", func(r chi.Router) {\n+        elk.NewUserHandler(c, l, v).Mount(r, elk.UserRoutes)\n+    })\n    // Start listen to incoming requests.\n    fmt.Println(\"Server running\")\n[...]\n```\n\n----------------------------------------\n\nTITLE: Running Atlas Migration Diff Command for MariaDB\nDESCRIPTION: This command generates a migration using Atlas for MariaDB. It specifies the migration directory, Ent schema location, and uses a Docker container as the development database.\nSOURCE: https://github.com/ent/ent/blob/master/doc/md/components/_atlas_migrate_diff.mdx#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\natlas migrate diff migration_name \\\n  --dir \"file://ent/migrate/migrations\" \\\n  --to \"ent://ent/schema\" \\\n  --dev-url \"docker://mariadb/latest/test\"\n```\n\n----------------------------------------\n\nTITLE: Defining Compartment Entity Schema\nDESCRIPTION: Ent schema definition for the Compartment entity with name field and relationships to Fridge and Item entities.\nSOURCE: https://github.com/ent/ent/blob/master/doc/website/blog/2021-09-10-openapi-generator.md#2025-04-22_snippet_5\n\nLANGUAGE: go\nCODE:\n```\npackage schema\n\nimport (\n\t\"entgo.io/ent\"\n\t\"entgo.io/ent/schema/edge\"\n\t\"entgo.io/ent/schema/field\"\n)\n\n// Compartment holds the schema definition for the Compartment entity.\ntype Compartment struct {\n\tent.Schema\n}\n\n// Fields of the Compartment.\nfunc (Compartment) Fields() []ent.Field {\n\treturn []ent.Field{\n\t\tfield.String(\"name\"),\n\t}\n}\n\n// Edges of the Compartment.\nfunc (Compartment) Edges() []ent.Edge {\n\treturn []ent.Edge{\n\t\tedge.From(\"fridge\", Fridge.Type).\n\t\t\tRef(\"compartments\").\n\t\t\tUnique(),\n\t\tedge.To(\"contents\", Item.Type),\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Adding entproto.Service() Annotation to Ent Schema in Go\nDESCRIPTION: This snippet shows how to add the entproto.Service() annotation to an Ent schema to generate a gRPC service definition.\nSOURCE: https://github.com/ent/ent/blob/master/doc/md/tutorial-grpc-generating-a-service.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nfunc (User) Annotations() []schema.Annotation {\n\treturn []schema.Annotation{\n\t\tentproto.Message(),\n\t\tentproto.Service(), // <-- add this\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Testing API Creation with Request Body in curl\nDESCRIPTION: Command to test creating a Todo item with a request body, showing validation error when required fields are missing.\nSOURCE: https://github.com/ent/ent/blob/master/doc/website/blog/2022-02-15-generate-rest-crud-with-ent-and-ogen.md#2025-04-22_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\n↪ curl -X POST -H \"Content-Type: application/json\" -d '{\"title\":\"Give ogen and ogent a Star on GitHub\"}'  localhost:8080/todos\n{\n  \"error_message\": \"decode CreateTodo:application/json request: invalid: done (field required)\"\n}\n```\n\n----------------------------------------\n\nTITLE: Update Generate File\nDESCRIPTION: Modification to generate.go file to execute the Ent code generation\nSOURCE: https://github.com/ent/ent/blob/master/doc/website/blog/2021-07-29-generate-a-fully-working-go-crud-http-api-with-ent.md#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\npackage ent\n\n//go:generate go run -mod=mod entc.go\n\n```\n\n----------------------------------------\n\nTITLE: Generating Assets for Ent Graph Traversal\nDESCRIPTION: This command generates necessary assets for the Ent graph traversal example. It uses the 'go generate' command to process all packages in the current directory and its subdirectories.\nSOURCE: https://github.com/ent/ent/blob/master/examples/traversal/README.md#2025-04-22_snippet_0\n\nLANGUAGE: console\nCODE:\n```\ngo generate ./...\n```\n\n----------------------------------------\n\nTITLE: Installing the entfix Tool for Global ID Migration\nDESCRIPTION: Command to install the entfix tool, which is required for migrating from the legacy ent_types table to the new static global ID configuration.\nSOURCE: https://github.com/ent/ent/blob/master/doc/md/globalid.mdx#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngo install entgo.io/ent/cmd/entfix@latest\n```\n\n----------------------------------------\n\nTITLE: Creating a User Entity with Ent in Go\nDESCRIPTION: Demonstrates how to create a User entity using Ent's fluent API. Sets various fields and saves the entity to the database.\nSOURCE: https://github.com/ent/ent/blob/master/doc/website/blog/2021-10-11-generating-ent-schemas-from-existing-sql-databases.md#2025-04-22_snippet_5\n\nLANGUAGE: go\nCODE:\n```\nfunc example(ctx context.Context, client *ent.Client) {\n\t// Create a User.\n\tzeev := client.User.\n\t\tCreate().\n\t\tSetAge(33).\n\t\tSetName(\"Zeev\").\n\t\tSetLastName(\"Manilovich\").\n\t\tSaveX(ctx)\n\tfmt.Println(\"User created:\", zeev)\n}\n```\n\n----------------------------------------\n\nTITLE: Defining City and Street Schemas with Edge Index in Ent (Go)\nDESCRIPTION: Demonstrates how to define City and Street entities with a one-to-many relationship, and set up an index on the street name and city edge to ensure uniqueness within each city.\nSOURCE: https://github.com/ent/ent/blob/master/examples/README.md#2025-04-22_snippet_19\n\nLANGUAGE: go\nCODE:\n```\n// City holds the schema definition for the City entity.\ntype City struct {\n\tent.Schema\n}\n\n// Fields of the City.\nfunc (City) Fields() []ent.Field {\n\treturn []ent.Field{\n\t\tfield.String(\"name\"),\n\t}\n}\n\n// Edges of the City.\nfunc (City) Edges() []ent.Edge {\n\treturn []ent.Edge{\n\t\tedge.To(\"streets\", Street.Type),\n\t}\n}\n\n// Street holds the schema definition for the Street entity.\ntype Street struct {\n\tent.Schema\n}\n\n// Fields of the Street.\nfunc (Street) Fields() []ent.Field {\n\treturn []ent.Field{\n\t\tfield.String(\"name\"),\n\t}\n}\n\n// Edges of the Street.\nfunc (Street) Edges() []ent.Edge {\n\treturn []ent.Edge{\n\t\tedge.From(\"city\", City.Type).\n\t\t\tRef(\"streets\").\n\t\t\tUnique(),\n\t}\n}\n\n// Indexes of the Street.\nfunc (Street) Indexes() []ent.Index {\n\treturn []ent.Index{\n\t\tindex.Fields(\"name\").\n\t\t\tEdges(\"city\").\n\t\t\tUnique(),\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Up Go Generate for Ent\nDESCRIPTION: Go file that configures the go:generate directive for Ent code generation. This allows running code generation using the standard Go tooling.\nSOURCE: https://github.com/ent/ent/blob/master/doc/md/code-gen.md#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\npackage ent\n\n//go:generate go run -mod=mod entgo.io/ent/cmd/ent generate ./schema\n```\n\n----------------------------------------\n\nTITLE: Field Mapping Example in Ent Schema\nDESCRIPTION: Example showing how to use entgql.MapsTo for custom field mapping between Ent and GraphQL schemas.\nSOURCE: https://github.com/ent/ent/blob/master/doc/md/tutorial-todo-gql-field-collection.md#2025-04-22_snippet_5\n\nLANGUAGE: go\nCODE:\n```\nfield.Int(\"priority\").\n\tAnnotations(\n\t\tentgql.OrderField(\"PRIORITY_ORDER\"),\n\t\tentgql.MapsTo(\"priorityOrder\"),\n\t)\n\nfield.Int(\"category_id\").\n\tAnnotations(\n\t\tentgql.MapsTo(\"categoryID\", \"category_id\", \"categoryX\"),\n\t)\n```\n\n----------------------------------------\n\nTITLE: Atlas Schema Management Commands\nDESCRIPTION: Shell commands for inspecting schema, generating and applying migrations using Atlas.\nSOURCE: https://github.com/ent/ent/blob/master/doc/md/migration/enum.mdx#2025-04-22_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\natlas schema inspect \\\n  --env local \\\n  --url env://src \\\n  --format '{{ sql . }}'\n```\n\n----------------------------------------\n\nTITLE: Appending Values to JSON Arrays in MySQL\nDESCRIPTION: This SQL snippet shows how to atomically append a value to a JSON array in MySQL, handling edge cases where the field might not exist or be null.\nSOURCE: https://github.com/ent/ent/blob/master/doc/website/blog/2022-10-10-json-append.mdx#2025-04-22_snippet_5\n\nLANGUAGE: sql\nCODE:\n```\nUPDATE `t` SET `c` = CASE\nWHEN\n    (JSON_TYPE(JSON_EXTRACT(`c`, '$.a')) IS NULL\n    OR JSON_TYPE(JSON_EXTRACT(`c`, '$.a')) = 'NULL')\nTHEN\n    JSON_SET(`c`, '$.a', JSON_ARRAY('new_val'))\nELSE\n    JSON_ARRAY_APPEND(`c`, '$.a', 'new_val')\nEND\n```\n\n----------------------------------------\n\nTITLE: Running the gRPC Client\nDESCRIPTION: Command to execute the gRPC client implementation and interact with the server.\nSOURCE: https://github.com/ent/ent/blob/master/doc/md/tutorial-grpc-server-and-client.md#2025-04-22_snippet_4\n\nLANGUAGE: console\nCODE:\n```\ngo run ./cmd/client\n```\n\n----------------------------------------\n\nTITLE: Entviz Extension Implementation\nDESCRIPTION: Core implementation of the entviz extension using Ent's extension API\nSOURCE: https://github.com/ent/ent/blob/master/doc/website/blog/2021-08-26-visualizing-your-data-graph-using-entviz.md#2025-04-22_snippet_6\n\nLANGUAGE: go\nCODE:\n```\n//go:embed entviz.go.tmpl\nvar tmplfile string\n \ntype Extension struct {\n\tentc.DefaultExtension\n}\n \nfunc (Extension) Templates() []*gen.Template {\n\treturn []*gen.Template{\n\t\tgen.MustParse(gen.NewTemplate(\"entviz\").Parse(tmplfile)),\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Querying User Data in MySQL\nDESCRIPTION: SQL query to verify the user data was correctly inserted into the MySQL database.\nSOURCE: https://github.com/ent/ent/blob/master/doc/website/blog/2021-10-11-generating-ent-schemas-from-existing-sql-databases.md#2025-04-22_snippet_6\n\nLANGUAGE: sql\nCODE:\n```\nSELECT *\nFROM users\nWHERE name = 'Zeev';\n\n+--+---+----+----------+\n|id|age|name|last_name |\n+--+---+----+----------+\n|1 |33 |Zeev|Manilovich|\n+--+---+----+----------+\n```\n\n----------------------------------------\n\nTITLE: Implementing Tweet History Without Enthistory in SQL\nDESCRIPTION: This code snippet demonstrates how to implement tweet history tracking without using Enthistory. It shows the SQL statements required to insert and update tweets while also recording the changes in a separate history table. The code uses transactions to ensure data consistency.\nSOURCE: https://github.com/ent/ent/blob/master/doc/website/blog/2022-04-07-how-twitter-can-implement.md#2025-04-22_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\n# INSERT is logged as \"CREATE\" history event\n-INSERT INTO tweets (`content`) VALUES ('Hello World!');\n+BEGIN;\n+INSERT INTO tweets (`content`) VALUES ('Hello World!');\n+INSERT INTO tweets_history (`content`, `timestamp`, `record_id`, `event`)\n+VALUES ('Hello World!', NOW(), 1, 'CREATE');\n+COMMIT;\n\n# UPDATE is logged as \"UPDATE\" history event\n-UPDATE tweets SET `content` = 'Hello World!' WHERE id = 1;\n+BEGIN;\n+UPDATE tweets SET `content` = 'Hello World!' WHERE id = 1;\n+INSERT INTO tweets_history (`content`, `timestamp`, `record_id`, `event`)\n+VALUES ('Hello World!', NOW(), 1, 'UPDATE');\n+COMMIT;\n```\n\n----------------------------------------\n\nTITLE: Adding Templates to an Extension in Go\nDESCRIPTION: Implementation of the Templates method to register custom templates with the extension.\nSOURCE: https://github.com/ent/ent/blob/master/doc/md/extension.md#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nfunc (*GreetExtension) Templates() []*gen.Template {\n\treturn []*gen.Template{\n\t\tgen.MustParse(gen.NewTemplate(\"greet\").ParseFiles(\"templates/greet.tmpl\")),\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Inspecting Schema with Atlas CLI\nDESCRIPTION: This shell command uses Atlas to inspect the composite schema and print its SQL representation.\nSOURCE: https://github.com/ent/ent/blob/master/doc/md/migration/rls.mdx#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\natlas schema inspect \\\n  --env local \\\n  --url env://src \\\n  --format '{{ sql . }}'\n```\n\n----------------------------------------\n\nTITLE: Testing API Creation with curl\nDESCRIPTION: Command to test creating a Todo item using curl, showing how the API handles requests without required fields.\nSOURCE: https://github.com/ent/ent/blob/master/doc/website/blog/2022-02-15-generate-rest-crud-with-ent-and-ogen.md#2025-04-22_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\n↪ curl -X POST -H \"Content-Type: application/json\" localhost:8080/todos\n{\n  \"error_message\": \"body required\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Code Generation Order in Go\nDESCRIPTION: This snippet shows how to configure the execution order of Ent and GQLGen code generation using go:generate directives.\nSOURCE: https://github.com/ent/ent/blob/master/doc/md/tutorial-todo-gql-schema-generator.md#2025-04-22_snippet_4\n\nLANGUAGE: go\nCODE:\n```\npackage todo\n\n//go:generate go run -mod=mod ./ent/entc.go\n//go:generate go run -mod=mod github.com/99designs/gqlgen\n```\n\n----------------------------------------\n\nTITLE: Installing Atlas and Logging In\nDESCRIPTION: Commands to install Atlas and log in to Atlas Cloud.\nSOURCE: https://github.com/ent/ent/blob/master/doc/md/migration/domain.mdx#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\natlas login a8m\n```\n\n----------------------------------------\n\nTITLE: Descending Order by JSON Fields in Ent Go\nDESCRIPTION: Shows how to apply descending order when sorting by JSON field values or lengths.\nSOURCE: https://github.com/ent/ent/blob/master/doc/md/paging.mdx#2025-04-22_snippet_11\n\nLANGUAGE: go\nCODE:\n```\nusers := client.User.Query().\n    Order(\n        sqljson.OrderValueDesc(user.FieldData, sqljson.Path(\"key1\", \"key2\")),\n    ).\n    AllX(ctx)\n\npets := client.Pet.Query().\n    Order(\n        sqljson.OrderLenDesc(pet.FieldData, sqljson.Path(\"key1\", \"key2\")),\n    ).\n    AllX(ctx)\n```\n\n----------------------------------------\n\nTITLE: Defining User Schema with Version Control in Ent\nDESCRIPTION: Creates an Ent schema for User entity with online status and version tracking for optimistic locking. The version field uses Unix timestamp for monotonic versioning.\nSOURCE: https://github.com/ent/ent/blob/master/doc/website/blog/2021-07-22-database-locking-techniques-with-ent.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\n// User holds the schema definition for the User entity.\ntype User struct {\n\tent.Schema\n}\n\n// Fields of the User.\nfunc (User) Fields() []ent.Field {\n\treturn []ent.Field{\n\t\tfield.Bool(\"online\"),\n\t\tfield.Int64(\"version\").\n\t\t\tDefaultFunc(func() int64 {\n\t\t\t\treturn time.Now().UnixNano()\n\t\t\t}).\n\t\t\tComment(\"Unix time of when the latest update occurred\")\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Docker Database Container Setup Commands\nDESCRIPTION: Commands for running MySQL, MariaDB or PostgreSQL database containers in Docker for migration development.\nSOURCE: https://github.com/ent/ent/blob/master/doc/md/versioned-migrations.mdx#2025-04-22_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ndocker run --name migration --rm -p 3306:3306 -e MYSQL_ROOT_PASSWORD=pass -e MYSQL_DATABASE=test -d mysql\n```\n\nLANGUAGE: bash\nCODE:\n```\ndocker run --name migration --rm -p 3306:3306 -e MYSQL_ROOT_PASSWORD=pass -e MYSQL_DATABASE=test -d mariadb\n```\n\nLANGUAGE: bash\nCODE:\n```\ndocker run --name migration --rm -p 5432:5432 -e POSTGRES_PASSWORD=pass -e POSTGRES_DB=test -d postgres\n```\n\n----------------------------------------\n\nTITLE: Ent User Schema Definition\nDESCRIPTION: Go code defining the User entity schema in Ent with unique email field.\nSOURCE: https://github.com/ent/ent/blob/master/doc/website/blog/2021-08-05-announcing-upsert-api.md#2025-04-22_snippet_4\n\nLANGUAGE: go\nCODE:\n```\n// User holds the schema definition for the User entity.\ntype User struct {\n\tent.Schema\n}\n\n// Fields of the User.\nfunc (User) Fields() []ent.Field {\n\treturn []ent.Field{\n\t\tfield.String(\"email\").\n\t\t\tUnique(),\n\t\tfield.String(\"name\"),\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Go Generate Command for Ent\nDESCRIPTION: Generate file configuration that triggers the Ent code generation process.\nSOURCE: https://github.com/ent/ent/blob/master/doc/website/blog/2021-09-10-openapi-generator.md#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\npackage ent\n\n//go:generate go run -mod=mod entc.go\n```\n\n----------------------------------------\n\nTITLE: Applying Migration with Atlas CLI\nDESCRIPTION: This command applies the generated migration to the MySQL database using Atlas CLI.\nSOURCE: https://github.com/ent/ent/blob/master/doc/md/versioned/04-new-migration.mdx#2025-04-22_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\natlas migrate apply --dir file://ent/migrate/migrations --url mysql://root:pass@localhost:3306/db\n```\n\n----------------------------------------\n\nTITLE: Efficient SQL Query with Edge-field Support (SQL)\nDESCRIPTION: This SQL query shows the more efficient database operation performed when retrieving a Pet with its Owner's ID after implementing edge-field support.\nSOURCE: https://github.com/ent/ent/blob/master/doc/website/blog/2021-03-12-announcing-edge-field-support.md#2025-04-22_snippet_5\n\nLANGUAGE: sql\nCODE:\n```\nSELECT DISTINCT `pets`.`id`, `pets`.`name`, `pets`.`owner_id` FROM `pets` WHERE `pets`.`id` = ? LIMIT 2\n```\n\n----------------------------------------\n\nTITLE: Upgrading to Ent v0.10 using Go Modules\nDESCRIPTION: Command to upgrade Ent to version 0.10.0 using Go modules.\nSOURCE: https://github.com/ent/ent/blob/master/doc/website/blog/2022-01-20-announcing-new-migration-engine.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngo get entgo.io/ent@v0.10.0\n```\n\n----------------------------------------\n\nTITLE: Fixing Unsafe Migration in SQL\nDESCRIPTION: This SQL snippet shows how to fix the unsafe migration by back-filling the 'title' column before making it non-nullable.\nSOURCE: https://github.com/ent/ent/blob/master/doc/md/versioned/06-verifying-safety.mdx#2025-04-22_snippet_6\n\nLANGUAGE: sql\nCODE:\n```\n-- modify \"users\" table\nUPDATE `users` SET `title` = \"\" WHERE `title` IS NULL;\n\nALTER TABLE `users` MODIFY COLUMN `title` varchar(255) NOT NULL;\n```\n\n----------------------------------------\n\nTITLE: SQL Migration Up Script for Group Schema\nDESCRIPTION: SQL commands to create groups table and group_users join table with appropriate constraints and indexes.\nSOURCE: https://github.com/ent/ent/blob/master/doc/website/blog/2022-03-14-announcing-versioned-migrations.md#2025-04-22_snippet_10\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE `groups` (`id` bigint NOT NULL AUTO_INCREMENT, `name` varchar(191) NOT NULL, PRIMARY KEY (`id`), UNIQUE INDEX `group_name` (`name`)) CHARSET utf8mb4 COLLATE utf8mb4_bin;\nCREATE TABLE `group_users` (`group_id` bigint NOT NULL, `user_id` bigint NOT NULL, PRIMARY KEY (`group_id`, `user_id`), CONSTRAINT `group_users_group_id` FOREIGN KEY (`group_id`) REFERENCES `groups` (`id`) ON DELETE CASCADE, CONSTRAINT `group_users_user_id` FOREIGN KEY (`user_id`) REFERENCES `users` (`id`) ON DELETE CASCADE) CHARSET utf8mb4 COLLATE utf8mb4_bin;\n```\n\n----------------------------------------\n\nTITLE: Creating HTML Form for Post Creation\nDESCRIPTION: HTML form with title and body fields that submits to the /add endpoint for creating new blog posts.\nSOURCE: https://github.com/ent/ent/blob/master/doc/website/blog/2023-02-23-simple-cms-with-ent.mdx#2025-04-22_snippet_23\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"col-md-12\">\n\t<hr/>\n\t<h2>Create a new post</h2>\n\t<form action=\"/add\" method=\"post\">\n\t\t<div class=\"mb-3\">\n\t\t\t<label for=\"title\" class=\"form-label\">Title</label>\n\t\t\t<input name=\"title\" type=\"text\" class=\"form-control\" id=\"title\" placeholder=\"Once upon a time..\">\n\t\t</div>\n\t\t<div class=\"mb-3\">\n\t\t\t<label for=\"body\" class=\"form-label\">Body</label>\n\t\t\t<textarea name=\"body\" class=\"form-control\" id=\"body\" rows=\"8\"></textarea>\n\t\t</div>\n\t\t<div class=\"mb-3\">\n\t\t\t<button type=\"submit\" class=\"btn btn-primary mb-3\">Post</button>\n\t\t</div>\n\t</form>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Applying Migrations with Atlas CLI\nDESCRIPTION: Shell command to apply the generated migration to a database using Atlas CLI.\nSOURCE: https://github.com/ent/ent/blob/master/doc/md/migration/functional-indexes.mdx#2025-04-22_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\natlas migrate apply \\\n  --env local \\\n  --url \"postgres://postgres:pass@localhost:5432/database?search_path=public&sslmode=disable\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Ent Code Generation\nDESCRIPTION: Go code for configuring Ent code generation with GraphQL support.\nSOURCE: https://github.com/ent/ent/blob/master/doc/md/tutorial-todo-gql.mdx#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\n//go:build ignore\n\npackage main\n\nimport (\n    \"log\"\n\n    \"entgo.io/ent/entc\"\n    \"entgo.io/ent/entc/gen\"\n    \"entgo.io/contrib/entgql\"\n)\n\nfunc main() {\n\tex, err := entgql.NewExtension(\n\t\tentgql.WithSchemaGenerator(),\n\t\tentgql.WithSchemaPath(\"ent.graphql\"),\n\t)\n\tif err != nil {\n\t\tlog.Fatalf(\"creating entgql extension: %v\", err)\n\t}\n\topts := []entc.Option{\n\t\tentc.Extensions(ex),\n\t}\n\tif err := entc.Generate(\"./ent/schema\", &gen.Config{}, opts...); err != nil {\n\t\tlog.Fatalf(\"running ent codegen: %v\", err)\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Defining User Schema Edge Relationships\nDESCRIPTION: Adding inverse edge relationship from User to Category in the User schema.\nSOURCE: https://github.com/ent/ent/blob/master/doc/md/tutorial-grpc-edges.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nfunc (User) Edges() []ent.Edge {\n\treturn []ent.Edge{\n\t\tedge.From(\"administered\", Category.Type).\n\t\t\tRef(\"admin\").\n\t\t\tAnnotations(entproto.Field(5)),\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Using Injected Dependencies in Ent Client\nDESCRIPTION: Example of how to use external dependencies that were injected into the generated Ent client and builders. This shows accessing HTTP client and IO writer in mutation hooks.\nSOURCE: https://github.com/ent/ent/blob/master/doc/md/code-gen.md#2025-04-22_snippet_9\n\nLANGUAGE: go\nCODE:\n```\nfunc Example_Deps() {\n\tclient, err := ent.Open(\n\t\t\"sqlite3\",\n\t\t\"file:ent?mode=memory&cache=shared&_fk=1\",\n\t\tent.Writer(os.Stdout),\n\t\tent.HTTPClient(http.DefaultClient),\n\t)\n\tif err != nil {\n\t\tlog.Fatalf(\"failed opening connection to sqlite: %v\", err)\n\t}\n\tdefer client.Close()\n\t// An example for using the injected dependencies in the generated builders.\n\tclient.User.Use(func(next ent.Mutator) ent.Mutator {\n\t\treturn hook.UserFunc(func(ctx context.Context, m *ent.UserMutation) (ent.Value, error) {\n\t\t\t_ = m.HTTPClient\n\t\t\t_ = m.Writer\n\t\t\treturn next.Mutate(ctx, m)\n\t\t})\n\t})\n\t// ...\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Atlas using Homebrew\nDESCRIPTION: This command installs Atlas using the Homebrew package manager on macOS.\nSOURCE: https://github.com/ent/ent/blob/master/doc/md/components/_installation_instructions.mdx#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nbrew install ariga/tap/atlas\n```\n\n----------------------------------------\n\nTITLE: Custom SQL Function with ExprP in Ent (Go)\nDESCRIPTION: Example of using a custom SQL function (DATE) with the ExprP method for inline predicate expressions.\nSOURCE: https://github.com/ent/ent/blob/master/doc/md/predicates.md#2025-04-22_snippet_13\n\nLANGUAGE: go\nCODE:\n```\nusers := client.User.Query().\n\tSelect(user.FieldID).\n\tWhere(func(s *sql.Selector) {\n\t\ts.Where(sql.ExprP(\"DATE(last_login_at) >= ?\", value))\n\t}).\n\tAllX(ctx)\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT `id` FROM `users` WHERE DATE(`last_login_at`) >= ?\n```\n\n----------------------------------------\n\nTITLE: Overriding Existing Templates in Ent\nDESCRIPTION: An example of overriding an existing Ent template to add additional fields to specific entity types. This template adds a StaticField to the Card entity.\nSOURCE: https://github.com/ent/ent/blob/master/doc/md/templates.md#2025-04-22_snippet_2\n\nLANGUAGE: gotemplate\nCODE:\n```\n{{/* A template for adding additional fields to specific types. */}}\n{{ define \"model/fields/additional\" }}\n\t{{- /* Add static fields to the \"Card\" entity. */}}\n\t{{- if eq $.Name \"Card\" }}\n\t\t// StaticField defined by templates.\n\t\tStaticField string `json:\"static_field,omitempty\"`\n\t{{- end }}\n{{ end }}\n```\n\n----------------------------------------\n\nTITLE: Cloning the TiDB Hello World example repository\nDESCRIPTION: This command clones a GitHub repository containing a sample Ent project configured for TiDB.\nSOURCE: https://github.com/ent/ent/blob/master/doc/website/blog/2022-03-17-announcing-preview-support-for-tidb.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ngit clone https://github.com/hedwigz/tidb-hello-world.git\n```\n\n----------------------------------------\n\nTITLE: SQL Schema Creation for Cars and Users Tables\nDESCRIPTION: SQL statements for creating the database tables with appropriate relationships and constraints\nSOURCE: https://github.com/ent/ent/blob/master/doc/md/getting-started.mdx#2025-04-22_snippet_16\n\nLANGUAGE: sql\nCODE:\n```\n-- Create \"cars\" table\nCREATE TABLE `cars` (\n  `id` integer NOT NULL PRIMARY KEY AUTOINCREMENT,\n  `model` text NOT NULL,\n  `registered_at` datetime NOT NULL,\n  `user_cars` integer NULL,\n  CONSTRAINT `cars_users_cars` FOREIGN KEY (`user_cars`) REFERENCES `users` (`id`) ON DELETE SET NULL\n);\n\n-- Create \"users\" table\nCREATE TABLE `users` (\n  `id` integer NOT NULL PRIMARY KEY AUTOINCREMENT,\n  `age` integer NOT NULL,\n  `name` text NOT NULL DEFAULT 'unknown'\n);\n```\n\n----------------------------------------\n\nTITLE: Running Ent Code Generation for OAS Server\nDESCRIPTION: This shell command regenerates the Ent code after configuring the elk extension for OAS server generation.\nSOURCE: https://github.com/ent/ent/blob/master/doc/website/blog/2021-09-10-openapi-generator.md#2025-04-22_snippet_11\n\nLANGUAGE: shell\nCODE:\n```\ngo generate ./...\n```\n\n----------------------------------------\n\nTITLE: Installing and Running Atlas with Docker\nDESCRIPTION: These commands pull the Atlas Docker image and run it to display help information. It also shows how to run Atlas with network access and volume mounting.\nSOURCE: https://github.com/ent/ent/blob/master/doc/md/components/_installation_instructions.mdx#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ndocker pull arigaio/atlas\ndocker run --rm arigaio/atlas --help\n```\n\nLANGUAGE: shell\nCODE:\n```\ndocker run --rm --net=host \\\n  -v $(pwd)/migrations:/migrations \\\n  arigaio/atlas migrate apply\n  --url \"mysql://root:pass@:3306/test\"\n```\n\n----------------------------------------\n\nTITLE: Auto-generated Edge Resolver in Ent\nDESCRIPTION: Example of an auto-generated edge resolver in Ent for handling GraphQL field collection.\nSOURCE: https://github.com/ent/ent/blob/master/doc/md/tutorial-todo-gql-field-collection.md#2025-04-22_snippet_4\n\nLANGUAGE: go\nCODE:\n```\nfunc (t *Todo) Children(ctx context.Context) ([]*Todo, error) {\n\tif fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != \"\" {\n\t\tresult, err = t.NamedChildren(graphql.GetFieldContext(ctx).Field.Alias)\n\t} else {\n\t\tresult, err = t.Edges.ChildrenOrErr()\n\t}\n\tif IsNotLoaded(err) {\n\t\tresult, err = t.QueryChildren().All(ctx)\n\t}\n\treturn result, err\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Insert Operation with Unique Constraint\nDESCRIPTION: Example of SQL insert statements that would trigger a unique constraint violation.\nSOURCE: https://github.com/ent/ent/blob/master/doc/website/blog/2021-08-05-announcing-upsert-api.md#2025-04-22_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nINSERT INTO users (email, name) VALUES ('rotem@entgo.io', 'Rotem Tamir');\nINSERT INTO users (email, name) VALUES ('rotem@entgo.io', 'Rotem Tamir');\n```\n\n----------------------------------------\n\nTITLE: Generating Migration for Composite Schema\nDESCRIPTION: Shell command to generate a migration for the composite schema using Atlas CLI.\nSOURCE: https://github.com/ent/ent/blob/master/doc/md/migration/extension.mdx#2025-04-22_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\natlas migrate diff \\\n  --env local\n```\n\n----------------------------------------\n\nTITLE: GitHub Action for PostgreSQL Migration Linting\nDESCRIPTION: A GitHub Action workflow that automates linting of Ent migration files for PostgreSQL databases. It spins up a PostgreSQL container to validate migrations for syntax correctness and safety.\nSOURCE: https://github.com/ent/ent/blob/master/doc/md/ci.mdx#2025-04-22_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nname: Atlas CI\non:\n  # Run whenever code is changed in the master branch,\n  # change this to your root branch.\n  push:\n    branches:\n      - master\n  # Run on PRs where something changed under the `ent/migrate/migrations/` directory.\n  pull_request:\n    paths:\n      - 'ent/migrate/migrations/*'\njobs:\n  lint:\n    services:\n      # Spin up a postgres:15 container to be used as the dev-database for analysis.\n      postgres:\n        image: postgres:15\n        env:\n          POSTGRES_DB: dev\n          POSTGRES_PASSWORD: pass\n        ports:\n          - 5432:5432\n        options: >\n          --health-cmd pg_isready\n          --health-interval 10s\n          --health-start-period 10s\n          --health-timeout 5s\n          --health-retries 5\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - uses: ariga/setup-atlas@v0\n        with:\n          cloud-token: ${{ secrets.ATLAS_CLOUD_TOKEN }}\n      - uses: ariga/atlas-action/migrate/lint@v1\n        with:\n          dir: 'file://ent/migrate/migrations'\n          dir-name: 'my-project' # The name of the project in Atlas Cloud\n          dev-url: postgres://postgres:pass@localhost:5432/dev?sslmode=disable\n```\n\n----------------------------------------\n\nTITLE: Defining Composite Type in HCL\nDESCRIPTION: HCL code to define a composite type 'address' with street and city fields.\nSOURCE: https://github.com/ent/ent/blob/master/doc/md/migration/composite.mdx#2025-04-22_snippet_2\n\nLANGUAGE: hcl\nCODE:\n```\nschema \"public\" {}\n\ncomposite \"address\" {\n  schema = schema.public\n  field \"street\" {\n    type = text\n  }\n  field \"city\" {\n    type = text\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Schema Migration with Atlas CLI\nDESCRIPTION: Shell command to generate a migration for the schema using Atlas CLI.\nSOURCE: https://github.com/ent/ent/blob/master/doc/md/migration/functional-indexes.mdx#2025-04-22_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\natlas migrate diff \\\n  --env local\n```\n\n----------------------------------------\n\nTITLE: Generating Indented SQL Migrations with Atlas\nDESCRIPTION: Shell command to generate a migration with indented SQL statements using Atlas, demonstrating the use of the --format flag.\nSOURCE: https://github.com/ent/ent/blob/master/doc/md/multischema-migrations.mdx#2025-04-22_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\natlas migrate diff \\\n  --to \"ent://ent/schema\" \\\n  --dev-url \"docker://postgres/15/dev\" \\\n// highlight-next-line\n  --format \"{{ sql . \\\"  \\\" }}\"\n```\n\n----------------------------------------\n\nTITLE: Running entimport to Update Ent Schema\nDESCRIPTION: Shell command to run entimport and sync the Ent schema with the updated database schema.\nSOURCE: https://github.com/ent/ent/blob/master/doc/website/blog/2021-10-11-generating-ent-schemas-from-existing-sql-databases.md#2025-04-22_snippet_11\n\nLANGUAGE: shell\nCODE:\n```\ngo run -mod=mod ariga.io/entimport/cmd/entimport -dialect mysql -dsn \"root:pass@tcp(localhost:3306)/entimport\"\n```\n\n----------------------------------------\n\nTITLE: Updating Index Query for Post Ordering\nDESCRIPTION: Code snippet showing how to modify the index handler to order posts from newest to oldest using the created_at field.\nSOURCE: https://github.com/ent/ent/blob/master/doc/website/blog/2023-02-23-simple-cms-with-ent.mdx#2025-04-22_snippet_24\n\nLANGUAGE: go\nCODE:\n```\nposts, err := s.client.Post.\n\tQuery().\n\tWithAuthor().\n\t// highlight-next-line\n\tOrder(ent.Desc(post.FieldCreatedAt)).\n\tAll(ctx)\n```\n\n----------------------------------------\n\nTITLE: Generate Command Configuration\nDESCRIPTION: Simple generate pragma configuration file that triggers the ent code generation process using go generate command.\nSOURCE: https://github.com/ent/ent/blob/master/examples/entcpkg/README.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\npackage ent\n\n//go:generate go run entc.go\n```\n\n----------------------------------------\n\nTITLE: Starting MySQL Docker Container\nDESCRIPTION: Docker command to start a MySQL container for development.\nSOURCE: https://github.com/ent/ent/blob/master/doc/website/blog/2022-03-14-announcing-versioned-migrations.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ndocker run --rm --name ent-versioned-migrations --detach --env MYSQL_ROOT_PASSWORD=pass --env MYSQL_DATABASE=ent -p 3306:3306 mysql\n```\n\n----------------------------------------\n\nTITLE: Enabling Feature Flags via CLI in Ent\nDESCRIPTION: Demonstrates how to enable feature flags using the command-line interface when generating Ent code.\nSOURCE: https://github.com/ent/ent/blob/master/doc/md/features.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngo run -mod=mod entgo.io/ent/cmd/ent generate --feature privacy,entql ./ent/schema\n```\n\n----------------------------------------\n\nTITLE: Generated SQL for Multi Statement Data Migration\nDESCRIPTION: SQL generated from the multi-statement data migration function, which backfills user tags and appends special tags.\nSOURCE: https://github.com/ent/ent/blob/master/doc/md/data-migrations.mdx#2025-04-22_snippet_6\n\nLANGUAGE: sql\nCODE:\n```\n-- Backfill NULL or null tags with a default value.\nUPDATE `users` SET `tags` = '[\"foo\",\"bar\"]' WHERE `tags` IS NULL OR JSON_CONTAINS(`tags`, 'null', '$');\n-- Append the 'org' tag for organization accounts in case they don't have it.\nUPDATE `users` SET `tags` = CASE WHEN (JSON_TYPE(JSON_EXTRACT(`tags`, '$')) IS NULL OR JSON_TYPE(JSON_EXTRACT(`tags`, '$')) = 'NULL') THEN JSON_ARRAY('org') ELSE JSON_ARRAY_APPEND(`tags`, '$', 'org') END WHERE (`users`.`name` LIKE 'org-%' OR `users`.`name` LIKE '%-org') AND (NOT (JSON_CONTAINS(`tags`, '\"org\"', '$') = 1));\n```\n\n----------------------------------------\n\nTITLE: Creating Functional Index in SQL\nDESCRIPTION: SQL command to create a functional unique index on the lowercased name column.\nSOURCE: https://github.com/ent/ent/blob/master/doc/md/migration/functional-indexes.mdx#2025-04-22_snippet_3\n\nLANGUAGE: SQL\nCODE:\n```\n-- Create a functional (unique) index on the lowercased name column.\nCREATE UNIQUE INDEX unique_name ON \"users\" ((lower(\"name\")));\n```\n\n----------------------------------------\n\nTITLE: Modifying Todo Resolver for Debug Mode\nDESCRIPTION: Code diff showing how to enable debug mode in the Ent client for the Todos resolver.\nSOURCE: https://github.com/ent/ent/blob/master/doc/md/tutorial-todo-gql-field-collection.md#2025-04-22_snippet_2\n\nLANGUAGE: diff\nCODE:\n```\nfunc (r *queryResolver) Todos(ctx context.Context, after *ent.Cursor, first *int, before *ent.Cursor, last *int, orderBy *ent.TodoOrder) (*ent.TodoConnection, error) {\n-\treturn r.client.Todo.Query().\n+\treturn r.client.Debug().Todo.Query().\n\t\tPaginate(ctx, after, first, before, last,\n\t\t\tent.WithTodoOrder(orderBy),\n\t\t)\n}\n```\n\n----------------------------------------\n\nTITLE: Sample GraphQL Query with Multiple Associations\nDESCRIPTION: Example GraphQL query demonstrating the N+1 problem by requesting users with their photos, posts and comments.\nSOURCE: https://github.com/ent/ent/blob/master/doc/md/tutorial-todo-gql-field-collection.md#2025-04-22_snippet_1\n\nLANGUAGE: graphql\nCODE:\n```\nquery {\n    users(first: 50) {\n        edges {\n            node {\n                photos {\n                    link\n                }\n                posts {\n                    content\n                    comments {\n                        content\n                    }\n                }\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: SQL Data Seeding Migration\nDESCRIPTION: SQL statements to seed the users table with initial data including names, emails, and titles\nSOURCE: https://github.com/ent/ent/blob/master/doc/md/versioned/05-custom-migrations.md#2025-04-22_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nINSERT INTO `users` (`name`, `email`, `title`)\nVALUES ('Jerry Seinfeld', 'jerry@seinfeld.io', 'Mr.'),\n       ('George Costanza', 'george@costanza.io', 'Mr.')\n```\n\n----------------------------------------\n\nTITLE: GitHub Action for MySQL Migration Linting\nDESCRIPTION: A GitHub Action workflow that automates linting of Ent migration files for MySQL databases. It spins up a MySQL container to validate migrations, ensuring they are syntactically valid, properly ordered, and don't cause data loss.\nSOURCE: https://github.com/ent/ent/blob/master/doc/md/ci.mdx#2025-04-22_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nname: Atlas CI\non:\n  # Run whenever code is changed in the master branch,\n  # change this to your root branch.\n  push:\n    branches:\n      - master\n  # Run on PRs where something changed under the `ent/migrate/migrations/` directory.\n  pull_request:\n    paths:\n      - 'ent/migrate/migrations/*'\njobs:\n  lint:\n    services:\n      # Spin up a mysql:8.0.29 container to be used as the dev-database for analysis.\n      mysql:\n        image: mysql:8.0.29\n        env:\n          MYSQL_ROOT_PASSWORD: pass\n          MYSQL_DATABASE: test\n        ports:\n          - \"3306:3306\"\n        options: >\n          --health-cmd \"mysqladmin ping -ppass\"\n          --health-interval 10s\n          --health-start-period 10s\n          --health-timeout 5s\n          --health-retries 10\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - uses: ariga/setup-atlas@v0\n        with:\n          cloud-token: ${{ secrets.ATLAS_CLOUD_TOKEN }}\n      - uses: ariga/atlas-action/migrate/lint@v1\n        with:\n          dir: 'file://ent/migrate/migrations'\n          dir-name: 'my-project' # The name of the project in Atlas Cloud\n          dev-url: \"mysql://root:pass@localhost:3306/dev\"\n```\n\n----------------------------------------\n\nTITLE: Inspecting Schema with Atlas\nDESCRIPTION: Shell command to inspect the composite schema and print its SQL representation using Atlas.\nSOURCE: https://github.com/ent/ent/blob/master/doc/md/migration/composite.mdx#2025-04-22_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\natlas schema inspect \\\n  --env local \\\n  --url env://src \\\n  --format '{{ sql . }}'\n```\n\n----------------------------------------\n\nTITLE: Applying Migrations with Atlas CLI\nDESCRIPTION: This command applies the previously generated migration to a PostgreSQL database using the Atlas CLI. It specifies the environment and database connection URL.\nSOURCE: https://github.com/ent/ent/blob/master/doc/md/migration/trigger.mdx#2025-04-22_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\natlas migrate apply \\\n  --env local \\\n  --url \"postgres://postgres:pass@localhost:5432/database?search_path=public&sslmode=disable\"\n```\n\n----------------------------------------\n\nTITLE: Installing Atlas CLI\nDESCRIPTION: Command to install the Atlas CLI tool, which is required for multi-schema migrations.\nSOURCE: https://github.com/ent/ent/blob/master/doc/md/multischema-migrations.mdx#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\natlas login\n```\n\n----------------------------------------\n\nTITLE: Generated Team Schema Example\nDESCRIPTION: This snippet shows an example of a Team schema generated by the UpsertSchema mutator. Similar to the User schema, it includes a name field and empty implementations for Edges and Annotations methods.\nSOURCE: https://github.com/ent/ent/blob/master/doc/md/generating-ent-schemas.md#2025-04-22_snippet_6\n\nLANGUAGE: go\nCODE:\n```\npackage schema\n\nimport (\n\t\"entgo.io/ent\"\n\t\"entgo.io/ent/schema\"\n\t\"entgo.io/ent/schema/field\"\n)\n\ntype Team struct {\n\tent.Schema\n}\n\nfunc (Team) Fields() []ent.Field {\n\treturn []ent.Field{field.String(\"name\")}\n}\nfunc (Team) Edges() []ent.Edge {\n\treturn nil\n}\nfunc (Team) Annotations() []schema.Annotation {\n\treturn nil\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Go Module for ent Project\nDESCRIPTION: Sets up a new Go module for the ent demo project.\nSOURCE: https://github.com/ent/ent/blob/master/doc/md/getting-started.mdx#2025-04-22_snippet_0\n\nLANGUAGE: console\nCODE:\n```\ngo mod init entdemo\n```\n\n----------------------------------------\n\nTITLE: Running the gRPC Server\nDESCRIPTION: Command to start the gRPC server implementation.\nSOURCE: https://github.com/ent/ent/blob/master/doc/md/tutorial-grpc-server-and-client.md#2025-04-22_snippet_2\n\nLANGUAGE: console\nCODE:\n```\ngo run -mod=mod ./cmd/server\n```\n\n----------------------------------------\n\nTITLE: Running Atlas Migrate Apply on Existing Database\nDESCRIPTION: Attempt to run Atlas migrate apply command on an existing database, resulting in an error due to the database not being clean.\nSOURCE: https://github.com/ent/ent/blob/master/doc/md/versioned/03-upgrade-prod.mdx#2025-04-22_snippet_0\n\nLANGUAGE: text\nCODE:\n```\natlas migrate apply --dir file://ent/migrate/migrations --url mysql://root:pass@localhost:3306/db\n```\n\n----------------------------------------\n\nTITLE: Setting OpenAI API Key in Environment\nDESCRIPTION: Command to set the OpenAI API key as an environment variable for use by the application.\nSOURCE: https://github.com/ent/ent/blob/master/doc/website/blog/2025-02-12-rag-with-ent-atlas-pgvector.mdx#2025-04-22_snippet_18\n\nLANGUAGE: bash\nCODE:\n```\nexport OPENAI_KEY=<your OpenAI API key>\n```\n\n----------------------------------------\n\nTITLE: Running Examples for JSON Encode Extension in Ent\nDESCRIPTION: Command to execute tests for the JSON Encode Extension examples. This helps verify the correct implementation and functionality of the extension.\nSOURCE: https://github.com/ent/ent/blob/master/examples/jsonencode/README.md#2025-04-22_snippet_1\n\nLANGUAGE: console\nCODE:\n```\ngo test\n```\n\n----------------------------------------\n\nTITLE: Cloning the Example Repository\nDESCRIPTION: Commands to clone the example repository and run the initial version of the GraphQL server.\nSOURCE: https://github.com/ent/ent/blob/master/doc/md/tutorial-todo-gql.mdx#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngit clone git@github.com:a8m/ent-graphql-example.git\ncd ent-graphql-example\ngo run ./cmd/todo\n```\n\n----------------------------------------\n\nTITLE: Defining Todo Schema with Optional Fields in Go\nDESCRIPTION: Schema definition for the Todo entity with updated field configuration, making the 'done' field optional to fix validation issues.\nSOURCE: https://github.com/ent/ent/blob/master/doc/website/blog/2022-02-15-generate-rest-crud-with-ent-and-ogen.md#2025-04-22_snippet_9\n\nLANGUAGE: go\nCODE:\n```\npackage schema\n\nimport (\n\t\"entgo.io/ent\"\n\t\"entgo.io/ent/schema/field\"\n)\n\n// Todo holds the schema definition for the Todo entity.\ntype Todo struct {\n\tent.Schema\n}\n\n// Fields of the Todo.\nfunc (Todo) Fields() []ent.Field {\n\treturn []ent.Field{\n\t\tfield.String(\"title\"),\n\t\tfield.Bool(\"done\").\n\t\t    Optional(),\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Users Table with Unique Constraint in SQLite\nDESCRIPTION: SQL table definition for a users table with auto-incrementing ID and unique email constraint.\nSOURCE: https://github.com/ent/ent/blob/master/doc/website/blog/2021-08-05-announcing-upsert-api.md#2025-04-22_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE users (\n   id integer PRIMARY KEY AUTOINCREMENT,\n   email varchar(255) UNIQUE,\n   name varchar(255)\n)\n```\n\n----------------------------------------\n\nTITLE: HTTP Server Implementation for Entviz\nDESCRIPTION: Example of serving the entviz visualization through an HTTP server\nSOURCE: https://github.com/ent/ent/blob/master/doc/website/blog/2021-08-26-visualizing-your-data-graph-using-entviz.md#2025-04-22_snippet_5\n\nLANGUAGE: go\nCODE:\n```\nfunc main() {\n\thttp.ListenAndServe(\"localhost:3002\", ent.ServeEntviz())\n}\n```\n\n----------------------------------------\n\nTITLE: Executing SQL Query with Metadata Comment\nDESCRIPTION: This SQL snippet demonstrates how sqlcomment adds metadata comments to SQL queries. It includes information about the application, controller, route, and database driver used.\nSOURCE: https://github.com/ent/ent/blob/master/doc/website/blog/2021-10-19-sqlcomment-support-for-ent.md#2025-04-22_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nupdate users set username = 'hedwigz' where id = 88\n/*application='users-mgr',controller='users',route='user_rename',db_driver='ent:v0.9.1'*/\n```\n\n----------------------------------------\n\nTITLE: Entviz Template Definition\nDESCRIPTION: Template file for generating the entviz HTTP handler code\nSOURCE: https://github.com/ent/ent/blob/master/doc/website/blog/2021-08-26-visualizing-your-data-graph-using-entviz.md#2025-04-22_snippet_7\n\nLANGUAGE: gotemplate\nCODE:\n```\n{{ define \"entviz\"}}\n \n{{ $pkg := base $.Config.Package }}\n{{ template \"header\" $ }}\nimport (\n\t_ \"embed\"\n\t\"net/http\"\n\t\"strings\"\n\t\"time\"\n)\n\n//go:embed schema-viz.html\nvar html string\n\nfunc ServeEntviz() http.Handler {\n\tgenerateTime := time.Now()\n\treturn http.HandlerFunc(func(w http.ResponseWriter, req *http.Request) {\n\t\thttp.ServeContent(w, req, \"schema-viz.html\", generateTime, strings.NewReader(html))\n\t})\n}\n{{ end }}\n```\n\n----------------------------------------\n\nTITLE: Generated SQL for Data Seeding Migration\nDESCRIPTION: SQL generated from the data seeding migration function, which inserts initial user data into the database.\nSOURCE: https://github.com/ent/ent/blob/master/doc/md/data-migrations.mdx#2025-04-22_snippet_8\n\nLANGUAGE: sql\nCODE:\n```\n-- Add the initial users to the database.\nINSERT INTO `users` (`age`, `name`, `tags`) VALUES (1, 'a8m', '[\"foo\"]'), (1, 'nati', '[\"bar\"]');\n```\n\n----------------------------------------\n\nTITLE: GitHub Actions Workflow for Atlas CI\nDESCRIPTION: This YAML configuration sets up a GitHub Actions workflow to run Atlas migration linting in CI.\nSOURCE: https://github.com/ent/ent/blob/master/doc/md/versioned/06-verifying-safety.mdx#2025-04-22_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nname: Atlas CI\non:\n  push:\n    branches:\n      - master\n  pull_request:\n    paths:\n      - 'ent/migrate/migrations/*'\njobs:\n  lint:\n    services:\n      mysql:\n        image: mysql:8.0.29\n        env:\n          MYSQL_ROOT_PASSWORD: pass\n          MYSQL_DATABASE: dev\n        ports:\n          - \"3306:3306\"\n        options: >\n          --health-cmd \"mysqladmin ping -ppass\"\n          --health-interval 10s\n          --health-start-period 10s\n          --health-timeout 5s\n          --health-retries 10\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3.0.1\n        with:\n          fetch-depth: 0\n      - uses: ariga/atlas-action@v0\n        with:\n          dir: ent/migrate/migrations\n          dev-url: mysql://root:pass@localhost:3306/dev\n```\n\n----------------------------------------\n\nTITLE: Applying Schema with Atlas Go SDK\nDESCRIPTION: Go code snippet demonstrating how to apply schema changes using the Atlas Go SDK.\nSOURCE: https://github.com/ent/ent/blob/master/doc/md/migration/functional-indexes.mdx#2025-04-22_snippet_9\n\nLANGUAGE: Go\nCODE:\n```\nac, err := atlasexec.NewClient(\".\", \"atlas\")\nif err != nil {\n\tlog.Fatalf(\"failed to initialize client: %w\", err)\n}\n// Automatically update the database with the desired schema.\n// Another option, is to use 'migrate apply' or 'schema apply' manually.\nif _, err := ac.SchemaApply(ctx, &atlasexec.SchemaApplyParams{\n\tEnv: \"local\",\n\tURL: \"postgres://postgres:pass@localhost:5432/database?sslmode=disable\",\n\tAutoApprove: true,\n}); err != nil {\n    log.Fatalf(\"failed to apply schema changes: %w\", err)\n}\n```\n\n----------------------------------------\n\nTITLE: Applying Migrations with Atlas\nDESCRIPTION: Shell command to apply the generated migration to a database using Atlas.\nSOURCE: https://github.com/ent/ent/blob/master/doc/md/migration/composite.mdx#2025-04-22_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\natlas migrate apply \\\n  --env local \\\n  --url \"postgres://postgres:pass@localhost:5432/database?search_path=public&sslmode=disable\"\n```\n\n----------------------------------------\n\nTITLE: Rendering Contributors Table in HTML\nDESCRIPTION: This HTML snippet creates a table to display contributors to the ent/ent project. It includes avatar images, names, and contribution types for each contributor. The table is structured with rows and columns for easy readability.\nSOURCE: https://github.com/ent/ent/blob/master/doc/md/contributors.md#2025-04-22_snippet_2\n\nLANGUAGE: HTML\nCODE:\n```\n<table>\n  <tbody>\n    <tr>\n      <td align=\"center\"><a href=\"http://www.thinkontrol.com\"><img src=\"https://avatars.githubusercontent.com/u/11331554?v=4?s=100\" width=\"100px;\" alt=\"Shen Yang\"/><br /><sub><b>Shen Yang</b></sub></a><br /><a href=\"https://github.com/ent/ent/commits?author=ThinkontrolSY\" title=\"Code\">💻</a></td>\n    </tr>\n    <tr>\n      <td align=\"center\"><a href=\"https://twitter.com/sivchari\"><img src=\"https://avatars.githubusercontent.com/u/55221074?v=4?s=100\" width=\"100px;\" alt=\"sivchari\"/><br /><sub><b>sivchari</b></sub></a><br /><a href=\"https://github.com/ent/ent/commits?author=sivchari\" title=\"Code\">💻</a></td>\n      <td align=\"center\"><a href=\"https://blog.mookjp.io\"><img src=\"https://avatars.githubusercontent.com/u/1519309?v=4?s=100\" width=\"100px;\" alt=\"mook\"/><br /><sub><b>mook</b></sub></a><br /><a href=\"https://github.com/ent/ent/commits?author=mookjp\" title=\"Code\">💻</a></td>\n      <td align=\"center\"><a href=\"http://www.entiros.se\"><img src=\"https://avatars.githubusercontent.com/u/1607668?v=4?s=100\" width=\"100px;\" alt=\"heliumbrain\"/><br /><sub><b>heliumbrain</b></sub></a><br /><a href=\"https://github.com/ent/ent/commits?author=heliumbrain\" title=\"Documentation\">📖</a></td>\n      <td align=\"center\"><a href=\"https://github.com/JeremyV2014\"><img src=\"https://avatars.githubusercontent.com/u/9276415?v=4?s=100\" width=\"100px;\" alt=\"Jeremy Maxey-Vesperman\"/><br /><sub><b>Jeremy Maxey-Vesperman</b></sub></a><br /><a href=\"https://github.com/ent/ent/commits?author=JeremyV2014\" title=\"Code\">💻</a> <a href=\"https://github.com/ent/ent/commits?author=JeremyV2014\" title=\"Documentation\">📖</a></td>\n      <td align=\"center\"><a href=\"https://github.com/tankbusta\"><img src=\"https://avatars.githubusercontent.com/u/592749?v=4?s=100\" width=\"100px;\" alt=\"Christopher Schmitt\"/><br /><sub><b>Christopher Schmitt</b></sub></a><br /><a href=\"https://github.com/ent/ent/commits?author=tankbusta\" title=\"Documentation\">📖</a></td>\n      <td align=\"center\"><a href=\"https://github.com/grevych\"><img src=\"https://avatars.githubusercontent.com/u/3792003?v=4?s=100\" width=\"100px;\" alt=\"Gerardo Reyes\"/><br /><sub><b>Gerardo Reyes</b></sub></a><br /><a href=\"https://github.com/ent/ent/commits?author=grevych\" title=\"Code\">💻</a></td>\n      <td align=\"center\"><a href=\"https://github.com/naormatania\"><img src=\"https://avatars.githubusercontent.com/u/6978437?v=4?s=100\" width=\"100px;\" alt=\"Naor Matania\"/><br /><sub><b>Naor Matania</b></sub></a><br /><a href=\"https://github.com/ent/ent/commits?author=naormatania\" title=\"Code\">💻</a></td>\n    </tr>\n    <!-- ... additional rows ... -->\n    <tr>\n      <td align=\"center\"><a href=\"https://kortschak.io/\"><img src=\"https://avatars.githubusercontent.com/u/275221?v=4?s=100\" width=\"100px;\" alt=\"Dan Kortschak\"/><br /><sub><b>Dan Kortschak</b></sub></a><br /><a href=\"https://github.com/ent/ent/commits?author=kortschak\" title=\"Documentation\">📖</a></td>\n    </tr>\n  </tbody>\n  <tfoot>\n    \n  </tfoot>\n</table>\n```\n\n----------------------------------------\n\nTITLE: Applying Schema Directly with Atlas\nDESCRIPTION: Shell command to apply the schema directly to a database without generating a migration file.\nSOURCE: https://github.com/ent/ent/blob/master/doc/md/migration/composite.mdx#2025-04-22_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\natlas schema apply \\\n  --env local \\\n  --url \"postgres://postgres:pass@localhost:5432/database?search_path=public&sslmode=disable\"\n```\n\n----------------------------------------\n\nTITLE: Running Embedding Index Command\nDESCRIPTION: Command to run the index subcommand which creates embeddings for chunks in the database using OpenAI.\nSOURCE: https://github.com/ent/ent/blob/master/doc/website/blog/2025-02-12-rag-with-ent-atlas-pgvector.mdx#2025-04-22_snippet_20\n\nLANGUAGE: bash\nCODE:\n```\ngo run ./cmd/entrag index\n```\n\n----------------------------------------\n\nTITLE: Generated User Schema\nDESCRIPTION: Auto-generated Ent schema for the User entity including fields and edges definitions\nSOURCE: https://github.com/ent/ent/blob/master/doc/website/blog/2021-10-11-generating-ent-schemas-from-existing-sql-databases.md#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\ntype User struct {\n\tent.Schema\n}\n\nfunc (User) Fields() []ent.Field {\n\treturn []ent.Field{field.Int(\"id\"), field.Int(\"age\"), field.String(\"name\"), field.String(\"last_name\").Optional().Comment(\"surname\")}\n}\nfunc (User) Edges() []ent.Edge {\n\treturn []ent.Edge{edge.To(\"cars\", Car.Type)}\n}\nfunc (User) Annotations() []schema.Annotation {\n\treturn nil\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for Ent Documentation Website\nDESCRIPTION: This command installs the necessary dependencies for running the Ent documentation website locally. It requires Node.js to be installed on the system.\nSOURCE: https://github.com/ent/ent/blob/master/doc/md/writing-docs.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncd doc/website && npm install\n```\n\n----------------------------------------\n\nTITLE: SQLite Upsert with Ignore on Conflict\nDESCRIPTION: SQL statement showing upsert operation that ignores conflicts.\nSOURCE: https://github.com/ent/ent/blob/master/doc/website/blog/2021-08-05-announcing-upsert-api.md#2025-04-22_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\nINSERT INTO users (email, name) values ('rotem@entgo.io', 'Tamir, Rotem') \nON CONFLICT DO NOTHING;\n```\n\n----------------------------------------\n\nTITLE: Generating Ent Schema for User Entity\nDESCRIPTION: Uses the Ent code generator to create a new User schema file.\nSOURCE: https://github.com/ent/ent/blob/master/doc/md/tutorial-grpc-setting-up.md#2025-04-22_snippet_1\n\nLANGUAGE: console\nCODE:\n```\ngo run -mod=mod entgo.io/ent/cmd/ent new User\n```\n\n----------------------------------------\n\nTITLE: Generating Initial Ent Schema\nDESCRIPTION: Shell command to create new Ent schema files for Fridge, Compartment, and Item entities.\nSOURCE: https://github.com/ent/ent/blob/master/doc/website/blog/2021-09-10-openapi-generator.md#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ngo run -mod=mod entgo.io/ent/cmd/ent new Fridge Compartment Item\n```\n\n----------------------------------------\n\nTITLE: Initialize Go Project Structure\nDESCRIPTION: Commands to create a new Go project and set up initial Ent schemas\nSOURCE: https://github.com/ent/ent/blob/master/doc/website/blog/2021-07-29-generate-a-fully-working-go-crud-http-api-with-ent.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmkdir elk-example\ncd elk-example\ngo mod init elk-example\n```\n\n----------------------------------------\n\nTITLE: Extending TodoWhereInput for Custom Filters\nDESCRIPTION: Example of extending the TodoWhereInput in GraphQL to add a custom isCompleted filter.\nSOURCE: https://github.com/ent/ent/blob/master/doc/md/tutorial-todo-gql-filter-input.md#2025-04-22_snippet_12\n\nLANGUAGE: graphql\nCODE:\n```\nextend input TodoWhereInput {\n  isCompleted: Boolean\n}\n```\n\n----------------------------------------\n\nTITLE: Linting Migration with Atlas\nDESCRIPTION: This shell command lints the latest migration using Atlas to check for potential issues.\nSOURCE: https://github.com/ent/ent/blob/master/doc/md/versioned/06-verifying-safety.mdx#2025-04-22_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\natlas migrate lint --dev-url mysql://root:pass@localhost:3306/dev --dir file://ent/migrate/migrations --latest 1\n```\n\n----------------------------------------\n\nTITLE: Generating Assets for JSON Encode Extension in Ent\nDESCRIPTION: Command to generate necessary assets for the JSON Encode Extension in Ent. This step is required to create the extended types with JSON marshaling capabilities.\nSOURCE: https://github.com/ent/ent/blob/master/examples/jsonencode/README.md#2025-04-22_snippet_0\n\nLANGUAGE: console\nCODE:\n```\ngo generate ./...\n```\n\n----------------------------------------\n\nTITLE: Creating New Migration File with Atlas CLI\nDESCRIPTION: Command to create a new migration file using Atlas CLI. This is used for manually creating data migration files.\nSOURCE: https://github.com/ent/ent/blob/master/doc/md/data-migrations.mdx#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\natlas migrate new <migration_name> \\\n  --dir \"file://my/project/migrations\"\n```\n\n----------------------------------------\n\nTITLE: Generating Migrations with Atlas for MySQL\nDESCRIPTION: Shell command to generate a migration using Atlas for MySQL database, specifying the Ent schema location and development database URL.\nSOURCE: https://github.com/ent/ent/blob/master/doc/md/multischema-migrations.mdx#2025-04-22_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\natlas migrate diff \\\n  --to \"ent://ent/schema\" \\\n  --dev-url \"docker://mysql/8\"\n```\n\n----------------------------------------\n\nTITLE: Atlas Migrate Status Command\nDESCRIPTION: Command to check the current migration status of the database using Atlas migrate status.\nSOURCE: https://github.com/ent/ent/blob/master/doc/md/versioned/03-upgrade-prod.mdx#2025-04-22_snippet_3\n\nLANGUAGE: text\nCODE:\n```\natlas migrate status --dir file://ent/migrate/migrations --url mysql://root:pass@localhost:3306/db\n```\n\n----------------------------------------\n\nTITLE: Inspecting and Visualizing Ent Schema with Atlas\nDESCRIPTION: This command inspects and visualizes the Ent schema using Atlas. It uses a MySQL Docker container as the dev database and enables the visualization option.\nSOURCE: https://github.com/ent/ent/blob/master/entc/integration/multischema/README.md#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\natlas schema inspect \\\n  --url ent://versioned/schema \\\n  --dev-url docker://mysql/8 \\\n  -w\n```\n\n----------------------------------------\n\nTITLE: Generating Ent Schema Assets\nDESCRIPTION: Command to generate the necessary Ent schema assets and models\nSOURCE: https://github.com/ent/ent/blob/master/examples/o2o2types/README.md#2025-04-22_snippet_0\n\nLANGUAGE: console\nCODE:\n```\ngo generate ./...\n```\n\n----------------------------------------\n\nTITLE: Working with Edges in Generated Schemas\nDESCRIPTION: This snippet demonstrates how to create edge relationships in dynamically generated schemas before the related types exist. It uses a placeholder type and manually sets the edge type name in the descriptor.\nSOURCE: https://github.com/ent/ent/blob/master/doc/md/generating-ent-schemas.md#2025-04-22_snippet_7\n\nLANGUAGE: go\nCODE:\n```\ntype placeholder struct {\n    ent.Schema\n}\n\nfunc withType(e ent.Edge, typeName string) ent.Edge {\n    e.Descriptor().Type = typeName\n    return e\n}\n\nfunc newEdgeTo(edgeName, otherType string) ent.Edge {\n    // we pass a placeholder type to the edge constructor:\n    e := edge.To(edgeName, placeholder.Type)\n    // then we override the other type's name directly on the edge descriptor: \n    return withType(e, otherType)\n}\n```\n\n----------------------------------------\n\nTITLE: Directly Applying Schema with Atlas CLI\nDESCRIPTION: This command applies the schema directly to a PostgreSQL database without generating a migration file. It's useful for experimentation or setting up test databases.\nSOURCE: https://github.com/ent/ent/blob/master/doc/md/migration/trigger.mdx#2025-04-22_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\natlas schema apply \\\n  --env local \\\n  --url \"postgres://postgres:pass@localhost:5432/database?search_path=public&sslmode=disable\"\n```\n\n----------------------------------------\n\nTITLE: Defining Car Schema Fields in Go\nDESCRIPTION: Adds model and registration time fields to the Car schema.\nSOURCE: https://github.com/ent/ent/blob/master/doc/md/getting-started.mdx#2025-04-22_snippet_8\n\nLANGUAGE: go\nCODE:\n```\n// Fields of the Car.\nfunc (Car) Fields() []ent.Field {\n\treturn []ent.Field{\n\t\tfield.String(\"model\"),\n\t\tfield.Time(\"registered_at\"),\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Adding entproto Package to the Project\nDESCRIPTION: Installs the entproto package, which is used for Protobuf and gRPC integration with Ent.\nSOURCE: https://github.com/ent/ent/blob/master/doc/md/tutorial-grpc-setting-up.md#2025-04-22_snippet_2\n\nLANGUAGE: console\nCODE:\n```\ngo get -u entgo.io/contrib/entproto\n```\n\n----------------------------------------\n\nTITLE: Setting Up Ent Generate Command\nDESCRIPTION: Go generate directive to run the Ent code generation\nSOURCE: https://github.com/ent/ent/blob/master/doc/website/blog/2022-02-15-generate-rest-crud-with-ent-and-ogen.md#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\npackage ent\n\n//go:generate go run -mod=mod entc.go\n```\n\n----------------------------------------\n\nTITLE: Generated TodoWhereInput in GraphQL\nDESCRIPTION: Example of a generated TodoWhereInput in GraphQL schema. It defines input fields for filtering Todo objects, including logical operators and field predicates.\nSOURCE: https://github.com/ent/ent/blob/master/doc/md/tutorial-todo-gql-filter-input.md#2025-04-22_snippet_4\n\nLANGUAGE: graphql\nCODE:\n```\n\"\"\"\nTodoWhereInput is used for filtering Todo objects.\nInput was generated by ent.\n\"\"\"\ninput TodoWhereInput {\n  not: TodoWhereInput\n  and: [TodoWhereInput!]\n  or: [TodoWhereInput!]\n  \n  \"\"\"created_at field predicates\"\"\"\n  createdAt: Time\n  createdAtNEQ: Time\n  createdAtIn: [Time!]\n  createdAtNotIn: [Time!]\n  createdAtGT: Time\n  createdAtGTE: Time\n  createdAtLT: Time\n  createdAtLTE: Time\n  \n  \"\"\"status field predicates\"\"\"\n  status: Status\n  statusNEQ: Status\n  statusIn: [Status!]\n  statusNotIn: [Status!]\n    \n  # .. truncated ..\n}\n```\n\n----------------------------------------\n\nTITLE: Printing Ent Schema Migration Changes to stdout\nDESCRIPTION: Demonstrates how to use offline mode to print schema changes to standard output instead of directly executing them. This allows for reviewing migration SQL before applying it.\nSOURCE: https://github.com/ent/ent/blob/master/doc/md/migrate.md#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"context\"\n\t\"log\"\n\t\"os\"\n\t\n\t\"<project>/ent\"\n\t\"<project>/ent/migrate\"\n)\n\nfunc main() {\n\tclient, err := ent.Open(\"mysql\", \"root:pass@tcp(localhost:3306)/test\")\n\tif err != nil {\n\t\tlog.Fatalf(\"failed connecting to mysql: %v\", err)\n\t}\n\tdefer client.Close()\n\tctx := context.Background()\n\t// Dump migration changes to stdout.\n\tif err := client.Schema.WriteTo(ctx, os.Stdout); err != nil {\n\t\tlog.Fatalf(\"failed printing schema changes: %v\", err)\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Applying Database Migrations with Atlas\nDESCRIPTION: Executes the migration script on the local MySQL database using Atlas.\nSOURCE: https://github.com/ent/ent/blob/master/doc/website/blog/2023-02-23-simple-cms-with-ent.mdx#2025-04-22_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\natlas migrate apply --dir file://ent/migrate/migrations \\\n  --url mysql://root:pass@localhost:3306/ent\n```\n\n----------------------------------------\n\nTITLE: Generating Migrations with Atlas for MariaDB\nDESCRIPTION: Shell command to generate a migration using Atlas for MariaDB, specifying the Ent schema location and development database URL.\nSOURCE: https://github.com/ent/ent/blob/master/doc/md/multischema-migrations.mdx#2025-04-22_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\natlas migrate diff \\\n  --to \"ent://ent/schema\" \\\n  --dev-url \"docker://maria/8\"\n```\n\n----------------------------------------\n\nTITLE: Running the Global ID Migration Command\nDESCRIPTION: Command to run the entfix tool with database connection parameters to migrate from the ent_types table to the new static global ID configuration.\nSOURCE: https://github.com/ent/ent/blob/master/doc/md/globalid.mdx#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nentfix globalid --dialect mysql --dsn \"root:pass@tcp(localhost:3306)/app\" --path ./ent\n```\n\n----------------------------------------\n\nTITLE: Adding a New Document to Ent Documentation Sidebar\nDESCRIPTION: This diff snippet demonstrates how to add a new document to the sidebar configuration in the website/sidebars.js file. It shows the addition of the 'writing-docs' entry to the 'Misc' category.\nSOURCE: https://github.com/ent/ent/blob/master/doc/md/writing-docs.md#2025-04-22_snippet_3\n\nLANGUAGE: diff\nCODE:\n```\n{\n      type: 'category',\n      label: 'Misc',\n      items: [\n        'templates',\n        'graphql',\n        'sql-integration',\n        'testing',\n        'faq',\n        'generating-ent-schemas',\n        'feature-flags',\n        'translations',\n        'contributors',\n+       'writing-docs',\n        'slack'\n      ],\n      collapsed: false,\n    },\n```\n\n----------------------------------------\n\nTITLE: Atlas Checksum File Contents\nDESCRIPTION: Contents of the atlas.sum file used to ensure migration directory integrity\nSOURCE: https://github.com/ent/ent/blob/master/doc/md/versioned-migrations.mdx#2025-04-22_snippet_12\n\nLANGUAGE: text\nCODE:\n```\nh1:vj6fBSDiLEwe+jGdHQvM2NU8G70lAfXwmI+zkyrxMnk=\\n20220811114629_create_users.sql h1:wrm4K8GSucW6uMJX7XfmfoVPhyzz3vN5CnU1mam2Y4c=\n```\n\n----------------------------------------\n\nTITLE: Defining Group-User Edge Relationships in Go\nDESCRIPTION: Go code demonstrating how to define many-to-many relationships between Group and User entities\nSOURCE: https://github.com/ent/ent/blob/master/doc/md/getting-started.mdx#2025-04-22_snippet_17\n\nLANGUAGE: go\nCODE:\n```\n// Edges of the Group.\nfunc (Group) Edges() []ent.Edge {\n   return []ent.Edge{\n       edge.To(\"users\", User.Type),\n   }\n}\n```\n\nLANGUAGE: go\nCODE:\n```\n// Edges of the User.\nfunc (User) Edges() []ent.Edge {\n   return []ent.Edge{\n       edge.To(\"cars\", Car.Type),\n       // Create an inverse-edge called \"groups\" of type `Group`\n       // and reference it to the \"users\" edge (in Group schema)\n       // explicitly using the `Ref` method.\n       edge.From(\"groups\", Group.Type).\n           Ref(\"users\"),\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Running TiDB locally with Docker\nDESCRIPTION: This command starts a local TiDB server using Docker, making it accessible on port 4000.\nSOURCE: https://github.com/ent/ent/blob/master/doc/website/blog/2022-03-17-announcing-preview-support-for-tidb.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ndocker run -p 4000:4000 pingcap/tidb\n```\n\n----------------------------------------\n\nTITLE: Configuring OpenAPI Specification Metadata\nDESCRIPTION: Enhanced configuration for the OpenAPI specification including title, description, and version information.\nSOURCE: https://github.com/ent/ent/blob/master/doc/website/blog/2021-09-10-openapi-generator.md#2025-04-22_snippet_8\n\nLANGUAGE: go\nCODE:\n```\n//go:build ignore\n// +build ignore\n\npackage main\n\nimport (\n\t\"log\"\n\n\t\"entgo.io/ent/entc\"\n\t\"entgo.io/ent/entc/gen\"\n\t\"github.com/masseelch/elk\"\n)\n\nfunc main() {\n\tex, err := elk.NewExtension(\n\t\telk.GenerateSpec(\n\t\t\t\"openapi.json\",\n\t\t\t// It is a Content-Management-System ...\n\t\t\telk.SpecTitle(\"Fridge CMS\"), \n\t\t\t// You can use CommonMark syntax (https://commonmark.org/).\n\t\t\telk.SpecDescription(\"API to manage fridges and their cooled contents. **ICY!**\"), \n\t\t\telk.SpecVersion(\"0.0.1\"),\n\t\t),\n\t)\n\tif err != nil {\n\t\tlog.Fatalf(\"creating elk extension: %v\", err)\n\t}\n\terr = entc.Generate(\"./schema\", &gen.Config{}, entc.Extensions(ex))\n\tif err != nil {\n\t\tlog.Fatalf(\"running ent codegen: %v\", err)\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Generated OpenAPI Specification\nDESCRIPTION: Example of the auto-generated OpenAPI specification in JSON format\nSOURCE: https://github.com/ent/ent/blob/master/doc/website/blog/2022-02-15-generate-rest-crud-with-ent-and-ogen.md#2025-04-22_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"info\": {\n    \"title\": \"Ent Schema API\",\n    \"description\": \"This is an auto generated API description made out of an Ent schema definition\",\n    \"termsOfService\": \"\",\n    \"contact\": {},\n    \"license\": {\n      \"name\": \"\"\n    },\n    \"version\": \"0.0.0\"\n  },\n  \"paths\": {\n    \"/todos\": {\n      \"get\": {\n    [...]\n\n```\n\n----------------------------------------\n\nTITLE: Checking Migration Status\nDESCRIPTION: Command to check the status of migrations and ensure the latest migration file is pending execution.\nSOURCE: https://github.com/ent/ent/blob/master/doc/md/data-migrations.mdx#2025-04-22_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\natlas migrate status \\\n  --dir \"file://my/project/migrations\" \\\n  -u \"mysql://root:pass@localhost:3306/test\"\n```\n\n----------------------------------------\n\nTITLE: Atlas Migration Diff Command\nDESCRIPTION: Command to automatically generate migration files based on changes in Ent schema. Atlas compares the current state from executed migrations against the desired state defined in ent/schema package.\nSOURCE: https://github.com/ent/ent/blob/master/doc/md/versioned/02-auto-plan.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\natlas migrate diff --dev-url \"docker://mysql/8/dev\" \\\n  --to \"ent://ent/schema\" \\\n  --format \"{{ sql . }}\" \\\n  --schema \"public\" \\\n  migration_name\n```\n\n----------------------------------------\n\nTITLE: Executing Migration Files\nDESCRIPTION: Shell commands to execute all migration files except the latest one, which is typically the data migration file being tested.\nSOURCE: https://github.com/ent/ent/blob/master/doc/md/data-migrations.mdx#2025-04-22_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\n# Total number of files.\nnumber_of_files=$(ls ent/migrate/migrations/*.sql | wc -l)\n\n# Execute all files without the latest.\natlas migrate apply $[number_of_files-1] \\\n  --dir \"file://my/project/migrations\" \\\n  -u \"mysql://root:pass@localhost:3306/test\"\n```\n\n----------------------------------------\n\nTITLE: Altering MySQL Table Schema\nDESCRIPTION: SQL commands to add a 'phone' column to the users table and create a unique index on it.\nSOURCE: https://github.com/ent/ent/blob/master/doc/website/blog/2021-10-11-generating-ent-schemas-from-existing-sql-databases.md#2025-04-22_snippet_9\n\nLANGUAGE: sql\nCODE:\n```\nalter table users\n    add phone varchar(255) null;\n\ncreate unique index users_phone_uindex\n    on users (phone);\n```\n\n----------------------------------------\n\nTITLE: Applying Migrations with Atlas CLI\nDESCRIPTION: Command to apply migrations to the database using Atlas migrate CLI\nSOURCE: https://github.com/ent/ent/blob/master/doc/md/versioned/05-custom-migrations.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\natlas migrate apply --dir file://ent/migrate/migrations --url mysql://root:pass@localhost:3306/db\n```\n\n----------------------------------------\n\nTITLE: SQL Generated for Having with Group By\nDESCRIPTION: Shows the SQL query that is generated when using the GROUP BY with HAVING clause in the previous example.\nSOURCE: https://github.com/ent/ent/blob/master/doc/md/aggregate.md#2025-04-22_snippet_5\n\nLANGUAGE: sql\nCODE:\n```\nSELECT * FROM user GROUP BY user.role HAVING user.age = MAX(user.age)\n```\n\n----------------------------------------\n\nTITLE: Cloning the Example Repository\nDESCRIPTION: Console commands to clone the tutorial repository and run the initial GraphQL server.\nSOURCE: https://github.com/ent/ent/blob/master/doc/md/tutorial-todo-gql-node.md#2025-04-22_snippet_1\n\nLANGUAGE: console\nCODE:\n```\ngit clone git@github.com:a8m/ent-graphql-example.git\ncd ent-graphql-example \ngo run ./cmd/todo/\n```\n\n----------------------------------------\n\nTITLE: Running Tests for Following-Followers Example in Go\nDESCRIPTION: Command to execute tests for the following-followers example to verify the implementation works correctly.\nSOURCE: https://github.com/ent/ent/blob/master/examples/m2mrecur/README.md#2025-04-22_snippet_1\n\nLANGUAGE: console\nCODE:\n```\ngo test\n```\n\n----------------------------------------\n\nTITLE: Enabling Drop Operations during Ent Schema Migration\nDESCRIPTION: Example showing how to configure Ent migrations to drop columns and indexes when they're no longer needed in the schema definition. This allows for full schema synchronization.\nSOURCE: https://github.com/ent/ent/blob/master/doc/md/migrate.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"context\"\n\t\"log\"\n\t\n\t\"<project>/ent\"\n\t\"<project>/ent/migrate\"\n)\n\nfunc main() {\n\tclient, err := ent.Open(\"mysql\", \"root:pass@tcp(localhost:3306)/test\")\n\tif err != nil {\n\t\tlog.Fatalf(\"failed connecting to mysql: %v\", err)\n\t}\n\tdefer client.Close()\n\tctx := context.Background()\n\t// Run migration.\n\terr = client.Schema.Create(\n\t\tctx, \n\t\tmigrate.WithDropIndex(true),\n\t\tmigrate.WithDropColumn(true), \n\t)\n\tif err != nil {\n\t\tlog.Fatalf(\"failed creating schema resources: %v\", err)\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Completed Todos with GraphQL Filter\nDESCRIPTION: Demonstrates using a GraphQL filter to query completed todo items.\nSOURCE: https://github.com/ent/ent/blob/master/doc/website/blog/2021-07-01-automatic-graphql-filter-generation.md#2025-04-22_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\nquery QueryAllCompletedTodos {\n  todos(\n    where: {\n      status: COMPLETED,\n    },\n  ) {\n    edges {\n      node {\n        id\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Ogent Extension via Go\nDESCRIPTION: Shell command to install the ogent extension for Ent\nSOURCE: https://github.com/ent/ent/blob/master/doc/website/blog/2022-02-15-generate-rest-crud-with-ent-and-ogen.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngo get ariga.io/ogent@main\n```\n\n----------------------------------------\n\nTITLE: Generating Ent Schema Assets\nDESCRIPTION: Command to generate all necessary Ent schema code files using the go generate mechanism.\nSOURCE: https://github.com/ent/ent/blob/master/examples/o2obidi/README.md#2025-04-22_snippet_0\n\nLANGUAGE: console\nCODE:\n```\ngo generate ./...\n```\n\n----------------------------------------\n\nTITLE: Running Code Generation for gRPC Services\nDESCRIPTION: Command to re-run code generation after adding the new proto file, which will generate the necessary Go files for the external service.\nSOURCE: https://github.com/ent/ent/blob/master/doc/md/tutorial-grpc-ext-service.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ngo generate ./...\n```\n\n----------------------------------------\n\nTITLE: Inspecting Schema with Atlas CLI\nDESCRIPTION: Shell command to inspect the composite schema and print its SQL representation using Atlas CLI.\nSOURCE: https://github.com/ent/ent/blob/master/doc/md/migration/functional-indexes.mdx#2025-04-22_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\natlas schema inspect \\\n  --env local \\\n  --url env://src \\\n  --format '{{ sql . }}'\n```\n\n----------------------------------------\n\nTITLE: Generated SQL Migration Up\nDESCRIPTION: Auto-generated SQL for creating the users table with required fields and indexes.\nSOURCE: https://github.com/ent/ent/blob/master/doc/website/blog/2022-03-14-announcing-versioned-migrations.md#2025-04-22_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE `users` (`id` bigint NOT NULL AUTO_INCREMENT, `username` varchar(191) NOT NULL, PRIMARY KEY (`id`), UNIQUE INDEX `user_username` (`username`)) CHARSET utf8mb4 COLLATE utf8mb4_bin;\n```\n\n----------------------------------------\n\nTITLE: Checking Migration Status for PostgreSQL\nDESCRIPTION: Command to check migration status for PostgreSQL database using Atlas CLI\nSOURCE: https://github.com/ent/ent/blob/master/doc/md/versioned-migrations.mdx#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\natlas migrate status \\\n  --dir \"file://ent/migrate/migrations\" \\\n  --url \"postgres://postgres:pass@localhost:5432/database?search_path=public&sslmode=disable\"\n```\n\n----------------------------------------\n\nTITLE: Describing Updated MySQL Table Schema\nDESCRIPTION: SQL command to view the updated structure of the users table after adding the 'phone' column.\nSOURCE: https://github.com/ent/ent/blob/master/doc/website/blog/2021-10-11-generating-ent-schemas-from-existing-sql-databases.md#2025-04-22_snippet_10\n\nLANGUAGE: sql\nCODE:\n```\ndescribe users;\n+-----------+--------------+------+-----+---------+----------------+\n| Field     | Type         | Null | Key | Default | Extra          |\n+-----------+--------------+------+-----+---------+----------------+\n| id        | bigint       | NO   | PRI | NULL    | auto_increment |\n| age       | bigint       | NO   |     | NULL    |                |\n| name      | varchar(255) | NO   |     | NULL    |                |\n| last_name | varchar(255) | YES  |     | NULL    |                |\n| phone     | varchar(255) | YES  | UNI | NULL    |                |\n+-----------+--------------+------+-----+---------+----------------+\n```\n\n----------------------------------------\n\nTITLE: Installing Atlas CLI\nDESCRIPTION: Command to install Atlas CLI for schema management.\nSOURCE: https://github.com/ent/ent/blob/master/doc/md/migration/functional-indexes.mdx#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\natlas login\n```\n\n----------------------------------------\n\nTITLE: Running the User-Pets O2M Relation Example\nDESCRIPTION: Command to execute the test for the User-Pets one-to-many relation example.\nSOURCE: https://github.com/ent/ent/blob/master/examples/o2m2types/README.md#2025-04-22_snippet_1\n\nLANGUAGE: console\nCODE:\n```\ngo test\n```\n\n----------------------------------------\n\nTITLE: Running PostgreSQL with pgvector in Docker\nDESCRIPTION: Docker command to run a PostgreSQL instance with the pgvector extension pre-installed. This sets up the database environment for the RAG system.\nSOURCE: https://github.com/ent/ent/blob/master/doc/website/blog/2025-02-12-rag-with-ent-atlas-pgvector.mdx#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ndocker run --rm --name postgres -e POSTGRES_PASSWORD=pass -p 5432:5432 -d pgvector/pgvector:pg17\n```\n\n----------------------------------------\n\nTITLE: Defining Enum Type in Atlas HCL\nDESCRIPTION: Alternative HCL configuration for defining the same enum type using Atlas schema definition language.\nSOURCE: https://github.com/ent/ent/blob/master/doc/md/migration/enum.mdx#2025-04-22_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\nschema \"public\" {}\n\nenum \"status\" {\n  schema = schema.public\n  values = [\"active\", \"inactive\", \"pending\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Testing Custom Endpoint with curl\nDESCRIPTION: Command to test the custom endpoint for marking a Todo item as done using a PATCH request.\nSOURCE: https://github.com/ent/ent/blob/master/doc/website/blog/2022-02-15-generate-rest-crud-with-ent-and-ogen.md#2025-04-22_snippet_17\n\nLANGUAGE: shell\nCODE:\n```\n↪ curl -X PATCH localhost:8180/todos/1/done\n```\n\n----------------------------------------\n\nTITLE: Running Document Load Command\nDESCRIPTION: Command to run the load subcommand which processes markdown files from the data directory and stores them as chunks in the database.\nSOURCE: https://github.com/ent/ent/blob/master/doc/website/blog/2025-02-12-rag-with-ent-atlas-pgvector.mdx#2025-04-22_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\ngo run ./cmd/entrag load --path=data\n```\n\n----------------------------------------\n\nTITLE: Generating GraphQL Code\nDESCRIPTION: Console command to regenerate GraphQL code after configuration changes.\nSOURCE: https://github.com/ent/ent/blob/master/doc/md/tutorial-todo-gql-node.md#2025-04-22_snippet_3\n\nLANGUAGE: console\nCODE:\n```\ngo generate .\n```\n\n----------------------------------------\n\nTITLE: Re-hashing Migration Directory\nDESCRIPTION: This shell command re-hashes the migration directory after fixing the migration.\nSOURCE: https://github.com/ent/ent/blob/master/doc/md/versioned/06-verifying-safety.mdx#2025-04-22_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\natlas migrate hash --dir file://ent/migrate/migrations\n```\n\n----------------------------------------\n\nTITLE: Running Atlas Login Command\nDESCRIPTION: Shell command to log in to Atlas, which is required for accessing Pro features like Triggers support.\nSOURCE: https://github.com/ent/ent/blob/master/doc/md/migration/trigger.mdx#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\natlas login\n```\n\n----------------------------------------\n\nTITLE: Checking Migration Status for MariaDB\nDESCRIPTION: Command to check migration status for MariaDB database using Atlas CLI\nSOURCE: https://github.com/ent/ent/blob/master/doc/md/versioned-migrations.mdx#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\natlas migrate status \\\n  --dir \"file://ent/migrate/migrations\" \\\n  --url \"maria://root:pass@localhost:3306/example\"\n```\n\n----------------------------------------\n\nTITLE: PostgreSQL Error for Mismatched View Definition\nDESCRIPTION: This snippet shows the error message returned by PostgreSQL when there's a mismatch between the ent.Field definitions and the SQL definition in CREATE VIEW statement. It occurs when the view specifies more column names than actual columns.\nSOURCE: https://github.com/ent/ent/blob/master/examples/viewschema/README.md#2025-04-22_snippet_0\n\nLANGUAGE: text\nCODE:\n```\ncreate \"clean_users\" view: pq: CREATE VIEW specifies more column names than columns\n```\n\n----------------------------------------\n\nTITLE: Initializing Go Module for Ent gRPC Example\nDESCRIPTION: Creates a new directory for the project and initializes a Go module.\nSOURCE: https://github.com/ent/ent/blob/master/doc/website/blog/2021-03-18-generating-a-grpc-server-with-ent.md#2025-04-22_snippet_0\n\nLANGUAGE: console\nCODE:\n```\nmkdir ent-grpc-example\ncd ent-grpc-example\ngo mod init ent-grpc-example\n```\n\n----------------------------------------\n\nTITLE: Creating Users Table Migration\nDESCRIPTION: SQL migration file for creating a users table with an auto-incrementing primary key\nSOURCE: https://github.com/ent/ent/blob/master/doc/md/versioned-migrations.mdx#2025-04-22_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\n-- create \"users\" table\nCREATE TABLE `users` (`id` bigint NOT NULL AUTO_INCREMENT, PRIMARY KEY (`id`)) CHARSET utf8mb4 COLLATE utf8mb4_bin;\n```\n\n----------------------------------------\n\nTITLE: Applying Final Migration\nDESCRIPTION: Command to apply the final migration file, typically the data migration being tested.\nSOURCE: https://github.com/ent/ent/blob/master/doc/md/data-migrations.mdx#2025-04-22_snippet_11\n\nLANGUAGE: shell\nCODE:\n```\natlas migrate apply \\\n  --dir \"file://my/project/migrations\" \\\n  -u \"mysql://root:pass@localhost:3306/test\"\n```\n\n----------------------------------------\n\nTITLE: Inspecting Composite Schema with Atlas CLI\nDESCRIPTION: Shell command to inspect the composite schema using Atlas CLI and print its SQL representation.\nSOURCE: https://github.com/ent/ent/blob/master/doc/md/migration/extension.mdx#2025-04-22_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\natlas schema inspect \\\n  --env local \\\n  --url env://src \\\n  --format '{{ sql . }}'\n```\n\n----------------------------------------\n\nTITLE: Testing Functional Index in Go\nDESCRIPTION: Go code example demonstrating how to test the enforced uniqueness of the name field in the users table.\nSOURCE: https://github.com/ent/ent/blob/master/doc/md/migration/functional-indexes.mdx#2025-04-22_snippet_10\n\nLANGUAGE: Go\nCODE:\n```\n// Test that the unique index is enforced.\nclient.User.Create().SetName(\"Ariel\").SaveX(ctx)\nerr = client.User.Create().SetName(\"ariel\").Exec(ctx)\nrequire.EqualError(t, err, `ent: constraint failed: pq: duplicate key value violates unique constraint \"unique_name\"`)\n\n// Type-assert returned error.\nvar pqerr *pq.Error\nrequire.True(t, errors.As(err, &pqerr))\nrequire.Equal(t, `duplicate key value violates unique constraint \"unique_name\"`, pqerr.Message)\nrequire.Equal(t, user.Table, pqerr.Table)\nrequire.Equal(t, \"unique_name\", pqerr.Constraint)\nrequire.Equal(t, pq.ErrorCode(\"23505\"), pqerr.Code, \"unique violation\")\n```\n\n----------------------------------------\n\nTITLE: Updating Generate.go to Include New Proto File\nDESCRIPTION: Updates the protoc command in generate.go to include the newly created ext.proto file for code generation.\nSOURCE: https://github.com/ent/ent/blob/master/doc/md/tutorial-grpc-ext-service.md#2025-04-22_snippet_1\n\nLANGUAGE: diff\nCODE:\n```\n- //go:generate protoc -I=.. --go_out=.. --go-grpc_out=.. --go_opt=paths=source_relative --go-grpc_opt=paths=source_relative --entgrpc_out=.. --entgrpc_opt=paths=source_relative,schema_path=../../schema entpb/entpb.proto \n+ //go:generate protoc -I=.. --go_out=.. --go-grpc_out=.. --go_opt=paths=source_relative --go-grpc_opt=paths=source_relative --entgrpc_out=.. --entgrpc_opt=paths=source_relative,schema_path=../../schema entpb/entpb.proto entpb/ext.proto\n```\n\n----------------------------------------\n\nTITLE: Enabling Global IDs with CLI Flag\nDESCRIPTION: Command line flag to enable Universal-IDs support in an Ent project. This allocates unique ID ranges for each entity type.\nSOURCE: https://github.com/ent/ent/blob/master/doc/md/features.md#2025-04-22_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n--feature sql/globalid\n```\n\n----------------------------------------\n\nTITLE: Verifying CLI Application Setup with Go\nDESCRIPTION: Command to run the CLI application with help flag to verify it's working correctly.\nSOURCE: https://github.com/ent/ent/blob/master/doc/website/blog/2025-02-12-rag-with-ent-atlas-pgvector.mdx#2025-04-22_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\ngo run ./cmd/entrag --help\n```\n\n----------------------------------------\n\nTITLE: Applying Migrations via CLI\nDESCRIPTION: Shell command to apply all pending migrations to the database.\nSOURCE: https://github.com/ent/ent/blob/master/doc/website/blog/2022-03-14-announcing-versioned-migrations.md#2025-04-22_snippet_15\n\nLANGUAGE: shell\nCODE:\n```\nmigrate -source file://migrations -database 'mysql://root:pass@tcp(localhost:3306)/ent' up\n```\n\n----------------------------------------\n\nTITLE: Applying Migration with Atlas\nDESCRIPTION: Shell command to apply the generated migration to a database using Atlas.\nSOURCE: https://github.com/ent/ent/blob/master/doc/md/migration/domain.mdx#2025-04-22_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\natlas migrate apply \\\n  --env local \\\n  --url \"postgres://postgres:pass@localhost:5432/database?search_path=public&sslmode=disable\"\n```\n\n----------------------------------------\n\nTITLE: Generating Migrations with Atlas\nDESCRIPTION: Shell command to generate a migration for the schema using Atlas.\nSOURCE: https://github.com/ent/ent/blob/master/doc/md/migration/composite.mdx#2025-04-22_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\natlas migrate diff \\\n  --env local\n```\n\n----------------------------------------\n\nTITLE: Generated OpenAPI JSON for Custom Endpoint\nDESCRIPTION: Generated OpenAPI JSON specification for the custom endpoint that marks a Todo item as done.\nSOURCE: https://github.com/ent/ent/blob/master/doc/website/blog/2022-02-15-generate-rest-crud-with-ent-and-ogen.md#2025-04-22_snippet_14\n\nLANGUAGE: json\nCODE:\n```\n\"/todos/{id}/done\": {\n  \"description\": \"Mark an item as done\",\n  \"patch\": {\n    \"tags\": [\n      \"Todo\"    \n    ],\n    \"summary\": \"Marks a todo item as done.\",\n    \"operationId\": \"markDone\",\n    \"responses\": {\n      \"204\": {\n        \"description\": \"Item marked as done\"\n      }\n    }\n  },\n  \"parameters\": [\n    {\n      \"name\": \"id\",\n      \"in\": \"path\",\n      \"schema\": {\n        \"type\": \"integer\"\n      },\n      \"required\": true\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: PostgreSQL Error for Mismatched View Definition\nDESCRIPTION: This snippet shows the error message that PostgreSQL returns when a CREATE VIEW statement specifies more column names than the actual columns in the SQL definition. This happens when ent.Field definitions don't match the SQL view definition.\nSOURCE: https://github.com/ent/ent/blob/master/examples/viewcomposite/README.md#2025-04-22_snippet_0\n\nLANGUAGE: text\nCODE:\n```\ncreate \"clean_users\" view: pq: CREATE VIEW specifies more column names than columns\n```\n\n----------------------------------------\n\nTITLE: Installing SQLite Dependency\nDESCRIPTION: Command to install the required SQLite driver dependency for the project.\nSOURCE: https://github.com/ent/ent/blob/master/doc/md/tutorial-grpc-server-and-client.md#2025-04-22_snippet_1\n\nLANGUAGE: console\nCODE:\n```\ngo get -u github.com/mattn/go-sqlite3\n```\n\n----------------------------------------\n\nTITLE: Running City-Street Unique Index Example Test in Ent\nDESCRIPTION: This command executes the test for the City-Street unique index example. It verifies the correct implementation of the unique constraint on street names within each city.\nSOURCE: https://github.com/ent/ent/blob/master/examples/edgeindex/README.md#2025-04-22_snippet_1\n\nLANGUAGE: console\nCODE:\n```\ngo test\n```\n\n----------------------------------------\n\nTITLE: Configuring MySQL Docker Container\nDESCRIPTION: Docker compose configuration for setting up a MySQL 8 container for testing entimport\nSOURCE: https://github.com/ent/ent/blob/master/doc/website/blog/2021-10-11-generating-ent-schemas-from-existing-sql-databases.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nversion: \"3.7\"\n\nservices:\n\n  mysql8:\n    platform: linux/amd64\n    image: mysql\n    environment:\n      MYSQL_DATABASE: entimport\n      MYSQL_ROOT_PASSWORD: pass\n    healthcheck:\n      test: mysqladmin ping -ppass\n    ports:\n      - \"3306:3306\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Composite Schema in Atlas\nDESCRIPTION: HCL configuration for Atlas to use a composite schema including custom types and Ent schema.\nSOURCE: https://github.com/ent/ent/blob/master/doc/md/migration/domain.mdx#2025-04-22_snippet_4\n\nLANGUAGE: hcl\nCODE:\n```\ndata \"composite_schema\" \"app\" {\n  # Load first custom types first.\n  schema \"public\" {\n    url = \"file://schema.sql\"\n  }\n  # Second, load the Ent schema.\n  schema \"public\" {\n    url = \"ent://ent/schema\"\n  }\n}\n\nenv \"local\" {\n  src = data.composite_schema.app.url\n  dev = \"docker://postgres/15/dev?search_path=public\"\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Latest Ent Version\nDESCRIPTION: Command to update Ent to the latest master version using go get.\nSOURCE: https://github.com/ent/ent/blob/master/doc/website/blog/2022-03-14-announcing-versioned-migrations.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngo get -u entgo.io/ent@master\n```\n\n----------------------------------------\n\nTITLE: Starting Database Containers for Integration Testing\nDESCRIPTION: Docker Compose command to start all required database containers for integration testing\nSOURCE: https://github.com/ent/ent/blob/master/CONTRIBUTING.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ndocker-compose -f docker-compose.yaml up -d\n```\n\n----------------------------------------\n\nTITLE: Running MySQL Container for Development\nDESCRIPTION: Starts a Docker container running MySQL for local development.\nSOURCE: https://github.com/ent/ent/blob/master/doc/website/blog/2023-02-23-simple-cms-with-ent.mdx#2025-04-22_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\ndocker run --rm --name entdb -d -p 3306:3306 -e MYSQL_DATABASE=ent -e MYSQL_ROOT_PASSWORD=pass mysql:8\n```\n\n----------------------------------------\n\nTITLE: Querying JSON Data in MySQL\nDESCRIPTION: This SQL snippet demonstrates how to query JSON data using JSON Path expressions in MySQL.\nSOURCE: https://github.com/ent/ent/blob/master/doc/website/blog/2022-10-10-json-append.mdx#2025-04-22_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nselect c->'$.hello' as greeting from t where c->'$.hello' = 'world';\n```\n\n----------------------------------------\n\nTITLE: Configuring Ent Generate Command in Go\nDESCRIPTION: This snippet shows how to configure the generate.go file to execute the entc.go file for code generation.\nSOURCE: https://github.com/ent/ent/blob/master/doc/md/graphql.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\npackage ent\n\n//go:generate go run -mod=mod entc.go\n```\n\n----------------------------------------\n\nTITLE: Creating PostgreSQL Enum Type in SQL\nDESCRIPTION: SQL definition of a status enum type with three possible values.\nSOURCE: https://github.com/ent/ent/blob/master/doc/md/migration/enum.mdx#2025-04-22_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TYPE status AS ENUM ('active', 'inactive', 'pending');\n```\n\n----------------------------------------\n\nTITLE: Running Ent Documentation Website in Development Mode\nDESCRIPTION: This command starts the Ent documentation website in development mode, allowing for local testing and preview of changes.\nSOURCE: https://github.com/ent/ent/blob/master/doc/md/writing-docs.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ncd doc/website && npm start\n```\n\n----------------------------------------\n\nTITLE: Initializing Go Module for Ent gRPC Example\nDESCRIPTION: Creates a new directory for the Ent gRPC example project, navigates into it, and initializes a new Go module.\nSOURCE: https://github.com/ent/ent/blob/master/doc/md/tutorial-grpc-setting-up.md#2025-04-22_snippet_0\n\nLANGUAGE: console\nCODE:\n```\nmkdir ent-grpc-example\ncd ent-grpc-example\ngo mod init ent-grpc-example\n```\n\n----------------------------------------\n\nTITLE: Initializing New Entity Schemas in Ent\nDESCRIPTION: Command to create new schema templates for entities. This example creates two schema files: 'user.go' and 'pet.go' in the ent/schema directory.\nSOURCE: https://github.com/ent/ent/blob/master/doc/md/code-gen.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngo run -mod=mod entgo.io/ent/cmd/ent new User Pet\n```\n\n----------------------------------------\n\nTITLE: Running Tests for Linked-List Example in Go\nDESCRIPTION: This command executes the tests for the linked-list example. It runs all tests in the current package using the go test tool.\nSOURCE: https://github.com/ent/ent/blob/master/examples/o2orecur/README.md#2025-04-22_snippet_1\n\nLANGUAGE: console\nCODE:\n```\ngo test\n```\n\n----------------------------------------\n\nTITLE: Verifying Database Content with PostgreSQL Query\nDESCRIPTION: Command to check the number of chunks loaded into the database using PostgreSQL.\nSOURCE: https://github.com/ent/ent/blob/master/doc/website/blog/2025-02-12-rag-with-ent-atlas-pgvector.mdx#2025-04-22_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\ndocker exec -it postgres psql -U postgres -d postgres -c \"SELECT COUNT(*) FROM chunks;\"\n```\n\n----------------------------------------\n\nTITLE: Generating Ent Code with Go Generate\nDESCRIPTION: This command regenerates the Ent code after making changes to the schema.\nSOURCE: https://github.com/ent/ent/blob/master/doc/md/versioned/04-new-migration.mdx#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ngo generate ./...\n```\n\n----------------------------------------\n\nTITLE: Starting Dev Database Docker Container\nDESCRIPTION: Shell command to start a MySQL Docker container for use as a development database with Atlas.\nSOURCE: https://github.com/ent/ent/blob/master/doc/md/versioned/07-programmatically.mdx#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ndocker run --rm --name atlas-db-dev -d -p 3306:3306 -e MYSQL_DATABASE=dev -e MYSQL_ROOT_PASSWORD=pass mysql:8\n```\n\n----------------------------------------\n\nTITLE: SQL Down Migration for Removing Admin Data\nDESCRIPTION: SQL commands to remove seeded admin data in correct order.\nSOURCE: https://github.com/ent/ent/blob/master/doc/website/blog/2022-03-14-announcing-versioned-migrations.md#2025-04-22_snippet_14\n\nLANGUAGE: sql\nCODE:\n```\nDELETE FROM `group_users` where `group_id` = 1 and `user_id` = 1;\nDELETE FROM `groups` where id = 1;\nDELETE FROM `users` where id = 1;\n```\n\n----------------------------------------\n\nTITLE: Running Ent Relationship Tests\nDESCRIPTION: Command to execute the test cases that demonstrate the bidirectional spouse relationship functionality.\nSOURCE: https://github.com/ent/ent/blob/master/examples/o2obidi/README.md#2025-04-22_snippet_1\n\nLANGUAGE: console\nCODE:\n```\ngo test\n```\n\n----------------------------------------\n\nTITLE: Successful Todo Creation with curl\nDESCRIPTION: Command to successfully create a Todo item with a request body after fixing the schema issues.\nSOURCE: https://github.com/ent/ent/blob/master/doc/website/blog/2022-02-15-generate-rest-crud-with-ent-and-ogen.md#2025-04-22_snippet_11\n\nLANGUAGE: shell\nCODE:\n```\n↪ curl -X POST -H \"Content-Type: application/json\" -d '{\"title\":\"Give ogen and ogent a Star on GitHub\"}'  localhost:8080/todos\n{\n  \"id\": 1,\n  \"title\": \"Give ogen and ogent a Star on GitHub\",\n  \"done\": false\n}\n```\n\n----------------------------------------\n\nTITLE: Applying Migrations with Atlas CLI\nDESCRIPTION: Shell command to apply the generated migration to a Postgres database using Atlas CLI.\nSOURCE: https://github.com/ent/ent/blob/master/doc/md/migration/extension.mdx#2025-04-22_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\natlas migrate apply \\\n  --env local \\\n  --url \"postgres://postgres:pass@localhost:5432/database?search_path=public&sslmode=disable\"\n```\n\n----------------------------------------\n\nTITLE: Generating ent Code\nDESCRIPTION: Runs go generate to create ent-related files based on the schema.\nSOURCE: https://github.com/ent/ent/blob/master/doc/md/getting-started.mdx#2025-04-22_snippet_3\n\nLANGUAGE: console\nCODE:\n```\ngo generate ./ent\n```\n\n----------------------------------------\n\nTITLE: Inserting JSON Data into MySQL Table\nDESCRIPTION: This SQL snippet shows how to insert a JSON object into a MySQL table with a JSON column.\nSOURCE: https://github.com/ent/ent/blob/master/doc/website/blog/2022-10-10-json-append.mdx#2025-04-22_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nINSERT INTO t1 VALUES('{\"key1\": \"value1\", \"key2\": \"value2\"}');\n```\n\n----------------------------------------\n\nTITLE: Installing Atlas CLI via Curl\nDESCRIPTION: This command downloads and installs the latest version of Atlas CLI using a shell script. It's a quick way to get Atlas set up on your system.\nSOURCE: https://github.com/ent/ent/blob/master/doc/website/blog/2023-08-13-visualize-with-atlas.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncurl -sSfL https://atlasgo.io/install.sh | sh\n```\n\n----------------------------------------\n\nTITLE: Running Tree Node Tests\nDESCRIPTION: Command to execute tests for the tree node implementation\nSOURCE: https://github.com/ent/ent/blob/master/examples/o2mrecur/README.md#2025-04-22_snippet_1\n\nLANGUAGE: console\nCODE:\n```\ngo test\n```\n\n----------------------------------------\n\nTITLE: Creating New Migration File with Atlas CLI\nDESCRIPTION: Command to create a new migration file for seeding users data using Atlas migrate CLI\nSOURCE: https://github.com/ent/ent/blob/master/doc/md/versioned/05-custom-migrations.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\natlas migrate new seed_users --dir file://ent/migrate/migrations\n```\n\n----------------------------------------\n\nTITLE: Running the Optimistic Locking Example Test\nDESCRIPTION: Command to execute the test suite that demonstrates the optimistic locking mechanism in action. The tests verify that version conflicts are properly detected and handled.\nSOURCE: https://github.com/ent/ent/blob/master/examples/version/README.md#2025-04-22_snippet_1\n\nLANGUAGE: console\nCODE:\n```\ngo test\n```\n\n----------------------------------------\n\nTITLE: Configuring Atlas with Composite Schema\nDESCRIPTION: HCL configuration for Atlas to use a composite schema including custom types and Ent schema.\nSOURCE: https://github.com/ent/ent/blob/master/doc/md/migration/composite.mdx#2025-04-22_snippet_5\n\nLANGUAGE: hcl\nCODE:\n```\ndata \"composite_schema\" \"app\" {\n  # Load first custom types first.\n  schema \"public\" {\n    url = \"file://schema.sql\"\n  }\n  # Second, load the Ent schema.\n  schema \"public\" {\n    url = \"ent://ent/schema\"\n  }\n}\n\nenv \"local\" {\n  src = data.composite_schema.app.url\n  dev = \"docker://postgres/15/dev?search_path=public\"\n}\n```\n\n----------------------------------------\n\nTITLE: Baselining Existing Database with Atlas Migrate Apply\nDESCRIPTION: Command to baseline an existing database using Atlas migrate apply with the --baseline flag, specifying the current version.\nSOURCE: https://github.com/ent/ent/blob/master/doc/md/versioned/03-upgrade-prod.mdx#2025-04-22_snippet_2\n\nLANGUAGE: text\nCODE:\n```\natlas migrate apply --dir file://ent/migrate/migrations --url mysql://root:pass@localhost:3306/db --baseline 20221114165732\n```\n\n----------------------------------------\n\nTITLE: Running Example Tests\nDESCRIPTION: Command to execute the test cases demonstrating the one-to-one relationship\nSOURCE: https://github.com/ent/ent/blob/master/examples/o2o2types/README.md#2025-04-22_snippet_1\n\nLANGUAGE: console\nCODE:\n```\ngo test\n```\n\n----------------------------------------\n\nTITLE: Installing entoas Extension for Ent in Go\nDESCRIPTION: This snippet shows how to install the entoas extension using the go get command. It's a prerequisite for using entoas in an Ent project.\nSOURCE: https://github.com/ent/ent/blob/master/doc/website/blog/2021-11-15-announcing-entoas.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngo get entgo.io/contrib/entoas\n```\n\n----------------------------------------\n\nTITLE: Implementing Enum Field in Ent Schema\nDESCRIPTION: Go code showing how to define an enum field in Ent schema that uses the PostgreSQL native enum type.\nSOURCE: https://github.com/ent/ent/blob/master/doc/md/migration/enum.mdx#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\n// Fields of the User.\nfunc (User) Fields() []ent.Field {\n\treturn []ent.Field{\n\t\tfield.Enum(\"status\").\n\t\t\tValues(\"active\", \"inactive\", \"pending\").\n\t\t\tSchemaType(map[string]string{\n\t\t\t\tdialect.Postgres: \"status\",\n\t\t\t}),\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Installing sqlcomment Package\nDESCRIPTION: This bash command installs the sqlcomment package using the go get command.\nSOURCE: https://github.com/ent/ent/blob/master/doc/website/blog/2021-10-19-sqlcomment-support-for-ent.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngo get ariga.io/sqlcomment\n```\n\n----------------------------------------\n\nTITLE: Displaying Generated OAS Server Directory Structure\nDESCRIPTION: This shell command shows the directory structure of the generated OAS server code in the ent/http folder.\nSOURCE: https://github.com/ent/ent/blob/master/doc/website/blog/2021-09-10-openapi-generator.md#2025-04-22_snippet_12\n\nLANGUAGE: shell\nCODE:\n```\n» tree ent/http\nent/http\n├── create.go\n├── delete.go\n├── easyjson.go\n├── handler.go\n├── list.go\n├── read.go\n├── relations.go\n├── request.go\n├── response.go\n└── update.go\n\n0 directories, 10 files\n```\n\n----------------------------------------\n\nTITLE: Logging into Atlas\nDESCRIPTION: Shell command to log into Atlas Cloud, which is necessary for using the multi-schema migration feature.\nSOURCE: https://github.com/ent/ent/blob/master/doc/md/multischema-migrations.mdx#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ atlas login a8m\n//highlight-next-line-info\nYou are now connected to \"a8m\" on Atlas Cloud.\n```\n\n----------------------------------------\n\nTITLE: Basic Protobuf Message Definition\nDESCRIPTION: Simple Protobuf message definition for a User entity with name and email address fields.\nSOURCE: https://github.com/ent/ent/blob/master/doc/website/blog/2021-05-04-announcing-schema-imports.md#2025-04-22_snippet_0\n\nLANGUAGE: protobuf\nCODE:\n```\nsyntax = \"proto3\";\n\npackage entpb;\n\noption go_package = \"github.com/yourorg/project/ent/proto/entpb\";\n\nmessage User {\n  string name = 1;\n  string email_address = 2;\n}\n```\n\n----------------------------------------\n\nTITLE: SQL Migration for Adding User Title\nDESCRIPTION: This SQL snippet shows the generated migration to add the 'title' column to the 'users' table.\nSOURCE: https://github.com/ent/ent/blob/master/doc/md/versioned/04-new-migration.mdx#2025-04-22_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\n-- modify \"users\" table\nALTER TABLE `users` ADD COLUMN `title` varchar(255) NULL;\n```\n\n----------------------------------------\n\nTITLE: Generating Tree Node Assets with Go Generate\nDESCRIPTION: Command to generate required Ent framework assets for the tree node structure\nSOURCE: https://github.com/ent/ent/blob/master/examples/o2mrecur/README.md#2025-04-22_snippet_0\n\nLANGUAGE: console\nCODE:\n```\ngo generate ./...\n```\n\n----------------------------------------\n\nTITLE: Checking Migration Status for SQLite\nDESCRIPTION: Command to check migration status for SQLite database using Atlas CLI\nSOURCE: https://github.com/ent/ent/blob/master/doc/md/versioned-migrations.mdx#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\natlas migrate status \\\n  --dir \"file://ent/migrate/migrations\" \\\n  --url \"sqlite://file.db?_fk=1\"\n```\n\n----------------------------------------\n\nTITLE: Running Basic Integration Tests\nDESCRIPTION: Commands to start Docker containers (excluding Gremlin) and run integration tests\nSOURCE: https://github.com/ent/ent/blob/master/entc/integration/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndocker-compose up -d --scale gremlin=0\ngo test .\n```\n\n----------------------------------------\n\nTITLE: Regenerating Template Assets in Ent\nDESCRIPTION: Command to regenerate assets after editing files in entc/gen/template or entc/load/template directories\nSOURCE: https://github.com/ent/ent/blob/master/entc/integration/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngo generate ./...\n```\n\n----------------------------------------\n\nTITLE: Configuring Atlas with Composite Schema\nDESCRIPTION: HCL configuration for Atlas defining a composite schema that includes both Ent schema and functional indexes.\nSOURCE: https://github.com/ent/ent/blob/master/doc/md/migration/functional-indexes.mdx#2025-04-22_snippet_4\n\nLANGUAGE: HCL\nCODE:\n```\ndata \"composite_schema\" \"app\" {\n  # Load the ent schema first with all tables.\n  schema \"public\" {\n    url = \"ent://ent/schema\"\n  }\n  # Then, load the functional indexes.\n  schema \"public\" {\n    url = \"file://schema.sql\"\n  }\n}\n\nenv \"local\" {\n  src = data.composite_schema.app.url\n  dev = \"docker://postgres/15/dev?search_path=public\"\n}\n```\n\n----------------------------------------\n\nTITLE: Running the TiDB Hello World example\nDESCRIPTION: This shell command runs the Go program that demonstrates Ent with TiDB integration.\nSOURCE: https://github.com/ent/ent/blob/master/doc/website/blog/2022-03-17-announcing-preview-support-for-tidb.md#2025-04-22_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\ngo run main.go\n```\n\n----------------------------------------\n\nTITLE: Generated OpenAPI Specification JSON Snippet\nDESCRIPTION: This is a snippet of the generated OpenAPI Specification JSON file. It shows the basic structure of the generated API documentation.\nSOURCE: https://github.com/ent/ent/blob/master/doc/website/blog/2021-11-15-announcing-entoas.md#2025-04-22_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"info\": {\n    \"title\": \"Ent Schema API\",\n    \"description\": \"This is an auto generated API description made out of an Ent schema definition\",\n    \"termsOfService\": \"\",\n    \"contact\": {},\n    \"license\": {\n      \"name\": \"\"\n    },\n    \"version\": \"0.0.0\"\n  },\n  \"paths\": {\n    \"/compartments\": {\n      \"get\": {\n    [...]\n\n```\n\n----------------------------------------\n\nTITLE: Querying Node in GraphQL\nDESCRIPTION: Example of a GraphQL query using the Node interface to fetch a specific object by ID.\nSOURCE: https://github.com/ent/ent/blob/master/doc/md/tutorial-todo-gql-node.md#2025-04-22_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\n{\n    node(id: \"4\") {\n        id\n       ... on User {\n            name\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Atlas on macOS and Linux\nDESCRIPTION: This command downloads and installs the latest version of Atlas using a shell script.\nSOURCE: https://github.com/ent/ent/blob/master/doc/md/components/_installation_instructions.mdx#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncurl -sSf https://atlasgo.sh | sh\n```\n\n----------------------------------------\n\nTITLE: Generating Ent Assets\nDESCRIPTION: Command to generate required Ent framework assets and schemas\nSOURCE: https://github.com/ent/ent/blob/master/examples/privacytenant/README.md#2025-04-22_snippet_0\n\nLANGUAGE: console\nCODE:\n```\ngo generate ./...\n```\n\n----------------------------------------\n\nTITLE: Recomputing Migration Directory Checksums\nDESCRIPTION: Command to recompute the hashes in the atlas.sum file after intentional manual changes to migration files, bringing the integrity file back in sync.\nSOURCE: https://github.com/ent/ent/blob/master/doc/md/versioned-migrations.mdx#2025-04-22_snippet_19\n\nLANGUAGE: shell\nCODE:\n```\n# Recompute the sum file.\natlas migrate hash --dir file://<path-to-your-migration-directory>\n```\n\n----------------------------------------\n\nTITLE: Team A Migration SQL File Example\nDESCRIPTION: A SQL migration file created by Team A that creates a 'users' table with a team-specific column. This demonstrates how teams might create parallel migrations with potential conflicts.\nSOURCE: https://github.com/ent/ent/blob/master/doc/md/versioned-migrations.mdx#2025-04-22_snippet_13\n\nLANGUAGE: sql\nCODE:\n```\n-- create \"users\" table\nCREATE TABLE `users` (\n    `id` bigint NOT NULL AUTO_INCREMENT,\n    // highlight-start\n    `team_a_col` INTEGER NOT NULL,\n    // highlight-end\n    PRIMARY KEY (`id`)\n) CHARSET utf8mb4 COLLATE utf8mb4_bin;\n```\n\n----------------------------------------\n\nTITLE: Generated Ent Schema\nDESCRIPTION: The resulting Ent schema code generated from the Protobuf message definition, including field definitions.\nSOURCE: https://github.com/ent/ent/blob/master/doc/website/blog/2021-05-04-announcing-schema-imports.md#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\npackage schema\n\nimport (\n\t\"entgo.io/ent\"\n\t\"entgo.io/ent/schema/field\"\n)\n\ntype User struct {\n\tent.Schema\n}\n\nfunc (User) Fields() []ent.Field {\n\treturn []ent.Field{field.String(\"name\"), field.String(\"email_address\")}\n}\nfunc (User) Edges() []ent.Edge {\n\treturn nil\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Go Module for Blog Application\nDESCRIPTION: Creates a new Go module for the blog application project.\nSOURCE: https://github.com/ent/ent/blob/master/doc/website/blog/2023-02-23-simple-cms-with-ent.mdx#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ngo mod init github.com/rotemtam/ent-blog-example\n```\n\n----------------------------------------\n\nTITLE: Protoc Command for Ent Schema Generation\nDESCRIPTION: Shell command to invoke protoc with the ent plugin for generating Ent schemas from Protobuf definitions.\nSOURCE: https://github.com/ent/ent/blob/master/doc/website/blog/2021-05-04-announcing-schema-imports.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nprotoc -I=proto/ --ent_out=. --ent_opt=schemadir=./schema proto/entpb/user.proto\n```\n\n----------------------------------------\n\nTITLE: Installing Testify Library for Go Testing\nDESCRIPTION: Command to install the testify library, which provides assertion utilities for writing Go tests.\nSOURCE: https://github.com/ent/ent/blob/master/doc/website/blog/2023-02-23-simple-cms-with-ent.mdx#2025-04-22_snippet_16\n\nLANGUAGE: shell\nCODE:\n```\ngo get github.com/stretchr/testify\n```\n\n----------------------------------------\n\nTITLE: Defining Domain Type in SQL\nDESCRIPTION: SQL code to create a domain type for US postal codes.\nSOURCE: https://github.com/ent/ent/blob/master/doc/md/migration/domain.mdx#2025-04-22_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nCREATE DOMAIN us_postal_code AS TEXT\nCHECK(\n   VALUE ~ '^\\d{5}$'\n   OR VALUE ~ '^\\d{5}-\\d{4}$'\n);\n```\n\n----------------------------------------\n\nTITLE: Generating Ent Schemas\nDESCRIPTION: Command to generate the initial Pet, User and Group schemas using the Ent CLI.\nSOURCE: https://github.com/ent/ent/blob/master/examples/README.md#2025-04-22_snippet_0\n\nLANGUAGE: console\nCODE:\n```\nent new Pet User Group\n```\n\n----------------------------------------\n\nTITLE: Opening Blob Storage Buckets (Go)\nDESCRIPTION: Demonstrates opening different types of blob storage buckets using the gocloud.dev/blob package.\nSOURCE: https://github.com/ent/ent/blob/master/doc/website/blog/2021-11-1-sync-to-external-data-systems-using-hooks.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\n// Open an in-memory bucket. \nif bucket, err := blob.OpenBucket(ctx, \"mem://photos/\"); err != nil {\n\tlog.Fatal(\"failed opening in-memory bucket:\", err)\n}\n\n// Open an S3 bucket named photos.\nif bucket, err := blob.OpenBucket(ctx, \"s3://photos\"); err != nil {\n\tlog.Fatal(\"failed opening s3 bucket:\", err)\n}\n\n// Open a bucket named photos in Google Cloud Storage.\nif bucket, err := blob.OpenBucket(ctx, \"gs://my-bucket\"); err != nil {\n\tlog.Fatal(\"failed opening gs bucket:\", err)\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering Contributor List in HTML\nDESCRIPTION: This HTML snippet displays a table of contributors to the Ent project. Each cell contains a contributor's avatar, name, and contribution type icons. The table is structured with multiple rows and columns to organize the contributors.\nSOURCE: https://github.com/ent/ent/blob/master/doc/md/contributors.md#2025-04-22_snippet_1\n\nLANGUAGE: HTML\nCODE:\n```\n<td align=\"center\"><a href=\"https://danielenman.com/\"><img src=\"https://avatars.githubusercontent.com/u/432487?v=4?s=100\" width=\"100px;\" alt=\"Dan Enman\"/><br /><sub><b>Dan Enman</b></sub></a><br /><a href=\"https://github.com/ent/ent/commits?author=enmand\" title=\"Code\">💻</a></td>\n<td align=\"center\"><a href=\"http://www.l2junity.org/\"><img src=\"https://avatars.githubusercontent.com/u/2185291?v=4?s=100\" width=\"100px;\" alt=\"Rumen Nikiforov\"/><br /><sub><b>Rumen Nikiforov</b></sub></a><br /><a href=\"https://github.com/ent/ent/commits?author=UnAfraid\" title=\"Code\">💻</a></td>\n<td align=\"center\"><a href=\"https://wener.me\"><img src=\"https://avatars.githubusercontent.com/u/1777211?v=4?s=100\" width=\"100px;\" alt=\"陈杨文\"/><br /><sub><b>陈杨文</b></sub></a><br /><a href=\"https://github.com/ent/ent/commits?author=wenerme\" title=\"Code\">💻</a></td>\n<td align=\"center\"><a href=\"https://djwong.net\"><img src=\"https://avatars.githubusercontent.com/u/1635441?v=4?s=100\" width=\"100px;\" alt=\"Qiaosen (Joeson) Huang\"/><br /><sub><b>Qiaosen (Joeson) Huang</b></sub></a><br /><a href=\"https://github.com/ent/ent/issues?q=author%3Ajoesonw\" title=\"Bug reports\">🐛</a></td>\n<td align=\"center\"><a href=\"https://github.com/davebehr1\"><img src=\"https://avatars.githubusercontent.com/u/16716239?v=4?s=100\" width=\"100px;\" alt=\"AlonDavidBehr\"/><br /><sub><b>AlonDavidBehr</b></sub></a><br /><a href=\"https://github.com/ent/ent/commits?author=davebehr1\" title=\"Code\">💻</a> <a href=\"https://github.com/ent/ent/pulls?q=is%3Apr+reviewed-by%3Adavebehr1\" title=\"Reviewed Pull Requests\">👀</a></td>\n</tr>\n<tr>\n<td align=\"center\"><a href=\"http://duglaser.dev\"><img src=\"https://avatars.githubusercontent.com/u/50506482?v=4?s=100\" width=\"100px;\" alt=\"DuGlaser\"/><br /><sub><b>DuGlaser</b></sub></a><br /><a href=\"https://github.com/ent/ent/commits?author=DuGlaser\" title=\"Documentation\">📖</a></td>\n<td align=\"center\"><a href=\"https://github.com/shanna\"><img src=\"https://avatars.githubusercontent.com/u/28489?v=4?s=100\" width=\"100px;\" alt=\"Shane Hanna\"/><br /><sub><b>Shane Hanna</b></sub></a><br /><a href=\"https://github.com/ent/ent/commits?author=shanna\" title=\"Documentation\">📖</a></td>\n<td align=\"center\"><a href=\"https://www.linkedin.com/in/mahmud2011\"><img src=\"https://avatars.githubusercontent.com/u/5278142?v=4?s=100\" width=\"100px;\" alt=\"Mahmudul Haque\"/><br /><sub><b>Mahmudul Haque</b></sub></a><br /><a href=\"https://github.com/ent/ent/commits?author=mahmud2011\" title=\"Code\">💻</a></td>\n<td align=\"center\"><a href=\"http://blog.scaleprocess.net\"><img src=\"https://avatars.githubusercontent.com/u/862607?v=4?s=100\" width=\"100px;\" alt=\"Benjamin Bourgeais\"/><br /><sub><b>Benjamin Bourgeais</b></sub></a><br /><a href=\"https://github.com/ent/ent/commits?author=sywesk\" title=\"Code\">💻</a></td>\n<td align=\"center\"><a href=\"https://about.8ay.ac/\"><img src=\"https://avatars.githubusercontent.com/u/29266382?v=4?s=100\" width=\"100px;\" alt=\"8ayac(Yoshinori Hayashi)\"/><br /><sub><b>8ayac(Yoshinori Hayashi)</b></sub></a><br /><a href=\"https://github.com/ent/ent/commits?author=8ayac\" title=\"Documentation\">📖</a></td>\n<td align=\"center\"><a href=\"https://github.com/y-yagi\"><img src=\"https://avatars.githubusercontent.com/u/987638?v=4?s=100\" width=\"100px;\" alt=\"y-yagi\"/><br /><sub><b>y-yagi</b></sub></a><br /><a href=\"https://github.com/ent/ent/commits?author=y-yagi\" title=\"Documentation\">📖</a></td>\n<td align=\"center\"><a href=\"https://github.com/Sacro\"><img src=\"https://avatars.githubusercontent.com/u/2659869?v=4?s=100\" width=\"100px;\" alt=\"Ben Woodward\"/><br /><sub><b>Ben Woodward</b></sub></a><br /><a href=\"https://github.com/ent/ent/commits?author=Sacro\" title=\"Code\">💻</a></td>\n</tr>\n<tr>\n<td align=\"center\"><a href=\"https://github.com/wzyjerry\"><img src=\"https://avatars.githubusercontent.com/u/11435169?v=4?s=100\" width=\"100px;\" alt=\"WzyJerry\"/><br /><sub><b>WzyJerry</b></sub></a><br /><a href=\"https://github.com/ent/ent/commits?author=wzyjerry\" title=\"Code\">💻</a></td>\n<td align=\"center\"><a href=\"https://github.com/tarrencev\"><img src=\"https://avatars.githubusercontent.com/u/4740651?v=4?s=100\" width=\"100px;\" alt=\"Tarrence van As\"/><br /><sub><b>Tarrence van As</b></sub></a><br /><a href=\"https://github.com/ent/ent/commits?author=tarrencev\" title=\"Documentation\">📖</a> <a href=\"https://github.com/ent/ent/commits?author=tarrencev\" title=\"Code\">💻</a></td>\n<td align=\"center\"><a href=\"https://mo7ka.com\"><img src=\"https://avatars.githubusercontent.com/u/32859963?v=4?s=100\" width=\"100px;\" alt=\"Yuya Sumie\"/><br /><sub><b>Yuya Sumie</b></sub></a><br /><a href=\"https://github.com/ent/ent/commits?author=MONAKA0721\" title=\"Documentation\">📖</a></td>\n<td align=\"center\"><a href=\"http://jasminek.net\"><img src=\"https://avatars.githubusercontent.com/u/7853732?v=4?s=100\" width=\"100px;\" alt=\"Michal Mazurek\"/><br /><sub><b>Michal Mazurek</b></sub></a><br /><a href=\"https://github.com/ent/ent/commits?author=akfaew\" title=\"Code\">💻</a></td>\n<td align=\"center\"><a href=\"https://github.com/nmemoto\"><img src=\"https://avatars.githubusercontent.com/u/1522332?v=4?s=100\" width=\"100px;\" alt=\"Takafumi Umemoto\"/><br /><sub><b>Takafumi Umemoto</b></sub></a><br /><a href=\"https://github.com/ent/ent/commits?author=nmemoto\" title=\"Documentation\">📖</a></td>\n<td align=\"center\"><a href=\"http://www.linkedin.com/in/khadija-sidhpuri-87709316a\"><img src=\"https://avatars.githubusercontent.com/u/59063821?v=4?s=100\" width=\"100px;\" alt=\"Khadija Sidhpuri\"/><br /><sub><b>Khadija Sidhpuri</b></sub></a><br /><a href=\"https://github.com/ent/ent/commits?author=squarebat\" title=\"Code\">💻</a></td>\n<td align=\"center\"><a href=\"https://github.com/neel229\"><img src=\"https://avatars.githubusercontent.com/u/53475167?v=4?s=100\" width=\"100px;\" alt=\"Neel Modi\"/><br /><sub><b>Neel Modi</b></sub></a><br /><a href=\"https://github.com/ent/ent/commits?author=neel229\" title=\"Code\">💻</a></td>\n</tr>\n<tr>\n<td align=\"center\"><a href=\"https://ie.linkedin.com/in/boris-shomodjvarac-51970879\"><img src=\"https://avatars.githubusercontent.com/u/304768?v=4?s=100\" width=\"100px;\" alt=\"Boris Shomodjvarac\"/><br /><sub><b>Boris Shomodjvarac</b></sub></a><br /><a href=\"https://github.com/ent/ent/commits?author=shomodj\" title=\"Documentation\">📖</a></td>\n<td align=\"center\"><a href=\"https://github.com/sadmansakib\"><img src=\"https://avatars.githubusercontent.com/u/17023844?v=4?s=100\" width=\"100px;\" alt=\"Sadman Sakib\"/><br /><sub><b>Sadman Sakib</b></sub></a><br /><a href=\"https://github.com/ent/ent/commits?author=sadmansakib\" title=\"Documentation\">📖</a></td>\n<td align=\"center\"><a href=\"https://github.com/dakimura\"><img src=\"https://avatars.githubusercontent.com/u/34202807?v=4?s=100\" width=\"100px;\" alt=\"dakimura\"/><br /><sub><b>dakimura</b></sub></a><br /><a href=\"https://github.com/ent/ent/commits?author=dakimura\" title=\"Code\">💻</a></td>\n<td align=\"center\"><a href=\"https://github.com/RiskyFeryansyahP\"><img src=\"https://avatars.githubusercontent.com/u/36788585?v=4?s=100\" width=\"100px;\" alt=\"Risky Feryansyah\"/><br /><sub><b>Risky Feryansyah</b></sub></a><br /><a href=\"https://github.com/ent/ent/commits?author=RiskyFeryansyahP\" title=\"Code\">💻</a></td>\n<td align=\"center\"><a href=\"https://github.com/seiichi1101\"><img src=\"https://avatars.githubusercontent.com/u/20941952?v=4?s=100\" width=\"100px;\" alt=\"seiichi \"/><br /><sub><b>seiichi </b></sub></a><br /><a href=\"https://github.com/ent/ent/commits?author=seiichi1101\" title=\"Code\">💻</a></td>\n<td align=\"center\"><a href=\"https://orijtech.com/\"><img src=\"https://avatars.githubusercontent.com/u/4898263?v=4?s=100\" width=\"100px;\" alt=\"Emmanuel T Odeke\"/><br /><sub><b>Emmanuel T Odeke</b></sub></a><br /><a href=\"https://github.com/ent/ent/commits?author=odeke-em\" title=\"Code\">💻</a></td>\n<td align=\"center\"><a href=\"https://isoppp.com\"><img src=\"https://avatars.githubusercontent.com/u/16318727?v=4?s=100\" width=\"100px;\" alt=\"Hiroki Isogai\"/><br /><sub><b>Hiroki Isogai</b></sub></a><br /><a href=\"https://github.com/ent/ent/commits?author=isoppp\" title=\"Documentation\">📖</a></td>\n</tr>\n<tr>\n<td align=\"center\"><a href=\"https://github.com/tsingsun\"><img src=\"https://avatars.githubusercontent.com/u/5848549?v=4?s=100\" width=\"100px;\" alt=\"李清山\"/><br /><sub><b>李清山</b></sub></a><br /><a href=\"https://github.com/ent/ent/commits?author=tsingsun\" title=\"Code\">💻</a></td>\n<td align=\"center\"><a href=\"https://github.com/s-takehana\"><img src=\"https://avatars.githubusercontent.com/u/3423547?v=4?s=100\" width=\"100px;\" alt=\"s-takehana\"/><br /><sub><b>s-takehana</b></sub></a><br /><a href=\"https://github.com/ent/ent/commits?author=s-takehana\" title=\"Documentation\">📖</a></td>\n<td align=\"center\"><a href=\"https://github.com/EndlessIdea\"><img src=\"https://avatars.githubusercontent.com/u/1527796?v=4?s=100\" width=\"100px;\" alt=\"Kuiba\"/><br /><sub><b>Kuiba</b></sub></a><br /><a href=\"https://github.com/ent/ent/commits?author=EndlessIdea\" title=\"Code\">💻</a></td>\n<td align=\"center\"><a href=\"https://github.com/storyicon\"><img src=\"https://avatars.githubusercontent.com/u/29772821?v=4?s=100\" width=\"100px;\" alt=\"storyicon\"/><br /><sub><b>storyicon</b></sub></a><br /><a href=\"https://github.com/ent/ent/commits?author=storyicon\" title=\"Code\">💻</a></td>\n<td align=\"center\"><a href=\"https://github.com/evanlurvey\"><img src=\"https://avatars.githubusercontent.com/u/54965655?v=4?s=100\" width=\"100px;\" alt=\"Evan Lurvey\"/><br /><sub><b>Evan Lurvey</b></sub></a><br /><a href=\"https://github.com/ent/ent/commits?author=evanlurvey\" title=\"Code\">💻</a></td>\n<td align=\"center\"><a href=\"https://github.com/attackordie\"><img src=\"https://avatars.githubusercontent.com/u/20145334?v=4?s=100\" width=\"100px;\" alt=\"Brian\"/><br /><sub><b>Brian</b></sub></a><br /><a href=\"https://github.com/ent/ent/commits?author=attackordie\" title=\"Documentation\">📖</a></td>\n```\n\n----------------------------------------\n\nTITLE: Running the Generated OAS Server\nDESCRIPTION: This shell command runs the main.go file to start the generated OAS server.\nSOURCE: https://github.com/ent/ent/blob/master/doc/website/blog/2021-09-10-openapi-generator.md#2025-04-22_snippet_14\n\nLANGUAGE: shell\nCODE:\n```\ngo run -mod=mod main.go\n```\n\n----------------------------------------\n\nTITLE: Rendering Contributors Table in HTML/Markdown\nDESCRIPTION: A table layout using HTML within Markdown that displays contributor information including profile images, names, and contribution types using emoji indicators from the All Contributors specification.\nSOURCE: https://github.com/ent/ent/blob/master/doc/md/contributors.md#2025-04-22_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<table>\n  <tbody>\n    <tr>\n      <td align=\"center\"><a href=\"https://github.com/a8m\"><img src=\"https://avatars.githubusercontent.com/u/7413593?v=4?s=100\" width=\"100px;\" alt=\"Ariel Mashraki\"/><br /><sub><b>Ariel Mashraki</b></sub></a><br /><a href=\"#maintenance-a8m\" title=\"Maintenance\">🚧</a> <a href=\"https://github.com/ent/ent/commits?author=a8m\" title=\"Documentation\">📖</a> <a href=\"https://github.com/ent/ent/commits?author=a8m\" title=\"Code\">💻</a></td>\n      <!-- Additional contributor entries omitted for brevity -->\n    </tr>\n  </tbody>\n</table>\n```\n\n----------------------------------------\n\nTITLE: Installing SQLite Driver for Go Testing\nDESCRIPTION: Command to install the SQLite driver for Go to enable in-memory database testing.\nSOURCE: https://github.com/ent/ent/blob/master/doc/website/blog/2023-02-23-simple-cms-with-ent.mdx#2025-04-22_snippet_15\n\nLANGUAGE: shell\nCODE:\n```\ngo get -u github.com/mattn/go-sqlite3\n```\n\n----------------------------------------\n\nTITLE: Adding Protobuf Annotations to User Schema\nDESCRIPTION: Adds entproto.Message() annotation to opt-in for Protobuf schema generation.\nSOURCE: https://github.com/ent/ent/blob/master/doc/website/blog/2021-03-18-generating-a-grpc-server-with-ent.md#2025-04-22_snippet_4\n\nLANGUAGE: go\nCODE:\n```\nfunc (User) Annotations() []schema.Annotation {\n\treturn []schema.Annotation{\n\t\tentproto.Message(),\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Running Ent Code Generation with entoas in Shell\nDESCRIPTION: This command runs the Ent code generation process, which now includes the generation of the OpenAPI Specification document due to the entoas extension.\nSOURCE: https://github.com/ent/ent/blob/master/doc/website/blog/2021-11-15-announcing-entoas.md#2025-04-22_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\ngo generate ./...\n```\n\n----------------------------------------\n\nTITLE: Cloning and Running the Example Project\nDESCRIPTION: Instructions for cloning the example repository and running the program.\nSOURCE: https://github.com/ent/ent/blob/master/doc/md/tutorial-todo-gql-mutation-input.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngit clone git@github.com:a8m/ent-graphql-example.git\ncd ent-graphql-example \ngo run ./cmd/todo/\n```\n\n----------------------------------------\n\nTITLE: GraphQL Query Example with N+1 Problem\nDESCRIPTION: Example GraphQL query demonstrating potential N+1 query problem when fetching nested user and todo relationships\nSOURCE: https://github.com/ent/ent/blob/master/doc/website/blog/2021-10-14-introducing-entcache.md#2025-04-22_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\nquery($ids: [ID!]!) {\n    nodes(ids: $ids) {\n        ... on User {\n            id\n            name\n            todos {\n                id\n                owner {\n                    id\n                    name\n                }\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing elk Extension for Ent\nDESCRIPTION: Command to add the elk package to an existing Ent project via go get.\nSOURCE: https://github.com/ent/ent/blob/master/doc/website/blog/2021-09-10-openapi-generator.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngo get github.com/masseelch/elk@latest\n```\n\n----------------------------------------\n\nTITLE: Printing Ent Schemas with schemast\nDESCRIPTION: This code shows how to print a schemast.Context back to a target directory using schemast.Print. This example is a no-op since it loads and immediately prints without making any changes.\nSOURCE: https://github.com/ent/ent/blob/master/doc/md/generating-ent-schemas.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"log\"\n\n\t\"entgo.io/contrib/schemast\"\n)\n\nfunc main() {\n\tctx, err := schemast.Load(\"./ent/schema\")\n\tif err != nil {\n\t\tlog.Fatalf(\"failed: %v\", err)\n\t}\n\t// A no-op since we did not manipulate the Context at all.\n\tif err := schemast.Print(\"./ent/schema\"); err != nil {\n\t\tlog.Fatalf(\"failed: %v\", err)\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Installing PostGIS Extension in SQL\nDESCRIPTION: SQL command to create the PostGIS extension in a Postgres database.\nSOURCE: https://github.com/ent/ent/blob/master/doc/md/migration/extension.mdx#2025-04-22_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\n-- Install PostGIS extension.\nCREATE EXTENSION postgis;\n```\n\n----------------------------------------\n\nTITLE: Generating Ent Code\nDESCRIPTION: Commands to update Go module dependencies and generate Ent code based on the defined schemas.\nSOURCE: https://github.com/ent/ent/blob/master/doc/website/blog/2025-02-12-rag-with-ent-atlas-pgvector.mdx#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ngo mod tidy\ngo generate ./...\n```\n\n----------------------------------------\n\nTITLE: Installing entcache Package\nDESCRIPTION: Command to install the entcache package using go get\nSOURCE: https://github.com/ent/ent/blob/master/doc/website/blog/2021-10-14-introducing-entcache.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ngo get ariga.io/entcache\n```\n\n----------------------------------------\n\nTITLE: Running Migration Linting with Atlas for Ent Projects\nDESCRIPTION: Command to verify and lint migration files using Atlas. It checks the latest migration against a MySQL development database to ensure it's valid and safe to apply.\nSOURCE: https://github.com/ent/ent/blob/master/examples/migration/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\natlas migrate lint \\\n  --dev-url=\"docker://mysql/8/dev\" \\\n  --dir=\"file://ent/migrate/migrations\" \\\n  --latest=1\n```\n\n----------------------------------------\n\nTITLE: Cloning the Example Repository (Console)\nDESCRIPTION: Commands to clone the example repository and run the initial version of the GraphQL server.\nSOURCE: https://github.com/ent/ent/blob/master/doc/md/tutorial-todo-gql-tx-mutation.md#2025-04-22_snippet_0\n\nLANGUAGE: console\nCODE:\n```\ngit clone git@github.com:a8m/ent-graphql-example.git\ncd ent-graphql-example \ngo run ./cmd/todo/\n```\n\n----------------------------------------\n\nTITLE: Running Ent Code Generation\nDESCRIPTION: Command to generate Ent code after schema modifications.\nSOURCE: https://github.com/ent/ent/blob/master/doc/md/tutorial-todo-gql-mutation-input.md#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\ngo generate .\n```\n\n----------------------------------------\n\nTITLE: Installing Kong CLI Library with Go\nDESCRIPTION: Command to install the Kong CLI library using Go's package manager.\nSOURCE: https://github.com/ent/ent/blob/master/doc/website/blog/2025-02-12-rag-with-ent-atlas-pgvector.mdx#2025-04-22_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\ngo get github.com/alecthomas/kong\n```\n\n----------------------------------------\n\nTITLE: Generating Ent Schema Placeholders\nDESCRIPTION: Command to create initial Ent schema files for Embedding and Chunk entities. This sets up the basic structure for the Ent schemas.\nSOURCE: https://github.com/ent/ent/blob/master/doc/website/blog/2025-02-12-rag-with-ent-atlas-pgvector.mdx#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngo run -mod=mod entgo.io/ent/cmd/ent new Embedding Chunk\n```\n\n----------------------------------------\n\nTITLE: Database Migration Failure Example\nDESCRIPTION: Shell commands showing how running both migrations would fail at runtime, as the second migration attempts to create a table that already exists, potentially leaving the database in a crippled state.\nSOURCE: https://github.com/ent/ent/blob/master/doc/md/versioned-migrations.mdx#2025-04-22_snippet_15\n\nLANGUAGE: shell\nCODE:\n```\nmysql> CREATE TABLE `users` (`id` bigint NOT NULL AUTO_INCREMENT, `team_a_col` INTEGER NOT NULL, PRIMARY KEY (`id`)) CHARSET utf8mb4 COLLATE utf8mb4_bin;\n[2022-04-14 10:00:38] completed in 31 ms\n\nmysql> CREATE TABLE `users` (`id` bigint NOT NULL AUTO_INCREMENT, `team_b_col` INTEGER NOT NULL, PRIMARY KEY (`id`)) CHARSET utf8mb4 COLLATE utf8mb4_bin;\n[2022-04-14 10:00:48] [42S01][1050] Table 'users' already exists\n```\n\n----------------------------------------\n\nTITLE: Adding Comments to Ent Edges in Go\nDESCRIPTION: Demonstrates how to add documentation comments to edges that will appear in the generated entity code. Shows support for multiline comments using escape sequences.\nSOURCE: https://github.com/ent/ent/blob/master/doc/md/schema-edges.mdx#2025-04-22_snippet_32\n\nLANGUAGE: go\nCODE:\n```\n// Edges of the User.\nfunc (User) Edges() []ent.Edge {\n\treturn []ent.Edge{\n\t\tedge.To(\"pets\", Pet.Type).\n\t\t\tComment(\"Pets that this user is responsible for taking care of.\\n\" + \n\t\t\t\t\"May be zero to many, depending on the user.\")\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Inspecting Ent Schema with Atlas CLI\nDESCRIPTION: Command to inspect and visualize the Ent schema using Atlas CLI tool\nSOURCE: https://github.com/ent/ent/blob/master/doc/md/getting-started.mdx#2025-04-22_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\natlas schema inspect \\\n  -u \"ent://ent/schema\" \\\n  --dev-url \"sqlite://file?mode=memory&_fk=1\" \\\n  -w\n```\n\n----------------------------------------\n\nTITLE: Running Go Tests\nDESCRIPTION: Command to run all tests in the Go project and its output showing successful test execution.\nSOURCE: https://github.com/ent/ent/blob/master/doc/website/blog/2023-02-23-simple-cms-with-ent.mdx#2025-04-22_snippet_18\n\nLANGUAGE: shell\nCODE:\n```\ngo test ./...\n```\n\n----------------------------------------\n\nTITLE: Querying GitHub Group Cars in Go\nDESCRIPTION: Function to query all cars belonging to users in the GitHub group\nSOURCE: https://github.com/ent/ent/blob/master/doc/md/getting-started.mdx#2025-04-22_snippet_19\n\nLANGUAGE: go\nCODE:\n```\nfunc QueryGithub(ctx context.Context, client *ent.Client) error {\n\tcars, err := client.Group.\n\t\tQuery().\n\t\tWhere(group.Name(\"GitHub\")). // (Group(Name=GitHub),)\n\t\tQueryUsers().                // (User(Name=Ariel, Age=30),)\n\t\tQueryCars().                 // (Car(Model=Tesla, RegisteredAt=<Time>), Car(Model=Mazda, RegisteredAt=<Time>),)\n\t\tAll(ctx)\n\tif err != nil {\n\t\treturn fmt.Errorf(\"failed getting cars: %w\", err)\n\t}\n\tlog.Println(\"cars returned:\", cars)\n\t// Output: (Car(Model=Tesla, RegisteredAt=<Time>), Car(Model=Mazda, RegisteredAt=<Time>),)\n\treturn nil\n}\n```\n\n----------------------------------------\n\nTITLE: Running the Blog Application\nDESCRIPTION: Command to start the blog application with a MySQL database connection string.\nSOURCE: https://github.com/ent/ent/blob/master/doc/website/blog/2023-02-23-simple-cms-with-ent.mdx#2025-04-22_snippet_20\n\nLANGUAGE: shell\nCODE:\n```\ngo run main.go -dsn \"root:pass@tcp(localhost:3306)/test?parseTime=true\"\n```\n\n----------------------------------------\n\nTITLE: Testing Generated Protobuf Structs in Go\nDESCRIPTION: This test function demonstrates how to use the generated Go structs from the Protobuf definitions, verifying that the User struct works as expected.\nSOURCE: https://github.com/ent/ent/blob/master/doc/md/tutorial-grpc-generating-proto.md#2025-04-22_snippet_5\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"testing\"\n\n\t\"ent-grpc-example/ent/proto/entpb\"\n)\n\nfunc TestUserProto(t *testing.T) {\n\tuser := entpb.User{\n\t\tName:     \"rotemtam\",\n\t\tEmailAddress: \"rotemtam@example.com\",\n\t}\n\tif user.GetName() != \"rotemtam\" {\n\t\tt.Fatal(\"expected user name to be rotemtam\")\n\t}\n\tif user.GetEmailAddress() != \"rotemtam@example.com\" {\n\t\tt.Fatal(\"expected email address to be rotemtam@example.com\")\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Test Database Schema\nDESCRIPTION: SQL commands to create test tables for users and cars with a foreign key relationship\nSOURCE: https://github.com/ent/ent/blob/master/doc/website/blog/2021-10-11-generating-ent-schemas-from-existing-sql-databases.md#2025-04-22_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\ncreate table users\n(\n    id        bigint auto_increment primary key,\n    age       bigint       not null,\n    name      varchar(255) not null,\n    last_name varchar(255) null comment 'surname'\n);\n\ncreate table cars\n(\n    id          bigint auto_increment primary key,\n    model       varchar(255) not null,\n    color       varchar(255) not null,\n    engine_size mediumint    not null,\n    user_id     bigint       null,\n    constraint cars_owners foreign key (user_id) references users (id) on delete set null\n);\n```\n\n----------------------------------------\n\nTITLE: Regenerating Code and Testing Todo Creation\nDESCRIPTION: Commands to regenerate code after schema changes and test creating a Todo item with the updated schema.\nSOURCE: https://github.com/ent/ent/blob/master/doc/website/blog/2022-02-15-generate-rest-crud-with-ent-and-ogen.md#2025-04-22_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\ngo generate ./...\ngo run -mod=mod main.go\n```\n\n----------------------------------------\n\nTITLE: Applying Atlas Migrations with SQLite\nDESCRIPTION: Shell command to apply database migrations using Atlas with a SQLite database. It specifies the migrations directory and connection URL including the file path and foreign key constraint setting.\nSOURCE: https://github.com/ent/ent/blob/master/doc/md/components/_atlas_migrate_apply.mdx#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\natlas migrate apply \\\n  --dir \"file://ent/migrate/migrations\" \\\n  --url \"sqlite://file.db?_fk=1\"\n```\n\n----------------------------------------\n\nTITLE: Installing OpenAI Go Client\nDESCRIPTION: Command to install the Go client for OpenAI API integration.\nSOURCE: https://github.com/ent/ent/blob/master/doc/website/blog/2025-02-12-rag-with-ent-atlas-pgvector.mdx#2025-04-22_snippet_17\n\nLANGUAGE: bash\nCODE:\n```\ngo get github.com/sashabaranov/go-openai\n```\n\n----------------------------------------\n\nTITLE: Generating Ent Assets from Schemas\nDESCRIPTION: Command to generate Go code based on the defined entity schemas. This creates the client, CRUD builders, entity objects, and other supporting code for interacting with the database.\nSOURCE: https://github.com/ent/ent/blob/master/doc/md/code-gen.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ngo generate ./ent\n```\n\n----------------------------------------\n\nTITLE: Running Go Code Generation and Dependencies\nDESCRIPTION: Commands to generate Go code and update module dependencies in entc/integration and examples directories\nSOURCE: https://github.com/ent/ent/blob/master/CONTRIBUTING.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngo generate ./...\ngo mod tidy\n```\n\n----------------------------------------\n\nTITLE: Generating Assets for Linked-List Example in Go\nDESCRIPTION: This command generates the necessary assets for the linked-list example using the go generate tool. It runs the generator for all packages in the current directory and subdirectories.\nSOURCE: https://github.com/ent/ent/blob/master/examples/o2orecur/README.md#2025-04-22_snippet_0\n\nLANGUAGE: console\nCODE:\n```\ngo generate ./...\n```\n\n----------------------------------------\n\nTITLE: Initializing Go Module for RAG Project\nDESCRIPTION: Command to initialize a new Go module for the RAG project. This sets up the project structure and Go module file.\nSOURCE: https://github.com/ent/ent/blob/master/doc/website/blog/2025-02-12-rag-with-ent-atlas-pgvector.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngo mod init github.com/rotemtam/entrag # Feel free to replace the module path with your own\n```\n\n----------------------------------------\n\nTITLE: Running Ask Command\nDESCRIPTION: Example command to run the ask functionality with a sample question.\nSOURCE: https://github.com/ent/ent/blob/master/doc/website/blog/2025-02-12-rag-with-ent-atlas-pgvector.mdx#2025-04-22_snippet_24\n\nLANGUAGE: bash\nCODE:\n```\ngo run ./cmd/entrag ask \"tl;dr What is Ent?\"\n```\n\n----------------------------------------\n\nTITLE: Running Ent Graph Traversal Examples\nDESCRIPTION: This command runs the tests for the Ent graph traversal examples. It uses the 'go test' command to execute all test cases in the current package.\nSOURCE: https://github.com/ent/ent/blob/master/examples/traversal/README.md#2025-04-22_snippet_1\n\nLANGUAGE: console\nCODE:\n```\ngo test\n```\n\n----------------------------------------\n\nTITLE: Generating Ent Schema Assets for Optimistic Locking\nDESCRIPTION: Command to generate Ent schema assets required for the optimistic locking implementation. This runs the go generate command on all packages in the current directory.\nSOURCE: https://github.com/ent/ent/blob/master/examples/version/README.md#2025-04-22_snippet_0\n\nLANGUAGE: console\nCODE:\n```\ngo generate ./...\n```\n\n----------------------------------------\n\nTITLE: Re-running Migration Lint\nDESCRIPTION: This shell command re-runs the migration lint to verify that the fixed migration is now safe.\nSOURCE: https://github.com/ent/ent/blob/master/doc/md/versioned/06-verifying-safety.mdx#2025-04-22_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\natlas migrate lint --dev-url mysql://root:pass@localhost:3306/dev --dir file://ent/migrate/migrations --latest 1\n```\n\n----------------------------------------\n\nTITLE: Applying Migrations with Atlas\nDESCRIPTION: This command applies the generated migrations to a MySQL database. It specifies the database URL and the directory containing the migration files.\nSOURCE: https://github.com/ent/ent/blob/master/entc/integration/multischema/README.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\natlas migrate apply \\\n  --url mysql://root:pass@:3308/ \\\n  --dir file://versioned/migrate/migrations\n```\n\n----------------------------------------\n\nTITLE: Cloning GraphQL Example Repository\nDESCRIPTION: Commands to clone and run the example GraphQL server repository.\nSOURCE: https://github.com/ent/ent/blob/master/doc/md/tutorial-todo-gql-field-collection.md#2025-04-22_snippet_0\n\nLANGUAGE: console\nCODE:\n```\ngit clone git@github.com:a8m/ent-graphql-example.git\ncd ent-graphql-example \ngo run ./cmd/todo/\n```\n\n----------------------------------------\n\nTITLE: Ent Generate Configuration with Upsert Feature\nDESCRIPTION: Go generate comment enabling the SQL upsert feature flag in Ent.\nSOURCE: https://github.com/ent/ent/blob/master/doc/website/blog/2021-08-05-announcing-upsert-api.md#2025-04-22_snippet_5\n\nLANGUAGE: go\nCODE:\n```\npackage ent\n\n//go:generate go run -mod=mod entgo.io/ent/cmd/ent generate --feature sql/upsert ./schema\n```\n\n----------------------------------------\n\nTITLE: Enabling Versioned Migration with Ent CLI\nDESCRIPTION: Configuration for enabling versioned migration feature flag using the Ent CLI in generate.go file.\nSOURCE: https://github.com/ent/ent/blob/master/doc/md/versioned/07-programmatically.mdx#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\npackage ent\n\n//go:generate go run -mod=mod entgo.io/ent/cmd/ent generate --feature sql/versioned-migration ./schema\n```\n\n----------------------------------------\n\nTITLE: Installing Atlas and Logging In\nDESCRIPTION: Commands to install Atlas and log in to Atlas Cloud.\nSOURCE: https://github.com/ent/ent/blob/master/doc/md/migration/composite.mdx#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\natlas login\n```\n\nLANGUAGE: shell\nCODE:\n```\n$ atlas login a8m\n//highlight-next-line-info\nYou are now connected to \"a8m\" on Atlas Cloud.\n```\n\n----------------------------------------\n\nTITLE: Generating Assets for City-Street Unique Index Example in Ent\nDESCRIPTION: This command generates the necessary assets for the City-Street unique index example. It should be run before testing the implementation.\nSOURCE: https://github.com/ent/ent/blob/master/examples/edgeindex/README.md#2025-04-22_snippet_0\n\nLANGUAGE: console\nCODE:\n```\ngo generate ./...\n```\n\n----------------------------------------\n\nTITLE: Generate Ent Schemas\nDESCRIPTION: Command to create new Ent schemas for Pet and User entities\nSOURCE: https://github.com/ent/ent/blob/master/doc/website/blog/2021-07-29-generate-a-fully-working-go-crud-http-api-with-ent.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ngo run -mod=mod entgo.io/ent/cmd/ent new Pet User\n```\n\n----------------------------------------\n\nTITLE: Adding entproto.Message() Annotation to Ent Schema in Go\nDESCRIPTION: This snippet shows how to add the entproto.Message() annotation to an Ent schema, which opts-in the entity for Protobuf message generation.\nSOURCE: https://github.com/ent/ent/blob/master/doc/md/tutorial-grpc-generating-proto.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nfunc (User) Annotations() []schema.Annotation {\n\treturn []schema.Annotation{\n\t\tentproto.Message(),\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Running Project Tests\nDESCRIPTION: Command to execute the test suite to verify the privacy/access control implementation\nSOURCE: https://github.com/ent/ent/blob/master/examples/privacyadmin/README.md#2025-04-22_snippet_1\n\nLANGUAGE: console\nCODE:\n```\ngo test\n```\n\n----------------------------------------\n\nTITLE: Installing entgql Extension\nDESCRIPTION: Command to install the entgql extension for Ent.\nSOURCE: https://github.com/ent/ent/blob/master/doc/md/tutorial-todo-gql.mdx#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ngo get entgo.io/contrib/entgql@master\n```\n\n----------------------------------------\n\nTITLE: Running Gremlin-Specific Tests\nDESCRIPTION: Commands to start Gremlin container and run Gremlin-specific tests\nSOURCE: https://github.com/ent/ent/blob/master/entc/integration/README.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ndocker-compose up -d gremlin\ngo test ./gremlin/...\n```"
  }
]