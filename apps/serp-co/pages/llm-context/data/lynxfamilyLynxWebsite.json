[
  {
    "owner": "lynx-family",
    "repo": "lynx-website",
    "content": "TITLE: Correct Event Listener Implementation\nDESCRIPTION: Shows proper implementation of GlobalEventEmitter using useEffect for background thread execution\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/react/thinking-in-reactlynx.mdx#2025-04-17_snippet_4\n\nLANGUAGE: js\nCODE:\n```\nimport { useEffect } from '@lynx-js/react';\n\nconst EventListenerComponent = () => {\n  useEffect(() => {\n    lynx.getJSModule('GlobalEventEmitter').addListener('myHappyEvent', () => {\n      console.log('myHappyEvent triggered!');\n    });\n  }, []);\n  return <text>Hello</text>;\n};\n```\n\n----------------------------------------\n\nTITLE: Creating Context Function Definition in TypeScript\nDESCRIPTION: Type definition for React's createContext function that creates a Context object which components can provide or read. Takes a generic type parameter T and returns a Context<T>.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/react/Function.createContext.mdx#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction createContext<T>(defaultValue: T): Context<T>\n```\n\n----------------------------------------\n\nTITLE: Defining useMemo Function in TypeScript\nDESCRIPTION: This code snippet defines the useMemo function in TypeScript. It takes a factory function and a dependency list as parameters, and returns a memoized value of type T. The function only recomputes the memoized value when one of the dependencies has changed.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/api/react/Function.useMemo.mdx#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction useMemo<T>(factory: () => T, deps: DependencyList): T\n```\n\n----------------------------------------\n\nTITLE: Using React Suspense Component Example\nDESCRIPTION: Practical example showing how to use the Suspense component to wrap content that may need loading states, with a fallback component shown during loading.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/react/Function.Suspense.mdx#2025-04-17_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Suspense } from 'react';\n\n<Suspense fallback={<Loading />}>\n  <ProfileDetails />\n</Suspense>\n```\n\n----------------------------------------\n\nTITLE: ShouldComponentUpdate Lifecycle Method\nDESCRIPTION: Lifecycle method to determine if component should re-render based on prop and state changes. Returns boolean to control re-rendering.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/react/Class.PureComponent.mdx#2025-04-17_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\noptional shouldComponentUpdate(nextProps: Readonly<P>, nextState: Readonly<S>, nextContext: any): boolean\n```\n\n----------------------------------------\n\nTITLE: CommonJS Module Export/Import Example\nDESCRIPTION: Demonstrates CommonJS module pattern using require() for imports and module.exports/exports for exports. Shows integration with npm packages like lodash and includes basic function definitions.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/guide/scripting-runtime/index.mdx#2025-04-17_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst lodash = require('lodash');\nfunction hello(name) {\n  console.log(`Hello ${lodash.capitalize(name)} !`);\n}\n\nfunction goodbye(name) {\n  console.log(`Goodbye ${name} !`);\n}\n\nmodule.exports.hello = hello;\nexports.goodbye = goodbye;\n```\n\n----------------------------------------\n\nTITLE: Defining runOnMainThread Function in TypeScript\nDESCRIPTION: The runOnMainThread function takes a generic function as an argument and returns a new function that can be called with the same parameters to execute the original function on the main thread asynchronously.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/api/react/Function.runOnMainThread.mdx#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction runOnMainThread<Fn>(fn: Fn): (...args: Parameters<Fn>) => void\n```\n\n----------------------------------------\n\nTITLE: Configuring Routes with React Router in ReactLynx\nDESCRIPTION: Sets up basic routing with React Router by creating route definitions that map URL paths to React components. Uses MemoryRouter for handling navigation in the application and configures routes for the main app and home page.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/react/routing.mdx#2025-04-17_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { root } from '@lynx-js/react';\nimport { MemoryRouter, Routes, Route } from 'react-router';\n\nimport { App } from './App.jsx';\nimport { Home } from './Home.jsx';\n\nroot.render(\n  <MemoryRouter>\n    <Routes>\n      <Route path=\"/\" element={<App />} />\n      <Route path=\"/home\" element={<Home />} />\n    </Routes>\n  </MemoryRouter>,\n);\n\nif (import.meta.webpackHot) {\n  import.meta.webpackHot.accept();\n}\n```\n\n----------------------------------------\n\nTITLE: Defining React memo() Function Signature\nDESCRIPTION: TypeScript type definition for the memo() function that takes a FunctionComponent and optional comparison function. Used to create memoized components that skip re-renders when props haven't changed.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/react/Function.memo.mdx#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction memo<P>(Component: FunctionComponent<P>, propsAreEqual?: (prevProps: Readonly<P>, nextProps: Readonly<P>) => boolean): NamedExoticComponent<P>\n```\n\n----------------------------------------\n\nTITLE: createElement for Input Elements\nDESCRIPTION: Type definition for creating React input elements with specific HTML input attributes and class attributes.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/react/Function.createElement.mdx#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction createElement(\n   type: \"input\",\n   props?: null | InputHTMLAttributes<HTMLInputElement> & ClassAttributes<HTMLInputElement>, ...\nchildren?: ReactNode[]): DetailedReactHTMLElement<InputHTMLAttributes<HTMLInputElement>, HTMLInputElement>\n```\n\n----------------------------------------\n\nTITLE: Basic Fetch Request in Lynx\nDESCRIPTION: A simple example of using fetch to retrieve data from a remote endpoint. This demonstrates the basic usage pattern for network requests in Lynx applications.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/guide/interaction/networking.mdx#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfetch('https://jsonplaceholder.typicode.com/todos/1');\n```\n\n----------------------------------------\n\nTITLE: Replacing HTML elements with Lynx native components\nDESCRIPTION: Demonstrates how to replace web HTML elements like div with Lynx native components like view. This is necessary when converting React web components to ReactLynx.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/react/introduction.mdx#2025-04-17_snippet_1\n\nLANGUAGE: diff\nCODE:\n```\n- <div className=\"...\" />\n+ <view className=\"...\" />\n```\n\n----------------------------------------\n\nTITLE: Function Signature for React's lazy Function in TypeScript\nDESCRIPTION: Defines the type signature for React's lazy function, which allows deferring component loading until first render. It accepts a function that returns a Promise resolving to an object and returns a LazyExoticComponent.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/api/react/Function.lazy.mdx#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction lazy<T>(load: () => Promise<object>): LazyExoticComponent<T>\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Dual-Thread Execution in ReactLynx (JSX)\nDESCRIPTION: This snippet shows a simple React component that logs to the console. The log will appear twice due to ReactLynx's dual-thread execution model, running on both the main thread and background thread.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/react/thinking-in-reactlynx.mdx#2025-04-17_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nconst HelloComponent = () => {\n  console.log('Hello'); // 这行会被打印两次\n  return <text>Hello</text>;\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Touch Event Listeners in React Swiper Component\nDESCRIPTION: Code that listens to touch events in a swiper component, capturing initial touch coordinates and calculating movement delta. This allows tracking finger movement across the screen for scrolling functionality.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/guide/start/tutorial-product-detail.mdx#2025-04-17_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nfunction Swiper() {\n  const touchStartXRef = useRef<number>(0);\n\n  function handleTouchStart(e: TouchEvent}) {\n    touchStartXRef.current = e.touches[0].clientX;\n  }\n\n  function handleTouchMove(e: TouchEvent) {\n    const delta = e.touches[0].clientX - touchStartXRef.current;\n  }\n\n  return (\n    <view\n      class=\"swiper-container\"\n      bindtouchstart={handleTouchStart}\n      bindtouchmove={handleTouchMove}\n    >\n      {/* ... */}\n    </view>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Defining useSyncExternalStore Function in TypeScript for React\nDESCRIPTION: This snippet defines the TypeScript signature for the useSyncExternalStore function. It takes a subscribe function, a getSnapshot function, and an optional getServerSnapshot function, and returns a Snapshot. The function is used for synchronizing with an external store in React applications.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/react/Function.useSyncExternalStore.mdx#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction useSyncExternalStore<Snapshot>(\n   subscribe: (onStoreChange: () => void) => () => void,\n   getSnapshot: () => Snapshot,\n   getServerSnapshot?: () => Snapshot): Snapshot\n```\n\n----------------------------------------\n\nTITLE: Using SelectorQuery to Get Node Dimensions in Lynx TSX\nDESCRIPTION: This example demonstrates how to use SelectorQuery to obtain the position and size of a specific text node in a Lynx component. It creates a SelectorQuery, selects a node by ID, invokes the boundingClientRect method, and logs the result.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/api/lynx-api/selector-query.mdx#2025-04-17_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nclass Page extends Component {\n  componentDidMount() {\n    lynx\n      .createSelectorQuery() // 创建 SelectorQuery\n      .select('#my-id') // 指定目标节点的选择器\n      .invoke({\n        // 指定对目标节点的操作\n        method: 'boundingClientRect',\n        success: function (res) {\n          console.log(res);\n        },\n        fail: function (res) {\n          console.log(res.code, res.data);\n        },\n      })\n      .exec(); // 执行查询\n  }\n\n  render() {\n    return (\n      <view>\n        <text id=\"my-id\">...</text>\n      </view>\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Output Interface in TypeScript\nDESCRIPTION: TypeScript interface definition for the Output configuration object that specifies how and where bundles and assets should be output. This interface includes optional properties for controlling various aspects of the build output including asset prefixes, clean options, file copying, CSS modules, and more.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/rspeedy/rspeedy.output.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface Output \n```\n\n----------------------------------------\n\nTITLE: Default CSS Loader Configuration in JavaScript\nDESCRIPTION: Default configuration options for css-loader including modules settings, source map configuration, and import loader settings. The importLoaders value varies based on whether processing CSS (1) or SASS/LESS files (2).\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/rspeedy/rspeedy.cssloader.md#2025-04-17_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst defaultOptions = {\n  modules: {\n    auto: true,\n    namedExport: false,\n    exportLocalsConvention: 'camelCase',\n    localIdentName: output.cssModules.localIdentName,\n  },\n  sourceMap: output.sourceMap,\n  // importLoaders is `1` when compiling css files, and is `2` when compiling sass/less files\n  importLoaders: 1 || 2,\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing setState in React Components\nDESCRIPTION: Method to update component state with new values or compute new state based on previous state and props. Accepts optional callback function.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/react/Class.Component.mdx#2025-04-17_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nsetState<K>(state: null | S | (prevState: Readonly<S>, props: Readonly<P>) => null | S | Pick<S, K> | Pick<S, K>, callback?: () => void): void\n```\n\n----------------------------------------\n\nTITLE: Tracking Swiper Offset with useRef in React\nDESCRIPTION: Extension of the swiper component that tracks current offset position using refs. This code maintains the current offset and calculates the new position based on touch movement.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/guide/start/tutorial-product-detail.mdx#2025-04-17_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nfunction Swiper() {\n  const currentOffsetRef = useRef<number>(0);\n  const touchStartXRef = useRef<number>(0);\n  const touchStartCurrentOffsetRef = useRef<number>(0);\n\n  function handleTouchStart(e: TouchEvent) {\n    touchStartXRef.current = e.touches[0].clientX;\n    touchStartCurrentOffsetRef.current = currentOffsetRef.current;\n  }\n\n  function handleTouchMove(e: TouchEvent) {\n    const delta = e.touches[0].clientX - touchStartXRef.current;\n    const offset = touchStartCurrentOffsetRef.current + delta;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Nested Element Structure\nDESCRIPTION: Shows how to nest multiple text elements within a view element for layout organization.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/guide/ui/elements-components.mdx#2025-04-17_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<view>\n  <text>Hello</text>\n  <text>Lynx</text>\n</view>\n```\n\n----------------------------------------\n\nTITLE: Defining PluginReactLynxOptions Interface in TypeScript\nDESCRIPTION: This code snippet defines the PluginReactLynxOptions interface, which contains various optional properties for configuring the React Lynx plugin. These options control features such as CSS inheritance, accessibility, gesture systems, and performance optimizations.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/rspeedy/react-rsbuild-plugin.pluginreactlynxoptions.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface PluginReactLynxOptions\n```\n\n----------------------------------------\n\nTITLE: Implementing LynxExplorerInput Custom Component in Java\nDESCRIPTION: This snippet shows the complete Java implementation of a custom EditText component with focus method. It handles text changes, manages keyboard visibility, and implements proper event propagation to the Lynx framework.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/guide/custom-native-component/custom-component-android.mdx#2025-04-17_snippet_10\n\nLANGUAGE: java\nCODE:\n```\nimport android.content.Context;\nimport android.text.Editable;\nimport android.text.TextWatcher;\nimport android.view.inputmethod.InputMethodManager;\nimport androidx.appcompat.widget.AppCompatEditText;\nimport com.lynx.react.bridge.Callback;\nimport com.lynx.react.bridge.ReadableMap;\nimport com.lynx.tasm.behavior.LynxContext;\nimport com.lynx.tasm.behavior.LynxProp;\nimport com.lynx.tasm.behavior.LynxUIMethod;\nimport com.lynx.tasm.behavior.LynxUIMethodConstants;\nimport com.lynx.tasm.behavior.ui.LynxUI;\nimport com.lynx.tasm.event.LynxCustomEvent;\n\nimport java.util.HashMap;\nimport java.util.Map;\n\npublic class LynxExplorerInput extends LynxUI<AppCompatEditText> {\n\n  private boolean showSoftInput() {\n    InputMethodManager imm = (InputMethodManager) getLynxContext().getSystemService(Context.INPUT_METHOD_SERVICE);\n    return imm.showSoftInput(mView,\n      InputMethodManager.SHOW_IMPLICIT, null);\n  }\n\n  @LynxUIMethod\n  public void focus(ReadableMap params, Callback callback) {\n    if (mView.requestFocus()) {\n      if (showSoftInput()) {\n        callback.invoke(LynxUIMethodConstants.SUCCESS);\n      } else {\n        callback.invoke(LynxUIMethodConstants.UNKNOWN, \"fail to show keyboard\");\n      }\n    } else {\n      callback.invoke(LynxUIMethodConstants.UNKNOWN, \"fail to focus\");\n    }\n  }\n\n  private void emitEvent(String name, Map<String, Object> value) {\n    LynxCustomEvent detail = new LynxCustomEvent(getSign(), name);\n    if (value != null) {\n      for (Map.Entry<String, Object> entry : value.entrySet()) {\n        detail.addDetail(entry.getKey(), entry.getValue());\n      }\n    }\n    getLynxContext().getEventEmitter().sendCustomEvent(detail);\n  }\n\n  @Override\n  protected AppCompatEditText createView(Context context) {\n    AppCompatEditText view = new AppCompatEditText(context);\n    view.addTextChangedListener(new TextWatcher() {\n      @Override\n      public void afterTextChanged(Editable s) {\n        emitEvent(\"input\", new HashMap<String, Object>() {\n          {\n            put(\"value\", s.toString());\n          }\n        });\n      }\n\n      @Override\n      public void beforeTextChanged(CharSequence s, int start, int count, int after) {\n      }\n\n      @Override\n      public void onTextChanged(CharSequence s, int start, int before, int count) {\n      }\n    });\n    return view;\n  }\n\n  public LynxExplorerInput(LynxContext context) {\n    super(context);\n  }\n\n  @Override\n  public void onLayoutUpdated() {\n    super.onLayoutUpdated();\n    int paddingTop = mPaddingTop + mBorderTopWidth;\n    int paddingBottom = mPaddingBottom + mBorderBottomWidth;\n    int paddingLeft = mPaddingLeft + mBorderLeftWidth;\n    int paddingRight = mPaddingRight + mBorderRightWidth;\n    mView.setPadding(paddingLeft, paddingTop, paddingRight, paddingBottom);\n  }\n\n  @LynxProp(name = \"value\")\n  public void setValue(String value) {\n    if (!value.equals(mView.getText().toString())) {\n      mView.setText(value);\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Style Properties in Main Thread\nDESCRIPTION: Demonstrates how to update component style properties using setStyleProperties method in the main thread.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/guide/start/tutorial-product-detail.mdx#2025-04-17_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\nfunction useUpdateSwiperStyle() {\n  const swiperContainerRef = useMainThreadRef<MainThread.Element>(null);\n\n  function updateSwiperStyle(offset: number) {\n    'main thread';\n    swiperContainerRef.current?.setStyleProperties({\n      transform: `translateX(${offset}px)`,\n    });\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Lynx DevTool in iOS (Objective-C)\nDESCRIPTION: This snippet demonstrates how to enable Lynx Debug, DevTool, and LogBox in an iOS application using Objective-C. It shows the configuration during Lynx Environment Initialization.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/guide/start/integrate-lynx-devtool.mdx#2025-04-17_snippet_1\n\nLANGUAGE: objective-c\nCODE:\n```\n@implementation AppDelegate\n\n- (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions {\n  // ...\n  // Enable Lynx Debug\n  lynxEnv.lynxDebugEnabled = YES;\n  // Enable Lynx DevTool\n  lynxEnv.devtoolEnabled = YES;\n  // Enable Lynx LogBox\n  lynxEnv.logBoxEnabled = YES;\n  return YES;\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring a Typed Interface for Native Module in TypeScript\nDESCRIPTION: This code snippet demonstrates how to declare a typed interface specification for a local persistent storage native module in a Lynx application. It defines methods for setting, getting, and clearing storage items that will be implemented natively on mobile platforms.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/guide/use-native-modules.mdx#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ndeclare let NativeModules: {\n  NativeLocalStorageModule: {\n    setStorageItem(key: string, value: string): void;\n    getStorageItem(key: string): string | null;\n    clearStorage(): void;\n  };\n};\n```\n\n----------------------------------------\n\nTITLE: Using IntersectionObserver in Lynx with Full Example\nDESCRIPTION: A complete example showing how to create and use an IntersectionObserver in Lynx. It demonstrates creating the observer, specifying a reference node, observing a target node with a callback, and disconnecting when done.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/lynx-api/lynx/lynx-create-intersection-observer.mdx#2025-04-17_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n// 1. Create IntersectionObserver object\nconst observer = lynx.createIntersectionObserver(this, {\n  thresholds: [0, 0.25, 0.5, 0.75, 1.0],\n});\n\n// 2. Call the relativeTo method to specify the reference node\nobserver.relativeTo('#refNode', { left: 10, right: 10 });\n\n// 3. Call the observer method to specify the target node and callback\nobserver.observe('#targetNode', (res) => {\n  console.log('IntersectionObserver: ', JSON.stringify(res));\n});\n\n// 4. Call the disconnect method to clear the target node and callback\nobserver.disconnect();\n```\n\n----------------------------------------\n\nTITLE: Fetching JSON Data from an API in TypeScript\nDESCRIPTION: Demonstrates how to create a Request object, use it with fetch to retrieve data from a JSON API, and process the response. The example shows the complete request-response cycle including awaiting the JSON result.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/lynx-api/global/fetch.mdx#2025-04-17_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst request = new Request('https://jsonplaceholder.typicode.com/todos/1');\nconst response = await fetch(request);\nconsole.log(await response.json());\n```\n\n----------------------------------------\n\nTITLE: Defining Theme Styles with CSS Variables\nDESCRIPTION: CSS code defining theme styles using CSS variables. This approach provides more flexibility for managing multiple themes by allowing direct modification of variable values.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/guide/styling/custom-theming.mdx#2025-04-17_snippet_3\n\nLANGUAGE: css\nCODE:\n```\n.theme-light {\n  --color: black;\n  --bg: white;\n}\n\n.content {\n  color: var(--color);\n  background-color: var(--bg);\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Asynchronous Fetch Response in TypeScript\nDESCRIPTION: Illustrates how to handle the asynchronous nature of fetch using async/await syntax. This function fetches data from an API, parses the JSON response, and handles potential errors.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/guide/interaction/networking.mdx#2025-04-17_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst getDataFromApiAsync = async () => {\n  try {\n    const response = await fetch(\n      'https://jsonplaceholder.typicode.com/todos/1',\n    );\n    const json = await response.json();\n    return json;\n  } catch (error) {\n    console.error(error);\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Integrating Lynx in React Application\nDESCRIPTION: React component setup for integrating Lynx web core and elements with necessary CSS imports and view configuration.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/guide/start/fragments/web/integrating-lynx-with-web.mdx#2025-04-17_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport './App.css';\nimport '@lynx-js/web-core/index.css';\nimport '@lynx-js/web-elements/index.css';\nimport '@lynx-js/web-core';\nimport '@lynx-js/web-elements/all';\n\nconst App = () => {\n  return (\n    <lynx-view\n      style={{ height: '100vh', width: '100vw' }}\n      url=\"/main.web.bundle\"\n    ></lynx-view>\n  );\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Passing a Main Thread Function to main-thread:ref\nDESCRIPTION: Example showing how to pass a main thread function to main-thread:ref, similar to passing a callback to a regular ref. This allows initialization and cleanup logic for main thread elements.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/react/main-thread-script.mdx#2025-04-17_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useMainThreadRef } from '@lynx-js/react';\n\nexport function App() {\n  let eleRef = useMainThreadRef<MainThread.Element>();\n\n  function handleTapMainThread() {\n    'main thread';\n    eleRef.current?.setStyleProperty('height', '30px');\n  }\n\n  return (\n    <view main-thread:bindTap={handleTapMainThread}>\n      <view\n        main-thread:ref={(ele: MainThread.Element) => {\n          'main thread';\n          eleRef.current = ele;\n        }}\n      />\n    </view>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: React Fragment Shorthand Syntax Example in TSX\nDESCRIPTION: Example showing how to use React Fragment with the shorthand syntax (<></>) to group table data cells without adding an extra wrapper DOM node.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/api/react/Function.Fragment.mdx#2025-04-17_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n// Using the <></> shorthand syntax:\n\n<>\n  <td>Hello</td>\n  <td>World</td>\n</>\n```\n\n----------------------------------------\n\nTITLE: Implementing NativeLocalStorageModule in Swift\nDESCRIPTION: Swift implementation of the NativeLocalStorageModule that provides local storage functionality. It defines the required static properties 'name' and 'methodLookup' for module registration, and implements methods for getting, setting, and clearing storage items using UserDefaults.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/guide/custom-native-modules/native-module-ios.mdx#2025-04-17_snippet_3\n\nLANGUAGE: swift\nCODE:\n```\nimport Foundation\n\n@objcMembers\npublic final class NativeLocalStorageModule: NSObject, LynxModule {\n\n    @objc public static var name: String {\n        return \"NativeLocalStorageModule\"\n    }\n\n    @objc public static var methodLookup: [String : String] {\n        return [\n            \"setStorageItem\": NSStringFromSelector(#selector(setStorageItem(_:value:))),\n            \"getStorageItem\": NSStringFromSelector(#selector(getStorageItem(_:))),\n            \"clearStorage\": NSStringFromSelector(#selector(clearStorage))\n        ]\n    }\n\n    private let localStorage: UserDefaults\n    private static let storageKey = \"MyLocalStorage\"\n\n    @objc public init(param: Any) {\n      guard let suite = UserDefaults(suiteName: NativeLocalStorageModule.storageKey) else {\n          fatalError(\"Failed to initialize UserDefaults with suiteName: \\(NativeLocalStorageModule.storageKey)\")\n      }\n      localStorage = suite\n      super.init()\n    }\n\n    @objc public override init() {\n        guard let suite = UserDefaults(suiteName: NativeLocalStorageModule.storageKey) else {\n            fatalError(\"Failed to initialize UserDefaults with suiteName: \\(NativeLocalStorageModule.storageKey)\")\n        }\n        localStorage = suite\n        super.init()\n    }\n\n    @objc func setStorageItem(_ key: String, value: String) {\n        localStorage.set(value, forKey: key)\n    }\n\n    @objc func getStorageItem(_ key: String) -> String? {\n        return localStorage.string(forKey: key)\n    }\n\n    @objc func clearStorage() {\n        localStorage.dictionaryRepresentation().keys.forEach {\n            localStorage.removeObject(forKey: $0)\n        }\n    }\n\n}\n```\n\n----------------------------------------\n\nTITLE: React memo() Usage Example\nDESCRIPTION: Example showing how to use memo() to create a memoized component that optimizes re-rendering based on prop changes.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/react/Function.memo.mdx#2025-04-17_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { memo } from 'react';\n\nconst SomeComponent = memo(function SomeComponent(props: { foo: string }) {\n  // ...\n});\n```\n\n----------------------------------------\n\nTITLE: Constructing LynxLoadMeta in Java for Android\nDESCRIPTION: This snippet demonstrates how to construct a LynxLoadMeta object using the Builder pattern in Java for the Android platform. It shows setting various fields like URL, binary data, template bundle, initial data, and load options.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/lynx-native-api/lynx-load-meta.mdx#2025-04-17_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nLynxLoadMeta.Builder builder = new LynxLoadMeta.Builder();\nbuilder.setUrl();\nbuilder.setBinaryData();\nbuilder.setTemplateBundle();\nbuilder.setInitialData();\nbuilder.addLoadOption();\nLynxLoadMeta meta = builder.build();\n```\n\n----------------------------------------\n\nTITLE: Converting Touch Handlers to Main Thread Script\nDESCRIPTION: Optimization technique that moves touch event handlers to the main thread using the 'main thread' identifier, reducing latency and improving scrolling performance by eliminating thread-switching overhead.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/guide/start/tutorial-product-detail.mdx#2025-04-17_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nfunction useOffset() {\n  const touchStartXRef = useMainThreadRef<number>(0);\n\n  function handleTouchStart(e: TouchEvent) {\n    'main thread'\n    ...\n  }\n\n  function handleTouchMove(e: TouchEvent) {\n    'main thread'\n    ...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring Native Module Interface in TypeScript\nDESCRIPTION: This snippet shows how to declare the interface for a native local storage module using TypeScript. It defines methods for setting, getting, and clearing storage items.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/guide/use-native-modules.mdx#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ndeclare let NativeModules: {\n  NativeLocalStorageModule: {\n    setStorageItem(key: string, value: string): void;\n    getStorageItem(key: string): string | null;\n    clearStorage(): void;\n  };\n};\n```\n\n----------------------------------------\n\nTITLE: Cross-Component Event Listening in TSX\nDESCRIPTION: Implements global event binding to listen for events across different components\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/guide/interaction/event-handling/event-propagation.mdx#2025-04-17_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\n<View\n  global-bind:tap={() => {\n    count++;\n  }}\n  global-target=\"target1,target2\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Estimating List Item Size in Lynx React Gallery\nDESCRIPTION: This code snippet demonstrates how to use the estimated-main-axis-size-px attribute in a list-item to estimate the size of elements on the main axis before they are rendered in a Lynx list component.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/guide/start/tutorial-gallery.mdx#2025-04-17_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\n...\n  <list>\n    {pictureData.map((picture: Picture, index: number) => (\n      <list-item\n        estimated-main-axis-size-px={calculateEstimatedSize(\n          picture.width,\n          picture.height\n        )}\n        item-key={\"\" + index}\n        key={\"\" + index}\n      >\n        <LikeImageCard picture={picture} />\n      </list-item>\n    ))}\n  </list>\n...\n```\n\n----------------------------------------\n\nTITLE: Implementing IntersectionObserver in Lynx Framework (TSX)\nDESCRIPTION: This code snippet demonstrates how to create and use an IntersectionObserver object in the Lynx framework. It shows the process of creating the observer, specifying reference and target nodes, and handling callbacks.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/lynx-api/intersection-observer.mdx#2025-04-17_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n// 1. Create IntersectionObserver object\nconst observer = lynx.createIntersectionObserver(this, {\n  thresholds: [0, 0.25, 0.5, 0.75, 1.0],\n});\n\n// 2. Call the relativeTo method to specify the reference node\nobserver.relativeTo('#refNode', { left: 10, right: 10 });\n\n// 3. Call the observe method to specify the target node and callback\nobserver.observe('#targetNode', (res) => {\n  console.log('IntersectionObserver: ', JSON.stringify(res));\n});\n\n// 4. Call the disconnect method to clear the target node and callback\nobserver.disconnect();\n```\n\n----------------------------------------\n\nTITLE: Implementing Animation Duration Control\nDESCRIPTION: Shows how to implement animation duration control with main thread and background thread interaction.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/guide/start/tutorial-product-detail.mdx#2025-04-17_snippet_12\n\nLANGUAGE: tsx\nCODE:\n```\nfunction useOffset({\n  duration,\n}) {\n  const currentOffsetRef = useMainThreadRef<number>(0);\n\n  function updateOffset(offset: number) {\n    'main thread'\n    // Update Component Offset\n  }\n\n  ...\n  function handleTouchEnd() {\n    'main thread'\n    ...\n    animate({\n      from: currentOffsetRef.current,\n      to: calcNearestPage(currentOffsetRef.current),\n      onUpdate: updateOffset,\n      duration,\n    })\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Theme Context Example in React\nDESCRIPTION: Example demonstrating how to create a simple theme context with a default value of 'light'. Shows practical usage of createContext with string type.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/react/Function.createContext.mdx#2025-04-17_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { createContext } from 'react';\n\nconst ThemeContext = createContext('light');\n```\n\n----------------------------------------\n\nTITLE: Customizing Fetch Request with Options in TypeScript\nDESCRIPTION: Shows how to make a POST request using fetch with custom headers and a JSON body. This example demonstrates setting the method, headers, and body of the request.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/guide/interaction/networking.mdx#2025-04-17_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nfetch('https://jsonplaceholder.typicode.com/todos/1', {\n  method: 'POST',\n  headers: {\n    'some-header': 'header',\n    'Content-Type': 'application/json',\n  },\n  body: JSON.stringify({\n    firstParam: 'yourValue',\n    secondParam: 'yourOtherValue',\n  }),\n});\n```\n\n----------------------------------------\n\nTITLE: Correct Usage of GlobalEventEmitter in ReactLynx (JSX)\nDESCRIPTION: This snippet demonstrates the correct way to use GlobalEventEmitter in ReactLynx by moving the code into a useEffect hook, ensuring it only runs on the background thread where the API is available.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/react/thinking-in-reactlynx.mdx#2025-04-17_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useEffect } from '@lynx-js/react';\n\nconst EventListenerComponent = () => {\n  useEffect(() => {\n    lynx.getJSModule('GlobalEventEmitter').addListener('myHappyEvent', () => {\n      console.log('myHappyEvent triggered!');\n    });\n  }, []);\n  return <text>Hello</text>;\n};\n```\n\n----------------------------------------\n\nTITLE: Invoking Main Thread Functions from Background Thread in Lynx.js React\nDESCRIPTION: This snippet demonstrates how to use runOnMainThread() to asynchronously execute a main thread function from a background thread. It uses useMainThreadRef to manage state across threads.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/react/main-thread-script.mdx#2025-04-17_snippet_8\n\nLANGUAGE: jsx\nCODE:\n```\nimport { runOnMainThread, useMainThreadRef } from '@lynx-js/react';\n\nfunction App() {\n  const countRef = useMainThreadRef(0);\n\n  const addCount = (value) => {\n    'main thread';\n    countRef.current += value;\n    return countRef.current;\n  };\n\n  const increaseMainThreadCount = async () => {\n    const result = await runOnMainThread(addCount)(1);\n    console.log(result);\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Valtio State Management in a Lynx.js React Application\nDESCRIPTION: This example demonstrates how to use Valtio in a Lynx.js React application by creating a proxy state object, using useSnapshot for reactive state access, implementing a state change handler, and setting up state change subscriptions via useEffect.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/react/state-management/valtio.mdx#2025-04-17_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useEffect } from '@lynx-js/react';\nimport { proxy, useSnapshot, subscribe } from 'valtio';\n\nconst state = proxy<{ count: number }>({ count: 0 });\n\nexport function App() {\n  const snap = useSnapshot(state);\n\n  const handleTap = () => {\n    state.count++;\n  };\n\n  useEffect(() => {\n    const unsubscribe = subscribe(state, () => {\n      console.log('state changed: ', state.count);\n    });\n\n    return () => {\n      unsubscribe();\n    };\n  }, []);\n\n  return (\n    <view>\n      <text>{snap.count}</text>\n      <text bindtap={handleTap}>Tap</text>\n    </view>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Switching Theme Styles by Changing CSS Variable Values with JavaScript\nDESCRIPTION: React component demonstrating how to switch theme styles by directly modifying CSS variable values using JavaScript. This method allows for flexible, dynamic theme updates.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/guide/styling/custom-theming.mdx#2025-04-17_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nimport './App.css';\n\nexport function App() {\n  const handleClick = () => {\n    lynx.getElementById('root').setProperty({\n      '--color': 'white',\n      '--bg': 'black',\n    });\n  };\n\n  return (\n    <view id=\"root\" className=\"theme-light\" bindtap={handleClick}>\n      <text className=\"content\">Hello Variable</text>\n    </view>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: createElement for Input Elements in TypeScript\nDESCRIPTION: This overload of createElement is specifically for creating HTML input elements. It accepts an input type string, props with InputHTMLAttributes and ClassAttributes, and optional children nodes.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/api/react/Function.createElement.mdx#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction createElement(\n   type: \"input\",\n   props?: null | InputHTMLAttributes<HTMLInputElement> & ClassAttributes<HTMLInputElement>, ...\nchildren?: ReactNode[]): DetailedReactHTMLElement<InputHTMLAttributes<HTMLInputElement>, HTMLInputElement>\n```\n\n----------------------------------------\n\nTITLE: InitDataProvider Usage Example\nDESCRIPTION: Example showing how to use InitDataProvider to wrap an application component and consume the provided data using InitDataConsumer.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/react/Function.InitDataProvider.mdx#2025-04-17_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { root } from \"@lynx-js/react\"\n\nfunction App() {\n  return (\n    <InitDataConsumer children={(initData) => <view>...</view>}/>\n  )\n}\n\nroot.render(\n  <InitDataProvider>\n     <App/>\n  </InitDataProvider>\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing Indicator Component Integration\nDESCRIPTION: Shows the integration of an Indicator component with current page state management.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/guide/start/tutorial-product-detail.mdx#2025-04-17_snippet_10\n\nLANGUAGE: tsx\nCODE:\n```\nfunction Swiper() {\n  const [current, setCurrent] = useState(0);\n\n  return (\n    <view>\n      {/* ... */}\n      <Indicator current={current} />\n    </view>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Modules with requireModule() in TypeScript\nDESCRIPTION: Basic TypeScript syntax for the lynx.requireModule() method that loads modules synchronously. The generic parameter T is used to specify the expected type of the imported module.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/lynx-api/lynx/lynx-require-module.mdx#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nrequireModule<T>(path: string): T;\n```\n\n----------------------------------------\n\nTITLE: Using querySelector Method in Lynx Framework (TypeScript)\nDESCRIPTION: Demonstrates how to use the lynx.querySelector() method to find the first element within the page's child elements that matches the specified selector.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/lynx-api/main-thread/lynx-query-selector.mdx#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst element = lynx.querySelector(selector);\n```\n\n----------------------------------------\n\nTITLE: Configuring i18next with Dynamic Imports in TypeScript\nDESCRIPTION: This snippet shows how to set up i18next with dynamic imports for lazy loading of language resources. It uses the i18next-resources-to-backend package to handle asynchronous loading of locales.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/guide/inclusion/internationalization.mdx#2025-04-17_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport i18next from 'i18next';\nimport type { i18n } from 'i18next';\nimport resourcesToBackend from 'i18next-resources-to-backend';\n\n// Localizations imported statically, available at the initial screen\nconst localesContext = import.meta.webpackContext('./locales', {\n  recursive: false,\n  regExp: /(en|zh)\\.json$/,\n});\n\nconst localI18nInstance: i18n = i18next.createInstance();\n\n// We can only loading resources on a background thread\nif (__JS__) {\n  localI18nInstance.use(\n    // See: https://www.i18next.com/how-to/add-or-load-translations#lazy-load-in-memory-translations\n    resourcesToBackend(\n      (language: string) =>\n        // Dynamic-imported locales can be used with `i18n.loadLanguages`\n        import(`./locales/${language}.json`),\n    ),\n  );\n}\n\nlocalI18nInstance.init({\n  lng: 'en',\n  // The default JSON format needs Intl.PluralRules API, which is currently unavailable in Lynx.\n  compatibilityJSON: 'v3',\n  // Add all statically imported localizations to i18next resources.\n  resources: Object.fromEntries(\n    localesContext.keys().map((key) => [\n      key.match(/\\/([^\\/]+)\\.json$/)?.[1] || key,\n      {\n        translation: localesContext(key) as Record<string, string>,\n      },\n    ]),\n  ),\n  partialBundledLanguages: true,\n});\n\nexport { localI18nInstance as i18n };\n```\n\n----------------------------------------\n\nTITLE: Implementing Zustand State Management in Lynx.js React Applications\nDESCRIPTION: This example demonstrates how to create a simple counter application using Zustand for state management in Lynx.js. It shows the creation of a store with state and actions, and how to consume the store in a component using hooks and handle side effects with useEffect.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/react/state-management/zustand.mdx#2025-04-17_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useEffect } from '@lynx-js/react';\nimport { create } from 'zustand';\n\ntype State = {\n  count: number;\n};\n\ntype Action = {\n  increment: () => void;\n};\n\nconst useStore = create<State & Action>((set) => ({\n  count: 0,\n  increment: () => set((state) => ({ count: state.count + 1 })),\n}));\n\nexport function App() {\n  const { count, increment } = useStore();\n\n  useEffect(() => {\n    console.log('count changed:', count);\n  }, [count]);\n\n  return (\n    <view>\n      <text>{count}</text>\n      <text bindtap={increment}>Tap</text>\n    </view>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring forwardRef Function Signature in TypeScript\nDESCRIPTION: TypeScript function signature for React's forwardRef, showing type parameters T and P, and return type ForwardRefExoticComponent. Used to create components that can expose refs to parent components.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/api/react/Function.forwardRef.mdx#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction forwardRef<T, P>(render: ForwardRefRenderFunction<T, PropsWithoutRef<P>>): ForwardRefExoticComponent<PropsWithoutRef<P> & RefAttributes<T>>\n```\n\n----------------------------------------\n\nTITLE: Declaring useContext Function in TypeScript\nDESCRIPTION: Defines the type signature for the useContext function in React. It accepts a Context object and returns the current context value of type T.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/react/Function.useContext.mdx#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction useContext<T>(context: Context<T>): T\n```\n\n----------------------------------------\n\nTITLE: Context Usage Example\nDESCRIPTION: Complete example demonstrating context setup and usage in a React component.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/api/react/Class.Component.mdx#2025-04-17_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ntype MyContext = number\nconst Ctx = React.createContext<MyContext>(0)\n\nclass Foo extends React.Component {\n  static contextType = Ctx\n  context!: React.ContextType<typeof Ctx>\n  render () {\n    return <>My context's value: {this.context}</>;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing getSnapshotBeforeUpdate in React Components\nDESCRIPTION: Method that runs before React applies render results to the DOM. Returns object for componentDidUpdate. Useful for preserving values like scroll position before render changes.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/react/Class.Component.mdx#2025-04-17_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\noptional getSnapshotBeforeUpdate(prevProps: Readonly<P>, prevState: Readonly<S>): null | SS\n```\n\n----------------------------------------\n\nTITLE: Auto-Scrolling in Lynx List Component (TSX)\nDESCRIPTION: This code snippet shows how to implement auto-scrolling in a <list> component using the autoScroll method. It allows setting the scroll rate, starting/pausing scrolling, and configuring auto-stop behavior.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/elements/built-in/list.mdx#2025-04-17_snippet_31\n\nLANGUAGE: tsx\nCODE:\n```\nthis.createSelectorQuery()\n  .select('#id_of_list')\n  .invoke({\n    method: 'autoScroll',\n    params: {\n      rate: string, //  The distance scrolled per second, supports positive and negative. Distance supports units \"px/rpx/ppx\" default->null (iOS value must be greater than 1/screen.scale px)\n      start: bool, //  Start/pause auto-scrolling default->false\n      autoStop: bool, // Whether to automatically stop when reaching the bottom default->true\n    },\n    success: function (res) {},\n    fail: function (res) {},\n  })\n  .exec();\n```\n\n----------------------------------------\n\nTITLE: Using linear-weight in CSS\nDESCRIPTION: Examples of using the linear-weight property to define the weight of child elements in a linear layout. The weight value determines how remaining space is distributed among children proportionally.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/css/properties/linear-weight.mdx#2025-04-17_snippet_0\n\nLANGUAGE: css\nCODE:\n```\nlinear-weight: 3;\nlinear-weight: 5;\n```\n\n----------------------------------------\n\nTITLE: Implementing NativeLocalStorageModule in Objective-C\nDESCRIPTION: Implementation of the NativeLocalStorageModule that provides local storage functionality. It defines required static methods 'name' and 'methodLookup' for module registration, and implements methods for getting, setting, and clearing storage items using NSUserDefaults.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/guide/custom-native-modules/native-module-ios.mdx#2025-04-17_snippet_1\n\nLANGUAGE: objective-c\nCODE:\n```\n#import \"NativeLocalStorageModule.h\"\n\n@interface NativeLocalStorageModule()\n@property (strong, nonatomic) NSUserDefaults *localStorage;\n@end\n\n@implementation NativeLocalStorageModule\n\nstatic NSString *const NativeLocalStorageKey = @\"MyLocalStorage\";\n\n- (instancetype)init {\n    if (self = [super init]) {\n        _localStorage = [[NSUserDefaults alloc] initWithSuiteName:NativeLocalStorageKey];\n    }\n    return self;\n}\n\n+ (NSString *)name {\n    return @\"NativeLocalStorageModule\";\n}\n\n+ (NSDictionary<NSString *, NSString *> *)methodLookup {\n    return @{\n        @\"setStorageItem\": NSStringFromSelector(@selector(setStorageItem:value:)),\n        @\"getStorageItem\": NSStringFromSelector(@selector(getStorageItem:)),\n        @\"clearStorage\": NSStringFromSelector(@selector(clearStorage))\n    };\n}\n\n- (void)setStorageItem:(NSString *)key value:(NSString *)value {\n    [self.localStorage setObject:value forKey:key];\n}\n\n- (NSString *)getStorageItem:(NSString *)key {\n    NSString *value = [self.localStorage stringForKey:key];\n    return value;\n}\n\n- (void)clearStorage {\n    NSDictionary *keys = [self.localStorage dictionaryRepresentation];\n    for (NSString *key in keys) {\n        [self.localStorage removeObjectForKey:key];\n    }\n}\n\n@end\n```\n\n----------------------------------------\n\nTITLE: Registering DevTool Service in Android (Kotlin)\nDESCRIPTION: This code demonstrates how to register the DevTool service in an Android application using Kotlin. It shows the registration process during Lynx service initialization.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/guide/start/integrate-lynx-devtool.mdx#2025-04-17_snippet_6\n\nLANGUAGE: kotlin\nCODE:\n```\nprivate fun initLynxService() {\n  // ...\n  // register DevTool service\n  LynxServiceCenter.inst().registerService(LynxDevToolService)\n}\n```\n\n----------------------------------------\n\nTITLE: Local Element Registration in Java/Kotlin\nDESCRIPTION: Shows how to register a custom element locally for a specific LynxView instance using LynxViewBuilder.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/guide/custom-native-component/custom-component-android.mdx#2025-04-17_snippet_2\n\nLANGUAGE: java\nCODE:\n```\nLynxViewBuilder lynxViewBuilder = new LynxViewBuilder();\nlynxViewBuilder.addBehavior(new Behavior(\"input\") {\n      @Override\n      public LynxExplorerInput createUI(LynxContext context) {\n        return new LynxExplorerInput(context);\n      }\n    });\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nval lynxViewBuilder = LynxViewBuilder()\n    lynxViewBuilder.addBehavior(object : Behavior(\"input\") {\n      override fun createUI(context: LynxContext): LynxExplorerInput {\n        return LynxExplorerInput(context)\n      }\n    })\n```\n\n----------------------------------------\n\nTITLE: Styling Product Gallery with CSS\nDESCRIPTION: Defines styles for the gallery wrapper, cards, scrollbar, animations and list layout using CSS. Includes styling for like button animations and image card layouts.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/guide/start/tutorial-gallery.mdx#2025-04-17_snippet_0\n\nLANGUAGE: css\nCODE:\n```\n.gallery-wrapper {\n  height: 100vh;\n  background-color: black;\n}\n\n.single-card {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n}\n\n.scrollbar {\n  position: absolute;\n  right: 7px;\n  z-index: 1000;\n  width: 4px;\n  background: linear-gradient(to bottom, #ff6448, #ccddff, #3deae7);\n  border-radius: 5px;\n  overflow: hidden;\n  box-shadow:\n    0px 0px 4px 1px rgba(12, 205, 223, 0.4),\n    0px 0px 16px 5px rgba(12, 205, 223, 0.5);\n}\n\n.scrollbar-effect {\n  width: 100%;\n  height: 80%;\n}\n\n.glow {\n  background-color: #333;\n  border-radius: 4px;\n  background: linear-gradient(\n    45deg,\n    rgba(255, 255, 255, 0) 20%,\n    rgba(255, 255, 255, 0.8) 50%,\n    rgba(255, 255, 255, 0) 80%\n  );\n  animation: flow 3s linear infinite;\n}\n\n@keyframes flow {\n  0% {\n    transform: translateY(-100%);\n  }\n  100% {\n    transform: translateY(100%);\n  }\n}\n\n.list {\n  width: 100vw;\n  padding-bottom: 20px;\n  padding-left: 20px;\n  padding-right: 20px;\n  height: calc(100% - 48px);\n  list-main-axis-gap: 10px;\n  list-cross-axis-gap: 10px;\n}\n\n.picture-wrapper {\n  border-radius: 10px;\n  overflow: hidden;\n  width: 100%;\n}\n\n.like-icon {\n  position: absolute;\n  display: grid;\n  justify-items: center;\n  align-items: center;\n  top: 0px;\n  right: 0px;\n  width: 48px;\n  height: 48px;\n}\n\n.heart-love {\n  width: 16px;\n  height: 16px;\n}\n\n.circle {\n  position: absolute;\n  top: calc(50% - 8px);\n  left: calc(50% - 8px);\n  height: 16px;\n  width: 16px;\n  border: 2px solid red;\n  border-radius: 50%;\n  transform: scale(0);\n  opacity: 1;\n  animation: ripple 1s 1 ease-out;\n}\n\n.circleAfter {\n  animation-delay: 0.5s;\n}\n\n@keyframes ripple {\n  0% {\n    transform: scale(1);\n    opacity: 1;\n  }\n  100% {\n    transform: scale(2);\n    opacity: 0;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using transform-origin in SCSS with Various Value Combinations\nDESCRIPTION: Examples of transform-origin property usage in SCSS with different value combinations including single values, x-offset and y-offset combinations, keywords, and mixed values. The examples illustrate how to set the transformation origin point for elements.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/css/properties/transform-origin.mdx#2025-04-17_snippet_0\n\nLANGUAGE: scss\nCODE:\n```\n/* x-offset | default */\ntransform-origin: 2px;\ntransform-origin: bottom;\n\n/* x-offset | y-offset */\ntransform-origin: 3cm 2px;\n\n/* x-offset-keyword | y-offset */\ntransform-origin: left 2px;\n\n/* x-offset-keyword | y-offset-keyword */\ntransform-origin: right top;\n\n/* x-offset | y-offset */\ntransform-origin: 2px 30%;\n\n/* x-offset-keyword | y-offset */\ntransform-origin: left 5px;\n\n/* x-offset-keyword | y-offset-keyword */\ntransform-origin: right bottom;\n```\n\n----------------------------------------\n\nTITLE: useReducer Implementation with Optional Initializer\nDESCRIPTION: TypeScript definition for useReducer with an optional initializer parameter.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/api/react/Function.useReducer.mdx#2025-04-17_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nfunction useReducer<R>(\n   reducer: R,\n   initialState: ReducerState<R>,\n   initializer?: undefined): [ReducerState<R>, Dispatch<ReducerAction<R>>]\n```\n\n----------------------------------------\n\nTITLE: Using React Fragment with Explicit Import\nDESCRIPTION: Example of using the React Fragment component with an explicit import. This allows grouping of elements without adding extra nodes to the DOM.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/react/Function.Fragment.mdx#2025-04-17_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Fragment } from 'react';\n\n<Fragment>\n  <td>Hello</td>\n  <td>World</td>\n</Fragment>\n```\n\n----------------------------------------\n\nTITLE: Constructing LynxView in Android Activity\nDESCRIPTION: Shows how to initialize and build a LynxView instance within an Android Activity. The code demonstrates setting up a template provider and adding the LynxView to the activity's content view.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/guide/start/fragments/android/integrating-lynx-with-existing-app-android.mdx#2025-04-17_snippet_10\n\nLANGUAGE: java\nCODE:\n```\nimport android.app.Activity;\nimport android.os.Bundle;\n\nimport com.lynx.tasm.LynxView;\nimport com.lynx.tasm.LynxViewBuilder;\n\npublic class MainActivity extends Activity {\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        LynxView lynxView = buildLynxView();\n        setContentView(lynxView);\n    }\n\n    private LynxView buildLynxView() {\n        LynxViewBuilder viewBuilder = new LynxViewBuilder();\n        viewBuilder.setTemplateProvider(new DemoTemplateProvider(this));\n        return viewBuilder.build(this);\n    }\n}\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nimport android.app.Activity\nimport android.os.Bundle\nimport com.lynx.tasm.LynxView\nimport com.lynx.tasm.LynxViewBuilder\n\n\nclass MainActivity : Activity() {\n\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        val lynxView = buildLynxView()\n        setContentView(lynxView)\n    }\n\n    private fun buildLynxView(): LynxView {\n        val viewBuilder = LynxViewBuilder()\n        viewBuilder.setTemplateProvider(DemoTemplateProvider(this))\n        return viewBuilder.build(this)\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Customized Fetch Request with Options\nDESCRIPTION: Demonstrates how to create a customized fetch request with HTTP method, headers, and JSON body. This example shows a POST request with Content-Type header and JSON payload.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/guide/interaction/networking.mdx#2025-04-17_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nfetch('https://jsonplaceholder.typicode.com/todos/1', {\n  method: 'POST',\n  headers: {\n    'some-header': 'header',\n    'Content-Type': 'application/json',\n  },\n  body: JSON.stringify({\n    firstParam: 'yourValue',\n    secondParam: 'yourOtherValue',\n  }),\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Light and Dark Theme Styles with CSS Descendant Selectors\nDESCRIPTION: CSS code defining light and dark theme styles using descendant selectors. This approach allows for theme switching by changing the class of a parent element.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/guide/styling/custom-theming.mdx#2025-04-17_snippet_0\n\nLANGUAGE: css\nCODE:\n```\n/* light theme */\n.theme-light .content {\n  color: black;\n  background-color: white;\n}\n\n/* dark theme */\n.theme-dark .content {\n  color: white;\n  background-color: black;\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Lynx Platform Components in JavaScript\nDESCRIPTION: This code snippet imports necessary components for the Lynx integration documentation page, including the PlatformTabs component, NextSteps component, and platform-specific integration guide fragments.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/guide/start/integrate-with-existing-apps.mdx#2025-04-17_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { PlatformTabs } from '@lynx';\nimport * as NextSteps from '@lynx/NextSteps';\n\nimport IntegratingLynxIOS from './fragments/ios/integrating-lynx-with-existing-app-ios.mdx';\nimport IntegratingLynxAndroid from './fragments/android/integrating-lynx-with-existing-app-android.mdx';\nimport IntegratingLynxWeb from './fragments/web/integrating-lynx-with-web.mdx';\n```\n\n----------------------------------------\n\nTITLE: Background Only Code Examples\nDESCRIPTION: Various examples of background-only code patterns including effects, event handlers, and refs\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/react/thinking-in-reactlynx.mdx#2025-04-17_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useEffect } from '@lynx-js/react';\n\nfunction App() {\n  useEffect(() => console.log('Effect is background only'));\n  return (\n    <view bindtap={(e) => console.log('Event is background only')}>\n      <text ref={(ref) => console.log('Ref is background only')}>\n        Hello, ReactLynx!\n      </text>\n    </view>\n  );\n}\n\nfunction backgroundOnly() {\n  'background only';\n  console.log('Directive marked function is background only');\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Lynx React Rendering Example\nDESCRIPTION: Simple example showing how to render a basic Lynx React application using the root.render() method.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/react/Interface.Root.mdx#2025-04-17_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { root } from \"@lynx-js/react\"\n\nfunction App() {\n  // Your app\n  return <view>...</view>\n}\n\nroot.render(<App/>);\n```\n\n----------------------------------------\n\nTITLE: ESModule Export Example\nDESCRIPTION: Shows ESModule export syntax with both named and default exports using modern JavaScript module system.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/guide/scripting-runtime/index.mdx#2025-04-17_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nexport function getAge() {\n  return 11;\n}\n\nexport default function (add1, add2) {\n  return add1 + add2;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing React Lazy Loading\nDESCRIPTION: Example showing how to implement lazy loading for a Markdown Preview component using React.lazy()\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/react/Function.lazy.mdx#2025-04-17_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { lazy } from 'react';\n\nconst MarkdownPreview = lazy(() => import('./MarkdownPreview.js'));\n```\n\n----------------------------------------\n\nTITLE: Converting to Lazy Loading\nDESCRIPTION: Shows the difference between static import and lazy loading implementation using diff syntax.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/react/code-splitting.md#2025-04-17_snippet_1\n\nLANGUAGE: diff\nCODE:\n```\n- import LazyComponent from './LazyComponent.jsx'\n+ import { lazy } from '@lynx-js/react'\n+ const LazyComponent = lazy(() => import('./LazyComponent.jsx'))\n```\n\n----------------------------------------\n\nTITLE: Basic Transform Property Usage Examples in SCSS\nDESCRIPTION: Examples of various transform functions including rotate, translate, scale, and matrix transformations in SCSS syntax.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/css/properties/transform.mdx#2025-04-17_snippet_0\n\nLANGUAGE: scss\nCODE:\n```\n/* Function values */\ntransform: rotate(0.5turn);\ntransform: rotateX(10deg);\ntransform: rotateY(10deg);\ntransform: translate(12px, 50%);\ntransform: translate3d(12px, 50%, 3em);\ntransform: translateX(2em);\ntransform: translateY(3px);\ntransform: translateZ(2px);\ntransform: scale(2, 0.5);\ntransform: scaleX(2);\ntransform: scaleY(0.5);\n\n// equal to transform: translate(50px, 100px);\ntransform: matrix(1, 0, 0, 1, 50, 100);\n// equal to transform: translateX(100px);\ntransform: matrix3d(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 100, 0, 0, 1);\n\n/* Multiple function values */\ntransform: translateX(10px) rotate(10deg) translateY(5px);\ntransform: translate3d(10px, 0, 20px) rotateY(3deg);\n```\n\n----------------------------------------\n\nTITLE: Implementing setState Method in React Component Class\nDESCRIPTION: Type definition for the setState method that is used to update the component's state. It accepts a state object or a function that returns a state object, and an optional callback function.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/api/react/Class.Component.mdx#2025-04-17_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nsetState<K>(state: null | S | (prevState: Readonly<S>, props: Readonly<P>) => null | S | Pick<S, K> | Pick<S, K>, callback?: () => void): void\n```\n\n----------------------------------------\n\nTITLE: TypeScript Asset Type Declaration\nDESCRIPTION: Type declaration file for static assets in TypeScript projects\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/rspeedy/assets.md#2025-04-17_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n/// <reference types=\"@lynx-js/rspeedy/client\" />\n```\n\n----------------------------------------\n\nTITLE: Configuring Stylus Plugin in Rspeedy\nDESCRIPTION: Configuration for using Stylus in Rspeedy by installing and configuring the @rsbuild/plugin-stylus plugin in lynx.config.ts.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/rspeedy/styling.mdx#2025-04-17_snippet_13\n\nLANGUAGE: js\nCODE:\n```\nimport { pluginStylus } from '@rsbuild/plugin-stylus';\n\nimport { defineConfig } from '@lynx-js/rspeedy';\n\nexport default defineConfig({\n  source: {\n    entry: './src/index.tsx',\n  },\n  plugins: [\n    pluginStylus({\n      /** stylus options */\n    }),\n  ],\n});\n```\n\n----------------------------------------\n\nTITLE: Using NodesRef with SelectorQuery in Lynx Component Lifecycle\nDESCRIPTION: Example of using NodesRef in a React-like component to query the bounding rectangle of a text element. The code demonstrates creating a selector query, selecting a node by ID, invoking a method on it, and executing the query in the componentDidMount lifecycle method.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/lynx-api/nodes-ref.mdx#2025-04-17_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nclass Page extends Component {\n  componentDidMount() {\n    lynx\n      .createSelectorQuery() // create SelectorQuery\n      .select('#my-id') // Specify the selector of the target node\n      .invoke({\n        // Specify the operation for the target node\n        method: 'boundingClientRect',\n        success: function (res) {\n          console.log(res);\n        },\n        fail: function (res) {\n          console.log(res.code, res.data);\n        },\n      })\n      .exec(); // Execute the query\n  }\n\n  render() {\n    return (\n      <view>\n        <text id=\"my-id\">...</text>\n      </view>\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Object Format for Keyframes in animate() Method\nDESCRIPTION: Example of using the object format for defining keyframes in the animate() method, with keys as percentage offsets and values as keyframe definitions.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/lynx-api/lynx/lynx-animate-api.mdx#2025-04-17_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nelement.animate({\n  '0%': {\n    // from\n    opacity: 0,\n    color: '#fff',\n  },\n  '50%': {\n    // 50%\n    opacity: 0.5,\n    color: '#aaa',\n  },\n  '100%': {\n    // to\n    opacity: 1,\n    color: '#000',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Converting JSX to CreateElement Call\nDESCRIPTION: Example showing how the frontend framework processes an input tag into a __CreateElement function call within a main-thread.js file. This demonstrates the low-level implementation of component rendering.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/engine/element-api/__CreateElement.mdx#2025-04-17_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// main-thread.js\nlet element = __CreateElement('input', 0, {});\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Performance Metrics with Lynx Performance API\nDESCRIPTION: This code example demonstrates how to create a custom performance metric 'waitingDuration' by combining LoadBundleEntry and PipelineEntry data. It calculates the delay between first screen rendering and the first important data update, helping to monitor network requests and identify performance bottlenecks.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/guide/performance/evaluating-performance.mdx#2025-04-17_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Go } from '@lynx';\n\n<Go\n  example=\"performance-api\"\n  defaultFile=\"src/create_custom_performance_metric/index.tsx\"\n  img=\"https://lf-lynx.tiktok-cdns.com/obj/lynx-artifacts-oss-sg/lynx-website/assets/doc/create-custom-performance-metric.jpeg\"\n  highlight=\"{18-40}\"\n  entry=\"src/create_custom_performance_metric\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Defining useEffect Hook in TypeScript\nDESCRIPTION: Defines the useEffect hook function signature in TypeScript. It accepts an effect callback and an optional dependency list, and returns void.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/api/react/Function.useEffect.mdx#2025-04-17_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nfunction useEffect(effect: EffectCallback, deps?: DependencyList): void\n```\n\n----------------------------------------\n\nTITLE: Implementing NativeLocalStorageModule in Kotlin for Lynx Explorer on Android\nDESCRIPTION: This Kotlin code implements a NativeLocalStorageModule class that extends LynxModule. It provides methods for setting, getting, and clearing storage items using SharedPreferences. The @LynxMethod annotation is used to export methods to the Lynx runtime.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/guide/custom-native-modules/native-module-android.mdx#2025-04-17_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\npackage com.lynx.explorer.modules\n\nimport android.content.Context\nimport com.lynx.jsbridge.LynxMethod\nimport com.lynx.jsbridge.LynxModule\nimport com.lynx.tasm.behavior.LynxContext\n\nclass NativeLocalStorageModule(context: Context) : LynxModule(context) {\n  private val PREF_NAME = \"MyLocalStorage\"\n\n  private fun getContext(): Context {\n    val lynxContext = mContext as LynxContext\n    return lynxContext.getContext()\n  }\n\n  @LynxMethod\n  fun setStorageItem(key: String, value: String) {\n    val sharedPreferences = getContext().getSharedPreferences(PREF_NAME, Context.MODE_PRIVATE)\n    val editor = sharedPreferences.edit()\n    editor.putString(key, value)\n    editor.apply()\n  }\n\n  @LynxMethod\n  fun getStorageItem(key: String): String? {\n    val sharedPreferences = getContext().getSharedPreferences(PREF_NAME, Context.MODE_PRIVATE)\n    return sharedPreferences.getString(key, null)\n  }\n\n  @LynxMethod\n  fun clearStorage() {\n    val sharedPreferences = getContext().getSharedPreferences(PREF_NAME, Context.MODE_PRIVATE)\n    val editor = sharedPreferences.edit()\n    editor.clear()\n    editor.apply()\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: ScrollView Basic Structure\nDESCRIPTION: Demonstrates the recommended structure for implementing complex layouts within scroll-view.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/elements/built-in/scroll-view.mdx#2025-04-17_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n<scroll-view> scroll-y>\n  <view> // do anything you want\n  {...}\n  </view>\n</scroll-view>\n```\n\n----------------------------------------\n\nTITLE: Finding Views by ID Selector in Android\nDESCRIPTION: Java method to find a UI element based on its ID selector attribute. Returns a LynxBaseUI instance that matches the provided ID string specified in the layout file.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/lynx-native-api/lynx-view/find-view-by-idselector.mdx#2025-04-17_snippet_0\n\nLANGUAGE: java\nCODE:\n```\npublic LynxBaseUI findUIByIdSelector(String id);\n```\n\n----------------------------------------\n\nTITLE: Implementing Focus Method in Lynx Custom Input Component (Kotlin)\nDESCRIPTION: Kotlin implementation of the LynxExplorerInput custom component with a focus method that manages keyboard display and focus state. The component handles text changes and emits input events to the frontend.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/guide/custom-native-component/custom-component-android.mdx#2025-04-17_snippet_5\n\nLANGUAGE: kotlin\nCODE:\n```\nimport android.content.Context\nimport android.text.Editable\nimport android.text.TextWatcher\nimport android.view.inputmethod.InputMethodManager\nimport androidx.appcompat.widget.AppCompatEditText\nimport com.lynx.react.bridge.Callback\nimport com.lynx.react.bridge.ReadableMap\nimport com.lynx.tasm.behavior.LynxContext\nimport com.lynx.tasm.behavior.LynxProp\nimport com.lynx.tasm.behavior.LynxUIMethod\nimport com.lynx.tasm.behavior.LynxUIMethodConstants\nimport com.lynx.tasm.behavior.ui.LynxUI\nimport com.lynx.tasm.event.LynxCustomEvent\n\n\nclass LynxExplorerInput(context: LynxContext) : LynxUI<AppCompatEditText>(context) {\n\n  private fun showSoftInput(): Boolean {\n    val imm = lynxContext.getSystemService(Context.INPUT_METHOD_SERVICE) as InputMethodManager\n    return imm.showSoftInput(mView, InputMethodManager.SHOW_IMPLICIT, null)\n  }\n\n  @LynxUIMethod\n  fun focus(params: ReadableMap, callback: Callback) {\n    if (mView.requestFocus()) {\n      if (showSoftInput()) {\n        callback.invoke(LynxUIMethodConstants.SUCCESS)\n      } else {\n        callback.invoke(LynxUIMethodConstants.UNKNOWN, \"fail to show keyboard\")\n      }\n    } else {\n      callback.invoke(LynxUIMethodConstants.UNKNOWN, \"fail to focus\")\n    }\n  }\n\n  override fun createView(context: Context): AppCompatEditText {\n    return AppCompatEditText(context).apply {\n      addTextChangedListener(object : TextWatcher {\n        override fun beforeTextChanged(s: CharSequence?, start: Int, count: Int, after: Int) {}\n\n        override fun onTextChanged(s: CharSequence?, start: Int, before: Int, count: Int) {}\n\n        override fun afterTextChanged(s: Editable?) {\n          emitEvent(\"input\", mapOf(\"value\" to (s?.toString() ?: \"\")))\n        }\n      })\n    }\n  }\n\n  private fun emitEvent(name: String, value: Map<String, Any>?) {\n    val detail = LynxCustomEvent(sign, name)\n    value?.forEach { (key, v) ->\n      detail.addDetail(key, v)\n    }\n    lynxContext.eventEmitter.sendCustomEvent(detail)\n  }\n\n  override fun onLayoutUpdated() {\n    super.onLayoutUpdated()\n    val paddingTop = mPaddingTop + mBorderTopWidth\n    val paddingBottom = mPaddingBottom + mBorderBottomWidth\n    val paddingLeft = mPaddingLeft + mBorderLeftWidth\n    val paddingRight = mPaddingRight + mBorderRightWidth\n    mView.setPadding(paddingLeft, paddingTop, paddingRight, paddingBottom)\n  }\n\n  @LynxProp(name = \"value\")\n  fun setValue(value: String) {\n    if (value != mView.text.toString()) {\n      mView.setText(value)\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Simplifying Swiper Component with Custom Hooks\nDESCRIPTION: Refactored swiper component that uses custom hooks to encapsulate touch event handling and style updating logic, resulting in cleaner, more maintainable code.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/guide/start/tutorial-product-detail.mdx#2025-04-17_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nfunction Swiper() {\n  const { updateSwiperStyle, swiperContainerRef } = useUpdateSwiperStyle();\n  const { handleTouchStart, handleTouchMove, handleTouchEnd } = useOffset({\n    onOffsetUpdate: updateSwiperStyle,\n  });\n\n  return (\n    <view\n      class=\"swiper-container\"\n      ref={swiperContainerRef}\n      bindtouchstart={handleTouchStart}\n      bindtouchmove={handleTouchMove}\n      bindtouchend={handleTouchEnd}\n    >\n      {/* ... */}\n    </view>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: useState Hook with Initial State Parameter\nDESCRIPTION: TypeScript definition for useState hook that accepts an initial state parameter of type S. Returns a tuple containing the current state value and a dispatch function to update it.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/react/Function.useState.mdx#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction useState<S>(initialState: S | () => S): [S, Dispatch<SetStateAction<S>>]\n```\n\n----------------------------------------\n\nTITLE: Basic CSS Transition Property Usage\nDESCRIPTION: Examples demonstrating various ways to use the CSS transition property, including single property transitions, multiple property transitions, and global transitions. Shows different combinations of duration, delay, and timing functions.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/css/properties/transition.mdx#2025-04-17_snippet_0\n\nLANGUAGE: css\nCODE:\n```\n/* Apply to 1 property */\n/* property name | duration */\ntransition: background-color 4s;\n\n/* property name | duration | delay */\ntransition: opacity 4s 1s;\n\n/* property name | duration | easing function */\ntransition: background-color 4s ease-in-out;\n\n/* property name | duration | easing function | delay */\ntransition: background-color 4s ease-in-out 1s;\n\n/* Apply to 2 properties */\ntransition:\n  background-color 4s,\n  opacity 4s;\n\n/* Apply to all changed properties */\ntransition: all 0.5s ease-out;\n\n/* Clear all transition animation.*/\ntransition: none;\n```\n\n----------------------------------------\n\nTITLE: Using InitDataProvider in a React Application\nDESCRIPTION: Example showing how to implement InitDataProvider in a React application. It demonstrates wrapping an App component with InitDataProvider and using InitDataConsumer to access the provided data.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/api/react/Function.InitDataProvider.mdx#2025-04-17_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { root } from \"@lynx-js/react\"\n\nfunction App() {\n  return (\n    <InitDataConsumer children={(initData) => <view>...</view>}/>\n  )\n}\n\nroot.render(\n  <InitDataProvider>\n     <App/>\n  </InitDataProvider>\n);\n```\n\n----------------------------------------\n\nTITLE: createElement for DOM Elements\nDESCRIPTION: Generic type definition for creating React DOM elements with DOM attributes and class attributes.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/react/Function.createElement.mdx#2025-04-17_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nfunction createElement<P, T>(\n   type: string,\n   props?: null | ClassAttributes<T> & P, ...\nchildren?: ReactNode[]): DOMElement<P, T>\n```\n\n----------------------------------------\n\nTITLE: Rendering Templates in LynxView with Objective-C\nDESCRIPTION: Shows how to load and render a Lynx template from a URL in Objective-C. This final step completes the integration by displaying actual content in the LynxView.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/guide/start/fragments/ios/integrating-lynx-with-existing-app-ios.mdx#2025-04-17_snippet_10\n\nLANGUAGE: objective-c\nCODE:\n```\n#import <Lynx/LynxView.h>\n\n#import \"ViewController.h\"\n#import \"DemoLynxProvider.h\"\n\n@implementation ViewController\n\n- (void)viewDidLoad {\n  [super viewDidLoad];\n\n  // ...\n\n  [lynxView loadTemplateFromURL:@\"main.lynx\" initData:nil];\n}\n\n@end\n```\n\n----------------------------------------\n\nTITLE: UseOffset Hook Implementation\nDESCRIPTION: Demonstrates how to use the main thread easing function within the useOffset hook for animation control.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/guide/start/tutorial-product-detail.mdx#2025-04-17_snippet_15\n\nLANGUAGE: tsx\nCODE:\n```\nfunction useOffset({\n  duration,\n  MTEasing,\n}) {\n  ...\n  function handleTouchEnd(e: MainThread.TouchEvent) {\n    \"main thread\";\n    // ...\n    animate({\n      duration,\n      easing: MTEasing,\n    });\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Language Switching in React Component\nDESCRIPTION: This React component demonstrates how to use the i18next instance to switch between languages and display translated text. It uses the useEffect and useState hooks for managing component state and side effects.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/guide/inclusion/internationalization.mdx#2025-04-17_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useEffect, useState } from '@lynx-js/react';\n\nimport { i18n } from './i18n.js';\n\nexport function App() {\n  const [locale, setLocale] = useState('en');\n\n  useEffect(() => {\n    console.log('Hello, ReactLynx3 x i18next!');\n  }, []);\n\n  const getNextLocale = (locale: string) => {\n    // mock locales\n    const locales = [\"en\", \"zh-CN\"];\n    const index = locales.indexOf(locale);\n    return locales[(index + 1) % locales.length];\n  };\n  return (\n    <view>\n      <text style={{ color: 'red' }}>Current locale: {locale}</text>\n      <text\n        bindtap={async () => {\n          const nextLocale = getNextLocale(locale);\n          await i18n.changeLanguage(nextLocale);\n          setLocale(nextLocale);\n        }}\n      >\n        Tap to change locale\n      </text>\n      <text>Hello, {i18n.t('world')}</text>\n    </view>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Using MainThreadRef in React Component\nDESCRIPTION: Example showing how to use useMainThreadRef in a React component to manage a reference to a view element and handle tap events on the main thread.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/react/Function.useMainThreadRef.mdx#2025-04-17_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useMainThreadRef } from '@lynx-js/react'\nimport type { MainThread } from '@lynx-js/types'\n\nexport function App() {\n  const ref = useMainThreadRef<MainThread.Element>(null)\n\n  const handleTap = () => {\n    'main thread'\n    ref.current?.setStyleProperty('background-color', 'blue')\n  }\n\n  return (\n    <view\n      main-thread:ref={ref}\n      main-thread:bindtap={handleTap}\n      style={{ width: '300px', height: '300px' }}\n    />\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Handling User Clicks in Main Thread with Lynx TSX\nDESCRIPTION: Example of handling a tap event in the main thread using a Lynx main thread script. Demonstrates modifying the background color of the clicked element.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/guide/interaction/event-handling.mdx#2025-04-17_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nconst handleTap = (e: TapEvent) => {\n  'main thread';\n  const currentTarget = e.currentTarget as MainThreadElement;\n  if (currentTarget.style.backgroundColor === 'blue') {\n    currentTarget.setStyleProperty('backgroundColor', 'red');\n  } else {\n    currentTarget.setStyleProperty('backgroundColor', 'blue');\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Scrollbar Event Handling in Lynx React\nDESCRIPTION: This code demonstrates how to add a bindscroll event to a list element and handle scrolling events to adjust a custom scrollbar's position in a Lynx application.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/guide/start/tutorial-gallery.mdx#2025-04-17_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\n...\nconst onScroll = (event: ScrollEvent) => {\n  scrollbarRef.current?.adjustScrollbar(\n    event.detail.scrollTop,\n    event.detail.scrollHeight\n  );\n};\n...\n<list\n  ref={galleryRef}\n  className=\"list\"\n  list-type=\"waterfall\"\n  column-count={2}\n  scroll-orientation=\"vertical\"\n  custom-list-name=\"list-container\"\n  bindscroll={onScroll}\n>\n...\n```\n\n----------------------------------------\n\nTITLE: CSS justify-content Property Syntax Examples\nDESCRIPTION: Examples of different justify-content values showing both positional alignment options (center, start, end, flex-start, flex-end) and distributed alignment options (space-between, space-around, space-evenly, stretch).\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/css/properties/justify-content.mdx#2025-04-17_snippet_0\n\nLANGUAGE: css\nCODE:\n```\n/* Positional alignment */\njustify-content: center; /* Pack items around the center */\njustify-content: start; /* Pack items from the start */\njustify-content: end; /* Pack items from the end */\njustify-content: flex-start; /* Pack flex items from the start */\njustify-content: flex-end; /* Pack flex items from the end */\n\n/* Distributed alignment */\njustify-content: space-between; /* Distribute items evenly\n                                   The first item is flush with the start,\n                                   the last is flush with the end */\njustify-content: space-around; /* Distribute items evenly\n                                   Start and end gaps are half the size of the space\n                                   between each item */\njustify-content: space-evenly; /* Distribute items evenly\n                                   Start, in-between, and end gaps have equal sizes */\njustify-content: stretch; /* Distribute items evenly\n                                   Stretch 'auto'-sized items to fit\n                                   the container */\n```\n\n----------------------------------------\n\nTITLE: Text Truncation with Ellipsis in Lynx\nDESCRIPTION: Demonstrates how to implement text truncation with ellipsis in Lynx using the text-maxline attribute and textOverflow property, useful for handling long text in limited space.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/guide/styling/text-and-typography.mdx#2025-04-17_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\n<text text-maxline={'1'} style={{ textOverflow: 'ellipsis' }}>\n  This is an extremely long text.\n</text>\n```\n\n----------------------------------------\n\nTITLE: Enabling DevTool in Android (Kotlin)\nDESCRIPTION: This code demonstrates how to enable Lynx Debug, DevTool, and LogBox in an Android application using Kotlin. It shows the configuration during Lynx Environment Initialization.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/guide/start/integrate-lynx-devtool.mdx#2025-04-17_snippet_8\n\nLANGUAGE: kotlin\nCODE:\n```\nprivate fun initLynxEnv() {\n  LynxEnv.inst().init(this, null, null, null)\n  // Enable Lynx Debug\n  LynxEnv.inst().enableLynxDebug(true)\n  // Enable Lynx DevTool\n  LynxEnv.inst().enableDevtool(true)\n  // Enable Lynx LogBox\n  LynxEnv.inst().enableLogBox(true)\n}\n```\n\n----------------------------------------\n\nTITLE: Defining CreateRspeedyOptions.environment Property in TypeScript\nDESCRIPTION: This code snippet defines the 'environment' property for the CreateRspeedyOptions interface. It allows specifying which environments to build, defaulting to all environments if not specified or if an empty array is provided.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/rspeedy/rspeedy.createrspeedyoptions.environment.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nenvironment?: CreateRsbuildOptions['environment'];\n```\n\n----------------------------------------\n\nTITLE: Using React Fragment with Shorthand Syntax\nDESCRIPTION: Example of using the React Fragment component with the shorthand syntax <></>. This provides a more concise way to group elements without a wrapper.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/react/Function.Fragment.mdx#2025-04-17_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n// Using the <></> shorthand syntax:\n\n<>\n  <td>Hello</td>\n  <td>World</td>\n</>\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic Lynx Dependencies in Gradle\nDESCRIPTION: Core Lynx dependencies setup including lynx engine, jssdk, trace and primjs modules required for basic Lynx functionality.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/guide/start/fragments/android/integrating-lynx-with-existing-app-android.mdx#2025-04-17_snippet_0\n\nLANGUAGE: groovy\nCODE:\n```\ndependencies {\n    // lynx dependencies\n    implementation \"org.lynxsdk.lynx:lynx:3.2.0-rc.0\"\n    implementation \"org.lynxsdk.lynx:lynx-jssdk:3.2.0-rc.0\"\n    implementation \"org.lynxsdk.lynx:lynx-trace:3.2.0-rc.0\"\n    implementation \"org.lynxsdk.lynx:primjs:2.11.1-rc.0\"\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Auto-Scroll for Gallery in Lynx React\nDESCRIPTION: This snippet shows how to use the useEffect hook to call the autoScroll method on a list element, enabling automatic scrolling of images in a gallery.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/guide/start/tutorial-gallery.mdx#2025-04-17_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nuseEffect(() => {\n  listRef.current\n    ?.invoke({\n      method: 'autoScroll',\n      params: {\n        rate: '60',\n        start: true,\n      },\n    })\n    .exec();\n}, []);\n```\n\n----------------------------------------\n\nTITLE: Implementing shouldComponentUpdate in React Component Class\nDESCRIPTION: Type definition for the shouldComponentUpdate lifecycle method that determines whether a component should re-render after state or props changes. It receives next props, state, and context, and returns a boolean.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/api/react/Class.Component.mdx#2025-04-17_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\noptional shouldComponentUpdate(\n   nextProps: Readonly<P>,\n   nextState: Readonly<S>,\n   nextContext: any): boolean\n```\n\n----------------------------------------\n\nTITLE: Rendering Templates in LynxView with Swift\nDESCRIPTION: Shows how to load and render a Lynx template from a URL in Swift. This final step completes the integration by displaying actual content in the LynxView.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/guide/start/fragments/ios/integrating-lynx-with-existing-app-ios.mdx#2025-04-17_snippet_11\n\nLANGUAGE: swift\nCODE:\n```\nimport UIKit\n\nclass ViewController: UIViewController {\n\n  override func viewDidLoad() {\n    super.viewDidLoad()\n\n    // ...\n\n    lynxView.loadTemplate(fromURL: \"main.lynx\", initData: nil)\n  }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Conditional Lazy Loading\nDESCRIPTION: Example of conditionally loading a lazy component based on user interaction using useState.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/react/code-splitting.md#2025-04-17_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Suspense, lazy, useState } from '@lynx-js/react';\n\nconst LazyComponent = lazy(() => import('./LazyComponent.jsx'));\n\nexport function App() {\n  const [shouldDisplay, setShouldDisplay] = useState(false);\n  const handleClick = () => {\n    setShouldDisplay(true);\n  };\n  return (\n    <view>\n      <view bindtap={handleClick}>Load Component</view>\n      {shouldDisplay && (\n        <Suspense fallback={<text>Loading...</text>}>\n          <LazyComponent />\n        </Suspense>\n      )}\n    </view>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Using MainThreadRef in Class Components\nDESCRIPTION: Example showing how to use MainThreadRef directly in class components since Hooks cannot be used in class components. This creates a reference object for accessing main thread elements.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/react/main-thread-script.mdx#2025-04-17_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nimport { MainThreadRef } from '@lynx-js/react';\n\nclass App extends Component {\n  eleRef = new MainThreadRef<MainThread.Element>();\n\n  handleTapMainThread(event: MainThread.ITouchEvent) {\n    'main thread';\n    this.eleRef.current?.setStyleProperty('height', '30px');\n  }\n\n  render() {\n    // ...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Basic getElementById Syntax in Lynx\nDESCRIPTION: Demonstrates the basic syntax for using getElementById to obtain an element reference. Takes an id parameter and returns a NodeRef.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/lynx-api/lynx/lynx-get-element-by-id.mdx#2025-04-17_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nlet element = lynx.getElementById(id);\n```\n\n----------------------------------------\n\nTITLE: Basic Text Element Usage in Lynx\nDESCRIPTION: Shows the correct way to display text in Lynx using the <text> element, as opposed to HTML where text can be placed directly inside a div.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/guide/styling/text-and-typography.mdx#2025-04-17_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n//❌ This won't work\n<view>hello world</view>\n\n//✅ Use the <text> component\n<text>hello world</text>\n```\n\n----------------------------------------\n\nTITLE: Registering Default Data Processor\nDESCRIPTION: Code snippet showing how to register a default data processor that normalizes data formats across platforms. This demonstrates how to transform raw data before it's consumed in components.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/guide/use-data-from-host-platform.mdx#2025-04-17_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nimport { root } from '@lynx-js/react';\nimport { App } from './App.js';\n\nlynx.registerDataProcessors({\n  defaultDataProcessor: function (rawInitData) {\n    const { pageTitle, page_title, ...rest } = rawInitData;\n    return {\n      ...rest,\n      pageTitle: pageTitle || page_title,\n    };\n  },\n});\nroot.render(<App />);\n\nif (import.meta.webpackHot) {\n  import.meta.webpackHot.accept();\n}\n```\n\n----------------------------------------\n\nTITLE: Structuring Exposure Event in JSON for Lynx GlobalEvent\nDESCRIPTION: Defines the structure of the 'exposure' event in the GlobalEvent object. It includes details about a node that has become visible, such as exposure ID, scene, and dataset.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/lynx-api/event/global-event.mdx#2025-04-17_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"exposure-id\": string,      // exposure-id set on the target node\n    \"exposure-scene\": string,   // exposure-scene set on the target node\n    \"sign\": string,             // uid of the target node\n    \"dataset\": object,          // \"data-\" field set on the target node\n    //......\n  },\n  //......\n]\n```\n\n----------------------------------------\n\nTITLE: GlobalEventEmitter Event Subscription in Lynx\nDESCRIPTION: Example demonstrating how to subscribe to events using GlobalEventEmitter in Lynx, allowing components to receive events from the Lynx framework itself, such as window resize events.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/guide/interaction/event-handling/event-propagation.mdx#2025-04-17_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nuseEffect(() => {\n  globalEventEmitter.addListener(\"onWindowResize\", updateSize);\n}, []);\n```\n\n----------------------------------------\n\nTITLE: Fetching Data with Fetch API in TypeScript\nDESCRIPTION: Demonstrates a basic GET request using the Fetch API to retrieve data from a remote URL. This snippet shows the simplest form of using fetch without any additional options.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/guide/interaction/networking.mdx#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfetch('https://jsonplaceholder.typicode.com/todos/1');\n```\n\n----------------------------------------\n\nTITLE: Configuring CSS Modules with Additional Options in RSpeedy\nDESCRIPTION: Example of enabling CSS Modules with additional configuration options, such as enabling named exports, in the RSpeedy configuration.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/rspeedy/rspeedy.cssloader.modules.md#2025-04-17_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineConfig } from '@lynx-js/rspeedy'\n\nexport default defineConfig({\n  tools: {\n    cssLoader: {\n      modules: {\n        namedExport: true,\n      },\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Querying Node Properties with SelectorQuery in Lynx (TSX)\nDESCRIPTION: This example demonstrates how to use SelectorQuery to get the position and size of a specified 'text' node in a Lynx component. It creates a SelectorQuery, selects a node by ID, invokes the 'boundingClientRect' method, and executes the query.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/lynx-api/selector-query.mdx#2025-04-17_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nclass Page extends Component {\n  componentDidMount() {\n    lynx\n      .createSelectorQuery() // create SelectorQuery\n      .select('#my-id') // Specify the selector of the target node\n      .invoke({\n        // Specify the operation for the target node\n        method: 'boundingClientRect',\n        success: function (res) {\n          console.log(res);\n        },\n        fail: function (res) {\n          console.log(res.code, res.data);\n        },\n      })\n      .exec(); // Execute the query\n  }\n\n  render() {\n    return (\n      <view>\n        <text id=\"my-id\">...</text>\n      </view>\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Button Component with forwardRef\nDESCRIPTION: Example implementation of a button component using forwardRef to expose the underlying HTMLButtonElement ref. Includes TypeScript interface for props and demonstrates proper ref forwarding.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/api/react/Function.forwardRef.mdx#2025-04-17_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\ninterface Props {\n  children?: ReactNode;\n  type: \"submit\" | \"button\";\n}\n\nexport const FancyButton = forwardRef<HTMLButtonElement, Props>((props, ref) => (\n  <button ref={ref} className=\"MyClassName\" type={props.type}>\n    {props.children}\n  </button>\n));\n```\n\n----------------------------------------\n\nTITLE: Implementing Suspense Boundary\nDESCRIPTION: Shows how to implement Suspense boundary for lazy loaded components with loading fallback.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/react/code-splitting.md#2025-04-17_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Suspense, lazy } from '@lynx-js/react';\n\nconst LazyComponent = lazy(() => import('./LazyComponent.jsx'));\n\nexport function App() {\n  return (\n    <view>\n      <Suspense fallback={<text>Loading...</text>}>\n        <LazyComponent />\n      </Suspense>\n    </view>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing InitLynxviewEntry in TypeScript\nDESCRIPTION: This snippet demonstrates how to retrieve and use the InitLynxviewEntry object, which provides timing information for LynxView initialization.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/api/lynx-api/performance-api/performance-entry/init-lynxview-entry.mdx#2025-04-17_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useEffect } from 'react';\nimport { PerformanceObserver } from '@lynx';\n\nexport default function App() {\n  useEffect(() => {\n    const observer = new PerformanceObserver((list) => {\n      list.getEntries().forEach((entry) => {\n        if (entry.entryType === 'init' && entry.name === 'lynxview') {\n          // InitLynxviewEntry\n          console.log('CreateLynxStart:', entry.createLynxStart);\n          console.log('CreateLynxEnd:', entry.createLynxEnd);\n          console.log(\n            'CreateLynxDuration:',\n            entry.createLynxEnd - entry.createLynxStart\n          );\n        }\n      });\n    });\n    observer.observe({ type: 'init' });\n    return () => observer.disconnect();\n  }, []);\n\n  return <div>InitLynxviewEntry Demo</div>;\n}\n```\n\n----------------------------------------\n\nTITLE: Scrolling to Position in Lynx List Component (TSX)\nDESCRIPTION: This snippet demonstrates how to use the scrollToPosition method to scroll a <list> component to a specified position. It includes parameters for position, offset, alignment, and smooth scrolling.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/elements/built-in/list.mdx#2025-04-17_snippet_30\n\nLANGUAGE: tsx\nCODE:\n```\nthis.createSelectorQuery()\n  .select('#id_of_list')\n  .invoke({\n    method: 'scrollToPosition',\n    params: {\n      position: 10,\n      offset: 100,\n      alignTo: 'top',\n      smooth: true,\n    },\n    success: function (res) {},\n    fail: function (res) {},\n  })\n  .exec();\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic File Watching in JavaScript\nDESCRIPTION: This example demonstrates how to configure basic file watching using the watchFiles property. It specifies paths to watch for changes in the src and public directories.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/api/rspeedy/rspeedy.dev.watchfiles.md#2025-04-17_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineConfig } from '@lynx-js/rspeedy'\n\nexport default defineConfig({\n  dev: {\n    watchFiles: {\n      paths: ['src/**', 'public/**'],\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Handling Accessibility Focus Changes in TSX\nDESCRIPTION: Example component showing how to listen for accessibility focus changes using the GlobalEventEmitter. Implements event listener setup in componentDidMount and handles focus change events.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/guide/inclusion/accessibility.mdx#2025-04-17_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nexport default class App extends Component<Props, State> {\n  componentDidMount() {\n    // Listen for focus changes\n    this.getJSModule('GlobalEventEmitter').addListener(\n      'activeElement',\n      this.handleActiveElement,\n      this,\n    );\n  }\n\n  handleActiveElement(info: any) {\n    this.setState({\n      activeElementJsonStr: JSON.stringify(info),\n    });\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Rspeedy with TypeScript\nDESCRIPTION: Example of using defineConfig() to create a typed configuration file for Rspeedy with TypeScript intellisense support. Shows basic setup with an entry point configuration.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/rspeedy/rspeedy.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineConfig } from '@lynx-js/rspeedy'\nexport default defineConfig({\n  entry: './src/index.tsx',\n})\n```\n\n----------------------------------------\n\nTITLE: React Component with ESModule Imports\nDESCRIPTION: Demonstrates ESModule static and dynamic imports in a React component, including npm package imports and async/await syntax.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/guide/scripting-runtime/index.mdx#2025-04-17_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Component } from '@lynx-js/react';\nimport { capitalize } from 'lodash';\n\nexport default App extends Component {\n  constructor(props) {\n    super(props);\n    // can dynamic import relative path\n    import('./utils.js').then(utils => {\n      capitalize(utils.getSum());\n    });\n  }\n  async componentDidMount() {\n    const utils = await import('./utils.js');\n    utils.getAge();\n  }\n  render() {\n    return <view><text>Hello, world!</text></view>;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining useCallback Function Signature in TypeScript\nDESCRIPTION: This code snippet defines the TypeScript signature for the useCallback function in React. It specifies the generic type parameter, input parameters, and return type.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/react/Function.useCallback.mdx#2025-04-17_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nfunction useCallback<T>(callback: T, deps: DependencyList): T\n```\n\n----------------------------------------\n\nTITLE: Clipping Content with clip-path in Lynx CSS\nDESCRIPTION: This example shows how to use the clip-path property in Lynx CSS to create a super-elliptical clipping area for an element's content.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/guide/styling/appearance.mdx#2025-04-17_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Go\n  img=\"https://lf-lynx.tiktok-cdns.com/obj/lynx-artifacts-oss-sg/lynx-website/assets/doc/guide-clip-path.png\"\n  example=\"css\"\n  defaultFile=\"src/clip_path_super_ellipse/index.tsx\"\n  defaultEntryFile=\"dist/clip_path_super_ellipse.lynx.bundle\"\n  highlight=\"{14}\"\n  entry=\"src/clip_path_super_ellipse\"\n></Go>\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Property Interpolation in CSS @keyframes\nDESCRIPTION: Example showing how properties that aren't specified in every keyframe are interpolated across the animation. This snippet demonstrates background-color and opacity transitions across multiple percentage-based keyframes.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/css/at-rule/keyframes.mdx#2025-04-17_snippet_0\n\nLANGUAGE: css\nCODE:\n```\n@keyframes identifier {\n  0% {\n    background-color: blue;\n    opacity: 0;\n  }\n  30% {\n    opacity: 0.3;\n  }\n  72% {\n    background-color: yellow;\n  }\n  100% {\n    opacity: 1;\n    background-color: red;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining useImperativeHandle Function in TypeScript for React\nDESCRIPTION: This snippet defines the useImperativeHandle function, which customizes the instance value exposed to parent components when using refs. It takes a ref, an init function, and optional dependencies as parameters, and returns void.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/react/Function.useImperativeHandle.mdx#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction useImperativeHandle<T, R>(\n   ref: undefined | Ref<T>,\n   init: () => R,\n   deps?: DependencyList): void\n```\n\n----------------------------------------\n\nTITLE: Cross-Component Event Listening Implementation in React and TypeScript\nDESCRIPTION: Example demonstrating global-bind event listening in Lynx, allowing components to listen to events even when they're not in the direct event response chain. It shows how to track events from any part of the application.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/guide/interaction/event-handling/event-propagation.mdx#2025-04-17_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nglobal-bind:onTap={() => {\n  setCountGlobalA(countGlobalA + 1);\n}}\n```\n\nLANGUAGE: tsx\nCODE:\n```\nglobal-bind:onTap={() => {\n  setCountGlobalB(countGlobalB + 1);\n}}\n```\n\nLANGUAGE: tsx\nCODE:\n```\n<Text>Global A listened taps: {countGlobalA}</Text>\n<Text>Global B listened taps: {countGlobalB}</Text>\n```\n\nLANGUAGE: tsx\nCODE:\n```\nglobal-target=\"counter-a\"\nglobal-bind:onTap={() => setCountTargetA(countTargetA + 1)}\n```\n\n----------------------------------------\n\nTITLE: Implementing Jotai State Management in Lynx Applications\nDESCRIPTION: This example demonstrates how to use Jotai for state management in a Lynx application. It creates an atom for a counter, uses the useAtom hook to access and update the state, and implements effects to monitor state changes. The component renders the counter value and provides a tap interaction to increment it.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/react/state-management/jotai.mdx#2025-04-17_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useEffect } from '@lynx-js/react';\nimport { atom, useAtom } from 'jotai';\n\nconst counter = atom(0);\n\nexport function App() {\n  const [count, setCounter] = useAtom(counter);\n\n  useEffect(() => {\n    console.log('count changed:', count);\n  }, [count]);\n\n  return (\n    <view>\n      <text>{count}</text>\n      <text bindtap={() => setCounter((prev) => prev + 1)}>Tap</text>\n    </view>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Object Definition Example\nDESCRIPTION: Illustrates using define with nested objects, showing configuration and resulting code transformation.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/rspeedy/rspeedy.source.define.md#2025-04-17_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineConfig } from '@lynx-js/rspeedy'\nexport default defineConfig({\n  source: {\n    define: {\n      'import.meta': {\n        foo: JSON.stringify('foo'),\n        bar: { baz: 0 },\n      },\n    },\n  },\n})\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconsole.log(import.meta)\n\n// ⬇️ Turn into being...\nconsole.log({ foo: \"foo\", bar: { baz: 0 } })\n```\n\n----------------------------------------\n\nTITLE: Programmatically Focusing Accessibility Elements in TypeScript\nDESCRIPTION: Demonstrates how to programmatically focus on an accessibility element using the requestAccessibilityFocus method through a selector query.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/guide/inclusion/accessibility.mdx#2025-04-17_snippet_1\n\nLANGUAGE: ts\nCODE:\n```\nlynx\n  .createSelectorQuery()\n  .select('#customId')\n  .invoke({\n    method: 'requestAccessibilityFocus',\n    params: {},\n    success: function (res) {\n      console.log(res);\n    },\n    fail: function (res) {\n      console.log(res);\n    },\n  })\n  .exec();\n```\n\n----------------------------------------\n\nTITLE: Listening for User Click Events in Lynx TSX\nDESCRIPTION: Demonstrates how to set up event listeners for tap events on view components in Lynx. Shows both background thread and main thread event handling.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/guide/interaction/event-handling.mdx#2025-04-17_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n<view bindtap={handleTap} />\n```\n\nLANGUAGE: tsx\nCODE:\n```\n<view main-thread:bindtap={handleTapInMTS} />\n```\n\n----------------------------------------\n\nTITLE: Defining Grid Column Templates with CSS\nDESCRIPTION: Examples of various ways to use the grid-template-columns property in CSS, including keyword values, track lists, and functions.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/css/properties/grid-template-columns.mdx#2025-04-17_snippet_0\n\nLANGUAGE: css\nCODE:\n```\n/* Keyword value */\ngrid-template-columns: none;\n\n/* <track-list> values */\ngrid-template-columns: 100px 1fr;\ngrid-template-columns: minmax(100px, 1fr);\ngrid-template-columns: fit-content(40%);\ngrid-template-columns: repeat(3, 200px);\n```\n\n----------------------------------------\n\nTITLE: Configuring PostCSS with px-to-viewport in Rspeedy\nDESCRIPTION: Example of a PostCSS configuration file (postcss.config.js) that uses the postcss-px-to-viewport plugin to convert pixel units to viewport units based on a 375px viewport width.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/rspeedy/styling.mdx#2025-04-17_snippet_14\n\nLANGUAGE: js\nCODE:\n```\nexport default {\n  plugins: {\n    'postcss-px-to-viewport': {\n      viewportWidth: 375,\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Intersection Observer in Lynx with TypeScript and JSX\nDESCRIPTION: This code snippet demonstrates how to create and use an IntersectionObserver in Lynx to monitor the intersection between parent and child nodes. It sets up an observer, specifies thresholds, and logs intersection details when changes occur.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/guide/interaction/visibility-detection/intersection-observer.mdx#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport React, { useEffect, useRef } from 'react';\nimport { View, Text, lynx } from '@lynx/base';\n\nexport default function App() {\n  const parentRef = useRef(null);\n  const childRefs = useRef([]);\n\n  useEffect(() => {\n    const observer = lynx.createIntersectionObserver({\n      thresholds: [0, 0.5, 1],\n    });\n    observer.relativeTo(parentRef.current);\n    childRefs.current.forEach((child, index) => {\n      observer.observe(child, (entries) => {\n        console.log(\n          `Child ${index + 1} intersecting:`,\n          entries[0].intersectionRatio > 0\n        );\n        console.log(`Intersection ratio:`, entries[0].intersectionRatio);\n      });\n    });\n    return () => observer.disconnect();\n  }, []);\n\n  return (\n    <View style={styles.container}>\n      <View ref={parentRef} style={styles.parent}>\n        {[...Array(20)].map((_, index) => (\n          <View\n            key={index}\n            ref={(el) => (childRefs.current[index] = el)}\n            style={styles.child}\n          >\n            <Text>Child {index + 1}</Text>\n          </View>\n        ))}\n      </View>\n    </View>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Using Lynx API Methods in TypeScript\nDESCRIPTION: Example usage of Lynx API methods including querySelector, querySelectorAll, and registerDataProcessors. These methods allow for DOM manipulation and data processing configuration in ReactLynx applications.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/react/Interface.Lynx.mdx#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nlynx.registerDataProcessors(...);\nlynx.querySelector(...);\nlynx.querySelectorAll(...);\n```\n\n----------------------------------------\n\nTITLE: Defining ListScrollEvent Interface in TypeScript\nDESCRIPTION: Defines the interface for ListScrollEvent, which is used in the scroll event of the <list> component. It includes details about scroll positions, dimensions, and attached cells.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/elements/built-in/list.mdx#2025-04-17_snippet_27\n\nLANGUAGE: tsx\nCODE:\n```\nbindscroll?: EventHandler<ListScrollEvent>;\n\ninterface ListScrollEvent {\n  // Horizontal scroll offset since the last scroll, in px\n  deltaX: number;\n  // Vertical scroll offset since the last scroll, in px\n  deltaY: number;\n  // Current horizontal scroll offset, in px\n  scrollLeft: number;\n  // Current vertical scroll offset, in px\n  scrollTop: number;\n  // Current content area width, in px\n  scrollWidth: number;\n  // Current content area height, in px\n  scrollHeight: number;\n  // `<list>` width, in px\n  listWidth: number;\n  // `<list>` height, in px\n  listHeight: number;\n  // Scroll event source\n  eventSource: ListEventSource;\n  // Position information of the currently rendering node\n  attachedCells: [\n    {\n      \"id\": number,        // Node id\n      \"itemKey\": string,   // Node item-key\n      \"index\": number,     // Node index in list\n      \"left\": number,      // Node left boundary position relative to list, in px\n      \"top\": number,       // Node top boundary position relative to list, in px\n      \"right\": number,     // Node right boundary position relative to list, in px\n      \"bottom\": number,    // Node bottom boundary position relative to list, in px\n    },\n  ];\n}\n\nenum ListEventSource {\n  DIFF = 0,\n  LAYOUT = 1,\n  SCROLL = 2,\n}\n```\n\n----------------------------------------\n\nTITLE: Applying Background, Border, and Shadow Effects in Lynx CSS\nDESCRIPTION: This snippet demonstrates how to apply a gradient background, styled borders, rounded corners, and a shadow effect to an element using Lynx CSS properties.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/guide/styling/appearance.mdx#2025-04-17_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<Go\n  img=\"https://lf-lynx.tiktok-cdns.com/obj/lynx-artifacts-oss-sg/lynx-website/assets/doc/guide-border-background-shadow.png\"\n  highlight=\"{8-12}\"\n  example=\"css\"\n  defaultFile=\"src/border_background_shadow/index.tsx\"\n  defaultEntryFile=\"dist/border_background_shadow.lynx.bundle\"\n  entry=\"src/border_background_shadow\"\n></Go>\n```\n\n----------------------------------------\n\nTITLE: Implementing Zustand State Management in Lynx React Component\nDESCRIPTION: This snippet demonstrates how to create a Zustand store and use it within a Lynx React component. It includes a simple counter state with an increment action, and shows how to access and update the state in a component.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/react/state-management/zustand.mdx#2025-04-17_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useEffect } from '@lynx-js/react';\nimport { create } from 'zustand';\n\ntype State = {\n  count: number;\n};\n\ntype Action = {\n  increment: () => void;\n};\n\nconst useStore = create<State & Action>((set) => ({\n  count: 0,\n  increment: () => set((state) => ({ count: state.count + 1 })),\n}));\n\nexport function App() {\n  const { count, increment } = useStore();\n\n  useEffect(() => {\n    console.log('count changed:', count);\n  }, [count]);\n\n  return (\n    <view>\n      <text>{count}</text>\n      <text bindtap={increment}>Tap</text>\n    </view>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling CSS Modules for Performance\nDESCRIPTION: Example configuration showing how to disable CSS Modules for better performance when using vanilla CSS or alternative styling solutions.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/api/rspeedy/rspeedy.cssloader.modules.md#2025-04-17_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineConfig } from '@lynx-js/rspeedy'\n\nexport default defineConfig({\n  tools: {\n    cssLoader: {\n      modules: false,\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Invoking Background Thread Functions from Main Thread in Lynx.js React\nDESCRIPTION: This snippet shows how to use runOnBackground() to asynchronously execute a regular function on the background thread from the main thread. It uses useState for state management.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/react/main-thread-script.mdx#2025-04-17_snippet_9\n\nLANGUAGE: jsx\nCODE:\n```\nimport { runOnBackground, useState } from '@lynx-js/react';\n\nfunction App() {\n  const [count, setCount] = useState(1);\n\n  const increaseBackgroundCount = async (event) => {\n    'main thread';\n    const result = await runOnBackground(() => {\n      let count;\n      setCount((c) => {\n        return (count = c + 1);\n      });\n      return count;\n    })();\n    console.log(result);\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Constructing a React Component in TypeScript\nDESCRIPTION: Shows two constructor signatures for creating a new Component instance with props and optional context.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/react/Class.Component.mdx#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nnew Component<P, S, SS>(props: P): Component<P, S, SS>\n```\n\nLANGUAGE: typescript\nCODE:\n```\nnew Component<P, S, SS>(props: P, context: any): Component<P, S, SS>\n```\n\n----------------------------------------\n\nTITLE: Monitoring Node-Specific Exposure in Lynx\nDESCRIPTION: This example demonstrates how to listen for exposure events on a specific node using event handler properties. It outputs the exposed node's id when exposed.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/guide/interaction/visibility-detection/exposure-ability.mdx#2025-04-17_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Go } from '@lynx';\n\nexport default function App() {\n  const onAppear = (e) => {\n    console.log('appear', e.detail);\n  };\n\n  const onDisappear = (e) => {\n    console.log('disappear', e.detail);\n  };\n\n  return (\n    <ScrollView>\n      <View\n        id=\"target\"\n        binduiappear={onAppear}\n        binduidisappear={onDisappear}\n      >\n        Target Node\n      </View>\n    </ScrollView>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Element Reference Creation in Lynx\nDESCRIPTION: Shows how to create and bind an element reference using useRef in Lynx framework. The reference is typed as NodesRef which is specific to Lynx.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/guide/interaction/event-handling/manipulating-element.react.mdx#2025-04-17_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nconst nodeRef = useRef<NodesRef>(null);\n// ...\n<text ref={nodeRef} />;\n```\n\n----------------------------------------\n\nTITLE: Defining setState Method in React TypeScript\nDESCRIPTION: Method for updating component state. It accepts a state object or a function that returns a state object, and an optional callback function.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/api/react/Class.PureComponent.mdx#2025-04-17_snippet_6\n\nLANGUAGE: TypeScript\nCODE:\n```\nsetState<K>(state: null | S | (prevState: Readonly<S>, props: Readonly<P>) => null | S | Pick<S, K> | Pick<S, K>, callback?: () => void): void\n```\n\n----------------------------------------\n\nTITLE: CssLoader Interface Definition in TypeScript\nDESCRIPTION: TypeScript interface definition for CssLoader that controls css-loader options.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/rspeedy/rspeedy.cssloader.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface CssLoader \n```\n\n----------------------------------------\n\nTITLE: Defining CssLoaderModules Auto Property in TypeScript\nDESCRIPTION: Type definition for the auto property that controls CSS module enablement. The property can accept a boolean, RegExp, function, or undefined value to determine which files should be processed as CSS modules.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/rspeedy/rspeedy.cssloadermodules.auto.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nauto?: boolean | RegExp | ((filename: string) => boolean) | undefined;\n```\n\n----------------------------------------\n\nTITLE: Implementing autoScroll in Lynx ScrollView Component\nDESCRIPTION: Demonstrates how to trigger automatic scrolling in a scroll-view component using the autoScroll method. The implementation allows setting the scrolling speed and enabling/disabling the auto-scroll functionality.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/elements/built-in/scroll-view.mdx#2025-04-17_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n<`<scroll-view>`id=\"scroll\"/>\n\nlynx.createSelectorQuery()\n  .select(`#scroll`)\n  .invoke({\n     method: 'autoScroll',\n      params: {\n        rate: 120, // Scrolling speed, distance per second (unit: px/sec)\n        start: true // Start or stop auto-scrolling\n      },\n  })\n  .exec();\n```\n\n----------------------------------------\n\nTITLE: Applying Transform with setNativeProps in JSX\nDESCRIPTION: This example shows how to use setNativeProps to apply a transform property to a text node when its parent view is tapped.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/lynx-api/nodes-ref/nodes-ref-set-native-props.mdx#2025-04-17_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nfunction App() {\n  return (\n    <view\n      bindtap={() => {\n        lynx\n          .createSelectorQuery()\n          .select('#intro')\n          .setNativeProps({\n            transform: 'translateY(3px)',\n          })\n          .exec();\n      }}\n    >\n      <text id=\"intro\">Hello, World!</text>\n    </view>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Specifying a Default Entry File in the Go Component\nDESCRIPTION: Demonstrates how to specify a default entry file for the Go component using the defaultEntryFile prop.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/src/components/go/README.md#2025-04-17_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\n<Go\n  example=\"animation\"\n  defaultFile=\"src/transition_animation/index.tsx\"\n  defaultEntryFile=\"dist/transition_animation.lynx.bundle\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Using requestResourcePrefetch in a React Component\nDESCRIPTION: This example demonstrates how to use the requestResourcePrefetch method within a React component. It shows preloading of images and videos, and how to render them conditionally based on a state variable.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/lynx-api/lynx/lynx-request-resource-prefetch.mdx#2025-04-17_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useState, useEffect } from '@lynx-js/react';\n\nfunction Page() {\n  const [show, setShow] = useState(false);\n\n  useEffect(() => {\n    // We initiate resource preloading ahead of time when the page DidMount\n    // We need to preload a batch of resources, including two images and two videos.\n    // First, prepare the resource parameters, assign priority and cacheTarget for images, and the required preloadKey for videos.\n    let resData = [\n      {\n        uri: 'https://xxxxx1.jpg',\n        type: 'image',\n        params: { priority: 'high', cacheTarget: 'disk' },\n      },\n      {\n        uri: 'https://xxxxx2.jpg',\n        type: 'image',\n        params: { cacheTarget: 'bitmap' },\n      },\n      {\n        uri: 'https://zzzzz1.mp4',\n        type: 'video',\n        params: { preloadKey: 'zzzzz1' },\n      },\n      {\n        uri: 'https://zzzzz2.mp4',\n        type: 'video',\n        params: { preloadKey: 'zzzzz2' },\n      },\n    ];\n\n    // Call the requestResourcePrefetch to initiate preloading\n    lynx.requestResourcePrefetch?.(\n      {\n        data: resData,\n      },\n      (res) => {\n        if (res.code == 0) {\n          console.log('success!');\n        } else {\n          console.log('fail! ', res.msg);\n        }\n        console.log(\n          'prefetch status of each resource:',\n          JSON.stringify(res.details),\n        );\n      },\n    );\n  }, []);\n\n  const handleTap = () => {\n    // Change the show state through setState to control the display of images and videos\n    setShow(!show);\n  };\n\n  return (\n    <view onTap={handleTap}>\n      {/* According to the show status to determine whether to display the image, note that here src is the unique key mentioned above, this should keep the src consistent with the preload time */}\n      {show && <image src=\"https://xxxxx1.jpg\" />}\n      {show && <image src=\"https://xxxxx2.jpg\" />}\n      {/* According to the show status to determine whether to display the video, note that here preload-key is the unique key mentioned above, this should keep the preload-key consistent with the preload time */}\n      {show && <x-video-pro src=\"https://zzzzz1.mp4\" preload-key=\"zzzzz1\" />}\n      {show && <x-video-pro src=\"https://zzzzz2.mp4\" preload-key=\"zzzzz2\" />}\n    </view>\n  );\n}\n\nexport default Page;\n```\n\n----------------------------------------\n\nTITLE: Like Icon Event Handling in TypeScript\nDESCRIPTION: Implements tap event handling for the like icon functionality in Lynx.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/guide/start/tutorial-gallery.mdx#2025-04-17_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst onTap = () => {\n  setIsLiked(true);\n}\nreturn (\n    ...\n    <image bindtap={onTap}/>\n)\n```\n\n----------------------------------------\n\nTITLE: Implementing Input Event Binding in Java for Lynx Framework\nDESCRIPTION: Java implementation of a custom input component that handles text changes and emits events to the front-end. Includes event emission, view creation, layout updates, and value setting functionality.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/guide/custom-native-component/custom-component-android.mdx#2025-04-17_snippet_6\n\nLANGUAGE: java\nCODE:\n```\npublic class LynxExplorerInput extends LynxUI<AppCompatEditText> {\n\n  private void emitEvent(String name, Map<String, Object> value) {\n    LynxCustomEvent detail = new LynxCustomEvent(getSign(), name);\n    if (value != null) {\n      for (Map.Entry<String, Object> entry : value.entrySet()) {\n        detail.addDetail(entry.getKey(), entry.getValue());\n      }\n    }\n    getLynxContext().getEventEmitter().sendCustomEvent(detail);\n  }\n\n  @Override\n  protected AppCompatEditText createView(Context context) {\n    AppCompatEditText view = new AppCompatEditText(context);\n    view.addTextChangedListener(new TextWatcher() {\n      @Override\n      public void afterTextChanged(Editable s) {\n        emitEvent(\"input\", new HashMap<String, Object>() {\n          {\n            put(\"value\", s.toString());\n          }\n        });\n      }\n\n      @Override\n      public void beforeTextChanged(CharSequence s, int start, int count, int after) {}\n\n      @Override\n      public void onTextChanged(CharSequence s, int start, int before, int count) {\n      }\n    });\n    return view;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: i18next Instance Configuration\nDESCRIPTION: TypeScript setup for creating and initializing an i18next instance with basic English translations\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/guide/inclusion/internationalization.mdx#2025-04-17_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport i18next from 'i18next';\nimport type { i18n } from 'i18next';\n\nimport enTranslation from './locales/en.json';\n\nconst localI18nInstance: i18n = i18next.createInstance();\n\nlocalI18nInstance.init({\n  lng: 'en',\n  // The default JSON format needs `Intl.PluralRules` API, which is currently unavailable in Lynx.\n  compatibilityJSON: 'v3',\n  resources: {\n    en: {\n      translation: enTranslation, // `translation` is the default namespace\n    },\n  },\n});\n\nexport { localI18nInstance as i18n };\n```\n\n----------------------------------------\n\nTITLE: Bank Card ScrollView Component Implementation\nDESCRIPTION: React component implementing a scrollable list of bank cards with selection functionality.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/react/payment-details.mdx#2025-04-17_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nexport default function BankCardScrollView() {\n  const [selectedCard, setSelectedCard] = useState(cards[0]);\n\n  const handleCardSelect = (card: BankCard) => {\n    setSelectedCard(card);\n  };\n\n  return (\n    <view className=\"payment-wrapper\">\n      <text className=\"title\">Payment method</text>\n      <view className=\"payment-container\">\n        <scroll-view scroll-y className=\"payment-sv\">\n          {cards.map((card, idx) => (\n            <view\n              key={idx}\n              className=\"card\"\n              bindtap={() => handleCardSelect(card)}\n            >\n              <view className=\"card-info\">\n                <image className=\"card-icon\" src={getUrlByType(card.type)} />\n                <view className=\"card-details\">\n                  <text className=\"card-name\">\n                    {card.type.charAt(0).toUpperCase() + card.type.slice(1)}\n                  </text>\n                </view>\n              </view>\n              {selectedCard === card && (\n                <image className=\"check-icon\" src={checkIcon} />\n              )}\n            </view>\n          ))}\n        </scroll-view>\n      </view>\n    </view>\n  );\n```\n\n----------------------------------------\n\nTITLE: Defining Fetch API Syntax in TypeScript\nDESCRIPTION: Shows the basic syntax patterns for the fetch API in TypeScript, illustrating both the simple and options-based calling patterns.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/lynx-api/global/fetch.mdx#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfetch(resource);\nfetch(resource, options);\n```\n\n----------------------------------------\n\nTITLE: Implementing Deprecated UNSAFE_componentWillMount in React Component Class\nDESCRIPTION: Type definition for the deprecated UNSAFE_componentWillMount lifecycle method that was called before the initial render. It's recommended to use componentDidMount or constructor instead.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/api/react/Class.Component.mdx#2025-04-17_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\noptional UNSAFE_componentWillMount(): void\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Text Styles and Inheritance in Lynx TSX\nDESCRIPTION: This snippet shows how to apply text styles in Lynx, highlighting that CSS inheritance is not enabled by default. It demonstrates explicit style declaration for child nodes and the special behavior of inline <text> elements.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/elements/built-in/text.mdx#2025-04-17_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n// When CSS inheritance is not enabled, the font-size of the parent node will not be applied to the child <text> node.\n<view style={{ fontSize: \"20px\" }}>\n  <text>hello world</text>\n</view>\n\n// Inline <text> is special. Even when CSS inheritance is not enabled, it will still apply some properties of the parent <text>. To maintain consistency, it is recommended to explicitly override the properties of the parent <text> in the inline <text>.\n<text style={{ color: \"red\" }}>\n  red\n  <text>red</text>\n  <text style={{ color: \"blue\" }}>blue</text>\n</text>\n```\n\n----------------------------------------\n\nTITLE: Handling Front-End Property Updates for Custom Input Element in Objective-C\nDESCRIPTION: Demonstrates how to use the LYNX_PROP_SETTER macro to listen for and handle property changes from the front-end. This example shows how to update the 'value' property of the input element.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/guide/custom-native-component/custom-component-iOS.mdx#2025-04-17_snippet_5\n\nLANGUAGE: objc\nCODE:\n```\n#import \"LynxExplorerInput.h\"\n#import <Lynx/LynxComponentRegistry.h>\n#import <Lynx/LynxPropsProcessor.h>\n\n@implementation LynxExplorerInput\n\nLYNX_LAZY_REGISTER_UI(\"input\")\n\nLYNX_PROP_SETTER(\"value\", setValue, NSString *) {\n    self.view.text = value;\n}\n\n- (UITextField *)createView {\n  UITextField *textField = [[LynxTextField alloc] init];\n  //...\n  textField.delegate = self;\n  return textField;\n}\n\n@end\n\n@implementation LynxTextField\n\n- (UIEditingInteractionConfiguration)editingInteractionConfiguration API_AVAILABLE(ios(13.0)) {\n  return UIEditingInteractionConfigurationNone;\n}\n\n- (void)setPadding:(UIEdgeInsets)padding {\n  _padding = padding;\n  [self setNeedsLayout];\n}\n\n- (CGRect)textRectForBounds:(CGRect)bounds {\n  CGFloat x = self.padding.left;\n  CGFloat y = self.padding.top;\n  CGFloat width = bounds.size.width - self.padding.left - self.padding.right;\n  CGFloat height = bounds.size.height - self.padding.top - self.padding.bottom;\n\n  return CGRectMake(x, y, width, height);\n}\n\n- (CGRect)editingRectForBounds:(CGRect)bounds {\n  return [self textRectForBounds:bounds];\n}\n@end\n```\n\n----------------------------------------\n\nTITLE: Implementing Dynamic Theme Switching with React Hooks and Global Props\nDESCRIPTION: React component using useMemo hook to dynamically switch themes based on global properties. This approach allows for real-time theme changes triggered by native client updates.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/guide/styling/custom-theming.mdx#2025-04-17_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useMemo } from '@lynx-js/react';\nimport './App.css';\n\nexport function App() {\n  const themeClass = useMemo(\n    () => `theme-${lynx.__globalProps.appTheme}`,\n    [lynx.__globalProps.appTheme],\n  );\n\n  return (\n    //themeClass's value is 'theme-dark' or 'theme-light'\n    <view className={themeClass}>\n      <view>\n        ...\n        <text className=\"content\">Hello Theme</text>\n        ...\n      </view>\n    </view>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: UseRef with Generic Value Type\nDESCRIPTION: Implementation of useRef that accepts an initial value of type T and returns a MutableRefObject. This version is used when you want a mutable reference that's strongly typed to the initial value.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/react/Function.useRef.mdx#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction useRef<T>(initialValue: T): MutableRefObject<T>\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Performance Metric in Lynx\nDESCRIPTION: This code snippet demonstrates how to create a custom performance metric called 'waitingDuration' using the Lynx Performance API. It calculates the delay between the end of first-frame rendering and the end of the first significant data updates.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/guide/performance/evaluating-performance.mdx#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Performance } from '@lynx/lynx';\n\nconst performance = Performance.getInstance();\n\ntype EntryType = 'loadBundle' | 'pipeline';\n\nfunction getLastEntry(entryType: EntryType) {\n  const entries = performance.getEntriesByType(entryType);\n  return entries[entries.length - 1];\n}\n\nfunction calculateWaitingDuration() {\n  const loadBundleEntry = getLastEntry('loadBundle');\n  const pipelineEntry = getLastEntry('pipeline');\n\n  if (!loadBundleEntry || !pipelineEntry) {\n    return;\n  }\n\n  const waitingDuration =\n    pipelineEntry.startTime +\n    pipelineEntry.duration -\n    (loadBundleEntry.startTime + loadBundleEntry.duration);\n\n  console.log('Waiting Duration:', waitingDuration);\n}\n```\n\n----------------------------------------\n\nTITLE: createElement for Function Components\nDESCRIPTION: Type definition for creating React elements from function components with props and attributes.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/react/Function.createElement.mdx#2025-04-17_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nfunction createElement<P>(\n   type: FunctionComponent<P>,\n   props?: null | Attributes & P, ...\nchildren?: ReactNode[]): FunctionComponentElement<P>\n```\n\n----------------------------------------\n\nTITLE: Advanced Lynx React Rendering with Data Provider\nDESCRIPTION: Extended example demonstrating conditional rendering with data providers for both Lepus and JS environments.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/react/Interface.Root.mdx#2025-04-17_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { root } from \"@lynx-js/react\"\n\nfunction App() {\n  // Your app\n  return <view>...</view>\n}\n\nif (__LEPUS__) {\n  root.render(\n    <DataProvider data={DEFAULT_DATA}>\n       <App/>\n    </DataProvider>\n  );\n} else if (__JS__) {\n  fetchData().then((data) => {\n    root.render(\n      <DataProvider data={data}>\n         <App/>\n      </DataProvider>\n    ); // You can render later after your data is ready\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Getting Element Attributes with __GetAttributes in JSX\nDESCRIPTION: Demonstrates the syntax for the __GetAttributes function which returns all attributes of an Element as a map. The function accepts an Element object as a parameter and returns an object with attribute keys and values.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/engine/element-api/__GetAttributes.mdx#2025-04-17_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n__GetAttributes(element: Element) : object;\n```\n\n----------------------------------------\n\nTITLE: Replacing React import with ReactLynx import\nDESCRIPTION: Shows how to change import statements from React to ReactLynx. This is the first step when migrating a React web application to ReactLynx.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/react/introduction.mdx#2025-04-17_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\n- import { useState } from 'react';\n+ import { useState } from '@lynx-js/react';\n```\n\n----------------------------------------\n\nTITLE: Configuring Less Plugin in Rspeedy\nDESCRIPTION: Configuration for using Less in Rspeedy by installing and configuring the @rsbuild/plugin-less plugin in lynx.config.ts.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/rspeedy/styling.mdx#2025-04-17_snippet_11\n\nLANGUAGE: js\nCODE:\n```\nimport { pluginLess } from '@rsbuild/plugin-less';\n\nimport { defineConfig } from '@lynx-js/rspeedy';\n\nexport default defineConfig({\n  source: {\n    entry: './src/index.tsx',\n  },\n  plugins: [\n    pluginLess({\n      /** less options */\n    }),\n  ],\n});\n```\n\n----------------------------------------\n\nTITLE: Event Bubbling Implementation in Lynx\nDESCRIPTION: Demonstration of event bubbling in Lynx, where events propagate upward from the triggered node to ancestors. This example shows how parent elements can listen to events triggered on their children.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/guide/interaction/event-handling/event-propagation.mdx#2025-04-17_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nbind:onTap={() => {\n  setBubbled(true);\n  setTimeout(() => {\n    setBubbled(false);\n  }, 300);\n}}\n```\n\nLANGUAGE: tsx\nCODE:\n```\n<Text>Tap on child will bubble to parent</Text>\n```\n\n----------------------------------------\n\nTITLE: Implementing Card Component with Selected Card Display\nDESCRIPTION: Shows the complete Card component implementation that uses the selectedCard prop to display card details, including the first and last four digits of the card number while masking the middle digits.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/react/payment-details.mdx#2025-04-17_snippet_10\n\nLANGUAGE: tsx\nCODE:\n```\nexport default function Card({\n  selectedCard,\n  isFront,\n  isFirstRender,\n}: CardProps) {\n  const { firstFour, lastFour } = getCardNumberParts(selectedCard.number);\n\n  return (\n    <view className=\"card-content\">\n      <view\n        className={`card-back ${!isFirstRender ? (isFront ? 'back' : 'front') : ''}`}\n      >\n        ...\n      </view>\n\n      <view\n        className={`card-front ${!isFirstRender ? (isFront ? 'front' : 'back') : ''}`}\n      >\n        <view className=\"card-number\">\n          <text className=\"first-digits\">{firstFour}</text>\n          <text className=\"middle-digits\">**** ****</text>\n          <text className=\"last-digits\">{lastFour}</text>\n        </view>\n        <view className=\"card-info\">\n          <text>{selectedCard?.name || 'Card holder'}</text>\n        </view>\n      </view>\n    </view>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Client-Side Global Event Sending in iOS and Android\nDESCRIPTION: Examples showing how to send global events from native iOS and Android code to Lynx frontend. This demonstrates the cross-platform event communication capability of Lynx.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/guide/interaction/event-handling/event-propagation.mdx#2025-04-17_snippet_7\n\nLANGUAGE: objective-c\nCODE:\n```\n// 可以调用 LynxContext 的 sendGlobalEvent 函数\n// 第一个参数为前端监听的事件名称，第二个参数为前端接收到的数据\n[LynxContext sendGlobalEvent:@\"eventName\" withParams:args];\n// 或者调用 LynxView 的 sendGlobalEvent 函数\n[LynxView sendGlobalEvent:@\"eventName\" withParams:args];\n```\n\nLANGUAGE: java\nCODE:\n```\n// 可以调用 LynxContext 的 sendGlobalEvent 函数\n// 第一个参数为前端监听的事件名称，第二个参数为前端接收到的数据\nLynxContext.sendGlobalEvent(\"eventName\", args);\n// 或者调用 LynxView 的 sendGlobalEvent 函数\nLynxView.sendGlobalEvent(\"eventName\", args);\n```\n\n----------------------------------------\n\nTITLE: Handling Image Loading Errors in Lynx TSX\nDESCRIPTION: Example demonstrating how to handle image loading error (code 301) using error event binding. The component shows an image and handles errors by clearing the view when an error occurs.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/guide/debugging/handle-errors.mdx#2025-04-17_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nconst ImageErrorExample = () => {\n  const [isImageError, setImageError] = useState(false);\n  const handleImageError = (event: ErrorEvent) => {\n    setImageError(true);\n    console.log('Image loaded error:', JSON.stringify(event));\n  };\n  if (isImageError) {\n    return <view />;\n  }\n  return (\n    <view>\n      <image\n        className=\"my-image\"\n        src={'error url'}\n        binderror={handleImageError}\n      />\n    </view>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Using Sass Styles in React Component\nDESCRIPTION: Example of importing and using Sass styles in a React component, showing both global Sass imports and CSS Module imports with the .scss extension.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/rspeedy/styling.mdx#2025-04-17_snippet_10\n\nLANGUAGE: jsx\nCODE:\n```\nimport './global.sass';\nimport styles from './button.module.scss';\n\nexport function App() {\n  return (\n    <view className={styles.red}>\n      <text className=\"title\">Hello, Sass</text>\n    </view>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Importing React Components for TSDoc\nDESCRIPTION: Imports all components from the @lynx package as Lynx to allow dynamic lookup in TSDoc writings. This is likely used for documentation generation purposes.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/react/Function.useContext.mdx#2025-04-17_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as Lynx from '@lynx';\n```\n\n----------------------------------------\n\nTITLE: Main Thread Script in ReactLynx (JavaScript)\nDESCRIPTION: This snippet demonstrates a main thread script (MTS) in ReactLynx, which is executed on the main thread. It uses the 'main thread' directive to indicate that the function should run on the main thread.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/react/thinking-in-reactlynx.mdx#2025-04-17_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nfunction toRed(event) {\n  'main thread';\n  event.currentTarget.setStyleProperty('background-color', 'red');\n}\n```\n\n----------------------------------------\n\nTITLE: CSS Flex Direction Basic Syntax\nDESCRIPTION: Shows the basic syntax options for the flex-direction property, including row, row-reverse, column and column-reverse values.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/css/properties/flex-direction.mdx#2025-04-17_snippet_0\n\nLANGUAGE: css\nCODE:\n```\n/* The direction text is laid out in a line */\nflex-direction: row;\n\n/* Like <row>, but reversed */\nflex-direction: row-reverse;\n\n/* The direction in which lines of text are stacked */\nflex-direction: column;\n\n/* Like <column>, but reversed */\nflex-direction: column-reverse;\n```\n\n----------------------------------------\n\nTITLE: Enabling Lynx DevTool Switches in Android (Java)\nDESCRIPTION: This code snippet demonstrates how to enable the Lynx Debug, Lynx DevTool, and Lynx LogBox switches when initializing LynxEnv in an Android application using Java.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/guide/start/integrate-lynx-devtool.mdx#2025-04-17_snippet_7\n\nLANGUAGE: java\nCODE:\n```\nprivate void initLynxEnv() {\n  LynxEnv.inst().init(this, null, null, null);\n  // 打开 Lynx Debug 开关\n  LynxEnv.inst().enableLynxDebug(true);\n  // 打开 Lynx DevTool 开关\n  LynxEnv.inst().enableDevtool(true);\n  // 打开 Lynx LogBox 开关\n  LynxEnv.inst().enableLogBox(true);\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Lynx Web Environment in TypeScript\nDESCRIPTION: Configuration file setup for Lynx web environment using defineConfig with React plugin and environment-specific settings.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/guide/start/fragments/web/integrating-lynx-with-web.mdx#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineConfig } from '@lynx-js/rspeedy';\nimport { pluginReactLynx } from '@lynx-js/react-rsbuild-plugin';\n\nexport default defineConfig({\n  plugins: [pluginReactLynx()],\n  environments: {\n    web: {\n      output: {\n        assetPrefix: '/',\n      },\n    },\n    lynx: {},\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Defining the customName Property in TransformImport Interface in TypeScript\nDESCRIPTION: Declaration of the optional customName property in the TransformImport interface. This property allows developers to specify a custom format for transformed import paths, supporting various case transformation templates.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/api/rspeedy/rspeedy.transformimport.customname.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ncustomName?: string | undefined;\n```\n\n----------------------------------------\n\nTITLE: Basic Syntax for animate() Method in JavaScript\nDESCRIPTION: The basic syntax for the animate() method, showing the method signature with its keyframes and options parameters.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/lynx-api/lynx/lynx-animate-api.mdx#2025-04-17_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nanimate(keyframes, options);\n```\n\n----------------------------------------\n\nTITLE: Broadcasting Global Events in Android using Java\nDESCRIPTION: This snippet shows how to send global events in Android using the LynxContext or LynxView classes. It demonstrates two ways to broadcast events with parameters to the front-end.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/guide/interaction/event-handling/event-propagation.mdx#2025-04-17_snippet_6\n\nLANGUAGE: java\nCODE:\n```\n// You can call the sendGlobalEvent function of LynxContext\n// The first parameter is the event name monitored by the front end, and the second parameter is the data received by the front end\nLynxContext.sendGlobalEvent(\"eventName\", args);\n// Or call the sendGlobalEvent function of LynxView\nLynxView.sendGlobalEvent(\"eventName\", args);\n```\n\n----------------------------------------\n\nTITLE: Using defineConfig in Configuration File\nDESCRIPTION: Example demonstrating how to use the defineConfig function in a lynx.config.ts file to get autocompletion and type checking for configuration options.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/api/rspeedy/rspeedy.defineconfig.md#2025-04-17_snippet_1\n\nLANGUAGE: ts\nCODE:\n```\n//@ts-check\nimport { defineConfig } from '@lynx-js/rspeedy'\nexport default defineConfig({\n  // autocompletion works here!\n})\n```\n\n----------------------------------------\n\nTITLE: Using __BACKGROUND__ Macro in Function Component (TypeScript/React)\nDESCRIPTION: Demonstrates the use of the __BACKGROUND__ macro in a function component to conditionally execute code in a background thread environment. The example shows how the code is transformed during compilation for both background and main thread environments.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/react/Document.built-in-macros.mdx#2025-04-17_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { noop } from 'lodash-es';\nimport { useEffect } from '@lynx-js/react';\n\nfunction App() {\n  const showToast = __BACKGROUND__\n    ? () => {\n        bridge.call('showToast', {\n          message: t('toast'),\n          icon: 'success',\n        });\n      }\n    : noop;\n\n  useEffect(showToast, []);\n  return <view />;\n}\n```\n\nLANGUAGE: tsx\nCODE:\n```\nfunction App() {\n  const showToast = () => {\n    bridge.call('showToast', {\n      message: t('toast'),\n      icon: 'success',\n    });\n  };\n  useEffect(showToast, []);\n  return createSnapshotInstance(__snapshot_5ab440, null, []);\n}\n```\n\nLANGUAGE: tsx\nCODE:\n```\nfunction App() {\n  const showToast = noop_default;\n\n  useEffect();\n  return createSnapshotInstance(__snapshot_5ab440, null, []);\n}\n```\n\n----------------------------------------\n\nTITLE: Defining relativeToViewport() Method Signature in TypeScript\nDESCRIPTION: The TypeScript method signature for relativeToViewport() showing the optional margins parameter and return type. This method allows configuring an intersection observer relative to a viewport with customizable margins.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/lynx-api/intersection-observer/intersection-observer-relative-to-viewport.mdx#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nrelativeToViewport(\n   margins ? margins : {left: 0, right: 0, top: 0, bottom: 0}\n): IntersectionObserver;\n```\n\n----------------------------------------\n\nTITLE: Measuring Layout with Event-Based Alternative to useLayoutEffect in ReactLynx\nDESCRIPTION: This code demonstrates how to measure and position a tooltip element using the main-thread:bindlayoutchange event as an alternative to useLayoutEffect in ReactLynx. It creates a tooltip that positions itself relative to its target element after layout calculations.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/react/lifecycle.mdx#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexample=\"react-lifecycle\"\nimg=\"https://lf-lynx.tiktok-cdns.com/obj/lynx-artifacts-oss-sg/lynx-website/assets/doc/react/react-lifecycle-measure.gif\"\ndefaultEntryFile=\"dist/measuring-layout.lynx.bundle\"\ndefaultFile=\"src/measuring-layout/Tooltip.tsx\"\nentry=\"src/measuring-layout\"\nhighlight=\"{4-18}\"\n```\n\n----------------------------------------\n\nTITLE: Using useSyncExternalStore Function in React\nDESCRIPTION: The useSyncExternalStore hook lets you subscribe to an external store. It takes a subscribe function, a getSnapshot function to get the current value, and an optional getServerSnapshot function for server rendering. It returns the current snapshot from the store.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/api/react/Function.useSyncExternalStore.mdx#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction useSyncExternalStore<Snapshot>(\n   subscribe: (onStoreChange: () => void) => () => void,\n   getSnapshot: () => Snapshot,\n   getServerSnapshot?: () => Snapshot): Snapshot\n```\n\n----------------------------------------\n\nTITLE: Calculating Estimated Size for Gallery Items in Lynx\nDESCRIPTION: This utility function calculates the estimated size of an image on the main axis based on the current list layout information and image dimensions in a Lynx gallery application.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/guide/start/tutorial-gallery.mdx#2025-04-17_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\nexport const calculateEstimatedSize = (\n  pictureWidth: number,\n  pictureHeight: number,\n) => {\n  // Fixed styles of the gallery\n  const galleryPadding = 20;\n  const galleryMainAxisGap = 10;\n  const gallerySpanCount = 2;\n  const galleryWidth = lynx.__globalProps.screenWidth;\n  // Calculate the width of each ImageCard and return the relative height of the it.\n  const itemWidth =\n    (galleryWidth - galleryPadding * 2 - galleryMainAxisGap) / gallerySpanCount;\n  return (itemWidth / pictureWidth) * pictureHeight;\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Rsdoctor Options in Rspeedy\nDESCRIPTION: This snippet shows how to configure Rsdoctor options using the tools.rsdoctor property in the Rspeedy configuration file.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/rspeedy/use-rsdoctor.mdx#2025-04-17_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineConfig } from '@lynx-js/rspeedy';\n\nexport default defineConfig({\n  tools: {\n    rsdoctor: {\n      disableClientServer: true,\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Default Data Processor in TypeScript\nDESCRIPTION: Defines an optional default data processor function that transforms raw initialization data into processed data. Custom input and output types can be created by extending InitDataRaw and InitData interfaces.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/api/react/Interface.DataProcessorDefinition.mdx#2025-04-17_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\noptional defaultDataProcessor: (rawInitData: InitDataRaw) => InitData;\n```\n\n----------------------------------------\n\nTITLE: Using __GetEvent in a Frontend Framework Context\nDESCRIPTION: This example shows how to create an element, set attributes and events on it, and then retrieve a specific event listener using the __GetEvent function. It demonstrates the complete workflow of managing event listeners in a frontend framework.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/engine/element-api/__GetEvent.mdx#2025-04-17_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n// main-thread.js\nlet element = __CreateElement('view', 0, {});\n__SetAttribute(element, 'src', 'xx');\n\n__SetEvents(element, [{ type: 'bindEvent', name: 'tap', function: 'onTap' }]);\n\nlet listener = __GetEvent(element, 'tap', 'bindEvent');\n```\n\n----------------------------------------\n\nTITLE: Handling Properties with LynxProp in Java/Kotlin\nDESCRIPTION: Demonstrates property handling using @LynxProp annotation to sync front-end values with the native view.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/guide/custom-native-component/custom-component-android.mdx#2025-04-17_snippet_4\n\nLANGUAGE: java\nCODE:\n```\npublic class LynxExplorerInput extends LynxUI<AppCompatEditText> {\n\n  public LynxExplorerInput(LynxContext context) {\n    super(context);\n  }\n\n  @LynxProp(name = \"value\")\n  public void setValue(String value) {\n    if (!value.equals(mView.getText().toString())) {\n      mView.setText(value);\n    }\n  }\n\n  @Override\n  protected AppCompatEditText createView(Context context) {\n    AppCompatEditText view = new AppCompatEditText(context);\n    //...\n    return view;\n  }\n\n}\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nclass LynxExplorerInput(context: LynxContext) : LynxUI<AppCompatEditText>(context) {\n\n  override fun createView(context: Context): AppCompatEditText {\n    return AppCompatEditText(context).apply {\n      //...\n    }\n  }\n\n  @LynxProp(name = \"value\")\n  fun setValue(value: String) {\n    if (value != mView.text.toString()) {\n      mView.setText(value)\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Text Input Events in Lynx Custom Component (Kotlin)\nDESCRIPTION: Kotlin implementation of a custom Lynx input component that emits events when text changes. This version offers the same functionality as the Java implementation but with more concise Kotlin syntax, including extension functions and lambda expressions.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/guide/custom-native-component/custom-component-android.mdx#2025-04-17_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nimport android.content.Context\nimport android.text.Editable\nimport android.text.TextWatcher\nimport androidx.appcompat.widget.AppCompatEditText\nimport com.lynx.tasm.behavior.LynxContext\nimport com.lynx.tasm.behavior.LynxProp\nimport com.lynx.tasm.behavior.ui.LynxUI\nimport com.lynx.tasm.event.LynxCustomEvent\n\n\nclass LynxExplorerInput(context: LynxContext) : LynxUI<AppCompatEditText>(context) {\n\n  override fun createView(context: Context): AppCompatEditText {\n    return AppCompatEditText(context).apply {\n      addTextChangedListener(object : TextWatcher {\n        override fun beforeTextChanged(s: CharSequence?, start: Int, count: Int, after: Int) {}\n\n        override fun onTextChanged(s: CharSequence?, start: Int, before: Int, count: Int) {}\n\n        override fun afterTextChanged(s: Editable?) {\n          emitEvent(\"input\", mapOf(\"value\" to (s?.toString() ?: \"\")))\n        }\n      })\n    }\n  }\n\n  private fun emitEvent(name: String, value: Map<String, Any>?) {\n    val detail = LynxCustomEvent(sign, name)\n    value?.forEach { (key, v) ->\n      detail.addDetail(key, v)\n    }\n    lynxContext.eventEmitter.sendCustomEvent(detail)\n  }\n\n\n  override fun onLayoutUpdated() {\n    super.onLayoutUpdated()\n    val paddingTop = mPaddingTop + mBorderTopWidth\n    val paddingBottom = mPaddingBottom + mBorderBottomWidth\n    val paddingLeft = mPaddingLeft + mBorderLeftWidth\n    val paddingRight = mPaddingRight + mBorderRightWidth\n    mView.setPadding(paddingLeft, paddingTop, paddingRight, paddingBottom)\n  }\n\n  @LynxProp(name = \"value\")\n  fun setValue(value: String) {\n    if (value != mView.text.toString()) {\n      mView.setText(value)\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Render Method Definition\nDESCRIPTION: Core rendering method of a React component that returns ReactNode content to be displayed.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/react/Class.PureComponent.mdx#2025-04-17_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nrender(): ReactNode\n```\n\n----------------------------------------\n\nTITLE: Maintaining State in Main Thread Functions\nDESCRIPTION: Example showing how to maintain state between main thread function calls using MainThreadRef. This creates a counter that toggles an element's background color on each tap.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/react/main-thread-script.mdx#2025-04-17_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useMainThreadRef } from '@lynx-js/react';\n\nfunction App() {\n  const countRef = useMainThreadRef(0);\n\n  function handleTapMainThread(event: MainThread.ITouchEvent) {\n    'main thread';\n    event.currentTarget.setStyleProperty('background-color', ++countRef.current % 2 ? 'blue' : 'green');\n  }\n\n  return (\n    // ...\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Event Listeners with __GetEvent in JSX\nDESCRIPTION: This code snippet demonstrates the syntax for the __GetEvent function that returns an event listener assigned to an Element object based on the specified name and type parameters.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/engine/element-api/__GetEvent.mdx#2025-04-17_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n__GetEvent(element: Element, name: string, type: string) : string|Function|undefined;\n```\n\n----------------------------------------\n\nTITLE: Consuming InitData with Function Components in React\nDESCRIPTION: Code snippet demonstrating how to consume initData in a React functional component using the useInitData hook. This shows how to access and display data provided by the host platform.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/guide/use-data-from-host-platform.mdx#2025-04-17_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useInitData } from '@lynx-js/react';\n\nexport function App() {\n  const initData = useInitData();\n  return (\n    <view>\n      <text>{initData.greeting}</text>\n    </view>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Runtime Feature Detection for Lynx Engine\nDESCRIPTION: Code example showing how to safely check for and use new Lynx Engine features at runtime when working with different engine versions.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/guide/compatibility.mdx#2025-04-17_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// Detect if `lynx.newlyAddedMethod` can be called\nif (lynx.newlyAddedMethod) {\n  lynx.newlyAddedMethod();\n}\n```\n\n----------------------------------------\n\nTITLE: Changing Background Color with setNativeProps in JSX\nDESCRIPTION: This example demonstrates using setNativeProps to change the background color of a view when its child text is tapped.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/api/lynx-api/nodes-ref/nodes-ref-set-native-props.mdx#2025-04-17_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nfunction App() {\n  return (\n    <view id=\"intro\">\n      <text\n        bindtap={() => {\n          lynx\n            .createSelectorQuery()\n            .select('#intro')\n            .setNativeProps({\n              'background-color': 'red',\n            })\n            .exec();\n        }}\n      >\n        Hello, World!\n      </text>\n    </view>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Constructing Basic LynxView in Swift\nDESCRIPTION: Creates and configures a basic LynxView instance using Swift. It initializes the view with a configuration provider, screen size, and font scale, then sets layout properties for proper rendering.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/guide/start/fragments/ios/integrating-lynx-with-existing-app-ios.mdx#2025-04-17_snippet_7\n\nLANGUAGE: swift\nCODE:\n```\nimport UIKit\n\nclass ViewController: UIViewController {\n\n  override func viewDidLoad() {\n    super.viewDidLoad()\n\n    let lynxView = LynxView { builder in\n      builder.config = LynxConfig(provider: DemoLynxProvider())\n      builder.screenSize = self.view.frame.size\n      builder.fontScale = 1.0\n    }\n\n    lynxView.preferredLayoutWidth = self.view.frame.size.width\n    lynxView.preferredLayoutHeight = self.view.frame.size.height\n    lynxView.layoutWidthMode = .exact\n    lynxView.layoutHeightMode = .exact\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using useInitData Hook in a React Component\nDESCRIPTION: Example of how to use the useInitData Hook within a React functional component. It demonstrates accessing properties of the returned initData object.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/react/Function.useInitData.mdx#2025-04-17_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nfunction App() {\n  const initData = useInitData();\n\n  initData.someProperty // use it\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Input Element in Objective-C for Lynx Framework\nDESCRIPTION: This snippet shows the implementation of a custom input element (LynxExplorerInput) in Objective-C for the Lynx framework. It includes event handling, view creation, and property setting.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/guide/custom-native-component/custom-component-iOS.mdx#2025-04-17_snippet_7\n\nLANGUAGE: objc\nCODE:\n```\n#import \"LynxExplorerInput.h\"\n#import <Lynx/LynxComponentRegistry.h>\n#import <Lynx/LynxPropsProcessor.h>\n\n@implementation LynxExplorerInput\n\nLYNX_LAZY_REGISTER_UI(\"input\")\n\n- (UITextField *)createView {\n  UITextField *textField = [[LynxTextField alloc] init];\n  //...\n  textField.delegate = self;\n  [[NSNotificationCenter defaultCenter] addObserver:self\n                                        selector:@selector(textFieldDidChange:)\n                                        name:UITextFieldTextDidChangeNotification\n                                        object:textField];\n  return textField;\n}\n\n- (void)emitEvent:(NSString *)name detail:(NSDictionary *)detail {\n  LynxCustomEvent *eventInfo = [[LynxDetailEvent alloc] initWithName:name\n                                                          targetSign:[self sign]\n                                                              detail:detail];\n  [self.context.eventEmitter dispatchCustomEvent:eventInfo];\n}\n\n- (void)textFieldDidChange:(NSNotification *)notification {\n  [self emitEvent:@\"input\"\n           detail:@{\n             @\"value\": [self.view text] ?: @\"\",\n           }];\n}\n\n- (void)layoutDidFinished {\n    self.view.padding = self.padding;\n}\n\nLYNX_PROP_SETTER(\"value\", setValue, NSString *) {\n    self.view.text = value;\n}\n\n@end\n\n@implementation LynxTextField\n\n- (UIEditingInteractionConfiguration)editingInteractionConfiguration API_AVAILABLE(ios(13.0)) {\n  return UIEditingInteractionConfigurationNone;\n}\n\n- (void)setPadding:(UIEdgeInsets)padding {\n  _padding = padding;\n  [self setNeedsLayout];\n}\n\n- (CGRect)textRectForBounds:(CGRect)bounds {\n  CGFloat x = self.padding.left;\n  CGFloat y = self.padding.top;\n  CGFloat width = bounds.size.width - self.padding.left - self.padding.right;\n  CGFloat height = bounds.size.height - self.padding.top - self.padding.bottom;\n\n  return CGRectMake(x, y, width, height);\n}\n\n- (CGRect)editingRectForBounds:(CGRect)bounds {\n  return [self textRectForBounds:bounds];\n}\n@end\n```\n\n----------------------------------------\n\nTITLE: Configuring 2022-03 Decorator Version in JavaScript\nDESCRIPTION: Example of using defineConfig to set the decorator version to '2022-03', which corresponds to the Stage 3 decorator proposal and is equivalent to TypeScript 5.0's default decorator syntax.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/rspeedy/rspeedy.decorators.version.md#2025-04-17_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineConfig } from '@lynx-js/rspeedy'\n\nexport default defineConfig({\n  source: {\n    decorators: { version: '2022-03' },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Loading Template with Initial Data in Java\nDESCRIPTION: Code snippet for initializing and loading a Lynx template with initial data in Android using Java. This shows how to build a LynxLoadMeta object with initial data before loading a template.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/guide/use-data-from-host-platform.mdx#2025-04-17_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nLynxLoadMeta.Builder builder = new LynxLoadMeta.Builder();\n// builder.setUrl();\n// builder.setBinaryData();\n// builder.setTemplateBundle();\nbuilder.setInitialData(__YOUR_DATA__);\n// builder.addLoadOption();\nLynxLoadMeta meta = builder.build();\nlynxView.loadTemplate(meta);\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of ReactLynx API Methods\nDESCRIPTION: Example showing the basic usage patterns of the core ReactLynx API methods including registerDataProcessors, querySelector, and querySelectorAll.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/api/react/Interface.Lynx.mdx#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nlynx.registerDataProcessors(...);\nlynx.querySelector(...);\nlynx.querySelectorAll(...);\n```\n\n----------------------------------------\n\nTITLE: Defining linear-gravity CSS Property in Lynx\nDESCRIPTION: This snippet shows the various values that can be assigned to the linear-gravity property in CSS for Lynx. It defines how space is distributed in linear containers.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/css/properties/linear-gravity.mdx#2025-04-17_snippet_0\n\nLANGUAGE: css\nCODE:\n```\nlinear-gravity: none;\nlinear-gravity: start;\nlinear-gravity: end;\nlinear-gravity: center;\nlinear-gravity: space-between;\n```\n\n----------------------------------------\n\nTITLE: Configuring a custom host for Rspeedy Server using JavaScript\nDESCRIPTION: Example showing how to set a custom host IP address in the Rspeedy server configuration using defineConfig. By default, the server listens on the local network IP, but this can be customized as needed.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/api/rspeedy/rspeedy.server.host.md#2025-04-17_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineConfig } from '@lynx-js/rspeedy'\nexport default defineConfig({\n  server: {\n    host: \"192.168.1.50\",\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Stopping Event Propagation in Lynx\nDESCRIPTION: The stopPropagation method prevents an event from bubbling up the touch response chain. This method is only available in the main thread script.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/lynx-api/event/event.mdx#2025-04-17_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nstopPropagation(): void;\n```\n\n----------------------------------------\n\nTITLE: Defining forwardRef Function in TypeScript\nDESCRIPTION: Type definition for the forwardRef function in React. It takes type parameters T and P, and a render function as an argument. Returns a ForwardRefExoticComponent.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/react/Function.forwardRef.mdx#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction forwardRef<T, P>(render: ForwardRefRenderFunction<T, PropsWithoutRef<P>>): ForwardRefExoticComponent<PropsWithoutRef<P> & RefAttributes<T>>\n```\n\n----------------------------------------\n\nTITLE: CSS Background Image with Gradient and URL\nDESCRIPTION: Example showing how to set multiple background images using linear gradient and image URL. The gradient creates a yellow to blue transparent overlay while an image is set as the base background.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/css/properties/background-image.mdx#2025-04-17_snippet_0\n\nLANGUAGE: css\nCODE:\n```\nbackground-image: linear-gradient(\n    to bottom,\n    rgba(255, 255, 0, 0.5),\n    rgba(0, 0, 255, 0.5)\n  ),\n  url('https://lf-lynx.tiktok-cdns.com/obj/lynx-artifacts-oss-sg/lynx-website/assets/doc/catfront.png');\n```\n\n----------------------------------------\n\nTITLE: Using withInitDataInState HOC with React Component\nDESCRIPTION: This example demonstrates how to use the withInitDataInState HOC to wrap a React class component, injecting initData functionality.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/react/Function.withInitDataInState.mdx#2025-04-17_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nclass App extends React.Component<MyProps, MyState> {\n  // component implementation\n}\n\nexport default withInitDataInState(App);\n```\n\n----------------------------------------\n\nTITLE: Invoking Custom Element Methods in Lynx Framework\nDESCRIPTION: This snippet demonstrates how to use SelectorQuery to call the 'focus' method on an <input> element from the front-end in the Lynx framework.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/guide/custom-native-component/custom-component-iOS.mdx#2025-04-17_snippet_10\n\nLANGUAGE: jsx\nCODE:\n```\nlynx\n  .createSelectorQuery()\n  .select('#input-id')\n  .invoke({\n    method: 'focus',\n    params: {},\n    success: function (res) {\n      console.log('lynx', 'request focus success');\n    },\n    fail: function (res) {\n      console.log('lynx', 'request focus fail');\n    },\n  })\n  .exec();\n```\n\n----------------------------------------\n\nTITLE: Programmatic Navigation in ReactLynx using React Router\nDESCRIPTION: Demonstrates how to navigate between routes without Link components in ReactLynx. Uses the useNavigate hook to create a function that changes routes when a text element is tapped.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/react/routing.mdx#2025-04-17_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useNavigate } from 'react-router';\n\nexport function App() {\n  const nav = useNavigate();\n\n  return (\n    <view>\n      <text bindtap={() => nav('/home')}>Navigate to Home</text>\n    </view>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Server Base Path in JavaScript\nDESCRIPTION: Example configuration showing how to set a custom base path '/dist' for the Lynx JS server using the defineConfig function.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/rspeedy/rspeedy.server.base.md#2025-04-17_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineConfig } from '@lynx-js/rspeedy'\nexport default defineConfig({\n  server: {\n    base: '/dist'\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Handling User Clicks in Background Thread with Lynx TSX\nDESCRIPTION: Example of handling a tap event in the background thread using SelectorQuery to modify the background color of the clicked element.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/guide/interaction/event-handling.mdx#2025-04-17_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nconst handleTap = (e: TapEvent) => {\n  const query = SelectorQuery.select('#root');\n  query.node().exec((res) => {\n    if (res[0].backgroundColor === 'blue') {\n      res[0].setNativeProps({\n        style: {\n          backgroundColor: 'red',\n        },\n      });\n    } else {\n      res[0].setNativeProps({\n        style: {\n          backgroundColor: 'blue',\n        },\n      });\n    }\n  });\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Tools Interface in TypeScript\nDESCRIPTION: This code snippet defines the Tools interface, which contains optional properties for configuring various building tools such as Rspack, css-loader, and Rsdoctor.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/api/rspeedy/rspeedy.tools.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface Tools \n{\n  bundlerChain?: ToolsConfig['bundlerChain'] | undefined;\n  cssExtract?: CssExtract | undefined;\n  cssLoader?: CssLoader | undefined;\n  rsdoctor?: RsdoctorRspackPluginOptions | undefined;\n  rspack?: ToolsConfig['rspack'] | undefined;\n  swc?: ToolsConfig['swc'] | undefined;\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing GlobalProps in React JSX Component\nDESCRIPTION: Example of using lynx.__globalProps in a React component to handle theme and title updates. The component uses useMemo for optimization and demonstrates accessing appTheme and title properties.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/lynx-api/lynx/lynx-global-props.mdx#2025-04-17_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nfunction App() {\n  const themeClass = useMemo(\n    () => `theme-${lynx.__globalProps.appTheme}`,\n    [lynx.__globalProps.appTheme],\n  );\n\n  return (\n    <view class={themeClass}>\n      <text>{lynx.__globalProps.title}</text>\n    </view>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: TypeScript Property Definition\nDESCRIPTION: Type definition of the tsconfigPath property showing it accepts a string or undefined value.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/rspeedy/rspeedy.source.tsconfigpath.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntsconfigPath?: string | undefined;\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Font Resource Loader in Android Java\nDESCRIPTION: This code snippet demonstrates how to implement a custom font resource loader in Android using the GenericResourceFetcher interface. It shows the process of fetching font resources and injecting the loader during LynxView construction.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/elements/built-in/text.mdx#2025-04-17_snippet_1\n\nLANGUAGE: java\nCODE:\n```\npublic class ExampleGenericResourceFetcher extends LynxGenericResourceFetcher {\n  @Override\n  public void fetchResource(LynxResourceRequest request, LynxResourceCallback<byte[]> callback) {\n    ...\n      //download font file through http\n      byte[] data = new byte[(int) file.length()];\n\n      //notify the font data if success\n      callback.onResponse(LynxResourceResponse.onSuccess(data));\n\n    ...\n  }\n}\n\n//Inject during `LynxView` construction.\nLynxViewBuilder.setGenericResourceFetcher(new ExampleGenericResourceFetcher(context));\n```\n\n----------------------------------------\n\nTITLE: Event Response Chain Example in TSX\nDESCRIPTION: Demonstrates event response chain visualization by changing background colors of nodes when clicked\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/guide/interaction/event-handling/event-propagation.mdx#2025-04-17_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { lynx } from '@lynx';\n\nlynx.beforePublishEvent((e) => {\n  if (e.type === 'tap') {\n    count++;\n    countText.setText(`Click count: ${count}`);\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Injecting Android LynxTemplateResourceFetcher\nDESCRIPTION: Example of injecting a template resource fetcher implementation into LynxViewBuilder in Android.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/lynx-native-api/resource-fetcher/TemplateResourceFetcher.mdx#2025-04-17_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nLynxViewBuilder builder = new LynxViewBuilder();\nbuilder.setTemplateResourceFetcher(new ExampleTemplateResourceFetcher());\n```\n\n----------------------------------------\n\nTITLE: ScrollView Vertical Layout\nDESCRIPTION: Example demonstrating vertical scrolling implementation with scroll-view component by setting scroll-orientation property.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/guide/ui/scrolling.mdx#2025-04-17_snippet_1\n\nLANGUAGE: JSX\nCODE:\n```\n<scroll-view scroll-orientation=\"vertical\">\n```\n\n----------------------------------------\n\nTITLE: Calculating Swiper Offset in TypeScript React\nDESCRIPTION: Calculates the final offset for the swiper component based on touch movement and current offset.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/guide/start/tutorial-product-detail.mdx#2025-04-17_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nfunction Swiper() {\n  const currentOffsetRef = useRef<number>(0);\n  const touchStartXRef = useRef<number>(0);\n  const touchStartCurrentOffsetRef = useRef<number>(0);\n\n  function handleTouchStart(e: TouchEvent) {\n    touchStartXRef.current = e.touches[0].clientX;\n    touchStartCurrentOffsetRef.current = currentOffsetRef.current;\n  }\n\n  function handleTouchMove(e: TouchEvent) {\n    const delta = e.touches[0].clientX - touchStartXRef.current;\n    const offset = touchStartCurrentOffsetRef.current + delta;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Full Animation Example with Array Keyframes and Configuration Options\nDESCRIPTION: Complete example of using the animate() method with array-format keyframes and multiple configuration options like duration, delay, iterations, and easing, along with animation control methods.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/lynx-api/lynx/lynx-animate-api.mdx#2025-04-17_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nlet ani = lynx.getElementById('test').animate(\n  [\n    {\n      'background-color': 'blue',\n      transform: 'translateX(100px) translateY(300px) rotate(360deg)',\n    },\n    {\n      'background-color': 'red',\n      transform: 'translateX(0px) translateY(600px) rotate(0deg)',\n    },\n  ],\n  {\n    duration: 3000,\n    delay: 1000,\n    iterations: Infinity,\n    direction: 'alternate',\n    easing: 'ease-in-out',\n    fill: 'both',\n  },\n);\n\n// When the parameter is Object, it is strictly required to write percentages with a percent sign such as '.50' and '50' equivalents are divided by 100\nlet ani = lynx.getElementById('test').animate(\n  {\n    '0%': {\n      transform: 'rotate(0deg)',\n      left: '0px',\n    },\n    '50%': {\n      // The properties of the intermediate frame can default.\n      left: '30px',\n    },\n    '100%': {\n      transform: 'rotate(225deg)',\n      left: '100px',\n    },\n  },\n  {\n    duration: 3000,\n    delay: 1000,\n    iterations: Infinity,\n    direction: 'alternate',\n    easing: 'ease-in-out',\n    fill: 'both',\n  },\n);\n\nani.pause();\nani.play();\nani.cancel();\n```\n\n----------------------------------------\n\nTITLE: Complete BankCardScrollView Component Implementation\nDESCRIPTION: Shows the complete implementation of the BankCardScrollView component with the added onCardSelect property and its usage in the handleCardSelect function to propagate card selection events.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/react/payment-details.mdx#2025-04-17_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\nexport default function BankCardScrollView({\n  onCardSelect,\n}: BankCardScrollViewProps) {\n  const [selectedCard, setSelectedCard] = useState(cards[0]);\n\n  const handleCardSelect = (card: BankCard) => {\n    setSelectedCard(card);\n    onCardSelect?.(card);\n  };\n\n  return (\n    <view className=\"payment-wrapper\">\n      <text className=\"title\">Payment method</text>\n      <view className=\"payment-container\">\n        <scroll-view scroll-y className=\"payment-sv\">\n          {cards.map((card, idx) => (\n            <view\n              key={idx}\n              className=\"card\"\n              bindtap={() => handleCardSelect(card)}\n            >\n              ...\n            </view>\n          ))}\n        </scroll-view>\n      </view>\n    </view>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Context Type in React Components TypeScript Example\nDESCRIPTION: Example showing how to set and use contextType in a React component. Demonstrates creating a context, setting the contextType property, and accessing context within render method.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/api/react/Class.PureComponent.mdx#2025-04-17_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\ntype MyContext = number\nconst Ctx = React.createContext<MyContext>(0)\n\nclass Foo extends React.Component {\n  static contextType = Ctx\n  context!: React.ContextType<typeof Ctx>\n  render () {\n    return <>My context's value: {this.context}</>;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Example Element Removal Implementation\nDESCRIPTION: Demonstrates the complete workflow of creating elements, appending a child to a parent, and then removing it using the __RemoveElement function.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/engine/element-api/__RemoveElement.mdx#2025-04-17_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n// main-thread.js\nlet child = __CreateElement('view', 0, {});\n\nlet parent = __CreateElement('view', 0, {});\n\n__AppendElement(parent, child);\n\n__RemoveElement(parent, child);\n```\n\n----------------------------------------\n\nTITLE: React Component Imports\nDESCRIPTION: Import statements for required React components and utilities\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/guide/start/quick-start.mdx#2025-04-17_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport { QRCodeSVG } from 'qrcode.react';\nimport { PackageManagerTabs, Steps } from '@theme';\nimport { Go, PlatformTabs } from '@lynx';\nimport * as NextSteps from '@lynx/NextSteps';\n```\n\n----------------------------------------\n\nTITLE: Implementing Element Event Binding in Lynx SDK (JSX)\nDESCRIPTION: Example showing how to create an element with a tap event listener. It demonstrates creating a view element, setting its src attribute, and attaching a tap event that will call the 'onTap' function when triggered.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/api/engine/element-api/__SetEvents.mdx#2025-04-17_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<view src=\"xxx\" bindtap=\"onTap\" />;\n\n// main-thread.js\nlet element = __CreateElement('view', 0, {});\n__SetAttribute(element, 'src', 'xx');\n\n__SetEvents(element, [{ type: 'bindEvent', name: 'tap', function: 'onTap' }]);\n```\n\n----------------------------------------\n\nTITLE: GlobalEventEmitter for Broadcasting Events in Lynx\nDESCRIPTION: Example showing how to use GlobalEventEmitter to broadcast events between components in Lynx. This demonstrates how to trigger events in one component and have them received by another unrelated component.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/guide/interaction/event-handling/event-propagation.mdx#2025-04-17_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nuseEffect(() => {\n  globalEventEmitter.addListener(\"componentA-click\", () => setClickedB(true));\n}, []);\n```\n\nLANGUAGE: tsx\nCODE:\n```\nbind:onTap={() => {\n  setClickedA(true);\n  globalEventEmitter.toggle(\"componentA-click\");\n}}\n```\n\nLANGUAGE: tsx\nCODE:\n```\nconst globalEventEmitter = lynx.getJSModule(\"GlobalEventEmitter\");\n```\n\n----------------------------------------\n\nTITLE: Creating Bridging Header for Swift Module Integration\nDESCRIPTION: Bridging header file that imports the necessary Lynx Objective-C headers to make them accessible in Swift. This is required when implementing native modules in Swift for a primarily Objective-C project.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/guide/custom-native-modules/native-module-ios.mdx#2025-04-17_snippet_2\n\nLANGUAGE: objective-c\nCODE:\n```\n//\n//  Use this file to import your target's public headers that you would like to expose to Swift.\n//\n\n#import <Lynx/LynxModule.h>\n\n\n```\n\n----------------------------------------\n\nTITLE: Using React.lazy for Code Splitting in React Components\nDESCRIPTION: Demonstrates how to implement code splitting with React.lazy to dynamically import a component. This allows the component to be loaded only when it's actually needed in the application.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/api/react/Function.lazy.mdx#2025-04-17_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { lazy } from 'react';\n\nconst MarkdownPreview = lazy(() => import('./MarkdownPreview.js'));\n```\n\n----------------------------------------\n\nTITLE: Defining React Suspense Function in TypeScript\nDESCRIPTION: TypeScript definition of the React Suspense function, showing its signature with SuspenseProps parameter and return type.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/api/react/Function.Suspense.mdx#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction Suspense(props: SuspenseProps): null | ReactElement<any, string | JSXElementConstructor<any>>\n```\n\n----------------------------------------\n\nTITLE: Registering Named Data Processors\nDESCRIPTION: Code snippet showing how to register multiple named data processors. This demonstrates how to define different processing functions that can be selected by the client when updating data.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/guide/use-data-from-host-platform.mdx#2025-04-17_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nimport { root } from '@lynx-js/react';\nimport { App } from './App.js';\n\nlynx.registerDataProcessors({\n  dataProcessors: {\n    someDataProcessor: function (rawInitData) {\n      // process rawInitData\n      return processedInitData;\n    },\n    anotherDataProcessor: function (rawInitData) {\n      // process rawInitData\n      return processedInitData;\n    },\n  },\n});\nroot.render(<App />);\n\nif (import.meta.webpackHot) {\n  import.meta.webpackHot.accept();\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a PerformanceObserver with createObserver() in Lynx\nDESCRIPTION: This snippet demonstrates how to create a PerformanceObserver using the performance.createObserver() method. The observer watches for 'metric.fcp' and 'pipeline' entries, with a callback function that processes performance entry events.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/lynx-api/lynx/lynx-performance.mdx#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ncreateObserver(callback: PerformanceCallback): PerformanceObserver;\n```\n\n----------------------------------------\n\nTITLE: Declaring Custom Element Class in Java/Kotlin\nDESCRIPTION: Shows how to declare a custom input element by extending LynxUI class. This is the base structure needed for creating a custom native element.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/guide/custom-native-component/custom-component-android.mdx#2025-04-17_snippet_0\n\nLANGUAGE: java\nCODE:\n```\npublic class LynxExplorerInput extends LynxUI<AppCompatEditText> {\n\n  public LynxExplorerInput(LynxContext context) {\n    super(context);\n  }\n  //...\n\n}\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nclass LynxExplorerInput(context: LynxContext) : LynxUI<AppCompatEditText>(context) {\n\n   //...\n\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing LynxEnv in AppDelegate (Objective-C)\nDESCRIPTION: This code snippet shows how to initialize LynxEnv in the AppDelegate of an iOS application using Objective-C. It ensures that LynxEnv is set up before any Lynx Engine interface calls.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/guide/start/fragments/ios/integrating-lynx-with-existing-app-ios.mdx#2025-04-17_snippet_2\n\nLANGUAGE: objective-c\nCODE:\n```\n#import <Lynx/LynxEnv.h>\n#import <Lynx/LynxView.h>\n\n@implementation AppDelegate\n- (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions {\n  [LynxEnv sharedInstance];\n  return YES;\n}\n\n```\n\n----------------------------------------\n\nTITLE: Initializing React PureComponent with Props and Context in TypeScript\nDESCRIPTION: Alternative constructor for the PureComponent class that accepts both props and context parameters. This constructor is deprecated as part of React's legacy context API.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/api/react/Class.PureComponent.mdx#2025-04-17_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nnew PureComponent<P, S, SS>(props: P, context: any): PureComponent<P, S, SS>\n```\n\n----------------------------------------\n\nTITLE: Defining Rspeedy Config Function Signature\nDESCRIPTION: TypeScript function signature for the defineConfig helper that provides type checking and intellisense for Rspeedy configuration objects\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/rspeedy/rspeedy.defineconfig.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare function defineConfig(config: Config): Config;\n```\n\n----------------------------------------\n\nTITLE: Using main-thread:ref with useMainThreadRef Hook\nDESCRIPTION: Example showing how to obtain a node object usable on the main thread using main-thread:ref attribute and useMainThreadRef hook. This allows targeting specific elements beyond what event.target provides.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/react/main-thread-script.mdx#2025-04-17_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useMainThreadRef } from '@lynx-js/react';\n\nexport default function App() {\n  const red = 'red';\n  const textRef = useMainThreadRef<MainThread.Element>();\n\n  function addBackgroundColor(event: MainThread.ITouchEvent) {\n    'main thread';\n    textRef.current?.setStyleProperty('background-color', red);\n  }\n\n  return (\n    <view main-thread:bindtap={addBackgroundColor}>\n      <text main-thread:ref={textRef}>Hello World!</text>\n      <text>Hello World!</text>\n    </view>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Integrating DevTool Switch Page in iOS with Swift\nDESCRIPTION: This snippet demonstrates how to create a view controller that loads the Lynx DevTool switch page in Swift. It initializes a LynxView with appropriate configurations, sets up layout parameters, and loads the DevTool switch template from a bundle resource.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/guide/start/integrate-lynx-devtool-advanced.mdx#2025-04-17_snippet_1\n\nLANGUAGE: swift\nCODE:\n```\nimport UIKit\n\nclass DebugSettingViewController: UIViewController {\n  var url: String?\n\n  override func viewDidLoad() {\n    super.viewDidLoad()\n\n    let lynxView = LynxView { builder in\n      builder.config = LynxConfig(provider: DemoLynxProvider())\n      builder.screenSize = self.view.frame.size\n      builder.fontScale = 1.0\n    }\n\n    lynxView.preferredLayoutWidth = self.view.frame.size.width\n    lynxView.preferredLayoutHeight = self.view.frame.size.height\n    lynxView.layoutWidthMode = .exact\n    lynxView.layoutHeightMode = .exact\n    self.view.addSubview(lynxView)\n\n    let bundlePath = Bundle.main.path(forResource: \"LynxDebugResources\", ofType: \"bundle\")\n    let templateData = NSData(contentsOfFile: bundlePath!.appending(\"/switchPage/devtoolSwitch.lynx.bundle\"))\n    lynxView.loadTemplate(templateData! as Data, withURL: \"devtool_switch/switchPage/devtoolSwitch.lynx.bundle\")\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating CSS animation-fill-mode Property Usage\nDESCRIPTION: This snippet shows various ways to use the animation-fill-mode property in CSS, including single and multiple animation examples.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/css/properties/animation-fill-mode.mdx#2025-04-17_snippet_0\n\nLANGUAGE: css\nCODE:\n```\n/* Single animation */\nanimation-fill-mode: none;\nanimation-fill-mode: forwards;\nanimation-fill-mode: backwards;\nanimation-fill-mode: both;\n\n/* Multiple animations */\nanimation-fill-mode: none, backwards;\nanimation-fill-mode: both, forwards, none;\n```\n\n----------------------------------------\n\nTITLE: ScrollView Event Interface Definitions\nDESCRIPTION: TypeScript interface definitions for scroll event handlers including scroll, scrolltoupper, scrolltolower, and scrollend events.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/elements/built-in/scroll-view.mdx#2025-04-17_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\nbindscroll = (e: scrollEvent) => {};\n\ninterface scrollEvent extends CustomEvent {\n  detail: {\n    type: 'scroll'; // Event name\n    deltaX: number; // Horizontal scroll offset since last scroll\n    deltaY: number; // Vertical scroll offset since last scroll\n    scrollLeft: number; // Current horizontal scroll offset\n    scrollTop: number; // Current vertical scroll offset\n    scrollHeight: number; // Current content height\n    scrollWidth: number; // Current content width\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Using __MAIN_THREAD__ Macro in Class Component (TypeScript/React)\nDESCRIPTION: Illustrates the usage of the __MAIN_THREAD__ macro in a class component to conditionally initialize a logger in a non-main thread environment. The example shows how the code is transformed during compilation for both background and main thread environments.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/react/Document.built-in-macros.mdx#2025-04-17_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { AppLoggerFactory } from '../utils/appLoggerFactory';\n\nclass Conversations extends Component<Props, State> {\n  appLogger: AppLogger;\n\n  constructor(props: Props) {\n    super(props);\n    this.state = {\n      showConversationItemAction: false,\n      loading: true,\n    };\n    if (!__MAIN_THREAD__) {\n      this.appLogger = AppLoggerFactory();\n    }\n  }\n}\n```\n\nLANGUAGE: tsx\nCODE:\n```\nclass Conversations extends Component<Props, State> {\n  appLogger: AppLogger;\n\n  constructor(props: Props) {\n    super(props);\n    this.state = {\n      showConversationItemAction: false,\n      loading: true,\n    };\n    this.appLogger = AppLoggerFactory();\n  }\n}\n```\n\nLANGUAGE: tsx\nCODE:\n```\nclass Conversations extends Component<Props, State> {\n  appLogger: AppLogger;\n\n  constructor(props: Props) {\n    super(props);\n    this.state = {\n      showConversationItemAction: false,\n      loading: true,\n    };\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using define with Objects in JavaScript\nDESCRIPTION: Example of using the 'define' property with nested objects in a Lynx Rspeedy configuration. It demonstrates how to define complex structures like import.meta.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/api/rspeedy/rspeedy.source.define.md#2025-04-17_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineConfig } from '@lynx-js/rspeedy'\nexport default defineConfig({\n  source: {\n    define: {\n      'import.meta': {\n        foo: JSON.stringify('foo'),\n        bar: { baz: 0 },\n      },\n    },\n  },\n})\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconsole.log(import.meta)\n\n// ⬇️ Turn into being...\nconsole.log({ foo: \"foo\", bar: { baz: 0 } })\n```\n\n----------------------------------------\n\nTITLE: Implementing Font Scale Change Listener in React\nDESCRIPTION: React component implementation that demonstrates how to listen for font scale changes using the GlobalEventEmitter. The component tracks and displays the number of font scale change events.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/elements/built-in/text.mdx#2025-04-17_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nconst YourComponent = () => {\n  const [touchCount, setTouchCount] = useState(0);\n\n  useEffect(() => {\n    console.log('hello world card loaded');\n\n    const eventEmitter = getJSModule('GlobalEventEmitter');\n    const listener = (msg) => {\n      console.log('onFontScaleChanged testGlobalEvent:', msg);\n      setTouchCount((prevCount) => prevCount + 1);\n    };\n\n    eventEmitter.addListener('onFontScaleChanged', listener);\n\n    return () => {\n      eventEmitter.removeListener('onFontScaleChanged', listener);\n    };\n  }, []);\n\n  return (\n    <view>\n      <text>touch: {touchCount}</text>\n    </view>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Defining CreateRspeedyOptions Interface in TypeScript\nDESCRIPTION: TypeScript interface definition for CreateRspeedyOptions that specifies the configuration options available when creating an Rspeedy instance. The interface includes optional properties for working directory, environment settings, environment variable loading, and rspeedy configuration.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/rspeedy/rspeedy.createrspeedyoptions.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface CreateRspeedyOptions \n```\n\n----------------------------------------\n\nTITLE: Demonstrating CSS overflow-y Property Usage\nDESCRIPTION: This code snippet shows the basic syntax for using the overflow-y property in CSS. It demonstrates the two possible values: visible and hidden.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/css/properties/overflow-y.mdx#2025-04-17_snippet_0\n\nLANGUAGE: css\nCODE:\n```\noverflow-y: visible;\noverflow-y: hidden;\n```\n\n----------------------------------------\n\nTITLE: Defining Multiple Theme Styles with CSS Variables\nDESCRIPTION: CSS code defining multiple theme styles using CSS variables. This approach allows for switching between themes by changing the class of the top-level element.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/guide/styling/custom-theming.mdx#2025-04-17_snippet_6\n\nLANGUAGE: css\nCODE:\n```\n.theme-light {\n  --color: black;\n  --bg: white;\n}\n\n.theme-dark {\n  --color: white;\n  --bg: black;\n}\n\n.content {\n  color: var(--color);\n  background-color: var(--bg);\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Location Information in ReactLynx with React Router\nDESCRIPTION: Shows how to access and use the current location object in ReactLynx applications. Uses useLocation hook to get the current URL information and useEffect to perform analytics tracking when the location changes.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/react/routing.mdx#2025-04-17_snippet_3\n\nLANGUAGE: js\nCODE:\n```\nimport { useEffect } from '@lynx-js/react';\nimport { useLocation } from 'react-router';\n\nfunction useAnalytics() {\n  let location = useLocation();\n  useEffect(() => {\n    sendFakeAnalytics(location.pathname);\n  }, [location]);\n}\n```\n\n----------------------------------------\n\nTITLE: Using Route Parameters in ReactLynx with React Router\nDESCRIPTION: Demonstrates how to define dynamic route segments with route parameters and access those parameter values in components. Uses useParams hook to extract the city parameter from the URL path.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/react/routing.mdx#2025-04-17_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<Route path=\"/concerts/:city\" element={<City />} />\n```\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useParams } from 'react-router';\n\nfunction City() {\n  let { city } = useParams();\n  let data = useFakeDataLibrary(`/api/v2/cities/${city}`);\n}\n```\n\n----------------------------------------\n\nTITLE: CSS Box Shadow Basic Syntax Examples\nDESCRIPTION: Demonstrates various syntax patterns for the box-shadow property, including keyword values, offset positioning, blur radius, spread radius, and multiple shadow declarations.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/css/properties/box-shadow.mdx#2025-04-17_snippet_0\n\nLANGUAGE: css\nCODE:\n```\n/* Keyword values */\nbox-shadow: none;\n\n/* offset-x | offset-y | color */\nbox-shadow: 60px -16px teal;\n\n/* offset-x | offset-y | blur-radius | color */\nbox-shadow: 10px 5px 5px black;\n\n/* offset-x | offset-y | blur-radius | spread-radius | color */\nbox-shadow: 2px 2px 2px 1px rgba(0, 0, 0, 0.2);\n\n/* inset | offset-x | offset-y | color */\nbox-shadow: inset 5em 1em gold;\n\n/* Any number of shadows, separated by commas */\nbox-shadow:\n  3px 3px red,\n  -1em 0 0.4em olive;\n```\n\n----------------------------------------\n\nTITLE: Registering Data Processors in ReactLynx with TypeScript\nDESCRIPTION: Definition and usage examples of registerDataProcessors method in the Lynx interface. This method is used to register DataProcessors before rendering the React application.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/react/Interface.Lynx.mdx#2025-04-17_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nregisterDataProcessors: (dataProcessorDefinition: DataProcessorDefinition) => void;\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { root } from \"@lynx-js/react\"\n\n// You MUST call this before `root.render()`\nlynx.registerDataProcessors({\n  defaultDataProcessor: () => {...} // default DataProcessor\n  dataProcessors: {\n    getScreenMetricsOverride: () => {...} // named DataProcessor\n  }\n})\n\nroot.render(<App/>);\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { root, Component } from \"@lynx-js/react\"\n\nclass App extends Component {\n  static defaultDataProcessor() {\n     ...\n  }\n\n  static dataProcessors = {\n    getScreenMetricsOverride() {\n      ...\n    }\n  }\n}\n\nlynx.registerDataProcessors(App); // You can pass `App` because it has the required shape\nroot.render(<App/>);\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { root } from \"@lynx-js/react\"\n\ninterface ExistingInterface {\n  somePropertyFromExistingInterface: number\n}\n\ndeclare module '@lynx-js/react' {\n  interface InitDataRaw extends ExistingInterface {\n    someAnotherCustomProperty: string\n  }\n}\n\nlynx.registerDataProcessors({\n  defaultDataProcessor: (initDataRaw) => {\n    initDataRaw.somePropertyFromExistingInterface // will be typed\n  }\n})\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { root, useInitData } from \"@lynx-js/react\"\n\ninterface AnotherExistingInterface {\n  someAnotherPropertyFromExistingInterface: number\n}\n\ndeclare module '@lynx-js/react' {\n  interface InitData extends AnotherExistingInterface {\n    someCustomProperty: string\n  }\n}\n\nroot.registerDataProcessors({\n  defaultDataProcessor: () => {\n    return {\n      someCustomProperty: 'value', // will be typed\n      someAnotherPropertyFromExistingInterface: 1, // will be typed\n    }\n  }\n})\n\nfunction App() {\n  const initData = useInitData();\n\n  initData.someCustomProperty // will be typed\n  initData.someAnotherPropertyFromExistingInterface // will be typed\n}\n```\n\n----------------------------------------\n\nTITLE: Using runOnBackground Function in TypeScript\nDESCRIPTION: Defines the runOnBackground utility function that allows triggering JavaScript functions on the JS context asynchronously. This function takes another function as input and returns a wrapper function that executes the original function in the background.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/api/react/Function.runOnBackground.mdx#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction runOnBackground<Fn>(f: Fn): (...args: Parameters<Fn>) => void\n```\n\n----------------------------------------\n\nTITLE: Implementing NativeLocalStorageModule in Java for Lynx Explorer on Android\nDESCRIPTION: This Java code implements a NativeLocalStorageModule class that extends LynxModule. It provides methods for setting, getting, and clearing storage items using SharedPreferences. The @LynxMethod annotation is used to export methods to the Lynx runtime.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/guide/custom-native-modules/native-module-android.mdx#2025-04-17_snippet_0\n\nLANGUAGE: java\nCODE:\n```\npackage com.lynx.explorer.modules;\n\nimport android.content.Context;\nimport android.content.SharedPreferences;\n\nimport com.lynx.jsbridge.LynxMethod;\nimport com.lynx.jsbridge.LynxModule;\nimport com.lynx.tasm.behavior.LynxContext;\n\npublic class NativeLocalStorageModule extends LynxModule {\nprivate static final String PREF_NAME = \"MyLocalStorage\";\npublic NativeLocalStorageModule(Context context) {\nsuper(context);\n}\n\nContext getContext() {\nLynxContext lynxContext = (LynxContext) mContext;\nreturn lynxContext.getContext();\n}\n\n@LynxMethod\npublic void setStorageItem(String key, String value) {\nSharedPreferences sharedPreferences = getContext().getSharedPreferences(PREF_NAME, Context.MODE_PRIVATE);\nSharedPreferences.Editor editor = sharedPreferences.edit();\neditor.putString(key, value);\neditor.apply();\n}\n\n@LynxMethod\npublic String getStorageItem(String key) {\nSharedPreferences sharedPreferences = getContext().getSharedPreferences(PREF_NAME, Context.MODE_PRIVATE);\nString value = sharedPreferences.getString(key, null);\nreturn value;\n}\n\n@LynxMethod\npublic void clearStorage() {\nSharedPreferences sharedPreferences = getContext().getSharedPreferences(PREF_NAME, Context.MODE_PRIVATE);\nSharedPreferences.Editor editor = sharedPreferences.edit();\neditor.clear();\neditor.apply();\n}\n}\n```\n\n----------------------------------------\n\nTITLE: Defining TouchEvent ChangedTouches Property in TypeScript\nDESCRIPTION: Defines the 'changedTouches' property of a TouchEvent, which is an array of Touch objects representing touch points that have changed since the last event.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/lynx-api/event/touch-event.mdx#2025-04-17_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nchangedTouches: Touch []\n```\n\n----------------------------------------\n\nTITLE: Explicit Background-Only Marking for Custom Hooks (JSX)\nDESCRIPTION: This example illustrates the need for explicit 'background only' marking when using custom hooks in ReactLynx, to ensure proper compilation and execution in the background thread.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/react/thinking-in-reactlynx.mdx#2025-04-17_snippet_9\n\nLANGUAGE: jsx\nCODE:\n```\nfunction useMount(effect) {\n  useEffect(() => {\n    effect();\n  }, []);\n}\n\nfunction App() {\n  function backgroundOnly() {\n    // 不需要标记这个函数\n    // 因为 `backgroundOnly` 只在 `useMount` 的回调函数中使用\n  }\n  useMount(() => {\n    'background only';\n    // 你需要标记这个函数\n    backgroundOnly();\n  });\n  return <view />;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Lynx Service Dependencies in Gradle\nDESCRIPTION: Extended Lynx service dependencies including image service (with Fresco), log service, and HTTP service configurations.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/guide/start/fragments/android/integrating-lynx-with-existing-app-android.mdx#2025-04-17_snippet_1\n\nLANGUAGE: groovy\nCODE:\n```\ndependencies {\n    // lynx dependencies\n    implementation \"org.lynxsdk.lynx:lynx:3.2.0-rc.0\"\n    implementation \"org.lynxsdk.lynx:lynx-jssdk:3.2.0-rc.0\"\n    implementation \"org.lynxsdk.lynx:lynx-trace:3.2.0-rc.0\"\n    implementation \"org.lynxsdk.lynx:primjs:2.11.1-rc.0\"\n\n    // integrating image-service\n    implementation \"org.lynxsdk.lynx:lynx-service-image:3.2.0-rc.0\"\n\n    // image-service dependencies, if not added, images cannot be loaded; if the host APP needs to use other image libraries, you can customize the image-service and remove this dependency\n    implementation \"com.facebook.fresco:fresco:2.3.0\"\n    implementation \"com.facebook.fresco:animated-gif:2.3.0\"\n    implementation \"com.facebook.fresco:animated-webp:2.3.0\"\n    implementation \"com.facebook.fresco:webpsupport:2.3.0\"\n    implementation \"com.facebook.fresco:animated-base:2.3.0\"\n\n    implementation \"com.squareup.okhttp3:okhttp:4.9.0\"\n\n    // integrating log-service\n    implementation \"org.lynxsdk.lynx:lynx-service-log:3.2.0-rc.0\"\n\n    // integrating http-service\n    implementation \"org.lynxsdk.lynx:lynx-service-http:3.2.0-rc.0\"\n}\n```\n\n----------------------------------------\n\nTITLE: Sending Global Events in Android\nDESCRIPTION: Java method for sending global events from Android native code to the front end. Takes an event name string and JavaOnlyArray parameters as arguments to emit events that can be listened to via GlobalEventEmitter.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/lynx-native-api/lynx-view/send-global-event.mdx#2025-04-17_snippet_0\n\nLANGUAGE: java\nCODE:\n```\npublic void sendGlobalEvent(String name, JavaOnlyArray params);\n```\n\n----------------------------------------\n\nTITLE: Implementing Reactive Counter with Valtio and Lynx JS\nDESCRIPTION: This example demonstrates creating a counter component using Valtio for state management in a Lynx JS application. It shows how to create a proxy state object, subscribe to state changes, and react to user interactions.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/react/state-management/valtio.mdx#2025-04-17_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useEffect } from '@lynx-js/react';\nimport { proxy, useSnapshot, subscribe } from 'valtio';\n\nconst state = proxy<{ count: number }>({ count: 0 });\n\nexport function App() {\n  const snap = useSnapshot(state);\n\n  const handleTap = () => {\n    state.count++;\n  };\n\n  useEffect(() => {\n    const unsubscribe = subscribe(state, () => {\n      console.log('state changed: ', state.count);\n    });\n\n    return () => {\n      unsubscribe();\n    };\n  }, []);\n\n  return (\n    <view>\n      <text>{snap.count}</text>\n      <text bindtap={handleTap}>Tap</text>\n    </view>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Defining ChunkSplit Property Type in TypeScript\nDESCRIPTION: Type definition for the Performance.chunkSplit property that accepts different chunk splitting strategies. The property is optional and can be configured with ChunkSplit, ChunkSplitBySize, ChunkSplitCustom types, or left undefined.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/api/rspeedy/rspeedy.performance.chunksplit.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nchunkSplit?: ChunkSplit | ChunkSplitBySize | ChunkSplitCustom | undefined;\n```\n\n----------------------------------------\n\nTITLE: Invoking UI Methods with Element.invoke() in TypeScript\nDESCRIPTION: Asynchronously invokes an element's UI method and returns a Promise. The Promise resolves with the method's return value or rejects with an Error if the call fails.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/lynx-api/main-thread/main-thread-element.mdx#2025-04-17_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst result = await element.invoke(methodName, params?);\n```\n\n----------------------------------------\n\nTITLE: Enabling CSS Modules Globally\nDESCRIPTION: Configuration example demonstrating how to enable CSS Modules for all files using a function that always returns true.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/api/rspeedy/rspeedy.cssloader.modules.md#2025-04-17_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineConfig } from '@lynx-js/rspeedy'\n\nexport default defineConfig({\n  tools: {\n    cssLoader: {\n      modules: () => true,\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Sticky Nodes in Lynx List Component (TSX)\nDESCRIPTION: This snippet demonstrates how to implement sticky top or bottom nodes in a <list> component by setting the sticky, sticky-offset, sticky-top, and sticky-bottom attributes on <list> and <list-item> elements.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/elements/built-in/list.mdx#2025-04-17_snippet_34\n\nLANGUAGE: tsx\nCODE:\n```\n<list\n  className=\"list-container\"\n  sticky={true}\n  sticky-offset={50}\n  list-type=\"single\"\n  span-count={1}\n  scroll-orientation=\"vertical\"\n>\n\n```\n\nLANGUAGE: tsx\nCODE:\n```\n<list-item\n  className=\"sticky-top-item\"\n  full-span={true}\n  sticky-top={true}\n  item-key={`list-item-${index}`}\n  key={`list-item-${index}`}\n/>\n```\n\n----------------------------------------\n\nTITLE: CSS Border Top Color Examples\nDESCRIPTION: Examples showing different ways to specify the border-top-color property value using color names, hex codes, RGB values, HSL values, currentColor keyword, and transparent keyword.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/css/properties/border-top-color.mdx#2025-04-17_snippet_0\n\nLANGUAGE: css\nCODE:\n```\nborder-top-color: red;\nborder-top-color: #ffbb00;\nborder-top-color: rgb(255, 0, 0);\nborder-top-color: hsla(100%, 50%, 25%, 0.75);\nborder-top-color: currentColor;\nborder-top-color: transparent;\n```\n\n----------------------------------------\n\nTITLE: Marking a Module as Background-Only in ReactLynx (JavaScript)\nDESCRIPTION: This example shows how to mark an entire module as background-only in ReactLynx using the 'background-only' import directive.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/react/thinking-in-reactlynx.mdx#2025-04-17_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport 'background-only';\n\nexport const env = NativeModules.env;\nconsole.log('指令标记的模块是后台专属的');\n```\n\n----------------------------------------\n\nTITLE: Basic IFR Example Component\nDESCRIPTION: Example component demonstrating Instant First-Frame Rendering using a Fibonacci calculation to simulate complex rendering. The code demonstrates synchronous rendering on the main thread.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/guide/interaction/ifr.mdx#2025-04-17_snippet_1\n\nLANGUAGE: TSX\nCODE:\n```\n<Go\n  example=\"ifr\"\n  defaultFile=\"src/fib/App.tsx\"\n  defaultEntryFile=\"dist/fib.lynx.bundle\"\n  highlight=\"{34}\"\n  entry=\"src/fib\"\n  img=\"https://lf-lynx.tiktok-cdns.com/obj/lynx-artifacts-oss-sg/lynx-website/assets/ifr_fib.mp4\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Configuring Single Entry Point\nDESCRIPTION: Example showing how to configure a single entry point in RSpeedy using defineConfig.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/rspeedy/rspeedy.source.entry.md#2025-04-17_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineConfig } from '@lynx-js/rspeedy'\nexport default defineConfig({\n  entry: './src/pages/main/index.js',\n})\n```\n\n----------------------------------------\n\nTITLE: Dynamic Importing in React Component\nDESCRIPTION: This React component demonstrates both static imports from npm packages and dynamic imports of local modules. It shows how to use dynamic imports with both Promise-based syntax and async/await pattern within component lifecycle methods.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/guide/scripting-runtime/index.mdx#2025-04-17_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Component } from '@lynx-js/react'; // can import npm packages\nimport { capitalize } from 'lodash';\n\nexport default App extends Component {\n  constructor(props) {\n    super(props);\n    // can dynamic import relative path\n    import('./utils.js').then(utils => {\n      capitalize(utils.getSum());\n    });\n  }\n  async componentDidMount() {\n    const utils = await import('./utils.js'); // can dynamic import relative path\n    utils.getAge();\n  }\n  render() {\n    return <view><text>Hello, world!</text></view>;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Converting useRef to useMainThreadRef\nDESCRIPTION: Example showing how to convert a useRef reference to useMainThreadRef for main thread access. The code demonstrates setting up a swiper container reference that can be accessed from the main thread.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/guide/start/tutorial-product-detail.mdx#2025-04-17_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\nfunction useUpdateSwiperStyle() {\n  const swiperContainerRef = useMainThreadRef<MainThread.Element>(null);\n\n  function updateSwiperStyle(offset: number) {\n   'main thread'\n    ...\n  }\n\n  return {\n    swiperContainerRef,\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Word-Break CSS Syntax Examples\nDESCRIPTION: Examples of the word-break CSS property showing two possible values: break-all and normal. These properties control how lines are broken within words when reaching the end of a container.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/css/properties/word-break.mdx#2025-04-17_snippet_0\n\nLANGUAGE: css\nCODE:\n```\nword-break: break-all;\nword-break: normal;\n```\n\n----------------------------------------\n\nTITLE: Implementing Retry Logic for requireModule() in JavaScript\nDESCRIPTION: A JavaScript implementation that adds retry functionality when using lynx.requireModule(). It attempts to load a module up to three times before propagating any error, handling timeout and other exceptions.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/lynx-api/lynx/lynx-require-module.mdx#2025-04-17_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nlet result = null;\n(function () {\n  let retry = 0;\n  function requireModule(path) {\n    try {\n      result = lynx.requireModule(path);\n    } catch (error) {\n      retry += 1;\n      if (retry < 3) {\n        requireModule(path);\n      } else {\n        throw error;\n      }\n    }\n  }\n  requireModule('path/to/chunk');\n})();\n```\n\n----------------------------------------\n\nTITLE: Registering Native Module in Objective-C Environment\nDESCRIPTION: Code to register the native module in the Lynx runtime environment using global configuration.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/guide/custom-native-modules/native-module-ios.mdx#2025-04-17_snippet_4\n\nLANGUAGE: objective-c\nCODE:\n```\n#import \"NativeLocalStorageModule.h\"\n\n- (void)setupLynxEnv {\n  // ...\n\n  // register global JS module\n  [globalConfig registerModule:NativeLocalStorageModule.class];\n\n  // ...\n}\n\n\nNS_ASSUME_NONNULL_END\n```\n\n----------------------------------------\n\nTITLE: Finding Views by Name in Android\nDESCRIPTION: Java method to find a View object based on its name attribute specified in the layout file. Returns a View instance that matches the provided name.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/lynx-native-api/lynx-view/find-view-by-name.mdx#2025-04-17_snippet_0\n\nLANGUAGE: java\nCODE:\n```\npublic View findViewByName(String name);\n```\n\n----------------------------------------\n\nTITLE: Using Array Format for Keyframes in animate() Method\nDESCRIPTION: Example of using the array format for defining keyframes in the animate() method, with each object in the array representing a keyframe with properties and values.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/lynx-api/lynx/lynx-animate-api.mdx#2025-04-17_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nelement.animate(\n  [\n    {\n      // from\n      opacity: 0,\n      color: '#fff',\n    },\n    {\n      // to\n      opacity: 1,\n      color: '#000',\n    },\n  ],\n  2000,\n);\n```\n\n----------------------------------------\n\nTITLE: Rendering Color Palette in React\nDESCRIPTION: This code snippet demonstrates how to create a visual representation of various colors using React components. Each color is displayed as a div element with specific styling to showcase the color. The padding, margin, and background color are set using inline styles.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/css/data-type/color.mdx#2025-04-17_snippet_2\n\nLANGUAGE: JSX\nCODE:\n```\n<div style={{ padding: '17.5px 90px', margin: '-10px', backgroundColor: 'rgba(255, 105, 180, 1)' }}></div>\n```\n\n----------------------------------------\n\nTITLE: Defining Source Interface in TypeScript\nDESCRIPTION: TypeScript interface definition for Source configuration that controls source file behavior. Contains optional properties for managing module aliases, asset inclusion, decorators, compile-time definitions, entry points, file exclusions/inclusions, import transformations, and TypeScript configuration.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/rspeedy/rspeedy.source.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface Source \n```\n\n----------------------------------------\n\nTITLE: Using the Border Shorthand Property in CSS\nDESCRIPTION: Examples of how to use the border shorthand CSS property with different combinations of width, style, and color values.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/css/properties/border.mdx#2025-04-17_snippet_0\n\nLANGUAGE: css\nCODE:\n```\n/* style */\nborder: solid;\n\n/* width | style */\nborder: 2px dotted;\n\n/* style | color */\nborder: outset #f33;\n\n/* width | style | color */\nborder: medium dashed green;\n```\n\n----------------------------------------\n\nTITLE: Demonstrating CSS flex Property Syntax\nDESCRIPTION: This snippet shows various ways to use the flex property, including single-value, two-value, and three-value syntax. It demonstrates how to set flex-grow, flex-shrink, and flex-basis using the shorthand.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/css/properties/flex.mdx#2025-04-17_snippet_0\n\nLANGUAGE: css\nCODE:\n```\nflex: none;\nflex: auto;\n\n/* One value, unitless number: flex-grow\nflex-basis is then equal to 0. */\nflex: 2;\n\n/* One value, width/height: flex-basis */\nflex: 10em;\nflex: 30%;\n\n/* Two values: flex-grow | flex-basis */\nflex: 1 30px;\n\n/* Two values: flex-grow | flex-shrink */\nflex: 2 2;\n\n/* Three values: flex-grow | flex-shrink | flex-basis */\nflex: 2 2 10%;\n```\n\n----------------------------------------\n\nTITLE: Front-end Event Binding Implementation in Lynx Framework\nDESCRIPTION: React/JSX implementation showing how to bind and handle input events from native components in the Lynx framework front-end.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/guide/custom-native-component/custom-component-android.mdx#2025-04-17_snippet_8\n\nLANGUAGE: jsx\nCODE:\n```\nconst handleInput = (e) => {\n  const currentValue = e.detail.value.trim();\n  setInputValue(currentValue);\n};\n\n<input className=\"input-box\" bindinput={handleInput} value={inputValue} />;\n```\n\n----------------------------------------\n\nTITLE: Using __AddConfig with View Element in JSX\nDESCRIPTION: Example JSX code showing how a view element can be defined with attributes that will be processed by the frontend framework using configuration settings.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/engine/element-api/__AddConfig.mdx#2025-04-17_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<view src=\"xxx\" bindtap=\"onTap\" />\n```\n\n----------------------------------------\n\nTITLE: Implementing scrollBy in Lynx ScrollView Component\nDESCRIPTION: Demonstrates how to scroll a scroll-view by a specific distance using the scrollBy method. The implementation allows setting a pixel offset and includes success and failure callbacks.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/elements/built-in/scroll-view.mdx#2025-04-17_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n<`<scroll-view>`id=\"scrollview\"/>\n\nlynx.createSelectorQuery()\n  .select('#scrollview')\n  .invoke({\n    method: 'scrollBy',\n    params: {\n      offset: number, // Scroll distance, unit: px\n    },\n    success(res) {\n      console.log('succ ');\n    },\n    fail(res) {\n      console.log('err ');\n    },\n}).exec();\n```\n\n----------------------------------------\n\nTITLE: Element Method Invocation using NodesRef\nDESCRIPTION: Demonstrates how to invoke element methods using NodesRef.invoke() with success and error handling. Shows pattern for getting element boundaries relative to screen.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/guide/interaction/event-handling/manipulating-element.react.mdx#2025-04-17_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nref\n  .invoke({\n    method: 'boundingClientRect',\n    params: {\n      relativeTo: 'screen',\n    },\n    success: (res) => {\n      // Handle successful result\n      const { left, top, width, height } = res;\n    },\n    fail: (err) => {\n      // Handle potential errors\n      console.error('Failed to get element position:', err);\n    },\n  })\n  .exec();\n```\n\n----------------------------------------\n\nTITLE: Compiling NPM Packages Example in JavaScript\nDESCRIPTION: Example showing how to configure Source.include to compile specific NPM packages from node_modules that contain ESNext syntax. It demonstrates two methods: using require.resolve with path.dirname and using regular expressions.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/api/rspeedy/rspeedy.source.include.md#2025-04-17_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createRequire } from 'node:module'\nimport path from 'node:path'\n\nimport { defineConfig } from '@lynx-js/rspeedy'\n\nconst require = createRequire(import.meta.url)\n\nexport default defineConfig({\n  source: {\n    include: [\n      // Method 1:\n      // First get the path of the module by `require.resolve`\n      // Then pass path.dirname to point to the corresponding directory\n      path.dirname(require.resolve('query-string')),\n      // Method 2:\n      // Match by regular expression\n      // All paths containing `node_modules/query-string/` will be matched\n      /node_modules[\\\\/]query-string[\\\\/]/,\n    ],\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Image Pause Animation Implementation\nDESCRIPTION: Shows how to pause animation on an image element using SelectorQuery.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/elements/built-in/image.mdx#2025-04-17_snippet_3\n\nLANGUAGE: ts\nCODE:\n```\nlynx.createSelectorQuery()\n     .select('#gifs')\n     .invoke({\n      method: 'pauseAnimation'，\n    })\n    .exec();\n```\n\n----------------------------------------\n\nTITLE: Class Component DataProcessor Registration in ReactLynx\nDESCRIPTION: Example showing how to register data processors using a class component with static defaultDataProcessor or static dataProcessors properties.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/api/react/Interface.Lynx.mdx#2025-04-17_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { root, Component } from \"@lynx-js/react\"\n\nclass App extends Component {\n  static defaultDataProcessor() {\n     ...\n  }\n\n  static dataProcessors = {\n    getScreenMetricsOverride() {\n      ...\n    }\n  }\n}\n\nlynx.registerDataProcessors(App); // You can pass `App` because it has the required shape\nroot.render(<App/>);\n```\n\n----------------------------------------\n\nTITLE: Implementing Webpack Provider with SWC Plugin\nDESCRIPTION: Example configuration showing how to switch from Rspack to Webpack using the webpackProvider and pluginSwc for TypeScript transpilation. This demonstrates setting up the provider and required plugins in the Rspeedy config.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/rspeedy/rspeedy.config.provider.md#2025-04-17_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineConfig } from '@lynx-js/rspeedy'\nimport { webpackProvider } from '@rsbuild/webpack'\nimport { pluginSwc } from '@rsbuild/plugin-webpack-swc'\n\nexport default defineConfig({\n  provider: webpackProvider,\n  plugins: [\n    pluginSwc(),\n  ],\n})\n```\n\n----------------------------------------\n\nTITLE: Background Only Directive with React Hooks\nDESCRIPTION: Example showing how to use the background only directive with React hooks for event handling, demonstrating practical usage in a component.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/react/Document.directives.mdx#2025-04-17_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport {useFirstRender} from './useFirstRender';\n\nfunction bgOnlyAction(pureCallback) {\n  'background only';\n  lynx.getJSModule('GlobalEventEmitter').addListener('eventName', pureCallback);\n}\n\nfunction Foo({ prop } ){\n  const ref = useRef(null);\n  useFirstRender(() => {\n    bgOnlyAction(() => {\n      // ...\n    });\n  });\n  return <view>;\n}\n```\n\n----------------------------------------\n\nTITLE: Converting JSX Component to Rendering Directives in JavaScript\nDESCRIPTION: Example of how the JSX is transformed into a series of Lynx SDK function calls including __CreateElement, __SetAttribute, and __AddInlineStyle to create and configure an element with inline styles.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/engine/element-api/__AddInlineStyle.mdx#2025-04-17_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// main-thread.js\nlet element = __CreateElement('view', 0, {});\n__SetAttribute(element, 'src', 'xx');\n\n__AddInlineStyle(element, 0, '10px');\n```\n\n----------------------------------------\n\nTITLE: Basic background-origin CSS Syntax Examples\nDESCRIPTION: Demonstrates various ways to use the background-origin property to position background content relative to different boxes in the element's box model.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/css/properties/background-origin.mdx#2025-04-17_snippet_0\n\nLANGUAGE: css\nCODE:\n```\nbackground-origin: border-box\nbackground-origin: padding-box\nbackground-origin: content-box\n// multiple bg-origin\nbackground-origin: content-box, padding-box;\n```\n\n----------------------------------------\n\nTITLE: Event Interception Pattern in TSX\nDESCRIPTION: Shows how to intercept events using catch handlers to prevent further propagation\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/guide/interaction/event-handling/event-propagation.mdx#2025-04-17_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n<View\n  catch:tap={() => {\n    setColor((prev) => {\n      return prev === 'orange' ? '#333' : 'orange';\n    });\n  }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Displaying and Sizing Image in Lynx\nDESCRIPTION: Example showing how to display an image with auto-sizing and fixed width using the image element in Lynx.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/guide/ui/elements-components.mdx#2025-04-17_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<image auto-size style=\"width:100px;\" src=\"assets/logo.png\" />\n```\n\n----------------------------------------\n\nTITLE: Retrieving Dataset from Element in Lynx Framework (JSX)\nDESCRIPTION: This function retrieves all data- attributes from an Element node and returns them as a Record<string, any>. It takes an Element object as a parameter and returns a map of its dataset.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/api/engine/element-api/__GetDataset.mdx#2025-04-17_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n__GetDataset(element: Element) : Record<string, any>;\n```\n\n----------------------------------------\n\nTITLE: Using Content Hash with Specific Length in Bundle Filename\nDESCRIPTION: Example of configuring rspeedy with a length-limited content hash in bundle filenames. This demonstrates how to truncate the hash to 8 characters using the [contenthash:8] syntax.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/api/rspeedy/rspeedy.filename.template.md#2025-04-17_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineConfig } from '@lynx-js/rspeedy'\n\nexport default defineConfig({\n  output: {\n    filename: {\n      template: '[name].[contenthash:8].bundle',\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Producer Configuration\nDESCRIPTION: Configuration setup for a Producer project with experimental lazy bundle support.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/react/code-splitting.md#2025-04-17_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport { pluginReactLynx } from '@lynx-js/react-rsbuild-plugin';\nimport { defineConfig } from '@lynx-js/rspeedy';\n\nexport default defineConfig({\n  source: {\n    entry: './src/index.tsx',\n  },\n  plugins: [\n    pluginReactLynx({\n      experimental_isLazyBundle: true,\n    }),\n  ],\n});\n```\n\n----------------------------------------\n\nTITLE: Basic clip-path Values in CSS\nDESCRIPTION: Demonstrates the basic syntax and shape values for the clip-path property, including none, inset, circle, ellipse, and path functions.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/css/properties/clip-path.mdx#2025-04-17_snippet_0\n\nLANGUAGE: css\nCODE:\n```\n/* Keyword values */\nclip-path: none;\n\n/* <basic-shape> values */\nclip-path: inset(30px super-ellipse 3 3 50px/50px);\nclip-path: circle(50px at 0 100px);\nclip-path: ellipse(50px 60px at 10% 20%);\nclip-path: path(\n  'M0.5,1 C0.5,1,0,0.7,0,0.3 A0.25,0.25,1,1,1,0.5,0.3 A0.25,0.25,1,1,1,1,0.3 C1,0.7,0.5,1,0.5,1 Z'\n);\n```\n\n----------------------------------------\n\nTITLE: Consuming InitData with Class Components in React\nDESCRIPTION: Code snippet showing how to consume initData in a React class component using InitDataConsumer. This provides an alternative approach for accessing host platform data in class-based components.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/guide/use-data-from-host-platform.mdx#2025-04-17_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Component, InitDataProvider, InitDataConsumer } from '@lynx-js/react';\n\nclass C extends Component {\n  render() {\n    return (\n      <InitDataConsumer>\n        {(initData) => (\n          <view>\n            <text>{initData.greeting}</text>\n          </view>\n        )}\n      </InitDataConsumer>\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Basic CSS Opacity Property Usage in Lynx\nDESCRIPTION: Examples of CSS opacity property values in Lynx. Shows how to set fully opaque (1), translucent (0.5), and fully transparent (0) elements.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/css/properties/opacity.mdx#2025-04-17_snippet_0\n\nLANGUAGE: css\nCODE:\n```\nopacity: 1;\nopacity: 0.5;\nopacity: 0;\n```\n\n----------------------------------------\n\nTITLE: Event Capture Implementation in TSX\nDESCRIPTION: Shows event capture phase handling by counting total page clicks from the root node\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/guide/interaction/event-handling/event-propagation.mdx#2025-04-17_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n<View\n  capture-bind:tap={() => {\n    count++;\n  }}\n/>\n```\n\n----------------------------------------\n\nTITLE: ScrollView Method Implementation\nDESCRIPTION: Example showing how to programmatically control scroll-view using the SelectorQuery API.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/elements/built-in/scroll-view.mdx#2025-04-17_snippet_3\n\nLANGUAGE: TypeScript\nCODE:\n```\nlynx\n  .createSelectorQuery() // Create SelectorQuery\n  .select('#video') // Specify target node selector\n  .invoke({\n    method: 'seekTo',\n    params: {\n      duration: 1000, // Operation parameters\n    },\n    success: function (res) {\n      console.log(res);\n    },\n    fail: function (res) {\n      console.log(res.code, res.data);\n    },\n  })\n  .exec(); // Execute query\n```\n\n----------------------------------------\n\nTITLE: Implementing Native Storage Module in Objective-C\nDESCRIPTION: Implementation of the NativeLocalStorageModule with methods for setting, getting, and clearing storage items using NSUserDefaults.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/guide/custom-native-modules/native-module-ios.mdx#2025-04-17_snippet_1\n\nLANGUAGE: objective-c\nCODE:\n```\n#import \"NativeLocalStorageModule.h\"\n\n@interface NativeLocalStorageModule()\n@property (strong, nonatomic) NSUserDefaults *localStorage;\n@end\n\n@implementation NativeLocalStorageModule\n\nstatic NSString *const NativeLocalStorageKey = @\"MyLocalStorage\";\n\n- (instancetype)init {\n    if (self = [super init]) {\n        _localStorage = [[NSUserDefaults alloc] initWithSuiteName:NativeLocalStorageKey];\n    }\n    return self;\n}\n\n+ (NSString *)name {\n    return @\"NativeLocalStorageModule\";\n}\n\n+ (NSDictionary<NSString *, NSString *> *)methodLookup {\n    return @{\n        @\"setStorageItem\" : NSStringFromSelector(@selector(setStorageItem:value:)),\n        @\"getStorageItem\" : NSStringFromSelector(@selector(getStorageItem:)),\n        @\"clearStorage\" : NSStringFromSelector(@selector(clearStorage))\n    };\n}\n\n- (void)setStorageItem:(NSString *)key value:(NSString *)value {\n    [self.localStorage setObject:value forKey:key];\n}\n\n- (NSString*)getStorageItem:(NSString *)key {\n    NSString *value = [self.localStorage stringForKey:key];\n    return value;\n}\n\n- (void)clearStorage {\n    NSDictionary *keys = [self.localStorage dictionaryRepresentation];\n    for (NSString *key in keys) {\n        [self.localStorage removeObjectForKey:key];\n    }\n}\n\n@end\n```\n\n----------------------------------------\n\nTITLE: Defining the Filename Interface in TypeScript\nDESCRIPTION: TypeScript interface definition for the Filename interface which specifies the naming structure for various output bundle files. The interface contains optional properties for different asset types.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/api/rspeedy/rspeedy.filename.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface Filename \n\n```\n\n----------------------------------------\n\nTITLE: Binding Main Thread Event Handler in Lynx TSX\nDESCRIPTION: Example of adding a main-thread namespace to an event attribute to handle events on the main thread. This allows for immediate event handling without thread switching delays.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/react/main-thread-script.mdx#2025-04-17_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n<view main-thread:global-bindscroll={onScroll} />\n```\n\n----------------------------------------\n\nTITLE: Importing and Using CSS Modules in JavaScript\nDESCRIPTION: JavaScript example showing how to import CSS module classes and access them with different exportLocalsConvention configurations.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/api/rspeedy/rspeedy.cssloadermodules.namedexport.md#2025-04-17_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as styles from \"./styles.css\";\n\n// If using `exportLocalsConvention: \"as-is\"` (default value):\nconsole.log(styles[\"foo-baz\"], styles.bar);\n\n// If using `exportLocalsConvention: \"camel-case-only\"`:\nconsole.log(styles.fooBaz, styles.bar);\n\n// For the `default` class name\nconsole.log(styles[\"_default\"]);\n```\n\n----------------------------------------\n\nTITLE: Setting Linear Layout Direction\nDESCRIPTION: Configures the main axis direction for the linear layout, defaulting to column direction for vertical alignment of elements.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/guide/ui/layout/linear-layout.mdx#2025-04-17_snippet_1\n\nLANGUAGE: css\nCODE:\n```\nlinear-direction: column;\n```\n\n----------------------------------------\n\nTITLE: Using getJSModule() in JavaScript\nDESCRIPTION: This example demonstrates how to use the getJSModule() method in JavaScript. It shows registering a module using lynx.registerModule and then retrieving it with getJSModule().\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/lynx-api/lynx/lynx-get-js-module.mdx#2025-04-17_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst fooModule = {};\nlynx.registerModule('foo', fooModule);\nlynx.getJSModule('foo') === fooModule; // true\n```\n\n----------------------------------------\n\nTITLE: Creating Masked Images with mask-image in Lynx CSS\nDESCRIPTION: This snippet demonstrates the use of the mask-image property in Lynx CSS to create a circular area with a fading edge effect on an image.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/guide/styling/appearance.mdx#2025-04-17_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<Go\n  img=\"https://lf-lynx.tiktok-cdns.com/obj/lynx-artifacts-oss-sg/lynx-website/assets/doc/guide-mask-image-circle.png\"\n  example=\"css\"\n  defaultFile=\"src/mask_image_circle_gradient/index.tsx\"\n  defaultEntryFile=\"dist/mask_image_circle_gradient.lynx.bundle\"\n  highlight=\"{14}\"\n  entry=\"src/mask_image_circle_gradient\"\n></Go>\n```\n\n----------------------------------------\n\nTITLE: Callback Response Object Structure\nDESCRIPTION: The structure of the response object passed to the callback function, containing information about the intersection state.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/lynx-api/intersection-observer/intersection-observer-observe.mdx#2025-04-17_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n{\n     \"isIntersecting\": boolean, // Whether the target node intersects with the reference node\n     \"intersectionRatio\": number, // The intersection ratio between the target node and the reference node\n     \"intersectionRect\": object, // The intersection area between the target node and the reference node\n     \"boundingClientRect\": object, // The intersection area of the target node\n     \"relativeRect\": object, // The intersection area of the reference node\n     \"observerId\": string, // The id of the target node\n     \"time\": number, // timestamp during intersection detection (not implemented, now returns are all 0)\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Swiper Position in TypeScript React\nDESCRIPTION: Uses setNativeProps to update the transform property of the swiper container, enabling smooth scrolling.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/guide/start/tutorial-product-detail.mdx#2025-04-17_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nfunction Swiper() {\n  const containerRef = useRef<NodesRef>(null);\n\n  function updateSwiperOffset(offset: number) {\n    containerRef.current\n      ?.setNativeProps({\n        style: {\n          transform: `translateX(${offset}px)`,\n        },\n      })\n      .exec();\n  }\n\n  return <view ref={containerRef}></view>;\n}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating CSS line-height Property in Lynx (TypeScript)\nDESCRIPTION: This code snippet shows an interactive example of the CSS line-height property using the Go component. It includes an image preview and specifies the entry point for the example.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/css/properties/line-height.mdx#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n<Go\n  example=\"css-api\"\n  defaultFile=\"src/line-height/App.tsx\"\n  img=\"https://lf-lynx.tiktok-cdns.com/obj/lynx-artifacts-oss-sg/lynx-website/assets/doc/css/line-height.jpg\"\n  entry=\"src/line-height\"\n  defaultEntryFile=\"dist/line-height.lynx.bundle\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Integrating DevTool Switch Page in Android with Java\nDESCRIPTION: This snippet shows how to implement a DevTool switch page in an Android activity using Java. It creates a LynxView, loads the DevTool switch template from assets, and renders it within the activity. The implementation includes a helper method to read byte data from an input stream.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/guide/start/integrate-lynx-devtool-advanced.mdx#2025-04-17_snippet_2\n\nLANGUAGE: java\nCODE:\n```\npublic class SwitchActivity extends AppCompatActivity {\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        LynxView lynxView = buildLynxView();\n        setContentView(lynxView);\n        byte[] array = null;\n        try {\n            InputStream inputStream = this.getAssets().open(\"devtool_switch/switchPage/devtoolSwitch.lynx.bundle\");\n            array = readBytes(inputStream);\n            lynxView.renderTemplateWithBaseUrl(array, TemplateData.empty(), \"devtool_switch/switchPage/devtoolSwitch.lynx.bundle\");\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n\n    private LynxView buildLynxView() {\n        LynxViewBuilder viewBuilder = new LynxViewBuilder();\n        viewBuilder.setTemplateProvider(new DemoTemplateProvider());\n        return viewBuilder.build(this);\n    }\n\n    private byte[] readBytes(InputStream inputStream) throws IOException {\n        byte[] buffer = new byte[1024];\n        int bytesRead;\n        ByteArrayOutputStream output = new ByteArrayOutputStream();\n        while ((bytesRead = inputStream.read(buffer)) != -1) {\n            output.write(buffer, 0, bytesRead);\n        }\n        return output.toByteArray();\n    }\n\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Custom Input Element Locally in Objective-C\nDESCRIPTION: Shows how to register the custom input element locally for a specific LynxView instance. This method limits the element's availability to the current LynxView.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/guide/custom-native-component/custom-component-iOS.mdx#2025-04-17_snippet_3\n\nLANGUAGE: objc\nCODE:\n```\n#import <Lynx/LynxEnv.h>\n#import <Lynx/LynxView.h>\n\n  LynxView *lynxView = [[LynxView alloc] initWithBuilderBlock:^(LynxViewBuilder *builder) {\n    builder.config =\n        [[LynxConfig alloc] initWithProvider:[LynxEnv sharedInstance].config.templateProvider];\n    [builder.config registerUI:[LynxExplorerInput class] withName:@\"input\"];\n  }];\n```\n\n----------------------------------------\n\nTITLE: Accessing Event Target in Lynx\nDESCRIPTION: The target property provides information about the element that triggered the event, including its id, uid, and dataset attributes.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/lynx-api/event/event.mdx#2025-04-17_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ntarget: {\n  id: string,\n  uid: number,\n  dataset: [key: string]: any,\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Swiper with Hooks in TypeScript React\nDESCRIPTION: Refactors the swiper component using custom hooks for offset calculation and style updating, improving code organization.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/guide/start/tutorial-product-detail.mdx#2025-04-17_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nfunction Swiper() {\n  const { updateSwiperStyle, swiperContainerRef } = useUpdateSwiperStyle();\n  const { handleTouchStart, handleTouchMove, handleTouchEnd } = useOffset({\n    onOffsetUpdate: updateSwiperStyle,\n  });\n\n  return (\n    <view\n      class=\"swiper-container\"\n      ref={swiperContainerRef}\n      bindtouchstart={handleTouchStart}\n      bindtouchmove={handleTouchMove}\n      bindtouchend={handleTouchEnd}\n    >\n      {/* ... */}\n    </view>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Swift Native Module in Objective-C Environment\nDESCRIPTION: Code to register the Swift-based native module in the Objective-C Lynx runtime environment.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/guide/custom-native-modules/native-module-ios.mdx#2025-04-17_snippet_5\n\nLANGUAGE: objective-c\nCODE:\n```\n#import \"LynxExplorer-Swift.h\"\n\n- (void)setupLynxEnv {\n  // ...\n\n  // register global JS module\n  [globalConfig registerModule:NativeLocalStorageModule.class];\n\n  // ...\n  }\n\nNS_ASSUME_NONNULL_END\n```\n\n----------------------------------------\n\nTITLE: CSS Animation Formal Syntax Definition\nDESCRIPTION: The formal syntax for the CSS animation property, showing how multiple sets of animations can be defined with properties separated by spaces, and sets separated by commas.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/css/properties/animation.mdx#2025-04-17_snippet_1\n\nLANGUAGE: css\nCODE:\n```\nanimation: <animation-name> || <animation-duration> ||\n  <animation-timing-function> || <animation-delay> ||\n  <animation-iteration-count> || <animation-direction> || <animation-fill-mode>\n  || <animation-play-state>;\n```\n\n----------------------------------------\n\nTITLE: Using forwardRef to Create a Button Component in React\nDESCRIPTION: Example of using forwardRef to create a FancyButton component that forwards a ref to an underlying button element. The component accepts Props including children and type.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/react/Function.forwardRef.mdx#2025-04-17_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\ninterface Props {\n  children?: ReactNode;\n  type: \"submit\" | \"button\";\n}\n\nexport const FancyButton = forwardRef<HTMLButtonElement, Props>((props, ref) => (\n  <button ref={ref} className=\"MyClassName\" type={props.type}>\n    {props.children}\n  </button>\n));\n```\n\n----------------------------------------\n\nTITLE: Registering Custom Input Element Globally in Objective-C\nDESCRIPTION: Demonstrates how to register the custom input element globally using the LYNX_LAZY_REGISTER_UI macro. This allows the element to be shared across multiple LynxView instances.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/guide/custom-native-component/custom-component-iOS.mdx#2025-04-17_snippet_2\n\nLANGUAGE: objc\nCODE:\n```\n#import \"LynxExplorerInput.h\"\n#import <Lynx/LynxComponentRegistry.h>\n\n@implementation LynxExplorerInput\n\nLYNX_LAZY_REGISTER_UI(\"input\")\n\n@end\n\n\n\n@implementation LynxTextField\n\n- (UIEditingInteractionConfiguration)editingInteractionConfiguration API_AVAILABLE(ios(13.0)) {\n  return UIEditingInteractionConfigurationNone;\n}\n\n- (void)setPadding:(UIEdgeInsets)padding {\n  _padding = padding;\n  [self setNeedsLayout];\n}\n\n- (CGRect)textRectForBounds:(CGRect)bounds {\n  CGFloat x = self.padding.left;\n  CGFloat y = self.padding.top;\n  CGFloat width = bounds.size.width - self.padding.left - self.padding.right;\n  CGFloat height = bounds.size.height - self.padding.top - self.padding.bottom;\n\n  return CGRectMake(x, y, width, height);\n}\n\n- (CGRect)editingRectForBounds:(CGRect)bounds {\n  return [self textRectForBounds:bounds];\n}\n@end\n```\n\n----------------------------------------\n\nTITLE: Referencing CSS Variables\nDESCRIPTION: Shows how to use the var() function to reference CSS variables in property values, including the use of default values.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/css/properties/css-variable.mdx#2025-04-17_snippet_1\n\nLANGUAGE: css\nCODE:\n```\n.three {\n  /* --main-bg-color: blue; */\n  color: white;\n  background-color: var(--main-bg-color);\n  width: 50%;\n  border: 1px blue solid;\n}\n\n.two {\n  width: var(--view-width, 100px);\n}\n```\n\n----------------------------------------\n\nTITLE: Basic CSS Background Property Usage Examples\nDESCRIPTION: Examples showing different ways to use the CSS background shorthand property, from simple color assignments to complex image positioning and sizing.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/css/properties/background.mdx#2025-04-17_snippet_0\n\nLANGUAGE: css\nCODE:\n```\n/* Using a <background-color> */\nbackground: green;\n\n/* Using a <bg-image> and <repeat-style> */\nbackground: url('test.jpg') repeat-y;\n\n/* Using a <box> and <background-color> */\nbackground: border-box red;\n\n/* A single image, centered and scaled */\nbackground: no-repeat center / 80% url('../img/image.png');\n```\n\n----------------------------------------\n\nTITLE: useReducer with Reducer Without Action\nDESCRIPTION: TypeScript definition for useReducer hook with a reducer that doesn't take actions, using an initializer function. Returns state and dispatch tuple without action types.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/react/Function.useReducer.mdx#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction useReducer<R, I>(\n   reducer: R,\n   initializerArg: I,\n   initializer: (arg: I) => ReducerStateWithoutAction<R>): [ReducerStateWithoutAction<R>, DispatchWithoutAction]\n```\n\n----------------------------------------\n\nTITLE: Implementing useLayoutEffect Hook in TypeScript\nDESCRIPTION: Function signature for useLayoutEffect hook that accepts an effect callback and optional dependency list. This hook is deprecated and now aliases to useEffect as it cannot provide precise timing for layout operations in background threads.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/api/react/Function.useLayoutEffect.mdx#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction useLayoutEffect(effect: EffectCallback, deps?: DependencyList): void\n```\n\n----------------------------------------\n\nTITLE: Initializing Lynx Service in Java Application\nDESCRIPTION: Implementation of Lynx Service initialization in a Java Android application. It initializes Fresco (required by LynxImageService) and registers essential Lynx services including Image, Log, and Http services.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/guide/start/fragments/android/integrating-lynx-with-existing-app-android.mdx#2025-04-17_snippet_4\n\nLANGUAGE: java\nCODE:\n```\nimport android.app.Application;\n\nimport com.facebook.drawee.backends.pipeline.Fresco;\nimport com.facebook.imagepipeline.core.ImagePipelineConfig;\nimport com.facebook.imagepipeline.memory.PoolConfig;\nimport com.facebook.imagepipeline.memory.PoolFactory;\nimport com.lynx.service.http.LynxHttpService;\nimport com.lynx.service.image.LynxImageService;\nimport com.lynx.service.log.LynxLogService;\nimport com.lynx.tasm.service.LynxServiceCenter;\n\npublic class YourApplication extends Application {\n\n    @Override\n    public void onCreate() {\n        super.onCreate();\n        initLynxService();\n    }\n\n    private void initLynxService() {\n        // init Fresco which is needed by LynxImageService\n        final PoolFactory factory = new PoolFactory(PoolConfig.newBuilder().build());\n        ImagePipelineConfig.Builder builder =\n                ImagePipelineConfig.newBuilder(getApplicationContext()).setPoolFactory(factory);\n        Fresco.initialize(getApplicationContext(), builder.build());\n\n        LynxServiceCenter.inst().registerService(LynxImageService.getInstance());\n        LynxServiceCenter.inst().registerService(LynxLogService.INSTANCE);\n        LynxServiceCenter.inst().registerService(LynxHttpService.INSTANCE);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing the Focus Method in LynxExplorerInput (Objective-C)\nDESCRIPTION: This Objective-C implementation shows how to register a custom input component in Lynx and add a focus method using LYNX_UI_METHOD. It includes the complete component implementation with event handling, property setters, and layout management.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/guide/custom-native-component/custom-component-iOS.mdx#2025-04-17_snippet_1\n\nLANGUAGE: objc\nCODE:\n```\n#import \"LynxExplorerInput.h\"\n#import <Lynx/LynxComponentRegistry.h>\n#import <Lynx/LynxPropsProcessor.h>\n#import <Lynx/LynxUIMethodProcessor.h>\n\n\n@implementation LynxExplorerInput\n\nLYNX_LAZY_REGISTER_UI(\"input\")\n\nLYNX_UI_METHOD(focus) {\n    if ([self.view becomeFirstResponder]) {\n        callback(kUIMethodSuccess, nil);\n    } else {\n        callback(kUIMethodUnknown, @\"fail to focus\");\n    }\n}\n\n- (UITextField *)createView {\n  UITextField *textField = [[LynxTextField alloc] init];\n  //...\n  textField.delegate = self;\n  [[NSNotificationCenter defaultCenter] addObserver:self\n                                        selector:@selector(textFieldDidChange:)\n                                        name:UITextFieldTextDidChangeNotification\n                                        object:textField];\n  return textField;\n}\n\n- (void)emitEvent:(NSString *)name detail:(NSDictionary *)detail {\n  LynxCustomEvent *eventInfo = [[LynxDetailEvent alloc] initWithName:name\n                                                          targetSign:[self sign]\n                                                              detail:detail];\n  [self.context.eventEmitter dispatchCustomEvent:eventInfo];\n}\n\n- (void)textFieldDidChange:(NSNotification *)notification {\n  [self emitEvent:@\"input\"\n           detail:@{\n             @\"value\": [self.view text] ?: @\"\",\n           }];\n}\n\n- (void)layoutDidFinished {\n    self.view.padding = self.padding;\n}\n\nLYNX_PROP_SETTER(\"value\", setValue, NSString *) {\n    self.view.text = value;\n}\n\n\n\n\n@end\n\n\n\n@implementation LynxTextField\n\n- (UIEditingInteractionConfiguration)editingInteractionConfiguration API_AVAILABLE(ios(13.0)) {\n  return UIEditingInteractionConfigurationNone;\n}\n\n- (void)setPadding:(UIEdgeInsets)padding {\n  _padding = padding;\n  [self setNeedsLayout];\n}\n\n- (CGRect)textRectForBounds:(CGRect)bounds {\n  CGFloat x = self.padding.left;\n  CGFloat y = self.padding.top;\n  CGFloat width = bounds.size.width - self.padding.left - self.padding.right;\n  CGFloat height = bounds.size.height - self.padding.top - self.padding.bottom;\n\n  return CGRectMake(x, y, width, height);\n}\n\n- (CGRect)editingRectForBounds:(CGRect)bounds {\n  return [self textRectForBounds:bounds];\n}\n@end\n\n```\n\n----------------------------------------\n\nTITLE: Implementing Main Thread Easing Function\nDESCRIPTION: Defines an easeInOut function that runs on the main thread and demonstrates how to pass it as a prop to the Swiper component.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/guide/start/tutorial-product-detail.mdx#2025-04-17_snippet_13\n\nLANGUAGE: tsx\nCODE:\n```\nfunction easeInOut(x: number) {\n  'main thread';\n  return x < 0.5 ? 2 * x * x : 1 - Math.pow(-2 * x + 2, 2) / 2;\n}\n\n<Swiper main-thread:easing={easeInOut} />;\n```\n\n----------------------------------------\n\nTITLE: Background Only Code Dependencies Example\nDESCRIPTION: Demonstrates rules for using background-only code within components and functions\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/react/thinking-in-reactlynx.mdx#2025-04-17_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nimport { backgroundOnlyFunction } from 'external-module';\n\nbackgroundOnlyFunction(); // ❌ Error: calling background only at top level\n\nexport function App() {\n  function backgroundOnly() {\n    'background only';\n    fetch();\n    NativeModules.call();\n    backgroundOnlyFunction(); // ✅ Correct: calling background only API inside background only function\n  }\n\n  backgroundOnly(); // ❌ Error: calling background only code in render function\n\n  useEffect(() => {\n    backgroundOnly(); // ✅ Correct: calling background only code from background only code\n  }, []);\n\n  return <view />;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing runOnMainThread Function in TypeScript\nDESCRIPTION: Generic function that allows executing functions on the main thread asynchronously. Takes a function as input and returns a wrapper function that can be called with parameters to trigger the original function on the main thread.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/react/Function.runOnMainThread.mdx#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction runOnMainThread<Fn>(fn: Fn): (...args: Parameters<Fn>) => void\n```\n\n----------------------------------------\n\nTITLE: Using Attribute Selectors in TSX\nDESCRIPTION: Example of an image element that can be selected using various attribute selectors like [src], [src=xxx], etc.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/lynx-api/selector-query/selector-query-select.mdx#2025-04-17_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\n// '[src]'\n// '[src=xxx]'\n// '[data-x]'\n// '[data-x=xxx]'\n<image src=\"xxx\" data-x=\"xxx\" />\n```\n\n----------------------------------------\n\nTITLE: Using Descendant Combinator in TSX\nDESCRIPTION: Example of using the descendant combinator (space) to select nested elements at any level of depth.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/lynx-api/selector-query/selector-query-select.mdx#2025-04-17_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\n// GOOD: '.the-ancestor   .the-descendant'\n// BAD:  '.the-ancestor > .the-descendant'\n<view className=\"the-ancestor\">\n  <view>\n    <view className=\"the-descendant\" />\n  </view>\n</view>\n```\n\n----------------------------------------\n\nTITLE: Implementing Element Creation and Configuration in Main Thread (TSX)\nDESCRIPTION: TypeScript code demonstrating how to create an element, set attributes, and add custom configuration in the main thread of the Lynx framework.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/engine/element-api/__AddConfig.mdx#2025-04-17_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n// main-thread.js\nlet element = __CreateElement('view', 0, {});\n__SetAttribute(element, 'src', 'xx');\n\n__AddConfig(element, 'anyConfig', {});\n```\n\n----------------------------------------\n\nTITLE: Defining Opacity Values in CSS (Lynx Framework)\nDESCRIPTION: Examples of setting different opacity values in CSS. The property accepts values between 0.0 and 1.0, where 1 means completely opaque (fully visible), 0 means completely transparent (invisible), and values in between create varying levels of transparency.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/api/css/properties/opacity.mdx#2025-04-17_snippet_0\n\nLANGUAGE: css\nCODE:\n```\n/* 完全不透明 */\nopacity: 1;\n\n/* 半透明 */\nopacity: 0.5;\n\n/* 完全透明 */\n\nopacity: 0;\n```\n\n----------------------------------------\n\nTITLE: getElementById Usage Example in Lynx\nDESCRIPTION: Shows a practical example of using getElementById to obtain an element reference using a specific ID string.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/lynx-api/lynx/lynx-get-element-by-id.mdx#2025-04-17_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nlet ele = lynx.getElementById('id');\n```\n\n----------------------------------------\n\nTITLE: UseRef with Nullable Value Type\nDESCRIPTION: Overload of useRef that accepts either null or a value of type T and returns a RefObject. This implementation is used when you need the ref to potentially hold null values.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/react/Function.useRef.mdx#2025-04-17_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nfunction useRef<T>(initialValue: null | T): RefObject<T>\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple Named Entries in rSpeedy\nDESCRIPTION: Example showing how to configure rSpeedy with multiple named entry points. This uses an object with keys as entry names and values as path strings or arrays of path strings.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/api/rspeedy/rspeedy.entry.md#2025-04-17_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineConfig } from '@lynx-js/rspeedy'\nexport default defineConfig({\n  entry: {\n    foo: './src/pages/foo/index.js',\n    bar: ['./src/pages/bar/index.js', './src/post.js'], // multiple entry modules is allowed\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Defining cwd Property in CreateRspeedyOptions Interface (TypeScript)\nDESCRIPTION: This code snippet defines the 'cwd' property within the CreateRspeedyOptions interface. It is an optional string property that represents the root path of the current build.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/rspeedy/rspeedy.createrspeedyoptions.cwd.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ncwd?: string;\n```\n\n----------------------------------------\n\nTITLE: Using Content Hash in Bundle Filename Configuration\nDESCRIPTION: Example of configuring rspeedy to use content hash in bundle filenames. This snippet demonstrates how to set a custom template that includes the entry name and content hash.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/api/rspeedy/rspeedy.filename.template.md#2025-04-17_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineConfig } from '@lynx-js/rspeedy'\n\nexport default defineConfig({\n  output: {\n    filename: {\n      template: '[name].[contenthash].bundle',\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Advanced Async Error Handling\nDESCRIPTION: Improved async error handling example that preserves the original stack trace by creating the Error object synchronously.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/lynx-api/lynx/lynx-report-error.mdx#2025-04-17_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport fetch from '@fetch';\n\nexport function getData(params) {\n  const error = new Error(); // construct the error synchronously\n  return new Promise((resolve, reject) => {\n    fetch(\n      {\n        url: 'HOST',\n        method: 'GET',\n        params,\n      },\n      (res) => {\n        if (res?.status_code === 0) {\n          error.message = 'fetch error: ' + res?.status_code;\n          lynx.reportError(error);\n          reject(res);\n        } else {\n          resolve(res);\n        }\n      },\n    );\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Basic CSS Transition Duration Examples\nDESCRIPTION: Examples of setting transition duration in CSS using seconds and milliseconds.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/css/properties/transition-duration.mdx#2025-04-17_snippet_0\n\nLANGUAGE: css\nCODE:\n```\ntransition-duration: 2s;\ntransition-duration: 300ms;\n```\n\n----------------------------------------\n\nTITLE: Advanced i18next Configuration with Dynamic Imports\nDESCRIPTION: Complete i18next setup with dynamic resource loading using webpack context\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/guide/inclusion/internationalization.mdx#2025-04-17_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport i18next from 'i18next';\nimport type { i18n } from 'i18next';\n\n// Localizations imported statically, available at the initial screen\nconst localesContext = import.meta.webpackContext('./locales', {\n  recursive: false,\n  regExp: /\\.json$/,\n});\n\nconst localI18nInstance: i18n = i18next.createInstance();\n\nlocalI18nInstance.init({\n  lng: 'en',\n  // The default JSON format needs Intl.PluralRules API, which is currently unavailable in Lynx.\n  compatibilityJSON: 'v3',\n  // Add all statically imported localizations to i18next resources.\n  resources: Object.fromEntries(\n    localesContext.keys().map((key) => [\n      key.match(/\\/([^\\/]+)\\.json$/)?.[1] || key,\n      {\n        translation: localesContext(key) as Record<string, string>,\n      },\n    ]),\n  ),\n});\n\nexport { localI18nInstance as i18n };\n```\n\n----------------------------------------\n\nTITLE: Runtime Type Checking with Utility Functions\nDESCRIPTION: Examples of using utility functions for runtime type checking of platform data, including a practical example with fetch API.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/packages/lynx-compat-data/README.md#2025-04-17_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { isPlatformStatement } from '@lynx-js/lynx-compat-data';\nimport iosJson from '@lynx-js/lynx-compat-data/platforms/ios.json';\n\nif (isPlatformStatement(iosJson.platforms.ios)) {\n  // ios: PlatformStatement\n  ios.type; // safe to access\n}\n\nfetch('https://api.example.com/lynx-compat-data/platforms/ios.json')\n  .then((response) => response.json())\n  .then((data) => {\n    if (isPlatformStatement(data.platforms.ios)) {\n      console.log(`iOS platform type: ${data.platforms.ios.type}`);\n      console.log(\n        `Latest iOS version: ${Object.keys(data.platforms.ios.releases).pop()}`,\n      );\n    } else {\n      console.error('Invalid iOS platform data');\n    }\n  })\n  .catch((error) => console.error('Error fetching iOS data:', error));\n```\n\n----------------------------------------\n\nTITLE: Using React memo with a Functional Component\nDESCRIPTION: Example showing how to use the memo function to wrap a functional component, preventing unnecessary re-renders when props haven't changed.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/api/react/Function.memo.mdx#2025-04-17_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { memo } from 'react';\n\nconst SomeComponent = memo(function SomeComponent(props: { foo: string }) {\n  // ...\n});\n```\n\n----------------------------------------\n\nTITLE: Event Interception in Lynx\nDESCRIPTION: Example showing how to intercept events in Lynx using the catch event type, preventing events from further propagation. This demonstrates stopping event bubbling at a specific component.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/guide/interaction/event-handling/event-propagation.mdx#2025-04-17_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nbind:onTap={() => {\n  setBubbled(true);\n  setTimeout(() => {\n    setBubbled(false);\n  }, 300);\n}}\n```\n\nLANGUAGE: tsx\nCODE:\n```\n<Text>Tap outside 'click me' will bubble to parent</Text>\n```\n\nLANGUAGE: tsx\nCODE:\n```\ncatch:onTap={() => {}}\n```\n\n----------------------------------------\n\nTITLE: Defining View Class Attribute in TypeScript\nDESCRIPTION: Defines the 'class' attribute used to specify one or more class names for an element, allowing CSS to apply styles to the element.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/elements/built-in/view.mdx#2025-04-17_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nclass?: string;\n```\n\n----------------------------------------\n\nTITLE: Using createSelectorQuery in a React Component\nDESCRIPTION: This example demonstrates how to use the createSelectorQuery() method within a React component to obtain the position and size of a specified text node. It utilizes the useEffect hook to execute the query after the component mounts.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/lynx-api/lynx/lynx-create-selector-query.mdx#2025-04-17_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useEffect } from '@lynx-js/react';\n\nfunction App() {\n  useEffect(() => {\n    lynx\n      .createSelectorQuery() // create SelectorQuery\n      .select('#my-id') // Specify the selector of the target node\n      .invoke({\n        // Specify the operation for the target node\n        method: 'boundingClientRect',\n        success: function (res) {\n          console.log(res);\n        },\n        fail: function (res) {\n          console.log(res.code, res.data);\n        },\n      })\n      .exec(); // Execute the query\n  }, []);\n\n  return (\n    <view>\n      <text id=\"my-id\">Hello, ReactLynx</text>\n    </view>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Directly Manipulating Lynx Components with SelectorQuery\nDESCRIPTION: Example of using the imperative API to directly interact with custom components. This code demonstrates how to use the SelectorQuery API to call the 'focus' method on an input element, showing the command-based interaction pattern in Lynx.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/guide/custom-native-component/custom-component-android.mdx#2025-04-17_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nlynx\n  .createSelectorQuery()\n  .select('#input-id')\n  .invoke({\n    method: 'focus',\n    params: {},\n    success: function (res) {\n      console.log('lynx', 'request focus success');\n    },\n    fail: function (res) {\n      console.log('lynx', 'request focus fail');\n    },\n  })\n  .exec();\n```\n\n----------------------------------------\n\nTITLE: Defining lynx.reload() Method Signature in TypeScript\nDESCRIPTION: Specifies the TypeScript signature for the lynx.reload() method. It takes an object value for new initial data and a callback function as parameters, and returns void.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/lynx-api/lynx/lynx-reload.mdx#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nreload(value: object, callback: () => void): void;\n```\n\n----------------------------------------\n\nTITLE: Implementing Resource Prefetching in a React Component\nDESCRIPTION: A complete example showing how to use the requestResourcePrefetch method to prefetch images and videos in a Lynx React component. It demonstrates prefetching resources on component mount and using the prefetched resources when the component's state changes.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/api/lynx-api/lynx/lynx-request-resource-prefetch.mdx#2025-04-17_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useState, useEffect } from '@lynx-js/react';\n\nfunction Page() {\n  const [show, setShow] = useState(false);\n\n  useEffect(() => {\n    // 在页面 DidMount 时我们提前发起资源预加载\n    // 我们需要预加载一批资源，包括两张图片和两段视频。\n    // 首先准备好资源参数，给图片指定 priority 和 cacheTarget，给视频指定必需的 preloadKey。\n    let resData = [\n      {\n        uri: 'https://xxxxx1.jpg',\n        type: 'image',\n        params: { priority: 'high', cacheTarget: 'disk' },\n      },\n      {\n        uri: 'https://xxxxx2.jpg',\n        type: 'image',\n        params: { cacheTarget: 'bitmap' },\n      },\n      {\n        uri: 'https://zzzzz1.mp4',\n        type: 'video',\n        params: { preloadKey: 'zzzzz1' },\n      },\n      {\n        uri: 'https://zzzzz2.mp4',\n        type: 'video',\n        params: { preloadKey: 'zzzzz2' },\n      },\n    ];\n\n    // 调用 requestResourcePrefetch 发起预加载\n    lynx.requestResourcePrefetch?.(\n      {\n        data: resData,\n      },\n      (res) => {\n        if (res.code == 0) {\n          console.log('success!');\n        } else {\n          console.log('fail! ', res.msg);\n        }\n        console.log(\n          'prefetch status of each resource:',\n          JSON.stringify(res.details),\n        );\n      },\n    );\n  }, []);\n\n  const handleTap = () => {\n    // 通过setShow改变show状态，控制图片、视频的展示\n    setShow(!show);\n  };\n\n  return (\n    <view onTap={handleTap}>\n      {/* 根据 show 状态来决定是否展示图片，注意这里 src 是上述的唯一的 key，这里应该保持 src 和预加载时一致 */}\n      {show && <image src=\"https://xxxxx1.jpg\" />}\n      {show && <image src=\"https://xxxxx2.jpg\" />}\n      {/* 根据 show 状态来决定是否展示视频，注意这里 preload-key 是上述唯一的 key，这里应该保持 preload-key 和预加载时一致 */}\n      {show && <view-pro src=\"https://zzzzz1.mp4\" preload-key=\"zzzzz1\" />}\n      {show && <view-pro src=\"https://zzzzz2.mp4\" preload-key=\"zzzzz2\" />}\n    </view>\n  );\n}\n\nexport default Page;\n```\n\n----------------------------------------\n\nTITLE: Loading Remote Resources with requireModuleAsync\nDESCRIPTION: Example showing how to use requireModuleAsync to load a module from a remote URL and handle potential errors.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/lynx-api/lynx/lynx-require-module-async.mdx#2025-04-17_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nlynx.requireModuleAsync('https://example.com/path/to/chunk', (err, exports) => {\n  if (err) {\n    return;\n  }\n  // use exports\n});\n```\n\n----------------------------------------\n\nTITLE: JavaScript Implementation Example\nDESCRIPTION: Example showing how to create an element and set its attribute using the __SetAttribute method in JavaScript.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/engine/element-api/__SetAttribute.mdx#2025-04-17_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// main-thread.js\nlet element = __CreateElement('view', 0, {});\n__SetAttribute(element, 'src', 'xx');\n```\n\n----------------------------------------\n\nTITLE: Defining Output.filenameHash Property in TypeScript\nDESCRIPTION: The TypeScript signature for the filenameHash property in the Output class, showing it accepts boolean, string, or undefined values.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/api/rspeedy/rspeedy.output.filenamehash.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfilenameHash?: boolean | string | undefined;\n```\n\n----------------------------------------\n\nTITLE: Using Processed Data in React Component\nDESCRIPTION: Code snippet demonstrating how to use processed data in a React component after applying a data processor. This shows how the component can use a consistent property name regardless of the source platform.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/guide/use-data-from-host-platform.mdx#2025-04-17_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useInitData } from '@lynx-js/react';\n\nexport function App() {\n  const initData = useInitData();\n  return (\n    <view>\n      <text>{initData.pageTitle}</text>\n    </view>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Transition Timing Function CSS Examples\nDESCRIPTION: Examples of different timing function values that can be used with the transition-timing-function property, including ease, linear, and bezier curve variations.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/css/properties/transition-timing-function.mdx#2025-04-17_snippet_0\n\nLANGUAGE: css\nCODE:\n```\ntransition-timing-function: ease;\ntransition-timing-function: ease-in;\ntransition-timing-function: ease-out;\ntransition-timing-function: ease-in-out;\ntransition-timing-function: linear;\ntransition-timing-function: step-start;\ntransition-timing-function: step-end;\n\ntransition-timing-function: cubic-bezier(0.1, 0.7, 1, 0.1);\n```\n\n----------------------------------------\n\nTITLE: Presetting Fixed Dimensions for LynxView in Android\nDESCRIPTION: This code snippet demonstrates how to preset a fixed size of 400x200 for a LynxView using LynxViewBuilder. It sets the measured spec for both width and height to EXACTLY 400 and 200 pixels respectively.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/guide/embed-lynx-to-native/embed-lynx-to-native-mode-android.mdx#2025-04-17_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nLynxViewBuilder viewBuilder = new LynxViewBuilder();\nviewBuilder = viewBuilder.setPresetMeasuredSpec(View.MeasureSpec.makeMeasureSpec(400, View.MeasureSpec.EXACTLY),\n        View.MeasureSpec.makeMeasureSpec(200, View.MeasureSpec.EXACTLY));\n\nLynxView lynxview = viewBuilder.build(this);;\n```\n\n----------------------------------------\n\nTITLE: Updating LynxView Template Data in Java (Android)\nDESCRIPTION: This snippet shows the syntax for updating LynxView template data using the updateData method in Java for Android. It takes a LynxUpdateMeta object as a parameter, which specifies the optional data content for updating the template.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/lynx-native-api/lynx-view/update-data.mdx#2025-04-17_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nvoid updateData(LynxUpdateMeta meta)\n```\n\n----------------------------------------\n\nTITLE: TypeScript Source.alias Type Definition\nDESCRIPTION: Type definition for the Source.alias property showing it accepts a Record of string keys mapping to string, false, or string array values.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/rspeedy/rspeedy.source.alias.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nalias?: Record<string, string | false | string[]> | undefined;\n```\n\n----------------------------------------\n\nTITLE: Advanced CSS Modules Configuration\nDESCRIPTION: Example showing how to configure CSS Modules with additional options using an object configuration, including named exports feature.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/api/rspeedy/rspeedy.cssloader.modules.md#2025-04-17_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineConfig } from '@lynx-js/rspeedy'\n\nexport default defineConfig({\n  tools: {\n    cssLoader: {\n      modules: {\n        namedExport: true,\n      },\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Using InsertElementBefore in a Frontend Framework\nDESCRIPTION: Example demonstrating how to use __InsertElementBefore to insert an element between two existing elements. The code creates three view elements, appends the first and last to a parent, then inserts the middle element before the last one.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/engine/element-api/__InsertElementBefore.mdx#2025-04-17_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n// main-thread.js\nlet first = __CreateElement('view', 0, {});\n\nlet last = __CreateElement('view', 0, {});\n\nlet mid = __CreateElement('view', 0, {});\n\nlet parent = __CreateElement('view', 0, {});\n\n__AppendElement(parent, first);\n__AppendElement(parent, last);\n\n__InsertElementBefore(parent, mid, last);\n```\n\n----------------------------------------\n\nTITLE: Modifying Scroll View Properties with setNativeProps in JSX\nDESCRIPTION: This example shows how to use setNativeProps to change the upper-threshold property of a scroll-view component when its child text is tapped.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/api/lynx-api/nodes-ref/nodes-ref-set-native-props.mdx#2025-04-17_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nfunction App() {\n  return (\n    <scroll-view id=\"intro\">\n      <text\n        bindtap={() => {\n          lynx\n            .createSelectorQuery()\n            .select('#intro')\n            .setNativeProps({\n              'upper-threshold': '10px',\n            })\n            .exec();\n        }}\n      >\n        Hello, World!\n      </text>\n    </scroll-view>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Main Thread Directive in React Component\nDESCRIPTION: Demonstrates how to use the 'main thread' directive to create a main thread function for handling touch events with style updates.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/react/Document.directives.mdx#2025-04-17_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport {MainThread} from \"@lynx-js/types\";\n\nexport default function App() {\n  const red = 'red';\n\n  function handleTap(event: MainThread.TouchEvent) {\n    'main thread';\n    event.currentTarget.setStyleProperty('background-color', red);\n  }\n\n  return (\n    <view main-thread:bindtap={handleTap}>\n      <text>Hello World!</text>\n    </view>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Multiple Class Selectors in CSS\nDESCRIPTION: Demonstrates how to select elements using multiple class names together\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/css/selectors.mdx#2025-04-17_snippet_2\n\nLANGUAGE: css\nCODE:\n```\n.className1.className2 { property declarations }\n\nelement.className1.className2 { property declarations }\n```\n\nLANGUAGE: css\nCODE:\n```\ninput.a.b{\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: CSS border-radius Syntax Examples\nDESCRIPTION: Examples of various border-radius syntax options, showing how to set radius for all corners uniformly or individually, as well as how to create elliptical corners using the optional second radius values.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/css/properties/border-radius.mdx#2025-04-17_snippet_0\n\nLANGUAGE: css\nCODE:\n```\n/* The syntax of the first radius allows one to four values */\n/* Radius is set for all 4 sides */\nborder-radius: 10px;\n\n/* top-left-and-bottom-right | top-right-and-bottom-left */\nborder-radius: 10px 5%;\n\n/* top-left | top-right-and-bottom-left | bottom-right */\nborder-radius: 2px 4px 2px;\n\n/* top-left | top-right | bottom-right | bottom-left */\nborder-radius: 1px 0 3px 4px;\n\n/* The syntax of the second radius allows one to four values */\n/* (first radius values) / radius */\nborder-radius: 10px / 20px;\n\n/* (first radius values) / top-left-and-bottom-right | top-right-and-bottom-left */\nborder-radius: 10px 5% / 20px 30px;\n\n/* (first radius values) / top-left | top-right-and-bottom-left | bottom-right */\nborder-radius: 10px 5px 2em / 20px 25px 30%;\n\n/* (first radius values) / top-left | top-right | bottom-right | bottom-left */\nborder-radius: 10px 5% / 20px 25em 30px 35em;\n```\n\n----------------------------------------\n\nTITLE: Implementing Card Selection Handler with Callback\nDESCRIPTION: Updates the handleCardSelect function to not only update the local state but also call the optional onCardSelect callback to notify parent components of the selection.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/react/payment-details.mdx#2025-04-17_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nconst handleCardSelect = (card: BankCard) => {\n  setSelectedCard(card);\n  onCardSelect?.(card);\n};\n```\n\n----------------------------------------\n\nTITLE: Defining getJSModule() Method Signature in TypeScript\nDESCRIPTION: This snippet shows the TypeScript signature for the getJSModule() method. It's a generic function that takes a string name parameter and returns a Module type.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/lynx-api/lynx/lynx-get-js-module.mdx#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ngetJSModule: <Module>(name: string) => Module;\n```\n\n----------------------------------------\n\nTITLE: Defining CSS Animation Duration Syntax\nDESCRIPTION: Examples of how to specify animation-duration in CSS, showing both single and multiple animation duration values with proper time units.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/css/properties/animation-duration.mdx#2025-04-17_snippet_0\n\nLANGUAGE: css\nCODE:\n```\n/* Single animation */\nanimation-duration: 6s\nanimation-duration: 120ms\n\n/* Multiple animations */\nanimation-duration: 1s, 15s\nanimation-duration: 10s, 30s, 230ms\n```\n\n----------------------------------------\n\nTITLE: Defining Dev Interface in TypeScript for @lynx-js/rspeedy\nDESCRIPTION: This code snippet defines the Dev interface, which is used to control various development-related behaviors in the @lynx-js/rspeedy package. It includes properties for configuring HMR, DevServer, and other development settings.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/rspeedy/rspeedy.dev.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface Dev \n```\n\n----------------------------------------\n\nTITLE: Demonstrating CSS gap Property Usage\nDESCRIPTION: This snippet shows various ways to use the gap property in CSS, including single and double value syntax with length and percentage units, as well as calc() functions.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/css/properties/gap.mdx#2025-04-17_snippet_0\n\nLANGUAGE: css\nCODE:\n```\n/* One <length> value */\ngap: 20px;\ngap: 1em;\n\n/* One <percentage> value */\ngap: 16%;\ngap: 100%;\n\n/* Two <length> values */\ngap: 20px 10px;\ngap: 1em 0.5em;\n\n/* One or two <percentage> values */\ngap: 16% 100%;\ngap: 21px 82%;\n\n/* calc() values */\ngap: calc(10% + 20px);\ngap: calc(20px + 10%) calc(10% - 5px);\n```\n\n----------------------------------------\n\nTITLE: Defining Animation Event Handlers in TypeScript\nDESCRIPTION: Defines handlers for animation events including animationstart, animationend, animationcancel, animationiteration, transitionstart, transitionend, and transitioncancel.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/elements/built-in/view.mdx#2025-04-17_snippet_37\n\nLANGUAGE: typescript\nCODE:\n```\nanimationstart: AnimationEvent;\nanimationend: AnimationEvent;\nanimationcancel: AnimationEvent;\nanimationiteration: AnimationEvent;\ntransitionstart: TransitionEvent;\ntransitionend: TransitionEvent;\ntransitioncancel: TransitionEvent;\n```\n\n----------------------------------------\n\nTITLE: Using __CreateElement Function in Lynx Framework\nDESCRIPTION: Example demonstrating the __CreateElement function syntax, which creates Element objects in the Lynx UI framework. The function takes a tag name, parent component ID, and optional configuration information to create UI elements.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/api/engine/element-api/__CreateElement.mdx#2025-04-17_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n__CreateElement(tagName: string, parentComponentUniqueID: number, info?: object) : Element;\n```\n\n----------------------------------------\n\nTITLE: Typed InitData Example in ReactLynx\nDESCRIPTION: Example showing how to extend the InitData interface for fully typed defaultDataProcessor and useInitData hook with custom properties.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/api/react/Interface.Lynx.mdx#2025-04-17_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { root, useInitData } from \"@lynx-js/react\"\n\ninterface AnotherExistingInterface {\n  someAnotherPropertyFromExistingInterface: number\n}\n\ndeclare module '@lynx-js/react' {\n  interface InitData extends AnotherExistingInterface {\n    someCustomProperty: string\n  }\n}\n\nroot.registerDataProcessors({\n  defaultDataProcessor: () => {\n    return {\n      someCustomProperty: 'value', // will be typed\n      someAnotherPropertyFromExistingInterface: 1, // will be typed\n    }\n  }\n})\n\nfunction App() {\n  const initData = useInitData();\n\n  initData.someCustomProperty // will be typed\n  initData.someAnotherPropertyFromExistingInterface // will be typed\n}\n```\n\n----------------------------------------\n\nTITLE: Loading Template with Initial Data in Objective-C\nDESCRIPTION: Code snippet for initializing and loading a Lynx template with initial data in iOS using Objective-C. This demonstrates how to set up LynxLoadMeta with initial data before loading a template.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/guide/use-data-from-host-platform.mdx#2025-04-17_snippet_0\n\nLANGUAGE: objective-c\nCODE:\n```\nLynxLoadMeta* meta = [LynxLoadMeta init];\n// meta.url = @\"\";\n// meta.binaryData = nil;\n// meta.templateBundle = nil;\nmeta.initialData = __YOUR_DATA__;\n// meta.loadOption = LynxLoadOptionDumpElement | LynxLoadOptionRecycleTemplateBundle;\n[lynxView loadTemplate:meta];\n```\n\n----------------------------------------\n\nTITLE: Basic Component Dual Thread Example\nDESCRIPTION: Demonstrates how component code runs on both main and background threads, showing console output behavior\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/react/thinking-in-reactlynx.mdx#2025-04-17_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nconst HelloComponent = () => {\n  console.log('Hello'); // This will be printed twice\n  return <text>Hello</text>;\n};\n```\n\n----------------------------------------\n\nTITLE: Applying text-decoration in CSS\nDESCRIPTION: Examples of using the text-decoration shorthand property to set decorative lines on text. It demonstrates setting underline, line-through with color, and removing text decoration.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/css/properties/text-decoration.mdx#2025-04-17_snippet_0\n\nLANGUAGE: css\nCODE:\n```\ntext-decoration: underline;\ntext-decoration: line-through red;\ntext-decoration: none;\n```\n\n----------------------------------------\n\nTITLE: Updating Data in Objective-C\nDESCRIPTION: Code snippet showing how to update data for a Lynx template in iOS using Objective-C. This demonstrates using the LynxUpdateMeta object and updateData method to refresh the data in the Lynx view.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/guide/use-data-from-host-platform.mdx#2025-04-17_snippet_2\n\nLANGUAGE: objective-c\nCODE:\n```\nLynxUpdateMeta* meta = [LynxUpdateMeta init];\nmeta.data = __YOUR_DATA__;\n[lynxView updateData:meta];\n```\n\n----------------------------------------\n\nTITLE: Defining useMemo Function in TypeScript\nDESCRIPTION: Defines the type signature for the useMemo hook in React. It takes a factory function and a dependency list, and returns a memoized value of type T.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/react/Function.useMemo.mdx#2025-04-17_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nfunction useMemo<T>(factory: () => T, deps: DependencyList): T\n```\n\n----------------------------------------\n\nTITLE: Defining LayoutCompleteEvent Interface in TypeScript\nDESCRIPTION: Defines the interface for LayoutCompleteEvent, which is used in the layoutcomplete event of the <list> component. It includes details about the layout, scroll info, and visible cells before and after updates.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/elements/built-in/list.mdx#2025-04-17_snippet_20\n\nLANGUAGE: tsx\nCODE:\n```\nexport interface LayoutCompleteEvent extends BaseEvent<'layoutcomplete', {}> {\n  detail: {\n    'layout-id': number;\n    // Enable need-layout-complete-info\n    scrollInfo: ListScrollInfo;\n    // Enable need-layout-complete-info\n    diffResult?: {\n      insertions: number[];\n      move_from: number[];\n      move_to: number[];\n      removals: number[];\n      update_from: number[];\n      update_to: number[];\n    };\n    // Enable need-layout-complete-info\n    visibleCellsAfterUpdate?: ListItemInfo[];\n    // Enable need-layout-complete-info\n    visibleCellsBeforeUpdate?: ListItemInfo[];\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Using Union Selector in CSS\nDESCRIPTION: Example of using the union selector (,) to select multiple elements with different IDs.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/lynx-api/selector-query/selector-query-select.mdx#2025-04-17_snippet_8\n\nLANGUAGE: css\nCODE:\n```\n#id1, #id2;\n```\n\n----------------------------------------\n\nTITLE: Defining List Scroll Info Interface in TSX\nDESCRIPTION: Describes the format of scroll event callback parameters when need-visible-item-info is enabled, including scroll offsets and node position information.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/elements/built-in/list.mdx#2025-04-17_snippet_15\n\nLANGUAGE: tsx\nCODE:\n```\ninterface ListScrollInfo {\n  // Horizontal scroll offset since the last scroll, in px\n  deltaX: number;\n  // Vertical scroll offset since the last scroll, in px\n  deltaY: number;\n  // Current horizontal scroll offset, in px\n  scrollLeft: number;\n  // Current vertical scroll offset, in px\n  scrollTop: number;\n  // Current content area width, in px\n  scrollWidth: number;\n  // Current content area height, in px\n  scrollHeight: number;\n  // `<list>` width, in px\n  listWidth: number;\n  // `<list>` height, in px\n  listHeight: number;\n  // Scroll event source\n  eventSource: ListEventSource;\n  // Position information of the currently rendering node\n  attachedCells: [\n    {\n      id: number; // Node id\n      itemKey: string; // Node item-key\n      index: number; // Node index in list\n      left: number; // Node left boundary position relative to list, in px\n      top: number; // Node top boundary position relative to list, in px\n      right: number; // Node right boundary position relative to list, in px\n      bottom: number; // Node bottom boundary position relative to list, in px\n    },\n  ];\n}\n```\n\n----------------------------------------\n\nTITLE: Formal Syntax Definition for CSS Padding Property\nDESCRIPTION: This code block defines the formal syntax for the CSS padding property. It specifies that padding can accept one to four values of the <padding-top> type, which is defined as a non-negative length or percentage.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/css/properties/padding.mdx#2025-04-17_snippet_1\n\nLANGUAGE: css\nCODE:\n```\npadding =\n  <'padding-top'>{1,4}\n\n<padding-top> =\n  <length-percentage [0,∞]>\n\n<length-percentage> =\n  <length>      |\n  <percentage>\n```\n\n----------------------------------------\n\nTITLE: Requesting Accessibility Focus on UI Elements in Lynx (TypeScript)\nDESCRIPTION: This snippet demonstrates how to programmatically set accessibility focus on a specific UI element using the requestAccessibilityFocus method. The code creates a selector query to find an element by ID and then invokes the accessibility focus method with success and failure callbacks.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/elements/built-in/view.mdx#2025-04-17_snippet_40\n\nLANGUAGE: typescript\nCODE:\n```\nlynx\n  .createSelectorQuery()\n  .select('#customId')\n  .invoke({\n    method: 'requestAccessibilityFocus',\n    params: {},\n    success: function (res) {\n      console.log(res);\n    },\n    fail: function (res) {\n      console.log(res);\n    },\n  })\n  .exec();\n```\n\n----------------------------------------\n\nTITLE: Defining CSS Output Directory in DistPath Interface - TypeScript\nDESCRIPTION: The css property of the DistPath interface allows specifying a custom output directory for CSS style files. If not provided, it defaults to the same value as DistPath.intermediate.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/api/rspeedy/rspeedy.distpath.css.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ncss?: string | undefined;\n```\n\n----------------------------------------\n\nTITLE: Markdown Table - Functions Documentation\nDESCRIPTION: A markdown table documenting the available functions in the plugin package, specifically the pluginReactLynx function.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/api/rspeedy/react-rsbuild-plugin.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n|  Function | Description |\n|  --- | --- |\n|  [pluginReactLynx(userOptions)](./react-rsbuild-plugin.pluginreactlynx.md) | Create a rsbuild plugin for ReactLynx. |\n```\n\n----------------------------------------\n\nTITLE: Defining CustomizedSchemaFn Type in TypeScript\nDESCRIPTION: Defines the CustomizedSchemaFn type as a function that takes a URL string and returns either a string or a Record of string key-value pairs. This type is used for customizing the schema generation in the QR code Rsbuild plugin.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/rspeedy/qrcode-rsbuild-plugin.customizedschemafn.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport type CustomizedSchemaFn = (url: string) => string | Record<string, string>;\n```\n\n----------------------------------------\n\nTITLE: useState Hook without Initial State\nDESCRIPTION: TypeScript definition for useState hook without initial state parameter. Returns a tuple containing the current state value (which may be undefined) and a dispatch function to update it.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/react/Function.useState.mdx#2025-04-17_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nfunction useState<S>(): [S | undefined, Dispatch<SetStateAction<S | undefined>>]\n```\n\n----------------------------------------\n\nTITLE: Complete IntersectionObserver Implementation Example in TSX\nDESCRIPTION: A complete example demonstrating the four steps to use IntersectionObserver: creating the observer with threshold values, specifying a reference node with margins, observing a target node with a callback, and disconnecting the observer when done.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/api/lynx-api/lynx/lynx-create-intersection-observer.mdx#2025-04-17_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n// 1. 创建 IntersectionObserver 对象\nconst observer = lynx.createIntersectionObserver(this, {\n  thresholds: [0, 0.25, 0.5, 0.75, 1.0],\n});\n\n// 2. 调用 relativeTo 方法指定参照节点\nobserver.relativeTo('#refNode', { left: 10, right: 10 });\n\n// 3. 调用 observer 方法指定目标节点与回调\nobserver.observe('#targetNode', (res) => {\n  console.log('IntersectionObserver: ', JSON.stringify(res));\n});\n\n// 4. 调用 disconnect 方法清除目标节点与回调\nobserver.disconnect();\n```\n\n----------------------------------------\n\nTITLE: Implementing Font Scale Change Listener in Lynx\nDESCRIPTION: React component example demonstrating how to listen for font scale changes in Lynx using the GlobalEventEmitter to monitor system font size adjustments.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/api/elements/built-in/text.mdx#2025-04-17_snippet_9\n\nLANGUAGE: jsx\nCODE:\n```\nconst YourComponent = () => {\n  const [touchCount, setTouchCount] = useState(0);\n\n  useEffect(() => {\n    console.log('hello world card loaded');\n\n    const eventEmitter = getJSModule('GlobalEventEmitter');\n    const listener = (msg) => {\n      console.log('onFontScaleChanged testGlobalEvent:', msg);\n      setTouchCount((prevCount) => prevCount + 1);\n    };\n\n    eventEmitter.addListener('onFontScaleChanged', listener);\n\n    return () => {\n      eventEmitter.removeListener('onFontScaleChanged', listener);\n    };\n  }, []);\n\n  return (\n    <view>\n      <text>touch: {touchCount}</text>\n    </view>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Event CurrentTarget Property in TypeScript\nDESCRIPTION: Defines the 'currentTarget' property of the Event class, which represents a collection of properties of the element that is listening to the event.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/api/lynx-api/event/event.mdx#2025-04-17_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\ncurrentTarget: {\n  id: string,\n  uid: number,\n  dataset: [key: string]: any,\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Card Component Props Interface\nDESCRIPTION: Creates a TypeScript interface for the Card component that requires the selected card, display state (front/back), and render state properties to properly display card details.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/react/payment-details.mdx#2025-04-17_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\ninterface CardProps {\n  isFront: boolean;\n  isFirstRender: boolean;\n  selectedCard: BankCard;\n}\n```\n\n----------------------------------------\n\nTITLE: Using useLynxGlobalEventListener in a React Component\nDESCRIPTION: This example demonstrates how to use the useLynxGlobalEventListener hook in a React component to listen for 'exposure' and 'disexposure' events. It also shows how to create a Lynx view element with exposure tracking.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/react/Function.useLynxGlobalEventListener.mdx#2025-04-17_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nfunction App() {\n  useLynxGlobalEventListener('exposure', (e) => {\n    console.log(\"exposure\", e)\n  })\n  useLynxGlobalEventListener('disexposure', (e) => {\n    console.log(\"disexposure\", e)\n  })\n  return (\n    <view\n      style='width: 100px; height: 100px; background-color: red;'\n      exposure-id='a'\n    />\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Defining LoadConfigOptions Interface in TypeScript\nDESCRIPTION: TypeScript interface definition for LoadConfigOptions which specifies the structure of configuration options used in loadConfig. Contains optional properties for configuration path and current working directory.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/rspeedy/rspeedy.loadconfigoptions.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface LoadConfigOptions \n```\n\n----------------------------------------\n\nTITLE: Defining UI Method Error Codes for Lynx Components\nDESCRIPTION: A Java enum defining status codes that should be returned from @LynxUIMethod implementations. These codes help frontend code understand the result of method calls and handle error scenarios appropriately.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/guide/custom-native-component/custom-component-android.mdx#2025-04-17_snippet_6\n\nLANGUAGE: java\nCODE:\n```\nenum LynxUIMethodErrorCode {\n  kUIMethodSuccess, // 调用成功\n  kUIMethodUnknown, // 未知错误\n  kUIMethodNodeNotFound, // 无法找到对应的元件\n  kUIMethodMethodNotFound, // 该元件上没有对应的 Method\n  kUIMethodParamInvalid, // 方法参数无效\n  kUIMethodSelectorNotSupported, // 该选择器暂时不支持\n}\n```\n\n----------------------------------------\n\nTITLE: Basic transition-delay CSS Syntax Examples\nDESCRIPTION: Examples showing how to specify transition delay values using seconds or milliseconds units. The transition-delay property sets the amount of time to wait before beginning a transition effect.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/css/properties/transition-delay.mdx#2025-04-17_snippet_0\n\nLANGUAGE: css\nCODE:\n```\ntransition-delay: 2s;\ntransition-delay: 300ms;\n```\n\n----------------------------------------\n\nTITLE: Adding LynxView to the Window in Swift\nDESCRIPTION: Demonstrates how to add the previously created LynxView instance to the view hierarchy in Swift. This step is necessary to make the LynxView visible on screen.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/guide/start/fragments/ios/integrating-lynx-with-existing-app-ios.mdx#2025-04-17_snippet_9\n\nLANGUAGE: swift\nCODE:\n```\nimport UIKit\n\nclass ViewController: UIViewController {\n\n  override func viewDidLoad() {\n    super.viewDidLoad()\n\n    // ...\n\n    self.view.addSubview(lynxView)\n  }\n}\n\n```\n\n----------------------------------------\n\nTITLE: CSS Transition Formal Syntax Definition\nDESCRIPTION: Formal syntax definition for the transition property showing the possible combinations of transition-property, duration, timing-function, and delay values.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/css/properties/transition.mdx#2025-04-17_snippet_1\n\nLANGUAGE: css\nCODE:\n```\ntransition: <transition-property> || <transition-duration> ||\n  <transition-timing-function> || <transition-delay>;\n```\n\n----------------------------------------\n\nTITLE: Using row-gap Property with Different Value Types in CSS\nDESCRIPTION: Examples of different ways to apply the row-gap property including length values, percentage values, and calc() expressions to set the size of gaps between rows in layouts.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/css/properties/row-gap.mdx#2025-04-17_snippet_0\n\nLANGUAGE: css\nCODE:\n```\n/* <length> values */\nrow-gap: 20px;\nrow-gap: 1em;\n\n/* <percentage> value */\nrow-gap: 10%;\n\n/* calc() values */\nrow-gap: calc(10% + 20px);\n```\n\n----------------------------------------\n\nTITLE: CSS white-space Property Basic Syntax\nDESCRIPTION: Basic syntax examples of the white-space CSS property showing normal and nowrap values.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/css/properties/white-space.mdx#2025-04-17_snippet_0\n\nLANGUAGE: css\nCODE:\n```\nwhite-space: normal;\n\nwhite-space: nowrap;\n```\n\n----------------------------------------\n\nTITLE: Implementing useLynxGlobalEventListener for Exposure Events in React\nDESCRIPTION: Example of using the useLynxGlobalEventListener hook to track exposure and disexposure events for a Lynx view component. The hook registers callback functions that log these events to the console.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/api/react/Function.useLynxGlobalEventListener.mdx#2025-04-17_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nfunction App() {\n  useLynxGlobalEventListener('exposure', (e) => {\n    console.log(\"exposure\", e)\n  })\n  useLynxGlobalEventListener('disexposure', (e) => {\n    console.log(\"disexposure\", e)\n  })\n  return (\n    <view\n      style='width: 100px; height: 100px; background-color: red;'\n      exposure-id='a'\n    />\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Item Key Attribute in TSX\nDESCRIPTION: Shows how to use the required item-key attribute for <list-item> elements to help <list> identify changes in child nodes.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/elements/built-in/list.mdx#2025-04-17_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n// DefaultValue: null\nitem-key: string\n\n<list-item item-key=\"item\"/>\n```\n\n----------------------------------------\n\nTITLE: Constructing LynxLoadMeta in Objective-C for iOS\nDESCRIPTION: This snippet shows how to create and initialize a LynxLoadMeta object in Objective-C for the iOS platform. It demonstrates setting properties such as URL, binary data, template bundle, initial data, and load options.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/lynx-native-api/lynx-load-meta.mdx#2025-04-17_snippet_1\n\nLANGUAGE: objective-c\nCODE:\n```\nLynxLoadMeta* meta = [LynxLoadMeta init];\nmeta.url = @\"\";\nmeta.binaryData = nil;\nmeta.templateBundle = nil;\nmeta.initialData = nil;\nmeta.loadOption = LynxLoadOptionDumpElement | LynxLoadOptionRecycleTemplateBundle;\n```\n\n----------------------------------------\n\nTITLE: Image Source Property Definition\nDESCRIPTION: Defines the src property type for the image element which specifies the URL to display.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/elements/built-in/image.mdx#2025-04-17_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nsrc: string;\n```\n\n----------------------------------------\n\nTITLE: Implementing scrollIntoView in Lynx ScrollView Component\nDESCRIPTION: Shows how to scroll a scroll-view to display a specific child element using the scrollIntoView method. The implementation allows setting vertical and horizontal alignment options and defining the scrolling behavior.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/elements/built-in/scroll-view.mdx#2025-04-17_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n<scroll-view>\n  <text id=\"targetnode\">\"click me, scrollIntoView\"</text>\n</scroll-view>\n\nlynx.createSelectorQuery()\n  .select(`#targetnode`)\n  .invoke({\n    method: 'scrollIntoView',\n    params: {\n      scrollIntoViewOptions: {\n        block: 'center', // Vertical alignment options: \"start\" aligns top | \"center\" centers | \"end\" aligns bottom\n        inline: 'start', // Horizontal alignment options: \"start\" aligns left | \"center\" centers | \"end\" aligns right\n        behavior: 'smooth', // \"smooth\" | \"none\" whether to animate scrolling\n      },\n    },\n  })\n  .exec();\n```\n\n----------------------------------------\n\nTITLE: Example of Accessibility Elements Usage in TSX\nDESCRIPTION: Demonstrates how to use the accessibility-elements attribute to control the focus order of child views in accessibility mode.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/elements/built-in/view.mdx#2025-04-17_snippet_17\n\nLANGUAGE: tsx\nCODE:\n```\n<view\n  style={{\n    width: '100%',\n    height: '250px',\n    marginTop: '20px',\n    display: 'linear',\n    backgroundColor: 'grey',\n  }}\n  accessibility-elements=\"view-3,view-2,view-5,view-1,view-4\"\n>\n  {[1, 2, 3, 4, 5].map((value) => {\n    return (\n      <view\n        style={`height: 40px; margin: 5px; background-color: white;`}\n        id={`view-${value}`}\n        accessibility-element=\"true\"\n        accessibility-label={`view-${value}`}\n      >\n        <text>text-{value}</text>\n      </view>\n    );\n  })}\n</view>\n```\n\n----------------------------------------\n\nTITLE: Manipulating Element Properties in Main Thread Function\nDESCRIPTION: Example showing how to directly manipulate element properties within a main thread function. It uses event.currentTarget to access the element and setStyleProperty to modify its style.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/react/main-thread-script.mdx#2025-04-17_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nlet onScroll = (event) => {\n  'main thread';\n  const detail = event.detail.scrollTop;\n  const newPos = {\n    x: 0,\n    y: 500 - detail,\n  };\n  event.currentTarget.setStyleProperty(\n    'transform',\n    `translate(${newPos.x}px, ${newPos.y}px)`,\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Accessibility Element Attribute in TypeScript\nDESCRIPTION: Defines the 'accessibility-element' attribute that controls whether a node supports accessibility features.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/elements/built-in/view.mdx#2025-04-17_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\n// DefaultValue: image and text nodes are true by default, and other nodes are false by default\naccessibility-element?: boolean\n```\n\n----------------------------------------\n\nTITLE: Example Usage of withInitDataInState HOC\nDESCRIPTION: Demonstrates how to use the withInitDataInState HOC by wrapping a React class component. Shows basic component structure and export syntax.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/api/react/Function.withInitDataInState.mdx#2025-04-17_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nclass App extends React.Component<MyProps, MyState> {\n  // component implementation\n}\n\nexport default withInitDataInState(App);\n```\n\n----------------------------------------\n\nTITLE: Variable Speed Transform Animation\nDESCRIPTION: Dynamic animation implementation using the animate API to create variable speed transformations.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/guide/styling/animation.mdx#2025-04-17_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\n<Go\n  img=\"https://lf-lynx.tiktok-cdns.com/obj/lynx-artifacts-oss-sg/lynx-website/assets/doc/animate.gif\"\n  example=\"animation\"\n  defaultFile=\"src/animate/index.tsx\"\n  defaultEntryFile=\"dist/animate.lynx.bundle\"\n  entry=\"src/animate\"\n/>\n```\n\n----------------------------------------\n\nTITLE: CSS mask-image Basic Usage Examples\nDESCRIPTION: Demonstrates various ways to use the mask-image property including keyword values, image values, and multiple mask layers.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/css/properties/mask-image.mdx#2025-04-17_snippet_0\n\nLANGUAGE: css\nCODE:\n```\n/* Keyword value */\nmask-image: none;\n\n/* <image> values */\nmask-image: linear-gradient(rgba(0, 0, 0, 1), transparent);\nmask-image: url(mask.png);\n\n/* Multiple values */\nmask-image: url(mask.png), linear-gradient(rgba(0, 0, 0, 1), transparent);\n```\n\n----------------------------------------\n\nTITLE: Defining Server Interface in TypeScript for Rspeedy\nDESCRIPTION: This code snippet defines the Server interface for Rspeedy. It includes optional properties for configuring various aspects of the dev-server, such as base path, headers, host, port, and strict port allocation.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/rspeedy/rspeedy.server.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface Server \n{\n  base?: string | undefined;\n  headers?: Record<string, string | string[]> | undefined;\n  host?: string | undefined;\n  port?: number | undefined;\n  strictPort?: boolean | undefined;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating an Update Function for Swiper Offset\nDESCRIPTION: Adding a function to update the swiper offset based on touch movement. This function will be called when the finger moves to update the scroll position.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/guide/start/tutorial-product-detail.mdx#2025-04-17_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nfunction Swiper() {\n  function updateSwiperOffset(offset: number) {\n    // Update scroll position\n  }\n\n  function handleTouchMove(e: TouchEvent) {\n    const delta = e.touches[0].clientX - touchStartXRef.current;\n    const offset = touchStartCurrentOffsetRef.current + delta;\n    updateSwiperOffset(offset);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Layout Information for Custom Input Element in Objective-C\nDESCRIPTION: Shows how to handle layout information in the layoutDidFinished callback. This is useful for cases where additional adjustments to the view are required after the Lynx Engine calculates the layout.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/guide/custom-native-component/custom-component-iOS.mdx#2025-04-17_snippet_6\n\nLANGUAGE: objc\nCODE:\n```\n#import \"LynxExplorerInput.h\"\n#import <Lynx/LynxComponentRegistry.h>\n#import <Lynx/LynxPropsProcessor.h>\n\n@implementation LynxExplorerInput\n\nLYNX_LAZY_REGISTER_UI(\"input\")\n\n- (void)layoutDidFinished {\n  self.view.padding = self.padding;\n  }\n\nLYNX_PROP_SETTER(\"value\", setValue, NSString *) {\nself.view.text = value;\n}\n\n- (UITextField *)createView {\n  UITextField *textField = [[LynxTextField alloc] init];\n  //...\n  textField.delegate = self;\n  return textField;\n  }\n\n@end\n\n@implementation LynxTextField\n\n- (UIEditingInteractionConfiguration)editingInteractionConfiguration API_AVAILABLE(ios(13.0)) {\n  return UIEditingInteractionConfigurationNone;\n  }\n\n- (void)setPadding:(UIEdgeInsets)padding {\n  _padding = padding;\n  [self setNeedsLayout];\n  }\n\n- (CGRect)textRectForBounds:(CGRect)bounds {\n  CGFloat x = self.padding.left;\n  CGFloat y = self.padding.top;\n  CGFloat width = bounds.size.width - self.padding.left - self.padding.right;\n  CGFloat height = bounds.size.height - self.padding.top - self.padding.bottom;\n\n  return CGRectMake(x, y, width, height);\n  }\n\n- (CGRect)editingRectForBounds:(CGRect)bounds {\n  return [self textRectForBounds:bounds];\n  }\n  @end\n```\n\n----------------------------------------\n\nTITLE: Implementing autoScroll Method for Continuous Scrolling\nDESCRIPTION: Method to enable automatic continuous scrolling of the list with control over scroll rate, start/stop functionality, and auto-stop behavior at list boundaries.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/api/elements/built-in/list.mdx#2025-04-17_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nthis.createSelectorQuery()\n  .select('#id_of_list')\n  .invoke({\n    method: 'autoScroll',\n    params: {\n      rate: string, //  每一秒滚动的间距，支持正负。间距支持单位\"px/rpx/ppx\" default->null (iOS 取值必须大于 1/screen.scale px)\n      start: bool, //  开始/暂停自动滚动 default->false\n      autoStop: bool, // 滑到底部是否自动停止 default->true\n    },\n    success: function (res) {},\n    fail: function (res) {},\n  })\n  .exec();\n```\n\n----------------------------------------\n\nTITLE: Implementing Focus Method in Lynx Custom Input Component (Java)\nDESCRIPTION: Java implementation of the LynxExplorerInput custom component with a focus method that manages keyboard display and focus state. The component handles text changes and emits input events to the frontend.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/guide/custom-native-component/custom-component-android.mdx#2025-04-17_snippet_4\n\nLANGUAGE: java\nCODE:\n```\nimport android.content.Context;\nimport android.text.Editable;\nimport android.text.TextWatcher;\nimport android.view.inputmethod.InputMethodManager;\nimport androidx.appcompat.widget.AppCompatEditText;\nimport com.lynx.react.bridge.Callback;\nimport com.lynx.react.bridge.ReadableMap;\nimport com.lynx.tasm.behavior.LynxContext;\nimport com.lynx.tasm.behavior.LynxProp;\nimport com.lynx.tasm.behavior.LynxUIMethod;\nimport com.lynx.tasm.behavior.LynxUIMethodConstants;\nimport com.lynx.tasm.behavior.ui.LynxUI;\nimport com.lynx.tasm.event.LynxCustomEvent;\n\nimport java.util.HashMap;\nimport java.util.Map;\n\npublic class LynxExplorerInput extends LynxUI<AppCompatEditText> {\n\n  private boolean showSoftInput() {\n    InputMethodManager imm = (InputMethodManager) getLynxContext().getSystemService(Context.INPUT_METHOD_SERVICE);\n    return imm.showSoftInput(mView,\n      InputMethodManager.SHOW_IMPLICIT, null);\n  }\n\n  @LynxUIMethod\n  public void focus(ReadableMap params, Callback callback) {\n    if (mView.requestFocus()) {\n      if (showSoftInput()) {\n        callback.invoke(LynxUIMethodConstants.SUCCESS);\n      } else {\n        callback.invoke(LynxUIMethodConstants.UNKNOWN, \"fail to show keyboard\");\n      }\n    } else {\n      callback.invoke(LynxUIMethodConstants.UNKNOWN, \"fail to focus\");\n    }\n  }\n\n\n  private void emitEvent(String name, Map<String, Object> value) {\n    LynxCustomEvent detail = new LynxCustomEvent(getSign(), name);\n    if (value != null) {\n      for (Map.Entry<String, Object> entry : value.entrySet()) {\n        detail.addDetail(entry.getKey(), entry.getValue());\n      }\n    }\n    getLynxContext().getEventEmitter().sendCustomEvent(detail);\n  }\n\n  @Override\n  protected AppCompatEditText createView(Context context) {\n    AppCompatEditText view = new AppCompatEditText(context);\n    view.addTextChangedListener(new TextWatcher() {\n      @Override\n      public void afterTextChanged(Editable s) {\n        emitEvent(\"input\", new HashMap<String, Object>() {\n          {\n            put(\"value\", s.toString());\n          }\n        });\n      }\n\n      @Override\n      public void beforeTextChanged(CharSequence s, int start, int count, int after) {\n      }\n\n      @Override\n      public void onTextChanged(CharSequence s, int start, int before, int count) {\n      }\n    });\n    return view;\n\n  }\n\n  public LynxExplorerInput(LynxContext context) {\n    super(context);\n  }\n\n  @Override\n  public void onLayoutUpdated() {\n    super.onLayoutUpdated();\n    int paddingTop = mPaddingTop + mBorderTopWidth;\n    int paddingBottom = mPaddingBottom + mBorderBottomWidth;\n    int paddingLeft = mPaddingLeft + mBorderLeftWidth;\n    int paddingRight = mPaddingRight + mBorderRightWidth;\n    mView.setPadding(paddingLeft, paddingTop, paddingRight, paddingBottom);\n  }\n\n  @LynxProp(name = \"value\")\n  public void setValue(String value) {\n    if (!value.equals(mView.getText().toString())) {\n      mView.setText(value);\n    }\n  }\n\n}\n\n```\n\n----------------------------------------\n\nTITLE: Rendering Platform-Specific Tabs for Flexible Size LynxView\nDESCRIPTION: This JSX snippet creates platform-specific tabs for iOS and Android, displaying content from imported MDX files about flexible size LynxView implementation.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/guide/embed-lynx-to-native.mdx#2025-04-17_snippet_5\n\nLANGUAGE: JSX\nCODE:\n```\n<PlatformTabs hashKey=\"platform\">\n<PlatformTabs.Tab platform=\"ios\">\n<FlexiOS />\n</PlatformTabs.Tab>\n\n<PlatformTabs.Tab platform=\"android\">\n  <FlexAndroid />\n</PlatformTabs.Tab>\n\n</PlatformTabs>\n```\n\n----------------------------------------\n\nTITLE: Implementing scrollBy Method for Relative Scrolling\nDESCRIPTION: Method to scroll the list by a relative offset from the current position, returning information about consumed and unconsumed scroll distances.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/api/elements/built-in/list.mdx#2025-04-17_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\nlynx\n  .createSelectorQuery()\n  .select('#id_of_list')\n  .invoke({\n    method: 'scrollBy',\n    params: {\n      offset: number,\n    },\n    success(res) {\n      console.log('succ ');\n    },\n    fail(res) {\n      console.log('err ');\n    },\n  })\n  .exec();\n```\n\nLANGUAGE: tsx\nCODE:\n```\n{\n  \"consumedX\" : number,  // 水平方向滚动的距离，单位 px\n  \"consumedY\" : number,  // 竖直方向滚动的距离，单位 px\n  \"unconsumedX\" : number,  // 水平方向未滚动的距离，单位 px\n  \"unconsumedY\" : number,  // 竖直方向未滚动的距离，单位 px\n}\n```\n\n----------------------------------------\n\nTITLE: Exporting Functions in JavaScript ESModule\nDESCRIPTION: This utility module exports a named function getAge() and an anonymous default function that adds two numbers. The named export must be imported using destructuring, while the default export can be imported directly.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/guide/scripting-runtime/index.mdx#2025-04-17_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexport function getAge() {\n  return 11;\n}\n\nexport default function (add1, add2) {\n  return add1 + add2;\n}\n```\n\n----------------------------------------\n\nTITLE: Android ExtraTimingInfo Class Definition\nDESCRIPTION: Definition of the ExtraTimingInfo class used to store performance timing data including page open time, template preparation, and container initialization timestamps.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/lynx-native-api/lynx-view/set-extra-timing.mdx#2025-04-17_snippet_1\n\nLANGUAGE: java\nCODE:\n```\npublic static class ExtraTimingInfo {\n    // Page open time, corresponds to openTime in InitContainerEntry.\n    public long mOpenTime = 0;\n    // Timestamp for the start of preparing the TemplateBundle, corresponds to prepareTemplateStart in InitContainerEntry.\n    public long mPrepareTemplateStart = 0;\n    // Timestamp for the end of preparing the TemplateBundle, corresponds to prepareTemplateEnd in InitContainerEntry.\n    public long mPrepareTemplateEnd = 0;\n    // Timestamp for the start of container initialization, corresponds to containerInitStart in InitContainerEntry.\n    public long mContainerInitStart = 0;\n    // Timestamp for the end of container initialization, corresponds to containerInitEnd in InitContainerEntry.\n    public long mContainerInitEnd = 0;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Initial Scroll Index Attribute in TSX\nDESCRIPTION: Defines the initial-scroll-index attribute that specifies the node position to which <list> automatically scrolls after rendering, effective only once.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/elements/built-in/list.mdx#2025-04-17_snippet_13\n\nLANGUAGE: tsx\nCODE:\n```\n// DefaultValue: 0\ninitial-scroll-index?: number\n```\n\n----------------------------------------\n\nTITLE: Configuring Entries with EntryDescription in rSpeedy\nDESCRIPTION: Advanced example showing how to configure rSpeedy using EntryDescription objects, which provide more granular control over entry module configuration.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/api/rspeedy/rspeedy.entry.md#2025-04-17_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineConfig } from '@lynx-js/rspeedy'\nexport default defineConfig({\n  entry: {\n    foo: './src/pages/foo/index.js',\n    bar: {\n      import: ['./src/prefetch.js', './src/pages/bar'],\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Example Usage of GetDataByKey\nDESCRIPTION: Demonstrates creating an element, setting a data attribute, and retrieving it using __GetDataByKey. Shows the complete workflow of managing element data attributes.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/engine/element-api/__GetDataByKey.mdx#2025-04-17_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n// main-thread.js\nlet element = __CreateElement('view', 0, {});\n__SetDataset(element, { key: 'value' });\n\nlet dataset = __GetDataByKey(element, 'key');\n```\n\n----------------------------------------\n\nTITLE: Development Consumer Setup\nDESCRIPTION: Setup for a development Consumer component in the Producer project.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/react/code-splitting.md#2025-04-17_snippet_9\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Suspense, lazy, root } from '@lynx-js/react';\n\nconst App = lazy(() => import('./App.jsx'));\n\nroot.render(\n  <Suspense>\n    <App />\n  </Suspense>,\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing QRCode Plugin in Rsbuild Configuration\nDESCRIPTION: Example showing how to import and use the QRCode plugin in a Rsbuild configuration file. Demonstrates adding the plugin to the plugins array in the configuration.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/api/rspeedy/qrcode-rsbuild-plugin.pluginqrcode.md#2025-04-17_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// rsbuild.config.ts\nimport { pluginQRCode } from '@lynx-js/qrcode-rsbuild-plugin'\nexport default {\n  plugins: [pluginQRCode()],\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Animation Direction Syntax\nDESCRIPTION: Shows the different possible values for the animation-direction property, including normal, reverse, alternate, and alternate-reverse. Multiple directions can be specified for different animations.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/css/properties/animation-direction.mdx#2025-04-17_snippet_0\n\nLANGUAGE: css\nCODE:\n```\nanimation-direction: normal\nanimation-direction: reverse\nanimation-direction: alternate\nanimation-direction: alternate-reverse\nanimation-direction: normal, reverse\nanimation-direction: alternate, reverse, normal\n```\n\n----------------------------------------\n\nTITLE: Using getTextInfo() Function with Various Parameters in TypeScript\nDESCRIPTION: Examples demonstrating how to use the getTextInfo() function with different parameter combinations, including default font family, custom font family, and text wrapping constraints.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/lynx-api/lynx/lynx-get-text-info.mdx#2025-04-17_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// default font family\nconst { width } = lynx.getTextInfo('text content', { fontSize: '14px' });\n\nconst { width } = lynx.getTextInfo('text content', {\n  fontSize: '14px',\n  fontFamily: 'PingFang SC',\n});\n\nconst { content } = lynx.getTextInfo('text content', {\n  fontSize: '14px',\n  fontFamily: 'PingFang SC',\n  maxWidth: '100px',\n  maxLine: 2,\n});\n```\n\n----------------------------------------\n\nTITLE: Basic Display Property Syntax in Lynx CSS\nDESCRIPTION: Examples of different display property values available in Lynx CSS, including flex, none, linear, relative, and grid layout options.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/css/properties/display.mdx#2025-04-17_snippet_0\n\nLANGUAGE: css\nCODE:\n```\ndisplay: flex;\ndisplay: none;\ndisplay: linear;\ndisplay: relative;\ndisplay: grid;\n```\n\n----------------------------------------\n\nTITLE: Binding Input Events in Lynx Front-end DSL\nDESCRIPTION: Front-end code for binding to custom events emitted by the native input component. This JSX example demonstrates how to listen for input events, process the data, and update the component state, creating a two-way data binding with the native implementation.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/guide/custom-native-component/custom-component-android.mdx#2025-04-17_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nconst handleInput = (e) => {\n  const currentValue = e.detail.value.trim();\n  setInputValue(currentValue);\n};\n\n<input className=\"input-box\" bindinput={handleInput} value={inputValue} />;\n```\n\n----------------------------------------\n\nTITLE: Collapse/Expand Effect Implementation\nDESCRIPTION: Example of using Go component to demonstrate transition-based collapse and expand animations for list items.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/guide/styling/animation.mdx#2025-04-17_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Go\n  img=\"https://lf-lynx.tiktok-cdns.com/obj/lynx-artifacts-oss-sg/lynx-website/assets/doc/animation-guide-transition.webp\"\n  example=\"animation\"\n  defaultFile=\"src/transition_toggle/index.tsx\"\n  defaultEntryFile=\"dist/toggle_transition_demo.lynx.bundle\"\n  entry=\"src/transition_toggle\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Defining Config Interface in TypeScript for rspeedy\nDESCRIPTION: This code snippet defines the Config interface for rspeedy. It includes various optional properties that control different aspects of the build process, development environment, and output configuration.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/rspeedy/rspeedy.config.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface Config \n{\n  dev?: Dev | undefined;\n  environments?: RsbuildConfig['environments'] | undefined;\n  mode?: 'development' | 'production' | 'none' | undefined;\n  output?: Output | undefined;\n  performance?: Performance | undefined;\n  plugins?: RsbuildPlugins | undefined;\n  provider?: RsbuildConfig['provider'];\n  server?: Server | undefined;\n  source?: Source | undefined;\n  tools?: Tools | undefined;\n}\n```\n\n----------------------------------------\n\nTITLE: Remote Component Loading\nDESCRIPTION: Implementation of loading a remote component from a Producer project.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/react/code-splitting.md#2025-04-17_snippet_8\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Suspense, lazy } from '@lynx-js/react';\n\nconst LazyComponent = lazy(\n  () =>\n    import('https://<host>:<port>/path/to/lynx.bundle', {\n      with: { type: 'component' },\n    }),\n);\n\nexport function App() {\n  return (\n    <view>\n      <Suspense fallback={<text>Loading...</text>}>\n        <LazyComponent />\n      </Suspense>\n    </view>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Mixed Text Styling in Lynx\nDESCRIPTION: Demonstrates how to apply different styles to portions of text by nesting <text> elements, making specific words bold and red within a larger text block.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/guide/styling/text-and-typography.mdx#2025-04-17_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n<view>\n  <text>\n    This is an\n    <text style={{ color: 'red', fontWeight: 'bold' }}>important word</text>\n  </text>\n</view>\n```\n\n----------------------------------------\n\nTITLE: Retrieving Visible Cells in Lynx List Component (TSX)\nDESCRIPTION: This snippet demonstrates how to use the getVisibleCells method to retrieve information about all currently displayed child nodes in a <list> component. It returns details such as node id, item key, index, and position.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/elements/built-in/list.mdx#2025-04-17_snippet_32\n\nLANGUAGE: tsx\nCODE:\n```\nlynx\n  .createSelectorQuery()\n  .select('#id_of_list')\n  .invoke({\n    method: 'getVisibleCells',\n    success(res) {\n      console.log('succ ');\n    },\n    fail(res) {\n      console.log('err ');\n    },\n  })\n  .exec();\n```\n\n----------------------------------------\n\nTITLE: Defining Build Mode Configuration in Rspeedy TypeScript\nDESCRIPTION: TypeScript interface definition for the mode property in Rspeedy's Config object. The mode can be set to 'development', 'production', or 'none' to control build optimizations.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/api/rspeedy/rspeedy.config.mode.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nmode?: 'development' | 'production' | 'none' | undefined;\n```\n\n----------------------------------------\n\nTITLE: Updating LynxView Template Data in Objective-C (iOS)\nDESCRIPTION: This snippet demonstrates the syntax for updating LynxView template data using the updateData method in Objective-C for iOS. It takes a LynxUpdateMeta object pointer as a parameter, which specifies the optional data content for updating the template.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/lynx-native-api/lynx-view/update-data.mdx#2025-04-17_snippet_1\n\nLANGUAGE: objc\nCODE:\n```\n(void)updateData:(nonnull LynxUpdateMeta*)meta;\n```\n\n----------------------------------------\n\nTITLE: Registering NativeLocalStorageModule in LynxModuleAdapter for Lynx Explorer on Android\nDESCRIPTION: This Java code snippet shows how to register the NativeLocalStorageModule with the Lynx runtime environment. It should be added to the Init method in the LynxModuleAdapter.java file of the Lynx Explorer project.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/guide/custom-native-modules/native-module-android.mdx#2025-04-17_snippet_2\n\nLANGUAGE: java\nCODE:\n```\n  public void Init(Context context) {\n    // ......\n\n    LynxEnv.inst().registerModule(\"NativeLocalStorageModule\", NativeLocalStorageModule.class);\n\n    // ......\n  }\n```\n\n----------------------------------------\n\nTITLE: Using Image Element in Lynx\nDESCRIPTION: Example demonstrating how to display an image using the <image> element with the src attribute pointing to an image resource.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/guide/ui/elements-components.mdx#2025-04-17_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<image src=\"assets/logo.png\" />\n```\n\n----------------------------------------\n\nTITLE: Defining TextInfo and TextMetrics Interfaces in TypeScript\nDESCRIPTION: TypeScript interfaces defining the structure for TextInfo input parameters and TextMetrics return value of the getTextInfo() function.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/lynx-api/lynx/lynx-get-text-info.mdx#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface TextInfo {\n  fontSize: string;\n  fontFamily?: string;\n  maxWidth?: string;\n  maxLine?: number;\n}\n\nexport interface TextMetrics {\n  width: number;\n  content:  Array<string>;\n}\n\ngetTextInfo(text: string, info: TextInfo): TextMetrics;\n```\n\n----------------------------------------\n\nTITLE: Querying Multiple Child Elements with querySelectorAll() in TypeScript\nDESCRIPTION: Finds all child elements that match the specified selector. Returns an array of MainThread.Element objects or an empty array if no matches are found.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/lynx-api/main-thread/main-thread-element.mdx#2025-04-17_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nconst elementArray = element.querySelectorAll(selector);\n```\n\n----------------------------------------\n\nTITLE: Defining PluginQRCodeOptions.schema Property in TypeScript\nDESCRIPTION: This snippet shows the TypeScript signature for the schema property of the PluginQRCodeOptions interface. It can be either a CustomizedSchemaFn or undefined.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/rspeedy/qrcode-rsbuild-plugin.pluginqrcodeoptions.schema.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nschema?: CustomizedSchemaFn | undefined;\n```\n\n----------------------------------------\n\nTITLE: Setting Extra Timing Data in Android\nDESCRIPTION: Java method signature for setting extra timing information in Android Lynx applications. Takes an ExtraTimingInfo parameter containing various performance timestamps.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/lynx-native-api/lynx-view/set-extra-timing.mdx#2025-04-17_snippet_0\n\nLANGUAGE: java\nCODE:\n```\npublic void setExtraTiming(TimingHandler.ExtraTimingInfo extraTiming);\n```\n\n----------------------------------------\n\nTITLE: Pseudo-class :not() Example in CSS\nDESCRIPTION: Demonstrates the usage of the :not() pseudo-class for negative matching\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/css/selectors.mdx#2025-04-17_snippet_10\n\nLANGUAGE: css\nCODE:\n```\nroot :not(view):not(text) {\n  font-weight: bold;\n}\n\nbody :not(.crazy, .fancy) {\n  font-family: sans-serif;\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Lynx DevTool Switches in iOS (Objective-C)\nDESCRIPTION: This code snippet demonstrates how to enable the Lynx Debug, Lynx DevTool, and Lynx LogBox switches when initializing LynxEnv in an iOS application using Objective-C.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/guide/start/integrate-lynx-devtool.mdx#2025-04-17_snippet_1\n\nLANGUAGE: objective-c\nCODE:\n```\n@implementation AppDelegate\n\n- (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions {\n  // ...\n  // 打开 Lynx Debug 开关\n  lynxEnv.lynxDebugEnabled = YES;\n  // 打开 Lynx DevTool 开关\n  lynxEnv.devtoolEnabled = YES;\n  // 打开 Lynx LogBox 开关\n  lynxEnv.logBoxEnabled = YES;\n  return YES;\n}\n```\n\n----------------------------------------\n\nTITLE: Constructing LynxUpdateMeta in Java for Android\nDESCRIPTION: This snippet demonstrates how to construct a LynxUpdateMeta object using the Builder pattern in Java for Android. It sets the updated data and global properties.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/lynx-native-api/lynx-update-meta.mdx#2025-04-17_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nLynxUpdateMeta.Builder builder = new LynxUpdateMeta.Builder();\nbuilder.setUpdatedData(data);\nbuilder.setUpdatedGlobalProps(globalProps);\nLynxUpdateMeta meta = builder.build();\n```\n\n----------------------------------------\n\nTITLE: Demonstrating CSS text-align Property Values\nDESCRIPTION: This CSS snippet shows various keyword values for the text-align property, including start, end, left, right, and center. These values control the horizontal alignment of inline content within a block element.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/css/properties/text-align.mdx#2025-04-17_snippet_0\n\nLANGUAGE: css\nCODE:\n```\n/* Keyword values */\ntext-align: start;\ntext-align: end;\ntext-align: left;\ntext-align: right;\ntext-align: center;\n```\n\n----------------------------------------\n\nTITLE: Setting Scroll View Attribute with setNativeProps in JSX\nDESCRIPTION: This example shows how to use setNativeProps to change the 'upper-threshold' attribute of a scroll-view component when its child text is tapped.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/lynx-api/nodes-ref/nodes-ref-set-native-props.mdx#2025-04-17_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nfunction App() {\n  return (\n    <scroll-view id=\"intro\">\n      <text\n        bindtap={() => {\n          lynx\n            .createSelectorQuery()\n            .select('#intro')\n            .setNativeProps({\n              'upper-threshold': '10px',\n            })\n            .exec();\n        }}\n      >\n        Hello, World!\n      </text>\n    </scroll-view>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Defining LynxTemplateResourceFetcher Interface in Java\nDESCRIPTION: Abstract class definition for resource fetching interface in Android that handles template fetching through the fetchTemplate method. Used for obtaining Bundle and Lazy Bundle contents.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/lynx-native-api/resource-fetcher/TemplateResourceFetcher.mdx#2025-04-17_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nabstract class LynxTemplateResourceFetcher {\n\n   @Required\n   void fetchTemplate(LynxResourceRequest request, LynxResourceCallBack<TemplateProviderResult> callback);\n\n}\n```\n\n----------------------------------------\n\nTITLE: Applying CSS Padding with Various Syntax Options\nDESCRIPTION: This snippet demonstrates different ways to apply padding using the CSS padding property. It shows how to set padding for all sides, for top/bottom and left/right pairs, and for individual sides using one to four values.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/css/properties/padding.mdx#2025-04-17_snippet_0\n\nLANGUAGE: css\nCODE:\n```\n/* Apply to all four sides */\npadding: 1em;\n\n/* top and bottom | left and right */\npadding: 5% 10%;\n\n/* top | left and right | bottom */\npadding: 1em 2em 2em;\n\n/* top | right | bottom | left */\npadding: 5px 1em 0 2em;\n```\n\n----------------------------------------\n\nTITLE: Setting layout-id Attribute in TypeScript\nDESCRIPTION: Demonstrates how to set the layout-id attribute for the <list> component. This attribute is used to mark the unique identifier for a data source update and is returned in the layoutcomplete event callback.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/elements/built-in/list.mdx#2025-04-17_snippet_21\n\nLANGUAGE: tsx\nCODE:\n```\n// defaultValue: -1\nlayout-id?: number\n```\n\n----------------------------------------\n\nTITLE: Defining selectUniqueID Method Signature in TypeScript\nDESCRIPTION: This snippet shows the TypeScript method signature for selectUniqueID. It takes a uniqueId parameter of type string or number and returns a NodesRef object.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/lynx-api/selector-query/selector-query-select-unique-id.mdx#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nselectUniqueID(uniqueId: string | number): NodesRef;\n```\n\n----------------------------------------\n\nTITLE: Creating Global CSS in Rspeedy\nDESCRIPTION: Example of global CSS styles in Rspeedy that can be used with complex selectors. This defines styles for a 'red' class and its nested text elements.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/rspeedy/styling.mdx#2025-04-17_snippet_7\n\nLANGUAGE: css\nCODE:\n```\n.red {\n  background: red;\n}\n\n.red > text {\n  color: blue;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Engine Version in Lynx Config\nDESCRIPTION: Example configuration file showing how to set the engineVersion using the Lynx JS build plugin. This demonstrates proper version specification in the build configuration.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/guide/compatibility.mdx#2025-04-17_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineConfig } from '@lynx-js/rspeedy';\nimport { pluginReactLynx } from '@lynx-js/react-rsbuild-plugin';\n\nexport default defineConfig({\n  plugins: [\n    pluginReactLynx({\n      engineVersion: '3.2',\n    }),\n  ],\n});\n```\n\n----------------------------------------\n\nTITLE: Visualizing CPU Profile with Speedscope\nDESCRIPTION: Commands to install Speedscope globally and use it to visualize the CPU profile data generated by Node.js profiling. Speedscope helps interpret the performance data graphically.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/rspeedy/build-profiling.mdx#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# Install speedscope\nnpm install -g speedscope\n\n# View cpuprofile content\n# Replace the name with the local file name\nspeedscope CPU.date.000000.00000.0.001.cpuprofile\n```\n\n----------------------------------------\n\nTITLE: Defining View Element Attributes in TypeScript\nDESCRIPTION: Demonstrates the TypeScript definitions for various attributes of the <view> element, including name, id, style, and class.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/api/elements/built-in/view.mdx#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// DefaultValue undefined\nname?: string\n\n// DefaultValue undefined\nid?: string;\n\nstyle?: string;\n\nclass?: string;\n```\n\n----------------------------------------\n\nTITLE: Custom Element Usage Example\nDESCRIPTION: Example implementation showing how to use a custom input element with the Go component for demonstration purposes.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/guide/custom-native-component.mdx#2025-04-17_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<Go\n  highlight=\"{33-39}\"\n  example=\"native-element\"\n  defaultFile=\"src/App.tsx\"\n  img=\"https://lf-lynx.tiktok-cdns.com/obj/lynx-artifacts-oss-sg/lynx-website/assets/doc/native_element.jpg\"\n></Go>\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Bundle Loader (Swift)\nDESCRIPTION: This code implements a custom bundle loader in Swift, conforming to the LynxTemplateProvider protocol. It loads bundle files embedded in the app and provides them to the Lynx Engine.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/guide/start/fragments/ios/integrating-lynx-with-existing-app-ios.mdx#2025-04-17_snippet_5\n\nLANGUAGE: swift\nCODE:\n```\nimport Foundation\n\nclass DemoLynxProvider: NSObject, LynxTemplateProvider {\n  func loadTemplate(withUrl url: String!, onComplete callback: LynxTemplateLoadBlock!) {\n    if let filePath = Bundle.main.path(forResource: url, ofType: \"bundle\") {\n      do {\n        let data = try Data(contentsOf: URL(fileURLWithPath: filePath))\n        callback(data, nil)\n      } catch {\n        print(\"Error reading file: \\(error.localizedDescription)\")\n        callback(nil, error)\n      }\n    } else {\n      let urlError = NSError(domain: \"com.lynx\", code: 400, userInfo: [NSLocalizedDescriptionKey: \"Invalid URL.\"])\n      callback(nil, urlError)\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing withInitDataInState HOC in TypeScript\nDESCRIPTION: Function signature and implementation of a Higher-Order Component that takes a class component and returns a wrapped version with initData injection. The HOC adds state management functionality for initData and handles component lifecycle.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/api/react/Function.withInitDataInState.mdx#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction withInitDataInState<P, S>(App: ComponentClass<P, S>): ComponentClass<P, S>\n```\n\n----------------------------------------\n\nTITLE: Try-Catch Error Handling\nDESCRIPTION: Example demonstrating error reporting within a try-catch block when parsing JSON.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/lynx-api/lynx/lynx-report-error.mdx#2025-04-17_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\ntry {\n  const { data } = JSON.parse(content);\n} catch (error) {\n  lynx.reportError(error);\n}\n```\n\n----------------------------------------\n\nTITLE: Importing and Rendering GetTextInfo Component in React\nDESCRIPTION: This snippet demonstrates how to import the GetTextInfo component from a relative path and render it within a React component. The component is imported from the '../lynx/lynx-get-text-info' path and then rendered without any props.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/api/lynx-api/main-thread/lynx-get-text-info.mdx#2025-04-17_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport GetTextInfo from '../lynx/lynx-get-text-info';\n\n<GetTextInfo />\n```\n\n----------------------------------------\n\nTITLE: Demonstrating CSS background-size Property Usage\nDESCRIPTION: This snippet shows various ways to use the background-size property in CSS, including keyword values, percentages, and length units.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/css/properties/background-size.mdx#2025-04-17_snippet_0\n\nLANGUAGE: css\nCODE:\n```\nbackground-size: contain;\n\nbackground-size: 50%;\nbackground-size: 3em;\n\nbackground-size: auto 1em;\nbackground-size: 50% 25%;\n```\n\n----------------------------------------\n\nTITLE: Defining TouchEvent Touches Property in TypeScript\nDESCRIPTION: Defines the 'touches' property of a TouchEvent, which is an array of Touch objects representing all current touch points on the touch surface.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/lynx-api/event/touch-event.mdx#2025-04-17_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ntouches: Touch []\n```\n\n----------------------------------------\n\nTITLE: Implementing LocalMediaFetcher in Java for Android\nDESCRIPTION: Android implementation of a custom media resource handler that intercepts URLs with the 'http://localhost' protocol and redirects them to the 'asset://' scheme for accessing bundled application resources.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/elements/built-in/image.mdx#2025-04-17_snippet_8\n\nLANGUAGE: java\nCODE:\n```\nimport com.lynx.tasm.resourceprovider.LynxResourceRequest\nimport com.lynx.tasm.resourceprovider.media.LynxMediaResourceFetcher\nimport com.lynx.tasm.resourceprovider.media.OptionalBool\n\n/**\n * Custom media resource handler\n *\n * @property protocol The protocol to intercept \"http://localhost\"\n * @property scheme The target resource protocol \"asset://\"\n */\nclass LocalMediaFetcher : LynxMediaResourceFetcher() {\n\n    /**\n     * Determines if the resource is local\n     * @param url The original request URL\n     * @return OptionalBool.TRUE indicates the request needs redirection\n     */\n    override fun isLocalResource(url: String?): OptionalBool {\n        return if (url?.startsWith(\"http://localhost\") == true) {\n            OptionalBool.TRUE\n        } else {\n            OptionalBool.FALSE\n        }\n    }\n\n    /**\n     * Performs URL redirection\n     * @param request The resource request object\n     * @return The converted valid resource path\n     */\n    override fun shouldRedirectUrl(request: LynxResourceRequest?): String {\n        return request?.url?.replace(\n            oldValue = \"http://localhost\",\n            newValue = \"asset://\",\n            ignoreCase = true\n        ) ?: \"\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling DevTool in Android (Java)\nDESCRIPTION: This snippet illustrates how to enable Lynx Debug, DevTool, and LogBox in an Android application using Java. It shows the configuration during Lynx Environment Initialization.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/guide/start/integrate-lynx-devtool.mdx#2025-04-17_snippet_7\n\nLANGUAGE: java\nCODE:\n```\nprivate void initLynxEnv() {\n  LynxEnv.inst().init(this, null, null, null);\n  // Enable Lynx Debug\n  LynxEnv.inst().enableLynxDebug(true);\n  // Enable Lynx DevTool\n  LynxEnv.inst().enableDevtool(true);\n  // Enable Lynx LogBox\n  LynxEnv.inst().enableLogBox(true);\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing LynxEnv in Java Application\nDESCRIPTION: Java implementation for initializing LynxEnv, which provides the global initialization interface for the Lynx Engine. It should be completed during the Application's onCreate lifecycle before any interface calls to the Lynx Engine.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/guide/start/fragments/android/integrating-lynx-with-existing-app-android.mdx#2025-04-17_snippet_6\n\nLANGUAGE: java\nCODE:\n```\nimport com.lynx.tasm.LynxEnv;\n\npublic class YourApplication extends Application {\n\n    @Override\n    public void onCreate() {\n        super.onCreate();\n        initLynxService();\n        initLynxEnv();\n    }\n\n    private void initLynxEnv() {\n        LynxEnv.inst().init(\n            this,\n            null,\n            null,\n            null\n        );\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring SWC Minification in Rspeedy\nDESCRIPTION: Example showing how to configure SWC minification options in Rspeedy using defineConfig. This example demonstrates disabling the mangle feature in the minification process.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/api/rspeedy/rspeedy.minify.jsoptions.md#2025-04-17_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineConfig } from '@lynx-js/rspeedy'\n\nexport default defineConfig({\n  output: {\n    minify: {\n      jsOptions: {\n        minimizerOptions: {\n          mangle: false,\n        },\n      },\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Observing All Performance Events of Specific Types\nDESCRIPTION: This example shows how to create a PerformanceObserver that observes all performance events of types 'metric' and 'pipeline', demonstrating broad event monitoring.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/lynx-api/performance-api/performance-observer/observe.mdx#2025-04-17_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useEffect, useMemo } from 'react';\nimport { View, Text, HostComponent } from '@lynx';\nimport { PerformanceObserver } from '@lynx/performance';\n\nconst PerformanceObserverObserve: React.FC = () => {\n  const entries = useMemo(() => ({\n    metrics: '',\n    pipelines: '',\n  }), []);\n\n  // Create a PerformanceObserver and observe all metrics and pipelines types\n  useEffect(() => {\n    // Use useMemo or constructor to create the PerformanceObserver to avoid missing data\n    const observer = new PerformanceObserver((list) => {\n      const metricsStr: string[] = [];\n      const pipelinesStr: string[] = [];\n\n      list.getEntries().forEach((entry) => {\n        if (entry.entryType === 'pipeline') {\n          const timeFormat = `${entry.name}: ${entry.duration.toFixed(2)}ms`;\n          pipelinesStr.push(timeFormat);\n        } else if (entry.entryType === 'metric') {\n          const metricFormat = `${entry.name}: ${entry.startTime.toFixed(2)}ms`;\n          metricsStr.push(metricFormat);\n        }\n      });\n\n      if (metricsStr.length > 0) {\n        entries.metrics = metricsStr.join('\\n');\n      }\n\n      if (pipelinesStr.length > 0) {\n        entries.pipelines = pipelinesStr.join('\\n');\n      }\n    });\n\n    // Observe all metric and pipeline entry types\n    observer.observe(['metric', 'pipeline']);\n  }, [entries]);\n```\n\n----------------------------------------\n\nTITLE: Sample Response Format for path() Method in JavaScript\nDESCRIPTION: Example of the expected response format when using the path() method, showing the path array from target element to root and the status object.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/lynx-api/nodes-ref/nodes-ref-path.mdx#2025-04-17_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// res\n{\n    // array from target to root\n    \"path\":\n    [\n        {\n            tag:\"\",\n            id:\"\",\n            class:[],\n            dataSet:{},\n            // index of parent's children\n            index:0,\n        },\n        ...\n        {\n            tag:\"page\",\n            id:\"\",\n            class:[],\n            dataSet:{},\n            index:0,\n        }\n    ]\n}\n\n// status\n{\n  \"data\": \"succeed\",\n  \"code\": 0\n}\n```\n\n----------------------------------------\n\nTITLE: Defining List Scroll Event Interface in TypeScript\nDESCRIPTION: TypeScript interface definition for the scroll event handler and the ListScrollEvent object which provides detailed information about scroll state, including scroll positions, dimensions, and visible cells information.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/api/elements/built-in/list.mdx#2025-04-17_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nbindscroll?: EventHandler<ListScrollEvent>;\n\ninterface ListScrollEvent {\n  // 距上次滚动的横向滚动偏移量，单位 px\n  deltaX: number;\n  // 距上次滚动的纵向滚动偏移量，单位 px\n  deltaY: number;\n  // 当前横向滚动偏移量，单位 px\n  scrollLeft: number;\n  // 当前纵向滚动偏移量，单位 px\n  scrollTop: number;\n  // 当前内容区域宽度，单位 px\n  scrollWidth: number;\n  // 当前内容区域高度，单位 px\n  scrollHeight: number;\n  // `<list>`宽度，单位 px\n  listWidth: number;\n  // `<list>`高度，单位 px\n  listHeight: number;\n  // 滚动事件源\n  eventSource: ListEventSource;\n  // 当前正在渲染节点的位置信息\n  attachedCells: [\n    {\n      \"id\": number,        // 节点 id\n      \"itemKey\": string,   // 节点 item-key\n      \"index\": number,     // 节点在 list 中的 index\n      \"left\": number,      // 节点左边界相对于 list 的位置，单位 px\n      \"top\": number,       // 节点上边界相对于 list 的位置，单位 px\n      \"right\": number,     // 节点右边界相对于 list 的位置，单位 px\n      \"bottom\": number,    // 节点下边界相对于 list 的位置，单位 px\n    },\n  ];\n}\n\nenum ListEventSource {\n  DIFF = 0,\n  LAYOUT = 1,\n  SCROLL = 2,\n}\n```\n\n----------------------------------------\n\nTITLE: Using __GetChildren in a Frontend Framework\nDESCRIPTION: This example shows how to use the __GetChildren function in a frontend framework. It creates an element and then retrieves its child nodes.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/engine/element-api/__GetChildren.mdx#2025-04-17_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n// main-thread.js\nlet element = __CreateElement('view', 0, {});\n\nlet children = __GetChildren(element);\n```\n\n----------------------------------------\n\nTITLE: Implicit Background-Only Function in Event Handler (JSX)\nDESCRIPTION: This snippet shows how a function can be implicitly treated as background-only when used as an event handler in ReactLynx, without needing an explicit 'background only' directive.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/react/thinking-in-reactlynx.mdx#2025-04-17_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\nfunction App() {\n  function handleTap() {\n    // 不需要标记这个函数，因为 `bindtap` 被视为后台专属\n  }\n  return <view bindtap={handleTap} />;\n}\n```\n\n----------------------------------------\n\nTITLE: CSS Transition Property Basic Syntax\nDESCRIPTION: Demonstrates various syntax options for the transition-property CSS property, including keyword values, custom identifiers, and multiple property transitions.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/css/properties/transition-property.mdx#2025-04-17_snippet_0\n\nLANGUAGE: css\nCODE:\n```\n/* Keyword values */\ntransition-property: none;\ntransition-property: all;\n\n/* <custom-ident> values */\ntransition-property: test_05;\ntransition-property: -specific;\ntransition-property: sliding-vertically;\n\n/* Multiple values */\ntransition-property: test1, animation4;\ntransition-property: all, height, color;\ntransition-property:;\n```\n\n----------------------------------------\n\nTITLE: Using Less Styles in React Component\nDESCRIPTION: Example of importing and using Less styles in a React component, showing both global Less imports and CSS Module imports with the .less extension.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/rspeedy/styling.mdx#2025-04-17_snippet_12\n\nLANGUAGE: jsx\nCODE:\n```\nimport './global.less';\nimport styles from './button.module.less';\n\nexport function App() {\n  return (\n    <view className={styles.red}>\n      <text className=\"title\">Hello, Less</text>\n    </view>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Defining useInitData React Hook in TypeScript\nDESCRIPTION: Declaration of the useInitData function, which returns InitData. This Hook allows access to initData and triggers re-renders when it changes.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/react/Function.useInitData.mdx#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction useInitData(): InitData\n```\n\n----------------------------------------\n\nTITLE: Setting WRAP_CONTENT Layout Parameters for LynxView in Android\nDESCRIPTION: Example showing how to add a LynxView to a parent view with WRAP_CONTENT layout parameters. This configuration allows the LynxView to automatically size itself based on its content dimensions.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/guide/embed-lynx-to-native/embed-lynx-to-native-flex-android.mdx#2025-04-17_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nparentView.addView(lynxview,\n    new ViewGroup.LayoutParams(ViewGroup.LayoutParams.WRAP_CONTENT,ViewGroup.LayoutParams.WRAP_CONTENT));\n```\n\n----------------------------------------\n\nTITLE: Using SetDataset Function in JavaScript\nDESCRIPTION: Shows how to use the __SetDataset function in JavaScript to set a data attribute on a created element.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/engine/element-api/__SetDataset.mdx#2025-04-17_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// main-thread.js\nlet element = __CreateElement('view', 0, {});\n__SetDataset(element, { key: 'value' });\n```\n\n----------------------------------------\n\nTITLE: Configuring Application in Android Manifest\nDESCRIPTION: Specifies the custom Application class in the AndroidManifest.xml file to enable Lynx to perform global initialization operations at application startup.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/guide/start/fragments/android/integrating-lynx-with-existing-app-android.mdx#2025-04-17_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<application\n  android:name=\".YourApplication\">\n</application>\n```\n\n----------------------------------------\n\nTITLE: Using exec() with SelectorQuery\nDESCRIPTION: Example showing how to use exec() to get the bounding client rect of a DOM element with ID 'my-id'. The query chain includes element selection and method invocation with success and failure handlers.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/lynx-api/selector-query/selector-query-exec.mdx#2025-04-17_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nlynx\n  .createSelectorQuery()\n  .select('#my-id')\n  .invoke({\n    method: 'boundingClientRect',\n    success: function (res) {\n      console.log(res);\n    },\n    fail: function (res) {\n      console.log(res.code, res.data);\n    },\n  })\n  .exec();\n```\n\n----------------------------------------\n\nTITLE: Basic CSS grid-template-rows Examples\nDESCRIPTION: Examples of different ways to use grid-template-rows property including auto values, length values, and the repeat function.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/css/properties/grid-template-rows.mdx#2025-04-17_snippet_0\n\nLANGUAGE: css\nCODE:\n```\n/* auto values*/\ngrid-template-rows: auto auto;\n/* <length> values */\ngrid-template-rows: 120px auto;\n/* repeat func */\ngrid-template-rows: repeat(2, 100px) auto;\ngrid-template-rows: repeat(2, 100px auto) 200px;\n```\n\n----------------------------------------\n\nTITLE: Next-sibling Combinator in CSS\nDESCRIPTION: Demonstrates the plus combinator for selecting immediate following siblings\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/css/selectors.mdx#2025-04-17_snippet_8\n\nLANGUAGE: css\nCODE:\n```\nformer_element + target_element { property declarations }\n```\n\nLANGUAGE: css\nCODE:\n```\nview + text {\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Using useInitDataChanged Hook in a React Component\nDESCRIPTION: This example demonstrates how to use the useInitDataChanged Hook within a React functional component. It shows how to access and use the data provided by the Hook.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/api/react/Function.useInitDataChanged.mdx#2025-04-17_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nfunction App() {\n  useInitDataChanged((data) => {\n    data.someProperty // can use it\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Touch Object Structure in TypeScript\nDESCRIPTION: Describes the structure of a Touch object, which contains detailed information about a single touch point, including its position in various coordinate systems.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/lynx-api/event/touch-event.mdx#2025-04-17_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  identifier: number,   // Unique identifier of the touch point, which remains unchanged during the same touch process\n  x: number,            // The horizontal position of the touch point in the coordinate system of the element actually touched\n  y: number,            // The vertical position of the touch point in the coordinate system of the element actually touched\n  pageX: number,        // The horizontal position of the touch point in the current LynxView coordinate system\n  pageY: number,        // The vertical position of the touch point in the current LynxView coordinate system\n  clientX: number,      // The horizontal position of the touch point in the current window coordinate system\n  clientY: number,      // The horizontal position of the touch point in the current window coordinate system\n}\n```\n\n----------------------------------------\n\nTITLE: Importing and Using Global CSS in React Component\nDESCRIPTION: Example of importing and using global CSS styles in a React component. The global 'red' class is directly applied to the view component.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/rspeedy/styling.mdx#2025-04-17_snippet_8\n\nLANGUAGE: jsx\nCODE:\n```\nimport './styles.css';\n\nexport default function App() {\n  return (\n    <view className=\"red\">\n      <text>Hello, Rspeedy!</text>\n    </view>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: TypeScript Function Declaration for useEffect Hook\nDESCRIPTION: Type definition for React's useEffect hook that accepts an effect callback function and optional dependency array. The effect runs after DOM updates and can return a cleanup function.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/react/Function.useEffect.mdx#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction useEffect(effect: EffectCallback, deps?: DependencyList): void\n```\n\n----------------------------------------\n\nTITLE: Enabling Lynx DevTool Switches in iOS (Swift)\nDESCRIPTION: This code snippet shows how to enable the Lynx Debug, Lynx DevTool, and Lynx LogBox switches when initializing LynxEnv in an iOS application using Swift.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/guide/start/integrate-lynx-devtool.mdx#2025-04-17_snippet_2\n\nLANGUAGE: swift\nCODE:\n```\nclass AppDelegate: UIResponder, UIApplicationDelegate {\n\n  func application(_ application: UIApplication, didFinishLaunchingWithOptions launchOptions: [UIApplication.LaunchOptionsKey: Any]?) -> Bool {\n    // ...\n    // 打开 Lynx Debug 开关\n    lynxEnv.lynxDebugEnabled = true\n    // 打开 Lynx DevTool 开关\n    lynxEnv.devtoolEnabled = true\n    // 打开 Lynx LogBox 开关\n    lynxEnv.logBoxEnabled = true\n    return true\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Different Entries for Lynx and Web\nDESCRIPTION: Example showing how to define different entry points for Lynx and Web environments using defineConfig from @lynx-js/rspeedy.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/api/rspeedy/rspeedy.config.environments.md#2025-04-17_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineConfig } from '@lynx-js/rspeedy'\n\nexport default defineConfig({\n  environments: {\n    lynx: {},\n    web: {\n      source: { entry: { web: './src/index.web.jsx' } },\n    },\n  },\n  source: {\n    entry: './src/index.jsx',\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Server Headers in JavaScript\nDESCRIPTION: Example of how to use the 'headers' property in the server configuration using @lynx-js/rspeedy. This example sets the 'Access-Control-Allow-Origin' header to allow all origins.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/rspeedy/rspeedy.server.headers.md#2025-04-17_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineConfig } from '@lynx-js/rspeedy'\nexport default defineConfig({\n  server: {\n    headers: {\n      'Access-Control-Allow-Origin': '**',\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Installing TanStack Query Dependencies in ReactLynx\nDESCRIPTION: Command to install TanStack Query package using a package manager. The specific package manager (npm, yarn, pnpm) is determined by a custom component.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/react/data-fetching.mdx#2025-04-17_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ninstall @tanstack/react-query\n```\n\n----------------------------------------\n\nTITLE: Stopping Immediate Event Propagation in Lynx\nDESCRIPTION: The stopImmediatePropagation method prevents event bubbling and stops other event handlers for the same event on the current node from executing. This method is only available in the main thread script.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/lynx-api/event/event.mdx#2025-04-17_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nstopImmediatePropagation(): void;\n```\n\n----------------------------------------\n\nTITLE: Defining padding-inline-start in CSS\nDESCRIPTION: Examples of various ways to define the padding-inline-start property in CSS, including length and percentage values.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/css/properties/padding-inline-start.mdx#2025-04-17_snippet_0\n\nLANGUAGE: css\nCODE:\n```\n/* <length> values */\npadding-inline-start: 0.5em;\npadding-inline-start: 0px;\npadding-inline-start: 2rpx;\n\n/* <percentage> value */\npadding-inline-start: 10%;\n```\n\n----------------------------------------\n\nTITLE: Implementing Layout Event Handler for Text in Lynx\nDESCRIPTION: Implementation of the bindlayout event handler which provides information about text layout results including line count and text positions.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/api/elements/built-in/text.mdx#2025-04-17_snippet_6\n\nLANGUAGE: ts\nCODE:\n```\nbindlayout = (e: LineInfo) => {};\n\nclass LineInfo {\n  /**\n   * 该行相对整段文本的起始偏移量\n   */\n  start: number;\n  /**\n   * 该行相对整段文本的结束偏移量\n   */\n  end: number;\n  /**\n   * 行内文本被截断的字符数量. 如果不为0,说明整段文本在这一行发生了截断.\n   */\n  ellipsisCount: number;\n};\n\n{\n  /**\n   * 文本布局之后,可以显示的文本行数\n   */\n  lineCount: number;\n  /**\n   * 详细的布局行内信息\n   */\n  lines: LineInfo[];\n  /**\n   * text 元件宽高\n   */\n  size: {width: number, height: number};\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Scroll Event Throttle Attribute in TSX\nDESCRIPTION: Defines the scroll-event-throttle attribute that sets the time interval for <list> callback scroll events in milliseconds. Default is 200ms.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/elements/built-in/list.mdx#2025-04-17_snippet_18\n\nLANGUAGE: tsx\nCODE:\n```\n// DefaultValue: 200\nscroll-event-throttle?: number\n```\n\n----------------------------------------\n\nTITLE: Background Only Directive Basic Usage in TypeScript\nDESCRIPTION: Demonstrates how to mark a function to execute only on the background thread using the 'background only' directive. The function body will be removed in other threads.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/react/Document.directives.mdx#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction bgOnlyAction(pureCallback) {\n  'background only';\n  lynx.getJSModule('GlobalEventEmitter').addListener('eventName', pureCallback);\n}\n```\n\n----------------------------------------\n\nTITLE: Calculating Pixel Height on iOS in Objective-C\nDESCRIPTION: Calculates the pixel height of the screen on iOS devices. It considers custom screen sizes and uses the UIScreen class to get the device's screen dimensions and scale.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/lynx-api/global/system-info.mdx#2025-04-17_snippet_3\n\nLANGUAGE: objc\nCODE:\n```\nCGSize screenSize;\nif (!CGSizeEqualToSize(builder.screenSize, CGSizeZero)) {\n  screenSize = builder.screenSize;\n} else {\n  screenSize = [UIScreen mainScreen].bounds.size;\n}\nconst CGFloat scale = [UIScreen mainScreen].scale;\nconst CGFloat pixelHeight = screenSize.height * scale;\n```\n\n----------------------------------------\n\nTITLE: Event Bubbling Example in TSX\nDESCRIPTION: Demonstrates event bubbling by propagating tap events from child to parent nodes\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/guide/interaction/event-handling/event-propagation.mdx#2025-04-17_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n<View\n  bind:tap={() => {\n    setColor((prev) => {\n      return prev === 'orange' ? '#333' : 'orange';\n    });\n  }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Defining CSS flex Property Formal Syntax\nDESCRIPTION: This code block defines the formal syntax for the flex property and its components (flex-grow, flex-shrink, flex-basis). It specifies the allowed values and their formats using CSS syntax notation.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/css/properties/flex.mdx#2025-04-17_snippet_1\n\nLANGUAGE: css\nCODE:\n```\nflex =\n  none                                                |\n  [ <'flex-grow'> <'flex-shrink'>? || <'flex-basis'> ]\n\n<flex-grow> =\n  <number [0,∞]>\n\n<flex-shrink> =\n  <number [0,∞]>\n\n<flex-basis> = <'width'>\n\n<width> =\n  auto                                      |\n  <length-percentage [0,∞]>                 |\n  max-content                               |\n  fit-content( <length-percentage [0,∞]> )\n\n<length-percentage> =\n  <length>      |\n  <percentage>\n```\n\n----------------------------------------\n\nTITLE: Exposure Detection in Lynx\nDESCRIPTION: Example demonstrating how to monitor node exposure using exposure-id attribute and handling exposure/disexposure events.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/guide/interaction/visibility-detection.mdx#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Go } from '@lynx';\n\n<Go\n  example=\"event\"\n  defaultFile=\"src/visibility_expose/index.tsx\"\n  defaultEntryFile=\"dist/visibility_expose.lynx.bundle\"\n  img=\"https://lf-lynx.tiktok-cdns.com/obj/lynx-artifacts-oss-sg/lynx-website/assets/doc/event/visibility_expose.gif\"\n  highlight=\"{8-12,14-21,62}\"\n  entry=\"src/visibility_expose\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Using fit-content Function with CSS Properties\nDESCRIPTION: Example of using the fit-content function with width, height, and grid properties. The function constrains elements to their content size or a specified maximum value.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/css/data-type/fit-content.mdx#2025-04-17_snippet_0\n\nLANGUAGE: css\nCODE:\n```\nwidth: fit-content;\nheight: fit-content(200px);\ngrid-template-columns: fit-content;\ngrid-template-rows: fit-content;\ngrid-auto-columns: fit-content;\ngrid-auto-rows: fit-content;\n```\n\n----------------------------------------\n\nTITLE: Basic Box-Sizing CSS Syntax Examples\nDESCRIPTION: Examples of CSS box-sizing property syntax options available in Lynx, including border-box (default) and content-box settings.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/css/properties/box-sizing.mdx#2025-04-17_snippet_0\n\nLANGUAGE: css\nCODE:\n```\nbox-sizing: border-box;\nbox-sizing: content-box;\n```\n\n----------------------------------------\n\nTITLE: Defining runOnBackground Function in TypeScript\nDESCRIPTION: This snippet defines the runOnBackground function, which takes a function as an argument and returns a new function that can be called to execute the original function asynchronously in a background context.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/react/Function.runOnBackground.mdx#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction runOnBackground<Fn>(f: Fn): (...args: Parameters<Fn>) => void\n```\n\n----------------------------------------\n\nTITLE: Basic Usage Example of root.render in TypeScript\nDESCRIPTION: Simple example demonstrating how to use the root.render method to render a React component in a Lynx application.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/api/react/Interface.Root.mdx#2025-04-17_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { root } from \"@lynx-js/react\"\n\nfunction App() {\n  // Your app\n  return <view>...</view>\n}\n\nroot.render(<App/>);\n```\n\n----------------------------------------\n\nTITLE: Using addFont() Method to Load a Custom Font\nDESCRIPTION: Example of how to use the addFont() method to load a custom font with a specified font-family and source URL, along with a callback function that executes after the font is loaded.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/lynx-api/lynx/lynx-add-font.mdx#2025-04-17_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nlynx.addFont(\n  {\n    'font-family': 'CustomFont',\n    src: 'url(\"xxx\")',\n  },\n  () => {\n    console.log('load font');\n  },\n);\n```\n\n----------------------------------------\n\nTITLE: CSS justify-content Formal Syntax Definition\nDESCRIPTION: The formal syntax definition for the justify-content property, showing the available values including content-distribution and content-position options.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/css/properties/justify-content.mdx#2025-04-17_snippet_1\n\nLANGUAGE: css\nCODE:\n```\njustify-content = <content-distribution> | <content-position>\n\n<content-distribution> =\n  space-between  |\n  space-around   |\n  space-evenly   |\n  stretch\n\n<content-position> =\n  center      |\n  start       |\n  end         |\n  flex-start  |\n  flex-end\n```\n\n----------------------------------------\n\nTITLE: Defining font-family in CSS\nDESCRIPTION: The basic syntax for the font-family property which accepts a comma-separated list of font names to establish a priority sequence for font selection.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/css/properties/font-family.mdx#2025-04-17_snippet_0\n\nLANGUAGE: CSS\nCODE:\n```\nfont-family: font1,font2;\n```\n\n----------------------------------------\n\nTITLE: Accessing Event CurrentTarget in Lynx\nDESCRIPTION: The currentTarget property provides information about the element that is listening to the event, including its id, uid, and dataset attributes.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/lynx-api/event/event.mdx#2025-04-17_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\ncurrentTarget: {\n  id: string,\n  uid: number,\n  dataset: [key: string]: any,\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Utility Function for Card Number Formatting\nDESCRIPTION: Implements a utility function that extracts the first and last four digits from a card number string, with default values if parts are not available.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/react/payment-details.mdx#2025-04-17_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\nconst getCardNumberParts = (number: string) => {\n  const parts = number?.split(' ') || [];\n  return {\n    firstFour: parts[0] || '4558',\n    lastFour: parts[3] || '6767',\n  };\n};\n```\n\n----------------------------------------\n\nTITLE: Using selectUniqueID in React Lynx Component\nDESCRIPTION: This example demonstrates how to use selectUniqueID within a React Lynx component. It selects the target node of a tap event and changes its background color to red.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/lynx-api/selector-query/selector-query-select-unique-id.mdx#2025-04-17_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nconst onTap = useCallback((event: ReactLynx.ITouchEvent) => {\n  lynx\n    .createSelectorQuery()\n    .selectUniqueID(event.target.uid)\n    .setNativeProps({\n      'background-color': 'red',\n    })\n    .exec();\n}, []);\n```\n\n----------------------------------------\n\nTITLE: createElement for Function Components in TypeScript\nDESCRIPTION: This overload of createElement is for creating elements from functional components. It accepts a FunctionComponent type, props with Attributes, and optional children nodes.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/api/react/Function.createElement.mdx#2025-04-17_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nfunction createElement<P>(\n   type: FunctionComponent<P>,\n   props?: null | Attributes & P, ...\nchildren?: ReactNode[]): FunctionComponentElement<P>\n```\n\n----------------------------------------\n\nTITLE: Defining LynxMediaResourceFetcher Interface in Java\nDESCRIPTION: Abstract class definition for Android that handles URL redirection and resource fetching. Contains three main methods: shouldRedirectUrl for path redirection, isLocalResource for checking local paths, and fetchImage for bitmap retrieval.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/lynx-native-api/resource-fetcher/MediaResourceFetcher.mdx#2025-04-17_snippet_0\n\nLANGUAGE: java\nCODE:\n```\npublic abstract class LynxMediaResourceFetcher {\n  public abstract String shouldRedirectUrl(LynxResourceRequest request);\n\n  /**\n   * Quick check for a local path.\n   *\n   * @param url input path\n   * @return\n   *  TRUE if is a local path;\n   *  FALSE if not a local path;\n   *  UNDEFINED if not sure;\n   */\n  public OptionalBool isLocalResource(String url) {\n    return OptionalBool.UNDEFINED;\n  }\n\n  /**\n   * fetch Image Drawable directly.\n   *\n   * @param request\n   * @param callback Response with the needed drawable.\n   */\n  public void fetchImage(LynxResourceRequest request, LynxResourceCallback<Closeable> callback) {}\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring Custom Input Element in Objective-C\nDESCRIPTION: Declares a custom input element 'LynxExplorerInput' that inherits from LynxUI and implements UITextFieldDelegate. It also defines a custom UITextField subclass 'LynxTextField' with padding support.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/guide/custom-native-component/custom-component-iOS.mdx#2025-04-17_snippet_0\n\nLANGUAGE: objc\nCODE:\n```\n#import <Lynx/LynxUI.h>\n\nNS_ASSUME_NONNULL_BEGIN\n\n@interface LynxTextField : UITextField\n\n@property(nonatomic, assign) UIEdgeInsets padding;\n\n@end\n\n@interface LynxExplorerInput : LynxUI <LynxTextField *> <UITextFieldDelegate>\n\n@end\n\nNS_ASSUME_NONNULL_END\n```\n\n----------------------------------------\n\nTITLE: Invoking UI Method on Selected Node Using JavaScript\nDESCRIPTION: Example of using invoke() to call the 'seekTo' method on a video element. The example demonstrates setting parameters, handling success and failure callbacks, and proper method chaining with SelectorQuery.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/lynx-api/nodes-ref/nodes-ref-invoke.mdx#2025-04-17_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvar params = {\n  method: 'seekTo',\n  params: {\n    duration: 1000,\n  },\n  success: function (res) {\n    console.log(res);\n  },\n  fail: function (data) {\n    console.log(data.code, data.data);\n  },\n};\n\nlynx.createSelectorQuery().select('#video').invoke(params).exec();\n```\n\n----------------------------------------\n\nTITLE: Using border-left CSS property\nDESCRIPTION: Example of setting the left border of an element using the border-left shorthand property. It combines width, style, and color values in a single declaration.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/css/properties/border-left.mdx#2025-04-17_snippet_0\n\nLANGUAGE: css\nCODE:\n```\nborder-left: 1px solid red;\n```\n\n----------------------------------------\n\nTITLE: Retrieving Class Selectors with __GetClasses in Lynx (JSX)\nDESCRIPTION: This snippet demonstrates how to use the __GetClasses function to retrieve class selectors from an Element object. It first creates an element, sets attributes and classes, then retrieves the class names.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/engine/element-api/__GetClasses.mdx#2025-04-17_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n// main-thread.js\nlet element = __CreateElement('view', 0, {});\n__SetAttribute(element, 'src', 'xx');\n__SetClasses(element, 'A B C');\n\nlet classNames = __GetClasses(element);\n```\n\n----------------------------------------\n\nTITLE: Handling Platform-Specific Data Formats\nDESCRIPTION: Code snippet showing how to handle platform-specific data formats in a React component. This demonstrates a fallback approach to handle different property names across platforms.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/guide/use-data-from-host-platform.mdx#2025-04-17_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useInitData } from '@lynx-js/react';\n\nexport function App() {\n  const initData = useInitData();\n  return (\n    <view>\n      <text>{initData.pageTitle || initData.page_title}</text>\n    </view>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Image Resume Animation Implementation\nDESCRIPTION: Demonstrates resuming animation on an image element using SelectorQuery.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/elements/built-in/image.mdx#2025-04-17_snippet_4\n\nLANGUAGE: ts\nCODE:\n```\nlynx.createSelectorQuery()\n     .select('#gifs')\n     .invoke({\n      method: 'resumeAnimation'，\n    })\n    .exec();\n```\n\n----------------------------------------\n\nTITLE: Generating JS Cache for TemplateBundle in Java\nDESCRIPTION: Starts a background task to generate JS code cache for the current template. Supports both V8 and QuickJS cache generation.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/lynx-native-api/template-bundle.mdx#2025-04-17_snippet_4\n\nLANGUAGE: java\nCODE:\n```\npublic void postJsCacheGenerationTask(String codeCacheSourceUrl, boolean useV8)\n```\n\n----------------------------------------\n\nTITLE: Declaring React memo Function for ComponentType\nDESCRIPTION: Defines the type signature for the memo function when used with any ComponentType. This more general overload works with both class and function components.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/api/react/Function.memo.mdx#2025-04-17_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nfunction memo<T>(Component: T, propsAreEqual?: (prevProps: Readonly<ComponentProps<T>>, nextProps: Readonly<ComponentProps<T>>) => boolean): MemoExoticComponent<T>\n```\n\n----------------------------------------\n\nTITLE: Defining CssLoader Interface in TypeScript\nDESCRIPTION: TypeScript interface definition for CssLoader that controls css-loader options in webpack.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/api/rspeedy/rspeedy.cssloader.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface CssLoader \n```\n\n----------------------------------------\n\nTITLE: Defining min-width in CSS for Lynx\nDESCRIPTION: Examples of using the min-width property in CSS for Lynx. It shows how to set min-width using length units and percentages.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/css/properties/min-width.mdx#2025-04-17_snippet_0\n\nLANGUAGE: css\nCODE:\n```\n/* <length> */\nmin-width: 120px;\nmin-width: 10em;\n\n/* <percentage> */\nmin-width: 75%;\n```\n\n----------------------------------------\n\nTITLE: Creating Native View Instance in Java/Kotlin\nDESCRIPTION: Implementation of the createView method to instantiate the native Android View for the custom element.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/guide/custom-native-component/custom-component-android.mdx#2025-04-17_snippet_3\n\nLANGUAGE: java\nCODE:\n```\npublic class LynxExplorerInput extends LynxUI<AppCompatEditText> {\n\n  public LynxExplorerInput(LynxContext context) {\n    super(context);\n  }\n\n  @Override\n  protected AppCompatEditText createView(Context context) {\n    AppCompatEditText view = new AppCompatEditText(context);\n    //...\n    return view;\n  }\n\n}\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nclass LynxExplorerInput(context: LynxContext) : LynxUI<AppCompatEditText>(context) {\n\n  override fun createView(context: Context): AppCompatEditText {\n    return AppCompatEditText(context).apply {\n      //...\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting preload-buffer-count Attribute in TypeScript\nDESCRIPTION: Shows how to set the preload-buffer-count attribute for the <list> component. This attribute controls the number of nodes outside <list> that are preloaded, affecting memory usage and performance.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/elements/built-in/list.mdx#2025-04-17_snippet_22\n\nLANGUAGE: tsx\nCODE:\n```\n// DefaultValue: 0\npreload-buffer-count?: number\n```\n\n----------------------------------------\n\nTITLE: Applying Grid Layout in CSS\nDESCRIPTION: The first step to implement a grid layout by setting the display property to grid on the parent element.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/guide/ui/layout/grid-layout.mdx#2025-04-17_snippet_0\n\nLANGUAGE: css\nCODE:\n```\ndisplay: grid;\n```\n\n----------------------------------------\n\nTITLE: Using CSS Animation Shorthand Property\nDESCRIPTION: Examples of different ways to use the CSS animation shorthand property, including specifying all animation properties, partial properties, and defining multiple animations.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/css/properties/animation.mdx#2025-04-17_snippet_0\n\nLANGUAGE: css\nCODE:\n```\n/* @keyframes name | duration | timing-function | delay |\n   iteration-count | direction | fill-mode | play-state*/\nanimation: slidein 3s ease-in 1s 2 reverse both paused;\n\n/* @keyframes name | duration | timing-function | delay */\nanimation: slidein 3s linear 1s;\n\n/* @keyframes name | duration */\nanimation: slidein 3s;\n\n/* Multiple animations */\nanimation:\n  slidein 3s ease-in 1s 2 reverse both paused,\n  ani_scale 3s linear 1s;\n```\n\n----------------------------------------\n\nTITLE: Monitoring Global Exposure Events in Lynx\nDESCRIPTION: This snippet demonstrates how to use GlobalEventEmitter to monitor exposure events for nodes with the exposure-id attribute set. It outputs the exposed node's exposure-id when exposed.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/guide/interaction/visibility-detection/exposure-ability.mdx#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Go } from '@lynx';\n\nGo.GlobalEventEmitter.on('exposure', (e) => {\n  console.log('exposure', e);\n});\n\nGo.GlobalEventEmitter.on('disexposure', (e) => {\n  console.log('disexposure', e);\n});\n\nexport default function App() {\n  return (\n    <ScrollView>\n      <ComponentA />\n      <ComponentB />\n      <ComponentC />\n    </ScrollView>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Layout Handling in Java/Kotlin\nDESCRIPTION: Shows how to handle layout updates by implementing onLayoutUpdated to apply custom padding and border calculations.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/guide/custom-native-component/custom-component-android.mdx#2025-04-17_snippet_5\n\nLANGUAGE: java\nCODE:\n```\npublic class LynxExplorerInput extends LynxUI<AppCompatEditText> {\n\n  public LynxExplorerInput(LynxContext context) {\n    super(context);\n  }\n\n  @Override\n  public void onLayoutUpdated() {\n    super.onLayoutUpdated();\n    int paddingTop = mPaddingTop + mBorderTopWidth;\n    int paddingBottom = mPaddingBottom + mBorderBottomWidth;\n    int paddingLeft = mPaddingLeft + mBorderLeftWidth;\n    int paddingRight = mPaddingRight + mBorderRightWidth;\n    mView.setPadding(paddingLeft, paddingTop, paddingRight, paddingBottom);\n  }\n\n  @Override\n  protected AppCompatEditText createView(Context context) {\n    AppCompatEditText view = new AppCompatEditText(context);\n    //...\n    return view;\n  }\n\n  @LynxProp(name = \"value\")\n  public void setValue(String value) {\n    if (!value.equals(mView.getText().toString())) {\n      mView.setText(value);\n    }\n  }\n\n}\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nclass LynxExplorerInput(context: LynxContext) : LynxUI<AppCompatEditText>(context) {\n\n  override fun onLayoutUpdated() {\n    super.onLayoutUpdated()\n    val paddingTop = mPaddingTop + mBorderTopWidth\n    val paddingBottom = mPaddingBottom + mBorderBottomWidth\n    val paddingLeft = mPaddingLeft + mBorderLeftWidth\n    val paddingRight = mPaddingRight + mBorderRightWidth\n    mView.setPadding(paddingLeft, paddingTop, paddingRight, paddingBottom)\n  }\n\n  override fun createView(context: Context): AppCompatEditText {\n    return AppCompatEditText(context).apply {\n      //...\n    }\n  }\n\n  @LynxProp(name = \"value\")\n  fun setValue(value: String) {\n    if (value != mView.text.toString()) {\n      mView.setText(value)\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: CSS Position Property Syntax Examples\nDESCRIPTION: Basic syntax examples for the position CSS property, showing the different positioning values that can be applied to elements.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/css/properties/position.mdx#2025-04-17_snippet_0\n\nLANGUAGE: css\nCODE:\n```\nposition: relative;\nposition: fixed;\nposition: absolute;\nposition: sticky;\n```\n\n----------------------------------------\n\nTITLE: ID Selector in CSS\nDESCRIPTION: Shows the syntax for selecting elements by their ID attribute\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/css/selectors.mdx#2025-04-17_snippet_3\n\nLANGUAGE: css\nCODE:\n```\n#idName {  property declarations }\n```\n\n----------------------------------------\n\nTITLE: Defining List Cross Axis Gap Attribute in TSX\nDESCRIPTION: Shows how to specify the spacing of <list> child nodes in the cross axis direction using CSS styling.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/elements/built-in/list.mdx#2025-04-17_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\n// DefaultValue: null\nlist-cross-axis-gap?: ${number}px | ${number}rpx\n\n<list\n  style={{listCrossAxisGap:'10px'}}\n/>\n```\n\n----------------------------------------\n\nTITLE: Using __GetInlineStyles in Lynx Framework (JSX)\nDESCRIPTION: Example of how to use __GetInlineStyles in the Lynx frontend framework. This code creates an element, sets some inline styles using __SetInlineStyles, and then retrieves those styles using __GetInlineStyles.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/engine/element-api/__GetInlineStyles.mdx#2025-04-17_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n// main-thread.js\nlet element = __CreateElement('view', 0, {});\n__SetInlineStyles(element, 'top:10px;left:10px;right:10px;bottom:10px;');\n\nlet styles = __GetInlineStyles(element);\n```\n\n----------------------------------------\n\nTITLE: Enabling CSS Modules for All CSS Files in JavaScript Configuration\nDESCRIPTION: This example shows how to enable CSS modules for all CSS files using the defineConfig function from @lynx-js/rspeedy. It sets the auto property of cssModules to a function that always returns true.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/rspeedy/rspeedy.output.cssmodules.md#2025-04-17_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineConfig } from '@lynx-js/rspeedy'\nexport default defineConfig({\n  output: {\n    cssModules: {\n      auto: () => true,\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Integrating DevTool Switch Page in iOS with Objective-C\nDESCRIPTION: This snippet demonstrates how to create a view controller that loads the Lynx DevTool switch page in Objective-C. It initializes a LynxView, configures its layout parameters, and loads the DevTool switch template from a bundle resource.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/guide/start/integrate-lynx-devtool-advanced.mdx#2025-04-17_snippet_0\n\nLANGUAGE: objective-c\nCODE:\n```\n#import <Lynx/LynxView.h>\n\n#import \"DebugSettingViewController.h\"\n#import \"DemoLynxProvider.h\"\n\n@implementation DebugSettingViewController\n\n- (void)viewDidLoad {\n  [super viewDidLoad];\n\n  LynxView *lynxView = [[LynxView alloc] initWithBuilderBlock:^(LynxViewBuilder *builder) {\n    builder.config = [[LynxConfig alloc] initWithProvider:[[DemoLynxProvider alloc] init]];\n    builder.screenSize = self.view.frame.size;\n    builder.fontScale = 1.0;\n  }];\n\n  lynxView.preferredLayoutWidth = self.view.frame.size.width;\n  lynxView.preferredLayoutHeight = self.view.frame.size.height;\n  lynxView.layoutWidthMode = LynxViewSizeModeExact;\n  lynxView.layoutHeightMode = LynxViewSizeModeExact;\n\n  [self.view addSubview:lynxView];\n\n  NSString *bundlePath = [[NSBundle mainBundle] pathForResource:@\"LynxDebugResources\" ofType: @\"bundle\"];\n  NSData *templateData = [[NSData alloc] initWithContentsOfFile:[bundlePath stringByAppendingString:@\"/switchPage/devtoolSwitch.lynx.bundle\"]];\n  [lynxView loadTemplate:templateData withURL:@\"devtool_switch/switchPage/devtoolSwitch.lynx.bundle\"];\n}\n\n@end\n```\n\n----------------------------------------\n\nTITLE: setState Method Implementation\nDESCRIPTION: Method to update component state with new values and trigger re-rendering. Accepts state updates and an optional callback function.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/react/Class.PureComponent.mdx#2025-04-17_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nsetState<K>(state: null | S | (prevState: Readonly<S>, props: Readonly<P>) => null | S | Pick<S, K> | Pick<S, K>, callback?: () => void): void\n```\n\n----------------------------------------\n\nTITLE: Setting font-size using CSS\nDESCRIPTION: Examples of setting font-size using different units such as pixels, em, and percentages.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/css/properties/font-size.mdx#2025-04-17_snippet_0\n\nLANGUAGE: css\nCODE:\n```\n/* <length> */\nfont-size: 12px;\nfont-size: 0.8em;\n\n/* <percentage> */\nfont-size: 80%;\n```\n\n----------------------------------------\n\nTITLE: Implementing shouldComponentUpdate in React Components\nDESCRIPTION: Lifecycle method to determine if component should re-render based on prop and state changes. Returns boolean to control re-rendering behavior.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/react/Class.Component.mdx#2025-04-17_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\noptional shouldComponentUpdate(\n   nextProps: Readonly<P>,\n   nextState: Readonly<S>,\n   nextContext: any): boolean\n```\n\n----------------------------------------\n\nTITLE: Constructing LynxUpdateMeta in Objective-C for iOS\nDESCRIPTION: This snippet shows how to create a LynxUpdateMeta object in Objective-C for iOS. It initializes the object and sets its data and globalProps properties to nil.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/lynx-native-api/lynx-update-meta.mdx#2025-04-17_snippet_1\n\nLANGUAGE: objective-c\nCODE:\n```\nLynxUpdateMeta* meta = [LynxUpdateMeta init];\nmeta.data = nil;\nmeta.globalProps = nil;\n```\n\n----------------------------------------\n\nTITLE: Defining Native Storage Module Header in Objective-C\nDESCRIPTION: Header file for the NativeLocalStorageModule that implements the LynxModule protocol. Defines the basic interface for the storage module.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/guide/custom-native-modules/native-module-ios.mdx#2025-04-17_snippet_0\n\nLANGUAGE: objective-c\nCODE:\n```\n#import <Foundation/Foundation.h>\n#import <Lynx/LynxModule.h>\n\nNS_ASSUME_NONNULL_BEGIN\n\n@interface NativeLocalStorageModule : NSObject <LynxModule>\n\n@end\n\nNS_ASSUME_NONNULL_END\n```\n\n----------------------------------------\n\nTITLE: Using Rspeedy Config in Project\nDESCRIPTION: Example usage of defineConfig helper in a lynx.config.ts file to enable TypeScript autocompletion for configuration options\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/rspeedy/rspeedy.defineconfig.md#2025-04-17_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n//@ts-check\nimport { defineConfig } from '@lynx-js/rspeedy'\nexport default defineConfig({\n  // autocompletion works here!\n})\n```\n\n----------------------------------------\n\nTITLE: Formal Syntax Definition for -x-auto-font-size Property\nDESCRIPTION: The formal syntax definition for the -x-auto-font-size CSS property in Lynx. It shows that the property accepts either 'true' followed by up to three optional length values, or 'false'.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/css/properties/-x-auto-font-size.mdx#2025-04-17_snippet_1\n\nLANGUAGE: css\nCODE:\n```\n-x-auto-font-size = true [<length>] {0, 3} | false\n```\n\n----------------------------------------\n\nTITLE: Defining MetricActualFmpEntry.lynxActualFmp Property in TypeScript\nDESCRIPTION: This property represents the time from loading the TemplateBundle to the completion of rendering for marked components. It returns a PerformanceMetric object.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/lynx-api/performance-api/performance-entry/metric-actual-fmp-entry.mdx#2025-04-17_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nlynxActualFmp: PerformanceMetric;\n```\n\n----------------------------------------\n\nTITLE: IFR with Host Platform Data\nDESCRIPTION: Example showing how to implement IFR using data from the host platform, using mockData to simulate platform data integration.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/guide/interaction/ifr.mdx#2025-04-17_snippet_2\n\nLANGUAGE: TSX\nCODE:\n```\n<Go\n  example=\"ifr\"\n  defaultFile=\"src/initData/App.tsx\"\n  defaultEntryFile=\"dist/init_data.lynx.bundle\"\n  highlight=\"{17}\"\n  entry=\"src/initData\"\n  img=\"https://lf-lynx.tiktok-cdns.com/obj/lynx-artifacts-oss-sg/lynx-website/assets/ifr_init_data.mp4\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Setting border-left-style CSS Property Examples\nDESCRIPTION: Examples of different values that can be applied to the border-left-style CSS property, showing various border styles that can be applied to an element's left border.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/css/properties/border-left-style.mdx#2025-04-17_snippet_0\n\nLANGUAGE: css\nCODE:\n```\nborder-left-style: none;\nborder-left-style: hidden;\nborder-left-style: dotted;\nborder-left-style: dashed;\nborder-left-style: solid;\nborder-left-style: double;\nborder-left-style: groove;\nborder-left-style: ridge;\nborder-left-style: inset;\nborder-left-style: outset;\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Event Handlers in TypeScript\nDESCRIPTION: Defines handlers for custom events including layoutchange, uiappear, and uidisappear. These events are triggered for layout changes and UI visibility changes.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/elements/built-in/view.mdx#2025-04-17_snippet_36\n\nLANGUAGE: typescript\nCODE:\n```\nlayoutchange: LayoutChangeDetailEvent;\nuiappear: UIAppearanceDetailEvent;\nuidisappear: UIAppearanceDetailEvent;\n```\n\n----------------------------------------\n\nTITLE: Defining SetEvents Function Syntax in JSX\nDESCRIPTION: Defines the syntax for the __SetEvents function, which takes an Element object and an array of listener objects as parameters. It sets event listeners for the specified Element node.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/engine/element-api/__SetEvents.mdx#2025-04-17_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n__SetEvents(element: Element, listeners: Array<Record<string, any>>) : void;\n```\n\n----------------------------------------\n\nTITLE: Importing JSON Data in TypeScript\nDESCRIPTION: Examples showing different ways to import JSON data from the package, including static imports, dynamic imports and fetch requests.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/packages/lynx-compat-data/README.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// Static import\nimport testData from '@lynx-js/lynx-compat-data/test/api.json';\n\n// Dynamic import\nconst testData = await import('@lynx-js/lynx-compat-data/test/api.json');\n\n// If you server them somewhere...\nfetch('/path/to/data.json')\n  .then((res) => res.json())\n  .then((data) => {\n    // use the data here\n  });\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Various grid-auto-columns CSS Property Values\nDESCRIPTION: This snippet showcases different ways to use the grid-auto-columns property, including keyword values, length values, percentage values, flex values, minmax() values, and fit-content() values. It also demonstrates how to specify multiple track sizes.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/css/properties/grid-auto-columns.mdx#2025-04-17_snippet_0\n\nLANGUAGE: css\nCODE:\n```\n/* Keyword values */\ngrid-auto-columns: max-content;\ngrid-auto-columns: auto;\n\n/* <length> values */\ngrid-auto-columns: 100px;\n\n/* <percentage> values */\ngrid-auto-columns: 10%;\ngrid-auto-columns: 33.3%;\n\n/* <flex> values */\ngrid-auto-columns: 0.5fr;\ngrid-auto-columns: 3fr;\n\n/* minmax() values */\ngrid-auto-columns: minmax(100px, auto);\ngrid-auto-columns: minmax(max-content, 2fr);\n\n/* fit-content() values */\ngrid-auto-columns: fit-content(400px);\ngrid-auto-columns: fit-content(20%);\n\n/* multiple track-size values */\ngrid-auto-columns: 100px 150px 390px;\ngrid-auto-columns: 10% 33.3%;\ngrid-auto-columns: 0.5fr 3fr 1fr;\ngrid-auto-columns: 100px minmax(100px, auto) 10% 0.5fr fit-content(400px);\n```\n\n----------------------------------------\n\nTITLE: Basic Border Bottom Style Usage\nDESCRIPTION: Demonstrates the basic syntax for setting the bottom border style of an element.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/css/properties/border-bottom-style.mdx#2025-04-17_snippet_0\n\nLANGUAGE: css\nCODE:\n```\nborder-bottom-style: dashed;\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Background-Only Code in ReactLynx (JSX)\nDESCRIPTION: This snippet showcases various ways to define background-only code in ReactLynx, including event handlers, effects, refs, and functions marked with the 'background only' directive.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/react/thinking-in-reactlynx.mdx#2025-04-17_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useEffect } from '@lynx-js/react';\n\nfunction App() {\n  useEffect(() => console.log('Effect 是后台专属的'));\n  return (\n    <view bindtap={(e) => console.log('事件处理是后台专属的')}>\n      <text ref={(ref) => console.log('Ref 是后台专属的')}>\n        Hello, ReactLynx!\n      </text>\n    </view>\n  );\n}\n\nfunction backgroundOnly() {\n  'background only';\n  console.log('指令标记的函数是后台专属的');\n}\n```\n\n----------------------------------------\n\nTITLE: Defining flex-shrink values in CSS\nDESCRIPTION: Examples of setting flex-shrink property values using CSS. It shows how to set numeric values for the shrink factor of flex items.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/css/properties/flex-shrink.mdx#2025-04-17_snippet_0\n\nLANGUAGE: css\nCODE:\n```\n/* <number> values */\nflex-shrink: 2;\nflex-shrink: 0;\n```\n\n----------------------------------------\n\nTITLE: Defining useInitDataChanged React Hook in TypeScript\nDESCRIPTION: This snippet defines the useInitDataChanged function, a React Hook that takes a callback function as a parameter. The callback is called when the initData changes, providing access to the updated data.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/api/react/Function.useInitDataChanged.mdx#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction useInitDataChanged(callback: (data: InitData) => void): void\n```\n\n----------------------------------------\n\nTITLE: Importing Root from ReactLynx in TypeScript\nDESCRIPTION: Demonstrates how to import the 'root' variable from the @lynx-js/react package for use in a ReactLynx application.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/react/Variable.root.mdx#2025-04-17_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { root } from \"@lynx-js/react\"\n```\n\n----------------------------------------\n\nTITLE: Enabling CSS modules for all CSS files in RSpeedy\nDESCRIPTION: Example demonstrating how to enable CSS modules for all CSS files by setting the auto property to a function that always returns true.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/api/rspeedy/rspeedy.output.cssmodules.md#2025-04-17_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineConfig } from '@lynx-js/rspeedy'\nexport default defineConfig({\n  output: {\n    cssModules: {\n      auto: () => true,\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing render Method in React Component Class\nDESCRIPTION: Type definition for the render method that returns React elements to be rendered to the DOM. This is the only required method in a class component.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/api/react/Class.Component.mdx#2025-04-17_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nrender(): ReactNode\n```\n\n----------------------------------------\n\nTITLE: Bridging Header for Swift Implementation\nDESCRIPTION: Bridging header file to import Objective-C LynxModule header into Swift code.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/guide/custom-native-modules/native-module-ios.mdx#2025-04-17_snippet_2\n\nLANGUAGE: objective-c\nCODE:\n```\n//\n//  Use this file to import your target's public headers that you would like to expose to Swift.\n//\n\n#import <Lynx/LynxModule.h>\n```\n\n----------------------------------------\n\nTITLE: Basic Border-Color Syntax Examples in CSS\nDESCRIPTION: Shows various ways to use the border-color property in CSS, including single color, two-color, three-color, and four-color syntax examples.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/css/properties/border-color.mdx#2025-04-17_snippet_0\n\nLANGUAGE: css\nCODE:\n```\n/* border-color: color; */\nborder-color: red;\n\n/* border-color: vertical horizontal; */\nborder-color: red #f015ca;\n\n/* border-color: top horizontal bottom; */\nborder-color: red yellow green;\n\n/* border-color: top right bottom left; */\nborder-color: red yellow green blue;\n```\n\n----------------------------------------\n\nTITLE: CSS Syntax Examples for padding-inline-end Property\nDESCRIPTION: Examples showing different ways to use the padding-inline-end property with length and percentage values. These examples demonstrate fixed length values in different units as well as percentage-based padding.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/css/properties/padding-inline-end.mdx#2025-04-17_snippet_0\n\nLANGUAGE: css\nCODE:\n```\n/* <length> values */\npadding-inline-end: 0.5em;\npadding-inline-end: 0px;\npadding-inline-end: 2rpx;\n\n/* <percentage> value */\npadding-inline-end: 10%;\n```\n\n----------------------------------------\n\nTITLE: Redirecting React Package Import to @lynx-js/react\nDESCRIPTION: Example of using alias to redirect all imports of 'react' to '@lynx-js/react'. This enables using third-party libraries that depend on React in ReactLynx projects.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/api/rspeedy/rspeedy.source.alias.md#2025-04-17_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineConfig } from '@lynx-js/rspeedy'\nimport { createRequire } from 'module'\nconst require = createRequire(import.meta.url)\nexport default defineConfig({\n  source: {\n    alias: {\n      react: require.resolve('@lynx-js/react'),\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Importing and Using CSS Modules in React Component\nDESCRIPTION: Example of importing a CSS Module into a React component using the default import syntax. The styles.red class is applied to a view component.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/rspeedy/styling.mdx#2025-04-17_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport styles from './button.module.css';\n\nexport function Button() {\n  return (\n    <view className={styles.red}>\n      <text>Button</text>\n    </view>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Snap Event Handler for Pagination\nDESCRIPTION: TypeScript definition for the snap event handler which is triggered when pagination scrolling is about to occur, providing information about target position and scroll offsets.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/api/elements/built-in/list.mdx#2025-04-17_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nbindsnap?: EventHandler<ListSnapEvent>;\n\ninterface ListSnapEvent extends common.BaseEvent<'snap', {}> {\n  detail: {\n    // 将会分页滚动到的节点索引\n    position: number;\n    // 当前横向滚动偏移量，单位 px\n    currentScrollLeft: number;\n    // 当前纵向滚动偏移量，单位 px\n    currentScrollTop: number;\n    // 分页滚动的目标横向滚动偏移量，单位 px\n    targetScrollLeft: number;\n    // 分页滚动的目标纵向滚动偏移量，单位 px\n    targetScrollTop: number;\n  };\n};\n```\n\n----------------------------------------\n\nTITLE: createElement for Class Components in TypeScript\nDESCRIPTION: This overload of createElement is for creating elements from class components. It accepts a ClassType, props with ClassAttributes, and optional children nodes.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/api/react/Function.createElement.mdx#2025-04-17_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nfunction createElement<P, T, C>(\n   type: ClassType<P, T, C>,\n   props?: null | ClassAttributes<T> & P, ...\nchildren?: ReactNode[]): CElement<P, T>\n```\n\n----------------------------------------\n\nTITLE: createElement for Class Components\nDESCRIPTION: Type definition for creating React elements from class components with props and class attributes.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/react/Function.createElement.mdx#2025-04-17_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nfunction createElement<P, T, C>(\n   type: ClassType<P, T, C>,\n   props?: null | ClassAttributes<T> & P, ...\nchildren?: ReactNode[]): CElement<P, T>\n```\n\n----------------------------------------\n\nTITLE: Implementing LynxExplorerInput Custom Component in Kotlin\nDESCRIPTION: This snippet demonstrates the Kotlin implementation of a custom EditText component with focus method. It uses Kotlin language features like apply functions and provides the same focus functionality and event handling as the Java version.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/guide/custom-native-component/custom-component-android.mdx#2025-04-17_snippet_11\n\nLANGUAGE: kotlin\nCODE:\n```\nimport android.content.Context\nimport android.text.Editable\nimport android.text.TextWatcher\nimport android.view.inputmethod.InputMethodManager\nimport androidx.appcompat.widget.AppCompatEditText\nimport com.lynx.react.bridge.Callback\nimport com.lynx.react.bridge.ReadableMap\nimport com.lynx.tasm.behavior.LynxContext\nimport com.lynx.tasm.behavior.LynxProp\nimport com.lynx.tasm.behavior.LynxUIMethod\nimport com.lynx.tasm.behavior.LynxUIMethodConstants\nimport com.lynx.tasm.behavior.ui.LynxUI\nimport com.lynx.tasm.event.LynxCustomEvent\n\n\nclass LynxExplorerInput(context: LynxContext) : LynxUI<AppCompatEditText>(context) {\n\n  private fun showSoftInput(): Boolean {\n    val imm = lynxContext.getSystemService(Context.INPUT_METHOD_SERVICE) as InputMethodManager\n    return imm.showSoftInput(mView, InputMethodManager.SHOW_IMPLICIT, null)\n  }\n\n  @LynxUIMethod\n  fun focus(params: ReadableMap, callback: Callback) {\n    if (mView.requestFocus()) {\n      if (showSoftInput()) {\n        callback.invoke(LynxUIMethodConstants.SUCCESS)\n      } else {\n        callback.invoke(LynxUIMethodConstants.UNKNOWN, \"fail to show keyboard\")\n      }\n    } else {\n      callback.invoke(LynxUIMethodConstants.UNKNOWN, \"fail to focus\")\n    }\n  }\n\n  override fun createView(context: Context): AppCompatEditText {\n    return AppCompatEditText(context).apply {\n      addTextChangedListener(object : TextWatcher {\n        override fun beforeTextChanged(s: CharSequence?, start: Int, count: Int, after: Int) {}\n\n        override fun onTextChanged(s: CharSequence?, start: Int, before: Int, count: Int) {}\n\n        override fun afterTextChanged(s: Editable?) {\n          emitEvent(\"input\", mapOf(\"value\" to (s?.toString() ?: \"\")))\n        }\n      })\n    }\n  }\n\n  private fun emitEvent(name: String, value: Map<String, Any>?) {\n    val detail = LynxCustomEvent(sign, name)\n    value?.forEach { (key, v) ->\n      detail.addDetail(key, v)\n    }\n    lynxContext.eventEmitter.sendCustomEvent(detail)\n  }\n\n  override fun onLayoutUpdated() {\n    super.onLayoutUpdated()\n    val paddingTop = mPaddingTop + mBorderTopWidth\n    val paddingBottom = mPaddingBottom + mBorderBottomWidth\n    val paddingLeft = mPaddingLeft + mBorderLeftWidth\n    val paddingRight = mPaddingRight + mBorderRightWidth\n    mView.setPadding(paddingLeft, paddingTop, paddingRight, paddingBottom)\n  }\n\n  @LynxProp(name = \"value\")\n  fun setValue(value: String) {\n    if (value != mView.text.toString()) {\n      mView.setText(value)\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing the layoutStart Property in PipelineEntry (TypeScript)\nDESCRIPTION: The layoutStart property provides the timestamp for the start of layout calculations as a floating-point Unix timestamp in milliseconds.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/lynx-api/performance-api/performance-entry/pipeline-entry.mdx#2025-04-17_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nlayoutStart: number;\n```\n\n----------------------------------------\n\nTITLE: Setting Basic border-top in CSS\nDESCRIPTION: Demonstrates how to set a basic border-top property in CSS. This example shows the shorthand syntax for setting the top border of an element.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/css/properties/border-top.mdx#2025-04-17_snippet_0\n\nLANGUAGE: css\nCODE:\n```\n.border {\n  border-top: 1px;\n}\n```\n\n----------------------------------------\n\nTITLE: Using __ReplaceElement in Lynx Framework (JSX)\nDESCRIPTION: Example showing how to replace an Element node in the Lynx frontend framework. It demonstrates creating elements, appending a child to a parent, and then replacing that child with a new element.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/engine/element-api/__ReplaceElement.mdx#2025-04-17_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n// main-thread.js\nlet newChild = __CreateElement('view', 0, {});\n\nlet oldChild = __CreateElement('view', 0, {});\n\nlet parent = __CreateElement('view', 0, {});\n\n__AppendElement(parent, oldChild);\n\n__ReplaceElement(newChild, oldChild);\n```\n\n----------------------------------------\n\nTITLE: Implementing LynxServiceLogProtocol in iOS\nDESCRIPTION: Header file defining a custom log service implementation that conforms to LynxServiceLogProtocol interface in iOS.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/lynx-native-api/lynx-service.mdx#2025-04-17_snippet_0\n\nLANGUAGE: objective-c\nCODE:\n```\n#import <Lynx/LynxService.h>\n#import <Lynx/LynxServiceLogProtocol.h>\n\n// Implement LynxServiceLogProtocol\n@interface YourLogService : NSObject <LynxServiceLogProtocol>\n@end\n```\n\n----------------------------------------\n\nTITLE: Displaying Text with Text Element in Lynx\nDESCRIPTION: A basic example showing how to display text content using the <text> element tag in Lynx.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/guide/ui/elements-components.mdx#2025-04-17_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<text>Hello Lynx</text>\n```\n\n----------------------------------------\n\nTITLE: Configuring Multi-Environment Entries\nDESCRIPTION: Example showing how to configure different entry points for Lynx and Web environments using RSpeedy config.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/rspeedy/rspeedy.config.environments.md#2025-04-17_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineConfig } from '@lynx-js/rspeedy'\n\nexport default defineConfig({\n  environments: {\n    lynx: {},\n    web: {\n      source: { entry: { web: './src/index.web.jsx' } },\n    },\n  },\n  source: {\n    entry: './src/index.jsx',\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Front-End DSL Event Binding for Input Element in JSX\nDESCRIPTION: This snippet demonstrates how to bind and handle input events on the front-end using JSX in the Lynx framework. It shows the usage of the 'bindinput' event and state management.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/guide/custom-native-component/custom-component-iOS.mdx#2025-04-17_snippet_8\n\nLANGUAGE: jsx\nCODE:\n```\nconst handleInput = (e) => {\n  const currentValue = e.detail.value.trim();\n  setInputValue(currentValue);\n};\n\n<input className=\"input-box\" bindinput={handleInput} value={inputValue} />;\n```\n\n----------------------------------------\n\nTITLE: Defining patchChangesStart property in FrameworkPipelineTiming interface\nDESCRIPTION: Declares the timestamp property marking when the framework starts applying change information on the main thread, stored as a floating-point Unix timestamp in milliseconds.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/lynx-api/performance-api/framework-pipeline-timing.mdx#2025-04-17_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\npatchChangesStart: number;\n```\n\n----------------------------------------\n\nTITLE: CSS background-repeat Property Syntax Examples\nDESCRIPTION: Examples of different values for the background-repeat CSS property, showing single and combined value syntax options for controlling background image repetition.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/css/properties/background-repeat.mdx#2025-04-17_snippet_0\n\nLANGUAGE: css\nCODE:\n```\nbackground-repeat: repeat-x;\nbackground-repeat: repeat-y;\nbackground-repeat: repeat;\nbackground-repeat: space;\nbackground-repeat: round;\nbackground-repeat: no-repeat;\n\nbackground-repeat: repeat space;\nbackground-repeat: repeat repeat;\nbackground-repeat: round space;\nbackground-repeat: no-repeat round;\n```\n\n----------------------------------------\n\nTITLE: Setting Context Type for React Component in TypeScript\nDESCRIPTION: Demonstrates how to set and use contextType for a React component class.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/react/Class.Component.mdx#2025-04-17_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nstatic contextType = MyContext\n// For TS pre-3.7:\ncontext!: React.ContextType<typeof MyContext>\n// For TS 3.7 and above:\ndeclare context: React.ContextType<typeof MyContext>\n```\n\n----------------------------------------\n\nTITLE: Implementing Sticky Positioning for List Items\nDESCRIPTION: Code example demonstrating how to implement sticky positioning (top or bottom) for list items by configuring the list component with sticky support and setting appropriate properties on list items.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/api/elements/built-in/list.mdx#2025-04-17_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\n<list\n  className=\"list-container\"\n  sticky={true}\n  sticky-offset={50}\n  list-type=\"single\"\n  span-count={1}\n  scroll-orientation=\"vertical\"\n>\n```\n\nLANGUAGE: tsx\nCODE:\n```\n<list-item\n  className=\"sticky-top-item\"\n  full-span={true}\n  sticky-top={true}\n  item-key={`list-item-${index}`}\n  key={`list-item-${index}`}\n/>\n```\n\n----------------------------------------\n\nTITLE: Basic CSS border-top-left-radius Examples\nDESCRIPTION: Examples showing different ways to use the border-top-left-radius property, including circular corners with pixels, percentage values, and elliptical corners with different horizontal and vertical radii.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/css/properties/border-top-left-radius.mdx#2025-04-17_snippet_0\n\nLANGUAGE: css\nCODE:\n```\n/* the corner is a circle */\n/* border-top-left-radius: radius */\nborder-top-left-radius: 3px;\n\n/* Percentage values */\n\n/* circle if box is a square or ellipse if box is a rectangle */\nborder-top-left-radius: 20%;\n\n/* same as above: 20% of horizontal(width) and vertical(height) */\nborder-top-left-radius: 20% 20%;\n\n/* 20% of horizontal(width) and 10% of vertical(height) */\nborder-top-left-radius: 20% 10%;\n\n/* the corner is an ellipse */\n/* border-top-left-radius: horizontal vertical */\nborder-top-left-radius: 0.5em 1em;\n```\n\n----------------------------------------\n\nTITLE: Registering and Removing Event Listeners with BeforePublishEvent in TSX\nDESCRIPTION: This snippet demonstrates how to use the BeforePublishEvent class to register and remove event listeners for element events. It shows adding a listener for the 'tap' event and then removing it.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/lynx-api/lynx/lynx-before-publish-event.mdx#2025-04-17_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n//Register to listen for the tap event\nlynx.beforePublishEvent.add('tap', this.handleTap);\n\n//Remove monitoring of tap event\nlynx.beforePublishEvent.remove('tap', this.handleTap);\n```\n\n----------------------------------------\n\nTITLE: CSS Animation Timing Function Formal Syntax\nDESCRIPTION: Shows the formal syntax definition for the animation-timing-function property, including its default value and available options.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/css/properties/animation-timing-function.mdx#2025-04-17_snippet_1\n\nLANGUAGE: css\nCODE:\n```\n/*default value: linear*/\nanimation-timing-function: linear | ease | ease-in | ease-out | ease-in-out |\n  <timing-function>;\n```\n\n----------------------------------------\n\nTITLE: Configuring Tailwind CSS with Lynx Preset in JavaScript\nDESCRIPTION: This snippet shows how to set up the tailwind.config.js file to use the @lynx-js/tailwind-preset. It imports the preset and adds it to the configuration, ensuring compatibility with Lynx-specific features and limitations.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/rspeedy/styling.mdx#2025-04-17_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nimport preset from '@lynx-js/tailwind-preset';\n\nexport default {\n  presets: [preset],\n};\n```\n\n----------------------------------------\n\nTITLE: Function Standard Syntax: Matrix Functions in CSS\nDESCRIPTION: Syntax specifications for matrix and matrix3d transform functions used for complex transformations.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/css/properties/transform.mdx#2025-04-17_snippet_5\n\nLANGUAGE: scss\nCODE:\n```\nmatrix(a, b, c, d, tx, ty)\n```\n\nLANGUAGE: scss\nCODE:\n```\nmatrix3d(a1, b1, c1, d1, a2, b2, c2, d2, a3, b3, c3, d3, a4, b4, c4, d4);\n```\n\n----------------------------------------\n\nTITLE: Broadcasting Global Events in iOS using Objective-C\nDESCRIPTION: This snippet demonstrates how to send global events in iOS using the LynxContext or LynxView classes. It shows two methods to broadcast events with parameters to the front-end.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/guide/interaction/event-handling/event-propagation.mdx#2025-04-17_snippet_5\n\nLANGUAGE: objective-c\nCODE:\n```\n// You can call the sendGlobalEvent function of LynxContext\n// The first parameter is the event name monitored by the front end, and the second parameter is the data received by the front end\n[LynxContext sendGlobalEvent:@\"eventName\" withParams:args];\n// Or call the sendGlobalEvent function of LynxView\n[LynxView sendGlobalEvent:@\"eventName\" withParams:args];\n```\n\n----------------------------------------\n\nTITLE: Using fields() Method Example\nDESCRIPTION: JavaScript example showing how to use the fields() method to query specific node attributes including id, dataset, and tag. The example demonstrates creating a selector query and executing it with a callback.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/lynx-api/nodes-ref/nodes-ref-fields.mdx#2025-04-17_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nlynx\n  .createSelectorQuery()\n  .select('#id')\n  .fields(\n    {\n      id: true,\n      dataset: true,\n      tag: true,\n    },\n    (data, status) => {\n      console.log(data, status);\n    },\n  )\n  .exec();\n```\n\n----------------------------------------\n\nTITLE: JSX Implementation of text-shadow Documentation Page\nDESCRIPTION: The JSX code showing the implementation of the documentation page for the text-shadow property, including examples, property definition, and compatibility tables.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/css/properties/text-shadow.mdx#2025-04-17_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Go } from '@lynx';\n\n<Go\n  example=\"css-api\"\n  defaultFile=\"src/text-shadow/App.tsx\"\n  img=\"https://lf-lynx.tiktok-cdns.com/obj/lynx-artifacts-oss-sg/lynx-website/assets/doc/css/text-shadow.jpg\"\n  entry=\"src/text-shadow\"\n  defaultEntryFile=\"dist/text-shadow.lynx.bundle\"\n/>\n```\n\nLANGUAGE: jsx\nCODE:\n```\nimport { PropertyDefinition } from '@/components/PropertyDefinition';\n\n<PropertyDefinition\n  initialValue={<>empty value</>}\n  appliesTo={<>text</>}\n  inherited=\"yes\"\n  animatable=\"no\"\n/>\n```\n\nLANGUAGE: jsx\nCODE:\n```\nimport { LegacyCompatTable } from '@lynx';\n\n<LegacyCompatTable metadata=\"css/properties/text-shadow\" />\n```\n\n----------------------------------------\n\nTITLE: Defining LynxView Size Constraint Modes in Objective-C\nDESCRIPTION: This enumeration defines the possible size constraint modes for LynxView. It includes Undefined (size determined by content), Exact (fixed size), and Max (maximum width or height).\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/guide/embed-lynx-to-native/embed-lynx-to-native-mode-iOS.mdx#2025-04-17_snippet_0\n\nLANGUAGE: objective-c\nCODE:\n```\ntypedef NS_ENUM(NSInteger, LynxViewSizeMode) {\n  LynxViewSizeModeUndefined = 0,\n  LynxViewSizeModeExact,\n  LynxViewSizeModeMax\n};\n```\n\n----------------------------------------\n\nTITLE: Defining withInitDataInState HOC in TypeScript\nDESCRIPTION: This Higher-Order Component injects initData into the state of a given class component. It adds a listener for data changes and manages the component lifecycle.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/react/Function.withInitDataInState.mdx#2025-04-17_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nfunction withInitDataInState<P, S>(App: ComponentClass<P, S>): ComponentClass<P, S>\n```\n\n----------------------------------------\n\nTITLE: Using path() Method with SelectorQuery in JavaScript\nDESCRIPTION: Example demonstrating how to use the path() method with a SelectorQuery to retrieve the path information from a selected element to the root node.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/lynx-api/nodes-ref/nodes-ref-path.mdx#2025-04-17_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nlynx\n  .createSelectorQuery()\n  .select('#target')\n  .path((res, status) => {\n    console.log(JSON.stringify(res));\n    console.log(JSON.stringify(status));\n  })\n  .exec();\n```\n\n----------------------------------------\n\nTITLE: Displaying Production Build Directory Structure\nDESCRIPTION: Shows the default directory structure of output files in production mode, including bundle files, async bundles, and static assets.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/rspeedy/output.md#2025-04-17_snippet_0\n\nLANGUAGE: tree\nCODE:\n```\ndist/\n├── [name].lynx.bundle\n├── async\n│   └── [name].lynx.bundle\n└── static\n    ├── image\n    │   └── [name].[hash].png\n    ├── svg\n    │   └── [name].[hash].svg\n    └── js\n        ├── [id].[hash].js\n        │   └── async\n        │       └── [id].[hash].js\n        └── lib-preact.[hash].js\n```\n\n----------------------------------------\n\nTITLE: UpdateComponentID Usage Example in JavaScript\nDESCRIPTION: Demonstrates practical usage of __UpdateComponentID function by first creating a component and then updating its ID. Shows the typical workflow in main thread context.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/engine/element-api/__UpdateComponentID.mdx#2025-04-17_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// main-thread.js\nlet element = __CreateComponent(0, '1', 1, '', 'name', 'path', {}, {});\n\n__UpdateComponentID(element, '2');\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Input Element in Objective-C\nDESCRIPTION: Implements the custom input element 'LynxExplorerInput' and its associated 'LynxTextField'. Includes methods for handling padding and text positioning within the input field.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/guide/custom-native-component/custom-component-iOS.mdx#2025-04-17_snippet_1\n\nLANGUAGE: objc\nCODE:\n```\n#import \"LynxExplorerInput.h\"\n\n@implementation LynxExplorerInput\n\n//...\n\n@end\n\n\n\n@implementation LynxTextField\n\n- (UIEditingInteractionConfiguration)editingInteractionConfiguration API_AVAILABLE(ios(13.0)) {\n  return UIEditingInteractionConfigurationNone;\n}\n\n- (void)setPadding:(UIEdgeInsets)padding {\n  _padding = padding;\n  [self setNeedsLayout];\n}\n\n- (CGRect)textRectForBounds:(CGRect)bounds {\n  CGFloat x = self.padding.left;\n  CGFloat y = self.padding.top;\n  CGFloat width = bounds.size.width - self.padding.left - self.padding.right;\n  CGFloat height = bounds.size.height - self.padding.top - self.padding.bottom;\n\n  return CGRectMake(x, y, width, height);\n}\n\n- (CGRect)editingRectForBounds:(CGRect)bounds {\n  return [self textRectForBounds:bounds];\n}\n@end\n```\n\n----------------------------------------\n\nTITLE: Radial Gradient Examples in CSS\nDESCRIPTION: Shows four different radial gradient implementations: a basic two-color gradient, a gradient with the closest-side sizing, a circle gradient with complex color stops, and an elliptical gradient with transparency.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/css/data-type/gradient.mdx#2025-04-17_snippet_2\n\nLANGUAGE: css\nCODE:\n```\nradial-gradient(#e66465, #9198e5);\n\nradial-gradient(closest-side, #3f87a6, #ebf8e1, #f69d3c);\n\nradial-gradient(circle at 100%, #333, #333 50%, #eee 75%, #333 75%);\n\nradial-gradient(ellipse at top, #e66465, transparent);\n```\n\n----------------------------------------\n\nTITLE: CSS text-indent Syntax Examples\nDESCRIPTION: Examples showing how to use the text-indent property with length values in pixels and percentage values relative to the containing block width.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/css/properties/text-indent.mdx#2025-04-17_snippet_1\n\nLANGUAGE: css\nCODE:\n```\n/* <length> values */\ntext-indent: 40px;\n\n/* <percentage> value\n   relative to the containing block width */\ntext-indent: 15%;\n```\n\n----------------------------------------\n\nTITLE: Using __MAIN_THREAD__ Macro in Function Component (TypeScript/React)\nDESCRIPTION: Demonstrates the use of the __MAIN_THREAD__ macro in a function component to conditionally execute code in a main thread environment. The example shows how the code is transformed during compilation for both background and main thread environments.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/react/Document.built-in-macros.mdx#2025-04-17_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { noop } from 'lodash-es';\nimport { useEffect } from '@lynx-js/react';\n\nfunction App() {\n  const showToast = !__MAIN_THREAD__\n    ? () => {\n        bridge.call('showToast', {\n          message: t('toast'),\n          icon: 'success',\n        });\n      }\n    : noop;\n\n  useEffect(showToast, []);\n  return <view />;\n}\n```\n\nLANGUAGE: tsx\nCODE:\n```\nfunction App() {\n  const showToast = () => {\n    bridge.call('showToast', {\n      message: t('toast'),\n      icon: 'success',\n    });\n  };\n  useEffect(showToast, []);\n  return createSnapshotInstance(__snapshot_5ab440, null, []);\n}\n```\n\nLANGUAGE: tsx\nCODE:\n```\nfunction App() {\n  const showToast = noop_default;\n\n  useEffect();\n  return createSnapshotInstance(__snapshot_5ab440, null, []);\n}\n```\n\n----------------------------------------\n\nTITLE: React useImperativeHandle Hook Function Signature in TypeScript\nDESCRIPTION: The TypeScript signature for React's useImperativeHandle hook function. It takes a ref, an init function that returns the imperative handle, and an optional dependencies array. This hook customizes what instance value is exposed when using refs.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/api/react/Function.useImperativeHandle.mdx#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction useImperativeHandle<T, R>(\n   ref: undefined | Ref<T>,\n   init: () => R,\n   deps?: DependencyList): void\n```\n\n----------------------------------------\n\nTITLE: Flippable Card Component Implementation\nDESCRIPTION: React component implementing the flippable card UI with front and back views.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/react/payment-details.mdx#2025-04-17_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nexport default function Card({ isFront, isFirstRender }: CardProps) {\n  return (\n    <view className=\"card-content\">\n      <view className={`card-back ${isFront ? 'back' : 'front'}`}>...</view>\n      <view\n        className={`card-front ${!isFirstRender ? (isFront ? 'front' : 'back') : ''}`}\n      >\n        ...\n      </view>\n    </view>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Defining the render Method in TypeScript\nDESCRIPTION: Declaration of the render method used to pass JSX for rendering in a Lynx application. This is the primary method for initiating UI rendering.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/api/react/Interface.Root.mdx#2025-04-17_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nrender: (jsx: ReactNode) => void;\n```\n\n----------------------------------------\n\nTITLE: Formal Syntax for border-bottom-right-radius in CSS\nDESCRIPTION: This snippet shows the formal syntax definition for the border-bottom-right-radius property. It illustrates that the property accepts one or two length-percentage values, which can be either a length or a percentage.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/css/properties/border-bottom-right-radius.mdx#2025-04-17_snippet_1\n\nLANGUAGE: css\nCODE:\n```\nborder-bottom-right-radius = <length-percentage>{1,2}\n<length-percentage> = <length> | <percentage>\n```\n\n----------------------------------------\n\nTITLE: Defining CSS font-weight Property Formal Syntax\nDESCRIPTION: This snippet defines the formal syntax for the font-weight CSS property, showing the allowed values.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/css/properties/font-weight.mdx#2025-04-17_snippet_1\n\nLANGUAGE: css\nCODE:\n```\n<font-weight> = normal | bold | [100, 1000]\n```\n\n----------------------------------------\n\nTITLE: Implementing render Method in React TypeScript\nDESCRIPTION: Required method for rendering the component's UI. It should be a pure function that returns a React element.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/api/react/Class.PureComponent.mdx#2025-04-17_snippet_5\n\nLANGUAGE: TypeScript\nCODE:\n```\nrender(): ReactNode\n```\n\n----------------------------------------\n\nTITLE: Implementing Bundle Loader in Kotlin\nDESCRIPTION: Kotlin implementation of a Bundle Loader that extends AbsTemplateProvider. This loader reads the Bundle content from the application's assets directory and provides it to the Lynx Engine.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/guide/start/fragments/android/integrating-lynx-with-existing-app-android.mdx#2025-04-17_snippet_9\n\nLANGUAGE: kotlin\nCODE:\n```\nimport android.content.Context\nimport com.lynx.tasm.provider.AbsTemplateProvider\nimport java.io.ByteArrayOutputStream\nimport java.io.IOException\n\nclass DemoTemplateProvider(context: Context) : AbsTemplateProvider() {\n\n    private var mContext: Context = context.applicationContext\n\n    override fun loadTemplate(uri: String, callback: Callback) {\n        Thread {\n            try {\n                mContext.assets.open(uri).use { inputStream ->\n                    ByteArrayOutputStream().use { byteArrayOutputStream ->\n                        val buffer = ByteArray(1024)\n                        var length: Int\n                        while ((inputStream.read(buffer).also { length = it }) != -1) {\n                            byteArrayOutputStream.write(buffer, 0, length)\n                        }\n                        callback.onSuccess(byteArrayOutputStream.toByteArray())\n                    }\n                }\n            } catch (e: IOException) {\n                callback.onFailed(e.message)\n            }\n        }.start()\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing TemplateBundle from Template Data in Objective-C\nDESCRIPTION: Initializes a LynxTemplateBundle object from binary template data. Returns an invalid bundle if input is nil or incorrect.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/lynx-native-api/template-bundle.mdx#2025-04-17_snippet_6\n\nLANGUAGE: objective-c\nCODE:\n```\n- (instancetype _Nullable)initWithTemplate:(nonnull NSData*)tem;\n```\n\n----------------------------------------\n\nTITLE: Using CSS Height Property in Lynx Framework\nDESCRIPTION: Examples of how to use the height property in CSS, showing various value types including length values, percentage values, and keyword values.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/api/css/properties/height.mdx#2025-04-17_snippet_0\n\nLANGUAGE: css\nCODE:\n```\n/* <length> values */\nheight: 300px;\nheight: 25em;\n\n/* <percentage> value */\nheight: 75%;\n\n/* Keyword values */\nheight: max-content;\nheight: fit-content;\nheight: fit-content(20em);\nheight: auto;\n```\n\n----------------------------------------\n\nTITLE: Defining SourceMap Interface in TypeScript\nDESCRIPTION: TypeScript interface definition for SourceMap that configures source-map generation. Contains an optional 'js' property that determines how source maps should be generated or disabled.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/rspeedy/rspeedy.sourcemap.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface SourceMap \n```\n\n----------------------------------------\n\nTITLE: Updating Data in Java\nDESCRIPTION: Code snippet showing how to update data for a Lynx template in Android using Java. This demonstrates how to build a LynxUpdateMeta object and use updateMetaData method to refresh the data in the Lynx view.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/guide/use-data-from-host-platform.mdx#2025-04-17_snippet_3\n\nLANGUAGE: java\nCODE:\n```\nLynxUpdateMeta.Builder builder = new LynxUpdateMeta.Builder();\nbuilder.setUpdatedData(__YOUR_DATA__);\nLynxUpdateMeta meta = builder.build();\nlynxView.updateMetaData(meta);\n```\n\n----------------------------------------\n\nTITLE: Using querySelectorAll Method in Lynx API\nDESCRIPTION: This snippet demonstrates how to use lynx.querySelectorAll() to find all elements matching a specified selector. The method returns an array of Element objects or an empty array if no matches are found.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/lynx-api/main-thread/lynx-query-select-all.mdx#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst elementArray = lynx.querySelectorAll(selector);\n```\n\n----------------------------------------\n\nTITLE: Adding TypeScript Declaration for CSS Modules\nDESCRIPTION: Type declaration file setup for CSS Modules in TypeScript to fix module resolution errors. This adds reference to the Rspeedy client types.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/rspeedy/styling.mdx#2025-04-17_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n/// <reference types=\"@lynx-js/rspeedy/client\" />\n```\n\n----------------------------------------\n\nTITLE: Registering Swift NativeLocalStorageModule in Lynx Runtime\nDESCRIPTION: Code snippet for registering the Swift implementation of the NativeLocalStorageModule in the Lynx runtime environment. This requires importing the auto-generated Swift header to make the Swift class accessible from Objective-C.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/guide/custom-native-modules/native-module-ios.mdx#2025-04-17_snippet_5\n\nLANGUAGE: objective-c\nCODE:\n```\n#import \"LynxExplorer-Swift.h\"\n\n- (void)setupLynxEnv {\n    // ...\n\n    // register global JS module\n    [globalConfig registerModule:NativeLocalStorageModule.class];\n\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Presetting Fixed Size for LynxView in Java\nDESCRIPTION: This code snippet demonstrates how to preset a fixed size of 400x200 for a LynxView using LynxViewBuilder. It sets the measured spec for both width and height to EXACTLY 400 and 200 pixels respectively, triggering layout during the rendering pipeline.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/guide/embed-lynx-to-native/embed-lynx-to-native-mode-android.mdx#2025-04-17_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nLynxViewBuilder viewBuilder = new LynxViewBuilder();\nviewBuilder = viewBuilder.setPresetMeasuredSpec(View.MeasureSpec.makeMeasureSpec(400, View.MeasureSpec.EXACTLY),\n        View.MeasureSpec.makeMeasureSpec(200, View.MeasureSpec.EXACTLY));\n\nLynxView lynxview = viewBuilder.build(this);;\n```\n\n----------------------------------------\n\nTITLE: CSS Relative Center Property Usage\nDESCRIPTION: Demonstrates the different values and syntax for the relative-center CSS property. The property can be set to none (default), both (vertical and horizontal centering), vertical only, or horizontal only centering.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/css/properties/relative-center.mdx#2025-04-17_snippet_0\n\nLANGUAGE: css\nCODE:\n```\nrelative-center: none;\nrelative-center: both;\nrelative-center: vertical;\nrelative-center: horizontal;\n```\n\n----------------------------------------\n\nTITLE: JavaScript Element Configuration Implementation\nDESCRIPTION: Example showing how to create and configure an element using __CreateElement and __SetConfig functions in JavaScript.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/engine/element-api/__SetConfig.mdx#2025-04-17_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// main-thread.js\nlet element = __CreateElement('view', 0, {});\n__SetAttribute(element, 'src', 'xx');\n\n__SetConfig(element, { anyConfig: {} });\n```\n\n----------------------------------------\n\nTITLE: Defining CssModules Interface in TypeScript\nDESCRIPTION: TypeScript interface definition for CssModules configuration options. Includes properties for automatic module enabling, global exports, local convention settings, and class name formatting.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/rspeedy/rspeedy.cssmodules.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface CssModules \n```\n\n----------------------------------------\n\nTITLE: Retrieving Tag Selector in JSX\nDESCRIPTION: This snippet demonstrates the syntax for using the __GetTag function to retrieve the tag selector of an Element object. It first creates an element using __CreateElement and then retrieves its tag using __GetTag.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/engine/element-api/__GetTag.mdx#2025-04-17_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nlet element = __CreateElement('view', 0, {});\nlet tag = __GetTag(element);\n```\n\n----------------------------------------\n\nTITLE: List Component with Waterfall Layout\nDESCRIPTION: Example of list component using waterfall layout for complex interface arrangements.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/guide/ui/scrolling.mdx#2025-04-17_snippet_3\n\nLANGUAGE: JSX\nCODE:\n```\n<list \n  scroll-orientation=\"vertical\"\n  layout=\"waterfall\">\n  {/* List content */}\n</list>\n```\n\n----------------------------------------\n\nTITLE: Event Aspect Interface Implementation in Lynx\nDESCRIPTION: Demonstration of using Lynx's event aspect interface to monitor all events of a specific type across an application. This approach allows for centralized event tracking without requiring explicit event binding on each component.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/guide/interaction/event-handling/event-propagation.mdx#2025-04-17_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nlynx.beforePublishEvent(\"tap\", (event) => {\n  setTapsCount(tapsCount + 1);\n  // Must return event to continue event propagation\n  return event;\n});\n```\n\nLANGUAGE: tsx\nCODE:\n```\n<Text>Total tap events: {tapsCount}</Text>\n```\n\n----------------------------------------\n\nTITLE: Defining Component Parameter Type for IntersectionObserver in TypeScript\nDESCRIPTION: The type definition for the component parameter used in the createIntersectionObserver method. It specifies that the parameter must be of type BaseInstance.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/lynx-api/lynx/lynx-create-intersection-observer.mdx#2025-04-17_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ncomponent: BaseInstance;\n```\n\n----------------------------------------\n\nTITLE: Defining requireModuleAsync Function Signature in TypeScript\nDESCRIPTION: This snippet shows the TypeScript function signature for the requireModuleAsync method. It defines the method as taking a string path and a callback function, which receives an error or null and the module exports.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/api/lynx-api/lynx/lynx-require-module-async.mdx#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nrequireModuleAsync<T>(path: string, callback: (error: Error | null, exports?: T) => void): void;\n```\n\n----------------------------------------\n\nTITLE: Implementing componentDidCatch Lifecycle Method in React\nDESCRIPTION: Shows the signature for the componentDidCatch method used for error handling in React components.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/react/Class.Component.mdx#2025-04-17_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\noptional componentDidCatch(error: Error, errorInfo: ErrorInfo): void\n```\n\n----------------------------------------\n\nTITLE: SwapElement Usage Example in JavaScript\nDESCRIPTION: A complete example showing how to create elements, append them to a parent, and then swap their positions using the __SwapElement function in the frontend framework.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/engine/element-api/__SwapElement.mdx#2025-04-17_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// main-thread.js\nlet childA = __CreateElement('view', 0, {});\n\nlet childB = __CreateElement('view', 0, {});\n\nlet parent = __CreateElement('view', 0, {});\n\n__AppendElement(parent, childA);\n__AppendElement(parent, childB);\n\n__SwapElement(childA, childB);\n```\n\n----------------------------------------\n\nTITLE: Initializing Touch Handling for Swiper in TypeScript React\nDESCRIPTION: Sets up touch event handlers to track finger movement and calculate scroll offset for a swiper component.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/guide/start/tutorial-product-detail.mdx#2025-04-17_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nfunction Swiper() {\n  const touchStartXRef = useRef<number>(0);\n\n  function handleTouchStart(e: TouchEvent}) {\n    touchStartXRef.current = e.touches[0].clientX;\n  }\n\n  function handleTouchMove(e: TouchEvent) {\n    const delta = e.touches[0].clientX - touchStartXRef.current;\n  }\n\n  return (\n    <view\n      class=\"swiper-container\"\n      bindtouchstart={handleTouchStart}\n      bindtouchmove={handleTouchMove}\n    >\n      {/* ... */}\n    </view>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Native Storage Module in Swift\nDESCRIPTION: Swift implementation of the NativeLocalStorageModule with UserDefaults storage functionality and required Lynx module methods.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/guide/custom-native-modules/native-module-ios.mdx#2025-04-17_snippet_3\n\nLANGUAGE: swift\nCODE:\n```\nimport Foundation\n\n@objcMembers\npublic final class NativeLocalStorageModule: NSObject, LynxModule {\n\n    @objc public static var name: String {\n        return \"NativeLocalStorageModule\"\n    }\n\n    @objc public static var methodLookup: [String : String] {\n        return [\n            \"setStorageItem\": NSStringFromSelector(#selector(setStorageItem(_:value:))),\n            \"getStorageItem\": NSStringFromSelector(#selector(getStorageItem(_:))),\n            \"clearStorage\": NSStringFromSelector(#selector(clearStorage))\n        ]\n    }\n\n    private let localStorage: UserDefaults\n    private static let storageKey = \"MyLocalStorage\"\n\n    @objc public init(param: Any) {\n      guard let suite = UserDefaults(suiteName: NativeLocalStorageModule.storageKey) else {\n          fatalError(\"Failed to initialize UserDefaults with suiteName: \\(NativeLocalStorageModule.storageKey)\")\n      }\n      localStorage = suite\n      super.init()\n    }\n\n    @objc public override init() {\n        guard let suite = UserDefaults(suiteName: NativeLocalStorageModule.storageKey) else {\n            fatalError(\"Failed to initialize UserDefaults with suiteName: \\(NativeLocalStorageModule.storageKey)\")\n        }\n        localStorage = suite\n        super.init()\n    }\n\n    @objc func setStorageItem(_ key: String, value: String) {\n        localStorage.set(value, forKey: key)\n    }\n\n    @objc func getStorageItem(_ key: String) -> String? {\n        return localStorage.string(forKey: key)\n    }\n\n    @objc func clearStorage() {\n        localStorage.dictionaryRepresentation().keys.forEach {\n            localStorage.removeObject(forKey: $0)\n        }\n    }\n\n}\n```\n\n----------------------------------------\n\nTITLE: Modifying Background Color using setNativeProps in JSX\nDESCRIPTION: This example demonstrates using setNativeProps to change the background color of a view component when its child text is tapped.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/lynx-api/nodes-ref/nodes-ref-set-native-props.mdx#2025-04-17_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nfunction App() {\n  return (\n    <view id=\"intro\">\n      <text\n        bindtap={() => {\n          lynx\n            .createSelectorQuery()\n            .select('#intro')\n            .setNativeProps({\n              'background-color': 'red',\n            })\n            .exec();\n        }}\n      >\n        Hello, World!\n      </text>\n    </view>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Promisifying requireModuleAsync for Modern JavaScript\nDESCRIPTION: Example demonstrating how to wrap the callback-based requireModuleAsync into a Promise-based function for use with async/await syntax.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/lynx-api/lynx/lynx-require-module-async.mdx#2025-04-17_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nconst requireModulePromise = (path) =>\n  new Promise((resolve, reject) => {\n    lynx.requireModuleAsync(path, (err, exports) => {\n      if (err) {\n        return reject(err);\n      }\n      return resolve(exports);\n    });\n  });\n\nawait requireModulePromise('path/to/chunk');\n```\n\n----------------------------------------\n\nTITLE: Promisifying requireModuleAsync in JavaScript\nDESCRIPTION: This snippet shows how to wrap requireModuleAsync in a Promise, allowing for easier use with async/await syntax. It creates a function that returns a Promise resolving with the module exports or rejecting with an error.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/api/lynx-api/lynx/lynx-require-module-async.mdx#2025-04-17_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst requireModulePromise = (path) =>\n  new Promise((resolve, reject) => {\n    lynx.requireModuleAsync(path, (err, exports) => {\n      if (err) {\n        return reject(err);\n      }\n      return resolve(exports);\n    });\n  });\n\nawait requireModulePromise('path/to/chunk');\n```\n\n----------------------------------------\n\nTITLE: Card Flip Animation Styles\nDESCRIPTION: SCSS styles defining the 3D flip animation keyframes and transitions for the card component.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/react/payment-details.mdx#2025-04-17_snippet_3\n\nLANGUAGE: scss\nCODE:\n```\n.front {\n  animation: backToFront 0.5s both;\n}\n\n.back {\n  animation: frontToBack 0.5s both;\n}\n\n@keyframes frontToBack {\n  0% {\n    transform: rotateY(0deg) translateZ(1);\n  }\n\n  100% {\n    transform: rotateY(180deg) translateZ(0);\n  }\n}\n\n@keyframes backToFront {\n  0% {\n    transform: rotateY(-180deg) translateZ(0);\n  }\n\n  100% {\n    transform: rotateY(0deg) translateZ(1);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Android LynxViewBuilder Integration\nDESCRIPTION: Examples showing how to inject LynxMediaResourceFetcher into LynxViewBuilder and enable the generic resource fetcher capability on Android.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/lynx-native-api/resource-fetcher/MediaResourceFetcher.mdx#2025-04-17_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nLynxViewBuilder builder = new LynxViewBuilder();\nbuilder.setMediaResourceFetcher(new MediaTemplateResourceFetcher());\n```\n\nLANGUAGE: java\nCODE:\n```\nLynxViewBuilder builder = new LynxViewBuilder();\nbuilder.setMediaResourceFetcher(new MediaTemplateResourceFetcher());\nbuilder.setEnableGenericResourceFetcher(LynxBooleanOption.TRUE);\n```\n\n----------------------------------------\n\nTITLE: Using Go Component for Interactive Examples\nDESCRIPTION: Shows how to use the Go component for displaying interactive examples with screenshots, QR codes, and code examples. The component can highlight specific sections of code and support multiple file views.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/internal/docs-contribution-guide/doc-components.mdx#2025-04-17_snippet_12\n\nLANGUAGE: tsx\nCODE:\n```\n<Go\n  img=\"https://lf-lynx.tiktok-cdns.com/obj/lynx-artifacts-oss-sg/lynx-website/assets/doc/list_waterfall.webp\"\n  example=\"list\"\n  defaultFile=\"src/waterfall/index.tsx\"\n  defaultEntryFile=\"dist/waterfall.lynx.bundle\"\n  entry=\"src/waterfall\"\n  highlight=\"{10-25}\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Defining selectAll() Method in TypeScript\nDESCRIPTION: TypeScript definition of the selectAll() method in the SelectorQuery class. It takes a CSS selector string as input and returns a NodesRef object.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/api/lynx-api/selector-query/selector-query-select-all.mdx#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nselectAll(selector: string): NodesRef;\n```\n\n----------------------------------------\n\nTITLE: Class Selector in CSS\nDESCRIPTION: Shows how to use class selectors to match elements based on their class attribute\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/css/selectors.mdx#2025-04-17_snippet_1\n\nLANGUAGE: css\nCODE:\n```\n.className { property declarations }\n```\n\nLANGUAGE: css\nCODE:\n```\n.index{\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Key Attribute in TSX\nDESCRIPTION: Demonstrates the required key attribute which helps the framework identify element changes. In list scenarios, key and item-key should remain consistent.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/elements/built-in/list.mdx#2025-04-17_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\n// DefaultValue: null\nkey: string\n\n<list-item\n  item-key=\"item-0\"\n  key=\"item-0\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Direct Element Manipulation in Lynx Framework\nDESCRIPTION: Example of using SelectorQuery API to directly manipulate DOM elements, specifically focusing an input element through imperative API calls.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/guide/custom-native-component/custom-component-android.mdx#2025-04-17_snippet_9\n\nLANGUAGE: jsx\nCODE:\n```\nlynx\n  .createSelectorQuery()\n  .select('#input-id')\n  .invoke({\n    method: 'focus',\n    params: {},\n    success: function (res) {\n      console.log('lynx', 'request focus success');\n    },\n    fail: function (res) {\n      console.log('lynx', 'request focus fail');\n    },\n  })\n  .exec();\n```\n\n----------------------------------------\n\nTITLE: Disabling Minification in Rspeedy Configuration\nDESCRIPTION: An example of how to disable minification in the Rspeedy configuration using JavaScript. It demonstrates setting the 'minify' property to false in the output configuration.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/rspeedy/rspeedy.output.minify.md#2025-04-17_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineConfig } from '@lynx-js/rspeedy'\nexport default defineConfig({\n  output: {\n    minify: false,\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Using __GetAttributes in Lynx Frontend Framework\nDESCRIPTION: Example showing how to create an element, set an attribute, and then retrieve all attributes as a map. The example creates a 'view' element, sets a 'src' attribute, and then calls __GetAttributes to get the complete attribute map.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/engine/element-api/__GetAttributes.mdx#2025-04-17_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n// main-thread.js\nlet element = __CreateElement('view', 0, {});\n__SetAttribute(element, 'src', 'xx');\n\nlet attributeMap = __GetAttributes(element);\n```\n\n----------------------------------------\n\nTITLE: Demonstrating CSS Grid Auto Flow Syntax Options\nDESCRIPTION: Examples of different syntax options for the grid-auto-flow property, showing how to control the flow direction of automatically placed grid items.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/api/css/properties/grid-auto-flow.mdx#2025-04-17_snippet_0\n\nLANGUAGE: css\nCODE:\n```\ngrid-auto-flow: row;\ngrid-auto-flow: column;\ngrid-auto-flow: row dense;\ngrid-auto-flow: column dense;\ngrid-auto-flow: dense;\n```\n\n----------------------------------------\n\nTITLE: Defining libraryName Property in TransformImport Interface (TypeScript)\nDESCRIPTION: This code snippet defines the libraryName property in the TransformImport interface. It specifies the original import path that needs to be transformed. This property is required for the transformation process.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/api/rspeedy/rspeedy.transformimport.libraryname.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nlibraryName: string;\n```\n\n----------------------------------------\n\nTITLE: TypeScript Definition of progressBar Property in RSpeedy Dev Configuration\nDESCRIPTION: The TypeScript signature for the progressBar property in the Dev object. It can be a boolean to enable/disable or an object with an optional id property to customize the display text.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/api/rspeedy/rspeedy.dev.progressbar.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nprogressBar?: boolean | {\n        id?: string;\n    } | undefined;\n```\n\n----------------------------------------\n\nTITLE: Implementing componentDidMount Lifecycle Method in React\nDESCRIPTION: Demonstrates the signature for the componentDidMount method called after a component is mounted.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/react/Class.Component.mdx#2025-04-17_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\noptional componentDidMount(): void\n```\n\n----------------------------------------\n\nTITLE: Setting Observer Frame Rate Method Signature\nDESCRIPTION: TypeScript method signature for setObserverFrameRate(), which controls exposure detection frequency settings.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/lynx-api/lynx/lynx-set-observer-frame-rate.mdx#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nsetObserverFrameRate(options?: Options): void;\n```\n\n----------------------------------------\n\nTITLE: Finding UI Elements by ID in iOS\nDESCRIPTION: iOS implementation for finding LynxUI nodes using an ID selector. Returns an optional LynxUI pointer based on the provided ID string that matches the front-end layout specification.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/lynx-native-api/lynx-view/find-ui-by-idselector.mdx#2025-04-17_snippet_1\n\nLANGUAGE: objc\nCODE:\n```\n- (nullable LynxUI*)uiWithIdSelector:(nonnull NSString*)idSelector;\n```\n\n----------------------------------------\n\nTITLE: Scrolling by Offset in Lynx List Component (TSX)\nDESCRIPTION: This code snippet shows how to use the scrollBy method to scroll a <list> component by a specified offset. It returns information about the consumed and unconsumed scroll distances in both horizontal and vertical directions.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/elements/built-in/list.mdx#2025-04-17_snippet_33\n\nLANGUAGE: tsx\nCODE:\n```\nlynx\n  .createSelectorQuery()\n  .select('#id_of_list')\n  .invoke({\n    method: 'scrollBy',\n    params: {\n      offset: number,\n    },\n    success(res) {\n      console.log('succ ');\n    },\n    fail(res) {\n      console.log('err ');\n    },\n  })\n  .exec();\n```\n\n----------------------------------------\n\nTITLE: Using Main Thread Ref with View Component\nDESCRIPTION: Shows how to pass a main thread reference to a view component using the main-thread:ref attribute.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/guide/start/tutorial-product-detail.mdx#2025-04-17_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\n<view main-thread:ref={swiperContainerRef}>{/* ... */}</view>\n```\n\n----------------------------------------\n\nTITLE: JavaScript Configuration Example for BundlerChain\nDESCRIPTION: Example showing how to use bundlerChain in a rspeedy configuration file to modify Rspack options. This example demonstrates setting the fullySpecified resolve option to true.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/rspeedy/rspeedy.tools.bundlerchain.md#2025-04-17_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineConfig } from '@lynx-js/rspeedy'\n\nexport default defineConfig({\n  tools: {\n    bundlerChain(chain) {\n      chain.resolve.fullySpecified(true)\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Applying Theme Styles in React Component using Descendant Selectors\nDESCRIPTION: React component structure demonstrating how to apply theme styles using CSS descendant selectors. The parent view has a theme class, while child elements use the 'content' class.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/guide/styling/custom-theming.mdx#2025-04-17_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nfunction App() {\n  return (\n    <view className=\"theme-dark\">\n      <view>\n        <text className=\"content\">text</text>\n      </view>\n    </view>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Adding LynxView Lifecycle Client in iOS\nDESCRIPTION: Objective-C method for registering a LynxViewLifecycle protocol implementation to observe lifecycle events in iOS. The lifecycle client receives callbacks during different stages of the LynxView lifecycle.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/lynx-native-api/lynx-view/add-lynx-view-client.mdx#2025-04-17_snippet_1\n\nLANGUAGE: objc\nCODE:\n```\n- (void)addLifecycleClient:(nonnull id<LynxViewLifecycle>)lifecycleClient;\n```\n\n----------------------------------------\n\nTITLE: Using SetCSSId in a Frontend Framework\nDESCRIPTION: Example of how to use the __SetCSSId function in a frontend context. First creates an element using __CreateElement and then assigns it a CSS ID of 0.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/engine/element-api/__SetCSSId.mdx#2025-04-17_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// main-thread.js\nlet element = __CreateElement('view', 0, {});\n__SetCSSId(element, 0);\n```\n\n----------------------------------------\n\nTITLE: Defining CSS line-height Formal Syntax\nDESCRIPTION: This code block defines the formal syntax for the CSS line-height property, showing the possible values it can accept.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/css/properties/line-height.mdx#2025-04-17_snippet_1\n\nLANGUAGE: css\nCODE:\n```\nnormal | <length> | <number>\n```\n\n----------------------------------------\n\nTITLE: Integrating Components in the Parent Component\nDESCRIPTION: Demonstrates the parent component that connects the Card and BankCardScrollView components through state management, with a handleCardSelect function that updates the selected card state when notified by the scroll view.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/react/payment-details.mdx#2025-04-17_snippet_11\n\nLANGUAGE: tsx\nCODE:\n```\nfunction BankCards() {\n  const [selectedCard, setSelectedCard] = useState<BankCard>({\n    type: 'visa',\n    number: '4558 **** **** 6767',\n    name: 'Alex Quentin',\n  });\n\n  const [isFront, setIsFront] = useState(true);\n  const [isFirstRender, setIsFirstRender] = useState(true);\n\n  const handleCardSelect = (card: BankCard) => {\n    setSelectedCard(card);\n    setIsFront(true);\n  };\n\n  const handlePayNow = () => {\n    if (isFirstRender) {\n      setIsFirstRender(false);\n    }\n    setIsFront(!isFront);\n  };\n\n  return (\n    <view class=\"page\">\n      <Card\n        selectedCard={selectedCard}\n        isFront={isFront}\n        isFirstRender={isFirstRender}\n      />\n      <BankCardScrollView onCardSelect={handleCardSelect} />\n      <BottomNode onPayNow={handlePayNow} />\n    </view>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Registering and Retrieving a Shared Object in JavaScript\nDESCRIPTION: This example demonstrates how to register a module using lynx.registerModule and then retrieve it using lynx.getJSModule. It shows that the retrieved object is the same as the registered one.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/api/lynx-api/lynx/lynx-get-js-module.mdx#2025-04-17_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst fooModule = {};\nlynx.registerModule('foo', fooModule);\nlynx.getJSModule('foo') === fooModule; // true\n```\n\n----------------------------------------\n\nTITLE: CSS top Property Syntax Examples\nDESCRIPTION: Shows various ways to use the top CSS property with different value types including length units, percentages, keywords, and calculations.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/css/properties/top.mdx#2025-04-17_snippet_0\n\nLANGUAGE: css\nCODE:\n```\n/* <length> values */\ntop: 3px;\ntop: 2rpx;\ntop: 2.4em;\ntop: 3rem;\n\ntop: 10%;\n\n/* Keyword value */\ntop: auto;\n\n/* calc */\ntop: calc(1px + 1px);\n```\n\n----------------------------------------\n\nTITLE: Defining LoadConfigResult Interface in TypeScript\nDESCRIPTION: This code snippet defines the LoadConfigResult interface, which contains two properties: configPath and content. The interface is used to represent the result of the loadConfig() function.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/rspeedy/rspeedy.loadconfigresult.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface LoadConfigResult \n{\n  configPath: string;\n  content: Config;\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Element Attributes with setAttribute() in TypeScript\nDESCRIPTION: Sets the value of a specified attribute on an element.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/lynx-api/main-thread/main-thread-element.mdx#2025-04-17_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nelement.setAttribute(attrName, value);\n```\n\n----------------------------------------\n\nTITLE: Constructing Basic LynxView in Objective-C\nDESCRIPTION: Creates and configures a basic LynxView instance using Objective-C. It initializes the view with a configuration provider, screen size, and font scale, then sets layout properties for proper rendering.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/guide/start/fragments/ios/integrating-lynx-with-existing-app-ios.mdx#2025-04-17_snippet_6\n\nLANGUAGE: objective-c\nCODE:\n```\n#import <Lynx/LynxView.h>\n\n#import \"ViewController.h\"\n#import \"DemoLynxProvider.h\"\n\n@implementation ViewController\n\n- (void)viewDidLoad {\n    [super viewDidLoad];\n    LynxView *lynxView = [[LynxView alloc] initWithBuilderBlock:^(LynxViewBuilder *builder) {\n      builder.config = [[LynxConfig alloc] initWithProvider:[[DemoLynxProvider alloc] init]];\n      builder.screenSize = self.view.frame.size;\n      builder.fontScale = 1.0;\n    }];\n    lynxView.preferredLayoutWidth = self.view.frame.size.width;\n    lynxView.preferredLayoutHeight = self.view.frame.size.height;\n    lynxView.layoutWidthMode = LynxViewSizeModeExact;\n    lynxView.layoutHeightMode = LynxViewSizeModeExact;\n}\n@end\n```\n\n----------------------------------------\n\nTITLE: Using relative-inline-end-of CSS Property in Lynx\nDESCRIPTION: Examples of using the 'relative-inline-end-of' CSS property in Lynx framework. This property positions an element to the left or right of a sibling element based on the specified ID and the current direction.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/css/properties/relative-inline-end-of.mdx#2025-04-17_snippet_0\n\nLANGUAGE: css\nCODE:\n```\nrelative-inline-end-of: none;\nrelative-inline-end-of: 1;\nrelative-inline-end-of: 2;\n```\n\n----------------------------------------\n\nTITLE: Defining Content Property Type in TypeScript\nDESCRIPTION: Typescript type definition for the content property that holds the validated configuration object exported from the configuration file.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/rspeedy/rspeedy.loadconfigresult.content.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ncontent: Config;\n```\n\n----------------------------------------\n\nTITLE: Adding LynxView Client in Android\nDESCRIPTION: Java method for registering a LynxViewClient to observe lifecycle events in Android. The client implements callbacks that will be triggered during various stages of the LynxView lifecycle.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/lynx-native-api/lynx-view/add-lynx-view-client.mdx#2025-04-17_snippet_0\n\nLANGUAGE: java\nCODE:\n```\npublic void addLynxViewClient(LynxViewClient client);\n```\n\n----------------------------------------\n\nTITLE: Adding Lynx DevTool Dependencies for Android (Groovy)\nDESCRIPTION: This code snippet demonstrates how to add the required dependencies for Lynx DevTool in an Android project's build.gradle file using Groovy syntax.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/guide/start/integrate-lynx-devtool.mdx#2025-04-17_snippet_3\n\nLANGUAGE: groovy\nCODE:\n```\n// Lynx DevTool 接入时请保证和 Lynx 相同版本\ndependencies {\n  implementation \"org.lynxsdk.lynx:lynx-devtool:3.2.0-rc.0\"\n  implementation \"org.lynxsdk.lynx:lynx-service-devtool:3.2.0-rc.0\"\n}\n```\n\n----------------------------------------\n\nTITLE: Border Top Width Formal Syntax Definition\nDESCRIPTION: The formal CSS syntax definition for the border-top-width property, showing the accepted values and structure.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/css/properties/border-top-width.mdx#2025-04-17_snippet_1\n\nLANGUAGE: css\nCODE:\n```\nborder-top-width =\n  <line-width>\n\n<line-width> =\n  <length [0,∞]>  |\n  thin            |\n  medium          |\n  thick\n```\n\n----------------------------------------\n\nTITLE: Implementing Deprecated UNSAFE_componentWillUpdate in React Component Class\nDESCRIPTION: Type definition for the deprecated UNSAFE_componentWillUpdate lifecycle method that was called before rendering when new props or state were received. It's recommended to use getSnapshotBeforeUpdate instead.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/api/react/Class.Component.mdx#2025-04-17_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\noptional UNSAFE_componentWillUpdate(\n   nextProps: Readonly<P>,\n   nextState: Readonly<S>,\n   nextContext: any): void\n```\n\n----------------------------------------\n\nTITLE: Multiple Named Entries Configuration\nDESCRIPTION: Illustrates configuration of multiple named entry points, including an entry with multiple modules.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/rspeedy/rspeedy.entry.md#2025-04-17_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineConfig } from '@lynx-js/rspeedy'\nexport default defineConfig({\n  entry: {\n    foo: './src/pages/foo/index.js',\n    bar: ['./src/pages/bar/index.js', './src/post.js'], // multiple entry modules is allowed\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Styling Text Size and Style in Lynx\nDESCRIPTION: Shows how to change text size and apply italic styling to text elements in Lynx using fontSize and fontStyle properties.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/guide/styling/text-and-typography.mdx#2025-04-17_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n<text style={{ fontSize:\"30px\" }}>hello world</text>\n<text style={{ fontStyle:\"italic\" }}>hello world</text>\n```\n\n----------------------------------------\n\nTITLE: CSS Border Top Right Radius Basic Examples\nDESCRIPTION: Examples showing different ways to specify the border-top-right-radius property, including using single values for circular corners and paired values for elliptical corners. Demonstrates usage with pixels, percentages, and em units.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/css/properties/border-top-right-radius.mdx#2025-04-17_snippet_0\n\nLANGUAGE: css\nCODE:\n```\n/* the corner is a circle */\n/* border-top-right-radius: radius */\nborder-top-right-radius: 3px;\n\n/* Percentage values */\n\n/* circle if box is a square or ellipse if box is a rectangle */\nborder-top-right-radius: 20%;\n\n/* same as above: 20% of horizontal(width) and vertical(height) */\nborder-top-right-radius: 20% 20%;\n\n/* 20% of horizontal(width) and 10% of vertical(height) */\nborder-top-right-radius: 20% 10%;\n\n/* the corner is an ellipse */\n/* border-top-right-radius: horizontal vertical */\nborder-top-right-radius: 0.5em 1em;\n```\n\n----------------------------------------\n\nTITLE: Using Next Element in Frontend Framework\nDESCRIPTION: Example demonstrating how to use __NextElement to find the next sibling node after creating an element. Shows creation of a view element and retrieving its next sibling.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/engine/element-api/__NextElement.mdx#2025-04-17_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n// main-thread.js\nlet element = __CreateElement('view', 0, {});\n\nlet next = __NextElement(element);\n```\n\n----------------------------------------\n\nTITLE: Defining selector Parameter Type in TypeScript\nDESCRIPTION: This snippet defines the type of the selector parameter used in the relativeTo() method. It is a string representing the id of the reference node.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/lynx-api/intersection-observer/intersection-observer-relative-to.mdx#2025-04-17_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nselector: string;\n```\n\n----------------------------------------\n\nTITLE: Defining React Lazy Function Type\nDESCRIPTION: TypeScript function signature for React's lazy loading implementation, which takes a loading function that returns a Promise containing a component.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/react/Function.lazy.mdx#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction lazy<T>(load: () => Promise<object>): LazyExoticComponent<T>\n```\n\n----------------------------------------\n\nTITLE: Using __GetClasses Function in JSX\nDESCRIPTION: Example showing how to use the __GetClasses function to retrieve class selectors from an Element after creating it and setting attributes and classes.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/api/engine/element-api/__GetClasses.mdx#2025-04-17_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n// main-thread.js\nlet element = __CreateElement('view', 0, {});\n__SetAttribute(element, 'src', 'xx');\n__SetClasses(element, 'A B C');\n\nlet classNames = __GetClasses(element);\n```\n\n----------------------------------------\n\nTITLE: CSS Margin Formal Syntax Definition\nDESCRIPTION: Formal syntax definition for the CSS margin property, showing the allowed values including length-percentage values and the auto keyword.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/css/properties/margin.mdx#2025-04-17_snippet_1\n\nLANGUAGE: css\nCODE:\n```\nmargin =\n  <length-percentage>  |\n  auto                 |\n\n<length-percentage> =\n  <length>      |\n  <percentage>\n```\n\n----------------------------------------\n\nTITLE: Advanced Usage Example with Conditional Rendering in TSX\nDESCRIPTION: More complex example showing conditional rendering based on environment variables (__LEPUS__ and __JS__), demonstrating how to handle different rendering scenarios and data fetching before rendering.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/api/react/Interface.Root.mdx#2025-04-17_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { root } from \"@lynx-js/react\"\n\nfunction App() {\n  // Your app\n  return <view>...</view>\n}\n\nif (__LEPUS__) {\n  root.render(\n    <DataProvider data={DEFAULT_DATA}>\n       <App/>\n    </DataProvider>\n  );\n} else if (__JS__) {\n  fetchData().then((data) => {\n    root.render(\n      <DataProvider data={data}>\n         <App/>\n      </DataProvider>\n    ); // You can render later after your data is ready\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Defining InitDataConsumer Function in TypeScript\nDESCRIPTION: The InitDataConsumer function declaration that provides access to initData through React's Context Consumer pattern. It accepts ConsumerProps with InitData as the generic type parameter and returns either null or a ReactElement.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/api/react/Function.InitDataConsumer.mdx#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction InitDataConsumer(props: ConsumerProps<InitData>): null | ReactElement<any, string | JSXElementConstructor<any>>\n```\n\n----------------------------------------\n\nTITLE: Invoking takeScreenshot Method in TypeScript\nDESCRIPTION: Demonstrates how to use the SelectorQuery API to invoke the takeScreenshot method on an element. This method returns a base64 image of the target node.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/elements/built-in/view.mdx#2025-04-17_snippet_39\n\nLANGUAGE: typescript\nCODE:\n```\nlynx\n  .createSelectorQuery()\n  .select('#my-view')\n  .invoke({\n    method: 'takeScreenshot',\n    params: {\n      format: 'jpeg', // Specify the image format, supports jpeg and png, the default is jpeg.\n      scale: 0.5, // Specify the image quality, 0 < scale <= 1, the default is 1, the smaller the value, the blurrier and smaller the size.\n    },\n    success: function (res) {\n      console.log(res);\n    },\n    fail: function (res) {\n      console.log(res.code, res.data);\n    },\n  })\n  .exec();\n```\n\n----------------------------------------\n\nTITLE: Defining the CssModules Interface in TypeScript\nDESCRIPTION: TypeScript interface declaration for CssModules that enables configuration of CSS Modules in the RSpeedy system. The interface includes optional properties for controlling automatic activation, exporting globals, export conventions, and class name formatting.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/api/rspeedy/rspeedy.cssmodules.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface CssModules \n```\n\n----------------------------------------\n\nTITLE: Registering and Retrieving a Module in JavaScript\nDESCRIPTION: This example demonstrates how to register a module using lynx.registerModule() and then retrieve it using lynx.getJSModule(). It shows that the retrieved module is the same as the registered one.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/lynx-api/lynx/lynx-register-module.mdx#2025-04-17_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst fooModule = {};\nlynx.registerModule('foo', fooModule);\nlynx.getJSModule('foo') === fooModule; // true\n```\n\n----------------------------------------\n\nTITLE: Function Signature for Element Removal in JSX\nDESCRIPTION: Function declaration showing the parameters and return type for removing an element from its parent node.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/engine/element-api/__RemoveElement.mdx#2025-04-17_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n__RemoveElement(parent: Element, child: Element) : Element;\n```\n\n----------------------------------------\n\nTITLE: Function Standard Syntax: Rotate Functions in CSS\nDESCRIPTION: Syntax specifications for rotate, rotateZ, rotateX, and rotateY transform functions.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/css/properties/transform.mdx#2025-04-17_snippet_2\n\nLANGUAGE: scss\nCODE:\n```\nrotate( [ <angle> | <zero> ] )\n```\n\nLANGUAGE: scss\nCODE:\n```\nrotateZ( [ <angle> | <zero> ] )\n```\n\nLANGUAGE: scss\nCODE:\n```\nrotateX( [ <angle> | <zero> ] )\n```\n\nLANGUAGE: scss\nCODE:\n```\nrotateY( [ <angle> | <zero> ] )\n```\n\n----------------------------------------\n\nTITLE: Setting Relative Right-Of Property in CSS\nDESCRIPTION: Examples of using the 'relative-right-of' CSS property to position elements relative to sibling elements in Lynx layout.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/css/properties/relative-right-of.mdx#2025-04-17_snippet_0\n\nLANGUAGE: css\nCODE:\n```\nrelative-right-of: none;\nrelative-right-of: 1;\nrelative-right-of: 2;\n```\n\n----------------------------------------\n\nTITLE: Applying CSS Variable Theme Styles in React Component\nDESCRIPTION: React component structure showing how to apply theme styles using CSS variables. The root element has the theme class, allowing descendant nodes to use the defined variables.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/guide/styling/custom-theming.mdx#2025-04-17_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nfunction App() {\n  return (\n    <view id=\"root\" className=\"theme-light\">\n      <view>\n        <text className=\"content\">text</text>\n      </view>\n    </view>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Defining View Exposure UI Margin Attributes in TypeScript\nDESCRIPTION: Defines margin attributes that specify boundary scaling values for exposure detection, affecting viewport intersection judgment of the target node.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/elements/built-in/view.mdx#2025-04-17_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\n// DefaultValue: '0px'\nexposure-ui-margin-top?: string;\nexposure-ui-margin-right?: string;\nexposure-ui-margin-bottom?: string;\nexposure-ui-margin-left?: string;\n```\n\n----------------------------------------\n\nTITLE: Defining the websocketTransport Property in TypeScript\nDESCRIPTION: TypeScript signature for the websocketTransport property of the DevClient class. This property allows specifying a custom path to the websocket implementation and is optional with a default value.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/api/rspeedy/rspeedy.devclient.websockettransport.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nwebsocketTransport?: string | undefined;\n```\n\n----------------------------------------\n\nTITLE: Defining consume-slide-event Property in TypeScript\nDESCRIPTION: Specifies angles for the target node to slide on the event response chain, determining if the platform layer gesture responds. Accepts an array of arrays containing start and end angle values.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/elements/built-in/view.mdx#2025-04-17_snippet_28\n\nLANGUAGE: typescript\nCODE:\n```\n// DefaultValue: []\nconsume-slide-event?: number [number []]\n```\n\n----------------------------------------\n\nTITLE: Defining margins Parameter Type in TypeScript\nDESCRIPTION: This snippet shows the type definition for the optional margins parameter in the relativeTo() method. It specifies the structure for scaling the reference node's viewport.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/lynx-api/intersection-observer/intersection-observer-relative-to.mdx#2025-04-17_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nmargins ? margins : { left: 0, right: 0, top: 0, bottom: 0 };\n```\n\n----------------------------------------\n\nTITLE: Injecting LynxGenericResourceFetcher in Objective-C\nDESCRIPTION: This snippet demonstrates how to inject a LynxGenericResourceFetcher when constructing a LynxView using LynxViewBuilder in Objective-C. It also shows how to enable the generic resource fetcher capability.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/lynx-native-api/resource-fetcher/GenericResourceFetcher.mdx#2025-04-17_snippet_3\n\nLANGUAGE: objectivec\nCODE:\n```\nLynxViewBuilder *builder = [[LynxViewBuilder alloc] init];\nbuilder.genericResourceFetcher = [[ExampleGenericResourceFetcher alloc] init];\nbuilder.enableGenericResourceFetcher = LynxBooleanOptionTrue;\n```\n\n----------------------------------------\n\nTITLE: Converting from React Native to ReactLynx components\nDESCRIPTION: Shows the differences between React Native and ReactLynx component usage. While the naming is similar, ReactLynx uses lowercase component names directly instead of importing from a package.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/react/introduction.mdx#2025-04-17_snippet_2\n\nLANGUAGE: diff\nCODE:\n```\n- import {View, Text, Image} from 'react-native';\n- <View style={{...}} />\n+ <view style={{...}} />\n```\n\n----------------------------------------\n\nTITLE: Using CSS Variables with Calc() in CSS\nDESCRIPTION: Shows how to use CSS variables in calculations using the calc() function.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/api/css/properties/css-variable.mdx#2025-04-17_snippet_3\n\nLANGUAGE: css\nCODE:\n```\n.four {\n  background-color: var(--main-bg-color);\n  width: 25%;\n  height: calc(var(--main-height) - 100px);\n}\n```\n\n----------------------------------------\n\nTITLE: Using registerDataProcessors Method in ReactLynx\nDESCRIPTION: The registerDataProcessors method registers data processors for a React application. It must be called before root.render().\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/api/react/Interface.Lynx.mdx#2025-04-17_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nregisterDataProcessors: (dataProcessorDefinition: DataProcessorDefinition) => void;\n```\n\n----------------------------------------\n\nTITLE: Image Animation Method Implementation\nDESCRIPTION: Example of invoking animation control methods on an image element using SelectorQuery.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/elements/built-in/image.mdx#2025-04-17_snippet_2\n\nLANGUAGE: ts\nCODE:\n```\nlynx.createSelectorQuery()\n     .select('#gifs')\n     .invoke({\n      method: 'startAnimate'，\n    })\n    .exec();\n```\n\n----------------------------------------\n\nTITLE: Formal CSS Background Position Syntax\nDESCRIPTION: Formal syntax definition showing the allowed values and combinations for the background-position property.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/css/properties/background-position.mdx#2025-04-17_snippet_1\n\nLANGUAGE: css\nCODE:\n```\n[ left | center | right | top | bottom | <length-percentage> ] | [ left | center | right | <length-percentage> ] [ top | center | bottom | <length-percentage> ]\n\n<length-percentage> = <length> | <percentage>\n```\n\n----------------------------------------\n\nTITLE: Basic CSS Direction Property Syntax\nDESCRIPTION: Shows the basic syntax for setting the direction CSS property with its three main values: normal (default), ltr (left-to-right), and rtl (right-to-left).\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/css/properties/direction.mdx#2025-04-17_snippet_0\n\nLANGUAGE: css\nCODE:\n```\ndirection: normal;\ndirection: ltr;\ndirection: rtl;\n```\n\n----------------------------------------\n\nTITLE: Using grid-auto-rows CSS Property with Various Value Types\nDESCRIPTION: Examples of different ways to use the grid-auto-rows property, including keyword values, length values, percentage values, flex values, minmax values, and multiple track size values.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/css/properties/grid-auto-rows.mdx#2025-04-17_snippet_0\n\nLANGUAGE: css\nCODE:\n```\n/* Keyword values */\ngrid-auto-rows: max-content;\ngrid-auto-rows: auto;\n\n/* <length> values */\ngrid-auto-rows: 100px;\n\n/* <percentage> values */\ngrid-auto-rows: 10%;\ngrid-auto-rows: 33.3%;\n\n/* <flex> values */\ngrid-auto-rows: 0.5fr;\ngrid-auto-rows: 3fr;\n\n/* minmax() values */\ngrid-auto-rows: minmax(100px, auto);\ngrid-auto-rows: minmax(max-content, 2fr);\n\n/* multiple track-size values */\ngrid-auto-rows: 100px 150px 390px;\ngrid-auto-rows: 10% 33.3%;\ngrid-auto-rows: 0.5fr 3fr 1fr;\ngrid-auto-rows: 100px minmax(100px, auto) 10% 0.5fr fit-content(400px);\n```\n\n----------------------------------------\n\nTITLE: Implementing getVisibleCells Method for Cell Information\nDESCRIPTION: Method to retrieve information about all currently visible cells in the list, including their position, dimensions, and identifiers.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/api/elements/built-in/list.mdx#2025-04-17_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\nlynx\n  .createSelectorQuery()\n  .select('#id_of_list')\n  .invoke({\n    method: 'getVisibleCells',\n    success(res) {\n      console.log('succ ');\n    },\n    fail(res) {\n      console.log('err ');\n    },\n  })\n  .exec();\n```\n\nLANGUAGE: tsx\nCODE:\n```\nattachedCells: [\n  {\n    id: number, // 节点 id\n    itemKey: string, // 节点 item-key\n    index: number, // 节点在 list 中的 index\n    left: number, // 节点左边界相对于 list 的位置，单位 px\n    top: number, // 节点上边界相对于 list 的位置，单位 px\n    right: number, // 节点右边界相对于 list 的位置，单位 px\n    bottom: number, // 节点下边界相对于 list 的位置，单位 px\n  },\n];\n```\n\n----------------------------------------\n\nTITLE: Configuring Path Aliases in tsconfig.json\nDESCRIPTION: Sets up path aliases in TypeScript configuration to simplify module imports. This example maps '@common/*' to './src/common/*' paths.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/rspeedy/typescript.md#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"compilerOptions\": {\n    \"paths\": {\n      \"@common/*\": [\"./src/common/*\"]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Native View Instance for Custom Input Element in Objective-C\nDESCRIPTION: Implements the createView method for the custom input element. This method is responsible for instantiating and configuring the native UITextField instance.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/guide/custom-native-component/custom-component-iOS.mdx#2025-04-17_snippet_4\n\nLANGUAGE: objc\nCODE:\n```\n#import \"LynxExplorerInput.h\"\n#import <Lynx/LynxComponentRegistry.h>\n\n@implementation LynxExplorerInput\n\nLYNX_LAZY_REGISTER_UI(\"input\")\n\n- (UITextField *)createView {\n  UITextField *textField = [[LynxTextField alloc] init];\n  //...\n  textField.delegate = self;\n  return textField;\n}\n\n@end\n\n@implementation LynxTextField\n\n- (UIEditingInteractionConfiguration)editingInteractionConfiguration API_AVAILABLE(ios(13.0)) {\n  return UIEditingInteractionConfigurationNone;\n}\n\n- (void)setPadding:(UIEdgeInsets)padding {\n  _padding = padding;\n  [self setNeedsLayout];\n}\n\n- (CGRect)textRectForBounds:(CGRect)bounds {\n  CGFloat x = self.padding.left;\n  CGFloat y = self.padding.top;\n  CGFloat width = bounds.size.width - self.padding.left - self.padding.right;\n  CGFloat height = bounds.size.height - self.padding.top - self.padding.bottom;\n\n  return CGRectMake(x, y, width, height);\n}\n\n- (CGRect)editingRectForBounds:(CGRect)bounds {\n  return [self textRectForBounds:bounds];\n}\n@end\n```\n\n----------------------------------------\n\nTITLE: Configuring Development Client Type Definition - TypeScript\nDESCRIPTION: Type definition for the optional client configuration property. The property accepts either a Client object or undefined value.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/rspeedy/rspeedy.dev.client.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclient?: Client | undefined;\n```\n\n----------------------------------------\n\nTITLE: Defining View Data Attributes in TypeScript\nDESCRIPTION: Defines the 'data-*' attributes used to specify additional information for an element, which can be retrieved in Event objects.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/elements/built-in/view.mdx#2025-04-17_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\ndata-*?: any;\n```\n\n----------------------------------------\n\nTITLE: Using scroll-view Custom Element in HTML\nDESCRIPTION: Example of how to use the <scroll-view> custom element in HTML markup to create a scrollable container.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/guide/ui/layout/scroll-view.mdx#2025-04-17_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<scroll-view>\n```\n\n----------------------------------------\n\nTITLE: Setting Multiple Style Properties with setStyleProperties() in TypeScript\nDESCRIPTION: Sets multiple CSS style properties on an element using an object with styleName:styleValue pairs. All style names must be in kebab-case format.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/lynx-api/main-thread/main-thread-element.mdx#2025-04-17_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nelement.setStyleProperties(styleProperties);\n```\n\n----------------------------------------\n\nTITLE: Defining CSS Module in Rspeedy\nDESCRIPTION: A CSS Module example showing how to create locally scoped CSS classes in Rspeedy. The .red class sets a red background color and will be locally scoped when imported.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/rspeedy/styling.mdx#2025-04-17_snippet_0\n\nLANGUAGE: css\nCODE:\n```\n.red {\n  background: red;\n}\n```\n\n----------------------------------------\n\nTITLE: Parsing Lynx Template to TemplateBundle in Java\nDESCRIPTION: Creates a TemplateBundle object from binary template data. Returns null if the input is null, or an invalid TemplateBundle if the input is not a correct Lynx template.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/api/lynx-native-api/template-bundle.mdx#2025-04-17_snippet_0\n\nLANGUAGE: java\nCODE:\n```\npublic static TemplateBundle fromTemplate(byte[] template)\n```\n\n----------------------------------------\n\nTITLE: Environment Variables Definition Example\nDESCRIPTION: Demonstrates how to use define for environment variables, showing both configuration and resulting code transformation.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/rspeedy/rspeedy.source.define.md#2025-04-17_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineConfig } from '@lynx-js/rspeedy'\nexport default defineConfig({\n  source: {\n    define: {\n      BUILD_VERSION: JSON.stringify(process.env.BUILD_VERSION ?? 'unknown_version'),\n      'process.env.NODE_ENV': JSON.stringify(process.env.NODE_ENV),\n    },\n  },\n})\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconst version = BUILD_VERSION;\nif (process.env.NODE_ENV === 'development') {}\n\n// ⬇️ Turn into being...\nconst version = \"unknown_version\";\nif (\"development\" === 'development') {}\n```\n\n----------------------------------------\n\nTITLE: Formal Syntax Definition for Auto Font Size Preset Sizes\nDESCRIPTION: The formal syntax definition showing that the property accepts an array of length values, requiring exactly 3 values.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/css/properties/-x-auto-font-size-preset-sizes.mdx#2025-04-17_snippet_1\n\nLANGUAGE: css\nCODE:\n```\n-x-auto-font-size-preset-sizes = [<length>] {3}\n```\n\n----------------------------------------\n\nTITLE: Implementing shouldComponentUpdate Method in React TypeScript\nDESCRIPTION: Optional method to determine if a component should re-render. PureComponent implements a shallow comparison on props and state by default.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/api/react/Class.PureComponent.mdx#2025-04-17_snippet_7\n\nLANGUAGE: TypeScript\nCODE:\n```\noptional shouldComponentUpdate(\n   nextProps: Readonly<P>,\n   nextState: Readonly<S>,\n   nextContext: any): boolean\n```\n\n----------------------------------------\n\nTITLE: Border Top Width CSS Examples\nDESCRIPTION: Examples of using the border-top-width CSS property with keyword values and length values.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/css/properties/border-top-width.mdx#2025-04-17_snippet_0\n\nLANGUAGE: css\nCODE:\n```\n/* Keyword values */\nborder-top-width: thin;\nborder-top-width: medium;\nborder-top-width: thick;\n\n/* <length> values */\nborder-top-width: 10rem;\nborder-top-width: 6px;\n```\n\n----------------------------------------\n\nTITLE: Using CSS Variables with Calc Expressions\nDESCRIPTION: Illustrates how to combine CSS variables with the calc() function for dynamic calculations in property values.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/css/properties/css-variable.mdx#2025-04-17_snippet_2\n\nLANGUAGE: css\nCODE:\n```\n.four {\n  background-color: var(--main-bg-color);\n  width: 25%;\n  height: calc(var(--main-height) - 100px);\n}\n```\n\n----------------------------------------\n\nTITLE: CSS padding-left Basic Syntax Examples\nDESCRIPTION: Examples of padding-left syntax showing length values (using em units), zero value, and percentage value. This demonstrates the different valid ways to specify left padding for elements.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/css/properties/padding-left.mdx#2025-04-17_snippet_0\n\nLANGUAGE: css\nCODE:\n```\n/* <length> values */\npadding-left: 0.5em;\npadding-left: 0;\n\n/* <percentage> value */\npadding-left: 10%;\n```\n\n----------------------------------------\n\nTITLE: Defining ios-enable-simultaneous-touch Property in TypeScript\nDESCRIPTION: iOS-only property that specifies whether to force trigger the touchend event when the target node is on the event response chain. Defaults to false.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/elements/built-in/view.mdx#2025-04-17_snippet_33\n\nLANGUAGE: typescript\nCODE:\n```\n// DefaultValue: false\nios-enable-simultaneous-touch?: boolean\n```\n\n----------------------------------------\n\nTITLE: Type Definition for removeConsole Property\nDESCRIPTION: TypeScript type definition showing the possible values for the removeConsole property in the Performance configuration. It can be a boolean, an array of ConsoleType values, or undefined.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/rspeedy/rspeedy.performance.removeconsole.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nremoveConsole?: boolean | ConsoleType[] | undefined;\n```\n\n----------------------------------------\n\nTITLE: Defining watchFiles Property Signature in TypeScript\nDESCRIPTION: This snippet shows the TypeScript signature for the watchFiles property. It can be of type WatchFiles, an array of WatchFiles, or undefined.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/rspeedy/rspeedy.dev.watchfiles.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nwatchFiles?: WatchFiles | WatchFiles[] | undefined;\n```\n\n----------------------------------------\n\nTITLE: Using ExposedAPI in Rsbuild Plugin\nDESCRIPTION: Example of how to use the ExposedAPI in an Rsbuild plugin. It demonstrates importing the type, creating a plugin, and accessing the Rspeedy API using api.useExposed.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/rspeedy/rspeedy.exposedapi.md#2025-04-17_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { ExposedAPI } from '@lynx-js/rspeedy'\nconst RsbuildPlugin = {\n  name: 'my-rsbuild-plugin',\n  pre: ['lynx:rsbuild:plugin-api'],\n  setup(api) {\n    const rspeedyAPI = api.useExposed<ExposedAPI>(Symbol.for('rspeedy.api'))\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Spring Effect Animation\nDESCRIPTION: Implementation of spring physics animation using keyframes with the Go component.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/guide/styling/animation.mdx#2025-04-17_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n<Go\n  img=\"https://lf-lynx.tiktok-cdns.com/obj/lynx-artifacts-oss-sg/lynx-website/assets/doc/animation-guide-spring.webp\"\n  example=\"animation\"\n  defaultFile=\"src/keyframe_spring/index.scss\"\n  defaultEntryFile=\"dist/keyframe_spring.lynx.bundle\"\n  entry=\"src/keyframe_spring\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Integrating DevTool Switch Page in Android with Kotlin\nDESCRIPTION: This snippet demonstrates how to implement a DevTool switch page in an Android activity using Kotlin. It creates a LynxView with a template provider, loads the DevTool switch template from assets, and renders it within the activity.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/guide/start/integrate-lynx-devtool-advanced.mdx#2025-04-17_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nclass SwitchActivity : Activity() {\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        val lynxView = buildLynxView()\n        setContentView(lynxView)\n        try {\n            val array = this.assets.open(\"devtool_switch/switchPage/devtoolSwitch.lynx.bundle\").readBytes()\n            lynxView.renderTemplateWithBaseUrl(\n                array,\n                TemplateData.empty(),\n                \"devtool_switch/switchPage/devtoolSwitch.lynx.bundle\"\n            )\n        } catch (e: IOException) {\n            e.printStackTrace()\n        }\n    }\n\n    private fun buildLynxView(): LynxView {\n        val viewBuilder = LynxViewBuilder()\n        viewBuilder.setTemplateProvider(DemoTemplateProvider())\n        return viewBuilder.build(this)\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Global Element Registration in Java/Kotlin\nDESCRIPTION: Demonstrates how to globally register a custom element for use across multiple LynxView instances using LynxEnv.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/guide/custom-native-component/custom-component-android.mdx#2025-04-17_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nLynxEnv.inst().addBehavior(new Behavior(\"input\"){\n      @Override\n      public LynxExplorerInput createUI(LynxContext context) {\n        return new LynxExplorerInput(context);\n      }\n    });\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nLynxEnv.inst().addBehavior(object : Behavior(\"input\") {\n    override fun createUI(context: LynxContext): LynxExplorerInput {\n        return LynxExplorerInput(context)\n    }\n})\n```\n\n----------------------------------------\n\nTITLE: Creating Element with Inline Styles in JSX\nDESCRIPTION: Demonstrates how a frontend framework can compile JSX tags with inline styles into render instructions. This example creates a 'view' element with specific positioning styles.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/engine/element-api/__SetInlineStyles.mdx#2025-04-17_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<view\n  src=\"xxx\"\n  style={{ top: '10px', left: '10px', right: '10px', bottom: '10px' }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Initializing LynxEnv in AppDelegate (Swift)\nDESCRIPTION: This code snippet demonstrates how to initialize LynxEnv in the AppDelegate of an iOS application using Swift. It ensures that LynxEnv is set up before any Lynx Engine interface calls.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/guide/start/fragments/ios/integrating-lynx-with-existing-app-ios.mdx#2025-04-17_snippet_3\n\nLANGUAGE: swift\nCODE:\n```\nimport UIKit\n\n@UIApplicationMain\nclass AppDelegate: UIResponder, UIApplicationDelegate {\n  var window: UIWindow?\n\n  func application(_ application: UIApplication, didFinishLaunchingWithOptions launchOptions: [UIApplication.LaunchOptionsKey: Any]?) -> Bool {\n    LynxEnv.sharedInstance()\n    return true\n  }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Implementing SetEvents in JavaScript for Lynx SDK\nDESCRIPTION: Shows how to use the __SetEvents function in JavaScript within the Lynx SDK. This example creates a view element, sets its 'src' attribute, and adds a 'tap' event listener using __SetEvents.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/engine/element-api/__SetEvents.mdx#2025-04-17_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// main-thread.js\nlet element = __CreateElement('view', 0, {});\n__SetAttribute(element, 'src', 'xx');\n\n__SetEvents(element, [{ type: 'bindEvent', name: 'tap', function: 'onTap' }]);\n```\n\n----------------------------------------\n\nTITLE: Setting CSS Padding-Top Values\nDESCRIPTION: Examples of different ways to set padding-top using length and percentage values. Shows fixed lengths using em units and percentage-based padding.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/css/properties/padding-top.mdx#2025-04-17_snippet_0\n\nLANGUAGE: css\nCODE:\n```\n/* <length> values */\npadding-top: 0.5em;\npadding-top: 0;\n\n/* <percentage> value */\npadding-top: 10%;\n```\n\n----------------------------------------\n\nTITLE: Accessing MainThreadRef Current Value in TypeScript\nDESCRIPTION: Getter and setter for the 'current' property of MainThreadRef. This allows reading and writing the stored value, which persists between main thread function calls.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/react/Class.MainThreadRef.mdx#2025-04-17_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nget current(): T\nset current(_: T): void\n```\n\n----------------------------------------\n\nTITLE: Configuring Lynx Service Dependencies in Podfile (Ruby)\nDESCRIPTION: This snippet demonstrates how to add Lynx Service dependencies to the Podfile, including image, log, and HTTP services. It also includes SDWebImage for image handling.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/guide/start/fragments/ios/integrating-lynx-with-existing-app-ios.mdx#2025-04-17_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\nsource 'https://cdn.cocoapods.org/'\n\nplatform :ios, '10.0'\n\ntarget 'YourTarget' do\n  pod 'Lynx', '3.2.0-rc.0', :subspecs => [\n    'Framework',\n  ]\n\n  pod 'PrimJS', '2.11.1-rc.0', :subspecs => ['quickjs', 'napi']\n\n  # integrate image-service, log-service, and http-service\n  pod 'LynxService', '3.2.0-rc.0', :subspecs => [\n      'Image',\n      'Log',\n      'Http',\n  ]\n\n  # ImageService dependencies:\n  pod 'SDWebImage','5.15.5'\n  pod 'SDWebImageWebPCoder', '0.11.0'\nend\n```\n\n----------------------------------------\n\nTITLE: Defining CSS background-repeat Property\nDESCRIPTION: This snippet demonstrates various ways to use the background-repeat CSS property. It shows different values that can be applied to control how background images are repeated.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/api/css/properties/background-repeat.mdx#2025-04-17_snippet_0\n\nLANGUAGE: css\nCODE:\n```\nbackground-repeat: repeat-x;\nbackground-repeat: repeat-y;\nbackground-repeat: repeat;\nbackground-repeat: space;\nbackground-repeat: round;\nbackground-repeat: no-repeat;\n\nbackground-repeat: repeat space;\nbackground-repeat: repeat repeat;\nbackground-repeat: round space;\nbackground-repeat: no-repeat round;\n```\n\n----------------------------------------\n\nTITLE: Defining registerModule Method Signature in TypeScript\nDESCRIPTION: This snippet shows the TypeScript signature of the registerModule method. It takes a name string and a generic Module type as parameters, and returns void.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/lynx-api/lynx/lynx-register-module.mdx#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nregisterModule: <Module>(name: string, module: Module) => void;\n```\n\n----------------------------------------\n\nTITLE: Defining Touch Event Handlers in TypeScript\nDESCRIPTION: Defines handlers for various touch events including touchstart, touchmove, touchend, touchcancel, tap, and longpress. These events are triggered at different stages of touch interaction.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/elements/built-in/view.mdx#2025-04-17_snippet_35\n\nLANGUAGE: typescript\nCODE:\n```\ntouchstart: TouchEvent;\ntouchmove: TouchEvent;\ntouchend: TouchEvent;\ntouchcancel: TouchEvent;\ntap: TouchEvent;\nlongpress: TouchEvent;\n```\n\n----------------------------------------\n\nTITLE: Setting Text Colors Using CSS Color Property\nDESCRIPTION: Examples of various ways to set the 'color' CSS property using different color formats including named colors, hex values, RGB, and HSL.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/css/properties/color.mdx#2025-04-17_snippet_0\n\nLANGUAGE: css\nCODE:\n```\n/* <named-color> values */\ncolor: red;\ncolor: orange;\ncolor: tan;\n\n/* <hex-color> values */\ncolor: #090;\ncolor: #009900;\ncolor: #090a;\ncolor: #009900aa;\n\n/* <rgb()> values */\ncolor: rgb(34, 12, 64, 0.6);\ncolor: rgba(34, 12, 64, 0.6);\ncolor: rgb(34 12 64 / 0.6);\ncolor: rgba(34 12 64 / 0.3);\ncolor: rgb(34 12 64 / 60%);\ncolor: rgba(34.6 12 64 / 30%);\n\n/* <hsl()> values */\ncolor: hsl(30, 100%, 50%, 0.6);\ncolor: hsla(30, 100%, 50%, 0.6);\ncolor: hsl(30 100% 50% / 0.6);\ncolor: hsla(30 100% 50% / 0.6);\ncolor: hsl(30 100% 50% / 60%);\ncolor: hsla(30.2 100% 50% / 60%);\n```\n\n----------------------------------------\n\nTITLE: Initializing React PureComponent with Props in TypeScript\nDESCRIPTION: Constructor for the PureComponent class that accepts props parameter. This is the primary constructor for initializing a PureComponent instance.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/api/react/Class.PureComponent.mdx#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nnew PureComponent<P, S, SS>(props: P): PureComponent<P, S, SS>\n```\n\n----------------------------------------\n\nTITLE: CSS @import Examples\nDESCRIPTION: Demonstrates different ways to import CSS files using relative and absolute paths. Shows importing from the same directory, a subdirectory, and using absolute paths.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/css/at-rule/import.mdx#2025-04-17_snippet_1\n\nLANGUAGE: css\nCODE:\n```\n@import 'custom.css';\n@import './custom.css';\n@import '/pages/card/index.css';\n```\n\n----------------------------------------\n\nTITLE: SelectorQuery exec() Method Signature\nDESCRIPTION: TypeScript method signature for the exec() method which executes all submitted operations in the selector query chain.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/lynx-api/selector-query/selector-query-exec.mdx#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexec(): void;\n```\n\n----------------------------------------\n\nTITLE: Defining firstScreenSyncTiming Property in TypeScript\nDESCRIPTION: TypeScript type definition for the firstScreenSyncTiming property which controls when MainThread transfers control to Background. It accepts two options: 'immediately' to transfer control immediately or 'jsReady' to transfer when the JS Runtime is ready.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/api/rspeedy/react-rsbuild-plugin.pluginreactlynxoptions.firstscreensynctiming.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfirstScreenSyncTiming?: 'immediately' | 'jsReady';\n```\n\n----------------------------------------\n\nTITLE: Defining the enableNewGesture Property in TypeScript\nDESCRIPTION: TypeScript signature for the enableNewGesture property in the PluginReactLynxOptions interface. This optional boolean property enables the new gesture system when set to true.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/api/rspeedy/react-rsbuild-plugin.pluginreactlynxoptions.enablenewgesture.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nenableNewGesture?: boolean;\n```\n\n----------------------------------------\n\nTITLE: Observer Frame Rate Options Interface\nDESCRIPTION: TypeScript interface defining the configuration options for frame rate settings. Includes forPageRect for LynxView position change detection and forExposureCheck for target node visibility detection intervals.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/lynx-api/lynx/lynx-set-observer-frame-rate.mdx#2025-04-17_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ninterface Options {\n  forPageRect?: number;\n  forExposureCheck?: number;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining PerformanceMetric Duration Attribute in TypeScript\nDESCRIPTION: Defines the 'duration' attribute of the PerformanceMetric type, representing the metric value in milliseconds with microsecond precision. It's calculated as endTimestamp - startTimestamp.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/lynx-api/performance-api/performance-metric.mdx#2025-04-17_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nduration: number;\n```\n\n----------------------------------------\n\nTITLE: Using Class Selector in TSX\nDESCRIPTION: Example of a view element with a class name that can be selected using '.class1'.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/lynx-api/selector-query/selector-query-select.mdx#2025-04-17_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n// '.class1'\n<view className=\"class1\" />\n```\n\n----------------------------------------\n\nTITLE: Setting LynxView Size with LynxViewBuilder Frame in Objective-C\nDESCRIPTION: This snippet shows how to create a LynxView with a fixed size of 400x200 using the LynxViewBuilder's frame property. The frame is set within the builder block during initialization.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/guide/embed-lynx-to-native/embed-lynx-to-native-fixed-iOS.mdx#2025-04-17_snippet_0\n\nLANGUAGE: objective-c\nCODE:\n```\nLynxView *lynxView = [[LynxView alloc] initWithBuilderBlock:^(LynxViewBuilder *builder) {\n    builder.frame =  CGRectMake(0, 0, 400, 200);\n    ...\n}];\n```\n\n----------------------------------------\n\nTITLE: Enabling CSS Modules for All Files in RSpeedy\nDESCRIPTION: Example of enabling CSS Modules for all files in the RSpeedy configuration by using a function that always returns true.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/rspeedy/rspeedy.cssloader.modules.md#2025-04-17_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineConfig } from '@lynx-js/rspeedy'\n\nexport default defineConfig({\n  tools: {\n    cssLoader: {\n      modules: () => true,\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Output Filename in rspeedy\nDESCRIPTION: Example of how to configure the output.filename property in @lynx-js/rspeedy using defineConfig. This sets a pattern for bundle filenames with [name] placeholders.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/api/rspeedy/rspeedy.output.filename.md#2025-04-17_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineConfig } from '@lynx-js/rspeedy'\nexport default defineConfig({\n  output: {\n    filename: '[name]/[name].lynx.bundle',\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Retrieving First Child Element in Lynx Framework (JSX)\nDESCRIPTION: This snippet demonstrates the syntax and usage of the __FirstElement function, which retrieves the first child Element of a parent Element. It returns undefined if there are no child elements.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/engine/element-api/__FirstElement.mdx#2025-04-17_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n__FirstElement(element: Element) : Element|undefined;\n```\n\n----------------------------------------\n\nTITLE: Setting Text Selection Handle Size with -x-handle-size in CSS\nDESCRIPTION: This snippet demonstrates how to use the -x-handle-size property in CSS to set the size of the floating marker when copying text. It's applied to the ::selection pseudo-element.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/css/properties/-x-handle-size.mdx#2025-04-17_snippet_0\n\nLANGUAGE: css\nCODE:\n```\n::selection {\n  -x-handle-size: 5px;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining isValidElement Type in TypeScript\nDESCRIPTION: TypeScript function signature for React's isValidElement utility that checks if an object is a valid React element. Takes a generic type parameter P and returns a type predicate indicating if the input is a ReactElement.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/react/Function.isValidElement.mdx#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction isValidElement<P>(object: undefined | null | object): object is ReactElement<P, string | JSXElementConstructor<any>>\n```\n\n----------------------------------------\n\nTITLE: CSS Box Shadow Formal Syntax Definition\nDESCRIPTION: Formal syntax definition for the box-shadow property, including position, offset, blur, and spread parameters.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/css/properties/box-shadow.mdx#2025-04-17_snippet_1\n\nLANGUAGE: css\nCODE:\n```\nbox-shadow =\n  <box-shadow-position> &&\n  [ <'box-shadow-offset'> [ <'box-shadow-blur'> <'box-shadow-spread'>? ]? ] &&\n  <box-shadow-color>\n\n<box-shadow-postion> =\n  inset?\n\n<box-shadow-offset> =\n  <length>{2}\n\n<box-shadow-blur> =\n  <length [0, ∞]>\n```\n\n----------------------------------------\n\nTITLE: Basic CSS Margin Bottom Examples\nDESCRIPTION: Demonstrates various ways to set margin-bottom using length values, percentages and the auto keyword.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/css/properties/margin-bottom.mdx#2025-04-17_snippet_0\n\nLANGUAGE: css\nCODE:\n```\n/* <length> values */\nmargin-bottom: 0.5em;\nmargin-bottom: 0;\nmargin-bottom: 2rpx;\n\n/* <percentage> value */\nmargin-bottom: 10%;\n```\n\n----------------------------------------\n\nTITLE: Extending Asset Types Configuration\nDESCRIPTION: Configuration examples for extending supported asset types using two different approaches\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/rspeedy/assets.md#2025-04-17_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineConfig } from '@lynx-js/rspeedy';\n\n// planA: source.assetsInclude\nexport default defineConfig({\n  source: {\n    assetsInclude: /\\.pdf$/,\n  },\n});\n\n// planB: tools.rspack\nexport default defineConfig({\n  tools: {\n    rspack(config, { addRules }) {\n      addRules([\n        {\n          test: /\\.pdf$/,\n          // converts asset to a separate file and exports the URL address.\n          type: 'asset/resource',\n        },\n      ]);\n      return config;\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Using __BACKGROUND__ Macro in Class Component (TypeScript/React)\nDESCRIPTION: Illustrates the usage of the __BACKGROUND__ macro in a class component to conditionally initialize a logger in a background thread environment. The example shows how the code is transformed during compilation for both background and main thread environments.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/react/Document.built-in-macros.mdx#2025-04-17_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { AppLoggerFactory } from '../utils/appLoggerFactory';\n\nclass Conversations extends Component<Props, State> {\n  appLogger: AppLogger;\n\n  constructor(props: Props) {\n    super(props);\n    this.state = {\n      showConversationItemAction: false,\n      loading: true,\n    };\n    if (__BACKGROUND__) {\n      this.appLogger = AppLoggerFactory();\n    }\n  }\n}\n```\n\nLANGUAGE: tsx\nCODE:\n```\nclass Conversations extends Component<Props, State> {\n  appLogger: AppLogger;\n\n  constructor(props: Props) {\n    super(props);\n    this.state = {\n      showConversationItemAction: false,\n      loading: true,\n    };\n    this.appLogger = AppLoggerFactory();\n  }\n}\n```\n\nLANGUAGE: tsx\nCODE:\n```\nclass Conversations extends Component<Props, State> {\n  appLogger: AppLogger;\n\n  constructor(props: Props) {\n    super(props);\n    this.state = {\n      showConversationItemAction: false,\n      loading: true,\n    };\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Minify.cssOptions Property in TypeScript\nDESCRIPTION: TypeScript signature for the cssOptions property of the Minify class. It is an optional property that accepts LightningCssMinimizerRspackPluginOptions or undefined.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/rspeedy/rspeedy.minify.cssoptions.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ncssOptions?: Rspack.LightningCssMinimizerRspackPluginOptions | undefined;\n```\n\n----------------------------------------\n\nTITLE: Defining React Suspense Function Type in TypeScript\nDESCRIPTION: TypeScript type definition for the React Suspense component function, specifying its props type and return type including ReactElement or null.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/react/Function.Suspense.mdx#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction Suspense(props: SuspenseProps): null | ReactElement<any, string | JSXElementConstructor<any>>\n```\n\n----------------------------------------\n\nTITLE: List Component Basic Usage\nDESCRIPTION: Implementation of list component for handling large datasets with efficient rendering of only visible content.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/guide/ui/scrolling.mdx#2025-04-17_snippet_2\n\nLANGUAGE: JSX\nCODE:\n```\n<list scroll-orientation=\"vertical\">\n  {/* List content */}\n</list>\n```\n\n----------------------------------------\n\nTITLE: Defining InitDataConsumer Function in TypeScript\nDESCRIPTION: This function creates a Consumer component for the InitData context. It should be used in conjunction with the InitDataProvider. The function takes ConsumerProps of type InitData and returns either null or a ReactElement.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/react/Function.InitDataConsumer.mdx#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction InitDataConsumer(props: ConsumerProps<InitData>): null | ReactElement<any, string | JSXElementConstructor<any>>\n```\n\n----------------------------------------\n\nTITLE: Creating a Theme Context in React\nDESCRIPTION: Example of using createContext to create a ThemeContext with a default value of 'light'. This context can be used to provide and consume theme information throughout a React application.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/api/react/Function.createContext.mdx#2025-04-17_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { createContext } from 'react';\n\nconst ThemeContext = createContext('light');\n```\n\n----------------------------------------\n\nTITLE: Example Usage of __CreatePage Function in JSX\nDESCRIPTION: This example demonstrates how to create a PageElement using the __CreatePage function in a frontend framework. It uses a componentID of '0', a cssID of 0, and an empty info object.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/engine/element-api/__CreatePage.mdx#2025-04-17_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n// main-thread.js\nlet page = __CreatePage('0', 0, {});\n```\n\n----------------------------------------\n\nTITLE: Copying Files to Root Dist Directory\nDESCRIPTION: Example configuration showing how to copy files from ./src/assets directly to the ./dist directory root.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/api/rspeedy/rspeedy.output.copy.md#2025-04-17_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineConfig } from '@lynx-js/rspeedy'\n\nexport default defineConfig({\n  output: {\n    copy: [\n      // `./src/assets/image.png` -> `./dist/image.png`\n      { from: './src/assets' },\n    ],\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Text Selection Property in Lynx\nDESCRIPTION: Definition of the text-selection property which enables text selection functionality. Requires flatten={false} to be set simultaneously.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/api/elements/built-in/text.mdx#2025-04-17_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\n// DefaultValue: false\ntext-selection?: boolean;\n```\n\n----------------------------------------\n\nTITLE: Finding Views by ID Selector in iOS\nDESCRIPTION: Objective-C method to find a UI element based on its ID selector attribute. Returns an optional LynxUI instance that matches the provided ID string specified in the layout file.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/lynx-native-api/lynx-view/find-view-by-idselector.mdx#2025-04-17_snippet_1\n\nLANGUAGE: objc\nCODE:\n```\n- (nullable LynxUI*)uiWithIdSelector:(nonnull NSString*)idSelector;\n```\n\n----------------------------------------\n\nTITLE: useRef Hook with Required Initial Value\nDESCRIPTION: TypeScript definition for useRef that accepts an initial value of type T and returns a MutableRefObject. This version requires an initial value to be provided.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/api/react/Function.useRef.mdx#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction useRef<T>(initialValue: T): MutableRefObject<T>\n```\n\n----------------------------------------\n\nTITLE: Compiled JavaScript for Setting Classes on an Element\nDESCRIPTION: JavaScript code showing how the JSX markup gets compiled into render instructions. It creates an element, sets attributes, and uses __SetClasses to apply class selectors.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/engine/element-api/__SetClasses.mdx#2025-04-17_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// main-thread.js\nlet element = __CreateElement('view', 0, {});\n__SetAttribute(element, 'src', 'xx');\n__SetClasses(element, 'A B C');\n```\n\n----------------------------------------\n\nTITLE: Basic Type Selector in CSS\nDESCRIPTION: Demonstrates how to use type selectors to match elements by node name\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/css/selectors.mdx#2025-04-17_snippet_0\n\nLANGUAGE: css\nCODE:\n```\nelement { property declarations }\n```\n\nLANGUAGE: css\nCODE:\n```\ninput {\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Font Resource Fetcher in iOS for Lynx\nDESCRIPTION: Objective-C implementation of LynxGenericResourceFetcher in iOS to download and load custom font resources for Lynx applications.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/api/elements/built-in/text.mdx#2025-04-17_snippet_8\n\nLANGUAGE: objective-c\nCODE:\n```\n@interface ExampleGenericResourceFetcher : NSObject <LynxGenericResourceFetcher>\n\n- (void)fetchResource:(LynxResourceRequest *)request\n           onComplete:(LynxGenericResourceCompletionBlock)callback;\n\n@end\n\n@implementation ExampleGenericResourceFetcher\nNSURL* url = [NSURL URLWithString:request.url];\n  NSURLRequest* url_request = [NSURLRequest requestWithURL:url\n                                               cachePolicy:NSURLRequestReloadIgnoringCacheData\n                                           timeoutInterval:5];\n\n  [NSURLConnection\n      sendAsynchronousRequest:url_request\n                        queue:[NSOperationQueue mainQueue]\n            completionHandler:^(NSURLResponse* _Nullable response, NSData* _Nullable data,\n                                NSError* _Nullable connectionError) {\n              if (!connectionError) {\n                //notify font data\n                callback(data, nil);\n              } else {\n                callback(data, connectionError);\n              }\n            }];\n\n\n@end\n\n//构造`LynxView`时注入\nLynxViewBuilder.genericResourceFetcher = [[ExampleGenericResourceFetcher alloc] init];\n```\n\n----------------------------------------\n\nTITLE: Configuring Stage 3 Decorator Syntax\nDESCRIPTION: Example showing how to configure RSpeedy to use the Stage 3 decorator proposal syntax (2022-03 version), which is compatible with TypeScript 5.0.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/api/rspeedy/rspeedy.decorators.version.md#2025-04-17_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineConfig } from '@lynx-js/rspeedy'\n\nexport default defineConfig({\n  source: {\n    decorators: { version: '2022-03' },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Basic ScrollView Import Statement\nDESCRIPTION: Import statement showing required dependencies for the scroll-view component.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/elements/built-in/scroll-view.mdx#2025-04-17_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { Required, Deprecated, AndroidOnly, IOSOnly, Go } from '@lynx';\n\nimport data from 'virtual-jwt';\n```\n\n----------------------------------------\n\nTITLE: Element with ID in JSX\nDESCRIPTION: Example showing how frontend tags with ID attributes are written in JSX. This view element has an ID of 'video' which will be compiled into render instructions.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/engine/element-api/__SetID.mdx#2025-04-17_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<view id=\"video\" />\n```\n\n----------------------------------------\n\nTITLE: Applying Inline Styles Using SetInlineStyles in JavaScript\nDESCRIPTION: Shows how to use the __SetInlineStyles function in JavaScript to create an element and apply inline styles. This example creates a 'view' element and sets its src attribute and positioning styles.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/engine/element-api/__SetInlineStyles.mdx#2025-04-17_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// main-thread.js\nlet element = __CreateElement('view', 0, {});\n__SetAttribute(element, 'src', 'xx');\n\n__SetInlineStyles(element, {\n  top: '10px',\n  left: '10px',\n  right: '10px',\n  bottom: '10px',\n});\n```\n\n----------------------------------------\n\nTITLE: Input Tag Example in LynxUI\nDESCRIPTION: A simple example of an input tag in JSX format that would be processed by the LynxUI framework.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/engine/element-api/__CreateElement.mdx#2025-04-17_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<input />\n```\n\n----------------------------------------\n\nTITLE: Formal CSS Animation Delay Syntax Definition\nDESCRIPTION: The formal syntax definition for the animation-delay property showing that it accepts time values and defaults to 0s when not specified.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/css/properties/animation-delay.mdx#2025-04-17_snippet_1\n\nLANGUAGE: css\nCODE:\n```\n/* default value: 0s */\nanimation-delay: <time>;\n```\n\n----------------------------------------\n\nTITLE: Registering Objective-C NativeLocalStorageModule in Lynx Runtime\nDESCRIPTION: Code snippet for registering the Objective-C implementation of the NativeLocalStorageModule in the Lynx runtime environment. This makes the module available to JavaScript code running in Lynx.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/guide/custom-native-modules/native-module-ios.mdx#2025-04-17_snippet_4\n\nLANGUAGE: objective-c\nCODE:\n```\n#import \"NativeLocalStorageModule.h\"\n\n- (void)setupLynxEnv {\n  // ...\n\n  // register global JS module\n  [globalConfig registerModule:NativeLocalStorageModule.class];\n\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Defining setNativeProps Method Signature in TypeScript\nDESCRIPTION: This snippet shows the TypeScript signature for the setNativeProps method, which takes a Record of string keys and any values as nativeProps, and returns a SelectorQuery object.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/lynx-api/nodes-ref/nodes-ref-set-native-props.mdx#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nsetNativeProps(nativeProps: Record<string, any>): SelectorQuery;\n```\n\n----------------------------------------\n\nTITLE: Declaring SetCSSId Function Signature in JSX\nDESCRIPTION: Function signature for __SetCSSId that sets a CSS ID for a DOM Element. It accepts an Element object and a numeric cssID as parameters and returns void.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/engine/element-api/__SetCSSId.mdx#2025-04-17_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n__SetCSSId(element: Element, cssID: number) : void;\n```\n\n----------------------------------------\n\nTITLE: Generating JS Code Cache for TemplateBundle in Java\nDESCRIPTION: Starts a child thread task to generate JS code cache for the current template. Supports generation of either V8 or QuickJS code cache based on the useV8 parameter.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/api/lynx-native-api/template-bundle.mdx#2025-04-17_snippet_4\n\nLANGUAGE: java\nCODE:\n```\npublic void postJsCacheGenerationTask(String codeCacheSourceUrl, boolean useV8)\n```\n\n----------------------------------------\n\nTITLE: Setting Detailed border-top in CSS\nDESCRIPTION: Shows the equivalent expanded syntax for the border-top property, specifying width, style, and color explicitly.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/css/properties/border-top.mdx#2025-04-17_snippet_1\n\nLANGUAGE: css\nCODE:\n```\n.border {\n  border-top: 1px solid black;\n}\n```\n\n----------------------------------------\n\nTITLE: Radial Gradient Formal Syntax\nDESCRIPTION: Defines the formal syntax pattern for radial gradients, detailing the complex structure with options for shape (circle/ellipse), size, position, and color stops.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/css/data-type/gradient.mdx#2025-04-17_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\nradial-gradient(\n  [ [ circle || <length> ]                         [ at <position> ]? , |\n    [ ellipse || [ <length> | <percentage> ]{2} ]  [ at <position> ]? , |\n    [ [ circle | ellipse ] || <extent-keyword> ] [at <position> ]? , |\n    at <position> ,\n  ]?\n  <color-stop> [ , <color-stop> ]+\n)\n```\n\n----------------------------------------\n\nTITLE: CSS Margin Property Syntax Examples\nDESCRIPTION: Examples of different ways to specify the margin property in CSS, showing single-value, two-value, three-value, and four-value syntaxes with different units and the auto keyword.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/css/properties/margin.mdx#2025-04-17_snippet_0\n\nLANGUAGE: css\nCODE:\n```\n/* Apply to all four sides */\nmargin: 1em;\nmargin: -3px;\n\n/* top and bottom | left and right */\nmargin: 5% auto;\n\n/* top | left and right | bottom */\nmargin: 1em auto 2em;\n\n/* top | right | bottom | left */\nmargin: 2px 1em 0 auto;\n```\n\n----------------------------------------\n\nTITLE: Implementing render Method in React Components\nDESCRIPTION: Core render method for React components that returns ReactNode elements to be rendered to the DOM.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/react/Class.Component.mdx#2025-04-17_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nrender(): ReactNode\n```\n\n----------------------------------------\n\nTITLE: Handling Async Fetch Responses with Error Catching\nDESCRIPTION: Example of using async/await syntax to handle fetch responses and parse JSON data. This pattern includes proper error handling with try/catch to manage potential network failures.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/guide/interaction/networking.mdx#2025-04-17_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst getDataFromApiAsync = async () => {\n  try {\n    const response = await fetch(\n      'https://jsonplaceholder.typicode.com/todos/1',\n    );\n    const json = await response.json();\n    return json;\n  } catch (error) {\n    console.error(error);\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Decorators Property Type in TypeScript\nDESCRIPTION: Type definition for the optional decorators property that configures decorator syntax in the Source class. The property accepts either a Decorators object or undefined value.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/api/rspeedy/rspeedy.source.decorators.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ndecorators?: Decorators | undefined;\n```\n\n----------------------------------------\n\nTITLE: Basic relative-top-of CSS Property Usage\nDESCRIPTION: Shows the different ways to use the relative-top-of CSS property, including the default 'none' value and numeric values to reference specific sibling elements by their relative-id.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/css/properties/relative-top-of.mdx#2025-04-17_snippet_0\n\nLANGUAGE: css\nCODE:\n```\nrelative-top-of: none;\nrelative-top-of: 1;\nrelative-top-of: 2;\n```\n\n----------------------------------------\n\nTITLE: Defining PerformanceMetric StartTimestampName Attribute in TypeScript\nDESCRIPTION: Defines the 'startTimestampName' attribute of the PerformanceMetric type, representing the name of the metric's start timestamp.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/lynx-api/performance-api/performance-metric.mdx#2025-04-17_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nstartTimestampName: string;\n```\n\n----------------------------------------\n\nTITLE: Building LynxLoadMeta Object in Android\nDESCRIPTION: This code demonstrates how to construct a LynxLoadMeta object using the Builder pattern in Android. It shows setting the template URL, binary data, template bundle, initial data, and load options before building the final object.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/api/lynx-native-api/lynx-load-meta.mdx#2025-04-17_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nLynxLoadMeta.Builder builder = new LynxLoadMeta.Builder();\nbuilder.setUrl();\nbuilder.setBinaryData();\nbuilder.setTemplateBundle();\nbuilder.setInitialData();\nbuilder.addLoadOption();\nLynxLoadMeta meta = builder.build();\n```\n\n----------------------------------------\n\nTITLE: Getting Error Information in Objective-C\nDESCRIPTION: Method to retrieve an NSDictionary containing error information that can be queried using LynxErrorUserInfoKeyMessage key. Returns JSON string with code, subcode, message, level, and fix suggestion.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/errors/lynx-error.mdx#2025-04-17_snippet_7\n\nLANGUAGE: objective-c\nCODE:\n```\n- (NSDictionary*)userInfo\n```\n\n----------------------------------------\n\nTITLE: Using Tag Selector in TSX\nDESCRIPTION: Example of using a tag selector to match a view element.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/lynx-api/selector-query/selector-query-select.mdx#2025-04-17_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n// 'view'\n<view />\n```\n\n----------------------------------------\n\nTITLE: Implementing Offset Updates with Index Tracking\nDESCRIPTION: Shows how to implement offset updates with index tracking and callback handling between threads.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/guide/start/tutorial-product-detail.mdx#2025-04-17_snippet_11\n\nLANGUAGE: tsx\nCODE:\n```\nfunction useOffset({\n  itemWidth,\n  onIndexUpdate,\n}) {\n  const currentIndexRef = useMainThreadRef<number>(0);\n\n  function updateOffset(offset: number) {\n    ...\n    const index = Math.round(offset / itemWidth);\n    if (currentIndexRef.current !== index) {\n      currentIndexRef.current = index;\n      runOnBackground(onIndexUpdate)(index);\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining SetDataset Function Signature in JSX\nDESCRIPTION: Specifies the function signature for __SetDataset, which takes an Element and a dataset object as parameters and returns void.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/engine/element-api/__SetDataset.mdx#2025-04-17_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n__SetDataset(element: Element, dataset: Record<string, any>) : void;\n```\n\n----------------------------------------\n\nTITLE: Example Usage of GetID Function in JSX\nDESCRIPTION: Demonstrates how to use the __GetID function to retrieve an element's ID selector after creating an element and setting its ID using __SetID.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/engine/element-api/__GetID.mdx#2025-04-17_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n// main-thread.js\nlet element = __CreateElement('view', 0, {});\n__SetID(element, 'video');\n\nlet id = __GetID(element);\n```\n\n----------------------------------------\n\nTITLE: Nesting Elements in Lynx\nDESCRIPTION: Example showing how to nest multiple text elements within a view container element to create a hierarchical structure.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/guide/ui/elements-components.mdx#2025-04-17_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<view>\n  <text>Hello</text>\n  <text>Lynx</text>\n</view>\n```\n\n----------------------------------------\n\nTITLE: CSS Border Inline End Color Usage Examples\nDESCRIPTION: Examples showing different ways to specify the border-inline-end-color property using various color formats including named colors, hex codes, RGB values, HSLA values, currentColor keyword, and transparent keyword.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/css/properties/border-inline-end-color.mdx#2025-04-17_snippet_0\n\nLANGUAGE: css\nCODE:\n```\nborder-inline-end-color: red;\nborder-inline-end-color: #ffbb00;\nborder-inline-end-color: rgb(255, 0, 0);\nborder-inline-end-color: hsla(100%, 50%, 25%, 0.75);\nborder-inline-end-color: currentColor;\nborder-inline-end-color: transparent;\n```\n\n----------------------------------------\n\nTITLE: Applying Grayscale Filter in CSS\nDESCRIPTION: Demonstrates how to apply a grayscale filter to an element using CSS. The percentage value determines the intensity of the grayscale effect.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/css/properties/filter.mdx#2025-04-17_snippet_0\n\nLANGUAGE: css\nCODE:\n```\nfilter: grayscale(100%);\n```\n\n----------------------------------------\n\nTITLE: useReducer with Complex State Initialization\nDESCRIPTION: TypeScript definition for useReducer with full reducer type and complex initialization using both initial arg and initializer function. State includes both generic type I and ReducerState.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/react/Function.useReducer.mdx#2025-04-17_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nfunction useReducer<R, I>(\n   reducer: R,\n   initializerArg: I & ReducerState<R>,\n   initializer: (arg: I & ReducerState<R>) => ReducerState<R>): [ReducerState<R>, Dispatch<ReducerAction<R>>]\n```\n\n----------------------------------------\n\nTITLE: CreateElement Function Signature in LynxUI\nDESCRIPTION: The function signature for __CreateElement which creates an Element object. It takes a tagName string, parentComponentUniqueID number, and an optional info object as parameters and returns an Element object.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/engine/element-api/__CreateElement.mdx#2025-04-17_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n__CreateElement(tagName: string, parentComponentUniqueID: number, info?: object) : Element;\n```\n\n----------------------------------------\n\nTITLE: Defining CssExtract Loader Options Type in TypeScript\nDESCRIPTION: TypeScript type definition for the loaderOptions property of CssExtract class, which specifies configuration options for the CSS extract loader. The property is optional and accepts either CssExtractRspackLoaderOptions or undefined.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/rspeedy/rspeedy.cssextract.loaderoptions.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nloaderOptions?: CssExtractRspackLoaderOptions | undefined;\n```\n\n----------------------------------------\n\nTITLE: Syntax Definition for requireModuleAsync in TypeScript\nDESCRIPTION: The TypeScript declaration for the requireModuleAsync method, showing its generic type parameter, parameters, and return type.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/lynx-api/lynx/lynx-require-module-async.mdx#2025-04-17_snippet_0\n\nLANGUAGE: ts\nCODE:\n```\nrequireModuleAsync<T>(path: string, callback: (error: Error | null, exports?: T) => void): void;\n```\n\n----------------------------------------\n\nTITLE: Declaring setInterval Function Signature in TypeScript\nDESCRIPTION: TypeScript function signature for setInterval that takes a callback function and delay parameter, returning a numeric timer ID. The callback function takes no parameters and returns void, while the delay is specified in milliseconds.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/lynx-api/global/set-interval.mdx#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nsetInterval(function: () => void, delay: number): number;\n```\n\n----------------------------------------\n\nTITLE: Configuring CSS Inheritance in Rsbuild\nDESCRIPTION: Example configuration showing how to enable CSS inheritance and specify custom inheritable CSS properties using the pluginReactLynx plugin in a Rsbuild configuration file.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/api/rspeedy/react-rsbuild-plugin.pluginreactlynxoptions.customcssinheritancelist.md#2025-04-17_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineConfig } from '@lynx-js/rspeedy'\n\nexport default defineConfig({\n plugins: [\n   pluginReactLynx({\n     enableCSSInheritance: true,\n     customCSSInheritanceList: ['direction', 'overflow']\n   }),\n ],\n})\n```\n\n----------------------------------------\n\nTITLE: Defining ChunkSplitCustom.strategy Property in TypeScript\nDESCRIPTION: This code snippet defines the 'strategy' property for the ChunkSplitCustom interface. The property is of type string and is specifically set to the value 'custom', indicating a custom chunk splitting strategy.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/rspeedy/rspeedy.chunksplitcustom.strategy.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nstrategy: 'custom';\n```\n\n----------------------------------------\n\nTITLE: Getting Error Code in Objective-C\nDESCRIPTION: Method to retrieve the error code which is a 3-4 digit number indicating the error behavior. For example, code 301 represents an image loading error.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/errors/lynx-error.mdx#2025-04-17_snippet_4\n\nLANGUAGE: objective-c\nCODE:\n```\n- (NSInteger)errorCode\n```\n\n----------------------------------------\n\nTITLE: Upgrading Rspeedy to Canary Version using PNPM\nDESCRIPTION: This command upgrades @lynx-js/rspeedy and its plugins to a canary version for testing purposes. It's crucial not to use canary versions in production environments. Users should replace the version number with their specific canary version.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/rspeedy/upgrade.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npnpm dlx upgrade-rspeedy-canary@0.8.2-canary-20250309-870106fc\n```\n\n----------------------------------------\n\nTITLE: Destroying LynxView Instance in Java for Android\nDESCRIPTION: This method is used to release the memory associated with a LynxView instance after it becomes unavailable. It's essential to call this method to prevent memory leaks in Android applications using Lynx.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/lynx-native-api/lynx-view/destroy.mdx#2025-04-17_snippet_0\n\nLANGUAGE: java\nCODE:\n```\npublic void destroy();\n```\n\n----------------------------------------\n\nTITLE: Sample JSON Data from iOS\nDESCRIPTION: Example of JSON data format provided by iOS platform. This shows the structure of data that might be passed as initialData from an iOS host, using a different property naming convention.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/guide/use-data-from-host-platform.mdx#2025-04-17_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"page_title\": \"Hello Lynx\"\n}\n```\n\n----------------------------------------\n\nTITLE: useRef Hook with Nullable Initial Value\nDESCRIPTION: TypeScript definition for useRef that accepts either null or a value of type T as the initial value. Returns a RefObject that may contain null. Useful when direct mutability is needed.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/api/react/Function.useRef.mdx#2025-04-17_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nfunction useRef<T>(initialValue: null | T): RefObject<T>\n```\n\n----------------------------------------\n\nTITLE: Using CSS justify-self Property\nDESCRIPTION: Various syntax examples for the justify-self CSS property showing different possible values including auto, stretch, center, start, and end.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/css/properties/justify-self.mdx#2025-04-17_snippet_0\n\nLANGUAGE: css\nCODE:\n```\njustify-self: auto;\njustify-self: stretch;\njustify-self: center;\njustify-self: start;\njustify-self: end;\n```\n\n----------------------------------------\n\nTITLE: React Component with i18next Integration\nDESCRIPTION: Example React component using i18next translation function\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/guide/inclusion/internationalization.mdx#2025-04-17_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useEffect } from '@lynx-js/react';\n\nimport { i18n } from './i18n.js';\n\nexport function App() {\n  useEffect(() => {\n    console.log(`Hello, ReactLynx x i18next!`);\n  }, []);\n\n  return (\n    <view>\n      <text>Hello, {i18n.t('world')}</text>\n    </view>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Lynx DevTool in iOS (Swift)\nDESCRIPTION: This code shows how to enable Lynx Debug, DevTool, and LogBox in an iOS application using Swift. It demonstrates the configuration during Lynx Environment Initialization.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/guide/start/integrate-lynx-devtool.mdx#2025-04-17_snippet_2\n\nLANGUAGE: swift\nCODE:\n```\nclass AppDelegate: UIResponder, UIApplicationDelegate {\n\n  func application(_ application: UIApplication, didFinishLaunchingWithOptions launchOptions: [UIApplication.LaunchOptionsKey: Any]?) -> Bool {\n    // ...\n    // Enable Lynx Debug\n    lynxEnv.lynxDebugEnabled = true\n    // Enable Lynx DevTool\n    lynxEnv.devtoolEnabled = true\n    // Enable Lynx LogBox\n    lynxEnv.logBoxEnabled = true\n    return true\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Transformed Import with camelToDashComponentName True\nDESCRIPTION: Example showing how the import statement is transformed when camelToDashComponentName is set to true, converting the path to kebab-case.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/rspeedy/rspeedy.transformimport.cameltodashcomponentname.md#2025-04-17_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport ButtonGroup from 'foo/button-group'\n```\n\n----------------------------------------\n\nTITLE: Defining Source.decorators Property in TypeScript\nDESCRIPTION: This code snippet shows the TypeScript signature for the decorators property of the Source class. It is an optional property of type Decorators or undefined, used to configure the decorators syntax.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/rspeedy/rspeedy.source.decorators.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ndecorators?: Decorators | undefined;\n```\n\n----------------------------------------\n\nTITLE: CSS Background Image Formal Syntax\nDESCRIPTION: Detailed formal syntax definition for background-image property, including gradient and position specifications.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/css/properties/background-image.mdx#2025-04-17_snippet_1\n\nLANGUAGE: css\nCODE:\n```\n<bg-image> = none | <image>\n\nwhere\n\n<image> = <url> | <gradient>\n\nwhere\n\n<gradient> = <linear-gradient()> | <radial-gradient()>\n\nwhere\n\n<linear-gradient()> = linear-gradient( [<angle> | to <side-or-corner>]?, <color-stop-list>)\n\n<radial-gradient()> = radial-gradient([<ending-shape> || <size> ] ? [ at <position> ]?, <color-stop-list>)\n\nwhere\n\n<side-or-corner> = [ left | right ] || [ top || bottom ]\n\n<ending-shape> = circle | ellipse\n\n<size> = closest-side | farthest-side | closest-corner | farthest-corner | <length> | <length-percentage>{2}\n\n<position> = [ [ left | center | right ] || [ top | center | bottom ] | [ left | center | right | <length-percentage> ] [ top | center | bottom | <length-percentage> ]? | [ [ left | right ] <length-percentage> ] && [ [ top | bottom ] <length-percentage> ] ]\n\n<color-stop-list> = [ <linear-color-stop> [, <linear-color-hint> ]? ]\n\nwhere\n\n<linear-color-stop> = <color>\n\n<linear-color-hint> = <length-percentage>\n\n<length-percentage> = <length> | <percentage>\n```\n\n----------------------------------------\n\nTITLE: Using InitDataProvider in React Component Hierarchy\nDESCRIPTION: Code snippet demonstrating how to use InitDataProvider as a parent component for components that use InitDataConsumer. This shows the required component structure for class-based context consumption.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/guide/use-data-from-host-platform.mdx#2025-04-17_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n<InitDataProvider>\n  <view>\n    <C />\n  </view>\n</InitDataProvider>\n```\n\n----------------------------------------\n\nTITLE: Implementing Font Resource Fetcher in Android for Lynx\nDESCRIPTION: Java implementation of GenericResourceFetcher in Android to download and load custom font resources for Lynx applications.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/api/elements/built-in/text.mdx#2025-04-17_snippet_7\n\nLANGUAGE: java\nCODE:\n```\npublic class ExampleGenericResourceFetcher extends LynxGenericResourceFetcher {\n  @Override\n  public void fetchResource(LynxResourceRequest request, LynxResourceCallback<byte[]> callback) {\n    ...\n      //download font file through http\n      byte[] data = new byte[(int) file.length()];\n\n      //notify the font data if success\n      callback.onResponse(LynxResourceResponse.onSuccess(data));\n\n    ...\n  }\n}\n\n//构造`LynxView`时注入\nLynxViewBuilder.setGenericResourceFetcher(new ExampleGenericResourceFetcher(context));\n```\n\n----------------------------------------\n\nTITLE: Setting Text Content of a Node using setNativeProps in JSX\nDESCRIPTION: This example demonstrates how to use setNativeProps to change the text content of a text node when a view is tapped. It selects the node by ID and sets its 'text' property.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/lynx-api/nodes-ref/nodes-ref-set-native-props.mdx#2025-04-17_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nfunction App() {\n  return (\n    <view\n      bindtap={() => {\n        lynx\n          .createSelectorQuery()\n          .select('#intro')\n          .setNativeProps({\n            text: 'Hello, Lynx!',\n          })\n          .exec();\n      }}\n    >\n      <text id=\"intro\">Hello, World!</text>\n    </view>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Using __AddClass in Main Thread JavaScript\nDESCRIPTION: Demonstrates the usage of __AddClass function along with other related functions to create and modify an element with multiple classes.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/engine/element-api/__AddClass.mdx#2025-04-17_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n// main-thread.js\nlet element = __CreateElement('view', 0, {});\n__SetAttribute(element, 'src', 'xx');\n__AddClass(element, 'A');\n__AddClass(element, 'B');\n__AddClass(element, 'C');\n```\n\n----------------------------------------\n\nTITLE: Defining useDebugValue Function in TypeScript for React\nDESCRIPTION: This snippet defines the type signature for the useDebugValue function in React. It takes a value of type T and an optional format function, and is used to display labels for custom hooks in React DevTools.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/react/Function.useDebugValue.mdx#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction useDebugValue<T>(value: T, format?: (value: T) => any): void\n```\n\n----------------------------------------\n\nTITLE: Example Usage of AppendElement in Frontend Framework\nDESCRIPTION: Demonstrates creating parent and child elements using __CreateElement and then appending the child to the parent using __AppendElement in the main thread.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/engine/element-api/__AppendElement.mdx#2025-04-17_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n// main-thread.js\nlet child = __CreateElement('view', 0, {});\n\nlet parent = __CreateElement('view', 0, {});\n\n__AppendElement(parent, child);\n```\n\n----------------------------------------\n\nTITLE: Implementing Layout Complete Event Handler\nDESCRIPTION: TypeScript interface definition for the layout complete event which is triggered after list layout is completed, providing information about layout ID, scroll state, and diff results between updates.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/api/elements/built-in/list.mdx#2025-04-17_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nbindlayoutcomplete?: EventHandler<ListLayoutFinishEvent>;\n\ninterface LayoutCompleteEvent extends BaseEvent<'layoutcomplete', {}> {\n  detail: {\n    'layout-id': number;\n    // 需要开启 need-layout-complete-info\n    scrollInfo: ListScrollInfo;\n    // 需要开启 need-layout-complete-info\n    diffResult?: {\n      insertions: number[];\n      move_from: number[];\n      move_to: number[];\n      removals: number[];\n      update_from: number[];\n      update_to: number[];\n    };\n    // 需要开启 need-layout-complete-info\n    visibleCellsAfterUpdate?: ListItemInfo[];\n    // 需要开启 need-layout-complete-info\n    visibleCellsBeforeUpdate?: ListItemInfo[];\n  };\n}\n\ninterface ListItemInfo {\n  // 子节点高度\n  height: number;\n  // 子节点宽度\n  width: number;\n  // 子节点 itemKey\n  itemKey: string;\n  // 子节点是否处于渲染状态\n  isBinding: boolean;\n  // 子节点相对于全部滚动区域的 x 坐标位置\n  originX: number;\n  // 子节点相对于全部滚动区域的 y 坐标位置\n  originY: number;\n  // 子节点是否存被更新\n  updated: boolean;\n}\n```\n\n----------------------------------------\n\nTITLE: Formal Syntax for CSS border-top Property\nDESCRIPTION: Provides the formal syntax definition for the border-top property, including possible values for line-width, line-style, and color.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/css/properties/border-top.mdx#2025-04-17_snippet_2\n\nLANGUAGE: css\nCODE:\n```\n<line-width> || <line-style> || <color>\nwhere\n<line-width> = <length> | thin | medium | thick\n<line-style> = none | hidden | dotted | dashed | solid | double | groove | ridge | inset | outset\n```\n\n----------------------------------------\n\nTITLE: Defining useLynxGlobalEventListener Function in TypeScript\nDESCRIPTION: This snippet defines the useLynxGlobalEventListener function, which takes an event name and a listener function as parameters. It's a generic function that helps add listeners as early as possible in a Lynx application.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/react/Function.useLynxGlobalEventListener.mdx#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction useLynxGlobalEventListener<T>(eventName: string, listener: T): void\n```\n\n----------------------------------------\n\nTITLE: Configuring Flattened Directory Structure\nDESCRIPTION: Example configuration to flatten the output directory structure by modifying output paths and filenames using the Rspeedy config.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/rspeedy/output.md#2025-04-17_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nimport { defineConfig } from '@lynx-js/rspeedy';\n\nexport default defineConfig({\n  output: {\n    distPath: {\n      js: '',\n    },\n    filename: {\n      bundle: '[name].lynx.bundle',\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: BeforePublishEvent add() Method Signature in TypeScript\nDESCRIPTION: The method signature for the add() method which registers an event listener for a specific element event. It takes an event name, a listener callback function, and an optional context parameter that can be a custom component or card instance.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/lynx-api/lynx/lynx-before-publish-event/before-publish-event-add.mdx#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nadd(name: string, listener: () => {}, context?: BaseInstance): BeforePublishEvent;\n```\n\n----------------------------------------\n\nTITLE: Using __AddDataset in JavaScript\nDESCRIPTION: This snippet shows how to use the __AddDataset function in JavaScript to create an element and add a data attribute to it.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/engine/element-api/__AddDataset.mdx#2025-04-17_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// main-thread.js\nlet element = __CreateElement('view', 0, {});\n__AddDataset(element, 'key', 'value');\n```\n\n----------------------------------------\n\nTITLE: Defining diffVdomEnd property in FrameworkPipelineTiming interface\nDESCRIPTION: Declares the timestamp property marking when the framework ends VDom Diff on the background thread, stored as a floating-point Unix timestamp in milliseconds.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/lynx-api/performance-api/framework-pipeline-timing.mdx#2025-04-17_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\ndiffVdomEnd: number;\n```\n\n----------------------------------------\n\nTITLE: Using Go Component for Animation Example\nDESCRIPTION: JSX code that implements the Go component to display an interactive example of animation-duration with specified files and assets.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/css/properties/animation-duration.mdx#2025-04-17_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n<Go\n  example=\"css-api\"\n  img=\"https://lf-lynx.tiktok-cdns.com/obj/lynx-artifacts-oss-sg/lynx-website/assets/doc/css/animation-duration.gif\"\n  defaultEntryFile=\"dist/animation-duration.lynx.bundle\"\n  defaultFile=\"src/animation-duration/App.tsx\"\n  entry=\"src/animation-duration\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Rspeedy Build Command Help\nDESCRIPTION: Help output for the build command showing options for production builds\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/rspeedy/cli.md#2025-04-17_snippet_4\n\nLANGUAGE: text\nCODE:\n```\n➜ rspeedy build --help\n\nUsage: rspeedy build [options]\n\nOptions:\n  -c --config <config>      specify the configuration file, can be a relative or absolute path\n  --env-mode <mode>         specify the env mode to load the .env.[mode] file\n  --environment <name...>   specify the name of environment to build\n  -h, --help                display help for command\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of grid-row-start CSS Property\nDESCRIPTION: Examples of how to use the grid-row-start property with both numeric values and span values. Numeric values define the specific grid line to start from, while span values define how many rows the item should span.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/css/properties/grid-row-start.mdx#2025-04-17_snippet_0\n\nLANGUAGE: css\nCODE:\n```\n/* <number> values */\ngrid-row-start: 1;\ngrid-row-start: 2;\n\n/* span  <number> values*/\ngrid-row-start: span 1;\n```\n\n----------------------------------------\n\nTITLE: Formal Syntax Definition for CSS 'right' Property\nDESCRIPTION: This code block defines the formal syntax for the 'right' property in CSS, showing the possible value types it can accept.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/api/css/properties/right.mdx#2025-04-17_snippet_1\n\nLANGUAGE: css\nCODE:\n```\nright =\n  auto                 |\n  <length-percentage>  |\n\n<length-percentage> =\n  <length>      |\n  <percentage>\n```\n\n----------------------------------------\n\nTITLE: Defining LynxTemplateResourceFetcher Protocol in Objective-C\nDESCRIPTION: Protocol definition for resource fetching interface in iOS that handles template fetching through the fetchTemplate method. Used for obtaining AppBundle and LazyBundle contents.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/lynx-native-api/resource-fetcher/TemplateResourceFetcher.mdx#2025-04-17_snippet_3\n\nLANGUAGE: objective-c\nCODE:\n```\n@protocol LynxTemplateResourceFetcher <NSObject>\n\n/**\n * fetch Bundle etc.\n *\n * @param request\n * @param callback response with the requiring content file: NSData* or TemplateBundle\n */\n@required\n- (void)fetchTemplate:(LynxResourceRequest* _Nonnull)request\n           onComplete:(LynxTemplateResourceCompletionBlock _Nonnull)callback;\n\n@end\n\nNS_ASSUME_NONNULL_END\n```\n\n----------------------------------------\n\nTITLE: Updating LynxView Viewport in iOS\nDESCRIPTION: Two Objective-C methods for updating LynxView viewport dimensions in iOS. The first method updates only dimensions, while the second includes an additional parameter to control layout triggering.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/lynx-native-api/lynx-view/update-viewport.mdx#2025-04-17_snippet_1\n\nLANGUAGE: objc\nCODE:\n```\n- (void)updateViewportWithPreferredLayoutWidth:(CGFloat)preferredLayoutWidth\n                        preferredLayoutHeight:(CGFloat)preferredLayoutHeight;\n\n- (void)updateViewportWithPreferredLayoutWidth:(CGFloat)preferredLayoutWidth\n                         preferredLayoutHeight:(CGFloat)preferredLayoutHeight\n                                    needLayout:(BOOL)needLayout;\n```\n\n----------------------------------------\n\nTITLE: Disabling File Size Printing in Rspeedy Configuration\nDESCRIPTION: Example of how to disable file size printing by setting printFileSize to false in the Rspeedy configuration.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/api/rspeedy/rspeedy.performance.printfilesize.md#2025-04-17_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineConfig } from '@lynx-js/rspeedy'\n\nexport default defineConfig({\n  performance: {\n    printFileSize: false\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Querying Multiple DOM Elements with Lynx in TypeScript\nDESCRIPTION: Definition of querySelectorAll method in the Lynx interface. This method selects all elements matching a given CSS selector in the page.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/react/Interface.Lynx.mdx#2025-04-17_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nquerySelectorAll: (selector: string) => Element[];\n```\n\n----------------------------------------\n\nTITLE: Image Rendering Formal Syntax Definition\nDESCRIPTION: Defines the formal syntax structure for the image-rendering property showing all possible values.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/css/properties/image-rendering.mdx#2025-04-17_snippet_1\n\nLANGUAGE: css\nCODE:\n```\nimage-rendering = auto | crisp-edges | pixelated\n```\n\n----------------------------------------\n\nTITLE: Finding UI Elements by ID in Android\nDESCRIPTION: Android implementation for finding LynxUI nodes using an ID selector. Returns a LynxBaseUI instance based on the provided ID string that matches the front-end layout specification.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/lynx-native-api/lynx-view/find-ui-by-idselector.mdx#2025-04-17_snippet_0\n\nLANGUAGE: java\nCODE:\n```\npublic LynxBaseUI findUIByIdSelector(String id);\n```\n\n----------------------------------------\n\nTITLE: Creating Reference Object with TypeScript React\nDESCRIPTION: Function signature for React's createRef utility that creates a mutable ref object. Takes a generic type parameter T and returns a RefObject<T>. This is commonly used to create references to DOM elements or class components.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/react/Function.createRef.mdx#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction createRef<T>(): RefObject<T>\n```\n\n----------------------------------------\n\nTITLE: Enabling Edge Anti-Aliasing for Rotations in JSX\nDESCRIPTION: Example of using the allow-edge-antialiasing attribute on iOS to prevent jaggedness in rotated elements.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/css/properties/transform.mdx#2025-04-17_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\n<view allow-edge-antialiasing={true}></view>\n```\n\n----------------------------------------\n\nTITLE: Creating PageElement with __CreatePage Function in JSX\nDESCRIPTION: The __CreatePage function creates a PageElement object. It takes a componentID (string), cssID (number), and optional info object as parameters. The function returns a PageElement, which is a special type of ComponentElement.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/engine/element-api/__CreatePage.mdx#2025-04-17_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n__CreatePage(componentID: string, cssID: number, info: Record<string, any>|null|undefined) : Element;\n```\n\n----------------------------------------\n\nTITLE: Retrieving Element Unique ID Syntax in Lynx Framework (JSX)\nDESCRIPTION: The function signature for __GetElementUniqueID, which takes an Element object as a parameter and returns a unique numeric identifier for that Element within the current LynxView.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/engine/element-api/__GetElementUniqueID.mdx#2025-04-17_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n__GetElementUniqueID(element: Element) : number;\n```\n\n----------------------------------------\n\nTITLE: Upgrading Rspeedy to Latest Version using NPX\nDESCRIPTION: This command upgrades @lynx-js/rspeedy and its plugins to the latest version using the upgrade-rspeedy tool. It's recommended for most users to keep their project up-to-date.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/rspeedy/upgrade.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx upgrade-rspeedy@latest\n```\n\n----------------------------------------\n\nTITLE: Grid Row Span Basic CSS Usage\nDESCRIPTION: Demonstrates the basic syntax for using grid-row-span property to control grid item placement. The property accepts numeric values to determine how many rows an item should span.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/css/properties/grid-row-span.mdx#2025-04-17_snippet_0\n\nLANGUAGE: css\nCODE:\n```\n/* <number> values */\ngrid-row-span: 1;\ngrid-row-span: 2;\n```\n\n----------------------------------------\n\nTITLE: Compatibility Table Component Reference\nDESCRIPTION: JSX code showing how to include a compatibility table for the box-sizing property using the LegacyCompatTable component from Lynx.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/css/properties/box-sizing.mdx#2025-04-17_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\n<LegacyCompatTable metadata=\"css/properties/box-sizing\" />\n```\n\n----------------------------------------\n\nTITLE: useReducer with Separate Initial State Type\nDESCRIPTION: TypeScript definition for useReducer with separate initial state type and full reducer functionality. Uses initializer function to transform initial argument.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/react/Function.useReducer.mdx#2025-04-17_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nfunction useReducer<R, I>(\n   reducer: R,\n   initializerArg: I,\n   initializer: (arg: I) => ReducerState<R>): [ReducerState<R>, Dispatch<ReducerAction<R>>]\n```\n\n----------------------------------------\n\nTITLE: Loading Remote Resources with requireModule() in TSX\nDESCRIPTION: Example of using lynx.requireModule() to load a remote JavaScript module from an external URL. The module is imported synchronously and assigned to a constant.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/lynx-api/lynx/lynx-require-module.mdx#2025-04-17_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nconst foo = lynx.requireModule('https://example.com/path/to/chunk');\n```\n\n----------------------------------------\n\nTITLE: TypeScript Definition for Source.define Property\nDESCRIPTION: TypeScript type signature for the define property, showing it accepts a Record of string keys with various value types or undefined.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/rspeedy/rspeedy.source.define.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ndefine?: Record<string, string | number | boolean | undefined | Record<string, unknown>> | undefined;\n```\n\n----------------------------------------\n\nTITLE: Basic CSS Mask Property Usage Examples\nDESCRIPTION: Examples showing various ways to use the mask CSS shorthand property, including keyword values, image values, combined values, and multiple masks.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/css/properties/mask.mdx#2025-04-17_snippet_0\n\nLANGUAGE: css\nCODE:\n```\n/* Keyword values */\nmask: none;\n\n/* Image values */\nmask: url(mask.png); /* Pixel image used as mask */\n\n/* Combined values */\nmask: url(mask.png) 40px 20px; /* Pixel image used as mask positioned 40px from the top and 20px from the left */\nmask: url(mask.png) 0 0/50px 50px; /* Pixel image used as mask with a width and height of 50px */\nmask: url(mask.png) repeat-x; /* Pixel image used as horizontally repeated mask */\nmask: url(mask.png) stroke-box; /* Pixel image used as mask extending to the box enclosed by the stroke */\n\n/* Multiple masks */\nmask:\n  url(masks.png) left / 16px repeat-y,\n  /* Pixel image is used as a mask on the left-hand side with a width of 16px */\n    url(masks.png) right / 16px repeat-y; /* Pixel image is used as a mask on the right-hand side with a width of 16px */\n```\n\n----------------------------------------\n\nTITLE: Main Thread Directive Implementation\nDESCRIPTION: Shows how to implement main thread execution using the 'main thread' directive for handling animations and gestures in the main thread.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/api/react/Document.directives.mdx#2025-04-17_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport {MainThread} from \"@lynx-js/types\";\n\nexport default function App() {\n  const red = 'red';\n\n  function handleTap(event: MainThread.TouchEvent) {\n    'main thread';\n    event.currentTarget.setStyleProperty('background-color', red);\n  }\n\n  return (\n    <view main-thread:bindtap={handleTap}>\n      <text>Hello World!</text>\n    </view>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Defining ChunkSplitBySize Interface in TypeScript\nDESCRIPTION: TypeScript interface definition for ChunkSplitBySize that specifies the configuration options for chunk splitting strategy. It includes properties for controlling minimum and maximum chunk sizes, custom Rspack configuration overrides, and the splitting strategy type.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/rspeedy/rspeedy.chunksplitbysize.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface ChunkSplitBySize \n```\n\n----------------------------------------\n\nTITLE: Defining ChunkSplitBySize minSize Type in TypeScript\nDESCRIPTION: TypeScript type definition for the minSize property, which specifies the minimum chunk size in bytes. The property is optional and accepts either a number or undefined value.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/rspeedy/rspeedy.chunksplitbysize.minsize.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nminSize?: number | undefined;\n```\n\n----------------------------------------\n\nTITLE: Using ExposedAPI in Rsbuild Plugin Example\nDESCRIPTION: Example code showing how to access the ExposedAPI in a custom Rsbuild plugin. The example demonstrates importing the ExposedAPI type and using it with api.useExposed() to access Rspeedy functionality.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/api/rspeedy/rspeedy.exposedapi.md#2025-04-17_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { ExposedAPI } from '@lynx-js/rspeedy'\nconst RsbuildPlugin = {\n  name: 'my-rsbuild-plugin',\n  pre: ['lynx:rsbuild:plugin-api'],\n  setup(api) {\n    const rspeedyAPI = api.useExposed<ExposedAPI>(Symbol.for('rspeedy.api'))\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Scroll Orientation Attribute in TSX\nDESCRIPTION: Defines the required scroll-orientation attribute that sets the scrolling and layout direction of the <list> component. Default value is \"vertical\".\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/elements/built-in/list.mdx#2025-04-17_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n// DefaultValue: \"vertical\"\nscroll-orientation?: 'vertical' ｜ 'horizontal'\n```\n\n----------------------------------------\n\nTITLE: Finding UI Elements by Name - Android Implementation\nDESCRIPTION: Java method to find LynxUI nodes based on the name attribute. Returns a LynxBaseUI object that matches the specified name in the layout file.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/lynx-native-api/lynx-view/find-ui-by-name.mdx#2025-04-17_snippet_0\n\nLANGUAGE: java\nCODE:\n```\npublic LynxBaseUI findUIByName(String name);\n```\n\n----------------------------------------\n\nTITLE: Basic Linear Layout Gravity Syntax in CSS\nDESCRIPTION: Shows the different possible values for the linear-layout-gravity property in CSS syntax. This property controls how elements are positioned perpendicular to the layout direction in a linear container.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/css/properties/linear-layout-gravity.mdx#2025-04-17_snippet_0\n\nLANGUAGE: css\nCODE:\n```\nlinear-layout-gravity: none;\nlinear-layout-gravity: stretch;\nlinear-layout-gravity: start;\nlinear-layout-gravity: end;\nlinear-layout-gravity: center;\n```\n\n----------------------------------------\n\nTITLE: useReducer with Direct Initial State\nDESCRIPTION: TypeScript definition for basic useReducer implementation with direct initial state value. No initialization function is used.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/react/Function.useReducer.mdx#2025-04-17_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nfunction useReducer<R>(\n   reducer: R,\n   initialState: ReducerState<R>,\n   initializer?: undefined): [ReducerState<R>, Dispatch<ReducerAction<R>>]\n```\n\n----------------------------------------\n\nTITLE: CSS Animation Timing Function Basic Syntax\nDESCRIPTION: Demonstrates various keyword and function values for the animation-timing-function property, including ease variants, linear, cubic-bezier, steps, and frames functions. Also shows how to specify multiple timing functions for multiple animations.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/css/properties/animation-timing-function.mdx#2025-04-17_snippet_0\n\nLANGUAGE: css\nCODE:\n```\n/* Keyword values */\nanimation-timing-function: ease;\nanimation-timing-function: ease-in;\nanimation-timing-function: ease-out;\nanimation-timing-function: ease-in-out;\nanimation-timing-function: linear;\n\n/* Function values */\nanimation-timing-function: cubic-bezier(0.1, 0.7, 1, 0.1);\nanimation-timing-function: steps(4, end);\nanimation-timing-function: frames(10);\n\n/* Multiple animations */\nanimation-timing-function: ease, steps(5, end), cubic-bezier(0.1, 0.7, 1, 0.1);\n```\n\n----------------------------------------\n\nTITLE: Defining the 'shake' Property in PluginReactLynxOptions Interface (TypeScript)\nDESCRIPTION: This code snippet defines the 'shake' property in the PluginReactLynxOptions interface. It is an optional property that accepts a partial ShakeVisitorConfig object or undefined. This property is used to configure how main-thread code will be shaken in the React Rsbuild plugin.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/rspeedy/react-rsbuild-plugin.pluginreactlynxoptions.shake.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nshake?: Partial<ShakeVisitorConfig> | undefined;\n```\n\n----------------------------------------\n\nTITLE: Lynx Layout Component Structure\nDESCRIPTION: Example Go component structure demonstrating layout properties with an image reference and file configurations for the layout example.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/guide/ui/layout/index.mdx#2025-04-17_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Go\n  img=\"https://lf-lynx.tiktok-cdns.com/obj/lynx-artifacts-oss-sg/lynx-website/assets/doc/sizing.png\"\n  example=\"layout\"\n  defaultEntryFile=\"dist/sizing.lynx.bundle\"\n  defaultFile=\"src/sizing/index.tsx\"\n  entry=\"src/sizing\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Defining engineVersion Property Type in PluginReactLynxOptions Interface\nDESCRIPTION: TypeScript type definition for the engineVersion property that specifies the minimum required Lynx Engine version. The property is optional and accepts a string value representing the version number.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/rspeedy/react-rsbuild-plugin.pluginreactlynxoptions.engineversion.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nengineVersion?: string;\n```\n\n----------------------------------------\n\nTITLE: Original Import Statement Example\nDESCRIPTION: Example of an input import statement before transformation.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/api/rspeedy/rspeedy.transformimport.transformtodefaultimport.md#2025-04-17_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Button } from 'foo'\n```\n\n----------------------------------------\n\nTITLE: Animation Direction Formal Syntax\nDESCRIPTION: Defines the formal syntax for the animation-direction property showing the available values and default setting.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/css/properties/animation-direction.mdx#2025-04-17_snippet_1\n\nLANGUAGE: css\nCODE:\n```\n/*default value: normal*/\nanimation-direction: normal | reverse | alternate | alternate-reverse;\n```\n\n----------------------------------------\n\nTITLE: Defining border-bottom-right-radius in CSS\nDESCRIPTION: This snippet demonstrates the basic syntax for setting the border-bottom-right-radius property in CSS. It shows how to set both horizontal and vertical radii for the bottom-right corner of an element.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/css/properties/border-bottom-right-radius.mdx#2025-04-17_snippet_0\n\nLANGUAGE: css\nCODE:\n```\nborder-bottom-right-radius: 0.5em 1em;\n```\n\n----------------------------------------\n\nTITLE: Configuring LynxView Size Adaptation in Objective-C\nDESCRIPTION: This snippet demonstrates two approaches to make LynxView adapt its size. The first approach sets both width and height modes to undefined, allowing full content-based sizing. The second approach limits the width and height while still allowing adaptation up to those limits.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/guide/embed-lynx-to-native/embed-lynx-to-native-flex-iOS.mdx#2025-04-17_snippet_0\n\nLANGUAGE: Objective-C\nCODE:\n```\n_lynxView.layoutWidthMode = LynxViewSizeModeUndefined;\n_lynxView.layoutHeightMode = LynxViewSizeModeUndefined;\n\n//Alternatively, limit the width to 400 and the height to 750.\n_lynxView.preferredLayoutWidth = 400;\n_lynxView.preferredLayoutHeight = 750;\n_lynxView.layoutWidthMode = LynxViewSizeModeMax;\n_lynxView.layoutHeightMode = LynxViewSizeModeMax;\n```\n\n----------------------------------------\n\nTITLE: Defining SystemInfo Object Structure in TypeScript\nDESCRIPTION: Declares the structure of the SystemInfo object with its properties and their types. It includes information about the engine version, OS version, screen dimensions, platform, and runtime type.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/lynx-api/global/system-info.mdx#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ndeclare const SystemInfo: {\n  readonly engineVersion: string;\n  readonly lynxSdkVersion: string;\n  readonly osVersion: string;\n  readonly pixelHeight: number;\n  readonly pixelWidth: number;\n  readonly pixelRatio: number;\n  readonly platform: 'Android' | 'iOS' | 'macOS' | 'pc' | 'headless';\n  readonly runtimeType: 'v8' | 'jsc' | 'quickjs';\n};\n```\n\n----------------------------------------\n\nTITLE: Setting className Attribute in ReactLynx\nDESCRIPTION: Shows how to set the CSS class name in ReactLynx using the className attribute instead of class.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/api/elements/built-in/view.mdx#2025-04-17_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nclassName?: string;\n```\n\n----------------------------------------\n\nTITLE: Getting Error Subcode in Objective-C\nDESCRIPTION: Method to retrieve the error subcode which is a 5-6 digit number extending the error code to indicate specific error causes. For example, subcode 30101 indicates an oversized image error.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/errors/lynx-error.mdx#2025-04-17_snippet_5\n\nLANGUAGE: objective-c\nCODE:\n```\n- (NSInteger)subcode\n```\n\n----------------------------------------\n\nTITLE: Defining CSS align-items Property Syntax\nDESCRIPTION: Formal syntax definition for the align-items CSS property showing all supported values including stretch, center, start, end, flex-start, flex-end, baseline, and auto.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/css/properties/align-items.mdx#2025-04-17_snippet_0\n\nLANGUAGE: css\nCODE:\n```\nalign-items = stretch | center | start | end | flex-start | flex-end | baseline | auto\n```\n\n----------------------------------------\n\nTITLE: Forcing Same Version of a Package\nDESCRIPTION: Example of using alias to ensure all imports of 'dayjs' use the same version. This demonstrates a technique that can prevent version conflicts but may cause errors if not used carefully.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/api/rspeedy/rspeedy.source.alias.md#2025-04-17_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineConfig } from '@lynx-js/rspeedy'\nimport { createRequire } from 'module'\nconst require = createRequire(import.meta.url)\nexport default defineConfig({\n  source: {\n    alias: {\n      dayjs: require.resolve('dayjs'),\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Using RuntimeBadge Component\nDESCRIPTION: Shows how to use RuntimeBadge to indicate the runtime type for code snippets. Supports 'mts' and 'bts' runtime types.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/internal/docs-contribution-guide/doc-components.mdx#2025-04-17_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\n// Render a mts badge\n<RuntimeBadge type=\"mts\" />\n\n// Render an bts badge\n<RuntimeBadge status=\"bts\" />\n\n```\n\n----------------------------------------\n\nTITLE: Defining Sticky Attribute in TSX\nDESCRIPTION: Defines the sticky attribute that controls whether the <list> component as a whole can be sticky at the top or bottom.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/elements/built-in/list.mdx#2025-04-17_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\n// DefaultValue: false\nsticky?: boolean\n```\n\n----------------------------------------\n\nTITLE: Finding UI Elements by Name - iOS Implementation\nDESCRIPTION: Objective-C method to find LynxUI nodes based on the name attribute. Returns a nullable LynxUI pointer that matches the specified name in the layout file.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/lynx-native-api/lynx-view/find-ui-by-name.mdx#2025-04-17_snippet_1\n\nLANGUAGE: objc\nCODE:\n```\n- (nullable LynxUI*)uiWithName:(nonnull NSString*)name;\n```\n\n----------------------------------------\n\nTITLE: Implicit Background-Only Function in useEffect (JSX)\nDESCRIPTION: This example demonstrates how a function can be implicitly treated as background-only when only called within a useEffect hook in ReactLynx.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/react/thinking-in-reactlynx.mdx#2025-04-17_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\nfunction App() {\n  function backgroundOnly() {\n    // 不需要标记这个函数\n    // 因为 `useEffect` 被视为后台专属\n    // `backgroundOnly` 会被优化器识别为未使用并移除\n  }\n  useEffect(() => {\n    backgroundOnly();\n  });\n  return <view />;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing QRCode Plugin in Rsbuild Configuration\nDESCRIPTION: Example showing how to use the pluginQRCode function in a Rsbuild configuration file. Demonstrates importing and adding the plugin to the Rsbuild plugins array.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/rspeedy/qrcode-rsbuild-plugin.pluginqrcode.md#2025-04-17_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// rsbuild.config.ts\nimport { pluginQRCode } from '@lynx-js/qrcode-rsbuild-plugin'\nexport default {\n  plugins: [pluginQRCode()],\n}\n```\n\n----------------------------------------\n\nTITLE: Using GetComponentID to Retrieve Component ID in JSX\nDESCRIPTION: Example showing how to create a component and then retrieve its componentID using the __GetComponentID function in a frontend framework.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/engine/element-api/__GetComponentID.mdx#2025-04-17_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n// main-thread.js\nlet element = __CreateComponent(0, '1', 1, '', 'name', 'path', {}, {});\n\nlet id = __GetComponentID(element);\n```\n\n----------------------------------------\n\nTITLE: Formal Syntax Definition for Linear Layout Gravity\nDESCRIPTION: Defines the formal syntax specification for the linear-layout-gravity property, showing the valid values that can be used with this property in Lynx applications.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/css/properties/linear-layout-gravity.mdx#2025-04-17_snippet_1\n\nLANGUAGE: css\nCODE:\n```\nlinear-layout-gravity = none | stretch | start | end | center\n```\n\n----------------------------------------\n\nTITLE: Formal Syntax of the CSS Border Property\nDESCRIPTION: The formal syntax definition for the border property, showing the acceptable values including line width, line style, and color options.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/css/properties/border.mdx#2025-04-17_snippet_1\n\nLANGUAGE: css\nCODE:\n```\n<line-width> || <line-style> || <color>\nwhere\n<line-width> = <length> | thin | medium | thick\n<line-style> = none | hidden | dotted | dashed | solid | double | groove | ridge | inset | outset\n```\n\n----------------------------------------\n\nTITLE: Defining PluginReactLynxOptions.compat Property in TypeScript\nDESCRIPTION: This code snippet defines the 'compat' property of the PluginReactLynxOptions interface. It's an optional property that accepts a partial CompatVisitorConfig object with an additional option to disable a specific warning. This option is primarily used for migration purposes from ReactLynx2.0.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/rspeedy/react-rsbuild-plugin.pluginreactlynxoptions.compat.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ncompat?: Partial<CompatVisitorConfig> & {\n        disableCreateSelectorQueryIncompatibleWarning?: boolean;\n    } | undefined;\n```\n\n----------------------------------------\n\nTITLE: CSS text-shadow Formal Syntax Definition\nDESCRIPTION: The formal syntax definition for the text-shadow property, showing the accepted pattern of values.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/css/properties/text-shadow.mdx#2025-04-17_snippet_1\n\nLANGUAGE: css\nCODE:\n```\nnone | [ <length>{3} <color> ]\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Sass Nesting Syntax in CSS for Lynx\nDESCRIPTION: This snippet shows how to use Sass nesting syntax to simplify CSS class declarations. The example demonstrates how a nested class with the & parent selector compiles to standard CSS with separate class declarations.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/guide/ui/styling.mdx#2025-04-17_snippet_0\n\nLANGUAGE: scss\nCODE:\n```\n.a {\n  background: red;\n  &-b {\n    border-radius: 30px;\n  }\n}\n\n/* equals */\n\n.a {\n  background: red;\n}\n\n.a-b {\n  border-radius: 30px;\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring React memo Function for FunctionComponent\nDESCRIPTION: Defines the type signature for the memo function when used with a FunctionComponent. Takes a component and an optional comparison function to determine if props have changed.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/api/react/Function.memo.mdx#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction memo<P>(Component: FunctionComponent<P>, propsAreEqual?: (prevProps: Readonly<P>, nextProps: Readonly<P>) => boolean): NamedExoticComponent<P>\n```\n\n----------------------------------------\n\nTITLE: Styling Text Color in Lynx\nDESCRIPTION: Demonstrates how to apply color styling to text elements in Lynx using the color CSS property.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/guide/styling/text-and-typography.mdx#2025-04-17_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n<text style={{ color: 'red' }}>hello world</text>\n```\n\n----------------------------------------\n\nTITLE: createElement for Generic HTML Elements in TypeScript\nDESCRIPTION: This overload of createElement is for creating generic HTML elements. It accepts a key from ReactHTML, props with ClassAttributes and HTML attributes, and optional children nodes.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/api/react/Function.createElement.mdx#2025-04-17_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nfunction createElement<P, T>(\n   type: keyof ReactHTML,\n   props?: null | ClassAttributes<T> & P, ...\nchildren?: ReactNode[]): DetailedReactHTMLElement<P, T>\n```\n\n----------------------------------------\n\nTITLE: Defining @font-face Rule in CSS for Lynx\nDESCRIPTION: The CSS syntax for defining custom fonts using @font-face in Lynx applications. This rule allows specifying a custom font-family name and source location, either from a URL or local installation.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/css/at-rule/font-face.mdx#2025-04-17_snippet_0\n\nLANGUAGE: css\nCODE:\n```\n@font-face {\n  [ font-family: <string>; ] ||\n  [ src: url(<string>) | local(<string>); ]\n}\n```\n\n----------------------------------------\n\nTITLE: CSS text-shadow Property Examples\nDESCRIPTION: Various examples of text-shadow syntax implementations, showing different combinations of offset-x, offset-y, blur-radius, and color parameters.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/css/properties/text-shadow.mdx#2025-04-17_snippet_0\n\nLANGUAGE: css\nCODE:\n```\n/* offset-x | offset-y | blur-radius | color */\ntext-shadow: 1px 1px 2px black;\n\n/* color | offset-x | offset-y | blur-radius */\ntext-shadow: #fc0 1px 0 10px;\n\n/* offset-x | offset-y | color */\ntext-shadow: 5px 5px #558abb;\n\n/* color | offset-x | offset-y */\ntext-shadow: white 2px 5px;\n\n/* offset-x | offset-y\n/* Use defaults for color and blur-radius */\ntext-shadow: 5px 10px;\n```\n\n----------------------------------------\n\nTITLE: HSL Color Syntax in CSS\nDESCRIPTION: This code snippet demonstrates the syntax for defining HSL colors in CSS using the hsl() and hsla() functions. It shows how to specify hue, saturation, lightness, and optional alpha values.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/css/data-type/color.mdx#2025-04-17_snippet_5\n\nLANGUAGE: CSS\nCODE:\n```\nhsl[a](H, S, L[, A]) or hsl[a](H S L[ / A])\n```\n\n----------------------------------------\n\nTITLE: Defining PureComponent Class in TypeScript\nDESCRIPTION: TypeScript class definition for React's PureComponent, extending Component with generic type parameters for props, state, and snapshot state.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/react/Class.PureComponent.mdx#2025-04-17_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nclass PureComponent<P, S, SS> extends Component<P, S, SS> {\n  constructor(props: P);\n  constructor(props: P, context: any);\n\n  readonly props: Readonly<P>;\n  state: Readonly<S>;\n  context: unknown;\n\n  static contextType?: Context<any>;\n\n  // Lifecycle methods\n  componentDidMount?(): void;\n  shouldComponentUpdate?(nextProps: Readonly<P>, nextState: Readonly<S>, nextContext: any): boolean;\n  componentDidUpdate?(prevProps: Readonly<P>, prevState: Readonly<S>, snapshot?: SS): void;\n  componentWillUnmount?(): void;\n  componentDidCatch?(error: Error, errorInfo: ErrorInfo): void;\n\n  // Deprecated lifecycle methods\n  UNSAFE_componentWillMount?(): void;\n  UNSAFE_componentWillReceiveProps?(nextProps: Readonly<P>, nextContext: any): void;\n  UNSAFE_componentWillUpdate?(nextProps: Readonly<P>, nextState: Readonly<S>, nextContext: any): void;\n}\n```\n\n----------------------------------------\n\nTITLE: Applying Grayscale Filter Example\nDESCRIPTION: Example showing how to use selectRoot() with SelectorQuery to apply a grayscale filter to the entire page using setNativeProps.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/lynx-api/selector-query/selector-query-select-root.mdx#2025-04-17_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nlynx\n  .createSelectorQuery()\n  .selectRoot()\n  .setNativeProps({\n    filter: 'grayscale(100%)',\n  })\n  .exec();\n```\n\n----------------------------------------\n\nTITLE: Using border-start-end-radius with Different Values in CSS\nDESCRIPTION: Examples of how to use the border-start-end-radius property with both circular (single value) and elliptical (two values) border radius definitions.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/css/properties/border-start-end-radius.mdx#2025-04-17_snippet_0\n\nLANGUAGE: css\nCODE:\n```\n/* the corner is a circle */\n/* border-end-end-radius: radius */\nborder-start-end-radius: 3px;\n\n/* the corner is an ellipsis */\n/* border-end-end-radius: horizontal vertical */\nborder-start-end-radius: 0.5em 1em;\n```\n\n----------------------------------------\n\nTITLE: Compiling Frontend Input Tag to Render Instructions\nDESCRIPTION: Example showing how a simple <input> JSX tag gets compiled to the corresponding __CreateElement function call in the main thread JavaScript. This demonstrates the practical usage in the framework's compilation process.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/api/engine/element-api/__CreateElement.mdx#2025-04-17_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<input />\n```\n\nLANGUAGE: jsx\nCODE:\n```\n// main-thread.js\nlet element = __CreateElement('input', 0, {});\n```\n\n----------------------------------------\n\nTITLE: GetTag Function Syntax in JSX\nDESCRIPTION: This code block shows the syntax definition for the __GetTag function. It takes an Element object as a parameter and returns a string representing the tag selector of the Element.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/engine/element-api/__GetTag.mdx#2025-04-17_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n__GetTag(element: Element) : string;\n```\n\n----------------------------------------\n\nTITLE: Configuring Text Single Line Vertical Align Property in Lynx\nDESCRIPTION: Definition of the text-single-line-vertical-align property which controls vertical alignment of single-line text. Increases text measurement time.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/api/elements/built-in/text.mdx#2025-04-17_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\n// DefaultValue: 'normal'\ntext-single-line-vertical-align?: 'normal' | 'top' | 'center' | 'bottom';\n```\n\n----------------------------------------\n\nTITLE: Adding LynxView to the Window in Objective-C\nDESCRIPTION: Demonstrates how to add the previously created LynxView instance to the view hierarchy in Objective-C. This step is necessary to make the LynxView visible on screen.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/guide/start/fragments/ios/integrating-lynx-with-existing-app-ios.mdx#2025-04-17_snippet_8\n\nLANGUAGE: objective-c\nCODE:\n```\n#import <Lynx/LynxView.h>\n\n#import \"ViewController.h\"\n#import \"DemoLynxProvider.h\"\n\n@implementation ViewController\n\n- (void)viewDidLoad {\n  [super viewDidLoad];\n\n  // ...\n\n  [self.view addSubview:lynxView];\n}\n\n@end\n```\n\n----------------------------------------\n\nTITLE: Defining TransformImport Interface in TypeScript\nDESCRIPTION: This code snippet defines the TransformImport interface with its properties. It is used to configure import path transformations, similar to the functionality of babel-plugin-import.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/rspeedy/rspeedy.transformimport.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface TransformImport \n```\n\n----------------------------------------\n\nTITLE: TypeScript Signature for ChunkSplitBySize.minSize Property\nDESCRIPTION: The TypeScript signature for the minSize property which is an optional number that defaults to 10000 bytes.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/api/rspeedy/rspeedy.chunksplitbysize.minsize.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nminSize?: number | undefined;\n```\n\n----------------------------------------\n\nTITLE: Module Ignoring Configuration\nDESCRIPTION: Configuration example showing how to ignore specific modules by setting their alias value to false.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/rspeedy/rspeedy.source.alias.md#2025-04-17_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineConfig } from '@lynx-js/rspeedy'\nexport default defineConfig({\n  source: {\n    alias: {\n      'ignored-module': false,\n      './ignored-module': false,\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing scrollToPosition Method for List Navigation\nDESCRIPTION: Method to programmatically scroll the list to a specified position by index, with options for alignment, offset, and smooth animation behavior.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/api/elements/built-in/list.mdx#2025-04-17_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nthis.createSelectorQuery()\n  .select('#id_of_list')\n  .invoke({\n    method: 'scrollToPosition',\n    params: {\n      position: 10,\n      offset: 100,\n      alignTo: 'top',\n      smooth: true,\n    },\n    success: function (res) {},\n    fail: function (res) {},\n  })\n  .exec();\n```\n\n----------------------------------------\n\nTITLE: Loading Lynx Template in iOS\nDESCRIPTION: Method for loading Lynx templates in iOS using LynxLoadMetadata. This method serves as the main entry point for loading templates in the iOS environment.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/lynx-native-api/lynx-view/load-template.mdx#2025-04-17_snippet_1\n\nLANGUAGE: objectivec\nCODE:\n```\n- (void)loadTemplate:(nonnull LynxLoadMetadata*)meta;\n```\n\n----------------------------------------\n\nTITLE: CSS Visibility Property Syntax\nDESCRIPTION: This snippet shows the basic syntax for using the visibility property in CSS, including keyword values.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/api/css/properties/visibility.mdx#2025-04-17_snippet_1\n\nLANGUAGE: css\nCODE:\n```\n/* Keyword values */\nvisibility: visible;\nvisibility: hidden;\n```\n\n----------------------------------------\n\nTITLE: Basic String Error Example\nDESCRIPTION: Example showing how to report an error using a string parameter.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/lynx-api/lynx/lynx-report-error.mdx#2025-04-17_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nlynx.reportError('foo');\n```\n\n----------------------------------------\n\nTITLE: CSS relative-align-inline-start Basic Usage\nDESCRIPTION: Shows the basic syntax and possible values for the relative-align-inline-start property. Can be set to 'parent', 'none', or numeric values.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/css/properties/relative-align-inline-start.mdx#2025-04-17_snippet_0\n\nLANGUAGE: css\nCODE:\n```\nrelative-align-inline-start: parent;\nrelative-align-inline-start: none;\n\nrelative-align-inline-start: 1;\nrelative-align-inline-start: 2;\n```\n\n----------------------------------------\n\nTITLE: Configuring Single-Vendor Chunk Strategy\nDESCRIPTION: Example configuration using the single-vendor strategy to separate third-party dependencies into one chunk and source code into another using RSpeedy's defineConfig.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/rspeedy/rspeedy.chunksplit.strategy.md#2025-04-17_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineConfig } from '@lynx-js/rspeedy'\n\nexport default defineConfig({\n  performance: {\n    chunkSplit: {\n      strategy: 'single-vendor',\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Go Component Interface Definition\nDESCRIPTION: TypeScript interface definition for the Go component, detailing its props including example name, default file path, image URL, entry file, code highlighting options, directory focus, and schema for QR code generation.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/internal/docs-contribution-guide/doc-components.mdx#2025-04-17_snippet_13\n\nLANGUAGE: tsx\nCODE:\n```\ninterface Props {\n  /**\n   * 示例名称\n   *\n   * @example\n   * example=\"view\"\n   */\n  example: string;\n  /**\n   * 默认展示的文件\n   *\n   * @example\n   * defaultFile=\"src/App.tsx\"\n   */\n  defaultFile: string;\n  /**\n   * 示例截图, 如果未提供，则默认使用 example/preview-image.png 作为截图，支持多种格式 /^preview-image\\.(png|jpg|jpeg|webp|gif)$/\n   *\n   * @example\n   * img=\"https://lf-lynx.tiktok-cdns.com/obj/lynx-artifacts-oss-sg/lynx-website/assets/doc/view_render.jpeg\"\n   */\n  img?: string;\n  /**\n   * 默认展示的入口文件, 如果未提供，则默认使用 example/**.lynx.bundle 作为入口文件\n   *\n   * @example\n   * defaultEntryFile=\"dist/main.lynx.bundle\"\n   */\n  defaultEntryFile?: string;\n  /**\n   * 高亮代码行, 仅对 defaultFile 有效\n   *\n   * @example\n   * highlight=\"{1,3-5}\"\n   * or\n   * highlight={{\n   *   \"src/waterfall/index.tsx\": \"{1,3-5}\",\n   *   \"src/waterfall/App.tsx\": \"{1,3-5}\",\n   * }}\n   */\n  highlight?: string | Record<string,string>;\n  /**\n   * 重点高亮某个目录，将展示该目录下的所有文件 tabs，可以快速切换，适用多 entry 场景\n   *\n   * @example\n   * entry=\"src/waterfall\"\n   */\n  entry?: string;\n  /**\n   * 示例的 schema，将用于生成示例的二维码\n   *\n   * @example\n   * schema=\"{{{url}}}?bar_color=000000&back_button_style=dark\"\n   */\n  schema?: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Original Import Statement\nDESCRIPTION: An example of the original import statement before transformation.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/rspeedy/rspeedy.source.transformimport.md#2025-04-17_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Button } from 'foo'\n```\n\n----------------------------------------\n\nTITLE: Formal Syntax Definition for relative-align-right in Lynx CSS\nDESCRIPTION: Specifies the formal syntax for the relative-align-right property in Lynx CSS. It can accept 'none', 'parent', or a number value.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/css/properties/relative-align-right.mdx#2025-04-17_snippet_1\n\nLANGUAGE: css\nCODE:\n```\nrelative-align-right = none | parent | <number>\n```\n\n----------------------------------------\n\nTITLE: Implementing APITable with Frontmatter Query in MDX\nDESCRIPTION: Shows how to use the APITable component by defining the query in the page's frontmatter metadata. This method allows for more maintainable and centralized query management.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/src/components/api-table/README.md#2025-04-17_snippet_1\n\nLANGUAGE: mdx\nCODE:\n```\n---\napi: test/api\n---\n\n<APITable />\n```\n\n----------------------------------------\n\nTITLE: PureComponent Constructor Definition\nDESCRIPTION: Constructor definitions for PureComponent class, including overloads for props-only and props with context parameters.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/react/Class.PureComponent.mdx#2025-04-17_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nnew PureComponent<P, S, SS>(props: P): PureComponent<P, S, SS>\nnew PureComponent<P, S, SS>(props: P, context: any): PureComponent<P, S, SS>\n```\n\n----------------------------------------\n\nTITLE: Registering DevTool Service in Android (Java)\nDESCRIPTION: This code snippet demonstrates how to register the DevTool service in an Android application using Java.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/guide/start/integrate-lynx-devtool.mdx#2025-04-17_snippet_5\n\nLANGUAGE: java\nCODE:\n```\nprivate void initLynxService() {\n  // ...\n  // register DevTool service\n  LynxServiceCenter.inst().registerService(LynxDevToolService.INSTANCE);\n}\n```\n\n----------------------------------------\n\nTITLE: Basic English Locale Configuration\nDESCRIPTION: Basic JSON configuration file for English language translations\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/guide/inclusion/internationalization.mdx#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"world\": \"World\"\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing LynxEnv in Kotlin Application\nDESCRIPTION: Kotlin implementation for initializing LynxEnv, which provides the global initialization interface for the Lynx Engine. It should be completed during the Application's onCreate lifecycle before any interface calls to the Lynx Engine.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/guide/start/fragments/android/integrating-lynx-with-existing-app-android.mdx#2025-04-17_snippet_7\n\nLANGUAGE: kotlin\nCODE:\n```\nimport com.lynx.tasm.LynxEnv\n\nclass YourApplication : Application() {\n\n    override fun onCreate() {\n        super.onCreate()\n        initLynxService()\n        initLynxEnv()\n    }\n\n    private fun initLynxEnv() {\n        LynxEnv.inst().init(\n            this,\n            null,\n            null,\n            null\n        )\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting estimated-main-axis-size-px Attribute in TypeScript\nDESCRIPTION: Shows how to set the estimated-main-axis-size-px attribute for a <list-item>. This attribute specifies the placeholder size in the main axis direction before the item is fully rendered.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/elements/built-in/list.mdx#2025-04-17_snippet_26\n\nLANGUAGE: tsx\nCODE:\n```\n// DefaultValue: -1\nestimated-main-axis-size-px?: number\n<list-item\n  estimated-main-axis-size-px={100}\n/>\n```\n\n----------------------------------------\n\nTITLE: InitDataProvider Function Definition\nDESCRIPTION: TypeScript definition for the InitDataProvider function component that serves as a Context Provider. Takes props object and optional legacy context parameter.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/react/Function.InitDataProvider.mdx#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction InitDataProvider(props: object, deprecatedLegacyContext?: any): null | ReactElement<any, any>\n```\n\n----------------------------------------\n\nTITLE: Basic DataProcessor Registration Example in ReactLynx\nDESCRIPTION: Example showing how to register data processors before rendering a React application. Demonstrates the timing requirement that registerDataProcessors must be called before root.render().\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/api/react/Interface.Lynx.mdx#2025-04-17_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { root } from \"@lynx-js/react\"\n\n// You MUST call this before `root.render()`\nlynx.registerDataProcessors({\n  defaultDataProcessor: () => {...} // default DataProcessor\n  dataProcessors: {\n    getScreenMetricsOverride: () => {...} // named DataProcessor\n  }\n})\n\nroot.render(<App/>);\n```\n\n----------------------------------------\n\nTITLE: Defining the Config.plugins Property in TypeScript\nDESCRIPTION: TypeScript interface definition for the plugins property of the Config object. This property accepts RsbuildPlugins or undefined and is used to customize the build process.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/api/rspeedy/rspeedy.config.plugins.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nplugins?: RsbuildPlugins | undefined;\n```\n\n----------------------------------------\n\nTITLE: Updating Font Scale in Android (Java)\nDESCRIPTION: This method allows changing the font scaling ratio in client settings for Android applications. It takes a float parameter 'scale' to set the new font scaling value.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/lynx-native-api/lynx-view/update-font-scale.mdx#2025-04-17_snippet_0\n\nLANGUAGE: java\nCODE:\n```\npublic void updateFontScale(float scale);\n```\n\n----------------------------------------\n\nTITLE: Creating Element with Event Listener in Lynx SDK (JSX)\nDESCRIPTION: Shows how to create an element, set its attributes, and add an event listener using the __AddEvent function in the main thread of the Lynx SDK.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/engine/element-api/__AddEvent.mdx#2025-04-17_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n// main-thread.js\nlet element = __CreateElement('view', 0, {});\n__SetAttribute(element, 'src', 'xx');\n__AddEvent(element, 'bindEvent', 'tap', 'onTap');\n```\n\n----------------------------------------\n\nTITLE: Defining createRspeedy Function in TypeScript\nDESCRIPTION: Function signature for createRspeedy, which creates a Rspeedy instance for customizing build or development processes in Node.js Runtime.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/rspeedy/rspeedy.createrspeedy.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare function createRspeedy({ cwd, rspeedyConfig, loadEnv, environment }: CreateRspeedyOptions): Promise<RspeedyInstance>;\n```\n\n----------------------------------------\n\nTITLE: Styled View Container with Content\nDESCRIPTION: Example of a view element with padding and background styling containing text content.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/guide/ui/elements-components.mdx#2025-04-17_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<view style=\"padding:10px;background:gray;\">\n  <text>Hello Lynx</text>\n</view>\n```\n\n----------------------------------------\n\nTITLE: EntryDescription Configuration Example\nDESCRIPTION: Demonstrates advanced entry configuration using EntryDescription object for more detailed control.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/rspeedy/rspeedy.entry.md#2025-04-17_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineConfig } from '@lynx-js/rspeedy'\nexport default defineConfig({\n  entry: {\n    foo: './src/pages/foo/index.js',\n    bar: {\n      import: ['./src/prefetch.js', './src/pages/bar'],\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Styling View Container with Padding and Background in Lynx\nDESCRIPTION: Example showing how to style a view container with padding and background color, containing a text element.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/guide/ui/elements-components.mdx#2025-04-17_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<view style=\"padding:10px;background:gray;\">\n  <text>Hello Lynx</text>\n</view>\n```\n\n----------------------------------------\n\nTITLE: Empty Image Element Usage\nDESCRIPTION: Demonstrates using an empty image element tag with the src attribute to display an image.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/guide/ui/elements-components.mdx#2025-04-17_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<image src=\"assets/logo.png\" />\n```\n\n----------------------------------------\n\nTITLE: Implementing getSnapshotBeforeUpdate in React Component Class\nDESCRIPTION: Type definition for the getSnapshotBeforeUpdate lifecycle method that runs before React applies rendering changes to the DOM. It receives previous props and state, and returns a value that will be passed to componentDidUpdate.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/api/react/Class.Component.mdx#2025-04-17_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\noptional getSnapshotBeforeUpdate(prevProps: Readonly<P>, prevState: Readonly<S>): null | SS\n```\n\n----------------------------------------\n\nTITLE: Defining CustomEvent detail Property in TypeScript\nDESCRIPTION: Defines the detail property of CustomEvent which represents component state information. This is the recommended property to use instead of params.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/lynx-api/event/custom-event.mdx#2025-04-17_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ndetail: object;\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of the Go Component in MDX\nDESCRIPTION: Demonstrates the basic implementation of the Go component in MDX files, specifying an example name and a default file to display.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/src/components/go/README.md#2025-04-17_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Go example=\"animation\" defaultFile=\"src/transition_animation/index.tsx\" />\n```\n\n----------------------------------------\n\nTITLE: Basic PerformanceObserver.observe() Method Syntax in TypeScript\nDESCRIPTION: The syntax for the observe() method in TypeScript, which takes an array of entry identifiers and returns void.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/lynx-api/performance-api/performance-observer/observe.mdx#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nobserve(entryIdentifiers: string[]): void\n```\n\n----------------------------------------\n\nTITLE: Using relative-left-of in CSS\nDESCRIPTION: Examples of how to use the relative-left-of property in CSS. It can be set to 'none' (default) or a number representing the sibling element's ID.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/css/properties/relative-left-of.mdx#2025-04-17_snippet_0\n\nLANGUAGE: css\nCODE:\n```\nrelative-left-of: none;\nrelative-left-of: 1;\nrelative-left-of: 2;\n```\n\n----------------------------------------\n\nTITLE: Forcing Update of React Component\nDESCRIPTION: Shows the signature for the forceUpdate method used to manually trigger a component re-render.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/react/Class.Component.mdx#2025-04-17_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nforceUpdate(callback?: () => void): void\n```\n\n----------------------------------------\n\nTITLE: Configuring ReactLynx Compatibility Options in TypeScript\nDESCRIPTION: TypeScript type definition for the compat property that controls compatibility settings with ReactLynx2.0. It extends CompatVisitorConfig and includes an optional flag to disable selector query incompatibility warnings.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/api/rspeedy/react-rsbuild-plugin.pluginreactlynxoptions.compat.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ncompat?: Partial<CompatVisitorConfig> & {\n        disableCreateSelectorQueryIncompatibleWarning?: boolean;\n    } | undefined;\n```\n\n----------------------------------------\n\nTITLE: Setting border-right-width in CSS\nDESCRIPTION: Examples of setting the border-right-width property using keyword values and length values. This property defines the width of the right border of an element.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/css/properties/border-right-width.mdx#2025-04-17_snippet_0\n\nLANGUAGE: css\nCODE:\n```\n/* Keyword values */\nborder-right-width: thin;\nborder-right-width: medium;\nborder-right-width: thick;\n\n/* <length> values */\nborder-right-width: 10rem;\nborder-right-width: 6px;\n```\n\n----------------------------------------\n\nTITLE: Defining isValidElement Function in TypeScript for React\nDESCRIPTION: This snippet defines the isValidElement function, which checks if an object is a valid React element. It takes a potentially null or undefined object and returns a boolean indicating if it's a ReactElement.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/api/react/Function.isValidElement.mdx#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction isValidElement<P>(object: undefined | null | object): object is ReactElement<P, string | JSXElementConstructor<any>>\n```\n\n----------------------------------------\n\nTITLE: Defining Card Selection Callback Interface in BankCardScrollView Component\nDESCRIPTION: Defines a TypeScript interface for the BankCardScrollView component with an optional callback function that will notify other components when a card is selected.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/react/payment-details.mdx#2025-04-17_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nexport interface BankCardScrollViewProps {\n  onCardSelect?: (card: BankCard) => void;\n}\n```\n\n----------------------------------------\n\nTITLE: CSS Background Property Formal Syntax Definition\nDESCRIPTION: The formal syntax definition for the CSS background property, showing the complete structure and allowed values for background layers and their components.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/css/properties/background.mdx#2025-04-17_snippet_1\n\nLANGUAGE: css\nCODE:\n```\n[ <bg-layer> , ]* <final-bg-layer>\n\nwhere\n\n<bg-layer> = <bg-image> || <bg-position> [ / <bg-size> ]? || <repeat-style> || <box> || <box>\n<final-bg-layer> = <'background-color'> || <bg-image> || <bg-position> [ / <bg-size> ]? || <repeat-style> || <attachment> || <box> || <box>\n\nwhere\n\n<bg-image> = none | <image>\n<bg-position> = [ [ left | center | right | top | bottom | <length-percentage> ] | [ left | center | right | <length-percentage> ] [ top | center | bottom | <length-percentage> ] | [ center | [ left | right ] <length-percentage>? ] && [ center | [ top | bottom ] <length-percentage>? ] ]\n<bg-size> = [ <length-percentage> | auto ]{1,2} | cover | contain\n<repeat-style> = repeat-x | repeat-y | [ repeat | space | round | no-repeat ]{1, 2}\n<box> = border-box | padding-box | content-box\n\nwhere\n\n<image> = <url> | <gradient>\n<length-percentage> = <length> | <percentage>\n\nwhere\n\n<gradient> = <linear-gradient> | <radial-gradient>\n```\n\n----------------------------------------\n\nTITLE: Defining Accessibility Exclusive Focus Attribute in TypeScript\nDESCRIPTION: Defines the 'accessibility-exclusive-focus' attribute that ensures sequential navigation will only focus on child nodes under the nodes with this attribute.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/elements/built-in/view.mdx#2025-04-17_snippet_20\n\nLANGUAGE: typescript\nCODE:\n```\n// DefaultValue: false\naccessibility-exclusive-focus?: boolean\n```\n\n----------------------------------------\n\nTITLE: Background Only with Custom Hooks Example\nDESCRIPTION: Illustrates using the background only directive with custom React hooks for event listening functionality that should only execute in background threads.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/api/react/Document.directives.mdx#2025-04-17_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport {useFirstRender} from './useFirstRender';\n\nfunction bgOnlyAction(pureCallback) {\n  'background only';\n  lynx.getJSModule('GlobalEventEmitter').addListener('eventName', pureCallback);\n}\n\nfunction Foo({ prop } ){\n  const ref = useRef(null);\n  useFirstRender(() => {\n    bgOnlyAction(() => {\n      // ...\n    });\n  });\n  return <view>;\n}\n```\n\n----------------------------------------\n\nTITLE: CSS Min-Height Property Examples\nDESCRIPTION: Examples of using min-height CSS property with length and percentage values in Lynx.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/css/properties/min-height.mdx#2025-04-17_snippet_0\n\nLANGUAGE: css\nCODE:\n```\n/* <length> */\nmin-height: 120px;\nmin-height: 10em;\n\n/* <percentage> */\nmin-height: 75%;\n```\n\n----------------------------------------\n\nTITLE: Configuring Rspack Using mergeConfig Utility\nDESCRIPTION: Example showing how to configure Rspack using the mergeConfig utility to combine configurations.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/rspeedy/rspeedy.tools.rspack.md#2025-04-17_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineConfig } from '@lynx-js/rspeedy'\n\nexport default defineConfig({\n  tools: {\n    rspack(config, { mergeConfig }) {\n      return mergeConfig(config, {\n        resolve: {\n          fullySpecified: true,\n        },\n      })\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Callback Function Definition\nDESCRIPTION: The callback function signature, which is triggered when the intersection status changes between the target and reference nodes.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/lynx-api/intersection-observer/intersection-observer-observe.mdx#2025-04-17_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ncallback: (res) => {};\n```\n\n----------------------------------------\n\nTITLE: CSS Padding-Left Formal Syntax Definition\nDESCRIPTION: The formal syntax definition for the padding-left property, showing allowed value types and constraints.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/api/css/properties/padding-left.mdx#2025-04-17_snippet_1\n\nLANGUAGE: css\nCODE:\n```\npadding-left =\n  <length-percentage [0,∞]>\n\n<length-percentage> =\n  <length>      |\n  <percentage>\n```\n\n----------------------------------------\n\nTITLE: Example Usage of __GetParent in the Lynx Frontend Framework\nDESCRIPTION: Shows how to create an element and then retrieve its parent node using the __GetParent method. If the element has no parent, it returns undefined.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/engine/element-api/__GetParent.mdx#2025-04-17_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n// main-thread.js\nlet element = __CreateElement('view', 0, {});\n\nlet parent = __GetParent(element);\n```\n\n----------------------------------------\n\nTITLE: Setting CSS ID Using __SetCSSId Function in Lynx Framework (JSX)\nDESCRIPTION: This snippet shows how to use the __SetCSSId function to assign a CSS ID to an element. First, it creates a view element using __CreateElement and then sets its CSS ID to 0. This is part of the Lynx framework's element manipulation API.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/api/engine/element-api/__SetCSSId.mdx#2025-04-17_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n// main-thread.js\nlet element = __CreateElement('view', 0, {});\n__SetCSSId(element, 0);\n```\n\n----------------------------------------\n\nTITLE: Basic CSS Flex-wrap Syntax\nDESCRIPTION: Shows the basic syntax options for the flex-wrap property, including the default nowrap value, wrap, and wrap-reverse options.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/css/properties/flex-wrap.mdx#2025-04-17_snippet_0\n\nLANGUAGE: css\nCODE:\n```\nflex-wrap: nowrap; /* Default value */\nflex-wrap: wrap;\nflex-wrap: wrap-reverse;\n```\n\n----------------------------------------\n\nTITLE: Getting Pixel Ratio on iOS in Objective-C\nDESCRIPTION: Retrieves the pixel ratio (scale factor) of the screen on iOS devices. It uses the UIScreen class to get the device's scale factor.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/lynx-api/global/system-info.mdx#2025-04-17_snippet_7\n\nLANGUAGE: objc\nCODE:\n```\nconst CGFloat pixelRatio = [UIScreen mainScreen].scale;\n```\n\n----------------------------------------\n\nTITLE: Defining View ClassName Attribute for ReactLynx\nDESCRIPTION: Defines the 'className' attribute specific to ReactLynx, which is equivalent to the 'class' attribute used for applying CSS class names.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/elements/built-in/view.mdx#2025-04-17_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nclassName?: string;\n```\n\n----------------------------------------\n\nTITLE: Defining Media Property in Filename Interface - TypeScript\nDESCRIPTION: This code snippet defines the 'media' property in the Filename interface. It is an optional string property used to specify the naming pattern for media assets such as videos. The default value is '[name].[contenthash:8][ext]'.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/rspeedy/rspeedy.filename.media.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nmedia?: string | undefined;\n```\n\n----------------------------------------\n\nTITLE: Creating Exact Match Aliases with Trailing $ Symbol\nDESCRIPTION: Example of defining aliases with a trailing $ to create exact matches. When the $ symbol is used, the alias will only match if the import path is exactly the same as the alias key.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/api/rspeedy/rspeedy.source.alias.md#2025-04-17_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineConfig } from '@lynx-js/rspeedy'\nexport default defineConfig({\n  source: {\n    alias: {\n      xyz$: 'path/to/file.js',\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Defining View Style Attribute in TypeScript\nDESCRIPTION: Defines the 'style' attribute used to apply inline styles to elements in the Lynx framework.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/elements/built-in/view.mdx#2025-04-17_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nstyle?: string;\n```\n\n----------------------------------------\n\nTITLE: Retrieving Pixel Height on Android in Java\nDESCRIPTION: Shows how to get the pixel height of the screen on Android devices using Java. It uses the DisplayMetrics class to access the screen's height in pixels.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/lynx-api/global/system-info.mdx#2025-04-17_snippet_4\n\nLANGUAGE: java\nCODE:\n```\nDisplayMetrics dm = context.getResources().getDisplayMetrics();\nint pixelHeight = dm.heightPixels;\n```\n\n----------------------------------------\n\nTITLE: Basic Overflow CSS Syntax\nDESCRIPTION: Demonstrates the basic syntax for setting overflow property values. Shows how to specify visible or hidden overflow behavior.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/css/properties/overflow.mdx#2025-04-17_snippet_0\n\nLANGUAGE: css\nCODE:\n```\noverflow: visible;\noverflow: hidden;\n```\n\n----------------------------------------\n\nTITLE: Importing Flexible Size LynxView Examples\nDESCRIPTION: This snippet imports MDX files containing examples of LynxView with flexible size for iOS and Android platforms.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/guide/embed-lynx-to-native.mdx#2025-04-17_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport FlexiOS from './embed-lynx-to-native/embed-lynx-to-native-flex-iOS.mdx';\nimport FlexAndroid from './embed-lynx-to-native/embed-lynx-to-native-flex-android.mdx';\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Log Service in iOS\nDESCRIPTION: Complete implementation of a custom log service in iOS including service registration, singleton pattern, and required protocol methods.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/lynx-native-api/lynx-service.mdx#2025-04-17_snippet_1\n\nLANGUAGE: objective-c\nCODE:\n```\n#import \"YourLogService.h\"\n\n[[maybe_unused]] void logWrite(unsigned int level, const char *tag, const char *format) {\n  if (format == NULL) {\n    return;\n  }\n  NSLog(@\"[%s] %s\", tag == NULL ? \"\" : tag, format);\n}\n\n// Use the LynxServiceRegister macro to achieve automatic registration\n@LynxServiceRegister(LynxLogService);\n\n// Implement LynxLogService\n@implementation LynxLogService\n\n// Irrelevant property, will be removed later\n+ (NSString*)serviceBizID {\n  return DEFAULT_LYNX_SERVICE;\n}\n\n// Irrelevant property, will be removed later\n+ (LynxServiceScope)serviceScope {\n  return LynxServiceScopeDefault;\n}\n\n// Return the corresponding service type for runtime lookup\n+ (NSUInteger)serviceType {\n  return kLynxServiceLog;\n}\n\n// Recommended: Implement as a singleton\n+ (instancetype)sharedInstance {\n  static dispatch_once_t onceToken;\n  static YourLogService *logService;\n  dispatch_once(&onceToken, ^{\n    logService = [[YourLogService alloc] init];\n  });\n  return logService;\n}\n\n// Implement all the interfaces required by LynxServiceLogProtocol\n- (void *)getWriteFunction {\n  return (void *)logWrite;\n}\n\n@end\n```\n\n----------------------------------------\n\nTITLE: Entry Type Definition in TypeScript\nDESCRIPTION: TypeScript type definition for the Entry configuration option that supports string, string array, or record of entry descriptions.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/rspeedy/rspeedy.entry.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport type Entry = string | string[] | Record<string, string | string[] | EntryDescription>;\n```\n\n----------------------------------------\n\nTITLE: Basic Text Element Display in Lynx\nDESCRIPTION: Demonstrates the basic usage of the text element tag to display content in Lynx.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/guide/ui/elements-components.mdx#2025-04-17_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<text>Hello Lynx</text>\n```\n\n----------------------------------------\n\nTITLE: Defining exportLocalsConvention Property Type in TypeScript\nDESCRIPTION: TypeScript type definition for the exportLocalsConvention property which specifies the naming convention for exported CSS class names. It accepts either a CssModuleLocalsConvention type or undefined.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/rspeedy/rspeedy.cssloadermodules.exportlocalsconvention.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexportLocalsConvention?: CssModuleLocalsConvention | undefined;\n```\n\n----------------------------------------\n\nTITLE: CSS flex-flow Formal Syntax Definition\nDESCRIPTION: The formal syntax for the flex-flow property, showing the allowed values for flex-direction and flex-wrap components and how they can be combined.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/css/properties/flex-flow.mdx#2025-04-17_snippet_1\n\nLANGUAGE: css\nCODE:\n```\nflex-flow =\n  <'flex-direction'>  ||\n  <'flex-wrap'>\n\n<flex-direction> =\n  row             |\n  row-reverse     |\n  column          |\n  column-reverse\n\n<flex-wrap> =\n  nowrap        |\n  wrap          |\n  wrap-reverse\n```\n\n----------------------------------------\n\nTITLE: Updating GlobalProps in iOS\nDESCRIPTION: iOS Objective-C methods for updating global properties in Lynx. Provides two method signatures - one accepting NSDictionary and another accepting LynxTemplateData.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/lynx-api/lynx/lynx-global-props.mdx#2025-04-17_snippet_2\n\nLANGUAGE: objc\nCODE:\n```\n- (void)updateGlobalPropsWithDictionary:(NSDictionary<NSString*, id>*)data\n\n- (void)updateGlobalPropsWithTemplateData:(LynxTemplateData*)data\n```\n\n----------------------------------------\n\nTITLE: ChunkSplit Override Type Definition in TypeScript\nDESCRIPTION: TypeScript type definition showing the structure of the ChunkSplit.override property, which extends Rspack.Configuration's optimization.splitChunks configuration.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/rspeedy/rspeedy.chunksplit.override.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\noverride?: Rspack.Configuration extends {\n        optimization?: {\n            splitChunks?: infer P;\n        } | undefined;\n    } ? P : never;\n```\n\n----------------------------------------\n\nTITLE: Rotation Effect Implementation\nDESCRIPTION: Implementation of a rotating box animation using keyframes with the Go component.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/guide/styling/animation.mdx#2025-04-17_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<Go\n  img=\"https://lf-lynx.tiktok-cdns.com/obj/lynx-artifacts-oss-sg/lynx-website/assets/doc/animation-guide-rotate.webp\"\n  example=\"animation\"\n  defaultFile=\"src/keyframe_rotate/index.scss\"\n  defaultEntryFile=\"dist/keyframe_rotate.lynx.bundle\"\n  entry=\"src/keyframe_rotate\"\n/>\n```\n\n----------------------------------------\n\nTITLE: CssLoader Modules Type Definition\nDESCRIPTION: TypeScript type definition for the CssLoader.modules property, which can accept a boolean, CssLoaderModules object, or undefined.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/api/rspeedy/rspeedy.cssloader.modules.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nmodules?: boolean | CssLoaderModules | undefined;\n```\n\n----------------------------------------\n\nTITLE: Defining LynxGenericResourceFetcher Interface in Java\nDESCRIPTION: This snippet defines the abstract class LynxGenericResourceFetcher in Java, which includes methods for fetching resources, resource paths, and streams. It also includes a method for canceling resource requests.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/lynx-native-api/resource-fetcher/GenericResourceFetcher.mdx#2025-04-17_snippet_0\n\nLANGUAGE: java\nCODE:\n```\npublic abstract class LynxGenericResourceFetcher {\n  /**\n   * fetch resource with contents.\n   *\n   * @param request\n   * @param callback contents of the requiring resource.\n   */\n  public abstract void fetchResource(\n      LynxResourceRequest request, LynxResourceCallback<byte[]> callback);\n\n  /**\n   * fetch resource with res path.\n   *\n   * @param request\n   * @param callback path on the disk of the requiring resource.\n   */\n  public abstract void fetchResourcePath(\n      LynxResourceRequest request, LynxResourceCallback<String> callback);\n\n  /**\n   * fetch resource with stream.\n   *\n   * @param request\n   * @param delegate streaming of the requiring resource.\n   */\n  public void fetchStream(LynxResourceRequest request, StreamDelegate delegate){};\n\n  /**\n   * cancel the request of the requiring resource.\n   *\n   * @param request the requiring request.\n   */\n  public void cancel(LynxResourceRequest request){};\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Height Values in CSS\nDESCRIPTION: Examples of different ways to set the height property in CSS, including length values, percentage values, and keyword values such as max-content, fit-content, and auto.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/css/properties/height.mdx#2025-04-17_snippet_0\n\nLANGUAGE: css\nCODE:\n```\n/* <length> values */\nheight: 300px;\nheight: 25em;\n\n/* <percentage> value */\nheight: 75%;\n\n/* Keyword values */\nheight: max-content;\nheight: fit-content;\nheight: fit-content(20em);\nheight: auto;\n```\n\n----------------------------------------\n\nTITLE: Configuring a Single Entry in rSpeedy\nDESCRIPTION: Example showing how to configure rSpeedy with a single entry point. This uses a direct path string to specify the main entry module.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/api/rspeedy/rspeedy.entry.md#2025-04-17_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineConfig } from '@lynx-js/rspeedy'\nexport default defineConfig({\n  entry: './src/pages/main/index.js',\n})\n```\n\n----------------------------------------\n\nTITLE: Using text-stroke-width CSS Property with Various Units\nDESCRIPTION: Examples showing how to set text-stroke-width property using different length units such as pixels, em, and points.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/css/properties/text-stroke-width.mdx#2025-04-17_snippet_0\n\nLANGUAGE: css\nCODE:\n```\ntext-stroke-width: 2px;\ntext-stroke-width: 0.1em;\ntext-stroke-width: 5pt;\n```\n\n----------------------------------------\n\nTITLE: Declaring Root Variable in TypeScript for ReactLynx\nDESCRIPTION: Defines the 'root' constant of type Root, which is the default and only root for rendering JSX in ReactLynx.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/react/Variable.root.mdx#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst root: Root;\n```\n\n----------------------------------------\n\nTITLE: Formal syntax for padding-inline-start in CSS\nDESCRIPTION: The formal syntax definition for the padding-inline-start property, including its possible values and the length-percentage data type.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/css/properties/padding-inline-start.mdx#2025-04-17_snippet_1\n\nLANGUAGE: css\nCODE:\n```\npadding-inline-start =\n  <length-percentage [0,∞]>\n\n<length-percentage> =\n  <length>      |\n  <percentage>\n```\n\n----------------------------------------\n\nTITLE: Implementing componentWillUnmount Lifecycle Method in React\nDESCRIPTION: Demonstrates the signature for the componentWillUnmount method called before a component is destroyed.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/react/Class.Component.mdx#2025-04-17_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\noptional componentWillUnmount(): void\n```\n\n----------------------------------------\n\nTITLE: Configuring QR Code Plugin with Multiple Schemas in JavaScript\nDESCRIPTION: This example shows how to configure the pluginQRCode with multiple schemas. It returns an object with different schema options, allowing the user to switch between them by pressing 'a' in the terminal.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/rspeedy/qrcode-rsbuild-plugin.pluginqrcodeoptions.schema.md#2025-04-17_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { pluginQRCode } from '@lynx-js/plugin-qrcode'\nimport { defineConfig } from '@lynx-js/rspeedy'\n\nexport default defineConfig({\n  plugins: [\n    pluginQRCode({\n      schema(url) {\n        return {\n          http: url,\n          foo: `foo://lynx?url=${encodeURIComponent(url)}&dev=1`,\n          bar: `bar://lynx?url=${encodeURIComponent(url)}`,\n        }\n      },\n    }),\n  ],\n})\n```\n\n----------------------------------------\n\nTITLE: CSS Padding Bottom Basic Usage\nDESCRIPTION: Examples of using the padding-bottom property with different value types including length units and percentages. Shows how to set fixed and relative padding sizes.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/css/properties/padding-bottom.mdx#2025-04-17_snippet_0\n\nLANGUAGE: css\nCODE:\n```\n/* <length> values */\npadding-bottom: 0.5em;\npadding-bottom: 0;\n\n/* <percentage> value */\npadding-bottom: 10%;\n```\n\n----------------------------------------\n\nTITLE: Animation Name Formal Syntax Definition\nDESCRIPTION: The formal syntax definition for the animation-name property, showing it accepts string values representing animation names.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/css/properties/animation-name.mdx#2025-04-17_snippet_1\n\nLANGUAGE: css\nCODE:\n```\nanimation-name: <string>;\n```\n\n----------------------------------------\n\nTITLE: Querying DOM Elements with Lynx in TypeScript\nDESCRIPTION: Definition of querySelector method in the Lynx interface. This method selects the first element matching a given CSS selector in the page.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/react/Interface.Lynx.mdx#2025-04-17_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nquerySelector: (selector: string) => null | Element;\n```\n\n----------------------------------------\n\nTITLE: Defining engineVersion Property in TypeScript\nDESCRIPTION: TypeScript type definition for the engineVersion property which allows specifying the minimum Lynx Engine version as an optional string value. This property is used to ensure compatibility between the app bundle and Lynx Engine.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/api/rspeedy/react-rsbuild-plugin.pluginreactlynxoptions.engineversion.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nengineVersion?: string;\n```\n\n----------------------------------------\n\nTITLE: Configuring CSS Inheritance in Lynx React Plugin\nDESCRIPTION: This example demonstrates how to use the customCSSInheritanceList property in a configuration file. It shows how to enable CSS inheritance and specify custom inheritable properties using the pluginReactLynx function.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/rspeedy/react-rsbuild-plugin.pluginreactlynxoptions.customcssinheritancelist.md#2025-04-17_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineConfig } from '@lynx-js/rspeedy'\n\nexport default defineConfig({\n plugins: [\n   pluginReactLynx({\n     enableCSSInheritance: true,\n     customCSSInheritanceList: ['direction', 'overflow']\n   }),\n ],\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Rspack Using Environment Function\nDESCRIPTION: Example demonstrating how to configure Rspack using a function with environment utilities to set different options based on the environment.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/rspeedy/rspeedy.tools.rspack.md#2025-04-17_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineConfig } from '@lynx-js/rspeedy'\n\nexport default defineConfig({\n  tools: {\n    rspack(config, { env }) {\n      if (env === 'development') {\n        config.devtool = 'cheap-source-map'\n      }\n      return config\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Adding Event Listener in Lynx SDK (JSX)\nDESCRIPTION: Demonstrates the syntax for the __AddEvent function, which adds an event listener to an Element object. It specifies the element, event type, event name, and listener function or string.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/engine/element-api/__AddEvent.mdx#2025-04-17_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n__AddEvent(element: Element, type: string, name: string, listener: string|Function) : void;\n```\n\n----------------------------------------\n\nTITLE: CSS Vertical-align Formal Syntax\nDESCRIPTION: The formal syntax for the vertical-align property, showing all possible value types that can be used including length, percentage, and keywords.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/css/properties/vertical-align.mdx#2025-04-17_snippet_1\n\nLANGUAGE: css\nCODE:\n```\n<length> | <percent> | baseline | middle | center | top | bottom | text-top | text-bottom | super | sub\n```\n\n----------------------------------------\n\nTITLE: CSS Grid Auto Flow Basic Syntax Examples\nDESCRIPTION: Shows different syntax options for the grid-auto-flow property, including row (default), column, dense, and combination values.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/css/properties/grid-auto-flow.mdx#2025-04-17_snippet_0\n\nLANGUAGE: css\nCODE:\n```\ngrid-auto-flow: row;\ngrid-auto-flow: column;\ngrid-auto-flow: row dense;\ngrid-auto-flow: column dense;\ngrid-auto-flow: dense;\n```\n\n----------------------------------------\n\nTITLE: Defining Accessibility Label Attribute in TypeScript\nDESCRIPTION: Defines the 'accessibility-label' attribute that sets the content for voice broadcasts for the node in accessibility mode.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/elements/built-in/view.mdx#2025-04-17_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\n// DefaultValue: undefined\naccessibility-label?: string\n```\n\n----------------------------------------\n\nTITLE: Setting Attribute Method Signature\nDESCRIPTION: Method signature showing the type definition for the __SetAttribute function that sets an attribute on an Element node.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/engine/element-api/__SetAttribute.mdx#2025-04-17_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n__SetAttribute(element: Element, key: string, value: any) : void;\n```\n\n----------------------------------------\n\nTITLE: CSS Syntax Examples for text-stroke-color Property\nDESCRIPTION: This snippet shows various syntax examples for the text-stroke-color CSS property. It demonstrates how to set the stroke color using different color formats including named colors, hexadecimal values, and RGB values.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/css/properties/text-stroke-color.mdx#2025-04-17_snippet_1\n\nLANGUAGE: css\nCODE:\n```\ntext-stroke-color: red;\ntext-stroke-color: #e08ab4;\ntext-stroke-color: rgb(200, 100, 0);\n```\n\n----------------------------------------\n\nTITLE: TypeScript Definition of requestAnimationFrame Function\nDESCRIPTION: The TypeScript function signature for requestAnimationFrame, which takes a callback function with a timeStamp parameter and returns a numeric identifier. This identifier can be used to cancel the scheduled animation frame.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/lynx-api/lynx/lynx-request-animation-frame.mdx#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nrequestAnimationFrame: (callback: (timeStamp: number) => void) => number;\n```\n\n----------------------------------------\n\nTITLE: Formal Syntax Definition for CSS left Property\nDESCRIPTION: The formal syntax definition for the 'left' CSS property, showing its possible values and structure.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/css/properties/left.mdx#2025-04-17_snippet_1\n\nLANGUAGE: css\nCODE:\n```\nleft =\n  auto                 |\n  <length-percentage>  |\n\n<length-percentage> =\n  <length>      |\n  <percentage>\n```\n\n----------------------------------------\n\nTITLE: Defining __ReplaceElement Syntax in Lynx Framework (JSX)\nDESCRIPTION: The function signature for __ReplaceElement that replaces an Element node with another. It takes two parameters: the new child Element to be inserted and the old child Element to be replaced.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/engine/element-api/__ReplaceElement.mdx#2025-04-17_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n__ReplaceElement(newChild: Element, oldChild: Element) : void;\n```\n\n----------------------------------------\n\nTITLE: Using __SetEvents Function Syntax in Lynx SDK (JSX)\nDESCRIPTION: The syntax definition for __SetEvents function which takes an Element object and an array of listener objects to set event handlers on the specified element.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/api/engine/element-api/__SetEvents.mdx#2025-04-17_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n__SetEvents(element: Element, listeners: Array<Record<string, any>>) : void;\n```\n\n----------------------------------------\n\nTITLE: Demonstrating CSS 'right' Property Usage\nDESCRIPTION: This code snippet shows various ways to use the 'right' property in CSS, including length values, percentages, keywords, and calc() function.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/api/css/properties/right.mdx#2025-04-17_snippet_0\n\nLANGUAGE: css\nCODE:\n```\n/* <length> values */\nright: 3px;\nright: 2rpx;\nright: 2.4em;\nright: 3rem;\n\nright: 10%;\n\n/* Keyword value */\nright: auto;\n\n/* calc */\nright: calc(1px + 1px);\n```\n\n----------------------------------------\n\nTITLE: Defining useLayoutEffect Function in TypeScript\nDESCRIPTION: This snippet defines the useLayoutEffect function, which accepts an effect callback and an optional dependency list. It is now an alias of useEffect and is deprecated in favor of using useEffect directly.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/react/Function.useLayoutEffect.mdx#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction useLayoutEffect(effect: EffectCallback, deps?: DependencyList): void\n```\n\n----------------------------------------\n\nTITLE: React Package Resolution Alias\nDESCRIPTION: Configuration example showing how to alias the react package to @lynx-js/react, enabling use of third-party libraries that depend on react in ReactLynx.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/rspeedy/rspeedy.source.alias.md#2025-04-17_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineConfig } from '@lynx-js/rspeedy'\nimport { createRequire } from 'module'\nconst require = createRequire(import.meta.url)\nexport default defineConfig({\n  source: {\n    alias: {\n      react: require.resolve('@lynx-js/react'),\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Defining the font property in Filename class - TypeScript\nDESCRIPTION: TypeScript property definition for the font property in the Filename class. This property specifies the name pattern for font files with a default value of '[name].[contenthash:8][ext]'.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/api/rspeedy/rspeedy.filename.font.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfont?: string | undefined;\n```\n\n----------------------------------------\n\nTITLE: Markdown Table: Functions in QRCode RSBuild Plugin\nDESCRIPTION: A markdown table listing the functions provided by the QRCode RSBuild plugin, including their names and descriptions.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/rspeedy/qrcode-rsbuild-plugin.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n|  Function | Description |\n|  --- | --- |\n|  [pluginQRCode(options)](./qrcode-rsbuild-plugin.pluginqrcode.md) | Create a rsbuild plugin for printing QRCode. |\n```\n\n----------------------------------------\n\nTITLE: Subsequent-sibling Combinator in CSS\nDESCRIPTION: Shows how to use the tilde combinator to select following sibling elements\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/css/selectors.mdx#2025-04-17_snippet_7\n\nLANGUAGE: css\nCODE:\n```\nformer_element ~ target_element { property declarations }\n```\n\nLANGUAGE: css\nCODE:\n```\nview ~ text {\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Example Usage of __ReplaceElements in Frontend Framework\nDESCRIPTION: A practical example of how to use the __ReplaceElements function in a frontend framework. It demonstrates creating elements, appending a child to a parent, and then replacing the child with a new element.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/engine/element-api/__ReplaceElements.mdx#2025-04-17_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n// main-thread.js\nlet newChild = __CreateElement('view', 0, {});\n\nlet oldChild = __CreateElement('view', 0, {});\n\nlet parent = __CreateElement('view', 0, {});\n\n__AppendElement(parent, oldChild);\n\n__ReplaceElements(parent, [newChild], [oldChild]);\n```\n\n----------------------------------------\n\nTITLE: CSS relative-align-inline-start Formal Syntax\nDESCRIPTION: Defines the formal syntax specification for the relative-align-inline-start property, showing allowed value types.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/css/properties/relative-align-inline-start.mdx#2025-04-17_snippet_1\n\nLANGUAGE: css\nCODE:\n```\nrelative-align-inline-start = none | parent | <number>\n```\n\n----------------------------------------\n\nTITLE: Triggering Global Events from Lepus in TypeScript\nDESCRIPTION: Definition of triggerGlobalEventFromLepus method in the Lynx interface. This method is an alias for triggering global events in the Lepus environment.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/react/Interface.Lynx.mdx#2025-04-17_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\ntriggerGlobalEventFromLepus: (eventName: string, params: any) => void;\n```\n\n----------------------------------------\n\nTITLE: Child Combinator in CSS\nDESCRIPTION: Demonstrates the child combinator for selecting direct children elements\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/css/selectors.mdx#2025-04-17_snippet_6\n\nLANGUAGE: css\nCODE:\n```\nelement1 > element2 {\n  property declarations\n}\n```\n\nLANGUAGE: css\nCODE:\n```\nview.a > text {\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Source.exclude TypeScript Signature\nDESCRIPTION: The TypeScript signature for the 'source.exclude' property which accepts an optional array of Rspack.RuleSetCondition objects used to specify JavaScript files that should be excluded from compilation.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/api/rspeedy/rspeedy.source.exclude.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexclude?: Rspack.RuleSetCondition[] | undefined;\n```\n\n----------------------------------------\n\nTITLE: CSS Border Left Color Basic Usage\nDESCRIPTION: Examples of different ways to specify the border-left-color property using various color value formats including named colors, hex codes, RGB, and HSLA values.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/css/properties/border-left-color.mdx#2025-04-17_snippet_0\n\nLANGUAGE: css\nCODE:\n```\nborder-left-color: red;\nborder-left-color: #ffbb00;\nborder-left-color: rgb(255, 0, 0);\nborder-left-color: hsla(100%, 50%, 25%, 0.75);\nborder-left-color: currentColor;\nborder-left-color: transparent;\n```\n\n----------------------------------------\n\nTITLE: Defining PerformanceMetric EndTimestamp Attribute in TypeScript\nDESCRIPTION: Defines the 'endTimestamp' attribute of the PerformanceMetric type, representing the end timestamp of the metric as a Unix timestamp in milliseconds with microsecond precision.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/lynx-api/performance-api/performance-metric.mdx#2025-04-17_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nendTimestamp: number;\n```\n\n----------------------------------------\n\nTITLE: CSS text-indent Formal Syntax Definition\nDESCRIPTION: The formal syntax definition for the text-indent CSS property, showing it accepts either a length value or a percentage value.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/css/properties/text-indent.mdx#2025-04-17_snippet_2\n\nLANGUAGE: css\nCODE:\n```\n<length> | <percentage>\n```\n\n----------------------------------------\n\nTITLE: Typeof Definition Example\nDESCRIPTION: Shows how to use define with typeof expressions, including configuration and code transformation.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/rspeedy/rspeedy.source.define.md#2025-04-17_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineConfig } from '@lynx-js/rspeedy'\nexport default defineConfig({\n  source: {\n    define: {\n      'typeof window': JSON.stringify(\"undefined\"),\n    },\n  },\n})\n```\n\nLANGUAGE: javascript\nCODE:\n```\nif (typeof window !== 'undefined') {}\n\n// ⬇️ Turn into being...\nif (\"undefined\" !== 'undefined') {}\n```\n\n----------------------------------------\n\nTITLE: Using Node Manipulation to Update Swiper Position\nDESCRIPTION: Implementation of the updateSwiperOffset function using Node Manipulation and setNativeProps to directly update the transform property of the swiper container, providing smooth scrolling without re-rendering.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/guide/start/tutorial-product-detail.mdx#2025-04-17_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nfunction Swiper() {\n  const containerRef = useRef<NodesRef>(null);\n\n  function updateSwiperOffset(offset: number) {\n    containerRef.current\n      ?.setNativeProps({\n        style: {\n          transform: `translateX(${offset}px)`,\n        },\n      })\n      .exec();\n  }\n\n  return <view ref={containerRef}></view>;\n}\n```\n\n----------------------------------------\n\nTITLE: Intersection Observer in Lynx\nDESCRIPTION: Example showing how to detect intersection between parent and child nodes using Lynx's intersection observer functionality.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/guide/interaction/visibility-detection.mdx#2025-04-17_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Go } from '@lynx';\n\n<Go\n  example=\"event\"\n  defaultFile=\"src/visibility_intersection/index.tsx\"\n  defaultEntryFile=\"dist/visibility_intersection.lynx.bundle\"\n  img=\"https://lf-lynx.tiktok-cdns.com/obj/lynx-artifacts-oss-sg/lynx-website/assets/doc/event/visibility_intersection.gif\"\n  highlight=\"{8-24}\"\n  entry=\"src/visibility_intersection\"\n/>\n```\n\n----------------------------------------\n\nTITLE: React memo() Generic Component Type Definition\nDESCRIPTION: Extended TypeScript type definition for memo() that accepts any ComponentType and returns a MemoExoticComponent.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/react/Function.memo.mdx#2025-04-17_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nfunction memo<T>(Component: T, propsAreEqual?: (prevProps: Readonly<ComponentProps<T>>, nextProps: Readonly<ComponentProps<T>>) => boolean): MemoExoticComponent<T>\n```\n\n----------------------------------------\n\nTITLE: Component Parameter Type Definition in TypeScript\nDESCRIPTION: Type definition for the component parameter which specifies a BaseInstance where the target and reference nodes will be searched for before falling back to global search.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/api/lynx-api/lynx/lynx-create-intersection-observer.mdx#2025-04-17_snippet_1\n\nLANGUAGE: ts\nCODE:\n```\ncomponent: BaseInstance;\n```\n\n----------------------------------------\n\nTITLE: CSS Animation Iteration Count Basic Examples\nDESCRIPTION: Examples showing different ways to specify animation iteration counts including infinite loops, numeric values, and multiple animations.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/css/properties/animation-iteration-count.mdx#2025-04-17_snippet_0\n\nLANGUAGE: css\nCODE:\n```\nanimation-iteration-count: infinite;\n\nanimation-iteration-count: 3;\n\nanimation-iteration-count: 2, 0, infinite;\n```\n\n----------------------------------------\n\nTITLE: TypeScript Configuration for CSS Module Extensions\nDESCRIPTION: TypeScript configuration in tsconfig.json to support CSS Module extensions with allowArbitraryExtensions and moduleResolution settings.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/rspeedy/styling.mdx#2025-04-17_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"compilerOptions\": {\n    \"module\": \"ESNext\",\n    \"moduleResolution\": \"Bundler\",\n    \"allowArbitraryExtensions\": true\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: useReducer with Simple Initialization\nDESCRIPTION: TypeScript definition for useReducer hook with a reducer without actions and direct initial state. Optional initializer parameter is undefined.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/react/Function.useReducer.mdx#2025-04-17_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nfunction useReducer<R>(\n   reducer: R,\n   initializerArg: ReducerStateWithoutAction<R>,\n   initializer?: undefined): [ReducerStateWithoutAction<R>, DispatchWithoutAction]\n```\n\n----------------------------------------\n\nTITLE: Defining DevClient Interface in TypeScript\nDESCRIPTION: Defines the Client interface for configuring the development client. It contains an optional websocketTransport property that specifies the path to websocket.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/api/rspeedy/rspeedy.devclient.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface Client \n```\n\n----------------------------------------\n\nTITLE: Rendering Element with Data Attribute in JSX\nDESCRIPTION: Demonstrates how to render a view element with a data attribute in JSX syntax.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/engine/element-api/__SetDataset.mdx#2025-04-17_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<view src=\"xxx\" data-key=\"value\" />\n```\n\n----------------------------------------\n\nTITLE: Explicit Page Element Usage in Lynx JSX\nDESCRIPTION: Shows how to explicitly use the <page> element as the outermost element in a Lynx component, including styling and event binding.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/elements/built-in/page.mdx#2025-04-17_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nconst App = () => {\n  return (\n    <page className=\"body\" bindtap={handlePageClick}>\n      <view style={{ width: '100%', height: '100%' }}>\n        <text className=\"title\">Page Example</text>\n      </view>\n    </page>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: TypeScript Signature for Dev.assetPrefix Property\nDESCRIPTION: Defines the TypeScript signature for the assetPrefix property, which can accept a string, boolean, or be undefined.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/api/rspeedy/rspeedy.dev.assetprefix.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nassetPrefix?: string | boolean | undefined;\n```\n\n----------------------------------------\n\nTITLE: Text-Image Mixing Layout Structure in Lynx\nDESCRIPTION: Shows the basic structure for embedding images within text in Lynx using nested <image> elements inside <text> elements.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/guide/styling/text-and-typography.mdx#2025-04-17_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\n<text>\n  <image />\n  <text>\n    This is a warning message.This is a warning message.This is a warning\n    message.\n  </text>\n</text>\n```\n\n----------------------------------------\n\nTITLE: Copying Files to Root Distribution Directory\nDESCRIPTION: Example configuration showing how to copy files from the src/assets directory directly to the dist directory root.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/rspeedy/rspeedy.output.copy.md#2025-04-17_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineConfig } from '@lynx-js/rspeedy'\n\nexport default defineConfig({\n  output: {\n    copy: [\n      // `./src/assets/image.png` -> `./dist/image.png`\n      { from: './src/assets' },\n    ],\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Formal Syntax Definition for grid-row-start\nDESCRIPTION: The formal syntax definition for the grid-row-start property, showing it accepts either a number value or a span value combined with a number.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/css/properties/grid-row-start.mdx#2025-04-17_snippet_1\n\nLANGUAGE: css\nCODE:\n```\ngrid-row-start = <number> | [span && <number>]\n```\n\n----------------------------------------\n\nTITLE: Defining the registerDataProcessors Method in TypeScript\nDESCRIPTION: Declaration of the deprecated registerDataProcessors method used to register data processors before rendering. This method has been replaced by lynx.registerDataProcessors.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/api/react/Interface.Root.mdx#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nregisterDataProcessors: (dataProcessorDefinition: DataProcessorDefinition) => void;\n```\n\n----------------------------------------\n\nTITLE: Using triggerGlobalEventFromLepus Method in ReactLynx\nDESCRIPTION: The triggerGlobalEventFromLepus method is an alias for triggering global events using the GlobalEventEmitter module. It's specifically for use in the Lepus environment.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/api/react/Interface.Lynx.mdx#2025-04-17_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\ntriggerGlobalEventFromLepus: (eventName: string, params: any) => void;\n```\n\n----------------------------------------\n\nTITLE: Defining parseChangesEnd property in FrameworkPipelineTiming interface\nDESCRIPTION: Declares the timestamp property marking when the framework ends deserializing change information on the main thread, stored as a floating-point Unix timestamp in milliseconds.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/lynx-api/performance-api/framework-pipeline-timing.mdx#2025-04-17_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\nparseChangesEnd: number;\n```\n\n----------------------------------------\n\nTITLE: Importing and Using Go Component for CSS API Examples in JSX\nDESCRIPTION: Example of importing and using the Go component to display interactive examples of the border-bottom-left-radius CSS property, with configuration for default files and visual assets.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/css/properties/border-bottom-left-radius.mdx#2025-04-17_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Go } from '@lynx';\n\n<Go\n  example=\"css-api\"\n  defaultFile=\"src/border-bottom-left-radius/App.tsx\"\n  img=\"https://lf-lynx.tiktok-cdns.com/obj/lynx-artifacts-oss-sg/lynx-website/assets/doc/css/border-bottom-left-radius.jpg\"\n  defaultEntryFile=\"dist/border-bottom-left-radius.lynx.bundle\"\n  entry=\"src/border-bottom-left-radius\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Switching from Rspack to Webpack Configuration Example\nDESCRIPTION: Example showing how to configure RSpeedy to use Webpack instead of the default Rspack, including the necessary webpack provider and SWC plugin for TypeScript transpilation.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/api/rspeedy/rspeedy.config.provider.md#2025-04-17_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineConfig } from '@lynx-js/rspeedy'\nimport { webpackProvider } from '@rsbuild/webpack'\nimport { pluginSwc } from '@rsbuild/plugin-webpack-swc'\n\nexport default defineConfig({\n  provider: webpackProvider,\n  plugins: [\n    pluginSwc(),\n  ],\n})\n```\n\n----------------------------------------\n\nTITLE: Importing Images in React Components\nDESCRIPTION: Demonstrates how to import and use image assets in React components using JSX syntax\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/rspeedy/assets.md#2025-04-17_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n// Import the logo.png image in the static directory\nimport logo from './static/logo.png';\n\nfunction App() {\n  return <image src={logo} />; // Can be directly used in ReactLynx\n}\n```\n\n----------------------------------------\n\nTITLE: Illustrating Invalid CSS <time> Values\nDESCRIPTION: Examples of invalid time values in CSS, demonstrating common mistakes such as missing units, incorrect spacing, and improper use of zero.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/api/css/data-type/time.mdx#2025-04-17_snippet_1\n\nLANGUAGE: css\nCODE:\n```\n0           尽管<length>中允许0，其在<time>中无效。\n12.0        此为<number>而非<time>。其缺乏单位。\n7 ms        数字与单位间不允许有空格。\n```\n\n----------------------------------------\n\nTITLE: Typed InitDataRaw Example in ReactLynx\nDESCRIPTION: Example showing how to extend the InitDataRaw interface to achieve fully typed defaultDataProcessor with custom properties.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/api/react/Interface.Lynx.mdx#2025-04-17_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { root } from \"@lynx-js/react\"\n\ninterface ExistingInterface {\n  somePropertyFromExistingInterface: number\n}\n\ndeclare module '@lynx-js/react' {\n  interface InitDataRaw extends ExistingInterface {\n    someAnotherCustomProperty: string\n  }\n}\n\nlynx.registerDataProcessors({\n  defaultDataProcessor: (initDataRaw) => {\n    initDataRaw.somePropertyFromExistingInterface // will be typed\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Defining SSR Configuration Property in TypeScript\nDESCRIPTION: TypeScript interface property definition for enabling server-side rendering in the Lynx React plugin. The enableSSR property is an optional boolean flag that controls whether SSR features are enabled for the build.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/rspeedy/react-rsbuild-plugin.pluginreactlynxoptions.enablessr.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nenableSSR?: boolean;\n```\n\n----------------------------------------\n\nTITLE: Marking LynxTemplateData State in iOS\nDESCRIPTION: Method to mark the current LynxTemplateData with an associated dataProcessor name in iOS. This is used for data preprocessing when the LynxTemplateData is used in UpdateData.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/lynx-native-api/template-data.mdx#2025-04-17_snippet_5\n\nLANGUAGE: objective-c\nCODE:\n```\n- (void)markState:(NSString *)name;\n```\n\n----------------------------------------\n\nTITLE: Defining List Main Axis Gap Attribute in TSX\nDESCRIPTION: Shows how to specify the spacing of <list> child nodes in the main axis direction using CSS styling.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/elements/built-in/list.mdx#2025-04-17_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\n// DefaultValue: null\nlist-main-axis-gap?: ${number}px | ${number}rpx\n\n<list\n  style={{listMainAxisGap:'10px'}}\n/>\n```\n\n----------------------------------------\n\nTITLE: Removing LynxViewClient in Android Java\nDESCRIPTION: This method removes a previously registered LynxViewClient from a LynxView instance. It stops the monitoring of lifecycle events for the specified client. The method takes a LynxViewClient object as a parameter, which is the client to be removed from event monitoring.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/lynx-native-api/lynx-view/remove-lynx-view-client.mdx#2025-04-17_snippet_0\n\nLANGUAGE: java\nCODE:\n```\npublic void removeLynxViewClient(LynxViewClient client)\n```\n\n----------------------------------------\n\nTITLE: Defining AnimationEvent Detail Interface in TypeScript\nDESCRIPTION: TypeScript interface definition for the detail property of AnimationEvent. Specifies the structure containing animation type, name, and animator status information.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/lynx-api/event/animation-event.mdx#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ndetail: {\n  animation_type: string,\n  animation_name: string,\n  new_animator: boolean,\n}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating CSS font-weight Property Usage\nDESCRIPTION: This snippet shows various ways to use the font-weight CSS property, including keyword values and numeric values.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/css/properties/font-weight.mdx#2025-04-17_snippet_0\n\nLANGUAGE: css\nCODE:\n```\n/* Keyword values */\nfont-weight: normal;\nfont-weight: bold;\n\n/* Numeric keyword values */\nfont-weight: 100;\nfont-weight: 200;\nfont-weight: 300;\nfont-weight: 400;\nfont-weight: 500;\nfont-weight: 600;\nfont-weight: 700;\nfont-weight: 800;\nfont-weight: 900;\nfont-weight: 1000;\n```\n\n----------------------------------------\n\nTITLE: Defining Lower Threshold Item Count Attribute in TSX\nDESCRIPTION: Defines the lower-threshold-item-count attribute that triggers a scrolltolower event when the number of remaining displayable child nodes at the bottom is below the threshold.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/elements/built-in/list.mdx#2025-04-17_snippet_17\n\nLANGUAGE: tsx\nCODE:\n```\n// DefaultValue: 0\nlower-threshold-item-count?: number\n```\n\n----------------------------------------\n\nTITLE: Defining Border-Right Styles with CSS in Lynx\nDESCRIPTION: Examples of using the border-right shorthand property to define various border styles. The examples show thick double red borders, thin dotted blue borders, and medium dashed orange borders.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/css/properties/border-right.mdx#2025-04-17_snippet_0\n\nLANGUAGE: css\nCODE:\n```\n.br-0 {\n  border-right: thick double red;\n}\n.br-1 {\n  border-right: thin dotted blue;\n}\n\n.br-2 {\n  border-right: 10px dashed orange;\n}\n```\n\n----------------------------------------\n\nTITLE: Copying JSON Object in JavaScript Console\nDESCRIPTION: This JavaScript snippet demonstrates different ways to copy a JSON object in the console, including plain object, JSON string, and escaped JSON string formats.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/guide/debugging/lynx-devtool/console-panel.mdx#2025-04-17_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n{\n  \"a\": 123,\n  \"b\": \"string\"\n}\n'{\"a\":123,\"b\":\"string\"}'\n\"{\\\"a\\\":123,\\\"b\\\":\\\"string\\\"}\"\n```\n\n----------------------------------------\n\nTITLE: Defining SetInlineStyles Function Syntax in JSX\nDESCRIPTION: Defines the syntax for the __SetInlineStyles function, specifying its parameters and return type. It takes an Element object and a string or object representing inline styles.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/engine/element-api/__SetInlineStyles.mdx#2025-04-17_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n__SetInlineStyles(element: Element, value: string | object) : void;\n```\n\n----------------------------------------\n\nTITLE: Single Entry Configuration Example\nDESCRIPTION: Demonstrates how to configure a single entry point using RSpeedy's defineConfig.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/rspeedy/rspeedy.entry.md#2025-04-17_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineConfig } from '@lynx-js/rspeedy'\nexport default defineConfig({\n  entry: './src/pages/main/index.js',\n})\n```\n\n----------------------------------------\n\nTITLE: Defining enable-touch-pseudo-propagation Property in TypeScript\nDESCRIPTION: Specifies whether the target node supports the :active pseudo-class to continue bubbling up on the event response chain. Defaults to false.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/elements/built-in/view.mdx#2025-04-17_snippet_30\n\nLANGUAGE: typescript\nCODE:\n```\n// DefaultValue: false\nenable-touch-pseudo-propagation?: boolean\n```\n\n----------------------------------------\n\nTITLE: Retrieving Element Configurations with __GetElementConfig in Lynx Framework (JSX)\nDESCRIPTION: This example demonstrates how to create an Element, set its configuration, and then retrieve that configuration using the `__GetElementConfig` function in the Lynx framework. The function returns a map of all configuration properties for the specified Element.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/api/engine/element-api/__GetElementConfig.mdx#2025-04-17_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n// main-thread.js\nlet element = __CreateElement('view', 0, {});\n__SetConfig(element, { anyConfig: {} });\n\nlet listener = __GetElementConfig(element);\n```\n\n----------------------------------------\n\nTITLE: Creating TemplateData from String in Android\nDESCRIPTION: Static method to create a TemplateData object from a JSON string in Android. It takes a String as input and returns a parsed TemplateData object.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/lynx-native-api/template-data.mdx#2025-04-17_snippet_1\n\nLANGUAGE: java\nCODE:\n```\npublic static TemplateData fromString(String json)\n```\n\n----------------------------------------\n\nTITLE: Formal syntax definition for aspect-ratio in CSS\nDESCRIPTION: The formal CSS syntax definition for the aspect-ratio property, showing it accepts a positive number optionally followed by a slash and another positive number.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/css/properties/aspect-ratio.mdx#2025-04-17_snippet_1\n\nLANGUAGE: css\nCODE:\n```\naspect-ratio = <number [0,∞]> [ / <number [0,∞]> ]\n```\n\n----------------------------------------\n\nTITLE: Sample JSON Data from Android\nDESCRIPTION: Example of JSON data format provided by Android platform. This shows the structure of data that might be passed as initialData from an Android host.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/guide/use-data-from-host-platform.mdx#2025-04-17_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"pageTitle\": \"Hello Lynx\"\n}\n```\n\n----------------------------------------\n\nTITLE: Performance Interface Definition in TypeScript\nDESCRIPTION: Defines the Performance interface structure that provides performance optimization options including chunk splitting configuration, file size printing, and console statement removal for production builds.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/api/rspeedy/rspeedy.performance.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface Performance \n\n```\n\n----------------------------------------\n\nTITLE: RSpeedy Config Example Implementation\nDESCRIPTION: Example showing how to configure a custom tsconfig path in RSpeedy configuration using defineConfig. The path can be relative to the project root directory.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/api/rspeedy/rspeedy.source.tsconfigpath.md#2025-04-17_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineConfig } from '@lynx-js/rspeedy'\nexport default defineConfig({\n  source: {\n    tsconfigPath: './tsconfig.build.json',\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Defining Performance Interface in TypeScript\nDESCRIPTION: This code snippet defines the Performance interface with its properties. It includes optional properties for chunk splitting, file size printing, and console removal configurations.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/rspeedy/rspeedy.performance.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface Performance {\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Formal Syntax for column-gap CSS Property\nDESCRIPTION: This code block defines the formal syntax for the column-gap property, specifying its allowed values and structure.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/css/properties/column-gap.mdx#2025-04-17_snippet_1\n\nLANGUAGE: css\nCODE:\n```\ncolumn-gap = <length-percentage [0,∞]>\n\n<length-percentage> =\n  <length>      |\n  <percentage>\n```\n\n----------------------------------------\n\nTITLE: Using querySelectorAll Method in ReactLynx\nDESCRIPTION: The querySelectorAll method selects all elements matching the given CSS selector in the page and returns an array of Element objects.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/api/react/Interface.Lynx.mdx#2025-04-17_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nquerySelectorAll: (selector: string) => Element[];\n```\n\n----------------------------------------\n\nTITLE: HTML Formal Syntax Definition\nDESCRIPTION: Defines the formal syntax structure for the mask-image property, showing allowed values and combinations.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/css/properties/mask-image.mdx#2025-04-17_snippet_1\n\nLANGUAGE: html\nCODE:\n```\nmask-image =\n<mask-reference>#\n\n<mask-reference> = none |\n<image>\n<image> =\n<url> |\n<gradient>\n<url> =\n<url()>\n<url()> = url( <string>) </string></url()></url()></url></gradient></url></image></image></mask-reference></mask-reference>\n```\n\n----------------------------------------\n\nTITLE: Defining Formal Syntax for CSS background-size Property\nDESCRIPTION: This snippet defines the formal syntax for the background-size property using CSS value definition syntax.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/css/properties/background-size.mdx#2025-04-17_snippet_1\n\nLANGUAGE: css\nCODE:\n```\n<bg-size> = [ <length-percentage> | auto ] {1, 2} | cover | contain\n```\n\n----------------------------------------\n\nTITLE: Implementing Input Event Binding in Kotlin for Lynx Framework\nDESCRIPTION: Kotlin implementation of a custom input component that handles text changes and emits events to the front-end. Provides the same functionality as the Java version with more concise syntax.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/guide/custom-native-component/custom-component-android.mdx#2025-04-17_snippet_7\n\nLANGUAGE: kotlin\nCODE:\n```\nclass LynxExplorerInput(context: LynxContext) : LynxUI<AppCompatEditText>(context) {\n\n  override fun createView(context: Context): AppCompatEditText {\n    return AppCompatEditText(context).apply {\n      addTextChangedListener(object : TextWatcher {\n        override fun beforeTextChanged(s: CharSequence?, start: Int, count: Int, after: Int) {}\n\n        override fun onTextChanged(s: CharSequence?, start: Int, before: Int, count: Int) {}\n\n        override fun afterTextChanged(s: Editable?) {\n          emitEvent(\"input\", mapOf(\"value\" to (s?.toString() ?: \"\")))\n        }\n      })\n    }\n  }\n\n  private fun emitEvent(name: String, value: Map<String, Any>?) {\n    val detail = LynxCustomEvent(sign, name)\n    value?.forEach { (key, v) ->\n      detail.addDetail(key, v)\n    }\n    lynxContext.eventEmitter.sendCustomEvent(detail)\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining the Output.cssModules property type in TypeScript\nDESCRIPTION: TypeScript signature for the cssModules property, showing it accepts a CssModules object or undefined.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/api/rspeedy/rspeedy.output.cssmodules.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ncssModules?: CssModules | undefined;\n```\n\n----------------------------------------\n\nTITLE: Modifying CSS Variables with JavaScript\nDESCRIPTION: Shows how to use JavaScript to dynamically modify CSS variable values using the setProperty method.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/css/properties/css-variable.mdx#2025-04-17_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n// Modify a css variable at a time\nlynx.getElementById('test').setProperty('--main-height', '300px');\n\n// Batch modify css variables\nlynx.getElementById('test').setProperty({\n  '--main-height1': '300px',\n  '--main-height2': '400px',\n});\n```\n\n----------------------------------------\n\nTITLE: Accessing Background Thread Data in Main Thread Function\nDESCRIPTION: Example demonstrating how to access data from the background thread inside a main thread function. Variables from the surrounding context are automatically captured when the function is defined.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/react/main-thread-script.mdx#2025-04-17_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nexport default function App() {\n  const red = 'red';\n\n  function addBackgroundColor(event: MainThread.ITouchEvent) {\n    'main thread';\n    event.currentTarget.setStyleProperty('background-color', red);\n  }\n\n  return (\n    <view main-thread:bindtap={addBackgroundColor}>\n      <text>Hello World!</text>\n      <text>Hello World!</text>\n    </view>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Root Interface registerDataProcessors Method\nDESCRIPTION: TypeScript definition for the deprecated registerDataProcessors method that registers data processors before root.render() is called.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/react/Interface.Root.mdx#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nregisterDataProcessors: (dataProcessorDefinition: DataProcessorDefinition) => void;\n```\n\n----------------------------------------\n\nTITLE: Defining Border-Inline-Start-Style in CSS\nDESCRIPTION: Examples of various border-inline-start-style property values in CSS. This property defines the style of the logical inline start border of an element, which corresponds to different physical borders depending on the writing mode and direction.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/css/properties/border-inline-start-style.mdx#2025-04-17_snippet_0\n\nLANGUAGE: css\nCODE:\n```\nborder-inline-start-style: none;\nborder-inline-start-style: hidden;\nborder-inline-start-style: dotted;\nborder-inline-start-style: dashed;\nborder-inline-start-style: solid;\nborder-inline-start-style: double;\nborder-inline-start-style: groove;\nborder-inline-start-style: ridge;\nborder-inline-start-style: inset;\nborder-inline-start-style: outset;\n```\n\n----------------------------------------\n\nTITLE: Options Object Structure in TypeScript\nDESCRIPTION: Type definition for the options parameter that customizes the IntersectionObserver behavior, including thresholds for intersection ratio changes, initial ratio for first detection, and whether to observe multiple target nodes.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/api/lynx-api/lynx/lynx-create-intersection-observer.mdx#2025-04-17_snippet_2\n\nLANGUAGE: ts\nCODE:\n```\noptions\n  ? options\n  : {\n      thresholds: [0],\n      initialRatio: 0,\n      observeAll: false,\n    };\n```\n\n----------------------------------------\n\nTITLE: Conditional Exports Configuration\nDESCRIPTION: Example of configuring conditional exports in package.json to map different paths based on conditions like lynx, import, and require.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/rspeedy/resolve.md#2025-04-17_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"foo\",\n  \"exports\": {\n    \".\": {\n      \"lynx\": \"./index-lynx.js\",\n      \"import\": \"./index-import.js\",\n      \"require\": \"./index-require.js\"\n    },\n    \"./bar\": {\n      \"import\": \"./bar-import.js\",\n      \"lynx\": \"./bar-lynx.js\",\n      \"require\": \"./bar-require.js\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining the liveReload Property Signature in TypeScript\nDESCRIPTION: TypeScript definition of the liveReload property which specifies whether to enable live reload functionality. It accepts a boolean value or can be undefined.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/api/rspeedy/rspeedy.dev.livereload.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nliveReload?: boolean | undefined;\n```\n\n----------------------------------------\n\nTITLE: Defining useCallback Function in TypeScript\nDESCRIPTION: This snippet defines the type signature of the useCallback function in React. It takes a callback function and a dependency list as parameters, and returns a memoized version of the callback.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/api/react/Function.useCallback.mdx#2025-04-17_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nfunction useCallback<T>(callback: T, deps: DependencyList): T\n```\n\n----------------------------------------\n\nTITLE: Customizing Hash Format in rspeedy Configuration\nDESCRIPTION: This example shows how to customize the hash format in the rspeedy configuration. It sets filenameHash to 'fullhash:16' to use a full hash with 16 characters in the output filenames.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/rspeedy/rspeedy.output.filenamehash.md#2025-04-17_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineConfig } from '@lynx-js/rspeedy'\n\nexport default defineConfig({\n  output: {\n    filenameHash: 'fullhash:16',\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: CSS align-self Formal Syntax Definition\nDESCRIPTION: Provides the formal syntax definition for the align-self property showing all possible values.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/api/css/properties/align-self.mdx#2025-04-17_snippet_1\n\nLANGUAGE: css\nCODE:\n```\nalign-self = auto | center | start | end | flex-start | flex-end | baseline | stretch\n```\n\n----------------------------------------\n\nTITLE: Importing ReactLynx Components\nDESCRIPTION: This snippet demonstrates how to import all components from the @lynx package as a namespace. This allows for dynamic lookup in TSDoc writings.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/react/index.mdx#2025-04-17_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport * as Lynx from '@lynx';\n```\n\n----------------------------------------\n\nTITLE: Accessing the mtsRenderEnd Property in PipelineEntry (TypeScript)\nDESCRIPTION: The mtsRenderEnd property provides the timestamp for the end of executing main thread scripts to build the Element Tree.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/lynx-api/performance-api/performance-entry/pipeline-entry.mdx#2025-04-17_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nmtsRenderEnd: number;\n```\n\n----------------------------------------\n\nTITLE: Defining SourceMap.js Property in TypeScript\nDESCRIPTION: TypeScript signature for the SourceMap.js property, which specifies how the source map should be generated or disabled.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/rspeedy/rspeedy.sourcemap.js.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\njs?: Rspack.DevTool | undefined | `${Exclude<Rspack.DevTool, false | 'eval'>}-debugids`;\n```\n\n----------------------------------------\n\nTITLE: Consumer Entry Setup\nDESCRIPTION: Entry point setup for the Consumer project with lazy loading support.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/react/code-splitting.md#2025-04-17_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\nimport '@lynx-js/react/experimental/lazy/import';\nimport { root } from '@lynx-js/react';\n\nimport { App } from './App.jsx';\n\nroot.render(<App />);\n```\n\n----------------------------------------\n\nTITLE: Rendering View with Data Attribute in JSX\nDESCRIPTION: This example demonstrates how the frontend framework can generate render directives with data attributes using JSX syntax.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/engine/element-api/__AddDataset.mdx#2025-04-17_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<view src=\"xxx\" data-key=\"value\" />\n```\n\n----------------------------------------\n\nTITLE: Defining TypeScript Interface Property for defaultDisplayLinear\nDESCRIPTION: TypeScript interface property definition that controls whether the default CSS display value is 'linear'. When set to false, the default display value becomes 'flex' instead of 'linear'.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/api/rspeedy/react-rsbuild-plugin.pluginreactlynxoptions.defaultdisplaylinear.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ndefaultDisplayLinear?: boolean;\n```\n\n----------------------------------------\n\nTITLE: Implementing Direct Element Manipulation in Lynx Framework\nDESCRIPTION: This snippet shows how to implement direct element manipulation using LYNX_UI_METHOD in Objective-C. It adds a 'focus' method to the custom input element to handle front-end calls.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/guide/custom-native-component/custom-component-iOS.mdx#2025-04-17_snippet_9\n\nLANGUAGE: objc\nCODE:\n```\n#import \"LynxExplorerInput.h\"\n#import <Lynx/LynxComponentRegistry.h>\n#import <Lynx/LynxPropsProcessor.h>\n#import <Lynx/LynxUIMethodProcessor.h>\n\n@implementation LynxExplorerInput\n\nLYNX_LAZY_REGISTER_UI(\"input\")\n\nLYNX_UI_METHOD(focus) {\n    if ([self.view becomeFirstResponder]) {\n        callback(kUIMethodSuccess, nil);\n    } else {\n        callback(kUIMethodUnknown, @\"fail to focus\");\n    }\n}\n\n- (UITextField *)createView {\n  UITextField *textField = [[LynxTextField alloc] init];\n  //...\n  textField.delegate = self;\n  [[NSNotificationCenter defaultCenter] addObserver:self\n                                        selector:@selector(textFieldDidChange:)\n                                        name:UITextFieldTextDidChangeNotification\n                                        object:textField];\n  return textField;\n}\n\n- (void)emitEvent:(NSString *)name detail:(NSDictionary *)detail {\n  LynxCustomEvent *eventInfo = [[LynxDetailEvent alloc] initWithName:name\n                                                          targetSign:[self sign]\n                                                              detail:detail];\n  [self.context.eventEmitter dispatchCustomEvent:eventInfo];\n}\n\n- (void)textFieldDidChange:(NSNotification *)notification {\n  [self emitEvent:@\"input\"\n           detail:@{\n             @\"value\": [self.view text] ?: @\"\",\n           }];\n}\n\n- (void)layoutDidFinished {\n    self.view.padding = self.padding;\n}\n\nLYNX_PROP_SETTER(\"value\", setValue, NSString *) {\n    self.view.text = value;\n}\n\n@end\n\n@implementation LynxTextField\n\n- (UIEditingInteractionConfiguration)editingInteractionConfiguration API_AVAILABLE(ios(13.0)) {\n  return UIEditingInteractionConfigurationNone;\n}\n\n- (void)setPadding:(UIEdgeInsets)padding {\n  _padding = padding;\n  [self setNeedsLayout];\n}\n\n- (CGRect)textRectForBounds:(CGRect)bounds {\n  CGFloat x = self.padding.left;\n  CGFloat y = self.padding.top;\n  CGFloat width = bounds.size.width - self.padding.left - self.padding.right;\n  CGFloat height = bounds.size.height - self.padding.top - self.padding.bottom;\n\n  return CGRectMake(x, y, width, height);\n}\n\n- (CGRect)editingRectForBounds:(CGRect)bounds {\n  return [self textRectForBounds:bounds];\n}\n@end\n```\n\n----------------------------------------\n\nTITLE: Defining cancelAnimationFrame Method Signature in TypeScript\nDESCRIPTION: This code snippet defines the TypeScript signature for the cancelAnimationFrame method. It takes a requestID parameter of type number and returns void.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/lynx-api/lynx/lynx-cancel-animation-frame.mdx#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ncancelAnimationFrame: (requestID: number) => void;\n```\n\n----------------------------------------\n\nTITLE: Injecting LynxGenericResourceFetcher in Java\nDESCRIPTION: This snippet demonstrates how to inject a LynxGenericResourceFetcher when constructing a LynxView using LynxViewBuilder in Java. It also shows how to enable the generic resource fetcher capability.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/lynx-native-api/resource-fetcher/GenericResourceFetcher.mdx#2025-04-17_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nLynxViewBuilder builder = new LynxViewBuilder();\nbuilder.setGenericResourceFetcher(new GenericTemplateResourceFetcher());\nbuilder.setEnableGenericResourceFetcher(LynxBooleanOption.TRUE);\n```\n\n----------------------------------------\n\nTITLE: Sample Bank Card Data Structure\nDESCRIPTION: Static array containing sample bank card data with mock values.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/react/payment-details.mdx#2025-04-17_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nconst cards = [\n  { type: \"bac\", number: \"4558 **** **** 6767\", name: \"Alex Quentin\" },\n  { type: \"boc\", number: \"6222 **** **** 8058\", name: \"Alex Quentin\" },\n  ...\n];\n```\n\n----------------------------------------\n\nTITLE: CSS Animation Name Property Syntax Examples\nDESCRIPTION: Examples of how to use the animation-name CSS property with single and multiple animations. The property accepts animation identifiers defined in @keyframes rules.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/css/properties/animation-name.mdx#2025-04-17_snippet_0\n\nLANGUAGE: css\nCODE:\n```\n/* Single animation */\nanimation-name: none;\nanimation-name: test_05;\nanimation-name: -specific;\nanimation-name: sliding-vertically;\n\n/* Multiple animations */\nanimation-name: test1, animation4;\nanimation-name:\n  none,\n  -moz-specific,\n  sliding;\n```\n\n----------------------------------------\n\nTITLE: Accessing Event Timestamp in Lynx\nDESCRIPTION: The timestamp property indicates when the event was generated as a number value.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/lynx-api/event/event.mdx#2025-04-17_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ntimestamp: number;\n```\n\n----------------------------------------\n\nTITLE: Formal Syntax Definition for CSS background-color Property\nDESCRIPTION: The formal syntax definition for the background-color property, showing the available color formats that can be used.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/css/properties/background-color.mdx#2025-04-17_snippet_1\n\nLANGUAGE: css\nCODE:\n```\n<bg-color> = <rgb()> | <rgba()> | <hsl()> | <hsla()> | <hex-color> | <named-color>\n```\n\n----------------------------------------\n\nTITLE: Configuring QR Code Plugin with Custom Schema in JavaScript\nDESCRIPTION: This example demonstrates how to use the pluginQRCode with a custom schema function. The schema function prepends 'lynx://' to the URL and adds a 'dev=1' query parameter.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/rspeedy/qrcode-rsbuild-plugin.pluginqrcodeoptions.schema.md#2025-04-17_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { pluginQRCode } from '@lynx-js/plugin-qrcode'\nimport { defineConfig } from '@lynx-js/rspeedy'\n\nexport default defineConfig({\n  plugins: [\n    pluginQRCode({\n      schema(url) {\n        return `lynx://${url}?dev=1`\n      },\n    }),\n  ],\n})\n```\n\n----------------------------------------\n\nTITLE: Defining GetID Function Syntax in JSX\nDESCRIPTION: Defines the syntax for the __GetID function which takes an Element parameter and returns a string representing the element's ID.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/engine/element-api/__GetID.mdx#2025-04-17_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n__GetID(element: Element) : string;\n```\n\n----------------------------------------\n\nTITLE: Using max-content in CSS Properties\nDESCRIPTION: Demonstrates the usage of max-content keyword with various CSS properties including width and grid layout properties. This allows elements to size themselves based on their content's maximum intrinsic width.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/css/data-type/max-content.mdx#2025-04-17_snippet_0\n\nLANGUAGE: css\nCODE:\n```\nwidth: max-content;\ngrid-template-columns: max-content;\ngrid-template-rows: max-content;\ngrid-auto-columns: max-content;\ngrid-auto-rows: max-content;\n```\n\n----------------------------------------\n\nTITLE: Image Mode Property Definition\nDESCRIPTION: Defines the mode property for controlling image scaling and cropping behavior.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/elements/built-in/image.mdx#2025-04-17_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n// DefaultValue: 'scaleToFill'\nmode?: 'scaleToFill' | 'aspectFit' | 'aspectFill';\n```\n\n----------------------------------------\n\nTITLE: Updating Data with Processor Name in Java\nDESCRIPTION: Template code for updating data with a specified processor name in Android using Java. This shows the structure for applying a named data processor when updating data.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/guide/use-data-from-host-platform.mdx#2025-04-17_snippet_13\n\nLANGUAGE: java\nCODE:\n```\nLynxUpdateMeta meta = new LynxUpdateMeta();\n\n// TODO: set data and processorName\n\nlynxView.updateMetaData(meta);\n```\n\n----------------------------------------\n\nTITLE: Retrieving ExtraInfo from LynxTemplateBundle in Objective-C\nDESCRIPTION: Retrieves the extraInfo field from the pageConfig in the template.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/api/lynx-native-api/template-bundle.mdx#2025-04-17_snippet_8\n\nLANGUAGE: objective-c\nCODE:\n```\n- (NSDictionary* _Nullable)extraInfo;\n```\n\n----------------------------------------\n\nTITLE: Formal syntax for CSS font-size property\nDESCRIPTION: The formal syntax definition for the font-size property, showing it accepts length or percentage values.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/css/properties/font-size.mdx#2025-04-17_snippet_1\n\nLANGUAGE: css\nCODE:\n```\nfont-size = <length> | <percentage>\n```\n\n----------------------------------------\n\nTITLE: Releasing TemplateBundle Resources in Java\nDESCRIPTION: Releases the Native memory held by the TemplateBundle object, making it invalid after execution.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/lynx-native-api/template-bundle.mdx#2025-04-17_snippet_5\n\nLANGUAGE: java\nCODE:\n```\npublic void release();\n```\n\n----------------------------------------\n\nTITLE: Rendering Interactive Example in Lynx Website\nDESCRIPTION: JSX code for rendering an interactive example of the max-width property in the Lynx documentation website. It uses the Go component to display a code example with a preview image.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/css/properties/max-width.mdx#2025-04-17_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Go\n  example=\"css-api\"\n  defaultFile=\"src/max-width/App.tsx\"\n  img=\"https://lf-lynx.tiktok-cdns.com/obj/lynx-artifacts-oss-sg/lynx-website/assets/doc/css/max-width.jpg\"\n  entry=\"src/max-width\"\n  defaultEntryFile=\"dist/max-width.lynx.bundle\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Excluding Specific Files and Directories in JavaScript\nDESCRIPTION: An example of using Source.exclude to exclude specific files, directories, and file patterns from compilation in a Rsbuild configuration.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/rspeedy/rspeedy.source.exclude.md#2025-04-17_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineConfig } from '@lynx-js/rspeedy'\n\nexport default defineConfig({\n  source: {\n    exclude: [\n      // Exclude all files in the test directory\n      /[\\\\/]test[\\\\/]/,\n      // Exclude specific file\n      './src/legacy-file.js',\n      // Exclude files matching a pattern\n      /\\.stories\\.(js|ts)x?$/,\n    ],\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Defining the Dev Interface in TypeScript\nDESCRIPTION: Declaration of the Dev interface which contains configuration options for development environments in RSpeedy. This interface provides structure for controlling development behaviors such as HMR, asset prefixing, and other development server features.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/api/rspeedy/rspeedy.dev.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface Dev \n```\n\n----------------------------------------\n\nTITLE: CSS padding-right Property Syntax Examples\nDESCRIPTION: Examples showing different ways to define the padding-right property in CSS, including length values and percentage values. All values must be non-negative.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/css/properties/padding-right.mdx#2025-04-17_snippet_0\n\nLANGUAGE: css\nCODE:\n```\n/* <length> values */\npadding-right: 0.5em;\npadding-right: 0;\n\n/* <percentage> value */\npadding-right: 10%;\n```\n\n----------------------------------------\n\nTITLE: Configuring TypeScript Isolated Modules\nDESCRIPTION: Configuration for enabling isolated modules in tsconfig.json for SWC compatibility.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/rspeedy/typescript.md#2025-04-17_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"compilerOptions\": {\n    \"isolatedModules\": true\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Formal Syntax Definition for min-width in Lynx CSS\nDESCRIPTION: The formal syntax definition for the min-width property in Lynx CSS. It specifies the allowed values and their format.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/css/properties/min-width.mdx#2025-04-17_snippet_1\n\nLANGUAGE: css\nCODE:\n```\nmin-width = <length-percentage [0,∞]>\n\n<length-percentage> =\n  <length>      |\n  <percentage>\n```\n\n----------------------------------------\n\nTITLE: Creating ComponentElement Function Signature in JSX\nDESCRIPTION: Function signature for __CreateComponent that creates a ComponentElement object with various parameters including parent ID, component ID, CSS ID, and configuration options.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/engine/element-api/__CreateComponent.mdx#2025-04-17_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n__CreateComponent(componentParentUniqueID: number, componentID: string, cssID: Number, entryName: string, name: string, path: string, config: Record<string, any>|null|undefined, info: Record<string, any>|null|undefined): Element;\n```\n\n----------------------------------------\n\nTITLE: Setting full-span Attribute in TypeScript\nDESCRIPTION: Demonstrates how to set the full-span attribute for a <list-item> within a <list>. This attribute indicates that the list item occupies a full row or column.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/elements/built-in/list.mdx#2025-04-17_snippet_25\n\nLANGUAGE: tsx\nCODE:\n```\n// DefaultValue: false\nfull-span?: boolean\n<list>\n  <list-item full-span={true}/>\n</list>\n```\n\n----------------------------------------\n\nTITLE: Basic Syntax for relative-layout-once CSS Property\nDESCRIPTION: Shows the basic CSS syntax for setting the relative-layout-once property which can be either true or false. This property controls typesetting acceleration in relative layouts.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/css/properties/relative-layout-once.mdx#2025-04-17_snippet_0\n\nLANGUAGE: css\nCODE:\n```\nrelative-layout-once: true;\nrelative-layout-once: false;\n```\n\n----------------------------------------\n\nTITLE: Defining enableRemoveCSSScope Property in TypeScript\nDESCRIPTION: This code snippet shows the TypeScript signature for the enableRemoveCSSScope property. It is an optional boolean property that controls CSS scoping behavior in the React Lynx plugin.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/rspeedy/react-rsbuild-plugin.pluginreactlynxoptions.enableremovecssscope.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nenableRemoveCSSScope?: boolean | undefined;\n```\n\n----------------------------------------\n\nTITLE: React Module Import Configuration\nDESCRIPTION: Import statement for React components using the Lynx namespace, used for dynamic lookup in TSDoc documentation.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/react/Function.isValidElement.mdx#2025-04-17_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as Lynx from '@lynx';\n```\n\n----------------------------------------\n\nTITLE: UseRef with No Initial Value\nDESCRIPTION: Overload of useRef that takes no parameters and returns a MutableRefObject with an undefined value. This version is used when you want to initialize a ref without an initial value.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/react/Function.useRef.mdx#2025-04-17_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nfunction useRef<T>(): MutableRefObject<T | undefined>\n```\n\n----------------------------------------\n\nTITLE: Background-Only Code Usage Rules in ReactLynx (JSX)\nDESCRIPTION: This example illustrates the rules for using background-only code in ReactLynx, showing correct and incorrect usages in different contexts such as top-level code, render functions, and effects.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/react/thinking-in-reactlynx.mdx#2025-04-17_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nimport { backgroundOnlyFunction } from 'external-module';\n\nbackgroundOnlyFunction(); // ❌ 错误：在顶层调用后台专属代码\n\nexport function App() {\n  function backgroundOnly() {\n    'background only';\n    fetch();\n    NativeModules.call();\n    backgroundOnlyFunction(); // ✅ 正确：在后台专属函数内调用后台专属 API\n  }\n\n  backgroundOnly(); // ❌ 错误：在渲染函数中调用后台专属代码\n\n  useEffect(() => {\n    backgroundOnly(); // ✅ 正确：从后台专属代码中调用后台专属代码\n  }, []);\n\n  return <view />;\n}\n```\n\n----------------------------------------\n\nTITLE: PureComponent Properties and Static Members\nDESCRIPTION: Definition of PureComponent's properties including props, state, context, and the static contextType property.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/react/Class.PureComponent.mdx#2025-04-17_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\nreadonly props: Readonly<P>;\nstate: Readonly<S>;\ncontext: unknown;\nstatic contextType?: Context<any>;\n```\n\n----------------------------------------\n\nTITLE: Defining createRoot Function in TypeScript for ReactLynx\nDESCRIPTION: This function creates and returns the default root for ReactLynx to render JSX. It is deprecated and users should use the 'root' variable instead. The function returns a Root object.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/react/Function.createRoot.mdx#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction createRoot(): Root\n```\n\n----------------------------------------\n\nTITLE: Demonstrating CSS justify-items Property Syntax\nDESCRIPTION: This snippet shows the basic syntax for using the justify-items CSS property. It includes examples of different values that can be assigned to justify-items.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/css/properties/justify-items.mdx#2025-04-17_snippet_0\n\nLANGUAGE: css\nCODE:\n```\njustify-items: stretch;\njustify-items: center;\njustify-items: start;\njustify-items: end;\n```\n\n----------------------------------------\n\nTITLE: Using CSS Auto Font Size Preset Sizes\nDESCRIPTION: Example showing how to set preset font sizes for automatic text scaling. The property accepts an array of length values that define the available font size options.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/css/properties/-x-auto-font-size-preset-sizes.mdx#2025-04-17_snippet_0\n\nLANGUAGE: css\nCODE:\n```\n-x-auto-font-size: true;\n-x-auto-font-size-preset-sizes: 10px 12px 15px;\n```\n\n----------------------------------------\n\nTITLE: Updating LynxView Viewport in Android\nDESCRIPTION: Method to update the viewport dimensions of a LynxView component in Android. Takes width and height measurement specifications as parameters to set the view's dimensions.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/lynx-native-api/lynx-view/update-viewport.mdx#2025-04-17_snippet_0\n\nLANGUAGE: java\nCODE:\n```\npublic void updateViewport(int widthMeasureSpec, int heightMeasureSpec)\n```\n\n----------------------------------------\n\nTITLE: Defining LynxGenericResourceFetcher Protocol in Objective-C\nDESCRIPTION: This snippet defines the LynxGenericResourceFetcher protocol in Objective-C, which includes methods for fetching resources, resource paths, and streams. Each method returns a dispatch_block_t for potential cancellation of requests.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/lynx-native-api/resource-fetcher/GenericResourceFetcher.mdx#2025-04-17_snippet_2\n\nLANGUAGE: objectivec\nCODE:\n```\n@protocol LynxGenericResourceFetcher <NSObject>\n\n/**\n * fetch resource with contents.\n *\n * @param request.\n * @param callback contents of the requiring resource.\n *\n * @return: A block which can cancel the image request if it is not finished. nil if cancel action\n * is not supported.\n */\n@required\n- (dispatch_block_t)fetchResource:(nonnull LynxResourceRequest *)request\n                       onComplete:(LynxGenericResourceCompletionBlock _Nonnull)callback;\n\n/**\n * fetch resource with res path.\n *\n * @param request\n * @param callback path on the disk of the requiring resource.\n *\n * @return: A block which can cancel the image request if it is not finished. nil if cancel action\n * is not supported.\n */\n@required\n- (dispatch_block_t)fetchResourcePath:(nonnull LynxResourceRequest *)request\n                           onComplete:(LynxGenericResourcePathCompletionBlock _Nonnull)callback;\n\n/**\n * fetch resource with stream.\n *\n * @param request\n * @param delegate streaming of the requiring resource.\n *\n * @return: A block which can cancel the image request if it is not finished. nil if cancel action\n * is not supported.\n */\n@optional\n- (dispatch_block_t)fetchStream:(nonnull LynxResourceRequest *)request\n                     withStream:(nonnull id<LynxResourceStreamLoadDelegate>)delegate;\n\n@end\n```\n\n----------------------------------------\n\nTITLE: Basic Async Error Handling\nDESCRIPTION: Example showing async error handling with Promise and fetch, demonstrating a common but limited approach.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/lynx-api/lynx/lynx-report-error.mdx#2025-04-17_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport fetch from '@fetch';\n\nexport function getData(params) {\n  return new Promise((resolve, reject) => {\n    fetch(\n      {\n        url: HOST,\n        method: 'GET',\n        params,\n      },\n      function cb(res) {\n        if (res?.status_code === 0) {\n          lynx.reportError('fetch error: ' + res?.status_code);\n          reject(res);\n        } else {\n          resolve(res);\n        }\n      },\n    );\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring String Asset Prefix\nDESCRIPTION: Example of setting dev.assetPrefix to a custom URL string for static assets.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/rspeedy/rspeedy.dev.assetprefix.md#2025-04-17_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineConfig } from '@lynx-js/rspeedy'\nexport default defineConfig({\n  dev: {\n    assetPrefix: 'https://example.com/assets/',\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Default Data Processor Function Definition in TypeScript\nDESCRIPTION: Defines an optional default data processor function that transforms raw initialization data into processed init data. Allows customization of input and output types through InitDataRaw and InitData interfaces.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/react/Interface.DataProcessorDefinition.mdx#2025-04-17_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\noptional defaultDataProcessor: (rawInitData: InitDataRaw) => InitData;\n```\n\n----------------------------------------\n\nTITLE: Disabling Both HMR and Live Reload in RSpeedy Configuration\nDESCRIPTION: Example showing how to disable both Hot Module Replacement (HMR) and live reload functionality. This prevents WebSocket requests to the dev server and automatic page refreshes when files change.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/api/rspeedy/rspeedy.dev.livereload.md#2025-04-17_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineConfig } from '@lynx-js/rspeedy'\n\nexport default defineConfig({\n  dev: {\n    hmr: false,\n    liveReload: false,\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Demonstrating CSS margin-left Property Usage\nDESCRIPTION: This snippet shows various ways to use the margin-left property in CSS, including length values, percentage values, and the auto keyword.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/css/properties/margin-left.mdx#2025-04-17_snippet_0\n\nLANGUAGE: css\nCODE:\n```\n/* <length> values */\nmargin-left: 0.5em;\nmargin-left: 0;\nmargin-left: 2rpx;\n\n/* <percentage> value */\nmargin-left: 10%;\n```\n\n----------------------------------------\n\nTITLE: Defining setTimeout Function Signature in TypeScript\nDESCRIPTION: TypeScript function signature for setTimeout that accepts a callback function and optional delay parameter. Returns a numeric timer ID. The delay parameter defaults to 0 if omitted, and the actual delay may be longer if the app is backgrounded.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/lynx-api/global/set-timeout.mdx#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nsetTimeout(function: () => void, delay?: number): number;\n```\n\n----------------------------------------\n\nTITLE: Configuring SWC Loader Options in TypeScript\nDESCRIPTION: Type definition for the SWC configuration property that controls the builtin:swc-loader options in rspack. The property is optional and accepts either a ToolsConfig['swc'] type or undefined.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/rspeedy/rspeedy.tools.swc.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nswc?: ToolsConfig['swc'] | undefined;\n```\n\n----------------------------------------\n\nTITLE: Defining Filename Interface in TypeScript\nDESCRIPTION: This code snippet defines the Filename interface, which is used to specify the naming conventions for different types of output files in a JavaScript bundling process. It includes optional properties for various file types such as bundles, CSS, fonts, images, JavaScript, media, SVG, and templates.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/rspeedy/rspeedy.filename.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface Filename {\n  bundle?: string | undefined;\n  css?: string | undefined;\n  font?: string | undefined;\n  image?: string | undefined;\n  js?: string | undefined;\n  media?: string | undefined;\n  svg?: string | undefined;\n  template?: string | undefined;\n}\n```\n\n----------------------------------------\n\nTITLE: Using -x-auto-font-size CSS Property in Lynx\nDESCRIPTION: Examples of the -x-auto-font-size CSS property syntax showing different parameter combinations. The first parameter enables/disables the feature, followed by optional minimum size, maximum size, and granularity values.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/css/properties/-x-auto-font-size.mdx#2025-04-17_snippet_0\n\nLANGUAGE: css\nCODE:\n```\n-x-auto-font-size: 'true';\n-x-auto-font-size: 'true 10px';\n-x-auto-font-size: 'true 10px 30px';\n-x-auto-font-size: 'true 10px 30px 2px';\n```\n\n----------------------------------------\n\nTITLE: Defining React Fragment Function in TypeScript\nDESCRIPTION: TypeScript definition of the React Fragment function, specifying its parameters and return type. It groups elements without a wrapper node.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/react/Function.Fragment.mdx#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction Fragment(props: object): null | ReactElement<any, string | JSXElementConstructor<any>>\n```\n\n----------------------------------------\n\nTITLE: Importing Legacy Compatibility Table Component\nDESCRIPTION: React/JSX code snippet demonstrating how to import and use the LegacyCompatTable component to display API compatibility information.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/lynx-api/main-thread.mdx#2025-04-17_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { LegacyCompatTable } from '@lynx';\n\n<LegacyCompatTable metadata=\"lynx-api/main-thread/MainThread-APIs\" />\n```\n\n----------------------------------------\n\nTITLE: Defining __AddConfig Function Signature in Lynx Framework (JSX)\nDESCRIPTION: Function signature for the __AddConfig method which takes an Element object, a config type string, and a value of any type. This function allows developers to set custom configurations for Element objects.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/engine/element-api/__AddConfig.mdx#2025-04-17_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n__AddConfig(element: Element, type: string, value: any) : void;\n```\n\n----------------------------------------\n\nTITLE: Defining Source.exclude Property in TypeScript\nDESCRIPTION: The TypeScript signature for the Source.exclude property, which accepts an optional array of Rspack.RuleSetCondition or undefined.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/rspeedy/rspeedy.source.exclude.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexclude?: Rspack.RuleSetCondition[] | undefined;\n```\n\n----------------------------------------\n\nTITLE: Element Equality Comparison Example\nDESCRIPTION: Demonstrates how to use __ElementIsEqual to compare two Element objects created with __CreateElement\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/engine/element-api/__ElementIsEqual.mdx#2025-04-17_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n// main-thread.js\nlet childA = __CreateElement('view', 0, {});\n\nlet childB = __CreateElement('view', 0, {});\n\nlet isEqual = __ElementIsEqual(childA, childB);\n```\n\n----------------------------------------\n\nTITLE: Rendering Platform-Specific Tabs for Constraint Mode\nDESCRIPTION: This JSX snippet creates platform-specific tabs for iOS and Android, displaying content from imported MDX files about constraint modes for LynxView.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/guide/embed-lynx-to-native.mdx#2025-04-17_snippet_1\n\nLANGUAGE: JSX\nCODE:\n```\n<PlatformTabs hashKey=\"platform\">\n<PlatformTabs.Tab platform=\"ios\">\n<ModeiOS />\n</PlatformTabs.Tab>\n\n<PlatformTabs.Tab platform=\"android\">\n  <ModeAndroid />\n</PlatformTabs.Tab>\n\n</PlatformTabs>\n```\n\n----------------------------------------\n\nTITLE: Importing Global Styles in Lynx\nDESCRIPTION: Shows how to import the CSS file as global styles in a Lynx application.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/guide/start/tutorial-gallery.mdx#2025-04-17_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport '../index.css';\n```\n\n----------------------------------------\n\nTITLE: Using flex-basis CSS Property with Different Values\nDESCRIPTION: Examples of different ways to set the flex-basis CSS property using various units and values including em units, pixels, percentages, and the auto value.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/css/properties/flex-basis.mdx#2025-04-17_snippet_0\n\nLANGUAGE: css\nCODE:\n```\n/* Specify <'width'> */\nflex-basis: 10em;\nflex-basis: 3px;\nflex-basis: 50%;\nflex-basis: auto;\n```\n\n----------------------------------------\n\nTITLE: Accessing Event Type Property in Lynx\nDESCRIPTION: The type property indicates the type of event that was triggered.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/lynx-api/event/event.mdx#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntype: string;\n```\n\n----------------------------------------\n\nTITLE: Defining Accessibility Trait Attribute in TypeScript\nDESCRIPTION: Defines the 'accessibility-trait' attribute that sets the type characteristics of a node for accessibility support, with specific system supplements for different node types.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/elements/built-in/view.mdx#2025-04-17_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\n// DefaultValue: \"none\"\naccessibility-traits?: \"none\" | \"button\" | \"image\" | \"text\"\n```\n\n----------------------------------------\n\nTITLE: Enabling Lynx DevTool Switches in Android (Kotlin)\nDESCRIPTION: This code snippet shows how to enable the Lynx Debug, Lynx DevTool, and Lynx LogBox switches when initializing LynxEnv in an Android application using Kotlin.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/guide/start/integrate-lynx-devtool.mdx#2025-04-17_snippet_8\n\nLANGUAGE: kotlin\nCODE:\n```\nprivate fun initLynxEnv() {\n  LynxEnv.inst().init(this, null, null, null)\n  // 打开 Lynx Debug 开关\n  LynxEnv.inst().enableLynxDebug(true)\n  // 打开 Lynx DevTool 开关\n  LynxEnv.inst().enableDevtool(true)\n  // 打开 Lynx LogBox 开关\n  LynxEnv.inst().enableLogBox(true)\n}\n```\n\n----------------------------------------\n\nTITLE: Defining View Name Attribute in TypeScript\nDESCRIPTION: Defines the 'name' attribute used to specify the element name, which allows native code to find and operate the corresponding node through findViewByName.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/elements/built-in/view.mdx#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// DefaultValue undefined\nname?: string\n```\n\n----------------------------------------\n\nTITLE: Defining NativeLocalStorageModule Interface in Objective-C\nDESCRIPTION: Header file for the NativeLocalStorageModule that implements the LynxModule protocol. This establishes the interface for a native storage module that will be accessible from Lynx.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/guide/custom-native-modules/native-module-ios.mdx#2025-04-17_snippet_0\n\nLANGUAGE: objective-c\nCODE:\n```\n#import <Foundation/Foundation.h>\n#import <Lynx/LynxModule.h>\n\nNS_ASSUME_NONNULL_BEGIN\n\n@interface NativeLocalStorageModule : NSObject <LynxModule>\n\n@end\n\nNS_ASSUME_NONNULL_END\n```\n\n----------------------------------------\n\nTITLE: Valid CSS Time Values Examples\nDESCRIPTION: Examples of valid time values in CSS, including integer, negative, non-integer, and zero values. The <time> data type requires a unit (s or ms) to be valid.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/css/data-type/time.mdx#2025-04-17_snippet_0\n\nLANGUAGE: css\nCODE:\n```\n12s         Positive integer\n-456ms      Negative integer\n4.3ms       Non-integer\n14mS        The unit is case-insensitive, although capital letters are not recommended.\n+0s         Zero with a leading + and a unit\n-0ms        Zero with a leading - and a unit\n```\n\n----------------------------------------\n\nTITLE: __GetDataset Function Signature in JSX\nDESCRIPTION: Function signature for the __GetDataset method which takes an Element as input and returns a Record containing all data attributes.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/engine/element-api/__GetDataset.mdx#2025-04-17_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n__GetDataset(element: Element) : Record<string, any>;\n```\n\n----------------------------------------\n\nTITLE: iOS LynxExtraTiming Class Definition\nDESCRIPTION: Definition of the LynxExtraTiming class in Objective-C used to store performance timing data including page open time, template preparation, and container initialization timestamps.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/lynx-native-api/lynx-view/set-extra-timing.mdx#2025-04-17_snippet_3\n\nLANGUAGE: objc\nCODE:\n```\n@interface LynxExtraTiming : NSObject\n\n// Page open time, corresponds to openTime in InitContainerEntry.\n@property(nonatomic, assign) uint64_t openTime;\n// Timestamp for the start of preparing the TemplateBundle, corresponds to prepareTemplateStart in InitContainerEntry.\n@property(nonatomic, assign) uint64_t prepareTemplateStart;\n// Timestamp for the end of preparing the TemplateBundle, corresponds to prepareTemplateEnd in InitContainerEntry.\n@property(nonatomic, assign) uint64_t prepareTemplateEnd;\n// Timestamp for the start of container initialization, corresponds to containerInitStart in InitContainerEntry.\n@property(nonatomic, assign) uint64_t containerInitStart;\n// Timestamp for the end of container initialization, corresponds to containerInitEnd in InitContainerEntry.\n@property(nonatomic, assign) uint64_t containerInitEnd;\n\n@end\n```\n\n----------------------------------------\n\nTITLE: Selector List in CSS\nDESCRIPTION: Shows how to group multiple selectors using commas\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/css/selectors.mdx#2025-04-17_snippet_9\n\nLANGUAGE: css\nCODE:\n```\nselector1,selector2 { property declarations }\n```\n\nLANGUAGE: css\nCODE:\n```\nselector1, selector2 {\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Marking TemplateData State in Android\nDESCRIPTION: Method to mark the current TemplateData with an associated dataProcessor name in Android. This is used for data preprocessing when the TemplateData is used in UpdateData.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/lynx-native-api/template-data.mdx#2025-04-17_snippet_2\n\nLANGUAGE: java\nCODE:\n```\npublic void markState(String name)\n```\n\n----------------------------------------\n\nTITLE: Using APITable Component in MDX\nDESCRIPTION: Demonstrates how to use the APITable component with an explicit query parameter or by leveraging the frontmatter API field. This component displays compatibility data for Lynx technologies across platforms.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/internal/docs-contribution-guide/doc-components.mdx#2025-04-17_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n<APITable query=\"your/api/path\" />\n```\n\nLANGUAGE: md\nCODE:\n```\n---\napi: your/api/path\n---\n\n<APITable />\n```\n\n----------------------------------------\n\nTITLE: Defining JSX Configuration Type for React Rsbuild Plugin in TypeScript\nDESCRIPTION: This code snippet defines the type for the 'jsx' property in the PluginReactLynxOptions interface. It allows for partial configuration of JSX transformation using the JsxTransformerConfig type.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/api/rspeedy/react-rsbuild-plugin.pluginreactlynxoptions.jsx.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\njsx?: Partial<JsxTransformerConfig> | undefined;\n```\n\n----------------------------------------\n\nTITLE: Defining CssModuleLocalsConvention Type in TypeScript\nDESCRIPTION: Type definition for CSS module class name export conventions. Specifies five possible values that determine how class names are transformed during export: asIs (no transformation), camelCase (with original preserved), camelCaseOnly (only camelized version), dashes (only transform dashes), and dashesOnly (transform dashes without original).\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/api/rspeedy/rspeedy.cssmodulelocalsconvention.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport type CssModuleLocalsConvention = 'asIs' | 'camelCase' | 'camelCaseOnly' | 'dashes' | 'dashesOnly';\n```\n\n----------------------------------------\n\nTITLE: Specifying max-width in CSS for Lynx\nDESCRIPTION: Examples of using the max-width property in CSS for Lynx applications. It shows how to set max-width using pixel and em length units, as well as percentage values.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/css/properties/max-width.mdx#2025-04-17_snippet_0\n\nLANGUAGE: css\nCODE:\n```\n/* <length> */\nmax-width: 120px;\nmax-width: 10em;\n\n/* <percentage> */\nmax-width: 75%;\n```\n\n----------------------------------------\n\nTITLE: Disabling HMR in Rspeedy Configuration\nDESCRIPTION: Example showing how to disable Hot Module Replacement in Rspeedy by setting the hmr property to false in the configuration object.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/api/rspeedy/rspeedy.dev.hmr.md#2025-04-17_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineConfig } from '@lynx-js/rspeedy'\n\nexport default defineConfig({\n  dev: {\n    hmr: false,\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring All-in-One Chunk Strategy Example\nDESCRIPTION: JavaScript configuration example showing how to set up the 'all-in-one' chunk splitting strategy which bundles all modules into a single chunk.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/api/rspeedy/rspeedy.chunksplit.strategy.md#2025-04-17_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineConfig } from '@lynx-js/rspeedy'\n\nexport default defineConfig({\n  performance: {\n    chunkSplit: {\n      strategy: 'all-in-one',\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Defining Formal Syntax for CSS justify-items Property\nDESCRIPTION: This code block defines the formal syntax for the justify-items CSS property, showing the allowed values in a concise format.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/css/properties/justify-items.mdx#2025-04-17_snippet_1\n\nLANGUAGE: css\nCODE:\n```\njustify-items = stretch | center | start | end\n```\n\n----------------------------------------\n\nTITLE: Implementing Generic Resource Fetcher in iOS\nDESCRIPTION: Implementation of a resource fetcher that handles asynchronous URL requests. The fetcher implements the LynxGenericResourceFetcher protocol and provides functionality to fetch resources with completion callbacks.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/elements/built-in/text.mdx#2025-04-17_snippet_2\n\nLANGUAGE: objective-c\nCODE:\n```\n@interface ExampleGenericResourceFetcher : NSObject <LynxGenericResourceFetcher>\n\n- (void)fetchResource:(LynxResourceRequest *)request\n           onComplete:(LynxGenericResourceCompletionBlock)callback;\n\n@end\n\n@implementation ExampleGenericResourceFetcher\nNSURL* url = [NSURL URLWithString:request.url];\n  NSURLRequest* url_request = [NSURLRequest requestWithURL:url\n                                               cachePolicy:NSURLRequestReloadIgnoringCacheData\n                                           timeoutInterval:5];\n\n  [NSURLConnection\n      sendAsynchronousRequest:url_request\n                        queue:[NSOperationQueue mainQueue]\n            completionHandler:^(NSURLResponse* _Nullable response, NSData* _Nullable data,\n                                NSError* _Nullable connectionError) {\n              if (!connectionError) {\n                //notify font data\n                callback(data, nil);\n              } else {\n                callback(data, connectionError);\n              }\n            }];\n\n\n@end\n\n//Inject during `LynxView` construction.\nLynxViewBuilder.genericResourceFetcher = [[ExampleGenericResourceFetcher alloc] init];\n```\n\n----------------------------------------\n\nTITLE: Disabling Progress Bar in RSpeedy Configuration\nDESCRIPTION: An example of how to disable the progress bar in the RSpeedy configuration using JavaScript.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/rspeedy/rspeedy.dev.progressbar.md#2025-04-17_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineConfig } from '@lynx-js/rspeedy'\n\nexport default defineConfig({\n  dev: {\n    progressBar: false,\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Importing Go Component for Example in JSX\nDESCRIPTION: This snippet shows how to import and use the Go component to display an example of the border-bottom-color property.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/api/css/properties/border-bottom-color.mdx#2025-04-17_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Go } from '@lynx';\n\n<Go\n  example=\"css-api\"\n  defaultFile=\"src/border-bottom-color/App.tsx\"\n  img=\"https://lf-lynx.tiktok-cdns.com/obj/lynx-artifacts-oss-sg/lynx-website/assets/doc/css/border-color-edge.jpg\"\n  defaultEntryFile=\"dist/border-bottom-color.lynx.bundle\"\n  entry=\"src/border-bottom-color\"\n/>\n```\n\n----------------------------------------\n\nTITLE: createElement for SVG Elements in TypeScript\nDESCRIPTION: This overload of createElement is for creating SVG elements. It accepts a key from ReactSVG, props with ClassAttributes and SVG attributes, and optional children nodes.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/api/react/Function.createElement.mdx#2025-04-17_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nfunction createElement<P, T>(\n   type: keyof ReactSVG,\n   props?: null | ClassAttributes<T> & P, ...\n   children?: ReactNode[]): ReactSVGElement\n```\n\n----------------------------------------\n\nTITLE: Importing Go Component for CSS API Example\nDESCRIPTION: This snippet demonstrates how to import and use the Go component to display a CSS API example for the visibility property.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/api/css/properties/visibility.mdx#2025-04-17_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Go } from '@lynx';\n\n<Go\n  example=\"css-api\"\n  defaultFile=\"src/visibility/App.tsx\"\n  img=\"https://lf-lynx.tiktok-cdns.com/obj/lynx-artifacts-oss-sg/lynx-website/assets/doc/css/visibility.jpg\"\n  entry=\"src/visibility\"\n  defaultEntryFile=\"dist/visibility.lynx.bundle\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Force Update Method in React Component\nDESCRIPTION: Method to force a component to re-render. Takes an optional callback function that executes after the re-render completes.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/react/Class.PureComponent.mdx#2025-04-17_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nforceUpdate(callback?: () => void): void\n```\n\n----------------------------------------\n\nTITLE: Example JSX Component with Inline Style\nDESCRIPTION: An example showing how a frontend framework can define a component with inline styles using JSX syntax before it's processed by the rendering system.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/engine/element-api/__AddInlineStyle.mdx#2025-04-17_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<view src=\"xxx\" style={{ top: '10px' }} />\n```\n\n----------------------------------------\n\nTITLE: ChunkSplit.strategy Property Definition in TypeScript\nDESCRIPTION: TypeScript signature for the ChunkSplit.strategy property which defines available chunk splitting strategies as a union type of string literals.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/api/rspeedy/rspeedy.chunksplit.strategy.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nstrategy?: 'all-in-one' | 'split-by-module' | 'split-by-experience' | 'single-vendor' | undefined;\n```\n\n----------------------------------------\n\nTITLE: Defining Optional Data Processors in TypeScript\nDESCRIPTION: Defines a record of named data processor functions that should be registered with lynx.registerDataProcessors.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/api/react/Interface.DataProcessorDefinition.mdx#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\noptional dataProcessors: Record<string, Function>;\n```\n\n----------------------------------------\n\nTITLE: CSS Border Top Style Basic Syntax\nDESCRIPTION: Shows the various possible values for the border-top-style property, including none, hidden, dotted, dashed, solid, double, groove, ridge, inset, and outset.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/css/properties/border-top-style.mdx#2025-04-17_snippet_0\n\nLANGUAGE: css\nCODE:\n```\nborder-top-style: none;\nborder-top-style: hidden;\nborder-top-style: dotted;\nborder-top-style: dashed;\nborder-top-style: solid;\nborder-top-style: double;\nborder-top-style: groove;\nborder-top-style: ridge;\nborder-top-style: inset;\nborder-top-style: outset;\n```\n\n----------------------------------------\n\nTITLE: Configuring Advanced File Watching with Chokidar Options in JavaScript\nDESCRIPTION: This example shows how to use advanced file watching configuration with chokidar options. It specifies paths to watch and sets the usePolling option to false.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/rspeedy/rspeedy.dev.watchfiles.md#2025-04-17_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineConfig } from '@lynx-js/rspeedy'\n\nexport default defineConfig({\n  dev: {\n    watchFiles: {\n      paths: ['src/**', 'public/**'],\n      options: { usePolling: false },\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Canceling Timer with clearInterval in TypeScript\nDESCRIPTION: The clearInterval() function is used to cancel a timer set by setInterval. It takes a single parameter 'timerId', which is the timer ID returned by setInterval. Passing an incorrect ID may lead to undefined behavior.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/lynx-api/global/clear-interval.mdx#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclearInterval(timerId: number): void;\n```\n\n----------------------------------------\n\nTITLE: Formal Relative Left Alignment Syntax Definition\nDESCRIPTION: Defines the formal syntax structure for the relative-align-left property, showing all possible value types.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/css/properties/relative-align-left.mdx#2025-04-17_snippet_1\n\nLANGUAGE: css\nCODE:\n```\nrelative-align-left = none | parent | <number>\n```\n\n----------------------------------------\n\nTITLE: Defining CssLoaderModules Interface in TypeScript\nDESCRIPTION: TypeScript interface definition for CSS Loader Modules configuration. Specifies options for controlling CSS Modules behavior including auto-enabling, export conventions, class name formatting, and named exports.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/api/rspeedy/rspeedy.cssloadermodules.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface CssLoaderModules \n```\n\n----------------------------------------\n\nTITLE: Using Child Combinator in TSX\nDESCRIPTION: Example of using the child combinator (>) to select direct child elements.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/lynx-api/selector-query/selector-query-select.mdx#2025-04-17_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\n// '.the-parent > .the-child'\n<view className=\"the-parent\">\n  <view className=\"the-child\" />\n</view>\n```\n\n----------------------------------------\n\nTITLE: Retrieving Element Attributes with getAttribute() in TypeScript\nDESCRIPTION: Gets the specified attribute value of an element. If the attribute doesn't exist, it returns undefined.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/lynx-api/main-thread/main-thread-element.mdx#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst value = element.getAttribute(attrName);\n```\n\n----------------------------------------\n\nTITLE: Development Consumer Configuration\nDESCRIPTION: Configuration file for the development Consumer setup.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/react/code-splitting.md#2025-04-17_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nimport { pluginReactLynx } from '@lynx-js/react-rsbuild-plugin';\nimport { defineConfig } from '@lynx-js/rspeedy';\n\nexport default defineConfig({\n  source: {\n    entry: './src/Consumer.tsx',\n  },\n  plugins: [pluginReactLynx()],\n});\n```\n\n----------------------------------------\n\nTITLE: Function Signature for __ReplaceElements in JSX\nDESCRIPTION: The function signature for __ReplaceElements showing its parameters and return type. It takes a parent element, an array of new child elements, and an array of old child elements to replace.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/engine/element-api/__ReplaceElements.mdx#2025-04-17_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n__ReplaceElements(parent: Element, newChildren: Array<Element>, oldChildren: Array<Element>) : void;\n```\n\n----------------------------------------\n\nTITLE: Configuring EntryDescription Format\nDESCRIPTION: Example demonstrating how to use EntryDescription format for complex entry configurations with import property.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/rspeedy/rspeedy.source.entry.md#2025-04-17_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineConfig } from '@lynx-js/rspeedy'\nexport default defineConfig({\n  entry: {\n    foo: './src/pages/foo/index.js',\n    bar: {\n      import: ['./src/prefetch.js', './src/pages/bar'],\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Formal Syntax Definition for padding-inline-end\nDESCRIPTION: The formal syntax definition of the padding-inline-end CSS property, showing that it accepts length or percentage values that must be non-negative.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/css/properties/padding-inline-end.mdx#2025-04-17_snippet_1\n\nLANGUAGE: css\nCODE:\n```\npadding-inline-end =\n  <length-percentage [0,∞]>\n\n<length-percentage> =\n  <length>      |\n  <percentage>\n```\n\n----------------------------------------\n\nTITLE: Configuring writeToDisk with a Filter Function in Lynx Config\nDESCRIPTION: Example of configuring the writeToDisk property in a lynx.config.ts file using a function that filters which files should be written to disk based on a regular expression test. In this case, only files matching 'superman.css' will be written to disk.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/api/rspeedy/rspeedy.dev.writetodisk.md#2025-04-17_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// lynx.config.ts\nimport { defineConfig } from '@lynx-js/rspeedy'\nexport default defineConfig({\n  dev: {\n    writeToDisk: (filePath) => /superman\\.css$/.test(filePath),\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Box-Sizing Example Component Reference\nDESCRIPTION: JSX code showing how to integrate a box-sizing example in documentation using the Go component from the Lynx framework.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/css/properties/box-sizing.mdx#2025-04-17_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<Go\n  example=\"css-api\"\n  defaultFile=\"src/box-sizing/App.tsx\"\n  img=\"https://lf-lynx.tiktok-cdns.com/obj/lynx-artifacts-oss-sg/lynx-website/assets/doc/css/box-sizing.jpg\"\n  defaultEntryFile=\"dist/box-sizing.lynx.bundle\"\n  entry=\"src/box-sizing\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Defining View ID Attribute in TypeScript\nDESCRIPTION: Defines the 'id' attribute that specifies a unique identifier for the element, which can be used by front-end APIs to find and operate the corresponding node.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/elements/built-in/view.mdx#2025-04-17_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// DefaultValue undefined\nid?: string;\n```\n\nLANGUAGE: typescript\nCODE:\n```\nid?: string;\n```\n\n----------------------------------------\n\nTITLE: Example Usage of assetsInclude with Regular Expression\nDESCRIPTION: JavaScript example showing how to configure the source.assetsInclude property to include JSON5 files as static assets using a regular expression pattern.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/api/rspeedy/rspeedy.source.assetsinclude.md#2025-04-17_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineConfig } from '@lynx-js/rspeedy'\nexport default defineConfig({\n  source: {\n    assetsInclude: /\\.json5$/,\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Defining CSS gap Property Formal Syntax\nDESCRIPTION: This code block defines the formal syntax for the gap property, including its relationship to row-gap and column-gap, and the accepted value types.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/css/properties/gap.mdx#2025-04-17_snippet_1\n\nLANGUAGE: css\nCODE:\n```\ngap =\n  <'row-gap'> <'column-gap'>?\n\n<row-gap> = <length-percentage [0,∞]>\n\n<column-gap> = <length-percentage [0,∞]>\n\n<length-percentage> =\n  <length>      |\n  <percentage>\n```\n\n----------------------------------------\n\nTITLE: Basic Syntax for relative-align-top CSS Property in Lynx\nDESCRIPTION: Shows the possible syntax options for the relative-align-top property, which can be set to parent, none, or a numeric value that corresponds to a sibling element's relative-id.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/css/properties/relative-align-top.mdx#2025-04-17_snippet_0\n\nLANGUAGE: css\nCODE:\n```\nrelative-align-top: parent;\nrelative-align-top: none;\n\nrelative-align-top: 1;\nrelative-align-top: 2;\n```\n\n----------------------------------------\n\nTITLE: Conditional Rendering for Like Animation\nDESCRIPTION: Shows conditional rendering of like animation elements based on isLiked state.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/guide/start/tutorial-gallery.mdx#2025-04-17_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nreturn (\n  ...\n    {isLiked && <view className=\"circle\" />}\n    {isLiked && <view className=\"circle circleAfter\" />}\n    <image src={isLiked ? redHeart : whiteHeart} />\n...\n```\n\n----------------------------------------\n\nTITLE: Configuring All-in-One Chunk Strategy\nDESCRIPTION: Example configuration using the all-in-one strategy to bundle all modules into a single chunk using RSpeedy's defineConfig.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/rspeedy/rspeedy.chunksplit.strategy.md#2025-04-17_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineConfig } from '@lynx-js/rspeedy'\n\nexport default defineConfig({\n  performance: {\n    chunkSplit: {\n      strategy: 'all-in-one',\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Using querySelector Method in ReactLynx\nDESCRIPTION: The querySelector method selects the first element matching the given CSS selector in the page and returns an Element or null if no match is found.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/api/react/Interface.Lynx.mdx#2025-04-17_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nquerySelector: (selector: string) => null | Element;\n```\n\n----------------------------------------\n\nTITLE: Getting Error Message from TemplateBundle in Java\nDESCRIPTION: Retrieves exception information that occurred during template parsing for invalid TemplateBundle objects.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/lynx-native-api/template-bundle.mdx#2025-04-17_snippet_3\n\nLANGUAGE: java\nCODE:\n```\npublic String getErrorMessage()\n```\n\n----------------------------------------\n\nTITLE: Integrating DevTool Switch Page in iOS (Objective-C)\nDESCRIPTION: This code snippet demonstrates how to integrate the DevTool switch page in an iOS app using Objective-C. It initializes a LynxView, configures its layout, and loads the DevTool switch template.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/guide/start/integrate-lynx-devtool-advanced.mdx#2025-04-17_snippet_0\n\nLANGUAGE: objective-c\nCODE:\n```\n#import <Lynx/LynxView.h>\n\n#import \"DebugSettingViewController.h\"\n#import \"DemoLynxProvider.h\"\n\n@implementation DebugSettingViewController\n\n- (void)viewDidLoad {\n  [super viewDidLoad];\n\n  LynxView *lynxView = [[LynxView alloc] initWithBuilderBlock:^(LynxViewBuilder *builder) {\n    builder.config = [[LynxConfig alloc] initWithProvider:[[DemoLynxProvider alloc] init]];\n    builder.screenSize = self.view.frame.size;\n    builder.fontScale = 1.0;\n  }];\n\n  lynxView.preferredLayoutWidth = self.view.frame.size.width;\n  lynxView.preferredLayoutHeight = self.view.frame.size.height;\n  lynxView.layoutWidthMode = LynxViewSizeModeExact;\n  lynxView.layoutHeightMode = LynxViewSizeModeExact;\n\n  [self.view addSubview:lynxView];\n\n  NSString *bundlePath = [[NSBundle mainBundle] pathForResource:@\"LynxDebugResources\" ofType: @\"bundle\"];\n  NSData *templateData = [[NSData alloc] initWithContentsOfFile:[bundlePath stringByAppendingString:@\"/switchPage/devtoolSwitch.lynx.bundle\"]];\n  [lynxView loadTemplate:templateData withURL:@\"devtool_switch/switchPage/devtoolSwitch.lynx.bundle\"];\n}\n\n@end\n```\n\n----------------------------------------\n\nTITLE: Context Type Example Implementation\nDESCRIPTION: Example showing how to properly type and use React context within a component.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/api/react/Class.Component.mdx#2025-04-17_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nstatic contextType = MyContext\n// For TS pre-3.7:\ncontext!: React.ContextType<typeof MyContext>\n// For TS 3.7 and above:\ndeclare context: React.ContextType<typeof MyContext>\n```\n\n----------------------------------------\n\nTITLE: Getting Error Code in Java\nDESCRIPTION: Method to retrieve the error code which is a 3-4 digit number indicating the error behavior. For example, code 301 represents an image loading error.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/errors/lynx-error.mdx#2025-04-17_snippet_0\n\nLANGUAGE: java\nCODE:\n```\npublic int getErrorCode()\n```\n\n----------------------------------------\n\nTITLE: Referencing CSS Variables in CSS\nDESCRIPTION: Demonstrates how to reference CSS variables using the var() function and set default values.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/api/css/properties/css-variable.mdx#2025-04-17_snippet_2\n\nLANGUAGE: css\nCODE:\n```\n.three {\n  /* --main-bg-color: blue; */\n  color: white;\n  background-color: var(--main-bg-color);\n  width: 50%;\n  border: 1px blue solid;\n}\n\n.two {\n  width: var(--view-width, 100px);\n}\n```\n\n----------------------------------------\n\nTITLE: Defining PluginReactLynxOptions CSS Invalidation Property in TypeScript\nDESCRIPTION: TypeScript interface property definition for enabling CSS invalidation feature. This property controls whether elements' styles should be recalculated when DOM updates occur, particularly important when using CSS combinators.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/rspeedy/react-rsbuild-plugin.pluginreactlynxoptions.enablecssinvalidation.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nenableCSSInvalidation?: boolean;\n```\n\n----------------------------------------\n\nTITLE: Defining loadEnv Property Type in TypeScript\nDESCRIPTION: Type definition for the loadEnv configuration option in CreateRspeedyOptions interface. This property determines how environment variables are loaded using Rsbuild's API, allowing access through import.meta.env.FOO or process.env.Foo.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/rspeedy/rspeedy.createrspeedyoptions.loadenv.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nloadEnv?: CreateRsbuildOptions['loadEnv'];\n```\n\n----------------------------------------\n\nTITLE: Defining LoadConfigOptions Interface in TypeScript\nDESCRIPTION: TypeScript interface definition for LoadConfigOptions which specifies the optional parameters for the loadConfig function in @lynx-js/rspeedy. It includes two optional properties: configPath and cwd, both of type string or undefined.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/api/rspeedy/rspeedy.loadconfigoptions.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface LoadConfigOptions \n```\n\n----------------------------------------\n\nTITLE: Defining Relative Right Alignment in Lynx CSS\nDESCRIPTION: Demonstrates the syntax for using the relative-align-right property in Lynx CSS. It can be set to 'none' (default), 'parent', or a number corresponding to a sibling element's ID.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/css/properties/relative-align-right.mdx#2025-04-17_snippet_0\n\nLANGUAGE: css\nCODE:\n```\nrelative-align-right: parent;\nrelative-align-right: none;\n\nrelative-align-right: 1;\nrelative-align-right: 2;\n```\n\n----------------------------------------\n\nTITLE: Customizing Progress Bar ID in RSpeedy Configuration\nDESCRIPTION: An example of how to modify the progress bar's id (text displayed on the left side) in the RSpeedy configuration using JavaScript.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/rspeedy/rspeedy.dev.progressbar.md#2025-04-17_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineConfig } from '@lynx-js/rspeedy'\n\nexport default defineConfig({\n  dev: {\n    progressBar: {\n      id: 'Some Text'\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Defining Dev.liveReload Property in TypeScript\nDESCRIPTION: TypeScript signature for the liveReload property of the Dev object. It's an optional boolean property that enables or disables live reload functionality.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/rspeedy/rspeedy.dev.livereload.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nliveReload?: boolean | undefined;\n```\n\n----------------------------------------\n\nTITLE: Formal CSS Syntax Definition for grid-template-rows\nDESCRIPTION: The complete formal syntax definition for grid-template-rows CSS property, showing all possible value combinations and nested structures.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/css/properties/grid-template-rows.mdx#2025-04-17_snippet_1\n\nLANGUAGE: css\nCODE:\n```\ngrid-template-rows =\n  <track-list>\n\n<track-list> =\n   <track-size> | <track-repeat>\n\n<track-size> =\n  <track-breadth>                                   |\n  minmax( <inflexible-breadth> , <track-breadth> )  |\n  fit-content( <length-percentage [0,∞]> )\n\n<track-repeat> =\n  repeat([ <integer [1,∞]> ] , <track-size>)\n\n<fixed-size> =\n  <fixed-breadth>                                   |\n  minmax( <fixed-breadth> , <track-breadth> )       |\n  minmax( <inflexible-breadth> , <fixed-breadth> )\n\n<fixed-repeat> =\n  repeat( [ <integer [1,∞]> ] , <fixed-size>)\n\n<track-breadth> =\n  <length-percentage [0,∞]>  |\n  <flex [0,∞]>               |\n  max-content                |\n  auto\n\n<inflexible-breadth> =\n  <length-percentage [0,∞]>  |\n  max-content                |\n  auto\n\n<length-percentage> =\n  <length>      |\n  <percentage>\n\n<fixed-breadth> =\n  <length-percentage [0,∞]>\n```\n\n----------------------------------------\n\nTITLE: TransformImport Property Definition in TypeScript\nDESCRIPTION: TypeScript property definition for libraryDirectory, specifying it as an optional string parameter used to customize import path transformations.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/rspeedy/rspeedy.transformimport.librarydirectory.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nlibraryDirectory?: string | undefined;\n```\n\n----------------------------------------\n\nTITLE: Retrieving the Last Child of an Element in JSX\nDESCRIPTION: Example of how to use the __LastElement function to retrieve the last child node of an Element object in a frontend framework context.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/engine/element-api/__LastElement.mdx#2025-04-17_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n// main-thread.js\nlet element = __CreateElement('view', 0, {});\n\nlet last = __LastElement(element);\n```\n\n----------------------------------------\n\nTITLE: Importing Deprecated Component in JSX\nDESCRIPTION: This code snippet shows how to import and use the Deprecated component from the Lynx library. It's used to mark the linear-cross-gravity property as deprecated in the documentation.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/css/properties/linear-cross-gravity.mdx#2025-04-17_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Deprecated } from '@lynx';\n\n# <Deprecated /> linear-cross-gravity\n```\n\n----------------------------------------\n\nTITLE: Querying Node Position and Size with NodesRef in Lynx\nDESCRIPTION: This example demonstrates how to use NodesRef to get the position and size of a specific text node in a Lynx component. It utilizes createSelectorQuery, select, invoke, and exec methods to perform the query.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/api/lynx-api/nodes-ref.mdx#2025-04-17_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nclass Page extends Component {\n  componentDidMount() {\n    lynx\n      .createSelectorQuery() // 创建 SelectorQuery\n      .select('#my-id') // 指定目标节点的选择器\n      .invoke({\n        // 指定对目标节点的操作\n        method: 'boundingClientRect',\n        success: function (res) {\n          console.log(res);\n        },\n        fail: function (res) {\n          console.log(res.code, res.data);\n        },\n      })\n      .exec(); // 执行查询\n  }\n\n  render() {\n    return (\n      <view>\n        <text id=\"my-id\">...</text>\n      </view>\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: RGB Color Syntax in CSS\nDESCRIPTION: This snippet shows the syntax for defining RGB colors in CSS using hexadecimal and functional notations. It includes examples of shorthand and full-length hexadecimal codes, as well as rgb() and rgba() functions.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/css/data-type/color.mdx#2025-04-17_snippet_4\n\nLANGUAGE: CSS\nCODE:\n```\n#RGB[A] or #RRGGBB[AA]\nrgb(R, G, B) or rgba(R, G, B, A)\n```\n\n----------------------------------------\n\nTITLE: React Fragment Standard Syntax Example in TSX\nDESCRIPTION: Example showing how to use React.Fragment with standard syntax to group table data cells without adding an extra wrapper DOM node.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/api/react/Function.Fragment.mdx#2025-04-17_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Fragment } from 'react';\n\n<Fragment>\n  <td>Hello</td>\n  <td>World</td>\n</Fragment>\n```\n\n----------------------------------------\n\nTITLE: Deprecated UNSAFE_componentWillMount Method in React TypeScript\nDESCRIPTION: Deprecated lifecycle method called before mounting. Avoid side-effects or subscriptions here. Use componentDidMount or constructor instead.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/api/react/Class.PureComponent.mdx#2025-04-17_snippet_8\n\nLANGUAGE: TypeScript\nCODE:\n```\noptional UNSAFE_componentWillMount(): void\n```\n\n----------------------------------------\n\nTITLE: Image Stop Animation Implementation\nDESCRIPTION: Shows how to stop animation on an image element using SelectorQuery.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/elements/built-in/image.mdx#2025-04-17_snippet_5\n\nLANGUAGE: ts\nCODE:\n```\nlynx.createSelectorQuery()\n     .select('#gifs')\n     .invoke({\n      method: 'stopAnimation'，\n    })\n    .exec();\n```\n\n----------------------------------------\n\nTITLE: Formal text-overflow CSS Syntax\nDESCRIPTION: Demonstrates the formal syntax pattern for the text-overflow property, showing its allowed values.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/css/properties/text-overflow.mdx#2025-04-17_snippet_1\n\nLANGUAGE: css\nCODE:\n```\nclip | ellipsis\n```\n\n----------------------------------------\n\nTITLE: Defining Enable Scroll Attribute in TSX\nDESCRIPTION: Defines the enable-scroll attribute that indicates whether the <list> component is allowed to scroll. Default value is true.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/elements/built-in/list.mdx#2025-04-17_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\n// DefaultValue: true\nenable-scroll?: boolean\n```\n\n----------------------------------------\n\nTITLE: Defining Config.provider Property Type in TypeScript\nDESCRIPTION: TypeScript signature for the 'provider' property in the Config interface, showing it accepts an RsbuildConfig provider.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/api/rspeedy/rspeedy.config.provider.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nprovider?: RsbuildConfig['provider'];\n```\n\n----------------------------------------\n\nTITLE: Releasing TemplateBundle Resources in Java\nDESCRIPTION: Releases the native memory held by the TemplateBundle object. After execution, the TemplateBundle will become invalid.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/api/lynx-native-api/template-bundle.mdx#2025-04-17_snippet_5\n\nLANGUAGE: java\nCODE:\n```\npublic void release();\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple Entry Modules\nDESCRIPTION: Example demonstrating how to configure multiple entry modules as an array in RSpeedy.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/rspeedy/rspeedy.source.entry.md#2025-04-17_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineConfig } from '@lynx-js/rspeedy'\nexport default defineConfig({\n  entry: ['./src/prefetch.js', './src/pages/main/index.js'],\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring RSpeedy with transformImport Option\nDESCRIPTION: Example configuration for RSpeedy that sets up transformImport to handle modular imports from the 'foo' library. It specifies a pattern for component imports.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/api/rspeedy/rspeedy.source.transformimport.md#2025-04-17_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineConfig } from '@lynx-js/rspeedy'\n\nexport default defineConfig({\n  source: {\n    transformImport: [\n      {\n        libraryName: 'foo',\n        customName: 'foo/src/components/{{ member }}/{{ member }}',\n      },\n    ],\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Observing Specific Performance Events by Name\nDESCRIPTION: This example demonstrates creating a PerformanceObserver that targets specific performance events by using more precise identifiers, observing only 'metric.fcp' and all 'pipeline' events.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/lynx-api/performance-api/performance-observer/observe.mdx#2025-04-17_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// Create a PerformanceObserver and observe only metric.fcp and all pipelines types\nuseEffect(() => {\n  // Use useMemo or constructor to create the PerformanceObserver to avoid missing data\n  const observer = new PerformanceObserver((list) => {\n    const metricsStr: string[] = [];\n    const pipelinesStr: string[] = [];\n\n    list.getEntries().forEach((entry) => {\n      if (entry.entryType === 'pipeline') {\n        const timeFormat = `${entry.name}: ${entry.duration.toFixed(2)}ms`;\n        pipelinesStr.push(timeFormat);\n      } else if (entry.entryType === 'metric' && entry.name === 'fcp') {\n        const metricFormat = `${entry.name}: ${entry.startTime.toFixed(2)}ms`;\n        metricsStr.push(metricFormat);\n      }\n    });\n\n    if (metricsStr.length > 0) {\n      entries.metrics = metricsStr.join('\\n');\n    }\n\n    if (pipelinesStr.length > 0) {\n      entries.pipelines = pipelinesStr.join('\\n');\n    }\n  });\n\n  // Observe only the fcp metric and all pipeline entry types\n  observer.observe(['metric.fcp', 'pipeline']);\n}, [entries]);\n```\n\n----------------------------------------\n\nTITLE: Example Usage of useInitDataChanged Hook\nDESCRIPTION: Example showing how to implement the useInitDataChanged hook in a React component to handle initData changes.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/react/Function.useInitDataChanged.mdx#2025-04-17_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nfunction App() {\n  useInitDataChanged((data) => {\n    data.someProperty // can use it\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Lynx Components\nDESCRIPTION: Imports required components from the Lynx framework for implementing IFR functionality.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/guide/interaction/ifr.mdx#2025-04-17_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { Details, PlatformTabs, Go, VideoList } from '@lynx';\n```\n\n----------------------------------------\n\nTITLE: UpdateComponentID Function Signature in JSX\nDESCRIPTION: Function signature showing the parameter types and return value for updating a component's ID. Takes an Element and componentID string as parameters and returns void.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/engine/element-api/__UpdateComponentID.mdx#2025-04-17_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n__UpdateComponentID(element: Element, componentID: string) : void;\n```\n\n----------------------------------------\n\nTITLE: Defining Output.copy Type in TypeScript\nDESCRIPTION: TypeScript type definition for the Output.copy property that specifies possible configuration options for copying files.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/api/rspeedy/rspeedy.output.copy.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ncopy?: Rspack.CopyRspackPluginOptions | Rspack.CopyRspackPluginOptions['patterns'] | undefined;\n```\n\n----------------------------------------\n\nTITLE: Importing Compatibility Table Component in React JSX\nDESCRIPTION: This code imports a LegacyCompatTable component from the @lynx package and uses it to display browser compatibility information for the CSS angle data type.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/css/data-type/angle.mdx#2025-04-17_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { LegacyCompatTable } from '@lynx';\n\n<LegacyCompatTable metadata=\"css/data-type/angle\" />\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Chunk Splitting in RSpeedy Config\nDESCRIPTION: Example configuration showing how to split @lynx-js/react and react-router packages into a separate 'lib-react' chunk using the ChunkSplit.override property.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/rspeedy/rspeedy.chunksplit.override.md#2025-04-17_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineConfig } from '@lynx-js/rspeedy'\n\nexport default defineConfig({\n  performance: {\n    chunkSplit: {\n      strategy: 'split-by-experience',\n      override: {\n        cacheGroups: {\n          react: {\n            test: /node_modules[\\/](@lynx-js[\\/]react|react-router)[\\/]/,\n            name: 'lib-react',\n            chunks: 'all',\n          },\n        },\n      },\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Updating GlobalProps in Android\nDESCRIPTION: Android API methods for updating global properties in Lynx. Provides two method signatures - one accepting a Map and another accepting TemplateData.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/lynx-api/lynx/lynx-global-props.mdx#2025-04-17_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nvoid updateGlobalProps(@NonNull Map<String, Object> props)\n\nvoid updateGlobalProps(@NonNull TemplateData props)\n\n```\n\n----------------------------------------\n\nTITLE: Exposure Event Data Format in Lynx\nDESCRIPTION: This JSON snippet shows the format of exposure/anti-exposure events in Lynx. It includes details such as exposure-id, exposure-scene, sign, and dataset for each exposed node.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/guide/interaction/visibility-detection/exposure-ability.mdx#2025-04-17_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"exposure-id\": \"string\",\n    \"exposure-scene\": \"string\",\n    \"sign\": \"string\",\n    \"dataset\": \"object\"\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Configuring Entries with EntryDescription\nDESCRIPTION: Example demonstrating how to configure RSpeedy entries using the EntryDescription interface for more detailed entry configuration.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/api/rspeedy/rspeedy.source.entry.md#2025-04-17_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineConfig } from '@lynx-js/rspeedy'\nexport default defineConfig({\n  entry: {\n    foo: './src/pages/foo/index.js',\n    bar: {\n      import: ['./src/prefetch.js', './src/pages/bar'],\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Grid Column End Formal Syntax\nDESCRIPTION: Formal syntax definition for the grid-column-end property showing supported values and patterns.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/css/properties/grid-column-end.mdx#2025-04-17_snippet_1\n\nLANGUAGE: css\nCODE:\n```\ngrid-column-end = <number> | [span && <number>]\n```\n\n----------------------------------------\n\nTITLE: Defining View Exposure ID Attribute in TypeScript\nDESCRIPTION: Defines the 'exposure-id' attribute used to specify whether a target node needs to listen to exposure/anti-exposure events for visibility detection.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/elements/built-in/view.mdx#2025-04-17_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n// DefaultValue: undefined\nexposure-id?: string\n```\n\n----------------------------------------\n\nTITLE: Defining the Minify Interface in TypeScript\nDESCRIPTION: Interface definition for Minify in the RSpeedy library. It configures code minification settings for production builds with optional properties for CSS and JavaScript minification control.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/api/rspeedy/rspeedy.minify.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface Minify \n\n```\n\n----------------------------------------\n\nTITLE: Retrieving Dataset from Element in JSX\nDESCRIPTION: Example of how to retrieve a dataset from an Element using the __GetDataset function. The code first creates an element, sets a data attribute, and then retrieves the entire dataset as a map.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/engine/element-api/__GetDataset.mdx#2025-04-17_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n// main-thread.js\nlet element = __CreateElement('view', 0, {});\n__SetDataset(element, { key: 'value' });\n\nlet dataset = __GetDataset(element);\n```\n\n----------------------------------------\n\nTITLE: Defining iOS Platform Accessibility ID Attribute in TypeScript\nDESCRIPTION: Defines the 'ios-platform-accessibility-id' attribute used to specify the accessibility identifier of a UIView in iOS when using platform-level accessibility frameworks.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/elements/built-in/view.mdx#2025-04-17_snippet_23\n\nLANGUAGE: typescript\nCODE:\n```\n// DefaultValue: undefined\nios-platform-accessibility-id?: string\n```\n\n----------------------------------------\n\nTITLE: Adding Lynx DevTool Dependencies for iOS\nDESCRIPTION: This code snippet shows how to add the required dependencies for Lynx DevTool in an iOS project's Podfile. It includes LynxService with the Devtool subspec and LynxDevtool.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/guide/start/integrate-lynx-devtool.mdx#2025-04-17_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\ntarget 'YourTarget' do\n  pod 'LynxService', '3.2.0-rc.0', :subspecs => [\n      'Devtool',\n  ]\n  pod 'LynxDevtool', '3.2.0-rc.0'\nend\n```\n\n----------------------------------------\n\nTITLE: Basic Relative Left Alignment CSS Syntax\nDESCRIPTION: Shows the basic syntax options for the relative-align-left property, including parent alignment and numeric values for sibling alignment.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/css/properties/relative-align-left.mdx#2025-04-17_snippet_0\n\nLANGUAGE: css\nCODE:\n```\nrelative-align-left: parent;\nrelative-align-left: none;\n\nrelative-align-left: 1;\nrelative-align-left: 2;\n```\n\n----------------------------------------\n\nTITLE: Configuring Server Port Behavior in RSpeedyJS\nDESCRIPTION: TypeScript type definition for the strictPort property that controls server port allocation behavior. When set to true, the server will throw an exception if the specified port is occupied instead of automatically finding the next available port.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/api/rspeedy/rspeedy.server.strictport.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nstrictPort?: boolean | undefined;\n```\n\n----------------------------------------\n\nTITLE: CSS margin-inline-start Property Examples\nDESCRIPTION: Examples of different ways to use the margin-inline-start property in CSS, including length values, pixel values, responsive pixel values, and percentage values.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/css/properties/margin-inline-start.mdx#2025-04-17_snippet_0\n\nLANGUAGE: css\nCODE:\n```\n/* <length> values */\nmargin-inline-start: 0.5em;\nmargin-inline-start: 0px;\nmargin-inline-start: 2rpx;\n\n/* <percentage> value */\nmargin-inline-start: 10%;\n```\n\n----------------------------------------\n\nTITLE: Incorrect Usage of selectAll() Method in JavaScript\nDESCRIPTION: Demonstrates an invalid approach to check node information or existence directly from the NodesRef object, as SelectorQuery only saves query parameters initially without executing the query.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/lynx-api/selector-query/selector-query-select-all.mdx#2025-04-17_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nlet nodesRef = lynx.createSelectorQuery().selectAll('#the-id');\nconsole.log(nodesRef); // always returning a valid NodesRef object\n```\n\n----------------------------------------\n\nTITLE: Disabling CSS Minification Example in JavaScript\nDESCRIPTION: Example showing how to disable CSS minification by setting the css property to false in the Minify configuration using the defineConfig function from @lynx-js/rspeedy.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/api/rspeedy/rspeedy.minify.css.md#2025-04-17_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineConfig } from '@lynx-js/rspeedy'\n\nexport default defineConfig({\n  output: {\n    minify: {\n      css: false,\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Multiple QR Code Schemas in JavaScript\nDESCRIPTION: Example of using pluginQRCode with multiple schemas, allowing switching between them by pressing 'a' in the terminal. It defines 'http', 'foo', and 'bar' schemas.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/api/rspeedy/qrcode-rsbuild-plugin.pluginqrcodeoptions.schema.md#2025-04-17_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { pluginQRCode } from '@lynx-js/plugin-qrcode'\nimport { defineConfig } from '@lynx-js/rspeedy'\n\nexport default defineConfig({\n  plugins: [\n    pluginQRCode({\n      schema(url) {\n        return {\n          http: url,\n          foo: `foo://lynx?url=${encodeURIComponent(url)}&dev=1`,\n          bar: `bar://lynx?url=${encodeURIComponent(url)}`,\n        }\n      },\n    }),\n  ],\n})\n```\n\n----------------------------------------\n\nTITLE: Fragment Function Declaration in TypeScript\nDESCRIPTION: TypeScript definition of the React Fragment function, which allows grouping multiple elements without a wrapper node. It takes props with optional children and returns either null or a ReactElement.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/api/react/Function.Fragment.mdx#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction Fragment(props: object): null | ReactElement<any, string | JSXElementConstructor<any>>\n```\n\n----------------------------------------\n\nTITLE: Invoking boundingClientRect Method in TypeScript\nDESCRIPTION: Demonstrates how to use the SelectorQuery API to invoke the boundingClientRect method on an element. This method returns the width, height, and position information of the target node.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/elements/built-in/view.mdx#2025-04-17_snippet_38\n\nLANGUAGE: typescript\nCODE:\n```\nlynx\n  .createSelectorQuery()\n  .select('#box')\n  .invoke({\n    method: 'boundingClientRect',\n    params: {\n      androidEnableTransformProps: true, // Specifies whether to consider the transform attribute when calculating the position on Android. The default value is false.\n      relativeTo: null, // Specify the reference node, relative to LynxView by default.\n    },\n    success: function (res) {\n      console.log(res);\n    },\n    fail: function (error) {\n      console.log(error);\n    },\n  })\n  .exec();\n```\n\n----------------------------------------\n\nTITLE: Go Component Props Interface Definition\nDESCRIPTION: The TypeScript interface defining all available props for the Go component, including example name, default file, screenshot image, entry file, line highlighting, entry component directory, and schema for QR code generation.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/src/components/go/README.md#2025-04-17_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\ninterface Props {\n  /**\n   * example name\n   *\n   * @example\n   * example=\"view\"\n   */\n  example: string;\n  /**\n   * default file to display\n   *\n   * @example\n   * defaultFile=\"src/App.tsx\"\n   */\n  defaultFile: string;\n  /**\n   * example screenshot, if not provided, the default is example/preview-image.png, supports multiple formats /^preview-image\\.(png|jpg|jpeg|webp|gif)$/\n   *\n   * @example\n   * img=\"https://lf-lynx.tiktok-cdns.com/obj/lynx-artifacts-oss-sg/lynx-website/assets/doc/view_render.jpeg\"\n   */\n  img?: string;\n  /**\n   * default entry file, if not provided, the default is example/**.lynx.bundle\n   *\n   * @example\n   * defaultEntryFile=\"dist/main.lynx.bundle\"\n   */\n  defaultEntryFile?: string;\n  /**\n   * highlight lines of code, only effective for defaultFile\n   *\n   * @example\n   * highlight={{\n   *   \"src/waterfall/index.tsx\": \"{1,3-5}\",\n   *   \"src/waterfall/App.tsx\": \"{1,3-5}\",\n   * }}\n   */\n  highlight?: string | Record<string,string>;\n  /**\n   * entry component directory, for example: src/waterfall, will show waterfall App.tsx/index.tsx tabs\n   *\n   * @example\n   * entry=\"src/waterfall\"\n   */\n  entry?: string;\n  /**\n   * schema for the example, will be used to generate the QR code of the example\n   *\n   * @example\n   * schema=\"{{{url}}}?bar_color=000000&back_button_style=dark\"\n   */\n  schema?: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Error Object Example\nDESCRIPTION: Example showing how to report an error using an Error object.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/lynx-api/lynx/lynx-report-error.mdx#2025-04-17_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nlynx.reportError(new Error('foo'));\n```\n\n----------------------------------------\n\nTITLE: CSS Transition Property Formal Syntax\nDESCRIPTION: Shows the formal syntax definition for the transition-property CSS property, listing all valid property values that can be animated.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/css/properties/transition-property.mdx#2025-04-17_snippet_1\n\nLANGUAGE: css\nCODE:\n```\ntransition-property:opacity|width|height|background-color|visibility|top|right|left|bottom|transform|all|none;\n```\n\n----------------------------------------\n\nTITLE: Markdown Table - Interfaces Documentation\nDESCRIPTION: A markdown table documenting the available interfaces in the plugin package, specifically the PluginReactLynxOptions interface.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/api/rspeedy/react-rsbuild-plugin.md#2025-04-17_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n|  Interface | Description |\n|  --- | --- |\n|  [PluginReactLynxOptions](./react-rsbuild-plugin.pluginreactlynxoptions.md) | Options of [pluginReactLynx()](./react-rsbuild-plugin.pluginreactlynx.md) |\n```\n\n----------------------------------------\n\nTITLE: Defining JavaScript Minification Type in RSpeedy\nDESCRIPTION: TypeScript type definition for the JavaScript minification property. Accepts a boolean value or undefined to control whether JavaScript files should be minified.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/rspeedy/rspeedy.minify.js.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\njs?: boolean | undefined;\n```\n\n----------------------------------------\n\nTITLE: Basic CSS Background-Origin Syntax\nDESCRIPTION: Shows the different possible values for the background-origin CSS property which controls where background images are positioned relative to the element's box model areas.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/api/css/properties/background-origin.mdx#2025-04-17_snippet_0\n\nLANGUAGE: css\nCODE:\n```\nbackground-origin: border-box;\nbackground-origin: padding-box;\nbackground-origin: content-box;\n\nbackground-origin: content-box, padding-box;\n```\n\n----------------------------------------\n\nTITLE: Defining DevClient Interface in TypeScript\nDESCRIPTION: This code snippet defines the DevClient interface, which is used to configure the development client. It includes an optional property 'websocketTransport' of type string or undefined, representing the path to the websocket.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/rspeedy/rspeedy.devclient.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface Client \n{\n  websocketTransport?: string | undefined;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining __AddDataset Function Signature in JSX\nDESCRIPTION: This snippet shows the function signature for __AddDataset, which takes an Element object, a key string, and a value of any type. It returns void.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/engine/element-api/__AddDataset.mdx#2025-04-17_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n__AddDataset(element: Element, key: string, value: any) : void;\n```\n\n----------------------------------------\n\nTITLE: Formal Grid Auto Flow Syntax Definition\nDESCRIPTION: The formal grammar syntax definition for the grid-auto-flow property, showing the valid combinations of keywords.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/api/css/properties/grid-auto-flow.mdx#2025-04-17_snippet_1\n\nLANGUAGE: css\nCODE:\n```\ngrid-auto-flow = [ row | column ] || dense\n```\n\n----------------------------------------\n\nTITLE: Creating MainThreadRef with Default Undefined Type\nDESCRIPTION: No-argument implementation that creates a MainThreadRef with an undefined default type. Returns a MainThreadRef that can hold the specified type or undefined.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/react/Function.useMainThreadRef.mdx#2025-04-17_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nfunction useMainThreadRef<T>(): MainThreadRef<T | undefined>\n```\n\n----------------------------------------\n\nTITLE: Building Web-only Outputs\nDESCRIPTION: Example showing how to configure rspeedy to build only for the web environment, omitting the Lynx configuration.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/api/rspeedy/rspeedy.config.environments.md#2025-04-17_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineConfig } from '@lynx-js/rspeedy'\n\nexport default defineConfig({\n  environments: {\n    web: {\n      source: { entry: { web: './src/index.web.jsx' } },\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Legacy Decorator Syntax\nDESCRIPTION: Example demonstrating how to configure RSpeedy to use the legacy decorator syntax, which corresponds to TypeScript's experimentalDecorators option.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/api/rspeedy/rspeedy.decorators.version.md#2025-04-17_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineConfig } from '@lynx-js/rspeedy'\n\nexport default defineConfig({\n  source: {\n    decorators: { version: 'legacy' },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Starting the Development Server\nDESCRIPTION: Command to start the local development server for the Lynx website project.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/README.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Adjusting Custom Scrollbar in Lynx React Component\nDESCRIPTION: This snippet shows the implementation of the adjustScrollbar method in a NiceScrollbar component, which calculates and sets the scrollbar's height and position based on the scroll state.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/guide/start/tutorial-gallery.mdx#2025-04-17_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\n...\nconst adjustScrollbar = (scrollTop: number, scrollHeight: number) => {\n  const listHeight = lynx.__globalProps.screenHeight - 48;\n  const scrollbarHeight = listHeight * (listHeight / scrollHeight);\n  const scrollbarTop = listHeight * (scrollTop / scrollHeight);\n  setScrollbarHeight(scrollbarHeight);\n  setScrollbarTop(scrollbarTop);\n};\n...\n```\n\n----------------------------------------\n\nTITLE: Formal Syntax for Border-Right Property in Lynx CSS\nDESCRIPTION: The formal syntax definition for the border-right property, showing the possible combinations of line-width, line-style, and color values that can be used with this shorthand property.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/css/properties/border-right.mdx#2025-04-17_snippet_1\n\nLANGUAGE: css\nCODE:\n```\n<line-width> || <line-style> || <color>\nwhere\n<line-width> = <length> | thin | medium | thick\n<line-style> = none | hidden | dotted | dashed | solid | double | groove | ridge | inset | outset\n```\n\n----------------------------------------\n\nTITLE: CSS Border End End Radius Basic Usage\nDESCRIPTION: Demonstrates basic usage of border-end-end-radius property with circular and elliptical border radius values.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/css/properties/border-end-end-radius.mdx#2025-04-17_snippet_0\n\nLANGUAGE: css\nCODE:\n```\n/* the corner is a circle */\n/* border-end-end-radius: radius */\nborder-end-end-radius: 3px;\n\n/* the corner is an ellipsis */\n/* border-end-end-radius: horizontal vertical */\nborder-end-end-radius: 0.5em 1em;\n```\n\n----------------------------------------\n\nTITLE: Importing Lynx Components in React/TypeScript\nDESCRIPTION: Code snippet showing how to import all Lynx components as a namespace for dynamic lookup in TSDoc writings. This is part of the auto-generated file setup.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/api/react/Interface.InitData.mdx#2025-04-17_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n{/*\n* This file is generated by @lynx-js/tool-typedoc.\n* Do not edit this file directly.\n* @generated\n*/}\n\n{/* Import all components as Lynx to allow dynamic lookup in TSDoc writings. */}\nimport * as Lynx from '@lynx';\n```\n\n----------------------------------------\n\nTITLE: Defining ChunkSplit Strategy Type in TypeScript\nDESCRIPTION: TypeScript type definition for the ChunkSplit strategy property, defining the available splitting strategies including all-in-one, split-by-module, split-by-experience, and single-vendor.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/rspeedy/rspeedy.chunksplit.strategy.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nstrategy?: 'all-in-one' | 'split-by-module' | 'split-by-experience' | 'single-vendor' | undefined;\n```\n\n----------------------------------------\n\nTITLE: Sending Global Events in iOS\nDESCRIPTION: Objective-C method for sending global events from iOS native code to the front end. Takes an NSString event name and optional NSArray parameters to emit events that can be captured by GlobalEventEmitter.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/lynx-native-api/lynx-view/send-global-event.mdx#2025-04-17_snippet_1\n\nLANGUAGE: objc\nCODE:\n```\n- (void)sendGlobalEvent:(nonnull NSString*)name withParams:(nullable NSArray*)params;\n```\n\n----------------------------------------\n\nTITLE: Defining openTime Property in TypeScript\nDESCRIPTION: Defines the openTime property that stores the container load start timestamp in milliseconds.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/lynx-api/performance-api/performance-entry/init-container-entry.mdx#2025-04-17_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nopenTime: number;\n```\n\n----------------------------------------\n\nTITLE: Defining cssModules Property Signature in TypeScript\nDESCRIPTION: This snippet shows the TypeScript signature for the cssModules property of the Output interface. It can be of type CssModules or undefined.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/rspeedy/rspeedy.output.cssmodules.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ncssModules?: CssModules | undefined;\n```\n\n----------------------------------------\n\nTITLE: Defining RspeeedyConfig Property Type in TypeScript\nDESCRIPTION: TypeScript type definition for the optional rspeedyConfig property that accepts a Config type parameter to configure Rspeedy instances.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/rspeedy/rspeedy.createrspeedyoptions.rspeedyconfig.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nrspeedyConfig?: Config;\n```\n\n----------------------------------------\n\nTITLE: Structuring Keyboard Status Change Event in JSON for Lynx GlobalEvent\nDESCRIPTION: Defines the structure of the 'keyboardstatuschanged' event in the GlobalEvent object. It includes the keyboard status, height, and compatible height.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/lynx-api/event/global-event.mdx#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n[\n  status: ['on', 'off'],    // indicates the status of the keyboard\n  height: number,           // indicates the height of the keyboard, in px\n  compatHeight: number,     // indicates the height of compatible keyboards, in px\n]\n```\n\n----------------------------------------\n\nTITLE: Importing and Using GlobalProps Component in React\nDESCRIPTION: This snippet imports the GlobalProps component from a relative path and then renders it. The GlobalProps component likely sets up global properties or styles for the application.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/lynx-api/main-thread/lynx-global-props.mdx#2025-04-17_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport GlobalProps from '../lynx/lynx-global-props';\n\n<GlobalProps />\n```\n\n----------------------------------------\n\nTITLE: Syntax Definition of __GetParent Method in JSX\nDESCRIPTION: Demonstrates the function signature for the __GetParent method that takes an Element as input and returns either an Element or undefined.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/engine/element-api/__GetParent.mdx#2025-04-17_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n__GetParent(element: Element) : Element|undefined;\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple Entry Modules\nDESCRIPTION: Example demonstrating how to configure RSpeedy with multiple entry modules using an array.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/api/rspeedy/rspeedy.source.entry.md#2025-04-17_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineConfig } from '@lynx-js/rspeedy'\nexport default defineConfig({\n  entry: ['./src/prefetch.js', './src/pages/main/index.js'],\n})\n```\n\n----------------------------------------\n\nTITLE: Importing Go Component for Examples in JSX\nDESCRIPTION: This snippet demonstrates how to import and use the Go component from the Lynx library to provide interactive examples in the documentation. It sets up an example for the linear-cross-gravity property.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/css/properties/linear-cross-gravity.mdx#2025-04-17_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Go } from '@lynx';\n\n<Go\n  example=\"css-api\"\n  defaultFile=\"src/linear-cross-gravity/App.tsx\"\n  img=\"https://lf-lynx.tiktok-cdns.com/obj/lynx-artifacts-oss-sg/lynx-website/assets/doc/css/linear-cross-gravity.png\"\n  defaultEntryFile=\"dist/linear-cross-gravity.lynx.bundle\"\n  entry=\"src/linear-cross-gravity\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Basic CSS Grid Column Start Values\nDESCRIPTION: Examples showing how to use numeric values with grid-column-start property to specify starting positions in a grid layout.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/css/properties/grid-column-start.mdx#2025-04-17_snippet_0\n\nLANGUAGE: css\nCODE:\n```\n/* <number> values */\ngrid-column-start: 1;\ngrid-column-start: 2;\n\n/* span  <number> values*/\ngrid-column-start: span 1;\n```\n\n----------------------------------------\n\nTITLE: Defining Entry Type in TypeScript\nDESCRIPTION: TypeScript type definition for the entry property in RSpeedy configuration, allowing for Entry type or undefined value.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/rspeedy/rspeedy.source.entry.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nentry?: Entry | undefined;\n```\n\n----------------------------------------\n\nTITLE: Auto-sized Image Element\nDESCRIPTION: Shows how to use an image element with auto-sizing and width constraints.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/guide/ui/elements-components.mdx#2025-04-17_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<image auto-size style=\"width:100px;\" src=\"assets/logo.png\" />\n```\n\n----------------------------------------\n\nTITLE: Compiled JavaScript Implementation of SetID\nDESCRIPTION: Demonstrates how the JSX with an ID attribute is compiled into JavaScript render instructions. The code creates an element and then sets its ID using the __SetID function.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/engine/element-api/__SetID.mdx#2025-04-17_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// main-thread.js\nlet element = __CreateElement('view', 0, {});\n__SetID(element, 'video');\n```\n\n----------------------------------------\n\nTITLE: Integrating DevTool Switch Page in Android (Kotlin)\nDESCRIPTION: This Kotlin code snippet shows how to integrate the DevTool switch page in an Android app. It builds a LynxView, sets it as the content view, and renders the DevTool switch template from assets.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/guide/start/integrate-lynx-devtool-advanced.mdx#2025-04-17_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nclass SwitchActivity : Activity() {\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        val lynxView = buildLynxView()\n        setContentView(lynxView)\n        try {\n            val array = this.assets.open(\"devtool_switch/switchPage/devtoolSwitch.lynx.bundle\").readBytes()\n            lynxView.renderTemplateWithBaseUrl(\n                array,\n                TemplateData.empty(),\n                \"devtool_switch/switchPage/devtoolSwitch.lynx.bundle\"\n            )\n        } catch (e: IOException) {\n            e.printStackTrace()\n        }\n    }\n\n    private fun buildLynxView(): LynxView {\n        val viewBuilder = LynxViewBuilder()\n        viewBuilder.setTemplateProvider(DemoTemplateProvider())\n        return viewBuilder.build(this)\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Bank Card Interface in TypeScript\nDESCRIPTION: TypeScript interface defining the structure of a bank card object with type, number and name properties.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/react/payment-details.mdx#2025-04-17_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nexport interface BankCard {\n  type: string; // Bank type (like Bac, Boc, etc.)\n  number: string; // Card number\n  name: string; // Cardholder name\n}\n```\n\n----------------------------------------\n\nTITLE: Remove Specific Console Methods Configuration\nDESCRIPTION: Example demonstrating how to configure RSpeedy to remove only specific console methods (log and warn) in the production build by providing an array of method names.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/rspeedy/rspeedy.performance.removeconsole.md#2025-04-17_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineConfig } from '@lynx-js/rspeedy'\n\nexport default defineConfig({\n  performance: {\n    removeConsole: ['log', 'warn']\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Setting border-right-style in CSS\nDESCRIPTION: Examples of different values for the border-right-style CSS property, including none, hidden, dotted, dashed, solid, double, groove, ridge, inset, and outset.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/css/properties/border-right-style.mdx#2025-04-17_snippet_0\n\nLANGUAGE: css\nCODE:\n```\nborder-right-style: none;\nborder-right-style: hidden;\nborder-right-style: dotted;\nborder-right-style: dashed;\nborder-right-style: solid;\nborder-right-style: double;\nborder-right-style: groove;\nborder-right-style: ridge;\nborder-right-style: inset;\nborder-right-style: outset;\n```\n\n----------------------------------------\n\nTITLE: Node Not Rendered Example in JSX\nDESCRIPTION: Example demonstrating a common error where a node cannot be found because it has not been rendered yet due to conditional rendering.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/lynx-api/selector-query/selector-query-select.mdx#2025-04-17_snippet_11\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useEffect, useState } from '@lynx-js/react';\n\nfunction App() {\n  const [show, setShow] = useState(false);\n\n  useEffect(() => {\n    lynx\n      .createSelectorQuery()\n      .select('#xxx')\n      .invoke({\n        /** Args */\n      })\n      .exec();\n  }, []);\n\n  return show ? <view id=\"xxx\" /> : null;\n}\n```\n\n----------------------------------------\n\nTITLE: Markdown Table: Type Aliases in QRCode RSBuild Plugin\nDESCRIPTION: A markdown table listing the type aliases provided by the QRCode RSBuild plugin, including their names and descriptions.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/rspeedy/qrcode-rsbuild-plugin.md#2025-04-17_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n|  Type Alias | Description |\n|  --- | --- |\n|  [CustomizedSchemaFn](./qrcode-rsbuild-plugin.customizedschemafn.md) | Customize the generated schema. |\n```\n\n----------------------------------------\n\nTITLE: Configuring Single-Vendor Chunk Strategy Example\nDESCRIPTION: JavaScript configuration example showing how to set up the 'single-vendor' chunk splitting strategy which separates third-party dependencies into one chunk and source code into another.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/api/rspeedy/rspeedy.chunksplit.strategy.md#2025-04-17_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineConfig } from '@lynx-js/rspeedy'\n\nexport default defineConfig({\n  performance: {\n    chunkSplit: {\n      strategy: 'single-vendor',\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Function Signature for useInitData React Hook\nDESCRIPTION: The function signature for the useInitData hook that returns InitData. This indicates that the hook doesn't take any parameters and returns an InitData object.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/api/react/Function.useInitData.mdx#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction useInitData(): InitData\n```\n\n----------------------------------------\n\nTITLE: Defining Block Native Event Attribute in TypeScript\nDESCRIPTION: Defines the 'block-native-event' attribute that specifies whether to block platform layer gestures outside Lynx when the target node is on the event response chain.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/elements/built-in/view.mdx#2025-04-17_snippet_26\n\nLANGUAGE: typescript\nCODE:\n```\n// DefaultValue: false\nblock-native-event?: boolean\n```\n\n----------------------------------------\n\nTITLE: Using clearTimeout() in TypeScript\nDESCRIPTION: Syntax declaration for the clearTimeout() global function. This function accepts a timer ID returned by setTimeout() and cancels the scheduled timeout operation, preventing the callback from executing.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/lynx-api/global/clear-timeout.mdx#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclearTimeout(timerId: number): void;\n```\n\n----------------------------------------\n\nTITLE: Configuring Lynx Proguard Rules\nDESCRIPTION: Proguard configuration for Lynx Engine to ensure proper code obfuscation while preserving necessary classes and methods.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/guide/start/fragments/android/integrating-lynx-with-existing-app-android.mdx#2025-04-17_snippet_2\n\nLANGUAGE: groovy\nCODE:\n```\n# LYNX START\n# use @Keep to annotate retained classes.\n-dontwarn android.support.annotation.Keep\n-keep @android.support.annotation.Keep class **\n-keep @android.support.annotation.Keep class ** {\n    @android.support.annotation.Keep <fields>;\n    @android.support.annotation.Keep <methods>;\n}\n-dontwarn androidx.annotation.Keep\n-keep @androidx.annotation.Keep class **\n-keep @androidx.annotation.Keep class ** {\n    @androidx.annotation.Keep <fields>;\n    @androidx.annotation.Keep <methods>;\n}\n\n# native method call\n-keepclasseswithmembers,includedescriptorclasses class * {\n    native <methods>;\n}\n-keepclasseswithmembers class * {\n    @com.lynx.tasm.base.CalledByNative <methods>;\n}\n\n# to customize a module, you need to keep the class name and the method annotated as LynxMethod.\n-keepclasseswithmembers class * {\n    @com.lynx.jsbridge.LynxMethod <methods>;\n}\n\n-keepclassmembers class *  {\n    @com.lynx.tasm.behavior.LynxProp <methods>;\n    @com.lynx.tasm.behavior.LynxPropGroup <methods>;\n    @com.lynx.tasm.behavior.LynxUIMethod <methods>;\n}\n\n-keepclassmembers class com.lynx.tasm.behavior.ui.UIGroup {\n    public boolean needCustomLayout();\n}\n\n# in case R8 compiler may remove mLoader in bytecode.\n# as mLoader is not used in java and passed as a WeakRef in JNI.\n-keepclassmembers class com.lynx.tasm.LynxTemplateRender {\n    private com.lynx.tasm.core.LynxResourceLoader mLoader;\n}\n\n# the automatically generated setter classes use the class names of LynxBaseUI and ShadowNode and their subclasses.\n-keep class com.lynx.tasm.behavior.ui.LynxBaseUI\n-keep class com.lynx.tasm.behavior.shadow.ShadowNode\n-keep class com.lynx.jsbridge.LynxModule { *; }\n-keep class * extends com.lynx.tasm.behavior.ui.LynxBaseUI\n-keep class * extends com.lynx.tasm.behavior.shadow.ShadowNode\n-keep class * extends com.lynx.jsbridge.LynxModule { *; }\n-keep class * extends com.lynx.jsbridge.LynxContextModule\n-keep class * implements com.lynx.tasm.behavior.utils.Settable\n-keep class * implements com.lynx.tasm.behavior.utils.LynxUISetter\n-keep class * implements com.lynx.tasm.behavior.utils.LynxUIMethodInvoker\n-keep class com.lynx.tasm.rendernode.compat.**{\n    *;\n}\n-keep class com.lynx.tasm.rendernode.compat.RenderNodeFactory{\n    *;\n}\n# LYNX END\n```\n\n----------------------------------------\n\nTITLE: Formal syntax for font-family CSS property\nDESCRIPTION: The formal syntax definition for the font-family property, showing it accepts one or more string values or custom identifiers.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/css/properties/font-family.mdx#2025-04-17_snippet_1\n\nLANGUAGE: CSS\nCODE:\n```\nfont-family =\n  [ <string> | <custom-ident> ]#\n```\n\n----------------------------------------\n\nTITLE: Creating MainThreadRef with Generic Type\nDESCRIPTION: Implementation signature for creating a MainThreadRef with a generic type parameter and initial value. Returns a strongly typed MainThreadRef instance.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/react/Function.useMainThreadRef.mdx#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction useMainThreadRef<T>(initValue: T): MainThreadRef<T>\n```\n\n----------------------------------------\n\nTITLE: Defining CssModules.auto Property in TypeScript\nDESCRIPTION: The TypeScript signature for the 'auto' property of CssModules. It can be a boolean, RegExp, function, or undefined, allowing for flexible configuration of CSS module activation.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/rspeedy/rspeedy.cssmodules.auto.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nauto?: boolean | RegExp | ((filename: string) => boolean) | undefined;\n```\n\n----------------------------------------\n\nTITLE: Demonstrating min-content limitation in Lynx Flexbox implementation\nDESCRIPTION: This HTML code example illustrates the difference between Web and Lynx implementations regarding minimum content width. In Lynx, min-content is temporarily treated as 0px, allowing child elements to shrink beyond their minimum content width, unlike in standard web browsers.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/guide/ui/layout/flexible-box-layout.mdx#2025-04-17_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<div\n  style=\"width:100px;\n            height:70px;\n            display:flex;\n            background-color:rgb(0, 235, 235);\"\n>\n  <div\n    style=\"display:flex;\n              height:50px;\n              background-color:rgb(255, 53, 26);\"\n  >\n    <div\n      style=\"width:150px;\n                height:50px;\"\n    ></div>\n  </div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Configuring High-Quality Source Maps for Production\nDESCRIPTION: Example of using defineConfig to set high-quality source maps for production and cheaper source maps for development.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/api/rspeedy/rspeedy.sourcemap.js.md#2025-04-17_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineConfig } from '@lynx-js/rspeedy'\n\nexport default defineConfig({\n  output: {\n    sourceMap: {\n      js: process.env['NODE_ENV'] === 'production'\n        ? 'source-map'\n        : 'cheap-module-source-map',\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Boolean Asset Prefix\nDESCRIPTION: Example of setting dev.assetPrefix to true, which will use http://<host>:<port>/ as the URL prefix.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/rspeedy/rspeedy.dev.assetprefix.md#2025-04-17_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineConfig } from '@lynx-js/rspeedy'\nexport default defineConfig({\n  dev: {\n    assetPrefix: true,\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Formal CSS Syntax for Border-bottom-width\nDESCRIPTION: Defines the formal CSS syntax for the border-bottom-width property and its possible values, showing the relationship with the line-width type.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/css/properties/border-bottom-width.mdx#2025-04-17_snippet_2\n\nLANGUAGE: css\nCODE:\n```\nborder-bottom-width = <line-width>\n<line-width> = thin | medium | thick | <length>\n```\n\n----------------------------------------\n\nTITLE: Implementing Scroll State Change Event Handler\nDESCRIPTION: Definition for the scroll state change event handler which is triggered when the list scroll state changes between static, dragging, inertial scrolling, and animated scrolling states.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/api/elements/built-in/list.mdx#2025-04-17_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nbindscrollstatechange?: EventHandler<ListScrollStateChangeEvent>;\n\ninterface ScrollStateChangeEvent extends CustomEvent {\n  detail: {\n    // 本次滑动的滑动状态，取值说明\n    //   1 - 静止\n    //   2 - 拖拽\n    //   3 - 惯性滚动\n    //   4 - 动画滚动\n    state: number;\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Markdown Table: Interfaces in QRCode RSBuild Plugin\nDESCRIPTION: A markdown table listing the interfaces provided by the QRCode RSBuild plugin, including their names and descriptions.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/rspeedy/qrcode-rsbuild-plugin.md#2025-04-17_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n|  Interface | Description |\n|  --- | --- |\n|  [PluginQRCodeOptions](./qrcode-rsbuild-plugin.pluginqrcodeoptions.md) | The options for [pluginQRCode()](./qrcode-rsbuild-plugin.pluginqrcode.md)<!-- -->. |\n```\n\n----------------------------------------\n\nTITLE: Displaying Named Color: transparent\nDESCRIPTION: JSX code to display the 'transparent' named color with its RGBA value and a visual representation.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/css/data-type/color.mdx#2025-04-17_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<div style={{ textAlign: 'center', margin: '-10px', backgroundColor: 'rgba(0, 0, 0, 0)' }}>transparent</div>\n```\n\n----------------------------------------\n\nTITLE: Defining RspeedyInstance Type in TypeScript\nDESCRIPTION: This code defines the RspeedyInstance type which extends RsbuildInstance and adds a method to retrieve Rspeedy configuration. It merges the Rsbuild instance capabilities with Rspeedy-specific functionality.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/api/rspeedy/rspeedy.rspeedyinstance.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport type RspeedyInstance = RsbuildInstance & {\n    getRspeedyConfig(): Config;\n};\n```\n\n----------------------------------------\n\nTITLE: Linear Gradient Examples in CSS\nDESCRIPTION: Demonstrates three different linear gradient implementations: an angled gradient, a directional gradient using corner positioning, and a gradient with color stops at specific percentages.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/css/data-type/gradient.mdx#2025-04-17_snippet_0\n\nLANGUAGE: css\nCODE:\n```\n/* A gradient tilted 45 degrees, starting blue and finishing red */\nlinear-gradient(45deg, blue, red);\n/* A gradient going from the bottom right to the top left corner, starting blue and finishing red */\nlinear-gradient(to left top, blue, red);\n/* Color stop: A gradient going from the bottom to top, starting blue, turning green at 40% of its length, and finishing red */\nlinear-gradient(0deg, blue, green 40%, red);\n```\n\n----------------------------------------\n\nTITLE: CSS Filter Property Formal Syntax\nDESCRIPTION: Defines the formal syntax for the CSS filter property, including the blur and grayscale functions. It specifies the accepted value types for each function.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/css/properties/filter.mdx#2025-04-17_snippet_2\n\nLANGUAGE: css\nCODE:\n```\nfilter = <filter-function>\n\n<filter-function> =\n  <blur()>         |\n  <grayscale()>    |\n\n\n<blur()> =\n  blur( <length>? )\n\n<grayscale()> =\n  grayscale( [ <percentage> ]? )\n\n```\n\n----------------------------------------\n\nTITLE: Defining ExposedAPI Interface in TypeScript\nDESCRIPTION: TypeScript interface definition for the ExposedAPI, which represents the exposed API of Rspeedy. This interface can be used in Rsbuild plugins with api.useExposed.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/rspeedy/rspeedy.exposedapi.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface ExposedAPI \n```\n\n----------------------------------------\n\nTITLE: Defining LocalMediaFetcher Interface in Objective-C\nDESCRIPTION: Header file for a custom MediaResourceFetcher implementation that handles local resources. Declares methods for determining if a URL should be processed locally and for converting the URL to a local file path.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/elements/built-in/image.mdx#2025-04-17_snippet_6\n\nLANGUAGE: objective-c\nCODE:\n```\n/// Local resource handler header\n#import <LynxMediaResourceFetcher/LynxMediaResourceFetcher.h>\n\n@interface LocalMediaFetcher : NSObject <LynxMediaResourceFetcher>\n\n- (NSString *)shouldRedirectUrl:(LynxResourceRequest *)request;\n\n- (LynxResourceOptionalBool)isLocalResource:(NSURL *)url;\n\n@end\n```\n\n----------------------------------------\n\nTITLE: Integrating DevTool Switch Page in iOS (Swift)\nDESCRIPTION: This Swift code snippet shows how to integrate the DevTool switch page in an iOS app. It creates a LynxView, sets up its layout, and loads the DevTool switch template.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/guide/start/integrate-lynx-devtool-advanced.mdx#2025-04-17_snippet_1\n\nLANGUAGE: swift\nCODE:\n```\nimport UIKit\n\nclass DebugSettingViewController: UIViewController {\n  var url: String?\n\n  override func viewDidLoad() {\n    super.viewDidLoad()\n\n    let lynxView = LynxView { builder in\n      builder.config = LynxConfig(provider: DemoLynxProvider())\n      builder.screenSize = self.view.frame.size\n      builder.fontScale = 1.0\n    }\n\n    lynxView.preferredLayoutWidth = self.view.frame.size.width\n    lynxView.preferredLayoutHeight = self.view.frame.size.height\n    lynxView.layoutWidthMode = .exact\n    lynxView.layoutHeightMode = .exact\n    self.view.addSubview(lynxView)\n\n    let bundlePath = Bundle.main.path(forResource: \"LynxDebugResources\", ofType: \"bundle\")\n    let templateData = NSData(contentsOfFile: bundlePath!.appending(\"/switchPage/devtoolSwitch.lynx.bundle\"))\n    lynxView.loadTemplate(templateData! as Data, withURL: \"devtool_switch/switchPage/devtoolSwitch.lynx.bundle\")\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: CSS Animation Iteration Count Formal Syntax\nDESCRIPTION: The formal syntax definition for the animation-iteration-count property, showing the default value and allowed values.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/css/properties/animation-iteration-count.mdx#2025-04-17_snippet_1\n\nLANGUAGE: css\nCODE:\n```\n/*default value: 1*/\nanimation-iteration-count: <number> | infinite;\n```\n\n----------------------------------------\n\nTITLE: useRef Hook with No Initial Value\nDESCRIPTION: TypeScript definition for useRef without an initial value parameter. Returns a MutableRefObject that may contain undefined. Default type parameter is set to undefined.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/api/react/Function.useRef.mdx#2025-04-17_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nfunction useRef<T>(): MutableRefObject<T | undefined>\n```\n\n----------------------------------------\n\nTITLE: Basic Component Import Example\nDESCRIPTION: Demonstrates the standard static import approach for React components.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/react/code-splitting.md#2025-04-17_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport LazyComponent from './LazyComponent.jsx';\n\nexport function App() {\n  return (\n    <view>\n      <LazyComponent />\n    </view>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Defining ScrollToUpper and ScrollToLower Event Handlers\nDESCRIPTION: TypeScript definitions for the scroll-to-upper and scroll-to-lower event handlers, which are triggered when the list is scrolled to the top or bottom positions respectively.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/api/elements/built-in/list.mdx#2025-04-17_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nbindscrolltoupper?: EventHandler<ListScrollEvent>;\n```\n\nLANGUAGE: tsx\nCODE:\n```\nbindscrolltolower?: EventHandler<ListScrollEvent>;\n```\n\n----------------------------------------\n\nTITLE: Defining FirstScreenSyncTiming Type in TypeScript\nDESCRIPTION: Type definition for the firstScreenSyncTiming property which accepts either 'immediately' or 'jsReady' as valid values. This property controls when the MainThread (Lepus) transfers control to the Background thread after rendering the first screen.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/rspeedy/react-rsbuild-plugin.pluginreactlynxoptions.firstscreensynctiming.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfirstScreenSyncTiming?: 'immediately' | 'jsReady';\n```\n\n----------------------------------------\n\nTITLE: Accessing the layoutEnd Property in PipelineEntry (TypeScript)\nDESCRIPTION: The layoutEnd property provides the timestamp for the end of layout calculations as a floating-point Unix timestamp in milliseconds.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/lynx-api/performance-api/performance-entry/pipeline-entry.mdx#2025-04-17_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nlayoutEnd: number;\n```\n\n----------------------------------------\n\nTITLE: Accessing the paintingUiOperationExecuteStart Property in PipelineEntry (TypeScript)\nDESCRIPTION: The paintingUiOperationExecuteStart property provides the timestamp for the start of executing UI operations related to painting.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/lynx-api/performance-api/performance-entry/pipeline-entry.mdx#2025-04-17_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\npaintingUiOperationExecuteStart: number;\n```\n\n----------------------------------------\n\nTITLE: Defining jsAsync Property Type in TypeScript\nDESCRIPTION: Type definition for the jsAsync property that specifies the output directory for async JavaScript files. The property is optional and defaults to the 'async' subdirectory of the main JS output path.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/rspeedy/rspeedy.distpath.jsasync.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\njsAsync?: string | undefined;\n```\n\n----------------------------------------\n\nTITLE: CSS flex-flow Property Syntax Examples\nDESCRIPTION: Examples of different values for the flex-flow property, showing how to set flex-direction alone, flex-wrap alone, or both properties together.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/css/properties/flex-flow.mdx#2025-04-17_snippet_0\n\nLANGUAGE: css\nCODE:\n```\n/* flex-flow: <'flex-direction'> */\nflex-flow: row;\nflex-flow: row-reverse;\nflex-flow: column;\nflex-flow: column-reverse;\n\n/* flex-flow: <'flex-wrap'> */\nflex-flow: nowrap;\nflex-flow: wrap;\nflex-flow: wrap-reverse;\n\n/* flex-flow: <'flex-direction'> and <'flex-wrap'> */\nflex-flow: row nowrap;\nflex-flow: column wrap;\nflex-flow: column-reverse wrap-reverse;\n```\n\n----------------------------------------\n\nTITLE: Importing and Using APITable Component for CSS Data Type Compatibility\nDESCRIPTION: Code snippet demonstrating how to import and implement the APITable component to display compatibility information for the CSS length-percentage data type.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/css/data-type/length-percentage.mdx#2025-04-17_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { APITable } from '@lynx';\n\n<APITable query=\"css/data-type/length-percentage\" />\n```\n\n----------------------------------------\n\nTITLE: Importing and Rendering GlobalProps Component in React\nDESCRIPTION: This snippet imports the GlobalProps component from a relative path and renders it within JSX. The GlobalProps component likely sets up global properties or styles for the application.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/api/lynx-api/main-thread/lynx-global-props.mdx#2025-04-17_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport GlobalProps from '../lynx/lynx-global-props';\n\n<GlobalProps />\n```\n\n----------------------------------------\n\nTITLE: Configuring Named Multiple Entries\nDESCRIPTION: Example showing how to configure named multiple entries with arrays of entry modules.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/rspeedy/rspeedy.source.entry.md#2025-04-17_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineConfig } from '@lynx-js/rspeedy'\nexport default defineConfig({\n  entry: {\n    foo: './src/pages/foo/index.js',\n    bar: ['./src/pages/bar/index.js', './src/post.js'], // multiple entry modules is allowed\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Defining Minify Interface in TypeScript\nDESCRIPTION: TypeScript interface definition for Minify configuration that controls code minification settings. It includes optional properties for enabling CSS and JavaScript minification, along with customizable SWC minification options.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/rspeedy/rspeedy.minify.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface Minify \n```\n\n----------------------------------------\n\nTITLE: Constructing MainThreadRef in TypeScript\nDESCRIPTION: Creates a new MainThreadRef instance with an initial value. The MainThreadRef extends WorkletRef and is used to store data that can be accessed across multiple main thread functions.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/react/Class.MainThreadRef.mdx#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nnew MainThreadRef<T>(initValue: T): MainThreadRef<T>\n```\n\n----------------------------------------\n\nTITLE: Defining CSS Minification Property in TypeScript\nDESCRIPTION: TypeScript signature for the 'css' property in the Minify configuration. It's an optional boolean property that enables or disables CSS minification.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/rspeedy/rspeedy.minify.css.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ncss?: boolean | undefined;\n```\n\n----------------------------------------\n\nTITLE: CSS Border Left Color Formal Syntax\nDESCRIPTION: The formal syntax definition for the border-left-color property, showing it accepts either the transparent keyword or any valid color value.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/css/properties/border-left-color.mdx#2025-04-17_snippet_1\n\nLANGUAGE: css\nCODE:\n```\ntransparent | <color>\n```\n\n----------------------------------------\n\nTITLE: JSX View Element Configuration Example\nDESCRIPTION: Example showing how to configure a view element with source and tap binding attributes in JSX syntax.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/engine/element-api/__SetConfig.mdx#2025-04-17_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<view src=\"xxx\" bindtap=\"onTap\" />\n```\n\n----------------------------------------\n\nTITLE: Using High-Quality Source Maps for All Environments in JavaScript\nDESCRIPTION: Example of configuring high-quality source maps for all environments using the SourceMap.js property.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/rspeedy/rspeedy.sourcemap.js.md#2025-04-17_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineConfig } from '@lynx-js/rspeedy'\n\nexport default defineConfig({\n  output: {\n    sourceMap: {\n      js: 'source-map',\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Asset Inlining Configuration\nDESCRIPTION: Configuration example for customizing asset inlining thresholds\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/rspeedy/assets.md#2025-04-17_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineConfig } from '@lynx-js/rspeedy';\n\nexport default defineConfig({\n  output: {\n    dataUriLimit: {\n      image: 5000,\n      media: 0,\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Defining CSS inset-inline-end Property with Various Values\nDESCRIPTION: Examples of using the inset-inline-end CSS property with different types of values including length units, percentages, keywords, and calc() function.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/css/properties/inset-inline-end.mdx#2025-04-17_snippet_0\n\nLANGUAGE: css\nCODE:\n```\n/* <length> values */\ninset-inline-end: 3px;\ninset-inline-end: 2rpx;\ninset-inline-end: 2.4em;\ninset-inline-end: 3rem;\n\ninset-inline-end: 10%;\n\n/* Keyword value */\ninset-inline-end: auto;\n\n/* calc */\ninset-inline-end: calc(1px + 1px);\n```\n\n----------------------------------------\n\nTITLE: selectRoot Method Signature\nDESCRIPTION: TypeScript method signature for the selectRoot() method which returns a NodesRef object representing the query result.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/lynx-api/selector-query/selector-query-select-root.mdx#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nselectRoot(): NodesRef;\n```\n\n----------------------------------------\n\nTITLE: Using define for typeof Expressions in JavaScript\nDESCRIPTION: Example of using the 'define' property to handle typeof expressions in a Lynx Rspeedy configuration. It shows how to define the typeof window expression.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/api/rspeedy/rspeedy.source.define.md#2025-04-17_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineConfig } from '@lynx-js/rspeedy'\nexport default defineConfig({\n  source: {\n    define: {\n      'typeof window': JSON.stringify(\"undefined\"),\n    },\n  },\n})\n```\n\nLANGUAGE: javascript\nCODE:\n```\nif (typeof window !== 'undefined') {}\n\n// ⬇️ Turn into being...\nif (\"undefined\" !== 'undefined') {}\n```\n\n----------------------------------------\n\nTITLE: Defining pluginReactLynx Function in TypeScript\nDESCRIPTION: This snippet shows the TypeScript function signature for pluginReactLynx. It takes an optional parameter of type PluginReactLynxOptions and returns an RsbuildPlugin.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/rspeedy/react-rsbuild-plugin.pluginreactlynx.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare function pluginReactLynx(userOptions?: PluginReactLynxOptions): RsbuildPlugin;\n```\n\n----------------------------------------\n\nTITLE: Configuring LynxView Size with Preferred Layout Properties in Objective-C\nDESCRIPTION: This snippet demonstrates how to set a fixed size for LynxView using preferredLayoutWidth/Height properties along with layoutWidthMode/HeightMode. It sets the size to 400x200 and ensures exact sizing mode.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/guide/embed-lynx-to-native/embed-lynx-to-native-fixed-iOS.mdx#2025-04-17_snippet_1\n\nLANGUAGE: objective-c\nCODE:\n```\n_lynxView.layoutWidthMode = LynxViewSizeModeExact;\n_lynxView.layoutHeightMode = LynxViewSizeModeExact;\n\n_lynxView.preferredLayoutWidth = 400;\n_lynxView.preferredLayoutHeight = 200;\n```\n\n----------------------------------------\n\nTITLE: Defining Enable Nested Scroll Attribute in TSX\nDESCRIPTION: Defines the enable-nested-scroll attribute that controls whether <list> can achieve nested scrolling with other scrollable containers.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/elements/built-in/list.mdx#2025-04-17_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\n// DefaultValue: true\nenable-nested-scroll?: boolean\n```\n\n----------------------------------------\n\nTITLE: Configuring ICU Support in React Rsbuild Plugin\nDESCRIPTION: TypeScript type definition for the enableICU property that enables global Intl API support. Important consideration is given regarding compatibility with Lynx Share Context feature to prevent issues with shared Intl API from destroyed cards.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/rspeedy/react-rsbuild-plugin.pluginreactlynxoptions.enableicu.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nenableICU?: boolean;\n```\n\n----------------------------------------\n\nTITLE: Defining enableCSSSelector Property in PluginReactLynxOptions Interface\nDESCRIPTION: This code snippet defines the enableCSSSelector property in the PluginReactLynxOptions interface. It is an optional boolean property that controls whether the new CSS implementation is enabled.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/api/rspeedy/react-rsbuild-plugin.pluginreactlynxoptions.enablecssselector.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nenableCSSSelector?: boolean;\n```\n\n----------------------------------------\n\nTITLE: CSS Visibility Formal Syntax Definition\nDESCRIPTION: Formal syntax definition showing the allowed values for the visibility property in Lynx framework.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/css/properties/visibility.mdx#2025-04-17_snippet_1\n\nLANGUAGE: css\nCODE:\n```\nvisibility =\n  visible   |\n  hidden\n```\n\n----------------------------------------\n\nTITLE: Defining createRef Function in TypeScript\nDESCRIPTION: TypeScript function definition for React's createRef method that creates a mutable ref object. The function takes a generic type parameter T and returns a RefObject<T>.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/api/react/Function.createRef.mdx#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction createRef<T>(): RefObject<T>\n```\n\n----------------------------------------\n\nTITLE: Defining the config Property in ExposedAPI Class in TypeScript\nDESCRIPTION: TypeScript signature for the config property in the ExposedAPI class. This property stores the user configuration settings with a type of Config.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/api/rspeedy/rspeedy.exposedapi.config.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconfig: Config;\n```\n\n----------------------------------------\n\nTITLE: Formal Syntax Definition for relative-inline-end-of in Lynx CSS\nDESCRIPTION: The formal syntax definition for the 'relative-inline-end-of' property in Lynx CSS. It can take values of 'none' or a number.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/css/properties/relative-inline-end-of.mdx#2025-04-17_snippet_1\n\nLANGUAGE: css\nCODE:\n```\nrelative-inline-end-of = none | <number>\n```\n\n----------------------------------------\n\nTITLE: Defining RspeedyInstance Type in TypeScript\nDESCRIPTION: Defines the RspeedyInstance type which extends RsbuildInstance and adds a method to retrieve Rspeedy configuration. The type includes the getRspeedyConfig method that returns a Config object.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/rspeedy/rspeedy.rspeedyinstance.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport type RspeedyInstance = RsbuildInstance & {\n    getRspeedyConfig(): Config;\n};\n```\n\n----------------------------------------\n\nTITLE: Defining the writeToDisk Property Type in TypeScript\nDESCRIPTION: TypeScript signature for the writeToDisk property which can accept a boolean value, a function that returns a boolean, or be undefined. This property controls whether build artifacts are written to disk during development.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/api/rspeedy/rspeedy.dev.writetodisk.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nwriteToDisk?: boolean | ((filename: string) => boolean) | undefined;\n```\n\n----------------------------------------\n\nTITLE: Formal syntax for CSS font-style property\nDESCRIPTION: The formal syntax definition for the font-style property in CSS, showing the allowed values.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/css/properties/font-style.mdx#2025-04-17_snippet_1\n\nLANGUAGE: css\nCODE:\n```\nfont-style = normal | italic | oblique\n```\n\n----------------------------------------\n\nTITLE: Node-Specific Exposure Event Data in Lynx\nDESCRIPTION: This JSON snippet shows the format of node-specific exposure event data in Lynx. It includes details such as event type, exposure-id, exposure-scene, unique-id, and dataset.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/guide/interaction/visibility-detection/exposure-ability.mdx#2025-04-17_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"string\",\n  \"detail\": {\n    \"exposure-id\": \"string\",\n    \"exposure-scene\": \"string\",\n    \"unique-id\": \"string\",\n    \"dataset\": \"object\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Touch Event Attributes for View Element\nDESCRIPTION: Illustrates how to set touch event-related attributes like user-interaction-enabled and native-interaction-enabled.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/api/elements/built-in/view.mdx#2025-04-17_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n// DefaultValue: true\nuser-interaction-enabled?: boolean\n\n// DefaultValue: true for iOS, false for Android\nnative-interaction-enabled?: boolean\n```\n\n----------------------------------------\n\nTITLE: Using border-right-color in CSS\nDESCRIPTION: Examples of different ways to specify the border-right-color property in CSS, including using named colors, hex values, RGB values, HSL values, and special keywords like currentColor and transparent.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/css/properties/border-right-color.mdx#2025-04-17_snippet_0\n\nLANGUAGE: css\nCODE:\n```\nborder-right-color: red;\nborder-right-color: #ffbb00;\nborder-right-color: rgb(255, 0, 0);\nborder-right-color: hsla(100%, 50%, 25%, 0.75);\nborder-right-color: currentColor;\nborder-right-color: transparent;\n```\n\n----------------------------------------\n\nTITLE: Function Standard Syntax: Scale Functions in CSS\nDESCRIPTION: Syntax specifications for scale, scaleX, and scaleY transform functions.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/css/properties/transform.mdx#2025-04-17_snippet_3\n\nLANGUAGE: scss\nCODE:\n```\nscale( <number> , <number>? )\n```\n\nLANGUAGE: scss\nCODE:\n```\nscaleX( <number> )\n```\n\nLANGUAGE: scss\nCODE:\n```\nscaleY( <number> )\n```\n\n----------------------------------------\n\nTITLE: Using Element Unique ID Function in Lynx Framework (JSX)\nDESCRIPTION: Example showing how to create an Element using __CreateElement and then retrieve its unique ID with __GetElementUniqueID. The example creates a 'view' element and then gets its identifier.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/engine/element-api/__GetElementUniqueID.mdx#2025-04-17_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nlet element = __CreateElement('view', 0, {});\nlet id = __GetElementUniqueID(element);\n```\n\n----------------------------------------\n\nTITLE: Accessing the identifier Property in PipelineEntry (TypeScript)\nDESCRIPTION: The identifier property marks a particular Lynx Pipeline, either matching the __lynx_timing_flag value or being empty for TemplateBundle triggers.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/lynx-api/performance-api/performance-entry/pipeline-entry.mdx#2025-04-17_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nidentifier: string;\n```\n\n----------------------------------------\n\nTITLE: Defining EntryDescription.publicPath Property in TypeScript\nDESCRIPTION: Type definition for the publicPath property of the EntryDescription interface. This property specifies the public URL path for resources, which is crucial for on-demand-loading or loading external resources like images and files to prevent 404 errors.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/api/rspeedy/rspeedy.entrydescription.publicpath.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\npublicPath?: string | undefined;\n```\n\n----------------------------------------\n\nTITLE: Defining TouchEvent Detail Property in TypeScript\nDESCRIPTION: Defines the 'detail' property of a TouchEvent, which represents the touch point position of the first finger in the LynxView coordinate system.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/lynx-api/event/touch-event.mdx#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ndetail: {\n  x: number,\n  y: number,\n}\n```\n\n----------------------------------------\n\nTITLE: Defining entryType Property for InitLynxviewEntry in TypeScript\nDESCRIPTION: This snippet shows the type definition for the entryType property of InitLynxviewEntry, which is always set to 'init'.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/api/lynx-api/performance-api/performance-entry/init-lynxview-entry.mdx#2025-04-17_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nentryType: string;\n```\n\n----------------------------------------\n\nTITLE: Defining name Property in InitBackgroundRuntimeEntry Interface (TypeScript)\nDESCRIPTION: Declares the name property of the InitBackgroundRuntimeEntry interface, which always returns the string 'backgroundRuntime'.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/lynx-api/performance-api/performance-entry/init-background-runtime-entry.mdx#2025-04-17_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nname: string;\n```\n\n----------------------------------------\n\nTITLE: Defining ignoreOrder Property in CssExtractRspackPluginOptions Interface\nDESCRIPTION: This code snippet defines the ignoreOrder property for the CssExtractRspackPluginOptions interface. It is an optional boolean property that can be undefined.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/rspeedy/rspeedy.cssextractrspackpluginoptions.ignoreorder.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nignoreOrder?: boolean | undefined;\n```\n\n----------------------------------------\n\nTITLE: Defining Dev.hmr Property in TypeScript\nDESCRIPTION: TypeScript signature for the 'hmr' property in the 'Dev' object. It's an optional boolean property that enables or disables Hot Module Replacement.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/rspeedy/rspeedy.dev.hmr.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nhmr?: boolean | undefined;\n```\n\n----------------------------------------\n\nTITLE: Valid CSS Number Examples\nDESCRIPTION: Examples of valid CSS number formats including integers, fractions, scientific notation, and variations with positive/negative signs.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/css/data-type/number.mdx#2025-04-17_snippet_0\n\nLANGUAGE: css\nCODE:\n```\n12          A raw <integer> is also a <number>.\n4.01        Positive fraction\n-456.8      Negative fraction\n0.0         Zero\n+0.0        Zero, with a leading +\n-0.0        Zero, with a leading -\n.60         Fractional number without a leading zero\n10e3        Scientific notation\n-3.4e-2     Complicated scientific notation\n```\n\n----------------------------------------\n\nTITLE: Defining createSelectorQuery Method Syntax in TypeScript\nDESCRIPTION: This snippet shows the TypeScript syntax for the createSelectorQuery() method, which returns a SelectorQuery object.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/lynx-api/lynx/lynx-create-selector-query.mdx#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ncreateSelectorQuery(): SelectorQuery;\n```\n\n----------------------------------------\n\nTITLE: CreateRspeedyOptions Interface Definition in TypeScript\nDESCRIPTION: The TypeScript interface definition for CreateRspeedyOptions, which contains configuration options for the createRspeedy method including optional properties for working directory, environment settings, environment variable loading, and Rspeedy configuration.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/api/rspeedy/rspeedy.createrspeedyoptions.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface CreateRspeedyOptions \n\n```\n\n----------------------------------------\n\nTITLE: Defining Tools Interface in TypeScript\nDESCRIPTION: TypeScript interface definition for Tools that provides configuration options for various building tools including Rspack, SWC, CSS processing, and development tools.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/rspeedy/rspeedy.tools.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface Tools \n```\n\n----------------------------------------\n\nTITLE: Using grid-column-span CSS Property in Lynx\nDESCRIPTION: Demonstrates the basic syntax for the grid-column-span CSS property. This property specifies how many columns a grid item should span, with numeric values indicating the span count.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/css/properties/grid-column-span.mdx#2025-04-17_snippet_0\n\nLANGUAGE: css\nCODE:\n```\n/* <number> values */\ngrid-column-span: 1;\ngrid-column-span: 2;\n```\n\n----------------------------------------\n\nTITLE: Declaring QRCode Plugin Function Signature in TypeScript\nDESCRIPTION: Function signature declaration for the pluginQRCode function that creates a Rsbuild plugin for QR code functionality. It accepts optional PluginQRCodeOptions and returns an RsbuildPlugin object.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/rspeedy/qrcode-rsbuild-plugin.pluginqrcode.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare function pluginQRCode(options?: PluginQRCodeOptions): RsbuildPlugin;\n```\n\n----------------------------------------\n\nTITLE: Explicit <page> Element Usage in JSX with Lynx\nDESCRIPTION: Shows how to explicitly use the <page> element as the root node in a Lynx application. This approach allows for more flexibility by adding class names, styles, and event handlers directly to the root element.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/api/elements/built-in/page.mdx#2025-04-17_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nconst App = () => {\n  return (\n    <page className=\"body\" bindtap={handlePageClick}>\n      <view style={{ width: '100%', height: '100%' }}>\n        <text className=\"title\">Page Example</text>\n      </view>\n    </page>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: CSS Border Top Color Formal Syntax\nDESCRIPTION: The formal syntax definition for the border-top-color property, showing it accepts either the transparent keyword or any valid color value.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/css/properties/border-top-color.mdx#2025-04-17_snippet_1\n\nLANGUAGE: css\nCODE:\n```\ntransparent | <color>\n```\n\n----------------------------------------\n\nTITLE: Defining hit-slop Property in TypeScript\nDESCRIPTION: Specifies the touch event response hotspot of the target node without affecting platform layer gestures. Can be a string or object with top, left, right, and bottom values.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/elements/built-in/view.mdx#2025-04-17_snippet_31\n\nLANGUAGE: typescript\nCODE:\n```\n// DefaultValue: '0px' or {top: '0px', left: '0px', right: '0px', bottom: '0px'}\nhit-slop?: object | string\n```\n\n----------------------------------------\n\nTITLE: Using border-inline-start-width with various values in CSS\nDESCRIPTION: Examples of how to set the border-inline-start-width property using keywords (thin, medium, thick) and length values. This property defines the width of the logical inline-start border of an element.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/css/properties/border-inline-start-width.mdx#2025-04-17_snippet_0\n\nLANGUAGE: css\nCODE:\n```\nborder-inline-start-width: thin;\nborder-inline-start-width: medium;\nborder-inline-start-width: thick;\nborder-inline-start-width: 10px;\n```\n\n----------------------------------------\n\nTITLE: Formal Syntax for overflow-y Property in CSS\nDESCRIPTION: This snippet presents the formal syntax definition for the overflow-y property, showing the allowed values in a concise format.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/api/css/properties/overflow-y.mdx#2025-04-17_snippet_2\n\nLANGUAGE: css\nCODE:\n```\nhidden | visible\n```\n\n----------------------------------------\n\nTITLE: Defining TypeScript Signature for customCSSInheritanceList\nDESCRIPTION: This code snippet shows the TypeScript signature for the customCSSInheritanceList property. It is defined as an optional array of strings or undefined.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/rspeedy/react-rsbuild-plugin.pluginreactlynxoptions.customcssinheritancelist.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ncustomCSSInheritanceList?: string[] | undefined;\n```\n\n----------------------------------------\n\nTITLE: Defining ChunkSplitBySize Strategy Type in TypeScript\nDESCRIPTION: TypeScript type definition for the strategy property of ChunkSplitBySize class. The property is typed as a string literal 'split-by-size' to enforce type safety.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/rspeedy/rspeedy.chunksplitbysize.strategy.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nstrategy: 'split-by-size';\n```\n\n----------------------------------------\n\nTITLE: Defining LynxViewSizeMode Enumeration in Objective-C\nDESCRIPTION: An enumeration that defines the available size constraint modes for LynxView. It includes Undefined (content-driven sizing), Exact (fixed dimensions), and Max (maximum value constraint).\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/guide/embed-lynx-to-native/embed-lynx-to-native-mode-iOS.mdx#2025-04-17_snippet_0\n\nLANGUAGE: objective-c\nCODE:\n```\ntypedef NS_ENUM(NSInteger, LynxViewSizeMode) {\n  LynxViewSizeModeUndefined = 0,\n  LynxViewSizeModeExact,\n  LynxViewSizeModeMax\n};\n```\n\n----------------------------------------\n\nTITLE: IntersectionObserver disconnect() Method Signature in TypeScript\nDESCRIPTION: The TypeScript method signature for the disconnect() method of IntersectionObserver. This method takes no parameters and returns void. It is used to stop observing all target elements and prevent callbacks from being triggered.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/lynx-api/intersection-observer/intersection-observer-disconnect.mdx#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ndisconnect(): void;\n```\n\n----------------------------------------\n\nTITLE: Remove All Console Methods Configuration\nDESCRIPTION: Example showing how to configure RSpeedy to remove all console methods in the production build by setting removeConsole to true.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/rspeedy/rspeedy.performance.removeconsole.md#2025-04-17_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineConfig } from '@lynx-js/rspeedy'\n\nexport default defineConfig({\n  performance: {\n    removeConsole: true,\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Defining ChunkSplitCustom Interface for RSpeedy Chunk Splitting in TypeScript\nDESCRIPTION: This interface defines the configuration structure for custom chunk splitting in RSpeedy. It includes a required 'strategy' property set to 'custom' and an optional 'splitChunks' property for custom Rspack chunk splitting configuration.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/api/rspeedy/rspeedy.chunksplitcustom.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface ChunkSplitCustom \n{\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling Both HMR and Live Reload in Rspeedy\nDESCRIPTION: Example demonstrating how to completely disable both Hot Module Replacement and live reload functionality by setting both hmr and liveReload properties to false.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/api/rspeedy/rspeedy.dev.hmr.md#2025-04-17_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineConfig } from '@lynx-js/rspeedy'\n\nexport default defineConfig({\n  dev: {\n    hmr: false,\n    liveReload: false,\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Getting Extra Info from TemplateBundle in Objective-C\nDESCRIPTION: Retrieves the extraInfo field content from the pageConfig. Returns null if extraInfo is not configured or if called on an empty bundle.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/lynx-native-api/template-bundle.mdx#2025-04-17_snippet_8\n\nLANGUAGE: objective-c\nCODE:\n```\n- (NSDictionary* _Nullable)extraInfo;\n```\n\n----------------------------------------\n\nTITLE: Declaring Version Property in TypeScript Interface\nDESCRIPTION: Defines the version property on the ExposedAPI interface that returns the current version of Rspeedy as a string value.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/api/rspeedy/rspeedy.exposedapi.version.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nversion: string;\n```\n\n----------------------------------------\n\nTITLE: Configuring Rspack Using Function with Environment Utility\nDESCRIPTION: Example demonstrating how to use a function with the env utility to conditionally set different Rspack configurations based on the environment. Shows setting devtool to cheap-source-map in development mode.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/api/rspeedy/rspeedy.tools.rspack.md#2025-04-17_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineConfig } from '@lynx-js/rspeedy'\n\nexport default defineConfig({\n  tools: {\n    rspack(config, { env }) {\n      if (env === 'development') {\n        config.devtool = 'cheap-source-map'\n      }\n      return config\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Defining CWD Property in CreateRspeedyOptions Interface in TypeScript\nDESCRIPTION: TypeScript signature for the optional cwd property in the CreateRspeedyOptions interface. This property allows specifying the root path of the current build context.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/api/rspeedy/rspeedy.createrspeedyoptions.cwd.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ncwd?: string;\n```\n\n----------------------------------------\n\nTITLE: Formal Syntax Definition for text-stroke-width Property\nDESCRIPTION: The formal syntax definition showing that text-stroke-width accepts length values greater than or equal to zero.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/css/properties/text-stroke-width.mdx#2025-04-17_snippet_1\n\nLANGUAGE: css\nCODE:\n```\ntext-stroke-width = <length[0,∞]>\n```\n\n----------------------------------------\n\nTITLE: Configuring TypeScript Path Aliases\nDESCRIPTION: Configuration for setting up path aliases in tsconfig.json to simplify module imports using the TypeScript paths option.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/rspeedy/typescript.md#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"compilerOptions\": {\n    \"paths\": {\n      \"@common/*\": [\"./src/common/*\"]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating TemplateData from Map in Android\nDESCRIPTION: Static method to create a TemplateData object from a Map<String, Object> in Android. It takes a Map as input and returns a parsed TemplateData object.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/lynx-native-api/template-data.mdx#2025-04-17_snippet_0\n\nLANGUAGE: java\nCODE:\n```\npublic static TemplateData fromMap(Map<String, Object> map)\n```\n\n----------------------------------------\n\nTITLE: Linear Gradient Formal Syntax\nDESCRIPTION: Defines the formal syntax pattern for linear gradients, showing the required structure with optional angle or side/corner parameters followed by at least two color stops.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/css/data-type/gradient.mdx#2025-04-17_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nlinear-gradient([ <angle> | to <side-or-corner> ,]? <color-stop> [ , <color-stop> ]+ )\n```\n\n----------------------------------------\n\nTITLE: Using __GetDataset in Lynx Framework (JSX)\nDESCRIPTION: This example demonstrates how to use the __GetDataset function in a front-end framework. It creates an element, sets a dataset attribute, and then retrieves the dataset.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/api/engine/element-api/__GetDataset.mdx#2025-04-17_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n// main-thread.js\nlet element = __CreateElement('view', 0, {});\n__SetDataset(element, { key: 'value' });\n\nlet dataset = __GetDataset(element);\n```\n\n----------------------------------------\n\nTITLE: Demonstrating CSS String Syntax and Escaping\nDESCRIPTION: Examples showing various ways to create CSS strings using both single and double quotes, along with different methods of character escaping including quotes and backslashes. Also demonstrates Unicode character representation and line handling.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/css/data-type/string.mdx#2025-04-17_snippet_0\n\nLANGUAGE: css\nCODE:\n```\n/* Simple strings */\n\"This string is demarcated by double quotes.\"\n'This string is demarcated by single quotes.'\n\n/* Character escaping */\n\"This is a string with \\\" an escaped double quote.\"\n\"This string also has \\22 an escaped double quote.\"\n'This is a string with \\' an escaped single quote.'\n'This string also has \\27 an escaped single quote.'\n\"This is a string with \\\\ an escaped backslash.\"\n```\n\n----------------------------------------\n\nTITLE: Basic Perspective CSS Syntax Examples\nDESCRIPTION: Examples of how to use the perspective CSS property with keyword and length values.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/css/properties/perspective.mdx#2025-04-17_snippet_0\n\nLANGUAGE: css\nCODE:\n```\n/* Keyword value */\nperspective: auto;\n\n/* <length> values */\nperspective: 20px;\nperspective: 3.5em;\n```\n\n----------------------------------------\n\nTITLE: Excluding Specific Assets in Rspeedy File Size Output\nDESCRIPTION: Example of how to exclude specific file types (HTML files in this case) from the file size output using the exclude filter function.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/api/rspeedy/rspeedy.performance.printfilesize.md#2025-04-17_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineConfig } from '@lynx-js/rspeedy'\n\nexport default defineConfig({\n  performance: {\n    printFileSize: {\n      exclude: (asset) =>\n        /\\.(?:map|LICENSE\\.txt)$/.test(asset.name) ||\n        /\\.html$/.test(asset.name),\n    }\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Lynx Dependencies in Podfile (Ruby)\nDESCRIPTION: This snippet shows how to configure Lynx and PrimJS dependencies in a Podfile for Cocoapods. It specifies the required versions and subspecs for Lynx and PrimJS.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/guide/start/fragments/ios/integrating-lynx-with-existing-app-ios.mdx#2025-04-17_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nsource 'https://cdn.cocoapods.org/'\n\nplatform :ios, '10.0'\n\ntarget 'YourTarget' do\n  pod 'Lynx', '3.2.0-rc.0', :subspecs => [\n    'Framework',\n  ]\n\n  pod 'PrimJS', '2.11.1-rc.0', :subspecs => ['quickjs', 'napi']\nend\n```\n\n----------------------------------------\n\nTITLE: Function Signature for __LastElement in JSX\nDESCRIPTION: The syntax definition for the __LastElement function showing its parameter and return type. It takes an Element object and returns the last child Element or undefined if no children exist.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/engine/element-api/__LastElement.mdx#2025-04-17_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n__LastElement(element: Element) : Element|undefined;\n```\n\n----------------------------------------\n\nTITLE: Styling Page Root with CSS Selectors in Lynx\nDESCRIPTION: Demonstrates how to style the root node of a Lynx page using the 'page' and ':root' CSS selectors when the <page> element is omitted.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/elements/built-in/page.mdx#2025-04-17_snippet_0\n\nLANGUAGE: css\nCODE:\n```\n/* use `page` selector */\npage {\n  background-color: white;\n}\n\n/* or you can use `:root` selector */\n:root {\n  background-color: white;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Selector Parameter Type for relativeTo() Method in TypeScript\nDESCRIPTION: This snippet defines the type of the 'selector' parameter for the relativeTo() method. It specifies that the selector should be a string.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/api/lynx-api/intersection-observer/intersection-observer-relative-to.mdx#2025-04-17_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nselector: string;\n```\n\n----------------------------------------\n\nTITLE: Configuring NPM Package Compilation\nDESCRIPTION: Example showing how to configure source.include to compile specific npm packages under node_modules, particularly useful for packages containing ESNext syntax that needs compilation for Lynx compatibility.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/rspeedy/rspeedy.source.include.md#2025-04-17_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createRequire } from 'node:module'\nimport path from 'node:path'\n\nimport { defineConfig } from '@lynx-js/rspeedy'\n\nconst require = createRequire(import.meta.url)\n\nexport default defineConfig({\n  source: {\n    include: [\n      // Method 1:\n      // First get the path of the module by `require.resolve`\n      // Then pass path.dirname to point to the corresponding directory\n      path.dirname(require.resolve('query-string')),\n      // Method 2:\n      // Match by regular expression\n      // All paths containing `node_modules/query-string/` will be matched\n      /node_modules[\\/]query-string[\\/]/,\n    ],\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: useReducer Implementation with Combined State and Initializer\nDESCRIPTION: TypeScript definition for useReducer that combines the initializer argument with reducer state type.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/api/react/Function.useReducer.mdx#2025-04-17_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nfunction useReducer<R, I>(\n   reducer: R,\n   initializerArg: I & ReducerState<R>,\n   initializer: (arg: I & ReducerState<R>) => ReducerState<R>): [ReducerState<R>, Dispatch<ReducerAction<R>>]\n```\n\n----------------------------------------\n\nTITLE: Structuring Window Resize Event in JSON for Lynx GlobalEvent\nDESCRIPTION: Defines the structure of the 'onWindowResize' event in the GlobalEvent object. It includes the new width and height of the Lynx page after a resize event.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/lynx-api/event/global-event.mdx#2025-04-17_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n[\n  width?: ['on', 'off'],    // indicates the width of the Lynx page after the change, in px\n  height?: number,          // indicates the height of the Lynx page after the change, in px\n]\n```\n\n----------------------------------------\n\nTITLE: Retrieving OS Version on Android in C++\nDESCRIPTION: Demonstrates how to obtain the Android API level, which represents the OS version, using C++. It uses the android_get_device_api_level function from the Android NDK.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/lynx-api/global/system-info.mdx#2025-04-17_snippet_2\n\nLANGUAGE: cpp\nCODE:\n```\nstd::to_string(android_get_device_api_level())\n```\n\n----------------------------------------\n\nTITLE: Styling Root Element with CSS Selectors in Lynx\nDESCRIPTION: Demonstrates how to style the root element using the 'page' and ':root' selectors when not explicitly defining a <page> tag. This approach allows adding styles to the automatically generated root node.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/api/elements/built-in/page.mdx#2025-04-17_snippet_0\n\nLANGUAGE: css\nCODE:\n```\n/* 使用 page 选择器添加样式 */\npage {\n  background-color: white;\n}\n\n/* 或者使用 :root 选择器添加样式 */\n:root {\n  background-color: white;\n}\n```\n\n----------------------------------------\n\nTITLE: SwapElement Function Syntax in JSX\nDESCRIPTION: The function signature for __SwapElement which takes two Element parameters and returns void. It's used to swap the positions of two elements in the DOM.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/engine/element-api/__SwapElement.mdx#2025-04-17_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n__SwapElement(childA: Element, childB: Element) : void;\n```\n\n----------------------------------------\n\nTITLE: Using ID Selector in TSX\nDESCRIPTION: Example of a view element with an ID selector that can be selected using '#my-id'.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/lynx-api/selector-query/selector-query-select.mdx#2025-04-17_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n// '#my-id'\n<view id=\"my-id\" />\n```\n\n----------------------------------------\n\nTITLE: Defining pathinfo Property in CssExtractRspackPluginOptions Interface\nDESCRIPTION: This code snippet defines the 'pathinfo' property for the CssExtractRspackPluginOptions interface. It is an optional boolean property that can be undefined.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/rspeedy/rspeedy.cssextractrspackpluginoptions.pathinfo.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\npathinfo?: boolean | undefined;\n```\n\n----------------------------------------\n\nTITLE: Defining relativeTo() Method Signature in TypeScript\nDESCRIPTION: This snippet shows the TypeScript signature for the relativeTo() method of the IntersectionObserver class. It specifies the method parameters and return type.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/lynx-api/intersection-observer/intersection-observer-relative-to.mdx#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nrelativeTo(\n   selector: string,\n   margins ? margins : {left: 0, right: 0, top: 0, bottom: 0}\n): IntersectionObserver;\n```\n\n----------------------------------------\n\nTITLE: Basic Border-bottom-width CSS Syntax\nDESCRIPTION: Shows the basic syntax for setting border-bottom-width in CSS with a specific pixel value.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/css/properties/border-bottom-width.mdx#2025-04-17_snippet_1\n\nLANGUAGE: css\nCODE:\n```\nborder-bottom-width: 10px;\n```\n\n----------------------------------------\n\nTITLE: TypeScript Definition of Margins Parameter\nDESCRIPTION: The TypeScript definition for the margins parameter, which can be used to specify the zoom values for the reference node window boundaries.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/lynx-api/intersection-observer/intersection-observer-relative-to-screen.mdx#2025-04-17_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nmargins ? margins : { left: 0, right: 0, top: 0, bottom: 0 };\n```\n\n----------------------------------------\n\nTITLE: Re-rendering Component Performance Tracking\nDESCRIPTION: Demonstrates how re-rendering of components with timing flags is handled. Only the first instance's pipeline data is counted.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/guide/performance/timing-flag.mdx#2025-04-17_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport default function App() {\n  return (\n    <view className=\"container\">\n      {data.needShow && \n        <text __lynx_timing_flag=\"__lynx_timing_actual_fmp\">\n          {data.msg}\n        </text>\n      }\n    </view>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling Per-Asset Size Output in Rspeedy Configuration\nDESCRIPTION: Example of how to disable per-asset size output by setting the detail property to false in the printFileSize configuration.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/api/rspeedy/rspeedy.performance.printfilesize.md#2025-04-17_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineConfig } from '@lynx-js/rspeedy'\n\nexport default defineConfig({\n  performance: {\n    printFileSize: {\n      detail: false,\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Defining getJSModule() Method Signature in TypeScript\nDESCRIPTION: This snippet shows the TypeScript signature for the getJSModule() method. It defines a generic function that takes a string parameter 'name' and returns a Module of the specified type.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/api/lynx-api/lynx/lynx-get-js-module.mdx#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ngetJSModule: <Module>(name: string) => Module;\n```\n\n----------------------------------------\n\nTITLE: Defining Decorators Interface in TypeScript\nDESCRIPTION: This code snippet defines the Decorators interface, which is used to configure the decorators syntax. It includes an optional 'version' property to specify the decorator syntax version.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/api/rspeedy/rspeedy.decorators.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface Decorators \n```\n\n----------------------------------------\n\nTITLE: Styled Text Element with Background\nDESCRIPTION: Shows how to apply style attributes to a text element by setting a red background color.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/guide/ui/elements-components.mdx#2025-04-17_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<text style=\"background:red;\">Hello Lynx</text>\n```\n\n----------------------------------------\n\nTITLE: Defining Rspack Type Signature in TypeScript\nDESCRIPTION: TypeScript type definition for the Rspack configuration property within the Tools object.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/rspeedy/rspeedy.tools.rspack.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nrspack?: ToolsConfig['rspack'] | undefined;\n```\n\n----------------------------------------\n\nTITLE: Defining block-native-event-areas Property in TypeScript\nDESCRIPTION: Specifies areas to block platform layer gestures outside Lynx when the target node is on the event response chain. Accepts an array of arrays containing x, y, width, and height values.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/elements/built-in/view.mdx#2025-04-17_snippet_27\n\nLANGUAGE: typescript\nCODE:\n```\n// DefaultValue: []\nblock-native-event-areas?: number [number []]\n```\n\n----------------------------------------\n\nTITLE: Formal Syntax Definition for Linear Direction Property\nDESCRIPTION: Provides the formal CSS syntax definition for the linear-direction property, showing all valid values.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/css/properties/linear-direction.mdx#2025-04-17_snippet_1\n\nLANGUAGE: css\nCODE:\n```\nlinear-direction = column | row | column-reverse | row-reverse\n```\n\n----------------------------------------\n\nTITLE: CSS Syntax for linear-gravity Property\nDESCRIPTION: Demonstrates the syntax for using the linear-gravity CSS property with various possible values.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/api/css/properties/linear-gravity.mdx#2025-04-17_snippet_2\n\nLANGUAGE: css\nCODE:\n```\nlinear-gravity: none;\nlinear-gravity: start;\nlinear-gravity: end;\nlinear-gravity: center;\nlinear-gravity: space-between;\n```\n\n----------------------------------------\n\nTITLE: CSS Syntax for overflow-x Property\nDESCRIPTION: This snippet shows the basic CSS syntax for using the overflow-x property, demonstrating two possible values: visible and hidden.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/css/properties/overflow-x.mdx#2025-04-17_snippet_1\n\nLANGUAGE: css\nCODE:\n```\noverflow-x: visible;\noverflow-x: hidden;\n```\n\n----------------------------------------\n\nTITLE: Filtering Assets by Size in Rspeedy\nDESCRIPTION: Example demonstrating how to include only assets larger than 10kB in the size output using the include filter.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/rspeedy/rspeedy.performance.printfilesize.md#2025-04-17_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineConfig } from '@lynx-js/rspeedy'\n\nexport default defineConfig({\n  performance: {\n    printFileSize: {\n      include: (asset) => asset.size > 10 * 1000,\n    }\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Defining CssLoader.modules Property in TypeScript\nDESCRIPTION: TypeScript signature for the CssLoader.modules property. It can be a boolean, a CssLoaderModules object, or undefined.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/rspeedy/rspeedy.cssloader.modules.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nmodules?: boolean | CssLoaderModules | undefined;\n```\n\n----------------------------------------\n\nTITLE: Defining transformToDefaultImport Property in TypeScript\nDESCRIPTION: This snippet shows the TypeScript signature for the transformToDefaultImport property. It is an optional boolean property that determines whether to convert import statements to default imports.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/rspeedy/rspeedy.transformimport.transformtodefaultimport.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntransformToDefaultImport?: boolean | undefined;\n```\n\n----------------------------------------\n\nTITLE: Enabling Generic Resource Fetcher in Android\nDESCRIPTION: Code showing how to enable generic resource fetcher capability along with template resource fetcher in Android.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/lynx-native-api/resource-fetcher/TemplateResourceFetcher.mdx#2025-04-17_snippet_2\n\nLANGUAGE: java\nCODE:\n```\nLynxViewBuilder builder = new LynxViewBuilder();\nbuilder.setTemplateResourceFetcher(new ExampleTemplateResourceFetcher());\nbuilder.setEnableGenericResourceFetcher(LynxBooleanOption.TRUE);\n```\n\n----------------------------------------\n\nTITLE: Adding Lynx DevTool Dependencies for iOS\nDESCRIPTION: This code snippet shows how to add LynxDevTool and LynxService Devtool subspecs to the Podfile for iOS integration. It specifies the version and necessary components.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/guide/start/integrate-lynx-devtool.mdx#2025-04-17_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\n# Ensure Lynx DevTool version matches the Lynx version when integrating\ntarget 'YourTarget' do\n  pod 'LynxService', '3.2.0-rc.0', :subspecs => [\n      'Devtool',\n  ]\n  pod 'LynxDevtool', '3.2.0-rc.0'\nend\n```\n\n----------------------------------------\n\nTITLE: Defining CSS Module Local Convention Types in TypeScript\nDESCRIPTION: Type definition specifying the available options for CSS module class name export conventions. Supports various naming conventions including as-is, camelCase (with and without original), and dash conversion options.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/rspeedy/rspeedy.cssmodulelocalsconvention.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport type CssModuleLocalsConvention = 'asIs' | 'camelCase' | 'camelCaseOnly' | 'dashes' | 'dashesOnly';\n```\n\n----------------------------------------\n\nTITLE: Defining ChunkSplitBySize Interface in TypeScript\nDESCRIPTION: This code snippet defines the ChunkSplitBySize interface which is used to configure the chunk splitting strategy for Performance.chunkSplit. It includes properties for controlling the minimum and maximum chunk sizes, as well as options for custom configuration.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/api/rspeedy/rspeedy.chunksplitbysize.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface ChunkSplitBySize \n```\n\n----------------------------------------\n\nTITLE: JavaScript RSpeedy Output Configuration Example\nDESCRIPTION: Example showing how to configure the distPath in RSpeedy config to use a custom output directory instead of the default 'dist' folder.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/api/rspeedy/rspeedy.output.distpath.md#2025-04-17_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineConfig } from '@lynx-js/rspeedy'\nexport default defineConfig({\n  output: {\n    distPath: {\n      root: './output',\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Defining __lynx_timing_flag Property in TypeScript\nDESCRIPTION: Adds a flag to monitor the performance of the lynx pipeline the element participates in. Generates a PipelineEntry event when the element completes its final painting phase.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/elements/built-in/view.mdx#2025-04-17_snippet_34\n\nLANGUAGE: typescript\nCODE:\n```\n__lynx_timing_flag?: string;\n```\n\n----------------------------------------\n\nTITLE: TypeScript CSS Loader Property Definition\nDESCRIPTION: TypeScript type definition for the cssLoader property that controls css-loader options. It can be either a CssLoader object or undefined.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/rspeedy/rspeedy.tools.cssloader.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ncssLoader?: CssLoader | undefined;\n```\n\n----------------------------------------\n\nTITLE: Defining Sticky Offset Attribute in TSX\nDESCRIPTION: Defines the sticky-offset attribute that specifies the offset distance from the top or bottom of <list> for sticky positioning, in px.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/elements/built-in/list.mdx#2025-04-17_snippet_10\n\nLANGUAGE: tsx\nCODE:\n```\n// DefaultValue: 0\nsticky-offset?: number\n```\n\n----------------------------------------\n\nTITLE: Excluding Third-party Dependencies in JavaScript\nDESCRIPTION: An example demonstrating how to use Source.exclude to exclude specific third-party dependencies from compilation in a Rsbuild configuration.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/rspeedy/rspeedy.source.exclude.md#2025-04-17_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineConfig } from '@lynx-js/rspeedy'\nimport path from 'node:path'\nimport { createRequire } from 'node:module'\n\nconst require = createRequire(import.meta.url)\n\nexport default defineConfig({\n  source: {\n    exclude: [\n      // Exclude specific package\n      path.dirname(require.resolve('lodash')),\n      // Exclude using regex pattern\n      /node_modules[\\\\/]lodash-es[\\\\/]/,\n    ],\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Defining cwd Property in LoadConfigOptions Interface in TypeScript\nDESCRIPTION: The cwd property definition for the LoadConfigOptions interface. It's an optional string property that specifies the current working directory for configuration loading operations.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/api/rspeedy/rspeedy.loadconfigoptions.cwd.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ncwd?: string | undefined;\n```\n\n----------------------------------------\n\nTITLE: Using Entry Component in the Go Component\nDESCRIPTION: Demonstrates the use of an entry component directory with the Go component via the entry prop.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/src/components/go/README.md#2025-04-17_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\n<Go\n  example=\"animation\"\n  defaultFile=\"src/transition_animation/index.tsx\"\n  highlight=\"{1,3-5}\"\n  entry=\"src/transition_animation\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Context Parameter Type Definition in TypeScript\nDESCRIPTION: Type definition for the optional context parameter which specifies the front-end custom component or card instance to be used as the context for the listener.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/lynx-api/lynx/lynx-before-publish-event/before-publish-event-add.mdx#2025-04-17_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\ncontext?: BaseInstance\n```\n\n----------------------------------------\n\nTITLE: PureComponent Lifecycle Methods\nDESCRIPTION: Definitions for PureComponent's lifecycle methods, including both current and deprecated methods.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/react/Class.PureComponent.mdx#2025-04-17_snippet_3\n\nLANGUAGE: TypeScript\nCODE:\n```\ncomponentDidMount?(): void;\nshouldComponentUpdate?(nextProps: Readonly<P>, nextState: Readonly<S>, nextContext: any): boolean;\ncomponentDidUpdate?(prevProps: Readonly<P>, prevState: Readonly<S>, snapshot?: SS): void;\ncomponentWillUnmount?(): void;\ncomponentDidCatch?(error: Error, errorInfo: ErrorInfo): void;\n\n// Deprecated\nUNSAFE_componentWillMount?(): void;\nUNSAFE_componentWillReceiveProps?(nextProps: Readonly<P>, nextContext: any): void;\nUNSAFE_componentWillUpdate?(nextProps: Readonly<P>, nextState: Readonly<S>, nextContext: any): void;\n```\n\n----------------------------------------\n\nTITLE: CSS Border Top Right Radius Formal Syntax\nDESCRIPTION: Formal syntax definition for the border-top-right-radius property, showing the accepted length-percentage values and their constraints.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/css/properties/border-top-right-radius.mdx#2025-04-17_snippet_1\n\nLANGUAGE: css\nCODE:\n```\nborder-top-right-radius =\n  <length-percentage [0,∞]>{1,2}\n\n<length-percentage> =\n  <length>      |\n  <percentage>\n```\n\n----------------------------------------\n\nTITLE: Importing and Using the Go Component in Lynx\nDESCRIPTION: This snippet demonstrates how to import and use the Go component from the Lynx framework to showcase a CSS API example for border-bottom-width.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/css/properties/border-bottom-width.mdx#2025-04-17_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Go } from '@lynx';\n\n<Go\n  example=\"css-api\"\n  defaultFile=\"src/border-bottom-width/App.tsx\"\n  img=\"https://lf-lynx.tiktok-cdns.com/obj/lynx-artifacts-oss-sg/lynx-website/assets/doc/css/border-bottom-width.jpg\"\n  defaultEntryFile=\"dist/border-bottom-width.lynx.bundle\"\n  entry=\"src/border-bottom-width\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Including TOC Component\nDESCRIPTION: Commented code showing the inclusion of a Table of Contents component in the markdown document.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/guide/glossary.mdx#2025-04-17_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n{/* <Toc/> */}\n```\n\n----------------------------------------\n\nTITLE: Defining ExposedAPI.config Property in TypeScript\nDESCRIPTION: This code snippet defines the 'config' property of the ExposedAPI interface. It specifies that the property is of type Config, representing the user configuration.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/rspeedy/rspeedy.exposedapi.config.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconfig: Config;\n```\n\n----------------------------------------\n\nTITLE: MainThreadRef Current Property Accessor\nDESCRIPTION: Getter and setter definitions for the current property of MainThreadRef, inherited from WorkletRef, allowing access to the stored value of type T.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/api/react/Class.MainThreadRef.mdx#2025-04-17_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nget current(): T\nset current(_: T): void\n```\n\n----------------------------------------\n\nTITLE: Formal Border Width CSS Syntax Definition\nDESCRIPTION: Formal syntax definition showing the border-width property accepts 1-4 line-width values, where line-width can be a length value or keywords thin, medium, or thick.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/css/properties/border-width.mdx#2025-04-17_snippet_1\n\nLANGUAGE: css\nCODE:\n```\nborder-width = [ <line-width> ]{1,4}\n<line-width> = <length> | thin | medium | thick\n```\n\n----------------------------------------\n\nTITLE: Defining Config.tools Property in TypeScript\nDESCRIPTION: This code snippet shows the TypeScript signature for the 'tools' property of the Config interface. It is an optional property that accepts a Tools object or undefined.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/rspeedy/rspeedy.config.tools.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntools?: Tools | undefined;\n```\n\n----------------------------------------\n\nTITLE: Defining ListItemSnapAlignment Interface in TypeScript\nDESCRIPTION: Defines the interface for ListItemSnapAlignment used in the item-snap attribute of the <list> component. It includes factor and offset properties for controlling paginated scrolling effect.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/elements/built-in/list.mdx#2025-04-17_snippet_19\n\nLANGUAGE: tsx\nCODE:\n```\n// defaultValue: undefined\n'item-snap'?: ListItemSnapAlignment;\n\ninterface ListItemSnapAlignment {\n  factor: number;\n  offset: number;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Rsdoctor in Rspeedy\nDESCRIPTION: An example of how to configure the rsdoctor tool in a Rspeedy configuration file. This example shows setting the disableClientServer option to true.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/api/rspeedy/rspeedy.tools.rsdoctor.md#2025-04-17_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineConfig } from '@lynx-js/rspeedy'\n\nexport default defineConfig({\n  tools: {\n    rsdoctor: {\n      disableClientServer: true,\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: CSS right Property Formal Syntax\nDESCRIPTION: The formal syntax specification for the CSS 'right' property, showing the allowed values and their structure. This defines the valid formats for the property according to CSS standards.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/css/properties/right.mdx#2025-04-17_snippet_1\n\nLANGUAGE: css\nCODE:\n```\nright =\n  auto                 |\n  <length-percentage>  |\n\n<length-percentage> =\n  <length>      |\n  <percentage>\n```\n\n----------------------------------------\n\nTITLE: Optional Data Processors Property Definition in TypeScript\nDESCRIPTION: Defines an optional property 'dataProcessors' as a record of string keys mapping to Function values. This is intended to be used with lynx.registerDataProcessors for custom data processing implementations.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/react/Interface.DataProcessorDefinition.mdx#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\noptional dataProcessors: Record<string, Function>;\n```\n\n----------------------------------------\n\nTITLE: Defining Upper Threshold Item Count Attribute in TSX\nDESCRIPTION: Defines the upper-threshold-item-count attribute that triggers a scrolltoupper event when the number of remaining displayable child nodes at the top is below the threshold.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/elements/built-in/list.mdx#2025-04-17_snippet_16\n\nLANGUAGE: tsx\nCODE:\n```\n// DefaultValue: 0\nupper-threshold-item-count?: number\n```\n\n----------------------------------------\n\nTITLE: Defining diffVdomStart property in FrameworkPipelineTiming interface\nDESCRIPTION: Declares the timestamp property marking when the framework starts VDom Diff on the background thread, stored as a floating-point Unix timestamp in milliseconds.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/lynx-api/performance-api/framework-pipeline-timing.mdx#2025-04-17_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\ndiffVdomStart: number;\n```\n\n----------------------------------------\n\nTITLE: Defining TypeScript Interface for assetPrefix Property\nDESCRIPTION: TypeScript interface definition showing the assetPrefix property type as an optional string.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/rspeedy/rspeedy.output.assetprefix.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nassetPrefix?: string | undefined;\n```\n\n----------------------------------------\n\nTITLE: Configuring Legacy Decorator Version in JavaScript\nDESCRIPTION: Example of using defineConfig to set the decorator version to 'legacy', which corresponds to TypeScript's experimentalDecorators: true option.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/rspeedy/rspeedy.decorators.version.md#2025-04-17_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineConfig } from '@lynx-js/rspeedy'\n\nexport default defineConfig({\n  source: {\n    decorators: { version: 'legacy' },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Import Transform Example - Output\nDESCRIPTION: Example showing the transformed import statement using the libraryDirectory property with default value 'lib'.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/api/rspeedy/rspeedy.transformimport.librarydirectory.md#2025-04-17_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport Button from 'foo/lib/button'\n```\n\n----------------------------------------\n\nTITLE: Defining Decorator Version Type in TypeScript\nDESCRIPTION: TypeScript type definition for the decorator version property, specifying the allowed values of 'legacy' or '2022-03'.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/api/rspeedy/rspeedy.decorators.version.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nversion?: 'legacy' | '2022-03';\n```\n\n----------------------------------------\n\nTITLE: Rectangle Object Structure\nDESCRIPTION: The structure of the rectangle objects (intersectionRect, boundingClientRect, relativeRect) in the callback response, defining the coordinate system relative to LynxView.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/lynx-api/intersection-observer/intersection-observer-observe.mdx#2025-04-17_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n{\n     \"left\": number | 0, // left boundary of the intersection area\n     \"right\": number | 0, // Right boundary of the intersection area\n     \"top\": number | 0, // The upper boundary of the intersection area\n     \"bottom\": number | 0, // The lower boundary of the intersection area\n}\n```\n\n----------------------------------------\n\nTITLE: Defining AssetsInclude Property Signature in TypeScript\nDESCRIPTION: TypeScript signature for the assetsInclude property of the Source object. It can be either a Rspack.RuleSetCondition or undefined.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/rspeedy/rspeedy.source.assetsinclude.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nassetsInclude?: Rspack.RuleSetCondition | undefined;\n```\n\n----------------------------------------\n\nTITLE: Defining Accessibility Elements Hidden Attribute in TypeScript\nDESCRIPTION: Defines the 'accessibility-elements-hidden' attribute that marks the current node and all its child nodes as non-accessible nodes.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/elements/built-in/view.mdx#2025-04-17_snippet_19\n\nLANGUAGE: typescript\nCODE:\n```\n// DefaultValue: false\naccessibility-elements-hidden?: boolean\n```\n\n----------------------------------------\n\nTITLE: Defining containerInitEnd Property in TypeScript\nDESCRIPTION: Defines the containerInitEnd property that stores the container initialization completion timestamp in milliseconds.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/lynx-api/performance-api/performance-entry/init-container-entry.mdx#2025-04-17_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\ncontainerInitEnd: number;\n```\n\n----------------------------------------\n\nTITLE: Importing APITable Component for CSS Length Compatibility Data\nDESCRIPTION: This snippet imports and uses the APITable component to display compatibility information for the CSS length data type. The component takes a query parameter to fetch specific data about CSS length units.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/css/data-type/length.mdx#2025-04-17_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { APITable } from '@lynx';\n\n<APITable query=\"css/data-type/length\" />\n```\n\n----------------------------------------\n\nTITLE: Defining List Type Attribute in TSX\nDESCRIPTION: Specifies the allowed values for the required list-type attribute which controls the layout type of the <list> component and must be used with span-count.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/elements/built-in/list.mdx#2025-04-17_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nlist-type: 'single' | 'flow' | 'waterfall'\n```\n\n----------------------------------------\n\nTITLE: Defining Output.copy Type in TypeScript\nDESCRIPTION: TypeScript type definition for the Output.copy property that specifies the structure for copying files using Rspack CopyPlugin options.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/rspeedy/rspeedy.output.copy.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ncopy?: Rspack.CopyRspackPluginOptions | Rspack.CopyRspackPluginOptions['patterns'] | undefined;\n```\n\n----------------------------------------\n\nTITLE: Defining TypeScript Signature for ChunkSplitCustom.splitChunks\nDESCRIPTION: This code snippet shows the TypeScript signature for the splitChunks property of the ChunkSplitCustom interface. It defines the type as an optional property that matches the splitChunks configuration from Rspack.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/rspeedy/rspeedy.chunksplitcustom.splitchunks.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nsplitChunks?: Rspack.Configuration extends {\n        optimization?: {\n            splitChunks?: infer P;\n        } | undefined;\n    } ? P : never;\n```\n\n----------------------------------------\n\nTITLE: Defining Filename.bundle Property Signature in TypeScript\nDESCRIPTION: Defines the TypeScript signature for the 'bundle' property of the Filename interface. It is an optional string property.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/rspeedy/rspeedy.filename.bundle.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nbundle?: string | undefined;\n```\n\n----------------------------------------\n\nTITLE: Project Navigation Command\nDESCRIPTION: Command to navigate into the newly created project directory\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/guide/start/quick-start.mdx#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncd <project-name>\n```\n\n----------------------------------------\n\nTITLE: Defining enableAccessibilityElement Property in TypeScript\nDESCRIPTION: This code snippet shows the TypeScript signature for the enableAccessibilityElement property. It is an optional boolean property that sets the default value of 'accessibility-element' for all <view /> elements.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/rspeedy/react-rsbuild-plugin.pluginreactlynxoptions.enableaccessibilityelement.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nenableAccessibilityElement?: boolean;\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Chunk Splitting in RSpeedy\nDESCRIPTION: Example showing how to configure custom chunk splitting in RSpeedy to separate React-related dependencies into a separate chunk named 'lib-react'.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/api/rspeedy/rspeedy.chunksplit.override.md#2025-04-17_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineConfig } from '@lynx-js/rspeedy'\n\nexport default defineConfig({\n  performance: {\n    chunkSplit: {\n      strategy: 'split-by-experience',\n      override: {\n        cacheGroups: {\n          react: {\n            test: /node_modules[\\/](@lynx-js[\\/]react|react-router)[\\/]/,\n            name: 'lib-react',\n            chunks: 'all',\n          },\n        },\n      },\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Overflow Formal Syntax\nDESCRIPTION: Shows the formal syntax definition for the overflow property, indicating it accepts either hidden or visible as valid values.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/css/properties/overflow.mdx#2025-04-17_snippet_1\n\nLANGUAGE: css\nCODE:\n```\nhidden | visible\n```\n\n----------------------------------------\n\nTITLE: Defining User Interaction Enabled Attribute in TypeScript\nDESCRIPTION: Defines the 'user-interaction-enabled' attribute that specifies whether the target node and its child nodes can respond to Lynx touch events.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/elements/built-in/view.mdx#2025-04-17_snippet_24\n\nLANGUAGE: typescript\nCODE:\n```\n// DefaultValue: true\nuser-interaction-enabled?: boolean\n```\n\n----------------------------------------\n\nTITLE: Defining cleanDistPath Type in TypeScript\nDESCRIPTION: TypeScript type definition for the cleanDistPath property that specifies whether the output directory should be cleaned before building.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/api/rspeedy/rspeedy.output.cleandistpath.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ncleanDistPath?: boolean | undefined;\n```\n\n----------------------------------------\n\nTITLE: Disabling Total Size Output in Rspeedy\nDESCRIPTION: Configuration example demonstrating how to disable only the total size output while keeping other file size information.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/rspeedy/rspeedy.performance.printfilesize.md#2025-04-17_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineConfig } from '@lynx-js/rspeedy'\n\nexport default defineConfig({\n  performance: {\n    printFileSize: {\n      total: false,\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Ignoring Modules with False Alias Value\nDESCRIPTION: Example of using alias with false values to completely ignore specific modules during compilation. This can be useful for excluding problematic dependencies.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/api/rspeedy/rspeedy.source.alias.md#2025-04-17_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineConfig } from '@lynx-js/rspeedy'\nexport default defineConfig({\n  source: {\n    alias: {\n      'ignored-module': false,\n      './ignored-module': false,\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Customizing Hash Format in rspeedy Configuration\nDESCRIPTION: Example demonstrating how to modify the hash format used in filenames. This configuration specifies 'fullhash:16' which uses the fullhash format with a length of 16 characters.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/api/rspeedy/rspeedy.output.filenamehash.md#2025-04-17_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineConfig } from '@lynx-js/rspeedy'\n\nexport default defineConfig({\n  output: {\n    filenameHash: 'fullhash:16',\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Bundle Loader in Java\nDESCRIPTION: Java implementation of a Bundle Loader that extends AbsTemplateProvider. This loader reads the Bundle content from the application's assets directory and provides it to the Lynx Engine.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/guide/start/fragments/android/integrating-lynx-with-existing-app-android.mdx#2025-04-17_snippet_8\n\nLANGUAGE: java\nCODE:\n```\nimport android.content.Context;\nimport com.lynx.tasm.provider.AbsTemplateProvider;\nimport java.io.ByteArrayOutputStream;\nimport java.io.IOException;\nimport java.io.InputStream;\n\npublic class DemoTemplateProvider extends AbsTemplateProvider {\n    private Context mContext;\n\n    DemoTemplateProvider(Context context) {\n        this.mContext = context.getApplicationContext();\n    }\n\n    @Override\n    public void loadTemplate(String uri, Callback callback) {\n        new Thread(new Runnable() {\n            @Override\n            public void run() {\n                try (InputStream inputStream = mContext.getAssets().open(uri);\n                     ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream()) {\n                    byte[] buffer = new byte[1024];\n                    int length;\n                    while ((length = inputStream.read(buffer)) != -1) {\n                        byteArrayOutputStream.write(buffer, 0, length);\n                    }\n                    callback.onSuccess(byteArrayOutputStream.toByteArray());\n                } catch (IOException e) {\n                    callback.onFailed(e.getMessage());\n                }\n            }\n        }).start();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Modifying CSS Variables with JavaScript\nDESCRIPTION: Shows how to modify CSS variables using JavaScript API methods.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/api/css/properties/css-variable.mdx#2025-04-17_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n// 一次性修改一个 CSS 变量\nlynx.getElementById('test').setProperty('--main-height', '300px');\n\n// 批次修改css变量\nlynx.getElementById('test').setProperty({\n  '--main-height1': '300px',\n  '--main-height2': '400px',\n});\n```\n\n----------------------------------------\n\nTITLE: Incorrect Usage of NodesRef in JavaScript\nDESCRIPTION: Example showing why direct inspection of NodesRef object doesn't work because SelectorQuery only saves query parameters without executing immediately.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/lynx-api/selector-query/selector-query-select.mdx#2025-04-17_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nlet nodesRef = lynx.createSelectorQuery().select('#the-id');\nconsole.log(nodesRef); // always returning a valid NodesRef object\n```\n\n----------------------------------------\n\nTITLE: CSS Padding-Top Formal Syntax Definition\nDESCRIPTION: Formal syntax definition for the padding-top property, showing valid value types including length and percentage measurements with non-negative constraints.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/css/properties/padding-top.mdx#2025-04-17_snippet_1\n\nLANGUAGE: css\nCODE:\n```\npadding-top =\n  <length-percentage [0,∞]>\n\n<length-percentage> =\n  <length>      |\n  <percentage>\n```\n\n----------------------------------------\n\nTITLE: Using bundlerChain in rspeedy configuration\nDESCRIPTION: Example showing how to use the bundlerChain property in a rspeedy configuration. This demonstrates setting the fullySpecified option to true in the Rspack resolve configuration using the chain API.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/api/rspeedy/rspeedy.tools.bundlerchain.md#2025-04-17_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineConfig } from '@lynx-js/rspeedy'\n\nexport default defineConfig({\n  tools: {\n    bundlerChain(chain) {\n      chain.resolve.fullySpecified(true)\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Basic CSS Animation Delay Syntax Examples\nDESCRIPTION: Examples of how to set animation delay with single and multiple values in CSS. The property accepts time values and can be specified for individual animations when using multiple animations.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/css/properties/animation-delay.mdx#2025-04-17_snippet_0\n\nLANGUAGE: css\nCODE:\n```\nanimation-delay: 3s;\nanimation-delay: 2s, 4ms;\n```\n\n----------------------------------------\n\nTITLE: useReducer Implementation with Reducer Without Action\nDESCRIPTION: TypeScript definition for useReducer with a reducer that doesn't take an action parameter. Used for simple state updates without action objects.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/api/react/Function.useReducer.mdx#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction useReducer<R, I>(\n   reducer: R,\n   initializerArg: I,\n   initializer: (arg: I) => ReducerStateWithoutAction<R>): [ReducerStateWithoutAction<R>, DispatchWithoutAction]\n```\n\n----------------------------------------\n\nTITLE: Importing and Rendering AdvancedTutorial Component in React\nDESCRIPTION: This snippet imports an AdvancedTutorial component from a payment-details MDX file and renders it. It demonstrates the use of MDX for content and React for rendering.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/guide/start/tutorial-payment-details.mdx#2025-04-17_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport AdvancedTutorial from '../../react/payment-details.mdx';\n\n<AdvancedTutorial />\n```\n\n----------------------------------------\n\nTITLE: Element Equality Function Signature\nDESCRIPTION: Function signature showing the parameters and return type for comparing two Element objects\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/engine/element-api/__ElementIsEqual.mdx#2025-04-17_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n__ElementIsEqual(left: Element, right: Element) : bool;\n```\n\n----------------------------------------\n\nTITLE: Defining sourceMap Property in Output Interface for TypeScript\nDESCRIPTION: This code snippet defines the sourceMap property in the Output interface. It can be a boolean, a SourceMap object, or undefined, allowing for flexible configuration of source map generation.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/rspeedy/rspeedy.output.sourcemap.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nsourceMap?: boolean | SourceMap | undefined;\n```\n\n----------------------------------------\n\nTITLE: Defining name Property for InitLynxviewEntry in TypeScript\nDESCRIPTION: This snippet shows the type definition for the name property of InitLynxviewEntry, which is always set to 'lynxview'.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/api/lynx-api/performance-api/performance-entry/init-lynxview-entry.mdx#2025-04-17_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nname: string;\n```\n\n----------------------------------------\n\nTITLE: Formal Syntax for border-left-style CSS Property\nDESCRIPTION: The formal syntax definition for the border-left-style CSS property, showing the available line style values that can be used.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/css/properties/border-left-style.mdx#2025-04-17_snippet_1\n\nLANGUAGE: css\nCODE:\n```\n<line-style>\nwhere\n<line-style> = none | hidden | dotted | dashed | solid | double | groove | ridge | inset | outset\n```\n\n----------------------------------------\n\nTITLE: Defining relativeToScreen() Method Signature in TypeScript\nDESCRIPTION: The TypeScript definition for the relativeToScreen() method, which accepts an optional margins parameter and returns an IntersectionObserver instance.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/lynx-api/intersection-observer/intersection-observer-relative-to-screen.mdx#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nrelativeToScreen(\n   margins ? margins : {left: 0, right: 0, top: 0, bottom: 0}\n): IntersectionObserver;\n```\n\n----------------------------------------\n\nTITLE: Component Constructor Definition\nDESCRIPTION: Constructor definition for React Component class with props parameter.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/api/react/Class.Component.mdx#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nnew Component<P, S, SS>(props: P): Component<P, S, SS>\n```\n\n----------------------------------------\n\nTITLE: Defining PluginQRCodeOptions Interface in TypeScript\nDESCRIPTION: TypeScript interface definition for QRCode plugin options. Contains an optional schema property that accepts a CustomizedSchemaFn type for customizing the generated schema.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/rspeedy/qrcode-rsbuild-plugin.pluginqrcodeoptions.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface PluginQRCodeOptions \n```\n\n----------------------------------------\n\nTITLE: Defining event-through Property in TypeScript\nDESCRIPTION: Specifies whether touch events from the platform layer are distributed to Lynx when touching the target node. Supports inheritance and defaults to false.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/elements/built-in/view.mdx#2025-04-17_snippet_29\n\nLANGUAGE: typescript\nCODE:\n```\n// DefaultValue: false\nevent-through?: boolean\n```\n\n----------------------------------------\n\nTITLE: Defining the import Property in EntryDescription Interface in TypeScript\nDESCRIPTION: TypeScript signature for the import property which specifies the path to the entry module(s). If not provided, it defaults to 'src/index.js'.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/api/rspeedy/rspeedy.entrydescription.import.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport?: string | string[] | undefined;\n```\n\n----------------------------------------\n\nTITLE: Accessing the resolveStart Property in PipelineEntry (TypeScript)\nDESCRIPTION: The resolveStart property provides the timestamp for the start of calculating Element styles as a floating-point Unix timestamp in milliseconds.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/lynx-api/performance-api/performance-entry/pipeline-entry.mdx#2025-04-17_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nresolveStart: number;\n```\n\n----------------------------------------\n\nTITLE: Development Commands in Bash\nDESCRIPTION: Bash commands for linting, building and testing the package during development.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/packages/lynx-compat-data/README.md#2025-04-17_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\npnpm run lint\npnpm run build\npnpm run test\n```\n\n----------------------------------------\n\nTITLE: Defining Lynx Blog Page Structure in Markdown\nDESCRIPTION: This snippet defines the structure of the Lynx blog page using Markdown. It includes a title, sidebar configuration, main heading, and introductory text. It also lists two blog posts with their titles, dates, and authors.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/blog/index.mdx#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntitle: Lynx Blog\nsidebar: false\n---\n\n# Lynx Blog\n\nCheck here for the latest articles and release announcements about Lynx.\n\n## [Lynx Roadmap 2025](/blog/lynx-open-source-roadmap-2025)\n\n_March 20th, 2025 by [Shouqun Liu](https://github.com/Shouqun)_\n\nTwo weeks ago, we launched Lynx as an open-source project and have since gathered valuable insights and feedback from the community. Thank you for engaging with Lynx, even as we take our first steps as a new member of the open-source cross-platform ecosystem. Today, I'm pleased to share the 2025 roadmap of Lynx.\n\n## [Lynx: Unlock Native for More](/blog/lynx-unlock-native-for-more)\n\n_March 5th, 2025 by [Xuan Huang](https://x.com/huxpro), representing [The Lynx Team](https://x.com/lynxjs_org)_\n\nToday, we're excited to introduce Lynx, a family of technologies empowering developers to use their existing web skills to create truly native UIs for both mobile and web from a single codebase...\n```\n\n----------------------------------------\n\nTITLE: Version Compatibility Flow Diagram\nDESCRIPTION: Mermaid diagram illustrating version compatibility relationships between Bundle and Lynx Engine versions, showing supported and unsupported version combinations.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/guide/compatibility.mdx#2025-04-17_snippet_2\n\nLANGUAGE: mermaid\nCODE:\n```\ngraph TB\n    subgraph Bundle[\"🎯 Bundle\"]\n        B10[\"Engine Version 3.3\"]\n    end\n    subgraph Engine[\"⚙️ Lynx Engine\"]\n        E12[\"Version 3.5\"]\n        E11[\"Version 3.4\"]\n        E10[\"Version 3.3\"]\n        E09[\"Version 3.2\"]\n    end\n    B10 -.->|❌ Not Supported| E09\n    B10 ==>|✅ Can Run| E10\n    B10 ==>|✅ Can Run| E11\n    B10 ==>|✅ Can Run| E12\n    %% Node styles\n    style E12 fill:#2b5a83,stroke:#4a90e2,stroke-width:3px,rx:10px\n    style E11 fill:#2b5a83,stroke:#4a90e2,stroke-width:3px,rx:10px\n    style E10 fill:#2b5a83,stroke:#4a90e2,stroke-width:3px,rx:10px\n    style E09 fill:#2b5a83,stroke:#4a90e2,stroke-width:2px,rx:10px,stroke-dasharray:5,5\n    style B10 fill:#2d5a1e,stroke:#7ed321,stroke-width:3px,rx:10px\n    %% Subgraph styles\n    style Bundle fill:transparent,stroke:#7ed321,stroke-width:2px,rx:10px\n    style Engine fill:transparent,stroke:#4a90e2,stroke-width:2px,rx:10px\n    %% Default styles\n    classDef default fill:#23272f,color:#ccc,font-family:system-ui\n    %% Connection line label styles\n    linkStyle default stroke-width:2px\n```\n\n----------------------------------------\n\nTITLE: Converting event handlers from React to ReactLynx\nDESCRIPTION: Illustrates the event naming differences between React web and ReactLynx. ReactLynx uses different event binding prefixes like 'bind' and 'catch' for event handling.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/react/introduction.mdx#2025-04-17_snippet_3\n\nLANGUAGE: diff\nCODE:\n```\n- <button onTouchStart={...} />\n+ <view bindtouchstart={...} catchtouchstart={...}/>\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic File Watching in JavaScript\nDESCRIPTION: This example demonstrates how to configure basic file watching in the rspeedy configuration. It specifies paths to watch for changes in the 'src' and 'public' directories.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/rspeedy/rspeedy.dev.watchfiles.md#2025-04-17_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineConfig } from '@lynx-js/rspeedy'\n\nexport default defineConfig({\n  dev: {\n    watchFiles: {\n      paths: ['src/**', 'public/**'],\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Using useLynxGlobalEventListener Hook Definition in TypeScript\nDESCRIPTION: Type definition for the useLynxGlobalEventListener hook that enables adding listeners to global Lynx events. It accepts an event name string and a listener function.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/api/react/Function.useLynxGlobalEventListener.mdx#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction useLynxGlobalEventListener<T>(eventName: string, listener: T): void\n```\n\n----------------------------------------\n\nTITLE: Declaring defineConfig Function in TypeScript\nDESCRIPTION: The TypeScript signature for the defineConfig helper function that enables intellisense. It accepts a Config object as input and returns the same Config object.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/api/rspeedy/rspeedy.defineconfig.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare function defineConfig(config: Config): Config;\n```\n\n----------------------------------------\n\nTITLE: Defining ScrollStateChangeEvent Interface in TypeScript\nDESCRIPTION: Defines the interface for ScrollStateChangeEvent, used in the scrollstatechange event of the <list> component. It includes details about the current scroll state.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/elements/built-in/list.mdx#2025-04-17_snippet_28\n\nLANGUAGE: tsx\nCODE:\n```\nbindscrollstatechange?: EventHandler<ListScrollStateChangeEvent>;\n\ninterface ScrollStateChangeEvent extends CustomEvent {\n  detail: {\n    // The scroll state of this slide, value description\n    //   1 - Stationary\n    //   2 - Dragging\n    //   3 - Inertial scrolling\n    //   4 - Smooth animation scrolling\n    state: number;\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Defining strictPort Property in Rspeedy Server Configuration (TypeScript)\nDESCRIPTION: The strictPort property is an optional boolean that determines the behavior when a specified port is occupied. When false or undefined, Rspeedy will automatically increment the port number until an available port is found. When set to true, Rspeedy will throw an exception if the specified port is occupied.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/rspeedy/rspeedy.server.strictport.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nstrictPort?: boolean | undefined;\n```\n\n----------------------------------------\n\nTITLE: Defining Accessibility Elements Attribute in TypeScript\nDESCRIPTION: Defines the 'accessibility-elements' attribute that customizes the focus order of child nodes in accessibility mode.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/elements/built-in/view.mdx#2025-04-17_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\n// DefaultValue: undefined\naccessibility-elements?: string\n```\n\n----------------------------------------\n\nTITLE: CSS padding-right Formal Syntax Definition\nDESCRIPTION: The formal syntax definition for the padding-right CSS property, showing it accepts length or percentage values that must be non-negative.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/css/properties/padding-right.mdx#2025-04-17_snippet_1\n\nLANGUAGE: css\nCODE:\n```\npadding-right =\n  <length-percentage [0,∞]>\n\n<length-percentage> =\n  <length>      |\n  <percentage>\n```\n\n----------------------------------------\n\nTITLE: Formal CSS Animation Duration Syntax\nDESCRIPTION: The formal syntax definition for the animation-duration property, showing the time value parameter and default value.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/css/properties/animation-duration.mdx#2025-04-17_snippet_1\n\nLANGUAGE: css\nCODE:\n```\n/* default value: 0s */\nanimation-duration: <time>;\n```\n\n----------------------------------------\n\nTITLE: Defining Data Attributes for View Element\nDESCRIPTION: Illustrates how to define data-* attributes for the <view> element to store additional information.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/api/elements/built-in/view.mdx#2025-04-17_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ndata-*?: any;\n```\n\n----------------------------------------\n\nTITLE: Defining Server Headers Property in TypeScript\nDESCRIPTION: TypeScript signature for the 'headers' property of the Server configuration. It specifies that headers can be a Record of string keys with string or string array values, or undefined.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/rspeedy/rspeedy.server.headers.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nheaders?: Record<string, string | string[]> | undefined;\n```\n\n----------------------------------------\n\nTITLE: Config.environments Property Definition in TypeScript\nDESCRIPTION: The TypeScript signature for the environments property in the Config interface, which allows setting the output environment configurations.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/api/rspeedy/rspeedy.config.environments.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nenvironments?: RsbuildConfig['environments'] | undefined;\n```\n\n----------------------------------------\n\nTITLE: Defining ExposedAPI.version Property in TypeScript\nDESCRIPTION: This code snippet defines the 'version' property of the ExposedAPI interface. It represents the version of Rspeedy and is of type string.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/rspeedy/rspeedy.exposedapi.version.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nversion: string;\n```\n\n----------------------------------------\n\nTITLE: Defining Formal CSS Syntax for animation-fill-mode\nDESCRIPTION: This snippet shows the formal CSS syntax for the animation-fill-mode property, indicating its possible values.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/css/properties/animation-fill-mode.mdx#2025-04-17_snippet_1\n\nLANGUAGE: css\nCODE:\n```\n/*none*/\nanimation-fill-mode: none | forwards | backwards | both;\n```\n\n----------------------------------------\n\nTITLE: Defining CssLoaderModules Interface in TypeScript\nDESCRIPTION: TypeScript interface definition for CssLoaderModules that specifies configuration options for CSS Modules functionality. Includes options for automatic enabling, export conventions, class name formatting, and named exports.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/rspeedy/rspeedy.cssloadermodules.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface CssLoaderModules \n```\n\n----------------------------------------\n\nTITLE: Defining packChangesEnd property in FrameworkPipelineTiming interface\nDESCRIPTION: Declares the timestamp property marking when the framework ends serializing change information on the background thread, stored as a floating-point Unix timestamp in milliseconds.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/lynx-api/performance-api/framework-pipeline-timing.mdx#2025-04-17_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\npackChangesEnd: number;\n```\n\n----------------------------------------\n\nTITLE: Defining A11y ID Attribute in TypeScript\nDESCRIPTION: Defines the 'a11y-id' attribute which is used to identify barrier-free nodes separately from the standard id attribute.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/elements/built-in/view.mdx#2025-04-17_snippet_22\n\nLANGUAGE: typescript\nCODE:\n```\n// DefaultValue: undefined\na11y-id?: string\n```\n\n----------------------------------------\n\nTITLE: Import Transform Example - Input\nDESCRIPTION: Example showing the original import statement before transformation.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/api/rspeedy/rspeedy.transformimport.librarydirectory.md#2025-04-17_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Button } from 'foo'\n```\n\n----------------------------------------\n\nTITLE: Filtering Included Assets in Rspeedy File Size Output\nDESCRIPTION: Example of how to include only static assets larger than 10kB in the file size output using the include filter function.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/api/rspeedy/rspeedy.performance.printfilesize.md#2025-04-17_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineConfig } from '@lynx-js/rspeedy'\n\nexport default defineConfig({\n  performance: {\n    printFileSize: {\n      include: (asset) => asset.size > 10 * 1000,\n    }\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Defining the Source.alias Property in TypeScript\nDESCRIPTION: Type definition for the Source.alias property, which accepts a Record mapping aliases to their target paths, with optional falsy values to ignore modules.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/api/rspeedy/rspeedy.source.alias.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nalias?: Record<string, string | false | string[]> | undefined;\n```\n\n----------------------------------------\n\nTITLE: CssExtractRspackLoaderOptions.esModule Property Signature in TypeScript\nDESCRIPTION: TypeScript signature defining the esModule property which can be a boolean or undefined. This property determines whether ES modules syntax is used for generated JS modules.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/api/rspeedy/rspeedy.cssextractrspackloaderoptions.esmodule.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nesModule?: boolean | undefined;\n```\n\n----------------------------------------\n\nTITLE: Adding Rspeedy Type Declarations\nDESCRIPTION: Creates a type declaration file to support CSS Modules and static assets in Rspeedy projects by referencing the Rspeedy client types.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/rspeedy/typescript.md#2025-04-17_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n/// <reference types=\"@lynx-js/rspeedy/client\" />\n```\n\n----------------------------------------\n\nTITLE: Lynx Details Component Implementation\nDESCRIPTION: Implementation of the Details component showing box-sizing behavior explanation with custom span and code elements.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/guide/ui/layout/index.mdx#2025-04-17_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<Details title={<span><code>box-sizing</code> is <code>border-box</code> by default and Lynx does not exhibit the behavior of margin collapsing.</span>}>\nBy default, the size properties of Lynx, such as [`width`], [`height`], and [`max-width`], describe the size of the border box. This is inconsistent with the default behavior of the Web.\n\nLynx does not exhibit the behavior of [margin collapsing] as in the Web.\n</Details>\n```\n\n----------------------------------------\n\nTITLE: Name Parameter Type Definition\nDESCRIPTION: Type definition for the name parameter which specifies the event to stop listening to\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/lynx-api/lynx/lynx-before-publish-event/before-publish-event-remove.mdx#2025-04-17_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nname: string;\n```\n\n----------------------------------------\n\nTITLE: Using Path Alias in JavaScript Imports\nDESCRIPTION: Example of using configured path alias to import modules in JavaScript code.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/rspeedy/typescript.md#2025-04-17_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { get } from '@common/request.js'; // The same as './common/request.js'\n```\n\n----------------------------------------\n\nTITLE: Defining __AddInlineStyle Function Signature in JSX\nDESCRIPTION: The function signature for __AddInlineStyle which adds inline styles to Element objects. It accepts an element, a numeric style ID, and a style value that can be a string, null, or undefined.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/engine/element-api/__AddInlineStyle.mdx#2025-04-17_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n__AddInlineStyle(element: Element, id: number, value: string|null|undefined) : void;\n```\n\n----------------------------------------\n\nTITLE: Disabling Progress Bar in RSpeedy Configuration\nDESCRIPTION: Example showing how to disable the progress bar in RSpeedy configuration using the defineConfig function.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/api/rspeedy/rspeedy.dev.progressbar.md#2025-04-17_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineConfig } from '@lynx-js/rspeedy'\n\nexport default defineConfig({\n  dev: {\n    progressBar: false,\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: CSS border-inline-end-width Property Syntax Examples\nDESCRIPTION: Examples demonstrating the various value types that can be used with the border-inline-end-width property, including keywords (thin, medium, thick) and length values.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/css/properties/border-inline-end-width.mdx#2025-04-17_snippet_0\n\nLANGUAGE: css\nCODE:\n```\nborder-inline-end-width: thin;\nborder-inline-end-width: medium;\nborder-inline-end-width: thick;\nborder-inline-end-width: 10px;\n```\n\n----------------------------------------\n\nTITLE: Importing ButtonGroup Component with camelToDashComponentName set to true\nDESCRIPTION: Example of importing a ButtonGroup component after applying the camelToDashComponentName transformation with the property set to true. The import path is converted to kebab-case.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/api/rspeedy/rspeedy.transformimport.cameltodashcomponentname.md#2025-04-17_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport ButtonGroup from 'foo/button-group'\n```\n\n----------------------------------------\n\nTITLE: Using Linear Direction CSS Property Syntax\nDESCRIPTION: Shows the basic syntax examples for the linear-direction CSS property, demonstrating all possible values including standard and reversed orientations.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/css/properties/linear-direction.mdx#2025-04-17_snippet_0\n\nLANGUAGE: css\nCODE:\n```\nlinear-direction: column;\n\n/* Like <column>, but reversed */\nlinear-direction: column-reverse;\n\nlinear-direction: row;\n\n/* Like <row>, but reversed */\nlinear-direction: row-reverse;\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Chunk Splitting in JavaScript\nDESCRIPTION: This example demonstrates how to use the splitChunks property to create a custom chunk splitting configuration. It splits @lynx-js/react and react-router into a chunk named 'lib-react'.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/api/rspeedy/rspeedy.chunksplitcustom.splitchunks.md#2025-04-17_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineConfig } from '@lynx-js/rspeedy'\n\nexport default defineConfig({\n  performance: {\n    chunkSplit: {\n      strategy: 'custom',\n      splitChunks: {\n        cacheGroups: {\n          react: {\n            test: /node_modules[\\/](@lynx-js[\\/]react|react-router)[\\/]/,\n            name: 'lib-react',\n            chunks: 'all',\n          },\n        },\n      },\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Initializing MainThreadRef Constructor\nDESCRIPTION: Constructor definition for creating a new MainThreadRef instance that takes an initial value of type T and returns a MainThreadRef instance.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/api/react/Class.MainThreadRef.mdx#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nnew MainThreadRef<T>(initValue: T): MainThreadRef<T>\n```\n\n----------------------------------------\n\nTITLE: createElement for SVG Elements\nDESCRIPTION: Type definition for creating React SVG elements with SVG-specific attributes and class attributes.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/react/Function.createElement.mdx#2025-04-17_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nfunction createElement<P, T>(\n   type: keyof ReactSVG,\n   props?: null | ClassAttributes<T> & P, ...\n   children?: ReactNode[]): ReactSVGElement\n```\n\n----------------------------------------\n\nTITLE: Formal CSS Margin Bottom Syntax Definition\nDESCRIPTION: Defines the formal syntax structure for the margin-bottom property, showing allowed value types including length-percentage and auto options.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/css/properties/margin-bottom.mdx#2025-04-17_snippet_1\n\nLANGUAGE: css\nCODE:\n```\nmargin-bottom =\n  <length-percentage>  |\n  auto                 |\n\n<length-percentage> =\n  <length>      |\n  <percentage>\n```\n\n----------------------------------------\n\nTITLE: Main Thread Script Example\nDESCRIPTION: Example of code that must run on the main thread for DOM manipulation\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/react/thinking-in-reactlynx.mdx#2025-04-17_snippet_6\n\nLANGUAGE: js\nCODE:\n```\nfunction toRed(event) {\n  'main thread';\n  event.currentTarget.setStyleProperty('background-color', 'red');\n}\n```\n\n----------------------------------------\n\nTITLE: Importing and Rendering HTML Viewer for Living Specification in React\nDESCRIPTION: This code snippet imports the HtmlViewer component and uses it to render the content of a specific HTML file. The HtmlViewer component is passed a 'path' prop pointing to the location of the HTML file to be displayed.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/guide/spec.mdx#2025-04-17_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { HtmlViewer } from '@/components/html-viewer';\n\n<HtmlViewer path=\"/living-spec/index.html\" />\n```\n\n----------------------------------------\n\nTITLE: Producer Entry Point\nDESCRIPTION: Entry point configuration for the Producer project exporting the App component.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/react/code-splitting.md#2025-04-17_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport { App } from './App.jsx';\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Incorrect Usage of selectAll() in JavaScript\nDESCRIPTION: This snippet shows an incorrect way of trying to access node information immediately after calling selectAll(). The NodesRef object returned doesn't contain the actual query results yet.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/api/lynx-api/selector-query/selector-query-select-all.mdx#2025-04-17_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nlet nodesRef = lynx.createSelectorQuery().selectAll('#the-id');\nconsole.log(nodesRef); // always returning a valid NodesRef object\n```\n\n----------------------------------------\n\nTITLE: Rendering Color Samples using React Components\nDESCRIPTION: This code snippet demonstrates how to create a React component that displays a color sample. It uses inline styles to set the background color using RGBA values. The component is a div element with specific padding and margin for consistent display.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/api/css/data-type/color.mdx#2025-04-17_snippet_0\n\nLANGUAGE: JSX\nCODE:\n```\n<div style={{ padding: '17.5px 90px', margin: '-10px', backgroundColor: 'rgba(205, 92, 92, 1)' }}></div>\n```\n\n----------------------------------------\n\nTITLE: Defining CSS Filename Type in TypeScript\nDESCRIPTION: TypeScript type definition for the CSS filename property that specifies the name pattern for CSS files. The property is optional and defaults to '[name].css' if not specified.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/rspeedy/rspeedy.filename.css.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ncss?: string | undefined;\n```\n\n----------------------------------------\n\nTITLE: Setting reuse-identifier Attribute in TypeScript\nDESCRIPTION: Shows how to set the reuse-identifier attribute for <list-item> components within a <list>. This attribute is used for efficient reuse of list items with similar structures.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/elements/built-in/list.mdx#2025-04-17_snippet_24\n\nLANGUAGE: tsx\nCODE:\n```\n// DefaultValue: null\nreuse-identifier: string\n\n<list>\n  <list-item\n    reuse-identifier=\"type1\"\n  >\n  <list-item\n    reuse-identifier=\"type2\"\n  >\n</list>\n```\n\n----------------------------------------\n\nTITLE: Initializing LynxTemplateData with Dictionary in iOS\nDESCRIPTION: Method to initialize a LynxTemplateData object from an NSDictionary in iOS. It takes an NSDictionary as input and returns a parsed LynxTemplateData object.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/lynx-native-api/template-data.mdx#2025-04-17_snippet_3\n\nLANGUAGE: objective-c\nCODE:\n```\n- (instancetype)initWithDictionary:(NSDictionary *)dictionary;\n```\n\n----------------------------------------\n\nTITLE: Defining ListSnapEvent Interface in TypeScript\nDESCRIPTION: Defines the interface for ListSnapEvent, used in the snap event of the <list> component. It includes details about the pagination scrolling, including target positions and current scroll offsets.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/elements/built-in/list.mdx#2025-04-17_snippet_29\n\nLANGUAGE: tsx\nCODE:\n```\nbindsnap?: EventHandler<ListSnapEvent>;\n\ninterface ListSnapEvent extends common.BaseEvent<'snap', {}> {\n  detail: {\n    // The index of the node that will be paginated to\n    position: number;\n    // Current horizontal scroll offset, in px\n    currentScrollLeft: number;\n    // Current vertical scroll offset, in px\n    currentScrollTop: number;\n    // Target horizontal scroll offset for pagination, in px\n    targetScrollLeft: number;\n    // Target vertical scroll offset for pagination, in px\n    targetScrollTop: number;\n  };\n};\n```\n\n----------------------------------------\n\nTITLE: Adding Lynx DevTool Dependencies for Android (Kotlin)\nDESCRIPTION: This code demonstrates how to add lynx-devtool and lynx-service-devtool dependencies to the build.gradle.kts file for Android integration using Kotlin DSL syntax.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/guide/start/integrate-lynx-devtool.mdx#2025-04-17_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\n// Ensure Lynx DevTool version matches the Lynx version when integrating\ndependencies {\n  implementation (\"org.lynxsdk.lynx:lynx-devtool:3.2.0-rc.0\")\n  implementation (\"org.lynxsdk.lynx:lynx-service-devtool:3.2.0-rc.0\")\n}\n```\n\n----------------------------------------\n\nTITLE: Defining ExposedAPI.exit Property in TypeScript\nDESCRIPTION: Defines the 'exit' property of the ExposedAPI interface. This property is a function that exits the process with an optional exit code. It returns either a Promise<void> or void.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/api/rspeedy/rspeedy.exposedapi.exit.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexit: (code?: number) => Promise<void> | void;\n```\n\n----------------------------------------\n\nTITLE: Implementing ILynxLogService in Android\nDESCRIPTION: Kotlin implementation of a custom log service that implements the ILynxLogService interface for Android platform.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/lynx-native-api/lynx-service.mdx#2025-04-17_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nobject YourLogService : ILynxLogService {\n  private var logOutputChannel: LogOutputChannelType = LogOutputChannelType.Platform\n\n  override fun logByPlatform(\n    level: Int,\n    tag: String,\n    msg: String,\n  ) {\n    // Implemention\n  }\n\n  override fun isLogOutputByPlatform(): Boolean = logOutputChannel == LogOutputChannelType.Platform\n\n  override fun getDefaultWriteFunction(): Long = 0\n\n  override fun switchLogToSystem(enableSystemLog: Boolean) {}\n\n  override fun getLogToSystemStatus(): Boolean = false\n}\n```\n\n----------------------------------------\n\nTITLE: Defining TransformImport Property Type in TypeScript\nDESCRIPTION: TypeScript type definition for the transformToDefaultImport property which can be either a boolean or undefined.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/api/rspeedy/rspeedy.transformimport.transformtodefaultimport.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntransformToDefaultImport?: boolean | undefined;\n```\n\n----------------------------------------\n\nTITLE: Defining TypeScript Interface for SWC Minification Options\nDESCRIPTION: TypeScript type definition for the jsOptions property of the Minify configuration, which accepts SwcJsMinimizerRspackPluginOptions or undefined.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/rspeedy/rspeedy.minify.jsoptions.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\njsOptions?: Rspack.SwcJsMinimizerRspackPluginOptions | undefined;\n```\n\n----------------------------------------\n\nTITLE: Configuring Output Filename with Content Hash in JavaScript\nDESCRIPTION: Example of using content hash in the bundle filename configuration for @lynx-js/rspeedy.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/rspeedy/rspeedy.filename.template.md#2025-04-17_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineConfig } from '@lynx-js/rspeedy'\n\nexport default defineConfig({\n  output: {\n    filename: {\n      template: '[name].[contenthash].bundle',\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Demonstrating z-index Usage in CSS\nDESCRIPTION: Examples of valid z-index property values in CSS. Shows how to set z-index for different stacking orders.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/css/properties/z-index.mdx#2025-04-17_snippet_0\n\nLANGUAGE: css\nCODE:\n```\nz-index: 0;\nz-index: 3;\nz-index: 289;\nz-index: -1;\n```\n\n----------------------------------------\n\nTITLE: Configuring dataUriLimit to Inline All Static Assets\nDESCRIPTION: Example of using defineConfig to set dataUriLimit to the maximum safe integer, which will inline all static assets regardless of size.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/rspeedy/rspeedy.output.dataurilimit.md#2025-04-17_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineConfig } from '@lynx-js/rspeedy'\nexport default defineConfig({\n  output: {\n    dataUriLimit: Number.MAX_SAFE_INTEGER,\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Using PlatformBadge Component\nDESCRIPTION: Demonstrates the usage of PlatformBadge to indicate platform compatibility. Supports specifying the platform type and optional version, as well as shorthand components for platform-specific badges.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/internal/docs-contribution-guide/doc-components.mdx#2025-04-17_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n// Render a badge for Android\n<PlatformBadge platform=\"android\" />\n\n// Render a badge for iOS with version\n<PlatformBadge platform=\"ios\" version=\"14.0\" />\n\n// X-only badges and No-X badges\n<AndroidOnly />\n<IOSOnly />\n```\n\n----------------------------------------\n\nTITLE: Defining hydrateParseSnapshotStart property in FrameworkPipelineTiming interface\nDESCRIPTION: Declares the timestamp property marking when the framework starts deserializing main thread information on the background thread, only valid when stage is 'hydrate'.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/lynx-api/performance-api/framework-pipeline-timing.mdx#2025-04-17_snippet_10\n\nLANGUAGE: tsx\nCODE:\n```\nhydrateParseSnapshotStart: number;\n```\n\n----------------------------------------\n\nTITLE: Defining Event Target Property in TypeScript\nDESCRIPTION: Defines the 'target' property of the Event class, which represents a collection of properties of the element that triggered the event.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/api/lynx-api/event/event.mdx#2025-04-17_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ntarget: {\n  id: string,\n  uid: number,\n  dataset: [key: string]: any,\n}\n```\n\n----------------------------------------\n\nTITLE: Defining loadCoreEnd Property in InitBackgroundRuntimeEntry Interface (TypeScript)\nDESCRIPTION: Declares the loadCoreEnd property, which represents the end timestamp for initializing the background thread runtime environment as a floating-point Unix timestamp in milliseconds.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/lynx-api/performance-api/performance-entry/init-background-runtime-entry.mdx#2025-04-17_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nloadCoreEnd: number;\n```\n\n----------------------------------------\n\nTITLE: Disabling Both HMR and Live Reload in JavaScript Configuration\nDESCRIPTION: Example of how to disable both Hot Module Replacement (HMR) and live reload in the rspeedy configuration using JavaScript. This sets both hmr and liveReload properties to false in the dev object.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/rspeedy/rspeedy.dev.livereload.md#2025-04-17_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineConfig } from '@lynx-js/rspeedy'\n\nexport default defineConfig({\n  dev: {\n    hmr: false,\n    liveReload: false,\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Defining localIdentName Property in CssLoaderModules Interface (TypeScript)\nDESCRIPTION: This code snippet shows the TypeScript signature for the localIdentName property. It is an optional string property that sets the format of the className generated by CSS Modules after compilation.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/rspeedy/rspeedy.cssloadermodules.localidentname.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nlocalIdentName?: string | undefined;\n```\n\n----------------------------------------\n\nTITLE: Selector Parameter Definition\nDESCRIPTION: The selector parameter type definition that specifies the id used to search for the target node.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/lynx-api/intersection-observer/intersection-observer-observe.mdx#2025-04-17_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nselector: string;\n```\n\n----------------------------------------\n\nTITLE: Configuring CSS Modules with Custom File Path Rules in JavaScript\nDESCRIPTION: Example of using the defineConfig function to customize CSS module auto detection, enabling CSS modules for files with '.module.' in their name or files in the 'shared/' directory.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/api/rspeedy/rspeedy.cssmodules.auto.md#2025-04-17_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineConfig } from '@lynx-js/rspeedy'\nexport default defineConfig({\n  output: {\n    cssModules: {\n      auto: (filename) => {\n        return filename.includes('.module.') || filename.includes('shared/')\n      },\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Rspack Using Object Configuration\nDESCRIPTION: Example showing how to configure Rspack using a direct object configuration approach with resolve options.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/rspeedy/rspeedy.tools.rspack.md#2025-04-17_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineConfig } from '@lynx-js/rspeedy'\n\nexport default defineConfig({\n  tools: {\n    rspack: {\n      resolve: {\n        fullySpecified: true,\n      },\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: CSS border-inline-end-width Formal Syntax\nDESCRIPTION: The formal syntax definition for the border-inline-end-width property, showing the possible values that can be used.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/css/properties/border-inline-end-width.mdx#2025-04-17_snippet_1\n\nLANGUAGE: css\nCODE:\n```\nthin | medium | thick | <length>\n```\n\n----------------------------------------\n\nTITLE: Defining LoadConfigResult Interface in TypeScript\nDESCRIPTION: TypeScript interface definition for LoadConfigResult that specifies the structure returned by loadConfig(). It contains two properties: configPath for the loaded configuration file path and content for the actual configuration object.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/api/rspeedy/rspeedy.loadconfigresult.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface LoadConfigResult \n```\n\n----------------------------------------\n\nTITLE: Basic Animation Play State Usage\nDESCRIPTION: Examples showing single and multiple animation play state declarations. Shows how to set animations to either running or paused states.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/css/properties/animation-play-state.mdx#2025-04-17_snippet_0\n\nLANGUAGE: css\nCODE:\n```\n/* Single animation */\nanimation-play-state: running;\nanimation-play-state: paused;\n\n/* Multiple animations */\nanimation-play-state: paused, running, running;\n```\n\n----------------------------------------\n\nTITLE: Basic text-overflow CSS Examples\nDESCRIPTION: Shows the basic syntax for using the text-overflow property with its two possible values: clip and ellipsis.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/css/properties/text-overflow.mdx#2025-04-17_snippet_0\n\nLANGUAGE: css\nCODE:\n```\ntext-overflow: clip;\ntext-overflow: ellipsis;\n```\n\n----------------------------------------\n\nTITLE: Configuring Include Font Padding Property in Lynx\nDESCRIPTION: Definition of the include-font-padding property which enables additional padding on Android text elements. May cause platform inconsistencies.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/api/elements/built-in/text.mdx#2025-04-17_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n// DefaultValue: false\ninclude-font-padding?: boolean;\n```\n\n----------------------------------------\n\nTITLE: Retrieving Child Nodes with __GetChildren in JSX\nDESCRIPTION: This snippet demonstrates the syntax for the __GetChildren function, which takes an Element object as a parameter and returns an array of its child nodes.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/engine/element-api/__GetChildren.mdx#2025-04-17_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n__GetChildren(element: Element) : Array<Element>;\n```\n\n----------------------------------------\n\nTITLE: Defining the pluginOptions Property for CssExtract in TypeScript\nDESCRIPTION: The TypeScript signature for the pluginOptions property of the CssExtract class. This property accepts configuration options for the CssExtractRspackPlugin, which is used to extract CSS into separate files in Rspack builds.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/api/rspeedy/rspeedy.cssextract.pluginoptions.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\npluginOptions?: CssExtractRspackPluginOptions | undefined;\n```\n\n----------------------------------------\n\nTITLE: CSS right Property Syntax Examples\nDESCRIPTION: Various ways to use the CSS 'right' property, including length values, percentages, keywords, and calc expressions. This demonstrates the different value types that can be used with the property.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/css/properties/right.mdx#2025-04-17_snippet_0\n\nLANGUAGE: css\nCODE:\n```\n/* <length> values */\nright: 3px;\nright: 2rpx;\nright: 2.4em;\nright: 3rem;\n\nright: 10%;\n\n/* Keyword value */\nright: auto;\n\n/* calc */\nright: calc(1px + 1px);\n```\n\n----------------------------------------\n\nTITLE: Deprecated UNSAFE_componentWillUpdate Method in React TypeScript\nDESCRIPTION: Deprecated method called before rendering when new props or state is received. Use getSnapshotBeforeUpdate instead.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/api/react/Class.PureComponent.mdx#2025-04-17_snippet_10\n\nLANGUAGE: TypeScript\nCODE:\n```\noptional UNSAFE_componentWillUpdate(\n   nextProps: Readonly<P>,\n   nextState: Readonly<S>,\n   nextContext: any): void\n```\n\n----------------------------------------\n\nTITLE: Additional CSS border-top-left-radius Examples\nDESCRIPTION: Simple examples demonstrating circular corners with a fixed radius and elliptical corners with different horizontal and vertical radii.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/css/properties/border-top-left-radius.mdx#2025-04-17_snippet_2\n\nLANGUAGE: css\nCODE:\n```\n/* the corner is a circle */\n/* border-top-left-radius: radius */\nborder-top-left-radius: 3px;\n\n/* the corner is an ellipsis */\n/* border-top-left-radius: horizontal vertical */\nborder-top-left-radius: 0.5em 1em;\n```\n\n----------------------------------------\n\nTITLE: GetSnapshotBeforeUpdate Lifecycle Method\nDESCRIPTION: Lifecycle method that runs before React applies render results to the DOM. Returns an object that gets passed to componentDidUpdate. Useful for preserving DOM state like scroll position.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/react/Class.PureComponent.mdx#2025-04-17_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\noptional getSnapshotBeforeUpdate(prevProps: Readonly<P>, prevState: Readonly<S>): null | SS\n```\n\n----------------------------------------\n\nTITLE: Formal Syntax Definition for linear-weight-sum\nDESCRIPTION: The formal CSS syntax definition for the linear-weight-sum property, showing it accepts a numeric value.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/css/properties/linear-weight-sum.mdx#2025-04-17_snippet_1\n\nLANGUAGE: css\nCODE:\n```\nlinear-weight-sum = <number>\n```\n\n----------------------------------------\n\nTITLE: Defining Output.dataUriLimit Property in TypeScript\nDESCRIPTION: TypeScript signature for the dataUriLimit property of the Output object. It's an optional number property used to set the size threshold for inlining static assets.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/rspeedy/rspeedy.output.dataurilimit.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ndataUriLimit?: number | undefined;\n```\n\n----------------------------------------\n\nTITLE: CSS Order Property Syntax Examples\nDESCRIPTION: Examples showing how to use numerical values with the order property, including both positive and negative values.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/css/properties/order.mdx#2025-04-17_snippet_0\n\nLANGUAGE: css\nCODE:\n```\n/* Numerical value including negative numbers */\norder: 5;\norder: -5;\n```\n\n----------------------------------------\n\nTITLE: Configuring CssExtractWebpackPlugin with CommonJS Syntax in JavaScript\nDESCRIPTION: Example showing how to configure CssExtractWebpackPlugin with the esModule option set to false to enable CommonJS syntax instead of the default ES modules syntax. This configuration is used for CSS processing in a webpack setup.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/api/rspeedy/rspeedy.cssextractrspackloaderoptions.esmodule.md#2025-04-17_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport {CssExtractWebpackPlugin} from \"@lynx-js/css-extract-webpack-plugin\";\nexport default {\n  plugins: [new CssExtractWebpackPlugin()],\n  module: {\n    rules: [\n      {\n        test: /\\.css$/i,\n        use: [\n          {\n            loader: CssExtractWebpackPlugin.loader,\n            options: {\n              esModule: false,\n            },\n          },\n          \"css-loader\",\n        ],\n      },\n    ],\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Formal Syntax Definition for relative-layout-once Property\nDESCRIPTION: Provides the formal syntax definition for the relative-layout-once CSS property in the Lynx framework. This property accepts only boolean values (true or false).\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/css/properties/relative-layout-once.mdx#2025-04-17_snippet_1\n\nLANGUAGE: css\nCODE:\n```\nrelative-layout-once = true | false\n```\n\n----------------------------------------\n\nTITLE: Configuring Text Max Line Property in Lynx\nDESCRIPTION: Definition of the text-maxline property which limits the maximum number of displayed text lines. Must be used with overflow:hidden to take effect.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/api/elements/built-in/text.mdx#2025-04-17_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n// DefaultValue: '-1'\ntext-maxline?: number;\n```\n\n----------------------------------------\n\nTITLE: Defining __GetClasses Function Syntax in JSX\nDESCRIPTION: Defines the syntax for the __GetClasses function that takes an Element object and returns an array of string class selectors.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/api/engine/element-api/__GetClasses.mdx#2025-04-17_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n__GetClasses(element: Element) : Array<string>;\n```\n\n----------------------------------------\n\nTITLE: Defining Formal Syntax for grid-auto-columns CSS Property\nDESCRIPTION: This code block defines the formal syntax for the grid-auto-columns property, including track-size, track-breadth, and inflexible-breadth definitions. It specifies the allowed values and their combinations.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/css/properties/grid-auto-columns.mdx#2025-04-17_snippet_1\n\nLANGUAGE: css\nCODE:\n```\ngrid-auto-columns =\n  <track-size>+\n\n<track-size> =\n  <track-breadth>                                   |\n  minmax( <inflexible-breadth> , <track-breadth> )  |\n  fit-content( <length-percentage [0,∞]> )\n\n<track-breadth> =\n  <length-percentage [0,∞]>  |\n  <flex [0,∞]>               |\n  max-content                |\n  auto\n\n<inflexible-breadth> =\n  <length-percentage [0,∞]>  |\n  max-content                |\n  auto\n\n<length-percentage> =\n  <length>      |\n  <percentage>\n```\n\n----------------------------------------\n\nTITLE: Border-Color Formal Syntax in CSS\nDESCRIPTION: Shows the formal syntax for the border-color property, indicating it accepts between one and four color values.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/css/properties/border-color.mdx#2025-04-17_snippet_1\n\nLANGUAGE: css\nCODE:\n```\n<color>{1, 4}\n```\n\n----------------------------------------\n\nTITLE: Rendering Interactive Code Example with Go Component in ReactLynx\nDESCRIPTION: Uses the Go component to render an interactive code example for data fetching with TanStack Query. It specifies the example name, default file, image, entry file, and entry point.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/react/data-fetching.mdx#2025-04-17_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<Go\n  example=\"networking\"\n  defaultFile=\"src/react-query/index.tsx\"\n  img=\"https://lf-lynx.tiktok-cdns.com/obj/lynx-artifacts-oss-sg/lynx-website/assets/doc/networking/react-query-example-image.webp\"\n  defaultEntryFile=\"dist/react-query.lynx.bundle\"\n  entry=\"src/react-query\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Displaying Development Build Directory Structure\nDESCRIPTION: Shows the extended directory structure in development mode, including debug files, source maps, and Rspeedy-specific configurations.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/rspeedy/output.md#2025-04-17_snippet_1\n\nLANGUAGE: tree\nCODE:\n```\ndist/\n├── .rspeedy\n│   ├── async\n│   │   └── [name]\n│   │       ├── debug-info.json\n│   │       ├── tasm.json\n│   │       └── [name].css\n│   ├── [name]\n│   │   ├── background.js\n│   │   ├── background.js.map\n│   │   ├── debug-info.json\n│   │   ├── [name].css\n│   │   ├── main-thread.js\n│   │   ├── main-thread.js.map\n│   │   └── tasm.json\n│   └── rspeedy.config.js\n├── [name].lynx.bundle\n└── static\n    ├── image\n    │   ├── [name].[hash].png\n    │   └── [name].[hash].svg\n    └── js\n        ├── [id].[hash].js\n        │   └── async\n        │       ├── [id].[hash].js\n        │       └── [id].[hash].js.map\n        ├── lib-preact.[hash].js\n        └── lib-preact.[hash].js.map\n```\n\n----------------------------------------\n\nTITLE: Using Relative ID in CSS\nDESCRIPTION: Examples of setting relative-id with different numeric values. The property accepts integer values, with -1 (default) indicating the element won't be used as an alignment reference, and 0 being disallowed.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/css/properties/relative-id.mdx#2025-04-17_snippet_0\n\nLANGUAGE: css\nCODE:\n```\nrelative-id: 1;\nrelative-id: 2;\n```\n\n----------------------------------------\n\nTITLE: Transformed Import Statement\nDESCRIPTION: The resulting import statement after applying the transformImport configuration.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/rspeedy/rspeedy.source.transformimport.md#2025-04-17_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Button } from 'foo/src/components/Button/Button'\n```\n\n----------------------------------------\n\nTITLE: Explicit Background-Only Marking for Props (JSX)\nDESCRIPTION: This snippet shows a case where explicit 'background only' marking is required for event handler functions passed as props in ReactLynx, due to compiler limitations.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/react/thinking-in-reactlynx.mdx#2025-04-17_snippet_8\n\nLANGUAGE: jsx\nCODE:\n```\nfunction App() {\n  function handleTap() {\n    'background only';\n    // 不幸的是，现在你必须标记事件回调\n  }\n  return <Button onClick={handleTap} />;\n}\n\nfunction Button({ onClick }) {\n  return <view bindtap={onClick} />;\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing LynxTemplateData with JSON in iOS\nDESCRIPTION: Method to initialize a LynxTemplateData object from a JSON string in iOS. It takes an NSString containing JSON data as input and returns a parsed LynxTemplateData object.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/lynx-native-api/template-data.mdx#2025-04-17_snippet_4\n\nLANGUAGE: objective-c\nCODE:\n```\n- (instancetype)initWithJson:(NSString *)json;\n```\n\n----------------------------------------\n\nTITLE: Retrieving Element Configuration in Lynx Framework (JSX)\nDESCRIPTION: This snippet demonstrates the syntax for the __GetElementConfig function, which takes an Element object as a parameter and returns a Record of string keys and any values.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/engine/element-api/__GetElementConfig.mdx#2025-04-17_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n__GetElementConfig(element: Element) : Record<string, any>;\n```\n\n----------------------------------------\n\nTITLE: Example of Left-to-Right Text in HTML\nDESCRIPTION: Shows an HTML example of left-to-right text content which would be displayed with a left-to-right direction by default.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/css/properties/direction.mdx#2025-04-17_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<text> abc 1234 </text>\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple Entry Modules in rSpeedy\nDESCRIPTION: Example showing how to configure rSpeedy with multiple entry modules for a single entry. This uses an array of path strings to specify multiple modules to be included in the bundle.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/api/rspeedy/rspeedy.entry.md#2025-04-17_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineConfig } from '@lynx-js/rspeedy'\nexport default defineConfig({\n  entry: ['./src/prefetch.js', './src/pages/main/index.js'],\n})\n```\n\n----------------------------------------\n\nTITLE: Defining the configPath Property in LoadConfigResult Interface with TypeScript\nDESCRIPTION: This code snippet defines the configPath property of the LoadConfigResult interface, which stores the path to the configuration file that has been successfully loaded. The property is typed as a string value.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/api/rspeedy/rspeedy.loadconfigresult.configpath.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconfigPath: string;\n```\n\n----------------------------------------\n\nTITLE: Configuring Chunk Split Strategy with maxSize in JavaScript\nDESCRIPTION: Example of using the maxSize property in a configuration for @lynx-js/rspeedy. It demonstrates setting up a chunk split strategy with a maximum chunk size of 50000 bytes.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/rspeedy/rspeedy.chunksplitbysize.maxsize.md#2025-04-17_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineConfig } from '@lynx-js/rspeedy'\n\nexport default defineConfig({\n  performance: {\n    chunkSplit: {\n      strategy: 'split-by-size',\n      maxSize: 50000,\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Formal Syntax for grid-auto-rows CSS Property\nDESCRIPTION: The formal syntax definition for the grid-auto-rows property, showing all possible value types and combinations that can be used with this property.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/css/properties/grid-auto-rows.mdx#2025-04-17_snippet_1\n\nLANGUAGE: css\nCODE:\n```\n/* Keyword values */\ngrid-auto-rows: max-content;\ngrid-auto-rows: auto;\n\n/* <length> values */\ngrid-auto-rows: 100px;\n\n/* <percentage> values */\ngrid-auto-rows: 10%;\ngrid-auto-rows: 33.3%;\n\n/* <flex> values */\ngrid-auto-rows: 0.5fr;\ngrid-auto-rows: 3fr;\n\n/* minmax() values */\ngrid-auto-rows: minmax(100px, auto);\ngrid-auto-rows: minmax(max-content, 2fr);\n\n/* multiple track-size values */\ngrid-auto-rows: 100px 150px 390px;\ngrid-auto-rows: 10% 33.3%;\ngrid-auto-rows: 0.5fr 3fr 1fr;\ngrid-auto-rows: 100px minmax(100px, auto) 10% 0.5fr fit-content(400px);\n```\n\n----------------------------------------\n\nTITLE: Defining enableCSSSelector Property in TypeScript Interface\nDESCRIPTION: TypeScript interface property definition for enableCSSSelector, which is an optional boolean flag that controls whether to enable the new CSS implementation in the React Rsbuild plugin.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/rspeedy/react-rsbuild-plugin.pluginreactlynxoptions.enablecssselector.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nenableCSSSelector?: boolean;\n```\n\n----------------------------------------\n\nTITLE: Retrieving Next Element Node Syntax\nDESCRIPTION: Function signature showing the syntax for retrieving the next Element node. Takes an Element parameter and returns either an Element or undefined.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/engine/element-api/__NextElement.mdx#2025-04-17_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n__NextElement(element: Element) : Element|undefined;\n```\n\n----------------------------------------\n\nTITLE: Checking TemplateBundle Validity in Java\nDESCRIPTION: Determines if the current TemplateBundle object is valid.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/lynx-native-api/template-bundle.mdx#2025-04-17_snippet_2\n\nLANGUAGE: java\nCODE:\n```\npublic boolean isValid()\n```\n\n----------------------------------------\n\nTITLE: Defining createLynxEnd Property for InitLynxviewEntry in TypeScript\nDESCRIPTION: This snippet shows the type definition for the createLynxEnd property, which represents the end time of LynxView creation as a Unix timestamp in milliseconds.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/api/lynx-api/performance-api/performance-entry/init-lynxview-entry.mdx#2025-04-17_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\ncreateLynxEnd: number;\n```\n\n----------------------------------------\n\nTITLE: Defining View Exposure Screen Margin Attributes in TypeScript\nDESCRIPTION: Defines attributes that specify screen boundary scaling values for exposure detection, affecting viewport intersection judgment for the target node.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/elements/built-in/view.mdx#2025-04-17_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\n// DefaultValue: '0px'\nexposure-screen-margin-top?: string;\nexposure-screen-margin-right?: string;\nexposure-screen-margin-bottom?: string;\nexposure-screen-margin-left?: string;\n```\n\n----------------------------------------\n\nTITLE: Customizing Progress Bar ID in RSpeedy Configuration\nDESCRIPTION: Example showing how to modify the text displayed on the left side of the progress bar by setting the id option in the progressBar configuration.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/api/rspeedy/rspeedy.dev.progressbar.md#2025-04-17_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineConfig } from '@lynx-js/rspeedy'\n\nexport default defineConfig({\n  dev: {\n    progressBar: {\n      id: 'Some Text'\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Using Named Exports from CSS Modules in JavaScript\nDESCRIPTION: This JavaScript example demonstrates how to import and use CSS classes as named exports. It shows different scenarios based on the exportLocalsConvention setting.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/rspeedy/rspeedy.cssloadermodules.namedexport.md#2025-04-17_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as styles from \"./styles.css\";\n\n// If using `exportLocalsConvention: \"as-is\"` (default value):\nconsole.log(styles[\"foo-baz\"], styles.bar);\n\n// If using `exportLocalsConvention: \"camel-case-only\"`:\nconsole.log(styles.fooBaz, styles.bar);\n\n// For the `default` class name\nconsole.log(styles[\"_default\"]);\n```\n\n----------------------------------------\n\nTITLE: Accessing the paintingUiOperationExecuteEnd Property in PipelineEntry (TypeScript)\nDESCRIPTION: The paintingUiOperationExecuteEnd property provides the timestamp for the end of executing UI operations related to painting.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/lynx-api/performance-api/performance-entry/pipeline-entry.mdx#2025-04-17_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\npaintingUiOperationExecuteEnd: number;\n```\n\n----------------------------------------\n\nTITLE: Configuring CSS Modules in JavaScript\nDESCRIPTION: An example of how to use the 'auto' property in a configuration file. This snippet demonstrates enabling CSS modules for files with '.module.' in their name or located in the 'shared/' directory.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/rspeedy/rspeedy.cssmodules.auto.md#2025-04-17_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineConfig } from '@lynx-js/rspeedy'\nexport default defineConfig({\n  output: {\n    cssModules: {\n      auto: (filename) => {\n        return filename.includes('.module.') || filename.includes('shared/')\n      },\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Output Filename in JavaScript\nDESCRIPTION: This example demonstrates how to use the Output.filename property in a configuration file for @lynx-js/rspeedy. It sets the filename pattern for the output bundle.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/rspeedy/rspeedy.output.filename.md#2025-04-17_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineConfig } from '@lynx-js/rspeedy'\nexport default defineConfig({\n  output: {\n    filename: '[name]/[name].lynx.bundle',\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Defining pathinfo Property in CssExtractRspackPluginOptions Interface\nDESCRIPTION: This code snippet shows the TypeScript signature for the pathinfo property in the CssExtractRspackPluginOptions interface. The property is optional and can be of type boolean or undefined.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/api/rspeedy/rspeedy.cssextractrspackpluginoptions.pathinfo.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\npathinfo?: boolean | undefined;\n```\n\n----------------------------------------\n\nTITLE: Formal syntax for max-height property in CSS\nDESCRIPTION: Formal CSS syntax examples for the max-height property, demonstrating both length-based and percentage-based value specifications.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/css/properties/max-height.mdx#2025-04-17_snippet_1\n\nLANGUAGE: css\nCODE:\n```\n/* <length> */\nmax-height: 120px;\nmax-height: 10em;\n\n/* <percentage> */\nmax-height: 75%;\n```\n\n----------------------------------------\n\nTITLE: Dynamic Performance Tracking with Data-Driven Flags\nDESCRIPTION: Shows how to use data-driven timing flags to track performance across multiple renders of the same component.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/guide/performance/timing-flag.mdx#2025-04-17_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nlet isFirst = true;\nexport default function App(this: any) {\n  return (\n    <view className=\"container\">\n      {\n         // needShow: true -> false -> true\n         data.needShow ? <text __lynx_timing_flag={\"__lynx_timing_actual_fmp\" + (isFirst ? \"\" : +data.id)}>{data.msg}</text> : null\n      }\n    </view>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling Hash in rspeedy Configuration\nDESCRIPTION: This example demonstrates how to disable filename hashing in the rspeedy configuration. It uses the defineConfig function to set filenameHash to false in the output options.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/rspeedy/rspeedy.output.filenamehash.md#2025-04-17_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineConfig } from '@lynx-js/rspeedy'\n\nexport default defineConfig({\n  output: {\n    filenameHash: false,\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Defining removeDescendantSelectorScope Property in PluginReactLynxOptions Interface\nDESCRIPTION: This TypeScript code defines the 'removeDescendantSelectorScope' property which is an optional boolean property used to determine whether the scope of descendant selectors should be removed.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/api/rspeedy/react-rsbuild-plugin.pluginreactlynxoptions.removedescendantselectorscope.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nremoveDescendantSelectorScope?: boolean;\n```\n\n----------------------------------------\n\nTITLE: Example of Right-to-Left Text in HTML\nDESCRIPTION: Shows an HTML example with Arabic text content which would naturally be displayed right-to-left when using the 'normal' direction value.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/css/properties/direction.mdx#2025-04-17_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<text> العاشر ليونيكود 1234</text>\n```\n\n----------------------------------------\n\nTITLE: Defining SWC Property in Tools Interface\nDESCRIPTION: TypeScript signature for the swc property in the Tools interface, which controls options for the built-in SWC loader in RSpack.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/api/rspeedy/rspeedy.tools.swc.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nswc?: ToolsConfig['swc'] | undefined;\n```\n\n----------------------------------------\n\nTITLE: Formal CSS Syntax for overflow-x Property\nDESCRIPTION: This snippet presents the formal CSS syntax for the overflow-x property, showing the allowed values in a concise format.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/css/properties/overflow-x.mdx#2025-04-17_snippet_2\n\nLANGUAGE: css\nCODE:\n```\nhidden | visible\n```\n\n----------------------------------------\n\nTITLE: Configuring Asset Prefix in RSpeedy\nDESCRIPTION: Example showing how to configure the assetPrefix in RSpeedy's configuration file to specify a CDN URL for static assets. This configuration only takes effect in production builds and automatically appends a trailing slash.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/rspeedy/rspeedy.output.assetprefix.md#2025-04-17_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineConfig } from '@lynx-js/rspeedy'\nexport default defineConfig({\n  output: {\n    assetPrefix: 'https://cdn.example.com/assets/',\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Customizing QR Code Schema with Single Schema in JavaScript\nDESCRIPTION: Example of using pluginQRCode with a custom schema function that prepends 'lynx://' to the URL and adds a 'dev' parameter.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/api/rspeedy/qrcode-rsbuild-plugin.pluginqrcodeoptions.schema.md#2025-04-17_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { pluginQRCode } from '@lynx-js/plugin-qrcode'\nimport { defineConfig } from '@lynx-js/rspeedy'\n\nexport default defineConfig({\n  plugins: [\n    pluginQRCode({\n      schema(url) {\n        return `lynx://${url}?dev=1`\n      },\n    }),\n  ],\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Tail Color Convert Property in Lynx\nDESCRIPTION: Definition of the tail-color-convert property which controls how ellipsis color is determined when text is truncated.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/api/elements/built-in/text.mdx#2025-04-17_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n// DefaultValue: false\ntail-color-convert?: boolean;\n```\n\n----------------------------------------\n\nTITLE: Rendering Go Component for Networking Example in JSX\nDESCRIPTION: Demonstrates the usage of the Go component to display an interactive networking example. It includes properties for specifying the example code, default file, image, and entry points.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/guide/interaction/networking.mdx#2025-04-17_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\n<Go\n  example=\"networking\"\n  defaultFile=\"src/fetch/index.tsx\"\n  img=\"https://lf-lynx.tiktok-cdns.com/obj/lynx-artifacts-oss-sg/lynx-website/assets/doc/networking/fetch-example-image.webp\"\n  defaultEntryFile=\"dist/fetch.lynx.bundle\"\n  entry=\"src/fetch\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Grid Column Start Formal Syntax\nDESCRIPTION: The formal syntax definition for the grid-column-start property, showing the accepted value types.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/css/properties/grid-column-start.mdx#2025-04-17_snippet_1\n\nLANGUAGE: css\nCODE:\n```\ngrid-column-start = <number> | [span && <number>]\n```\n\n----------------------------------------\n\nTITLE: CSS Border Top Style Formal Syntax\nDESCRIPTION: Defines the formal syntax for the border-top-style property, showing the line-style values that can be used.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/css/properties/border-top-style.mdx#2025-04-17_snippet_1\n\nLANGUAGE: css\nCODE:\n```\n<line-style>\nwhere\n<line-style> = none | hidden | dotted | dashed | solid | double | groove | ridge | inset | outset\n```\n\n----------------------------------------\n\nTITLE: Like Icon State Management in TypeScript\nDESCRIPTION: Implements state management for the like icon functionality using React-style useState hook.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/guide/start/tutorial-gallery.mdx#2025-04-17_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst [isLiked, setIsLiked] = useState(false);\n```\n\n----------------------------------------\n\nTITLE: Rspeedy Dev Command Help\nDESCRIPTION: Help output for the dev command showing available options for development server\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/rspeedy/cli.md#2025-04-17_snippet_3\n\nLANGUAGE: text\nCODE:\n```\n➜ rspeedy dev --help\n\nUsage: rspeedy dev [options]\n\nOptions:\n  -b --base <base>          specify the base path of the server\n  -c --config <config>      specify the configuration file, can be a relative or absolute path\n  --env-mode <mode>         specify the env mode to load the .env.[mode] file\n  --environment <name...>   specify the name of environment to build\n  -h, --help                display help for command\n```\n\n----------------------------------------\n\nTITLE: Defining configPath Property in LoadConfigOptions Interface in TypeScript\nDESCRIPTION: This snippet shows the TypeScript signature for the configPath property of the LoadConfigOptions interface in the @lynx-js/rspeedy package. The property is defined as an optional string that can be undefined, likely used to specify a custom path to a configuration file.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/api/rspeedy/rspeedy.loadconfigoptions.configpath.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconfigPath?: string | undefined;\n```\n\n----------------------------------------\n\nTITLE: Configuring LynxView Size with LayoutParams in Java\nDESCRIPTION: Demonstrates two methods to set fixed dimensions for a LynxView component: directly specifying pixel dimensions or using MATCH_PARENT with a fixed-size parent container. Requires the outer container constraint to be EXACTLY for fixed sizing.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/guide/embed-lynx-to-native/embed-lynx-to-native-fixed-android.mdx#2025-04-17_snippet_0\n\nLANGUAGE: java\nCODE:\n```\n//You can directly specify the size of LynxView\nparentView.addView(lynxview, new ViewGroup.LayoutParams(400, 200));\n\n//You can also fix the parent node's size and set it to MATCH_PARENT\nparentView.addView(lynxview,\n   new ViewGroup.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT,ViewGroup.LayoutParams.MATCH_PARENT));\n\n```\n\n----------------------------------------\n\nTITLE: Defining Enable Exposure UI Margin Attribute in TypeScript\nDESCRIPTION: Defines the 'enable-exposure-ui-margin' attribute that specifies whether the target node supports the exposure-ui-margin-* properties.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/elements/built-in/view.mdx#2025-04-17_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\n// DefaultValue: false\nenable-exposure-ui-margin?: boolean\n```\n\n----------------------------------------\n\nTITLE: Retrieving Inline Styles with __GetInlineStyles in Lynx Framework (JSX)\nDESCRIPTION: Demonstrates the syntax for the __GetInlineStyles function which takes an Element as input and returns an object containing its inline styles. The function signature shows it accepts an Element parameter and returns an object.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/engine/element-api/__GetInlineStyles.mdx#2025-04-17_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n__GetInlineStyles(element: Element) : object;\n```\n\n----------------------------------------\n\nTITLE: Defining Config.output Property in TypeScript\nDESCRIPTION: This code snippet defines the 'output' property of the Config interface. It is an optional property of type Output or undefined, used to specify how and where bundles and assets should be output.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/rspeedy/rspeedy.config.output.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\noutput?: Output | undefined;\n```\n\n----------------------------------------\n\nTITLE: Formal CSS Syntax for relative-left-of\nDESCRIPTION: The formal syntax definition for the relative-left-of property, showing it can accept 'none' or a number value.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/css/properties/relative-left-of.mdx#2025-04-17_snippet_1\n\nLANGUAGE: css\nCODE:\n```\nrelative-left-of = none | <number>\n```\n\n----------------------------------------\n\nTITLE: Formal CSS Transition Duration Syntax\nDESCRIPTION: The formal syntax for the transition-duration property requiring a time value.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/css/properties/transition-duration.mdx#2025-04-17_snippet_1\n\nLANGUAGE: css\nCODE:\n```\ntransition-duration: <time>;\n```\n\n----------------------------------------\n\nTITLE: Defining Config.plugins Property in TypeScript\nDESCRIPTION: This code snippet shows the TypeScript signature for the 'plugins' property in the Config interface. It's an optional property that accepts RsbuildPlugins or undefined as its value.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/rspeedy/rspeedy.config.plugins.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nplugins?: RsbuildPlugins | undefined;\n```\n\n----------------------------------------\n\nTITLE: Defining the JavaScript Output Directory Property in DistPath Interface in TypeScript\nDESCRIPTION: Specifies an optional string property that defines where JavaScript files will be output. If not defined, the default value is 'static/js'.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/api/rspeedy/rspeedy.distpath.js.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\njs?: string | undefined;\n```\n\n----------------------------------------\n\nTITLE: Markdown Table: Functions in react-rsbuild-plugin\nDESCRIPTION: This markdown table lists the functions available in the react-rsbuild-plugin package, specifically the pluginReactLynx function for creating a Rsbuild plugin for ReactLynx.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/rspeedy/react-rsbuild-plugin.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n|  Function | Description |\n|  --- | --- |\n|  [pluginReactLynx(userOptions)](./react-rsbuild-plugin.pluginreactlynx.md) | Create a rsbuild plugin for ReactLynx. |\n```\n\n----------------------------------------\n\nTITLE: Disabling HMR in Rspeedy Configuration\nDESCRIPTION: JavaScript example showing how to disable Hot Module Replacement in the Rspeedy configuration using the 'defineConfig' function.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/rspeedy/rspeedy.dev.hmr.md#2025-04-17_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineConfig } from '@lynx-js/rspeedy'\n\nexport default defineConfig({\n  dev: {\n    hmr: false,\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: CSS Syntax for align-self Property\nDESCRIPTION: The formal syntax for the align-self CSS property which accepts values like auto, center, start, end, flex-start, flex-end, baseline, and stretch.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/css/properties/align-self.mdx#2025-04-17_snippet_0\n\nLANGUAGE: css\nCODE:\n```\nalign-self = auto | center | start | end | flex-start | flex-end | baseline | stretch\n```\n\n----------------------------------------\n\nTITLE: Compiling Frontend Tag to Render Directive in JSX\nDESCRIPTION: Shows how a frontend tag with multiple classes is compiled into a render directive during the compilation phase.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/engine/element-api/__AddClass.mdx#2025-04-17_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<view src=\"xxx\" class=\"A B C\" />\n```\n\n----------------------------------------\n\nTITLE: Rspeedy Inspect Command Help\nDESCRIPTION: Help output for the inspect command showing options for viewing Rspeedy and Rspack configurations\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/rspeedy/cli.md#2025-04-17_snippet_6\n\nLANGUAGE: text\nCODE:\n```\n➜ rspeedy inspect --help\n\nUsage: rspeedy inspect [options]\n\nView the Rsbuild config and Rspack config of the project.\n\nOptions:\n  --mode <mode>         specify the mode of Rsbuild (default: \"development\")\n  --output <output>     specify inspect content output path\n  --verbose             show full function definitions in output\n  -c --config <config>  specify the configuration file, can be a relative or absolute path\n  --env-mode <mode>     specify the env mode to load the .env.[mode] file\n  -h, --help            display help for command\n```\n\n----------------------------------------\n\nTITLE: Accessing the layoutUiOperationExecuteEnd Property in PipelineEntry (TypeScript)\nDESCRIPTION: The layoutUiOperationExecuteEnd property provides the timestamp for the end of executing UI operations related to layout.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/lynx-api/performance-api/performance-entry/pipeline-entry.mdx#2025-04-17_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nlayoutUiOperationExecuteEnd: number;\n```\n\n----------------------------------------\n\nTITLE: Defining Need Visible Item Info Attribute in TSX\nDESCRIPTION: Defines the need-visible-item-info attribute that controls whether scroll event callbacks include position information of currently rendering nodes.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/elements/built-in/list.mdx#2025-04-17_snippet_14\n\nLANGUAGE: tsx\nCODE:\n```\n// DefaultValue: false\nneed-visible-item-info?: boolean\n```\n\n----------------------------------------\n\nTITLE: Configuring CSS Minification in RSpeedy\nDESCRIPTION: JavaScript configuration example showing how to customize CSS minification settings in RSpeedy config file. Demonstrates disabling error recovery in the Lightning CSS minimizer options.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/api/rspeedy/rspeedy.minify.cssoptions.md#2025-04-17_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineConfig } from '@lynx-js/rspeedy'\n\nexport default defineConfig({\n  output: {\n    minify: {\n      cssOptions: {\n        minimizerOptions: {\n          errorRecovery: false,\n        },\n      },\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Defining CssModules.localIdentName Type in TypeScript\nDESCRIPTION: Type definition for the localIdentName property that specifies the format pattern for generated CSS Module class names. The property is optional and can be either a string or undefined.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/rspeedy/rspeedy.cssmodules.localidentname.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nlocalIdentName?: string | undefined;\n```\n\n----------------------------------------\n\nTITLE: Defining prepareTemplateEnd Property in TypeScript\nDESCRIPTION: Defines the prepareTemplateEnd property that stores the template bundle preparation completion timestamp in milliseconds.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/lynx-api/performance-api/performance-entry/init-container-entry.mdx#2025-04-17_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nprepareTemplateEnd: number;\n```\n\n----------------------------------------\n\nTITLE: Example Swift Code for CodeFold Component\nDESCRIPTION: A Swift code example demonstrating Markdown parsing functionality. This example is intended for display within a foldable CodeFold component with toggle enabled.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/internal/docs-contribution-guide/doc-components.mdx#2025-04-17_snippet_10\n\nLANGUAGE: swift\nCODE:\n```\n/** example code: 左侧代码， 设置 toggle，支持折叠 */\n\nimport Markdown\n\nlet markdownText = \"# Hello, Swift Markdown!\\nThis is a sample paragraph.\"\ndo {\n    let document = try Document(parsing: markdownText)\n    document.children.forEach { element in\n        print(element)\n    }\n} catch {\n    print(\"Failed to parse Markdown: \\(error)\")\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Lynx DevTool Dependencies for Android (Groovy)\nDESCRIPTION: This snippet shows how to add lynx-devtool and lynx-service-devtool dependencies to the build.gradle file for Android integration using Groovy syntax.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/guide/start/integrate-lynx-devtool.mdx#2025-04-17_snippet_3\n\nLANGUAGE: groovy\nCODE:\n```\n// Ensure Lynx DevTool version matches the Lynx version when integrating\ndependencies {\n  implementation \"org.lynxsdk.lynx:lynx-devtool:3.2.0-rc.0\"\n  implementation \"org.lynxsdk.lynx:lynx-service-devtool:3.2.0-rc.0\"\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Lynx Components\nDESCRIPTION: Imports all components from the @lynx package as a namespace to enable dynamic lookup in TSDoc documentation.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/react/Interface.InitDataRaw.mdx#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as Lynx from '@lynx';\n```\n\n----------------------------------------\n\nTITLE: Initializing TemplateBundle from Template Data in Java\nDESCRIPTION: Static method to create a TemplateBundle object from binary template data. Returns null if input is null or an invalid TemplateBundle if data is incorrect.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/lynx-native-api/template-bundle.mdx#2025-04-17_snippet_0\n\nLANGUAGE: java\nCODE:\n```\npublic static TemplateBundle fromTemplate(byte[] template)\n```\n\n----------------------------------------\n\nTITLE: Border-Bottom Basic CSS Examples\nDESCRIPTION: Examples showing different border-bottom configurations using various width, style, and color combinations.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/css/properties/border-bottom.mdx#2025-04-17_snippet_0\n\nLANGUAGE: css\nCODE:\n```\n/* Bottom border with thick double red lines */\nborder-bottom: thick double red;\n\n/* Bottom border with thin dotted blue lines */\nborder-bottom: thin dotted blue;\n\n/* Bottom border with a 10px dashed orange line */\nborder-bottom: 10px dashed orange;\n```\n\n----------------------------------------\n\nTITLE: Basic Image Rendering CSS Syntax\nDESCRIPTION: Shows the basic syntax options for the image-rendering CSS property, including auto, crisp-edges, and pixelated values.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/css/properties/image-rendering.mdx#2025-04-17_snippet_0\n\nLANGUAGE: css\nCODE:\n```\nimage-rendering: auto;\nimage-rendering: crisp-edges;\nimage-rendering: pixelated;\n```\n\n----------------------------------------\n\nTITLE: SelectorQuery selectAll() Method Syntax in TypeScript\nDESCRIPTION: Defines the TypeScript signature for the selectAll() method which takes a CSS selector string and returns a NodesRef object.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/lynx-api/selector-query/selector-query-select-all.mdx#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nselectAll(selector: string): NodesRef;\n```\n\n----------------------------------------\n\nTITLE: Injecting iOS LynxTemplateResourceFetcher\nDESCRIPTION: Example of injecting a template resource fetcher implementation into LynxViewBuilder in iOS.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/lynx-native-api/resource-fetcher/TemplateResourceFetcher.mdx#2025-04-17_snippet_4\n\nLANGUAGE: objective-c\nCODE:\n```\nLynxViewBuilder *builder = [[LynxViewBuilder alloc] init];\nbuilder.templateResourceFetcher = [[ExampleTemplateResourceFetcher alloc] init];\n```\n\n----------------------------------------\n\nTITLE: Defining Decorators Interface in TypeScript\nDESCRIPTION: TypeScript interface definition for configuring decorator syntax versions. Includes an optional version property that can be set to either 'legacy' or '2022-03' to specify which decorator syntax specification to use.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/rspeedy/rspeedy.decorators.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface Decorators \n```\n\n----------------------------------------\n\nTITLE: Setting font-style in CSS\nDESCRIPTION: Examples of using the font-style property in CSS to set the font style to italic, oblique, or normal.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/css/properties/font-style.mdx#2025-04-17_snippet_0\n\nLANGUAGE: css\nCODE:\n```\nfont-style: italic;\nfont-style: oblique;\nfont-style: normal;\n```\n\n----------------------------------------\n\nTITLE: Defining debugInfoOutside Property Type in TypeScript\nDESCRIPTION: Defines an optional boolean property that controls whether debug information should be placed outside of templates to reduce template size. This configuration is part of the PluginReactLynxOptions interface used in the React Rsbuild plugin.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/api/rspeedy/react-rsbuild-plugin.pluginreactlynxoptions.debuginfooutside.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ndebugInfoOutside?: boolean;\n```\n\n----------------------------------------\n\nTITLE: CSS margin-inline-end Formal Syntax Definition\nDESCRIPTION: Formal syntax definition showing the allowed values and structure for the margin-inline-end property.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/css/properties/margin-inline-end.mdx#2025-04-17_snippet_1\n\nLANGUAGE: css\nCODE:\n```\nmargin-inline-end =\n  <length-percentage>  |\n  auto                 |\n\n<length-percentage> =\n  <length>      |\n  <percentage>\n```\n\n----------------------------------------\n\nTITLE: Defining the Source Interface in TypeScript\nDESCRIPTION: TypeScript interface definition for the Source configuration which controls the behavior of source files. This interface contains multiple optional properties for configuring various aspects of source file processing.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/api/rspeedy/rspeedy.source.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface Source \n```\n\n----------------------------------------\n\nTITLE: Formal Syntax Definition for z-index in CSS\nDESCRIPTION: Defines the formal syntax for the z-index property in CSS, specifying that it accepts an integer value.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/css/properties/z-index.mdx#2025-04-17_snippet_1\n\nLANGUAGE: css\nCODE:\n```\nz-index = <integer>\n```\n\n----------------------------------------\n\nTITLE: Defining CssExtractRspackLoaderOptions Interface in TypeScript\nDESCRIPTION: This code snippet defines the CssExtractRspackLoaderOptions interface, which represents the options for the CSS extract loader. It includes an optional 'esModule' property of type boolean.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/rspeedy/rspeedy.cssextractrspackloaderoptions.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface CssExtractRspackLoaderOptions \n{\n    esModule?: boolean | undefined;\n}\n```\n\n----------------------------------------\n\nTITLE: Deprecated UNSAFE_componentWillReceiveProps Method in React TypeScript\nDESCRIPTION: Deprecated method called when component may receive new props. Use static getDerivedStateFromProps instead.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/api/react/Class.PureComponent.mdx#2025-04-17_snippet_9\n\nLANGUAGE: TypeScript\nCODE:\n```\noptional UNSAFE_componentWillReceiveProps(nextProps: Readonly<P>, nextContext: any): void\n```\n\n----------------------------------------\n\nTITLE: Setting scroll-bar-enable Attribute in TypeScript\nDESCRIPTION: Demonstrates how to set the scroll-bar-enable attribute for the <list> component on iOS. This attribute controls whether the scroll bar is displayed.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/elements/built-in/list.mdx#2025-04-17_snippet_23\n\nLANGUAGE: tsx\nCODE:\n```\n// DefaultValue: true\nscroll-bar-enable?: boolean\n```\n\n----------------------------------------\n\nTITLE: Defining ignore-focus Property in TypeScript\nDESCRIPTION: Specifies whether to not grab focus when touching the target node. Supports inheritance and can be overridden by child nodes. Defaults to false.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/elements/built-in/view.mdx#2025-04-17_snippet_32\n\nLANGUAGE: typescript\nCODE:\n```\n// DefaultValue: false\nignore-focus?: boolean\n```\n\n----------------------------------------\n\nTITLE: Defining Root Interface render Method\nDESCRIPTION: TypeScript definition for the render method that accepts ReactNode JSX input for rendering.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/react/Interface.Root.mdx#2025-04-17_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nrender: (jsx: ReactNode) => void;\n```\n\n----------------------------------------\n\nTITLE: Formal Syntax for border-right-color\nDESCRIPTION: The formal syntax definition for the border-right-color CSS property, showing it accepts either the transparent keyword or any valid color value.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/css/properties/border-right-color.mdx#2025-04-17_snippet_1\n\nLANGUAGE: css\nCODE:\n```\ntransparent | <color>\n```\n\n----------------------------------------\n\nTITLE: Defining Android-Specific Flatten Attribute\nDESCRIPTION: Defines the 'flatten' attribute which is only available on Android platform and used to force specific nodes to create corresponding Android Views.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/elements/built-in/view.mdx#2025-04-17_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nflatten?: boolean;\n```\n\n----------------------------------------\n\nTITLE: Importing the Go Component in JSX\nDESCRIPTION: Shows how to import the Go component from the @lynx package.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/src/components/go/README.md#2025-04-17_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Go } from '@lynx';\n```\n\n----------------------------------------\n\nTITLE: Defining enableCSSInheritance Property in TypeScript\nDESCRIPTION: TypeScript signature for the enableCSSInheritance property in the PluginReactLynxOptions interface. This boolean property enables default CSS inheritance properties when set to true.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/api/rspeedy/react-rsbuild-plugin.pluginreactlynxoptions.enablecssinheritance.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nenableCSSInheritance?: boolean;\n```\n\n----------------------------------------\n\nTITLE: Disabling Live Reload in RSpeedy Configuration\nDESCRIPTION: Example of how to disable live reload functionality using the defineConfig function from @lynx-js/rspeedy. This configuration will prevent the page from automatically refreshing when source files change.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/api/rspeedy/rspeedy.dev.livereload.md#2025-04-17_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineConfig } from '@lynx-js/rspeedy'\n\nexport default defineConfig({\n  dev: {\n    liveReload: false,\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Defining LynxMediaResourceFetcher Protocol in Objective-C\nDESCRIPTION: Protocol definition for iOS that handles URL redirection and resource fetching. Includes methods for URL redirection, local resource checking, and UIImage fetching with completion callbacks.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/lynx-native-api/resource-fetcher/MediaResourceFetcher.mdx#2025-04-17_snippet_2\n\nLANGUAGE: objective-c\nCODE:\n```\n@protocol LynxMediaResourceFetcher <NSObject>\n\n@required\n- (NSString* _Nonnull)shouldRedirectUrl:(LynxResourceRequest* _Nonnull)request;\n\n/**\n * Quick check for a local path.\n *\n * @param url input path\n * @return TRUE if is a local path; FALSE if not a local path\n */\n@optional\n- (LynxResourceOptionalBool)isLocalResource:(NSURL* _Nonnull)url;\n\n/**\n * fetch UIImage directly.\n *\n * @param request\n * @param callback Response with the needed uiImage.\n *\n * @return A block which can cancel the image request if it is not finished. nil if cancel action is\n * not supported.\n */\n@optional\n- (dispatch_block_t)fetchUIImage:(LynxResourceRequest* _Nonnull)request\n                      onComplete:(LynxMediaResourceCompletionBlock _Nonnull)response;\n\n@end\n```\n\n----------------------------------------\n\nTITLE: Setting Element Configuration Function Signature\nDESCRIPTION: Function signature showing the type definition for __SetConfig which takes an Element and configuration object as parameters.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/engine/element-api/__SetConfig.mdx#2025-04-17_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n__SetConfig(element: Element, config: Record<string, any>) : void;\n```\n\n----------------------------------------\n\nTITLE: Defining Server Property Type in TypeScript\nDESCRIPTION: TypeScript type definition for the optional server property in the Config interface. The property accepts either a Server configuration object or undefined.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/rspeedy/rspeedy.config.server.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nserver?: Server | undefined;\n```\n\n----------------------------------------\n\nTITLE: Example Usage of mergeRspeedyConfig Function\nDESCRIPTION: Demonstrates how to use mergeRspeedyConfig to merge two configuration objects with conflicting dev.writeToDisk settings, showing how later configs override earlier ones.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/api/rspeedy/rspeedy.mergerspeedyconfig.md#2025-04-17_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { mergeRspeedyConfig } from '@lynx-js/rspeedy';\n\nconst config1 = {\n  dev: {\n    writeToDisk: false,\n  },\n};\nconst config2 = {\n  dev: {\n    writeToDisk: true,\n  },\n};\n\nconst mergedConfig = mergeRspeedyConfig(config1, config2);\n\nconsole.log(mergedConfig); // { dev: { writeToDisk: true } }\n```\n\n----------------------------------------\n\nTITLE: Excluding Specific Files and Directories in Rspeedy Configuration\nDESCRIPTION: Demonstrates how to exclude specific files or directories from compilation using patterns and file paths. This example shows excluding test directories, specific files, and files matching a pattern like story files.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/api/rspeedy/rspeedy.source.exclude.md#2025-04-17_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineConfig } from '@lynx-js/rspeedy'\n\nexport default defineConfig({\n  source: {\n    exclude: [\n      // Exclude all files in the test directory\n      /[\\\\/]test[\\\\/]/,\n      // Exclude specific file\n      './src/legacy-file.js',\n      // Exclude files matching a pattern\n      /\\.stories\\.(js|ts)x?$/,\n    ],\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: CSS Padding Bottom Formal Syntax\nDESCRIPTION: Formal syntax definition for the padding-bottom property showing allowed values and syntax structure. Defines the property can accept length or percentage values greater than or equal to 0.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/css/properties/padding-bottom.mdx#2025-04-17_snippet_1\n\nLANGUAGE: css\nCODE:\n```\npadding-bottom =\n  <length-percentage [0,∞]>\n\n<length-percentage> =\n  <length>      |\n  <percentage>\n```\n\n----------------------------------------\n\nTITLE: Importing Compatibility Table Component\nDESCRIPTION: Import statement for the LegacyCompatTable component used to display compatibility information for the animation-duration property.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/css/properties/animation-duration.mdx#2025-04-17_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\nimport { LegacyCompatTable } from '@lynx';\n```\n\n----------------------------------------\n\nTITLE: Defining useInitDataChanged Hook in TypeScript\nDESCRIPTION: Function signature definition for the useInitDataChanged hook that takes a callback parameter to handle initData changes.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/react/Function.useInitDataChanged.mdx#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction useInitDataChanged(callback: (data: InitData) => void): void\n```\n\n----------------------------------------\n\nTITLE: Configuring Web-Only Environment\nDESCRIPTION: Example demonstrating configuration for web-only output in RSpeedy.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/rspeedy/rspeedy.config.environments.md#2025-04-17_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineConfig } from '@lynx-js/rspeedy'\n\nexport default defineConfig({\n  environments: {\n    web: {\n      source: { entry: { web: './src/index.web.jsx' } },\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Basic CSS flex-basis Property Syntax\nDESCRIPTION: Examples showing various ways to specify the flex-basis property using different units including em, pixels, percentages and auto.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/api/css/properties/flex-basis.mdx#2025-04-17_snippet_0\n\nLANGUAGE: css\nCODE:\n```\n/* Specify <'width'> */\nflex-basis: 10em;\nflex-basis: 3px;\nflex-basis: 50%;\nflex-basis: auto;\n```\n\n----------------------------------------\n\nTITLE: Defining cssExtract Property Type in TypeScript\nDESCRIPTION: Type definition for the cssExtract property that configures CssExtractRspackPlugin. The property is optional and accepts either a CssExtract type or undefined.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/api/rspeedy/rspeedy.tools.cssextract.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ncssExtract?: CssExtract | undefined;\n```\n\n----------------------------------------\n\nTITLE: Defining experimental_isLazyBundle Property Type in TypeScript\nDESCRIPTION: Type definition for an experimental configuration option that enables standalone lazy bundle generation. This property is marked as alpha preview and should not be used in production environments.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/rspeedy/react-rsbuild-plugin.pluginreactlynxoptions.experimental_islazybundle.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexperimental_isLazyBundle?: boolean;\n```\n\n----------------------------------------\n\nTITLE: Using Assets in CSS\nDESCRIPTION: Shows how to reference static assets in CSS using url() function\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/rspeedy/assets.md#2025-04-17_snippet_1\n\nLANGUAGE: css\nCODE:\n```\n.logo {\n  background-image: url('../static/logo.png');\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Node.js TypeScript Support\nDESCRIPTION: Package.json configuration to enable TypeScript transformation using Node.js experimental features\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/rspeedy/cli.md#2025-04-17_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"build\": \"NODE_OPTIONS=--experimental-transform-types rspeedy build\"\n}\n```\n\n----------------------------------------\n\nTITLE: Defining CSS Classes for Named Export Example\nDESCRIPTION: This CSS snippet defines example classes that will be used to demonstrate the named export functionality in the JavaScript example.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/rspeedy/rspeedy.cssloadermodules.namedexport.md#2025-04-17_snippet_1\n\nLANGUAGE: css\nCODE:\n```\n.foo-baz {\n  color: red;\n}\n.bar {\n  color: blue;\n}\n.default {\n  color: green;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining CssExtract Interface in TypeScript\nDESCRIPTION: This code snippet defines the CssExtract interface, which controls the options of CssExtractRspackPlugin. It includes two optional properties: loaderOptions and pluginOptions.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/api/rspeedy/rspeedy.cssextract.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface CssExtract {\n  loaderOptions?: CssExtractRspackLoaderOptions | undefined;\n  pluginOptions?: CssExtractRspackPluginOptions | undefined;\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing the name Property in PipelineEntry (TypeScript)\nDESCRIPTION: The name property identifies the source of the Pipeline trigger, with possible values including loadBundle, reloadBundleFromNative, and others.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/lynx-api/performance-api/performance-entry/pipeline-entry.mdx#2025-04-17_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nname: string;\n```\n\n----------------------------------------\n\nTITLE: Method Signature for observe() in IntersectionObserver\nDESCRIPTION: The TypeScript method signature for the observe() method, which takes a selector string and a callback function.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/lynx-api/intersection-observer/intersection-observer-observe.mdx#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nobserve(selector: string, callback: Function): void;\n```\n\n----------------------------------------\n\nTITLE: Configuring High-Quality Source Maps for Production in JavaScript\nDESCRIPTION: Example of enabling high-quality source maps for production environment while using default for development.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/rspeedy/rspeedy.sourcemap.js.md#2025-04-17_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineConfig } from '@lynx-js/rspeedy'\n\nexport default defineConfig({\n  output: {\n    sourceMap: {\n      js: process.env['NODE_ENV'] === 'production'\n        ? 'source-map'\n        : 'cheap-module-source-map',\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Using stopExposure Method in TypeScript\nDESCRIPTION: The method signature for lynx.stopExposure which stops visibility detection of target nodes. The method takes an optional StopExposureOptions parameter.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/lynx-api/lynx/lynx-stop-exposure.mdx#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nstopExposure(options?: StopExposureOptions): void;\n```\n\n----------------------------------------\n\nTITLE: Universal Selector in CSS\nDESCRIPTION: Demonstrates the universal selector that matches all elements\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/css/selectors.mdx#2025-04-17_snippet_4\n\nLANGUAGE: css\nCODE:\n```\n* {  property declarations }\n```\n\n----------------------------------------\n\nTITLE: Defining Tools Configuration Type in TypeScript\nDESCRIPTION: TypeScript type definition for the optional tools property in the Config interface. The property accepts either a Tools object or undefined value.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/api/rspeedy/rspeedy.config.tools.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntools?: Tools | undefined;\n```\n\n----------------------------------------\n\nTITLE: Formal CSS Mask Syntax Definition\nDESCRIPTION: The formal syntax definition for the CSS mask property, detailing all possible combinations of values and parameters that can be used with this shorthand property.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/css/properties/mask.mdx#2025-04-17_snippet_1\n\nLANGUAGE: html\nCODE:\n```\nmask =\n<mask-layer\n  >#\n\n  <mask-layer>\n    =\n    <mask-reference>\n      ||\n      <position>\n        [ /\n        <bg-size>\n          ]? ||\n          <repeat-style>\n            ||\n            <box>\n              || [\n              <geometry-box>\n                | no-clip ]\n\n                <mask-reference>\n                  = none |\n                  <image>\n                    <position>\n                      = [ left | center | right ] || [ top | center | bottom ] |\n                      [ left | center | right |\n                      <length-percentage>\n                        ] [ top | center | bottom |\n                        <length-percentage>\n                          ]? | [ [ left | right ]\n                          <length-percentage>\n                            ] && [ [ top | bottom ]\n                            <length-percentage>\n                              ]\n\n                              <bg-size>\n                                = [\n                                <length-percentage [0,∞]>\n                                  | auto ]{1,2} | cover | contain\n\n                                  <repeat-style>\n                                    = repeat-x | repeat-y | [ repeat | space |\n                                    round | no-repeat ]{1,2}\n\n                                    <image>\n                                      =\n                                      <url>\n                                        |\n                                        <gradient>\n                                          <url>\n                                            = url(\n                                            <string>\n                                              <url-modifier\n                                                >* )\n\n                                                <box>\n                                                  = border-box | padding-box |\n                                                  content-box</box\n                                                ></url-modifier\n                                              ></string\n                                            ></url\n                                          ></gradient\n                                        ></url\n                                      ></image\n                                    ></repeat-style\n                                  ></length-percentage\n                                ></bg-size\n                              ></length-percentage\n                            ></length-percentage\n                          ></length-percentage\n                        ></length-percentage\n                      ></position\n                    ></image\n                  ></mask-reference\n                ></geometry-box\n              ></box\n            ></repeat-style\n          ></bg-size\n        ></position\n      ></mask-reference\n    ></mask-layer\n  ></mask-layer\n>\n```\n\n----------------------------------------\n\nTITLE: Defining JSX Transformation Options in TypeScript\nDESCRIPTION: This code snippet shows the TypeScript type definition for the 'jsx' property in the PluginReactLynxOptions interface. It allows for partial configuration of JSX transformer options.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/rspeedy/react-rsbuild-plugin.pluginreactlynxoptions.jsx.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\njsx?: Partial<JsxTransformerConfig> | undefined;\n```\n\n----------------------------------------\n\nTITLE: Importing Go Component for Example Visualization\nDESCRIPTION: This JSX snippet imports and uses the Go component to provide an interactive example of the column-gap property.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/css/properties/column-gap.mdx#2025-04-17_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Go } from '@lynx';\n\n<Go\n  example=\"css-api\"\n  defaultFile=\"src/column-gap/App.tsx\"\n  img=\"https://lf-lynx.tiktok-cdns.com/obj/lynx-artifacts-oss-sg/lynx-website/assets/doc/css/column-gap.png\"\n  defaultEntryFile=\"dist/column-gap.lynx.bundle\"\n  entry=\"src/column-gap\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Implementing Text Input Events in Lynx Custom Component (Java)\nDESCRIPTION: Java implementation of a custom Lynx input component that emits events when text changes. The component creates a native Android EditText view that sends custom events to the front-end when text is modified, handling bidirectional data flow.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/guide/custom-native-component/custom-component-android.mdx#2025-04-17_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nimport android.content.Context;\nimport android.text.Editable;\nimport android.text.TextWatcher;\nimport androidx.appcompat.widget.AppCompatEditText;\nimport com.lynx.tasm.behavior.LynxContext;\nimport com.lynx.tasm.behavior.LynxProp;\nimport com.lynx.tasm.behavior.ui.LynxUI;\nimport com.lynx.tasm.event.LynxCustomEvent;\nimport java.util.HashMap;\nimport java.util.Map;\n\npublic class LynxExplorerInput extends LynxUI<AppCompatEditText> {\n\n  private void emitEvent(String name, Map<String, Object> value) {\n    LynxCustomEvent detail = new LynxCustomEvent(getSign(), name);\n    if (value != null) {\n      for (Map.Entry<String, Object> entry : value.entrySet()) {\n        detail.addDetail(entry.getKey(), entry.getValue());\n      }\n    }\n    getLynxContext().getEventEmitter().sendCustomEvent(detail);\n  }\n\n  @Override\n  protected AppCompatEditText createView(Context context) {\n    AppCompatEditText view = new AppCompatEditText(context);\n    view.addTextChangedListener(new TextWatcher() {\n      @Override\n      public void afterTextChanged(Editable s) {\n        emitEvent(\"input\", new HashMap<String, Object>() {\n          {\n            put(\"value\", s.toString());\n          }\n        });\n      }\n\n      @Override\n      public void beforeTextChanged(CharSequence s, int start, int count, int after) {}\n\n      @Override\n      public void onTextChanged(CharSequence s, int start, int before, int count) {\n      }\n    });\n    return view;\n\n  }\n\n  public LynxExplorerInput(LynxContext context) {\n    super(context);\n  }\n\n  @Override\n  public void onLayoutUpdated() {\n    super.onLayoutUpdated();\n    int paddingTop = mPaddingTop + mBorderTopWidth;\n    int paddingBottom = mPaddingBottom + mBorderBottomWidth;\n    int paddingLeft = mPaddingLeft + mBorderLeftWidth;\n    int paddingRight = mPaddingRight + mBorderRightWidth;\n    mView.setPadding(paddingLeft, paddingTop, paddingRight, paddingBottom);\n  }\n\n  @LynxProp(name = \"value\")\n  public void setValue(String value) {\n    if (!value.equals(mView.getText().toString())) {\n      mView.setText(value);\n    }\n  }\n\n}\n```\n\n----------------------------------------\n\nTITLE: Defining CssExtractRspackPluginOptions Interface in TypeScript\nDESCRIPTION: TypeScript interface definition for CssExtractRspackPluginOptions which provides configuration options for the CssExtractRspackPlugin. The interface contains optional properties including ignoreOrder and pathinfo.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/api/rspeedy/rspeedy.cssextractrspackpluginoptions.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface CssExtractRspackPluginOptions {\n}\n```\n\n----------------------------------------\n\nTITLE: Defining name Property in TypeScript\nDESCRIPTION: Defines the name property which always returns 'container' as a string value.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/lynx-api/performance-api/performance-entry/init-container-entry.mdx#2025-04-17_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nname: string;\n```\n\n----------------------------------------\n\nTITLE: Defining IntersectionObserver relativeTo() Method Signature in TypeScript\nDESCRIPTION: This snippet shows the TypeScript signature for the relativeTo() method of IntersectionObserver. It specifies the method parameters and return type.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/api/lynx-api/intersection-observer/intersection-observer-relative-to.mdx#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nrelativeTo(\n  selector: string,\n  margins ? margins : {left: 0, right: 0, top: 0, bottom: 0}\n): IntersectionObserver;\n```\n\n----------------------------------------\n\nTITLE: Initializing Lynx Service in Kotlin Application\nDESCRIPTION: Kotlin implementation of Lynx Service initialization in an Android application. It initializes Fresco and registers essential Lynx services including Image, Log, and Http services.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/guide/start/fragments/android/integrating-lynx-with-existing-app-android.mdx#2025-04-17_snippet_5\n\nLANGUAGE: kotlin\nCODE:\n```\nimport android.app.Application\nimport com.facebook.drawee.backends.pipeline.Fresco\nimport com.facebook.imagepipeline.core.ImagePipelineConfig\nimport com.facebook.imagepipeline.memory.PoolConfig\nimport com.facebook.imagepipeline.memory.PoolFactory\nimport com.lynx.service.http.LynxHttpService\nimport com.lynx.service.image.LynxImageService\nimport com.lynx.service.log.LynxLogService\nimport com.lynx.tasm.service.LynxServiceCenter\n\nclass YourApplication : Application() {\n\n    override fun onCreate() {\n        super.onCreate()\n        initLynxService()\n    }\n\n    private fun initLynxService() {\n        // init Fresco which is needed by LynxImageService\n        val factory = PoolFactory(PoolConfig.newBuilder().build())\n        val builder = ImagePipelineConfig.newBuilder(applicationContext).setPoolFactory(factory)\n        Fresco.initialize(applicationContext, builder.build())\n\n        LynxServiceCenter.inst().registerService(LynxImageService.getInstance())\n        LynxServiceCenter.inst().registerService(LynxLogService)\n        LynxServiceCenter.inst().registerService(LynxHttpService)\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: createElement Generic Implementation\nDESCRIPTION: Generic type definition for creating React elements from string, function components, or class components.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/react/Function.createElement.mdx#2025-04-17_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nfunction createElement<P>(\n   type: string | FunctionComponent<P> | ComponentClass<P, any>,\n   props?: null | Attributes & P, ...\nchildren?: ReactNode[]): ReactElement<P>\n```\n\n----------------------------------------\n\nTITLE: Example of Import Statement Transformation in JavaScript\nDESCRIPTION: This example demonstrates how the transformToDefaultImport property affects import statements. It shows the input and output for both true and false/undefined cases.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/rspeedy/rspeedy.transformimport.transformtodefaultimport.md#2025-04-17_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Button } from 'foo'\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport Button from 'foo/button'\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Button } from 'foo/button'\n```\n\n----------------------------------------\n\nTITLE: Initializing LynxTemplateBundle in Objective-C\nDESCRIPTION: Creates a LynxTemplateBundle object from binary template data. Returns an invalid TemplateBundle if the input is not a correct Lynx template or is nil.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/api/lynx-native-api/template-bundle.mdx#2025-04-17_snippet_6\n\nLANGUAGE: objective-c\nCODE:\n```\n- (instancetype _Nullable)initWithTemplate:(nonnull NSData*)tem;\n```\n\n----------------------------------------\n\nTITLE: Building for Production\nDESCRIPTION: Command to create a production build of the Lynx website.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/README.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npnpm run build\n```\n\n----------------------------------------\n\nTITLE: Defining importLoaders Type in TypeScript\nDESCRIPTION: TypeScript type definition for the importLoaders property that specifies how many loaders should be applied to @imported resources and CSS modules imports before css-loader. Accepts values 0, 1, 2 or undefined.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/rspeedy/rspeedy.cssloader.importloaders.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimportLoaders?: 0 | 1 | 2 | undefined;\n```\n\n----------------------------------------\n\nTITLE: Transformed Named Import Example\nDESCRIPTION: Example of an import statement when transformToDefaultImport is false or undefined.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/api/rspeedy/rspeedy.transformimport.transformtodefaultimport.md#2025-04-17_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Button } from 'foo/button'\n```\n\n----------------------------------------\n\nTITLE: Getting Error Message from LynxTemplateBundle in Objective-C\nDESCRIPTION: Retrieves exception messages that occurred during template parsing. If this method returns nil, it indicates the LynxTemplateBundle is valid.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/api/lynx-native-api/template-bundle.mdx#2025-04-17_snippet_7\n\nLANGUAGE: objective-c\nCODE:\n```\n- (NSString* _Nullable)errorMsg;\n```\n\n----------------------------------------\n\nTITLE: Defining Development Configuration Type in TypeScript\nDESCRIPTION: Type definition for the dev configuration property that accepts either a Dev object or undefined. This property controls development-specific features like Hot Module Replacement (HMR) and Development Server settings.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/rspeedy/rspeedy.config.dev.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ndev?: Dev | undefined;\n```\n\n----------------------------------------\n\nTITLE: Configuring RSpeedy Minification Settings\nDESCRIPTION: Example configuration showing how to disable code minification in RSpeedy using the defineConfig function.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/api/rspeedy/rspeedy.output.minify.md#2025-04-17_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineConfig } from '@lynx-js/rspeedy'\nexport default defineConfig({\n  output: {\n    minify: false,\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Importing PropertyDefinition Component\nDESCRIPTION: Code for importing the PropertyDefinition component used to display formal definition of the overflow-x CSS property.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/api/css/properties/overflow-x.mdx#2025-04-17_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport { PropertyDefinition } from '@/components/PropertyDefinition';\n\n<PropertyDefinition\n  initialValue={<>visible</>}\n  appliesTo={<>all elements</>}\n  inherited=\"no\"\n  animatable=\"no\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Source Code After Transformation\nDESCRIPTION: Example of transformed source code after the transformImport option is applied, showing the expanded path to the Button component.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/api/rspeedy/rspeedy.source.transformimport.md#2025-04-17_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Button } from 'foo/src/components/Button/Button'\n```\n\n----------------------------------------\n\nTITLE: Formal Syntax Definition for CSS bottom Property\nDESCRIPTION: The formal syntax definition for the 'bottom' CSS property, showing its possible values and structure.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/css/properties/bottom.mdx#2025-04-17_snippet_1\n\nLANGUAGE: css\nCODE:\n```\nbottom =\n  auto                |\n  <length-percentage>\n\n<length-percentage> =\n  <length>      |\n  <percentage>\n```\n\n----------------------------------------\n\nTITLE: CSS Letter-Spacing Formal Syntax Definition\nDESCRIPTION: The formal syntax definition for the letter-spacing property in Lynx, showing it only accepts length values.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/css/properties/letter-spacing.mdx#2025-04-17_snippet_1\n\nLANGUAGE: css\nCODE:\n```\n<length>\n```\n\n----------------------------------------\n\nTITLE: Defining Server Port Type in TypeScript\nDESCRIPTION: TypeScript type definition for the server port property, allowing either a number or undefined value.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/rspeedy/rspeedy.server.port.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nport?: number | undefined;\n```\n\n----------------------------------------\n\nTITLE: CSS Flex Direction Formal Syntax\nDESCRIPTION: Defines the formal syntax specification for the flex-direction property showing all possible values.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/css/properties/flex-direction.mdx#2025-04-17_snippet_1\n\nLANGUAGE: css\nCODE:\n```\nflex-direction =\n  row             |\n  row-reverse     |\n  column          |\n  column-reverse\n```\n\n----------------------------------------\n\nTITLE: Importing React Components in TypeScript\nDESCRIPTION: Imports all components from the @lynx package as a namespace to allow dynamic lookup in TSDoc writings.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/react/Function.useMemo.mdx#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as Lynx from '@lynx';\n```\n\n----------------------------------------\n\nTITLE: Declaring Server.base Property Type in TypeScript\nDESCRIPTION: TypeScript signature for the Server.base property, which can be either a string or undefined and is used to configure the server's base path.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/api/rspeedy/rspeedy.server.base.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nbase?: string | undefined;\n```\n\n----------------------------------------\n\nTITLE: Defining experimental_isLazyBundle Property in PluginReactLynxOptions Interface\nDESCRIPTION: This code snippet defines the experimental_isLazyBundle property in the PluginReactLynxOptions interface. It is an optional boolean property used to enable the generation of standalone lazy bundles. This feature is currently in alpha and not recommended for production use.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/api/rspeedy/react-rsbuild-plugin.pluginreactlynxoptions.experimental_islazybundle.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexperimental_isLazyBundle?: boolean;\n```\n\n----------------------------------------\n\nTITLE: Importing ButtonGroup Component (Input Example)\nDESCRIPTION: Example of importing a ButtonGroup component before applying the camelToDashComponentName transformation.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/api/rspeedy/rspeedy.transformimport.cameltodashcomponentname.md#2025-04-17_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ButtonGroup } from 'foo'\n```\n\n----------------------------------------\n\nTITLE: Extracting LynxExplorer x86_64 Archive\nDESCRIPTION: Commands to create directory and extract the LynxExplorer x86_64 application archive\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/guide/start/quick-start.mdx#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmkdir -p LynxExplorer-x86_64.app/\ntar -zxf LynxExplorer-x86_64.app.tar.gz -C LynxExplorer-x86_64.app/\n```\n\n----------------------------------------\n\nTITLE: Using pluginReactLynx in Rsbuild Configuration\nDESCRIPTION: This example demonstrates how to use the pluginReactLynx function in a Rsbuild configuration file. It imports the function from '@lynx-js/react-rsbuild-plugin' and adds it to the plugins array.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/rspeedy/react-rsbuild-plugin.pluginreactlynx.md#2025-04-17_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// rsbuild.config.ts\nimport { pluginReactLynx } from '@lynx-js/react-rsbuild-plugin'\nexport default {\n  plugins: [pluginReactLynx()]\n}\n```\n\n----------------------------------------\n\nTITLE: Defining the AppendElement Function Syntax in JSX\nDESCRIPTION: Function signature for __AppendElement which takes a parent Element and a child Element as parameters, and returns the appended child Element.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/engine/element-api/__AppendElement.mdx#2025-04-17_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n__AppendElement(parent: Element, child: Element) : Element;\n```\n\n----------------------------------------\n\nTITLE: Retrieving ExtraInfo from TemplateBundle in Java\nDESCRIPTION: Retrieves the extraInfo field from the pageConfig in the template. Returns null if extraInfo is not configured or if called on an empty TemplateBundle.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/api/lynx-native-api/template-bundle.mdx#2025-04-17_snippet_1\n\nLANGUAGE: java\nCODE:\n```\npublic Map<String, Object> getExtraInfo()\n```\n\n----------------------------------------\n\nTITLE: Importing Lynx Documentation Components in MDX\nDESCRIPTION: Shows how to import and use Lynx documentation components either individually or as a namespace in MDX files. These components help make documentation more interactive and expressive.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/internal/docs-contribution-guide/doc-components.mdx#2025-04-17_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n// 独立导入\nimport { APITable } from '@lynx';\n<APITable />;\n\n// 导入所有组件为 Lynx 对象\nimport * as Lynx from '@lynx';\n<Lynx.APITable />;\n```\n\n----------------------------------------\n\nTITLE: Defining CSS bottom Property Values\nDESCRIPTION: Examples of various ways to set the 'bottom' CSS property, including length values, percentages, keywords, and calc() function.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/css/properties/bottom.mdx#2025-04-17_snippet_0\n\nLANGUAGE: css\nCODE:\n```\n/* <length> values */\nbottom: 3px;\nbottom: 2rpx;\nbottom: 2.4em;\nbottom: 3rem;\n\nbottom: 10%;\n\n/* Keyword value */\nbottom: auto;\n\n/* calc */\nbottom: calc(1px + 1px);\n```\n\n----------------------------------------\n\nTITLE: CSS @import Basic Syntax\nDESCRIPTION: Shows the basic syntax for the CSS @import rule which requires a string parameter representing the path to the stylesheet to import.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/css/at-rule/import.mdx#2025-04-17_snippet_0\n\nLANGUAGE: css\nCODE:\n```\n@import <string>;\n```\n\n----------------------------------------\n\nTITLE: CSS Padding-Left Basic Syntax Examples\nDESCRIPTION: Examples showing the different ways to specify padding-left values, including length units and percentage values.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/api/css/properties/padding-left.mdx#2025-04-17_snippet_0\n\nLANGUAGE: css\nCODE:\n```\n/* <length> values */\npadding-left: 0.5em;\npadding-left: 0;\n\n/* <percentage> value */\npadding-left: 10%;\n```\n\n----------------------------------------\n\nTITLE: Displaying Color Samples with React Components (Named Colors)\nDESCRIPTION: These code snippets demonstrate how to create color sample divs for various named colors using React's inline styling. Each div uses the rgba color format with consistent styling (padding and margin) to display color swatches.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/api/css/data-type/color.mdx#2025-04-17_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<div style={{ padding: '17.5px 90px', margin: '-10px', backgroundColor: 'rgba(65, 105, 225, 1)' }}></div>\n```\n\nLANGUAGE: jsx\nCODE:\n```\n<div style={{ padding: '17.5px 90px', margin: '-10px', backgroundColor: 'rgba(139, 69, 19, 1)' }}></div>\n```\n\nLANGUAGE: jsx\nCODE:\n```\n<div style={{ padding: '17.5px 90px', margin: '-10px', backgroundColor: 'rgba(250, 128, 114, 1)' }}></div>\n```\n\nLANGUAGE: jsx\nCODE:\n```\n<div style={{ padding: '17.5px 90px', margin: '-10px', backgroundColor: 'rgba(244, 164, 96, 1)' }}></div>\n```\n\nLANGUAGE: jsx\nCODE:\n```\n<div style={{ padding: '17.5px 90px', margin: '-10px', backgroundColor: 'rgba(46, 139, 87, 1)' }}></div>\n```\n\nLANGUAGE: jsx\nCODE:\n```\n<div style={{ padding: '17.5px 90px', margin: '-10px', backgroundColor: 'rgba(255, 245, 238, 1)' }}></div>\n```\n\nLANGUAGE: jsx\nCODE:\n```\n<div style={{ padding: '17.5px 90px', margin: '-10px', backgroundColor: 'rgba(160, 82, 45, 1)' }}></div>\n```\n\nLANGUAGE: jsx\nCODE:\n```\n<div style={{ padding: '17.5px 90px', margin: '-10px', backgroundColor: 'rgba(192, 192, 192, 1)' }}></div>\n```\n\nLANGUAGE: jsx\nCODE:\n```\n<div style={{ padding: '17.5px 90px', margin: '-10px', backgroundColor: 'rgba(135, 206, 235, 1)' }}></div>\n```\n\nLANGUAGE: jsx\nCODE:\n```\n<div style={{ padding: '17.5px 90px', margin: '-10px', backgroundColor: 'rgba(106, 90, 205, 1)' }}></div>\n```\n\nLANGUAGE: jsx\nCODE:\n```\n<div style={{ padding: '17.5px 90px', margin: '-10px', backgroundColor: 'rgba(112, 128, 144, 1)' }}></div>\n```\n\nLANGUAGE: jsx\nCODE:\n```\n<div style={{ padding: '17.5px 90px', margin: '-10px', backgroundColor: 'rgba(112, 128, 144, 1)' }}></div>\n```\n\nLANGUAGE: jsx\nCODE:\n```\n<div style={{ padding: '17.5px 90px', margin: '-10px', backgroundColor: 'rgba(255, 250, 250, 1)' }}></div>\n```\n\nLANGUAGE: jsx\nCODE:\n```\n<div style={{ padding: '17.5px 90px', margin: '-10px', backgroundColor: 'rgba(0, 255, 127, 1)' }}></div>\n```\n\nLANGUAGE: jsx\nCODE:\n```\n<div style={{ padding: '17.5px 90px', margin: '-10px', backgroundColor: 'rgba(70, 130, 180, 1)' }}></div>\n```\n\nLANGUAGE: jsx\nCODE:\n```\n<div style={{ padding: '17.5px 90px', margin: '-10px', backgroundColor: 'rgba(210, 180, 140, 1)' }}></div>\n```\n\nLANGUAGE: jsx\nCODE:\n```\n<div style={{ padding: '17.5px 90px', margin: '-10px', backgroundColor: 'rgba(0, 128, 128, 1)' }}></div>\n```\n\nLANGUAGE: jsx\nCODE:\n```\n<div style={{ padding: '17.5px 90px', margin: '-10px', backgroundColor: 'rgba(216, 191, 216, 1)' }}></div>\n```\n\nLANGUAGE: jsx\nCODE:\n```\n<div style={{ padding: '17.5px 90px', margin: '-10px', backgroundColor: 'rgba(255, 99, 71, 1)' }}></div>\n```\n\nLANGUAGE: jsx\nCODE:\n```\n<div style={{ padding: '17.5px 90px', margin: '-10px', backgroundColor: 'rgba(64, 224, 208, 1)' }}></div>\n```\n\nLANGUAGE: jsx\nCODE:\n```\n<div style={{ padding: '17.5px 90px', margin: '-10px', backgroundColor: 'rgba(238, 130, 238, 1)' }}></div>\n```\n\nLANGUAGE: jsx\nCODE:\n```\n<div style={{ padding: '17.5px 90px', margin: '-10px', backgroundColor: 'rgba(245, 222, 179, 1)' }}></div>\n```\n\nLANGUAGE: jsx\nCODE:\n```\n<div style={{ padding: '17.5px 90px', margin: '-10px', backgroundColor: 'rgba(255, 255, 255, 1)' }}></div>\n```\n\nLANGUAGE: jsx\nCODE:\n```\n<div style={{ padding: '17.5px 90px', margin: '-10px', backgroundColor: 'rgba(245, 245, 245, 1)' }}></div>\n```\n\nLANGUAGE: jsx\nCODE:\n```\n<div style={{ padding: '17.5px 90px', margin: '-10px', backgroundColor: 'rgba(255, 255, 0, 1)' }}></div>\n```\n\nLANGUAGE: jsx\nCODE:\n```\n<div style={{ padding: '17.5px 90px', margin: '-10px', backgroundColor: 'rgba(154, 205, 50, 1)' }}></div>\n```\n\n----------------------------------------\n\nTITLE: Getting Error Message from TemplateBundle in Objective-C\nDESCRIPTION: Retrieves exception information from template parsing. Returns nil if LynxTemplateBundle is valid.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/lynx-native-api/template-bundle.mdx#2025-04-17_snippet_7\n\nLANGUAGE: objective-c\nCODE:\n```\n- (NSString* _Nullable)errorMsg;\n```\n\n----------------------------------------\n\nTITLE: Importing Go Component in JSX\nDESCRIPTION: Imports the Go component from the Lynx framework, likely used for rendering code examples or interactive demos.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/api/css/properties/linear-gravity.mdx#2025-04-17_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Go } from '@lynx';\n```\n\n----------------------------------------\n\nTITLE: Using border-bottom-left-radius with Different Value Types in CSS\nDESCRIPTION: Examples showing how to use border-bottom-left-radius with circular (single value) and elliptical (two values) corners. The first example uses pixels for a circular corner, while the second uses em units to create an elliptical corner.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/css/properties/border-bottom-left-radius.mdx#2025-04-17_snippet_0\n\nLANGUAGE: css\nCODE:\n```\n/* The corner is a circle */\n/* border-bottom-left-radius: radius */\nborder-bottom-left-radius: 3px;\n\n/* The corner is an ellipse */\n/* border-bottom-left-radius: horizontal vertical */\nborder-bottom-left-radius: 0.5em 1em;\n```\n\n----------------------------------------\n\nTITLE: Defining linear-cross-gravity CSS Property in Lynx\nDESCRIPTION: This snippet demonstrates the syntax for using the linear-cross-gravity CSS property in Lynx. It shows various possible values for positioning child elements on the cross axis of a linear layout container.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/css/properties/linear-cross-gravity.mdx#2025-04-17_snippet_0\n\nLANGUAGE: css\nCODE:\n```\nlinear-cross-gravity: none;\nlinear-cross-gravity: start;\nlinear-cross-gravity: end;\nlinear-cross-gravity: center;\nlinear-cross-gravity: stretch;\n```\n\n----------------------------------------\n\nTITLE: Formal Syntax Definition for max-width in Lynx CSS\nDESCRIPTION: Formal syntax definition for the max-width property in Lynx CSS. It specifies that max-width accepts length-percentage values greater than or equal to 0.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/css/properties/max-width.mdx#2025-04-17_snippet_2\n\nLANGUAGE: css\nCODE:\n```\nmax-width = <length-percentage [0,∞]>\n\n<length-percentage> =\n  <length>      |\n  <percentage>\n```\n\n----------------------------------------\n\nTITLE: Defining createLynxStart Property for InitLynxviewEntry in TypeScript\nDESCRIPTION: This snippet shows the type definition for the createLynxStart property, which represents the start time of LynxView creation as a Unix timestamp in milliseconds.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/api/lynx-api/performance-api/performance-entry/init-lynxview-entry.mdx#2025-04-17_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\ncreateLynxStart: number;\n```\n\n----------------------------------------\n\nTITLE: Invalid CSS Number Examples\nDESCRIPTION: Examples of invalid CSS number formats that demonstrate common syntax errors and formatting mistakes.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/css/data-type/number.mdx#2025-04-17_snippet_1\n\nLANGUAGE: css\nCODE:\n```\n12.         Decimal points must be followed by at least one digit.\n+-12.2      Only one leading +/- is allowed.\n12.1.1      Only one decimal point is allowed.\n```\n\n----------------------------------------\n\nTITLE: Configuring Advanced File Watching with Chokidar Options in JavaScript\nDESCRIPTION: This example shows how to use advanced file watching configuration with chokidar options. It specifies paths to watch and sets the usePolling option to false.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/api/rspeedy/rspeedy.dev.watchfiles.md#2025-04-17_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineConfig } from '@lynx-js/rspeedy'\n\nexport default defineConfig({\n  dev: {\n    watchFiles: {\n      paths: ['src/**', 'public/**'],\n      options: { usePolling: false },\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Defining NodesRef path() Method in TypeScript\nDESCRIPTION: TypeScript definition of the path() method in the NodesRef class, which accepts a callback function and returns a SelectorQuery object.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/lynx-api/nodes-ref/nodes-ref-path.mdx#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\npath(callback: (data: object, status: object) => void): SelectorQuery;\n```\n\n----------------------------------------\n\nTITLE: Retrieving Event Listeners with __GetEvents in Lynx Framework (JSX)\nDESCRIPTION: Demonstrates how to use the __GetEvents function to retrieve event listeners from an Element. The example shows creating an element, setting attributes and events, then retrieving the event listeners array.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/engine/element-api/__GetEvents.mdx#2025-04-17_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n__GetEvents(element: Element) : Array<Record<string, any>>;\n```\n\nLANGUAGE: jsx\nCODE:\n```\n// main-thread.js\nlet element = __CreateElement('view', 0, {});\n__SetAttribute(element, 'src', 'xx');\n\n__SetEvents(element, [{ type: 'bindEvent', name: 'tap', function: 'onTap' }]);\n\nlet listeners = __GetEvents(element);\n```\n\n----------------------------------------\n\nTITLE: Defining requestResourcePrefetch Method Signature in TypeScript\nDESCRIPTION: This snippet shows the TypeScript function signature for the requestResourcePrefetch method. It takes a data object and a callback function as parameters, and returns void.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/lynx-api/lynx/lynx-request-resource-prefetch.mdx#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nrequestResourcePrefetch(data: object, callback: (res: object) => void) : void;\n```\n\n----------------------------------------\n\nTITLE: Defining CSS Property Compatibility Structure in JSON\nDESCRIPTION: Example JSON structure showing how CSS property compatibility data is organized hierarchically with __compat objects. Demonstrates the structure for the align-self property with its start and end variants.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/packages/lynx-compat-data/schemas/compat-data-schema.md#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"css\": {\n    \"properties\": {\n      \"align-self\": {\n        \"__compat\": {},\n        \"start\": {\n          \"__compat\": {}\n        },\n        \"end\": {\n          \"__compat\": {}\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Project Navigation Commands\nDESCRIPTION: Terminal commands for navigating between projects and entering project directories.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/guide/start/fragments/web/integrating-lynx-with-web.mdx#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncd <lynx-project-name>\n```\n\n----------------------------------------\n\nTITLE: Modifying CSS Variables through Selector Switching\nDESCRIPTION: Demonstrates how to change CSS variable values by switching selectors applied to ancestor nodes.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/css/properties/css-variable.mdx#2025-04-17_snippet_5\n\nLANGUAGE: css\nCODE:\n```\n.a {\n  --main-bg-color: red;\n}\n\n.b {\n  --main-bg-color: blue;\n}\n\n.child {\n  background-color: var(--main-bg-color);\n  width: 25%;\n}\n```\n\nLANGUAGE: jsx\nCODE:\n```\n<view className={flag ? 'a' : 'b'}>\n  <view>\n    <view className=\"child\"></view>\n  </view>\n</view>\n```\n\n----------------------------------------\n\nTITLE: Defining DistPath Interface in TypeScript\nDESCRIPTION: TypeScript interface definition that extends DistPathConfig to specify the directory structure for distribution files. Includes an optional intermediate property for setting the output directory of intermediate files.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/rspeedy/rspeedy.distpath.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface DistPath extends DistPathConfig \n```\n\n----------------------------------------\n\nTITLE: Disabling File Size Output in Rspeedy\nDESCRIPTION: Example showing how to completely disable file size output by setting printFileSize to false.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/rspeedy/rspeedy.performance.printfilesize.md#2025-04-17_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineConfig } from '@lynx-js/rspeedy'\n\nexport default defineConfig({\n  performance: {\n    printFileSize: false\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Extracting LynxExplorer ARM64 Archive\nDESCRIPTION: Commands to create directory and extract the LynxExplorer ARM64 application archive\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/guide/start/quick-start.mdx#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmkdir -p LynxExplorer-arm64.app/\ntar -zxf LynxExplorer-arm64.app.tar.gz -C LynxExplorer-arm64.app/\n```\n\n----------------------------------------\n\nTITLE: Defining RSpeedy Minify Property Type\nDESCRIPTION: TypeScript type definition for the minify property in the Output configuration object. The property can accept a Minify object, boolean value, or be undefined.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/api/rspeedy/rspeedy.output.minify.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nminify?: Minify | boolean | undefined;\n```\n\n----------------------------------------\n\nTITLE: Defining the Entry Type in TypeScript for rSpeedy\nDESCRIPTION: TypeScript type definition for the Entry option in rSpeedy. It can be a string, string array, or a record of entry points with optional EntryDescription objects.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/api/rspeedy/rspeedy.entry.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport type Entry = string | string[] | Record<string, string | string[] | EntryDescription>;\n```\n\n----------------------------------------\n\nTITLE: Defining JavaScript Minification Type in TypeScript\nDESCRIPTION: TypeScript type definition for the JavaScript minification property that can be either a boolean or undefined.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/api/rspeedy/rspeedy.minify.js.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\njs?: boolean | undefined;\n```\n\n----------------------------------------\n\nTITLE: Disabling Inlining of Static Assets\nDESCRIPTION: Example of using defineConfig to set dataUriLimit to 0, which will disable inlining of all static assets.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/rspeedy/rspeedy.output.dataurilimit.md#2025-04-17_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineConfig } from '@lynx-js/rspeedy'\nexport default defineConfig({\n  output: {\n    dataUriLimit: 0,\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Formal syntax for border-inline-start-color in CSS\nDESCRIPTION: The formal syntax definition for the border-inline-start-color property, showing that it accepts either the transparent keyword or any valid color value.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/css/properties/border-inline-start-color.mdx#2025-04-17_snippet_1\n\nLANGUAGE: css\nCODE:\n```\ntransparent | <color>\n```\n\n----------------------------------------\n\nTITLE: Formal Syntax Definition for linear-gravity in Lynx\nDESCRIPTION: This code block defines the formal syntax for the linear-gravity property in Lynx CSS. It specifies the allowed values for the property.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/css/properties/linear-gravity.mdx#2025-04-17_snippet_1\n\nLANGUAGE: css\nCODE:\n```\nlinear-gravity = none | start | end | center | space-between\n```\n\n----------------------------------------\n\nTITLE: Example JSX Element with Class Attribute\nDESCRIPTION: Example of frontend JSX markup that will be compiled into render instructions using the __SetClasses function. This shows a view element with class selectors A, B, and C.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/engine/element-api/__SetClasses.mdx#2025-04-17_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<view src=\"xxx\" class=\"A B C\" />\n```\n\n----------------------------------------\n\nTITLE: Configuring Server Host Example\nDESCRIPTION: Example showing how to configure a custom host IP address using defineConfig in a JavaScript configuration file\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/rspeedy/rspeedy.server.host.md#2025-04-17_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineConfig } from '@lynx-js/rspeedy'\nexport default defineConfig({\n  server: {\n    host: \"192.168.1.50\",\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Demonstrating column-gap CSS Property Usage\nDESCRIPTION: This snippet shows various ways to use the column-gap property in CSS, including length values, percentage values, and calc() function.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/css/properties/column-gap.mdx#2025-04-17_snippet_0\n\nLANGUAGE: css\nCODE:\n```\n/* <length> values */\ncolumn-gap: 20px;\ncolumn-gap: 1em;\n\n/* <percentage> value */\ncolumn-gap: 10%;\n\n/* calc() values */\ncolumn-gap: calc(10% + 20px);\n```\n\n----------------------------------------\n\nTITLE: Defining Margins Parameter Structure in TypeScript\nDESCRIPTION: The TypeScript definition of the margins parameter showing its structure with left, right, top, and bottom properties. These margins specify how the reference node's viewport boundaries should be adjusted for intersection detection.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/lynx-api/intersection-observer/intersection-observer-relative-to-viewport.mdx#2025-04-17_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nmargins ? margins : { left: 0, right: 0, top: 0, bottom: 0 };\n```\n\n----------------------------------------\n\nTITLE: Configuring Monorepo Library Compilation\nDESCRIPTION: Example demonstrating how to set up source.include to compile libraries within a monorepo structure while excluding node_modules.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/rspeedy/rspeedy.source.include.md#2025-04-17_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport path from 'node:path'\nimport { fileURLToPath } from 'node:url'\n\nimport { defineConfig } from '@lynx-js/rspeedy'\n\nconst __dirname = path.dirname(fileURLToPath(import.meta.url))\n\nconst packagesDir = path.resolve(__dirname, '../../packages')\n\nexport default defineConfig({\n  source: {\n    include: [\n      // Compile all files in Monorepo's package directory\n      // It is recommended to exclude the node_modules\n      {\n        and: [packagesDir, { not: /[\\/]node_modules[\\/]/ }],\n      },\n    ],\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Defining View Exposure Scene Attribute in TypeScript\nDESCRIPTION: Defines the 'exposure-scene' attribute used with exposure-id to uniquely identify nodes that need exposure monitoring.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/elements/built-in/view.mdx#2025-04-17_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\n// DefaultValue: undefined\nexposure-scene?: string\n```\n\n----------------------------------------\n\nTITLE: Multiple Locale Import Approaches\nDESCRIPTION: Comparison of different approaches to import multiple locale files\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/guide/inclusion/internationalization.mdx#2025-04-17_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n// Static-imported locales that can be shown at first screen\nimport enTranslation from './locales/en.json';\nimport zhTranslation from './locales/zh.json';\nimport itTranslation from './locales/it.json';\nimport jpTranslation from './locales/jp.json';\nimport deTranslation from './locales/de.json';\nimport esTranslation from './locales/es.json';\nimport frTranslation from './locales/fr.json';\nimport idTranslation from './locales/id.json';\nimport ptTranslation from './locales/pt.json';\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconst localesContext = import.meta.webpackContext('./locales', {\n  recursive: false,\n  regExp: /\\.json$/,\n});\nconst enTranslation = localesContext('en.json');\n```\n\n----------------------------------------\n\nTITLE: Using CodeFold Component for Interactive Examples\nDESCRIPTION: Shows how to use the CodeFold component to display code examples with adjustable height and foldable display options. This component enhances code presentation with optional image display.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/internal/docs-contribution-guide/doc-components.mdx#2025-04-17_snippet_8\n\nLANGUAGE: mdx\nCODE:\n```\n<CodeFold img=\"https://lf-lynx.tiktok-cdns.com/obj/lynx-artifacts-oss-sg/lynx-website/assets/doc/view_render.jpeg\" height={420} toggle>\n  ```tsx\n  /** example code */\n  ```\n</CodeFold>\n```\n\n----------------------------------------\n\nTITLE: Compatibility Table Component for text-indent\nDESCRIPTION: JSX component that displays a compatibility table for the text-indent CSS property across different platforms.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/css/properties/text-indent.mdx#2025-04-17_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\n<LegacyCompatTable metadata=\"css/properties/text-indent\" />\n```\n\n----------------------------------------\n\nTITLE: Defining enableCSSInheritance Property in TypeScript\nDESCRIPTION: TypeScript type definition for the enableCSSInheritance property, which is an optional boolean property that enables default CSS inheritance properties. When enabled, it allows specific CSS properties like direction, color, font-related properties, and text-related properties to be inherited by child components.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/rspeedy/react-rsbuild-plugin.pluginreactlynxoptions.enablecssinheritance.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nenableCSSInheritance?: boolean;\n```\n\n----------------------------------------\n\nTITLE: Defining targetSdkVersion Property in TypeScript Interface\nDESCRIPTION: TypeScript interface property definition for targetSdkVersion in PluginReactLynxOptions. This property is marked as obsolete and is now an alias of engineVersion. It accepts an optional string value to specify the minimal Lynx Engine version required for app execution.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/api/rspeedy/react-rsbuild-plugin.pluginreactlynxoptions.targetsdkversion.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntargetSdkVersion?: string;\n```\n\n----------------------------------------\n\nTITLE: Using disconnect() Method with PerformanceObserver in TypeScript\nDESCRIPTION: Example of the disconnect() method syntax for PerformanceObserver. This method stops the observer from receiving performance events and doesn't take any parameters or return any values.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/lynx-api/performance-api/performance-observer/disconnect.mdx#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ndisconnect();\n```\n\n----------------------------------------\n\nTITLE: Creating LynxLoadMeta Object in iOS\nDESCRIPTION: This code shows how to create and configure a LynxLoadMeta object in iOS. It initializes the object and sets properties for URL, binary data, template bundle, initial data, and load options using Objective-C syntax.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/api/lynx-native-api/lynx-load-meta.mdx#2025-04-17_snippet_1\n\nLANGUAGE: objective-c\nCODE:\n```\nLynxLoadMeta* meta = [LynxLoadMeta init];\nmeta.url = @\"\";\nmeta.binaryData = nil;\nmeta.templateBundle = nil;\nmeta.initialData = nil;\nmeta.loadOption = LynxLoadOptionDumpElement | LynxLoadOptionRecycleTemplateBundle;\n```\n\n----------------------------------------\n\nTITLE: Formal CSS Syntax Definition for Border-Left-Width Property\nDESCRIPTION: Defines the formal syntax for the border-left-width property, showing that it accepts line-width values which can be thin, medium, thick, or a length value.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/css/properties/border-left-width.mdx#2025-04-17_snippet_1\n\nLANGUAGE: css\nCODE:\n```\nborder-left-width = <line-width>\n<line-width> = thin | medium | thick | <length>\n```\n\n----------------------------------------\n\nTITLE: Upgrading Rspeedy to Specific Version using NPX\nDESCRIPTION: This command upgrades @lynx-js/rspeedy and its plugins to a specific version. Users can replace '0.8.3' with their desired version number.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/rspeedy/upgrade.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpx upgrade-rspeedy@0.8.3\n```\n\n----------------------------------------\n\nTITLE: Declaring CSS Variables in CSS\nDESCRIPTION: Demonstrates how to declare CSS custom properties (variables) using the --* syntax.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/api/css/properties/css-variable.mdx#2025-04-17_snippet_0\n\nLANGUAGE: css\nCODE:\n```\n--somekeyword: left;\n--somecolor: #0000ff;\n```\n\n----------------------------------------\n\nTITLE: Defining watchFiles Property Signature in TypeScript\nDESCRIPTION: This snippet shows the TypeScript signature for the watchFiles property. It can be of type WatchFiles, an array of WatchFiles, or undefined.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/api/rspeedy/rspeedy.dev.watchfiles.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nwatchFiles?: WatchFiles | WatchFiles[] | undefined;\n```\n\n----------------------------------------\n\nTITLE: Inserting Images with Custom Styling in HTML\nDESCRIPTION: This HTML snippet demonstrates how to insert an image with custom width and margin styling using inline styles. It's used to display screenshots in the documentation.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/guide/debugging/lynx-devtool/layers-panel.mdx#2025-04-17_snippet_1\n\nLANGUAGE: HTML\nCODE:\n```\n<img\n  src=\"https://lf-lynx.tiktok-cdns.com/obj/lynx-artifacts-oss-sg/lynx-website/assets/layers/open-layers.png\"\n  width=\"400\"\n  style={{ margin: '20px' }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Defining DistPath Interface in TypeScript\nDESCRIPTION: TypeScript interface declaration for DistPath that extends DistPathConfig. Used to set the directory of distribution files, with optional configuration for intermediate file output paths.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/api/rspeedy/rspeedy.distpath.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface DistPath extends DistPathConfig \n```\n\n----------------------------------------\n\nTITLE: Video Comparison Component\nDESCRIPTION: Component that demonstrates the visual difference between Lynx's IFR and traditional rendering approaches through side-by-side video comparison.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/guide/interaction/ifr.mdx#2025-04-17_snippet_3\n\nLANGUAGE: TSX\nCODE:\n```\n<VideoList\n  videos={[\n    {\n      src: 'https://lf-lynx.tiktok-cdns.com/obj/lynx-artifacts-oss-sg/lynx-website/assets/ifr_fib_with_blank.mp4',\n      title: 'Other cross-platform solutions (No IFR)',\n    },\n    {\n      src: 'https://lf-lynx.tiktok-cdns.com/obj/lynx-artifacts-oss-sg/lynx-website/assets/ifr_fib.mp4',\n      title: 'Lynx (IFR)',\n    },\n  ]}\n  playbackRate={0.3}\n/>\n```\n\n----------------------------------------\n\nTITLE: Declaring rspackVersion Variable in TypeScript\nDESCRIPTION: Defines the rspackVersion variable as a string type. This variable likely holds the version of Rspack being used in the project.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/rspeedy/rspeedy.rspackversion.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nrspackVersion: string\n```\n\n----------------------------------------\n\nTITLE: Retrieving ComponentID Syntax Definition in JSX\nDESCRIPTION: The syntax definition for the __GetComponentID function that takes an Element parameter and returns a string representing the component's ID.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/engine/element-api/__GetComponentID.mdx#2025-04-17_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n__GetComponentID(element: Element) : string;\n```\n\n----------------------------------------\n\nTITLE: Syntax Definition for __GetClasses Function in Lynx (JSX)\nDESCRIPTION: This code block defines the syntax for the __GetClasses function. It takes an Element object as a parameter and returns an array of strings representing the class selectors.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/engine/element-api/__GetClasses.mdx#2025-04-17_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n__GetClasses(element: Element) : Array<string>;\n```\n\n----------------------------------------\n\nTITLE: Importing Components in React/JSX\nDESCRIPTION: Import statement for the Go component from the Lynx framework, used to display interactive examples.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/css/properties/animation-duration.mdx#2025-04-17_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Go } from '@lynx';\n```\n\n----------------------------------------\n\nTITLE: Border Bottom Style Formal Syntax\nDESCRIPTION: Defines the formal syntax specification for the border-bottom-style property, including all possible line style values.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/css/properties/border-bottom-style.mdx#2025-04-17_snippet_1\n\nLANGUAGE: css\nCODE:\n```\nborder-bottom-style = <line-style>\n<line-style> = none | hidden | dotted | dashed | solid | double | groove | ridge | inset | outset\n```\n\n----------------------------------------\n\nTITLE: Transformed Default Import Example\nDESCRIPTION: Example of an import statement transformed when transformToDefaultImport is true.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/api/rspeedy/rspeedy.transformimport.transformtodefaultimport.md#2025-04-17_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport Button from 'foo/button'\n```\n\n----------------------------------------\n\nTITLE: Basic background-clip CSS Usage\nDESCRIPTION: Shows the basic syntax for using the background-clip property with single and multiple values.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/css/properties/background-clip.mdx#2025-04-17_snippet_0\n\nLANGUAGE: css\nCODE:\n```\nbackground-clip: border-box;\nbackground-clip: padding-box;\nbackground-clip: content-box;\n\n// multiple clip\nbackground-clip: border-box, content-box, padding-box;\n```\n\n----------------------------------------\n\nTITLE: Defining Output.filename Property Signature in TypeScript\nDESCRIPTION: This code snippet shows the TypeScript signature for the Output.filename property. It can be a string, a Filename object, or undefined.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/rspeedy/rspeedy.output.filename.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfilename?: string | Filename | undefined;\n```\n\n----------------------------------------\n\nTITLE: Using High-Quality Source Maps for All Environments\nDESCRIPTION: Example of using defineConfig to set high-quality source maps for all environments.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/api/rspeedy/rspeedy.sourcemap.js.md#2025-04-17_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineConfig } from '@lynx-js/rspeedy'\n\nexport default defineConfig({\n  output: {\n    sourceMap: {\n      js: 'source-map',\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Type Export Examples\nDESCRIPTION: Examples of correct and incorrect type export syntax when using isolated modules.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/rspeedy/typescript.md#2025-04-17_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n// ❌ Wrong\nexport { SomeType } from './types.js';\n\n// ✅ Correct\nexport type { SomeType } from './types.js';\n\n// ✅ Correct\nexport { type SomeType } from './types.js';\n```\n\n----------------------------------------\n\nTITLE: Importing Modules Using Path Aliases\nDESCRIPTION: Demonstrates how to import a module using a configured path alias. The import statement uses '@common/request.js' which maps to the actual file path.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/rspeedy/typescript.md#2025-04-17_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nimport { get } from '@common/request.js'; // 等同于 './common/request.js'\n```\n\n----------------------------------------\n\nTITLE: Defining TypeScript Interface for Minify.jsOptions\nDESCRIPTION: TypeScript type definition for the jsOptions property that configures SWC minification options in Rspeedy. The property accepts SwcJsMinimizerRspackPluginOptions or undefined.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/api/rspeedy/rspeedy.minify.jsoptions.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\njsOptions?: Rspack.SwcJsMinimizerRspackPluginOptions | undefined;\n```\n\n----------------------------------------\n\nTITLE: Defining SourceMap Interface in TypeScript\nDESCRIPTION: This code snippet defines the SourceMap interface, which is used to configure source map generation for outputs. It includes an optional 'js' property that determines how the source map should be generated.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/api/rspeedy/rspeedy.sourcemap.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface SourceMap \n{\n}\n```\n\n----------------------------------------\n\nTITLE: Defining RsdoctorRspackPluginOptions Type in TypeScript\nDESCRIPTION: This code snippet defines the RsdoctorRspackPluginOptions type as the first parameter of the RsdoctorRspackPlugin constructor. It uses TypeScript's utility types to extract the constructor parameter types.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/rspeedy/rspeedy.rsdoctorrspackpluginoptions.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport type RsdoctorRspackPluginOptions = ConstructorParameters<typeof RsdoctorRspackPlugin<[]>>[0];\n```\n\n----------------------------------------\n\nTITLE: Defining Native Interaction Enabled Attribute in TypeScript\nDESCRIPTION: Defines the 'native-interaction-enabled' attribute that specifies whether the target node consumes platform-layer touch events, affecting platform gestures but not Lynx touch events.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/elements/built-in/view.mdx#2025-04-17_snippet_25\n\nLANGUAGE: typescript\nCODE:\n```\n// DefaultValue: true for iOS, false for Android\nnative-interaction-enabled?: boolean\n```\n\n----------------------------------------\n\nTITLE: Example Stack Trace Format\nDESCRIPTION: Shows the format of a copied call stack trace from the Call Stack pane, demonstrating the function name, file, and line number formatting.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/guide/debugging/lynx-devtool/sources-panel.mdx#2025-04-17_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nadd (App.tsx:11)\npublishEvent (tt.js:148)\n```\n\n----------------------------------------\n\nTITLE: Importing and Using Go Component for CSS API Example in JSX\nDESCRIPTION: This snippet demonstrates how to import and use the Go component to display an example of the text-stroke-color CSS property. It specifies the default file, image, entry point, and default entry file for the example.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/css/properties/text-stroke-color.mdx#2025-04-17_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Go } from '@lynx';\n\n<Go\n  example=\"css-api\"\n  defaultFile=\"src/text-stroke-color/App.tsx\"\n  img=\"https://lf-lynx.tiktok-cdns.com/obj/lynx-artifacts-oss-sg/lynx-website/assets/doc/css/text-stroke-color.jpg\"\n  entry=\"src/text-stroke-color\"\n  defaultEntryFile=\"dist/text-stroke-color.lynx.bundle\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Formal syntax for linear-weight property\nDESCRIPTION: The formal syntax definition for the linear-weight property, specifying that it accepts a numeric value.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/css/properties/linear-weight.mdx#2025-04-17_snippet_1\n\nLANGUAGE: css\nCODE:\n```\nlinear-weight = <number>\n```\n\n----------------------------------------\n\nTITLE: Defining TypeScript signature for bundlerChain property in @lynx-js/rspeedy\nDESCRIPTION: The TypeScript signature for the bundlerChain property which accepts a ToolsConfig['bundlerChain'] type or undefined. This property allows modifying Rspack options using rspack-chain.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/api/rspeedy/rspeedy.tools.bundlerchain.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nbundlerChain?: ToolsConfig['bundlerChain'] | undefined;\n```\n\n----------------------------------------\n\nTITLE: Formal Box-Sizing Syntax Definition\nDESCRIPTION: The formal syntax definition for the box-sizing property in Lynx CSS, showing the possible values.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/css/properties/box-sizing.mdx#2025-04-17_snippet_1\n\nLANGUAGE: css\nCODE:\n```\nbox-sizing = border-box | content-box\n```\n\n----------------------------------------\n\nTITLE: Defining loadCoreStart Property in InitBackgroundRuntimeEntry Interface (TypeScript)\nDESCRIPTION: Declares the loadCoreStart property, which represents the start timestamp for initializing the background thread runtime environment as a floating-point Unix timestamp in milliseconds.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/lynx-api/performance-api/performance-entry/init-background-runtime-entry.mdx#2025-04-17_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nloadCoreStart: number;\n```\n\n----------------------------------------\n\nTITLE: Configuration Example in JavaScript\nDESCRIPTION: Example showing how to configure a custom tsconfig path in the rspeedy configuration file using defineConfig.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/rspeedy/rspeedy.source.tsconfigpath.md#2025-04-17_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineConfig } from '@lynx-js/rspeedy'\nexport default defineConfig({\n  source: {\n    tsconfigPath: './tsconfig.build.json',\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: InsertElementBefore Function Signature in JSX\nDESCRIPTION: Function signature for __InsertElementBefore showing the required parameters and return type. It takes a parent element, a child element to insert, and a reference node to insert before.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/engine/element-api/__InsertElementBefore.mdx#2025-04-17_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n__InsertElementBefore(parent: Element, child: Element, referenceNode: Element) : Element;\n```\n\n----------------------------------------\n\nTITLE: Formal Syntax for grid-template-columns CSS Property\nDESCRIPTION: Detailed formal syntax definition for the grid-template-columns property, including track lists, track sizes, and various breadth specifications.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/css/properties/grid-template-columns.mdx#2025-04-17_snippet_1\n\nLANGUAGE: css\nCODE:\n```\ngrid-template-columns =\n  <track-list>\n\n<track-list> =\n   <track-size> | <track-repeat>\n\n<track-size> =\n  <track-breadth>                                   |\n  minmax( <inflexible-breadth> , <track-breadth> )  |\n  fit-content( <length-percentage [0,∞]> )\n\n<track-repeat> =\n  repeat([ <integer [1,∞]> ] , <track-size>)\n\n<fixed-size> =\n  <fixed-breadth>                                   |\n  minmax( <fixed-breadth> , <track-breadth> )       |\n  minmax( <inflexible-breadth> , <fixed-breadth> )\n\n<fixed-repeat> =\n  repeat( [ <integer [1,∞]> ] , <fixed-size>)\n\n<track-breadth> =\n  <length-percentage [0,∞]>  |\n  <flex [0,∞]>               |\n  max-content                |\n  auto\n\n<inflexible-breadth> =\n  <length-percentage [0,∞]>  |\n  max-content                |\n  auto\n\n<length-percentage> =\n  <length>      |\n  <percentage>\n\n<fixed-breadth> =\n  <length-percentage [0,∞]>\n```\n\n----------------------------------------\n\nTITLE: Basic CSS Background Position Examples\nDESCRIPTION: Examples showing different ways to set background image position using keywords, percentages and length values.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/css/properties/background-position.mdx#2025-04-17_snippet_0\n\nLANGUAGE: css\nCODE:\n```\n/* Keyword values */\nbackground-position: top;\nbackground-position: bottom;\nbackground-position: left;\nbackground-position: right;\nbackground-position: center;\n\n/* <percentage> values */\nbackground-position: 25% 75%;\n\n/* <length> values */\nbackground-position: 0px 0px;\nbackground-position: 1rem 2rem;\nbackground-position: 10em 8em;\n\n/* Multiple images */\nbackground-position:\n  0px 0px,\n  center;\n```\n\n----------------------------------------\n\nTITLE: Rendering Video Element in JSX\nDESCRIPTION: This code snippet renders a video element with autoplay, loop, and mute attributes. It's used to display an overview video of the Lynx DevTool in the documentation.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/guide/debugging/lynx-devtool.mdx#2025-04-17_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<video\n  src=\"https://lf-lynx.tiktok-cdns.com/obj/lynx-artifacts-oss-sg/lynx-website/assets/devtool-overview.mp4\"\n  loop\n  autoPlay\n  muted\n></video>\n```\n\n----------------------------------------\n\nTITLE: Defining ExtractStr Property Type in TypeScript\nDESCRIPTION: Type definition for the extractStr configuration property which accepts either a partial ExtractStrConfig object or a boolean value. When set to false, it disables string literal extraction. When configured, it merges identical string literals across JS and Lepus to optimize bundle size.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/rspeedy/react-rsbuild-plugin.pluginreactlynxoptions.extractstr.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nextractStr?: Partial<ExtractStrConfig> | boolean;\n```\n\n----------------------------------------\n\nTITLE: Generated File Header Comment\nDESCRIPTION: File header comment indicating that this is an auto-generated file by @lynx-js/tool-typedoc that should not be edited directly.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/api/react/Interface.InitDataRaw.mdx#2025-04-17_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n{/*\n* This file is generated by @lynx-js/tool-typedoc.\n* Do not edit this file directly.\n* @generated\n*/}\n```\n\n----------------------------------------\n\nTITLE: Using TypeScript Types for Platform Mapping\nDESCRIPTION: Example demonstrating type-safe platform name mapping using TypeScript types from the package.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/packages/lynx-compat-data/README.md#2025-04-17_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// Import specific types\nimport type { PlatformName } from '@lynx-js/lynx-compat-data';\n\nfunction mapPlatformNameToName(platform: PlatformName) {\n  switch (platform) {\n    case 'android':\n      return 'Android';\n    case 'ios':\n      return 'iOS';\n    // if you miss some cases, TypeScript will help you out.\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: CSS white-space Property Formal Syntax\nDESCRIPTION: The formal syntax definition for the white-space property, showing the allowed values.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/css/properties/white-space.mdx#2025-04-17_snippet_1\n\nLANGUAGE: css\nCODE:\n```\nnormal | nowrap\n```\n\n----------------------------------------\n\nTITLE: Creating Circular Gradient Mask with CSS in Lynx\nDESCRIPTION: This snippet demonstrates how to use CSS properties like mask-image and linear-gradient in Lynx to create a circular area with a fading edge. It showcases Lynx's support for modern CSS visual effects.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/blog/lynx-unlock-native-for-more.mdx#2025-04-17_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<Go\n  img=\"https://lf-lynx.tiktok-cdns.com/obj/lynx-artifacts-oss-sg/lynx-website/assets/doc/guide-mask-image-circle.png\"\n  example=\"css\"\n  defaultFile=\"src/mask_image_circle_gradient/index.tsx\"\n  defaultEntryFile=\"dist/mask_image_circle_gradient.lynx.bundle\"\n  highlight=\"{14}\"\n  entry=\"src/mask_image_circle_gradient\"\n></Go>\n```\n\n----------------------------------------\n\nTITLE: Demonstrating CSS At-Rule Syntax\nDESCRIPTION: This snippet demonstrates the basic syntax of a CSS at-rule, showing that it begins with an @ symbol, followed by an identifier, and includes everything up to the next semicolon or CSS block.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/css/at-rule.md#2025-04-17_snippet_0\n\nLANGUAGE: CSS\nCODE:\n```\n@\n```\n\n----------------------------------------\n\nTITLE: Type Check Plugin Configuration\nDESCRIPTION: Configuration for enabling and setting up the Type Check plugin in Rspeedy projects.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/rspeedy/typescript.md#2025-04-17_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport { pluginTypeCheck } from '@rsbuild/plugin-type-check';\n\nimport { defineConfig } from '@lynx-js/rspeedy';\n\nexport default defineConfig({\n  plugins: [\n    pluginTypeCheck({\n      enable: true,\n    }),\n  ],\n});\n```\n\n----------------------------------------\n\nTITLE: Formal Syntax Definition for -x-handle-size CSS Property\nDESCRIPTION: This code block defines the formal syntax for the -x-handle-size property, specifying that it accepts a length value.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/css/properties/-x-handle-size.mdx#2025-04-17_snippet_1\n\nLANGUAGE: css\nCODE:\n```\n-x-handle-size = <length>\n```\n\n----------------------------------------\n\nTITLE: Combining Multiple Selectors in TSX\nDESCRIPTION: Example of combining ID, class, tag, and attribute selectors to target a specific image element.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/lynx-api/selector-query/selector-query-select.mdx#2025-04-17_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\n// 'image#my-id[src=xxx].class1.class2'\n<image id=\"my-id\" className=\"class1 class2\" src=\"xxx\" data-x=\"xxx\" />\n```\n\n----------------------------------------\n\nTITLE: Importing and Using LegacyCompatTable Component in JSX\nDESCRIPTION: This code snippet imports the LegacyCompatTable component from the @lynx package and renders it with a specific metadata prop. It's likely used to display compatibility information for text elements.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/elements/built-in/text.mdx#2025-04-17_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nimport { LegacyCompatTable } from '@lynx';\n\n<LegacyCompatTable metadata=\"elements/text\" />\n```\n\n----------------------------------------\n\nTITLE: CSS margin-inline-end Basic Usage Examples\nDESCRIPTION: Examples showing different ways to specify margin-inline-end values using lengths, pixels, relative pixels, and percentages.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/css/properties/margin-inline-end.mdx#2025-04-17_snippet_0\n\nLANGUAGE: css\nCODE:\n```\n/* <length> values */\nmargin-inline-end: 0.5em;\nmargin-inline-end: 0px;\nmargin-inline-end: 2rpx;\n\n/* <percentage> value */\nmargin-inline-end: 10%;\n```\n\n----------------------------------------\n\nTITLE: Accessing the pipelineEnd Property in PipelineEntry (TypeScript)\nDESCRIPTION: The pipelineEnd property provides the timestamp for the end of the rendering pipeline as a floating-point Unix timestamp in milliseconds.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/lynx-api/performance-api/performance-entry/pipeline-entry.mdx#2025-04-17_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\npipelineEnd: number;\n```\n\n----------------------------------------\n\nTITLE: Defining patchChangesEnd property in FrameworkPipelineTiming interface\nDESCRIPTION: Declares the timestamp property marking when the framework ends applying change information on the main thread, stored as a floating-point Unix timestamp in milliseconds.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/lynx-api/performance-api/framework-pipeline-timing.mdx#2025-04-17_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\npatchChangesEnd: number;\n```\n\n----------------------------------------\n\nTITLE: Configuring AssetsInclude in JavaScript for Rspeedy\nDESCRIPTION: Example of how to use the assetsInclude property in a Rspeedy configuration file. It demonstrates setting up a rule to treat .json5 files as static assets.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/rspeedy/rspeedy.source.assetsinclude.md#2025-04-17_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineConfig } from '@lynx-js/rspeedy'\nexport default defineConfig({\n  source: {\n    assetsInclude: /\\.json5$/,\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Defining Styled Components with JSX\nDESCRIPTION: This code snippet defines CSS styles using JSX syntax for various layout components including inline content display, image sizing, and margin adjustments.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/guide/debugging/lynx-devtool/sources-panel.mdx#2025-04-17_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<style jsx>{`\n  .inline-content {\n    display: flex;\n    align-items: center;\n    flex-wrap: wrap;\n  }\n  .inline-content img {\n    margin: 0 5px;\n    height: 2rem;\n  }\n  .margin {\n    margin-top: 1rem;\n    margin-bottom: 1rem;\n  }\n  .margin2 {\n    margin-top: 0.5rem;\n  }\n`}</style>\n```\n\n----------------------------------------\n\nTITLE: Importing Lynx Components\nDESCRIPTION: Import statements for Lynx platform components and custom component documentation for different platforms.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/guide/custom-native-component.mdx#2025-04-17_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { PlatformTabs, Go } from '@lynx';\nimport CustomComponentLynxIOS from './custom-native-component//custom-component-iOS.mdx';\nimport CustomComponentLynxAndroid from './custom-native-component//custom-component-android.mdx';\nimport CustomComponentLynxWeb from './custom-native-component//custom-component-web.mdx';\n```\n\n----------------------------------------\n\nTITLE: Defining Server Port Property in TypeScript\nDESCRIPTION: TypeScript signature for the 'port' property in the Server configuration. It specifies that the port can be a number or undefined.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/api/rspeedy/rspeedy.server.port.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nport?: number | undefined;\n```\n\n----------------------------------------\n\nTITLE: Getting Error Message from TemplateBundle in Java\nDESCRIPTION: Retrieves the exception message that occurred during template parsing when TemplateBundle is invalid.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/api/lynx-native-api/template-bundle.mdx#2025-04-17_snippet_3\n\nLANGUAGE: java\nCODE:\n```\npublic String getErrorMessage()\n```\n\n----------------------------------------\n\nTITLE: Setting Extra Timing Data in iOS\nDESCRIPTION: Objective-C method signature for setting extra timing information in iOS Lynx applications. Takes a LynxExtraTiming parameter.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/lynx-native-api/lynx-view/set-extra-timing.mdx#2025-04-17_snippet_2\n\nLANGUAGE: objc\nCODE:\n```\n- (void)setExtraTiming:(LynxExtraTiming* _Nonnull)timing;\n```\n\n----------------------------------------\n\nTITLE: Defining the enableCSSInvalidation Property in TypeScript\nDESCRIPTION: TypeScript property signature for the enableCSSInvalidation option in the PluginReactLynxOptions interface. This optional boolean property controls whether CSS invalidation is enabled for style recalculations.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/api/rspeedy/react-rsbuild-plugin.pluginreactlynxoptions.enablecssinvalidation.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nenableCSSInvalidation?: boolean;\n```\n\n----------------------------------------\n\nTITLE: Import Transform Example - Input\nDESCRIPTION: Example showing the original import statement before transformation, importing a Button component from 'foo' package.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/rspeedy/rspeedy.transformimport.librarydirectory.md#2025-04-17_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Button } from 'foo'\n```\n\n----------------------------------------\n\nTITLE: Defining ChunkSplitBySize Override Property Type in TypeScript\nDESCRIPTION: Type definition for the override property that allows custom Rspack chunk splitting configuration. Uses conditional types to extract the splitChunks configuration type from Rspack.Configuration.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/rspeedy/rspeedy.chunksplitbysize.override.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\noverride?: Rspack.Configuration extends {\n        optimization?: {\n            splitChunks?: infer P;\n        } | undefined;\n    } ? P : never;\n```\n\n----------------------------------------\n\nTITLE: Defining margin-top in CSS\nDESCRIPTION: Examples of various ways to set the margin-top property in CSS, including length values, percentages, and the auto keyword.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/css/properties/margin-top.mdx#2025-04-17_snippet_0\n\nLANGUAGE: css\nCODE:\n```\n/* <length> values */\nmargin-top: 0.5em;\nmargin-top: 0;\nmargin-top: 2rpx;\n\n/* <percentage> value */\nmargin-top: 10%;\n```\n\n----------------------------------------\n\nTITLE: Formal Syntax for Border-Inline-Start-Style in CSS\nDESCRIPTION: The formal syntax definition for the border-inline-start-style CSS property. It shows the possible values that can be used with this property.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/css/properties/border-inline-start-style.mdx#2025-04-17_snippet_1\n\nLANGUAGE: css\nCODE:\n```\nnone | hidden | dotted | dashed | solid | double | groove | ridge | inset | outset\n```\n\n----------------------------------------\n\nTITLE: Border End Start Radius Formal Syntax\nDESCRIPTION: The formal syntax definition for the border-end-start-radius property showing the accepted value patterns.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/css/properties/border-end-start-radius.mdx#2025-04-17_snippet_1\n\nLANGUAGE: css\nCODE:\n```\n[<length> | <percentage>] [ / [<length> | <percentage>]]?\n```\n\n----------------------------------------\n\nTITLE: Accessing the pipelineStart Property in PipelineEntry (TypeScript)\nDESCRIPTION: The pipelineStart property provides the timestamp for the start of the rendering pipeline as a floating-point Unix timestamp in milliseconds.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/lynx-api/performance-api/performance-entry/pipeline-entry.mdx#2025-04-17_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\npipelineStart: number;\n```\n\n----------------------------------------\n\nTITLE: Example Results of Exact Match Aliases\nDESCRIPTION: Demonstrates how exact match aliases affect import resolution. Only imports that exactly match the alias key will be resolved to the alias target.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/api/rspeedy/rspeedy.source.alias.md#2025-04-17_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport Test1 from 'xyz'; // Exact match, so path/to/file.js is resolved and imported\nimport Test2 from 'xyz/file.js'; // Not an exact match, normal resolution takes place\n```\n\n----------------------------------------\n\nTITLE: Using loadConfig Function in TypeScript\nDESCRIPTION: This example demonstrates how to use the loadConfig function from the @lynx-js/rspeedy package to load a configuration file and log the result.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/api/rspeedy/rspeedy.loadconfig.md#2025-04-17_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { loadConfig } from '@lynx-js/rspeedy'\n\nvoid async function () {\n  const config = await loadConfig({ configPath: './lynx.config.js' })\n  console.log(config);\n}()\n```\n\n----------------------------------------\n\nTITLE: Setting Class Selectors Syntax Definition in JSX\nDESCRIPTION: Function signature for __SetClasses which is used to set class selectors on an Element node. It takes an Element object and a string of space-separated class names, and returns void.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/engine/element-api/__SetClasses.mdx#2025-04-17_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n__SetClasses(element: Element, classNames: string) : void;\n```\n\n----------------------------------------\n\nTITLE: Defining View Exposure Area Attribute in TypeScript\nDESCRIPTION: Defines the 'exposure-area' attribute that specifies the viewport intersection ratio required to trigger an exposure event for the target node.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/elements/built-in/view.mdx#2025-04-17_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\n// DefaultValue: '0%'\nexposure-area?: string\n```\n\n----------------------------------------\n\nTITLE: createElement for HTML Elements\nDESCRIPTION: Generic type definition for creating React HTML elements with custom properties and class attributes.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/react/Function.createElement.mdx#2025-04-17_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nfunction createElement<P, T>(\n   type: keyof ReactHTML,\n   props?: null | ClassAttributes<T> & P, ...\nchildren?: ReactNode[]): DetailedReactHTMLElement<P, T>\n```\n\n----------------------------------------\n\nTITLE: Setting Exposure-related Attributes for View Element\nDESCRIPTION: Demonstrates how to set exposure-related attributes like exposure-id, exposure-scene, and exposure-area for visibility detection.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/api/elements/built-in/view.mdx#2025-04-17_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// DefaultValue: undefined\nexposure-id?: string\n\n// DefaultValue: undefined\nexposure-scene?: string\n\n// DefaultValue: '0%'\nexposure-area?: string\n```\n\n----------------------------------------\n\nTITLE: Defining inset-inline-start in CSS\nDESCRIPTION: Examples of various ways to set the inset-inline-start property in CSS, including length values, percentages, keywords, and calc() function.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/css/properties/inset-inline-start.mdx#2025-04-17_snippet_0\n\nLANGUAGE: css\nCODE:\n```\n/* <length> values */\ninset-inline-start: 3px;\ninset-inline-start: 2rpx;\ninset-inline-start: 2.4em;\ninset-inline-start: 3rem;\n\ninset-inline-start: 10%;\n\n/* Keyword value */\ninset-inline-start: auto;\n\n/* calc */\ninset-inline-start: calc(1px + 1px);\n```\n\n----------------------------------------\n\nTITLE: Defining ChunkSplit Interface in TypeScript\nDESCRIPTION: This code snippet defines the ChunkSplit interface with two optional properties: override and strategy. The override property allows for custom Rspack chunk splitting configuration, while the strategy property specifies the chunk splitting strategy.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/api/rspeedy/rspeedy.chunksplit.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface ChunkSplit \n{\n  override?: Rspack.Configuration extends { optimization?: { splitChunks?: infer P; } | undefined; } ? P : never;\n  strategy?: 'all-in-one' | 'split-by-module' | 'split-by-experience' | 'single-vendor' | undefined;\n}\n```\n\n----------------------------------------\n\nTITLE: CSS Vertical-align Property Syntax Examples\nDESCRIPTION: Shows the different ways to apply the vertical-align property using pixel values, percentages, and predefined keywords like baseline, middle, center, top, bottom, text-top, text-bottom, super, and sub.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/css/properties/vertical-align.mdx#2025-04-17_snippet_0\n\nLANGUAGE: css\nCODE:\n```\nvertical-align: 10px;\nvertical-align: 50%;\nvertical-align: baseline;\nvertical-align: middle;\nvertical-align: center;\nvertical-align: top;\nvertical-align: bottom;\nvertical-align: text-top;\nvertical-align: text-bottom;\nvertical-align: super;\nvertical-align: sub;\n```\n\n----------------------------------------\n\nTITLE: Formal Syntax Definition for Relative Align Inline End\nDESCRIPTION: Defines the formal syntax specification for the relative-align-inline-end property, showing all valid value types.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/css/properties/relative-align-inline-end.mdx#2025-04-17_snippet_1\n\nLANGUAGE: css\nCODE:\n```\nrelative-align-inline-end = none | parent | <number>\n```\n\n----------------------------------------\n\nTITLE: Defining customName property in TransformImport interface (TypeScript)\nDESCRIPTION: This code snippet shows the TypeScript signature for the customName property. It is an optional string property that allows customization of the transformed import path.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/rspeedy/rspeedy.transformimport.customname.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ncustomName?: string | undefined;\n```\n\n----------------------------------------\n\nTITLE: Defining LoadConfigOptions.cwd Property Type in TypeScript\nDESCRIPTION: TypeScript type definition for the optional cwd property, which can be either a string value specifying a directory path or undefined.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/rspeedy/rspeedy.loadconfigoptions.cwd.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ncwd?: string | undefined;\n```\n\n----------------------------------------\n\nTITLE: PropertyDefinition Component for text-indent\nDESCRIPTION: JSX component that displays the formal definition of the text-indent property, including its initial value, what elements it applies to, and inheritance behavior.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/css/properties/text-indent.mdx#2025-04-17_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n<PropertyDefinition\n  initialValue={<>0</>}\n  appliesTo={<>text</>}\n  inherited=\"no\"\n  animatable=\"no\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Formal Syntax Definition for relative-align-top in Lynx CSS\nDESCRIPTION: Provides the formal syntax definition for the relative-align-top property, showing the allowed values (none, parent, or a number).\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/css/properties/relative-align-top.mdx#2025-04-17_snippet_1\n\nLANGUAGE: css\nCODE:\n```\nrelative-align-top = none | parent | <number>\n```\n\n----------------------------------------\n\nTITLE: Getting Extra Info from TemplateBundle in Java\nDESCRIPTION: Retrieves the extraInfo field content from the pageConfig of the frontend template. Returns null if extraInfo is not configured or if called on an empty TemplateBundle.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/lynx-native-api/template-bundle.mdx#2025-04-17_snippet_1\n\nLANGUAGE: java\nCODE:\n```\npublic Map<String, Object> getExtraInfo()\n```\n\n----------------------------------------\n\nTITLE: Defining loadConfig Function Signature in TypeScript\nDESCRIPTION: This code snippet defines the signature of the loadConfig function, which takes LoadConfigOptions as a parameter and returns a Promise of LoadConfigResult.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/api/rspeedy/rspeedy.loadconfig.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare function loadConfig(loadConfigOptions: LoadConfigOptions): Promise<LoadConfigResult>;\n```\n\n----------------------------------------\n\nTITLE: Custom TSConfig Path Configuration\nDESCRIPTION: Example of configuring a custom tsconfig.json file path in Rspeedy configuration.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/rspeedy/typescript.md#2025-04-17_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nexport default {\n  source: {\n    tsconfigPath: './tsconfig.custom.json',\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Formal Syntax for white-space Property\nDESCRIPTION: Defines the formal syntax options for the white-space property, showing that it accepts either 'normal' or 'nowrap' values.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/api/css/properties/white-space.mdx#2025-04-17_snippet_1\n\nLANGUAGE: css\nCODE:\n```\nnormal | nowrap\n```\n\n----------------------------------------\n\nTITLE: Defining MetricActualFmpEntry.entryType Property in TypeScript\nDESCRIPTION: This property specifies the type of performance event. For MetricActualFmpEntry instances, this value is always 'metric'.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/lynx-api/performance-api/performance-entry/metric-actual-fmp-entry.mdx#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nentryType: string;\n```\n\n----------------------------------------\n\nTITLE: Styling Console Panel Elements with CSS\nDESCRIPTION: This CSS snippet defines styles for inline content, images, and margin classes used in the Console panel documentation.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/guide/debugging/lynx-devtool/console-panel.mdx#2025-04-17_snippet_0\n\nLANGUAGE: CSS\nCODE:\n```\n<style jsx>{`\n  .inline-content {\n    display: flex;\n    align-items: center;\n    flex-wrap: wrap;\n  }\n  .inline-content img {\n    margin: 0 5px;\n    height: 2rem;\n  }\n  .margin {\n    margin-top: 1rem;\n    margin-bottom: 1rem;\n  }\n  .margin2 {\n    margin-top: 0.5rem;\n  }\n`}</style>\n```\n\n----------------------------------------\n\nTITLE: Importing Go Component for Examples\nDESCRIPTION: Import statement for the Go component from the Lynx framework, used to display interactive examples in the documentation.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/css/properties/animation-delay.mdx#2025-04-17_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Go } from '@lynx';\n```\n\n----------------------------------------\n\nTITLE: Defining entryType Property in InitBackgroundRuntimeEntry Interface (TypeScript)\nDESCRIPTION: Declares the entryType property of the InitBackgroundRuntimeEntry interface, which always returns the string 'init'.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/lynx-api/performance-api/performance-entry/init-background-runtime-entry.mdx#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nentryType: string;\n```\n\n----------------------------------------\n\nTITLE: Configuring Path Aliases in TypeScript\nDESCRIPTION: Configuration for setting up path aliases in tsconfig.json to enable simplified module imports using the paths compiler option.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/rspeedy/resolve.md#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"compilerOptions\": {\n    \"paths\": {\n      \"@common/*\": [\"./src/common/*\"]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining loadEnv property in CreateRspeedyOptions interface\nDESCRIPTION: This code snippet shows the TypeScript signature for the loadEnv property in the CreateRspeedyOptions interface. It is defined as an optional property that accepts the same type as the loadEnv property in CreateRsbuildOptions.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/api/rspeedy/rspeedy.createrspeedyoptions.loadenv.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nloadEnv?: CreateRsbuildOptions['loadEnv'];\n```\n\n----------------------------------------\n\nTITLE: Defining Output.filenameHash Property in TypeScript\nDESCRIPTION: This snippet shows the TypeScript signature for the Output.filenameHash property. It can be a boolean, string, or undefined, controlling whether and how to add a hash value to filenames after production build.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/rspeedy/rspeedy.output.filenamehash.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfilenameHash?: boolean | string | undefined;\n```\n\n----------------------------------------\n\nTITLE: Defining createContext Function in TypeScript\nDESCRIPTION: TypeScript definition of the createContext function from React. It creates a Context that components can provide or read, with a generic type parameter T for the context value.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/api/react/Function.createContext.mdx#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction createContext<T>(defaultValue: T): Context<T>\n```\n\n----------------------------------------\n\nTITLE: Defining StopPropagation Method in TypeScript\nDESCRIPTION: Defines the 'stopPropagation' method of the Event class, which stops the event from bubbling up the touch response chain.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/api/lynx-api/event/event.mdx#2025-04-17_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nstopPropagation(): void;\n```\n\n----------------------------------------\n\nTITLE: Basic Border Bottom Color CSS Examples\nDESCRIPTION: Demonstrates basic usage of border-bottom-color property with color name and hex value syntax.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/css/properties/border-bottom-color.mdx#2025-04-17_snippet_0\n\nLANGUAGE: css\nCODE:\n```\nborder-bottom-color: red;\n\nborder-bottom-color: '#ff0000';\n```\n\n----------------------------------------\n\nTITLE: Transformed Import with camelToDashComponentName False\nDESCRIPTION: Example showing how the import statement is transformed when camelToDashComponentName is false or undefined, maintaining camelCase in the path.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/rspeedy/rspeedy.transformimport.cameltodashcomponentname.md#2025-04-17_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport ButtonGroup from 'foo/ButtonGroup'\n```\n\n----------------------------------------\n\nTITLE: Configuring Output Filename with Content Hash and Length in JavaScript\nDESCRIPTION: Example of using content hash with a specified length in the bundle filename configuration for @lynx-js/rspeedy.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/rspeedy/rspeedy.filename.template.md#2025-04-17_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineConfig } from '@lynx-js/rspeedy'\n\nexport default defineConfig({\n  output: {\n    filename: {\n      template: '[name].[contenthash:8].bundle',\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: CSS padding-left Formal Syntax Definition\nDESCRIPTION: Formal syntax definition for the padding-left property, showing the property accepts length-percentage values that must be non-negative. It outlines the acceptable value types including length units and percentages.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/css/properties/padding-left.mdx#2025-04-17_snippet_1\n\nLANGUAGE: css\nCODE:\n```\npadding-left =\n  <length-percentage [0,∞]>\n\n<length-percentage> =\n  <length>      |\n  <percentage>\n```\n\n----------------------------------------\n\nTITLE: Formal Syntax Definition for Perspective Property\nDESCRIPTION: The formal syntax definition for the perspective CSS property in Lynx.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/css/properties/perspective.mdx#2025-04-17_snippet_2\n\nLANGUAGE: text\nCODE:\n```\nperspective = auto | <length [0,∞]>\n```\n\n----------------------------------------\n\nTITLE: CSS Border End End Radius Formal Syntax\nDESCRIPTION: Shows the formal syntax definition for the border-end-end-radius property, supporting length and percentage values.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/css/properties/border-end-end-radius.mdx#2025-04-17_snippet_1\n\nLANGUAGE: css\nCODE:\n```\n[<length> | <percentage>] [ / [<length> | <percentage>]]\n```\n\n----------------------------------------\n\nTITLE: Modifying CSS Variables by Changing Selectors in HTML and CSS\nDESCRIPTION: Demonstrates how to modify CSS variables by switching selectors applied to ancestor nodes.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/api/css/properties/css-variable.mdx#2025-04-17_snippet_6\n\nLANGUAGE: css\nCODE:\n```\n.a {\n  --main-bg-color: red;\n}\n\n.b {\n  --main-bg-color: blue;\n}\n\n.child {\n  background-color: var(--main-bg-color);\n  width: 25%;\n}\n```\n\nLANGUAGE: html\nCODE:\n```\n<view class={{flag ? 'a' : 'b'}}>\n  <view >\n    <view className=\"child\"></view>\n  </view>\n</view>\n```\n\n----------------------------------------\n\nTITLE: Defining MetricActualFmpEntry.actualFmp Property in TypeScript\nDESCRIPTION: This optional property represents the time from preparing the TemplateBundle to the completion of rendering for marked components. It returns a PerformanceMetric object.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/lynx-api/performance-api/performance-entry/metric-actual-fmp-entry.mdx#2025-04-17_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nactualFmp?: PerformanceMetric;\n```\n\n----------------------------------------\n\nTITLE: Configuring Server Base Path in JavaScript Configuration\nDESCRIPTION: Example showing how to use defineConfig to set a custom server base path to '/dist' in a @lynx-js/rspeedy configuration file.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/api/rspeedy/rspeedy.server.base.md#2025-04-17_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineConfig } from '@lynx-js/rspeedy'\nexport default defineConfig({\n  server: {\n    base: '/dist'\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Declaring rspackVersion Variable in TypeScript\nDESCRIPTION: Declaration of the rspackVersion variable which is a string type that likely stores the current version of Rspack being used by the package.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/api/rspeedy/rspeedy.rspackversion.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nrspackVersion: string\n```\n\n----------------------------------------\n\nTITLE: Disabling Total Size Output in Rspeedy Configuration\nDESCRIPTION: Example of how to disable only the total size output by setting the total property to false in the printFileSize configuration.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/api/rspeedy/rspeedy.performance.printfilesize.md#2025-04-17_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineConfig } from '@lynx-js/rspeedy'\n\nexport default defineConfig({\n  performance: {\n    printFileSize: {\n      total: false,\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Running Node.js CPU Profiling with Rspeedy\nDESCRIPTION: Commands to perform CPU profiling analysis with Node.js while running Rspeedy in dev or build mode. This generates a .cpuprofile file to identify JavaScript execution bottlenecks.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/rspeedy/build-profiling.mdx#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n#dev\nnode --cpu-prof ./node_modules/@lynx-js/rspeedy/bin/rspeedy.js dev\n\n# build\nnode --cpu-prof ./node_modules/@lynx-js/rspeedy/bin/rspeedy.js build\n```\n\n----------------------------------------\n\nTITLE: Defining PerformanceMetric EndTimestampName Attribute in TypeScript\nDESCRIPTION: Defines the 'endTimestampName' attribute of the PerformanceMetric type, representing the name of the metric's end timestamp.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/lynx-api/performance-api/performance-metric.mdx#2025-04-17_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nendTimestampName: string;\n```\n\n----------------------------------------\n\nTITLE: Defining hydrateParseSnapshotEnd property in FrameworkPipelineTiming interface\nDESCRIPTION: Declares the timestamp property marking when the framework ends deserializing main thread information on the background thread, only valid when stage is 'hydrate'.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/lynx-api/performance-api/framework-pipeline-timing.mdx#2025-04-17_snippet_11\n\nLANGUAGE: tsx\nCODE:\n```\nhydrateParseSnapshotEnd: number;\n```\n\n----------------------------------------\n\nTITLE: CSS Border Inline End Color Formal Syntax\nDESCRIPTION: The formal syntax definition for the border-inline-end-color property, showing it accepts either the transparent keyword or any valid color value.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/css/properties/border-inline-end-color.mdx#2025-04-17_snippet_1\n\nLANGUAGE: css\nCODE:\n```\ntransparent | <color>\n```\n\n----------------------------------------\n\nTITLE: Defining ChunkSplitCustom Interface in TypeScript\nDESCRIPTION: TypeScript interface definition for ChunkSplitCustom that specifies the structure for custom chunk splitting configuration. It includes an optional splitChunks property for Rspack configuration and a required strategy property that must be set to 'custom'.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/rspeedy/rspeedy.chunksplitcustom.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface ChunkSplitCustom \n```\n\n----------------------------------------\n\nTITLE: Formal CSS Syntax for transition-delay Property\nDESCRIPTION: The formal syntax definition for the transition-delay CSS property that specifies it accepts time values as its parameter.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/css/properties/transition-delay.mdx#2025-04-17_snippet_1\n\nLANGUAGE: css\nCODE:\n```\ntransition-delay:`<time>`;\n```\n\n----------------------------------------\n\nTITLE: Defining localIdentName Property in TypeScript\nDESCRIPTION: Defines the localIdentName property in the CssLoaderModules interface. This property sets the format of the className generated by CSS Modules after compilation. It is an optional string property.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/api/rspeedy/rspeedy.cssloadermodules.localidentname.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nlocalIdentName?: string | undefined;\n```\n\n----------------------------------------\n\nTITLE: Defining font Property in Filename Object (TypeScript)\nDESCRIPTION: This code snippet shows the TypeScript signature for the font property of the Filename object. It is an optional string property that specifies the name of the font files.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/rspeedy/rspeedy.filename.font.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfont?: string | undefined;\n```\n\n----------------------------------------\n\nTITLE: Defining Tools.rsdoctor Property in TypeScript\nDESCRIPTION: This snippet shows the TypeScript signature for the Tools.rsdoctor property. It is an optional property that accepts RsdoctorRspackPluginOptions or undefined.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/rspeedy/rspeedy.tools.rsdoctor.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nrsdoctor?: RsdoctorRspackPluginOptions | undefined;\n```\n\n----------------------------------------\n\nTITLE: Formal Syntax for align-content CSS Property in Lynx\nDESCRIPTION: The formal syntax definition for the align-content CSS property in Lynx, showing the possible values including stretch, start, end, flex-start, flex-end, center, space-between, and space-around.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/css/properties/align-content.mdx#2025-04-17_snippet_0\n\nLANGUAGE: css\nCODE:\n```\nalign-content = stretch | start | end | flex-start | flex-end | center | space-between | space-around\n```\n\n----------------------------------------\n\nTITLE: Formal Syntax Definition for grid-column-span\nDESCRIPTION: Defines the formal syntax for the grid-column-span property, showing it accepts a numeric value.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/css/properties/grid-column-span.mdx#2025-04-17_snippet_1\n\nLANGUAGE: css\nCODE:\n```\ngrid-column-span = <number>\n```\n\n----------------------------------------\n\nTITLE: Defining the svg Property in Filename Interface in TypeScript\nDESCRIPTION: This TypeScript definition specifies the svg property in the Filename interface. It is an optional string property used to configure the naming pattern for SVG image files. If not provided, it defaults to '[name].[contenthash:8].svg'.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/api/rspeedy/rspeedy.filename.svg.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nsvg?: string | undefined;\n```\n\n----------------------------------------\n\nTITLE: Defining Decorator Version Property in TypeScript\nDESCRIPTION: TypeScript signature for the 'version' property of the Decorators object, allowing 'legacy' or '2022-03' as valid values.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/rspeedy/rspeedy.decorators.version.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nversion?: 'legacy' | '2022-03';\n```\n\n----------------------------------------\n\nTITLE: StopExposureOptions Interface Definition in TypeScript\nDESCRIPTION: Interface definition for the options parameter of stopExposure method. It includes a sendEvent boolean property that determines whether to send anti-exposure events for currently visible targets.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/lynx-api/lynx/lynx-stop-exposure.mdx#2025-04-17_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ninterface StopExposureOptions {\n  sendEvent?: boolean;\n}\n```\n\n----------------------------------------\n\nTITLE: Formal Syntax for background-origin CSS Property\nDESCRIPTION: Shows the formal syntax specification for the background-origin property, listing all possible values.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/css/properties/background-origin.mdx#2025-04-17_snippet_1\n\nLANGUAGE: css\nCODE:\n```\nborder-box | padding-box | content-box\n```\n\n----------------------------------------\n\nTITLE: Defining Sticky Bottom Attribute in TSX\nDESCRIPTION: Defines the sticky-bottom attribute declared on <list-item> to control whether the node will be sticky at the bottom.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/elements/built-in/list.mdx#2025-04-17_snippet_12\n\nLANGUAGE: tsx\nCODE:\n```\n// DefaultValue: false\nsticky-bottom?: boolean\n```\n\n----------------------------------------\n\nTITLE: Using border-start-start-radius CSS Property\nDESCRIPTION: Examples of applying border-start-start-radius with different values. The first example creates a circular corner using a pixel value, while the second example creates an elliptical corner using em values for horizontal and vertical radii.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/css/properties/border-start-start-radius.mdx#2025-04-17_snippet_0\n\nLANGUAGE: css\nCODE:\n```\n/* the corner is a circle */\n/* border-end-start-radius: radius */\nborder-end-start-radius: 3px;\n\n/* the corner is an ellipsis */\n/* border-end-start-radius: horizontal vertical */\nborder-end-start-radius: 0.5em 1em;\n```\n\n----------------------------------------\n\nTITLE: Running Rsdoctor with Rspeedy Commands\nDESCRIPTION: These commands demonstrate how to enable Rsdoctor for development and build processes in an Rspeedy-based project.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/rspeedy/use-rsdoctor.mdx#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# dev\nRSDOCTOR=true rspeedy dev\n\n# build\nRSDOCTOR=true rspeedy build\n```\n\n----------------------------------------\n\nTITLE: Defining Accessibility Elements A11y Attribute in TypeScript\nDESCRIPTION: Defines the 'accessibility-elements-a11y' attribute which functions the same as accessibility-elements but uses a11y-id instead of id for identifying elements.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/elements/built-in/view.mdx#2025-04-17_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\n// DefaultValue: undefined\naccessibility-elements-a11y?: string\n```\n\n----------------------------------------\n\nTITLE: Defining resumeExposure() Method Signature in TypeScript\nDESCRIPTION: This code snippet defines the TypeScript method signature for the resumeExposure() static method. It takes no parameters and returns void.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/lynx-api/lynx/lynx-resume-exposure.mdx#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nresumeExposure(): void;\n```\n\n----------------------------------------\n\nTITLE: Defining debugInfoOutside Property in PluginReactLynxOptions Interface\nDESCRIPTION: This code snippet shows the TypeScript signature for the debugInfoOutside property. It is an optional boolean property that controls whether debug info is placed outside the template.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/rspeedy/react-rsbuild-plugin.pluginreactlynxoptions.debuginfooutside.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ndebugInfoOutside?: boolean;\n```\n\n----------------------------------------\n\nTITLE: Formal Syntax for margin-inline-start CSS Property\nDESCRIPTION: The formal syntax definition for the margin-inline-start CSS property, showing the allowed values including length-percentage and auto options.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/css/properties/margin-inline-start.mdx#2025-04-17_snippet_1\n\nLANGUAGE: css\nCODE:\n```\nmargin-inline-start =\n  <length-percentage>  |\n  auto                 |\n\n<length-percentage> =\n  <length>      |\n  <percentage>\n```\n\n----------------------------------------\n\nTITLE: Formal Syntax Definition for grid-row-end in CSS\nDESCRIPTION: The formal syntax definition for the grid-row-end CSS property, showing the accepted values and structure.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/css/properties/grid-row-end.mdx#2025-04-17_snippet_1\n\nLANGUAGE: css\nCODE:\n```\ngrid-row-end = <number> | [span && <number>]\n```\n\n----------------------------------------\n\nTITLE: Accessing the resolveEnd Property in PipelineEntry (TypeScript)\nDESCRIPTION: The resolveEnd property provides the timestamp for the end of calculating Element styles as a floating-point Unix timestamp in milliseconds.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/lynx-api/performance-api/performance-entry/pipeline-entry.mdx#2025-04-17_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nresolveEnd: number;\n```\n\n----------------------------------------\n\nTITLE: Interface Definition for FontFace in TypeScript\nDESCRIPTION: Defines the FontFace interface used with the addFont() method, specifying the font-family and src properties required for adding a custom font.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/lynx-api/lynx/lynx-add-font.mdx#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface FontFace {\n  'font-family': string;\n  'src': string;\n}\n\naddFont(fontFace: FontFace, callback?: () => void): void;\n```\n\n----------------------------------------\n\nTITLE: Conditional Cleaning Based on Environment\nDESCRIPTION: Example demonstrating how to configure cleanDistPath to only clean files during production builds using an environment variable check.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/api/rspeedy/rspeedy.output.cleandistpath.md#2025-04-17_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineConfig } from '@lynx-js/rspeedy'\nexport default defineConfig({\n  output: {\n    cleanDistPath: process.env.NODE_ENV === 'production',\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Defining Provider Type in Rspeedy Config\nDESCRIPTION: TypeScript type definition for the provider property in the Rspeedy Config interface. It accepts an optional RsbuildConfig provider type.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/rspeedy/rspeedy.config.provider.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nprovider?: RsbuildConfig['provider'];\n```\n\n----------------------------------------\n\nTITLE: Defining mergeRspeedyConfig Function Signature in TypeScript\nDESCRIPTION: TypeScript function declaration for merging multiple Rspeedy configuration objects. Takes variable number of Config objects as parameters and returns a merged Config object.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/rspeedy/rspeedy.mergerspeedyconfig.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare function mergeRspeedyConfig(...configs: Config[]): Config;\n```\n\n----------------------------------------\n\nTITLE: Defining Config.source Property in TypeScript\nDESCRIPTION: This code snippet defines the 'source' property of the Config interface. It is an optional property that can be of type Source or undefined. The Source type is used to change the behavior of source files in the rspeedy module.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/api/rspeedy/rspeedy.config.source.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nsource?: Source | undefined;\n```\n\n----------------------------------------\n\nTITLE: Example Output Structure\nDESCRIPTION: Sample output showing the data and status objects returned by the fields() method callback. Demonstrates the structure of successful query results.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/lynx-api/nodes-ref/nodes-ref-fields.mdx#2025-04-17_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// data\n{\"tag\":\"text\",\"dataset\":{\"hello\":\"world\"},\"id\":\"my-id\"}\n\n// status\n{\"data\":\"success\",\"code\":0}\n```\n\n----------------------------------------\n\nTITLE: Configuring CSS Minimizer Options in JavaScript\nDESCRIPTION: Example of using the cssOptions property to configure CSS minimizer options in a JavaScript configuration file. This example demonstrates how to disable error recovery for the CSS minimizer.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/rspeedy/rspeedy.minify.cssoptions.md#2025-04-17_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineConfig } from '@lynx-js/rspeedy'\n\nexport default defineConfig({\n  output: {\n    minify: {\n      cssOptions: {\n        minimizerOptions: {\n          errorRecovery: false,\n        },\n      },\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Defining MetricActualFmpEntry.name Property in TypeScript\nDESCRIPTION: This property specifies the specific name of the performance event. For MetricActualFmpEntry instances, this value is always 'actualFmp'.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/lynx-api/performance-api/performance-entry/metric-actual-fmp-entry.mdx#2025-04-17_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nname: string;\n```\n\n----------------------------------------\n\nTITLE: Disabling CSS Minification in RSpeedy Configuration\nDESCRIPTION: JavaScript example demonstrating how to disable CSS minification in the RSpeedy configuration. This is done by setting the 'css' property to false within the 'minify' object of the 'output' configuration.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/rspeedy/rspeedy.minify.css.md#2025-04-17_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineConfig } from '@lynx-js/rspeedy'\n\nexport default defineConfig({\n  output: {\n    minify: {\n      css: false,\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Formal Border Bottom Color CSS Syntax Definition\nDESCRIPTION: Defines the formal syntax structure for border-bottom-color property including color value types and formats.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/css/properties/border-bottom-color.mdx#2025-04-17_snippet_1\n\nLANGUAGE: css\nCODE:\n```\nborder-bottom-color = <color>\n<color> = <rgb()> | <rgba()> | <hsl()> | <hsla()> | <hex-color> | <named-color>\n```\n\n----------------------------------------\n\nTITLE: Using Boolean Value for Dev.assetPrefix in RSpeedy Configuration\nDESCRIPTION: Example showing how to set dev.assetPrefix to true, which will use http://<host>:<port>/ as the URL prefix for static assets during development.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/api/rspeedy/rspeedy.dev.assetprefix.md#2025-04-17_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineConfig } from '@lynx-js/rspeedy'\nexport default defineConfig({\n  dev: {\n    assetPrefix: true,\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Formal Syntax for CSS background-repeat Property\nDESCRIPTION: This snippet defines the formal syntax for the background-repeat property in CSS. It specifies the allowed values and their combinations.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/api/css/properties/background-repeat.mdx#2025-04-17_snippet_1\n\nLANGUAGE: css\nCODE:\n```\n<repeat-style> = repeat-x | repeat-y | [ repeat | space | round | no-repeat ]{1,2}\n```\n\n----------------------------------------\n\nTITLE: Enabling Generic Resource Fetcher in iOS\nDESCRIPTION: Code showing how to enable generic resource fetcher capability along with template resource fetcher in iOS.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/lynx-native-api/resource-fetcher/TemplateResourceFetcher.mdx#2025-04-17_snippet_5\n\nLANGUAGE: objective-c\nCODE:\n```\nLynxViewBuilder *builder = [[LynxViewBuilder alloc] init];\nbuilder.templateResourceFetcher = [[ExampleTemplateResourceFetcher alloc] init];\nbuilder.enableGenericResourceFetcher = LynxBooleanOptionTrue;\n```\n\n----------------------------------------\n\nTITLE: TypeScript Definition of Source.assetsInclude Property\nDESCRIPTION: TypeScript signature for the assetsInclude property of the Source object, which can accept a Rspack.RuleSetCondition or be undefined.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/api/rspeedy/rspeedy.source.assetsinclude.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nassetsInclude?: Rspack.RuleSetCondition | undefined;\n```\n\n----------------------------------------\n\nTITLE: Defining Filename.template Property in TypeScript\nDESCRIPTION: TypeScript signature definition for the Filename.template property which specifies the naming pattern for template files. The property is optional and accepts either a string value or undefined.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/api/rspeedy/rspeedy.filename.template.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntemplate?: string | undefined;\n```\n\n----------------------------------------\n\nTITLE: Installing Rspeedy CLI Globally\nDESCRIPTION: Command to install Rspeedy globally via npm to make it available in system PATH\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/rspeedy/cli.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --global @lynx-js/rspeedy\n```\n\n----------------------------------------\n\nTITLE: Removing All Console Methods Configuration Example\nDESCRIPTION: Example showing how to configure RSpeedy to remove all console methods in production build by setting removeConsole to true.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/api/rspeedy/rspeedy.performance.removeconsole.md#2025-04-17_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineConfig } from '@lynx-js/rspeedy'\n\nexport default defineConfig({\n  performance: {\n    removeConsole: true,\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Defining cssAsync Property in DistPath Interface (TypeScript)\nDESCRIPTION: TypeScript signature for the cssAsync property within the DistPath interface. This property defines the output directory for asynchronous CSS files and is optional with a default value that points to the 'async' subdirectory of the main CSS output directory.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/api/rspeedy/rspeedy.distpath.cssasync.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ncssAsync?: string | undefined;\n```\n\n----------------------------------------\n\nTITLE: Defining Sticky Top Attribute in TSX\nDESCRIPTION: Defines the sticky-top attribute declared on <list-item> to control whether the node will be sticky at the top.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/elements/built-in/list.mdx#2025-04-17_snippet_11\n\nLANGUAGE: tsx\nCODE:\n```\n// DefaultValue: false\nsticky-top?: boolean\n```\n\n----------------------------------------\n\nTITLE: Formal Syntax Definition for linear-gravity\nDESCRIPTION: Defines the formal syntax for the linear-gravity property, showing the allowed values.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/api/css/properties/linear-gravity.mdx#2025-04-17_snippet_3\n\nLANGUAGE: css\nCODE:\n```\nlinear-gravity = none | start | end | center | space-between\n```\n\n----------------------------------------\n\nTITLE: Defining Debug Method Signature in ExposedAPI Interface in TypeScript\nDESCRIPTION: TypeScript signature for the debug method in the ExposedAPI interface. The method accepts either a string or a function that returns a string and prints it as a debug log. It returns void.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/api/rspeedy/rspeedy.exposedapi.debug.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ndebug: (message: string | (() => string)) => void;\n```\n\n----------------------------------------\n\nTITLE: Using Different Color Value Formats with CSS background-color Property\nDESCRIPTION: Examples of different ways to specify the background-color CSS property using keyword values, hexadecimal notation, RGB values, and HSLA color space.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/css/properties/background-color.mdx#2025-04-17_snippet_0\n\nLANGUAGE: css\nCODE:\n```\n/* Keyword values */\nbackground-color: red;\n\n/* Hexadecimal value */\nbackground-color: #bbff00;\n\n/* RGB value */\nbackground-color: rgb(255, 255, 128);\n\n/* HSLA value */\nbackground-color: hsla(50, 33%, 25%, 0.75);\n```\n\n----------------------------------------\n\nTITLE: TypeScript Property Signature Definition\nDESCRIPTION: Type definition for the tsconfigPath property that accepts either a string path or undefined value.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/api/rspeedy/rspeedy.source.tsconfigpath.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntsconfigPath?: string | undefined;\n```\n\n----------------------------------------\n\nTITLE: Disabling Source Map Generation\nDESCRIPTION: Example of using defineConfig to disable source map generation for JavaScript files.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/api/rspeedy/rspeedy.sourcemap.js.md#2025-04-17_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineConfig } from '@lynx-js/rspeedy'\n\nexport default defineConfig({\n  output: {\n    sourceMap: {\n      js: false,\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Defining DistPath.intermediate Property Type in TypeScript\nDESCRIPTION: Type definition for the intermediate property that specifies the output directory path for intermediate files. The property is optional and defaults to '.rspeedy' if not specified.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/rspeedy/rspeedy.distpath.intermediate.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nintermediate?: string | undefined;\n```\n\n----------------------------------------\n\nTITLE: CSS width Property Syntax Examples\nDESCRIPTION: Examples showing various ways to define element width using fixed lengths, percentages, and keywords.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/css/properties/width.mdx#2025-04-17_snippet_0\n\nLANGUAGE: css\nCODE:\n```\n/* <length> values */\nwidth: 300px;\nwidth: 25em;\n\n/* <percentage> value */\nwidth: 75%;\n\n/* Keyword values */\nwidth: max-content;\nwidth: fit-content;\nwidth: fit-content(20em);\nwidth: auto;\n```\n\n----------------------------------------\n\nTITLE: Perspective Property Value Types\nDESCRIPTION: Defines the value types for the perspective property, including auto and length values.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/css/properties/perspective.mdx#2025-04-17_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nperspective = auto | <length [0,∞]>\n```\n\n----------------------------------------\n\nTITLE: Defining Image Filename Property Type in TypeScript\nDESCRIPTION: TypeScript property definition for specifying the naming pattern of non-SVG images. Defaults to '[name].[contenthash:8][ext]' if not specified. The property is optional and accepts either a string value or undefined.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/api/rspeedy/rspeedy.filename.image.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimage?: string | undefined;\n```\n\n----------------------------------------\n\nTITLE: CommonJS Require Cache Example\nDESCRIPTION: Demonstrates the caching behavior of CommonJS require() function where multiple requires of the same module return the same instance.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/guide/scripting-runtime/index.mdx#2025-04-17_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nrequire('foo') === require('foo'); // true\n```\n\n----------------------------------------\n\nTITLE: Defining the dataUriLimit TypeScript Interface\nDESCRIPTION: TypeScript interface definition for the dataUriLimit property within the Output configuration. It specifies that dataUriLimit can be either a number or undefined, with a default value of 2kB.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/api/rspeedy/rspeedy.output.dataurilimit.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ndataUriLimit?: number | undefined;\n```\n\n----------------------------------------\n\nTITLE: CSS background-repeat Formal Syntax Definition\nDESCRIPTION: The formal syntax definition for the background-repeat property, showing the complete set of possible values and combinations.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/css/properties/background-repeat.mdx#2025-04-17_snippet_1\n\nLANGUAGE: css\nCODE:\n```\n<repeat-style> = repeat-x | repeat-y | [ repeat | space | round | no-repeat ]{1,2}\n```\n\n----------------------------------------\n\nTITLE: Displaying Named Color: Generic Example\nDESCRIPTION: JSX code template used for displaying most named colors with their visual representations.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/css/data-type/color.mdx#2025-04-17_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<div style={{ padding: '17.5px 90px', margin: '-10px', backgroundColor: 'rgba(R, G, B, A)' }}></div>\n```\n\n----------------------------------------\n\nTITLE: Event Capturing Implementation in Lynx\nDESCRIPTION: Example showing event capturing phase in Lynx, where events are handled as they propagate down from the root node to the target. This demonstrates how to listen to all tap events across the page by capturing them at the root level.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/guide/interaction/event-handling/event-propagation.mdx#2025-04-17_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\ncapture-bind:onTap={() => {\n  setCount(count + 1);\n}}\n```\n\nLANGUAGE: tsx\nCODE:\n```\n<Text>You've tapped {count} times</Text>\n```\n\n----------------------------------------\n\nTITLE: Checking Fatal Error Status in Objective-C\nDESCRIPTION: Method to determine if the error level is Fatal. Helps identify critical errors that might cause page blanking and require fallback handling.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/errors/lynx-error.mdx#2025-04-17_snippet_6\n\nLANGUAGE: objective-c\nCODE:\n```\n- (BOOL)isFatal\n```\n\n----------------------------------------\n\nTITLE: Disabling CSS modules in RSpeedy configuration\nDESCRIPTION: Example showing how to disable CSS modules by setting the auto property to false in the RSpeedy configuration.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/api/rspeedy/rspeedy.output.cssmodules.md#2025-04-17_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineConfig } from '@lynx-js/rspeedy'\nexport default defineConfig({\n  output: {\n    cssModules: {\n      auto: false,\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: TypeScript Output.distPath Type Definition\nDESCRIPTION: TypeScript type signature for the distPath property in the Output interface, which can be either a DistPath type or undefined.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/api/rspeedy/rspeedy.output.distpath.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ndistPath?: DistPath | undefined;\n```\n\n----------------------------------------\n\nTITLE: Defining the CssLoaderModules.auto Property Signature in TypeScript\nDESCRIPTION: Typescript signature for the auto property which can accept a boolean, RegExp, function that takes a filename as input and returns a boolean, or undefined. This property controls the automatic enabling of CSS modules based on filename patterns.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/api/rspeedy/rspeedy.cssloadermodules.auto.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nauto?: boolean | RegExp | ((filename: string) => boolean) | undefined;\n```\n\n----------------------------------------\n\nTITLE: Finding Views by Name in iOS\nDESCRIPTION: Objective-C method to find a UIView object based on its name attribute specified in the layout file. Returns an optional UIView instance that matches the provided name.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/lynx-native-api/lynx-view/find-view-by-name.mdx#2025-04-17_snippet_1\n\nLANGUAGE: objc\nCODE:\n```\n- (nullable UIView*)viewWithName:(nonnull NSString*)name;\n```\n\n----------------------------------------\n\nTITLE: Monitoring Multiple Components with Same Timing Flag\nDESCRIPTION: Example showing how multiple components with the same __lynx_timing_flag are handled. Only the first displayed component's pipeline data will be counted.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/guide/performance/timing-flag.mdx#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport default function App() {\n  const [showImage, setShowImage] = useState(false);\n\n  useEffect(() => {\n    setTimeout(() => {\n      setShowImage(true);\n    }, 3000);\n  }, []);\n\n  return (\n    <view className=\"container\">\n      <text __lynx_timing_flag=\"__lynx_timing_actual_fmp\">Hello World</text>\n      {showImage && <image __lynx_timing_flag=\"__lynx_timing_actual_fmp\" src=\"xxxx.png\" />}\n    </view>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring CSS Variables\nDESCRIPTION: Demonstrates how to declare CSS variables using the -- prefix in different scopes, including global (:root) and local selectors.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/css/properties/css-variable.mdx#2025-04-17_snippet_0\n\nLANGUAGE: css\nCODE:\n```\n:root {\n  --main-bg-color: yellow;\n}\n\n.two {\n  --main-height: 200px;\n  color: white;\n  background-color: black;\n  width: 100%;\n  height: 100%;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining MetricActualFmpEntry.totalActualFmp Property in TypeScript\nDESCRIPTION: This optional property represents the time from the user opening the page to the completion of rendering for marked components. It returns a PerformanceMetric object.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/lynx-api/performance-api/performance-entry/metric-actual-fmp-entry.mdx#2025-04-17_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\ntotalActualFmp?: PerformanceMetric;\n```\n\n----------------------------------------\n\nTITLE: Configuring dataUriLimit to Inline Assets Less Than 4kB\nDESCRIPTION: Example of using defineConfig to set dataUriLimit to 4kB, which will inline all static assets less than 4kB in size.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/rspeedy/rspeedy.output.dataurilimit.md#2025-04-17_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineConfig } from '@lynx-js/rspeedy'\nexport default defineConfig({\n  output: {\n    dataUriLimit: 4 * 1024,\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Formal Syntax for justify-items in Lynx\nDESCRIPTION: Formal syntax definition for the justify-items CSS property in Lynx, showing the acceptable values.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/api/css/properties/justify-items.mdx#2025-04-17_snippet_1\n\nLANGUAGE: css\nCODE:\n```\njustify-items = stretch | center | start | end\n```\n\n----------------------------------------\n\nTITLE: Name Parameter Type Definition in TypeScript\nDESCRIPTION: Type definition for the name parameter which specifies the name of the element event to be listened to.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/lynx-api/lynx/lynx-before-publish-event/before-publish-event-add.mdx#2025-04-17_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nname: string;\n```\n\n----------------------------------------\n\nTITLE: Importing and Using LegacyCompatTable Component\nDESCRIPTION: This code imports and uses the LegacyCompatTable component from the Lynx library to display compatibility information for CSS color data types. The component references metadata for CSS color data types.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/api/css/data-type/color.mdx#2025-04-17_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport { LegacyCompatTable } from '@lynx';\n\n<LegacyCompatTable metadata=\"css/data-type/color\" />\n```\n\n----------------------------------------\n\nTITLE: Using aspect-ratio property in CSS\nDESCRIPTION: Examples of different ways to set the aspect-ratio CSS property. Shows both fractional notation (1/1, 16/9) and decimal notation (0.5).\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/css/properties/aspect-ratio.mdx#2025-04-17_snippet_0\n\nLANGUAGE: css\nCODE:\n```\naspect-ratio: 1 / 1;\naspect-ratio: 16 / 9;\naspect-ratio: 0.5;\n```\n\n----------------------------------------\n\nTITLE: Configuring Bundle Filename with Content Hash Length in JavaScript\nDESCRIPTION: Shows how to use content hash with a specified length in the bundle filename configuration using @lynx-js/rspeedy. This example sets the bundle filename to include the entry name and an 8-character content hash.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/rspeedy/rspeedy.filename.bundle.md#2025-04-17_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineConfig } from '@lynx-js/rspeedy'\n\nexport default defineConfig({\n  output: {\n    filename: {\n      bundle: '[name].[contenthash:8].bundle',\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Excluding Specific File Types in Rspeedy\nDESCRIPTION: Configuration showing how to exclude specific file types from size output using the exclude filter.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/rspeedy/rspeedy.performance.printfilesize.md#2025-04-17_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineConfig } from '@lynx-js/rspeedy'\n\nexport default defineConfig({\n  performance: {\n    printFileSize: {\n      exclude: (asset) =>\n        /\\.(?:map|LICENSE\\.txt)$/.test(asset.name) ||\n        /\\.html$/.test(asset.name),\n    }\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: React Component Import Statement\nDESCRIPTION: Import statement for the Go component from the Lynx framework.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/css/properties/animation-iteration-count.mdx#2025-04-17_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Go } from '@lynx';\n```\n\n----------------------------------------\n\nTITLE: Importing ButtonGroup Component with camelToDashComponentName set to false or undefined\nDESCRIPTION: Example of importing a ButtonGroup component when camelToDashComponentName is set to false or undefined. The import path remains in PascalCase.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/api/rspeedy/rspeedy.transformimport.cameltodashcomponentname.md#2025-04-17_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport ButtonGroup from 'foo/ButtonGroup'\n```\n\n----------------------------------------\n\nTITLE: RSpeedy Config Type Definition\nDESCRIPTION: TypeScript type definition for the environments configuration property in RSpeedy config.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/rspeedy/rspeedy.config.environments.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nenvironments?: RsbuildConfig['environments'] | undefined;\n```\n\n----------------------------------------\n\nTITLE: TypeScript JSON Module Configuration\nDESCRIPTION: TypeScript configuration to enable JSON module imports\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/guide/inclusion/internationalization.mdx#2025-04-17_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"compilerOptions\": {\n    \"resolveJsonModule\": true\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Hero Section for Lynx Website Home Page in YAML\nDESCRIPTION: YAML frontmatter configuration that defines the structure of the Lynx website home page. It specifies the page type, hero section with custom HTML formatting for the title, descriptive tagline, and navigation action buttons that link to Quick Start and API documentation.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/rspeedy/index.md#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\npageType: home\n\nhero:\n  name: <span class=\"hero-title\"><span class=\"normal\">The </span><span class=\"brand-ani\">Build Tool </span><span class=\"normal\">for </span><span class=\"brand\">Lynx</span></span>\n  tagline: Build your Lynx application instantly with Rspack\n  actions:\n    - theme: brand\n      text: Get Started\n      link: ./start/quick-start\n    - theme: alt\n      text: API\n      link: ../api/rspeedy.html\n---\n```\n\n----------------------------------------\n\nTITLE: Basic CSS Visibility Property Syntax\nDESCRIPTION: Demonstrates the basic keyword values for the CSS visibility property. Shows how to make elements visible or hidden.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/css/properties/visibility.mdx#2025-04-17_snippet_0\n\nLANGUAGE: css\nCODE:\n```\n/* Keyword values */\nvisibility: visible;\nvisibility: hidden;\n```\n\n----------------------------------------\n\nTITLE: Defining CSS Filename Property in TypeScript\nDESCRIPTION: This code snippet shows the TypeScript signature for the css property of the Filename interface. It is an optional string property that specifies the name of the CSS files.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/api/rspeedy/rspeedy.filename.css.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ncss?: string | undefined;\n```\n\n----------------------------------------\n\nTITLE: Function Standard Syntax: Skew Functions in CSS\nDESCRIPTION: Syntax specifications for skew, skewX, and skewY transform functions.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/css/properties/transform.mdx#2025-04-17_snippet_4\n\nLANGUAGE: scss\nCODE:\n```\nscale( [ <angle> | <zero> ], [ <angle> | <zero> ] )\n```\n\nLANGUAGE: scss\nCODE:\n```\nscaleX( [ <angle> | <zero> ] )\n```\n\nLANGUAGE: scss\nCODE:\n```\nscaleY( [ <angle> | <zero> ] )\n```\n\n----------------------------------------\n\nTITLE: Formal Syntax of overflow-x Property in Lynx\nDESCRIPTION: The formal syntax definition for the overflow-x CSS property in the Lynx framework, showing the available values.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/api/css/properties/overflow-x.mdx#2025-04-17_snippet_3\n\nLANGUAGE: css\nCODE:\n```\nhidden | visible\n```\n\n----------------------------------------\n\nTITLE: Demonstrating CSS left Property Usage\nDESCRIPTION: Examples of various ways to use the 'left' CSS property, including length values, percentages, keywords, and calc() function.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/css/properties/left.mdx#2025-04-17_snippet_0\n\nLANGUAGE: css\nCODE:\n```\n/* <length> values */\nleft: 3px;\nleft: 2rpx;\nleft: 2.4em;\nleft: 3rem;\n\nleft: 10%;\n\n/* Keyword value */\nleft: auto;\n\n/* calc */\nleft: calc(1px + 1px);\n```\n\n----------------------------------------\n\nTITLE: Basic text-stroke CSS Usage Example\nDESCRIPTION: A simple example demonstrating how to use the text-stroke property with a width of 4px and color green.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/css/properties/text-stroke.mdx#2025-04-17_snippet_0\n\nLANGUAGE: css\nCODE:\n```\ntext-stroke: 4px green;\n```\n\n----------------------------------------\n\nTITLE: Defining CssExtract.pluginOptions Property in TypeScript\nDESCRIPTION: This code snippet defines the pluginOptions property for the CssExtract class. It's an optional property that accepts CssExtractRspackPluginOptions or undefined as its value. This property is used to configure the CssExtractRspackPlugin in Rspack builds.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/rspeedy/rspeedy.cssextract.pluginoptions.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\npluginOptions?: CssExtractRspackPluginOptions | undefined;\n```\n\n----------------------------------------\n\nTITLE: Importing Lynx Components in TypeScript/JSX\nDESCRIPTION: This code snippet imports all components from the Lynx library as a namespace. It allows for dynamic lookup in TSDoc writings.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/react/Interface.InitData.mdx#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as Lynx from '@lynx';\n```\n\n----------------------------------------\n\nTITLE: Defining CssLoaderModules.exportLocalsConvention Property in TypeScript\nDESCRIPTION: TypeScript signature for the exportLocalsConvention property, which determines the style of exported class names in CSS modules. It can be set to various conventions that control how class names are transformed.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/api/rspeedy/rspeedy.cssloadermodules.exportlocalsconvention.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexportLocalsConvention?: CssModuleLocalsConvention | undefined;\n```\n\n----------------------------------------\n\nTITLE: Using BlogAvatar Component\nDESCRIPTION: Demonstrates how to use the BlogAvatar component to display author avatars by specifying a list of author IDs.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/internal/docs-contribution-guide/doc-components.mdx#2025-04-17_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\n// list: author-id\n<BlogAvatar list={['huxpro', 'minalwws']} />\n```\n\n----------------------------------------\n\nTITLE: Configuring Typed CSS Modules Plugin in Rspeedy\nDESCRIPTION: Configuration for generating exact TypeScript declarations for CSS Modules using the @rsbuild/plugin-typed-css-modules plugin in lynx.config.ts.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/rspeedy/styling.mdx#2025-04-17_snippet_5\n\nLANGUAGE: js\nCODE:\n```\nimport { pluginTypedCSSModules } from '@rsbuild/plugin-typed-css-modules';\n\nimport { pluginReactLynx } from '@lynx-js/react-rsbuild-plugin';\nimport { defineConfig } from '@lynx-js/rspeedy';\n\nexport default defineConfig({\n  source: {\n    entry: './src/index.tsx',\n  },\n  plugins: [pluginReactLynx(), pluginTypedCSSModules()],\n});\n```\n\n----------------------------------------\n\nTITLE: Basic Border-Left-Width Syntax Examples in CSS\nDESCRIPTION: Demonstrates the basic syntax for the border-left-width CSS property using predefined keyword values.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/css/properties/border-left-width.mdx#2025-04-17_snippet_0\n\nLANGUAGE: css\nCODE:\n```\nborder-left-width: thin;\nborder-left-width: medium;\n```\n\n----------------------------------------\n\nTITLE: Rendering z-index Example in React JSX\nDESCRIPTION: JSX code snippet for rendering a z-index example using the Go component from the Lynx framework.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/css/properties/z-index.mdx#2025-04-17_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<Go\n  example=\"css-api\"\n  defaultFile=\"src/z-index/App.tsx\"\n  img=\"https://lf-lynx.tiktok-cdns.com/obj/lynx-artifacts-oss-sg/lynx-website/assets/doc/css/z-index.jpg\"\n  entry=\"src/z-index\"\n  defaultEntryFile=\"dist/z-index.lynx.bundle\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Configuring Bundle Filename with Content Hash in JavaScript\nDESCRIPTION: Demonstrates how to use content hash in the bundle filename configuration using @lynx-js/rspeedy. This example sets the bundle filename to include the entry name and content hash.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/rspeedy/rspeedy.filename.bundle.md#2025-04-17_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineConfig } from '@lynx-js/rspeedy'\n\nexport default defineConfig({\n  output: {\n    filename: {\n      bundle: '[name].[contenthash].bundle',\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Getting Error Subcode in Java\nDESCRIPTION: Method to retrieve the error subcode which is a 5-6 digit number extending the error code to indicate specific error causes. For example, subcode 30101 indicates an oversized image error.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/errors/lynx-error.mdx#2025-04-17_snippet_1\n\nLANGUAGE: java\nCODE:\n```\npublic int getSubcode()\n```\n\n----------------------------------------\n\nTITLE: Defining DistPath.js Property in TypeScript\nDESCRIPTION: TypeScript interface property definition for specifying the JavaScript files output directory. The property is optional and accepts either a string value or undefined. Default value is 'static/js'.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/rspeedy/rspeedy.distpath.js.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\njs?: string | undefined;\n```\n\n----------------------------------------\n\nTITLE: Border-Bottom Formal Syntax Definition\nDESCRIPTION: Formal syntax definition for the border-bottom property, including possible values for line width, style, and color.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/css/properties/border-bottom.mdx#2025-04-17_snippet_1\n\nLANGUAGE: css\nCODE:\n```\nborder-bottom =\n  <line-width>  ||\n  <line-style>  ||\n  <color>\n\n<line-width> = <length> | thin | medium | thick\n<line-style> = none | hidden | dotted | dashed | solid | double | groove | ridge | inset | outset\n```\n\n----------------------------------------\n\nTITLE: React Component with Resource Prefetch Cancellation\nDESCRIPTION: Example React component demonstrating how to implement resource prefetch cancellation for video resources using the lynx API. Shows both prefetch initialization and cancellation with error handling.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/lynx-api/lynx/lynx-cancel-resource-prefetch.mdx#2025-04-17_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useEffect } from '@lynx-js/react';\n\nfunction Page() {\n  // We need to preload two videos.\n  // First, prepare the resource parameters, assigning the necessary preloadKey to the videos.\n  let resData = [\n    {\n      uri: 'https://zzzzz1.mp4',\n      type: 'video',\n      params: { preloadKey: 'zzzzz1' },\n    },\n    {\n      uri: 'https://zzzzz2.mp4',\n      type: 'video',\n      params: { preloadKey: 'zzzzz2' },\n    },\n  ];\n\n  useEffect(() => {\n    // Call requestResourcePrefetch to initiate preloading\n    lynx.requestResourcePrefetch?.({\n      data: resData,\n    },\n    (res) => {\n      if (res.code == 0) {\n        console.log('success!');\n      } else {\n        console.log('fail! ', res.msg);\n      }\n      console.log('prefetch status of each resource:', JSON.stringify(res.details));\n    });\n  }, []);\n\n  const handleTap = () => {\n    // Trigger the cancellation of resource preloading on click\n    // Call cancelResourcePrefetch to cancel the preloading\n    lynx.cancelResourcePrefetch?.({\n      data: resData,\n    },\n    (res) => {\n      if (res.code == 0) {\n        console.log('success!');\n      } else {\n        console.log('fail! ', res.msg);\n      }\n      console.log('cancel status of each resource:', JSON.stringify(res.details));\n    });\n  };\n\n  return <view onTap={handleTap}>{/* ... */}</view>;\n}\n\nexport default Page;\n```\n\n----------------------------------------\n\nTITLE: Checking Fatal Error Status in Java\nDESCRIPTION: Method to determine if the error level is Fatal. Helps identify critical errors that might cause page blanking and require fallback handling.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/errors/lynx-error.mdx#2025-04-17_snippet_2\n\nLANGUAGE: java\nCODE:\n```\npublic boolean isFatal()\n```\n\n----------------------------------------\n\nTITLE: Example Usage of __FirstElement in Lynx Framework (JSX)\nDESCRIPTION: This example shows how to use the __FirstElement function in the Lynx frontend framework. It first creates a view element using __CreateElement and then retrieves its first child element.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/engine/element-api/__FirstElement.mdx#2025-04-17_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n// main-thread.js\nlet element = __CreateElement('view', 0, {});\n\nlet first = __FirstElement(element);\n```\n\n----------------------------------------\n\nTITLE: Defining writeToDisk Property Signature in TypeScript\nDESCRIPTION: The TypeScript signature for the writeToDisk property, which can be a boolean, a function, or undefined. The function takes a filename string and returns a boolean.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/rspeedy/rspeedy.dev.writetodisk.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nwriteToDisk?: boolean | ((filename: string) => boolean) | undefined;\n```\n\n----------------------------------------\n\nTITLE: Defining Server Base Path Type in TypeScript\nDESCRIPTION: TypeScript type definition for the server base path property, which accepts either a string value or undefined.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/rspeedy/rspeedy.server.base.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nbase?: string | undefined;\n```\n\n----------------------------------------\n\nTITLE: Implementing ILynxLogService in Kotlin for Android\nDESCRIPTION: This snippet shows how to implement the ILynxLogService interface in Kotlin for Android. It includes methods for logging, output channel management, and system log switching.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/api/lynx-native-api/lynx-service.mdx#2025-04-17_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nobject YourLogService : ILynxLogService {\n  private var logOutputChannel: LogOutputChannelType = LogOutputChannelType.Platform\n\n  override fun logByPlatform(\n    level: Int,\n    tag: String,\n    msg: String,\n  ) {\n    // 具体实现\n  }\n\n  override fun isLogOutputByPlatform(): Boolean = logOutputChannel == LogOutputChannelType.Platform\n\n  override fun getDefaultWriteFunction(): Long = 0\n\n  override fun switchLogToSystem(enableSystemLog: Boolean) {}\n\n  override fun getLogToSystemStatus(): Boolean = false\n}\n```\n\n----------------------------------------\n\nTITLE: Min-Height Formal Syntax Definition\nDESCRIPTION: The formal syntax definition for the min-height CSS property in Lynx, showing the allowed values and their formats.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/css/properties/min-height.mdx#2025-04-17_snippet_1\n\nLANGUAGE: css\nCODE:\n```\nmin-height = <length-percentage [0,∞]>\n\n<length-percentage> =\n  <length>      |\n  <percentage>\n```\n\n----------------------------------------\n\nTITLE: Defining Image Filename Property Type in TypeScript\nDESCRIPTION: Type definition for the optional image property that specifies the naming pattern for non-SVG images. Defaults to '[name].[contenthash:8][ext]' if not specified.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/rspeedy/rspeedy.filename.image.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimage?: string | undefined;\n```\n\n----------------------------------------\n\nTITLE: Error Code Definitions in JSX\nDESCRIPTION: Enum of common error codes returned when using SelectorQuery, including NODE_NOT_FOUND, METHOD_NOT_FOUND, and other potential issues.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/lynx-api/selector-query/selector-query-select.mdx#2025-04-17_snippet_10\n\nLANGUAGE: jsx\nCODE:\n```\nenum ErrorCode {\n  SUCCESS = 0,\n  UNKNOWN = 1,\n  NODE_NOT_FOUND = 2,          // Node not found in the element tree\n  METHOD_NOT_FOUND = 3,        // The specified method is not present on the found UI node\n  PARAM_INVALID = 4,           // Invalid arguments as determined by the component implementer\n  SELECTOR_NOT_SUPPORTED = 5,  // Usage of unsupported selectors\n  NO_UI_FOR_NODE = 6,          // Node found in the element tree, but there is no corresponding UI\n}\n```\n\n----------------------------------------\n\nTITLE: Default CSS Loader Configuration in JavaScript\nDESCRIPTION: Default configuration options for css-loader including CSS modules settings, source map generation, and import loader configuration.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/api/rspeedy/rspeedy.cssloader.md#2025-04-17_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst defaultOptions = {\n  modules: {\n    auto: true,\n    namedExport: false,\n    exportLocalsConvention: 'camelCase',\n    localIdentName: output.cssModules.localIdentName,\n  },\n  sourceMap: output.sourceMap,\n  // importLoaders is `1` when compiling css files, and is `2` when compiling sass/less files\n  importLoaders: 1 || 2,\n};\n```\n\n----------------------------------------\n\nTITLE: Animation Play State Formal Syntax\nDESCRIPTION: The formal syntax definition for the animation-play-state property, showing the possible values of running or paused, with running as the default value.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/css/properties/animation-play-state.mdx#2025-04-17_snippet_1\n\nLANGUAGE: css\nCODE:\n```\n/*default value:running*/\nanimation-play-state: running | paused;\n```\n\n----------------------------------------\n\nTITLE: Defining legalComments Property Type in TypeScript\nDESCRIPTION: TypeScript type definition for the legalComments property that controls legal comment handling in build output. It accepts 'none', 'inline', or 'linked' as values, with 'none' being the default. This property determines how legal comments are processed in the final build output.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/api/rspeedy/rspeedy.output.legalcomments.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nlegalComments?: 'none' | 'inline' | 'linked' | undefined;\n```\n\n----------------------------------------\n\nTITLE: Formal Syntax for Border Bottom Color in CSS\nDESCRIPTION: This snippet defines the formal syntax for the border-bottom-color property and the <color> data type in CSS.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/api/css/properties/border-bottom-color.mdx#2025-04-17_snippet_2\n\nLANGUAGE: css\nCODE:\n```\nborder-bottom-color = <color>\n<color> = <rgb()> | <rgba()> | <hsl()> | <hsla()> | <hex-color> | <named-color>\n```\n\n----------------------------------------\n\nTITLE: Disabling CSS Modules in RSpeedy Configuration\nDESCRIPTION: Example of disabling CSS Modules in the RSpeedy configuration to improve performance for projects using vanilla CSS or other technologies.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/rspeedy/rspeedy.cssloader.modules.md#2025-04-17_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineConfig } from '@lynx-js/rspeedy'\n\nexport default defineConfig({\n  tools: {\n    cssLoader: {\n      modules: false,\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Defining EntryDescription.import Property in TypeScript\nDESCRIPTION: This code snippet defines the 'import' property for the EntryDescription interface. It specifies the path to the entry module(s) and can be a string, an array of strings, or undefined. If no value is provided, it defaults to 'src/index.js'.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/rspeedy/rspeedy.entrydescription.import.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport?: string | string[] | undefined;\n```\n\n----------------------------------------\n\nTITLE: Defining Platform Schema Structure in JSON\nDESCRIPTION: Example JSON structure showing how platform data is organized. Includes platform details like name, type, and release information with dates, notes URLs, and status. The example demonstrates the schema for iOS platform with multiple release versions.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/packages/lynx-compat-data/schemas/platform-schema.md#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"platforms\": {\n    \"ios\": {\n      \"name\": \"iOS\",\n      \"type\": \"native\",\n      \"releases\": {\n        \"2.4\": {\n          \"release_date\": \"2021-07-06\",\n          \"release_notes\": \"https://example.com/release_note\",\n          \"status\": \"retired\"\n        },\n        \"2.13\": {\n          \"release_date\": \"2022-08-15\",\n          \"release_notes\": \"https://example.com/release_note\",\n          \"status\": \"release\"\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Rspack Using Function with mergeConfig Utility\nDESCRIPTION: Example showing how to use the mergeConfig utility to combine the existing Rspack configuration with custom settings. This approach helps avoid accidentally overwriting existing configuration.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/api/rspeedy/rspeedy.tools.rspack.md#2025-04-17_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineConfig } from '@lynx-js/rspeedy'\n\nexport default defineConfig({\n  tools: {\n    rspack(config, { mergeConfig }) {\n      return mergeConfig(config, {\n        resolve: {\n          fullySpecified: true,\n        },\n      })\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Defining targetSdkVersion Property Type in TypeScript\nDESCRIPTION: TypeScript type definition for the targetSdkVersion property in PluginReactLynxOptions interface. This property is now deprecated in favor of engineVersion property. It accepts an optional string value that specifies the minimum Lynx Engine version requirement.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/rspeedy/react-rsbuild-plugin.pluginreactlynxoptions.targetsdkversion.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntargetSdkVersion?: string;\n```\n\n----------------------------------------\n\nTITLE: File Generation Comment in JSX\nDESCRIPTION: This JSX comment indicates that the file is generated by @lynx-js/tool-typedoc and should not be edited directly.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/react/Interface.InitData.mdx#2025-04-17_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n{/*\n* This file is generated by @lynx-js/tool-typedoc.\n* Do not edit this file directly.\n* @generated\n*/}\n```\n\n----------------------------------------\n\nTITLE: Asset URL with Prefix Example\nDESCRIPTION: Example showing how asset URLs are prefixed in production builds\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/rspeedy/assets.md#2025-04-17_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport logo from './static/logo.png';\n\nconsole.log(logo); // \"https://example.com/assets/logo.6c12aba3.png\"\n```\n\n----------------------------------------\n\nTITLE: Importing and Rendering AdvancedTutorial Component in React\nDESCRIPTION: This snippet imports an AdvancedTutorial component from a relative path and renders it. The component is sourced from an MDX file, suggesting it contains markdown with JSX.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/guide/start/tutorial-payment-details.mdx#2025-04-17_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport AdvancedTutorial from '../../react/payment-details.mdx';\n\n<AdvancedTutorial />\n```\n\n----------------------------------------\n\nTITLE: Using border-inline-start-color with various color values in CSS\nDESCRIPTION: Examples of different color value formats that can be used with the border-inline-start-color property, including named colors, hex codes, RGB, HSL, and special values like currentColor and transparent.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/css/properties/border-inline-start-color.mdx#2025-04-17_snippet_0\n\nLANGUAGE: css\nCODE:\n```\nborder-inline-start-color: red;\nborder-inline-start-color: #ffbb00;\nborder-inline-start-color: rgb(255, 0, 0);\nborder-inline-start-color: hsla(100%, 50%, 25%, 0.75);\nborder-inline-start-color: currentColor;\nborder-inline-start-color: transparent;\n```\n\n----------------------------------------\n\nTITLE: Server Host Property Type Definition\nDESCRIPTION: TypeScript type definition for the Server.host property that specifies the listening host for the Rspeedy Server\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/rspeedy/rspeedy.server.host.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nhost?: string | undefined;\n```\n\n----------------------------------------\n\nTITLE: CSS Letter-Spacing Basic Syntax Examples\nDESCRIPTION: Examples of different ways to specify letter-spacing using CSS length values. Shows usage with em units, pixels, and decimal pixel values.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/css/properties/letter-spacing.mdx#2025-04-17_snippet_0\n\nLANGUAGE: css\nCODE:\n```\n/* <length> values */\nletter-spacing: 0.3em;\nletter-spacing: 3px;\nletter-spacing: 0.3px;\n```\n\n----------------------------------------\n\nTITLE: Defining the client property in the Dev interface in TypeScript\nDESCRIPTION: The TypeScript signature for the client property within the Dev interface. This property is optional and accepts a Client object or undefined, used for configuring the development client settings.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/api/rspeedy/rspeedy.dev.client.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclient?: Client | undefined;\n```\n\n----------------------------------------\n\nTITLE: Using length and percentage values with max-height property in CSS\nDESCRIPTION: Examples showing how to specify max-height using both absolute length values (pixels, em) and percentage values relative to the containing block's height.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/css/properties/max-height.mdx#2025-04-17_snippet_0\n\nLANGUAGE: css\nCODE:\n```\n/* <length> */\nmax-height: 120px;\nmax-height: 10em;\n\n/* <percentage> */\nmax-height: 75%;\n```\n\n----------------------------------------\n\nTITLE: Basic Relative Align Inline End CSS Usage\nDESCRIPTION: Shows the basic syntax and possible values for the relative-align-inline-end property. Can be set to parent, none, or numeric values to reference specific elements.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/css/properties/relative-align-inline-end.mdx#2025-04-17_snippet_0\n\nLANGUAGE: css\nCODE:\n```\nrelative-align-inline-end: parent;\nrelative-align-inline-end: none;\n\nrelative-align-inline-end: 1;\nrelative-align-inline-end: 2;\n```\n\n----------------------------------------\n\nTITLE: TypeScript Definition of Output.assetPrefix Property\nDESCRIPTION: The TypeScript signature for the assetPrefix property in the Output interface. It defines the property as an optional string.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/api/rspeedy/rspeedy.output.assetprefix.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nassetPrefix?: string | undefined;\n```\n\n----------------------------------------\n\nTITLE: Importing Components for LynxView Documentation\nDESCRIPTION: This snippet imports necessary components from the Lynx framework and local MDX files for platform-specific documentation.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/guide/embed-lynx-to-native.mdx#2025-04-17_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { PlatformTabs, Go } from '@lynx';\nimport ModeiOS from './embed-lynx-to-native/embed-lynx-to-native-mode-iOS.mdx';\nimport ModeAndroid from './embed-lynx-to-native/embed-lynx-to-native-mode-android.mdx';\n```\n\n----------------------------------------\n\nTITLE: Structuring Disexposure Event in JSON for Lynx GlobalEvent\nDESCRIPTION: Defines the structure of the 'disexposure' event in the GlobalEvent object. It includes details about a node that has become invisible, mirroring the structure of the exposure event.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/lynx-api/event/global-event.mdx#2025-04-17_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"exposure-id\": string,      // exposure-id set on the target node\n    \"exposure-scene\": string,   // exposure-scene set on the target node\n    \"sign\": string,             // uid of the target node\n    \"dataset\": object,          // \"data-\" field set on the target node\n    //......\n  },\n  //......\n]\n```\n\n----------------------------------------\n\nTITLE: Defining PerformanceMetric Name Attribute in TypeScript\nDESCRIPTION: Defines the 'name' attribute of the PerformanceMetric type, which represents the name of the metric (e.g., fcp, lynxFcp, totalFcp).\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/lynx-api/performance-api/performance-metric.mdx#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nname: string;\n```\n\n----------------------------------------\n\nTITLE: Importing and Using CompatTable Component in TSX\nDESCRIPTION: This snippet demonstrates how to import necessary data and use the CompatTable component. It statically imports test data and platforms data, then renders the CompatTable with specific props.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/src/components/api-table/compat-table/README.md#2025-04-17_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n// Import the data statically\nimport testData from '@lynx-js/lynx-compat-data/test/api.json';\nimport platformsData from '@lynx-js/lynx-compat-data/platforms/platforms.json';\n\n<CompatTable\n  query=\"test.api\"\n  data={testData.test.api}\n  browsers={platformsData.platforms}\n  locale=\"en-US\"\n/>;\n```\n\n----------------------------------------\n\nTITLE: Defining RsdoctorRspackPluginOptions Type in TypeScript\nDESCRIPTION: Exports a type that represents the constructor parameters for RsdoctorRspackPlugin. The type uses TypeScript's ConstructorParameters utility type to extract the type of the first parameter of the RsdoctorRspackPlugin constructor.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/api/rspeedy/rspeedy.rsdoctorrspackpluginoptions.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport type RsdoctorRspackPluginOptions = ConstructorParameters<typeof RsdoctorRspackPlugin<[]>>[0];\n```\n\n----------------------------------------\n\nTITLE: Defining exportGlobals Property in CssModules Interface (TypeScript)\nDESCRIPTION: This code snippet shows the TypeScript signature for the exportGlobals property. It is an optional boolean property that allows exporting names from global class names for use via import.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/rspeedy/rspeedy.cssmodules.exportglobals.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexportGlobals?: boolean | undefined;\n```\n\n----------------------------------------\n\nTITLE: TypeScript Definition for source.include Property\nDESCRIPTION: Type definition showing that source.include accepts an optional array of Rspack.RuleSetCondition or undefined.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/rspeedy/rspeedy.source.include.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninclude?: Rspack.RuleSetCondition[] | undefined;\n```\n\n----------------------------------------\n\nTITLE: Defining Debug Logger Method Signature in TypeScript\nDESCRIPTION: Type definition for a debug logging method that accepts either a string message or a function returning a string, and returns void. This property is used for printing debug logs in the application.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/rspeedy/rspeedy.exposedapi.debug.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ndebug: (message: string | (() => string)) => void;\n```\n\n----------------------------------------\n\nTITLE: Defining CustomizedSchemaFn Type for QR Code Schema Generation\nDESCRIPTION: Type definition for a function that takes a URL string and returns either a string or a record object with string values. Used to customize how QR code schemas are generated from URLs.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/api/rspeedy/qrcode-rsbuild-plugin.customizedschemafn.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport type CustomizedSchemaFn = (url: string) => string | Record<string, string>;\n```\n\n----------------------------------------\n\nTITLE: Defining Performance Property in Config Interface in TypeScript\nDESCRIPTION: TypeScript signature for the optional performance property in the Config interface. This property accepts a Performance object or undefined value and is used to configure performance settings.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/api/rspeedy/rspeedy.config.performance.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nperformance?: Performance | undefined;\n```\n\n----------------------------------------\n\nTITLE: Formal Syntax for border-start-end-radius in CSS\nDESCRIPTION: The formal syntax definition for the border-start-end-radius property, showing how to specify length or percentage values.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/css/properties/border-start-end-radius.mdx#2025-04-17_snippet_1\n\nLANGUAGE: css\nCODE:\n```\n[<length> | <percentage>] [ / [<length> | <percentage>]]?\n```\n\n----------------------------------------\n\nTITLE: Excluding Third-Party Dependencies in Rspeedy Configuration\nDESCRIPTION: Shows how to exclude specific third-party dependencies that don't need compilation. The example demonstrates excluding both a specific package using require.resolve and a package using regex pattern matching.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/api/rspeedy/rspeedy.source.exclude.md#2025-04-17_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineConfig } from '@lynx-js/rspeedy'\nimport path from 'node:path'\nimport { createRequire } from 'node:module'\n\nconst require = createRequire(import.meta.url)\n\nexport default defineConfig({\n  source: {\n    exclude: [\n      // Exclude specific package\n      path.dirname(require.resolve('lodash')),\n      // Exclude using regex pattern\n      /node_modules[\\\\/]lodash-es[\\\\/]/,\n    ],\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Defining select() Method in TypeScript\nDESCRIPTION: TypeScript function signature for the select() method that returns a NodesRef object.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/lynx-api/selector-query/selector-query-select.mdx#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nselect(selector: string): NodesRef;\n```\n\n----------------------------------------\n\nTITLE: Custom Resolve Configuration\nDESCRIPTION: Examples of customizing resolve configuration including conditionNames and mainFields using tools.rspack.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/rspeedy/resolve.md#2025-04-17_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineConfig } from '@lynx-js/rspeedy';\n\nexport default defineConfig({\n  tools: {\n    rspack: {\n      resolve: {\n        conditionNames: ['...', 'foo'],\n      },\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: CSS Formal Syntax for text-stroke-color Property\nDESCRIPTION: This snippet defines the formal syntax for the text-stroke-color CSS property. It specifies that the property accepts a <color> value, which represents the color of the text stroke.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/css/properties/text-stroke-color.mdx#2025-04-17_snippet_2\n\nLANGUAGE: css\nCODE:\n```\ntext-stroke-color = <color>\n```\n\n----------------------------------------\n\nTITLE: Defining PluginReactLynxOptions.shake Property in TypeScript\nDESCRIPTION: This code snippet defines the 'shake' property of the PluginReactLynxOptions interface. It is an optional property that accepts a partial ShakeVisitorConfig object or undefined, used to configure how main-thread code will be shaken.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/api/rspeedy/react-rsbuild-plugin.pluginreactlynxoptions.shake.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nshake?: Partial<ShakeVisitorConfig> | undefined;\n```\n\n----------------------------------------\n\nTITLE: Configuring Overview Display Settings in YAML\nDESCRIPTION: YAML configuration that enables overview display and specifies which header levels (h2) should be included in the overview section.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/api/lynx-api/global.md#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\noverview: true\noverviewHeaders: [2]\n```\n\n----------------------------------------\n\nTITLE: CSS Color Property Formal Syntax\nDESCRIPTION: The formal syntax definition for the CSS 'color' property, showing it accepts color values or gradients.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/css/properties/color.mdx#2025-04-17_snippet_1\n\nLANGUAGE: css\nCODE:\n```\n<color> | <gradient>\n```\n\n----------------------------------------\n\nTITLE: Defining libraryDirectory Property TypeScript Interface\nDESCRIPTION: TypeScript interface definition for the libraryDirectory property, which can be either a string or undefined.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/api/rspeedy/rspeedy.transformimport.librarydirectory.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nlibraryDirectory?: string | undefined;\n```\n\n----------------------------------------\n\nTITLE: Customizing tsconfig.json Path in Rspeedy Configuration\nDESCRIPTION: Shows how to specify a custom path for the TypeScript configuration file using the source.tsconfigPath option in Rspeedy.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/rspeedy/typescript.md#2025-04-17_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nexport default {\n  source: {\n    tsconfigPath: './tsconfig.custom.json',\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Importing Deprecated Component in JSX\nDESCRIPTION: Imports the Deprecated component from the Lynx framework, used to mark deprecated features.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/api/css/properties/linear-gravity.mdx#2025-04-17_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Deprecated } from '@lynx';\n```\n\n----------------------------------------\n\nTITLE: Formal background-clip Syntax Definition\nDESCRIPTION: Defines the formal syntax specification for the background-clip property, showing the box value options.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/css/properties/background-clip.mdx#2025-04-17_snippet_1\n\nLANGUAGE: css\nCODE:\n```\n<background-clip> = <box>\n\nwhere\n\n<box> = border-box | padding-box | content-box\n```\n\n----------------------------------------\n\nTITLE: Import Transform Example - Output\nDESCRIPTION: Example showing the transformed import statement, where the path is spliced according to the libraryDirectory pattern, using the default 'lib' directory.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/rspeedy/rspeedy.transformimport.librarydirectory.md#2025-04-17_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport Button from 'foo/lib/button'\n```\n\n----------------------------------------\n\nTITLE: Defining defaultDisplayLinear Property in TypeScript\nDESCRIPTION: TypeScript interface property definition for defaultDisplayLinear configuration option. This boolean property controls whether the default display CSS property is set to 'linear' or 'flex' in the plugin.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/rspeedy/react-rsbuild-plugin.pluginreactlynxoptions.defaultdisplaylinear.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ndefaultDisplayLinear?: boolean;\n```\n\n----------------------------------------\n\nTITLE: TypeScript Method Signature\nDESCRIPTION: The TypeScript type definition for the reportError method, showing the accepted parameters and return type.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/lynx-api/lynx/lynx-report-error.mdx#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nreportError(error: string | Error, options?: {level: 'warning' | 'error' | 'fatal'}): void;\n```\n\n----------------------------------------\n\nTITLE: Copying Files to Nested Distribution Directory\nDESCRIPTION: Example configuration demonstrating how to copy files from src/assets to a specific subdirectory within dist.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/rspeedy/rspeedy.output.copy.md#2025-04-17_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineConfig } from '@lynx-js/rspeedy'\n\nexport default defineConfig({\n  output: {\n    copy: [\n      // `./src/assets/image.png` -> `./dist/assets/image.png`\n      { from: './src/assets', to: 'assets' },\n    ],\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Component Creation Example in JSX\nDESCRIPTION: Example usage of __CreateComponent function in main-thread.js showing how to create a basic ComponentElement with minimal parameters.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/engine/element-api/__CreateComponent.mdx#2025-04-17_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n// main-thread.js\nlet element = __CreateComponent(0, '1', 1, '', 'name', 'path', {}, {});\n```\n\n----------------------------------------\n\nTITLE: Defining HMR Type in TypeScript\nDESCRIPTION: TypeScript type definition for the HMR configuration property in Rspeedy's Dev settings. Specifies that HMR can be either a boolean value or undefined.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/api/rspeedy/rspeedy.dev.hmr.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nhmr?: boolean | undefined;\n```\n\n----------------------------------------\n\nTITLE: Basic Border Width CSS Syntax\nDESCRIPTION: Demonstrates the basic syntax for setting border width using multiple values in the shorthand property. Values are applied in clockwise order: top, right, bottom, left.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/css/properties/border-width.mdx#2025-04-17_snippet_0\n\nLANGUAGE: css\nCODE:\n```\nborder-width: thin medium thick 10px;\n```\n\n----------------------------------------\n\nTITLE: Defining Minify.css Property Signature in TypeScript\nDESCRIPTION: TypeScript signature for the css property in the Minify interface, which accepts a boolean value or undefined to control whether CSS minification is enabled.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/api/rspeedy/rspeedy.minify.css.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ncss?: boolean | undefined;\n```\n\n----------------------------------------\n\nTITLE: CSS overflow-x Property Syntax\nDESCRIPTION: Basic syntax examples for the overflow-x CSS property in Lynx, showing how to set visible or hidden values.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/api/css/properties/overflow-x.mdx#2025-04-17_snippet_1\n\nLANGUAGE: css\nCODE:\n```\noverflow-x: visible;\noverflow-x: hidden;\n```\n\n----------------------------------------\n\nTITLE: Formal Syntax for CSS text-align Property\nDESCRIPTION: This code block defines the formal syntax for the text-align property in CSS. It shows that the property accepts the values left, right, center, start, or end.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/css/properties/text-align.mdx#2025-04-17_snippet_1\n\nLANGUAGE: css\nCODE:\n```\nleft | right | center | start | end\n```\n\n----------------------------------------\n\nTITLE: Defining Server Configuration Type in RSpeedy\nDESCRIPTION: TypeScript type definition showing the optional server property of the Config interface. The property accepts either a Server configuration object or undefined.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/api/rspeedy/rspeedy.config.server.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nserver?: Server | undefined;\n```\n\n----------------------------------------\n\nTITLE: YAML Configuration for Documentation Page in the Lynx Website Project\nDESCRIPTION: This YAML configuration sets up a documentation page's display properties. It enables the overview mode, specifies that level 2 headers should be included in the overview, and sets the context to 'BTS'.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/api/lynx-api/lynx.md#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\noverview: true\noverviewHeaders: [2]\ncontext: 'BTS'\n---\n```\n\n----------------------------------------\n\nTITLE: Defining ChunkSplit Override Type in TypeScript\nDESCRIPTION: TypeScript type definition for the ChunkSplit.override property that specifies the structure for custom Rspack chunk splitting configuration.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/api/rspeedy/rspeedy.chunksplit.override.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\noverride?: Rspack.Configuration extends {\n        optimization?: {\n            splitChunks?: infer P;\n        } | undefined;\n    } ? P : never;\n```\n\n----------------------------------------\n\nTITLE: Defining PerformanceMetric StartTimestamp Attribute in TypeScript\nDESCRIPTION: Defines the 'startTimestamp' attribute of the PerformanceMetric type, representing the start timestamp of the metric as a Unix timestamp in milliseconds with microsecond precision.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/lynx-api/performance-api/performance-metric.mdx#2025-04-17_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nstartTimestamp: number;\n```\n\n----------------------------------------\n\nTITLE: useReducer Implementation with Separate Initializer Type\nDESCRIPTION: TypeScript definition for useReducer with separate types for initializer argument and reducer state.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/api/react/Function.useReducer.mdx#2025-04-17_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nfunction useReducer<R, I>(\n   reducer: R,\n   initializerArg: I,\n   initializer: (arg: I) => ReducerState<R>): [ReducerState<R>, Dispatch<ReducerAction<R>>]\n```\n\n----------------------------------------\n\nTITLE: Using Percentage Values in React/JSX Components\nDESCRIPTION: This example demonstrates how to apply percentage values to width and margin properties in a React component. Two text elements are styled with different width and margin-left values to show how percentages position elements relative to their parent container.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/css/data-type/percentage.mdx#2025-04-17_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n<view>\n  <text style={{ width: '50%', marginLeft: '20%', backgroundColor: '#00FF00' }}>\n    Width: 50%, Left margin: 20%\n  </text>\n  <text style={{ width: '30%', marginLeft: '60%', backgroundColor: '#FF0000' }}>\n    Width: 30%, Left margin: 60%\n  </text>\n</view>\n```\n\n----------------------------------------\n\nTITLE: CSS flex-basis Formal Syntax Definition\nDESCRIPTION: The formal syntax notation for the flex-basis property showing valid values including auto and length-percentage units.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/api/css/properties/flex-basis.mdx#2025-04-17_snippet_1\n\nLANGUAGE: css\nCODE:\n```\nflex-basis = auto | <length-percentage [0,∞]>\n\n<length-percentage> =\n  <length>      |\n  <percentage>\n```\n\n----------------------------------------\n\nTITLE: Example of Accessibility Exclusive Focus Usage in TSX\nDESCRIPTION: Demonstrates how to use the accessibility-exclusive-focus attribute to limit focus to specific elements, useful for solving focus penetration issues in pop-up masks.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/elements/built-in/view.mdx#2025-04-17_snippet_21\n\nLANGUAGE: tsx\nCODE:\n```\n<view\n  accessibility-element={false}\n  style={{\n    flexDirection: 'column',\n    backgroundColor: backgroundColor,\n    opacity: opacity,\n    height: '200px',\n  }}\n>\n  <view\n    accessibility-element={false}\n    accessibility-exclusive-focus={true}\n    style={{\n      flexDirection: 'column',\n      backgroundColor: 'grey',\n      opacity: 0.6,\n      position: 'absolute',\n      alignItems: 'center',\n      width: '100%',\n      top: '20px',\n    }}\n  >\n    This node has accessibility-exclusive-focus set to true, so only the three\n    text nodes inside it will be focused.\n    <text style={{ fontSize: '20px' }}>overlap text 1</text>\n    <text style={{ fontSize: '20px' }}>overlap text 2</text>\n    <text style={{ fontSize: '20px' }}>overlap text 3</text>\n  </view>\n  <text style={{ fontSize: '20px', width: '30%' }}>bottom text 1</text>\n  <text style={{ fontSize: '20px', width: '30%' }}>bottom text 2</text>\n  <text style={{ fontSize: '20px', width: '30%' }}>bottom text 3</text>\n</view>\n```\n\n----------------------------------------\n\nTITLE: Setting Text Content of a Node Using setNativeProps in JSX\nDESCRIPTION: This example demonstrates how to use setNativeProps to change the text content of a text node when a view is tapped.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/api/lynx-api/nodes-ref/nodes-ref-set-native-props.mdx#2025-04-17_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nfunction App() {\n  return (\n    <view\n      bindtap={() => {\n        lynx\n          .createSelectorQuery()\n          .select('#intro')\n          .setNativeProps({\n            text: 'Hello, Lynx!',\n          })\n          .exec();\n      }}\n    >\n      <text id=\"intro\">Hello, World!</text>\n    </view>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Defining DSL property in FrameworkPipelineTiming interface\nDESCRIPTION: Declares the DSL (Domain Specific Language) type property with a default value of 'reactlynx'.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/lynx-api/performance-api/framework-pipeline-timing.mdx#2025-04-17_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\ndsl: string;\n```\n\n----------------------------------------\n\nTITLE: Transition Timing Function Formal Syntax\nDESCRIPTION: The formal syntax definition showing all possible values for the transition-timing-function property.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/css/properties/transition-timing-function.mdx#2025-04-17_snippet_1\n\nLANGUAGE: css\nCODE:\n```\ntransition-timing-function:linear|ease|ease-in|ease-out|ease-in-out|square-bezier()|cubic-bezier();\n```\n\n----------------------------------------\n\nTITLE: Defining PluginReactLynxOptions Interface in TypeScript\nDESCRIPTION: This code snippet defines the PluginReactLynxOptions interface, which contains various optional properties for configuring the React Lynx plugin. These options control features like compatibility, CSS inheritance, debugging, gesture system, and more.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/api/rspeedy/react-rsbuild-plugin.pluginreactlynxoptions.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface PluginReactLynxOptions\n```\n\n----------------------------------------\n\nTITLE: Defining Source.transformImport Property in TypeScript\nDESCRIPTION: The signature of the transformImport property in the Source object. It accepts an array of TransformImport objects or undefined.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/rspeedy/rspeedy.source.transformimport.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntransformImport?: TransformImport[] | undefined;\n```\n\n----------------------------------------\n\nTITLE: Formal syntax for margin-top in CSS\nDESCRIPTION: The formal syntax definition for the margin-top property, showing its possible values including length-percentage and auto.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/css/properties/margin-top.mdx#2025-04-17_snippet_1\n\nLANGUAGE: css\nCODE:\n```\nmargin-top =\n  <length-percentage>  |\n  auto                 |\n\n<length-percentage> =\n  <length>      |\n  <percentage>\n```\n\n----------------------------------------\n\nTITLE: Generated File Header Comment\nDESCRIPTION: Meta-comment indicating this is an auto-generated file from @lynx-js/tool-typedoc that should not be edited directly.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/react/Interface.InitDataRaw.mdx#2025-04-17_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n{/*\n* This file is generated by @lynx-js/tool-typedoc.\n* Do not edit this file directly.\n* @generated\n*/}\n```\n\n----------------------------------------\n\nTITLE: Original Import Statement Example\nDESCRIPTION: Example showing the input format of a component import statement before transformation.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/rspeedy/rspeedy.transformimport.cameltodashcomponentname.md#2025-04-17_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ButtonGroup } from 'foo'\n```\n\n----------------------------------------\n\nTITLE: Defining CssModules.auto Property Signature in TypeScript\nDESCRIPTION: TypeScript signature for the CssModules.auto property showing possible value types including boolean, RegExp, function, or undefined.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/api/rspeedy/rspeedy.cssmodules.auto.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nauto?: boolean | RegExp | ((filename: string) => boolean) | undefined;\n```\n\n----------------------------------------\n\nTITLE: Formal syntax for border-inline-start-width CSS property\nDESCRIPTION: The formal syntax definition for the border-inline-start-width CSS property, showing the accepted value types including keywords and length values.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/css/properties/border-inline-start-width.mdx#2025-04-17_snippet_1\n\nLANGUAGE: css\nCODE:\n```\nthin | medium | thick | <length>\n```\n\n----------------------------------------\n\nTITLE: Adding Type Checking with Rsbuild Plugin\nDESCRIPTION: Demonstrates how to enable TypeScript type checking in Rspeedy by configuring the Type Check plugin from Rsbuild.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/rspeedy/typescript.md#2025-04-17_snippet_5\n\nLANGUAGE: js\nCODE:\n```\nimport { pluginTypeCheck } from '@rsbuild/plugin-type-check';\n\nimport { defineConfig } from '@lynx-js/rspeedy';\n\nexport default defineConfig({\n  plugins: [\n    pluginTypeCheck({\n      enable: true,\n    }),\n  ],\n});\n```\n\n----------------------------------------\n\nTITLE: Defining the Tools.rspack TypeScript Interface\nDESCRIPTION: TypeScript signature for the rspack property in the Tools object, showing it accepts a ToolsConfig['rspack'] or undefined value. This property controls Rspack configuration options.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/api/rspeedy/rspeedy.tools.rspack.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nrspack?: ToolsConfig['rspack'] | undefined;\n```\n\n----------------------------------------\n\nTITLE: Defining legalComments Property Type in TypeScript\nDESCRIPTION: TypeScript type definition for the legalComments property which can accept 'none', 'inline', 'linked' or undefined values. The property controls how legal comments are handled in the build output, with 'none' being the default value.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/rspeedy/rspeedy.output.legalcomments.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nlegalComments?: 'none' | 'inline' | 'linked' | undefined;\n```\n\n----------------------------------------\n\nTITLE: Styling Full Image Elements with JSX CSS\nDESCRIPTION: CSS styling for full-width images with specific margin settings, implemented using JSX styled components syntax.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/guide/debugging/lynx-devtool/elements-panel.mdx#2025-04-17_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<style jsx>{`\n  .full_image {\n    width: 800px;\n    margin: 20px;\n  }\n`}</style>\n```\n\n----------------------------------------\n\nTITLE: Defining version Variable in TypeScript\nDESCRIPTION: Declares a 'version' variable of type string in the @lynx-js/rspeedy package. This variable likely holds the current version number of the package.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/api/rspeedy/rspeedy.version.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nversion: string\n```\n\n----------------------------------------\n\nTITLE: Styling Full-Width Image in CSS\nDESCRIPTION: This CSS snippet defines styles for a full-width image with specific dimensions and margin.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/guide/debugging/lynx-devtool/elements-panel.mdx#2025-04-17_snippet_0\n\nLANGUAGE: CSS\nCODE:\n```\n.full_image {\n  width: 800px;\n  margin: 20px;\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Font Scale in iOS (Objective-C)\nDESCRIPTION: This method enables updating the font scaling ratio in client settings for iOS applications. It accepts a CGFloat parameter 'scale' to define the new font scaling value.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/lynx-native-api/lynx-view/update-font-scale.mdx#2025-04-17_snippet_1\n\nLANGUAGE: objc\nCODE:\n```\n- (void)updateFontScale:(CGFloat)scale;\n```\n\n----------------------------------------\n\nTITLE: Formal Syntax for Border Bottom Style in CSS\nDESCRIPTION: Defines the formal syntax for the border-bottom-style property in CSS. It shows the property name and the possible values it can take, including various line styles.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/api/css/properties/border-bottom-style.mdx#2025-04-17_snippet_1\n\nLANGUAGE: css\nCODE:\n```\nborder-bottom-style = <line-style>\n<line-style> = none | hidden | dotted | dashed | solid | double | groove | ridge | inset | outset\n```\n\n----------------------------------------\n\nTITLE: Accessing the entryType Property in PipelineEntry (TypeScript)\nDESCRIPTION: The entryType property indicates the type of performance event, which is always 'pipeline' for PipelineEntry instances.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/lynx-api/performance-api/performance-entry/pipeline-entry.mdx#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nentryType: string;\n```\n\n----------------------------------------\n\nTITLE: Defining CssExtract Interface in TypeScript\nDESCRIPTION: Defines the CssExtract interface with optional properties for loader and plugin options. This interface is used to configure the CssExtractRspackPlugin.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/rspeedy/rspeedy.cssextract.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface CssExtract {\n  loaderOptions?: CssExtractRspackLoaderOptions | undefined;\n  pluginOptions?: CssExtractRspackPluginOptions | undefined;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring CssExtractWebpackPlugin with CommonJS Syntax in JavaScript\nDESCRIPTION: Example of how to configure CssExtractWebpackPlugin to use CommonJS syntax instead of ES modules. This is done by setting the esModule option to false in the loader configuration.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/rspeedy/rspeedy.cssextractrspackloaderoptions.esmodule.md#2025-04-17_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport {CssExtractWebpackPlugin} from \"@lynx-js/css-extract-webpack-plugin\";\nexport default {\n  plugins: [new CssExtractWebpackPlugin()],\n  module: {\n    rules: [\n      {\n        test: /\\.css$/i,\n        use: [\n          {\n            loader: CssExtractWebpackPlugin.loader,\n            options: {\n              esModule: false,\n            },\n          },\n          \"css-loader\",\n        ],\n      },\n    ],\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Using pluginReactLynx in Rsbuild Configuration\nDESCRIPTION: This example demonstrates how to use the pluginReactLynx function in an Rsbuild configuration file. It imports the function from the @lynx-js/react-rsbuild-plugin package and adds it to the plugins array.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/api/rspeedy/react-rsbuild-plugin.pluginreactlynx.md#2025-04-17_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// rsbuild.config.ts\nimport { pluginReactLynx } from '@lynx-js/react-rsbuild-plugin'\nexport default {\n  plugins: [pluginReactLynx()]\n}\n```\n\n----------------------------------------\n\nTITLE: Invalid CSS Time Values Examples\nDESCRIPTION: Examples of invalid time values in CSS, demonstrating common errors such as missing units, using a number without a unit, or adding a space between the number and unit.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/css/data-type/time.mdx#2025-04-17_snippet_1\n\nLANGUAGE: css\nCODE:\n```\n0           Although unitless zero is allowed for <length>s, it's invalid for <time>s.\n12.0        This is a <number>, not a <time>, because it's missing a unit.\n7 ms        No space is allowed between the number and the unit.\n```\n\n----------------------------------------\n\nTITLE: Declaring Version Variable in TypeScript\nDESCRIPTION: TypeScript type declaration for the version variable that represents the package version as a string value.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/rspeedy/rspeedy.version.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nversion: string\n```\n\n----------------------------------------\n\nTITLE: Formal Syntax Definition for relative-top-of\nDESCRIPTION: Defines the formal syntax for the relative-top-of CSS property, showing it accepts either 'none' or a numeric value.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/css/properties/relative-top-of.mdx#2025-04-17_snippet_1\n\nLANGUAGE: css\nCODE:\n```\nrelative-top-of = none | <number>\n```\n\n----------------------------------------\n\nTITLE: Configuring JavaScript Minification in RSpeedy\nDESCRIPTION: Example showing how to disable JavaScript minification in the RSpeedy configuration using the defineConfig function.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/api/rspeedy/rspeedy.minify.js.md#2025-04-17_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineConfig } from '@lynx-js/rspeedy'\n\nexport default defineConfig({\n  output: {\n    minify: {\n      js: false,\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Formal Syntax for border-start-start-radius CSS Property\nDESCRIPTION: The formal syntax definition for the border-start-start-radius property showing it accepts one or two values that can be either length or percentage values.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/css/properties/border-start-start-radius.mdx#2025-04-17_snippet_1\n\nLANGUAGE: css\nCODE:\n```\n[<length> | <percentage>] [[<length> | <percentage>]]?\n```\n\n----------------------------------------\n\nTITLE: CSS Variable Scoping Example\nDESCRIPTION: Demonstrates the cascading nature and scoping of CSS variables across different selectors and nested elements.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/css/properties/css-variable.mdx#2025-04-17_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<view className=\"one\" bindtap=\"tap1\">\n  <view className=\"two\">\n    <view className=\"three\"></view>\n    <view className=\"four\"></view>\n    <comp></comp>\n  </view>\n</view>\n```\n\nLANGUAGE: css\nCODE:\n```\n:root {\n  --main-bg-color: yellow;\n}\n\n.one {\n  color: white;\n  width: 100%;\n  height: 100%;\n}\n\n.two {\n  --main-bg-color: red;\n  --main-height: 200px;\n  color: white;\n  background-color: black;\n  width: 100%;\n  height: 100%;\n}\n\n.three {\n  --main-bg-color: blue;\n  color: white;\n  background-color: var(--main-bg-color);\n  width: 50%;\n  border: 1px blue solid;\n}\n\n.four {\n  background-color: var(--main-bg-color);\n  width: 25%;\n  height: calc(var(--main-height) - 100px);\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring QRCode Plugin Function Signature in TypeScript\nDESCRIPTION: TypeScript function declaration for pluginQRCode that creates a Rsbuild plugin for QR code functionality. Takes optional PluginQRCodeOptions parameter and returns an RsbuildPlugin object.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/api/rspeedy/qrcode-rsbuild-plugin.pluginqrcode.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare function pluginQRCode(options?: PluginQRCodeOptions): RsbuildPlugin;\n```\n\n----------------------------------------\n\nTITLE: Compatibility Table Component\nDESCRIPTION: Renders a compatibility table for the PerformanceObserver API using the LegacyCompatTable component.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/lynx-api/performance-api/performance-observer.mdx#2025-04-17_snippet_3\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { LegacyCompatTable } from '@lynx';\n\n<LegacyCompatTable metadata=\"lynx-api/performance-api/performance-observer\" />\n```\n\n----------------------------------------\n\nTITLE: Defining EnableSSR Type in PluginReactLynxOptions Interface\nDESCRIPTION: TypeScript type definition for the enableSSR property which is an optional boolean flag used to enable Lynx Server Side Rendering feature for the build.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/api/rspeedy/react-rsbuild-plugin.pluginreactlynxoptions.enablessr.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nenableSSR?: boolean;\n```\n\n----------------------------------------\n\nTITLE: Defining the defineDCE Property in PluginReactLynxOptions Interface\nDESCRIPTION: The defineDCE property allows for defining Dead Code Elimination configuration that happens at transform time, behaving similarly to the 'define' option in various bundlers but with DCE pass performed.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/api/rspeedy/react-rsbuild-plugin.pluginreactlynxoptions.definedce.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ndefineDCE?: Partial<DefineDceVisitorConfig> | undefined;\n```\n\n----------------------------------------\n\nTITLE: Defining packChangesStart property in FrameworkPipelineTiming interface\nDESCRIPTION: Declares the timestamp property marking when the framework starts serializing change information on the background thread, stored as a floating-point Unix timestamp in milliseconds.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/lynx-api/performance-api/framework-pipeline-timing.mdx#2025-04-17_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\npackChangesStart: number;\n```\n\n----------------------------------------\n\nTITLE: Type-Safe Data Access Examples\nDESCRIPTION: Examples showing how to access platform and API data in a type-safe manner using type assertions and imported types.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/packages/lynx-compat-data/README.md#2025-04-17_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// Platform data\nimport type { PlatformStatement } from '@lynx-js/lynx-compat-data';\nimport iosJson from '@lynx-js/lynx-compat-data/platforms/ios.json';\nconst ios = iosJson.platforms.ios as PlatformStatement;\n\n// API data\nimport type { Identifier } from '@lynx-js/lynx-compat-data';\nimport sTOJson from '@lynx-js/lynx-compat-data/lynx-api/global/setTimeout.json';\nconst sTO = sTO['lynx-api'].global.setTimeout as Identifier;\n```\n\n----------------------------------------\n\nTITLE: Main Thread Props Naming Convention\nDESCRIPTION: Shows the proper way to handle props with main-thread prefix in component definitions.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/guide/start/tutorial-product-detail.mdx#2025-04-17_snippet_16\n\nLANGUAGE: tsx\nCODE:\n```\nfunction Swiper({ 'main-thread:easing': MTEasing }) {}\n```\n\n----------------------------------------\n\nTITLE: Defining ChunkSplitCustom Strategy Type in TypeScript\nDESCRIPTION: Type definition for the ChunkSplitCustom strategy property, specifying it as a literal string type 'custom'. This property is used to define the chunk splitting behavior in the build process.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/api/rspeedy/rspeedy.chunksplitcustom.strategy.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nstrategy: 'custom';\n```\n\n----------------------------------------\n\nTITLE: Defining performance Property in Config Interface - TypeScript\nDESCRIPTION: This code snippet defines the performance property for the Config interface. It is an optional property of type Performance or undefined.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/rspeedy/rspeedy.config.performance.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nperformance?: Performance | undefined;\n```\n\n----------------------------------------\n\nTITLE: Formal Syntax Definition for CSS margin-left Property\nDESCRIPTION: This code block defines the formal syntax for the margin-left property, showing the allowed values and their structure.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/css/properties/margin-left.mdx#2025-04-17_snippet_1\n\nLANGUAGE: css\nCODE:\n```\nmargin-left =\n  <length-percentage>  |\n  auto                 |\n\n<length-percentage> =\n  <length>      |\n  <percentage>\n```\n\n----------------------------------------\n\nTITLE: Implementing Deprecated UNSAFE_componentWillReceiveProps in React Component Class\nDESCRIPTION: Type definition for the deprecated UNSAFE_componentWillReceiveProps lifecycle method that was called when a component received new props. It's recommended to use getDerivedStateFromProps instead.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/api/react/Class.Component.mdx#2025-04-17_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\noptional UNSAFE_componentWillReceiveProps(nextProps: Readonly<P>, nextContext: any): void\n```\n\n----------------------------------------\n\nTITLE: Rspeedy CLI Help Output\nDESCRIPTION: Output of the help command showing all available Rspeedy CLI commands and options\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/rspeedy/cli.md#2025-04-17_snippet_2\n\nLANGUAGE: text\nCODE:\n```\n➜ rspeedy --help\n\nUsage: rspeedy <command> [options]\n\nOptions:\n  -V, --version      output the version number\n  --unmanaged        Force to use the unmanaged version of Rspeedy, instead of the locally installed.\n  -h, --help         display help for command\n\nCommands:\n  build [options]    Build the project in production mode\n  dev [options]      Run the dev server and watch for source file changes while serving.\n  inspect [options]  View the Rsbuild config and Rspack config of the project.\n  preview [options]  Preview the production build outputs locally.\n  help [command]     display help for command\n```\n\n----------------------------------------\n\nTITLE: Defining Environment Property Type in TypeScript\nDESCRIPTION: Type definition for the environment property that specifies which environments should be built. This property is optional and inherits its type from CreateRsbuildOptions['environment']. When specified, it filters which environments to build, otherwise all environments are built.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/api/rspeedy/rspeedy.createrspeedyoptions.environment.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nenvironment?: CreateRsbuildOptions['environment'];\n```\n\n----------------------------------------\n\nTITLE: Formal Syntax Definition for relative-align-bottom CSS Property\nDESCRIPTION: Provides the formal syntax definition for the relative-align-bottom property, showing it accepts values of none, parent, or a number representing a sibling element ID.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/css/properties/relative-align-bottom.mdx#2025-04-17_snippet_1\n\nLANGUAGE: css\nCODE:\n```\nrelative-align-bottom = none | parent | <number>\n```\n\n----------------------------------------\n\nTITLE: Function Signature for createRspeedy in TypeScript\nDESCRIPTION: The TypeScript function signature for createRspeedy, which takes CreateRspeedyOptions as input and returns a Promise resolving to a RspeedyInstance.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/api/rspeedy/rspeedy.createrspeedy.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare function createRspeedy({ cwd, rspeedyConfig, loadEnv, environment }: CreateRspeedyOptions): Promise<RspeedyInstance>;\n```\n\n----------------------------------------\n\nTITLE: Defining Source.define Property in TypeScript\nDESCRIPTION: TypeScript signature for the 'define' property of the Source object. It accepts a Record of string keys with various value types or undefined.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/api/rspeedy/rspeedy.source.define.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ndefine?: Record<string, string | number | boolean | undefined | Record<string, unknown>> | undefined;\n```\n\n----------------------------------------\n\nTITLE: Using String Value for Dev.assetPrefix in RSpeedy Configuration\nDESCRIPTION: Example demonstrating how to set dev.assetPrefix to a string value, which will be used as a prefix and automatically appended to static resource URLs.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/api/rspeedy/rspeedy.dev.assetprefix.md#2025-04-17_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineConfig } from '@lynx-js/rspeedy'\nexport default defineConfig({\n  dev: {\n    assetPrefix: 'https://example.com/assets/',\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Importing BlogAvatar Component in Markdown\nDESCRIPTION: This code snippet imports the BlogAvatar component from the Lynx package, likely used for displaying author avatars in the blog post.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/blog/lynx-open-source-roadmap-2025.mdx#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nimport { BlogAvatar } from '@lynx';\n```\n\n----------------------------------------\n\nTITLE: Importing Go Component in ReactLynx\nDESCRIPTION: Imports the Go component from the @lynx package, which is used to display an interactive code example.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/react/data-fetching.mdx#2025-04-17_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Go } from '@lynx';\n```\n\n----------------------------------------\n\nTITLE: Implementing APITable with Explicit Query in TypeScript/MDX\nDESCRIPTION: Demonstrates how to use the APITable component by explicitly specifying a query parameter. This approach gives direct control over which API data to fetch and display.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/src/components/api-table/README.md#2025-04-17_snippet_0\n\nLANGUAGE: mdx\nCODE:\n```\nimport { APITable } from '@lynx';\n\n<APITable query=\"test/api\" />\n```\n\n----------------------------------------\n\nTITLE: Configuration Loading Example Usage\nDESCRIPTION: Example demonstrating how to use the loadConfig function to load configuration from a file path and log the result.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/rspeedy/rspeedy.loadconfig.md#2025-04-17_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { loadConfig } from '@lynx-js/rspeedy'\n\nvoid async function () {\n  const config = await loadConfig({ configPath: './lynx.config.js' })\n  console.log(config);\n}()\n```\n\n----------------------------------------\n\nTITLE: Function Standard Syntax: Translate Functions in CSS\nDESCRIPTION: Syntax specifications for translate, translateX, translateY, translateZ, and translate3d transform functions.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/css/properties/transform.mdx#2025-04-17_snippet_1\n\nLANGUAGE: scss\nCODE:\n```\ntranslate( <length> | <percentage> , <length> | <percentage>? )\n```\n\nLANGUAGE: scss\nCODE:\n```\ntranslateX( <length> | <percentage> )\n```\n\nLANGUAGE: scss\nCODE:\n```\ntranslateY( <length> | <percentage> )\n```\n\nLANGUAGE: scss\nCODE:\n```\ntranslateZ( <length> )\n```\n\nLANGUAGE: scss\nCODE:\n```\ntranslate3d( <length> | <percentage> , <length> | <percentage> , <length> )\n```\n\n----------------------------------------\n\nTITLE: CSS Variables Scope Example in HTML and CSS\nDESCRIPTION: Demonstrates the scope of CSS variables using HTML structure and CSS selectors.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/api/css/properties/css-variable.mdx#2025-04-17_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<view className=\"one\" bindtap=\"tap1\">\n  <view className=\"two\">\n    <view className=\"three\"></view>\n    <view className=\"four\"></view>\n    <comp></comp>\n  </view>\n</view>\n```\n\nLANGUAGE: css\nCODE:\n```\n:root {\n  --main-bg-color: yellow;\n}\n\n.one {\n  color: white;\n  width: 100%;\n  height: 100%;\n}\n\n.two {\n  --main-bg-color: red;\n  --main-height: 200px;\n  color: white;\n  background-color: black;\n  width: 100%;\n  height: 100%;\n}\n\n.three {\n  --main-bg-color: blue;\n  color: white;\n  background-color: var(--main-bg-color);\n  width: 50%;\n  border: 1px blue solid;\n}\n\n.four {\n  background-color: var(--main-bg-color);\n  width: 25%;\n  height: calc(var(--main-height) - 100px);\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing the paintEnd Property in PipelineEntry (TypeScript)\nDESCRIPTION: The paintEnd property provides the timestamp for the end of completing the final pixelation based on UI and UITree.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/lynx-api/performance-api/performance-entry/pipeline-entry.mdx#2025-04-17_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\npaintEnd: number;\n```\n\n----------------------------------------\n\nTITLE: Defining CSS Minifier Type Interface in TypeScript\nDESCRIPTION: TypeScript type definition for CSS minification options that can be passed to the RSpeedy build configuration. The type allows for optional configuration of Lightning CSS minimizer plugin options.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/api/rspeedy/rspeedy.minify.cssoptions.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ncssOptions?: Rspack.LightningCssMinimizerRspackPluginOptions | undefined;\n```\n\n----------------------------------------\n\nTITLE: Disabling Clean Files in Rspeedy Config\nDESCRIPTION: Example showing how to disable the automatic cleaning of files in the output directory using cleanDistPath configuration.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/api/rspeedy/rspeedy.output.cleandistpath.md#2025-04-17_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineConfig } from '@lynx-js/rspeedy'\nexport default defineConfig({\n  output: {\n    cleanDistPath: false,\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Overview Settings in YAML for Lynx Website\nDESCRIPTION: This YAML configuration sets up the overview page for the Lynx website. It enables the overview feature and initializes an empty array for overview headers.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/css/properties.md#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\noverview: true\noverviewHeaders: []\n---\n```\n\n----------------------------------------\n\nTITLE: Importing Theme Component in Markdown\nDESCRIPTION: Commented code showing the import of a Table of Contents component from a theme module.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/guide/glossary.mdx#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n{/* import { Toc } from '@theme'; */}\n```\n\n----------------------------------------\n\nTITLE: Event Listener Implementation Error Example\nDESCRIPTION: Shows incorrect implementation of GlobalEventEmitter that fails on main thread\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/react/thinking-in-reactlynx.mdx#2025-04-17_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nconst EventListenerComponent = () => {\n  lynx.getJSModule('GlobalEventEmitter').addListener('myHappyEvent', () => {\n    console.log('myHappyEvent triggered!');\n  });\n  return <text>Hello</text>;\n};\n```\n\n----------------------------------------\n\nTITLE: Formal Syntax Definition for relative-bottom-of Property\nDESCRIPTION: Defines the formal syntax for the relative-bottom-of property, which accepts either 'none' or a numeric value.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/css/properties/relative-bottom-of.mdx#2025-04-17_snippet_1\n\nLANGUAGE: css\nCODE:\n```\nrelative-bottom-of = none | <number>\n```\n\n----------------------------------------\n\nTITLE: Swiper Component Main Thread Props Definition\nDESCRIPTION: Shows how to receive and handle main thread function props in the Swiper component, specifically the easing function.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/guide/start/tutorial-product-detail.mdx#2025-04-17_snippet_14\n\nLANGUAGE: tsx\nCODE:\n```\nfunction Swiper({\n  'main-thread:easing': MTEasing,\n}) {\n  ...\n  const { handleTouchStart, ... } = useOffset({\n    MTEasing,\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Applying Blur Filter in CSS\nDESCRIPTION: Shows how to apply a blur filter to an element using CSS. The pixel value determines the radius of the blur effect.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/css/properties/filter.mdx#2025-04-17_snippet_1\n\nLANGUAGE: css\nCODE:\n```\nfilter: blur(5px);\n```\n\n----------------------------------------\n\nTITLE: Defining progressBar Property Signature in TypeScript\nDESCRIPTION: The TypeScript signature for the progressBar property, which can be a boolean or an object with an optional id property.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/rspeedy/rspeedy.dev.progressbar.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nprogressBar?: boolean | {\n        id?: string;\n    } | undefined;\n```\n\n----------------------------------------\n\nTITLE: HTML Documentation Header\nDESCRIPTION: HTML comment and navigation breadcrumb for the API documentation page\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/api/rspeedy/qrcode-rsbuild-plugin.md#2025-04-17_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<!-- Do not edit this file. It is automatically generated by API Documenter. -->\n```\n\n----------------------------------------\n\nTITLE: Validating TemplateBundle in Java\nDESCRIPTION: Determines whether the current TemplateBundle object is valid.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/api/lynx-native-api/template-bundle.mdx#2025-04-17_snippet_2\n\nLANGUAGE: java\nCODE:\n```\npublic boolean isValid()\n```\n\n----------------------------------------\n\nTITLE: Defining CSS Extract Property Type in TypeScript\nDESCRIPTION: Type definition for the cssExtract property that controls CSS extraction options in Rspack. The property is optional and accepts either a CssExtract configuration object or undefined.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/rspeedy/rspeedy.tools.cssextract.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ncssExtract?: CssExtract | undefined;\n```\n\n----------------------------------------\n\nTITLE: Configuring Overview Settings in YAML\nDESCRIPTION: YAML configuration block that enables overview mode and specifies header levels to be included in the overview section. Sets overview to true and defines header level 2 for overview organization.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/lynx-api/global.md#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\noverview: true\noverviewHeaders: [2]\n```\n\n----------------------------------------\n\nTITLE: Defining TypeScript Type for Rspack Chunk Splitting Override\nDESCRIPTION: TypeScript type definition for the override property that enables custom Rspack chunk splitting configuration. Uses conditional type inference to extract the splitChunks configuration type from Rspack.Configuration.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/api/rspeedy/rspeedy.chunksplitbysize.override.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\noverride?: Rspack.Configuration extends {\n        optimization?: {\n            splitChunks?: infer P;\n        } | undefined;\n    } ? P : never;\n```\n\n----------------------------------------\n\nTITLE: Accessing Context in React Components TypeScript Example\nDESCRIPTION: Example of how to use context in a React component with TypeScript. Shows proper type annotations for both pre-3.7 and 3.7+ TypeScript versions.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/api/react/Class.PureComponent.mdx#2025-04-17_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nstatic contextType = MyContext\n// For TS pre-3.7:\ncontext!: React.ContextType<typeof MyContext>\n// For TS 3.7 and above:\ndeclare context: React.ContextType<typeof MyContext>\n```\n\n----------------------------------------\n\nTITLE: Loading Lynx Template in Android\nDESCRIPTION: Method for loading Lynx templates in Android using LynxLoadMeta. This method serves as the main entry point for loading templates in the Android environment.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/lynx-native-api/lynx-view/load-template.mdx#2025-04-17_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nvoid loadTemplate(@NonNull LynxLoadMeta meta);\n```\n\n----------------------------------------\n\nTITLE: Implementing LynxServiceLogProtocol in Objective-C\nDESCRIPTION: This snippet demonstrates how to implement the LynxServiceLogProtocol in Objective-C for iOS. It includes the header file declaration and the implementation file with methods for service registration, type specification, and log writing functionality.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/api/lynx-native-api/lynx-service.mdx#2025-04-17_snippet_0\n\nLANGUAGE: objective-c\nCODE:\n```\n#import <Lynx/Lynx Service.h>\n#import <Lynx/LynxServiceLogProtocol.h>\n\n// 实现 LynxServiceLogProtocol\n@interface YourLogService : NSObject <LynxServiceLogProtocol>\n@end\n```\n\nLANGUAGE: objective-c\nCODE:\n```\n#import \"YourLogService.h\"\n\n[[maybe_unused]] void logWrite(unsigned int level, const char *tag, const char *format) {\n  if (format == NULL) {\n    return;\n  }\n  NSLog(@\"[%s] %s\", tag == NULL ? \"\" : tag, format);\n}\n\n// 通过 LynxServiceRegister 宏实现自动注册\n@LynxServiceRegister(LynxLogService);\n\n// 实现 LynxLogService\n@implementation LynxLogService\n\n// 无关属性，后续会删除\n+ (NSString*)serviceBizID {\n  return DEFAULT_LYNX_SERVICE;\n}\n\n// 无关属性，后续会删除\n+ (Lynx ServiceScope)serviceScope {\n  return Lynx ServiceScopeDefault;\n}\n\n// 返回对应 service type, 实现远行时查找\n+ (NSUInteger)serviceType {\n  return kLynxServiceLog;\n}\n\n// 推荐：实现为一个单例\n+ (instancetype)sharedInstance {\n  static dispatch_once_t onceToken;\n  static YourLogService *logService;\n  dispatch_once(&onceToken, ^{\n    logService = [[YourLogService alloc] init];\n  });\n  return logService;\n}\n\n// 实现 LynxServiceLogProtocol 要求的全部接口\n- (void *)getWriteFunction {\n  return (void *)lynx::base::logging::logWrite;\n}\n\n@end\n```\n\n----------------------------------------\n\nTITLE: Accessing the mtsRenderStart Property in PipelineEntry (TypeScript)\nDESCRIPTION: The mtsRenderStart property provides the timestamp for the start of executing main thread scripts to build the Element Tree.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/lynx-api/performance-api/performance-entry/pipeline-entry.mdx#2025-04-17_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nmtsRenderStart: number;\n```\n\n----------------------------------------\n\nTITLE: Descendant Combinator in CSS\nDESCRIPTION: Shows how to use descendant combinators to match nested elements\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/css/selectors.mdx#2025-04-17_snippet_5\n\nLANGUAGE: css\nCODE:\n```\nselector1 selector2 selector3 {\n  property declarations\n}\n```\n\nLANGUAGE: css\nCODE:\n```\nview.a .b{\n   ...\n}\n```\n\n----------------------------------------\n\nTITLE: Defining CssExtractRspackLoaderOptions Interface in TypeScript\nDESCRIPTION: Interface definition for CSS extract loader options in the rspeedy package. This interface currently supports an optional esModule property for controlling ES module syntax usage in generated JS modules.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/api/rspeedy/rspeedy.cssextractrspackloaderoptions.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface CssExtractRspackLoaderOptions \n```\n\n----------------------------------------\n\nTITLE: Defining Source Property Type in RSpeedy Config\nDESCRIPTION: TypeScript type definition for the optional source property in the Config interface. The property accepts either a Source type or undefined value to configure source file behavior.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/rspeedy/rspeedy.config.source.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nsource?: Source | undefined;\n```\n\n----------------------------------------\n\nTITLE: Markdown Table: Interfaces in react-rsbuild-plugin\nDESCRIPTION: This markdown table lists the interfaces available in the react-rsbuild-plugin package, specifically the PluginReactLynxOptions interface for configuring the pluginReactLynx function.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/rspeedy/react-rsbuild-plugin.md#2025-04-17_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n|  Interface | Description |\n|  --- | --- |\n|  [PluginReactLynxOptions](./react-rsbuild-plugin.pluginreactlynxoptions.md) | Options of [pluginReactLynx()](./react-rsbuild-plugin.pluginreactlynx.md) |\n```\n\n----------------------------------------\n\nTITLE: Formal Syntax Definition for Relative Right-Of Property\nDESCRIPTION: Formal syntax definition for the 'relative-right-of' CSS property in Lynx layout system.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/css/properties/relative-right-of.mdx#2025-04-17_snippet_1\n\nLANGUAGE: css\nCODE:\n```\nrelative-right-of = none | <number>\n```\n\n----------------------------------------\n\nTITLE: Implementing Deprecated UNSAFE_componentWillReceiveProps in React\nDESCRIPTION: Deprecated lifecycle method called when component may receive new props. Use getDerivedStateFromProps instead.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/react/Class.Component.mdx#2025-04-17_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\noptional UNSAFE_componentWillReceiveProps(nextProps: Readonly<P>, nextContext: any): void\n```\n\n----------------------------------------\n\nTITLE: SetID Function Syntax in JSX\nDESCRIPTION: Defines the syntax for the __SetID function which takes an Element object and a string ID as parameters and returns void. This function is used to apply an ID selector to a specific Element node.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/engine/element-api/__SetID.mdx#2025-04-17_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n__SetID(element: Element, id: string) : void;\n```\n\n----------------------------------------\n\nTITLE: Configuring Overview Page in YAML for Lynx Website\nDESCRIPTION: This YAML front matter block sets the 'overview' property to true, which is likely used by the website's build system or template engine to apply special formatting or behavior to this page as an overview or index page.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/api/rspeedy/index.md#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\noverview: true\n---\n```\n\n----------------------------------------\n\nTITLE: CSS Border Inline End Style Basic Usage\nDESCRIPTION: Shows various possible values for the border-inline-end-style CSS property. Includes all supported border styles from none to outset.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/css/properties/border-inline-end-style.mdx#2025-04-17_snippet_0\n\nLANGUAGE: css\nCODE:\n```\nborder-inline-end-style: none;\nborder-inline-end-style: hidden;\nborder-inline-end-style: dotted;\nborder-inline-end-style: dashed;\nborder-inline-end-style: solid;\nborder-inline-end-style: double;\nborder-inline-end-style: groove;\nborder-inline-end-style: ridge;\nborder-inline-end-style: inset;\nborder-inline-end-style: outset;\n```\n\n----------------------------------------\n\nTITLE: Defining the media property for Filename class in TypeScript\nDESCRIPTION: TypeScript signature for the optional media property in the Filename class. This property defines the naming pattern for media assets such as video files.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/api/rspeedy/rspeedy.filename.media.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nmedia?: string | undefined;\n```\n\n----------------------------------------\n\nTITLE: Defining Output.minify Property Signature in TypeScript\nDESCRIPTION: The TypeScript signature for the 'minify' property of the Output configuration. It can be of type Minify, boolean, or undefined.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/rspeedy/rspeedy.output.minify.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nminify?: Minify | boolean | undefined;\n```\n\n----------------------------------------\n\nTITLE: Defining enableAccessibilityElement Property Type in TypeScript\nDESCRIPTION: TypeScript interface property definition for enableAccessibilityElement, which is an optional boolean property that sets the default value of accessibility-element for all <view /> elements.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/api/rspeedy/react-rsbuild-plugin.pluginreactlynxoptions.enableaccessibilityelement.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nenableAccessibilityElement?: boolean;\n```\n\n----------------------------------------\n\nTITLE: Basic Grid Column End CSS Examples\nDESCRIPTION: Examples showing how to use grid-column-end property with numeric values and span keyword.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/css/properties/grid-column-end.mdx#2025-04-17_snippet_0\n\nLANGUAGE: css\nCODE:\n```\n/* <number> values */\ngrid-column-end: 2;\ngrid-column-end: 3;\n\n/* span <number> values*/\ngrid-column-end: span 1;\n```\n\n----------------------------------------\n\nTITLE: Rendering Interactive Example Component in JSX\nDESCRIPTION: This JSX code renders an interactive example component for demonstrating the overflow-y property. It uses a custom 'Go' component to display and run the example.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/css/properties/overflow-y.mdx#2025-04-17_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<Go\n  example=\"css-api\"\n  defaultFile=\"src/overflow-y/App.tsx\"\n  img=\"https://lf-lynx.tiktok-cdns.com/obj/lynx-artifacts-oss-sg/lynx-website/assets/doc/css/overflow.jpg\"\n  entry=\"src/overflow-y\"\n  defaultEntryFile=\"dist/overflow-y.lynx.bundle\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Defining EnableNewGesture Property in TypeScript\nDESCRIPTION: TypeScript interface property definition for enableNewGesture configuration option. This boolean property controls whether the new gesture system is enabled in the React Rsbuild plugin.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/rspeedy/react-rsbuild-plugin.pluginreactlynxoptions.enablenewgesture.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nenableNewGesture?: boolean;\n```\n\n----------------------------------------\n\nTITLE: Importing Layout Components in Lynx\nDESCRIPTION: Basic imports for Lynx layout components including Go and Details components from the main Lynx package and Columns from a local component.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/guide/ui/layout/index.mdx#2025-04-17_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Go, Details } from '@lynx';\nimport { Columns } from '@/components/Columns.jsx';\n```\n\n----------------------------------------\n\nTITLE: Importing Badge Component from RSPress Theme\nDESCRIPTION: Imports the Badge component from the RSPress theme package for use in error code documentation.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/api/errors/error-code.mdx#2025-04-17_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Badge } from 'rspress/theme';\n```\n\n----------------------------------------\n\nTITLE: YAML Overview Configuration\nDESCRIPTION: YAML front matter configuration that enables overview functionality and specifies header levels for overview generation.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/lynx-native-api/lynx-view.md#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\noverview: true\noverviewHeaders: [2]\n---\n```\n\n----------------------------------------\n\nTITLE: Importing NextSteps Module in JSX\nDESCRIPTION: This snippet imports all exports from the '@lynx/NextSteps' module as NextSteps. It's likely used to include navigation or progression components in a Lynx application.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/guide/debugging/lynx-devtool.mdx#2025-04-17_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport * as NextSteps from '@lynx/NextSteps';\n```\n\n----------------------------------------\n\nTITLE: Rendering Example Component in JSX\nDESCRIPTION: JSX code snippet demonstrating how to use the Go component to render an example of the relative-left-of property in action.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/css/properties/relative-left-of.mdx#2025-04-17_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<Go\n  example=\"css-api\"\n  defaultFile=\"src/relative-left-of/App.tsx\"\n  img=\"https://lf-lynx.tiktok-cdns.com/obj/lynx-artifacts-oss-sg/lynx-website/assets/doc/css/relative-left-of.png\"\n  defaultEntryFile=\"dist/relative-left-of.lynx.bundle\"\n  entry=\"src/relative-left-of\"\n/>\n```\n\n----------------------------------------\n\nTITLE: TransformImport Interface Definition in TypeScript\nDESCRIPTION: Defines the TypeScript interface for TransformImport, which specifies configuration options for transforming import paths in the rspeedy package.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/api/rspeedy/rspeedy.transformimport.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface TransformImport \n```\n\n----------------------------------------\n\nTITLE: Listener Parameter Type Definition in TypeScript\nDESCRIPTION: Type definition for the listener parameter which specifies the callback function to be executed when the event occurs.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/lynx-api/lynx/lynx-before-publish-event/before-publish-event-add.mdx#2025-04-17_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nlistener: () => {};\n```\n\n----------------------------------------\n\nTITLE: Defining RspeedyConfig Property Type in TypeScript\nDESCRIPTION: Type definition for the rspeedyConfig optional property in CreateRspeedyOptions interface. This property accepts a Config type and is used to configure Rspeedy behavior.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/api/rspeedy/rspeedy.createrspeedyoptions.rspeedyconfig.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nrspeedyConfig?: Config;\n```\n\n----------------------------------------\n\nTITLE: Defining Performance.chunkSplit Property in TypeScript\nDESCRIPTION: The chunkSplit property is an optional configuration for the chunk splitting strategy in the Performance class. It can be of type ChunkSplit, ChunkSplitBySize, ChunkSplitCustom, or undefined.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/rspeedy/rspeedy.performance.chunksplit.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nchunkSplit?: ChunkSplit | ChunkSplitBySize | ChunkSplitCustom | undefined;\n```\n\n----------------------------------------\n\nTITLE: TypeScript Declaration of cssLoader Property\nDESCRIPTION: TypeScript signature for the cssLoader property which controls options for css-loader. The property is optional and accepts a CssLoader type or undefined.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/api/rspeedy/rspeedy.tools.cssloader.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ncssLoader?: CssLoader | undefined;\n```\n\n----------------------------------------\n\nTITLE: Rendering HTML Living Specification Using React Component\nDESCRIPTION: Implements a React component that uses HtmlViewer to render HTML content from a living specification document located at '/living-spec/index.html'\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/guide/spec.mdx#2025-04-17_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n{/* # Living Specification */}\n\nimport { HtmlViewer } from '@/components/html-viewer';\n\n<HtmlViewer path=\"/living-spec/index.html\" />\n```\n\n----------------------------------------\n\nTITLE: Defining Filename.template Property in TypeScript\nDESCRIPTION: TypeScript signature for the obsolete Filename.template property, which specifies the name of template files.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/rspeedy/rspeedy.filename.template.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntemplate?: string | undefined;\n```\n\n----------------------------------------\n\nTITLE: CSS Syntax for overflow-y Property\nDESCRIPTION: This snippet shows the basic syntax for using the overflow-y property in CSS, demonstrating two possible values: visible and hidden.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/api/css/properties/overflow-y.mdx#2025-04-17_snippet_1\n\nLANGUAGE: css\nCODE:\n```\noverflow-y: visible;\noverflow-y: hidden;\n```\n\n----------------------------------------\n\nTITLE: Defining exportLocalsConvention Property in TypeScript\nDESCRIPTION: TypeScript signature for the exportLocalsConvention property of the CssModules interface. It specifies the type as an optional CssModuleLocalsConvention or undefined.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/api/rspeedy/rspeedy.cssmodules.exportlocalsconvention.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexportLocalsConvention?: CssModuleLocalsConvention | undefined;\n```\n\n----------------------------------------\n\nTITLE: Declaring pipelineSchedulerConfig Property in TypeScript\nDESCRIPTION: TypeScript signature for the pipelineSchedulerConfig property which is an optional number used to configure pipeline scheduling strategies including parallel element and list batch-rendering.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/api/rspeedy/react-rsbuild-plugin.pluginreactlynxoptions.pipelineschedulerconfig.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\npipelineSchedulerConfig?: number;\n```\n\n----------------------------------------\n\nTITLE: Defining DistPath.root Property in TypeScript\nDESCRIPTION: TypeScript property definition for the root directory path. This optional property accepts a string value that defaults to 'dist' and determines where output files will be generated.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/rspeedy/rspeedy.distpath.root.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nroot?: string | undefined;\n```\n\n----------------------------------------\n\nTITLE: Importing and Rendering GetTextInfo Component in React\nDESCRIPTION: This code imports the GetTextInfo component from the lynx directory and renders it directly. The file structure suggests this is part of a larger React application utilizing components from a shared lynx directory.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/lynx-api/main-thread/lynx-get-text-info.mdx#2025-04-17_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport GetTextInfo from '../lynx/lynx-get-text-info';\n\n<GetTextInfo />\n```\n\n----------------------------------------\n\nTITLE: Configuring JavaScript Minification in RSpeedy\nDESCRIPTION: Example configuration showing how to disable JavaScript minification in RSpeedy using the defineConfig function. The configuration is set through the output.minify.js property.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/rspeedy/rspeedy.minify.js.md#2025-04-17_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineConfig } from '@lynx-js/rspeedy'\n\nexport default defineConfig({\n  output: {\n    minify: {\n      js: false,\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: CSS Grid Auto Flow Formal Syntax Definition\nDESCRIPTION: Defines the formal syntax for the grid-auto-flow property showing that it accepts row or column keywords optionally combined with the dense keyword.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/css/properties/grid-auto-flow.mdx#2025-04-17_snippet_1\n\nLANGUAGE: css\nCODE:\n```\ngrid-auto-flow = [ row | column ] || dense\n```\n\n----------------------------------------\n\nTITLE: Implementing Deprecated UNSAFE_componentWillMount in React\nDESCRIPTION: Deprecated lifecycle method called before initial mounting. Avoid side-effects or subscriptions. Recommended to use componentDidMount instead.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/react/Class.Component.mdx#2025-04-17_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\noptional UNSAFE_componentWillMount(): void\n```\n\n----------------------------------------\n\nTITLE: Grid Row Span Formal Syntax Definition\nDESCRIPTION: Formal syntax definition showing that grid-row-span only accepts numeric values.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/css/properties/grid-row-span.mdx#2025-04-17_snippet_1\n\nLANGUAGE: css\nCODE:\n```\ngrid-row-span = <number>\n```\n\n----------------------------------------\n\nTITLE: Applying Relative Layout Display Property in Lynx\nDESCRIPTION: Sets the display property to relative to enable relative layout capabilities on the parent element.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/guide/ui/layout/relative-layout.mdx#2025-04-17_snippet_0\n\nLANGUAGE: css\nCODE:\n```\ndisplay: relative;\n```\n\n----------------------------------------\n\nTITLE: Using VersionBadge Component\nDESCRIPTION: Shows how to use the VersionBadge component to display version information. The component can accept either a 'v' prop or use children to specify the version number.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/internal/docs-contribution-guide/doc-components.mdx#2025-04-17_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n// Using the `v` prop\n<VersionBadge v={2.5} />\n\n// Using children\n<VersionBadge>2.5.1</VersionBadge>\n```\n\n----------------------------------------\n\nTITLE: Defining Span Count Attribute in TSX\nDESCRIPTION: Defines the required span-count attribute which sets the number of columns or rows for the <list> component layout.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/elements/built-in/list.mdx#2025-04-17_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nspan-count: number\n```\n\n----------------------------------------\n\nTITLE: Styling Full-Width Images in JSX\nDESCRIPTION: This CSS snippet, embedded in JSX, defines styles for full-width images. It sets the width to 800 pixels and adds a margin of 20 pixels.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/guide/debugging/lynx-devtool/layers-panel.mdx#2025-04-17_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<style jsx>{`\n  .full_image {\n    width: 800px;\n    margin: 20px;\n  }\n`}</style>\n```\n\n----------------------------------------\n\nTITLE: Overflow Property Formal Syntax\nDESCRIPTION: Shows the formal syntax definition for the overflow property, indicating the available values that can be used.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/api/css/properties/overflow.mdx#2025-04-17_snippet_1\n\nLANGUAGE: css\nCODE:\n```\nhidden | visible\n```\n\n----------------------------------------\n\nTITLE: Rendering Image Element in JSX\nDESCRIPTION: This code snippet renders an image element with src, alt, and width attributes. It's used multiple times in the documentation to display various screenshots and illustrations related to Lynx DevTool.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/guide/debugging/lynx-devtool.mdx#2025-04-17_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<img\n  src=\"https://lf-lynx.tiktok-cdns.com/obj/lynx-artifacts-oss-sg/lynx-website/assets/doc/debugging-devtool-switch-en-ios.png\"\n  alt=\"Lynx DevTool Switch Page\"\n  width={200}\n/>\n```\n\n----------------------------------------\n\nTITLE: Importing Go Component in JSX\nDESCRIPTION: Imports the Go component from the @lynx package, which is used to display code examples and previews in the documentation.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/css/properties/filter.mdx#2025-04-17_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Go } from '@lynx';\n\n<Go\n  example=\"css-api\"\n  entry=\"src/filter\"\n  defaultFile=\"src/filter/App.tsx\"\n  img=\"https://lf-lynx.tiktok-cdns.com/obj/lynx-artifacts-oss-sg/lynx-website/assets/doc/css/filter.jpg\"\n  defaultEntryFile=\"dist/filter.lynx.bundle\"\n  entry=\"src/filter\"\n/>\n```\n\n----------------------------------------\n\nTITLE: TypeScript Definition for BundlerChain Property\nDESCRIPTION: Type definition showing the bundlerChain property signature within the Tools configuration.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/rspeedy/rspeedy.tools.bundlerchain.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nbundlerChain?: ToolsConfig['bundlerChain'] | undefined;\n```\n\n----------------------------------------\n\nTITLE: Multiple Entry Modules Configuration\nDESCRIPTION: Shows how to configure multiple entry modules as a single entry point using an array.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/rspeedy/rspeedy.entry.md#2025-04-17_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineConfig } from '@lynx-js/rspeedy'\nexport default defineConfig({\n  entry: ['./src/prefetch.js', './src/pages/main/index.js'],\n})\n```\n\n----------------------------------------\n\nTITLE: createElement for Generic DOM Elements in TypeScript\nDESCRIPTION: This overload of createElement is for creating generic DOM elements. It accepts a string type, props with ClassAttributes and DOM attributes, and optional children nodes.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/api/react/Function.createElement.mdx#2025-04-17_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nfunction createElement<P, T>(\n   type: string,\n   props?: null | ClassAttributes<T> & P, ...\nchildren?: ReactNode[]): DOMElement<P, T>\n```\n\n----------------------------------------\n\nTITLE: Exact Match Alias Configuration\nDESCRIPTION: Example showing how to configure exact match aliases using the $ suffix in the key name. Demonstrates how exact matches affect module resolution.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/rspeedy/rspeedy.source.alias.md#2025-04-17_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineConfig } from '@lynx-js/rspeedy'\nexport default defineConfig({\n  source: {\n    alias: {\n      xyz$: 'path/to/file.js',\n    },\n  },\n})\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport Test1 from 'xyz'; // Exact match, so path/to/file.js is resolved and imported\nimport Test2 from 'xyz/file.js'; // Not an exact match, normal resolution takes place\n```\n\n----------------------------------------\n\nTITLE: Configuring Accessibility Attributes for View Element\nDESCRIPTION: Shows how to set accessibility-related attributes like accessibility-element, accessibility-label, and accessibility-trait.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/api/elements/built-in/view.mdx#2025-04-17_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n// DefaultValue: image and text nodes default to true, others default to false\naccessibility-element?: boolean\n\n// DefaultValue: undefined\naccessibility-label?: string\n\n// DefaultValue: \"none\"\naccessibility-traits?: \"none\" | \"button\" | \"image\" | \"text\"\n```\n\n----------------------------------------\n\nTITLE: Defining Output.distPath Type in TypeScript\nDESCRIPTION: TypeScript type definition for the distPath property that specifies the directory path for distribution files.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/rspeedy/rspeedy.output.distpath.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ndistPath?: DistPath | undefined;\n```\n\n----------------------------------------\n\nTITLE: Default CSS Loader Configuration\nDESCRIPTION: Default configuration object for the CSS loader showing module settings, source map configuration, and import loader settings. Includes CSS modules configuration with camelCase naming convention.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/rspeedy/rspeedy.tools.cssloader.md#2025-04-17_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst defaultOptions = {\n  modules: {\n    auto: true,\n    namedExport: false,\n    exportLocalsConvention: 'camelCase',\n    localIdentName: output.cssModules.localIdentName,\n  },\n  sourceMap: output.sourceMap,\n  // importLoaders is `1` when compiling css files, and is `2` when compiling sass/less files\n  importLoaders: 1 || 2,\n};\n```\n\n----------------------------------------\n\nTITLE: Defining PrintFileSize Type Signature in TypeScript\nDESCRIPTION: Type definition for the printFileSize property in the Performance configuration.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/rspeedy/rspeedy.performance.printfilesize.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nprintFileSize?: PerformanceConfig['printFileSize'] | undefined;\n```\n\n----------------------------------------\n\nTITLE: Defining containerInitStart Property in TypeScript\nDESCRIPTION: Defines the containerInitStart property that stores the container initialization start timestamp in milliseconds.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/lynx-api/performance-api/performance-entry/init-container-entry.mdx#2025-04-17_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\ncontainerInitStart: number;\n```\n\n----------------------------------------\n\nTITLE: Background Only Directive Implementation\nDESCRIPTION: Demonstrates how to mark a function for background thread execution only using the 'background only' directive, which removes the function body from other threads.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/api/react/Document.directives.mdx#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction bgOnlyAction(pureCallback) {\n  'background only';\n  lynx.getJSModule('GlobalEventEmitter').addListener('eventName', pureCallback);\n}\n```\n\n----------------------------------------\n\nTITLE: Defining PluginQRCodeOptions.schema Property in TypeScript\nDESCRIPTION: The TypeScript signature for the 'schema' property of PluginQRCodeOptions. It can be either a CustomizedSchemaFn or undefined.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/api/rspeedy/qrcode-rsbuild-plugin.pluginqrcodeoptions.schema.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nschema?: CustomizedSchemaFn | undefined;\n```\n\n----------------------------------------\n\nTITLE: Rendering Compatibility Table Component\nDESCRIPTION: JSX code that implements the LegacyCompatTable component to display browser compatibility information for the animation-duration property.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/css/properties/animation-duration.mdx#2025-04-17_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\n<LegacyCompatTable metadata=\"css/properties/animation-duration\" />\n```\n\n----------------------------------------\n\nTITLE: Formal CSS Flex-wrap Syntax Definition\nDESCRIPTION: Defines the formal syntax structure for the flex-wrap property showing all possible values in technical notation.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/css/properties/flex-wrap.mdx#2025-04-17_snippet_1\n\nLANGUAGE: css\nCODE:\n```\nflex-wrap =\n  nowrap        |\n  wrap          |\n  wrap-reverse\n```\n\n----------------------------------------\n\nTITLE: Importing React Components for TSDoc\nDESCRIPTION: This code snippet imports all components from the @lynx package as Lynx to allow dynamic lookup in TSDoc writings.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/react/Function.useCallback.mdx#2025-04-17_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport * as Lynx from '@lynx';\n```\n\n----------------------------------------\n\nTITLE: Defining DistPath.intermediate Property in TypeScript\nDESCRIPTION: Type definition for the intermediate property within the DistPath interface. This optional property specifies the directory path where intermediate files will be stored during processing, defaulting to '.rspeedy' if not specified.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/api/rspeedy/rspeedy.distpath.intermediate.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nintermediate?: string | undefined;\n```\n\n----------------------------------------\n\nTITLE: Importing APITable Component in Markdown\nDESCRIPTION: This code snippet imports the APITable component from the @lynx module, which is likely used to display browser compatibility information for the CSS angle data type.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/api/css/data-type/angle.mdx#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nimport { APITable } from '@lynx';\n\n<APITable query=\"css/data-type/angle\" />\n```\n\n----------------------------------------\n\nTITLE: Rendering Color Swatches in React\nDESCRIPTION: This code snippet demonstrates how to create a color swatch using inline styles in a React component. It sets the background color using RGBA values and applies padding and margin for visual effect.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/css/data-type/color.mdx#2025-04-17_snippet_3\n\nLANGUAGE: JSX\nCODE:\n```\n<div style={{ padding: '17.5px 90px', margin: '-10px', backgroundColor: 'rgba(188, 143, 143, 1)' }}></div>\n```\n\n----------------------------------------\n\nTITLE: Configuring Lynx Website Overview Page in YAML\nDESCRIPTION: This YAML configuration sets up the overview page for the Lynx Website project. It enables the overview feature and initializes an empty array for overview headers.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/api/css/properties.md#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\noverview: true\noverviewHeaders: []\n```\n\n----------------------------------------\n\nTITLE: Initializing Linear Layout Display Property\nDESCRIPTION: Sets up the basic linear layout display property on a parent element to enable linear layout behavior for its children.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/guide/ui/layout/linear-layout.mdx#2025-04-17_snippet_0\n\nLANGUAGE: css\nCODE:\n```\ndisplay: linear;\n```\n\n----------------------------------------\n\nTITLE: Previewing Production Build\nDESCRIPTION: Command to preview the production build locally before deployment.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/README.md#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\npnpm run preview\n```\n\n----------------------------------------\n\nTITLE: Importing Compatibility Table Component\nDESCRIPTION: Code snippet for importing and using the LegacyCompatTable component to display compatibility information for the overflow-x CSS property.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/api/css/properties/overflow-x.mdx#2025-04-17_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nimport { LegacyCompatTable } from '@lynx';\n\n<LegacyCompatTable metadata=\"css/properties/overflow-x\" />\n```\n\n----------------------------------------\n\nTITLE: ExposedAPI Interface Definition in TypeScript\nDESCRIPTION: TypeScript interface definition for the ExposedAPI interface in the Rspeedy library. This interface defines the API exposed by Rspeedy that can be accessed in Rsbuild plugins.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/api/rspeedy/rspeedy.exposedapi.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface ExposedAPI \n```\n\n----------------------------------------\n\nTITLE: Platform-Specific Component Tabs Implementation\nDESCRIPTION: Implementation of platform-specific tabs using PlatformTabs component to display different documentation for iOS, Android and Web platforms.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/guide/custom-native-component.mdx#2025-04-17_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<PlatformTabs hashKey=\"platform\">\n<PlatformTabs.Tab platform=\"ios\">\n<CustomComponentLynxIOS />\n</PlatformTabs.Tab>\n\n<PlatformTabs.Tab platform=\"android\">\n  <CustomComponentLynxAndroid />\n</PlatformTabs.Tab>\n<PlatformTabs.Tab platform=\"web\">\n  <CustomComponentLynxWeb />\n</PlatformTabs.Tab>\n</PlatformTabs>\n```\n\n----------------------------------------\n\nTITLE: Importing and Rendering RAF Component in React/JSX\nDESCRIPTION: This snippet shows the import of a Request Animation Frame component from a relative path and its subsequent rendering. The RAF component is likely responsible for handling animation frame requests in an optimized way.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/api/lynx-api/main-thread/lynx-request-animation-frame.mdx#2025-04-17_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport RAF from '../lynx/lynx-request-animation-frame';\n\n<RAF />\n```\n\n----------------------------------------\n\nTITLE: Defining CssExtractRspackLoaderOptions.esModule Property in TypeScript\nDESCRIPTION: TypeScript signature for the esModule property of CssExtractRspackLoaderOptions. It is an optional boolean property that determines whether to use ES modules syntax.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/rspeedy/rspeedy.cssextractrspackloaderoptions.esmodule.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nesModule?: boolean | undefined;\n```\n\n----------------------------------------\n\nTITLE: Formal Syntax Definition for CSS overflow-y Property\nDESCRIPTION: This snippet defines the formal syntax for the overflow-y property, showing that it accepts either 'hidden' or 'visible' as valid values.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/css/properties/overflow-y.mdx#2025-04-17_snippet_1\n\nLANGUAGE: css\nCODE:\n```\nhidden | visible\n```\n\n----------------------------------------\n\nTITLE: UNSAFE_componentWillMount Deprecated Method\nDESCRIPTION: Deprecated lifecycle method called before mounting. Replaced by componentDidMount or constructor in modern React.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/react/Class.PureComponent.mdx#2025-04-17_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\noptional UNSAFE_componentWillMount(): void\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Output Directory in Rspeedy\nDESCRIPTION: JavaScript example showing how to configure a custom output directory using the distPath option in Rspeedy configuration. This example sets the root output directory to './output' instead of the default 'dist' folder.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/rspeedy/rspeedy.output.distpath.md#2025-04-17_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineConfig } from '@lynx-js/rspeedy'\nexport default defineConfig({\n  output: {\n    distPath: {\n      root: './output',\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Formal Syntax Definition for flex-basis\nDESCRIPTION: The formal syntax definition for the flex-basis CSS property, specifying that it accepts auto, length values, or percentage values.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/css/properties/flex-basis.mdx#2025-04-17_snippet_1\n\nLANGUAGE: css\nCODE:\n```\nflex-basis = auto | <length-percentage [0,∞]>\n\n<length-percentage> =\n  <length>      |\n  <percentage>\n```\n\n----------------------------------------\n\nTITLE: Using the Go Component with Preview Image\nDESCRIPTION: Example showing how to include a preview image with the Go component by specifying the img prop.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/src/components/go/README.md#2025-04-17_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n<Go\n  example=\"animation\"\n  defaultFile=\"src/transition_animation/index.tsx\"\n  img=\"https://lf-lynx.tiktok-cdns.com/obj/lynx-artifacts-oss-sg/lynx-website/assets/bg-draggable.gif\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Defining Filename.bundle Property in TypeScript\nDESCRIPTION: TypeScript signature for the 'bundle' property of the Filename interface. It's an optional string property used to specify the name pattern for bundle files.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/api/rspeedy/rspeedy.filename.bundle.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nbundle?: string | undefined;\n```\n\n----------------------------------------\n\nTITLE: TypeScript Signature for Tools.rsdoctor Property\nDESCRIPTION: The TypeScript type definition for the rsdoctor property in the Tools namespace. It accepts Rsdoctor configuration options or can be undefined.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/api/rspeedy/rspeedy.tools.rsdoctor.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nrsdoctor?: RsdoctorRspackPluginOptions | undefined;\n```\n\n----------------------------------------\n\nTITLE: Generating HTML Documentation for Lynx Living Specification in Bash\nDESCRIPTION: Command to generate the HTML documentation from the Bikeshed source files using pnpm. This creates the documentation in the docs/public/living-spec directory.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/packages/lynx-living-spec/README.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npnpm gen:living-spec\n```\n\n----------------------------------------\n\nTITLE: Basic CSS Border End Start Radius Usage\nDESCRIPTION: Examples showing how to use border-end-start-radius property with circle and elliptical corner values.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/css/properties/border-end-start-radius.mdx#2025-04-17_snippet_0\n\nLANGUAGE: css\nCODE:\n```\n/* the corner is a circle */\n/* border-end-start-radius: radius */\nborder-end-start-radius: 3px;\n\n/* the corner is an ellipsis */\n/* border-end-start-radius: horizontal vertical */\nborder-end-start-radius: 0.5em 1em;\n```\n\n----------------------------------------\n\nTITLE: Defining LoadConfigOptions.configPath Type in TypeScript\nDESCRIPTION: Type definition for the configPath property in the LoadConfigOptions interface. This property is optional and accepts either a string value or undefined.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/rspeedy/rspeedy.loadconfigoptions.configpath.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconfigPath?: string | undefined;\n```\n\n----------------------------------------\n\nTITLE: TypeScript Signature for Source.transformImport Property\nDESCRIPTION: The TypeScript signature defining the transformImport property type as an optional array of TransformImport objects or undefined.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/api/rspeedy/rspeedy.source.transformimport.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntransformImport?: TransformImport[] | undefined;\n```\n\n----------------------------------------\n\nTITLE: Example Usage of AppendElement\nDESCRIPTION: Example showing how to create parent and child elements and append them together in the main thread\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/api/engine/element-api/__AppendElement.mdx#2025-04-17_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n// main-thread.js\nlet child = __CreateElement('view', 0, {});\n\nlet parent = __CreateElement('view', 0, {});\n\n__AppendElement(parent, child);\n```\n\n----------------------------------------\n\nTITLE: InitDataProvider Function Signature in TypeScript\nDESCRIPTION: The function signature for InitDataProvider, showing its parameter types and return value. It accepts component props and an optional deprecated legacy context parameter.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/api/react/Function.InitDataProvider.mdx#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction InitDataProvider(props: object, deprecatedLegacyContext?: any): null | ReactElement<any, any>\n```\n\n----------------------------------------\n\nTITLE: Adding Lynx DevTool Dependencies for Android (Kotlin)\nDESCRIPTION: This code snippet shows how to add the required dependencies for Lynx DevTool in an Android project's build.gradle.kts file using Kotlin syntax.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/guide/start/integrate-lynx-devtool.mdx#2025-04-17_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\n// Lynx DevTool 接入时请保证和 Lynx 相同版本\ndependencies {\n  implementation (\"org.lynxsdk.lynx:lynx-devtool:3.2.0-rc.0\")\n  implementation (\"org.lynxsdk.lynx:lynx-service-devtool:3.2.0-rc.0\")\n}\n```\n\n----------------------------------------\n\nTITLE: Usage Example of useInitData React Hook\nDESCRIPTION: An example demonstrating how to use the useInitData hook in a React functional component. The example shows how to access properties from the returned initData object.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/api/react/Function.useInitData.mdx#2025-04-17_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nfunction App() {\n  const initData = useInitData();\n\n  initData.someProperty // use it\n}\n```\n\n----------------------------------------\n\nTITLE: Background Only Directive Main Thread Output\nDESCRIPTION: Shows how the background-only function is transformed when running on the main thread - the function body is completely removed.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/react/Document.directives.mdx#2025-04-17_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nfunction bgOnlyAction(pureCallback) {}\n```\n\n----------------------------------------\n\nTITLE: Configuring Rspack Using appendPlugins Utility\nDESCRIPTION: Example demonstrating how to configure Rspack using the appendPlugins utility to add plugins to the configuration.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/rspeedy/rspeedy.tools.rspack.md#2025-04-17_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineConfig } from '@lynx-js/rspeedy'\n\nexport default defineConfig({\n  tools: {\n    rspack(config, { appendPlugins, rspack }) {\n      appendPlugins(new rspack.BannerPlugin({ banner: 'Hello, World!' }))\n      return config\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Importing Go Component in JSX\nDESCRIPTION: This snippet demonstrates how to import and use the Go component from the Lynx framework to display an interactive example of the overflow-x property.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/css/properties/overflow-x.mdx#2025-04-17_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Go } from '@lynx';\n\n<Go\n  example=\"css-api\"\n  defaultFile=\"src/overflow-x/App.tsx\"\n  img=\"https://lf-lynx.tiktok-cdns.com/obj/lynx-artifacts-oss-sg/lynx-website/assets/doc/css/overflow.jpg\"\n  entry=\"src/overflow-x\"\n  defaultEntryFile=\"dist/overflow-x.lynx.bundle\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Using BlogAvatar Component in Markdown\nDESCRIPTION: This code snippet demonstrates the usage of the BlogAvatar component, passing a list of author identifiers as a prop.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/blog/lynx-open-source-roadmap-2025.mdx#2025-04-17_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n<BlogAvatar list={['liushouqun']} />\n```\n\n----------------------------------------\n\nTITLE: Formal Syntax Definition for Display Property in Lynx CSS\nDESCRIPTION: The formal syntax definition for the display property in Lynx CSS, showing all available values.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/css/properties/display.mdx#2025-04-17_snippet_1\n\nLANGUAGE: css\nCODE:\n```\ndisplay = none | linear | flex | grid | relative\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of CodeFold Component in JSX\nDESCRIPTION: Demonstrates how to use the CodeFold component with an image path, height setting, and toggle feature.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/src/components/code-fold/README.md#2025-04-17_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<CodeFold img=\"path/to/example/image.webp\" height={400} toggle>\n  {`Your code example here`}\n</CodeFold>\n```\n\n----------------------------------------\n\nTITLE: Defining js property in Filename type in TypeScript\nDESCRIPTION: TypeScript type definition for the js property of the Filename type. This optional property defines the naming pattern for JavaScript files within the RSpeedy framework.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/api/rspeedy/rspeedy.filename.js.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\njs?: string | undefined;\n```\n\n----------------------------------------\n\nTITLE: Defining exportLocalsConvention Property in TypeScript\nDESCRIPTION: This code snippet shows the TypeScript signature for the exportLocalsConvention property. It is an optional property that can be of type CssModuleLocalsConvention or undefined.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/rspeedy/rspeedy.cssmodules.exportlocalsconvention.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexportLocalsConvention?: CssModuleLocalsConvention | undefined;\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Rsdoctor Plugin to Rspeedy Configuration\nDESCRIPTION: This code demonstrates how to add a custom Rsdoctor plugin to the Rspeedy configuration file, including environment-based conditional activation.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/rspeedy/use-rsdoctor.mdx#2025-04-17_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { RsdoctorRspackPlugin } from '@rsdoctor/rspack-plugin';\n\nexport default {\n  tools: {\n    rspack(config, { appendPlugins }) {\n      if (process.env.RSDOCTOR === 'true') {\n        appendPlugins(\n          new RsdoctorRspackPlugin({\n            // plugin options\n            supports: { banner: true },\n          }),\n        );\n      }\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Defining cssAsync Property in DistPath Interface (TypeScript)\nDESCRIPTION: This code snippet defines the cssAsync property in the DistPath interface. It is an optional string property that specifies the output directory for async JavaScript files.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/rspeedy/rspeedy.distpath.cssasync.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ncssAsync?: string | undefined;\n```\n\n----------------------------------------\n\nTITLE: Configuring Single Entry Point\nDESCRIPTION: Example showing how to configure RSpeedy with a single entry point file path.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/api/rspeedy/rspeedy.source.entry.md#2025-04-17_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineConfig } from '@lynx-js/rspeedy'\nexport default defineConfig({\n  entry: './src/pages/main/index.js',\n})\n```\n\n----------------------------------------\n\nTITLE: Importing PerformanceObserver Component\nDESCRIPTION: Imports the RuntimeBadge component from the Lynx package.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/lynx-api/performance-api/performance-observer.mdx#2025-04-17_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { RuntimeBadge } from '@lynx';\n```\n\n----------------------------------------\n\nTITLE: CodeFold Component with Markdown Code Block Example\nDESCRIPTION: Shows how to use the CodeFold component with a markdown code block containing a Button component example with styling properties.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/src/components/code-fold/README.md#2025-04-17_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<CodeFold img=\"path/to/button-example.webp\" height={300} toggle>\n  ```jsx\n  <Button\n    text=\"Click me\"\n    onClick={() => console.log('Button clicked')}\n    textStyle={{ color: 'white' }}\n    normalStyle={{\n      width: '100%',\n      height: '50px',\n      background: 'blue',\n      borderRadius: '5px',\n    }}\n  />\n  <Button\n    text=\"Click me\"\n    onClick={() => console.log('Button clicked')}\n    textStyle={{ color: 'white' }}\n    normalStyle={{\n      width: '100%',\n      height: '50px',\n      background: 'blue',\n      borderRadius: '5px',\n    }}\n  />\n  ```\n</CodeFold>\n```\n\n----------------------------------------\n\nTITLE: Using StatusBadge Component\nDESCRIPTION: Shows how to use StatusBadge to indicate the status of an API or feature. Supports various status types like deprecated, experimental, and required, with shorthand components available.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/internal/docs-contribution-guide/doc-components.mdx#2025-04-17_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\n// Render a deprecated badge\n<StatusBadge status=\"deprecated\" />\n\n// Render an experimental badge\n<StatusBadge status=\"experimental\" />\n\n// Render a required badge\n<StatusBadge status=\"required\" />\n\n// Shorthand\n<Deprecated />\n<Experimental />\n<Required />\n```\n\n----------------------------------------\n\nTITLE: Basic white-space CSS Syntax\nDESCRIPTION: Shows the basic syntax options for the white-space CSS property in Lynx.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/api/css/properties/white-space.mdx#2025-04-17_snippet_0\n\nLANGUAGE: css\nCODE:\n```\nwhite-space: normal;\n\nwhite-space: nowrap;\n```\n\n----------------------------------------\n\nTITLE: Defining localIdentName Property in CssModules Interface in TypeScript\nDESCRIPTION: TypeScript definition for the localIdentName property which sets the format of the className generated by CSS Modules after compilation. This property is optional and accepts a string value or undefined.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/api/rspeedy/rspeedy.cssmodules.localidentname.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nlocalIdentName?: string | undefined;\n```\n\n----------------------------------------\n\nTITLE: Defining CssExtract.loaderOptions Property in TypeScript\nDESCRIPTION: The TypeScript signature for the loaderOptions property of the CssExtract class. This property is optional and accepts a CssExtractRspackLoaderOptions object or undefined to configure the CSS extraction loader behavior.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/api/rspeedy/rspeedy.cssextract.loaderoptions.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nloaderOptions?: CssExtractRspackLoaderOptions | undefined;\n```\n\n----------------------------------------\n\nTITLE: Configuring CSS Output Directory in TypeScript\nDESCRIPTION: TypeScript type definition for the CSS output directory configuration. This optional property specifies where compiled CSS files should be placed. If not specified, it defaults to the same value as the intermediate directory path.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/rspeedy/rspeedy.distpath.css.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ncss?: string | undefined;\n```\n\n----------------------------------------\n\nTITLE: Integrating DevTool Switch Page in Android (Java)\nDESCRIPTION: This Java code snippet demonstrates how to integrate the DevTool switch page in an Android app. It creates a LynxView, sets it as the content view, and loads the DevTool switch template from assets.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/guide/start/integrate-lynx-devtool-advanced.mdx#2025-04-17_snippet_2\n\nLANGUAGE: java\nCODE:\n```\npublic class SwitchActivity extends AppCompatActivity {\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        LynxView lynxView = buildLynxView();\n        setContentView(lynxView);\n        byte[] array = null;\n        try {\n            InputStream inputStream = this.getAssets().open(\"devtool_switch/switchPage/devtoolSwitch.lynx.bundle\");\n            array = readBytes(inputStream);\n            lynxView.renderTemplateWithBaseUrl(array, TemplateData.empty(), \"devtool_switch/switchPage/devtoolSwitch.lynx.bundle\");\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n\n    private LynxView buildLynxView() {\n        LynxViewBuilder viewBuilder = new LynxViewBuilder();\n        viewBuilder.setTemplateProvider(new DemoTemplateProvider());\n        return viewBuilder.build(this);\n    }\n\n    private byte[] readBytes(InputStream inputStream) throws IOException {\n        byte[] buffer = new byte[1024];\n        int bytesRead;\n        ByteArrayOutputStream output = new ByteArrayOutputStream();\n        while ((bytesRead = inputStream.read(buffer)) != -1) {\n            output.write(buffer, 0, bytesRead);\n        }\n        return output.toByteArray();\n    }\n\n}\n```\n\n----------------------------------------\n\nTITLE: Registering DevTool Service in Android (Java)\nDESCRIPTION: This snippet shows how to register the DevTool service in an Android application using Java. It demonstrates the registration process during Lynx service initialization.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/guide/start/integrate-lynx-devtool.mdx#2025-04-17_snippet_5\n\nLANGUAGE: java\nCODE:\n```\nprivate void initLynxService() {\n  // ...\n  // register DevTool service\n  LynxServiceCenter.inst().registerService(LynxDevToolService.INSTANCE);\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring RSpeedyJS with Conditional Clean Directory\nDESCRIPTION: Example demonstrating how to enable directory cleaning only for production builds using an environment variable condition.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/rspeedy/rspeedy.output.cleandistpath.md#2025-04-17_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineConfig } from '@lynx-js/rspeedy'\nexport default defineConfig({\n  output: {\n    cleanDistPath: process.env.NODE_ENV === 'production',\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Basic Text Styling Example in Lynx\nDESCRIPTION: Example showing how to use CSS styling with text elements in Lynx, demonstrating that CSS inheritance is not enabled by default. Child nodes need explicit style declarations.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/api/elements/built-in/text.mdx#2025-04-17_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n// 未开启 CSS 继承时父节点的 font-size 不会应用到子 <text> 节点上\n<view style={{ fontSize:\"20px\" }}>\n  <text>hello world</text>\n</view>\n\n// 內联 <text> 比较特殊，未开启 CSS 继承时也会应用部分父 <text> 的属性，为保持一致建议在內联 <text> 显式覆盖父 <text> 的属性\n<text style={{ color:\"red\" }}>\n  red\n  <text>red</text>\n  <text style={{ color:\"blue\" }}>blue</text>\n</text>\n```\n\n----------------------------------------\n\nTITLE: Rendering Platform-Specific Tabs for Fixed Size LynxView\nDESCRIPTION: This JSX snippet creates platform-specific tabs for iOS and Android, displaying content from imported MDX files about fixed size LynxView implementation.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/guide/embed-lynx-to-native.mdx#2025-04-17_snippet_3\n\nLANGUAGE: JSX\nCODE:\n```\n<PlatformTabs hashKey=\"platform\">\n<PlatformTabs.Tab platform=\"ios\">\n<FixediOS />\n</PlatformTabs.Tab>\n\n<PlatformTabs.Tab platform=\"android\">\n  <FixedAndroid />\n</PlatformTabs.Tab>\n\n</PlatformTabs>\n```\n\n----------------------------------------\n\nTITLE: Defining SourceMap.js Property in TypeScript\nDESCRIPTION: TypeScript signature for the 'js' property of the SourceMap object. It can be set to various Rspack.DevTool values, undefined, or a string template literal for debug IDs.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/api/rspeedy/rspeedy.sourcemap.js.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\njs?: Rspack.DevTool | undefined | `${Exclude<Rspack.DevTool, false | 'eval'>}-debugids`;\n```\n\n----------------------------------------\n\nTITLE: Disabling Live Reload in JavaScript Configuration\nDESCRIPTION: Example of how to disable live reload in the rspeedy configuration using JavaScript. This sets the liveReload property to false in the dev object.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/rspeedy/rspeedy.dev.livereload.md#2025-04-17_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineConfig } from '@lynx-js/rspeedy'\n\nexport default defineConfig({\n  dev: {\n    liveReload: false,\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Defining ConsoleType Union Type in TypeScript\nDESCRIPTION: Defines a union type for console methods including standard logging levels (log, warn, error, info, debug) and profiling methods (profile, profileEnd). Also allows for string literal types through intersection with Record<never,never>.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/rspeedy/rspeedy.consoletype.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport type ConsoleType = 'log' | 'warn' | 'error' | 'info' | 'debug' | 'profile' | 'profileEnd' | (string & Record<never, never>);\n```\n\n----------------------------------------\n\nTITLE: Import Configuration for Lynx Components\nDESCRIPTION: Import statement for Lynx components to enable dynamic lookup in TSDoc documentation.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/api/react/Function.createRef.mdx#2025-04-17_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as Lynx from '@lynx';\n```\n\n----------------------------------------\n\nTITLE: Defining CssLoaderModules.namedExport Property in TypeScript\nDESCRIPTION: This snippet shows the TypeScript signature for the namedExport property. It is an optional boolean property that enables or disables ES modules named export for locals.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/rspeedy/rspeedy.cssloadermodules.namedexport.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nnamedExport?: boolean | undefined;\n```\n\n----------------------------------------\n\nTITLE: Defining the ignoreOrder Property in CssExtractRspackPluginOptions Interface\nDESCRIPTION: TypeScript type definition for the ignoreOrder property in the CssExtractRspackPluginOptions interface. This optional boolean property likely controls whether the plugin should ignore the order of CSS imports.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/api/rspeedy/rspeedy.cssextractrspackpluginoptions.ignoreorder.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nignoreOrder?: boolean | undefined;\n```\n\n----------------------------------------\n\nTITLE: Configuring RSpeedyJS with Disabled Clean Directory\nDESCRIPTION: Example showing how to disable the automatic cleaning of the output directory in RSpeedyJS configuration.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/rspeedy/rspeedy.output.cleandistpath.md#2025-04-17_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineConfig } from '@lynx-js/rspeedy'\nexport default defineConfig({\n  output: {\n    cleanDistPath: false,\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Formal Syntax Definition for Height Property\nDESCRIPTION: The formal syntax definition for the height CSS property, showing the acceptable values including auto, length-percentage, max-content, and fit-content, along with the definition of length-percentage.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/css/properties/height.mdx#2025-04-17_snippet_1\n\nLANGUAGE: css\nCODE:\n```\nheight =\n  auto                                      |\n  <length-percentage [0,∞]>                 |\n  max-content                               |\n  fit-content( <length-percentage [0,∞]> )\n\n<length-percentage> =\n  <length>      |\n  <percentage>\n```\n\n----------------------------------------\n\nTITLE: Importing Lynx Components\nDESCRIPTION: Import statement for accessing all Lynx components. This is used to enable dynamic lookup in TSDoc writings.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/api/react/Interface.InitDataRaw.mdx#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as Lynx from '@lynx';\n```\n\n----------------------------------------\n\nTITLE: Type Definition for enableRemoveCSSScope Property in TypeScript\nDESCRIPTION: Type signature for the enableRemoveCSSScope property which can be a boolean or undefined. This property controls whether CSS is restricted to component scope or treated as global CSS.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/api/rspeedy/react-rsbuild-plugin.pluginreactlynxoptions.enableremovecssscope.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nenableRemoveCSSScope?: boolean | undefined;\n```\n\n----------------------------------------\n\nTITLE: Defining Filename.js Property Signature in TypeScript\nDESCRIPTION: This code snippet shows the TypeScript signature for the 'js' property of the Filename interface. It is an optional string property that defines the naming pattern for JavaScript files.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/rspeedy/rspeedy.filename.js.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\njs?: string | undefined;\n```\n\n----------------------------------------\n\nTITLE: CSS Background-Origin Formal Syntax Definition\nDESCRIPTION: Defines the formal syntax for the background-origin property, showing the allowed values that can be used.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/api/css/properties/background-origin.mdx#2025-04-17_snippet_1\n\nLANGUAGE: css\nCODE:\n```\nborder-box | padding-box | content-box\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Server Port in JavaScript\nDESCRIPTION: Example showing how to configure a custom port for the Rspeedy Server using defineConfig. The example demonstrates setting the port to 3470.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/rspeedy/rspeedy.server.port.md#2025-04-17_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineConfig } from '@lynx-js/rspeedy'\nexport default defineConfig({\n  server: {\n    port: 3470,\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Basic Usage Syntax of relative-align-bottom CSS Property\nDESCRIPTION: Shows the basic syntax for using the relative-align-bottom property, which can be set to parent, none, or a sibling element ID number. This property aligns the bottom edge of elements in a relative layout.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/css/properties/relative-align-bottom.mdx#2025-04-17_snippet_0\n\nLANGUAGE: css\nCODE:\n```\nrelative-align-bottom: parent;\nrelative-align-bottom: none;\n\nrelative-align-bottom: 1;\nrelative-align-bottom: 2;\n```\n\n----------------------------------------\n\nTITLE: Updating Data with Processor Name in Objective-C\nDESCRIPTION: Template code for updating data with a specified processor name in iOS using Objective-C. This shows the structure for applying a named data processor when updating data.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/guide/use-data-from-host-platform.mdx#2025-04-17_snippet_12\n\nLANGUAGE: objective-c\nCODE:\n```\nLynxUpdateMeta *meta = [[LynxUpdateMeta alloc] init];\n\n// TODO: set data and processorName\n\n[lynxView updateData:meta];\n```\n\n----------------------------------------\n\nTITLE: Defining enableParallelElement Property in TypeScript Interface\nDESCRIPTION: TypeScript interface property definition for enabling Threaded Element Resolution in the React RSBuild plugin. This optional boolean property controls whether parallel element processing is enabled.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/api/rspeedy/react-rsbuild-plugin.pluginreactlynxoptions.enableparallelelement.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nenableParallelElement?: boolean;\n```\n\n----------------------------------------\n\nTITLE: Dynamic Module Alias Configuration\nDESCRIPTION: Example of using source.alias in Rsbuild to dynamically set module aliases, specifically for resolving lodash-es dependency.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/rspeedy/resolve.md#2025-04-17_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createRequire } from 'node:module';\n\nimport { defineConfig } from '@lynx-js/rspeedy';\n\nconst require = createRequire(import.meta.url);\n\nexport default defineConfig({\n  source: {\n    alias: {\n      'lodash-es': require.resolve('lodash-es'),\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Accessibility Elements Order\nDESCRIPTION: Demonstrates how to set a custom order for child accessibility elements using the accessibility-elements attribute.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/api/elements/built-in/view.mdx#2025-04-17_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\n<view\n  style={{\n    width: '100%',\n    height: '250px',\n    marginTop: '20px',\n    display: 'linear',\n    backgroundColor: 'grey',\n  }}\n  accessibility-elements=\"view-3,view-2,view-5,view-1,view-4\"\n>\n  {[1, 2, 3, 4, 5].map((value) => {\n    return (\n      <view\n        style={`height: 40px; margin: 5px; background-color: white;`}\n        id={`view-${value}`}\n        accessibility-element=\"true\"\n        accessibility-label={`view-${value}`}\n      >\n        <text>text-{value}</text>\n      </view>\n    );\n  })}\n</view>\n```\n\n----------------------------------------\n\nTITLE: Defining Pipeline Scheduler Configuration Type in TypeScript\nDESCRIPTION: Type definition for the pipelineSchedulerConfig property which uses a 64-bit unsigned integer to manage various pipeline scheduling strategies. The configuration controls parsing, rendering, and different pipeline stages including resolve, layout, UI operations, and painting.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/rspeedy/react-rsbuild-plugin.pluginreactlynxoptions.pipelineschedulerconfig.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\npipelineSchedulerConfig?: number;\n```\n\n----------------------------------------\n\nTITLE: Configuring Overview Page in YAML\nDESCRIPTION: This YAML frontmatter snippet sets the 'overview' property to true, which is likely used to designate this page as an overview or index page in the website's structure. This configuration can affect how the page is rendered or positioned within the site's navigation.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/rspeedy/index.md#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\noverview: true\n---\n```\n\n----------------------------------------\n\nTITLE: Parameter Definition for entryIdentifiers in TypeScript\nDESCRIPTION: The type definition for the entryIdentifiers parameter in the observe() method, which is an array of strings.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/lynx-api/performance-api/performance-observer/observe.mdx#2025-04-17_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nentryIdentifiers: string[];\n```\n\n----------------------------------------\n\nTITLE: Demonstrating text-indent Property in React Component\nDESCRIPTION: Example React component showing the text-indent CSS property in action. This is referenced in the documentation but the actual code isn't shown.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/css/properties/text-indent.mdx#2025-04-17_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<Go\n  example=\"css-api\"\n  defaultFile=\"src/text-indent/App.tsx\"\n  img=\"https://lf-lynx.tiktok-cdns.com/obj/lynx-artifacts-oss-sg/lynx-website/assets/doc/css/text-indent.jpg\"\n  entry=\"src/text-indent\"\n  defaultEntryFile=\"dist/text-indent.lynx.bundle\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Configuring RSpeedy with assetPrefix Example\nDESCRIPTION: Example showing how to use the assetPrefix property in a RSpeedy configuration. This demonstrates setting a CDN URL as the prefix for static assets.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/api/rspeedy/rspeedy.output.assetprefix.md#2025-04-17_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineConfig } from '@lynx-js/rspeedy'\nexport default defineConfig({\n  output: {\n    assetPrefix: 'https://cdn.example.com/assets/',\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Loading Configuration Function Declaration\nDESCRIPTION: TypeScript function declaration for loadConfig that accepts LoadConfigOptions and returns a Promise of LoadConfigResult.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/rspeedy/rspeedy.loadconfig.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare function loadConfig(loadConfigOptions: LoadConfigOptions): Promise<LoadConfigResult>;\n```\n\n----------------------------------------\n\nTITLE: Producer Project Setup\nDESCRIPTION: Shows how to create and configure a Producer project for lazy loading using create-rspeedy.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/react/code-splitting.md#2025-04-17_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\npnpm create rspeedy@latest\n```\n\n----------------------------------------\n\nTITLE: Disabling Compressed Size Output in Rspeedy\nDESCRIPTION: Configuration to disable gzipped size output to improve build performance for large projects.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/rspeedy/rspeedy.performance.printfilesize.md#2025-04-17_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineConfig } from '@lynx-js/rspeedy'\n\nexport default defineConfig({\n  performance: {\n    printFileSize: {\n      compressed: false,\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Defining camelToDashComponentName Property in TypeScript\nDESCRIPTION: TypeScript signature for the camelToDashComponentName property. It is an optional boolean property that determines whether to convert camelCase imports to kebab-case.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/api/rspeedy/rspeedy.transformimport.cameltodashcomponentname.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ncamelToDashComponentName?: boolean | undefined;\n```\n\n----------------------------------------\n\nTITLE: Formal syntax definition for flex-shrink in CSS\nDESCRIPTION: The formal syntax definition for the flex-shrink property in CSS. It specifies that the value must be a non-negative number.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/css/properties/flex-shrink.mdx#2025-04-17_snippet_1\n\nLANGUAGE: css\nCODE:\n```\nflex-shrink =\n  <number [0,∞]>\n```\n\n----------------------------------------\n\nTITLE: Defining Event Timestamp Property in TypeScript\nDESCRIPTION: Defines the 'timestamp' property of the Event class, which represents the time when the event was generated as a number.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/api/lynx-api/event/event.mdx#2025-04-17_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ntimestamp: number;\n```\n\n----------------------------------------\n\nTITLE: Configuring Rsdoctor in Rspeedy Configuration\nDESCRIPTION: This example demonstrates how to use the Tools.rsdoctor property in a Rspeedy configuration file. It imports the defineConfig function from @lynx-js/rspeedy and sets the disableClientServer option for Rsdoctor.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/rspeedy/rspeedy.tools.rsdoctor.md#2025-04-17_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineConfig } from '@lynx-js/rspeedy'\n\nexport default defineConfig({\n  tools: {\n    rsdoctor: {\n      disableClientServer: true,\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring CSS Modules Recognition Rules in Rspeedy\nDESCRIPTION: Configuration example showing how to customize which CSS files are treated as CSS Modules using the cssModules.auto setting in lynx.config.ts.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/rspeedy/styling.mdx#2025-04-17_snippet_3\n\nLANGUAGE: js\nCODE:\n```\nimport { defineConfig } from '@lynx-js/rspeedy';\n\nexport default defineConfig({\n  output: {\n    cssModules: {\n      auto(filename) {\n        return filename.includes('.module.') || filename.includes('/shared/');\n      },\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Rspeedy Type Declaration Setup\nDESCRIPTION: Type declaration configuration for Rspeedy features in TypeScript environment.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/rspeedy/typescript.md#2025-04-17_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n/// <reference types=\"@lynx-js/rspeedy/client\" />\n```\n\n----------------------------------------\n\nTITLE: Configuring Chunk Split Size in RSpeedy\nDESCRIPTION: Example configuration using defineConfig to set the minimum chunk size to 20000 bytes using the split-by-size strategy in RSpeedy performance settings.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/rspeedy/rspeedy.chunksplitbysize.minsize.md#2025-04-17_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineConfig } from '@lynx-js/rspeedy'\n\nexport default defineConfig({\n  performance: {\n    chunkSplit: {\n      strategy: 'split-by-size',\n      minSize: 20000,\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Rspack Using Object Syntax\nDESCRIPTION: Example showing how to configure Rspack with an object by setting the fullySpecified option to true in the resolve configuration. This is the simplest way to provide Rspack configuration.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/api/rspeedy/rspeedy.tools.rspack.md#2025-04-17_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineConfig } from '@lynx-js/rspeedy'\n\nexport default defineConfig({\n  tools: {\n    rspack: {\n      resolve: {\n        fullySpecified: true,\n      },\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Bundle Loader (Objective-C)\nDESCRIPTION: This code implements a custom bundle loader in Objective-C, conforming to the LynxTemplateProvider protocol. It loads bundle files embedded in the app and provides them to the Lynx Engine.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/guide/start/fragments/ios/integrating-lynx-with-existing-app-ios.mdx#2025-04-17_snippet_4\n\nLANGUAGE: objective-c\nCODE:\n```\n#import <Foundation/Foundation.h>\n\n#import \"DemoLynxProvider.h\"\n\n@implementation DemoLynxProvider\n\n- (void)loadTemplateWithUrl:(NSString*)url onComplete:(LynxTemplateLoadBlock)callback {\n    NSString *filePath = [[NSBundle mainBundle] pathForResource:url ofType:@\"bundle\"];\n    if (filePath) {\n      NSError *error;\n      NSData *data = [NSData dataWithContentsOfFile:filePath options:0 error:&error];\n      if (error) {\n        NSLog(@\"Error reading file: %@\", error.localizedDescription);\n        callback(nil, error);\n      } else {\n        callback(data, nil);\n      }\n    } else {\n      NSError *urlError = [NSError errorWithDomain:@\"com.lynx\"\n                                                  code:400\n                                                userInfo:@{NSLocalizedDescriptionKey : @\"Invalid URL.\"}];\n      callback(nil, urlError);\n    }\n}\n\n@end\n```\n\n----------------------------------------\n\nTITLE: Formal Syntax for CSS text-stroke Property\nDESCRIPTION: The formal syntax definition for the text-stroke property, showing it can accept none or a combination of length and color values.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/css/properties/text-stroke.mdx#2025-04-17_snippet_1\n\nLANGUAGE: css\nCODE:\n```\ntext-stroke = none | <length [0,∞]> || <color>\n```\n\n----------------------------------------\n\nTITLE: Using __GetElementConfig in Lynx Framework (JSX)\nDESCRIPTION: This example shows how to use the __GetElementConfig function in the Lynx frontend framework. It creates an element, sets its configuration, and then retrieves the configuration using __GetElementConfig.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/engine/element-api/__GetElementConfig.mdx#2025-04-17_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n// main-thread.js\nlet element = __CreateElement('view', 0, {});\n__SetConfig(element, { anyConfig: {} });\n\nlet listener = __GetElementConfig(element);\n```\n\n----------------------------------------\n\nTITLE: Configuring Sass Plugin in Rspeedy\nDESCRIPTION: Configuration for using Sass in Rspeedy by installing and configuring the @rsbuild/plugin-sass plugin in lynx.config.ts.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/rspeedy/styling.mdx#2025-04-17_snippet_9\n\nLANGUAGE: js\nCODE:\n```\nimport { pluginSass } from '@rsbuild/plugin-sass';\n\nimport { defineConfig } from '@lynx-js/rspeedy';\n\nexport default defineConfig({\n  source: {\n    entry: './src/index.tsx',\n  },\n  plugins: [\n    pluginSass({\n      /** sass options */\n    }),\n  ],\n});\n```\n\n----------------------------------------\n\nTITLE: Importing Go Component from Lynx\nDESCRIPTION: Code snippet showing how to import and use the Go component from the Lynx framework to demonstrate the overflow-x property with an example.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/api/css/properties/overflow-x.mdx#2025-04-17_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Go } from '@lynx';\n\n<Go\n  example=\"css-api\"\n  defaultFile=\"src/overflow-x/App.tsx\"\n  img=\"https://lf-lynx.tiktok-cdns.com/obj/lynx-artifacts-oss-sg/lynx-website/assets/doc/css/overflow.jpg\"\n  entry=\"src/overflow-x\"\n  defaultEntryFile=\"dist/overflow-x.lynx.bundle\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Displaying Flattened Directory Structure Result\nDESCRIPTION: Shows the resulting flattened directory structure after applying the configuration to minimize directory nesting.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/rspeedy/output.md#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ndist\n├── [id].[hash].js\n├── [id].[hash].js.map\n└── [name].lynx.bundle\n```\n\n----------------------------------------\n\nTITLE: Configuring minSize in @lynx-js/rspeedy\nDESCRIPTION: Example showing how to configure the minSize property in the rspeedy configuration file. This sets the minimum chunk size to 20000 bytes using the 'split-by-size' strategy.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/api/rspeedy/rspeedy.chunksplitbysize.minsize.md#2025-04-17_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineConfig } from '@lynx-js/rspeedy'\n\nexport default defineConfig({\n  performance: {\n    chunkSplit: {\n      strategy: 'split-by-size',\n      minSize: 20000,\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Defining LoadConfigResult.configPath Property in TypeScript\nDESCRIPTION: TypeScript property definition that specifies the path of the loaded configuration file. The property is of type string and represents the absolute or relative path to the configuration file that was successfully loaded.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/rspeedy/rspeedy.loadconfigresult.configpath.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconfigPath: string;\n```\n\n----------------------------------------\n\nTITLE: Lynx UI Method Error Code Enumeration\nDESCRIPTION: This code defines the possible error codes that can be returned by UI method callbacks in the Lynx Engine. These values are used to communicate the success or failure status of operations like focus to the frontend.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/guide/custom-native-component/custom-component-android.mdx#2025-04-17_snippet_12\n\nLANGUAGE: java\nCODE:\n```\nenum LynxUIMethodErrorCode {\n  kUIMethodSuccess, // Succeeded\n  kUIMethodUnknown, // Unknown error\n  kUIMethodNodeNotFound, // Cannot find corresponding element\n  kUIMethodMethodNotFound, // No corresponding method on this element\n  kUIMethodParamInvalid, // Invalid method parameters\n  kUIMethodSelectorNotSupported, // Selector not supported\n}\n```\n\n----------------------------------------\n\nTITLE: Compiling Monorepo Libraries Example in JavaScript\nDESCRIPTION: Example demonstrating how to configure Source.include to compile all files in a monorepo's package directory while excluding the node_modules folder using the 'and' and 'not' conditions.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/api/rspeedy/rspeedy.source.include.md#2025-04-17_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport path from 'node:path'\nimport { fileURLToPath } from 'node:url'\n\nimport { defineConfig } from '@lynx-js/rspeedy'\n\nconst __dirname = path.dirname(fileURLToPath(import.meta.url))\n\nconst packagesDir = path.resolve(__dirname, '../../packages')\n\nexport default defineConfig({\n  source: {\n    include: [\n      // Compile all files in Monorepo's package directory\n      // It is recommended to exclude the node_modules\n      {\n        and: [packagesDir, { not: /[\\\\/]node_modules[\\\\/]/ }],\n      },\n    ],\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Formal CSS Direction Property Syntax\nDESCRIPTION: Defines the formal syntax for the direction property showing the three possible values it can take: normal, ltr, or rtl.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/css/properties/direction.mdx#2025-04-17_snippet_3\n\nLANGUAGE: css\nCODE:\n```\ndirection = normal | ltr | rtl\n```\n\n----------------------------------------\n\nTITLE: Calculating Pixel Width on iOS in Objective-C\nDESCRIPTION: Calculates the pixel width of the screen on iOS devices. Similar to the height calculation, it considers custom screen sizes and uses the UIScreen class.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/lynx-api/global/system-info.mdx#2025-04-17_snippet_5\n\nLANGUAGE: objc\nCODE:\n```\nCGSize screenSize;\nif (!CGSizeEqualToSize(builder.screenSize, CGSizeZero)) {\n  screenSize = builder.screenSize;\n} else {\n  screenSize = [UIScreen mainScreen].bounds.size;\n}\nconst CGFloat scale = [UIScreen mainScreen].scale;\nconst CGFloat pixelWidth = screenSize.width * scale;\n```\n\n----------------------------------------\n\nTITLE: CSS border-radius Formal Syntax\nDESCRIPTION: The formal syntax definition for the border-radius property, showing the accepted format for length and percentage values.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/css/properties/border-radius.mdx#2025-04-17_snippet_1\n\nLANGUAGE: css\nCODE:\n```\nborder-radius =\n  <length-percentage [0,∞]>{1,4} [ / <length-percentage [0,∞]>{1,4} ]?\n\n<length-percentage> =\n  <length>      |\n  <percentage>\n```\n\n----------------------------------------\n\nTITLE: Defining requestResourcePrefetch Method Signature in TypeScript\nDESCRIPTION: TypeScript definition of the requestResourcePrefetch method signature, showing its parameters and return type. The method accepts a data object containing resource details and a callback function to handle the result.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/api/lynx-api/lynx/lynx-request-resource-prefetch.mdx#2025-04-17_snippet_0\n\nLANGUAGE: ts\nCODE:\n```\nrequestResourcePrefetch(data: object, callback: (res: object) => void) : void;\n```\n\n----------------------------------------\n\nTITLE: Using relative-inline-start-of CSS property in Lynx\nDESCRIPTION: Examples of how to use the relative-inline-start-of property to position elements relative to siblings. This property considers the writing direction and positions elements accordingly.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/css/properties/relative-inline-start-of.mdx#2025-04-17_snippet_0\n\nLANGUAGE: css\nCODE:\n```\nrelative-inline-start-of: none;\nrelative-inline-start-of: 1;\nrelative-inline-start-of: 2;\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Chunk Splitting in JavaScript\nDESCRIPTION: This example demonstrates how to use the splitChunks property to create a custom chunk splitting configuration. It splits @lynx-js/react and react-router into a chunk named 'lib-react'.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/rspeedy/rspeedy.chunksplitcustom.splitchunks.md#2025-04-17_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineConfig } from '@lynx-js/rspeedy'\n\nexport default defineConfig({\n  performance: {\n    chunkSplit: {\n      strategy: 'custom',\n      splitChunks: {\n        cacheGroups: {\n          react: {\n            test: /node_modules[\\\\/](@lynx-js[\\\\/]react|react-router)[\\\\/]/,\n            name: 'lib-react',\n            chunks: 'all',\n          },\n        },\n      },\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Accessing the Rspeedy Logger through ExposedAPI in TypeScript\nDESCRIPTION: Property signature for accessing the Rspeedy logger instance through the ExposedAPI. This property provides a reference to the logger module, allowing consumers to utilize logging functionality within Rspeedy.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/api/rspeedy/rspeedy.exposedapi.logger.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nlogger: typeof logger;\n```\n\n----------------------------------------\n\nTITLE: Switching Themes by Changing Classes with React Hooks\nDESCRIPTION: React component using useMemo hook to switch themes by changing classes. This method indirectly modifies CSS variable values, updating styles for all child elements.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/guide/styling/custom-theming.mdx#2025-04-17_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useMemo } from '@lynx-js/react';\n\nimport './App.css';\n\nexport function App() {\n  const themeClass = useMemo(\n    () => `theme-${lynx.__globalProps.appTheme}`,\n    [lynx.__globalProps.appTheme],\n  );\n\n  return (\n    //themeClass's value is 'theme-dark' or 'theme-light'\n    <view className={themeClass}>\n      <text id=\"test\" className=\"content\">\n        Hello Variable\n      </text>\n    </view>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Default CSS Loader Configuration in JavaScript\nDESCRIPTION: Default configuration options for the css-loader. It sets up CSS modules with automatic detection, camelCase naming convention, and configures source maps. The importLoaders option varies based on whether processing CSS or Sass/Less files.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/api/rspeedy/rspeedy.tools.cssloader.md#2025-04-17_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst defaultOptions = {\n  modules: {\n    auto: true,\n    namedExport: false,\n    exportLocalsConvention: 'camelCase',\n    localIdentName: output.cssModules.localIdentName,\n  },\n  sourceMap: output.sourceMap,\n  // importLoaders is `1` when compiling css files, and is `2` when compiling sass/less files\n  importLoaders: 1 || 2,\n};\n```\n\n----------------------------------------\n\nTITLE: Lynx UI Method Error Codes in Objective-C\nDESCRIPTION: This snippet defines the error codes used in Lynx UI method callbacks. These codes help frontend developers understand the result of method invocations, indicating success or specific error conditions.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/guide/custom-native-component/custom-component-iOS.mdx#2025-04-17_snippet_2\n\nLANGUAGE: objc\nCODE:\n```\nenum LynxUIMethodErrorCode {\n  kUIMethodSuccess = 0, // 调用成功\n  kUIMethodUnknown, // 未知错误\n  kUIMethodNodeNotFound, // 无法找到对应的元件\n  kUIMethodMethodNotFound, // 该元件上没有对应的 Method\n  kUIMethodParamInvalid, // 方法参数无效\n  kUIMethodSelectorNotSupported, // 该选择器暂时不支持\n};\n```\n\n----------------------------------------\n\nTITLE: Defining grid-row-end in CSS\nDESCRIPTION: Examples of using the grid-row-end property with different values to specify a grid item's end position or span within a grid row.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/css/properties/grid-row-end.mdx#2025-04-17_snippet_0\n\nLANGUAGE: css\nCODE:\n```\n/* <number> values */\ngrid-row-end: 2;\ngrid-row-end: 3;\n\n/* span  <number> values*/\ngrid-row-end: span 1;\n```\n\n----------------------------------------\n\nTITLE: Styling Inline Content and Margins in CSS\nDESCRIPTION: This CSS snippet defines styles for inline content display, image sizing, and margin adjustments. It's used to format the layout of the documentation page.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/guide/debugging/lynx-devtool/sources-panel.mdx#2025-04-17_snippet_0\n\nLANGUAGE: CSS\nCODE:\n```\n<style jsx>{`\n  .inline-content {\n    display: flex;\n    align-items: center;\n    flex-wrap: wrap;\n  }\n  .inline-content img {\n    margin: 0 5px;\n    height: 2rem;\n  }\n  .margin {\n    margin-top: 1rem;\n    margin-bottom: 1rem;\n  }\n  .margin2 {\n    margin-top: 0.5rem;\n  }\n`}</style>\n```\n\n----------------------------------------\n\nTITLE: Importing Fixed Size LynxView Examples\nDESCRIPTION: This snippet imports MDX files containing examples of LynxView with fixed size for iOS and Android platforms.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/guide/embed-lynx-to-native.mdx#2025-04-17_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport FixediOS from './embed-lynx-to-native/embed-lynx-to-native-fixed-iOS.mdx';\nimport FixedAndroid from './embed-lynx-to-native/embed-lynx-to-native-fixed-android.mdx';\n```\n\n----------------------------------------\n\nTITLE: Formal syntax for border-right-style in CSS\nDESCRIPTION: The formal syntax definition for the border-right-style CSS property, showing the possible values it can take.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/css/properties/border-right-style.mdx#2025-04-17_snippet_1\n\nLANGUAGE: css\nCODE:\n```\n<line-style>\nwhere\n<line-style> = none | hidden | dotted | dashed | solid | double | groove | ridge | inset | outset\n```\n\n----------------------------------------\n\nTITLE: Defining the root property in DistPath interface in TypeScript\nDESCRIPTION: The TypeScript definition of the 'root' property in the DistPath interface, which is an optional string property that specifies the root directory of all output files. The default value is 'dist'.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/api/rspeedy/rspeedy.distpath.root.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nroot?: string | undefined;\n```\n\n----------------------------------------\n\nTITLE: Formal syntax for relative-inline-start-of in Lynx CSS\nDESCRIPTION: The formal syntax definition for the relative-inline-start-of property, showing it accepts either 'none' or a number value.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/css/properties/relative-inline-start-of.mdx#2025-04-17_snippet_1\n\nLANGUAGE: css\nCODE:\n```\nrelative-inline-start-of = none | <number>\n```\n\n----------------------------------------\n\nTITLE: Configuring writeToDisk in Lynx Config File\nDESCRIPTION: An example of how to use the writeToDisk property in a Lynx configuration file. It demonstrates setting up a function to selectively write files to disk based on a regular expression test.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/rspeedy/rspeedy.dev.writetodisk.md#2025-04-17_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// lynx.config.ts\nimport { defineConfig } from '@lynx-js/rspeedy'\nexport default defineConfig({\n  dev: {\n    writeToDisk: (filePath) => /superman\\.css$/.test(filePath),\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Importing Go Component\nDESCRIPTION: Imports the Go component used for example demonstration from the Lynx package.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/lynx-api/performance-api/performance-observer.mdx#2025-04-17_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { Go } from '@lynx';\n```\n\n----------------------------------------\n\nTITLE: Triggering Input Focus using SelectorQuery in Lynx JSX\nDESCRIPTION: This snippet demonstrates how to use the SelectorQuery API to programmatically focus an input element in Lynx. It selects an input by ID and invokes the focus method with success and fail callbacks.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/guide/custom-native-component/custom-component-iOS.mdx#2025-04-17_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nlynx\n  .createSelectorQuery()\n  .select('#input-id')\n  .invoke({\n    method: 'focus',\n    params: {},\n    success: function (res) {\n      console.log('lynx', 'request focus success');\n    },\n    fail: function (res : {code: number, data: any}) {\n      console.log('lynx', 'request focus fail');\n    },\n  })\n  .exec();\n```\n\n----------------------------------------\n\nTITLE: Using linear-weight-sum CSS Property in Lynx\nDESCRIPTION: Basic syntax examples for the linear-weight-sum CSS property, demonstrating how to set integer and decimal values.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/css/properties/linear-weight-sum.mdx#2025-04-17_snippet_0\n\nLANGUAGE: css\nCODE:\n```\nlinear-weight-sum: 2;\nlinear-weight-sum: 5.5;\n```\n\n----------------------------------------\n\nTITLE: Complete Go Component Example with All Props\nDESCRIPTION: A comprehensive example showcasing all available props of the Go component, including preview image, default file, line highlighting, entry file, entry component, and schema for QR code.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/src/components/go/README.md#2025-04-17_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\n<Go\n  example=\"animation\"\n  img=\"https://lf-lynx.tiktok-cdns.com/obj/lynx-artifacts-oss-sg/lynx-website/assets/bg-draggable.gif\"\n  defaultFile=\"src/transition_animation/index.tsx\"\n  highlight=\"{1,3-5}\"\n  defaultEntryFile=\"dist/transition_animation.lynx.bundle\"\n  entry=\"src/transition_animation\"\n  schema=\"{{{url}}}?bar_color=000000&back_button_style=dark\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Defining Output Interface in TypeScript\nDESCRIPTION: TypeScript interface definition for Output configuration that specifies how bundles and assets should be output. Contains various optional properties for controlling build output behavior including asset prefixes, clean options, file copying, CSS modules, and more.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/api/rspeedy/rspeedy.output.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface Output \n```\n\n----------------------------------------\n\nTITLE: CSS Border Inline End Style Formal Syntax\nDESCRIPTION: Defines the formal syntax pattern for the border-inline-end-style property showing all possible values.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/css/properties/border-inline-end-style.mdx#2025-04-17_snippet_1\n\nLANGUAGE: css\nCODE:\n```\nnone | hidden | dotted | dashed | solid | double | groove | ridge | inset | outset\n```\n\n----------------------------------------\n\nTITLE: iOS LynxViewBuilder Integration\nDESCRIPTION: Examples showing how to inject LynxMediaResourceFetcher into LynxViewBuilder and enable the generic resource fetcher capability on iOS.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/lynx-native-api/resource-fetcher/MediaResourceFetcher.mdx#2025-04-17_snippet_3\n\nLANGUAGE: objective-c\nCODE:\n```\nLynxViewBuilder *builder = [[LynxViewBuilder alloc] init];\nbuilder.mediaResourceFetcher = [[ExampleMediaResourceFetcher alloc] init];\n```\n\nLANGUAGE: objective-c\nCODE:\n```\nLynxViewBuilder *builder = [[LynxViewBuilder alloc] init];\nbuilder.mediaResourceFetcher = [[ExampleMediaResourceFetcher alloc] init];\nbuilder.enableGenericResourceFetcher = LynxBooleanOptionTrue;\n```\n\n----------------------------------------\n\nTITLE: Using relative-bottom-of CSS Property in Lynx\nDESCRIPTION: Demonstrates the syntax options for the relative-bottom-of property, which positions an element below a sibling element identified by a number.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/css/properties/relative-bottom-of.mdx#2025-04-17_snippet_0\n\nLANGUAGE: css\nCODE:\n```\nrelative-bottom-of: none;\nrelative-bottom-of: 1;\nrelative-bottom-of: 2;\n```\n\n----------------------------------------\n\nTITLE: Using Port Placeholder in Asset Prefix\nDESCRIPTION: Example showing how to use the <port> placeholder in dev.assetPrefix to handle dynamic port assignment.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/rspeedy/rspeedy.dev.assetprefix.md#2025-04-17_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineConfig } from '@lynx-js/rspeedy'\nexport default defineConfig({\n  dev: {\n    assetPrefix: 'https://example.com:<port>/assets/',\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Disabling Per-Asset Size Output in Rspeedy\nDESCRIPTION: Example showing how to disable detailed per-asset size output while maintaining total size output.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/rspeedy/rspeedy.performance.printfilesize.md#2025-04-17_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineConfig } from '@lynx-js/rspeedy'\n\nexport default defineConfig({\n  performance: {\n    printFileSize: {\n      detail: false,\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Incorrect Usage of GlobalEventEmitter in ReactLynx (JSX)\nDESCRIPTION: This example demonstrates an incorrect way to add an event listener using GlobalEventEmitter in ReactLynx. It will cause a 'not a function' error because lynx.getJSModule('GlobalEventEmitter') is not available on the main thread.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/react/thinking-in-reactlynx.mdx#2025-04-17_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nconst EventListenerComponent = () => {\n  lynx.getJSModule('GlobalEventEmitter').addListener('myHappyEvent', () => {\n    console.log('myHappyEvent triggered!');\n  });\n  return <text>Hello</text>;\n};\n```\n\n----------------------------------------\n\nTITLE: Defining RSpeedy Config Interface in TypeScript\nDESCRIPTION: TypeScript interface definition for RSpeedy's configuration object. Contains optional properties for controlling various aspects of the build process including development settings, environment configuration, build mode, output settings, performance options, plugins, server configuration, and source file handling.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/api/rspeedy/rspeedy.config.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface Config \n```\n\n----------------------------------------\n\nTITLE: Defining EntryDescription Interface in TypeScript\nDESCRIPTION: TypeScript interface definition for EntryDescription, which configures entry points in a Lynx project. Includes optional properties for specifying import paths and public path configuration.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/rspeedy/rspeedy.entrydescription.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface EntryDescription \n```\n\n----------------------------------------\n\nTITLE: Configuring Chunk Splitting Strategy in JavaScript\nDESCRIPTION: This example demonstrates how to use the maxSize property in the rspeedy configuration. It sets up a chunk splitting strategy with a maximum chunk size of 50000 bytes using the defineConfig function from @lynx-js/rspeedy.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/api/rspeedy/rspeedy.chunksplitbysize.maxsize.md#2025-04-17_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineConfig } from '@lynx-js/rspeedy'\n\nexport default defineConfig({\n  performance: {\n    chunkSplit: {\n      strategy: 'split-by-size',\n      maxSize: 50000,\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Response Headers in @lynx-js/rspeedy\nDESCRIPTION: Example of how to configure custom headers for all responses using the defineConfig function from @lynx-js/rspeedy. This example sets the Access-Control-Allow-Origin header to allow requests from any origin.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/api/rspeedy/rspeedy.server.headers.md#2025-04-17_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineConfig } from '@lynx-js/rspeedy'\nexport default defineConfig({\n  server: {\n    headers: {\n      'Access-Control-Allow-Origin': '**',\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Background Only Module Example\nDESCRIPTION: Example of a module marked as background-only using import directive\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/react/thinking-in-reactlynx.mdx#2025-04-17_snippet_3\n\nLANGUAGE: js\nCODE:\n```\nimport 'background-only';\n\nexport const env = NativeModules.env;\nconsole.log('Directive marked module is background only');\n```\n\n----------------------------------------\n\nTITLE: Formal Border Style CSS Syntax Definition\nDESCRIPTION: Defines the formal syntax for border-style property, showing the line-style options and indicating that 1-4 values can be specified.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/css/properties/border-style.mdx#2025-04-17_snippet_1\n\nLANGUAGE: css\nCODE:\n```\nborder-style = [ <line-style> ]{1,4}\n<line-style> = none | hidden | dotted | dashed | solid | double | groove | ridge | inset | outset\n```\n\n----------------------------------------\n\nTITLE: Defining Entry Point Type in TypeScript\nDESCRIPTION: TypeScript type definition for the entry property in RSpeedy configuration, showing it accepts either an Entry type or undefined.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/api/rspeedy/rspeedy.source.entry.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nentry?: Entry | undefined;\n```\n\n----------------------------------------\n\nTITLE: Modifying Transform Properties with setNativeProps in JSX\nDESCRIPTION: This example shows how to use setNativeProps to change the transform property of a text node when its parent view is tapped.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/api/lynx-api/nodes-ref/nodes-ref-set-native-props.mdx#2025-04-17_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nfunction App() {\n  return (\n    <view\n      bindtap={() => {\n        lynx\n          .createSelectorQuery()\n          .select('#intro')\n          .setNativeProps({\n            transform: 'translateY(3px)',\n          })\n          .exec();\n      }}\n    >\n      <text id=\"intro\">Hello, World!</text>\n    </view>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Word-Break Formal CSS Syntax\nDESCRIPTION: The formal syntax definition for the word-break CSS property, showing all possible values it can accept: normal, break-all, or keep-all.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/css/properties/word-break.mdx#2025-04-17_snippet_1\n\nLANGUAGE: css\nCODE:\n```\nnormal | break-all | keep-all\n```\n\n----------------------------------------\n\nTITLE: Defining importLoaders Property in TypeScript\nDESCRIPTION: The importLoaders property is defined as an optional property that can take values 0, 1, 2, or undefined. It configures the number of loaders to be applied to @imported resources and CSS module imports before css-loader.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/api/rspeedy/rspeedy.cssloader.importloaders.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimportLoaders?: 0 | 1 | 2 | undefined;\n```\n\n----------------------------------------\n\nTITLE: Using createRspeedy to Build a Project\nDESCRIPTION: Example demonstrating how to import and use createRspeedy to create a Rspeedy instance and initiate a build process. The function is called with an empty options object and the returned instance is used to build the project.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/api/rspeedy/rspeedy.createrspeedy.md#2025-04-17_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createRspeedy } from '@lynx-js/rspeedy'\n\nvoid async function () {\n  const rspeedy = await createRspeedy({})\n  await rspeedy.build()\n}()\n```\n\n----------------------------------------\n\nTITLE: Source Code Before Transformation\nDESCRIPTION: Example of source code before the transformImport option is applied, showing a simple import of the Button component from the 'foo' library.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/api/rspeedy/rspeedy.source.transformimport.md#2025-04-17_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Button } from 'foo'\n```\n\n----------------------------------------\n\nTITLE: Configuring Bundle Filename with Limited Content Hash in JavaScript\nDESCRIPTION: Example of using the defineConfig function from @lynx-js/rspeedy to set the bundle filename with a content hash limited to 8 characters. This configuration uses the [name] and [contenthash:8] placeholders.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/api/rspeedy/rspeedy.filename.bundle.md#2025-04-17_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineConfig } from '@lynx-js/rspeedy'\n\nexport default defineConfig({\n  output: {\n    filename: {\n      bundle: '[name].[contenthash:8].bundle',\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Rsbuild for Lynx Integration\nDESCRIPTION: Rsbuild configuration setup with React plugin and public directory configuration for serving Lynx artifacts.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/guide/start/fragments/web/integrating-lynx-with-web.mdx#2025-04-17_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineConfig } from '@rsbuild/core';\nimport { pluginReact } from '@rsbuild/plugin-react';\nimport path from 'node:path';\nimport { fileURLToPath } from 'node:url';\nconst __filename = fileURLToPath(import.meta.url);\nconst __dirname = path.dirname(__filename);\n\nexport default defineConfig({\n  plugins: [pluginReact()],\n  server: {\n    publicDir: [\n      {\n        name: path.join(\n          __dirname,\n          '../',\n          // Please replace this with your actual Lynx project name\n          'lynx-project',\n          'dist',\n        ),\n      },\n    ],\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Defining enableICU Property in PluginReactLynxOptions Interface (TypeScript)\nDESCRIPTION: TypeScript signature for the enableICU property which is an optional boolean that enables the Intl API globally. The documentation warns about compatibility concerns with the Lynx Share Context feature.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/api/rspeedy/react-rsbuild-plugin.pluginreactlynxoptions.enableicu.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nenableICU?: boolean;\n```\n\n----------------------------------------\n\nTITLE: React Component with CommonJS Imports\nDESCRIPTION: Shows how to use CommonJS require() within a React component, demonstrating dynamic module loading and component lifecycle methods.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/guide/scripting-runtime/index.mdx#2025-04-17_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nconst { Component } = require('@lynx-js/react');\n\nexport default App extends Component {\n  constructor(props) {\n    super(props);\n    const common = require('./common.js');\n    common.hello('world');\n  }\n  componentDidMount() {\n    const common = require('./common.js');\n    common.goodbye('world');\n  }\n  render() {\n    return <view><text>Hello, world!</text></view>;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: __SetCSSId Function Syntax Definition in Lynx Framework (JSX)\nDESCRIPTION: This code snippet defines the syntax for the __SetCSSId function, which takes an Element object and a numeric CSS ID as parameters. The function assigns the specified CSS ID to the given element and returns void.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/api/engine/element-api/__SetCSSId.mdx#2025-04-17_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n__SetCSSId(element: Element, number: cssID) : void;\n```\n\n----------------------------------------\n\nTITLE: Defining getSnapshotBeforeUpdate Method in React TypeScript\nDESCRIPTION: Optional method that runs before React applies render results to the DOM. It returns an object to be passed to componentDidUpdate. Useful for preserving information like scroll position before rendering causes changes.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/api/react/Class.PureComponent.mdx#2025-04-17_snippet_4\n\nLANGUAGE: TypeScript\nCODE:\n```\noptional getSnapshotBeforeUpdate(prevProps: Readonly<P>, prevState: Readonly<S>): null | SS\n```\n\n----------------------------------------\n\nTITLE: Defining TypeScript Interface Property for DCE Configuration\nDESCRIPTION: TypeScript type definition for the defineDCE property which accepts a partial configuration object for dead code elimination visitor settings. This configuration is applied during transform time rather than bundling.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/rspeedy/react-rsbuild-plugin.pluginreactlynxoptions.definedce.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ndefineDCE?: Partial<DefineDceVisitorConfig> | undefined;\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Valid CSS <time> Values\nDESCRIPTION: Examples of valid time values in CSS, showing various formats including positive and negative integers, decimals, and different unit cases.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/api/css/data-type/time.mdx#2025-04-17_snippet_0\n\nLANGUAGE: css\nCODE:\n```\n12s         正整数\n-456ms      负整数\n4.3ms       非整数\n14mS        单位大小写不敏感，虽然不推荐大写\n+0s         0以及前置 + 号和单位\n-0ms        0以及前置 - 号和单位\n```\n\n----------------------------------------\n\nTITLE: Defining PerformanceMetric Properties in TypeScript\nDESCRIPTION: Defines the properties of the PerformanceMetric type, including name, duration, and timestamp-related fields. Each property is typed and includes a brief explanation of its purpose and format.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/api/lynx-api/performance-api/performance-metric.mdx#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nname: string;\n```\n\nLANGUAGE: typescript\nCODE:\n```\nduration: number;\n```\n\nLANGUAGE: typescript\nCODE:\n```\nstartTimestampName: string;\n```\n\nLANGUAGE: typescript\nCODE:\n```\nstartTimestamp: number;\n```\n\nLANGUAGE: typescript\nCODE:\n```\nendTimestampName: string;\n```\n\nLANGUAGE: typescript\nCODE:\n```\nendTimestamp: number;\n```\n\n----------------------------------------\n\nTITLE: Using useDebugValue Hook in React TypeScript\nDESCRIPTION: TypeScript function signature for React's useDebugValue hook, which displays a label for custom hooks in React DevTools. The function accepts a value of generic type T and an optional format function that transforms the displayed value.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/api/react/Function.useDebugValue.mdx#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction useDebugValue<T>(value: T, format?: (value: T) => any): void\n```\n\n----------------------------------------\n\nTITLE: Creating an IntersectionObserver with Parameters in TypeScript\nDESCRIPTION: The syntax definition for the createIntersectionObserver method, showing the function signature with component parameter and optional configuration object that controls observer behavior.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/api/lynx-api/lynx/lynx-create-intersection-observer.mdx#2025-04-17_snippet_0\n\nLANGUAGE: ts\nCODE:\n```\nlynx.createIntersectionObserver(\n  component: BaseInstance,\n  options ? options : {\n    thresholds : [0],\n    initialRatio : 0,\n    observeAll : false,\n  }\n): IntersectionObserver;\n```\n\n----------------------------------------\n\nTITLE: createElement Universal Signature in TypeScript\nDESCRIPTION: This is the most generic overload of createElement that can handle string elements, function components, or class components. It accepts a type, props, and optional children nodes.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/api/react/Function.createElement.mdx#2025-04-17_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nfunction createElement<P>(\n   type: string | FunctionComponent<P> | ComponentClass<P, any>,\n   props?: null | Attributes & P, ...\nchildren?: ReactNode[]): ReactElement<P>\n```\n\n----------------------------------------\n\nTITLE: Configuring Bundle Filename with Content Hash in JavaScript\nDESCRIPTION: Example of using the defineConfig function from @lynx-js/rspeedy to set the bundle filename with a content hash. This configuration uses the [name] and [contenthash] placeholders.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/api/rspeedy/rspeedy.filename.bundle.md#2025-04-17_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineConfig } from '@lynx-js/rspeedy'\n\nexport default defineConfig({\n  output: {\n    filename: {\n      bundle: '[name].[contenthash].bundle',\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Disabling Compressed Size Output in Rspeedy Configuration\nDESCRIPTION: Example of how to disable the gzipped size output by setting the compressed property to false in the printFileSize configuration.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/api/rspeedy/rspeedy.performance.printfilesize.md#2025-04-17_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineConfig } from '@lynx-js/rspeedy'\n\nexport default defineConfig({\n  performance: {\n    printFileSize: {\n      compressed: false,\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Rendering Templates in LynxView\nDESCRIPTION: Demonstrates how to render a template bundle in LynxView using the renderTemplateUrl method. The code shows implementation in both Java and Kotlin.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/guide/start/fragments/android/integrating-lynx-with-existing-app-android.mdx#2025-04-17_snippet_11\n\nLANGUAGE: java\nCODE:\n```\npublic class MainActivity extends Activity {\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        LynxView lynxView = buildLynxView();\n        setContentView(lynxView);\n\n        String url = \"main.lynx.bundle\";\n        lynxView.renderTemplateUrl(url, \"\");\n    }\n}\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MainActivity : Activity() {\n\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        val lynxView = buildLynxView()\n        setContentView(lynxView)\n\n        val uri = \"main.lynx.bundle\";\n        lynxView.renderTemplateUrl(uri, \"\")\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Formal CSS Syntax for border-top-left-radius\nDESCRIPTION: The formal syntax definition for the border-top-left-radius property, showing it accepts one or two length-percentage values that must be greater than or equal to zero.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/css/properties/border-top-left-radius.mdx#2025-04-17_snippet_1\n\nLANGUAGE: css\nCODE:\n```\nborder-top-left-radius =\n  <length-percentage [0,∞]>{1,2}\n\n<length-percentage> =\n  <length>      |\n  <percentage>\n```\n\n----------------------------------------\n\nTITLE: Defining Output Property in Config Interface - TypeScript\nDESCRIPTION: This code snippet shows the type signature of the 'output' property in the Config interface. It is an optional property that can be of type Output or undefined, used to specify how and where bundles and assets should be output.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/api/rspeedy/rspeedy.config.output.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\noutput?: Output | undefined;\n```\n\n----------------------------------------\n\nTITLE: Defining parseChangesStart property in FrameworkPipelineTiming interface\nDESCRIPTION: Declares the timestamp property marking when the framework starts deserializing change information on the main thread, stored as a floating-point Unix timestamp in milliseconds.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/lynx-api/performance-api/framework-pipeline-timing.mdx#2025-04-17_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nparseChangesStart: number;\n```\n\n----------------------------------------\n\nTITLE: Defining CssExtractRspackPluginOptions Interface in TypeScript\nDESCRIPTION: TypeScript interface definition for the CssExtractRspackPlugin configuration options. Contains optional boolean properties for ignoreOrder and pathinfo settings.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/rspeedy/rspeedy.cssextractrspackpluginoptions.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface CssExtractRspackPluginOptions\n```\n\n----------------------------------------\n\nTITLE: Example JSX Code for CodeFold Component\nDESCRIPTION: A JSX code example that demonstrates a Lynx component rendering with styling and transformations. This example is intended for display within a CodeFold component.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/internal/docs-contribution-guide/doc-components.mdx#2025-04-17_snippet_9\n\nLANGUAGE: jsx\nCODE:\n```\n/** example code: 左侧代码， 设置 height， 不开启折叠 */\n\nexport default function App() {\n  return (\n    <view\n      style={{\n        flexDirection: 'column',\n        background: 'linear-gradient(rgb(255,53,26), rgb(0,235,235))',\n        marginTop: '50%',\n        transform: 'translate(-50%, -50%)',\n        marginLeft: '50%',\n        width: '150px',\n        height: '150px',\n        clipPath: 'inset(30px super-ellipse 3 3 50px/50px)',\n      }}\n    ></view>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Using Port Placeholder in Dev.assetPrefix for Dynamic Port Handling\nDESCRIPTION: Example showing how to use the <port> placeholder in dev.assetPrefix to handle dynamic port assignment, ensuring the asset prefix remains valid even if the port changes.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/api/rspeedy/rspeedy.dev.assetprefix.md#2025-04-17_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineConfig } from '@lynx-js/rspeedy'\nexport default defineConfig({\n  dev: {\n    assetPrefix: 'https://example.com:<port>/assets/',\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Disabling Filename Hash in rspeedy Configuration\nDESCRIPTION: Example showing how to disable the filename hash feature in @lynx-js/rspeedy configuration. This prevents hash values from being added to filenames after production builds.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/api/rspeedy/rspeedy.output.filenamehash.md#2025-04-17_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineConfig } from '@lynx-js/rspeedy'\n\nexport default defineConfig({\n  output: {\n    filenameHash: false,\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Defining extractStr Property in PluginReactLynxOptions Interface\nDESCRIPTION: TypeScript signature for the extractStr property that can accept either a boolean value or a partial configuration object. When set to false, the string extraction feature is disabled.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/api/rspeedy/react-rsbuild-plugin.pluginreactlynxoptions.extractstr.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nextractStr?: Partial<ExtractStrConfig> | boolean;\n```\n\n----------------------------------------\n\nTITLE: Defining createIntersectionObserver Method Type Signature in TypeScript\nDESCRIPTION: The type definition for the lynx.createIntersectionObserver method, showing its parameters and return type. It accepts a component instance and optional configuration options.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/lynx-api/lynx/lynx-create-intersection-observer.mdx#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nlynx.createIntersectionObserver(\n   component: BaseInstance,\n   options ? options : {\n     thresholds : [0],\n     initialRatio: 0,\n     observeAll : false,\n   }\n): IntersectionObserver;\n```\n\n----------------------------------------\n\nTITLE: Defining PluginQRCodeOptions Interface in TypeScript\nDESCRIPTION: TypeScript interface definition for PluginQRCodeOptions that can be used to configure the pluginQRCode() function. It includes an optional schema property that accepts a CustomizedSchemaFn or undefined to customize the generated schema.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/api/rspeedy/qrcode-rsbuild-plugin.pluginqrcodeoptions.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface PluginQRCodeOptions \n```\n\n----------------------------------------\n\nTITLE: Defining Options Parameter Type for IntersectionObserver in TypeScript\nDESCRIPTION: The type definition for the options parameter in createIntersectionObserver method. It includes configurable properties like thresholds, initialRatio, and observeAll with their default values.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/lynx-api/lynx/lynx-create-intersection-observer.mdx#2025-04-17_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\noptions\n  ? options\n  : {\n      thresholds: [0],\n      initialRatio: 0,\n      observeAll: false,\n    };\n```\n\n----------------------------------------\n\nTITLE: Importing and Rendering RequestAnimationFrame Component in React\nDESCRIPTION: This snippet imports a RequestAnimationFrame component from the lynx library and renders it. The RAF component is likely responsible for managing animation frame requests in a React application context.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/lynx-api/main-thread/lynx-request-animation-frame.mdx#2025-04-17_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport RAF from '../lynx/lynx-request-animation-frame';\n\n<RAF />\n```\n\n----------------------------------------\n\nTITLE: Loading Remote Resources with requireModuleAsync in TSX\nDESCRIPTION: This example demonstrates how to use requireModuleAsync to load a remote module. It handles potential errors and uses the exported module if successful.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/api/lynx-api/lynx/lynx-require-module-async.mdx#2025-04-17_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nlynx.requireModuleAsync('https://example.com/path/to/chunk', (err, exports) => {\n  if (err) {\n    return;\n  }\n  // use exports\n});\n```\n\n----------------------------------------\n\nTITLE: Defining exportGlobals Property in CssModules Interface (TypeScript)\nDESCRIPTION: This code snippet shows the TypeScript signature for the exportGlobals property. It is an optional boolean property that allows exporting names from global class names for use via import.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/api/rspeedy/rspeedy.cssmodules.exportglobals.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexportGlobals?: boolean | undefined;\n```\n\n----------------------------------------\n\nTITLE: Import Lynx Components\nDESCRIPTION: Importing utility components and decorators from the Lynx framework for handling platform-specific functionality and documentation.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/guide/ui/scrolling.mdx#2025-04-17_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { AndroidOnly, IOSOnly, KnownBug, Required, Go, Details } from '@lynx';\n```\n\n----------------------------------------\n\nTITLE: Configuring RSpeedy to Inline All Assets\nDESCRIPTION: Example configuration that sets the dataUriLimit to the maximum safe integer value in JavaScript, causing all static assets to be inlined regardless of their size.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/api/rspeedy/rspeedy.output.dataurilimit.md#2025-04-17_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineConfig } from '@lynx-js/rspeedy'\nexport default defineConfig({\n  output: {\n    dataUriLimit: Number.MAX_SAFE_INTEGER,\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Defining Margins Parameter Type for relativeTo() Method in TypeScript\nDESCRIPTION: This snippet defines the type of the 'margins' parameter for the relativeTo() method. It specifies an optional object with left, right, top, and bottom properties.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/api/lynx-api/intersection-observer/intersection-observer-relative-to.mdx#2025-04-17_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nmargins ? margins : { left: 0, right: 0, top: 0, bottom: 0 };\n```\n\n----------------------------------------\n\nTITLE: Defining setNativeProps Method Signature in TypeScript\nDESCRIPTION: This snippet shows the TypeScript signature for the setNativeProps method, which takes a Record of string keys and any values as its parameter and returns a SelectorQuery object.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/api/lynx-api/nodes-ref/nodes-ref-set-native-props.mdx#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nsetNativeProps(nativeProps: Record<string, any>): SelectorQuery;\n```\n\n----------------------------------------\n\nTITLE: Formal Syntax Definition for Height Property in CSS\nDESCRIPTION: The formal syntax definition for the height CSS property, showing the acceptable value formats including auto, length-percentage, max-content, and fit-content values.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/api/css/properties/height.mdx#2025-04-17_snippet_1\n\nLANGUAGE: css\nCODE:\n```\nheight =\n  auto                                      |\n  <length-percentage [0,∞]>                 |\n  max-content                               |\n  fit-content( <length-percentage [0,∞]> )\n\n<length-percentage> =\n  <length>      |\n  <percentage>\n```\n\n----------------------------------------\n\nTITLE: Optimizing Swiper with Main Thread Scripting in TypeScript React\nDESCRIPTION: Converts touch handling and style updating functions to main thread scripts for improved performance and responsiveness.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/guide/start/tutorial-product-detail.mdx#2025-04-17_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nfunction useOffset() {\n  const touchStartXRef = useMainThreadRef<number>(0);\n\n  function handleTouchStart(e: TouchEvent) {\n    'main thread'\n    ...\n  }\n\n  function handleTouchMove(e: TouchEvent) {\n    'main thread'\n    ...\n  }\n\n}\n```\n\nLANGUAGE: tsx\nCODE:\n```\n<view\n  main-thread:bindtouchstart={handleTouchStart}\n  main-thread:bindtouchmove={handleTouchMove}\n>\n  {/* ... */}\n</view>\n```\n\nLANGUAGE: tsx\nCODE:\n```\nfunction useUpdateSwiperStyle() {\n  const swiperContainerRef = useMainThreadRef<MainThread.Element>(null);\n\n  function updateSwiperStyle(offset: number) {\n   'main thread'\n    swiperContainerRef.current?.setStyleProperties({\n      transform: `translateX(${offset}px)`,\n    });\n  }\n\n  return {\n    swiperContainerRef,\n  }\n}\n```\n\nLANGUAGE: tsx\nCODE:\n```\n<view main-thread:ref={swiperContainerRef}>{/* ... */}</view>\n```\n\n----------------------------------------\n\nTITLE: Using define for Environment Variables in JavaScript\nDESCRIPTION: Example of using the 'define' property to set environment variables in a Lynx Rspeedy configuration. It demonstrates how to define BUILD_VERSION and NODE_ENV.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/api/rspeedy/rspeedy.source.define.md#2025-04-17_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineConfig } from '@lynx-js/rspeedy'\nexport default defineConfig({\n  source: {\n    define: {\n      BUILD_VERSION: JSON.stringify(process.env.BUILD_VERSION ?? 'unknown_version'),\n      'process.env.NODE_ENV': JSON.stringify(process.env.NODE_ENV),\n    },\n  },\n})\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconst version = BUILD_VERSION;\nif (process.env.NODE_ENV === 'development') {}\n\n// ⬇️ Turn into being...\nconst version = \"unknown_version\";\nif (\"development\" === 'development') {}\n```\n\n----------------------------------------\n\nTITLE: DayJS Version Control Alias\nDESCRIPTION: Example demonstrating how to force a specific version of dayjs package through aliasing, with a warning about potential version mismatch issues.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/rspeedy/rspeedy.source.alias.md#2025-04-17_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineConfig } from '@lynx-js/rspeedy'\nimport { createRequire } from 'module'\nconst require = createRequire(import.meta.url)\nexport default defineConfig({\n  source: {\n    alias: {\n      dayjs: require.resolve('dayjs'),\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Installing Bikeshed for Lynx Living Specification in Bash\nDESCRIPTION: Commands to install Bikeshed using pipx, which is required for generating the Lynx Living Specification documentation. First installs pipx via Homebrew, then uses pipx to install Bikeshed.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/packages/lynx-living-spec/README.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nbrew install pipx\npipx install bikeshed\n```\n\n----------------------------------------\n\nTITLE: Removing Specific Console Methods Configuration Example\nDESCRIPTION: Example showing how to configure RSpeedy to remove only specific console methods (log and warn) in production build by providing an array of method names.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/api/rspeedy/rspeedy.performance.removeconsole.md#2025-04-17_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineConfig } from '@lynx-js/rspeedy'\n\nexport default defineConfig({\n  performance: {\n    removeConsole: ['log', 'warn']\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Defining printFileSize Property in TypeScript\nDESCRIPTION: The TypeScript signature for the printFileSize property in the Performance object. It can be of type PerformanceConfig['printFileSize'] or undefined.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/api/rspeedy/rspeedy.performance.printfilesize.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nprintFileSize?: PerformanceConfig['printFileSize'] | undefined;\n```\n\n----------------------------------------\n\nTITLE: Formal syntax for border-right-width in CSS\nDESCRIPTION: The formal syntax definition for the border-right-width property, showing the allowed values and structure. It includes the <line-width> definition.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/css/properties/border-right-width.mdx#2025-04-17_snippet_1\n\nLANGUAGE: css\nCODE:\n```\nborder-right-width =\n  <line-width>\n\n<line-width> =\n  <length [0,∞]>  |\n  thin            |\n  medium          |\n  thick\n```\n\n----------------------------------------\n\nTITLE: Defining pluginReactLynx Function in TypeScript\nDESCRIPTION: This snippet defines the pluginReactLynx function, which creates an Rsbuild plugin for ReactLynx. It accepts an optional parameter of type PluginReactLynxOptions and returns an RsbuildPlugin.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/api/rspeedy/react-rsbuild-plugin.pluginreactlynx.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare function pluginReactLynx(userOptions?: PluginReactLynxOptions): RsbuildPlugin;\n```\n\n----------------------------------------\n\nTITLE: Defining entryType Property in TypeScript\nDESCRIPTION: Defines the entryType property which always returns 'init' as a string value.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/lynx-api/performance-api/performance-entry/init-container-entry.mdx#2025-04-17_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nentryType: string;\n```\n\n----------------------------------------\n\nTITLE: Defining ExposedAPI.logger Property in TypeScript\nDESCRIPTION: This code snippet defines the logger property of the ExposedAPI interface. It is of type 'typeof logger', allowing access to the Rspeedy logger.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/rspeedy/rspeedy.exposedapi.logger.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nlogger: typeof logger;\n```\n\n----------------------------------------\n\nTITLE: Generating Render Instructions with Event Binding in JSX\nDESCRIPTION: Demonstrates how the frontend framework can generate render instructions with event binding using JSX syntax. This example binds a 'tap' event to an 'onTap' function on a view element.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/engine/element-api/__SetEvents.mdx#2025-04-17_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<view src=\"xxx\" bindtap=\"onTap\" />\n```\n\n----------------------------------------\n\nTITLE: Styling Full-Width Images in CSS\nDESCRIPTION: This CSS snippet defines styles for full-width images with a class of 'full_image'. It sets the width to 800px and adds a margin of 20px.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/guide/debugging/lynx-devtool/layers-panel.mdx#2025-04-17_snippet_0\n\nLANGUAGE: CSS\nCODE:\n```\n.full_image {\n    width: 800px;\n    margin: 20px;\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling Asset Inlining in RSpeedy\nDESCRIPTION: Example configuration that sets the dataUriLimit to 0, effectively disabling the inlining of all static assets so they will always be loaded as separate files.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/api/rspeedy/rspeedy.output.dataurilimit.md#2025-04-17_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineConfig } from '@lynx-js/rspeedy'\nexport default defineConfig({\n  output: {\n    dataUriLimit: 0,\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Defining SVG Filename Pattern in TypeScript\nDESCRIPTION: Optional property definition for configuring SVG filename patterns with content hashing. The default pattern is '[name].[contenthash:8].svg' which includes the original name and an 8-character content hash.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/rspeedy/rspeedy.filename.svg.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nsvg?: string | undefined;\n```\n\n----------------------------------------\n\nTITLE: Defining Performance.removeConsole Property in TypeScript\nDESCRIPTION: Signature definition for the removeConsole property which can be set to remove console methods in production builds. It accepts a boolean or an array of ConsoleType values.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/api/rspeedy/rspeedy.performance.removeconsole.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nremoveConsole?: boolean | ConsoleType[] | undefined;\n```\n\n----------------------------------------\n\nTITLE: Copying Files to Specific Dist Subdirectory\nDESCRIPTION: Example configuration showing how to copy files from ./src/assets to a specific subdirectory within ./dist.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/api/rspeedy/rspeedy.output.copy.md#2025-04-17_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineConfig } from '@lynx-js/rspeedy'\n\nexport default defineConfig({\n  output: {\n    copy: [\n      // `./src/assets/image.png` -> `./dist/assets/image.png`\n      { from: './src/assets', to: 'assets' },\n    ],\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: CSS align-self Property Syntax\nDESCRIPTION: Shows the basic syntax options for the align-self property, including basic keywords, positioning alignment, and baseline alignment options.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/api/css/properties/align-self.mdx#2025-04-17_snippet_0\n\nLANGUAGE: css\nCODE:\n```\n/* 基本关键字 */\nalign-self: stretch;\nalign-self: auto;\n\n/* 定位对齐 */\nalign-self: center;\nalign-self: start;\nalign-self: end;\nalign-self: flex-start;\nalign-self: flex-end;\n\n/* 基线对齐 */\nalign-self: baseline;\n```\n\n----------------------------------------\n\nTITLE: Defining SourceMap Property Type in TypeScript\nDESCRIPTION: Type definition for the sourceMap property which can accept a boolean value, a SourceMap configuration object, or be undefined. This property controls source map generation behavior for build outputs.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/api/rspeedy/rspeedy.output.sourcemap.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nsourceMap?: boolean | SourceMap | undefined;\n```\n\n----------------------------------------\n\nTITLE: Basic Border Style CSS Syntax\nDESCRIPTION: Shows the basic syntax for setting border styles using shorthand notation that allows defining styles for all four borders (top, right, bottom, left) in order.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/css/properties/border-style.mdx#2025-04-17_snippet_0\n\nLANGUAGE: css\nCODE:\n```\nborder-style: double solid dotted dashed;\n```\n\n----------------------------------------\n\nTITLE: Defining DistPath.jsAsync Type in TypeScript\nDESCRIPTION: Type definition for the jsAsync property that specifies the output directory path for asynchronously loaded JavaScript files. When undefined, defaults to the 'async' subdirectory under the main JS output directory.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/api/rspeedy/rspeedy.distpath.jsasync.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\njsAsync?: string | undefined;\n```\n\n----------------------------------------\n\nTITLE: Declaring and Using CSS Variables in CSS\nDESCRIPTION: Shows how to declare CSS variables globally and in specific selectors, and how to use them with the var() function.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/api/css/properties/css-variable.mdx#2025-04-17_snippet_1\n\nLANGUAGE: css\nCODE:\n```\n:root {\n  --main-bg-color: yellow;\n}\n\n.two {\n  --main-height: 200px;\n  color: white;\n  background-color: black;\n  width: 100%;\n  height: 100%;\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving OS Version on iOS in Objective-C\nDESCRIPTION: Shows how to get the operating system version on iOS devices using Objective-C. This code snippet uses the UIDevice class to access the system version.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/lynx-api/global/system-info.mdx#2025-04-17_snippet_1\n\nLANGUAGE: objc\nCODE:\n```\n[[UIDevice currentDevice].systemVersion UTF8String]\n```\n\n----------------------------------------\n\nTITLE: Configuring Named Multiple Entries\nDESCRIPTION: Example showing how to configure RSpeedy with named multiple entries, including support for multiple modules per entry.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/api/rspeedy/rspeedy.source.entry.md#2025-04-17_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineConfig } from '@lynx-js/rspeedy'\nexport default defineConfig({\n  entry: {\n    foo: './src/pages/foo/index.js',\n    bar: ['./src/pages/bar/index.js', './src/post.js'], // multiple entry modules is allowed\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: React useContext Function Definition in TypeScript\nDESCRIPTION: TypeScript function signature for React's useContext hook. It accepts a context object created with React.createContext and returns the current context value from the nearest provider.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/api/react/Function.useContext.mdx#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction useContext<T>(context: Context<T>): T\n```\n\n----------------------------------------\n\nTITLE: Defining StopImmediatePropagation Method in TypeScript\nDESCRIPTION: Defines the 'stopImmediatePropagation' method of the Event class, which stops event bubbling and prevents other event handlers on the current node from being triggered.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/api/lynx-api/event/event.mdx#2025-04-17_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nstopImmediatePropagation(): void;\n```\n\n----------------------------------------\n\nTITLE: Defining ChunkSplitCustom.splitChunks Property in TypeScript\nDESCRIPTION: This snippet shows the TypeScript signature for the splitChunks property of the ChunkSplitCustom interface. It allows for custom Rspack chunk splitting configuration to be specified.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/api/rspeedy/rspeedy.chunksplitcustom.splitchunks.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nsplitChunks?: Rspack.Configuration extends {\n        optimization?: {\n            splitChunks?: infer P;\n        } | undefined;\n    } ? P : never;\n```\n\n----------------------------------------\n\nTITLE: Defining TypeScript Interface for CSS Inheritance List\nDESCRIPTION: TypeScript interface definition showing the type signature for the customCSSInheritanceList property, which accepts an optional array of strings or undefined.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/api/rspeedy/react-rsbuild-plugin.pluginreactlynxoptions.customcssinheritancelist.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ncustomCSSInheritanceList?: string[] | undefined;\n```\n\n----------------------------------------\n\nTITLE: Configuring Parallel Element Processing in React Rsbuild Plugin\nDESCRIPTION: TypeScript interface property definition for enabling threaded element resolution in the React Rsbuild plugin. This boolean flag controls whether parallel element processing is active.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/rspeedy/react-rsbuild-plugin.pluginreactlynxoptions.enableparallelelement.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nenableParallelElement?: boolean;\n```\n\n----------------------------------------\n\nTITLE: Configuring RSpeedy to Inline Assets Below 4kB\nDESCRIPTION: Example configuration that sets the dataUriLimit to 4kB, causing all static assets smaller than this size to be inlined in the output rather than loaded as separate files.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/api/rspeedy/rspeedy.output.dataurilimit.md#2025-04-17_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineConfig } from '@lynx-js/rspeedy'\nexport default defineConfig({\n  output: {\n    dataUriLimit: 4 * 1024,\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Formal syntax for border-left CSS property\nDESCRIPTION: The formal syntax definition for the border-left property, showing it accepts line-width, line-style, and color values in sequence.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/css/properties/border-left.mdx#2025-04-17_snippet_1\n\nLANGUAGE: css\nCODE:\n```\nborder-left = <line-width> <line-style> <color>\n```\n\n----------------------------------------\n\nTITLE: Defining ChunkSplit Interface in TypeScript\nDESCRIPTION: This code snippet defines the ChunkSplit interface with two optional properties: override and strategy. The override property allows for custom Rspack chunk splitting configuration, while the strategy property specifies the chunk splitting strategy.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/rspeedy/rspeedy.chunksplit.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface ChunkSplit \n{\n  override?: Rspack.Configuration extends { optimization?: { splitChunks?: infer P; } | undefined; } ? P : never;\n  strategy?: 'all-in-one' | 'split-by-module' | 'split-by-experience' | 'single-vendor' | undefined;\n}\n```\n\n----------------------------------------\n\nTITLE: UNSAFE_componentWillUpdate Deprecated Method\nDESCRIPTION: Deprecated lifecycle method called before rendering on updates. Replaced by getSnapshotBeforeUpdate in modern React.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/react/Class.PureComponent.mdx#2025-04-17_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\noptional UNSAFE_componentWillUpdate(nextProps: Readonly<P>, nextState: Readonly<S>, nextContext: any): void\n```\n\n----------------------------------------\n\nTITLE: Defining WebSocket Transport Property in TypeScript\nDESCRIPTION: Type definition for the websocketTransport property that specifies the path to websocket implementation. By default, it resolves to @lynx-js/websocket using require.resolve.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/rspeedy/rspeedy.devclient.websockettransport.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nwebsocketTransport?: string | undefined;\n```\n\n----------------------------------------\n\nTITLE: Property Definition Component Reference\nDESCRIPTION: JSX code showing how to use the PropertyDefinition component to display formal definition information for the box-sizing property.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/css/properties/box-sizing.mdx#2025-04-17_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n<PropertyDefinition\n  initialValue={\n    <>\n      <code>border-box</code>\n    </>\n  }\n  appliesTo={<>all elements</>}\n  inherited=\"no\"\n  animatable=\"no\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Port in JavaScript\nDESCRIPTION: Example of setting a custom port for the Rspeedy Server using the defineConfig function. This snippet demonstrates how to override the default port setting.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/api/rspeedy/rspeedy.server.port.md#2025-04-17_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineConfig } from '@lynx-js/rspeedy'\nexport default defineConfig({\n  server: {\n    port: 3470,\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Function Signature for mergeRspeedyConfig in TypeScript\nDESCRIPTION: TypeScript function signature showing the type definition for mergeRspeedyConfig function that accepts variable number of Config objects and returns a merged Config object.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/api/rspeedy/rspeedy.mergerspeedyconfig.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare function mergeRspeedyConfig(...configs: Config[]): Config;\n```\n\n----------------------------------------\n\nTITLE: Defining EntryDescription Interface in TypeScript\nDESCRIPTION: TypeScript interface declaration for EntryDescription, which defines the structure for specifying entry configurations in Lynx projects. It supports optional properties for imports and public paths.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/api/rspeedy/rspeedy.entrydescription.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface EntryDescription \n```\n\n----------------------------------------\n\nTITLE: Retrieving Pixel Width on Android in Java\nDESCRIPTION: Demonstrates how to get the pixel width of the screen on Android devices using Java. It uses the DisplayMetrics class to access the screen's width in pixels.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/lynx-api/global/system-info.mdx#2025-04-17_snippet_6\n\nLANGUAGE: java\nCODE:\n```\nDisplayMetrics dm = context.getResources().getDisplayMetrics();\nint pixelWidth = dm.widthPixels;\n```\n\n----------------------------------------\n\nTITLE: Declaring a Main Thread Function in TypeScript\nDESCRIPTION: Example of declaring a function as a main thread function using the 'main thread' directive. Main thread functions must include this directive as the first line in the function body.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/react/main-thread-script.mdx#2025-04-17_snippet_1\n\nLANGUAGE: ts\nCODE:\n```\nlet onScroll = (event) => {\n  'main thread';\n  // ...\n};\n```\n\n----------------------------------------\n\nTITLE: Disabling Both HMR and Live Reload in Rspeedy\nDESCRIPTION: JavaScript example demonstrating how to disable both Hot Module Replacement and live reload in the Rspeedy configuration.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/rspeedy/rspeedy.dev.hmr.md#2025-04-17_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineConfig } from '@lynx-js/rspeedy'\n\nexport default defineConfig({\n  dev: {\n    hmr: false,\n    liveReload: false,\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Defining TransformImport Property Type in TypeScript\nDESCRIPTION: TypeScript type definition for the camelToDashComponentName property which accepts boolean or undefined values.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/rspeedy/rspeedy.transformimport.cameltodashcomponentname.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ncamelToDashComponentName?: boolean | undefined;\n```\n\n----------------------------------------\n\nTITLE: Creating MainThreadRef with Nullable Type\nDESCRIPTION: Overloaded implementation that accepts null as a valid initial value. Returns a RefObject with the specified type.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/react/Function.useMainThreadRef.mdx#2025-04-17_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nfunction useMainThreadRef<T>(initValue: null | T): RefObject<T>\n```\n\n----------------------------------------\n\nTITLE: Defining Event Handlers for View Element\nDESCRIPTION: Shows how to define event handlers for touch events like touchstart and touchmove on the <view> element.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/api/elements/built-in/view.mdx#2025-04-17_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\ntouchstart: TouchEvent;\n\ntouchmove: TouchEvent;\n```\n\n----------------------------------------\n\nTITLE: Styling Elements with Attributes in Lynx\nDESCRIPTION: Example showing how to apply styling to a text element by using the style attribute to set the background color to red.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/guide/ui/elements-components.mdx#2025-04-17_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<text style=\"background:red;\">Hello Lynx</text>\n```\n\n----------------------------------------\n\nTITLE: Background Only Function After Compilation\nDESCRIPTION: Shows how the background-only function is transformed in the main thread build output, where the function body is removed.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/api/react/Document.directives.mdx#2025-04-17_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nfunction bgOnlyAction(pureCallback) {}\n```\n\n----------------------------------------\n\nTITLE: useReducer Implementation with Direct Initial State\nDESCRIPTION: TypeScript definition for useReducer that takes the initial state directly without an initializer function.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/api/react/Function.useReducer.mdx#2025-04-17_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nfunction useReducer<R>(\n   reducer: R,\n   initializerArg: ReducerStateWithoutAction<R>,\n   initializer?: undefined): [ReducerStateWithoutAction<R>, DispatchWithoutAction]\n```\n\n----------------------------------------\n\nTITLE: Querying Child Elements with querySelector() in TypeScript\nDESCRIPTION: Finds the first child element that matches the specified selector. Returns a MainThread.Element or null if no match is found.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/lynx-api/main-thread/main-thread-element.mdx#2025-04-17_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nconst element = element.querySelector(selector);\n```\n\n----------------------------------------\n\nTITLE: Implementing LocalMediaFetcher in Objective-C\nDESCRIPTION: Implementation of the LocalMediaFetcher that handles resource path conversion and local resource detection. It processes URLs starting with 'http://localhost' and redirects them to corresponding resources in the application bundle.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/elements/built-in/image.mdx#2025-04-17_snippet_7\n\nLANGUAGE: objective-c\nCODE:\n```\n/// Local resource handler implementation\n#import \"LocalMediaFetcher.h\"\n\n@implementation LocalMediaFetcher\n\n/**\n * Resource path conversion method\n * @param request Resource request object\n * @return Local file path or empty string\n */\n- (NSString *)shouldRedirectUrl:(LynxResourceRequest *)request {\n  NSURL *url = [NSURL URLWithString:request.url];\n  NSString *fileType = [url pathExtension];\n  NSString *fileName = [[url URLByDeletingPathExtension] lastPathComponent];\n  NSString *subdir = [[[url URLByDeletingLastPathComponent] absoluteString] stringByReplacingOccurrencesOfString:@\"http://localhost\" withString:@\"\"];\n  NSString *path = [[NSBundle mainBundle] pathForResource:fileName ofType:fileType inDirectory:subdir];\n  return path ? [NSString stringWithFormat:@\"file://%@\", path] : @\"\";\n}\n\n/**\n * Local resource detection method\n * @param url The original request URL\n * @return LynxResourceOptionalBoolTrue indicates the request needs redirection\n */\n- (LynxResourceOptionalBool)isLocalResource:(NSURL *)url {\n    return [url.absoluteString hasPrefix:@\"http://localhost\"] ?\n           LynxResourceOptionalBoolTrue :\n           LynxResourceOptionalBoolFalse;\n}\n\n@end\n```\n\n----------------------------------------\n\nTITLE: NodesRef fields() Method TypeScript Definition\nDESCRIPTION: TypeScript interface definition for the fields() method showing parameter types and return value. The method accepts a record of boolean flags for field selection and a callback function.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/lynx-api/nodes-ref/nodes-ref-fields.mdx#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfields(fields: Record<string, boolean>, callback: (data: object, status: object) => void): SelectorQuery;\n```\n\n----------------------------------------\n\nTITLE: Using mergeRspeedyConfig Function Example\nDESCRIPTION: Demonstrates how to use mergeRspeedyConfig to merge two configuration objects with conflicting dev.writeToDisk settings. Shows how later configs override earlier ones in the merge process.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/rspeedy/rspeedy.mergerspeedyconfig.md#2025-04-17_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { mergeRspeedyConfig } from '@lynx-js/rspeedy';\n\nconst config1 = {\n  dev: {\n    writeToDisk: false,\n  },\n};\nconst config2 = {\n  dev: {\n    writeToDisk: true,\n  },\n};\n\nconst mergedConfig = mergeRspeedyConfig(config1, config2);\n\nconsole.log(mergedConfig); // { dev: { writeToDisk: true } }\n```\n\n----------------------------------------\n\nTITLE: Initializing Rspeedy Configuration with TypeScript\nDESCRIPTION: Example of using defineConfig() in lynx.config.ts to get better TypeScript intellisense when configuring the Rspeedy package. This snippet demonstrates the basic pattern for setting up an entry point for a project.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/api/rspeedy/rspeedy.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineConfig } from '@lynx-js/rspeedy'\nexport default defineConfig({\n  entry: './src/index.tsx',\n})\n```\n\n----------------------------------------\n\nTITLE: Formal CSS Syntax for border-bottom-left-radius Property\nDESCRIPTION: The formal CSS syntax definition for the border-bottom-left-radius property, showing it accepts one or two length-percentage values, where length-percentage can be either a length or percentage value.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/css/properties/border-bottom-left-radius.mdx#2025-04-17_snippet_1\n\nLANGUAGE: css\nCODE:\n```\nborder-bottom-left-radius = <length-percentage>{1,2}\n<length-percentage> = <length> | <percentage>\n```\n\n----------------------------------------\n\nTITLE: Defining the Server.host property signature in TypeScript\nDESCRIPTION: TypeScript signature for the 'host' property which can be a string or undefined. This property specifies the host that the Rspeedy Server listens to.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/api/rspeedy/rspeedy.server.host.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nhost?: string | undefined;\n```\n\n----------------------------------------\n\nTITLE: Setting Border Bottom Style in CSS\nDESCRIPTION: Demonstrates how to set the bottom border style of an element using CSS. This property is used to specify the style of the bottom border separately from other borders.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/api/css/properties/border-bottom-style.mdx#2025-04-17_snippet_0\n\nLANGUAGE: css\nCODE:\n```\nborder-bottom-style: dashed;\n```\n\n----------------------------------------\n\nTITLE: Getting Error Message in Java\nDESCRIPTION: Method to retrieve all error information in JSON string format, including code, subcode, message, level, and fix suggestion.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/errors/lynx-error.mdx#2025-04-17_snippet_3\n\nLANGUAGE: java\nCODE:\n```\npublic boolean getMsg()\n```\n\n----------------------------------------\n\nTITLE: Configuring isolatedModules in tsconfig.json\nDESCRIPTION: Enables the isolatedModules compiler option in TypeScript configuration, which is required when using SWC for TypeScript compilation in Rspeedy.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/rspeedy/typescript.md#2025-04-17_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"compilerOptions\": {\n    \"isolatedModules\": true\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Server.headers TypeScript Signature\nDESCRIPTION: TypeScript signature for the headers property in the Server interface. It defines headers as an optional record of string keys with string or string array values.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/api/rspeedy/rspeedy.server.headers.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nheaders?: Record<string, string | string[]> | undefined;\n```\n\n----------------------------------------\n\nTITLE: Basic Overflow Property Syntax in CSS\nDESCRIPTION: Demonstrates the basic syntax for setting overflow property values in CSS, showing the two supported values: visible and hidden.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/api/css/properties/overflow.mdx#2025-04-17_snippet_0\n\nLANGUAGE: css\nCODE:\n```\noverflow: visible;\noverflow: hidden;\n```\n\n----------------------------------------\n\nTITLE: Registering DevTool Service in Android (Kotlin)\nDESCRIPTION: This code snippet shows how to register the DevTool service in an Android application using Kotlin.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/guide/start/integrate-lynx-devtool.mdx#2025-04-17_snippet_6\n\nLANGUAGE: kotlin\nCODE:\n```\nprivate fun initLynxService() {\n  // ...\n  // register DevTool service\n  LynxServiceCenter.inst().registerService(LynxDevToolService)\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Root Variable in TypeScript for ReactLynx\nDESCRIPTION: Declares a constant 'root' of type 'Root', which is the default and only root for rendering JSX in ReactLynx.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/api/react/Variable.root.mdx#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst root: Root;\n```\n\n----------------------------------------\n\nTITLE: Setting Individual Style Properties with setStyleProperty() in TypeScript\nDESCRIPTION: Sets a specific CSS style property on an element. The style name must be in kebab-case format.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/lynx-api/main-thread/main-thread-element.mdx#2025-04-17_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nelement.setStyleProperty(styleName, value);\n```\n\n----------------------------------------\n\nTITLE: Importing Go Component for Networking Example in JSX\nDESCRIPTION: Shows the import statement for the Go component used in the networking example. This component is likely used to display interactive code examples in the documentation.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/guide/interaction/networking.mdx#2025-04-17_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Go } from '@lynx';\n```\n\n----------------------------------------\n\nTITLE: Using createRspeedy Function in TypeScript\nDESCRIPTION: Example usage of the createRspeedy function to create a Rspeedy instance and call its build method.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/rspeedy/rspeedy.createrspeedy.md#2025-04-17_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createRspeedy } from '@lynx-js/rspeedy'\n\nvoid async function () {\n  const rspeedy = await createRspeedy({})\n  await rspeedy.build()\n}()\n```\n\n----------------------------------------\n\nTITLE: Remove Event Listener Method Signature\nDESCRIPTION: Method signature for removing an event listener from BeforePublishEvent\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/lynx-api/lynx/lynx-before-publish-event/before-publish-event-remove.mdx#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nremove(name: string, listener: () => {}): BeforePublishEvent;\n```\n\n----------------------------------------\n\nTITLE: Main Fields Package Configuration\nDESCRIPTION: Configuration example showing how to specify different entry points in package.json using main fields.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/rspeedy/resolve.md#2025-04-17_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"upstream\",\n  \"lynx\": \"build/lynx.js\",\n  \"module\": \"build/index.js\"\n}\n```\n\n----------------------------------------\n\nTITLE: TypeScript Signature for Source.include Property\nDESCRIPTION: The TypeScript interface signature for the Source.include property, showing that it accepts an optional array of Rspack.RuleSetCondition or undefined.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/api/rspeedy/rspeedy.source.include.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninclude?: Rspack.RuleSetCondition[] | undefined;\n```\n\n----------------------------------------\n\nTITLE: Accessing the layoutUiOperationExecuteStart Property in PipelineEntry (TypeScript)\nDESCRIPTION: The layoutUiOperationExecuteStart property provides the timestamp for the start of executing UI operations related to layout.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/lynx-api/performance-api/performance-entry/pipeline-entry.mdx#2025-04-17_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nlayoutUiOperationExecuteStart: number;\n```\n\n----------------------------------------\n\nTITLE: Using React Suspense Component with Fallback\nDESCRIPTION: Example of how to implement the Suspense component in React with a loading fallback while the ProfileDetails component loads.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/api/react/Function.Suspense.mdx#2025-04-17_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Suspense } from 'react';\n\n<Suspense fallback={<Loading />}>\n  <ProfileDetails />\n</Suspense>\n```\n\n----------------------------------------\n\nTITLE: UNSAFE_componentWillReceiveProps Deprecated Method\nDESCRIPTION: Deprecated lifecycle method for handling prop updates. Replaced by static getDerivedStateFromProps in modern React.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/react/Class.PureComponent.mdx#2025-04-17_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\noptional UNSAFE_componentWillReceiveProps(nextProps: Readonly<P>, nextContext: any): void\n```\n\n----------------------------------------\n\nTITLE: Basic justify-items CSS Property Usage in Lynx\nDESCRIPTION: Shows the basic syntax for the justify-items CSS property with its various possible values in Lynx grid layouts.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/api/css/properties/justify-items.mdx#2025-04-17_snippet_0\n\nLANGUAGE: css\nCODE:\n```\njustify-items: stretch;\njustify-items: center;\njustify-items: start;\njustify-items: end;\n```\n\n----------------------------------------\n\nTITLE: Basic -x-handle-color Usage in CSS\nDESCRIPTION: Example showing how to set the color of the text selection floating marker using the -x-handle-color property within a ::selection pseudo-element.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/css/properties/-x-handle-color.mdx#2025-04-17_snippet_0\n\nLANGUAGE: css\nCODE:\n```\n::selection {\n  -x-handle-color: blue;\n}\n```\n\n----------------------------------------\n\nTITLE: Public Folder Asset Reference\nDESCRIPTION: Shows how to reference assets from the public folder using process.env.ASSET_PREFIX\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/rspeedy/assets.md#2025-04-17_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst logoURL = `${process.env.ASSET_PREFIX}/logo.png`;\n```\n\n----------------------------------------\n\nTITLE: Configuring transformImport in rspeedy Config\nDESCRIPTION: An example of how to configure the transformImport option in the rspeedy configuration file. This setup transforms imports for the 'foo' library.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/rspeedy/rspeedy.source.transformimport.md#2025-04-17_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineConfig } from '@lynx-js/rspeedy'\n\nexport default defineConfig({\n  source: {\n    transformImport: [\n      {\n        libraryName: 'foo',\n        customName: 'foo/src/components/{{ member }}/{{ member }}',\n      },\n    ],\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring SWC Minification in Rspeedy\nDESCRIPTION: Example configuration showing how to disable the mangle feature in SWC minification using Rspeedy's defineConfig function.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/rspeedy/rspeedy.minify.jsoptions.md#2025-04-17_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineConfig } from '@lynx-js/rspeedy'\n\nexport default defineConfig({\n  output: {\n    minify: {\n      jsOptions: {\n        minimizerOptions: {\n          mangle: false,\n        },\n      },\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Importing Go Component for Example Display in JSX\nDESCRIPTION: This snippet demonstrates how to import and use the Go component to display an example of the overflow-y property usage.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/api/css/properties/overflow-y.mdx#2025-04-17_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Go } from '@lynx';\n\n<Go\n  example=\"css-api\"\n  defaultFile=\"src/overflow-y/App.tsx\"\n  img=\"https://lf-lynx.tiktok-cdns.com/obj/lynx-artifacts-oss-sg/lynx-website/assets/doc/css/overflow.jpg\"\n  entry=\"src/overflow-y\"\n  defaultEntryFile=\"dist/overflow-y.lynx.bundle\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Defining Output.filename Type in TypeScript\nDESCRIPTION: TypeScript signature for the Output.filename property, which can accept a string, a Filename object, or be undefined.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/api/rspeedy/rspeedy.output.filename.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfilename?: string | Filename | undefined;\n```\n\n----------------------------------------\n\nTITLE: Defining CustomEvent params Property in TypeScript\nDESCRIPTION: Defines the params property of CustomEvent which represents component state information. Note that this property is marked for deprecation.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/lynx-api/event/custom-event.mdx#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nparams: object;\n```\n\n----------------------------------------\n\nTITLE: Importing Root from ReactLynx in TypeScript\nDESCRIPTION: Demonstrates how to import the 'root' variable from the ReactLynx package for use in a TypeScript project.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/api/react/Variable.root.mdx#2025-04-17_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { root } from \"@lynx-js/react\"\n```\n\n----------------------------------------\n\nTITLE: Defining ExposedAPI.exit Property in TypeScript\nDESCRIPTION: This code snippet defines the 'exit' property of the ExposedAPI interface. It is a function that optionally takes a number parameter (exit code) and returns either a Promise<void> or void. The purpose of this property is to provide a method to exit the process.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/rspeedy/rspeedy.exposedapi.exit.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexit: (code?: number) => Promise<void> | void;\n```\n\n----------------------------------------\n\nTITLE: AppendElement Method Signature\nDESCRIPTION: Function signature showing the parameters and return type for appending elements\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/api/engine/element-api/__AppendElement.mdx#2025-04-17_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n__AppendElement(parent: Element, child: Element) : Element;\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies with PNPM\nDESCRIPTION: Command to install all required dependencies for the Lynx website project using PNPM package manager.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/README.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npnpm install\n```\n\n----------------------------------------\n\nTITLE: Implementing componentDidUpdate Lifecycle Method in React\nDESCRIPTION: Shows the signature for the componentDidUpdate method called after a component updates.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/react/Class.Component.mdx#2025-04-17_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\noptional componentDidUpdate(\n   prevProps: Readonly<P>,\n   prevState: Readonly<S>,\n   snapshot?: SS): void\n```\n\n----------------------------------------\n\nTITLE: Importing PropertyDefinition Component\nDESCRIPTION: Import statement for the PropertyDefinition component used to display the formal CSS property definition.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/css/properties/animation-duration.mdx#2025-04-17_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nimport { PropertyDefinition } from '@/components/PropertyDefinition';\n```\n\n----------------------------------------\n\nTITLE: Rspack Performance Profiling with Environment Variables\nDESCRIPTION: Commands to enable Rspack performance profiling using the RSPACK_PROFILE environment variable in both dev and build modes. This generates detailed performance data for analysis.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/rspeedy/build-profiling.mdx#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n# dev\nRSPACK_PROFILE=ALL rspeedy dev\n\n# build\nRSPACK_PROFILE=ALL rspeedy build\n```\n\n----------------------------------------\n\nTITLE: Unsupported Edge Offset Syntax\nDESCRIPTION: Example of edge offset syntax that is not supported in the Lynx framework implementation.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/css/properties/background-position.mdx#2025-04-17_snippet_2\n\nLANGUAGE: css\nCODE:\n```\nbackground-position: bottom 10px right 20px\n```\n\n----------------------------------------\n\nTITLE: Defining Mode Configuration Type in TypeScript\nDESCRIPTION: TypeScript type definition for the mode configuration property that specifies build mode options for Rsbuild and Rspack. The mode can be set to development, production, none, or left undefined.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/rspeedy/rspeedy.config.mode.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nmode?: 'development' | 'production' | 'none' | undefined;\n```\n\n----------------------------------------\n\nTITLE: Defining libraryName Property in TransformImport Interface (TypeScript)\nDESCRIPTION: This code snippet shows the TypeScript signature for the libraryName property. It is a required string property that represents the original import path that needs to be transformed.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/rspeedy/rspeedy.transformimport.libraryname.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nlibraryName: string;\n```\n\n----------------------------------------\n\nTITLE: Defining ConsoleType in TypeScript for @lynx-js/rspeedy\nDESCRIPTION: This type definition specifies the possible console method types that can be used in the rspeedy library. It includes standard console methods like log, warn, error, info, debug, profile, and profileEnd, while also allowing for custom string types via string intersection with an empty Record.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/api/rspeedy/rspeedy.consoletype.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport type ConsoleType = 'log' | 'warn' | 'error' | 'info' | 'debug' | 'profile' | 'profileEnd' | (string & Record<never, never>);\n```\n\n----------------------------------------\n\nTITLE: Formal CSS Syntax Definition\nDESCRIPTION: The formal syntax definition for the -x-handle-color property, showing it accepts a color value.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/css/properties/-x-handle-color.mdx#2025-04-17_snippet_1\n\nLANGUAGE: css\nCODE:\n```\n-x-handle-color = <color>\n```\n\n----------------------------------------\n\nTITLE: Listener Parameter Type Definition\nDESCRIPTION: Type definition for the listener callback function parameter that will be removed\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/lynx-api/lynx/lynx-before-publish-event/before-publish-event-remove.mdx#2025-04-17_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nlistener: () => {};\n```\n\n----------------------------------------\n\nTITLE: CSS Visibility Property Formal Syntax\nDESCRIPTION: This snippet defines the formal syntax for the visibility property in CSS, showing the allowed values.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/api/css/properties/visibility.mdx#2025-04-17_snippet_2\n\nLANGUAGE: css\nCODE:\n```\nvisibility =\n  visible   |\n  hidden\n```\n\n----------------------------------------\n\nTITLE: Importing Lynx Go Component\nDESCRIPTION: Basic import statement for the Go component from the Lynx framework.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/guide/styling/animation.mdx#2025-04-17_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Go } from '@lynx';\n```\n\n----------------------------------------\n\nTITLE: Listing Element Attribute Names with getAttributeNames() in TypeScript\nDESCRIPTION: Returns an array containing all attribute names of an element.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/lynx-api/main-thread/main-thread-element.mdx#2025-04-17_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst nameArray = element.getAttributeNames();\n```\n\n----------------------------------------\n\nTITLE: Defining Dev.assetPrefix Type in TypeScript\nDESCRIPTION: TypeScript type definition for the Dev.assetPrefix property, showing it can accept string, boolean, or undefined values.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/rspeedy/rspeedy.dev.assetprefix.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nassetPrefix?: string | boolean | undefined;\n```\n\n----------------------------------------\n\nTITLE: JSX Element Example\nDESCRIPTION: Example showing how to set an attribute in JSX syntax for a view element.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/engine/element-api/__SetAttribute.mdx#2025-04-17_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<view src=\"xxx\" />\n```\n\n----------------------------------------\n\nTITLE: Defining __AddClass Function Signature in JSX\nDESCRIPTION: Defines the signature of the __AddClass function, which takes an Element object and a className string as parameters and returns void.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/engine/element-api/__AddClass.mdx#2025-04-17_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n__AddClass(element: Element, className: string) : void;\n```\n\n----------------------------------------\n\nTITLE: Example JSON Structure for Lynx Example Data\nDESCRIPTION: This JSON structure represents the format of the generated example-data.json file. It includes information about the example package, such as its name, included files, template files, and preview image.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/packages/lynx-example-packages/README.md#2025-04-17_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"view\",\n  \"files\": [\n    \"dist/main.lynx.bundle\",\n    \"src/App.tsx\",\n    \"src/index.tsx\",\n    \"src/rspeedy-env.d.ts\",\n    \"lynx.config.ts\",\n    \"package.json\",\n    \"README.md\"\n  ],\n  \"templateFiles\": [\n    {\n      \"name\": \"main\",\n      \"file\": \"dist/main.lynx.bundle\"\n    }\n  ],\n  \"previewImage\": \"preview-image.png\"\n}\n```\n\n----------------------------------------\n\nTITLE: Defining stage property in FrameworkPipelineTiming interface\nDESCRIPTION: Declares the stage property that describes the type of framework data update process, with possible values being 'hydrate' or 'update'.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/lynx-api/performance-api/framework-pipeline-timing.mdx#2025-04-17_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nstage: string;\n```\n\n----------------------------------------\n\nTITLE: Configuring Rspack Using Function with appendPlugins Utility\nDESCRIPTION: Example demonstrating how to use the appendPlugins utility to add Rspack plugins to the configuration. Shows adding a BannerPlugin with a custom banner message.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/api/rspeedy/rspeedy.tools.rspack.md#2025-04-17_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineConfig } from '@lynx-js/rspeedy'\n\nexport default defineConfig({\n  tools: {\n    rspack(config, { appendPlugins, rspack }) {\n      appendPlugins(new rspack.BannerPlugin({ banner: 'Hello, World!' }))\n      return config\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Accessing the frameworkPipelineTiming Property in PipelineEntry (TypeScript)\nDESCRIPTION: The frameworkPipelineTiming property provides performance data for key stages in Framework Rendering, using the FrameworkPipelineTiming type.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/lynx-api/performance-api/performance-entry/pipeline-entry.mdx#2025-04-17_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\nframeworkPipelineTiming: FrameworkPipelineTiming[keyof FrameworkPipelineTiming];\n```\n\n----------------------------------------\n\nTITLE: Setting Border Bottom Color in CSS\nDESCRIPTION: These examples demonstrate how to set the border-bottom-color property using different value formats.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/api/css/properties/border-bottom-color.mdx#2025-04-17_snippet_1\n\nLANGUAGE: css\nCODE:\n```\nborder-bottom-color: red;\n\nborder-bottom-color: '#ff0000';\n```\n\n----------------------------------------\n\nTITLE: Importing the CodeFold Component in JSX\nDESCRIPTION: Shows how to import the CodeFold component from the @lynx package.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/src/components/code-fold/README.md#2025-04-17_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { CodeFold } from '@lynx';\n```\n\n----------------------------------------\n\nTITLE: GetDataByKey Function Signature\nDESCRIPTION: Function signature showing the parameter types and return value for the __GetDataByKey utility.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/engine/element-api/__GetDataByKey.mdx#2025-04-17_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n__GetDataByKey(element: Element, key: string) : any;\n```\n\n----------------------------------------\n\nTITLE: TypeScript Method Signature\nDESCRIPTION: Function signature showing the type definition for the cancelResourcePrefetch method including parameters and return type.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/lynx-api/lynx/lynx-cancel-resource-prefetch.mdx#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ncancelResourcePrefetch(data: object, callback: (res: object) => void) : void;\n```\n\n----------------------------------------\n\nTITLE: Directory Structure Overview\nDESCRIPTION: Markdown representation of the Lynx website project directory structure, showing documentation and package organization.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/README.md#2025-04-17_snippet_4\n\nLANGUAGE: md\nCODE:\n```\n/\n├── docs/\n│ ├── public/ ## Static resources\n│ ├── en/ ## English docs\n│ └── zh/ ## Chinese docs\n└── packages/\n└── lynx-compat-data/ ## Lynx compatibility data\n└── lynx-living-spec/ ## Lynx living specification\n└── lynx-example-packages/ ## Lynx example packages\n```\n\n----------------------------------------\n\nTITLE: Defining content property of LoadConfigResult interface in TypeScript\nDESCRIPTION: The content property represents the configuration object exported from the configuration file. This property has been typed as Config and the returned object has already been validated.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/api/rspeedy/rspeedy.loadconfigresult.content.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ncontent: Config;\n```\n\n----------------------------------------\n\nTITLE: Defining prepareTemplateStart Property in TypeScript\nDESCRIPTION: Defines the prepareTemplateStart property that stores the template bundle preparation start timestamp in milliseconds.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/lynx-api/performance-api/performance-entry/init-container-entry.mdx#2025-04-17_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nprepareTemplateStart: number;\n```\n\n----------------------------------------\n\nTITLE: Rspeedy Preview Command Help\nDESCRIPTION: Help output for the preview command showing options for local preview of production builds\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/rspeedy/cli.md#2025-04-17_snippet_5\n\nLANGUAGE: text\nCODE:\n```\n➜ rspeedy preview --help\n\nUsage: rspeedy preview [options]\n\nOptions:\n  -b --base <base>      specify the base path of the server\n  -c --config <config>  specify the configuration file, can be a relative or absolute path\n  --env-mode <mode>     specify the env mode to load the .env.[mode] file\n  -h, --help            display help for command\n```\n\n----------------------------------------\n\nTITLE: Rspeedy Inspect Output Example\nDESCRIPTION: Example output showing the generated configuration files from the inspect command\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/rspeedy/cli.md#2025-04-17_snippet_7\n\nLANGUAGE: text\nCODE:\n```\n➜ rspeedy inspect\n\nInspect config succeed, open following files to view the content:\n\n  - Rspeedy Config: /project/dist/.rsbuild/rspeedy.config.mjs\n  - Rspack Config (lynx): /project/dist/.rsbuild/rspack.config.lynx.mjs\n\nInspect Rspeedy config succeed, open following files to view the content:\n\n  - Rspeedy: /Users/colin/rspeedy/examples/react/dist/rspeedy-rspack/.rsbuild/rspeedy.config.js\n```\n\n----------------------------------------\n\nTITLE: Setting Relative IDs for Child Elements in Lynx\nDESCRIPTION: Assigns unique relative-id values to each child element in the relative layout to identify them for positioning relationships.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/guide/ui/layout/relative-layout.mdx#2025-04-17_snippet_1\n\nLANGUAGE: css\nCODE:\n```\n// avatar\nrelative-id: 1;\n// user_name\nrelative-id: 2;\n// user_description\nrelative-id: 3;\n// user_lv\nrelative-id: 4;\n// close\nrelative-id: 5;\n// follow\nrelative-id: 6;\n```\n\n----------------------------------------\n\nTITLE: Highlighting Code Lines in the Go Component\nDESCRIPTION: Shows how to highlight specific lines of code in the displayed file using the highlight prop.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/src/components/go/README.md#2025-04-17_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\n<Go\n  example=\"animation\"\n  defaultFile=\"src/transition_animation/index.tsx\"\n  highlight=\"{1,3-5}\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Defining removeDescendantSelectorScope Property Type in TypeScript\nDESCRIPTION: TypeScript interface property definition for removeDescendantSelectorScope, an optional boolean flag used to control whether descendant selector scoping should be removed in the React Rsbuild plugin.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/rspeedy/react-rsbuild-plugin.pluginreactlynxoptions.removedescendantselectorscope.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nremoveDescendantSelectorScope?: boolean;\n```\n\n----------------------------------------\n\nTITLE: Defining CssLoaderModules.namedExport Property in TypeScript\nDESCRIPTION: TypeScript signature for the namedExport property which enables or disables ES modules named export for locals in CSS modules.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/api/rspeedy/rspeedy.cssloadermodules.namedexport.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nnamedExport?: boolean | undefined;\n```\n\n----------------------------------------\n\nTITLE: Example Go Component Implementation\nDESCRIPTION: Demonstrates the implementation of a Go component for performance observation example, including configuration for file paths and highlighting.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/lynx-api/performance-api/performance-observer.mdx#2025-04-17_snippet_2\n\nLANGUAGE: JSX\nCODE:\n```\n<Go\n  example=\"performance-api\"\n  defaultFile=\"src/simple_observe/index.tsx\"\n  defaultEntryFile=\"dist/SimpleObseve.lynx.bundle\"\n  img=\"https://lf-lynx.tiktok-cdns.com/obj/lynx-artifacts-oss-sg/lynx-website/assets/doc/simple-observe-demo.jpeg\"\n  entry=\"src/simple_observe\"\n  highlight=\"{11-21,31}\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Generating Lynx Example Data with Node.js\nDESCRIPTION: This command runs a Node.js script to generate example data for the Lynx project. The generated data will be stored in the docs/public/lynx-examples directory.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/packages/lynx-example-packages/README.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnode scripts/lynx-example.js\n```\n\n----------------------------------------\n\nTITLE: Implementing createRoot Function in ReactLynx TypeScript\nDESCRIPTION: Defines the createRoot function that returns the default and only root of ReactLynx for rendering JSX. This function is deprecated and users should use the root variable instead.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/api/react/Function.createRoot.mdx#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction createRoot(): Root\n```\n\n----------------------------------------\n\nTITLE: Using Generic Badge Component\nDESCRIPTION: Shows how to use the generic Badge component from Rspress, which is re-exported through '@lynx'. This component can display arbitrary content as a badge.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/internal/docs-contribution-guide/doc-components.mdx#2025-04-17_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\n<Badge>任意内容</Badge>\n```\n\n----------------------------------------\n\nTITLE: Homepage Hero Section Configuration in YAML\nDESCRIPTION: YAML frontmatter configuration defining the homepage structure with page type, hero section content including name, tagline and action buttons with themes and links.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/index.mdx#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\npageType: home\n\nhero:\n  name: Unlock Native for More\n  tagline: 'Empower the web community and invite more to build across platforms'\n  actions:\n    - theme: brand\n      text: Why Lynx\n      link: /blog/lynx-unlock-native-for-more\n    - theme: alt\n      text: Quick Start\n      link: /guide/start/quick-start\n---\n```\n\n----------------------------------------\n\nTITLE: CSS Module Class Example\nDESCRIPTION: Example CSS file containing class definitions that can be imported as a module in JavaScript.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/api/rspeedy/rspeedy.cssloadermodules.namedexport.md#2025-04-17_snippet_1\n\nLANGUAGE: css\nCODE:\n```\n.foo-baz {\n  color: red;\n}\n.bar {\n  color: blue;\n}\n.default {\n  color: green;\n}\n```\n\n----------------------------------------\n\nTITLE: TypeScript Syntax for NodesRef invoke() Method\nDESCRIPTION: The TypeScript signature for the invoke() method on NodesRef objects, which takes an options object parameter and returns a SelectorQuery object.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/lynx-api/nodes-ref/nodes-ref-invoke.mdx#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninvoke(options: Record<string, any>): SelectorQuery;\n```\n\n----------------------------------------\n\nTITLE: Rendering PropertyDefinition Component\nDESCRIPTION: JSX code that implements the PropertyDefinition component to display formal specifications of the animation-duration property.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/css/properties/animation-duration.mdx#2025-04-17_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\n<PropertyDefinition\n  initialValue={<>0s</>}\n  appliesTo={<>all elements</>}\n  inherited=\"no\"\n  animatable=\"no\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Defining Config.dev Property in TypeScript\nDESCRIPTION: This code snippet defines the 'dev' property of the Config interface. It is an optional property of type Dev or undefined, used to control development-related behavior such as Hot Module Replacement (HMR) and DevServer settings.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/api/rspeedy/rspeedy.config.dev.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ndev?: Dev | undefined;\n```\n\n----------------------------------------\n\nTITLE: CodeFold Component Interface Definition\nDESCRIPTION: TypeScript interface definition for the CodeFold component, detailing its available props including children nodes, image URL, height adjustment, and toggle functionality for code visibility.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/internal/docs-contribution-guide/doc-components.mdx#2025-04-17_snippet_11\n\nLANGUAGE: tsx\nCODE:\n```\ninterface CodeFoldProps = {\n  /** Child components to render */\n  children: React.ReactNode;\n  /** Optional URL of the example image */\n  img?: string;\n  /** Optional number for code-area\\image-area height, default is 300 */\n  height?: number;\n  /** Optional boolean for toggle code-area\\image-area */\n  toggle?: boolean;\n};\n```\n\n----------------------------------------\n\nTITLE: Defining ChunkSplitBySize.maxSize Property in TypeScript\nDESCRIPTION: This code snippet shows the TypeScript signature for the maxSize property of the ChunkSplitBySize interface. It is an optional number property that defaults to Number.POSITIVE_INFINITY if not specified.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/api/rspeedy/rspeedy.chunksplitbysize.maxsize.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nmaxSize?: number | undefined;\n```\n\n----------------------------------------\n\nTITLE: Defining Event Type Property in TypeScript\nDESCRIPTION: Defines the 'type' property of the Event class, which represents the type of the event as a string.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/api/lynx-api/event/event.mdx#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntype: string;\n```\n\n----------------------------------------\n\nTITLE: Importing React Components for TSDoc\nDESCRIPTION: Imports all components from the @lynx package as Lynx to allow dynamic lookup in TSDoc writings.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/api/react/Function.useEffect.mdx#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as Lynx from '@lynx';\n```\n\n----------------------------------------\n\nTITLE: Binding Touch Events to Main Thread in JSX\nDESCRIPTION: JSX code that binds touch events to main thread event handlers using the main-thread: prefix, ensuring events are processed in the main thread for optimal performance.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/guide/start/tutorial-product-detail.mdx#2025-04-17_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\n<view\n  main-thread:bindtouchstart={handleTouchStart}\n  main-thread:bindtouchmove={handleTouchMove}\n>\n  {/* ... */}\n</view>\n```\n\n----------------------------------------\n\nTITLE: Defining publicPath Property in EntryDescription Interface (TypeScript)\nDESCRIPTION: This code snippet defines the publicPath property in the EntryDescription interface. It is an optional string property that specifies the public path for resources. Incorrect values can lead to 404 errors when loading resources.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/rspeedy/rspeedy.entrydescription.publicpath.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\npublicPath?: string | undefined;\n```\n\n----------------------------------------\n\nTITLE: Importing React Components for TSDoc\nDESCRIPTION: This code snippet imports all components from the @lynx package as Lynx to allow dynamic lookup in TSDoc writings.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/api/react/Function.useCallback.mdx#2025-04-17_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as Lynx from '@lynx';\n```\n\n----------------------------------------\n\nTITLE: Defining ChunkSplitBySize.maxSize Property in TypeScript\nDESCRIPTION: TypeScript signature for the maxSize property of the ChunkSplitBySize interface. It's an optional number property that defaults to Number.POSITIVE_INFINITY and represents the maximum size of a chunk in bytes.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/rspeedy/rspeedy.chunksplitbysize.maxsize.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nmaxSize?: number | undefined;\n```\n\n----------------------------------------\n\nTITLE: Retrieving Pixel Ratio on Android in Java\nDESCRIPTION: Shows how to get the pixel ratio (density) of the screen on Android devices using Java. It uses the DisplayMetrics class to access the screen's density.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/lynx-api/global/system-info.mdx#2025-04-17_snippet_8\n\nLANGUAGE: java\nCODE:\n```\nDisplayMetrics dm = context.getResources().getDisplayMetrics();\nfloat pixelRatio = dm.density;\n```\n\n----------------------------------------\n\nTITLE: Defining Home Page Structure in YAML for Lynx Website\nDESCRIPTION: This YAML snippet configures the structure of the Lynx website's home page. It sets the page type, defines the hero section with a custom title and tagline, and specifies action buttons for navigation.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/react/index.mdx#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\npageType: home\n\nhero:\n  name: <span class=\"hero-title\"><span class=\"normal\">Idiomatic </span><span class=\"brand-ani\">React </span><span class=\"normal\">on </span><span class=\"brand\">Lynx</span></span>\n  tagline: Develop Lynx with the familiar React\n  actions:\n    - theme: brand\n      text: Introduction\n      link: ./introduction.html\n    - theme: alt\n      text: Quick Start\n      link: ./start/quick-start.html\n---\n```\n\n----------------------------------------\n\nTITLE: Using Named Imports with CSS Modules in React\nDESCRIPTION: Alternative approach to importing CSS Modules using named imports. This directly imports the 'red' class from the CSS Module file.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/rspeedy/styling.mdx#2025-04-17_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport { red } from './button.module.css';\n\nexport function Button() {\n  return (\n    <view className={red}>\n      <text>Button</text>\n    </view>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Deprecated UNSAFE_componentWillUpdate in React\nDESCRIPTION: Deprecated lifecycle method called before rendering on props/state updates. Use getSnapshotBeforeUpdate instead.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/react/Class.Component.mdx#2025-04-17_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\noptional UNSAFE_componentWillUpdate(\n   nextProps: Readonly<P>,\n   nextState: Readonly<S>,\n   nextContext: any): void\n```\n\n----------------------------------------\n\nTITLE: Defining ChunkSplitBySize Strategy Type in TypeScript\nDESCRIPTION: Type definition for the ChunkSplitBySize strategy property that specifies the chunk splitting approach. The strategy is specifically set to 'split-by-size' which automatically splits modules based on their size.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/api/rspeedy/rspeedy.chunksplitbysize.strategy.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nstrategy: 'split-by-size';\n```\n\n----------------------------------------\n\nTITLE: Declaring cleanDistPath Type in TypeScript\nDESCRIPTION: TypeScript type definition for the cleanDistPath configuration option that determines whether output directory files should be cleaned before build.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/rspeedy/rspeedy.output.cleandistpath.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ncleanDistPath?: boolean | undefined;\n```\n\n----------------------------------------\n\nTITLE: Defining Server Interface in TypeScript for @lynx-js/rspeedy\nDESCRIPTION: This code snippet defines the Server interface for the @lynx-js/rspeedy package. It includes optional properties for configuring various aspects of the dev-server, such as base path, headers, host, port, and strict port behavior.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/zh/api/rspeedy/rspeedy.server.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface Server \n{\n  base?: string | undefined;\n  headers?: Record<string, string | string[]> | undefined;\n  host?: string | undefined;\n  port?: number | undefined;\n  strictPort?: boolean | undefined;\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling CSS Modules in JavaScript Configuration\nDESCRIPTION: This example demonstrates how to disable CSS modules using the defineConfig function from @lynx-js/rspeedy. It sets the auto property of cssModules to false.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/rspeedy/rspeedy.output.cssmodules.md#2025-04-17_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineConfig } from '@lynx-js/rspeedy'\nexport default defineConfig({\n  output: {\n    cssModules: {\n      auto: false,\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Disabling Source Map Generation in JavaScript\nDESCRIPTION: Example of disabling source map generation completely using the SourceMap.js property.\nSOURCE: https://github.com/lynx-family/lynx-website/blob/main/docs/en/api/rspeedy/rspeedy.sourcemap.js.md#2025-04-17_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineConfig } from '@lynx-js/rspeedy'\n\nexport default defineConfig({\n  output: {\n    sourceMap: {\n      js: false,\n    },\n  },\n})\n```"
  }
]