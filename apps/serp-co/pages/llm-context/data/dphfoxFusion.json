[
  {
    "owner": "dphfox",
    "repo": "fusion",
    "content": "TITLE: Creating Multiple Objects in a Scope in Lua\nDESCRIPTION: This snippet demonstrates how to create multiple Fusion.Value objects within the same scope.  Each object will add its `destroy()` function to the scope in the order it's created, ensuring that all objects are cleaned up when the scope is destroyed.\nSOURCE: https://github.com/dphfox/fusion/blob/main/docs/tutorials/fundamentals/scopes.md#_snippet_3\n\nLANGUAGE: Lua\nCODE:\n```\nlocal Fusion = require(ReplicatedStorage.Fusion)\n\nlocal scope = {}\nlocal thing1 = Fusion.Value(scope, \"i am thing 1\")\nlocal thing2 = Fusion.Value(scope, \"i am thing 2\")\nlocal thing3 = Fusion.Value(scope, \"i am thing 3\")\n```\n\n----------------------------------------\n\nTITLE: Using Fusion Value Objects: Set and Peek\nDESCRIPTION: This snippet demonstrates how to create a Fusion Value object, set its value using the `:set()` method, and read its value using the `peek()` function.  The `scope:Value(100)` creates a new value object initialized to 100.  The `:set()` method modifies the stored value, and `peek()` retrieves the current value.\nSOURCE: https://github.com/dphfox/fusion/blob/main/docs/tutorials/fundamentals/values.md#_snippet_0\n\nLANGUAGE: Lua\nCODE:\n```\nlocal health = scope:Value(100)\n\nprint(peek(health)) --> 100\nhealth:set(25)\nprint(peek(health)) --> 25\n```\n\n----------------------------------------\n\nTITLE: Creating an Observer and onChange Handler (Fusion/Lua)\nDESCRIPTION: This snippet demonstrates how to create an observer for a state object and connect a function to it using `:onChange()`. The function will be executed whenever the state object's value changes. A disconnect function returned by `:onChange()` is also used to stop observing the state object after a certain period.\nSOURCE: https://github.com/dphfox/fusion/blob/main/docs/tutorials/fundamentals/observers.md#_snippet_0\n\nLANGUAGE: Lua\nCODE:\n```\nlocal observer = scope:Observer(health)\nlocal disconnect = observer:onChange(function()\n\tprint(\"The new value is: \", peek(health))\nend)\ntask.wait(5)\ndisconnect()\n```\n\n----------------------------------------\n\nTITLE: Initializing Fusion in Luau\nDESCRIPTION: This snippet imports the Fusion library from ReplicatedStorage, making it available for use in the script. It assumes that Fusion is located in ReplicatedStorage.\nSOURCE: https://github.com/dphfox/fusion/blob/main/docs/tutorials/fundamentals/your-first-project.md#_snippet_0\n\nLANGUAGE: Lua\nCODE:\n```\nlocal ReplicatedStorage = game:GetService(\"ReplicatedStorage\")\nlocal Fusion = require(ReplicatedStorage.Fusion)\n```\n\n----------------------------------------\n\nTITLE: Returning Instances from Fusion Components (Lua)\nDESCRIPTION: This code demonstrates various ways to return instances from a Fusion component, including single instances, arrays of instances, and state objects containing instances.  It emphasizes that any return should be compatible with the `[Children]` property to avoid issues with value loss. Returning multiple values directly is discouraged.\nSOURCE: https://github.com/dphfox/fusion/blob/main/docs/tutorials/best-practices/instance-handling.md#_snippet_0\n\nLANGUAGE: Lua\nCODE:\n```\n-- returns an instance\nreturn scope:New \"Frame\" {}\n\n-- returns an array of instances\nreturn {\n\tscope:New \"Frame\" {},\n\tscope:New \"Frame\" {},\n\tscope:New \"Frame\" {}\n}\n\n-- returns a state object containing instances\nreturn scope:ForValues({1, 2, 3}, function(use, scope, number)\n\treturn scope:New \"Frame\" {}\nend)\n\n-- mix of arrays, instances and state objects\nreturn {\n\tscope:New \"Frame\" {},\n\t{\n\t\tscope:New \"Frame\" {},\n\t\tscope:ForValues( ... )\n\t}\n\tscope:ForValues( ... )\n}\n```\n\n----------------------------------------\n\nTITLE: Nested Computed Objects with Consistent Naming (Lua)\nDESCRIPTION: This example shows how to nest Computed objects and recommends using the same name (`use`, `scope`) for the first two parameters of each nested Computed object. This helps prevent confusion and makes the code more maintainable, particularly when dealing with multiple nested computations.\nSOURCE: https://github.com/dphfox/fusion/blob/main/docs/tutorials/fundamentals/computeds.md#_snippet_6\n\nLANGUAGE: Lua\nCODE:\n```\nscope:Computed(function(use, _)\n\t-- ...\n\tscope:Computed(function(use, _)\n\t\t-- ...\n\t\tscope:Computed(function(use, _)\n\t\t\treturn use(number) * 2\n\t\tend)\n\t\t-- ...\n\tend)\n\t-- ...\nend)\n```\n\n----------------------------------------\n\nTITLE: Creating and Using Value and Computed State Objects in Fusion (Luau)\nDESCRIPTION: This code snippet illustrates how to create and use `Value` and `Computed` state objects within a Fusion scope. `Value` objects are manually settable, while `Computed` objects automatically derive their value from other state objects. The example also showcases the use of `scope:doCleanup()` for discarding the objects.\nSOURCE: https://github.com/dphfox/fusion/blob/main/docs/index.md#_snippet_1\n\nLANGUAGE: Lua\nCODE:\n```\n-- Start tracking some new objects.\nlocal scope = Fusion:scoped()\n\n-- This creates a state object that you can set manually.\n-- You can change its value using myName:set().\nlocal myName = scope:Value(\"Daniel\")\n\n-- This creates a state object from a calculation.\n-- It determines its own value automatically.\nlocal myGreeting = scope:Computed(function(use)\n\treturn \"Hello! My name is \" .. use(myName)\nend)\n\n-- Discard all the objects.\nscope:doCleanup()\n```\n\n----------------------------------------\n\nTITLE: Using Fusion.Out to Return a Key (Lua)\nDESCRIPTION: This snippet shows that calling `Out` with a property name will return a key. This key can then be used in a property table to define the binding.\nSOURCE: https://github.com/dphfox/fusion/blob/main/docs/tutorials/roblox/outputs.md#_snippet_2\n\nLANGUAGE: Lua\nCODE:\n```\nlocal key = Out(\"Activated\")\n```\n\n----------------------------------------\n\nTITLE: Button Component Definition in Lua\nDESCRIPTION: This code defines a `Button` component using a Lua function that takes a Fusion scope and a table of properties as input. It creates a `TextButton` instance with properties such as `BackgroundColor3`, `Position`, `AnchorPoint`, `Size`, `LayoutOrder`, `Text`, `TextSize`, and `TextColor3`. It also adds a `UICorner` as a child.\nSOURCE: https://github.com/dphfox/fusion/blob/main/docs/tutorials/best-practices/components.md#_snippet_0\n\nLANGUAGE: Lua\nCODE:\n```\ntype UsedAs<T> = Fusion.UsedAs<T>\n\nlocal function Button(\n\tscope: Fusion.Scope,\n\tprops: {\n\t\tPosition: UsedAs<UDim2>?,\n\t\tAnchorPoint: UsedAs<Vector2>?,\n\t\tSize: UsedAs<UDim2>?,\n\t\tLayoutOrder: UsedAs<number>?,\n\t\tButtonText: UsedAs<string>\n\t}\n)\n    return scope:New \"TextButton\" {\n        BackgroundColor3 = Color3.new(0, 0.25, 1),\n        Position = props.Position,\n        AnchorPoint = props.AnchorPoint,\n        Size = props.Size,\n        LayoutOrder = props.LayoutOrder,\n\n        Text = props.ButtonText,\n        TextSize = 28,\n        TextColor3 = Color3.new(1, 1, 1),\n\n        [Children] = UICorner { CornerRadius = UDim2.new(0, 8) }\n    }\nend\n```\n\n----------------------------------------\n\nTITLE: Main File Component Usage in Lua\nDESCRIPTION: This code demonstrates how to use components defined in separate modules within a main file. It requires the necessary Fusion modules, defines a scope that includes the `PopUp` component, and then creates a UI hierarchy that includes the `PopUp` component with specified properties.\nSOURCE: https://github.com/dphfox/fusion/blob/main/docs/tutorials/best-practices/components.md#_snippet_9\n\nLANGUAGE: Lua\nCODE:\n```\nlocal Fusion = require(game:GetService(\"ReplicatedStorage\").Fusion)\n\tlocal scoped, doCleanup = Fusion.scoped, Fusion.doCleanup\n\n\tlocal scope = scoped(Fusion, {\n\t\tPopUp = require(script.Parent.PopUp)\n\t})\n\n    local ui = scope:New \"ScreenGui\" {\n        -- ...some properties...\n\n        [Children] = scope:PopUp {\n            Message = \"Hello, world!\",\n            DismissText = \"Close\"\n        }\n    }\n```\n\n----------------------------------------\n\nTITLE: Slightly Better Checkbox with Passed-In State (Lua)\nDESCRIPTION: This snippet presents a slightly improved approach where the checkbox component receives the state object (`IsChecked`) as a property. This allows external code to access and modify the state, but still restricts the user to using a `Value` and hardcodes the toggle behaviour. The state is passed in as `Fusion.Value<boolean>`. \nSOURCE: https://github.com/dphfox/fusion/blob/main/docs/tutorials/best-practices/state.md#_snippet_2\n\nLANGUAGE: Lua\nCODE:\n```\nlocal function CheckBox(\n\tscope: Fusion.Scope,\n\tprops: {\n\t\tIsChecked: Fusion.Value<boolean> -- slightly better\n\t}\n)\n    return scope:New \"ImageButton\" {\n\t\t[OnEvent \"Activated\"] = function()\n\t\t\tprops.IsChecked:set(not peek(props.IsChecked))\n\t\tend,\n\n        -- ... some more code ...\n    }\nend\n```\n\n----------------------------------------\n\nTITLE: Using State Objects within ForValues Calculation - Lua\nDESCRIPTION: This code demonstrates how to use a state object (`factor`) within the calculation function of a `ForValues` object. The `use()` function is used to access the current value of the state object.  Changes to the state object dynamically update the output of the `ForValues` object. Dependencies: Fusion scope object is assumed.\nSOURCE: https://github.com/dphfox/fusion/blob/main/docs/tutorials/tables/forvalues.md#_snippet_4\n\nLANGUAGE: Lua\nCODE:\n```\nlocal numbers = {1, 2, 3, 4, 5}\nlocal factor = scope:Value(2)\nlocal multiplied = scope:ForValues(numbers, function(use, scope, num)\n\treturn num * use(factor)\nend)\n\nprint(peek(multiplied)) --> {2, 4, 6, 8, 10}\n\nfactor:set(10)\nprint(peek(multiplied)) --> {10, 20, 30, 40, 50}\n```\n\n----------------------------------------\n\nTITLE: Creating a Simple Computed Object (Lua)\nDESCRIPTION: This snippet shows how to create a basic Computed object using `scope:Computed()`.  It takes a function as an argument, which defines the calculation to be performed.  The result of this calculation is stored as the computed's value, retrievable by `peek()`. The example uses unnamed parameters for the callback function.\nSOURCE: https://github.com/dphfox/fusion/blob/main/docs/tutorials/fundamentals/computeds.md#_snippet_1\n\nLANGUAGE: Lua\nCODE:\n```\nlocal scope = scoped(Fusion)\nlocal hardMaths = scope:Computed(function(_, _)\n    return 1 + 1\nend)\n```\n\n----------------------------------------\n\nTITLE: Component Definition with Scope in Lua\nDESCRIPTION: Illustrates the basic syntax for a component function that accepts a `scope` parameter. The scope parameter enables the use of `scoped()` syntax.\nSOURCE: https://github.com/dphfox/fusion/blob/main/docs/tutorials/best-practices/components.md#_snippet_5\n\nLANGUAGE: Lua\nCODE:\n```\n-- barebones syntax\nlocal thing = Component(scope, { \n\t-- ... some properties here ...\n})\n\n-- scoped() syntax\nlocal thing = scope:Component { \n\t-- ... some properties here ...\n}\n```\n\n----------------------------------------\n\nTITLE: Button Component Definition in Lua (Module)\nDESCRIPTION: This Lua code defines a `Button` component using the Fusion library. It accepts a scope and props, with a `Text` property of type `UsedAs<string>`. The component creates a `TextButton` with specified properties, including `BackgroundColor3`, `AutoButtonColor`, and `Text`.\nSOURCE: https://github.com/dphfox/fusion/blob/main/docs/tutorials/best-practices/components.md#_snippet_12\n\nLANGUAGE: Lua\nCODE:\n```\nlocal Fusion = require(game:GetService(\"ReplicatedStorage\").Fusion)\n\ttype UsedAs<T> = Fusion.UsedAs<T>\n\n    local function Button(\n\t\tscope: Fusion.Scope,\n\t\tprops: {\n\t\t\tText: UsedAs<string>\n\t\t}\n\t)\n        return scope:New \"TextButton\" {\n            BackgroundColor3 = Color3.new(0.25, 0.5, 1),\n            AutoButtonColor = true,\n\n             -- ...some properties...\n\n            Text = props.Text\n        }\n    end\n\n    return Button\n```\n\n----------------------------------------\n\nTITLE: Peeking at a Tween's Value (Lua)\nDESCRIPTION: This snippet shows how to get the current value of a tween using the `peek()` function. The `peek()` function allows viewing of a value without triggering any updates or side effects. The output is the current interpolated value of the tween.\nSOURCE: https://github.com/dphfox/fusion/blob/main/docs/tutorials/animation/tweens.md#_snippet_1\n\nLANGUAGE: Lua\nCODE:\n```\nprint(peek(animated)) --> 0.26425...\n```\n\n----------------------------------------\n\nTITLE: Create Dynamic Player List with Fusion and Roblox API\nDESCRIPTION: This code snippet creates a dynamic player list using Roblox's Players service and Fusion. It defines a PlayerList component that displays player names in a scrolling list. The list updates automatically as players join and leave the game. It uses Fusion's scoped, Children, UsedAs, and ForValues functions to manage the UI and data binding. The component renders a frame containing a list of text labels, each representing a player.  It initializes the player list and updates it whenever a player joins or leaves. It also sets up a ScreenGui to render the PlayerList component, parenting it to the PlayerGui.\nSOURCE: https://github.com/dphfox/fusion/blob/main/docs/examples/cookbook/player-list.md#_snippet_0\n\nLANGUAGE: Lua\nCODE:\n```\nlocal Players = game:GetService(\"Players\")\n\nlocal Fusion = -- initialise Fusion here however you please!\nlocal scoped = Fusion.scoped\nlocal Children = Fusion.Children\ntype UsedAs<T> = Fusion.UsedAs<T>\n\nlocal function PlayerList(\n\tscope: Fusion.Scope,\n\tprops: {\n\t\tPlayers: UsedAs<{Player}>\n\t}\n): Fusion.Child\n\treturn scope:New \"Frame\" {\n\t\tName = \"PlayerList\",\n\n\t\tPosition = UDim2.fromScale(1, 0),\n\t\tAnchorPoint = Vector2.new(1, 0),\n\t\tSize = UDim2.fromOffset(300, 0),\n\t\tAutomaticSize = \"Y\",\n\n\t\tBackgroundTransparency = 0.5,\n\t\tBackgroundColor3 = Color3.new(0, 0, 0),\n\n\t\t[Children] = {\n\t\t\tscope:New \"UICorner\" {\n\t\t\t\tCornerRadius = UDim.new(0, 8)\n\t\t\t},\n\t\t\tscope:New \"UIListLayout\" {\n\t\t\t\tSortOrder = \"Name\",\n\t\t\t\tFillDirection = \"Vertical\"\n\t\t\t},\n\n\t\t\tscope:ForValues(props.Players, function(use, scope, player)\n\t\t\t\treturn scope:New \"TextLabel\" {\n\t\t\t\t\tName = \"PlayerListRow: \" .. player.DisplayName,\n\n\t\t\t\t\tSize = UDim2.new(1, 0, 0, 25),\n\t\t\t\t\tBackgroundTransparency = 1,\n\n\t\t\t\t\tText = player.DisplayName,\n\t\t\t\t\tTextColor3 = Color3.new(1, 1, 1),\n\t\t\t\t\tFont = Enum.Font.GothamMedium,\n\t\t\t\t\tTextSize = 16,\n\t\t\t\t\tTextXAlignment = \"Right\",\n\t\t\t\t\tTextTruncate = \"AtEnd\",\n\n\t\t\t\t\t[Children] = scope:New \"UIPadding\" {\n\t\t\t\t\t\tPaddingLeft = UDim.new(0, 10),\n\t\t\t\t\t\tPaddingRight = UDim.new(0, 10)\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\tend)\n\t\t}\n\t}\nend\n\n-- Don't forget to pass this to `doCleanup` if you disable the script.\nlocal scope = scoped(Fusion, {\n\tPlayerList = PlayerList\n})\n\nlocal players = scope:Value(Players:GetPlayers())\nlocal function updatePlayers()\n\tplayers:set(Players:GetPlayers())\nend\ntable.insert(scope, {\n\tPlayers.PlayerAdded:Connect(updatePlayers),\n\tPlayers.PlayerRemoving:Connect(updatePlayers)\n})\n\nlocal gui = scope:New \"ScreenGui\" {\n\tName = \"PlayerListGui\",\n\tParent = Players.LocalPlayer:FindFirstChildOfClass(\"PlayerGui\"),\n\n\t[Children] = scope:PlayerList {\n\t\tPlayers = players\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Destroying a Scope with Fusion.doCleanup in Lua\nDESCRIPTION: This snippet shows how to destroy a scope using the `Fusion.doCleanup()` function. `doCleanup` iterates through the scope in reverse order, calling the `destroy()` function (or equivalent) of each object in the scope. This ensures that all resources associated with the objects are released.\nSOURCE: https://github.com/dphfox/fusion/blob/main/docs/tutorials/fundamentals/scopes.md#_snippet_4\n\nLANGUAGE: Lua\nCODE:\n```\nlocal Fusion = require(ReplicatedStorage.Fusion)\n\nlocal scope = {}\nlocal thing1 = Fusion.Value(scope, \"i am thing 1\")\nlocal thing2 = Fusion.Value(scope, \"i am thing 2\")\nlocal thing3 = Fusion.Value(scope, \"i am thing 3\")\n\nFusion.doCleanup(scope)\n-- Using `doCleanup` is conceptually the same as:\n-- thing3:destroy()\n-- thing2:destroy()\n-- thing1:destroy()\n```\n\n----------------------------------------\n\nTITLE: Best Checkbox with UsedAs and Callback (Lua)\nDESCRIPTION: This snippet showcases the recommended approach using `UsedAs` for read-only properties and a callback (`OnClick`) for handling activation events. This design provides maximum flexibility, allowing users to plug in any data source for the state and customize the click behavior. `IsChecked` is a read-only boolean and `OnClick` is a function.\nSOURCE: https://github.com/dphfox/fusion/blob/main/docs/tutorials/best-practices/state.md#_snippet_3\n\nLANGUAGE: Lua\nCODE:\n```\nlocal function CheckBox(\n\tscope: Fusion.Scope,\n\tprops: {\n\t\tIsChecked: UsedAs<boolean>, -- best\n\t\tOnClick: () -> ()\n\t}\n)\n    return scope:New \"ImageButton\" {\n\t\t[OnEvent \"Activated\"] = function()\n\t\t\tprops.OnClick()\n\t\tend,\n\n        -- ... some more code ...\n    }\nend\n```\n\n----------------------------------------\n\nTITLE: Animating Values with Tween and Spring in Fusion (Luau)\nDESCRIPTION: This code demonstrates using Fusion's `Tween` and `Spring` functions to animate state object values. It showcases how to create a state object, then apply either a tween or spring animation to it. This allows you to animate any value, not just instance properties.\nSOURCE: https://github.com/dphfox/fusion/blob/main/docs/index.md#_snippet_6\n\nLANGUAGE: Lua\nCODE:\n```\n-- This could be anything you want, as long as it's a state object.\nlocal health = scope:Value(100)\n\n-- Easily make it tween between values...\nlocal style = TweenInfo.new(0.5, Enum.EasingStyle.Quad)\nlocal tweenHealth = scope:Tween(health, style)\n\n-- ...or use spring physics for extra responsiveness.\nlocal springHealth = scope:Spring(health, 30, 0.9)\n```\n\n----------------------------------------\n\nTITLE: Using onBind to Observe Initial and Subsequent Changes (Fusion/Lua)\nDESCRIPTION: This snippet shows how to use `:onBind()` to connect a function to an observer.  `:onBind()` is similar to `:onChange()`, but the connected function is executed immediately upon connection, and then again whenever the state object changes. This example also sets a new value to trigger subsequent observer calls.\nSOURCE: https://github.com/dphfox/fusion/blob/main/docs/tutorials/fundamentals/observers.md#_snippet_4\n\nLANGUAGE: Lua\nCODE:\n```\nlocal observer = scope:Observer(health)\n\nprint(\"...connecting...\")\nobserver:onBind(function()\n\tprint(\"Observed a change to: \", peek(health))\nend)\n\nprint(\"...setting health to 25...\")\nhealth:set(25)\n```\n\n----------------------------------------\n\nTITLE: Fusion.peek Function Definition in Lua\nDESCRIPTION: Defines the `Fusion.peek` function in Lua. This function extracts a value of type `T` from an input `target` that is `UsedAs<T>`. It serves as a general-purpose implementation of `Use` and doesn't perform any additional processing beyond determining the returned value. The function takes a `target` parameter, which represents an abstract representation of `T`, and returns the current value of `T` derived from `target`.\nSOURCE: https://github.com/dphfox/fusion/blob/main/docs/api-reference/state/members/peek.md#_snippet_0\n\nLANGUAGE: Lua\nCODE:\n```\nfunction Fusion.peek<T>(\n\ttarget: UsedAs<T>\n): T\n```\n\n----------------------------------------\n\nTITLE: TodoItem List Creation (Lua)\nDESCRIPTION: This snippet initializes a list of `TodoItem` objects. Each item has an ID, text, and a `completed` status represented as a Fusion.Value object, enabling reactivity. The ID and text are constant, while the completed status can be modified.\nSOURCE: https://github.com/dphfox/fusion/blob/main/docs/examples/cookbook/drag-and-drop.md#_snippet_6\n\nLANGUAGE: Lua\nCODE:\n```\nlocal todoItems: {TodoItem} = {\n\t{\n\t\tid = newUniqueID(),\n\t\ttext = \"Wake up today\",\n\t\tcompleted = scope:Value(true)\n\t},\n\t{\n\t\tid = newUniqueID(),\n\t\ttext = \"Read the Fusion docs\",\n\t\tcompleted = scope:Value(true)\n\t},\n\t{\n\t\tid = newUniqueID(),\n\t\ttext = \"Take over the universe\",\n\t\tcompleted = scope:Value(false)\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Cleanup Memory with Fusion.doCleanup in Lua\nDESCRIPTION: This Lua code defines the `Fusion.doCleanup` function, which attempts to destroy the provided task or value based on its runtime type.  It checks for function types (calls them), tables with `destroy` or `Destroy` methods (calls them), tables (recursively cleans up members), and Roblox instances or connections (destroys/disconnects them). It's a critical function for managing memory and preventing leaks in Fusion applications.\nSOURCE: https://github.com/dphfox/fusion/blob/main/docs/api-reference/memory/members/docleanup.md#_snippet_0\n\nLANGUAGE: Lua\nCODE:\n```\nfunction Fusion.doCleanup(\n\ttask: Fusion.Task\n): ()\n\n```\n\n----------------------------------------\n\nTITLE: Fusion.Safe Function Definition in Lua\nDESCRIPTION: Defines the Fusion.Safe function which takes a table of callbacks containing 'try' and 'fallback' functions.  The 'try' function attempts to execute, and if it succeeds, its return value is returned. If an error occurs, the 'fallback' function is called with the error, and its return value is returned.  This allows for safe execution of potentially error-prone code. The function is intended to behave like `xpcall` but returns only the function results, avoiding the success boolean.\nSOURCE: https://github.com/dphfox/fusion/blob/main/docs/api-reference/general/members/safe.md#_snippet_0\n\nLANGUAGE: Lua\nCODE:\n```\nfunction Fusion.Safe<Success, Fail>(\n\tcallbacks: {\n\t\ttry: () -> Success,\n\t\tfallback: (err: unknown) -> Fail\n\t}\n): Success | Fail\n```\n\n----------------------------------------\n\nTITLE: Updating a Computed based on a Value in Luau\nDESCRIPTION: This snippet shows how to use the `use` parameter to depend on a Fusion value in a computed. The computed returns a message including the value of `numCoins`.\nSOURCE: https://github.com/dphfox/fusion/blob/main/docs/tutorials/fundamentals/your-first-project.md#_snippet_7\n\nLANGUAGE: Lua\nCODE:\n```\nlocal scope = Fusion:scoped()\n\nlocal numCoins = scope:Value(50)\n\nlocal message = scope:Computed(function(use)\n\treturn \"The number of coins is \" .. use(numCoins)\nend)\n\nprint(Fusion.peek(message)) --> The number of coins is 50\n```\n\n----------------------------------------\n\nTITLE: Handling Errors with pcall() in Luau\nDESCRIPTION: This code snippet demonstrates how to handle errors using the `pcall()` function in Luau.  `pcall()` executes a function in a protected mode, catching any errors that occur within it. This allows the program to continue running even if an error occurs. The output shows that the program continues to execute after the potential error.\nSOURCE: https://github.com/dphfox/fusion/blob/main/docs/tutorials/best-practices/error-safety.md#_snippet_1\n\nLANGUAGE: Luau\nCODE:\n```\nprint(\"before\")\nprint(\"before\")\nprint(\"before\")\n\npcall(function()\n\terror(\"Kaboom!\")\nend)\n\nprint(\"after\")\nprint(\"after\")\nprint(\"after\")\n```\n\n----------------------------------------\n\nTITLE: Creating State Objects in Fusion Components (Lua)\nDESCRIPTION: This snippet demonstrates how to create state objects within a Fusion component using `scope:Value`. These state objects are automatically destroyed when the component is destroyed. The example shows how to define color constants and use them based on a boolean state (hovering).\nSOURCE: https://github.com/dphfox/fusion/blob/main/docs/tutorials/best-practices/state.md#_snippet_0\n\nLANGUAGE: Lua\nCODE:\n```\nlocal HOVER_COLOUR = Color3.new(0.5, 0.75, 1)\nlocal REST_COLOUR = Color3.new(0.25, 0.5, 1)\n\nlocal function Button(\n\tscope: Fusion.Scope,\n\tprops: {\n\t\t-- ... some properties ...\n\t}\n)\n    local isHovering = scope:Value(false)\n\n    return scope:New \"TextButton\" {\n        BackgroundColor3 = scope:Computed(function(use)\n            return if use(isHovering) then HOVER_COLOUR else REST_COLOUR\n        end),\n\n        -- ... ... some more code ...\n    }\nend\n```\n\n----------------------------------------\n\nTITLE: Using Inner Scopes in Computed Objects (Lua)\nDESCRIPTION: This code demonstrates the use of inner scopes within Computed objects to manage temporary objects and cleanup tasks.  It showcases how to use the second argument of the `scope:Computed` callback (a new scope) to insert cleanup tasks.  These tasks are automatically executed when the Computed object recalculates, ensuring that temporary objects are properly destroyed, preventing memory leaks and managing resources efficiently.\nSOURCE: https://github.com/dphfox/fusion/blob/main/docs/tutorials/fundamentals/computeds.md#_snippet_7\n\nLANGUAGE: Lua\nCODE:\n```\nlocal scope = scoped(Fusion)\nlocal number = scope:Value(5)\nlocal double = scope:Computed(function(use, myBrandNewScope)\n\t\tlocal current = use(number)\n\t\tprint(\"Creating\", current)\n\t\ttable.insert(myBrandNewScope, function()\n\t\t\tprint(\"Destroying\", current)\n\t\tend)\n\t\treturn current * 2\n\tend)\n\nprint(\"...setting to 25...\")\nnumber:set(25)\nprint(\"...setting to 2...\")\nnumber:set(2)\nprint(\"...cleaning up...\")\ndoCleanup(scope)\n```\n\n----------------------------------------\n\nTITLE: Explicit Error Handling with pcall() in Computed in Luau\nDESCRIPTION: This example uses `pcall()` to explicitly handle potential errors within a `Computed` object. If an error occurs during the calculation, `pcall()` catches it and returns a fallback value. This demonstrates how to provide a more helpful error message when a computation fails.\nSOURCE: https://github.com/dphfox/fusion/blob/main/docs/tutorials/best-practices/error-safety.md#_snippet_4\n\nLANGUAGE: Luau\nCODE:\n```\nlocal number = scope:Value(1)\nlocal double = scope:Computed(function(use)\n\tlocal number = use(number)\n\tlocal ok, result = pcall(function()\n\t\tassert(number ~= 3, \"I don't like the number 3\")\n\t\treturn number * 2\n\tend)\n\tif ok then\n\t\treturn result\n\telse\n\t\treturn \"failed: \" .. err\n\tend\nend)\n```\n\n----------------------------------------\n\nTITLE: Initializing a Spring Object in Lua\nDESCRIPTION: This code snippet demonstrates how to create a new spring object in Fusion using the `scope:Spring()` method. It takes a state object as an argument, which the spring will smoothly follow over time. A 'goal' state object is created as the target for the spring.\nSOURCE: https://github.com/dphfox/fusion/blob/main/docs/tutorials/animation/springs.md#_snippet_0\n\nLANGUAGE: Lua\nCODE:\n```\nlocal goal = scope:Value(0)\nlocal animated = scope:Spring(goal)\n```\n\n----------------------------------------\n\nTITLE: Component Definition with Typed Scope in Lua\nDESCRIPTION: This snippet shows how to provide a type annotation for the `scope` parameter in a Fusion component. This allows you to specify the methods that the scope is expected to have, enabling better type checking and code completion. It uses the `Fusion.Scope<YourMethodsHere>` type.\nSOURCE: https://github.com/dphfox/fusion/blob/main/docs/tutorials/best-practices/components.md#_snippet_6\n\nLANGUAGE: Lua\nCODE:\n```\nscope: Fusion.Scope<YourMethodsHere>\n```\n\n----------------------------------------\n\nTITLE: Initializing Roblox Services and Fusion Libraries (Lua)\nDESCRIPTION: This code snippet initializes the necessary Roblox services (Players) and Fusion library components (scoped, peek, Children). It also defines a TweenInfo object to configure the animation's characteristics.\nSOURCE: https://github.com/dphfox/fusion/blob/main/docs/examples/cookbook/animated-computed.md#_snippet_0\n\nLANGUAGE: Lua\nCODE:\n```\nlocal Players = game:GetService(\"Players\")\n\nlocal Fusion = -- initialise Fusion here however you please!\nlocal scoped = Fusion.scoped\nlocal peek = Fusion.peek\nlocal Children = Fusion.Children\n\nlocal TWEEN_INFO = TweenInfo.new(\n\t0.5,\n\tEnum.EasingStyle.Sine,\n\tEnum.EasingDirection.InOut\n)\n```\n\n----------------------------------------\n\nTITLE: Creating a Button Instance with the Button Component in Lua\nDESCRIPTION: This code demonstrates how to create an instance of the `Button` component defined previously. It calls the `Button` function, passing in a `scope` object and a table of properties including `ButtonText` and `Size`. The resulting `TextButton` instance is then parented to the player's `ScreenGui`.\nSOURCE: https://github.com/dphfox/fusion/blob/main/docs/tutorials/best-practices/components.md#_snippet_1\n\nLANGUAGE: Lua\nCODE:\n```\nlocal helloBtn = Button(scope, {\n    ButtonText = \"Hello\",\n    Size = UDim2.fromOffset(200, 50)\n})\n\nhelloBtn.Parent = Players.LocalPlayer.PlayerGui.ScreenGui\n```\n\n----------------------------------------\n\nTITLE: Creating OnChange Key (Lua)\nDESCRIPTION: This code shows how to create a special key by calling Fusion.OnChange with a property name as a string. This key can then be used in a property table to associate a handler function with changes to that property.  The returned key is used to connect the event to a handler.\nSOURCE: https://github.com/dphfox/fusion/blob/main/docs/tutorials/roblox/change-events.md#_snippet_2\n\nLANGUAGE: Lua\nCODE:\n```\nlocal key = OnChange(\"Text\")\n```\n\n----------------------------------------\n\nTITLE: Creating UI Element with Tween Animation (Lua)\nDESCRIPTION: This code creates a ScreenGui and a Frame (The Thing) using Fusion's `New` function and the `Children` object. The Frame's `Position` property is animated using `scope:Tween` and `scope:Computed` to smoothly transition between the center and off-screen positions based on the `showTheThing` value. The animation's properties are configured using the `TWEEN_INFO` object.\nSOURCE: https://github.com/dphfox/fusion/blob/main/docs/examples/cookbook/animated-computed.md#_snippet_2\n\nLANGUAGE: Lua\nCODE:\n```\nlocal exampleUI = scope:New \"ScreenGui\" {\n\tParent = Players.LocalPlayer:FindFirstChildOfClass(\"PlayerGui\"),\n\tName = \"Example UI\",\n\n\t[Children] = scope:New \"Frame\" {\n\t\tName = \"The Thing\",\n\t\tPosition = scope:Tween(\n\t\t\tscope:Computed(function(use)\n\t\t\t\tlocal CENTRE = UDim2.fromScale(0.5, 0.5)\n\t\t\t\tlocal OFFSCREEN = UDim2.fromScale(-0.5, 0.5)\n\t\t\t\treturn if use(showTheThing) then CENTRE else OFFSCREEN\n\t\t\tend),\n\t\t\tTWEEN_INFO\n\t\t),\n\t\tSize = UDim2.fromOffset(200, 200)\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Creating an Observer (Fusion/Lua)\nDESCRIPTION: This code demonstrates how to create a Fusion scope and a state object (Value) within that scope. It then creates an observer object to watch the created state object for changes. This assumes that `Fusion` and `scoped` are available in the environment.\nSOURCE: https://github.com/dphfox/fusion/blob/main/docs/tutorials/fundamentals/observers.md#_snippet_1\n\nLANGUAGE: Lua\nCODE:\n```\nlocal scope = scoped(Fusion)\nlocal health = scope:Value(5)\nlocal observer = scope:Observer(health)\n```\n\n----------------------------------------\n\nTITLE: Creating TextBox with OnChange Event Handler (Lua) - Explicit\nDESCRIPTION: This code creates a new TextBox instance and attaches an event handler to the 'Text' property using Fusion.OnChange.  When the 'Text' property of the TextBox changes, the provided function will be executed, printing the new text value to the console. This example uses the explicit parentheses around the property name.\nSOURCE: https://github.com/dphfox/fusion/blob/main/docs/tutorials/roblox/change-events.md#_snippet_3\n\nLANGUAGE: Lua\nCODE:\n```\nlocal input = scope:New \"TextBox\" {\n    [OnChange(\"Text\")] = function(newText)\n        print(\"You typed:\", newText)\n    end\n}\n```\n\n----------------------------------------\n\nTITLE: Using use() to Track Dependencies (Lua)\nDESCRIPTION: This example shows the correct way to track dependencies within a Computed object using the `use()` function.  By calling `use(number)`, the Computed object registers `number` as a dependency.  When `number`'s value changes, the Computed object will automatically recalculate its value. The return value of the `use()` function is the current value of the dependency.\nSOURCE: https://github.com/dphfox/fusion/blob/main/docs/tutorials/fundamentals/computeds.md#_snippet_4\n\nLANGUAGE: Lua\nCODE:\n```\nlocal scope = scoped(Fusion)\nlocal number = scope:Value(2)\nlocal double = scope:Computed(function(use, _)\n\tuse(number) -- the calculation will re-run when `number` changes value\n    return peek(number) * 2\nend)\n\nprint(peek(number), peek(double)) --> 2 4\n\n-- Now it re-runs!\nnumber:set(10)\nprint(peek(number), peek(double)) --> 10 20\n```\n\n----------------------------------------\n\nTITLE: PlayerList Component Definition (Lua)\nDESCRIPTION: This Lua code defines the `PlayerList` component, a Fusion component responsible for displaying the list of players. It takes a `scope` and `props` (containing the `Players` list) as arguments. The `Players` list should be a Fusion.UsedAs<{Player}> type. The component creates a Frame with styling and a UIListLayout for vertical arrangement. It dynamically creates TextLabel instances for each player in the `Players` list using the `ForValues` function, ensuring that the UI updates when players join or leave. Each TextLabel displays a player's DisplayName.\nSOURCE: https://github.com/dphfox/fusion/blob/main/docs/examples/cookbook/player-list.md#_snippet_1\n\nLANGUAGE: Lua\nCODE:\n```\nlocal function PlayerList(\n\tscope: Fusion.Scope,\n\tprops: {\n\t\tPlayers: UsedAs<{Player}>\n\t}\n): Fusion.Child\n```\n\n----------------------------------------\n\nTITLE: Attaching Event Handler using OnEvent\nDESCRIPTION: Demonstrates how to create a TextButton instance and attach an event handler to the 'Activated' event using Fusion's `OnEvent` function.  The handler prints a message including the number of clicks when the button is activated. Requires Fusion library.\nSOURCE: https://github.com/dphfox/fusion/blob/main/docs/tutorials/roblox/events.md#_snippet_0\n\nLANGUAGE: Lua\nCODE:\n```\nlocal button = scope:New \"TextButton\" {\n    [OnEvent \"Activated\"] = function(_, numClicks)\n        print(\"The button was pressed\", numClicks, \"time(s)!\")\n    end\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Fusion.Out (Lua)\nDESCRIPTION: This snippet shows how to import the `Fusion.Out` function directly from the Fusion library in Lua. This allows you to use `Out` without needing a scope.\nSOURCE: https://github.com/dphfox/fusion/blob/main/docs/tutorials/roblox/outputs.md#_snippet_1\n\nLANGUAGE: Lua\nCODE:\n```\nlocal Out = Fusion.Out\n```\n\n----------------------------------------\n\nTITLE: Updating a Fusion Value in Luau\nDESCRIPTION: This snippet demonstrates how to update the value of a Fusion value object using the `:set()` method. This triggers updates in any computeds that depend on the value.\nSOURCE: https://github.com/dphfox/fusion/blob/main/docs/tutorials/fundamentals/your-first-project.md#_snippet_8\n\nLANGUAGE: Lua\nCODE:\n```\nlocal scope = Fusion:scoped()\n\nlocal numCoins = scope:Value(50)\n\nlocal message = scope:Computed(function(use)\n\treturn \"The number of coins is \" .. use(numCoins)\nend)\n\nprint(Fusion.peek(message)) --> The number of coins is 50\n\nnumCoins:set(75)\n\nprint(Fusion.peek(message)) --> The number of coins is 75\n\n```\n\n----------------------------------------\n\nTITLE: Dynamic Theme Creation with Fusion\nDESCRIPTION: This snippet initializes Fusion, defines theme colors with light and dark variants, and creates dynamic Computed objects to switch between the variants based on the current theme. It uses Fusion.scoped for memory management and Fusion.Computed for dynamic color selection. It prints the background color for both light and dark themes using Fusion.peek to get the current value.\nSOURCE: https://github.com/dphfox/fusion/blob/main/docs/examples/cookbook/light-and-dark-theme.md#_snippet_0\n\nLANGUAGE: Lua\nCODE:\n```\nlocal Fusion = --initialise Fusion here however you please!\nlocal scoped = Fusion.scoped\nlocal peek = Fusion.peek\n\nlocal Theme = {}\n\nTheme.colours = {\n\tbackground = {\n\t\tlight = Color3.fromHex(\"FFFFFF\"),\n\t\tdark = Color3.fromHex(\"222222\")\n\t},\n\ttext = {\n\t\tlight = Color3.fromHex(\"222222\"),\n\t\tdark = Color3.fromHex(\"FFFFFF\")\n\t}\n}\n\n-- Don't forget to pass this to `doCleanup` if you disable the script.\nlocal scope = scoped(Fusion)\n\nTheme.current = scope:Value(\"light\")\nTheme.dynamic = {}\nfor colour, variants in Theme.colours do\n\tTheme.dynamic[colour] = scope:Computed(function(use)\n\t\treturn variants[use(Theme.current)]\n\tend)\nend\n\nTheme.current:set(\"light\")\nprint(peek(Theme.dynamic.background)) --> 255, 255, 255\n\nTheme.current:set(\"dark\")\nprint(peek(Theme.dynamic.background)) --> 34, 34, 34\n```\n\n----------------------------------------\n\nTITLE: Creating a Part Instance with Fusion New\nDESCRIPTION: This snippet shows how to create a `Part` instance using Fusion's `New` function with both the explicit parentheses syntax and the shorthand syntax when using curly braces and quotes.  It sets the `Parent` and `Color` properties.\nSOURCE: https://github.com/dphfox/fusion/blob/main/docs/tutorials/roblox/new-instances.md#_snippet_1\n\nLANGUAGE: Lua\nCODE:\n```\nlocal instance = scope:New(\"Part\")({\n\tParent = workspace,\n\tColor = Color3.new(1, 0, 0)\n})\n\n```\n\nLANGUAGE: Lua\nCODE:\n```\n-- This only works when you're using curly braces {} and quotes '' \"\"!\nlocal instance = scope:New \"Part\" {\n\tParent = workspace,\n\tColor = Color3.new(1, 0, 0)\n}\n```\n\n----------------------------------------\n\nTITLE: Hydrating an instance with Color Property\nDESCRIPTION: This snippet showcases how to hydrate an instance with a Color3 property using the `Hydrate` function. It demonstrates two ways to pass the property table: with and without parentheses when using curly braces.\nSOURCE: https://github.com/dphfox/fusion/blob/main/docs/tutorials/roblox/hydration.md#_snippet_1\n\nLANGUAGE: Lua\nCODE:\n```\nlocal instance = workspace.Part\n\nscope:Hydrate(instance)({\n\tColor = Color3.new(1, 0, 0)\n})\n```\n\nLANGUAGE: Lua\nCODE:\n```\nlocal instance = workspace.Part\n\n-- This only works when you're using curly braces {}!\nscope:Hydrate(instance) {\n\tColor = Color3.new(1, 0, 0)\n}\n```\n\n----------------------------------------\n\nTITLE: Fusion.Value Constructor Definition (Lua)\nDESCRIPTION: Defines the Fusion.Value constructor function in Lua. This function creates a new value state object, associating it with a given scope for memory management and setting an initial value. The scope determines when the value object will be destroyed, and the initial value is what the value will hold until explicitly changed.\nSOURCE: https://github.com/dphfox/fusion/blob/main/docs/api-reference/state/members/value.md#_snippet_0\n\nLANGUAGE: Lua\nCODE:\n```\nfunction Fusion.Value<T>(\n\tscope: Scope<unknown>,\n\tinitialValue: T\n) -> Value<T>\n```\n\n----------------------------------------\n\nTITLE: Using [Children] to Parent Instances (Lua)\nDESCRIPTION: These examples show how to use the `[Children]` property to parent instances within a Fusion component. It demonstrates passing a single component, an array of components, and state objects as children to a `ScreenGui`. The `[Children]` property allows inserting a component anywhere you would normally insert an instance, providing flexibility in UI construction.\nSOURCE: https://github.com/dphfox/fusion/blob/main/docs/tutorials/best-practices/instance-handling.md#_snippet_2\n\nLANGUAGE: Lua\nCODE:\n```\nlocal ui = scope:New \"ScreenGui\" {\n    [Children] = scope:Button {\n        Text = \"Hello, world!\"\n    }\n}\n```\n\nLANGUAGE: Lua\nCODE:\n```\nlocal ui = scope:New \"ScreenGui\" {\n    [Children] = {\n        scope:New \"UIListLayout\" {},\n\n        scope:Button {\n            Text = \"Hello, world!\"\n        },\n\n        scope:Button {\n            Text = \"Hello, again!\"\n        }\n    }\n}\n```\n\nLANGUAGE: Lua\nCODE:\n```\nlocal stuff = {\"Hello\", \"world\", \"from\", \"Fusion\"}\n\nlocal ui = scope:New \"ScreenGui\" {\n    [Children] = {\n        scope:New \"UIListLayout\" {},\n\n        scope:ForValues(stuff, function(use, scope, text)\n            return scope:Button {\n                Text = text\n            }\n        end)\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Component Definition with Typed Props in Lua\nDESCRIPTION: This code defines a component called `Cake` with type annotations for its properties. The `props` argument is explicitly typed to include `Size` (Vector3), `Colour` (Color3), and `IsTasty` (boolean). This allows for better type checking and autocompletion.\nSOURCE: https://github.com/dphfox/fusion/blob/main/docs/tutorials/best-practices/components.md#_snippet_3\n\nLANGUAGE: Lua\nCODE:\n```\nlocal function Cake(\n\t-- ... some stuff here ...\n\tprops: {\n\t\tSize: Vector3,\n\t\tColour: Color3,\n\t\tIsTasty: boolean\n\t}\n)\n\t-- ... some other stuff here ...\nend\n```\n\n----------------------------------------\n\nTITLE: Adding a Fusion.Value to a Scope in Lua\nDESCRIPTION: This snippet shows how to add a Fusion.Value object to a scope. The scope is passed as the first argument to `Fusion.Value`.  This allows the `Fusion.Value` object to add its `destroy()` function to the scope, ensuring it will be cleaned up when the scope is destroyed.\nSOURCE: https://github.com/dphfox/fusion/blob/main/docs/tutorials/fundamentals/scopes.md#_snippet_1\n\nLANGUAGE: Lua\nCODE:\n```\nlocal Fusion = require(ReplicatedStorage.Fusion)\n\nlocal scope = {}\nlocal thing = Fusion.Value(scope, \"i am a thing\")\n```\n\n----------------------------------------\n\nTITLE: Creating a Scope with Fusion.scoped() in Lua\nDESCRIPTION: This snippet demonstrates the recommended method for creating scopes using `Fusion.scoped()`.  `Fusion.scoped()` can reuse old arrays, optimizing memory usage. It returns a new scope that can be used to manage the lifecycle of objects.\nSOURCE: https://github.com/dphfox/fusion/blob/main/docs/tutorials/fundamentals/scopes.md#_snippet_5\n\nLANGUAGE: Lua\nCODE:\n```\nlocal Fusion = require(ReplicatedStorage.Fusion)\nlocal scoped = Fusion.scoped\n\nlocal scope = scoped()\nlocal thing1 = Fusion.Value(scope, \"i am thing 1\")\nlocal thing2 = Fusion.Value(scope, \"i am thing 2\")\nlocal thing3 = Fusion.Value(scope, \"i am thing 3\")\n\nFusion.doCleanup(scope)\n```\n\n----------------------------------------\n\nTITLE: Spring Function Definition in Lua\nDESCRIPTION: Defines the `Fusion.Spring` function which constructs and returns a new spring state object. It requires a scope, a goal, and optional speed and damping parameters.\nSOURCE: https://github.com/dphfox/fusion/blob/main/docs/api-reference/animation/members/spring.md#_snippet_0\n\nLANGUAGE: Lua\nCODE:\n```\nfunction Fusion.Spring<T>(\n\tscope: Scope<unknown>,\n\tgoal: UsedAs<T>,\n\tspeed: UsedAs<number>?,\n\tdamping: UsedAs<number>?\n) -> Spring<T>\n```\n\n----------------------------------------\n\nTITLE: Creating TextBox with OnChange Event Handler (Lua)\nDESCRIPTION: This code creates a new TextBox instance using scope:New and attaches an event handler to the 'Text' property using Fusion.OnChange.  When the 'Text' property of the TextBox changes, the provided function will be executed, printing the new text value to the console. The example uses the shorthand syntax for OnChange without parentheses.\nSOURCE: https://github.com/dphfox/fusion/blob/main/docs/tutorials/roblox/change-events.md#_snippet_0\n\nLANGUAGE: Lua\nCODE:\n```\nlocal input = scope:New \"TextBox\" {\n    [OnChange \"Text\"] = function(newText)\n        print(\"You typed:\", newText)\n    end\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a SpecialKey for an Event in Roblox (Fusion)\nDESCRIPTION: This code snippet defines the `Fusion.OnEvent` function, which creates a special key for listening to events. It takes the event name as a string argument.  The returned SpecialKey can be used in property tables with a callback function to execute code when the corresponding event is fired.  Dependencies: Fusion library and knowledge of Roblox events.\nSOURCE: https://github.com/dphfox/fusion/blob/main/docs/api-reference/roblox/members/onevent.md#_snippet_0\n\nLANGUAGE: Lua\nCODE:\n```\nfunction Fusion.OnEvent(\n\teventName: string\n): SpecialKey\n```\n\n----------------------------------------\n\nTITLE: Setting Value with :set()\nDESCRIPTION: This snippet shows how to change the value of a Fusion Value object using the `:set()` method.  It demonstrates initializing the value, reading it, then modifying it with `:set()`, and reading the updated value. The initial and updated values are printed to the console.\nSOURCE: https://github.com/dphfox/fusion/blob/main/docs/tutorials/fundamentals/values.md#_snippet_3\n\nLANGUAGE: Lua\nCODE:\n```\nlocal scope = scoped(Fusion)\nlocal health = scope:Value(5)\nprint(peek(health)) --> 5\n\nhealth:set(25)\nprint(peek(health)) --> 25\n```\n\n----------------------------------------\n\nTITLE: Creating a Computed Value for Position (Lua)\nDESCRIPTION: This snippet shows how to create a Fusion `Computed` object that calculates the position of the UI element based on the `showTheThing` value. It returns either the center or off-screen position using UDim2 values.\nSOURCE: https://github.com/dphfox/fusion/blob/main/docs/examples/cookbook/animated-computed.md#_snippet_5\n\nLANGUAGE: Lua\nCODE:\n```\nscope:Computed(function(use)\n\tlocal CENTRE = UDim2.fromScale(0.5, 0.5)\n\tlocal OFFSCREEN = UDim2.fromScale(-0.5, 0.5)\n\treturn if use(showTheThing) then CENTRE else OFFSCREEN\nend)\n```\n\n----------------------------------------\n\nTITLE: Fusion.Children SpecialKey Definition in Lua\nDESCRIPTION: Defines the Fusion.Children special key. This key is used in Fusion to automatically parent child instances under a specified instance. It explores the `Child` to find every `Instance` nested inside and then parents those instances under the instance which the special key was applied to. It recursively explores arrays and binds to any state objects.\nSOURCE: https://github.com/dphfox/fusion/blob/main/docs/api-reference/roblox/members/children.md#_snippet_0\n\nLANGUAGE: Lua\nCODE:\n```\nFusion.Children: SpecialKey\n```\n\n----------------------------------------\n\nTITLE: Overriding a Contextual Value (Lua)\nDESCRIPTION: This Lua code demonstrates how to override the value of a contextual named `myContextual` for a limited time using `:is():during()`. The value is temporarily set to \"bar\" within the callback function. This showcases the temporary overriding capabilities of contextuals. Requires the Fusion library.\nSOURCE: https://github.com/dphfox/fusion/blob/main/docs/tutorials/best-practices/sharing-values.md#_snippet_6\n\nLANGUAGE: Lua\nCODE:\n```\nlocal myContextual = Contextual(\"foo\")\nprint(myContextual:now()) --> foo\n\nmyContextual:is(\"bar\"):during(function()\n\tprint(myContextual:now()) --> bar\nend)\n\nprint(myContextual:now()) --> foo\n```\n\n----------------------------------------\n\nTITLE: Creating an Inner Scope with Fusion.innerScope() in Lua\nDESCRIPTION: This snippet demonstrates using `innerScope`, which creates a new scope that is automatically cleaned up when the original scope is cleaned up. This ensures that inner scopes do not persist beyond the lifetime of their parent scopes, preventing memory leaks.\nSOURCE: https://github.com/dphfox/fusion/blob/main/docs/tutorials/fundamentals/scopes.md#_snippet_13\n\nLANGUAGE: Lua\nCODE:\n```\nlocal uiScope = scoped(Fusion)\n\n-- ... create the ui ...\n\nuiScope:insert(\n\tdropdownOpened:Connect(function()\n\t\tlocal dropdownScope = uiScope:innerScope()\n\n\t\t-- ... create the dropdown ...\n\n\t\tdropdownScope:insert(\n\t\t\tdropdownClosed:Connect(function()\n\t\t\t\tdropdownScope:doCleanup()\n\t\t\tend)\n\t\t)\n\tend)\n)\n```\n\n----------------------------------------\n\nTITLE: Component with Provided and External Children (Lua)\nDESCRIPTION: This example shows how a component can combine its own children with instances passed in through the `[Children]` property.  It creates a Frame with a UICorner (provided by the component) and then appends the children passed in via props to the same Frame. This allows the component to augment external content with its own UI elements.\nSOURCE: https://github.com/dphfox/fusion/blob/main/docs/tutorials/best-practices/instance-handling.md#_snippet_5\n\nLANGUAGE: Lua\nCODE:\n```\nscope:New \"Frame\" {\n\t-- ... some other properties ...\n\n\t[Children] = {\n\t\t-- the component provides some children here\n\t\tscope:New \"UICorner\" {\n\t\t\tCornerRadius = UDim.new(0, 8)\n\t\t},\n\n\t\t-- include children from outside the component here\n\t\tprops[Children]\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Hydrating an instance for declaration\nDESCRIPTION: This code shows how the `Hydrate` function can be used in variable declarations. The instance returned by `Hydrate` is assigned to the `instance` variable.\nSOURCE: https://github.com/dphfox/fusion/blob/main/docs/tutorials/roblox/hydration.md#_snippet_2\n\nLANGUAGE: Lua\nCODE:\n```\nlocal instance = scope:Hydrate(workspace.Part) {\n\tColor = Color3.new(1, 0, 0)\n}\n```\n\n----------------------------------------\n\nTITLE: Using Arrays for Multiple Children in Lua\nDESCRIPTION: This snippet shows how to add multiple children to a Folder using an array.  Each element in the array is a `scope:New` call that creates a Part instance.  All Part instances in the array become children of the Folder.\nSOURCE: https://github.com/dphfox/fusion/blob/main/docs/tutorials/roblox/parenting.md#_snippet_4\n\nLANGUAGE: Lua\nCODE:\n```\n-- Makes a Folder, containing parts called Gregory and Sammy\nlocal folder = scope:New \"Folder\" {\n    [Children] = {\n        scope:New \"Part\" {\n            Name = \"Gregory\",\n            Color = Color3.new(1, 0, 0)\n        },\n        scope:New \"Part\" {\n            Name = \"Sammy\",\n            Material = \"Glass\"\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating the Spinner Component in Lua\nDESCRIPTION: This Lua snippet defines the `Spinner` component, a reusable UI element that displays a spinning image. It takes a `scope` and `props` as arguments, where `props` contains layout information and a `CurrentTime` property, which drives the rotation animation.\nSOURCE: https://github.com/dphfox/fusion/blob/main/docs/examples/cookbook/loading-spinner.md#_snippet_1\n\nLANGUAGE: Lua\nCODE:\n```\nlocal function Spinner(\n\tscope: Fusion.Scope,\n\tprops: {\n\t\tLayout: {\n\t\t\tLayoutOrder: UsedAs<number>?,\n\t\t\tPosition: UsedAs<UDim2>?,\n\t\t\tAnchorPoint: UsedAs<Vector2>?,\n\t\t\tZIndex: UsedAs<number>?\n\t\t},\n\t\tCurrentTime: UsedAs<number>,\n\t}\n): Fusion.Child\n\treturn scope:New \"ImageLabel\" {\n\t\tName = \"Spinner\",\n\n\t\tLayoutOrder = props.Layout.LayoutOrder,\n\t\tPosition = props.Layout.Position,\n\t\tAnchorPoint = props.Layout.AnchorPoint,\n\t\tZIndex = props.Layout.ZIndex,\n\n\t\tSize = UDim2.fromOffset(SPIN_SIZE, SPIN_SIZE),\n\n\t\tBackgroundTransparency = 1,\n\t\tImage = \"rbxassetid://your-loading-spinner-image\", -- replace this!\n\n\t\tRotation = scope:Computed(function(use)\n\t\t\treturn (use(props.CurrentTime) * SPIN_DEGREES_PER_SECOND) % 360\n\t\tend)\n\t}\nend\n```\n\n----------------------------------------\n\nTITLE: Reparenting Draggable Component (Lua)\nDESCRIPTION: This code snippet shows how the `Draggable` component dynamically changes its parent based on the `Dragging.SelfDragInfo` property. When dragging, it reparents itself to the `OverlayFrame`; otherwise, it uses the regular `Parent` property. The `use` function likely accesses Fusion values.\nSOURCE: https://github.com/dphfox/fusion/blob/main/docs/examples/cookbook/drag-and-drop.md#_snippet_1\n\nLANGUAGE: Lua\nCODE:\n```\n\t\tParent = scope:Computed(function(use)\n\t\t\treturn\n\t\t\t\tif use(props.Dragging.SelfDragInfo) ~= nil\n\t\t\t\tthen use(props.Dragging.OverlayFrame)\n\t\t\t\telse use(props.Parent)\n\t\tend),\n```\n\n----------------------------------------\n\nTITLE: Passing a Table of Functions to Fusion.scoped() in Lua\nDESCRIPTION: This snippet demonstrates how to pass a table of functions to `Fusion.scoped()`.  This allows you to access these functions as methods directly on the scope, simplifying code and reducing errors. The scope can then be used for object creation and cleanup.\nSOURCE: https://github.com/dphfox/fusion/blob/main/docs/tutorials/fundamentals/scopes.md#_snippet_6\n\nLANGUAGE: Lua\nCODE:\n```\nlocal Fusion = require(ReplicatedStorage.Fusion)\nlocal scoped = Fusion.scoped\n\nlocal scope = scoped({\n\tValue = Fusion.Value,\n\tdoCleanup = Fusion.doCleanup\n})\nlocal thing1 = Fusion.Value(scope, \"i am thing 1\")\nlocal thing2 = Fusion.Value(scope, \"i am thing 2\")\nlocal thing3 = Fusion.Value(scope, \"i am thing 3\")\n\nFusion.doCleanup(scope)\n```\n\n----------------------------------------\n\nTITLE: Using Safe for Conditional UI Rendering in Luau\nDESCRIPTION: This example shows how `Safe` can be used to conditionally render error components directly within a larger UI structure.  If the `try` function succeeds, the `scope:FormattedForumPost` component is returned. If an error occurs, the `fallback` function returns an `scope:ErrorPage` component, displaying an error message.\nSOURCE: https://github.com/dphfox/fusion/blob/main/docs/tutorials/best-practices/error-safety.md#_snippet_9\n\nLANGUAGE: Luau\nCODE:\n```\n[Children] = Safe {\n\ttry = function()\n\t\treturn scope:FormattedForumPost {\n\t\t\t-- ... properties ...\n\t\t}\n\tend,\n\tfallback = function(err)\n\t\treturn scope:ErrorPage {\n\t\t\ttitle = \"An error occurred while showing this forum post\",\n\t\t\terrorMessage = tostring(err)\n\t\t}\n\tend\n}\n```\n\n----------------------------------------\n\nTITLE: Fusion: Button Component with OnClick Callback (Empty)\nDESCRIPTION: This code defines a Fusion Button component that accepts an optional `OnClick` callback as part of its `props`. The `[OnEvent \"Activated\"]` property is intended to be assigned the `OnClick` callback, enabling the button to execute custom code when clicked. The highlighted line indicates where the callback assignment should occur, before incorporating the callback functionality.\nSOURCE: https://github.com/dphfox/fusion/blob/main/docs/tutorials/best-practices/callbacks.md#_snippet_2\n\nLANGUAGE: Lua\nCODE:\n```\nlocal function Button(\n\tscope: Fusion.Scope,\n\tprops: {\n\t\tPosition: UsedAs<UDim2>?,\n\t\tSize: UsedAs<UDim2>?,\n\t\tText: UsedAs<string>?\n\t}\n)   \n\treturn scope:New \"TextButton\" {\n        BackgroundColor3 = Color3.new(0.25, 0.5, 1),\n        Position = props.Position,\n        Size = props.Size,\n\n        Text = props.Text,\n        TextColor3 = Color3.new(1, 1, 1),\n\n        [OnEvent \"Activated\"] = -- ???\n    }\nend\n```\n\n----------------------------------------\n\nTITLE: Fusion: Using the Button Component with OnClick Callback\nDESCRIPTION: This shows how to use the button component and pass an `OnClick` callback to it, which will print \"The button was clicked\" to the console when the button is activated (clicked).\nSOURCE: https://github.com/dphfox/fusion/blob/main/docs/tutorials/best-practices/callbacks.md#_snippet_3\n\nLANGUAGE: Lua\nCODE:\n```\nlocal button = scope:Button {\n    Text = \"Hello, world!\",\n    OnClick = function()\n        print(\"The button was clicked\")\n    end\n}\n```\n\n----------------------------------------\n\nTITLE: Optimizing with Frozen Tables - Luau\nDESCRIPTION: Demonstrates how freezing tables can optimize updates in Fusion. By freezing the theme tables, Fusion can skip updates when the theme is set to the same value multiple times, reducing unnecessary computations. This highlights the benefit of using immutable data structures.\nSOURCE: https://github.com/dphfox/fusion/blob/main/docs/tutorials/best-practices/optimisation.md#_snippet_3\n\nLANGUAGE: Lua\nCODE:\n```\nlocal LIGHT_THEME = table.freeze {\n\t\tname = \"light\",\n\t\t-- imagine theme colours in here\n\t}\n\tlocal DARK_THEME = table.freeze {\n\t\tname = \"dark\",\n\t\t-- imagine theme colours in here\n\t}\n\tlocal currentTheme = scope:Value(LIGHT_THEME)\n\tscope:Observer(currentTheme):onChange(function()\n\t\tprint(\"-> currentTheme changed to \" .. peek(currentTheme).name)\n\tend)\n\n\tprint(\"Set to DARK_THEME\")\n\tcurrentTheme:set(DARK_THEME)\n\tprint(\"Set to DARK_THEME\")\n\tcurrentTheme:set(DARK_THEME)\n\tprint(\"Set to LIGHT_THEME\")\n\tcurrentTheme:set(LIGHT_THEME)\n\tprint(\"Set to LIGHT_THEME\")\n\tcurrentTheme:set(LIGHT_THEME)\n```\n\n----------------------------------------\n\nTITLE: Processing Animated Values in Fusion (Luau)\nDESCRIPTION: This code shows how to process animated values from a Fusion state object. It demonstrates using a `Computed` state object to round the animated `health` value to whole numbers, then format it as text for display in a UI element. This showcases how to transform and use animated values in various ways.\nSOURCE: https://github.com/dphfox/fusion/blob/main/docs/index.md#_snippet_7\n\nLANGUAGE: Lua\nCODE:\n```\n-- You can round the animated health to whole numbers.\nlocal wholeHealth = scope:Computed(function(use)\n\treturn math.round(use(health))\nend)\n\n-- You can format it as text and put it in some UI, too.\nlocal myText = scope:New \"TextLabel\" {\n\tText = scope:Computed(function(use)\n\t\treturn \"Health: \" .. use(wholeHealth)\n\tend)\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Computed Value with peek() (Lua)\nDESCRIPTION: This example illustrates how to access the current value of a Computed object using the `peek()` function. The Computed object's value is the result of the calculation defined in its callback function. This snippet demonstrates retrieving the computed value after the object has been initialized.\nSOURCE: https://github.com/dphfox/fusion/blob/main/docs/tutorials/fundamentals/computeds.md#_snippet_2\n\nLANGUAGE: Lua\nCODE:\n```\nlocal scope = scoped(Fusion)\nlocal hardMaths = scope:Computed(function(_, _)\n    return 1 + 1\nend)\n\nprint(peek(hardMaths)) --> 2\n```\n\n----------------------------------------\n\nTITLE: Type Constraining with Fusion.Child in Lua\nDESCRIPTION: This code snippet demonstrates the use of `Fusion.Child` function in Luau to constrain the type of a variable. It takes a value assumed to be of `Child` type as input and returns the same value with the specified type. This function serves as a hint to the Luau type system and performs no actual processing.\nSOURCE: https://github.com/dphfox/fusion/blob/main/docs/api-reference/roblox/members/child.md#_snippet_0\n\nLANGUAGE: Lua\nCODE:\n```\nfunction Fusion.Child(\n\tchild: Child\n): Child\n```\n\n----------------------------------------\n\nTITLE: Importing OnEvent from Fusion\nDESCRIPTION: Shows how to import the `OnEvent` function directly from the Fusion library. This allows you to use `OnEvent` without needing a scope. Requires the Fusion library to be available.\nSOURCE: https://github.com/dphfox/fusion/blob/main/docs/tutorials/roblox/events.md#_snippet_1\n\nLANGUAGE: Lua\nCODE:\n```\nlocal OnEvent = Fusion.OnEvent\n```\n\n----------------------------------------\n\nTITLE: Hydrating UI with a Fusion Value\nDESCRIPTION: This code demonstrates how to hydrate a UI element using a Fusion `Value`. The `showUI` variable is initialized as a Fusion `Value` and used to control the `Enabled` property of the UI. Changes to the `showUI` value are reflected in the UI element after a frame.\nSOURCE: https://github.com/dphfox/fusion/blob/main/docs/tutorials/roblox/hydration.md#_snippet_0\n\nLANGUAGE: Lua\nCODE:\n```\nlocal showUI = scope:Value(false)\n\nlocal ui = scope:Hydrate(StarterGui.Template:Clone()) {\n\tName = \"MainGui\",\n\tEnabled = showUI\n}\n\nprint(ui.Name) --> MainGui\nprint(ui.Enabled) --> false\n\nshowUI:set(true)\ntask.wait() -- important: changes are applied on the next frame!\nprint(ui.Enabled) --> true\n```\n\n----------------------------------------\n\nTITLE: Initializing ForValues with Constant Table and State Object - Lua\nDESCRIPTION: This code demonstrates how to initialize a `ForValues` object with a constant table (`numbers`) and a state object (`multiplier`). The `ForValues` object multiplies each number in the table by the value of the `multiplier` state object.  It showcases the dynamic nature of the `ForValues` object by updating the output when the `multiplier` state object changes. Dependencies: Fusion scope object is assumed.\nSOURCE: https://github.com/dphfox/fusion/blob/main/docs/tutorials/tables/forvalues.md#_snippet_0\n\nLANGUAGE: Lua\nCODE:\n```\nlocal numbers = {1, 2, 3, 4, 5}\nlocal multiplier = scope:Value(2)\n\nlocal multiplied = scope:ForValues(numbers, function(use, scope, num)\n\treturn num * use(multiplier)\nend)\n\nprint(peek(multiplied)) --> {2, 4, 6, 8, 10}\n\nmultiplier:set(10)\nprint(peek(multiplied)) --> {10, 20, 30, 40, 50}\n```\n\n----------------------------------------\n\nTITLE: Using `ForPairs` with a state object as input in Lua\nDESCRIPTION: Demonstrates the usage of a state object as the input table for `ForPairs`. The output table updates whenever the input state object changes.  The keys and values are swapped within the processor function.\nSOURCE: https://github.com/dphfox/fusion/blob/main/docs/tutorials/tables/forpairs.md#_snippet_3\n\nLANGUAGE: Lua\nCODE:\n```\nlocal itemColours = scope:Value({ shoes = \"red\", socks = \"blue\" })\nlocal swapped = scope:ForPairs(data, function(use, scope, item, colour)\n\treturn colour, item\nend)\n\nprint(peek(swapped)) --> { red = \"shoes\", blue = \"socks\" }\n\nitemColours:set({ sandals = \"red\", socks = \"green\" })\nprint(peek(swapped)) --> { red = \"sandals\", green = \"socks\" }\n```\n\n----------------------------------------\n\nTITLE: Detecting Initial Value with onBind in Luau\nDESCRIPTION: This snippet demonstrates how to use the `:onBind()` method on a Fusion observer.  `:onBind()` immediately executes the callback when the observer is created, and also executes it every time the observed value changes.\nSOURCE: https://github.com/dphfox/fusion/blob/main/docs/tutorials/fundamentals/your-first-project.md#_snippet_11\n\nLANGUAGE: Lua\nCODE:\n```\nlocal scope = Fusion:scoped()\n\nlocal numCoins = scope:Value(50)\n\nlocal message = scope:Computed(function(use)\n\treturn \"The number of coins is \" .. use(numCoins)\nend)\n\nscope:Observer(message):onBind(function()\n\tprint(Fusion.peek(message))\nend)\n\n--> The number of coins is 50\n\nnumCoins:set(75)\n\n--> The number of coins is 75\n```\n\n----------------------------------------\n\nTITLE: Initializing Folder with Children using Fusion in Lua\nDESCRIPTION: This code snippet demonstrates initializing a Folder instance with child Part instances using the Fusion library in Roblox. It uses the `scope:New` function to create a new Folder and the `[Children]` key to define its children. Each child is a Part instance with specified properties like Name and Color or Material.\nSOURCE: https://github.com/dphfox/fusion/blob/main/docs/tutorials/roblox/parenting.md#_snippet_0\n\nLANGUAGE: Lua\nCODE:\n```\nlocal folder = scope:New \"Folder\" {\n    [Children] = {\n        New \"Part\" {\n            Name = \"Gregory\",\n            Color = Color3.new(1, 0, 0)\n        },\n        New \"Part\" {\n            Name = \"Sammy\",\n            Material = \"Glass\"\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using the scoped() method syntax in Lua\nDESCRIPTION: This example shows the recommended method syntax for creating a computed state object. It demonstrates the `Computed` function as a method called on a scope object.  This approach provides a cleaner and more intuitive way to integrate computed values within the scoped management system.\nSOURCE: https://github.com/dphfox/fusion/blob/main/docs/api-reference/state/members/computed.md#_snippet_1\n\nLANGUAGE: Lua\nCODE:\n```\nlocal computed = scope:Computed(processor)\n```\n\n----------------------------------------\n\nTITLE: Dynamically Update Player List (Lua)\nDESCRIPTION: This Lua code creates a Fusion `Value` object to store the current list of players. It defines a function `updatePlayers` that updates this `Value` with the latest player list from `Players:GetPlayers()`. Event listeners are attached to `Players.PlayerAdded` and `Players.PlayerRemoving` to call `updatePlayers` whenever a player joins or leaves.  This ensures the player list is always up-to-date.\nSOURCE: https://github.com/dphfox/fusion/blob/main/docs/examples/cookbook/player-list.md#_snippet_3\n\nLANGUAGE: Lua\nCODE:\n```\nlocal players = scope:Value(Players:GetPlayers())\nlocal function updatePlayers()\n\tplayers:set(Players:GetPlayers())\nend\ntable.insert(scope, {\n\tPlayers.PlayerAdded:Connect(updatePlayers),\n\tPlayers.PlayerRemoving:Connect(updatePlayers)\n})\n```\n\n----------------------------------------\n\nTITLE: UI Setup and Parenting (Lua)\nDESCRIPTION: This code creates a ScreenGui and parents the overlay frame and task lists to it. Critically, the dynamically created TodoEntry components manage their own parenting, so they are not passed as children of the ScreenGui.\nSOURCE: https://github.com/dphfox/fusion/blob/main/docs/examples/cookbook/drag-and-drop.md#_snippet_11\n\nLANGUAGE: Lua\nCODE:\n```\nlocal ui = scope:New \"ScreenGui\" {\n\tParent = Players.LocalPlayer:FindFirstChildOfClass(\"PlayerGui\"),\n\n\t[Children] = {\n\t\toverlayFrame,\n\t\ttaskLists,\n\t\t-- Don't pass the generated `TodoEntry`s in here - they manage their own parent!\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Fusion: Button Component with Manual OnClick Processing\nDESCRIPTION: This implementation provides the most flexibility, the button component checks if an `OnClick` callback is provided and if the button is not disabled before calling the callback function. This snippet shows how to manually invoke the callback.\nSOURCE: https://github.com/dphfox/fusion/blob/main/docs/tutorials/best-practices/callbacks.md#_snippet_5\n\nLANGUAGE: Lua\nCODE:\n```\nlocal function Button(\n\tscope: Fusion.Scope,\n\tprops: {\n\t\tPosition: UsedAs<UDim2>?,\n\t\tSize: UsedAs<UDim2>?,\n\t\tText: UsedAs<string>?,\n\t\tDisabled: UsedAs<boolean>?,\n\t\tOnClick: (() -> ())?\n\t}\n)   \n\treturn scope:New \"TextButton\" {\n        BackgroundColor3 = Color3.new(0.25, 0.5, 1),\n        Position = props.Position,\n        Size = props.Size,\n\n        Text = props.Text,\n        TextColor3 = Color3.new(1, 1, 1),\n\n        [OnEvent \"Activated\"] = function()\n            if props.OnClick ~= nil and not peek(props.Disabled) then\n                props.OnClick()\n            end\n        end\n    }\nend\n```\n\n----------------------------------------\n\nTITLE: Initializing ForKeys with Constant Data - Lua\nDESCRIPTION: This snippet demonstrates initializing a `ForKeys` object with a constant table and a function that prefixes the keys. It shows how the output table is transformed based on the input data and the provided function, including updates when a used state object changes.\nSOURCE: https://github.com/dphfox/fusion/blob/main/docs/tutorials/tables/forkeys.md#_snippet_0\n\nLANGUAGE: Lua\nCODE:\n```\nlocal data = {Red = \"foo\", Blue = \"bar\"}\nlocal prefix = scope:Value(\"Key_\")\n\nlocal renamed = scope:ForKeys(data, function(use, scope, key)\n\treturn use(prefix) .. key\nend)\n\nprint(peek(renamed)) --> {Key_Red = \"foo\", Key_Blue = \"bar\"}\n\nprefix:set(\"colour\")\nprint(peek(renamed)) --> {colourRed = \"foo\", colourBlue = \"bar\"}\n```\n\n----------------------------------------\n\nTITLE: Using :set() in calculations\nDESCRIPTION: This snippet illustrates using the `:set()` method within a calculation.  The result of `:set()` is used directly in an arithmetic expression.  `myNumber:set(2 + 2)` sets the value of `myNumber` to 4 and also returns 4, which is then added to 10, resulting in `computation` being 14.\nSOURCE: https://github.com/dphfox/fusion/blob/main/docs/tutorials/fundamentals/values.md#_snippet_4\n\nLANGUAGE: Lua\nCODE:\n```\nlocal myNumber = scope:Value(0)\nlocal computation = 10 + myNumber:set(2 + 2)\nprint(computation) --> 14\nprint(peek(myNumber)) --> 4\n```\n\n----------------------------------------\n\nTITLE: Global Theme Module with State (Lua)\nDESCRIPTION: This Lua code defines a global theme module with state management using Fusion. It includes color definitions for light and dark themes and an `init` function that initializes the `currentTheme` using a `scope:Value` from Fusion. This allows dynamic theme switching but relies on global state. Requires Fusion library.\nSOURCE: https://github.com/dphfox/fusion/blob/main/docs/tutorials/best-practices/sharing-values.md#_snippet_2\n\nLANGUAGE: Lua\nCODE:\n```\nlocal Fusion = require(\"path/to/Fusion.luau\")\n\nlocal Theme = {}\n\nTheme.colours = {\n\tbackground = {\n\t\tlight = Color3.fromHex(\"FFFFFF\"),\n\t\tdark = Color3.fromHex(\"222222\")\n\t},\n\ttext = {\n\t\tlight = Color3.fromHex(\"FFFFFF\"),\n\t\tdark = Color3.fromHex(\"222222\")\n\t},\n\t-- etc.\n}\n\nfunction Theme.init(\n\tscope: Fusion.Scope\n)\n\tTheme.currentTheme = scope:Value(\"light\")\nend\n\nreturn Theme\n```\n\n----------------------------------------\n\nTITLE: Drag End Handler (Lua)\nDESCRIPTION: This snippet handles the end of a drag operation via UserInputService's InputEnded event. It checks for MouseButton1 release, retrieves drag information, determines the drop action (mark as complete/incomplete) based on the hovered destination, and updates the todo item's `completed` status accordingly. Finally, it clears the `currentlyDragging` state.\nSOURCE: https://github.com/dphfox/fusion/blob/main/docs/examples/cookbook/drag-and-drop.md#_snippet_10\n\nLANGUAGE: Lua\nCODE:\n```\ntable.insert(scope,\n\tUserInputService.InputEnded:Connect(function(inputObject)\n\t\tif inputObject.UserInputType ~= Enum.UserInputType.MouseButton1 then\n\t\t\treturn\n\t\tend\n\t\tlocal dragInfo = peek(currentlyDragging)\n\t\tif dragInfo == nil then\n\t\t\treturn\n\t\tend\n\t\tlocal item = getTodoItemForID(dragInfo.id)\n\t\tlocal action = peek(dropAction)\n\t\tif item ~= nil then\n\t\t\tif action == \"mark-as-incomplete\" then\n\t\t\t\titem.completed:set(false)\n\t\t\telseif action == \"mark-as-completed\" then\n\t\t\t\titem.completed:set(true)\n\t\t\tend\n\t\tend\n\t\tcurrentlyDragging:set(nil)\n\tend)\n)\n```\n\n----------------------------------------\n\nTITLE: Creating Instances with Events and Children in Fusion (Luau)\nDESCRIPTION: This code snippet demonstrates how to create instances with event listeners and child instances using Fusion. It illustrates how to define event handlers inline using `OnEvent` and create child instances using `Children`. This keeps instance configurations concise and organized.\nSOURCE: https://github.com/dphfox/fusion/blob/main/docs/index.md#_snippet_4\n\nLANGUAGE: Lua\nCODE:\n```\n-- This will create a rounded button.\n-- When you click it, it’ll greet you.\nlocal myButton = scope:New \"TextButton\" {\n\tText = \"Click me\",\n\n\t[OnEvent \"Activated\"] = function()\n\t\tprint(\"Hello! I’m a button.\")\n\tend,\n\n\t[Children] = scope:New \"UICorner\" {\n\t\tCornerRadius = UDim.new(1, 0)\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Fusion: Component Children Callbacks\nDESCRIPTION: This snippet demonstrates a custom `Build` function callback to dynamically create children components on demand. A `scope` parameter is passed in order to let the component change when these children are destroyed if it needs to.\nSOURCE: https://github.com/dphfox/fusion/blob/main/docs/tutorials/best-practices/callbacks.md#_snippet_7\n\nLANGUAGE: Lua\nCODE:\n```\nlocal dialog = scope:Dialog {\n\t-- Use a `scope` parameter here so that the component can change when these\n\t-- children are destroyed if it needs to. This is especially important for\n\t-- components that create multiple sets of children over time.\n\tBuild = function(scope)\n\t\treturn {\n\t\t\tscope:Button {\n\t\t\t\tText = \"Hello, world!\" \n\t\t\t},\n\t\t\tscope:Text {\n\t\t\t\tText = \"I am created on the fly!\" \n\t\t\t}\n\t\t}\n\tend\n}\n```\n\n----------------------------------------\n\nTITLE: Calculating Draggable Size (Lua)\nDESCRIPTION: This snippet calculates the size of the draggable element. It dynamically calculates the size based on the size of the parent element using the `Layout.Size` property. This ensures the element maintains its size even when reparented during dragging. The use function likely accesses Fusion values.\nSOURCE: https://github.com/dphfox/fusion/blob/main/docs/examples/cookbook/drag-and-drop.md#_snippet_2\n\nLANGUAGE: Lua\nCODE:\n```\n\t\t-- Calculated manually so the Scale can be set relative to\n\t\t-- `props.Parent` at all times, rather than the `Parent` of this Frame.\n\t\tSize = scope:Computed(function(use)\n\t\t\tlocal udim2 = use(props.Layout.Size) or UDim2.fromOffset(0, 0)\n\t\t\tlocal parentSize = use(parentSize) or Vector2.zero\n\t\t\treturn UDim2.fromOffset(\n\t\t\t\tudim2.X.Scale * parentSize.X + udim2.X.Offset,\n\t\t\t\tudim2.Y.Scale * parentSize.Y + udim2.Y.Offset\n\t\t\t)\n\t\tend),\n```\n\n----------------------------------------\n\nTITLE: Creating a Button Instance Using Scoped Syntax in Lua\nDESCRIPTION: This snippet shows how to create a button instance using the `scoped()` syntax in Fusion. It defines a `scope` object with the `Button` component as a method, and then uses the colon operator (`:`) to call the `Button` component with specified properties. The resulting button is then parented.\nSOURCE: https://github.com/dphfox/fusion/blob/main/docs/tutorials/best-practices/components.md#_snippet_2\n\nLANGUAGE: Lua\nCODE:\n```\nlocal scope = scoped(Fusion, {\n\tButton = Button\n})\n\nlocal helloBtn = scope:Button {\n    ButtonText = \"Hello\",\n    Size = UDim2.fromOffset(200, 50)\n}\n\nhelloBtn.Parent = Players.LocalPlayer.PlayerGui.ScreenGui\n```\n\n----------------------------------------\n\nTITLE: Peeking at a Spring's Value in Lua\nDESCRIPTION: This code snippet shows how to retrieve the current value of a spring object using the `peek()` function.  `peek()` is used to inspect the animated value at any point in time, providing insight into the spring's current state.\nSOURCE: https://github.com/dphfox/fusion/blob/main/docs/tutorials/animation/springs.md#_snippet_1\n\nLANGUAGE: Lua\nCODE:\n```\nprint(peek(animated)) --> 0.26425...\n```\n\n----------------------------------------\n\nTITLE: Reading a Fusion Value Object with Peek\nDESCRIPTION: This snippet demonstrates reading a Fusion Value object's value using the `peek()` function.  It requires the `Fusion` module and retrieves the `peek` function.  `peek(health)` retrieves the current value stored in the `health` object.  The expected output is the initial value of the health object.\nSOURCE: https://github.com/dphfox/fusion/blob/main/docs/tutorials/fundamentals/values.md#_snippet_2\n\nLANGUAGE: Lua\nCODE:\n```\nlocal Fusion = require(ReplicatedStorage.Fusion)\nlocal doCleanup, scoped = Fusion.doCleanup, Fusion.scoped\nlocal peek = Fusion.peek\n\nlocal scope = scoped(Fusion)\nlocal health = scope:Value(5)\nprint(peek(health)) --> 5\n```\n\n----------------------------------------\n\nTITLE: Initializing User ID State with Fusion (Lua)\nDESCRIPTION: This snippet initializes a `currentUserID` state object using Fusion's `scope:Value`. It sets the initial user ID to 1670764. This demonstrates how to create a reactive state object in Fusion, which can be observed for changes and trigger other operations.\nSOURCE: https://github.com/dphfox/fusion/blob/main/docs/examples/cookbook/fetch-data-from-server.md#_snippet_2\n\nLANGUAGE: Lua\nCODE:\n```\n-- This doesn't have to be a `Value` - any kind of state object works too.\nlocal currentUserID = scope:Value(1670764)\n```\n\n----------------------------------------\n\nTITLE: Creating Spinner Instance with CurrentTime (Highlighted)\nDESCRIPTION: This snippet highlights the creation of the `Spinner` instance and the passing of the `currentTime` value as a property.  This connects the time updates to the spinner's rotation, driving the animation.\nSOURCE: https://github.com/dphfox/fusion/blob/main/docs/examples/cookbook/loading-spinner.md#_snippet_7\n\nLANGUAGE: Lua\nCODE:\n```\nscope:Spinner {\n\tLayout = {\n\t\tPosition = UDim2.fromScale(0.5, 0.5),\n\t\tAnchorPoint = Vector2.new(0.5, 0.5),\n\t\tSize = UDim2.fromOffset(50, 50)\n\t},\n\tCurrentTime = currentTime\n}\n```\n\n----------------------------------------\n\nTITLE: Error Handling with Safe and Computed in Luau\nDESCRIPTION: This code uses the `Safe` function within a `Computed` object to handle errors.  If the `try` function throws an error, the `fallback` function is executed, returning a fallback value. This approach provides a more readable and concise way to handle errors compared to `pcall` and `xpcall`.\nSOURCE: https://github.com/dphfox/fusion/blob/main/docs/tutorials/best-practices/error-safety.md#_snippet_8\n\nLANGUAGE: Luau\nCODE:\n```\nlocal double = scope:Computed(function(use)\n\treturn Safe {\n\t\ttry = function()\n\t\t\tlocal number = use(number)\n\t\t\tassert(number ~= 3, \"I don't like the number 3\")\n\t\t\treturn number * 2\n\t\tend,\n\t\tfallback = function(err)\n\t\t\treturn \"failed: \" .. err\n\t\tend\n\t}\nend)\n```\n\n----------------------------------------\n\nTITLE: Handling Errors in Fusion State Objects (Computed) in Luau\nDESCRIPTION: This code demonstrates that Fusion's state objects, like `Computed`, run code in a safe environment, converting fatal errors into non-fatal errors. Even if the code within the `Computed` function throws an error, the program will continue to run and the `Computed` object attempts to roll back to the last known value.\nSOURCE: https://github.com/dphfox/fusion/blob/main/docs/tutorials/best-practices/error-safety.md#_snippet_2\n\nLANGUAGE: Luau\nCODE:\n```\nprint(\"before\")\nprint(\"before\")\nprint(\"before\")\n\nscope:Computed(function()\n\terror(\"Kaboom!\")\nend)\n\nprint(\"after\")\nprint(\"after\")\nprint(\"after\")\n```\n\n----------------------------------------\n\nTITLE: Deriving a Scope and Adding More Methods in Lua\nDESCRIPTION: This snippet extends `deriveScope` by demonstrating how to add additional methods when deriving a new scope. This allows you to create a new scope that inherits the methods of an existing scope, while also adding new, specific methods as needed.\nSOURCE: https://github.com/dphfox/fusion/blob/main/docs/tutorials/fundamentals/scopes.md#_snippet_12\n\nLANGUAGE: Lua\nCODE:\n```\nlocal foo = scoped({\n\tFoo = Foo,\n\tBar = Bar,\n\tBaz = Baz\n})\n\n-- `bar` should have the same methods as `foo`\n-- now, it's only defined once!\nlocal bar = foo:deriveScope({\n\tGarb = Garb\n})\n\nprint(bar.Garb) --> function: 0x123456789abcdef\nprint(foo.Garb) --> nil\n```\n\n----------------------------------------\n\nTITLE: Creating a Computed State Object in Lua\nDESCRIPTION: This code snippet demonstrates how to create a computed state object using the `Fusion.Computed` function within a Lua environment. It includes the function signature and details the expected parameters: scope and processor. The processor function computes the value used by the computed object and handles destruction tasks.\nSOURCE: https://github.com/dphfox/fusion/blob/main/docs/api-reference/state/members/computed.md#_snippet_0\n\nLANGUAGE: Lua\nCODE:\n```\nfunction Fusion.Computed<T, S>(\n\tscope: Scope<S>,\n\tprocessor: (Use, Scope<S>) -> T\n) -> Computed<T>\n```\n\n----------------------------------------\n\nTITLE: Peeking at a Fusion Computed in Luau\nDESCRIPTION: This snippet demonstrates how to use `Fusion.peek()` to read the current value calculated by a Fusion computed object.\nSOURCE: https://github.com/dphfox/fusion/blob/main/docs/tutorials/fundamentals/your-first-project.md#_snippet_5\n\nLANGUAGE: Lua\nCODE:\n```\nlocal scope = Fusion:scoped()\n\nlocal numCoins = scope:Value(50)\n\nlocal message = scope:Computed(function()\n\treturn \"I am a message\"\nend)\n\nprint(Fusion.peek(message)) --> I am a message\n```\n\n----------------------------------------\n\nTITLE: Creating a Tween Object with Fusion.Tween in Lua\nDESCRIPTION: This code snippet defines the Fusion.Tween function, which constructs and returns a new tween state object. It takes a scope, a goal (the target value to animate to), and optional tween info (easing curve) as parameters. It returns a Tween object that manages the animation.\nSOURCE: https://github.com/dphfox/fusion/blob/main/docs/api-reference/animation/members/tween.md#_snippet_0\n\nLANGUAGE: Lua\nCODE:\n```\nfunction Fusion.Tween<T>(\n\tscope: Scope<unknown>,\n\tgoal: UsedAs<T>,\n\ttweenInfo: UsedAs<TweenInfo>?\n) -> Tween<T>\n```\n\n----------------------------------------\n\nTITLE: Using a Fusion Value in a Computed in Luau\nDESCRIPTION: This snippet shows how to pass a `use` parameter to a Fusion computed function. `use` is a function that, when called with a Fusion object, returns its current value and creates a dependency link.\nSOURCE: https://github.com/dphfox/fusion/blob/main/docs/tutorials/fundamentals/your-first-project.md#_snippet_6\n\nLANGUAGE: Lua\nCODE:\n```\nlocal scope = Fusion:scoped()\n\nlocal numCoins = scope:Value(50)\n\nlocal message = scope:Computed(function(use)\n\treturn \"I am a message\"\nend)\n\nprint(Fusion.peek(message)) --> I am a message\n```\n\n----------------------------------------\n\nTITLE: Configuring Tween with TweenInfo (Lua)\nDESCRIPTION: This snippet illustrates how to configure a tween's animation curve using a `TweenInfo` object. The `TweenInfo` object allows specifying duration and easing styles for the tween. The example shows setting the duration to 0.5 seconds and using the Quad easing style.\nSOURCE: https://github.com/dphfox/fusion/blob/main/docs/tutorials/animation/tweens.md#_snippet_2\n\nLANGUAGE: Lua\nCODE:\n```\nlocal goal = scope:Value(0)\nlocal style = TweenInfo.new(0.5, Enum.EasingStyle.Quad)\nlocal animated = scope:Tween(goal, style)\n```\n\n----------------------------------------\n\nTITLE: Creating Player Name Labels with `ForValues` (Lua)\nDESCRIPTION: This Lua snippet uses Fusion's `ForValues` function to iterate through the `Players` list and create a TextLabel for each player. It sets properties like `Name`, `Size`, `BackgroundTransparency`, `Text`, `TextColor3`, `Font`, `TextSize`, `TextXAlignment`, and `TextTruncate` for each TextLabel. A `UIPadding` object is added as a child to provide visual spacing.  This part handles the UI creation for each player in the list.\nSOURCE: https://github.com/dphfox/fusion/blob/main/docs/examples/cookbook/player-list.md#_snippet_2\n\nLANGUAGE: Lua\nCODE:\n```\nscope:ForValues(props.Players, function(use, scope, player)\n\treturn scope:New \"TextLabel\" {\n\t\tName = \"PlayerListRow: \" .. player.DisplayName,\n\n\t\tSize = UDim2.new(1, 0, 0, 25),\n\t\tBackgroundTransparency = 1,\n\n\t\tText = player.DisplayName,\n\t\tTextColor3 = Color3.new(1, 1, 1),\n\t\tFont = Enum.Font.GothamMedium,\n\t\tTextSize = 16,\n\t\tTextXAlignment = \"Right\",\n\t\tTextTruncate = \"AtEnd\",\n\n\t\t[Children] = scope:New \"UIPadding\" {\n\t\t\tPaddingLeft = UDim.new(0, 10),\n\t\t\tPaddingRight = UDim.new(0, 10)\n\t\t}\n\t}\nend)\n```\n\n----------------------------------------\n\nTITLE: Scope:ForKeys Method Syntax - Lua\nDESCRIPTION: Demonstrates the intended usage of the Fusion.ForKeys function as a method on a scope. This approach allows for cleaner integration with scope management and resource handling within the Fusion framework. The example shows how to create a 'forObj' by calling ForKeys on a scope.\nSOURCE: https://github.com/dphfox/fusion/blob/main/docs/api-reference/state/members/forkeys.md#_snippet_1\n\nLANGUAGE: Lua\nCODE:\n```\nlocal forObj = scope:ForKeys(inputTable, processor)\n```\n\n----------------------------------------\n\nTITLE: Using ForKeys with State Objects - Lua\nDESCRIPTION: This snippet demonstrates using `ForKeys` with a state object as the input table. It shows how changes to the state object are reflected in the output of the `ForKeys` object. The example uses a `foodSet` state object and a `prefixes` table to rename the keys.\nSOURCE: https://github.com/dphfox/fusion/blob/main/docs/tutorials/tables/forkeys.md#_snippet_3\n\nLANGUAGE: Lua\nCODE:\n```\nlocal foodSet = scope:Value({})\n\nlocal prefixes = { pie = \"tasty\", chocolate = \"yummy\", broccoli = \"gross\" }\nlocal renamedFoodSet = scope:ForKeys(foodSet, function(use, scope, food)\n\treturn prefixes[food] .. food\nend)\n\nfoodSet:set({ pie = true })\nprint(peek(renamedFoodSet)) --> { tasty_pie = true }\n\nfoodSet:set({ broccoli = true, chocolate = true })\nprint(peek(renamedFoodSet)) --> { gross_broccoli = true, yummy_chocolate = true }\n```\n\n----------------------------------------\n\nTITLE: Using Scope Methods Directly in Lua\nDESCRIPTION: This snippet shows how to use functions passed to `Fusion.scoped()` as methods directly on the scope object. By passing a table of functions to `scoped`, you can then call those functions using the colon operator on the scope, making the code more readable and less error-prone.\nSOURCE: https://github.com/dphfox/fusion/blob/main/docs/tutorials/fundamentals/scopes.md#_snippet_7\n\nLANGUAGE: Lua\nCODE:\n```\nlocal Fusion = require(ReplicatedStorage.Fusion)\nlocal scoped = Fusion.scoped\n\nlocal scope = scoped({\n\tValue = Fusion.Value,\n\tdoCleanup = Fusion.doCleanup\n})\nlocal thing1 = scope:Value(\"i am thing 1\")\nlocal thing2 = scope:Value(\"i am thing 2\")\nlocal thing3 = scope:Value(\"i am thing 3\")\n\nscope:doCleanup()\n```\n\n----------------------------------------\n\nTITLE: Overlay Frame Creation (Lua)\nDESCRIPTION: This snippet creates a frame called `overlayFrame` that is used to ensure the dragged UI is always rendered on top of other UI elements. It has a full-screen size, a high ZIndex, and is completely transparent.\nSOURCE: https://github.com/dphfox/fusion/blob/main/docs/examples/cookbook/drag-and-drop.md#_snippet_8\n\nLANGUAGE: Lua\nCODE:\n```\nlocal overlayFrame = scope:New \"Frame\" {\n\tSize = UDim2.fromScale(1, 1),\n\tZIndex = 10,\n\tBackgroundTransparency = 1\n}\n```\n\n----------------------------------------\n\nTITLE: Combining Child Types in Lua\nDESCRIPTION: This snippet showcases using a combination of instances, arrays, and state objects within the `[Children]` key. This allows for dynamically adding or removing children based on the state of `includeModel`.\nSOURCE: https://github.com/dphfox/fusion/blob/main/docs/tutorials/roblox/parenting.md#_snippet_7\n\nLANGUAGE: Lua\nCODE:\n```\nlocal modelChildren = workspace.Model:GetChildren()\nlocal includeModel = scope:Value(true)\n\nlocal folder = scope:New \"Folder\" {\n    -- array of children\n    [Children] = {\n        -- single instance\n        scope:New \"Part\" {\n            Name = \"Gregory\",\n            Color = Color3.new(1, 0, 0)\n        },\n        -- state object containing children (or nil)\n        scope:Computed(function(use)\n            return if use(includeModel)\n                then modelChildren:GetChildren() -- array of children\n                else nil\n        end)\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing and Using Computed Objects in Fusion (Lua)\nDESCRIPTION: This example demonstrates the basic creation and usage of a Computed object in Fusion. It shows how to define a calculation that depends on other state objects and how to read the result of the calculation using `peek()`. The example also illustrates how changes to the dependent state objects trigger recalculation of the Computed object.\nSOURCE: https://github.com/dphfox/fusion/blob/main/docs/tutorials/fundamentals/computeds.md#_snippet_0\n\nLANGUAGE: Lua\nCODE:\n```\nlocal numCoins = scope:Value(50)\nlocal itemPrice = scope:Value(10)\n\nlocal finalCoins = scope:Computed(function(use, scope)\n    return use(numCoins) - use(itemPrice)\nend)\n\nprint(peek(finalCoins)) --> 40\n\nnumCoins:set(25)\nitemPrice:set(15)\nprint(peek(finalCoins)) --> 10\n```\n\n----------------------------------------\n\nTITLE: Initializing ForValues with Constant Table - Lua\nDESCRIPTION: This code demonstrates how to create a `ForValues` object with a constant table (`numbers`) and a simple processing function that doubles each value.  It shows how to retrieve the processed values using `peek()`. Dependencies: Fusion scope object is assumed.\nSOURCE: https://github.com/dphfox/fusion/blob/main/docs/tutorials/tables/forvalues.md#_snippet_1\n\nLANGUAGE: Lua\nCODE:\n```\nlocal numbers = {1, 2, 3, 4, 5}\nlocal doubled = scope:ForValues(numbers, function(use, scope, num)\n\treturn num * 2\nend)\n```\n\n----------------------------------------\n\nTITLE: OnClick Handler for 'Check All'/'Uncheck All' (Lua)\nDESCRIPTION: This snippet shows how to implement the `OnClick` handler for the 'master' checkbox, enabling it to toggle the state of multiple other checkboxes. It checks if all associated options are currently checked, and then sets all of them to the opposite state. It uses the `CheckBox` component.\nSOURCE: https://github.com/dphfox/fusion/blob/main/docs/tutorials/best-practices/state.md#_snippet_5\n\nLANGUAGE: Lua\nCODE:\n```\nlocal playMusic = scope:Value(true)\nlocal playSFX = scope:Value(false)\nlocal playNarration = scope:Value(true)\n\nlocal checkBox = scope:CheckBox {\n    -- ... same properties as before ...\n    OnClick = function()\n        local allChecked = peek(playMusic) and peek(playSFX) and peek(playNarration)\n\n        playMusic:set(not allChecked)\n        playSFX:set(not allChecked)\n        playNarration:set(not allChecked)\n    end\n}\n```\n\n----------------------------------------\n\nTITLE: Nesting Arrays for Children in Lua\nDESCRIPTION: This code demonstrates how nested arrays can be used within the `[Children]` key. Regardless of the nesting depth, all instances created within the arrays will be parented to the main Folder instance.\nSOURCE: https://github.com/dphfox/fusion/blob/main/docs/tutorials/roblox/parenting.md#_snippet_5\n\nLANGUAGE: Lua\nCODE:\n```\nlocal folder = scope:New \"Folder\" {\n    [Children] = {\n        {\n            {\n                {\n                    scope:New \"Part\" {\n                        Name = \"Gregory\",\n                        Color = Color3.new(1, 0, 0)\n                    }\n                }\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining UsedAs Type Alias in Lua\nDESCRIPTION: This code snippet defines the `UsedAs` type alias in Lua using the `export type` syntax. It specifies that a `UsedAs` type is either a type `T` or a `StateObject<T>`.  This allows a value to be either a constant value of type T or a dynamically updating state object holding a value of type T.\nSOURCE: https://github.com/dphfox/fusion/blob/main/docs/api-reference/state/types/usedas.md#_snippet_0\n\nLANGUAGE: Lua\nCODE:\n```\nexport type UsedAs<T> = T | StateObject<T>\n```\n\n----------------------------------------\n\nTITLE: Defining Fusion Child Type in Lua\nDESCRIPTION: Defines a custom type alias 'Child' in Lua used by the Fusion library. It specifies that a 'Child' can be a Roblox Instance, a StateObject parameterized with 'Child', or a table where keys are unknown and values conform to the 'Child' type.\nSOURCE: https://github.com/dphfox/fusion/blob/main/docs/api-reference/roblox/types/child.md#_snippet_0\n\nLANGUAGE: Lua\nCODE:\n```\nexport type Child = Instance | StateObject<Child> | {[unknown]: Child}\n```\n\n----------------------------------------\n\nTITLE: Using Fusion.Child for Type Safety in Lua\nDESCRIPTION: This code snippet demonstrates using the `Fusion.Child` function to help the Luau type system correctly infer the type when mixing different kinds of values in arrays assigned to the `[Children]` key. This avoids potential type errors.\nSOURCE: https://github.com/dphfox/fusion/blob/main/docs/tutorials/roblox/parenting.md#_snippet_8\n\nLANGUAGE: Lua\nCODE:\n```\nlocal Child = Fusion.Child\n\n-- ... later ...\n\nlocal folder = scope:New \"Folder\" {\n\t[Children] = Child {\n\t\tscope:New \"Part\" {\n\t\t\tName = \"Gregory\",\n\t\t\tColor = Color3.new(1, 0, 0)\n\t\t},\n\t\tscope:Computed(function(use)\n\t\t\treturn if use(includeModel)\n\t\t\t\tthen modelChildren:GetChildren() -- array of children\n\t\t\t\telse nil\n\t\tend)\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Contextual:now() Method Definition\nDESCRIPTION: Defines the 'now' method for the Contextual type in Lua. This method returns the current value of the contextual, varying based on when and in which coroutine it is called.\nSOURCE: https://github.com/dphfox/fusion/blob/main/docs/api-reference/general/types/contextual.md#_snippet_1\n\nLANGUAGE: Lua\nCODE:\n```\nfunction Contextual:now(): T\n```\n\n----------------------------------------\n\nTITLE: Using `ForPairs` with Constant Table and Scope Value in Lua\nDESCRIPTION: Demonstrates using `ForPairs` with a constant table `itemColours` and a scope value `owner`. It defines a function that manipulates the keys and values of the table based on the current value of `owner`, and then prints the manipulated table using `peek()`.\nSOURCE: https://github.com/dphfox/fusion/blob/main/docs/tutorials/tables/forpairs.md#_snippet_0\n\nLANGUAGE: Lua\nCODE:\n```\nlocal itemColours = { shoes = \"red\", socks = \"blue\" }\nlocal owner = scope:Value(\"Janet\")\n\nlocal manipulated = scope:ForPairs(itemColours, function(use, scope, thing, colour)\n\tlocal newKey = colour\n\tlocal newValue = use(owner) .. \"'s \" .. thing\n\treturn newKey, newValue\nend)\n\nprint(peek(manipulated)) --> {red = \"Janet's shoes\", blue = \"Janet's socks\"}\n\nowner:set(\"April\")\nprint(peek(manipulated)) --> {red = \"April's shoes\", blue = \"April's socks\"}\n```\n\n----------------------------------------\n\nTITLE: Creating a Contextual Value (Lua)\nDESCRIPTION: This Lua code creates a contextual value named `myContextual` using the `Contextual` function. It initializes the contextual with a default value of \"foo\". This code shows how to create a contextual value that can be overridden temporarily.\nSOURCE: https://github.com/dphfox/fusion/blob/main/docs/tutorials/best-practices/sharing-values.md#_snippet_4\n\nLANGUAGE: Lua\nCODE:\n```\nlocal myContextual = Contextual(\"foo\")\n```\n\n----------------------------------------\n\nTITLE: Defining and Calling a Simple Luau Callback\nDESCRIPTION: This code snippet demonstrates how to define a function and pass it as a callback to another function (`task.delay`). The `task.delay` function will then execute the callback after a specified delay (5 seconds in this case).\nSOURCE: https://github.com/dphfox/fusion/blob/main/docs/tutorials/best-practices/callbacks.md#_snippet_0\n\nLANGUAGE: Lua\nCODE:\n```\nlocal function printMessage()\n    print(\"Hello, world!\")\nend\n\n-- Here, we're passing `printMessage` as a callback\n-- `task.delay` will call it after 5 seconds\ntask.delay(5, printMessage)\n```\n\n----------------------------------------\n\nTITLE: Creating a Fusion Computed in Luau\nDESCRIPTION: This snippet creates a Fusion computed, which calculates a value based on a provided function. In this case, the computed returns a hardcoded string. Computed values update when their dependencies change.\nSOURCE: https://github.com/dphfox/fusion/blob/main/docs/tutorials/fundamentals/your-first-project.md#_snippet_4\n\nLANGUAGE: Lua\nCODE:\n```\nlocal scope = Fusion:scoped()\n\nlocal numCoins = scope:Value(50)\n\nlocal message = scope:Computed(function()\n\treturn \"I am a message\"\nend)\n\nprint(Fusion.peek(numCoins)) --> 50\n```\n\n----------------------------------------\n\nTITLE: Creating a Two-Way Binding with Fusion.Out (Lua)\nDESCRIPTION: This snippet demonstrates how to create a two-way binding between a Fusion property and a `Value` object in Lua.  It requires setting the property value to the `Value` object and creating an `Out` binding. Changes to either the property or the `Value` object will update the other.\nSOURCE: https://github.com/dphfox/fusion/blob/main/docs/tutorials/roblox/outputs.md#_snippet_3\n\nLANGUAGE: Lua\nCODE:\n```\nlocal name = scope:Value()\n\nlocal thing = scope:New \"Part\" {\n    Name = name -- When `name` changes, set `thing.Name`\n    [Out \"Name\"] = name -- When `thing.Name` changes, set `name`\n}\n\nprint(thing.Name, peek(name)) --> Part Part\nname:set(\"NewName\")\ntask.wait()\nprint(thing.Name, peek(name)) --> NewName NewName\n```\n\n----------------------------------------\n\nTITLE: Creating a Fusion Contextual Object in Lua\nDESCRIPTION: This Lua code snippet demonstrates how to create a new contextual object using the Fusion.Contextual function. The function takes a default value as a parameter, which will be returned by `Contextual:now()` if no value has been specified by `Contextual:is():during()`. The returned value is a `Contextual<T>` object.\nSOURCE: https://github.com/dphfox/fusion/blob/main/docs/api-reference/general/members/contextual.md#_snippet_0\n\nLANGUAGE: Lua\nCODE:\n```\nfunction Fusion.Contextual<T>(\n\tdefaultValue: T\n): Contextual<T>\n```\n\n----------------------------------------\n\nTITLE: Importing Fusion.OnChange (Lua)\nDESCRIPTION: This code snippet demonstrates how to import the OnChange function directly from the Fusion library in Roblox Lua.  This allows you to use OnChange without needing to reference a specific scope or instance. It is a necessary first step for using OnChange in your code.\nSOURCE: https://github.com/dphfox/fusion/blob/main/docs/tutorials/roblox/change-events.md#_snippet_1\n\nLANGUAGE: Lua\nCODE:\n```\nlocal OnChange = Fusion.OnChange\n```\n\n----------------------------------------\n\nTITLE: Creating a `ForPairs` object to swap keys and values in Lua\nDESCRIPTION: This snippet illustrates how to create a new `ForPairs` object with an input table (data) and a processor function to swap the keys and values. The resulting processed table is then stored in the `swapped` variable.\nSOURCE: https://github.com/dphfox/fusion/blob/main/docs/tutorials/tables/forpairs.md#_snippet_1\n\nLANGUAGE: Lua\nCODE:\n```\nlocal itemColours = { shoes = \"red\", socks = \"blue\" }\nlocal swapped = scope:ForPairs(data, function(use, scope, item, colour)\n\treturn colour, item\nend)\n```\n\n----------------------------------------\n\nTITLE: Defining Fusion Value Type in Luau\nDESCRIPTION: Defines the 'Value' type as a specialization of 'StateObject' within the Fusion framework.  It includes a 'kind' property set to \"State\", a 'set' method for updating the value, and a 'timeliness' property set to \"lazy\". This type allows regular Luau code to control its state value and is used to trigger notifications to other objects when the value changes. The type definition uses 'self' to denote methods, though Luau might not interpret 'self' specially.\nSOURCE: https://github.com/dphfox/fusion/blob/main/docs/api-reference/state/types/value.md#_snippet_0\n\nLANGUAGE: Lua\nCODE:\n```\nexport type Value<T> = StateObject<T> & {\n\tkind: \"State\",\n \tset: (self, newValue: T) -> (),\n\ttimeliness: \"lazy\"\n}\n```\n\n----------------------------------------\n\nTITLE: Deriving a Scope with Fusion.deriveScope() in Lua\nDESCRIPTION: This snippet demonstrates the `deriveScope` function, which creates a new scope with the same methods as an existing scope. This is more efficient than defining the methods again and helps keep definitions in one place.\nSOURCE: https://github.com/dphfox/fusion/blob/main/docs/tutorials/fundamentals/scopes.md#_snippet_11\n\nLANGUAGE: Lua\nCODE:\n```\nlocal foo = scoped({\n\tFoo = Foo,\n\tBar = Bar,\n\tBaz = Baz\n})\n\n-- `bar` should have the same methods as `foo`\n-- now, it's only defined once!\nlocal bar = foo:deriveScope()\n\nprint(foo.Baz == bar.Baz) --> true\n\nbar:doCleanup()\nfoo:doCleanup()\n```\n\n----------------------------------------\n\nTITLE: Using Contextual Theme (Lua)\nDESCRIPTION: This Lua code shows how to use the theme module that employs contextuals. It retrieves and prints the current theme, then overrides it within a Fusion scope using `:is():during()`. Inside the override, it sets the override value to \"dark\", printing the theme at each step. Requires Fusion library.\nSOURCE: https://github.com/dphfox/fusion/blob/main/docs/tutorials/best-practices/sharing-values.md#_snippet_8\n\nLANGUAGE: Lua\nCODE:\n```\nlocal Fusion = require(\"path/to/Fusion.luau\")\nlocal scoped, peek = Fusion.scoped, Fusion.peek\n\nlocal Theme = require(\"path/to/Theme.luau\")\n\nlocal function printTheme()\n\tlocal theme = Theme.currentTheme:now()\n\tprint(\n\t\tpeek(theme), \n\t\tif typeof(theme) == \"string\" then \"constant\" else \"state object\"\n\t)\nend\n\nprintTheme() --> light constant\n\nlocal scope = scoped(Fusion)\nlocal override = scope:Value(\"light\")\nTheme.currentTheme:is(override):during(function()\n\tprintTheme()  --> light state object\n\toverride:set(\"dark\")\n\tprintTheme() --> dark state object\nend)\n\nprintTheme() --> light constant\n```\n\n----------------------------------------\n\nTITLE: Accessing Fusion Version in Lua\nDESCRIPTION: This code snippet shows how to access the `Fusion.version` property in Lua. The `Fusion.version` property returns a `Version` object that contains information about the Fusion source code version.\nSOURCE: https://github.com/dphfox/fusion/blob/main/docs/api-reference/general/members/version.md#_snippet_0\n\nLANGUAGE: Lua\nCODE:\n```\nFusion.version: Version\n```\n\n----------------------------------------\n\nTITLE: Scoped Method Syntax Example (Lua)\nDESCRIPTION: Demonstrates the recommended method syntax for accessing the Fusion.Value constructor as a method on a scope. This approach promotes better code organization and clarity by explicitly associating the created value with the scope.\nSOURCE: https://github.com/dphfox/fusion/blob/main/docs/api-reference/state/members/value.md#_snippet_1\n\nLANGUAGE: Lua\nCODE:\n```\nlocal computed = scope:Computed(processor)\n```\n\n----------------------------------------\n\nTITLE: Verifying the Destruction Function in Scope in Lua\nDESCRIPTION: This snippet demonstrates how to verify that the `destroy()` function of a Fusion.Value object has been added to the scope.  It prints the first element of the scope, which should be the `destroy()` function. This confirms that the object will be properly cleaned up when the scope is destroyed.\nSOURCE: https://github.com/dphfox/fusion/blob/main/docs/tutorials/fundamentals/scopes.md#_snippet_2\n\nLANGUAGE: Lua\nCODE:\n```\nlocal Fusion = require(ReplicatedStorage.Fusion)\n\nlocal scope = {}\nlocal thing = Fusion.Value(scope, \"i am a thing\")\n\nprint(scope[1]) --> function: 0x123456789abcdef\n```\n\n----------------------------------------\n\nTITLE: Tweening UDim2 Values (Lua)\nDESCRIPTION: This snippet demonstrates how to use tweens with UDim2 values. It animates the position of a UI element. The code shows the goal position being set and a TweenInfo object configured with a duration and easing style.\nSOURCE: https://github.com/dphfox/fusion/blob/main/docs/tutorials/animation/tweens.md#_snippet_3\n\nLANGUAGE: Lua\nCODE:\n```\nlocal goalPosition = scope:Value(UDim2.new(0.5, 0, 0, 0))\nlocal animated = scope:Tween(goalPosition, TweenInfo.new(0.5, Enum.EasingStyle.Quad))\n```\n\n----------------------------------------\n\nTITLE: Cleaning up scope in ForKeys - Lua\nDESCRIPTION: This snippet demonstrates that anything added to the scope is cleaned up for you when the processed key is removed. It shows that the table.insert to scope will be cleaned up when the `ForKeys` removes the key. \nSOURCE: https://github.com/dphfox/fusion/blob/main/docs/tutorials/tables/forkeys.md#_snippet_5\n\nLANGUAGE: Lua\nCODE:\n```\nlocal foodSet = scope:Value({ broccoli = true, chocolate = true })\n\nlocal shoutingFoodSet = scope:ForKeys(names, function(use, scope, food)\n\ttable.insert(scope, function()\n\t\tprint(\"I ate the \" .. food .. \"!\")\n\tend)\n\treturn string.upper(food)\nend)\n\nnames:set({ chocolate = true }) --> I ate the broccoli!\n```\n\n----------------------------------------\n\nTITLE: TodoEntry Component Implementation (Lua)\nDESCRIPTION: This snippet shows how the `TodoEntry` component leverages the `Draggable` component.  It passes the relevant properties through and attaches an `OnMouseDown` event to initiate the drag operation. It's important to note that `MouseButton1Down` is used, and not `MouseButton1Up`, to correctly capture input.\nSOURCE: https://github.com/dphfox/fusion/blob/main/docs/examples/cookbook/drag-and-drop.md#_snippet_5\n\nLANGUAGE: Lua\nCODE:\n```\n\treturn scope:Draggable {\n\t\tID = props.Item.id,\n\t\tName = props.Item.text,\n\t\tParent = props.Parent,\n\t\tLayout = props.Layout,\n\t\tDragging = props.Dragging,\n\t\t\t[OnEvent \"MouseButton1Down\"] = props.OnMouseDown\n\n\t\t\t--[[ Don't detect mouse up here, because in some rare cases, \n\t\t\tthe event could be missed due to lag between the item's \n\t\t\tposition and the cursor position.]]\n\t}\n```\n\n----------------------------------------\n\nTITLE: Fusion Value Set Method Definition in Luau\nDESCRIPTION: Defines the 'set' method for the Fusion 'Value' type, allowing the update of the state object's value. The method takes 'newValue' as input and returns the same 'newValue', enabling its usage within expressions. Upon setting a new value, other objects that depend on this value are notified of the change. The method operates within the Fusion framework for state management.\nSOURCE: https://github.com/dphfox/fusion/blob/main/docs/api-reference/state/types/value.md#_snippet_1\n\nLANGUAGE: Lua\nCODE:\n```\nfunction Value:set(\n\tnewValue: T\n): T\n```\n\n----------------------------------------\n\nTITLE: ForKeys Optimisation Example - Lua\nDESCRIPTION: This snippet demonstrates how `ForKeys` optimizes code by only recalculating keys when needed. It showcases how changing the values in the array doesn't affect the keys, improving performance. Keys are only added or removed as needed.\nSOURCE: https://github.com/dphfox/fusion/blob/main/docs/tutorials/tables/forkeys.md#_snippet_6\n\nLANGUAGE: Lua\nCODE:\n```\nlocal array = scope:Value({\"Fusion\", \"Knit\", \"Matter\"})\nlocal dict = scope:ForKeys(array, function(use, scope, index)\n\treturn \"Value\" .. index\nend)\n\nprint(peek(dict)) --> {Value1 = \"Fusion\", Value2 = \"Knit\", Value3 = \"Matter\"}\n```\n\n----------------------------------------\n\nTITLE: Toggling the Animation Value (Lua)\nDESCRIPTION: This snippet continuously toggles the `showTheThing` value to trigger the animation. The `task.defer` function ensures that the coroutine is started on the next resume, preventing immediate blocking. The `peek` function retrieves the current value of `showTheThing` without triggering a recomputation.\nSOURCE: https://github.com/dphfox/fusion/blob/main/docs/examples/cookbook/animated-computed.md#_snippet_3\n\nLANGUAGE: Lua\nCODE:\n```\n-- Without toggling the value, you won't see it animate.\ntask.defer(function()\n\twhile true do\n\t\ttask.wait(1)\n\t\tshowTheThing:set(not peek(showTheThing))\n\tend\nend)\n```\n\n----------------------------------------\n\nTITLE: Cleaning up a Fusion Scope in Luau\nDESCRIPTION: This snippet demonstrates how to clean up all objects created within a Fusion scope using the `:doCleanup()` method. This releases resources and prevents memory leaks.\nSOURCE: https://github.com/dphfox/fusion/blob/main/docs/tutorials/fundamentals/your-first-project.md#_snippet_12\n\nLANGUAGE: Lua\nCODE:\n```\nlocal scope = Fusion:scoped()\n\nlocal numCoins = scope:Value(50)\n\nlocal message = scope:Computed(function(use)\n\treturn \"The number of coins is \" .. use(numCoins)\nend)\n\nscope:Observer(message):onBind(function()\n\tprint(Fusion.peek(message))\nend)\n\n--> The number of coins is 50\n\nnumCoins:set(75)\n\n--> The number of coins is 75\n\nscope:doCleanup()\n```\n\n----------------------------------------\n\nTITLE: Defining SpecialKey type in Lua\nDESCRIPTION: Defines the SpecialKey type, which represents a custom operation to apply to Roblox instances. It includes fields for specifying the operation's type, kind, stage (execution order), and an 'apply' method. The type definition uses `self` to denote methods.\nSOURCE: https://github.com/dphfox/fusion/blob/main/docs/api-reference/roblox/types/specialkey.md#_snippet_0\n\nLANGUAGE: Lua\nCODE:\n```\nexport type SpecialKey = {\n\ttype: \"SpecialKey\",\n\tkind: string,\n\tstage: \"self\" | \"descendants\" | \"ancestor\" | \"observer\",\n\tapply: (\n\t\tself,\n\t\tscope: Scope<unknown>,\n\t\tvalue: unknown,\n\t\tapplyTo: Instance\n\t) -> ()\n}\n```\n\n----------------------------------------\n\nTITLE: Rotation Calculation within Spinner (Highlighted)\nDESCRIPTION: This snippet highlights the part of the `Spinner` component where the rotation is calculated. It uses `scope:Computed` to create a reactive property that updates the rotation based on the `CurrentTime` property. The rotation is calculated by multiplying the current time by `SPIN_DEGREES_PER_SECOND` and taking the modulo 360.\nSOURCE: https://github.com/dphfox/fusion/blob/main/docs/examples/cookbook/loading-spinner.md#_snippet_5\n\nLANGUAGE: Lua\nCODE:\n```\n\t\tRotation = scope:Computed(function(use)\n\t\t\treturn (use(props.CurrentTime) * SPIN_DEGREES_PER_SECOND) % 360\n\t\tend)\n```\n\n----------------------------------------\n\nTITLE: Creating a Fusion Observer in Luau\nDESCRIPTION: This snippet creates a Fusion observer, which monitors a Fusion object (in this case, a computed) for changes. Observers allow you to react to changes in data.\nSOURCE: https://github.com/dphfox/fusion/blob/main/docs/tutorials/fundamentals/your-first-project.md#_snippet_9\n\nLANGUAGE: Lua\nCODE:\n```\nlocal scope = Fusion:scoped()\n\nlocal numCoins = scope:Value(50)\n\nlocal message = scope:Computed(function(use)\n\treturn \"The number of coins is \" .. use(numCoins)\nend)\n\nscope:Observer(message)\n\nprint(Fusion.peek(message)) --> The number of coins is 50\n\nnumCoins:set(75)\n\nprint(Fusion.peek(message)) --> The number of coins is 75\n```\n\n----------------------------------------\n\nTITLE: TodoEntry Instantiation and Placement (Lua)\nDESCRIPTION: This code iterates through the `todoItems` list and creates a `TodoEntry` for each item. The parent of each entry is dynamically determined based on its `completed` status, placing it in either the 'incomplete' or 'completed' task list. Dragging information is computed, ensuring each draggable item's drag info is specific to its own ID.\nSOURCE: https://github.com/dphfox/fusion/blob/main/docs/examples/cookbook/drag-and-drop.md#_snippet_9\n\nLANGUAGE: Lua\nCODE:\n```\nlocal currentlyDragging: Fusion.Value<DragInfo?> = scope:Value(nil)\n\nfor _, item in todoItems do\n\tlocal itemPosition = scope:Value(nil)\n\tscope:TodoEntry {\n\t\tItem = item,\n\t\t\tParent = scope:Computed(function(use)\n\t\t\t\treturn\n\t\t\t\t\tif use(item.completed)\n\t\t\t\t\tthen use(taskLists).completed\n\t\t\t\t\telse use(taskLists).incomplete\n\t\tend),\n\t\t\tDragging = {\n\t\t\t\tMousePosition = mousePos,\n\t\t\t\tSelfDragInfo = scope:Computed(function(use)\n\t\t\t\t\tlocal dragInfo = use(currentlyDragging)\n\t\t\t\t\treturn \n\t\t\t\t\t\tif dragInfo == nil or dragInfo.id ~= item.id\n\t\t\t\t\t\tthen nil\n\t\t\t\t\t\telse dragInfo\n\t\t\t\tend)\n\t\t\t\tOverlayFrame = overlayFrame\n\t\t\t},\n\t\t\tOnMouseDown = function()\n\t\t\t\tif peek(currentlyDragging) == nil then\n\t\t\t\t\tlocal itemPos = peek(itemPosition) or Vector2.zero\n\t\t\t\t\tlocal mouseOffset = peek(mousePos) - itemPos\n\t\t\t\t\tcurrentlyDragging:set({\n\t\t\t\t\t\tid = item.id,\n\t\t\t\t\t\tmouseOffset = mouseOffset\n\t\t\t\t\t})\n\t\t\t\tend\n\t\t\tend\n\t}\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Tween with Goal State Object (Lua)\nDESCRIPTION: This snippet demonstrates how to create a new tween object using `scope:Tween()`. It requires a state object as the goal for the animation. The tween smoothly follows the 'goal' state object over time.\nSOURCE: https://github.com/dphfox/fusion/blob/main/docs/tutorials/animation/tweens.md#_snippet_0\n\nLANGUAGE: Lua\nCODE:\n```\nlocal goal = scope:Value(0)\nlocal animated = scope:Tween(goal)\n```\n\n----------------------------------------\n\nTITLE: Defining Task Type in Lua\nDESCRIPTION: This code snippet defines the `Task` type in Lua for the Fusion library. The Task type encompasses several possible types that can be handled by the `doCleanup` function, including Roblox Instances, RBXScriptConnections, functions, and tables containing either a `destroy` or `Destroy` method.  It's important to note that Fusion does not enforce this type statically.\nSOURCE: https://github.com/dphfox/fusion/blob/main/docs/api-reference/memory/types/task.md#_snippet_0\n\nLANGUAGE: Lua\nCODE:\n```\nexport type Task = \n\tInstance \n\t| RBXScriptConnection\n\t| () -> () \n\t| {destroy: (self) -> ()} \n\t| {Destroy: (self) -> ()} \n\t| {Task}\n```\n\n----------------------------------------\n\nTITLE: Spinner Component Definition (Highlighted)\nDESCRIPTION: This code snippet highlights the definition of the `Spinner` component, emphasizing its parameters: `scope` (Fusion scope) and `props` (layout properties and `CurrentTime`).\nSOURCE: https://github.com/dphfox/fusion/blob/main/docs/examples/cookbook/loading-spinner.md#_snippet_4\n\nLANGUAGE: Lua\nCODE:\n```\nlocal function Spinner(\n\tscope: Fusion.Scope,\n\tprops: {\n\t\tLayout: {\n\t\t\tLayoutOrder: UsedAs<number>?,\n\t\t\tPosition: UsedAs<UDim2>?,\n\t\t\tAnchorPoint: UsedAs<Vector2>?,\n\t\t\tZIndex: UsedAs<number>?\n\t\t},\n\t\tCurrentTime: UsedAs<number>,\n\t}\n): Fusion.Child\n```\n\n----------------------------------------\n\nTITLE: Error Handling with xpcall() and Computed in Luau\nDESCRIPTION: This code demonstrates error handling using `xpcall` within a `Computed` object in Luau. `xpcall` allows defining a fallback function that is executed when an error occurs. The return value of this function is used as the result of the computation.\nSOURCE: https://github.com/dphfox/fusion/blob/main/docs/tutorials/best-practices/error-safety.md#_snippet_7\n\nLANGUAGE: Luau\nCODE:\n```\nlocal double = scope:Computed(function(use)\n\tlocal _, result = xpcall(\n\t\tfunction()\n\t\t\tlocal number = use(number)\n\t\t\tassert(number ~= 3, \"I don't like the number 3\")\n\t\t\treturn number * 2\n\t\tend,\n\t\tfunction(err)\n\t\t\treturn \"failed: \" .. err\n\t\tend\n\t)\n\treturn result\nend)\n```\n\n----------------------------------------\n\nTITLE: Generating Fatal Error with error() in Luau\nDESCRIPTION: This code snippet demonstrates how to generate a fatal error using the `error()` function in Luau. A fatal error will crash the program, preventing subsequent code from executing. The output shows the stack trace after the error.\nSOURCE: https://github.com/dphfox/fusion/blob/main/docs/tutorials/best-practices/error-safety.md#_snippet_0\n\nLANGUAGE: Luau\nCODE:\n```\nprint(\"before\")\nprint(\"before\")\nprint(\"before\")\n\nerror(\"Kaboom!\")\n\nprint(\"after\")\nprint(\"after\")\nprint(\"after\")\n```\n\n----------------------------------------\n\nTITLE: cannotConnectChange Message\nDESCRIPTION: This error message indicates an attempt to connect to a property change event that doesn't exist on the specified Roblox instance. It suggests verifying the existence of the property and its correct spelling.  This error is thrown by `OnChange`.\nSOURCE: https://github.com/dphfox/fusion/blob/main/docs/api-reference/general/errors.md#_snippet_3\n\nLANGUAGE: text\nCODE:\n```\nThe Frame class doesn't have a property called 'Foo'.\n```\n\n----------------------------------------\n\nTITLE: Referencing UI Elements with Value Objects (Lua)\nDESCRIPTION: This snippet showcases the use of Value Objects to reference UI elements. A `Fusion.Value` object is created to hold a reference to the `Part`. The `:set()` method is used to assign the Part to the Value Object, allowing the `Adornee` property of the SelectionBox to be dynamically updated when the Part is created.\nSOURCE: https://github.com/dphfox/fusion/blob/main/docs/tutorials/best-practices/references.md#_snippet_2\n\nLANGUAGE: Lua\nCODE:\n```\n-- `selectionTarget` will show as `nil` to all code trying to use it, until the\n-- `:set()` method is called later on.\nlocal selectionTarget: Fusion.Value<Part?> = scope:Value(nil)\n\nlocal ui = scope:New \"Folder\" {\n\t[Children] = {\n\t\tscope:New \"SelectionBox\" {\n\t\t\tAdornee = selectionTarget\n\t\t},\n\t\tselectionTarget:set(\n\t\t\tscope:New \"Part\" {\n\t\t\t\tName = \"Selection Target\",\n\t\t\t}\n\t\t)\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Spring setPosition Method in Lua\nDESCRIPTION: Defines the setPosition method for the Spring type, which immediately snaps the spring to the given position. The newPosition parameter must have the same typeof() as the goal state. This method allows direct control over the spring's position.\nSOURCE: https://github.com/dphfox/fusion/blob/main/docs/api-reference/animation/types/spring.md#_snippet_1\n\nLANGUAGE: Lua\nCODE:\n```\nfunction Spring:setPosition(\n\tnewPosition: T\n): ()\n```\n\n----------------------------------------\n\nTITLE: Defining a Global Theme Module (Lua)\nDESCRIPTION: This Lua code defines a global theme module named `Theme`. It contains color definitions for background and text using Color3 values. The module returns a table containing these color definitions, making them accessible from anywhere in the codebase via `require`. It illustrates a simple global for sharing theme values.\nSOURCE: https://github.com/dphfox/fusion/blob/main/docs/tutorials/best-practices/sharing-values.md#_snippet_0\n\nLANGUAGE: Lua\nCODE:\n```\nlocal Theme = {}\n\nTheme.colours = {\n\tbackground = Color3.fromHex(\"FFFFFF\"),\n\ttext = Color3.fromHex(\"222222\"),\n\t-- etc.\n}\n\nreturn Theme\n```\n\n----------------------------------------\n\nTITLE: Adding Fusion Functions in Bulk to a Scope in Lua\nDESCRIPTION: This snippet demonstrates passing the entire `Fusion` table to `scoped()`.  This allows you to access all of Fusion's functions as methods on the scope without having to import each one manually.\nSOURCE: https://github.com/dphfox/fusion/blob/main/docs/tutorials/fundamentals/scopes.md#_snippet_9\n\nLANGUAGE: Lua\nCODE:\n```\nlocal scope = scoped(Fusion)\n\n-- all still works!\nlocal thing1 = scope:Value(\"i am thing 1\")\nlocal thing2 = scope:Value(\"i am thing 2\")\nlocal thing3 = scope:Value(\"i am thing 3\")\n\nscope:doCleanup()\n```\n\n----------------------------------------\n\nTITLE: Cleaning up scope objects in `ForPairs` when keys/values are removed in Lua\nDESCRIPTION: Shows how objects added to the scope within the `ForPairs` processor function are cleaned up when either the processed key or the processed value is removed. A function is inserted into the scope, and the table is updated, triggering the cleanup function.\nSOURCE: https://github.com/dphfox/fusion/blob/main/docs/tutorials/tables/forpairs.md#_snippet_5\n\nLANGUAGE: Lua\nCODE:\n```\nlocal itemColours = scope:Value({ shoes = \"red\", socks = \"blue\" })\nlocal swapped = scope:ForPairs(data, function(use, scope, item, colour)\n\ttable.insert(scope, function()\n\t\tprint(\"No longer wearing \" .. colour .. \" \" .. item)\n\tend)\n\treturn colour, item\nend)\n\nitemColours:set({ shoes = \"red\", socks = \"green\" }) --> No longer wearing blue socks\n```\n\n----------------------------------------\n\nTITLE: GraphObject Type Definition in Lua\nDESCRIPTION: Defines the GraphObject type in Luau, representing a reactive graph object with properties for managing dependencies, tracking changes, and controlling evaluation behavior. It includes `createdAt` for tracking object creation time, `dependencySet` and `dependentSet` for managing dependencies, `lastChange` for tracking the last meaningful change, `timeliness` for controlling revalidation frequency, and `validity` for tracking the object's validation status. The type also includes an `_evaluate` method for performing computational updates.\nSOURCE: https://github.com/dphfox/fusion/blob/main/docs/api-reference/graph/types/graphobject.md#_snippet_0\n\nLANGUAGE: Lua\nCODE:\n```\nexport type GraphObject = ScopedObject & {\n\tcreatedAt: number\n\tdependencySet: {[GraphObject]: unknown},\n\tdependentSet: {[GraphObject]: unknown},\n\tlastChange: number?,\n\ttimeliness: \"lazy\" | \"eager\",\n\tvalidity: \"valid\" | \"invalid\" | \"busy\",\n\t_evaluate: (GraphObject, lastChange: number?) -> boolean\n}\n```\n\n----------------------------------------\n\nTITLE: Create ScreenGui and PlayerList Instance (Lua)\nDESCRIPTION: This Lua code creates a `ScreenGui` object named `PlayerListGui` and parents it to the `PlayerGui` of the local player.  It then creates an instance of the `PlayerList` component, passing in the dynamically updated `players` value as the `Players` prop. This renders the dynamically updating player list on the player's screen.  The Fusion scope ensures proper cleanup when the script is disabled.\nSOURCE: https://github.com/dphfox/fusion/blob/main/docs/examples/cookbook/player-list.md#_snippet_4\n\nLANGUAGE: Lua\nCODE:\n```\nlocal gui = scope:New \"ScreenGui\" {\n\tName = \"PlayerListGui\",\n\tParent = Players.LocalPlayer:FindFirstChildOfClass(\"PlayerGui\"),\n\n\t[Children] = scope:PlayerList {\n\t\tPlayers = players\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Asynchronous User Bio Fetch Function (Lua)\nDESCRIPTION: This Lua snippet defines a function, `fetchUserBio`, that simulates fetching a user bio from a server. It takes a `userID` as input, waits for 1 second to simulate network latency, and then returns a string containing the user's bio. This function represents a blocking operation that should not be run directly inside a `Computed`.\nSOURCE: https://github.com/dphfox/fusion/blob/main/docs/examples/cookbook/fetch-data-from-server.md#_snippet_1\n\nLANGUAGE: Lua\nCODE:\n```\nlocal function fetchUserBio(\n\tuserID: number\n): string\n\t-- pretend this calls out to a server somewhere, causing this code to yield\n\ttask.wait(1)\n\treturn \"This is the bio for user \" .. userID .. \"!\"\nend\n```\n\n----------------------------------------\n\nTITLE: Fusion: Component Children Instantiation\nDESCRIPTION: This snippet shows how to define children for a component within the component's declaration by directly passing children or passing the children into a variable before. Both ways provide the same functionality.\nSOURCE: https://github.com/dphfox/fusion/blob/main/docs/tutorials/best-practices/callbacks.md#_snippet_6\n\nLANGUAGE: Lua\nCODE:\n```\n-- This snippet...\nlocal dialog = scope:Dialog {\n\t[Children] = {\n\t\tscope:Button {\n\t\t\tText = \"Hello, world!\" \n\t\t},\n\t\tscope:Text {\n\t\t\tText = \"I am pre-fabricated!\" \n\t\t}\n\t}\n}\n\n-- ...is equivalent to this code.\nlocal children = {\n\tscope:Button {\n\t\tText = \"Hello, world!\" \n\t\t},\n\tscope:Text {\n\t\tText = \"I am pre-fabricated!\" \n\t\t}\n}\n\nlocal dialog = scope:Dialog {\n\t[Children] = children\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Theme Colors in Lua\nDESCRIPTION: This snippet defines a table of theme colors, each with light and dark variants.  The colors are defined using Color3.fromHex.  This is the initial setup for the dynamic theme system. It requires the Color3 object, likely from Roblox.\nSOURCE: https://github.com/dphfox/fusion/blob/main/docs/examples/cookbook/light-and-dark-theme.md#_snippet_1\n\nLANGUAGE: Lua\nCODE:\n```\nTheme.colours = {\n\tbackground = {\n\t\tlight = Color3.fromHex(\"FFFFFF\"),\n\t\tdark = Color3.fromHex(\"222222\")\n\t},\n\ttext = {\n\t\tlight = Color3.fromHex(\"222222\"),\n\t\tdark = Color3.fromHex(\"FFFFFF\")\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Scoped Spring Creation Example in Lua\nDESCRIPTION: Demonstrates how to use the `Spring` function as a method on a scope object. This approach is the recommended method for creating spring objects within a specified scope.\nSOURCE: https://github.com/dphfox/fusion/blob/main/docs/api-reference/animation/members/spring.md#_snippet_1\n\nLANGUAGE: Lua\nCODE:\n```\nlocal spring = scope:Spring(goal, speed, damping)\n```\n\n----------------------------------------\n\nTITLE: Fetching User Bio with Fusion and Task Scheduling (Lua)\nDESCRIPTION: This code snippet demonstrates how to fetch a user's bio asynchronously using a task scheduler (like Roblox's `task`) and Fusion objects. It initializes Fusion, defines a `fetchUserBio` function that simulates fetching data from a server, and uses Fusion's `scoped`, `Value`, and `Observer` to manage the user ID and bio data. It ensures that only one fetch operation is running at a time by cancelling any previous fetch tasks.\nSOURCE: https://github.com/dphfox/fusion/blob/main/docs/examples/cookbook/fetch-data-from-server.md#_snippet_0\n\nLANGUAGE: Lua\nCODE:\n```\nlocal Fusion = -- initialise Fusion here however you please!\nlocal scoped = Fusion.scoped\nlocal peek = Fusion.peek\n\nlocal function fetchUserBio(\n\tuserID: number\n): string\n\t-- pretend this calls out to a server somewhere, causing this code to yield\n\ttask.wait(1)\n\treturn \"This is the bio for user \" .. userID .. \"!\"\nend\n\n-- Don't forget to pass this to `doCleanup` if you disable the script.\nlocal scope = scoped(Fusion)\n\n-- This doesn't have to be a `Value` - any kind of state object works too.\nlocal currentUserID = scope:Value(1670764)\n\n-- While the bio is loading, this is `nil` instead of a string.\nlocal currentUserBio: Fusion.Value<string?> = scope:Value(nil)\n\ndo\n\tlocal fetchInProgress = nil\n\tlocal function performFetch()\n\t\tlocal userID = peek(currentUserID)\n\t\tcurrentUserBio:set(nil)\n\t\tif fetchInProgress ~= nil then\n\t\t\ttask.cancel(fetchInProgress)\n\t\tend\n\t\tfetchInProgress = task.spawn(function()\n\t\t\tcurrentUserBio:set(fetchUserBio(userID))\n\t\t\tfetchInProgress = nil\n\t\tend)\n\tend\n\tscope:Observer(currentUserID):onBind(performFetch)\nend\n\nscope:Observer(currentUserBio):onBind(function()\n\tlocal bio = peek(currentUserBio)\n\tif bio == nil then\n\t\tprint(\"User bio is loading...\")\n\telse\n\t\tprint(\"Loaded user bio:\", bio)\n\tend\nend)\n```\n\n----------------------------------------\n\nTITLE: Using onChange to Observe State Changes (Fusion/Lua)\nDESCRIPTION: This example showcases the usage of `:onChange()` to connect a function to an observer.  The function will print the new value of the observed state object whenever it changes. The code also demonstrates setting a new value to trigger the observer.\nSOURCE: https://github.com/dphfox/fusion/blob/main/docs/tutorials/fundamentals/observers.md#_snippet_2\n\nLANGUAGE: Lua\nCODE:\n```\nlocal observer = scope:Observer(health)\n\nprint(\"...connecting...\")\nobserver:onChange(function()\n\tprint(\"Observed a change to: \", peek(health))\nend)\n\nprint(\"...setting health to 25...\")\nhealth:set(25)\n```\n\n----------------------------------------\n\nTITLE: Fusion Unrecognised Property Stage Error\nDESCRIPTION: This error is thrown when a special key has a misconfigured `stage`, preventing Fusion from knowing when to apply it during instance construction. Verify the stage configuration of the special key.\nSOURCE: https://github.com/dphfox/fusion/blob/main/docs/api-reference/general/errors.md#_snippet_33\n\nLANGUAGE: text\nCODE:\n```\n'children' isn't a valid stage for a special key to be applied at.\n```\n\n----------------------------------------\n\nTITLE: Computed Checkbox State for Grouped Options (Lua)\nDESCRIPTION: This snippet demonstrates how to use a `Computed` object to represent the state of a 'master' checkbox that reflects the combined state of multiple other checkboxes. The `IsChecked` property is computed based on the states of `playMusic`, `playSFX`, and `playNarration`, returning different states depending on whether none, some, or all are checked. It uses the `CheckBox` component.\nSOURCE: https://github.com/dphfox/fusion/blob/main/docs/tutorials/best-practices/state.md#_snippet_4\n\nLANGUAGE: Lua\nCODE:\n```\nlocal playMusic = scope:Value(true)\nlocal playSFX = scope:Value(false)\nlocal playNarration = scope:Value(true)\n\nlocal checkBox = scope:CheckBox {\n    Text = \"Play sounds\",\n    IsChecked = scope:Computed(function(use)\n        local anyChecked = use(playMusic) or use(playSFX) or use(playNarration)\n        local allChecked = use(playMusic) and use(playSFX) and use(playNarration)\n\n        if not anyChecked then\n            return \"unchecked\"\n        elseif not allChecked then\n            return \"partially-checked\"\n        else\n            return \"checked\"\n        end\n    end)\n}\n```\n\n----------------------------------------\n\nTITLE: Draggable Component Type Definition (Lua)\nDESCRIPTION: This snippet defines the type signature for the Draggable component's props using Lua type annotations.  It includes fields for ID, Name, Parent, Layout, Dragging, and Children. The Dragging field contains information about mouse position, drag data, and the overlay frame.\nSOURCE: https://github.com/dphfox/fusion/blob/main/docs/examples/cookbook/drag-and-drop.md#_snippet_0\n\nLANGUAGE: Lua\nCODE:\n```\ntype DragInfo = {\n\tid: string,\n\tmouseOffset: Vector2 -- relative to the dragged item\n}\n\nlocal function Draggable(\n\tscope: Fusion.Scope,\n\tprops: {\n\t\tID: string,\n\t\tName: UsedAs<string>?,\n\t\tParent: UsedAs<Instance?>,\n\t\tLayout: {\n\t\t\tLayoutOrder: UsedAs<number>?,\n\t\t\tPosition: UsedAs<UDim2>?,\n\t\t\tAnchorPoint: UsedAs<Vector2>?,\n\t\t\tZIndex: UsedAs<number>?,\n\t\t\tSize: UsedAs<UDim2>?,\n\t\t\tAutomaticSize: UsedAs<Enum.AutomaticSize>?,\n\t\t\tOutAbsolutePosition: Fusion.Value<Vector2>?,\n\t\t},\n\t\tDragging: {\n\t\t\tMousePosition: UsedAs<Vector2>,\n\t\t\tSelfDragInfo: UsedAs<DragInfo?>,\n\t\t\tOverlayFrame: UsedAs<Instance?>\n\t\t},\n\t\t[typeof(Children)]: Fusion.Child\n\t}\n): Fusion.Child\n```\n\n----------------------------------------\n\nTITLE: Theme Module Using Contextuals (Lua)\nDESCRIPTION: This Lua code defines a theme module using contextuals instead of global state. It creates a `Theme.currentTheme` contextual with a default value of \"light\". The Fusion library is required. This allows the theme to be overridden in specific contexts without affecting other parts of the codebase.\nSOURCE: https://github.com/dphfox/fusion/blob/main/docs/tutorials/best-practices/sharing-values.md#_snippet_7\n\nLANGUAGE: Lua\nCODE:\n```\nlocal Fusion = require(\"path/to/Fusion.luau\")\nlocal Contextual = Fusion.Contextual\n\nlocal Theme = {}\n\nTheme.colours = {\n\tbackground = {\n\t\tlight = Color3.fromHex(\"FFFFFF\"),\n\t\tdark = Color3.fromHex(\"222222\")\n\t},\n\ttext = {\n\t\tlight = Color3.fromHex(\"FFFFFF\"),\n\t\tdark = Color3.fromHex(\"222222\")\n\t},\n\t-- etc.\n}\n\nTheme.currentTheme = Contextual(\"light\")\n\nreturn Theme\n```\n\n----------------------------------------\n\nTITLE: Observer onBind Method in Lua\nDESCRIPTION: Defines the onBind method for the Observer. This method immediately executes the provided callback function and also registers it to be executed when the Observer receives an update. It takes a callback function as input and returns a function that can be used to unregister the callback.\nSOURCE: https://github.com/dphfox/fusion/blob/main/docs/api-reference/graph/types/observer.md#_snippet_2\n\nLANGUAGE: Lua\nCODE:\n```\nfunction Observer:onBind(\n\tcallback: () -> ()\n): (() -> ())\n```\n\n----------------------------------------\n\nTITLE: ForKeys Value Change Optimisation - Lua\nDESCRIPTION: This snippet shows how `ForKeys` optimizes by copying values to the output table without recalculating the key. It illustrates that only new keys trigger key calculations, while value changes are directly copied.\nSOURCE: https://github.com/dphfox/fusion/blob/main/docs/tutorials/tables/forkeys.md#_snippet_7\n\nLANGUAGE: Lua\nCODE:\n```\nlocal array = scope:Value({\"Fusion\", \"Knit\", \"Matter\"})\nlocal dict = scope:ForKeys(array, function(use, scope, index)\n\treturn \"Value\" .. index\nend)\n\nprint(peek(dict)) --> {Value1 = \"Fusion\", Value2 = \"Knit\", Value3 = \"Matter\"}\n\narray:set({\"Roact\", \"Rodux\", \"Promise\"})\nprint(peek(dict)) --> {Value1 = \"Roact\", Value2 = \"Rodux\", Value3 = \"Promise\"}\n```\n\n----------------------------------------\n\nTITLE: Mixing Tables with Fusion.scoped() in Lua\nDESCRIPTION: This snippet shows how to mix additional tables with Fusion functions when creating a scope using `scoped()`. This allows you to add custom methods to the scope alongside the standard Fusion functions.\nSOURCE: https://github.com/dphfox/fusion/blob/main/docs/tutorials/fundamentals/scopes.md#_snippet_10\n\nLANGUAGE: Lua\nCODE:\n```\nlocal scope = scoped(Fusion, {\n\tFoo = ...,\n\tBar = ...\n})\n```\n\n----------------------------------------\n\nTITLE: Creating a Fusion Observer in Lua\nDESCRIPTION: This code snippet demonstrates the syntax for creating a Fusion observer using the `Fusion.Observer` function. It takes a scope and a target to watch as parameters and returns a new observer. It is recommended to use the method syntax `scope:Observer(watching)`.\nSOURCE: https://github.com/dphfox/fusion/blob/main/docs/api-reference/graph/members/observer.md#_snippet_0\n\nLANGUAGE: Lua\nCODE:\n```\nfunction Fusion.Observer(\n\tscope: Scope<unknown>,\n\twatching: unknown\n) -> Observer\n```\n\nLANGUAGE: Lua\nCODE:\n```\nlocal observer = scope:Observer(watching)\n```\n\n----------------------------------------\n\nTITLE: Creating AttributeChange SpecialKey in Fusion\nDESCRIPTION: This code snippet demonstrates the Fusion.AttributeChange function, which takes an attribute name as a string and returns a SpecialKey. This SpecialKey can be used to listen for changes to the specified attribute when paired with a callback in a property table. The function creates and returns a SpecialKey object tailored for monitoring the named attribute.\nSOURCE: https://github.com/dphfox/fusion/blob/main/docs/api-reference/roblox/members/attributechange.md#_snippet_0\n\nLANGUAGE: Lua\nCODE:\n```\nfunction Fusion.AttributeChange(\n\tattributeName: string\n): SpecialKey\n```\n\n----------------------------------------\n\nTITLE: Fusion: Button Component with Direct OnClick Callback\nDESCRIPTION: This revised button component directly assigns the `props.OnClick` callback to the `[OnEvent \"Activated\"]` event. If `props.OnClick` is nil, the key will not be added. This enables the button to trigger the provided callback when activated.\nSOURCE: https://github.com/dphfox/fusion/blob/main/docs/tutorials/best-practices/callbacks.md#_snippet_4\n\nLANGUAGE: Lua\nCODE:\n```\nlocal function Button(\n\tscope: Fusion.Scope,\n\tprops: {\n\t\tPosition: UsedAs<UDim2>?,\n\t\tSize: UsedAs<UDim2>?,\n\t\tText: UsedAs<string>?,\n\t\tOnClick: (() -> ())?\n\t}\n)   \n\treturn scope:New \"TextButton\" {\n        BackgroundColor3 = Color3.new(0.25, 0.5, 1),\n        Position = props.Position,\n        Size = props.Size,\n\n        Text = props.Text,\n        TextColor3 = Color3.new(1, 1, 1),\n\n        [OnEvent \"Activated\"] = props.OnClick\n    }\nend\n```\n\n----------------------------------------\n\nTITLE: Nesting New Instances as Children in Lua\nDESCRIPTION: This code showcases how to nest `scope:New` calls to create a Folder containing a Part. The Part is created directly as the value of the `[Children]` key within the Folder's property table, establishing the parent-child relationship.\nSOURCE: https://github.com/dphfox/fusion/blob/main/docs/tutorials/roblox/parenting.md#_snippet_3\n\nLANGUAGE: Lua\nCODE:\n```\n-- Makes a Folder, containing a part called Gregory\nlocal folder = scope:New \"Folder\" {\n    [Children] = scope:New \"Part\" {\n        Name = \"Gregory\",\n        Color = Color3.new(1, 0, 0)\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining StateObject Type in Lua\nDESCRIPTION: This code defines the `StateObject` type in Lua for the Fusion library.  It extends `GraphObject` and includes properties like `type`, `kind`, and `_EXTREMELY_DANGEROUS_usedAsValue`.  The `_EXTREMELY_DANGEROUS_usedAsValue` property is explicitly marked as intended for low-level library authors only and should not be accessed in end-user code.\nSOURCE: https://github.com/dphfox/fusion/blob/main/docs/api-reference/state/types/stateobject.md#_snippet_0\n\nLANGUAGE: Lua\nCODE:\n```\nexport type StateObject<T> = GraphObject & {\n\ttype: \"State\",\n\tkind: string,\n\t_EXTREMELY_DANGEROUS_usedAsValue: T\n}\n```\n\n----------------------------------------\n\nTITLE: Fusion Poisoned Scope Error\nDESCRIPTION: This error occurs when attempting to use a scope after it has been destroyed using `doCleanup()`. Avoid reusing scopes after cleanup and ensure references to cleaned-up scopes are forgotten.\nSOURCE: https://github.com/dphfox/fusion/blob/main/docs/api-reference/general/errors.md#_snippet_23\n\nLANGUAGE: text\nCODE:\n```\nAttempted to use a scope after it's been destroyed; `doCleanup()` was previously\ncalled on this scope. Ensure you are not reusing scopes after cleanup.\n```\n\n----------------------------------------\n\nTITLE: Defining Scope Type in Lua\nDESCRIPTION: This code snippet defines the `Scope` type in Lua, using TypeScript-like syntax.  It's a table that collects objects created as part of an independent unit of code, optionally including constructors from the Fusion library. The type `{unknown}` represents an untyped table, and `Constructors` is defaulted to the Fusion object.\nSOURCE: https://github.com/dphfox/fusion/blob/main/docs/api-reference/memory/types/scope.md#_snippet_0\n\nLANGUAGE: Lua\nCODE:\n```\nexport type Scope<Constructors = typeof(Fusion)> = {unknown} & Constructors\n```\n\n----------------------------------------\n\nTITLE: Requiring Fusion with darklua\nDESCRIPTION: This Lua snippet demonstrates requiring the Fusion module using a relative path assumed to be compatible with darklua.  It assumes that the Fusion module is located within a 'shared' directory one level above the current script. This is useful when organizing external files in a Luau project.\nSOURCE: https://github.com/dphfox/fusion/blob/main/docs/tutorials/get-started/installing-fusion.md#_snippet_2\n\nLANGUAGE: Lua\nCODE:\n```\nlocal Fusion = require(\"../shared/Fusion\")\n```\n\n----------------------------------------\n\nTITLE: Reading the processed table using `peek()` in Lua\nDESCRIPTION: Shows how to read the processed table created by `ForPairs` using the `peek()` method. This example swaps keys and values in the input table and then prints the resulting table.\nSOURCE: https://github.com/dphfox/fusion/blob/main/docs/tutorials/tables/forpairs.md#_snippet_2\n\nLANGUAGE: Lua\nCODE:\n```\nlocal itemColours = { shoes = \"red\", socks = \"blue\" }\nlocal swapped = scope:ForPairs(data, function(use, scope, item, colour)\n\treturn colour, item\nend)\n\nprint(peek(swapped)) --> { red = \"shoes\", blue = \"socks\" }\n```\n\n----------------------------------------\n\nTITLE: Fusion Use After Destroy Error\nDESCRIPTION: This error occurs when attempting to access an object after it has been destroyed. Ensure that objects are added to the correct scopes based on when they are expected to be destroyed, and that the code can handle situations where other objects are no longer available.\nSOURCE: https://github.com/dphfox/fusion/blob/main/docs/api-reference/general/errors.md#_snippet_34\n\nLANGUAGE: text\nCODE:\n```\nThe Value object is no longer valid - it was destroyed before the Computed that \nis use()-ing. See discussion #292 on GitHub for advice.\n```\n\n----------------------------------------\n\nTITLE: Disconnecting an onChange Handler (Fusion/Lua)\nDESCRIPTION: This code snippet illustrates how to disconnect a previously connected `:onChange()` handler using the disconnect function returned by `:onChange()`. This allows for dynamic control over when the observer actively listens for state changes.\nSOURCE: https://github.com/dphfox/fusion/blob/main/docs/tutorials/fundamentals/observers.md#_snippet_3\n\nLANGUAGE: Lua\nCODE:\n```\nlocal disconnect = observer:onChange(function()\n\tprint(\"The new value is: \", peek(health))\nend)\n\n-- disconnect the above handler after 5 seconds\ntask.wait(5)\ndisconnect()\n```\n\n----------------------------------------\n\nTITLE: Defining Contextual Type in Lua\nDESCRIPTION: Defines the 'Contextual' type in Luau, used in the Fusion framework. The Contextual type represents a value that is contextual based on the current coroutine. Includes type definition with methods 'now' and 'is'.\nSOURCE: https://github.com/dphfox/fusion/blob/main/docs/api-reference/general/types/contextual.md#_snippet_0\n\nLANGUAGE: Lua\nCODE:\n```\nexport type Contextual<T> = {\n\ttype: \"Contextual\",\n\tnow: (self) -> T,\n\tis: (self, newValue: T) -> {\n\t\tduring: <R, A...>(self, callback: (A...) -> R, A...) -> R\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Dynamic Theme Colors with Computed\nDESCRIPTION: This snippet iterates through the defined colors and creates a Fusion.Computed object for each.  Each Computed object dynamically selects the correct color variant (light or dark) based on the current theme. It requires Fusion, the Theme.colours table, and the Theme.current Value object. The resulting Computed objects are stored in Theme.dynamic.\nSOURCE: https://github.com/dphfox/fusion/blob/main/docs/examples/cookbook/light-and-dark-theme.md#_snippet_3\n\nLANGUAGE: Lua\nCODE:\n```\nTheme.dynamic = {}\nfor colour, variants in Theme.colours do\n\tTheme.dynamic[colour] = scope:Computed(function(use)\n\t\treturn variants[use(Theme.current)]\n\tend)\nend\n```\n\n----------------------------------------\n\nTITLE: Inserting Destruction Tasks into a Scope in Lua\nDESCRIPTION: This snippet demonstrates the `scope:insert()` method, which allows inserting destruction tasks (e.g., disconnecting events, destroying instances) into a scope. The tasks will be executed in reverse order when `doCleanup` is called on the scope. `conn` and `ins` are assumed to be existing variables.\nSOURCE: https://github.com/dphfox/fusion/blob/main/docs/tutorials/fundamentals/scopes.md#_snippet_8\n\nLANGUAGE: Lua\nCODE:\n```\nlocal conn, ins = scope:insert(\n\tRunService.Heartbeat:Connect(doUpdate),\n\tInstance.new(\"Part\", workspace)\n)\n```\n\n----------------------------------------\n\nTITLE: Fusion Spring NaN Motion Error\nDESCRIPTION: This error occurs when a spring encounters NaN during motion calculations for position or velocity, causing it to snap to the goal position. Ensure that the spring's position and velocity do not become NaN during calculations, which is often due to mathematical errors like division by zero.\nSOURCE: https://github.com/dphfox/fusion/blob/main/docs/api-reference/general/errors.md#_snippet_26\n\nLANGUAGE: text\nCODE:\n```\nA spring encountered NaN during motion, so has snapped to the goal position.\nEnsure no springs have NaN positions or velocities.\n```\n\n----------------------------------------\n\nTITLE: Creating a Fusion Value (Lua)\nDESCRIPTION: This snippet shows how to create a Fusion `Value` object with an initial boolean value of `false`. This value is used to control the animation of the UI element.\nSOURCE: https://github.com/dphfox/fusion/blob/main/docs/examples/cookbook/animated-computed.md#_snippet_4\n\nLANGUAGE: Lua\nCODE:\n```\n-- You can set this at any time to indicate where The Thing should be.\nlocal showTheThing = scope:Value(false)\n```\n\n----------------------------------------\n\nTITLE: Using Safe Expressions in Luau\nDESCRIPTION: This code snippet shows the basic structure for using `Safe` expressions in Luau, providing a `try` block for potentially error-prone code and a `fallback` block to handle errors.  `Safe` simplifies error handling by automatically returning the result of the `try` block if successful, or the result of the `fallback` block if an error occurs.\nSOURCE: https://github.com/dphfox/fusion/blob/main/docs/tutorials/best-practices/error-safety.md#_snippet_5\n\nLANGUAGE: Luau\nCODE:\n```\nSafe {\n\ttry = function()\n\t\treturn -- a value that might error during calculation\n\tend,\n\tfallback = function(theError)\n\t\treturn -- a fallback value if an error does occur\n\tend\n}\n```\n\n----------------------------------------\n\nTITLE: cannotAssignProperty Message\nDESCRIPTION: This error message indicates that Fusion was unable to assign a value to a property on a Roblox instance. This can occur if the property doesn't exist, or if the property is read-only and locked by Roblox. It highlights potential privilege issues where scripts may lack the necessary permissions to modify properties.\nSOURCE: https://github.com/dphfox/fusion/blob/main/docs/api-reference/general/errors.md#_snippet_2\n\nLANGUAGE: text\nCODE:\n```\nThe class type 'Foo' has no assignable property 'Bar'.\n```\n\n----------------------------------------\n\nTITLE: Initializing UI with Missing Adornee Reference (Lua)\nDESCRIPTION: This code snippet demonstrates the initial setup of a UI folder containing a SelectionBox and a Part. The challenge is how to reference the Part as the Adornee of the SelectionBox within the same initialization block, represented by the '???' placeholder.\nSOURCE: https://github.com/dphfox/fusion/blob/main/docs/tutorials/best-practices/references.md#_snippet_0\n\nLANGUAGE: Lua\nCODE:\n```\nlocal ui = scope:New \"Folder\" {\n\t[Children] = {\n\t\tscope:New \"SelectionBox\" {\n\t\t\t-- the box should adorn to the part, but how do you reference it?\n\t\t\tAdornee = ???,\n\t\t},\n\t\tscope:New \"Part\" {\n\t\t\tName = \"Selection Target\",\n\t\t}\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: TodoEntry Component Type Definition (Lua)\nDESCRIPTION: This snippet defines the type signature for the `TodoEntry` component's props. It includes the `TodoItem` data, Parent, Layout, Dragging information, and an `OnMouseDown` callback. It shares properties with the `Draggable` component, allowing for direct property pass-through.\nSOURCE: https://github.com/dphfox/fusion/blob/main/docs/examples/cookbook/drag-and-drop.md#_snippet_4\n\nLANGUAGE: Lua\nCODE:\n```\ntype TodoItem = {\n\tid: string,\n\ttext: string,\n\tcompleted: Fusion.Value<boolean>\n}\n\nlocal function TodoEntry(\n\tscope: Fusion.Scope,\n\tprops: {\n\t\tItem: TodoItem,\n\t\tParent: UsedAs<Instance?>,\n\t\tLayout: {\n\t\t\tLayoutOrder: UsedAs<number>?,\n\t\t\tPosition: UsedAs<UDim2>?,\n\t\t\tAnchorPoint: UsedAs<Vector2>?,\n\t\t\tZIndex: UsedAs<number>?,\n\t\t\tSize: UsedAs<UDim2>?,\n\t\t\tOutAbsolutePosition: Fusion.Value<Vector2>?,\n\t\t},\n\t\tDragging: {\n\t\t\tMousePosition: UsedAs<Vector2>,\n\t\t\tSelfDragInfo: UsedAs<DragInfo?>,\n\t\t\tOverlayFrame: UsedAs<Instance?>\n\t\t},\n\t\tOnMouseDown: () -> ()?\n\t}\n): Fusion.Child\n```\n\n----------------------------------------\n\nTITLE: Updating Current Time Value (Highlighted)\nDESCRIPTION: This snippet highlights the code responsible for updating the `currentTime` value. It connects to `RunService.RenderStepped` and updates the value using `os.clock()` every frame, ensuring a smooth animation.\nSOURCE: https://github.com/dphfox/fusion/blob/main/docs/examples/cookbook/loading-spinner.md#_snippet_6\n\nLANGUAGE: Lua\nCODE:\n```\nlocal currentTime = scope:Value(os.clock())\ntable.insert(scope,\n\tRunService.RenderStepped:Connect(function()\n\t\tcurrentTime:set(os.clock())\n\tend)\n)\n```\n\n----------------------------------------\n\nTITLE: Define ScopedObject type in Lua\nDESCRIPTION: This code snippet defines the `ScopedObject` type in Lua.  It includes a `scope` property of type `Scope<unknown>` which can be nil, and a `destroy` function that takes no arguments and returns nothing. This type is intended for use with Fusion's scope system for managing object lifetimes.\nSOURCE: https://github.com/dphfox/fusion/blob/main/docs/api-reference/memory/types/scopedobject.md#_snippet_0\n\nLANGUAGE: Lua\nCODE:\n```\nexport type ScopedObject = {\n\tscope: Scope<unknown>?,\n\tdestroy: () -> ()\n}\n```\n\n----------------------------------------\n\nTITLE: Using state Objects in ForKeys Calculations - Lua\nDESCRIPTION: This snippet demonstrates using state objects within the calculations performed by `ForKeys`. It shows how changes to the used state objects affect the output. A state object is used within the `prefixes` table, and its value is updated, which in turn changes the output of the `ForKeys` object.\nSOURCE: https://github.com/dphfox/fusion/blob/main/docs/tutorials/tables/forkeys.md#_snippet_4\n\nLANGUAGE: Lua\nCODE:\n```\nlocal foodSet = scope:Value({ broccoli = true, chocolate = true })\n\nlocal prefixes = { chocolate = \"yummy\", broccoli = scope:Value(\"gross\") }\nlocal renamedFoodSet = scope:ForKeys(foodSet, function(use, scope, food)\n\treturn use(prefixes[food]) .. food\nend)\n\nprint(peek(renamedFoodSet)) --> { gross_broccoli = true, yummy_chocolate = true }\n\nprefixes.broccoli:set(\"scrumptious\")\nprint(peek(renamedFoodSet)) --> { scrumptious_broccoli = true, yummy_chocolate = true }\n```\n\n----------------------------------------\n\nTITLE: Fusion Tween NaN Motion Error\nDESCRIPTION: This error occurs when a tween encounters NaN during motion calculations, causing it to snap to the goal.  Ensure no tweens have NaN in their tween infos. NaN values typically result from mathematical errors like division by zero.\nSOURCE: https://github.com/dphfox/fusion/blob/main/docs/api-reference/general/errors.md#_snippet_29\n\nLANGUAGE: text\nCODE:\n```\nA tween encountered NaN during motion, so has snapped to the goal. Ensure no\ntweens have NaN in their tween infos.\n```\n\n----------------------------------------\n\nTITLE: forKeyCollision Message\nDESCRIPTION: This error message indicates that the same key was returned multiple times simultaneously within a `For` object, violating the requirement for unique keys in tables. It is thrown by `ForKeys` and `ForPairs`.\nSOURCE: https://github.com/dphfox/fusion/blob/main/docs/api-reference/general/errors.md#_snippet_8\n\nLANGUAGE: text\nCODE:\n```\nThe key '6' was returned multiple times simultaneously, which is not allowed in\n`For` objects.\n```\n\n----------------------------------------\n\nTITLE: ForValues Scoped Method Syntax - Lua\nDESCRIPTION: Demonstrates the intended usage of `Fusion.ForValues` as a method on a scope object. Shows how to call the function using the colon syntax, passing the input table and processor function as arguments. The result is a new `For` state object.\nSOURCE: https://github.com/dphfox/fusion/blob/main/docs/api-reference/state/members/forvalues.md#_snippet_1\n\nLANGUAGE: Lua\nCODE:\n```\nlocal forObj = scope:ForValues(inputTable, processor)\n```\n\n----------------------------------------\n\nTITLE: Requiring Fusion from ReplicatedStorage\nDESCRIPTION: This Lua snippet demonstrates how to require the Fusion module from ReplicatedStorage in Roblox. It retrieves the ReplicatedStorage service and then requires the Fusion module script, which is assumed to be located directly within ReplicatedStorage. This is common when installing Fusion via the Roblox model file.\nSOURCE: https://github.com/dphfox/fusion/blob/main/docs/tutorials/get-started/installing-fusion.md#_snippet_0\n\nLANGUAGE: Lua\nCODE:\n```\nlocal ReplicatedStorage = game:GetService(\"ReplicatedStorage\")\nlocal Fusion = require(ReplicatedStorage.Fusion)\n```\n\n----------------------------------------\n\nTITLE: invalidAttributeOutType Message\nDESCRIPTION: This error message indicates that `AttributeOut` was provided with a non-Value object. `AttributeOut` properties must be given Value objects.\nSOURCE: https://github.com/dphfox/fusion/blob/main/docs/api-reference/general/errors.md#_snippet_10\n\nLANGUAGE: text\nCODE:\n```\n[AttributeOut] properties must be given Value objects.\n```\n\n----------------------------------------\n\nTITLE: Importing Fusion.Children in Lua\nDESCRIPTION: This snippet shows how to import the `Children` key directly from the Fusion library.  This allows using `Children` without needing a scope, as it's a direct reference to the `Children` functionality within Fusion.\nSOURCE: https://github.com/dphfox/fusion/blob/main/docs/tutorials/roblox/parenting.md#_snippet_1\n\nLANGUAGE: Lua\nCODE:\n```\nlocal Children = Fusion.Children\n```\n\n----------------------------------------\n\nTITLE: Component Definition Using Fusion Scope in Lua\nDESCRIPTION: This code demonstrates how to create a component that uses common Fusion methods, such as `scope:New`. It defines a component function that expects a `Fusion.Scope` object, which is then used to create a new UI element.\nSOURCE: https://github.com/dphfox/fusion/blob/main/docs/tutorials/best-practices/components.md#_snippet_7\n\nLANGUAGE: Lua\nCODE:\n```\nlocal function Component(\n\t\tscope: Fusion.Scope,\n\t\tprops: {}\n\t)\n\t\treturn scope:New \"Thing\" {\n\t\t\t-- ... rest of code here ...\n\t\t}\n\tend\n```\n\n----------------------------------------\n\nTITLE: Fusion Unrecognised Property Key Error\nDESCRIPTION: This error occurs when something other than a property assignment or special key is provided in a property table. This commonly happens when trying to add child instances directly into the property table instead of passing them to the `[Children]` special key.\nSOURCE: https://github.com/dphfox/fusion/blob/main/docs/api-reference/general/errors.md#_snippet_32\n\nLANGUAGE: text\nCODE:\n```\n'number' keys aren't accepted in property tables.\n```\n\n----------------------------------------\n\nTITLE: Animating Position with Fusion Tween (Lua)\nDESCRIPTION: This snippet combines the `Computed` value and `TWEEN_INFO` to create a smooth animation for the UI element's position. The `scope:Tween` object takes the computed value as input and smoothly transitions the position over time.\nSOURCE: https://github.com/dphfox/fusion/blob/main/docs/examples/cookbook/animated-computed.md#_snippet_6\n\nLANGUAGE: Lua\nCODE:\n```\nPosition = scope:Tween(\n\t\t\tscope:Computed(function(use)\n\t\t\t\tlocal CENTRE = UDim2.fromScale(0.5, 0.5)\n\t\t\t\tlocal OFFSCREEN = UDim2.fromScale(-0.5, 0.5)\n\t\t\t\treturn if use(showTheThing) then CENTRE else OFFSCREEN\n\t\t\tend),\n\t\t\tTWEEN_INFO\n\t\t),\n```\n\n----------------------------------------\n\nTITLE: Initializing ForValues with State Object Table - Lua\nDESCRIPTION: This code demonstrates how to use a state object as the input table for the `ForValues` object. When the state object table changes, the output of the `ForValues` object is automatically updated. Dependencies: Fusion scope object is assumed.\nSOURCE: https://github.com/dphfox/fusion/blob/main/docs/tutorials/tables/forvalues.md#_snippet_3\n\nLANGUAGE: Lua\nCODE:\n```\nlocal numbers = scope:Value({})\nlocal doubled = scope:ForValues(numbers, function(use, scope, num)\n\treturn num * 2\nend)\n\nnumbers:set({1, 2, 3, 4, 5})\nprint(peek(doubled)) --> {2, 4, 6, 8, 10}\n\nnumbers:set({5, 15, 25})\nprint(peek(doubled)) --> {10, 30, 50}\n```\n\n----------------------------------------\n\nTITLE: Creating a Fusion Value Object\nDESCRIPTION: This snippet shows how to create a Fusion Value object using `scope:Value()`.  It requires the `Fusion` module to be loaded from `ReplicatedStorage.Fusion`. `scope:Value(5)` creates a new value object initialized with the value 5.  It depends on the `Fusion` module and related cleanup and scoping functions.\nSOURCE: https://github.com/dphfox/fusion/blob/main/docs/tutorials/fundamentals/values.md#_snippet_1\n\nLANGUAGE: Lua\nCODE:\n```\nlocal Fusion = require(ReplicatedStorage.Fusion)\nlocal doCleanup, scoped = Fusion.doCleanup, Fusion.scoped\n\nlocal scope = scoped(Fusion)\nlocal health = scope:Value(5)\n```\n\n----------------------------------------\n\nTITLE: invalidEventHandler Message\nDESCRIPTION: This error message indicates that `OnEvent` was provided with a non-function event handler. The event handler must be a valid function.\nSOURCE: https://github.com/dphfox/fusion/blob/main/docs/api-reference/general/errors.md#_snippet_12\n\nLANGUAGE: text\nCODE:\n```\nThe handler for the 'MouseEnter' event must be a function.\n```\n\n----------------------------------------\n\nTITLE: Fusion Property Set Error\nDESCRIPTION: This error is thrown when attempting to set a property, but Roblox throws an error in response, such as setting a non-positive value for UIAspectRatioConstraint.AspectRatio.  The error message from Roblox provides more specific details for debugging.\nSOURCE: https://github.com/dphfox/fusion/blob/main/docs/api-reference/general/errors.md#_snippet_24\n\nLANGUAGE: text\nCODE:\n```\nError setting property: UIAspectRatioConstraint.AspectRatio set to a\nnon-positive value. Value must be a positive.\n```\n\n----------------------------------------\n\nTITLE: Creating a Fusion Scope in Luau\nDESCRIPTION: This snippet creates a new scope using `Fusion:scoped()`. Scopes are used to group Fusion objects together for easier management and cleanup.\nSOURCE: https://github.com/dphfox/fusion/blob/main/docs/tutorials/fundamentals/your-first-project.md#_snippet_1\n\nLANGUAGE: Lua\nCODE:\n```\nlocal ReplicatedStorage = game:GetService(\"ReplicatedStorage\")\nlocal Fusion = require(ReplicatedStorage.Fusion)\n\nlocal scope = Fusion:scoped()\n```\n\n----------------------------------------\n\nTITLE: Defining Animatable Type in Lua\nDESCRIPTION: Defines the `Animatable` type as a union of several Roblox data types that can be animated using Fusion's `Tween` and `Spring` objects. This includes primitive types like `number` and complex types like `CFrame`, `Color3`, and various vector types. Non-Animatable types will not be animated; instead, they will instantly reach their goal value.\nSOURCE: https://github.com/dphfox/fusion/blob/main/docs/api-reference/animation/types/animatable.md#_snippet_0\n\nLANGUAGE: Lua\nCODE:\n```\nexport type Animatable =\n\tnumber |\n\tCFrame |\n\tColor3 |\n\tColorSequenceKeypoint |\n\tDateTime |\n\tNumberRange |\n\tNumberSequenceKeypoint |\n\tPhysicalProperties |\n\tRay |\n\tRect |\n\tRegion3 |\n\tRegion3int16 |\n\tUDim |\n\tUDim2 |\n\tVector2 |\n\tVector2int16 |\n\tVector3 |\n\tVector3int16\n```\n\n----------------------------------------\n\nTITLE: Using the scoped() method syntax for Fusion.Tween in Lua\nDESCRIPTION: This code demonstrates the recommended way to call the Fusion.Tween function, as a method on a scope object. This is achieved using the colon syntax (scope:Tween), which implicitly passes the scope as the first argument to the Tween function.\nSOURCE: https://github.com/dphfox/fusion/blob/main/docs/api-reference/animation/members/tween.md#_snippet_1\n\nLANGUAGE: Lua\nCODE:\n```\nlocal tween = scope:Tween(goal, info)\n```\n\n----------------------------------------\n\nTITLE: invalidChangeHandler Message\nDESCRIPTION: This error message indicates that `OnChange` was provided with a non-function change handler. The change handler must be a valid function.\nSOURCE: https://github.com/dphfox/fusion/blob/main/docs/api-reference/general/errors.md#_snippet_11\n\nLANGUAGE: text\nCODE:\n```\nThe change handler for the 'AbsoluteSize' property must be a function.\n```\n\n----------------------------------------\n\nTITLE: Creating a Fusion Value in Luau\nDESCRIPTION: This snippet creates a Fusion value within a given scope. The value is initialized with the number 50. Values store single data points.\nSOURCE: https://github.com/dphfox/fusion/blob/main/docs/tutorials/fundamentals/your-first-project.md#_snippet_2\n\nLANGUAGE: Lua\nCODE:\n```\nlocal scope = Fusion:scoped()\n\nlocal numCoins = scope:Value(50)\n```\n\n----------------------------------------\n\nTITLE: Creating Instances with Fusion (Luau)\nDESCRIPTION: This code snippet demonstrates how to create instances using Fusion's dedicated functions. It shows how to configure the instance's properties in a single place, including setting the parent and brick color. It shows how `scope:New` helps keep all instance-related code together.\nSOURCE: https://github.com/dphfox/fusion/blob/main/docs/index.md#_snippet_3\n\nLANGUAGE: Lua\nCODE:\n```\n-- This will create a red part in the workspace.\nlocal myPart = scope:New \"Part\" {\n\tParent = workspace,\n\tBrickColor = BrickColor.Red()\n}\n```\n\n----------------------------------------\n\nTITLE: Switching Themes and Accessing Colors\nDESCRIPTION: This snippet demonstrates how to switch between theme variants by setting the value of the `Theme.current` Value object. It then uses `Fusion.peek` to access the current value of a dynamic color. It showcases how the dynamic color changes when the theme is switched.\nSOURCE: https://github.com/dphfox/fusion/blob/main/docs/examples/cookbook/light-and-dark-theme.md#_snippet_4\n\nLANGUAGE: Lua\nCODE:\n```\nTheme.current:set(\"light\")\nprint(peek(Theme.dynamic.background)) --> 255, 255, 255\n\nTheme.current:set(\"dark\")\nprint(peek(Theme.dynamic.background)) --> 34, 34, 34\n```\n\n----------------------------------------\n\nTITLE: Error ID Input Field\nDESCRIPTION: This JavaScript snippet is responsible for enabling error ID searching functionality. It uses the `error-paste-box.js` script to allow users to type or paste an error ID into an input field, triggering a scroll to the corresponding error details on the page. The script is loaded asynchronously using the `defer` attribute.\nSOURCE: https://github.com/dphfox/fusion/blob/main/docs/api-reference/general/errors.md#_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<input\n\tid=\"fusiondoc-error-paste-box\"\n\tclass=\"md-input md-input--stretch\"\n\tplaceholder=\"Type or paste an error ID here...\"\n/>\n\n<script src=\"../../../assets/scripts/error-paste-box.js\" defer></script>\n```\n\n----------------------------------------\n\nTITLE: cannotDepend Message\nDESCRIPTION: This error message indicates an attempt to create a dependency between two graph objects that violates dependency rules. Either the dependency set or dependent set were frozen. It suggests checking the order of connection or the design of the graph objects.\nSOURCE: https://github.com/dphfox/fusion/blob/main/docs/api-reference/general/errors.md#_snippet_6\n\nLANGUAGE: text\nCODE:\n```\nObserver can't depend on Observer.\n```\n\n----------------------------------------\n\nTITLE: Replacing peek() with use() for Concise Code (Lua)\nDESCRIPTION: This snippet demonstrates how to replace `peek()` calls with `use()` calls for more concise and readable code.  The `use()` function both registers the dependency and returns the current value, eliminating the need to call `peek()` separately. This makes the code easier to copy and maintain.\nSOURCE: https://github.com/dphfox/fusion/blob/main/docs/tutorials/fundamentals/computeds.md#_snippet_5\n\nLANGUAGE: Lua\nCODE:\n```\nlocal scope = scoped(Fusion)\nlocal number = scope:Value(2)\nlocal double = scope:Computed(function(use, _)\n    return use(number) * 2\nend)\n\nprint(peek(number), peek(double)) --> 2 4\n\nnumber:set(10)\nprint(peek(number), peek(double)) --> 10 20\n```\n\n----------------------------------------\n\nTITLE: Fusion Tween NaN Goal Error\nDESCRIPTION: This error arises when a tween is given a NaN goal during construction, causing some animation to be skipped. Make sure that the goal parameter given to the tween does not include any NaN values, as these often result from invalid mathematical operations.\nSOURCE: https://github.com/dphfox/fusion/blob/main/docs/api-reference/general/errors.md#_snippet_28\n\nLANGUAGE: text\nCODE:\n```\nA tween was given a NaN goal, so some animation has been skipped. Ensure no\ntweens have NaN goals.\n```\n\n----------------------------------------\n\nTITLE: Using Fusion.ForPairs with scoped() method syntax\nDESCRIPTION: Demonstrates the intended method syntax for accessing the Fusion.ForPairs function on a scope object.  It showcases how to create a 'forObj' by calling 'scope:ForPairs' with an 'inputTable' and 'processor' function as arguments. This approach leverages method syntax for a more readable and maintainable codebase.\nSOURCE: https://github.com/dphfox/fusion/blob/main/docs/api-reference/state/members/forpairs.md#_snippet_1\n\nLANGUAGE: Lua\nCODE:\n```\n\tlocal forObj = scope:ForPairs(inputTable, processor)\n```\n\n----------------------------------------\n\nTITLE: invalidOutType Message\nDESCRIPTION: This error message indicates that `Out` was provided with a non-Value object. `Out` properties must be given Value objects.\nSOURCE: https://github.com/dphfox/fusion/blob/main/docs/api-reference/general/errors.md#_snippet_14\n\nLANGUAGE: text\nCODE:\n```\n[Out] properties must be given Value objects.\n```\n\n----------------------------------------\n\nTITLE: Configuring Spring Speed and Damping in Lua\nDESCRIPTION: This snippet demonstrates how to configure the speed and damping ratio of a spring. These parameters control the spring's movement characteristics. The damping can also be a state object.\nSOURCE: https://github.com/dphfox/fusion/blob/main/docs/tutorials/animation/springs.md#_snippet_2\n\nLANGUAGE: Lua\nCODE:\n```\nlocal goal = scope:Value(0)\nlocal speed = 25\nlocal damping = scope:Value(0.5)\nlocal animated = scope:Spring(goal, speed, damping)\n```\n\n----------------------------------------\n\nTITLE: Creating an Event Key with OnEvent\nDESCRIPTION: Illustrates how to create a special key by calling `OnEvent` with an event name. This key can then be used in a property table to connect a handler to the event. The event name is passed as a string to the `OnEvent` function. Requires the Fusion library.\nSOURCE: https://github.com/dphfox/fusion/blob/main/docs/tutorials/roblox/events.md#_snippet_2\n\nLANGUAGE: Lua\nCODE:\n```\nlocal key = OnEvent(\"Activated\")\n```\n\n----------------------------------------\n\nTITLE: Peeking at a Fusion Value in Luau\nDESCRIPTION: This snippet demonstrates how to use `Fusion.peek()` to read the current value stored in a Fusion value object, without triggering any side effects. This is useful for debugging.\nSOURCE: https://github.com/dphfox/fusion/blob/main/docs/tutorials/fundamentals/your-first-project.md#_snippet_3\n\nLANGUAGE: Lua\nCODE:\n```\nlocal scope = Fusion:scoped()\n\nlocal numCoins = scope:Value(50)\n\nprint(Fusion.peek(numCoins)) --> 50\n```\n\n----------------------------------------\n\nTITLE: mergeConflict Message\nDESCRIPTION: This error message indicates that a merge conflict occurred during table merging, typically within `scoped()`. Multiple definitions were found for the same key, making it unclear which definition to use.\nSOURCE: https://github.com/dphfox/fusion/blob/main/docs/api-reference/general/errors.md#_snippet_18\n\nLANGUAGE: text\nCODE:\n```\nMultiple definitions for 'Observer' found while merging.\n```\n\n----------------------------------------\n\nTITLE: invalidOutProperty Message\nDESCRIPTION: This error message indicates that the specified property does not exist on the instance that `Out` was used with.  The property that you tried to output doesn't exist.\nSOURCE: https://github.com/dphfox/fusion/blob/main/docs/api-reference/general/errors.md#_snippet_13\n\nLANGUAGE: text\nCODE:\n```\nThe Frame class doesn't have a property called 'MouseButton1Down'.\n```\n\n----------------------------------------\n\nTITLE: Observing User Bio State with Fusion (Lua)\nDESCRIPTION: This snippet uses Fusion's `Observer` to monitor changes to the `currentUserBio` state. When the bio changes, it checks if the bio is `nil` (loading state) or a valid string.  It prints a message to the console indicating whether the bio is loading or has been loaded, along with the bio content.\nSOURCE: https://github.com/dphfox/fusion/blob/main/docs/examples/cookbook/fetch-data-from-server.md#_snippet_4\n\nLANGUAGE: Lua\nCODE:\n```\nscope:Observer(currentUserBio):onBind(function()\n\tlocal bio = peek(currentUserBio)\n\tif bio == nil then\n\t\tprint(\"User bio is loading...\")\n\telse\n\t\tprint(\"Loaded user bio:\", bio)\n\tend\nend)\n```\n\n----------------------------------------\n\nTITLE: invalidSpringSpeed Message\nDESCRIPTION: This error message indicates that an invalid speed multiplier was provided to `Spring`. Speed multipliers must be greater than or equal to 0.\nSOURCE: https://github.com/dphfox/fusion/blob/main/docs/api-reference/general/errors.md#_snippet_17\n\nLANGUAGE: text\nCODE:\n```\nThe speed of a spring must be >= 0. (speed was NaN)\n```\n\n----------------------------------------\n\nTITLE: Reading Processed Values with peek() - Lua\nDESCRIPTION: This code snippet shows how to read the processed table of values from a `ForValues` object using the `peek()` function.  It demonstrates the creation of a `ForValues` object that doubles the values of a constant table. Dependencies: Fusion scope object is assumed.\nSOURCE: https://github.com/dphfox/fusion/blob/main/docs/tutorials/tables/forvalues.md#_snippet_2\n\nLANGUAGE: Lua\nCODE:\n```\nlocal numbers = {1, 2, 3, 4, 5}\nlocal doubled = scope:ForValues(numbers, function(use, scope, num)\n\treturn num * 2\nend)\n\nprint(peek(doubled)) --> {2, 4, 6, 8, 10}\n```\n\n----------------------------------------\n\nTITLE: Scope Cleanup within ForValues - Lua\nDESCRIPTION: This code shows how the `ForValues` object handles scope cleanup.  Any objects added to the `scope` within the processing function are automatically cleaned up when a processed value is removed from the input table.  This example creates a function that prints a goodbye message when a name is removed. Dependencies: Fusion scope object is assumed.\nSOURCE: https://github.com/dphfox/fusion/blob/main/docs/tutorials/tables/forvalues.md#_snippet_5\n\nLANGUAGE: Lua\nCODE:\n```\nlocal names = scope:Value({\"Jodi\", \"Amber\", \"Umair\"})\nlocal shoutingNames = scope:ForValues(names, function(use, scope, name)\n\ttable.insert(scope, function()\n\t\tprint(\"Goodbye, \" .. name .. \"!\")\n\tend)\n\treturn string.upper(name)\nend)\n\nnames:set({\"Amber\", \"Umair\"}) --> Goodbye, Jodi!\n```\n\n----------------------------------------\n\nTITLE: Attaching Event Handler with Parentheses\nDESCRIPTION: Demonstrates attaching an event handler to the 'Activated' event using `OnEvent` with explicit parentheses around the event name. Requires scope and Fusion libraries.\nSOURCE: https://github.com/dphfox/fusion/blob/main/docs/tutorials/roblox/events.md#_snippet_3\n\nLANGUAGE: Lua\nCODE:\n```\nlocal button = scope:New \"TextButton\" {\n    [OnEvent(\"Activated\")] = function(_, numClicks)\n        print(\"The button was pressed\", numClicks, \"time(s)!\")\n    end\n}\n```\n\n----------------------------------------\n\nTITLE: Fusion Error Message Example\nDESCRIPTION: This snippet demonstrates a typical Fusion error message displayed in the console. It includes the error description, ID, and a link to detailed documentation on the Fusion website for further information and troubleshooting steps. The `hl_lines` attribute highlights line 3 of the code block.\nSOURCE: https://github.com/dphfox/fusion/blob/main/docs/tutorials/get-started/getting-help.md#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n[Fusion] The Frame class doesn't have a property called 'Activated'.\nID: cannotConnectChange\nLearn more: https://elttob.uk/Fusion/0.3/api-reference/general/errors/#cannotconnectchange\n```\n\n----------------------------------------\n\nTITLE: Measuring Word Lengths with ForValues - Lua\nDESCRIPTION: This code demonstrates measuring the lengths of an array of words using `ForValues`. The example highlights how `ForValues` reuses existing calculated values to improve performance when the input table is changed, avoiding redundant calculations when values are simply reordered. Dependencies: Fusion scope object is assumed.\nSOURCE: https://github.com/dphfox/fusion/blob/main/docs/tutorials/tables/forvalues.md#_snippet_6\n\nLANGUAGE: Lua\nCODE:\n```\n\tlocal words = scope:Value({\"Orange\", \"Red\", \"Magenta\"})\n\tlocal lengths = scope:ForValues(words, function(use, scope, word)\n\t\treturn #word\n\tend)\n\n\tprint(peek(lengths)) --> {6, 3, 7}\n```\n\n----------------------------------------\n\nTITLE: Creating a Scoped Environment for Fusion (Lua)\nDESCRIPTION: This snippet creates a scoped environment using Fusion's `scoped` function. This ensures proper cleanup of Fusion objects when they are no longer needed. It also initializes a `Value` object to control the visibility of the UI element.\nSOURCE: https://github.com/dphfox/fusion/blob/main/docs/examples/cookbook/animated-computed.md#_snippet_1\n\nLANGUAGE: Lua\nCODE:\n```\n-- Don't forget to pass this to `doCleanup` if you disable the script.\nlocal scope = scoped(Fusion)\n\n-- You can set this at any time to indicate where The Thing should be.\nlocal showTheThing = scope:Value(false)\n```\n\n----------------------------------------\n\nTITLE: Fusion Unknown Message Error\nDESCRIPTION: This error acts as a fallback, indicating that Fusion encountered a problem but couldn't associate it with a specific error type. It suggests that the Fusion code isn't reporting errors correctly, and should not typically be seen by end-users.\nSOURCE: https://github.com/dphfox/fusion/blob/main/docs/api-reference/general/errors.md#_snippet_30\n\nLANGUAGE: text\nCODE:\n```\nUnknown error: attempt to call a nil value\n```\n\n----------------------------------------\n\nTITLE: Component Definition with UsedAs Type in Lua\nDESCRIPTION: This snippet demonstrates the use of the `UsedAs` type in Fusion for component properties.  The `UsedAs<T>` type allows a property to accept either a constant value or a state object of type `T`. This enables dynamic changes to property values over time, while still allowing static assignment when desired.\nSOURCE: https://github.com/dphfox/fusion/blob/main/docs/tutorials/best-practices/components.md#_snippet_4\n\nLANGUAGE: Lua\nCODE:\n```\ntype UsedAs<T> = Fusion.UsedAs<T>\n\nlocal function Cake(\n\t-- ... some stuff here ...\n\tprops: {\n\t\tSize: UsedAs<Vector3>,\n\t\tColour: UsedAs<Color3>,\n\t\tIsTasty: UsedAs<boolean>\n\t}\n)\n\t-- ... some other stuff here ...\nend\n```\n\n----------------------------------------\n\nTITLE: Hydrating UI Text with Fusion Value\nDESCRIPTION: This example demonstrates hydrating a `TextLabel`'s `Text` property using a Fusion `Value`. Changes to the `message` value are reflected in the UI after waiting for a frame.\nSOURCE: https://github.com/dphfox/fusion/blob/main/docs/tutorials/roblox/hydration.md#_snippet_3\n\nLANGUAGE: Lua\nCODE:\n```\nlocal message = scope:Value(\"Loading...\")\n\nscope:Hydrate(PlayerGui.LoadingText) {\n\tText = message\n}\n\nprint(PlayerGui.Message.Text) --> Loading...\n\nmessage:set(\"All done!\")\ntask.wait() -- important: changes are applied on the next frame!\nprint(PlayerGui.Message.Text) --> All done!\n```\n\n----------------------------------------\n\nTITLE: Observing Value Changes - Luau\nDESCRIPTION: This code demonstrates how Fusion skips updates when the computed value is not meaningfully different. It initializes a number, creates a computed to check if it's even, and observes changes to the computed value. The observer only triggers when the boolean result changes.\nSOURCE: https://github.com/dphfox/fusion/blob/main/docs/tutorials/best-practices/optimisation.md#_snippet_0\n\nLANGUAGE: Lua\nCODE:\n```\nlocal number = scope:Value(1)\nlocal isEven = scope:Computed(function(use)\n\t\treturn use(number) % 2 == 0\n\tend)\n\tscope:Observer(isEven):onChange(function()\n\t\tprint(\"-> isEven has changed to \" .. peek(isEven))\n\tend)\n\n\tprint(\"Number becomes 2\")\n\tnumber:set(2)\n\tprint(\"Number becomes 3\")\n\tnumber:set(3)\n\tprint(\"Number becomes 13\")\n\tnumber:set(13)\n\tprint(\"Number becomes 14\")\n\tnumber:set(14)\n\tprint(\"Number becomes 24\")\n\tnumber:set(24)\n```\n\n----------------------------------------\n\nTITLE: Creating Cyclic References with Value Objects (Lua)\nDESCRIPTION: This code demonstrates how to create cyclic references between UI elements using Value Objects. Two Value Objects (`aliceRef` and `bobRef`) are created, and each is set to reference the other, forming a circular dependency. This technique is useful for scenarios where two objects need to refer to each other.\nSOURCE: https://github.com/dphfox/fusion/blob/main/docs/tutorials/best-practices/references.md#_snippet_3\n\nLANGUAGE: Lua\nCODE:\n```\nlocal aliceRef: Fusion.Value<Instance?> = scope:Value(nil)\nlocal bobRef: Fusion.Value<Instance?> = scope:Value(nil)\n\n-- These two `ObjectValue` instances will refer to each other once the code has\n-- finished running.\nlocal alice = aliceRef:set(\n\tscope:New \"ObjectValue\" {\n\t\tValue = bobRef\n\t}\n)\nlocal bob = bobRef:set(\n\tscope:New \"ObjectValue\" {\n\t\tValue = aliceRef\n\t}\n)\n```\n\n----------------------------------------\n\nTITLE: Creating SpecialKey for Property Output in Fusion (Lua)\nDESCRIPTION: This code snippet defines the Fusion.Out function, which takes a property name as a string and returns a SpecialKey. The SpecialKey is designed to be used within a property table alongside a value object, enabling automatic updates to the value object when the specified property changes. This function is part of the Fusion library for reactive programming in Roblox.\nSOURCE: https://github.com/dphfox/fusion/blob/main/docs/api-reference/roblox/members/out.md#_snippet_0\n\nLANGUAGE: Lua\nCODE:\n```\nfunction Fusion.Out(\n\tpropertyName: string\n): SpecialKey\n```\n\n----------------------------------------\n\nTITLE: Using State Objects with Children in Lua\nDESCRIPTION: This example demonstrates using a state object (a `scope:Value`) to manage the child of a Folder.  The `[Children]` key is assigned the state object.  Updating the state object updates the Folder's child.\nSOURCE: https://github.com/dphfox/fusion/blob/main/docs/tutorials/roblox/parenting.md#_snippet_6\n\nLANGUAGE: Lua\nCODE:\n```\nlocal value = scope:Value()\n\nlocal folder = scope:New \"Folder\" {\n    [Children] = value\n}\n\nvalue:set(\n    scope:New \"Part\" {\n        Name = \"Clyde\",\n        Transparency = 0.5\n    }\n)\n```\n\n----------------------------------------\n\nTITLE: Defining Computed State Type in Lua\nDESCRIPTION: This Lua code snippet defines the `Computed` type as a specialized `StateObject`.  It includes a `kind` property set to \"Computed\" and a `timeliness` property set to \"lazy\".  This type is used internally within the Fusion framework for managing computed state values.\nSOURCE: https://github.com/dphfox/fusion/blob/main/docs/api-reference/state/types/computed.md#_snippet_0\n\nLANGUAGE: Lua\nCODE:\n```\nexport type Computed<T> = StateObject<T> & {\n\tkind: \"Computed\",\n\ttimeliness: \"lazy\"\n}\n```\n\n----------------------------------------\n\nTITLE: Value Object with Theme Colors - Luau\nDESCRIPTION: This code sets a value object to a table of theme colors and attaches an observer. Because the tables are not frozen, Fusion always considers updates to the theme as meaningful, triggering the observer unnecessarily. It showcases a scenario where un-optimized updates occur.\nSOURCE: https://github.com/dphfox/fusion/blob/main/docs/tutorials/best-practices/optimisation.md#_snippet_1\n\nLANGUAGE: Lua\nCODE:\n```\nlocal LIGHT_THEME = {\n\t\tname = \"light\",\n\t\t-- imagine theme colours in here\n\t}\n\tlocal DARK_THEME = {\n\t\tname = \"dark\",\n\t\t-- imagine theme colours in here\n\t}\n\tlocal currentTheme = scope:Value(LIGHT_THEME)\n\tscope:Observer(currentTheme):onChange(function()\n\t\tprint(\"-> currentTheme changed to \" .. peek(currentTheme).name)\n\tend)\n\n\tprint(\"Set to DARK_THEME\")\n\tcurrentTheme:set(DARK_THEME)\n\tprint(\"Set to DARK_THEME\")\n\tcurrentTheme:set(DARK_THEME)\n\tprint(\"Set to LIGHT_THEME\")\n\tcurrentTheme:set(LIGHT_THEME)\n\tprint(\"Set to LIGHT_THEME\")\n\tcurrentTheme:set(LIGHT_THEME)\n```\n\n----------------------------------------\n\nTITLE: cannotCreateClass Message\nDESCRIPTION: This error message indicates an attempt to create a Roblox instance type that Fusion cannot create. It mentions the possibility of beta features in Roblox Studio being required to create certain instance types, and suggests checking the Studio's Beta Features settings.\nSOURCE: https://github.com/dphfox/fusion/blob/main/docs/api-reference/general/errors.md#_snippet_5\n\nLANGUAGE: text\nCODE:\n```\nCan't create a new instance of class 'EditableImage'.\n```\n\n----------------------------------------\n\nTITLE: Passing Instances Through [Children] (Lua)\nDESCRIPTION: This example demonstrates how to create a reusable pop-up component that accepts instances to be parented into it using the `[Children]` property. The pop-up component takes a table of props, including `[Children]`, and parents these children to a Frame.  This allows for flexible content insertion into the pop-up.\nSOURCE: https://github.com/dphfox/fusion/blob/main/docs/tutorials/best-practices/instance-handling.md#_snippet_3\n\nLANGUAGE: Lua\nCODE:\n```\nlocal function PopUp(\n\tscope: Fusion.Scope,\n\tprops: {\n\t\t[typeof(Children)]: Fusion.Children\n\t}\n)\n    return scope:New \"Frame\" {\n        [Children] = props[Children]\n    }\nend\n```\n\n----------------------------------------\n\nTITLE: Fusion.ForPairs Function Definition\nDESCRIPTION: Defines the Fusion.ForPairs function, which creates a For state object to process key-value pairs from an input table using a provided processor function.  It requires a scope, an input table (UsedAs type), and a processor function that transforms input key-value pairs into output key-value pairs. It returns a For state object.\nSOURCE: https://github.com/dphfox/fusion/blob/main/docs/api-reference/state/members/forpairs.md#_snippet_0\n\nLANGUAGE: Lua\nCODE:\n```\nfunction Fusion.ForPairs<KI, KO, VI, VO, S>(\n\tscope: Scope<S>,\n\tinputTable: UsedAs<{[KI]: VI}>,\n\tprocessor: (Use, Scope<S>, key: KI, value: VI) -> (KO, VO)\n) -> For<KO, VO>\n```\n\n----------------------------------------\n\nTITLE: Initializing Scope and Updating Time in Lua\nDESCRIPTION: This snippet initializes a Fusion scope, creates a `Value` object to store the current time, and connects to `RunService.RenderStepped` to update the time every frame. The scope is used to manage the lifecycle of the component and its resources. `currentTime` is updated based on `os.clock()`.\nSOURCE: https://github.com/dphfox/fusion/blob/main/docs/examples/cookbook/loading-spinner.md#_snippet_2\n\nLANGUAGE: Lua\nCODE:\n```\n-- Don't forget to pass this to `doCleanup` if you disable the script.\nlocal scope = scoped(Fusion, {\n\tSpinner = Spinner\n})\n\nlocal currentTime = scope:Value(os.clock())\ntable.insert(scope,\n\tRunService.RenderStepped:Connect(function()\n\t\tcurrentTime:set(os.clock())\n\tend)\n)\n```\n\n----------------------------------------\n\nTITLE: PopUp Component Definition in Lua\nDESCRIPTION: Defines a `PopUp` component using Fusion, incorporating inner scopes for `Message` and `Button` sub-components. The component expects a `Message` and `DismissText` prop, defining their type using `UsedAs<string>`. These props are passed down to the child components.\nSOURCE: https://github.com/dphfox/fusion/blob/main/docs/tutorials/best-practices/components.md#_snippet_10\n\nLANGUAGE: Lua\nCODE:\n```\nlocal Fusion = require(game:GetService(\"ReplicatedStorage\").Fusion)\n\ttype UsedAs<T> = Fusion.UsedAs<T>\n\n    local function PopUp(\n\t\tscope: Fusion.Scope, \n\t\tprops: {\n\t\t\tMessage: UsedAs<string>,\n\t\t\tDismissText: UsedAs<string>\n\t\t}\n\t)\n\t\tlocal scope = scope:innerScope {\n\t\t\tMessage = require(script.Parent.Message),\n\t\t\tButton = require(script.Parent.Button)\n\t\t}\n\n        return scope:New \"Frame\" {\n            -- ...some properties...\n            \n            [Children] = {\n                scope:Message {\n                    Text = props.Message\n                }\n                scope:Button {\n                    Text = props.DismissText\n                }\n            }\n        }\n    end\n\n    return PopUp\n```\n\n----------------------------------------\n\nTITLE: Binding State Objects to Instance Properties in Fusion (Luau)\nDESCRIPTION: This code snippet demonstrates how to bind Fusion state objects directly to instance properties. It shows how changes in the state object automatically update the corresponding instance property, creating a dynamic and reactive UI. The example illustrates setting the `Text` property of a `TextLabel` to a `Value` state object.\nSOURCE: https://github.com/dphfox/fusion/blob/main/docs/index.md#_snippet_5\n\nLANGUAGE: Lua\nCODE:\n```\n-- Creating a state object you can control...\nlocal message = scope:Value(\"Hello!\")\n\n-- Now you can plug that state object into the Text property.\nlocal myLabel = scope:New \"TextLabel\" {\n\tText = message\n}\nprint(myLabel.Text) --> Hello!\n\n-- The Text property now responds to changes:\nmessage:set(\"Goodbye!\")\nprint(myLabel.Text) --> Goodbye!\n```\n\n----------------------------------------\n\nTITLE: Creating the ScreenGui and Spinner Instance in Lua\nDESCRIPTION: This Lua snippet creates a `ScreenGui` and adds a `Spinner` component to it. It defines the layout properties for the spinner and passes the `currentTime` value to drive the animation. The `Spinner` is positioned in the center of the screen.\nSOURCE: https://github.com/dphfox/fusion/blob/main/docs/examples/cookbook/loading-spinner.md#_snippet_3\n\nLANGUAGE: Lua\nCODE:\n```\nlocal gui = scope:New \"ScreenGui\" {\n\tName = \"SpinnerGui\",\n\tParent = Players.LocalPlayer:WaitForChild(\"PlayerGui\"),\n\n\t[Children] = scope:Spinner {\n\t\tLayout = {\n\t\t\tPosition = UDim2.fromScale(0.5, 0.5),\n\t\t\tAnchorPoint = Vector2.new(0.5, 0.5),\n\t\t\tSize = UDim2.fromOffset(50, 50)\n\t\t},\n\t\tCurrentTime = currentTime\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Fusion Attribute Function Definition - Lua\nDESCRIPTION: Defines the Fusion.Attribute function which takes an attribute name as a string and returns a SpecialKey. This SpecialKey can be used to modify the attribute with the given name when paired with a value in a property table. The function is used within the Fusion framework to handle attribute modifications in Roblox.\nSOURCE: https://github.com/dphfox/fusion/blob/main/docs/api-reference/roblox/members/attribute.md#_snippet_0\n\nLANGUAGE: Lua\nCODE:\n```\nfunction Fusion.Attribute(\n\tattributeName: string\n): SpecialKey\n```\n\n----------------------------------------\n\nTITLE: Observing State Object Changes in Fusion (Luau)\nDESCRIPTION: This code demonstrates how to use an Observer to monitor changes in a Fusion state object. It showcases how to attach a callback function that executes whenever the observed state object's value changes.  The example shows how setting the `myName` state object triggers the observer and prints a greeting.\nSOURCE: https://github.com/dphfox/fusion/blob/main/docs/index.md#_snippet_2\n\nLANGUAGE: Lua\nCODE:\n```\n-- This observer watches for when the greeting changes.\nlocal myObserver = scope:Observer(myGreeting)\n\n-- Let’s print out the greeting when there’s a new one.\nlocal disconnect = myObserver:onChange(function()\n\tprint(peek(myGreeting))\nend)\n\n-- This will run the code above!\nmyName:set(\"Danny\")\n```\n\n----------------------------------------\n\nTITLE: Fusion Instance Creation with Property Table (Lua)\nDESCRIPTION: This code snippet defines the Fusion.New function, which constructs instances of a given Roblox class. It takes a class name as input and returns a component function that accepts a property table. The property table contains key-value pairs where keys are assigned as properties on the instance, and state objects are automatically re-assigned upon value changes. Special keys are applied in a specific order, and parent assignments are handled after descendants.\nSOURCE: https://github.com/dphfox/fusion/blob/main/docs/api-reference/roblox/members/new.md#_snippet_0\n\nLANGUAGE: Lua\nCODE:\n```\nfunction Fusion.New(\n\tclassName: string\n): (\n\tprops: PropertyTable\n) -> Instance\n```\n\n----------------------------------------\n\nTITLE: GraphObject _evaluate Method in Lua\nDESCRIPTION: Defines the `_evaluate` method for the GraphObject, which is called by Fusion during the object's evaluation process. This method contains the logic for performing computational updates and determines whether a meaningful change has occurred, which affects dependencies' behavior. It should finish without spawning new processes, blocking the thread, or erroring.\nSOURCE: https://github.com/dphfox/fusion/blob/main/docs/api-reference/graph/types/graphobject.md#_snippet_1\n\nLANGUAGE: Lua\nCODE:\n```\nfunction GraphObject:_evaluate(): boolean\n\n```\n\n----------------------------------------\n\nTITLE: Creating a SpecialKey to listen for property changes in Lua\nDESCRIPTION: The Fusion.OnChange function returns a SpecialKey that can be used to listen for changes to a specified property. When used within a property table with a callback, it connects the callback to the change event of that property. The function takes a string representing the property name as input and returns a SpecialKey object.\nSOURCE: https://github.com/dphfox/fusion/blob/main/docs/api-reference/roblox/members/onchange.md#_snippet_0\n\nLANGUAGE: Lua\nCODE:\n```\nfunction Fusion.OnChange(\n\tpropertyName: string\n): SpecialKey\n```\n\n----------------------------------------\n\nTITLE: Defining Fusion Tween Type in Lua\nDESCRIPTION: This code snippet defines the `Tween` type in Lua for the Fusion library. It specifies that `Tween` is a specialized `StateObject` with a `kind` property set to \"Tween\".  This allows runtime type checking to differentiate between different state object types. It uses Luau type syntax.\nSOURCE: https://github.com/dphfox/fusion/blob/main/docs/api-reference/animation/types/tween.md#_snippet_0\n\nLANGUAGE: Lua\nCODE:\n```\nexport type Tween<T> = StateObject<T>  & {\n\tkind: \"Tween\"\n}\n```\n\n----------------------------------------\n\nTITLE: Spring addVelocity Method in Lua\nDESCRIPTION: Defines the addVelocity method for the Spring type, which appends to the spring's velocity without changing its position. The deltaVelocity parameter must have the same typeof() as the goal state. This provides a way to incrementally adjust the spring's velocity.\nSOURCE: https://github.com/dphfox/fusion/blob/main/docs/api-reference/animation/types/spring.md#_snippet_3\n\nLANGUAGE: Lua\nCODE:\n```\nfunction Spring:addVelocity(\n\tdeltaVelocity: T\n): ()\n```\n\n----------------------------------------\n\nTITLE: Defining PropertyTable Type in Lua\nDESCRIPTION: Defines the `PropertyTable` type alias in Lua. It's a table where keys can be either strings or `SpecialKey` types, and values can be of any type (`unknown`). This table is used for passing instance properties to the `New` function when creating Roblox instances with Fusion.\nSOURCE: https://github.com/dphfox/fusion/blob/main/docs/api-reference/roblox/types/propertytable.md#_snippet_0\n\nLANGUAGE: Lua\nCODE:\n```\nexport type PropertyTable = {[string | SpecialKey]: unknown}\n```\n\n----------------------------------------\n\nTITLE: invalidSpringDamping Message\nDESCRIPTION: This error message indicates that an invalid damping ratio was provided to `Spring`. Damping ratios must be greater than or equal to 0.\nSOURCE: https://github.com/dphfox/fusion/blob/main/docs/api-reference/general/errors.md#_snippet_16\n\nLANGUAGE: text\nCODE:\n```\nThe damping ratio for a spring must be >= 0. (damping was -1.00)\n```\n\n----------------------------------------\n\nTITLE: Spring setVelocity Method in Lua\nDESCRIPTION: Defines the setVelocity method for the Spring type, which overwrites the spring's velocity without changing its position. The newVelocity parameter must have the same typeof() as the goal state. This allows direct adjustment of the spring's velocity.\nSOURCE: https://github.com/dphfox/fusion/blob/main/docs/api-reference/animation/types/spring.md#_snippet_2\n\nLANGUAGE: Lua\nCODE:\n```\nfunction Spring:setVelocity(\n\tnewVelocity: T\n): ()\n```\n\n----------------------------------------\n\nTITLE: Using `use()` with state objects in `ForPairs` calculations in Lua\nDESCRIPTION: Illustrates using `use()` to access a state object within the `ForPairs` processor function. The example conditionally swaps keys and values based on the current value of the `shouldSwap` state object.\nSOURCE: https://github.com/dphfox/fusion/blob/main/docs/tutorials/tables/forpairs.md#_snippet_4\n\nLANGUAGE: Lua\nCODE:\n```\nlocal itemColours = { shoes = \"red\", socks = \"blue\" }\n\nlocal shouldSwap = scope:Value(false)\nlocal swapped = scope:ForPairs(data, function(use, scope, item, colour)\n\tif use(shouldSwap) then\n\t\treturn colour, item\n\telse\n\t\treturn item, colour\n\tend\nend)\n\nprint(peek(swapped)) --> { shoes = \"red\", socks = \"blue\" }\n\nshouldSwap:set(true)\nprint(peek(swapped)) --> { red = \"shoes\", blue = \"socks\" }\n```\n\n----------------------------------------\n\nTITLE: callbackError Message\nDESCRIPTION: This error message indicates that a user-provided callback function within Fusion threw an unhandled error. The error message provides a more specific description of the underlying problem, which should be used to diagnose the cause. This error can be thrown by `Computed`, `ForKeys`, `ForValues`, `ForPairs`, and `Contextual` Fusion members.\nSOURCE: https://github.com/dphfox/fusion/blob/main/docs/api-reference/general/errors.md#_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nError in callback: attempt to perform arithmetic (add) on number and string\n```\n\n----------------------------------------\n\nTITLE: Using Safe to Handle Errors Inside Computed in Luau\nDESCRIPTION: This code demonstrates how to use the `Safe` function to catch errors that occur within a `Computed` object. By placing the `Safe` expression inside the `Computed`, the `Safe` expression can catch the error thrown by `error(\"Kaboom!\")`. The `fallback` function will then be executed, and it's value returned by the computed.\nSOURCE: https://github.com/dphfox/fusion/blob/main/docs/tutorials/best-practices/error-safety.md#_snippet_11\n\nLANGUAGE: Luau\nCODE:\n```\n-- The `Safe` and the the `Computed` have swapped places.\n-- The error is now caught by the `Safe` instead of the `Computed`.\nlocal result = scope:Computed(function()\n\treturn Safe {\n\t\ttry = function()\n\t\t\terror(\"Kaboom!\")\n\t\t\treturn \"success\"\n\t\tend,\n\t\tfallback = function(err)\n\t\t\treturn \"fail\"\n\t\tend\n\t}\nend)\n\nprint(peek(result)) --> fail\n```\n\n----------------------------------------\n\nTITLE: Accessing Global Theme Values (Lua)\nDESCRIPTION: This Lua code demonstrates how to access the global theme values defined in the `Theme.luau` module. It requires the module using `require` and then accesses the `text` color from the `colours` table. The accessed color is then printed to the console. This shows how to read values from a globally available module.\nSOURCE: https://github.com/dphfox/fusion/blob/main/docs/tutorials/best-practices/sharing-values.md#_snippet_1\n\nLANGUAGE: Lua\nCODE:\n```\nlocal Theme = require(\"path/to/Theme.luau\")\n\nlocal textColour = Theme.colours.text\nprint(textColour) --> 34, 34, 34\n```\n\n----------------------------------------\n\nTITLE: Adding Existing Instance as Child in Lua\nDESCRIPTION: This example demonstrates how to parent an existing instance in the workspace to a newly created Folder instance using the Fusion library. The `[Children]` key is used with `scope:New` to move `workspace.Part` inside the created Folder.\nSOURCE: https://github.com/dphfox/fusion/blob/main/docs/tutorials/roblox/parenting.md#_snippet_2\n\nLANGUAGE: Lua\nCODE:\n```\nlocal folder = scope:New \"Folder\" {\n    -- The part will be moved inside of the folder\n    [Children] = workspace.Part\n}\n```\n\n----------------------------------------\n\nTITLE: Referencing UI Elements Using Named Constants (Lua)\nDESCRIPTION: This code snippet illustrates how to reference a UI element (Part) using a named constant. The Part is created and assigned to the `selectionTarget` variable. This variable is then used to set the `Adornee` property of the SelectionBox, establishing a direct reference.\nSOURCE: https://github.com/dphfox/fusion/blob/main/docs/tutorials/best-practices/references.md#_snippet_1\n\nLANGUAGE: Lua\nCODE:\n```\n-- the part is now constructed first, whereas before it was constructed second\nlocal selectionTarget = scope:New \"Part\" {\n\tName = \"Selection Target\",\n}\n\nlocal ui = scope:New \"Folder\" {\n\t[Children] = {\n\t\tscope:New \"SelectionBox\" {\n\t\t\tAdornee = selectionTarget\n\t\t},\n\t\tselectionTarget\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing User Bio State with Fusion (Lua)\nDESCRIPTION: This Lua snippet initializes a `currentUserBio` state object using Fusion's `scope:Value`.  The bio is initialized to `nil` to represent a loading state. The type annotation `string?` signifies that the value can be either a string or nil, explicitly documenting the potential loading state.\nSOURCE: https://github.com/dphfox/fusion/blob/main/docs/examples/cookbook/fetch-data-from-server.md#_snippet_3\n\nLANGUAGE: Lua\nCODE:\n```\n-- While the bio is loading, this is `nil` instead of a string.\nlocal currentUserBio: Fusion.Value<string?> = scope:Value(nil)\n```\n\n----------------------------------------\n\nTITLE: Setting the Current Theme Variant\nDESCRIPTION: This snippet creates a Fusion Value object to store the currently active theme variant (light or dark).  It uses `scope:Value` which implies `scope` is the result of Fusion.scoped.  This Value is then used by Computed objects to dynamically select the correct color.\nSOURCE: https://github.com/dphfox/fusion/blob/main/docs/examples/cookbook/light-and-dark-theme.md#_snippet_2\n\nLANGUAGE: Lua\nCODE:\n```\nTheme.current = scope:Value(\"light\")\n```\n\n----------------------------------------\n\nTITLE: Animating UDim2 Values with Springs in Lua\nDESCRIPTION: This code demonstrates how to use springs to animate UDim2 values, which are commonly used for UI positioning in Roblox. Each number within the UDim2 is animated individually.\nSOURCE: https://github.com/dphfox/fusion/blob/main/docs/tutorials/animation/springs.md#_snippet_4\n\nLANGUAGE: Lua\nCODE:\n```\nlocal goalPosition = scope:Value(UDim2.new(0.5, 0, 0, 0))\nlocal animated = scope:Spring(goalPosition, 25, 0.5)\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Change Detection Optimization (Fusion/Lua)\nDESCRIPTION: This snippet demonstrates that the `:onChange()` handler is only triggered when the state object's value actually changes.  Setting the same value multiple times in a row only triggers the observer once, showcasing Fusion's optimization to prevent unnecessary updates.\nSOURCE: https://github.com/dphfox/fusion/blob/main/docs/tutorials/fundamentals/observers.md#_snippet_5\n\nLANGUAGE: Lua\nCODE:\n```\nlocal observer = scope:Observer(health)\n\nobserver:onChange(function()\n\tprint(\"Observed a change to: \", peek(health))\nend)\n\nprint(\"...setting health to 25 three times...\")\nhealth:set(25)\nhealth:set(25)\nhealth:set(25)\n```\n\n----------------------------------------\n\nTITLE: Detecting Changes with onChange in Luau\nDESCRIPTION: This snippet demonstrates how to use the `:onChange()` method on a Fusion observer to execute a callback function whenever the observed object changes.  The callback prints the current value of the message.\nSOURCE: https://github.com/dphfox/fusion/blob/main/docs/tutorials/fundamentals/your-first-project.md#_snippet_10\n\nLANGUAGE: Lua\nCODE:\n```\nlocal scope = Fusion:scoped()\n\nlocal numCoins = scope:Value(50)\n\nlocal message = scope:Computed(function(use)\n\treturn \"The number of coins is \" .. use(numCoins)\nend)\n\nscope:Observer(message):onChange(function()\n\tprint(Fusion.peek(message))\nend)\n\nnumCoins:set(75)\n\n--> The number of coins is 75\n```\n\n----------------------------------------\n\nTITLE: Fusion Unrecognised Child Type Error\nDESCRIPTION: This error is thrown when a value passed inside of `[Children]` is not a valid child type (instance, array, or state object). Check that only valid child instances are being passed.\nSOURCE: https://github.com/dphfox/fusion/blob/main/docs/api-reference/general/errors.md#_snippet_31\n\nLANGUAGE: text\nCODE:\n```\n'string' type children aren't accepted by `[Children]`.\n```\n\n----------------------------------------\n\nTITLE: Peeking at State Object Value in Fusion (Luau)\nDESCRIPTION: This code demonstrates how to peek at the current value of a Fusion state object. It shows that state objects are Luau tables and how `peek()` function is used to access their current value. The example includes waiting for a short time to show the state changing over time.\nSOURCE: https://github.com/dphfox/fusion/blob/main/docs/index.md#_snippet_0\n\nLANGUAGE: Lua\nCODE:\n```\n-- For example, suppose this function returned a state object.\nlocal currentTimeObj = getCurrentTimeStateObject()\n\n-- State objects are objects...\nprint(typeof(currentTimeObj)) --> table\n\n-- ...and you can peek at their value (or ‘state’) at any time.\nprint(peek(currentTimeObj)) --> 0.0\ntask.wait(5)\nprint(peek(currentTimeObj)) --> 5.0\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Scope in Lua with Fusion\nDESCRIPTION: This snippet demonstrates how to create a basic scope in Lua using Fusion.  It initializes Fusion and creates an empty table which will be used as the scope. This table will store references to objects that need to be destroyed together later.\nSOURCE: https://github.com/dphfox/fusion/blob/main/docs/tutorials/fundamentals/scopes.md#_snippet_0\n\nLANGUAGE: Lua\nCODE:\n```\nlocal Fusion = require(ReplicatedStorage.Fusion)\n\nlocal scope = {}\n```\n\n----------------------------------------\n\nTITLE: Fusion: Component Children Callbacks With Parameters\nDESCRIPTION: This shows a `Build` callback function that accepts a `textSize` parameter. The `textSize` is passed to each of the child components created by the function. This allows the parent to control the properties of the children on demand.\nSOURCE: https://github.com/dphfox/fusion/blob/main/docs/tutorials/best-practices/callbacks.md#_snippet_8\n\nLANGUAGE: Lua\nCODE:\n```\nlocal dialog = scope:Dialog {\n\tBuild = function(scope, textSize)\n\t\treturn {\n\t\t\tscope:Button {\n\t\t\t\tText = \"Hello, world!\",\n\t\t\t\tTextSize = textSize\n\t\t\t},\n\t\t\tscope:Text {\n\t\t\t\tText = \"I am created on the fly!\",\n\t\t\t\tTextSize = textSize\n\t\t\t}\n\t\t}\n\tend\n}\n```\n\n----------------------------------------\n\nTITLE: Mutating Array Example - Luau\nDESCRIPTION: Illustrates how mutating arrays can lead to unexpected update behavior in Fusion. If Fusion skips updates when old and new values are strictly equal (`==`), mutating changes to arrays might not trigger updates, which is often undesirable.\nSOURCE: https://github.com/dphfox/fusion/blob/main/docs/tutorials/best-practices/optimisation.md#_snippet_2\n\nLANGUAGE: Lua\nCODE:\n```\nlocal drinks = scope:Value({\"beer\", \"pepsi\"})\n\n\tdo -- add tea\n\t\tlocal array = peek(drinks)\n\t\ttable.insert(array, \"tea\") -- mutation occurs here\n\t\tdrinks:set(array) -- still the same array, so it's ==\n\tend\n```\n\n----------------------------------------\n\nTITLE: Spring Type Definition in Lua\nDESCRIPTION: Defines the Spring type as a specialized StateObject with methods to control its position and velocity. It includes a 'kind' property for runtime type checking and methods like setPosition, setVelocity, and addVelocity for direct manipulation.\nSOURCE: https://github.com/dphfox/fusion/blob/main/docs/api-reference/animation/types/spring.md#_snippet_0\n\nLANGUAGE: Lua\nCODE:\n```\nexport type Spring<T> = StateObject<T> & {\n\tkind: \"Spring\",\n\tsetPosition: (self, newPosition: T) -> (),\n\tsetVelocity: (self, newVelocity: T) -> (),\n\taddVelocity: (self, deltaVelocity: T) -> ()\n}\n```\n\n----------------------------------------\n\nTITLE: Using peek() directly inside Computed without use() (Lua)\nDESCRIPTION: This snippet demonstrates an incorrect way to use `peek()` inside a Computed object.  When `peek()` is used directly, the Computed object does not track the dependency on the state object, so the calculation is not re-run when the state object's value changes. This leads to stale data and unexpected behavior.\nSOURCE: https://github.com/dphfox/fusion/blob/main/docs/tutorials/fundamentals/computeds.md#_snippet_3\n\nLANGUAGE: Lua\nCODE:\n```\nlocal scope = scoped(Fusion)\nlocal number = scope:Value(2)\nlocal double = scope:Computed(function(_, _)\n    return peek(number) * 2\nend)\n\nprint(peek(number), peek(double)) --> 2 4\n\n-- The calculation won't re-run! Oh no!\nnumber:set(10)\nprint(peek(number), peek(double)) --> 10 4\n```\n\n----------------------------------------\n\nTITLE: invalidAttributeChangeHandler Message\nDESCRIPTION: This error message indicates that `AttributeChange` was provided with a non-function change handler.  The change handler must be a valid function.\nSOURCE: https://github.com/dphfox/fusion/blob/main/docs/api-reference/general/errors.md#_snippet_9\n\nLANGUAGE: text\nCODE:\n```\nThe change handler for the 'Active' attribute must be a function.\n```\n\n----------------------------------------\n\nTITLE: Fragile Multiple Return Example (Lua)\nDESCRIPTION: This code snippet shows an example of a problematic pattern where a function attempts to return multiple instances directly, without enclosing them in an array.  This leads to only the first instance being added to a list, as Luau does not support adding multiple return values directly to a table during assignment.  Returning values in an array resolves this issue.\nSOURCE: https://github.com/dphfox/fusion/blob/main/docs/tutorials/best-practices/instance-handling.md#_snippet_1\n\nLANGUAGE: Lua\nCODE:\n```\nlocal function BadThing(scope, props)\n\t\t-- returns *multiple* instances (not surrounded by curly braces!)\n        return\n            scope:New \"Frame\" {},\n            scope:New \"Frame\" {},\n            scope:New \"Frame\" {}\n    end\n\n    local things = {\n        -- Luau doesn't let you add multiple returns to a list like this.\n        -- Only the first Frame will be added.\n        scope:BadThing {},\n        scope:New \"TextButton\" {}\n    }\n    print(things) --> { Frame, TextButton }\n```\n\n----------------------------------------\n\nTITLE: Task List Creation (Lua)\nDESCRIPTION: This code creates two scrolling frames representing 'incomplete' and 'completed' task lists using `scope:ForPairs`. The position and background color are defined based on the list name. MouseEnter and MouseLeave events update the `dropAction` to determine the drop target.\nSOURCE: https://github.com/dphfox/fusion/blob/main/docs/examples/cookbook/drag-and-drop.md#_snippet_7\n\nLANGUAGE: Lua\nCODE:\n```\nlocal dropAction = scope:Value(nil)\n\nlocal taskLists = scope:ForPairs(\n\t{\n\t\tincomplete = \"mark-as-incomplete\",\n\t\tcompleted = \"mark-as-completed\" \n\t},\n\tfunction(use, scope, listName, listDropAction)\n\t\treturn \n\t\t\tlistName, \n\t\t\tscope:New \"ScrollingFrame\" {\n\t\t\t\tName = `TaskList ({listName})`,\n\t\t\t\tPosition = if listName == \"incomplete\" then\n\t\t\t\t\tUDim2.fromScale(0.1, 0.1)\n\t\t\t\telse\n\t\t\t\t\tUDim2.fromScale(.5, .1),\n\t\t\t\tSize = UDim2.fromScale(0.35, 0.9),\n\n\t\t\t\tBackgroundTransparency = 0.75,\n\t\t\t\tBackgroundColor3 = if listName == \"incomplete\" then\n\t\t\t\t\tColor3.new(1, 0, 0)\n\t\t\t\telse\n\t\t\t\t\tColor3.new(0, 1, 0),\n\n\t\t\t\t[OnEvent \"MouseEnter\"] = function()\n\t\t\t\t\tdropAction:set(listDropAction)\n\t\t\t\tend,\n\n\t\t\t\t[OnEvent \"MouseLeave\"] = function()\n\t\t\t\t\t-- A different item might have overwritten this already.\n\t\t\t\t\tif peek(dropAction) == listDropAction then\n\t\t\t\t\t\tdropAction:set(nil)\n\t\t\t\t\tend\n\t\t\t\tend,\n\n\t\t\t\t[Children] = {\n\t\t\t\t\tNew \"UIListLayout\" {\n\t\t\t\t\t\tSortOrder = \"Name\",\n\t\t\t\t\t\tPadding = UDim.new(0, 5)\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\tend\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Spring Position and Velocity in Lua\nDESCRIPTION: This snippet shows how to manually set the position and velocity of a spring object. `setPosition()` teleports the spring to a specific value, while `setVelocity()` sets its initial movement speed.\nSOURCE: https://github.com/dphfox/fusion/blob/main/docs/tutorials/animation/springs.md#_snippet_3\n\nLANGUAGE: Lua\nCODE:\n```\nanimated:setPosition(5) -- teleport the spring to 5\nanimated:setVelocity(2) -- from here, move 2 units/second\n```\n\n----------------------------------------\n\nTITLE: Component Definition with Inner Scope in Lua\nDESCRIPTION: This snippet shows how to create a component that uses an inner scope for specific or niche methods.  This inner scope is created using `scope:innerScope`, which allows the component to define its own dependencies without requiring the parent scope to have them.\nSOURCE: https://github.com/dphfox/fusion/blob/main/docs/tutorials/best-practices/components.md#_snippet_8\n\nLANGUAGE: Lua\nCODE:\n```\nlocal function Component(\n\t\tscope: Fusion.Scope,\n\t\tprops: {}\n\t)\n\t\tlocal scope = scope:innerScope {\n\t\t\tSpecialThing1 = require(script.SpecialThing1),\n\t\t\tSpecialThing2 = require(script.SpecialThing2),\n\t\t}\n\n\t\treturn scope:SpecialThing1 {\n\t\t\t-- ... rest of code here ...\n\t\t}\n\tend\n```\n\n----------------------------------------\n\nTITLE: Creating ForKeys Object with Key Transformation - Lua\nDESCRIPTION: This snippet shows how to create a `ForKeys` object with a function that transforms the keys to uppercase. It illustrates the basic usage of `ForKeys` with a constant data table and a simple transformation function. The `use` parameter is not used in this example.\nSOURCE: https://github.com/dphfox/fusion/blob/main/docs/tutorials/tables/forkeys.md#_snippet_1\n\nLANGUAGE: Lua\nCODE:\n```\nlocal data = {red = \"foo\", blue = \"bar\"}\nlocal renamed = scope:ForKeys(data, function(use, scope, key)\n\treturn string.upper(key)\nend)\n```\n\n----------------------------------------\n\nTITLE: Nested Computed Objects with Inner Scopes (Lua)\nDESCRIPTION: This example demonstrates how to nest Computed objects and make use of inner scopes by naming the parameter the same as the original scope. This helps prevent confusion and accidentally using the outer scope in an inner computation. The usage of the inner scope ensures proper cleanup when the computed value is no longer needed.\nSOURCE: https://github.com/dphfox/fusion/blob/main/docs/tutorials/fundamentals/computeds.md#_snippet_8\n\nLANGUAGE: Lua\nCODE:\n```\nlocal scope = scoped(Fusion)\nscope:Computed(function(use, scope)\n\t-- ...\n\tscope:Computed(function(use, scope)\n\t\t-- ...\n\t\tscope:Computed(function(use, scope)\n\t\t\tlocal innerValue = scope:Value(5)\n\t\tend)\n\t\t-- ...\n\tend)\n\t-- ...\nend)\n```\n\n----------------------------------------\n\nTITLE: Initializing Services and Fusion\nDESCRIPTION: This code snippet initializes the necessary Roblox services (RunService and Players) and Fusion. It also defines local variables for Fusion-related functions and constants for the spinning animation.\nSOURCE: https://github.com/dphfox/fusion/blob/main/docs/examples/cookbook/loading-spinner.md#_snippet_0\n\nLANGUAGE: Lua\nCODE:\n```\nlocal RunService = game:GetService(\"RunService\")\nlocal Players = game:GetService(\"Players\")\n\nlocal Fusion = -- initialise Fusion here however you please!\nlocal scoped = Fusion.scoped\nlocal Children = Fusion.Children\ntype UsedAs<T> = Fusion.UsedAs<T>\n\nlocal SPIN_DEGREES_PER_SECOND = 180\nlocal SPIN_SIZE = 50\n```\n\n----------------------------------------\n\nTITLE: SpecialKey Apply Method Signature\nDESCRIPTION: Shows the signature of the `apply` method, which is called to apply the custom operation to a Roblox instance. It takes `self`, a `scope` (for cleanup), a `value` (from the property table), and the `applyTo` instance as arguments.  It returns nothing.\nSOURCE: https://github.com/dphfox/fusion/blob/main/docs/api-reference/roblox/types/specialkey.md#_snippet_1\n\nLANGUAGE: Lua\nCODE:\n```\nfunction SpecialKey:apply(\n\tself,\n\tscope: Scope<unknown>,\n\tvalue: unknown,\n\tapplyTo: Instance\n): ()\n```\n\n----------------------------------------\n\nTITLE: Passing a Callback to a Luau Function\nDESCRIPTION: This code demonstrates how a function (`fiveTimes`) can accept a callback as an argument and execute it multiple times within a loop. The callback receives a number representing the current iteration of the loop.\nSOURCE: https://github.com/dphfox/fusion/blob/main/docs/tutorials/best-practices/callbacks.md#_snippet_1\n\nLANGUAGE: Lua\nCODE:\n```\nlocal function fiveTimes(\n\t\tcallback: (number) -> ()\n\t)        \n\t\tfor x=1, 5 do\n            callback(x)\n        end\n    end\n\n    fiveTimes(function(num)\n        print(\"The number is\", num)\n    end)\n```\n\nLANGUAGE: Lua\nCODE:\n```\nThe number is 1\nThe number is 2\nThe number is 3\nThe number is 4\nThe number is 5\n```\n\n----------------------------------------\n\nTITLE: Requiring Fusion with Rojo\nDESCRIPTION: This Lua snippet shows how to require the Fusion module when using Rojo, a tool for synchronizing external files into Roblox Studio.  It assumes that the Fusion module is placed directly under ReplicatedStorage, mirroring the setup when installing via the Roblox model file.\nSOURCE: https://github.com/dphfox/fusion/blob/main/docs/tutorials/get-started/installing-fusion.md#_snippet_1\n\nLANGUAGE: Lua\nCODE:\n```\nlocal Fusion = require(ReplicatedStorage.Fusion)\n```\n\n----------------------------------------\n\nTITLE: Error Handling with pcall() and Computed in Luau\nDESCRIPTION: This code demonstrates error handling using `pcall` within a `Computed` object in Luau. The function attempts a calculation and, if it fails, returns a fallback string. The `ok` boolean is checked to determine whether the calculation was successful.\nSOURCE: https://github.com/dphfox/fusion/blob/main/docs/tutorials/best-practices/error-safety.md#_snippet_6\n\nLANGUAGE: Luau\nCODE:\n```\nlocal double = scope:Computed(function(use)\n\tlocal ok, result = pcall(function()\n\t\tlocal number = use(number)\n\t\tassert(number ~= 3, \"I don't like the number 3\")\n\t\treturn number * 2\n\tend)\n\tif ok then\n\t\treturn result\n\telse\n\t\treturn \"failed: \" .. err\n\tend\nend)\n```\n\n----------------------------------------\n\nTITLE: ForValues Function Definition - Lua\nDESCRIPTION: Defines the `Fusion.ForValues` function, which creates a `For` state object that processes values from an input table. It accepts a scope, an input table, and a processor function as parameters, returning a new `For` object. The processor function transforms input values (VI) to output values (VO).\nSOURCE: https://github.com/dphfox/fusion/blob/main/docs/api-reference/state/members/forvalues.md#_snippet_0\n\nLANGUAGE: Lua\nCODE:\n```\nfunction Fusion.ForValues<K, VI, VO, S>(\n\tscope: Scope<S>,\n\tinputTable: UsedAs<{[K]: VI}>,\n\tprocessor: (Use, Scope<S>, value: VI) -> VO\n) -> For<K, VO>\n```\n\n----------------------------------------\n\nTITLE: Error Handling with assert() and Value/Computed in Luau\nDESCRIPTION: This code shows an example of error handling with `assert()` within a `Computed` object. If the assertion fails (number is equal to 3), the `Computed` object will roll back to its previous value. The code demonstrates how the program continues running even when an assertion fails inside the `Computed` object.\nSOURCE: https://github.com/dphfox/fusion/blob/main/docs/tutorials/best-practices/error-safety.md#_snippet_3\n\nLANGUAGE: Luau\nCODE:\n```\nlocal number = scope:Value(1)\nlocal double = scope:Computed(function(use)\n\tlocal number = use(number)\n\tassert(number ~= 3, \"I don't like the number 3\")\n\treturn number * 2\nend)\n\nprint(\"number:\", peek(number), \"double:\", peek(double))\n\t--> number: 1 double: 2\n\nnumber:set(2)\nprint(\"number:\", peek(number), \"double:\", peek(double))\n\t--> number: 2 double: 4\n\nnumber:set(3)\nprint(\"number:\", peek(number), \"double:\", peek(double))\n\t--> number: 3 double: 4\n\nnumber:set(4)\nprint(\"number:\", peek(number), \"double:\", peek(double))\n\t--> number: 4 double: 8\n```\n\n----------------------------------------\n\nTITLE: Non-Fatal Errors and Safe Expressions in Luau\nDESCRIPTION: This code demonstrates a situation where `Safe` might not catch errors. If the `Safe` function is outside the `Computed` object, it won't catch non-fatal errors that are handled by the `Computed` object itself. The `Safe` expression only handles errors from the `try` block function call itself.  It will not catch errors *inside* the `Computed` object.\nSOURCE: https://github.com/dphfox/fusion/blob/main/docs/tutorials/best-practices/error-safety.md#_snippet_10\n\nLANGUAGE: Luau\nCODE:\n```\n-- The `Safe` is outside the `Computed`.\n-- It will not catch the error, because the `Computed` handles the error.\nlocal result = Safe {\n\ttry = function()\n\t\tscope:Computed(function()\n\t\t\terror(\"Kaboom!\")\n\t\tend)\n\t\treturn \"success\"\n\tend,\n\tfallback = function(err)\n\t\treturn \"fail\"\n\tend\n}\n\nprint(result) --> success\n```\n\n----------------------------------------\n\nTITLE: Message Component Definition in Lua\nDESCRIPTION: This Lua code defines a `Message` component using Fusion. It takes a scope and props, specifically a `Text` property defined with `UsedAs<string>`. The component creates a `TextLabel` and sets its `Text` property to the value passed in via props.\nSOURCE: https://github.com/dphfox/fusion/blob/main/docs/tutorials/best-practices/components.md#_snippet_11\n\nLANGUAGE: Lua\nCODE:\n```\nlocal Fusion = require(game:GetService(\"ReplicatedStorage\").Fusion)\n\ttype UsedAs<T> = Fusion.UsedAs<T>\n\n    local function Message(\n\t\tscope: Fusion.Scope,\n\t\tprops: {\n\t\t\tText: UsedAs<string>\n\t\t}\n\t)\n        return scope:New \"TextLabel\" {\n            AutomaticSize = \"XY\",\n            BackgroundTransparency = 1,\n\n             -- ...some properties...\n\n            Text = props.Text\n        }\n    end\n\n    return Message\n```\n\n----------------------------------------\n\nTITLE: Contextual:is() Method Definition\nDESCRIPTION: Defines the 'is' method for the Contextual type in Lua, used to run a callback with a specific value for the Contextual. The callback is executed with provided arguments, and the Contextual appears as the 'newValue' inside the callback, unless overridden by another 'is' call.\nSOURCE: https://github.com/dphfox/fusion/blob/main/docs/api-reference/general/types/contextual.md#_snippet_2\n\nLANGUAGE: Lua\nCODE:\n```\nfunction Contextual:is(\n\tnewValue: T\n): {\n\tduring: <R, A...>(\n\t\tself,\n\t\tcallback: (A...) -> R,\n\t\tA...\n\t) -> R\n}\n```\n\n----------------------------------------\n\nTITLE: Fusion Spring NaN Goal Error\nDESCRIPTION: This error arises when a spring is given a NaN (Not a Number) goal during construction, causing simulation to be skipped. Ensure that the goal parameter passed to the spring doesn't contain NaN values, which are typically the result of invalid mathematical operations.\nSOURCE: https://github.com/dphfox/fusion/blob/main/docs/api-reference/general/errors.md#_snippet_25\n\nLANGUAGE: text\nCODE:\n```\nA spring was given a NaN goal, so some simulation has been skipped. Ensure no\nsprings have NaN goals.\n```\n\n----------------------------------------\n\nTITLE: Positioning Draggable Element (Lua)\nDESCRIPTION: This code calculates the position of the `Draggable` element. If the element is being dragged (SelfDragInfo is present), it calculates the position relative to the mouse cursor, using the `mouseOffset` to keep the element's position consistent during the drag. Otherwise, it uses the specified `Layout.Position`.\nSOURCE: https://github.com/dphfox/fusion/blob/main/docs/examples/cookbook/drag-and-drop.md#_snippet_3\n\nLANGUAGE: Lua\nCODE:\n```\n\t\tPosition = scope:Computed(function(use)\n\t\t\tlocal dragInfo = use(props.Dragging.SelfDragInfo)\n\t\t\tif dragInfo == nil then\n\t\t\t\treturn use(props.Layout.Position) or UDim2.fromOffset(0, 0)\n\t\t\telse\n\t\t\t\tlocal mousePos = use(props.Dragging.MousePosition)\n\t\t\t\tlocal topLeftCorner = mousePos - dragInfo.mouseOffset\n\t\t\t\treturn UDim2.fromOffset(topLeftCorner.X, topLeftCorner.Y)\n\t\t\tend\n\t\tend),\n```\n\n----------------------------------------\n\nTITLE: Observer onChange Method in Lua\nDESCRIPTION: Defines the onChange method for the Observer. This method registers a callback function to be executed when the Observer receives an update. It takes a callback function as input and returns a function that can be used to unregister the callback.\nSOURCE: https://github.com/dphfox/fusion/blob/main/docs/api-reference/graph/types/observer.md#_snippet_1\n\nLANGUAGE: Lua\nCODE:\n```\nfunction Observer:onChange(\n\tcallback: () -> ()\n): (() -> ())\n```\n\n----------------------------------------\n\nTITLE: invalidPropertyType Message\nDESCRIPTION: This error message indicates a type mismatch when assigning a value to a Roblox instance's property. The assigned value's type is incompatible with the property's expected type.\nSOURCE: https://github.com/dphfox/fusion/blob/main/docs/api-reference/general/errors.md#_snippet_15\n\nLANGUAGE: text\nCODE:\n```\n'Frame.BackgroundColor3' expected a 'Color3' type, but got a 'Vector3' type.\n```\n\n----------------------------------------\n\nTITLE: Creating AttributeOut SpecialKey in Fusion\nDESCRIPTION: This Lua function `Fusion.AttributeOut` creates a SpecialKey. This SpecialKey, when paired with a value object in a property table, sets the value when the specified attribute changes. It takes the attribute name as a string and returns a SpecialKey.\nSOURCE: https://github.com/dphfox/fusion/blob/main/docs/api-reference/roblox/members/attributeout.md#_snippet_0\n\nLANGUAGE: Lua\nCODE:\n```\nfunction Fusion.AttributeOut(\n\tattributeName: string\n): SpecialKey\n```\n\n----------------------------------------\n\nTITLE: Defining the 'For' State Type in Lua\nDESCRIPTION: This Lua code defines the 'For' state type, which is a specialized StateObject designed for tracking multiple values computed from user-defined computations. These values are merged into an output table. The 'kind' property provides runtime type checking.\nSOURCE: https://github.com/dphfox/fusion/blob/main/docs/api-reference/state/types/for.md#_snippet_0\n\nLANGUAGE: Lua\nCODE:\n```\nexport type For<KO, VO> = StateObject<{[KO]: VO}> & {\n\tkind: \"For\"\n}\n```\n\n----------------------------------------\n\nTITLE: mistypedTweenInfo Message\nDESCRIPTION: This error message indicates that the tween info provided to `Tween` was of an incorrect type. The tween info must be a TweenInfo object.\nSOURCE: https://github.com/dphfox/fusion/blob/main/docs/api-reference/general/errors.md#_snippet_21\n\nLANGUAGE: text\nCODE:\n```\nThe tween info of a tween must be a TweenInfo. (got a table)\n```\n\n----------------------------------------\n\nTITLE: Creating a TextLabel Instance with Fusion New\nDESCRIPTION: This snippet demonstrates how to create a `TextLabel` instance using Fusion's `New` function. It sets the `Name`, `Parent`, and `Text` properties. It shows how reactive values update the UI element.\nSOURCE: https://github.com/dphfox/fusion/blob/main/docs/tutorials/roblox/new-instances.md#_snippet_0\n\nLANGUAGE: Lua\nCODE:\n```\nlocal message = scope:Value(\"Hello there!\")\n\nlocal ui = scope:New \"TextLabel\" {\n\tName = \"Greeting\",\n\tParent = PlayerGui.ScreenGui,\n\n\tText = message\n}\n\nprint(ui.Name) --> Greeting\nprint(ui.Text) --> Hello there!\n\nmessage:set(\"Goodbye friend!\")\ntask.wait() -- important: changes are applied on the next frame!\nprint(ui.Text) --> Goodbye friend!\n```\n\n----------------------------------------\n\nTITLE: Reading Processed Keys with peek() - Lua\nDESCRIPTION: This snippet demonstrates reading the processed keys using the `peek()` function after creating a `ForKeys` object. It showcases the output of the transformation function applied to the keys of the input table.\nSOURCE: https://github.com/dphfox/fusion/blob/main/docs/tutorials/tables/forkeys.md#_snippet_2\n\nLANGUAGE: Lua\nCODE:\n```\nlocal data = {red = \"foo\", blue = \"bar\"}\nlocal renamed = scope:ForKeys(data, function(use, scope, key)\n\treturn string.upper(key)\nend)\n\nprint(peek(renamed)) --> {RED = \"foo\", BLUE = \"bar\"}\n```\n\n----------------------------------------\n\nTITLE: Configuring Animations with State Objects in Fusion (Luau)\nDESCRIPTION: This code demonstrates configuring Fusion animations using state objects. It shows how to define different tweening styles and dynamically select one based on the `health` state object's value. This allows for creating responsive and adaptive animations.\nSOURCE: https://github.com/dphfox/fusion/blob/main/docs/index.md#_snippet_8\n\nLANGUAGE: Lua\nCODE:\n```\n-- Define some tweening styles...\nlocal TWEEN_FAST = TweenInfo.new(0.5, Enum.EasingStyle.Elastic)\nlocal TWEEN_SLOW = TweenInfo.new(2, Enum.EasingStyle.Sine)\n\n-- Choose more dramatic styles at low health...\nlocal style = scope:Computed(function(use)\n\treturn if use(health) < 20 then TWEEN_FAST else TWEEN_SLOW\nend)\n\n-- Plug it right into your animation!\nlocal tweenHealth = scope:Tween(health, style)\n```\n\n----------------------------------------\n\nTITLE: Defining Tween Information (Lua)\nDESCRIPTION: This snippet defines the `TWEEN_INFO` object, which specifies the duration, easing style, and easing direction of the animation. It configures how the UI element transitions between positions.\nSOURCE: https://github.com/dphfox/fusion/blob/main/docs/examples/cookbook/animated-computed.md#_snippet_7\n\nLANGUAGE: Lua\nCODE:\n```\nlocal TWEEN_INFO = TweenInfo.new(\n    0.5,\n    Enum.EasingStyle.Sine,\n    Enum.EasingDirection.InOut\n)\n```\n\n----------------------------------------\n\nTITLE: Using Global Theme State (Lua)\nDESCRIPTION: This Lua code demonstrates how to use the global theme state defined in the previous snippet. It requires the Fusion and Theme modules, initializes the theme, and then prints the current theme. It then sets the theme to \"dark\" and prints it again, showcasing how global state can be modified and observed. Requires the Fusion library.\nSOURCE: https://github.com/dphfox/fusion/blob/main/docs/tutorials/best-practices/sharing-values.md#_snippet_3\n\nLANGUAGE: Lua\nCODE:\n```\nlocal Fusion = require(\"path/to/Fusion.luau\")\nlocal scoped, peek = Fusion.scoped, Fusion.peek\n\nlocal Theme = require(\"path/to/Theme.luau\")\n\nlocal function printTheme()\n\tlocal theme = Theme.currentTheme\n\tprint(\n\t\tpeek(theme), \n\t\tif typeof(theme) == \"string\" then \"constant\" else \"state object\"\n\t)\nend\n\nlocal scope = scoped(Fusion)\nTheme.init(scope)\nprintTheme() --> light state object\n\nTheme.currentTheme:set(\"dark\")\nprintTheme() --> dark state object\n```\n\n----------------------------------------\n\nTITLE: Observer Type Definition in Lua\nDESCRIPTION: Defines the Observer type as a GraphObject with specific properties: type (set to \"Observer\"), timeliness (set to \"eager\"), onChange, and onBind. The onChange and onBind properties are functions that take a callback function and return a function that can be used to unregister the callback.\nSOURCE: https://github.com/dphfox/fusion/blob/main/docs/api-reference/graph/types/observer.md#_snippet_0\n\nLANGUAGE: Lua\nCODE:\n```\nexport type Observer = GraphObject & {\n\ttype: \"Observer\",\n\ttimeliness: \"eager\",\n\tonChange: (self, callback: () -> ()) -> (() -> ()),\n\tonBind: (self, callback: () -> ()) -> (() -> ())\n}\n```\n\n----------------------------------------\n\nTITLE: Using PopUp Component with [Children] (Lua)\nDESCRIPTION: This snippet shows how to use the `PopUp` component defined previously, passing an array of instances to its `[Children]` property. These instances (a Label, an ItemPreview, and a Button) will then be parented to the Frame created within the `PopUp` component, enabling dynamic content within the pop-up.\nSOURCE: https://github.com/dphfox/fusion/blob/main/docs/tutorials/best-practices/instance-handling.md#_snippet_4\n\nLANGUAGE: Lua\nCODE:\n```\nscope:PopUp {\n    [Children] = {\n        scope:Label {\n            Text = \"New item collected\"\n        },\n        scope:ItemPreview {\n            Item = Items.BRICK\n        },\n        scope:Button {\n            Text = \"Add to inventory\"\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Hydrate Function Signature - Lua\nDESCRIPTION: This code snippet shows the function signature of `Fusion.Hydrate`. It takes an `Instance` as input and returns a function that accepts a `PropertyTable` and returns the modified `Instance`.\nSOURCE: https://github.com/dphfox/fusion/blob/main/docs/api-reference/roblox/members/hydrate.md#_snippet_0\n\nLANGUAGE: Lua\nCODE:\n```\nfunction Fusion.Hydrate(\n\ttarget: Instance\n): (\n\tprops: PropertyTable\n) -> Instance\n```\n\n----------------------------------------\n\nTITLE: Defining the Use type in Lua\nDESCRIPTION: Defines the 'Use' type as a generic function in Lua. This function takes a 'UsedAs' representation of type 'T' as input ('target') and returns a value of type 'T'. It's designed to extract values from various representations, with specialized implementations available for components like 'computeds'.\nSOURCE: https://github.com/dphfox/fusion/blob/main/docs/api-reference/state/types/use.md#_snippet_0\n\nLANGUAGE: Lua\nCODE:\n```\nexport type Use = <T>(target: UsedAs<T>) -> T\n```\n\n----------------------------------------\n\nTITLE: Querying a Contextual Value (Lua)\nDESCRIPTION: This Lua code queries the current value of a contextual named `myContextual` using the `:now()` method. It prints the current value to the console, which will be the default value if it hasn't been overridden. Illustrates retrieving the current value of a contextual.\nSOURCE: https://github.com/dphfox/fusion/blob/main/docs/tutorials/best-practices/sharing-values.md#_snippet_5\n\nLANGUAGE: Lua\nCODE:\n```\nlocal myContextual = Contextual(\"foo\")\nprint(myContextual:now()) --> foo\n```\n\n----------------------------------------\n\nTITLE: Fusion.ForKeys Function Definition - Lua\nDESCRIPTION: Defines the Fusion.ForKeys function in Lua. This function constructs and returns a new `For` state object that processes keys and preserves values from an input table. It takes a scope, an input table, and a processor function as arguments.\nSOURCE: https://github.com/dphfox/fusion/blob/main/docs/api-reference/state/members/forkeys.md#_snippet_0\n\nLANGUAGE: Lua\nCODE:\n```\nfunction Fusion.ForKeys<KI, KO, V, S>(\n\tscope: Scope<S>,\n\tinputTable: UsedAs<{[KI]: V}>,\n\tprocessor: (Use, Scope<S>, key: KI) -> KO\n) -> For<KO, V>\n```\n\n----------------------------------------\n\nTITLE: Requiring Fusion with vanilla Luau\nDESCRIPTION: This Lua snippet illustrates how to require the Fusion module using a relative path in a vanilla Luau environment. It assumes that the Fusion module is located in a 'shared' directory, within a 'Fusion' subfolder, and that the 'init.luau' file is the entry point. This is suitable for projects not using Rojo or darklua, managing file dependencies manually.\nSOURCE: https://github.com/dphfox/fusion/blob/main/docs/tutorials/get-started/installing-fusion.md#_snippet_3\n\nLANGUAGE: Lua\nCODE:\n```\nlocal Fusion = require(\"../shared/Fusion/init.luau\")\n```\n\n----------------------------------------\n\nTITLE: Creating a One-Way Binding with Fusion.Out (Lua)\nDESCRIPTION: This snippet demonstrates how to use `Fusion.Out` to create a one-way binding.  Changes to the `thing.Name` property will update the `name` value, but changes to `name` will not affect `thing.Name` unless a separate binding is created.\nSOURCE: https://github.com/dphfox/fusion/blob/main/docs/tutorials/roblox/outputs.md#_snippet_0\n\nLANGUAGE: Lua\nCODE:\n```\nlocal name = scope:Value()\n\nlocal thing = scope:New \"Part\" {\n    [Out \"Name\"] = name\n}\n\nprint(peek(name)) --> Part\n\nthing.Name = \"Jimmy\"\nprint(peek(name)) --> Jimmy\n```\n\n----------------------------------------\n\nTITLE: destroyedTwice Message\nDESCRIPTION: This error indicates that `doCleanup()` was called on an object that was already being cleaned up. It is thrown by `doCleanup` and signals an issue with ownership of scopes, especially when cleaning up scopes received from external sources.\nSOURCE: https://github.com/dphfox/fusion/blob/main/docs/api-reference/general/errors.md#_snippet_7\n\nLANGUAGE: text\nCODE:\n```\n`doCleanup()` was given something that it is already cleaning up. Unclear how to\nproceed.\n```\n\n----------------------------------------\n\nTITLE: Define Version Type in Lua\nDESCRIPTION: Defines a `Version` type in Lua, specifying its members: `major` (number), `minor` (number), and `isRelease` (boolean).  This type represents the version of Fusion's source code. The `major` and `minor` version numbers are used to indicate compatibility and updates, while `isRelease` indicates whether the version is from an official release.\nSOURCE: https://github.com/dphfox/fusion/blob/main/docs/api-reference/general/types/version.md#_snippet_0\n\nLANGUAGE: Lua\nCODE:\n```\nexport type Version = {\n\tmajor: number,\n\tminor: number,\n\tisRelease: boolean\n}\n```\n\n----------------------------------------\n\nTITLE: Problematic Checkbox with Internal State (Lua)\nDESCRIPTION: This snippet illustrates a problematic approach to creating a checkbox component where the state (`isChecked`) is managed internally. This approach limits external control and customization, making it difficult to read and write the state from outside the component. This also forces the user to store state in a `Value` object.\nSOURCE: https://github.com/dphfox/fusion/blob/main/docs/tutorials/best-practices/state.md#_snippet_1\n\nLANGUAGE: Lua\nCODE:\n```\nlocal function CheckBox(\n\tscope: Fusion.Scope,\n\tprops: {\n\t\t-- ... some properties ...\n\t}\n)\n    local isChecked = scope:Value(false) -- problematic\n\n    return scope:New \"ImageButton\" {\n\t\t[OnEvent \"Activated\"] = function()\n\t\t\tisChecked:set(not peek(isChecked))\n\t\tend,\n\n        -- ... some more code ...\n    }\nend\n```\n\n----------------------------------------\n\nTITLE: cannotConnectEvent Message\nDESCRIPTION: This error message indicates an attempt to connect to an event that doesn't exist on the specified Roblox instance. It suggests verifying the existence of the event and its correct spelling. This error is thrown by `OnEvent`.\nSOURCE: https://github.com/dphfox/fusion/blob/main/docs/api-reference/general/errors.md#_snippet_4\n\nLANGUAGE: text\nCODE:\n```\nThe Frame class doesn't have an event called 'Foo'.\n```\n\n----------------------------------------\n\nTITLE: mistypedSpringDamping Message\nDESCRIPTION: This error message indicates that the damping ratio provided to `Spring` was of an incorrect type. The damping ratio must be a number.\nSOURCE: https://github.com/dphfox/fusion/blob/main/docs/api-reference/general/errors.md#_snippet_19\n\nLANGUAGE: text\nCODE:\n```\nThe damping ratio for a spring must be a number. (got a string)\n```\n\n----------------------------------------\n\nTITLE: mistypedSpringSpeed Message\nDESCRIPTION: This error message indicates that the speed multiplier provided to `Spring` was of an incorrect type. The speed must be a number.\nSOURCE: https://github.com/dphfox/fusion/blob/main/docs/api-reference/general/errors.md#_snippet_20\n\nLANGUAGE: text\nCODE:\n```\nThe speed of a spring must be a number. (got a string)\n```\n\n----------------------------------------\n\nTITLE: Fusion Spring Type Mismatch Error\nDESCRIPTION: This error is thrown when the type provided to a Spring doesn't match the data type the spring is outputting (e.g., providing a Vector3 when the spring expects a Color3). Provide the correct data type to match the spring's output.\nSOURCE: https://github.com/dphfox/fusion/blob/main/docs/api-reference/general/errors.md#_snippet_27\n\nLANGUAGE: text\nCODE:\n```\nThe type 'Vector3' doesn't match the spring's type 'Color3'.\n```\n\n----------------------------------------\n\nTITLE: Fusion No Task Scheduler Error\nDESCRIPTION: This error indicates that Fusion is not connected to an external task scheduler, which is required for time-related tasks. Roblox users should not encounter this, as Fusion automatically connects to Roblox's task scheduling APIs.\nSOURCE: https://github.com/dphfox/fusion/blob/main/docs/api-reference/general/errors.md#_snippet_22\n\nLANGUAGE: text\nCODE:\n```\nFusion is not connected to an external task scheduler.\n```"
  }
]