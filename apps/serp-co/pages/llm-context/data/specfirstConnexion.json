[
  {
    "owner": "spec-first",
    "repo": "connexion",
    "content": "TITLE: Creating an Asynchronous Connexion Application\nDESCRIPTION: Sample code for creating a standalone Connexion application using AsyncApp class. This approach provides native asynchronous support and is recommended for new projects.\nSOURCE: https://github.com/spec-first/connexion/blob/main/docs/quickstart.rst#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom connexion import AsyncApp\n\napp = AsyncApp(__name__)\n```\n\n----------------------------------------\n\nTITLE: Running a Connexion Application with Uvicorn\nDESCRIPTION: Command for running a Connexion application with Uvicorn ASGI server. This assumes the application is defined as 'app' in a module named 'run.py'.\nSOURCE: https://github.com/spec-first/connexion/blob/main/docs/quickstart.rst#2025-04-23_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\n# assuming your application is defined as ``app`` in ``run.py``\n$ uvicorn run:app\n```\n\n----------------------------------------\n\nTITLE: Using Connexion as Middleware with WSGI Applications\nDESCRIPTION: Sample code for wrapping an existing WSGI application with ConnexionMiddleware and WSGIMiddleware. This shows how to integrate Connexion with legacy WSGI applications.\nSOURCE: https://github.com/spec-first/connexion/blob/main/docs/quickstart.rst#2025-04-23_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom wsgi_framework import App\nfrom connexion import ConnexionMiddleware\nfrom a2wsgi import WSGIMiddleware\n\nwsgi_app = App(__name__)\nasgi_app = WSGIMiddleware(wsgi_app)\napp = ConnexionMiddleware(asgi_app)\n```\n\n----------------------------------------\n\nTITLE: Implementing a Connexion View Function with API Registration\nDESCRIPTION: Python code demonstrating how to create an endpoint handler and register an OpenAPI specification. Function parameters are automatically unpacked from the request based on the spec.\nSOURCE: https://github.com/spec-first/connexion/blob/main/README.md#2025-04-23_snippet_6\n\nLANGUAGE: python\nCODE:\n```\ndef post_greeting(name: str, greeting: str):  # Paramaeters are automatically unpacked\n    return f\"{greeting} {name}\", 200          # Responses are automatically serialized\n\napp.add_api(\"openapi.yaml\")\n```\n\n----------------------------------------\n\nTITLE: Configuring ASGI Middleware for Connexion in Python\nDESCRIPTION: Demonstrates how to use the ConnexionMiddleware and ASGIDecorator to enable automatic parameter injection for ASGI applications.\nSOURCE: https://github.com/spec-first/connexion/blob/main/docs/request.rst#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom asgi_framework import App\nfrom connexion import ConnexionMiddleware\nfrom connexion.decorators import ASGIDecorator\n\n@app.route(\"/greeting/<name>\", methods=[\"POST\"])\n@ASGIDecorator()\ndef post_greeting(name):\n    ...\n\napp = App(__name__)\napp = ConnexionMiddleware(app)\napp.add_api(\"openapi.yaml\")\n```\n\n----------------------------------------\n\nTITLE: Configuring Strict Validation in Connexion AsyncApp\nDESCRIPTION: Demonstrates how to enable strict validation for an AsyncApp in Connexion, which disallows extra parameters not defined in the OpenAPI specification.\nSOURCE: https://github.com/spec-first/connexion/blob/main/docs/validation.rst#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom connexion import AsyncApp\n\napp = AsyncApp(__name__, strict_validation=True)\napp.add_api(\"openapi.yaml\", strict_validation=True)\n```\n\n----------------------------------------\n\nTITLE: Configuring ConnexionMiddleware with Custom Security Handlers\nDESCRIPTION: Code snippet demonstrating how to wrap an ASGI application with ConnexionMiddleware and configure custom security handlers. Useful for integrating Connexion with existing ASGI frameworks.\nSOURCE: https://github.com/spec-first/connexion/blob/main/docs/security.rst#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom asgi_framework import App\nfrom connexion import ConnexionMiddleware\n\napp = App(__name__)\napp = ConnexionMiddleware(app, security_map=security_map)\napp.add_api(\"openapi.yaml\", security_map=security_map)\n```\n\n----------------------------------------\n\nTITLE: Creating an Async Connexion Application\nDESCRIPTION: Code to create a lightweight async Connexion application. Recommended for new projects that can benefit from native asynchronous support.\nSOURCE: https://github.com/spec-first/connexion/blob/main/README.md#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom connexion import AsyncApp\n\napp = AsyncApp(__name__)\n```\n\n----------------------------------------\n\nTITLE: OpenAPI Specification for Connexion API\nDESCRIPTION: Example OpenAPI 3.0 YAML definition that maps the /greeting/{name} endpoint to a Python function named post_greeting in the run module. This specification defines the API contract including parameters and responses.\nSOURCE: https://github.com/spec-first/connexion/blob/main/docs/quickstart.rst#2025-04-23_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\nopenapi: \"3.0.0\"\ninfo:\n  title: Greeting application\n  version: 0.0.1\npaths:\n  /greeting/{name}:\n    post:\n      operationId: run.post_greeting\n      responses:\n        '200':\n          description: \"Greeting response\"\n          content:\n            text/plain:\n              schema:\n                type: string\n      parameters:\n        - name: name\n          in: path\n          required: true\n          schema:\n            type: string\n```\n\n----------------------------------------\n\nTITLE: Activating Pythonic Parameters in Connexion AsyncApp\nDESCRIPTION: Demonstrates how to enable Pythonic parameters in a Connexion AsyncApp, which converts camelCase to snake_case and handles Python builtin conflicts.\nSOURCE: https://github.com/spec-first/connexion/blob/main/docs/request.rst#2025-04-23_snippet_18\n\nLANGUAGE: python\nCODE:\n```\nfrom connexion import AsyncApp\n\napp = AsyncApp(__name__, pythonic_params=True)\napp.add_api(\"openapi.yaml\", pythonic_params=True)\n```\n\n----------------------------------------\n\nTITLE: Defining OpenAPI Operation IDs for Explicit Routing\nDESCRIPTION: Shows how to define operationId in an OpenAPI specification to explicitly link operations to Python functions.\nSOURCE: https://github.com/spec-first/connexion/blob/main/docs/routing.rst#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\npaths:\n  /hello_world:\n    post:\n      operationId: myapp.api.hello_world\n```\n\n----------------------------------------\n\nTITLE: Creating a Flask-compatible Connexion Application\nDESCRIPTION: Sample code for creating a Connexion application using FlaskApp class. This approach leverages the Flask framework and is useful for migrating from Connexion 2.X or utilizing the Flask ecosystem.\nSOURCE: https://github.com/spec-first/connexion/blob/main/docs/quickstart.rst#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom connexion import FlaskApp\n\napp = FlaskApp(__name__)\n```\n\n----------------------------------------\n\nTITLE: Defining GET Endpoint in OpenAPI 3\nDESCRIPTION: Specifies a GET endpoint with a required query parameter 'message' in OpenAPI 3 format.\nSOURCE: https://github.com/spec-first/connexion/blob/main/docs/request.rst#2025-04-23_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\npaths:\n  /foo:\n    get:\n      operationId: api.foo_get\n      parameters:\n        - name: message\n          description: Some message.\n          in: query\n          schema:\n            type: string\n          required: true\n```\n\n----------------------------------------\n\nTITLE: Registering an API in Connexion with Python Handler\nDESCRIPTION: Example of a Python function handler that will be linked to an OpenAPI endpoint. This function will be called when the corresponding endpoint is accessed, with parameters extracted from the request.\nSOURCE: https://github.com/spec-first/connexion/blob/main/docs/quickstart.rst#2025-04-23_snippet_6\n\nLANGUAGE: python\nCODE:\n```\ndef post_greeting(name: str):\n    return f\"Hello {name}\", 200\n\napp.add_api(\"openapi.yaml\")\n```\n\n----------------------------------------\n\nTITLE: Creating a Flask-based Connexion Application\nDESCRIPTION: Code to create a Connexion application based on Flask. Useful for projects migrating from Connexion 2.X or that need Flask ecosystem integration.\nSOURCE: https://github.com/spec-first/connexion/blob/main/README.md#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom connexion import FlaskApp\n\napp = FlaskApp(__name__)\n```\n\n----------------------------------------\n\nTITLE: OpenAPI Specification for a Greeting Endpoint\nDESCRIPTION: YAML OpenAPI specification for a POST endpoint that accepts path and query parameters. The operationId links to the Python implementation function.\nSOURCE: https://github.com/spec-first/connexion/blob/main/README.md#2025-04-23_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\n...\npaths:\n  /greeting/{name}:\n    post:\n      operationId: run.post_greeting\n      responses:\n        '200':\n          content:\n            text/plain:\n              schema:\n                type: string\n      parameters:\n        - name: name\n          in: path\n          required: true\n          schema:\n            type: string\n        - name: greeting\n          in: query\n          required: true\n          schema:\n            type: string\n```\n\n----------------------------------------\n\nTITLE: Receiving Context in Connexion Function\nDESCRIPTION: Shows how to receive the entire context dictionary in a Connexion function by specifying the context_ argument in the function signature.\nSOURCE: https://github.com/spec-first/connexion/blob/main/docs/request.rst#2025-04-23_snippet_24\n\nLANGUAGE: python\nCODE:\n```\ndef foo_get(context_):\n    ...\n```\n\n----------------------------------------\n\nTITLE: Enabling Response Validation in Connexion AsyncApp\nDESCRIPTION: Shows how to activate response validation for an AsyncApp in Connexion, which validates outgoing responses against the OpenAPI specification.\nSOURCE: https://github.com/spec-first/connexion/blob/main/docs/validation.rst#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom connexion import AsyncApp\n\napp = AsyncApp(__name__, validate_responses=True)\napp.add_api(\"openapi.yaml\", validate_responses=True)\n```\n\n----------------------------------------\n\nTITLE: Implementing CORS with AsyncApp in Connexion\nDESCRIPTION: Shows how to add CORS middleware to a Connexion AsyncApp application. Configures CORS to allow all origins, credentials, methods and headers.\nSOURCE: https://github.com/spec-first/connexion/blob/main/docs/cookbook.rst#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom pathlib import Path\n\nfrom connexion import AsyncApp\nfrom connexion.middleware import MiddlewarePosition\nfrom starlette.middleware.cors import CORSMiddleware\n\n\napp = AsyncApp(__name__)\n\napp.add_middleware(\n    CORSMiddleware,\n    position=MiddlewarePosition.BEFORE_EXCEPTION,\n    allow_origins=[\"*\"],\n    allow_credentials=True,\n    allow_methods=[\"*\"],\n    allow_headers=[\"*\"],\n)\n\napp.add_api(\"openapi.yaml\")\n\nif __name__ == \"__main__\":\n    app.run(f\"{Path(__file__).stem}:app\", port=8080)\n```\n\n----------------------------------------\n\nTITLE: Using Connexion as Middleware with ASGI Applications\nDESCRIPTION: Sample code for wrapping an existing ASGI application with ConnexionMiddleware. This approach allows adding Connexion functionality to applications built with other ASGI frameworks.\nSOURCE: https://github.com/spec-first/connexion/blob/main/docs/quickstart.rst#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom asgi_framework import App\nfrom connexion import ConnexionMiddleware\n\napp = App(__name__)\napp = ConnexionMiddleware(app)\n```\n\n----------------------------------------\n\nTITLE: Configuring RestyResolver for Automatic URL-Based Routing\nDESCRIPTION: Shows how to use RestyResolver to automatically infer operationId based on path and HTTP method.\nSOURCE: https://github.com/spec-first/connexion/blob/main/docs/routing.rst#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport connexion\nfrom connexion.resolver import RestyResolver\n\napp = connexion.FlaskApp(__name__)\napp.add_api('openapi.yaml', resolver=RestyResolver('api'))\n```\n\n----------------------------------------\n\nTITLE: Configuring Strict Validation in Connexion Middleware\nDESCRIPTION: Illustrates how to enable strict validation for ConnexionMiddleware, which disallows extra parameters not defined in the OpenAPI specification.\nSOURCE: https://github.com/spec-first/connexion/blob/main/docs/validation.rst#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom asgi_framework import App\nfrom connexion import ConnexionMiddleware\n\napp = App(__name__)\napp = ConnexionMiddleware(app, strict_validation=True)\napp.add_api(\"openapi.yaml\", strict_validation=True)\n```\n\n----------------------------------------\n\nTITLE: Configuring FlaskApp with Custom Security Handlers\nDESCRIPTION: Code snippet demonstrating how to initialize a FlaskApp with custom security handlers. The security_map parameter is used to pass custom security handler implementations.\nSOURCE: https://github.com/spec-first/connexion/blob/main/docs/security.rst#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom connexion import FlaskApp\n\napp = FlaskApp(__name__, security_map=security_map)\napp.add_api(\"openapi.yaml\", security_map=security_map)\n```\n\n----------------------------------------\n\nTITLE: Using FlaskDecorator with ConnexionMiddleware in Flask Application\nDESCRIPTION: This code demonstrates how to use the FlaskDecorator with ConnexionMiddleware to provide automatic parameter injection and response serialization for Flask applications.\nSOURCE: https://github.com/spec-first/connexion/blob/main/docs/response.rst#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom connexion import ConnexionMiddleware\nfrom connexion.decorators import FlaskDecorator\nfrom flask import Flask\n\napp = Flask(__name__)\napp = ConnexionMiddleware(app)\napp.add_api(\"openapi.yaml\")\n\n@app.route(\"/endpoint\")\n@FlaskDecorator()\ndef endpoint(name):\n    ...\n```\n\n----------------------------------------\n\nTITLE: Using StarletteDecorator with ConnexionMiddleware in Starlette Application\nDESCRIPTION: This code shows how to use the StarletteDecorator with ConnexionMiddleware to provide automatic parameter injection and response serialization for Starlette applications.\nSOURCE: https://github.com/spec-first/connexion/blob/main/docs/response.rst#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom connexion import ConnexionMiddleware\nfrom connexion.decorators import StarletteDecorator\nfrom starlette.applications import Starlette\nfrom starlette.routing import Route\n\n@StarletteDecorator()\ndef endpoint(name):\n    ...\n\napp = Starlette(routes=[Route('/endpoint', endpoint)])\napp = ConnexionMiddleware(app)\napp.add_api(\"openapi.yaml\")\n```\n\n----------------------------------------\n\nTITLE: Importing Context Variables in Connexion\nDESCRIPTION: Shows how to import request context variables from the connexion.context module. These variables provide access to request data, operation information, and other context-specific details.\nSOURCE: https://github.com/spec-first/connexion/blob/main/docs/context.rst#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom connexion.context import context, operation, receive, request, scope\nfrom connexion import request  # alias for connexion.context.request\n```\n\n----------------------------------------\n\nTITLE: Running an OpenAPI Specification with Connexion CLI\nDESCRIPTION: This command demonstrates how to use Connexion's command line interface to run an OpenAPI specification file. The simple command loads and runs the API defined in openapi.yaml, enabling quick testing and mocking of your API specification.\nSOURCE: https://github.com/spec-first/connexion/blob/main/docs/index.rst#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nconnexion run openapi.yaml\n```\n\n----------------------------------------\n\nTITLE: Registering Error Handlers in AsyncApp\nDESCRIPTION: Example of registering custom error handlers in a Connexion AsyncApp to handle both specific exception classes and HTTP status codes. The handler converts exceptions into ConnexionResponse objects with custom JSON payloads.\nSOURCE: https://github.com/spec-first/connexion/blob/main/docs/exceptions.rst#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom connexion import AsyncApp\nfrom connexion.lifecycle import ConnexionRequest, ConnexionResponse\n\ndef not_found(request: ConnexionRequest, exc: Exception) -> ConnexionResponse:\n    return ConnexionResponse(status_code=404, body=json.dumps({\"error\": \"NotFound\"}))\n\napp = AsyncApp(__name__)\napp.add_error_handler(FileNotFoundError, not_found)\napp.add_error_handler(404, not_found)\n```\n\n----------------------------------------\n\nTITLE: Configuring AsyncApp with Custom Security Handlers\nDESCRIPTION: Code snippet demonstrating how to initialize an AsyncApp with custom security handlers. The security_map parameter is used to pass custom security handler implementations.\nSOURCE: https://github.com/spec-first/connexion/blob/main/docs/security.rst#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom connexion import AsyncApp\n\napp = AsyncApp(__name__, security_map=security_map)\napp.add_api(\"openapi.yaml\", security_map=security_map)\n```\n\n----------------------------------------\n\nTITLE: Adding Individual API Routes in Connexion\nDESCRIPTION: Shows how to add individual routes not described in the API contract using Python decorators or direct method calls. This is useful for endpoints like health checks.\nSOURCE: https://github.com/spec-first/connexion/blob/main/docs/routing.rst#2025-04-23_snippet_18\n\nLANGUAGE: python\nCODE:\n```\n@app.route(\"/healthz\")\ndef healthz():\n    return 200\n\n# Or as alternative to the decorator\napp.add_url_rule(\"/healthz\", \"healthz\", healthz)\n```\n\n----------------------------------------\n\nTITLE: Registering Error Handlers in FlaskApp\nDESCRIPTION: Example of registering custom error handlers in a Connexion FlaskApp to handle both exception classes and HTTP status codes. The handler returns a ConnexionResponse with a custom JSON error message.\nSOURCE: https://github.com/spec-first/connexion/blob/main/docs/exceptions.rst#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom connexion import FlaskApp\nfrom connexion.lifecycle import ConnexionRequest, ConnexionResponse\n\ndef not_found(request: ConnexionRequest, exc: Exception) -> ConnexionResponse:\n    return ConnexionResponse(status_code=404, body=json.dumps({\"error\": \"NotFound\"}))\n\napp = FlaskApp(__name__)\napp.add_error_handler(FileNotFoundError, not_found)\napp.add_error_handler(404, not_found)\n```\n\n----------------------------------------\n\nTITLE: Using Connexion as Middleware with Existing Applications\nDESCRIPTION: Example of wrapping an existing ASGI/WSGI application with Connexion middleware to add OpenAPI functionality to apps built with other frameworks.\nSOURCE: https://github.com/spec-first/connexion/blob/main/README.md#2025-04-23_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom asgi_framework import App\nfrom connexion import ConnexionMiddleware\n\napp = App(__name__)\napp = ConnexionMiddleware(app)\n```\n\n----------------------------------------\n\nTITLE: Implementing View Function for GET Endpoint in Python\nDESCRIPTION: Defines a Python function that handles the GET request, automatically receiving the 'message' parameter.\nSOURCE: https://github.com/spec-first/connexion/blob/main/docs/request.rst#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ndef foo_get(message):\n    ...\n```\n\n----------------------------------------\n\nTITLE: Configuring RelativeResolver in Connexion Application\nDESCRIPTION: Shows how to use RelativeResolver to avoid repeating x-openapi-router-controller in every operation by setting a base module path.\nSOURCE: https://github.com/spec-first/connexion/blob/main/docs/routing.rst#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport connexion\nfrom connexion.resolver import RelativeResolver\n\napp = connexion.AsyncApp(__name__)\napp.add_api('openapi.yaml', resolver=RelativeResolver('myapp.api'))\n```\n\n----------------------------------------\n\nTITLE: Using Problem Details for Error Responses\nDESCRIPTION: Example of using the connexion.problem.problem function to create standardized error responses following the Problem Details for HTTP APIs specification. This approach provides consistent error formats across the application.\nSOURCE: https://github.com/spec-first/connexion/blob/main/docs/exceptions.rst#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom connexion.lifecycle import ConnexionRequest, ConnexionResponse\nfrom connexion.problem import problem\n\ndef not_found(request: ConnexionRequest, exc: Exception) -> ConnexionResponse:\n    return problem(\n        title=\"NotFound\",\n        detail=\"The requested resource was not found on the server\",\n        status=404,\n    )\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Security Handlers in Connexion\nDESCRIPTION: Example implementation of a custom security handler by subclassing the AbstractSecurityHandler class. This allows implementing support for security schemes not natively supported by Connexion.\nSOURCE: https://github.com/spec-first/connexion/blob/main/docs/security.rst#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom connexion.security import AbstractSecurityHandler\n\n\nclass MyCustomSecurityHandler(AbstractSecurityHandler):\n\n    security_definition_key = \"x-{type}InfoFunc\"\n    environ_key = \"{TYPE}INFO_FUNC\"\n\n    def _get_verify_func(self, {type}_info_func):\n    ...\n\nsecurity_map = {\n    \"{type}\": MyCustomSecurityHandler,\n}\n```\n\n----------------------------------------\n\nTITLE: Activating Pythonic Parameters in Connexion FlaskApp\nDESCRIPTION: Shows how to enable Pythonic parameters in a Connexion FlaskApp, converting camelCase to snake_case and handling Python builtin conflicts.\nSOURCE: https://github.com/spec-first/connexion/blob/main/docs/request.rst#2025-04-23_snippet_19\n\nLANGUAGE: python\nCODE:\n```\nfrom connexion import FlaskApp\n\napp = FlaskApp(__name__, pythonic_params=True)\napp.add_api(\"openapi.yaml\", pythonic_params=True)\n```\n\n----------------------------------------\n\nTITLE: Defining Path Parameters in OpenAPI/Swagger\nDESCRIPTION: Example of defining path parameters in an API specification with type, name, and description. This demonstrates how to specify required parameters in the path with their metadata.\nSOURCE: https://github.com/spec-first/connexion/blob/main/docs/routing.rst#2025-04-23_snippet_17\n\nLANGUAGE: yaml\nCODE:\n```\nparameters:\n  - in: path\n    name: id   # Note the name is the same as in the path\n    required: true\n    type: integer\n    description: The user ID.\n```\n\n----------------------------------------\n\nTITLE: Setting Base Path Programmatically in Connexion\nDESCRIPTION: Python example showing how to set the API base path programmatically when adding an API to the application, useful when you don't want to include it in the specification.\nSOURCE: https://github.com/spec-first/connexion/blob/main/docs/routing.rst#2025-04-23_snippet_21\n\nLANGUAGE: python\nCODE:\n```\napp.add_api('openapi.yaml', base_path='/1.0')\n```\n\n----------------------------------------\n\nTITLE: Dependency Injection with MethodResolver Classes\nDESCRIPTION: Demonstrates how to inject dependencies into class-based handlers by defining parameters in __init__ and providing them through class_arguments.\nSOURCE: https://github.com/spec-first/connexion/blob/main/docs/routing.rst#2025-04-23_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nclass PetsView:\n    def __init__(self, pets):\n        self.pets = pets\n```\n\n----------------------------------------\n\nTITLE: Implementing Lifespan Handler with AsyncApp in Python\nDESCRIPTION: Example showing how to implement a lifespan handler with AsyncApp for managing application state and resources. Uses asynccontextmanager to handle startup and shutdown operations, with access to state via request object.\nSOURCE: https://github.com/spec-first/connexion/blob/main/docs/lifespan.rst#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport contextlib\nimport typing\n\nfrom connexion import AsyncApp, ConnexionMiddleware, request\n\n@contextlib.asynccontextmanager\nasync def lifespan_handler(app: ConnexionMiddleware) -> typing.AsyncIterator:\n    \"\"\"Called at startup and shutdown, can yield state which will be available on the\n     request.\"\"\"\n    client = Client()\n    yield {\"client\": client}\n    client.close()\n\ndef route():\n    \"\"\"Endpoint function called when receiving a request, you can access the state\n    on the request here.\"\"\"\n    client = request.state.client\n    client.call()\n\napp = AsyncApp(__name__, lifespan=lifespan_handler)\n```\n\n----------------------------------------\n\nTITLE: Applying Custom Validators in Connexion FlaskApp\nDESCRIPTION: Demonstrates how to apply custom validators to a FlaskApp in Connexion using the validator_map argument.\nSOURCE: https://github.com/spec-first/connexion/blob/main/docs/validation.rst#2025-04-23_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nfrom connexion import FlaskApp\n\napp = FlaskApp(__name__, validator_map=validator_map)\napp.add_api(\"openapi.yaml\", validator_map=validator_map)\n```\n\n----------------------------------------\n\nTITLE: Defining POST Endpoint with Request Body in Swagger 2\nDESCRIPTION: Specifies a POST endpoint with a named request body in Swagger 2 format.\nSOURCE: https://github.com/spec-first/connexion/blob/main/docs/request.rst#2025-04-23_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\npaths:\n  /foo:\n    post:\n      consumes:\n        - application/json\n        parameters:\n          - in: body\n            name: payload\n            schema:\n              ...\n```\n\n----------------------------------------\n\nTITLE: Running a Connexion App in Development Mode\nDESCRIPTION: Simple code to run a Connexion application using its built-in development server. This requires the uvicorn extra to be installed.\nSOURCE: https://github.com/spec-first/connexion/blob/main/README.md#2025-04-23_snippet_8\n\nLANGUAGE: python\nCODE:\n```\napp.run()\n```\n\n----------------------------------------\n\nTITLE: Running OpenAPI Specification with Stub Implementation\nDESCRIPTION: Command to run an OpenAPI YAML specification with Connexion, using the --stub option to provide placeholder implementations for undefined operations. This will return '501 Not Implemented' responses for operations without handlers.\nSOURCE: https://github.com/spec-first/connexion/blob/main/docs/cli.rst#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ connexion run your_api.yaml --stub\n```\n\n----------------------------------------\n\nTITLE: Implementing CORS with ConnexionMiddleware\nDESCRIPTION: Shows how to implement CORS using ConnexionMiddleware with an existing ASGI framework application, configuring full CORS access.\nSOURCE: https://github.com/spec-first/connexion/blob/main/docs/cookbook.rst#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom pathlib import Path\n\nfrom asgi_framework import App\nfrom connexion import ConnexionMiddleware\nfrom starlette.middleware.cors import CORSMiddleware\n\napp = App(__name__)\napp = ConnexionMiddleware(app)\n\napp.add_middleware(\n    CORSMiddleware,\n    position=MiddlewarePosition.BEFORE_EXCEPTION,\n    allow_origins=[\"*\"],\n    allow_credentials=True,\n    allow_methods=[\"*\"],\n    allow_headers=[\"*\"],\n)\n\napp.add_api(\"openapi.yaml\")\n\nif __name__ == \"__main__\":\n    app.run(f\"{Path(__file__).stem}:app\", port=8080)\n```\n\n----------------------------------------\n\nTITLE: Using test_client for Request Testing in Connexion (Python)\nDESCRIPTION: Demonstrates how to use Connexion's test_client to make requests against your application during tests. The test_client is created with optional kwargs and can be used to send HTTP requests and assert responses.\nSOURCE: https://github.com/spec-first/connexion/blob/main/docs/testing.rst#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ndef test_homepage():\n    app = ...  # Set up app\n    kwarg = {...}\n    with app.test_client(**kwargs) as client:\n        response = client.get(\"/\")\n        assert response.status_code == 200\n```\n\n----------------------------------------\n\nTITLE: Implied Operation IDs with RestyResolver\nDESCRIPTION: Demonstrates the operation ID mapping pattern used by RestyResolver based on URL paths and HTTP methods.\nSOURCE: https://github.com/spec-first/connexion/blob/main/docs/routing.rst#2025-04-23_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\npaths:\n  /:\n    get:\n       # Implied operationId: api.get\n  /foo:\n    get:\n       # Implied operationId: api.foo.search\n    post:\n       # Implied operationId: api.foo.post\n  /foo/{id}:\n    get:\n       # Implied operationId: api.foo.get\n    put:\n       # Implied operationId: api.foo.put\n    copy:\n       # Implied operationId: api.foo.copy\n    delete:\n       # Implied operationId: api.foo.delete\n  /foo/{id}/bar:\n    get:\n       # Implied operationId: api.foo.bar.search\n  /foo/{id}/bar/{name}:\n    get:\n       # Implied operationId: api.foo.bar.get\n```\n\n----------------------------------------\n\nTITLE: Defining POST Endpoint with Request Body in OpenAPI 3\nDESCRIPTION: Specifies a POST endpoint with a request body and custom body name using x-body-name in OpenAPI 3 format.\nSOURCE: https://github.com/spec-first/connexion/blob/main/docs/request.rst#2025-04-23_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\npaths:\n  /foo:\n    post:\n      operationId: api.foo_get\n      requestBody:\n        x-body-name: payload\n        content:\n          application/json:\n            schema:\n              ...\n```\n\n----------------------------------------\n\nTITLE: Configuring Strict Validation in Connexion FlaskApp\nDESCRIPTION: Shows how to enable strict validation for a FlaskApp in Connexion, which disallows extra parameters not defined in the OpenAPI specification.\nSOURCE: https://github.com/spec-first/connexion/blob/main/docs/validation.rst#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom connexion import FlaskApp\n\napp = FlaskApp(__name__, strict_validation=True)\napp.add_api(\"openapi.yaml\", strict_validation=True)\n```\n\n----------------------------------------\n\nTITLE: Running a Connexion Application in Development Mode\nDESCRIPTION: Python code for running a Connexion application directly using the built-in run method. This is recommended only for development and requires the 'uvicorn' extra to be installed.\nSOURCE: https://github.com/spec-first/connexion/blob/main/docs/quickstart.rst#2025-04-23_snippet_10\n\nLANGUAGE: python\nCODE:\n```\napp.run()\n```\n\n----------------------------------------\n\nTITLE: Adding Middleware to ConnexionMiddleware\nDESCRIPTION: Demonstrates how to add middleware when using the ConnexionMiddleware wrapper with an existing ASGI application.\nSOURCE: https://github.com/spec-first/connexion/blob/main/docs/middleware.rst#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom asgi_framework import App\nfrom connexion import ConnexionMiddleware\n\napp = App(__name__)\napp = ConnexionMiddleware(app)\n\napp.add_middleware(MiddlewareClass, **options)\n```\n\n----------------------------------------\n\nTITLE: Defining File Upload Endpoint in OpenAPI 3\nDESCRIPTION: Specifies a POST endpoint for file upload using multipart/form-data in OpenAPI 3 format.\nSOURCE: https://github.com/spec-first/connexion/blob/main/docs/request.rst#2025-04-23_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\npaths:\n  /foo:\n    post:\n      operationId: api.foo_get\n      requestBody:\n        content:\n          multipart/form-data:\n            schema:\n              type: object\n              properties:\n                file:\n                  type: string\n                  format: binary\n```\n\n----------------------------------------\n\nTITLE: Enabling Response Validation in Connexion Middleware\nDESCRIPTION: Illustrates how to activate response validation for ConnexionMiddleware, which validates outgoing responses against the OpenAPI specification.\nSOURCE: https://github.com/spec-first/connexion/blob/main/docs/validation.rst#2025-04-23_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom asgi_framework import App\nfrom connexion import ConnexionMiddleware\n\napp = App(__name__)\napp = ConnexionMiddleware(app, validate_responses=True)\napp.add_api(\"openapi.yaml\", validate_responses=True)\n```\n\n----------------------------------------\n\nTITLE: Accessing Context Information from Security Middleware\nDESCRIPTION: Shows the structure of the context.context dictionary which contains user and token information from authentication processes. This dictionary may be extended by third-party or custom middleware.\nSOURCE: https://github.com/spec-first/connexion/blob/main/docs/context.rst#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n{\n    \"user\": ...  # User information from authentication\n    \"token_info\": ...  # Token information from authentication\n}\n```\n\n----------------------------------------\n\nTITLE: Error Handler Configuration - Connexion 3 Style\nDESCRIPTION: Example showing the new error handler configuration in Connexion 3, with request injection and registration only on the Connexion app.\nSOURCE: https://github.com/spec-first/connexion/blob/main/docs/v3.rst#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport connexion\nfrom connexion.lifecycle import ConnexionRequest, ConnexionResponse\n\ndef not_found_handler(request: ConnexionRequest, exc: Exception) -> ConnexionResponse:\n    ...\n\napp = connexion.App(__name__)\napp.add_error_handler(404, not_found_handler)\n```\n\n----------------------------------------\n\nTITLE: Configuring MethodResolver for Class-Based Handlers\nDESCRIPTION: Shows how to use MethodResolver to route requests to class methods instead of functions.\nSOURCE: https://github.com/spec-first/connexion/blob/main/docs/routing.rst#2025-04-23_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nimport connexion\nfrom connexion.resolver import MethodResolver\n\napp = connexion.FlaskApp(__name__)\napp.add_api('openapi.yaml', resolver=MethodResolver('api'))\n```\n\n----------------------------------------\n\nTITLE: Defining File Upload Endpoint in Swagger 2\nDESCRIPTION: Specifies a POST endpoint for file upload using formData in Swagger 2 format.\nSOURCE: https://github.com/spec-first/connexion/blob/main/docs/request.rst#2025-04-23_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\npaths:\n  /foo:\n    post:\n      consumes:\n        - application/json\n      parameters:\n        - name: file\n          type: file\n          in: formData\n```\n\n----------------------------------------\n\nTITLE: Defining GET Endpoint in Swagger 2\nDESCRIPTION: Specifies a GET endpoint with a required query parameter 'message' in Swagger 2 format.\nSOURCE: https://github.com/spec-first/connexion/blob/main/docs/request.rst#2025-04-23_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\npaths:\n  /foo:\n    get:\n      operationId: api.foo_get\n      parameters:\n        - name: message\n          description: Some message.\n          in: query\n          type: string\n          required: true\n```\n\n----------------------------------------\n\nTITLE: Enabling Response Validation in Connexion FlaskApp\nDESCRIPTION: Demonstrates how to activate response validation for a FlaskApp in Connexion, which validates outgoing responses against the OpenAPI specification.\nSOURCE: https://github.com/spec-first/connexion/blob/main/docs/validation.rst#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom connexion import FlaskApp\n\napp = FlaskApp(__name__, validate_responses=True)\napp.add_api(\"openapi.yaml\", validate_responses=True)\n```\n\n----------------------------------------\n\nTITLE: Registering Error Handlers with ConnexionMiddleware\nDESCRIPTION: Example of registering custom error handlers with ConnexionMiddleware wrapping an ASGI framework application. This approach allows adding Connexion error handling to any ASGI/WSGI framework.\nSOURCE: https://github.com/spec-first/connexion/blob/main/docs/exceptions.rst#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom asgi_framework import App\nfrom connexion import ConnexionMiddleware\nfrom connexion.lifecycle import ConnexionRequest, ConnexionResponse\n\ndef not_found(request: ConnexionRequest, exc: Exception) -> ConnexionResponse:\n    return ConnexionResponse(status_code=404, body=json.dumps({\"error\": \"NotFound\"}))\n\napp = App(__name__)\napp = ConnexionMiddleware(app)\n\napp.add_error_handler(FileNotFoundError, not_found)\napp.add_error_handler(404, not_found)\n```\n\n----------------------------------------\n\nTITLE: Handling Multiple File Uploads in FlaskApp\nDESCRIPTION: Shows how to handle multiple file uploads in a FlaskApp, receiving them as a list of werkzeug.FileStorage instances.\nSOURCE: https://github.com/spec-first/connexion/blob/main/docs/request.rst#2025-04-23_snippet_15\n\nLANGUAGE: python\nCODE:\n```\ndef foo_get(file)\n    assert isinstance(file, list)\n    assert isinstance(file[0], werkzeug.FileStorage)\n    ...\n```\n\n----------------------------------------\n\nTITLE: Creating a Class-Based Handler for MethodResolver\nDESCRIPTION: Example of a Python class with methods that handle different HTTP operations for a resource.\nSOURCE: https://github.com/spec-first/connexion/blob/main/docs/routing.rst#2025-04-23_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nclass PetsView:\n\n  def post(self, body: dict):\n    ...\n\n  def put(self, petId, body: dict):\n    ...\n\n  def delete(self, petId):\n    ...\n\n  def get(self, petId=None):\n    ...\n\n  def search(limit=100):\n    ...\n```\n\n----------------------------------------\n\nTITLE: Creating an API Endpoint with Response Components in Connexion\nDESCRIPTION: This example shows a basic API endpoint function that returns data, status code, and headers. Connexion will handle the serialization based on the OpenAPI specification.\nSOURCE: https://github.com/spec-first/connexion/blob/main/docs/response.rst#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ndef endpoint():\n    data = \"success\"\n    status_code = 200\n    headers = {\"Content-Type\": \"text/plain\"}\n    return data, status_code, headers\n```\n\n----------------------------------------\n\nTITLE: Implementing Lifespan Handler with FlaskApp in Python\nDESCRIPTION: Example showing how to implement a lifespan handler with FlaskApp for managing application state and resources. Similar to AsyncApp implementation but using Flask-specific components.\nSOURCE: https://github.com/spec-first/connexion/blob/main/docs/lifespan.rst#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport contextlib\nimport typing\n\nfrom connexion import FlaskApp, ConnexionMiddleware, request\n\n@contextlib.asynccontextmanager\nasync def lifespan_handler(app: ConnexionMiddleware) -> typing.AsyncIterator:\n    \"\"\"Called at startup and shutdown, can yield state which will be available on the\n     request.\"\"\"\n    client = Client()\n    yield {\"client\": client}\n    client.close()\n\ndef route():\n    \"\"\"Endpoint function called when receiving a request, you can access the state\n    on the request here.\"\"\"\n    client = request.state.client\n    client.call()\n\napp = FlaskApp(__name__, lifespan=lifespan_handler)\n```\n\n----------------------------------------\n\nTITLE: Adding Middleware to AsyncApp\nDESCRIPTION: Demonstrates how to add ASGI middleware to a Connexion AsyncApp instance using the add_middleware method.\nSOURCE: https://github.com/spec-first/connexion/blob/main/docs/middleware.rst#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom connexion import AsyncApp\n\napp = AsyncApp(__name__)\n\napp.add_middleware(MiddlewareClass, **options)\n```\n\n----------------------------------------\n\nTITLE: Implementing Lifespan Handler with ConnexionMiddleware in Python\nDESCRIPTION: Example demonstrating how to implement a lifespan handler using ConnexionMiddleware with a generic ASGI framework. Shows middleware integration and state management.\nSOURCE: https://github.com/spec-first/connexion/blob/main/docs/lifespan.rst#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport contextlib\nimport typing\n\nfrom asgi_framework import App\nfrom connexion import ConnexionMiddleware, request\n\n@contextlib.asynccontextmanager\nasync def lifespan_handler(app: ConnexionMiddleware) -> typing.AsyncIterator:\n    \"\"\"Called at startup and shutdown, can yield state which will be available on the\n     request.\"\"\"\n    client = Client()\n    yield {\"client\": client}\n    client.close()\n\ndef endpoint():\n    \"\"\"Endpoint function called when receiving a request, you can access the state\n    on the request here.\"\"\"\n    client = request.state.client\n    client.call()\n\napp = App(__name__)\napp = ConnexionMiddleware(app, lifespan=lifespan_handler)\n```\n\n----------------------------------------\n\nTITLE: Handling File Upload in FlaskApp\nDESCRIPTION: Demonstrates how to handle file uploads in a FlaskApp using werkzeug.FileStorage.\nSOURCE: https://github.com/spec-first/connexion/blob/main/docs/request.rst#2025-04-23_snippet_13\n\nLANGUAGE: python\nCODE:\n```\ndef foo_get(file)\n    assert isinstance(file, werkzeug.FileStorage)\n    ...\n```\n\n----------------------------------------\n\nTITLE: Receiving Specific Context Keys in Connexion Function\nDESCRIPTION: Demonstrates how to receive specific keys from the context dictionary in a Connexion function by specifying them individually in the function signature.\nSOURCE: https://github.com/spec-first/connexion/blob/main/docs/request.rst#2025-04-23_snippet_25\n\nLANGUAGE: python\nCODE:\n```\ndef foo_get(user, token_info):\n    ...\n```\n\n----------------------------------------\n\nTITLE: Running a Connexion App with Uvicorn\nDESCRIPTION: Command to run a Connexion application using the Uvicorn ASGI server. This is the recommended approach for production deployments.\nSOURCE: https://github.com/spec-first/connexion/blob/main/README.md#2025-04-23_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\n$ uvicorn run:app\n```\n\n----------------------------------------\n\nTITLE: Running ASGI Application - Connexion 3 Style\nDESCRIPTION: Example showing the new way of running a Connexion 3 application using ASGI servers like uvicorn or gunicorn with uvicorn workers.\nSOURCE: https://github.com/spec-first/connexion/blob/main/docs/v3.rst#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport connexion\n\napp = connexion.App(__name__)\n\nif __name__ == \"__main__\":\n    app.run()\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ uvicorn hello:app\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ gunicorn -k uvicorn.workers.UvicornWorker hello:app\n```\n\n----------------------------------------\n\nTITLE: Defining Optional Arguments in Python Function for Connexion\nDESCRIPTION: Demonstrates how to define an optional argument in a Python function when the corresponding parameter is optional in the OpenAPI specification and has no default value.\nSOURCE: https://github.com/spec-first/connexion/blob/main/docs/request.rst#2025-04-23_snippet_16\n\nLANGUAGE: python\nCODE:\n```\ndef foo_get(optional_argument=None):\n    ...\n```\n\n----------------------------------------\n\nTITLE: Python Function with Pythonic Parameters in Connexion\nDESCRIPTION: Demonstrates a Python function signature using Pythonic parameters, where camelCase is converted to snake_case and Python builtin conflicts are resolved.\nSOURCE: https://github.com/spec-first/connexion/blob/main/docs/request.rst#2025-04-23_snippet_23\n\nLANGUAGE: python\nCODE:\n```\ndef foo_get(filter_, filter_option=None):\n    ...\n```\n\n----------------------------------------\n\nTITLE: Running a Connexion App with Gunicorn and Uvicorn Workers\nDESCRIPTION: Command to run a Connexion application using Gunicorn with Uvicorn workers for production scenarios requiring process management.\nSOURCE: https://github.com/spec-first/connexion/blob/main/README.md#2025-04-23_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\n$ gunicorn -k uvicorn.workers.UvicornWorker run:app\n```\n\n----------------------------------------\n\nTITLE: Testing Lifespan Handlers in Python\nDESCRIPTION: Example showing how to properly test lifespan handlers using the test_client as a context manager. Demonstrates setup and teardown of application state in tests.\nSOURCE: https://github.com/spec-first/connexion/blob/main/docs/lifespan.rst#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ndef test_homepage():\n    app = ...  # Set up app\n    with app.test_client() as client:\n        # Application's lifespan is called on entering the block.\n        response = client.get(\"/\")\n        assert response.status_code == 200\n\n    # And the lifespan's teardown is run when exiting the block.\n```\n\n----------------------------------------\n\nTITLE: Defining Form Data Endpoint in Swagger 2\nDESCRIPTION: Specifies a POST endpoint with form data parameters in Swagger 2 format.\nSOURCE: https://github.com/spec-first/connexion/blob/main/docs/request.rst#2025-04-23_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\npaths:\n  /foo:\n    post:\n      operationId: api.foo_get\n      consumes:\n        - application/json\n      parameters:\n        - in: formData\n          name: field1\n          type: string\n        - in: formData\n          name: field2\n          type: string\n```\n\n----------------------------------------\n\nTITLE: Configuring Swagger UI with AsyncApp in Python\nDESCRIPTION: This snippet demonstrates how to configure the Swagger UI path for an AsyncApp in Connexion. It uses SwaggerUIOptions to set a custom path for the Swagger UI.\nSOURCE: https://github.com/spec-first/connexion/blob/main/docs/swagger_ui.rst#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom connexion import AsyncApp\nfrom connexion.options import SwaggerUIOptions\n\noptions = SwaggerUIOptions(swagger_ui_path=\"/docs\")\n\napp = AsyncApp(__name__, swagger_ui_options=options)\napp.add_api(\"openapi.yaml\", swagger_ui_options=options)\n```\n\n----------------------------------------\n\nTITLE: Importing Flask Request Instead of Connexion Request\nDESCRIPTION: When using FlaskApp in Connexion, you may need to import the Flask request object instead of the Connexion request object for compatibility with synchronous code.\nSOURCE: https://github.com/spec-first/connexion/blob/main/docs/context.rst#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom flask import request\n```\n\n----------------------------------------\n\nTITLE: Customizing AsyncApp Middleware Stack\nDESCRIPTION: Shows how to customize the default middleware stack for AsyncApp by removing the SecurityMiddleware.\nSOURCE: https://github.com/spec-first/connexion/blob/main/docs/middleware.rst#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom connexion import AsyncApp, ConnexionMiddleware\nfrom connexion.middleware.security import SecurityMiddleware\n\nmiddlewares = [middleware for middleware in ConnexionMiddleware.default_middlewares\n               if middleware is not SecurityMiddleware]\n\napp = AsyncApp(__name__, middlewares=middlewares)\n```\n\n----------------------------------------\n\nTITLE: Testing OAuth2 Authentication with cURL\nDESCRIPTION: Demonstrates how to test the OAuth2 authentication endpoints using cURL, including an unauthenticated request and authenticated requests with different Bearer tokens.\nSOURCE: https://github.com/spec-first/connexion/blob/main/examples/oauth2_local_tokeninfo/README.rst#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ curl http://localhost:8080/openapi/secret   # missing authentication\n$ curl -H 'Authorization: Bearer 123' http://localhost:8080/openapi/secret\n$ curl -H 'Authorization: Bearer 456' http://localhost:8080/swagger/secret\n```\n\n----------------------------------------\n\nTITLE: Configuring Resolver Error Handling\nDESCRIPTION: Shows how to configure Connexion to provide an error response for paths that are not yet implemented, useful in API-first workflows.\nSOURCE: https://github.com/spec-first/connexion/blob/main/docs/routing.rst#2025-04-23_snippet_14\n\nLANGUAGE: python\nCODE:\n```\napp = connexion.FlaskApp(__name__)\napp.add_api('openapi.yaml', resolver_error=501)\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom XML Response Validator in Connexion\nDESCRIPTION: Demonstrates how to create a custom XML response validator by subclassing AbstractResponseBodyValidator and overriding the default validators.\nSOURCE: https://github.com/spec-first/connexion/blob/main/docs/validation.rst#2025-04-23_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nfrom connexion.datastructures import MediaTypeDict\nfrom connexion.validators import AbstractResponseBodyValidator, TextResponseBodyValidator\n\n\nclass MyCustomXMLResponseValidator(AbstractResponseBodyValidator):\n\n    def _parse(self, stream: t.Generator[bytes, None, None]) -> t.Any:\n        ...\n\n    def _validate(self, body: dict):\n        ...\n\n\nvalidator_map = {\n    \"response\": MediaTypeDict(\n        {\n            \"*/*json\": JSONResponseBodyValidator,\n            \"*/*xml\": MyCustomXMLResponseValidator,\n            \"text/plain\": TextResponseBodyValidator,\n        }\n    ),\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Middleware to FlaskApp\nDESCRIPTION: Shows how to add both ASGI and WSGI middleware to a Connexion FlaskApp instance.\nSOURCE: https://github.com/spec-first/connexion/blob/main/docs/middleware.rst#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom connexion import FlaskApp\n\napp = FlaskApp(__name__)\n\napp.add_middleware(MiddlewareClass, **options)\n\napp.add_wsgi_middleware(MiddlewareClass, **options)\n```\n\n----------------------------------------\n\nTITLE: Creating Virtual Environment and Installing Dependencies for Connexion\nDESCRIPTION: Sets up a Python virtual environment and installs Connexion with Flask, Swagger UI, and Uvicorn dependencies. This prepares the environment needed to run the HTTP Basic Auth example.\nSOURCE: https://github.com/spec-first/connexion/blob/main/examples/basicauth/README.rst#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ python -m venv my-venv\n$ source my-venv/bin/activate\n$ pip install 'connexion[flask,swagger-ui,uvicorn]>=3.1.0'\n```\n\n----------------------------------------\n\nTITLE: Providing Dependencies to MethodResolver Classes\nDESCRIPTION: Shows how to provide arguments to MethodResolver classes using the class_arguments parameter.\nSOURCE: https://github.com/spec-first/connexion/blob/main/docs/routing.rst#2025-04-23_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nMethodViewResolver(\"api\", class_arguments={\"PetsView\": {\"kwargs\": {\"pets\": zoo}}})\n```\n\n----------------------------------------\n\nTITLE: Using TestContext for Accessing Context Variables in Connexion Tests (Python)\nDESCRIPTION: Shows how to use Connexion's TestContext to access context variables during tests. It allows mocking of context variables and provides access to them within the test environment.\nSOURCE: https://github.com/spec-first/connexion/blob/main/docs/testing.rst#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom unittest.mock import MagicMock\n\nfrom connexion.context import operation\nfrom connexion.testing import TestContext\n\n\ndef get_method():\n    \"\"\"Function called within TestContext you can access the context variables here.\"\"\"\n    return operation.method\n\ndef test():\n    operation = MagicMock(name=\"operation\")\n    operation.method = \"post\"\n    with TestContext(operation=operation):\n        assert get_method() == \"post\n```\n\n----------------------------------------\n\nTITLE: Setting up Virtual Environment and Installing Connexion for Async App\nDESCRIPTION: Commands to create a new Python virtual environment and install Connexion with Swagger UI and Uvicorn dependencies. Requires Python with venv module.\nSOURCE: https://github.com/spec-first/connexion/blob/main/examples/helloworld_async/README.rst#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ python -m venv my-venv\n$ source my-venv/bin/activate\n$ pip install 'connexion[swagger-ui,uvicorn]>=3.1.0'\n```\n\n----------------------------------------\n\nTITLE: Implementing View Function for POST Endpoint in Swagger 2\nDESCRIPTION: Defines a Python function that handles the POST request, receiving the named payload.\nSOURCE: https://github.com/spec-first/connexion/blob/main/docs/request.rst#2025-04-23_snippet_7\n\nLANGUAGE: python\nCODE:\n```\ndef foo_get(payload)\n    ...\n```\n\n----------------------------------------\n\nTITLE: Implementing View Functions for POST Endpoint in Python\nDESCRIPTION: Defines Python functions that handle POST requests, demonstrating default and custom body parameter names.\nSOURCE: https://github.com/spec-first/connexion/blob/main/docs/request.rst#2025-04-23_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n# Default\ndef foo_get(body)\n    ...\n\n# Based on x-body-name\ndef foo_get(payload)\n    ...\n```\n\n----------------------------------------\n\nTITLE: Running a Mock Server with Example Responses\nDESCRIPTION: Commands to run a mock server that returns example responses for all endpoints. This can use examples defined in the specification or generate them from the schema if connexion is installed with the mock extra.\nSOURCE: https://github.com/spec-first/connexion/blob/main/docs/cli.rst#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ connexion run your_api.yaml --mock=all\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ connexion run https://raw.githubusercontent.com/spec-first/connexion/main/examples/helloworld_async/spec/openapi.yaml --mock=all\n```\n\n----------------------------------------\n\nTITLE: Customizing ConnexionMiddleware Stack\nDESCRIPTION: Shows how to customize the middleware stack when using ConnexionMiddleware with an existing ASGI application.\nSOURCE: https://github.com/spec-first/connexion/blob/main/docs/middleware.rst#2025-04-23_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom asgi_framework import App\nfrom connexion import ConnexionMiddleware\nfrom connexion.middleware.security import SecurityMiddleware\n\nmiddlewares = [middleware for middleware in ConnexionMiddleware.default_middlewares\n               if middleware is not SecurityMiddleware]\n\napp = App(__name__)\napp = ConnexionMiddleware(app, middlewares=middlewares)\n```\n\n----------------------------------------\n\nTITLE: Installing Connexion with Required Dependencies\nDESCRIPTION: Installation command for Connexion with Flask, Swagger UI, and Uvicorn dependencies, which are required for this reverse proxy example.\nSOURCE: https://github.com/spec-first/connexion/blob/main/examples/reverseproxy/README.rst#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ pip install 'connexion[flask,swagger-ui,uvicorn]>=3.1.0'\n```\n\n----------------------------------------\n\nTITLE: Applying Custom Validators in Connexion Middleware\nDESCRIPTION: Illustrates how to apply custom validators to ConnexionMiddleware using the validator_map argument.\nSOURCE: https://github.com/spec-first/connexion/blob/main/docs/validation.rst#2025-04-23_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nfrom asgi_framework import App\nfrom connexion import ConnexionMiddleware\n\napp = App(__name__)\napp = ConnexionMiddleware(app, validator_map=validator_map)\napp.add_api(\"openapi.yaml\", validator_map=validator_map)\n```\n\n----------------------------------------\n\nTITLE: Applying Custom Validators in Connexion AsyncApp\nDESCRIPTION: Shows how to apply custom validators to an AsyncApp in Connexion using the validator_map argument.\nSOURCE: https://github.com/spec-first/connexion/blob/main/docs/validation.rst#2025-04-23_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nfrom connexion import AsyncApp\n\napp = AsyncApp(__name__, validator_map=validator_map)\napp.add_api(\"openapi.yaml\", validator_map=validator_map)\n```\n\n----------------------------------------\n\nTITLE: Using Decorators with MethodResolver Classes\nDESCRIPTION: Shows how to apply decorators to class methods when using MethodResolver by listing them in the class's decorator attribute.\nSOURCE: https://github.com/spec-first/connexion/blob/main/docs/routing.rst#2025-04-23_snippet_8\n\nLANGUAGE: python\nCODE:\n```\ndef example_decorator(f):\n\n    def decorator(*args, **kwargs):\n        return f(*args, **kwargs)\n\n    return decorator\n\nclass PetsView:\n  \"\"\"Create Pets service\"\"\"\n\n  decorators = [example_decorator]\n\n  ...\n```\n\n----------------------------------------\n\nTITLE: Configuring MethodViewResolver for Flask MethodView Classes\nDESCRIPTION: Shows how to use MethodViewResolver to route requests to Flask MethodView subclass methods.\nSOURCE: https://github.com/spec-first/connexion/blob/main/docs/routing.rst#2025-04-23_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nimport connexion\nfrom connexion.resolver import MethodResolver\n\napp = connexion.FlaskApp(__name__)\napp.add_api('openapi.yaml', resolver=MethodViewResolver('api'))\n```\n\n----------------------------------------\n\nTITLE: Running Connexion Server\nDESCRIPTION: Launches the Connexion server application that serves both OpenAPI 3 and Swagger 2 specifications.\nSOURCE: https://github.com/spec-first/connexion/blob/main/examples/splitspecs/README.rst#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ python app.py\n```\n\n----------------------------------------\n\nTITLE: Customizing JSON Serialization in ConnexionMiddleware\nDESCRIPTION: This code demonstrates how to customize the Jsonifier used to serialize JSON data when using ConnexionMiddleware by passing a custom jsonifier when instantiating the middleware or registering an API.\nSOURCE: https://github.com/spec-first/connexion/blob/main/docs/response.rst#2025-04-23_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom asgi_framework import App\nfrom connexion import ConnexionMiddleware\n\napp = App(__name__)\napp = ConnexionMiddleware(app, jsonifier=...)\napp.add_api(\"openapi.yaml\", jsonifier=...)\n```\n\n----------------------------------------\n\nTITLE: Customizing JSON Serialization in FlaskApp\nDESCRIPTION: This code shows how to customize the Jsonifier used to serialize JSON data in a FlaskApp by passing a custom jsonifier when instantiating the app or registering an API.\nSOURCE: https://github.com/spec-first/connexion/blob/main/docs/response.rst#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom connexion import FlaskApp\n\napp = FlaskApp(__name__, jsonifier=...)\napp.add_api(\"openapi.yaml\", jsonifier=...)\n```\n\n----------------------------------------\n\nTITLE: Customizing JSON Serialization in AsyncApp\nDESCRIPTION: This code demonstrates how to customize the Jsonifier used to serialize JSON data in an AsyncApp by passing a custom jsonifier when instantiating the app or registering an API.\nSOURCE: https://github.com/spec-first/connexion/blob/main/docs/response.rst#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom connexion import AsyncApp\n\napp = AsyncApp(__name__, jsonifier=)\napp.add_api(\"openapi.yaml\", jsonifier=c)\n```\n\n----------------------------------------\n\nTITLE: Basic Connexion Run Command Syntax\nDESCRIPTION: The standard syntax for the Connexion run command, showing both required and optional parameters. SPEC_FILE is your OpenAPI specification file, and the optional BASE_MODULE_PATH indicates where your handler functions are located.\nSOURCE: https://github.com/spec-first/connexion/blob/main/docs/cli.rst#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ connexion run [OPTIONS] SPEC_FILE [BASE_MODULE_PATH]\n```\n\n----------------------------------------\n\nTITLE: Configuring Swagger UI with ConnexionMiddleware in Python\nDESCRIPTION: This snippet illustrates how to configure the Swagger UI path using ConnexionMiddleware in Connexion. It uses SwaggerUIOptions to set a custom path for the Swagger UI and wraps an existing ASGI application.\nSOURCE: https://github.com/spec-first/connexion/blob/main/docs/swagger_ui.rst#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom asgi_framework import App\nfrom connexion import ConnexionMiddleware\nfrom connexion.options import SwaggerUIOptions\n\noptions = SwaggerUIOptions(swagger_ui_path=\"/docs\")\n\napp = App(__name__)\napp = ConnexionMiddleware(app, swagger_ui_options=options)\napp.add_api(\"openapi.yaml\", swagger_ui_options=options)\n```\n\n----------------------------------------\n\nTITLE: Running a Connexion Application with Auto-reloading\nDESCRIPTION: Python code for running a Connexion application with automatic reloading on code changes. This leverages file path manipulation to provide the application as an import string for proper reloading.\nSOURCE: https://github.com/spec-first/connexion/blob/main/docs/quickstart.rst#2025-04-23_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nfrom pathlib import Path\n\napp.run(f\"{Path(__file__).stem}:app\")\n```\n\n----------------------------------------\n\nTITLE: Activating Pythonic Parameters in Connexion Middleware\nDESCRIPTION: Illustrates how to enable Pythonic parameters in Connexion Middleware, which converts camelCase to snake_case and handles Python builtin conflicts.\nSOURCE: https://github.com/spec-first/connexion/blob/main/docs/request.rst#2025-04-23_snippet_20\n\nLANGUAGE: python\nCODE:\n```\nfrom asgi_framework import App\nfrom connexion import ConnexionMiddleware\n\napp = App(__name__)\napp = ConnexionMiddleware(app, pythonic_params=True)\napp.add_api(\"openapi.yaml\", pythonic_params=True)\n```\n\n----------------------------------------\n\nTITLE: Configuring API Servers in OpenAPI 3\nDESCRIPTION: OpenAPI 3 example showing how to set base URL paths in the servers block of the specification. This demonstrates using both full URLs and relative paths for API versioning.\nSOURCE: https://github.com/spec-first/connexion/blob/main/docs/routing.rst#2025-04-23_snippet_19\n\nLANGUAGE: yaml\nCODE:\n```\nservers:\n  - url: https://{{HOST}}/1.0\n    description: full url example\n  - url: /1.0\n    description: relative path example\n\npaths:\n  ...\n```\n\n----------------------------------------\n\nTITLE: Implementing CORS with FlaskApp in Connexion\nDESCRIPTION: Demonstrates adding CORS middleware to a Connexion FlaskApp application with full CORS configuration allowing all origins, credentials, methods and headers.\nSOURCE: https://github.com/spec-first/connexion/blob/main/docs/cookbook.rst#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom pathlib import Path\n\nfrom connexion import FlaskApp\nfrom connexion.middleware import MiddlewarePosition\nfrom starlette.middleware.cors import CORSMiddleware\n\n\napp = FlaskApp(__name__)\n\napp.add_middleware(\n    CORSMiddleware,\n    position=MiddlewarePosition.BEFORE_EXCEPTION,\n    allow_origins=[\"*\"],\n    allow_credentials=True,\n    allow_methods=[\"*\"],\n    allow_headers=[\"*\"],\n)\n\napp.add_api(\"openapi.yaml\")\n\nif __name__ == \"__main__\":\n    app.run(f\"{Path(__file__).stem}:app\", port=8080)\n```\n\n----------------------------------------\n\nTITLE: Disabling Request Body Validation in Connexion\nDESCRIPTION: Shows how to disable request body validation in Connexion by passing an empty dictionary for the 'body' key in the validator_map.\nSOURCE: https://github.com/spec-first/connexion/blob/main/docs/validation.rst#2025-04-23_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nvalidator_map = {\n    \"body\": {}\n}\n```\n\n----------------------------------------\n\nTITLE: OpenAPI 3 Specification for Pythonic Parameters Example\nDESCRIPTION: OpenAPI 3 YAML specification showing parameter definitions that will be converted to Pythonic parameters when the feature is enabled.\nSOURCE: https://github.com/spec-first/connexion/blob/main/docs/request.rst#2025-04-23_snippet_21\n\nLANGUAGE: yaml\nCODE:\n```\npaths:\n  /foo:\n    get:\n      operationId: api.foo_get\n      parameters:\n        - name: filter\n          description: Some filter.\n          in: query\n          schema:\n            type: string\n          required: true\n        - name: FilterOption\n          description: Some filter option.\n          in: query\n          schema:\n            type: string\n```\n\n----------------------------------------\n\nTITLE: Swagger 2 Specification for Pythonic Parameters Example\nDESCRIPTION: Swagger 2 YAML specification demonstrating parameter definitions that will be converted to Pythonic parameters when the feature is enabled.\nSOURCE: https://github.com/spec-first/connexion/blob/main/docs/request.rst#2025-04-23_snippet_22\n\nLANGUAGE: yaml\nCODE:\n```\npaths:\n  /foo:\n    get:\n      operationId: api.foo_get\n      parameters:\n        - name: filter\n          description: Some filter.\n          in: query\n          type: string\n          required: true\n        - name: FilterOption\n          description: Some filter option.\n          in: query\n          type: string\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Validators for Different Media Types in Python\nDESCRIPTION: This snippet shows how to set up custom validators for different media types in Connexion. It defines a validator map that associates specific media types with their corresponding validator classes.\nSOURCE: https://github.com/spec-first/connexion/blob/main/docs/validation.rst#2025-04-23_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nvalidator_map = {\n    \"body\": MediaTypeDict(\n        {\n            \"*/*json\": DefaultsJSONRequestBodyValidator,\n            \"application/x-www-form-urlencoded\": FormDataValidator,\n            \"multipart/form-data\": MultiPartFormDataValidator,\n        }\n    ),\n}\n```\n\n----------------------------------------\n\nTITLE: Swagger UI Configuration\nDESCRIPTION: Example showing how to configure Swagger UI options in Connexion 3 using the new SwaggerUIOptions class.\nSOURCE: https://github.com/spec-first/connexion/blob/main/docs/v3.rst#2025-04-23_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nimport connexion\nfrom connexion.options import SwaggerUIOptions\n\nswagger_ui_options = SwaggerUIOptions(\n    swagger_ui=True,\n    swagger_ui_path=\"docs\",\n)\n\napp = connexion.FlaskApp(__name__, swagger_ui_options=swagger_ui_options)  # either\napp.add_api(\"openapi.yaml\", swagger_ui_options=swagger_ui_options)  # or\n```\n\n----------------------------------------\n\nTITLE: OpenAPI JSON Response with Modified Server URL\nDESCRIPTION: Sample JSON response from the OpenAPI endpoint showing how the servers.url is correctly set to the proxy path '/banana/openapi' based on the X-Forwarded-Path header.\nSOURCE: https://github.com/spec-first/connexion/blob/main/examples/reverseproxy/README.rst#2025-04-23_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n   \"servers\" : [\n      {\n         \"url\" : \"/banana/openapi\"\n      }\n   ],\n   \"paths\" : {\n      \"/hello\" : {\n         \"get\" : {\n            \"responses\" : {\n               \"200\" : {\n                  \"description\" : \"hello\",\n                  \"content\" : {\n                     \"text/plain\" : {\n                        \"schema\" : {\n                           \"type\" : \"string\"\n                        }\n                     }\n                  }\n               }\n            },\n            \"operationId\" : \"app.hello\",\n            \"summary\" : \"say hi\"\n         }\n      }\n   },\n   \"openapi\" : \"3.0.0\",\n   \"info\" : {\n      \"version\" : \"1.0\",\n      \"title\" : \"Path-Altering Reverse Proxy Example\"\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining BasePath in Swagger 2.0\nDESCRIPTION: Swagger 2.0 example showing how to define a basePath at the top level of the specification. This sets the base URL path for API versioning.\nSOURCE: https://github.com/spec-first/connexion/blob/main/docs/routing.rst#2025-04-23_snippet_20\n\nLANGUAGE: yaml\nCODE:\n```\nbasePath: /1.0\n\npaths:\n  ...\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom 'money' Format Validator in Python\nDESCRIPTION: This code demonstrates how to create a custom 'money' format validator using the jsonschema library. It defines a regular expression pattern for money format and registers a checker function with the Draft4Validator.\nSOURCE: https://github.com/spec-first/connexion/blob/main/docs/validation.rst#2025-04-23_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nimport re\nfrom jsonschema import Draft4Validator\n\nMONEY_RE = re.compile('^\\$\\s*\\d+(\\.\\d\\d)?')\n\n@Draft4Validator.FORMAT_CHECKER.checks('money')\ndef is_money(val):\n    if not isinstance(val, str):\n        return True\n    return MONEY_RE.match(val)\n```\n\n----------------------------------------\n\nTITLE: Defining Default Validators in Connexion\nDESCRIPTION: Shows the default validator map in Connexion, which defines validators for parameters, request bodies, and response bodies for different content types.\nSOURCE: https://github.com/spec-first/connexion/blob/main/docs/validation.rst#2025-04-23_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nVALIDATOR_MAP = {\n    \"parameter\": ParameterValidator,\n    \"body\": MediaTypeDict(\n        {\n            \"*/*json\": JSONRequestBodyValidator,\n            \"application/x-www-form-urlencoded\": FormDataValidator,\n            \"multipart/form-data\": MultiPartFormDataValidator,\n        }\n    ),\n    \"response\": MediaTypeDict(\n        {\n            \"*/*json\": JSONResponseBodyValidator,\n            \"text/plain\": TextResponseBodyValidator,\n        }\n    ),\n}\n```\n\n----------------------------------------\n\nTITLE: Problem Details Error Response\nDESCRIPTION: Example showing how to generate standardized problem detail responses using the connexion.problem module.\nSOURCE: https://github.com/spec-first/connexion/blob/main/docs/v3.rst#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom connexion.problem import problem\n\ndef not_found_handler(request: ConnexionRequest, exc: Exception) -> ConnexionResponse:\n    return problem(\n        title=http_facts.HTTP_STATUS_CODES.get(404),\n        detail=\"The resource was not found\",\n        status=404,\n    )\n```\n\n----------------------------------------\n\nTITLE: Configuring Swagger UI with FlaskApp in Python\nDESCRIPTION: This snippet shows how to configure the Swagger UI path for a FlaskApp in Connexion. It uses SwaggerUIOptions to set a custom path for the Swagger UI.\nSOURCE: https://github.com/spec-first/connexion/blob/main/docs/swagger_ui.rst#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom connexion import FlaskApp\nfrom connexion.options import SwaggerUIOptions\n\noptions = SwaggerUIOptions(swagger_ui_path=\"/docs\")\n\napp = FlaskApp(__name__, swagger_ui_options=options)\napp.add_api(\"openapi.yaml\", swagger_ui_options=options)\n```\n\n----------------------------------------\n\nTITLE: Customizing FlaskApp Middleware Stack\nDESCRIPTION: Demonstrates how to customize the default middleware stack for FlaskApp by removing the SecurityMiddleware.\nSOURCE: https://github.com/spec-first/connexion/blob/main/docs/middleware.rst#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom connexion import FlaskApp, ConnexionMiddleware\nfrom connexion.middleware.security import SecurityMiddleware\n\nmiddlewares = [middleware for middleware in ConnexionMiddleware.default_middlewares\n               if middleware is not SecurityMiddleware]\n\napp = FlaskApp(__name__, middlewares=middlewares)\n```\n\n----------------------------------------\n\nTITLE: Creating a Flask MethodView Handler for MethodViewResolver\nDESCRIPTION: Example of a Flask MethodView subclass that handles different HTTP operations for a resource.\nSOURCE: https://github.com/spec-first/connexion/blob/main/docs/routing.rst#2025-04-23_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nfrom flask.views import MethodView\n\n\nclass PetsView(MethodView):\n\n  def post(self, body: dict):\n    ...\n\n  def put(self, petId, body: dict):\n    ...\n\n  def delete(self, petId):\n    ...\n\n  def get(self, petId=None, limit=100):\n    ...\n```\n\n----------------------------------------\n\nTITLE: Testing OAuth2 Authentication with Curl\nDESCRIPTION: Curl commands for testing the API endpoints with and without authentication tokens to demonstrate OAuth2 authorization.\nSOURCE: https://github.com/spec-first/connexion/blob/main/examples/oauth2/README.rst#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ curl http://localhost:8080/openapi/secret   # missing authentication\n$ curl -H 'Authorization: Bearer 123' http://localhost:8080/openapi/secret\n$ curl -H 'Authorization: Bearer 456' http://localhost:8080/swagger/secret\n```\n\n----------------------------------------\n\nTITLE: Using x-openapi-router-controller for Relative Operation IDs\nDESCRIPTION: Demonstrates how to use x-openapi-router-controller to make operationId relative to a specific controller module.\nSOURCE: https://github.com/spec-first/connexion/blob/main/docs/routing.rst#2025-04-23_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\npaths:\n  /hello_world:\n    post:\n      x-openapi-router-controller: myapp.api\n      operationId: hello_world\n```\n\n----------------------------------------\n\nTITLE: Handling Multiple File Uploads in AsyncApp\nDESCRIPTION: Shows how to handle multiple file uploads in an AsyncApp, receiving them as a list of Starlette.UploadFile instances.\nSOURCE: https://github.com/spec-first/connexion/blob/main/docs/request.rst#2025-04-23_snippet_14\n\nLANGUAGE: python\nCODE:\n```\ndef foo_get(file)\n    assert isinstance(file, list)\n    assert isinstance(file[0], starlette.UploadFile)\n    ...\n```\n\n----------------------------------------\n\nTITLE: Handling File Upload in AsyncApp\nDESCRIPTION: Demonstrates how to handle file uploads in an AsyncApp using Starlette.UploadFile.\nSOURCE: https://github.com/spec-first/connexion/blob/main/docs/request.rst#2025-04-23_snippet_12\n\nLANGUAGE: python\nCODE:\n```\ndef foo_get(file)\n    assert isinstance(file, starlette.UploadFile)\n    ...\n```\n\n----------------------------------------\n\nTITLE: Running a Connexion App with the CLI\nDESCRIPTION: Basic command to run a Connexion application using the command-line interface. This allows testing and mocking your OpenAPI specification without additional code.\nSOURCE: https://github.com/spec-first/connexion/blob/main/README.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nconnexion run openapi.yaml\n```\n\n----------------------------------------\n\nTITLE: Registering Error Handlers with Flask Directly\nDESCRIPTION: Alternative approach for registering error handlers using the underlying Flask application directly. This method can intercept exceptions before they reach Connexion's error handlers but won't catch exceptions in middleware.\nSOURCE: https://github.com/spec-first/connexion/blob/main/docs/exceptions.rst#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nflask_app = app.app\nflask_app.register_error_handler(FileNotFoundError, not_found)\nflask_app.register_error_handler(404, not_found)\n```\n\n----------------------------------------\n\nTITLE: Parameter Name Sanitation in Connexion\nDESCRIPTION: Shows how Connexion sanitizes parameter names by removing non-alphanumeric characters and leading non-letter/non-underscore characters to create valid Python symbols.\nSOURCE: https://github.com/spec-first/connexion/blob/main/docs/request.rst#2025-04-23_snippet_17\n\nLANGUAGE: python\nCODE:\n```\n>>> re.sub('^[^a-zA-Z_]+', '', re.sub('[^0-9a-zA-Z_]', '', '$top'))\n'top'\n```\n\n----------------------------------------\n\nTITLE: RFC 7662 Token Information Structure\nDESCRIPTION: JSON structure that security validation functions should return, complying with RFC 7662. Contains fields like active status, client_id, username, scope, and other authentication metadata.\nSOURCE: https://github.com/spec-first/connexion/blob/main/docs/security.rst#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"active\": true,\n  \"client_id\": \"l238j323ds-23ij4\",\n  \"username\": \"jdoe\",\n  \"scope\": \"read write dolphin\",\n  \"sub\": \"Z5O3upPC88QrAjx00dis\",\n  \"aud\": \"https://protected.example.net/resource\",\n  \"iss\": \"https://server.example.com/\",\n  \"exp\": 1419356238,\n  \"iat\": 1419350238,\n  \"extension_field\": \"twenty-seven\"\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Root Path via Middleware in Connexion\nDESCRIPTION: Configures the Connexion application to recognize a reverse proxy path by wrapping the app with the ReverseProxied middleware.\nSOURCE: https://github.com/spec-first/connexion/blob/main/examples/reverseproxy/README.rst#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\napp = ReverseProxied(app, root_path=\"/reverse_proxied/\")\n```\n\n----------------------------------------\n\nTITLE: RuntimeError When Accessing Context Outside Request Flow\nDESCRIPTION: Shows the error message that occurs when trying to access context variables outside of the request handling flow or without using the ContextMiddleware.\nSOURCE: https://github.com/spec-first/connexion/blob/main/docs/context.rst#2025-04-23_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nRuntimeError: Working outside of operation context. Make sure your app is wrapped in a\nContextMiddleware and you're processing a request while accessing the context.\n```\n\n----------------------------------------\n\nTITLE: Implementing View Function for Form Data in Python\nDESCRIPTION: Defines a Python function that handles the POST request with form data, receiving individual form fields as parameters.\nSOURCE: https://github.com/spec-first/connexion/blob/main/docs/request.rst#2025-04-23_snippet_9\n\nLANGUAGE: python\nCODE:\n```\ndef foo_get(field1, field2)\n    ...\n```\n\n----------------------------------------\n\nTITLE: Configuring Nginx as a Reverse Proxy with X-Forwarded-Path\nDESCRIPTION: Configures an Nginx server block to forward requests to a Connexion application while setting the X-Forwarded-Path header to inform the application about the proxy path prefix.\nSOURCE: https://github.com/spec-first/connexion/blob/main/examples/reverseproxy/README.rst#2025-04-23_snippet_2\n\nLANGUAGE: nginx\nCODE:\n```\nlocation /proxied {\n    proxy_pass http://192.168.0.1:5001;\n    proxy_set_header Host $host;\n    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n    proxy_set_header X-Forwarded-Proto $scheme;\n    proxy_set_header X-Forwarded-Path /proxied;\n}\n```\n\n----------------------------------------\n\nTITLE: Running the Connexion Hello World Server\nDESCRIPTION: Command to launch the Connexion server with the Hello World example. This starts a local server that serves the API according to the OpenAPI specifications.\nSOURCE: https://github.com/spec-first/connexion/blob/main/examples/helloworld/README.rst#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ python hello.py\n```\n\n----------------------------------------\n\nTITLE: Implied Operation IDs with MethodResolver\nDESCRIPTION: Demonstrates the operation ID mapping pattern used by MethodResolver for class-based handlers.\nSOURCE: https://github.com/spec-first/connexion/blob/main/docs/routing.rst#2025-04-23_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\npaths:\n  /foo:\n  get:\n    # Implied operationId: api.FooView.search\n  post:\n    # Implied operationId: api.FooView.post\n  '/foo/{id}':\n  get:\n    # Implied operationId: api.FooView.get\n  put:\n    # Implied operationId: api.FooView.put\n  copy:\n    # Implied operationId: api.FooView.copy\n  delete:\n    # Implied operationId: api.FooView.delete\n```\n\n----------------------------------------\n\nTITLE: Testing API Endpoints with API Key Authentication\nDESCRIPTION: Demonstrates how to make authenticated requests to the secured endpoints using curl with the X-Auth header containing the API key.\nSOURCE: https://github.com/spec-first/connexion/blob/main/examples/apikey/README.rst#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ curl -H 'X-Auth: asdf1234567890' http://localhost:8080/openapi/secret\n$ curl -H 'X-Auth: asdf1234567890' http://localhost:8080/swagger/secret\n```\n\n----------------------------------------\n\nTITLE: Running the Connexion OAuth2 Example Application\nDESCRIPTION: Starts the Connexion application that demonstrates OAuth2 local validation.\nSOURCE: https://github.com/spec-first/connexion/blob/main/examples/oauth2_local_tokeninfo/README.rst#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ python app.py\n```\n\n----------------------------------------\n\nTITLE: Implied Operation IDs with MethodViewResolver\nDESCRIPTION: Demonstrates the operation ID mapping pattern used by MethodViewResolver for Flask MethodView classes.\nSOURCE: https://github.com/spec-first/connexion/blob/main/docs/routing.rst#2025-04-23_snippet_12\n\nLANGUAGE: yaml\nCODE:\n```\npaths:\n  /foo:\n  get:\n    # Implied operationId: api.FooView.get\n  post:\n    # Implied operationId: api.FooView.post\n  '/foo/{id}':\n  get:\n    # Implied operationId: api.FooView.get\n  put:\n    # Implied operationId: api.FooView.put\n  copy:\n    # Implied operationId: api.FooView.copy\n  delete:\n    # Implied operationId: api.FooView.delete\n```\n\n----------------------------------------\n\nTITLE: Running a Connexion Application with Gunicorn\nDESCRIPTION: Command for running a Connexion application with Gunicorn and Uvicorn workers, recommended for production environments. This configuration provides better process management and performance.\nSOURCE: https://github.com/spec-first/connexion/blob/main/docs/quickstart.rst#2025-04-23_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\n# assuming your application is defined as ``app`` in ``run.py``\n$ gunicorn -k uvicorn.workers.UvicornWorker run:app\n```\n\n----------------------------------------\n\nTITLE: Running Connexion Server with HTTP Basic Auth\nDESCRIPTION: Launches the Connexion application server by executing the app.py file, which starts the server with the HTTP Basic Authentication configured.\nSOURCE: https://github.com/spec-first/connexion/blob/main/examples/basicauth/README.rst#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ python app.py\n```\n\n----------------------------------------\n\nTITLE: Using Custom 'money' Format in OpenAPI Specification YAML\nDESCRIPTION: This YAML snippet shows how to use the custom 'money' format in an OpenAPI specification. It defines an object with a 'price_label' property that uses the custom 'money' format for validation.\nSOURCE: https://github.com/spec-first/connexion/blob/main/docs/validation.rst#2025-04-23_snippet_14\n\nLANGUAGE: yaml\nCODE:\n```\ntype: object\nproperties:\n  title:\n    type: string\n  price_label:\n    type: string\n    format: money\n```\n\n----------------------------------------\n\nTITLE: Installing Required Dependencies for JWT Authentication with Connexion\nDESCRIPTION: Commands to create a virtual environment and install Connexion with necessary extensions and other requirements for the JWT authentication example.\nSOURCE: https://github.com/spec-first/connexion/blob/main/examples/jwt/README.rst#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ python -m venv my-venv\n$ source my-venv/bin/activate\n$ pip install 'connexion[flask,swagger-ui,uvicorn]>=3.1.0'\n$ pip install -r requirements.txt\n```\n\n----------------------------------------\n\nTITLE: Running Connexion Server with Different Frameworks\nDESCRIPTION: Commands to launch the Connexion server using either Quart or Starlette frameworks. These commands start up the server on localhost port 8080, making the API specification available through Swagger UI.\nSOURCE: https://github.com/spec-first/connexion/blob/main/examples/frameworks/README.rst#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ python hello_quart.py\n$ python hello_starlette.py\n```\n\n----------------------------------------\n\nTITLE: Defining Path Parameters in OpenAPI 3\nDESCRIPTION: Shows how to define path parameters in an OpenAPI 3 specification.\nSOURCE: https://github.com/spec-first/connexion/blob/main/docs/routing.rst#2025-04-23_snippet_15\n\nLANGUAGE: yaml\nCODE:\n```\npaths:\n  /users/{id}:\n    parameters:\n      - in: path\n        name: id   # Note the name is the same as in the path\n        required: true\n        schema:\n          type: integer\n        description: The user ID\n```\n\n----------------------------------------\n\nTITLE: Running Connexion OAuth2 Server with Mock Token Service\nDESCRIPTION: Commands for starting the mock token verification service in the background and launching the main Connexion application.\nSOURCE: https://github.com/spec-first/connexion/blob/main/examples/oauth2/README.rst#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ python mock_tokeninfo.py &       # start mock in background\n$ python app.py\n```\n\n----------------------------------------\n\nTITLE: Setting Up a Connexion Development Environment\nDESCRIPTION: Commands to set up a Connexion development environment using Poetry and pre-commit hooks for code formatting and static analysis.\nSOURCE: https://github.com/spec-first/connexion/blob/main/README.md#2025-04-23_snippet_11\n\nLANGUAGE: shell\nCODE:\n```\npip install poetry\npoetry install --all-extras\npre-commit install\n```\n\n----------------------------------------\n\nTITLE: Configuring Single Path Prefix for Reverse Proxy\nDESCRIPTION: Command line examples showing how to configure a single known path prefix when running behind a reverse proxy using uvicorn or gunicorn servers.\nSOURCE: https://github.com/spec-first/connexion/blob/main/docs/cookbook.rst#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ uvicorn run:app --root-path <root_path>\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ gunicorn -k uvicorn.workers.UvicornWorker run:app --root-path <root_path>\n```\n\n----------------------------------------\n\nTITLE: Specifying Python-Jose Package with Cryptography Extension\nDESCRIPTION: A package requirement specification for python-jose with explicit cryptography support. This format is used in requirements.txt files for pip installations to ensure the package is installed with the cryptography extras.\nSOURCE: https://github.com/spec-first/connexion/blob/main/examples/jwt/requirements.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\npython-jose[cryptography]\n```\n\n----------------------------------------\n\nTITLE: Setting up Python Virtual Environment for Connexion\nDESCRIPTION: Commands to create a new Python virtual environment and install Connexion with Flask, Swagger UI, and Uvicorn dependencies. This prepares the environment for running the Hello World example.\nSOURCE: https://github.com/spec-first/connexion/blob/main/examples/helloworld/README.rst#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ python -m venv my-venv\n$ source my-venv/bin/activate\n$ pip install 'connexion[flask,swagger-ui,uvicorn]>=3.1.0'\n```\n\n----------------------------------------\n\nTITLE: Installing Connexion with Optional Dependencies\nDESCRIPTION: Commands to install Connexion with extras like Swagger UI or uvicorn support. Multiple extras can be combined in a single install command.\nSOURCE: https://github.com/spec-first/connexion/blob/main/README.md#2025-04-23_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n$ pip install connexion[swagger-ui]\n$ pip install connexion[swagger-ui,uvicorn]\n```\n\n----------------------------------------\n\nTITLE: Running the Connexion App Directly with Python\nDESCRIPTION: Command to run the Connexion application directly using Python, which will start the server with the configured reverse proxy settings.\nSOURCE: https://github.com/spec-first/connexion/blob/main/examples/reverseproxy/README.rst#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ python app.py\n```\n\n----------------------------------------\n\nTITLE: Setting up Virtual Environment and Installing Dependencies for Connexion\nDESCRIPTION: Commands to create a Python virtual environment and install Connexion with its dependencies. This prepares the environment for running framework examples by installing Connexion with Swagger UI and Uvicorn support.\nSOURCE: https://github.com/spec-first/connexion/blob/main/examples/frameworks/README.rst#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ python -m venv my-venv\n$ source my-venv/bin/activate\n$ pip install 'connexion[swagger-ui,uvicorn]>=3.1.0'\n$ pip install -r requirements.txt\n```\n\n----------------------------------------\n\nTITLE: Running the Connexion Server\nDESCRIPTION: Launches the Connexion server application that will serve the API with API key authentication.\nSOURCE: https://github.com/spec-first/connexion/blob/main/examples/apikey/README.rst#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ python app.py\n```\n\n----------------------------------------\n\nTITLE: Setting up Virtual Environment for Connexion OAuth2 Example\nDESCRIPTION: Commands for creating a Python virtual environment and installing Connexion with required dependencies for the OAuth2 example.\nSOURCE: https://github.com/spec-first/connexion/blob/main/examples/oauth2/README.rst#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ python -m venv my-venv\n$ source my-venv/bin/activate\n$ pip install 'connexion[flask,swagger-ui,uvicorn]>=3.1.0'\n```\n\n----------------------------------------\n\nTITLE: Viewing Connexion Run Command Help\nDESCRIPTION: Command to display the full list of available options for the Connexion run command, providing additional configuration possibilities beyond the basic usage.\nSOURCE: https://github.com/spec-first/connexion/blob/main/docs/cli.rst#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ connexion run --help\n```\n\n----------------------------------------\n\nTITLE: Running Connexion Server\nDESCRIPTION: Command to launch the Connexion server application that serves both OpenAPI 3 and Swagger 2 specifications.\nSOURCE: https://github.com/spec-first/connexion/blob/main/examples/sqlalchemy/README.rst#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ python app.py\n```\n\n----------------------------------------\n\nTITLE: Setting up Python Virtual Environment for Connexion\nDESCRIPTION: Creates a new Python virtual environment and installs Connexion with Flask, Swagger UI, and Uvicorn dependencies for API key authentication examples.\nSOURCE: https://github.com/spec-first/connexion/blob/main/examples/apikey/README.rst#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ python -m venv my-venv\n$ source my-venv/bin/activate\n$ pip install 'connexion[flask,swagger-ui,uvicorn]>=3.1.0'\n```\n\n----------------------------------------\n\nTITLE: Installing Connexion with Optional Extras\nDESCRIPTION: Commands for installing Connexion with optional extras to enable additional features like Flask compatibility, Swagger UI, or Uvicorn support. Multiple extras can be installed simultaneously.\nSOURCE: https://github.com/spec-first/connexion/blob/main/docs/quickstart.rst#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ pip install connexion[<extra>]\n$ pip install connexion[<extra1>,<extra2>].\n```\n\n----------------------------------------\n\nTITLE: Launching the Connexion Server\nDESCRIPTION: Command to start the Connexion application server that hosts the API with the custom validator. This runs the app.py file which configures and starts the server.\nSOURCE: https://github.com/spec-first/connexion/blob/main/examples/enforcedefaults/README.rst#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ python app.py\n```\n\n----------------------------------------\n\nTITLE: Installing Connexion with Swagger UI and Uvicorn\nDESCRIPTION: Commands to create a Python virtual environment and install Connexion with the Swagger UI and Uvicorn dependencies. This setup is required to run the custom validator example.\nSOURCE: https://github.com/spec-first/connexion/blob/main/examples/enforcedefaults/README.rst#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ python -m venv my-venv\n$ source my-venv/bin/activate\n$ pip install 'connexion[swagger-ui,uvicorn]>=3.1.0'\n```\n\n----------------------------------------\n\nTITLE: Running the JWT Authentication Example Application\nDESCRIPTION: Command to launch the Connexion server that serves the JWT authentication example application.\nSOURCE: https://github.com/spec-first/connexion/blob/main/examples/jwt/README.rst#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ python app.py\n```\n\n----------------------------------------\n\nTITLE: Setting up Python Virtual Environment and Installing Connexion\nDESCRIPTION: Creates a new Python virtual environment, activates it, and installs Connexion with Flask, Swagger UI, and uvicorn dependencies.\nSOURCE: https://github.com/spec-first/connexion/blob/main/examples/methodresolver/README.rst#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ python -m venv my-venv\n$ source my-venv/bin/activate\n$ pip install 'connexion[flask,swagger-ui,uvicorn]>=3.1.0'\n```\n\n----------------------------------------\n\nTITLE: Running Flask Application - Connexion 2 Style (Deprecated)\nDESCRIPTION: Example showing the old way of running a Connexion 2 application using Flask's run method or WSGI servers, which is no longer supported in Connexion 3.\nSOURCE: https://github.com/spec-first/connexion/blob/main/docs/v3.rst#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport connexion\n\napp = connexion.App(__name__)\nflask_app = app.app\n\nif __name__ == \"__main__\":\n    flask_app.run()\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ flask --app hello:flask_app\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ gunicorn hello:flask_app\n```\n\n----------------------------------------\n\nTITLE: Setting up Virtual Environment and Installing Dependencies for Connexion\nDESCRIPTION: Commands to create a new virtual environment, activate it, and install Connexion with Flask, Swagger UI, and Uvicorn support. This setup is required before running the RestyResolver example.\nSOURCE: https://github.com/spec-first/connexion/blob/main/examples/restyresolver/README.rst#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ python -m venv my-venv\n$ source my-venv/bin/activate\n$ pip install 'connexion[flask,swagger-ui,uvicorn]>=3.1.0'\n```\n\n----------------------------------------\n\nTITLE: Running the Connexion App with Uvicorn ASGI Server\nDESCRIPTION: Command to run the Connexion application using Uvicorn as the ASGI server, specifying the factory function to create the app instance and the port to use.\nSOURCE: https://github.com/spec-first/connexion/blob/main/examples/reverseproxy/README.rst#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n$ uvicorn --factory app:create_app --port 8080\n```\n\n----------------------------------------\n\nTITLE: Launching Connexion Server with RestyResolver\nDESCRIPTION: Command to start the Connexion server using the RestyResolver example. After running this command, the server will be accessible for viewing the Swagger UI.\nSOURCE: https://github.com/spec-first/connexion/blob/main/examples/restyresolver/README.rst#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ python resty.py\n```\n\n----------------------------------------\n\nTITLE: Defining Path Parameters in Swagger 2\nDESCRIPTION: Shows how to define path parameters in a Swagger 2 specification.\nSOURCE: https://github.com/spec-first/connexion/blob/main/docs/routing.rst#2025-04-23_snippet_16\n\nLANGUAGE: yaml\nCODE:\n```\npaths:\n  /users/{id}:\n```\n\n----------------------------------------\n\nTITLE: Running Connexion Server\nDESCRIPTION: Launches the Connexion server by executing the app.py Python script.\nSOURCE: https://github.com/spec-first/connexion/blob/main/examples/methodresolver/README.rst#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ python app.py\n```\n\n----------------------------------------\n\nTITLE: Error Handler Configuration - Connexion 2 Style\nDESCRIPTION: Example showing error handler configuration in Connexion 2, where handlers could be registered on either the Connexion or Flask app.\nSOURCE: https://github.com/spec-first/connexion/blob/main/docs/v3.rst#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport connexion\n\ndef not_found_handler(exc: Exception) -> flask.Response:\n    ...\n\napp = connexion.App(__name__)\nflask_app = app.app\n\napp.add_error_handler(404, not_found_handler)  # either\nflask_app.register_error_handler(404, not_found_handler)  # or\n```\n\n----------------------------------------\n\nTITLE: Installing Connexion with pip\nDESCRIPTION: Basic installation command for Connexion using pip package manager. Connexion can be installed with just the core functionality or with optional extras.\nSOURCE: https://github.com/spec-first/connexion/blob/main/docs/quickstart.rst#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ pip install connexion\n```\n\n----------------------------------------\n\nTITLE: Testing X-Forwarded-Path with cURL\nDESCRIPTION: A cURL command demonstrating how to test the X-Forwarded-Path header by requesting the OpenAPI specification with a custom proxy path '/banana/'.\nSOURCE: https://github.com/spec-first/connexion/blob/main/examples/reverseproxy/README.rst#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ncurl -H \"X-Forwarded-Path: /banana/\" http://localhost:8080/openapi/openapi.json\n```\n\n----------------------------------------\n\nTITLE: Installing Connexion with pip\nDESCRIPTION: Command to install the Connexion framework using pip. This installs the base package without optional dependencies.\nSOURCE: https://github.com/spec-first/connexion/blob/main/README.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ pip install connexion\n```\n\n----------------------------------------\n\nTITLE: Running the Connexion Hello World Server\nDESCRIPTION: Command to launch the Connexion server using the hello.py script. This starts the server locally, making it accessible at http://localhost:8080.\nSOURCE: https://github.com/spec-first/connexion/blob/main/examples/helloworld_async/README.rst#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ python hello.py\n```\n\n----------------------------------------\n\nTITLE: Specifying SQLAlchemy Dependency Version Requirement for Connexion\nDESCRIPTION: Defines the minimum required version of SQLAlchemy (1.0.13 or higher) for the Connexion project. This dependency specification would typically be included in a requirements file.\nSOURCE: https://github.com/spec-first/connexion/blob/main/examples/sqlalchemy/requirements.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nSQLAlchemy>=1.0.13\n```\n\n----------------------------------------\n\nTITLE: Installing Connexion Dependencies\nDESCRIPTION: Sets up a Python virtual environment and installs Connexion with Flask, Swagger UI, and Uvicorn dependencies.\nSOURCE: https://github.com/spec-first/connexion/blob/main/examples/splitspecs/README.rst#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ python -m venv my-venv\n$ source my-venv/bin/activate\n$ pip install 'connexion[flask,swagger-ui,uvicorn]>=3.1.0'\n```\n\n----------------------------------------\n\nTITLE: Setting up Virtual Environment and Installing Dependencies for Connexion\nDESCRIPTION: Creates a new Python virtual environment and installs the required Connexion libraries with Flask, Swagger UI, and Uvicorn support.\nSOURCE: https://github.com/spec-first/connexion/blob/main/examples/oauth2_local_tokeninfo/README.rst#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ python -m venv my-venv\n$ source my-venv/bin/activate\n$ pip install 'connexion[flask,swagger-ui,uvicorn]>=3.1.0'\n```\n\n----------------------------------------\n\nTITLE: Installing Connexion Dependencies\nDESCRIPTION: Commands to create a virtual environment and install required Connexion packages with SQLAlchemy dependencies.\nSOURCE: https://github.com/spec-first/connexion/blob/main/examples/sqlalchemy/README.rst#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ python -m venv my-venv\n$ source my-venv/bin/activate\n$ pip install 'connexion[flask,swagger-ui,uvicorn]>=3.1.0'\n$ pip install -r requirements.txt\n```\n\n----------------------------------------\n\nTITLE: Importing Connexion Request Object\nDESCRIPTION: Shows how to import the Connexion Request class to access information about the incoming request.\nSOURCE: https://github.com/spec-first/connexion/blob/main/docs/request.rst#2025-04-23_snippet_26\n\nLANGUAGE: python\nCODE:\n```\nfrom connexion import request\n```\n\n----------------------------------------\n\nTITLE: Setting Root Path via ASGI Server (Uvicorn)\nDESCRIPTION: Sets the root path directly in the ASGI server configuration when running the application, which allows the app to understand requests coming through a reverse proxy path.\nSOURCE: https://github.com/spec-first/connexion/blob/main/examples/reverseproxy/README.rst#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nuvicorn ... --root_path=\"/reverse_proxied/\"\n```"
  }
]