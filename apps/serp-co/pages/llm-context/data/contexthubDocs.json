[
  {
    "owner": "context-hub",
    "repo": "docs",
    "content": "TITLE: Domain Class Hierarchies Design Template\nDESCRIPTION: Template for designing PHP 8.3 domain class hierarchies with focus on modularity, maintainability, and clear documentation of design decisions.\nSOURCE: https://github.com/context-hub/docs/blob/main/docs/advanced/instructions.md#2025-04-20_snippet_6\n\nLANGUAGE: markdown\nCODE:\n```\nYou are an expert in designing domain class hierarchies with a specialization in creating efficient structures for managing **[insert topic here]**. Your approach incorporates the following guidelines:\n\n- Use **PHP 8.3** features, including Constructor property promotion and named arguments, but avoid using annotations.\n- Be **creative** in your approach while maintaining a focus on clarity, maintainability, and scalability of the class structures.\n```\n\n----------------------------------------\n\nTITLE: Initializing CTX Configuration\nDESCRIPTION: Command to create a new CTX configuration file in the project directory\nSOURCE: https://github.com/context-hub/docs/blob/main/docs/quick-start.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nctx init\n```\n\n----------------------------------------\n\nTITLE: Defining CTX Prompts Configuration\nDESCRIPTION: YAML configuration for defining structured prompts for LLM interactions\nSOURCE: https://github.com/context-hub/docs/blob/main/docs/quick-start.md#2025-04-20_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nprompts:\n  - id: generate-controller\n    description: \"Generate a controller for an entity\"\n    schema:\n      properties:\n        entityName:\n          description: \"Name of the entity (e.g. User, Product)\"\n      required:\n        - entityName\n    messages:\n      - role: user\n        content: \"You are a PHP code generator specializing in Symfony controllers.\"\n      - role: assistant\n        content: \"I'll help you generate a controller for your entity. Please provide the entity name.\"\n      - role: user\n        content: \"Generate a controller for the {{entityName}} entity.\"\n```\n\n----------------------------------------\n\nTITLE: Domain Class Design Prompt for System Architecture\nDESCRIPTION: A prompt for designing domain class hierarchies, focusing on entity relationships, PHP 8.3 features, and collaborative refinement of the architecture for complex systems.\nSOURCE: https://github.com/context-hub/docs/blob/main/docs/advanced/instructions.md#2025-04-20_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n**You are an expert in domain class hierarchy design**, specializing in creating efficient and scalable structures for \ncomplex systems. Your task is to design a domain that accurately reflects the relationships between entities while \nmaintaining high performance and flexibility.\n\n1. **Identify Participants for Collaboration:**\n   - Start by identifying the key participants who will contribute to solving this task (e.g., AI prompt engineer, \n     PHP developer, business analyst).\n   - Ensure that these participants will provide critical comments and detailed suggestions whenever necessary.\n\n2. **Initiate a Multi-Round Collaboration Process:**\n   - Begin the design process with an initial proposal.\n   - Collaborate with the identified participants across several rounds of refinement, where each participant can offer \n     feedback, identify issues, and suggest improvements until a final solution is reached.\n\n3. **Identify Key Entities:**\n   - Identify the core entities (e.g., users, products, orders) relevant to the system.\n   - Each entity should be represented as a class, encapsulating its properties and behaviors.\n\n4. **Use PHP 8.3 Features:**\n   - Utilize **Constructor Property Promotion** to streamline class constructors and reduce redundancy.\n   - Apply **Named Arguments** to make class instantiation clearer and more maintainable.\n\n5. **Establish Relationships:**\n   - Clearly define relationships between entities (e.g., one-to-many, many-to-many, or inheritance).\n   - Use **value objects** (e.g., `Money`, `Address`) to represent small, reusable data structures.\n   - Opt for **composition** over inheritance where flexibility is more appropriate.\n\n6. **Link Tables and Database Structure:**\n   - Properly link tables in the database to reflect the relationships between domain entities (e.g., foreign keys).\n   - For many-to-many relationships, use **pivot tables** to manage the relationships.\n\n7. **Leverage Existing Code:**\n   - Reuse classes and code from your knowledge base when possible, avoiding unnecessary rewrites.\n   - Modify only the necessary parts, and provide comments to explain the rationale for changes.\n\n8. **Iterate for Improvement:**\n   - Refine the design across multiple rounds, ensuring that the participants' feedback is addressed.\n   - Justify each design decision to ensure scalability, maintainability, and optimal performance for the long term.\n```\n\n----------------------------------------\n\nTITLE: Running Context Generator\nDESCRIPTION: This simple command runs Context Generator after installation. It generates context based on the current directory or specified parameters.\nSOURCE: https://github.com/context-hub/docs/blob/main/docs/getting-started.md#2025-04-20_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nctx\n```\n\n----------------------------------------\n\nTITLE: Configuring a ContextHub Document with Multiple Sources in YAML\nDESCRIPTION: A complete example of a document configuration in YAML format that includes text, file, GitHub repository, and Git diff sources. It demonstrates how to structure a document with various content providers to generate comprehensive API documentation.\nSOURCE: https://github.com/context-hub/docs/blob/main/docs/documents.md#2025-04-20_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ndocuments:\n  - description: \"API Documentation for User Management\"\n    outputPath: \"docs/user-api.md\"\n    overwrite: true\n    tags:\n      - api\n      - users\n      - documentation\n    sources:\n      - type: text\n        description: \"Documentation Header\"\n        content: |\n          # User Management API\n\n          This document provides comprehensive documentation for the User Management API.\n          It includes controllers, models, and related components.\n\n      - type: file\n        description: \"User Controllers\"\n        sourcePaths:\n          - src/Controller/User\n        filePattern: \"*.php\"\n        showTreeView: true\n        modifiers:\n          - php-signature\n\n      - type: github\n        description: \"Authentication Library\"\n        repository: \"acme/auth-library\"\n        sourcePaths:\n          - src/Auth\n        branch: \"main\"\n        filePattern: \"*.php\"\n        githubToken: \"${GITHUB_TOKEN}\"\n\n      - type: git_diff\n        description: \"Recent User API Changes\"\n        commit: \"last-week\"\n        path: \"src/User\"\n        filePattern: \"*.php\"\n        showStats: true\n```\n\n----------------------------------------\n\nTITLE: Tracing Feature Workflow with CTX\nDESCRIPTION: This configuration helps understand how data flows through related components for a specific feature.\nSOURCE: https://github.com/context-hub/docs/blob/main/docs/advanced/development-process.md#2025-04-20_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\ndocuments:\n  - description: \"Feature Workflow\"\n    outputPath: \"feature-workflow.md\"\n    sources:\n      - type: file\n        sourcePaths: [ \"src\" ]\n        contains: [ \"processData\", \"handleRequest\" ]\n        filePattern: \"*.php\"\n      - type: file\n        sourcePaths: [ \"src\" ]\n        path: [ \"Controller\", \"Service\" ]\n        filePattern: \"*.php\"\n```\n\n----------------------------------------\n\nTITLE: Configuring MCP Server Connection\nDESCRIPTION: JSON configuration for connecting CTX to Claude AI via MCP server\nSOURCE: https://github.com/context-hub/docs/blob/main/docs/quick-start.md#2025-04-20_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"mcpServers\": {\n    \"ctx\": {\n      \"command\": \"ctx server -c /path/to/your/project\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Context-Hub Configuration in JSON Format\nDESCRIPTION: JSON configuration example for the context-hub generator. This shows the equivalent configuration to the YAML example, but using JSON syntax. It defines the same document structure with text, file, and URL sources.\nSOURCE: https://github.com/context-hub/docs/blob/main/docs/getting-started/configuration.md#2025-04-20_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"$schema\": \"https://raw.githubusercontent.com/context-hub/generator/refs/heads/main/json-schema.json\",\n  \"documents\": [\n    {\n      \"description\": \"API Documentation\",\n      \"outputPath\": \"docs/api.md\",\n      \"overwrite\": true,\n      \"tags\": [\n        \"api\",\n        \"documentation\",\n        \"v1\"\n      ],\n      \"sources\": [\n        {\n          \"type\": \"text\",\n          \"description\": \"API Documentation Header\",\n          \"content\": \"# API Documentation\\n\\nThis document contains the API source code.\"\n        },\n        {\n          \"type\": \"file\",\n          \"description\": \"API Controllers\",\n          \"sourcePaths\": [\n            \"src/Controller\"\n          ],\n          \"filePattern\": \"*.php\",\n          \"tags\": [\n            \"controllers\",\n            \"php\"\n          ]\n        },\n        {\n          \"type\": \"url\",\n          \"description\": \"API Reference\",\n          \"urls\": [\n            \"https://api.example.com/docs\"\n          ],\n          \"tags\": [\n            \"reference\",\n            \"external\"\n          ]\n        }\n      ]\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Basic CTX YAML Configuration\nDESCRIPTION: Example YAML configuration for defining document sources and output paths for authentication-related files\nSOURCE: https://github.com/context-hub/docs/blob/main/docs/quick-start.md#2025-04-20_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\ndocuments:\n  - description: \"User Authentication System\"\n    outputPath: \"auth-context.md\"\n    sources:\n      - type: file\n        description: \"Authentication Controllers\"\n        sourcePaths:\n          - src/Auth\n        filePattern: \"*.php\"\n\n      - type: file\n        description: \"Authentication Models\"\n        sourcePaths:\n          - src/Models\n        filePattern: \"*User*.php\"\n```\n\n----------------------------------------\n\nTITLE: Generating Project Structure Overview with CTX\nDESCRIPTION: This YAML configuration creates a high-level map of the project structure, helping to quickly identify main components.\nSOURCE: https://github.com/context-hub/docs/blob/main/docs/advanced/development-process.md#2025-04-20_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ndocuments:\n  - description: \"Project Structure Overview\"\n    outputPath: \"project-structure.md\"\n    sources:\n      - type: tree\n        description: \"Source Code Structure\"\n        sourcePaths: [ \"src\" ]\n        maxDepth: 3\n        showSize: true\n```\n\n----------------------------------------\n\nTITLE: Setting Up CTX Development Environment\nDESCRIPTION: Commands for cloning the repository, installing dependencies, and setting up the local development environment for CTX\nSOURCE: https://github.com/context-hub/docs/blob/main/docs/contributing.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# Fork and clone the repository\ngit clone https://github.com/YOUR-USERNAME/context-generator.git\ncd context-generator\n\n# Install dependencies\ncomposer install\n\n# Make the CLI tool available locally\nchmod +x context-generator\n\n# Test the command\n./context-generator --help\n```\n\n----------------------------------------\n\nTITLE: Custom Tools Configuration in CTX\nDESCRIPTION: YAML configuration for defining custom tools that can be executed by the LLM\nSOURCE: https://github.com/context-hub/docs/blob/main/docs/quick-start.md#2025-04-20_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\ntools:\n  - id: cs-fixer\n    description: 'Fix code style issues'\n    schema:\n      type: object\n      properties:\n        dry-run:\n          type: boolean\n          description: \"Don't make changes\"\n          default: false\n    commands:\n      - cmd: composer\n        args:\n          - cs:fix\n          - \"{{path}}\"\n          - name: --dry-run\n            when: \"{{dry-run}}\"\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Variables in YAML Configuration\nDESCRIPTION: Demonstrates how to define basic custom variables in a CTX configuration file with various types of values.\nSOURCE: https://github.com/context-hub/docs/blob/main/docs/getting-started/variables.md#2025-04-20_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nvariables:\n  version: 1.0.0\n  environment: development\n  project_name: Context Generator\n  api_token: qwd-qwe123-1231\n```\n\n----------------------------------------\n\nTITLE: Identifying Core Interfaces and Classes with CTX\nDESCRIPTION: This configuration extracts interfaces and abstract classes to reveal the system design and component relationships.\nSOURCE: https://github.com/context-hub/docs/blob/main/docs/advanced/development-process.md#2025-04-20_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\ndocuments:\n  - description: \"Core Interfaces and Base Classes\"\n    outputPath: \"core-architecture.md\"\n    sources:\n      - type: file\n        sourcePaths: [ \"src\" ]\n        filePattern: \"*Interface.php\"\n      - type: file\n        sourcePaths: [ \"src\" ]\n        filePattern: \"Abstract*.php\"\n```\n\n----------------------------------------\n\nTITLE: Configuring URL Imports with Advanced Options in YAML\nDESCRIPTION: YAML configuration for URL imports with additional options like cache TTL and custom HTTP headers. This is useful for importing remote configurations with authentication requirements or caching preferences.\nSOURCE: https://github.com/context-hub/docs/blob/main/docs/getting-started/configuration.md#2025-04-20_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\nimport:\n  - type: url\n    url: https://example.com/shared-config.json\n    ttl: 600  # Cache time-to-live in seconds (default: 300)\n    headers: # Optional HTTP headers for the request\n      Authorization: \"Bearer {{TOKEN}}\"\n      Accept: \"application/json\"\n```\n\n----------------------------------------\n\nTITLE: Defining Schema Configuration in YAML for Context-Hub\nDESCRIPTION: Demonstrates how to define a schema for tool arguments using JSON Schema. It includes properties for a component name and type, with type having a default value and name being a required property.\nSOURCE: https://github.com/context-hub/docs/blob/main/docs/mcp/custom-tools.md#2025-04-20_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\nschema:\n  type: object\n  properties:\n    name:\n      type: string\n      description: \"Component name\"\n    type:\n      type: string\n      description: \"Component type\"\n      default: \"functional\"\n  required: [ name ]\n```\n\n----------------------------------------\n\nTITLE: Visualizing AI Development Process Flow with Mermaid\nDESCRIPTION: A flowchart diagram illustrating the steps of the AI development process, from idea conception to feature implementation and testing.\nSOURCE: https://github.com/context-hub/docs/blob/main/docs/advanced/development-steps.md#2025-04-20_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\nflowchart TD\n    A[Idea Stage: Come up with what you want to build]\n    B[Feature Request: Write detailed FR with file structure, classes, and connections]\n    C[Plan: Ask AI for a step-by-step implementation plan]\n    D1[Iteration 1: Prepare initial context: existing code, details]\n    D2[Iteration 1: Ask AI for interfaces & DTOs]\n    D3[Iteration 1: Save new files in project]\n    D4[Iteration 1: Refactor code: fix namespaces, split into services]\n    decision1{Need more iterations?}\n    E1[Iteration: Update context with new files and remove unneeded parts]\n    E2[Iteration: Ask AI for new classes & services]\n    E3[Iteration: Refactor code as needed]\n    decision2{Code complete and working?}\n    decisionCommit{Need commit text?}\n    F1[Final Iteration: Ask AI for commit message & PR text]\n    F2[Final Iteration: Final refactoring: namespaces, services]\n    F3[Final Iteration: Write tests]\n    decisionFeature{Need resulting feature outlines?}\n    G1[Generate resulting feature outlines]\n    End[End Process]\n\n    A --> B\n    B --> C\n    C --> D1\n    D1 --> D2\n    D2 --> D3\n    D3 --> D4\n    D4 --> decision1\n    decision1 -- Yes --> E1\n    E1 --> E2\n    E2 --> E3\n    E3 --> decision2\n    decision2 -- No --> E1\n    decision2 -- Yes --> decisionCommit\n    decisionCommit -- Yes --> F1\n    decisionCommit -- No --> F2\n    F1 --> F2\n    F2 --> F3\n    F3 --> decisionFeature\n    decisionFeature -- Yes --> G1\n    decisionFeature -- No --> End\n    G1 --> End\n```\n\n----------------------------------------\n\nTITLE: Defining Environment Variables in YAML for Context-Hub Tools\nDESCRIPTION: Demonstrates how to define environment variables for tools. The example shows both referencing system environment variables and tool arguments in the configuration.\nSOURCE: https://github.com/context-hub/docs/blob/main/docs/mcp/custom-tools.md#2025-04-20_snippet_12\n\nLANGUAGE: yaml\nCODE:\n```\nenv:\n  DB_CONNECTION: \"{{env}}\"\n  API_TOKEN: \"${API_SECRET}\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Content-Based Exclusion in YAML\nDESCRIPTION: This snippet demonstrates how to exclude files based on their content from a GitHub repository using YAML configuration.\nSOURCE: https://github.com/context-hub/docs/blob/main/docs/sources/github-source.md#2025-04-20_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\ndocuments:\n  - description: Non-Deprecated Classes\n    outputPath: docs/non-deprecated.md\n    sources:\n      - type: github\n        description: Non-Deprecated Classes\n        repository: owner/repo\n        sourcePaths:\n          - src\n        notContains: @deprecated\n        filePattern: \"*.php\"\n        showTreeView: true\n```\n\n----------------------------------------\n\nTITLE: Configuring Explicit Type Imports in YAML\nDESCRIPTION: YAML configuration for imports with explicit type specification. This demonstrates importing from both local files and remote URLs with additional parameters like path prefixes.\nSOURCE: https://github.com/context-hub/docs/blob/main/docs/getting-started/configuration.md#2025-04-20_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nimport:\n  - type: file\n    path: services/api/context.yaml\n    pathPrefix: /api\n  - type: url\n    url: https://example.com/shared-config.json\n```\n\n----------------------------------------\n\nTITLE: Generating Project Tree Structure with ctx Command\nDESCRIPTION: A bash command using ctx to generate a project tree structure, providing an overview of the project's file organization.\nSOURCE: https://github.com/context-hub/docs/blob/main/docs/advanced/development-steps.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nctx --inline='{\n  \"documents\": [{\n    \"description\": \"Project Structure Overview\",\n    \"outputPath\": \"project-structure.md\",\n    \"sources\": [{\n      \"type\": \"tree\",\n      \"sourcePaths\": [\"src\"],\n      \"maxDepth\": 3,\n      \"showSize\": true,\n      \"showCharCount\": true\n    }]\n  }]\n}'\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic MCP Source in YAML\nDESCRIPTION: A basic configuration example showing how to set up an MCP source to retrieve content from a GitHub issue. This demonstrates the essential parameters required for an MCP source including type, description, server, and operation configuration.\nSOURCE: https://github.com/context-hub/docs/blob/main/docs/sources/mcp-source.md#2025-04-20_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ndocuments:\n  - description: \"MCP Source Example\"\n    outputPath: \"docs/mcp-example.md\"\n    sources:\n      - type: mcp\n        description: \"GitHub Issue\"\n        server: github\n        operation:\n          type: tool.call\n          name: get_issue\n          arguments:\n            owner: context-hub\n            repo: generator\n            issue_number: 158\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic Tree Source in YAML\nDESCRIPTION: Basic configuration example for the Tree source feature showing how to set up file pattern filtering, path exclusion, and output formatting. This snippet demonstrates the core configuration parameters for visualizing a directory structure.\nSOURCE: https://github.com/context-hub/docs/blob/main/docs/sources/tree-source.md#2025-04-20_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ndocuments:\n  - description: Project File Structure\n    outputPath: docs/file-structure.md\n    sources:\n      - type: tree\n        description: Project File Structure\n        sourcePaths:\n          - src\n        filePattern: \"*.php\"\n        notPath:\n          - tests\n          - vendor\n        renderFormat: ascii\n        maxDepth: 3\n        includeFiles: true\n        showSize: true\n```\n\n----------------------------------------\n\nTITLE: Configuring MCP Server for Linux\nDESCRIPTION: JSON configuration for registering the CTX MCP server on Linux systems. This setup allows Claude to communicate with the MCP server to access project context.\nSOURCE: https://github.com/context-hub/docs/blob/main/docs/mcp/index.md#2025-04-20_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"mcpServers\": {\n    \"ctx\": {\n      \"command\": \"ctx\",\n      \"args\": [\n        \"server\",\n        \"-c\",\n        \"/path/to/project\"\n      ]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Context-Hub Configuration in YAML Format\nDESCRIPTION: YAML configuration example for the context-hub generator. This demonstrates how to define documents with various sources including text, files, and URLs. The configuration includes document metadata like description, output path, and tags.\nSOURCE: https://github.com/context-hub/docs/blob/main/docs/getting-started/configuration.md#2025-04-20_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n$schema: https://raw.githubusercontent.com/context-hub/generator/refs/heads/main/json-schema.json\n\ndocuments:\n  - description: API Documentation\n    outputPath: docs/api.md\n    overwrite: true\n    tags:\n      - api\n      - documentation\n      - v1\n    sources:\n      - type: text\n        description: API Documentation Header\n        content: |\n          # API Documentation\n\n          This document contains the API source code.\n      - type: file\n        description: API Controllers\n        sourcePaths:\n          - src/Controller\n        filePattern: \"*.php\"\n        tags:\n          - controllers\n          - php\n      - type: url\n        description: API Reference\n        urls:\n          - https://api.example.com/docs\n        tags:\n          - reference\n          - external\n```\n\n----------------------------------------\n\nTITLE: Configuring a Text Source in YAML\nDESCRIPTION: Example of a text source configuration in a ContextHub document. Text sources add custom text directly to the document and are useful for headers, introductions, and notes.\nSOURCE: https://github.com/context-hub/docs/blob/main/docs/documents.md#2025-04-20_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n- type: text\n  description: \"Documentation Header\"\n  content: |\n    # User Management API\n    ...\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic Git Diff Source in YAML\nDESCRIPTION: Basic configuration example showing how to set up Git diff source to capture recent changes in PHP files, excluding tests and vendor directories.\nSOURCE: https://github.com/context-hub/docs/blob/main/docs/sources/git-diff-source.md#2025-04-20_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ndocuments:\n  - description: Recent Git Changes\n    outputPath: docs/recent-changes.md\n    sources:\n      - type: git_diff\n        description: Recent Git Changes\n        commit: last\n        filePattern: \"*.php\"\n        notPath:\n          - tests\n          - vendor\n        path: src\n        contains: class\n        notContains: @deprecated\n        render:\n          strategy: llm\n          showStats: true\n          showLineNumbers: true\n          contextLines: 5\n```\n\n----------------------------------------\n\nTITLE: Configuring VS Code for CTX Schema Integration\nDESCRIPTION: Illustrates the JSON configuration needed in VS Code's settings.json file to associate the CTX JSON schema with context.json and context.yaml files.\nSOURCE: https://github.com/context-hub/docs/blob/main/docs/getting-started/ide-integration.md#2025-04-20_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"json.schemas\": [\n    {\n      \"fileMatch\": [\n        \"context.json\",\n        \"context.yaml\"\n      ],\n      \"url\": \"https://raw.githubusercontent.com/context-hub/generator/refs/heads/main/json-schema.json\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: README Generator Prompt for Documentation\nDESCRIPTION: A prompt for creating detailed GitHub README files that includes guidelines for structure, content, and formatting, emphasizing clear documentation with usage examples.\nSOURCE: https://github.com/context-hub/docs/blob/main/docs/advanced/instructions.md#2025-04-20_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\nYou are an expert in creating detailed and effective GitHub README files. Your passion lies in crafting clear, concise\ndocumentation with comprehensive examples of usage, focusing on every detail and feature.\n\n**Your tasks:**\n\n1. **Create a complete and valid README.md file** that includes all essential sections: Project Overview, Setup, Usage,\n   Configuration, Contribution Guidelines, and License.\n2. **Provide clear and precise descriptions for all parameters** used in the project, making sure they are easy to\n   understand.\n3. **Use PHP 8.3**, implementing Constructor property promotion and named arguments. Avoid using annotations.\n\n**Structure:**\n\n- **Title and Project Description:** A brief overview of what the project does, its purpose, and its key features.\n- **Class diagram**: A mermaid class diagram for the SDK that illustrates the key components and their relationships.\n- **Installation:** Step-by-step instructions on how to set up the project, including any prerequisites.\n- **Usage:** Examples of how to use the project, with code snippets demonstrating common use cases.\n- **Configuration:** Detailed descriptions of available configuration options, including defaults and examples.\n- **Contribution Guidelines:** Instructions for contributing to the project, including coding standards and how to\n  submit issues or pull requests.\n- **License:** The license under which the project is distributed.\n\n**Instructions:**\n\n- Write the README in a straightforward, direct language.\n- Avoid unnecessary adjectives and abstract terms to ensure clarity.\n- Focus on helping users quickly understand and work with the project.\n- Use B1 language\n- Level down to informal\n```\n\n----------------------------------------\n\nTITLE: Configuring a File Source in YAML\nDESCRIPTION: Example of a file source configuration that includes local files in a ContextHub document. File sources allow you to include code from local files with specific patterns and apply transformations through modifiers.\nSOURCE: https://github.com/context-hub/docs/blob/main/docs/documents.md#2025-04-20_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n- type: file\n  description: \"User Controllers\"\n  sourcePaths:\n    - src/Controller/User\n  filePattern: \"*.php\"\n  showTreeView: true\n  modifiers:\n    - php-signature\n```\n\n----------------------------------------\n\nTITLE: Configuring PHP Content Filter in YAML\nDESCRIPTION: This YAML snippet demonstrates how to configure the PHP content filter modifier in a documentation generation project. It shows how to set various options like method visibility, method exclusion, and method body handling.\nSOURCE: https://github.com/context-hub/docs/blob/main/docs/modifiers/php-content-filter.md#2025-04-20_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ndocuments:\n  - description: API Documentation\n    outputPath: docs/api.md\n    sources:\n      - type: file\n        description: API Source Files\n        sourcePaths:\n          - src/Api\n        filePattern: \"*.php\"\n        modifiers:\n          - name: php-content-filter\n            options:\n              method_visibility:\n                - public\n              exclude_methods:\n                - __construct\n              keep_method_bodies: false\n```\n\n----------------------------------------\n\nTITLE: JSON Schema Configuration\nDESCRIPTION: YAML configuration showing how to enable JSON schema for IDE autocompletion\nSOURCE: https://github.com/context-hub/docs/blob/main/docs/quick-start.md#2025-04-20_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\n$schema: 'https://raw.githubusercontent.com/context-hub/generator/refs/heads/main/json-schema.json'\ndocuments:\n  ...\n```\n\n----------------------------------------\n\nTITLE: Configuring Content-Based Filtering in YAML\nDESCRIPTION: This snippet shows how to include files based on their content from a GitHub repository using YAML configuration.\nSOURCE: https://github.com/context-hub/docs/blob/main/docs/sources/github-source.md#2025-04-20_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\ndocuments:\n  - description: Repository Classes\n    outputPath: docs/repositories.md\n    sources:\n      - type: github\n        description: Repository Classes\n        repository: owner/repo\n        sourcePaths:\n          - src\n        contains: class Repository\n        filePattern: \"*.php\"\n        showTreeView: true\n```\n\n----------------------------------------\n\nTITLE: Basic Composer Source Configuration in YAML\nDESCRIPTION: Example configuration to include source code from Composer dependencies. This snippet demonstrates the basic parameters including package selection and file filtering.\nSOURCE: https://github.com/context-hub/docs/blob/main/docs/sources/composer-source.md#2025-04-20_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ndocuments:\n  - description: Core Dependencies\n    outputPath: docs/core-dependencies.md\n    sources:\n      - type: composer\n        description: Core Dependencies\n        composerPath: .\n        packages:\n          - symfony/finder\n          - psr/log\n        filePattern: \"*.php\"\n        notPath:\n          - tests\n```\n\n----------------------------------------\n\nTITLE: Installing Context Generator using bash script\nDESCRIPTION: This bash command downloads and executes an installation script that sets up the latest version of Context Generator. It installs the binary to /usr/local/bin, which is typically in the system PATH.\nSOURCE: https://github.com/context-hub/docs/blob/main/docs/getting-started.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -sSL https://raw.githubusercontent.com/context-hub/generator/main/download-latest.sh | sh\n```\n\n----------------------------------------\n\nTITLE: Viewing Recent Changes with CTX\nDESCRIPTION: This configuration helps see recent changes in a specific area of the codebase using git diff.\nSOURCE: https://github.com/context-hub/docs/blob/main/docs/advanced/development-process.md#2025-04-20_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\ndocuments:\n  - description: \"Recent Changes\"\n    outputPath: \"recent-changes.md\"\n    sources:\n      - type: git_diff\n        path: \"src/ComponentName\"\n        commit: \"last-month\"\n```\n\n----------------------------------------\n\nTITLE: Configuring URL Sources in YAML\nDESCRIPTION: This YAML configuration defines a document source that fetches content from multiple URLs with custom headers and CSS selector support. It demonstrates environment variable usage in both URLs and headers.\nSOURCE: https://github.com/context-hub/docs/blob/main/docs/sources/url-source.md#2025-04-20_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ndocuments:\n  - description: Documentation Website\n    outputPath: docs/website-content.md\n    sources:\n      - type: url\n        description: Documentation Website\n        urls:\n          - https://example.com/docs\n          - https://api.${ENV_NAME}.example.com/data\n        selector: .main-content\n        headers:\n          Authorization: Bearer ${API_TOKEN}\n          Accept-Language: en-US\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic Sanitizer Modifier in YAML\nDESCRIPTION: Demonstrates the basic usage of the sanitizer modifier to redact sensitive information like passwords, secrets, and API keys using both keyword and regex-based rules.\nSOURCE: https://github.com/context-hub/docs/blob/main/docs/modifiers/sanitizer.md#2025-04-20_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ndocuments:\n  - description: Sanitized API Documentation\n    outputPath: docs/sanitized-api.md\n    sources:\n      - type: file\n        description: API Classes\n        sourcePaths:\n          - src/Auth\n        filePattern: \"*.php\"\n        modifiers:\n          - name: sanitizer\n            options:\n              rules:\n                - type: keyword\n                  keywords:\n                    - password\n                    - secret\n                    - api_key\n                  replacement: '[REDACTED]'\n                - type: regex\n                  usePatterns:\n                    - email\n                    - api-key\n                    - jwt\n```\n\n----------------------------------------\n\nTITLE: Analyzing Payment Refund Bug Context with ctx Command\nDESCRIPTION: A bash command using ctx to gather context for a payment refund bug, focusing on relevant PHP files in the Payment directory and associated test files.\nSOURCE: https://github.com/context-hub/docs/blob/main/docs/advanced/development-steps.md#2025-04-20_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nctx --inline='{\n  \"documents\": [{\n    \"description\": \"Payment Refund Bug Context\",\n    \"outputPath\": \"refund-bug.md\",\n    \"sources\": [{\n      \"type\": \"file\",\n      \"sourcePaths\": [\"src/Payment\"],\n      \"contains\": [\"refund\", \"transaction\", \"state\", \"invalid\"],\n      \"filePattern\": \"*.php\"\n    }, {\n      \"type\": \"file\",\n      \"sourcePaths\": [\"tests/Payment\"],\n      \"filePattern\": \"*Test.php\"\n    }]\n  }]\n}'\n```\n\n----------------------------------------\n\nTITLE: Identifying Integration Points with CTX\nDESCRIPTION: This configuration helps find where a new feature needs to connect with existing code by looking for specific patterns.\nSOURCE: https://github.com/context-hub/docs/blob/main/docs/advanced/development-process.md#2025-04-20_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\ndocuments:\n  - description: \"Integration Points\"\n    outputPath: \"integration-points.md\"\n    sources:\n      - type: file\n        sourcePaths: [ \"src\" ]\n        contains: [ \"registerHandler\", \"addProvider\", \"loadExtension\" ]\n        filePattern: \"*.php\"\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables in MCP Server Configuration\nDESCRIPTION: JSON configuration demonstrating how to pass environment variables to the MCP server. This is useful for providing authentication tokens, API keys, or other configuration values.\nSOURCE: https://github.com/context-hub/docs/blob/main/docs/mcp/index.md#2025-04-20_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"mcpServers\": {\n    \"ctx\": {\n      \"command\": \"ctx\",\n      \"args\": [\n        \"server\",\n        \"-c\",\n        \"/path/to/project\"\n      ],\n      \"env\": {\n        \"GITHUB_PAT\": \"ghp_your_personal_access_token\",\n        \"MCP_DOCUMENT_NAME_FORMAT\": \"{description} ({tags}) - {path}\",\n        \"MCP_FILE_OPERATIONS\": \"true\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Multiple Aliased Modifiers in CTX Configuration\nDESCRIPTION: This example demonstrates using multiple aliased modifiers in a single source configuration. It shows how to define a code cleaning alias and a sanitization alias that redacts sensitive information based on keywords.\nSOURCE: https://github.com/context-hub/docs/blob/main/docs/modifiers/aliases.md#2025-04-20_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nsettings:\n  modifiers:\n    clean-code:\n      name: php-signature\n    sanitize-api:\n      name: sanitizer\n      options:\n        rules:\n          - type: keyword\n            keywords:\n              - password\n              - secret\n            replacement: \"[REDACTED]\"\n\ndocuments:\n  - description: Cleaned API Documentation\n    outputPath: docs/clean-api.md\n    sources:\n      - type: file\n        description: Source Files\n        sourcePaths:\n          - src\n        modifiers:\n          - clean-code\n          - sanitize-api\n```\n\n----------------------------------------\n\nTITLE: Template Inheritance in CTX Prompts\nDESCRIPTION: Demonstrates how to create a base template and extend it with a specialized prompt. Shows how variables from the base template can be filled with values defined in the extending prompt's arguments section.\nSOURCE: https://github.com/context-hub/docs/blob/main/docs/mcp/prompts.md#2025-04-20_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nprompts:\n  # Define a base template\n  - id: base-template\n    type: template\n    messages:\n      - role: user\n        content: \"This is a base template with {{variable}}.\"\n\n  # Extend the base template\n  - id: extended-prompt\n    type: prompt\n    extend:\n      - id: base-template\n        arguments:\n          variable: \"specialized value\"\n    schema:\n      properties:\n        additionalVar:\n          description: \"Additional parameter\"\n      required:\n        - additionalVar\n    messages:\n      - role: user\n        content: \"Additional message with {{additionalVar}}.\"\n```\n\n----------------------------------------\n\nTITLE: Configuring a GitHub Source in YAML\nDESCRIPTION: Example of a GitHub source configuration that pulls code directly from a GitHub repository. This is useful for including external dependencies or open-source components in your context document.\nSOURCE: https://github.com/context-hub/docs/blob/main/docs/documents.md#2025-04-20_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n- type: github\n  description: \"Authentication Library\"\n  repository: \"acme/auth-library\"\n  sourcePaths:\n    - src/Auth\n  ...\n```\n\n----------------------------------------\n\nTITLE: Configuring Inline MCP Server in YAML\nDESCRIPTION: Configuration example for defining an MCP server inline within a source definition rather than referencing a predefined server. This is useful for one-off server configurations specific to a particular source.\nSOURCE: https://github.com/context-hub/docs/blob/main/docs/sources/mcp-source.md#2025-04-20_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\ndocuments:\n  - description: \"Custom MCP Server\"\n    outputPath: \"docs/custom-mcp.md\"\n    sources:\n      - type: mcp\n        description: \"Custom MCP Tool Results\"\n        server:\n          command: \"custom-mcp-server\"\n          args: [ \"--port\", \"8080\" ]\n        operation:\n        # Operation details here\n```\n\n----------------------------------------\n\nTITLE: Implementing Document-Level Sanitization in YAML\nDESCRIPTION: Shows how to apply the sanitizer modifier at the document level to sanitize multiple sources within a single document, useful for comprehensive project-wide sanitization.\nSOURCE: https://github.com/context-hub/docs/blob/main/docs/modifiers/sanitizer.md#2025-04-20_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\ndocuments:\n  - description: Security Sanitized Project\n    outputPath: docs/secure-project.md\n    modifiers:\n      - name: sanitizer\n        options:\n          rules:\n            - type: keyword\n              keywords:\n                - SECRET\n                - API_KEY\n              replacement: '[SECURITY REMOVED]'\n            - type: regex\n              usePatterns:\n                - password-field\n                - database-conn\n    sources:\n      - type: file\n        sourcePaths:\n          - src\n        filePattern: \"*.php\"\n      - type: file\n        sourcePaths:\n          - config\n        filePattern: \"*.json\"\n```\n\n----------------------------------------\n\nTITLE: PHP Developer Prompt for Code Generation\nDESCRIPTION: A comprehensive prompt for PHP developers that outlines guidelines for generating PHP code, focusing on PHP 8.3 features, planning, code generation rules, and editing existing code.\nSOURCE: https://github.com/context-hub/docs/blob/main/docs/advanced/instructions.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nYou are an expert in generating PHP code generators. You love your work and always aim for clean, efficient, and \nwell-structured PHP code, focusing on detail and best practices.\n\n### **Guidelines for PHP Code Generation:**\n\n1. **Use PHP 8.3 Features:**  \n   - Use **constructor property promotion** to keep class definitions simple.  \n   - Use **named arguments** for better readability and flexibility.  \n   - **Avoid annotations**; prefer native PHP constructs instead.\n\n2. **Plan Before Coding:**  \n   - **Never write any code before providing a clear file structure** for the new classes.  \n   - **First, explain your idea** clearly, describing class hierarchy and relationships.  \n   - Present the hierarchy like this:\n\n    <structure>\n     ExternalContextSource (abstract base class)\n     ├── LocalExternalContextSource (reads from local filesystem)\n     └── UrlContextSource (reads from remote URL)\n    </structure>\n    \n   - Briefly explain the purpose and role of each class before writing code.\n\n3. **Code Generation Rules:**  \n   - Only generate code when explicitly asked, and always stick to the planned structure.\n   - Keep your code **modular**, **extensible**, and **clean**.\n   - Always use **strict types** and prefer **immutable data**.\n\n4. **Editing Existing Code:**  \n   - **Provide only the necessary changes** when modifying existing code. Don't rewrite entire files.\n   - Clearly state what's been changed and why, keeping your edits minimal and precise.\n   - Maintain the original coding style and structure.\n\n5. **Request Additional Information if Needed:**\n   - If there's not enough information about existing APIs (interfaces or classes mentioned in provided code), \n     don't guess or proceed immediately.\n   - **Always ask explicitly for the missing information** before starting to write any code.\n\n6. **When more info is needed, request files like this:\n\n    <structure>\n    Provide me the following files  \n    ExternalContextSource  \n    ├── LocalExternalContextSource.php [To understand local context fetching logic]  \n    └── UrlContextSource.php [To verify how remote sources are handled]\n    </structure>\n    \n   You can also request whole directories with short reasoning.\n```\n\n----------------------------------------\n\nTITLE: Configuring GitHub Repository Source in YAML\nDESCRIPTION: This snippet demonstrates how to set up a GitHub repository source in YAML configuration. It includes various parameters such as repository, source paths, file patterns, and exclusions.\nSOURCE: https://github.com/context-hub/docs/blob/main/docs/sources/github-source.md#2025-04-20_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ndocuments:\n  - description: Repository Source Files\n    outputPath: docs/repo-files.md\n    sources:\n      - type: github\n        description: Repository Source Files\n        repository: owner/repo\n        sourcePaths:\n          - src\n        branch: main\n        filePattern: \"*.php\"\n        excludePatterns:\n          - tests\n          - vendor\n        showTreeView: true\n        githubToken: ${GITHUB_TOKEN}\n        modifiers:\n          - php-signature\n```\n\n----------------------------------------\n\nTITLE: Configuring Command-Based MCP Server in YAML\nDESCRIPTION: Example configuration for a command-based MCP server that executes a specific command with arguments and environment variables. This is typically used for containerized servers like Docker.\nSOURCE: https://github.com/context-hub/docs/blob/main/docs/sources/mcp-source.md#2025-04-20_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nserver:\n  command: \"docker\"  # Command to execute\n  args: # Command arguments\n    - \"run\"\n    - \"-i\"\n    - \"--rm\"\n  env: # Environment variables\n    API_TOKEN: \"{{API_TOKEN}}\"\n```\n\n----------------------------------------\n\nTITLE: Tracing Method Calls with CTX\nDESCRIPTION: This configuration helps follow the execution path to understand how code reached an error state by tracing specific method calls.\nSOURCE: https://github.com/context-hub/docs/blob/main/docs/advanced/development-process.md#2025-04-20_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\ndocuments:\n  - description: \"Method Call Trace\"\n    outputPath: \"method-trace.md\"\n    sources:\n      - type: file\n        sourcePaths: [ \"src\" ]\n        contains: [ \"methodA\", \"methodB\", \"methodC\" ]\n        filePattern: \"*.php\"\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of PHP-Docs Modifier with YAML Configuration\nDESCRIPTION: Shows the minimal YAML configuration needed to transform PHP code into markdown documentation. This setup targets all PHP files in the src/Api directory and applies the php-docs modifier without additional options.\nSOURCE: https://github.com/context-hub/docs/blob/main/docs/modifiers/php-docs.md#2025-04-20_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ndocuments:\n  - description: API Documentation\n    outputPath: docs/api.md\n    sources:\n      - type: file\n        description: API Classes\n        sourcePaths:\n          - src/Api\n        filePattern: \"*.php\"\n        modifiers:\n          - php-docs\n```\n\n----------------------------------------\n\nTITLE: Configuring a Git Diff Source in YAML\nDESCRIPTION: Example of a Git diff source configuration that shows recent changes in the codebase. This source type is valuable for providing context about what's been modified recently in specific parts of your project.\nSOURCE: https://github.com/context-hub/docs/blob/main/docs/documents.md#2025-04-20_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\n- type: git_diff\n  description: \"Recent User API Changes\"\n  commit: \"last-week\"\n  ...\n```\n\n----------------------------------------\n\nTITLE: Setting Up Comment Insertion Rules in YAML\nDESCRIPTION: Shows how to configure comment insertion rules to mark sanitized code with explanatory comments. Includes options for file headers, class comments, method comments, and random comments at specified frequency.\nSOURCE: https://github.com/context-hub/docs/blob/main/docs/modifiers/sanitizer.md#2025-04-20_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\ndocuments:\n  - description: Commented Sanitized Code\n    outputPath: docs/commented-code.md\n    sources:\n      - type: file\n        sourcePaths:\n          - src\n        modifiers:\n          - name: sanitizer\n            options:\n              rules:\n                - type: comment\n                  fileHeaderComment: This file has been sanitized for security purposes.\n                  classComment: Sanitized class - sensitive information removed.\n                  methodComment: Sanitized method - implementation details omitted.\n                  frequency: 10\n                  randomComments:\n                    - Sanitized for security\n                    - Internal details removed\n                    - Sensitive data redacted\n```\n\n----------------------------------------\n\nTITLE: Finding Similar Features with CTX\nDESCRIPTION: This configuration helps locate existing implementations similar to a new feature you want to build.\nSOURCE: https://github.com/context-hub/docs/blob/main/docs/advanced/development-process.md#2025-04-20_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\ndocuments:\n  - description: \"Similar Feature Implementation\"\n    outputPath: \"similar-features.md\"\n    sources:\n      - type: file\n        sourcePaths: [ \"src\" ]\n        contains: [ \"featureName\", \"similarFunction\" ]\n        filePattern: \"*.php\"\n```\n\n----------------------------------------\n\nTITLE: Gathering User Entity Context for 2FA Implementation with ctx Command\nDESCRIPTION: A bash command using ctx to gather context for extending the User entity to support two-factor authentication, focusing on relevant files in the Entity and Repository directories.\nSOURCE: https://github.com/context-hub/docs/blob/main/docs/advanced/development-steps.md#2025-04-20_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nctx --inline='{\n  \"documents\": [{\n    \"description\": \"User Entity Context\",\n    \"outputPath\": \"user-entity.md\",\n    \"sources\": [{\n      \"type\": \"file\",\n      \"sourcePaths\": [\"src/Entity\", \"src/Repository\"],\n      \"contains\": [\"User\", \"Authentication\"],\n      \"filePattern\": \"*.php\"\n    }]\n  }]\n}'\n```\n\n----------------------------------------\n\nTITLE: Combining Multiple Sanitization Rules in YAML\nDESCRIPTION: Demonstrates how to combine multiple rule types (keyword, regex, comment) in a single sanitizer modifier for comprehensive sanitization of API documentation.\nSOURCE: https://github.com/context-hub/docs/blob/main/docs/modifiers/sanitizer.md#2025-04-20_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\ndocuments:\n  - description: Fully Sanitized API\n    outputPath: docs/full-sanitized-api.md\n    sources:\n      - type: file\n        sourcePaths:\n          - src\n        modifiers:\n          - name: sanitizer\n            options:\n            rules:\n              - type: keyword\n            keywords:\n              - apiKey\n              - password\n              - type: regex\n            usePatterns:\n              - credit-card\n              - email\n              - jwt\n              - type: comment\n            fileHeaderComment: Security-sanitized file.\n```\n\n----------------------------------------\n\nTITLE: Comparing Implementation Across Branches with CTX\nDESCRIPTION: This configuration compares the current branch with the main branch, useful for evaluating long-lived branches or pull requests.\nSOURCE: https://github.com/context-hub/docs/blob/main/docs/advanced/development-process.md#2025-04-20_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\ndocuments:\n  - description: \"Feature Branch Comparison\"\n    outputPath: \"branch-comparison.md\"\n    sources:\n      - type: git_diff\n        commit: \"main-diff\"  # Compares current branch with main\n```\n\n----------------------------------------\n\nTITLE: Filtering Prompts by IDs in YAML for Context Hub\nDESCRIPTION: This snippet demonstrates how to filter and import specific prompts by their IDs. It shows the YAML configuration to selectively import prompts from an external source based on a list of prompt IDs.\nSOURCE: https://github.com/context-hub/docs/blob/main/docs/mcp/prompts.md#2025-04-20_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\nimport:\n  - url: \"https://example.com/prompts-repository.yaml\"\n    filter:\n      ids: [ \"python-helper\", \"php-debug\", \"js-refactor\" ]\n```\n\n----------------------------------------\n\nTITLE: Generating Additional Implementation Context with CTX Command\nDESCRIPTION: This command uses CTX to generate additional context for specific implementation details by specifying file paths and content criteria.\nSOURCE: https://github.com/context-hub/docs/blob/main/docs/advanced/development-steps.md#2025-04-20_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nctx --inline='{\n  \"documents\": [{\n    \"description\": \"Additional Implementation Context\",\n    \"outputPath\": \"additional-context.md\",\n    \"sources\": [{\n      \"type\": \"file\",\n      \"sourcePaths\": [\"src/Related\"],\n      \"filePattern\": \"*.php\",\n      \"contains\": [\"specific implementation detail\"]\n    }]\n  }]\n}'\n```\n\n----------------------------------------\n\nTITLE: Configuring Regex Replacement Rules in YAML\nDESCRIPTION: Demonstrates how to use regex patterns to find and replace sensitive content in authentication code. Includes both custom regex patterns and predefined pattern aliases for common sensitive data types.\nSOURCE: https://github.com/context-hub/docs/blob/main/docs/modifiers/sanitizer.md#2025-04-20_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\ndocuments:\n  - description: Sanitized Authentication\n    outputPath: docs/sanitized-auth.md\n    sources:\n      - type: file\n        sourcePaths:\n          - src/Auth\n        modifiers:\n          - name: sanitizer\n            options:\n              rules:\n                - type: regex\n                  patterns:\n                    \"/access_token\\\\s*=\\\\s*['\\\"]([^'\\\"]+)['\\\"]/'\" : \"access_token='[REDACTED]'\"\n                    \"/password\\\\s*=\\\\s*['\\\"]([^'\\\"]+)['\\\"]/'\" : \"password='[REDACTED]'\"\n                  usePatterns:\n                    - credit-card\n                    - email\n                    - api-key\n```\n\n----------------------------------------\n\nTITLE: Advanced Filtering for Composer Dependencies\nDESCRIPTION: Example showing additional filtering options for Composer sources including path filters, content matching, and modifiers. This configuration targets specific Symfony components with multiple filtering criteria.\nSOURCE: https://github.com/context-hub/docs/blob/main/docs/sources/composer-source.md#2025-04-20_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\ndocuments:\n  - description: Filtered Composer Dependencies\n    outputPath: docs/filtered-deps.md\n    sources:\n      - type: composer\n        description: Filtered Dependencies\n        composerPath: .\n        packages:\n          - symfony/console\n          - symfony/http-foundation\n        filePattern: \"*.php\"\n        path: Component\n        notPath:\n          - tests\n          - vendor\n        contains: class\n        notContains: @deprecated\n        modifiers:\n          - php-signature\n```\n\n----------------------------------------\n\nTITLE: Generating Implementation Review with CTX\nDESCRIPTION: This configuration creates a diff for code review, either for unstaged or staged changes.\nSOURCE: https://github.com/context-hub/docs/blob/main/docs/advanced/development-process.md#2025-04-20_snippet_14\n\nLANGUAGE: yaml\nCODE:\n```\ndocuments:\n  - description: \"Implementation Review\"\n    outputPath: \"implementation-review.md\"\n    sources:\n      - type: git_diff\n        commit: \"unstaged\"  # or \"staged\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic Build Tool in YAML\nDESCRIPTION: Basic example of a build tool that installs and builds frontend assets using npm commands.\nSOURCE: https://github.com/context-hub/docs/blob/main/docs/mcp/custom-tools.md#2025-04-20_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ntools:\n  - id: build-assets\n    description: 'Build frontend assets'\n    type: run\n    commands:\n      - cmd: npm\n        args: [ 'install' ]\n        workingDir: frontend\n      - cmd: npm\n        args: [ 'run', 'build' ]\n        workingDir: frontend\n```\n\n----------------------------------------\n\nTITLE: Advanced Configuration of PHP-Docs Modifier with Custom Options\nDESCRIPTION: Demonstrates a more advanced YAML configuration with specific options for the php-docs modifier. This example shows how to customize which elements are included in the documentation and control formatting details.\nSOURCE: https://github.com/context-hub/docs/blob/main/docs/modifiers/php-docs.md#2025-04-20_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\ndocuments:\n  - description: API Documentation\n    outputPath: docs/api.md\n    sources:\n      - type: file\n        description: API Classes\n        sourcePaths:\n          - src/Api\n        filePattern: \"*.php\"\n        modifiers:\n          - name: php-docs\n            options:\n              include_private_methods: false\n              include_protected_methods: true\n              include_implementations: false\n              class_heading_level: 2\n              extract_routes: true\n```\n\n----------------------------------------\n\nTITLE: Combining Filter Types in YAML for Context Hub\nDESCRIPTION: This snippet demonstrates how to combine ID and tag filtering in a single import configuration. It shows the YAML setup for filtering prompts based on both specific IDs and tag criteria, with explanations of the 'match' parameter's effect on the overall filter strategy.\nSOURCE: https://github.com/context-hub/docs/blob/main/docs/mcp/prompts.md#2025-04-20_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\nimport:\n  - path: \"./prompt-collection.yaml\"\n    filter:\n      ids:\n        - creative-writing\n        - summarization-prompt\n      tags:\n        include:\n          - content\n        exclude:\n          - technical\n      match: \"any\"  # This applies to the overall filter strategy\n```\n\n----------------------------------------\n\nTITLE: Gathering Report Generation Context with ctx Command\nDESCRIPTION: A bash command using ctx to gather context for implementing a PDF export feature, focusing on relevant files in the Report, Controller, and Service directories.\nSOURCE: https://github.com/context-hub/docs/blob/main/docs/advanced/development-steps.md#2025-04-20_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nctx --inline='{\n  \"documents\": [{\n    \"description\": \"Report Generation Context\",\n    \"outputPath\": \"report-feature.md\",\n    \"sources\": [{\n      \"type\": \"file\",\n      \"sourcePaths\": [\"src\"],\n      \"path\": [\"Report\", \"Controller\", \"Service\"],\n      \"contains\": [\"report\", \"export\", \"generate\", \"pdf\"],\n      \"filePattern\": \"*.php\"\n    }]\n  }]\n}'\n```\n\n----------------------------------------\n\nTITLE: Configuring Render Options in YAML\nDESCRIPTION: Examples of simple and detailed render configuration options for controlling how diffs are displayed.\nSOURCE: https://github.com/context-hub/docs/blob/main/docs/sources/git-diff-source.md#2025-04-20_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n# Simple form - just specify the strategy\nrender: llm\n\n# Full configuration form\nrender:\n  strategy: llm  # 'llm' or 'raw'\n  showStats: true\n  showLineNumbers: true\n  contextLines: 3\n```\n\n----------------------------------------\n\nTITLE: Configuring Simple Imports in YAML\nDESCRIPTION: A YAML example showing the simplest form of configuration imports using string paths. This method allows referencing external configuration files without additional parameters.\nSOURCE: https://github.com/context-hub/docs/blob/main/docs/getting-started/configuration.md#2025-04-20_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nimport:\n  - \"services/api/context.yaml\"\n```\n\n----------------------------------------\n\nTITLE: Tree Source Configuration with Content-Based Filtering\nDESCRIPTION: A Tree source configuration that filters files based on their content rather than just file patterns. This snippet shows how to include or exclude files based on text patterns within the files themselves.\nSOURCE: https://github.com/context-hub/docs/blob/main/docs/sources/tree-source.md#2025-04-20_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\ndocuments:\n  - description: Controller Classes\n    outputPath: docs/controllers.md\n    sources:\n      - type: tree\n        description: Controller Classes\n        sourcePaths:\n          - src\n        contains: class Controller\n        notContains: @deprecated\n        filePattern: \"*.php\"\n```\n\n----------------------------------------\n\nTITLE: Complex Document Structure with Variables in YAML\nDESCRIPTION: Advanced example showing variable usage in a complex document structure including API integration and dynamic content generation.\nSOURCE: https://github.com/context-hub/docs/blob/main/docs/getting-started/variables.md#2025-04-20_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nvariables:\n  version: 2.1.0\n  company: Acme Corp\n  api_base: https://api.example.com/v2\n  environment: staging\n\ndocuments:\n  - description: \"{{company}} API Documentation\"\n    outputPath: docs/{{environment}}/api-{{version}}.md\n    sources:\n      - type: url\n        urls:\n          - \"{{api_base}}/schema\"\n        headers:\n          Authorization: \"Bearer {{API_TOKEN}}\"\n      - type: text\n        content: |\n          # {{company}} API Documentation\n          Version: {{version}}\n          Environment: {{environment}}\n\n          Generated on {{DATETIME}} by {{USER}}\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple Source Directories in YAML\nDESCRIPTION: This snippet shows how to include files from multiple directories within a GitHub repository using YAML configuration.\nSOURCE: https://github.com/context-hub/docs/blob/main/docs/sources/github-source.md#2025-04-20_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\ndocuments:\n  - description: Multiple Source Directories\n    outputPath: docs/multiple-dirs.md\n    sources:\n      - type: github\n        description: Multiple Source Directories\n        repository: owner/repo\n        sourcePaths:\n          - src/Controllers\n          - src/Models\n          - config\n        filePattern: \"*.php\"\n        showTreeView: true\n```\n\n----------------------------------------\n\nTITLE: Configuring Object Format Imports in YAML\nDESCRIPTION: YAML configuration for imports using the object format with path property. This provides a more structured approach to importing external configuration files.\nSOURCE: https://github.com/context-hub/docs/blob/main/docs/getting-started/configuration.md#2025-04-20_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nimport:\n  - path: services/api/context.yaml\n```\n\n----------------------------------------\n\nTITLE: Implementing Code Style Fixer Tool\nDESCRIPTION: Configuration for a code style fixing tool with customizable path and dry-run options using composer.\nSOURCE: https://github.com/context-hub/docs/blob/main/docs/mcp/custom-tools.md#2025-04-20_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\ntools:\n  - id: cs-fixer\n    description: 'Fix code style issues'\n    type: run\n    schema:\n      type: object\n      properties:\n        path:\n          type: string\n          description: \"Path to check\"\n          default: \"src\"\n        dry-run:\n          type: boolean\n          description: \"Don't make changes\"\n          default: false\n    commands:\n      - cmd: composer\n        args:\n          - cs:fix\n          - \"{{path}}\"\n          - name: --dry-run\n            when: \"{{dry-run}}\"\n```\n\n----------------------------------------\n\nTITLE: Configuring URL-Based MCP Server in YAML\nDESCRIPTION: Example showing how to configure a URL-based MCP server that connects to a remote endpoint with HTTP headers. This approach is useful for connecting to servers running as web services.\nSOURCE: https://github.com/context-hub/docs/blob/main/docs/sources/mcp-source.md#2025-04-20_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nserver:\n  url: \"https://mcp-server.example.com/mcp\"  # Server URL\n  headers: # HTTP headers\n    Authorization: \"Bearer {{API_TOKEN}}\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple Content Filters in YAML\nDESCRIPTION: This snippet shows how to use multiple content-based filters to include and exclude files from a GitHub repository using YAML configuration.\nSOURCE: https://github.com/context-hub/docs/blob/main/docs/sources/github-source.md#2025-04-20_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\ndocuments:\n  - description: Service Classes\n    outputPath: docs/services.md\n    sources:\n      - type: github\n        description: Service Classes\n        repository: owner/repo\n        sourcePaths:\n          - src\n        contains:\n          - class Service\n          - implements ServiceInterface\n        notContains:\n          - @deprecated\n          - @internal\n        filePattern: \"*.php\"\n        showTreeView: true\n```\n\n----------------------------------------\n\nTITLE: Configuring Path-Prefixed Imports in YAML\nDESCRIPTION: YAML configuration for imports with path prefixing capability. This allows applying a path prefix to all source paths in the imported configuration, useful for maintaining directory structure consistency.\nSOURCE: https://github.com/context-hub/docs/blob/main/docs/getting-started/configuration.md#2025-04-20_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nimport:\n  - path: services/api/context.yaml\n    pathPrefix: /api\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple Path Filters in YAML\nDESCRIPTION: This snippet demonstrates how to use multiple path filters to include files from specific directories within a GitHub repository using YAML configuration.\nSOURCE: https://github.com/context-hub/docs/blob/main/docs/sources/github-source.md#2025-04-20_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\ndocuments:\n  - description: Controllers and Services\n    outputPath: docs/controllers-services.md\n    sources:\n      - type: github\n        description: Controllers and Services\n        repository: owner/repo\n        sourcePaths:\n          - src\n        path:\n          - Controller\n          - Service\n        filePattern: \"*.php\"\n        showTreeView: true\n```\n\n----------------------------------------\n\nTITLE: Composer Source Context Configuration\nDESCRIPTION: YAML configuration for generating context about the Composer source implementation\nSOURCE: https://github.com/context-hub/docs/blob/main/docs/contributing.md#2025-04-20_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\ndocuments:\n  - description: \"Current Composer Source Implementation\"\n    outputPath: \"composer-source-current.md\"\n    sources:\n      - type: file\n        sourcePaths: [ \"src/Source/Composer/\" ]\n        filePattern: [ \"ComposerSource.php\", \"ComposerSourceFetcher.php\" ]\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple Resource Reads in YAML\nDESCRIPTION: Example for reading multiple resources in a single operation. This configuration retrieves content from multiple repository locations in one MCP source definition.\nSOURCE: https://github.com/context-hub/docs/blob/main/docs/sources/mcp-source.md#2025-04-20_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\ndocuments:\n  - description: \"Repository Resources\"\n    outputPath: \"docs/repo-resources.md\"\n    sources:\n      - type: mcp\n        server: github\n        operation:\n          type: resource.read\n          resources:\n            - \"repo://owner/repo/readme.md\"\n            - \"repo://owner/repo/docs/architecture.md\"\n            - \"repo://owner/repo/src/main.php\"\n```\n\n----------------------------------------\n\nTITLE: Complete Import Example in YAML Format\nDESCRIPTION: A comprehensive YAML example showing multiple import types combined with regular document configuration. This demonstrates how to use imports alongside normal document definitions in a single configuration file.\nSOURCE: https://github.com/context-hub/docs/blob/main/docs/getting-started/configuration.md#2025-04-20_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\nimport:\n  - path: services/api/context.yaml\n    pathPrefix: /api\n  - type: url\n    url: https://example.com/shared-configs.json\n\ndocuments:\n  - description: Project Overview\n    outputPath: docs/overview.md\n    sources:\n      - type: text\n        content: |\n          # Project Documentation\n\n          This is the main project documentation.\n      - type: file\n        description: Project README\n        sourcePaths:\n          - README.md\n```\n\n----------------------------------------\n\nTITLE: Defining CTX Schema for API Documentation Prompt in YAML\nDESCRIPTION: This YAML snippet defines a schema for generating API documentation prompts. It specifies required properties such as entity name, base URL, and documentation format, along with user and assistant message templates.\nSOURCE: https://github.com/context-hub/docs/blob/main/docs/getting-started/json-schema.md#2025-04-20_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\ndescription: \"API documentation for CRUD endpoints\"\ntype: \"prompt\"\nschema:\n  properties:\n    entity:\n      type: \"string\"\n      description: \"Name of the entity (e.g., User, Product, Order)\"\n    base_url:\n      type: \"string\"\n      description: \"Base URL for the API (e.g., /api/v1)\"\n    format:\n      type: \"string\"\n      description: \"Documentation format (e.g., OpenAPI, Markdown, Postman)\"\n  required:\n    - \"entity\"\n    - \"base_url\"\n    - \"format\"\nmessages:\n  - role: \"user\"\n    content: |\n      Create ${format} documentation for ${entity} CRUD API endpoints with base URL ${base_url}. Include:\n\n      1. Endpoint specifications\n      2. Request parameters\n      3. Request body schemas\n      4. Response formats\n      5. Status codes\n      6. Authentication requirements\n      7. Example requests and responses\n\n  - role: \"assistant\"\n    content: |\n      Here's the API documentation for the ${entity} CRUD endpoints:\n\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of Tree Source in YAML\nDESCRIPTION: A simple configuration example for the Tree source that generates a directory tree with basic filtering. This snippet shows how to set up file pattern filters and exclude specific directories from the tree.\nSOURCE: https://github.com/context-hub/docs/blob/main/docs/sources/tree-source.md#2025-04-20_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\ndocuments:\n  - description: Project Structure\n    outputPath: docs/structure.md\n    sources:\n      - type: tree\n        description: Source Code Structure\n        sourcePaths:\n          - src\n        filePattern: \"*.php\"\n        notPath:\n          - tests\n          - vendor\n```\n\n----------------------------------------\n\nTITLE: Defining Basic Modifier Aliases in CTX Configuration\nDESCRIPTION: This example shows how to define modifier aliases in the settings.modifiers section and reference them in document sources. It demonstrates setting up aliases for PHP content filtering and documentation generation with specific options.\nSOURCE: https://github.com/context-hub/docs/blob/main/docs/modifiers/aliases.md#2025-04-20_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nsettings:\n  modifiers:\n    api-docs:\n      name: php-content-filter\n      options:\n        keep_doc_comments: false\n        keep_method_bodies: false\n    docs-markdown:\n      name: php-docs\n      options:\n        include_implementations: false\n        class_heading_level: 2\n\ndocuments:\n  - description: API Documentation\n    outputPath: docs/api.md\n    sources:\n      - type: file\n        description: API Controllers\n        sourcePaths:\n          - src/Controller\n        modifiers:\n          - api-docs\n```\n\n----------------------------------------\n\nTITLE: LLM Context Request Command Using Inline Configuration\nDESCRIPTION: A bash command generated by the LLM to request specific context about payment refund processing. It uses file pattern matching and text content filtering to find relevant files in the codebase.\nSOURCE: https://github.com/context-hub/docs/blob/main/docs/advanced/smart-context-requesting.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nctx --inline='{\n  \"documents\": [{\n    \"description\": \"Payment Refund Processing\",\n    \"outputPath\": \"payment-refund.md\",\n    \"sources\": [{\n      \"type\": \"file\",\n      \"sourcePaths\": [\"src\"],\n      \"filePattern\": \"*.php\",\n      \"contains\": \"refund|transaction.*state|payment.*process\"\n    }]\n  }]\n}'\n```\n\n----------------------------------------\n\nTITLE: Authentication Flow HTTP Tool\nDESCRIPTION: Multi-step HTTP tool for handling authentication and subsequent data fetching with token management.\nSOURCE: https://github.com/context-hub/docs/blob/main/docs/mcp/custom-tools.md#2025-04-20_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\ntools:\n  - id: auth-and-fetch\n    description: 'Authenticate and fetch user data'\n    type: http\n    schema:\n      type: object\n      properties:\n        username:\n          type: string\n          description: \"Username\"\n        password:\n          type: string\n          description: \"Password\"\n      required: [ \"username\", \"password\" ]\n    requests:\n      - url: \"https://api.example.com/auth\"\n        method: \"POST\"\n        headers:\n          Content-Type: \"application/json\"\n        body:\n          username: \"{{username}}\"\n          password: \"{{password}}\"\n\n      - url: \"https://api.example.com/user/profile\"\n        method: \"GET\"\n        headers:\n          Authorization: \"Bearer {{token}}\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Tree Source with Multiple Source Paths\nDESCRIPTION: A Tree source configuration that pulls directory structure information from multiple distinct source paths. This example demonstrates how to visualize the structure of separate application components in a single tree view.\nSOURCE: https://github.com/context-hub/docs/blob/main/docs/sources/tree-source.md#2025-04-20_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\ndocuments:\n  - description: Application Structure\n    outputPath: docs/app-structure.md\n    sources:\n      - type: tree\n        description: Application Structure\n        sourcePaths:\n          - src/App\n          - config\n          - resources/views\n        filePattern: \"*.*\"\n        maxDepth: 3\n```\n\n----------------------------------------\n\nTITLE: Variable Usage in YAML Configuration\nDESCRIPTION: Shows how to use variables throughout a configuration file using both ${VAR_NAME} and {{VAR_NAME}} syntax, including system variables and custom variables.\nSOURCE: https://github.com/context-hub/docs/blob/main/docs/getting-started/variables.md#2025-04-20_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nvariables:\n  version: 1.0.0\n  environment: development\n  project_name: Context Generator\n\ndocuments:\n  - description: \"{{project_name}} Documentation\"\n    outputPath: docs/{{environment}}/{{project_name}}-{{version}}.md\n    sources:\n      - type: text\n        description: Generated on ${DATETIME}\n        content: |\n          # {{project_name}} v{{version}}\n          - Environment: {{environment}}\n          - Generated by: ${USER}\n          - Hostname: ${HOSTNAME}\n          - Operating System: ${OS}\n```\n\n----------------------------------------\n\nTITLE: Configuring Webhook Integration in YAML for Context-Hub\nDESCRIPTION: Defines a webhook integration tool for triggering deployments. It includes schema properties for environment and branch, and specifies the HTTP request details including headers and body content.\nSOURCE: https://github.com/context-hub/docs/blob/main/docs/mcp/custom-tools.md#2025-04-20_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\ntools:\n  - id: deploy-webhook\n    description: 'Trigger deployment webhook'\n    type: http\n    schema:\n      type: object\n      properties:\n        environment:\n          type: string\n          description: \"Target environment\"\n          default: \"staging\"\n        branch:\n          type: string\n          description: \"Git branch to deploy\"\n          default: \"main\"\n      required: [ ]\n    requests:\n      - url: \"https://deploy.example.com/webhook\"\n        method: \"POST\"\n        headers:\n          Content-Type: \"application/json\"\n          Authorization: \"Bearer ${DEPLOY_TOKEN}\"\n        body:\n          environment: \"{{environment}}\"\n          branch: \"{{branch}}\"\n          timestamp: \"{{timestamp}}\"\n```\n\n----------------------------------------\n\nTITLE: Displaying File Operations Tools Table in Markdown\nDESCRIPTION: This snippet presents a markdown table listing available file operation tools. It includes tool keys, descriptions, corresponding environment variables, and default values.\nSOURCE: https://github.com/context-hub/docs/blob/main/docs/mcp/tools.md#2025-04-20_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n| Tool Key           | Description                                                  | Environment Variable                              | Default                |\n|--------------------|--------------------------------------------------------------|---------------------------------------------------|------------------------|\n| `file-info`        | Get information about a file (size, type, modification date) | Always available when file operations are enabled | -                      |\n| `file-read`        | Read content from a file                                     | Always available when file operations are enabled | -                      |\n| `file-rename`      | Rename a file                                                | Always available when file operations are enabled | -                      |\n| `file-move`        | Move a file from one location to another                     | Always available when file operations are enabled | -                      |\n| `directory-list`   | List files and directories in a specified path               | `MCP_FILE_DIRECTORIES_LIST`                       | `true`                 |\n| `file-write`       | Create new files or modify existing ones                     | `MCP_FILE_WRITE`                                  | `true`                 |\n| `file-apply-patch` | Apply git-style patches to files                             | `MCP_FILE_APPLY_PATCH`                            | `false` (experimental) |\n```\n\n----------------------------------------\n\nTITLE: Configuring Path-Based Filtering in YAML\nDESCRIPTION: This snippet shows how to target specific subdirectories or files within a GitHub repository using path-based filtering in YAML configuration.\nSOURCE: https://github.com/context-hub/docs/blob/main/docs/sources/github-source.md#2025-04-20_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\ndocuments:\n  - description: Only Controller Files\n    outputPath: docs/controllers.md\n    sources:\n      - type: github\n        description: Only Controller Files\n        repository: owner/repo\n        sourcePaths:\n          - src\n        path: Controller\n        filePattern: \"*.php\"\n        showTreeView: true\n```\n\n----------------------------------------\n\nTITLE: Loading Environment Variables via CLI\nDESCRIPTION: Examples of loading environment variables using the CTX CLI with different .env file configurations.\nSOURCE: https://github.com/context-hub/docs/blob/main/docs/getting-started/variables.md#2025-04-20_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n# Load variables from the default .env file\nctx --env\n\n# Load from a custom environment file\nctx --env=.env.local\n\n# Do not load any environment variables (default behavior)\nctx\n```\n\n----------------------------------------\n\nTITLE: Database Migration Tool Configuration\nDESCRIPTION: Complex database migration tool with environment selection, fresh migration, and seeding options.\nSOURCE: https://github.com/context-hub/docs/blob/main/docs/mcp/custom-tools.md#2025-04-20_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\ntools:\n  - id: db-migrate\n    description: \"Run database migrations\"\n    type: run\n    schema:\n      type: object\n      properties:\n        env:\n          type: string\n          description: \"Environment (local, dev, staging, prod)\"\n          default: \"local\"\n        fresh:\n          type: boolean\n          description: \"Reset the database before migration\"\n          default: false\n        seed:\n          type: boolean\n          description: \"Run seeders after migration\"\n          default: false\n      required: [ ]\n    commands:\n      - cmd: php\n        args:\n          - artisan\n          - migrate\n          - name: \"--env={{env}}\"\n          - name: \"--fresh\"\n            when: \"{{fresh}}\"\n          - name: \"--seed\"\n            when: \"{{seed}}\"\n        env:\n          APP_ENV: \"{{env}}\"\n```\n\n----------------------------------------\n\nTITLE: Configuring API Integration with Format Options in YAML for Context-Hub\nDESCRIPTION: Defines an API integration tool for fetching data with format options. It includes schema properties for endpoint and format, and specifies the HTTP request details including dynamic headers based on the chosen format.\nSOURCE: https://github.com/context-hub/docs/blob/main/docs/mcp/custom-tools.md#2025-04-20_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\ntools:\n  - id: fetch-api-data\n    description: 'Fetch data from external API'\n    type: http\n    schema:\n      type: object\n      properties:\n        endpoint:\n          type: string\n          description: \"API endpoint\"\n          default: \"users\"\n        format:\n          type: string\n          description: \"Response format (json or xml)\"\n          default: \"json\"\n      required: [ \"endpoint\" ]\n    requests:\n      - url: \"https://api.example.com/{{endpoint}}\"\n        method: \"GET\"\n        headers:\n          Accept: \"application/{{format}}\"\n          Authorization: \"Bearer ${API_TOKEN}\"\n```\n\n----------------------------------------\n\nTITLE: Simple Boolean Tree View Configuration\nDESCRIPTION: Example showing how to use the simplified boolean configuration for tree view. This demonstrates backward compatibility with the simple true/false setting.\nSOURCE: https://github.com/context-hub/docs/blob/main/docs/sources/composer-source.md#2025-04-20_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\ndocuments:\n  - description: Filtered Composer Dependencies\n    outputPath: docs/filtered-deps.md\n    sources:\n      - type: composer\n        description: Filtered Dependencies\n        composerPath: .\n        packages:\n          - symfony/console\n          - symfony/http-foundation\n        treeView: false  # Disable tree view\n```\n\n----------------------------------------\n\nTITLE: Configuring Wildcard Imports in YAML\nDESCRIPTION: YAML configuration for importing multiple configuration files using wildcard patterns. This demonstrates how to use various pattern matching techniques to include multiple files with a single import statement.\nSOURCE: https://github.com/context-hub/docs/blob/main/docs/getting-started/configuration.md#2025-04-20_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\nimport:\n  - path: \"services/*/context.yaml\"  # Import from all service directories\n  - path: \"modules/**/*.yaml\"        # Import all YAML files in modules and subdirectories\n```\n\n----------------------------------------\n\nTITLE: Generating Entity Templates Context with CTX Command\nDESCRIPTION: This command uses CTX to generate context for entity templates by specifying file paths and patterns for entities, repositories, and factories.\nSOURCE: https://github.com/context-hub/docs/blob/main/docs/advanced/development-steps.md#2025-04-20_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nctx --inline='{\n  \"documents\": [{\n    \"description\": \"Entity Templates\",\n    \"outputPath\": \"entity-templates.md\",\n    \"sources\": [{\n      \"type\": \"file\",\n      \"sourcePaths\": [\"src/Entity\", \"src/Repository\", \"src/Factory\"],\n      \"filePattern\": [\"*Entity.php\", \"*Repository.php\", \"*Factory.php\"],\n      \"path\": [\"Core\"]\n    }]\n  }]\n}'\n```\n\n----------------------------------------\n\nTITLE: Installing Context Generator with sudo privileges\nDESCRIPTION: This command installs Context Generator to a system directory using sudo privileges. It's necessary when installing to protected directories like /usr/local/bin.\nSOURCE: https://github.com/context-hub/docs/blob/main/docs/getting-started.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncurl -sSL https://raw.githubusercontent.com/context-hub/generator/main/download-latest.sh | sudo sh\n```\n\n----------------------------------------\n\nTITLE: Configuring MCP Server for Windows with WSL\nDESCRIPTION: JSON configuration for running the CTX MCP server through Windows Subsystem for Linux. This setup invokes bash within WSL to run the CTX server command.\nSOURCE: https://github.com/context-hub/docs/blob/main/docs/mcp/index.md#2025-04-20_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"mcpServers\": {\n    \"ctx\": {\n      \"command\": \"wsl.exe\",\n      \"args\": [\n        \"bash\",\n        \"-c\",\n        \"ctx server -c /path/to/project\"\n      ]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Basic Prompts in YAML Configuration\nDESCRIPTION: Example of how to define a prompt in configuration files using the 'prompts' key. Includes the basic structure with id, description, type, schema, and messages components.\nSOURCE: https://github.com/context-hub/docs/blob/main/docs/mcp/prompts.md#2025-04-20_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nprompts:\n  - id: generate-controller\n    description: \"Generate a controller for a specific entity\"\n    type: prompt # Optional, defaults to 'prompt' if not specified\n    schema:\n      properties:\n        entityName:\n          description: \"Name of the entity (e.g. User, Product)\"\n      required:\n        - entityName\n    messages:\n      - role: assistant\n        content: \"I'll help you generate a controller for your entity. Please provide the entity name.\"\n      - role: user\n        content: \"Generate a controller for the {{entityName}} entity.\"\n```\n\n----------------------------------------\n\nTITLE: Displaying Prompt Operations Tools Table in Markdown\nDESCRIPTION: This snippet presents a markdown table showing available prompt operation tools. It includes tool keys, descriptions, environment variables, and default values.\nSOURCE: https://github.com/context-hub/docs/blob/main/docs/mcp/tools.md#2025-04-20_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n| Tool Key       | Description                | Environment Variable    | Default                |\n|----------------|----------------------------|-------------------------|------------------------|\n| `prompt-get`   | Retrieve a specific prompt | `MCP_PROMPT_OPERATIONS` | `false` (experimental) |\n| `prompts-list` | List all available prompts | `MCP_PROMPT_OPERATIONS` | `false` (experimental) |\n```\n\n----------------------------------------\n\nTITLE: Simple Package Selection in Composer Source\nDESCRIPTION: Basic usage example showing how to specify Composer packages to include in the documentation. This configuration selects Cycle ORM packages.\nSOURCE: https://github.com/context-hub/docs/blob/main/docs/sources/composer-source.md#2025-04-20_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\ndocuments:\n  - description: Symfony Components\n    outputPath: docs/symfony-components.md\n    sources:\n      - type: composer\n        description: Symfony Components\n        packages:\n          - cycle/orm\n          - cycle/annotated\n```\n\n----------------------------------------\n\nTITLE: Integrating MCP Sources with Other Source Types in YAML\nDESCRIPTION: Example showing how to combine MCP sources with other source types like file and text sources to create comprehensive documentation. This demonstrates the flexibility of integrating different content sources in a single document.\nSOURCE: https://github.com/context-hub/docs/blob/main/docs/sources/mcp-source.md#2025-04-20_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\ndocuments:\n  - description: \"Full Project Documentation\"\n    outputPath: \"docs/project.md\"\n    sources:\n      # Standard file source\n      - type: file\n        sourcePaths: src\n        filePattern: \"*.php\"\n\n      # MCP source for GitHub content\n      - type: mcp\n        server: github\n        operation:\n          type: resource.read\n          resources:\n            - \"repo://context-hub/generator/README.md\"\n\n      # Text source for additional context\n      - type: text\n        content: |\n          # Implementation Notes\n\n          The following sections contain implementation details gathered from various sources.\n```\n\n----------------------------------------\n\nTITLE: Configuring Imports in YAML for Context Hub\nDESCRIPTION: This snippet demonstrates various import configurations including local, URL, and GitHub Gist imports. It shows how to specify paths, URLs, and optional HTTP headers for different import types.\nSOURCE: https://github.com/context-hub/docs/blob/main/docs/mcp/prompts.md#2025-04-20_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nimport:\n  # Local import\n  - path: services/api/context.yaml\n    type: local # default, can be omitted\n\n  # URL import\n  - url: https://example.com/context-configs/api-prompts.yaml\n    type: url\n    headers: # optional HTTP headers\n      Authorization: \"Bearer ${API_TOKEN}\"\n\n  # GitHub Gist import (using URL)\n  - url: https://gist.githubusercontent.com/butschster/1b7e597691cc1a6476b15dc120ecbddb/raw/9cda0186689e5c819e1f60b486a9d960fcf412c2/prompts.yaml\n    type: url\n```\n\n----------------------------------------\n\nTITLE: Displaying Context Operations Tools Table in Markdown\nDESCRIPTION: This snippet shows a markdown table that lists available context operation tools. It includes tool keys, descriptions, environment variables, and default values.\nSOURCE: https://github.com/context-hub/docs/blob/main/docs/mcp/tools.md#2025-04-20_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n| Tool Key          | Description                                             | Environment Variable                                 | Default |\n|-------------------|---------------------------------------------------------|------------------------------------------------------|---------|\n| `context-request` | Request context information using filters and modifiers | Always available when context operations are enabled | -       |\n| `context-get`     | Get a specific context document                         | Always available when context operations are enabled | -       |\n| `context`         | List all available contexts                             | Always available when context operations are enabled | -       |\n```\n\n----------------------------------------\n\nTITLE: Displaying Environment Variables Configuration Table in Markdown\nDESCRIPTION: This snippet shows a markdown table that lists general configuration environment variables for the MCP tools system. It includes variable names, descriptions, and default values.\nSOURCE: https://github.com/context-hub/docs/blob/main/docs/mcp/tools.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Variable                     | Description                                | Default |\n|------------------------------|--------------------------------------------|---------|\n| `MCP_CUSTOM_TOOLS_ENABLE`    | Enable/disable custom tools                | `true`  |\n| `MCP_TOOL_MAX_RUNTIME`       | Maximum runtime for a command in seconds   | `30`    |\n| `MCP_TOOL_COMMAND_EXECUTION` | Enable/disable command execution           | `true`  |\n| `MCP_FILE_OPERATIONS`        | Master switch for all file operation tools | `true`  |\n| `MCP_FILE_WRITE`             | Enable/disable file write operations       | `true`  |\n| `MCP_FILE_APPLY_PATCH`       | Enable/disable applying patches to files   | `false` |\n| `MCP_FILE_DIRECTORIES_LIST`  | Enable/disable directory listing           | `true`  |\n```\n\n----------------------------------------\n\nTITLE: Complete Import Example in JSON Format\nDESCRIPTION: A comprehensive JSON example showing configuration imports alongside document definitions. This provides the equivalent functionality to the YAML example but uses JSON syntax for projects that prefer this format.\nSOURCE: https://github.com/context-hub/docs/blob/main/docs/getting-started/configuration.md#2025-04-20_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"import\": [\n    {\n      \"path\": \"services/api/context.json\"\n    }\n  ],\n  \"documents\": [\n    {\n      \"description\": \"Common Components\",\n      \"outputPath\": \"docs/components.md\",\n      \"sources\": [\n        {\n          \"type\": \"file\",\n          \"sourcePaths\": [\n            \"src/Components\"\n          ]\n        }\n      ]\n    },\n    {\n      \"description\": \"Project Overview\",\n      \"outputPath\": \"docs/overview.md\",\n      \"sources\": [\n        {\n          \"type\": \"text\",\n          \"content\": \"# Project Documentation\\n\\nThis is the main project documentation.\"\n        }\n      ]\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Filtering Prompts by Tags in YAML for Context Hub\nDESCRIPTION: This snippet shows how to filter prompts based on their tags. It includes YAML configuration for including and excluding prompts based on specific tags, and demonstrates the use of the 'match' parameter for AND/OR logic.\nSOURCE: https://github.com/context-hub/docs/blob/main/docs/mcp/prompts.md#2025-04-20_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\nimport:\n  - path: \"./local-prompts.yaml\"\n    filter:\n      tags:\n        include: [ \"coding\", \"debugging\" ]\n        exclude: [ \"advanced\" ]\n        match: \"any\"  # Can be \"all\" for AND logic\n```\n\n----------------------------------------\n\nTITLE: Custom Tags Configuration Example in YAML\nDESCRIPTION: Shows how to use custom tags to organize different sections of documentation with multiple text sources and different tag identifiers.\nSOURCE: https://github.com/context-hub/docs/blob/main/docs/sources/text-source.md#2025-04-20_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\ndocuments:\n  - description: API Documentation\n    outputPath: docs/api.md\n    sources:\n      - type: text\n        description: Introduction\n        content: |\n          # API Documentation\n\n          This document provides an overview of the API.\n        tag: INTRO\n      - type: text\n        description: Usage Notes\n        content: |\n          ## Usage Notes\n\n          - Always include API key in headers\n          - Rate limits apply\n        tag: USAGE_NOTES\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple File Types in YAML\nDESCRIPTION: This snippet demonstrates how to include different file types from a GitHub repository using YAML configuration.\nSOURCE: https://github.com/context-hub/docs/blob/main/docs/sources/github-source.md#2025-04-20_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\ndocuments:\n  - description: Multiple File Types\n    outputPath: docs/multiple-types.md\n    sources:\n      - type: github\n        description: Multiple File Types\n        repository: owner/repo\n        sourcePaths:\n          - src\n        filePattern:\n          - \"*.php\"\n          - \"*.json\"\n          - \"*.md\"\n        showTreeView: true\n```\n\n----------------------------------------\n\nTITLE: Using Verbose Output Flag with CTX\nDESCRIPTION: Command to run CTX with verbose output (-v flag) to display error, warning, and notice messages in the console.\nSOURCE: https://github.com/context-hub/docs/blob/main/docs/getting-started/logging.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nctx -v\n```\n\n----------------------------------------\n\nTITLE: Examining Related Tests with CTX\nDESCRIPTION: This configuration helps understand how a component is supposed to work by examining related test files.\nSOURCE: https://github.com/context-hub/docs/blob/main/docs/advanced/development-process.md#2025-04-20_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\ndocuments:\n  - description: \"Related Tests\"\n    outputPath: \"related-tests.md\"\n    sources:\n      - type: file\n        sourcePaths: [ \"tests\" ]\n        contains: [ \"ComponentName\", \"testScenario\" ]\n        filePattern: \"*Test.php\"\n```\n\n----------------------------------------\n\nTITLE: Generated Output Example with Tags\nDESCRIPTION: Demonstrates the output format when using custom tags to wrap content sections.\nSOURCE: https://github.com/context-hub/docs/blob/main/docs/sources/text-source.md#2025-04-20_snippet_2\n\nLANGUAGE: text\nCODE:\n```\n<INTRO>\n# API Documentation\n\nThis document provides an overview of the API.\n</INTRO>\n----------------------------------------------------------\n\n<USAGE_NOTES>\n## Usage Notes\n\n- Always include API key in headers\n- Rate limits apply\n</USAGE_NOTES>\n----------------------------------------------------------\n```\n\n----------------------------------------\n\nTITLE: Advanced Project Build Tool\nDESCRIPTION: Multi-step build process with environment-specific optimizations and asset deployment configuration.\nSOURCE: https://github.com/context-hub/docs/blob/main/docs/mcp/custom-tools.md#2025-04-20_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\ntools:\n  - id: build-project\n    description: 'Build project and deploy assets'\n    type: run\n    schema:\n      type: object\n      properties:\n        env:\n          type: string\n          description: \"Target environment\"\n          default: \"development\"\n        optimize:\n          type: boolean\n          description: \"Optimize for production\"\n          default: false\n      required: [ ]\n    commands:\n      - cmd: composer\n        args: [ 'install' ]\n        workingDir: project/root\n      - cmd: npm\n        args: [ 'install' ]\n        workingDir: project/assets\n      - cmd: npm\n        args:\n          - 'run'\n          - 'build'\n          - name: \"--production\"\n            when: \"{{optimize}}\"\n        env:\n          NODE_ENV: \"{{env}}\"\n        workingDir: project/assets\n```\n\n----------------------------------------\n\nTITLE: Visualizing MCP Server Integration Flow with Mermaid Diagram\nDESCRIPTION: A sequence diagram showing the interaction flow between a user, Claude, the MCP Server, project files, and configuration files. It illustrates how context requests are processed and how contextually aware responses are provided to the user.\nSOURCE: https://github.com/context-hub/docs/blob/main/docs/mcp/index.md#2025-04-20_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\nsequenceDiagram\n    participant User\n    participant Claude\n    participant MCP Server as \"CTX<br/>MCP Server\"\n    participant Files as \"Project Files\"\n    participant Config as \"context.yaml/<br/>context.json\"\n    User ->> Claude: Ask question about project\n    Claude ->> MCP Server: Request context (MCP protocol)\n    MCP Server ->> Config: Read configuration\n    MCP Server ->> Files: Access relevant files\n    Note over MCP Server: Filter & process content<br/>based on configuration\n    MCP Server -->> Claude: Return formatted context\n    Claude ->> User: Provide contextually aware response\n    Note over User, Claude: Subsequent questions\n    User ->> Claude: Follow-up question\n    Claude ->> MCP Server: Request additional context\n    MCP Server ->> Files: Access specific files\n    MCP Server -->> Claude: Return targeted information\n    Claude ->> User: Provide detailed response\n```\n\n----------------------------------------\n\nTITLE: Generating Error Context with CTX\nDESCRIPTION: This configuration gathers relevant code context when facing an error by searching for specific error-related terms.\nSOURCE: https://github.com/context-hub/docs/blob/main/docs/advanced/development-process.md#2025-04-20_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\ndocuments:\n  - description: \"Error Context\"\n    outputPath: \"error-context.md\"\n    sources:\n      - type: file\n        sourcePaths: [ \"src\" ]\n        contains: [ \"errorMessage\", \"exceptionName\", \"problematicFunction\" ]\n        filePattern: \"*.php\"\n```\n\n----------------------------------------\n\nTITLE: Tags for Categorization in YAML\nDESCRIPTION: Shows how to use multiple tags for categorizing documentation content with version and type information.\nSOURCE: https://github.com/context-hub/docs/blob/main/docs/sources/text-source.md#2025-04-20_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\ndocuments:\n  - description: Feature Documentation\n    outputPath: docs/features.md\n    sources:\n      - type: text\n        description: Feature Overview\n        content: |\n          # Feature Overview\n\n          This document describes the core features.\n        tag: OVERVIEW\n        tags:\n          - documentation\n          - features\n          - v1\n```\n\n----------------------------------------\n\nTITLE: Configuring Tool Call Operation in YAML\nDESCRIPTION: Configuration for a tool call operation that invokes a specific tool on an MCP server with arguments. This operation type is used to execute server-side tools and retrieve their output.\nSOURCE: https://github.com/context-hub/docs/blob/main/docs/sources/mcp-source.md#2025-04-20_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\noperation:\n  type: tool.call\n  name: get_issue\n  arguments:\n    owner: context-hub\n    repo: generator\n    issue_number: 158\n```\n\n----------------------------------------\n\nTITLE: Configuring Selective Document Imports in YAML\nDESCRIPTION: YAML configuration for selectively importing specific documents by their output paths. This allows for more granular control over which documents to include from external configuration files.\nSOURCE: https://github.com/context-hub/docs/blob/main/docs/getting-started/configuration.md#2025-04-20_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nimport:\n  - path: services/common/context.yaml\n    docs:\n      - \"api/*.md\"      # Import all API docs\n      - \"docs/core.md\"  # Import a specific document\n```\n\n----------------------------------------\n\nTITLE: Extracting Dependency Code with CTX\nDESCRIPTION: This configuration examines how external packages are structured by extracting their code.\nSOURCE: https://github.com/context-hub/docs/blob/main/docs/advanced/development-process.md#2025-04-20_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\ndocuments:\n  - description: \"Package Structure\"\n    outputPath: \"package-structure.md\"\n    sources:\n      - type: composer\n        packages: [ \"vendor/package-name\" ]\n        filePattern: \"*.php\"\n```\n\n----------------------------------------\n\nTITLE: Configuring PHP Signature Modifier in YAML\nDESCRIPTION: Example YAML configuration for using the PHP Signature Modifier in a context-hub project. It specifies the output path, source files, and applies the php-signature modifier.\nSOURCE: https://github.com/context-hub/docs/blob/main/docs/modifiers/php-signature.md#2025-04-20_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ndocuments:\n  - description: API Documentation\n    outputPath: docs/api.md\n    sources:\n      - type: file\n        description: API Source Files\n        sourcePaths:\n          - src/Api\n        filePattern: \"*.php\"\n        modifiers:\n          - php-signature\n```\n\n----------------------------------------\n\nTITLE: Git Diff Context Configuration\nDESCRIPTION: YAML configuration for generating context from git changes\nSOURCE: https://github.com/context-hub/docs/blob/main/docs/contributing.md#2025-04-20_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\n# Generate context for your changes\ndocuments:\n  - description: \"My Feature Implementation\"\n    outputPath: \"my-changes.md\"\n    sources:\n      - type: git_diff\n        description: \"My Changes\"\n        commit: \"unstaged\"  # or \"staged\" if you've already staged your changes\n```\n\n----------------------------------------\n\nTITLE: Hierarchical Issue Templates Implementation\nDESCRIPTION: A practical example demonstrating how to create a hierarchical system of issue templates using CTX prompts. Shows base templates, specialized extensions, and multi-level inheritance for bug and feature issue creation.\nSOURCE: https://github.com/context-hub/docs/blob/main/docs/mcp/prompts.md#2025-04-20_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nprompts:\n  # Base issue template\n  - id: template-issue\n    description: Template for creating issues\n    type: template\n    messages:\n      - role: user\n        content: \"Create a new issue with the following title and description: {{title}} {{description}}\"\n\n  # Bug issue template extending the base template\n  - id: bug-issue\n    description: Create a new bug issue\n    type: prompt\n    extend:\n      - id: template-issue\n        arguments:\n          title: 'Bug: {{title}}'\n          description: '{{description}}'\n    schema:\n      properties:\n        title:\n          description: The title of the bug\n        description:\n          description: The description of the bug\n      required:\n        - title\n        - description\n\n  # Feature issue template extending the base template\n  - id: feature-issue\n    description: Create a new feature issue\n    type: prompt\n    extend:\n      - id: template-issue\n        arguments:\n          title: 'Feature: {{title}}'\n          description: '{{description}}'\n    schema:\n      properties:\n        title:\n          description: The title of the feature\n        description:\n          description: The description of the feature\n      required:\n        - title\n        - description\n\n  # More complex template with priority\n  - id: template-complex-issue\n    type: template\n    description: Template for complex issues with priority\n    extend:\n      - id: template-issue\n        arguments:\n          title: '{{type}}: {{title}}'\n          description: '{{description}} \\n\\n**Priority**: {{priority}}'\n\n  # Priority bug issue using the complex template\n  - id: priority-bug-issue\n    description: Create a new priority bug issue\n    type: prompt\n    extend:\n      - id: template-complex-issue\n        arguments:\n          type: 'Bug'\n          priority: 'High'\n    schema:\n      properties:\n        title:\n          description: The title of the bug\n        description:\n          description: The description of the bug\n      required:\n        - title\n        - description\n```\n\n----------------------------------------\n\nTITLE: Studying Dependency Integration Points with CTX\nDESCRIPTION: This configuration helps understand how the project interacts with dependencies by looking for specific use patterns.\nSOURCE: https://github.com/context-hub/docs/blob/main/docs/advanced/development-process.md#2025-04-20_snippet_12\n\nLANGUAGE: yaml\nCODE:\n```\ndocuments:\n  - description: \"Dependency Integration\"\n    outputPath: \"dependency-integration.md\"\n    sources:\n      - type: file\n        sourcePaths: [ \"src\" ]\n        contains: [ \"use Vendor\\\\Package\", \"new Vendor\\\\Package\" ]\n        filePattern: \"*.php\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Version Comparison in YAML\nDESCRIPTION: Example of configuring Git diff source to compare changes between two versions.\nSOURCE: https://github.com/context-hub/docs/blob/main/docs/sources/git-diff-source.md#2025-04-20_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\ndocuments:\n  - description: Version Diff\n    outputPath: docs/version-diff.md\n    sources:\n      - type: git_diff\n        repository: .\n        commit: v1.0.0..v2.0.0\n        filePattern: \"*.php\"\n```\n\n----------------------------------------\n\nTITLE: Using Template Variables in YAML for Context-Hub Tool Configuration\nDESCRIPTION: Shows how to use template variables in tool configurations. The example demonstrates using a variable in command arguments for specifying an environment.\nSOURCE: https://github.com/context-hub/docs/blob/main/docs/mcp/custom-tools.md#2025-04-20_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\nargs: [ 'artisan', 'migrate', '--env={{env}}' ]\n```\n\n----------------------------------------\n\nTITLE: Advanced Tree Source Configuration with Metadata and Context\nDESCRIPTION: An advanced Tree source configuration that includes file sizes, modification dates, and custom directory descriptions. This example demonstrates depth limiting and contextual information for directories.\nSOURCE: https://github.com/context-hub/docs/blob/main/docs/sources/tree-source.md#2025-04-20_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\ndocuments:\n  - description: Core Components\n    outputPath: docs/core-structure.md\n    sources:\n      - type: tree\n        description: Core Components\n        sourcePaths:\n          - src/Core\n        filePattern:\n          - \"*.php\"\n          - \"*.json\"\n        maxDepth: 2\n        showSize: true\n        showLastModified: true\n        dirContext:\n          src/Core/Models: Data models used throughout the application\n          src/Core/Controllers: Request handlers and business logic\n```\n\n----------------------------------------\n\nTITLE: Generating Comprehensive Context for AI Assistants with CTX\nDESCRIPTION: This configuration creates rich context documents for AI assistants, combining custom text with relevant source code and tests.\nSOURCE: https://github.com/context-hub/docs/blob/main/docs/advanced/development-process.md#2025-04-20_snippet_13\n\nLANGUAGE: yaml\nCODE:\n```\ndocuments:\n  - description: \"Feature Implementation Context\"\n    outputPath: \"feature-context.md\"\n    sources:\n      - type: text\n        content: |\n          # Feature Implementation Request\n\n          I need to implement a new feature that does X, Y, and Z.\n          Here's the relevant code context for understanding the current system.\n      - type: file\n        sourcePaths: [ \"src/RelatedComponent\" ]\n        filePattern: \"*.php\"\n      - type: file\n        sourcePaths: [ \"tests/RelatedComponent\" ]\n        filePattern: \"*Test.php\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Date-Based Diff in YAML\nDESCRIPTION: Example showing how to configure Git diff source for changes since a specific date.\nSOURCE: https://github.com/context-hub/docs/blob/main/docs/sources/git-diff-source.md#2025-04-20_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\ndocuments:\n  - description: Changes Since Date\n    outputPath: docs/since-date.md\n    sources:\n      - type: git_diff\n        repository: .\n        commit: since:2023-01-15\n        filePattern: \"*.php\"\n```\n\n----------------------------------------\n\nTITLE: Repository Refactoring Guidelines\nDESCRIPTION: Template for moving business logic into readonly repositories with focus on query operations and consistent method naming conventions.\nSOURCE: https://github.com/context-hub/docs/blob/main/docs/advanced/instructions.md#2025-04-20_snippet_7\n\nLANGUAGE: markdown\nCODE:\n```\nYour task is to **move all business logic for finding entities** from **Activities** and **Controllers** into repositories while ensuring that repositories remain **readonly** (i.e., no creation, updates, or deletions inside repositories).\n\n---\n\n### **Key Guidelines:**\n\n1. **Encapsulation of Query Logic:**\n   - Analyze the provided code and identify where entity retrieval logic is scattered across **Activities** and **Controllers**.\n```\n\n----------------------------------------\n\nTITLE: Importing Shared Prompts Configuration\nDESCRIPTION: YAML configuration example showing how to import external prompt libraries into a project.\nSOURCE: https://github.com/context-hub/docs/blob/main/docs/advanced/instructions.md#2025-04-20_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\nimport:\n  - type: url\n    url: https://gist.githubusercontent.com/butschster/1b7e597691cc1a6476b15dc120ecbddb/raw/a4d706bf0738e440da04b71a32707bb9bb950f86/prompts.yaml\n```\n\n----------------------------------------\n\nTITLE: Extracting Critical Code Components with ctx Command\nDESCRIPTION: A bash command using ctx to extract critical code components from specific directories, focusing on PHP files in Core, Service, and Controller paths.\nSOURCE: https://github.com/context-hub/docs/blob/main/docs/advanced/development-steps.md#2025-04-20_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nctx --inline='{\n  \"documents\": [{\n    \"description\": \"Critical Components\",\n    \"outputPath\": \"critical-components.md\",\n    \"sources\": [{\n      \"type\": \"file\",\n      \"sourcePaths\": [\"src\"],\n      \"path\": [\"Core\", \"Service\", \"Controller\"],\n      \"filePattern\": \"*.php\"\n    }]\n  }]\n}'\n```\n\n----------------------------------------\n\nTITLE: Project Structure Tree Configuration\nDESCRIPTION: YAML configuration for generating documentation of the project's file structure using the tree source type\nSOURCE: https://github.com/context-hub/docs/blob/main/docs/contributing.md#2025-04-20_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\ndocuments:\n  - description: Project File Structure\n    outputPath: docs/file-structure.md\n    sources:\n      - type: tree\n        description: Project File Structure\n        sourcePaths:\n          - src\n```\n\n----------------------------------------\n\nTITLE: Configuring Specific Commit Diff in YAML\nDESCRIPTION: Example of configuring Git diff source to show changes from a specific commit hash.\nSOURCE: https://github.com/context-hub/docs/blob/main/docs/sources/git-diff-source.md#2025-04-20_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\ndocuments:\n  - description: Specific Commit Changes\n    outputPath: docs/specific-commit.md\n    sources:\n      - type: git_diff\n        repository: .\n        commit: abc1234\n        filePattern: \"*.php\"\n```\n\n----------------------------------------\n\nTITLE: Tagging Prompts in YAML for Context Hub\nDESCRIPTION: This snippet shows how to assign tags to prompts in Context Hub. It includes examples of two prompts with different tags, demonstrating how to categorize prompts by domain, skill level, or purpose.\nSOURCE: https://github.com/context-hub/docs/blob/main/docs/mcp/prompts.md#2025-04-20_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nprompts:\n  - id: python-helper\n    description: \"Helps with Python code and concepts\"\n    tags: [ \"python\", \"coding\", \"development\" ]\n    messages:\n      - role: user\n        content: \"You are a Python coding assistant. Help me write efficient Python code.\"\n\n  - id: creative-writing\n    description: \"Helps generate creative writing pieces\"\n    tags: [ \"writing\", \"creative\", \"content-generation\" ]\n    messages:\n      - role: user\n        content: \"You are a creative writing assistant. Help me generate compelling stories.\"\n```\n\n----------------------------------------\n\nTITLE: Generating Test Examples Context with CTX Command\nDESCRIPTION: This command uses CTX to generate context for existing test examples by specifying the tests directory and excluding fixtures and mocks.\nSOURCE: https://github.com/context-hub/docs/blob/main/docs/advanced/development-steps.md#2025-04-20_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nctx --inline='{\n  \"documents\": [{\n    \"description\": \"Existing Test Examples\",\n    \"outputPath\": \"test-examples.md\",\n    \"sources\": [{\n      \"type\": \"file\",\n      \"sourcePaths\": [\"tests\"],\n      \"filePattern\": \"*Test.php\",\n      \"notPath\": [\"Fixtures\", \"Mock\"]\n    }]\n  }]\n}'\n```\n\n----------------------------------------\n\nTITLE: Source Type Implementation Context Configuration\nDESCRIPTION: YAML configuration for exploring source type implementations and interfaces in the codebase\nSOURCE: https://github.com/context-hub/docs/blob/main/docs/contributing.md#2025-04-20_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n# Example: Create focused context for exploring source types\ndocuments:\n  - description: \"Source Type Implementation\"\n    outputPath: \"my-feature-context.md\"\n    sources:\n      - type: file\n        sourcePaths: [ \"src/Source/FileType\" ]\n        filePattern: \"*.php\"\n      - type: file\n        sourcePaths: [ \"src/Source\" ]\n        filePattern: \"*Interface.php\"\n```\n\n----------------------------------------\n\nTITLE: Displaying Always Available Tools Table in Markdown\nDESCRIPTION: This snippet shows a markdown table listing tools that are always available regardless of environment configuration. It includes tool keys and descriptions.\nSOURCE: https://github.com/context-hub/docs/blob/main/docs/mcp/tools.md#2025-04-20_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n| Tool Key                | Description                                      |\n|-------------------------|--------------------------------------------------|\n| `project-structure`     | Get information about the project structure      |\n| `filesystem-operations` | Perform basic filesystem queries                 |\n| `list-resources`        | List all available resources                     |\n| `json-schema`           | Get JSON schema for various entities             |\n| `document-content`      | Get document content by ID                       |\n| `list-tools`            | List all available tools (what you're using now) |\n```\n\n----------------------------------------\n\nTITLE: Reviewing Core Interfaces with ctx Command\nDESCRIPTION: A bash command using ctx to extract and review core interfaces from the project, focusing on files with 'Interface' in their name.\nSOURCE: https://github.com/context-hub/docs/blob/main/docs/advanced/development-steps.md#2025-04-20_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nctx --inline='{\n  \"documents\": [{\n    \"description\": \"Core Interfaces\",\n    \"outputPath\": \"core-interfaces.md\",\n    \"sources\": [{\n      \"type\": \"file\",\n      \"sourcePaths\": [\"src\"],\n      \"filePattern\": \"*Interface.php\"\n    }]\n  }]\n}'\n```\n\n----------------------------------------\n\nTITLE: User Question Example with Project Structure\nDESCRIPTION: An example of a user question about a payment processing error, including the project structure to help the LLM understand the codebase organization.\nSOURCE: https://github.com/context-hub/docs/blob/main/docs/advanced/smart-context-requesting.md#2025-04-20_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nI'm getting an error in our payment processing system when handling refunds. \nThe error says 'Invalid transactionstate'. How can I fix this?\n\nHere is my project structure:\n\n├── services/\n│   └── payment/\n│       └── app/\n│           └── src/\n│               └── Application/\n│                   ├── RefundService.php\n│                   ├── TransactionState.php\n│                   └── PaymentProcessor.php\n\nI attached JSON schema of Context generator. Use it to ask for the context you need to fix the issue in the following format:\n\nctx --inline='{\n  \"documents\": [{\n    \"description\": \"Document description\",\n    \"outputPath\": \"context.md\",\n    \"sources\": [{\n      \"type\": \"file\",\n      \"sourcePaths\": [\"src\"]\n    }]\n  }]\n}'\n```\n\n----------------------------------------\n\nTITLE: Configuring Conditional Arguments in YAML for Context-Hub Tools\nDESCRIPTION: Illustrates how to use conditional arguments in tool configurations. The example shows an argument that is only included when a specific condition is met.\nSOURCE: https://github.com/context-hub/docs/blob/main/docs/mcp/custom-tools.md#2025-04-20_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\nargs:\n  - name: \"--production\"\n    when: \"{{optimize}}\"\n```\n\n----------------------------------------\n\nTITLE: Implementing Keyword Removal Rules in YAML\nDESCRIPTION: Shows how to configure keyword removal rules to sanitize configuration files by removing or replacing text containing specific keywords. Includes options for case sensitivity and full line removal.\nSOURCE: https://github.com/context-hub/docs/blob/main/docs/modifiers/sanitizer.md#2025-04-20_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\ndocuments:\n  - description: Sanitized Configuration\n    outputPath: docs/sanitized-config.md\n    sources:\n      - type: file\n        sourcePaths:\n          - config\n        modifiers:\n          - name: sanitizer\n            options:\n              rules:\n                - type: keyword\n                  name: remove-sensitive\n                  keywords:\n                    - password\n                    - secret\n                    - private_key\n                  replacement: '[REDACTED]'\n                  caseSensitive: false\n                  removeLines: true\n```\n\n----------------------------------------\n\nTITLE: Process Explanation Prompt for Clear Communication\nDESCRIPTION: A prompt for creating clear explanations of processes or tasks, focusing on using simple language and structured step-by-step instructions with a collaborative approach to refinement.\nSOURCE: https://github.com/context-hub/docs/blob/main/docs/advanced/instructions.md#2025-04-20_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\nYou are an expert in providing **clear and understandable explanations** of what needs to be done and why. Your task \nis to help others easily grasp the essence of a process or task they need to accomplish.\n\n### Your tasks:\n1. **Explain what needs to be done and why**, using simple and clear language. Focus on the key points.\n2. **Clarify the purpose of each step** — explain why it's important and how it contributes to the overall goal.\n3. **Avoid complex terms** unless absolutely necessary. If you do use them, explain them in simple words.\n4. **Write in a friendly and informal style**, so your explanations are easy to follow.\n\n### Structure:\n- **Introduction:** Briefly explain what needs to be done and why it's necessary. Point out the final goal.\n- **Step-by-step explanation:** Break down the process into simple steps. Explain why each step is important and how \n  it helps reach the goal.\n- **Examples:** Provide examples or analogies to make your explanations even clearer.\n- **Conclusion:** Summarize the key points and reinforce why it's important to follow through with the process.\n\n### Collaboration:\n1. **Identify key participants** who will help refine and improve the explanation. This might include:\n   - A **business analyst** to provide context on the goals and requirements.\n   - A **subject matter expert** to ensure the accuracy of the process.\n   - An **AI prompt engineer** to check if the instructions are clear for AI-based applications.\n\n2. **Multi-round collaboration process:**\n   - Start with an initial draft of the explanation.\n   - Gather feedback from each participant, refining the explanation in multiple rounds.\n   - Incorporate critical comments and suggestions until the final version is complete.\n\n---\n\n**Instructions:**\n- Write concisely, avoiding unnecessary details.\n- Focus on practical, easy-to-apply explanations.\n- Keep the language at a B1 level.\n- Use a friendly, informal tone to make the content approachable.\n```\n\n----------------------------------------\n\nTITLE: Multiple Template Inheritance in CTX\nDESCRIPTION: Shows how prompts can extend multiple templates simultaneously. Templates are processed in order with each template's messages being added to the final prompt.\nSOURCE: https://github.com/context-hub/docs/blob/main/docs/mcp/prompts.md#2025-04-20_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nprompts:\n  - id: complex-prompt\n    type: prompt\n    extend:\n      - id: template1\n        arguments:\n          var1: \"value1\"\n      - id: template2\n        arguments:\n          var2: \"value2\"\n```\n\n----------------------------------------\n\nTITLE: Weather API HTTP Tool Configuration\nDESCRIPTION: HTTP tool configuration for fetching weather data with API key and city parameters.\nSOURCE: https://github.com/context-hub/docs/blob/main/docs/mcp/custom-tools.md#2025-04-20_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\ntools:\n  - id: weather-api\n    description: 'Get current weather data for a location'\n    type: http\n    schema:\n      type: object\n      properties:\n        city:\n          type: string\n          description: \"City name\"\n          default: \"New York\"\n        apiKey:\n          type: string\n          description: \"API key for weather service\"\n          default: \"\"\n      required: [ \"apiKey\" ]\n    requests:\n      - url: \"https://api.weatherservice.com/current\"\n        method: \"GET\"\n        headers:\n          Accept: \"application/json\"\n        query:\n          location: \"{{city}}\"\n          key: \"{{apiKey}}\"\n          units: \"metric\"\n```\n\n----------------------------------------\n\nTITLE: Test Coverage Tool Configuration\nDESCRIPTION: PHPUnit test execution tool with code coverage reporting configuration.\nSOURCE: https://github.com/context-hub/docs/blob/main/docs/mcp/custom-tools.md#2025-04-20_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\ntools:\n  - id: test-with-coverage\n    description: 'Run tests with code coverage'\n    type: run\n    commands:\n      - cmd: vendor/bin/phpunit\n        args: [ '--colors=always', '--coverage-html', 'logs/coverage' ]\n        workingDir: ${ROOT_DIR}\n        env:\n          XDEBUG_MODE: coverage\n```\n\n----------------------------------------\n\nTITLE: Database Design Template with DBML\nDESCRIPTION: Template for creating database structures using DBML syntax with emphasis on efficient design and table relationships.\nSOURCE: https://github.com/context-hub/docs/blob/main/docs/advanced/instructions.md#2025-04-20_snippet_5\n\nLANGUAGE: markdown\nCODE:\n```\nYou are an expert in Database Design specializing in creating efficient structures.\n\n- use dbml syntax to describe database\n- be creative\n- suggest your ideas and reasons why you think it should be done\n- think on every detail of database structure\n- link tables together\n```\n\n----------------------------------------\n\nTITLE: Defining YAML Structure for CRUD Controller Generation Prompts\nDESCRIPTION: This YAML structure defines a collection of prompts and templates for generating CRUD controllers. It includes various prompts for different frameworks and features, such as basic controllers, full controllers with advanced features, framework-specific implementations, validation patterns, repository patterns, service layers, and test suites.\nSOURCE: https://github.com/context-hub/docs/blob/main/docs/getting-started/json-schema.md#2025-04-20_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nprompts:\n  - id: \"crud-controller-base\"\n    description: \"Template for generating a basic CRUD controller\"\n    type: \"template\"\n    messages:\n      - role: \"user\"\n        content: |\n          Create a CRUD controller for the ${entity} entity with the following properties:\n\n          ${properties}\n\n          Use the ${framework} framework and implement standard CRUD operations.\n\n      - role: \"assistant\"\n        content: |\n          I'll create a CRUD controller for the ${entity} entity using ${framework}. Here's the implementation with standard operations:\n\n  - id: \"crud-controller-full\"\n    description: \"Generate a complete CRUD controller with validation and error handling\"\n    type: \"prompt\"\n    extend:\n      - id: \"crud-controller-base\"\n        arguments:\n          framework: \"${framework}\"\n          entity: \"${entity}\"\n          properties: \"${properties}\"\n    schema:\n      properties:\n        entity:\n          type: \"string\"\n          description: \"Name of the entity (e.g., User, Product, Order)\"\n        framework:\n          type: \"string\"\n          description: \"Framework to use (e.g., Laravel, Express, Spring)\"\n        properties:\n          type: \"string\"\n          description: \"List of entity properties with their types\"\n      required:\n        - \"entity\"\n        - \"framework\"\n        - \"properties\"\n    messages:\n      - role: \"user\"\n        content: |\n          In addition to the basic CRUD operations, please include:\n\n          1. Data validation for all inputs\n          2. Proper error handling with appropriate status codes\n          3. Documentation comments for each method\n          4. Pagination for list operations\n          5. Filtering capabilities\n          6. Sorting options\n          7. Comprehensive response formatting\n\n      - role: \"assistant\"\n        content: |\n          Here's a complete CRUD controller for the ${entity} entity with all the requested features:\n\n  - id: \"crud-controller-laravel\"\n    description: \"Generate a Laravel-specific CRUD controller\"\n    type: \"prompt\"\n    extend:\n      - id: \"crud-controller-base\"\n        arguments:\n          framework: \"Laravel\"\n          entity: \"${entity}\"\n          properties: \"${properties}\"\n    schema:\n      properties:\n        entity:\n          type: \"string\"\n          description: \"Name of the entity (e.g., User, Product, Order)\"\n        properties:\n          type: \"string\"\n          description: \"List of entity properties with their types\"\n        resource_transformer:\n          type: \"boolean\"\n          description: \"Whether to include a resource transformer\"\n      required:\n        - \"entity\"\n        - \"properties\"\n    messages:\n      - role: \"user\"\n        content: |\n          For this Laravel controller, also implement:\n\n          1. Form requests for validation\n          2. Resource classes for response transformation\n          3. Policy-based authorization\n          4. Route model binding\n          5. Laravel-specific best practices\n\n          {{#if resource_transformer}}\n          Include a detailed API Resource transformer for the responses.\n          {{/if}}\n\n      - role: \"assistant\"\n        content: |\n          Here's a Laravel-specific CRUD controller for the ${entity} entity following best practices:\n\n  - id: \"crud-controller-express\"\n    description: \"Generate an Express.js CRUD controller\"\n    type: \"prompt\"\n    extend:\n      - id: \"crud-controller-base\"\n        arguments:\n          framework: \"Express.js\"\n          entity: \"${entity}\"\n          properties: \"${properties}\"\n    schema:\n      properties:\n        entity:\n          type: \"string\"\n          description: \"Name of the entity (e.g., User, Product, Order)\"\n        properties:\n          type: \"string\"\n          description: \"List of entity properties with their types\"\n        mongoose:\n          type: \"boolean\"\n          description: \"Whether to use Mongoose for MongoDB integration\"\n        jwt_auth:\n          type: \"boolean\"\n          description: \"Whether to include JWT authentication\"\n      required:\n        - \"entity\"\n        - \"properties\"\n    messages:\n      - role: \"user\"\n        content: |\n          For this Express.js controller, also implement:\n\n          1. Express Router configuration\n          2. Middleware for input validation\n          3. Async/await pattern for database operations\n          4. Error handling middleware\n\n          {{#if mongoose}}\n          Include Mongoose schema and model definitions.\n          {{/if}}\n\n          {{#if jwt_auth}}\n          Add JWT authentication middleware to protect appropriate routes.\n          {{/if}}\n\n      - role: \"assistant\"\n        content: |\n          Here's an Express.js CRUD controller for the ${entity} entity with the requested features:\n\n  - id: \"crud-controller-spring\"\n    description: \"Generate a Spring Boot CRUD controller\"\n    type: \"prompt\"\n    extend:\n      - id: \"crud-controller-base\"\n        arguments:\n          framework: \"Spring Boot\"\n          entity: \"${entity}\"\n          properties: \"${properties}\"\n    schema:\n      properties:\n        entity:\n          type: \"string\"\n          description: \"Name of the entity (e.g., User, Product, Order)\"\n        properties:\n          type: \"string\"\n          description: \"List of entity properties with their types\"\n        jpa:\n          type: \"boolean\"\n          description: \"Whether to include JPA/Hibernate integration\"\n        swagger:\n          type: \"boolean\"\n          description: \"Whether to include Swagger documentation\"\n      required:\n        - \"entity\"\n        - \"properties\"\n    messages:\n      - role: \"user\"\n        content: |\n          For this Spring Boot controller, also implement:\n\n          1. Spring MVC annotations\n          2. Bean Validation\n          3. ResponseEntity return types\n          4. Exception handling with @ControllerAdvice\n          5. RESTful best practices\n\n          {{#if jpa}}\n          Include JPA entity and repository classes.\n          {{/if}}\n\n          {{#if swagger}}\n          Add OpenAPI/Swagger annotations for API documentation.\n          {{/if}}\n\n      - role: \"assistant\"\n        content: |\n          Here's a Spring Boot CRUD controller for the ${entity} entity with the requested features:\n\n  - id: \"crud-validation-patterns\"\n    description: \"Common validation patterns for CRUD operations\"\n    type: \"template\"\n    messages:\n      - role: \"user\"\n        content: |\n          Provide validation patterns for a ${entity} with these properties:\n\n          ${properties}\n\n          Using the ${framework} framework.\n\n      - role: \"assistant\"\n        content: |\n          Here are validation patterns for the ${entity} entity using ${framework}:\n\n  - id: \"crud-repository-pattern\"\n    description: \"Implementation of repository pattern for CRUD operations\"\n    type: \"prompt\"\n    schema:\n      properties:\n        entity:\n          type: \"string\"\n          description: \"Name of the entity (e.g., User, Product, Order)\"\n        framework:\n          type: \"string\"\n          description: \"Framework to use (e.g., Laravel, Express, Spring)\"\n        database:\n          type: \"string\"\n          description: \"Database type (e.g., MySQL, PostgreSQL, MongoDB)\"\n      required:\n        - \"entity\"\n        - \"framework\"\n        - \"database\"\n    messages:\n      - role: \"user\"\n        content: |\n          Create a repository pattern implementation for ${entity} entity using ${framework} with ${database} database. Include:\n\n          1. Interface definition\n          2. Concrete implementation\n          3. Dependency injection setup\n          4. Common query methods\n          5. Transaction support\n\n      - role: \"assistant\"\n        content: |\n          Here's a repository pattern implementation for the ${entity} entity:\n\n  - id: \"crud-service-layer\"\n    description: \"Service layer for CRUD operations\"\n    type: \"prompt\"\n    schema:\n      properties:\n        entity:\n          type: \"string\"\n          description: \"Name of the entity (e.g., User, Product, Order)\"\n        framework:\n          type: \"string\"\n          description: \"Framework to use (e.g., Laravel, Express, Spring)\"\n        features:\n          type: \"string\"\n          description: \"Additional features to implement (e.g., caching, events, logging)\"\n      required:\n        - \"entity\"\n        - \"framework\"\n    messages:\n      - role: \"user\"\n        content: |\n          Create a service layer for ${entity} entity using ${framework}. Include:\n\n          1. Service interface\n          2. Service implementation\n          3. Business logic separation from controllers\n          4. Error handling strategies\n\n          {{#if features}}\n          Also implement these additional features: ${features}\n          {{/if}}\n\n      - role: \"assistant\"\n        content: |\n          Here's a service layer implementation for the ${entity} entity:\n\n  - id: \"crud-test-suite\"\n    description: \"Test suite for CRUD operations\"\n    type: \"prompt\"\n    schema:\n      properties:\n        entity:\n          type: \"string\"\n          description: \"Name of the entity (e.g., User, Product, Order)\"\n        framework:\n          type: \"string\"\n          description: \"Framework to use (e.g., Laravel, Express, Spring)\"\n        test_framework:\n          type: \"string\"\n          description: \"Testing framework to use (e.g., PHPUnit, Jest, JUnit)\"\n      required:\n        - \"entity\"\n        - \"framework\"\n        - \"test_framework\"\n    messages:\n      - role: \"user\"\n        content: |\n          Create a test suite for ${entity} CRUD operations using ${test_framework} with ${framework}. Include:\n\n          1. Unit tests for each CRUD operation\n          2. Integration tests for API endpoints\n          3. Mock implementations for dependencies\n          4. Test fixtures and factories\n          5. Edge case testing\n\n      - role: \"assistant\"\n        content: |\n          Here's a comprehensive test suite for the ${entity} CRUD operations:\n\n  - id: \"crud-api-documentation\"\n```\n\n----------------------------------------\n\nTITLE: Environment Variables Configuration in YAML\nDESCRIPTION: Example showing how to use environment variables in documentation content using ${ENV_NAME} syntax.\nSOURCE: https://github.com/context-hub/docs/blob/main/docs/sources/text-source.md#2025-04-20_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\ndocuments:\n  - description: Environment-Specific Documentation\n    outputPath: docs/env-docs.md\n    sources:\n      - type: text\n        description: API Configuration\n        content: |\n          # ${ENV_NAME} Environment\n\n          Base URL: https://api.${ENV_NAME}.example.com\n\n          API Key: Please use the ${ENV_NAME}_API_KEY environment variable\n        tag: CONFIG\n```\n\n----------------------------------------\n\nTITLE: Directory-Only Tree Source Configuration\nDESCRIPTION: A Tree source configuration that displays only directories and omits files from the visualization. This configuration is useful for understanding overall project architecture without file-level details.\nSOURCE: https://github.com/context-hub/docs/blob/main/docs/sources/tree-source.md#2025-04-20_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\ndocuments:\n  - description: Project Directory Structure\n    outputPath: docs/dir-structure.md\n    sources:\n      - type: tree\n        description: Project Directory Structure\n        sourcePaths:\n          - .\n        includeFiles: false\n        maxDepth: 2\n```\n\n----------------------------------------\n\nTITLE: Configuring File-Specific Diff in YAML\nDESCRIPTION: Example showing how to configure Git diff source for changes to a specific file in a commit.\nSOURCE: https://github.com/context-hub/docs/blob/main/docs/sources/git-diff-source.md#2025-04-20_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\ndocuments:\n  - description: Specific File Changes\n    outputPath: docs/file-changes.md\n    sources:\n      - type: git_diff\n        repository: .\n        commit: abc1234:path/to/file.php\n        filePattern: \"*.php\"\n```\n\n----------------------------------------\n\nTITLE: Downloading CTX JSON Schema via Command Line\nDESCRIPTION: Provides the command to download the CTX JSON schema file to the current working directory using the ctx CLI tool.\nSOURCE: https://github.com/context-hub/docs/blob/main/docs/getting-started/ide-integration.md#2025-04-20_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nctx schema --download\n```\n\n----------------------------------------\n\nTITLE: Example of Very Verbose Output in CTX\nDESCRIPTION: Sample console output when running CTX with the very verbose flag, showing detailed INFO level messages about document compilation process.\nSOURCE: https://github.com/context-hub/docs/blob/main/docs/getting-started/logging.md#2025-04-20_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n[INFO] Compiling Variable Replacement System...\n\n[INFO] [documents] Starting document compilation\n{\n    \"document\": \"Variable Replacement System\",\n    \"outputPath\": \"16-variable-replacement.md\"\n}\n\n[INFO] [documents] Processing document sources\n{\n    \"sourceCount\": 3,\n    \"hasDocumentModifiers\": false\n}\n\n[INFO] [text-source] Fetching text source content\n{\n    \"description\": \"\",\n    \"tag\": \"INSTRUCTION\",\n    \"contentLength\": 129\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Last Week's Changes in YAML\nDESCRIPTION: Example showing how to configure Git diff source to capture changes from the last week for PHP files.\nSOURCE: https://github.com/context-hub/docs/blob/main/docs/sources/git-diff-source.md#2025-04-20_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\ndocuments:\n  - description: Last Week's Changes\n    outputPath: docs/last-week.md\n    sources:\n      - type: git_diff\n        commit: last-week\n        filePattern: \"*.php\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Specific Date Diff in YAML\nDESCRIPTION: Example of configuring Git diff source for changes on a specific date.\nSOURCE: https://github.com/context-hub/docs/blob/main/docs/sources/git-diff-source.md#2025-04-20_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\ndocuments:\n  - description: Changes On Date\n    outputPath: docs/on-date.md\n    sources:\n      - type: git_diff\n        repository: .\n        commit: date:2023-01-15\n        filePattern: \"*.php\"\n```\n\n----------------------------------------\n\nTITLE: Defining Schema in YAML Configuration for CTX\nDESCRIPTION: Demonstrates how to include the $schema property in a YAML configuration file for CTX to enable IDE validation and autocompletion.\nSOURCE: https://github.com/context-hub/docs/blob/main/docs/getting-started/ide-integration.md#2025-04-20_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n$schema: 'https://raw.githubusercontent.com/context-hub/generator/refs/heads/main/json-schema.json'\ndocuments:\n  ...\n```\n\n----------------------------------------\n\nTITLE: Example Tree Source Output in ASCII Format\nDESCRIPTION: Example of the ASCII tree structure output generated by the Tree source feature. This shows how file hierarchies are displayed, including size information, character counts, and directory comments.\nSOURCE: https://github.com/context-hub/docs/blob/main/docs/sources/tree-source.md#2025-04-20_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\n└── src/ [87.6 KB, 89,744 chars]\n    └── ConfigLoader/ [22.8 KB, 23,306 chars] # Contains all application controllers\n        ├── CompositeConfigLoader.php [2.1 KB, 2,156 chars]\n        ├── ConfigLoader.php [2.3 KB, 2,405 chars]\n        ├── ConfigLoaderFactory.php [3.1 KB, 3,133 chars]\n        ├── ConfigLoaderInterface.php [739.0 B, 739 chars]\n        ├── Exception/ [452.0 B, 452 chars]\n        │   ├── ConfigLoaderException.php [229.0 B, 229 chars]\n        │   ├── ReaderException.php [223.0 B, 223 chars]\n        ├── Parser/ [4.3 KB, 4,385 chars]\n        │   ├── CompositeConfigParser.php [1.2 KB, 1,231 chars]\n        │   ├── ConfigParser.php [1.8 KB, 1,820 chars]\n        │   ├── ConfigParserInterface.php [455.0 B, 455 chars]\n        │   ├── ConfigParserPluginInterface.php [879.0 B, 879 chars]\n        ├── Reader/ [6.8 KB, 7,010 chars]\n        │   ├── AbstractReader.php [2.6 KB, 2,642 chars]\n        │   ├── JsonReader.php [842.0 B, 842 chars]\n        │   ├── PhpReader.php [1.6 KB, 1,613 chars]\n        │   ├── ReaderInterface.php [774.0 B, 774 chars]\n        │   ├── YamlReader.php [1.1 KB, 1,139 chars]\n        ├── Registry/ [3.0 KB, 3,026 chars]\n        │   └── ConfigRegistry.php [1.7 KB, 1,716 chars]\n        │   └── DocumentRegistry.php [859.0 B, 859 chars]\n        │   └── RegistryInterface.php [451.0 B, 451 chars]\n    └── Lib/ [64.9 KB, 66,438 chars]\n        └── Content/ [5.8 KB, 5,910 chars]\n            ├── ContentBlock.php [1.1 KB, 1,141 chars]\n            ├── ContentBuilder.php [4.1 KB, 4,224 chars]\n            ├── ContentBuilderFactory.php [545.0 B, 545 chars]\n        └── Files.php [1.6 KB, 1,678 chars]\n        └── Finder/ [1.3 KB, 1,363 chars]\n            ├── FinderInterface.php [828.0 B, 828 chars]\n            ├── FinderResult.php [535.0 B, 535 chars]\n        └── GithubClient/ [4.2 KB, 4,324 chars]\n            ├── GithubClient.php [3.2 KB, 3,245 chars]\n            ├── GithubClientInterface.php [1.1 KB, 1,079 chars]\n```\n\n----------------------------------------\n\nTITLE: PHP Class After Signature Modification\nDESCRIPTION: The resulting PHP class after applying the PHP Signature Modifier. It retains only the class name and public method signatures, removing private members and implementation details.\nSOURCE: https://github.com/context-hub/docs/blob/main/docs/modifiers/php-signature.md#2025-04-20_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nclass Example \n{\n    public function doSomething($param) \n    {\n        /* ... */\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Tree View Output Example\nDESCRIPTION: Example output showing an enhanced tree view with file metadata and directory descriptions. This displays the project structure with sizes, dates, and character counts.\nSOURCE: https://github.com/context-hub/docs/blob/main/docs/sources/composer-source.md#2025-04-20_snippet_4\n\nLANGUAGE: text\nCODE:\n```\nProject\n├── src/ [4.2 MB, 2024-03-12, 25,483 chars]\n│   ├── Controller/ [756 KB, 2024-03-10, 7,521 chars] # Application controllers\n│   │   ├── ApiController.php [328 KB, 2024-03-10, 3,845 chars]\n│   │   └── WebController.php [428 KB, 2024-03-05, 3,676 chars]\n│   ├── Models/ [1.2 MB, 2024-03-12, 12,345 chars] # Domain models and entities\n│   │   ├── User.php [128 KB, 2024-03-05, 1,234 chars]\n│   │   └── Product.php [96 KB, 2024-03-12, 987 chars]\n```\n\n----------------------------------------\n\nTITLE: Defining Schema in JSON Configuration for CTX\nDESCRIPTION: Shows how to include the $schema property in a JSON configuration file for CTX to enable IDE validation and autocompletion.\nSOURCE: https://github.com/context-hub/docs/blob/main/docs/getting-started/ide-integration.md#2025-04-20_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"$schema\": \"https://raw.githubusercontent.com/context-hub/generator/refs/heads/main/json-schema.json\",\n  \"documents\": [\n    ...\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Using Quiet Mode with CTX\nDESCRIPTION: Command to run CTX in quiet mode (-q flag) to suppress all output, including errors. Useful for background execution or scripting without output.\nSOURCE: https://github.com/context-hub/docs/blob/main/docs/getting-started/logging.md#2025-04-20_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nctx -q\n```\n\n----------------------------------------\n\nTITLE: Detailed Tree View Configuration for Composer Source\nDESCRIPTION: Example showing how to customize the tree view with detailed configuration options. This includes file metadata display and directory context descriptions.\nSOURCE: https://github.com/context-hub/docs/blob/main/docs/sources/composer-source.md#2025-04-20_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\ndocuments:\n  - description: Filtered Composer Dependencies\n    outputPath: docs/filtered-deps.md\n    sources:\n      - type: composer\n        description: Filtered Dependencies\n        composerPath: .\n        packages:\n          - symfony/console\n          - symfony/http-foundation\n        treeView:\n          enabled: true\n          showSize: true\n          showLastModified: true\n          showCharCount: true\n          includeFiles: true\n          maxDepth: 3\n          dirContext:\n            \"src/Controller\": \"Application controllers\"\n            \"src/Models\": \"Domain models and entities\"\n```\n\n----------------------------------------\n\nTITLE: Reading Files with file-read Tool\nDESCRIPTION: Example of using the file-read tool to read content from a file with optional encoding support.\nSOURCE: https://github.com/context-hub/docs/blob/main/docs/mcp/filesystem.md#2025-04-20_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"path\": \"src/ExampleClass.php\"\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Schema Reference in JSON Configuration\nDESCRIPTION: Shows how to add the JSON Schema reference to a JSON configuration file to enable validation and autocompletion.\nSOURCE: https://github.com/context-hub/docs/blob/main/docs/getting-started/json-schema.md#2025-04-20_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"$schema\": \"https://raw.githubusercontent.com/context-hub/generator/refs/heads/main/json-schema.json\",\n  \"documents\": [\n    // Your document configuration\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: PHP Code Analysis Template\nDESCRIPTION: Template for analyzing PHP code with focus on PHP 8.3 features, including detailed breakdown of functionality, use cases, configuration options, and class relationships.\nSOURCE: https://github.com/context-hub/docs/blob/main/docs/advanced/instructions.md#2025-04-20_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\nYou are an expert in code analysis and explanation.\nGiven the following PHP code, analyze the feature and provide a detailed breakdown that includes the sections outlined below.\n\n1. Feature Explanation\n\n- Provide a thorough explanation of the core functionality implemented in the code.\n\n2. Use Cases (5 Examples)\n\n- List **five potential use cases** where this feature could be applied.\n- For each use case:\n  - Include a short code example demonstrating its implementation.\n  - Ensure the code examples use **PHP 8.3 features** such as **Constructor Property Promotion** and \n    **Named Arguments**, following the latest best practices.\n```\n\n----------------------------------------\n\nTITLE: Writing Files with file-write Tool\nDESCRIPTION: Example of using the file-write tool to write content to a file with optional directory creation.\nSOURCE: https://github.com/context-hub/docs/blob/main/docs/mcp/filesystem.md#2025-04-20_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"path\": \"src/utils/Helper.php\",\n  \"content\": \"<?php\\n\\ndeclare(strict_types=1);\\n\\nclass Helper\\n{\\n    // Class implementation\\n}\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring MCP Server for Windows\nDESCRIPTION: JSON configuration for registering the CTX MCP server on Windows systems. It specifies the path to the CTX executable and the project path.\nSOURCE: https://github.com/context-hub/docs/blob/main/docs/mcp/index.md#2025-04-20_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"mcpServers\": {\n    \"ctx\": {\n      \"command\": \"C:\\\\ctx.exe\",\n      \"args\": [\n        \"server\",\n        \"-cC:\\\\Path\\\\To\\\\Project\"\n      ]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: PHP Class Before Signature Modification\nDESCRIPTION: An example PHP class before applying the PHP Signature Modifier. It includes private properties, public and private methods with implementation details.\nSOURCE: https://github.com/context-hub/docs/blob/main/docs/modifiers/php-signature.md#2025-04-20_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nclass Example \n{\n    private $property;\n    \n    public function doSomething($param)\n    {\n        // Implementation...\n        return $result;\n    }\n    \n    private function helperMethod()\n    {\n        // Implementation...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Getting File Info with file-info Tool\nDESCRIPTION: Example of using the file-info tool to get detailed information about files or directories.\nSOURCE: https://github.com/context-hub/docs/blob/main/docs/mcp/filesystem.md#2025-04-20_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"path\": \"src/ExampleClass.php\"\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"path\": \"src/ExampleClass.php\",\n  \"exists\": true,\n  \"type\": \"file\",\n  \"size\": 1024,\n  \"permissions\": \"644\",\n  \"lastModified\": \"2023-04-12 15:30:42\"\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables with WSL for MCP Server\nDESCRIPTION: JSON configuration showing how to set environment variables when using WSL. Since the env property doesn't properly pass variables to the WSL environment, they must be set directly in the bash command.\nSOURCE: https://github.com/context-hub/docs/blob/main/docs/mcp/index.md#2025-04-20_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"mcpServers\": {\n    \"ctx\": {\n      \"command\": \"wsl.exe\",\n      \"args\": [\n        \"bash\",\n        \"-c\",\n        \"export GITHUB_PAT=ghp_your_personal_access_token && export MCP_FILE_OPERATIONS=true && ctx server -c /path/to/project\"\n      ]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Document-Level Modifiers in YAML\nDESCRIPTION: Example configuration showing how to set up document-level modifiers including PHP signature processing and content sanitization rules. The configuration demonstrates modifier options like keyword-based sanitization for sensitive data.\nSOURCE: https://github.com/context-hub/docs/blob/main/docs/modifiers/document-level.md#2025-04-20_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ndocuments:\n  - description: API Documentation\n    outputPath: docs/api.md\n    modifiers:\n      - php-signature\n      - name: sanitizer\n        options:\n          rules:\n            - type: keyword\n              keywords:\n                - password\n                - secret\n              replacement: \"[REDACTED]\"\n    sources:\n      - type: file\n        description: API Source Files\n        sourcePaths:\n          - src/Api\n        filePattern: \"*.php\"\n        modifiers:\n          - php-docs\n```\n\n----------------------------------------\n\nTITLE: Using Very Verbose Output Flag with CTX\nDESCRIPTION: Command to run CTX with very verbose output (-vv flag) to display error, warning, notice, and info messages in the console.\nSOURCE: https://github.com/context-hub/docs/blob/main/docs/getting-started/logging.md#2025-04-20_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nctx -vv\n```\n\n----------------------------------------\n\nTITLE: Installing CTX via Curl\nDESCRIPTION: Command to download and install the CTX tool using a shell script\nSOURCE: https://github.com/context-hub/docs/blob/main/docs/quick-start.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -sSL https://raw.githubusercontent.com/context-hub/generator/main/download-latest.sh | sh\n```\n\n----------------------------------------\n\nTITLE: Using Debug Output Flag with CTX\nDESCRIPTION: Command to run CTX with debug output (-vvv flag) to display all log levels including debug messages for troubleshooting and understanding internal workings.\nSOURCE: https://github.com/context-hub/docs/blob/main/docs/getting-started/logging.md#2025-04-20_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nctx -vvv\n```\n\n----------------------------------------\n\nTITLE: Nested Template Extensions in CTX\nDESCRIPTION: Demonstrates how templates can extend other templates, creating a chain of inheritance where variables can be passed through multiple levels of templates.\nSOURCE: https://github.com/context-hub/docs/blob/main/docs/mcp/prompts.md#2025-04-20_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nprompts:\n  - id: base-template\n    type: template\n    messages:\n      - role: user\n        content: \"Base content with {{baseVar}}.\"\n\n  - id: intermediate-template\n    type: template\n    extend:\n      - id: base-template\n        arguments:\n          baseVar: \"{{intermediateVar}}\"\n    messages:\n      - role: user\n        content: \"Intermediate content with {{intermediateVar}}.\"\n\n  - id: final-prompt\n    type: prompt\n    extend:\n      - id: intermediate-template\n        arguments:\n          intermediateVar: \"final value\"\n    messages:\n      - role: user\n        content: \"Final content.\"\n```\n\n----------------------------------------\n\nTITLE: Example of Debug Output in CTX\nDESCRIPTION: Sample console output when running CTX with the debug flag, showing detailed DEBUG level messages about file processing and internal operations.\nSOURCE: https://github.com/context-hub/docs/blob/main/docs/getting-started/logging.md#2025-04-20_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n[INFO] [file-source] Fetching file source content\n{\n    \"description\": \"Variable provider implementations\",\n    \"basePath\": \"\\/root\\/repos\\/butschster\\/context-generator\",\n    \"hasModifiers\": true,\n    \"showTreeView\": true\n}\n\n[DEBUG] [file-source] Creating content builder\n\n[DEBUG] [file-source] Finding files\n{\n    \"in\": [\n      \"\\/root\\/repos\\/butschster\\/context-generator\\/src\\/Lib\\/Variable\\/Provider\"\n    ],\n    \"files\": null\n}\n\n[DEBUG] [file-source] Files found\n{\n \"fileCount\": 4\n}\n\n[DEBUG] [file-source] Adding tree view to output\n\n[DEBUG] [file-source] Processing files\n\n[DEBUG] [file-source] Processing file\n{\n    \"file\": \"\\/src\\/Lib\\/Variable\\/Provider\\/CompositeVariableProvider.php\",\n    \"index\": 1,\n    \"total\": 4,\n    \"size\": 1724\n}`\n```\n\n----------------------------------------\n\nTITLE: Generating Component Documentation with CTX\nDESCRIPTION: This configuration creates comprehensive documentation for a component, including PHP documentation with specific formatting options.\nSOURCE: https://github.com/context-hub/docs/blob/main/docs/advanced/development-process.md#2025-04-20_snippet_15\n\nLANGUAGE: yaml\nCODE:\n```\ndocuments:\n  - description: \"Component Documentation\"\n    outputPath: \"component-docs.md\"\n    sources:\n      - type: file\n        sourcePaths: [ \"src/Component\" ]\n        filePattern: \"*.php\"\n        modifiers:\n          - name: \"php-docs\"\n            options:\n              include_implementations: false\n              class_heading_level: 2\n```\n\n----------------------------------------\n\nTITLE: Adding Schema Reference in YAML Configuration\nDESCRIPTION: Shows how to add the JSON Schema reference to a YAML configuration file to enable validation and autocompletion.\nSOURCE: https://github.com/context-hub/docs/blob/main/docs/getting-started/json-schema.md#2025-04-20_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n$schema: 'https://raw.githubusercontent.com/context-hub/generator/refs/heads/main/json-schema.json'\ndocuments:\n# Your document configuration\n```\n\n----------------------------------------\n\nTITLE: Example of Verbose Output in CTX\nDESCRIPTION: Sample console output when running CTX with the verbose flag, showing INFO, ERROR and WARNING level messages with detailed error information.\nSOURCE: https://github.com/context-hub/docs/blob/main/docs/getting-started/logging.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n[INFO] Compiling Context Generator Architecture Overview...\n\n[ERROR] [tree-source] Error while generating tree: You must call one of in() or append() methods before iterating over a Finder.\n{\n    \"error\": \"You must call one of in() or append() methods before iterating over a Finder.\",\n    \"file\": \"phar:\\/\\/\\/usr\\/local\\/bin\\/ctx\\/vendor\\/symfony\\/finder\\/Finder.php\",\n    \"line\": 667\n}\n\n[ERROR] [documents] Error processing source\n{\n    \"sourceType\": \"Butschster\\\\ContextGenerator\\\\Source\\\\Tree\\\\TreeSource\",\n    \"error\": \"Error while generating tree: You must call one of in() or append() methods before iterating over a Finder.\",\n    \"file\": \"phar:\\/\\/\\/usr\\/local\\/bin\\/ctx\\/src\\/Source\\/Tree\\/TreeSourceFetcher.php\",\n    \"line\": 155\n}\n\n[WARNING] [documents] Document compiled with errors\n{\n    \"errorCount\": 1\n}\n\n```\n\n----------------------------------------\n\nTITLE: Moving Files with file-move Tool\nDESCRIPTION: Example of using the file-move tool to move files to different locations with optional directory creation.\nSOURCE: https://github.com/context-hub/docs/blob/main/docs/mcp/filesystem.md#2025-04-20_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"source\": \"src/utils/Helper.php\",\n  \"destination\": \"src/helpers/UtilityHelper.php\"\n}\n```\n\n----------------------------------------\n\nTITLE: Complete MCP Source Configuration Example in YAML\nDESCRIPTION: A comprehensive example showing how to configure multiple MCP sources with different operations and server types. This demonstrates server definitions, various operation types, and multiple source configurations in a single document.\nSOURCE: https://github.com/context-hub/docs/blob/main/docs/sources/mcp-source.md#2025-04-20_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\nsettings:\n  mcp:\n    servers:\n      github:\n        command: docker\n        args:\n          - run\n          - \"-i\"\n          - \"--rm\"\n          - \"-e\"\n          - \"GITHUB_TOKEN\"\n          - \"ghcr.io/github/github-mcp-server\"\n        env:\n          GITHUB_TOKEN: '{{GITHUB_TOKEN}}'\n\n      local-mcp:\n        url: \"http://localhost:8080/mcp\"\n        headers:\n          Authorization: \"Bearer {{LOCAL_TOKEN}}\"\n\ndocuments:\n  - description: \"Project Documentation\"\n    outputPath: \"docs/project.md\"\n    sources:\n      # Fetch issue information\n      - type: mcp\n        description: \"GitHub Issue\"\n        server: github\n        operation:\n          type: tool.call\n          name: get_issue\n          arguments:\n            owner: context-hub\n            repo: generator\n            issue_number: 158\n\n      # Read repository contents\n      - type: mcp\n        description: \"Repository Contents\"\n        server: github\n        operation:\n          type: resource.read\n          resources:\n            - \"repo://context-hub/generator/README.md\"\n            - \"repo://context-hub/generator/docs/architecture.md\"\n\n      # Use a local MCP server\n      - type: mcp\n        description: \"Code Analysis\"\n        server: local-mcp\n        operation:\n          type: tool.call\n          name: analyze_code\n          arguments:\n            path: \"./src\"\n            language: \"php\"\n```\n\n----------------------------------------\n\nTITLE: Defining Pre-Defined MCP Servers in YAML\nDESCRIPTION: Example configuration showing how to define MCP servers in the global settings section and then reference them by name in sources. This approach allows reusing server configurations across multiple sources.\nSOURCE: https://github.com/context-hub/docs/blob/main/docs/sources/mcp-source.md#2025-04-20_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n# Define server configurations in settings\nsettings:\n  mcp:\n    servers:\n      github:\n        command: docker\n        args:\n          - run\n          - \"-i\"\n          - \"--rm\"\n          - \"-e\"\n          - \"GITHUB_PERSONAL_ACCESS_TOKEN\"\n          - \"ghcr.io/github/github-mcp-server\"\n        env:\n          GITHUB_PERSONAL_ACCESS_TOKEN: '{{GITHUB_PAT}}'\n\n# Reference the server by name in sources\ndocuments:\n  - description: \"GitHub Integration\"\n    outputPath: \"docs/github-content.md\"\n    sources:\n      - type: mcp\n        server: github\n        operation:\n        # Operation details here\n```\n\n----------------------------------------\n\nTITLE: Using Variables in MCP Server Configurations\nDESCRIPTION: Example showing how to use environment variables in server configurations. Variables are enclosed in double curly braces and can be used to parametrize server settings without hardcoding sensitive information.\nSOURCE: https://github.com/context-hub/docs/blob/main/docs/sources/mcp-source.md#2025-04-20_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\nsettings:\n  mcp:\n    servers:\n      github:\n        command: docker\n        args:\n          - run\n          - \"-i\"\n          - \"--rm\"\n          - \"-e\"\n          - \"GITHUB_TOKEN\"\n          - \"ghcr.io/github/github-mcp-server:${VERSION}\"\n        env:\n          GITHUB_TOKEN: '{{GITHUB_TOKEN}}'\n```\n\n----------------------------------------\n\nTITLE: Exploring Configuration and Entry Points with CTX\nDESCRIPTION: This configuration helps understand system initialization and configuration by targeting specific file types and patterns.\nSOURCE: https://github.com/context-hub/docs/blob/main/docs/advanced/development-process.md#2025-04-20_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\ndocuments:\n  - description: \"Configuration and Entry Points\"\n    outputPath: \"configuration.md\"\n    sources:\n      - type: file\n        sourcePaths: [ \".\" ]\n        filePattern: [ \"*.json\", \"*.yaml\", \"*.yml\" ]\n      - type: file\n        sourcePaths: [ \"src\" ]\n        contains: [ \"main\", \"bootstrap\", \"initialize\" ]\n        filePattern: \"*.php\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Resource Read Operation in YAML\nDESCRIPTION: Configuration for a resource read operation that retrieves one or more resources from an MCP server. This operation type is used to fetch content from specific resource URIs.\nSOURCE: https://github.com/context-hub/docs/blob/main/docs/sources/mcp-source.md#2025-04-20_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\noperation:\n  type: resource.read\n  resources:\n    - \"repo://context-hub/generator/contents\"\n    - \"file://path/to/resource.md\"\n```\n\n----------------------------------------\n\nTITLE: Basic Text Source Configuration in YAML\nDESCRIPTION: Demonstrates basic configuration for including custom text content in project documentation with description, output path and content source definition.\nSOURCE: https://github.com/context-hub/docs/blob/main/docs/sources/text-source.md#2025-04-20_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ndocuments:\n  - description: Project Documentation\n    outputPath: docs/project.md\n    sources:\n      - type: text\n        description: Custom Notes\n        content: |\n          # Project Notes\n\n          This is additional context for the AI.\n        tag: PROJECT_NOTES\n```\n\n----------------------------------------\n\nTITLE: Installing Context Generator to a custom path\nDESCRIPTION: This command allows installation of Context Generator to a custom path, avoiding the need for sudo privileges. It's useful for user-specific installations.\nSOURCE: https://github.com/context-hub/docs/blob/main/docs/getting-started.md#2025-04-20_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncurl -sSL https://raw.githubusercontent.com/context-hub/generator/main/download-latest.sh | sh -s $HOME/.local/bin\n```\n\n----------------------------------------\n\nTITLE: Renaming Files with file-rename Tool\nDESCRIPTION: Example of using the file-rename tool to rename files or directories.\nSOURCE: https://github.com/context-hub/docs/blob/main/docs/mcp/filesystem.md#2025-04-20_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"path\": \"src/OldName.php\",\n  \"newPath\": \"src/NewName.php\"\n}\n```"
  }
]