[
  {
    "owner": "williamboman",
    "repo": "mason.nvim",
    "content": "TITLE: Setting up Mason.nvim in Lua\nDESCRIPTION: Basic setup of the Mason.nvim plugin using the setup() function. This enhances Neovim's PATH and registers commands.\nSOURCE: https://github.com/williamboman/mason.nvim/blob/main/doc/mason.txt#2025-04-18_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\nrequire(\"mason\").setup()\n```\n\n----------------------------------------\n\nTITLE: Basic Mason Setup\nDESCRIPTION: Minimal setup configuration for initializing mason.nvim. Should be loaded early and not deferred.\nSOURCE: https://github.com/williamboman/mason.nvim/blob/main/README.md#2025-04-18_snippet_3\n\nLANGUAGE: lua\nCODE:\n```\nrequire(\"mason\").setup()\n```\n\n----------------------------------------\n\nTITLE: Configuring Mason.nvim Default Settings in Lua\nDESCRIPTION: Defines the default configuration settings for Mason.nvim package manager including installation directory, PATH handling, logging, concurrent installers, registries, providers, GitHub integration, pip settings, and UI customization options.\nSOURCE: https://github.com/williamboman/mason.nvim/blob/main/README.md#2025-04-18_snippet_5\n\nLANGUAGE: lua\nCODE:\n```\n---@class MasonSettings\nlocal DEFAULT_SETTINGS = {\n    ---@since 1.0.0\n    -- The directory in which to install packages.\n    install_root_dir = path.concat { vim.fn.stdpath \"data\", \"mason\" },\n\n    ---@since 1.0.0\n    -- Where Mason should put its bin location in your PATH. Can be one of:\n    -- - \"prepend\" (default, Mason's bin location is put first in PATH)\n    -- - \"append\" (Mason's bin location is put at the end of PATH)\n    -- - \"skip\" (doesn't modify PATH)\n    ---@type '\"prepend\"' | '\"append\"' | '\"skip\"'\n    PATH = \"prepend\",\n\n    ---@since 1.0.0\n    -- Controls to which degree logs are written to the log file. It's useful to set this to vim.log.levels.DEBUG when\n    -- debugging issues with package installations.\n    log_level = vim.log.levels.INFO,\n\n    ---@since 1.0.0\n    -- Limit for the maximum amount of packages to be installed at the same time. Once this limit is reached, any further\n    -- packages that are requested to be installed will be put in a queue.\n    max_concurrent_installers = 4,\n\n    ---@since 1.0.0\n    -- [Advanced setting]\n    -- The registries to source packages from. Accepts multiple entries. Should a package with the same name exist in\n    -- multiple registries, the registry listed first will be used.\n    registries = {\n        \"github:mason-org/mason-registry\",\n    },\n\n    ---@since 1.0.0\n    -- The provider implementations to use for resolving supplementary package metadata (e.g., all available versions).\n    -- Accepts multiple entries, where later entries will be used as fallback should prior providers fail.\n    -- Builtin providers are:\n    --   - mason.providers.registry-api  - uses the https://api.mason-registry.dev API\n    --   - mason.providers.client        - uses only client-side tooling to resolve metadata\n    providers = {\n        \"mason.providers.registry-api\",\n        \"mason.providers.client\",\n    },\n\n    github = {\n        ---@since 1.0.0\n        -- The template URL to use when downloading assets from GitHub.\n        -- The placeholders are the following (in order):\n        -- 1. The repository (e.g. \"rust-lang/rust-analyzer\")\n        -- 2. The release version (e.g. \"v0.3.0\")\n        -- 3. The asset name (e.g. \"rust-analyzer-v0.3.0-x86_64-unknown-linux-gnu.tar.gz\")\n        download_url_template = \"https://github.com/%s/releases/download/%s/%s\",\n    },\n\n    pip = {\n        ---@since 1.0.0\n        -- Whether to upgrade pip to the latest version in the virtual environment before installing packages.\n        upgrade_pip = false,\n\n        ---@since 1.0.0\n        -- These args will be added to `pip install` calls. Note that setting extra args might impact intended behavior\n        -- and is not recommended.\n        --\n        -- Example: { \"--proxy\", \"https://proxyserver\" }\n        install_args = {},\n    },\n\n    ui = {\n        ---@since 1.0.0\n        -- Whether to automatically check for new versions when opening the :Mason window.\n        check_outdated_packages_on_open = true,\n\n        ---@since 1.0.0\n        -- The border to use for the UI window. Accepts same border values as |nvim_open_win()|\n        border = \"none\",\n\n        ---@since 1.11.0\n        -- The backdrop opacity. 0 is fully opaque, 100 is fully transparent.\n        backdrop = 60,\n\n        ---@since 1.0.0\n        -- Width of the window. Accepts:\n        -- - Integer greater than 1 for fixed width.\n        -- - Float in the range of 0-1 for a percentage of screen width.\n        width = 0.8,\n\n        ---@since 1.0.0\n        -- Height of the window. Accepts:\n        -- - Integer greater than 1 for fixed height.\n        -- - Float in the range of 0-1 for a percentage of screen height.\n        height = 0.9,\n\n        icons = {\n            ---@since 1.0.0\n            -- The list icon to use for installed packages.\n            package_installed = \"◍\",\n            ---@since 1.0.0\n            -- The list icon to use for packages that are installing, or queued for installation.\n            package_pending = \"◍\",\n            ---@since 1.0.0\n            -- The list icon to use for packages that are not installed.\n            package_uninstalled = \"◍\",\n        },\n\n        keymaps = {\n            ---@since 1.0.0\n            -- Keymap to expand a package\n            toggle_package_expand = \"<CR>\",\n            ---@since 1.0.0\n            -- Keymap to install the package under the current cursor position\n            install_package = \"i\",\n            ---@since 1.0.0\n            -- Keymap to reinstall/update the package under the current cursor position\n            update_package = \"u\",\n            ---@since 1.0.0\n            -- Keymap to check for new version for the package under the current cursor position\n            check_package_version = \"c\",\n            ---@since 1.0.0\n            -- Keymap to update all installed packages\n            update_all_packages = \"U\",\n            ---@since 1.0.0\n            -- Keymap to check which installed packages are outdated\n            check_outdated_packages = \"C\",\n            ---@since 1.0.0\n            -- Keymap to uninstall a package\n            uninstall_package = \"X\",\n            ---@since 1.0.0\n            -- Keymap to cancel a package installation\n            cancel_installation = \"<C-c>\",\n            ---@since 1.0.0\n            -- Keymap to apply language filter\n            apply_language_filter = \"<C-f>\",\n            ---@since 1.1.0\n            -- Keymap to toggle viewing package installation log\n            toggle_package_install_log = \"<CR>\",\n            ---@since 1.8.0\n            -- Keymap to toggle the help view\n            toggle_help = \"g?\",\n        },\n    },\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Mason Settings in Lua\nDESCRIPTION: This snippet demonstrates the main configuration options for Mason, including PATH handling, logging, installation limits, registries, and providers.\nSOURCE: https://github.com/williamboman/mason.nvim/blob/main/doc/mason.txt#2025-04-18_snippet_6\n\nLANGUAGE: lua\nCODE:\n```\n{\n    PATH = \"prepend\",\n    log_level = vim.log.levels.INFO,\n    max_concurrent_installers = 4,\n    registries = {\n        \"github:mason-org/mason-registry\",\n    },\n    providers = {\n        \"mason.providers.registry-api\",\n        \"mason.providers.client\",\n    },\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Mason with lazy.nvim\nDESCRIPTION: Instructions for installing mason.nvim using the lazy.nvim package manager.\nSOURCE: https://github.com/williamboman/mason.nvim/blob/main/README.md#2025-04-18_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\n{\n    \"williamboman/mason.nvim\"\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Mason with Packer\nDESCRIPTION: Instructions for installing mason.nvim using the Packer package manager for Neovim.\nSOURCE: https://github.com/williamboman/mason.nvim/blob/main/README.md#2025-04-18_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\nuse {\n    \"williamboman/mason.nvim\"\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Mason with vim-plug\nDESCRIPTION: Instructions for installing mason.nvim using the vim-plug package manager.\nSOURCE: https://github.com/williamboman/mason.nvim/blob/main/README.md#2025-04-18_snippet_2\n\nLANGUAGE: vim\nCODE:\n```\nPlug 'williamboman/mason.nvim'\n```\n\n----------------------------------------\n\nTITLE: Handling Package Events with Mason Registry in Lua\nDESCRIPTION: Demonstrates how to register event handlers for package installation events using the mason-registry module. Shows how to listen for package:handle and package:install:success events.\nSOURCE: https://github.com/williamboman/mason.nvim/blob/main/doc/reference.md#2025-04-18_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\nlocal registry = require \"mason-registry\"\n\nregistry:on(\n    \"package:handle\",\n    vim.schedule_wrap(function(pkg, handle)\n        print(string.format(\"Installing %s\", pkg.name))\n    end)\n)\n\nregistry:on(\n    \"package:install:success\",\n    vim.schedule_wrap(function(pkg, handle)\n        print(string.format(\"Successfully installed %s\", pkg.name))\n    end)\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring UI Settings for Mason\nDESCRIPTION: This snippet shows how to customize the UI settings for Mason, including window dimensions, borders, icons, and keymaps.\nSOURCE: https://github.com/williamboman/mason.nvim/blob/main/doc/mason.txt#2025-04-18_snippet_9\n\nLANGUAGE: lua\nCODE:\n```\nui = {\n    check_outdated_packages_on_open = true,\n    border = \"none\",\n    backdrop = 60,\n    width = 0.8,\n    height = 0.9,\n    icons = {\n        package_installed = \"◍\",\n        package_pending = \"◍\",\n        package_uninstalled = \"◍\",\n    },\n    keymaps = {\n        toggle_package_expand = \"<CR>\",\n        install_package = \"i\",\n        update_package = \"u\",\n        check_package_version = \"c\",\n        update_all_packages = \"U\",\n        check_outdated_packages = \"C\",\n        uninstall_package = \"X\",\n        cancel_installation = \"<C-c>\",\n        apply_language_filter = \"<C-f>\",\n        toggle_package_install_log = \"<CR>\",\n        toggle_help = \"g?\",\n    },\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Mason Providers for Package Metadata\nDESCRIPTION: This snippet shows how to configure the provider implementations used by Mason for resolving package metadata, particularly useful when facing network issues.\nSOURCE: https://github.com/williamboman/mason.nvim/blob/main/doc/mason.txt#2025-04-18_snippet_11\n\nLANGUAGE: lua\nCODE:\n```\nrequire(\"mason\").setup {\n    providers = {\n        \"mason.providers.client\",\n        \"mason.providers.registry-api\",\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Mason UI Icons in Lua\nDESCRIPTION: Example of customizing the UI icons used by Mason.nvim for package status indicators.\nSOURCE: https://github.com/williamboman/mason.nvim/blob/main/doc/mason.txt#2025-04-18_snippet_4\n\nLANGUAGE: lua\nCODE:\n```\nrequire(\"mason\").setup({\n    ui = {\n        icons = {\n            package_installed = \"✓\",\n            package_pending = \"➜\",\n            package_uninstalled = \"✗\"\n        }\n    }\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Mason UI Icons\nDESCRIPTION: Example configuration showing how to customize the UI icons used by mason.nvim for package status indication.\nSOURCE: https://github.com/williamboman/mason.nvim/blob/main/README.md#2025-04-18_snippet_4\n\nLANGUAGE: lua\nCODE:\n```\nrequire(\"mason\").setup({\n    ui = {\n        icons = {\n            package_installed = \"✓\",\n            package_pending = \"➜\",\n            package_uninstalled = \"✗\"\n        }\n    }\n})\n```\n\n----------------------------------------\n\nTITLE: Installing Packages with Mason in Vim\nDESCRIPTION: Examples of installing packages using the :MasonInstall command, including installing multiple packages and specific versions.\nSOURCE: https://github.com/williamboman/mason.nvim/blob/main/doc/mason.txt#2025-04-18_snippet_1\n\nLANGUAGE: vim\nCODE:\n```\n:MasonInstall stylua\n```\n\nLANGUAGE: vim\nCODE:\n```\n:MasonInstall stylua lua-language-server\n```\n\nLANGUAGE: vim\nCODE:\n```\n:MasonInstall rust-analyzer@nightly\n```\n\n----------------------------------------\n\nTITLE: Refreshing Mason Registry Asynchronously in Lua\nDESCRIPTION: This snippet demonstrates how to refresh the Mason registry asynchronously and then retrieve all packages. It uses the refresh() function with a callback to ensure the registry is up-to-date before accessing package information.\nSOURCE: https://github.com/williamboman/mason.nvim/blob/main/doc/mason.txt#2025-04-18_snippet_13\n\nLANGUAGE: lua\nCODE:\n```\nlocal registry = require(\"mason-registry\")\n\nregistry.refresh(function ()\n    local packages = registry.get_all_packages()\n    ...\nend)\n```\n\n----------------------------------------\n\nTITLE: Refreshing Mason Registry Synchronously in Lua\nDESCRIPTION: This snippet shows how to refresh the Mason registry synchronously and then retrieve all packages. It uses the blocking variant of the refresh() function, which should be used cautiously as it freezes the editor.\nSOURCE: https://github.com/williamboman/mason.nvim/blob/main/doc/mason.txt#2025-04-18_snippet_14\n\nLANGUAGE: lua\nCODE:\n```\nlocal registry = require(\"mason-registry\")\n\nregistry.refresh()\nlocal packages = registry.get_all_packages()\n...\n```\n\n----------------------------------------\n\nTITLE: Using ContextualSpawn in package installation (Lua)\nDESCRIPTION: Example demonstrating how to use the spawn functionality from InstallContext to execute commands asynchronously. Shows spawning an npm install command and handling errors with pcall for non-existent commands.\nSOURCE: https://github.com/williamboman/mason.nvim/blob/main/doc/reference.md#2025-04-18_snippet_3\n\nLANGUAGE: lua\nCODE:\n```\nPkg.new {\n    --- ...\n    ---@async\n    ---@param ctx InstallContext\n    install = function(ctx)\n        ctx.spawn.npm { \"install\", \"some-package\" }\n        -- Calls to spawn will raise an error if it exits with a non-OK exit code or signal.\n        pcall(function()\n            ctx.spawn.commandoesntexist {}\n        end)\n    end,\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Mason Registries in Lua\nDESCRIPTION: Example of configuring custom registries for Mason.nvim, including both custom and default registries.\nSOURCE: https://github.com/williamboman/mason.nvim/blob/main/doc/mason.txt#2025-04-18_snippet_3\n\nLANGUAGE: lua\nCODE:\n```\nrequire(\"mason\").setup {\n    registries = {\n        \"lua:my-registry\",\n        \"github:mason-org/mason-registry\",\n    },\n}\n```\n\n----------------------------------------\n\nTITLE: Default Mason Settings in Lua\nDESCRIPTION: The default settings for Mason.nvim, including installation directory and PATH configuration options.\nSOURCE: https://github.com/williamboman/mason.nvim/blob/main/doc/mason.txt#2025-04-18_snippet_5\n\nLANGUAGE: lua\nCODE:\n```\n---@class MasonSettings\nlocal DEFAULT_SETTINGS = {\n    ---@since 1.0.0\n    -- The directory in which to install packages.\n    install_root_dir = path.concat { vim.fn.stdpath \"data\", \"mason\" },\n\n    ---@since 1.0.0\n    -- Where Mason should put its bin location in your PATH. Can be one of:\n    -- - \"prepend\" (default, Mason's bin location is put first in PATH)\n```\n\n----------------------------------------\n\nTITLE: Setting Mason Log Level for Debugging\nDESCRIPTION: This snippet demonstrates how to set Mason's log level to DEBUG for troubleshooting installation or uninstallation issues.\nSOURCE: https://github.com/williamboman/mason.nvim/blob/main/doc/mason.txt#2025-04-18_snippet_12\n\nLANGUAGE: lua\nCODE:\n```\nrequire(\"mason\").setup {\n    log_level = vim.log.levels.DEBUG\n}\n```\n\n----------------------------------------\n\nTITLE: Using InstallContext.stdio_sink in package installation (Lua)\nDESCRIPTION: Example of using the stdio_sink property to send stdout and stderr output to be presented to the user during package installation.\nSOURCE: https://github.com/williamboman/mason.nvim/blob/main/doc/reference.md#2025-04-18_snippet_2\n\nLANGUAGE: lua\nCODE:\n```\nPkg.new {\n    --- ...\n    ---@async\n    ---@param ctx InstallContext\n    install = function(ctx)\n        ctx.stdio_sink.stdout \"I am doing stuff\\n\"\n        ctx.stdio_sink.stderr \"Something went wrong!\\n\"\n    end,\n}\n```\n\n----------------------------------------\n\nTITLE: Using Package.Lang for Language Identifiers in Lua\nDESCRIPTION: Demonstrates how to use the Package.Lang metatable to access language identifiers. Any key is automatically indexed on first access and returns the language name.\nSOURCE: https://github.com/williamboman/mason.nvim/blob/main/doc/reference.md#2025-04-18_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\nprint(vim.inspect(Package.Lang)) -- prints {}\nlocal lang = Package.Lang.SomeMadeUpLanguage\nprint(lang) -- prints \"SomeMadeUpLanguage\"\nprint(vim.inspect(Package.Lang)) -- prints { SomeMadeUpLanguage = \"SomeMadeUpLanguage\" }\n```\n\n----------------------------------------\n\nTITLE: Configuring GitHub Download Settings for Mason\nDESCRIPTION: This snippet shows how to configure the GitHub download URL template for Mason. It allows customization of the URL used to download assets from GitHub releases.\nSOURCE: https://github.com/williamboman/mason.nvim/blob/main/doc/mason.txt#2025-04-18_snippet_7\n\nLANGUAGE: lua\nCODE:\n```\ngithub = {\n    download_url_template = \"https://github.com/%s/releases/download/%s/%s\",\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing GitHub Download URL for Mason\nDESCRIPTION: This snippet demonstrates how to customize the GitHub download URL template used by Mason when downloading assets from GitHub releases.\nSOURCE: https://github.com/williamboman/mason.nvim/blob/main/doc/mason.txt#2025-04-18_snippet_10\n\nLANGUAGE: lua\nCODE:\n```\nrequire(\"mason\").setup {\n    github = {\n        download_url_template = \"https://my.mirror.com/%s/releases/download/%s/%s\",\n    },\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Pip Installation Settings for Mason\nDESCRIPTION: This snippet demonstrates how to configure pip-related settings for Mason, including whether to upgrade pip and specifying additional installation arguments.\nSOURCE: https://github.com/williamboman/mason.nvim/blob/main/doc/mason.txt#2025-04-18_snippet_8\n\nLANGUAGE: lua\nCODE:\n```\npip = {\n    upgrade_pip = false,\n    install_args = {},\n}\n```\n\n----------------------------------------\n\nTITLE: Headless Package Installation in Shell\nDESCRIPTION: Command to install packages in headless mode using Neovim from the command line.\nSOURCE: https://github.com/williamboman/mason.nvim/blob/main/doc/mason.txt#2025-04-18_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\n$ nvim --headless -c \"MasonInstall lua-language-server rust-analyzer\" -c qall\n```\n\n----------------------------------------\n\nTITLE: Generating Code for mason.nvim on Unix Systems\nDESCRIPTION: Command to generate code for mason.nvim project. This is required when adding or modifying package definitions.\nSOURCE: https://github.com/williamboman/mason.nvim/blob/main/CONTRIBUTING.md#2025-04-18_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nmake generate\n```\n\n----------------------------------------\n\nTITLE: Running Tests for mason.nvim\nDESCRIPTION: Commands to run tests for the mason.nvim project. Shows both full test suite execution and running specific test files.\nSOURCE: https://github.com/williamboman/mason.nvim/blob/main/CONTRIBUTING.md#2025-04-18_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nmake test\nFILE=tests/mason-core/managers/luarocks_spec.lua make test\n```\n\n----------------------------------------\n\nTITLE: Version Comparison Link in Markdown\nDESCRIPTION: Generates a link to compare two versions of the project on GitHub using Markdown syntax.\nSOURCE: https://github.com/williamboman/mason.nvim/blob/main/CHANGELOG.md#2025-04-18_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n[1.11.0](https://github.com/williamboman/mason.nvim/compare/v1.10.0...v1.11.0)\n```\n\n----------------------------------------\n\nTITLE: Version Headers in Markdown\nDESCRIPTION: Markdown headings showing version numbers with links to GitHub comparison views and dates\nSOURCE: https://github.com/williamboman/mason.nvim/blob/main/CHANGELOG.md#2025-04-18_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n## [1.5.0](https://github.com/williamboman/mason.nvim/compare/v1.4.0...v1.5.0) (2023-06-28)\n```\n\n----------------------------------------\n\nTITLE: GitHub Issue Reference in Markdown\nDESCRIPTION: Creates a link to a specific GitHub issue using Markdown syntax within parentheses.\nSOURCE: https://github.com/williamboman/mason.nvim/blob/main/CHANGELOG.md#2025-04-18_snippet_1\n\nLANGUAGE: Markdown\nCODE:\n```\n([#1725](https://github.com/williamboman/mason.nvim/issues/1725))\n```\n\n----------------------------------------\n\nTITLE: GitHub Commit Reference in Markdown\nDESCRIPTION: Generates a link to a specific Git commit on GitHub using Markdown syntax.\nSOURCE: https://github.com/williamboman/mason.nvim/blob/main/CHANGELOG.md#2025-04-18_snippet_2\n\nLANGUAGE: Markdown\nCODE:\n```\n([0950b15](https://github.com/williamboman/mason.nvim/commit/0950b15060067f752fde13a779a994f59516ce3d))\n```\n\n----------------------------------------\n\nTITLE: Feature and Bug Fix Headers\nDESCRIPTION: Section headers for organizing changelog entries by type (features and bug fixes)\nSOURCE: https://github.com/williamboman/mason.nvim/blob/main/CHANGELOG.md#2025-04-18_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n### Features\n\n### Bug Fixes\n```"
  }
]