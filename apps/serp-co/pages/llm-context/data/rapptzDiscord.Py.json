[
  {
    "owner": "rapptz",
    "repo": "discord.py",
    "content": "TITLE: Discord Bot Implementation Using Commands Extension in Python\nDESCRIPTION: An example showing how to create a Discord bot using the commands extension. This implementation defines a simple 'ping' command that responds with 'pong' and sets up the required intents for message content.\nSOURCE: https://github.com/Rapptz/discord.py/blob/master/README.rst#2025-04-06_snippet_4\n\nLANGUAGE: py\nCODE:\n```\nimport discord\nfrom discord.ext import commands\n\nintents = discord.Intents.default()\nintents.message_content = True\nbot = commands.Bot(command_prefix='>', intents=intents)\n\n@bot.command()\nasync def ping(ctx):\n    await ctx.send('pong')\n\nbot.run('token')\n```\n\n----------------------------------------\n\nTITLE: Handling Interaction Event in Discord.py\nDESCRIPTION: Low-level event handler for when an interaction happens, such as slash command invocations or component usage. Provides the Interaction object as a parameter.\nSOURCE: https://github.com/Rapptz/discord.py/blob/master/docs/api.rst#2025-04-06_snippet_13\n\nLANGUAGE: python\nCODE:\n```\ndef on_interaction(interaction):\n    # Event handler implementation\n```\n\n----------------------------------------\n\nTITLE: Creating a Minimal Discord Bot with Message Response in Python\nDESCRIPTION: This code implements a basic Discord bot that responds to messages starting with '$hello'. It demonstrates how to initialize the client with proper intents, handle events like on_ready and on_message, and interact with Discord channels through the discord.py library.\nSOURCE: https://github.com/Rapptz/discord.py/blob/master/docs/quickstart.rst#2025-04-06_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n# This example requires the 'message_content' intent.\n\nimport discord\n\nintents = discord.Intents.default()\nintents.message_content = True\n\nclient = discord.Client(intents=intents)\n\n@client.event\nasync def on_ready():\n    print(f'We have logged in as {client.user}')\n\n@client.event\nasync def on_message(message):\n    if message.author == client.user:\n        return\n\n    if message.content.startswith('$hello'):\n        await message.channel.send('Hello!')\n\nclient.run('your token here')\n```\n\n----------------------------------------\n\nTITLE: Implementing Keyword-Only Arguments in Discord.py\nDESCRIPTION: This example demonstrates how to use a keyword-only argument in a command, which allows handling multi-word input without requiring quotes.\nSOURCE: https://github.com/Rapptz/discord.py/blob/master/docs/ext/commands/commands.rst#2025-04-06_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n@bot.command()\nasync def test(ctx, *, arg):\n    await ctx.send(arg)\n```\n\n----------------------------------------\n\nTITLE: Basic Discord Client Implementation in Python\nDESCRIPTION: A simple example showing how to create a Discord client that responds to messages. The client logs when ready and replies with 'pong' when it receives a 'ping' message. Includes proper intent configuration for message content.\nSOURCE: https://github.com/Rapptz/discord.py/blob/master/README.rst#2025-04-06_snippet_3\n\nLANGUAGE: py\nCODE:\n```\nimport discord\n\nclass MyClient(discord.Client):\n    async def on_ready(self):\n        print('Logged on as', self.user)\n\n    async def on_message(self, message):\n        # don't respond to ourselves\n        if message.author == self.user:\n            return\n\n        if message.content == 'ping':\n            await message.channel.send('pong')\n\nintents = discord.Intents.default()\nintents.message_content = True\nclient = MyClient(intents=intents)\nclient.run('token')\n```\n\n----------------------------------------\n\nTITLE: Handling Message Creation Event in Discord.py\nDESCRIPTION: Event handler for when a Message is created and sent. Requires Intents.messages to be enabled. Provides the created Message object as a parameter.\nSOURCE: https://github.com/Rapptz/discord.py/blob/master/docs/api.rst#2025-04-06_snippet_23\n\nLANGUAGE: python\nCODE:\n```\ndef on_message(message):\n    # Event handler implementation\n```\n\n----------------------------------------\n\nTITLE: Initializing Discord Bot with Intents\nDESCRIPTION: This code demonstrates how to initialize a Discord bot with the necessary intents, particularly the message_content intent required for the commands extension to function.\nSOURCE: https://github.com/Rapptz/discord.py/blob/master/docs/ext/commands/commands.rst#2025-04-06_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport discord\nfrom discord.ext import commands\n\nintents = discord.Intents.default()\nintents.message_content = True\n\nbot = commands.Bot(command_prefix='$', intents=intents)\n```\n\n----------------------------------------\n\nTITLE: Implementing Event Handling through Client Subclassing in Discord.py\nDESCRIPTION: Demonstrates how to register event handlers by subclassing the Discord Client class. This example shows a simple message handler that responds with 'Hello World!' when a message starting with '$hello' is received, while ignoring messages from the bot itself.\nSOURCE: https://github.com/Rapptz/discord.py/blob/master/docs/api.rst#2025-04-06_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport discord\n\nclass MyClient(discord.Client):\n    async def on_message(self, message):\n        if message.author == self.user:\n            return\n\n        if message.content.startswith('$hello'):\n            await message.channel.send('Hello World!')\n```\n\n----------------------------------------\n\nTITLE: Basic discord.py Bot with Event Handlers\nDESCRIPTION: Example code demonstrating how to create a basic Discord bot using discord.py with event handling. This code listens for 'on_ready' and 'on_message' events, requiring the 'message_content' intent.\nSOURCE: https://github.com/Rapptz/discord.py/blob/master/docs/intro.rst#2025-04-06_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n# This example requires the 'message_content' intent.\n\nimport discord\n\nclass MyClient(discord.Client):\n    async def on_ready(self):\n        print(f'Logged on as {self.user}!')\n\n    async def on_message(self, message):\n        print(f'Message from {message.author}: {message.content}')\n\nintents = discord.Intents.default()\nintents.message_content = True\n\nclient = MyClient(intents=intents)\nclient.run('my token goes here')\n```\n\n----------------------------------------\n\nTITLE: Basic discord.py Client Example\nDESCRIPTION: A simple example demonstrating how to create a Discord client using discord.py, including event handlers for on_ready and on_message events.\nSOURCE: https://github.com/Rapptz/discord.py/blob/master/README.ja.rst#2025-04-06_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport discord\n\nclass MyClient(discord.Client):\n    async def on_ready(self):\n        print('Logged on as', self.user)\n\n    async def on_message(self, message):\n        # don't respond to ourselves\n        if message.author == self.user:\n            return\n\n        if message.content == 'ping':\n            await message.channel.send('pong')\n\nintents = discord.Intents.default()\nintents.message_content = True\nclient = MyClient(intents=intents)\nclient.run('token')\n```\n\n----------------------------------------\n\nTITLE: Discord Bot Example using Commands Extension\nDESCRIPTION: An example showing how to create a Discord bot using the commands extension of discord.py, including a simple 'ping' command.\nSOURCE: https://github.com/Rapptz/discord.py/blob/master/README.ja.rst#2025-04-06_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nimport discord\nfrom discord.ext import commands\n\nintents = discord.Intents.default()\nintents.message_content = True\nbot = commands.Bot(command_prefix='>', intents=intents)\n\n@bot.command()\nasync def ping(ctx):\n    await ctx.send('pong')\n\nbot.run('token')\n```\n\n----------------------------------------\n\nTITLE: Defining a Basic Cog Class in Discord.py\nDESCRIPTION: A basic implementation of a Cog class called 'Greetings' that contains a command and an event listener. The cog tracks the last member who used the command and provides a welcome message for new members.\nSOURCE: https://github.com/Rapptz/discord.py/blob/master/docs/ext/commands/cogs.rst#2025-04-06_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclass Greetings(commands.Cog):\n    def __init__(self, bot):\n        self.bot = bot\n        self._last_member = None\n\n    @commands.Cog.listener()\n    async def on_member_join(self, member):\n        channel = member.guild.system_channel\n        if channel is not None:\n            await channel.send(f'Welcome {member.mention}.')\n\n    @commands.command()\n    async def hello(self, ctx, *, member: discord.Member = None):\n        \"\"\"Says hello\"\"\"\n        member = member or ctx.author\n        if self._last_member is None or self._last_member.id != member.id:\n            await ctx.send(f'Hello {member.name}~')\n        else:\n            await ctx.send(f'Hello {member.name}... This feels familiar.')\n        self._last_member = member\n```\n\n----------------------------------------\n\nTITLE: Handling Message Edit Event in Discord.py\nDESCRIPTION: Event handler for when a Message receives an update event. Requires Intents.messages to be enabled. Provides the old and updated Message objects as parameters.\nSOURCE: https://github.com/Rapptz/discord.py/blob/master/docs/api.rst#2025-04-06_snippet_24\n\nLANGUAGE: python\nCODE:\n```\ndef on_message_edit(before, after):\n    # Event handler implementation\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Check for Discord.py Command\nDESCRIPTION: This snippet demonstrates how to create a basic check function and apply it to a command using the @commands.check decorator. The check ensures only the bot owner can use the eval command.\nSOURCE: https://github.com/Rapptz/discord.py/blob/master/docs/ext/commands/commands.rst#2025-04-06_snippet_34\n\nLANGUAGE: python\nCODE:\n```\nasync def is_owner(ctx):\n    return ctx.author.id == 316026178463072268\n\n@bot.command(name='eval')\n@commands.check(is_owner)\nasync def _eval(ctx, *, code):\n    \"\"\"A bad example of an eval command\"\"\"\n    await ctx.send(eval(code))\n```\n\n----------------------------------------\n\nTITLE: Creating Hybrid Commands in Discord.py\nDESCRIPTION: This example shows how to create a hybrid command that can be invoked as both a text and a slash command. It uses the @bot.hybrid_command() decorator to define the command.\nSOURCE: https://github.com/Rapptz/discord.py/blob/master/docs/ext/commands/commands.rst#2025-04-06_snippet_41\n\nLANGUAGE: python\nCODE:\n```\n@bot.hybrid_command()\nasync def test(ctx):\n    await ctx.send(\"This is a hybrid command!\")\n```\n\n----------------------------------------\n\nTITLE: Defining a Hybrid Command for Discord Bots\nDESCRIPTION: Shows how to create a hybrid command using the @hybrid_command decorator. Hybrid commands can be used as both application and text commands.\nSOURCE: https://github.com/Rapptz/discord.py/blob/master/docs/ext/commands/api.rst#2025-04-06_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\n@discord.ext.commands.hybrid_command()\nasync def some_hybrid_command(ctx):\n    # Hybrid command implementation\n```\n\n----------------------------------------\n\nTITLE: Creating Reusable Check Decorator in Discord.py\nDESCRIPTION: This example shows how to create a reusable check decorator by wrapping the check function in another function. It creates an is_owner decorator that can be applied to multiple commands.\nSOURCE: https://github.com/Rapptz/discord.py/blob/master/docs/ext/commands/commands.rst#2025-04-06_snippet_35\n\nLANGUAGE: python\nCODE:\n```\ndef is_owner():\n    async def predicate(ctx):\n        return ctx.author.id == 316026178463072268\n    return commands.check(predicate)\n\n@bot.command(name='eval')\n@is_owner()\nasync def _eval(ctx, *, code):\n    \"\"\"A bad example of an eval command\"\"\"\n    await ctx.send(eval(code))\n```\n\n----------------------------------------\n\nTITLE: Defining a Basic Command in Discord.py\nDESCRIPTION: This snippet shows how to define a simple command using the @bot.command() decorator. The command takes one argument and sends it back as a message.\nSOURCE: https://github.com/Rapptz/discord.py/blob/master/docs/ext/commands/commands.rst#2025-04-06_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n@bot.command()\nasync def foo(ctx, arg):\n    await ctx.send(arg)\n```\n\n----------------------------------------\n\nTITLE: Registering a Cog with a Discord Bot\nDESCRIPTION: Shows how to register a cog with a Discord bot using the add_cog method. This attaches the cog to the bot, which automatically adds all commands and listeners.\nSOURCE: https://github.com/Rapptz/discord.py/blob/master/docs/ext/commands/cogs.rst#2025-04-06_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nawait bot.add_cog(Greetings(bot))\n```\n\n----------------------------------------\n\nTITLE: Using Built-in is_owner Check in Discord.py\nDESCRIPTION: This snippet demonstrates the use of the built-in is_owner check provided by Discord.py, which simplifies the process of restricting commands to the bot owner.\nSOURCE: https://github.com/Rapptz/discord.py/blob/master/docs/ext/commands/commands.rst#2025-04-06_snippet_36\n\nLANGUAGE: python\nCODE:\n```\n@bot.command(name='eval')\n@commands.is_owner()\nasync def _eval(ctx, *, code):\n    \"\"\"A bad example of an eval command\"\"\"\n    await ctx.send(eval(code))\n```\n\n----------------------------------------\n\nTITLE: Creating a Virtual Environment for discord.py Project\nDESCRIPTION: Commands to create and activate a Python virtual environment for a discord.py bot project. This isolates dependencies from system-wide installations.\nSOURCE: https://github.com/Rapptz/discord.py/blob/master/docs/intro.rst#2025-04-06_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ cd your-bot-source\n$ python3 -m venv bot-env\n```\n\n----------------------------------------\n\nTITLE: Creating a Command Group in Discord.py\nDESCRIPTION: Demonstrates the use of the @group decorator to create a command group. Groups allow for nested subcommands and provide a way to organize related commands.\nSOURCE: https://github.com/Rapptz/discord.py/blob/master/docs/ext/commands/api.rst#2025-04-06_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\n@discord.ext.commands.group()\nasync def some_group(ctx):\n    # Group implementation\n```\n\n----------------------------------------\n\nTITLE: Implementing Multiple Checks for Discord.py Command\nDESCRIPTION: This example shows how to apply multiple checks to a single command. All checks must return True for the command to execute. It combines the is_owner check with a custom guild check.\nSOURCE: https://github.com/Rapptz/discord.py/blob/master/docs/ext/commands/commands.rst#2025-04-06_snippet_37\n\nLANGUAGE: python\nCODE:\n```\ndef is_in_guild(guild_id):\n    async def predicate(ctx):\n        return ctx.guild and ctx.guild.id == guild_id\n    return commands.check(predicate)\n\n@bot.command()\n@commands.is_owner()\n@is_in_guild(41771983423143937)\nasync def secretguilddata(ctx):\n    \"\"\"super secret stuff\"\"\"\n    await ctx.send('secret stuff')\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Extension in Python for Discord.py\nDESCRIPTION: This code demonstrates how to create a simple extension with a 'hello' command. The setup function serves as the entry point when the extension is loaded, adding the command to the bot. The command greets the user with their display name when invoked.\nSOURCE: https://github.com/Rapptz/discord.py/blob/master/docs/ext/commands/extensions.rst#2025-04-06_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom discord.ext import commands\n\n@commands.command()\nasync def hello(ctx):\n    await ctx.send(f'Hello {ctx.author.display_name}.')\n\nasync def setup(bot):\n    bot.add_command(hello)\n```\n\n----------------------------------------\n\nTITLE: Implementing a Ban Command with Flag Converter in Python\nDESCRIPTION: Demonstrates how to use a flag converter in a Discord.py command for banning members, including handling multiple members and custom ban parameters.\nSOURCE: https://github.com/Rapptz/discord.py/blob/master/docs/ext/commands/commands.rst#2025-04-06_snippet_29\n\nLANGUAGE: python3\nCODE:\n```\nfrom discord.ext import commands\nfrom typing import List\nimport discord\n\nclass BanFlags(commands.FlagConverter):\n    members: List[discord.Member] = commands.flag(name='member')\n    reason: str\n    days: int = 1\n\n@commands.command()\nasync def ban(ctx, *, flags: BanFlags):\n    for member in flags.members:\n        await member.ban(reason=flags.reason, delete_message_days=flags.days)\n\n    members = ', '.join(str(member) for member in flags.members)\n    plural = f'{flags.days} days' if flags.days != 1 else f'{flags.days} day'\n    await ctx.send(f'Banned {members} for {flags.reason!r} (deleted {plural} worth of messages)')\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Check Exceptions in Discord.py\nDESCRIPTION: This example shows how to create a custom exception for checks and raise it instead of returning False. It creates a NoPrivateMessages exception and uses it in a guild_only check.\nSOURCE: https://github.com/Rapptz/discord.py/blob/master/docs/ext/commands/commands.rst#2025-04-06_snippet_39\n\nLANGUAGE: python\nCODE:\n```\nclass NoPrivateMessages(commands.CheckFailure):\n    pass\n\ndef guild_only():\n    async def predicate(ctx):\n        if ctx.guild is None:\n            raise NoPrivateMessages('Hey no DMs!')\n        return True\n    return commands.check(predicate)\n\n@bot.command()\n@guild_only()\nasync def test(ctx):\n    await ctx.send('Hey this is not a DM! Nice.')\n\n@test.error\nasync def test_error(ctx, error):\n    if isinstance(error, NoPrivateMessages):\n        await ctx.send(error)\n```\n\n----------------------------------------\n\nTITLE: Basic Background Task Implementation in Discord.py Cog\nDESCRIPTION: Demonstrates how to create a simple background task within a Cog that prints an incrementing index every 5 seconds.\nSOURCE: https://github.com/Rapptz/discord.py/blob/master/docs/ext/tasks/index.rst#2025-04-06_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom discord.ext import tasks, commands\n\nclass MyCog(commands.Cog):\n    def __init__(self):\n        self.index = 0\n        self.printer.start()\n\n    def cog_unload(self):\n        self.printer.cancel()\n\n    @tasks.loop(seconds=5.0)\n    async def printer(self):\n        print(self.index)\n        self.index += 1\n```\n\n----------------------------------------\n\nTITLE: Handling Message Delete Event in Discord.py\nDESCRIPTION: Event handler for when a message is deleted. Requires Intents.messages to be enabled. Provides the deleted Message object as a parameter.\nSOURCE: https://github.com/Rapptz/discord.py/blob/master/docs/api.rst#2025-04-06_snippet_25\n\nLANGUAGE: python\nCODE:\n```\ndef on_message_delete(message):\n    # Event handler implementation\n```\n\n----------------------------------------\n\nTITLE: Guild Role Event Handlers\nDESCRIPTION: Event handlers for guild role creation, deletion and updates. Requires guilds intent.\nSOURCE: https://github.com/Rapptz/discord.py/blob/master/docs/api.rst#2025-04-06_snippet_31\n\nLANGUAGE: python\nCODE:\n```\non_guild_role_create(role)\non_guild_role_delete(role)\non_guild_role_update(before, after)\n```\n\n----------------------------------------\n\nTITLE: Handling on_message Event with Command Processing in Python\nDESCRIPTION: Shows how to override the default on_message event while still allowing commands to be processed. It demonstrates adding custom logic before processing commands.\nSOURCE: https://github.com/Rapptz/discord.py/blob/master/docs/faq.rst#2025-04-06_snippet_13\n\nLANGUAGE: python\nCODE:\n```\n@bot.event\nasync def on_message(message):\n    # do some extra stuff here\n\n    await bot.process_commands(message)\n```\n\n----------------------------------------\n\nTITLE: Creating Subcommands Using Command Groups in Python\nDESCRIPTION: Demonstrates how to create subcommands using the @bot.group() decorator and adding commands to the group. It includes an example of a 'git' command with a 'push' subcommand.\nSOURCE: https://github.com/Rapptz/discord.py/blob/master/docs/faq.rst#2025-04-06_snippet_16\n\nLANGUAGE: python\nCODE:\n```\n@bot.group()\nasync def git(ctx):\n    if ctx.invoked_subcommand is None:\n        await ctx.send('Invalid git command passed...')\n\n@git.command()\nasync def push(ctx, remote: str, branch: str):\n    await ctx.send(f'Pushing to {remote} {branch}')\n```\n\n----------------------------------------\n\nTITLE: Poll Vote Event Handlers\nDESCRIPTION: Event handlers for poll vote addition and removal. Requires message_content and polls intents.\nSOURCE: https://github.com/Rapptz/discord.py/blob/master/docs/api.rst#2025-04-06_snippet_29\n\nLANGUAGE: python\nCODE:\n```\non_poll_vote_add(user, answer)\non_poll_vote_remove(user, answer)\n```\n\n----------------------------------------\n\nTITLE: Initializing discord.py Client with required intents\nDESCRIPTION: Example of initializing a discord.py Client with the now-required intents parameter. This change applies to all subclasses of Client, including AutoShardedClient, Bot, and AutoShardedBot.\nSOURCE: https://github.com/Rapptz/discord.py/blob/master/docs/migrating.rst#2025-04-06_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n# before\nclient = discord.Client()\n\n# after\nintents = discord.Intents.default()\nclient = discord.Client(intents=intents)\n```\n\n----------------------------------------\n\nTITLE: Creating Echo Command with Rest Arguments in Python\nDESCRIPTION: Demonstrates how to create a command that takes multiple words as a single argument using the '*' syntax in the function signature.\nSOURCE: https://github.com/Rapptz/discord.py/blob/master/docs/faq.rst#2025-04-06_snippet_14\n\nLANGUAGE: python\nCODE:\n```\n@bot.command()\nasync def echo(ctx, *, message: str):\n    await ctx.send(message)\n```\n\n----------------------------------------\n\nTITLE: Reaction Event Handlers\nDESCRIPTION: Event handlers for reaction addition, removal, and clearing. Requires reactions intent.\nSOURCE: https://github.com/Rapptz/discord.py/blob/master/docs/api.rst#2025-04-06_snippet_30\n\nLANGUAGE: python\nCODE:\n```\non_reaction_add(reaction, user)\non_reaction_remove(reaction, user)\non_reaction_clear(message, reactions)\n```\n\n----------------------------------------\n\nTITLE: Implementing Error Handling for Commands in Python\nDESCRIPTION: Demonstrates how to create a local error handler for a Discord.py command to handle specific exceptions.\nSOURCE: https://github.com/Rapptz/discord.py/blob/master/docs/ext/commands/commands.rst#2025-04-06_snippet_33\n\nLANGUAGE: python3\nCODE:\n```\n@bot.command()\nasync def info(ctx, *, member: discord.Member):\n    \"\"\"Tells you some info about the member.\"\"\"\n    msg = f'{member} joined on {member.joined_at} and has {len(member.roles)} roles.'\n    await ctx.send(msg)\n\n@info.error\nasync def info_error(ctx, error):\n    if isinstance(error, commands.BadArgument):\n        await ctx.send('I could not find that member...')\n```\n\n----------------------------------------\n\nTITLE: Manual Discord.py Event Loop Implementation\nDESCRIPTION: Demonstrates how to manually control the Discord.py client event loop using asyncio. This approach gives more control over the connection lifecycle compared to using Client.run(). The code handles login, connection, error handling, and proper cleanup of the event loop.\nSOURCE: https://github.com/Rapptz/discord.py/blob/master/docs/migrating_to_async.rst#2025-04-06_snippet_15\n\nLANGUAGE: python\nCODE:\n```\nimport discord\nimport asyncio\n\nclient = discord.Client()\n\n@asyncio.coroutine\ndef main_task():\n    yield from client.login('token')\n    yield from client.connect()\n\nloop = asyncio.get_event_loop()\ntry:\n    loop.run_until_complete(main_task())\nexcept:\n    loop.run_until_complete(client.logout())\nfinally:\n    loop.close()\n```\n\n----------------------------------------\n\nTITLE: Voice State Handler Functions\nDESCRIPTION: Event handlers for Discord voice states including voice state updates and voice channel effects. Requires voice_states intent.\nSOURCE: https://github.com/Rapptz/discord.py/blob/master/docs/api.rst#2025-04-06_snippet_36\n\nLANGUAGE: python\nCODE:\n```\ndef on_voice_state_update(member, before, after):\n    # Handler for voice state updates\n    pass\n\ndef on_voice_channel_effect(effect):\n    # Handler for voice channel effects\n    pass\n```\n\n----------------------------------------\n\nTITLE: Uploading Files and Images in Discord.py\nDESCRIPTION: Demonstrates multiple ways to upload files to Discord channels, including single file uploads, multiple file uploads, and uploading from file-like objects with custom filenames.\nSOURCE: https://github.com/Rapptz/discord.py/blob/master/docs/faq.rst#2025-04-06_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nawait channel.send(file=discord.File('my_file.png'))\n```\n\nLANGUAGE: python\nCODE:\n```\nwith open('my_file.png', 'rb') as fp:\n    await channel.send(file=discord.File(fp, 'new_filename.png'))\n```\n\nLANGUAGE: python\nCODE:\n```\nmy_files = [\n    discord.File('result.zip'),\n    discord.File('teaser_graph.png'),\n]\nawait channel.send(files=my_files)\n```\n\n----------------------------------------\n\nTITLE: Guild Event Handlers\nDESCRIPTION: Event handlers for managing guild-related events such as joining, leaving, and updates.\nSOURCE: https://github.com/Rapptz/discord.py/blob/master/docs/api.rst#2025-04-06_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nasync def on_guild_available(guild):\n    # Called when a guild becomes available\n    pass\n\nasync def on_guild_join(guild):\n    # Called when bot joins a guild\n    pass\n\nasync def on_guild_remove(guild):\n    # Called when bot leaves a guild\n    pass\n\nasync def on_guild_update(before, after):\n    # Called when a guild is updated\n    pass\n\nasync def on_guild_emojis_update(guild, before, after):\n    # Called when guild emojis are updated\n    pass\n\nasync def on_guild_stickers_update(guild, before, after):\n    # Called when guild stickers are updated\n    pass\n\nasync def on_audit_log_entry_create(entry):\n    # Called when new audit log entry is created\n    pass\n```\n\n----------------------------------------\n\nTITLE: Stage Instance Handler Functions\nDESCRIPTION: Event handlers for Discord stage instances including creation, deletion and updates. Added in version 2.0.\nSOURCE: https://github.com/Rapptz/discord.py/blob/master/docs/api.rst#2025-04-06_snippet_34\n\nLANGUAGE: python\nCODE:\n```\ndef on_stage_instance_create(stage_instance):\n    # Handler for stage instance creation\n    pass\n\ndef on_stage_instance_delete(stage_instance):\n    # Handler for stage instance deletion\n    pass\n\ndef on_stage_instance_update(before, after):\n    # Handler for stage instance updates\n    pass\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic Discord Intents in Python\nDESCRIPTION: Demonstrates how to set up basic Discord intents by disabling typing and presence events while using default settings for other intents.\nSOURCE: https://github.com/Rapptz/discord.py/blob/master/docs/intents.rst#2025-04-06_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport discord\nintents = discord.Intents.default()\nintents.typing = False\nintents.presences = False\n\n# Somewhere else:\n# client = discord.Client(intents=intents)\n# or\n# from discord.ext import commands\n# bot = commands.Bot(command_prefix='!', intents=intents)\n```\n\n----------------------------------------\n\nTITLE: Basic Discord Member Converter Usage\nDESCRIPTION: Shows how to use the built-in Discord Member converter to easily convert command arguments into Member objects.\nSOURCE: https://github.com/Rapptz/discord.py/blob/master/docs/ext/commands/commands.rst#2025-04-06_snippet_13\n\nLANGUAGE: python\nCODE:\n```\n@bot.command()\nasync def joined(ctx, *, member: discord.Member):\n    await ctx.send(f'{member} joined on {member.joined_at}')\n```\n\n----------------------------------------\n\nTITLE: Connection Event Handlers\nDESCRIPTION: Event handlers for managing Discord client connections, including shard connections and disconnections.\nSOURCE: https://github.com/Rapptz/discord.py/blob/master/docs/api.rst#2025-04-06_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nasync def on_shard_connect(shard_id):\n    # Called when a shard connects to Discord\n    pass\n\nasync def on_shard_disconnect(shard_id):\n    # Called when a shard disconnects from Discord\n    pass\n```\n\n----------------------------------------\n\nTITLE: Implementing Hybrid Command Groups in Discord.py\nDESCRIPTION: This snippet demonstrates how to create hybrid command groups and sub-commands using the @bot.hybrid_group decorator. It includes a fallback command for the group.\nSOURCE: https://github.com/Rapptz/discord.py/blob/master/docs/ext/commands/commands.rst#2025-04-06_snippet_42\n\nLANGUAGE: python\nCODE:\n```\n@bot.hybrid_group(fallback=\"get\")\nasync def tag(ctx, name):\n    await ctx.send(f\"Showing tag: {name}\")\n\n@tag.command()\nasync def create(ctx, name):\n    await ctx.send(f\"Created tag: {name}\")\n```\n\n----------------------------------------\n\nTITLE: Defining a Basic Flag Converter in Python\nDESCRIPTION: Demonstrates how to create a simple flag converter class with optional and required parameters for a Discord.py command.\nSOURCE: https://github.com/Rapptz/discord.py/blob/master/docs/ext/commands/commands.rst#2025-04-06_snippet_27\n\nLANGUAGE: python3\nCODE:\n```\nclass BanFlags(commands.FlagConverter):\n    members: List[discord.Member] = commands.flag(name='member', positional=True, default=lambda ctx: [])\n    reason: Optional[str] = None\n```\n\n----------------------------------------\n\nTITLE: Multiple Attachment Handling\nDESCRIPTION: Example of handling multiple file attachments in a single command with optional parameters.\nSOURCE: https://github.com/Rapptz/discord.py/blob/master/docs/ext/commands/commands.rst#2025-04-06_snippet_23\n\nLANGUAGE: python\nCODE:\n```\nimport typing\nimport discord\n\n@bot.command()\nasync def upload_many(\n    ctx,\n    first: discord.Attachment,\n    second: typing.Optional[discord.Attachment],\n):\n    if second is None:\n        files = [first.url]\n    else:\n        files = [first.url, second.url]\n\n    await ctx.send(f'You uploaded: {\" \".join(files)}')\n```\n\n----------------------------------------\n\nTITLE: Registering Commands in Discord.py\nDESCRIPTION: This snippet illustrates two equivalent ways of registering a command in Discord.py: using the @bot.command() decorator and using the @commands.command() decorator followed by bot.add_command().\nSOURCE: https://github.com/Rapptz/discord.py/blob/master/docs/ext/commands/commands.rst#2025-04-06_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n@bot.command()\nasync def test(ctx):\n    pass\n\n# or:\n\n@commands.command()\nasync def test(ctx):\n    pass\n\nbot.add_command(test)\n```\n\n----------------------------------------\n\nTITLE: Gateway Event Handlers\nDESCRIPTION: Event handlers for managing Discord gateway events including ready and resume states.\nSOURCE: https://github.com/Rapptz/discord.py/blob/master/docs/api.rst#2025-04-06_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nasync def on_ready():\n    # Called when client is ready\n    pass\n\nasync def on_resumed():\n    # Called when session is resumed\n    pass\n\nasync def on_shard_ready(shard_id):\n    # Called when a shard is ready\n    pass\n\nasync def on_shard_resumed(shard_id):\n    # Called when a shard session is resumed\n    pass\n```\n\n----------------------------------------\n\nTITLE: Optional Attachment Handling\nDESCRIPTION: Shows how to handle optional file attachments in Discord commands.\nSOURCE: https://github.com/Rapptz/discord.py/blob/master/docs/ext/commands/commands.rst#2025-04-06_snippet_22\n\nLANGUAGE: python\nCODE:\n```\nimport typing\nimport discord\n\n@bot.command()\nasync def upload(ctx, attachment: typing.Optional[discord.Attachment]):\n    if attachment is None:\n        await ctx.send('You did not upload anything!')\n    else:\n        await ctx.send(f'You have uploaded <{attachment.url}>')\n```\n\n----------------------------------------\n\nTITLE: Calling Coroutines from Voice Player's After Function in Discord.py\nDESCRIPTION: Shows how to properly call a coroutine from a non-coroutine context, specifically in a voice player's 'after' callback. Uses asyncio.run_coroutine_threadsafe to safely execute a coroutine from another thread.\nSOURCE: https://github.com/Rapptz/discord.py/blob/master/docs/faq.rst#2025-04-06_snippet_9\n\nLANGUAGE: python\nCODE:\n```\ndef my_after(error):\n    coro = some_channel.send('Song is done!')\n    fut = asyncio.run_coroutine_threadsafe(coro, client.loop)\n    try:\n        fut.result()\n    except:\n        # an error happened sending the message\n        pass\n\nvoice.play(discord.FFmpegPCMAudio(url), after=my_after)\n```\n\n----------------------------------------\n\nTITLE: Using Basic Converters in Discord.py Commands\nDESCRIPTION: This snippet shows how to use basic converters like int to automatically convert command arguments to the desired type.\nSOURCE: https://github.com/Rapptz/discord.py/blob/master/docs/ext/commands/commands.rst#2025-04-06_snippet_7\n\nLANGUAGE: python\nCODE:\n```\n@bot.command()\nasync def add(ctx, a: int, b: int):\n    await ctx.send(a + b)\n```\n\n----------------------------------------\n\nTITLE: Implementing an Advanced Converter Class in Discord.py\nDESCRIPTION: This code shows how to create an advanced converter by subclassing commands.Converter and overriding the convert method. It demonstrates accessing context information within the converter.\nSOURCE: https://github.com/Rapptz/discord.py/blob/master/docs/ext/commands/commands.rst#2025-04-06_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nimport random\n\nclass Slapper(commands.Converter):\n    async def convert(self, ctx, argument):\n        to_slap = random.choice(ctx.guild.members)\n        return f'{ctx.author} slapped {to_slap} because *{argument}*'\n\n@bot.command()\nasync def slap(ctx, *, reason: Slapper):\n    await ctx.send(reason)\n```\n\n----------------------------------------\n\nTITLE: Event Registration in Python 3.5+ Using async/await Syntax\nDESCRIPTION: The modern way to register event handlers in discord.py v0.10.0 using Python 3.5+ async/await syntax, which is more concise than using decorators.\nSOURCE: https://github.com/Rapptz/discord.py/blob/master/docs/migrating_to_async.rst#2025-04-06_snippet_2\n\nLANGUAGE: python3\nCODE:\n```\n@client.event\nasync def on_message(message):\n    pass\n```\n\n----------------------------------------\n\nTITLE: Setting Activity Status in Discord.py\nDESCRIPTION: Demonstrates how to set a bot's activity status using the Client constructor or change_presence method. Shows different activity types such as playing, watching, etc.\nSOURCE: https://github.com/Rapptz/discord.py/blob/master/docs/faq.rst#2025-04-06_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nclient = discord.Client(activity=discord.Game(name='my game'))\n\n# or, for watching:\nactivity = discord.Activity(name='my activity', type=discord.ActivityType.watching)\nclient = discord.Client(activity=activity)\n```\n\n----------------------------------------\n\nTITLE: Using Built-in Advanced Converters in Discord.py\nDESCRIPTION: This snippet demonstrates the use of a built-in advanced converter, clean_content, which can be used with or without additional parameters for fine-tuning.\nSOURCE: https://github.com/Rapptz/discord.py/blob/master/docs/ext/commands/commands.rst#2025-04-06_snippet_10\n\nLANGUAGE: python\nCODE:\n```\n@bot.command()\nasync def clean(ctx, *, content: commands.clean_content):\n    await ctx.send(content)\n\n# or for fine-tuning\n\n@bot.command()\nasync def clean(ctx, *, content: commands.clean_content(use_nicknames=False)):\n    await ctx.send(content)\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Converter for Discord Commands\nDESCRIPTION: Demonstrates how to create a custom Converter class. Converters are used to transform command arguments into more complex types or objects.\nSOURCE: https://github.com/Rapptz/discord.py/blob/master/docs/ext/commands/api.rst#2025-04-06_snippet_4\n\nLANGUAGE: Python\nCODE:\n```\nclass CustomConverter(discord.ext.commands.Converter):\n    async def convert(self, ctx, argument):\n        # Convert logic here\n        return converted_value\n```\n\n----------------------------------------\n\nTITLE: Handling Presence Update Event in Discord.py\nDESCRIPTION: Event handler for when a Member updates their presence. Requires Intents.presences and Intents.members to be enabled. Provides the old and updated Member objects as parameters.\nSOURCE: https://github.com/Rapptz/discord.py/blob/master/docs/api.rst#2025-04-06_snippet_21\n\nLANGUAGE: python\nCODE:\n```\ndef on_presence_update(before, after):\n    # Event handler implementation\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Converter Function in Discord.py\nDESCRIPTION: This example demonstrates how to create and use a custom converter function that converts the input to uppercase.\nSOURCE: https://github.com/Rapptz/discord.py/blob/master/docs/ext/commands/commands.rst#2025-04-06_snippet_8\n\nLANGUAGE: python\nCODE:\n```\ndef to_upper(argument):\n    return argument.upper()\n\n@bot.command()\nasync def up(ctx, *, content: to_upper):\n    await ctx.send(content)\n```\n\n----------------------------------------\n\nTITLE: Implementing setup_hook in discord.py Client subclass\nDESCRIPTION: Example of subclassing the Client class to implement the new setup_hook method. This method is called after login but before connecting to the Discord gateway, allowing for asynchronous setup of bot features.\nSOURCE: https://github.com/Rapptz/discord.py/blob/master/docs/migrating.rst#2025-04-06_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nclass MyClient(discord.Client):\n    async def setup_hook(self):\n        print('This is asynchronous!')\n\nclient = MyClient()\nclient.run(TOKEN)\n```\n\n----------------------------------------\n\nTITLE: Adding Reactions to Messages in Discord.py\nDESCRIPTION: Demonstrates how to add emoji reactions to messages, covering both Unicode emoji and custom server emoji. Shows different ways to specify Unicode emoji and how to get custom emoji by ID or name.\nSOURCE: https://github.com/Rapptz/discord.py/blob/master/docs/faq.rst#2025-04-06_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nemoji = '\\N{THUMBS UP SIGN}'\n# or '\\U0001f44d' or '👍'\nawait message.add_reaction(emoji)\n```\n\nLANGUAGE: python\nCODE:\n```\n# if you have the ID already\nemoji = client.get_emoji(310177266011340803)\nawait message.add_reaction(emoji)\n\n# no ID, do a lookup\nemoji = discord.utils.get(guild.emojis, name='LUL')\nif emoji:\n    await message.add_reaction(emoji)\n\n# if you have the name and ID of a custom emoji:\nemoji = '<:python3:232720527448342530>'\nawait message.add_reaction(emoji)\n```\n\n----------------------------------------\n\nTITLE: Getting the ID of a Sent Message in Discord.py\nDESCRIPTION: Shows how to capture the Message object returned by the send method and extract its ID. This is useful for referencing messages later.\nSOURCE: https://github.com/Rapptz/discord.py/blob/master/docs/faq.rst#2025-04-06_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nmessage = await channel.send('hmm…')\nmessage_id = message.id\n```\n\n----------------------------------------\n\nTITLE: Implementing a Cog Class in Discord.py\nDESCRIPTION: Example of defining a Cog class, which is used to group related commands, listeners, and state together. Cogs provide a way to modularize bot functionality.\nSOURCE: https://github.com/Rapptz/discord.py/blob/master/docs/ext/commands/api.rst#2025-04-06_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\nclass SomeCog(discord.ext.commands.Cog):\n    def __init__(self, bot):\n        self.bot = bot\n\n    # Cog methods and commands\n```\n\n----------------------------------------\n\nTITLE: Using Local Image in Discord Embed with Python\nDESCRIPTION: Demonstrates how to use a local image file in a Discord embed. It shows how to upload the image and set it as the embed's image using the attachment:// URL scheme.\nSOURCE: https://github.com/Rapptz/discord.py/blob/master/docs/faq.rst#2025-04-06_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nfile = discord.File(\"path/to/my/image.png\", filename=\"image.png\")\nembed = discord.Embed()\nembed.set_image(url=\"attachment://image.png\")\nawait channel.send(file=file, embed=embed)\n```\n\n----------------------------------------\n\nTITLE: Sending a Message to a Specific Channel in Discord.py\nDESCRIPTION: Shows how to fetch a specific channel by ID and send a message to it. This is useful for targeting messages to predetermined channels.\nSOURCE: https://github.com/Rapptz/discord.py/blob/master/docs/faq.rst#2025-04-06_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nchannel = client.get_channel(12324234183172)\nawait channel.send('hello')\n```\n\n----------------------------------------\n\nTITLE: Customizing Command Name in Discord.py\nDESCRIPTION: This example shows how to change the name of a command to something different from the function name using the name parameter in the @bot.command() decorator.\nSOURCE: https://github.com/Rapptz/discord.py/blob/master/docs/ext/commands/commands.rst#2025-04-06_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n@bot.command(name='list')\nasync def _list(ctx, arg):\n    pass\n```\n\n----------------------------------------\n\nTITLE: Inter-Cog Communication in Discord.py\nDESCRIPTION: Example showing how to implement communication between cogs by retrieving another cog by name. This demonstrates an Economy and Gambling cog interaction where the Gambling cog uses Economy methods.\nSOURCE: https://github.com/Rapptz/discord.py/blob/master/docs/ext/commands/cogs.rst#2025-04-06_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nclass Economy(commands.Cog):\n    ...\n\n    async def withdraw_money(self, member, money):\n        # implementation here\n        ...\n\n    async def deposit_money(self, member, money):\n        # implementation here\n        ...\n\nclass Gambling(commands.Cog):\n    def __init__(self, bot):\n        self.bot = bot\n\n    def coinflip(self):\n        return random.randint(0, 1)\n\n    @commands.command()\n    async def gamble(self, ctx, money: int):\n        \"\"\"Gambles some money.\"\"\"\n        economy = self.bot.get_cog('Economy')\n        if economy is not None:\n            await economy.withdraw_money(ctx.author, money)\n            if self.coinflip() == 1:\n                await economy.deposit_money(ctx.author, money * 1.5)\n```\n\n----------------------------------------\n\nTITLE: Sending Direct Messages in Discord.py\nDESCRIPTION: Demonstrates two methods for sending direct messages to users: getting a user by ID, and responding directly to a message author. Both approaches use the send method.\nSOURCE: https://github.com/Rapptz/discord.py/blob/master/docs/faq.rst#2025-04-06_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nuser = client.get_user(381870129706958858)\nawait user.send('👀')\n```\n\nLANGUAGE: python\nCODE:\n```\nawait message.author.send('👋')\n```\n\n----------------------------------------\n\nTITLE: Handling Multiple Positional Arguments in Discord.py\nDESCRIPTION: This snippet demonstrates how to define a command that accepts multiple positional arguments and how to use them in the command function.\nSOURCE: https://github.com/Rapptz/discord.py/blob/master/docs/ext/commands/commands.rst#2025-04-06_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n@bot.command()\nasync def test(ctx, arg1, arg2):\n    await ctx.send(f'You passed {arg1} and {arg2}')\n```\n\n----------------------------------------\n\nTITLE: Handling Member Ban Event in Discord.py\nDESCRIPTION: Event handler for when a user gets banned from a Guild. Requires Intents.moderation to be enabled. Provides the Guild and banned User or Member objects as parameters.\nSOURCE: https://github.com/Rapptz/discord.py/blob/master/docs/api.rst#2025-04-06_snippet_19\n\nLANGUAGE: python\nCODE:\n```\ndef on_member_ban(guild, user):\n    # Event handler implementation\n```\n\n----------------------------------------\n\nTITLE: Finding Guild and Channel Using Discord Utils in Python\nDESCRIPTION: Demonstrates how to use discord.utils.get() to find a specific guild and channel by name. It also shows how to check if the guild was found before searching for the channel.\nSOURCE: https://github.com/Rapptz/discord.py/blob/master/docs/faq.rst#2025-04-06_snippet_10\n\nLANGUAGE: python\nCODE:\n```\n# find a guild by name\nguild = discord.utils.get(client.guilds, name='My Server')\n\n# make sure to check if it's found\nif guild is not None:\n    # find a channel by name\n    channel = discord.utils.get(guild.text_channels, name='cool-channel')\n```\n\n----------------------------------------\n\nTITLE: Using Variable Arguments in Discord.py Commands\nDESCRIPTION: This code shows how to create a command that accepts a variable number of arguments using *args syntax, allowing users to pass any number of arguments.\nSOURCE: https://github.com/Rapptz/discord.py/blob/master/docs/ext/commands/commands.rst#2025-04-06_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n@bot.command()\nasync def test(ctx, *args):\n    arguments = ', '.join(args)\n    await ctx.send(f'{len(args)} arguments: {arguments}')\n```\n\n----------------------------------------\n\nTITLE: Handling Member Unban Event in Discord.py\nDESCRIPTION: Event handler for when a User gets unbanned from a Guild. Requires Intents.moderation to be enabled. Provides the Guild and unbanned User objects as parameters.\nSOURCE: https://github.com/Rapptz/discord.py/blob/master/docs/api.rst#2025-04-06_snippet_20\n\nLANGUAGE: python\nCODE:\n```\ndef on_member_unban(guild, user):\n    # Event handler implementation\n```\n\n----------------------------------------\n\nTITLE: Making Asynchronous Web Request with aiohttp in Python\nDESCRIPTION: Shows how to make an asynchronous web request using aiohttp library. It includes error checking and JSON parsing of the response.\nSOURCE: https://github.com/Rapptz/discord.py/blob/master/docs/faq.rst#2025-04-06_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nasync with aiohttp.ClientSession() as session:\n    async with session.get('http://aws.random.cat/meow') as r:\n        if r.status == 200:\n            js = await r.json()\n```\n\n----------------------------------------\n\nTITLE: Exception Handling in Background Tasks\nDESCRIPTION: Shows how to add exception handling for database connection errors in a background task that performs batch updates.\nSOURCE: https://github.com/Rapptz/discord.py/blob/master/docs/ext/tasks/index.rst#2025-04-06_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport asyncpg\nfrom discord.ext import tasks, commands\n\nclass MyCog(commands.Cog):\n    def __init__(self, bot):\n        self.bot = bot\n        self.data = []\n        self.batch_update.add_exception_type(asyncpg.PostgresConnectionError)\n        self.batch_update.start()\n\n    def cog_unload(self):\n        self.batch_update.cancel()\n\n    @tasks.loop(minutes=5.0)\n    async def batch_update(self):\n        async with self.bot.pool.acquire() as con:\n            # batch update here...\n            pass\n```\n\n----------------------------------------\n\nTITLE: Defining ChannelType Enum in Python\nDESCRIPTION: Defines an enumeration for different types of Discord channels, including text, voice, private, group, category, news, stage, thread, forum, and media channels.\nSOURCE: https://github.com/Rapptz/discord.py/blob/master/docs/api.rst#2025-04-06_snippet_38\n\nLANGUAGE: python\nCODE:\n```\n.. class:: ChannelType\n\n    Specifies the type of channel.\n\n    .. attribute:: text\n\n        A text channel.\n    .. attribute:: voice\n\n        A voice channel.\n    .. attribute:: private\n\n        A private text channel. Also called a direct message.\n    .. attribute:: group\n\n        A private group text channel.\n    .. attribute:: category\n\n        A category channel.\n    .. attribute:: news\n\n        A guild news channel.\n\n    .. attribute:: stage_voice\n\n        A guild stage voice channel.\n\n        .. versionadded:: 1.7\n\n    .. attribute:: news_thread\n\n        A news thread\n\n        .. versionadded:: 2.0\n\n    .. attribute:: public_thread\n\n        A public thread\n\n        .. versionadded:: 2.0\n\n    .. attribute:: private_thread\n\n        A private thread\n\n        .. versionadded:: 2.0\n\n    .. attribute:: forum\n\n        A forum channel.\n\n        .. versionadded:: 2.0\n\n    .. attribute:: media\n\n        A media channel.\n\n        .. versionadded:: 2.4\n```\n\n----------------------------------------\n\nTITLE: Implementing Print Functions in Cog Event Hooks\nDESCRIPTION: Shows error handling and local before/after invoke hooks within a Cog. These methods print information about commands being executed and any errors that occur.\nSOURCE: https://github.com/Rapptz/discord.py/blob/master/docs/migrating_to_v1.rst#2025-04-06_snippet_16\n\nLANGUAGE: python\nCODE:\n```\nprint('Error in {0.command.qualified_name}: {1}'.format(ctx, error))\n\nasync def cog_before_invoke(self, ctx):\n    print('cog local before: {0.command.qualified_name}'.format(ctx))\n\nasync def cog_after_invoke(self, ctx):\n    print('cog local after: {0.command.qualified_name}'.format(ctx))\n\n@commands.Cog.listener()\nasync def on_message(self, message):\n    pass\n```\n\n----------------------------------------\n\nTITLE: Bot Ready Check Before Loop Start\nDESCRIPTION: Shows how to implement a wait condition before starting a loop, ensuring the bot is ready before beginning operations.\nSOURCE: https://github.com/Rapptz/discord.py/blob/master/docs/ext/tasks/index.rst#2025-04-06_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom discord.ext import tasks, commands\n\nclass MyCog(commands.Cog):\n    def __init__(self, bot):\n        self.index = 0\n        self.bot = bot\n        self.printer.start()\n\n    def cog_unload(self):\n        self.printer.cancel()\n\n    @tasks.loop(seconds=5.0)\n    async def printer(self):\n        print(self.index)\n        self.index += 1\n\n    @printer.before_loop\n    async def before_printer(self):\n        print('waiting...')\n        await self.bot.wait_until_ready()\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Cog with Special Methods in Discord.py\nDESCRIPTION: Demonstrates implementation of a cog with custom name and all special methods including checks and error handling.\nSOURCE: https://github.com/Rapptz/discord.py/blob/master/docs/migrating_to_v1.rst#2025-04-06_snippet_15\n\nLANGUAGE: python\nCODE:\n```\nclass MyCog(commands.Cog, name='Example Cog'):\n    def cog_unload(self):\n        print('cleanup goes here')\n\n    def bot_check(self, ctx):\n        print('bot check')\n        return True\n\n    def bot_check_once(self, ctx):\n        print('bot check once')\n        return True\n\n    async def cog_check(self, ctx):\n        print('cog local check')\n        return await ctx.bot.is_owner(ctx.author)\n\n    async def cog_command_error(self, ctx, error):\n```\n\n----------------------------------------\n\nTITLE: Implementing Per-Command Hooks in Discord.py\nDESCRIPTION: Shows how to add before and after invocation hooks to a specific command. These hooks only execute when the specific command they're attached to is called.\nSOURCE: https://github.com/Rapptz/discord.py/blob/master/docs/migrating_to_v1.rst#2025-04-06_snippet_18\n\nLANGUAGE: python\nCODE:\n```\n@bot.command()\nasync def foo(ctx):\n    await ctx.send('foo')\n\n@foo.before_invoke\nasync def before_foo_command(ctx):\n    # do something before the foo command is called\n    pass\n\n@foo.after_invoke\nasync def after_foo_command(ctx):\n    # do something after the foo command is called\n    pass\n```\n\n----------------------------------------\n\nTITLE: Loop Cancellation Handling\nDESCRIPTION: Demonstrates how to handle cleanup operations when a loop is cancelled, using a lock for thread safety.\nSOURCE: https://github.com/Rapptz/discord.py/blob/master/docs/ext/tasks/index.rst#2025-04-06_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom discord.ext import tasks, commands\nimport asyncio\n\nclass MyCog(commands.Cog):\n    def __init__(self, bot):\n        self.bot = bot\n        self._batch = []\n        self.lock = asyncio.Lock()\n        self.bulker.start()\n\n    async def cog_unload(self):\n        self.bulker.cancel()\n\n    async def do_bulk(self):\n        # bulk insert data here\n        ...\n\n    @tasks.loop(seconds=10.0)\n    async def bulker(self):\n        async with self.lock:\n            await self.do_bulk()\n\n    @bulker.after_loop\n    async def on_bulker_cancel(self):\n        if self.bulker.is_being_cancelled() and len(self._batch) != 0:\n            # if we're cancelled and we have some data left...\n            # let's insert it to our database\n            await self.do_bulk()\n```\n\n----------------------------------------\n\nTITLE: Handling Check Failures in Discord.py\nDESCRIPTION: This snippet demonstrates how to handle check failures using an error handler. It catches the CheckFailure exception and sends a custom message when the checks fail.\nSOURCE: https://github.com/Rapptz/discord.py/blob/master/docs/ext/commands/commands.rst#2025-04-06_snippet_38\n\nLANGUAGE: python\nCODE:\n```\n@bot.command()\n@commands.is_owner()\n@is_in_guild(41771983423143937)\nasync def secretguilddata(ctx):\n    \"\"\"super secret stuff\"\"\"\n    await ctx.send('secret stuff')\n\n@secretguilddata.error\nasync def secretguilddata_error(ctx, error):\n    if isinstance(error, commands.CheckFailure):\n        await ctx.send('nothing to see here comrade.')\n```\n\n----------------------------------------\n\nTITLE: Using Custom Context in Discord.py Commands\nDESCRIPTION: Demonstrates how to access custom context attributes within a bot command.\nSOURCE: https://github.com/Rapptz/discord.py/blob/master/docs/migrating_to_v1.rst#2025-04-06_snippet_13\n\nLANGUAGE: python\nCODE:\n```\n@bot.command()\nasync def secret(ctx):\n    await ctx.send(ctx.secret)\n```\n\n----------------------------------------\n\nTITLE: Multiple Daily Scheduled Tasks\nDESCRIPTION: Demonstrates how to schedule a task to run at multiple specific times throughout the day using UTC timezone.\nSOURCE: https://github.com/Rapptz/discord.py/blob/master/docs/ext/tasks/index.rst#2025-04-06_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nimport datetime\nfrom discord.ext import commands, tasks\n\nutc = datetime.timezone.utc\n\n# If no tzinfo is given then UTC is assumed.\ntimes = [\n    datetime.time(hour=8, tzinfo=utc),\n    datetime.time(hour=12, minute=30, tzinfo=utc),\n    datetime.time(hour=16, minute=40, second=30, tzinfo=utc)\n]\n\nclass MyCog(commands.Cog):\n    def __init__(self, bot):\n        self.bot = bot\n        self.my_task.start()\n\n    def cog_unload(self):\n        self.my_task.cancel()\n\n    @tasks.loop(time=times)\n    async def my_task(self):\n        print(\"My task is running!\")\n```\n\n----------------------------------------\n\nTITLE: Handling User Update Event in Discord.py\nDESCRIPTION: Event handler for when a User updates their profile. Requires Intents.members to be enabled. Provides the old and updated User objects as parameters.\nSOURCE: https://github.com/Rapptz/discord.py/blob/master/docs/api.rst#2025-04-06_snippet_18\n\nLANGUAGE: python\nCODE:\n```\ndef on_user_update(before, after):\n    # Event handler implementation\n```\n\n----------------------------------------\n\nTITLE: Implementing Voice Playback in Discord.py v1.0\nDESCRIPTION: Demonstrates the updated way to handle voice connections and audio playback in discord.py v1.0, using VoiceChannel.connect() and FFmpegPCMAudio source.\nSOURCE: https://github.com/Rapptz/discord.py/blob/master/docs/migrating_to_v1.rst#2025-04-06_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nvc = await channel.connect()\nvc.play(discord.FFmpegPCMAudio('testing.mp3'), after=lambda e: print('done', e))\nvc.is_playing()\nvc.pause()\nvc.resume()\nvc.stop()\n```\n\n----------------------------------------\n\nTITLE: Using aiohttp Instead of requests for HTTP Requests in Discord.py\nDESCRIPTION: Shows how to properly make HTTP requests in an asyncio context using aiohttp instead of the blocking requests library. This example fetches a random cat image from an API.\nSOURCE: https://github.com/Rapptz/discord.py/blob/master/docs/faq.rst#2025-04-06_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n# bad\nr = requests.get('http://aws.random.cat/meow')\nif r.status_code == 200:\n    js = r.json()\n    await channel.send(js['file'])\n\n# good\nasync with aiohttp.ClientSession() as session:\n    async with session.get('http://aws.random.cat/meow') as r:\n        if r.status == 200:\n            js = await r.json()\n            await channel.send(js['file'])\n```\n\n----------------------------------------\n\nTITLE: Handling Raw Integration Deletion Event in Discord.py\nDESCRIPTION: Event handler for when an integration is deleted. Requires Intents.integrations to be enabled. Provides the raw event payload data as a parameter.\nSOURCE: https://github.com/Rapptz/discord.py/blob/master/docs/api.rst#2025-04-06_snippet_12\n\nLANGUAGE: python\nCODE:\n```\ndef on_raw_integration_delete(payload):\n    # Event handler implementation\n```\n\n----------------------------------------\n\nTITLE: Migrating Snowflake IDs from String to Integer Type in Python\nDESCRIPTION: Demonstrates the change in how Discord snowflake IDs are handled, moving from string type to integer type. This affects channel and user ID comparisons.\nSOURCE: https://github.com/Rapptz/discord.py/blob/master/docs/migrating_to_v1.rst#2025-04-06_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n# before\nch = client.get_channel('84319995256905728')\nif message.author.id == '80528701850124288':\n    ...\n\n# after\nch = client.get_channel(84319995256905728)\nif message.author.id == 80528701850124288:\n    ...\n```\n\n----------------------------------------\n\nTITLE: Handling Timeout for Application Commands in Discord.py\nDESCRIPTION: Demonstrates how to handle timeout for application commands (slash commands) by attaching the interaction response message to the view for later editing.\nSOURCE: https://github.com/Rapptz/discord.py/blob/master/docs/faq.rst#2025-04-06_snippet_18\n\nLANGUAGE: python\nCODE:\n```\n@tree.command()\nasync def more_timeout_example(interaction):\n    \"\"\"Another example to showcase disabling buttons on timing out\"\"\"\n    view = MyView()\n    callback = await interaction.response.send_message('Press me!', view=view)\n\n    # Step 1\n    resource = callback.resource\n    # making sure it's an interaction response message\n    if isinstance(resource, discord.InteractionMessage):\n        view.message = resource\n```\n\n----------------------------------------\n\nTITLE: Handling Webhooks Update Event in Discord.py\nDESCRIPTION: Event handler for when a webhook is created, modified, or removed from a guild channel. Requires Intents.webhooks to be enabled. Provides the updated Channel object as a parameter.\nSOURCE: https://github.com/Rapptz/discord.py/blob/master/docs/api.rst#2025-04-06_snippet_11\n\nLANGUAGE: python\nCODE:\n```\ndef on_webhooks_update(channel):\n    # Event handler implementation\n```\n\n----------------------------------------\n\nTITLE: Voice State Access Changes in Discord.py v1.0\nDESCRIPTION: Demonstrates the changes in accessing voice state attributes for members in Discord.py v1.0. Shows how to safely check voice attributes through the Member.voice property which may be None.\nSOURCE: https://github.com/Rapptz/discord.py/blob/master/docs/migrating_to_v1.rst#2025-04-06_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n# before\nmember.deaf\nmember.voice.voice_channel\n\n# after\nif member.voice: # can be None\n    member.voice.deaf\n    member.voice.channel\n```\n\n----------------------------------------\n\nTITLE: Installing discord.py in a Virtual Environment\nDESCRIPTION: Command to install the latest version of discord.py within an activated virtual environment using pip.\nSOURCE: https://github.com/Rapptz/discord.py/blob/master/docs/intro.rst#2025-04-06_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\n$ pip install -U discord.py\n```\n\n----------------------------------------\n\nTITLE: Handling Raw Member Remove Event in Discord.py\nDESCRIPTION: Event handler for when a Member leaves a Guild, regardless of cache state. Requires Intents.members to be enabled. Provides the raw event payload data as a parameter.\nSOURCE: https://github.com/Rapptz/discord.py/blob/master/docs/api.rst#2025-04-06_snippet_16\n\nLANGUAGE: python\nCODE:\n```\ndef on_raw_member_remove(payload):\n    # Event handler implementation\n```\n\n----------------------------------------\n\nTITLE: Using UTC-aware datetime objects in discord.py\nDESCRIPTION: Example of using UTC-aware datetime objects with discord.py. The library now uses aware datetime objects in UTC, and the new utils.utcnow() helper function can be used to create them.\nSOURCE: https://github.com/Rapptz/discord.py/blob/master/docs/migrating.rst#2025-04-06_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n# before\nweek_ago = datetime.datetime.utcnow() - datetime.timedelta(days=7)\nif member.created_at > week_ago:\n    print(f'Member account {member} was created less than a week ago!')\n\n# after\n# The new helper function can be used here:\nweek_ago = discord.utils.utcnow() - datetime.timedelta(days=7)\n# ...or the equivalent result can be achieved with datetime.datetime.now():\nweek_ago = datetime.datetime.now(datetime.timezone.utc) - datetime.timedelta(days=7)\nif member.created_at > week_ago:\n    print(f'Member account {member} was created less than a week ago!')\n```\n\n----------------------------------------\n\nTITLE: Disabling Library Logging in discord.py\nDESCRIPTION: This snippet shows how to disable the default logging configuration provided by the discord.py library by passing None to the log_handler parameter.\nSOURCE: https://github.com/Rapptz/discord.py/blob/master/docs/logging.rst#2025-04-06_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nclient.run(token, log_handler=None)\n```\n\n----------------------------------------\n\nTITLE: Using asyncio.sleep Instead of time.sleep in Discord.py\nDESCRIPTION: Demonstrates the proper way to implement sleep functionality in asyncio context. Using time.sleep blocks the event loop, while asyncio.sleep properly yields control to other tasks.\nSOURCE: https://github.com/Rapptz/discord.py/blob/master/docs/faq.rst#2025-04-06_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n# bad\ntime.sleep(10)\n\n# good\nawait asyncio.sleep(10)\n```\n\n----------------------------------------\n\nTITLE: Using Asynchronous Webhooks in Discord.py v2.0\nDESCRIPTION: Demonstrates how to use asynchronous webhooks in discord.py, comparing the old approach using AsyncWebhookAdapter with the new simplified approach that uses a session parameter.\nSOURCE: https://github.com/Rapptz/discord.py/blob/master/docs/migrating.rst#2025-04-06_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n# before\nasync with aiohttp.ClientSession() as session:\n    webhook = discord.Webhook.from_url('url-here', adapter=discord.AsyncWebhookAdapter(session))\n    await webhook.send('Hello World', username='Foo')\n\n# after\nasync with aiohttp.ClientSession() as session:\n    webhook = discord.Webhook.from_url('url-here', session=session)\n    await webhook.send('Hello World', username='Foo')\n```\n\n----------------------------------------\n\nTITLE: Setting Debug Log Level in discord.py\nDESCRIPTION: This snippet demonstrates how to configure a file handler with DEBUG log level for verbose logging in discord.py.\nSOURCE: https://github.com/Rapptz/discord.py/blob/master/docs/logging.rst#2025-04-06_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport logging\n\nhandler = logging.FileHandler(filename='discord.log', encoding='utf-8', mode='w')\n\n# Assume client refers to a discord.Client subclass...\nclient.run(token, log_handler=handler, log_level=logging.DEBUG)\n```\n\n----------------------------------------\n\nTITLE: Implementing Global Checks in Discord.py\nDESCRIPTION: This snippet demonstrates how to implement a global check that applies to all commands. It uses the @bot.check decorator to create a check that blocks all DMs for every command.\nSOURCE: https://github.com/Rapptz/discord.py/blob/master/docs/ext/commands/commands.rst#2025-04-06_snippet_40\n\nLANGUAGE: python\nCODE:\n```\n@bot.check\nasync def globally_block_dms(ctx):\n    return ctx.guild is not None\n```\n\n----------------------------------------\n\nTITLE: Using asyncio.run() with discord.py Client\nDESCRIPTION: Example of using asyncio.run() to create an asynchronous event loop and start the discord.py Client. This new approach allows for better integration with other asynchronous code.\nSOURCE: https://github.com/Rapptz/discord.py/blob/master/docs/migrating.rst#2025-04-06_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclient = discord.Client()\n\nasync def main():\n    # do other async things\n    await my_async_function()\n\n    # start the client\n    async with client:\n        await client.start(TOKEN)\n\nasyncio.run(main())\n```\n\n----------------------------------------\n\nTITLE: Asynchronous Iteration in Discord.py\nDESCRIPTION: Examples of using async iterators for channel history, including filtering and mapping operations\nSOURCE: https://github.com/Rapptz/discord.py/blob/master/docs/migrating_to_v1.rst#2025-04-06_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nasync for message in channel.history():\n    print(message)\n```\n\nLANGUAGE: python\nCODE:\n```\nmessages = await channel.history().flatten()\nfor message in messages:\n    print(message)\n```\n\nLANGUAGE: python\nCODE:\n```\nasync for m_id in channel.history().filter(lambda m: m.author == client.user).map(lambda m: m.id):\n    print(m_id)\n```\n\nLANGUAGE: python\nCODE:\n```\nmy_last_message = await channel.history().get(author=client.user)\n```\n\n----------------------------------------\n\nTITLE: Custom Member Roles Converter Example\nDESCRIPTION: Demonstrates creating a custom converter that builds upon the MemberConverter to extract and return a list of member roles.\nSOURCE: https://github.com/Rapptz/discord.py/blob/master/docs/ext/commands/commands.rst#2025-04-06_snippet_14\n\nLANGUAGE: python\nCODE:\n```\nclass MemberRoles(commands.MemberConverter):\n    async def convert(self, ctx, argument):\n        member = await super().convert(ctx, argument)\n        return [role.name for role in member.roles[1:]] # Remove everyone role!\n\n@bot.command()\nasync def roles(ctx, *, member: MemberRoles):\n    \"\"\"Tells you a member's roles.\"\"\"\n    await ctx.send('I see the following roles: ' + ', '.join(member))\n```\n\n----------------------------------------\n\nTITLE: Migrating AsyncIterator Usage in Python\nDESCRIPTION: Demonstrates the migration from using AsyncIterator methods to alternative approaches in discord.py. This includes changes to history(), next(), get(), find(), flatten(), chunk(), map(), and filter() methods.\nSOURCE: https://github.com/Rapptz/discord.py/blob/master/docs/migrating.rst#2025-04-06_snippet_8\n\nLANGUAGE: python\nCODE:\n```\n# before\nasync for message in channel.history():\n    print(f'Found message with ID {message.id}')\n\n# after\nasync for message in channel.history():\n    print(f'Found message with ID {message.id}')\n```\n\nLANGUAGE: python\nCODE:\n```\n# before\nit = channel.history()\nfirst = await it.next()\nif first.content == 'do not iterate':\n    return\nasync for message in it:\n    ...\n\n# after\nit = channel.history()\nfirst = await anext(it)  # await it.__anext__() on Python<3.10\nif first.content == 'do not iterate':\n    return\nasync for message in it:\n    ...\n```\n\nLANGUAGE: python\nCODE:\n```\n# before\nmsg = await channel.history().get(author__name='Dave')\n\n# after\nmsg = await discord.utils.get(channel.history(), author__name='Dave')\n```\n\nLANGUAGE: python\nCODE:\n```\ndef predicate(event):\n    return event.reason is not None\n\n# before\nevent = await guild.audit_logs().find(predicate)\n\n# after\nevent = await discord.utils.find(predicate, guild.audit_logs())\n```\n\nLANGUAGE: python\nCODE:\n```\n# before\nusers = await reaction.users().flatten()\n\n# after\nusers = [user async for user in reaction.users()]\n```\n\nLANGUAGE: python\nCODE:\n```\n# before\nasync for leader, *users in reaction.users().chunk(3):\n    ...\n\n# after\nasync for leader, *users in discord.utils.as_chunks(reaction.users(), 3):\n    ...\n```\n\nLANGUAGE: python\nCODE:\n```\n# before\ncontent_of_messages = []\nasync for content in channel.history().map(lambda m: m.content):\n    content_of_messages.append(content)\n\n# after\ncontent_of_messages = [message.content async for message in channel.history()]\n```\n\nLANGUAGE: python\nCODE:\n```\ndef predicate(message):\n    return not message.author.bot\n\n# before\nuser_messages = []\nasync for message in channel.history().filter(lambda m: not m.author.bot):\n    user_messages.append(message)\n\n# after\nuser_messages = [message async for message in channel.history() if not m.author.bot]\n```\n\n----------------------------------------\n\nTITLE: Event Waiting Pattern in Discord.py v1.0\nDESCRIPTION: Demonstrates the updated wait_for pattern using predicates and timeout handling\nSOURCE: https://github.com/Rapptz/discord.py/blob/master/docs/migrating_to_v1.rst#2025-04-06_snippet_8\n\nLANGUAGE: python\nCODE:\n```\ndef pred(m):\n    return m.author == message.author and m.channel == message.channel\n\ntry:\n    msg = await client.wait_for('message', check=pred, timeout=60.0)\nexcept asyncio.TimeoutError:\n    await channel.send('You took too long...')\nelse:\n    await channel.send('You said {0.content}, {0.author}.'.format(msg))\n```\n\n----------------------------------------\n\nTITLE: Handling Guild Integrations Update Event in Discord.py\nDESCRIPTION: Event handler for when integrations are created, modified, or removed from a guild. Requires Intents.integrations to be enabled. Provides the updated Guild object as a parameter.\nSOURCE: https://github.com/Rapptz/discord.py/blob/master/docs/api.rst#2025-04-06_snippet_10\n\nLANGUAGE: python\nCODE:\n```\ndef on_guild_integrations_update(guild):\n    # Event handler implementation\n```\n\n----------------------------------------\n\nTITLE: Intents Attribute Iteration Example in Python\nDESCRIPTION: Demonstrates the change in iterating through Intents attributes, specifically the renaming of 'emojis' to 'emojis_and_stickers' in friendly name mapping.\nSOURCE: https://github.com/Rapptz/discord.py/blob/master/docs/migrating.rst#2025-04-06_snippet_10\n\nLANGUAGE: python\nCODE:\n```\n# before\nfriendly_names = {\n    ...,\n    'emojis': 'Emojis Intent',\n    ...,\n}\nfor name, value in discord.Intents.all():\n    print(f'{friendly_names[name]}: {value}')\n\n# after\nfriendly_names = {\n    ...,\n    'emojis_and_stickers': 'Emojis Intent',\n    ...,\n}\nfor name, value in discord.Intents.all():\n    print(f'{friendly_names[name]}: {value}')\n```\n\n----------------------------------------\n\nTITLE: Auto-Sharded Client Implementation\nDESCRIPTION: Examples of implementing auto-sharding in discord.py v1.0 with different configuration options\nSOURCE: https://github.com/Rapptz/discord.py/blob/master/docs/migrating_to_v1.rst#2025-04-06_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nclient = discord.AutoShardedClient()\n\n# launch 10 shards regardless\nclient = discord.AutoShardedClient(shard_count=10)\n\n# launch specific shard IDs in this process\nclient = discord.AutoShardedClient(shard_count=10, shard_ids=(1, 2, 5, 6))\n```\n\n----------------------------------------\n\nTITLE: Implementing Global Command Hooks in Discord.py\nDESCRIPTION: Demonstrates how to register global before and after invocation hooks that run for all commands. These hooks allow executing code before any command is called and after any command completes.\nSOURCE: https://github.com/Rapptz/discord.py/blob/master/docs/migrating_to_v1.rst#2025-04-06_snippet_17\n\nLANGUAGE: python\nCODE:\n```\n# global hooks:\n\n@bot.before_invoke\nasync def before_any_command(ctx):\n    # do something before a command is called\n    pass\n\n@bot.after_invoke\nasync def after_any_command(ctx):\n    # do something after a command is called\n    pass\n```\n\n----------------------------------------\n\nTITLE: Invalid Sequence Operations After Iterable Changes in Python\nDESCRIPTION: An example of code that worked before v0.10.0 but is now invalid due to the change from sequences to iterables for certain collections.\nSOURCE: https://github.com/Rapptz/discord.py/blob/master/docs/migrating_to_async.rst#2025-04-06_snippet_9\n\nLANGUAGE: python3\nCODE:\n```\nif client.servers[0].name == \"test\":\n    # do something\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Context Handler in Discord.py\nDESCRIPTION: Shows how to implement a message handler with custom context and invoke commands.\nSOURCE: https://github.com/Rapptz/discord.py/blob/master/docs/migrating_to_v1.rst#2025-04-06_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nasync def on_message(self, message):\n    ctx = await self.get_context(message, cls=MyContext)\n    await self.invoke(ctx)\n```\n\n----------------------------------------\n\nTITLE: Accessing New User Attributes in Python\nDESCRIPTION: Demonstrates how to access new user attributes like global_name and display_name after the username system update. Also shows changes to default avatar handling.\nSOURCE: https://github.com/Rapptz/discord.py/blob/master/docs/whats_new.rst#2025-04-06_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nuser.global_name  # Get global nickname\nuser.display_name  # Updated to understand global nicknames\nstr(user)  # Updated to drop discriminators for migrated users\nguild.get_member_named()  # Updated to work with migrated users\nuser.default_avatar  # Updated for migrated users\n```\n\n----------------------------------------\n\nTITLE: Event Registration After v0.10.0 with asyncio.coroutine in Python\nDESCRIPTION: The new way to register event handlers in discord.py v0.10.0 using the asyncio.coroutine decorator with the standard event decorator.\nSOURCE: https://github.com/Rapptz/discord.py/blob/master/docs/migrating_to_async.rst#2025-04-06_snippet_1\n\nLANGUAGE: python3\nCODE:\n```\n@client.event\n@asyncio.coroutine\ndef on_message(message):\n    pass\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Help Command in Discord.py Cog\nDESCRIPTION: Shows how to create a custom help command within a cog, including initialization and cleanup.\nSOURCE: https://github.com/Rapptz/discord.py/blob/master/docs/migrating_to_v1.rst#2025-04-06_snippet_14\n\nLANGUAGE: python\nCODE:\n```\nclass MyHelpCommand(commands.MinimalHelpCommand):\n    def get_command_signature(self, command):\n        return '{0.clean_prefix}{1.qualified_name} {1.signature}'.format(self, command)\n\nclass MyCog(commands.Cog):\n    def __init__(self, bot):\n        self._original_help_command = bot.help_command\n        bot.help_command = MyHelpCommand()\n        bot.help_command.cog = self\n\n    def cog_unload(self):\n        self.bot.help_command = self._original_help_command\n```\n\n----------------------------------------\n\nTITLE: Using typing.Literal Converter in Discord Commands\nDESCRIPTION: Demonstrates how to use typing.Literal to restrict parameter values to specific literals in a Discord bot command.\nSOURCE: https://github.com/Rapptz/discord.py/blob/master/docs/ext/commands/commands.rst#2025-04-06_snippet_17\n\nLANGUAGE: python\nCODE:\n```\nfrom typing import Literal\n\n@bot.command()\nasync def shop(ctx, buy_sell: Literal['buy', 'sell'], amount: Literal[1, 2], *, item: str):\n    await ctx.send(f'{buy_sell.capitalize()}ing {amount} {item}(s)!')\n```\n\n----------------------------------------\n\nTITLE: Function Calls After Coroutine Implementation with yield from in Python\nDESCRIPTION: The new asynchronous API call pattern in discord.py v0.10.0 using yield from to await coroutines in Python 3.4+.\nSOURCE: https://github.com/Rapptz/discord.py/blob/master/docs/migrating_to_async.rst#2025-04-06_snippet_7\n\nLANGUAGE: python3\nCODE:\n```\nyield from client.send_message(message.channel, 'Hello')\n```\n\n----------------------------------------\n\nTITLE: Implementing Cog-Level Hooks in Discord.py\nDESCRIPTION: Example of cog-level before and after invocation hooks. These hooks run for all commands defined within the cog and can be used to share data between the hook and the command.\nSOURCE: https://github.com/Rapptz/discord.py/blob/master/docs/migrating_to_v1.rst#2025-04-06_snippet_19\n\nLANGUAGE: python\nCODE:\n```\nclass MyCog(commands.Cog):\n    async def cog_before_invoke(self, ctx):\n        ctx.secret_cog_data = 'foo'\n\n    async def cog_after_invoke(self, ctx):\n        print('{0.command} is done...'.format(ctx))\n\n    @commands.command()\n    async def foo(self, ctx):\n        await ctx.send(ctx.secret_cog_data)\n```\n\n----------------------------------------\n\nTITLE: Accessing New Guild Premium Attributes in Python\nDESCRIPTION: This snippet demonstrates how to access the new attributes added for Discord Nitro boosting features on Guild objects.\nSOURCE: https://github.com/Rapptz/discord.py/blob/master/docs/whats_new.rst#2025-04-06_snippet_25\n\nLANGUAGE: Python\nCODE:\n```\npremium_tier = guild.premium_tier\nemoji_limit = guild.emoji_limit\nbitrate_limit = guild.bitrate_limit\nfilesize_limit = guild.filesize_limit\npremium_sub_count = guild.premium_subscription_count\npremium_subscribers = guild.premium_subscribers\nsystem_channel_flags = guild.system_channel_flags\n```\n\n----------------------------------------\n\nTITLE: Function Calls Before Coroutine Implementation in Python\nDESCRIPTION: The original synchronous API call pattern in discord.py before v0.10.0, which executed functions directly.\nSOURCE: https://github.com/Rapptz/discord.py/blob/master/docs/migrating_to_async.rst#2025-04-06_snippet_6\n\nLANGUAGE: python3\nCODE:\n```\nclient.send_message(message.channel, 'Hello')\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Old vs New Converter Pattern in Discord.py\nDESCRIPTION: Shows the change in converter implementation between older and newer versions of discord.py. The new pattern requires an async convert method that takes both context and argument parameters.\nSOURCE: https://github.com/Rapptz/discord.py/blob/master/docs/migrating_to_v1.rst#2025-04-06_snippet_20\n\nLANGUAGE: python\nCODE:\n```\nclass MyConverter(commands.Converter):\n    def convert(self):\n        return self.ctx.message.server.me\n```\n\nLANGUAGE: python\nCODE:\n```\nclass MyConverter(commands.Converter):\n    async def convert(self, ctx, argument):\n        return ctx.me\n```\n\n----------------------------------------\n\nTITLE: Custom FlagConverter with List\nDESCRIPTION: Shows how to create a custom FlagConverter with list parameters and default values.\nSOURCE: https://github.com/Rapptz/discord.py/blob/master/docs/ext/commands/commands.rst#2025-04-06_snippet_26\n\nLANGUAGE: python\nCODE:\n```\nfrom typing import List\n\nclass BanFlags(commands.FlagConverter):\n    members: List[discord.Member] = commands.flag(name='member', default=lambda ctx: [])\n```\n\n----------------------------------------\n\nTITLE: Event Signatures After v0.10.0 in Python\nDESCRIPTION: The updated event handler signatures in discord.py v0.10.0, which now provide before/after states for meaningful context in update events.\nSOURCE: https://github.com/Rapptz/discord.py/blob/master/docs/migrating_to_async.rst#2025-04-06_snippet_5\n\nLANGUAGE: python3\nCODE:\n```\ndef on_channel_update(before, after): pass\ndef on_member_update(before, after): pass\ndef on_server_role_update(before, after): pass\ndef on_voice_state_update(before, after): pass\ndef on_socket_raw_send(payload): pass\n```\n\n----------------------------------------\n\nTITLE: Updating Member Nickname in discord.py v2.0\nDESCRIPTION: Demonstrates the change in editing a member's nickname, where the edit method now returns a new instance of the updated model instead of modifying in-place.\nSOURCE: https://github.com/Rapptz/discord.py/blob/master/docs/migrating.rst#2025-04-06_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n# before\nawait member.edit(nick='new nick')\nawait member.send(f'Your new nick is {member.nick}')\n\n# after\nupdated_member = await member.edit(nick='new nick')\nawait member.send(f'Your new nick is {updated_member.nick}')\n```\n\n----------------------------------------\n\nTITLE: Scheduled Event Handler Functions\nDESCRIPTION: Event handlers for Discord scheduled events including creation, deletion, updates and user management. Requires guild_scheduled_events intent.\nSOURCE: https://github.com/Rapptz/discord.py/blob/master/docs/api.rst#2025-04-06_snippet_32\n\nLANGUAGE: python\nCODE:\n```\ndef on_scheduled_event_create(event):\n    # Handler for scheduled event creation\n    pass\n\ndef on_scheduled_event_delete(event):\n    # Handler for scheduled event deletion\n    pass\n\ndef on_scheduled_event_update(before, after):\n    # Handler for scheduled event updates\n    pass\n\ndef on_scheduled_event_user_add(event, user):\n    # Handler for user addition to scheduled event\n    pass\n\ndef on_scheduled_event_user_remove(event, user):\n    # Handler for user removal from scheduled event\n    pass\n```\n\n----------------------------------------\n\nTITLE: Using New Guild Methods in Discord.py\nDESCRIPTION: Demonstrates usage of new Guild methods for creating forums, editing guild settings, and accessing emojis.\nSOURCE: https://github.com/Rapptz/discord.py/blob/master/docs/whats_new.rst#2025-04-06_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nguild.create_forum(default_reaction_emoji=emoji, default_forum_layout=layout)\nguild.edit(widget_channel=channel, widget_enabled=True, mfa_level=level)\nguild.get_emoji(emoji_id)\n```\n\n----------------------------------------\n\nTITLE: Updating Extension Setup Function\nDESCRIPTION: Demonstrates the change from synchronous to asynchronous setup functions in Discord.py extensions, requiring the use of async/await syntax.\nSOURCE: https://github.com/Rapptz/discord.py/blob/master/docs/migrating.rst#2025-04-06_snippet_11\n\nLANGUAGE: python\nCODE:\n```\n# before\ndef setup(bot):\n    bot.add_cog(MyCog(bot))\n\n# after\nasync def setup(bot):\n    await bot.add_cog(MyCog(bot))\n```\n\n----------------------------------------\n\nTITLE: Entitlement Event Handlers\nDESCRIPTION: Event handlers for managing subscription and entitlement events in Discord.\nSOURCE: https://github.com/Rapptz/discord.py/blob/master/docs/api.rst#2025-04-06_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nasync def on_entitlement_create(entitlement):\n    # Called when user subscribes to SKU\n    pass\n\nasync def on_entitlement_update(entitlement):\n    # Called when subscription is updated\n    pass\n\nasync def on_entitlement_delete(entitlement):\n    # Called when subscription is cancelled\n    pass\n```\n\n----------------------------------------\n\nTITLE: Setting File as Spoiler in Python\nDESCRIPTION: Mark a file as a spoiler using the new File.spoiler attribute.\nSOURCE: https://github.com/Rapptz/discord.py/blob/master/docs/whats_new.rst#2025-04-06_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nfile.spoiler = True\n```\n\n----------------------------------------\n\nTITLE: Event Signatures Before v0.10.0 in Python\nDESCRIPTION: The original event handler signatures in discord.py before v0.10.0, which had limited context and state information.\nSOURCE: https://github.com/Rapptz/discord.py/blob/master/docs/migrating_to_async.rst#2025-04-06_snippet_4\n\nLANGUAGE: python3\nCODE:\n```\ndef on_channel_update(channel): pass\ndef on_member_update(member): pass\ndef on_status(member): pass\ndef on_server_role_update(role): pass\ndef on_voice_state_update(member): pass\ndef on_socket_raw_send(payload, is_binary): pass\n```\n\n----------------------------------------\n\nTITLE: Disabling View Items on Timeout in Discord.py\nDESCRIPTION: Shows how to disable all items in a View when it times out. It demonstrates creating a custom View class, overriding the on_timeout method, and updating the message with the disabled view.\nSOURCE: https://github.com/Rapptz/discord.py/blob/master/docs/faq.rst#2025-04-06_snippet_17\n\nLANGUAGE: python\nCODE:\n```\nclass MyView(discord.ui.View):\n    async def on_timeout(self) -> None:\n        # Step 2\n        for item in self.children:\n            item.disabled = True\n\n        # Step 3\n        await self.message.edit(view=self)\n\n    @discord.ui.button(label='Example')\n    async def example_button(self, interaction: discord.Interaction, button: discord.ui.Button):\n        await interaction.response.send_message('Hello!', ephemeral=True)\n\n@bot.command()\nasync def timeout_example(ctx):\n    \"\"\"An example to showcase disabling buttons on timing out\"\"\"\n    view = MyView()\n    # Step 1\n    view.message = await ctx.send('Press me!', view=view)\n```\n\n----------------------------------------\n\nTITLE: Using Callable Class Factories in Voice Connections\nDESCRIPTION: Allow callable class factories to be used when connecting to voice channels via abc.Connectable.connect().\nSOURCE: https://github.com/Rapptz/discord.py/blob/master/docs/whats_new.rst#2025-04-06_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nawait voice_channel.connect(cls=MyVoiceClientFactory)\n```\n\n----------------------------------------\n\nTITLE: Working with Iterables After v0.10.0 in Python\nDESCRIPTION: The correct way to handle the new iterable collections in discord.py v0.10.0 by explicitly converting them to lists first.\nSOURCE: https://github.com/Rapptz/discord.py/blob/master/docs/migrating_to_async.rst#2025-04-06_snippet_10\n\nLANGUAGE: python3\nCODE:\n```\nservers = list(client.servers)\n# work with servers\n```\n\n----------------------------------------\n\nTITLE: Uploading Files from URLs in Discord.py\nDESCRIPTION: Shows how to download a file from a URL using aiohttp and upload it to Discord. This approach uses BytesIO to handle the file data without saving it to disk.\nSOURCE: https://github.com/Rapptz/discord.py/blob/master/docs/faq.rst#2025-04-06_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nimport io\nimport aiohttp\n\nasync with aiohttp.ClientSession() as session:\n    async with session.get(my_url) as resp:\n        if resp.status != 200:\n            return await channel.send('Could not download file...')\n        data = io.BytesIO(await resp.read())\n        await channel.send(file=discord.File(data, 'cool_image.png'))\n```\n\n----------------------------------------\n\nTITLE: Getting Mutual Guilds for a User in Python\nDESCRIPTION: Retrieve mutual guilds for a user from the client's cache using the new User.mutual_guilds attribute.\nSOURCE: https://github.com/Rapptz/discord.py/blob/master/docs/whats_new.rst#2025-04-06_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nuser.mutual_guilds\n```\n\n----------------------------------------\n\nTITLE: Enum Usage Before v0.10.0 in Python\nDESCRIPTION: The original string-based approach for representing states and types in discord.py before v0.10.0.\nSOURCE: https://github.com/Rapptz/discord.py/blob/master/docs/migrating_to_async.rst#2025-04-06_snippet_11\n\nLANGUAGE: python3\nCODE:\n```\nserver.region == 'us-west'\nmember.status == 'online'\nchannel.type == 'text'\n```\n\n----------------------------------------\n\nTITLE: Handling Invite Creation Event in Discord.py\nDESCRIPTION: Event handler for when an Invite is created. Requires the manage_channels permission and Intents.invites to be enabled. Provides the created Invite object as a parameter.\nSOURCE: https://github.com/Rapptz/discord.py/blob/master/docs/api.rst#2025-04-06_snippet_6\n\nLANGUAGE: python\nCODE:\n```\ndef on_invite_create(invite):\n    # Event handler implementation\n```\n\n----------------------------------------\n\nTITLE: Creating Color Objects in Python\nDESCRIPTION: Demonstrates creating Color objects using factory methods like dark_theme() for Discord embeds.\nSOURCE: https://github.com/Rapptz/discord.py/blob/master/docs/whats_new.rst#2025-04-06_snippet_18\n\nLANGUAGE: python\nCODE:\n```\ncolor = Colour.dark_theme()\n```\n\n----------------------------------------\n\nTITLE: Enum Usage After v0.10.0 in Python\nDESCRIPTION: The new enum-based approach for representing states and types in discord.py v0.10.0, providing better type safety and intellisense.\nSOURCE: https://github.com/Rapptz/discord.py/blob/master/docs/migrating_to_async.rst#2025-04-06_snippet_12\n\nLANGUAGE: python3\nCODE:\n```\nserver.region == discord.ServerRegion.us_west\nmember.status = discord.Status.online\nchannel.type == discord.ChannelType.text\n```\n\n----------------------------------------\n\nTITLE: Using Tuple Annotation in Flag Converter in Python\nDESCRIPTION: Shows how to use tuple annotation for more compact flag syntax in Discord.py commands, allowing multiple values for a single flag.\nSOURCE: https://github.com/Rapptz/discord.py/blob/master/docs/ext/commands/commands.rst#2025-04-06_snippet_30\n\nLANGUAGE: python3\nCODE:\n```\nfrom discord.ext import commands\nfrom typing import Tuple\nimport discord\n\nclass BanFlags(commands.FlagConverter):\n    members: Tuple[discord.Member, ...]\n    reason: str\n    days: int = 1\n```\n\n----------------------------------------\n\nTITLE: Handling Voice Messages in Discord.py\nDESCRIPTION: Shows how to check for voice message flags and access new voice message-related attributes on attachments.\nSOURCE: https://github.com/Rapptz/discord.py/blob/master/docs/whats_new.rst#2025-04-06_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nmessage.flags.voice  # Check if message is a voice message\nattachment.duration  # Get voice message duration\nattachment.waveform  # Get voice message waveform\nattachment.is_voice_message()  # Check if attachment is a voice message\n```\n\n----------------------------------------\n\nTITLE: Sending Silent Messages in Discord.py\nDESCRIPTION: Shows how to send a silent message that doesn't trigger notifications, and how to check if a message is silent.\nSOURCE: https://github.com/Rapptz/discord.py/blob/master/docs/whats_new.rst#2025-04-06_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nawait channel.send(\"This is a silent message\", silent=True)\n\nif message.flags.suppress_notifications:\n    print(\"This message is silent\")\n```\n\n----------------------------------------\n\nTITLE: Using Parameter Metadata in Python\nDESCRIPTION: Shows how to use parameter metadata to provide type hints and default values for command parameters in Discord.py.\nSOURCE: https://github.com/Rapptz/discord.py/blob/master/docs/ext/commands/commands.rst#2025-04-06_snippet_32\n\nLANGUAGE: python3\nCODE:\n```\n@bot.command()\nasync def wave(ctx, to: discord.User = commands.Author):\n    await ctx.send(f'Hello {to.mention} :wave:')\n```\n\n----------------------------------------\n\nTITLE: Accessing Guild ID in Raw Message Update Event\nDESCRIPTION: Get the guild ID from a raw message update event using the new RawMessageUpdateEvent.guild_id attribute.\nSOURCE: https://github.com/Rapptz/discord.py/blob/master/docs/whats_new.rst#2025-04-06_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nevent.guild_id\n```\n\n----------------------------------------\n\nTITLE: Accessing Voice Channel RTC Region in Python\nDESCRIPTION: Access the RTC region of a voice channel using the new VoiceChannel.rtc_region attribute.\nSOURCE: https://github.com/Rapptz/discord.py/blob/master/docs/whats_new.rst#2025-04-06_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nchannel.rtc_region\n```\n\n----------------------------------------\n\nTITLE: Fetching a Channel by ID in Python\nDESCRIPTION: This code shows how to use the new Client.fetch_channel method to retrieve a channel by its ID.\nSOURCE: https://github.com/Rapptz/discord.py/blob/master/docs/whats_new.rst#2025-04-06_snippet_28\n\nLANGUAGE: Python\nCODE:\n```\nchannel_id = 123456789\nchannel = await client.fetch_channel(channel_id)\nprint(f\"Fetched channel: {channel.name}\")\n```\n\n----------------------------------------\n\nTITLE: Accessing Message Reference Jump URL in Python\nDESCRIPTION: Get the jump URL for a message reference using the new MessageReference.jump_url attribute.\nSOURCE: https://github.com/Rapptz/discord.py/blob/master/docs/whats_new.rst#2025-04-06_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nmessage_reference.jump_url\n```\n\n----------------------------------------\n\nTITLE: Getting URL for Partial Emoji with Options in Python\nDESCRIPTION: Use the new PartialEmoji.url_as() method to get the URL for a partial emoji with optional parameters.\nSOURCE: https://github.com/Rapptz/discord.py/blob/master/docs/whats_new.rst#2025-04-06_snippet_5\n\nLANGUAGE: python\nCODE:\n```\npartial_emoji.url_as()\n```\n\n----------------------------------------\n\nTITLE: Reloading an Extension in Discord.py\nDESCRIPTION: This snippet shows how to reload an extension at runtime using the reload_extension method of the Bot class. This allows developers to apply changes to an extension without restarting the bot.\nSOURCE: https://github.com/Rapptz/discord.py/blob/master/docs/ext/commands/extensions.rst#2025-04-06_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n>>> await bot.reload_extension('hello')\n```\n\n----------------------------------------\n\nTITLE: Using Guild Templates in Python\nDESCRIPTION: Demonstrates fetching and using guild templates to create new Discord servers programmatically.\nSOURCE: https://github.com/Rapptz/discord.py/blob/master/docs/whats_new.rst#2025-04-06_snippet_20\n\nLANGUAGE: python\nCODE:\n```\ntemplate = await client.fetch_template('template_code')\nguild = await client.create_guild('Guild Name', template=template)\n```\n\n----------------------------------------\n\nTITLE: Estimating Pruned Members with Roles in Python\nDESCRIPTION: Pass roles when estimating pruned members using the Guild.estimate_pruned_members() method.\nSOURCE: https://github.com/Rapptz/discord.py/blob/master/docs/whats_new.rst#2025-04-06_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nguild.estimate_pruned_members(roles=roles)\n```\n\n----------------------------------------\n\nTITLE: Debug Event Handlers\nDESCRIPTION: Event handlers for debugging purposes, including error handling and WebSocket event monitoring.\nSOURCE: https://github.com/Rapptz/discord.py/blob/master/docs/api.rst#2025-04-06_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nasync def on_error(event, *args, **kwargs):\n    # Handle uncaught exceptions from events\n    pass\n\nasync def on_socket_event_type(event_type):\n    # Monitor WebSocket events\n    pass\n\nasync def on_socket_raw_receive(msg):\n    # Raw WebSocket message receive handler\n    pass\n\nasync def on_socket_raw_send(payload):\n    # Raw WebSocket message send handler\n    pass\n```\n\n----------------------------------------\n\nTITLE: Managing Guild Integrations in Python\nDESCRIPTION: Shows how to work with Discord guild integrations, including fetching, creating, editing and deleting them.\nSOURCE: https://github.com/Rapptz/discord.py/blob/master/docs/whats_new.rst#2025-04-06_snippet_21\n\nLANGUAGE: python\nCODE:\n```\nintegrations = await guild.integrations()\nnew_integration = await guild.create_integration(type='discord', id='integration_id')\nawait integration.edit(expire_behavior=1)\nawait integration.delete()\n```\n\n----------------------------------------\n\nTITLE: Editing Partial Message in Python\nDESCRIPTION: Edit a partial message and receive a full Message object upon success using PartialMessage.edit().\nSOURCE: https://github.com/Rapptz/discord.py/blob/master/docs/whats_new.rst#2025-04-06_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nfull_message = await partial_message.edit(content=\"New content\")\n```\n\n----------------------------------------\n\nTITLE: Installing Discord.py Basic Library in Python\nDESCRIPTION: Commands for installing the basic discord.py library without voice support on different operating systems. This requires Python 3.8 or higher and is recommended to be installed in a virtual environment.\nSOURCE: https://github.com/Rapptz/discord.py/blob/master/README.rst#2025-04-06_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n# Linux/macOS\npython3 -m pip install -U discord.py\n\n# Windows\npy -3 -m pip install -U discord.py\n```\n\n----------------------------------------\n\nTITLE: Using setup_logging Utility in discord.py\nDESCRIPTION: This snippet demonstrates how to use discord.utils.setup_logging() to configure logging without using Client.run. It shows both basic usage and customized configuration.\nSOURCE: https://github.com/Rapptz/discord.py/blob/master/docs/logging.rst#2025-04-06_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nimport discord\n\ndiscord.utils.setup_logging()\n\n# or, for example\ndiscord.utils.setup_logging(level=logging.INFO, root=False)\n```\n\n----------------------------------------\n\nTITLE: Accessing Attachment Content Type in Python\nDESCRIPTION: Get the content type of an attachment using the new Attachment.content_type attribute.\nSOURCE: https://github.com/Rapptz/discord.py/blob/master/docs/whats_new.rst#2025-04-06_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nattachment.content_type\n```\n\n----------------------------------------\n\nTITLE: Sending Messages in Discord.py v1.0\nDESCRIPTION: Examples of sending messages with the new consolidated send() method, including text, embeds and file attachments\nSOURCE: https://github.com/Rapptz/discord.py/blob/master/docs/migrating_to_v1.rst#2025-04-06_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nawait channel.send('Hello')\n```\n\nLANGUAGE: python\nCODE:\n```\ne = discord.Embed(title='foo')\nawait channel.send('Hello', embed=e)\n```\n\nLANGUAGE: python\nCODE:\n```\nawait channel.send('Hello', file=discord.File('cool.png', 'testing.png'))\n```\n\nLANGUAGE: python\nCODE:\n```\nmy_files = [\n    discord.File('cool.png', 'testing.png'),\n    discord.File(some_fp, 'cool_filename.png'),\n]\n\nawait channel.send('Your images:', files=my_files)\n```\n\n----------------------------------------\n\nTITLE: Configuring File-based Logging in discord.py\nDESCRIPTION: This snippet demonstrates how to set up a file handler for logging discord.py output. It creates a FileHandler to save logs to 'discord.log' in write mode with UTF-8 encoding.\nSOURCE: https://github.com/Rapptz/discord.py/blob/master/docs/logging.rst#2025-04-06_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport logging\n\nhandler = logging.FileHandler(filename='discord.log', encoding='utf-8', mode='w')\n\n# Assume client refers to a discord.Client subclass...\nclient.run(token, log_handler=handler)\n```\n\n----------------------------------------\n\nTITLE: Removing Markdown from Text in Python\nDESCRIPTION: Remove markdown formatting from text using the new utils.remove_markdown() helper function.\nSOURCE: https://github.com/Rapptz/discord.py/blob/master/docs/whats_new.rst#2025-04-06_snippet_15\n\nLANGUAGE: python\nCODE:\n```\nclean_text = utils.remove_markdown(markdown_text)\n```\n\n----------------------------------------\n\nTITLE: Event Handler Updates in Discord.py v1.0\nDESCRIPTION: Updated event handler signatures showing the new parameter structure for various Discord events\nSOURCE: https://github.com/Rapptz/discord.py/blob/master/docs/migrating_to_v1.rst#2025-04-06_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nasync def on_voice_state_update(member, before, after)\n```\n\nLANGUAGE: python\nCODE:\n```\nasync def on_guild_emojis_update(guild, before, after)\n```\n\nLANGUAGE: python\nCODE:\n```\nasync def on_member_ban(guild, user)\n```\n\n----------------------------------------\n\nTITLE: Configuring Root Logger in discord.py\nDESCRIPTION: This snippet shows how to apply the library's logging configuration to all loggers rather than just the discord logger by setting root_logger to True.\nSOURCE: https://github.com/Rapptz/discord.py/blob/master/docs/logging.rst#2025-04-06_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nclient.run(token, log_handler=handler, root_logger=True)\n```\n\n----------------------------------------\n\nTITLE: Generating OAuth URL with Scopes in Python\nDESCRIPTION: Generate an OAuth URL with specific scopes using utils.oauth_url().\nSOURCE: https://github.com/Rapptz/discord.py/blob/master/docs/whats_new.rst#2025-04-06_snippet_16\n\nLANGUAGE: python\nCODE:\n```\noauth_url = utils.oauth_url(client_id, scopes=['identify', 'guilds'])\n```\n\n----------------------------------------\n\nTITLE: Checking Member Boosting Status in Python\nDESCRIPTION: This code shows how to check when a member started boosting a guild using the new premium_since attribute.\nSOURCE: https://github.com/Rapptz/discord.py/blob/master/docs/whats_new.rst#2025-04-06_snippet_26\n\nLANGUAGE: Python\nCODE:\n```\nboost_date = member.premium_since\nif boost_date:\n    print(f\"{member.name} has been boosting since {boost_date}\")\nelse:\n    print(f\"{member.name} is not boosting this guild\")\n```\n\n----------------------------------------\n\nTITLE: Running a Discord Bot Script on Unix-based Systems\nDESCRIPTION: This command demonstrates how to run a Python Discord bot script on Unix-based systems (Linux, macOS) using the python3 command.\nSOURCE: https://github.com/Rapptz/discord.py/blob/master/docs/quickstart.rst#2025-04-06_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n$ python3 example_bot.py\n```\n\n----------------------------------------\n\nTITLE: Implementing Gateway Intents in Python\nDESCRIPTION: Shows how to use the new intents system when initializing the Discord client. Intents allow controlling which events the bot receives.\nSOURCE: https://github.com/Rapptz/discord.py/blob/master/docs/whats_new.rst#2025-04-06_snippet_17\n\nLANGUAGE: python\nCODE:\n```\nintents = Intents()\nclient = Client(intents=intents)\n```\n\n----------------------------------------\n\nTITLE: Using New Guild Icon Methods in Python\nDESCRIPTION: This snippet demonstrates the new methods for handling animated guild icons.\nSOURCE: https://github.com/Rapptz/discord.py/blob/master/docs/whats_new.rst#2025-04-06_snippet_27\n\nLANGUAGE: Python\nCODE:\n```\nif guild.is_icon_animated():\n    icon_url = guild.icon_url_as(format='gif')\nelse:\n    icon_url = guild.icon_url_as(format='png')\n\nprint(f\"Guild icon URL: {icon_url}\")\n```\n\n----------------------------------------\n\nTITLE: Activating Virtual Environment on Windows\nDESCRIPTION: Command to activate a Python virtual environment on Windows systems. This makes the virtual environment active for the current command prompt session.\nSOURCE: https://github.com/Rapptz/discord.py/blob/master/docs/intro.rst#2025-04-06_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n$ bot-env\\Scripts\\activate.bat\n```\n\n----------------------------------------\n\nTITLE: Configuring Allowed Mentions in Python\nDESCRIPTION: Shows how to configure allowed mentions when sending messages, to control what gets pinged.\nSOURCE: https://github.com/Rapptz/discord.py/blob/master/docs/whats_new.rst#2025-04-06_snippet_19\n\nLANGUAGE: python\nCODE:\n```\nallowed_mentions = AllowedMentions.none()\nclient = Client(allowed_mentions=allowed_mentions)\n```\n\n----------------------------------------\n\nTITLE: Inline Advanced Converter Implementation in Discord.py\nDESCRIPTION: Demonstrates how to create an inline converter using a classmethod, simplifying the converter pattern by combining the class and converter functionality.\nSOURCE: https://github.com/Rapptz/discord.py/blob/master/docs/ext/commands/commands.rst#2025-04-06_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nclass JoinDistance:\n    def __init__(self, joined, created):\n        self.joined = joined\n        self.created = created\n\n    @classmethod\n    async def convert(cls, ctx, argument):\n        member = await commands.MemberConverter().convert(ctx, argument)\n        return cls(member.joined_at, member.created_at)\n\n    @property\n    def delta(self):\n        return self.joined - self.created\n\n@bot.command()\nasync def delta(ctx, *, member: JoinDistance):\n    is_new = member.delta.days < 100\n    if is_new:\n        await ctx.send(\"Hey you're pretty new!\")\n    else:\n        await ctx.send(\"Hm you're not so new.\")\n```\n\n----------------------------------------\n\nTITLE: Activating Virtual Environment on Linux/MacOS\nDESCRIPTION: Command to activate a Python virtual environment on Linux or MacOS systems. This makes the virtual environment active for the current terminal session.\nSOURCE: https://github.com/Rapptz/discord.py/blob/master/docs/intro.rst#2025-04-06_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n$ source bot-env/bin/activate\n```\n\n----------------------------------------\n\nTITLE: Discord.py Task Extension Updates\nDESCRIPTION: New functionality added to the tasks extension including runtime checking and error handling capabilities.\nSOURCE: https://github.com/Rapptz/discord.py/blob/master/docs/whats_new.rst#2025-04-06_snippet_24\n\nLANGUAGE: Python\nCODE:\n```\next.tasks.Loop.is_running\next.tasks.Loop.error\n```\n\n----------------------------------------\n\nTITLE: Discord.py Command Extension Updates\nDESCRIPTION: Changes to the command extension system including new decorators for before/after command invocation and cooldown management functionality.\nSOURCE: https://github.com/Rapptz/discord.py/blob/master/docs/whats_new.rst#2025-04-06_snippet_23\n\nLANGUAGE: Python\nCODE:\n```\next.commands.before_invoke\next.commands.after_invoke\nCommand.get_cooldown_retry_after\nHelpCommand\n```\n\n----------------------------------------\n\nTITLE: Removing a Cog from a Discord Bot\nDESCRIPTION: Demonstrates how to remove a previously registered cog from a Discord bot using the remove_cog method, referencing the cog by its name.\nSOURCE: https://github.com/Rapptz/discord.py/blob/master/docs/ext/commands/cogs.rst#2025-04-06_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nawait bot.remove_cog('Greetings')\n```\n\n----------------------------------------\n\nTITLE: Stopping a Task Loop Gracefully in Python\nDESCRIPTION: This snippet demonstrates how to use the new stop method to gracefully stop a task loop in the tasks extension.\nSOURCE: https://github.com/Rapptz/discord.py/blob/master/docs/whats_new.rst#2025-04-06_snippet_29\n\nLANGUAGE: Python\nCODE:\n```\nfrom discord.ext import tasks\n\n@tasks.loop(seconds=60)\nasync def my_task():\n    # Task logic here\n    pass\n\n# Somewhere in your code\nawait my_task.stop()\n```\n\n----------------------------------------\n\nTITLE: Daily Scheduled Task Implementation\nDESCRIPTION: Shows how to schedule a task to run at a specific time each day using UTC timezone.\nSOURCE: https://github.com/Rapptz/discord.py/blob/master/docs/ext/tasks/index.rst#2025-04-06_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nimport datetime\nfrom discord.ext import commands, tasks\n\nutc = datetime.timezone.utc\n\n# If no tzinfo is given then UTC is assumed.\ntime = datetime.time(hour=8, minute=30, tzinfo=utc)\n\nclass MyCog(commands.Cog):\n    def __init__(self, bot):\n        self.bot = bot\n        self.my_task.start()\n\n    def cog_unload(self):\n        self.my_task.cancel()\n\n    @tasks.loop(time=time)\n    async def my_task(self):\n        print(\"My task is running!\")\n```\n\n----------------------------------------\n\nTITLE: Customizing Flag Syntax in Python\nDESCRIPTION: Shows different ways to customize flag syntax in Discord.py, including POSIX-like, Windows-like, and case-insensitive options.\nSOURCE: https://github.com/Rapptz/discord.py/blob/master/docs/ext/commands/commands.rst#2025-04-06_snippet_28\n\nLANGUAGE: python3\nCODE:\n```\n# --hello world syntax\nclass PosixLikeFlags(commands.FlagConverter, delimiter=' ', prefix='--'):\n    hello: str\n\n\n# /make food\nclass WindowsLikeFlags(commands.FlagConverter, prefix='/', delimiter=''):\n    make: str\n\n# TOPIC: not allowed nsfw: yes Slowmode: 100\nclass Settings(commands.FlagConverter, case_insensitive=True):\n    topic: Optional[str]\n    nsfw: Optional[bool]\n    slowmode: Optional[int]\n\n# Hello there --bold True\nclass Greeting(commands.FlagConverter):\n    text: str = commands.flag(positional=True)\n    bold: bool = False\n```\n\n----------------------------------------\n\nTITLE: Discord.py API Method Usage Example\nDESCRIPTION: Examples showing usage of various Discord.py API methods like Client.change_presence, Client.get_all_emojis, and Server.role_hierarchy.\nSOURCE: https://github.com/Rapptz/discord.py/blob/master/docs/whats_new.rst#2025-04-06_snippet_30\n\nLANGUAGE: Python\nCODE:\n```\nClient.change_presence() # For changing user status\nClient.get_all_emojis() # For retrieving all emojis\nServer.role_hierarchy # For getting server role hierarchy\nClient.get_user_info() # For retrieving user info from ID\nClient.prune_members() # For pruning inactive members\n```\n\n----------------------------------------\n\nTITLE: Discord.py API Method References\nDESCRIPTION: Documentation showing the addition of new methods and properties to the discord.py library, including voice state management, invite handling, and member querying functionality.\nSOURCE: https://github.com/Rapptz/discord.py/blob/master/docs/whats_new.rst#2025-04-06_snippet_22\n\nLANGUAGE: Python\nCODE:\n```\nGuild.change_voice_state\nPartialInviteGuild.is_icon_animated\nPartialInviteGuild.icon_url_as\nGuild.query_members\nGuild.prune_members\n```\n\n----------------------------------------\n\nTITLE: Defining ReactionType Enum in Python\nDESCRIPTION: Defines an enum class ReactionType representing the type of a reaction in Discord.py.\nSOURCE: https://github.com/Rapptz/discord.py/blob/master/docs/api.rst#2025-04-06_snippet_62\n\nLANGUAGE: python\nCODE:\n```\nclass ReactionType:\n    normal\n    burst\n```\n\n----------------------------------------\n\nTITLE: Handling Invite Deletion Event in Discord.py\nDESCRIPTION: Event handler for when an Invite is deleted. Requires the manage_channels permission and Intents.invites to be enabled. Provides the deleted Invite object as a parameter.\nSOURCE: https://github.com/Rapptz/discord.py/blob/master/docs/api.rst#2025-04-06_snippet_7\n\nLANGUAGE: python\nCODE:\n```\ndef on_invite_delete(invite):\n    # Event handler implementation\n```\n\n----------------------------------------\n\nTITLE: Client Authentication and Execution After v0.10.0 in Python\nDESCRIPTION: The new way to authenticate and run the Discord client in discord.py v0.10.0, combining login and run into a single function call.\nSOURCE: https://github.com/Rapptz/discord.py/blob/master/docs/migrating_to_async.rst#2025-04-06_snippet_14\n\nLANGUAGE: python3\nCODE:\n```\nclient.run('token')\n```\n\n----------------------------------------\n\nTITLE: Defining AuditLogChanges Class in Python\nDESCRIPTION: Defines a class AuditLogChanges representing an audit log change set in Discord.py, with attributes for before and after states.\nSOURCE: https://github.com/Rapptz/discord.py/blob/master/docs/api.rst#2025-04-06_snippet_66\n\nLANGUAGE: python\nCODE:\n```\nclass AuditLogChanges:\n    before\n    after\n```\n\n----------------------------------------\n\nTITLE: Handling Integration Creation Event in Discord.py\nDESCRIPTION: Event handler for when an integration is created. Requires Intents.integrations to be enabled. Provides the created Integration object as a parameter.\nSOURCE: https://github.com/Rapptz/discord.py/blob/master/docs/api.rst#2025-04-06_snippet_8\n\nLANGUAGE: python\nCODE:\n```\ndef on_integration_create(integration):\n    # Event handler implementation\n```\n\n----------------------------------------\n\nTITLE: Advanced Rotating File Handler Configuration in discord.py\nDESCRIPTION: This snippet shows an advanced logging setup using a rotating file handler that keeps five backup files of 32 MiB each. It configures DEBUG-level output for discord module but INFO-level for HTTP requests.\nSOURCE: https://github.com/Rapptz/discord.py/blob/master/docs/logging.rst#2025-04-06_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nimport discord\nimport logging\nimport logging.handlers\n\nlogger = logging.getLogger('discord')\nlogger.setLevel(logging.DEBUG)\nlogging.getLogger('discord.http').setLevel(logging.INFO)\n\nhandler = logging.handlers.RotatingFileHandler(\n    filename='discord.log',\n    encoding='utf-8',\n    maxBytes=32 * 1024 * 1024,  # 32 MiB\n    backupCount=5,  # Rotate through 5 files\n)\ndt_fmt = '%Y-%m-%d %H:%M:%S'\nformatter = logging.Formatter('[{asctime}] [{levelname:<8}] {name}: {message}', dt_fmt, style='{')\nhandler.setFormatter(formatter)\nlogger.addHandler(handler)\n\n# Assume client refers to a discord.Client subclass...\n# Suppress the default configuration since we have our own\nclient.run(token, log_handler=None)\n```\n\n----------------------------------------\n\nTITLE: Defining NSFWLevel Enumeration in Python\nDESCRIPTION: This class represents the NSFW (Not Safe For Work) levels of a guild in Discord. It includes attributes for default, explicit, safe, and age_restricted levels, along with comparison operations.\nSOURCE: https://github.com/Rapptz/discord.py/blob/master/docs/api.rst#2025-04-06_snippet_46\n\nLANGUAGE: python\nCODE:\n```\nclass NSFWLevel:\n    default\n    explicit\n    safe\n    age_restricted\n```\n\n----------------------------------------\n\nTITLE: Handling Integration Update Event in Discord.py\nDESCRIPTION: Event handler for when an integration is updated. Requires Intents.integrations to be enabled. Provides the updated Integration object as a parameter.\nSOURCE: https://github.com/Rapptz/discord.py/blob/master/docs/api.rst#2025-04-06_snippet_9\n\nLANGUAGE: python\nCODE:\n```\ndef on_integration_update(integration):\n    # Event handler implementation\n```\n\n----------------------------------------\n\nTITLE: Loading Extensions Asynchronously\nDESCRIPTION: Shows different approaches to loading extensions asynchronously in Discord.py 2.0, including using setup_hook and async context managers.\nSOURCE: https://github.com/Rapptz/discord.py/blob/master/docs/migrating.rst#2025-04-06_snippet_12\n\nLANGUAGE: python\nCODE:\n```\n# before\nbot.load_extension('my_extension')\n\n# after using setup_hook\nclass MyBot(commands.Bot):\n    async def setup_hook(self):\n        await self.load_extension('my_extension')\n\n# after using async_with\nasync def main():\n    async with bot:\n        await bot.load_extension('my_extension')\n        await bot.start(TOKEN)\n\nasyncio.run(main())\n```\n\n----------------------------------------\n\nTITLE: Defining ForumOrderType Enumeration in Python\nDESCRIPTION: This class represents the order types for forum posts in Discord. It includes attributes for latest_activity and creation_date ordering.\nSOURCE: https://github.com/Rapptz/discord.py/blob/master/docs/api.rst#2025-04-06_snippet_55\n\nLANGUAGE: python\nCODE:\n```\nclass ForumOrderType:\n    latest_activity\n    creation_date\n```\n\n----------------------------------------\n\nTITLE: Handling Member Join Event in Discord.py\nDESCRIPTION: Event handler for when a Member joins a Guild. Requires Intents.members to be enabled. Provides the joined Member object as a parameter.\nSOURCE: https://github.com/Rapptz/discord.py/blob/master/docs/api.rst#2025-04-06_snippet_14\n\nLANGUAGE: python\nCODE:\n```\ndef on_member_join(member):\n    # Event handler implementation\n```\n\n----------------------------------------\n\nTITLE: Updating Converter Metaclass\nDESCRIPTION: Demonstrates how to update custom converter classes to work with the new Generic Runtime Protocol system in Discord.py 2.0.\nSOURCE: https://github.com/Rapptz/discord.py/blob/master/docs/migrating.rst#2025-04-06_snippet_13\n\nLANGUAGE: python\nCODE:\n```\n# before\nclass SomeConverterMeta(type):\n    ...\n\nclass SomeConverter(commands.Converter, metaclass=SomeConverterMeta):\n    ...\n\n# after\nclass SomeConverterMeta(type(commands.Converter)):\n    ...\n\nclass SomeConverter(commands.Converter, metaclass=SomeConverterMeta):\n    ...\n```\n\n----------------------------------------\n\nTITLE: Defining VideoQualityMode Enumeration in Python\nDESCRIPTION: This class represents the camera video quality modes for voice channel participants in Discord. It includes attributes for auto and full quality modes.\nSOURCE: https://github.com/Rapptz/discord.py/blob/master/docs/api.rst#2025-04-06_snippet_44\n\nLANGUAGE: python\nCODE:\n```\nclass VideoQualityMode:\n    auto\n    full\n```\n\n----------------------------------------\n\nTITLE: Handling Member Remove Event in Discord.py\nDESCRIPTION: Event handler for when a Member leaves a Guild. Requires Intents.members to be enabled. Provides the removed Member object as a parameter.\nSOURCE: https://github.com/Rapptz/discord.py/blob/master/docs/api.rst#2025-04-06_snippet_15\n\nLANGUAGE: python\nCODE:\n```\ndef on_member_remove(member):\n    # Event handler implementation\n```\n\n----------------------------------------\n\nTITLE: Limited Count Loop Implementation\nDESCRIPTION: Example of creating a loop that runs a specific number of times before stopping, with a completion callback.\nSOURCE: https://github.com/Rapptz/discord.py/blob/master/docs/ext/tasks/index.rst#2025-04-06_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom discord.ext import tasks\nimport discord\n\n@tasks.loop(seconds=5.0, count=5)\nasync def slow_count():\n    print(slow_count.current_loop)\n\n@slow_count.after_loop\nasync def after_slow_count():\n    print('done!')\n\nclass MyClient(discord.Client):\n    async def setup_hook(self):\n        slow_count.start()\n```\n\n----------------------------------------\n\nTITLE: Defining EntitlementType Enumeration in Python\nDESCRIPTION: This class represents the types of entitlements in Discord. It includes attributes for purchase, premium_subscription, developer_gift, test_mode_purchase, free_purchase, and user_gift types.\nSOURCE: https://github.com/Rapptz/discord.py/blob/master/docs/api.rst#2025-04-06_snippet_58\n\nLANGUAGE: python\nCODE:\n```\nclass EntitlementType:\n    purchase\n    premium_subscription\n    developer_gift\n    test_mode_purchase\n    free_purchase\n    user_gift\n```\n\n----------------------------------------\n\nTITLE: Handling Member Update Event in Discord.py\nDESCRIPTION: Event handler for when a Member updates their profile. Requires Intents.members to be enabled. Provides the old and updated Member objects as parameters.\nSOURCE: https://github.com/Rapptz/discord.py/blob/master/docs/api.rst#2025-04-06_snippet_17\n\nLANGUAGE: python\nCODE:\n```\ndef on_member_update(before, after):\n    # Event handler implementation\n```\n\n----------------------------------------\n\nTITLE: Channel Type Checking in Python with Discord.py\nDESCRIPTION: Examples showing how to check channel types using isinstance() after the channel type split in Discord.py v1.0\nSOURCE: https://github.com/Rapptz/discord.py/blob/master/docs/migrating_to_v1.rst#2025-04-06_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nisinstance(channel, discord.abc.GuildChannel)\n```\n\nLANGUAGE: python\nCODE:\n```\nisinstance(channel, discord.abc.PrivateChannel)\n```\n\nLANGUAGE: python\nCODE:\n```\nisinstance(channel, discord.TextChannel)\n```\n\n----------------------------------------\n\nTITLE: Defining PollLayoutType Enum in Python\nDESCRIPTION: Defines an enum class PollLayoutType representing how poll answers are shown in Discord.py.\nSOURCE: https://github.com/Rapptz/discord.py/blob/master/docs/api.rst#2025-04-06_snippet_60\n\nLANGUAGE: python\nCODE:\n```\nclass PollLayoutType:\n    default\n```\n\n----------------------------------------\n\nTITLE: Handling Raw Presence Update Event in Discord.py\nDESCRIPTION: Event handler for when a Member updates their presence, regardless of cache state. Requires Intents.presences to be enabled. Provides the raw presence update event model as a parameter.\nSOURCE: https://github.com/Rapptz/discord.py/blob/master/docs/api.rst#2025-04-06_snippet_22\n\nLANGUAGE: python\nCODE:\n```\ndef on_raw_presence_update(payload):\n    # Event handler implementation\n```\n\n----------------------------------------\n\nTITLE: Running a Discord Bot Script on Windows\nDESCRIPTION: This command demonstrates how to run a Python Discord bot script on Windows using the py command with Python 3.\nSOURCE: https://github.com/Rapptz/discord.py/blob/master/docs/quickstart.rst#2025-04-06_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ py -3 example_bot.py\n```\n\n----------------------------------------\n\nTITLE: Discord Model Class Definition Example\nDESCRIPTION: Example of Python class definitions with type hints commonly used throughout the discord.py library for representing Discord entities like channels, users, and messages.\nSOURCE: https://github.com/Rapptz/discord.py/blob/master/docs/api.rst#2025-04-06_snippet_69\n\nLANGUAGE: python\nCODE:\n```\nclass BanEntry:\n    def __init__(self):\n        self.reason: Optional[str]\n        self.user: User\n\nclass BulkBanResult:\n    def __init__(self):\n        self.banned: List[Object]\n        self.failed: List[Object]\n```\n\n----------------------------------------\n\nTITLE: Handling Bulk Message Delete Event in Discord.py\nDESCRIPTION: Event handler for when multiple messages are deleted at once. Requires Intents.messages to be enabled. Provides a list of deleted Message objects as a parameter.\nSOURCE: https://github.com/Rapptz/discord.py/blob/master/docs/api.rst#2025-04-06_snippet_26\n\nLANGUAGE: python\nCODE:\n```\ndef on_bulk_message_delete(messages):\n    # Event handler implementation\n```\n\n----------------------------------------\n\nTITLE: Installing discord.py without Voice Support\nDESCRIPTION: Commands to install discord.py library without voice support for different operating systems using pip.\nSOURCE: https://github.com/Rapptz/discord.py/blob/master/README.ja.rst#2025-04-06_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n# Linux/macOS\npython3 -m pip install -U discord.py\n\n# Windows\npy -3 -m pip install -U discord.py\n```\n\n----------------------------------------\n\nTITLE: Message Bulk Delete Event Handler\nDESCRIPTION: Event handler for bulk message deletions. Only triggers for messages in cache. Requires messages intent.\nSOURCE: https://github.com/Rapptz/discord.py/blob/master/docs/api.rst#2025-04-06_snippet_27\n\nLANGUAGE: python\nCODE:\n```\non_bulk_message_delete(messages)\n```\n\n----------------------------------------\n\nTITLE: Handling Member and Presence Updates in discord.py v2.0\nDESCRIPTION: Shows the separation of member updates and presence updates into two distinct events, improving consistency with the Discord API and potentially benefiting event listeners.\nSOURCE: https://github.com/Rapptz/discord.py/blob/master/docs/migrating.rst#2025-04-06_snippet_7\n\nLANGUAGE: python\nCODE:\n```\n# before\n@client.event\nasync def on_member_update(self, before, after):\n    if before.nick != after.nick:\n        await nick_changed(before, after)\n    if before.status != after.status:\n        await status_changed(before, after)\n\n# after\n@client.event\nasync def on_member_update(self, before, after):\n    if before.nick != after.nick:\n        await nick_changed(before, after)\n\n@client.event\nasync def on_presence_update(self, before, after):\n    if before.status != after.status:\n        await status_changed(before, after)\n```\n\n----------------------------------------\n\nTITLE: Raw Message Edit Event Handler\nDESCRIPTION: Event handler triggered when any message is edited, regardless of cache state. Provides raw gateway event data.\nSOURCE: https://github.com/Rapptz/discord.py/blob/master/docs/api.rst#2025-04-06_snippet_28\n\nLANGUAGE: python\nCODE:\n```\non_raw_message_edit(payload)\n```\n\n----------------------------------------\n\nTITLE: Custom Context Class Implementation\nDESCRIPTION: Shows how to create a custom Context class with additional functionality in discord.py v1.0\nSOURCE: https://github.com/Rapptz/discord.py/blob/master/docs/migrating_to_v1.rst#2025-04-06_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nclass MyContext(commands.Context):\n    @property\n    def secret(self):\n        return 'my secret here'\n\nclass MyBot(commands.Bot):\n```\n\n----------------------------------------\n\nTITLE: Soundboard Handler Functions\nDESCRIPTION: Event handlers for Discord soundboard sounds including creation, deletion and updates. Added in version 2.5.\nSOURCE: https://github.com/Rapptz/discord.py/blob/master/docs/api.rst#2025-04-06_snippet_33\n\nLANGUAGE: python\nCODE:\n```\ndef on_soundboard_sound_create(sound):\n    # Handler for soundboard sound creation\n    pass\n\ndef on_soundboard_sound_delete(sound):\n    # Handler for soundboard sound deletion\n    pass\n\ndef on_soundboard_sound_update(before, after):\n    # Handler for soundboard sound updates\n    pass\n```\n\n----------------------------------------\n\nTITLE: AIOHTTP Session Usage in Discord.py v1.0\nDESCRIPTION: Shows the recommended way to make HTTP requests using aiohttp sessions after v1.0 upgrade\nSOURCE: https://github.com/Rapptz/discord.py/blob/master/docs/migrating_to_v1.rst#2025-04-06_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nasync with aiohttp.ClientSession() as sess:\n    async with sess.get('url') as resp:\n        # work with resp\n```\n\n----------------------------------------\n\nTITLE: Thread Handler Functions\nDESCRIPTION: Event handlers for Discord threads including creation, updates, deletion and member management. Requires guilds intent.\nSOURCE: https://github.com/Rapptz/discord.py/blob/master/docs/api.rst#2025-04-06_snippet_35\n\nLANGUAGE: python\nCODE:\n```\ndef on_thread_create(thread):\n    # Handler for thread creation\n    pass\n\ndef on_thread_update(before, after):\n    # Handler for thread updates\n    pass\n\ndef on_thread_delete(thread):\n    # Handler for thread deletion\n    pass\n\ndef on_thread_member_join(member):\n    # Handler for thread member joining\n    pass\n\ndef on_thread_member_remove(member):\n    # Handler for thread member removal\n    pass\n```\n\n----------------------------------------\n\nTITLE: Function Calls After Coroutine Implementation with async/await in Python 3.5+\nDESCRIPTION: The modern asynchronous API call pattern in discord.py v0.10.0 using async/await syntax in Python 3.5+.\nSOURCE: https://github.com/Rapptz/discord.py/blob/master/docs/migrating_to_async.rst#2025-04-06_snippet_8\n\nLANGUAGE: python3\nCODE:\n```\nawait client.send_message(message.channel, 'Hello')\n```\n\n----------------------------------------\n\nTITLE: Defining MessageType Enum in Python\nDESCRIPTION: Defines an enumeration for different types of Discord messages, including system messages, regular messages, and various notification types.\nSOURCE: https://github.com/Rapptz/discord.py/blob/master/docs/api.rst#2025-04-06_snippet_39\n\nLANGUAGE: python\nCODE:\n```\n.. class:: MessageType\n\n    Specifies the type of :class:`Message`. This is used to denote if a message\n    is to be interpreted as a system message or a regular message.\n\n    .. container:: operations\n\n      .. describe:: x == y\n\n          Checks if two messages are equal.\n      .. describe:: x != y\n\n          Checks if two messages are not equal.\n\n    .. attribute:: default\n\n        The default message type. This is the same as regular messages.\n    .. attribute:: recipient_add\n\n        The system message when a user is added to a group private\n        message or a thread.\n    .. attribute:: recipient_remove\n\n        The system message when a user is removed from a group private\n        message or a thread.\n    .. attribute:: call\n\n        The system message denoting call state, e.g. missed call, started call,\n        etc.\n    .. attribute:: channel_name_change\n\n        The system message denoting that a channel's name has been changed.\n    .. attribute:: channel_icon_change\n\n        The system message denoting that a channel's icon has been changed.\n    .. attribute:: pins_add\n\n        The system message denoting that a pinned message has been added to a channel.\n    .. attribute:: new_member\n\n        The system message denoting that a new member has joined a Guild.\n\n    .. attribute:: premium_guild_subscription\n\n        The system message denoting that a member has \"nitro boosted\" a guild.\n    .. attribute:: premium_guild_tier_1\n\n        The system message denoting that a member has \"nitro boosted\" a guild\n        and it achieved level 1.\n    .. attribute:: premium_guild_tier_2\n\n        The system message denoting that a member has \"nitro boosted\" a guild\n        and it achieved level 2.\n    .. attribute:: premium_guild_tier_3\n\n        The system message denoting that a member has \"nitro boosted\" a guild\n        and it achieved level 3.\n    .. attribute:: channel_follow_add\n\n        The system message denoting that an announcement channel has been followed.\n\n        .. versionadded:: 1.3\n    .. attribute:: guild_stream\n\n        The system message denoting that a member is streaming in the guild.\n\n        .. versionadded:: 1.7\n    .. attribute:: guild_discovery_disqualified\n\n        The system message denoting that the guild is no longer eligible for Server\n        Discovery.\n\n        .. versionadded:: 1.7\n    .. attribute:: guild_discovery_requalified\n\n        The system message denoting that the guild has become eligible again for Server\n        Discovery.\n\n        .. versionadded:: 1.7\n    .. attribute:: guild_discovery_grace_period_initial_warning\n\n        The system message denoting that the guild has failed to meet the Server\n        Discovery requirements for one week.\n\n        .. versionadded:: 1.7\n    .. attribute:: guild_discovery_grace_period_final_warning\n\n        The system message denoting that the guild has failed to meet the Server\n        Discovery requirements for 3 weeks in a row.\n\n        .. versionadded:: 1.7\n    .. attribute:: thread_created\n\n        The system message denoting that a thread has been created. This is only\n        sent if the thread has been created from an older message. The period of time\n        required for a message to be considered old cannot be relied upon and is up to\n        Discord.\n\n        .. versionadded:: 2.0\n    .. attribute:: reply\n\n        The system message denoting that the author is replying to a message.\n\n        .. versionadded:: 2.0\n    .. attribute:: chat_input_command\n\n        The system message denoting that a slash command was executed.\n\n        .. versionadded:: 2.0\n    .. attribute:: guild_invite_reminder\n\n        The system message sent as a reminder to invite people to the guild.\n\n        .. versionadded:: 2.0\n    .. attribute:: thread_starter_message\n\n        The system message denoting the message in the thread that is the one that started the\n        thread's conversation topic.\n\n        .. versionadded:: 2.0\n    .. attribute:: context_menu_command\n\n        The system message denoting that a context menu command was executed.\n\n        .. versionadded:: 2.0\n    .. attribute:: auto_moderation_action\n\n        The system message sent when an AutoMod rule is triggered. This is only\n        sent if the rule is configured to sent an alert when triggered.\n\n        .. versionadded:: 2.0\n    .. attribute:: role_subscription_purchase\n\n        The system message sent when a user purchases or renews a role subscription.\n\n        .. versionadded:: 2.2\n    .. attribute:: interaction_premium_upsell\n\n        The system message sent when a user is given an advertisement to purchase a premium tier for\n        an application during an interaction.\n\n        .. versionadded:: 2.2\n    .. attribute:: stage_start\n\n        The system message sent when the stage starts.\n\n        .. versionadded:: 2.2\n    .. attribute:: stage_end\n\n        The system message sent when the stage ends.\n\n        .. versionadded:: 2.2\n    .. attribute:: stage_speaker\n\n        The system message sent when the stage speaker changes.\n\n        .. versionadded:: 2.2\n    .. attribute:: stage_raise_hand\n\n        The system message sent when a user is requesting to speak by raising their hands.\n\n        .. versionadded:: 2.2\n    .. attribute:: stage_topic\n\n        The system message sent when the stage topic changes.\n\n        .. versionadded:: 2.2\n    .. attribute:: guild_application_premium_subscription\n\n        The system message sent when an application's premium subscription is purchased for the guild.\n\n        .. versionadded:: 2.2\n\n    .. attribute:: guild_incident_alert_mode_enabled\n\n        The system message sent when security actions is enabled.\n\n        .. versionadded:: 2.4\n\n    .. attribute:: guild_incident_alert_mode_disabled\n\n        The system message sent when security actions is disabled.\n\n        .. versionadded:: 2.4\n\n    .. attribute:: guild_incident_report_raid\n\n        The system message sent when a raid is reported.\n\n        .. versionadded:: 2.4\n\n    .. attribute:: guild_incident_report_false_alarm\n\n        The system message sent when a false alarm is reported.\n\n        .. versionadded:: 2.4\n\n    .. attribute:: purchase_notification\n\n        The system message sent when a purchase is made in the guild.\n\n        .. versionadded:: 2.5\n\n    .. attribute:: poll_result\n\n        The system message sent when a poll has closed.\n```\n\n----------------------------------------\n\nTITLE: Using Synchronous Webhooks in Discord.py v2.0\nDESCRIPTION: Shows how to use synchronous webhooks in discord.py, comparing the previous implementation using RequestsWebhookAdapter with the new approach using the dedicated SyncWebhook class.\nSOURCE: https://github.com/Rapptz/discord.py/blob/master/docs/migrating.rst#2025-04-06_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n# before\nwebhook = discord.Webhook.partial(123456, 'token-here', adapter=discord.RequestsWebhookAdapter())\nwebhook.send('Hello World', username='Foo')\n\n# after\nwebhook = discord.SyncWebhook.partial(123456, 'token-here')\nwebhook.send('Hello World', username='Foo')\n```\n\n----------------------------------------\n\nTITLE: Defining Discord.py Enum Classes\nDESCRIPTION: Definitions of various enum classes used in Discord.py for representing different types of Discord features and behaviors. Includes audit log categories, team membership states, webhook types, expiration behaviors, default avatars, and sticker types.\nSOURCE: https://github.com/Rapptz/discord.py/blob/master/docs/api.rst#2025-04-06_snippet_41\n\nLANGUAGE: python\nCODE:\n```\nclass AuditLogActionCategory:\n    create = None  # The action is the creation of something\n    delete = None  # The action is the deletion of something\n    update = None  # The action is the update of something\n\nclass TeamMembershipState:\n    invited = None   # Represents an invited member\n    accepted = None # Represents a member currently in the team\n\nclass TeamMemberRole:\n    admin = None      # The team member is an admin\n    developer = None  # The team member is a developer\n    read_only = None  # The team member is a read-only member\n\nclass WebhookType:\n    incoming = None         # Webhook that can post messages to channels\n    channel_follower = None # Internally managed Discord webhook\n    application = None      # Webhook used for interactions\n\nclass ExpireBehaviour:\n    remove_role = None # Removes role when subscription finishes\n    kick = None        # Kicks user when subscription finishes\n\nclass DefaultAvatar:\n    blurple = None\n    grey = None\n    gray = None\n    green = None\n    orange = None\n    red = None\n    pink = None\n\nclass StickerType:\n    standard = None # Standard sticker for Nitro users\n    guild = None    # Guild-specific sticker\n```\n\n----------------------------------------\n\nTITLE: Embed Changes in Discord.py\nDESCRIPTION: Shows the changes in handling embeds, including the removal of Embed.Empty sentinel and the implementation of Embed.__eq__.\nSOURCE: https://github.com/Rapptz/discord.py/blob/master/docs/migrating.rst#2025-04-06_snippet_9\n\nLANGUAGE: python\nCODE:\n```\n# before\nembed = discord.Embed(title='foo')\nembed.title = discord.Embed.Empty\nembed == embed.copy() # False\n\n# after\nembed = discord.Embed(title='foo')\nembed.title = None\nembed == embed.copy() # True\n{embed, embed} # Raises TypeError\n```\n\n----------------------------------------\n\nTITLE: Defining InviteTarget Enumeration in Python\nDESCRIPTION: This class represents the different types of invite targets for voice channel invites in Discord. It includes attributes for unknown, stream, and embedded_application targets.\nSOURCE: https://github.com/Rapptz/discord.py/blob/master/docs/api.rst#2025-04-06_snippet_43\n\nLANGUAGE: python\nCODE:\n```\nclass InviteTarget:\n    unknown\n    stream\n    embedded_application\n```\n\n----------------------------------------\n\nTITLE: Using the Utility async_event Decorator in Python\nDESCRIPTION: A simplified way to register event handlers in discord.py v0.10.0 using the provided async_event utility decorator that wraps the function as a coroutine.\nSOURCE: https://github.com/Rapptz/discord.py/blob/master/docs/migrating_to_async.rst#2025-04-06_snippet_3\n\nLANGUAGE: python3\nCODE:\n```\n@client.async_event\ndef on_message(message):\n    pass\n```\n\n----------------------------------------\n\nTITLE: Defining MFALevel Enumeration in Python\nDESCRIPTION: This class represents the Multi-Factor Authentication requirement levels of a guild in Discord. It includes attributes for disabled and require_2fa levels, along with comparison operations.\nSOURCE: https://github.com/Rapptz/discord.py/blob/master/docs/api.rst#2025-04-06_snippet_48\n\nLANGUAGE: python\nCODE:\n```\nclass MFALevel:\n    disabled\n    require_2fa\n```\n\n----------------------------------------\n\nTITLE: Event Registration Before v0.10.0 in Python\nDESCRIPTION: The original way to register event handlers in discord.py before v0.10.0. This approach used a simple decorator without coroutines.\nSOURCE: https://github.com/Rapptz/discord.py/blob/master/docs/migrating_to_async.rst#2025-04-06_snippet_0\n\nLANGUAGE: python3\nCODE:\n```\n@client.event\ndef on_message(message):\n    pass\n```\n\n----------------------------------------\n\nTITLE: Defining EventStatus Enumeration in Python\nDESCRIPTION: This class represents the different statuses of an event in Discord. It includes attributes for scheduled, active, completed, cancelled, and their aliases.\nSOURCE: https://github.com/Rapptz/discord.py/blob/master/docs/api.rst#2025-04-06_snippet_50\n\nLANGUAGE: python\nCODE:\n```\nclass EventStatus:\n    scheduled\n    active\n    completed\n    cancelled\n    canceled\n    ended\n```\n\n----------------------------------------\n\nTITLE: Client Authentication and Execution Before v0.10.0 in Python\nDESCRIPTION: The original way to authenticate and run the Discord client in discord.py before v0.10.0, using separate login and run calls.\nSOURCE: https://github.com/Rapptz/discord.py/blob/master/docs/migrating_to_async.rst#2025-04-06_snippet_13\n\nLANGUAGE: python3\nCODE:\n```\nclient.login('token')\nclient.run()\n```\n\n----------------------------------------\n\nTITLE: Defining AutoModRuleEventType Enumeration in Python\nDESCRIPTION: This class represents the event types for automod rules in Discord. It includes attributes for message_send and member_update events.\nSOURCE: https://github.com/Rapptz/discord.py/blob/master/docs/api.rst#2025-04-06_snippet_52\n\nLANGUAGE: python\nCODE:\n```\nclass AutoModRuleEventType:\n    message_send\n    member_update\n```\n\n----------------------------------------\n\nTITLE: Generating Random Color with Seed in Python\nDESCRIPTION: Generate a random color with an optional seed using Colour.random(). For multiple seeded calls, use random.seed().\nSOURCE: https://github.com/Rapptz/discord.py/blob/master/docs/whats_new.rst#2025-04-06_snippet_14\n\nLANGUAGE: python\nCODE:\n```\ncolor = Colour.random(seed=42)\n```\n\n----------------------------------------\n\nTITLE: Defining SKUType Enumeration in Python\nDESCRIPTION: This class represents the types of SKUs (Stock Keeping Units) in Discord. It includes attributes for durable, consumable, subscription, and subscription_group types.\nSOURCE: https://github.com/Rapptz/discord.py/blob/master/docs/api.rst#2025-04-06_snippet_57\n\nLANGUAGE: python\nCODE:\n```\nclass SKUType:\n    durable\n    consumable\n    subscription\n    subscription_group\n```\n\n----------------------------------------\n\nTITLE: Volume Control with PCMVolumeTransformer\nDESCRIPTION: Shows how to modify audio volume at runtime using PCMVolumeTransformer in discord.py v1.0\nSOURCE: https://github.com/Rapptz/discord.py/blob/master/docs/migrating_to_v1.rst#2025-04-06_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nvc.source = discord.PCMVolumeTransformer(vc.source)\nvc.source.volume = 0.6\n```\n\n----------------------------------------\n\nTITLE: Defining EntitlementOwnerType Enum in Python\nDESCRIPTION: Defines an enum class EntitlementOwnerType representing the type of an entitlement owner in Discord.py.\nSOURCE: https://github.com/Rapptz/discord.py/blob/master/docs/api.rst#2025-04-06_snippet_59\n\nLANGUAGE: python\nCODE:\n```\nclass EntitlementOwnerType:\n    guild\n    user\n```\n\n----------------------------------------\n\nTITLE: Defining MISSING Constant in Python\nDESCRIPTION: Defines a sentinel value MISSING used to represent missing values in the discord.py library. It is type-safe and distinct from None.\nSOURCE: https://github.com/Rapptz/discord.py/blob/master/docs/api.rst#2025-04-06_snippet_37\n\nLANGUAGE: python\nCODE:\n```\n.. data:: MISSING\n    :module: discord.utils\n\n    A type safe sentinel used in the library to represent something as missing. Used to distinguish from ``None`` values.\n\n    .. versionadded:: 2.0\n```\n\n----------------------------------------\n\nTITLE: Defining VoiceChannelEffectAnimationType Enum in Python\nDESCRIPTION: Defines an enum class VoiceChannelEffectAnimationType representing the animation type of a voice channel effect in Discord.py.\nSOURCE: https://github.com/Rapptz/discord.py/blob/master/docs/api.rst#2025-04-06_snippet_63\n\nLANGUAGE: python\nCODE:\n```\nclass VoiceChannelEffectAnimationType:\n    premium\n    basic\n```\n\n----------------------------------------\n\nTITLE: Installing discord.py with Voice Support on Debian-based Systems\nDESCRIPTION: Command for installing the required dependencies for discord.py voice support on Debian-based Linux systems. This installs libffi-dev, libnacl-dev, and python3-dev packages.\nSOURCE: https://github.com/Rapptz/discord.py/blob/master/docs/intro.rst#2025-04-06_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ apt install libffi-dev libnacl-dev python3-dev\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Join Distance Converter in Discord.py\nDESCRIPTION: Example of creating a custom converter class that inherits from MemberConverter to calculate the time difference between when a member joined and when their account was created.\nSOURCE: https://github.com/Rapptz/discord.py/blob/master/docs/ext/commands/commands.rst#2025-04-06_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nclass JoinDistance:\n    def __init__(self, joined, created):\n        self.joined = joined\n        self.created = created\n\n    @property\n    def delta(self):\n        return self.joined - self.created\n\nclass JoinDistanceConverter(commands.MemberConverter):\n    async def convert(self, ctx, argument):\n        member = await super().convert(ctx, argument)\n        return JoinDistance(member.joined_at, member.created_at)\n\n@bot.command()\nasync def delta(ctx, *, member: JoinDistanceConverter):\n    is_new = member.delta.days < 100\n    if is_new:\n        await ctx.send(\"Hey you're pretty new!\")\n    else:\n        await ctx.send(\"Hm you're not so new.\")\n```\n\n----------------------------------------\n\nTITLE: Installing Discord.py Development Version from GitHub\nDESCRIPTION: Commands for installing the development version of discord.py directly from the GitHub repository. This approach clones the repository and installs the package with voice support.\nSOURCE: https://github.com/Rapptz/discord.py/blob/master/README.rst#2025-04-06_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\n$ git clone https://github.com/Rapptz/discord.py\n$ cd discord.py\n$ python3 -m pip install -U .[voice]\n```\n\n----------------------------------------\n\nTITLE: Union Type Converter Implementation\nDESCRIPTION: Shows how to use typing.Union to create a converter that can handle multiple types of input arguments.\nSOURCE: https://github.com/Rapptz/discord.py/blob/master/docs/ext/commands/commands.rst#2025-04-06_snippet_15\n\nLANGUAGE: python\nCODE:\n```\nimport typing\n\n@bot.command()\nasync def union(ctx, what: typing.Union[discord.TextChannel, discord.Member]):\n    await ctx.send(what)\n```\n\n----------------------------------------\n\nTITLE: Defining UserFlags Enum in Python\nDESCRIPTION: Defines an enumeration for different Discord user flags, representing various statuses and badges for users.\nSOURCE: https://github.com/Rapptz/discord.py/blob/master/docs/api.rst#2025-04-06_snippet_40\n\nLANGUAGE: python\nCODE:\n```\n.. class:: UserFlags\n\n    Represents Discord User flags.\n\n    .. attribute:: staff\n\n        The user is a Discord Employee.\n    .. attribute:: partner\n\n        The user is a Discord Partner.\n    .. attribute:: hypesquad\n\n        The user is a HypeSquad Events member.\n    .. attribute:: bug_hunter\n\n        The user is a Bug Hunter.\n    .. attribute:: mfa_sms\n\n        The user has SMS recovery for Multi Factor Authentication enabled.\n    .. attribute:: premium_promo_dismissed\n\n        The user has dismissed the Discord Nitro promotion.\n    .. attribute:: hypesquad_bravery\n\n        The user is a HypeSquad Bravery member.\n    .. attribute:: hypesquad_brilliance\n\n        The user is a HypeSquad Brilliance member.\n    .. attribute:: hypesquad_balance\n\n        The user is a HypeSquad Balance member.\n    .. attribute:: early_supporter\n\n        The user is an Early Supporter.\n    .. attribute:: team_user\n\n        The user is a Team User.\n    .. attribute:: system\n\n        The user is a system user (i.e. represents Discord officially).\n    .. attribute:: has_unread_urgent_messages\n\n        The user has an unread system message.\n    .. attribute:: bug_hunter_level_2\n\n        The user is a Bug Hunter Level 2.\n    .. attribute:: verified_bot\n\n        The user is a Verified Bot.\n    .. attribute:: verified_bot_developer\n\n        The user is an Early Verified Bot Developer.\n    .. attribute:: discord_certified_moderator\n\n        The user is a Moderator Programs Alumni.\n    .. attribute:: bot_http_interactions\n\n        The user is a bot that only uses HTTP interactions and is shown in the online member list.\n\n        .. versionadded:: 2.0\n    .. attribute:: spammer\n\n        The user is flagged as a spammer by Discord.\n\n        .. versionadded:: 2.0\n```\n\n----------------------------------------\n\nTITLE: Optional Type Converter Usage\nDESCRIPTION: Demonstrates using typing.Optional to create a converter with fallback values when conversion fails.\nSOURCE: https://github.com/Rapptz/discord.py/blob/master/docs/ext/commands/commands.rst#2025-04-06_snippet_16\n\nLANGUAGE: python\nCODE:\n```\nimport typing\n\n@bot.command()\nasync def bottles(ctx, amount: typing.Optional[int] = 99, *, liquid=\"beer\"):\n    await ctx.send(f'{amount} bottles of {liquid} on the wall!')\n```\n\n----------------------------------------\n\nTITLE: Defining AuditLogDiff Class in Python\nDESCRIPTION: Defines a class AuditLogDiff representing an audit log 'change' object in Discord.py, with various attributes depending on the type of action being performed.\nSOURCE: https://github.com/Rapptz/discord.py/blob/master/docs/api.rst#2025-04-06_snippet_67\n\nLANGUAGE: python\nCODE:\n```\nclass AuditLogDiff:\n    name\n    guild\n    icon\n    splash\n    discovery_splash\n    banner\n    owner\n    afk_channel\n    system_channel\n    rules_channel\n    public_updates_channel\n    afk_timeout\n    mfa_level\n    widget_enabled\n    widget_channel\n    verification_level\n    default_notifications\n    explicit_content_filter\n    vanity_url_code\n```\n\n----------------------------------------\n\nTITLE: Using typing.Annotated in Discord Commands\nDESCRIPTION: Shows how to use typing.Annotated to provide type hints while using custom converters in Discord commands.\nSOURCE: https://github.com/Rapptz/discord.py/blob/master/docs/ext/commands/commands.rst#2025-04-06_snippet_18\n\nLANGUAGE: python\nCODE:\n```\nfrom typing import Annotated\n\n@bot.command()\nasync def fun(ctx, arg: Annotated[str, lambda s: s.upper()]):\n    await ctx.send(arg)\n```\n\n----------------------------------------\n\nTITLE: Defining StickerFormatType Enumeration in Python\nDESCRIPTION: This class represents the different types of sticker images supported by Discord. It includes attributes for png, apng, lottie, and gif formats.\nSOURCE: https://github.com/Rapptz/discord.py/blob/master/docs/api.rst#2025-04-06_snippet_42\n\nLANGUAGE: python\nCODE:\n```\nclass StickerFormatType:\n    png\n    apng\n    lottie\n    gif\n```\n\n----------------------------------------\n\nTITLE: Using Greedy Converter with Members\nDESCRIPTION: Example of using Greedy converter to handle multiple Discord members in a command parameter.\nSOURCE: https://github.com/Rapptz/discord.py/blob/master/docs/ext/commands/commands.rst#2025-04-06_snippet_19\n\nLANGUAGE: python\nCODE:\n```\n@bot.command()\nasync def slap(ctx, members: commands.Greedy[discord.Member], *, reason='no reason'):\n    slapped = \", \".join(x.name for x in members)\n    await ctx.send(f'{slapped} just got slapped for {reason}')\n```\n\n----------------------------------------\n\nTITLE: Defining PrivacyLevel Enumeration in Python\nDESCRIPTION: This class represents the privacy levels for stage instances or scheduled events in Discord. It includes an attribute for guild_only access.\nSOURCE: https://github.com/Rapptz/discord.py/blob/master/docs/api.rst#2025-04-06_snippet_45\n\nLANGUAGE: python\nCODE:\n```\nclass PrivacyLevel:\n    guild_only\n```\n\n----------------------------------------\n\nTITLE: Complex Greedy with Optional Parameters\nDESCRIPTION: Shows how to combine Greedy and Optional converters for flexible command parameter handling.\nSOURCE: https://github.com/Rapptz/discord.py/blob/master/docs/ext/commands/commands.rst#2025-04-06_snippet_20\n\nLANGUAGE: python\nCODE:\n```\nimport typing\n\n@bot.command()\nasync def ban(ctx, members: commands.Greedy[discord.Member],\n                   delete_days: typing.Optional[int] = 0, *,\n                   reason: str):\n    \"\"\"Mass bans members with an optional delete_days parameter\"\"\"\n    delete_seconds = delete_days * 86400 # one day\n    for member in members:\n        await member.ban(delete_message_seconds=delete_seconds, reason=reason)\n```\n\n----------------------------------------\n\nTITLE: Defining Locale Enumeration in Python\nDESCRIPTION: This class represents the supported locales by Discord, mainly used for application command localization. It includes attributes for various language locales such as american_english, british_english, chinese, french, etc.\nSOURCE: https://github.com/Rapptz/discord.py/blob/master/docs/api.rst#2025-04-06_snippet_47\n\nLANGUAGE: python\nCODE:\n```\nclass Locale:\n    american_english\n    british_english\n    bulgarian\n    chinese\n    # ... (other locales)\n```\n\n----------------------------------------\n\nTITLE: Basic Attachment Converter Usage\nDESCRIPTION: Demonstrates basic usage of discord.Attachment converter for handling file uploads in commands.\nSOURCE: https://github.com/Rapptz/discord.py/blob/master/docs/ext/commands/commands.rst#2025-04-06_snippet_21\n\nLANGUAGE: python\nCODE:\n```\nimport discord\n\n@bot.command()\nasync def upload(ctx, attachment: discord.Attachment):\n    await ctx.send(f'You have uploaded <{attachment.url}>')\n```\n\n----------------------------------------\n\nTITLE: Defining EntityType Enumeration in Python\nDESCRIPTION: This class represents the types of entities that a scheduled event can be for in Discord. It includes attributes for stage_instance, voice, and external event types.\nSOURCE: https://github.com/Rapptz/discord.py/blob/master/docs/api.rst#2025-04-06_snippet_49\n\nLANGUAGE: python\nCODE:\n```\nclass EntityType:\n    stage_instance\n    voice\n    external\n```\n\n----------------------------------------\n\nTITLE: Greedy Attachment Handling\nDESCRIPTION: Shows how to use Greedy converter with attachments to handle multiple files.\nSOURCE: https://github.com/Rapptz/discord.py/blob/master/docs/ext/commands/commands.rst#2025-04-06_snippet_24\n\nLANGUAGE: python\nCODE:\n```\nimport discord\nfrom discord.ext import commands\n\n@bot.command()\nasync def upload_many(\n    ctx,\n    first: discord.Attachment,\n    remaining: commands.Greedy[discord.Attachment],\n):\n    files = [first.url]\n    files.extend(a.url for a in remaining)\n    await ctx.send(f'You uploaded: {\" \".join(files)}')\n```\n\n----------------------------------------\n\nTITLE: Defining AutoModRuleTriggerType Enumeration in Python\nDESCRIPTION: This class represents the trigger types for automod rules in Discord. It includes attributes for keyword, harmful_link, spam, keyword_preset, mention_spam, and member_profile triggers.\nSOURCE: https://github.com/Rapptz/discord.py/blob/master/docs/api.rst#2025-04-06_snippet_51\n\nLANGUAGE: python\nCODE:\n```\nclass AutoModRuleTriggerType:\n    keyword\n    harmful_link\n    spam\n    keyword_preset\n    mention_spam\n    member_profile\n```\n\n----------------------------------------\n\nTITLE: FlagConverter Implementation\nDESCRIPTION: Demonstrates how to implement a FlagConverter for structured command arguments.\nSOURCE: https://github.com/Rapptz/discord.py/blob/master/docs/ext/commands/commands.rst#2025-04-06_snippet_25\n\nLANGUAGE: python\nCODE:\n```\nfrom discord.ext import commands\nimport discord\n\nclass BanFlags(commands.FlagConverter):\n    member: discord.Member\n    reason: str\n    days: int = 1\n\n@commands.command()\nasync def ban(ctx, *, flags: BanFlags):\n    plural = f'{flags.days} days' if flags.days != 1 else f'{flags.days} day'\n    await ctx.send(f'Banned {flags.member} for {flags.reason!r} (deleted {plural} worth of messages)')\n```\n\n----------------------------------------\n\nTITLE: Defining AutoModRuleActionType Enumeration in Python\nDESCRIPTION: This class represents the action types for automod rules in Discord. It includes attributes for block_message, send_alert_message, timeout, and block_member_interactions actions.\nSOURCE: https://github.com/Rapptz/discord.py/blob/master/docs/api.rst#2025-04-06_snippet_53\n\nLANGUAGE: python\nCODE:\n```\nclass AutoModRuleActionType:\n    block_message\n    send_alert_message\n    timeout\n    block_member_interactions\n```\n\n----------------------------------------\n\nTITLE: Implementing a Hybrid Command with Flag Converter in Python\nDESCRIPTION: Demonstrates how to use flag converters in hybrid commands, including parameter descriptions and renaming for application command compatibility.\nSOURCE: https://github.com/Rapptz/discord.py/blob/master/docs/ext/commands/commands.rst#2025-04-06_snippet_31\n\nLANGUAGE: python3\nCODE:\n```\nclass BanFlags(commands.FlagConverter):\n    member: discord.Member = commands.flag(description='The member to ban')\n    reason: str = commands.flag(description='The reason for the ban')\n    days: int = commands.flag(default=1, description='The number of days worth of messages to delete')\n\n\n@commands.hybrid_command()\nasync def ban(ctx, *, flags: BanFlags):\n    ...\n```\n\n----------------------------------------\n\nTITLE: Defining ForumLayoutType Enumeration in Python\nDESCRIPTION: This class represents the layout types for forum posts in Discord. It includes attributes for not_set, list_view, and gallery_view layouts.\nSOURCE: https://github.com/Rapptz/discord.py/blob/master/docs/api.rst#2025-04-06_snippet_54\n\nLANGUAGE: python\nCODE:\n```\nclass ForumLayoutType:\n    not_set\n    list_view\n    gallery_view\n```\n\n----------------------------------------\n\nTITLE: Customizing Cog Name in Discord.py\nDESCRIPTION: Shows how to customize a cog's name using meta options. This is done by passing the 'name' keyword argument to the class definition.\nSOURCE: https://github.com/Rapptz/discord.py/blob/master/docs/ext/commands/cogs.rst#2025-04-06_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nclass MyCog(commands.Cog, name='My Cog'):\n    pass\n```\n\n----------------------------------------\n\nTITLE: Defining SelectDefaultValueType Enumeration in Python\nDESCRIPTION: This class represents the default value types for select menus in Discord. It includes attributes for user, role, and channel types.\nSOURCE: https://github.com/Rapptz/discord.py/blob/master/docs/api.rst#2025-04-06_snippet_56\n\nLANGUAGE: python\nCODE:\n```\nclass SelectDefaultValueType:\n    user\n    role\n    channel\n```\n\n----------------------------------------\n\nTITLE: Extension with Setup and Teardown Functions in Discord.py\nDESCRIPTION: This example demonstrates an extension with both setup and teardown functions. The setup function is called when the extension is loaded, while the teardown function is called when the extension is unloaded, allowing for proper resource cleanup.\nSOURCE: https://github.com/Rapptz/discord.py/blob/master/docs/ext/commands/extensions.rst#2025-04-06_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nasync def setup(bot):\n    print('I am being loaded!')\n\nasync def teardown(bot):\n    print('I am being unloaded!')\n```\n\n----------------------------------------\n\nTITLE: Defining InviteType Enum in Python\nDESCRIPTION: Defines an enum class InviteType representing the type of an invite in Discord.py.\nSOURCE: https://github.com/Rapptz/discord.py/blob/master/docs/api.rst#2025-04-06_snippet_61\n\nLANGUAGE: python\nCODE:\n```\nclass InviteType:\n    guild\n    group_dm\n    friend\n```\n\n----------------------------------------\n\nTITLE: Referencing discord.ext.commands Module in reStructuredText\nDESCRIPTION: This snippet creates a reference label for the discord.ext.commands module documentation and displays the module name as a title with a description of its purpose as a bot commands framework.\nSOURCE: https://github.com/Rapptz/discord.py/blob/master/docs/ext/commands/index.rst#2025-04-06_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. _discord_ext_commands:\n\n``discord.ext.commands`` -- Bot commands framework\n====================================================\n```\n\n----------------------------------------\n\nTITLE: Defining SubscriptionStatus Enum in Python\nDESCRIPTION: Defines an enum class SubscriptionStatus representing the status of a subscription in Discord.py.\nSOURCE: https://github.com/Rapptz/discord.py/blob/master/docs/api.rst#2025-04-06_snippet_64\n\nLANGUAGE: python\nCODE:\n```\nclass SubscriptionStatus:\n    active\n    ending\n    inactive\n```\n\n----------------------------------------\n\nTITLE: Creating a Table of Contents in reStructuredText for Documentation\nDESCRIPTION: This code creates a table of contents for the commands framework documentation that includes links to sections on commands, cogs, extensions, and API documentation with a maximum depth of 2 levels.\nSOURCE: https://github.com/Rapptz/discord.py/blob/master/docs/ext/commands/index.rst#2025-04-06_snippet_1\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. toctree::\n    :maxdepth: 2\n\n    commands\n    cogs\n    extensions\n    api\n```\n\n----------------------------------------\n\nTITLE: Defining MessageReferenceType Enum in Python\nDESCRIPTION: Defines an enum class MessageReferenceType representing the type of a message reference in Discord.py.\nSOURCE: https://github.com/Rapptz/discord.py/blob/master/docs/api.rst#2025-04-06_snippet_65\n\nLANGUAGE: python\nCODE:\n```\nclass MessageReferenceType:\n    default\n    forward\n    reply\n```\n\n----------------------------------------\n\nTITLE: Setting Up Minimal Discord Intents\nDESCRIPTION: Shows how to configure Discord intents for a bot that only needs messages and guild information, with optional reaction events.\nSOURCE: https://github.com/Rapptz/discord.py/blob/master/docs/intents.rst#2025-04-06_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport discord\nintents = discord.Intents(messages=True, guilds=True)\n# If you also want reaction events enable the following:\n# intents.reactions = True\n\n# Somewhere else:\n# client = discord.Client(intents=intents)\n# or\n# from discord.ext import commands\n# bot = commands.Bot(command_prefix='!', intents=intents)\n```\n\n----------------------------------------\n\nTITLE: Documenting Discord.py Attributes\nDESCRIPTION: This code snippet provides documentation for various attributes in the discord.py library. It includes type information and descriptions for attributes related to roles, channels, members, invites, permissions, and other Discord features.\nSOURCE: https://github.com/Rapptz/discord.py/blob/master/docs/api.rst#2025-04-06_snippet_68\n\nLANGUAGE: python\nCODE:\n```\n    .. attribute:: position\n\n        The position of a :class:`Role` or :class:`abc.GuildChannel`.\n\n        :type: :class:`int`\n\n    .. attribute:: type\n\n        The type of channel, sticker, webhook or integration.\n\n        :type: Union[:class:`ChannelType`, :class:`StickerType`, :class:`WebhookType`, :class:`str`]\n\n    .. attribute:: topic\n\n        The topic of a :class:`TextChannel` or :class:`StageChannel`.\n\n        See also :attr:`TextChannel.topic` or :attr:`StageChannel.topic`.\n\n        :type: :class:`str`\n\n    .. attribute:: bitrate\n\n        The bitrate of a :class:`VoiceChannel`.\n\n        See also :attr:`VoiceChannel.bitrate`.\n\n        :type: :class:`int`\n\n    .. attribute:: overwrites\n\n        A list of permission overwrite tuples that represents a target and a\n        :class:`PermissionOverwrite` for said target.\n\n        The first element is the object being targeted, which can either\n        be a :class:`Member` or :class:`User` or :class:`Role`. If this object\n        is not found then it is a :class:`Object` with an ID being filled and\n        a ``type`` attribute set to either ``'role'`` or ``'member'`` to help\n        decide what type of ID it is.\n\n        :type: List[Tuple[target, :class:`PermissionOverwrite`]]\n```\n\n----------------------------------------\n\nTITLE: Enabling Member Intent in Discord.py\nDESCRIPTION: Demonstrates how to properly enable the members privileged intent for accessing member-related events and data.\nSOURCE: https://github.com/Rapptz/discord.py/blob/master/docs/intents.rst#2025-04-06_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport discord\nintents = discord.Intents.default()\nintents.members = True\n\n# Somewhere else:\n# client = discord.Client(intents=intents)\n# or\n# from discord.ext import commands\n# bot = commands.Bot(command_prefix='!', intents=intents)\n```\n\n----------------------------------------\n\nTITLE: Exception Hierarchy Documentation in RST Format\nDESCRIPTION: This RST formatted code block demonstrates the hierarchical structure of exceptions in the Discord.py library, showing inheritance relationships between exception classes.\nSOURCE: https://github.com/Rapptz/discord.py/blob/master/docs/api.rst#2025-04-06_snippet_70\n\nLANGUAGE: rst\nCODE:\n```\n.. exception_hierarchy::\n\n    - :exc:`Exception`\n        - :exc:`DiscordException`\n            - :exc:`ClientException`\n                - :exc:`InvalidData`\n                - :exc:`LoginFailure`\n                - :exc:`ConnectionClosed`\n                - :exc:`PrivilegedIntentsRequired`\n                - :exc:`InteractionResponded`\n                - :exc:`MissingApplicationID`\n            - :exc:`GatewayNotFound`\n            - :exc:`HTTPException`\n                - :exc:`Forbidden`\n                - :exc:`NotFound`\n                - :exc:`DiscordServerError`\n                - :exc:`app_commands.CommandSyncFailure`\n            - :exc:`RateLimited`\n```\n\n----------------------------------------\n\nTITLE: Installing discord.py with Voice Support\nDESCRIPTION: Commands to install discord.py library with voice support for different operating systems using pip.\nSOURCE: https://github.com/Rapptz/discord.py/blob/master/README.ja.rst#2025-04-06_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\n# Linux/macOS\npython3 -m pip install -U discord.py[voice]\n\n# Windows\npy -3 -m pip install -U discord.py[voice]\n```\n\n----------------------------------------\n\nTITLE: Documenting Discord.py Command Exceptions in reStructuredText\nDESCRIPTION: This snippet provides a hierarchical structure of exceptions related to discord.py commands. It includes various categories such as argument parsing errors, command invocation errors, permission-related errors, and extension management errors.\nSOURCE: https://github.com/Rapptz/discord.py/blob/master/docs/ext/commands/api.rst#2025-04-06_snippet_5\n\nLANGUAGE: reStructuredText\nCODE:\n```\n- :exc:`~.commands.ThreadNotFound`\n- :exc:`~.commands.FlagError`\n    - :exc:`~.commands.BadFlagArgument`\n    - :exc:`~.commands.MissingFlagArgument`\n    - :exc:`~.commands.TooManyFlags`\n    - :exc:`~.commands.MissingRequiredFlag`\n- :exc:`~.commands.BadUnionArgument`\n- :exc:`~.commands.BadLiteralArgument`\n- :exc:`~.commands.ArgumentParsingError`\n    - :exc:`~.commands.UnexpectedQuoteError`\n    - :exc:`~.commands.InvalidEndOfQuotedStringError`\n    - :exc:`~.commands.ExpectedClosingQuoteError`\n- :exc:`~.commands.CommandNotFound`\n- :exc:`~.commands.CheckFailure`\n    - :exc:`~.commands.CheckAnyFailure`\n    - :exc:`~.commands.PrivateMessageOnly`\n    - :exc:`~.commands.NoPrivateMessage`\n    - :exc:`~.commands.NotOwner`\n    - :exc:`~.commands.MissingPermissions`\n    - :exc:`~.commands.BotMissingPermissions`\n    - :exc:`~.commands.MissingRole`\n    - :exc:`~.commands.BotMissingRole`\n    - :exc:`~.commands.MissingAnyRole`\n    - :exc:`~.commands.BotMissingAnyRole`\n    - :exc:`~.commands.NSFWChannelRequired`\n- :exc:`~.commands.DisabledCommand`\n- :exc:`~.commands.CommandInvokeError`\n- :exc:`~.commands.CommandOnCooldown`\n- :exc:`~.commands.MaxConcurrencyReached`\n- :exc:`~.commands.HybridCommandError`\n- :exc:`~.commands.ExtensionError`\n    - :exc:`~.commands.ExtensionAlreadyLoaded`\n    - :exc:`~.commands.ExtensionNotLoaded`\n    - :exc:`~.commands.NoEntryPointError`\n    - :exc:`~.commands.ExtensionFailed`\n    - :exc:`~.commands.ExtensionNotFound`\n- :exc:`~.ClientException`\n    - :exc:`~.commands.CommandRegistrationError`\n```\n\n----------------------------------------\n\nTITLE: Installing discord.py Development Version\nDESCRIPTION: Steps to install the development version of discord.py from the GitHub repository.\nSOURCE: https://github.com/Rapptz/discord.py/blob/master/README.ja.rst#2025-04-06_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\n$ git clone https://github.com/Rapptz/discord.py\n$ cd discord.py\n$ python3 -m pip install -U .[voice]\n```\n\n----------------------------------------\n\nTITLE: Installing Discord.py with Voice Support in Python\nDESCRIPTION: Commands for installing discord.py with voice support on different operating systems. This requires additional dependencies like PyNaCl and system libraries on Linux.\nSOURCE: https://github.com/Rapptz/discord.py/blob/master/README.rst#2025-04-06_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\n# Linux/macOS\npython3 -m pip install -U \"discord.py[voice]\"\n\n# Windows\npy -3 -m pip install -U discord.py[voice]\n```\n\n----------------------------------------\n\nTITLE: Listing External Dependencies for Discord.py\nDESCRIPTION: Defines the required external packages for discord.py. Specifies aiohttp version between 3.7.4 and 4, and includes audioop-lts conditionally for Python 3.13 and above.\nSOURCE: https://github.com/Rapptz/discord.py/blob/master/requirements.txt#2025-04-06_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\naiohttp>=3.7.4,<4\naudioop-lts; python_version>='3.13'\n```"
  }
]