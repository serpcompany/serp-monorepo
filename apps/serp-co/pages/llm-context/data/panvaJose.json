[
  {
    "owner": "panva",
    "repo": "jose",
    "content": "TITLE: Verifying JWT with RSA Public Key (SPKI format) in JavaScript\nDESCRIPTION: This example shows how to verify a JWT using an RSA public key in SPKI format. The code imports the key using the jose.importSPKI function, verifies the JWT with issuer and audience validation, and logs the results.\nSOURCE: https://github.com/panva/jose/blob/main/docs/jwt/verify/functions/jwtVerify.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst alg = 'RS256'\nconst spki = `-----BEGIN PUBLIC KEY-----\nMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAwhYOFK2Ocbbpb/zVypi9\nSeKiNUqKQH0zTKN1+6fpCTu6ZalGI82s7XK3tan4dJt90ptUPKD2zvxqTzFNfx4H\nHHsrYCf2+FMLn1VTJfQazA2BvJqAwcpW1bqRUEty8tS/Yv4hRvWfQPcc2Gc3+/fQ\nOOW57zVy+rNoJc744kb30NjQxdGp03J2S3GLQu7oKtSDDPooQHD38PEMNnITf0pj\n+KgDPjymkMGoJlO3aKppsjfbt/AH6GGdRghYRLOUwQU+h+ofWHR3lbYiKtXPn5dN\n24kiHy61e3VAQ9/YAZlwXC/99GGtw/NpghFAuM4P1JDn0DppJldy3PGFC0GfBCZA\nSwIDAQAB\n-----END PUBLIC KEY-----`\nconst publicKey = await jose.importSPKI(spki, alg)\nconst jwt =\n  'eyJhbGciOiJSUzI1NiJ9.eyJ1cm46ZXhhbXBsZTpjbGFpbSI6dHJ1ZSwiaWF0IjoxNjY5MDU2NDg4LCJpc3MiOiJ1cm46ZXhhbXBsZTppc3N1ZXIiLCJhdWQiOiJ1cm46ZXhhbXBsZTphdWRpZW5jZSJ9.gXrPZ3yM_60dMXGE69dusbpzYASNA-XIOwsb5D5xYnSxyj6_D6OR_uR_1vqhUm4AxZxcrH1_-XJAve9HCw8az_QzHcN-nETt-v6stCsYrn6Bv1YOc-mSJRZ8ll57KVqLbCIbjKwerNX5r2_Qg2TwmJzQdRs-AQDhy-s_DlJd8ql6wR4n-kDZpar-pwIvz4fFIN0Fj57SXpAbLrV6Eo4Byzl0xFD8qEYEpBwjrMMfxCZXTlAVhAq6KCoGlDTwWuExps342-0UErEtyIqDnDGcrfNWiUsoo8j-29IpKd-w9-C388u-ChCxoHz--H8WmMSZzx3zTXsZ5lXLZ9IKfanDKg'\n\nconst { payload, protectedHeader } = await jose.jwtVerify(jwt, publicKey, {\n  issuer: 'urn:example:issuer',\n  audience: 'urn:example:audience',\n})\n\nconsole.log(protectedHeader)\nconsole.log(payload)\n```\n\n----------------------------------------\n\nTITLE: Creating and Encrypting a General JWE Object with Multiple Recipients\nDESCRIPTION: This example demonstrates how to create a GeneralEncrypt instance, set headers, add multiple recipients with different encryption algorithms, and encrypt the JWE object.\nSOURCE: https://github.com/panva/jose/blob/main/docs/jwe/general/encrypt/classes/GeneralEncrypt.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst jwe = await new jose.GeneralEncrypt(\n  new TextEncoder().encode('It's a dangerous business, Frodo, going out your door.')\n)\n  .setProtectedHeader({ enc: 'A256GCM' })\n  .addRecipient(ecPublicKey)\n  .setUnprotectedHeader({ alg: 'ECDH-ES+A256KW' })\n  .addRecipient(rsaPublicKey)\n  .setUnprotectedHeader({ alg: 'RSA-OAEP-384' })\n  .encrypt()\n\nconsole.log(jwe)\n```\n\n----------------------------------------\n\nTITLE: Basic JWT Verification with Remote JWKS in JavaScript\nDESCRIPTION: Demonstrates how to create a remote JWKS set from a URL and use it to verify a JWT. The example fetches keys from Google's OAuth certificates endpoint and verifies a JWT with issuer and audience claims.\nSOURCE: https://github.com/panva/jose/blob/main/docs/jwks/remote/functions/createRemoteJWKSet.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst JWKS = jose.createRemoteJWKSet(new URL('https://www.googleapis.com/oauth2/v3/certs'))\n\nconst { payload, protectedHeader } = await jose.jwtVerify(jwt, JWKS, {\n  issuer: 'urn:example:issuer',\n  audience: 'urn:example:audience',\n})\nconsole.log(protectedHeader)\nconsole.log(payload)\n```\n\n----------------------------------------\n\nTITLE: Verifying JWT with Symmetric Secret in JavaScript\nDESCRIPTION: This example demonstrates how to verify a JWT using a symmetric secret key. The code creates a binary secret from a hexadecimal string, verifies the JWT with issuer and audience claims validation, and logs the protected header and payload.\nSOURCE: https://github.com/panva/jose/blob/main/docs/jwt/verify/functions/jwtVerify.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst secret = new TextEncoder().encode(\n  'cc7e0d44fd473002f1c42167459001140ec6389b7353f8088f4d9a95f2f596f2',\n)\nconst jwt =\n  'eyJhbGciOiJIUzI1NiJ9.eyJ1cm46ZXhhbXBsZTpjbGFpbSI6dHJ1ZSwiaWF0IjoxNjY5MDU2MjMxLCJpc3MiOiJ1cm46ZXhhbXBsZTppc3N1ZXIiLCJhdWQiOiJ1cm46ZXhhbXBsZTphdWRpZW5jZSJ9.C4iSlLfAUMBq--wnC6VqD9gEOhwpRZpoRarE0m7KEnI'\n\nconst { payload, protectedHeader } = await jose.jwtVerify(jwt, secret, {\n  issuer: 'urn:example:issuer',\n  audience: 'urn:example:audience',\n})\n\nconsole.log(protectedHeader)\nconsole.log(payload)\n```\n\n----------------------------------------\n\nTITLE: Decrypting a Flattened JWE with RSA-OAEP-256 and A256GCM in JavaScript\nDESCRIPTION: Example demonstrating how to decrypt a Flattened JWE object containing encrypted data. The example shows creating a JWE object with all required components (ciphertext, iv, tag, encrypted_key, aad, protected), and then using jose.flattenedDecrypt() to decrypt it with a private key. The result includes the plaintext, protected header, and additional authenticated data.\nSOURCE: https://github.com/panva/jose/blob/main/docs/jwe/flattened/decrypt/functions/flattenedDecrypt.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst jwe = {\n  ciphertext: '9EzjFISUyoG-ifC2mSihfP0DPC80yeyrxhTzKt1C_VJBkxeBG0MI4Te61Pk45RAGubUvBpU9jm4',\n  iv: '8Fy7A_IuoX5VXG9s',\n  tag: 'W76IYV6arGRuDSaSyWrQNg',\n  encrypted_key:\n    'Z6eD4UK_yFb5ZoKvKkGAdqywEG_m0e4IYo0x8Vf30LAMJcsc-_zSgIeiF82teZyYi2YYduHKoqImk7MRnoPZOlEs0Q5BNK1OgBmSOhCE8DFyqh9Zh48TCTP6lmBQ52naqoUJFMtHzu-0LwZH26hxos0GP3Dt19O379MJB837TdKKa87skq0zHaVLAquRHOBF77GI54Bc7O49d8aOrSu1VEFGMThlW2caspPRiTSePDMDPq7_WGk50izRhB3Asl9wmP9wEeaTrkJKRnQj5ips1SAZ1hDBsqEQKKukxP1HtdcopHV5_qgwU8Hjm5EwSLMluMQuiE6hwlkXGOujZLVizA',\n  aad: 'VGhlIEZlbGxvd3NoaXAgb2YgdGhlIFJpbmc',\n  protected: 'eyJhbGciOiJSU0EtT0FFUC0yNTYiLCJlbmMiOiJBMjU2R0NNIn0',\n}\n\nconst { plaintext, protectedHeader, additionalAuthenticatedData } =\n  await jose.flattenedDecrypt(jwe, privateKey)\n\nconsole.log(protectedHeader)\nconst decoder = new TextDecoder()\nconsole.log(decoder.decode(plaintext))\nconsole.log(decoder.decode(additionalAuthenticatedData))\n```\n\n----------------------------------------\n\nTITLE: Importing EC and RSA Public Keys using Jose's importJWK Function\nDESCRIPTION: This snippet demonstrates how to use the importJWK function from the Jose library to import EC and RSA public keys. It shows the process of converting JWK (JSON Web Key) format to CryptoKey objects for both EC P-256 and RSA key types.\nSOURCE: https://github.com/panva/jose/blob/main/docs/key/import/functions/importJWK.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst ecPublicKey = await jose.importJWK(\n  {\n    crv: 'P-256',\n    kty: 'EC',\n    x: 'ySK38C1jBdLwDsNWKzzBHqKYEE5Cgv-qjWvorUXk9fw',\n    y: '_LeQBw07cf5t57Iavn4j-BqJsAD1dpoz8gokd3sBsOo',\n  },\n  'ES256',\n)\n\nconst rsaPublicKey = await jose.importJWK(\n  {\n    kty: 'RSA',\n    e: 'AQAB',\n    n: '12oBZRhCiZFJLcPg59LkZZ9mdhSMTKAQZYq32k_ti5SBB6jerkh-WzOMAO664r_qyLkqHUSp3u5SbXtseZEpN3XPWGKSxjsy-1JyEFTdLSYe6f9gfrmxkUF_7DTpq0gn6rntP05g2-wFW50YO7mosfdslfrTJYWHFhJALabAeYirYD7-9kqq9ebfFMF4sRRELbv9oi36As6Q9B3Qb5_C1rAzqfao_PCsf9EPsTZsVVVkA5qoIAr47lo1ipfiBPxUCCNSdvkmDTYgvvRm6ZoMjFbvOtgyts55fXKdMWv7I9HMD5HwE9uW839PWA514qhbcIsXEYSFMPMV6fnlsiZvQQ',\n  },\n  'PS256',\n)\n```\n\n----------------------------------------\n\nTITLE: Using EmbeddedJWK for JWT Verification in JavaScript\nDESCRIPTION: Example of verifying a JSON Web Token (JWT) using the EmbeddedJWK function from the jose library. This code extracts the embedded public key from the JWT header to verify the signature, while also validating the issuer and audience claims.\nSOURCE: https://github.com/panva/jose/blob/main/docs/jwk/embedded/functions/EmbeddedJWK.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst jwt =\n  'eyJqd2siOnsiY3J2IjoiUC0yNTYiLCJ4IjoiVU05ZzVuS25aWFlvdldBbE03NmNMejl2VG96UmpfX0NIVV9kT2wtZ09vRSIsInkiOiJkczhhZVF3MWwyY0RDQTdiQ2tPTnZ3REtwWEFidFhqdnFDbGVZSDhXc19VIiwia3R5IjoiRUMifSwiYWxnIjoiRVMyNTYifQ.eyJpc3MiOiJ1cm46ZXhhbXBsZTppc3N1ZXIiLCJhdWQiOiJ1cm46ZXhhbXBsZTphdWRpZW5jZSIsImlhdCI6MTYwNDU4MDc5NH0.60boak3_dErnW47ZPty1C0nrjeVq86EN_eK0GOq6K8w2OA0thKoBxFK4j-NuU9yZ_A9UKGxPT_G87DladBaV9g'\n\nconst { payload, protectedHeader } = await jose.jwtVerify(jwt, jose.EmbeddedJWK, {\n  issuer: 'urn:example:issuer',\n  audience: 'urn:example:audience',\n})\n\nconsole.log(protectedHeader)\nconsole.log(payload)\n```\n\n----------------------------------------\n\nTITLE: Creating and Signing a Flattened JWS Object with ES256 Algorithm\nDESCRIPTION: This example demonstrates how to create a FlattenedSign instance, set the protected header with the ES256 algorithm, and sign the payload using a private key.\nSOURCE: https://github.com/panva/jose/blob/main/docs/jws/flattened/sign/classes/FlattenedSign.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst jws = await new jose.FlattenedSign(\n  new TextEncoder().encode('It's a dangerous business, Frodo, going out your door.')\n)\n  .setProtectedHeader({ alg: 'ES256' })\n  .sign(privateKey)\n\nconsole.log(jws)\n```\n\n----------------------------------------\n\nTITLE: Decrypting JWT with a Secret Key in JavaScript\nDESCRIPTION: Demonstrates how to decrypt a JWT using a secret key with the jose library. The example shows how to decode a base64url secret, decrypt a JWT, and validate the issuer and audience claims. It returns both the payload and protected header.\nSOURCE: https://github.com/panva/jose/blob/main/docs/jwt/decrypt/functions/jwtDecrypt.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst secret = jose.base64url.decode('zH4NRP1HMALxxCFnRZABFA7GOJtzU_gIj02alfL1lvI')\nconst jwt =\n  'eyJhbGciOiJkaXIiLCJlbmMiOiJBMTI4Q0JDLUhTMjU2In0..MB66qstZBPxAXKdsjet_lA.WHbtJTl4taHp7otOHLq3hBvv0yNPsPEKHYInmCPdDDeyV1kU-f-tGEiU4FxlSqkqAT2hVs8_wMNiQFAzPU1PUgIqWCPsBrPP3TtxYsrtwagpn4SvCsUsx0Mhw9ZhliAO8CLmCBQkqr_T9AcYsz5uZw.7nX9m7BGUu_u1p1qFHzyIg'\n\nconst { payload, protectedHeader } = await jose.jwtDecrypt(jwt, secret, {\n  issuer: 'urn:example:issuer',\n  audience: 'urn:example:audience',\n})\n\nconsole.log(protectedHeader)\nconsole.log(payload)\n```\n\n----------------------------------------\n\nTITLE: Verifying a Compact JWS with ES256 Algorithm\nDESCRIPTION: This example demonstrates how to verify a Compact JWS token using the compactVerify() function from the Jose library with an ES256 signed token. The function verifies the signature using a public key and returns both the payload and protected header.\nSOURCE: https://github.com/panva/jose/blob/main/docs/jws/compact/verify/functions/compactVerify.md#2025-04-23_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nconst jws =\n  'eyJhbGciOiJFUzI1NiJ9.SXTigJlzIGEgZGFuZ2Vyb3VzIGJ1c2luZXNzLCBGcm9kbywgZ29pbmcgb3V0IHlvdXIgZG9vci4.kkAs_gPPxWMI3rHuVlxHaTPfDWDoqdI8jSvuSmqV-8IHIWXg9mcAeC9ggV-45ZHRbiRJ3obUIFo1rHphPA5URg'\n\nconst { payload, protectedHeader } = await jose.compactVerify(jws, publicKey)\n\nconsole.log(protectedHeader)\nconsole.log(new TextDecoder().decode(payload))\n```\n\n----------------------------------------\n\nTITLE: Decrypting General JWE with RSA-OAEP in JavaScript\nDESCRIPTION: Example demonstrating how to decrypt a General JWE object using the jose.generalDecrypt function with an RSA-OAEP-256 encrypted key and A256GCM content encryption. The example shows how to access the decrypted plaintext, protected header, and additional authenticated data.\nSOURCE: https://github.com/panva/jose/blob/main/docs/jwe/general/decrypt/functions/generalDecrypt.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst jwe = {\n  ciphertext: '9EzjFISUyoG-ifC2mSihfP0DPC80yeyrxhTzKt1C_VJBkxeBG0MI4Te61Pk45RAGubUvBpU9jm4',\n  iv: '8Fy7A_IuoX5VXG9s',\n  tag: 'W76IYV6arGRuDSaSyWrQNg',\n  aad: 'VGhlIEZlbGxvd3NoaXAgb2YgdGhlIFJpbmc',\n  protected: 'eyJhbGciOiJSU0EtT0FFUC0yNTYiLCJlbmMiOiJBMjU2R0NNIn0',\n  recipients: [\n    {\n      encrypted_key:\n        'Z6eD4UK_yFb5ZoKvKkGAdqywEG_m0e4IYo0x8Vf30LAMJcsc-_zSgIeiF82teZyYi2YYduHKoqImk7MRnoPZOlEs0Q5BNK1OgBmSOhCE8DFyqh9Zh48TCTP6lmBQ52naqoUJFMtHzu-0LwZH26hxos0GP3Dt19O379MJB837TdKKa87skq0zHaVLAquRHOBF77GI54Bc7O49d8aOrSu1VEFGMThlW2caspPRiTSePDMDPq7_WGk50izRhB3Asl9wmP9wEeaTrkJKRnQj5ips1SAZ1hDBsqEQKKukxP1HtdcopHV5_qgwU8Hjm5EwSLMluMQuiE6hwlkXGOujZLVizA',\n    },\n  ],\n}\n\nconst { plaintext, protectedHeader, additionalAuthenticatedData } =\n  await jose.generalDecrypt(jwe, privateKey)\n\nconsole.log(protectedHeader)\nconst decoder = new TextDecoder()\nconsole.log(decoder.decode(plaintext))\nconsole.log(decoder.decode(additionalAuthenticatedData))\n```\n\n----------------------------------------\n\nTITLE: Generating Asymmetric Key Pair with JOSE Library in JavaScript\nDESCRIPTION: Example showing how to generate a public-private key pair using the JOSE library with the PS256 algorithm. The function returns a Promise that resolves to an object containing both the public and private keys.\nSOURCE: https://github.com/panva/jose/blob/main/docs/key/generate_key_pair/functions/generateKeyPair.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst { publicKey, privateKey } = await jose.generateKeyPair('PS256')\nconsole.log(publicKey)\nconsole.log(privateKey)\n```\n\n----------------------------------------\n\nTITLE: Encrypting a message using CompactEncrypt in JavaScript\nDESCRIPTION: This example demonstrates how to use the CompactEncrypt class to encrypt a text message using RSA-OAEP-256 algorithm and A256GCM encryption.\nSOURCE: https://github.com/panva/jose/blob/main/docs/jwe/compact/encrypt/classes/CompactEncrypt.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst jwe = await new jose.CompactEncrypt(\n  new TextEncoder().encode('It's a dangerous business, Frodo, going out your door.')\n)\n  .setProtectedHeader({ alg: 'RSA-OAEP-256', enc: 'A256GCM' })\n  .encrypt(publicKey)\n\nconsole.log(jwe)\n```\n\n----------------------------------------\n\nTITLE: Creating and Signing General JWS Objects with GeneralSign in JavaScript\nDESCRIPTION: This example demonstrates how to use the GeneralSign class to create and sign a General JWS object with multiple signatures using different algorithms and keys.\nSOURCE: https://github.com/panva/jose/blob/main/docs/jws/general/sign/classes/GeneralSign.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst jws = await new jose.GeneralSign(\n  new TextEncoder().encode('It's a dangerous business, Frodo, going out your door.')\n)\n  .addSignature(ecPrivateKey)\n  .setProtectedHeader({ alg: 'ES256' })\n  .addSignature(rsaPrivateKey)\n  .setProtectedHeader({ alg: 'PS256' })\n  .sign()\n\nconsole.log(jws)\n```\n\n----------------------------------------\n\nTITLE: Encrypting Data with FlattenedEncrypt in JavaScript\nDESCRIPTION: This example demonstrates how to use the FlattenedEncrypt class to encrypt data with RSA-OAEP-256 algorithm and A256GCM encryption. It sets a protected header and additional authenticated data before encrypting.\nSOURCE: https://github.com/panva/jose/blob/main/docs/jwe/flattened/encrypt/classes/FlattenedEncrypt.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst jwe = await new jose.FlattenedEncrypt(\n  new TextEncoder().encode('It's a dangerous business, Frodo, going out your door.')\n)\n  .setProtectedHeader({ alg: 'RSA-OAEP-256', enc: 'A256GCM' })\n  .setAdditionalAuthenticatedData(encoder.encode('The Fellowship of the Ring'))\n  .encrypt(publicKey)\n\nconsole.log(jwe)\n```\n\n----------------------------------------\n\nTITLE: Decrypting a Compact JWE with a Direct Key in JavaScript\nDESCRIPTION: Example of using the compactDecrypt function to decrypt a Compact JWE token with a direct private key. The function returns both the decrypted plaintext and the protected header from the JWE.\nSOURCE: https://github.com/panva/jose/blob/main/docs/jwe/compact/decrypt/functions/compactDecrypt.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst jwe =\n  'eyJhbGciOiJSU0EtT0FFUC0yNTYiLCJlbmMiOiJBMjU2R0NNIn0.nyQ19eq9ogh9wA7fFtnI2oouzy5_8b5DeLkoRMfi2yijgfTs2zEnayCEofz_qhnL-nwszabd9qUeHv0-IwvhhJJS7GUJOU3ikiIe42qcIAFme1A_Fo9CTxw4XTOy-I5qanl8So91u6hwfyN1VxAqVLsSE7_23EC-gfGEg_5znew9PyXXsOIE-K_HH7IQowRrlZ1X_bM_Liu53RzDpLDvRz59mp3S8L56YqpM8FexFGTGpEaoTcEIst375qncYt3-79IVR7gZN1RWsWgjPatfvVbnh74PglQcATSf3UUhaW0OAKn6q7r3PDx6DIKQ35bgHQg5QopuN00eIfLQL2trGw.W3grIVj5HVuAb76X.6PcuDe5D6ttWFYyv0oqqdDXfI2R8wBg1F2Q80UUA_Gv8eEimNWfxIWdLxrjzgQGSvIhxmFKuLM0.a93_Ug3uZHuczj70Zavx8Q'\n\nconst { plaintext, protectedHeader } = await jose.compactDecrypt(jwe, privateKey)\n\nconsole.log(protectedHeader)\nconsole.log(new TextDecoder().decode(plaintext))\n```\n\n----------------------------------------\n\nTITLE: Verifying and Decoding Flattened JWS using flattenedVerify() in JavaScript\nDESCRIPTION: This example demonstrates how to use the flattenedVerify() function to verify and decode a Flattened JWS token. It shows the structure of the JWS input, how to call the function with a public key, and how to access the resulting payload and protected header.\nSOURCE: https://github.com/panva/jose/blob/main/docs/jws/flattened/verify/functions/flattenedVerify.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst decoder = new TextDecoder()\nconst jws = {\n  signature:\n    'FVVOXwj6kD3DqdfD9yYqfT2W9jv-Nop4kOehp_DeDGNB5dQNSPRvntBY6xH3uxlCxE8na9d_kyhYOcanpDJ0EA',\n  payload: 'SXTigJlzIGEgZGFuZ2Vyb3VzIGJ1c2luZXNzLCBGcm9kbywgZ29pbmcgb3V0IHlvdXIgZG9vci4',\n  protected: 'eyJhbGciOiJFUzI1NiJ9',\n}\n\nconst { payload, protectedHeader } = await jose.flattenedVerify(jws, publicKey)\n\nconsole.log(protectedHeader)\nconsole.log(decoder.decode(payload))\n```\n\n----------------------------------------\n\nTITLE: Creating and Encrypting JWT Example\nDESCRIPTION: Example showing how to create and encrypt a JWT using the EncryptJWT class with basic claims and encryption settings. Uses direct encryption algorithm with A128CBC-HS256 encryption.\nSOURCE: https://github.com/panva/jose/blob/main/docs/jwt/encrypt/classes/EncryptJWT.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst secret = jose.base64url.decode('zH4NRP1HMALxxCFnRZABFA7GOJtzU_gIj02alfL1lvI')\nconst jwt = await new jose.EncryptJWT({ 'urn:example:claim': true })\n  .setProtectedHeader({ alg: 'dir', enc: 'A128CBC-HS256' })\n  .setIssuedAt()\n  .setIssuer('urn:example:issuer')\n  .setAudience('urn:example:audience')\n  .setExpirationTime('2h')\n  .encrypt(secret)\n\nconsole.log(jwt)\n```\n\n----------------------------------------\n\nTITLE: Calculating JWK Thumbprint with EC Key\nDESCRIPTION: Example demonstrating how to calculate a JWK thumbprint for an EC P-256 key using the jose library. The function returns a base64url-encoded string representing the key's thumbprint.\nSOURCE: https://github.com/panva/jose/blob/main/docs/jwk/thumbprint/functions/calculateJwkThumbprint.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst thumbprint = await jose.calculateJwkThumbprint({\n  kty: 'EC',\n  crv: 'P-256',\n  x: 'jJ6Flys3zK9jUhnOHf6G49Dyp5hah6CNP84-gY-n9eo',\n  y: 'nhI6iD5eFXgBTLt_1p3aip-5VbZeMhxeFSpjfEAf7Ww',\n})\n\nconsole.log(thumbprint)\n// 'w9eYdC6_s_tLQ8lH6PUpc0mddazaqtPgeC2IgWDiqY8'\n```\n\n----------------------------------------\n\nTITLE: Verifying JWT with Remote JWKS in JavaScript\nDESCRIPTION: This example shows how to verify a JWT using a JSON Web Key Set hosted on a remote URL. It creates a remote JWKS client that fetches keys as needed, verifies the JWT with issuer and audience validation, and logs the results.\nSOURCE: https://github.com/panva/jose/blob/main/docs/jwt/verify/functions/jwtVerify.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst JWKS = jose.createRemoteJWKSet(new URL('https://www.googleapis.com/oauth2/v3/certs'))\n\nconst { payload, protectedHeader } = await jose.jwtVerify(jwt, JWKS, {\n  issuer: 'urn:example:issuer',\n  audience: 'urn:example:audience',\n})\nconsole.log(protectedHeader)\nconsole.log(payload)\n```\n\n----------------------------------------\n\nTITLE: Importing an ES256 PKCS#8 Private Key with JOSE\nDESCRIPTION: Example showing how to import an ECDSA ES256 private key in PKCS#8 PEM format using the JOSE library's importPKCS8 function. The key is imported as a CryptoKey object for use with Web Cryptography API operations.\nSOURCE: https://github.com/panva/jose/blob/main/docs/key/import/functions/importPKCS8.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst algorithm = 'ES256'\nconst pkcs8 = `-----BEGIN PRIVATE KEY-----\nMIGHAgEAMBMGByqGSM49AgEGCCqGSM49AwEHBG0wawIBAQQgiyvo0X+VQ0yIrOaN\nnlrnUclopnvuuMfoc8HHly3505OhRANCAAQWUcdZ8uTSAsFuwtNy4KtsKqgeqYxg\nl6kwL5D4N3pEGYGIDjV69Sw0zAt43480WqJv7HCL0mQnyqFmSrxj8jMa\n-----END PRIVATE KEY-----`\nconst ecPrivateKey = await jose.importPKCS8(pkcs8, algorithm)\n```\n\n----------------------------------------\n\nTITLE: Calculating a JWK Thumbprint URI with the Jose Library\nDESCRIPTION: This example demonstrates how to calculate a JSON Web Key Thumbprint URI using the calculateJwkThumbprintUri function from the Jose library. It accepts an EC key as input and produces a thumbprint URI string following the RFC9278 specification.\nSOURCE: https://github.com/panva/jose/blob/main/docs/jwk/thumbprint/functions/calculateJwkThumbprintUri.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst thumbprintUri = await jose.calculateJwkThumbprintUri({\n  kty: 'EC',\n  crv: 'P-256',\n  x: 'jJ6Flys3zK9jUhnOHf6G49Dyp5hah6CNP84-gY-n9eo',\n  y: 'nhI6iD5eFXgBTLt_1p3aip-5VbZeMhxeFSpjfEAf7Ww',\n})\n\nconsole.log(thumbprintUri)\n// 'urn:ietf:params:oauth:jwk-thumbprint:sha-256:w9eYdC6_s_tLQ8lH6PUpc0mddazaqtPgeC2IgWDiqY8'\n```\n\n----------------------------------------\n\nTITLE: Verifying JWT with RSA Public Key (JWK format) in JavaScript\nDESCRIPTION: This example demonstrates JWT verification using an RSA public key in JWK format. It imports a JSON Web Key object, verifies the JWT with issuer and audience validation, and logs the protected header and payload.\nSOURCE: https://github.com/panva/jose/blob/main/docs/jwt/verify/functions/jwtVerify.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst alg = 'RS256'\nconst jwk = {\n  kty: 'RSA',\n  n: 'whYOFK2Ocbbpb_zVypi9SeKiNUqKQH0zTKN1-6fpCTu6ZalGI82s7XK3tan4dJt90ptUPKD2zvxqTzFNfx4HHHsrYCf2-FMLn1VTJfQazA2BvJqAwcpW1bqRUEty8tS_Yv4hRvWfQPcc2Gc3-_fQOOW57zVy-rNoJc744kb30NjQxdGp03J2S3GLQu7oKtSDDPooQHD38PEMNnITf0pj-KgDPjymkMGoJlO3aKppsjfbt_AH6GGdRghYRLOUwQU-h-ofWHR3lbYiKtXPn5dN24kiHy61e3VAQ9_YAZlwXC_99GGtw_NpghFAuM4P1JDn0DppJldy3PGFC0GfBCZASw',\n  e: 'AQAB',\n}\nconst publicKey = await jose.importJWK(jwk, alg)\nconst jwt =\n  'eyJhbGciOiJSUzI1NiJ9.eyJ1cm46ZXhhbXBsZTpjbGFpbSI6dHJ1ZSwiaWF0IjoxNjY5MDU2NDg4LCJpc3MiOiJ1cm46ZXhhbXBsZTppc3N1ZXIiLCJhdWQiOiJ1cm46ZXhhbXBsZTphdWRpZW5jZSJ9.gXrPZ3yM_60dMXGE69dusbpzYASNA-XIOwsb5D5xYnSxyj6_D6OR_uR_1vqhUm4AxZxcrH1_-XJAve9HCw8az_QzHcN-nETt-v6stCsYrn6Bv1YOc-mSJRZ8ll57KVqLbCIbjKwerNX5r2_Qg2TwmJzQdRs-AQDhy-s_DlJd8ql6wR4n-kDZpar-pwIvz4fFIN0Fj57SXpAbLrV6Eo4Byzl0xFD8qEYEpBwjrMMfxCZXTlAVhAq6KCoGlDTwWuExps342-0UErEtyIqDnDGcrfNWiUsoo8j-29IpKd-w9-C388u-ChCxoHz--H8WmMSZzx3zTXsZ5lXLZ9IKfanDKg'\n\nconst { payload, protectedHeader } = await jose.jwtVerify(jwt, publicKey, {\n  issuer: 'urn:example:issuer',\n  audience: 'urn:example:audience',\n})\n\nconsole.log(protectedHeader)\nconsole.log(payload)\n```\n\n----------------------------------------\n\nTITLE: Exporting Private Key to PKCS8 Format using Jose in JavaScript\nDESCRIPTION: This snippet demonstrates how to use the exportPKCS8() function from the Jose library to export a private key to PEM-encoded PKCS8 string format. It takes a privateKey as input and returns a Promise that resolves to the PKCS8 PEM string.\nSOURCE: https://github.com/panva/jose/blob/main/docs/key/export/functions/exportPKCS8.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst pkcs8Pem = await jose.exportPKCS8(privateKey)\n\nconsole.log(pkcs8Pem)\n```\n\n----------------------------------------\n\nTITLE: Using jwksCache with createRemoteJWKSet in TypeScript\nDESCRIPTION: This snippet demonstrates how to use the jwksCache symbol with createRemoteJWKSet function in a cloud computing environment. It shows loading a cached JWKS, verifying a JWT, and updating the cache if necessary.\nSOURCE: https://github.com/panva/jose/blob/main/docs/jwks/remote/variables/jwksCache.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// Prerequisites\nlet url!: URL\nlet jwt!: string\nlet getPreviouslyCachedJWKS!: () => Promise<jose.ExportedJWKSCache>\nlet storeNewJWKScache!: (cache: jose.ExportedJWKSCache) => Promise<void>\n\n// Load JSON Web Key Set cache\nconst jwksCache: jose.JWKSCacheInput = (await getPreviouslyCachedJWKS()) || {}\nconst { uat } = jwksCache\n\nconst JWKS = jose.createRemoteJWKSet(url, {\n  [jose.jwksCache]: jwksCache,\n})\n\n// Use JSON Web Key Set cache\nawait jose.jwtVerify(jwt, JWKS)\n\nif (uat !== jwksCache.uat) {\n  // Update JSON Web Key Set cache\n  await storeNewJWKScache(jwksCache)\n}\n```\n\n----------------------------------------\n\nTITLE: Basic JWKS Creation and JWT Verification in JavaScript\nDESCRIPTION: Creates a local JSON Web Key Set with RSA and EC keys, then uses it to verify a JWT with specific issuer and audience claims.\nSOURCE: https://github.com/panva/jose/blob/main/docs/jwks/local/functions/createLocalJWKSet.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst JWKS = jose.createLocalJWKSet({\n  keys: [\n    {\n      kty: 'RSA',\n      e: 'AQAB',\n      n: '12oBZRhCiZFJLcPg59LkZZ9mdhSMTKAQZYq32k_ti5SBB6jerkh-WzOMAO664r_qyLkqHUSp3u5SbXtseZEpN3XPWGKSxjsy-1JyEFTdLSYe6f9gfrmxkUF_7DTpq0gn6rntP05g2-wFW50YO7mosfdslfrTJYWHFhJALabAeYirYD7-9kqq9ebfFMF4sRRELbv9oi36As6Q9B3Qb5_C1rAzqfao_PCsf9EPsTZsVVVkA5qoIAr47lo1ipfiBPxUCCNSdvkmDTYgvvRm6ZoMjFbvOtgyts55fXKdMWv7I9HMD5HwE9uW839PWA514qhbcIsXEYSFMPMV6fnlsiZvQQ',\n      alg: 'PS256',\n    },\n    {\n      crv: 'P-256',\n      kty: 'EC',\n      x: 'ySK38C1jBdLwDsNWKzzBHqKYEE5Cgv-qjWvorUXk9fw',\n      y: '_LeQBw07cf5t57Iavn4j-BqJsAD1dpoz8gokd3sBsOo',\n      alg: 'ES256',\n    },\n  ],\n})\n\nconst { payload, protectedHeader } = await jose.jwtVerify(jwt, JWKS, {\n  issuer: 'urn:example:issuer',\n  audience: 'urn:example:audience',\n})\nconsole.log(protectedHeader)\nconsole.log(payload)\n```\n\n----------------------------------------\n\nTITLE: Exporting Public Key to PEM-encoded SPKI Format with Jose Library in JavaScript\nDESCRIPTION: Demonstrates how to use the exportSPKI function from the Jose library to export a public key to PEM-encoded SPKI string format. The function accepts a CryptoKey or KeyObject as input and returns a Promise that resolves to the PEM-encoded string.\nSOURCE: https://github.com/panva/jose/blob/main/docs/key/export/functions/exportSPKI.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst spkiPem = await jose.exportSPKI(publicKey)\n\nconsole.log(spkiPem)\n```\n\n----------------------------------------\n\nTITLE: Generating a Secret Key for HS256 Algorithm in JavaScript\nDESCRIPTION: Example of generating a symmetric secret key for the HS256 algorithm using the jose library. The function returns a Promise that resolves to a CryptoKey object, which is then logged to the console.\nSOURCE: https://github.com/panva/jose/blob/main/docs/key/generate_secret/functions/generateSecret.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst secret = await jose.generateSecret('HS256')\nconsole.log(secret)\n```\n\n----------------------------------------\n\nTITLE: Multiple JWKS Matches Handling in JavaScript\nDESCRIPTION: Example showing how to handle multiple matching keys in JWKS by iterating through them and attempting verification with each key until success or exhaustion.\nSOURCE: https://github.com/panva/jose/blob/main/docs/jwks/local/functions/createLocalJWKSet.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst options = {\n  issuer: 'urn:example:issuer',\n  audience: 'urn:example:audience',\n}\nconst { payload, protectedHeader } = await jose\n  .jwtVerify(jwt, JWKS, options)\n  .catch(async (error) => {\n    if (error?.code === 'ERR_JWKS_MULTIPLE_MATCHING_KEYS') {\n      for await (const publicKey of error) {\n        try {\n          return await jose.jwtVerify(jwt, publicKey, options)\n        } catch (innerError) {\n          if (innerError?.code === 'ERR_JWS_SIGNATURE_VERIFICATION_FAILED') {\n            continue\n          }\n          throw innerError\n        }\n      }\n      throw new jose.errors.JWSSignatureVerificationFailed()\n    }\n\n    throw error\n  })\nconsole.log(protectedHeader)\nconsole.log(payload)\n```\n\n----------------------------------------\n\nTITLE: Importing PEM-encoded SPKI as CryptoKey in JavaScript\nDESCRIPTION: This snippet demonstrates how to use the importSPKI function from the jose library to import a PEM-encoded SPKI string as a CryptoKey. It specifies the algorithm and the SPKI string, then calls the function to create an EC public key.\nSOURCE: https://github.com/panva/jose/blob/main/docs/key/import/functions/importSPKI.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst algorithm = 'ES256'\nconst spki = `-----BEGIN PUBLIC KEY-----\nMFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAEFlHHWfLk0gLBbsLTcuCrbCqoHqmM\nYJepMC+Q+Dd6RBmBiA41evUsNMwLeN+PNFqib+xwi9JkJ8qhZkq8Y/IzGg==\n-----END PUBLIC KEY-----`\nconst ecPublicKey = await jose.importSPKI(spki, algorithm)\n```\n\n----------------------------------------\n\nTITLE: Verifying General JWS with ES256 Public Key in JavaScript\nDESCRIPTION: Example demonstrating how to verify a General JWS using ES256 public key. The code shows verification of a JWS containing a payload and signature, and then decoding the verified payload.\nSOURCE: https://github.com/panva/jose/blob/main/docs/jws/general/verify/functions/generalVerify.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst jws = {\n  payload: 'SXTigJlzIGEgZGFuZ2Vyb3VzIGJ1c2luZXNzLCBGcm9kbywgZ29pbmcgb3V0IHlvdXIgZG9vci4',\n  signatures: [\n    {\n      signature:\n        'FVVOXwj6kD3DqdfD9yYqfT2W9jv-Nop4kOehp_DeDGNB5dQNSPRvntBY6xH3uxlCxE8na9d_kyhYOcanpDJ0EA',\n      protected: 'eyJhbGciOiJFUzI1NiJ9',\n    },\n  ],\n}\n\nconst { payload, protectedHeader } = await jose.generalVerify(jws, publicKey)\n\nconsole.log(protectedHeader)\nconsole.log(new TextDecoder().decode(payload))\n```\n\n----------------------------------------\n\nTITLE: Creating and Signing a Compact JWS in JavaScript\nDESCRIPTION: This example demonstrates how to create a CompactSign instance, set the protected header, and sign a payload using the ES256 algorithm with a private key.\nSOURCE: https://github.com/panva/jose/blob/main/docs/jws/compact/sign/classes/CompactSign.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst jws = await new jose.CompactSign(\n  new TextEncoder().encode('It's a dangerous business, Frodo, going out your door.')\n)\n  .setProtectedHeader({ alg: 'ES256' })\n  .sign(privateKey)\n\nconsole.log(jws)\n```\n\n----------------------------------------\n\nTITLE: Using undici with HTTP Proxy Support for Remote JWKS Fetching in TypeScript\nDESCRIPTION: This example shows how to use the nodejs/undici library with jose's createRemoteJWKSet function to detect and use HTTP proxies when fetching remote JWK Sets.\nSOURCE: https://github.com/panva/jose/blob/main/docs/jwks/remote/variables/customFetch.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as undici from 'undici'\n\n// see https://undici.nodejs.org/#/docs/api/EnvHttpProxyAgent\nlet envHttpProxyAgent = new undici.EnvHttpProxyAgent()\n\n// @ts-ignore\nconst JWKS = jose.createRemoteJWKSet(url, {\n  [jose.customFetch]: (...args) => {\n    // @ts-ignore\n    return undici.fetch(args[0], { ...args[1], dispatcher: envHttpProxyAgent }) // prettier-ignore\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Interface Definition - JWTVerifyOptions in TypeScript\nDESCRIPTION: TypeScript interface definition for JWT verification options. Includes properties for controlling algorithm acceptance, audience validation, clock tolerance, critical parameters, and various claim verifications.\nSOURCE: https://github.com/panva/jose/blob/main/docs/jwt/verify/interfaces/JWTVerifyOptions.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface JWTVerifyOptions {\n  algorithms?: string[];\n  audience?: string | string[];\n  clockTolerance?: string | number;\n  crit?: { [propName: string]: boolean };\n  currentDate?: Date;\n  issuer?: string | string[];\n  maxTokenAge?: string | number;\n  requiredClaims?: string[];\n  subject?: string;\n  typ?: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Remote JWKS Fetching with ky for Retries and Logging in TypeScript\nDESCRIPTION: This snippet demonstrates how to use the sindresorhus/ky library with jose's createRemoteJWKSet function to add retry functionality and logging for outgoing requests and responses.\nSOURCE: https://github.com/panva/jose/blob/main/docs/jwks/remote/variables/customFetch.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport ky from 'ky'\n\nlet logRequest!: (request: Request) => void\nlet logResponse!: (request: Request, response: Response) => void\nlet logRetry!: (request: Request, error: Error, retryCount: number) => void\n\nconst JWKS = jose.createRemoteJWKSet(url, {\n  [jose.customFetch]: (...args) =>\n    ky(args[0], {\n      ...args[1],\n      hooks: {\n        beforeRequest: [\n          (request) => {\n            logRequest(request)\n          },\n        ],\n        beforeRetry: [\n          ({ request, error, retryCount }) => {\n            logRetry(request, error, retryCount)\n          },\n        ],\n        afterResponse: [\n          (request, _, response) => {\n            logResponse(request, response)\n          },\n        ],\n      },\n    }),\n})\n```\n\n----------------------------------------\n\nTITLE: Mocking Responses for Remote JWKS Fetching in Tests using undici\nDESCRIPTION: This example illustrates how to use the nodejs/undici library with jose's createRemoteJWKSet function to mock responses in tests when fetching remote JWK Sets.\nSOURCE: https://github.com/panva/jose/blob/main/docs/jwks/remote/variables/customFetch.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as undici from 'undici'\n\n// see https://undici.nodejs.org/#/docs/api/MockAgent\nlet mockAgent = new undici.MockAgent()\nmockAgent.disableNetConnect()\n\n// @ts-ignore\nconst JWKS = jose.createRemoteJWKSet(url, {\n  [jose.customFetch]: (...args) => {\n    // @ts-ignore\n    return undici.fetch(args[0], { ...args[1], dispatcher: mockAgent }) // prettier-ignore\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Defining JSONWebKeySet Interface in TypeScript\nDESCRIPTION: Interface definition for JSONWebKeySet that contains an array of JSON Web Keys. This interface is fundamental for working with collections of cryptographic keys in JSON Web Key format.\nSOURCE: https://github.com/panva/jose/blob/main/docs/types/interfaces/JSONWebKeySet.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface JSONWebKeySet {\n  keys: JWK[];\n}\n```\n\n----------------------------------------\n\nTITLE: Decoding JWT Payload using jose.decodeJwt() in JavaScript\nDESCRIPTION: This snippet demonstrates how to use the decodeJwt() function from the jose library to decode a JWT token and log the resulting claims. The function decodes the payload without validating the signature or claims.\nSOURCE: https://github.com/panva/jose/blob/main/docs/util/decode_jwt/functions/decodeJwt.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst claims = jose.decodeJwt(token)\nconsole.log(claims)\n```\n\n----------------------------------------\n\nTITLE: Configuring Automatic Retries for Network Errors in Remote JWKS Fetching with undici\nDESCRIPTION: This snippet demonstrates how to use the nodejs/undici library with jose's createRemoteJWKSet function to automatically retry on specific network errors when fetching remote JWK Sets.\nSOURCE: https://github.com/panva/jose/blob/main/docs/jwks/remote/variables/customFetch.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as undici from 'undici'\n\n// see https://undici.nodejs.org/#/docs/api/RetryAgent\nlet retryAgent = new undici.RetryAgent(new undici.Agent(), {\n  statusCodes: [],\n  errorCodes: [\n    'ECONNRESET',\n    'ECONNREFUSED',\n    'ENOTFOUND',\n    'ENETDOWN',\n    'ENETUNREACH',\n    'EHOSTDOWN',\n    'UND_ERR_SOCKET',\n  ],\n})\n\n// @ts-ignore\nconst JWKS = jose.createRemoteJWKSet(url, {\n  [jose.customFetch]: (...args) => {\n    // @ts-ignore\n    return undici.fetch(args[0], { ...args[1], dispatcher: retryAgent }) // prettier-ignore\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Handling Multiple JWKS Matches with Error Handling in JavaScript\nDESCRIPTION: Shows an advanced implementation that handles the case where multiple keys match the selection criteria. It iterates through matching keys and attempts verification with each until successful or all keys are exhausted.\nSOURCE: https://github.com/panva/jose/blob/main/docs/jwks/remote/functions/createRemoteJWKSet.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst options = {\n  issuer: 'urn:example:issuer',\n  audience: 'urn:example:audience',\n}\nconst { payload, protectedHeader } = await jose\n  .jwtVerify(jwt, JWKS, options)\n  .catch(async (error) => {\n    if (error?.code === 'ERR_JWKS_MULTIPLE_MATCHING_KEYS') {\n      for await (const publicKey of error) {\n        try {\n          return await jose.jwtVerify(jwt, publicKey, options)\n        } catch (innerError) {\n          if (innerError?.code === 'ERR_JWS_SIGNATURE_VERIFICATION_FAILED') {\n            continue\n          }\n          throw innerError\n        }\n      }\n      throw new jose.errors.JWSSignatureVerificationFailed()\n    }\n\n    throw error\n  })\nconsole.log(protectedHeader)\nconsole.log(payload)\n```\n\n----------------------------------------\n\nTITLE: Importing the JOSE Library in JavaScript\nDESCRIPTION: Example of importing the JOSE module in an ECMAScript module (ESM) environment. This is the standard way to import the library in modern JavaScript applications.\nSOURCE: https://github.com/panva/jose/blob/main/docs/README.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as jose from 'jose'\n```\n\n----------------------------------------\n\nTITLE: TypeScript Interface Definition for Public RSA JWK\nDESCRIPTION: Interface defining the structure of a public RSA JSON Web Key with required properties 'e' (Exponent) and 'n' (Modulus), along with optional properties for algorithm specifications, key operations, and X.509 certificate details.\nSOURCE: https://github.com/panva/jose/blob/main/docs/types/interfaces/JWK_RSA_Public.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface JWK_RSA_Public {\n    e: string;           // RSA JWK Exponent Parameter\n    n: string;           // RSA JWK Modulus Parameter\n    alg?: string;        // Algorithm Parameter\n    ext?: boolean;       // Extractable Parameter\n    key_ops?: string[];  // Key Operations Parameter\n    kid?: string;        // Key ID Parameter\n    kty?: string;        // Key Type Parameter\n    use?: string;        // Public Key Use Parameter\n    x5c?: string[];      // X.509 Certificate Chain Parameter\n    x5t?: string;        // X.509 Certificate SHA-1 Thumbprint\n    \"x5t#S256\"?: string; // X.509 Certificate SHA-256 Thumbprint\n    x5u?: string;        // X.509 URL Parameter\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring JWE Header Parameter Properties in TypeScript\nDESCRIPTION: TypeScript interface definition for JWE header parameters including algorithm specifications, key information, and certificate details. Includes optional properties for various standardized JWE header fields.\nSOURCE: https://github.com/panva/jose/blob/main/docs/types/interfaces/JWEHeaderParameters.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  [propName: string]: unknown;\n  alg?: string;\n  crit?: string[];\n  cty?: string;\n  enc?: string;\n  jku?: string;\n  jwk?: Pick<JWK, \"x\" | \"y\" | \"crv\" | \"e\" | \"n\" | \"kty\">;\n  kid?: string;\n  typ?: string;\n  x5c?: string[];\n  x5t?: string;\n  x5u?: string;\n  zip?: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Importing jose module in JavaScript\nDESCRIPTION: Example of importing the jose module using ESM syntax. This is the recommended way to import the full module, which can then be tree-shaken by bundlers.\nSOURCE: https://github.com/panva/jose/blob/main/README.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as jose from 'jose'\n```\n\n----------------------------------------\n\nTITLE: TypeScript Interface Definition for JWK OKP Public Keys\nDESCRIPTION: Interface definition specifying the structure and properties of a JWK OKP Public Key. Includes required properties 'crv' and 'x' for the curve type and public key, along with optional properties for algorithm specifications, key operations, and X.509 certificate-related parameters.\nSOURCE: https://github.com/panva/jose/blob/main/docs/types/interfaces/JWK_OKP_Public.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface JWK_OKP_Public {\n    crv: string;      // OKP JWK curve subtype parameter\n    x: string;        // The public key parameter\n    alg?: string;     // Algorithm parameter\n    ext?: boolean;    // Extractable parameter\n    key_ops?: string[]; // Key Operations parameter\n    kid?: string;     // Key ID parameter\n    kty?: string;     // Key Type parameter\n    use?: string;     // Public Key Use parameter\n    x5c?: string[];   // X.509 Certificate Chain parameter\n    x5t?: string;     // X.509 Certificate SHA-1 Thumbprint\n    \"x5t#S256\"?: string; // X.509 Certificate SHA-256 Thumbprint\n    x5u?: string;     // X.509 URL parameter\n}\n```\n\n----------------------------------------\n\nTITLE: TypeScript Interface Definition for FlattenedJWE\nDESCRIPTION: Interface defining the structure of a Flattened JWE token including required ciphertext and optional properties for encryption metadata, headers, and authentication data.\nSOURCE: https://github.com/panva/jose/blob/main/docs/types/interfaces/FlattenedJWE.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface FlattenedJWE {\n  ciphertext: string;\n  aad?: string;\n  encrypted_key?: string;\n  header?: JWEHeaderParameters;\n  iv?: string;\n  protected?: string;\n  tag?: string;\n  unprotected?: JWEHeaderParameters;\n}\n```\n\n----------------------------------------\n\nTITLE: Setting JWE Protected Header in EncryptJWT (TypeScript)\nDESCRIPTION: The setProtectedHeader method sets the JWE Protected Header on the EncryptJWT object. It takes a CompactJWEHeaderParameters object as an argument, which must contain 'alg' and 'enc' properties. The method returns the EncryptJWT instance for method chaining.\nSOURCE: https://github.com/panva/jose/blob/main/docs/jwt/encrypt/classes/EncryptJWT.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nsetProtectedHeader(protectedHeader: CompactJWEHeaderParameters): this\n```\n\n----------------------------------------\n\nTITLE: TypeScript Interface Definition - JWTClaimVerificationOptions\nDESCRIPTION: Interface definition for JWT claim verification options including audience, clock tolerance, issuer, subject, and other claim verification parameters. Each property is optional and provides specific validation functionality for JWT claims.\nSOURCE: https://github.com/panva/jose/blob/main/docs/types/interfaces/JWTClaimVerificationOptions.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface JWTClaimVerificationOptions {\n  audience?: string | string[];\n  clockTolerance?: string | number;\n  currentDate?: Date;\n  issuer?: string | string[];\n  maxTokenAge?: string | number;\n  requiredClaims?: string[];\n  subject?: string;\n  typ?: string;\n}\n```\n\n----------------------------------------\n\nTITLE: TypeScript Interface Definition for EC Private JWK\nDESCRIPTION: TypeScript interface defining the structure of a private Elliptic Curve JSON Web Key. Includes both required EC-specific parameters (curve, private key, coordinates) and optional JWK fields for key management and validation.\nSOURCE: https://github.com/panva/jose/blob/main/docs/types/interfaces/JWK_EC_Private.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface JWK_EC_Private {\n    crv: string;      // EC JWK \"crv\" (Curve) Parameter\n    d: string;        // EC JWK \"d\" (ECC Private Key) Parameter\n    x: string;        // EC JWK \"x\" (X Coordinate) Parameter\n    y: string;        // EC JWK \"y\" (Y Coordinate) Parameter\n    alg?: string;     // JWK \"alg\" (Algorithm) Parameter\n    ext?: boolean;    // JWK \"ext\" (Extractable) Parameter\n    key_ops?: string[]; // JWK \"key_ops\" (Key Operations) Parameter\n    kid?: string;     // JWK \"kid\" (Key ID) Parameter\n    kty?: string;     // JWK \"kty\" (Key Type) Parameter\n    use?: string;     // JWK \"use\" (Public Key Use) Parameter\n    x5c?: string[];   // JWK \"x5c\" (X.509 Certificate Chain) Parameter\n    x5t?: string;     // JWK \"x5t\" (X.509 Certificate SHA-1 Thumbprint) Parameter\n    \"x5t#S256\"?: string; // JWK \"x5t#S256\" (X.509 Certificate SHA-256 Thumbprint) Parameter\n    x5u?: string;     // JWK \"x5u\" (X.509 URL) Parameter\n}\n```\n\n----------------------------------------\n\nTITLE: Defining FlattenedJWS Interface in TypeScript\nDESCRIPTION: This code snippet defines the FlattenedJWS interface with its properties. It includes payload and signature as required properties, and header and protected as optional properties. Each property is documented with its purpose and constraints.\nSOURCE: https://github.com/panva/jose/blob/main/docs/types/interfaces/FlattenedJWS.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface FlattenedJWS {\n  payload: string;\n  signature: string;\n  header?: JWSHeaderParameters;\n  protected?: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining JWT Payload Interface in TypeScript\nDESCRIPTION: TypeScript interface definition for JWT payload that includes all standard JWT claims as defined in RFC7519. The interface is indexable to allow additional custom claims while providing type safety for standard claims.\nSOURCE: https://github.com/panva/jose/blob/main/docs/types/interfaces/JWTPayload.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface JWTPayload {\n  [propName: string]: unknown;\n  aud?: string | string[];\n  exp?: number;\n  iat?: number;\n  iss?: string;\n  jti?: string;\n  nbf?: number;\n  sub?: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining JWK_OKP_Private Interface in TypeScript\nDESCRIPTION: This interface defines the structure of a Private OKP JSON Web Key, including required properties like 'crv', 'd', and 'x', as well as optional properties for additional metadata and usage information.\nSOURCE: https://github.com/panva/jose/blob/main/docs/types/interfaces/JWK_OKP_Private.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface JWK_OKP_Private {\n  crv: string;\n  d: string;\n  x: string;\n  alg?: string;\n  ext?: boolean;\n  key_ops?: string[];\n  kid?: string;\n  kty?: string;\n  use?: string;\n  x5c?: string[];\n  x5t?: string;\n  \"x5t#S256\"?: string;\n  x5u?: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Importing X.509 Certificate as CryptoKey in JavaScript with Jose Library\nDESCRIPTION: Example of importing an X.509 certificate string as a CryptoKey object using the jose.importX509 function. This example demonstrates importing an ES256 (ECDSA with SHA-256) certificate for cryptographic operations.\nSOURCE: https://github.com/panva/jose/blob/main/docs/key/import/functions/importX509.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst algorithm = 'ES256'\nconst x509 = `-----BEGIN CERTIFICATE-----\nMIIBXjCCAQSgAwIBAgIGAXvykuMKMAoGCCqGSM49BAMCMDYxNDAyBgNVBAMMK3Np\nQXBNOXpBdk1VaXhXVWVGaGtjZXg1NjJRRzFyQUhXaV96UlFQTVpQaG8wHhcNMjEw\nOTE3MDcwNTE3WhcNMjIwNzE0MDcwNTE3WjA2MTQwMgYDVQQDDCtzaUFwTTl6QXZN\nVWl4V1VlRmhrY2V4NTYyUUcxckFIV2lfelJRUE1aUGhvMFkwEwYHKoZIzj0CAQYI\nKoZIzj0DAQcDQgAE8PbPvCv5D5xBFHEZlBp/q5OEUymq7RIgWIi7tkl9aGSpYE35\nUH+kBKDnphJO3odpPZ5gvgKs2nwRWcrDnUjYLDAKBggqhkjOPQQDAgNIADBFAiEA\n1yyMTRe66MhEXID9+uVub7woMkNYd0LhSHwKSPMUUTkCIFQGsfm1ecXOpeGOufAh\nv+A1QWZMuTWqYt+uh/YSRNDn\n-----END CERTIFICATE-----`\nconst ecPublicKey = await jose.importX509(x509, algorithm)\n```\n\n----------------------------------------\n\nTITLE: Setting JWT Expiration Time - TypeScript\nDESCRIPTION: Method to set the 'exp' (Expiration Time) claim. Accepts a string time span, number timestamp, or Date object. String format supports various time units and can use 'ago' or 'from now' modifiers.\nSOURCE: https://github.com/panva/jose/blob/main/docs/types/interfaces/ProduceJWT.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nsetExpirationTime(input: string | number | Date): this\n```\n\n----------------------------------------\n\nTITLE: Defining TypeScript Interface for oct JSON Web Keys\nDESCRIPTION: TypeScript interface definition for oct JSON Web Keys that includes mandatory key value parameter 'k' and optional parameters for algorithm, key operations, usage, and X.509 certificate properties.\nSOURCE: https://github.com/panva/jose/blob/main/docs/types/interfaces/JWK_oct.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface JWK_oct {\n  k: string;\n  alg?: string;\n  ext?: boolean;\n  key_ops?: string[];\n  kid?: string;\n  kty?: string;\n  use?: string;\n  x5c?: string[];\n  x5t?: string;\n  \"x5t#S256\"?: string;\n  x5u?: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining CompactDecryptResult Interface in TypeScript\nDESCRIPTION: Interface definition for CompactDecryptResult which represents the result of a compact JWE decryption operation. It includes two properties: plaintext (the decrypted content as a Uint8Array) and protectedHeader (the JWE Protected Header parameters).\nSOURCE: https://github.com/panva/jose/blob/main/docs/types/interfaces/CompactDecryptResult.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface CompactDecryptResult {\n  plaintext: Uint8Array;\n  protectedHeader: CompactJWEHeaderParameters;\n}\n```\n\n----------------------------------------\n\nTITLE: TypeScript Interface Definition for EC Public JSON Web Key\nDESCRIPTION: Defines a TypeScript interface JWK_EC_Public that specifies the structure of Elliptic Curve public JSON Web Keys. Includes required properties (crv, x, y) and optional properties (alg, ext, key_ops, kid, kty, use, x5c, x5t, x5t#S256, x5u) with their respective types.\nSOURCE: https://github.com/panva/jose/blob/main/docs/types/interfaces/JWK_EC_Public.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface JWK_EC_Public {\n    crv: string;          // EC JWK \"crv\" (Curve) Parameter\n    x: string;            // EC JWK \"x\" (X Coordinate) Parameter\n    y: string;            // EC JWK \"y\" (Y Coordinate) Parameter\n    alg?: string;         // JWK \"alg\" (Algorithm) Parameter\n    ext?: boolean;        // JWK \"ext\" (Extractable) Parameter\n    key_ops?: string[];   // JWK \"key_ops\" (Key Operations) Parameter\n    kid?: string;         // JWK \"kid\" (Key ID) Parameter\n    kty?: string;         // JWK \"kty\" (Key Type) Parameter\n    use?: string;         // JWK \"use\" (Public Key Use) Parameter\n    x5c?: string[];       // JWK \"x5c\" (X.509 Certificate Chain) Parameter\n    x5t?: string;         // JWK \"x5t\" (X.509 Certificate SHA-1 Thumbprint) Parameter\n    \"x5t#S256\"?: string;  // JWK \"x5t#S256\" (X.509 Certificate SHA-256 Thumbprint) Parameter\n    x5u?: string;         // JWK \"x5u\" (X.509 URL) Parameter\n}\n```\n\n----------------------------------------\n\nTITLE: Setting JWT ID - TypeScript\nDESCRIPTION: Method to set the 'jti' (JWT ID) claim in the JWT Claims Set. Takes a string parameter representing the unique identifier.\nSOURCE: https://github.com/panva/jose/blob/main/docs/types/interfaces/ProduceJWT.md#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nsetJti(jwtId: string): this\n```\n\n----------------------------------------\n\nTITLE: Defining JWK Interface Properties in TypeScript\nDESCRIPTION: This snippet defines the properties of the JWK interface, including optional fields for various key types and common JWK parameters. It covers RSA, EC, OKP, and oct key properties, as well as general JWK fields like 'kid' and 'use'.\nSOURCE: https://github.com/panva/jose/blob/main/docs/types/interfaces/JWK.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface JWK {\n  alg?: string;\n  crv?: string;\n  d?: string;\n  dp?: string;\n  dq?: string;\n  e?: string;\n  ext?: boolean;\n  k?: string;\n  key_ops?: string[];\n  kid?: string;\n  kty?: string;\n  n?: string;\n  p?: string;\n  q?: string;\n  qi?: string;\n  use?: string;\n  x?: string;\n  x5c?: string[];\n  x5t?: string;\n  \"x5t#S256\"?: string;\n  x5u?: string;\n  y?: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining JWTVerifyGetKey Interface for JWT Verification in TypeScript\nDESCRIPTION: This interface defines a function for JWT Verification with dynamic key resolution. It takes a protected header and a token as input, and returns various key types or a promise resolving to those types.\nSOURCE: https://github.com/panva/jose/blob/main/docs/jwt/verify/interfaces/JWTVerifyGetKey.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nJWTVerifyGetKey(protectedHeader: JWTHeaderParameters, token: FlattenedJWSInput): Uint8Array | CryptoKey | JWK | KeyObject | Promise<Uint8Array | CryptoKey | JWK | KeyObject>\n```\n\n----------------------------------------\n\nTITLE: Defining VerifyOptions Interface for JWS Verification in TypeScript\nDESCRIPTION: This code snippet defines the VerifyOptions interface with two optional properties: 'algorithms' for specifying accepted JWS algorithms, and 'crit' for handling critical header parameters. The 'algorithms' property is an array of strings, while 'crit' is an object with boolean values.\nSOURCE: https://github.com/panva/jose/blob/main/docs/types/interfaces/VerifyOptions.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface VerifyOptions {\n  algorithms?: string[];\n  crit?: {\n    [propName: string]: boolean;\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Defining CompactDecryptGetKey Interface in TypeScript\nDESCRIPTION: TypeScript interface definition for dynamic key resolution in JWE decryption. Takes protected header and token parameters, returns various key formats including Uint8Array, CryptoKey, JWK, or KeyObject, either directly or as a Promise.\nSOURCE: https://github.com/panva/jose/blob/main/docs/jwe/compact/decrypt/interfaces/CompactDecryptGetKey.md#2025-04-23_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nCompactDecryptGetKey(protectedHeader: CompactJWEHeaderParameters, token: FlattenedJWE): Uint8Array | CryptoKey | JWK | KeyObject | Promise<Uint8Array | CryptoKey | JWK | KeyObject>\n```\n\n----------------------------------------\n\nTITLE: Defining JWT Decrypt Key Resolution Interface in TypeScript\nDESCRIPTION: Interface definition for JWT Decryption dynamic key resolution function. Takes protected header and token parameters and returns various key formats. The function is called before token verification to resolve the decryption key.\nSOURCE: https://github.com/panva/jose/blob/main/docs/jwt/decrypt/interfaces/JWTDecryptGetKey.md#2025-04-23_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nJWTDecryptGetKey(protectedHeader, token): Uint8Array | CryptoKey | JWK | KeyObject | Promise<Uint8Array | CryptoKey | JWK | KeyObject>\n```\n\n----------------------------------------\n\nTITLE: Defining JWT Header Parameters Interface in TypeScript\nDESCRIPTION: TypeScript interface definition for JWT Header Parameters including standard JWT header fields and optional parameters. The interface is indexable and includes properties for algorithm, content type, key identifiers, and X.509 certificate-related fields.\nSOURCE: https://github.com/panva/jose/blob/main/docs/types/interfaces/JWTHeaderParameters.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface JWTHeaderParameters {\n  [propName: string]: unknown;\n  alg: string;\n  b64?: true;\n  crit?: string[];\n  cty?: string;\n  jku?: string;\n  jwk?: Pick<JWK, \"x\" | \"y\" | \"crv\" | \"e\" | \"n\" | \"kty\">;\n  kid?: string;\n  typ?: string;\n  x5c?: string[];\n  x5t?: string;\n  x5u?: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Interface Definition for CompactVerifyGetKey in TypeScript\nDESCRIPTION: This interface defines the function signature for Compact JWS Verification dynamic key resolution. The function takes protected header and token parameters and returns various key formats or promises of key formats.\nSOURCE: https://github.com/panva/jose/blob/main/docs/jws/compact/verify/interfaces/CompactVerifyGetKey.md#2025-04-23_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nCompactVerifyGetKey(protectedHeader, token): Uint8Array | CryptoKey | JWK | KeyObject | Promise<Uint8Array | CryptoKey | JWK | KeyObject>\n```\n\n----------------------------------------\n\nTITLE: TypeScript Interface Definition for GeneralVerifyGetKey in JWS Verification\nDESCRIPTION: TypeScript interface definition for the GeneralVerifyGetKey function used in JWS verification. This function resolves keys dynamically when no token components have been verified. It accepts protected header and token parameters and returns various key formats or a Promise that resolves to those formats.\nSOURCE: https://github.com/panva/jose/blob/main/docs/jws/general/verify/interfaces/GeneralVerifyGetKey.md#2025-04-23_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n**GeneralVerifyGetKey**(`protectedHeader`, `token`): [`Uint8Array`](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array) \\| [`CryptoKey`](https://developer.mozilla.org/docs/Web/API/CryptoKey) \\| [`JWK`](../../../../types/interfaces/JWK.md) \\| [`KeyObject`](../../../../types/interfaces/KeyObject.md) \\| [`Promise`](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Promise)\\<[`Uint8Array`](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array) \\| [`CryptoKey`](https://developer.mozilla.org/docs/Web/API/CryptoKey) \\| [`JWK`](../../../../types/interfaces/JWK.md) \\| [`KeyObject`](../../../../types/interfaces/KeyObject.md)\\>\n```\n\n----------------------------------------\n\nTITLE: Encoding Unsecured JWT in JavaScript\nDESCRIPTION: Example showing how to create and encode an unsecured JWT with various claims including issued at, issuer, audience and expiration time.\nSOURCE: https://github.com/panva/jose/blob/main/docs/jwt/unsecured/classes/UnsecuredJWT.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst unsecuredJwt = new jose.UnsecuredJWT({ 'urn:example:claim': true })\n  .setIssuedAt()\n  .setIssuer('urn:example:issuer')\n  .setAudience('urn:example:audience')\n  .setExpirationTime('2h')\n  .encode()\n\nconsole.log(unsecuredJwt)\n```\n\n----------------------------------------\n\nTITLE: Defining CompactJWSHeaderParameters Interface in TypeScript\nDESCRIPTION: TypeScript interface definition for Compact JWS Header Parameters. It includes the required 'alg' property and various optional properties like 'b64', 'crit', 'cty', 'jku', 'jwk', 'kid', 'typ', 'x5c', 'x5t', and 'x5u'. The interface is also indexable to allow for additional custom properties.\nSOURCE: https://github.com/panva/jose/blob/main/docs/types/interfaces/CompactJWSHeaderParameters.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n[`propName`: `string`]: `unknown`\n```\n\n----------------------------------------\n\nTITLE: Defining GetKeyFunction Interface in TypeScript\nDESCRIPTION: This code snippet defines the GetKeyFunction interface for dynamic key resolution in consuming operations. It takes two type parameters for the protected header and token, and returns various key types or a promise of key types.\nSOURCE: https://github.com/panva/jose/blob/main/docs/types/interfaces/GetKeyFunction.md#2025-04-23_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nGetKeyFunction<IProtectedHeader, IToken>: (protectedHeader: IProtectedHeader, token: IToken) => Uint8Array | CryptoKey | JWK | KeyObject | Promise<Uint8Array | CryptoKey | JWK | KeyObject>\n```\n\n----------------------------------------\n\nTITLE: TypeScript Interface Definition for FlattenedVerifyGetKey\nDESCRIPTION: Interface definition for handling dynamic key resolution in Flattened JWS Verification. Takes protected header and token parameters, returning various key formats including Uint8Array, CryptoKey, JWK, and KeyObject. Can return either synchronously or as a Promise.\nSOURCE: https://github.com/panva/jose/blob/main/docs/jws/flattened/verify/interfaces/FlattenedVerifyGetKey.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nFlattenedVerifyGetKey(protectedHeader, token): Uint8Array | CryptoKey | JWK | KeyObject | Promise<Uint8Array | CryptoKey | JWK | KeyObject>\n```\n\n----------------------------------------\n\nTITLE: Defining CompactJWEHeaderParameters Interface in TypeScript\nDESCRIPTION: This code snippet defines the CompactJWEHeaderParameters interface with various properties representing different header parameters for Compact JWE (JSON Web Encryption). It includes both required and optional properties with their respective types and descriptions.\nSOURCE: https://github.com/panva/jose/blob/main/docs/types/interfaces/CompactJWEHeaderParameters.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface CompactJWEHeaderParameters {\n  [propName: string]: unknown;\n\n  alg: string;\n  enc: string;\n  crit?: string[];\n  cty?: string;\n  jku?: string;\n  jwk?: Pick<JWK, \"x\" | \"y\" | \"crv\" | \"e\" | \"n\" | \"kty\">;\n  kid?: string;\n  typ?: string;\n  x5c?: string[];\n  x5t?: string;\n  x5u?: string;\n  zip?: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining DecryptOptions Interface in TypeScript\nDESCRIPTION: The DecryptOptions interface defines configuration options for JWE decryption operations. It includes properties for specifying allowed encryption algorithms, critical header parameters, and PBES2 count limits for security control.\nSOURCE: https://github.com/panva/jose/blob/main/docs/types/interfaces/DecryptOptions.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface DecryptOptions {\n    /**\n     * A list of accepted JWE \"enc\" (Encryption Algorithm) Header Parameter values. By default all\n     * \"enc\" (Encryption Algorithm) values applicable for the used key/secret are allowed.\n     */\n    contentEncryptionAlgorithms?: string[];\n\n    /**\n     * An object with keys representing recognized \"crit\" (Critical) Header Parameter names. The value\n     * for those is either `true` or `false`. `true` when the Header Parameter MUST be integrity\n     * protected, `false` when it's irrelevant.\n     *\n     * This makes the \"Extension Header Parameter \\\"...\\\" is not recognized\" error go away.\n     *\n     * Use this when a given JWS/JWT/JWE profile requires the use of proprietary non-registered \"crit\"\n     * (Critical) Header Parameters. This will only make sure the Header Parameter is syntactically\n     * correct when provided and that it is optionally integrity protected. It will not process the\n     * Header Parameter in any way or reject the operation if it is missing. You MUST still verify the\n     * Header Parameter was present and process it according to the profile's validation steps after\n     * the operation succeeds.\n     *\n     * The JWS extension Header Parameter `b64` is always recognized and processed properly. No other\n     * registered Header Parameters that need this kind of default built-in treatment are currently\n     * available.\n     */\n    crit?: {\n        [propName: string]: boolean;\n    };\n\n    /**\n     * A list of accepted JWE \"alg\" (Algorithm) Header Parameter values. By default all \"alg\"\n     * (Algorithm) Header Parameter values applicable for the used key/secret are allowed except for\n     * all PBES2 Key Management Algorithms, these need to be explicitly allowed using this option.\n     */\n    keyManagementAlgorithms?: string[];\n\n    /**\n     * (PBES2 Key Management Algorithms only) Maximum allowed \"p2c\" (PBES2 Count) Header Parameter\n     * value. The PBKDF2 iteration count defines the algorithm's computational expense. By default\n     * this value is set to 10000.\n     */\n    maxPBES2Count?: number;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining GeneralJWE Interface in TypeScript\nDESCRIPTION: This code snippet defines the GeneralJWE interface with its properties. It includes required fields like ciphertext and recipients, as well as optional fields such as aad, iv, protected, tag, and unprotected. Each property is documented with its purpose and requirements.\nSOURCE: https://github.com/panva/jose/blob/main/docs/types/interfaces/GeneralJWE.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface GeneralJWE {\n  ciphertext: string;\n  recipients: Pick<FlattenedJWE, \"header\" | \"encrypted_key\">[];\n  aad?: string;\n  iv?: string;\n  protected?: string;\n  tag?: string;\n  unprotected?: JWEHeaderParameters;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining JWS Header Parameter Types in TypeScript\nDESCRIPTION: TypeScript interface definition for JWS Header Parameters including algorithm, content type, critical parameters, key identifiers, and X.509 certificate fields. Implements indexable signature for additional custom parameters.\nSOURCE: https://github.com/panva/jose/blob/main/docs/types/interfaces/JWSHeaderParameters.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface JWSHeaderParameters {\n  [propName: string]: unknown;\n  alg?: string;\n  b64?: boolean;\n  crit?: string[];\n  cty?: string;\n  jku?: string;\n  jwk?: Pick<JWK, \"x\" | \"y\" | \"crv\" | \"e\" | \"n\" | \"kty\">;\n  kid?: string;\n  typ?: string;\n  x5c?: string[];\n  x5t?: string;\n  x5u?: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining GeneralVerifyResult Interface in TypeScript\nDESCRIPTION: This interface defines the structure of the result from verifying a JWS in JSON Serialization Syntax. It includes a mandatory payload property and optional protected and unprotected header properties.\nSOURCE: https://github.com/panva/jose/blob/main/docs/types/interfaces/GeneralVerifyResult.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface GeneralVerifyResult {\n  payload: Uint8Array;\n  protectedHeader?: JWSHeaderParameters;\n  unprotectedHeader?: JWSHeaderParameters;\n}\n```\n\n----------------------------------------\n\nTITLE: Exporting Generated Keys Using the extractable Option in jose\nDESCRIPTION: Demonstrates how to generate a PS256 key pair with the extractable option set to true, allowing the private key to be exported in JWK and PKCS8 formats. The example shows how to use the jose library's generateKeyPair, exportJWK, and exportPKCS8 functions.\nSOURCE: https://github.com/panva/jose/blob/main/docs/key/generate_key_pair/interfaces/GenerateKeyPairOptions.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst { publicKey, privateKey } = await jose.generateKeyPair('PS256', {\n  extractable: true,\n})\nconsole.log(await jose.exportJWK(privateKey))\nconsole.log(await jose.exportPKCS8(privateKey))\n```\n\n----------------------------------------\n\nTITLE: Base64URL Encoding Function Declaration\nDESCRIPTION: TypeScript function declaration for encoding strings or Uint8Array inputs to Base64URL format without padding. The function takes a single parameter that can be either a string or Uint8Array and returns a Base64URL encoded string.\nSOURCE: https://github.com/panva/jose/blob/main/docs/util/base64url/functions/encode.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nencode(input: string | Uint8Array): string\n```\n\n----------------------------------------\n\nTITLE: Defining GeneralDecryptGetKey Interface in TypeScript\nDESCRIPTION: TypeScript interface definition for the GeneralDecryptGetKey function used in JWE decryption. This function accepts protected header information and the token itself to dynamically resolve the appropriate key for decryption before any token verification occurs.\nSOURCE: https://github.com/panva/jose/blob/main/docs/jwe/general/decrypt/interfaces/GeneralDecryptGetKey.md#2025-04-23_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n**GeneralDecryptGetKey**(`protectedHeader`, `token`): [`Uint8Array`](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array) \\| [`CryptoKey`](https://developer.mozilla.org/docs/Web/API/CryptoKey) \\| [`JWK`](../../../../types/interfaces/JWK.md) \\| [`KeyObject`](../../../../types/interfaces/KeyObject.md) \\| [`Promise`](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Promise)\\<[`Uint8Array`](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array) \\| [`CryptoKey`](https://developer.mozilla.org/docs/Web/API/CryptoKey) \\| [`JWK`](../../../../types/interfaces/JWK.md) \\| [`KeyObject`](../../../../types/interfaces/KeyObject.md)\\>\n```\n\n----------------------------------------\n\nTITLE: Defining JWTVerifyResult Interface in TypeScript\nDESCRIPTION: This TypeScript interface defines the structure of a JWT verification result. It includes a generic type parameter for the payload and specifies two properties: payload and protectedHeader.\nSOURCE: https://github.com/panva/jose/blob/main/docs/types/interfaces/JWTVerifyResult.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface JWTVerifyResult<PayloadType = JWTPayload> {\n  payload: PayloadType & JWTPayload;\n  protectedHeader: JWTHeaderParameters;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining ResolvedKey Interface in TypeScript\nDESCRIPTION: This code snippet defines the ResolvedKey interface with a single property 'key'. The key can be either a Uint8Array or a CryptoKey, representing the resolved key from a key resolver function.\nSOURCE: https://github.com/panva/jose/blob/main/docs/types/interfaces/ResolvedKey.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface ResolvedKey {\n  key: Uint8Array | CryptoKey\n}\n```\n\n----------------------------------------\n\nTITLE: Defining FlattenedDecryptGetKey Interface in TypeScript\nDESCRIPTION: TypeScript interface definition for dynamic key resolution in Flattened JWE Decryption. The interface accepts protected header and token parameters, returning various key formats including Uint8Array, CryptoKey, JWK, or KeyObject.\nSOURCE: https://github.com/panva/jose/blob/main/docs/jwe/flattened/decrypt/interfaces/FlattenedDecryptGetKey.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nFlattenedDecryptGetKey(protectedHeader: undefined | JWEHeaderParameters, token: FlattenedJWE): Uint8Array | CryptoKey | JWK | KeyObject | Promise<Uint8Array | CryptoKey | JWK | KeyObject>\n```\n\n----------------------------------------\n\nTITLE: GeneralJWS Interface Definition in TypeScript\nDESCRIPTION: TypeScript interface definition for GeneralJWS that specifies the structure for JWS JSON Serialization. It contains a payload string property and signatures array that omits the payload property from FlattenedJWSInput type.\nSOURCE: https://github.com/panva/jose/blob/main/docs/types/interfaces/GeneralJWS.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface GeneralJWS {\n  payload: string;\n  signatures: Omit<FlattenedJWSInput, \"payload\">[];\n}\n```\n\n----------------------------------------\n\nTITLE: Using addSignature Method in Signature Interface\nDESCRIPTION: Method for adding a signature to the enclosing GeneralSign instance. It accepts a signing key and options as parameters.\nSOURCE: https://github.com/panva/jose/blob/main/docs/jws/general/sign/interfaces/Signature.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n**addSignature**(...`args`): [`Signature`](Signature.md)\n```\n\n----------------------------------------\n\nTITLE: TypeScript Interface for GeneralJWSInput\nDESCRIPTION: Interface defining the structure of a General JWS input used for verification. It includes a payload property that can be either a string or Uint8Array, and a signatures array containing flattened JWS input objects without payload property.\nSOURCE: https://github.com/panva/jose/blob/main/docs/types/interfaces/GeneralJWSInput.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface GeneralJWSInput {\n  payload: string | Uint8Array;\n  signatures: Omit<FlattenedJWSInput, \"payload\">[];\n}\n```\n\n----------------------------------------\n\nTITLE: TypeScript Interface Definition for FlattenedJWSInput\nDESCRIPTION: Defines a TypeScript interface for Flattened JWS input structure. Includes properties for payload (string or Uint8Array), signature (string), and optional header properties (protected and unprotected). Supports RFC7797 with b64:false option for raw payload validation.\nSOURCE: https://github.com/panva/jose/blob/main/docs/types/interfaces/FlattenedJWSInput.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface FlattenedJWSInput {\n  payload: string | Uint8Array;\n  signature: string;\n  header?: JWSHeaderParameters;\n  protected?: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Using sign Method in Signature Interface\nDESCRIPTION: A shorthand method for calling encrypt() on the enclosing GeneralSign instance. Returns a Promise that resolves to a GeneralJWS object.\nSOURCE: https://github.com/panva/jose/blob/main/docs/jws/general/sign/interfaces/Signature.md#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n**sign**(...`args`): [`Promise`](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Promise)\\<[`GeneralJWS`](../../../../types/interfaces/GeneralJWS.md)\\>\n```\n\n----------------------------------------\n\nTITLE: Protected Header Decoder Function\nDESCRIPTION: Function for decoding JOSE Protected Headers from various serialization formats.\nSOURCE: https://github.com/panva/jose/blob/main/docs/util/decode_protected_header/README.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ndecodeProtectedHeader\n```\n\n----------------------------------------\n\nTITLE: Defining CompactVerifyResult Interface Properties in TypeScript\nDESCRIPTION: Interface definition for CompactVerifyResult that specifies the structure of JWS verification results. Contains two main properties: payload as Uint8Array and protectedHeader as CompactJWSHeaderParameters.\nSOURCE: https://github.com/panva/jose/blob/main/docs/types/interfaces/CompactVerifyResult.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface CompactVerifyResult {\n  payload: Uint8Array;\n  protectedHeader: CompactJWSHeaderParameters;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining JOSE Header Parameters Interface in TypeScript\nDESCRIPTION: TypeScript interface defining the common header parameters used in JOSE (JSON Object Signing and Encryption) implementations. Includes optional properties for content type, key references, certificate chains, and other standard JOSE header fields.\nSOURCE: https://github.com/panva/jose/blob/main/docs/types/interfaces/JoseHeaderParameters.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface JoseHeaderParameters {\n  cty?: string;       // Content Type Header Parameter\n  jku?: string;       // JWK Set URL Header Parameter\n  jwk?: Pick<JWK, \"x\" | \"y\" | \"crv\" | \"e\" | \"n\" | \"kty\">; // JSON Web Key Header Parameter\n  kid?: string;       // Key ID Header Parameter\n  typ?: string;       // Type Header Parameter\n  x5c?: string[];     // X.509 Certificate Chain Header Parameter\n  x5t?: string;       // X.509 Certificate SHA-1 Thumbprint Header Parameter\n  x5u?: string;       // X.509 URL Header Parameter\n}\n```\n\n----------------------------------------\n\nTITLE: Defining FlattenedVerifyResult Interface in TypeScript\nDESCRIPTION: TypeScript interface definition for FlattenedVerifyResult that specifies the structure of a flattened JWS verification result. Contains a required payload property of type Uint8Array and optional protected and unprotected header properties.\nSOURCE: https://github.com/panva/jose/blob/main/docs/types/interfaces/FlattenedVerifyResult.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface FlattenedVerifyResult {\n  payload: Uint8Array;\n  protectedHeader?: JWSHeaderParameters;\n  unprotectedHeader?: JWSHeaderParameters;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining CritOption Interface for Critical Header Parameters in TypeScript\nDESCRIPTION: This code snippet defines the CritOption interface with an optional 'crit' property. The 'crit' property is an object where keys represent recognized Critical Header Parameter names, and values are boolean flags indicating whether the parameter must be integrity protected.\nSOURCE: https://github.com/panva/jose/blob/main/docs/types/interfaces/CritOption.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface CritOption {\n  crit?: {\n    [propName: string]: boolean\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining KeyImportOptions Interface Property\nDESCRIPTION: TypeScript interface property definition for the extractable option used in key import operations. Controls whether the key is extractable from the CryptoKey object. Defaults to false for private keys and true for other key types.\nSOURCE: https://github.com/panva/jose/blob/main/docs/key/import/interfaces/KeyImportOptions.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nextractable?: boolean\n```\n\n----------------------------------------\n\nTITLE: Defining SignOptions Interface in TypeScript\nDESCRIPTION: This code snippet defines the SignOptions interface with an optional 'crit' property. The 'crit' property is an object that specifies critical header parameters and their integrity protection requirements for JWS signing.\nSOURCE: https://github.com/panva/jose/blob/main/docs/types/interfaces/SignOptions.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface SignOptions {\n  crit?: {\n    [propName: string]: boolean\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Encrypting Content with encrypt() Method in JOSE Recipient Interface\nDESCRIPTION: A shorthand for calling encrypt() on the enclosing GeneralEncrypt instance. Returns a Promise that resolves to a GeneralJWE object.\nSOURCE: https://github.com/panva/jose/blob/main/docs/jwe/general/encrypt/interfaces/Recipient.md#2025-04-23_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\nencrypt(...args): Promise<GeneralJWE>\n```\n\n----------------------------------------\n\nTITLE: Defining KeyObject Interface Property in TypeScript\nDESCRIPTION: Defines the 'type' property of the KeyObject interface. The property is of type string and is required.\nSOURCE: https://github.com/panva/jose/blob/main/docs/types/interfaces/KeyObject.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n• **type**: `string`\n```\n\n----------------------------------------\n\nTITLE: Setting JWT Subject - TypeScript\nDESCRIPTION: Method to set the 'sub' (Subject) claim in the JWT Claims Set. Takes a string parameter representing the subject.\nSOURCE: https://github.com/panva/jose/blob/main/docs/types/interfaces/ProduceJWT.md#2025-04-23_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nsetSubject(subject: string): this\n```\n\n----------------------------------------\n\nTITLE: Defining FlattenedDecryptResult Interface in TypeScript\nDESCRIPTION: This TypeScript interface defines the structure of a FlattenedDecryptResult object. It includes properties for the decrypted plaintext, optional additional authenticated data, and various types of JWE headers.\nSOURCE: https://github.com/panva/jose/blob/main/docs/types/interfaces/FlattenedDecryptResult.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface FlattenedDecryptResult {\n  plaintext: Uint8Array;\n  additionalAuthenticatedData?: Uint8Array;\n  protectedHeader?: JWEHeaderParameters;\n  sharedUnprotectedHeader?: JWEHeaderParameters;\n  unprotectedHeader?: JWEHeaderParameters;\n}\n```\n\n----------------------------------------\n\nTITLE: Completing Recipient Configuration with done() Method in JOSE\nDESCRIPTION: Returns the enclosing GeneralEncrypt instance after recipient configuration is complete. This allows for chaining back to the parent encryption context.\nSOURCE: https://github.com/panva/jose/blob/main/docs/jwe/general/encrypt/interfaces/Recipient.md#2025-04-23_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\ndone(): GeneralEncrypt\n```\n\n----------------------------------------\n\nTITLE: Setting JWT Audience Claim - TypeScript\nDESCRIPTION: Method to set the 'aud' (Audience) claim in the JWT Claims Set. Accepts either a single string or array of strings as the audience value.\nSOURCE: https://github.com/panva/jose/blob/main/docs/types/interfaces/ProduceJWT.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nsetAudience(audience: string | string[]): this\n```\n\n----------------------------------------\n\nTITLE: TypeScript GeneralDecryptResult Interface Definition\nDESCRIPTION: Interface defining the structure of JWE decryption results. Contains properties for the decrypted plaintext, optional additional authenticated data (AAD), and three types of header parameters: protected, shared unprotected, and per-recipient unprotected.\nSOURCE: https://github.com/panva/jose/blob/main/docs/types/interfaces/GeneralDecryptResult.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface GeneralDecryptResult {\n  plaintext: Uint8Array;\n  additionalAuthenticatedData?: Uint8Array;\n  protectedHeader?: JWEHeaderParameters;\n  sharedUnprotectedHeader?: JWEHeaderParameters;\n  unprotectedHeader?: JWEHeaderParameters;\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Unprotected Header in Signature Interface\nDESCRIPTION: Method for setting the JWS Unprotected Header on the Signature object. The unprotected header contains parameters that are not integrity protected.\nSOURCE: https://github.com/panva/jose/blob/main/docs/jws/general/sign/interfaces/Signature.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n**setUnprotectedHeader**(`unprotectedHeader`): [`Signature`](Signature.md)\n```\n\n----------------------------------------\n\nTITLE: Setting JWT Issued At Time - TypeScript\nDESCRIPTION: Method to set the 'iat' (Issued At) claim. Can use current timestamp if no argument provided, or accept string time span, number timestamp, or Date object.\nSOURCE: https://github.com/panva/jose/blob/main/docs/types/interfaces/ProduceJWT.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nsetIssuedAt(input?: string | number | Date): this\n```\n\n----------------------------------------\n\nTITLE: Defining JWTDecryptResult Interface Type in TypeScript\nDESCRIPTION: TypeScript interface definition for JWT decryption results. Contains two main properties: payload (JWT Claims Set with custom payload type) and protectedHeader (JWE Protected Header parameters).\nSOURCE: https://github.com/panva/jose/blob/main/docs/types/interfaces/JWTDecryptResult.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface JWTDecryptResult<PayloadType = JWTPayload> {\n  payload: PayloadType & JWTPayload;\n  protectedHeader: CompactJWEHeaderParameters;\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Protected Header in Signature Interface\nDESCRIPTION: Method for setting the JWS Protected Header on the Signature object. The protected header contains parameters that are integrity protected.\nSOURCE: https://github.com/panva/jose/blob/main/docs/jws/general/sign/interfaces/Signature.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n**setProtectedHeader**(`protectedHeader`): [`Signature`](Signature.md)\n```\n\n----------------------------------------\n\nTITLE: Setting JWT Issuer - TypeScript\nDESCRIPTION: Method to set the 'iss' (Issuer) claim in the JWT Claims Set. Takes a string parameter representing the issuer.\nSOURCE: https://github.com/panva/jose/blob/main/docs/types/interfaces/ProduceJWT.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nsetIssuer(issuer: string): this\n```\n\n----------------------------------------\n\nTITLE: Setting JWT Not Before Time - TypeScript\nDESCRIPTION: Method to set the 'nbf' (Not Before) claim. Accepts a string time span, number timestamp, or Date object, similar to expiration time.\nSOURCE: https://github.com/panva/jose/blob/main/docs/types/interfaces/ProduceJWT.md#2025-04-23_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nsetNotBefore(input: string | number | Date): this\n```\n\n----------------------------------------\n\nTITLE: Defining TypeScript Interface for JWE Encryption Options with Critical Header Parameters\nDESCRIPTION: TypeScript interface definition for JWE (JSON Web Encryption) options. It includes an optional 'crit' property for handling Critical Header Parameters that need special recognition in JWE operations.\nSOURCE: https://github.com/panva/jose/blob/main/docs/types/interfaces/EncryptOptions.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface EncryptOptions {\n  crit?: {\n    [propName: string]: boolean\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining ProtectedHeaderParameters Type Alias in TypeScript\nDESCRIPTION: This code snippet defines the ProtectedHeaderParameters type alias by combining JWSHeaderParameters and JWEHeaderParameters interfaces. It represents the header parameters for both JWE (JSON Web Encryption) and JWS (JSON Web Signature) structures.\nSOURCE: https://github.com/panva/jose/blob/main/docs/util/decode_protected_header/type-aliases/ProtectedHeaderParameters.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nProtectedHeaderParameters: JWSHeaderParameters & JWEHeaderParameters\n```\n\n----------------------------------------\n\nTITLE: Setting Subject Claim in EncryptJWT (TypeScript)\nDESCRIPTION: The setSubject method sets the 'sub' (Subject) Claim on the JWT Claims Set. It takes a string parameter representing the subject value. The method returns the EncryptJWT instance for method chaining.\nSOURCE: https://github.com/panva/jose/blob/main/docs/jwt/encrypt/classes/EncryptJWT.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nsetSubject(subject: string): this\n```\n\n----------------------------------------\n\nTITLE: Defining JWKParameters Interface Properties in TypeScript\nDESCRIPTION: TypeScript interface definition for JSON Web Key (JWK) parameters. Includes optional properties for algorithm, key operations, key type, usage, certificate chain, and thumbprints.\nSOURCE: https://github.com/panva/jose/blob/main/docs/types/interfaces/JWKParameters.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface JWKParameters {\n  alg?: string;        // Algorithm Parameter\n  ext?: boolean;       // Extractable Parameter\n  key_ops?: string[]; // Key Operations Parameter\n  kid?: string;       // Key ID Parameter\n  kty?: string;       // Key Type Parameter\n  use?: string;       // Public Key Use Parameter\n  x5c?: string[];     // X.509 Certificate Chain Parameter\n  x5t?: string;       // X.509 Certificate SHA-1 Thumbprint\n  \"x5t#S256\"?: string; // X.509 Certificate SHA-256 Thumbprint\n  x5u?: string;       // X.509 URL Parameter\n}\n```\n\n----------------------------------------\n\nTITLE: Defining JWKSCacheInput Type Alias in TypeScript\nDESCRIPTION: Type alias for JWKS cache input that can be either an ExportedJWKSCache interface or an empty Record with string keys. This type is used for configuring JWKS caching in the jose library.\nSOURCE: https://github.com/panva/jose/blob/main/docs/jwks/remote/type-aliases/JWKSCacheInput.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nJWKSCacheInput: ExportedJWKSCache | Record<string, never>\n```\n\n----------------------------------------\n\nTITLE: Checking JWT Claim Validation Error Using Error Code\nDESCRIPTION: Example showing how to check if an error is a JWT claim validation failure using the error code property.\nSOURCE: https://github.com/panva/jose/blob/main/docs/util/errors/classes/JWTClaimValidationFailed.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nif (err.code === 'ERR_JWT_CLAIM_VALIDATION_FAILED') {\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: TypeScript Interface Definition for RSA Private JWK\nDESCRIPTION: Interface defining the structure of private RSA JSON Web Keys with both required RSA-specific parameters (d, dp, dq, e, n, p, q, qi) and optional JWK parameters (alg, ext, key_ops, kid, kty, use, x5c, x5t, x5t#S256, x5u).\nSOURCE: https://github.com/panva/jose/blob/main/docs/types/interfaces/JWK_RSA_Private.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface JWK_RSA_Private {\n  d: string;        // Private Exponent\n  dp: string;       // First Factor CRT Exponent\n  dq: string;       // Second Factor CRT Exponent\n  e: string;        // Exponent\n  n: string;        // Modulus\n  p: string;        // First Prime Factor\n  q: string;        // Second Prime Factor\n  qi: string;       // First CRT Coefficient\n  alg?: string;     // Algorithm\n  ext?: boolean;    // Extractable\n  key_ops?: string[]; // Key Operations\n  kid?: string;     // Key ID\n  kty?: string;     // Key Type\n  use?: string;     // Public Key Use\n  x5c?: string[];   // X.509 Certificate Chain\n  x5t?: string;     // X.509 Certificate SHA-1 Thumbprint\n  \"x5t#S256\"?: string; // X.509 Certificate SHA-256 Thumbprint\n  x5u?: string;     // X.509 URL\n}\n```\n\n----------------------------------------\n\nTITLE: Error Code Checking in JavaScript\nDESCRIPTION: Example showing how to check for JWSSignatureVerificationFailed error using the error code property.\nSOURCE: https://github.com/panva/jose/blob/main/docs/util/errors/classes/JWSSignatureVerificationFailed.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nif (err.code === 'ERR_JWS_SIGNATURE_VERIFICATION_FAILED') {\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Checking JWT Claim Validation Error Using instanceof\nDESCRIPTION: Example demonstrating how to check if an error is a JWT claim validation failure using the instanceof operator.\nSOURCE: https://github.com/panva/jose/blob/main/docs/util/errors/classes/JWTClaimValidationFailed.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nif (err instanceof jose.errors.JWTClaimValidationFailed) {\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Documenting generateSecret Function in Markdown\nDESCRIPTION: This snippet provides a link to the documentation for the generateSecret function, which is likely responsible for creating symmetric keys.\nSOURCE: https://github.com/panva/jose/blob/main/docs/key/generate_secret/README.md#2025-04-23_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n- [generateSecret](functions/generateSecret.md)\n```\n\n----------------------------------------\n\nTITLE: TypeScript Interface Definition for JWE Key Management Header Parameters\nDESCRIPTION: Interface defining optional parameters for JWE key management operations. Includes both current parameters (apu, apv) and deprecated parameters (epk, iv, p2c, p2s) that should only be used for testing and vector validation purposes.\nSOURCE: https://github.com/panva/jose/blob/main/docs/types/interfaces/JWEKeyManagementHeaderParameters.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface JWEKeyManagementHeaderParameters {\n  apu?: Uint8Array;\n  apv?: Uint8Array;\n  epk?: CryptoKey | KeyObject;\n  iv?: Uint8Array;\n  p2c?: number;\n  p2s?: Uint8Array;\n}\n```\n\n----------------------------------------\n\nTITLE: Checking JWTInvalid Error Using Error Code in JavaScript\nDESCRIPTION: This snippet demonstrates how to check if a thrown error is an instance of JWTInvalid using its unique error code. The code 'ERR_JWT_INVALID' is used to identify this specific error type.\nSOURCE: https://github.com/panva/jose/blob/main/docs/util/errors/classes/JWTInvalid.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nif (err.code === 'ERR_JWT_INVALID') {\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Checking JWEDecryptionFailed Error Using Error Code in JavaScript\nDESCRIPTION: This snippet demonstrates how to check if a thrown error is a JWEDecryptionFailed error by comparing its code property to the specific error code string.\nSOURCE: https://github.com/panva/jose/blob/main/docs/util/errors/classes/JWEDecryptionFailed.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nif (err.code === 'ERR_JWE_DECRYPTION_FAILED') {\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Defining FlattenedDecryptGetKey Interface for JWE Decryption in Markdown\nDESCRIPTION: This snippet defines an interface named FlattenedDecryptGetKey, which is likely used for retrieving keys during the JWE decryption process in flattened JSON serialization.\nSOURCE: https://github.com/panva/jose/blob/main/docs/jwe/flattened/decrypt/README.md#2025-04-23_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n- [FlattenedDecryptGetKey](interfaces/FlattenedDecryptGetKey.md)\n```\n\n----------------------------------------\n\nTITLE: Checking JWT Expiration Error using Error Code in JavaScript\nDESCRIPTION: This snippet demonstrates how to check if a thrown error is a JWTExpired error using the stable error code 'ERR_JWT_EXPIRED'.\nSOURCE: https://github.com/panva/jose/blob/main/docs/util/errors/classes/JWTExpired.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nif (err.code === 'ERR_JWT_EXPIRED') {\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Checking JWEInvalid Error Using instanceof in JavaScript\nDESCRIPTION: This snippet shows how to check if a thrown error is a JWEInvalid error using the instanceof operator. It compares the error object with the JWEInvalid class from the jose.errors namespace.\nSOURCE: https://github.com/panva/jose/blob/main/docs/util/errors/classes/JWEInvalid.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nif (err instanceof jose.errors.JWEInvalid) {\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring RemoteJWKSetOptions Interface Properties in TypeScript\nDESCRIPTION: Interface definition for RemoteJWKSetOptions that specifies various configuration options for remote JSON Web Key Sets, including caching behavior, timeout settings, and HTTP request customization.\nSOURCE: https://github.com/panva/jose/blob/main/docs/jwks/remote/interfaces/RemoteJWKSetOptions.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface RemoteJWKSetOptions {\n  [customFetch]?: FetchImplementation\n  [jwksCache]?: JWKSCacheInput\n  cacheMaxAge?: number\n  cooldownDuration?: number\n  headers?: Record<string, string>\n  timeoutDuration?: number\n}\n```\n\n----------------------------------------\n\nTITLE: Checking JWEInvalid Error Using Error Code in JavaScript\nDESCRIPTION: This snippet demonstrates how to check if a thrown error is a JWEInvalid error by comparing its error code. The error code 'ERR_JWE_INVALID' is unique to JWEInvalid errors.\nSOURCE: https://github.com/panva/jose/blob/main/docs/util/errors/classes/JWEInvalid.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nif (err.code === 'ERR_JWE_INVALID') {\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Checking for JWKSMultipleMatchingKeys Error Using Error Code in JavaScript\nDESCRIPTION: This snippet demonstrates how to check if a thrown error is an instance of JWKSMultipleMatchingKeys by comparing its error code.\nSOURCE: https://github.com/panva/jose/blob/main/docs/util/errors/classes/JWKSMultipleMatchingKeys.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nif (err.code === 'ERR_JWKS_MULTIPLE_MATCHING_KEYS') {\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Checking JWT Expiration Error using instanceof in JavaScript\nDESCRIPTION: This snippet shows how to check if a thrown error is an instance of the JWTExpired class using the instanceof operator.\nSOURCE: https://github.com/panva/jose/blob/main/docs/util/errors/classes/JWTExpired.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nif (err instanceof jose.errors.JWTExpired) {\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Defining FetchImplementation Type Alias in TypeScript\nDESCRIPTION: Defines a type alias for a custom fetch implementation function. It takes a URL and options as parameters and returns a Promise resolving to a Response object.\nSOURCE: https://github.com/panva/jose/blob/main/docs/jwks/remote/type-aliases/FetchImplementation.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntype FetchImplementation = (url: string, options: {\n  headers: Headers;\n  method: \"GET\";\n  redirect: \"manual\";\n  signal: AbortSignal;\n}) => Promise<Response>;\n```\n\n----------------------------------------\n\nTITLE: Checking JWKInvalid Error Using instanceof in JavaScript\nDESCRIPTION: This snippet shows how to check if a thrown error is an instance of JWKInvalid using the instanceof operator. It compares the error against the jose.errors.JWKInvalid class.\nSOURCE: https://github.com/panva/jose/blob/main/docs/util/errors/classes/JWKInvalid.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nif (err instanceof jose.errors.JWKInvalid) {\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Checking JWKSNoMatchingKey Error Using Error Code in JavaScript\nDESCRIPTION: This snippet demonstrates how to check if a thrown error is a JWKSNoMatchingKey error using its stable error code.\nSOURCE: https://github.com/panva/jose/blob/main/docs/util/errors/classes/JWKSNoMatchingKey.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nif (err.code === 'ERR_JWKS_NO_MATCHING_KEY') {\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Decoding Base64URL Function Signature in TypeScript\nDESCRIPTION: Function signature for decode() that accepts either a string or Uint8Array input and returns a decoded Uint8Array. Used for converting Base64URL encoded data back to binary format.\nSOURCE: https://github.com/panva/jose/blob/main/docs/util/base64url/functions/decode.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ndecode(input: string | Uint8Array): Uint8Array\n```\n\n----------------------------------------\n\nTITLE: Checking JWKSInvalid Error Using Error Code in JavaScript\nDESCRIPTION: This snippet demonstrates how to check if a thrown error is a JWKSInvalid error by comparing its code property to the specific error code 'ERR_JWKS_INVALID'.\nSOURCE: https://github.com/panva/jose/blob/main/docs/util/errors/classes/JWKSInvalid.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nif (err.code === 'ERR_JWKS_INVALID') {\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Error Code Checking in JavaScript with JOSE\nDESCRIPTION: Example showing how to check for JOSENotSupported errors using the error code property.\nSOURCE: https://github.com/panva/jose/blob/main/docs/util/errors/classes/JOSENotSupported.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nif (err.code === 'ERR_JOSE_NOT_SUPPORTED') {\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Recipients using addRecipient() Method in JOSE Recipient Interface\nDESCRIPTION: A shorthand method for calling addRecipient() on the enclosing GeneralEncrypt instance. It accepts parameters including Uint8Array, CryptoKey, JWK, KeyObject, and CritOption.\nSOURCE: https://github.com/panva/jose/blob/main/docs/jwe/general/encrypt/interfaces/Recipient.md#2025-04-23_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\naddRecipient(...args): Recipient\n```\n\n----------------------------------------\n\nTITLE: Checking JWKSInvalid Error Using instanceof in JavaScript\nDESCRIPTION: This snippet shows how to check if a thrown error is an instance of the JWKSInvalid class using the instanceof operator. It assumes the jose library is imported and available in the current scope.\nSOURCE: https://github.com/panva/jose/blob/main/docs/util/errors/classes/JWKSInvalid.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nif (err instanceof jose.errors.JWKSInvalid) {\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Instance Type Checking in JavaScript\nDESCRIPTION: Example demonstrating how to verify JWSInvalid error using instanceof operator against the jose.errors.JWSInvalid class.\nSOURCE: https://github.com/panva/jose/blob/main/docs/util/errors/classes/JWSInvalid.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nif (err instanceof jose.errors.JWSInvalid) {\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Checking JWTInvalid Error Using instanceof in JavaScript\nDESCRIPTION: This snippet shows how to check if a thrown error is an instance of JWTInvalid using the instanceof operator. It compares the error object against the JWTInvalid class from the jose.errors namespace.\nSOURCE: https://github.com/panva/jose/blob/main/docs/util/errors/classes/JWTInvalid.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nif (err instanceof jose.errors.JWTInvalid) {\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Unprotected Headers with setUnprotectedHeader() in JOSE\nDESCRIPTION: Sets the JWE Per-Recipient Unprotected Header on the Recipient object. Takes a JWEHeaderParameters object as input and returns the Recipient instance for method chaining.\nSOURCE: https://github.com/panva/jose/blob/main/docs/jwe/general/encrypt/interfaces/Recipient.md#2025-04-23_snippet_3\n\nLANGUAGE: TypeScript\nCODE:\n```\nsetUnprotectedHeader(unprotectedHeader: JWEHeaderParameters): Recipient\n```\n\n----------------------------------------\n\nTITLE: Checking for JWKSMultipleMatchingKeys Error Using instanceof in JavaScript\nDESCRIPTION: This snippet shows how to check if a thrown error is an instance of JWKSMultipleMatchingKeys using the instanceof operator.\nSOURCE: https://github.com/panva/jose/blob/main/docs/util/errors/classes/JWKSMultipleMatchingKeys.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nif (err instanceof jose.errors.JWKSMultipleMatchingKeys) {\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: instanceof Error Checking in JavaScript\nDESCRIPTION: Example showing how to check for JWSSignatureVerificationFailed error using instanceof operator.\nSOURCE: https://github.com/panva/jose/blob/main/docs/util/errors/classes/JWSSignatureVerificationFailed.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nif (err instanceof jose.errors.JWSSignatureVerificationFailed) {\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Defining CryptoKey Type Alias in TypeScript\nDESCRIPTION: This snippet defines the CryptoKey type alias using TypeScript utility types. It extracts the object type from the return type of the crypto.subtle.generateKey function.\nSOURCE: https://github.com/panva/jose/blob/main/docs/types/type-aliases/CryptoKey.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nCryptoKey: Extract<Awaited<ReturnType<typeof crypto.subtle.generateKey>>, object>\n```\n\n----------------------------------------\n\nTITLE: Checking JWKSTimeout Error Using instanceof in JavaScript\nDESCRIPTION: This snippet shows how to check if a thrown error is a JWKSTimeout error using the instanceof operator with the jose.errors.JWKSTimeout class.\nSOURCE: https://github.com/panva/jose/blob/main/docs/util/errors/classes/JWKSTimeout.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nif (err instanceof jose.errors.JWKSTimeout) {\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Decoding Protected Header Example in JavaScript\nDESCRIPTION: Demonstrates how to decode the protected header from a JOSE token using the decodeProtectedHeader function. Function accepts a token in any JOSE serialization format and returns the decoded ProtectedHeaderParameters object.\nSOURCE: https://github.com/panva/jose/blob/main/docs/util/decode_protected_header/functions/decodeProtectedHeader.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst protectedHeader = jose.decodeProtectedHeader(token)\nconsole.log(protectedHeader)\n```\n\n----------------------------------------\n\nTITLE: Instance Checking for JOSENotSupported Error\nDESCRIPTION: Example demonstrating how to check for JOSENotSupported errors using instanceof operator.\nSOURCE: https://github.com/panva/jose/blob/main/docs/util/errors/classes/JOSENotSupported.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nif (err instanceof jose.errors.JOSENotSupported) {\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Checking JOSEAlgNotAllowed Error Using Error Code\nDESCRIPTION: Example showing how to check if an error is a JOSEAlgNotAllowed error by comparing the error code property.\nSOURCE: https://github.com/panva/jose/blob/main/docs/util/errors/classes/JOSEAlgNotAllowed.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nif (err.code === 'ERR_JOSE_ALG_NOT_ALLOWED') {\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Decoding Unsecured JWT in JavaScript\nDESCRIPTION: Example demonstrating how to decode an unsecured JWT and verify its issuer and audience claims.\nSOURCE: https://github.com/panva/jose/blob/main/docs/jwt/unsecured/classes/UnsecuredJWT.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst payload = jose.UnsecuredJWT.decode(unsecuredJwt, {\n  issuer: 'urn:example:issuer',\n  audience: 'urn:example:audience',\n})\n\nconsole.log(payload)\n```\n\n----------------------------------------\n\nTITLE: Checking for JOSE Error in JavaScript\nDESCRIPTION: This snippet demonstrates how to check if a thrown error is an instance of the JOSEError class. This is useful for error handling specific to JOSE operations.\nSOURCE: https://github.com/panva/jose/blob/main/docs/util/errors/classes/JOSEError.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nif (err instanceof jose.errors.JOSEError) {\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Error Code Validation in JavaScript\nDESCRIPTION: Example showing how to check for JWSInvalid error using the error code property.\nSOURCE: https://github.com/panva/jose/blob/main/docs/util/errors/classes/JWSInvalid.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nif (err.code === 'ERR_JWS_INVALID') {\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Markdown Error Class Listing\nDESCRIPTION: List of error classes available in the JOSE module, organized as markdown links to their respective documentation files.\nSOURCE: https://github.com/panva/jose/blob/main/docs/util/errors/README.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n- [JOSEAlgNotAllowed](classes/JOSEAlgNotAllowed.md)\n- [JOSEError](classes/JOSEError.md)\n- [JOSENotSupported](classes/JOSENotSupported.md)\n- [JWEDecryptionFailed](classes/JWEDecryptionFailed.md)\n- [JWEInvalid](classes/JWEInvalid.md)\n- [JWKInvalid](classes/JWKInvalid.md)\n- [JWKSInvalid](classes/JWKSInvalid.md)\n- [JWKSMultipleMatchingKeys](classes/JWKSMultipleMatchingKeys.md)\n- [JWKSNoMatchingKey](classes/JWKSNoMatchingKey.md)\n- [JWKSTimeout](classes/JWKSTimeout.md)\n- [JWSInvalid](classes/JWSInvalid.md)\n- [JWSSignatureVerificationFailed](classes/JWSSignatureVerificationFailed.md)\n- [JWTClaimValidationFailed](classes/JWTClaimValidationFailed.md)\n- [JWTExpired](classes/JWTExpired.md)\n- [JWTInvalid](classes/JWTInvalid.md)\n```\n\n----------------------------------------\n\nTITLE: Updating Import Statement for jwtVerify Function in JavaScript\nDESCRIPTION: This snippet shows how to update the import statement for the jwtVerify function from a subpath to the main 'jose' module. This change is part of the breaking changes in the library.\nSOURCE: https://github.com/panva/jose/blob/main/CHANGELOG.md#2025-04-23_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { jwtVerify } from 'jose'\n```\n\n----------------------------------------\n\nTITLE: Declaring flattenedDecrypt Function for JWE Decryption in Markdown\nDESCRIPTION: This snippet declares a function named flattenedDecrypt, which is likely responsible for performing the actual decryption of JWE in flattened JSON serialization format.\nSOURCE: https://github.com/panva/jose/blob/main/docs/jwe/flattened/decrypt/README.md#2025-04-23_snippet_1\n\nLANGUAGE: Markdown\nCODE:\n```\n- [flattenedDecrypt](functions/flattenedDecrypt.md)\n```\n\n----------------------------------------\n\nTITLE: Defining Interfaces and Functions for Asymmetric Key Generation in jose\nDESCRIPTION: This snippet outlines the structure of the documentation for asymmetric key generation in the jose library. It lists two interfaces (GenerateKeyPairOptions and GenerateKeyPairResult) and one function (generateKeyPair) that are documented in separate markdown files.\nSOURCE: https://github.com/panva/jose/blob/main/docs/key/generate_key_pair/README.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# key/generate_key_pair\n\nAsymmetric key generation\n\n## Index\n\n### Interfaces\n\n- [GenerateKeyPairOptions](interfaces/GenerateKeyPairOptions.md)\n- [GenerateKeyPairResult](interfaces/GenerateKeyPairResult.md)\n\n### Functions\n\n- [generateKeyPair](functions/generateKeyPair.md)\n```\n\n----------------------------------------\n\nTITLE: Updating Import Statement for calculateJwkThumbprint Function in JavaScript\nDESCRIPTION: This snippet demonstrates the updated import statement for the renamed calculateJwkThumbprint function (previously named calculateThumprint) from the main 'jose' module.\nSOURCE: https://github.com/panva/jose/blob/main/CHANGELOG.md#2025-04-23_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { calculateJwkThumbprint } from 'jose'\n```\n\n----------------------------------------\n\nTITLE: Defining JWS Compact Signing Module Structure in Markdown\nDESCRIPTION: This snippet outlines the structure of the jws/compact/sign module documentation. It includes a title, brief description, and a link to the CompactSign class documentation.\nSOURCE: https://github.com/panva/jose/blob/main/docs/jws/compact/sign/README.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# jws/compact/sign\n\nSigning JSON Web Signature (JWS) in Compact Serialization\n\n## Index\n\n### Classes\n\n- [CompactSign](classes/CompactSign.md)\n```\n\n----------------------------------------\n\nTITLE: Defining Unsecured JWT Module Structure in Markdown\nDESCRIPTION: This snippet outlines the structure of the unsecured JWT module documentation, including classes and interfaces. It uses markdown formatting to create a table of contents for the module.\nSOURCE: https://github.com/panva/jose/blob/main/docs/jwt/unsecured/README.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# jwt/unsecured\n\nUnsecured (unsigned & unencrypted) JSON Web Tokens (JWT)\n\n## Index\n\n### Classes\n\n- [UnsecuredJWT](classes/UnsecuredJWT.md)\n\n### Interfaces\n\n- [UnsecuredResult](interfaces/UnsecuredResult.md)\n```\n\n----------------------------------------\n\nTITLE: Checking JWEDecryptionFailed Error Using instanceof in JavaScript\nDESCRIPTION: This snippet shows how to check if a thrown error is an instance of the JWEDecryptionFailed error class using the instanceof operator.\nSOURCE: https://github.com/panva/jose/blob/main/docs/util/errors/classes/JWEDecryptionFailed.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nif (err instanceof jose.errors.JWEDecryptionFailed) {\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Import Statement for exportJWK Function in JavaScript\nDESCRIPTION: This snippet demonstrates the updated import statement for the exportJWK function, which replaces the deprecated 'jose/jwk/from_key_like' module.\nSOURCE: https://github.com/panva/jose/blob/main/CHANGELOG.md#2025-04-23_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { exportJWK } from 'jose'\n```\n\n----------------------------------------\n\nTITLE: JWKS Remote Module Index in Markdown\nDESCRIPTION: A markdown index listing the components available in the JWKS remote module, including functions for creating remote JWKS sets, interfaces for cache and options, type aliases for fetch implementation, and variables for custom fetch and cache functionality.\nSOURCE: https://github.com/panva/jose/blob/main/docs/jwks/remote/README.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# jwks/remote\n\nVerification using a JSON Web Key Set (JWKS) available on an HTTP(S) URL\n\n## Index\n\n### Functions\n\n- [createRemoteJWKSet](functions/createRemoteJWKSet.md)\n\n### Interfaces\n\n- [ExportedJWKSCache](interfaces/ExportedJWKSCache.md)\n- [RemoteJWKSetOptions](interfaces/RemoteJWKSetOptions.md)\n\n### Type Aliases\n\n- [FetchImplementation](type-aliases/FetchImplementation.md)\n- [JWKSCacheInput](type-aliases/JWKSCacheInput.md)\n\n### Variables\n\n- [customFetch](variables/customFetch.md)\n- [jwksCache](variables/jwksCache.md)\n```\n\n----------------------------------------\n\nTITLE: JWS General Signing Structure\nDESCRIPTION: Markdown structure showing the organization of JWS general signing documentation, including class and interface references.\nSOURCE: https://github.com/panva/jose/blob/main/docs/jws/general/sign/README.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# jws/general/sign\n\nSigning JSON Web Signature (JWS) in General JSON Serialization\n\n## Index\n\n### Classes\n\n- [GeneralSign](classes/GeneralSign.md)\n\n### Interfaces\n\n- [Signature](interfaces/Signature.md)\n```\n\n----------------------------------------\n\nTITLE: Linking to Code of Conduct in Markdown\nDESCRIPTION: This snippet demonstrates how to create a Markdown link to the project's Code of Conduct file. It uses a reference-style link, where the link text is defined separately from the URL.\nSOURCE: https://github.com/panva/jose/blob/main/CONTRIBUTING.md#2025-04-23_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n[coc]: https://github.com/panva/jose/blob/main/CODE_OF_CONDUCT.md\n```\n\n----------------------------------------\n\nTITLE: Documenting GenerateSecretOptions Interface in Markdown\nDESCRIPTION: This snippet defines a link to the documentation for the GenerateSecretOptions interface, which likely contains options for generating symmetric keys.\nSOURCE: https://github.com/panva/jose/blob/main/docs/key/generate_secret/README.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n- [GenerateSecretOptions](interfaces/GenerateSecretOptions.md)\n```\n\n----------------------------------------\n\nTITLE: Verifying Flattened JWS - Markdown Documentation\nDESCRIPTION: Documentation structure for JWS flattened verification components, including the FlattenedVerifyGetKey interface and flattenedVerify function documentation links.\nSOURCE: https://github.com/panva/jose/blob/main/docs/jws/flattened/verify/README.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# jws/flattened/verify\n\nVerifying JSON Web Signature (JWS) in Flattened JSON Serialization\n\n## Index\n\n### Interfaces\n\n- [FlattenedVerifyGetKey](interfaces/FlattenedVerifyGetKey.md)\n\n### Functions\n\n- [flattenedVerify](functions/flattenedVerify.md)\n```\n\n----------------------------------------\n\nTITLE: Checking JOSEAlgNotAllowed Error Using instanceof\nDESCRIPTION: Example demonstrating how to check if an error is a JOSEAlgNotAllowed error using the instanceof operator with the jose.errors namespace.\nSOURCE: https://github.com/panva/jose/blob/main/docs/util/errors/classes/JOSEAlgNotAllowed.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nif (err instanceof jose.errors.JOSEAlgNotAllowed) {\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Checking JWKSNoMatchingKey Error Using instanceof in JavaScript\nDESCRIPTION: This snippet shows how to check if a thrown error is a JWKSNoMatchingKey error using the instanceof operator.\nSOURCE: https://github.com/panva/jose/blob/main/docs/util/errors/classes/JWKSNoMatchingKey.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nif (err instanceof jose.errors.JWKSNoMatchingKey) {\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Protected Header Parameters Type Definition\nDESCRIPTION: TypeScript type alias definition for JOSE Protected Header parameters used in JWE and JWS operations.\nSOURCE: https://github.com/panva/jose/blob/main/docs/util/decode_protected_header/README.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntype ProtectedHeaderParameters\n```\n\n----------------------------------------\n\nTITLE: Using done Method in Signature Interface\nDESCRIPTION: Method that returns the enclosing GeneralSign instance, allowing to continue the operation chain from the parent object.\nSOURCE: https://github.com/panva/jose/blob/main/docs/jws/general/sign/interfaces/Signature.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n**done**(): [`GeneralSign`](../classes/GeneralSign.md)\n```\n\n----------------------------------------\n\nTITLE: Checking JWKSTimeout Error Using Error Code in JavaScript\nDESCRIPTION: This snippet demonstrates how to check if a thrown error is a JWKSTimeout error using the stable error code 'ERR_JWKS_TIMEOUT'.\nSOURCE: https://github.com/panva/jose/blob/main/docs/util/errors/classes/JWKSTimeout.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nif (err.code === 'ERR_JWKS_TIMEOUT') {\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Checking JWKInvalid Error Using Error Code in JavaScript\nDESCRIPTION: This snippet demonstrates how to check if a thrown error is an instance of JWKInvalid by comparing the error code. It uses the stable error code 'ERR_JWK_INVALID' for identification.\nSOURCE: https://github.com/panva/jose/blob/main/docs/util/errors/classes/JWKInvalid.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nif (err.code === 'ERR_JWK_INVALID') {\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Exporting Public and Private Keys to JWK Format with Jose\nDESCRIPTION: This example demonstrates how to export both private and public cryptographic keys to JWK (JSON Web Key) format using the jose.exportJWK function. The resulting JWK objects are then logged to the console.\nSOURCE: https://github.com/panva/jose/blob/main/docs/key/export/functions/exportJWK.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst privateJwk = await jose.exportJWK(privateKey)\nconst publicJwk = await jose.exportJWK(publicKey)\n\nconsole.log(privateJwk)\nconsole.log(publicJwk)\n```\n\n----------------------------------------\n\nTITLE: Key Export Functions Index in Markdown\nDESCRIPTION: Index listing of available cryptographic key export functions including exportJWK, exportPKCS8, and exportSPKI with links to their respective documentation.\nSOURCE: https://github.com/panva/jose/blob/main/docs/key/export/README.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# key/export\n\nCryptographic key export functions\n\n## Index\n\n### Functions\n\n- [exportJWK](functions/exportJWK.md)\n- [exportPKCS8](functions/exportPKCS8.md)\n- [exportSPKI](functions/exportSPKI.md)\n```\n\n----------------------------------------\n\nTITLE: Defining GenerateKeyPairResult Interface in TypeScript\nDESCRIPTION: TypeScript interface definition for the result of asymmetric key pair generation. Contains two properties: privateKey and publicKey, both of type CryptoKey from the Web Crypto API.\nSOURCE: https://github.com/panva/jose/blob/main/docs/key/generate_key_pair/interfaces/GenerateKeyPairResult.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface GenerateKeyPairResult {\n  privateKey: CryptoKey;\n  publicKey: CryptoKey;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining UnsecuredResult Interface in TypeScript\nDESCRIPTION: This snippet defines the UnsecuredResult interface with a generic type parameter PayloadType. It includes two properties: header of type JWSHeaderParameters, and payload of type PayloadType & JWTPayload.\nSOURCE: https://github.com/panva/jose/blob/main/docs/jwt/unsecured/interfaces/UnsecuredResult.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface UnsecuredResult<PayloadType = JWTPayload> {\n  header: JWSHeaderParameters;\n  payload: PayloadType & JWTPayload;\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Import Statement for importJWK Function in JavaScript\nDESCRIPTION: This snippet shows the new import statement for the importJWK function, which replaces the deprecated 'jose/jwk/parse' module.\nSOURCE: https://github.com/panva/jose/blob/main/CHANGELOG.md#2025-04-23_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { importJWK } from 'jose'\n```"
  }
]