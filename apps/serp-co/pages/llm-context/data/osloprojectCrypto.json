[
  {
    "owner": "oslo-project",
    "repo": "crypto",
    "content": "TITLE: Installing @oslojs/crypto Package with npm\nDESCRIPTION: Command to install the @oslojs/crypto library via npm package manager. This installs the package into your project's dependencies.\nSOURCE: https://github.com/oslo-project/crypto/blob/main/docs/pages/index.md#2025-04-12_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm i @oslojs/crypto\n```\n\n----------------------------------------\n\nTITLE: Verifying ECDSA Signatures with Oslo\nDESCRIPTION: Demonstrates how to verify an ECDSA signature using the Oslo library. The code instantiates a public key and signature, hashes input data with SHA-256, and verifies the signature against the hash.\nSOURCE: https://github.com/oslo-project/crypto/blob/main/docs/pages/examples/ecdsa.md#2025-04-12_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ECDSAPublicKey, ECDSASignature, p256, verifyECDSASignature } from \"@oslojs/crypto/ecdsa\";\nimport { sha256 } from \"@oslojs/crypto/sha2\";\n\nconst publicKey = new ECDSAPublicKey(p256, x, y);\nconst signature = new ECDSASignature(r, s);\nconst data = new TextEncoder().encode(\"hello world\");\nconst hash = sha256(data);\n\nconst valid = verifyECDSASignature(publicKey, hash, signature);\n```\n\n----------------------------------------\n\nTITLE: Computing Hash Digests with One-Line API in TypeScript\nDESCRIPTION: This snippet demonstrates how to import different hash functions and compute a hash digest in a single operation. It supports various algorithms including SHA-1, SHA-2 series (SHA-224, SHA-256, SHA-384, SHA-512, SHA-512/224, SHA-512/256), and SHA-3 series (SHA3-224, SHA3-256, SHA3-384, SHA3-512, SHAKE128, SHAKE256).\nSOURCE: https://github.com/oslo-project/crypto/blob/main/docs/pages/examples/sha.md#2025-04-12_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { sha1 } from \"@oslojs/crypto/sha1\";\nimport { sha224, sha256, sha384, sha512, sha512_224, sha512_256 } from \"@oslojs/crypto/sha2\";\nimport { sha3_224, sha3_256, sha3_384, sha3_512, shake128, shake256 } from \"@oslojs/crypto/sha3\";\n\nconst hash = sha256(message);\n```\n\n----------------------------------------\n\nTITLE: Generating Random Integers in TypeScript with @oslojs/crypto\nDESCRIPTION: Demonstrates how to generate random integers within a specified range using the @oslojs/crypto package. The function generateRandomInteger returns a bigint, while generateRandomIntegerNumber returns a number.\nSOURCE: https://github.com/oslo-project/crypto/blob/main/docs/pages/examples/random-values.md#2025-04-12_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { generateRandomInteger, generateRandomIntegerNumber } from \"@oslojs/crypto/random\";\n\n// random number from 0 to 9\nconst num: bigint = generateRandomInteger(random, 10n);\nconst num: number = generateRandomIntegerNumber(random, 10);\n```\n\n----------------------------------------\n\nTITLE: Verifying RSASSA-PKCS1-v1_5 Signatures in TypeScript\nDESCRIPTION: Demonstrates how to verify an RSA signature using PKCS1-v1_5 padding scheme. The example shows creating a public key, hashing data with SHA-256, and verifying the signature.\nSOURCE: https://github.com/oslo-project/crypto/blob/main/docs/pages/examples/rsa.md#2025-04-12_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n\tRSAPublicKey,\n\tverifyRSASSAPKCS1v15Signature,\n\tSHA256ObjectIdentifier\n} from \"@oslojs/crypto/rsa\";\nimport { sha256 } from \"@oslojs/crypto/sha2\";\n\nconst publicKey = new RSAPublicKey(n, e);\nconst data = new TextEncoder().encode(\"hello world\");\nconst hash = sha256(data);\n\nconst valid = verifyRSASSAPKCS1v15Signature(publicKey, SHA256ObjectIdentifier, hash, signature);\n```\n\n----------------------------------------\n\nTITLE: Installing Oslo Crypto Library via NPM\nDESCRIPTION: Command to install the @oslojs/crypto library via NPM package manager. This is the recommended way to add the library to your JavaScript or TypeScript project.\nSOURCE: https://github.com/oslo-project/crypto/blob/main/README.md#2025-04-12_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm i @oslojs/crypto\n```\n\n----------------------------------------\n\nTITLE: Implementing RandomReader Interface with Web Crypto API\nDESCRIPTION: Example implementation of the RandomReader interface using the Web Crypto API's getRandomValues() method to generate cryptographically secure random bytes.\nSOURCE: https://github.com/oslo-project/crypto/blob/main/docs/pages/reference/random/RandomReader.md#2025-04-12_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { RandomReader } from \"@oslojs/crypto/random\";\n\nconst random: RandomReader = {\n\tread(bytes) {\n\t\tcrypto.getRandomValues(bytes);\n\t}\n};\n```\n\n----------------------------------------\n\nTITLE: Computing Hash Digests with Multi-Step API in TypeScript\nDESCRIPTION: This snippet demonstrates an alternative API for computing hash digests in multiple steps. It allows updating the hash state with multiple data chunks before finalizing the digest. This is useful for streaming or processing large data that cannot be held in memory at once.\nSOURCE: https://github.com/oslo-project/crypto/blob/main/docs/pages/examples/sha.md#2025-04-12_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { SHA1 } from \"@oslojs/crypto/sha1\";\nimport { SHA224, SHA256, SHA384, SHA512, SHA512_224, SHA512_256 } from \"@oslojs/crypto/sha2\";\nimport { SHA3_224, SHA3_256, SHA3_384, SHA3_512, SHAKE128, SHAKE256 } from \"@oslojs/crypto/sha3\";\n\nconst hash = new SHA256();\nhash.update(data1);\nhash.update(data2);\nconst digest = hash.digest();\n```\n\n----------------------------------------\n\nTITLE: Encoding ECDSA Signatures in IEEE P1363 Format\nDESCRIPTION: Demonstrates how to encode an ECDSA signature in IEEE P1363 format (\"raw\" format), which simply concatenates the r and s values.\nSOURCE: https://github.com/oslo-project/crypto/blob/main/docs/pages/examples/ecdsa.md#2025-04-12_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ECDSASignature, p256 } from \"@oslojs/crypto/ecdsa\";\n\nconst signature = new ECDSASignature(r, s);\nconst raw = signature.encodeIEEEP1363(p256);\n```\n\n----------------------------------------\n\nTITLE: Generating Random Strings in TypeScript with @oslojs/crypto\nDESCRIPTION: Shows how to create random strings with a predefined character set using the generateRandomString function from @oslojs/crypto/random. This function requires a RandomReader implementation and allows specifying the alphabet and length.\nSOURCE: https://github.com/oslo-project/crypto/blob/main/docs/pages/examples/random-values.md#2025-04-12_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { generateRandomString } from \"@oslojs/crypto/random\";\n\n// 10-characters long string consisting of upper case letters\nconst alphabet = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\ngenerateRandomString(random, alphabet, 10);\n```\n\n----------------------------------------\n\nTITLE: Implementing RandomReader with Web Crypto API\nDESCRIPTION: Implementation of the RandomReader interface using the global Web Crypto API, which is available in modern JavaScript runtimes including Node.js 20+, Bun, Deno, and Cloudflare Workers.\nSOURCE: https://github.com/oslo-project/crypto/blob/main/docs/pages/examples/random-values.md#2025-04-12_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { RandomReader } from \"@oslojs/crypto/random\";\n\nconst random: RandomReader = {\n\tread(bytes: Uint8Array): void {\n\t\tcrypto.getRandomValues(bytes);\n\t}\n};\n```\n\n----------------------------------------\n\nTITLE: Decoding SEC 1 ECDSA Public Keys\nDESCRIPTION: Demonstrates how to decode an SEC 1-encoded ECDSA public key. The function handles both compressed and uncompressed formats and throws an exception for invalid keys.\nSOURCE: https://github.com/oslo-project/crypto/blob/main/docs/pages/examples/ecdsa.md#2025-04-12_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { decodeSEC1ECDSAPublicKey } from \"@oslojs/crypto/ecdsa\";\n\ntry {\n\tconst publicKey = decodeSEC1ECDSAPublicKey(p256, sec1);\n} catch {\n\t// Invalid key\n}\n```\n\n----------------------------------------\n\nTITLE: Defining RandomReader Interface in TypeScript\nDESCRIPTION: TypeScript interface definition for a RandomReader that provides cryptographically secure random bytes. The interface defines a single method read() that takes a Uint8Array and fills it with random values.\nSOURCE: https://github.com/oslo-project/crypto/blob/main/docs/pages/reference/random/RandomReader.md#2025-04-12_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface RandomReader {\n\tread(bytes: Uint8Array): void;\n}\n```\n\n----------------------------------------\n\nTITLE: Example Usage of generateRandomInteger Function\nDESCRIPTION: Demonstrates how to import and use the generateRandomInteger function with a custom RandomReader implementation using crypto.getRandomValues().\nSOURCE: https://github.com/oslo-project/crypto/blob/main/docs/pages/reference/random/generateRandomInteger.md#2025-04-12_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { generateRandomInteger } from \"@oslojs/crypto/random\";\n\nimport type { RandomReader } from \"@oslojs/crypto/random\";\n\nconst random: RandomReader = {\n\tread(bytes) {\n\t\tcrypto.getRandomValues(bytes);\n\t}\n};\n\n// random number from 0 to 9\nconst i = generateRandomInteger(random, 10n);\n```\n\n----------------------------------------\n\nTITLE: Verifying RSASSA-PSS Signatures in TypeScript\nDESCRIPTION: Shows how to verify an RSA signature using PSS padding scheme. Includes setup of public key, data hashing, and signature verification with specified MGF1 function and salt length.\nSOURCE: https://github.com/oslo-project/crypto/blob/main/docs/pages/examples/rsa.md#2025-04-12_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { RSAPublicKey, verifyRSASSASignature } from \"@oslojs/crypto/rsa\";\nimport { sha256, SHA256 } from \"@oslojs/crypto/sha2\";\n\nconst publicKey = new RSAPublicKey(n, e);\nconst data = new TextEncoder().encode(\"hello world\");\nconst hash = sha256(data);\n\nconst valid = verifyRSASSASignature(publicKey, SHA256, SHA256, 32, hash, signature);\n```\n\n----------------------------------------\n\nTITLE: Using decodePKIXECDSAPublicKey Function in TypeScript\nDESCRIPTION: Example usage of the decodePKIXECDSAPublicKey function, importing necessary components from the @oslojs/crypto/ecdsa module. It demonstrates decoding a public key and checking if it's on the P-256 curve.\nSOURCE: https://github.com/oslo-project/crypto/blob/main/docs/pages/reference/ecdsa/decodePKIXECDSAPublicKey.md#2025-04-12_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { decodePKIXECDSAPublicKey, p256, p384 } from \"@oslojs/crypto/ecdsa\";\n\nconst publicKey = decodePKIXECDSAPublicKey(der, [p256, p384]);\nif (publicKey.isCurve(p256)) {\n\t// ...\n}\n```\n\n----------------------------------------\n\nTITLE: Using verifyECDSA to Validate a Signature in TypeScript\nDESCRIPTION: Example demonstrating how to use the verifyECDSA function to validate an ECDSA signature. This imports necessary components from the crypto library, creates a hash using SHA-256, initializes an ECDSAPublicKey with the p256 curve, and verifies a signature.\nSOURCE: https://github.com/oslo-project/crypto/blob/main/docs/pages/reference/ecdsa/verifyECDSASignature.md#2025-04-12_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { verifyECDSA, p256, ECDSAPublicKey } from \"@oslojs/crypto/ecdsa\";\nimport { sha256 } from \"@oslojs/crypto/sha2\";\n\nconst hash = sha256(new TextEncoder().encode(\"hello\"));\nconst publicKey = new ECDSAPublicKey(p256, x, y);\nconst valid = verifyECDSA(publicKey, hash, r, s);\n```\n\n----------------------------------------\n\nTITLE: Using HMAC Function with SHA256 in TypeScript\nDESCRIPTION: Demonstrates how to use the hmac() function with the SHA256 algorithm from the Oslo crypto library to generate a hash.\nSOURCE: https://github.com/oslo-project/crypto/blob/main/docs/pages/reference/hmac/hmac.md#2025-04-12_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { hmac } from \"@oslojs/crypto/hmac\";\nimport { SHA256 } from \"@oslojs/crypto/sha2\";\n\nconst hash = hmac(SHA256, key, message);\n```\n\n----------------------------------------\n\nTITLE: Defining Hash Interface for Cryptographic Operations in TypeScript\nDESCRIPTION: This code snippet defines the Hash interface used for cryptographic hashing operations. It specifies the structure with blockSize and size properties, along with update and digest methods for hash manipulation.\nSOURCE: https://github.com/oslo-project/crypto/blob/main/docs/pages/reference/hash/Hash.md#2025-04-12_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface Hash {\n\tblockSize: number;\n\tsize: number;\n\n\tupdate: (data: Uint8Array) => void;\n\tdigest: () => Uint8Array;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining ECDSA Signature Verification Function in TypeScript\nDESCRIPTION: Function definition for verifyECDSA that takes a public key, hash, and signature as parameters and returns a boolean indicating whether the signature is valid. The hash should match the curve size (e.g., SHA-256 for P-256, SHA-512 for SHA-521).\nSOURCE: https://github.com/oslo-project/crypto/blob/main/docs/pages/reference/ecdsa/verifyECDSASignature.md#2025-04-12_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n//$ ECDSAPublicKey=/reference/ecdsa/ECDSAPublicKey\n//$ ECDSASignature=/reference/ecdsa/ECDSASignature\nfunction verifyECDSA(\n\tpublicKey: $$ECDSAPublicKey,\n\thash: Uint8Array,\n\tsignature: $$ECDSASignature\n): boolean;\n```\n\n----------------------------------------\n\nTITLE: Decoding SEC 1 Public Key in TypeScript\nDESCRIPTION: Function that decodes SEC 1 encoded public key points, supporting both compressed and uncompressed variants. It takes a curve parameter of type ECDSANamedCurve and a bytes parameter of type Uint8Array, returning an ECDSAPublicKey. Throws an error if the encoded bytes are invalid.\nSOURCE: https://github.com/oslo-project/crypto/blob/main/docs/pages/reference/ecdsa/decodeSEC1PublicKey.md#2025-04-12_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n//$ ECDSANamedCurve=/reference/ecdsa/ECDSANamedCurve\n//$ ECDSAPublicKey=/reference/ecdsa/ECDSAPublicKey\nfunction decodeSEC1PublicKey(curve: $$ECDSANamedCurve, bytes: Uint8Array): $$ECDSAPublicKey;\n```\n\n----------------------------------------\n\nTITLE: Decoding PKIX ECDSA Public Keys with Single Curve\nDESCRIPTION: Demonstrates how to decode a PKIX-encoded ECDSA public key with a single expected curve. The function can handle both compressed and uncompressed formats.\nSOURCE: https://github.com/oslo-project/crypto/blob/main/docs/pages/examples/ecdsa.md#2025-04-12_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { decodePKIXECDSAPublicKey, p256 } from \"@oslojs/crypto/ecdsa\";\n\ntry {\n\t// Can be compressed or uncompressed.\n\tconst publicKey = decodePKIXECDSAPublicKey(der, [p256]);\n} catch {\n\t// Invalid key\n}\n```\n\n----------------------------------------\n\nTITLE: Defining SHA-256 Hashing Function in TypeScript\nDESCRIPTION: This code snippet defines the sha256() function, which takes a Uint8Array as input and returns a Uint8Array containing the SHA-256 hash. The function performs synchronous hashing according to the NIST FIPS 180-4 specification.\nSOURCE: https://github.com/oslo-project/crypto/blob/main/docs/pages/reference/sha2/sha256.md#2025-04-12_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction sha256(data: Uint8Array): Uint8Array;\n```\n\n----------------------------------------\n\nTITLE: Encoding ECDSA Signature to IEEE P1363 Format in TypeScript\nDESCRIPTION: Function that encodes an ECDSA signature into r | s concatenation as specified in IEEE P1363 standard. It accepts an ECDSANamedCurve parameter and may throw an exception if the (r, s) values exceed the curve's size limitations.\nSOURCE: https://github.com/oslo-project/crypto/blob/main/docs/pages/reference/ecdsa/ECDSASignature/encodeIEEEP1363.md#2025-04-12_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n//$ ECDSANamedCurve=/reference/ecdsa/ECDSANamedCurve\nfunction encodeIEEEP1363(curve: $$ECDSANamedCurve): Uint8Array;\n```\n\n----------------------------------------\n\nTITLE: Defining HMAC Function Signature in TypeScript\nDESCRIPTION: Defines the function signature for the hmac() function, which takes a hash algorithm, key, and message as inputs and returns a Uint8Array hash.\nSOURCE: https://github.com/oslo-project/crypto/blob/main/docs/pages/reference/hmac/hmac.md#2025-04-12_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction hmac(Algorithm: hash.$$HashAlgorithm, key: Uint8Array, message: Uint8Array): Uint8Array;\n```\n\n----------------------------------------\n\nTITLE: Encoding ECDSA Public Key to SEC 1 Compressed Format in TypeScript\nDESCRIPTION: Method signature for encoding an ECDSA public key into the SEC 1 compressed format. The method requires no parameters and returns a Uint8Array containing the compressed key data.\nSOURCE: https://github.com/oslo-project/crypto/blob/main/docs/pages/reference/ecdsa/ECDSAPublicKey/encodeSEC1Compressed.md#2025-04-12_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction encodeSEC1Compressed(): Uint8Array;\n```\n\n----------------------------------------\n\nTITLE: Defining generateRandomInteger Function Type in TypeScript\nDESCRIPTION: Function signature definition showing the parameters and return type for generating random integers. Takes a RandomReader interface and maximum value as parameters.\nSOURCE: https://github.com/oslo-project/crypto/blob/main/docs/pages/reference/random/generateRandomInteger.md#2025-04-12_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction generateRandomInteger(random: RandomReader, max: bigint): bigint;\n```\n\n----------------------------------------\n\nTITLE: Defining the generateRandomIntegerNumber Function in TypeScript\nDESCRIPTION: Function signature for generateRandomIntegerNumber which takes a RandomReader interface and a maximum value to generate a random integer between 0 (inclusive) and max (exclusive).\nSOURCE: https://github.com/oslo-project/crypto/blob/main/docs/pages/reference/random/generateRandomIntegerNumber.md#2025-04-12_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n//$ RandomReader=/reference/random/RandomReader\nfunction generateRandomIntegerNumber(random: $$RandomReader, max: number): number;\n```\n\n----------------------------------------\n\nTITLE: Defining constantTimeEqual Function in TypeScript\nDESCRIPTION: Function signature for comparing two Uint8Arrays in constant time to help prevent timing attacks. Takes two Uint8Array parameters (a and b) and returns a boolean indicating whether they are equal.\nSOURCE: https://github.com/oslo-project/crypto/blob/main/docs/pages/reference/subtle/constantTimeEqual.md#2025-04-12_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction constantTimeEqual(a: Uint8Array, b: Uint8Array): boolean;\n```\n\n----------------------------------------\n\nTITLE: Encoding ECDSA Signature to PKIX Format in TypeScript\nDESCRIPTION: Function signature for encoding an ECDSA signature to ASN.1 DER format according to PKIX specification (RFC 5480). Returns the encoded signature as a Uint8Array.\nSOURCE: https://github.com/oslo-project/crypto/blob/main/docs/pages/reference/ecdsa/ECDSASignature/encodePKIX.md#2025-04-12_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction encodePKIX(): Uint8Array;\n```\n\n----------------------------------------\n\nTITLE: Defining generateRandomString Function in TypeScript\nDESCRIPTION: The function signature for generateRandomString which accepts a RandomReader, alphabet string, and length parameter to generate a cryptographically strong random string.\nSOURCE: https://github.com/oslo-project/crypto/blob/main/docs/pages/reference/random/generateRandomString.md#2025-04-12_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n//$ RandomReader=/reference/random/RandomReader\nfunction generateRandomString(random: $$RandomReader, alphabet: string, length: number): string;\n```\n\n----------------------------------------\n\nTITLE: Decoding PKCS#1 RSA Public Key in TypeScript\nDESCRIPTION: Function signature for decoding a PKCS#1 ASN.1 DER encoded RSA public key. Takes a Uint8Array input containing the encoded key and returns an RSAPublicKey object. Throws an Error if the public key is invalid.\nSOURCE: https://github.com/oslo-project/crypto/blob/main/docs/pages/reference/rsa/decodePKCS1RSAPublicKey.md#2025-04-12_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n//$ RSAPublicKey=/reference/rsa/RSAPublicKey\nfunction decodePKCS1RSAPublicKey(pkcs1: Uint8Array): $$RSAPublicKey;\n```\n\n----------------------------------------\n\nTITLE: Decoding PKIX ECDSA Public Keys with Multiple Curves\nDESCRIPTION: Shows how to decode a PKIX-encoded ECDSA public key when multiple curves are acceptable. The code demonstrates checking which curve the decoded key uses.\nSOURCE: https://github.com/oslo-project/crypto/blob/main/docs/pages/examples/ecdsa.md#2025-04-12_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { decodePKIXECDSAPublicKey, p256, p384 } from \"@oslojs/crypto/ecdsa\";\n\ntry {\n\t// Can be compressed or uncompressed.\n\tconst publicKey = decodePKIXECDSAPublicKey(der, [p256, p384]);\n\tif (publicKey.isCurve(p256)) {\n\t\t// ...\n\t}\n} catch {\n\t// Invalid key\n}\n```\n\n----------------------------------------\n\nTITLE: Defining decodePKIXECDSAPublicKey Function in TypeScript\nDESCRIPTION: Function signature for decodePKIXECDSAPublicKey that takes a Uint8Array of DER encoded data and an array of allowed ECDSA named curves, returning an ECDSAPublicKey object. It throws an error for invalid public keys or unsupported curves.\nSOURCE: https://github.com/oslo-project/crypto/blob/main/docs/pages/reference/ecdsa/decodePKIXECDSAPublicKey.md#2025-04-12_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction decodePKIXECDSAPublicKey(der: Uint8Array, curves: ECDSANamedCurve[]): ECDSAPublicKey;\n```\n\n----------------------------------------\n\nTITLE: Implementing SHA3-256 Hash Function in TypeScript\nDESCRIPTION: Function signature for SHA3-256 hash computation that takes a Uint8Array input and returns a Uint8Array containing the hash value. Implements the hash algorithm as specified in NIST FIPS 202.\nSOURCE: https://github.com/oslo-project/crypto/blob/main/docs/pages/reference/sha3/sha3_256.md#2025-04-12_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction sha3_256(data: Uint8Array): Uint8Array;\n```\n\n----------------------------------------\n\nTITLE: Decoding RSA Public Key from PKCS#1 Format\nDESCRIPTION: Shows how to decode an RSA public key from PKCS#1 ASN.1 DER format with error handling.\nSOURCE: https://github.com/oslo-project/crypto/blob/main/docs/pages/examples/rsa.md#2025-04-12_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { decodePKCS1RSAPublicKey } from \"@oslojs/crypto/ecdsa\";\n\ntry {\n\tconst publicKey = decodePKCS1RSAPublicKey(pkcs1);\n} catch {\n\t// Invalid key\n}\n```\n\n----------------------------------------\n\nTITLE: Decoding PKCS1 RSA Public Key in TypeScript\nDESCRIPTION: Function signature for decodePKCS1RSAPublicKey that takes a Uint8Array containing the PKCS1 encoded key data and returns an RSAPublicKey object. This function processes DER encoded ASN.1 SubjectPublicKeyInfo structures.\nSOURCE: https://github.com/oslo-project/crypto/blob/main/docs/pages/reference/rsa/decodePKIXRSAPublicKey.md#2025-04-12_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n//$ RSAPublicKey=/reference/rsa/RSAPublicKey\nfunction decodePKCS1RSAPublicKey(pkcs1: Uint8Array): $$RSAPublicKey;\n```\n\n----------------------------------------\n\nTITLE: Encoding RSA Public Key in PKIX Format\nDESCRIPTION: Demonstrates encoding an RSA public key in PKIX SubjectPublicKeyInfo structure format.\nSOURCE: https://github.com/oslo-project/crypto/blob/main/docs/pages/examples/rsa.md#2025-04-12_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { RSAPublicKey } from \"@oslojs/crypto/rsa\";\n\nconst publicKey = new RSAPublicKey(n, e);\nconst pkix = publicKey.encodePKIX();\n```\n\n----------------------------------------\n\nTITLE: Defining verifyRSASSAPSSSignature Function in TypeScript\nDESCRIPTION: This snippet defines the verifyRSASSAPSSSignature function, which takes a public key, message hash algorithm, MGF1 hash algorithm, salt length, hashed message, and signature as inputs. It returns a boolean indicating whether the signature is valid.\nSOURCE: https://github.com/oslo-project/crypto/blob/main/docs/pages/reference/rsa/verifyRSASSAPSSSignature.md#2025-04-12_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction verifyRSASSAPSSSignature(\n\tpublicKey: $$RSAPublicKey,\n\tMessageHashAlgorithm: $$HashAlgorithm,\n\tMGF1HashAlgorithm: $$HashAlgorithm,\n\tsaltLength: number,\n\thashed: Uint8Array,\n\tsignature: Uint8Array\n): boolean;\n```\n\n----------------------------------------\n\nTITLE: Implementing SHAKE128 Hash Function in TypeScript\nDESCRIPTION: Function signature for SHAKE128 hashing that takes a size parameter for digest length and input data as a Uint8Array. Returns a Uint8Array containing the hash digest of specified length.\nSOURCE: https://github.com/oslo-project/crypto/blob/main/docs/pages/reference/sha3/shake128.md#2025-04-12_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction shake128(size: number, data: Uint8Array): Uint8Array;\n```\n\n----------------------------------------\n\nTITLE: Decoding RSA Public Key from PKIX Format\nDESCRIPTION: Shows how to decode an RSA public key from PKIX SubjectPublicKeyInfo format with error handling.\nSOURCE: https://github.com/oslo-project/crypto/blob/main/docs/pages/examples/rsa.md#2025-04-12_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { decodePKIXRSAPublicKey } from \"@oslojs/crypto/ecdsa\";\n\ntry {\n\tconst publicKey = decodePKIXRSAPublicKey(pkix);\n} catch {\n\t// Invalid key\n}\n```\n\n----------------------------------------\n\nTITLE: Defining RSASSA-PKCS1-v1_5 Signature Verification Function in TypeScript\nDESCRIPTION: This function verifies an RSASSA-PKCS1-v1_5 signature. It takes an RSA public key, hash object identifier, hashed message, and original message as inputs. The function returns a boolean indicating whether the signature is valid.\nSOURCE: https://github.com/oslo-project/crypto/blob/main/docs/pages/reference/rsa/verifyRSASSAPKCS1v15Signature.md#2025-04-12_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n//$ RSAPublicKey=/reference/rsa/RSAPublicKey\nfunction verifyRSASSAPKCS1v15Signature(\n\tpublicKey: $$RSAPublicKey,\n\thashObjectIdentifier: string,\n\thashed: Uint8Array,\n\tmessage: Uint8Array\n): boolean;\n```\n\n----------------------------------------\n\nTITLE: Defining SHA-1 Hash Function in TypeScript\nDESCRIPTION: Function signature for the SHA-1 hashing algorithm that takes a Uint8Array input and returns a Uint8Array containing the hash. This implementation follows the NIST FIPS 180-4 specification for synchronous data hashing.\nSOURCE: https://github.com/oslo-project/crypto/blob/main/docs/pages/reference/sha1/sha1.md#2025-04-12_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction sha1(data: Uint8Array): Uint8Array;\n```\n\n----------------------------------------\n\nTITLE: Decoding IEEE P1363 ECDSA Signatures\nDESCRIPTION: Shows how to decode an IEEE P1363-encoded ECDSA signature, which requires the curve information to determine the proper length of r and s values.\nSOURCE: https://github.com/oslo-project/crypto/blob/main/docs/pages/examples/ecdsa.md#2025-04-12_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { decodeIEEEP1363ECDSASignature, p256 } from \"@oslojs/crypto/ecdsa\";\n\ntry {\n\tconst signature = decodeIEEEP1363ECDSASignature(p256, raw);\n} catch {\n\t// Invalid signature\n}\n```\n\n----------------------------------------\n\nTITLE: Defining SHAKE256 Hashing Function in TypeScript\nDESCRIPTION: This snippet defines the shake256() function, which takes a size parameter for the digest length and a Uint8Array of data to hash. It returns a Uint8Array containing the SHAKE256 hash digest.\nSOURCE: https://github.com/oslo-project/crypto/blob/main/docs/pages/reference/sha3/shake256.md#2025-04-12_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction shake256(size: number, data: Uint8Array): Uint8Array;\n```\n\n----------------------------------------\n\nTITLE: Defining SHA-512 Hash Function in TypeScript\nDESCRIPTION: Type definition for a synchronous SHA-512 hash function that takes a Uint8Array input and returns a Uint8Array containing the hash result. Implements the hash algorithm according to NIST FIPS 180-4 standard.\nSOURCE: https://github.com/oslo-project/crypto/blob/main/docs/pages/reference/sha2/sha512.md#2025-04-12_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction sha512(data: Uint8Array): Uint8Array;\n```\n\n----------------------------------------\n\nTITLE: Encoding ECDSA Signatures in PKIX Format\nDESCRIPTION: Demonstrates how to encode an ECDSA signature in PKIX format, which uses ASN.1 DER encoding to represent the r and s values as a sequence.\nSOURCE: https://github.com/oslo-project/crypto/blob/main/docs/pages/examples/ecdsa.md#2025-04-12_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ECDSASignature } from \"@oslojs/crypto/ecdsa\";\n\nconst signature = new ECDSASignature(r, s);\nconst der = signature.encodePKIX();\n```\n\n----------------------------------------\n\nTITLE: SHA-384 Hashing Function Signature in TypeScript\nDESCRIPTION: Function signature for the sha384() method that synchronously hashes data using the SHA-384 algorithm. It takes a Uint8Array input and returns the resulting SHA-384 hash as a Uint8Array (48 bytes).\nSOURCE: https://github.com/oslo-project/crypto/blob/main/docs/pages/reference/sha2/sha384.md#2025-04-12_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction sha384(data: Uint8Array): Uint8Array;\n```\n\n----------------------------------------\n\nTITLE: SHA3-512 Hash Function Definition in TypeScript\nDESCRIPTION: Function definition for sha3_512() that synchronously hashes data using the SHA3-512 algorithm as specified in NIST FIPS 202. The function takes a Uint8Array as input and returns a Uint8Array containing the hash value.\nSOURCE: https://github.com/oslo-project/crypto/blob/main/docs/pages/reference/sha3/sha3_512.md#2025-04-12_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction sha3_512(data: Uint8Array): Uint8Array;\n```\n\n----------------------------------------\n\nTITLE: Decoding PKIX ECDSA Signatures\nDESCRIPTION: Shows how to decode a PKIX (ASN.1 DER) encoded ECDSA signature, which contains r and s values as a sequence. The function throws an exception for invalid signatures.\nSOURCE: https://github.com/oslo-project/crypto/blob/main/docs/pages/examples/ecdsa.md#2025-04-12_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport { decodePKIXECDSASignature } from \"@oslojs/crypto/ecdsa\";\n\ntry {\n\tconst signature = decodePKIXECDSASignature(der);\n} catch {\n\t// Invalid signature\n}\n```\n\n----------------------------------------\n\nTITLE: Defining SHA3-384 Hashing Function in TypeScript\nDESCRIPTION: This snippet defines the sha3_384() function signature. It takes a Uint8Array as input data and returns a Uint8Array containing the SHA3-384 hash. The function performs synchronous hashing as specified in NIST FIPS 202.\nSOURCE: https://github.com/oslo-project/crypto/blob/main/docs/pages/reference/sha3/sha3_384.md#2025-04-12_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction sha3_384(data: Uint8Array): Uint8Array;\n```\n\n----------------------------------------\n\nTITLE: Defining RSAPublicKey.encodePKCS1() Method in TypeScript\nDESCRIPTION: Function signature for the encodePKCS1() method that encodes an RSA public key in ASN.1 DER format according to RFC 8017 specifications. The method returns the encoded key as a Uint8Array.\nSOURCE: https://github.com/oslo-project/crypto/blob/main/docs/pages/reference/rsa/RSAPublicKey/encodePKCS1.md#2025-04-12_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction encodePKCS1(): Uint8Array;\n```\n\n----------------------------------------\n\nTITLE: Implementing SHA-224 Hash Function in TypeScript\nDESCRIPTION: Function signature for SHA-224 hash implementation that takes binary data as input and returns a hashed output. The function follows the NIST FIPS 180-4 specification for SHA-224 hashing.\nSOURCE: https://github.com/oslo-project/crypto/blob/main/docs/pages/reference/sha2/sha224.md#2025-04-12_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction sha224(data: Uint8Array): Uint8Array;\n```\n\n----------------------------------------\n\nTITLE: Constructing ECDSAPublicKey in TypeScript\nDESCRIPTION: Constructor for the ECDSAPublicKey class. It takes a named curve and the x and y coordinates of the public key point. Note that it does not validate if the point is on the curve.\nSOURCE: https://github.com/oslo-project/crypto/blob/main/docs/pages/reference/ecdsa/ECDSAPublicKey/index.md#2025-04-12_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction constructor(curve: ECDSANamedCurve, x: bigint, y: bigint): this;\n```\n\n----------------------------------------\n\nTITLE: Defining SHA3-224 Hashing Function in TypeScript\nDESCRIPTION: This code snippet defines the sha3_224() function in TypeScript. It takes a Uint8Array as input data and returns a Uint8Array containing the hash. The function performs synchronous hashing using the SHA3-224 algorithm as specified in NIST FIPS 202.\nSOURCE: https://github.com/oslo-project/crypto/blob/main/docs/pages/reference/sha3/sha3_224.md#2025-04-12_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction sha3_224(data: Uint8Array): Uint8Array;\n```\n\n----------------------------------------\n\nTITLE: Defining ECDSASignature Properties Interface in TypeScript\nDESCRIPTION: Interface definition specifying the required properties for an ECDSASignature. Contains two bigint properties 'r' and 's' representing the signature components.\nSOURCE: https://github.com/oslo-project/crypto/blob/main/docs/pages/reference/ecdsa/ECDSASignature/index.md#2025-04-12_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ninterface Properties {\n\tr: bigint;\n\ts: bigint;\n}\n```\n\n----------------------------------------\n\nTITLE: Constructing ECDSANamedCurve in TypeScript\nDESCRIPTION: Constructor for the ECDSANamedCurve class. It takes parameters defining the curve's characteristics, including prime field, coefficients, base point coordinates, order, co-factor, size, and object identifier.\nSOURCE: https://github.com/oslo-project/crypto/blob/main/docs/pages/reference/ecdsa/ECDSANamedCurve.md#2025-04-12_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction constructor(\n\tp: bigint,\n\ta: bigint,\n\tb: bigint,\n\tgx: bigint,\n\tgy: bigint,\n\tn: bigint,\n\th: bigint,\n\tsize: number,\n\tobjectIdentifier: string\n): this;\n```\n\n----------------------------------------\n\nTITLE: Defining RSA Public Key Properties Interface in TypeScript\nDESCRIPTION: Interface definition specifying the required properties for an RSA public key - modulus (n) and public exponent (e) as bigint values.\nSOURCE: https://github.com/oslo-project/crypto/blob/main/docs/pages/reference/rsa/RSAPublicKey/index.md#2025-04-12_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ninterface Properties {\n\tn: bigint;\n\te: bigint;\n}\n```\n\n----------------------------------------\n\nTITLE: Constructing a SHAKE256 Hash Object in TypeScript\nDESCRIPTION: Constructor for creating a SHAKE256 hash object with a specified digest size. The size parameter determines the length of the resulting hash in bytes.\nSOURCE: https://github.com/oslo-project/crypto/blob/main/docs/pages/reference/sha3/SHAKE256/index.md#2025-04-12_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction constructor(size: number): this;\n```\n\n----------------------------------------\n\nTITLE: Creating secp256r1 (P-256) Curve Instance in TypeScript\nDESCRIPTION: Example of creating an instance of the ECDSANamedCurve class for the secp256r1 (P-256) curve. It demonstrates how to provide the required parameters to define the curve's characteristics.\nSOURCE: https://github.com/oslo-project/crypto/blob/main/docs/pages/reference/ecdsa/ECDSANamedCurve.md#2025-04-12_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// secp256r1 (p-256)\nconst p256 = new ECDSANamedCurve(\n\t0xffffffff00000001000000000000000000000000ffffffffffffffffffffffffn,\n\t0xffffffff00000001000000000000000000000000fffffffffffffffffffffffcn,\n\t0x5ac635d8aa3a93e7b3ebbd55769886bc651d06b0cc53b0f63bce3c3e27d2604bn,\n\t0x6b17d1f2e12c4247f8bce6e563a440f277037d812deb33a0f4a13945d898c296n,\n\t0x4fe342e2fe1a7f9b8ee7eb4a7c0f9e162bce33576b315ececbb6406837bf51f5n,\n\t0xffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632551n,\n\t1n,\n\t32,\n\t\"1.2.840.10045.3.1.7\"\n);\n```\n\n----------------------------------------\n\nTITLE: Initializing SHAKE128 Constructor\nDESCRIPTION: Constructor function for SHAKE128 hash implementation that takes a size parameter specifying the desired digest size in bytes.\nSOURCE: https://github.com/oslo-project/crypto/blob/main/docs/pages/reference/sha3/SHAKE128/index.md#2025-04-12_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction constructor(size: number): this;\n```\n\n----------------------------------------\n\nTITLE: Using generateRandomString with Web Crypto API in TypeScript\nDESCRIPTION: Example of importing and using the generateRandomString function with a RandomReader implementation that uses the Web Crypto API's getRandomValues method to generate random characters.\nSOURCE: https://github.com/oslo-project/crypto/blob/main/docs/pages/reference/random/generateRandomString.md#2025-04-12_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { generateRandomString } from \"@oslojs/crypto/random\";\n\nimport type { RandomReader } from \"@oslojs/crypto/random\";\n\nconst random: RandomReader = {\n\tread(bytes) {\n\t\tcrypto.getRandomValues(bytes);\n\t}\n};\n\nconst alphabet = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n// 10-characters long string consisting of the upper case letters\nconst s = generateRandomString(random, alphabet, 10);\n```\n\n----------------------------------------\n\nTITLE: Initializing ECDSASignature Constructor in TypeScript\nDESCRIPTION: Constructor function for creating an ECDSASignature instance. Takes two bigint parameters 'r' and 's' which must be positive integers greater than 0.\nSOURCE: https://github.com/oslo-project/crypto/blob/main/docs/pages/reference/ecdsa/ECDSASignature/index.md#2025-04-12_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction constructor(r: bigint, s: bigint): this;\n```\n\n----------------------------------------\n\nTITLE: SHA256 Properties Interface in TypeScript\nDESCRIPTION: TypeScript interface defining the required properties for the SHA256 hash implementation. It specifies blockSize and size as numeric properties conforming to the hash.Hash interface requirements.\nSOURCE: https://github.com/oslo-project/crypto/blob/main/docs/pages/reference/sha2/SHA256/index.md#2025-04-12_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface Properties {\n\tblockSize: number;\n\tsize: number;\n}\n```\n\n----------------------------------------\n\nTITLE: SHAKE256 Interface Properties in TypeScript\nDESCRIPTION: Interface defining the properties of a SHAKE256 hash object. It includes blockSize which represents the internal block size used by the algorithm, and size which indicates the digest output size in bytes.\nSOURCE: https://github.com/oslo-project/crypto/blob/main/docs/pages/reference/sha3/SHAKE256/index.md#2025-04-12_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ninterface Properties {\n\tblockSize: number;\n\tsize: number;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining ECDSAPublicKey Properties Interface in TypeScript\nDESCRIPTION: Interface defining the properties of an ECDSAPublicKey. It includes the curve type and the x and y coordinates as bigint values.\nSOURCE: https://github.com/oslo-project/crypto/blob/main/docs/pages/reference/ecdsa/ECDSAPublicKey/index.md#2025-04-12_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ninterface Properties {\n\tcurve: ECDSANamedCurve;\n\tx: bigint;\n\ty: bigint;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining SHA3_512 Properties Interface in TypeScript\nDESCRIPTION: TypeScript interface definition for the properties of the SHA3_512 hash implementation. It includes blockSize and size properties which are standard for hash function implementations.\nSOURCE: https://github.com/oslo-project/crypto/blob/main/docs/pages/reference/sha3/SHA3_512/index.md#2025-04-12_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface Properties {\n\tblockSize: number;\n\tsize: number;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining HashAlgorithm Interface in TypeScript\nDESCRIPTION: Defines a TypeScript interface for hash algorithm constructors. The interface specifies that implementing classes must provide a constructor that returns a Hash object. The reference path comment indicates a relationship to a Hash type defined elsewhere in the project.\nSOURCE: https://github.com/oslo-project/crypto/blob/main/docs/pages/reference/hash/HashAlgorithm.md#2025-04-12_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n//$ Hash=/reference/hash/Hash\ninterface HashAlgorithm {\n\tnew (): $$Hash;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining SHA512 Properties Interface in TypeScript\nDESCRIPTION: TypeScript interface defining the properties available on the SHA512 hash implementation. It specifies blockSize and size as numeric properties.\nSOURCE: https://github.com/oslo-project/crypto/blob/main/docs/pages/reference/sha2/SHA512/index.md#2025-04-12_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface Properties {\n\tblockSize: number;\n\tsize: number;\n}\n```\n\n----------------------------------------\n\nTITLE: TypeScript Interface Definition for SHA3_384 Properties\nDESCRIPTION: Defines the interface for SHA3_384 hash properties including blockSize and size parameters used in the hash implementation.\nSOURCE: https://github.com/oslo-project/crypto/blob/main/docs/pages/reference/sha3/SHA3_384/index.md#2025-04-12_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface Properties {\n\tblockSize: number;\n\tsize: number;\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing RSA Public Key Constructor in TypeScript\nDESCRIPTION: Constructor for creating an RSA public key instance. Takes modulus (n) and public exponent (e) as bigint parameters.\nSOURCE: https://github.com/oslo-project/crypto/blob/main/docs/pages/reference/rsa/RSAPublicKey/index.md#2025-04-12_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction constructor(n: bigint, e: bigint): this;\n```\n\n----------------------------------------\n\nTITLE: Implementing SHA-512/224 Hash Function in TypeScript\nDESCRIPTION: Function signature for the sha512_224() function that synchronously hashes data using the SHA-512/224 algorithm as specified in NIST FIPS 180-4. It takes a Uint8Array as input and returns a Uint8Array containing the hash value.\nSOURCE: https://github.com/oslo-project/crypto/blob/main/docs/pages/reference/sha2/sha512_224.md#2025-04-12_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction sha512_224(data: Uint8Array): Uint8Array;\n```\n\n----------------------------------------\n\nTITLE: Defining SHA384 Hash Properties Interface in TypeScript\nDESCRIPTION: TypeScript interface definition specifying the required properties for SHA-384 hash implementation, including blockSize and size parameters.\nSOURCE: https://github.com/oslo-project/crypto/blob/main/docs/pages/reference/sha2/SHA384/index.md#2025-04-12_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface Properties {\n\tblockSize: number;\n\tsize: number;\n}\n```\n\n----------------------------------------\n\nTITLE: SHA3_224 Properties Interface in TypeScript\nDESCRIPTION: TypeScript interface defining the properties of the SHA3_224 hash function implementation. It specifies blockSize (representing the internal block size used by the algorithm) and size (representing the output digest size in bytes).\nSOURCE: https://github.com/oslo-project/crypto/blob/main/docs/pages/reference/sha3/SHA3_224/index.md#2025-04-12_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface Properties {\n\tblockSize: number;\n\tsize: number;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing SHA-512/256 Hash Function in TypeScript\nDESCRIPTION: Function definition for synchronously hashing data using the SHA-512/256 algorithm as specified in NIST FIPS 180-4. Takes a Uint8Array input and returns the hashed result as a Uint8Array.\nSOURCE: https://github.com/oslo-project/crypto/blob/main/docs/pages/reference/sha2/sha512_256.md#2025-04-12_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction sha512(data: Uint8Array): Uint8Array;\n```\n\n----------------------------------------\n\nTITLE: Defining SHA224 Properties Interface in TypeScript\nDESCRIPTION: TypeScript interface definition for SHA224 hash properties. It specifies blockSize and size as numeric properties that are essential for the hash function implementation.\nSOURCE: https://github.com/oslo-project/crypto/blob/main/docs/pages/reference/sha2/SHA224/index.md#2025-04-12_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface Properties {\n\tblockSize: number;\n\tsize: number;\n}\n```\n\n----------------------------------------\n\nTITLE: SHA512_256 Properties Interface Definition in TypeScript\nDESCRIPTION: TypeScript interface defining the properties of the SHA512_256 hash implementation, including blockSize and size properties that are required for the hash.Hash interface.\nSOURCE: https://github.com/oslo-project/crypto/blob/main/docs/pages/reference/sha2/SHA512_256/index.md#2025-04-12_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface Properties {\n\tblockSize: number;\n\tsize: number;\n}\n```\n\n----------------------------------------\n\nTITLE: Updating HMAC with Data in TypeScript\nDESCRIPTION: Method definition for HMAC.update() which writes data to a running HMAC hash. The method takes a Uint8Array parameter containing the data to be added to the hash calculation.\nSOURCE: https://github.com/oslo-project/crypto/blob/main/docs/pages/reference/hmac/HMAC/update.md#2025-04-12_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction update(data: Uint8Array): void;\n```\n\n----------------------------------------\n\nTITLE: Defining SHA256 Properties Interface in TypeScript\nDESCRIPTION: This code snippet defines the Properties interface for the SHA256 implementation. It specifies two properties: blockSize and size, both of type number.\nSOURCE: https://github.com/oslo-project/crypto/blob/main/docs/pages/reference/sha1/SHA1/index.md#2025-04-12_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface Properties {\n\tblockSize: number;\n\tsize: number;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining SHA-512 Algorithm Object Identifier in TypeScript\nDESCRIPTION: Declares a constant string containing the standardized ASN.1 object identifier (OID) for the SHA-512 hash algorithm. The OID '2.16.840.1.101.3.4.2.3' is a unique identifier used in cryptographic protocols and certificates to identify the SHA-512 algorithm.\nSOURCE: https://github.com/oslo-project/crypto/blob/main/docs/pages/reference/rsa/sha512ObjectIdentifier.md#2025-04-12_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst sha512ObjectIdentifier = \"2.16.840.1.101.3.4.2.3\";\n```\n\n----------------------------------------\n\nTITLE: Using generateRandomIntegerNumber in TypeScript\nDESCRIPTION: Example showing how to import and use the generateRandomIntegerNumber function with a RandomReader implementation that uses the browser's crypto API.\nSOURCE: https://github.com/oslo-project/crypto/blob/main/docs/pages/reference/random/generateRandomIntegerNumber.md#2025-04-12_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { generateRandomIntegerNumber } from \"@oslojs/crypto/random\";\n\nimport type { RandomReader } from \"@oslojs/crypto/random\";\n\nconst random: RandomReader = {\n\tread(bytes) {\n\t\tcrypto.getRandomValues(bytes);\n\t}\n};\n\n// random number from 0 to 9\nconst i = generateRandomIntegerNumber(random, 10);\n```\n\n----------------------------------------\n\nTITLE: HMAC.digest() Function Definition in TypeScript\nDESCRIPTION: The digest() method of the HMAC class returns the computed hash as a Uint8Array. This method takes no parameters and is called after an HMAC instance has been initialized and provided with data to hash.\nSOURCE: https://github.com/oslo-project/crypto/blob/main/docs/pages/reference/hmac/HMAC/digest.md#2025-04-12_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction digest(): Uint8Array;\n```\n\n----------------------------------------\n\nTITLE: Defining SHA-384 Object Identifier in TypeScript\nDESCRIPTION: Declares a constant variable containing the standardized OID for the SHA-384 hash algorithm. This OID (2.16.840.1.101.3.4.2.2) is defined by NIST and is used in various cryptographic protocols to uniquely identify the SHA-384 algorithm.\nSOURCE: https://github.com/oslo-project/crypto/blob/main/docs/pages/reference/rsa/sha384ObjectIdentifier.md#2025-04-12_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst sha384ObjectIdentifier = \"2.16.840.1.101.3.4.2.2\";\n```\n\n----------------------------------------\n\nTITLE: Defining SHA-224 Object Identifier in TypeScript\nDESCRIPTION: Declares a constant containing the standardized object identifier (OID) string for the SHA-224 hash algorithm. This OID is used in cryptographic applications to uniquely identify the SHA-224 algorithm.\nSOURCE: https://github.com/oslo-project/crypto/blob/main/docs/pages/reference/rsa/sha224ObjectIdentifier.md#2025-04-12_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst sha224ObjectIdentifier = \"2.16.840.1.101.3.4.2.4\";\n```\n\n----------------------------------------\n\nTITLE: Defining RSAPublicKey.encodePKIX() Method Signature in TypeScript\nDESCRIPTION: Function signature for the encodePKIX() method that DER encodes an RSA public key as an ASN.1 SubjectPublicKeyInfo structure with PKCS-1 object identifier (1.2.840.113549.1.1.1). The method returns the encoded key as a Uint8Array.\nSOURCE: https://github.com/oslo-project/crypto/blob/main/docs/pages/reference/rsa/RSAPublicKey/encodePKIX.md#2025-04-12_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction encodePKIX(): Uint8Array;\n```\n\n----------------------------------------\n\nTITLE: Defining SHA1 Algorithm Object Identifier in TypeScript\nDESCRIPTION: Defines the standard ASN.1 object identifier string constant for the SHA1 hashing algorithm. This identifier string (1.3.14.3.2.26) is used in various cryptographic operations and certificates to uniquely identify the SHA1 algorithm.\nSOURCE: https://github.com/oslo-project/crypto/blob/main/docs/pages/reference/rsa/sha1ObjectIdentifier.md#2025-04-12_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst sha1ObjectIdentifier = \"1.3.14.3.2.26\";\n```\n\n----------------------------------------\n\nTITLE: Implementing RandomReader with Node.js webcrypto\nDESCRIPTION: Shows how to implement the RandomReader interface in Node.js 18+ by importing the Web Crypto API implementation from the node:crypto module.\nSOURCE: https://github.com/oslo-project/crypto/blob/main/docs/pages/examples/random-values.md#2025-04-12_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { webcrypto } from \"node:crypto\";\n\nimport type { RandomReader } from \"@oslojs/crypto/random\";\n\nconst random: RandomReader = {\n\tread(bytes: Uint8Array): void {\n\t\twebcrypto.getRandomValues(bytes);\n\t}\n};\n```\n\n----------------------------------------\n\nTITLE: Running Crypto Test Vectors with pnpm\nDESCRIPTION: This command executes the test vectors for the crypto project using pnpm. It runs Vitest tests that are based on common test vectors to verify the correctness of the crypto implementations.\nSOURCE: https://github.com/oslo-project/crypto/blob/main/test-vectors/README.md#2025-04-12_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\npnpm test-vectors\n```\n\n----------------------------------------\n\nTITLE: Implementing RandomReader with Node.js getRandomValues\nDESCRIPTION: Alternative implementation of RandomReader using the getRandomValues function from the node:crypto module in Node.js.\nSOURCE: https://github.com/oslo-project/crypto/blob/main/docs/pages/examples/random-values.md#2025-04-12_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { getRandomValues } from \"node:crypto\";\n\nimport type { RandomReader } from \"@oslojs/crypto/random\";\n\nconst random: RandomReader = {\n\tread(bytes: Uint8Array): void {\n\t\tgetRandomValues(bytes);\n\t}\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing RandomReader for older Node.js versions\nDESCRIPTION: Implementation of RandomReader for older versions of Node.js using the fillRandomSync function from the node:crypto module.\nSOURCE: https://github.com/oslo-project/crypto/blob/main/docs/pages/examples/random-values.md#2025-04-12_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { fillRandomSync } from \"node:crypto\";\n\nimport type { RandomReader } from \"@oslojs/crypto/random\";\n\nconst random: RandomReader = {\n\tread(bytes: Uint8Array) {\n\t\tfillRandomSync(bytes);\n\t}\n};\n```\n\n----------------------------------------\n\nTITLE: Decoding PKIX ECDSA Signature in TypeScript\nDESCRIPTION: This function decodes an ASN.1 DER encoded ECDSA signature. It takes a Uint8Array as input and returns an ECDSASignature object. The function will throw an error if the provided signature is invalid.\nSOURCE: https://github.com/oslo-project/crypto/blob/main/docs/pages/reference/ecdsa/decodePKIXECDSASignature.md#2025-04-12_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nfunction decodePKIXECDSASignature(der: Uint8Array): $$ECDSASignature;\n```\n\n----------------------------------------\n\nTITLE: Decoding IEEE P1363 ECDSA Signatures in TypeScript\nDESCRIPTION: Function definition for decodeIEEEP1363ECDSASignature that takes an ECDSA named curve and a byte array as inputs. It returns an ECDSA public key by decoding the signature which is a concatenation of r and s values. The function will throw an error if the provided bytes are invalid.\nSOURCE: https://github.com/oslo-project/crypto/blob/main/docs/pages/reference/ecdsa/decodeIEEEP1363ECDSASignature.md#2025-04-12_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n//$ ECDSANamedCurve=/reference/ecdsa/ECDSANamedCurve\n//$ ECDSAPublicKey=/reference/ecdsa/ECDSAPublicKey\nfunction decodeIEEEP1363ECDSASignature(\n\tcurve: $$ECDSANamedCurve,\n\tbytes: Uint8Array\n): $$ECDSAPublicKey;\n```\n\n----------------------------------------\n\nTITLE: Encoding ECDSA Public Keys to SEC 1 Uncompressed Format in TypeScript\nDESCRIPTION: Method signature for encoding an ECDSA public key into SEC 1 uncompressed format. The method takes no parameters and returns the encoded key as a Uint8Array.\nSOURCE: https://github.com/oslo-project/crypto/blob/main/docs/pages/reference/ecdsa/ECDSAPublicKey/encodeSEC1Uncompressed.md#2025-04-12_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction encodeSEC1Uncompressed(): Uint8Array;\n```\n\n----------------------------------------\n\nTITLE: Encoding ECDSA Public Key in PKIX Uncompressed Format - TypeScript\nDESCRIPTION: This function encodes an ECDSA public key into ASN.1 DER format as specified in PKIX (RFC 5480). The public key is encoded in uncompressed form. It takes no parameters and returns a Uint8Array containing the encoded key.\nSOURCE: https://github.com/oslo-project/crypto/blob/main/docs/pages/reference/ecdsa/ECDSAPublicKey/encodePKIXUncompressed.md#2025-04-12_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction encodePKIXUncompressed(): Uint8Array;\n```\n\n----------------------------------------\n\nTITLE: SHA3_256 Properties Interface in TypeScript\nDESCRIPTION: Interface defining the properties available on the SHA3_256 hash implementation. It includes blockSize for the internal block size and size for the output digest length.\nSOURCE: https://github.com/oslo-project/crypto/blob/main/docs/pages/reference/sha3/SHA3_256/index.md#2025-04-12_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface Properties {\n\tblockSize: number;\n\tsize: number;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining ECDSAPublicKey.encodePKIXCompressed() in TypeScript\nDESCRIPTION: Function signature for the encodePKIXCompressed method that encodes an ECDSA public key in compressed format using ASN.1 DER encoding as specified in PKIX (RFC 5480). The method returns the encoded key as a Uint8Array.\nSOURCE: https://github.com/oslo-project/crypto/blob/main/docs/pages/reference/ecdsa/ECDSAPublicKey/encodeKPKIXCompressed.md#2025-04-12_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction encodePKIXCompressed(): Uint8Array;\n```\n\n----------------------------------------\n\nTITLE: Comparing ECDSA Curves with Public Key in TypeScript\nDESCRIPTION: Method definition for isCurve() which compares a provided ECDSA named curve with the curve of the public key. It takes an ECDSANamedCurve parameter and returns a boolean indicating whether the curves match.\nSOURCE: https://github.com/oslo-project/crypto/blob/main/docs/pages/reference/ecdsa/ECDSAPublicKey/isCurve.md#2025-04-12_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n//$ ECDSANamedCurve=/reference/ecdsa/ECDSANamedCurve\nfunction isCurve(curve: $$ECDSANamedCurve): boolean;\n```\n\n----------------------------------------\n\nTITLE: SHAKE128 Properties Interface Definition\nDESCRIPTION: TypeScript interface defining the required properties for SHAKE128 implementation, including blockSize and size properties.\nSOURCE: https://github.com/oslo-project/crypto/blob/main/docs/pages/reference/sha3/SHAKE128/index.md#2025-04-12_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ninterface Properties {\n\tblockSize: number;\n\tsize: number;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Properties Interface for SHA512_224 Hash Implementation in TypeScript\nDESCRIPTION: TypeScript interface defining the properties available on the SHA512_224 hash implementation. It specifies the blockSize and size properties which are essential for hash function implementations.\nSOURCE: https://github.com/oslo-project/crypto/blob/main/docs/pages/reference/sha2/SHA512_224/index.md#2025-04-12_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface Properties {\n\tblockSize: number;\n\tsize: number;\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies with PNPM\nDESCRIPTION: Command to install project dependencies using the PNPM package manager.\nSOURCE: https://github.com/oslo-project/crypto/blob/main/CONTRIBUTING.md#2025-04-12_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npnpm i\n```\n\n----------------------------------------\n\nTITLE: Running Tests and Building the Package\nDESCRIPTION: Commands to run tests and build the package using PNPM scripts.\nSOURCE: https://github.com/oslo-project/crypto/blob/main/CONTRIBUTING.md#2025-04-12_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npnpm test\n\npnpm build\n```\n\n----------------------------------------\n\nTITLE: Creating Changesets for Minor and Patch Changes\nDESCRIPTION: Commands to create changesets for new features (minor) and bug fixes (patch) using the Auri tool.\nSOURCE: https://github.com/oslo-project/crypto/blob/main/CONTRIBUTING.md#2025-04-12_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npnpm auri add minor\npnpm auri add patch\n```\n\n----------------------------------------\n\nTITLE: Example Changeset for Bug Fix\nDESCRIPTION: Example of a markdown changeset file for documenting a bug fix, specifically handling negative numbers in the sqrt() function.\nSOURCE: https://github.com/oslo-project/crypto/blob/main/CONTRIBUTING.md#2025-04-12_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\nFix: Handle negative numbers in `sqrt()`\n```\n\n----------------------------------------\n\nTITLE: Example Changeset for Feature Addition\nDESCRIPTION: Example of a markdown changeset file for documenting a new feature, specifically the addition of a greet() function.\nSOURCE: https://github.com/oslo-project/crypto/blob/main/CONTRIBUTING.md#2025-04-12_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\nFeat: Add `greet()`\n```\n\n----------------------------------------\n\nTITLE: Encoding ECDSA Public Keys using SEC 1 Format\nDESCRIPTION: Shows how to encode an ECDSA public key in SEC 1 format, which can be either uncompressed (containing both x and y coordinates) or compressed (containing only the x coordinate).\nSOURCE: https://github.com/oslo-project/crypto/blob/main/docs/pages/examples/ecdsa.md#2025-04-12_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ECDSAPublicKey, p256 } from \"@oslojs/crypto/ecdsa\";\n\nconst publicKey = new ECDSAPublicKey(p256, x, y);\nconst uncompressed = publicKey.encodeSEC1Uncompressed();\nconst compressed = publicKey.encodeSEC1Compressed();\n```\n\n----------------------------------------\n\nTITLE: Encoding ECDSA Public Keys in PKIX Format\nDESCRIPTION: Shows how to encode an ECDSA public key in PKIX (ASN.1 DER) format, which includes algorithm information, curve details, and the SEC-encoded public key.\nSOURCE: https://github.com/oslo-project/crypto/blob/main/docs/pages/examples/ecdsa.md#2025-04-12_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ECDSAPublicKey, p256 } from \"@oslojs/crypto/ecdsa\";\n\nconst publicKey = new ECDSAPublicKey(p256, x, y);\nconst pkixUncompressed = publicKey.encodePKIXUncompressed();\nconst pkixCompressed = publicKey.encodePKIXCompressed();\n```\n\n----------------------------------------\n\nTITLE: Defining SHA-256 Object Identifier in TypeScript\nDESCRIPTION: Declaration of the SHA-256 cryptographic algorithm object identifier (OID) as a string constant. This OID '2.16.840.1.101.3.4.2.1' is the standard identifier for SHA-256 algorithm in ASN.1 notation, commonly used in X.509 certificates and cryptographic protocols.\nSOURCE: https://github.com/oslo-project/crypto/blob/main/docs/pages/reference/rsa/sha256ObjectIdentifier.md#2025-04-12_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst sha256ObjectIdentifier = \"2.16.840.1.101.3.4.2.1\";\n```\n\n----------------------------------------\n\nTITLE: Encoding RSA Public Key in PKCS#1 Format\nDESCRIPTION: Demonstrates encoding an RSA public key in PKCS#1 ASN.1 DER format.\nSOURCE: https://github.com/oslo-project/crypto/blob/main/docs/pages/examples/rsa.md#2025-04-12_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { RSAPublicKey } from \"@oslojs/crypto/rsa\";\n\nconst publicKey = new RSAPublicKey(n, e);\nconst pkcs1 = publicKey.encodePKCS1();\n```"
  }
]