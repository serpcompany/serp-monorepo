[
  {
    "owner": "loco-rs",
    "repo": "loco",
    "content": "TITLE: Complete CRUD Controller Implementation\nDESCRIPTION: Full implementation of articles controller with all CRUD operations\nSOURCE: https://github.com/loco-rs/loco/blob/master/docs-site/content/docs/getting-started/guide.md#2025-04-20_snippet_11\n\nLANGUAGE: rust\nCODE:\n```\n#![allow(clippy::unused_async)]\nuse loco_rs::prelude::*;\nuse serde::{Deserialize, Serialize};\n\nuse crate::models::_entities::articles::{ActiveModel, Entity, Model};\n\n#[derive(Clone, Debug, Serialize, Deserialize)]\npub struct Params {\n    pub title: Option<String>,\n    pub content: Option<String>,\n}\n\nimpl Params {\n    fn update(&self, item: &mut ActiveModel) {\n        item.title = Set(self.title.clone());\n        item.content = Set(self.content.clone());\n    }\n}\n\nasync fn load_item(ctx: &AppContext, id: i32) -> Result<Model> {\n    let item = Entity::find_by_id(id).one(&ctx.db).await?;\n    item.ok_or_else(|| Error::NotFound)\n}\n\npub async fn list(State(ctx): State<AppContext>) -> Result<Response> {\n    format::json(Entity::find().all(&ctx.db).await?)\n}\n\npub async fn add(State(ctx): State<AppContext>, Json(params): Json<Params>) -> Result<Response> {\n    let mut item: ActiveModel = Default::default();\n    params.update(&mut item);\n    let item = item.insert(&ctx.db).await?;\n    format::json(item)\n}\n\npub async fn update(\n    Path(id): Path<i32>,\n    State(ctx): State<AppContext>,\n    Json(params): Json<Params>,\n) -> Result<Response> {\n    let item = load_item(&ctx, id).await?;\n    let mut item = item.into_active_model();\n    params.update(&mut item);\n    let item = item.update(&ctx.db).await?;\n    format::json(item)\n}\n\npub async fn remove(Path(id): Path<i32>, State(ctx): State<AppContext>) -> Result<Response> {\n    load_item(&ctx, id).await?.delete(&ctx.db).await?;\n    format::empty()\n}\n\npub async fn get_one(Path(id): Path<i32>, State(ctx): State<AppContext>) -> Result<Response> {\n    format::json(load_item(&ctx, id).await?)\n}\n\npub fn routes() -> Routes {\n    Routes::new()\n        .prefix(\"api/articles\")\n        .add(\"/\", get(list))\n        .add(\"/\", post(add))\n        .add(\"/{id}\", get(get_one))\n        .add(\"/{id}\", delete(remove))\n        .add(\"/{id}\", patch(update))\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Model Validation in Loco-rs\nDESCRIPTION: Example of implementing validation for a model using the validator crate. This shows how to create a Validator struct with validation rules and implement the Validatable trait for an ActiveModel.\nSOURCE: https://github.com/loco-rs/loco/blob/master/docs-site/content/docs/the-app/models.md#2025-04-20_snippet_18\n\nLANGUAGE: rust\nCODE:\n```\n#[derive(Debug, Validate, Deserialize)]\npub struct Validator {\n    #[validate(length(min = 2, message = \"Name must be at least 2 characters long.\"))]\n    pub name: String,\n    #[validate(email(message = \"invalid email\"))]\n    pub email: String,\n}\n\nimpl Validatable for super::_entities::users::ActiveModel {\n    fn validator(&self) -> Box<dyn Validate> {\n        Box::new(Validator {\n            name: self.name.as_ref().to_owned(),\n            email: self.email.as_ref().to_owned(),\n        })\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Loco Framework Dependencies\nDESCRIPTION: Commands to install the Loco framework and Sea-ORM CLI for database functionality\nSOURCE: https://github.com/loco-rs/loco/blob/master/docs-site/content/docs/getting-started/guide.md#2025-04-20_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ncargo install loco\ncargo install sea-orm-cli # Only when DB is needed\n```\n\n----------------------------------------\n\nTITLE: Generating a CRUD API Scaffold for Blog Posts\nDESCRIPTION: Command to generate a scaffolded CRUD API for blog posts, creating models, controllers, and tests automatically. The scaffold creates a post model with title and content fields.\nSOURCE: https://github.com/loco-rs/loco/blob/master/docs-site/content/docs/getting-started/tour/index.md#2025-04-20_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\n$ cargo loco generate scaffold post title:string content:text --api\n\n  :\n  :\nadded: \"src/controllers/post.rs\"\ninjected: \"src/controllers/mod.rs\"\ninjected: \"src/app.rs\"\nadded: \"tests/requests/post.rs\"\ninjected: \"tests/requests/mod.rs\"\n* Migration for `post` added! You can now apply it with `$ cargo loco db migrate`.\n* A test for model `posts` was added. Run with `cargo test`.\n* Controller `post` was added successfully.\n* Tests for controller `post` was added successfully. Run `cargo test`.\n```\n\n----------------------------------------\n\nTITLE: Advanced Context-Aware Middleware Implementation\nDESCRIPTION: Complete implementation of a middleware that accesses AppContext to perform JWT authentication and user lookups.\nSOURCE: https://github.com/loco-rs/loco/blob/master/docs-site/content/docs/extras/pluggability.md#2025-04-20_snippet_14\n\nLANGUAGE: rust\nCODE:\n```\nuse std::{convert::Infallible, task::{Context, Poll}};\n\nuse axum::{body::Body, extract::{FromRequestParts, Request}, response::Response};\nuse futures_util::future::BoxFuture;\nuse loco_rs::prelude::{auth::JWTWithUser, *};\nuse tower::{Layer, Service};\n\nuse crate::models::{users};\n\n#[derive(Clone)]\npub struct LogLayer {\n    state: AppContext,\n}\n\nimpl LogLayer {\n    pub fn new(state: AppContext) -> Self {\n        Self { state }\n    }\n}\n\nimpl<S> Layer<S> for LogLayer {\n    type Service = LogService<S>;\n\n    fn layer(&self, inner: S) -> Self::Service {\n        Self::Service {\n            inner,\n            state: self.state.clone(),\n        }\n    }\n}\n\n#[derive(Clone)]\npub struct LogService<S> {\n    inner: S,\n    state: AppContext,\n}\n\nimpl<S, B> Service<Request<B>> for LogService<S>\n    where\n        S: Service<Request<B>, Response=Response<Body>, Error=Infallible> + Clone + Send + 'static,\n        S::Future: Send + 'static,\n        B: Send + 'static,\n{\n    type Response = S::Response;\n    type Error = S::Error;\n    type Future = BoxFuture<'static, Result<Self::Response, Self::Error>>;\n    fn poll_ready(&mut self, cx: &mut Context<'_>) -> Poll<Result<(), Self::Error>> {\n        self.inner.poll_ready(cx)\n    }\n\n    fn call(&mut self, req: Request<B>) -> Self::Future {\n        let state = self.state.clone();\n        let clone = self.inner.clone();\n        let mut inner = std::mem::replace(&mut self.inner, clone);\n        Box::pin(async move {\n            let (mut parts, body) = req.into_parts();\n            let auth = JWTWithUser::<users::Model>::from_request_parts(&mut parts, &state).await;\n\n            match auth {\n                Ok(auth) => {\n                    let user = users::Model::find_by_email(&state.db, &auth.user.email).await.unwrap();\n                    tracing::info!(\"User: {}\", user.name);\n                    let req = Request::from_parts(parts, body);\n                    inner.call(req).await\n                }\n                Err(_) => {\n                    Ok(Response::builder()\n                        .status(401)\n                        .body(Body::empty())\n                        .unwrap()\n                        .into_response())\n                }\n            }\n        })\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Asynchronous Controller Testing with Database Isolation in Loco-rs\nDESCRIPTION: Demonstrates how to test controllers asynchronously with isolated database contexts. This approach creates a random database schema for each test to prevent test interference and cleans up after completion, ensuring test reliability.\nSOURCE: https://github.com/loco-rs/loco/blob/master/docs-site/content/docs/the-app/controller.md#2025-04-20_snippet_49\n\nLANGUAGE: rust\nCODE:\n```\nuse loco_rs::testing::prelude::*;\n\n#[tokio::test]\nasync fn can_print_echo() {\n    configure_insta!();\n\n    request_with_create_db::<App, _, _>(|request, _ctx| async move {\n        let response = request\n            .post(\"/example\")\n            .json(&serde_json::json!({\"site\": \"Loco\"}))\n            .await;\n\n        assert_debug_snapshot!((response.status_code(), response.text()));\n    })\n    .await;\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Authentication to Comments Controller\nDESCRIPTION: Demonstrates how to modify a controller endpoint to require JWT authentication, including user verification before allowing the action to proceed.\nSOURCE: https://github.com/loco-rs/loco/blob/master/docs-site/content/docs/getting-started/guide.md#2025-04-20_snippet_18\n\nLANGUAGE: rust\nCODE:\n```\nasync fn add(\n    auth: auth::JWT,\n    State(ctx): State<AppContext>,\n    Json(params): Json<Params>,\n) -> Result<Response> {\n    // we only want to make sure it exists\n    let _current_user = crate::models::users::Model::find_by_pid(&ctx.db, &auth.claims.pid).await?;\n\n    // next, update\n    // homework/bonus: make a comment _actually_ belong to user (user_id)\n    let mut item: ActiveModel = Default::default();\n    params.update(&mut item);\n    let item = item.insert(&ctx.db).await?;\n    format::json(item)\n}\n```\n\n----------------------------------------\n\nTITLE: Prefixing Routes in Loco\nDESCRIPTION: Demonstration of adding a common prefix to grouped routes using AppRoutes\nSOURCE: https://github.com/loco-rs/loco/blob/master/docs-site/content/docs/the-app/controller.md#2025-04-20_snippet_3\n\nLANGUAGE: rust\nCODE:\n```\nuse loco_rs::controller::AppRoutes;\nuse loco_rs::prelude::*;\nuse axum::routing::get;\n\nfn routes(_ctx: &AppContext) -> AppRoutes {\n    AppRoutes::empty()\n        .prefix(\"/api\")\n        .add_route(Routes::new().add(\"/users\", get(users_handler)))\n        .add_route(Routes::new().add(\"/posts\", get(posts_handler)))\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Table Migration in Loco-rs\nDESCRIPTION: Implementing a migration that creates a new table with columns. This example creates a 'posts' table with title and content columns and implements both up and down migrations.\nSOURCE: https://github.com/loco-rs/loco/blob/master/docs-site/content/docs/the-app/models.md#2025-04-20_snippet_11\n\nLANGUAGE: rust\nCODE:\n```\nimpl MigrationTrait for Migration {\n    async fn up(&self, m: &SchemaManager) -> Result<(), DbErr> {\n        create_table(\n            m,\n            \"posts\",\n            &[\n                (\"title\", ColType::StringNull),\n                (\"content\", ColType::StringNull),\n            ],\n            &[],\n        )\n        .await\n    }\n\n    async fn down(&self, m: &SchemaManager) -> Result<(), DbErr> {\n        drop_table(m, \"posts\").await\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Loco Framework with Cargo\nDESCRIPTION: Commands to install the Loco framework and Sea-ORM CLI tool for database operations using Cargo package manager.\nSOURCE: https://github.com/loco-rs/loco/blob/master/README.md#2025-04-20_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ncargo install loco\ncargo install sea-orm-cli # Only when DB is needed\n```\n\n----------------------------------------\n\nTITLE: Using Secondary Database in a Controller\nDESCRIPTION: Example of how to access a secondary database connection in a Loco-rs controller. This demonstrates dependency injection of the database connection and its usage in a query.\nSOURCE: https://github.com/loco-rs/loco/blob/master/docs-site/content/docs/the-app/models.md#2025-04-20_snippet_27\n\nLANGUAGE: rust\nCODE:\n```\nuse sea_orm::DatabaseConnection;\nuse axum::{response::IntoResponse, Extension};\n\npub async fn list(\n    State(ctx): State<AppContext>,\n    Extension(secondary_db): Extension<DatabaseConnection>,\n) -> Result<impl IntoResponse> {\n  let res = Entity::find().all(&secondary_db).await;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Request Logging Middleware in Loco\nDESCRIPTION: This example demonstrates how to create a request logging middleware using tower's Layer and Service traits. The middleware logs the request method and path before forwarding the request to the inner service (handler).\nSOURCE: https://github.com/loco-rs/loco/blob/master/docs-site/content/docs/extras/pluggability.md#2025-04-20_snippet_9\n\nLANGUAGE: rust\nCODE:\n```\n// src/controllers/middleware/log.rs\nuse std::\n    convert::Infallible,\n    task::{Context, Poll},\n};\n\nuse axum:{\n    body::Body,\n    extract::{FromRequestParts, Request},\n    response::Response,\n};\nuse futures_util::future::BoxFuture;\nuse loco_rs::prelude::{auth::JWTWithUser, *};\nuse tower::{Layer, Service};\n\nuse crate::models::{users};\n\n#[derive(Clone)]\npub struct LogLayer;\n\nimpl LogLayer {\n    pub fn new() -> Self {\n        Self {}\n    }\n}\n\nimpl<S> Layer<S> for LogLayer {\n    type Service = LogService<S>;\n\n    fn layer(&self, inner: S) -> Self::Service {\n        Self::Service {\n            inner,\n        }\n    }\n}\n\n#[derive(Clone)]\npub struct LogService<S> {\n    // S is the inner service, in the case, it is the `/auth/register` handler\n    inner: S,\n}\n\n/// Implement the Service trait for LogService\n/// # Generics\n/// * `S` - The inner service, in this case is the `/auth/register` handler\n/// * `B` - The body type\nimpl<S, B> Service<Request<B>> for LogService<S>\n    where\n        S: Service<Request<B>, Response=Response<Body>, Error=Infallible> + Clone + Send + 'static, /* Inner Service must return Response<Body> and never error, which is typical for handlers */\n        S::Future: Send + 'static,\n        B: Send + 'static,\n{\n    // Response type is the same as the inner service / handler\n    type Response = S::Response;\n    // Error type is the same as the inner service / handler\n    type Error = S::Error;\n    // Future type is the same as the inner service / handler\n    type Future = BoxFuture<'static, Result<Self::Response, Self::Error>>;\n\n    // poll_ready is used to check if the service is ready to process a request\n    fn poll_ready(&mut self, cx: &mut Context<'_>) -> Poll<Result<(), Self::Error>> {\n        // Our middleware doesn't care about backpressure, so it's ready as long\n        // as the inner service is ready.\n        self.inner.poll_ready(cx)\n    }\n\n    fn call(&mut self, req: Request<B>) -> Self::Future {\n        let clone = self.inner.clone();\n        // take the service that was ready\n        let mut inner = std::mem::replace(&mut self.inner, clone);\n        Box::pin(async move {\n            let (mut parts, body) = req.into_parts();\n            tracing::info!(\"Request: {:?} {:?}\", parts.method, parts.uri.path());\n            let req = Request::from_parts(parts, body);\n            inner.call(req).await\n        })\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Authenticated Endpoint Implementation\nDESCRIPTION: Rust code example showing how to create an authenticated endpoint using JWT authentication\nSOURCE: https://github.com/loco-rs/loco/blob/master/docs-site/content/docs/extras/authentication.md#2025-04-20_snippet_7\n\nLANGUAGE: rust\nCODE:\n```\nuse axum::{extract::State, Json};\nuse loco_rs::{\n    app::AppContext,\n    controller::middleware,\n    Result,\n};\n\nasync fn current(\n    auth: middleware::auth::Auth,\n    State(ctx): State<AppContext>,\n) -> Result<Response> {\n    let user = users::Model::find_by_pid(&ctx.db, &auth.claims.pid).await?;\n    /// Some response\n}\n```\n\n----------------------------------------\n\nTITLE: Pagination with Filtering in Loco-rs\nDESCRIPTION: Advanced pagination implementation that includes filtering capabilities. This example demonstrates how to filter notes containing 'loco' in the title while paginating the results.\nSOURCE: https://github.com/loco-rs/loco/blob/master/docs-site/content/docs/the-app/controller.md#2025-04-20_snippet_46\n\nLANGUAGE: rust\nCODE:\n```\nuse loco_rs::prelude::*;\n\nlet pagination_query = query::PaginationQuery {\n    page_size: 100,\n    page: 1,\n};\n\nlet condition = query::condition().contains(notes::Column::Title, \"loco\");\nlet paginated_notes = query::paginate(\n    &ctx.db,\n    notes::Entity::find(),\n    Some(condition.build()),\n    &pagination_query,\n)\n.await?;\n```\n\n----------------------------------------\n\nTITLE: Starting the Loco Server\nDESCRIPTION: Command to start the Loco server and the expected output showing the server listening on port 5150.\nSOURCE: https://github.com/loco-rs/loco/blob/master/docs-site/content/docs/getting-started/tour/index.md#2025-04-20_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\n$ cargo loco start\n\n                      ▄     ▀\n                                ▀  ▄\n                  ▄       ▀     ▄  ▄ ▄▀\n                                    ▄ ▀▄▄\n                        ▄     ▀    ▀  ▀▄▀█▄\n                                          ▀█▄\n▄▄▄▄▄▄▄  ▄▄▄▄▄▄▄▄▄   ▄▄▄▄▄▄▄▄▄▄▄ ▄▄▄▄▄▄▄▄▄ ▀▀█\n██████  █████   ███ █████   ███ █████   ███ ▀█\n██████  █████   ███ █████   ▀▀▀ █████   ███ ▄█▄\n██████  █████   ███ █████       █████   ███ ████▄\n██████  █████   ███ █████   ▄▄▄ █████   ███ █████\n██████  █████   ███  ████   ███ █████   ███ ████▀\n  ▀▀▀██▄ ▀▀▀▀▀▀▀▀▀▀  ▀▀▀▀▀▀▀▀▀▀  ▀▀▀▀▀▀▀▀▀▀ ██▀\n      ▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀\n                https://loco.rs\n\nlistening on port 5150\n```\n\n----------------------------------------\n\nTITLE: Implementing Hooks for Memory Session Store in Loco App\nDESCRIPTION: Code for the Loco App struct with hooks to add an in-memory Axum session layer to the application router.\nSOURCE: https://github.com/loco-rs/loco/blob/master/docs-site/content/blog/axum-session.md#2025-04-20_snippet_2\n\nLANGUAGE: rust\nCODE:\n```\npub struct App;\n#[async_trait]\nimpl Hooks for App {\n    fn app_name() -> &'static str {\n        env!(\"CARGO_CRATE_NAME\")\n    }\n\n    // Other hooks...\n    async fn after_routes(router: AxumRouter, _ctx: &AppContext) -> Result<AxumRouter> {\n        let session_config =\n            axum_session::SessionConfig::default().with_table_name(\"sessions_table\");\n\n        let session_store =\n            axum_session::SessionStore::<axum_session::SessionNullPool>::new(None, session_config)\n                .await\n                .unwrap();\n\n        let router = router.layer(axum_session::SessionLayer::new(session_store));\n        Ok(router)\n    }\n    // Other hooks...\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a New Loco App with SaaS Template\nDESCRIPTION: Interactive CLI output showing how to create a new Loco application using the SaaS app template with client-side rendering, SQLite database, and async background workers.\nSOURCE: https://github.com/loco-rs/loco/blob/master/docs-site/content/docs/getting-started/tour/index.md#2025-04-20_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\n❯ loco new\n✔ ❯ App name? · myapp\n✔ ❯ What would you like to build? · Saas App with client side rendering\n✔ ❯ Select a DB Provider · Sqlite\n✔ ❯ Select your background worker type · Async (in-process tokio async tasks)\n\n🚂 Loco app generated successfully in:\nmyapp/\n\n- assets: You've selected `clientside` for your asset serving configuration.\n\nNext step, build your frontend:\n  $ cd frontend/\n  $ npm install && npm run build\n```\n\n----------------------------------------\n\nTITLE: Basic Cache Operations in Loco\nDESCRIPTION: Demonstrates common cache operations including inserting items with and without expiration times, and retrieving cached values. Shows how to work with the cache API using string keys and values.\nSOURCE: https://github.com/loco-rs/loco/blob/master/docs-site/content/docs/infrastructure/cache.md#2025-04-20_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nuse std::time::Duration;\nuse loco_rs::cache;\n\nasync fn test_cache(ctx: AppContext) {\n\n    // insert an item into the cache\n    ctx.cache.insert(\"key\", \"value\").await;\n\n    // insert an item into the cache that expires after a Duration\n    ctx.cache.insert_with_expiry(\"key\", \"value\", Duration::from_secs(300)).await;\n\n    // retrieve an item from cache\n    let value = ctx.cache.get(\"key\").await.unwrap();\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring In-Memory Cache Driver in Loco\nDESCRIPTION: Shows how to enable caching by implementing an in-memory cache driver through the after_context hook in app.rs. This replaces the default Null driver with a functioning cache implementation.\nSOURCE: https://github.com/loco-rs/loco/blob/master/docs-site/content/docs/infrastructure/cache.md#2025-04-20_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\nuse loco_rs::cache;\n\nasync fn after_context(ctx: AppContext) -> Result<AppContext> {\n    Ok(AppContext {\n        cache: cache::Cache::new(cache::drivers::inmem::new()).into(),\n        ..ctx\n    })\n}\n```\n\n----------------------------------------\n\nTITLE: API Authentication Endpoint Implementation\nDESCRIPTION: Rust code example demonstrating how to create an API-authenticated endpoint using API keys\nSOURCE: https://github.com/loco-rs/loco/blob/master/docs-site/content/docs/extras/authentication.md#2025-04-20_snippet_8\n\nLANGUAGE: rust\nCODE:\n```\nuse loco_rs::prelude::*;\nuse loco_rs::controller::middleware;\nuse crate::{models::_entities::users, views::user::CurrentResponse};\n\nasync fn current_by_api_key(\n    auth: middleware::auth::ApiToken<users::Model>,\n    State(_ctx): State<AppContext>,\n) -> Result<Response> {\n    format::json(CurrentResponse::new(&auth.user))\n}\n\npub fn routes() -> Routes {\n    Routes::new()\n        .prefix(\"user\")\n        .add(\"/current-api\", get(current_by_api_key))\n}\n```\n\n----------------------------------------\n\nTITLE: Manual Controller Implementation\nDESCRIPTION: Shows how to manually create a new controller with a hello route handler and route configuration.\nSOURCE: https://github.com/loco-rs/loco/blob/master/docs-site/content/docs/getting-started/guide.md#2025-04-20_snippet_5\n\nLANGUAGE: rust\nCODE:\n```\nuse loco_rs::prelude::*;\n\nasync fn hello(State(_ctx): State<AppContext>) -> Result<Response> {\n    format::text(\"ola, mundo\")\n}\n\npub fn routes() -> Routes {\n    Routes::new().prefix(\"home\").add(\"/hello\", get(hello))\n}\n```\n\n----------------------------------------\n\nTITLE: Handling File Uploads in a Loco Controller\nDESCRIPTION: Implements a controller function that handles multipart file uploads using the configured storage system to save files.\nSOURCE: https://github.com/loco-rs/loco/blob/master/docs-site/content/docs/infrastructure/storage.md#2025-04-20_snippet_5\n\nLANGUAGE: rust\nCODE:\n```\nasync fn upload_file(\n    State(ctx): State<AppContext>,\n    mut multipart: Multipart,\n) -> Result<Response> {\n    let mut file = None;\n    while let Some(field) = multipart.next_field().await.map_err(|err| {\n        tracing::error!(error = ?err,\"could not readd multipart\");\n        Error::BadRequest(\"could not readd multipart\".into())\n    })? {\n        let file_name = match field.file_name() {\n            Some(file_name) => file_name.to_string(),\n            _ => return Err(Error::BadRequest(\"file name not found\".into())),\n        };\n\n        let content = field.bytes().await.map_err(|err| {\n            tracing::error!(error = ?err,\"could not readd bytes\");\n            Error::BadRequest(\"could not readd bytes\".into())\n        })?;\n\n        let path = PathBuf::from(\"folder\").join(file_name);\n        ctx.storage.as_ref().upload(path.as_path(), &content).await?;\n\n        file = Some(path);\n    }\n\n    file.map_or_else(not_found, |path| {\n        format::json(views::upload::Response::new(path.as_path()))\n    })\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Loco and Creating a New Project\nDESCRIPTION: Commands to install the Loco CLI tool and create a new SaaS application project with user authentication and database support.\nSOURCE: https://github.com/loco-rs/loco/blob/master/docs-site/content/blog/axum-session.md#2025-04-20_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n$ cargo install loco\n$ loco new\n✔ ❯ App name? · myapp\n? ❯ What would you like to build? ›\n  lightweight-service (minimal, only controllers and views)\n  Rest API (with DB and user auth)\n❯ SaaS app (with DB and user auth)\n```\n\n----------------------------------------\n\nTITLE: Defining Routes in Controllers\nDESCRIPTION: Basic route configuration in a Loco controller with GET and POST endpoints\nSOURCE: https://github.com/loco-rs/loco/blob/master/docs-site/content/docs/the-app/controller.md#2025-04-20_snippet_7\n\nLANGUAGE: rust\nCODE:\n```\nuse axum::routing::{get, post};\nRoutes::new()\n    .add(\"/\", get(hello))\n    .add(\"/echo\", post(echo))\n```\n\n----------------------------------------\n\nTITLE: Creating a Pagination View in Loco-rs\nDESCRIPTION: Definition of a custom pagination view for notes data. This code creates structured response objects that maintain consistent pagination formatting across different API endpoints. It includes transformations from database models to response DTOs.\nSOURCE: https://github.com/loco-rs/loco/blob/master/docs-site/content/docs/the-app/controller.md#2025-04-20_snippet_47\n\nLANGUAGE: rust\nCODE:\n```\nuse loco_rs::{\n    controller::views::pagination::{Pager, PagerMeta},\n    prelude::model::query::PaginatedResponse,\n};\nuse serde::{Deserialize, Serialize};\n\nuse crate::models::_entities::notes;\n\n#[derive(Debug, Deserialize, Serialize)]\npub struct ListResponse {\n    id: i32,\n    title: Option<String>,\n    content: Option<String>,\n}\n\n#[derive(Debug, Deserialize, Serialize)]\npub struct PaginationResponse {}\n\nimpl From<notes::Model> for ListResponse {\n    fn from(note: notes::Model) -> Self {\n        Self {\n            id: note.id.clone(),\n            title: note.title.clone(),\n            content: note.content,\n        }\n    }\n}\n\nimpl PaginationResponse {\n    #[must_use]\n    pub fn response(data: PaginatedResponse<notes::Model>, pagination_query: &PaginationQuery) -> Pager<Vec<ListResponse>> {\n        Pager {\n            results: data\n                .page\n                .into_iter()\n                .map(ListResponse::from)\n                .collect::<Vec<ListResponse>>(),\n            info: PagerMeta {\n                page: pagination_query.page,\n                page_size: pagination_query.page_size,\n                total_pages: data.total_pages,\n                total_items: data.total_items,\n            },\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Loco and Required Dependencies\nDESCRIPTION: Commands to install the Loco CLI and Sea-ORM CLI (required when using a database).\nSOURCE: https://github.com/loco-rs/loco/blob/master/docs-site/content/docs/getting-started/starters.md#2025-04-20_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ncargo install loco\ncargo install sea-orm-cli # Only when DB is needed\n```\n\n----------------------------------------\n\nTITLE: Model Testing with Database Setup\nDESCRIPTION: Example of a model test that sets up test data, boots the application, and verifies model functionality. This demonstrates the testing pattern recommended for Loco-rs applications.\nSOURCE: https://github.com/loco-rs/loco/blob/master/docs-site/content/docs/the-app/models.md#2025-04-20_snippet_31\n\nLANGUAGE: rust\nCODE:\n```\nuse loco_rs::testing::prelude::*;\n\n#[tokio::test]\n#[serial]\nasync fn can_find_by_pid() {\n    configure_insta!();\n\n    let boot = boot_test::<App, Migrator>().await;\n    seed::<App>(&boot.app_context).await.unwrap();\n\n    let existing_user =\n        Model::find_by_pid(&boot.app_context.db, \"11111111-1111-1111-1111-111111111111\").await;\n    let non_existing_user_results =\n        Model::find_by_email(&boot.app_context.db, \"23232323-2323-2323-2323-232323232323\").await;\n\n    assert_debug_snapshot!(existing_user);\n    assert_debug_snapshot!(non_existing_user_results);\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Join Table Migration in Loco-rs\nDESCRIPTION: Implementation of a migration that creates a join table for a many-to-many relationship. This example creates a group_users table with references to user and group tables.\nSOURCE: https://github.com/loco-rs/loco/blob/master/docs-site/content/docs/the-app/models.md#2025-04-20_snippet_12\n\nLANGUAGE: rust\nCODE:\n```\nimpl MigrationTrait for Migration {\n    async fn up(&self, m: &SchemaManager) -> Result<(), DbErr> {\n        create_join_table(m, \"group_users\", &[], &[(\"user\", \"\"), (\"group\", \"\")]).await\n    }\n\n    async fn down(&self, m: &SchemaManager) -> Result<(), DbErr> {\n        drop_table(m, \"group_users\").await\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Loco CLI with Cargo\nDESCRIPTION: Command to install the Loco CLI globally using Cargo, making it accessible from anywhere in your terminal. This installs the latest version of the Loco framework.\nSOURCE: https://github.com/loco-rs/loco/blob/master/loco-new/README.md#2025-04-20_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ncargo install loco\n```\n\n----------------------------------------\n\nTITLE: Adding Basic Routes in Loco\nDESCRIPTION: Example of adding basic routes to AppRoutes using home and about handlers\nSOURCE: https://github.com/loco-rs/loco/blob/master/docs-site/content/docs/the-app/controller.md#2025-04-20_snippet_2\n\nLANGUAGE: rust\nCODE:\n```\nuse loco_rs::controller::AppRoutes;\nuse loco_rs::prelude::*;\nuse axum::routing::get;\n\nfn routes(_ctx: &AppContext) -> AppRoutes {\n  AppRoutes::empty()\n          .add_route(Routes::new().add(\"/\", get(home_handler)))\n          .add_route(Routes::new().add(\"/about\", get(about_handler)))\n}\n```\n\n----------------------------------------\n\nTITLE: Extending Loco Model with Custom Functionality in Rust\nDESCRIPTION: Rust code snippet demonstrating how to add custom methods to a Loco model by extending the autogenerated ActiveModel trait.\nSOURCE: https://github.com/loco-rs/loco/blob/master/docs-site/content/docs/the-app/models.md#2025-04-20_snippet_3\n\nLANGUAGE: rust\nCODE:\n```\nimpl super::_entities::users::ActiveModel {\n    /// .\n    ///\n    /// # Errors\n    ///\n    /// .\n    pub fn foobar(&self) -> Result<(), DbErr> {\n        // implement and get back a `user.foobar()`\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Error Handling with Format-Specific Responses in Rust\nDESCRIPTION: This function demonstrates how to handle different error cases and respond with appropriate formats based on content type. It first attempts to load an item, then uses a two-level match statement to handle both the result type and the requested response format.\nSOURCE: https://github.com/loco-rs/loco/blob/master/docs-site/content/docs/the-app/controller.md#2025-04-20_snippet_9\n\nLANGUAGE: rust\nCODE:\n```\npub async fn get_one(\n    respond_to: RespondTo,\n    Path(id): Path<i32>,\n    State(ctx): State<AppContext>,\n) -> Result<Response> {\n    // having `load_item` is useful because inside the function you can call and use\n    // '?' to bubble up errors, then, in here, we centralize handling of errors.\n    // if you want to freely use code statements with no wrapping function, you can\n    // use the experimental `try` feature in Rust where you can do:\n    // ```\n    // let res = try {\n    //     ...\n    //     ...\n    // }\n    //\n    // match res { ..}\n    // ```\n    let res = load_item(&ctx, id).await;\n\n    match res {\n        // we're good, let's render the item based on content type\n        Ok(item) => match respond_to {\n            RespondTo::Html => format::html(&format!(\"<html><body>{:?}</body></html>\", item.title)),\n            _ => format::json(item),\n        },\n        // we have an opinion how to render out validation errors, only in HTML content\n        Err(Error::Model(ModelError::Validation(errors))) => match respond_to {\n            RespondTo::Html => {\n                format::html(&format!(\"<html><body>errors: {errors:?}</body></html>\"))\n            }\n            _ => bad_request(\"opaque message: cannot respond!\"),\n        },\n        // we have no clue what this is, let the framework render default errors\n        Err(err) => Err(err),\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Session Controller with PgPool\nDESCRIPTION: A controller implementation that uses Axum session with PgPool for PostgreSQL-backed session storage.\nSOURCE: https://github.com/loco-rs/loco/blob/master/docs-site/content/blog/axum-session.md#2025-04-20_snippet_8\n\nLANGUAGE: rust\nCODE:\n```\n#![allow(clippy::unused_async)]\nuse axum_session::{Session, SessionPgPool};\nuse loco_rs::prelude::*;\n\npub async fn get_session(session: Session<SessionPgPool>) -> Result<()> {\n    println!(\"{:#?}\", session);\n    format::empty()\n}\n\npub fn routes() -> Routes {\n    Routes::new().prefix(\"mysession\").add(\"/\", get(get_session))\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple Databases in YAML\nDESCRIPTION: YAML configuration for setting up multiple database connections in a multi-tenant scenario. This shows the structure for defining multiple database connections with their parameters.\nSOURCE: https://github.com/loco-rs/loco/blob/master/docs-site/content/docs/the-app/models.md#2025-04-20_snippet_28\n\nLANGUAGE: yaml\nCODE:\n```\nsettings:\n  multi_db: \n    secondary_db:      \n      uri: postgres://loco:loco@localhost:5432/loco_app\n      enable_logging: false      \n      connect_timeout: 500      \n      idle_timeout: 500      \n      min_connections: 1      \n      max_connections: 1      \n      auto_migrate: true      \n      dangerously_truncate: false      \n      dangerously_recreate: false\n    third_db:      \n      uri: postgres://loco:loco@localhost:5432/loco_app\n      enable_logging: false      \n      connect_timeout: 500      \n      idle_timeout: 500      \n      min_connections: 1      \n      max_connections: 1      \n      auto_migrate: true      \n      dangerously_truncate: false      \n      dangerously_recreate: false\n```\n\n----------------------------------------\n\nTITLE: Request Validation with JsonValidate Extractor\nDESCRIPTION: Example of how to use the JsonValidate extractor to automatically validate incoming request data against defined validation rules.\nSOURCE: https://github.com/loco-rs/loco/blob/master/docs-site/content/docs/the-app/controller.md#2025-04-20_snippet_43\n\nLANGUAGE: rust\nCODE:\n```\nuse axum::debug_handler;\nuse loco_rs::prelude::*;\n\n#[debug_handler]\npub async fn index(\n    State(_ctx): State<AppContext>,\n    JsonValidate(params): JsonValidate<DataParams>,\n) -> Result<Response> {\n    format::empty()\n}\n```\n\n----------------------------------------\n\nTITLE: Testing email delivery in Rust\nDESCRIPTION: Example of testing email delivery in a unit test. This shows how to inspect the emails that would have been sent during a test using the deliveries function on the mailer stub.\nSOURCE: https://github.com/loco-rs/loco/blob/master/docs-site/content/docs/processing/mailers.md#2025-04-20_snippet_10\n\nLANGUAGE: rust\nCODE:\n```\nuse loco_rs::testing::prelude::*;\n\n#[tokio::test]\n#[serial]\nasync fn can_register() {\n    configure_insta!();\n\n    request::<App, Migrator, _, _>(|request, ctx| async move {\n        // Create a request for user registration.\n\n        // Now you can call the context mailer and use the deliveries function.\n        with_settings!({\n            filters => cleanup_email()\n        }, {\n            assert_debug_snapshot!(ctx.mailer.unwrap().deliveries());\n        });\n    })\n    .await;\n}\n```\n\n----------------------------------------\n\nTITLE: Database Configuration in Loco-rs\nDESCRIPTION: YAML configuration for database settings in Loco-rs, including connection URI, logging, timeouts, connection pool settings, and migration options for development and testing environments.\nSOURCE: https://github.com/loco-rs/loco/blob/master/docs-site/content/docs/the-app/models.md#2025-04-20_snippet_19\n\nLANGUAGE: yaml\nCODE:\n```\ndatabase:\n  # Database connection URI\n  uri: {{get_env(name=\"DATABASE_URL\", default=\"postgres://loco:loco@localhost:5432/loco_app\")}}\n  # When enabled, the sql query will be logged.\n  enable_logging: false\n  # Set the timeout duration when acquiring a connection.\n  connect_timeout: 500\n  # Set the idle duration before closing a connection.\n  idle_timeout: 500\n  # Minimum number of connections for a pool.\n  min_connections: 1\n  # Maximum number of connections for a pool.\n  max_connections: 1\n  # Run migration up when application loaded\n  auto_migrate: true\n  # Truncate database when application loaded. This is a dangerous operation, make sure that you using this flag only on dev environments or test mode\n  dangerously_truncate: false\n  # Recreating schema when application loaded.  This is a dangerous operation, make sure that you using this flag only on dev environments or test mode\n  dangerously_recreate: false\n```\n\n----------------------------------------\n\nTITLE: Configuring JWT Bearer Authentication in Loco-rs\nDESCRIPTION: This YAML configuration shows how to set up JWT Bearer authentication in a Loco-rs application.\nSOURCE: https://github.com/loco-rs/loco/blob/master/docs-site/content/docs/the-app/controller.md#2025-04-20_snippet_16\n\nLANGUAGE: yaml\nCODE:\n```\n# Authentication Configuration\nauth:\n  # JWT authentication\n  jwt:\n    location: Bearer\n```\n\n----------------------------------------\n\nTITLE: Implementing Route Middleware Layer in Loco Framework\nDESCRIPTION: This code shows the implementation of the Routes.layer method in Loco, which attaches middleware layers to route handlers. It uses tower's Layer and Service traits to process requests through middleware chains before reaching handlers.\nSOURCE: https://github.com/loco-rs/loco/blob/master/docs-site/content/docs/extras/pluggability.md#2025-04-20_snippet_8\n\nLANGUAGE: rust\nCODE:\n```\n// src/controller/routes.rs\nuse axum::{extract::Request, response::IntoResponse, routing::Route};\nuse tower::{Layer, Service};\n\nimpl Routes {\n    pub fn layer<L>(self, layer: L) -> Self\n        where\n            L: Layer<Route> + Clone + Send + 'static,\n            L::Service: Service<Request> + Clone + Send + 'static,\n            <L::Service as Service<Request>>::Response: IntoResponse + 'static,\n            <L::Service as Service<Request>>::Error: Into<Infallible> + 'static,\n            <L::Service as Service<Request>>::Future: Send + 'static,\n    {\n        Self {\n            prefix: self.prefix,\n            handlers: self\n                .handlers\n                .iter()\n                .map(|handler| Handler {\n                    uri: handler.uri.clone(),\n                    actions: handler.actions.clone(),\n                    method: handler.method.clone().layer(layer.clone()),\n                })\n                .collect(),\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Synchronous Controller Testing in Loco-rs\nDESCRIPTION: Example of how to test a controller endpoint synchronously in Loco-rs. This test sends a POST request to an example endpoint and verifies the response using snapshot testing. It demonstrates the basic testing pattern for controller endpoints.\nSOURCE: https://github.com/loco-rs/loco/blob/master/docs-site/content/docs/the-app/controller.md#2025-04-20_snippet_48\n\nLANGUAGE: rust\nCODE:\n```\nuse loco_rs::testing::prelude::*;\n\n#[tokio::test]\n#[serial]\nasync fn can_print_echo() {\n    configure_insta!();\n\n    request::<App, _, _>(|request, _ctx| async move {\n        let response = request\n            .post(\"/example\")\n            .json(&serde_json::json!({\"site\": \"Loco\"}))\n            .await;\n\n        assert_debug_snapshot!((response.status_code(), response.text()));\n    })\n    .await;\n}\n```\n\n----------------------------------------\n\nTITLE: Using Multiple Databases in a Controller\nDESCRIPTION: Example of how to access multiple database connections in a Loco-rs controller. This demonstrates using the MultiDb extension to select a specific database connection for queries.\nSOURCE: https://github.com/loco-rs/loco/blob/master/docs-site/content/docs/the-app/models.md#2025-04-20_snippet_30\n\nLANGUAGE: rust\nCODE:\n```\nuse sea_orm::DatabaseConnection;\nuse axum::{response::IntoResponse, Extension};\nuse loco_rs::db::MultiDb;\n\npub async fn list(\n    State(ctx): State<AppContext>,\n    Extension(multi_db): Extension<MultiDb>,\n) -> Result<impl IntoResponse> {\n  let third_db = multi_db.get(\"third_db\")?;\n  let res = Entity::find().all(third_db).await;\n}\n```\n\n----------------------------------------\n\nTITLE: Content-Type Aware Response Handling\nDESCRIPTION: Implementation of format-aware responses using the RespondTo extractor\nSOURCE: https://github.com/loco-rs/loco/blob/master/docs-site/content/docs/the-app/controller.md#2025-04-20_snippet_8\n\nLANGUAGE: rust\nCODE:\n```\npub async fn get_one(\n    respond_to: RespondTo,\n    Path(id): Path<i32>,\n    State(ctx): State<AppContext>,\n) -> Result<Response> {\n    let res = load_item(&ctx, id).await?;\n    match respond_to {\n        RespondTo::Html => format::html(&format!(\"<html><body>{:?}</body></html>\", item.title)),\n        _ => format::json(item),\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Generating a Posts scaffold with Loco\nDESCRIPTION: Demonstrates how to generate a scaffold for a Posts resource with name, title, and content fields using the API template.\nSOURCE: https://github.com/loco-rs/loco/blob/master/docs-site/content/docs/the-app/your-project.md#2025-04-20_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\ncargo loco generate scaffold posts name:string title:string content:text --api\n```\n\n----------------------------------------\n\nTITLE: Using JWT Authentication in a Loco-rs Controller\nDESCRIPTION: This code demonstrates how to use JWT authentication in a Loco-rs controller function. The auth::JWT parameter triggers authentication validation based on the configured settings.\nSOURCE: https://github.com/loco-rs/loco/blob/master/docs-site/content/docs/the-app/controller.md#2025-04-20_snippet_19\n\nLANGUAGE: rust\nCODE:\n```\nuse loco_rs::prelude::*;\n\nasync fn current(\n    auth: auth::JWT,\n    State(_ctx): State<AppContext>,\n) -> Result<Response> {\n    // Your implementation here\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Scheduler Jobs in YAML\nDESCRIPTION: Example YAML configuration for setting up scheduler jobs, including both shell commands and tasks with different scheduling options and output preferences.\nSOURCE: https://github.com/loco-rs/loco/blob/master/docs-site/content/docs/processing/scheduler.md#2025-04-20_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nscheduler:\n  # Location of shipping the command stdout and stderr.\n  output: stdout\n  # A list of jobs to be scheduled.\n  jobs:\n    # The name of the job.\n    write_content:\n      # by default false meaning executing the the run value as a task. if true execute the run value as shell command\n      shell: true\n      # command to run\n      run: \"echo loco >> ./scheduler.txt\"\n      # The cron expression that defines the job's schedule. \n      schedule: run every 1 second\n      output: silent\n      tags: ['base', 'infra']\n\n    run_task:\n      run: \"foo\"\n      schedule: \"at 10:00 am\"\n      run_on_start: true\n\n    list_if_users:\n      run: \"user_report\"\n      shell: true\n      schedule: \"* 2 * * * *\"\n      tags: ['base', 'users']\n```\n\n----------------------------------------\n\nTITLE: Implementing the Seed Hook in Rust\nDESCRIPTION: Implementation of the seed hook in a Loco-rs application. This code shows how to connect seed files to the application context, enabling database seeding functionality.\nSOURCE: https://github.com/loco-rs/loco/blob/master/docs-site/content/docs/the-app/models.md#2025-04-20_snippet_22\n\nLANGUAGE: rust\nCODE:\n```\nimpl Hooks for App {\n    // Other implementations...\n\n    async fn seed(ctx: &AppContext, base: &Path) -> Result<()> {\n        db::seed::<users::ActiveModel>(&ctx.db, &base.join(\"users.yaml\").display().to_string()).await?;\n        Ok(())\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Background Worker in Rust\nDESCRIPTION: Implementation of a background worker with async trait and perform method in Rust.\nSOURCE: https://github.com/loco-rs/loco/blob/master/docs-site/content/docs/processing/workers.md#2025-04-20_snippet_5\n\nLANGUAGE: rust\nCODE:\n```\n#[async_trait]\nimpl BackgroundWorker<DownloadWorkerArgs> for DownloadWorker {\n    fn build(ctx: &AppContext) -> Self {\n        Self { ctx: ctx.clone() }\n    }\n    async fn perform(&self, args: DownloadWorkerArgs) -> Result<()> {\n        println!(\"================================================\");\n        println!(\"Sending payment report to user {}\", args.user_guid);\n\n        // TODO: Some actual work goes here...\n\n        println!(\"================================================\");\n        Ok(())\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Task Parameters in Rust\nDESCRIPTION: Rust code snippet demonstrating how to access parameters passed to a Loco task within its run method.\nSOURCE: https://github.com/loco-rs/loco/blob/master/docs-site/content/docs/processing/task.md#2025-04-20_snippet_3\n\nLANGUAGE: rust\nCODE:\n```\nasync fn run(&self, app_context: &AppContext, vars: &task::Vars) -> Result<()> {\n    let foo = vars.cli_arg(\"foo\");\n    Ok(())\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring App Routes with AppContext in Loco-rs\nDESCRIPTION: This code snippet shows how to implement the Hooks trait for an App struct, specifically the routes function that accepts an AppContext parameter. This allows middleware to be added to specific routes.\nSOURCE: https://github.com/loco-rs/loco/blob/master/docs-site/content/docs/extras/pluggability.md#2025-04-20_snippet_17\n\nLANGUAGE: rust\nCODE:\n```\n// src/app.rs\npub struct App;\n\n#[async_trait]\nimpl Hooks for App {\n    fn routes(ctx: &AppContext) -> AppRoutes {\n        AppRoutes::with_default_routes()\n            .add_route(\n                controllers::notes::routes(ctx)\n            )\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Async Test Environment with Database Isolation in Rust\nDESCRIPTION: Demonstrates how to set up isolated async tests using boot_test_with_create_db function. Creates a random database schema and handles cleanup after test completion.\nSOURCE: https://github.com/loco-rs/loco/blob/master/docs-site/content/docs/the-app/models.md#2025-04-20_snippet_34\n\nLANGUAGE: rust\nCODE:\n```\nuse loco_rs::testing::prelude::*;\n\n#[tokio::test]\nasync fn boot_test_with_create_db() {\n    let boot = boot_test_with_create_db::<App, Migrator>().await;\n}\n```\n\n----------------------------------------\n\nTITLE: Using API Key Authentication in a Loco-rs Controller\nDESCRIPTION: This code shows how to use API Key authentication in a Loco-rs controller. The auth::ApiToken middleware validates the API key against the user database and loads the corresponding user.\nSOURCE: https://github.com/loco-rs/loco/blob/master/docs-site/content/docs/the-app/controller.md#2025-04-20_snippet_20\n\nLANGUAGE: rust\nCODE:\n```\nuse loco_rs::prelude::*;\n\nasync fn current(\n    auth: auth::ApiToken<users::Model>,\n    State(_ctx): State<AppContext>,\n) -> Result<Response> {\n    // Your implementation here\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Validation Rules with JsonValidate\nDESCRIPTION: Example of how to define validation rules for request data using the validator crate's derive macros with Loco-rs.\nSOURCE: https://github.com/loco-rs/loco/blob/master/docs-site/content/docs/the-app/controller.md#2025-04-20_snippet_42\n\nLANGUAGE: rust\nCODE:\n```\nuse axum::debug_handler;\nuse loco_rs::prelude::*;\nuse serde::Deserialize;\nuse validator::Validate;\n\n#[derive(Debug, Deserialize, Validate)]\npub struct DataParams {\n    #[validate(length(min = 5, message = \"custom message\"))]\n    pub name: String,\n    #[validate(email)]\n    pub email: String,\n}\n```\n\n----------------------------------------\n\nTITLE: Consuming State in Controller Endpoint\nDESCRIPTION: Example of accessing shared state in a controller endpoint using Axum's Extension\nSOURCE: https://github.com/loco-rs/loco/blob/master/docs-site/content/docs/the-app/controller.md#2025-04-20_snippet_6\n\nLANGUAGE: rust\nCODE:\n```\nasync fn candle_llm(Extension(m): Extension<Arc<RwLock<Llama>>>) -> impl IntoResponse {\n    let prompt = \"write binary search\";\n    ...\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a User Report Task in Rust\nDESCRIPTION: Shows a complete implementation of a user report task that queries the database for all users and displays them. It demonstrates how to define task metadata and handle CLI variables.\nSOURCE: https://github.com/loco-rs/loco/blob/master/docs-site/content/docs/getting-started/guide.md#2025-04-20_snippet_15\n\nLANGUAGE: rust\nCODE:\n```\n// find it in `src/tasks/user_report.rs`\n\nuse loco_rs::prelude::*;\nuse loco_rs::task::Vars;\n\nuse crate::models::users;\n\npub struct UserReport;\n\n#[async_trait]\nimpl Task for UserReport {\n    fn task(&self) -> TaskInfo {\n      // description that appears on the CLI\n        TaskInfo {\n            name: \"user_report\".to_string(),\n            detail: \"output a user report\".to_string(),\n        }\n    }\n\n    // variables through the CLI:\n    // `$ cargo loco task name:foobar count:2`\n    // will appear as {\"name\":\"foobar\", \"count\":2} in `vars`\n    async fn run(&self, app_context: &AppContext, vars: &Vars) -> Result<()> {\n        let users = users::Entity::find().all(&app_context.db).await?;\n        println!(\"args: {vars:?}\");\n        println!(\"!!! user_report: listing users !!!\");\n        println!(\"------------------------\");\n        for user in &users {\n            println!(\"user: {}\", user.email);\n        }\n        println!(\"done: {} users\", users.len());\n        Ok(())\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a New Loco Project\nDESCRIPTION: Command to initiate the Loco project creation wizard that guides you through setting up a new project. This interactive process helps configure your project based on your requirements.\nSOURCE: https://github.com/loco-rs/loco/blob/master/loco-new/README.md#2025-04-20_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nloco new\n```\n\n----------------------------------------\n\nTITLE: Database Configuration in Loco (YAML)\nDESCRIPTION: Shows how database connection settings are configured in Loco, simplifying the process and allowing for easy changes without code modifications.\nSOURCE: https://github.com/loco-rs/loco/blob/master/docs-site/content/docs/getting-started/axum-users.md#2025-04-20_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\ndatabase:\n  enable_logging: false\n  connect_timeout: 500\n  idle_timeout: 500\n  min_connections: 1\n  max_connections: 1\n```\n\n----------------------------------------\n\nTITLE: Comparing Axum and Loco Route Definitions (Rust)\nDESCRIPTION: Compares the route definition syntax between Axum and Loco, highlighting Loco's metadata capabilities while maintaining Axum compatibility.\nSOURCE: https://github.com/loco-rs/loco/blob/master/docs-site/content/docs/getting-started/axum-users.md#2025-04-20_snippet_11\n\nLANGUAGE: rust\nCODE:\n```\n// Axum style\npub fn router() -> Router {\n  Router::new()\n        .route(\"/auth/register\", post(create_user))\n        .route(\"/auth/login\", post(login_user))\n}\n\n// Loco style\npub fn routes() -> Routes {\n  Routes::new()\n      .add(\"/auth/register\", post(create_user))\n      .add(\"/auth/login\", post(login_user))\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing the Validatable Trait for Model Validation in Rust\nDESCRIPTION: Example implementation of the Validatable trait for a user entity model, which allows calling validate() directly on user objects for enhanced model validation, introduced in v0.4.0.\nSOURCE: https://github.com/loco-rs/loco/blob/master/CHANGELOG.md#2025-04-20_snippet_9\n\nLANGUAGE: rust\nCODE:\n```\nimpl Validatable for super::_entities::users::ActiveModel {\n    fn validator(&self) -> Box<dyn Validate> {\n        Box::new(Validator {\n            name: self.name.as_ref().to_owned(),\n            email: self.email.as_ref().to_owned(),\n        })\n    }\n}\n\n// now you can call `user.validate()` freely\n```\n\n----------------------------------------\n\nTITLE: Using Seeds in Test Environment\nDESCRIPTION: Example of how to use database seeds in tests. This code demonstrates initializing test data and verifying its existence in the test environment.\nSOURCE: https://github.com/loco-rs/loco/blob/master/docs-site/content/docs/the-app/models.md#2025-04-20_snippet_24\n\nLANGUAGE: rust\nCODE:\n```\nuse loco_rs::testing::prelude::*;\n\n#[tokio::test]\n#[serial]\nasync fn handle_create_with_password_with_duplicate() {\n\n    let boot = boot_test::<App, Migrator>().await;\n    seed::<App>(&boot.app_context).await.unwrap();\n    assert!(get_user_by_id(1).ok());\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring View Engine in Loco-rs Initializers\nDESCRIPTION: Implementation of the after_routes method in a view engine initializer, showing how to set up Tera templates with hot reload for debug builds and internationalization support.\nSOURCE: https://github.com/loco-rs/loco/blob/master/CHANGELOG.md#2025-04-20_snippet_2\n\nLANGUAGE: rust\nCODE:\n```\n// src/initializers/view_engine.rs\nasync fn after_routes(&self, router: AxumRouter, _ctx: &AppContext) -> Result<AxumRouter> {\n    #[allow(unused_mut)]\n    let mut tera_engine = engines::TeraView::build()?;\n    if std::path::Path::new(I18N_DIR).exists() {\n        let arc = ArcLoader::builder(&I18N_DIR, unic_langid::langid!(\"en-US\"))\n            .shared_resources(Some(&[I18N_SHARED.into()]))\n            .customize(|bundle| bundle.set_use_isolating(false))\n            .build()\n            .map_err(|e| Error::string(&e.to_string()))?;\n        #[cfg(debug_assertions)]\n        tera_engine\n            .tera\n            .lock()\n            .expect(\"lock\")\n            .register_function(\"t\", FluentLoader::new(arc));\n\n        #[cfg(not(debug_assertions))]\n        tera_engine\n            .tera\n            .register_function(\"t\", FluentLoader::new(arc));\n        info!(\"locales loaded\");\n    }\n\n    Ok(router.layer(Extension(ViewEngine::from(tera_engine))))\n}\n```\n\n----------------------------------------\n\nTITLE: Testing File Storage in Loco Applications\nDESCRIPTION: Creates a test for file upload functionality that verifies both the upload process and retrieval of the stored file content.\nSOURCE: https://github.com/loco-rs/loco/blob/master/docs-site/content/docs/infrastructure/storage.md#2025-04-20_snippet_6\n\nLANGUAGE: rust\nCODE:\n```\nuse loco_rs::testing::prelude::*;\n\n#[tokio::test]\n#[serial]\nasync fn can_register() {\n    request::<App, _, _>(|request, ctx| async move {\n        let file_content = \"loco file upload\";\n        let file_part = Part::bytes(file_content.as_bytes()).file_name(\"loco.txt\");\n\n        let multipart_form = MultipartForm::new().add_part(\"file\", file_part);\n\n        let response = request.post(\"/upload/file\").multipart(multipart_form).await;\n\n        response.assert_status_ok();\n\n        let res: views::upload::Response = serde_json::from_str(&response.text()).unwrap();\n\n        let stored_file: String = ctx.storage.as_ref().download(&res.path).await.unwrap();\n\n        assert_eq!(stored_file, file_content);\n    })\n    .await;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a New Loco App with SaaS Starter\nDESCRIPTION: Command to create a new Loco application using the SaaS starter template, which includes database and user authentication functionality.\nSOURCE: https://github.com/loco-rs/loco/blob/master/docs-site/content/blog/frontend-website.md#2025-04-20_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n& loco new\n✔ ❯ App name? · todolist\n✔ ❯ What would you like to build? · SaaS app (with DB and user auth)\n\n🚂 Loco app generated successfully in:\n/tmp/todolist\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Request Payload Limit in Loco-rs\nDESCRIPTION: This YAML configuration demonstrates how to customize the maximum allowed request payload size in a Loco-rs application.\nSOURCE: https://github.com/loco-rs/loco/blob/master/docs-site/content/docs/the-app/controller.md#2025-04-20_snippet_22\n\nLANGUAGE: yaml\nCODE:\n```\n#...\n  middlewares:\n    limit_payload:\n      body_limit: 5mb\n```\n\n----------------------------------------\n\nTITLE: Database Playground Example\nDESCRIPTION: Demonstrates how to use the playground.rs file to experiment with database queries and models.\nSOURCE: https://github.com/loco-rs/loco/blob/master/docs-site/content/docs/getting-started/guide.md#2025-04-20_snippet_7\n\nLANGUAGE: rust\nCODE:\n```\nuse loco_rs::{cli::playground, prelude::*};\nuse myapp::{app::App, models::_entities::articles};\n\n#[tokio::main]\nasync fn main() -> loco_rs::Result<()> {\n    let ctx = playground::<App>().await?;\n\n    let res = articles::Entity::find().all(&ctx.db).await.unwrap();\n    println!(\"{:?}\", res);\n\n    Ok(())\n}\n```\n\n----------------------------------------\n\nTITLE: Generating a New Loco Model with References\nDESCRIPTION: Shell command to generate a new Loco model with fields and a reference to another model using the Loco CLI.\nSOURCE: https://github.com/loco-rs/loco/blob/master/docs-site/content/docs/the-app/models.md#2025-04-20_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\n$ cargo loco generate model posts title:string! content:text user:references\n```\n\n----------------------------------------\n\nTITLE: Nesting Routes in Loco\nDESCRIPTION: Example of implementing nested route hierarchies with prefix and API versioning\nSOURCE: https://github.com/loco-rs/loco/blob/master/docs-site/content/docs/the-app/controller.md#2025-04-20_snippet_4\n\nLANGUAGE: rust\nCODE:\n```\nuse loco_rs::controller::AppRoutes;\nuse loco_rs::prelude::*;\nuse axum::routing::get;\n\nfn routes(_ctx: &AppContext) -> AppRoutes {\n  let route = Routes::new().add(\"/\", get(|| async { \"notes\" }));\n  AppRoutes::with_default_routes()\n        .prefix(\"api\")\n        .add_route(controllers::auth::routes())\n        .nest_prefix(\"v1\")\n        .nest_route(\"/notes\", route)\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Mirror Strategy for Storage Replication\nDESCRIPTION: Sets up a mirror storage strategy that replicates operations across multiple storage providers with a specific failure mode policy.\nSOURCE: https://github.com/loco-rs/loco/blob/master/docs-site/content/docs/infrastructure/storage.md#2025-04-20_snippet_3\n\nLANGUAGE: rust\nCODE:\n```\n// Define the mirror strategy by setting the primary store and secondary stores by names.\nlet strategy = Box::new(MirrorStrategy::new(\n    \"store_1\",\n    Some(vec![\"store_2\".to_string(), \"store_3\".to_string()]),\n    FailureMode::MirrorAll,\n)) as Box<dyn StorageStrategy>;\n\n// Create the storage with the store mapping and the strategy.\n let storage = Storage::new(\n    BTreeMap::from([\n        (\"store_1\".to_string(), aws_1),\n        (\"store_2\".to_string(), azure),\n        (\"store_3\".to_string(), aws_2),\n    ]),\n    strategy.into(),\n);\n```\n\n----------------------------------------\n\nTITLE: Registering Worker in App Hooks\nDESCRIPTION: Code for registering a worker in the application hooks implementation.\nSOURCE: https://github.com/loco-rs/loco/blob/master/docs-site/content/docs/processing/workers.md#2025-04-20_snippet_6\n\nLANGUAGE: rust\nCODE:\n```\n#[async_trait]\nimpl Hooks for App {\n//..    \n    async fn connect_workers(ctx: &AppContext, queue: &Queue) -> Result<()> {\n        queue.register(DownloadWorker::build(ctx)).await?;\n        Ok(())\n    }\n// ..\n}\n```\n\n----------------------------------------\n\nTITLE: Building Loco Application for Production\nDESCRIPTION: Command to build a release version of the Loco application for deployment, creating an optimized binary for the target server architecture.\nSOURCE: https://github.com/loco-rs/loco/blob/master/docs-site/content/docs/infrastructure/deployment.md#2025-04-20_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ncargo build --release\n```\n\n----------------------------------------\n\nTITLE: HTMX-Compatible Secure Headers Configuration\nDESCRIPTION: YAML configuration for secure headers that allows inline scripts and HTMX usage with modified Content-Security-Policy.\nSOURCE: https://github.com/loco-rs/loco/blob/master/docs-site/content/docs/the-app/controller.md#2025-04-20_snippet_36\n\nLANGUAGE: yaml\nCODE:\n```\nsecure_headers:\n    preset: github\n    overrides:\n        # this allows you to use HTMX, and has unsafe-inline. Remove or consider in production\n        \"Content-Security-Policy\": \"default-src 'self' https:; font-src 'self' https: data:; img-src 'self' https: data:; object-src 'none'; script-src 'unsafe-inline' 'self' https:; style-src 'self' https: 'unsafe-inline'\"\n```\n\n----------------------------------------\n\nTITLE: Setting default email address for a mailer in Rust\nDESCRIPTION: Example of overriding the default email address for a specific mailer by implementing the opts function in the Mailer trait.\nSOURCE: https://github.com/loco-rs/loco/blob/master/docs-site/content/docs/processing/mailers.md#2025-04-20_snippet_3\n\nLANGUAGE: rust\nCODE:\n```\nimpl Mailer for AuthMailer {\n    fn opts() -> MailerOpts {\n        MailerOpts {\n            from: // set your from email,\n            ..Default::default()\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Axum Session Initializer Implementation\nDESCRIPTION: Example implementation of an initializer for integrating Axum session support\nSOURCE: https://github.com/loco-rs/loco/blob/master/docs-site/content/docs/extras/pluggability.md#2025-04-20_snippet_5\n\nLANGUAGE: rust\nCODE:\n```\n#[async_trait]\nimpl Initializer for AxumSessionInitializer {\n    fn name(&self) -> String {\n        \"axum-session\".to_string()\n    }\n\n    async fn after_routes(&self, router: AxumRouter, _ctx: &AppContext) -> Result<AxumRouter> {\n        let session_config =\n            axum_session::SessionConfig::default().with_table_name(\"sessions_table\");\n        let session_store =\n            axum_session::SessionStore::<axum_session::SessionNullPool>::new(None, session_config)\n                .await\n                .unwrap();\n        let router = router.layer(axum_session::SessionLayer::new(session_store));\n        Ok(router)\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Multiple Storage Drivers for Advanced Strategies\nDESCRIPTION: Creates multiple storage drivers for different cloud providers that can be used with advanced storage strategies.\nSOURCE: https://github.com/loco-rs/loco/blob/master/docs-site/content/docs/infrastructure/storage.md#2025-04-20_snippet_2\n\nLANGUAGE: rust\nCODE:\n```\nuse crate::storage::{drivers, Storage};\n\nlet aws_1 = drivers::aws::new(\"users\");\nlet azure = drivers::azure::new(\"users\");\nlet aws_2 = drivers::aws::new(\"users-mirror\");\n```\n\n----------------------------------------\n\nTITLE: Basic Loco-rs Configuration with Tera Template\nDESCRIPTION: Example of a basic Loco-rs configuration file using Tera templating for environment variables. Shows server port and host configuration with the get_env function for dynamic values.\nSOURCE: https://github.com/loco-rs/loco/blob/master/docs-site/content/docs/the-app/your-project.md#2025-04-20_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\n# every configuration file is a valid Tera template\nserver:\n  # Port on which the server will listen. the server binding is 0.0.0.0:{PORT}\n  port:  {{/* get_env(name=\"NODE_PORT\", default=5150) */}}\n  # The UI hostname or IP address that mailers will point to.\n  host: http://localhost\n  # Out of the box middleware configuration. to disable middleware you can changed the `enable` field to `false` of comment the middleware block\n```\n\n----------------------------------------\n\nTITLE: Installing Loco CLI with Cargo\nDESCRIPTION: Command to install the Loco CLI tool using Cargo package manager.\nSOURCE: https://github.com/loco-rs/loco/blob/master/loco-cli/README.md#2025-04-20_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ncargo install loco-cli\n```\n\n----------------------------------------\n\nTITLE: Using Render with Etag for Response Formatting\nDESCRIPTION: Example of using the format::render builder with etag for caching and JSON response.\nSOURCE: https://github.com/loco-rs/loco/blob/master/CHANGELOG.md#2025-04-20_snippet_16\n\nLANGUAGE: rust\nCODE:\n```\nformat::render()\n    .etag(\"foobar\")?\n    .json(Entity::find().all(&ctx.db).await?)\n```\n\n----------------------------------------\n\nTITLE: Configuring Single Storage Driver with In-Memory Storage\nDESCRIPTION: Initializes the storage system with a single in-memory driver by modifying the AppContext in the after_context hook function.\nSOURCE: https://github.com/loco-rs/loco/blob/master/docs-site/content/docs/infrastructure/storage.md#2025-04-20_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nuse loco_rs::storage;\n\nasync fn after_context(ctx: AppContext) -> Result<AppContext> {\n    Ok(AppContext {\n        storage: Storage::single(storage::drivers::mem::new()).into(),\n        ..ctx\n    })\n}\n```\n\n----------------------------------------\n\nTITLE: Defining LoginResponse JSON View in Rust\nDESCRIPTION: This code defines a LoginResponse struct that shapes the JSON response for a login request. It uses serde for serialization and includes methods to create a new response from user and token data.\nSOURCE: https://github.com/loco-rs/loco/blob/master/docs-site/content/docs/the-app/views.md#2025-04-20_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nuse serde::{Deserialize, Serialize};\n\nuse crate::models::_entities::users;\n\n#[derive(Debug, Deserialize, Serialize)]\npub struct LoginResponse {\n    pub token: String,\n    pub pid: String,\n    pub name: String,\n}\n\nimpl LoginResponse {\n    #[must_use]\n    pub fn new(user: &users::Model, token: &String) -> Self {\n        Self {\n            token: token.to_string(),\n            pid: user.pid.to_string(),\n            name: user.name.clone(),\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Hooks Interface with AppContext in Rust\nDESCRIPTION: Migration code for adding AppContext parameter to the routes hook function in the App implementation.\nSOURCE: https://github.com/loco-rs/loco/blob/master/CHANGELOG.md#2025-04-20_snippet_12\n\nLANGUAGE: rust\nCODE:\n```\n// src/app.rs: add app context to routes function\nimpl Hooks for App {\n  ...\n  fn routes(_ctx: &AppContext) -> AppRoutes;\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Data Fix Migration in Loco-rs\nDESCRIPTION: Template for implementing a data fix within a migration using raw SQL. This pattern allows executing arbitrary SQL queries in the migration process.\nSOURCE: https://github.com/loco-rs/loco/blob/master/docs-site/content/docs/the-app/models.md#2025-04-20_snippet_17\n\nLANGUAGE: rust\nCODE:\n```\n  async fn up(&self, manager: &SchemaManager) -> Result<(), DbErr> {\n\n    let db = manager.get_connection();\n    \n    // issue SQL queries with `db`\n    // https://www.sea-ql.org/SeaORM/docs/basic-crud/raw-sql/#use-raw-query--execute-interface\n\n    Ok(())\n  }\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Logger Initialization in Loco Application\nDESCRIPTION: This snippet shows how to override Loco's default logging initialization by implementing the init_logger hook in App struct. Return Ok(true) to signal you've taken over logger initialization, or Ok(false) to use Loco's default logging stack.\nSOURCE: https://github.com/loco-rs/loco/blob/master/docs-site/content/docs/extras/pluggability.md#2025-04-20_snippet_7\n\nLANGUAGE: rust\nCODE:\n```\n// in src/app.rs\nimpl Hooks for App {\n    // return `Ok(true)` if you took over initializing logger\n    // otherwise, return `Ok(false)` to use the Loco logging stack.\n    fn init_logger(_config: &config::Config, _env: &Environment) -> Result<bool> {\n        Ok(false)\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Session Controller with NullPool\nDESCRIPTION: A controller implementation that uses Axum session with NullPool for in-memory session storage.\nSOURCE: https://github.com/loco-rs/loco/blob/master/docs-site/content/blog/axum-session.md#2025-04-20_snippet_4\n\nLANGUAGE: rust\nCODE:\n```\n#![allow(clippy::unused_async)]\nuse axum_session::{Session, SessionNullPool};\nuse loco_rs::prelude::*;\n\npub async fn get_session(session: Session<SessionNullPool>) -> Result<()> {\n    println!(\"{:#?}\", session);\n    format::empty()\n}\n\npub fn routes() -> Routes {\n    Routes::new().prefix(\"mysession\").add(\"/\", get(get_session))\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Columns Migration in Loco-rs\nDESCRIPTION: Migration implementation for adding a new column to an existing table. This example adds an 'amount' decimal column to the 'users' table with appropriate up and down methods.\nSOURCE: https://github.com/loco-rs/loco/blob/master/docs-site/content/docs/the-app/models.md#2025-04-20_snippet_13\n\nLANGUAGE: rust\nCODE:\n```\nimpl MigrationTrait for Migration {\n    async fn up(&self, m: &SchemaManager) -> Result<(), DbErr> {\n        add_column(m, \"users\", \"amount\", ColType::DecimalLenNull(24,8)).await?;\n        Ok(())\n    }\n\n    async fn down(&self, m: &SchemaManager) -> Result<(), DbErr> {\n        remove_column(m, \"users\", \"amount\").await?;\n        Ok(())\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Background Queue Worker Mode in YAML\nDESCRIPTION: YAML configuration for setting up background queue worker mode in Loco application.\nSOURCE: https://github.com/loco-rs/loco/blob/master/docs-site/content/docs/processing/workers.md#2025-04-20_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nworkers:\n  mode: BackgroundQueue\n```\n\n----------------------------------------\n\nTITLE: Adding Route-Level Middleware in Rust\nDESCRIPTION: Implementation of adding middleware at the route level in the application hooks configuration.\nSOURCE: https://github.com/loco-rs/loco/blob/master/docs-site/content/docs/extras/pluggability.md#2025-04-20_snippet_13\n\nLANGUAGE: rust\nCODE:\n```\npub struct App;\n\n#[async_trait]\nimpl Hooks for App {\n    fn routes(_ctx: &AppContext) -> AppRoutes {\n        AppRoutes::with_default_routes()\n            .add_route(\n                controllers::auth::routes()\n                    .layer(middlewares::log::LogLayer::new()),\n            )\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: CORS Middleware Configuration\nDESCRIPTION: YAML configuration for enabling and configuring Cross-Origin Resource Sharing (CORS) middleware with customizable origins, methods, and headers.\nSOURCE: https://github.com/loco-rs/loco/blob/master/docs-site/content/docs/the-app/controller.md#2025-04-20_snippet_39\n\nLANGUAGE: yaml\nCODE:\n```\n#...\nmiddlewares:\n  ...\n  cors:\n    enable: true\n    # Set the value of the [`Access-Control-Allow-Origin`][mdn] header\n    # allow_origins:\n    #   - https://loco.rs\n    # Set the value of the [`Access-Control-Allow-Headers`][mdn] header\n    # allow_headers:\n    # - Content-Type\n    # Set the value of the [`Access-Control-Allow-Methods`][mdn] header\n    # allow_methods:\n    #   - POST\n    # Set the value of the [`Access-Control-Max-Age`][mdn] header in seconds\n    # max_age: 3600\n```\n\n----------------------------------------\n\nTITLE: Basic Pagination in Loco-rs\nDESCRIPTION: Demonstrates how to implement basic pagination for data queries in Loco-rs. This snippet uses the fetch_page function to retrieve a specific page of data from a database entity.\nSOURCE: https://github.com/loco-rs/loco/blob/master/docs-site/content/docs/the-app/controller.md#2025-04-20_snippet_45\n\nLANGUAGE: rust\nCODE:\n```\nuse loco_rs::prelude::*;\n\nlet res = query::fetch_page(&ctx.db, notes::Entity::find(), &query::PaginationQuery::page(2)).await;\n```\n\n----------------------------------------\n\nTITLE: Postgres Queue Backend Configuration\nDESCRIPTION: YAML configuration for setting up Postgres as the queue backend with connection URI and worker settings.\nSOURCE: https://github.com/loco-rs/loco/blob/master/docs-site/content/docs/processing/workers.md#2025-04-20_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nqueue:\n  kind: Postgres\n  uri: \"{{ get_env(name=\\\"PGQ_URL\\\", default=\\\"postgres://localhost:5432/mydb\\\") }}\"\n  dangerously_flush: false\n  num_workers: 2\n```\n\n----------------------------------------\n\nTITLE: Configuring JWT Authentication for Production\nDESCRIPTION: YAML configuration for JWT authentication settings, defining the secret key for token generation/verification and the token expiration time in seconds.\nSOURCE: https://github.com/loco-rs/loco/blob/master/docs-site/content/docs/infrastructure/deployment.md#2025-04-20_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nauth:\n  # JWT authentication\n  jwt:\n    # Secret key for token generation and verification\n    secret: PqRwLF2rhHe8J22oBeHy\n    # Token expiration time in seconds\n    expiration: 604800 # 7 days\n```\n\n----------------------------------------\n\nTITLE: Using an existing mailer in a controller (Rust)\nDESCRIPTION: Example of sending an email from a controller by calling the AuthMailer's send_welcome method. This enqueues a mail delivery job that will be processed in the background.\nSOURCE: https://github.com/loco-rs/loco/blob/master/docs-site/content/docs/processing/mailers.md#2025-04-20_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\nuse crate::{\n    mailers::auth::AuthMailer,\n}\n\n// in your controllers/auth.rs\nasync fn register(\n    State(ctx): State<AppContext>,\n    Json(params): Json<RegisterParams>,\n) -> Result<Response> {\n    // .. register a user ..\n    AuthMailer::send_welcome(&ctx, &user.email).await.unwrap();\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Deployment Templates with Loco\nDESCRIPTION: Command to generate deployment infrastructure using Loco's deployment template system, which offers options for Docker, Shuttle, and Nginx configurations.\nSOURCE: https://github.com/loco-rs/loco/blob/master/docs-site/content/docs/infrastructure/deployment.md#2025-04-20_snippet_8\n\nLANGUAGE: sh\nCODE:\n```\ncargo loco generate deployment\n? ❯ Choose your deployment ›\n❯ Docker\n❯ Shuttle\n❯ Nginx\n\n..\n✔ ❯ Choose your deployment · Docker\nskipped (exists): \"dockerfile\"\nadded: \".dockerignore\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Logger Settings in YAML\nDESCRIPTION: Configuration options for application logging including log levels, format, and filtering settings in development.yaml\nSOURCE: https://github.com/loco-rs/loco/blob/master/docs-site/content/docs/extras/pluggability.md#2025-04-20_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nlogger:\n  enable: true\n  pretty_backtrace: true\n  level: debug\n  format: compact\n  # override_filter: trace\n```\n\n----------------------------------------\n\nTITLE: Implementing User Authentication Routes in Loco Framework\nDESCRIPTION: Demonstrates how to create authenticated user endpoints in Loco using Rust. The code shows a current user endpoint implementation with authentication middleware and route configuration.\nSOURCE: https://github.com/loco-rs/loco/blob/master/docs-site/content/blog/hello-world.md#2025-04-20_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\nasync fn current(\n    auth: middleware::auth::Auth,\n    State(ctx): State<AppContext>,\n) -> Result<Response> {\n    let user = users::Model::find_by_pid(&ctx.db, &auth.claims.pid).await?;\n    format::json(CurrentResponse::new(&user))\n}\n\npub fn routes() -> Routes {\n    Routes::new().prefix(\"user\").add(\"/current\", get(current))\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Database Connection for Production\nDESCRIPTION: YAML configuration for database settings, including connection URI, logging, timeouts, connection pool settings, and migration options for the application database.\nSOURCE: https://github.com/loco-rs/loco/blob/master/docs-site/content/docs/infrastructure/deployment.md#2025-04-20_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\ndatabase:\n  # Database connection URI\n  uri: {{get_env(name=\"DATABASE_URL\", default=\"postgres://loco:loco@localhost:5432/loco_app\")}}\n  # When enabled, the sql query will be logged.\n  enable_logging: false\n  # Set the timeout duration when acquiring a connection.\n  connect_timeout: 500\n  # Set the idle duration before closing a connection.\n  idle_timeout: 500\n  # Minimum number of connections for a pool.\n  min_connections: 1\n  # Maximum number of connections for a pool.\n  max_connections: 1\n  # Run migration up when application loaded\n  auto_migrate: true\n  # Truncate database when application loaded. This is a dangerous operation, make sure that you using this flag only on dev environments or test mode\n  dangerously_truncate: false\n  # Recreating schema when application loaded.  This is a dangerous operation, make sure that you using this flag only on dev environments or test mode\n  dangerously_recreate: false\n```\n\n----------------------------------------\n\nTITLE: Returning Validation Errors as JSON in Loco-rs\nDESCRIPTION: Example of a structured JSON response format when using JsonValidateWithMessage for validation errors. The response includes detailed error information with codes, messages, and parameters.\nSOURCE: https://github.com/loco-rs/loco/blob/master/docs-site/content/docs/the-app/controller.md#2025-04-20_snippet_44\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"errors\": {\n    \"email\": [\n      {\n        \"code\": \"email\",\n        \"message\": null,\n        \"params\": {\n          \"value\": \"ad\"\n        }\n      }\n    ],\n    \"name\": [\n      {\n        \"code\": \"length\",\n        \"message\": \"custom message\",\n        \"params\": {\n          \"min\": 5,\n          \"value\": \"d\"\n        }\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Database Seeding Test Setup in Rust\nDESCRIPTION: Shows how to implement database seeding in tests using the seed helper function. Includes user existence verification after seeding.\nSOURCE: https://github.com/loco-rs/loco/blob/master/docs-site/content/docs/the-app/models.md#2025-04-20_snippet_35\n\nLANGUAGE: rust\nCODE:\n```\nuse loco_rs::testing::prelude::*;\n\n#[tokio::test]\n#[serial]\nasync fn is_user_exists() {\n    configure_insta!();\n\n    let boot = boot_test::<App, Migrator>().await;\n    seed::<App>(&boot.app_context).await.unwrap();\n    assert!(get_user_by_id(1).ok());\n\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Login Request in Rust Controller\nDESCRIPTION: This snippet shows a Rust controller function that handles a user login request. It demonstrates parsing the request, creating domain objects, and using a LoginResponse view to shape the final JSON response.\nSOURCE: https://github.com/loco-rs/loco/blob/master/docs-site/content/docs/the-app/views.md#2025-04-20_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\nuse crate::{views::auth::LoginResponse};\nasync fn login(\n    State(ctx): State<AppContext>,\n    Json(params): Json<LoginParams>,\n) -> Result<Response> {\n    // Fetching the user model with the requested parameters\n    // let user = users::Model::find_by_email(&ctx.db, &params.email).await?;\n\n    // Formatting the JSON response using LoginResponse view\n    format::json(LoginResponse::new(&user, &token))\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Up Hot Reloading with cargo-watch\nDESCRIPTION: Command to use cargo-watch for automatically reloading the Loco server during development when Rust code changes are detected, ignoring frontend files.\nSOURCE: https://github.com/loco-rs/loco/blob/master/docs-site/content/blog/frontend-website.md#2025-04-20_snippet_11\n\nLANGUAGE: sh\nCODE:\n```\n$ cargo watch --ignore \"frontend\" -x check -s 'cargo run start'\n```\n\n----------------------------------------\n\nTITLE: Configuring Static Middleware in Loco\nDESCRIPTION: YAML configuration to enable static file serving in Loco's development configuration, pointing to the frontend build directory and setting up a fallback for client-side routing.\nSOURCE: https://github.com/loco-rs/loco/blob/master/docs-site/content/blog/frontend-website.md#2025-04-20_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\nserver:\n  middlewares:\n    static:\n      enable: true\n      must_exist: true\n      folder:\n        uri: \"/\"\n        path: \"frontend/dist\"\n      fallback: \"frontend/dist/index.html\"\n```\n\n----------------------------------------\n\nTITLE: Registering a Controller in Loco-rs App Hooks\nDESCRIPTION: This code shows how to register a custom controller in the App hooks implementation. It adds a controller's routes to AppRoutes with a specified prefix.\nSOURCE: https://github.com/loco-rs/loco/blob/master/docs-site/content/docs/the-app/controller.md#2025-04-20_snippet_10\n\nLANGUAGE: rust\nCODE:\n```\n// src/app.rs\n\npub struct App;\n#[async_trait]\nimpl Hooks for App {\n    fn routes() -> AppRoutes {\n        AppRoutes::with_default_routes().prefix(\"prefix\")\n            .add_route(controllers::example::routes())\n    }\n    ...\n}\n```\n\n----------------------------------------\n\nTITLE: Running mailer worker with Loco CLI (Bash)\nDESCRIPTION: Commands to run the background worker for processing mail jobs. These commands show how to run the worker alone or together with the server.\nSOURCE: https://github.com/loco-rs/loco/blob/master/docs-site/content/docs/processing/mailers.md#2025-04-20_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\ncargo loco start --worker\n```\n\nLANGUAGE: bash\nCODE:\n```\ncargo loco start --server-and-worker\n```\n\n----------------------------------------\n\nTITLE: Querying Posts with SeaORM in Rust\nDESCRIPTION: Demonstrates how to query all posts from the database using SeaORM ORM\nSOURCE: https://github.com/loco-rs/loco/blob/master/docs-site/content/docs/getting-started/guide.md#2025-04-20_snippet_8\n\nLANGUAGE: rust\nCODE:\n```\nlet res = articles::Entity::find().all(&ctx.db).await.unwrap();\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom View Engine in Rust\nDESCRIPTION: This code demonstrates how to create a custom view engine in Rust for the Loco framework. It implements a simple 'Hello' view engine that always returns the word 'hello'.\nSOURCE: https://github.com/loco-rs/loco/blob/master/docs-site/content/docs/the-app/views.md#2025-04-20_snippet_6\n\nLANGUAGE: rust\nCODE:\n```\n// src/initializers/hello_view_engine.rs\nuse axum::{Extension, Router as AxumRouter};\nuse async_trait::async_trait;\nuse loco_rs::{\n    app::{AppContext, Initializer},\n    controller::views::{ViewEngine, ViewRenderer},\n    Result,\n};\nuse serde::Serialize;\n\n#[derive(Clone)]\npub struct HelloView;\nimpl ViewRenderer for HelloView {\n    fn render<S: Serialize>(&self, _key: &str, _data: S) -> Result<String> {\n        Ok(\"hello\".to_string())\n    }\n}\n\npub struct HelloViewEngineInitializer;\n#[async_trait]\nimpl Initializer for HelloViewEngineInitializer {\n    fn name(&self) -> String {\n        \"custom-view-engine\".to_string()\n    }\n\n    async fn after_routes(&self, router: AxumRouter, _ctx: &AppContext) -> Result<AxumRouter> {\n        Ok(router.layer(Extension(ViewEngine::from(HelloView))))\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Model with References in Loco-rs\nDESCRIPTION: Example command demonstrating how to generate a model with different field types including references to other models following Loco-rs naming conventions.\nSOURCE: https://github.com/loco-rs/loco/blob/master/docs-site/content/docs/the-app/models.md#2025-04-20_snippet_8\n\nLANGUAGE: sh\nCODE:\n```\n$ cargo loco generate model movies long_title:string added_by:references:users director:references\n```\n\n----------------------------------------\n\nTITLE: Configuring JWT Cookie Authentication in Loco-rs\nDESCRIPTION: This YAML configuration demonstrates how to set up JWT authentication using cookies in a Loco-rs application.\nSOURCE: https://github.com/loco-rs/loco/blob/master/docs-site/content/docs/the-app/controller.md#2025-04-20_snippet_17\n\nLANGUAGE: yaml\nCODE:\n```\n# Authentication Configuration\nauth:\n  # JWT authentication\n  jwt:\n    location: \n      from: Cookie\n      name: token\n```\n\n----------------------------------------\n\nTITLE: Running Scheduler Jobs by Tag\nDESCRIPTION: Command to run multiple jobs that share the same tag, allowing for grouped execution of related jobs.\nSOURCE: https://github.com/loco-rs/loco/blob/master/docs-site/content/docs/processing/scheduler.md#2025-04-20_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\nLOCO_ENV=production cargo loco scheduler --tag 'maintenance'\n```\n\n----------------------------------------\n\nTITLE: Snapshot Testing with Data Cleanup in Rust\nDESCRIPTION: Demonstrates snapshot testing implementation with dynamic data cleanup using insta crate. Uses cleanup_user_model to sanitize user model data for consistent snapshots.\nSOURCE: https://github.com/loco-rs/loco/blob/master/docs-site/content/docs/the-app/models.md#2025-04-20_snippet_36\n\nLANGUAGE: rust\nCODE:\n```\nuse loco_rs::testing::prelude::*;\n\n#[tokio::test]\n#[serial]\nasync fn can_create_user() {\n    request::<App, Migrator, _, _>(|request, _ctx| async move {\n        // create user test\n        with_settings!({{\n            filters => cleanup_user_model()\n        }}, {{\n            assert_debug_snapshot!(current_user_request.text());\n        }});\n    })\n    .await;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Migration Structure in Loco-rs\nDESCRIPTION: Creating the basic migration structure by defining a Migration struct with the DeriveMigrationName trait, which is required for all Loco-rs migrations.\nSOURCE: https://github.com/loco-rs/loco/blob/master/docs-site/content/docs/the-app/models.md#2025-04-20_snippet_10\n\nLANGUAGE: rust\nCODE:\n```\n#[derive(DeriveMigrationName)]\npub struct Migration;\n```\n\n----------------------------------------\n\nTITLE: Registering Tasks in Rust Application for Loco-rs\nDESCRIPTION: Example of how to register tasks in a Loco-rs application's app.rs file, with a required injection comment for the task generator to work properly.\nSOURCE: https://github.com/loco-rs/loco/blob/master/CHANGELOG.md#2025-04-20_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\nfn register_tasks(tasks: &mut Tasks) {\n    tasks.register(tasks::user_report::UserReport);\n    tasks.register(tasks::seed::SeedData);\n    tasks.register(tasks::foo::Foo);\n    // tasks-inject (do not remove)\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Loco Task Manually\nDESCRIPTION: Rust code example for creating a task manually in the Loco framework. It defines a struct and implements the Task trait with necessary methods.\nSOURCE: https://github.com/loco-rs/loco/blob/master/docs-site/content/docs/processing/task.md#2025-04-20_snippet_5\n\nLANGUAGE: rust\nCODE:\n```\nuse loco_rs::prelude::*;\n\npub struct Foo;\n#[async_trait]\nimpl Task for Foo {\n    fn task(&self) -> TaskInfo {\n        TaskInfo {\n            name: \"foo\".to_string(),\n            detail: \"run foo task\".to_string(),\n        }\n    }\n    async fn run(&self, _app_context: &AppContext, _vars: &task::Vars) -> Result<()> {\n        Ok(())\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Controller Routes in Loco App\nDESCRIPTION: This Rust code snippet shows how to register controller routes in the Loco app structure. It demonstrates adding custom routes to the default routes.\nSOURCE: https://github.com/loco-rs/loco/blob/master/docs-site/content/docs/the-app/views.md#2025-04-20_snippet_5\n\nLANGUAGE: rust\nCODE:\n```\npub struct App;\n#[async_trait]\nimpl Hooks for App {\n    // omitted for brevity\n\n    fn routes(_ctx: &AppContext) -> AppRoutes {\n        AppRoutes::with_default_routes()\n            .add_route(controllers::auth::routes())\n            // include your controller's routes here\n            .add_route(controllers::dashboard::routes())\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Comments Controller with Article Relations\nDESCRIPTION: Implementation of comments controller with article relationships\nSOURCE: https://github.com/loco-rs/loco/blob/master/docs-site/content/docs/getting-started/guide.md#2025-04-20_snippet_12\n\nLANGUAGE: rust\nCODE:\n```\npub struct Params {\n    pub content: Option<String>,\n    pub article_id: i32,\n}\n\nimpl Params {\n    fn update(&self, item: &mut ActiveModel) {\n        item.content = Set(self.content.clone());\n        item.article_id = Set(self.article_id.clone());\n    }\n}\n\npub fn routes() -> Routes {\n    Routes::new()\n        .prefix(\"api/comments\")\n        .add(\"/\", post(add))\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Database Context to Axum Router (Rust)\nDESCRIPTION: Demonstrates how the database connection is made available to routes in the Axum project, requiring manual wiring in the main function.\nSOURCE: https://github.com/loco-rs/loco/blob/master/docs-site/content/docs/getting-started/axum-users.md#2025-04-20_snippet_6\n\nLANGUAGE: rust\nCODE:\n```\n.layer(AddExtensionLayer::new(ApiContext {\n            config: Arc::new(config),\n            db,\n        }))\n```\n\n----------------------------------------\n\nTITLE: Database Migration Implementation\nDESCRIPTION: Shows the generated migration code for creating an Articles table with title and content fields.\nSOURCE: https://github.com/loco-rs/loco/blob/master/docs-site/content/docs/getting-started/guide.md#2025-04-20_snippet_6\n\nLANGUAGE: rust\nCODE:\n```\n#[async_trait::async_trait]\nimpl MigrationTrait for Migration {\n    async fn up(&self, manager: &SchemaManager) -> Result<(), DbErr> {\n        manager\n            .create_table(\n                table_auto_tz(Articles::Table)\n                    .col(pk_auto(Articles::Id))\n                    .col(string_null(Articles::Title))\n                    .col(text(Articles::Content))\n                    .to_owned(),\n            )\n            .await\n    }\n\n    async fn down(&self, manager: &SchemaManager) -> Result<(), DbErr> {\n        manager\n            .drop_table(Table::drop().table(Articles::Table).to_owned())\n            .await\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Testing a Worker with ForegroundBlocking Mode in Rust\nDESCRIPTION: This example demonstrates how to test a worker background job using Loco-rs. It sets up a test environment, executes the worker in ForegroundBlocking mode to ensure synchronous execution, and provides a placeholder for additional assertions to validate the worker's behavior.\nSOURCE: https://github.com/loco-rs/loco/blob/master/docs-site/content/docs/processing/workers.md#2025-04-20_snippet_9\n\nLANGUAGE: rust\nCODE:\n```\nuse loco_rs::testing::prelude::*;\n\n#[tokio::test]\n#[serial]\nasync fn test_run_report_worker_worker() {\n    // Set up the test environment\n    let boot = boot_test::<App, Migrator>().await.unwrap();\n\n    // Execute the worker in 'ForegroundBlocking' mode, preventing it from running asynchronously\n    assert!(\n        ReportWorkerWorker::perform_later(&boot.app_context, ReportWorkerWorkerArgs {})\n            .await\n            .is_ok()\n    );\n\n    // Include additional assert validations after the execution of the worker\n}\n```\n\n----------------------------------------\n\nTITLE: Required Imports for Loco-rs Migrations\nDESCRIPTION: Essential imports needed to use the Loco-rs migrations DSL, including the schema module from loco_rs and the SeaORM migration prelude.\nSOURCE: https://github.com/loco-rs/loco/blob/master/docs-site/content/docs/the-app/models.md#2025-04-20_snippet_9\n\nLANGUAGE: rust\nCODE:\n```\nuse loco_rs::schema::*;\nuse sea_orm_migration::prelude::*;\n```\n\n----------------------------------------\n\nTITLE: Implementing Content Negotiation with Format Extractor in Rust\nDESCRIPTION: Example of using the Format extractor and respond_to pattern to handle content negotiation, returning different formats (HTML or JSON) based on request headers.\nSOURCE: https://github.com/loco-rs/loco/blob/master/CHANGELOG.md#2025-04-20_snippet_11\n\nLANGUAGE: rust\nCODE:\n```\npub async fn get_one(\n    Format(respond_to): Format,\n    Path(id): Path<i32>,\n    State(ctx): State<AppContext>,\n) -> Result<Response> {\n    let item = load_item(&ctx, id).await?;\n    match respond_to {\n        RespondTo::Html => format::html(&format!(\"<html><body>{:?}</body></html>\", item.title)),\n        _ => format::json(item),\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Authenticable Trait for User Model\nDESCRIPTION: Migration code for adding API token authentication by implementing the Authenticable trait for user models.\nSOURCE: https://github.com/loco-rs/loco/blob/master/CHANGELOG.md#2025-04-20_snippet_17\n\nLANGUAGE: rust\nCODE:\n```\n#[async_trait]\nimpl Authenticable for super::_entities::users::Model {\n    async fn find_by_api_key(db: &DatabaseConnection, api_key: &str) -> ModelResult<Self> {\n        let user = users::Entity::find()\n            .filter(users::Column::ApiKey.eq(api_key))\n            .one(db)\n            .await?;\n        user.ok_or_else(|| ModelError::EntityNotFound)\n    }\n\n    async fn find_by_claims_key(db: &DatabaseConnection, claims_key: &str) -> ModelResult<Self> {\n        super::_entities::users::Model::find_by_pid(db, claims_key).await\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Running a Loco Task with Parameters\nDESCRIPTION: Commands to run a Loco task with additional parameters and how to access these parameters within the task's run method.\nSOURCE: https://github.com/loco-rs/loco/blob/master/docs-site/content/docs/processing/task.md#2025-04-20_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\n[PARAMS]...  Task params (e.g. <`my_task`> foo:bar baz:qux)\n```\n\nLANGUAGE: sh\nCODE:\n```\ncargo loco task <TASK_NAME> [PARAMS]...\n```\n\n----------------------------------------\n\nTITLE: Inserting Posts with Playground\nDESCRIPTION: Example of inserting a new post using the playground functionality with ActiveModel\nSOURCE: https://github.com/loco-rs/loco/blob/master/docs-site/content/docs/getting-started/guide.md#2025-04-20_snippet_9\n\nLANGUAGE: rust\nCODE:\n```\nasync fn main() -> loco_rs::Result<()> {\n    let ctx = playground::<App>().await?;\n\n    // add this:\n    let active_model: articles::ActiveModel = articles::ActiveModel {\n        title: Set(Some(\"how to build apps in 3 steps\".to_string())),\n        content: Set(Some(\"use Loco: https://loco.rs\".to_string())),\n        ..Default::default()\n    };\n    active_model.insert(&ctx.db).await.unwrap();\n\n    let res = articles::Entity::find().all(&ctx.db).await.unwrap();\n    println!(\"{:?}\", res);\n\n    Ok(())\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Deployment Files with Loco CLI\nDESCRIPTION: This snippet shows how to use the Loco CLI to generate deployment files, including a Dockerfile and .dockerignore.\nSOURCE: https://github.com/loco-rs/loco/blob/master/docs-site/content/blog/deploy-aws.md#2025-04-20_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\n$ cargo loco generate deployment\n? ❯ Choose your deployment ›\n❯ Docker\n  Shuttle\n\nadded: \"dockerfile\"\nadded: \".dockerignore\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Security Groups for Load Balancer in Terraform\nDESCRIPTION: Defines a security group for the load balancer that allows inbound HTTP traffic and all outbound traffic, setting up basic access controls for the application.\nSOURCE: https://github.com/loco-rs/loco/blob/master/docs-site/content/blog/deploy-aws.md#2025-04-20_snippet_12\n\nLANGUAGE: hcl\nCODE:\n```\nresource \"aws_security_group\" \"load_balancer_security_group\" {\n  ingress {\n    from_port   = 80\n    to_port     = 80\n    protocol    = \"tcp\"\n    cidr_blocks = [\"0.0.0.0/0\"]\n  }\n  egress {\n    from_port   = 0\n    to_port     = 0\n    protocol    = \"-1\"\n    cidr_blocks = [\"0.0.0.0/0\"]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Starting a Loco application\nDESCRIPTION: Shows the command to start a Loco application server.\nSOURCE: https://github.com/loco-rs/loco/blob/master/docs-site/content/docs/the-app/your-project.md#2025-04-20_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\ncargo loco start\n```\n\n----------------------------------------\n\nTITLE: Adding State with Lifecycle Hooks\nDESCRIPTION: Implementation of state management using Axum's Extension and lifecycle hooks\nSOURCE: https://github.com/loco-rs/loco/blob/master/docs-site/content/docs/the-app/controller.md#2025-04-20_snippet_5\n\nLANGUAGE: rust\nCODE:\n```\nasync fn after_routes(router: axum::Router, _ctx: &AppContext) -> Result<axum::Router> {\n    println!(\"loading model\");\n    let model = Llama::builder()\n        .with_source(LlamaSource::llama_7b_code())\n        .build()\n        .unwrap();\n    println!(\"model ready\");\n    let st = Arc::new(RwLock::new(model));\n\n    Ok(router.layer(Extension(st)))\n}\n```\n\n----------------------------------------\n\nTITLE: Initializer Trait Definition\nDESCRIPTION: Rust trait definition for implementing custom initializers with before_run and after_routes hooks\nSOURCE: https://github.com/loco-rs/loco/blob/master/docs-site/content/docs/extras/pluggability.md#2025-04-20_snippet_4\n\nLANGUAGE: rust\nCODE:\n```\npub trait Initializer: Sync + Send {\n    fn name(&self) -> String;\n\n    async fn before_run(&self, _app_context: &AppContext) -> Result<()> {\n        Ok(())\n    }\n\n    async fn after_routes(&self, router: AxumRouter, _ctx: &AppContext) -> Result<AxumRouter> {\n        Ok(router)\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using RemoteIP in a Controller\nDESCRIPTION: Rust code example demonstrating how to use the RemoteIP extractor in a controller to access the client's IP address.\nSOURCE: https://github.com/loco-rs/loco/blob/master/docs-site/content/docs/the-app/controller.md#2025-04-20_snippet_32\n\nLANGUAGE: rust\nCODE:\n```\n#[debug_handler]\npub async fn list(ip: RemoteIP, State(ctx): State<AppContext>) -> Result<Response> {\n    println!(\"remote ip {ip}\");\n    format::json(Entity::find().all(&ctx.db).await?)\n}\n```\n\n----------------------------------------\n\nTITLE: Running Database Migration Rollback in Loco-rs\nDESCRIPTION: Command to rollback the last migration in a Loco-rs project. This undoes the changes made by the most recent migration, assuming the appropriate code for down migration was implemented.\nSOURCE: https://github.com/loco-rs/loco/blob/master/docs-site/content/docs/the-app/models.md#2025-04-20_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\ncargo loco db down\n```\n\n----------------------------------------\n\nTITLE: Configuring JWT Query Parameter Authentication in Loco-rs\nDESCRIPTION: This YAML configuration shows how to set up JWT authentication using query parameters in a Loco-rs application.\nSOURCE: https://github.com/loco-rs/loco/blob/master/docs-site/content/docs/the-app/controller.md#2025-04-20_snippet_18\n\nLANGUAGE: yaml\nCODE:\n```\n# Authentication Configuration\nauth:\n  # JWT authentication\n  jwt:\n    location: \n      from: Query\n      name: token\n```\n\n----------------------------------------\n\nTITLE: Configuring IAM Roles for ECS Task Execution in Terraform\nDESCRIPTION: Sets up IAM roles and policies needed for ECS task execution, allowing the ECS service to pull images from ECR and write logs to CloudWatch.\nSOURCE: https://github.com/loco-rs/loco/blob/master/docs-site/content/blog/deploy-aws.md#2025-04-20_snippet_10\n\nLANGUAGE: hcl\nCODE:\n```\nresource \"aws_iam_role\" \"ecsTaskExecutionRole\" {\n  name               = \"ecsTaskExecutionRoleMyapp\"\n  assume_role_policy = data.aws_iam_policy_document.assume_role_policy.json\n}\n\ndata \"aws_iam_policy_document\" \"assume_role_policy\" {\n  statement {\n    actions = [\"sts:AssumeRole\"]\n\n    principals {\n      type        = \"Service\"\n      identifiers = [\"ecs-tasks.amazonaws.com\"]\n    }\n  }\n}\n\nresource \"aws_iam_role_policy_attachment\" \"ecsTaskExecutionRole_policy\" {\n  role       = aws_iam_role.ecsTaskExecutionRole.name\n  policy_arn = \"arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy\"\n}\n```\n\n----------------------------------------\n\nTITLE: SQLite Queue Backend Configuration\nDESCRIPTION: YAML configuration for setting up SQLite as the queue backend with connection URI and worker settings.\nSOURCE: https://github.com/loco-rs/loco/blob/master/docs-site/content/docs/processing/workers.md#2025-04-20_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nqueue:\n  kind: Sqlite\n  uri: \"{{ get_env(name=\\\"SQLTQ_URL\\\", default=\\\"sqlite://loco_development.sqlite?mode=rwc\\\") }}\"\n  dangerously_flush: false\n  num_workers: 2\n```\n\n----------------------------------------\n\nTITLE: Viewing Authentication Routes with Loco CLI\nDESCRIPTION: Command to display available authentication routes in a Loco.rs application\nSOURCE: https://github.com/loco-rs/loco/blob/master/docs-site/content/docs/extras/authentication.md#2025-04-20_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n$ cargo loco routes\n```\n\n----------------------------------------\n\nTITLE: Creating an Index with Advanced Migration in Loco-rs\nDESCRIPTION: Advanced migration for adding an index to a table. This example creates an index named 'idx-movies-rating' on the 'Rating' column of the 'Movies' table.\nSOURCE: https://github.com/loco-rs/loco/blob/master/docs-site/content/docs/the-app/models.md#2025-04-20_snippet_16\n\nLANGUAGE: rust\nCODE:\n```\n  manager\n    .create_index(\n        Index::create()\n            .name(\"idx-movies-rating\")\n            .table(Movies::Table)\n            .col(Movies::Rating)\n            .to_owned(),\n    )\n    .await;\n```\n\n----------------------------------------\n\nTITLE: Creating a YAML Seed File for Database Records\nDESCRIPTION: An example YAML seed file structure for database records, showing required and optional fields for a users table. This illustrates how to format seed data based on database constraints.\nSOURCE: https://github.com/loco-rs/loco/blob/master/docs-site/content/docs/the-app/models.md#2025-04-20_snippet_20\n\nLANGUAGE: yaml\nCODE:\n```\n---\n- id: 1\n  email: user1@example.com\n  password: \"$2b$12$gf4o2FShIahg/GY6YkK2wOcs8w4.lu444wP6BL3FyjX0GsxnEV6ZW\"\n  created_at: \"2023-11-12T12:34:56.789\"\n- id: 2\n  pid: 22222222-2222-2222-2222-222222222222\n  email: user2@example.com\n  reset_token: \"SJndjh2389hNJKnJI90U32NKJ\"\n  password: \"$2b$12$gf4o2FShIahg/GY6YkK2wOcs8w4.lu444wP6BL3FyjX0GsxnEV6ZW\"\n  created_at: \"2023-11-12T12:34:56.789\"\n```\n\n----------------------------------------\n\nTITLE: Adding Middleware to Specific Routes in Loco-rs\nDESCRIPTION: This snippet demonstrates how to add a middleware layer to a specific route in a Loco-rs application. It shows the configuration of routes for a 'notes' controller, applying a LogLayer middleware to the 'create' endpoint.\nSOURCE: https://github.com/loco-rs/loco/blob/master/docs-site/content/docs/extras/pluggability.md#2025-04-20_snippet_18\n\nLANGUAGE: rust\nCODE:\n```\n// src/controllers/notes.rs\npub fn routes(ctx: &AppContext) -> Routes {\n    Routes::new()\n        .prefix(\"notes\")\n        .add(\"/create\", post(create).layer(middlewares::log::LogLayer::new(ctx)))\n}\n```\n\n----------------------------------------\n\nTITLE: Building Docker Image for Loco App\nDESCRIPTION: This snippet demonstrates how to build a Docker image for the Loco application using the generated Dockerfile.\nSOURCE: https://github.com/loco-rs/loco/blob/master/docs-site/content/blog/deploy-aws.md#2025-04-20_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\n$ docker build -t myapp .\n\n[+] Building 237.1s (16/16) FINISHED                                                                                                               docker:desktop-linux\n => [internal] load build definition from dockerfile                                                                                                               0.0s\n => => transferring dockerfile: 331B                                                                                                                               0.0s\n ...\n => => writing image sha256:07416ca8195e4026ab65bc567f990ea83141aa10890f8443deb8f54a8bae7f0a                                                                       0.0s\n => => naming to docker.io/library/myapp\n```\n\n----------------------------------------\n\nTITLE: Configuring ECS Service for Fargate Deployment in Terraform\nDESCRIPTION: Sets up an ECS service that runs the task definition on Fargate, configuring networking, security groups, and load balancer integration for the application.\nSOURCE: https://github.com/loco-rs/loco/blob/master/docs-site/content/blog/deploy-aws.md#2025-04-20_snippet_16\n\nLANGUAGE: hcl\nCODE:\n```\nresource \"aws_ecs_service\" \"myapp\" {\n  name            = \"myapp-service\"\n  cluster         = aws_ecs_cluster.myapp_cluster.id\n  task_definition = aws_ecs_task_definition.myapp_task.arn\n  launch_type     = \"FARGATE\"\n  desired_count   = 1\n\n  load_balancer {\n    target_group_arn = aws_lb_target_group.myapp.arn\n    container_name   = aws_ecs_task_definition.myapp_task.family\n    container_port   = 5150\n  }\n\n  network_configuration {\n    assign_public_ip = false\n\n    security_groups = [\n      aws_security_group.egress_all.id,\n      aws_security_group.ingress_api.id,\n    ]\n\n    subnets = [\n    aws_subnet.private_d.id,\n    aws_subnet.private_e.id,\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a mailer in Rust\nDESCRIPTION: Example implementation of a mailer in auth.rs. This shows how to define a welcome email method that uses a template directory and passes arguments to the email template.\nSOURCE: https://github.com/loco-rs/loco/blob/master/docs-site/content/docs/processing/mailers.md#2025-04-20_snippet_7\n\nLANGUAGE: rust\nCODE:\n```\nstatic welcome: Dir<'_> = include_dir!(\"src/mailers/auth/welcome\");\nimpl AuthMailer {\n    /// Sending welcome email the the given user\n    ///\n    /// # Errors\n    ///\n    /// When email sending is failed\n    pub async fn send_welcome(ctx: &AppContext, _user_id: &str) -> Result<()> {\n        Self::mail_template(\n            ctx,\n            &welcome,\n            Args {\n                to: \"foo@example.com\".to_string(),\n                locals: json!({\n                  \"name\": \"joe\"\n                }),\n                ..Default::default()\n            },\n        )\n        .await?;\n        Ok(())\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Database Connection Setup in Axum (Rust)\nDESCRIPTION: Shows how database connection and pool are set up in the Axum project, requiring manual configuration in the main function.\nSOURCE: https://github.com/loco-rs/loco/blob/master/docs-site/content/docs/getting-started/axum-users.md#2025-04-20_snippet_5\n\nLANGUAGE: rust\nCODE:\n```\nlet db = PgPoolOptions::new()\n    .max_connections(50)\n    .connect(&config.database_url)\n    .await\n    .context(\"could not connect to database_url\")?\n```\n\n----------------------------------------\n\nTITLE: Registering Application Initializers\nDESCRIPTION: Example of registering multiple initializers in the application context\nSOURCE: https://github.com/loco-rs/loco/blob/master/docs-site/content/docs/extras/pluggability.md#2025-04-20_snippet_6\n\nLANGUAGE: rust\nCODE:\n```\n    async fn initializers(_ctx: &AppContext) -> Result<Vec<Box<dyn Initializer>>> {\n        let initializers: Vec<Box<dyn Initializer>> = vec![\n            Box::new(initializers::axum_session::AxumSessionInitializer),\n            Box::new(initializers::view_engine::ViewEngineInitializer),\n            Box::new(initializers::hello_view_engine::HelloViewEngineInitializer),\n        ];\n\n        Ok(initializers)\n    }\n```\n\n----------------------------------------\n\nTITLE: Creating a New Loco Project Using Templates\nDESCRIPTION: Interactive CLI command showing how to create a new Loco project with prompts for app name, type, database provider, and worker configuration.\nSOURCE: https://github.com/loco-rs/loco/blob/master/docs-site/content/docs/getting-started/starters.md#2025-04-20_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\n❯ loco new\n✔ ❯ App name? · myapp\n✔ ❯ What would you like to build? · Saas App with client side rendering\n✔ ❯ Select a DB Provider · Sqlite\n✔ ❯ Select your background worker type · Async (in-process tokio async tasks)\n\n🚂 Loco app generated successfully in:\nmyapp/\n\n- assets: You've selected `clientside` for your asset serving configuration.\n\nNext step, build your frontend:\n  $ cd frontend/\n  $ npm install && npm run build\n```\n\n----------------------------------------\n\nTITLE: Configuring Middleware in Loco (YAML)\nDESCRIPTION: Shows how to set up middleware in Loco's configuration file, demonstrating the ease of toggling features without code changes.\nSOURCE: https://github.com/loco-rs/loco/blob/master/docs-site/content/docs/getting-started/axum-users.md#2025-04-20_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nserver:\n  middlewares:\n    limit_payload:\n      body_limit: 5mb\n  # .. more middleware below ..\n```\n\n----------------------------------------\n\nTITLE: Disabling Fallback Middleware\nDESCRIPTION: YAML configuration to disable the default fallback middleware in Loco to ensure static content is properly served, which is necessary when the static handler is enabled.\nSOURCE: https://github.com/loco-rs/loco/blob/master/docs-site/content/blog/frontend-website.md#2025-04-20_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\nserver:\n  middlewares:\n    fallback:\n      enable: false\n    static:\n      ...\n```\n\n----------------------------------------\n\nTITLE: Handler-based Middleware Example\nDESCRIPTION: Example of applying a middleware layer to a specific handler using the layer method in a routes function.\nSOURCE: https://github.com/loco-rs/loco/blob/master/docs-site/content/docs/the-app/controller.md#2025-04-20_snippet_40\n\nLANGUAGE: rust\nCODE:\n```\n// src/controllers/auth.rs\npub fn routes() -> Routes {\n    Routes::new()\n        .prefix(\"auth\")\n        .add(\"/register\", post(register).layer(middlewares::log::LogLayer::new()))\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Middleware to Auth Handler in Rust\nDESCRIPTION: Shows how to add logging middleware to a specific authentication route handler using the LogLayer.\nSOURCE: https://github.com/loco-rs/loco/blob/master/docs-site/content/docs/extras/pluggability.md#2025-04-20_snippet_11\n\nLANGUAGE: rust\nCODE:\n```\npub fn routes() -> Routes {\n    Routes::new()\n        .prefix(\"auth\")\n        .add(\"/register\", post(register).layer(middlewares::log::LogLayer::new()))\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Vite Frontend with React\nDESCRIPTION: Commands to set up a new Vite project with React in the 'frontend' folder, including installation of dependencies and starting the development server.\nSOURCE: https://github.com/loco-rs/loco/blob/master/docs-site/content/blog/frontend-website.md#2025-04-20_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\n$ npm create vite@latest\nNeed to install the following packages:\n  create-vite@5.1.0\nOk to proceed? (y) y\n✔ Project name: … frontend\n✔ Select a framework: › React\n✔ Select a variant: › JavaScript\n```\n\n----------------------------------------\n\nTITLE: Route-based Middleware Example\nDESCRIPTION: Example of applying a middleware layer to an entire route group using the layer method in the Hooks implementation.\nSOURCE: https://github.com/loco-rs/loco/blob/master/docs-site/content/docs/the-app/controller.md#2025-04-20_snippet_41\n\nLANGUAGE: rust\nCODE:\n```\n// src/main.rs\npub struct App;\n\n#[async_trait]\nimpl Hooks for App {\n    fn routes(_ctx: &AppContext) -> AppRoutes {\n        AppRoutes::with_default_routes()\n            .add_route(\n                controllers::auth::routes()\n                    .layer(middlewares::log::LogLayer::new()),\n            )\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Redis Queue for Production\nDESCRIPTION: YAML configuration for the application's queue system using Redis, including the connection URI and options for data management during startup.\nSOURCE: https://github.com/loco-rs/loco/blob/master/docs-site/content/docs/infrastructure/deployment.md#2025-04-20_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nqueue:\n  kind: Redis\n  # Redis connection URI\n  uri: {{ get_env(name=\"REDIS_URL\", default=\"redis://127.0.0.1\") }}\n  # Dangerously flush all data in Redis on startup. dangerous operation, make sure that you using this flag only on dev environments or test mode\n  dangerously_flush: false\n```\n\n----------------------------------------\n\nTITLE: Accessing Protected Endpoints with JWT Authentication\nDESCRIPTION: cURL command to access a protected endpoint by sending a GET request with the Bearer token authentication header. This demonstrates how to make authenticated requests after login.\nSOURCE: https://github.com/loco-rs/loco/blob/master/docs-site/content/docs/getting-started/tour/index.md#2025-04-20_snippet_8\n\nLANGUAGE: sh\nCODE:\n```\n$ curl --location --request GET 'localhost:5150/api/auth/current' \\\n     --header 'Content-Type: application/json' \\\n     --header 'Authorization: Bearer TOKEN'\n```\n\n----------------------------------------\n\nTITLE: Adding Axum Session Dependency for Memory Store\nDESCRIPTION: Cargo.toml dependency for Axum session with default features disabled for in-memory session storage.\nSOURCE: https://github.com/loco-rs/loco/blob/master/docs-site/content/blog/axum-session.md#2025-04-20_snippet_1\n\nLANGUAGE: toml\nCODE:\n```\naxum_session = {version = \"0.10.1\", default-features = false}\n```\n\n----------------------------------------\n\nTITLE: Creating New Loco Application\nDESCRIPTION: Interactive CLI command output showing the process of creating a new Loco application with options for SaaS setup, database selection, and worker configuration.\nSOURCE: https://github.com/loco-rs/loco/blob/master/README.md#2025-04-20_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\n❯ loco new\n✔ ❯ App name? · myapp\n✔ ❯ What would you like to build? · Saas App with client side rendering\n✔ ❯ Select a DB Provider · Sqlite\n✔ ❯ Select your background worker type · Async (in-process tokio async tasks)\n\n🚂 Loco app generated successfully in:\nmyapp/\n\n- assets: You've selected `clientside` for your asset serving configuration.\n\nNext step, build your frontend:\n  $ cd frontend/\n  $ npm install && npm run build\n```\n\n----------------------------------------\n\nTITLE: Loading Multi-DB Initializer in Rust\nDESCRIPTION: Code for setting up the multi-database initializer in a Loco-rs application. This shows how to register the multi-database initializer in the application's initialization hook.\nSOURCE: https://github.com/loco-rs/loco/blob/master/docs-site/content/docs/the-app/models.md#2025-04-20_snippet_29\n\nLANGUAGE: rust\nCODE:\n```\nasync fn initializers(ctx: &AppContext) -> Result<Vec<Box<dyn Initializer>>> {\n        let  initializers: Vec<Box<dyn Initializer>> = vec![\n            Box::new(loco_rs::initializers::multi_db::MultiDbInitializer),\n        ];\n\n        Ok(initializers)\n    }\n```\n\n----------------------------------------\n\nTITLE: Custom Settings Configuration in YAML\nDESCRIPTION: Example of adding custom settings to a Loco-rs configuration file. Shows how to define an allow list of domains in the settings section of the configuration file.\nSOURCE: https://github.com/loco-rs/loco/blob/master/docs-site/content/docs/the-app/your-project.md#2025-04-20_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\nsettings:\n  allow_list:\n    - google.com\n    - apple.com\n```\n\n----------------------------------------\n\nTITLE: Configuring SMTP Mailer for Production\nDESCRIPTION: YAML configuration for the application's email service, specifying SMTP server details including host, port, secure connection settings, and optional authentication credentials.\nSOURCE: https://github.com/loco-rs/loco/blob/master/docs-site/content/docs/infrastructure/deployment.md#2025-04-20_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nmailer:\n  # SMTP mailer configuration.\n  smtp:\n    # Enable/Disable smtp mailer.\n    enable: true\n    # SMTP server host. e.x localhost, smtp.gmail.com\n    host: {{ get_env(name=\"MAILER_HOST\", default=\"localhost\") }}\n    # SMTP server port\n    port: 1025\n    # Use secure connection (SSL/TLS).\n    secure: false\n    # auth:\n    #   user:\n    #   password:\n```\n\n----------------------------------------\n\nTITLE: Generating a mailer with Loco CLI (Bash)\nDESCRIPTION: Command to generate a new mailer using the Loco CLI tool. This creates the necessary files and directory structure for a new mailer.\nSOURCE: https://github.com/loco-rs/loco/blob/master/docs-site/content/docs/processing/mailers.md#2025-04-20_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ncargo loco generate mailer <mailer name>\n```\n\n----------------------------------------\n\nTITLE: Accessing Custom Settings in Application Code\nDESCRIPTION: Rust code example demonstrating how to access custom settings from the application context in controllers, workers, or tasks. Shows pattern matching for optional settings and parsing with the Settings struct.\nSOURCE: https://github.com/loco-rs/loco/blob/master/docs-site/content/docs/the-app/your-project.md#2025-04-20_snippet_10\n\nLANGUAGE: rust\nCODE:\n```\n// in controllers, workers, tasks, or elsewhere,\n// as long as you have access to AppContext (here: `ctx`)\n\nif let Some(settings) = &ctx.config.settings {\n    let settings = common::settings::Settings::from_json(settings)?;\n    println!(\"allow list: {:?}\", settings.allow_list);\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Remote IP Middleware in Loco-rs\nDESCRIPTION: This YAML configuration demonstrates how to enable a non-default middleware (Remote IP) in a Loco-rs application.\nSOURCE: https://github.com/loco-rs/loco/blob/master/docs-site/content/docs/the-app/controller.md#2025-04-20_snippet_14\n\nLANGUAGE: yaml\nCODE:\n```\nserver:\n  middlewares:\n    remote_ip:\n      enable: true\n```\n\n----------------------------------------\n\nTITLE: API Authenticated Request\nDESCRIPTION: cURL command for accessing an API-authenticated endpoint using API key\nSOURCE: https://github.com/loco-rs/loco/blob/master/docs-site/content/docs/extras/authentication.md#2025-04-20_snippet_9\n\nLANGUAGE: sh\nCODE:\n```\ncurl --location '127.0.0.1:5150/api/user/current-api' \\\n     --header 'Content-Type: application/json' \\\n     --header 'Authorization: Bearer API_KEY'\n```\n\n----------------------------------------\n\nTITLE: Loading Extra DB Initializer in Rust\nDESCRIPTION: Code for setting up the extra database initializer in a Loco-rs application. This shows how to register the database initializer in the application's initialization hook.\nSOURCE: https://github.com/loco-rs/loco/blob/master/docs-site/content/docs/the-app/models.md#2025-04-20_snippet_26\n\nLANGUAGE: rust\nCODE:\n```\nasync fn initializers(ctx: &AppContext) -> Result<Vec<Box<dyn Initializer>>> {\n        let  initializers: Vec<Box<dyn Initializer>> = vec![\n            Box::new(loco_rs::initializers::extra_db::ExtraDbInitializer),\n        ];\n\n        Ok(initializers)\n    }\n```\n\n----------------------------------------\n\nTITLE: Configuring Server Settings for Production\nDESCRIPTION: YAML configuration for server settings, defining the port the server will listen on and the host URL for mailers in the application.\nSOURCE: https://github.com/loco-rs/loco/blob/master/docs-site/content/docs/infrastructure/deployment.md#2025-04-20_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nserver:\n  # Port on which the server will listen. the server binding is 0.0.0.0:{PORT}\n  port: {{ get_env(name=\"NODE_PORT\", default=5150) }}\n  # The UI hostname or IP address that mailers will point to.\n  host: http://localhost\n```\n\n----------------------------------------\n\nTITLE: Implementing App Version Hook in Rust\nDESCRIPTION: Implementation of the app_version hook to provide version information including git SHA.\nSOURCE: https://github.com/loco-rs/loco/blob/master/CHANGELOG.md#2025-04-20_snippet_19\n\nLANGUAGE: rust\nCODE:\n```\nfn app_version() -> String {\n    format!(\n        \"{} ({})\",\n        env!(\"CARGO_PKG_VERSION\"),\n        option_env!(\"BUILD_SHA\")\n            .or(option_env!(\"GITHUB_SHA\"))\n            .unwrap_or(\"dev\")\n    )\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Loco Controller via CLI\nDESCRIPTION: Command line instruction for generating a new controller in a Loco project\nSOURCE: https://github.com/loco-rs/loco/blob/master/docs-site/content/docs/the-app/controller.md#2025-04-20_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n$ cargo loco generate controller [OPTIONS] <CONTROLLER_NAME>\n```\n\n----------------------------------------\n\nTITLE: Implementing View Function for Tera Template\nDESCRIPTION: This Rust function implements a view for the Tera template. It uses the ViewRenderer trait to render the template with any necessary data.\nSOURCE: https://github.com/loco-rs/loco/blob/master/docs-site/content/docs/the-app/views.md#2025-04-20_snippet_3\n\nLANGUAGE: rust\nCODE:\n```\n// src/views/dashboard.rs\nuse loco_rs::prelude::*;\n\npub fn home(v: impl ViewRenderer) -> Result<impl IntoResponse> {\n    format::render().view(&v, \"home/hello.html\", data!({}))\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring PostgreSQL Database in Loco YAML\nDESCRIPTION: YAML configuration for setting up a PostgreSQL database connection in a Loco application's development environment.\nSOURCE: https://github.com/loco-rs/loco/blob/master/docs-site/content/docs/the-app/models.md#2025-04-20_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ndatabase:\n  uri: \"{{ get_env(name=\\\"DATABASE_URL\\\", default=\\\"postgres://loco:loco@localhost:5432/myapp_development\\\") }\"\n```\n\n----------------------------------------\n\nTITLE: User Login via Authentication API\nDESCRIPTION: cURL command to log in a user by sending a POST request to the login endpoint with email and password. The response includes a JWT token for subsequent authenticated requests.\nSOURCE: https://github.com/loco-rs/loco/blob/master/docs-site/content/docs/getting-started/tour/index.md#2025-04-20_snippet_7\n\nLANGUAGE: sh\nCODE:\n```\n$ curl --location 'localhost:5150/api/auth/login' \\\n     --header 'Content-Type: application/json' \\\n     --data-raw '{\n         \"email\": \"user@loco.rs\",\n         \"password\": \"12341234\"\n     }'\n```\n\n----------------------------------------\n\nTITLE: Enqueuing Background Job in Rust\nDESCRIPTION: Example of how to enqueue a background job with typed arguments in a Rust controller.\nSOURCE: https://github.com/loco-rs/loco/blob/master/docs-site/content/docs/processing/workers.md#2025-04-20_snippet_4\n\nLANGUAGE: rust\nCODE:\n```\nDownloadWorker::perform_later(\n    &ctx,\n    DownloadWorkerArgs {\n        user_guid: \"foo\".to_string(),\n    },\n)\n.await\n```\n\n----------------------------------------\n\nTITLE: Configuring Logger Settings for Production\nDESCRIPTION: YAML configuration for the application's logging system, including options for enabling logs, setting log levels, formatting, and filtering third-party library logs.\nSOURCE: https://github.com/loco-rs/loco/blob/master/docs-site/content/docs/infrastructure/deployment.md#2025-04-20_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n# Application logging configuration\nlogger:\n  # Enable or disable logging.\n  enable: true\n  # Enable pretty backtrace (sets RUST_BACKTRACE=1)\n  pretty_backtrace: true\n  # Log level, options: trace, debug, info, warn or error.\n  level: debug\n  # Define the logging format. options: compact, pretty or json\n  format: compact\n  # By default the logger has filtering only logs that came from your code or logs that came from `loco` framework. to see all third party libraries\n  # Uncomment the line below to override to see all third party libraries you can enable this config and override the logger filters.\n  # override_filter: trace\n```\n\n----------------------------------------\n\nTITLE: Basic Articles Controller Implementation\nDESCRIPTION: Initial implementation of the articles controller with list endpoint\nSOURCE: https://github.com/loco-rs/loco/blob/master/docs-site/content/docs/getting-started/guide.md#2025-04-20_snippet_10\n\nLANGUAGE: rust\nCODE:\n```\n#![allow(clippy::unused_async)]\nuse loco_rs::prelude::*;\n\nuse crate::models::_entities::articles;\n\npub async fn list(State(ctx): State<AppContext>) -> Result<Response> {\n    let res = articles::Entity::find().all(&ctx.db).await?;\n    format::json(res)\n}\n\npub fn routes() -> Routes {\n    Routes::new().prefix(\"api/articles\").add(\"/\", get(list))\n}\n```\n\n----------------------------------------\n\nTITLE: Generating a New Loco-rs Task\nDESCRIPTION: Demonstrates the command to generate a new task called 'user_report' which creates necessary files and updates module references.\nSOURCE: https://github.com/loco-rs/loco/blob/master/docs-site/content/docs/getting-started/guide.md#2025-04-20_snippet_14\n\nLANGUAGE: sh\nCODE:\n```\n$ cargo loco generate task user_report\n\nadded: \"src/tasks/user_report.rs\"\ninjected: \"src/tasks/mod.rs\"\ninjected: \"src/app.rs\"\nadded: \"tests/tasks/user_report.rs\"\ninjected: \"tests/tasks/mod.rs\"\n```\n\n----------------------------------------\n\nTITLE: Redis Queue Backend Configuration\nDESCRIPTION: YAML configuration for setting up Redis as the queue backend with connection URI and worker settings.\nSOURCE: https://github.com/loco-rs/loco/blob/master/docs-site/content/docs/processing/workers.md#2025-04-20_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nqueue:\n  kind: Redis\n  uri: \"{{ get_env(name=\\\"REDIS_URL\\\", default=\\\"redis://127.0.0.1\\\") }}\"\n  dangerously_flush: false\n  num_workers: 2\n```\n\n----------------------------------------\n\nTITLE: Secure Headers with Custom Overrides\nDESCRIPTION: YAML configuration for secure headers middleware with custom header overrides applied to the GitHub preset.\nSOURCE: https://github.com/loco-rs/loco/blob/master/docs-site/content/docs/the-app/controller.md#2025-04-20_snippet_34\n\nLANGUAGE: yaml\nCODE:\n```\nserver:\n  middleware:\n    # set secure headers\n    secure_headers:\n      preset: github\n      overrides:\n        foo: bar\n```\n\n----------------------------------------\n\nTITLE: Installing Loco and Sea-ORM CLI in Rust\nDESCRIPTION: Commands to install the Loco framework and Sea-ORM CLI tool. Sea-ORM CLI is only needed when database functionality is required in your application.\nSOURCE: https://github.com/loco-rs/loco/blob/master/docs-site/content/docs/getting-started/tour/index.md#2025-04-20_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ncargo install loco\ncargo install sea-orm-cli # Only when DB is needed\n```\n\n----------------------------------------\n\nTITLE: Service Cloning Pattern Examples in Rust\nDESCRIPTION: Demonstrates incorrect and correct approaches to cloning services in Tower middleware implementations, highlighting the importance of proper state management using std::mem::replace.\nSOURCE: https://github.com/loco-rs/loco/blob/master/docs-site/content/docs/extras/pluggability.md#2025-04-20_snippet_10\n\nLANGUAGE: rust\nCODE:\n```\n// Wrong\nfn call(&mut self, req: Request<B>) -> Self::Future {\n    let mut inner = self.inner.clone();\n    Box::pin(async move {\n        /* ... */\n        inner.call(req).await\n    })\n}\n\n// Correct\nfn call(&mut self, req: Request<B>) -> Self::Future {\n    let clone = self.inner.clone();\n    // take the service that was ready\n    let mut inner = std::mem::replace(&mut self.inner, clone);\n    Box::pin(async move {\n        /* ... */\n        inner.call(req).await\n    })\n}\n```\n\n----------------------------------------\n\nTITLE: Logging Configuration in Loco (YAML)\nDESCRIPTION: Demonstrates how logging is configured in Loco, providing a unified approach to logging and tracing across the application.\nSOURCE: https://github.com/loco-rs/loco/blob/master/docs-site/content/docs/getting-started/axum-users.md#2025-04-20_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\nlogger:\n  enable: true\n  pretty_backtrace: true\n  level: debug\n  format: compact\n```\n\n----------------------------------------\n\nTITLE: Generated Controller Implementation\nDESCRIPTION: Shows the default controller code generated by Loco, including a basic index route and route configuration.\nSOURCE: https://github.com/loco-rs/loco/blob/master/docs-site/content/docs/getting-started/guide.md#2025-04-20_snippet_4\n\nLANGUAGE: rust\nCODE:\n```\n#![allow(clippy::missing_errors_doc)]\n#![allow(clippy::unnecessary_struct_initialization)]\n#![allow(clippy::unused_async)]\nuse loco_rs::prelude::*;\nuse axum::debug_handler;\n\n#[debug_handler]\npub async fn index(State(_ctx): State<AppContext>) -> Result<Response> {\n    format::empty()\n}\n\npub fn routes() -> Routes {\n    Routes::new()\n        .prefix(\"api/guides/\")\n        .add(\"/\", get(index))\n}\n```\n\n----------------------------------------\n\nTITLE: Running a Loco-rs Task with CLI Variables\nDESCRIPTION: Demonstrates how to execute the user_report task with command-line variables that get passed to the task's run method.\nSOURCE: https://github.com/loco-rs/loco/blob/master/docs-site/content/docs/getting-started/guide.md#2025-04-20_snippet_16\n\nLANGUAGE: sh\nCODE:\n```\n$ cargo loco task user_report var1:val1 var2:val2 ...\n\nargs: Vars { cli: {\"var1\": \"val1\", \"var2\": \"val2\"} }\n!!! user_report: listing users !!!\n------------------------\ndone: 0 users\n```\n\n----------------------------------------\n\nTITLE: Database Logging Configuration\nDESCRIPTION: YAML configuration for enabling SQL query logging\nSOURCE: https://github.com/loco-rs/loco/blob/master/docs-site/content/docs/extras/pluggability.md#2025-04-20_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\ndatabase:\n  enable_logging: false\n```\n\n----------------------------------------\n\nTITLE: Configuring Static Asset Middleware in YAML\nDESCRIPTION: Configuration for enabling and setting up the static asset middleware to serve files from a directory.\nSOURCE: https://github.com/loco-rs/loco/blob/master/CHANGELOG.md#2025-04-20_snippet_21\n\nLANGUAGE: yaml\nCODE:\n```\nstatic:\n  enable: true\n  # ensure that both the folder.path and fallback file path are existence.\n  must_exist: true\n  folder: \n    uri: \"/assets\"\n    path: \"frontend/dist\"        \n  fallback: \"frontend/dist/index.html\"\n```\n\n----------------------------------------\n\nTITLE: Starting Loco-rs Server with Environment Variable\nDESCRIPTION: Command to start a Loco-rs application with a specific environment configuration using the LOCO_ENV environment variable. This example shows how to start the server with the 'qa' environment.\nSOURCE: https://github.com/loco-rs/loco/blob/master/docs-site/content/docs/the-app/your-project.md#2025-04-20_snippet_7\n\nLANGUAGE: sh\nCODE:\n```\nLOCO_ENV=qa cargo loco start\n```\n\n----------------------------------------\n\nTITLE: Initializing Base Storage Hook in Loco Application\nDESCRIPTION: Sets up the basic storage hook function in the app.rs file, importing the storage module from loco_rs and creating an after_context hook that will hold storage configurations.\nSOURCE: https://github.com/loco-rs/loco/blob/master/docs-site/content/docs/infrastructure/storage.md#2025-04-20_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\nuse loco_rs::storage;\n\nasync fn after_context(ctx: AppContext) -> Result<AppContext> {\n    Ok(ctx)\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Cookies with Format Renderer in Rust\nDESCRIPTION: Example of how to set cookies with the format renderer along with etag and JSON response.\nSOURCE: https://github.com/loco-rs/loco/blob/master/CHANGELOG.md#2025-04-20_snippet_14\n\nLANGUAGE: rust\nCODE:\n```\nformat::render()\n    .cookies(&[\n        cookie::Cookie::new(\"foo\", \"bar\"),\n        cookie::Cookie::new(\"baz\", \"qux\"),\n    ])?\n    .etag(\"foobar\")?\n    .json(notes)\n```\n\n----------------------------------------\n\nTITLE: Defining Typed Settings in Rust\nDESCRIPTION: Rust code example showing how to create a strongly typed settings struct that can parse JSON configuration values. Implements serialization, deserialization, and a from_json helper method.\nSOURCE: https://github.com/loco-rs/loco/blob/master/docs-site/content/docs/the-app/your-project.md#2025-04-20_snippet_9\n\nLANGUAGE: rust\nCODE:\n```\n// put this in src/common/settings.rs\n#[derive(Serialize, Deserialize, Default, Debug)]\npub struct Settings {\n    pub allow_list: Option<Vec<String>>,\n}\n\nimpl Settings {\n    pub fn from_json(value: &serde_json::Value) -> Result<Self> {\n        Ok(serde_json::from_value(value.clone())?)\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Loco Migration for Adding Columns\nDESCRIPTION: Shell command to generate a new Loco migration for adding columns to an existing table using the Loco CLI.\nSOURCE: https://github.com/loco-rs/loco/blob/master/docs-site/content/docs/the-app/models.md#2025-04-20_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\n$ cargo loco g migration AddNameAndAgeToUsers name:string age:int\n```\n\n----------------------------------------\n\nTITLE: Adding a Column with Advanced Migration in Loco-rs\nDESCRIPTION: Using the SchemaManager directly for more advanced operations to add a column if it doesn't exist. This example adds a 'rating' column to the 'Movies' table.\nSOURCE: https://github.com/loco-rs/loco/blob/master/docs-site/content/docs/the-app/models.md#2025-04-20_snippet_14\n\nLANGUAGE: rust\nCODE:\n```\n  manager\n    .alter_table(\n        Table::alter()\n            .table(Movies::Table)\n            .add_column_if_not_exists(integer(Movies::Rating))\n            .to_owned(),\n    )\n    .await\n```\n\n----------------------------------------\n\nTITLE: Configuring Server Port with Environment Variables in YAML for Loco-rs\nDESCRIPTION: Example of using tera templates in YAML configuration files to set the server port from an environment variable with a default value. This is part of the config variables feature introduced in v0.1.6.\nSOURCE: https://github.com/loco-rs/loco/blob/master/CHANGELOG.md#2025-04-20_snippet_22\n\nLANGUAGE: yaml\nCODE:\n```\nserver:\n  port: {{ get_env(name=\"NODE_PORT\", default=5150) }}\n```\n\n----------------------------------------\n\nTITLE: Running a Specific Scheduler Job by Name\nDESCRIPTION: Command to execute a single scheduler job by specifying its name, useful for testing or running jobs on demand.\nSOURCE: https://github.com/loco-rs/loco/blob/master/docs-site/content/docs/processing/scheduler.md#2025-04-20_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\nLOCO_ENV=production cargo loco scheduler --name 'JOB_NAME'\n```\n\n----------------------------------------\n\nTITLE: Configuring Controller Route for Template View\nDESCRIPTION: This Rust code configures a controller route to render the home template view. It uses the ViewEngine extractor to get the Tera view engine and calls the home view function.\nSOURCE: https://github.com/loco-rs/loco/blob/master/docs-site/content/docs/the-app/views.md#2025-04-20_snippet_4\n\nLANGUAGE: rust\nCODE:\n```\n// src/controllers/dashboard.rs\nuse loco_rs::prelude::*;\n\nuse crate::views;\n\npub async fn render_home(ViewEngine(v): ViewEngine<TeraView>) -> Result<impl IntoResponse> {\n    views::dashboard::home(v)\n}\n\npub fn routes() -> Routes {\n    Routes::new().prefix(\"home\").add(\"/\", get(render_home))\n}\n```\n\n----------------------------------------\n\nTITLE: Using axum::body::Bytes in Controller Parameters\nDESCRIPTION: Demonstrates how to use axum::body::Bytes as a parameter in a Loco-rs controller function to handle request body data.\nSOURCE: https://github.com/loco-rs/loco/blob/master/docs-site/content/docs/the-app/controller.md#2025-04-20_snippet_24\n\nLANGUAGE: rust\nCODE:\n```\nuse loco_rs::prelude::*;\n\nasync fn current(_body: axum::body::Bytes,) -> Result<Response> {\n    // Your implementation here\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring ALB Listeners for HTTP and HTTPS in Terraform\nDESCRIPTION: Sets up ALB listeners for HTTP (with redirect to HTTPS) and HTTPS with SSL certificate, enabling secure access to the application over both protocols.\nSOURCE: https://github.com/loco-rs/loco/blob/master/docs-site/content/blog/deploy-aws.md#2025-04-20_snippet_14\n\nLANGUAGE: hcl\nCODE:\n```\nresource \"aws_alb_listener\" \"myapp_http\" {\n  load_balancer_arn = aws_alb.myapp.arn\n  port              = \"80\"\n  protocol          = \"HTTP\"\n\n  default_action {\n    type =  \"redirect\"\n    redirect {\n      port        = \"443\"\n      protocol    = \"HTTPS\"\n      status_code = \"HTTP_301\"\n    }\n  }\n}\n\nresource \"aws_alb_listener\" \"myapp_https\" {\n  load_balancer_arn = aws_alb.myapp.arn\n  port              = \"443\"\n  protocol          = \"HTTPS\"\n  ssl_policy        = \"ELBSecurityPolicy-2016-08\"\n\n  certificate_arn = \"<your arn for the certificate>\" // Change this to your certificate ARN\n\n  default_action {\n    type             = \"forward\"\n    target_group_arn = aws_lb_target_group.myapp.arn\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Generating a Task using Loco CLI\nDESCRIPTION: Command-line interface for generating a new task in the Loco framework. It shows the usage, arguments, and options for the task generation command.\nSOURCE: https://github.com/loco-rs/loco/blob/master/docs-site/content/docs/processing/task.md#2025-04-20_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nGenerate a Task based on the given name\n\nUsage: demo_app-cli generate task [OPTIONS] <NAME>\n\nArguments:\n  <NAME>  Name of the thing to generate\n\nOptions:\n  -e, --environment <ENVIRONMENT>  Specify the environment [default: development]\n  -h, --help                       Print help\n  -V, --version                    Print version\n```\n\n----------------------------------------\n\nTITLE: Dropping a Column with Advanced Migration in Loco-rs\nDESCRIPTION: Advanced migration for dropping a column from a table using the SchemaManager directly. This example removes the 'Rating' column from the 'Movies' table.\nSOURCE: https://github.com/loco-rs/loco/blob/master/docs-site/content/docs/the-app/models.md#2025-04-20_snippet_15\n\nLANGUAGE: rust\nCODE:\n```\n  manager\n    .alter_table(\n        Table::alter()\n            .table(Movies::Table)\n            .drop_column(Movies::Rating)\n            .to_owned(),\n    )\n    .await\n```\n\n----------------------------------------\n\nTITLE: Defining VPC and Network Infrastructure in Terraform\nDESCRIPTION: Sets up a complete VPC with public and private subnets, route tables, and networking components required for the ECS Fargate deployment.\nSOURCE: https://github.com/loco-rs/loco/blob/master/docs-site/content/blog/deploy-aws.md#2025-04-20_snippet_18\n\nLANGUAGE: hcl\nCODE:\n```\nresource \"aws_vpc\" \"myapp_vpc\" {\n  cidr_block = \"10.0.0.0/16\"\n}\n\nresource \"aws_subnet\" \"public_d\" {\n  vpc_id            = aws_vpc.myapp_vpc.id\n  cidr_block        = \"10.0.1.0/25\"\n  availability_zone = \"us-east-2a\"\n\n  tags = {\n    \"Name\" = \"public | us-east-2a\"\n  }\n}\n\nresource \"aws_subnet\" \"private_d\" {\n  vpc_id            = aws_vpc.myapp_vpc.id\n  cidr_block        = \"10.0.2.0/25\"\n  availability_zone = \"us-east-2b\"\n\n  tags = {\n    \"Name\" = \"private | us-east-2b\"\n  }\n}\n\nresource \"aws_subnet\" \"public_e\" {\n  vpc_id            = aws_vpc.myapp_vpc.id\n  cidr_block        = \"10.0.1.128/25\"\n  availability_zone = \"us-east-2c\"\n\n  tags = {\n    \"Name\" = \"public | us-east-2c\"\n  }\n}\n\nresource \"aws_subnet\" \"private_e\" {\n  vpc_id            = aws_vpc.myapp_vpc.id\n  cidr_block        = \"10.0.2.128/25\"\n  availability_zone = \"us-east-2c\"\n\n  tags = {\n    \"Name\" = \"private | us-east-2c\"\n  }\n}\n\nresource \"aws_route_table\" \"public\" {\n  vpc_id = aws_vpc.myapp_vpc.id\n  tags = {\n    \"Name\" = \"public\"\n  }\n}\n\nresource \"aws_route_table\" \"private\" {\n  vpc_id = aws_vpc.myapp_vpc.id\n  tags = {\n    \"Name\" = \"private\"\n  }\n}\n\nresource \"aws_route_table_association\" \"public_d_subnet\" {\n  subnet_id      = aws_subnet.public_d.id\n  route_table_id = aws_route_table.public.id\n}\n\nresource \"aws_route_table_association\" \"private_d_subnet\" {\n  subnet_id      = aws_subnet.private_d.id\n  route_table_id = aws_route_table.private.id\n}\n\nresource \"aws_route_table_association\" \"public_e_subnet\" {\n  subnet_id      = aws_subnet.public_e.id\n  route_table_id = aws_route_table.public.id\n}\n\nresource \"aws_route_table_association\" \"private_e_subnet\" {\n  subnet_id      = aws_subnet.private_e.id\n  route_table_id = aws_route_table.private.id\n}\n\nresource \"aws_eip\" \"nat\" {\n  vpc = true\n}\n\nresource \"aws_internet_gateway\" \"igw\" {\n  vpc_id = aws_vpc.myapp_vpc.id\n}\n\nresource \"aws_nat_gateway\" \"ngw\" {\n  subnet_id     = aws_subnet.public_d.id\n  allocation_id = aws_eip.nat.id\n\n  depends_on = [aws_internet_gateway.igw]\n}\n\nresource \"aws_route\" \"public_igw\" {\n  route_table_id         = aws_route_table.public.id\n  destination_cidr_block = \"0.0.0.0/0\"\n  gateway_id             = aws_internet_gateway.igw.id\n}\n\nresource \"aws_route\" \"private_ngw\" {\n  route_table_id         = aws_route_table.private.id\n  destination_cidr_block = \"0.0.0.0/0\"\n  nat_gateway_id         = aws_nat_gateway.ngw.id\n}\n\nresource \"aws_security_group\" \"http\" {\n  name        = \"http\"\n  description = \"HTTP traffic\"\n  vpc_id      = aws_vpc.myapp_vpc.id\n\n  ingress {\n    from_port   = 80\n    to_port     = 80\n    protocol    = \"TCP\"\n    cidr_blocks = [\"0.0.0.0/0\"]\n  }\n}\n\nresource \"aws_security_group\" \"https\" {\n  name        = \"https\"\n  description = \"HTTPS traffic\"\n  vpc_id      = aws_vpc.myapp_vpc.id\n\n  ingress {\n    from_port   = 443\n    to_port     = 443\n    protocol    = \"TCP\"\n    cidr_blocks = [\"0.0.0.0/0\"]\n  }\n}\n\nresource \"aws_security_group\" \"egress_all\" {\n  name        = \"egress-all\"\n  description = \"Allow outbound traffic\"\n  vpc_id      = aws_vpc.myapp_vpc.id\n\n  egress {\n    from_port   = 0\n    to_port     = 0\n    protocol    = \"-1\"\n    cidr_blocks = [\"0.0.0.0/0\"]\n  }\n}\n\nresource \"aws_security_group\" \"ingress_api\" {\n  name        = \"ingress-api\"\n  description = \"Allow ingress to App\"\n  vpc_id      = aws_vpc.myapp_vpc.id\n\n  ingress {\n    from_port   = 5150\n    to_port     = 5150\n    protocol    = \"TCP\"\n    cidr_blocks = [\"0.0.0.0/0\"]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Running a Loco Task\nDESCRIPTION: Command to execute a previously created task in the Loco framework.\nSOURCE: https://github.com/loco-rs/loco/blob/master/docs-site/content/docs/processing/task.md#2025-04-20_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\ncargo loco task <TASK_NAME>\n```\n\n----------------------------------------\n\nTITLE: Implementing Hooks for Database Session Store in Loco App\nDESCRIPTION: Code for the Loco App struct with hooks to add a PostgreSQL-backed Axum session layer with encryption to the application router.\nSOURCE: https://github.com/loco-rs/loco/blob/master/docs-site/content/blog/axum-session.md#2025-04-20_snippet_7\n\nLANGUAGE: rust\nCODE:\n```\nuse session; // This is the session.rs file\npub struct App;\n#[async_trait]\nimpl Hooks for App {\n    fn app_name() -> &'static str {\n        env!(\"CARGO_CRATE_NAME\")\n    }\n\n    // Other hooks...\n    async fn after_routes(router: AxumRouter, ctx: &AppContext) -> Result<AxumRouter> {\n        let conn = session.connect_to_database(&ctx.config.database).await?;\n        let session_config = axum_session::SessionConfig::default()\n            .with_table_name(\"sessions_table\")\n            .with_key(axum_session::Key::generate())\n            .with_database_key(axum_session::Key::generate())\n            .with_security_mode(axum_session::SecurityMode::PerSession);\n\n        let session_store = axum_session::SessionStore::<axum_session::SessionPgPool>::new(\n            Some(conn.clone().into()),\n            session_config,\n        )\n        .await\n        .unwrap();\n\n        let router = router.layer(axum_session::SessionLayer::new(session_store));\n        Ok(router)\n    }\n    // Other hooks...\n}\n```\n\n----------------------------------------\n\nTITLE: Creating ECR Repository for Loco App\nDESCRIPTION: This snippet demonstrates how to create an ECR repository for the Loco application using AWS CLI.\nSOURCE: https://github.com/loco-rs/loco/blob/master/docs-site/content/blog/deploy-aws.md#2025-04-20_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\n$ aws ecr create-repository --repository-name myapp\n\n{\n    \"repository\": {\n        \"repositoryArn\": \"arn:aws:ecr:us-east-1:123456789012:repository/myapp\",\n        \"registryId\": \"123456789012\",\n        \"repositoryName\": \"myapp\",\n        \"repositoryUri\": \"123456789012.dkr.ecr.us-east-1.amazonaws.com/myapp\",\n        \"createdAt\": 1627981234.0,\n        \"imageTagMutability\": \"MUTABLE\",\n        \"imageScanningConfiguration\": {\n            \"scanOnPush\": false\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining ECS Task Definition for Fargate in Terraform\nDESCRIPTION: Creates an ECS task definition with container configuration, memory/CPU settings, port mappings, and logging configuration. This defines how the application container will run in Fargate.\nSOURCE: https://github.com/loco-rs/loco/blob/master/docs-site/content/blog/deploy-aws.md#2025-04-20_snippet_9\n\nLANGUAGE: hcl\nCODE:\n```\nresource \"aws_ecs_task_definition\" \"myapp_task\" {\n  family                   = \"myapp-task\"\n  container_definitions    = <<DEFINITION\n  [\n    {\n      \"name\": \"myapp-task\",\n      \"image\": \"${aws_ecr_repository.myapp.repository_url}\",\n      \"essential\": true,\n      \"portMappings\": [\n        {\n          \"containerPort\": 5150\n        }\n      ],\n      \"command\": [\"start\"],\n      \"memory\": 512,\n      \"cpu\": 256,\n      \"logConfiguration\": {\n        \"logDriver\": \"awslogs\",\n        \"options\": {\n          \"awslogs-region\": \"us-east-2\",\n          \"awslogs-group\": \"/ecs/myapp\",\n          \"awslogs-stream-prefix\": \"ecs\"\n        }\n      }\n    }\n  ]\n  DEFINITION\n  requires_compatibilities = [\"FARGATE\"]\n  network_mode             = \"awsvpc\"\n  memory                   = 512\n  cpu                      = 256\n  execution_role_arn       = aws_iam_role.ecsTaskExecutionRole.arn\n}\n```\n\n----------------------------------------\n\nTITLE: Controller Middleware Configuration\nDESCRIPTION: YAML configuration for enabling request logging middleware with request ID generation\nSOURCE: https://github.com/loco-rs/loco/blob/master/docs-site/content/docs/extras/pluggability.md#2025-04-20_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nserver:\n  middlewares:\n    logger:\n      enable: true\n```\n\n----------------------------------------\n\nTITLE: Validating Database Connection with Loco Doctor Command\nDESCRIPTION: Shell command to run the Loco doctor tool, which checks the database and Redis connections for a Loco application.\nSOURCE: https://github.com/loco-rs/loco/blob/master/docs-site/content/docs/the-app/models.md#2025-04-20_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\n$ cargo loco doctor\n    Finished dev [unoptimized + debuginfo] target(s) in 0.32s\n    Running `target/debug/myapp-cli doctor`\n✅ SeaORM CLI is installed\n✅ DB connection: success\n✅ Redis connection: success\n```\n\n----------------------------------------\n\nTITLE: Configuring AWS Provider and ECR Repository in Terraform\nDESCRIPTION: Sets up the AWS provider with region and credentials, and creates an ECR repository for storing Docker images of the application.\nSOURCE: https://github.com/loco-rs/loco/blob/master/docs-site/content/blog/deploy-aws.md#2025-04-20_snippet_7\n\nLANGUAGE: hcl\nCODE:\n```\n# Configure the AWS Provider\nprovider \"aws\" {\n  region = \"us-east-1\" // Change this to your region\n  access_key = \"<your access key>\" // Change this to your access key\n  secret_key = \"your secret key\" // Change this to your secret key\n}\n\nresource \"aws_ecr_repository\" \"myapp\" {\n  name = \"myapp\"\n}\n```\n\n----------------------------------------\n\nTITLE: Running Health Check in Production\nDESCRIPTION: Command to run the 'doctor' utility in production mode to verify the connection health of your environment.\nSOURCE: https://github.com/loco-rs/loco/blob/master/docs-site/content/docs/infrastructure/deployment.md#2025-04-20_snippet_7\n\nLANGUAGE: sh\nCODE:\n```\n$ myapp doctor --production\n```\n\n----------------------------------------\n\nTITLE: Creating Database Connection Helper for Axum Session\nDESCRIPTION: A helper function to create a connection to PostgreSQL database for Axum session using Loco's database configuration.\nSOURCE: https://github.com/loco-rs/loco/blob/master/docs-site/content/blog/axum-session.md#2025-04-20_snippet_6\n\nLANGUAGE: rust\nCODE:\n```\nuse sqlx::postgres::PgPool;\nuse loco_rs:{\n    config::Database,\n    errors::Error,\n    Result,\n};\n\nasync fn connect_to_database(config: &Database) -> Result<PgPool> {\n    PgPool::connect(&config.uri)\n        .await\n        .map_err(|e| Error::Any(e.into()))\n}\n```\n\n----------------------------------------\n\nTITLE: Pushing Docker Image to ECR\nDESCRIPTION: This set of snippets shows the process of logging into ECR, tagging the Docker image, and pushing it to the ECR repository.\nSOURCE: https://github.com/loco-rs/loco/blob/master/docs-site/content/blog/deploy-aws.md#2025-04-20_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\n$ aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin 123456789012.dkr.ecr.us-east-1.amazonaws.com\n```\n\nLANGUAGE: sh\nCODE:\n```\n$ docker tag myapp:latest 123456789012.dkr.ecr.us-east-1.amazonaws.com/myapp:latest\n```\n\nLANGUAGE: sh\nCODE:\n```\n$ docker push 123456789012.dkr.ecr.us-east-1.amazonaws.com/myapp:latest\n```\n\n----------------------------------------\n\nTITLE: Generator YAML Configuration for Starter Options\nDESCRIPTION: Example of generator.yaml configuration showing starter options for customizing database, background workers, and assets.\nSOURCE: https://github.com/loco-rs/loco/blob/master/loco-cli/README.md#2025-04-20_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\n---\ndescription: SaaS app (with DB and user auth)\noptions:\n  - db\n  - bg\n  - assets\nrules:\n    # ...\n```\n\n----------------------------------------\n\nTITLE: Remote IP Middleware Configuration\nDESCRIPTION: YAML configuration for enabling and configuring the RemoteIP middleware to correctly identify client IPs when behind a proxy or load balancer.\nSOURCE: https://github.com/loco-rs/loco/blob/master/docs-site/content/docs/the-app/controller.md#2025-04-20_snippet_31\n\nLANGUAGE: yaml\nCODE:\n```\nserver:\n  middleware:\n    # calculate remote IP based on `X-Forwarded-For` when behind a proxy or load balancer\n    # use RemoteIP(..) extractor to get the remote IP.\n    # without this middleware, you'll get the proxy IP instead.\n    # For more: https://github.com/rails/rails/blob/main/actionpack/lib/action_dispatch/middleware/remote_ip.rb\n    #\n    # NOTE! only enable when under a proxy, otherwise this can lead to IP spoofing vulnerabilities\n    # trust me, you'll know if you need this middleware.\n    remote_ip:\n      enable: true\n      # # replace the default trusted proxies:\n      # trusted_proxies:\n      # - ip range 1\n      # - ip range 2 ..\n    # Generating a unique request ID and enhancing logging with additional information such as the start and completion of request processing, latency, status code, and other request details.\n```\n\n----------------------------------------\n\nTITLE: Configuring Request Timeout Middleware\nDESCRIPTION: YAML configuration for enabling request timeout middleware that terminates requests exceeding a specified duration with a 408 status code.\nSOURCE: https://github.com/loco-rs/loco/blob/master/docs-site/content/docs/the-app/controller.md#2025-04-20_snippet_25\n\nLANGUAGE: yaml\nCODE:\n```\n#...\n  middlewares:\n    timeout_request:\n      enable: false\n      timeout: 5000\n```\n\n----------------------------------------\n\nTITLE: Setting up ECS Cluster and CloudWatch Logs in Terraform\nDESCRIPTION: Defines an ECS cluster for the application and sets up CloudWatch log groups for container logs, providing centralized logging for the application.\nSOURCE: https://github.com/loco-rs/loco/blob/master/docs-site/content/blog/deploy-aws.md#2025-04-20_snippet_8\n\nLANGUAGE: hcl\nCODE:\n```\nresource \"aws_ecs_cluster\" \"myapp_cluster\" {\n  name = \"myapp_cluster\"\n}\n\nresource \"aws_cloudwatch_log_group\" \"myapp\" {\n  name = \"/ecs/myapp\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Code Auto-Reload with Watchexec\nDESCRIPTION: Command to automatically reload and restart the Loco application when code changes are detected using watchexec.\nSOURCE: https://github.com/loco-rs/loco/blob/master/docs-site/content/docs/resources/faq.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nwatchexec --notify -r -- cargo loco start\n```\n\n----------------------------------------\n\nTITLE: Implementing the Database Truncation Hook\nDESCRIPTION: Implementation of the truncate hook for database cleanup during testing. This shows how to specify which tables should be truncated before tests run.\nSOURCE: https://github.com/loco-rs/loco/blob/master/docs-site/content/docs/the-app/models.md#2025-04-20_snippet_33\n\nLANGUAGE: rust\nCODE:\n```\npub struct App;\n#[async_trait]\nimpl Hooks for App {\n    //...\n    async fn truncate(ctx: &AppContext) -> Result<()> {\n        // truncate_table(&ctx.db, users::Entity).await?;\n        Ok(())\n    }\n\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Compression Middleware\nDESCRIPTION: YAML configuration for enabling response compression based on the accept-encoding request header.\nSOURCE: https://github.com/loco-rs/loco/blob/master/docs-site/content/docs/the-app/controller.md#2025-04-20_snippet_37\n\nLANGUAGE: yaml\nCODE:\n```\n#...\n  middlewares:\n    compression:\n      enable: true\n```\n\n----------------------------------------\n\nTITLE: Configuring Asset Middleware for Server-Side Templates\nDESCRIPTION: YAML configuration example for switching from client-side to server-side asset serving in a Loco project. Shows how to modify the config/development.yaml file to use server-side templates.\nSOURCE: https://github.com/loco-rs/loco/blob/master/docs-site/content/docs/getting-started/starters.md#2025-04-20_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n    # server-side static assets config\n    # for use with the view_engine in initializers/view_engine.rs\n    #\n    static:\n      enable: true\n      must_exist: true\n      precompressed: false\n      folder:\n        uri: \"/static\"\n        path: \"assets/static\"\n      fallback: \"assets/static/404.html\"\n    fallback:\n      enable: false\n    # client side app static config\n    # static:\n    #   enable: true\n    #   must_exist: true\n    #   precompressed: false\n    #   folder:\n    #     uri: \"/\"\n    #     path: \"frontend/dist\"\n    #   fallback: \"frontend/dist/index.html\"\n    # fallback:\n    #   enable: false\n```\n\n----------------------------------------\n\nTITLE: Enabling Precompressed Static Assets\nDESCRIPTION: YAML configuration for enabling the serving of precompressed (.gz) static assets instead of compressing them on-the-fly.\nSOURCE: https://github.com/loco-rs/loco/blob/master/docs-site/content/docs/the-app/controller.md#2025-04-20_snippet_38\n\nLANGUAGE: yaml\nCODE:\n```\n#...\nmiddlewares:\n  ...\n  static_assets:\n    ...\n    precompressed: true\n```\n\n----------------------------------------\n\nTITLE: Default Secure Headers Configuration\nDESCRIPTION: YAML configuration for applying secure headers middleware with GitHub's recommended preset.\nSOURCE: https://github.com/loco-rs/loco/blob/master/docs-site/content/docs/the-app/controller.md#2025-04-20_snippet_33\n\nLANGUAGE: yaml\nCODE:\n```\nserver:\n  middleware:\n    # set secure headers\n    secure_headers:\n      preset: github\n```\n\n----------------------------------------\n\nTITLE: Setting up ALB Target Group and Health Checks in Terraform\nDESCRIPTION: Creates a target group for the ALB that routes traffic to the application running on port 5150, with health checks configured to monitor the application's /_health endpoint.\nSOURCE: https://github.com/loco-rs/loco/blob/master/docs-site/content/blog/deploy-aws.md#2025-04-20_snippet_13\n\nLANGUAGE: hcl\nCODE:\n```\nresource \"aws_lb_target_group\" \"myapp\" {\n  name        = \"myapp-tg\"\n  port        = 5150\n  protocol    = \"HTTP\"\n  target_type = \"ip\"\n  vpc_id      = aws_vpc.myapp_vpc.id\n\n  health_check {\n    enabled = true\n    path    = \"/_health\"\n    matcher = \"200,202\"\n  }\n\n  depends_on = [aws_alb.myapp]\n}\n```\n\n----------------------------------------\n\nTITLE: CLI Commands for Database Seeding\nDESCRIPTION: Available CLI commands for managing database seeds in Loco-rs, showing options for resetting the database, dumping table contents, and specifying seed file locations.\nSOURCE: https://github.com/loco-rs/loco/blob/master/docs-site/content/docs/the-app/models.md#2025-04-20_snippet_23\n\nLANGUAGE: sh\nCODE:\n```\nSeed your database with initial data or dump tables to files\n\nUsage: demo_app-cli db seed [OPTIONS]\n\nOptions:\n  -r, --reset                      Clears all data in the database before seeding\n  -d, --dump                       Dumps all database tables to files\n      --dump-tables <DUMP_TABLES>  Specifies specific tables to dump\n      --from <FROM>                Specifies the folder containing seed files (defaults to 'src/fixtures') [default: src/fixtures]\n  -e, --environment <ENVIRONMENT>  Specify the environment [default: development]\n  -h, --help                       Print help\n  -V, --version                    Print version\n```\n\n----------------------------------------\n\nTITLE: Integrating Axum Router with Loco (Rust)\nDESCRIPTION: Shows how to integrate an existing Axum router into a Loco application, demonstrating Loco's compatibility with Axum routing.\nSOURCE: https://github.com/loco-rs/loco/blob/master/docs-site/content/docs/getting-started/axum-users.md#2025-04-20_snippet_10\n\nLANGUAGE: rust\nCODE:\n```\nasync fn after_routes(router: AxumRouter, _ctx: &AppContext) -> Result<AxumRouter> {\n    // use AxumRouter to mount your routes and return an AxumRouter\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Compression Middleware in YAML\nDESCRIPTION: Configuration example for enabling the compression middleware in a loco-rs application.\nSOURCE: https://github.com/loco-rs/loco/blob/master/CHANGELOG.md#2025-04-20_snippet_15\n\nLANGUAGE: yaml\nCODE:\n```\nmiddlewares:\n  compression:\n    enable: true\n```\n\n----------------------------------------\n\nTITLE: Creating a New Blog Post via API\nDESCRIPTION: cURL command to create a new blog post by sending a POST request to the generated API endpoint with title and content in JSON format.\nSOURCE: https://github.com/loco-rs/loco/blob/master/docs-site/content/docs/getting-started/tour/index.md#2025-04-20_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\n$ curl -X POST -H \"Content-Type: application/json\" -d '{\n  \"title\": \"Your Title\",\n  \"content\": \"Your Content xxx\"\n}' localhost:5150/api/posts\n```\n\n----------------------------------------\n\nTITLE: Displaying Active Routes in Loco\nDESCRIPTION: Command to list all registered routes in a Loco application\nSOURCE: https://github.com/loco-rs/loco/blob/master/docs-site/content/docs/the-app/controller.md#2025-04-20_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\n$ cargo loco routes\n```\n\n----------------------------------------\n\nTITLE: Configuring email stub for testing in YAML\nDESCRIPTION: Configuration to enable email stub mode for testing. When stub is enabled, emails are not actually sent but their information is collected for verification in tests.\nSOURCE: https://github.com/loco-rs/loco/blob/master/docs-site/content/docs/processing/mailers.md#2025-04-20_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\nmailer:\n  stub: true\n```\n\n----------------------------------------\n\nTITLE: Installing Frontend Dependencies for Todo App\nDESCRIPTION: Command to install additional React libraries needed for the Todo application, including routing, data fetching, and HTTP client libraries.\nSOURCE: https://github.com/loco-rs/loco/blob/master/docs-site/content/blog/frontend-website.md#2025-04-20_snippet_10\n\nLANGUAGE: sh\nCODE:\n```\n$ pnpm install react-router-dom react-query axios\n```\n\n----------------------------------------\n\nTITLE: Setting up Migration List in Loco-rs Application\nDESCRIPTION: Configuration for migrations module in a Loco-rs application, showing how to properly arrange migrations with the required injection comment for the migration generator.\nSOURCE: https://github.com/loco-rs/loco/blob/master/CHANGELOG.md#2025-04-20_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\n// migrations/src/lib.rs\n  vec![\n      Box::new(m20220101_000001_users::Migration),\n      Box::new(m20231103_114510_notes::Migration),\n      Box::new(m20240416_071825_roles::Migration),\n      Box::new(m20240416_082115_users_roles::Migration),\n      // inject-above (do not remove this comment)\n  ]\n```\n\n----------------------------------------\n\nTITLE: Configuring API Routes with Prefix in Loco\nDESCRIPTION: Rust code to modify the API routes configuration in Loco, adding a '/api' prefix to all default routes to separate API endpoints from static assets.\nSOURCE: https://github.com/loco-rs/loco/blob/master/docs-site/content/blog/frontend-website.md#2025-04-20_snippet_6\n\nLANGUAGE: rust\nCODE:\n```\nfn routes() -> AppRoutes {\n    AppRoutes::with_default_routes()\n        .prefix(\"/api\")\n        .add_route(controllers::notes::routes())\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling Payload Size Limitation in Loco-rs\nDESCRIPTION: This YAML configuration shows how to completely disable payload size restrictions in a Loco-rs application.\nSOURCE: https://github.com/loco-rs/loco/blob/master/docs-site/content/docs/the-app/controller.md#2025-04-20_snippet_23\n\nLANGUAGE: yaml\nCODE:\n```\n#...\n  middlewares:\n    limit_payload:\n      body_limit: disable\n```\n\n----------------------------------------\n\nTITLE: Configuring Initializers in YAML\nDESCRIPTION: Example YAML configuration for initializers section added in v0.4.0, allowing for initializer-specific settings like OAuth2 providers.\nSOURCE: https://github.com/loco-rs/loco/blob/master/CHANGELOG.md#2025-04-20_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\n# Initializers Configuration\ninitializers:\n# oauth2:\n#   authorization_code: # Authorization code grant type\n#     - client_identifier: google # Identifier for the OAuth2 provider. Replace 'google' with your provider's name if different, must be unique within the oauth2 config.\n#       ... other fields\n```\n\n----------------------------------------\n\nTITLE: Applying Terraform Configuration to Deploy on AWS\nDESCRIPTION: Command to apply the Terraform configuration and create all AWS resources defined in the configuration files, with example output showing the ALB URL.\nSOURCE: https://github.com/loco-rs/loco/blob/master/docs-site/content/blog/deploy-aws.md#2025-04-20_snippet_21\n\nLANGUAGE: sh\nCODE:\n```\n$ terraform apply\n```\n\n----------------------------------------\n\nTITLE: Mail catcher configuration in YAML\nDESCRIPTION: Configuration for using a local mail catcher in development.yaml. This sets up the SMTP connection to localhost on port 1025 without security.\nSOURCE: https://github.com/loco-rs/loco/blob/master/docs-site/content/docs/processing/mailers.md#2025-04-20_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\n# Mailer Configuration.\nmailer:\n  # SMTP mailer configuration.\n  smtp:\n    # Enable/Disable smtp mailer.\n    enable: true\n    # SMTP server host. e.x localhost, smtp.gmail.com\n    host: localhost\n    # SMTP server port\n    port: 1025\n    # Use secure connection (SSL/TLS).\n    secure: false\n```\n\n----------------------------------------\n\nTITLE: Installing Frontend Dependencies\nDESCRIPTION: Commands to navigate to the frontend directory and install the required Node.js dependencies using pnpm package manager.\nSOURCE: https://github.com/loco-rs/loco/blob/master/docs-site/content/blog/frontend-website.md#2025-04-20_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\n$ cd todolist/frontend\n$ pnpm install\n```\n\n----------------------------------------\n\nTITLE: Updating Dependencies in Cargo.toml\nDESCRIPTION: This snippet shows how to update the validator and axum-test dependencies in the Cargo.toml file for loco-rs v0.10.1.\nSOURCE: https://github.com/loco-rs/loco/blob/master/CHANGELOG.md#2025-04-20_snippet_7\n\nLANGUAGE: toml\nCODE:\n```\n# update\nvalidator = { version = \"0.18\" }\n\n# update\naxum-test = { version = \"16\" }\n```\n\n----------------------------------------\n\nTITLE: Updating Validator Crate Usage in Rust\nDESCRIPTION: This code demonstrates how to update the usage of the validator crate in loco-rs v0.10.1 to comply with the new API.\nSOURCE: https://github.com/loco-rs/loco/blob/master/CHANGELOG.md#2025-04-20_snippet_6\n\nLANGUAGE: rust\nCODE:\n```\n// BEFORE:\n#[validate(custom = \"validation::is_valid_email\")]\npub email: String,\n\n// AFTER:\n#[validate(custom (function = \"validation::is_valid_email\"))]\npub email: String,\n```\n\n----------------------------------------\n\nTITLE: Disabling All Middleware in Loco-rs YAML Configuration\nDESCRIPTION: This YAML configuration demonstrates how to disable all middleware in a Loco-rs application by setting enable: false for each middleware component.\nSOURCE: https://github.com/loco-rs/loco/blob/master/docs-site/content/docs/the-app/controller.md#2025-04-20_snippet_12\n\nLANGUAGE: yaml\nCODE:\n```\nserver:\n  middlewares:\n    cors:\n      enable: false\n    catch_panic:\n      enable: false\n    etag:\n      enable: false\n    logger:\n      enable: false\n    request_id:\n      enable: false\n    fallback:\n      enable: false\n```\n\n----------------------------------------\n\nTITLE: Updating Configuration from Redis to Queue in YAML\nDESCRIPTION: Example showing the configuration change required when transitioning from 'redis' to 'queue' naming in the application configuration as part of the breaking changes in v0.5.0.\nSOURCE: https://github.com/loco-rs/loco/blob/master/CHANGELOG.md#2025-04-20_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\n# before:\nredis:\n# after:\nqueue:\n```\n\n----------------------------------------\n\nTITLE: Defining Terraform Output for Application URL\nDESCRIPTION: Creates an output variable to display the ALB's URL after deployment, providing easy access to the application endpoint.\nSOURCE: https://github.com/loco-rs/loco/blob/master/docs-site/content/blog/deploy-aws.md#2025-04-20_snippet_15\n\nLANGUAGE: hcl\nCODE:\n```\noutput \"alb_url\" {\n  value = \"https://${aws_alb.myapp.dns_name}\"\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Advanced Middleware to Routes\nDESCRIPTION: Shows how to add the context-aware middleware to specific routes in the application configuration.\nSOURCE: https://github.com/loco-rs/loco/blob/master/docs-site/content/docs/extras/pluggability.md#2025-04-20_snippet_15\n\nLANGUAGE: rust\nCODE:\n```\npub struct App;\n\n#[async_trait]\nimpl Hooks for App {\n    fn routes(ctx: &AppContext) -> AppRoutes {\n        AppRoutes::with_default_routes()\n            .add_route(controllers::notes::routes().layer(middlewares::log::LogLayer::new(ctx)))\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Authenticable Model Dependencies in Rust\nDESCRIPTION: Import statement needed for using the Authenticable trait and related model functionality.\nSOURCE: https://github.com/loco-rs/loco/blob/master/CHANGELOG.md#2025-04-20_snippet_18\n\nLANGUAGE: rust\nCODE:\n```\nuse loco_rs:{\n    auth, hash,\n    model::{Authenticable, ModelError, ModelResult},\n    validation,\n    validator::Validate,\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring AWS CLI\nDESCRIPTION: This snippet shows how to configure the AWS CLI with IAM user credentials for deployment.\nSOURCE: https://github.com/loco-rs/loco/blob/master/docs-site/content/blog/deploy-aws.md#2025-04-20_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\n$ aws configure\nAWS Access Key ID [None]: <your access key id>\nAWS Secret Access Key [None]: <your secret access key>\nDefault region name [None]: <your region>\nDefault output format [None]: json\n```\n\n----------------------------------------\n\nTITLE: Updating Background Worker Implementation in Rust\nDESCRIPTION: This snippet shows how to migrate the background worker implementation in loco-rs v0.10.1. It includes changes to the worker registration code, module references, and worker trait implementations.\nSOURCE: https://github.com/loco-rs/loco/blob/master/CHANGELOG.md#2025-04-20_snippet_4\n\nLANGUAGE: rust\nCODE:\n```\n// in your app.rs, change the worker registration code:\n\n// BEFORE\nfn connect_workers<'a>(p: &'a mut Processor, ctx: &'a AppContext) {\n    p.register(DownloadWorker::build(ctx)); \n}\n\n// AFTER\nasync fn connect_workers(ctx: &AppContext, queue: &Queue) -> Result<()>{\n    queue.register(DownloadWorker::build(ctx)).await?;\n    Ok()\n}\n\n// in your app.rs, replace the `worker` module references.\n// REMOVE\nworker::{AppWorker, Processor},\n// REPLACE WITH\nbgworker::{BackgroundWorker, Queue},\n\n// in your workers change the signature, and add the `build` function\n\n// BEFORE\nimpl worker::Worker<DownloadWorkerArgs> for DownloadWorker {\n    async fn perform(&self, args: DownloadWorkerArgs) -> worker::Result<()> {\n\n// AFTER\n#[async_trait]\nimpl BackgroundWorker<DownloadWorkerArgs> for DownloadWorker {\n    fn build(ctx: &AppContext) -> Self {\n        Self { ctx: ctx.clone() }\n    }\n    async fn perform(&self, args: DownloadWorkerArgs) -> Result<()> {\n  \n// Finally, remove the `AppWorker` trait implementation completely.\n\n// REMOVE\nimpl worker::AppWorker<DownloadWorkerArgs> for DownloadWorker {\n    fn build(ctx: &AppContext) -> Self {\n        Self { ctx: ctx.clone() }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Migration Function with Injection Point\nDESCRIPTION: Code snippet showing how to set up the migrations function in lib.rs with the required injection comment for the migration generator to properly insert new migrations.\nSOURCE: https://github.com/loco-rs/loco/blob/master/CHANGELOG.md#2025-04-20_snippet_3\n\nLANGUAGE: rust\nCODE:\n```\n    fn migrations() -> Vec<Box<dyn MigrationTrait>> {\n        vec![\n            // inject-below (do not remove this comment)\n```\n\n----------------------------------------\n\nTITLE: Generating a Controller with Loco CLI\nDESCRIPTION: Demonstrates how to generate a new API controller using Loco's CLI generator command.\nSOURCE: https://github.com/loco-rs/loco/blob/master/docs-site/content/docs/getting-started/guide.md#2025-04-20_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\n$ cargo loco generate controller guide --api\n```\n\n----------------------------------------\n\nTITLE: Forgot Password Request\nDESCRIPTION: cURL command for initiating password reset flow with user email\nSOURCE: https://github.com/loco-rs/loco/blob/master/docs-site/content/docs/extras/authentication.md#2025-04-20_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\ncurl --location '127.0.0.1:5150/api/auth/forgot' \\\n     --header 'Content-Type: application/json' \\\n     --data-raw '{\n         \"email\": \"user@loco.rs\"\n     }'\n```\n\n----------------------------------------\n\nTITLE: Example Log Output with Middleware in Loco-rs\nDESCRIPTION: This shell output shows an example of the logging middleware in action. When a request is made to the notes creation endpoint, the middleware logs the user's name along with request details.\nSOURCE: https://github.com/loco-rs/loco/blob/master/docs-site/content/docs/extras/pluggability.md#2025-04-20_snippet_19\n\nLANGUAGE: shell\nCODE:\n```\n2024-XX-XXTXX:XX:XX.XXXXXZ  INFO http-request: xx::controllers::middleware::log User: John Doe  environment=development request_id=xxxxx\n```\n\n----------------------------------------\n\nTITLE: Disabling Catch Panic Middleware in Loco-rs\nDESCRIPTION: This YAML configuration shows how to disable the panic-catching middleware in a Loco-rs application.\nSOURCE: https://github.com/loco-rs/loco/blob/master/docs-site/content/docs/the-app/controller.md#2025-04-20_snippet_21\n\nLANGUAGE: yaml\nCODE:\n```\n#...\n  middlewares:\n    catch_panic:\n      enable: false\n```\n\n----------------------------------------\n\nTITLE: Installing Insta CLI for Snapshot Testing\nDESCRIPTION: Command to install the Insta CLI tool, which is used for snapshot testing to detect changes in output formats and behavior.\nSOURCE: https://github.com/loco-rs/loco/blob/master/CONTRIBUTING.md#2025-04-20_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\ncargo install cargo-insta\n```\n\n----------------------------------------\n\nTITLE: Default mailer configuration in YAML\nDESCRIPTION: Basic SMTP configuration for mailers in the config/[stage].yaml file. This default configuration uses localhost as the SMTP server with port 1025 and no security.\nSOURCE: https://github.com/loco-rs/loco/blob/master/docs-site/content/docs/processing/mailers.md#2025-04-20_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n# Mailer Configuration.\nmailer:\n  # SMTP mailer configuration.\n  smtp:\n    # Enable/Disable smtp mailer.\n    enable: true\n    # SMTP server host. e.x localhost, smtp.gmail.com\n    host: {{/* get_env(name=\"MAILER_HOST\", default=\"localhost\") */}}\n    # SMTP server port\n    port: 1025\n    # Use secure connection (SSL/TLS).\n    secure: false\n    # auth:\n    #   user:\n    #   password:\n```\n\n----------------------------------------\n\nTITLE: Configuring the Powered-by Header in Loco-rs\nDESCRIPTION: This YAML configuration shows how to customize the powered-by middleware by changing the server.ident value.\nSOURCE: https://github.com/loco-rs/loco/blob/master/docs-site/content/docs/the-app/controller.md#2025-04-20_snippet_13\n\nLANGUAGE: yaml\nCODE:\n```\nserver:\n    ident: my-server #(or empty string to disable)\n```\n\n----------------------------------------\n\nTITLE: Default Fallback Configuration\nDESCRIPTION: YAML configuration for enabling the default fallback behavior with the Loco welcome screen for 404 requests in development mode.\nSOURCE: https://github.com/loco-rs/loco/blob/master/docs-site/content/docs/the-app/controller.md#2025-04-20_snippet_27\n\nLANGUAGE: yaml\nCODE:\n```\n# the default pre-baked welcome screen\nfallback:\n    enable: true\n```\n\n----------------------------------------\n\nTITLE: Checking Required Resources with Loco Doctor\nDESCRIPTION: Command to verify that all required resources for the Loco application are available and properly configured, including SeaORM CLI, database, and Redis connections.\nSOURCE: https://github.com/loco-rs/loco/blob/master/docs-site/content/blog/frontend-website.md#2025-04-20_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\n$ cd todolist\n$ cargo loco doctor\n✅ SeaORM CLI is installed\n✅ DB connection: success\n✅ Redis connection: success\n```\n\n----------------------------------------\n\nTITLE: Advanced Middleware Log Output Example\nDESCRIPTION: Example of the log output format when using the advanced context-aware middleware showing user information.\nSOURCE: https://github.com/loco-rs/loco/blob/master/docs-site/content/docs/extras/pluggability.md#2025-04-20_snippet_16\n\nLANGUAGE: shell\nCODE:\n```\n2024-XX-XXTXX:XX:XX.XXXXXZ  INFO http-request: xx::controllers::middleware::log User: John Doe  environment=development request_id=xxxxx\n```\n\n----------------------------------------\n\nTITLE: Rolling Back Multiple Migrations in Loco-rs\nDESCRIPTION: Command to rollback multiple migrations by specifying the number to rollback. In this example, it rolls back the last 2 migrations.\nSOURCE: https://github.com/loco-rs/loco/blob/master/docs-site/content/docs/the-app/models.md#2025-04-20_snippet_7\n\nLANGUAGE: sh\nCODE:\n```\ncargo loco db down 2\n```\n\n----------------------------------------\n\nTITLE: Installing Nightly Rustfmt with Rustup\nDESCRIPTION: Command to install the nightly version of rustfmt using rustup, which is required for applying the code style rules specified in the .rustfmt.toml file.\nSOURCE: https://github.com/loco-rs/loco/blob/master/CONTRIBUTING.md#2025-04-20_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nrustup component add rustfmt --toolchain nightly\n```\n\n----------------------------------------\n\nTITLE: SendGrid SMTP configuration in YAML\nDESCRIPTION: Example of configuring SendGrid as the SMTP provider in the config file. This setup uses secure connection on port 587 with authentication via an API key.\nSOURCE: https://github.com/loco-rs/loco/blob/master/docs-site/content/docs/processing/mailers.md#2025-04-20_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n# Mailer Configuration.\nmailer:\n  # SMTP mailer configuration.\n  smtp:\n    # Enable/Disable smtp mailer.\n    enable: true\n    # SMTP server host. e.x localhost, smtp.gmail.com\n    host: {{/* get_env(name=\"MAILER_HOST\", default=\"smtp.sendgrid.net\") */}}\n    # SMTP server port\n    port: 587\n    # Use secure connection (SSL/TLS).\n    secure: true\n    auth:\n      user: \"apikey\"\n      password: \"your-sendgrid-api-key\"\n```\n\n----------------------------------------\n\nTITLE: Updating Environment Parameter Type in Boot Method\nDESCRIPTION: Breaking change migration code showing how to update the boot method parameter type from &str to &Environment.\nSOURCE: https://github.com/loco-rs/loco/blob/master/CHANGELOG.md#2025-04-20_snippet_13\n\nLANGUAGE: rust\nCODE:\n```\n// src/app.rs: change parameter type for `environment` from `&str` to `&Environment`\nimpl Hooks for App {\n    ...\n    async fn boot(mode: StartMode, environment: &Environment) -> Result<BootResult> {\n        create_app::<Self>(mode, environment).await\n    }\n    ...\n```\n\n----------------------------------------\n\nTITLE: Disabling Fallback for Production\nDESCRIPTION: YAML configuration for disabling the fallback behavior in production environments.\nSOURCE: https://github.com/loco-rs/loco/blob/master/docs-site/content/docs/the-app/controller.md#2025-04-20_snippet_30\n\nLANGUAGE: yaml\nCODE:\n```\n# disable. you can also remove the `fallback` section entirely to disable\nfallback:\n    enable: false\n```\n\n----------------------------------------\n\nTITLE: Starting the Loco Server\nDESCRIPTION: Command to start the Loco server in development mode, which will run the backend API and handle requests.\nSOURCE: https://github.com/loco-rs/loco/blob/master/docs-site/content/blog/frontend-website.md#2025-04-20_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\n$ cargo loco start\n   Updating crates.io index\n   .\n   .\n   .\n\n                      ▄     ▀\n                                 ▀  ▄\n                  ▄       ▀     ▄  ▄ ▄▀\n                                    ▄ ▀▄▄\n                        ▄     ▀    ▀  ▀▄▀█▄\n                                          ▀█▄\n▄▄▄▄▄▄▄  ▄▄▄▄▄▄▄▄▄   ▄▄▄▄▄▄▄▄▄▄▄ ▄▄▄▄▄▄▄▄▄ ▀▀█\n ██████  █████   ███ █████   ███ █████   ███ ▀█\n ██████  █████   ███ █████   ▀▀▀ █████   ███ ▄█▄\n ██████  █████   ███ █████       █████   ███ ████▄\n ██████  █████   ███ █████   ▄▄▄ █████   ███ █████\n ██████  █████   ███  ████   ███ █████   ███ ████▀\n   ▀▀▀██▄ ▀▀▀▀▀▀▀▀▀▀  ▀▀▀▀▀▀▀▀▀▀  ▀▀▀▀▀▀▀▀▀▀ ██▀\n       ▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀\n                https://loco.rs\n\nenvironment: development\n   database: automigrate\n     logger: debug\n      modes: server\n\nlistening on port 5150\n```\n\n----------------------------------------\n\nTITLE: Environment Configuration in Loco (YAML)\nDESCRIPTION: Demonstrates how Loco handles environment-specific configuration, allowing for easy value loading from environment variables.\nSOURCE: https://github.com/loco-rs/loco/blob/master/docs-site/content/docs/getting-started/axum-users.md#2025-04-20_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\n# config/development.yaml\n\n# Web server configuration\nserver:\n  # Port on which the server will listen. the server binding is 0.0.0.0:{PORT}\n  port:  {{/* get_env(name=\"NODE_PORT\", default=5150) */}}\n```\n\n----------------------------------------\n\nTITLE: Initializing Terraform for AWS Deployment\nDESCRIPTION: Command to initialize Terraform in the working directory, downloading necessary providers and modules for the AWS deployment.\nSOURCE: https://github.com/loco-rs/loco/blob/master/docs-site/content/blog/deploy-aws.md#2025-04-20_snippet_19\n\nLANGUAGE: sh\nCODE:\n```\n$ terraform init\n```\n\n----------------------------------------\n\nTITLE: Running Nightly Rustfmt for Code Formatting\nDESCRIPTION: Command to format code using the nightly version of rustfmt, applying the style rules defined in the project.\nSOURCE: https://github.com/loco-rs/loco/blob/master/CONTRIBUTING.md#2025-04-20_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\ncargo +nightly fmt\n```\n\n----------------------------------------\n\nTITLE: Configuring Extra Database in YAML\nDESCRIPTION: YAML configuration for adding an additional database connection to a Loco-rs application. This shows the settings structure for database connection parameters.\nSOURCE: https://github.com/loco-rs/loco/blob/master/docs-site/content/docs/the-app/models.md#2025-04-20_snippet_25\n\nLANGUAGE: yaml\nCODE:\n```\nsettings:\n  extra_db:\n    uri: postgres://loco:loco@localhost:5432/loco_app\n    enable_logging: false\n    connect_timeout: 500\n    idle_timeout: 500\n    min_connections: 1\n    max_connections: 1\n    auto_migrate: true\n    dangerously_truncate: false\n    dangerously_recreate: false\n```\n\n----------------------------------------\n\nTITLE: Logging Setup in Axum Project (Rust)\nDESCRIPTION: Illustrates how logging is set up in various parts of the Axum project, requiring manual configuration and decision-making.\nSOURCE: https://github.com/loco-rs/loco/blob/master/docs-site/content/docs/getting-started/axum-users.md#2025-04-20_snippet_8\n\nLANGUAGE: rust\nCODE:\n```\n// In serving\n.layer(TraceLayer::new_for_http()),\n\n// In main\nenv_logger::init();\n\n// Ad-hoc logging\nlog::error!(\"SQLx error: {:?}\", e);\n```\n\n----------------------------------------\n\nTITLE: Viewing scaffold generation options in Loco\nDESCRIPTION: Displays the help information for the scaffold generation command, showing available options for generating CRUD operations for a resource.\nSOURCE: https://github.com/loco-rs/loco/blob/master/docs-site/content/docs/the-app/your-project.md#2025-04-20_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\nGenerates a CRUD scaffold, model and controller\n\nUsage: demo_app-cli generate scaffold [OPTIONS] <NAME> [FIELDS]...\n\nArguments:\n  <NAME>       Name of the thing to generate\n  [FIELDS]...  Model fields, eg. title:string hits:int\n\nOptions:\n  -k, --kind <KIND>                The kind of scaffold to generate [possible values: api, html, htmx]\n      --htmx                       Use HTMX scaffold\n      --html                       Use HTML scaffold\n      --api                        Use API scaffold\n  -e, --environment <ENVIRONMENT>  Specify the environment [default: development]\n  -h, --help                       Print help\n  -V, --version                    Print version\n```\n\n----------------------------------------\n\nTITLE: Building the Frontend for Production\nDESCRIPTION: Command to build the React frontend application for production, which creates optimized static files in the 'dist' directory.\nSOURCE: https://github.com/loco-rs/loco/blob/master/docs-site/content/blog/frontend-website.md#2025-04-20_snippet_7\n\nLANGUAGE: sh\nCODE:\n```\npnpm build\n```\n\n----------------------------------------\n\nTITLE: Sample Environment File for Axum Project\nDESCRIPTION: Provides an example of the .env file used in the Axum project, which needs to be manually maintained and loaded.\nSOURCE: https://github.com/loco-rs/loco/blob/master/docs-site/content/docs/getting-started/axum-users.md#2025-04-20_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\nDATABASE_URL=postgresql://postgres:{password}@localhost/realworld_axum_sqlx\nHMAC_KEY={random-string}\nRUST_LOG=realworld_axum_sqlx=debug,tower_http=debug\n```\n\n----------------------------------------\n\nTITLE: Running Loco with Bacon Build Tool\nDESCRIPTION: Alternative command to run the Loco application using the Bacon development tool for Rust projects.\nSOURCE: https://github.com/loco-rs/loco/blob/master/docs-site/content/docs/resources/faq.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nbacon run\n```\n\n----------------------------------------\n\nTITLE: Generating a Controller with Loco CLI\nDESCRIPTION: Command to generate a new API controller named 'mysession' using the Loco CLI tool.\nSOURCE: https://github.com/loco-rs/loco/blob/master/docs-site/content/blog/axum-session.md#2025-04-20_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\n❯ cargo loco generate controller mysession --api\n    Finished dev [unoptimized + debuginfo] target(s) in 0.36s\n     Running `target/debug/axum-session-cli generate controller mysession`\nadded: \"src/controllers/mysession.rs\"\ninjected: \"src/controllers/mod.rs\"\ninjected: \"src/app.rs\"\nadded: \"tests/requests/mysession.rs\"\ninjected: \"tests/requests/mod.rs\"\n```\n\n----------------------------------------\n\nTITLE: Implementing a Backup Strategy for Storage Redundancy\nDESCRIPTION: Configures a backup storage strategy that provides redundancy across multiple storage providers with a specific failure mode policy.\nSOURCE: https://github.com/loco-rs/loco/blob/master/docs-site/content/docs/infrastructure/storage.md#2025-04-20_snippet_4\n\nLANGUAGE: rust\nCODE:\n```\n// Define the backup strategy by setting the primary store and secondary stores by names.\nlet strategy: Box<dyn StorageStrategy> = Box::new(BackupStrategy::new(\n    \"store_1\",\n    Some(vec![\"store_2\".to_string(), \"store_3\".to_string()]),\n    FailureMode::AllowBackupFailure,\n)) as Box<dyn StorageStrategy>;\n\nlet storage = Storage::new(\n    BTreeMap::from([\n        (\"store_1\".to_string(), store_1),\n        (\"store_2\".to_string(), store_2),\n        (\"store_3\".to_string(), store_3),\n    ]),\n    strategy.into(),\n);\n```\n\n----------------------------------------\n\nTITLE: Loading Environment Variables in Axum (Rust)\nDESCRIPTION: Shows how environment variables are loaded in the Axum-based project using dotenv, which requires explicit coding in the main function.\nSOURCE: https://github.com/loco-rs/loco/blob/master/docs-site/content/docs/getting-started/axum-users.md#2025-04-20_snippet_2\n\nLANGUAGE: rust\nCODE:\n```\ndotenv::dotenv().ok();\n```\n\n----------------------------------------\n\nTITLE: Worker Generation Command\nDESCRIPTION: CLI command for generating a new worker file with test template.\nSOURCE: https://github.com/loco-rs/loco/blob/master/docs-site/content/docs/processing/workers.md#2025-04-20_snippet_7\n\nLANGUAGE: sh\nCODE:\n```\ncargo loco generate worker report_worker\n```\n\n----------------------------------------\n\nTITLE: Complete Loco Application Startup Output\nDESCRIPTION: Example output when starting a Loco application, showing the build process, ASCII art logo, and server configuration information including environment settings, database status, and the local development URL.\nSOURCE: https://github.com/loco-rs/loco/blob/master/loco-new/base_template/README.md#2025-04-20_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\n$ cargo loco start\nFinished dev [unoptimized + debuginfo] target(s) in 21.63s\n    Running `target/debug/myapp start`\n\n    :\n    :\n    :\n\ncontroller/app_routes.rs:203: [Middleware] Adding log trace id\n\n                      ▄     ▀\n                                 ▀  ▄\n                  ▄       ▀     ▄  ▄ ▄▀\n                                    ▄ ▀▄▄\n                        ▄     ▀    ▀  ▀▄▀█▄\n                                          ▀█▄\n▄▄▄▄▄▄▄  ▄▄▄▄▄▄▄▄▄   ▄▄▄▄▄▄▄▄▄▄▄ ▄▄▄▄▄▄▄▄▄ ▀▀█\n ██████  █████   ███ █████   ███ █████   ███ ▀█\n ██████  █████   ███ █████   ▀▀▀ █████   ███ ▄█▄\n ██████  █████   ███ █████       █████   ███ ████▄\n ██████  █████   ███ █████   ▄▄▄ █████   ███ █████\n ██████  █████   ███  ████   ███ █████   ███ ████▀\n   ▀▀▀██▄ ▀▀▀▀▀▀▀▀▀▀  ▀▀▀▀▀▀▀▀▀▀  ▀▀▀▀▀▀▀▀▀▀ ██▀\n       ▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀\n                https://loco.rs\n\nenvironment: development\n   database: automigrate\n     logger: debug\ncompilation: debug\n      modes: server\n\nlistening on http://localhost:5150\n```\n\n----------------------------------------\n\nTITLE: User Registration Request\nDESCRIPTION: cURL command for registering a new user with name, email, and password\nSOURCE: https://github.com/loco-rs/loco/blob/master/docs-site/content/docs/extras/authentication.md#2025-04-20_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\ncurl --location '127.0.0.1:5150/api/auth/register' \\\n     --header 'Content-Type: application/json' \\\n     --data-raw '{\n         \"name\": \"Loco user\",\n         \"email\": \"user@loco.rs\",\n         \"password\": \"12341234\"\n     }'\n```\n\n----------------------------------------\n\nTITLE: Running and Reviewing Snapshot Tests with Insta\nDESCRIPTION: Command to run tests and review or update snapshots using the Insta snapshot testing framework.\nSOURCE: https://github.com/loco-rs/loco/blob/master/CONTRIBUTING.md#2025-04-20_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\ncargo insta test --review\n```\n\n----------------------------------------\n\nTITLE: Starting the Vite Development Server\nDESCRIPTION: Command to start the Vite development server for the React frontend application, which enables hot module replacement during development.\nSOURCE: https://github.com/loco-rs/loco/blob/master/docs-site/content/blog/frontend-website.md#2025-04-20_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\n$ pnpm dev\n```\n\n----------------------------------------\n\nTITLE: Configuring Request Body Size Limit in Loco-rs\nDESCRIPTION: This YAML configuration shows how to change the maximum allowed request body size for the limit_payload middleware.\nSOURCE: https://github.com/loco-rs/loco/blob/master/docs-site/content/docs/the-app/controller.md#2025-04-20_snippet_15\n\nLANGUAGE: yaml\nCODE:\n```\n  middlewares:\n    limit_payload:\n      body_limit: 5mb\n```\n\n----------------------------------------\n\nTITLE: Configuring Logger Middleware\nDESCRIPTION: YAML configuration for disabling the logger middleware which provides HTTP request logging functionality.\nSOURCE: https://github.com/loco-rs/loco/blob/master/docs-site/content/docs/the-app/controller.md#2025-04-20_snippet_26\n\nLANGUAGE: yaml\nCODE:\n```\n#...\n  middlewares:\n    logger:\n      enable: false\n```\n\n----------------------------------------\n\nTITLE: Configuring Terraform for AWS Deployment\nDESCRIPTION: This snippet shows the initial Terraform configuration for deploying the Loco app to AWS, including required providers and versions.\nSOURCE: https://github.com/loco-rs/loco/blob/master/docs-site/content/blog/deploy-aws.md#2025-04-20_snippet_6\n\nLANGUAGE: hcl\nCODE:\n```\nterraform {\n  required_providers {\n    aws = {\n      source = \"hashicorp/aws\"\n      version = \"~> 4.0\"\n    }\n    archive = {\n      source = \"hashicorp/archive\"\n      version = \"~> 2.2.0\"\n    }\n  }\n\n  required_version = \"~> 1.0\"\n}\n```\n\n----------------------------------------\n\nTITLE: Setting up a mail catcher with mailtutan (Bash)\nDESCRIPTION: Commands to install and run mailtutan, a Rust-based mail catcher for development. This provides a local SMTP server that displays received emails in a web UI.\nSOURCE: https://github.com/loco-rs/loco/blob/master/docs-site/content/docs/processing/mailers.md#2025-04-20_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ cargo install mailtutan\n$ mailtutan\nlistening on smtp://0.0.0.0:1025\nlistening on http://0.0.0.0:1080\n```\n\n----------------------------------------\n\nTITLE: Get Current User Request\nDESCRIPTION: cURL command for retrieving current user information using JWT token\nSOURCE: https://github.com/loco-rs/loco/blob/master/docs-site/content/docs/extras/authentication.md#2025-04-20_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\ncurl --location --request GET '127.0.0.1:5150/api/auth/current' \\\n     --header 'Content-Type: application/json' \\\n     --header 'Authorization: Bearer TOKEN'\n```\n\n----------------------------------------\n\nTITLE: Empty Preset Secure Headers Configuration\nDESCRIPTION: YAML configuration for secure headers middleware starting from an empty preset with custom header definitions.\nSOURCE: https://github.com/loco-rs/loco/blob/master/docs-site/content/docs/the-app/controller.md#2025-04-20_snippet_35\n\nLANGUAGE: yaml\nCODE:\n```\nserver:\n  middleware:\n    # set secure headers\n    secure_headers:\n      preset: empty\n      overrides:\n        foo: bar\n```\n\n----------------------------------------\n\nTITLE: Running the Frontend in Development Mode\nDESCRIPTION: Command to start the development server for the SaaS frontend application using PNPM.\nSOURCE: https://github.com/loco-rs/loco/blob/master/loco-new/base_template/frontend/README.md#2025-04-20_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\npnpm dev\n```\n\n----------------------------------------\n\nTITLE: Configuring Loco's Homepage in TOML\nDESCRIPTION: This TOML configuration defines the homepage structure for the Loco framework website, including the main heading, navigation menu items, and feature list highlights. It sets up the site navigation and key marketing points about the framework's capabilities.\nSOURCE: https://github.com/loco-rs/loco/blob/master/docs-site/content/_index.md#2025-04-20_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n+++\ntitle = \"Loco\"\n\n\n# The homepage contents\n[extra]\nlead = 'The <em>one-person framework</em> for Rust for side-projects and startups'\nurl = \"/docs/getting-started/tour/\"\nurl_button = \"Get started\"\n\n# Menu items\n[[extra.menu.main]]\nname = \"Docs\"\nsection = \"docs\"\nurl = \"/docs/getting-started/tour/\"\nweight = 10\n\n[[extra.menu.main]]\nname = \"Blog\"\nsection = \"blog\"\nurl = \"/blog/\"\nweight = 20\n\n[[extra.menu.main]]\nname = \"Casts\"\nsection = \"casts\"\nurl = \"/casts/\"\n\nweight = 20\n[[extra.list]]\ntitle = \"🔋 Batteries included\"\ncontent = 'Empower the 1-person team. Service, data, emails, background jobs, tasks, CLI to drive it, everything is included.'\n\n[[extra.list]]\ntitle = \"🔮 Rails is great\"\ncontent = 'Loco follows Rails. There, I said it. Rails concepts are carefully adapted to modern Rust development.'\n\n[[extra.list]]\ntitle = \"🏅 Deliver with confidence\"\ncontent = \"Unapologetically optimized for the solo developer. Complexity and heavylifting is tucked away.\"\n\n[[extra.list]]\ntitle = \"⚡️ Scale when needed\"\ncontent = \"Split, reconfigure, or use only parts of Loco when you need to. Build and grow without pain.\"\n\n[[extra.list]]\ntitle = \"🚀️ Build incrementally\"\ncontent = \"Use what you need. Just a service, a service with a database, a background job worker, or a task.\"\n\n[[extra.list]]\ntitle = \"🚦Test driven everything\"\ncontent = \"Test your app with very little effort. Models, controllers, background jobs and more. Ship fast with confidence.\"\n\n+++\n```\n\n----------------------------------------\n\nTITLE: Generating a Scheduler Configuration File in Loco\nDESCRIPTION: Command to generate a template scheduler.yaml file in the config folder for managing scheduler jobs.\nSOURCE: https://github.com/loco-rs/loco/blob/master/docs-site/content/docs/processing/scheduler.md#2025-04-20_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ncargo loco generate scheduler\n```\n\n----------------------------------------\n\nTITLE: Setting up Service Security Group in Terraform\nDESCRIPTION: Creates a security group for the ECS service that allows inbound traffic from the load balancer and all outbound traffic, securing the application containers.\nSOURCE: https://github.com/loco-rs/loco/blob/master/docs-site/content/blog/deploy-aws.md#2025-04-20_snippet_17\n\nLANGUAGE: hcl\nCODE:\n```\nresource \"aws_security_group\" \"service_security_group\" {\n  ingress {\n    from_port       = 0\n    to_port         = 0\n    protocol        = \"-1\"\n    security_groups = [\"${aws_security_group.load_balancer_security_group.id}\"]\n  }\n\n  egress {\n    from_port   = 0\n    to_port     = 0\n    protocol    = \"-1\"\n    cidr_blocks = [\"0.0.0.0/0\"]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Original Comment Controller Endpoint\nDESCRIPTION: Shows the initial implementation of the add function in the comments controller without authentication requirements.\nSOURCE: https://github.com/loco-rs/loco/blob/master/docs-site/content/docs/getting-started/guide.md#2025-04-20_snippet_17\n\nLANGUAGE: rust\nCODE:\n```\npub async fn add(State(ctx): State<AppContext>, Json(params): Json<Params>) -> Result<Response> {\n    let mut item: ActiveModel = Default::default();\n    params.update(&mut item);\n    let item = item.insert(&ctx.db).await?;\n    format::json(item)\n}\n```\n\n----------------------------------------\n\nTITLE: Generating a New Data Loader in Loco\nDESCRIPTION: Command to create a new data loader using Loco's generator. This creates data files and necessary module structure for a 'stocks' data loader.\nSOURCE: https://github.com/loco-rs/loco/blob/master/docs-site/content/docs/infrastructure/data.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ cargo loco g data stocks\nadded: \"data/stocks/data.json\"\nadded: \"src/data/stocks.rs\"\ninjected: \"src/data/mod.rs\"\n* Data loader `Stocks` was added successfully.\n```\n\n----------------------------------------\n\nTITLE: Terraform Deployment Completion Output\nDESCRIPTION: Example output after successful Terraform deployment, showing the number of resources created and the Application Load Balancer URL for accessing the deployed application.\nSOURCE: https://github.com/loco-rs/loco/blob/master/docs-site/content/blog/deploy-aws.md#2025-04-20_snippet_22\n\nLANGUAGE: sh\nCODE:\n```\nApply complete! Resources: 20 added, 0 changed, 0 destroyed.\n\nOutputs:\n\nalb_url = https://myapp-lb-1234567890.us-east-2.elb.amazonaws.com\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies with PNPM\nDESCRIPTION: Command to install all required packages for the SaaS frontend project using the PNPM package manager.\nSOURCE: https://github.com/loco-rs/loco/blob/master/loco-new/base_template/frontend/README.md#2025-04-20_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\npnpm install\n```\n\n----------------------------------------\n\nTITLE: Registering a New User\nDESCRIPTION: cURL command to register a new user in the application by sending a POST request to the authentication endpoint with name, email, and password in JSON format.\nSOURCE: https://github.com/loco-rs/loco/blob/master/docs-site/content/docs/getting-started/tour/index.md#2025-04-20_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\n$ curl --location 'localhost:5150/api/auth/register' \\\n     --header 'Content-Type: application/json' \\\n     --data-raw '{\n         \"name\": \"Loco user\",\n         \"email\": \"user@loco.rs\",\n         \"password\": \"12341234\"\n     }'\n```\n\n----------------------------------------\n\nTITLE: Listing Middleware Configuration in Loco-rs\nDESCRIPTION: This command shows how to list all enabled middlewares and their configurations in a Loco-rs application.\nSOURCE: https://github.com/loco-rs/loco/blob/master/docs-site/content/docs/the-app/controller.md#2025-04-20_snippet_11\n\nLANGUAGE: sh\nCODE:\n```\ncargo loco middleware --config\n```\n\n----------------------------------------\n\nTITLE: Reset Password Request\nDESCRIPTION: cURL command for resetting password with reset token and new password\nSOURCE: https://github.com/loco-rs/loco/blob/master/docs-site/content/docs/extras/authentication.md#2025-04-20_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\ncurl --location '127.0.0.1:5150/api/auth/reset' \\\n     --header 'Content-Type: application/json' \\\n     --data '{\n         \"token\": \"TOKEN\",\n         \"password\": \"new-password\"\n     }'\n```\n\n----------------------------------------\n\nTITLE: Setting Server Port in Loco Configuration (YAML)\nDESCRIPTION: Demonstrates how to set the server port in Loco's configuration file, eliminating the need for hardcoding in the main function.\nSOURCE: https://github.com/loco-rs/loco/blob/master/docs-site/content/docs/getting-started/axum-users.md#2025-04-20_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nserver:\n  port: 5150\n```\n\n----------------------------------------\n\nTITLE: Initial Data Structure Definition in Rust\nDESCRIPTION: Default data structure definition generated by Loco for a new data loader. This structure needs to be customized to match the shape of the actual JSON data.\nSOURCE: https://github.com/loco-rs/loco/blob/master/docs-site/content/docs/infrastructure/data.md#2025-04-20_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\n#[derive(Debug, Clone, Serialize, Deserialize, Default)]\npub struct Stocks {\n    pub is_loaded: bool,\n}\n```\n\n----------------------------------------\n\nTITLE: YAML Error Handling Implementation\nDESCRIPTION: Example of implementing error handling with context for YAML parsing.\nSOURCE: https://github.com/loco-rs/loco/blob/master/DEVELOPMENT.md#2025-04-20_snippet_6\n\nLANGUAGE: rust\nCODE:\n```\n  serde_yaml::from_str(&rendered)\n      .map_err(|err| Error::YAMLFile(err, selected_path.to_string_lossy().to_string()))\n```\n\n----------------------------------------\n\nTITLE: Listing Blog Posts via API\nDESCRIPTION: cURL command to list all blog posts by sending a GET request to the generated API endpoint.\nSOURCE: https://github.com/loco-rs/loco/blob/master/docs-site/content/docs/getting-started/tour/index.md#2025-04-20_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\n$ curl localhost:5150/api/posts\n```\n\n----------------------------------------\n\nTITLE: User Login Request\nDESCRIPTION: cURL command for user login with email and password credentials\nSOURCE: https://github.com/loco-rs/loco/blob/master/docs-site/content/docs/extras/authentication.md#2025-04-20_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\ncurl --location '127.0.0.1:5150/api/auth/login' \\\n     --header 'Content-Type: application/json' \\\n     --data-raw '{\n         \"email\": \"user@loco.rs\",\n         \"password\": \"12341234\"\n     }'\n```\n\n----------------------------------------\n\nTITLE: Starting a Loco Application with CLI\nDESCRIPTION: Command to start a Loco application using the cargo loco CLI tool. This launches the development server on the default port.\nSOURCE: https://github.com/loco-rs/loco/blob/master/loco-new/base_template/README.md#2025-04-20_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ncargo loco start\n```\n\n----------------------------------------\n\nTITLE: Creating New Loco Application\nDESCRIPTION: Interactive CLI command output showing the process of creating a new Loco application with SaaS template and SQLite database\nSOURCE: https://github.com/loco-rs/loco/blob/master/docs-site/content/docs/getting-started/guide.md#2025-04-20_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\n❯ loco new\n✔ ❯ App name? · myapp\n✔ ❯ What would you like to build? · Saas App with client side rendering\n✔ ❯ Select a DB Provider · Sqlite\n✔ ❯ Select your background worker type · Async (in-process tokio async tasks)\n\n🚂 Loco app generated successfully in:\nmyapp/\n\n- assets: You've selected `clientside` for your asset serving configuration.\n\nNext step, build your frontend:\n  $ cd frontend/\n  $ npm install && npm run build\n```\n\n----------------------------------------\n\nTITLE: Custom File Fallback Configuration\nDESCRIPTION: YAML configuration for setting a custom 404 page file as the fallback response.\nSOURCE: https://github.com/loco-rs/loco/blob/master/docs-site/content/docs/the-app/controller.md#2025-04-20_snippet_28\n\nLANGUAGE: yaml\nCODE:\n```\n# a different predefined 404 page\nfallback:\n    enable: true\n    file: assets/404.html\n```\n\n----------------------------------------\n\nTITLE: Listing Scheduler Jobs from a Dedicated File\nDESCRIPTION: Command to list all the configured jobs from a dedicated scheduler configuration file to verify the setup.\nSOURCE: https://github.com/loco-rs/loco/blob/master/docs-site/content/docs/processing/scheduler.md#2025-04-20_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\ncargo loco scheduler --config config/scheduler.yaml --list\n```\n\n----------------------------------------\n\nTITLE: Configuring Dockerfile for Loco-rs and Angular Development\nDESCRIPTION: This Dockerfile sets up a development environment for a Loco-rs project with Angular. It installs Rust, PostgreSQL client, sea-orm-cli, Node.js, npm, and Angular CLI.\nSOURCE: https://github.com/loco-rs/loco/blob/master/docs-site/content/blog/angular-frontend.md#2025-04-20_snippet_0\n\nLANGUAGE: Dockerfile\nCODE:\n```\nFROM mcr.microsoft.com/vscode/devcontainers/rust:0-1\n\n# Install postgresql-client and sea-orm-cli\nRUN apt-get update && export DEBIAN_FRONTEND=noninteractive \\\n    && apt-get -y install --no-install-recommends postgresql-client \\\n    && cargo install sea-orm-cli \\\n    && chown -R vscode /usr/local/cargo\n\n# Install Node.js and npm\nRUN curl -fsSL https://deb.nodesource.com/setup_lts.x | bash - \\\n    && apt-get install -y nodejs\n# Install Angular CLI\nRUN npm install -g @angular/cli\n\nCOPY .env /.env\n```\n\n----------------------------------------\n\nTITLE: Starting Loco Server\nDESCRIPTION: Command to start the Loco server and its ASCII art startup banner output showing the server listening on port 5150.\nSOURCE: https://github.com/loco-rs/loco/blob/master/README.md#2025-04-20_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\n$ cargo loco start\n\n                      ▄     ▀\n                                ▀  ▄\n                  ▄       ▀     ▄  ▄ ▄▀\n                                    ▄ ▀▄▄\n                        ▄     ▀    ▀  ▀▄▀█▄\n                                          ▀█▄\n▄▄▄▄▄▄▄  ▄▄▄▄▄▄▄▄▄   ▄▄▄▄▄▄▄▄▄▄▄ ▄▄▄▄▄▄▄▄▄ ▀▀█\n██████  █████   ███ █████   ███ █████   ███ ▀█\n██████  █████   ███ █████   ▀▀▀ █████   ███ ▄█▄\n██████  █████   ███ █████       █████   ███ ████▄\n██████  █████   ███ █████   ▄▄▄ █████   ███ █████\n██████  █████   ███  ████   ███ █████   ███ ████▀\n  ▀▀▀██▄ ▀▀▀▀▀▀▀▀▀▀  ▀▀▀▀▀▀▀▀▀▀  ▀▀▀▀▀▀▀▀▀▀ ██▀\n      ▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀\n                https://loco.rs\n\nlistening on port 5150\n```\n\n----------------------------------------\n\nTITLE: Account Verification Request\nDESCRIPTION: cURL command for verifying user account with verification token\nSOURCE: https://github.com/loco-rs/loco/blob/master/docs-site/content/docs/extras/authentication.md#2025-04-20_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\ncurl --location --request GET '127.0.0.1:5150/api/auth/verify/TOKEN' \\\n     --header 'Content-Type: application/json'\n```\n\n----------------------------------------\n\nTITLE: Viewing Loco CLI command options\nDESCRIPTION: Displays the complete list of commands and options available in the Loco CLI. Shows various command categories like start, db, routes, and code generation.\nSOURCE: https://github.com/loco-rs/loco/blob/master/docs-site/content/docs/the-app/your-project.md#2025-04-20_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nThe one-person framework for Rust\n\nUsage: demo_app-cli [OPTIONS] <COMMAND>\n\nCommands:\n  start       Start an app\n  db          Perform DB operations\n  routes      Describe all application endpoints\n  middleware  Describe all application middlewares\n  task        Run a custom task\n  jobs        Managing jobs queue\n  scheduler   Run the scheduler\n  generate    code generation creates a set of files and code templates based on a predefined set of rules\n  doctor      Validate and diagnose configurations\n  version     Display the app version\n  watch       Watch and restart the app\n  help        Print this message or the help of the given subcommand(s)\n\nOptions:\n  -e, --environment <ENVIRONMENT>  Specify the environment [default: development]\n  -h, --help                       Print help\n  -V, --version                    Print version\n```\n\n----------------------------------------\n\nTITLE: Running PostgreSQL Docker Container for Loco Development\nDESCRIPTION: Shell command to start a PostgreSQL database server in a Docker container, configured for use with a Loco application.\nSOURCE: https://github.com/loco-rs/loco/blob/master/docs-site/content/docs/the-app/models.md#2025-04-20_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\ndocker run -d -p 5432:5432 \\\n  -e POSTGRES_USER=loco \\\n  -e POSTGRES_DB=myapp_development \\\n  -e POSTGRES_PASSWORD=\\\"loco\\\" \\\n  postgres:15.3-alpine\n```\n\n----------------------------------------\n\nTITLE: Custom Message Fallback Configuration\nDESCRIPTION: YAML configuration for customizing the fallback status code and message for not found resources.\nSOURCE: https://github.com/loco-rs/loco/blob/master/docs-site/content/docs/the-app/controller.md#2025-04-20_snippet_29\n\nLANGUAGE: yaml\nCODE:\n```\n# a message, and customizing the status code to return 200 instead of 404\nfallback:\n    enable: true\n    code: 200\n    not_found: cannot find this resource\n```\n\n----------------------------------------\n\nTITLE: Listing Scheduler Jobs from Environment Configuration\nDESCRIPTION: Command to list all the configured jobs from the environment-based configuration, using the LOCO_ENV variable.\nSOURCE: https://github.com/loco-rs/loco/blob/master/docs-site/content/docs/processing/scheduler.md#2025-04-20_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nLOCO_ENV=production cargo loco scheduler --list\n```\n\n----------------------------------------\n\nTITLE: Configuring Author Pages in TOML for Loco Blog\nDESCRIPTION: This TOML configuration defines metadata for the authors section of a blog, including title, description, and a mapping of author URLs to their corresponding page files. It uses the 'extra' table to store custom data for author pages.\nSOURCE: https://github.com/loco-rs/loco/blob/master/docs-site/content/authors/_index.md#2025-04-20_snippet_0\n\nLANGUAGE: TOML\nCODE:\n```\n+++\ntitle = \"Authors\"\ndescription = \"The authurs of the blog articles.\"\ndraft = false\n\n# If add a new author page in this section, please add a new item,\n# and the format is as follows:\n#\n# \"author-name-in-url\" = \"the-full-path-of-the-author-page\"\n#\n# Note: We use quoted keys here.\n[extra.author_pages]\n\"team-loco\" = \"authors/team-loco.md\"\n\"limpidcrypto\" = \"authors/limpidcrypto.md\"\n+++\n```\n\n----------------------------------------\n\nTITLE: Displaying Loco CLI help command\nDESCRIPTION: Shows the help command for the Loco CLI, which displays available commands and options.\nSOURCE: https://github.com/loco-rs/loco/blob/master/docs-site/content/docs/the-app/your-project.md#2025-04-20_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\ncargo loco --help\n```\n\n----------------------------------------\n\nTITLE: Listing Available Tasks with Cargo Loco\nDESCRIPTION: Shows how to use the cargo loco task command to view all currently available tasks in a Loco-rs project.\nSOURCE: https://github.com/loco-rs/loco/blob/master/docs-site/content/docs/getting-started/guide.md#2025-04-20_snippet_13\n\nLANGUAGE: sh\nCODE:\n```\n$ cargo loco task\nseed_data\t\t[Task for seeding data]\n```\n\n----------------------------------------\n\nTITLE: Building the Frontend for Production\nDESCRIPTION: Command to build the SaaS frontend application for production, creating a dist folder that can be served by the Loco backend.\nSOURCE: https://github.com/loco-rs/loco/blob/master/loco-new/base_template/frontend/README.md#2025-04-20_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\npnpm build\n```\n\n----------------------------------------\n\nTITLE: Listing All Executed Loco Tasks\nDESCRIPTION: Command to view a list of all tasks that have been executed in the Loco framework.\nSOURCE: https://github.com/loco-rs/loco/blob/master/docs-site/content/docs/processing/task.md#2025-04-20_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\ncargo loco task\n```\n\n----------------------------------------\n\nTITLE: Updating CLI Snapshots for Testing\nDESCRIPTION: Command to update CLI snapshots for binary command outputs, using environment variables to enable overwrite mode.\nSOURCE: https://github.com/loco-rs/loco/blob/master/CONTRIBUTING.md#2025-04-20_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\nLOCO_CI_MODE=true TRYCMD=overwrite cargo test\n```\n\n----------------------------------------\n\nTITLE: Shell Commands for Releasing a New Version\nDESCRIPTION: Shell commands for creating a new branch, running the bump-version script, and preparing for a new release. This is part of the release workflow for updating the Loco version.\nSOURCE: https://github.com/loco-rs/loco/blob/master/xtask/README.md#2025-04-20_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\ncd xtask\ncargo run bump-version VERSION\n```\n\n----------------------------------------\n\nTITLE: Initializing TOML Frontmatter Configuration\nDESCRIPTION: TOML configuration block that defines metadata for the privacy policy page, including title, description, draft status, and extra class properties.\nSOURCE: https://github.com/loco-rs/loco/blob/master/docs-site/content/privacy-policy/_index.md#2025-04-20_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n+++\ntitle = \"Privacy Policy\"\ndescription = \"We do not use cookies and we do not collect any personal data.\"\ndraft = false\n\n[extra]\nclass = \"page single\"\n+++\n```\n\n----------------------------------------\n\nTITLE: Sample Error Log Output\nDESCRIPTION: Example of error log output showing request processing and error details\nSOURCE: https://github.com/loco-rs/loco/blob/master/docs-site/content/docs/extras/pluggability.md#2025-04-20_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n2024-02-xxx DEBUG http-request: tower_http::trace::on_request: started processing request http.method=GET http.uri=/notes http.version=HTTP/1.1 http.user_agent=curl/8.1.2 environment=development request_id=8622e624-9bda-49ce-9730-876f2a8a9a46\n2024-02-xxx11T12:19:25.295954Z ERROR http-request: loco_rs::controller: controller_error error.msg=invalid type: string \"foo\", expected a sequence error.details=JSON(Error(\"invalid type: string \\\"foo\\\", expected a sequence\", line: 0, column: 0)) error.chain=\"\" http.method=GET http.uri=/notes http.version=HTTP/1.1 http.user_agent=curl/8.1.2 environment=development request_id=8622e624-9bda-49ce-9730-876f2a8a9a46\n```\n\n----------------------------------------\n\nTITLE: CLI Jobs Management Help Command\nDESCRIPTION: Help output showing available job management commands in the CLI.\nSOURCE: https://github.com/loco-rs/loco/blob/master/docs-site/content/docs/processing/workers.md#2025-04-20_snippet_8\n\nLANGUAGE: sh\nCODE:\n```\nManaging jobs queue\n\nUsage: demo_app-cli jobs [OPTIONS] <COMMAND>\n\nCommands:\n  cancel  Cancels jobs with the specified names, setting their status to `cancelled`\n  tidy    Deletes jobs that are either completed or cancelled\n  purge   Deletes jobs based on their age in days\n  dump    Saves the details of all jobs to files in the specified folder\n  import  Imports jobs from a file\n  help    Print this message or the help of the given subcommand(s)\n\nOptions:\n  -e, --environment <ENVIRONMENT>  Specify the environment [default: development]\n  -h, --help                       Print help\n  -V, --version                    Print version\n```\n\n----------------------------------------\n\nTITLE: Planning Terraform Deployment for AWS\nDESCRIPTION: Command to preview the changes Terraform will make to create the AWS infrastructure, showing all resources that will be created, modified, or destroyed.\nSOURCE: https://github.com/loco-rs/loco/blob/master/docs-site/content/blog/deploy-aws.md#2025-04-20_snippet_20\n\nLANGUAGE: sh\nCODE:\n```\n$ terraform plan\n```\n\n----------------------------------------\n\nTITLE: Generating Docker Deployment Files\nDESCRIPTION: Command to generate Docker deployment files for the Loco application, which creates a Dockerfile and .dockerignore file configured for the project.\nSOURCE: https://github.com/loco-rs/loco/blob/master/docs-site/content/blog/frontend-website.md#2025-04-20_snippet_12\n\nLANGUAGE: sh\nCODE:\n```\n$ cargo loco generate deployment\n✔ ❯ Choose your deployment · Docker\nadded: \"dockerfile\"\nadded: \".dockerignore\"\n```\n\n----------------------------------------\n\nTITLE: Implementing Boot Hook for Loco App\nDESCRIPTION: Breaking change migration code for implementing the Boot hook in the App implementation to start the application.\nSOURCE: https://github.com/loco-rs/loco/blob/master/CHANGELOG.md#2025-04-20_snippet_20\n\nLANGUAGE: rust\nCODE:\n```\nimpl Hooks for App {\n  ...\n  async fn boot(mode: StartMode, environment: &str) -> Result<BootResult> {\n    // With DB:\n    create_app::<Self, Migrator>(mode, environment).await\n    // Without DB:\n    create_app::<Self>(mode, environment).await\n  }\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Generating a Loco Website in Current Directory\nDESCRIPTION: Command to generate a new Loco website in the current working directory.\nSOURCE: https://github.com/loco-rs/loco/blob/master/loco-cli/README.md#2025-04-20_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nloco new\n```\n\n----------------------------------------\n\nTITLE: Installing Frontend Dependencies for SaaS Starter\nDESCRIPTION: Commands for setting up and building the frontend package for the SaaS starter template.\nSOURCE: https://github.com/loco-rs/loco/blob/master/DEVELOPMENT.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ cd starters/saas/frontend\n$ npm i -g pnpm\n$ pnpm i && pnpm build\n```\n\n----------------------------------------\n\nTITLE: Building and Running Docker Container\nDESCRIPTION: Commands to build a Docker image for the Loco application and run it in production mode, exposing the application on port 5150.\nSOURCE: https://github.com/loco-rs/loco/blob/master/docs-site/content/blog/frontend-website.md#2025-04-20_snippet_13\n\nLANGUAGE: sh\nCODE:\n```\n$ docker build . -t loco-todo-list\n$ docker run -e LOCO_ENV=production -p 5150:5150 loco-todo-list start\n```\n\n----------------------------------------\n\nTITLE: Generate Database Entities\nDESCRIPTION: Command to generate entity code from database schema.\nSOURCE: https://github.com/loco-rs/loco/blob/master/DEVELOPMENT.md#2025-04-20_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ cargo loco db entities\n```\n\n----------------------------------------\n\nTITLE: Upgrading Loco CLI to the Latest Version\nDESCRIPTION: Command to update the Loco CLI to the most recent version, replacing the existing binary with the newest release. This ensures access to the latest templates, features, and improvements.\nSOURCE: https://github.com/loco-rs/loco/blob/master/loco-new/README.md#2025-04-20_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\ncargo install loco\n```\n\n----------------------------------------\n\nTITLE: Log Output Example for Auth Requests\nDESCRIPTION: Example of the log output format when making requests to the auth endpoints with the logging middleware enabled.\nSOURCE: https://github.com/loco-rs/loco/blob/master/docs-site/content/docs/extras/pluggability.md#2025-04-20_snippet_12\n\nLANGUAGE: shell\nCODE:\n```\n2024-XX-XXTXX:XX:XX.XXXXXZ  INFO http-request: xx::controllers::middleware::log Request: POST \"/auth/register\" http.method=POST http.uri=/auth/register http.version=HTTP/1.1  environment=development request_id=xxxxx\n```\n\n----------------------------------------\n\nTITLE: Generator YAML Configuration for Global Replacements\nDESCRIPTION: Example of generator.yaml configuration showing global replacement rules for pattern substitution in starter templates.\nSOURCE: https://github.com/loco-rs/loco/blob/master/loco-cli/README.md#2025-04-20_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\n...\nrules:\n  - pattern: loco_starter_template\n    kind: LibName\n    file_patterns:\n      - rs\n      - toml\n      - trycmd\n  - pattern: PqRwLF2rhHe8J22oBeHy\n    kind: JwtToken\n    file_patterns:\n      - config/test.yaml\n      - config/development.yaml\n```\n\n----------------------------------------\n\nTITLE: Configuring Zola Section Template for Loco Documentation\nDESCRIPTION: This TOML configuration block defines the metadata for the Loco documentation section in a Zola static site generator. It sets the title, description, sorting method, weight for ordering, and specifies the HTML template to use for rendering.\nSOURCE: https://github.com/loco-rs/loco/blob/master/docs-site/content/docs/_index.md#2025-04-20_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n+++\ntitle = \"Docs\"\ndescription = \"Docs for loco\"\nsort_by = \"weight\"\nweight = 1\ntemplate = \"docs/section.html\"\n+++\n```\n\n----------------------------------------\n\nTITLE: Setting up Application Load Balancer in Terraform\nDESCRIPTION: Creates an Application Load Balancer (ALB) to route traffic to the ECS service, configuring it with public subnets and security groups for HTTP and HTTPS traffic.\nSOURCE: https://github.com/loco-rs/loco/blob/master/docs-site/content/blog/deploy-aws.md#2025-04-20_snippet_11\n\nLANGUAGE: hcl\nCODE:\n```\nresource \"aws_alb\" \"myapp\" {\n  name               = \"myapp-lb\"\n  internal           = false\n  load_balancer_type = \"application\"\n  enable_deletion_protection = true\n\n  subnets = [\n    aws_subnet.public_d.id,\n    aws_subnet.public_e.id,\n  ]\n\n  security_groups = [\n    aws_security_group.http.id,\n    aws_security_group.https.id,\n    aws_security_group.egress_all.id,\n  ]\n\n  depends_on = [aws_internet_gateway.igw]\n}\n```\n\n----------------------------------------\n\nTITLE: Running Loco Test Suite\nDESCRIPTION: Command to execute the complete test suite using xtask.\nSOURCE: https://github.com/loco-rs/loco/blob/master/DEVELOPMENT.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ cargo xtask test\n```\n\n----------------------------------------\n\nTITLE: Running Loco CLI with Local Repository\nDESCRIPTION: Command to run Loco CLI against a local repository using the STARTERS_LOCAL_PATH environment variable.\nSOURCE: https://github.com/loco-rs/loco/blob/master/loco-cli/README.md#2025-04-20_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\ncd loco-cli\n$ STARTERS_LOCAL_PATH=[FULL_PATH]/loco-rs/loco  cargo run new --path /tmp\n```\n\n----------------------------------------\n\nTITLE: YAML File Error Definition\nDESCRIPTION: Definition of a custom error type for YAML file parsing with context.\nSOURCE: https://github.com/loco-rs/loco/blob/master/DEVELOPMENT.md#2025-04-20_snippet_5\n\nLANGUAGE: rust\nCODE:\n```\n    #[error(\"cannot parse `{1}`: {0}\")]\n    YAMLFile(#[source] serde_yaml::Error, String),\n```\n\n----------------------------------------\n\nTITLE: Adding Axum Session Dependencies with PostgreSQL Support\nDESCRIPTION: Cargo.toml dependencies for Axum session with PostgreSQL support via SQLx, including necessary features for database connectivity.\nSOURCE: https://github.com/loco-rs/loco/blob/master/docs-site/content/blog/axum-session.md#2025-04-20_snippet_5\n\nLANGUAGE: toml\nCODE:\n```\naxum_session = {version = \"0.10.1\"}\nsqlx = { version = \"0.7.2\", features = [\n  \"macros\",\n  \"postgres\",\n  \"_unstable-all-types\",\n  \"tls-rustls\",\n  \"runtime-tokio\",\n] }\n```\n\n----------------------------------------\n\nTITLE: Configuring TOML Frontmatter for Documentation Page\nDESCRIPTION: TOML configuration block that sets up metadata for a documentation page. Defines the page title, template, sorting behavior, weight for ordering, and draft status.\nSOURCE: https://github.com/loco-rs/loco/blob/master/docs-site/content/docs/getting-started/_index.md#2025-04-20_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n+++\ntitle = \"Getting Started\"\ndescription = \"\"\ntemplate = \"docs/section.html\"\nsort_by = \"weight\"\nweight = 1\ndraft = false\n+++\n```\n\n----------------------------------------\n\nTITLE: SQL Table Definition for Users\nDESCRIPTION: SQL DDL that defines the users table structure, showing required and optional fields along with constraints. This provides the database schema context for the seed data.\nSOURCE: https://github.com/loco-rs/loco/blob/master/docs-site/content/docs/the-app/models.md#2025-04-20_snippet_21\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE public.users (\n\tid serial4 NOT NULL,\n\temail varchar NOT NULL,\n\t\"password\" varchar NOT NULL,\n\treset_token varchar NULL,\n\tcreated_at timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,\n\tCONSTRAINT users_email_key UNIQUE (email),\n\tCONSTRAINT users_pkey PRIMARY KEY (id)\n);\n```\n\n----------------------------------------\n\nTITLE: Error Handling with Transparent JSON Error\nDESCRIPTION: Example of implementing transparent error conversion for JSON errors using thiserror.\nSOURCE: https://github.com/loco-rs/loco/blob/master/DEVELOPMENT.md#2025-04-20_snippet_4\n\nLANGUAGE: rust\nCODE:\n```\n    #[error(transparent)]\n    JSON(#[from] serde_json::Error),\n```\n\n----------------------------------------\n\nTITLE: Starting Loco Server\nDESCRIPTION: Command to start the Loco development server\nSOURCE: https://github.com/loco-rs/loco/blob/master/docs-site/content/docs/getting-started/guide.md#2025-04-20_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\ncargo loco start\n```\n\n----------------------------------------\n\nTITLE: TOML Page Metadata Configuration\nDESCRIPTION: Front matter configuration in TOML format defining metadata for the team page including title, description, dates, and draft status.\nSOURCE: https://github.com/loco-rs/loco/blob/master/docs-site/content/authors/team-loco.md#2025-04-20_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n+++\ntitle = \"Team Loco\"\ndescription = \"Creators of the Loco framework\"\ndate = 2021-04-01T08:50:45+00:00\nupdated = 2021-04-01T08:50:45+00:00\ndraft = false\n+++\n```\n\n----------------------------------------\n\nTITLE: TOML Frontmatter Configuration for Documentation Section\nDESCRIPTION: TOML frontmatter block defining metadata for a documentation section about 'The App'. Includes settings for title, template, sorting, weight and draft status.\nSOURCE: https://github.com/loco-rs/loco/blob/master/docs-site/content/docs/the-app/_index.md#2025-04-20_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n+++\ntitle = \"The App\"\ndescription = \"\"\ntemplate = \"docs/section.html\"\nsort_by = \"weight\"\nweight = 2\ndraft = false\n+++\n```\n\n----------------------------------------\n\nTITLE: TOML Frontmatter Configuration for Resources Documentation\nDESCRIPTION: Defines the metadata and configuration for a documentation section page about resources. Sets the title, template, sorting, weight and draft status.\nSOURCE: https://github.com/loco-rs/loco/blob/master/docs-site/content/docs/resources/_index.md#2025-04-20_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n+++\ntitle = \"Resources\"\ndescription = \"\"\ntemplate = \"docs/section.html\"\nsort_by = \"weight\"\nweight = 6\ndraft = false\n+++\n```\n\n----------------------------------------\n\nTITLE: Generating a Loco Website in Specific Directory\nDESCRIPTION: Command to generate a new Loco website in a specified directory path.\nSOURCE: https://github.com/loco-rs/loco/blob/master/loco-cli/README.md#2025-04-20_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nloco new --path /my-work/websites/\n```\n\n----------------------------------------\n\nTITLE: Configuring Queue Kind in YAML\nDESCRIPTION: This snippet shows how to update the development.yaml and test.yaml configuration files to specify the queue kind in loco-rs v0.10.1.\nSOURCE: https://github.com/loco-rs/loco/blob/master/CHANGELOG.md#2025-04-20_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nqueue:\n  kind: Redis  # add this to the existing `queue` section\n```\n\n----------------------------------------\n\nTITLE: Defining Documentation Section Metadata with TOML for the Extras Section\nDESCRIPTION: This TOML block sets up the metadata for the 'Extras' documentation section in the loco-rs framework. It configures the section title, template to use for rendering, sorting mechanism, weight for positioning in the navigation, and marks it as a non-draft section.\nSOURCE: https://github.com/loco-rs/loco/blob/master/docs-site/content/docs/extras/_index.md#2025-04-20_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n+++\ntitle = \"Extras\"\ndescription = \"\"\ntemplate = \"docs/section.html\"\nsort_by = \"weight\"\nweight = 5\ndraft = false\n+++\n```\n\n----------------------------------------\n\nTITLE: Running the Bump Version Command in Rust\nDESCRIPTION: Command for bumping the Loco version. This updates the library version in cargo.toml, replaces starters with local references for CI testing, and locks all starters to the specified version.\nSOURCE: https://github.com/loco-rs/loco/blob/master/xtask/README.md#2025-04-20_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\ncargo run bump-version VERSION\n```\n\n----------------------------------------\n\nTITLE: Database Reset Command\nDESCRIPTION: Command to reset and recreate the database structure.\nSOURCE: https://github.com/loco-rs/loco/blob/master/DEVELOPMENT.md#2025-04-20_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ cargo loco db reset\n```\n\n----------------------------------------\n\nTITLE: Creating HTML Template in Tera\nDESCRIPTION: This HTML template uses Tera syntax to render a simple page. It demonstrates how to include internationalized text using the t() function for different languages.\nSOURCE: https://github.com/loco-rs/loco/blob/master/docs-site/content/docs/the-app/views.md#2025-04-20_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<html><body>\nfind this tera template at <code>assets/views/home/hello.html</code>: \n<br/>\n<br/>\n{{ /* t(key=\"hello-world\", lang=\"en-US\") */ }}, \n<br/>\n{{ /* t(key=\"hello-world\", lang=\"de-DE\") */ }}\n\n</body></html>\n```\n\n----------------------------------------\n\nTITLE: Creating a New Loco Project\nDESCRIPTION: This snippet demonstrates how to create a new Loco project using the CLI, selecting the 'Rest API' template.\nSOURCE: https://github.com/loco-rs/loco/blob/master/docs-site/content/blog/deploy-aws.md#2025-04-20_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n$ cargo install loco\n$ loco new\n✔ ❯ App name? · myapp\n? ❯ What would you like to build? ›\n  lightweight-service (minimal, only controllers and views)\n❯ Rest API (with DB and user auth)\n  SaaS app (with DB and user auth)\n```\n\n----------------------------------------\n\nTITLE: Creating a Rust application with Loco CLI\nDESCRIPTION: Shows how to create a new Loco application using the CLI interactive prompts. The command walks through selecting app name, type, database provider, and background worker type.\nSOURCE: https://github.com/loco-rs/loco/blob/master/docs-site/content/docs/the-app/your-project.md#2025-04-20_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n❯ loco new\n✔ ❯ App name? · myapp\n✔ ❯ What would you like to build? · Saas App with client side rendering\n✔ ❯ Select a DB Provider · Sqlite\n✔ ❯ Select your background worker type · Async (in-process tokio async tasks)\n\n🚂 Loco app generated successfully in:\nmyapp/\n\n- assets: You've selected `clientside` for your asset serving configuration.\n\nNext step, build your frontend:\n  $ cd frontend/\n  $ npm install && npm run build\n```\n\n----------------------------------------\n\nTITLE: Configuring Blog Section in Zola Static Site Generator using TOML\nDESCRIPTION: This TOML configuration defines the properties of a blog section for a Zola static site. It specifies the title and description as 'Blog', sets posts to be sorted by date, enables pagination with 10 items per page, and uses the 'blog/section.html' template for rendering.\nSOURCE: https://github.com/loco-rs/loco/blob/master/docs-site/content/blog/_index.md#2025-04-20_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n+++\ntitle = \"Blog\"\ndescription = \"Blog\"\nsort_by = \"date\"\npaginate_by = 10\ntemplate = \"blog/section.html\"\n+++\n```\n\n----------------------------------------\n\nTITLE: Configuring Loco Casts Section in TOML\nDESCRIPTION: This TOML configuration sets up the Loco Casts section of a website. It defines the title, description, sorting method, pagination, and HTML template to be used for rendering the casts section.\nSOURCE: https://github.com/loco-rs/loco/blob/master/docs-site/content/casts/_index.md#2025-04-20_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n+++\ntitle = \"Loco Casts\"\ndescription =  \"Loco Casts\"\nsort_by = \"date\"\npaginate_by = 10\ntemplate = \"casts/section.html\"\n+++\n```\n\n----------------------------------------\n\nTITLE: TOML Front Matter Configuration\nDESCRIPTION: TOML configuration block defining metadata for a documentation section page, including title, template, sorting, and weight parameters.\nSOURCE: https://github.com/loco-rs/loco/blob/master/docs-site/content/docs/infrastructure/_index.md#2025-04-20_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n+++\ntitle = \"Infrastructure\"\ndescription = \"\"\ntemplate = \"docs/section.html\"\nsort_by = \"weight\"\nweight = 4\ndraft = false\n+++\n```\n\n----------------------------------------\n\nTITLE: Testing Feature Configuration in Cargo.toml\nDESCRIPTION: Cargo.toml configuration for enabling the testing feature in Loco-rs. This shows how to set up the development dependencies needed for testing.\nSOURCE: https://github.com/loco-rs/loco/blob/master/docs-site/content/docs/the-app/models.md#2025-04-20_snippet_32\n\nLANGUAGE: toml\nCODE:\n```\n[dev-dependencies]\nloco-rs = { version = \"*\",  features = [\"testing\"] }\n```"
  }
]