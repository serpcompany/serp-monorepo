[
  {
    "owner": "henrygd",
    "repo": "beszel-docs",
    "content": "TITLE: Docker Compose Configuration for Beszel Agent\nDESCRIPTION: This Docker Compose YAML file defines the service configuration for running the Beszel Agent. It specifies the image, container name, restart policy, network mode, volumes, and environment variables required for the agent to function correctly. The agent needs access to the Docker socket to monitor other containers.\nSOURCE: https://github.com/henrygd/beszel-docs/blob/main/en/guide/agent-installation.md#_snippet_0\n\nLANGUAGE: YAML\nCODE:\n```\nservices:\n  beszel-agent:\n    image: henrygd/beszel-agent\n    container_name: beszel-agent\n    restart: unless-stopped\n    network_mode: host\n    volumes:\n      - /var/run/docker.sock:/var/run/docker.sock:ro\n      # monitor other disks / partitions by mounting a folder in /extra-filesystems\n      # - /mnt/disk1/.beszel:/extra-filesystems/disk1:ro\n    environment:\n      LISTEN: 45876\n      KEY: '<public key>'\n```\n\n----------------------------------------\n\nTITLE: Docker Compose Configuration for Beszel\nDESCRIPTION: This Docker Compose configuration defines a service named 'beszel' using the 'henrygd/beszel' image. It sets up a container named 'beszel', configures restart policies, maps port 8090, and mounts a volume for persistent data storage in the ./beszel_data directory.\nSOURCE: https://github.com/henrygd/beszel-docs/blob/main/en/guide/hub-installation.md#_snippet_0\n\nLANGUAGE: YAML\nCODE:\n```\nservices:\n  beszel:\n    image: henrygd/beszel\n    container_name: beszel\n    restart: unless-stopped\n    ports:\n      - 8090:8090\n    volumes:\n      - ./beszel_data:/beszel_data\n```\n\n----------------------------------------\n\nTITLE: Enable and Start Beszel Agent Service\nDESCRIPTION: These commands are used to enable and start the Beszel Agent service using systemd. `systemctl daemon-reload` reloads the systemd manager configuration. `systemctl enable` configures the service to start on boot. `systemctl start` starts the service immediately.\nSOURCE: https://github.com/henrygd/beszel-docs/blob/main/en/guide/agent-installation.md#_snippet_8\n\nLANGUAGE: Bash\nCODE:\n```\nsudo systemctl daemon-reload\nsudo systemctl enable beszel-agent.service\nsudo systemctl start beszel-agent.service\n```\n\n----------------------------------------\n\nTITLE: Enabling and Starting the Beszel systemd Service\nDESCRIPTION: These commands reload the systemd daemon configuration, enable the 'beszel.service' to start on boot, and then start the service immediately.\nSOURCE: https://github.com/henrygd/beszel-docs/blob/main/zh/guide/hub-installation.md#_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nsudo systemctl daemon-reload\nsudo systemctl enable beszel.service\nsudo systemctl start beszel.service\n```\n\n----------------------------------------\n\nTITLE: Quick Installation Script (Linux) for Beszel Agent\nDESCRIPTION: This Bash script automates the installation process of the Beszel Agent on Linux systems. It downloads the latest binary, sets up a `beszel` user, and configures a systemd service to ensure the agent runs after reboot. It requires root privileges for creating the user and setting up the service.\nSOURCE: https://github.com/henrygd/beszel-docs/blob/main/en/guide/agent-installation.md#_snippet_3\n\nLANGUAGE: Bash\nCODE:\n```\ncurl -sL https://raw.githubusercontent.com/henrygd/beszel/main/supplemental/scripts/install-agent.sh -o  /tmp/install-agent.sh && chmod +x /tmp/install-agent.sh && /tmp/install-agent.sh\n```\n\n----------------------------------------\n\nTITLE: Enabling Podman API\nDESCRIPTION: This snippet enables and starts the Podman API socket using systemctl. It's essential for the Beszel agent to communicate with Podman and collect monitoring data. Requires Podman to be installed.\nSOURCE: https://github.com/henrygd/beszel-docs/blob/main/en/guide/podman.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsystemctl --user enable podman.socket\nsystemctl --user start podman.socket\n```\n\n----------------------------------------\n\nTITLE: Agent Healthcheck Configuration YAML\nDESCRIPTION: This YAML snippet defines the healthcheck configuration for the Beszel agent within a Docker Compose service definition. It checks if the SSH server is listening using the `/agent health` command. The healthcheck starts 5 seconds after the container starts and then runs every 120 seconds.\nSOURCE: https://github.com/henrygd/beszel-docs/blob/main/en/guide/healthchecks.md#_snippet_0\n\nLANGUAGE: YAML\nCODE:\n```\nservices:\n  beszel-agent:\n    healthcheck:\n      test: ['CMD', '/agent', 'health'] # Run the health command\n      start_period: 5s # Check 5 seconds after the container starts\n      interval: 120s # Then check every 120 seconds after that\n```\n\n----------------------------------------\n\nTITLE: Systemd Service Configuration\nDESCRIPTION: This snippet provides a systemd service file for running the Beszel agent.  The `ExecStart` directive specifies the path to the agent executable, and the `Environment` directives set the LISTEN and KEY environment variables.  The service is configured to restart on failure and includes security/sandboxing settings.\nSOURCE: https://github.com/henrygd/beszel-docs/blob/main/zh/guide/agent-installation.md#_snippet_7\n\nLANGUAGE: INI\nCODE:\n```\n[Unit]\nDescription=Beszel Agent Service\nAfter=network-online.target\nWants=network-online.target\n\n[Service]\nExecStart={/path/to/working/directory}/beszel-agent\nEnvironment=\"LISTEN=$LISTEN\"\nEnvironment=\"KEY=$KEY\"\n# Environment=\"EXTRA_FILESYSTEMS=sdb\"\nRestart=on-failure\nRestartSec=5\nStateDirectory=beszel-agent\n\n# 安全/沙盒设置\nKeyringMode=private\nLockPersonality=yes\nNoNewPrivileges=yes\nPrivateTmp=yes\nProtectClock=yes\nProtectHome=read-only\nProtectHostname=yes\nProtectKernelLogs=yes\nProtectSystem=strict\nRemoveIPC=yes\nRestrictSUIDSGID=true\nSystemCallArchitectures=native\n\n[Install]\nWantedBy=multi-user.target\n```\n\n----------------------------------------\n\nTITLE: Setting EXTRA_FILESYSTEMS in Systemd Service Configuration\nDESCRIPTION: This snippet configures the `EXTRA_FILESYSTEMS` environment variable within a Systemd service configuration file for the Beszel agent.  The variable is set to a comma-separated list of devices, partitions, or mount points that will be monitored by the Beszel agent.  This allows the agent to automatically monitor specified devices when the service starts. Requires a systemd-based operating system and the beszel-agent.service file.\nSOURCE: https://github.com/henrygd/beszel-docs/blob/main/zh/guide/additional-disks.md#_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[Service]\nEnvironment=\"EXTRA_FILESYSTEMS=sdb,sdc1,mmcblk0,/mnt/network-share\"\n```\n\n----------------------------------------\n\nTITLE: Configuring EXTRA_FILESYSTEMS in Systemd Service (INI)\nDESCRIPTION: This INI snippet demonstrates how to set the `EXTRA_FILESYSTEMS` environment variable within a systemd service configuration file. The `Environment` directive within the `[Service]` section allows for specifying environment variables that will be available to the Beszel agent. This ensures the agent persistently monitors the specified file systems.\nSOURCE: https://github.com/henrygd/beszel-docs/blob/main/en/guide/additional-disks.md#_snippet_2\n\nLANGUAGE: INI\nCODE:\n```\n[Service]\nEnvironment=\"EXTRA_FILESYSTEMS=sdb,sdc1,mmcblk0,/mnt/network-share\"\n```\n\n----------------------------------------\n\nTITLE: Download Beszel Binary (Manual)\nDESCRIPTION: This command downloads the latest Beszel binary for the current system's architecture.  It uses `curl` to download a tarball from the GitHub releases page and extracts the Beszel binary. The extracted binary is then made executable.\nSOURCE: https://github.com/henrygd/beszel-docs/blob/main/en/guide/hub-installation.md#_snippet_4\n\nLANGUAGE: Bash\nCODE:\n```\ncurl -sL \"https://github.com/henrygd/beszel/releases/latest/download/beszel_$(uname -s)_$(uname -m | sed -e 's/x86_64/amd64/' -e 's/armv6l/arm/' -e 's/armv7l/arm/' -e 's/aarch64/arm64/').tar.gz\" | tar -xz -O beszel | tee ./beszel >/dev/null && chmod +x beszel\n```\n\n----------------------------------------\n\nTITLE: Systemd Service Configuration for Beszel Agent\nDESCRIPTION: This INI file defines a systemd service for managing the Beszel Agent. It includes settings for description, dependencies, execution, environment variables, restart policy, and security sandboxing. Placeholders like `{/path/to/working/directory}` and `$LISTEN`, `$KEY` should be replaced with actual values.\nSOURCE: https://github.com/henrygd/beszel-docs/blob/main/en/guide/agent-installation.md#_snippet_7\n\nLANGUAGE: INI\nCODE:\n```\n[Unit]\nDescription=Beszel Agent Service\nAfter=network-online.target\nWants=network-online.target\n\n[Service]\nExecStart={/path/to/working/directory}/beszel-agent\nEnvironment=\"LISTEN=$LISTEN\"\nEnvironment=\"KEY=$KEY\"\n# Environment=\"EXTRA_FILESYSTEMS=sdb\"\nRestart=on-failure\nRestartSec=5\nStateDirectory=beszel-agent\n\n# Security/sandboxing settings\nKeyringMode=private\nLockPersonality=yes\nNoNewPrivileges=yes\nPrivateTmp=yes\nProtectClock=yes\nProtectHome=read-only\nProtectHostname=yes\nProtectKernelLogs=yes\nProtectSystem=strict\nRemoveIPC=yes\nRestrictSUIDSGID=true\nSystemCallArchitectures=native\n\n[Install]\nWantedBy=multi-user.target\n```\n\n----------------------------------------\n\nTITLE: Hub Healthcheck Configuration YAML\nDESCRIPTION: This YAML snippet defines the healthcheck configuration for the Beszel hub within a Docker Compose service definition. It checks if the `/api/health` endpoint returns a 200 status code using the `/beszel health --url http://localhost:8090` command. The healthcheck starts 5 seconds after the container starts and then runs every 120 seconds.\nSOURCE: https://github.com/henrygd/beszel-docs/blob/main/en/guide/healthchecks.md#_snippet_1\n\nLANGUAGE: YAML\nCODE:\n```\nservices:\n  beszel-hub:\n    healthcheck:\n      # The URL is relative to the container, not the host\n      test: ['CMD', '/beszel', 'health', '--url', 'http://localhost:8090']\n      start_period: 5s # Check 5 seconds after the container starts\n      interval: 120s # Then check every 120 seconds after that\n```\n\n----------------------------------------\n\nTITLE: Agent Health Check Configuration YAML\nDESCRIPTION: This snippet configures a health check for the Beszel Agent within a Docker Compose file. It tests if the SSH server is listening. The `start_period` is set to 5 seconds, and the `interval` is set to 120 seconds.\nSOURCE: https://github.com/henrygd/beszel-docs/blob/main/zh/guide/healthchecks.md#_snippet_0\n\nLANGUAGE: YAML\nCODE:\n```\nservices:\n  beszel-agent:\n    healthcheck:\n      test: ['CMD', '/agent', 'health'] # 运行健康检查命令\n      start_period: 5s # 容器启动后 5 秒进行检查\n      interval: 120s # 之后每 120 秒检查一次\n```\n\n----------------------------------------\n\nTITLE: Resetting Password via Binary\nDESCRIPTION: This command executes the `superuser upsert` command using the Beszel binary to reset or create a superuser account. Replace 'name@example.com' and 'password' with the actual email and desired password. The Beszel binary must be executable and accessible in the current directory.\nSOURCE: https://github.com/henrygd/beszel-docs/blob/main/en/guide/user-accounts.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n./beszel superuser upsert name@example.com password\n```\n\n----------------------------------------\n\nTITLE: Beszel Docker Compose Configuration\nDESCRIPTION: This docker-compose.yml configuration defines two services: 'beszel' and 'beszel-agent'. The 'beszel' service runs the main Beszel application, exposing port 8090 and mounting volumes for data and sockets. The 'beszel-agent' service runs the Beszel agent, using host networking and mounting volumes for socket communication and Docker socket access, and setting environment variables for the listener and public key.\nSOURCE: https://github.com/henrygd/beszel-docs/blob/main/en/guide/parts/hub-docker-instructions.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  beszel:\n    image: henrygd/beszel:latest\n    container_name: beszel\n    restart: unless-stopped\n    ports:\n      - 8090:8090\n    volumes:\n      - ./beszel_data:/beszel_data\n      - ./beszel_socket:/beszel_socket\n\n  beszel-agent:\n    image: henrygd/beszel-agent:latest\n    container_name: beszel-agent\n    restart: unless-stopped\n    network_mode: host\n    volumes:\n      - ./beszel_socket:/beszel_socket\n      - /var/run/docker.sock:/var/run/docker.sock:ro\n    environment:\n      LISTEN: /beszel_socket/beszel.sock\n      # Do not remove quotes around the key\n      KEY: 'UPDATE WITH YOUR PUBLIC KEY (copy from \"Add system\" dialog)'\n```\n\n----------------------------------------\n\nTITLE: Setting APP_URL Environment Variable (Bash)\nDESCRIPTION: Sets the APP_URL environment variable, which tells Beszel the base URL it will be served under. This variable is crucial for Beszel to generate correct URLs for assets and API endpoints when running on a subpath.\nSOURCE: https://github.com/henrygd/beszel-docs/blob/main/en/guide/serve-on-subpath.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nAPP_URL=https://beszel.example.com/base-path\n```\n\n----------------------------------------\n\nTITLE: Docker Run Command for Beszel Agent\nDESCRIPTION: This command demonstrates how to run the Beszel Agent using Docker. It includes options for setting the container name, network mode, restart policy, volume mounts (for accessing the Docker socket), and environment variables for configuration. It is crucial that the network mode is set to 'host' for the agent to access host network stats.\nSOURCE: https://github.com/henrygd/beszel-docs/blob/main/en/guide/agent-installation.md#_snippet_1\n\nLANGUAGE: Bash\nCODE:\n```\ndocker run -d \\\n  --name beszel-agent \\\n  --network host \\\n  --restart unless-stopped \\\n  -v /var/run/docker.sock:/var/run/docker.sock:ro \\\n  -e KEY=\"<public key>\" \\\n  -e LISTEN=45876 \\\n  henrygd/beszel-agent:latest\n```\n\n----------------------------------------\n\nTITLE: Systemd Service Configuration for Beszel\nDESCRIPTION: This configuration defines a systemd service for the Beszel hub.  It specifies the service description, dependencies, execution details (user, working directory, and start command), restart policy, and install options.  The placeholder values for WorkingDirectory and ExecStart need to be adjusted to match the actual installation path.\nSOURCE: https://github.com/henrygd/beszel-docs/blob/main/en/guide/hub-installation.md#_snippet_7\n\nLANGUAGE: INI\nCODE:\n```\n[Unit]\nDescription=Beszel Hub\nAfter=network.target\n\n[Service]\nType=simple\nRestart=always\nRestartSec=3\nUser=root\nWorkingDirectory={/path/to/working/directory}\nExecStart={/path/to/working/directory}/beszel serve --http \"0.0.0.0:8090\"\n\n[Install]\nWantedBy=multi-user.target\n```\n\n----------------------------------------\n\nTITLE: Beszel Docker Compose Configuration (YAML)\nDESCRIPTION: Defines the services, images, ports, volumes, and environment variables required to run the Beszel and Beszel Agent containers using Docker Compose. It mounts volumes for data persistence and socket communication, and sets the agent's listening address and API key.\nSOURCE: https://github.com/henrygd/beszel-docs/blob/main/zh/guide/parts/hub-docker-instructions.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  beszel:\n    image: henrygd/beszel:latest\n    container_name: beszel\n    restart: unless-stopped\n    ports:\n      - 8090:8090\n    volumes:\n      - ./beszel_data:/beszel_data\n      - ./beszel_socket:/beszel_socket\n\n  beszel-agent:\n    image: henrygd/beszel-agent:latest\n    container_name: beszel-agent\n    restart: unless-stopped\n    network_mode: host\n    volumes:\n      - ./beszel_socket:/beszel_socket\n      - /var/run/docker.sock:/var/run/docker.sock:ro\n    environment:\n      LISTEN: /beszel_socket/beszel.sock\n      # 请勿删除密钥周围的引号\n      KEY: '使用\"添加系统\"对话框复制的公钥进行更新'\n```\n\n----------------------------------------\n\nTITLE: Running Beszel with Docker\nDESCRIPTION: This command uses Docker to run the Beszel hub in a detached container. It creates a persistent data directory, maps port 8090, sets a restart policy, and specifies the Beszel image from Docker Hub. The mkdir command ensures the data directory exists before the Docker command is executed.\nSOURCE: https://github.com/henrygd/beszel-docs/blob/main/en/guide/hub-installation.md#_snippet_1\n\nLANGUAGE: Bash\nCODE:\n```\nmkdir -p ./beszel_data && \\\ndocker run -d \\\n  --name beszel \\\n  --restart=unless-stopped \\\n  -v ./beszel_data:/beszel_data \\\n  -p 8090:8090 \\\n  henrygd/beszel\n```\n\n----------------------------------------\n\nTITLE: Systemd Service Configuration for Nvidia GPU Access\nDESCRIPTION: This snippet configures the systemd service to allow access to Nvidia GPU devices.  It adds `DeviceAllow` directives to grant read/write access to `/dev/nvidiactl` and `/dev/nvidia0`, enabling the service to interact with the Nvidia GPU.  It is required for Beszel to properly monitor Nvidia GPUs.\nSOURCE: https://github.com/henrygd/beszel-docs/blob/main/zh/guide/gpu.md#_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[Service]\nDeviceAllow=/dev/nvidiactl rw\nDeviceAllow=/dev/nvidia0 rw\n```\n\n----------------------------------------\n\nTITLE: Build Hub (bash)\nDESCRIPTION: This command builds the Beszel hub binary. It assumes the web UI has already been built and is available for embedding. It navigates to the hub's directory (`/beszel/cmd/hub`) and uses `go build` to create an executable. The `-ldflags \"-w -s\"` flag strips debugging information and symbol table from the binary to reduce its size.\nSOURCE: https://github.com/henrygd/beszel-docs/blob/main/en/guide/compiling.md#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ngo build -ldflags \"-w -s\" .\n```\n\n----------------------------------------\n\nTITLE: Restarting Beszel Service with Systemd (Bash)\nDESCRIPTION: This snippet shows how to reload the Systemd daemon and restart the Beszel agent (or hub) service after modifying the service configuration. It is used after making changes to environment variables in the Systemd service file.\nSOURCE: https://github.com/henrygd/beszel-docs/blob/main/en/guide/environment-variables.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsudo systemctl daemon-reload\nsudo systemctl restart beszel-agent # or beszel for the hub\n```\n\n----------------------------------------\n\nTITLE: Ansible Install/Check Beszel Agent\nDESCRIPTION: This Ansible playbook snippet installs the Beszel agent by downloading the install script, checking if the service exists, and then running the script with or without auto-update based on the `beszel_agent_autoupdate` variable. The script installs the agent using the provided SSH port and key.\nSOURCE: https://github.com/henrygd/beszel-docs/blob/main/zh/guide/advanced-deployment.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n- name: 收集服务信息\n  ansible.builtin.service_facts:\n\n- name: 下载 install-agent.sh 脚本\n  get_url:\n    url: https://raw.githubusercontent.com/henrygd/beszel/main/supplemental/scripts/install-agent.sh\n    dest: /tmp/install-agent.sh\n    mode: '0755' # 设置可执行权限\n\n- name: 如果服务存在则删除 beszel 代理\n  become: true\n  ansible.builtin.command:\n    cmd: /tmp/install-agent.sh -u\n  when: ansible_facts.services['beszel-agent.service'] is defined\n\n- name: 使用自动更新运行 install-agent.sh 脚本\n  shell: yes | /tmp/install-agent.sh -p {{ beszel_agent_ssh_port }} -k \"{{ beszel_agent_ssh_key }}\"\n  when: beszel_agent_autoupdate | bool\n  ignore_errors: false\n\n- name: 不使用自动更新运行 install-agent.sh 脚本\n  shell: yes N | /tmp/install-agent.sh -p {{ beszel_agent_ssh_port }} -k \"{{ beszel_agent_ssh_key }}\"\n  when: not beszel_agent_autoupdate | bool\n  ignore_errors: false\n```\n\n----------------------------------------\n\nTITLE: Caddy Reverse Proxy Configuration\nDESCRIPTION: Configures Caddy as a reverse proxy to forward requests to Beszel running on localhost:8090 under the /base-path.  It includes settings for request body size and read timeout, essential for handling large payloads and long-running requests. It uses the handle_path directive for matching requests to the subpath.\nSOURCE: https://github.com/henrygd/beszel-docs/blob/main/en/guide/serve-on-subpath.md#_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nbeszel.example.com {\n\trequest_body {\n\t\tmax_size 10MB\n\t}\n\thandle_path /base-path* {\n\t\treverse_proxy 127.0.0.1:8090 {\n\t\t\ttransport http {\n\t\t\t\tread_timeout 360s\n\t\t\t}\n\t\t}\n\t}\n\trespond 404\n}\n```\n\n----------------------------------------\n\nTITLE: Nginx Reverse Proxy Configuration\nDESCRIPTION: Configures Nginx as a reverse proxy to forward requests to Beszel running on localhost:8090 under the /base-path.  It includes essential proxy settings for headers, timeouts, and request size. It uses the rewrite directive to remove the base path prefix before forwarding the request.\nSOURCE: https://github.com/henrygd/beszel-docs/blob/main/en/guide/serve-on-subpath.md#_snippet_2\n\nLANGUAGE: nginx\nCODE:\n```\nserver {\n\tlisten 80;\n\tserver_name beszel.example.com;\n\tclient_max_body_size 10M;\n\n\tlocation /base-path {\n\t\t# check http://nginx.org/en/docs/http/ngx_http_upstream_module.html#keepalive\n\t\tproxy_set_header Connection '';\n\t\tproxy_http_version 1.1;\n\t\tproxy_read_timeout 360s;\n\n\t\tproxy_set_header Host $host;\n\t\tproxy_set_header X-Real-IP $remote_addr;\n\t\tproxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n\t\tproxy_set_header X-Forwarded-Proto $scheme;\n\n\t\trewrite /base-path/(.*) /$1  break;\n\n\t\tproxy_pass http://127.0.0.1:8090;\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Modifying User in Systemd Service File\nDESCRIPTION: This code demonstrates how to change the 'User' property in the Beszel agent's systemd service file.  It shows the before and after of changing the user from 'beszel' to a specific user ID (1000) to match the Podman user.  This ensures the agent has the necessary permissions to interact with Podman.\nSOURCE: https://github.com/henrygd/beszel-docs/blob/main/en/guide/podman.md#_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[Service]\nUser=beszel # [!code --]\nUser=1000 # [!code ++]\n```\n\n----------------------------------------\n\nTITLE: Restart Container and Access Shell\nDESCRIPTION: This bash command sequence rebuilds and restarts the Docker Compose environment, then allows you to access the shell within a specific container using `docker exec`.\nSOURCE: https://github.com/henrygd/beszel-docs/blob/main/en/guide/docker-shell.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ndocker-compose up -d --build\ndocker exec -it <container> bash\n```\n\n----------------------------------------\n\nTITLE: Restart and Access Shell\nDESCRIPTION: These commands rebuild and restart the containers using the updated `docker-compose.yml`, and then execute bash within a running container.\nSOURCE: https://github.com/henrygd/beszel-docs/blob/main/zh/guide/docker-shell.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ndocker-compose up -d --build\ndocker exec -it <容器> bash\n```\n\n----------------------------------------\n\nTITLE: Kubernetes DaemonSet for Beszel Agent (YAML)\nDESCRIPTION: This Kubernetes DaemonSet configuration deploys the Beszel agent on every node in the cluster. It configures the agent to use the host network, exposes port 45876, and sets environment variables for the LISTEN port and the agent key. Tolerations are added to allow deployment to master/control-plane nodes.\nSOURCE: https://github.com/henrygd/beszel-docs/blob/main/en/guide/advanced-deployment.md#_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: apps/v1\nkind: DaemonSet\nmetadata:\n  name: beszel-agent\n  namespace: default\nspec:\n  selector:\n    matchLabels:\n      app: beszel-agent\n  template:\n    metadata:\n      labels:\n        app: beszel-agent\n    spec:\n      hostNetwork: true\n      containers:\n        - env:\n            - name: LISTEN\n              value: '45876'\n            - name: KEY\n              value: 'YOUR-KEY-HERE'\n          image: henrygd/beszel-agent:latest\n          imagePullPolicy: Always\n          name: beszel-agent\n          ports:\n            - containerPort: 45876\n              hostPort: 45876\n      restartPolicy: Always\n      tolerations:\n        - effect: NoSchedule\n          key: node-role.kubernetes.io/master\n          operator: Exists\n        - effect: NoSchedule\n          key: node-role.kubernetes.io/control-plane\n          operator: Exists\n  updateStrategy:\n    rollingUpdate:\n      maxSurge: 0\n      maxUnavailable: 100%\n    type: RollingUpdate\n```\n\n----------------------------------------\n\nTITLE: Ansible Role: Beszel Agent Installation with Service Check (YAML)\nDESCRIPTION: This Ansible role installs and configures the Beszel agent. It checks for the existence of the beszel-agent service before removing and reinstalling. It downloads the install-agent.sh script, sets executable permissions, and runs it with specified parameters such as the SSH port and key. The auto-update feature is controlled via a variable.\nSOURCE: https://github.com/henrygd/beszel-docs/blob/main/en/guide/advanced-deployment.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n- name: Populate service facts\n  ansible.builtin.service_facts:\n\n- name: Download the install-agent.sh script\n  get_url:\n    url: https://raw.githubusercontent.com/henrygd/beszel/main/supplemental/scripts/install-agent.sh\n    dest: /tmp/install-agent.sh\n    mode: '0755' # Set executable permissions\n\n- name: Remove beszel agent if service exists\n  become: true\n  ansible.builtin.command:\n    cmd: /tmp/install-agent.sh -u\n  when: ansible_facts.services['beszel-agent.service'] is defined\n\n- name: Run the install-agent.sh script with auto-update\n  shell: yes | /tmp/install-agent.sh -p {{ beszel_agent_ssh_port }} -k \"{{ beszel_agent_ssh_key }}\"\n  when: beszel_agent_autoupdate | bool\n  ignore_errors: false\n\n- name: Run the install-agent.sh script without auto-update\n  shell: yes N | /tmp/install-agent.sh -p {{ beszel_agent_ssh_port }} -k \"{{ beszel_agent_ssh_key }}\"\n  when: not beszel_agent_autoupdate | bool\n  ignore_errors: false\n```\n\n----------------------------------------\n\nTITLE: Quick Install Script (Linux)\nDESCRIPTION: This snippet provides a `curl` command to download and execute a shell script that installs the Beszel agent.  It requires root privileges. The script installs the latest binary, creates a `beszel` user, and sets up a service to ensure the agent runs after reboot. Options are available for setting the port, key, enabling auto-updates, and using Chinese mirrors.\nSOURCE: https://github.com/henrygd/beszel-docs/blob/main/zh/guide/agent-installation.md#_snippet_3\n\nLANGUAGE: Bash\nCODE:\n```\ncurl -sL https://raw.githubusercontent.com/henrygd/beszel/main/supplemental/scripts/install-agent.sh -o  /tmp/install-agent.sh && chmod +x /tmp/install-agent.sh && /tmp/install-agent.sh\n```\n\n----------------------------------------\n\nTITLE: Service configuration for Nvidia GPU access\nDESCRIPTION: These lines configure the systemd service file to allow the `beszel-agent` access to Nvidia GPUs. `DeviceAllow` grants read and write permissions to the specified device files, in this case, `/dev/nvidiactl` and `/dev/nvidia0`.\nSOURCE: https://github.com/henrygd/beszel-docs/blob/main/en/guide/gpu.md#_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[Service]\nDeviceAllow=/dev/nvidiactl rw\nDeviceAllow=/dev/nvidia0 rw\n```\n\n----------------------------------------\n\nTITLE: Creating a systemd Service for Beszel Hub\nDESCRIPTION: This configuration defines a systemd service for Beszel Hub.  It specifies the service description, dependencies, restart policy, user, working directory, and the command to execute.  Replace `{/path/to/working/directory}` with the actual working directory of Beszel.\nSOURCE: https://github.com/henrygd/beszel-docs/blob/main/zh/guide/hub-installation.md#_snippet_7\n\nLANGUAGE: ini\nCODE:\n```\n[Unit]\nDescription=Beszel Hub\nAfter=network.target\n\n[Service]\nType=simple\nRestart=always\nRestartSec=3\nUser=root\nWorkingDirectory={/path/to/working/directory}\nExecStart={/path/to/working/directory}/beszel serve --http \"0.0.0.0:8090\"\n\n[Install]\nWantedBy=multi-user.target\n```\n\n----------------------------------------\n\nTITLE: Nginx Configuration for Subpath\nDESCRIPTION: This Nginx configuration reverse proxies requests to Beszel running on localhost at port 8090. It configures headers such as `Host`, `X-Real-IP`, `X-Forwarded-For`, and `X-Forwarded-Proto` to pass information about the original request to Beszel.  The `rewrite` directive removes the `/base-path` prefix before forwarding the request to Beszel.\nSOURCE: https://github.com/henrygd/beszel-docs/blob/main/zh/guide/serve-on-subpath.md#_snippet_2\n\nLANGUAGE: nginx\nCODE:\n```\nserver {\n\tlisten 80;\n\tserver_name beszel.example.com;\n\tclient_max_body_size 10M;\n\n\tlocation /base-path {\n\t\t# 查看 http://nginx.org/en/docs/http/ngx_http_upstream_module.html#keepalive\n\t\tproxy_set_header Connection '';\n\t\tproxy_http_version 1.1;\n\t\tproxy_read_timeout 360s;\n\n\t\tproxy_set_header Host $host;\n\t\tproxy_set_header X-Real-IP $remote_addr;\n\t\tproxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n\t\tproxy_set_header X-Forwarded-Proto $scheme;\n\n\t\trewrite /base-path/(.*) /$1  break;\n\n\t\tproxy_pass http://127.0.0.1:8090;\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Update docker-compose.yml for Beszel Agent\nDESCRIPTION: This snippet shows how to update the docker-compose.yml file for the Beszel Agent service. It replaces the `image` key with a `build` key, instructing Docker Compose to build the image from the Dockerfile in the current directory.\nSOURCE: https://github.com/henrygd/beszel-docs/blob/main/en/guide/docker-shell.md#_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nbeszel-agent:\n  image: henrygd/beszel-agent # [!code --]\n  build: .\n```\n\n----------------------------------------\n\nTITLE: Makefile Compilation (bash)\nDESCRIPTION: This snippet shows how to use the Makefile to build the Beszel agent and hub.  It includes commands to build both, or just the agent or hub specifically. Building the hub requires Node.js or Bun. The `make OS=freebsd ARCH=arm64` example demonstrates cross-compilation by specifying the operating system and architecture.\nSOURCE: https://github.com/henrygd/beszel-docs/blob/main/en/guide/compiling.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# Builds both the agent and hub\nmake\n# Builds the agent only\nmake build-agent\n# Builds the hub only (requires Node or Bun)\nmake build-hub\n```\n\n----------------------------------------\n\nTITLE: Start Docker Compose Services\nDESCRIPTION: This command starts the services defined in the docker-compose.yml file in detached mode (-d). This brings up the Beszel and Beszel agent containers.\nSOURCE: https://github.com/henrygd/beszel-docs/blob/main/en/guide/parts/hub-docker-instructions.md#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ndocker compose up -d\n```\n\n----------------------------------------\n\nTITLE: Systemd Service Configuration for Beszel with longer RestartSec\nDESCRIPTION: This configuration defines a systemd service for the Beszel hub.  It specifies the service description, dependencies, execution details (user, working directory, and start command), restart policy, and install options.  The placeholder values for WorkingDirectory and ExecStart need to be adjusted to match the actual installation path.  It uses a longer RestartSec value of 5 seconds.\nSOURCE: https://github.com/henrygd/beszel-docs/blob/main/en/guide/hub-installation.md#_snippet_9\n\nLANGUAGE: INI\nCODE:\n```\n[Unit]\nDescription=Beszel Hub\nAfter=network.target\n\n[Service]\nType=simple\nRestart=always\nRestartSec=5\nUser=root\nWorkingDirectory={/path/to/working/directory}\nExecStart={/path/to/working/directory}/beszel serve --http \"0.0.0.0:8090\"\n\n[Install]\nWantedBy=multi-user.target\n```\n\n----------------------------------------\n\nTITLE: Ansible Role: Beszel Agent Uninstall (YAML)\nDESCRIPTION: This Ansible role removes the Beszel agent if the service exists. It downloads the install-agent.sh script and uses it to uninstall the agent. The check is performed using Ansible service facts to ensure the beszel-agent service is present.\nSOURCE: https://github.com/henrygd/beszel-docs/blob/main/en/guide/advanced-deployment.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n- name: Remove beszel-agent if service exists\n  block:\n    - name: Populate service facts\n      ansible.builtin.service_facts:\n\n    - name: Download install-agent.sh script\n      ansible.builtin.get_url:\n        url: https://raw.githubusercontent.com/henrygd/beszel/main/supplemental/scripts/install-agent.sh\n        dest: /tmp/install-agent.sh\n        mode: '0755' # Set executable permissions\n      when: ansible_facts['services']['beszel-agent.service'] is defined\n\n    - name: Remove beszel agent\n      become: true\n      ansible.builtin.command:\n        cmd: /tmp/install-agent.sh -u\n      when: ansible_facts['services']['beszel-agent.service'] is defined\n```\n\n----------------------------------------\n\nTITLE: Hub Health Check Configuration YAML\nDESCRIPTION: This snippet configures a health check for the Beszel Hub within a Docker Compose file. It tests if the `/api/health` endpoint returns a 200 status code. The `start_period` is set to 5 seconds, and the `interval` is set to 120 seconds. The URL is relative to the container.\nSOURCE: https://github.com/henrygd/beszel-docs/blob/main/zh/guide/healthchecks.md#_snippet_1\n\nLANGUAGE: YAML\nCODE:\n```\nservices:\n  beszel-hub:\n    healthcheck:\n      # URL 是相对于容器的，而不是主机\n      test: ['CMD', '/beszel', 'health', '--url', 'http://localhost:8090']\n      start_period: 5s # 容器启动后 5 秒进行检查\n      interval: 120s # 之后每 120 秒检查一次\n```\n\n----------------------------------------\n\nTITLE: Edit Docker Compose File (Vim)\nDESCRIPTION: Opens the `docker-compose.yml` file using the Vim text editor.  This allows the user to paste the Docker Compose configuration provided in the Beszel admin interface, which defines the agent's services and dependencies.\nSOURCE: https://github.com/henrygd/beszel-docs/blob/main/en/guide/getting-started.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nvim docker-compose.yml\n```\n\n----------------------------------------\n\nTITLE: Multi-Dockerfile Compose Configuration\nDESCRIPTION: Demonstrates how to specify different Dockerfiles for the Hub and Agent services within the same `docker-compose.yml` file.  The `build` section now includes `context` and `dockerfile` keys to explicitly define which Dockerfile to use for each service.\nSOURCE: https://github.com/henrygd/beszel-docs/blob/main/zh/guide/docker-shell.md#_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nbeszel:\n  build:\n    context: .\n    dockerfile: Dockerfile_hub\n\nbeszel-agent:\n  build:\n    context: .\n    dockerfile: Dockerfile_agent\n```\n\n----------------------------------------\n\nTITLE: Adding Users to a System using PocketBase JS SDK\nDESCRIPTION: This code snippet demonstrates how to add users to a specific system using the PocketBase JS SDK. It authenticates as an administrator, retrieves user and system IDs based on email and system name filters, and then updates the system record with the new user IDs.\nSOURCE: https://github.com/henrygd/beszel-docs/blob/main/zh/guide/rest-api.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport PocketBase from 'pocketbase'\n\nconst pb = new PocketBase('http://localhost:8090')\n\n// 我们将添加到系统的用户\nconst userEmails = ['user1@example.com', 'user2@example.com']\n// 我们将向其添加用户的系统名称\nconst systemNames = ['localhost', 'kagemusha']\n\n// 作为管理员进行身份验证\nawait pb.admins.authWithPassword(process.env.EMAIL, process.env.PASSWORD)\n\n// 获取用户 ID\nconst userIds = await pb\n .collection('users')\n .getFullList({\n  fields: 'id',\n  filter: `email='${userEmails.join(`'||email='`)}'`,\n\n })\n .then((records) => records.map(({ id }) => id))\n\n// 获取系统 ID 和当前用户\nconst systemsData = await pb.collection('systems').getFullList({\n fields: 'id,users',\n filter: `name='${systemNames.join(`'||name='`)}'`,\n})\n\n// 循环遍历系统并将用户添加到其中\nfor (const system of systemsData) {\n const updatedUsers = Array.from(new Set([...system.users, ...userIds]))\n await pb.collection('systems').update(system.id, { users: updatedUsers })\n}\n```\n\n----------------------------------------\n\nTITLE: Mounting Filesystems in Docker for Beszel Monitoring (YAML)\nDESCRIPTION: This YAML snippet demonstrates how to mount filesystems from the host into the Beszel agent Docker container. By mounting the filesystems into the `/extra-filesystems` directory within the container, the Beszel agent can monitor them.  The `:ro` flag mounts the volumes as read-only.\nSOURCE: https://github.com/henrygd/beszel-docs/blob/main/en/guide/additional-disks.md#_snippet_0\n\nLANGUAGE: YAML\nCODE:\n```\nvolumes:\n  - /mnt/disk1/.beszel:/extra-filesystems/sdb1:ro\n  - /mnt/mmcblk0/.beszel:/extra-filesystems/mmcblk0:ro\n```\n\n----------------------------------------\n\nTITLE: Mounting Filesystems in Docker for Beszel Monitoring\nDESCRIPTION: This configuration mounts specific folders from the target filesystems into the container's `/extra-filesystems` directory. The mounted filesystems are configured as read-only (`:ro`).  This allows the Beszel agent running within the Docker container to monitor the specified disks or partitions. Replace `/mnt/disk1/.beszel` and `/mnt/mmcblk0/.beszel` with the actual paths to the directories you want to monitor.\nSOURCE: https://github.com/henrygd/beszel-docs/blob/main/zh/guide/additional-disks.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nvolumes:\n  - /mnt/disk1/.beszel:/extra-filesystems/sdb1:ro # 只读模式\n  - /mnt/mmcblk0/.beszel:/extra-filesystems/mmcblk0:ro # 只读模式\n```\n\n----------------------------------------\n\nTITLE: Enable and Start Systemd Service\nDESCRIPTION: These snippets show how to enable and start the Beszel agent systemd service, ensuring it runs after reboot.  The daemon-reload command is necessary to pick up any changes to the service file.\nSOURCE: https://github.com/henrygd/beszel-docs/blob/main/zh/guide/agent-installation.md#_snippet_8\n\nLANGUAGE: Bash\nCODE:\n```\nsudo systemctl daemon-reload\nsudo systemctl enable beszel-agent.service\nsudo systemctl start beszel-agent.service\n```\n\n----------------------------------------\n\nTITLE: Testing Network Connectivity using Telnet\nDESCRIPTION: This command is used to test network connectivity to the agent's IP address and port. It attempts to establish a TCP connection to the specified address and port, allowing you to verify if the agent is reachable from another device on your network.\nSOURCE: https://github.com/henrygd/beszel-docs/blob/main/en/guide/common-issues.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ntelnet <agent-ip> <port>\n```\n\n----------------------------------------\n\nTITLE: Multiple Dockerfiles in docker-compose.yml\nDESCRIPTION: This YAML snippet shows how to configure a docker-compose.yml file to use different Dockerfiles for the hub and agent services. It utilizes the `dockerfile` key within the `build` context.\nSOURCE: https://github.com/henrygd/beszel-docs/blob/main/en/guide/docker-shell.md#_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nbeszel:\n  build:\n    context: .\n    dockerfile: Dockerfile_hub\n\nbeszel-agent:\n  build:\n    context: .\n    dockerfile: Dockerfile_agent\n```\n\n----------------------------------------\n\nTITLE: Download Beszel Agent Binary\nDESCRIPTION: This command downloads the latest Beszel Agent binary from GitHub releases, extracts it from the tarball, and makes it executable. It determines the OS and architecture of the system using `uname` to download the appropriate binary.\nSOURCE: https://github.com/henrygd/beszel-docs/blob/main/en/guide/agent-installation.md#_snippet_4\n\nLANGUAGE: Bash\nCODE:\n```\ncurl -sL \"https://github.com/henrygd/beszel/releases/latest/download/beszel-agent_$(uname -s)_$(uname -m | sed -e 's/x86_64/amd64/' -e 's/armv6l/arm/' -e 's/armv7l/arm/' -e 's/aarch64/arm64/').tar.gz\" | tar -xz -O beszel-agent | tee ./beszel-agent >/dev/null && chmod +x beszel-agent\n```\n\n----------------------------------------\n\nTITLE: Cross-compiling with Makefile (Bash)\nDESCRIPTION: This snippet shows how to cross-compile Beszel for a specific operating system and architecture using the Makefile. The `OS` and `ARCH` variables define the target platform. The `go tool dist list` command provides a list of valid options.\nSOURCE: https://github.com/henrygd/beszel-docs/blob/main/zh/guide/compiling.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nmake OS=freebsd ARCH=arm64\n```\n\n----------------------------------------\n\nTITLE: Setting APP_URL Environment Variable\nDESCRIPTION: This sets the APP_URL environment variable, which is crucial for Beszel to understand the base path it should use. The variable should point to the full URL including the subpath.  This tells Beszel that it's hosted at a specific sub-directory and to generate URLs accordingly.\nSOURCE: https://github.com/henrygd/beszel-docs/blob/main/zh/guide/serve-on-subpath.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nAPP_URL=https://beszel.example.com/base-path\n```\n\n----------------------------------------\n\nTITLE: Podman Run Command for Beszel Agent\nDESCRIPTION: This command shows how to run the Beszel Agent using Podman. It's functionally equivalent to the Docker run command but uses Podman instead. Options include setting the container name, network mode, restart policy, volume mounts (for accessing the Docker socket), and environment variables for configuration.\nSOURCE: https://github.com/henrygd/beszel-docs/blob/main/en/guide/agent-installation.md#_snippet_2\n\nLANGUAGE: Bash\nCODE:\n```\npodman run -d \\\n  --name beszel-agent \\\n  --network host \\\n  --restart unless-stopped \\\n  -v /var/run/docker.sock:/var/run/docker.sock:ro \\\n  -e KEY=\"<public key>\" \\\n  -e LISTEN=45876 \\\n  docker.io/henrygd/beszel-agent:latest\n```\n\n----------------------------------------\n\nTITLE: Creating a systemd Service for Beszel Hub (RestartSec 5)\nDESCRIPTION: This configuration defines a systemd service for Beszel Hub.  It specifies the service description, dependencies, restart policy, user, working directory, and the command to execute.  Replace `{/path/to/working/directory}` with the actual working directory of Beszel. It uses a RestartSec of 5 seconds.\nSOURCE: https://github.com/henrygd/beszel-docs/blob/main/zh/guide/hub-installation.md#_snippet_9\n\nLANGUAGE: ini\nCODE:\n```\n[Unit]\nDescription=Beszel Hub\nAfter=network.target\n\n[Service]\nType=simple\nRestart=always\nRestartSec=5\nUser=root\nWorkingDirectory={/path/to/working/directory}\nExecStart={/path/to/working/directory}/beszel serve --http \"0.0.0.0:8090\"\n\n[Install]\nWantedBy=multi-user.target\n```\n\n----------------------------------------\n\nTITLE: Prepare Dependencies (bash)\nDESCRIPTION: This command uses `go mod tidy` to download and organize the Go module dependencies defined in the `go.mod` file. This ensures that all necessary dependencies are available for building the agent and hub.\nSOURCE: https://github.com/henrygd/beszel-docs/blob/main/en/guide/compiling.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ngo mod tidy\n```\n\n----------------------------------------\n\nTITLE: Starting all Beszel processes\nDESCRIPTION: Starts the Beszel Hub, Agent, and Web UI processes concurrently using the `make -j dev` command. This approach simplifies the startup of all three processes and combines their output for easier monitoring.  The `KEY` environment variable is required for the Agent process. It assumes that the user is in the `/beszel` directory.\nSOURCE: https://github.com/henrygd/beszel-docs/blob/main/zh/guide/developer-guide.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nKEY=\"...\" make -j dev\n```\n\n----------------------------------------\n\nTITLE: Starting All Beszel Processes\nDESCRIPTION: Starts all three Beszel processes (hub, agent, and web UI) concurrently using the `make -j dev` command.  The `KEY` environment variable likely provides agent authentication. This command provides combined output for easier monitoring.\nSOURCE: https://github.com/henrygd/beszel-docs/blob/main/en/guide/developer-guide.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nKEY=\"...\" make -j dev\n```\n\n----------------------------------------\n\nTITLE: Kubernetes Beszel Agent DaemonSet\nDESCRIPTION: This Kubernetes YAML snippet defines a DaemonSet for deploying the Beszel agent on each node. It configures the agent to use the host network, sets environment variables for the listen port and key, and defines tolerations to allow deployment on master/control plane nodes.\nSOURCE: https://github.com/henrygd/beszel-docs/blob/main/zh/guide/advanced-deployment.md#_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: apps/v1\nkind: DaemonSet\nmetadata:\n  name: beszel-agent\n  namespace: default\nspec:\n  selector:\n    matchLabels:\n      app: beszel-agent\n  template:\n    metadata:\n      labels:\n        app: beszel-agent\n    spec:\n      hostNetwork: true\n      containers:\n        - env:\n            - name: LISTEN\n              value: '45876'\n            - name: KEY\n              value: 'YOUR-KEY-HERE'\n          image: henrygd/beszel-agent:latest\n          imagePullPolicy: Always\n          name: beszel-agent\n          ports:\n            - containerPort: 45876\n              hostPort: 45876\n      restartPolicy: Always\n      tolerations:\n        - effect: NoSchedule\n          key: node-role.kubernetes.io/master\n          operator: Exists\n        - effect: NoSchedule\n          key: node-role.kubernetes.io/control-plane\n          operator: Exists\n  updateStrategy:\n    rollingUpdate:\n      maxSurge: 0\n      maxUnavailable: 100%\n    type: RollingUpdate\n```\n\n----------------------------------------\n\nTITLE: Build Agent (bash)\nDESCRIPTION: This command builds the Beszel agent binary. It navigates to the agent's directory (`beszel/cmd/agent`) and uses `go build` to create an executable. The `-ldflags \"-w -s\"` flag strips debugging information and symbol table from the binary to reduce its size.\nSOURCE: https://github.com/henrygd/beszel-docs/blob/main/en/guide/compiling.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ngo build -ldflags \"-w -s\" .\n```\n\n----------------------------------------\n\nTITLE: Restart Beszel Service with Systemd (Bash)\nDESCRIPTION: This snippet demonstrates how to reload the Systemd configuration and restart either the Beszel Agent or Hub service after modifying its configuration. It's a crucial step to apply any changes made to environment variables or other service settings.\nSOURCE: https://github.com/henrygd/beszel-docs/blob/main/zh/guide/environment-variables.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsudo systemctl daemon-reload\nsudo systemctl restart beszel-agent # 对于 hub 使用 beszel\n```\n\n----------------------------------------\n\nTITLE: Setting EXTRA_FILESYSTEMS Environment Variable (Bash)\nDESCRIPTION: This bash snippet shows how to set the `EXTRA_FILESYSTEMS` environment variable when running the Beszel binary agent. The `EXTRA_FILESYSTEMS` variable contains a comma-separated list of devices, partitions, or mount points to monitor. You also need to pass the `KEY` for authorization. This is a common method for quickly configuring the agent through the command line.\nSOURCE: https://github.com/henrygd/beszel-docs/blob/main/en/guide/additional-disks.md#_snippet_1\n\nLANGUAGE: Bash\nCODE:\n```\nEXTRA_FILESYSTEMS=\"sdb,sdc1,mmcblk0,/mnt/network-share\" KEY=\"...\" ./beszel-agent\n```\n\n----------------------------------------\n\nTITLE: Run Beszel Agent with Podman (Bash)\nDESCRIPTION: This snippet shows how to run the Beszel Agent using Podman, configuring the user, network, restart policy, volume mapping, and environment variables for API key and listen port. It maps the Docker socket to enable potential Docker API compatibility.\nSOURCE: https://github.com/henrygd/beszel-docs/blob/main/zh/guide/podman.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npodman run -d \\\n  --name beszel-agent \\\n  --user 1000 \\\n  --network host \\\n  --restart unless-stopped \\\n  -v /var/run/docker.sock:/var/run/docker.sock:ro \\\n  -e KEY=\"<public key>\" \\\n  -e LISTEN=45876 \\\n  docker.io/henrygd/beszel-agent:latest\n```\n\n----------------------------------------\n\nTITLE: Starting Beszel Agent\nDESCRIPTION: Starts the Beszel agent process using the `make dev-agent` command.  The `KEY` environment variable likely provides necessary authentication. The agent is a Go application and requires Go 1.23+ to be installed.  Authentication is a key dependency.\nSOURCE: https://github.com/henrygd/beszel-docs/blob/main/en/guide/developer-guide.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nKEY=\"...\" make dev-agent\n```\n\n----------------------------------------\n\nTITLE: Update docker-compose.yml for Agent\nDESCRIPTION: This snippet updates the `docker-compose.yml` file for the Beszel Agent service. It replaces the `image` key with a `build` key, instructing Docker Compose to build the image from the Dockerfile in the current directory.\nSOURCE: https://github.com/henrygd/beszel-docs/blob/main/zh/guide/docker-shell.md#_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nbeszel-agent:\n  image: henrygd/beszel-agent # [!code --]\n  build: . # [!code ++]\n```\n\n----------------------------------------\n\nTITLE: Docker Swarm Configuration for Beszel Agents (YAML)\nDESCRIPTION: This Docker Swarm configuration defines two Beszel agents, each constrained to a unique host and port. It uses a common configuration for image, restart policy, network mode, volumes, and environment variables. Each agent exposes a specific port and has placement constraints based on the node hostname.\nSOURCE: https://github.com/henrygd/beszel-docs/blob/main/en/guide/advanced-deployment.md#_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nx-common-config: &common-config\n  image: henrygd/beszel-agent:latest\n  restart: unless-stopped\n  network_mode: host\n  volumes:\n    - /var/run/docker.sock:/var/run/docker.sock:ro\n  environment:\n    KEY: 'YOUR_PUBLIC_KEY_FROM_HUB'\n  deploy: &common-deploy\n    mode: replicated\n    replicas: 1\n\nservices:\n  beszel-agent1:\n    <<: *common-config\n    ports:\n      - 45876:45876\n    environment:\n      <<: *common-config.environment\n      LISTEN: '45876'\n    deploy:\n      <<: *common-deploy\n      placement:\n        constraints:\n          - node.hostname == host-one\n\n  beszel-agent2:\n    <<: *common-config\n    ports:\n      - 45877:45877\n    environment:\n      <<: *common-config.environment\n      LISTEN: '45877'\n    deploy:\n      <<: *common-deploy\n      placement:\n        constraints:\n          - node.hostname == host-two\n```\n\n----------------------------------------\n\nTITLE: Start Docker Compose (Bash)\nDESCRIPTION: Starts the Beszel agent using Docker Compose in detached mode. This command reads the `docker-compose.yml` file in the current directory and creates and starts the containers defined within it, running them in the background.\nSOURCE: https://github.com/henrygd/beszel-docs/blob/main/en/guide/getting-started.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ndocker compose up -d\n```\n\n----------------------------------------\n\nTITLE: Create Dockerfile for Beszel Agent with Shell\nDESCRIPTION: This Dockerfile creates a new image for the Beszel Agent based on Alpine Linux, adding shell utilities and copying the Beszel binary from the original henrygd/beszel-agent:latest image. It sets the entrypoint for the container.\nSOURCE: https://github.com/henrygd/beszel-docs/blob/main/en/guide/docker-shell.md#_snippet_1\n\nLANGUAGE: dockerfile\nCODE:\n```\nFROM henrygd/beszel-agent:latest as beszel\n\n# Define the new base image\nFROM alpine:latest\n\n# Add tools (curl, telnet, traceroute, netstat, host, nslookup, dig, delv)\nRUN apk add --no-cache bash curl busybox-extras bind-tools\n\n# Copy the binary into the new image\nCOPY --from=beszel /agent /agent\n\nENTRYPOINT [\"/agent\"]\n```\n\n----------------------------------------\n\nTITLE: Adding Users to Systems via PocketBase API\nDESCRIPTION: This example shows how to add specific users to specific systems within a PocketBase database.  It authenticates as an admin, retrieves user IDs and system data, then iterates through the systems to add the specified users. Requires admin credentials (EMAIL, PASSWORD) set as environment variables and the PocketBase JS SDK.\nSOURCE: https://github.com/henrygd/beszel-docs/blob/main/en/guide/rest-api.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport PocketBase from 'pocketbase'\n\nconst pb = new PocketBase('http://localhost:8090')\n\n// users we will add to systems\nconst userEmails = ['user1@example.com', 'user2@example.com']\n// system names we will add users to\nconst systemNames = ['localhost', 'kagemusha']\n\n// authenticate as admin\nawait pb.admins.authWithPassword(process.env.EMAIL, process.env.PASSWORD)\n\n// get user ids\nconst userIds = await pb\n .collection('users')\n .getFullList({\n  fields: 'id',\n  filter: `email='${userEmails.join(`'||email='`)}'`,\n })\n .then((records) => records.map(({ id }) => id))\n\n// get id and current users for systems\nconst systemsData = await pb.collection('systems').getFullList({\n fields: 'id,users',\n filter: `name='${systemNames.join(`'||name='`)}'`,\n})\n\n// loop through systems and add users to them\nfor (const system of systemsData) {\n const updatedUsers = Array.from(new Set([...system.users, ...userIds]))\n await pb.collection('systems').update(system.id, { users: updatedUsers })\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Beszel with a Quick Script (Linux)\nDESCRIPTION: This command downloads and executes a shell script to install the latest Beszel binary. The script installs the binary and creates a systemd service to ensure the hub restarts after a reboot.\nSOURCE: https://github.com/henrygd/beszel-docs/blob/main/zh/guide/hub-installation.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncurl -sL https://raw.githubusercontent.com/henrygd/beszel/main/supplemental/scripts/install-hub.sh -o install-hub.sh && chmod +x install-hub.sh && ./install-hub.sh\n```\n\n----------------------------------------\n\nTITLE: Cross-Compiling with GOOS and GOARCH (bash)\nDESCRIPTION: This snippet demonstrates how to cross-compile the Beszel project for a specific operating system and architecture using environment variables. It sets the `GOOS` and `GOARCH` variables before running the `go build` command.\nSOURCE: https://github.com/henrygd/beszel-docs/blob/main/en/guide/compiling.md#_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nGOOS=freebsd GOARCH=arm64 go build -ldflags \"-w -s\" .\n```\n\n----------------------------------------\n\nTITLE: Update docker-compose.yml for Beszel Hub\nDESCRIPTION: This snippet shows how to update the docker-compose.yml file for the Beszel Hub service.  It replaces the `image` key with a `build` key, instructing Docker Compose to build the image from the Dockerfile in the current directory.\nSOURCE: https://github.com/henrygd/beszel-docs/blob/main/en/guide/docker-shell.md#_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nbeszel:\n  image: henrygd/beszel # [!code --]\n  build: . # [!code ++]\n```\n\n----------------------------------------\n\nTITLE: Downloading Beszel Binary\nDESCRIPTION: This command downloads the latest Beszel binary suitable for the server's CPU architecture from GitHub releases. It extracts the binary from the archive and makes it executable.\nSOURCE: https://github.com/henrygd/beszel-docs/blob/main/zh/guide/hub-installation.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncurl -sL \"https://github.com/henrygd/beszel/releases/latest/download/beszel_$(uname -s)_$(uname -m | sed -e 's/x86_64/amd64/' -e 's/armv6l/arm/' -e 's/armv7l/arm/' -e 's/aarch64/arm64/').tar.gz\" | tar -xz -O beszel | tee ./beszel >/dev/null && chmod +x beszel\n```\n\n----------------------------------------\n\nTITLE: Running Beszel with Podman\nDESCRIPTION: This command utilizes Podman to run the Beszel hub in a detached container. It creates a persistent data directory, maps port 8090, sets a restart policy, and specifies the Beszel image from Docker Hub.  The mkdir command ensures the data directory exists before the Podman command is executed.\nSOURCE: https://github.com/henrygd/beszel-docs/blob/main/en/guide/hub-installation.md#_snippet_2\n\nLANGUAGE: Bash\nCODE:\n```\nmkdir -p ./beszel_data && \\\npodman run -d \\\n  --name beszel \\\n  --restart=unless-stopped \\\n  -v ./beszel_data:/beszel_data \\\n  -p 8090:8090 \\\n  docker.io/henrygd/beszel\n```\n\n----------------------------------------\n\nTITLE: Download Binary (Linux)\nDESCRIPTION: This snippet provides a `curl` command to download the latest Beszel agent binary for Linux, based on the server's OS and architecture. It extracts the binary from the downloaded archive and makes it executable.\nSOURCE: https://github.com/henrygd/beszel-docs/blob/main/zh/guide/agent-installation.md#_snippet_4\n\nLANGUAGE: Bash\nCODE:\n```\ncurl -sL \"https://github.com/henrygd/beszel/releases/latest/download/beszel-agent_$(uname -s)_$(uname -m | sed -e 's/x86_64/amd64/' -e 's/armv6l/arm/' -e 's/armv7l/arm/' -e 's/aarch64/arm64/').tar.gz\" | tar -xz -O beszel-agent | tee ./beszel-agent >/dev/null && chmod +x beszel-agent\n```\n\n----------------------------------------\n\nTITLE: Reloading and restarting the beszel-agent\nDESCRIPTION: These commands are used to apply changes made to the systemd service configuration. `systemctl daemon-reload` reloads the systemd manager configuration, and `systemctl restart beszel-agent` restarts the Beszel agent service to apply the changes.\nSOURCE: https://github.com/henrygd/beszel-docs/blob/main/en/guide/gpu.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nsystemctl daemon-reload\nsystemctl restart beszel-agent\n```\n\n----------------------------------------\n\nTITLE: Symlinking rocm-smi for AMD GPU monitoring\nDESCRIPTION: This command creates a symbolic link from the `rocm-smi` binary located in `/opt/rocm/bin` to `/usr/local/bin`. This ensures that the `rocm-smi` command is accessible in the `PATH` of the user running `beszel-agent`, which is required for Beszel to monitor AMD GPUs.\nSOURCE: https://github.com/henrygd/beszel-docs/blob/main/en/guide/gpu.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsudo ln -s /opt/rocm/bin/rocm-smi /usr/local/bin/rocm-smi\n```\n\n----------------------------------------\n\nTITLE: Update Beszel Agent\nDESCRIPTION: This command initiates an update of the Beszel Agent to the latest version. It assumes the binary is located in the current directory and has execute permissions.\nSOURCE: https://github.com/henrygd/beszel-docs/blob/main/en/guide/agent-installation.md#_snippet_6\n\nLANGUAGE: Bash\nCODE:\n```\n./beszel-agent update\n```\n\n----------------------------------------\n\nTITLE: Start Agent (Binary)\nDESCRIPTION: This snippet shows how to start the Beszel agent after downloading the binary. The `-listen` and `-key` flags are used to specify the listening port and public key, respectively.  Use `-h` to view all options.\nSOURCE: https://github.com/henrygd/beszel-docs/blob/main/zh/guide/agent-installation.md#_snippet_5\n\nLANGUAGE: Bash\nCODE:\n```\n./beszel-agent -listen \"45876\" -key \"<公钥>\"\n```\n\n----------------------------------------\n\nTITLE: Cloning Beszel Repository\nDESCRIPTION: Clones the forked Beszel repository to your local machine using git. Replace `https://github.com/your_username/beszel.git` with your forked repository URL. This is a prerequisite for making and testing local changes.\nSOURCE: https://github.com/henrygd/beszel-docs/blob/main/en/guide/developer-guide.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/your_username/beszel.git\n```\n\n----------------------------------------\n\nTITLE: Podman Run Command\nDESCRIPTION: This snippet provides a `podman run` command for deploying the Beszel agent. It is similar to the Docker command, but uses `podman` instead. It includes options for setting the container name, network mode, restart policy, volume mappings, and environment variables. The `network host` mode is required for accessing network statistics. The KEY and LISTEN environment variables must be provided.\nSOURCE: https://github.com/henrygd/beszel-docs/blob/main/zh/guide/agent-installation.md#_snippet_2\n\nLANGUAGE: Bash\nCODE:\n```\npodman run -d \\\n  --name beszel-agent \\\n  --network host \\\n  --restart unless-stopped \\\n  -v /var/run/docker.sock:/var/run/docker.sock:ro \\\n  -e KEY=\"<公钥>\" \\\n  -e LISTEN=45876 \\\n  docker.io/henrygd/beszel-agent:latest\n```\n\n----------------------------------------\n\nTITLE: Starting the Beszel Agent\nDESCRIPTION: Starts the Beszel Agent process using the `make dev-agent` command. This requires a `KEY` environment variable to be set. This is one of the three processes for Beszel development. It assumes that the user is in the `/beszel` directory.\nSOURCE: https://github.com/henrygd/beszel-docs/blob/main/zh/guide/developer-guide.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n# 启动代理程序\nKEY=\"...\" make dev-agent\n```\n\n----------------------------------------\n\nTITLE: Docker Compose Configuration\nDESCRIPTION: This snippet provides a docker-compose.yml file for deploying the Beszel agent as a Docker container. It defines the service, image, container name, restart policy, network mode, volumes, and environment variables required for the agent to function correctly.  The `network_mode: host` is required to access network interface statistics.  The KEY and LISTEN environment variables should be configured appropriately.\nSOURCE: https://github.com/henrygd/beszel-docs/blob/main/zh/guide/agent-installation.md#_snippet_0\n\nLANGUAGE: YAML\nCODE:\n```\nservices:\n  beszel-agent:\n    image: henrygd/beszel-agent\n    container_name: beszel-agent\n    restart: unless-stopped\n    network_mode: host\n    volumes:\n      - /var/run/docker.sock:/var/run/docker.sock:ro\n      # 通过在 /extra-filesystems 中挂载文件夹来监控其他磁盘/分区\n      # - /mnt/disk1/.beszel:/extra-filesystems/disk1:ro\n    environment:\n      LISTEN: 45876\n      KEY: '<公钥>'\n```\n\n----------------------------------------\n\nTITLE: Resetting Password using Binary File\nDESCRIPTION: This command resets the password for a superuser or creates a new one if the email doesn't exist, using the `superuser upsert` command with the Beszel binary. It requires the `beszel` binary to be executable and in the current path. Replace `name@example.com` and `password` with the desired email and password.\nSOURCE: https://github.com/henrygd/beszel-docs/blob/main/zh/guide/user-accounts.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n./beszel superuser upsert name@example.com password\n```\n\n----------------------------------------\n\nTITLE: Start Docker Compose Services (Bash)\nDESCRIPTION: Starts the services defined in the `docker-compose.yml` file in detached mode, running them in the background. Requires Docker Compose to be installed and configured correctly.\nSOURCE: https://github.com/henrygd/beszel-docs/blob/main/zh/guide/parts/hub-docker-instructions.md#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ndocker compose up -d\n```\n\n----------------------------------------\n\nTITLE: Starting the Beszel Web UI\nDESCRIPTION: Starts the Beszel Web UI development server using the `make dev-server` command. This serves the frontend application, allowing developers to interact with and test the user interface. It assumes that the user is in the `/beszel` directory.\nSOURCE: https://github.com/henrygd/beszel-docs/blob/main/zh/guide/developer-guide.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n# 启动 Web UI\nmake dev-server\n```\n\n----------------------------------------\n\nTITLE: Running Beszel with Podman Run\nDESCRIPTION: This command uses Podman to run the 'henrygd/beszel' image in a detached state. It first creates a directory for persistent data, then runs the container with a specified name, restart policy, volume mount for data persistence, and port mapping to expose the service.\nSOURCE: https://github.com/henrygd/beszel-docs/blob/main/zh/guide/hub-installation.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nmkdir -p ./beszel_data && \\\npodman run -d \\\n  --name beszel \\\n  --restart=unless-stopped \\\n  -v ./beszel_data:/beszel_data \\\n  -p 8090:8090 \\\n  docker.io/henrygd/beszel\n```\n\n----------------------------------------\n\nTITLE: Quick Install Script for Beszel (Linux)\nDESCRIPTION: This command downloads and executes a shell script to install the latest Beszel binary and set up a systemd service. It uses `curl` to download the script, `chmod` to make it executable, and then executes the script. The `-sL` flags for curl ensure silent operation and following redirects.\nSOURCE: https://github.com/henrygd/beszel-docs/blob/main/en/guide/hub-installation.md#_snippet_3\n\nLANGUAGE: Bash\nCODE:\n```\ncurl -sL https://raw.githubusercontent.com/henrygd/beszel/main/supplemental/scripts/install-hub.sh -o install-hub.sh && chmod +x install-hub.sh && ./install-hub.sh\n```\n\n----------------------------------------\n\nTITLE: Update Beszel Hub\nDESCRIPTION: This command updates the Beszel hub to the latest version by executing the `update` subcommand. It assumes the Beszel binary is already in the system's PATH or the current directory.\nSOURCE: https://github.com/henrygd/beszel-docs/blob/main/en/guide/hub-installation.md#_snippet_6\n\nLANGUAGE: Bash\nCODE:\n```\n./beszel update\n```\n\n----------------------------------------\n\nTITLE: Build Hub Website (bash)\nDESCRIPTION: These commands build the web UI for the Beszel hub. It first navigates to the `site` directory, then installs dependencies using `bun install` (or `npm install`), and builds the website using `bun run build` (or `npm run build`). These steps are prerequisites for building the hub binary.\nSOURCE: https://github.com/henrygd/beszel-docs/blob/main/en/guide/compiling.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ncd site\nbun install\nbun run build\n```\n\n----------------------------------------\n\nTITLE: Start Beszel Hub\nDESCRIPTION: This command starts the Beszel hub by executing the downloaded binary. It specifies the HTTP address to listen on as 0.0.0.0:8090, making it accessible from any network interface.\nSOURCE: https://github.com/henrygd/beszel-docs/blob/main/en/guide/hub-installation.md#_snippet_5\n\nLANGUAGE: Bash\nCODE:\n```\n./beszel serve --http \"0.0.0.0:8090\"\n```\n\n----------------------------------------\n\nTITLE: Starting Beszel Hub\nDESCRIPTION: Starts the Beszel hub process using the `make dev-hub` command. The hub is a Go application that requires Go 1.23+ to be installed. This command likely builds and runs the hub application.\nSOURCE: https://github.com/henrygd/beszel-docs/blob/main/en/guide/developer-guide.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmake dev-hub\n```\n\n----------------------------------------\n\nTITLE: Running Beszel with Docker Compose\nDESCRIPTION: This Docker Compose configuration defines a service named 'beszel' using the 'henrygd/beszel' image. It configures the container to restart automatically unless stopped, maps port 8090 on the host to port 8090 on the container, and mounts a volume for persistent data storage.\nSOURCE: https://github.com/henrygd/beszel-docs/blob/main/zh/guide/hub-installation.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  beszel:\n    image: henrygd/beszel\n    container_name: beszel\n    restart: unless-stopped\n    ports:\n      - 8090:8090\n    volumes:\n      - ./beszel_data:/beszel_data\n```\n\n----------------------------------------\n\nTITLE: Docker Run Command\nDESCRIPTION: This snippet provides a `docker run` command for deploying the Beszel agent. It includes options for setting the container name, network mode, restart policy, volume mappings, and environment variables. The `network host` mode is required for accessing network statistics. The KEY and LISTEN environment variables must be provided.\nSOURCE: https://github.com/henrygd/beszel-docs/blob/main/zh/guide/agent-installation.md#_snippet_1\n\nLANGUAGE: Bash\nCODE:\n```\ndocker run -d \\\n  --name beszel-agent \\\n  --network host \\\n  --restart unless-stopped \\\n  -v /var/run/docker.sock:/var/run/docker.sock:ro \\\n  -e KEY=\"<公钥>\" \\\n  -e LISTEN=45876 \\\n  henrygd/beszel-agent:latest\n```\n\n----------------------------------------\n\nTITLE: Setting EXTRA_FILESYSTEMS Environment Variable (Bash)\nDESCRIPTION: This command sets the `EXTRA_FILESYSTEMS` environment variable to a comma-separated list of devices, partitions, or mount points to be monitored by the Beszel agent. The `KEY` variable is assumed to be set separately and used to authenticate with the Beszel server.  This allows the Beszel agent to monitor the specified storage devices. Requires the Beszel agent executable to be available in the current directory.\nSOURCE: https://github.com/henrygd/beszel-docs/blob/main/zh/guide/additional-disks.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nEXTRA_FILESYSTEMS=\"sdb,sdc1,mmcblk0,/mnt/network-share\" KEY=\"...\" ./beszel-agent\n```\n\n----------------------------------------\n\nTITLE: Starting Beszel Hub\nDESCRIPTION: This command starts the Beszel Hub by executing the 'beszel' binary with the 'serve' subcommand and specifying the HTTP address to listen on (0.0.0.0:8090).\nSOURCE: https://github.com/henrygd/beszel-docs/blob/main/zh/guide/hub-installation.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n./beszel serve --http \"0.0.0.0:8090\"\n```\n\n----------------------------------------\n\nTITLE: Symbolic Link Creation for AMD GPU Monitoring\nDESCRIPTION: This command creates a symbolic link for `rocm-smi` in `/usr/local/bin` to ensure it's accessible by the `beszel-agent` user. This is necessary if the `rocm-smi` binary is located in `/opt/rocm/bin` and this directory is not in the user's `PATH` environment variable. Requires root privileges (sudo).\nSOURCE: https://github.com/henrygd/beszel-docs/blob/main/zh/guide/gpu.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsudo ln -s /opt/rocm/bin/rocm-smi /usr/local/bin/rocm-smi\n```\n\n----------------------------------------\n\nTITLE: Running Beszel Agent with Podman\nDESCRIPTION: This command runs the Beszel agent using Podman, setting the user ID, network, restart policy, volume mount, and environment variables. The agent is configured to connect to the Docker socket (used for Podman compatibility), uses the host network, restarts unless stopped, and passes a public key and listen port as environment variables.\nSOURCE: https://github.com/henrygd/beszel-docs/blob/main/en/guide/podman.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npodman run -d \\\n  --name beszel-agent \\\n  --user 1000 \\\n  --network host \\\n  --restart unless-stopped \\\n  -v /var/run/docker.sock:/var/run/docker.sock:ro \\\n  -e KEY=\"<public key>\" \\\n  -e LISTEN=45876 \\\n  docker.io/henrygd/beszel-agent:latest\n```\n\n----------------------------------------\n\nTITLE: Caddy Configuration for Subpath\nDESCRIPTION: This Caddy configuration reverse proxies requests to Beszel running on localhost at port 8090, ensuring the request body size is limited. The `handle_path` directive matches requests starting with `/base-path` and forwards them. The `read_timeout` is set to 360 seconds to accommodate potentially long-running requests.\nSOURCE: https://github.com/henrygd/beszel-docs/blob/main/zh/guide/serve-on-subpath.md#_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nbeszel.example.com {\n\trequest_body {\n\t\tmax_size 10MB\n\t}\n\thandle_path /base-path* {\n\t\treverse_proxy 127.0.0.1:8090 {\n\t\t\ttransport http {\n\t\t\t\tread_timeout 360s\n\t\t\t}\n\t\t}\n\t}\n\trespond 404\n}\n```\n\n----------------------------------------\n\nTITLE: Resetting Password via Docker\nDESCRIPTION: This command executes the `superuser upsert` command within a Docker container named 'beszel' to reset or create a superuser account with the provided email and password. It requires Docker to be installed and the 'beszel' container to be running. The parameters 'name@example.com' and 'password' need to be replaced with the actual email and desired password.\nSOURCE: https://github.com/henrygd/beszel-docs/blob/main/en/guide/user-accounts.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker exec beszel /beszel superuser upsert name@example.com password\n```\n\n----------------------------------------\n\nTITLE: Building Beszel Agent Manually (Bash)\nDESCRIPTION: This snippet builds the Beszel agent manually using the `go build` command. The `-ldflags \"-w -s\"` option strips debug information from the binary, reducing its size.\nSOURCE: https://github.com/henrygd/beszel-docs/blob/main/zh/guide/compiling.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ngo build -ldflags \"-w -s\" .\n```\n\n----------------------------------------\n\nTITLE: Cloning Beszel Repository (bash)\nDESCRIPTION: This snippet demonstrates how to clone the Beszel repository from GitHub using git. It specifies the version using the `pkg.version` variable and clones with a depth of 1 to reduce download size. After cloning, it changes the directory to `/beszel/beszel`.\nSOURCE: https://github.com/henrygd/beszel-docs/blob/main/en/guide/compiling.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# Clone the repository\ngit clone --branch v{{pkg.version}} --depth 1 https://github.com/henrygd/beszel.git\n# Navigate to the project directory\ncd beszel/beszel\n```\n\n----------------------------------------\n\nTITLE: Running Beszel with Docker Run\nDESCRIPTION: This command uses Docker to run the 'henrygd/beszel' image in a detached state.  It first creates a directory for persistent data, then runs the container with a specified name, restart policy, volume mount for data persistence, and port mapping to expose the service.\nSOURCE: https://github.com/henrygd/beszel-docs/blob/main/zh/guide/hub-installation.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmkdir -p ./beszel_data && \\\ndocker run -d \\\n  --name beszel \\\n  --restart=unless-stopped \\\n  -v ./beszel_data:/beszel_data \\\n  -p 8090:8090 \\\n  henrygd/beszel\n```\n\n----------------------------------------\n\nTITLE: Create Hub Dockerfile\nDESCRIPTION: Creates a Dockerfile for the Beszel Hub, using the latest Beszel image as a base, then switching to Alpine Linux and adding debugging tools like bash, curl, and busybox-extras. It copies the Beszel binary and sets the entrypoint and command for serving the Hub.\nSOURCE: https://github.com/henrygd/beszel-docs/blob/main/zh/guide/docker-shell.md#_snippet_0\n\nLANGUAGE: dockerfile\nCODE:\n```\nFROM henrygd/beszel:latest as beszel\n\n# 定义新的基础镜像\nFROM alpine:latest\n\n# 添加工具（curl、telnet、traceroute、netstat、host、nslookup、dig、delv）\nRUN apk add --no-cache bash curl busybox-extras bind-tools\n\n# 将二进制文件复制到新镜像中\nCOPY --from=beszel /beszel /beszel\n\nENTRYPOINT [ \"/beszel\" ]\nCMD [\"serve\", \"--http=0.0.0.0:8090\"]\n```\n\n----------------------------------------\n\nTITLE: Create Dockerfile for Beszel Hub with Shell\nDESCRIPTION: This Dockerfile creates a new image for the Beszel Hub based on Alpine Linux, adding shell utilities and copying the Beszel binary from the original henrygd/beszel:latest image. It sets the entrypoint and default command for the container.\nSOURCE: https://github.com/henrygd/beszel-docs/blob/main/en/guide/docker-shell.md#_snippet_0\n\nLANGUAGE: dockerfile\nCODE:\n```\nFROM henrygd/beszel:latest as beszel\n\n# Define the new base image\nFROM alpine:latest\n\n# Add tools (curl, telnet, traceroute, netstat, host, nslookup, dig, delv)\nRUN apk add --no-cache bash curl busybox-extras bind-tools\n\n# Copy the binary into the new image\nCOPY --from=beszel /beszel /beszel\n\nENTRYPOINT [ \"/beszel\" ]\nCMD [\"serve\", \"--http=0.0.0.0:8090\"]\n```\n\n----------------------------------------\n\nTITLE: Managing Go Dependencies (Bash)\nDESCRIPTION: This snippet demonstrates how to manage Go dependencies using `go mod tidy`. This command ensures that the `go.mod` file accurately reflects the project's dependencies.\nSOURCE: https://github.com/henrygd/beszel-docs/blob/main/zh/guide/compiling.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ngo mod tidy\n```\n\n----------------------------------------\n\nTITLE: Starting Beszel Web UI\nDESCRIPTION: Starts the Beszel web UI process using the `make dev-server` command. The web UI is built with TypeScript and Vite, requiring Bun 1.1.38+ or Node 18+ to be installed. This command likely starts a development server for the web UI.\nSOURCE: https://github.com/henrygd/beszel-docs/blob/main/en/guide/developer-guide.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nmake dev-server\n```\n\n----------------------------------------\n\nTITLE: Open docker-compose.yml in VS Code\nDESCRIPTION: Opens the docker-compose.yml file in Visual Studio Code (VS Code), which is assumed to be available through the 'code' command.\nSOURCE: https://github.com/henrygd/beszel-docs/blob/main/en/guide/parts/hub-docker-instructions.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ncode docker-compose.yml\n```\n\n----------------------------------------\n\nTITLE: Cross-compiling Beszel Manually (Bash)\nDESCRIPTION: This snippet shows how to cross-compile Beszel manually using the `GOOS` and `GOARCH` environment variables along with the `go build` command. The `-ldflags \"-w -s\"` option strips debug information from the binary.\nSOURCE: https://github.com/henrygd/beszel-docs/blob/main/zh/guide/compiling.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nGOOS=freebsd GOARCH=arm64 go build -ldflags \"-w -s\" .\n```\n\n----------------------------------------\n\nTITLE: Enable and Start Podman API (Bash)\nDESCRIPTION: This snippet enables and starts the Podman API socket using systemctl. This allows the Beszel Agent to communicate with the Podman daemon.\nSOURCE: https://github.com/henrygd/beszel-docs/blob/main/zh/guide/podman.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsystemctl --user enable podman.socket\nsystemctl --user start podman.socket\n```\n\n----------------------------------------\n\nTITLE: Edit docker-compose.yml with Vim (Bash)\nDESCRIPTION: Opens the `docker-compose.yml` file for editing using the Vim text editor in the command line.\nSOURCE: https://github.com/henrygd/beszel-docs/blob/main/zh/guide/parts/hub-docker-instructions.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nvim docker-compose.yml\n```\n\n----------------------------------------\n\nTITLE: Ansible Beszel Agent Variables\nDESCRIPTION: This YAML snippet defines the variables required for the Beszel agent installation in the `all.yml` file. It includes configurations for enabling the agent, enabling auto-updates, specifying the SSH key, and setting the SSH port.\nSOURCE: https://github.com/henrygd/beszel-docs/blob/main/zh/guide/advanced-deployment.md#_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n# --= 自定义附加项 =--\n# Beszel 监控 SSH 密钥，用于在所有节点上安装 beszel 代理\nbeszel_agent: true\nbeszel_agent_autoupdate: true\nbeszel_agent_ssh_key: 'ssh-ed25519 lalalal'\nbeszel_agent_ssh_port: 45876\n```\n\n----------------------------------------\n\nTITLE: Docker Swarm Beszel Agent Configuration\nDESCRIPTION: This Docker Swarm configuration snippet defines a common configuration for the Beszel agent, including the image, restart policy, network mode, volumes, and environment variables. It then defines two services, `beszel-agent1` and `beszel-agent2`, each with a unique port and constraint to run on a specific host.\nSOURCE: https://github.com/henrygd/beszel-docs/blob/main/zh/guide/advanced-deployment.md#_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nx-common-config: &common-config\n  image: henrygd/beszel-agent:latest\n  restart: unless-stopped\n  network_mode: host\n  volumes:\n    - /var/run/docker.sock:/var/run/docker.sock:ro\n  environment:\n    KEY: 'YOUR_PUBLIC_KEY_FROM_HUB'\n  deploy: &common-deploy\n    mode: replicated\n    replicas: 1\n\nservices:\n  beszel-agent1:\n    <<: *common-config\n    ports:\n      - 45876:45876\n    environment:\n      <<: *common-config.environment\n      LISTEN: '45876'\n    deploy:\n      <<: *common-deploy\n      placement:\n        constraints:\n          - node.hostname == host-one\n\n  beszel-agent2:\n    <<: *common-config\n    ports:\n      - 45877:45877\n    environment:\n      <<: *common-config.environment\n      LISTEN: '45877'\n    deploy:\n      <<: *common-deploy\n      placement:\n        constraints:\n          - node.hostname == host-two\n```\n\n----------------------------------------\n\nTITLE: Ansible Variables for Beszel Agent (YAML)\nDESCRIPTION: These Ansible variables configure the Beszel agent installation. They define whether the agent is installed, if auto-updates are enabled, the SSH key for the agent, and the SSH port used for communication. These variables should be added to the `all.yml` file.\nSOURCE: https://github.com/henrygd/beszel-docs/blob/main/en/guide/advanced-deployment.md#_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n# --= CUSTOM ADDONS =--\n# Beszel monitoring ssh key for installing beszel agents on all nodes\nbeszel_agent: true\nbeszel_agent_autoupdate: true\nbeszel_agent_ssh_key: 'ssh-ed25519 lalalal'\nbeszel_agent_ssh_port: 45876\n```\n\n----------------------------------------\n\nTITLE: Update Agent (Binary)\nDESCRIPTION: This snippet shows how to update the Beszel agent binary to the latest version.\nSOURCE: https://github.com/henrygd/beszel-docs/blob/main/zh/guide/agent-installation.md#_snippet_6\n\nLANGUAGE: Bash\nCODE:\n```\n./beszel-agent update\n```\n\n----------------------------------------\n\nTITLE: Edit docker-compose.yml with VSCode (Bash)\nDESCRIPTION: Opens the `docker-compose.yml` file for editing using Visual Studio Code from the command line, assuming the `code` command is available.\nSOURCE: https://github.com/henrygd/beszel-docs/blob/main/zh/guide/parts/hub-docker-instructions.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ncode docker-compose.yml\n```\n\n----------------------------------------\n\nTITLE: Finding Filesystem Information with df -h\nDESCRIPTION: This command displays disk space usage in a human-readable format. The \"Filesystem\" column in the output provides options for configuring the `FILESYSTEM` environment variable when setting up the agent for root disk stats.\nSOURCE: https://github.com/henrygd/beszel-docs/blob/main/en/guide/common-issues.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ndf -h\n```\n\n----------------------------------------\n\nTITLE: Ansible Uninstall Beszel Agent\nDESCRIPTION: This Ansible playbook snippet uninstalls the Beszel agent by first collecting service facts, then downloading the install script, and finally running the script with the `-u` flag to uninstall the agent. It only runs if the `beszel-agent.service` is defined.\nSOURCE: https://github.com/henrygd/beszel-docs/blob/main/zh/guide/advanced-deployment.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n- name: 如果服务存在则删除 beszel-agent\n  block:\n    - name: 收集服务信息\n      ansible.builtin.service_facts:\n\n    - name: 下载 install-agent.sh 脚本\n      ansible.builtin.get_url:\n        url: https://raw.githubusercontent.com/henrygd/beszel/main/supplemental/scripts/install-agent.sh\n        dest: /tmp/install-agent.sh\n        mode: '0755' # 设置可执行权限\n      when: ansible_facts['services']['beszel-agent.service'] is defined\n\n    - name: 删除 beszel 代理\n      become: true\n      ansible.builtin.command:\n        cmd: /tmp/install-agent.sh -u\n      when: ansible_facts['services']['beszel-agent.service'] is defined\n```\n\n----------------------------------------\n\nTITLE: Systemd Daemon Reload and Service Restart\nDESCRIPTION: These commands reload the systemd daemon and restart the `beszel-agent` service. This is necessary to apply the changes made in the service configuration file, such as allowing access to Nvidia GPU devices. Requires root privileges to execute these commands.\nSOURCE: https://github.com/henrygd/beszel-docs/blob/main/zh/guide/gpu.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nsystemctl daemon-reload\nsystemctl restart beszel-agent\n```\n\n----------------------------------------\n\nTITLE: Open docker-compose.yml in Emacs\nDESCRIPTION: Opens the docker-compose.yml file in the Emacs editor, enabling users to insert and modify the Compose configuration.\nSOURCE: https://github.com/henrygd/beszel-docs/blob/main/en/guide/parts/hub-docker-instructions.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nemacs docker-compose.yml\n```\n\n----------------------------------------\n\nTITLE: Resetting Password using Docker\nDESCRIPTION: This command resets the password for a superuser or creates a new one if the email doesn't exist, using the `superuser upsert` command within a Docker container. It requires Docker to be running with the container named `beszel`. Replace `name@example.com` and `password` with the desired email and password.\nSOURCE: https://github.com/henrygd/beszel-docs/blob/main/zh/guide/user-accounts.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker exec beszel /beszel superuser upsert name@example.com password\n```\n\n----------------------------------------\n\nTITLE: Edit docker-compose.yml with emacs - Bash\nDESCRIPTION: Opens the docker-compose.yml file with the emacs text editor. This allows the user to paste the configuration provided by the Beszel hub.\nSOURCE: https://github.com/henrygd/beszel-docs/blob/main/zh/guide/getting-started.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nemacs docker-compose.yml\n```\n\n----------------------------------------\n\nTITLE: Enable and Start Beszel Service (systemd)\nDESCRIPTION: These commands manage the Beszel systemd service.  `systemctl daemon-reload` reloads the systemd manager configuration.  `systemctl enable` enables the service to start on boot. `systemctl start` starts the service immediately.\nSOURCE: https://github.com/henrygd/beszel-docs/blob/main/en/guide/hub-installation.md#_snippet_8\n\nLANGUAGE: Bash\nCODE:\n```\nsudo systemctl daemon-reload\nsudo systemctl enable beszel.service\nsudo systemctl start beszel.service\n```\n\n----------------------------------------\n\nTITLE: Start Beszel Agent\nDESCRIPTION: This command starts the Beszel Agent with specified parameters for the listening port and public key. The `-listen` parameter sets the port the agent listens on, and `-key` provides the public key for authentication.\nSOURCE: https://github.com/henrygd/beszel-docs/blob/main/en/guide/agent-installation.md#_snippet_5\n\nLANGUAGE: Bash\nCODE:\n```\n./beszel-agent -listen \"45876\" -key \"<public key>\"\n```\n\n----------------------------------------\n\nTITLE: Start Agent with Docker Compose - Bash\nDESCRIPTION: Starts the Beszel agent using Docker Compose in detached mode. Requires Docker Compose to be installed and configured.\nSOURCE: https://github.com/henrygd/beszel-docs/blob/main/zh/guide/getting-started.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ndocker compose up -d\n```\n\n----------------------------------------\n\nTITLE: Create Beszel Directory\nDESCRIPTION: This bash command creates a directory named 'beszel' and then changes the current directory to the newly created 'beszel' directory. This is used to store the docker-compose.yml file.\nSOURCE: https://github.com/henrygd/beszel-docs/blob/main/en/guide/parts/hub-docker-instructions.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmkdir beszel\ncd beszel\n```\n\n----------------------------------------\n\nTITLE: Edit docker-compose.yml with vim - Bash\nDESCRIPTION: Opens the docker-compose.yml file with the vim text editor. This allows the user to paste the configuration provided by the Beszel hub.\nSOURCE: https://github.com/henrygd/beszel-docs/blob/main/zh/guide/getting-started.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nvim docker-compose.yml\n```\n\n----------------------------------------\n\nTITLE: Modify User in beszel-agent.service (INI)\nDESCRIPTION: This snippet shows how to change the user running the Beszel Agent in the systemd service file. It replaces `User=beszel` with `User=1000` to match the user running Podman.\nSOURCE: https://github.com/henrygd/beszel-docs/blob/main/zh/guide/podman.md#_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[Service]\nUser=beszel # [!code --]\nUser=1000 # [!code ++]\n```\n\n----------------------------------------\n\nTITLE: Superuser Help Command via Binary\nDESCRIPTION: This command executes the `superuser --help` command using the Beszel binary to display available options for the superuser command. The Beszel binary must be executable and accessible in the current directory.\nSOURCE: https://github.com/henrygd/beszel-docs/blob/main/en/guide/user-accounts.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n./beszel superuser --help\n```\n\n----------------------------------------\n\nTITLE: Building Beszel with Makefile (Bash)\nDESCRIPTION: This snippet demonstrates how to use the Makefile to build the Beszel hub and agent. It provides commands to build both components simultaneously, or to build either the agent or the hub separately. The `make` command automatically handles the build process based on the Makefile's instructions.\nSOURCE: https://github.com/henrygd/beszel-docs/blob/main/zh/guide/compiling.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmake\nmake build-agent\nmake build-hub\n```\n\n----------------------------------------\n\nTITLE: Edit Docker Compose File (VSCode)\nDESCRIPTION: Opens the `docker-compose.yml` file using Visual Studio Code. This allows the user to paste the Docker Compose configuration provided in the Beszel admin interface, which defines the agent's services and dependencies.\nSOURCE: https://github.com/henrygd/beszel-docs/blob/main/en/guide/getting-started.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncode docker-compose.yml\n```\n\n----------------------------------------\n\nTITLE: Create Agent Dockerfile\nDESCRIPTION: Creates a Dockerfile for the Beszel Agent, using the latest Beszel Agent image as a base, then switching to Alpine Linux and adding debugging tools. It copies the Agent binary and sets the entrypoint.\nSOURCE: https://github.com/henrygd/beszel-docs/blob/main/zh/guide/docker-shell.md#_snippet_1\n\nLANGUAGE: dockerfile\nCODE:\n```\nFROM henrygd/beszel-agent:latest as beszel\n\n# 定义新的基础镜像\nFROM alpine:latest\n\n# 添加工具（curl、telnet、traceroute、netstat、host, nslookup、dig、delv）\nRUN apk add --no-cache bash curl busybox-extras bind-tools\n\n# 将二进制文件复制到新镜像中\nCOPY --from=beszel /agent /agent\n\nENTRYPOINT [\"/agent\"]\n```\n\n----------------------------------------\n\nTITLE: Edit docker-compose.yml with nano - Bash\nDESCRIPTION: Opens the docker-compose.yml file with the nano text editor.  This allows the user to paste the configuration provided by the Beszel hub.\nSOURCE: https://github.com/henrygd/beszel-docs/blob/main/zh/guide/getting-started.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnano docker-compose.yml\n```\n\n----------------------------------------\n\nTITLE: Create Beszel Directory (Bash)\nDESCRIPTION: Creates a directory named 'beszel' and navigates into it using the command line. This directory is intended to store the `docker-compose.yml` file.\nSOURCE: https://github.com/henrygd/beszel-docs/blob/main/zh/guide/parts/hub-docker-instructions.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmkdir beszel\ncd beszel\n```\n\n----------------------------------------\n\nTITLE: Updating Beszel Hub\nDESCRIPTION: This command updates the Beszel Hub by executing the 'beszel' binary with the 'update' subcommand. It assumes the 'beszel' binary is in the current directory or accessible via the PATH.\nSOURCE: https://github.com/henrygd/beszel-docs/blob/main/zh/guide/hub-installation.md#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n./beszel update\n```\n\n----------------------------------------\n\nTITLE: Edit docker-compose.yml with vscode - Bash\nDESCRIPTION: Opens the docker-compose.yml file with the vscode editor. This allows the user to paste the configuration provided by the Beszel hub.\nSOURCE: https://github.com/henrygd/beszel-docs/blob/main/zh/guide/getting-started.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncode docker-compose.yml\n```\n\n----------------------------------------\n\nTITLE: Create Agent Directory (Bash)\nDESCRIPTION: Creates a directory named `beszel-agent` and navigates into it. This is a prerequisite step for setting up the Beszel agent using Docker Compose, providing a dedicated location for the agent's configuration file.\nSOURCE: https://github.com/henrygd/beszel-docs/blob/main/en/guide/getting-started.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmkdir beszel-agent\ncd beszel-agent\n```\n\n----------------------------------------\n\nTITLE: Edit docker-compose.yml with Emacs (Bash)\nDESCRIPTION: Opens the `docker-compose.yml` file for editing using the Emacs text editor in the command line.\nSOURCE: https://github.com/henrygd/beszel-docs/blob/main/zh/guide/parts/hub-docker-instructions.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nemacs docker-compose.yml\n```\n\n----------------------------------------\n\nTITLE: Cloning the Beszel repository\nDESCRIPTION: Clones the forked Beszel repository from GitHub to the local machine. This is the first step in setting up the local development environment to modify the codebase.\nSOURCE: https://github.com/henrygd/beszel-docs/blob/main/zh/guide/developer-guide.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/your_username/beszel.git\n```\n\n----------------------------------------\n\nTITLE: Verifying Docker Memory Usage with docker stats\nDESCRIPTION: This command displays resource usage statistics for Docker containers. If memory usage shows zero, it indicates an issue with cgroup memory accounting, requiring further configuration to resolve missing container statistics.\nSOURCE: https://github.com/henrygd/beszel-docs/blob/main/en/guide/common-issues.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ndocker stats\n```\n\n----------------------------------------\n\nTITLE: Create Agent Directory - Bash\nDESCRIPTION: Creates a directory named 'beszel-agent' and navigates into it. This directory is intended to store the docker-compose.yml file for the Beszel agent.\nSOURCE: https://github.com/henrygd/beszel-docs/blob/main/zh/guide/getting-started.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmkdir beszel-agent\ncd beszel-agent\n```\n\n----------------------------------------\n\nTITLE: Configuring VitePress Homepage with YAML\nDESCRIPTION: This YAML snippet configures the homepage for a VitePress documentation site. It sets the layout to 'home', defines the title and title template, configures the hero section with text, actions, and an image, and specifies a list of features with titles, details, and icons. Each feature highlights a key aspect of the Beszel project, such as its lightweight nature, simplicity, and Docker statistics tracking.\nSOURCE: https://github.com/henrygd/beszel-docs/blob/main/zh/index.md#_snippet_0\n\nLANGUAGE: YAML\nCODE:\n```\nlayout: home\n\ntitle: Beszel\ntitleTemplate: 轻量易用的服务器监控\n\nhero:\n  width: 1300\n  name: 'Beszel'\n  text: '轻量易用的服务器监控'\n  tagline: 包含 Docker 统计信息、历史数据和警报。\n  actions:\n    - theme: brand\n      text: 什么是 Beszel？\n      link: /zh/guide/what-is-beszel\n    - theme: alt\n      text: 快速入门\n      link: /zh/guide/getting-started\n    - theme: alt\n      text: GitHub\n      link: https://github.com/henrygd/beszel\n  image:\n    src: https://assets.henrygd.me/beszel/captures/dashboard.png\n    alt: 仪表板截图\n    width: 1423\n    height: 873\n\nfeatures:\n  - title: 轻量级\n    details: 比主要解决方案更小，资源占用更少。\n    icon: <svg width=\"32\" height=\"32\" viewBox=\"0 0 16 16\"><path fill=\"none\" stroke=\"#91d7e3\" stroke-linecap=\"round\" stroke-linejoin=\"round\" d=\"M1.5 5.5H6a2 2 0 1 0-2-2m-2.5 5H12A2.5 2.5 0 1 0 9.5 6m-2 7A1.5 1.5 0 1 0 9 11.5H5.5m-4 0h2\"/></svg>\n  - title: 简单\n    details: 易于设置，无需公网暴露。\n    icon: <svg width=\"32\" height=\"32\" viewBox=\"0 0 16 16\"><path fill=\"none\" stroke=\"#eed49f\" stroke-linecap=\"round\" stroke-linejoin=\"round\" d=\"M2.85 9.301a.644.65 0 0 1-.502-1.06L8.72 1.605a.322.325 0 0 1 .554.3L8.039 5.82a.644.65 0 0 0 .605.878h4.506a.644.65 0 0 1 .502 1.06L7.28 14.395a.322.325 0 0 1-.554-.3l1.236-3.916a.644.65 0 0 0-.605-.878Z\"/></svg>\n  - title: Docker / Podman 统计\n    details: 跟踪每个容器的 CPU、内存和网络使用历史。\n    icon: <svg width=\"32\" height=\"32\" viewBox=\"0 0 16 16\"><path fill=\"none\" stroke=\"#8aadf4\" stroke-linecap=\"round\" stroke-linejoin=\"round\" d=\"M.5 8.5H11l.75-.5a5.35 5.35 0 0 1 0-3.5c1 .6 1 1.88 1.74 2c.77-.09 1.23.01 2 .52c0 0-.97 1.77-2.5 1.98c-1.93 3.65-4.5 5.5-6.98 5.5C0 14.5.5 8.5.5 8.5m1 0v-2m0 0h8m-6 2v-4m0 0h4m-2-2h2m-2 6v-6m2 6v-6m2 6v-2\"/></svg>\n  - title: 警报\n    details: 可配置 CPU、内存、磁盘、带宽、温度和系统状态的警报。\n    icon: <svg width=\"32\" height=\"32\" viewBox=\"0 0 24 24\"><path fill=\"#f5a97f\" d=\"M5 19q-.4 0-.7-.3T4 18t.3-.7.7-.3h1v-7q0-2 1.3-3.7t3.2-2.1v-.7q0-.6.4-1T12 2t1 .4.5 1.1v.7q2 .5 3.3 2.1T18 10v7h1q.4 0 .7.3t.3.7-.3.7-.7.3zm7 3q-.8 0-1.4-.6T10 20h4q0 .8-.6 1.4T12 22m-4-5h8v-7q0-1.6-1.2-2.8T12 6 9.2 7.2 8 10zm-5-7q-.4 0-.7-.3T2 8.9q.2-1.8 1-3.5t2.2-2.8q.3-.2.7-.2t.7.4.2.7-.4.7q-1 1-1.6 2.2T4.1 9q0 .4-.4.7T3 10m18 0q-.4 0-.7-.3t-.4-.7q-.2-1.4-.8-2.6t-1.6-2.2q-.3-.3-.4-.7t.2-.8.7-.3.7.2Q20 3.8 21 5.4t1 3.5q.1.4-.2.8t-.7.3\"/></svg>\n  - title: 多用户\n    details: 每个用户管理自己的系统。管理员可以在用户之间共享系统。\n    icon: <svg width=\"32\" height=\"32\" viewBox=\"0 0 256 256\"><path fill=\"#f5bde6\" d=\"M244.8 150.4a8 8 0 0 1-11.2-1.6A51.6 51.6 0 0 0 192 128a8 8 0 0 1-7.4-4.9 8 8 0 0 1 0-6.2 8 8 0 0 1 7.4-4.9 24 24 0 1 0-23.2-30 8 8 0 1 1-15.5-4 40 40 0 1 1 65.7 39.5 68 68 0 0 1 27.4 21.7 8 8 0 0 1-1.6 11.2M190.9 212a8 8 0 1 1-13.8 8 57 57 0 0 0-98.2 0 8 8 0 1 1-13.8-8 72 72 0 0 1 33.7-30 48 48 0 1 1 58.4 0 72 72 0 0 1 33.7 30M128 176a32 32 0 1 0-32-32 32 32 0 0 0 32 32m-56-56a8 8 0 0 0-8-8 24 24 0 1 1 23.2-30 8 8 0 1 0 15.5-4A40 40 0 1 0 37 117.5a68 68 0 0 0-27.4 21.7 8 8 0 1 0 12.8 9.6A51.6 51.6 0 0 1 64 128a8 8 0 0 0 8-8\"/></svg>\n  - title: OAuth / OIDC\n    details: 支持多种 OAuth2 提供程序。可以禁用密码验证。\n    icon: <svg width=\"32\" height=\"32\" viewBox=\"0 0 16 16\"><g fill=\"none\" stroke=\"#cad3f5\" stroke-linecap=\"round\" stroke-linejoin=\"round\"><path d=\"M10 10.5a4.5 4.5 0 1 0-4.02-2.48L1.5 12.5v2h2v-2h2v-2h2l.48-.48c.6.3 1.3.48 2.02.48\"/><path d=\"M12 5a1 1 0 0 1-1 1a1 1 0 0 1-1-1a1 1 0 0 1 1-1a1 1 0 0 1 1 1\"/></g></svg>\n  - title: 自动备份\n    details: 从磁盘或 S3 兼容的存储保存和恢复数据。\n    icon: <svg width=\"32\" height=\"32\" viewBox=\"0 0 16 16\"><path fill=\"none\" stroke=\"#a6da95\" stroke-linecap=\"round\" stroke-linejoin=\"round\" d=\"M8 6.5c3.59 0 6.5-1.4 6.5-2.68S11.59 1.5 8 1.5S1.5 2.54 1.5 3.82S4.41 6.5 8 6.5M14.5 8c0 .83-1.24 1.79-3.25 2.2s-4.49.41-6.5 0S1.5 8.83 1.5 8m13 4.18c0 .83-1.24 1.6-3.25 2c-2.01.42-4.49.42-6.5 0c-2.01-.4-3.25-1.17-3.25-2m0-8.3v8.3m13-8.3v8.3\"/></svg>\n  - title: REST API\n    details: 在您自己的脚本和应用程序中使用或更新您的数据。\n    icon: <svg width=\"32\" height=\"32\" viewBox=\"0 0 16 16\"><path fill=\"none\" stroke=\"#c6a0f6\" stroke-linecap=\"round\" stroke-linejoin=\"round\" d=\"M5.5 12.5a2 2 0 1 1-4 0a2 2 0 0 1 4 0m9 0a2 2 0 1 1-4 0a2 2 0 0 1 4 0m-4.5-9a2 2 0 1 1-4 0a2 2 0 0 1 4 0m-6.5 7l3-5.5m3 0l3 5.5\"/></svg>\n\n```\n\n----------------------------------------\n\nTITLE: Displaying Superuser Options (Docker)\nDESCRIPTION: This command displays all available options for the `superuser` command within a Docker container. It is helpful for understanding the various flags and parameters that can be used with the `superuser` utility. The Docker container must be named `beszel`.\nSOURCE: https://github.com/henrygd/beszel-docs/blob/main/zh/guide/user-accounts.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndocker exec beszel /beszel superuser --help\n```\n\n----------------------------------------\n\nTITLE: Finding Filesystem Information with lsblk\nDESCRIPTION: This command lists block devices and their partitions. The output provides information about device names under the \"NAME\" column, which can be used as the `FILESYSTEM` environment variable value for configuring root disk stats in the agent.\nSOURCE: https://github.com/henrygd/beszel-docs/blob/main/en/guide/common-issues.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nlsblk\n```\n\n----------------------------------------\n\nTITLE: Displaying Superuser Options (Binary)\nDESCRIPTION: This command displays all available options for the `superuser` command using the Beszel binary. It helps users understand the flags and parameters available for the `superuser` utility. The `beszel` binary must be executable and in the current path.\nSOURCE: https://github.com/henrygd/beszel-docs/blob/main/zh/guide/user-accounts.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n./beszel superuser --help\n```\n\n----------------------------------------\n\nTITLE: Finding Filesystem Information with sudo fdisk -l\nDESCRIPTION: This command lists the partition tables for specified devices. The output shows \"Device\" names, which can be used to configure the `FILESYSTEM` environment variable for the agent to correctly track root disk stats.\nSOURCE: https://github.com/henrygd/beszel-docs/blob/main/en/guide/common-issues.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nsudo fdisk -l\n```\n\n----------------------------------------\n\nTITLE: Reading System Data using PocketBase JS SDK\nDESCRIPTION: This snippet demonstrates how to read data from the 'systems' collection in PocketBase using the JavaScript SDK. It authenticates a user, then retrieves a list of systems, filtering the results based on the 'status' and 'created' fields. It requires the PocketBase JS SDK.\nSOURCE: https://github.com/henrygd/beszel-docs/blob/main/en/guide/rest-api.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport PocketBase from 'pocketbase'\n\nconst pb = new PocketBase('http://localhost:8090')\n\n// authenticate as regular user\nconst userData = await pb.collection('users').authWithPassword('test@example.com', '123456')\n\n// list and filter system records\nconst systems = await pb.collection('systems').getList(1, 20, {\n filter: 'status = \"up\" && created > \"2024-06-01 10:00:00\"',\n})\n\nconsole.log(systems)\n```\n\n----------------------------------------\n\nTITLE: Starting the Beszel Hub\nDESCRIPTION: Starts the Beszel Hub process using the `make dev-hub` command. This is one of the three essential processes required for the project's development environment. It assumes that the user is in the `/beszel` directory.\nSOURCE: https://github.com/henrygd/beszel-docs/blob/main/zh/guide/developer-guide.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# 启动中心\nmake dev-hub\n```\n\n----------------------------------------\n\nTITLE: Reading Data from Systems Collection using PocketBase JS SDK\nDESCRIPTION: This code snippet demonstrates how to authenticate a user and retrieve a filtered list of systems from the 'systems' collection using the PocketBase JS SDK. It showcases authentication with a username and password, and filtering based on system status and creation date.\nSOURCE: https://github.com/henrygd/beszel-docs/blob/main/zh/guide/rest-api.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport PocketBase from 'pocketbase'\n\nconst pb = new PocketBase('http://localhost:8090')\n\n// 作为普通用户进行身份验证\nconst userData = await pb.collection('users').authWithPassword('test@example.com', '123456')\n\n// 列出并过滤系统记录\nconst systems = await pb.collection('systems').getList(1, 20, {\n filter: 'status = \"up\" && created > \"2024-06-01 10:00:00\"',\n})\n\nconsole.log(systems)\n```\n\n----------------------------------------\n\nTITLE: Superuser Help Command via Docker\nDESCRIPTION: This command executes the `superuser --help` command within a Docker container named 'beszel' to display available options for the superuser command. Docker must be installed and the 'beszel' container must be running.\nSOURCE: https://github.com/henrygd/beszel-docs/blob/main/en/guide/user-accounts.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndocker exec beszel /beszel superuser --help\n```\n\n----------------------------------------\n\nTITLE: Edit docker-compose.yml with Nano (Bash)\nDESCRIPTION: Opens the `docker-compose.yml` file for editing using the Nano text editor in the command line.\nSOURCE: https://github.com/henrygd/beszel-docs/blob/main/zh/guide/parts/hub-docker-instructions.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnano docker-compose.yml\n```\n\n----------------------------------------\n\nTITLE: Start Development Server with PNPM\nDESCRIPTION: Starts the development server for the Beszel documentation website using pnpm.  This command requires pnpm to be installed and the dependencies to be installed first.  It will typically watch files for changes and automatically reload the server.\nSOURCE: https://github.com/henrygd/beszel-docs/blob/main/readme.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\npnpm dev\n```\n\n----------------------------------------\n\nTITLE: Open docker-compose.yml in Vim\nDESCRIPTION: Opens the docker-compose.yml file in the Vim text editor, allowing users to edit and save the configuration.\nSOURCE: https://github.com/henrygd/beszel-docs/blob/main/en/guide/parts/hub-docker-instructions.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nvim docker-compose.yml\n```\n\n----------------------------------------\n\nTITLE: Start Development Server with Bun\nDESCRIPTION: Starts the development server for the Beszel documentation website using bun. This command requires bun to be installed and the dependencies to be installed first. It will typically watch files for changes and automatically reload the server.\nSOURCE: https://github.com/henrygd/beszel-docs/blob/main/readme.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nbun dev\n```\n\n----------------------------------------\n\nTITLE: Open docker-compose.yml in Nano\nDESCRIPTION: Opens the docker-compose.yml file in the Nano text editor. This allows users to paste the docker-compose configuration into the file.\nSOURCE: https://github.com/henrygd/beszel-docs/blob/main/en/guide/parts/hub-docker-instructions.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnano docker-compose.yml\n```\n\n----------------------------------------\n\nTITLE: Install Dependencies with Bun\nDESCRIPTION: Installs the necessary dependencies for the Beszel documentation website using the bun package manager. This command is executed in the terminal and requires bun to be installed.\nSOURCE: https://github.com/henrygd/beszel-docs/blob/main/readme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nbun i\n```\n\n----------------------------------------\n\nTITLE: Cross-Compilation Example (bash)\nDESCRIPTION: This snippet shows an example of how to use `make` to cross-compile the Beszel project for a specific operating system and architecture (FreeBSD ARM64).\nSOURCE: https://github.com/henrygd/beszel-docs/blob/main/en/guide/compiling.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nmake OS=freebsd ARCH=arm64\n```\n\n----------------------------------------\n\nTITLE: Update docker-compose.yml for Hub\nDESCRIPTION: This snippet updates the `docker-compose.yml` file for the Beszel Hub service. It replaces the `image` key with a `build` key, instructing Docker Compose to build the image from the Dockerfile in the current directory.\nSOURCE: https://github.com/henrygd/beszel-docs/blob/main/zh/guide/docker-shell.md#_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nbeszel:\n  image: henrygd/beszel # [!code --]\n  build: . # [!code ++]\n```\n\n----------------------------------------\n\nTITLE: Edit Docker Compose File (Nano)\nDESCRIPTION: Opens the `docker-compose.yml` file using the Nano text editor. This allows the user to paste the Docker Compose configuration provided in the Beszel admin interface, which defines the agent's services and dependencies.\nSOURCE: https://github.com/henrygd/beszel-docs/blob/main/en/guide/getting-started.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnano docker-compose.yml\n```\n\n----------------------------------------\n\nTITLE: Edit Docker Compose File (Emacs)\nDESCRIPTION: Opens the `docker-compose.yml` file using the Emacs text editor. This allows the user to paste the Docker Compose configuration provided in the Beszel admin interface, which defines the agent's services and dependencies.\nSOURCE: https://github.com/henrygd/beszel-docs/blob/main/en/guide/getting-started.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nemacs docker-compose.yml\n```\n\n----------------------------------------\n\nTITLE: Install Dependencies with PNPM\nDESCRIPTION: Installs the necessary dependencies for the Beszel documentation website using the pnpm package manager. This command is executed in the terminal and requires pnpm to be installed.\nSOURCE: https://github.com/henrygd/beszel-docs/blob/main/readme.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npnpm i\n```\n\n----------------------------------------\n\nTITLE: Build Website with PNPM\nDESCRIPTION: Builds the Beszel documentation website using pnpm. This command compiles the source files into static assets, typically for deployment. Pnpm and the project dependencies must be installed prior to running this command.\nSOURCE: https://github.com/henrygd/beszel-docs/blob/main/readme.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\npnpm run build\n```\n\n----------------------------------------\n\nTITLE: Build Website with Bun\nDESCRIPTION: Builds the Beszel documentation website using bun. This command compiles the source files into static assets, typically for deployment. Bun and the project dependencies must be installed prior to running this command.\nSOURCE: https://github.com/henrygd/beszel-docs/blob/main/readme.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nbun run build\n```\n\n----------------------------------------\n\nTITLE: Cloning Beszel Repository (Bash)\nDESCRIPTION: This snippet clones the Beszel repository from GitHub using `git clone` and navigates into the `beszel/beszel` directory. The `--branch` option specifies the version to clone, and `--depth 1` creates a shallow clone.\nSOURCE: https://github.com/henrygd/beszel-docs/blob/main/zh/guide/compiling.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone --branch v{{pkg.version}} --depth 1 https://github.com/henrygd/beszel.git\ncd beszel/beszel\n```"
  }
]