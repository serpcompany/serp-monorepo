[
  {
    "owner": "zarr-developers",
    "repo": "zarr-python",
    "content": "TITLE: Creating Basic Zarr Array\nDESCRIPTION: Creates a 6x6 integer array with 2x2 chunks stored in a specified location.\nSOURCE: https://github.com/zarr-developers/zarr-python/blob/main/docs/user-guide/arrays.rst#2025-04-16_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nz = zarr.create_array(store='data/example-18.zarr', shape=(6, 6), dtype=int, chunks=(2, 2))\n```\n\n----------------------------------------\n\nTITLE: Creating and Populating a Basic 2D Zarr Array\nDESCRIPTION: Creates a 2D Zarr array with specified shape, chunks, and data type, then fills it with random data. This demonstrates the basic array creation workflow in Zarr.\nSOURCE: https://github.com/zarr-developers/zarr-python/blob/main/docs/quickstart.rst#2025-04-16_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport zarr\nimport numpy as np\n\n# Create a 2D Zarr array\nz = zarr.create_array(\n   store=\"data/example-1.zarr\",\n   shape=(100, 100),\n   chunks=(10, 10),\n   dtype=\"f4\"\n)\n\n# Assign data to the array\nz[:, :] = np.random.random((100, 100))\nz.info\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Zarr Array\nDESCRIPTION: Creates a 2D array of integers using Zarr with specified shape and chunk size, storing data in memory.\nSOURCE: https://github.com/zarr-developers/zarr-python/blob/main/docs/user-guide/arrays.rst#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport zarr\nstore = zarr.storage.MemoryStore()\nz = zarr.create_array(store=store, shape=(10000, 10000), chunks=(1000, 1000), dtype='int32')\n```\n\n----------------------------------------\n\nTITLE: Mask Selection in Zarr Arrays\nDESCRIPTION: Demonstrates boolean mask-based selection in both 1D and 2D Zarr arrays using get_mask_selection and set_mask_selection methods.\nSOURCE: https://github.com/zarr-developers/zarr-python/blob/main/docs/user-guide/arrays.rst#2025-04-16_snippet_7\n\nLANGUAGE: Python\nCODE:\n```\ndata = np.arange(15).reshape(3, 5)\nz = zarr.create_array(store='data/example-13.zarr', shape=data.shape, dtype=data.dtype)\nz[:] = data\nsel = np.zeros_like(z, dtype=bool)\nsel[0, 1] = True\nsel[2, 3] = True\nz.get_mask_selection(sel)\nz.set_mask_selection(sel, [-1, -2])\n```\n\n----------------------------------------\n\nTITLE: Coordinate Selection in 1D Zarr Arrays\nDESCRIPTION: Demonstrates coordinate-based indexing in a 1D Zarr array using both get_coordinate_selection and set_coordinate_selection methods.\nSOURCE: https://github.com/zarr-developers/zarr-python/blob/main/docs/user-guide/arrays.rst#2025-04-16_snippet_5\n\nLANGUAGE: Python\nCODE:\n```\ndata = np.arange(10) ** 2\nz = zarr.create_array(store='data/example-10.zarr', shape=data.shape, dtype=data.dtype)\nz[:] = data\nz.get_coordinate_selection([2, 5])\nz.set_coordinate_selection([2, 5], [-1, -2])\n```\n\n----------------------------------------\n\nTITLE: Creating Hierarchical Groups and Arrays in Zarr\nDESCRIPTION: Demonstrates how to create nested groups and arrays in a hierarchical structure, similar to directories and files. Shows how to initialize arrays within groups and assign data to them.\nSOURCE: https://github.com/zarr-developers/zarr-python/blob/main/docs/quickstart.rst#2025-04-16_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n# Create nested groups and add arrays\nroot = zarr.group(\"data/example-2.zarr\")\nfoo = root.create_group(name=\"foo\")\nbar = root.create_array(\n    name=\"bar\", shape=(100, 10), chunks=(10, 10), dtype=\"f4\"\n)\nspam = foo.create_array(name=\"spam\", shape=(10,), dtype=\"i4\")\n\n# Assign values\nbar[:, :] = np.random.random((100, 10))\nspam[:] = np.arange(10)\n\n# print the hierarchy\nroot.tree()\n```\n\n----------------------------------------\n\nTITLE: Block Selection Operations\nDESCRIPTION: Demonstrates setting values for blocks of array elements using set_block_selection and the blocks property.\nSOURCE: https://github.com/zarr-developers/zarr-python/blob/main/docs/user-guide/arrays.rst#2025-04-16_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nz.set_block_selection((1, 0), 1)\nz.blocks[:, 2] = 7\nz.blocks[2, 1:3]\n```\n\n----------------------------------------\n\nTITLE: Creating Persistent Zarr Array\nDESCRIPTION: Shows how to create a Zarr array that persists to disk storage rather than memory.\nSOURCE: https://github.com/zarr-developers/zarr-python/blob/main/docs/user-guide/arrays.rst#2025-04-16_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nz1 = zarr.create_array(store='data/example-1.zarr', shape=(10000, 10000), chunks=(1000, 1000), dtype='int32')\n```\n\n----------------------------------------\n\nTITLE: Reading and Writing Zarr Array Data\nDESCRIPTION: Demonstrates various ways to read and write data to a Zarr array using NumPy-style indexing.\nSOURCE: https://github.com/zarr-developers/zarr-python/blob/main/docs/user-guide/arrays.rst#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nz[:] = 42\nz[0, :] = np.arange(10000)\nz[:, 0] = np.arange(10000)\n```\n\n----------------------------------------\n\nTITLE: Basic Group Creation and Management in Zarr\nDESCRIPTION: Demonstrates creating and accessing groups in Zarr using memory storage, including nested group creation and array initialization.\nSOURCE: https://github.com/zarr-developers/zarr-python/blob/main/docs/user-guide/groups.rst#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport zarr\nstore = zarr.storage.MemoryStore()\nroot = zarr.create_group(store=store)\nfoo = root.create_group('foo')\nbar = foo.create_group('bar')\nz1 = bar.create_array(name='baz', shape=(10000, 10000), chunks=(1000, 1000), dtype='int32')\n```\n\n----------------------------------------\n\nTITLE: Using Cloud Storage with Zarr\nDESCRIPTION: Demonstrates how to use Zarr with cloud object storage like Amazon S3 using the s3fs library. This shows how to create and populate an array stored in a cloud bucket.\nSOURCE: https://github.com/zarr-developers/zarr-python/blob/main/docs/quickstart.rst#2025-04-16_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nimport s3fs # doctest: +SKIP\n\nz = zarr.create_array(\"s3://example-bucket/foo\", mode=\"w\", shape=(100, 100), chunks=(10, 10), dtype=\"f4\") # doctest: +SKIP\nz[:, :] = np.random.random((100, 100)) # doctest: +SKIP\n```\n\n----------------------------------------\n\nTITLE: Creating a Compressed Zarr Array with Blosc\nDESCRIPTION: Demonstrates how to create a Zarr array with compression using the Blosc codec with Zstandard algorithm, specifying compression level and shuffle filter for better compression efficiency.\nSOURCE: https://github.com/zarr-developers/zarr-python/blob/main/docs/quickstart.rst#2025-04-16_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nz = zarr.create_array(\n   \"data/example-3.zarr\",\n   mode=\"w\", shape=(100, 100),\n   chunks=(10, 10), dtype=\"f4\",\n   compressors=zarr.codecs.BloscCodec(cname=\"zstd\", clevel=3, shuffle=zarr.codecs.BloscShuffle.shuffle)\n)\nz[:, :] = np.random.random((100, 100))\n\nz.info\n```\n\n----------------------------------------\n\nTITLE: Using ZipStore for Single-File Zarr Storage\nDESCRIPTION: Shows how to create and use a ZipStore to save Zarr arrays in a single ZIP file. This demonstrates creating an array in the ZIP file, writing data to it, and properly closing the store.\nSOURCE: https://github.com/zarr-developers/zarr-python/blob/main/docs/quickstart.rst#2025-04-16_snippet_8\n\nLANGUAGE: python\nCODE:\n```\n# Store the array in a ZIP file\nstore = zarr.storage.ZipStore(\"data/example-3.zip\", mode='w')\n\nz = zarr.create_array(\n    store=store,\n    mode=\"w\",\n    shape=(100, 100),\n    chunks=(10, 10),\n    dtype=\"f4\"\n)\n\n# write to the array\nz[:, :] = np.random.random((100, 100))\n\n# the ZipStore must be explicitly closed\nstore.close()\n```\n\n----------------------------------------\n\nTITLE: Opening an Existing Zarr Array from a ZIP File\nDESCRIPTION: Demonstrates how to open an existing Zarr array from a ZIP file in read-only mode and access its data. This shows how to use ZipStore for reading previously saved arrays.\nSOURCE: https://github.com/zarr-developers/zarr-python/blob/main/docs/quickstart.rst#2025-04-16_snippet_9\n\nLANGUAGE: python\nCODE:\n```\n# Open the ZipStore in read-only mode\nstore = zarr.storage.ZipStore(\"data/example-3.zip\", read_only=True)\n\nz = zarr.open_array(store, mode='r')\n\n# read the data as a NumPy Array\nz[:]\n```\n\n----------------------------------------\n\nTITLE: Coordinate Selection in 2D Zarr Arrays\nDESCRIPTION: Shows how to perform coordinate-based indexing in multidimensional Zarr arrays, including using the vindex property for convenient access.\nSOURCE: https://github.com/zarr-developers/zarr-python/blob/main/docs/user-guide/arrays.rst#2025-04-16_snippet_6\n\nLANGUAGE: Python\nCODE:\n```\ndata = np.arange(15).reshape(3, 5)\nz = zarr.create_array(store='data/example-11.zarr', shape=data.shape, dtype=data.dtype)\nz[:] = data\nz.get_coordinate_selection(([0, 2], [1, 3]))\nz.set_coordinate_selection(([0, 2], [1, 3]), [-1, -2])\nz.vindex[[0, 2], [1, 3]]\nz.vindex[[0, 2], [1, 3]] = [-3, -4]\n```\n\n----------------------------------------\n\nTITLE: Mask Indexing of Multi-dimensional Zarr Arrays\nDESCRIPTION: Demonstrates mask indexing of multi-dimensional Zarr arrays using boolean arrays.\nSOURCE: https://github.com/zarr-developers/zarr-python/blob/main/notebooks/advanced_indexing.ipynb#2025-04-16_snippet_7\n\nLANGUAGE: python\nCODE:\n```\na = np.arange(15).reshape(5, 3)\nza = zarr.array(a, chunks=(3, 2))\nza[:]\n```\n\nLANGUAGE: python\nCODE:\n```\nix = np.zeros_like(a, dtype=bool)\nix[1, 0] = True\nix[3, 2] = True\nza.get_mask_selection(ix)\n```\n\nLANGUAGE: python\nCODE:\n```\nza.vindex[ix]\n```\n\nLANGUAGE: python\nCODE:\n```\nza.set_mask_selection(ix, 42)\nza[:]\n```\n\nLANGUAGE: python\nCODE:\n```\nza.vindex[ix] = 44\nza[:]\n```\n\n----------------------------------------\n\nTITLE: Indexing 1D Zarr Array with Integer Coordinates\nDESCRIPTION: Shows how to index a 1D Zarr array using integer coordinates with vindex and oindex methods.\nSOURCE: https://github.com/zarr-developers/zarr-python/blob/main/notebooks/advanced_indexing.ipynb#2025-04-16_snippet_2\n\nLANGUAGE: python\nCODE:\n```\na = np.arange(10)\nza = zarr.array(a, chunks=2)\nix = [1, 3, 5, 7, 9]\n```\n\nLANGUAGE: python\nCODE:\n```\n# get items\nza.vindex[ix]\n```\n\nLANGUAGE: python\nCODE:\n```\n# get items\nza.oindex[ix]\n```\n\nLANGUAGE: python\nCODE:\n```\n# set items\nza.vindex[ix] = a[ix] * 10\nza[:]\n```\n\nLANGUAGE: python\nCODE:\n```\n# set items\nza.oindex[ix] = a[ix] * 100\nza[:]\n```\n\n----------------------------------------\n\nTITLE: Installing Zarr using conda\nDESCRIPTION: Command to install Zarr Python library using conda package manager from the conda-forge channel. Note that conda does not support optional dependency groups.\nSOURCE: https://github.com/zarr-developers/zarr-python/blob/main/docs/user-guide/installation.rst#2025-04-16_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ conda install -c conda-forge zarr\n```\n\n----------------------------------------\n\nTITLE: Creating Zarr Group with Arrays\nDESCRIPTION: Creates a Zarr group containing multiple arrays with different shapes and data types, demonstrating hierarchical data organization.\nSOURCE: https://github.com/zarr-developers/zarr-python/blob/main/docs/user-guide/arrays.rst#2025-04-16_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nroot = zarr.create_group('data/example-19.zarr')\nfoo = root.create_array(name='foo', shape=(1000, 100), chunks=(10, 10), dtype='float32')\nbar = root.create_array(name='foo/bar', shape=(100,), dtype='int32')\nfoo[:, :] = np.random.random((1000, 100))\nbar[:] = np.arange(100)\nroot.tree()\n```\n\n----------------------------------------\n\nTITLE: Selecting Fields from Structured Dtype Zarr Arrays\nDESCRIPTION: Shows how to select specific fields from Zarr arrays with structured dtypes using various indexing methods.\nSOURCE: https://github.com/zarr-developers/zarr-python/blob/main/notebooks/advanced_indexing.ipynb#2025-04-16_snippet_8\n\nLANGUAGE: python\nCODE:\n```\na = np.array([(b'aaa', 1, 4.2),\n              (b'bbb', 2, 8.4),\n              (b'ccc', 3, 12.6)], \n             dtype=[('foo', 'S3'), ('bar', 'i4'), ('baz', 'f8')])\nza = zarr.array(a, chunks=2, fill_value=None)\nza[:]\n```\n\nLANGUAGE: python\nCODE:\n```\nza['foo']\n```\n\nLANGUAGE: python\nCODE:\n```\nza['foo', 'baz']\n```\n\nLANGUAGE: python\nCODE:\n```\nza[:2, 'foo']\n```\n\nLANGUAGE: python\nCODE:\n```\nza[:2, 'foo', 'baz']\n```\n\nLANGUAGE: python\nCODE:\n```\nza.oindex[[0, 2], 'foo']\n```\n\nLANGUAGE: python\nCODE:\n```\nza.vindex[[0, 2], 'foo']\n```\n\nLANGUAGE: python\nCODE:\n```\nza['bar'] = 42\nza[:]\n```\n\nLANGUAGE: python\nCODE:\n```\nza[:2, 'bar'] = 84\nza[:]\n```\n\nLANGUAGE: python\nCODE:\n```\na['foo', 'baz']\n```\n\nLANGUAGE: python\nCODE:\n```\na[['foo', 'baz']]\n```\n\nLANGUAGE: python\nCODE:\n```\nza['foo', 'baz']\n```\n\nLANGUAGE: python\nCODE:\n```\nza[['foo', 'baz']]\n```\n\n----------------------------------------\n\nTITLE: Creating Zarr Arrays with Different Chunk Shapes in Python\nDESCRIPTION: Demonstrates creating Zarr arrays with various chunk shapes, including full dimension chunks, auto-chunking, and no chunking. This snippet illustrates how to optimize chunk shape based on expected access patterns.\nSOURCE: https://github.com/zarr-developers/zarr-python/blob/main/docs/user-guide/performance.rst#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n>>> import zarr\n>>> z1 = zarr.create_array(store={}, shape=(10000, 10000), chunks=(100, 10000), dtype='int32')\n>>> z1.chunks\n(100, 10000)\n\n>>> z2 = zarr.create_array(store={}, shape=(10000, 10000), chunks=(10000, 100), dtype='int32')\n>>> z2.chunks\n(10000, 100)\n\n>>> z3 = zarr.create_array(store={}, shape=(10000, 10000), chunks=(1000, 1000), dtype='int32')\n>>> z3.chunks\n(1000, 1000)\n\n>>> z4 = zarr.create_array(store={}, shape=(10000, 10000), chunks='auto', dtype='int32')\n>>> z4.chunks\n(625, 625)\n\n>>> z5 = zarr.create_array(store={}, shape=(10000, 10000), chunks=(10000, 10000), dtype='int32')\n>>> z5.chunks\n(10000, 10000)\n```\n\n----------------------------------------\n\nTITLE: Enabling GPU Support in Zarr\nDESCRIPTION: Demonstrates how to enable GPU support in Zarr and create an array that returns CuPy arrays instead of NumPy arrays. This code shows the configuration process and creation of a GPU-enabled Zarr array.\nSOURCE: https://github.com/zarr-developers/zarr-python/blob/main/docs/user-guide/gpu.rst#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n>>> import zarr\n>>> import cupy as cp  # doctest: +SKIP\n>>> zarr.config.enable_gpu()  # doctest: +SKIP\n>>> store = zarr.storage.MemoryStore()  # doctest: +SKIP\n>>> z = zarr.create_array(  # doctest: +SKIP\n...     store=store, shape=(100, 100), chunks=(10, 10), dtype=\"float32\",\n... )\n>>> type(z[:10, :10])  # doctest: +SKIP\ncupy.ndarray\n```\n\n----------------------------------------\n\nTITLE: Configuring Zarr Array Compression\nDESCRIPTION: Demonstrates how to create a Zarr array with custom compression settings using the Blosc codec.\nSOURCE: https://github.com/zarr-developers/zarr-python/blob/main/docs/user-guide/arrays.rst#2025-04-16_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ncompressors = zarr.codecs.BloscCodec(cname='zstd', clevel=3, shuffle=zarr.codecs.BloscShuffle.bitshuffle)\ndata = np.arange(100000000, dtype='int32').reshape(10000, 10000)\nz = zarr.create_array(store='data/example-5.zarr', shape=data.shape, dtype=data.dtype, chunks=(1000, 1000), compressors=compressors)\n```\n\n----------------------------------------\n\nTITLE: Implicit Store Creation in Zarr-Python\nDESCRIPTION: Demonstrates creating different types of stores implicitly using Zarr's top-level API. Includes examples for LocalStore, FsspecStore, and MemoryStore.\nSOURCE: https://github.com/zarr-developers/zarr-python/blob/main/docs/user-guide/storage.rst#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n>>> import zarr\n>>>\n>>> # Implicitly create a writable LocalStore\n>>> zarr.create_group(store='data/foo/bar')\n<Group file://data/foo/bar>\n>>>\n>>> # Implicitly create a read-only FsspecStore\n>>> zarr.open_group(\n...    store='s3://noaa-nwm-retro-v2-zarr-pds',\n...    mode='r',\n...    storage_options={'anon': True}\n... )\n<Group <FsspecStore(S3FileSystem, noaa-nwm-retro-v2-zarr-pds)>>\n>>>\n>>> # Implicitly creates a MemoryStore\n>>> data = {}\n>>> zarr.create_group(store=data)\n<Group memory://...>\n```\n\n----------------------------------------\n\nTITLE: Implementing Delta Filter with Blosc Compression in Zarr\nDESCRIPTION: Example showing how to configure and use a delta filter with Blosc compression for improved data compression ratios. Uses Delta filter from numcodecs and Blosc compressor with zstd algorithm.\nSOURCE: https://github.com/zarr-developers/zarr-python/blob/main/docs/user-guide/arrays.rst#2025-04-16_snippet_4\n\nLANGUAGE: Python\nCODE:\n```\nfrom numcodecs.zarr3 import Delta\n\nfilters = [Delta(dtype='int32')]\ncompressors = zarr.codecs.BloscCodec(cname='zstd', clevel=1, shuffle=zarr.codecs.BloscShuffle.shuffle)\ndata = np.arange(100000000, dtype='int32').reshape(10000, 10000)\nz = zarr.create_array(store='data/example-9.zarr', shape=data.shape, dtype=data.dtype, chunks=(1000, 1000), filters=filters, compressors=compressors)\n```\n\n----------------------------------------\n\nTITLE: Batch Creation of Zarr Hierarchies and Copying to New Storage\nDESCRIPTION: Shows how to create a collection of arrays and groups with a single function call and copy existing hierarchies to a new storage backend. This demonstrates the hierarchy creation utilities in Zarr.\nSOURCE: https://github.com/zarr-developers/zarr-python/blob/main/docs/quickstart.rst#2025-04-16_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n# Create nested groups and add arrays\nroot = zarr.group(\"data/example-3.zarr\", attributes={'name': 'root'})\nfoo = root.create_group(name=\"foo\")\nbar = root.create_array(\n    name=\"bar\", shape=(100, 10), chunks=(10, 10), dtype=\"f4\"\n)\nnodes = {'': root.metadata} | {k: v.metadata for k,v in root.members()}\nprint(nodes)\nfrom zarr.storage import MemoryStore\nnew_nodes = dict(zarr.create_hierarchy(store=MemoryStore(), nodes=nodes))\nnew_root = new_nodes['']\nassert new_root.attrs == root.attrs\n```\n\n----------------------------------------\n\nTITLE: Setting Configuration Values in Zarr Python\nDESCRIPTION: Demonstrates how to set configuration values in Zarr using the zarr.config.set() method. The example shows setting the array order to 'F' (Fortran-style) and then reverting it back to 'C' (C-style).\nSOURCE: https://github.com/zarr-developers/zarr-python/blob/main/docs/user-guide/config.rst#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n>>> import zarr\n>>>\n>>> zarr.config.set({'array.order': 'F'})\n<donfig.config_obj.ConfigSet object at ...>\n>>>\n>>> # revert this change so it doesn't impact the rest of the docs\n>>> zarr.config.set({'array.order': 'C'})\n<donfig.config_obj.ConfigSet object at ...>\n```\n\n----------------------------------------\n\nTITLE: File-based Group Operations in Zarr\nDESCRIPTION: Shows how to create and manage groups stored in the filesystem using zarr.open_group().\nSOURCE: https://github.com/zarr-developers/zarr-python/blob/main/docs/user-guide/groups.rst#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nroot = zarr.open_group('data/group.zarr', mode='w')\nz = root.create_array(name='foo/bar/baz', shape=(10000, 10000), chunks=(1000, 1000), dtype='int32')\n```\n\n----------------------------------------\n\nTITLE: Creating Sharded Zarr Array\nDESCRIPTION: Creates a large 10000x10000 array using sharding to optimize storage, with multiple chunks stored in single storage objects.\nSOURCE: https://github.com/zarr-developers/zarr-python/blob/main/docs/user-guide/arrays.rst#2025-04-16_snippet_13\n\nLANGUAGE: python\nCODE:\n```\na = zarr.create_array('data/example-20.zarr', shape=(10000, 10000), shards=(1000, 1000), chunks=(100, 100), dtype='uint8')\na[:] = (np.arange(10000 * 10000) % 256).astype('uint8').reshape(10000, 10000)\na.info_complete()\n```\n\n----------------------------------------\n\nTITLE: Creating a Sharded Zarr Array in Python\nDESCRIPTION: Shows how to create a Zarr array with sharding enabled. Sharding allows storing multiple chunks in a single storage object, which can be beneficial for large arrays with small chunks.\nSOURCE: https://github.com/zarr-developers/zarr-python/blob/main/docs/user-guide/performance.rst#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n>>> z6 = zarr.create_array(store={}, shape=(10000, 10000, 1000), shards=(1000, 1000, 1000), chunks=(100, 100, 100), dtype='uint8')\n>>> z6.info\nType               : Array\nZarr format        : 3\nData type          : DataType.uint8\nShape              : (10000, 10000, 1000)\nShard shape        : (1000, 1000, 1000)\nChunk shape        : (100, 100, 100)\nOrder              : C\nRead-only          : False\nStore type         : MemoryStore\nFilters            : ()\nSerializer         : BytesCodec(endian=<Endian.little: 'little'>)\nCompressors        : (ZstdCodec(level=0, checksum=False),)\nNo. bytes          : 100000000000 (93.1G)\n```\n\n----------------------------------------\n\nTITLE: Performing 2D Selection on Dask Array in Python\nDESCRIPTION: This snippet performs a 2D selection on the Dask array using the previously defined conditions. It demonstrates complex indexing operations on distributed arrays.\nSOURCE: https://github.com/zarr-developers/zarr-python/blob/main/notebooks/dask_2d_subset.ipynb#2025-04-16_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n%time gd_sel = gd[dim0_condition][:, dim1_indices]\ngd_sel\n```\n\n----------------------------------------\n\nTITLE: Creating and Using FsspecStore in Zarr-Python\nDESCRIPTION: Demonstrates creating a FsspecStore for a remote S3 bucket and opening a group with it. The store is set to read-only mode.\nSOURCE: https://github.com/zarr-developers/zarr-python/blob/main/docs/user-guide/storage.rst#2025-04-16_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n>>> store = zarr.storage.FsspecStore.from_url(\n...    's3://noaa-nwm-retro-v2-zarr-pds',\n...    read_only=True,\n...    storage_options={'anon': True}\n... )\n>>> zarr.open_group(store=store, mode='r')\n<Group <FsspecStore(S3FileSystem, noaa-nwm-retro-v2-zarr-pds)>>\n```\n\n----------------------------------------\n\nTITLE: Creating and Using LocalStore in Zarr-Python\nDESCRIPTION: Demonstrates explicit creation of a LocalStore and opening a group with it. The store is set to read-only mode.\nSOURCE: https://github.com/zarr-developers/zarr-python/blob/main/docs/user-guide/storage.rst#2025-04-16_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n>>> store = zarr.storage.LocalStore('data/foo/bar', read_only=True)\n>>> zarr.open_group(store=store, mode='r')\n<Group file://data/foo/bar>\n```\n\n----------------------------------------\n\nTITLE: Accessing a Specific Array from Zarr Group in Python\nDESCRIPTION: This snippet selects a specific array ('3R/calldata/genotype') from the previously opened Zarr group. It shows how to access nested data within a Zarr structure.\nSOURCE: https://github.com/zarr-developers/zarr-python/blob/main/notebooks/dask_2d_subset.ipynb#2025-04-16_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ng = callset['3R/calldata/genotype']\ng\n```\n\n----------------------------------------\n\nTITLE: Importing Codecs in Zarr-Python 3\nDESCRIPTION: In Zarr-Python 3, codecs should be imported directly from numcodecs instead of zarr. This snippet demonstrates the new import method for the Blosc codec.\nSOURCE: https://github.com/zarr-developers/zarr-python/blob/main/docs/user-guide/v3_migration.rst#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom numcodecs import Blosc\n# instead of:\n# from zarr import Blosc\n```\n\n----------------------------------------\n\nTITLE: Orthogonal Indexing in Zarr Arrays\nDESCRIPTION: Shows orthogonal indexing capabilities in Zarr arrays, allowing independent selection along each dimension using the oindex property.\nSOURCE: https://github.com/zarr-developers/zarr-python/blob/main/docs/user-guide/arrays.rst#2025-04-16_snippet_8\n\nLANGUAGE: Python\nCODE:\n```\ndata = np.arange(15).reshape(3, 5)\nz = zarr.create_array(store='data/example-15.zarr', shape=data.shape, dtype=data.dtype)\nz[:] = data\nz.oindex[[0, 2], :]\nz.oindex[:, [1, 3]]\nz.oindex[[0, 2], [1, 3]]\nz.oindex[[0, 2], [1, 3]] = [[-1, -2], [-3, -4]]\n```\n\n----------------------------------------\n\nTITLE: Comparing Write Performance with Empty Chunk Optimization in Zarr\nDESCRIPTION: Demonstrates the effect of the write_empty_chunks flag on write performance and storage efficiency for Zarr arrays. This optimization can be beneficial when dealing with sparse data.\nSOURCE: https://github.com/zarr-developers/zarr-python/blob/main/docs/user-guide/performance.rst#2025-04-16_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n>>> import zarr\n>>> import numpy as np\n>>> import time\n>>>\n>>> def timed_write(write_empty_chunks):\n...     \"\"\"\n...     Measure the time required and number of objects created when writing\n...     to a Zarr array with random ints or fill value.\n...     \"\"\"\n...     chunks = (8192,)\n...     shape = (chunks[0] * 1024,)\n...     data = np.random.randint(0, 255, shape)\n...     dtype = 'uint8'\n...     arr = zarr.create_array(\n...         f'data/example-{write_empty_chunks}.zarr',\n...         shape=shape,\n...         chunks=chunks,\n...         dtype=dtype,\n...         fill_value=0,\n...         config={'write_empty_chunks': write_empty_chunks}\n...      )\n...     # initialize all chunks\n...     arr[:] = 100\n...     result = []\n...     for value in (data, arr.fill_value):\n...         start = time.time()\n...         arr[:] = value\n...         elapsed = time.time() - start\n...         result.append((elapsed, arr.nchunks_initialized))\n...     return result\n... # log results\n>>> for write_empty_chunks in (True, False):\n...     full, empty = timed_write(write_empty_chunks)\n...     print(f'\\nwrite_empty_chunks={write_empty_chunks}:\\n\\tRandom Data: {full[0]:.4f}s, {full[1]} objects stored\\n\\t Empty Data: {empty[0]:.4f}s, {empty[1]} objects stored\\n')\nwrite_empty_chunks=True:\n\tRandom Data: ..., 1024 objects stored\n\t Empty Data: ...s, 1024 objects stored\n\nwrite_empty_chunks=False:\n\tRandom Data: ...s, 1024 objects stored\n\t Empty Data: ...s, 0 objects stored\n```\n\n----------------------------------------\n\nTITLE: Computing a Slice from the Selected Dask Array in Python\nDESCRIPTION: This code computes and loads a slice from the previously selected Dask array. It shows how to materialize a portion of a distributed array computation.\nSOURCE: https://github.com/zarr-developers/zarr-python/blob/main/notebooks/dask_2d_subset.ipynb#2025-04-16_snippet_7\n\nLANGUAGE: python\nCODE:\n```\n%time gd_sel[1000000:1100000].compute(optimize_graph=False)\n```\n\n----------------------------------------\n\nTITLE: Working with Nested Groups and Consolidated Metadata\nDESCRIPTION: Shows how to create and work with nested groups using consolidated metadata. Creates a hierarchy of groups and demonstrates metadata consolidation across levels.\nSOURCE: https://github.com/zarr-developers/zarr-python/blob/main/docs/user-guide/consolidated_metadata.rst#2025-04-16_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nchild = group.create_group('child', attributes={'kind': 'child'})\ngrandchild = child.create_group('child', attributes={'kind': 'grandchild'})\nconsolidated = zarr.consolidate_metadata(store)\n\nconsolidated['child'].metadata.consolidated_metadata\n```\n\n----------------------------------------\n\nTITLE: Creating and Using ObjectStore with S3Store in Zarr-Python\nDESCRIPTION: Shows how to create an ObjectStore with an S3Store backend for accessing remote data, and opening a group with it.\nSOURCE: https://github.com/zarr-developers/zarr-python/blob/main/docs/user-guide/storage.rst#2025-04-16_snippet_7\n\nLANGUAGE: python\nCODE:\n```\n>>> from zarr.storage import ObjectStore\n>>> from obstore.store import S3Store\n>>>\n>>> s3_store = S3Store('noaa-nwm-retro-v2-zarr-pds', skip_signature=True, region=\"us-west-2\")\n>>> store = zarr.storage.ObjectStore(store=s3_store, read_only=True)\n>>> group = zarr.open_group(store=store, mode='r')\n>>> group.info\nName        :\nType        : Group\nZarr format : 2\nRead-only   : True\nStore type  : ObjectStore\nNo. members : 12\nNo. arrays  : 12\nNo. groups  : 0\n```\n\n----------------------------------------\n\nTITLE: Creating and Using ZipStore in Zarr-Python\nDESCRIPTION: Shows how to create a ZipStore and use it to create a Zarr array. The store is created in write mode.\nSOURCE: https://github.com/zarr-developers/zarr-python/blob/main/docs/user-guide/storage.rst#2025-04-16_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n>>> store = zarr.storage.ZipStore('data.zip', mode='w')\n>>> zarr.create_array(store=store, shape=(2,), dtype='float64')\n<Array zip://data.zip shape=(2,) dtype=float64>\n```\n\n----------------------------------------\n\nTITLE: Orthogonal Indexing of Multi-dimensional Zarr Arrays\nDESCRIPTION: Demonstrates orthogonal (outer) indexing of multi-dimensional Zarr arrays using boolean and integer arrays.\nSOURCE: https://github.com/zarr-developers/zarr-python/blob/main/notebooks/advanced_indexing.ipynb#2025-04-16_snippet_5\n\nLANGUAGE: python\nCODE:\n```\na = np.arange(15).reshape(5, 3)\nza = zarr.array(a, chunks=(3, 2))\nza[:]\n```\n\nLANGUAGE: python\nCODE:\n```\n# orthogonal indexing with Boolean arrays\nix0 = [False, True, False, True, False]\nix1 = [True, False, True]\nza.get_orthogonal_selection((ix0, ix1))\n```\n\nLANGUAGE: python\nCODE:\n```\n# alternative API\nza.oindex[ix0, ix1]\n```\n\nLANGUAGE: python\nCODE:\n```\n# orthogonal indexing with integer arrays\nix0 = [1, 3]\nix1 = [0, 2]\nza.get_orthogonal_selection((ix0, ix1))\n```\n\nLANGUAGE: python\nCODE:\n```\n# alternative API\nza.oindex[ix0, ix1]\n```\n\nLANGUAGE: python\nCODE:\n```\n# combine with slice\nza.oindex[[1,  3], :]\n```\n\nLANGUAGE: python\nCODE:\n```\n# combine with slice\nza.oindex[:, [0, 2]]\n```\n\nLANGUAGE: python\nCODE:\n```\n# set items via Boolean selection\nix0 = [False, True, False, True, False]\nix1 = [True, False, True]\nselection = ix0, ix1\nvalue = 42\nza.set_orthogonal_selection(selection, value)\nza[:]\n```\n\nLANGUAGE: python\nCODE:\n```\n# alternative API\nza.oindex[ix0, ix1] = 44\nza[:]\n```\n\nLANGUAGE: python\nCODE:\n```\n# set items via integer selection\nix0 = [1, 3]\nix1 = [0, 2]\nselection = ix0, ix1\nvalue = 46\nza.set_orthogonal_selection(selection, value)\nza[:]\n```\n\nLANGUAGE: python\nCODE:\n```\n# alternative API\nza.oindex[ix0, ix1] = 48\nza[:]\n```\n\n----------------------------------------\n\nTITLE: Block Indexing in Zarr Arrays\nDESCRIPTION: Demonstrates block-based indexing in Zarr arrays, allowing selection of whole chunks based on their logical indices using the blocks property.\nSOURCE: https://github.com/zarr-developers/zarr-python/blob/main/docs/user-guide/arrays.rst#2025-04-16_snippet_9\n\nLANGUAGE: Python\nCODE:\n```\ndata = np.arange(100).reshape(10, 10)\nz = zarr.create_array(store='data/example-17.zarr', shape=data.shape, dtype=data.dtype, chunks=(3, 3))\nz[:] = data\nz.get_block_selection(1)\nz.blocks[0, 1:3]\n```\n\n----------------------------------------\n\nTITLE: Creating and Using ObjectStore with MemoryStore in Zarr-Python\nDESCRIPTION: Demonstrates creating an ObjectStore with a MemoryStore backend and using it to create a Zarr array.\nSOURCE: https://github.com/zarr-developers/zarr-python/blob/main/docs/user-guide/storage.rst#2025-04-16_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n>>> from zarr.storage import ObjectStore\n>>> from obstore.store import MemoryStore\n>>>\n>>> store = ObjectStore(MemoryStore())\n>>> zarr.create_array(store=store, shape=(2,), dtype='float64')\n<Array object_store://... shape=(2,) dtype=float64>\n```\n\n----------------------------------------\n\nTITLE: Creating a Zarr Array with Zeros in Python\nDESCRIPTION: Creates a Zarr array named 'foo/bar/baz' filled with zeros, with a shape of 1,000,000 elements. The array is nested within the root group.\nSOURCE: https://github.com/zarr-developers/zarr-python/blob/main/notebooks/repr_info.ipynb#2025-04-16_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nz = root.zeros('foo/bar/baz', shape=1000000)\n```\n\n----------------------------------------\n\nTITLE: Indexing 1D Zarr Array with Boolean Mask\nDESCRIPTION: Demonstrates indexing a 1D Zarr array using a boolean mask with both vindex and oindex methods.\nSOURCE: https://github.com/zarr-developers/zarr-python/blob/main/notebooks/advanced_indexing.ipynb#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\na = np.arange(10)\nza = zarr.array(a, chunks=2)\nix = [False,  True,  False,  True, False, True, False,  True,  False,  True]\n```\n\nLANGUAGE: python\nCODE:\n```\n# get items\nza.vindex[ix]\n```\n\nLANGUAGE: python\nCODE:\n```\n# get items\nza.oindex[ix]\n```\n\nLANGUAGE: python\nCODE:\n```\n# set items\nza.vindex[ix] = a[ix] * 10\nza[:]\n```\n\nLANGUAGE: python\nCODE:\n```\n# set items\nza.oindex[ix] = a[ix] * 100\nza[:]\n```\n\nLANGUAGE: python\nCODE:\n```\n# if using .oindex, indexing array can be any array-like, e.g., Zarr array\nzix = zarr.array(ix, chunks=2)\nza = zarr.array(a, chunks=2)\nza.oindex[zix]  # will not load all zix into memory\n```\n\n----------------------------------------\n\nTITLE: Creating and Using MemoryStore in Zarr-Python\nDESCRIPTION: Shows how to create a MemoryStore and use it to create a Zarr array. The store uses a dictionary for in-memory storage.\nSOURCE: https://github.com/zarr-developers/zarr-python/blob/main/docs/user-guide/storage.rst#2025-04-16_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n>>> data = {}\n>>> store = zarr.storage.MemoryStore(data)\n>>> # TODO: replace with create_array after #2463\n>>> zarr.create_array(store=store, shape=(2,), dtype='float64')\n<Array memory://... shape=(2,) dtype=float64>\n```\n\n----------------------------------------\n\nTITLE: Creating a Zarr Root Group in Python\nDESCRIPTION: Creates a root Zarr group, which serves as the top-level container for other groups and arrays. The root object is then displayed.\nSOURCE: https://github.com/zarr-developers/zarr-python/blob/main/notebooks/repr_info.ipynb#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nroot = zarr.group()\nroot\n```\n\n----------------------------------------\n\nTITLE: Creating Object Array with Object Codec in Zarr\nDESCRIPTION: Demonstrate the creation of an object array in Zarr using the new 'object_codec' argument introduced in version 2.2. The MsgPack codec is used for object serialization.\nSOURCE: https://github.com/zarr-developers/zarr-python/blob/main/notebooks/object_arrays.ipynb#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nz = zarr.empty(10, chunks=5, dtype=object, object_codec=numcodecs.MsgPack())\nz\n```\n\n----------------------------------------\n\nTITLE: Creating and Consolidating Zarr Group Metadata\nDESCRIPTION: Example showing how to create a Zarr group with multiple arrays and consolidate their metadata. Creates three arrays of different shapes and consolidates their metadata into the root group.\nSOURCE: https://github.com/zarr-developers/zarr-python/blob/main/docs/user-guide/consolidated_metadata.rst#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport zarr\n\nstore = zarr.storage.MemoryStore()\ngroup = zarr.create_group(store=store)\ngroup.create_array(shape=(1,), name='a', dtype='float64')\ngroup.create_array(shape=(2, 2), name='b', dtype='float64')\ngroup.create_array(shape=(3, 3, 3), name='c', dtype='float64')\nzarr.consolidate_metadata(store)\n```\n\n----------------------------------------\n\nTITLE: Comparing C and Fortran Order in Zarr Arrays\nDESCRIPTION: Compares the performance of C and Fortran order for chunk memory layout in Zarr arrays. This can affect compression ratios depending on the data structure.\nSOURCE: https://github.com/zarr-developers/zarr-python/blob/main/docs/user-guide/performance.rst#2025-04-16_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n>>> import numpy as np\n>>>\n>>> a = np.arange(100000000, dtype='int32').reshape(10000, 10000).T\n>>> c = zarr.create_array(store={}, shape=a.shape, chunks=(1000, 1000), dtype=a.dtype, config={'order': 'C'})\n>>> c[:] = a\n>>> c.info_complete()\nType               : Array\nZarr format        : 3\nData type          : DataType.int32\nShape              : (10000, 10000)\nChunk shape        : (1000, 1000)\nOrder              : C\nRead-only          : False\nStore type         : MemoryStore\nFilters            : ()\nSerializer         : BytesCodec(endian=<Endian.little: 'little'>)\nCompressors        : (ZstdCodec(level=0, checksum=False),)\nNo. bytes          : 400000000 (381.5M)\nNo. bytes stored   : 342588911\nStorage ratio      : 1.2\nChunks Initialized : 100\n>>> with zarr.config.set({'array.order': 'F'}):\n...     f = zarr.create_array(store={}, shape=a.shape, chunks=(1000, 1000), dtype=a.dtype)\n...     f[:] = a\n>>> f.info_complete()\nType               : Array\nZarr format        : 3\nData type          : DataType.int32\nShape              : (10000, 10000)\nChunk shape        : (1000, 1000)\nOrder              : F\nRead-only          : False\nStore type         : MemoryStore\nFilters            : ()\nSerializer         : BytesCodec(endian=<Endian.little: 'little'>)\nCompressors        : (ZstdCodec(level=0, checksum=False),)\nNo. bytes          : 400000000 (381.5M)\nNo. bytes stored   : 342588911\nStorage ratio      : 1.2\nChunks Initialized : 100\n```\n\n----------------------------------------\n\nTITLE: 1D Sparse Boolean Selection with Zarr Array\nDESCRIPTION: Demonstrates and benchmarks sparse boolean selection using a Zarr array as the index.\nSOURCE: https://github.com/zarr-developers/zarr-python/blob/main/notebooks/advanced_indexing.ipynb#2025-04-16_snippet_14\n\nLANGUAGE: python\nCODE:\n```\nzix_sparse_bool = zarr.array(ix_sparse_bool)\nzix_sparse_bool.info\n```\n\nLANGUAGE: python\nCODE:\n```\n%timeit zc.oindex[zix_sparse_bool]\n```\n\n----------------------------------------\n\nTITLE: Batch Group Creation in Zarr\nDESCRIPTION: Demonstrates creating multiple groups concurrently using create_hierarchy() for improved efficiency.\nSOURCE: https://github.com/zarr-developers/zarr-python/blob/main/docs/user-guide/groups.rst#2025-04-16_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom zarr import create_hierarchy\nfrom zarr.core.group import GroupMetadata\nfrom zarr.storage import LocalStore\nnode_spec = {'a/b/c': GroupMetadata()}\nnodes_created = dict(create_hierarchy(store=LocalStore(root='data'), nodes=node_spec))\n```\n\n----------------------------------------\n\nTITLE: Setting and Retrieving Custom Attributes in Zarr (Python)\nDESCRIPTION: This code snippet demonstrates creating a Zarr group and array, setting custom attributes, and retrieving them. It showcases how to work with string, integer, and list attribute values.\nSOURCE: https://github.com/zarr-developers/zarr-python/blob/main/docs/user-guide/attributes.rst#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n>>> import zarr\n>>> store = zarr.storage.MemoryStore()\n>>> root = zarr.create_group(store=store)\n>>> root.attrs['foo'] = 'bar'\n>>> z = root.create_array(name='zzz', shape=(10000, 10000), dtype='int32')\n>>> z.attrs['baz'] = 42\n>>> z.attrs['qux'] = [1, 4, 7, 12]\n>>> sorted(root.attrs)\n['foo']\n>>> 'foo' in root.attrs\nTrue\n>>> root.attrs['foo']\n'bar'\n>>> sorted(z.attrs)\n['baz', 'qux']\n>>> z.attrs['baz']\n42\n>>> z.attrs['qux']\n[1, 4, 7, 12]\n```\n\n----------------------------------------\n\nTITLE: Generating Random Indices for Orthogonal Selection in Python\nDESCRIPTION: Creates random indices for orthogonal selection on a 2D array, selecting 50% of rows and columns.\nSOURCE: https://github.com/zarr-developers/zarr-python/blob/main/notebooks/advanced_indexing.ipynb#2025-04-16_snippet_18\n\nLANGUAGE: python\nCODE:\n```\nix0 = np.random.choice(d.shape[0], size=int(d.shape[0] * .5), replace=True)\nix1 = np.random.choice(d.shape[1], size=int(d.shape[1] * .5), replace=True)\n```\n\n----------------------------------------\n\nTITLE: Creating a Dask Array from Zarr Array with Custom Chunking in Python\nDESCRIPTION: This code creates a Dask array from the Zarr array, using custom chunking on the first dimension. It demonstrates how to prepare data for distributed processing with Dask.\nSOURCE: https://github.com/zarr-developers/zarr-python/blob/main/notebooks/dask_2d_subset.ipynb#2025-04-16_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n%time gd = da.from_array(g, chunks=(g.chunks[0], None, None))\ngd\n```\n\n----------------------------------------\n\nTITLE: Generating Random Indices for Coordinate Selection in Python\nDESCRIPTION: Creates random indices for coordinate (point) selection, selecting 10% of the total elements in the array.\nSOURCE: https://github.com/zarr-developers/zarr-python/blob/main/notebooks/advanced_indexing.ipynb#2025-04-16_snippet_21\n\nLANGUAGE: python\nCODE:\n```\nn = int(d.size * .1)\nix0 = np.random.choice(d.shape[0], size=n, replace=True)\nix1 = np.random.choice(d.shape[1], size=n, replace=True)\nn\n```\n\n----------------------------------------\n\nTITLE: Array and Group Diagnostics in Zarr\nDESCRIPTION: Shows how to access diagnostic information about arrays and groups using the info property and tree() method.\nSOURCE: https://github.com/zarr-developers/zarr-python/blob/main/docs/user-guide/groups.rst#2025-04-16_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nstore = zarr.storage.MemoryStore()\nroot = zarr.group(store=store)\nfoo = root.create_group('foo')\nbar = foo.create_array(name='bar', shape=1000000, chunks=100000, dtype='int64')\nbar[:] = 42\nbaz = foo.create_array(name='baz', shape=(1000, 1000), chunks=(100, 100), dtype='float32')\nbaz[:] = 4.2\n```\n\n----------------------------------------\n\nTITLE: Benchmarking Zarr Orthogonal Selection in Python\nDESCRIPTION: Times the execution of Zarr orthogonal selection using the oindex accessor and previously generated indices.\nSOURCE: https://github.com/zarr-developers/zarr-python/blob/main/notebooks/advanced_indexing.ipynb#2025-04-16_snippet_20\n\nLANGUAGE: python\nCODE:\n```\n%timeit zd.oindex[ix0, ix1]\n```\n\n----------------------------------------\n\nTITLE: Coordinate Indexing of Multi-dimensional Zarr Arrays\nDESCRIPTION: Shows how to perform coordinate indexing on multi-dimensional Zarr arrays using integer arrays.\nSOURCE: https://github.com/zarr-developers/zarr-python/blob/main/notebooks/advanced_indexing.ipynb#2025-04-16_snippet_6\n\nLANGUAGE: python\nCODE:\n```\na = np.arange(15).reshape(5, 3)\nza = zarr.array(a, chunks=(3, 2))\nza[:]\n```\n\nLANGUAGE: python\nCODE:\n```\n# get items\nix0 = [1, 3]\nix1 = [0, 2]\nza.get_coordinate_selection((ix0, ix1))\n```\n\nLANGUAGE: python\nCODE:\n```\n# alternative API\nza.vindex[ix0, ix1]\n```\n\nLANGUAGE: python\nCODE:\n```\n# set items\nza.set_coordinate_selection((ix0, ix1), 42)\nza[:]\n```\n\nLANGUAGE: python\nCODE:\n```\n# alternative API\nza.vindex[ix0, ix1] = 44\nza[:]\n```\n\n----------------------------------------\n\nTITLE: Pickling and Unpickling Zarr Array with Local Storage\nDESCRIPTION: Example showing how to pickle a Zarr array backed by local storage and verify equality after unpickling. The array is created with specific shape and chunks matching the input data, stored in a local file, and then successfully pickled and unpickled while maintaining data integrity.\nSOURCE: https://github.com/zarr-developers/zarr-python/blob/main/docs/user-guide/performance.rst#2025-04-16_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n>>> import pickle\n>>> data = np.arange(100000)\n>>> z1 = zarr.create_array(store='data/example-2.zarr', shape=data.shape, chunks=data.shape, dtype=data.dtype)\n>>> z1[:] = data\n>>> s = pickle.dumps(z1)\n>>> z2 = pickle.loads(s)\n>>> z1 == z2\nTrue\n>>> np.all(z1[:] == z2[:])\nnp.True_\n```\n\n----------------------------------------\n\nTITLE: Inserting and Retrieving Data from Zarr Object Array\nDESCRIPTION: Insert various data types into the object array and retrieve all elements. This demonstrates the flexibility of object arrays in storing different data types.\nSOURCE: https://github.com/zarr-developers/zarr-python/blob/main/notebooks/object_arrays.ipynb#2025-04-16_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nz[0] = 'foo'\nz[1] = b'bar'  # msgpack doesn't support bytes objects correctly\nz[2] = 1\nz[3] = [2, 4, 6, 'baz']\nz[4] = {'a': 'b', 'c': 'd'}\na = z[:]\na\n```\n\n----------------------------------------\n\nTITLE: Creating Dask Array from DirectoryStore Data\nDESCRIPTION: This code creates a Dask array from the Zarr array stored in DirectoryStore, using the same chunk size as the original Zarr array.\nSOURCE: https://github.com/zarr-developers/zarr-python/blob/main/notebooks/zip_benchmark.ipynb#2025-04-16_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nd_dir = da.from_array(z_dir, chunks=z_dir.chunks)\nd_dir\n```\n\n----------------------------------------\n\nTITLE: Importing Dependencies and Initializing Zarr\nDESCRIPTION: Imports necessary libraries and sets up the Zarr environment for advanced indexing operations.\nSOURCE: https://github.com/zarr-developers/zarr-python/blob/main/notebooks/advanced_indexing.ipynb#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport sys\nsys.path.insert(0, '..')\nimport zarr\nimport numpy as np\nnp.random.seed(42)\nimport cProfile\nzarr.__version__\n```\n\n----------------------------------------\n\nTITLE: Creating Array Objects in Memory with Separate Serialization in Zarr-Python 3.0\nDESCRIPTION: Example of creating Zarr Array objects in memory and serializing them separately, either individually or in batch. This demonstrates the new capability in Zarr-Python 3.0 to decouple object creation from serialization.\nSOURCE: https://github.com/zarr-developers/zarr-python/blob/main/docs/developers/roadmap.rst#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\narr1 = Array(shape=(10, 10), path=\"foo/bar\", dtype=\"i4\", store=store)\narr2 = Array(shape=(10, 10), path=\"foo/spam\", dtype=\"f8\", store=store)\n\narr1.save()\narr2.save()\n\n# or equivalently\n\nzarr.save_many([arr1 ,arr2])\n```\n\n----------------------------------------\n\nTITLE: Slicing 1D Zarr Array with Step > 1\nDESCRIPTION: Shows how to slice a 1D Zarr array with a step greater than 1 using basic and orthogonal selection methods.\nSOURCE: https://github.com/zarr-developers/zarr-python/blob/main/notebooks/advanced_indexing.ipynb#2025-04-16_snippet_4\n\nLANGUAGE: python\nCODE:\n```\na = np.arange(10)\nza = zarr.array(a, chunks=2)\n```\n\nLANGUAGE: python\nCODE:\n```\n# get items\nza[1::2]\n```\n\nLANGUAGE: python\nCODE:\n```\n# set items\nza.oindex[1::2] = a[1::2] * 10\nza[:]\n```\n\n----------------------------------------\n\nTITLE: Initializing Dependencies and Data Loading\nDESCRIPTION: Sets up the required libraries including zarr, blosc, numpy, h5py and matplotlib. Loads genotype data from an HDF5 file for compression testing.\nSOURCE: https://github.com/zarr-developers/zarr-python/blob/main/notebooks/genotype_benchmark_compressors.ipynb#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport sys\nsys.path.insert(0, '..')\nimport functools\nimport timeit\nimport zarr\nprint('zarr', zarr.__version__)\nfrom zarr import blosc\nprint('blosc', blosc.version())\nimport numpy as np\nimport h5py\n%matplotlib inline\nimport matplotlib.pyplot as plt\n```\n\n----------------------------------------\n\nTITLE: Creating and Selecting from Synthetic Dask Array in Python\nDESCRIPTION: These snippets create a Dask array from the synthetic Zarr array and perform a 2D selection. They demonstrate the process with synthetic data for comparison.\nSOURCE: https://github.com/zarr-developers/zarr-python/blob/main/notebooks/dask_2d_subset.ipynb#2025-04-16_snippet_11\n\nLANGUAGE: python\nCODE:\n```\n%time d = da.from_array(a, chunks=(a.chunks[0], None, None))\nd\n```\n\nLANGUAGE: python\nCODE:\n```\n%time ds = d[c][:, s]\n```\n\n----------------------------------------\n\nTITLE: Accessing Consolidated Metadata\nDESCRIPTION: Demonstrates how to access and inspect consolidated metadata from a Zarr group. Opens a group and prints its consolidated metadata structure.\nSOURCE: https://github.com/zarr-developers/zarr-python/blob/main/docs/user-guide/consolidated_metadata.rst#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nconsolidated = zarr.open_group(store=store)\nconsolidated_metadata = consolidated.metadata.consolidated_metadata.metadata\nfrom pprint import pprint\npprint(dict(sorted(consolidated_metadata.items())))\n```\n\n----------------------------------------\n\nTITLE: Profiling Zarr Coordinate Selection in Python\nDESCRIPTION: Profiles the execution of Zarr coordinate selection using the vindex accessor.\nSOURCE: https://github.com/zarr-developers/zarr-python/blob/main/notebooks/advanced_indexing.ipynb#2025-04-16_snippet_24\n\nLANGUAGE: python\nCODE:\n```\nprofile('zd.vindex[ix0, ix1]')\n```\n\n----------------------------------------\n\nTITLE: Importing Required Libraries for Zarr and Dask Operations in Python\nDESCRIPTION: This snippet imports the necessary libraries (zarr, dask, numpy) and prints their versions. It sets up the environment for working with Zarr arrays and Dask distributed computing.\nSOURCE: https://github.com/zarr-developers/zarr-python/blob/main/notebooks/dask_2d_subset.ipynb#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport zarr; print('zarr', zarr.__version__)\nimport dask; print('dask', dask.__version__)\nimport dask.array as da\nimport numpy as np\n```\n\n----------------------------------------\n\nTITLE: Creating Synthetic Zarr Array for Profiling in Python\nDESCRIPTION: This code creates a synthetic Zarr array with random data for profiling purposes. It demonstrates how to generate test data for performance analysis.\nSOURCE: https://github.com/zarr-developers/zarr-python/blob/main/notebooks/dask_2d_subset.ipynb#2025-04-16_snippet_9\n\nLANGUAGE: python\nCODE:\n```\na = zarr.array(np.random.randint(-1, 4, size=(20000000, 200, 2), dtype='i1'),\n               chunks=(10000, 100, 2), compressor=zarr.Blosc(cname='zstd', clevel=1, shuffle=2))\na\n```\n\n----------------------------------------\n\nTITLE: Opening a Zarr Group for Genotype Data in Python\nDESCRIPTION: This code opens a Zarr group containing genotype data from a specific file path. It demonstrates how to access Zarr-formatted data for further processing.\nSOURCE: https://github.com/zarr-developers/zarr-python/blob/main/notebooks/dask_2d_subset.ipynb#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ncallset = zarr.open_group('/kwiat/2/coluzzi/ag1000g/data/phase1/release/AR3.1/variation/main/zarr2/zstd/ag1000g.phase1.ar3',\n                          mode='r')\ncallset\n```\n\n----------------------------------------\n\nTITLE: Save and Load Functions\nDESCRIPTION: Core functions for benchmarking save and load operations across different storage backends.\nSOURCE: https://github.com/zarr-developers/zarr-python/blob/main/notebooks/store_benchmark.ipynb#2025-04-16_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ndef save(a, z):\n    if isinstance(z.store, zarr.ZipStore):\n        # needed for zip benchmarks to avoid duplicate entries\n        z.store.clear()\n    z[:] = a\n    if hasattr(z.store, 'flush'):\n        z.store.flush()\n\ndef load(z, a):\n    z.get_basic_selection(out=a)\n```\n\n----------------------------------------\n\nTITLE: Profiling Synthetic Data Selection in Python\nDESCRIPTION: These snippets profile the selection operations on the synthetic data, including the overall selection and the problematic first dimension selection. They help identify performance issues in the selection process.\nSOURCE: https://github.com/zarr-developers/zarr-python/blob/main/notebooks/dask_2d_subset.ipynb#2025-04-16_snippet_12\n\nLANGUAGE: python\nCODE:\n```\ncProfile.run('d[c][:, s]', sort='time')\n```\n\nLANGUAGE: python\nCODE:\n```\n%time ds[1000000:1100000].compute(optimize_graph=False)\n```\n\nLANGUAGE: python\nCODE:\n```\ncProfile.run('d[c]', sort='time')\n```\n\n----------------------------------------\n\nTITLE: Accessing Zarr Data from ZipStore\nDESCRIPTION: This code opens a Zarr ZipStore in read-only mode, creates a Zarr Group, and accesses a specific dataset within the group.\nSOURCE: https://github.com/zarr-developers/zarr-python/blob/main/notebooks/zip_benchmark.ipynb#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nstore = zarr.ZipStore('/data/coluzzi/ag1000g/data/phase1/release/AR3.1/haplotypes/main/zarr2/zstd/ag1000g.phase1.ar3.1.haplotypes.zip',\n                      mode='r')\ngrp = zarr.Group(store)\nz = grp['3L/calldata/genotype']\nz\n```\n\n----------------------------------------\n\nTITLE: 2D Array Setup for Benchmarking\nDESCRIPTION: Prepares a 2D Zarr array for benchmarking operations.\nSOURCE: https://github.com/zarr-developers/zarr-python/blob/main/notebooks/advanced_indexing.ipynb#2025-04-16_snippet_16\n\nLANGUAGE: python\nCODE:\n```\nc.shape\n```\n\nLANGUAGE: python\nCODE:\n```\nd = c.reshape(-1, 1000)\nd.shape\n```\n\nLANGUAGE: python\nCODE:\n```\nzd = zarr.array(d)\nzd.info\n```\n\n----------------------------------------\n\nTITLE: Creating Dask Array from Zarr Data\nDESCRIPTION: This snippet creates a Dask array from the Zarr array, using the same chunk size as the original Zarr array.\nSOURCE: https://github.com/zarr-developers/zarr-python/blob/main/notebooks/zip_benchmark.ipynb#2025-04-16_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nd = da.from_array(z, chunks=z.chunks)\nd\n```\n\n----------------------------------------\n\nTITLE: Profiling Dask Array Selection Operations in Python\nDESCRIPTION: These snippets use cProfile to profile the 2D selection operation on the Dask array. They help identify performance bottlenecks in the selection process.\nSOURCE: https://github.com/zarr-developers/zarr-python/blob/main/notebooks/dask_2d_subset.ipynb#2025-04-16_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nimport cProfile\ncProfile.run('gd[dim0_condition][:, dim1_indices]', sort='time')\n```\n\nLANGUAGE: python\nCODE:\n```\ncProfile.run('gd[dim0_condition][:, dim1_indices]', sort='cumtime')\n```\n\n----------------------------------------\n\nTITLE: 2D Boolean Orthogonal Selection Benchmarking\nDESCRIPTION: Benchmarks boolean orthogonal selection operations on 2D Zarr arrays compared to NumPy arrays.\nSOURCE: https://github.com/zarr-developers/zarr-python/blob/main/notebooks/advanced_indexing.ipynb#2025-04-16_snippet_17\n\nLANGUAGE: python\nCODE:\n```\nix0 = np.random.binomial(1, 0.5, size=d.shape[0]).astype(bool)\nix1 = np.random.binomial(1, 0.5, size=d.shape[1]).astype(bool)\n```\n\nLANGUAGE: python\nCODE:\n```\n%timeit d[np.ix_(ix0, ix1)]\n```\n\nLANGUAGE: python\nCODE:\n```\n%timeit zd.oindex[ix0, ix1]\n```\n\n----------------------------------------\n\nTITLE: Importing Libraries and Setting Up Environment for Array Copy Profiling\nDESCRIPTION: This snippet imports necessary libraries, sets up the Zarr path, configures Bcolz to use a single thread, and initializes Bokeh for visualization output.\nSOURCE: https://github.com/zarr-developers/zarr-python/blob/main/notebooks/dask_copy.ipynb#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport sys\nsys.path.insert(0, '..')\nimport zarr\nprint('zarr', zarr.__version__)\nfrom zarr import blosc\nimport numpy as np\nimport h5py\nimport bcolz\n# don't let bcolz use multiple threads internally, we want to \n# see whether dask can make good use of multiple CPUs\nbcolz.set_nthreads(1)\nimport multiprocessing\nimport dask\nimport dask.array as da\nfrom dask.diagnostics import Profiler, ResourceProfiler, CacheProfiler\nfrom dask.diagnostics.profile_visualize import visualize\nfrom cachey import nbytes\nimport bokeh\nfrom bokeh.io import output_notebook\noutput_notebook()\n```\n\n----------------------------------------\n\nTITLE: Accessing Zarr Data from DirectoryStore\nDESCRIPTION: This snippet opens a Zarr DirectoryStore, creates a Zarr Group, and accesses the same dataset as before for comparison.\nSOURCE: https://github.com/zarr-developers/zarr-python/blob/main/notebooks/zip_benchmark.ipynb#2025-04-16_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n# compare with same data via directory store\nstore_dir = zarr.DirectoryStore('/data/coluzzi/ag1000g/data/phase1/release/AR3.1/haplotypes/main/zarr2/zstd/ag1000g.phase1.ar3.1.haplotypes')\ngrp_dir = zarr.Group(store_dir)\nz_dir = grp_dir['3L/calldata/genotype']\nz_dir\n```\n\n----------------------------------------\n\nTITLE: 1D Slice with Step Benchmarking\nDESCRIPTION: Benchmarks slicing operations with various step sizes on 1D Zarr arrays compared to NumPy arrays.\nSOURCE: https://github.com/zarr-developers/zarr-python/blob/main/notebooks/advanced_indexing.ipynb#2025-04-16_snippet_15\n\nLANGUAGE: python\nCODE:\n```\n%timeit np.array(c[::2])\n```\n\nLANGUAGE: python\nCODE:\n```\n%timeit zc[::2]\n```\n\nLANGUAGE: python\nCODE:\n```\n%timeit zc[::10]\n```\n\nLANGUAGE: python\nCODE:\n```\n%timeit zc[::100]\n```\n\nLANGUAGE: python\nCODE:\n```\n%timeit zc[::1000]\n```\n\nLANGUAGE: python\nCODE:\n```\nprofile('zc[::2]')\n```\n\n----------------------------------------\n\nTITLE: Testing Float Array Operations\nDESCRIPTION: Creates a Zarr array with floating-point data type, performs write and read operations with timing measurements using random normal distribution data\nSOURCE: https://github.com/zarr-developers/zarr-python/blob/main/notebooks/blosc_microbench.ipynb#2025-04-16_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nz = zarr.empty(shape=100000000, chunks=200000, dtype='f8')\ndata = np.random.normal(size=100000000)\n%timeit z[:] = data\n%timeit z[:]\nprint(z)\nassert np.all(z[:] == data)\n```\n\n----------------------------------------\n\nTITLE: Setting Values in Zarr Array in Python\nDESCRIPTION: Sets all elements of the Zarr array 'z' to the value 42. This operation modifies the entire array.\nSOURCE: https://github.com/zarr-developers/zarr-python/blob/main/notebooks/repr_info.ipynb#2025-04-16_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nz[:] = 42\n```\n\n----------------------------------------\n\nTITLE: Runtime Safety Check for Object Arrays in Zarr\nDESCRIPTION: Demonstrate the runtime safety check that prevents object arrays from being passed to the compressor without proper encoding, avoiding potential errors or segfaults.\nSOURCE: https://github.com/zarr-developers/zarr-python/blob/main/notebooks/object_arrays.ipynb#2025-04-16_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nz = zarr.empty(10, chunks=5, dtype=object, object_codec=numcodecs.MsgPack())\nz._filters = None  # try to live dangerously, manually wipe filters\n```\n\nLANGUAGE: python\nCODE:\n```\nz[0] = 'foo'\n```\n\n----------------------------------------\n\nTITLE: Indexing 1D Zarr Array with Multi-dimensional Integer Array\nDESCRIPTION: Demonstrates indexing a 1D Zarr array using a multi-dimensional integer array for coordinate selection.\nSOURCE: https://github.com/zarr-developers/zarr-python/blob/main/notebooks/advanced_indexing.ipynb#2025-04-16_snippet_3\n\nLANGUAGE: python\nCODE:\n```\na = np.arange(10)\nza = zarr.array(a, chunks=2)\nix = np.array([[1, 3, 5], [2, 4, 6]])\n```\n\nLANGUAGE: python\nCODE:\n```\n# get items\nza.vindex[ix]\n```\n\nLANGUAGE: python\nCODE:\n```\n# set items\nza.vindex[ix] = a[ix] * 10\nza[:]\n```\n\n----------------------------------------\n\nTITLE: 1D Benchmarking Setup\nDESCRIPTION: Sets up a large 1D array for benchmarking Zarr operations against NumPy.\nSOURCE: https://github.com/zarr-developers/zarr-python/blob/main/notebooks/advanced_indexing.ipynb#2025-04-16_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nc = np.arange(100000000)\nc.nbytes\n```\n\nLANGUAGE: python\nCODE:\n```\n%time zc = zarr.array(c)\nzc.info\n```\n\nLANGUAGE: python\nCODE:\n```\n%timeit c.copy()\n```\n\nLANGUAGE: python\nCODE:\n```\n%timeit zc[:]\n```\n\n----------------------------------------\n\nTITLE: Runtime Safety Check for Decoding Object Arrays in Zarr\nDESCRIPTION: Illustrate another runtime safety check that ensures object arrays are not handled inappropriately during decoding, preventing potential errors or segfaults when filters are removed after data storage.\nSOURCE: https://github.com/zarr-developers/zarr-python/blob/main/notebooks/object_arrays.ipynb#2025-04-16_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nfrom numcodecs.tests.common import greetings\nz = zarr.array(greetings, chunks=5, dtype=object, object_codec=numcodecs.MsgPack())\nz[:]\n```\n\nLANGUAGE: python\nCODE:\n```\nz._filters = []  # try to live dangerously, manually wipe filters\nz[:]\n```\n\n----------------------------------------\n\nTITLE: Displaying Zarr Root Group Information in Python\nDESCRIPTION: Accesses and displays the information of the root Zarr group, which may include metadata and structural details.\nSOURCE: https://github.com/zarr-developers/zarr-python/blob/main/notebooks/repr_info.ipynb#2025-04-16_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nroot.info\n```\n\n----------------------------------------\n\nTITLE: Registering Custom Zarr Codec Entry Points in TOML\nDESCRIPTION: Example showing how to register custom codec entry points in pyproject.toml. The codec is registered under the zarr.codecs namespace with a unique identifier that should be prefixed to avoid naming collisions.\nSOURCE: https://github.com/zarr-developers/zarr-python/blob/main/docs/user-guide/extending.rst#2025-04-16_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[project.entry-points.\"zarr.codecs\"]\n\"custompackage.fancy_codec\" = \"custompackage:FancyCodec\"\n```\n\n----------------------------------------\n\nTITLE: Importing Zarr Library in Python\nDESCRIPTION: This snippet imports the Zarr library, which is necessary for all subsequent operations with Zarr data structures.\nSOURCE: https://github.com/zarr-developers/zarr-python/blob/main/notebooks/repr_info.ipynb#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport zarr\n```\n\n----------------------------------------\n\nTITLE: Initializing Zarr Array with Blosc Compression in Python\nDESCRIPTION: Creates a Zarr array with 200 million uint16 elements, using Blosc compression with LZ4 and bit-shuffle. The array is chunked and uses a dictionary store.\nSOURCE: https://github.com/zarr-developers/zarr-python/blob/main/bench/compress_normal.txt#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nzarr.core.Array((200000000,), uint16, chunks=(1000000,), order=C)\n  compression: blosc; compression_opts: {'clevel': 5, 'cname': 'lz4', 'shuffle': 2}\n  nbytes: 381.5M; nbytes_stored: 294; ratio: 1360544.2; initialized: 0/200\n  store: builtins.dict\n```\n\n----------------------------------------\n\nTITLE: Displaying Updated Zarr Array Information in Python\nDESCRIPTION: Accesses and displays the updated information of the Zarr array 'z' after setting its values, which may reflect changes in metadata or statistics.\nSOURCE: https://github.com/zarr-developers/zarr-python/blob/main/notebooks/repr_info.ipynb#2025-04-16_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nz.info\n```\n\n----------------------------------------\n\nTITLE: Handling Error When Creating Object Array Without Codec\nDESCRIPTION: Demonstrate that a ValueError is raised when attempting to create an object array without specifying an object codec, ensuring proper initialization.\nSOURCE: https://github.com/zarr-developers/zarr-python/blob/main/notebooks/object_arrays.ipynb#2025-04-16_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nz = zarr.empty(10, chunks=5, dtype=object)\n```\n\n----------------------------------------\n\nTITLE: Displaying Updated Zarr Root Group in Python\nDESCRIPTION: Displays the root Zarr group after creating multiple subgroups, which may show the updated structure with the new groups.\nSOURCE: https://github.com/zarr-developers/zarr-python/blob/main/notebooks/repr_info.ipynb#2025-04-16_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nroot\n```\n\n----------------------------------------\n\nTITLE: Displaying Nested Zarr Group Information in Python\nDESCRIPTION: Accesses and displays the information of a specific nested Zarr group 'foo/bar' within the root group, showing details of this particular subgroup.\nSOURCE: https://github.com/zarr-developers/zarr-python/blob/main/notebooks/repr_info.ipynb#2025-04-16_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nroot['foo/bar'].info\n```\n\n----------------------------------------\n\nTITLE: Printing Current Zarr Configuration\nDESCRIPTION: Shows how to print the current Zarr configuration using zarr.config.pprint(). This displays all the default settings for various aspects of Zarr, including array options, compressors, filters, codecs, and more.\nSOURCE: https://github.com/zarr-developers/zarr-python/blob/main/docs/user-guide/config.rst#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n>>> zarr.config.pprint()\n{'array': {'order': 'C',\n          'v2_default_compressor': {'bytes': {'checksum': False,\n                                              'id': 'zstd',\n                                              'level': 0},\n                                    'numeric': {'checksum': False,\n                                                'id': 'zstd',\n                                                'level': 0},\n                                    'string': {'checksum': False,\n                                               'id': 'zstd',\n                                               'level': 0}},\n          'v2_default_filters': {'bytes': [{'id': 'vlen-bytes'}],\n                                 'numeric': None,\n                                 'raw': None,\n                                 'string': [{'id': 'vlen-utf8'}]},\n          'v3_default_compressors': {'bytes': [{'configuration': {'checksum': False,\n                                                                  'level': 0},\n                                                'name': 'zstd'}],\n                                     'numeric': [{'configuration': {'checksum': False,\n                                                                    'level': 0},\n                                                  'name': 'zstd'}],\n                                     'string': [{'configuration': {'checksum': False,\n                                                                   'level': 0},\n                                                 'name': 'zstd'}]},\n          'v3_default_filters': {'bytes': [], 'numeric': [], 'string': []},\n          'v3_default_serializer': {'bytes': {'name': 'vlen-bytes'},\n                                    'numeric': {'configuration': {'endian': 'little'},\n                                                'name': 'bytes'},\n                                    'string': {'name': 'vlen-utf8'}},\n          'write_empty_chunks': False},\n'async': {'concurrency': 10, 'timeout': None},\n'buffer': 'zarr.core.buffer.cpu.Buffer',\n'codec_pipeline': {'batch_size': 1,\n                   'path': 'zarr.core.codec_pipeline.BatchedCodecPipeline'},\n'codecs': {'blosc': 'zarr.codecs.blosc.BloscCodec',\n           'bytes': 'zarr.codecs.bytes.BytesCodec',\n           'crc32c': 'zarr.codecs.crc32c_.Crc32cCodec',\n           'endian': 'zarr.codecs.bytes.BytesCodec',\n           'gzip': 'zarr.codecs.gzip.GzipCodec',\n           'sharding_indexed': 'zarr.codecs.sharding.ShardingCodec',\n           'transpose': 'zarr.codecs.transpose.TransposeCodec',\n           'vlen-bytes': 'zarr.codecs.vlen_utf8.VLenBytesCodec',\n           'vlen-utf8': 'zarr.codecs.vlen_utf8.VLenUTF8Codec',\n           'zstd': 'zarr.codecs.zstd.ZstdCodec'},\n'default_zarr_format': 3,\n'json_indent': 2,\n'ndbuffer': 'zarr.core.buffer.cpu.NDBuffer',\n'threading': {'max_workers': None}}\n```\n\n----------------------------------------\n\nTITLE: 1D Boolean Dense Selection Benchmarking\nDESCRIPTION: Benchmarks boolean dense selection operations on 1D Zarr arrays compared to NumPy arrays.\nSOURCE: https://github.com/zarr-developers/zarr-python/blob/main/notebooks/advanced_indexing.ipynb#2025-04-16_snippet_10\n\nLANGUAGE: python\nCODE:\n```\n# relatively dense selection - 10%\nix_dense_bool = np.random.binomial(1, 0.1, size=c.shape[0]).astype(bool)\nnp.count_nonzero(ix_dense_bool)\n```\n\nLANGUAGE: python\nCODE:\n```\n%timeit c[ix_dense_bool]\n```\n\nLANGUAGE: python\nCODE:\n```\n%timeit zc.oindex[ix_dense_bool]\n```\n\nLANGUAGE: python\nCODE:\n```\n%timeit zc.vindex[ix_dense_bool]\n```\n\nLANGUAGE: python\nCODE:\n```\nimport tempfile\nimport cProfile\nimport pstats\n\ndef profile(statement, sort='time', restrictions=(7,)):\n    with tempfile.NamedTemporaryFile() as f:\n        cProfile.run(statement, filename=f.name)\n        pstats.Stats(f.name).sort_stats(sort).print_stats(*restrictions)\n\n```\n\nLANGUAGE: python\nCODE:\n```\nprofile('zc.oindex[ix_dense_bool]')\n```\n\nLANGUAGE: python\nCODE:\n```\nprofile('zc.vindex[ix_dense_bool]')\n```\n\n----------------------------------------\n\nTITLE: Displaying Updated Zarr Root Group Information in Python\nDESCRIPTION: Accesses and displays the updated information of the root Zarr group after creating multiple subgroups, which may reflect changes in structure and metadata.\nSOURCE: https://github.com/zarr-developers/zarr-python/blob/main/notebooks/repr_info.ipynb#2025-04-16_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nroot.info\n```\n\n----------------------------------------\n\nTITLE: Computing Sum of Dask Array from DirectoryStore\nDESCRIPTION: This snippet computes the sum of the Dask array created from DirectoryStore along axis 1 and measures the execution time for comparison with ZipStore.\nSOURCE: https://github.com/zarr-developers/zarr-python/blob/main/notebooks/zip_benchmark.ipynb#2025-04-16_snippet_8\n\nLANGUAGE: python\nCODE:\n```\n%time d_dir.sum(axis=1).compute()\n```\n\n----------------------------------------\n\nTITLE: 1D Boolean Sparse Selection Benchmarking\nDESCRIPTION: Benchmarks boolean sparse selection operations on 1D Zarr arrays compared to NumPy arrays.\nSOURCE: https://github.com/zarr-developers/zarr-python/blob/main/notebooks/advanced_indexing.ipynb#2025-04-16_snippet_12\n\nLANGUAGE: python\nCODE:\n```\n# relatively sparse selection\nix_sparse_bool = np.random.binomial(1, 0.0001, size=c.shape[0]).astype(bool)\nnp.count_nonzero(ix_sparse_bool)\n```\n\nLANGUAGE: python\nCODE:\n```\n%timeit c[ix_sparse_bool]\n```\n\nLANGUAGE: python\nCODE:\n```\n%timeit zc.oindex[ix_sparse_bool]\n```\n\nLANGUAGE: python\nCODE:\n```\n%timeit zc.vindex[ix_sparse_bool]\n```\n\nLANGUAGE: python\nCODE:\n```\nprofile('zc.oindex[ix_sparse_bool]')\n```\n\nLANGUAGE: python\nCODE:\n```\nprofile('zc.vindex[ix_sparse_bool]')\n```\n\n----------------------------------------\n\nTITLE: Benchmark Setup Functions\nDESCRIPTION: Functions to set up the benchmark environment, including cleanup and initialization of different storage backends for Zarr arrays.\nSOURCE: https://github.com/zarr-developers/zarr-python/blob/main/notebooks/store_benchmark.ipynb#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport os\nimport shutil\nbench_dir = '../data/bench'\n\ndef clean():\n    if os.path.isdir(bench_dir):\n        shutil.rmtree(bench_dir)\n    os.makedirs(bench_dir)\n\ndef setup(a, name='foo/bar'):\n    global fdict_z, hdict_z, lmdb_z, gdbm_z, ndbm_z, bdbm_btree_z, bdbm_hash_z, zip_z, dir_z\n    \n    clean()\n    fdict_root = zarr.group(store=dict())\n    hdict_root = zarr.group(store=zarr.DictStore())\n    lmdb_root = zarr.group(store=zarr.LMDBStore(os.path.join(bench_dir, 'lmdb')))\n    gdbm_root = zarr.group(store=zarr.DBMStore(os.path.join(bench_dir, 'gdbm'), open=dbm.gnu.open))\n    ndbm_root = zarr.group(store=zarr.DBMStore(os.path.join(bench_dir, 'ndbm'), open=dbm.ndbm.open))\n    bdbm_btree_root = zarr.group(store=zarr.DBMStore(os.path.join(bench_dir, 'bdbm_btree'), open=bsddb3.btopen))\n    bdbm_hash_root = zarr.group(store=zarr.DBMStore(os.path.join(bench_dir, 'bdbm_hash'), open=bsddb3.hashopen))\n    zip_root = zarr.group(store=zarr.ZipStore(os.path.join(bench_dir, 'zip'), mode='w'))\n    dir_root = zarr.group(store=zarr.DirectoryStore(os.path.join(bench_dir, 'dir')))\n\n    fdict_z = fdict_root.empty_like(name, a)\n    hdict_z = hdict_root.empty_like(name, a)\n    lmdb_z = lmdb_root.empty_like(name, a)\n    gdbm_z = gdbm_root.empty_like(name, a)\n    ndbm_z = ndbm_root.empty_like(name, a)\n    bdbm_btree_z = bdbm_btree_root.empty_like(name, a)\n    bdbm_hash_z = bdbm_hash_root.empty_like(name, a)\n    zip_z = zip_root.empty_like(name, a)\n    dir_z = dir_root.empty_like(name, a)\n\n    # check compression ratio\n    fdict_z[:] = a\n    return fdict_z.info\n```\n\n----------------------------------------\n\nTITLE: Profiling Zarr Data Access\nDESCRIPTION: This snippet uses cProfile to profile the performance of accessing the first 10 elements of the Zarr array.\nSOURCE: https://github.com/zarr-developers/zarr-python/blob/main/notebooks/zip_benchmark.ipynb#2025-04-16_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport cProfile\ncProfile.run('z[:10]', sort='cumtime')\n```\n\n----------------------------------------\n\nTITLE: Accessing Object Array Information in Zarr\nDESCRIPTION: Display information about the created object array, showing how the object codec is treated as a filter and inserted as the first filter in the chain for backward compatibility.\nSOURCE: https://github.com/zarr-developers/zarr-python/blob/main/notebooks/object_arrays.ipynb#2025-04-16_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nz.info\n```\n\n----------------------------------------\n\nTITLE: Installing Zarr with conda\nDESCRIPTION: Command to install the Zarr library using conda package manager from the conda-forge channel.\nSOURCE: https://github.com/zarr-developers/zarr-python/blob/main/docs/quickstart.rst#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nconda install --channel conda-forge zarr\n```\n\n----------------------------------------\n\nTITLE: Defining Function for Profiling Dask Array Copy Operations\nDESCRIPTION: This function profiles the copying of arrays using Dask, with options for specifying chunk size, number of workers, and whether to use locking. It visualizes the profiling results using Bokeh.\nSOURCE: https://github.com/zarr-developers/zarr-python/blob/main/notebooks/dask_copy.ipynb#2025-04-16_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ndef profile_dask_copy(src, dst, chunks, num_workers=multiprocessing.cpu_count(), dt=0.1, lock=True):\n    dsrc = da.from_array(src, chunks=chunks)\n    with Profiler() as prof, ResourceProfiler(dt=dt) as rprof:\n        da.store(dsrc, dst, num_workers=num_workers, lock=lock)\n    visualize([prof, rprof], min_border_top=60, min_border_bottom=60)\n```\n\n----------------------------------------\n\nTITLE: Dask Integration Functions\nDESCRIPTION: Function to perform Dask operations on Zarr arrays with different storage backends.\nSOURCE: https://github.com/zarr-developers/zarr-python/blob/main/notebooks/store_benchmark.ipynb#2025-04-16_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ndef dask_op(source, sink, chunks=None):\n    if isinstance(sink.store, zarr.ZipStore):\n        sink.store.clear()\n    if chunks is None:\n        try:\n            chunks = sink.chunks\n        except AttributeError:\n            chunks = source.chunks\n    d = da.from_array(source, chunks=chunks, asarray=False, fancy=False, lock=False)\n    result = (d // 2) * 2\n    da.store(result, sink, lock=False)\n    if hasattr(sink.store, 'flush'):\n        sink.store.flush()\n```\n\n----------------------------------------\n\nTITLE: Installing Zarr via conda\nDESCRIPTION: Command to install the Zarr package using the conda package manager from conda-forge channel.\nSOURCE: https://github.com/zarr-developers/zarr-python/blob/main/README.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nconda install -c conda-forge zarr\n```\n\n----------------------------------------\n\nTITLE: Defining Utility Functions for HDF5 and Array Diagnostics\nDESCRIPTION: This snippet defines two utility functions: 'h5fmem' for creating in-memory HDF5 files, and 'h5d_diagnostics' for printing diagnostic information about HDF5 datasets.\nSOURCE: https://github.com/zarr-developers/zarr-python/blob/main/notebooks/dask_copy.ipynb#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport tempfile\nimport operator\nfrom functools import reduce\nfrom zarr.util import human_readable_size\n\n\ndef h5fmem(**kwargs):\n    \"\"\"Convenience function to create an in-memory HDF5 file.\"\"\"\n\n    # need a file name even tho nothing is ever written\n    fn = tempfile.mktemp()\n\n    # file creation args\n    kwargs['mode'] = 'w'\n    kwargs['driver'] = 'core'\n    kwargs['backing_store'] = False\n\n    # open HDF5 file\n    h5f = h5py.File(fn, **kwargs)\n\n    return h5f\n\n\ndef h5d_diagnostics(d):\n    \"\"\"Print some diagnostics on an HDF5 dataset.\"\"\"\n    \n    print(d)\n    nbytes = reduce(operator.mul, d.shape) * d.dtype.itemsize\n    cbytes = d._id.get_storage_size()\n    if cbytes > 0:\n        ratio = nbytes / cbytes\n    else:\n        ratio = np.inf\n    r = '  compression: %s' % d.compression\n    r += '; compression_opts: %s' % d.compression_opts\n    r += '; shuffle: %s' % d.shuffle\n    r += '\\n  nbytes: %s' % human_readable_size(nbytes)\n    r += '; nbytes_stored: %s' % human_readable_size(cbytes)\n    r += '; ratio: %.1f' % ratio\n    r += '; chunks: %s' % str(d.chunks)\n    print(r)\n```\n\n----------------------------------------\n\nTITLE: Creating and Profiling Zarr Array Copy Operations\nDESCRIPTION: This section creates Zarr arrays in memory and profiles their copy operations using Dask, comparing performance with and without locking, and with Blosc's internal threading.\nSOURCE: https://github.com/zarr-developers/zarr-python/blob/main/notebooks/dask_copy.ipynb#2025-04-16_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nz1 = zarr.array(a1, chunks=chunks, compression='blosc', \n                compression_opts=dict(cname='lz4', clevel=1, shuffle=2))\nz1\n```\n\nLANGUAGE: python\nCODE:\n```\nz2 = zarr.empty_like(z1)\nz2\n```\n\nLANGUAGE: python\nCODE:\n```\nprofile_dask_copy(z1, z2, chunks, lock=True, dt=.02)\n```\n\nLANGUAGE: python\nCODE:\n```\nprofile_dask_copy(z1, z2, chunks, lock=False, dt=0.02)\n```\n\nLANGUAGE: python\nCODE:\n```\n# for comparison, using blosc internal threads\n%timeit -n3 -r5 z2[:] = z1\n```\n\nLANGUAGE: python\nCODE:\n```\n%prun z2[:] = z1\n```\n\n----------------------------------------\n\nTITLE: 1D Integer Dense Selection Benchmarking\nDESCRIPTION: Benchmarks integer dense selection operations on 1D Zarr arrays compared to NumPy arrays.\nSOURCE: https://github.com/zarr-developers/zarr-python/blob/main/notebooks/advanced_indexing.ipynb#2025-04-16_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nix_dense_int = np.random.choice(c.shape[0], size=c.shape[0]//10, replace=True)\nix_dense_int_sorted = ix_dense_int.copy()\nix_dense_int_sorted.sort()\nlen(ix_dense_int)\n```\n\nLANGUAGE: python\nCODE:\n```\n%timeit c[ix_dense_int_sorted]\n```\n\nLANGUAGE: python\nCODE:\n```\n%timeit zc.oindex[ix_dense_int_sorted]\n```\n\nLANGUAGE: python\nCODE:\n```\n%timeit zc.vindex[ix_dense_int_sorted]\n```\n\nLANGUAGE: python\nCODE:\n```\n%timeit c[ix_dense_int]\n```\n\nLANGUAGE: python\nCODE:\n```\n%timeit zc.oindex[ix_dense_int]\n```\n\nLANGUAGE: python\nCODE:\n```\n%timeit zc.vindex[ix_dense_int]\n```\n\nLANGUAGE: python\nCODE:\n```\nprofile('zc.oindex[ix_dense_int_sorted]')\n```\n\nLANGUAGE: python\nCODE:\n```\nprofile('zc.vindex[ix_dense_int_sorted]')\n```\n\nLANGUAGE: python\nCODE:\n```\nprofile('zc.oindex[ix_dense_int]')\n```\n\nLANGUAGE: python\nCODE:\n```\nprofile('zc.vindex[ix_dense_int]')\n```\n\n----------------------------------------\n\nTITLE: Creating Multiple Zarr Groups in Python\nDESCRIPTION: Creates 1000 Zarr groups within the root group using a loop. Each group is named with its index number.\nSOURCE: https://github.com/zarr-developers/zarr-python/blob/main/notebooks/repr_info.ipynb#2025-04-16_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nfor i in range(1000):\n    root.create_group(i)\n```\n\n----------------------------------------\n\nTITLE: Benchmark Functions Implementation\nDESCRIPTION: Implements functions to measure compression ratios and compression/decompression times for different configurations using the @functools.lru_cache decorator for caching results.\nSOURCE: https://github.com/zarr-developers/zarr-python/blob/main/notebooks/genotype_benchmark_compressors.ipynb#2025-04-16_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n@functools.lru_cache(maxsize=None)\ndef compression_ratios():\n    x = list()\n    for compression, compression_opts in compression_configs:\n        z = zarr.array(genotype_sample, chunks=chunks, compression=compression, \n                       compression_opts=compression_opts)\n        ratio = z.nbytes / z.nbytes_stored\n        x.append(ratio)\n        log(compression, compression_opts, ratio)\n    return x\n\n@functools.lru_cache(maxsize=None)\ndef compression_decompression_times(repeat=3, number=1):\n    c = list()\n    d = list()\n    for compression, compression_opts in compression_configs:\n        \n        def compress():\n            zarr.array(genotype_sample, chunks=chunks, compression=compression, \n                       compression_opts=compression_opts)\n            \n        t = timeit.Timer(stmt=compress, globals=locals())\n        compress_times = t.repeat(repeat=repeat, number=number)\n        c.append(compress_times)\n        \n        z = zarr.array(genotype_sample, chunks=chunks, compression=compression, \n                       compression_opts=compression_opts)\n        \n        def decompress():\n            z[:]\n            \n        t = timeit.Timer(stmt=decompress, globals=locals())\n        decompress_times = t.repeat(repeat=repeat, number=number)\n        d.append(decompress_times)\n        \n        log(compression, compression_opts, compress_times, decompress_times)\n        \n    return c, d\n```\n\n----------------------------------------\n\nTITLE: Creating and Profiling Bcolz Carray Copy Operations\nDESCRIPTION: This section creates in-memory Bcolz carrays and profiles their copy operations using Dask, comparing performance with and without locking, and with Bcolz's internal copy method.\nSOURCE: https://github.com/zarr-developers/zarr-python/blob/main/notebooks/dask_copy.ipynb#2025-04-16_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nc1 = bcolz.carray(a1, chunklen=chunks[0],\n                  cparams=bcolz.cparams(cname='lz4', clevel=1, shuffle=2))\nc1\n```\n\nLANGUAGE: python\nCODE:\n```\nc2 = bcolz.zeros(a1.shape, chunklen=chunks[0], dtype=a1.dtype, \n                 cparams=bcolz.cparams(cname='lz4', clevel=1, shuffle=2))\nc2\n```\n\nLANGUAGE: python\nCODE:\n```\nprofile_dask_copy(c1, c2, chunks, lock=True, dt=0.05)\n```\n\nLANGUAGE: python\nCODE:\n```\n# not sure it's safe to use bcolz without a lock, but what the heck...\nprofile_dask_copy(c1, c2, chunks, lock=False, dt=0.05)\n```\n\nLANGUAGE: python\nCODE:\n```\n# for comparison\n%timeit -n3 -r5 c2[:] = c1\n```\n\nLANGUAGE: python\nCODE:\n```\n# for comparison\n%timeit -n3 -r5 c1.copy()\n```\n\n----------------------------------------\n\nTITLE: Displaying Zarr Array Information in Python\nDESCRIPTION: Accesses and displays the information of the Zarr array 'z', which may include metadata, shape, and data type details.\nSOURCE: https://github.com/zarr-developers/zarr-python/blob/main/notebooks/repr_info.ipynb#2025-04-16_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nz.info\n```\n\n----------------------------------------\n\nTITLE: Defining Compression Configurations\nDESCRIPTION: Creates a comprehensive list of compression configurations testing different algorithms (zlib, bz2, lzma, blosc) with various compression levels and shuffle options.\nSOURCE: https://github.com/zarr-developers/zarr-python/blob/main/notebooks/genotype_benchmark_compressors.ipynb#2025-04-16_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ncompression_configs = (\n    (None, None),\n    ('zlib', 1),\n    ('bz2', 1),\n    ('lzma', dict(preset=1)),\n    ('blosc', dict(cname='snappy', clevel=0, shuffle=0)),\n    ('blosc', dict(cname='snappy', clevel=0, shuffle=2)),\n    ('blosc', dict(cname='snappy', clevel=9, shuffle=0)),\n    ('blosc', dict(cname='snappy', clevel=9, shuffle=2)),\n    ('blosc', dict(cname='blosclz', clevel=1, shuffle=0)),\n    ('blosc', dict(cname='blosclz', clevel=1, shuffle=2)),\n    ('blosc', dict(cname='blosclz', clevel=5, shuffle=0)),\n    ('blosc', dict(cname='blosclz', clevel=5, shuffle=2)),\n    ('blosc', dict(cname='blosclz', clevel=9, shuffle=0)),\n    ('blosc', dict(cname='blosclz', clevel=9, shuffle=2)),\n    ('blosc', dict(cname='lz4', clevel=1, shuffle=0)),\n    ('blosc', dict(cname='lz4', clevel=1, shuffle=2)),\n    ('blosc', dict(cname='lz4', clevel=5, shuffle=0)),\n    ('blosc', dict(cname='lz4', clevel=5, shuffle=2)),\n    ('blosc', dict(cname='lz4', clevel=9, shuffle=0)),\n    ('blosc', dict(cname='lz4', clevel=9, shuffle=2)),\n    ('blosc', dict(cname='lz4hc', clevel=1, shuffle=0)),\n    ('blosc', dict(cname='lz4hc', clevel=1, shuffle=2)),\n    ('blosc', dict(cname='lz4hc', clevel=3, shuffle=0)),\n    ('blosc', dict(cname='lz4hc', clevel=3, shuffle=2)),\n    ('blosc', dict(cname='zstd', clevel=1, shuffle=0)),\n    ('blosc', dict(cname='zstd', clevel=1, shuffle=2)),\n    ('blosc', dict(cname='zstd', clevel=3, shuffle=0)),\n    ('blosc', dict(cname='zstd', clevel=3, shuffle=2)),\n    ('blosc', dict(cname='zstd', clevel=5, shuffle=0)),\n    ('blosc', dict(cname='zstd', clevel=5, shuffle=2)),\n    ('blosc', dict(cname='zlib', clevel=1, shuffle=0)),\n    ('blosc', dict(cname='zlib', clevel=1, shuffle=2)),\n    ('blosc', dict(cname='zlib', clevel=3, shuffle=0)),\n    ('blosc', dict(cname='zlib', clevel=3, shuffle=2)),\n    ('blosc', dict(cname='zlib', clevel=5, shuffle=0)),\n    ('blosc', dict(cname='zlib', clevel=5, shuffle=2)),\n)\n```\n\n----------------------------------------\n\nTITLE: Creating and Profiling HDF5 Dataset Copy Operations\nDESCRIPTION: This section creates in-memory HDF5 datasets and profiles their copy operations using Dask, comparing performance with and without locking.\nSOURCE: https://github.com/zarr-developers/zarr-python/blob/main/notebooks/dask_copy.ipynb#2025-04-16_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nh5f = h5fmem()\nh5f\n```\n\nLANGUAGE: python\nCODE:\n```\nh1 = h5f.create_dataset('h1', data=a1, chunks=chunks, compression='lzf', shuffle=True)\nh5d_diagnostics(h1)\n```\n\nLANGUAGE: python\nCODE:\n```\nh2 = h5f.create_dataset('h2', shape=h1.shape, chunks=h1.chunks, \n                        compression=h1.compression, compression_opts=h1.compression_opts, \n                        shuffle=h1.shuffle)\nh5d_diagnostics(h2)\n```\n\nLANGUAGE: python\nCODE:\n```\nprofile_dask_copy(h1, h2, chunks, lock=True, dt=0.1)\n```\n\nLANGUAGE: python\nCODE:\n```\nprofile_dask_copy(h1, h2, chunks, lock=False, dt=0.1)\n```\n\n----------------------------------------\n\nTITLE: 1D Integer Sparse Selection Benchmarking\nDESCRIPTION: Benchmarks integer sparse selection operations on 1D Zarr arrays compared to NumPy arrays.\nSOURCE: https://github.com/zarr-developers/zarr-python/blob/main/notebooks/advanced_indexing.ipynb#2025-04-16_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nix_sparse_int = np.random.choice(c.shape[0], size=c.shape[0]//10000, replace=True)\nix_sparse_int_sorted = ix_sparse_int.copy()\nix_sparse_int_sorted.sort()\nlen(ix_sparse_int)\n```\n\nLANGUAGE: python\nCODE:\n```\n%timeit c[ix_sparse_int_sorted]\n```\n\nLANGUAGE: python\nCODE:\n```\n%timeit c[ix_sparse_int]\n```\n\nLANGUAGE: python\nCODE:\n```\n%timeit zc.oindex[ix_sparse_int_sorted]\n```\n\nLANGUAGE: python\nCODE:\n```\n%timeit zc.vindex[ix_sparse_int_sorted]\n```\n\nLANGUAGE: python\nCODE:\n```\n%timeit zc.oindex[ix_sparse_int]\n```\n\nLANGUAGE: python\nCODE:\n```\n%timeit zc.vindex[ix_sparse_int]\n```\n\nLANGUAGE: python\nCODE:\n```\nprofile('zc.oindex[ix_sparse_int]')\n```\n\nLANGUAGE: python\nCODE:\n```\nprofile('zc.vindex[ix_sparse_int]')\n```\n\n----------------------------------------\n\nTITLE: Displaying Zarr Array in Python\nDESCRIPTION: Displays the Zarr array 'z' that was previously created, which may show its structure and basic information.\nSOURCE: https://github.com/zarr-developers/zarr-python/blob/main/notebooks/repr_info.ipynb#2025-04-16_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nz\n```\n\n----------------------------------------\n\nTITLE: Benchmarking Strided Indexing with h5py in Python\nDESCRIPTION: Times the execution of strided indexing (every 1000th element) on the h5py dataset.\nSOURCE: https://github.com/zarr-developers/zarr-python/blob/main/notebooks/advanced_indexing.ipynb#2025-04-16_snippet_30\n\nLANGUAGE: python\nCODE:\n```\n%time hc[::1000]\n```\n\n----------------------------------------\n\nTITLE: Benchmarking Zarr Coordinate Selection in Python\nDESCRIPTION: Times the execution of Zarr coordinate selection using the vindex accessor and previously generated indices.\nSOURCE: https://github.com/zarr-developers/zarr-python/blob/main/notebooks/advanced_indexing.ipynb#2025-04-16_snippet_23\n\nLANGUAGE: python\nCODE:\n```\n%timeit zd.vindex[ix0, ix1]\n```\n\n----------------------------------------\n\nTITLE: Store Import Changes in Zarr-Python 3\nDESCRIPTION: Demonstrates the changes in import paths for store implementations between Zarr-Python 2 and 3. MemoryStore and DirectoryStore (now LocalStore) have moved to the zarr.storage module.\nSOURCE: https://github.com/zarr-developers/zarr-python/blob/main/docs/user-guide/v3_migration.rst#2025-04-16_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n# Before (v2)\n- from zarr import MemoryStore, DirectoryStore\n+ from zarr.storage import MemoryStore, LocalStore  # LocalStore replaces DirectoryStore\n```\n\n----------------------------------------\n\nTITLE: Benchmarking NumPy Coordinate Selection in Python\nDESCRIPTION: Times the execution of NumPy coordinate selection using the previously generated indices.\nSOURCE: https://github.com/zarr-developers/zarr-python/blob/main/notebooks/advanced_indexing.ipynb#2025-04-16_snippet_22\n\nLANGUAGE: python\nCODE:\n```\n%timeit d[ix0, ix1]\n```\n\n----------------------------------------\n\nTITLE: Loading Condition for First Axis Selection in Python\nDESCRIPTION: This snippet loads a condition array used for selecting data along the first axis. It shows how to prepare selection criteria for multidimensional array operations.\nSOURCE: https://github.com/zarr-developers/zarr-python/blob/main/notebooks/dask_2d_subset.ipynb#2025-04-16_snippet_4\n\nLANGUAGE: python\nCODE:\n```\ndim0_condition = callset['3R/variants/FILTER_PASS'][:]\ndim0_condition.shape, dim0_condition.dtype, np.count_nonzero(dim0_condition)\n```\n\n----------------------------------------\n\nTITLE: Computing Sum of Dask Array\nDESCRIPTION: This code computes the sum of the Dask array along axis 1 and measures the execution time using the %time magic command.\nSOURCE: https://github.com/zarr-developers/zarr-python/blob/main/notebooks/zip_benchmark.ipynb#2025-04-16_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n%time d.sum(axis=1).compute()\n```\n\n----------------------------------------\n\nTITLE: Benchmarking NumPy Orthogonal Selection in Python\nDESCRIPTION: Times the execution of NumPy orthogonal selection using the previously generated indices.\nSOURCE: https://github.com/zarr-developers/zarr-python/blob/main/notebooks/advanced_indexing.ipynb#2025-04-16_snippet_19\n\nLANGUAGE: python\nCODE:\n```\n%timeit d[np.ix_(ix0, ix1)]\n```\n\n----------------------------------------\n\nTITLE: Generating Synthetic Selection Conditions in Python\nDESCRIPTION: These snippets create synthetic selection conditions for the first and second axes of the array. They show how to generate test conditions for array indexing operations.\nSOURCE: https://github.com/zarr-developers/zarr-python/blob/main/notebooks/dask_2d_subset.ipynb#2025-04-16_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nc = np.random.randint(0, 2, size=a.shape[0], dtype=bool)\n```\n\nLANGUAGE: python\nCODE:\n```\ns = sorted(np.random.choice(a.shape[1], size=100, replace=False))\n```\n\n----------------------------------------\n\nTITLE: Creating and Profiling NumPy Array Copy Operations\nDESCRIPTION: This section creates NumPy arrays and profiles their copy operations using Dask, comparing performance with and without locking.\nSOURCE: https://github.com/zarr-developers/zarr-python/blob/main/notebooks/dask_copy.ipynb#2025-04-16_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n# a1 = np.arange(400000000, dtype='i4')\na1 = np.random.normal(2000, 1000, size=200000000).astype('u2')\na1\n```\n\nLANGUAGE: python\nCODE:\n```\nhuman_readable_size(a1.nbytes)\n```\n\nLANGUAGE: python\nCODE:\n```\na2 = np.empty_like(a1)\n```\n\nLANGUAGE: python\nCODE:\n```\nchunks = 2**20,  # 4M\n```\n\nLANGUAGE: python\nCODE:\n```\n%time a2[:] = a1\n```\n\nLANGUAGE: python\nCODE:\n```\nprofile_dask_copy(a1, a2, chunks, lock=True, dt=.01)\n```\n\nLANGUAGE: python\nCODE:\n```\nprofile_dask_copy(a1, a2, chunks, lock=False, dt=.01)\n```\n\n----------------------------------------\n\nTITLE: Generating Random Indices for Second Axis Selection in Python\nDESCRIPTION: This code generates a sorted list of random indices for selecting data along the second axis. It demonstrates creating a random subset for data analysis.\nSOURCE: https://github.com/zarr-developers/zarr-python/blob/main/notebooks/dask_2d_subset.ipynb#2025-04-16_snippet_5\n\nLANGUAGE: python\nCODE:\n```\ndim1_indices = sorted(np.random.choice(765, size=100, replace=False))\n```\n\n----------------------------------------\n\nTITLE: Initializing Zarr and NumPy\nDESCRIPTION: Imports required libraries and checks Zarr version\nSOURCE: https://github.com/zarr-developers/zarr-python/blob/main/notebooks/blosc_microbench.ipynb#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport numpy as np\nimport zarr\nzarr.__version__\n```\n\n----------------------------------------\n\nTITLE: Testing Integer Array Operations\nDESCRIPTION: Creates a Zarr array with integer data type, performs write and read operations with timing measurements, and verifies data integrity\nSOURCE: https://github.com/zarr-developers/zarr-python/blob/main/notebooks/blosc_microbench.ipynb#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nz = zarr.empty(shape=100000000, chunks=200000, dtype='i8')\ndata = np.arange(100000000, dtype='i8')\n%timeit z[:] = data\n%timeit z[:]\nprint(z)\nassert np.all(z[:] == data)\n```\n\n----------------------------------------\n\nTITLE: Current Dependencies Configuration in Zarr-Python\nDESCRIPTION: List of the current required dependencies for Zarr-Python, showing the minimum version requirements. This is provided as context for potential changes in the 3.0 version.\nSOURCE: https://github.com/zarr-developers/zarr-python/blob/main/docs/developers/roadmap.rst#2025-04-16_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ndependencies = [\n    'asciitree',\n    'numpy>=1.20,!=1.21.0',\n    'fasteners',\n    'numcodecs>=0.10.0',\n]\n```\n\n----------------------------------------\n\nTITLE: Loading HDF5 Dataset\nDESCRIPTION: Opens an HDF5 file containing genotype data and accesses the genotype dataset.\nSOURCE: https://github.com/zarr-developers/zarr-python/blob/main/notebooks/genotype_benchmark_compressors.ipynb#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ncallset = h5py.File('/data/coluzzi/ag1000g/data/phase1/release/AR3/variation/main/hdf5/ag1000g.phase1.ar3.pass.h5',\n                    mode='r')\ngenotype = callset['3R/calldata/genotype']\ngenotype\n```\n\n----------------------------------------\n\nTITLE: Importing Required Libraries\nDESCRIPTION: Importing necessary Python libraries including zarr, bsddb3, lmdb, numpy, and dbm variants for storage benchmarking.\nSOURCE: https://github.com/zarr-developers/zarr-python/blob/main/notebooks/store_benchmark.ipynb#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport zarr\nimport bsddb3\nimport lmdb\nimport numpy as np\nimport dbm.gnu\nimport dbm.ndbm\n```\n\n----------------------------------------\n\nTITLE: Importing Required Libraries for Zarr Object Arrays\nDESCRIPTION: Import necessary libraries: numpy for numerical operations, zarr for array handling, and numcodecs for object encoding.\nSOURCE: https://github.com/zarr-developers/zarr-python/blob/main/notebooks/object_arrays.ipynb#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport numpy as np\n```\n\nLANGUAGE: python\nCODE:\n```\nimport zarr\nzarr.__version__\n```\n\nLANGUAGE: python\nCODE:\n```\nimport numcodecs\nnumcodecs.__version__\n```\n\n----------------------------------------\n\nTITLE: Plugin Entrypoint Configuration for Zarr-Python 3.0\nDESCRIPTION: Example of how plugin entrypoints might be configured in Zarr-Python 3.0. This shows the structure for registering custom codecs that can be discovered through Python's entrypoint mechanism.\nSOURCE: https://github.com/zarr-developers/zarr-python/blob/main/docs/developers/roadmap.rst#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nentry_points=\"\"\"\n    [zarr.codecs]\n    blosc_codec=codec_plugin:make_blosc_codec\n    zlib_codec=codec_plugin:make_zlib_codec\n\"\"\"\n```\n\n----------------------------------------\n\nTITLE: Importing and Checking Zarr Version\nDESCRIPTION: This snippet imports the Zarr library and prints its version. It also modifies the Python path to include the parent directory.\nSOURCE: https://github.com/zarr-developers/zarr-python/blob/main/notebooks/zip_benchmark.ipynb#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport sys\nsys.path.insert(0, '..')\nimport zarr\nzarr.__version__\n```\n\n----------------------------------------\n\nTITLE: Defining Main User Guide Structure with Sphinx Toctree in reStructuredText\nDESCRIPTION: Sets up the main toctree for the Zarr Python user guide, including links to basic documentation pages like installation, arrays, groups, attributes, storage, config, and v3 migration.\nSOURCE: https://github.com/zarr-developers/zarr-python/blob/main/docs/user-guide/index.rst#2025-04-16_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. toctree::\n    :maxdepth: 1\n\n    installation\n    arrays\n    groups\n    attributes\n    storage\n    config\n    v3_migration\n```\n\n----------------------------------------\n\nTITLE: Sample Bug Report Code Snippet in Python\nDESCRIPTION: Example code snippet format for submitting bug reports to the Zarr project.\nSOURCE: https://github.com/zarr-developers/zarr-python/blob/main/docs/developers/contributing.rst#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport zarr\ng = zarr.group()\n# etc.\n```\n\n----------------------------------------\n\nTITLE: Setting Up Test Environment for Zarr Documentation\nDESCRIPTION: Prepares the test environment by removing the 'data' directory if it exists and setting a random seed for NumPy to ensure reproducible examples.\nSOURCE: https://github.com/zarr-developers/zarr-python/blob/main/docs/quickstart.rst#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport shutil\nshutil.rmtree('data', ignore_errors=True)\n\nimport numpy as np\nnp.random.seed(0)\n```\n\n----------------------------------------\n\nTITLE: Blosc Decompression with Buffer Management in Cython\nDESCRIPTION: Performs Blosc decompression with proper buffer management and error handling. Supports both threaded and non-threaded decompression paths, releases buffers appropriately, and checks for compression errors.\nSOURCE: https://github.com/zarr-developers/zarr-python/blob/main/bench/compress_normal.txt#2025-04-16_snippet_3\n\nLANGUAGE: cython\nCODE:\n```\nret = blosc_decompress(source_ptr, dest_ptr, nbytes)\nelse:\n    with nogil:\n        ret = blosc_decompress_ctx(source_ptr, dest_ptr, nbytes, 1)\n\n# release buffers\nif release_source_buffer:\n    PyBuffer_Release(&source_buffer)\nPyBuffer_Release(&dest_buffer)\n\n# handle errors\nif ret <= 0:\n    raise RuntimeError('error during blosc decompression: %d' % ret)\n```\n\n----------------------------------------\n\nTITLE: Testing and Coverage Commands\nDESCRIPTION: Commands for running tests and generating coverage reports.\nSOURCE: https://github.com/zarr-developers/zarr-python/blob/main/docs/developers/contributing.rst#2025-04-16_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n$ hatch env run --env test.py3.12-2.1-optional run-pytest\n$ hatch env run --env test.py3.12-2.1-optional run-coverage\n$ hatch env run --env test.py3.12-2.1-optional run-coverage-html\n```\n\n----------------------------------------\n\nTITLE: Profiling Blosc Decompression Function in Cython\nDESCRIPTION: Line-by-line profiling of the decompress function in the Blosc Cython implementation. The majority of time (98.0%) is spent on the actual decompression operation using threads.\nSOURCE: https://github.com/zarr-developers/zarr-python/blob/main/bench/compress_normal.txt#2025-04-16_snippet_2\n\nLANGUAGE: cython\nCODE:\n```\ndef decompress(source, dest):\n    \"\"\"Decompress data.\n\n    Parameters\n    ----------\n    source : bytes-like\n        Compressed data, including blosc header.\n    dest : array-like\n        Object to decompress into.\n\n    Notes\n    -----\n    Assumes that the size of the destination buffer is correct for the size of\n    the uncompressed data.\n\n    \"\"\"\n    cdef:\n        int ret\n        char *source_ptr\n        char *dest_ptr\n        Py_buffer source_buffer\n        array.array source_array\n        Py_buffer dest_buffer\n        size_t nbytes\n\n    # setup source buffer\n    if PY2 and isinstance(source, array.array):\n        # workaround fact that array.array does not support new-style buffer\n        # interface in PY2\n        release_source_buffer = False\n        source_array = source\n        source_ptr = <char *> source_array.data.as_voidptr\n    else:\n        release_source_buffer = True\n        PyObject_GetBuffer(source, &source_buffer, PyBUF_ANY_CONTIGUOUS)\n        source_ptr = <char *> source_buffer.buf\n\n    # setup destination buffer\n    PyObject_GetBuffer(dest, &dest_buffer,\n                       PyBUF_ANY_CONTIGUOUS | PyBUF_WRITEABLE)\n    dest_ptr = <char *> dest_buffer.buf\n    nbytes = dest_buffer.len\n\n    # perform decompression\n    if _get_use_threads():\n        # allow blosc to use threads internally\n        with nogil:\n```\n\n----------------------------------------\n\nTITLE: Git Branch Management Commands\nDESCRIPTION: Commands for creating and managing feature branches in Git.\nSOURCE: https://github.com/zarr-developers/zarr-python/blob/main/docs/developers/contributing.rst#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ngit checkout main\ngit fetch upstream\ngit checkout -b shiny-new-feature upstream/main\ngit push -u origin shiny-new-feature\n```\n\n----------------------------------------\n\nTITLE: Creating Object Array with Codec in Filters (Deprecated)\nDESCRIPTION: Show that providing an object codec via filters issues a warning but doesn't raise an error, maintaining API backward-compatibility.\nSOURCE: https://github.com/zarr-developers/zarr-python/blob/main/notebooks/object_arrays.ipynb#2025-04-16_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nz = zarr.empty(10, chunks=5, dtype=object, filters=[numcodecs.MsgPack()])\n```\n\n----------------------------------------\n\nTITLE: Hypothesis Testing Array Strategy Example\nDESCRIPTION: Example showing usage of array metadata generation for testing purposes\nSOURCE: https://github.com/zarr-developers/zarr-python/blob/main/docs/release-notes.rst#2025-04-16_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nzarr.testing.strategies.array_metadata\n```\n\n----------------------------------------\n\nTITLE: Benchmarking Full Dataset Read with h5py in Python\nDESCRIPTION: Times the execution of reading the entire dataset from the h5py file.\nSOURCE: https://github.com/zarr-developers/zarr-python/blob/main/notebooks/advanced_indexing.ipynb#2025-04-16_snippet_28\n\nLANGUAGE: python\nCODE:\n```\n%time hc[:]\n```\n\n----------------------------------------\n\nTITLE: Installing Zarr using pip\nDESCRIPTION: Command to install Zarr Python library using pip package manager. Supports optional dependency groups like 'gpu' and 'remote' that can be installed using the extras syntax.\nSOURCE: https://github.com/zarr-developers/zarr-python/blob/main/docs/user-guide/installation.rst#2025-04-16_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ pip install zarr\n```\n\n----------------------------------------\n\nTITLE: GPU Configuration Example\nDESCRIPTION: Example showing how to enable GPU support in Zarr configuration\nSOURCE: https://github.com/zarr-developers/zarr-python/blob/main/docs/release-notes.rst#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nzarr.config.enable_gpu()\n```\n\n----------------------------------------\n\nTITLE: Benchmarking Sparse Boolean Indexing with h5py in Python\nDESCRIPTION: Times the execution of sparse boolean indexing on the h5py dataset.\nSOURCE: https://github.com/zarr-developers/zarr-python/blob/main/notebooks/advanced_indexing.ipynb#2025-04-16_snippet_29\n\nLANGUAGE: python\nCODE:\n```\n%time hc[ix_sparse_bool]\n```\n\n----------------------------------------\n\nTITLE: Creating In-Memory h5py File in Python\nDESCRIPTION: Creates a temporary in-memory h5py file for performance comparison.\nSOURCE: https://github.com/zarr-developers/zarr-python/blob/main/notebooks/advanced_indexing.ipynb#2025-04-16_snippet_26\n\nLANGUAGE: python\nCODE:\n```\nh5f = h5py.File(tempfile.mktemp(), driver='core', backing_store=False)\n```\n\n----------------------------------------\n\nTITLE: Installing Zarr with pip\nDESCRIPTION: Command to install the Zarr library using pip package manager.\nSOURCE: https://github.com/zarr-developers/zarr-python/blob/main/docs/quickstart.rst#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npip install zarr\n```\n\n----------------------------------------\n\nTITLE: Importing h5py and tempfile for Comparison in Python\nDESCRIPTION: Imports necessary libraries for comparing Zarr performance with h5py.\nSOURCE: https://github.com/zarr-developers/zarr-python/blob/main/notebooks/advanced_indexing.ipynb#2025-04-16_snippet_25\n\nLANGUAGE: python\nCODE:\n```\nimport h5py\nimport tempfile\n```\n\n----------------------------------------\n\nTITLE: Installing Zarr via pip\nDESCRIPTION: Command to install the Zarr package using Python's pip package manager from PyPI.\nSOURCE: https://github.com/zarr-developers/zarr-python/blob/main/README.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install zarr\n```\n\n----------------------------------------\n\nTITLE: Profiling Blosc Compression Function in Cython\nDESCRIPTION: Line-by-line profiling of the compress function in the Blosc Cython implementation. It shows the time spent on each line, with the majority of time (97.1%) spent on the actual compression operation.\nSOURCE: https://github.com/zarr-developers/zarr-python/blob/main/bench/compress_normal.txt#2025-04-16_snippet_1\n\nLANGUAGE: cython\nCODE:\n```\ndef compress(source, char* cname, int clevel, int shuffle):\n    \"\"\"Compress data in a numpy array.\n\n    Parameters\n    ----------\n    source : array-like\n        Data to be compressed.\n    cname : bytes\n        Name of compression library to use.\n    clevel : int\n        Compression level.\n    shuffle : int\n        Shuffle filter.\n\n    Returns\n    -------\n    dest : bytes-like\n        Compressed data.\n\n    \"\"\"\n\n    cdef:\n        char *source_ptr\n        char *dest_ptr\n        Py_buffer source_buffer\n        size_t nbytes, cbytes, itemsize\n        array.array char_array_template = array.array('b', [])\n        array.array dest\n\n    # setup source buffer\n    PyObject_GetBuffer(source, &source_buffer, PyBUF_ANY_CONTIGUOUS)\n    source_ptr = <char *> source_buffer.buf\n\n    # setup destination\n    nbytes = source_buffer.len\n    itemsize = source_buffer.itemsize\n    dest = array.clone(char_array_template, nbytes + BLOSC_MAX_OVERHEAD,\n                       zero=False)\n    dest_ptr = <char *> dest.data.as_voidptr\n\n    # perform compression\n    if _get_use_threads():\n        # allow blosc to use threads internally\n        compressor_set = blosc_set_compressor(cname)\n        if compressor_set < 0:\n            raise ValueError('compressor not supported: %r' % cname)\n        with nogil:\n            cbytes = blosc_compress(clevel, shuffle, itemsize, nbytes,\n                                    source_ptr, dest_ptr,\n                                    nbytes + BLOSC_MAX_OVERHEAD)\n\n    else:\n        with nogil:\n            cbytes = blosc_compress_ctx(clevel, shuffle, itemsize, nbytes,\n                                        source_ptr, dest_ptr,\n                                        nbytes + BLOSC_MAX_OVERHEAD, cname,\n                                        0, 1)\n\n    # release source buffer\n    PyBuffer_Release(&source_buffer)\n\n    # check compression was successful\n    if cbytes <= 0:\n        raise RuntimeError('error during blosc compression: %d' % cbytes)\n\n    # resize after compression\n    array.resize(dest, cbytes)\n\n    return dest\n```\n\n----------------------------------------\n\nTITLE: Alternative Zarr Import\nDESCRIPTION: Imports Zarr from a local path and checks version, demonstrating development environment setup\nSOURCE: https://github.com/zarr-developers/zarr-python/blob/main/notebooks/blosc_microbench.ipynb#2025-04-16_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport numpy as np\nimport sys\nsys.path.insert(0, '..')\nimport zarr\nzarr.__version__\n```\n\n----------------------------------------\n\nTITLE: Installing Zarr-Python 2.x\nDESCRIPTION: Command to install the latest Zarr-Python 2 release using pip. This is useful for those who need to continue using the 2.x series.\nSOURCE: https://github.com/zarr-developers/zarr-python/blob/main/docs/user-guide/v3_migration.rst#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ pip install \"zarr==2.*\"\n```\n\n----------------------------------------\n\nTITLE: Creating Compressed Dataset in h5py File in Python\nDESCRIPTION: Creates a compressed dataset in the h5py file with similar parameters to the Zarr array for comparison.\nSOURCE: https://github.com/zarr-developers/zarr-python/blob/main/notebooks/advanced_indexing.ipynb#2025-04-16_snippet_27\n\nLANGUAGE: python\nCODE:\n```\nhc = h5f.create_dataset('c', data=c, compression='gzip', compression_opts=1, chunks=zc.chunks, shuffle=True)\nhc\n```\n\n----------------------------------------\n\nTITLE: Importing and Checking Dask Version\nDESCRIPTION: This code imports Dask and its array module, then prints the Dask version.\nSOURCE: https://github.com/zarr-developers/zarr-python/blob/main/notebooks/zip_benchmark.ipynb#2025-04-16_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport dask\nimport dask.array as da\ndask.__version__\n```\n\n----------------------------------------\n\nTITLE: Development Environment Setup Commands\nDESCRIPTION: Commands for setting up a development environment using Hatch package manager.\nSOURCE: https://github.com/zarr-developers/zarr-python/blob/main/docs/developers/contributing.rst#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ pip install hatch\n$ hatch env show\n```\n\n----------------------------------------\n\nTITLE: Git Repository Setup Commands\nDESCRIPTION: Commands for cloning and configuring the Zarr Python repository for development.\nSOURCE: https://github.com/zarr-developers/zarr-python/blob/main/docs/developers/contributing.rst#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ git clone git@github.com:your-user-name/zarr-python.git\n$ cd zarr-python\n$ git remote add upstream git@github.com:zarr-developers/zarr-python.git\n```\n\n----------------------------------------\n\nTITLE: Git Update Branch Commands\nDESCRIPTION: Commands for updating a feature branch with latest upstream changes.\nSOURCE: https://github.com/zarr-developers/zarr-python/blob/main/docs/developers/contributing.rst#2025-04-16_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ngit fetch upstream\ngit rebase upstream/main\n```\n\n----------------------------------------\n\nTITLE: Creating Changelog Entry with Towncrier\nDESCRIPTION: Command for creating a new changelog entry using towncrier. Used during development to document changes like features, bugfixes, or documentation updates.\nSOURCE: https://github.com/zarr-developers/zarr-python/blob/main/docs/developers/contributing.rst#2025-04-16_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ntowncrier create\n```\n\n----------------------------------------\n\nTITLE: Handling NaN Fill Value Serialization in Zarr Python\nDESCRIPTION: The code addresses the serialization of NaN (Not a Number) fill values in ArrayV2Metadata to ensure consistent behavior when serializing and deserializing metadata. Special handling is implemented for NaN values to maintain data integrity during round-trip operations.\nSOURCE: https://github.com/zarr-developers/zarr-python/blob/main/changes/2802.fix.rst#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfill_value = NaN\nArrayV2Metadata\n```\n\n----------------------------------------\n\nTITLE: Defining Advanced Topics Structure with Sphinx Toctree in reStructuredText\nDESCRIPTION: Sets up a secondary toctree for advanced Zarr Python documentation topics, including performance, consolidated metadata, extending the library, and GPU support.\nSOURCE: https://github.com/zarr-developers/zarr-python/blob/main/docs/user-guide/index.rst#2025-04-16_snippet_1\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. toctree::\n    :maxdepth: 1\n\n    performance\n    consolidated_metadata\n    extending\n    gpu\n```\n\n----------------------------------------\n\nTITLE: Importing and Cleanup in Python\nDESCRIPTION: Imports the shutil module and removes a 'data' directory for clean test execution.\nSOURCE: https://github.com/zarr-developers/zarr-python/blob/main/docs/user-guide/storage.rst#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n>>> import shutil\n>>> shutil.rmtree('data', ignore_errors=True)\n```\n\n----------------------------------------\n\nTITLE: Array Deletion Syntax Example\nDESCRIPTION: Example showing the syntax for deleting a key from array attributes in Zarr\nSOURCE: https://github.com/zarr-developers/zarr-python/blob/main/docs/release-notes.rst#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ndel z.attrs['key']\n```\n\n----------------------------------------\n\nTITLE: Configuring Zarr Python Plugin Entry Points\nDESCRIPTION: This INI configuration defines various entry points for the Zarr Python project. It includes configurations for codecs, buffers, and codec pipelines, specifying the package and class for each entry point.\nSOURCE: https://github.com/zarr-developers/zarr-python/blob/main/tests/package_with_entrypoint-0.1.dist-info/entry_points.txt#2025-04-16_snippet_0\n\nLANGUAGE: INI\nCODE:\n```\n[zarr.codecs]\ntest = package_with_entrypoint:TestEntrypointCodec\n[zarr.codecs.test]\nanother_codec = package_with_entrypoint:TestEntrypointGroup.Codec\n[zarr]\ncodec_pipeline = package_with_entrypoint:TestEntrypointCodecPipeline\nndbuffer = package_with_entrypoint:TestEntrypointNDBuffer\nbuffer = package_with_entrypoint:TestEntrypointBuffer\n[zarr.buffer]\nanother_buffer = package_with_entrypoint:TestEntrypointGroup.Buffer\n[zarr.ndbuffer]\nanother_ndbuffer = package_with_entrypoint:TestEntrypointGroup.NDBuffer\n[zarr.codec_pipeline]\nanother_pipeline = package_with_entrypoint:TestEntrypointGroup.Pipeline\n```\n\n----------------------------------------\n\nTITLE: Changelog Entry File Format Example\nDESCRIPTION: Demonstrates the required file naming pattern for changelog entries, where xxxx represents the PR number and type indicates the nature of the change (feature, bugfix, doc, removal, or misc).\nSOURCE: https://github.com/zarr-developers/zarr-python/blob/main/changes/README.md#2025-04-16_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\nxxxx.<type>.rst\n```\n\n----------------------------------------\n\nTITLE: Creating Table of Contents for Zarr Python Developer's Guide in reStructuredText\nDESCRIPTION: This snippet creates a table of contents using reStructuredText syntax. It includes links to 'contributing' and 'roadmap' documents, with a maximum depth of 1 for the table structure.\nSOURCE: https://github.com/zarr-developers/zarr-python/blob/main/docs/developers/index.rst#2025-04-16_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. toctree::\n    :maxdepth: 1\n\n    contributing\n    roadmap\n```\n\n----------------------------------------\n\nTITLE: Commented Future Documentation Section in reStructuredText\nDESCRIPTION: A commented placeholder for a future documentation section on asynchronous operations in Zarr Python.\nSOURCE: https://github.com/zarr-developers/zarr-python/blob/main/docs/user-guide/index.rst#2025-04-16_snippet_2\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. Coming soon\n    async\n```\n\n----------------------------------------\n\nTITLE: RST Documentation Structure\nDESCRIPTION: ReStructuredText markup defining the documentation homepage structure for Zarr-Python, including navigation tree, section headers, and grid layout for main documentation sections.\nSOURCE: https://github.com/zarr-developers/zarr-python/blob/main/docs/index.rst#2025-04-16_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. _zarr_docs_mainpage:\n\n***********\nZarr-Python\n***********\n\n.. toctree::\n    :maxdepth: 1\n    :hidden:\n\n    quickstart\n    user-guide/index\n    API reference <api/zarr/index>\n    release-notes\n    developers/index\n    about\n```\n\n----------------------------------------\n\nTITLE: Configuring Git Attributes Format Placeholders\nDESCRIPTION: Git attributes configuration that defines format placeholders for repository metadata including commit hash, commit date, tag descriptions and reference names.\nSOURCE: https://github.com/zarr-developers/zarr-python/blob/main/.git_archival.txt#2025-04-16_snippet_0\n\nLANGUAGE: git\nCODE:\n```\nnode: $Format:%H$\nnode-date: $Format:%cI$\ndescribe-name: $Format:%(describe:tags=true,match=*[0-9]*)$\nref-names: $Format:%D$\n```"
  }
]