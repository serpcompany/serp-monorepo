[
  {
    "owner": "panda-re",
    "repo": "panda-ng",
    "content": "TITLE: Defining Linux System Call Prototypes in C\nDESCRIPTION: This code snippet lists multiple C function prototypes for Linux system calls, each prefixed with its syscall number as a comment, followed by the 'long sys_<name>' signature. The functions cover core kernel functionality such as file IO (read, write, open), process management (fork, execve, wait4), networking (socket, connect, accept), memory management (mmap, brk), and more. Parameters are annotated with '__user' to indicate pointers from user space. Each prototype defines parameter types, order, and constraints expected by the syscall dispatcher in kernel space. Inputs and outputs are enforced by argument types and return values, with no function bodies included. This design supports syscall table auto-generation or inclusion for kernel development and maintenance. Dependencies include Linux kernel headers for types like 'struct stat', 'fd_set', 'gid_t', etc. Users must ensure matching types and understand the parameter constraints to avoid kernel bugs. The snippet assumes a C99 (or later) codebase and relies on certain kernel-specific macros and user-space pointer annotations.\nSOURCE: https://github.com/panda-re/panda-ng/blob/main/plugins/syscalls2/generated-in/linux_mips64n32_prototypes.txt#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n6000 long sys_read(unsigned int fd, char __user *buf, size_t count);\n6001 long sys_write(unsigned int fd, const char __user *buf, size_t count);\n6002 long sys_open(const char __user *filename, int flags, umode_t mode);\n6003 long sys_close(unsigned int fd);\n6004 long sys_newstat(const char __user *filename, struct stat __user *statbuf);\n6005 long sys_newfstat(unsigned int fd, struct stat __user *statbuf);\n6006 long sys_newlstat(const char __user *filename, struct stat __user *statbuf);\n6007 long sys_poll(struct pollfd __user *ufds, unsigned int nfds, int timeout);\n6008 long sys_lseek(unsigned int fd, off_t offset, unsigned int whence);\n6009 long sys_old_mmap(struct mmap_arg_struct __user *arg);\n6010 long sys_mprotect(unsigned long start, size_t len, unsigned long prot);\n6011 long sys_munmap(unsigned long addr, size_t len);\n6012 long sys_brk(unsigned long brk);\n6013 long sys_rt_sigaction(int, const struct sigaction __user *, struct sigaction __user *, size_t);\n6014 long sys_rt_sigprocmask(int how, sigset_t __user *set, sigset_t __user *oset, size_t sigsetsize);\n6015 long sys_ioctl(unsigned int fd, unsigned int cmd, unsigned long arg);\n6016 long sys_pread64(unsigned int fd, char __user *buf, size_t count, loff_t pos);\n6017 long sys_pwrite64(unsigned int fd, const char __user *buf, size_t count, loff_t pos);\n6018 long sys_readv(unsigned long fd, const struct iovec __user *vec, unsigned long vlen);\n6019 long sys_writev(unsigned long fd, const struct iovec __user *vec, unsigned long vlen);\n6020 long sys_access(const char __user *filename, int mode);\n6021 long sys_pipe(int __user *fildes);\n6022 long sys_select(int n, fd_set __user *inp, fd_set __user *outp, fd_set __user *exp, struct __kernel_old_timeval __user *tvp);\n6023 long sys_sched_yield(void);\n6024 long sys_mremap(unsigned long addr, unsigned long old_len, unsigned long new_len, unsigned long flags, unsigned long new_addr);\n6025 long sys_msync(unsigned long start, size_t len, int flags);\n6026 long sys_mincore(unsigned long start, size_t len, unsigned char __user *vec);\n6027 long sys_madvise(unsigned long start, size_t len, int behavior);\n6028 long sys_shmget(key_t key, size_t size, int flag);\n6029 long sys_shmat(int shmid, char __user *shmaddr, int shmflg);\n6030 long sys_old_shmctl(int shmid, int cmd, struct shmid_ds __user *buf);\n6031 long sys_dup(unsigned int fildes);\n6032 long sys_dup2(unsigned int oldfd, unsigned int newfd);\n6033 long sys_pause(void);\n6034 long sys_nanosleep_time32(struct old_timespec32 __user *rqtp, struct old_timespec32 __user *rmtp);\n6035 long sys_getitimer(int which, struct __kernel_old_itimerval __user *value);\n6036 long sys_setitimer(int which, struct __kernel_old_itimerval __user *value, struct __kernel_old_itimerval __user *ovalue);\n6037 long sys_alarm(unsigned int seconds);\n6038 long sys_getpid(void);\n6039 long sys_sendfile(int out_fd, int in_fd, off_t __user *offset, size_t count);\n6040 long sys_socket(int, int, int);\n6041 long sys_connect(int, struct sockaddr __user *, int);\n6042 long sys_accept(int, struct sockaddr __user *, int __user *);\n6043 long sys_sendto(int, void __user *, size_t, unsigned, struct sockaddr __user *, int);\n6044 long sys_recvfrom(int, void __user *, size_t, unsigned, struct sockaddr __user *, int __user *);\n6045 long sys_sendmsg(int fd, struct user_msghdr __user *msg, unsigned flags);\n6046 long sys_recvmsg(int fd, struct user_msghdr __user *msg, unsigned flags);\n6047 long sys_shutdown(int, int);\n6048 long sys_bind(int, struct sockaddr __user *, int);\n6049 long sys_listen(int, int);\n6050 long sys_getsockname(int, struct sockaddr __user *, int __user *);\n6051 long sys_getpeername(int, struct sockaddr __user *, int __user *);\n6052 long sys_socketpair(int, int, int, int __user *);\n6053 long sys_setsockopt(int fd, int level, int optname, char __user *optval, int optlen);\n6054 long sys_getsockopt(int fd, int level, int optname, char __user *optval, int __user *optlen);\n6055 long sys_clone(unsigned long, unsigned long, int __user *, int __user *, unsigned long);\n6056 long sys_fork(void);\n6057 long sys_execve(const char __user *filename, const char __user *const __user *argv, const char __user *const __user *envp);\n6058 long sys_exit(int error_code);\n6059 long sys_wait4(pid_t pid, int __user *stat_addr, int options, struct rusage __user *ru);\n6060 long sys_kill(pid_t pid, int sig);\n6061 long sys_newuname(struct new_utsname __user *name);\n6062 long sys_semget(key_t key, int nsems, int semflg);\n6063 long sys_semop(int semid, struct sembuf __user *sops, unsigned nsops);\n6064 long sys_semctl(int semid, int semnum, int cmd, unsigned long arg);\n6065 long sys_shmdt(char __user *shmaddr);\n6066 long sys_msgget(key_t key, int msgflg);\n6067 long sys_msgsnd(int msqid, struct msgbuf __user *msgp, size_t msgsz, int msgflg);\n6068 long sys_msgrcv(int msqid, struct msgbuf __user *msgp, size_t msgsz, long msgtyp, int msgflg);\n6069 long sys_old_msgctl(int msqid, int cmd, struct msqid_ds __user *buf);\n6070 long sys_fcntl(unsigned int fd, unsigned int cmd, unsigned long arg);\n6071 long sys_flock(unsigned int fd, unsigned int cmd);\n6072 long sys_fsync(unsigned int fd);\n6073 long sys_fdatasync(unsigned int fd);\n6074 long sys_truncate(const char __user *path, long length);\n6075 long sys_ftruncate(unsigned int fd, unsigned long length);\n6076 long sys_getdents(unsigned int fd, struct linux_dirent __user *dirent, unsigned int count);\n6077 long sys_getcwd(char __user *buf, unsigned long size);\n6078 long sys_chdir(const char __user *filename);\n6079 long sys_fchdir(unsigned int fd);\n6080 long sys_rename(const char __user *oldname, const char __user *newname);\n6081 long sys_mkdir(const char __user *pathname, umode_t mode);\n6082 long sys_rmdir(const char __user *pathname);\n6083 long sys_creat(const char __user *pathname, umode_t mode);\n6084 long sys_link(const char __user *oldname, const char __user *newname);\n6085 long sys_unlink(const char __user *pathname);\n6086 long sys_symlink(const char __user *old, const char __user *new);\n6087 long sys_readlink(const char __user *path, char __user *buf, int bufsiz);\n6088 long sys_chmod(const char __user *filename, umode_t mode);\n6089 long sys_fchmod(unsigned int fd, umode_t mode);\n6090 long sys_chown(const char __user *filename, uid_t user, gid_t group);\n6091 long sys_fchown(unsigned int fd, uid_t user, gid_t group);\n6092 long sys_lchown(const char __user *filename, uid_t user, gid_t group);\n6093 long sys_umask(int mask);\n6094 long sys_gettimeofday(struct __kernel_old_timeval __user *tv, struct timezone __user *tz);\n6095 long sys_getrlimit(unsigned int resource, struct rlimit __user *rlim);\n6096 long sys_getrusage(int who, struct rusage __user *ru);\n6097 long sys_sysinfo(struct sysinfo __user *info);\n6098 long sys_times(struct tms __user *tbuf);\n6099 long sys_ptrace(long request, long pid, unsigned long addr, unsigned long data);\n6100 long sys_getuid(void);\n6101 long sys_syslog(int type, char __user *buf, int len);\n6102 long sys_getgid(void);\n6103 long sys_setuid(uid_t uid);\n6104 long sys_setgid(gid_t gid);\n6105 long sys_geteuid(void);\n6106 long sys_getegid(void);\n6107 long sys_setpgid(pid_t pid, pid_t pgid);\n6108 long sys_getppid(void);\n6109 long sys_getpgrp(void);\n6110 long sys_setsid(void);\n6111 long sys_setreuid(uid_t ruid, uid_t euid);\n6112 long sys_setregid(gid_t rgid, gid_t egid);\n6113 long sys_getgroups(int gidsetsize, gid_t __user *grouplist);\n6114 long sys_setgroups(int gidsetsize, gid_t __user *grouplist);\n6115 long sys_setresuid(uid_t ruid, uid_t euid, uid_t suid);\n6116 long sys_getresuid(uid_t __user *ruid, uid_t __user *euid, uid_t __user *suid);\n6117 long sys_setresgid(gid_t rgid, gid_t egid, gid_t sgid);\n6118 long sys_getresgid(gid_t __user *rgid, gid_t __user *egid, gid_t __user *sgid);\n6119 long sys_getpgid(pid_t pid);\n6120 long sys_setfsuid(uid_t uid);\n6121 long sys_setfsgid(gid_t gid);\n6122 long sys_getsid(pid_t pid);\n6123 long sys_capget(cap_user_header_t header, cap_user_data_t dataptr);\n6124 long sys_capset(cap_user_header_t header, const cap_user_data_t data);\n6125 long sys_rt_sigpending(sigset_t __user *set, size_t sigsetsize);\n6126 long sys_io_getevents_time32(__u32 ctx_id, __s32 min_nr, __s32 nr, struct io_event __user *events, struct old_timespec32 __user *timeout);\n6127 long sys_rt_sigqueueinfo(pid_t pid, int sig, siginfo_t __user *uinfo);\n6128 long sys_rt_sigsuspend(sigset_t __user *unewset, size_t sigsetsize);\n6129 long sys_sigaltstack(const struct sigaltstack __user *uss, struct sigaltstack __user *uoss);\n6130 long sys_utime32(const char __user *filename, struct old_utimbuf32 __user *t);\n6131 long sys_mknod(const char __user *filename, umode_t mode, unsigned dev);\n6132 long sys_personality(unsigned int personality);\n6133 long sys_ustat(unsigned dev, struct ustat __user *ubuf);\n6134 long sys_statfs(const char __user *path, struct statfs __user *buf);\n6135 long sys_fstatfs(unsigned int fd, struct statfs __user *buf);\n6136 long sys_sysfs(int option, unsigned long arg1, unsigned long arg2);\n6137 long sys_getpriority(int which, int who);\n6138 long sys_setpriority(int which, int who, int niceval);\n6139 long sys_sched_setparam(pid_t pid, struct sched_param __user *param);\n6140 long sys_sched_getparam(pid_t pid, struct sched_param __user *param);\n6141 long sys_sched_setscheduler(pid_t pid, int policy, struct sched_param __user *param);\n6142 long sys_sched_getscheduler(pid_t pid);\n6143 long sys_sched_get_priority_max(int policy);\n6144 long sys_sched_get_priority_min(int policy);\n6145 long sys_sched_rr_get_interval_time32(pid_t pid, struct old_timespec32 __user *interval);\n6146 long sys_mlock(unsigned long start, size_t len);\n6147 long sys_munlock(unsigned long start, size_t len);\n6148 long sys_mlockall(int flags);\n6149 long sys_munlockall(void);\n6150 long sys_vhangup(void);\n6151 long sys_pivot_root(const char __user *new_root, const char __user *put_old);\n6152 long sys_sysctl(struct __sysctl_args __user *args);\n```\n\n----------------------------------------\n\nTITLE: Declaring Linux System Call Function Prototypes in C\nDESCRIPTION: This set of code snippets declares C function prototypes for a wide range of Linux system calls, matching the syscall table entries. It requires a C/C++ environment and associated structure definitions from Linux kernel headers. Each prototype specifies a syscall function name (following sys_*), input parameters (including user-space pointers and primitive types), and a long return type indicating syscall results. Inputs and outputs are determined by the syscall's purpose (filename pointers, buffer addresses, file descriptors, etc.), and care must be taken with data types compatible with the Linux kernel ABI. Limitations include the need for accompanying definitions of passed structures and correct type usage for cross-platform compatibility.\nSOURCE: https://github.com/panda-re/panda-ng/blob/main/plugins/syscalls2/generated-in/linux_x86_prototypes.txt#_snippet_1\n\nLANGUAGE: C\nCODE:\n```\n177 long sys_rt_sigtimedwait(const sigset_t __user *uthese, siginfo_t __user *uinfo, const struct timespec __user *uts, size_t sigsetsize);\n178 long sys_rt_sigqueueinfo(pid_t pid, int sig, siginfo_t __user *uinfo);\n179 long sys_rt_sigsuspend(sigset_t __user *unewset, size_t sigsetsize);\n180 long sys_pread64(unsigned int fd, char __user *buf, size_t count, loff_t pos);\n181 long sys_pwrite64(unsigned int fd, const char __user *buf, size_t count, loff_t pos);\n182 long sys_chown16(const char __user *filename, old_uid_t user, old_gid_t group);\n183 long sys_getcwd(char __user *buf, unsigned long size);\n184 long sys_capget(cap_user_header_t header, cap_user_data_t dataptr);\n185 long sys_capset(cap_user_header_t header, const cap_user_data_t data);\n186 long sys_sigaltstack(const struct sigaltstack __user *uss, struct sigaltstack __user *uoss);\n187 long sys_sendfile(int out_fd, int in_fd, off_t __user *offset, size_t count);\n190 long sys_vfork(void);\n191 long sys_getrlimit(unsigned int resource, struct rlimit __user *rlim);\n192 long sys_mmap_pgoff(unsigned long addr, unsigned long len, unsigned long prot, unsigned long flags, unsigned long fd, unsigned long pgoff);\n193 long sys_truncate64(const char __user *path, loff_t length);\n194 long sys_ftruncate64(unsigned int fd, loff_t length);\n195 long sys_stat64(const char __user *filename, struct stat64 __user *statbuf);\n196 long sys_lstat64(const char __user *filename, struct stat64 __user *statbuf);\n197 long sys_fstat64(unsigned long fd, struct stat64 __user *statbuf);\n198 long sys_lchown(const char __user *filename, uid_t user, gid_t group);\n199 long sys_getuid(void);\n200 long sys_getgid(void);\n201 long sys_geteuid(void);\n202 long sys_getegid(void);\n203 long sys_setreuid(uid_t ruid, uid_t euid);\n204 long sys_setregid(gid_t rgid, gid_t egid);\n205 long sys_getgroups(int gidsetsize, gid_t __user *grouplist);\n206 long sys_setgroups(int gidsetsize, gid_t __user *grouplist);\n207 long sys_fchown(unsigned int fd, uid_t user, gid_t group);\n208 long sys_setresuid(uid_t ruid, uid_t euid, uid_t suid);\n209 long sys_getresuid(uid_t __user *ruid, uid_t __user *euid, uid_t __user *suid);\n210 long sys_setresgid(gid_t rgid, gid_t egid, gid_t sgid);\n211 long sys_getresgid(gid_t __user *rgid, gid_t __user *egid, gid_t __user *sgid);\n212 long sys_chown(const char __user *filename, uid_t user, gid_t group);\n213 long sys_setuid(uid_t uid);\n214 long sys_setgid(gid_t gid);\n215 long sys_setfsuid(uid_t uid);\n216 long sys_setfsgid(gid_t gid);\n217 long sys_pivot_root(const char __user *new_root, const char __user *put_old);\n218 long sys_mincore(unsigned long start, size_t len, unsigned char __user *vec);\n219 long sys_madvise(unsigned long start, size_t len, int behavior);\n220 long sys_getdents64(unsigned int fd, struct linux_dirent64 __user *dirent, unsigned int count);\n221 long sys_fcntl64(unsigned int fd, unsigned int cmd, unsigned long arg);\n224 long sys_gettid(void);\n225 long sys_readahead(int fd, loff_t offset, size_t count);\n226 long sys_setxattr(const char __user *path, const char __user *name, const void __user *value, size_t size, int flags);\n227 long sys_lsetxattr(const char __user *path, const char __user *name, const void __user *value, size_t size, int flags);\n228 long sys_fsetxattr(int fd, const char __user *name, const void __user *value, size_t size, int flags);\n229 long sys_getxattr(const char __user *path, const char __user *name, void __user *value, size_t size);\n230 long sys_lgetxattr(const char __user *path, const char __user *name, void __user *value, size_t size);\n231 long sys_fgetxattr(int fd, const char __user *name, void __user *value, size_t size);\n232 long sys_listxattr(const char __user *path, char __user *list, size_t size);\n233 long sys_llistxattr(const char __user *path, char __user *list, size_t size);\n234 long sys_flistxattr(int fd, char __user *list, size_t size);\n235 long sys_removexattr(const char __user *path, const char __user *name);\n236 long sys_lremovexattr(const char __user *path, const char __user *name);\n237 long sys_fremovexattr(int fd, const char __user *name);\n238 long sys_tkill(pid_t pid, int sig);\n239 long sys_sendfile64(int out_fd, int in_fd, loff_t __user *offset, size_t count);\n240 long sys_futex(u32 __user *uaddr, int op, u32 val, struct timespec __user *utime, u32 __user *uaddr2, u32 val3);\n241 long sys_sched_setaffinity(pid_t pid, unsigned int len, unsigned long __user *user_mask_ptr);\n242 long sys_sched_getaffinity(pid_t pid, unsigned int len, unsigned long __user *user_mask_ptr);\n243 long sys_set_thread_area(struct user_desc __user *);\n244 long sys_get_thread_area(struct user_desc __user *);\n245 long sys_io_setup(unsigned nr_reqs, aio_context_t __user *ctx);\n246 long sys_io_destroy(aio_context_t ctx);\n247 long sys_io_getevents(aio_context_t ctx_id, long min_nr, long nr, struct io_event __user *events, struct timespec __user *timeout);\n248 long sys_io_submit(aio_context_t, long, struct iocb __user * __user *);\n249 long sys_io_cancel(aio_context_t ctx_id, struct iocb __user *iocb, struct io_event __user *result);\n250 long sys_fadvise64(int fd, loff_t offset, size_t len, int advice);\n252 long sys_exit_group(int error_code);\n253 long sys_lookup_dcookie(u64 cookie64, char __user *buf, size_t len);\n254 long sys_epoll_create(int size);\n255 long sys_epoll_ctl(int epfd, int op, int fd, struct epoll_event __user *event);\n256 long sys_epoll_wait(int epfd, struct epoll_event __user *events, int maxevents, int timeout);\n257 long sys_remap_file_pages(unsigned long start, unsigned long size, unsigned long prot, unsigned long pgoff, unsigned long flags);\n258 long sys_set_tid_address(int __user *tidptr);\n259 long sys_timer_create(clockid_t which_clock, struct sigevent __user *timer_event_spec, timer_t __user *created_timer_id);\n260 long sys_timer_settime(timer_t timer_id, int flags, const struct itimerspec __user *new_setting, struct itimerspec __user *old_setting);\n261 long sys_timer_gettime(timer_t timer_id, struct itimerspec __user *setting);\n262 long sys_timer_getoverrun(timer_t timer_id);\n263 long sys_timer_delete(timer_t timer_id);\n264 long sys_clock_settime(clockid_t which_clock, const struct timespec __user *tp);\n265 long sys_clock_gettime(clockid_t which_clock, struct timespec __user *tp);\n266 long sys_clock_getres(clockid_t which_clock, struct timespec __user *tp);\n267 long sys_clock_nanosleep(clockid_t which_clock, int flags, const struct timespec __user *rqtp, struct timespec __user *rmtp);\n268 long sys_statfs64(const char __user *path, size_t sz, struct statfs64 __user *buf);\n269 long sys_fstatfs64(unsigned int fd, size_t sz, struct statfs64 __user *buf);\n270 long sys_tgkill(pid_t tgid, pid_t pid, int sig);\n271 long sys_utimes(char __user *filename, struct timeval __user *utimes);\n272 long sys_fadvise64_64(int fd, loff_t offset, loff_t len, int advice);\n274 long sys_mbind(unsigned long start, unsigned long len, unsigned long mode, const unsigned long __user *nmask, unsigned long maxnode, unsigned flags);\n275 long sys_get_mempolicy(int __user *policy, unsigned long __user *nmask, unsigned long maxnode, unsigned long addr, unsigned long flags);\n276 long sys_set_mempolicy(int mode, const unsigned long __user *nmask, unsigned long maxnode);\n277 long sys_mq_open(const char __user *name, int oflag, umode_t mode, struct mq_attr __user *attr);\n278 long sys_mq_unlink(const char __user *name);\n279 long sys_mq_timedsend(mqd_t mqdes, const char __user *msg_ptr, size_t msg_len, unsigned int msg_prio, const struct timespec __user *abs_timeout);\n280 long sys_mq_timedreceive(mqd_t mqdes, char __user *msg_ptr, size_t msg_len, unsigned int __user *msg_prio, const struct timespec __user *abs_timeout);\n281 long sys_mq_notify(mqd_t mqdes, const struct sigevent __user *notification);\n282 long sys_mq_getsetattr(mqd_t mqdes, const struct mq_attr __user *mqstat, struct mq_attr __user *omqstat);\n283 long sys_kexec_load(unsigned long entry, unsigned long nr_segments, struct kexec_segment __user *segments, unsigned long flags);\n284 long sys_waitid(int which, pid_t pid, struct siginfo __user *infop, int options, struct rusage __user *ru);\n286 long sys_add_key(const char __user *_type, const char __user *_description, const void __user *_payload, size_t plen, key_serial_t destringid);\n287 long sys_request_key(const char __user *_type, const char __user *_description, const char __user *_callout_info, key_serial_t destringid);\n288 long sys_keyctl(int cmd, unsigned long arg2, unsigned long arg3, unsigned long arg4, unsigned long arg5);\n289 long sys_ioprio_set(int which, int who, int ioprio);\n290 long sys_ioprio_get(int which, int who);\n291 long sys_inotify_init(void);\n292 long sys_inotify_add_watch(int fd, const char __user *path, u32 mask);\n293 long sys_inotify_rm_watch(int fd, __s32 wd);\n294 long sys_migrate_pages(pid_t pid, unsigned long maxnode, const unsigned long __user *from, const unsigned long __user *to);\n295 long sys_openat(int dfd, const char __user *filename, int flags, umode_t mode);\n296 long sys_mkdirat(int dfd, const char __user *pathname, umode_t mode);\n297 long sys_mknodat(int dfd, const char __user *filename, umode_t mode, unsigned dev);\n298 long sys_fchownat(int dfd, const char __user *filename, uid_t user, gid_t group, int flag);\n299 long sys_futimesat(int dfd, const char __user *filename, struct timeval __user *utimes);\n300 long sys_fstatat64(int dfd, const char __user *filename, struct stat64 __user *statbuf, int flag);\n301 long sys_unlinkat(int dfd, const char __user *pathname, int flag);\n302 long sys_renameat(int olddfd, const char __user *oldname, int newdfd, const char __user *newname);\n303 long sys_linkat(int olddfd, const char __user *oldname, int newdfd, const char __user *newname, int flags);\n304 long sys_symlinkat(const char __user *oldname, int newdfd, const char __user *newname);\n305 long sys_readlinkat(int dfd, const char __user *path, char __user *buf, int bufsiz);\n306 long sys_fchmodat(int dfd, const char __user *filename, umode_t mode);\n```\n\n----------------------------------------\n\nTITLE: Declaring POSIX-Compatible System Call Prototypes in C (panda-ng Kernel)\nDESCRIPTION: Declares function prototypes for POSIX and Linux-standard system calls, enabling linkage between user-space system call invocations and kernel-mode handler implementations. No external dependencies are required beyond core kernel and platform type definitions, such as uid_t, gid_t, old_time32_t, etc. Each function signature defines input parameters (typically pointers to user memory, primitive types, or custom structs) and return values as per standard system call conventions (e.g., long for error/return, pid_t for process IDs). Inputs are kernel-exposed parameters, and outputs are typically success/error codes or populated output buffers. Some system calls are noted as unimplemented or reserved, which should not be implemented or invoked. Limitations include reliance on kernel data types and ABI compatibility.\nSOURCE: https://github.com/panda-re/panda-ng/blob/main/plugins/syscalls2/generated-in/linux_mips64_prototypes.txt#_snippet_0\n\nLANGUAGE: c\nCODE:\n```\n4001 long sys_exit(int error_code);\n4002 pid_t sys_fork(void);\n4003 long sys_read(unsigned int fd, char __user *buf, size_t count);\n4004 long sys_write(unsigned int fd, const char __user *buf, size_t count);\n4005 long sys_open(const char __user *filename, int flags, umode_t mode);\n4006 long sys_close(unsigned int fd);\n4007 long sys_waitpid(pid_t pid, int __user *stat_addr, int options);\n4008 long sys_creat(const char __user *pathname, umode_t mode);\n4009 long sys_link(const char __user *oldname, const char __user *newname);\n4010 long sys_unlink(const char __user *pathname);\n4011 long sys_execve(const char __user *filename, const char __user *const __user *argv, const char __user *const __user *envp);\n4012 long sys_chdir(const char __user *filename);\n4013 long sys_time32(old_time32_t __user *tloc);\n4014 long sys_mknod(const char __user *filename, umode_t mode, unsigned dev);\n4015 long sys_chmod(const char __user *filename, umode_t mode);\n4016 long sys_lchown(const char __user *filename, uid_t user, gid_t group);\n// 4017 sys_break - UNIMPLEMENTED\n4018 long sys_stat(const char __user *filename, struct __old_kernel_stat __user *statbuf);\n4019 long sys_lseek(unsigned int fd, off_t offset, unsigned int whence);\n4020 long sys_getpid(void);\n4021 long sys_mount(char __user *dev_name, char __user *dir_name, char __user *type, unsigned long flags, void __user *data);\n4022 long sys_oldumount(char __user *name);\n4023 long sys_setuid(uid_t uid);\n4024 long sys_getuid(void);\n4025 long sys_stime32(old_time32_t __user *tptr);\n4026 long sys_ptrace(long request, long pid, unsigned long addr, unsigned long data);\n4027 long sys_alarm(unsigned int seconds);\n4028 long sys_fstat(unsigned int fd, struct __old_kernel_stat __user *statbuf);\n4029 long sys_pause(void);\n4030 long sys_utime32(const char __user *filename, struct old_utimbuf32 __user *t);\n// 4031 sys_stty - UNIMPLEMENTED\n// 4032 sys_gtty - UNIMPLEMENTED\n4033 long sys_access(const char __user *filename, int mode);\n4034 long sys_nice(int increment);\n// 4035 sys_ftime - UNIMPLEMENTED\n4036 long sys_sync(void);\n4037 long sys_kill(pid_t pid, int sig);\n4038 long sys_rename(const char __user *oldname, const char __user *newname);\n4039 long sys_mkdir(const char __user *pathname, umode_t mode);\n4040 long sys_rmdir(const char __user *pathname);\n4041 long sys_dup(unsigned int fildes);\n4042 long sys_pipe(int __user *fildes);\n4043 long sys_times(struct tms __user *tbuf);\n4045 long sys_brk(unsigned long brk);\n4046 long sys_setgid(gid_t gid);\n4047 long sys_getgid(void);\n4048 long sys_signal(int sig, __sighandler_t handler);\n4049 long sys_geteuid(void);\n4050 long sys_getegid(void);\n4051 long sys_acct(const char __user *name);\n4052 long sys_umount(char __user *name, int flags);\n4054 long sys_ioctl(unsigned int fd, unsigned int cmd, unsigned long arg);\n4055 long sys_fcntl(unsigned int fd, unsigned int cmd, unsigned long arg);\n// 4056 sys_mpx - UNIMPLEMENTED\n4057 long sys_setpgid(pid_t pid, pid_t pgid);\n// 4058 sys_ulimit - UNIMPLEMENTED\n4059 long sys_olduname(struct oldold_utsname __user *);\n4060 long sys_umask(int mask);\n4061 long sys_chroot(const char __user *filename);\n4062 long sys_ustat(unsigned dev, struct ustat __user *ubuf);\n4063 long sys_dup2(unsigned int oldfd, unsigned int newfd);\n4064 long sys_getppid(void);\n4065 long sys_getpgrp(void);\n4066 long sys_setsid(void);\n4067 long sys_sigaction(int, const struct old_sigaction __user *, struct old_sigaction __user *);\n4068 long sys_sgetmask(void);\n4069 long sys_ssetmask(int newmask);\n4070 long sys_setreuid(uid_t ruid, uid_t euid);\n4071 long sys_setregid(gid_t rgid, gid_t egid);\n4072 long sys_sigsuspend(int unused1, int unused2, old_sigset_t mask);\n4073 long sys_sigpending(old_sigset_t __user *uset);\n4074 long sys_sethostname(char __user *name, int len);\n4075 long sys_setrlimit(unsigned int resource, struct rlimit __user *rlim);\n4076 long sys_getrlimit(unsigned int resource, struct rlimit __user *rlim);\n4077 long sys_getrusage(int who, struct rusage __user *ru);\n4078 long sys_gettimeofday(struct __kernel_old_timeval __user *tv, struct timezone __user *tz);\n4079 long sys_settimeofday(struct __kernel_old_timeval __user *tv, struct timezone __user *tz);\n4080 long sys_getgroups(int gidsetsize, gid_t __user *grouplist);\n4081 long sys_setgroups(int gidsetsize, gid_t __user *grouplist);\n// 4082 - RESERVED\n4083 long sys_symlink(const char __user *old, const char __user *new);\n4084 long sys_lstat(const char __user *filename, struct __old_kernel_stat __user *statbuf);\n4085 long sys_readlink(const char __user *path, char __user *buf, int bufsiz);\n4086 long sys_uselib(const char __user *library);\n4087 long sys_swapon(const char __user *specialfile, int swap_flags);\n4088 long sys_reboot(int magic1, int magic2, unsigned int cmd, void __user *arg);\n4089 long sys_old_readdir(unsigned int, struct old_linux_dirent __user *, unsigned int);\n4090 long sys_mmap(unsigned long addr, unsigned long len, unsigned long prot, unsigned long flags, unsigned long fd, unsigned long pgoff);\n4091 long sys_munmap(unsigned long addr, size_t len);\n4092 long sys_truncate(const char __user *path, long length);\n4093 long sys_ftruncate(unsigned int fd, unsigned long length);\n4094 long sys_fchmod(unsigned int fd, umode_t mode);\n4095 long sys_fchown(unsigned int fd, uid_t user, gid_t group);\n4096 long sys_getpriority(int which, int who);\n4097 long sys_setpriority(int which, int who, int niceval);\n// 4098 sys_profil - UNIMPLEMENTED\n4099 long sys_statfs(const char __user *path, struct statfs __user *buf);\n4100 long sys_fstatfs(unsigned int fd, struct statfs __user *buf);\n4101 long sys_ioperm(unsigned long from, unsigned long num, int on);\n4102 long sys_socketcall(int call, unsigned long __user *args);\n4103 long sys_syslog(int type, char __user *buf, int len);\n4104 long sys_setitimer(int which, struct __kernel_old_itimerval __user *value, struct __kernel_old_itimerval __user *ovalue);\n4105 long sys_getitimer(int which, struct __kernel_old_itimerval __user *value);\n4106 long sys_newstat(const char __user *filename, struct stat __user *statbuf);\n4107 long sys_newlstat(const char __user *filename, struct stat __user *statbuf);\n4108 long sys_newfstat(unsigned int fd, struct stat __user *statbuf);\n4109 long sys_uname(struct old_utsname __user *);\n4110 long sys_iopl(int level);\n4111 long sys_vhangup(void);\n4112 long sys_idle(void);\n// 4113 sys_vm86 - X86 ONLY AND DEPRECIATED\n4114 long sys_wait4(pid_t pid, int __user *stat_addr, int options, struct rusage __user *ru);\n4115 long sys_swapoff(const char __user *specialfile);\n4116 long sys_sysinfo(struct sysinfo __user *info);\n4117 long sys_ipc(unsigned int call, int first, unsigned long second, unsigned long third, void __user *ptr, long fifth);\n4118 long sys_fsync(unsigned int fd);\n4119 void sys_sigreturn(void);\n4120 long sys_clone(unsigned long, unsigned long, int __user *, unsigned long, int __user *);\n4121 long sys_setdomainname(char __user *name, int len);\n4122 long sys_newuname(struct new_utsname __user *name);\n4123 long modify_ldt(int func, void *ptr, unsigned long bytecount);\n4124 long sys_adjtimex_time32(struct old_timex32 __user *txc_p);\n4125 long sys_mprotect(unsigned long start, size_t len, unsigned long prot);\n4126 long sys_sigprocmask(int how, old_sigset_t __user *set, old_sigset_t __user *oset);\n4127 caddr_t create_module(const char *name, size_t size);\n4128 long sys_init_module(void __user *umod, unsigned long len, const char __user *uargs);\n4129 long sys_delete_module(const char __user *name_user, unsigned int flags);\n4130 long get_kernel_syms(struct kernel_sym *table);\n4131 long sys_quotactl(unsigned int cmd, const char __user *special, qid_t id, void __user *addr);\n4132 long sys_getpgid(pid_t pid);\n4133 long sys_fchdir(unsigned int fd);\n4134 long sys_bdflush(int func, long data);\n4135 long sys_sysfs(int option, unsigned long arg1, unsigned long arg2);\n4136 long sys_personality(unsigned int personality);\n// 4137 sys_afs_syscall - UNIMPLEMENTED\n4138 long sys_setfsuid(uid_t uid);\n4139 long sys_setfsgid(gid_t gid);\n4140 long sys_llseek(unsigned int fd, unsigned long offset_high, unsigned long offset_low, loff_t __user *result, unsigned int whence);\n4141 long sys_getdents(unsigned int fd, struct linux_dirent __user *dirent, unsigned int count);\n4142 long sys_select(int n, fd_set __user *inp, fd_set __user *outp, fd_set __user *exp, struct __kernel_old_timeval __user *tvp);\n4143 long sys_flock(unsigned int fd, unsigned int cmd);\n4144 long sys_msync(unsigned long start, size_t len, int flags);\n4145 long sys_readv(unsigned long fd, const struct iovec __user *vec, unsigned long vlen);\n4146 long sys_writev(unsigned long fd, const struct iovec __user *vec, unsigned long vlen);\n4147 long sys_cacheflush(char *addr, int nbytes, int cache);\n// 4148 sys_cachectl - ???\n// 4149 sys_sysmips - ???\n4150 long sys_setup(void);\n4151 long sys_getsid(pid_t pid);\n4152 long sys_fdatasync(unsigned int fd);\n4153 long sys_sysctl(struct __sysctl_args __user *args);\n4154 long sys_mlock(unsigned long start, size_t len);\n4155 long sys_munlock(unsigned long start, size_t len);\n4156 long sys_mlockall(int flags);\n4157 long sys_munlockall(void);\n4158 long sys_sched_setparam(pid_t pid, struct sched_param __user *param);\n4159 long sys_sched_getparam(pid_t pid, struct sched_param __user *param);\n4160 long sys_sched_setscheduler(pid_t pid, int policy, struct sched_param __user *param);\n4161 long sys_sched_getscheduler(pid_t pid);\n4162 long sys_sched_yield(void);\n4163 long sys_sched_get_priority_max(int policy);\n4164 long sys_sched_get_priority_min(int policy);\n4165 long sys_sched_rr_get_interval_time32(pid_t pid, struct old_timespec32 __user *interval);\n4166 long sys_nanosleep_time32(struct old_timespec32 __user *rqtp, struct old_timespec32 __user *rmtp);\n4167 long sys_mremap(unsigned long addr, unsigned long old_len, unsigned long new_len, unsigned long flags, unsigned long new_addr);\n4168 long sys_accept(int, struct sockaddr __user *, int __user *);\n```\n\n----------------------------------------\n\nTITLE: Defining Linux System Call Prototypes in C\nDESCRIPTION: This snippet defines function prototypes for various Linux system calls. Each line represents a system call with its corresponding number, return type, function name, and parameters.\nSOURCE: https://github.com/panda-re/panda-ng/blob/main/plugins/syscalls2/generated-in/linux_x86_prototypes.txt#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n0 long sys_restart_syscall(void);\n1 long sys_exit(int error_code);\n2 long sys_fork(void);\n3 long sys_read(unsigned int fd, char __user *buf, size_t count);\n4 long sys_write(unsigned int fd, const char __user *buf, size_t count);\n5 long sys_open(const char __user *filename, int flags, umode_t mode);\n6 long sys_close(unsigned int fd);\n7 long sys_waitpid(pid_t pid, int __user *stat_addr, int options);\n8 long sys_creat(const char __user *pathname, umode_t mode);\n9 long sys_link(const char __user *oldname, const char __user *newname);\n10 long sys_unlink(const char __user *pathname);\n11 long sys_execve(const char __user *filename, const char __user *const __user *argv, const char __user *const __user *envp);\n12 long sys_chdir(const char __user *filename);\n13 long sys_time(time_t __user *tloc);\n14 long sys_mknod(const char __user *filename, umode_t mode, unsigned dev);\n15 long sys_chmod(const char __user *filename, umode_t mode);\n16 long sys_lchown16(const char __user *filename, old_uid_t user, old_gid_t group);\n18 long sys_stat(const char __user *filename, struct __old_kernel_stat __user *statbuf);\n19 long sys_lseek(unsigned int fd, off_t offset, unsigned int whence);\n20 long sys_getpid(void);\n21 long sys_mount(char __user *dev_name, char __user *dir_name, char __user *type, unsigned long flags, void __user *data);\n22 long sys_oldumount(char __user *name);\n23 long sys_setuid16(old_uid_t uid);\n24 long sys_getuid16(void);\n25 long sys_stime(time_t __user *tptr);\n26 long sys_ptrace(long request, long pid, unsigned long addr, unsigned long data);\n27 long sys_alarm(unsigned int seconds);\n28 long sys_fstat(unsigned int fd, struct __old_kernel_stat __user *statbuf);\n29 long sys_pause(void);\n30 long sys_utime(char __user *filename, struct utimbuf __user *times);\n33 long sys_access(const char __user *filename, int mode);\n34 long sys_nice(int increment);\n36 long sys_sync(void);\n37 long sys_kill(pid_t pid, int sig);\n38 long sys_rename(const char __user *oldname, const char __user *newname);\n39 long sys_mkdir(const char __user *pathname, umode_t mode);\n40 long sys_rmdir(const char __user *pathname);\n41 long sys_dup(unsigned int fildes);\n42 long sys_pipe(int __user *fildes);\n43 long sys_times(struct tms __user *tbuf);\n45 long sys_brk(unsigned long brk);\n46 long sys_setgid16(old_gid_t gid);\n47 long sys_getgid16(void);\n48 long sys_signal(int sig, __sighandler_t handler);\n49 long sys_geteuid16(void);\n50 long sys_getegid16(void);\n51 long sys_acct(const char __user *name);\n52 long sys_umount(char __user *name, int flags);\n54 long sys_ioctl(unsigned int fd, unsigned int cmd, unsigned long arg);\n55 long sys_fcntl(unsigned int fd, unsigned int cmd, unsigned long arg);\n57 long sys_setpgid(pid_t pid, pid_t pgid);\n59 long sys_olduname(struct oldold_utsname __user *);\n60 long sys_umask(int mask);\n61 long sys_chroot(const char __user *filename);\n62 long sys_ustat(unsigned dev, struct ustat __user *ubuf);\n63 long sys_dup2(unsigned int oldfd, unsigned int newfd);\n64 long sys_getppid(void);\n65 long sys_getpgrp(void);\n66 long sys_setsid(void);\n67 long sys_sigaction(int, const struct old_sigaction __user *, struct old_sigaction __user *);\n68 long sys_sgetmask(void);\n69 long sys_ssetmask(int newmask);\n70 long sys_setreuid16(old_uid_t ruid, old_uid_t euid);\n71 long sys_setregid16(old_gid_t rgid, old_gid_t egid);\n72 long sys_sigsuspend(int unused1, int unused2, old_sigset_t mask);\n73 long sys_sigpending(old_sigset_t __user *set);\n74 long sys_sethostname(char __user *name, int len);\n75 long sys_setrlimit(unsigned int resource, struct rlimit __user *rlim);\n76 long sys_old_getrlimit(unsigned int resource, struct rlimit __user *rlim);\n77 long sys_getrusage(int who, struct rusage __user *ru);\n78 long sys_gettimeofday(struct timeval __user *tv, struct timezone __user *tz);\n79 long sys_settimeofday(struct timeval __user *tv, struct timezone __user *tz);\n80 long sys_getgroups16(int gidsetsize, old_gid_t __user *grouplist);\n81 long sys_setgroups16(int gidsetsize, old_gid_t __user *grouplist);\n82 long sys_old_select(struct sel_arg_struct __user *arg);\n83 long sys_symlink(const char __user *old, const char __user *new);\n84 long sys_lstat(const char __user *filename, struct __old_kernel_stat __user *statbuf);\n85 long sys_readlink(const char __user *path, char __user *buf, int bufsiz);\n86 long sys_uselib(const char __user *library);\n87 long sys_swapon(const char __user *specialfile, int swap_flags);\n88 long sys_reboot(int magic1, int magic2, unsigned int cmd, void __user *arg);\n89 long sys_old_readdir(unsigned int, struct old_linux_dirent __user *, unsigned int);\n90 long sys_old_mmap(struct mmap_arg_struct __user *arg);\n91 long sys_munmap(unsigned long addr, size_t len);\n92 long sys_truncate(const char __user *path, long length);\n93 long sys_ftruncate(unsigned int fd, unsigned long length);\n94 long sys_fchmod(unsigned int fd, umode_t mode);\n95 long sys_fchown16(unsigned int fd, old_uid_t user, old_gid_t group);\n96 long sys_getpriority(int which, int who);\n97 long sys_setpriority(int which, int who, int niceval);\n99 long sys_statfs(const char __user *path, struct statfs __user *buf);\n100 long sys_fstatfs(unsigned int fd, struct statfs __user *buf);\n101 long sys_ioperm(unsigned long, unsigned long, int);\n102 long sys_socketcall(int call, unsigned long __user *args);\n103 long sys_syslog(int type, char __user *buf, int len);\n104 long sys_setitimer(int which, struct itimerval __user *value, struct itimerval __user *ovalue);\n105 long sys_getitimer(int which, struct itimerval __user *value);\n106 long sys_newstat(const char __user *filename, struct stat __user *statbuf);\n107 long sys_newlstat(const char __user *filename, struct stat __user *statbuf);\n108 long sys_newfstat(unsigned int fd, struct stat __user *statbuf);\n109 long sys_uname(struct old_utsname __user *);\n110 long sys_iopl(unsigned int);\n111 long sys_vhangup(void);\n113 long sys_vm86old(struct vm86_struct __user *);\n114 long sys_wait4(pid_t pid, int __user *stat_addr, int options, struct rusage __user *ru);\n115 long sys_swapoff(const char __user *specialfile);\n116 long sys_sysinfo(struct sysinfo __user *info);\n117 long sys_ipc(unsigned int call, int first, unsigned long second, unsigned long third, void __user *ptr, long fifth);\n118 long sys_fsync(unsigned int fd);\n119 long sys_sigreturn(void);\n120 long sys_clone(unsigned long, unsigned long, int __user *, int __user *, unsigned long);\n121 long sys_setdomainname(char __user *name, int len);\n122 long sys_newuname(struct new_utsname __user *name);\n123 long sys_modify_ldt(int, void __user *, unsigned long);\n124 long sys_adjtimex(struct timex __user *txc_p);\n125 long sys_mprotect(unsigned long start, size_t len, unsigned long prot);\n126 long sys_sigprocmask(int how, old_sigset_t __user *set, old_sigset_t __user *oset);\n128 long sys_init_module(void __user *umod, unsigned long len, const char __user *uargs);\n129 long sys_delete_module(const char __user *name_user, unsigned int flags);\n131 long sys_quotactl(unsigned int cmd, const char __user *special, qid_t id, void __user *addr);\n132 long sys_getpgid(pid_t pid);\n133 long sys_fchdir(unsigned int fd);\n134 long sys_bdflush(int func, long data);\n135 long sys_sysfs(int option, unsigned long arg1, unsigned long arg2);\n136 long sys_personality(unsigned int personality);\n138 long sys_setfsuid16(old_uid_t uid);\n139 long sys_setfsgid16(old_gid_t gid);\n140 long sys_llseek(unsigned int fd, unsigned long offset_high, unsigned long offset_low, loff_t __user *result, unsigned int whence);\n141 long sys_getdents(unsigned int fd, struct linux_dirent __user *dirent, unsigned int count);\n142 long sys_select(int n, fd_set __user *inp, fd_set __user *outp, fd_set __user *exp, struct timeval __user *tvp);\n143 long sys_flock(unsigned int fd, unsigned int cmd);\n144 long sys_msync(unsigned long start, size_t len, int flags);\n145 long sys_readv(unsigned long fd, const struct iovec __user *vec, unsigned long vlen);\n146 long sys_writev(unsigned long fd, const struct iovec __user *vec, unsigned long vlen);\n147 long sys_getsid(pid_t pid);\n148 long sys_fdatasync(unsigned int fd);\n149 long sys_sysctl(struct __sysctl_args __user *args);\n150 long sys_mlock(unsigned long start, size_t len);\n151 long sys_munlock(unsigned long start, size_t len);\n152 long sys_mlockall(int flags);\n153 long sys_munlockall(void);\n154 long sys_sched_setparam(pid_t pid, struct sched_param __user *param);\n155 long sys_sched_getparam(pid_t pid, struct sched_param __user *param);\n156 long sys_sched_setscheduler(pid_t pid, int policy, struct sched_param __user *param);\n157 long sys_sched_getscheduler(pid_t pid);\n158 long sys_sched_yield(void);\n159 long sys_sched_get_priority_max(int policy);\n160 long sys_sched_get_priority_min(int policy);\n161 long sys_sched_rr_get_interval(pid_t pid, struct timespec __user *interval);\n162 long sys_nanosleep(struct timespec __user *rqtp, struct timespec __user *rmtp);\n163 long sys_mremap(unsigned long addr, unsigned long old_len, unsigned long new_len, unsigned long flags, unsigned long new_addr);\n164 long sys_setresuid16(old_uid_t ruid, old_uid_t euid, old_uid_t suid);\n165 long sys_getresuid16(old_uid_t __user *ruid, old_uid_t __user *euid, old_uid_t __user *suid);\n166 long sys_vm86(unsigned long, unsigned long);\n168 long sys_poll(struct pollfd __user *ufds, unsigned int nfds, int timeout);\n170 long sys_setresgid16(old_gid_t rgid, old_gid_t egid, old_gid_t sgid);\n171 long sys_getresgid16(old_gid_t __user *rgid, old_gid_t __user *egid, old_gid_t __user *sgid);\n172 long sys_prctl(int option, unsigned long arg2, unsigned long arg3, unsigned long arg4, unsigned long arg5);\n173 long sys_rt_sigreturn(void);\n174 long sys_rt_sigaction(int, const struct sigaction __user *, struct sigaction __user *, size_t);\n175 long sys_rt_sigprocmask(int how, sigset_t __user *set, sigset_t __user *oset, size_t sigsetsize);\n176 long sys_rt_sigpending(sigset_t __user *set, size_t sigsetsize);\n```\n\n----------------------------------------\n\nTITLE: Declaring Linux System Call Prototypes in C\nDESCRIPTION: This snippet defines the prototypes for several Linux system calls in C. Each function declaration specifies the expected parameter types, names, and return type, providing the required interface for making system calls from userspace. Dependencies include appropriate type definitions (such as size_t, loff_t, struct iovec, struct statx, pid_t, etc.) which typically come from standard C or Linux-specific headers. Inputs are syscall parameters corresponding to their operation (buffers, flags, file descriptors); outputs are integer return values, often with negative values indicating errors. Lines marked as TODO are commented out and not available for use, with some lines explicitly noting they are unsupported on certain architectures.\nSOURCE: https://github.com/panda-re/panda-ng/blob/main/plugins/syscalls2/generated-in/linux_arm64_prototypes.txt#_snippet_2\n\nLANGUAGE: c\nCODE:\n```\nlong sys_seccomp(unsigned int op, unsigned int flags, const char __user *uargs);\nlong sys_getrandom(char __user *buf, size_t count, unsigned int flags);\nlong sys_memfd_create(const char __user *uname_ptr, unsigned int flags);\nlong sys_bpf(int cmd, union bpf_attr *attr, unsigned int size);\nlong sys_execveat(int dfd, const char __user *filename, const char __user *const __user *argv, const char __user *const __user *envp, int flags);\nlong sys_userfaultfd(int flags);\nlong sys_membarrier(int cmd, int flags);\nlong sys_mlock2(unsigned long start, size_t len, int flags);\nlong sys_copy_file_range(int fd_in, loff_t __user *off_in, int fd_out, loff_t __user *off_out, size_t len, unsigned int flags);\nlong sys_preadv2(unsigned long fd, const struct iovec *vec, unsigned long vlen, unsigned long pos_l, unsigned long pos_h, rwf_t flags);\nlong sys_pwritev2(unsigned long fd, const struct iovec *vec, unsigned long vlen, unsigned long pos_l, unsigned long pos_h, rwf_t flags);\nlong sys_pkey_mprotect(unsigned long start, size_t len, unsigned long prot, int pkey);\nlong sys_pkey_alloc(unsigned long flags, unsigned long init_val);\nlong sys_pkey_free(int pkey);\nlong sys_statx(int dfd, const char *path, unsigned flags, unsigned mask, struct statx *buffer);\n// TODO: 292 long sys_io_pgetevents_time64\n// TODO: 293 long sys_rseq\nlong sys_kexec_file_load (int kernel_fd, int initrd_fd, unsigned long cmdline_len, const char *cmdline, unsigned long flags);\n// 295-423: no uses on AArch64\nlong sys_pidfd_send_signal(int pidfd, int sig, siginfo_t *info, unsigned int flags);\n// TODO: 425 long sys_io_uring_setup\n// TODO: 426 long sys_io_uring_enter\n// TODO: 427 long sys_io_uring_register\n// TODO: 428 long sys_open_tree\n// TODO: 429 long sys_move_mount\n// TODO: 430 long sys_fsopen\n// TODO: 431 long sys_fsconfig\n// TODO: 432 long sys_fsmount\n// TODO: 433 long sys_fspick\nlong sys_pidfd_open(pid_t pid, unsigned int flags);\nlong sys_clone3(struct clone_args *cl_args, size_t size);\n// TODO: 436 long sys_close_range\nlong sys_openat2(int dirfd, const char *pathname, struct open_how *how, size_t size);\nlong sys_pidfd_getfd(int pidfd, int targetfd, unsigned int flags);\nlong sys_faccessat2(int dirfd, const char *pathname, int mode, int flags);\n// TODO: 440 long sys_process_madvise\n// TODO: 441 long sys_epoll_pwait2\n```\n\n----------------------------------------\n\nTITLE: Declaring Linux System Call Prototypes - C\nDESCRIPTION: This snippet provides C declarations for Linux system call functions, defining their names, parameter types, and return values. These prototypes are designed for inclusion in header files to allow application code and libraries to invoke a wide variety of kernel services, such as file manipulation, user/group management, polling, message queues, IPC, sockets, and more. Dependencies include platform-specific types (e.g., uid_t, gid_t, loff_t, struct stat64), so the relevant system headers must be included elsewhere. Parameters indicate user-space pointers (with __user) and precise types, which is critical for correct system call usage.\nSOURCE: https://github.com/panda-re/panda-ng/blob/main/plugins/syscalls2/generated-in/linux_arm_prototypes.txt#_snippet_1\n\nLANGUAGE: C\nCODE:\n```\n192 long do_mmap2(unsigned long addr, unsigned long len, unsigned long prot, unsigned long flags, unsigned long fd, unsigned long pgoff);\n193 long sys_truncate64(const char __user *path, loff_t length);\n194 long sys_ftruncate64(unsigned int fd, loff_t length);\n195 long sys_stat64(const char __user *filename, struct stat64 __user *statbuf);\n196 long sys_lstat64(const char __user *filename, struct stat64 __user *statbuf);\n197 long sys_fstat64(unsigned long fd, struct stat64 __user *statbuf);\n198 long sys_lchown(const char __user *filename, uid_t user, gid_t group);\n199 long sys_getuid(void);\n200 long sys_getgid(void);\n201 long sys_geteuid(void);\n202 long sys_getegid(void);\n203 long sys_setreuid(uid_t ruid, uid_t euid);\n204 long sys_setregid(gid_t rgid, gid_t egid);\n205 long sys_getgroups(int gidsetsize, gid_t __user *grouplist);\n206 long sys_setgroups(int gidsetsize, gid_t __user *grouplist);\n207 long sys_fchown(unsigned int fd, uid_t user, gid_t group);\n208 long sys_setresuid(uid_t ruid, uid_t euid, uid_t suid);\n209 long sys_getresuid(uid_t __user *ruid, uid_t __user *euid, uid_t __user *suid);\n210 long sys_setresgid(gid_t rgid, gid_t egid, gid_t sgid);\n211 long sys_getresgid(gid_t __user *rgid, gid_t __user *egid, gid_t __user *sgid);\n212 long sys_chown(const char __user *filename, uid_t user, gid_t group);\n213 long sys_setuid(uid_t uid);\n214 long sys_setgid(gid_t gid);\n215 long sys_setfsuid(uid_t uid);\n216 long sys_setfsgid(gid_t gid);\n217 long sys_getdents64(unsigned int fd, struct linux_dirent64 __user *dirent, unsigned int count);\n218 long sys_pivot_root(const char __user *new_root, const char __user *put_old);\n219 long sys_mincore(unsigned long start, size_t len, unsigned char __user *vec);\n220 long sys_madvise(unsigned long start, size_t len, int behavior);\n221 long sys_fcntl64(unsigned int fd, unsigned int cmd, unsigned long arg);\n224 long sys_gettid(void);\n225 long sys_readahead(int fd, loff_t offset, size_t count);\n226 long sys_setxattr(const char __user *path, const char __user *name, const void __user *value, size_t size, int flags);\n227 long sys_lsetxattr(const char __user *path, const char __user *name, const void __user *value, size_t size, int flags);\n228 long sys_fsetxattr(int fd, const char __user *name, const void __user *value, size_t size, int flags);\n229 long sys_getxattr(const char __user *path, const char __user *name, void __user *value, size_t size);\n230 long sys_lgetxattr(const char __user *path, const char __user *name, void __user *value, size_t size);\n231 long sys_fgetxattr(int fd, const char __user *name, void __user *value, size_t size);\n232 long sys_listxattr(const char __user *path, char __user *list, size_t size);\n233 long sys_llistxattr(const char __user *path, char __user *list, size_t size);\n234 long sys_flistxattr(int fd, char __user *list, size_t size);\n235 long sys_removexattr(const char __user *path, const char __user *name);\n236 long sys_lremovexattr(const char __user *path, const char __user *name);\n237 long sys_fremovexattr(int fd, const char __user *name);\n238 long sys_tkill(int pid, int sig);\n239 long sys_sendfile64(int out_fd, int in_fd, loff_t __user *offset, size_t count);\n240 long sys_futex(u32 __user *uaddr, int op, u32 val, struct timespec __user *utime, u32 __user *uaddr2, u32 val3);\n241 long sys_sched_setaffinity(pid_t pid, unsigned int len, unsigned long __user *user_mask_ptr);\n242 long sys_sched_getaffinity(pid_t pid, unsigned int len, unsigned long __user *user_mask_ptr);\n243 long sys_io_setup(unsigned nr_reqs, aio_context_t __user *ctx);\n244 long sys_io_destroy(aio_context_t ctx);\n245 long sys_io_getevents(aio_context_t ctx_id, long min_nr, long nr, struct io_event __user *events, struct timespec __user *timeout);\n246 long sys_io_submit(aio_context_t, long, struct iocb __user * __user *);\n247 long sys_io_cancel(aio_context_t ctx_id, struct iocb __user *iocb, struct io_event __user *result);\n248 long sys_exit_group(int error_code);\n249 long sys_lookup_dcookie(u64 cookie64, char __user *buf, size_t len);\n250 long sys_epoll_create(int size);\n251 long sys_epoll_ctl(int epfd, int op, int fd, struct epoll_event __user *event);\n252 long sys_epoll_wait(int epfd, struct epoll_event __user *events, int maxevents, int timeout);\n253 long sys_remap_file_pages(unsigned long start, unsigned long size, unsigned long prot, unsigned long pgoff, unsigned long flags);\n256 long sys_set_tid_address(int __user *tidptr);\n257 long sys_timer_create(clockid_t which_clock, struct sigevent __user *timer_event_spec, timer_t __user *created_timer_id);\n258 long sys_timer_settime(timer_t timer_id, int flags, const struct itimerspec __user *new_setting, struct itimerspec __user *old_setting);\n259 long sys_timer_gettime(timer_t timer_id, struct itimerspec __user *setting);\n260 long sys_timer_getoverrun(timer_t timer_id);\n261 long sys_timer_delete(timer_t timer_id);\n262 long sys_clock_settime(clockid_t which_clock, const struct timespec __user *tp);\n263 long sys_clock_gettime(clockid_t which_clock, struct timespec __user *tp);\n264 long sys_clock_getres(clockid_t which_clock, struct timespec __user *tp);\n265 long sys_clock_nanosleep(clockid_t which_clock, int flags, const struct timespec __user *rqtp, struct timespec __user *rmtp);\n266 long sys_statfs64(const char __user *path, size_t sz, struct statfs64 __user *buf);\n267 long sys_fstatfs64(unsigned int fd, size_t sz, struct statfs64 __user *buf);\n268 long sys_tgkill(int tgid, int pid, int sig);\n269 long sys_utimes(char __user *filename, struct timeval __user *utimes);\n270 long sys_arm_fadvise64_64(int fd, int advice, loff_t offset, loff_t len);\n271 long sys_pciconfig_iobase(long which, unsigned long bus, unsigned long devfn);\n272 long sys_pciconfig_read(unsigned long bus, unsigned long dfn, unsigned long off, unsigned long len, void __user *buf);\n273 long sys_pciconfig_write(unsigned long bus, unsigned long dfn, unsigned long off, unsigned long len, void __user *buf);\n274 long sys_mq_open(const char __user *name, int oflag, umode_t mode, struct mq_attr __user *attr);\n275 long sys_mq_unlink(const char __user *name);\n276 long sys_mq_timedsend(mqd_t mqdes, const char __user *msg_ptr, size_t msg_len, unsigned int msg_prio, const struct timespec __user *abs_timeout);\n277 long sys_mq_timedreceive(mqd_t mqdes, char __user *msg_ptr, size_t msg_len, unsigned int __user *msg_prio, const struct timespec __user *abs_timeout);\n278 long sys_mq_notify(mqd_t mqdes, const struct sigevent __user *notification);\n279 long sys_mq_getsetattr(mqd_t mqdes, const struct mq_attr __user *mqstat, struct mq_attr __user *omqstat);\n280 long sys_waitid(int which, pid_t pid, struct siginfo __user *infop, int options, struct rusage __user *ru);\n281 long sys_socket(int, int, int);\n282 long sys_bind(int, struct sockaddr __user *, int);\n283 long sys_connect(int, struct sockaddr __user *, int);\n284 long sys_listen(int, int);\n285 long sys_accept(int, struct sockaddr __user *, int __user *);\n286 long sys_getsockname(int, struct sockaddr __user *, int __user *);\n287 long sys_getpeername(int, struct sockaddr __user *, int __user *);\n288 long sys_socketpair(int, int, int, int __user *);\n289 long sys_send(int, void __user *, size_t, unsigned);\n290 long sys_sendto(int, void __user *, size_t, unsigned, struct sockaddr __user *, int);\n291 long sys_recv(int, void __user *, size_t, unsigned);\n292 long sys_recvfrom(int, void __user *, size_t, unsigned, struct sockaddr __user *, int __user *);\n293 long sys_shutdown(int, int);\n294 long sys_setsockopt(int fd, int level, int optname, char __user *optval, int optlen);\n295 long sys_getsockopt(int fd, int level, int optname, char __user *optval, int __user *optlen);\n296 long sys_sendmsg(int fd, struct user_msghdr __user *msg, unsigned flags);\n297 long sys_recvmsg(int fd, struct user_msghdr __user *msg, unsigned flags);\n298 long sys_semop(int semid, struct sembuf __user *sops, unsigned nsops);\n299 long sys_semget(key_t key, int nsems, int semflg);\n300 long sys_semctl(int semid, int semnum, int cmd, unsigned long arg);\n301 long sys_msgsnd(int msqid, struct msgbuf __user *msgp, size_t msgsz, int msgflg);\n302 long sys_msgrcv(int msqid, struct msgbuf __user *msgp, size_t msgsz, long msgtyp, int msgflg);\n303 long sys_msgget(key_t key, int msgflg);\n304 long sys_msgctl(int msqid, int cmd, struct msqid_ds __user *buf);\n305 long sys_shmat(int shmid, char __user *shmaddr, int shmflg);\n306 long sys_shmdt(char __user *shmaddr);\n307 long sys_shmget(key_t key, size_t size, int flag);\n308 long sys_shmctl(int shmid, int cmd, struct shmid_ds __user *buf);\n309 long sys_add_key(const char __user *_type, const char __user *_description, const void __user *_payload, size_t plen, key_serial_t destringid);\n310 long sys_request_key(const char __user *_type, const char __user *_description, const char __user *_callout_info, key_serial_t destringid);\n311 long sys_keyctl(int cmd, unsigned long arg2, unsigned long arg3, unsigned long arg4, unsigned long arg5);\n312 long sys_semtimedop(int semid, struct sembuf __user *sops, unsigned nsops, const struct timespec __user *timeout);\n314 long sys_ioprio_set(int which, int who, int ioprio);\n315 long sys_ioprio_get(int which, int who);\n316 long sys_inotify_init(void);\n317 long sys_inotify_add_watch(int fd, const char __user *path, u32 mask);\n318 long sys_inotify_rm_watch(int fd, __s32 wd);\n319 long sys_mbind(unsigned long start, unsigned long len, unsigned long mode, const unsigned long __user *nmask, unsigned long maxnode, unsigned flags);\n320 long sys_get_mempolicy(int __user *policy, unsigned long __user *nmask, unsigned long maxnode, unsigned long addr, unsigned long flags);\n321 long sys_set_mempolicy(int mode, const unsigned long __user *nmask, unsigned long maxnode);\n322 long sys_openat(int dfd, const char __user *filename, int flags, umode_t mode);\n323 long sys_mkdirat(int dfd, const char __user *pathname, umode_t mode);\n324 long sys_mknodat(int dfd, const char __user *filename, umode_t mode, unsigned dev);\n```\n\n----------------------------------------\n\nTITLE: Declaring Linux System Call Prototypes - C\nDESCRIPTION: This snippet provides C-style function prototypes for a large number of Linux system calls. Each function is prefixed with sys_ and declares the arguments and return type (usually long) expected for the syscall. These prototypes are used within the kernel to define syscall interfaces and for syscall dispatch tables. Arguments leverage types like int, size_t, loff_t, pointers annotated with __user, etc., indicating interaction between user space and kernel space. The code assumes standard Linux kernel build prerequisites, and does not provide function bodies or implementation details; it is intended solely for interface reference or linking.\nSOURCE: https://github.com/panda-re/panda-ng/blob/main/plugins/syscalls2/generated-in/linux_mips64_prototypes.txt#_snippet_10\n\nLANGUAGE: C\nCODE:\n```\n6179 long sys_readahead(int fd, loff_t offset, size_t count);\n6180 long sys_setxattr(const char __user *path, const char __user *name, const void __user *value, size_t size, int flags);\n6181 long sys_lsetxattr(const char __user *path, const char __user *name, const void __user *value, size_t size, int flags);\n6182 long sys_fsetxattr(int fd, const char __user *name, const void __user *value, size_t size, int flags);\n6183 long sys_getxattr(const char __user *path, const char __user *name, void __user *value, size_t size);\n6184 long sys_lgetxattr(const char __user *path, const char __user *name, void __user *value, size_t size);\n6185 long sys_fgetxattr(int fd, const char __user *name, void __user *value, size_t size);\n6186 long sys_listxattr(const char __user *path, char __user *list, size_t size);\n6187 long sys_llistxattr(const char __user *path, char __user *list, size_t size);\n6188 long sys_flistxattr(int fd, char __user *list, size_t size);\n6189 long sys_removexattr(const char __user *path, const char __user *name);\n6190 long sys_lremovexattr(const char __user *path, const char __user *name);\n6191 long sys_fremovexattr(int fd, const char __user *name);\n6192 long sys_tkill(pid_t pid, int sig);\n6193 long sys_ni_syscall(void);\n6194 long sys_futex_time32(u32 __user *uaddr, int op, u32 val, struct old_timespec32 __user *utime, u32 __user *uaddr2, u32 val3);\n6195 long sys_sched_setaffinity(pid_t pid, unsigned int len, unsigned long __user *user_mask_ptr);\n6196 long sys_sched_getaffinity(pid_t pid, unsigned int len, unsigned long __user *user_mask_ptr);\n6200 long sys_io_setup(unsigned nr_reqs, aio_context_t __user *ctx);\n6201 long sys_io_destroy(aio_context_t ctx);\n6202 long sys_io_getevents_time32(__u32 ctx_id, __s32 min_nr, __s32 nr, struct io_event __user *events, struct old_timespec32 __user *timeout);\n6203 long sys_io_submit(aio_context_t, long, struct iocb __user * __user *);\n6204 long sys_io_cancel(aio_context_t ctx_id, struct iocb __user *iocb, struct io_event __user *result);\n6205 long sys_exit_group(int error_code);\n6206 long sys_lookup_dcookie(u64 cookie64, char __user *buf, size_t len);\n6207 long sys_epoll_create(int size);\n6208 long sys_epoll_ctl(int epfd, int op, int fd, struct epoll_event __user *event);\n6209 long sys_epoll_wait(int epfd, struct epoll_event __user *events, int maxevents, int timeout);\n6210 long sys_remap_file_pages(unsigned long start, unsigned long size, unsigned long prot, unsigned long pgoff, unsigned long flags);\n6211 void sys_sigreturn(void);\n6212 long sys_fcntl64(unsigned int fd, unsigned int cmd, unsigned long arg);\n6213 long sys_set_tid_address(int __user *tidptr);\n6214 long sys_restart_syscall(void);\n6215 long sys_semtimedop_time32(int semid, struct sembuf __user *sops, unsigned nsops, const struct old_timespec32 __user *timeout);\n6216 long sys_fadvise64_64(int fd, loff_t offset, loff_t len, int advice);\n6217 long sys_statfs64(const char __user *path, size_t sz, struct statfs64 __user *buf);\n6218 long sys_fstatfs64(unsigned int fd, size_t sz, struct statfs64 __user *buf);\n6219 long sys_sendfile64(int out_fd, int in_fd, loff_t __user *offset, size_t count);\n6220 long sys_timerfd_create(int clockid, int flags);\n6221 long sys_timer_settime32(timer_t timer_id, int flags, struct old_itimerspec32 __user *new, struct old_itimerspec32 __user *old);\n6222 long sys_timer_gettime32(timer_t timer_id, struct old_itimerspec32 __user *setting);\n6223 long sys_timer_getoverrun(timer_t timer_id);\n6224 long sys_timer_delete(timer_t timer_id);\n6225 long sys_clock_settime32(clockid_t which_clock, struct old_timespec32 __user *tp);\n6226 long sys_clock_gettime32(clockid_t which_clock, struct old_timespec32 __user *tp);\n6227 long sys_clock_getres_time32(clockid_t which_clock, struct old_timespec32 __user *tp);\n6228 long sys_clock_nanosleep_time32(clockid_t which_clock, int flags, struct old_timespec32 __user *rqtp, struct old_timespec32 __user *rmtp);\n6229 long sys_tgkill(pid_t tgid, pid_t pid, int sig);\n6230 long sys_utimes_time32(const char __user *filename, struct old_timeval32 __user *t);\n6231 long sys_mbind(unsigned long start, unsigned long len, unsigned long mode, const unsigned long __user *nmask, unsigned long maxnode, unsigned flags);\n6232 long sys_get_mempolicy(int __user *policy, unsigned long __user *nmask, unsigned long maxnode, unsigned long addr, unsigned long flags);\n6233 long sys_set_mempolicy(int mode, const unsigned long __user *nmask, unsigned long maxnode);\n6234 long sys_mq_open(const char __user *name, int oflag, umode_t mode, struct mq_attr __user *attr);\n6235 long sys_mq_unlink(const char __user *name);\n6236 long sys_mq_timedsend_time32(mqd_t mqdes, const char __user *u_msg_ptr, unsigned int msg_len, unsigned int msg_prio, const struct old_timespec32 __user *u_abs_timeout);\n6237 long sys_mq_timedreceive_time32(mqd_t mqdes, char __user *u_msg_ptr, unsigned int msg_len, unsigned int __user *u_msg_prio, const struct old_timespec32 __user *u_abs_timeout);\n6238 long sys_mq_notify(mqd_t mqdes, const struct sigevent __user *notification);\n6239 long sys_mq_getsetattr(mqd_t mqdes, const struct mq_attr __user *mqstat, struct mq_attr __user *omqstat);\n6240 long sys_ni_syscall(void);\n6241 long sys_waitid(int which, pid_t pid, struct siginfo __user *infop, int options, struct rusage __user *ru);\n6243 long sys_add_key(const char __user *_type, const char __user *_description, const void __user *_payload, size_t plen, key_serial_t destringid);\n6244 long sys_request_key(const char __user *_type, const char __user *_description, const char __user *_callout_info, key_serial_t destringid);\n6245 long sys_keyctl(int cmd, unsigned long arg2, unsigned long arg3, unsigned long arg4, unsigned long arg5);\n6247 long sys_inotify_init(void);\n6248 long sys_inotify_add_watch(int fd, const char __user *path, u32 mask);\n6249 long sys_inotify_rm_watch(int fd, __s32 wd);\n6250 long sys_migrate_pages(pid_t pid, unsigned long maxnode, const unsigned long __user *from, const unsigned long __user *to);\n6251 long sys_openat(int dfd, const char __user *filename, int flags, umode_t mode);\n6252 long sys_mkdirat(int dfd, const char __user *pathname, umode_t mode);\n6253 long sys_mknodat(int dfd, const char __user *filename, umode_t mode, unsigned dev);\n6254 long sys_fchownat(int dfd, const char __user *filename, uid_t user, gid_t group, int flag);\n6255 long sys_futimesat_time32(unsigned int dfd, const char __user *filename, struct old_timeval32 __user *t);\n6256 long sys_newfstatat(int dfd, const char __user *filename, struct stat __user *statbuf, int flag);\n6257 long sys_unlinkat(int dfd, const char __user *pathname, int flag);\n6258 long sys_renameat(int olddfd, const char __user *oldname, int newdfd, const char __user *newname);\n6259 long sys_linkat(int olddfd, const char __user *oldname, int newdfd, const char __user *newname, int flags);\n6260 long sys_symlinkat(const char __user *oldname, int newdfd, const char __user *newname);\n6261 long sys_readlinkat(int dfd, const char __user *path, char __user *buf, int bufsiz);\n6262 long sys_fchmodat(int dfd, const char __user *filename, umode_t mode);\n6263 long sys_faccessat(int dfd, const char __user *filename, int mode);\n6264 long sys_io_pgetevents_time32(aio_context_t ctx_id, long min_nr, long nr, struct io_event __user *events, struct old_timespec32 __user *timeout, const struct __aio_sigset *sig);\n6265 long sys_pselect6_time32(int, fd_set __user *, fd_set __user *, fd_set __user *, struct old_timespec32 __user *, void __user *);\n6266 long sys_unshare(unsigned long unshare_flags);\n6267 long sys_splice(int fd_in, loff_t __user *off_in, int fd_out, loff_t __user *off_out, size_t len, unsigned int flags);\n6268 long sys_sync_file_range(int fd, loff_t offset, loff_t nbytes, unsigned int flags);\n6269 long sys_tee(int fdin, int fdout, size_t len, unsigned int flags);\n6270 long sys_vmsplice(int fd, const struct iovec __user *iov, unsigned long nr_segs, unsigned int flags);\n6271 long sys_move_pages(pid_t pid, unsigned long nr_pages, const void __user * __user *pages, const int __user *nodes, int __user *status, int flags);\n6272 long sys_get_robust_list(int pid, struct robust_list_head __user * __user *head_ptr, size_t __user *len_ptr);\n6273 long sys_set_robust_list(struct robust_list_head __user *head, size_t len);\n6274 long sys_kexec_load(unsigned long entry, unsigned long nr_segments, struct kexec_segment __user *segments, unsigned long flags);\n6275 long sys_getcpu(unsigned __user *cpu, unsigned __user *node, struct getcpu_cache __user *cache);\n6276 long sys_epoll_pwait(int epfd, struct epoll_event __user *events, int maxevents, int timeout, const sigset_t __user *sigmask, size_t sigsetsize);\n6277 long sys_ioprio_set(int which, int who, int ioprio);\n6278 long sys_ioprio_get(int which, int who);\n6279 long sys_utimensat_time32(unsigned int dfd, const char __user *filename, struct old_timespec32 __user *t, int flags);\n6280 long sys_signalfd(int ufd, sigset_t __user *user_mask, size_t sizemask);\n6281 long sys_ni_syscall(void);\n6282 long sys_eventfd(unsigned int count);\n6283 long sys_fallocate(int fd, int mode, loff_t offset, loff_t len);\n6284 long sys_timerfd_create(int clockid, int flags);\n6285 long sys_timerfd_gettime32(int ufd, struct old_itimerspec32 __user *otmr);\n6286 long sys_timerfd_settime32(int ufd, int flags, const struct old_itimerspec32 __user *utmr, struct old_itimerspec32 __user *otmr);\n6287 long sys_signalfd4(int ufd, sigset_t __user *user_mask, size_t sizemask, int flags);\n6288 long sys_eventfd2(unsigned int count, int flags);\n6289 long sys_epoll_create1(int flags);\n6290 long sys_dup3(unsigned int oldfd, unsigned int newfd, int flags);\n6291 long sys_pipe2(int __user *fildes, int flags);\n6292 long sys_inotify_init1(int flags);\n6293 long sys_preadv(unsigned long fd, const struct iovec __user *vec, unsigned long vlen, unsigned long pos_l, unsigned long pos_h);\n```\n\n----------------------------------------\n\nTITLE: Defining Linux System Call Prototypes in C\nDESCRIPTION: This snippet showcases the structure of Linux system call definitions. Each line defines a system call with its number, return type (typically 'long'), name, and parameters. These definitions are crucial for the kernel's system call interface.\nSOURCE: https://github.com/panda-re/panda-ng/blob/main/plugins/syscalls2/generated-in/linux_x64_prototypes.txt#_snippet_1\n\nLANGUAGE: C\nCODE:\n```\n160 long sys_setrlimit(unsigned int resource, struct rlimit __user *rlim);\n161 long sys_chroot(const char __user *filename);\n162 long sys_sync(void);\n163 long sys_acct(const char __user *name);\n164 long sys_settimeofday(struct timeval __user *tv, struct timezone __user *tz);\n165 long sys_mount(char __user *dev_name, char __user *dir_name, char __user *type, unsigned long flags, void __user *data);\n166 long sys_umount(char __user *name, int flags);\n167 long sys_swapon(const char __user *specialfile, int swap_flags);\n168 long sys_swapoff(const char __user *specialfile);\n169 long sys_reboot(int magic1, int magic2, unsigned int cmd, void __user *arg);\n170 long sys_sethostname(char __user *name, int len);\n171 long sys_setdomainname(char __user *name, int len);\n172 long sys_iopl(unsigned int);\n173 long sys_ioperm(unsigned long, unsigned long, int);\n175 long sys_init_module(void __user *umod, unsigned long len, const char __user *uargs);\n176 long sys_delete_module(const char __user *name_user, unsigned int flags);\n179 long sys_quotactl(unsigned int cmd, const char __user *special, qid_t id, void __user *addr);\n186 long sys_gettid(void);\n187 long sys_readahead(int fd, loff_t offset, size_t count);\n188 long sys_setxattr(const char __user *path, const char __user *name, const void __user *value, size_t size, int flags);\n189 long sys_lsetxattr(const char __user *path, const char __user *name, const void __user *value, size_t size, int flags);\n190 long sys_fsetxattr(int fd, const char __user *name, const void __user *value, size_t size, int flags);\n191 long sys_getxattr(const char __user *path, const char __user *name, void __user *value, size_t size);\n192 long sys_lgetxattr(const char __user *path, const char __user *name, void __user *value, size_t size);\n193 long sys_fgetxattr(int fd, const char __user *name, void __user *value, size_t size);\n194 long sys_listxattr(const char __user *path, char __user *list, size_t size);\n195 long sys_llistxattr(const char __user *path, char __user *list, size_t size);\n196 long sys_flistxattr(int fd, char __user *list, size_t size);\n197 long sys_removexattr(const char __user *path, const char __user *name);\n198 long sys_lremovexattr(const char __user *path, const char __user *name);\n199 long sys_fremovexattr(int fd, const char __user *name);\n200 long sys_tkill(pid_t pid, int sig);\n201 long sys_time(time_t __user *tloc);\n202 long sys_futex(u32 __user *uaddr, int op, u32 val, struct timespec __user *utime, u32 __user *uaddr2, u32 val3);\n203 long sys_sched_setaffinity(pid_t pid, unsigned int len, unsigned long __user *user_mask_ptr);\n204 long sys_sched_getaffinity(pid_t pid, unsigned int len, unsigned long __user *user_mask_ptr);\n206 long sys_io_setup(unsigned nr_reqs, aio_context_t __user *ctx);\n207 long sys_io_destroy(aio_context_t ctx);\n208 long sys_io_getevents(aio_context_t ctx_id, long min_nr, long nr, struct io_event __user *events, struct timespec __user *timeout);\n209 long sys_io_submit(aio_context_t, long, struct iocb __user * __user *);\n210 long sys_io_cancel(aio_context_t ctx_id, struct iocb __user *iocb, struct io_event __user *result);\n212 long sys_lookup_dcookie(u64 cookie64, char __user *buf, size_t len);\n213 long sys_epoll_create(int size);\n216 long sys_remap_file_pages(unsigned long start, unsigned long size, unsigned long prot, unsigned long pgoff, unsigned long flags);\n217 long sys_getdents64(unsigned int fd, struct linux_dirent64 __user *dirent, unsigned int count);\n218 long sys_set_tid_address(int __user *tidptr);\n219 long sys_restart_syscall(void);\n220 long sys_semtimedop(int semid, struct sembuf __user *sops, unsigned nsops, const struct timespec __user *timeout);\n221 long sys_fadvise64(int fd, loff_t offset, size_t len, int advice);\n222 long sys_timer_create(clockid_t which_clock, struct sigevent __user *timer_event_spec, timer_t __user *created_timer_id);\n223 long sys_timer_settime(timer_t timer_id, int flags, const struct itimerspec __user *new_setting, struct itimerspec __user *old_setting);\n224 long sys_timer_gettime(timer_t timer_id, struct itimerspec __user *setting);\n225 long sys_timer_getoverrun(timer_t timer_id);\n226 long sys_timer_delete(timer_t timer_id);\n227 long sys_clock_settime(clockid_t which_clock, const struct timespec __user *tp);\n228 long sys_clock_gettime(clockid_t which_clock, struct timespec __user *tp);\n229 long sys_clock_getres(clockid_t which_clock, struct timespec __user *tp);\n230 long sys_clock_nanosleep(clockid_t which_clock, int flags, const struct timespec __user *rqtp, struct timespec __user *rmtp);\n231 long sys_exit_group(int error_code);\n232 long sys_epoll_wait(int epfd, struct epoll_event __user *events, int maxevents, int timeout);\n233 long sys_epoll_ctl(int epfd, int op, int fd, struct epoll_event __user *event);\n234 long sys_tgkill(pid_t tgid, pid_t pid, int sig);\n235 long sys_utimes(char __user *filename, struct timeval __user *utimes);\n237 long sys_mbind(unsigned long start, unsigned long len, unsigned long mode, const unsigned long __user *nmask, unsigned long maxnode, unsigned flags);\n238 long sys_set_mempolicy(int mode, const unsigned long __user *nmask, unsigned long maxnode);\n239 long sys_get_mempolicy(int __user *policy, unsigned long __user *nmask, unsigned long maxnode, unsigned long addr, unsigned long flags);\n240 long sys_mq_open(const char __user *name, int oflag, umode_t mode, struct mq_attr __user *attr);\n241 long sys_mq_unlink(const char __user *name);\n242 long sys_mq_timedsend(mqd_t mqdes, const char __user *msg_ptr, size_t msg_len, unsigned int msg_prio, const struct timespec __user *abs_timeout);\n243 long sys_mq_timedreceive(mqd_t mqdes, char __user *msg_ptr, size_t msg_len, unsigned int __user *msg_prio, const struct timespec __user *abs_timeout);\n244 long sys_mq_notify(mqd_t mqdes, const struct sigevent __user *notification);\n245 long sys_mq_getsetattr(mqd_t mqdes, const struct mq_attr __user *mqstat, struct mq_attr __user *omqstat);\n246 long sys_kexec_load(unsigned long entry, unsigned long nr_segments, struct kexec_segment __user *segments, unsigned long flags);\n247 long sys_waitid(int which, pid_t pid, struct siginfo __user *infop, int options, struct rusage __user *ru);\n248 long sys_add_key(const char __user *_type, const char __user *_description, const void __user *_payload, size_t plen, key_serial_t destringid);\n249 long sys_request_key(const char __user *_type, const char __user *_description, const char __user *_callout_info, key_serial_t destringid);\n250 long sys_keyctl(int cmd, unsigned long arg2, unsigned long arg3, unsigned long arg4, unsigned long arg5);\n251 long sys_ioprio_set(int which, int who, int ioprio);\n252 long sys_ioprio_get(int which, int who);\n253 long sys_inotify_init(void);\n254 long sys_inotify_add_watch(int fd, const char __user *path, u32 mask);\n255 long sys_inotify_rm_watch(int fd, __s32 wd);\n256 long sys_migrate_pages(pid_t pid, unsigned long maxnode, const unsigned long __user *from, const unsigned long __user *to);\n257 long sys_openat(int dfd, const char __user *filename, int flags, umode_t mode);\n258 long sys_mkdirat(int dfd, const char __user *pathname, umode_t mode);\n259 long sys_mknodat(int dfd, const char __user *filename, umode_t mode, unsigned dev);\n260 long sys_fchownat(int dfd, const char __user *filename, uid_t user, gid_t group, int flag);\n261 long sys_futimesat(int dfd, const char __user *filename, struct timeval __user *utimes);\n262 long sys_newfstatat(int dfd, const char __user *filename, struct stat __user *statbuf, int flag);\n263 long sys_unlinkat(int dfd, const char __user *pathname, int flag);\n264 long sys_renameat(int olddfd, const char __user *oldname, int newdfd, const char __user *newname);\n265 long sys_linkat(int olddfd, const char __user *oldname, int newdfd, const char __user *newname, int flags);\n266 long sys_symlinkat(const char __user *oldname, int newdfd, const char __user *newname);\n267 long sys_readlinkat(int dfd, const char __user *path, char __user *buf, int bufsiz);\n268 long sys_fchmodat(int dfd, const char __user *filename, umode_t mode);\n269 long sys_faccessat(int dfd, const char __user *filename, int mode);\n270 long sys_pselect6(int, fd_set __user *, fd_set __user *, fd_set __user *, struct timespec __user *, void __user *);\n271 long sys_ppoll(struct pollfd __user *, unsigned int, struct timespec __user *, const sigset_t __user *, size_t);\n272 long sys_unshare(unsigned long unshare_flags);\n273 long sys_set_robust_list(struct robust_list_head __user *head, size_t len);\n274 long sys_get_robust_list(int pid, struct robust_list_head __user * __user *head_ptr, size_t __user *len_ptr);\n275 long sys_splice(int fd_in, loff_t __user *off_in, int fd_out, loff_t __user *off_out, size_t len, unsigned int flags);\n276 long sys_tee(int fdin, int fdout, size_t len, unsigned int flags);\n277 long sys_sync_file_range(int fd, loff_t offset, loff_t nbytes, unsigned int flags);\n278 long sys_vmsplice(int fd, const struct iovec __user *iov, unsigned long nr_segs, unsigned int flags);\n279 long sys_move_pages(pid_t pid, unsigned long nr_pages, const void __user * __user *pages, const int __user *nodes, int __user *status, int flags);\n280 long sys_utimensat(int dfd, const char __user *filename, struct timespec __user *utimes, int flags);\n281 long sys_epoll_pwait(int epfd, struct epoll_event __user *events, int maxevents, int timeout, const sigset_t __user *sigmask, size_t sigsetsize);\n282 long sys_signalfd(int ufd, sigset_t __user *user_mask, size_t sizemask);\n283 long sys_timerfd_create(int clockid, int flags);\n284 long sys_eventfd(unsigned int count);\n285 long sys_fallocate(int fd, int mode, loff_t offset, loff_t len);\n286 long sys_timerfd_settime(int ufd, int flags, const struct itimerspec __user *utmr, struct itimerspec __user *otmr);\n287 long sys_timerfd_gettime(int ufd, struct itimerspec __user *otmr);\n288 long sys_accept4(int, struct sockaddr __user *, int __user *, int);\n```\n\n----------------------------------------\n\nTITLE: Declaring Linux System Calls in C\nDESCRIPTION: This snippet showcases the declarations of various Linux system calls. It includes function signatures for file operations, process management, network operations, and other system-level functions. Each declaration specifies the return type (typically 'long'), function name (prefixed with 'sys_'), and its parameters.\nSOURCE: https://github.com/panda-re/panda-ng/blob/main/plugins/syscalls2/generated-in/linux_mips64_prototypes.txt#_snippet_9\n\nLANGUAGE: C\nCODE:\n```\nlong sys_access(const char __user *filename, int mode);\nlong sys_pipe(int __user *fildes);\nlong sys_select(int n, fd_set __user *inp, fd_set __user *outp, fd_set __user *exp, struct __kernel_old_timeval __user *tvp);\nlong sys_sched_yield(void);\nlong sys_mremap(unsigned long addr, unsigned long old_len, unsigned long new_len, unsigned long flags, unsigned long new_addr);\n// ... (truncated for brevity)\nlong sys_gettid(void);\n```\n\n----------------------------------------\n\nTITLE: Declaring Memory Management System Calls in C\nDESCRIPTION: This snippet declares system calls for memory management (mmap, munmap, mprotect). It includes function signatures with their respective parameters and return types.\nSOURCE: https://github.com/panda-re/panda-ng/blob/main/plugins/syscalls2/generated-in/freebsd_x64_prototypes.txt#_snippet_6\n\nLANGUAGE: C\nCODE:\n```\nint fstat(int fd, struct ostat *sb);\nint getkerninfo(int op, char *where, size_t *size, int arg);\nint getpagesize(void);\nint msync(void *addr, size_t len, int flags);\nint vfork(void);\n\nint sbrk(int incr);\nint sstk(int incr);\nvoid *mmap(void *addr, int len, int prot, int flags, int fd, long pos);\nint vadvise(int anom);\nint munmap(void *addr, size_t len);\nint mprotect(void *addr, size_t len, int prot);\nint madvise(void *addr, size_t len, int behav);\n```\n\n----------------------------------------\n\nTITLE: Initializing PANDA Interface with pandare Module - Python\nDESCRIPTION: This example demonstrates how to import the pandare module and initialize a Panda object for the 'i386' architecture. The Panda object serves as the primary interface for interacting with the PANDA analysis framework in Python. Users should ensure that all system and Python dependencies are installed prior to running this code. The 'generic' parameter specifies the target CPU architecture. This code can be expanded to develop analysis plugins or automate replays. Inputs: none directly. Outputs: Panda instance ready for use. Requires pandare to be installed via pip.\nSOURCE: https://github.com/panda-re/panda-ng/blob/main/python/core/README.md#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom pandare import Panda\npanda = Panda(generic='i386')\n...\n```\n\n----------------------------------------\n\nTITLE: Defining Kernel Offsets in GLib Key-Value Config for OSI-Linux (GLib key-value)\nDESCRIPTION: This snippet shows how to define architecture- and version-specific kernel structure offsets in a GLib key-value file (INI-like format) for use by the osi_linux plugin. Each configuration section names a specific kernel and provides field offsets required for process and memory introspection. No external dependencies other than the osi_linux plugin and the proper path to this config file are required. The expected input is multiple configuration sections, and the output is used at runtime to guide kernel structure traversal.\nSOURCE: https://github.com/panda-re/panda-ng/blob/main/plugins/osi_linux/README.md#_snippet_0\n\nLANGUAGE: GLib key-value\nCODE:\n```\n[ubuntu:4.4.0-98-generic:32]\nname = 4.4.0-98-generic|#121-Ubuntu SMP Tue Oct 10 14:23:20 UTC 2017|i686\nversion.a = 4\nversion.b = 4\nversion.c = 90\ntask.init_addr = 3249445504\n#task.init_addr = 0xC1AE9A80\n#task.per_cpu_offset_0 = 0x34B42000\ntask.per_cpu_offset_0 = 884219904\n#task.current_task_addr = 0xC1C852A8\ntask.current_task_addr = 3251131048\ntask.size = 5824\ntask.tasks_offset = 624\ntask.pid_offset = 776\n\n[debian:4.9.0-6-686-pae:32]\nname = 4.9.0-6-686-pae|#1 SMP Debian 4.9.82-1+deb9u3 (2018-03-02)|i686\nversion.a = 4\nversion.b = 9\nversion.c = 88\ntask.init_addr = 3245807232\n#task.init_addr = 0xC1771680\n#task.per_cpu_offset_0 = 0x36127000\ntask.per_cpu_offset_0 = 907177984\n#task.current_task_addr = 0xC18C3208\ntask.current_task_addr = 3247190536\ntask.size = 5888\ntask.tasks_offset = 708\ntask.pid_offset = 864\n```\n\n----------------------------------------\n\nTITLE: Defining OSI Core Data Structures in C\nDESCRIPTION: Core data structures used by the PANDA OSI framework for representing processes, threads, memory pages, and modules.\nSOURCE: https://github.com/panda-re/panda-ng/blob/main/plugins/osi/README.md#_snippet_1\n\nLANGUAGE: C\nCODE:\n```\n    // Represents a process handle\n    typedef struct osi_prochandle_struct {\n        target_ptr_t taskd;\n        target_ptr_t asid;\n    } OsiProcHandle;\n\n    // Represents a thread\n    typedef struct osi_thread_struct {\n        target_pid_t pid;\n        target_pid_t tid;\n    } OsiThread;\n\n    // Represents a page of memory (not implemented so far)\n    typedef struct osi_page_struct {\n        target_ptr_t start;\n        target_ulong len;\n    } OsiPage;\n\n    // Represents a single module (userspace library or kernel module)\n    typedef struct osi_module_struct {\n        target_ptr_t modd;\n        target_ptr_t base;\n        target_ptr_t size;\n        char *file;\n        char *name;\n    } OsiModule;\n\n    // Represents a single process\n    typedef struct osi_proc_struct {\n        target_ptr_t taskd;\n        target_ptr_t asid;\n        target_pid_t pid;\n        target_pid_t ppid;\n        char *name;\n        OsiPage *pages;     // TODO in osi_linux\n    } OsiProc;\n\n    // Represents process memory details\n    typedef struct osi_proc_mem {\n        target_ptr_t start_brk;\n        target_ptr_t brk;\n    } OsiProcMem;\n```\n\n----------------------------------------\n\nTITLE: Windows NT Process and Thread Management Function Declarations in C\nDESCRIPTION: Function signatures for NT API calls related to process and thread management, including opening and accessing processes, threads, and tokens.\nSOURCE: https://github.com/panda-re/panda-ng/blob/main/plugins/syscalls2/generated-in/all_windows_prototypes.txt#_snippet_4\n\nLANGUAGE: C\nCODE:\n```\nNTSTATUS NtOpenProcess (PHANDLE ProcessHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, PCLIENT_ID ClientId);\n```\n\nLANGUAGE: C\nCODE:\n```\nNTSTATUS NtOpenProcessToken (HANDLE ProcessHandle, ACCESS_MASK DesiredAccess, PHANDLE TokenHandle);\n```\n\nLANGUAGE: C\nCODE:\n```\nNTSTATUS NtOpenProcessTokenEx (HANDLE ProcessHandle, ACCESS_MASK DesiredAccess, ULONG HandleAttributes, PHANDLE TokenHandle);\n```\n\nLANGUAGE: C\nCODE:\n```\nNTSTATUS NtOpenThread (PHANDLE ThreadHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, PCLIENT_ID ClientId);\n```\n\nLANGUAGE: C\nCODE:\n```\nNTSTATUS NtOpenThreadToken (HANDLE ThreadHandle, ACCESS_MASK DesiredAccess, BOOLEAN OpenAsSelf, PHANDLE TokenHandle);\n```\n\nLANGUAGE: C\nCODE:\n```\nNTSTATUS NtOpenThreadTokenEx (HANDLE ThreadHandle, ACCESS_MASK DesiredAccess, BOOLEAN OpenAsSelf, ULONG HandleAttributes, PHANDLE TokenHandle);\n```\n\n----------------------------------------\n\nTITLE: Windows NT System Call Declarations\nDESCRIPTION: Function declarations for Windows NT native system calls used for system-level operations like file I/O, process management, memory management, and security operations. These functions form the native API layer of Windows NT.\nSOURCE: https://github.com/panda-re/panda-ng/blob/main/plugins/syscalls2/generated-in/windows_8sp0_x64_prototypes.txt#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nNTSTATUS NtWorkerFactoryWorkerReady (HANDLE WorkerFactoryHandle);\nNTSTATUS NtMapUserPhysicalPagesScatter (PVOID *VirtualAddresses, ULONG_PTR NumberOfPages, PULONG_PTR UserPfnArray);\nNTSTATUS NtWaitForSingleObject (HANDLE Handle, BOOLEAN Alertable, PLARGE_INTEGER Timeout);\nNTSTATUS NtCallbackReturn (PVOID OutputBuffer, ULONG OutputLength, NTSTATUS Status);\n// ... additional syscalls omitted for brevity ...\nNTSTATUS NtYieldExecution ();\nNTSTATUS NtAddAtom (PWSTR AtomName, ULONG Length, PRTL_ATOM Atom);\n```\n\n----------------------------------------\n\nTITLE: Declaring Windows NT Process and Object Management Functions in C\nDESCRIPTION: Function declarations for Windows NT system calls related to process creation, thread management, and object operations. These functions provide low-level access to create, manipulate and control processes, threads, and other system objects.\nSOURCE: https://github.com/panda-re/panda-ng/blob/main/plugins/syscalls2/generated-in/windows_vistasp0_x86_prototypes.txt#_snippet_2\n\nLANGUAGE: C\nCODE:\n```\nNTSTATUS NtCreateProcess (PHANDLE ProcessHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, HANDLE ParentProcess, BOOLEAN InheritObjectTable, HANDLE SectionHandle, HANDLE DebugPort, HANDLE ExceptionPort);\nNTSTATUS NtCreateProcessEx (PHANDLE ProcessHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, HANDLE ParentProcess, ULONG Flags, HANDLE SectionHandle, HANDLE DebugPort, HANDLE ExceptionPort, ULONG JobMemberLevel);\nNTSTATUS NtCreateProfile (PHANDLE ProfileHandle, HANDLE Process, PVOID RangeBase, SIZE_T RangeSize, ULONG BucketSize, PULONG Buffer, ULONG BufferSize, KPROFILE_SOURCE ProfileSource, KAFFINITY Affinity);\nNTSTATUS NtCreateSection (PHANDLE SectionHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, PLARGE_INTEGER MaximumSize, ULONG SectionPageProtection, ULONG AllocationAttributes, HANDLE FileHandle);\nNTSTATUS NtCreateThread (PHANDLE ThreadHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, HANDLE ProcessHandle, PCLIENT_ID ClientId, PCONTEXT ThreadContext, PINITIAL_TEB InitialTeb, BOOLEAN CreateSuspended);\nNTSTATUS NtDebugActiveProcess (HANDLE ProcessHandle, HANDLE DebugObjectHandle);\nNTSTATUS NtDebugContinue (HANDLE DebugObjectHandle, PCLIENT_ID ClientId, NTSTATUS ContinueStatus);\nNTSTATUS NtDelayExecution (BOOLEAN Alertable, PLARGE_INTEGER DelayInterval);\nNTSTATUS NtDeleteObjectAuditAlarm (PUNICODE_STRING SubsystemName, PVOID HandleId, BOOLEAN GenerateOnClose);\nNTSTATUS NtDuplicateObject (HANDLE SourceProcessHandle, HANDLE SourceHandle, HANDLE TargetProcessHandle, PHANDLE TargetHandle, ACCESS_MASK DesiredAccess, ULONG HandleAttributes, ULONG Options);\n```\n\n----------------------------------------\n\nTITLE: Declaring Linux System Call Prototypes - C\nDESCRIPTION: This snippet declares a sequence of Linux kernel system call function prototypes in C, specifying return types, parameter types, and semantic intent for each syscall. No function implementations are provided—only the signatures describing the interface, as is standard in kernel development headers or syscall tables. Dependencies include Linux kernel typedefs (e.g., cap_user_header_t, sigset_t, __user pointers), custom structs (e.g., sched_param, statfs), and standard C types (int, long, size_t). Each function name and parameter type corresponds closely to its intended kernel operation, with parameters frequently marked as userspace pointers to facilitate safe memory transfer between kernel and user. Inputs are typically descriptors, pointers, or values representing user data, and outputs are syscall-specific returns (often long) or structures updated by reference. No explicit constraints are imposed here, but appropriate privilege and argument validation are expected in adapters or callers.\nSOURCE: https://github.com/panda-re/panda-ng/blob/main/plugins/syscalls2/generated-in/linux_mips64_prototypes.txt#_snippet_7\n\nLANGUAGE: C\nCODE:\n```\n5123 long sys_capget(cap_user_header_t header, cap_user_data_t dataptr);\n5124 long sys_capset(cap_user_header_t header, const cap_user_data_t data);\n5125 long sys_rt_sigpending(sigset_t __user *set, size_t sigsetsize);\n5126 long sys_rt_sigtimedwait(const sigset_t __user *uthese, siginfo_t __user *uinfo, const struct __kernel_timespec __user *uts, size_t sigsetsize);\n5127 long sys_rt_sigqueueinfo(pid_t pid, int sig, siginfo_t __user *uinfo);\n5128 long sys_rt_sigsuspend(sigset_t __user *unewset, size_t sigsetsize);\n5129 long sys_sigaltstack(const struct sigaltstack __user *uss, struct sigaltstack __user *uoss);\n5130 long sys_utime(char __user *filename, struct utimbuf __user *times);\n5131 long sys_mknod(const char __user *filename, umode_t mode, unsigned dev);\n5132 long sys_personality(unsigned int personality);\n5133 long sys_ustat(unsigned dev, struct ustat __user *ubuf);\n5134 long sys_statfs(const char __user *path, struct statfs __user *buf);\n5135 long sys_fstatfs(unsigned int fd, struct statfs __user *buf);\n5136 long sys_sysfs(int option, unsigned long arg1, unsigned long arg2);\n5137 long sys_getpriority(int which, int who);\n5138 long sys_setpriority(int which, int who, int niceval);\n5139 long sys_sched_setparam(pid_t pid, struct sched_param __user *param);\n5140 long sys_sched_getparam(pid_t pid, struct sched_param __user *param);\n5141 long sys_sched_setscheduler(pid_t pid, int policy, struct sched_param __user *param);\n5142 long sys_sched_getscheduler(pid_t pid);\n5143 long sys_sched_get_priority_max(int policy);\n5144 long sys_sched_get_priority_min(int policy);\n5145 long sys_sched_rr_get_interval(pid_t pid, struct __kernel_timespec __user *interval);\n5146 long sys_mlock(unsigned long start, size_t len);\n5147 long sys_munlock(unsigned long start, size_t len);\n5148 long sys_mlockall(int flags);\n5149 long sys_munlockall(void);\n5150 long sys_vhangup(void);\n5151 long sys_pivot_root(const char __user *new_root, const char __user *put_old);\n5152 long sys_sysctl(struct __sysctl_args __user *args);\n5153 long sys_prctl(int option, unsigned long arg2, unsigned long arg3, unsigned long arg4, unsigned long arg5);\n5154 long sys_adjtimex(struct __kernel_timex __user *txc_p);\n5155 long sys_setrlimit(unsigned int resource, struct rlimit __user *rlim);\n5156 long sys_chroot(const char __user *filename);\n5157 long sys_sync(void);\n5158 long sys_acct(const char __user *name);\n5159 long sys_settimeofday(struct __kernel_old_timeval __user *tv, struct timezone __user *tz);\n5160 long sys_mount(char __user *dev_name, char __user *dir_name, char __user *type, unsigned long flags, void __user *data);\n5161 long sys_umount(char __user *name, int flags);\n5162 long sys_swapon(const char __user *specialfile, int swap_flags);\n5163 long sys_swapoff(const char __user *specialfile);\n5164 long sys_reboot(int magic1, int magic2, unsigned int cmd, void __user *arg);\n5165 long sys_sethostname(char __user *name, int len);\n5166 long sys_setdomainname(char __user *name, int len);\n5167 long sys_ni_syscall(void);\n5168 long sys_init_module(void __user *umod, unsigned long len, const char __user *uargs);\n5169 long sys_delete_module(const char __user *name_user, unsigned int flags);\n5170 long sys_ni_syscall(void);\n5171 long sys_ni_syscall(void);\n5172 long sys_quotactl(unsigned int cmd, const char __user *special, qid_t id, void __user *addr);\n5173 long sys_ni_syscall(void);\n5174 long sys_ni_syscall(void);\n5175 long sys_ni_syscall(void);\n5176 long sys_ni_syscall(void);\n5177 long sys_ni_syscall(void);\n5178 long sys_gettid(void);\n5179 long sys_readahead(int fd, loff_t offset, size_t count);\n5180 long sys_setxattr(const char __user *path, const char __user *name, const void __user *value, size_t size, int flags);\n5181 long sys_lsetxattr(const char __user *path, const char __user *name, const void __user *value, size_t size, int flags);\n5182 long sys_fsetxattr(int fd, const char __user *name, const void __user *value, size_t size, int flags);\n5183 long sys_getxattr(const char __user *path, const char __user *name, void __user *value, size_t size);\n5184 long sys_lgetxattr(const char __user *path, const char __user *name, void __user *value, size_t size);\n5185 long sys_fgetxattr(int fd, const char __user *name, void __user *value, size_t size);\n5186 long sys_listxattr(const char __user *path, char __user *list, size_t size);\n5187 long sys_llistxattr(const char __user *path, char __user *list, size_t size);\n5188 long sys_flistxattr(int fd, char __user *list, size_t size);\n5189 long sys_removexattr(const char __user *path, const char __user *name);\n5190 long sys_lremovexattr(const char __user *path, const char __user *name);\n5191 long sys_fremovexattr(int fd, const char __user *name);\n5192 long sys_tkill(pid_t pid, int sig);\n5193 long sys_ni_syscall(void);\n5194 long sys_futex(u32 __user *uaddr, int op, u32 val, struct __kernel_timespec __user *utime, u32 __user *uaddr2, u32 val3);\n5195 long sys_sched_setaffinity(pid_t pid, unsigned int len, unsigned long __user *user_mask_ptr);\n5196 long sys_sched_getaffinity(pid_t pid, unsigned int len, unsigned long __user *user_mask_ptr);\n5200 long sys_io_setup(unsigned nr_reqs, aio_context_t __user *ctx);\n5201 long sys_io_destroy(aio_context_t ctx);\n5202 long sys_io_getevents(aio_context_t ctx_id, long min_nr, long nr, struct io_event __user *events, struct __kernel_timespec __user *timeout);\n5203 long sys_io_submit(aio_context_t, long, struct iocb __user * __user *);\n5204 long sys_io_cancel(aio_context_t ctx_id, struct iocb __user *iocb, struct io_event __user *result);\n5205 long sys_exit_group(int error_code);\n5206 long sys_lookup_dcookie(u64 cookie64, char __user *buf, size_t len);\n5207 long sys_epoll_create(int size);\n5208 long sys_epoll_ctl(int epfd, int op, int fd, struct epoll_event __user *event);\n5209 long sys_epoll_wait(int epfd, struct epoll_event __user *events, int maxevents, int timeout);\n5210 long sys_remap_file_pages(unsigned long start, unsigned long size, unsigned long prot, unsigned long pgoff, unsigned long flags);\n5211 void sys_rt_sigreturn(void);\n5212 long sys_set_tid_address(int __user *tidptr);\n5213 long sys_restart_syscall(void);\n5214 long sys_semtimedop(int semid, struct sembuf __user *sops, unsigned nsops, const struct __kernel_timespec __user *timeout);\n5215 long sys_fadvise64_64(int fd, loff_t offset, loff_t len, int advice);\n5216 long sys_timer_create(clockid_t which_clock, struct sigevent __user *timer_event_spec, timer_t __user *created_timer_id);\n5217 long sys_timer_settime(timer_t timer_id, int flags, const struct __kernel_itimerspec __user *new_setting, struct __kernel_itimerspec __user *old_setting);\n5218 long sys_timer_gettime(timer_t timer_id, struct __kernel_itimerspec __user *setting);\n5219 long sys_timer_getoverrun(timer_t timer_id);\n5220 long sys_timer_delete(timer_t timer_id);\n5221 long sys_clock_settime(clockid_t which_clock, const struct __kernel_timespec __user *tp);\n5222 long sys_clock_gettime(clockid_t which_clock, struct __kernel_timespec __user *tp);\n5223 long sys_clock_getres(clockid_t which_clock, struct __kernel_timespec __user *tp);\n5224 long sys_clock_nanosleep(clockid_t which_clock, int flags, const struct __kernel_timespec __user *rqtp, struct __kernel_timespec __user *rmtp);\n5225 long sys_tgkill(pid_t tgid, pid_t pid, int sig);\n5226 long sys_utimes(char __user *filename, struct __kernel_old_timeval __user *utimes);\n5227 long sys_mbind(unsigned long start, unsigned long len, unsigned long mode, const unsigned long __user *nmask, unsigned long maxnode, unsigned flags);\n5228 long sys_get_mempolicy(int __user *policy, unsigned long __user *nmask, unsigned long maxnode, unsigned long addr, unsigned long flags);\n5229 long sys_set_mempolicy(int mode, const unsigned long __user *nmask, unsigned long maxnode);\n5230 long sys_mq_open(const char __user *name, int oflag, umode_t mode, struct mq_attr __user *attr);\n5231 long sys_mq_unlink(const char __user *name);\n5232 long sys_mq_timedsend(mqd_t mqdes, const char __user *msg_ptr, size_t msg_len, unsigned int msg_prio, const struct __kernel_timespec __user *abs_timeout);\n5233 long sys_mq_timedreceive(mqd_t mqdes, char __user *msg_ptr, size_t msg_len, unsigned int __user *msg_prio, const struct __kernel_timespec __user *abs_timeout);\n5234 long sys_mq_notify(mqd_t mqdes, const struct sigevent __user *notification);\n5235 long sys_mq_getsetattr(mqd_t mqdes, const struct mq_attr __user *mqstat, struct mq_attr __user *omqstat);\n5236 long sys_ni_syscall(void);\n5237 long sys_waitid(int which, pid_t pid, struct siginfo __user *infop, int options, struct rusage __user *ru);\n5239 long sys_add_key(const char __user *_type, const char __user *_description, const void __user *_payload, size_t plen, key_serial_t destringid);\n5240 long sys_request_key(const char __user *_type, const char __user *_description, const char __user *_callout_info, key_serial_t destringid);\n5241 long sys_keyctl(int cmd, unsigned long arg2, unsigned long arg3, unsigned long arg4, unsigned long arg5);\n5243 long sys_inotify_init(void);\n5244 long sys_inotify_add_watch(int fd, const char __user *path, u32 mask);\n5245 long sys_inotify_rm_watch(int fd, __s32 wd);\n5246 long sys_migrate_pages(pid_t pid, unsigned long maxnode, const unsigned long __user *from, const unsigned long __user *to);\n5247 long sys_openat(int dfd, const char __user *filename, int flags, umode_t mode);\n5248 long sys_mkdirat(int dfd, const char __user *pathname, umode_t mode);\n5249 long sys_mknodat(int dfd, const char __user *filename, umode_t mode, unsigned dev);\n5250 long sys_fchownat(int dfd, const char __user *filename, uid_t user, gid_t group, int flag);\n5251 long sys_futimesat(int dfd, const char __user *filename, struct __kernel_old_timeval __user *utimes);\n5252 long sys_newfstatat(int dfd, const char __user *filename, struct stat __user *statbuf, int flag);\n5253 long sys_unlinkat(int dfd, const char __user *pathname, int flag);\n```\n\n----------------------------------------\n\nTITLE: Declaring File Access and Process Control System Calls in C\nDESCRIPTION: This snippet declares system calls for file access control (access, chflags) and process control (kill, getppid). It includes function signatures with their respective parameters and return types.\nSOURCE: https://github.com/panda-re/panda-ng/blob/main/plugins/syscalls2/generated-in/freebsd_x64_prototypes.txt#_snippet_3\n\nLANGUAGE: C\nCODE:\n```\nint access(const char *path, int amode);\nint chflags(const char *path, u_long flags);\nint fchflags(int fd, u_long flags);\nint sync(void);\nint kill(int pid, int signum);\nint stat(const char *path, struct ostat *ub);\npid_t getppid(void);\nint lstat(const char *path, struct ostat *ub);\nint dup(unsigned fd);\nint pipe(void);\ngid_t getegid(void);\nint profil(char *samples, size_t size, size_t offset, unsigned scale);\nint ktrace(const char *fname, int ops, int facs, int pid);\nint sigaction(int signum, struct osigaction *nsa, struct osigaction *osa);\ngid_t getgid(void);\n```\n\n----------------------------------------\n\nTITLE: Declaring Windows NT System Call Prototypes in C\nDESCRIPTION: This code snippet provides a collection of 'NTSTATUS'-returning function prototypes for various Windows Native API functions using C language conventions. These declarations require Windows NT type definitions (such as EXECUTION_STATE, HANDLE, PVOID, NTSTATUS, etc.), and presume inclusion of necessary headers (e.g., <windows.h>, or custom NT header imports). Each function specifies input/output parameters for controlling system states, manipulating files, threads, processes, and other kernel operations. The signatures establish binary interfaces for system calls; actual implementations would be in the underlying OS kernel or a compatible runtime. Inputs and outputs strictly follow the NT API calling conventions; limitations include that only definition (not implementation) is provided, and the code expects an NT environment.\nSOURCE: https://github.com/panda-re/panda-ng/blob/main/plugins/syscalls2/generated-in/windows_2000_x86_prototypes.txt#_snippet_3\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtSetThreadExecutionState (EXECUTION_STATE esFlags, PEXECUTION_STATE PreviousFlags);\nNTSTATUS NtSetTimer (HANDLE TimerHandle, PLARGE_INTEGER DueTime, PTIMER_APC_ROUTINE TimerApcRoutine, PVOID TimerContext, BOOLEAN WakeTimer, LONG Period, PBOOLEAN PreviousState);\nNTSTATUS NtSetTimerResolution (ULONG DesiredTime, BOOLEAN SetResolution, PULONG ActualTime);\nNTSTATUS NtSetUuidSeed (PCHAR Seed);\nNTSTATUS NtSetValueKey (HANDLE KeyHandle, PUNICODE_STRING ValueName, ULONG TitleIndex, ULONG Type, PVOID Data, ULONG DataSize);\nNTSTATUS NtSetVolumeInformationFile (HANDLE FileHandle, PIO_STATUS_BLOCK IoStatusBlock, PVOID FsInformation, ULONG Length, FS_INFORMATION_CLASS FsInformationClass);\nNTSTATUS NtShutdownSystem (SHUTDOWN_ACTION Action);\nNTSTATUS NtSignalAndWaitForSingleObject (HANDLE SignalHandle, HANDLE WaitHandle, BOOLEAN Alertable, PLARGE_INTEGER Timeout);\nNTSTATUS NtStartProfile (HANDLE ProfileHandle);\nNTSTATUS NtStopProfile (HANDLE ProfileHandle);\nNTSTATUS NtSuspendThread (HANDLE ThreadHandle, PULONG PreviousSuspendCount);\nNTSTATUS NtSystemDebugControl (SYSDBG_COMMAND Command, PVOID InputBuffer, ULONG InputBufferLength, PVOID OutputBuffer, ULONG OutputBufferLength, PULONG ReturnLength);\nNTSTATUS NtTerminateJobObject (HANDLE JobHandle, NTSTATUS ExitStatus);\nNTSTATUS NtTerminateProcess (HANDLE ProcessHandle, NTSTATUS ExitStatus);\nNTSTATUS NtTerminateThread (HANDLE ThreadHandle, NTSTATUS ExitStatus);\nNTSTATUS NtTestAlert ();\nNTSTATUS NtUnloadDriver (PUNICODE_STRING DriverServiceName);\nNTSTATUS NtUnloadKey (POBJECT_ATTRIBUTES TargetKey);\nNTSTATUS NtUnlockFile (HANDLE FileHandle, PIO_STATUS_BLOCK IoStatusBlock, PLARGE_INTEGER ByteOffset, PLARGE_INTEGER Length, ULONG Key);\nNTSTATUS NtUnlockVirtualMemory (HANDLE ProcessHandle, PVOID *BaseAddress, PSIZE_T RegionSize, ULONG MapType);\nNTSTATUS NtUnmapViewOfSection (HANDLE ProcessHandle, PVOID BaseAddress);\nNTSTATUS NtVdmControl (VDMSERVICECLASS Service, PVOID ServiceData);\nNTSTATUS NtWaitForMultipleObjects (ULONG Count, HANDLE Handles[], WAIT_TYPE WaitType, BOOLEAN Alertable, PLARGE_INTEGER Timeout);\nNTSTATUS NtWaitForSingleObject (HANDLE Handle, BOOLEAN Alertable, PLARGE_INTEGER Timeout);\nNTSTATUS NtWaitHighEventPair (HANDLE EventPairHandle);\nNTSTATUS NtWaitLowEventPair (HANDLE EventPairHandle);\nNTSTATUS NtWriteFile (HANDLE FileHandle, HANDLE Event, PIO_APC_ROUTINE ApcRoutine, PVOID ApcContext, PIO_STATUS_BLOCK IoStatusBlock, PVOID Buffer, ULONG Length, PLARGE_INTEGER ByteOffset, PULONG Key);\nNTSTATUS NtWriteFileGather (HANDLE FileHandle, HANDLE Event, PIO_APC_ROUTINE ApcRoutine, PVOID ApcContext, PIO_STATUS_BLOCK IoStatusBlock, PFILE_SEGMENT_ELEMENT SegmentArray, ULONG Length, PLARGE_INTEGER ByteOffset, PULONG Key);\nNTSTATUS NtWriteRequestData (HANDLE PortHandle, PPORT_MESSAGE Message, ULONG DataEntryIndex, PVOID Buffer, SIZE_T BufferSize, PSIZE_T NumberOfBytesWritten);\nNTSTATUS NtWriteVirtualMemory (HANDLE ProcessHandle, PVOID BaseAddress, PVOID Buffer, SIZE_T BufferSize, PSIZE_T NumberOfBytesWritten);\nNTSTATUS NtYieldExecution ();\n```\n\n----------------------------------------\n\nTITLE: Declaring Directory and File System System Calls in C\nDESCRIPTION: This snippet declares system calls related to directory operations (chdir, mknod) and file system management (mount, unmount). It includes function signatures with their respective parameters and return types.\nSOURCE: https://github.com/panda-re/panda-ng/blob/main/plugins/syscalls2/generated-in/freebsd_x64_prototypes.txt#_snippet_1\n\nLANGUAGE: C\nCODE:\n```\nint chdir(const char *path);\nint fchdir(int fd);\nint mknod(const char *path, int mode, uint32_t dev);\nint chmod(const char *path, mode_t mode);\nint chown(const char *path, int uid, int gid);\nvoid *break(char *nsize);\nint getfsstat(struct ostatfs *buf, long bufsize, int mode);\n\npid_t getpid(void);\nint mount(const char *type, const char *path, int flags, void *data);\nint unmount(const char *path, int flags);\n```\n\n----------------------------------------\n\nTITLE: Sample osi_linux API Usage in C (C)\nDESCRIPTION: Declares two key Linux-specific API calls for osi_linux: converting a file descriptor to a filename, and retrieving the file position for a file descriptor. These C function prototypes require linkage with osi_linux and PANDA internals; input parameters are PANDA- and QEMU-specific structures and an integer file descriptor. Returns a string filename or an unsigned long long file offset. Useful for C/C++ code building PANDA plugins or extensions.\nSOURCE: https://github.com/panda-re/panda-ng/blob/main/plugins/osi_linux/README.md#_snippet_7\n\nLANGUAGE: C\nCODE:\n```\n// returns fd for a filename or a NULL if failed\nchar *osi_linux_fd_to_filename(CPUState *env, OsiProc *p, int fd);\n\n// returns pos in a file\nunsigned long long  osi_linux_fd_to_pos(CPUState *env, OsiProc *p, int fd);\n```\n\n----------------------------------------\n\nTITLE: Handling Unknown System Call Returns in C\nDESCRIPTION: Callback function signature for monitoring unknown system call returns. This is called when a system call without a specific callback returns in the guest OS.\nSOURCE: https://github.com/panda-re/panda-ng/blob/main/plugins/syscalls2/README.md#_snippet_1\n\nLANGUAGE: C\nCODE:\n```\ntypedef void (*on_unknown_sys_return_t)(CPUState *env, target_ulong pc, target_ulong callno)\n```\n\n----------------------------------------\n\nTITLE: Defining Kernel Module and File System Management System Calls in C\nDESCRIPTION: This snippet defines system calls for kernel module operations, file system statistics, and file handle operations.\nSOURCE: https://github.com/panda-re/panda-ng/blob/main/plugins/syscalls2/generated-in/freebsd_x64_prototypes.txt#_snippet_20\n\nLANGUAGE: C\nCODE:\n```\nint fhstatfs(const struct fhandle *u_fhp, struct ostatfs *buf);\nint fhopen(const struct fhandle *u_fhp, int flags);\nint fhstat(const struct fhandle *u_fhp, struct freebsd11_stat *sb);\nint modnext(int modid);\nint modstat(int modid, struct module_stat *stat);\nint modfnext(int modid);\nint modfind(const char *name);\nint kldload(const char *file);\nint kldunload(int fileid);\nint kldfind(const char *file);\nint kldnext(int fileid);\nint kldstat(int fileid, struct kld_file_stat *stat);\nint kldfirstmod(int fileid);\n```\n\n----------------------------------------\n\nTITLE: Declaring File Locking and IPC System Calls in C\nDESCRIPTION: This snippet declares system calls for file locking (flock) and interprocess communication (mkfifo, socketpair). It includes function signatures with their respective parameters and return types.\nSOURCE: https://github.com/panda-re/panda-ng/blob/main/plugins/syscalls2/generated-in/freebsd_x64_prototypes.txt#_snippet_10\n\nLANGUAGE: C\nCODE:\n```\nint flock(int fd, int how);\nint mkfifo(const char *path, mode_t mode);\nint sendto(int s, const void *buf, size_t len, int flags, const struct sockaddr *to, int tolen);\nint shutdown(int s, int how);\nint socketpair(int domain, int type, int protocol, int *rsv);\nint mkdir(const char *path, mode_t mode);\nint rmdir(const char *path);\nint utimes(const char *path, struct timeval *tptr);\n\nint adjtime(struct timeval *delta, struct timeval *olddelta);\nint getpeername(int fdes, struct sockaddr *asa, int *alen);\nlong gethostid(void);\nint sethostid(long hostid);\nint getrlimit(unsigned which, struct orlimit *rlp);\nint setrlimit(unsigned which, struct orlimit *rlp);\nint killpg(int pgid, int signum);\nint setsid(void);\nint quotactl(const char *path, int cmd, int uid, void *arg);\nint quota(void);\nint getsockname(int fdec, struct sockaddr *asa, int *alen);\n```\n\n----------------------------------------\n\nTITLE: Windows NT Native API Function Declarations in C\nDESCRIPTION: A collection of Windows NT Native API function prototypes (NtXxx functions) for various operating system operations like file management, registry manipulation, process control, security functions, and resource handling. These function declarations show the programmatic interface to the Windows NT kernel.\nSOURCE: https://github.com/panda-re/panda-ng/blob/main/plugins/syscalls2/generated-in/windows_vistasp0_x64_prototypes.txt#_snippet_8\n\nLANGUAGE: C\nCODE:\n```\nNTSTATUS NtGetNlsSectionPtr (ULONG SectionType, ULONG SectionData, PVOID ContextData, PVOID *SectionPointer, PULONG SectionSize);\nNTSTATUS NtGetNotificationResourceManager (HANDLE ResourceManagerHandle, PTRANSACTION_NOTIFICATION TransactionNotification, ULONG NotificationLength, PLARGE_INTEGER Timeout, PULONG ReturnLength, ULONG Asynchronous, ULONG_PTR AsynchronousContext);\nNTSTATUS NtGetPlugPlayEvent (HANDLE EventHandle, PVOID Context, PPLUGPLAY_EVENT_BLOCK EventBlock, ULONG EventBufferSize);\nNTSTATUS NtGetWriteWatch (HANDLE ProcessHandle, ULONG Flags, PVOID BaseAddress, SIZE_T RegionSize, PVOID *UserAddressArray, PULONG_PTR EntriesInUserAddressArray, PULONG Granularity);\nNTSTATUS NtImpersonateAnonymousToken (HANDLE ThreadHandle);\nNTSTATUS NtImpersonateThread (HANDLE ServerThreadHandle, HANDLE ClientThreadHandle, PSECURITY_QUALITY_OF_SERVICE SecurityQos);\nNTSTATUS NtInitializeNlsFiles (PVOID *BaseAddress, PLCID DefaultLocaleId, PLARGE_INTEGER DefaultCasingTableSize);\nNTSTATUS NtInitializeRegistry (USHORT BootCondition);\nNTSTATUS NtInitiatePowerAction (POWER_ACTION SystemAction, SYSTEM_POWER_STATE MinSystemState, ULONG Flags, BOOLEAN Asynchronous);\nBOOLEAN NtIsSystemResumeAutomatic ();\nNTSTATUS NtIsUILanguageComitted ();\n\nNTSTATUS NtListenPort (HANDLE PortHandle, PPORT_MESSAGE ConnectionRequest);\nNTSTATUS NtLoadDriver (PUNICODE_STRING DriverServiceName);\nNTSTATUS NtLoadKey (POBJECT_ATTRIBUTES TargetKey, POBJECT_ATTRIBUTES SourceFile);\nNTSTATUS NtLoadKey2 (POBJECT_ATTRIBUTES TargetKey, POBJECT_ATTRIBUTES SourceFile, ULONG Flags);\nNTSTATUS NtLoadKeyEx (POBJECT_ATTRIBUTES TargetKey, POBJECT_ATTRIBUTES SourceFile, ULONG Flags, HANDLE TrustClassKey );\nNTSTATUS NtLockFile (HANDLE FileHandle, HANDLE Event, PIO_APC_ROUTINE ApcRoutine, PVOID ApcContext, PIO_STATUS_BLOCK IoStatusBlock, PLARGE_INTEGER ByteOffset, PLARGE_INTEGER Length, ULONG Key, BOOLEAN FailImmediately, BOOLEAN ExclusiveLock);\nNTSTATUS NtLockProductActivationKeys (ULONG *pPrivateVer, ULONG *pSafeMode);\nNTSTATUS NtLockRegistryKey (HANDLE KeyHandle);\nNTSTATUS NtLockVirtualMemory (HANDLE ProcessHandle, PVOID *BaseAddress, PSIZE_T RegionSize, ULONG MapType);\nNTSTATUS NtMakePermanentObject (HANDLE Handle);\nNTSTATUS NtMakeTemporaryObject (HANDLE Handle);\nNTSTATUS NtMapCMFModule (ULONG What, ULONG Index, PULONG CacheIndexOut, PULONG CacheFlagsOut, PULONG ViewSizeOut, PVOID *BaseAddress);\nNTSTATUS NtMapUserPhysicalPages (PVOID VirtualAddress, ULONG_PTR NumberOfPages, PULONG_PTR UserPfnArray);\n\nNTSTATUS NtModifyBootEntry (PBOOT_ENTRY BootEntry);\nNTSTATUS NtModifyDriverEntry (PEFI_DRIVER_ENTRY DriverEntry);\nNTSTATUS NtNotifyChangeDirectoryFile (HANDLE FileHandle, HANDLE Event, PIO_APC_ROUTINE ApcRoutine, PVOID ApcContext, PIO_STATUS_BLOCK IoStatusBlock, PVOID Buffer, ULONG Length, ULONG CompletionFilter, BOOLEAN WatchTree);\nNTSTATUS NtNotifyChangeKey (HANDLE KeyHandle, HANDLE Event, PIO_APC_ROUTINE ApcRoutine, PVOID ApcContext, PIO_STATUS_BLOCK IoStatusBlock, ULONG CompletionFilter, BOOLEAN WatchTree, PVOID Buffer, ULONG BufferSize, BOOLEAN Asynchronous);\nNTSTATUS NtNotifyChangeMultipleKeys (HANDLE MasterKeyHandle, ULONG Count, OBJECT_ATTRIBUTES SlaveObjects[], HANDLE Event, PIO_APC_ROUTINE ApcRoutine, PVOID ApcContext, PIO_STATUS_BLOCK IoStatusBlock, ULONG CompletionFilter, BOOLEAN WatchTree, PVOID Buffer, ULONG BufferSize, BOOLEAN Asynchronous);\nNTSTATUS NtOpenEnlistment (PHANDLE EnlistmentHandle, ACCESS_MASK DesiredAccess, HANDLE ResourceManagerHandle, LPGUID EnlistmentGuid, POBJECT_ATTRIBUTES ObjectAttributes);\nNTSTATUS NtOpenEventPair (PHANDLE EventPairHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes);\nNTSTATUS NtOpenIoCompletion (PHANDLE IoCompletionHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes);\nNTSTATUS NtOpenJobObject (PHANDLE JobHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes);\nNTSTATUS NtOpenKeyTransacted (PHANDLE KeyHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, HANDLE TransactionHandle);\nNTSTATUS NtOpenKeyedEvent (PHANDLE KeyedEventHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes);\nNTSTATUS NtOpenMutant (PHANDLE MutantHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes);\nNTSTATUS NtOpenObjectAuditAlarm (PUNICODE_STRING SubsystemName, PVOID HandleId, PUNICODE_STRING ObjectTypeName, PUNICODE_STRING ObjectName, PSECURITY_DESCRIPTOR SecurityDescriptor, HANDLE ClientToken, ACCESS_MASK DesiredAccess, ACCESS_MASK GrantedAccess, PPRIVILEGE_SET Privileges, BOOLEAN ObjectCreation, BOOLEAN AccessGranted, PBOOLEAN GenerateOnClose);\nNTSTATUS NtOpenPrivateNamespace (PHANDLE NamespaceHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, PVOID BoundaryDescriptor);\nNTSTATUS NtOpenProcessToken (HANDLE ProcessHandle, ACCESS_MASK DesiredAccess, PHANDLE TokenHandle);\nNTSTATUS NtOpenResourceManager (PHANDLE ResourceManagerHandle, ACCESS_MASK DesiredAccess, HANDLE TmHandle, LPGUID ResourceManagerGuid, POBJECT_ATTRIBUTES ObjectAttributes);\nNTSTATUS NtOpenSemaphore (PHANDLE SemaphoreHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes);\nNTSTATUS NtOpenSession (PHANDLE SessionHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes);\nNTSTATUS NtOpenSymbolicLinkObject (PHANDLE LinkHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes);\nNTSTATUS NtOpenThread (PHANDLE ThreadHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, PCLIENT_ID ClientId);\nNTSTATUS NtOpenTimer (PHANDLE TimerHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes);\nNTSTATUS NtOpenTransaction (PHANDLE TransactionHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, LPGUID Uow, HANDLE TmHandle);\nNTSTATUS NtOpenTransactionManager (PHANDLE TmHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, PUNICODE_STRING LogFileName, LPGUID TmIdentity, ULONG OpenOptions);\nNTSTATUS NtPlugPlayControl (PLUGPLAY_CONTROL_CLASS PnPControlClass, PVOID PnPControlData, ULONG PnPControlDataLength);\nNTSTATUS NtPrePrepareComplete (HANDLE EnlistmentHandle, PLARGE_INTEGER TmVirtualClock);\nNTSTATUS NtPrePrepareEnlistment (HANDLE EnlistmentHandle, PLARGE_INTEGER TmVirtualClock);\nNTSTATUS NtPrepareComplete (HANDLE EnlistmentHandle, PLARGE_INTEGER TmVirtualClock);\nNTSTATUS NtPrepareEnlistment (HANDLE EnlistmentHandle, PLARGE_INTEGER TmVirtualClock);\nNTSTATUS NtPrivilegeCheck (HANDLE ClientToken, PPRIVILEGE_SET RequiredPrivileges, PBOOLEAN Result);\nNTSTATUS NtPrivilegeObjectAuditAlarm (PUNICODE_STRING SubsystemName, PVOID HandleId, HANDLE ClientToken, ACCESS_MASK DesiredAccess, PPRIVILEGE_SET Privileges, BOOLEAN AccessGranted);\nNTSTATUS NtPrivilegedServiceAuditAlarm (PUNICODE_STRING SubsystemName, PUNICODE_STRING ServiceName, HANDLE ClientToken, PPRIVILEGE_SET Privileges, BOOLEAN AccessGranted);\nNTSTATUS NtPropagationComplete (HANDLE ResourceManagerHandle, ULONG RequestCookie, ULONG BufferLength, PVOID Buffer);\nNTSTATUS NtPropagationFailed (HANDLE ResourceManagerHandle, ULONG RequestCookie, NTSTATUS PropStatus);\n\nNTSTATUS NtPulseEvent (HANDLE EventHandle, PLONG PreviousState);\nNTSTATUS NtQueryBootEntryOrder (PULONG Ids, PULONG Count);\nNTSTATUS NtQueryBootOptions (PBOOT_OPTIONS BootOptions, PULONG BootOptionsLength);\nNTSTATUS NtQueryDebugFilterState (ULONG ComponentId, ULONG Level);\nNTSTATUS NtQueryDirectoryObject (HANDLE DirectoryHandle, PVOID Buffer, ULONG Length, BOOLEAN ReturnSingleEntry, BOOLEAN RestartScan, PULONG Context, PULONG ReturnLength);\nNTSTATUS NtQueryDriverEntryOrder (PULONG Ids, PULONG Count);\nNTSTATUS NtQueryEaFile (HANDLE FileHandle, PIO_STATUS_BLOCK IoStatusBlock, PVOID Buffer, ULONG Length, BOOLEAN ReturnSingleEntry, PVOID EaList, ULONG EaListLength, PULONG EaIndex, BOOLEAN RestartScan);\nNTSTATUS NtQueryFullAttributesFile (POBJECT_ATTRIBUTES ObjectAttributes, PFILE_NETWORK_OPEN_INFORMATION FileInformation);\nNTSTATUS NtQueryInformationAtom (RTL_ATOM Atom, ATOM_INFORMATION_CLASS InformationClass, PVOID AtomInformation, ULONG AtomInformationLength, PULONG ReturnLength);\nNTSTATUS NtQueryInformationEnlistment (HANDLE EnlistmentHandle, ENLISTMENT_INFORMATION_CLASS EnlistmentInformationClass, PVOID EnlistmentInformation, ULONG EnlistmentInformationLength, PULONG ReturnLength);\nNTSTATUS NtQueryInformationJobObject (HANDLE JobHandle, JOBOBJECTINFOCLASS JobObjectInformationClass, PVOID JobObjectInformation, ULONG JobObjectInformationLength, PULONG ReturnLength);\nNTSTATUS NtQueryInformationPort (HANDLE PortHandle, PORT_INFORMATION_CLASS PortInformationClass, PVOID PortInformation, ULONG Length, PULONG ReturnLength);\nNTSTATUS NtQueryInformationResourceManager (HANDLE ResourceManagerHandle, RESOURCEMANAGER_INFORMATION_CLASS ResourceManagerInformationClass, PVOID ResourceManagerInformation, ULONG ResourceManagerInformationLength, PULONG ReturnLength);\nNTSTATUS NtQueryInformationTransaction (HANDLE TransactionHandle, TRANSACTION_INFORMATION_CLASS TransactionInformationClass, PVOID TransactionInformation, ULONG TransactionInformationLength, PULONG ReturnLength);\nNTSTATUS NtQueryInformationTransactionManager (HANDLE TransactionManagerHandle, TRANSACTIONMANAGER_INFORMATION_CLASS TransactionManagerInformationClass, PVOID TransactionManagerInformation, ULONG TransactionManagerInformationLength, PULONG ReturnLength);\nNTSTATUS NtQueryInformationWorkerFactory (HANDLE WorkerFactoryHandle, WORKERFACTORYINFOCLASS WorkerFactoryInformationClass, PVOID WorkerFactoryInformation, ULONG WorkerFactoryInformationLength, PULONG ReturnLength);\nNTSTATUS NtQueryInstallUILanguage (LANGID *InstallUILanguageId);\nNTSTATUS NtQueryIntervalProfile (KPROFILE_SOURCE ProfileSource, PULONG Interval);\n```\n\n----------------------------------------\n\nTITLE: Declaring Process Group and Timer System Calls in C\nDESCRIPTION: This snippet declares system calls for process group management (getpgrp, setpgid) and timer operations (setitimer, getitimer). It includes function signatures with their respective parameters and return types.\nSOURCE: https://github.com/panda-re/panda-ng/blob/main/plugins/syscalls2/generated-in/freebsd_x64_prototypes.txt#_snippet_7\n\nLANGUAGE: C\nCODE:\n```\nint mincore(const void *addr, size_t len, char *vec);\nint getgroups(unsigned gidsetsize, gid_t *gidset);\nint setgroups(unsigned gidsetsize, gid_t *gidset);\nint getpgrp(void);\nint setpgid(int pid, int pgid);\nint setitimer(unsigned which, struct itimerval *itv, struct itimerval *oitv);\nint wait(void);\nint swapon(const char *name);\nint getitimer(unsigned which, struct itimerval *itv);\nint gethostname(char *hostname, unsigned len);\nint sethostname(char *hostname, unsigned len);\nint getdtablesize(void);\nint dup2(unsigned from, unsigned to);\n```\n\n----------------------------------------\n\nTITLE: Opening Handles to Windows Kernel Objects using Native API - C\nDESCRIPTION: These declarations define NtOpen* family calls, which enable opening handles to Windows kernel objects such as files, registry keys, events, tokens, processes, and more. Each prototype requires a pointer to a handle output, the required access mask, object attribute descriptors, and, when applicable, extra parameters like client IDs or specific options. To use these calls, callers must properly initialize all structures and request appropriate access rights; failure to do so may result in errors or access-denied status codes. Proper privilege levels and existing object permissions are prerequisites.\nSOURCE: https://github.com/panda-re/panda-ng/blob/main/plugins/syscalls2/generated-in/windows_8sp1_x86_prototypes.txt#_snippet_3\n\nLANGUAGE: C\nCODE:\n```\nNTSTATUS NtOpenTransactionManager (PHANDLE TmHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, PUNICODE_STRING LogFileName, LPGUID TmIdentity, ULONG OpenOptions);\n```\n\nLANGUAGE: C\nCODE:\n```\nNTSTATUS NtOpenTransaction (PHANDLE TransactionHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, LPGUID Uow, HANDLE TmHandle);\n```\n\nLANGUAGE: C\nCODE:\n```\nNTSTATUS NtOpenTimer (PHANDLE TimerHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes);\n```\n\nLANGUAGE: C\nCODE:\n```\nNTSTATUS NtOpenThreadTokenEx (HANDLE ThreadHandle, ACCESS_MASK DesiredAccess, BOOLEAN OpenAsSelf, ULONG HandleAttributes, PHANDLE TokenHandle);\n```\n\nLANGUAGE: C\nCODE:\n```\nNTSTATUS NtOpenThreadToken (HANDLE ThreadHandle, ACCESS_MASK DesiredAccess, BOOLEAN OpenAsSelf, PHANDLE TokenHandle);\n```\n\nLANGUAGE: C\nCODE:\n```\nNTSTATUS NtOpenThread (PHANDLE ThreadHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, PCLIENT_ID ClientId);\n```\n\nLANGUAGE: C\nCODE:\n```\nNTSTATUS NtOpenSymbolicLinkObject (PHANDLE LinkHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes);\n```\n\nLANGUAGE: C\nCODE:\n```\nNTSTATUS NtOpenSession (PHANDLE SessionHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes);\n```\n\nLANGUAGE: C\nCODE:\n```\nNTSTATUS NtOpenSemaphore (PHANDLE SemaphoreHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes);\n```\n\nLANGUAGE: C\nCODE:\n```\nNTSTATUS NtOpenSection (PHANDLE SectionHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes);\n```\n\nLANGUAGE: C\nCODE:\n```\nNTSTATUS NtOpenResourceManager (PHANDLE ResourceManagerHandle, ACCESS_MASK DesiredAccess, HANDLE TmHandle, LPGUID ResourceManagerGuid, POBJECT_ATTRIBUTES ObjectAttributes);\n```\n\nLANGUAGE: C\nCODE:\n```\nNTSTATUS NtOpenProcessTokenEx (HANDLE ProcessHandle, ACCESS_MASK DesiredAccess, ULONG HandleAttributes, PHANDLE TokenHandle);\n```\n\nLANGUAGE: C\nCODE:\n```\nNTSTATUS NtOpenProcessToken (HANDLE ProcessHandle, ACCESS_MASK DesiredAccess, PHANDLE TokenHandle);\n```\n\nLANGUAGE: C\nCODE:\n```\nNTSTATUS NtOpenProcess (PHANDLE ProcessHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, PCLIENT_ID ClientId);\n```\n\nLANGUAGE: C\nCODE:\n```\nNTSTATUS NtOpenPrivateNamespace (PHANDLE NamespaceHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, PVOID BoundaryDescriptor);\n```\n\nLANGUAGE: C\nCODE:\n```\nNTSTATUS NtOpenObjectAuditAlarm (PUNICODE_STRING SubsystemName, PVOID HandleId, PUNICODE_STRING ObjectTypeName, PUNICODE_STRING ObjectName, PSECURITY_DESCRIPTOR SecurityDescriptor, HANDLE ClientToken, ACCESS_MASK DesiredAccess, ACCESS_MASK GrantedAccess, PPRIVILEGE_SET Privileges, BOOLEAN ObjectCreation, BOOLEAN AccessGranted, PBOOLEAN GenerateOnClose);\n```\n\nLANGUAGE: C\nCODE:\n```\nNTSTATUS NtOpenMutant (PHANDLE MutantHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes);\n```\n\nLANGUAGE: C\nCODE:\n```\nNTSTATUS NtOpenKeyTransactedEx (PHANDLE KeyHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, ULONG OpenOptions, HANDLE TransactionHandle);\n```\n\nLANGUAGE: C\nCODE:\n```\nNTSTATUS NtOpenKeyTransacted (PHANDLE KeyHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, HANDLE TransactionHandle);\n```\n\nLANGUAGE: C\nCODE:\n```\nNTSTATUS NtOpenKeyEx (PHANDLE KeyHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, ULONG OpenOptions);\n```\n\nLANGUAGE: C\nCODE:\n```\nNTSTATUS NtOpenKeyedEvent (PHANDLE KeyedEventHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes);\n```\n\nLANGUAGE: C\nCODE:\n```\nNTSTATUS NtOpenKey (PHANDLE KeyHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes);\n```\n\nLANGUAGE: C\nCODE:\n```\nNTSTATUS NtOpenJobObject (PHANDLE JobHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes);\n```\n\nLANGUAGE: C\nCODE:\n```\nNTSTATUS NtOpenIoCompletion (PHANDLE IoCompletionHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes);\n```\n\nLANGUAGE: C\nCODE:\n```\nNTSTATUS NtOpenFile (PHANDLE FileHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, PIO_STATUS_BLOCK IoStatusBlock, ULONG ShareAccess, ULONG OpenOptions);\n```\n\nLANGUAGE: C\nCODE:\n```\nNTSTATUS NtOpenEventPair (PHANDLE EventPairHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes);\n```\n\nLANGUAGE: C\nCODE:\n```\nNTSTATUS NtOpenEvent (PHANDLE EventHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes);\n```\n\nLANGUAGE: C\nCODE:\n```\nNTSTATUS NtOpenEnlistment (PHANDLE EnlistmentHandle, ACCESS_MASK DesiredAccess, HANDLE ResourceManagerHandle, LPGUID EnlistmentGuid, POBJECT_ATTRIBUTES ObjectAttributes);\n```\n\nLANGUAGE: C\nCODE:\n```\nNTSTATUS NtOpenDirectoryObject (PHANDLE DirectoryHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes);\n```\n\n----------------------------------------\n\nTITLE: Defining Memory and Scheduling System Calls in C\nDESCRIPTION: This snippet defines system calls for memory locking, process scheduling, and directory operations.\nSOURCE: https://github.com/panda-re/panda-ng/blob/main/plugins/syscalls2/generated-in/freebsd_x64_prototypes.txt#_snippet_23\n\nLANGUAGE: C\nCODE:\n```\nint mlockall(int how);\nint munlockall(void); \nint __getcwd(char *buf, size_t buflen);\nint sched_setparam(pid_t pid, const struct sched_param *param);\nint sched_getparam(pid_t pid, struct sched_param *param);\nint sched_setscheduler(pid_t pid, int policy, const struct sched_param *param);\nint sched_getscheduler(pid_t pid);\nint sched_yield(void);\nint sched_get_priority_max(int policy);\nint sched_get_priority_min(int policy);\nint sched_rr_get_interval(pid_t pid, struct timespec *interval);\n```\n\n----------------------------------------\n\nTITLE: Defining Process and User Management System Calls in C\nDESCRIPTION: This snippet defines system calls for process and user management, including session ID retrieval and user/group ID manipulation.\nSOURCE: https://github.com/panda-re/panda-ng/blob/main/plugins/syscalls2/generated-in/freebsd_x64_prototypes.txt#_snippet_21\n\nLANGUAGE: C\nCODE:\n```\nint getsid(pid_t pid);\nint setresuid(uid_t ruid, uid_t euid, uid_t suid);\nint setresgid(gid_t rgid, gid_t egid, gid_t sgid);\n```\n\n----------------------------------------\n\nTITLE: Windows NT File and Directory Handling Function Declarations in C\nDESCRIPTION: Function signatures for NT API calls related to file and directory operations, including opening, locking, and monitoring changes.\nSOURCE: https://github.com/panda-re/panda-ng/blob/main/plugins/syscalls2/generated-in/all_windows_prototypes.txt#_snippet_6\n\nLANGUAGE: C\nCODE:\n```\nNTSTATUS NtOpenFile (PHANDLE FileHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, PIO_STATUS_BLOCK IoStatusBlock, ULONG ShareAccess, ULONG OpenOptions);\n```\n\nLANGUAGE: C\nCODE:\n```\nNTSTATUS NtLockFile (HANDLE FileHandle, HANDLE Event, PIO_APC_ROUTINE ApcRoutine, PVOID ApcContext, PIO_STATUS_BLOCK IoStatusBlock, PLARGE_INTEGER ByteOffset, PLARGE_INTEGER Length, ULONG Key, BOOLEAN FailImmediately, BOOLEAN ExclusiveLock);\n```\n\nLANGUAGE: C\nCODE:\n```\nNTSTATUS NtNotifyChangeDirectoryFile (HANDLE FileHandle, HANDLE Event, PIO_APC_ROUTINE ApcRoutine, PVOID ApcContext, PIO_STATUS_BLOCK IoStatusBlock, PVOID Buffer, ULONG Length, ULONG CompletionFilter, BOOLEAN WatchTree);\n```\n\n----------------------------------------\n\nTITLE: Declaring IPC System Calls in C\nDESCRIPTION: This snippet declares system calls for interprocess communication (IPC) operations, including semaphores, message queues, and shared memory. It includes function signatures with their respective parameters and return types.\nSOURCE: https://github.com/panda-re/panda-ng/blob/main/plugins/syscalls2/generated-in/freebsd_x64_prototypes.txt#_snippet_16\n\nLANGUAGE: C\nCODE:\n```\nint __semctl(int semid, int semnum, int cmd, union semun_old *arg);\nint semget(key_t key, int nsems, int semflg);\nint semop(int semid, struct sembuf *sops, size_t nsops);\n\nint msgctl(int msqid, int cmd, struct msqid_ds_old *buf);\nint msgget(key_t key, int msgflg);\nint msgsnd(int msqid, const void *msgp, size_t msgsz, int msgflg);\nssize_t msgrcv(int msqid, void *msgp, size_t msgsz, long msgtyp, int msgflg);\nvoid *shmat(int shmid, const void *shmaddr, int shmflg);\nint shmctl(int shmid, int cmd, struct shmid_ds_old *buf);\nint shmdt(const void *shmaddr);\nint shmget(key_t key, size_t size, int shmflg);\n```\n\n----------------------------------------\n\nTITLE: Declaring Semaphore and Time Adjustment System Calls in C\nDESCRIPTION: This snippet declares system calls for semaphore operations (semsys) and time adjustment (ntp_adjtime). It includes function signatures with their respective parameters and return types.\nSOURCE: https://github.com/panda-re/panda-ng/blob/main/plugins/syscalls2/generated-in/freebsd_x64_prototypes.txt#_snippet_12\n\nLANGUAGE: C\nCODE:\n```\nint semsys(int which, int a2, int a3, int a4, int a5);\n\nint setfib(int fibnum);\nint ntp_adjtime(struct timex *tp);\n```\n\n----------------------------------------\n\nTITLE: Declaring NT System Call Prototypes in C for Windows Kernel\nDESCRIPTION: This snippet provides function prototypes for various NT system calls, defining their interfaces using Windows-native data types (such as HANDLE, NTSTATUS, PVOID, etc.) in C. These declarations are used by kernel, subsystem, or user-mode code interacting with the Windows Native API, requiring knowledge of Windows internal structures and types. Each prototype specifies all parameters needed for operations like object creation, query, manipulation, and system/environment management, but does not include implementation, only declarations.\nSOURCE: https://github.com/panda-re/panda-ng/blob/main/plugins/syscalls2/generated-in/windows_2003sp12_x64_prototypes.txt#_snippet_2\n\nLANGUAGE: c\nCODE:\n```\n131 NTSTATUS NtCreateProfile (PHANDLE ProfileHandle, HANDLE Process, PVOID RangeBase, SIZE_T RangeSize, ULONG BucketSize, PULONG Buffer, ULONG BufferSize, KPROFILE_SOURCE ProfileSource, KAFFINITY Affinity);\n132 NTSTATUS NtCreateSemaphore (PHANDLE SemaphoreHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, LONG InitialCount, LONG MaximumCount);\n133 NTSTATUS NtCreateSymbolicLinkObject (PHANDLE LinkHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, PUNICODE_STRING LinkTarget);\n134 NTSTATUS NtCreateTimer (PHANDLE TimerHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, TIMER_TYPE TimerType);\n135 NTSTATUS NtCreateToken (PHANDLE TokenHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, TOKEN_TYPE TokenType, PLUID AuthenticationId, PLARGE_INTEGER ExpirationTime, PTOKEN_USER User, PTOKEN_GROUPS Groups, PTOKEN_PRIVILEGES Privileges, PTOKEN_OWNER Owner, PTOKEN_PRIMARY_GROUP PrimaryGroup, PTOKEN_DEFAULT_DACL DefaultDacl, PTOKEN_SOURCE TokenSource);\n136 NTSTATUS NtCreateWaitablePort (PHANDLE PortHandle, POBJECT_ATTRIBUTES ObjectAttributes, ULONG MaxConnectionInfoLength, ULONG MaxMessageLength, ULONG MaxPoolUsage);\n137 NTSTATUS NtDebugActiveProcess (HANDLE ProcessHandle, HANDLE DebugObjectHandle);\n138 NTSTATUS NtDebugContinue (HANDLE DebugObjectHandle, PCLIENT_ID ClientId, NTSTATUS ContinueStatus);\n139 NTSTATUS NtDeleteAtom (RTL_ATOM Atom);\n140 NTSTATUS NtDeleteBootEntry (ULONG Id);\n141 NTSTATUS NtDeleteDriverEntry (ULONG Id);\n142 NTSTATUS NtDeleteFile (POBJECT_ATTRIBUTES ObjectAttributes);\n143 NTSTATUS NtDeleteKey (HANDLE KeyHandle);\n144 NTSTATUS NtDeleteObjectAuditAlarm (PUNICODE_STRING SubsystemName, PVOID HandleId, BOOLEAN GenerateOnClose);\n145 NTSTATUS NtDeleteValueKey (HANDLE KeyHandle, PUNICODE_STRING ValueName);\n146 NTSTATUS NtDisplayString (PUNICODE_STRING String);\n147 NTSTATUS NtEnumerateBootEntries (PVOID Buffer, PULONG BufferLength);\n148 NTSTATUS NtEnumerateDriverEntries (PVOID Buffer, PULONG BufferLength);\n149 NTSTATUS NtEnumerateSystemEnvironmentValuesEx (ULONG InformationClass, PVOID Buffer, PULONG BufferLength);\n150 NTSTATUS NtExtendSection (HANDLE SectionHandle, PLARGE_INTEGER NewSectionSize);\n151 NTSTATUS NtFilterToken (HANDLE ExistingTokenHandle, ULONG Flags, PTOKEN_GROUPS SidsToDisable, PTOKEN_PRIVILEGES PrivilegesToDelete, PTOKEN_GROUPS RestrictedSids, PHANDLE NewTokenHandle);\n152 NTSTATUS NtFlushInstructionCache (HANDLE ProcessHandle, PVOID BaseAddress, SIZE_T Length);\n153 NTSTATUS NtFlushKey (HANDLE KeyHandle);\n154 NTSTATUS NtFlushVirtualMemory (HANDLE ProcessHandle, PVOID *BaseAddress, PSIZE_T RegionSize, PIO_STATUS_BLOCK IoStatus);\n155 NTSTATUS NtFlushWriteBuffer ();\n156 NTSTATUS NtFreeUserPhysicalPages (HANDLE ProcessHandle, PULONG_PTR NumberOfPages, PULONG_PTR UserPfnArray);\n157 NTSTATUS NtGetContextThread (HANDLE ThreadHandle, PCONTEXT ThreadContext);\n158 ULONG NtGetCurrentProcessorNumber ();\n159 NTSTATUS NtGetDevicePowerState (HANDLE Device, DEVICE_POWER_STATE *State);\n160 NTSTATUS NtGetPlugPlayEvent (HANDLE EventHandle, PVOID Context, PPLUGPLAY_EVENT_BLOCK EventBlock, ULONG EventBufferSize);\n161 NTSTATUS NtGetWriteWatch (HANDLE ProcessHandle, ULONG Flags, PVOID BaseAddress, SIZE_T RegionSize, PVOID *UserAddressArray, PULONG_PTR EntriesInUserAddressArray, PULONG Granularity);\n162 NTSTATUS NtImpersonateAnonymousToken (HANDLE ThreadHandle);\n163 NTSTATUS NtImpersonateThread (HANDLE ServerThreadHandle, HANDLE ClientThreadHandle, PSECURITY_QUALITY_OF_SERVICE SecurityQos);\n164 NTSTATUS NtInitializeRegistry (USHORT BootCondition);\n165 NTSTATUS NtInitiatePowerAction (POWER_ACTION SystemAction, SYSTEM_POWER_STATE MinSystemState, ULONG Flags, BOOLEAN Asynchronous);\n166 BOOLEAN NtIsSystemResumeAutomatic ();\n167 NTSTATUS NtListenPort (HANDLE PortHandle, PPORT_MESSAGE ConnectionRequest);\n168 NTSTATUS NtLoadDriver (PUNICODE_STRING DriverServiceName);\n169 NTSTATUS NtLoadKey (POBJECT_ATTRIBUTES TargetKey, POBJECT_ATTRIBUTES SourceFile);\n170 NTSTATUS NtLoadKey2 (POBJECT_ATTRIBUTES TargetKey, POBJECT_ATTRIBUTES SourceFile, ULONG Flags);\n171 NTSTATUS NtLoadKeyEx (POBJECT_ATTRIBUTES TargetKey, POBJECT_ATTRIBUTES SourceFile, ULONG Flags, HANDLE TrustClassKey );\n172 NTSTATUS NtLockFile (HANDLE FileHandle, HANDLE Event, PIO_APC_ROUTINE ApcRoutine, PVOID ApcContext, PIO_STATUS_BLOCK IoStatusBlock, PLARGE_INTEGER ByteOffset, PLARGE_INTEGER Length, ULONG Key, BOOLEAN FailImmediately, BOOLEAN ExclusiveLock);\n173 NTSTATUS NtLockProductActivationKeys (ULONG *pPrivateVer, ULONG *pSafeMode);\n174 NTSTATUS NtLockRegistryKey (HANDLE KeyHandle);\n175 NTSTATUS NtLockVirtualMemory (HANDLE ProcessHandle, PVOID *BaseAddress, PSIZE_T RegionSize, ULONG MapType);\n176 NTSTATUS NtMakePermanentObject (HANDLE Handle);\n177 NTSTATUS NtMakeTemporaryObject (HANDLE Handle);\n178 NTSTATUS NtMapUserPhysicalPages (PVOID VirtualAddress, ULONG_PTR NumberOfPages, PULONG_PTR UserPfnArray);\n179 NTSTATUS NtModifyBootEntry (PBOOT_ENTRY BootEntry);\n180 NTSTATUS NtModifyDriverEntry (PEFI_DRIVER_ENTRY DriverEntry);\n181 NTSTATUS NtNotifyChangeDirectoryFile (HANDLE FileHandle, HANDLE Event, PIO_APC_ROUTINE ApcRoutine, PVOID ApcContext, PIO_STATUS_BLOCK IoStatusBlock, PVOID Buffer, ULONG Length, ULONG CompletionFilter, BOOLEAN WatchTree);\n182 NTSTATUS NtNotifyChangeKey (HANDLE KeyHandle, HANDLE Event, PIO_APC_ROUTINE ApcRoutine, PVOID ApcContext, PIO_STATUS_BLOCK IoStatusBlock, ULONG CompletionFilter, BOOLEAN WatchTree, PVOID Buffer, ULONG BufferSize, BOOLEAN Asynchronous);\n183 NTSTATUS NtNotifyChangeMultipleKeys (HANDLE MasterKeyHandle, ULONG Count, OBJECT_ATTRIBUTES SlaveObjects[], HANDLE Event, PIO_APC_ROUTINE ApcRoutine, PVOID ApcContext, PIO_STATUS_BLOCK IoStatusBlock, ULONG CompletionFilter, BOOLEAN WatchTree, PVOID Buffer, ULONG BufferSize, BOOLEAN Asynchronous);\n184 NTSTATUS NtOpenEventPair (PHANDLE EventPairHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes);\n185 NTSTATUS NtOpenIoCompletion (PHANDLE IoCompletionHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes);\n186 NTSTATUS NtOpenJobObject (PHANDLE JobHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes);\n187 NTSTATUS NtOpenKeyedEvent (PHANDLE KeyedEventHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes);\n188 NTSTATUS NtOpenMutant (PHANDLE MutantHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes);\n189 NTSTATUS NtOpenObjectAuditAlarm (PUNICODE_STRING SubsystemName, PVOID HandleId, PUNICODE_STRING ObjectTypeName, PUNICODE_STRING ObjectName, PSECURITY_DESCRIPTOR SecurityDescriptor, HANDLE ClientToken, ACCESS_MASK DesiredAccess, ACCESS_MASK GrantedAccess, PPRIVILEGE_SET Privileges, BOOLEAN ObjectCreation, BOOLEAN AccessGranted, PBOOLEAN GenerateOnClose);\n190 NTSTATUS NtOpenProcessToken (HANDLE ProcessHandle, ACCESS_MASK DesiredAccess, PHANDLE TokenHandle);\n191 NTSTATUS NtOpenSemaphore (PHANDLE SemaphoreHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes);\n192 NTSTATUS NtOpenSymbolicLinkObject (PHANDLE LinkHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes);\n193 NTSTATUS NtOpenThread (PHANDLE ThreadHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, PCLIENT_ID ClientId);\n194 NTSTATUS NtOpenTimer (PHANDLE TimerHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes);\n195 NTSTATUS NtPlugPlayControl (PLUGPLAY_CONTROL_CLASS PnPControlClass, PVOID PnPControlData, ULONG PnPControlDataLength);\n196 NTSTATUS NtPrivilegeCheck (HANDLE ClientToken, PPRIVILEGE_SET RequiredPrivileges, PBOOLEAN Result);\n197 NTSTATUS NtPrivilegeObjectAuditAlarm (PUNICODE_STRING SubsystemName, PVOID HandleId, HANDLE ClientToken, ACCESS_MASK DesiredAccess, PPRIVILEGE_SET Privileges, BOOLEAN AccessGranted);\n198 NTSTATUS NtPrivilegedServiceAuditAlarm (PUNICODE_STRING SubsystemName, PUNICODE_STRING ServiceName, HANDLE ClientToken, PPRIVILEGE_SET Privileges, BOOLEAN AccessGranted);\n199 NTSTATUS NtPulseEvent (HANDLE EventHandle, PLONG PreviousState);\n200 NTSTATUS NtQueryBootEntryOrder (PULONG Ids, PULONG Count);\n201 NTSTATUS NtQueryBootOptions (PBOOT_OPTIONS BootOptions, PULONG BootOptionsLength);\n202 NTSTATUS NtQueryDebugFilterState (ULONG ComponentId, ULONG Level);\n203 NTSTATUS NtQueryDirectoryObject (HANDLE DirectoryHandle, PVOID Buffer, ULONG Length, BOOLEAN ReturnSingleEntry, BOOLEAN RestartScan, PULONG Context, PULONG ReturnLength);\n204 NTSTATUS NtQueryDriverEntryOrder (PULONG Ids, PULONG Count);\n205 NTSTATUS NtQueryEaFile (HANDLE FileHandle, PIO_STATUS_BLOCK IoStatusBlock, PVOID Buffer, ULONG Length, BOOLEAN ReturnSingleEntry, PVOID EaList, ULONG EaListLength, PULONG EaIndex, BOOLEAN RestartScan);\n206 NTSTATUS NtQueryFullAttributesFile (POBJECT_ATTRIBUTES ObjectAttributes, PFILE_NETWORK_OPEN_INFORMATION FileInformation);\n207 NTSTATUS NtQueryInformationAtom (RTL_ATOM Atom, ATOM_INFORMATION_CLASS InformationClass, PVOID AtomInformation, ULONG AtomInformationLength, PULONG ReturnLength);\n208 NTSTATUS NtQueryInformationJobObject (HANDLE JobHandle, JOBOBJECTINFOCLASS JobObjectInformationClass, PVOID JobObjectInformation, ULONG JobObjectInformationLength, PULONG ReturnLength);\n209 NTSTATUS NtQueryInformationPort (HANDLE PortHandle, PORT_INFORMATION_CLASS PortInformationClass, PVOID PortInformation, ULONG Length, PULONG ReturnLength);\n210 NTSTATUS NtQueryInstallUILanguage (LANGID *InstallUILanguageId);\n211 NTSTATUS NtQueryIntervalProfile (KPROFILE_SOURCE ProfileSource, PULONG Interval);\n212 NTSTATUS NtQueryIoCompletion (HANDLE IoCompletionHandle, IO_COMPLETION_INFORMATION_CLASS IoCompletionInformationClass, PVOID IoCompletionInformation, ULONG IoCompletionInformationLength, PULONG ReturnLength);\n213 NTSTATUS NtQueryMultipleValueKey (HANDLE KeyHandle, PKEY_VALUE_ENTRY ValueEntries, ULONG EntryCount, PVOID ValueBuffer, PULONG BufferLength, PULONG RequiredBufferLength);\n```\n\n----------------------------------------\n\nTITLE: NT Native API Function Declarations for Windows Kernel (Part 1)\nDESCRIPTION: Contains function declarations for Windows NT native API (lines 60-142). These functions provide low-level access to Windows OS resources including debugging, file operations, registry manipulation, process/thread control, and memory management.\nSOURCE: https://github.com/panda-re/panda-ng/blob/main/plugins/syscalls2/generated-in/windows_2003sp0_x86_prototypes.txt#_snippet_3\n\nLANGUAGE: C\nCODE:\n```\nNTSTATUS NtDebugContinue (HANDLE DebugObjectHandle, PCLIENT_ID ClientId, NTSTATUS ContinueStatus);\nNTSTATUS NtDelayExecution (BOOLEAN Alertable, PLARGE_INTEGER DelayInterval);\nNTSTATUS NtDeleteAtom (RTL_ATOM Atom);\nNTSTATUS NtDeleteBootEntry (ULONG Id);\nNTSTATUS NtDeleteDriverEntry (ULONG Id);\nNTSTATUS NtDeleteFile (POBJECT_ATTRIBUTES ObjectAttributes);\nNTSTATUS NtDeleteKey (HANDLE KeyHandle);\nNTSTATUS NtDeleteObjectAuditAlarm (PUNICODE_STRING SubsystemName, PVOID HandleId, BOOLEAN GenerateOnClose);\nNTSTATUS NtDeleteValueKey (HANDLE KeyHandle, PUNICODE_STRING ValueName);\nNTSTATUS NtDeviceIoControlFile (HANDLE FileHandle, HANDLE Event, PIO_APC_ROUTINE ApcRoutine, PVOID ApcContext, PIO_STATUS_BLOCK IoStatusBlock, ULONG IoControlCode, PVOID InputBuffer, ULONG InputBufferLength, PVOID OutputBuffer, ULONG OutputBufferLength);\nNTSTATUS NtDisplayString (PUNICODE_STRING String);\nNTSTATUS NtDuplicateObject (HANDLE SourceProcessHandle, HANDLE SourceHandle, HANDLE TargetProcessHandle, PHANDLE TargetHandle, ACCESS_MASK DesiredAccess, ULONG HandleAttributes, ULONG Options);\nNTSTATUS NtDuplicateToken (HANDLE ExistingTokenHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, BOOLEAN EffectiveOnly, TOKEN_TYPE TokenType, PHANDLE NewTokenHandle);\nNTSTATUS NtEnumerateBootEntries (PVOID Buffer, PULONG BufferLength);\nNTSTATUS NtEnumerateDriverEntries (PVOID Buffer, PULONG BufferLength);\nNTSTATUS NtEnumerateKey (HANDLE KeyHandle, ULONG Index, KEY_INFORMATION_CLASS KeyInformationClass, PVOID KeyInformation, ULONG Length, PULONG ResultLength);\nNTSTATUS NtEnumerateSystemEnvironmentValuesEx (ULONG InformationClass, PVOID Buffer, PULONG BufferLength);\nNTSTATUS NtEnumerateValueKey (HANDLE KeyHandle, ULONG Index, KEY_VALUE_INFORMATION_CLASS KeyValueInformationClass, PVOID KeyValueInformation, ULONG Length, PULONG ResultLength);\nNTSTATUS NtExtendSection (HANDLE SectionHandle, PLARGE_INTEGER NewSectionSize);\nNTSTATUS NtFilterToken (HANDLE ExistingTokenHandle, ULONG Flags, PTOKEN_GROUPS SidsToDisable, PTOKEN_PRIVILEGES PrivilegesToDelete, PTOKEN_GROUPS RestrictedSids, PHANDLE NewTokenHandle);\nNTSTATUS NtFindAtom (PWSTR AtomName, ULONG Length, PRTL_ATOM Atom);\nNTSTATUS NtFlushBuffersFile (HANDLE FileHandle, PIO_STATUS_BLOCK IoStatusBlock);\nNTSTATUS NtFlushInstructionCache (HANDLE ProcessHandle, PVOID BaseAddress, SIZE_T Length);\nNTSTATUS NtFlushKey (HANDLE KeyHandle);\nNTSTATUS NtFlushVirtualMemory (HANDLE ProcessHandle, PVOID *BaseAddress, PSIZE_T RegionSize, PIO_STATUS_BLOCK IoStatus);\nNTSTATUS NtFlushWriteBuffer ();\nNTSTATUS NtFreeUserPhysicalPages (HANDLE ProcessHandle, PULONG_PTR NumberOfPages, PULONG_PTR UserPfnArray);\nNTSTATUS NtFreeVirtualMemory (HANDLE ProcessHandle, PVOID *BaseAddress, PSIZE_T RegionSize, ULONG FreeType);\nNTSTATUS NtFsControlFile (HANDLE FileHandle, HANDLE Event, PIO_APC_ROUTINE ApcRoutine, PVOID ApcContext, PIO_STATUS_BLOCK IoStatusBlock, ULONG IoControlCode, PVOID InputBuffer, ULONG InputBufferLength, PVOID OutputBuffer, ULONG OutputBufferLength);\nNTSTATUS NtGetContextThread (HANDLE ThreadHandle, PCONTEXT ThreadContext);\nNTSTATUS NtGetDevicePowerState (HANDLE Device, DEVICE_POWER_STATE *State);\nNTSTATUS NtGetPlugPlayEvent (HANDLE EventHandle, PVOID Context, PPLUGPLAY_EVENT_BLOCK EventBlock, ULONG EventBufferSize);\nNTSTATUS NtGetWriteWatch (HANDLE ProcessHandle, ULONG Flags, PVOID BaseAddress, SIZE_T RegionSize, PVOID *UserAddressArray, PULONG_PTR EntriesInUserAddressArray, PULONG Granularity);\nNTSTATUS NtImpersonateAnonymousToken (HANDLE ThreadHandle);\nNTSTATUS NtImpersonateClientOfPort (HANDLE PortHandle, PPORT_MESSAGE Message);\nNTSTATUS NtImpersonateThread (HANDLE ServerThreadHandle, HANDLE ClientThreadHandle, PSECURITY_QUALITY_OF_SERVICE SecurityQos);\nNTSTATUS NtInitializeRegistry (USHORT BootCondition);\nNTSTATUS NtInitiatePowerAction (POWER_ACTION SystemAction, SYSTEM_POWER_STATE MinSystemState, ULONG Flags, BOOLEAN Asynchronous);\nNTSTATUS NtIsProcessInJob (HANDLE ProcessHandle, HANDLE JobHandle);\nBOOLEAN NtIsSystemResumeAutomatic ();\nNTSTATUS NtListenPort (HANDLE PortHandle, PPORT_MESSAGE ConnectionRequest);\nNTSTATUS NtLoadDriver (PUNICODE_STRING DriverServiceName);\nNTSTATUS NtLoadKey (POBJECT_ATTRIBUTES TargetKey, POBJECT_ATTRIBUTES SourceFile);\nNTSTATUS NtLoadKey2 (POBJECT_ATTRIBUTES TargetKey, POBJECT_ATTRIBUTES SourceFile, ULONG Flags);\nNTSTATUS NtLoadKeyEx (POBJECT_ATTRIBUTES TargetKey, POBJECT_ATTRIBUTES SourceFile, ULONG Flags, HANDLE TrustClassKey );\nNTSTATUS NtLockFile (HANDLE FileHandle, HANDLE Event, PIO_APC_ROUTINE ApcRoutine, PVOID ApcContext, PIO_STATUS_BLOCK IoStatusBlock, PLARGE_INTEGER ByteOffset, PLARGE_INTEGER Length, ULONG Key, BOOLEAN FailImmediately, BOOLEAN ExclusiveLock);\nNTSTATUS NtLockProductActivationKeys (ULONG *pPrivateVer, ULONG *pSafeMode);\nNTSTATUS NtLockRegistryKey (HANDLE KeyHandle);\nNTSTATUS NtLockVirtualMemory (HANDLE ProcessHandle, PVOID *BaseAddress, PSIZE_T RegionSize, ULONG MapType);\nNTSTATUS NtMakePermanentObject (HANDLE Handle);\nNTSTATUS NtMakeTemporaryObject (HANDLE Handle);\nNTSTATUS NtMapUserPhysicalPages (PVOID VirtualAddress, ULONG_PTR NumberOfPages, PULONG_PTR UserPfnArray);\nNTSTATUS NtMapUserPhysicalPagesScatter (PVOID *VirtualAddresses, ULONG_PTR NumberOfPages, PULONG_PTR UserPfnArray);\nNTSTATUS NtMapViewOfSection (HANDLE SectionHandle, HANDLE ProcessHandle, PVOID *BaseAddress, ULONG_PTR ZeroBits, SIZE_T CommitSize, PLARGE_INTEGER SectionOffset, PSIZE_T ViewSize, SECTION_INHERIT InheritDisposition, ULONG AllocationType, WIN32_PROTECTION_MASK Win32Protect);\nNTSTATUS NtModifyBootEntry (PBOOT_ENTRY BootEntry);\nNTSTATUS NtModifyDriverEntry (PEFI_DRIVER_ENTRY DriverEntry);\nNTSTATUS NtNotifyChangeDirectoryFile (HANDLE FileHandle, HANDLE Event, PIO_APC_ROUTINE ApcRoutine, PVOID ApcContext, PIO_STATUS_BLOCK IoStatusBlock, PVOID Buffer, ULONG Length, ULONG CompletionFilter, BOOLEAN WatchTree);\nNTSTATUS NtNotifyChangeKey (HANDLE KeyHandle, HANDLE Event, PIO_APC_ROUTINE ApcRoutine, PVOID ApcContext, PIO_STATUS_BLOCK IoStatusBlock, ULONG CompletionFilter, BOOLEAN WatchTree, PVOID Buffer, ULONG BufferSize, BOOLEAN Asynchronous);\nNTSTATUS NtNotifyChangeMultipleKeys (HANDLE MasterKeyHandle, ULONG Count, OBJECT_ATTRIBUTES SlaveObjects[], HANDLE Event, PIO_APC_ROUTINE ApcRoutine, PVOID ApcContext, PIO_STATUS_BLOCK IoStatusBlock, ULONG CompletionFilter, BOOLEAN WatchTree, PVOID Buffer, ULONG BufferSize, BOOLEAN Asynchronous);\nNTSTATUS NtOpenDirectoryObject (PHANDLE DirectoryHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes);\nNTSTATUS NtOpenEvent (PHANDLE EventHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes);\nNTSTATUS NtOpenEventPair (PHANDLE EventPairHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes);\nNTSTATUS NtOpenFile (PHANDLE FileHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, PIO_STATUS_BLOCK IoStatusBlock, ULONG ShareAccess, ULONG OpenOptions);\nNTSTATUS NtOpenIoCompletion (PHANDLE IoCompletionHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes);\nNTSTATUS NtOpenJobObject (PHANDLE JobHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes);\nNTSTATUS NtOpenKey (PHANDLE KeyHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes);\nNTSTATUS NtOpenMutant (PHANDLE MutantHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes);\nNTSTATUS NtOpenObjectAuditAlarm (PUNICODE_STRING SubsystemName, PVOID HandleId, PUNICODE_STRING ObjectTypeName, PUNICODE_STRING ObjectName, PSECURITY_DESCRIPTOR SecurityDescriptor, HANDLE ClientToken, ACCESS_MASK DesiredAccess, ACCESS_MASK GrantedAccess, PPRIVILEGE_SET Privileges, BOOLEAN ObjectCreation, BOOLEAN AccessGranted, PBOOLEAN GenerateOnClose);\nNTSTATUS NtOpenProcess (PHANDLE ProcessHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, PCLIENT_ID ClientId);\nNTSTATUS NtOpenProcessToken (HANDLE ProcessHandle, ACCESS_MASK DesiredAccess, PHANDLE TokenHandle);\nNTSTATUS NtOpenProcessTokenEx (HANDLE ProcessHandle, ACCESS_MASK DesiredAccess, ULONG HandleAttributes, PHANDLE TokenHandle);\nNTSTATUS NtOpenSection (PHANDLE SectionHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes);\nNTSTATUS NtOpenSemaphore (PHANDLE SemaphoreHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes);\nNTSTATUS NtOpenSymbolicLinkObject (PHANDLE LinkHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes);\nNTSTATUS NtOpenThread (PHANDLE ThreadHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, PCLIENT_ID ClientId);\nNTSTATUS NtOpenThreadToken (HANDLE ThreadHandle, ACCESS_MASK DesiredAccess, BOOLEAN OpenAsSelf, PHANDLE TokenHandle);\nNTSTATUS NtOpenThreadTokenEx (HANDLE ThreadHandle, ACCESS_MASK DesiredAccess, BOOLEAN OpenAsSelf, ULONG HandleAttributes, PHANDLE TokenHandle);\nNTSTATUS NtOpenTimer (PHANDLE TimerHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes);\nNTSTATUS NtPlugPlayControl (PLUGPLAY_CONTROL_CLASS PnPControlClass, PVOID PnPControlData, ULONG PnPControlDataLength);\nNTSTATUS NtPowerInformation (POWER_INFORMATION_LEVEL InformationLevel, PVOID InputBuffer, ULONG InputBufferLength, PVOID OutputBuffer, ULONG OutputBufferLength);\nNTSTATUS NtPrivilegeCheck (HANDLE ClientToken, PPRIVILEGE_SET RequiredPrivileges, PBOOLEAN Result);\nNTSTATUS NtPrivilegeObjectAuditAlarm (PUNICODE_STRING SubsystemName, PVOID HandleId, HANDLE ClientToken, ACCESS_MASK DesiredAccess, PPRIVILEGE_SET Privileges, BOOLEAN AccessGranted);\nNTSTATUS NtPrivilegedServiceAuditAlarm (PUNICODE_STRING SubsystemName, PUNICODE_STRING ServiceName, HANDLE ClientToken, PPRIVILEGE_SET Privileges, BOOLEAN AccessGranted);\n```\n\n----------------------------------------\n\nTITLE: Generating Kernelinfo Kernel Module Using Make (sh)\nDESCRIPTION: Installs dependencies and builds the kernelinfo.ko kernel module needed to automate kernel structure offset extraction for a guest VM. Requires root or sudo privileges, kernel headers, build-essential, and a working compiler in the guest. Input parameters are provided by the OS environment and directory structure, and the output is a kernel module file (kernelinfo.ko).\nSOURCE: https://github.com/panda-re/panda-ng/blob/main/plugins/osi_linux/README.md#_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\napt-get install build-essential linux-headers-`uname -r`\n```\n\n----------------------------------------\n\nTITLE: Current Thread Retrieval Callback in C\nDESCRIPTION: Callback function type definition for retrieving current thread information from the guest OS. Returns an allocated OsiThread struct.\nSOURCE: https://github.com/panda-re/panda-ng/blob/main/plugins/osi/README.md#_snippet_9\n\nLANGUAGE: C\nCODE:\n```\ntypedef void (*on_get_current_thread_t)(CPUState *, OsiThread **)\n```\n\n----------------------------------------\n\nTITLE: Defining File System Management System Calls in C\nDESCRIPTION: These function prototypes define system calls for various file system operations, including mounting, opening, and configuring file systems. They provide low-level control over file system management.\nSOURCE: https://github.com/panda-re/panda-ng/blob/main/plugins/syscalls2/generated-in/linux_mips_prototypes.txt#_snippet_10\n\nLANGUAGE: C\nCODE:\n```\nlong sys_open_tree(int dfd, const char __user *path, unsigned flags);\nlong sys_move_mount(int from_dfd, const char __user *from_path, int to_dfd, const char __user *to_path, unsigned int ms_flags);\nlong sys_fsopen(const char __user *fs_name, unsigned int flags);\nlong sys_fsconfig(int fs_fd, unsigned int cmd, const char __user *key, const void __user *value, int aux);\nlong sys_fsmount(int fs_fd, unsigned int flags, unsigned int ms_flags);\nlong sys_fspick(int dfd, const char __user *path, unsigned int flags);\n```\n\n----------------------------------------\n\nTITLE: Declaring Windows NT Native API Prototypes - C\nDESCRIPTION: Declares multiple C function prototypes for the Windows NT Native API, enabling low-level userland code to call NT kernel services. Each function follows the NTSTATUS calling convention and accepts various NT-native types like PHANDLE, ACCESS_MASK, and PUNICODE_STRING as parameters, depending on the specific API’s requirements. The header requires definitions for all the non-basic types referenced (such as OBJECT_ATTRIBUTES, IO_STATUS_BLOCK, etc.) in included headers or prior declarations. Inputs are mostly pointers to driver/kernel-defined structures, with outputs generally signaled in NTSTATUS and via output parameters. These declarations do not provide implementations or safety checks and are intended for use in system programming with an understanding of kernel APIs.\nSOURCE: https://github.com/panda-re/panda-ng/blob/main/plugins/syscalls2/generated-in/windows_vistasp12_x86_prototypes.txt#_snippet_1\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtCreateKeyTransacted (PHANDLE KeyHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, ULONG TitleIndex, PUNICODE_STRING Class, ULONG CreateOptions, HANDLE TransactionHandle, PULONG Disposition);\nNTSTATUS NtCreateMailslotFile (PHANDLE FileHandle, ULONG DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, PIO_STATUS_BLOCK IoStatusBlock, ULONG CreateOptions, ULONG MailslotQuota, ULONG MaximumMessageSize, PLARGE_INTEGER ReadTimeout);\nNTSTATUS NtCreateMutant (PHANDLE MutantHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, BOOLEAN InitialOwner);\nNTSTATUS NtCreateNamedPipeFile (PHANDLE FileHandle, ULONG DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, PIO_STATUS_BLOCK IoStatusBlock, ULONG ShareAccess, ULONG CreateDisposition, ULONG CreateOptions, ULONG NamedPipeType, ULONG ReadMode, ULONG CompletionMode, ULONG MaximumInstances, ULONG InboundQuota, ULONG OutboundQuota, PLARGE_INTEGER DefaultTimeout);\nNTSTATUS NtCreatePrivateNamespace (PHANDLE NamespaceHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, PVOID BoundaryDescriptor);\nNTSTATUS NtCreatePagingFile (PUNICODE_STRING PageFileName, PLARGE_INTEGER MinimumSize, PLARGE_INTEGER MaximumSize, ULONG Priority);\nNTSTATUS NtCreatePort (PHANDLE PortHandle, POBJECT_ATTRIBUTES ObjectAttributes, ULONG MaxConnectionInfoLength, ULONG MaxMessageLength, ULONG MaxPoolUsage);\nNTSTATUS NtCreateProcess (PHANDLE ProcessHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, HANDLE ParentProcess, BOOLEAN InheritObjectTable, HANDLE SectionHandle, HANDLE DebugPort, HANDLE ExceptionPort);\nNTSTATUS NtCreateProcessEx (PHANDLE ProcessHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, HANDLE ParentProcess, ULONG Flags, HANDLE SectionHandle, HANDLE DebugPort, HANDLE ExceptionPort, ULONG JobMemberLevel);\nNTSTATUS NtCreateProfile (PHANDLE ProfileHandle, HANDLE Process, PVOID RangeBase, SIZE_T RangeSize, ULONG BucketSize, PULONG Buffer, ULONG BufferSize, KPROFILE_SOURCE ProfileSource, KAFFINITY Affinity);\nNTSTATUS NtCreateSection (PHANDLE SectionHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, PLARGE_INTEGER MaximumSize, ULONG SectionPageProtection, ULONG AllocationAttributes, HANDLE FileHandle);\nNTSTATUS NtCreateSemaphore (PHANDLE SemaphoreHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, LONG InitialCount, LONG MaximumCount);\nNTSTATUS NtCreateSymbolicLinkObject (PHANDLE LinkHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, PUNICODE_STRING LinkTarget);\nNTSTATUS NtCreateThread (PHANDLE ThreadHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, HANDLE ProcessHandle, PCLIENT_ID ClientId, PCONTEXT ThreadContext, PINITIAL_TEB InitialTeb, BOOLEAN CreateSuspended);\nNTSTATUS NtCreateTimer (PHANDLE TimerHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, TIMER_TYPE TimerType);\nNTSTATUS NtCreateToken (PHANDLE TokenHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, TOKEN_TYPE TokenType, PLUID AuthenticationId, PLARGE_INTEGER ExpirationTime, PTOKEN_USER User, PTOKEN_GROUPS Groups, PTOKEN_PRIVILEGES Privileges, PTOKEN_OWNER Owner, PTOKEN_PRIMARY_GROUP PrimaryGroup, PTOKEN_DEFAULT_DACL DefaultDacl, PTOKEN_SOURCE TokenSource);\nNTSTATUS NtCreateTransaction (PHANDLE TransactionHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, LPGUID Uow, HANDLE TmHandle, ULONG CreateOptions, ULONG IsolationLevel, ULONG IsolationFlags, PLARGE_INTEGER Timeout, PUNICODE_STRING Description);\nNTSTATUS NtOpenTransaction (PHANDLE TransactionHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, LPGUID Uow, HANDLE TmHandle);\nNTSTATUS NtQueryInformationTransaction (HANDLE TransactionHandle, TRANSACTION_INFORMATION_CLASS TransactionInformationClass, PVOID TransactionInformation, ULONG TransactionInformationLength, PULONG ReturnLength);\nNTSTATUS NtQueryInformationTransactionManager (HANDLE TransactionManagerHandle, TRANSACTIONMANAGER_INFORMATION_CLASS TransactionManagerInformationClass, PVOID TransactionManagerInformation, ULONG TransactionManagerInformationLength, PULONG ReturnLength);\nNTSTATUS NtPrePrepareEnlistment (HANDLE EnlistmentHandle, PLARGE_INTEGER TmVirtualClock);\nNTSTATUS NtPrepareEnlistment (HANDLE EnlistmentHandle, PLARGE_INTEGER TmVirtualClock);\nNTSTATUS NtCommitEnlistment (HANDLE EnlistmentHandle, PLARGE_INTEGER TmVirtualClock);\nNTSTATUS NtReadOnlyEnlistment (HANDLE EnlistmentHandle, PLARGE_INTEGER TmVirtualClock);\nNTSTATUS NtRollbackComplete (HANDLE EnlistmentHandle, PLARGE_INTEGER TmVirtualClock);\nNTSTATUS NtRollbackEnlistment (HANDLE EnlistmentHandle, PLARGE_INTEGER TmVirtualClock);\nNTSTATUS NtCommitTransaction (HANDLE TransactionHandle, BOOLEAN Wait);\nNTSTATUS NtRollbackTransaction (HANDLE TransactionHandle, BOOLEAN Wait);\nNTSTATUS NtPrePrepareComplete (HANDLE EnlistmentHandle, PLARGE_INTEGER TmVirtualClock);\nNTSTATUS NtPrepareComplete (HANDLE EnlistmentHandle, PLARGE_INTEGER TmVirtualClock);\nNTSTATUS NtCommitComplete (HANDLE EnlistmentHandle, PLARGE_INTEGER TmVirtualClock);\nNTSTATUS NtSinglePhaseReject (HANDLE EnlistmentHandle, PLARGE_INTEGER TmVirtualClock);\nNTSTATUS NtSetInformationTransaction (HANDLE TransactionHandle, TRANSACTION_INFORMATION_CLASS TransactionInformationClass, PVOID TransactionInformation, ULONG TransactionInformationLength);\nNTSTATUS NtSetInformationTransactionManager (HANDLE TmHandle, TRANSACTIONMANAGER_INFORMATION_CLASS TransactionManagerInformationClass, PVOID TransactionManagerInformation, ULONG TransactionManagerInformationLength);\nNTSTATUS NtSetInformationResourceManager (HANDLE ResourceManagerHandle, RESOURCEMANAGER_INFORMATION_CLASS ResourceManagerInformationClass, PVOID ResourceManagerInformation, ULONG ResourceManagerInformationLength);\nNTSTATUS NtCreateTransactionManager (PHANDLE TmHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, PUNICODE_STRING LogFileName, ULONG CreateOptions, ULONG CommitStrength);\nNTSTATUS NtOpenTransactionManager (PHANDLE TmHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, PUNICODE_STRING LogFileName, LPGUID TmIdentity, ULONG OpenOptions);\nNTSTATUS NtRenameTransactionManager (PUNICODE_STRING LogFileName, LPGUID ExistingTransactionManagerGuid);\nNTSTATUS NtRollforwardTransactionManager (HANDLE TransactionManagerHandle, PLARGE_INTEGER TmVirtualClock);\nNTSTATUS NtRecoverEnlistment (HANDLE EnlistmentHandle, PVOID EnlistmentKey);\nNTSTATUS NtRecoverResourceManager (HANDLE ResourceManagerHandle);\nNTSTATUS NtRecoverTransactionManager (HANDLE TransactionManagerHandle);\nNTSTATUS NtCreateResourceManager (PHANDLE ResourceManagerHandle, ACCESS_MASK DesiredAccess, HANDLE TmHandle, LPGUID RmGuid, POBJECT_ATTRIBUTES ObjectAttributes, ULONG CreateOptions, PUNICODE_STRING Description);\nNTSTATUS NtOpenResourceManager (PHANDLE ResourceManagerHandle, ACCESS_MASK DesiredAccess, HANDLE TmHandle, LPGUID ResourceManagerGuid, POBJECT_ATTRIBUTES ObjectAttributes);\nNTSTATUS NtGetNotificationResourceManager (HANDLE ResourceManagerHandle, PTRANSACTION_NOTIFICATION TransactionNotification, ULONG NotificationLength, PLARGE_INTEGER Timeout, PULONG ReturnLength, ULONG Asynchronous, ULONG_PTR AsynchronousContext);\nNTSTATUS NtQueryInformationResourceManager (HANDLE ResourceManagerHandle, RESOURCEMANAGER_INFORMATION_CLASS ResourceManagerInformationClass, PVOID ResourceManagerInformation, ULONG ResourceManagerInformationLength, PULONG ReturnLength);\nNTSTATUS NtCreateEnlistment (PHANDLE EnlistmentHandle, ACCESS_MASK DesiredAccess, HANDLE ResourceManagerHandle, HANDLE TransactionHandle, POBJECT_ATTRIBUTES ObjectAttributes, ULONG CreateOptions, NOTIFICATION_MASK NotificationMask, PVOID EnlistmentKey);\nNTSTATUS NtOpenEnlistment (PHANDLE EnlistmentHandle, ACCESS_MASK DesiredAccess, HANDLE ResourceManagerHandle, LPGUID EnlistmentGuid, POBJECT_ATTRIBUTES ObjectAttributes);\nNTSTATUS NtSetInformationEnlistment (HANDLE EnlistmentHandle, ENLISTMENT_INFORMATION_CLASS EnlistmentInformationClass, PVOID EnlistmentInformation, ULONG EnlistmentInformationLength);\nNTSTATUS NtQueryInformationEnlistment (HANDLE EnlistmentHandle, ENLISTMENT_INFORMATION_CLASS EnlistmentInformationClass, PVOID EnlistmentInformation, ULONG EnlistmentInformationLength, PULONG ReturnLength);\nNTSTATUS NtCreateWaitablePort (PHANDLE PortHandle, POBJECT_ATTRIBUTES ObjectAttributes, ULONG MaxConnectionInfoLength, ULONG MaxMessageLength, ULONG MaxPoolUsage);\nNTSTATUS NtDebugActiveProcess (HANDLE ProcessHandle, HANDLE DebugObjectHandle);\nNTSTATUS NtDebugContinue (HANDLE DebugObjectHandle, PCLIENT_ID ClientId, NTSTATUS ContinueStatus);\nNTSTATUS NtDelayExecution (BOOLEAN Alertable, PLARGE_INTEGER DelayInterval);\nNTSTATUS NtDeleteAtom (RTL_ATOM Atom);\nNTSTATUS NtDeleteBootEntry (ULONG Id);\nNTSTATUS NtDeleteDriverEntry (ULONG Id);\nNTSTATUS NtDeleteFile (POBJECT_ATTRIBUTES ObjectAttributes);\nNTSTATUS NtDeleteKey (HANDLE KeyHandle);\nNTSTATUS NtDeletePrivateNamespace (HANDLE NamespaceHandle);\nNTSTATUS NtDeleteObjectAuditAlarm (PUNICODE_STRING SubsystemName, PVOID HandleId, BOOLEAN GenerateOnClose);\nNTSTATUS NtDeleteValueKey (HANDLE KeyHandle, PUNICODE_STRING ValueName);\nNTSTATUS NtDeviceIoControlFile (HANDLE FileHandle, HANDLE Event, PIO_APC_ROUTINE ApcRoutine, PVOID ApcContext, PIO_STATUS_BLOCK IoStatusBlock, ULONG IoControlCode, PVOID InputBuffer, ULONG InputBufferLength, PVOID OutputBuffer, ULONG OutputBufferLength);\nNTSTATUS NtDisplayString (PUNICODE_STRING String);\nNTSTATUS NtDuplicateObject (HANDLE SourceProcessHandle, HANDLE SourceHandle, HANDLE TargetProcessHandle, PHANDLE TargetHandle, ACCESS_MASK DesiredAccess, ULONG HandleAttributes, ULONG Options);\n```\n\n----------------------------------------\n\nTITLE: Defining Process Management System Calls in Linux Kernel\nDESCRIPTION: Function declarations for Linux system calls related to process management, including prctl, exit_group, tgkill, and thread operations. These functions allow for process control, thread management, and signal handling.\nSOURCE: https://github.com/panda-re/panda-ng/blob/main/plugins/syscalls2/generated-in/linux_mips64n32_prototypes.txt#_snippet_1\n\nLANGUAGE: C\nCODE:\n```\nlong sys_prctl(int option, unsigned long arg2, unsigned long arg3, unsigned long arg4, unsigned long arg5);\nlong sys_exit_group(int error_code);\nlong sys_gettid(void);\nlong sys_tkill(pid_t pid, int sig);\nlong sys_tgkill(pid_t tgid, pid_t pid, int sig);\nlong sys_set_tid_address(int __user *tidptr);\nlong sys_restart_syscall(void);\nlong sys_unshare(unsigned long unshare_flags);\n```\n\n----------------------------------------\n\nTITLE: Setting Up Python Virtual Environment and Dependencies - Shell Script\nDESCRIPTION: Prepares a Python 3 virtual environment and installs dependencies from requirements2.txt. This is typically the first step in the workflow; users must ensure Python 3 is installed on their system before executing these commands. The main dependencies are listed in requirements2.txt, and activating the environment ensures isolation from system Python packages.\nSOURCE: https://github.com/panda-re/panda-ng/blob/main/plugins/syscalls2/scripts/README.md#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\npython3 -m venv venv\n. venv/bin/activate\n\npip install -r requirements2.txt\n```\n\n----------------------------------------\n\nTITLE: Defining Extended Attribute and Miscellaneous System Calls in C\nDESCRIPTION: This snippet defines system calls for extended attribute operations on file descriptors and miscellaneous operations like user ID setting and access checking.\nSOURCE: https://github.com/panda-re/panda-ng/blob/main/plugins/syscalls2/generated-in/freebsd_x64_prototypes.txt#_snippet_29\n\nLANGUAGE: C\nCODE:\n```\nssize_t extattr_set_fd(int fd, int attrnamespace, const char *attrname, void *data, size_t nbytes);\nssize_t extattr_get_fd(int fd, int attrnamespace, const char *attrname, void *data, size_t nbytes);\nint extattr_delete_fd(int fd, int attrnamespace, const char *attrname);\nint __setugid(int flag);\n\nint eaccess(const char *path, int amode);\nint afs3_syscall(long syscall, long parm1, long parm2, long parm3, long parm4, long parm5, long parm6);\nint nmount(struct iovec *iovp, unsigned int iovcnt, int flags);\n```\n\n----------------------------------------\n\nTITLE: Windows NT Memory Protection Function Declaration (C)\nDESCRIPTION: Declaration of the NtProtectVirtualMemory function that changes the protection on a region of committed pages in virtual memory. It requires process handle, memory address, region size, and protection flags.\nSOURCE: https://github.com/panda-re/panda-ng/blob/main/plugins/syscalls2/generated-in/windows_vistasp0_x86_prototypes.txt#_snippet_6\n\nLANGUAGE: C\nCODE:\n```\nNTSTATUS NtProtectVirtualMemory (HANDLE ProcessHandle, PVOID *BaseAddress, PSIZE_T RegionSize, WIN32_PROTECTION_MASK NewProtectWin32, PULONG OldProtect);\n```\n\n----------------------------------------\n\nTITLE: Task Change Callback Definition in C\nDESCRIPTION: Callback function type definition for notifying plugins about task (thread/process) changes in the operating system.\nSOURCE: https://github.com/panda-re/panda-ng/blob/main/plugins/osi/README.md#_snippet_2\n\nLANGUAGE: C\nCODE:\n```\ntypedef void (*on_task_change_t)(CPUState *)\n```\n\n----------------------------------------\n\nTITLE: Process Mappings Retrieval Callback in C\nDESCRIPTION: Callback function type definition for retrieving shared libraries loaded for a specific process. Returns a GArray of OsiModule elements.\nSOURCE: https://github.com/panda-re/panda-ng/blob/main/plugins/osi/README.md#_snippet_11\n\nLANGUAGE: C\nCODE:\n```\ntypedef void (*on_get_mappings_t)(CPUState *, OsiProc *, GArray**)\n```\n\n----------------------------------------\n\nTITLE: Defining MAC Framework and Miscellaneous System Calls in C\nDESCRIPTION: This snippet defines system calls for Mandatory Access Control (MAC) operations and various other operations like environment variables and UUID generation.\nSOURCE: https://github.com/panda-re/panda-ng/blob/main/plugins/syscalls2/generated-in/freebsd_x64_prototypes.txt#_snippet_30\n\nLANGUAGE: C\nCODE:\n```\nint __mac_get_proc(struct mac *mac_p);\nint __mac_set_proc(struct mac *mac_p);\nint __mac_get_fd(int fd, struct mac *mac_p);\nint __mac_get_file(const char *path_p, struct mac *mac_p);\nint __mac_set_fd(int fd, struct mac *mac_p);\nint __mac_set_file(const char *path_p, struct mac *mac_p);\nint kenv(int what, const char *name, char *value, int len);\nint lchflags(const char *path, u_long flags);\nint uuidgen(struct uuid *store, int count);\nint sendfile(int fd, int s, off_t offset, size_t nbytes, struct sf_hdtr *hdtr, off_t *sbytes, int flags);\nint mac_syscall(const char *policy, int call, void *arg);\nint getfsstat(struct freebsd11_statfs *buf, long bufsize, int mode);\nint statfs(const char *path, struct freebsd11_statfs *buf);\nint fstatfs(int fd, struct freebsd11_statfs *buf);\nint fhstatfs(const struct fhandle *u_fhp, struct freebsd11_statfs *buf);\n```\n\n----------------------------------------\n\nTITLE: Declaring Memory and Process Management System Calls in C\nDESCRIPTION: This snippet declares system calls for memory inheritance (minherit), process forking (rfork), and user/group ID checks (issetugid). It includes function signatures with their respective parameters and return types.\nSOURCE: https://github.com/panda-re/panda-ng/blob/main/plugins/syscalls2/generated-in/freebsd_x64_prototypes.txt#_snippet_18\n\nLANGUAGE: C\nCODE:\n```\nint minherit(void *addr, size_t len, int inherit);\nint rfork(int flags);\nAUE_POLL OBSOL openbsd_poll\nint issetugid(void);\nint lchown(const char *path, int uid, int gid);\nint aio_read(struct aiocb *aiocbp);\n```\n\n----------------------------------------\n\nTITLE: Windows NT System Call Function Declarations\nDESCRIPTION: Function declarations for Windows NT native API calls (ntdll.dll). These declarations represent low-level system operations including process/thread management, file I/O, registry access, and security features.\nSOURCE: https://github.com/panda-re/panda-ng/blob/main/plugins/syscalls2/generated-in/windows_vistasp12_x86_prototypes.txt#_snippet_2\n\nLANGUAGE: C\nCODE:\n```\nNTSTATUS NtDuplicateToken (HANDLE ExistingTokenHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, BOOLEAN EffectiveOnly, TOKEN_TYPE TokenType, PHANDLE NewTokenHandle);\nNTSTATUS NtEnumerateBootEntries (PVOID Buffer, PULONG BufferLength);\nNTSTATUS NtEnumerateDriverEntries (PVOID Buffer, PULONG BufferLength);\nNTSTATUS NtEnumerateKey (HANDLE KeyHandle, ULONG Index, KEY_INFORMATION_CLASS KeyInformationClass, PVOID KeyInformation, ULONG Length, PULONG ResultLength);\n/* Additional function declarations omitted for brevity */\nNTSTATUS NtPrivilegedServiceAuditAlarm (PUNICODE_STRING SubsystemName, PUNICODE_STRING ServiceName, HANDLE ClientToken, PPRIVILEGE_SET Privileges, BOOLEAN AccessGranted);\n```\n\n----------------------------------------\n\nTITLE: Declaring Windows Native API System Calls in C\nDESCRIPTION: This snippet comprises C function prototypes for Windows Native API (Nt*) system calls, enabling direct access to kernel-level functionalities for security, process, memory, and port management. Dependencies include Windows header type definitions such as HANDLE, NTSTATUS, and various structure pointers; usage requires inclusion of proper header files and possibly linking against ntdll. Parameters are generally pointers for both input and output, with the expectation that caller allocates necessary memory and structures beforehand. All functions return NTSTATUS codes to indicate completion status, and no implementation is provided here—only the interface contracts.\nSOURCE: https://github.com/panda-re/panda-ng/blob/main/plugins/syscalls2/generated-in/windows_7_x86_prototypes.txt#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nNTSTATUS NtAcceptConnectPort (PHANDLE PortHandle, PVOID PortContext, PPORT_MESSAGE ConnectionRequest, BOOLEAN AcceptConnection, PPORT_VIEW ServerView, PREMOTE_PORT_VIEW ClientView);\nNTSTATUS NtAccessCheck (PSECURITY_DESCRIPTOR SecurityDescriptor, HANDLE ClientToken, ACCESS_MASK DesiredAccess, PGENERIC_MAPPING GenericMapping, PPRIVILEGE_SET PrivilegeSet, PULONG PrivilegeSetLength, PACCESS_MASK GrantedAccess, PNTSTATUS AccessStatus);\nNTSTATUS NtAccessCheckAndAuditAlarm (PUNICODE_STRING SubsystemName, PVOID HandleId, PUNICODE_STRING ObjectTypeName, PUNICODE_STRING ObjectName, PSECURITY_DESCRIPTOR SecurityDescriptor, ACCESS_MASK DesiredAccess, PGENERIC_MAPPING GenericMapping, BOOLEAN ObjectCreation, PACCESS_MASK GrantedAccess, PNTSTATUS AccessStatus, PBOOLEAN GenerateOnClose);\nNTSTATUS NtAccessCheckByType (PSECURITY_DESCRIPTOR SecurityDescriptor, PSID PrincipalSelfSid, HANDLE ClientToken, ACCESS_MASK DesiredAccess, POBJECT_TYPE_LIST ObjectTypeList, ULONG ObjectTypeListLength, PGENERIC_MAPPING GenericMapping, PPRIVILEGE_SET PrivilegeSet, PULONG PrivilegeSetLength, PACCESS_MASK GrantedAccess, PNTSTATUS AccessStatus);\nNTSTATUS NtAccessCheckByTypeAndAuditAlarm (PUNICODE_STRING SubsystemName, PVOID HandleId, PUNICODE_STRING ObjectTypeName, PUNICODE_STRING ObjectName, PSECURITY_DESCRIPTOR SecurityDescriptor, PSID PrincipalSelfSid, ACCESS_MASK DesiredAccess, AUDIT_EVENT_TYPE AuditType, ULONG Flags, POBJECT_TYPE_LIST ObjectTypeList, ULONG ObjectTypeListLength, PGENERIC_MAPPING GenericMapping, BOOLEAN ObjectCreation, PACCESS_MASK GrantedAccess, PNTSTATUS AccessStatus, PBOOLEAN GenerateOnClose);\nNTSTATUS NtAccessCheckByTypeResultList (PSECURITY_DESCRIPTOR SecurityDescriptor, PSID PrincipalSelfSid, HANDLE ClientToken, ACCESS_MASK DesiredAccess, POBJECT_TYPE_LIST ObjectTypeList, ULONG ObjectTypeListLength, PGENERIC_MAPPING GenericMapping, PPRIVILEGE_SET PrivilegeSet, PULONG PrivilegeSetLength, PACCESS_MASK GrantedAccess, PNTSTATUS AccessStatus);\nNTSTATUS NtAccessCheckByTypeResultListAndAuditAlarm (PUNICODE_STRING SubsystemName, PVOID HandleId, PUNICODE_STRING ObjectTypeName, PUNICODE_STRING ObjectName, PSECURITY_DESCRIPTOR SecurityDescriptor, PSID PrincipalSelfSid, ACCESS_MASK DesiredAccess, AUDIT_EVENT_TYPE AuditType, ULONG Flags, POBJECT_TYPE_LIST ObjectTypeList, ULONG ObjectTypeListLength, PGENERIC_MAPPING GenericMapping, BOOLEAN ObjectCreation, PACCESS_MASK GrantedAccess, PNTSTATUS AccessStatus, PBOOLEAN GenerateOnClose);\nNTSTATUS NtAccessCheckByTypeResultListAndAuditAlarmByHandle (PUNICODE_STRING SubsystemName, PVOID HandleId, HANDLE ClientToken, PUNICODE_STRING ObjectTypeName, PUNICODE_STRING ObjectName, PSECURITY_DESCRIPTOR SecurityDescriptor, PSID PrincipalSelfSid, ACCESS_MASK DesiredAccess, AUDIT_EVENT_TYPE AuditType, ULONG Flags, POBJECT_TYPE_LIST ObjectTypeList, ULONG ObjectTypeListLength, PGENERIC_MAPPING GenericMapping, BOOLEAN ObjectCreation, PACCESS_MASK GrantedAccess, PNTSTATUS AccessStatus, PBOOLEAN GenerateOnClose);\nNTSTATUS NtAddAtom (PWSTR AtomName, ULONG Length, PRTL_ATOM Atom);\nNTSTATUS NtAddBootEntry (PBOOT_ENTRY BootEntry, PULONG Id);\nNTSTATUS NtAddDriverEntry (PEFI_DRIVER_ENTRY DriverEntry, PULONG Id);\nNTSTATUS NtAdjustGroupsToken (HANDLE TokenHandle, BOOLEAN ResetToDefault, PTOKEN_GROUPS NewState, ULONG BufferLength, PTOKEN_GROUPS PreviousState, PULONG ReturnLength);\nNTSTATUS NtAdjustPrivilegesToken (HANDLE TokenHandle, BOOLEAN DisableAllPrivileges, PTOKEN_PRIVILEGES NewState, ULONG BufferLength, PTOKEN_PRIVILEGES PreviousState, PULONG ReturnLength);\nNTSTATUS NtAlertResumeThread (HANDLE ThreadHandle, PULONG PreviousSuspendCount);\nNTSTATUS NtAlertThread (HANDLE ThreadHandle);\nNTSTATUS NtAllocateLocallyUniqueId (PLUID Luid);\nNTSTATUS NtAllocateReserveObject (PHANDLE MemoryReserveHandle, POBJECT_ATTRIBUTES ObjectAttributes, MEMORY_RESERVE_TYPE Type);\nNTSTATUS NtAllocateUserPhysicalPages (HANDLE ProcessHandle, PULONG_PTR NumberOfPages, PULONG_PTR UserPfnArray);\nNTSTATUS NtAllocateUuids (PULARGE_INTEGER Time, PULONG Range, PULONG Sequence, PCHAR Seed);\nNTSTATUS NtAllocateVirtualMemory (HANDLE ProcessHandle, PVOID *BaseAddress, ULONG_PTR ZeroBits, PSIZE_T RegionSize, ULONG AllocationType, ULONG Protect);\nNTSTATUS NtAlpcAcceptConnectPort (PHANDLE PortHandle, HANDLE ConnectionPortHandle, ULONG Flags, POBJECT_ATTRIBUTES ObjectAttributes, PALPC_PORT_ATTRIBUTES PortAttributes, PVOID PortContext, PPORT_MESSAGE ConnectionRequest, PALPC_MESSAGE_ATTRIBUTES ConnectionMessageAttributes, BOOLEAN AcceptConnection);\nNTSTATUS NtAlpcCancelMessage (HANDLE PortHandle, ULONG Flags, PALPC_CONTEXT_ATTR MessageContext);\nNTSTATUS NtAlpcConnectPort (PHANDLE PortHandle, PUNICODE_STRING PortName, POBJECT_ATTRIBUTES ObjectAttributes, PALPC_PORT_ATTRIBUTES PortAttributes, ULONG Flags, PSID RequiredServerSid, PPORT_MESSAGE ConnectionMessage, PULONG BufferLength, PALPC_MESSAGE_ATTRIBUTES OutMessageAttributes, PALPC_MESSAGE_ATTRIBUTES InMessageAttributes, PLARGE_INTEGER Timeout);\nNTSTATUS NtAlpcCreatePort (PHANDLE PortHandle, POBJECT_ATTRIBUTES ObjectAttributes, PALPC_PORT_ATTRIBUTES PortAttributes);\nNTSTATUS NtAlpcCreatePortSection (HANDLE PortHandle, ULONG Flags, HANDLE SectionHandle, SIZE_T SectionSize, PALPC_HANDLE AlpcSectionHandle, PSIZE_T ActualSectionSize);\nNTSTATUS NtAlpcCreateResourceReserve (HANDLE PortHandle, ULONG Flags, SIZE_T MessageSize, PALPC_HANDLE ResourceId);\nNTSTATUS NtAlpcCreateSectionView (HANDLE PortHandle, ULONG Flags, PALPC_DATA_VIEW_ATTR ViewAttributes);\nNTSTATUS NtAlpcCreateSecurityContext (HANDLE PortHandle, ULONG Flags, PALPC_SECURITY_ATTR SecurityAttribute);\nNTSTATUS NtAlpcDeletePortSection (HANDLE PortHandle, ULONG Flags, ALPC_HANDLE SectionHandle);\nNTSTATUS NtAlpcDeleteResourceReserve (HANDLE PortHandle, ULONG Flags, ALPC_HANDLE ResourceId);\nNTSTATUS NtAlpcDeleteSectionView (HANDLE PortHandle, ULONG Flags, PVOID ViewBase);\nNTSTATUS NtAlpcDeleteSecurityContext (HANDLE PortHandle, ULONG Flags, ALPC_HANDLE ContextHandle);\nNTSTATUS NtAlpcDisconnectPort (HANDLE PortHandle, ULONG Flags);\nNTSTATUS NtAlpcImpersonateClientOfPort (HANDLE PortHandle, PPORT_MESSAGE PortMessage, PVOID Reserved);\nNTSTATUS NtAlpcOpenSenderProcess (PHANDLE ProcessHandle, HANDLE PortHandle, PPORT_MESSAGE PortMessage, ULONG Flags, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes);\nNTSTATUS NtAlpcOpenSenderThread (PHANDLE ThreadHandle, HANDLE PortHandle, PPORT_MESSAGE PortMessage, ULONG Flags, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes);\nNTSTATUS NtAlpcQueryInformation (HANDLE PortHandle, ALPC_PORT_INFORMATION_CLASS PortInformationClass, PVOID PortInformation, ULONG Length, PULONG ReturnLength);\nNTSTATUS NtAlpcQueryInformationMessage (HANDLE PortHandle, PPORT_MESSAGE PortMessage, ALPC_MESSAGE_INFORMATION_CLASS MessageInformationClass, PVOID MessageInformation, ULONG Length, PULONG ReturnLength);\nNTSTATUS NtAlpcRevokeSecurityContext (HANDLE PortHandle, ULONG Flags, ALPC_HANDLE ContextHandle);\nNTSTATUS NtAlpcSendWaitReceivePort (HANDLE PortHandle, ULONG Flags, PPORT_MESSAGE SendMessage, PALPC_MESSAGE_ATTRIBUTES SendMessageAttributes, PPORT_MESSAGE ReceiveMessage, PULONG BufferLength, PALPC_MESSAGE_ATTRIBUTES ReceiveMessageAttributes, PLARGE_INTEGER Timeout);\nNTSTATUS NtAlpcSetInformation (HANDLE PortHandle, ALPC_PORT_INFORMATION_CLASS PortInformationClass, PVOID PortInformation, ULONG Length);\nNTSTATUS NtApphelpCacheControl (APPHELPCOMMAND type, PVOID buf);\nNTSTATUS NtAreMappedFilesTheSame (PVOID File1MappedAsAnImage, PVOID File2MappedAsFile);\nNTSTATUS NtAssignProcessToJobObject (HANDLE JobHandle, HANDLE ProcessHandle);\nNTSTATUS NtCallbackReturn (PVOID OutputBuffer, ULONG OutputLength, NTSTATUS Status);\nNTSTATUS NtCancelIoFile (HANDLE FileHandle, PIO_STATUS_BLOCK IoStatusBlock);\nNTSTATUS NtCancelIoFileEx (HANDLE FileHandle, PIO_STATUS_BLOCK IoRequestToCancel, PIO_STATUS_BLOCK IoStatusBlock);\nNTSTATUS NtCancelSynchronousIoFile (HANDLE ThreadHandle, PIO_STATUS_BLOCK IoRequestToCancel, PIO_STATUS_BLOCK IoStatusBlock);\nNTSTATUS NtCancelTimer (HANDLE TimerHandle, PBOOLEAN CurrentState);\nNTSTATUS NtClearEvent (HANDLE EventHandle);\nNTSTATUS NtClose (HANDLE Handle);\nNTSTATUS NtCloseObjectAuditAlarm (PUNICODE_STRING SubsystemName, PVOID HandleId, BOOLEAN GenerateOnClose);\nNTSTATUS NtCommitComplete (HANDLE EnlistmentHandle, PLARGE_INTEGER TmVirtualClock);\nNTSTATUS NtCommitEnlistment (HANDLE EnlistmentHandle, PLARGE_INTEGER TmVirtualClock);\nNTSTATUS NtCommitTransaction (HANDLE TransactionHandle, BOOLEAN Wait);\nNTSTATUS NtCompactKeys (ULONG Count, HANDLE KeyArray[]);\nNTSTATUS NtCompareTokens (HANDLE FirstTokenHandle, HANDLE SecondTokenHandle, PBOOLEAN Equal);\nNTSTATUS NtCompleteConnectPort (HANDLE PortHandle);\nNTSTATUS NtCompressKey (HANDLE Key);\nNTSTATUS NtConnectPort (PHANDLE PortHandle, PUNICODE_STRING PortName, PSECURITY_QUALITY_OF_SERVICE SecurityQos, PPORT_VIEW ClientView, PREMOTE_PORT_VIEW ServerView, PULONG MaxMessageLength, PVOID ConnectionInformation, PULONG ConnectionInformationLength);\nNTSTATUS NtContinue (PCONTEXT ContextRecord, BOOLEAN TestAlert);\nNTSTATUS NtCreateDebugObject (PHANDLE DebugObjectHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, ULONG Flags);\nNTSTATUS NtCreateDirectoryObject (PHANDLE DirectoryHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes);\nNTSTATUS NtCreateEnlistment (PHANDLE EnlistmentHandle, ACCESS_MASK DesiredAccess, HANDLE ResourceManagerHandle, HANDLE TransactionHandle, POBJECT_ATTRIBUTES ObjectAttributes, ULONG CreateOptions, NOTIFICATION_MASK NotificationMask, PVOID EnlistmentKey);\nNTSTATUS NtCreateEvent (PHANDLE EventHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, EVENT_TYPE EventType, BOOLEAN InitialState);\nNTSTATUS NtCreateEventPair (PHANDLE EventPairHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes);\n```\n\n----------------------------------------\n\nTITLE: Windows NT Process and Thread Management Function Declarations (C)\nDESCRIPTION: Declarations for NT API functions related to process and thread management, including querying information, controlling execution, and memory operations. These functions provide low-level access to process control mechanisms.\nSOURCE: https://github.com/panda-re/panda-ng/blob/main/plugins/syscalls2/generated-in/windows_vistasp0_x86_prototypes.txt#_snippet_9\n\nLANGUAGE: C\nCODE:\n```\nNTSTATUS NtQueryInformationProcess (HANDLE ProcessHandle, PROCESSINFOCLASS ProcessInformationClass, PVOID ProcessInformation, ULONG ProcessInformationLength, PULONG ReturnLength);\nNTSTATUS NtQueryInformationThread (HANDLE ThreadHandle, THREADINFOCLASS ThreadInformationClass, PVOID ThreadInformation, ULONG ThreadInformationLength, PULONG ReturnLength);\nNTSTATUS NtQueueApcThread (HANDLE ThreadHandle, PPS_APC_ROUTINE ApcRoutine, PVOID ApcArgument1, PVOID ApcArgument2, PVOID ApcArgument3);\nNTSTATUS NtResumeProcess (HANDLE ProcessHandle);\nNTSTATUS NtResumeThread (HANDLE ThreadHandle, PULONG PreviousSuspendCount);\nNTSTATUS NtRegisterThreadTerminatePort (HANDLE PortHandle);\nNTSTATUS NtRemoveProcessDebug (HANDLE ProcessHandle, HANDLE DebugObjectHandle);\n```\n\n----------------------------------------\n\nTITLE: Declaring Windows NT System Call Functions for Process and Memory Management\nDESCRIPTION: Function declarations for Windows NT system calls related to process creation, thread management, and memory allocation. These functions provide low-level access to Windows kernel functionality with specific parameters for each operation type.\nSOURCE: https://github.com/panda-re/panda-ng/blob/main/plugins/syscalls2/generated-in/windows_xpsp3_x86_prototypes.txt#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nNTSTATUS NtAcceptConnectPort (PHANDLE PortHandle, PVOID PortContext, PPORT_MESSAGE ConnectionRequest, BOOLEAN AcceptConnection, PPORT_VIEW ServerView, PREMOTE_PORT_VIEW ClientView);\nNTSTATUS NtAccessCheck (PSECURITY_DESCRIPTOR SecurityDescriptor, HANDLE ClientToken, ACCESS_MASK DesiredAccess, PGENERIC_MAPPING GenericMapping, PPRIVILEGE_SET PrivilegeSet, PULONG PrivilegeSetLength, PACCESS_MASK GrantedAccess, PNTSTATUS AccessStatus);\nNTSTATUS NtAccessCheckAndAuditAlarm (PUNICODE_STRING SubsystemName, PVOID HandleId, PUNICODE_STRING ObjectTypeName, PUNICODE_STRING ObjectName, PSECURITY_DESCRIPTOR SecurityDescriptor, ACCESS_MASK DesiredAccess, PGENERIC_MAPPING GenericMapping, BOOLEAN ObjectCreation, PACCESS_MASK GrantedAccess, PNTSTATUS AccessStatus, PBOOLEAN GenerateOnClose);\nNTSTATUS NtAccessCheckByType (PSECURITY_DESCRIPTOR SecurityDescriptor, PSID PrincipalSelfSid, HANDLE ClientToken, ACCESS_MASK DesiredAccess, POBJECT_TYPE_LIST ObjectTypeList, ULONG ObjectTypeListLength, PGENERIC_MAPPING GenericMapping, PPRIVILEGE_SET PrivilegeSet, PULONG PrivilegeSetLength, PACCESS_MASK GrantedAccess, PNTSTATUS AccessStatus);\nNTSTATUS NtAccessCheckByTypeAndAuditAlarm (PUNICODE_STRING SubsystemName, PVOID HandleId, PUNICODE_STRING ObjectTypeName, PUNICODE_STRING ObjectName, PSECURITY_DESCRIPTOR SecurityDescriptor, PSID PrincipalSelfSid, ACCESS_MASK DesiredAccess, AUDIT_EVENT_TYPE AuditType, ULONG Flags, POBJECT_TYPE_LIST ObjectTypeList, ULONG ObjectTypeListLength, PGENERIC_MAPPING GenericMapping, BOOLEAN ObjectCreation, PACCESS_MASK GrantedAccess, PNTSTATUS AccessStatus, PBOOLEAN GenerateOnClose);\nNTSTATUS NtAccessCheckByTypeResultList (PSECURITY_DESCRIPTOR SecurityDescriptor, PSID PrincipalSelfSid, HANDLE ClientToken, ACCESS_MASK DesiredAccess, POBJECT_TYPE_LIST ObjectTypeList, ULONG ObjectTypeListLength, PGENERIC_MAPPING GenericMapping, PPRIVILEGE_SET PrivilegeSet, PULONG PrivilegeSetLength, PACCESS_MASK GrantedAccess, PNTSTATUS AccessStatus);\nNTSTATUS NtAccessCheckByTypeResultListAndAuditAlarm (PUNICODE_STRING SubsystemName, PVOID HandleId, PUNICODE_STRING ObjectTypeName, PUNICODE_STRING ObjectName, PSECURITY_DESCRIPTOR SecurityDescriptor, PSID PrincipalSelfSid, ACCESS_MASK DesiredAccess, AUDIT_EVENT_TYPE AuditType, ULONG Flags, POBJECT_TYPE_LIST ObjectTypeList, ULONG ObjectTypeListLength, PGENERIC_MAPPING GenericMapping, BOOLEAN ObjectCreation, PACCESS_MASK GrantedAccess, PNTSTATUS AccessStatus, PBOOLEAN GenerateOnClose);\nNTSTATUS NtAccessCheckByTypeResultListAndAuditAlarmByHandle (PUNICODE_STRING SubsystemName, PVOID HandleId, HANDLE ClientToken, PUNICODE_STRING ObjectTypeName, PUNICODE_STRING ObjectName, PSECURITY_DESCRIPTOR SecurityDescriptor, PSID PrincipalSelfSid, ACCESS_MASK DesiredAccess, AUDIT_EVENT_TYPE AuditType, ULONG Flags, POBJECT_TYPE_LIST ObjectTypeList, ULONG ObjectTypeListLength, PGENERIC_MAPPING GenericMapping, BOOLEAN ObjectCreation, PACCESS_MASK GrantedAccess, PNTSTATUS AccessStatus, PBOOLEAN GenerateOnClose);\nNTSTATUS NtAddAtom (PWSTR AtomName, ULONG Length, PRTL_ATOM Atom);\nNTSTATUS NtAddBootEntry (PBOOT_ENTRY BootEntry, PULONG Id);\nNTSTATUS NtAdjustGroupsToken (HANDLE TokenHandle, BOOLEAN ResetToDefault, PTOKEN_GROUPS NewState, ULONG BufferLength, PTOKEN_GROUPS PreviousState, PULONG ReturnLength);\nNTSTATUS NtAdjustPrivilegesToken (HANDLE TokenHandle, BOOLEAN DisableAllPrivileges, PTOKEN_PRIVILEGES NewState, ULONG BufferLength, PTOKEN_PRIVILEGES PreviousState, PULONG ReturnLength);\nNTSTATUS NtAlertResumeThread (HANDLE ThreadHandle, PULONG PreviousSuspendCount);\nNTSTATUS NtAlertThread (HANDLE ThreadHandle);\nNTSTATUS NtAllocateLocallyUniqueId (PLUID Luid);\nNTSTATUS NtAllocateUserPhysicalPages (HANDLE ProcessHandle, PULONG_PTR NumberOfPages, PULONG_PTR UserPfnArray);\nNTSTATUS NtAllocateUuids (PULARGE_INTEGER Time, PULONG Range, PULONG Sequence, PCHAR Seed);\nNTSTATUS NtAllocateVirtualMemory (HANDLE ProcessHandle, PVOID *BaseAddress, ULONG_PTR ZeroBits, PSIZE_T RegionSize, ULONG AllocationType, ULONG Protect);\nNTSTATUS NtAreMappedFilesTheSame (PVOID File1MappedAsAnImage, PVOID File2MappedAsFile);\nNTSTATUS NtAssignProcessToJobObject (HANDLE JobHandle, HANDLE ProcessHandle);\nNTSTATUS NtCallbackReturn (PVOID OutputBuffer, ULONG OutputLength, NTSTATUS Status);\nNTSTATUS NtCancelIoFile (HANDLE FileHandle, PIO_STATUS_BLOCK IoStatusBlock);\nNTSTATUS NtCancelTimer (HANDLE TimerHandle, PBOOLEAN CurrentState);\nNTSTATUS NtClearEvent (HANDLE EventHandle);\nNTSTATUS NtClose (HANDLE Handle);\nNTSTATUS NtCloseObjectAuditAlarm (PUNICODE_STRING SubsystemName, PVOID HandleId, BOOLEAN GenerateOnClose);\nNTSTATUS NtCompactKeys (ULONG Count, HANDLE KeyArray[]);\nNTSTATUS NtCompareTokens (HANDLE FirstTokenHandle, HANDLE SecondTokenHandle, PBOOLEAN Equal);\nNTSTATUS NtCompleteConnectPort (HANDLE PortHandle);\nNTSTATUS NtCompressKey (HANDLE Key);\n```\n\n----------------------------------------\n\nTITLE: Defining Thread and Signal Queue System Calls in C\nDESCRIPTION: This snippet defines system calls for thread operations, mutex operations, and queuing signals to processes.\nSOURCE: https://github.com/panda-re/panda-ng/blob/main/plugins/syscalls2/generated-in/freebsd_x64_prototypes.txt#_snippet_37\n\nLANGUAGE: C\nCODE:\n```\nint _umtx_op(void *obj, int op, u_long val, void *uaddr1, void *uaddr2);\nint thr_new(struct thr_param *param, int param_size);\nint sigqueue(pid_t pid, int signum, void *value);\n```\n\n----------------------------------------\n\nTITLE: Running PANDA with Syscalls2 and Custom Monitor Plugin in Bash\nDESCRIPTION: Command line example showing how to run PANDA with the syscalls2 plugin and a custom file read monitoring plugin for Windows 7 guests.\nSOURCE: https://github.com/panda-re/panda-ng/blob/main/plugins/syscalls2/README.md#_snippet_10\n\nLANGUAGE: Bash\nCODE:\n```\n$PANDA_PATH/x86_64-softmmu/panda-system-x86_64 -replay foo \\\n    -os windows-32-7sp1 -panda syscalls2 -panda filereadmon\n```\n\n----------------------------------------\n\nTITLE: Manually Extracting Kernel Info Using GDB Commands\nDESCRIPTION: These GDB commands show how to manually load the Python script, run the kernel_info command, and quit GDB after extraction.\nSOURCE: https://github.com/panda-re/panda-ng/blob/main/plugins/osi_linux/utils/kernelinfo_gdb/README.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\ngdb ./vmlinux\nsource extract_kernelinfo.py\nkernel_info output.file\nq\n```\n\n----------------------------------------\n\nTITLE: Process Handles Retrieval Callback in C\nDESCRIPTION: Callback function type definition for retrieving minimal process handles from the guest OS. Returns a GArray of OsiProcHandle elements.\nSOURCE: https://github.com/panda-re/panda-ng/blob/main/plugins/osi/README.md#_snippet_4\n\nLANGUAGE: C\nCODE:\n```\ntypedef void (*on_get_process_handles_t)(CPUState *, GArray **)\n```\n\n----------------------------------------\n\nTITLE: Defining Audit System Calls in C\nDESCRIPTION: This snippet defines system calls for system auditing, including audit record submission and configuration.\nSOURCE: https://github.com/panda-re/panda-ng/blob/main/plugins/syscalls2/generated-in/freebsd_x64_prototypes.txt#_snippet_36\n\nLANGUAGE: C\nCODE:\n```\nint audit(const void *record, unsigned length);\nint auditon(int cmd, void *data, unsigned length);\nint getauid(uid_t *auid);\nint setauid(uid_t *auid);\nint getaudit(struct auditinfo *auditinfo);\nint setaudit(struct auditinfo *auditinfo);\nint getaudit_addr(struct auditinfo_addr *auditinfo_addr, unsigned length);\nint setaudit_addr(struct auditinfo_addr *auditinfo_addr, unsigned length);\nint auditctl(const char *path);\n```\n\n----------------------------------------\n\nTITLE: File Operation System Calls in C\nDESCRIPTION: System calls for file operations including read, write, truncate and stat operations\nSOURCE: https://github.com/panda-re/panda-ng/blob/main/plugins/syscalls2/generated-in/linux_mips64_prototypes.txt#_snippet_2\n\nLANGUAGE: C\nCODE:\n```\nlong sys_pread64(unsigned int fd, char __user *buf, size_t count, loff_t pos);\nlong sys_pwrite64(unsigned int fd, const char __user *buf, size_t count, loff_t pos);\nlong sys_truncate64(const char __user *path, loff_t length);\nlong sys_ftruncate64(unsigned int fd, loff_t length);\n```\n\n----------------------------------------\n\nTITLE: Defining Miscellaneous System Calls in C (Part 2)\nDESCRIPTION: This snippet defines various system calls including asynchronous I/O completion, user/group ID retrieval, and kernel event notification.\nSOURCE: https://github.com/panda-re/panda-ng/blob/main/plugins/syscalls2/generated-in/freebsd_x64_prototypes.txt#_snippet_28\n\nLANGUAGE: C\nCODE:\n```\nssize_t aio_waitcomplete(struct aiocb **aiocbp, struct timespec *timeout);\nint getresuid(uid_t *ruid, uid_t *euid, uid_t *suid);\nint getresgid(gid_t *rgid, gid_t *egid, gid_t *sgid);\nint kqueue(void);\nint kevent(int fd, struct kevent_freebsd11 *changelist, int nchanges, struct kevent_freebsd11 *eventlist, int nevents, const struct timespec *timeout);\n```\n\n----------------------------------------\n\nTITLE: Windows NT I/O and File System Calls\nDESCRIPTION: Function declarations for I/O operations including file creation, named pipes, and mailslots. These functions provide low-level filesystem and I/O access.\nSOURCE: https://github.com/panda-re/panda-ng/blob/main/plugins/syscalls2/generated-in/windows_2003sp0_x86_prototypes.txt#_snippet_2\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtCreateFile (\n    PHANDLE FileHandle,\n    ACCESS_MASK DesiredAccess,\n    POBJECT_ATTRIBUTES ObjectAttributes,\n    PIO_STATUS_BLOCK IoStatusBlock,\n    PLARGE_INTEGER AllocationSize,\n    ULONG FileAttributes,\n    ULONG ShareAccess,\n    ULONG CreateDisposition,\n    ULONG CreateOptions,\n    PVOID EaBuffer,\n    ULONG EaLength\n);\n\nNTSTATUS NtCreateNamedPipeFile (\n    PHANDLE FileHandle,\n    ULONG DesiredAccess,\n    POBJECT_ATTRIBUTES ObjectAttributes,\n    PIO_STATUS_BLOCK IoStatusBlock,\n    ULONG ShareAccess,\n    ULONG CreateDisposition,\n    ULONG CreateOptions,\n    ULONG NamedPipeType,\n    ULONG ReadMode,\n    ULONG CompletionMode,\n    ULONG MaximumInstances,\n    ULONG InboundQuota,\n    ULONG OutboundQuota,\n    PLARGE_INTEGER DefaultTimeout\n);\n```\n\n----------------------------------------\n\nTITLE: Defining Miscellaneous System Calls in C\nDESCRIPTION: This snippet defines various system calls including process tracing, file sending, kernel symbol lookup, and jail operations.\nSOURCE: https://github.com/panda-re/panda-ng/blob/main/plugins/syscalls2/generated-in/freebsd_x64_prototypes.txt#_snippet_24\n\nLANGUAGE: C\nCODE:\n```\nint utrace(const void *addr, size_t len);\nint sendfile(int fd, int s, off_t offset, size_t nbytes, struct sf_hdtr *hdtr, off_t *sbytes, int flags);\nint kldsym(int fileid, int cmd, void *data);\nint jail(struct jail *jail);\n```\n\n----------------------------------------\n\nTITLE: Windows NT File System Operation System Calls\nDESCRIPTION: System calls for file operations including file control, buffering, and device I/O control\nSOURCE: https://github.com/panda-re/panda-ng/blob/main/plugins/syscalls2/generated-in/windows_8sp0_x86_prototypes.txt#_snippet_7\n\nLANGUAGE: C\nCODE:\n```\nNTSTATUS NtFsControlFile(HANDLE FileHandle, HANDLE Event, PIO_APC_ROUTINE ApcRoutine, PVOID ApcContext, PIO_STATUS_BLOCK IoStatusBlock, ULONG IoControlCode, PVOID InputBuffer, ULONG InputBufferLength, PVOID OutputBuffer, ULONG OutputBufferLength);\nNTSTATUS NtDeviceIoControlFile(HANDLE FileHandle, HANDLE Event, PIO_APC_ROUTINE ApcRoutine, PVOID ApcContext, PIO_STATUS_BLOCK IoStatusBlock, ULONG IoControlCode, PVOID InputBuffer, ULONG InputBufferLength, PVOID OutputBuffer, ULONG OutputBufferLength);\n```\n\n----------------------------------------\n\nTITLE: Defining Futex and Scheduling System Calls in C\nDESCRIPTION: These function prototypes define system calls for fast userspace mutex (futex) operations and scheduling interval retrieval. They involve low-level synchronization and process scheduling functionalities.\nSOURCE: https://github.com/panda-re/panda-ng/blob/main/plugins/syscalls2/generated-in/linux_mips_prototypes.txt#_snippet_7\n\nLANGUAGE: C\nCODE:\n```\nlong sys_futex(u32 __user *uaddr, int op, u32 val, struct __kernel_timespec __user *utime, u32 __user *uaddr2, u32 val3);\nlong sys_sched_rr_get_interval(pid_t pid, struct __kernel_timespec __user *interval);\n```\n\n----------------------------------------\n\nTITLE: Windows NT Synchronization and Event API Functions in C\nDESCRIPTION: Function declarations for Windows NT native API calls related to synchronization and event management. These system calls allow creating and manipulating events, mutants, timers, and I/O completion ports.\nSOURCE: https://github.com/panda-re/panda-ng/blob/main/plugins/syscalls2/generated-in/windows_8sp0_x86_prototypes.txt#_snippet_12\n\nLANGUAGE: C\nCODE:\n```\nNTSTATUS NtCreateEvent (PHANDLE EventHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, EVENT_TYPE EventType, BOOLEAN InitialState);\nNTSTATUS NtCreateEventPair (PHANDLE EventPairHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes);\nNTSTATUS NtCreateMutant (PHANDLE MutantHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, BOOLEAN InitialOwner);\nNTSTATUS NtCreateKeyedEvent (PHANDLE KeyedEventHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, ULONG Flags);\nNTSTATUS NtCreateIoCompletion (PHANDLE IoCompletionHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, ULONG Count);\nNTSTATUS NtClearEvent (HANDLE EventHandle);\nNTSTATUS NtCancelTimer (HANDLE TimerHandle, PBOOLEAN CurrentState);\n```\n\n----------------------------------------\n\nTITLE: Memory Management System Calls in C\nDESCRIPTION: System calls for memory management including mapping, advisory functions and policy management\nSOURCE: https://github.com/panda-re/panda-ng/blob/main/plugins/syscalls2/generated-in/linux_mips64_prototypes.txt#_snippet_4\n\nLANGUAGE: C\nCODE:\n```\nvoid* mmap2(void *addr, size_t length, int prot, int flags, int fd, off_t pgoffset);\nlong sys_mincore(unsigned long start, size_t len, unsigned char __user *vec);\nlong sys_madvise(unsigned long start, size_t len, int behavior);\n```\n\n----------------------------------------\n\nTITLE: Defining Optional Task Switch Hook Address in Config (GLib key-value)\nDESCRIPTION: Provides example of including the optional task.switch_task_hook_addr field in a custom kernelinfo.conf config section for enabling task change notifications. The address must be extracted from System.map and pasted in place of the placeholder value. The field assignment enables this OSI-Linux feature for environments providing the hook.\nSOURCE: https://github.com/panda-re/panda-ng/blob/main/plugins/osi_linux/README.md#_snippet_6\n\nLANGUAGE: GLib key-value\nCODE:\n```\n[my_kernel_info]\nname = #1 SMP Debian 3.2.51-1 i686\nversion.a = 3\n[...]\ntask.switch_task_hook_addr = <Address extracted from System.map>\n```\n\n----------------------------------------\n\nTITLE: Enhanced System Call Return Monitoring with Context in C\nDESCRIPTION: Advanced callback signature for monitoring system call returns with detailed call information and context. Requires the load-info flag to be enabled.\nSOURCE: https://github.com/panda-re/panda-ng/blob/main/plugins/syscalls2/README.md#_snippet_5\n\nLANGUAGE: C\nCODE:\n```\ntypedef void (*on_all_sys_return2_t)(CPUState *cpu, target_ulong pc, const syscall_info_t *call, const syscall_ctx_t *rp)\n```\n\n----------------------------------------\n\nTITLE: Defining Resource Limit and Memory Management System Calls in Linux Kernel\nDESCRIPTION: Function declarations for Linux system calls related to resource limits and memory management. These functions control process resource usage, memory policy, and page migration.\nSOURCE: https://github.com/panda-re/panda-ng/blob/main/plugins/syscalls2/generated-in/linux_mips64n32_prototypes.txt#_snippet_7\n\nLANGUAGE: C\nCODE:\n```\nlong sys_setrlimit(unsigned int resource, struct rlimit __user *rlim);\nlong sys_mbind(unsigned long start, unsigned long len, unsigned long mode, const unsigned long __user *nmask, unsigned long maxnode, unsigned flags);\nlong sys_get_mempolicy(int __user *policy, unsigned long __user *nmask, unsigned long maxnode, unsigned long addr, unsigned long flags);\nlong sys_set_mempolicy(int mode, const unsigned long __user *nmask, unsigned long maxnode);\nlong sys_migrate_pages(pid_t pid, unsigned long maxnode, const unsigned long __user *from, const unsigned long __user *to);\nlong sys_move_pages(pid_t pid, unsigned long nr_pages, const void __user * __user *pages, const int __user *nodes, int __user *status, int flags);\nlong sys_remap_file_pages(unsigned long start, unsigned long size, unsigned long prot, unsigned long pgoff, unsigned long flags);\n```\n\n----------------------------------------\n\nTITLE: Defining Notification and Waiting System Calls in Linux Kernel\nDESCRIPTION: Function declarations for Linux system calls related to notifications, waiting, and event handling. These functions provide interfaces for process synchronization and event monitoring.\nSOURCE: https://github.com/panda-re/panda-ng/blob/main/plugins/syscalls2/generated-in/linux_mips64n32_prototypes.txt#_snippet_11\n\nLANGUAGE: C\nCODE:\n```\nlong sys_inotify_init(void);\nlong sys_inotify_add_watch(int fd, const char __user *path, u32 mask);\nlong sys_inotify_rm_watch(int fd, __s32 wd);\nlong sys_waitid(int which, pid_t pid, struct siginfo __user *infop, int options, struct rusage __user *ru);\nlong sys_pselect6_time32(int, fd_set __user *, fd_set __user *, fd_set __user *, struct old_timespec32 __user *, void __user *);\nlong sys_semtimedop_time32(int semid, struct sembuf __user *sops, unsigned nsops, const struct old_timespec32 __user *timeout);\n```\n\n----------------------------------------\n\nTITLE: NT ALPC (Advanced Local Procedure Call) API Functions\nDESCRIPTION: System calls for inter-process communication using ALPC, including port creation, connection management, and message handling.\nSOURCE: https://github.com/panda-re/panda-ng/blob/main/plugins/syscalls2/generated-in/windows_vistasp0_x64_prototypes.txt#_snippet_6\n\nLANGUAGE: C\nCODE:\n```\nNTSTATUS NtAlpcCreatePort (PHANDLE PortHandle, POBJECT_ATTRIBUTES ObjectAttributes, PALPC_PORT_ATTRIBUTES PortAttributes);\nNTSTATUS NtAlpcConnectPort (PHANDLE PortHandle, PUNICODE_STRING PortName, POBJECT_ATTRIBUTES ObjectAttributes, PALPC_PORT_ATTRIBUTES PortAttributes, ULONG Flags, PSID RequiredServerSid, PPORT_MESSAGE ConnectionMessage, PULONG BufferLength, PALPC_MESSAGE_ATTRIBUTES OutMessageAttributes, PALPC_MESSAGE_ATTRIBUTES InMessageAttributes, PLARGE_INTEGER Timeout);\nNTSTATUS NtAlpcAcceptConnectPort (PHANDLE PortHandle, HANDLE ConnectionPortHandle, ULONG Flags, POBJECT_ATTRIBUTES ObjectAttributes, PALPC_PORT_ATTRIBUTES PortAttributes, PVOID PortContext, PPORT_MESSAGE ConnectionRequest, PALPC_MESSAGE_ATTRIBUTES ConnectionMessageAttributes, BOOLEAN AcceptConnection);\n```\n\n----------------------------------------\n\nTITLE: Declaring Windows NT System Call Functions in C\nDESCRIPTION: This snippet contains function declarations for various Windows NT system calls. These functions are part of the Windows NT native API and provide low-level access to system resources and operations.\nSOURCE: https://github.com/panda-re/panda-ng/blob/main/plugins/syscalls2/generated-in/windows_vistasp12_x86_prototypes.txt#_snippet_4\n\nLANGUAGE: C\nCODE:\n```\nNTSTATUS NtSecureConnectPort (PHANDLE PortHandle, PUNICODE_STRING PortName, PSECURITY_QUALITY_OF_SERVICE SecurityQos, PPORT_VIEW ClientView, PSID RequiredServerSid, PREMOTE_PORT_VIEW ServerView, PULONG MaxMessageLength, PVOID ConnectionInformation, PULONG ConnectionInformationLength);\nNTSTATUS NtSetBootEntryOrder (PULONG Ids, ULONG Count);\nNTSTATUS NtSetBootOptions (PBOOT_OPTIONS BootOptions, ULONG FieldsToChange);\nNTSTATUS NtSetContextThread (HANDLE ThreadHandle, PCONTEXT ThreadContext);\nNTSTATUS NtSetDebugFilterState (ULONG ComponentId, ULONG Level, BOOLEAN State);\n// ... (remaining function declarations)\n```\n\n----------------------------------------\n\nTITLE: Process and Thread Creation System Calls in C\nDESCRIPTION: Function declarations for creating new threads and processes in Windows NT. Includes extended creation options for specifying detailed attributes, security access, and initialization parameters.\nSOURCE: https://github.com/panda-re/panda-ng/blob/main/plugins/syscalls2/generated-in/windows_vistasp12_x86_prototypes.txt#_snippet_6\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtCreateThreadEx (PHANDLE ThreadHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, HANDLE ProcessHandle, PVOID StartRoutine, PVOID Argument, ULONG CreateFlags, ULONG_PTR ZeroBits, SIZE_T StackSize, SIZE_T MaximumStackSize, PPS_ATTRIBUTE_LIST AttributeList);\nNTSTATUS NtCreateUserProcess (PHANDLE ProcessHandle, PHANDLE ThreadHandle, ACCESS_MASK ProcessDesiredAccess, ACCESS_MASK ThreadDesiredAccess, POBJECT_ATTRIBUTES ProcessObjectAttributes, POBJECT_ATTRIBUTES ThreadObjectAttributes, ULONG ProcessFlags, ULONG ThreadFlags, PRTL_USER_PROCESS_PARAMETERS ProcessParameters, PPROCESS_CREATE_INFO CreateInfo, PPROCESS_ATTRIBUTE_LIST AttributeList);\n```\n\n----------------------------------------\n\nTITLE: Generating Headers and C++ Code from Prototypes - Bash Script\nDESCRIPTION: Runs the make_all_generated.sh shell script to create C++ headers and code in the ../generated/ directory from previously generated prototypes. This script internally invokes syscalls_parser.py (a Python script) using the text prototypes as input. It must be executed after the prototype files are available, and depends on prior setup and generation steps.\nSOURCE: https://github.com/panda-re/panda-ng/blob/main/plugins/syscalls2/scripts/README.md#_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\n./make_all_generated.sh\n```\n\n----------------------------------------\n\nTITLE: Address Mapping Retrieval Callback in C\nDESCRIPTION: Callback function type definition for retrieving mapping information for a specific virtual memory address.\nSOURCE: https://github.com/panda-re/panda-ng/blob/main/plugins/osi/README.md#_snippet_16\n\nLANGUAGE: C\nCODE:\n```\ntypedef void (*on_get_mapping_by_addr_t)(CPUState *, OsiProc *, target_ptr_t, OsiModule**)\n```\n\n----------------------------------------\n\nTITLE: System Information and Configuration System Calls in C\nDESCRIPTION: Function declarations for querying and managing system configuration settings including license values, UI language settings, and MUI (Multilingual User Interface) registry information.\nSOURCE: https://github.com/panda-re/panda-ng/blob/main/plugins/syscalls2/generated-in/windows_vistasp12_x86_prototypes.txt#_snippet_7\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtQueryLicenseValue (PUNICODE_STRING Name, PULONG Type, PVOID Buffer, ULONG Length, PULONG ReturnedLength);\nNTSTATUS NtMapCMFModule (ULONG What, ULONG Index, PULONG CacheIndexOut, PULONG CacheFlagsOut, PULONG ViewSizeOut, PVOID *BaseAddress);\nNTSTATUS NtIsUILanguageComitted ();\nNTSTATUS NtFlushInstallUILanguage (LANGID InstallUILanguage, ULONG SetComittedFlag);\nNTSTATUS NtGetMUIRegistryInfo (ULONG Flags, PULONG DataSize, PVOID Data);\n```\n\n----------------------------------------\n\nTITLE: Windows NT API Function Declarations for System Programming in C\nDESCRIPTION: A comprehensive collection of Windows Native API (NTAPI) function declarations that provide low-level access to the Windows kernel. These functions enable direct interaction with process management, memory operations, file systems, and other core system functionality. They represent the underlying system calls used by Windows applications and services.\nSOURCE: https://github.com/panda-re/panda-ng/blob/main/plugins/syscalls2/generated-in/windows_8sp1_x86_prototypes.txt#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nNTSTATUS NtWorkerFactoryWorkerReady (HANDLE WorkerFactoryHandle);\nNTSTATUS NtAcceptConnectPort (PHANDLE PortHandle, PVOID PortContext, PPORT_MESSAGE ConnectionRequest, BOOLEAN AcceptConnection, PPORT_VIEW ServerView, PREMOTE_PORT_VIEW ClientView);\nNTSTATUS NtYieldExecution ();\nNTSTATUS NtWriteVirtualMemory (HANDLE ProcessHandle, PVOID BaseAddress, PVOID Buffer, SIZE_T BufferSize, PSIZE_T NumberOfBytesWritten);\nNTSTATUS NtWriteRequestData (HANDLE PortHandle, PPORT_MESSAGE Message, ULONG DataEntryIndex, PVOID Buffer, SIZE_T BufferSize, PSIZE_T NumberOfBytesWritten);\nNTSTATUS NtWriteFileGather (HANDLE FileHandle, HANDLE Event, PIO_APC_ROUTINE ApcRoutine, PVOID ApcContext, PIO_STATUS_BLOCK IoStatusBlock, PFILE_SEGMENT_ELEMENT SegmentArray, ULONG Length, PLARGE_INTEGER ByteOffset, PULONG Key);\nNTSTATUS NtWriteFile (HANDLE FileHandle, HANDLE Event, PIO_APC_ROUTINE ApcRoutine, PVOID ApcContext, PIO_STATUS_BLOCK IoStatusBlock, PVOID Buffer, ULONG Length, PLARGE_INTEGER ByteOffset, PULONG Key);\nNTSTATUS NtWaitLowEventPair (HANDLE EventPairHandle);\nNTSTATUS NtWaitHighEventPair (HANDLE EventPairHandle);\nNTSTATUS NtWaitForWorkViaWorkerFactory (HANDLE WorkerFactoryHandle, PFILE_IO_COMPLETION_INFORMATION MiniPacket);\nNTSTATUS NtWaitForSingleObject (HANDLE Handle, BOOLEAN Alertable, PLARGE_INTEGER Timeout);\nNTSTATUS NtWaitForMultipleObjects32 (ULONG Count, LONG Handles[], WAIT_TYPE WaitType, BOOLEAN Alertable, PLARGE_INTEGER Timeout);\nNTSTATUS NtWaitForMultipleObjects (ULONG Count, HANDLE Handles[], WAIT_TYPE WaitType, BOOLEAN Alertable, PLARGE_INTEGER Timeout);\nNTSTATUS NtWaitForKeyedEvent (HANDLE KeyedEventHandle, PVOID KeyValue, BOOLEAN Alertable, PLARGE_INTEGER Timeout);\nNTSTATUS NtWaitForDebugEvent (HANDLE DebugObjectHandle, BOOLEAN Alertable, PLARGE_INTEGER Timeout, PDBGUI_WAIT_STATE_CHANGE WaitStateChange);\nNTSTATUS NtVdmControl (VDMSERVICECLASS Service, PVOID ServiceData);\nNTSTATUS NtUnmapViewOfSection (HANDLE ProcessHandle, PVOID BaseAddress);\nNTSTATUS NtUnlockVirtualMemory (HANDLE ProcessHandle, PVOID *BaseAddress, PSIZE_T RegionSize, ULONG MapType);\nNTSTATUS NtUnlockFile (HANDLE FileHandle, PIO_STATUS_BLOCK IoStatusBlock, PLARGE_INTEGER ByteOffset, PLARGE_INTEGER Length, ULONG Key);\nNTSTATUS NtUnloadKeyEx (POBJECT_ATTRIBUTES TargetKey, HANDLE Event);\nNTSTATUS NtUnloadKey2 (POBJECT_ATTRIBUTES TargetKey, ULONG Flags);\nNTSTATUS NtUnloadKey (POBJECT_ATTRIBUTES TargetKey);\nNTSTATUS NtUnloadDriver (PUNICODE_STRING DriverServiceName);\nNTSTATUS NtUmsThreadYield (PVOID SchedulerParam);\nNTSTATUS NtTranslateFilePath (PFILE_PATH InputFilePath, ULONG OutputType, PFILE_PATH OutputFilePath, PULONG OutputFilePathLength);\nNTSTATUS NtTraceEvent (HANDLE TraceHandle, ULONG Flags, ULONG FieldSize, PVOID Fields);\nNTSTATUS NtTraceControl (ULONG FunctionCode, PVOID InBuffer, ULONG InBufferLen, PVOID OutBuffer, ULONG OutBufferLen, PULONG ReturnLength);\nNTSTATUS NtThawTransactions ();\nNTSTATUS NtThawRegistry ();\nNTSTATUS NtTestAlert ();\nNTSTATUS NtTerminateThread (HANDLE ThreadHandle, NTSTATUS ExitStatus);\nNTSTATUS NtTerminateProcess (HANDLE ProcessHandle, NTSTATUS ExitStatus);\nNTSTATUS NtTerminateJobObject (HANDLE JobHandle, NTSTATUS ExitStatus);\nNTSTATUS NtSystemDebugControl (SYSDBG_COMMAND Command, PVOID InputBuffer, ULONG InputBufferLength, PVOID OutputBuffer, ULONG OutputBufferLength, PULONG ReturnLength);\nNTSTATUS NtSuspendThread (HANDLE ThreadHandle, PULONG PreviousSuspendCount);\nNTSTATUS NtSuspendProcess (HANDLE ProcessHandle);\nNTSTATUS NtStopProfile (HANDLE ProfileHandle);\nNTSTATUS NtStartProfile (HANDLE ProfileHandle);\nNTSTATUS NtSinglePhaseReject (HANDLE EnlistmentHandle, PLARGE_INTEGER TmVirtualClock);\nNTSTATUS NtSignalAndWaitForSingleObject (HANDLE SignalHandle, HANDLE WaitHandle, BOOLEAN Alertable, PLARGE_INTEGER Timeout);\nNTSTATUS NtShutdownWorkerFactory (HANDLE WorkerFactoryHandle, LONG *PendingWorkerCount);\nNTSTATUS NtShutdownSystem (SHUTDOWN_ACTION Action);\nNTSTATUS NtSetVolumeInformationFile (HANDLE FileHandle, PIO_STATUS_BLOCK IoStatusBlock, PVOID FsInformation, ULONG Length, FS_INFORMATION_CLASS FsInformationClass);\nNTSTATUS NtSetValueKey (HANDLE KeyHandle, PUNICODE_STRING ValueName, ULONG TitleIndex, ULONG Type, PVOID Data, ULONG DataSize);\nNTSTATUS NtSetUuidSeed (PCHAR Seed);\nNTSTATUS NtSetTimerResolution (ULONG DesiredTime, BOOLEAN SetResolution, PULONG ActualTime);\nNTSTATUS NtSetTimerEx (HANDLE TimerHandle, TIMER_SET_INFORMATION_CLASS TimerSetInformationClass, PVOID TimerSetInformation, ULONG TimerSetInformationLength);\nNTSTATUS NtSetTimer (HANDLE TimerHandle, PLARGE_INTEGER DueTime, PTIMER_APC_ROUTINE TimerApcRoutine, PVOID TimerContext, BOOLEAN WakeTimer, LONG Period, PBOOLEAN PreviousState);\nNTSTATUS NtSetThreadExecutionState (EXECUTION_STATE esFlags, PEXECUTION_STATE PreviousFlags);\nNTSTATUS NtSetSystemTime (PLARGE_INTEGER SystemTime, PLARGE_INTEGER PreviousTime);\nNTSTATUS NtSetSystemPowerState (POWER_ACTION SystemAction, SYSTEM_POWER_STATE MinSystemState, ULONG Flags);\nNTSTATUS NtSetSystemInformation (SYSTEM_INFORMATION_CLASS SystemInformationClass, PVOID SystemInformation, ULONG SystemInformationLength);\nNTSTATUS NtSetSystemEnvironmentValueEx (PUNICODE_STRING VariableName, LPGUID VendorGuid, PVOID Value, ULONG ValueLength, ULONG Attributes);\nNTSTATUS NtSetSystemEnvironmentValue (PUNICODE_STRING VariableName, PUNICODE_STRING VariableValue);\nNTSTATUS NtSetSecurityObject (HANDLE Handle, SECURITY_INFORMATION SecurityInformation, PSECURITY_DESCRIPTOR SecurityDescriptor);\nNTSTATUS NtSetQuotaInformationFile (HANDLE FileHandle, PIO_STATUS_BLOCK IoStatusBlock, PVOID Buffer, ULONG Length);\nNTSTATUS NtSetLowWaitHighEventPair (HANDLE EventPairHandle);\nNTSTATUS NtSetLowEventPair (HANDLE EventPairHandle);\nNTSTATUS NtSetLdtEntries (ULONG Selector0, ULONG Entry0Low, ULONG Entry0Hi, ULONG Selector1, ULONG Entry1Low, ULONG Entry1Hi);\nNTSTATUS NtSetIoCompletionEx (HANDLE IoCompletionHandle, HANDLE IoCompletionReserveHandle, PVOID KeyContext, PVOID ApcContext, NTSTATUS IoStatus, ULONG_PTR IoStatusInformation);\nNTSTATUS NtSetIoCompletion (HANDLE IoCompletionHandle, PVOID KeyContext, PVOID ApcContext, NTSTATUS IoStatus, ULONG_PTR IoStatusInformation);\nNTSTATUS NtSetIntervalProfile (ULONG Interval, KPROFILE_SOURCE Source);\nNTSTATUS NtSetInformationWorkerFactory (HANDLE WorkerFactoryHandle, WORKERFACTORYINFOCLASS WorkerFactoryInformationClass, PVOID WorkerFactoryInformation, ULONG WorkerFactoryInformationLength);\nNTSTATUS NtSetInformationTransactionManager (HANDLE TmHandle, TRANSACTIONMANAGER_INFORMATION_CLASS TransactionManagerInformationClass, PVOID TransactionManagerInformation, ULONG TransactionManagerInformationLength);\nNTSTATUS NtSetInformationTransaction (HANDLE TransactionHandle, TRANSACTION_INFORMATION_CLASS TransactionInformationClass, PVOID TransactionInformation, ULONG TransactionInformationLength);\nNTSTATUS NtSetInformationToken (HANDLE TokenHandle, TOKEN_INFORMATION_CLASS TokenInformationClass, PVOID TokenInformation, ULONG TokenInformationLength);\nNTSTATUS NtSetInformationThread (HANDLE ThreadHandle, THREADINFOCLASS ThreadInformationClass, PVOID ThreadInformation, ULONG ThreadInformationLength);\nNTSTATUS NtSetInformationResourceManager (HANDLE ResourceManagerHandle, RESOURCEMANAGER_INFORMATION_CLASS ResourceManagerInformationClass, PVOID ResourceManagerInformation, ULONG ResourceManagerInformationLength);\nNTSTATUS NtSetInformationProcess (HANDLE ProcessHandle, PROCESSINFOCLASS ProcessInformationClass, PVOID ProcessInformation, ULONG ProcessInformationLength);\nNTSTATUS NtSetInformationObject (HANDLE Handle, OBJECT_INFORMATION_CLASS ObjectInformationClass, PVOID ObjectInformation, ULONG ObjectInformationLength);\nNTSTATUS NtSetInformationKey (HANDLE KeyHandle, KEY_SET_INFORMATION_CLASS KeySetInformationClass, PVOID KeySetInformation, ULONG KeySetInformationLength);\nNTSTATUS NtSetInformationJobObject (HANDLE JobHandle, JOBOBJECTINFOCLASS JobObjectInformationClass, PVOID JobObjectInformation, ULONG JobObjectInformationLength);\nNTSTATUS NtSetInformationFile (HANDLE FileHandle, PIO_STATUS_BLOCK IoStatusBlock, PVOID FileInformation, ULONG Length, FILE_INFORMATION_CLASS FileInformationClass);\nNTSTATUS NtSetInformationEnlistment (HANDLE EnlistmentHandle, ENLISTMENT_INFORMATION_CLASS EnlistmentInformationClass, PVOID EnlistmentInformation, ULONG EnlistmentInformationLength);\nNTSTATUS NtSetInformationDebugObject (HANDLE DebugObjectHandle, DEBUGOBJECTINFOCLASS DebugObjectInformationClass, PVOID DebugInformation, ULONG DebugInformationLength, PULONG ReturnLength);\nNTSTATUS NtSetHighWaitLowEventPair (HANDLE EventPairHandle);\nNTSTATUS NtSetHighEventPair (HANDLE EventPairHandle);\nNTSTATUS NtSetEventBoostPriority (HANDLE EventHandle);\nNTSTATUS NtSetEvent (HANDLE EventHandle, PLONG PreviousState);\nNTSTATUS NtSetEaFile (HANDLE FileHandle, PIO_STATUS_BLOCK IoStatusBlock, PVOID Buffer, ULONG Length);\nNTSTATUS NtSetDriverEntryOrder (PULONG Ids, ULONG Count);\nNTSTATUS NtSetDefaultUILanguage (LANGID DefaultUILanguageId);\nNTSTATUS NtSetDefaultLocale (BOOLEAN UserProfile, LCID DefaultLocaleId);\nNTSTATUS NtSetDefaultHardErrorPort (HANDLE DefaultHardErrorPort);\nNTSTATUS NtSetDebugFilterState (ULONG ComponentId, ULONG Level, BOOLEAN State);\nNTSTATUS NtSetContextThread (HANDLE ThreadHandle, PCONTEXT ThreadContext);\nNTSTATUS NtSetBootOptions (PBOOT_OPTIONS BootOptions, ULONG FieldsToChange);\nNTSTATUS NtSetBootEntryOrder (PULONG Ids, ULONG Count);\nNTSTATUS NtSerializeBoot ();\nNTSTATUS NtSecureConnectPort (PHANDLE PortHandle, PUNICODE_STRING PortName, PSECURITY_QUALITY_OF_SERVICE SecurityQos, PPORT_VIEW ClientView, PSID RequiredServerSid, PREMOTE_PORT_VIEW ServerView, PULONG MaxMessageLength, PVOID ConnectionInformation, PULONG ConnectionInformationLength);\n```\n\n----------------------------------------\n\nTITLE: Enhanced System Call Entry Monitoring with Context in C\nDESCRIPTION: Advanced callback signature for monitoring system call entries with detailed call information and context. Requires the load-info flag to be enabled.\nSOURCE: https://github.com/panda-re/panda-ng/blob/main/plugins/syscalls2/README.md#_snippet_4\n\nLANGUAGE: C\nCODE:\n```\ntypedef void (*on_all_sys_enter2_t)(CPUState *cpu, target_ulong pc, const syscall_info_t *call, const syscall_ctx_t *rp)\n```\n\n----------------------------------------\n\nTITLE: Populating Prototypes Directory from Kernel Source - Bash Script\nDESCRIPTION: Uses the shell script make_all_prototypes.sh to populate the ../generated-in/ directory with syscall prototype text files derived from a locally cloned kernel source. The script ultimately runs a Python utility (prototype_parser.py) with appropriate arguments. It requires access to the relevant kernel source and that the environment is set up as per the previous snippet.\nSOURCE: https://github.com/panda-re/panda-ng/blob/main/plugins/syscalls2/scripts/README.md#_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\n./make_all_prototypes.sh\n```\n\n----------------------------------------\n\nTITLE: Monitoring All System Call Returns in C\nDESCRIPTION: Callback function signature for monitoring all system call returns regardless of type. This provides minimal processing in the syscalls2 plugin.\nSOURCE: https://github.com/panda-re/panda-ng/blob/main/plugins/syscalls2/README.md#_snippet_3\n\nLANGUAGE: C\nCODE:\n```\ntypedef void (*on_all_sys_return_t)(CPUState *env, target_ulong pc, target_ulong callno)\n```\n\n----------------------------------------\n\nTITLE: Virtual Memory and Section Mapping using Native API - C\nDESCRIPTION: These function declarations include NtProtectVirtualMemory and NtMapViewOfSection, providing capabilities for memory protection changes and mapping sections into process address spaces, respectively. Parameters must include valid process or section handles, base addresses, sizes, and protection masks. Incorrect usage may cause access violations or memory corruption; all buffers and handles must be correctly managed.\nSOURCE: https://github.com/panda-re/panda-ng/blob/main/plugins/syscalls2/generated-in/windows_8sp1_x86_prototypes.txt#_snippet_7\n\nLANGUAGE: C\nCODE:\n```\nNTSTATUS NtProtectVirtualMemory (HANDLE ProcessHandle, PVOID *BaseAddress, PSIZE_T RegionSize, WIN32_PROTECTION_MASK NewProtectWin32, PULONG OldProtect);\n```\n\nLANGUAGE: C\nCODE:\n```\nNTSTATUS NtMapViewOfSection (HANDLE SectionHandle, HANDLE ProcessHandle, PVOID *BaseAddress, ULONG_PTR ZeroBits, SIZE_T CommitSize, PLARGE_INTEGER SectionOffset, PSIZE_T ViewSize, SECTION_INHERIT InheritDisposition, ULONG AllocationType, WIN32_PROTECTION_MASK Win32Protect);\n```\n\n----------------------------------------\n\nTITLE: Declaring NT System Call Prototypes - C Header\nDESCRIPTION: This code snippet provides a list of C function prototypes for various NT system calls, each returning NTSTATUS. These declarations require appropriate Windows type definitions (like HANDLE, ULONG, PVOID, etc.) and inclusion of Windows headers. Functions handle a wide array of native OS operations such as transaction control, registry/key management, file I/O, process/thread manipulation, and querying system information. Inputs are primarily handles, pointers, and basic types; outputs often include pointers to data or status values. The header does not include implementation, only the interface, and is meant for advanced users who need direct access to the NT Native API.\nSOURCE: https://github.com/panda-re/panda-ng/blob/main/plugins/syscalls2/generated-in/windows_8sp0_x86_prototypes.txt#_snippet_1\n\nLANGUAGE: C\nCODE:\n```\n99 NTSTATUS NtSaveKey (HANDLE KeyHandle, HANDLE FileHandle);\n100 NTSTATUS NtRollforwardTransactionManager (HANDLE TransactionManagerHandle, PLARGE_INTEGER TmVirtualClock);\n101 NTSTATUS NtRollbackTransaction (HANDLE TransactionHandle, BOOLEAN Wait);\n102 NTSTATUS NtRollbackEnlistment (HANDLE EnlistmentHandle, PLARGE_INTEGER TmVirtualClock);\n103 NTSTATUS NtRollbackComplete (HANDLE EnlistmentHandle, PLARGE_INTEGER TmVirtualClock);\n104 NTSTATUS NtResumeThread (HANDLE ThreadHandle, PULONG PreviousSuspendCount);\n105 NTSTATUS NtResumeProcess (HANDLE ProcessHandle);\n106 NTSTATUS NtRestoreKey (HANDLE KeyHandle, HANDLE FileHandle, ULONG Flags);\n107 NTSTATUS NtResetWriteWatch (HANDLE ProcessHandle, PVOID BaseAddress, SIZE_T RegionSize);\n108 NTSTATUS NtResetEvent (HANDLE EventHandle, PLONG PreviousState);\n109 NTSTATUS NtRequestWaitReplyPort (HANDLE PortHandle, PPORT_MESSAGE RequestMessage, PPORT_MESSAGE ReplyMessage);\n110 NTSTATUS NtRequestPort (HANDLE PortHandle, PPORT_MESSAGE RequestMessage);\n111 NTSTATUS NtReplyWaitReplyPort (HANDLE PortHandle, PPORT_MESSAGE ReplyMessage);\n112 NTSTATUS NtReplyWaitReceivePortEx (HANDLE PortHandle, PVOID *PortContext, PPORT_MESSAGE ReplyMessage, PPORT_MESSAGE ReceiveMessage, PLARGE_INTEGER Timeout);\n113 NTSTATUS NtReplyWaitReceivePort (HANDLE PortHandle, PVOID *PortContext , PPORT_MESSAGE ReplyMessage, PPORT_MESSAGE ReceiveMessage);\n114 NTSTATUS NtReplyPort (HANDLE PortHandle, PPORT_MESSAGE ReplyMessage);\n115 NTSTATUS NtReplacePartitionUnit (PUNICODE_STRING TargetInstancePath, PUNICODE_STRING SpareInstancePath, ULONG Flags);\n116 NTSTATUS NtReplaceKey (POBJECT_ATTRIBUTES NewFile, HANDLE TargetHandle, POBJECT_ATTRIBUTES OldFile);\n117 NTSTATUS NtRenameTransactionManager (PUNICODE_STRING LogFileName, LPGUID ExistingTransactionManagerGuid);\n118 NTSTATUS NtRenameKey (HANDLE KeyHandle, PUNICODE_STRING NewName);\n119 NTSTATUS NtRemoveProcessDebug (HANDLE ProcessHandle, HANDLE DebugObjectHandle);\n120 NTSTATUS NtRemoveIoCompletionEx (HANDLE IoCompletionHandle, PFILE_IO_COMPLETION_INFORMATION IoCompletionInformation, ULONG Count, PULONG NumEntriesRemoved, PLARGE_INTEGER Timeout, BOOLEAN Alertable);\n121 NTSTATUS NtRemoveIoCompletion (HANDLE IoCompletionHandle, PVOID *KeyContext, PVOID *ApcContext, PIO_STATUS_BLOCK IoStatusBlock, PLARGE_INTEGER Timeout);\n122 NTSTATUS NtReleaseWorkerFactoryWorker (HANDLE WorkerFactoryHandle);\n123 NTSTATUS NtReleaseSemaphore (HANDLE SemaphoreHandle, LONG ReleaseCount, PLONG PreviousCount);\n124 NTSTATUS NtReleaseMutant (HANDLE MutantHandle, PLONG PreviousCount);\n125 NTSTATUS NtReleaseKeyedEvent (HANDLE KeyedEventHandle, PVOID KeyValue, BOOLEAN Alertable, PLARGE_INTEGER Timeout);\n126 NTSTATUS NtRegisterThreadTerminatePort (HANDLE PortHandle);\n127 NTSTATUS NtRegisterProtocolAddressInformation (HANDLE ResourceManager, PCRM_PROTOCOL_ID ProtocolId, ULONG ProtocolInformationSize, PVOID ProtocolInformation, ULONG CreateOptions);\n128 NTSTATUS NtRecoverTransactionManager (HANDLE TransactionManagerHandle);\n129 NTSTATUS NtRecoverResourceManager (HANDLE ResourceManagerHandle);\n130 NTSTATUS NtRecoverEnlistment (HANDLE EnlistmentHandle, PVOID EnlistmentKey);\n131 NTSTATUS NtReadVirtualMemory (HANDLE ProcessHandle, PVOID BaseAddress, PVOID Buffer, SIZE_T BufferSize, PSIZE_T NumberOfBytesRead);\n132 NTSTATUS NtReadRequestData (HANDLE PortHandle, PPORT_MESSAGE Message, ULONG DataEntryIndex, PVOID Buffer, SIZE_T BufferSize, PSIZE_T NumberOfBytesRead);\n133 NTSTATUS NtReadOnlyEnlistment (HANDLE EnlistmentHandle, PLARGE_INTEGER TmVirtualClock);\n134 NTSTATUS NtReadFileScatter (HANDLE FileHandle, HANDLE Event, PIO_APC_ROUTINE ApcRoutine, PVOID ApcContext, PIO_STATUS_BLOCK IoStatusBlock, PFILE_SEGMENT_ELEMENT SegmentArray, ULONG Length, PLARGE_INTEGER ByteOffset, PULONG Key);\n135 NTSTATUS NtReadFile (HANDLE FileHandle, HANDLE Event, PIO_APC_ROUTINE ApcRoutine, PVOID ApcContext, PIO_STATUS_BLOCK IoStatusBlock, PVOID Buffer, ULONG Length, PLARGE_INTEGER ByteOffset, PULONG Key);\n136 NTSTATUS NtRaiseHardError (NTSTATUS ErrorStatus, ULONG NumberOfParameters, ULONG UnicodeStringParameterMask, PULONG_PTR Parameters, ULONG ValidResponseOptions, PULONG Response);\n137 NTSTATUS NtRaiseException (PEXCEPTION_RECORD ExceptionRecord, PCONTEXT ContextRecord, BOOLEAN FirstChance);\n138 NTSTATUS NtQueueApcThreadEx (HANDLE ThreadHandle, HANDLE UserApcReserveHandle, PPS_APC_ROUTINE ApcRoutine, PVOID ApcArgument1, PVOID ApcArgument2, PVOID ApcArgument3);\n139 NTSTATUS NtQueueApcThread (HANDLE ThreadHandle, PPS_APC_ROUTINE ApcRoutine, PVOID ApcArgument1, PVOID ApcArgument2, PVOID ApcArgument3);\n142 NTSTATUS NtQueryVolumeInformationFile (HANDLE FileHandle, PIO_STATUS_BLOCK IoStatusBlock, PVOID FsInformation, ULONG Length, FS_INFORMATION_CLASS FsInformationClass);\n143 NTSTATUS NtQueryVirtualMemory (HANDLE ProcessHandle, PVOID BaseAddress, MEMORY_INFORMATION_CLASS MemoryInformationClass, PVOID MemoryInformation, SIZE_T MemoryInformationLength, PSIZE_T ReturnLength);\n144 NTSTATUS NtQueryValueKey (HANDLE KeyHandle, PUNICODE_STRING ValueName, KEY_VALUE_INFORMATION_CLASS KeyValueInformationClass, PVOID KeyValueInformation, ULONG Length, PULONG ResultLength);\n145 NTSTATUS NtQueryTimerResolution (PULONG MaximumTime, PULONG MinimumTime, PULONG CurrentTime);\n146 NTSTATUS NtQueryTimer (HANDLE TimerHandle, TIMER_INFORMATION_CLASS TimerInformationClass, PVOID TimerInformation, ULONG TimerInformationLength, PULONG ReturnLength);\n147 NTSTATUS NtQuerySystemTime (PLARGE_INTEGER SystemTime);\n148 NTSTATUS NtQuerySystemInformationEx (SYSTEM_INFORMATION_CLASS SystemInformationClass, PVOID QueryInformation, ULONG QueryInformationLength, PVOID SystemInformation, ULONG SystemInformationLength, PULONG ReturnLength);\n149 NTSTATUS NtQuerySystemInformation (SYSTEM_INFORMATION_CLASS SystemInformationClass, PVOID SystemInformation, ULONG SystemInformationLength, PULONG ReturnLength);\n150 NTSTATUS NtQuerySystemEnvironmentValueEx (PUNICODE_STRING VariableName, LPGUID VendorGuid, PVOID Value, PULONG ValueLength, PULONG Attributes);\n151 NTSTATUS NtQuerySystemEnvironmentValue (PUNICODE_STRING VariableName, PWSTR VariableValue, USHORT ValueLength, PUSHORT ReturnLength);\n152 NTSTATUS NtQuerySymbolicLinkObject (HANDLE LinkHandle, PUNICODE_STRING LinkTarget, PULONG ReturnedLength);\n153 NTSTATUS NtQuerySemaphore (HANDLE SemaphoreHandle, SEMAPHORE_INFORMATION_CLASS SemaphoreInformationClass, PVOID SemaphoreInformation, ULONG SemaphoreInformationLength, PULONG ReturnLength);\n154 NTSTATUS NtQuerySecurityObject (HANDLE Handle, SECURITY_INFORMATION SecurityInformation, PSECURITY_DESCRIPTOR SecurityDescriptor, ULONG Length, PULONG LengthNeeded);\n155 NTSTATUS NtQuerySecurityAttributesToken (HANDLE TokenHandle, PUNICODE_STRING Attributes, ULONG NumberOfAttributes, PVOID Buffer, ULONG Length, PULONG ReturnLength);\n156 NTSTATUS NtQuerySection (HANDLE SectionHandle, SECTION_INFORMATION_CLASS SectionInformationClass, PVOID SectionInformation, SIZE_T SectionInformationLength, PSIZE_T ReturnLength);\n157 NTSTATUS NtQueryQuotaInformationFile (HANDLE FileHandle, PIO_STATUS_BLOCK IoStatusBlock, PVOID Buffer, ULONG Length, BOOLEAN ReturnSingleEntry, PVOID SidList, ULONG SidListLength, PULONG StartSid, BOOLEAN RestartScan);\n158 NTSTATUS NtQueryPortInformationProcess ();\n159 NTSTATUS NtQueryPerformanceCounter (PLARGE_INTEGER PerformanceCounter, PLARGE_INTEGER PerformanceFrequency);\n160 NTSTATUS NtQueryOpenSubKeysEx (POBJECT_ATTRIBUTES TargetKey, ULONG BufferLength, PVOID Buffer, PULONG RequiredSize);\n161 NTSTATUS NtQueryOpenSubKeys (POBJECT_ATTRIBUTES TargetKey, PULONG HandleCount);\n162 NTSTATUS NtQueryObject (HANDLE Handle, OBJECT_INFORMATION_CLASS ObjectInformationClass, PVOID ObjectInformation, ULONG ObjectInformationLength, PULONG ReturnLength);\n163 NTSTATUS NtQueryMutant (HANDLE MutantHandle, MUTANT_INFORMATION_CLASS MutantInformationClass, PVOID MutantInformation, ULONG MutantInformationLength, PULONG ReturnLength);\n164 NTSTATUS NtQueryMultipleValueKey (HANDLE KeyHandle, PKEY_VALUE_ENTRY ValueEntries, ULONG EntryCount, PVOID ValueBuffer, PULONG BufferLength, PULONG RequiredBufferLength);\n165 NTSTATUS NtQueryLicenseValue (PUNICODE_STRING Name, PULONG Type, PVOID Buffer, ULONG Length, PULONG ReturnedLength);\n166 NTSTATUS NtQueryKey (HANDLE KeyHandle, KEY_INFORMATION_CLASS KeyInformationClass, PVOID KeyInformation, ULONG Length, PULONG ResultLength);\n167 NTSTATUS NtQueryIoCompletion (HANDLE IoCompletionHandle, IO_COMPLETION_INFORMATION_CLASS IoCompletionInformationClass, PVOID IoCompletionInformation, ULONG IoCompletionInformationLength, PULONG ReturnLength);\n168 NTSTATUS NtQueryIntervalProfile (KPROFILE_SOURCE ProfileSource, PULONG Interval);\n169 NTSTATUS NtQueryInstallUILanguage (LANGID *InstallUILanguageId);\n170 NTSTATUS NtQueryInformationWorkerFactory (HANDLE WorkerFactoryHandle, WORKERFACTORYINFOCLASS WorkerFactoryInformationClass, PVOID WorkerFactoryInformation, ULONG WorkerFactoryInformationLength, PULONG ReturnLength);\n171 NTSTATUS NtQueryInformationTransactionManager (HANDLE TransactionManagerHandle, TRANSACTIONMANAGER_INFORMATION_CLASS TransactionManagerInformationClass, PVOID TransactionManagerInformation, ULONG TransactionManagerInformationLength, PULONG ReturnLength);\n172 NTSTATUS NtQueryInformationTransaction (HANDLE TransactionHandle, TRANSACTION_INFORMATION_CLASS TransactionInformationClass, PVOID TransactionInformation, ULONG TransactionInformationLength, PULONG ReturnLength);\n173 NTSTATUS NtQueryInformationToken (HANDLE TokenHandle, TOKEN_INFORMATION_CLASS TokenInformationClass, PVOID TokenInformation, ULONG TokenInformationLength, PULONG ReturnLength);\n174 NTSTATUS NtQueryInformationThread (HANDLE ThreadHandle, THREADINFOCLASS ThreadInformationClass, PVOID ThreadInformation, ULONG ThreadInformationLength, PULONG ReturnLength);\n```\n\n----------------------------------------\n\nTITLE: Declaring NT System Call Prototypes in C\nDESCRIPTION: These C code snippets declare function prototypes for several NT system calls. Each function is marked with the NTSTATUS return type and uses pointer-based arguments for in-place data manipulation, with prototypes following standard Windows NT kernel conventions. Prerequisites include inclusion of appropriate Windows NT headers and correct linking against underlying system libraries. Inputs are pointers to data structures such as handles, security descriptors, tokens, attributes, or specific settings (e.g., privileges, access masks), and outputs are NTSTATUS error codes and modifications to input/out parameters. Limitations include correctness of types and platform specificity; these prototypes are only meaningful on systems providing the corresponding NT kernel interfaces.\nSOURCE: https://github.com/panda-re/panda-ng/blob/main/plugins/syscalls2/generated-in/windows_8sp1_x86_prototypes.txt#_snippet_11\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtAllocateReserveObject (PHANDLE MemoryReserveHandle, POBJECT_ATTRIBUTES ObjectAttributes, MEMORY_RESERVE_TYPE Type);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtAllocateLocallyUniqueId (PLUID Luid);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtAlertThread (HANDLE ThreadHandle);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtAlertResumeThread (HANDLE ThreadHandle, PULONG PreviousSuspendCount);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtAdjustPrivilegesToken (HANDLE TokenHandle, BOOLEAN DisableAllPrivileges, PTOKEN_PRIVILEGES NewState, ULONG BufferLength, PTOKEN_PRIVILEGES PreviousState, PULONG ReturnLength);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtAdjustGroupsToken (HANDLE TokenHandle, BOOLEAN ResetToDefault, PTOKEN_GROUPS NewState, ULONG BufferLength, PTOKEN_GROUPS PreviousState, PULONG ReturnLength);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtAddDriverEntry (PEFI_DRIVER_ENTRY DriverEntry, PULONG Id);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtAddBootEntry (PBOOT_ENTRY BootEntry, PULONG Id);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtAddAtom (PWSTR AtomName, ULONG Length, PRTL_ATOM Atom);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtAccessCheckByTypeResultListAndAuditAlarmByHandle (PUNICODE_STRING SubsystemName, PVOID HandleId, HANDLE ClientToken, PUNICODE_STRING ObjectTypeName, PUNICODE_STRING ObjectName, PSECURITY_DESCRIPTOR SecurityDescriptor, PSID PrincipalSelfSid, ACCESS_MASK DesiredAccess, AUDIT_EVENT_TYPE AuditType, ULONG Flags, POBJECT_TYPE_LIST ObjectTypeList, ULONG ObjectTypeListLength, PGENERIC_MAPPING GenericMapping, BOOLEAN ObjectCreation, PACCESS_MASK GrantedAccess, PNTSTATUS AccessStatus, PBOOLEAN GenerateOnClose);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtAccessCheckByTypeResultListAndAuditAlarm (PUNICODE_STRING SubsystemName, PVOID HandleId, PUNICODE_STRING ObjectTypeName, PUNICODE_STRING ObjectName, PSECURITY_DESCRIPTOR SecurityDescriptor, PSID PrincipalSelfSid, ACCESS_MASK DesiredAccess, AUDIT_EVENT_TYPE AuditType, ULONG Flags, POBJECT_TYPE_LIST ObjectTypeList, ULONG ObjectTypeListLength, PGENERIC_MAPPING GenericMapping, BOOLEAN ObjectCreation, PACCESS_MASK GrantedAccess, PNTSTATUS AccessStatus, PBOOLEAN GenerateOnClose);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtAccessCheckByTypeResultList (PSECURITY_DESCRIPTOR SecurityDescriptor, PSID PrincipalSelfSid, HANDLE ClientToken, ACCESS_MASK DesiredAccess, POBJECT_TYPE_LIST ObjectTypeList, ULONG ObjectTypeListLength, PGENERIC_MAPPING GenericMapping, PPRIVILEGE_SET PrivilegeSet, PULONG PrivilegeSetLength, PACCESS_MASK GrantedAccess, PNTSTATUS AccessStatus);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtAccessCheckByTypeAndAuditAlarm (PUNICODE_STRING SubsystemName, PVOID HandleId, PUNICODE_STRING ObjectTypeName, PUNICODE_STRING ObjectName, PSECURITY_DESCRIPTOR SecurityDescriptor, PSID PrincipalSelfSid, ACCESS_MASK DesiredAccess, AUDIT_EVENT_TYPE AuditType, ULONG Flags, POBJECT_TYPE_LIST ObjectTypeList, ULONG ObjectTypeListLength, PGENERIC_MAPPING GenericMapping, BOOLEAN ObjectCreation, PACCESS_MASK GrantedAccess, PNTSTATUS AccessStatus, PBOOLEAN GenerateOnClose);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtAccessCheckByType (PSECURITY_DESCRIPTOR SecurityDescriptor, PSID PrincipalSelfSid, HANDLE ClientToken, ACCESS_MASK DesiredAccess, POBJECT_TYPE_LIST ObjectTypeList, ULONG ObjectTypeListLength, PGENERIC_MAPPING GenericMapping, PPRIVILEGE_SET PrivilegeSet, PULONG PrivilegeSetLength, PACCESS_MASK GrantedAccess, PNTSTATUS AccessStatus);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtAccessCheckAndAuditAlarm (PUNICODE_STRING SubsystemName, PVOID HandleId, PUNICODE_STRING ObjectTypeName, PUNICODE_STRING ObjectName, PSECURITY_DESCRIPTOR SecurityDescriptor, ACCESS_MASK DesiredAccess, PGENERIC_MAPPING GenericMapping, BOOLEAN ObjectCreation, PACCESS_MASK GrantedAccess, PNTSTATUS AccessStatus, PBOOLEAN GenerateOnClose);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtAccessCheck (PSECURITY_DESCRIPTOR SecurityDescriptor, HANDLE ClientToken, ACCESS_MASK DesiredAccess, PGENERIC_MAPPING GenericMapping, PPRIVILEGE_SET PrivilegeSet, PULONG PrivilegeSetLength, PACCESS_MASK GrantedAccess, PNTSTATUS AccessStatus);\n```\n\n----------------------------------------\n\nTITLE: Declaring Windows NT Native API Notification and Modification Functions in C\nDESCRIPTION: This snippet provides function prototypes for native calls that perform notification, monitoring, and modification actions on registry keys, directories, drivers, and files in Windows NT. Inputs include handles, filters, buffers, and event structures; outputs are typically NTSTATUS codes indicating the result of the requested operation. It requires prior inclusion of NT object type definitions and an understanding of event-driven or asynchronous processing. Proper allocation of notification buffers and valid rights are necessary for successful calls.\nSOURCE: https://github.com/panda-re/panda-ng/blob/main/plugins/syscalls2/generated-in/windows_8sp0_x86_prototypes.txt#_snippet_4\n\nLANGUAGE: C\nCODE:\n```\nNTSTATUS NtNotifyChangeSession (HANDLE Session, ULONG IoStateSequence, PVOID Reserved, ULONG Action, IO_SESSION_STATE IoState, IO_SESSION_STATE IoState2, PVOID Buffer, ULONG BufferSize);\nNTSTATUS NtNotifyChangeMultipleKeys (HANDLE MasterKeyHandle, ULONG Count, OBJECT_ATTRIBUTES SlaveObjects[], HANDLE Event, PIO_APC_ROUTINE ApcRoutine, PVOID ApcContext, PIO_STATUS_BLOCK IoStatusBlock, ULONG CompletionFilter, BOOLEAN WatchTree, PVOID Buffer, ULONG BufferSize, BOOLEAN Asynchronous);\nNTSTATUS NtNotifyChangeKey (HANDLE KeyHandle, HANDLE Event, PIO_APC_ROUTINE ApcRoutine, PVOID ApcContext, PIO_STATUS_BLOCK IoStatusBlock, ULONG CompletionFilter, BOOLEAN WatchTree, PVOID Buffer, ULONG BufferSize, BOOLEAN Asynchronous);\nNTSTATUS NtNotifyChangeDirectoryFile (HANDLE FileHandle, HANDLE Event, PIO_APC_ROUTINE ApcRoutine, PVOID ApcContext, PIO_STATUS_BLOCK IoStatusBlock, PVOID Buffer, ULONG Length, ULONG CompletionFilter, BOOLEAN WatchTree);\nNTSTATUS NtModifyDriverEntry (PEFI_DRIVER_ENTRY DriverEntry);\nNTSTATUS NtModifyBootEntry (PBOOT_ENTRY BootEntry);\nNTSTATUS NtMapViewOfSection (HANDLE SectionHandle, HANDLE ProcessHandle, PVOID *BaseAddress, ULONG_PTR ZeroBits, SIZE_T CommitSize, PLARGE_INTEGER SectionOffset, PSIZE_T ViewSize, SECTION_INHERIT InheritDisposition, ULONG AllocationType, WIN32_PROTECTION_MASK Win32Protect);\n```\n\n----------------------------------------\n\nTITLE: Current Process Handle Retrieval Callback in C\nDESCRIPTION: Callback function type definition for getting the handle of the currently running process. Returns an allocated OsiProcHandle struct.\nSOURCE: https://github.com/panda-re/panda-ng/blob/main/plugins/osi/README.md#_snippet_6\n\nLANGUAGE: C\nCODE:\n```\ntypedef void (*on_get_current_process_handle_t)(CPUState *, OsiProcHandle **)\n```\n\n----------------------------------------\n\nTITLE: Process List Retrieval Callback in C\nDESCRIPTION: Callback function type definition for retrieving the process list from the guest OS. Returns a GArray of OsiProc elements that must be freed using g_array_free.\nSOURCE: https://github.com/panda-re/panda-ng/blob/main/plugins/osi/README.md#_snippet_3\n\nLANGUAGE: C\nCODE:\n```\ntypedef void (*on_get_processes_t)(CPUState *, GArray **)\n```\n\n----------------------------------------\n\nTITLE: Unknown Mappings Retrieval Callback in C\nDESCRIPTION: Callback function type definition for retrieving mappings of unknown origin for a process. Linux-only implementation.\nSOURCE: https://github.com/panda-re/panda-ng/blob/main/plugins/osi/README.md#_snippet_15\n\nLANGUAGE: C\nCODE:\n```\ntypedef void (*on_get_unknown_mappings_t)(CPUState *, OsiProc *, GArray**)\n```\n\n----------------------------------------\n\nTITLE: Retrieving System Call Information in C\nDESCRIPTION: API function to get information about a specific system call based on its call number. Only available when the load-info flag is enabled.\nSOURCE: https://github.com/panda-re/panda-ng/blob/main/plugins/syscalls2/README.md#_snippet_7\n\nLANGUAGE: C\nCODE:\n```\nconst syscall_info_t *get_syscall_info(uint32_t callno)\n```\n\n----------------------------------------\n\nTITLE: Declaring NTAPI System Call Prototypes - Windows NT - C/C++\nDESCRIPTION: This snippet provides declarations for Windows NT Native API (NTAPI) functions, specifying the arguments, return types, and conventions for each call. These declarations are prerequisites for making direct system calls from user-mode drivers or low-level C/C++ programs, and generally require Windows NT headers and proper privilege to execute successfully. Each prototype defines how to interact with protected Windows kernel functions, including parameters such as handles, pointers, and specific custom structures; return values are of type NTSTATUS, encoding operation results or errors.\nSOURCE: https://github.com/panda-re/panda-ng/blob/main/plugins/syscalls2/generated-in/windows_vistasp12_x86_prototypes.txt#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nNTSTATUS NtAcceptConnectPort (PHANDLE PortHandle, PVOID PortContext, PPORT_MESSAGE ConnectionRequest, BOOLEAN AcceptConnection, PPORT_VIEW ServerView, PREMOTE_PORT_VIEW ClientView);\nNTSTATUS NtAccessCheck (PSECURITY_DESCRIPTOR SecurityDescriptor, HANDLE ClientToken, ACCESS_MASK DesiredAccess, PGENERIC_MAPPING GenericMapping, PPRIVILEGE_SET PrivilegeSet, PULONG PrivilegeSetLength, PACCESS_MASK GrantedAccess, PNTSTATUS AccessStatus);\nNTSTATUS NtAccessCheckAndAuditAlarm (PUNICODE_STRING SubsystemName, PVOID HandleId, PUNICODE_STRING ObjectTypeName, PUNICODE_STRING ObjectName, PSECURITY_DESCRIPTOR SecurityDescriptor, ACCESS_MASK DesiredAccess, PGENERIC_MAPPING GenericMapping, BOOLEAN ObjectCreation, PACCESS_MASK GrantedAccess, PNTSTATUS AccessStatus, PBOOLEAN GenerateOnClose);\nNTSTATUS NtAccessCheckByType (PSECURITY_DESCRIPTOR SecurityDescriptor, PSID PrincipalSelfSid, HANDLE ClientToken, ACCESS_MASK DesiredAccess, POBJECT_TYPE_LIST ObjectTypeList, ULONG ObjectTypeListLength, PGENERIC_MAPPING GenericMapping, PPRIVILEGE_SET PrivilegeSet, PULONG PrivilegeSetLength, PACCESS_MASK GrantedAccess, PNTSTATUS AccessStatus);\nNTSTATUS NtAccessCheckByTypeAndAuditAlarm (PUNICODE_STRING SubsystemName, PVOID HandleId, PUNICODE_STRING ObjectTypeName, PUNICODE_STRING ObjectName, PSECURITY_DESCRIPTOR SecurityDescriptor, PSID PrincipalSelfSid, ACCESS_MASK DesiredAccess, AUDIT_EVENT_TYPE AuditType, ULONG Flags, POBJECT_TYPE_LIST ObjectTypeList, ULONG ObjectTypeListLength, PGENERIC_MAPPING GenericMapping, BOOLEAN ObjectCreation, PACCESS_MASK GrantedAccess, PNTSTATUS AccessStatus, PBOOLEAN GenerateOnClose);\nNTSTATUS NtAccessCheckByTypeResultList (PSECURITY_DESCRIPTOR SecurityDescriptor, PSID PrincipalSelfSid, HANDLE ClientToken, ACCESS_MASK DesiredAccess, POBJECT_TYPE_LIST ObjectTypeList, ULONG ObjectTypeListLength, PGENERIC_MAPPING GenericMapping, PPRIVILEGE_SET PrivilegeSet, PULONG PrivilegeSetLength, PACCESS_MASK GrantedAccess, PNTSTATUS AccessStatus);\nNTSTATUS NtAccessCheckByTypeResultListAndAuditAlarm (PUNICODE_STRING SubsystemName, PVOID HandleId, PUNICODE_STRING ObjectTypeName, PUNICODE_STRING ObjectName, PSECURITY_DESCRIPTOR SecurityDescriptor, PSID PrincipalSelfSid, ACCESS_MASK DesiredAccess, AUDIT_EVENT_TYPE AuditType, ULONG Flags, POBJECT_TYPE_LIST ObjectTypeList, ULONG ObjectTypeListLength, PGENERIC_MAPPING GenericMapping, BOOLEAN ObjectCreation, PACCESS_MASK GrantedAccess, PNTSTATUS AccessStatus, PBOOLEAN GenerateOnClose);\nNTSTATUS NtAccessCheckByTypeResultListAndAuditAlarmByHandle (PUNICODE_STRING SubsystemName, PVOID HandleId, HANDLE ClientToken, PUNICODE_STRING ObjectTypeName, PUNICODE_STRING ObjectName, PSECURITY_DESCRIPTOR SecurityDescriptor, PSID PrincipalSelfSid, ACCESS_MASK DesiredAccess, AUDIT_EVENT_TYPE AuditType, ULONG Flags, POBJECT_TYPE_LIST ObjectTypeList, ULONG ObjectTypeListLength, PGENERIC_MAPPING GenericMapping, BOOLEAN ObjectCreation, PACCESS_MASK GrantedAccess, PNTSTATUS AccessStatus, PBOOLEAN GenerateOnClose);\nNTSTATUS NtAddAtom (PWSTR AtomName, ULONG Length, PRTL_ATOM Atom);\nNTSTATUS NtAddBootEntry (PBOOT_ENTRY BootEntry, PULONG Id);\nNTSTATUS NtAddDriverEntry (PEFI_DRIVER_ENTRY DriverEntry, PULONG Id);\nNTSTATUS NtAdjustGroupsToken (HANDLE TokenHandle, BOOLEAN ResetToDefault, PTOKEN_GROUPS NewState, ULONG BufferLength, PTOKEN_GROUPS PreviousState, PULONG ReturnLength);\nNTSTATUS NtAdjustPrivilegesToken (HANDLE TokenHandle, BOOLEAN DisableAllPrivileges, PTOKEN_PRIVILEGES NewState, ULONG BufferLength, PTOKEN_PRIVILEGES PreviousState, PULONG ReturnLength);\nNTSTATUS NtAlertResumeThread (HANDLE ThreadHandle, PULONG PreviousSuspendCount);\nNTSTATUS NtAlertThread (HANDLE ThreadHandle);\nNTSTATUS NtAllocateLocallyUniqueId (PLUID Luid);\nNTSTATUS NtAllocateUserPhysicalPages (HANDLE ProcessHandle, PULONG_PTR NumberOfPages, PULONG_PTR UserPfnArray);\nNTSTATUS NtAllocateUuids (PULARGE_INTEGER Time, PULONG Range, PULONG Sequence, PCHAR Seed);\nNTSTATUS NtAllocateVirtualMemory (HANDLE ProcessHandle, PVOID *BaseAddress, ULONG_PTR ZeroBits, PSIZE_T RegionSize, ULONG AllocationType, ULONG Protect);\nNTSTATUS NtAlpcAcceptConnectPort (PHANDLE PortHandle, HANDLE ConnectionPortHandle, ULONG Flags, POBJECT_ATTRIBUTES ObjectAttributes, PALPC_PORT_ATTRIBUTES PortAttributes, PVOID PortContext, PPORT_MESSAGE ConnectionRequest, PALPC_MESSAGE_ATTRIBUTES ConnectionMessageAttributes, BOOLEAN AcceptConnection);\nNTSTATUS NtAlpcCancelMessage (HANDLE PortHandle, ULONG Flags, PALPC_CONTEXT_ATTR MessageContext);\nNTSTATUS NtAlpcConnectPort (PHANDLE PortHandle, PUNICODE_STRING PortName, POBJECT_ATTRIBUTES ObjectAttributes, PALPC_PORT_ATTRIBUTES PortAttributes, ULONG Flags, PSID RequiredServerSid, PPORT_MESSAGE ConnectionMessage, PULONG BufferLength, PALPC_MESSAGE_ATTRIBUTES OutMessageAttributes, PALPC_MESSAGE_ATTRIBUTES InMessageAttributes, PLARGE_INTEGER Timeout);\nNTSTATUS NtAlpcCreatePort (PHANDLE PortHandle, POBJECT_ATTRIBUTES ObjectAttributes, PALPC_PORT_ATTRIBUTES PortAttributes);\nNTSTATUS NtAlpcCreatePortSection (HANDLE PortHandle, ULONG Flags, HANDLE SectionHandle, SIZE_T SectionSize, PALPC_HANDLE AlpcSectionHandle, PSIZE_T ActualSectionSize);\nNTSTATUS NtAlpcCreateResourceReserve (HANDLE PortHandle, ULONG Flags, SIZE_T MessageSize, PALPC_HANDLE ResourceId);\nNTSTATUS NtAlpcCreateSectionView (HANDLE PortHandle, ULONG Flags, PALPC_DATA_VIEW_ATTR ViewAttributes);\nNTSTATUS NtAlpcCreateSecurityContext (HANDLE PortHandle, ULONG Flags, PALPC_SECURITY_ATTR SecurityAttribute);\nNTSTATUS NtAlpcDeletePortSection (HANDLE PortHandle, ULONG Flags, ALPC_HANDLE SectionHandle);\nNTSTATUS NtAlpcDeleteResourceReserve (HANDLE PortHandle, ULONG Flags, ALPC_HANDLE ResourceId);\nNTSTATUS NtAlpcDeleteSectionView (HANDLE PortHandle, ULONG Flags, PVOID ViewBase);\nNTSTATUS NtAlpcDeleteSecurityContext (HANDLE PortHandle, ULONG Flags, ALPC_HANDLE ContextHandle);\nNTSTATUS NtAlpcDisconnectPort (HANDLE PortHandle, ULONG Flags);\nNTSTATUS NtAlpcImpersonateClientOfPort (HANDLE PortHandle, PPORT_MESSAGE PortMessage, PVOID Reserved);\nNTSTATUS NtAlpcOpenSenderProcess (PHANDLE ProcessHandle, HANDLE PortHandle, PPORT_MESSAGE PortMessage, ULONG Flags, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes);\nNTSTATUS NtAlpcOpenSenderThread (PHANDLE ThreadHandle, HANDLE PortHandle, PPORT_MESSAGE PortMessage, ULONG Flags, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes);\nNTSTATUS NtAlpcQueryInformation (HANDLE PortHandle, ALPC_PORT_INFORMATION_CLASS PortInformationClass, PVOID PortInformation, ULONG Length, PULONG ReturnLength);\nNTSTATUS NtAlpcQueryInformationMessage (HANDLE PortHandle, PPORT_MESSAGE PortMessage, ALPC_MESSAGE_INFORMATION_CLASS MessageInformationClass, PVOID MessageInformation, ULONG Length, PULONG ReturnLength);\nNTSTATUS NtAlpcRevokeSecurityContext (HANDLE PortHandle, ULONG Flags, ALPC_HANDLE ContextHandle);\nNTSTATUS NtAlpcSendWaitReceivePort (HANDLE PortHandle, ULONG Flags, PPORT_MESSAGE SendMessage, PALPC_MESSAGE_ATTRIBUTES SendMessageAttributes, PPORT_MESSAGE ReceiveMessage, PULONG BufferLength, PALPC_MESSAGE_ATTRIBUTES ReceiveMessageAttributes, PLARGE_INTEGER Timeout);\nNTSTATUS NtAlpcSetInformation (HANDLE PortHandle, ALPC_PORT_INFORMATION_CLASS PortInformationClass, PVOID PortInformation, ULONG Length);\nNTSTATUS NtApphelpCacheControl (APPHELPCOMMAND type, PVOID buf);\nNTSTATUS NtAreMappedFilesTheSame (PVOID File1MappedAsAnImage, PVOID File2MappedAsFile);\nNTSTATUS NtAssignProcessToJobObject (HANDLE JobHandle, HANDLE ProcessHandle);\nNTSTATUS NtCallbackReturn (PVOID OutputBuffer, ULONG OutputLength, NTSTATUS Status);\nNTSTATUS NtCancelIoFile (HANDLE FileHandle, PIO_STATUS_BLOCK IoStatusBlock);\nNTSTATUS NtCancelTimer (HANDLE TimerHandle, PBOOLEAN CurrentState);\nNTSTATUS NtClearEvent (HANDLE EventHandle);\nNTSTATUS NtClose (HANDLE Handle);\nNTSTATUS NtCloseObjectAuditAlarm (PUNICODE_STRING SubsystemName, PVOID HandleId, BOOLEAN GenerateOnClose);\nNTSTATUS NtCompactKeys (ULONG Count, HANDLE KeyArray[]);\nNTSTATUS NtCompareTokens (HANDLE FirstTokenHandle, HANDLE SecondTokenHandle, PBOOLEAN Equal);\nNTSTATUS NtCompleteConnectPort (HANDLE PortHandle);\nNTSTATUS NtCompressKey (HANDLE Key);\nNTSTATUS NtConnectPort (PHANDLE PortHandle, PUNICODE_STRING PortName, PSECURITY_QUALITY_OF_SERVICE SecurityQos, PPORT_VIEW ClientView, PREMOTE_PORT_VIEW ServerView, PULONG MaxMessageLength, PVOID ConnectionInformation, PULONG ConnectionInformationLength);\nNTSTATUS NtContinue (PCONTEXT ContextRecord, BOOLEAN TestAlert);\nNTSTATUS NtCreateDebugObject (PHANDLE DebugObjectHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, ULONG Flags);\nNTSTATUS NtCreateDirectoryObject (PHANDLE DirectoryHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes);\nNTSTATUS NtCreateEvent (PHANDLE EventHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, EVENT_TYPE EventType, BOOLEAN InitialState);\nNTSTATUS NtCreateEventPair (PHANDLE EventPairHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes);\nNTSTATUS NtCreateFile (PHANDLE FileHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, PIO_STATUS_BLOCK IoStatusBlock, PLARGE_INTEGER AllocationSize, ULONG FileAttributes, ULONG ShareAccess, ULONG CreateDisposition, ULONG CreateOptions, PVOID EaBuffer, ULONG EaLength);\nNTSTATUS NtCreateIoCompletion (PHANDLE IoCompletionHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, ULONG Count);\nNTSTATUS NtCreateJobObject (PHANDLE JobHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes);\nNTSTATUS NtCreateJobSet (ULONG NumJob, PJOB_SET_ARRAY UserJobSet, ULONG Flags);\nNTSTATUS NtCreateKey (PHANDLE KeyHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, ULONG TitleIndex, PUNICODE_STRING Class, ULONG CreateOptions, PULONG Disposition);\n```\n\n----------------------------------------\n\nTITLE: Windows NT Memory Management System Calls\nDESCRIPTION: System calls for managing virtual memory, physical pages, and memory operations including mapping, locking and freeing memory\nSOURCE: https://github.com/panda-re/panda-ng/blob/main/plugins/syscalls2/generated-in/windows_8sp0_x86_prototypes.txt#_snippet_5\n\nLANGUAGE: C\nCODE:\n```\nNTSTATUS NtMapUserPhysicalPagesScatter(PVOID *VirtualAddresses, ULONG_PTR NumberOfPages, PULONG_PTR UserPfnArray);\nNTSTATUS NtMapUserPhysicalPages(PVOID VirtualAddress, ULONG_PTR NumberOfPages, PULONG_PTR UserPfnArray);\nNTSTATUS NtLockVirtualMemory(HANDLE ProcessHandle, PVOID *BaseAddress, PSIZE_T RegionSize, ULONG MapType);\nNTSTATUS NtFreeVirtualMemory(HANDLE ProcessHandle, PVOID *BaseAddress, PSIZE_T RegionSize, ULONG FreeType);\n```\n\n----------------------------------------\n\nTITLE: Adding a Symbol Hook with PANDA Hooks Plugin (C)\nDESCRIPTION: Defines the API for registering symbol-specific hooks. Users supply a struct symbol_hook pointer, including candidate symbol and library names and a callback. The plugin calls this function so that whenever the named symbol is resolved (e.g., \"_Exit\" in \"libc\"), the registered callback is invoked for all programs. Requires PANDA, the Hooks plugin, and the dynamic_symbols dependency; filtering for unintended matches is up to the implementer via additional checks.\nSOURCE: https://github.com/panda-re/panda-ng/blob/main/plugins/hooks/README.md#_snippet_1\n\nLANGUAGE: c\nCODE:\n```\nvoid add_symbol_hook(struct symbol_hook*)\n```\n\n----------------------------------------\n\nTITLE: Worker Factory Management System Calls in C\nDESCRIPTION: Function declarations for managing Windows NT worker factory objects, including creation, release, querying and shutdown operations. These system calls handle worker thread pools and factory lifecycle management.\nSOURCE: https://github.com/panda-re/panda-ng/blob/main/plugins/syscalls2/generated-in/windows_vistasp12_x86_prototypes.txt#_snippet_5\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtReleaseWorkerFactoryWorker (HANDLE WorkerFactoryHandle);\nNTSTATUS NtWaitForWorkViaWorkerFactory (HANDLE WorkerFactoryHandle, PFILE_IO_COMPLETION_INFORMATION MiniPacket);\nNTSTATUS NtSetInformationWorkerFactory (HANDLE WorkerFactoryHandle, WORKERFACTORYINFOCLASS WorkerFactoryInformationClass, PVOID WorkerFactoryInformation, ULONG WorkerFactoryInformationLength);\nNTSTATUS NtQueryInformationWorkerFactory (HANDLE WorkerFactoryHandle, WORKERFACTORYINFOCLASS WorkerFactoryInformationClass, PVOID WorkerFactoryInformation, ULONG WorkerFactoryInformationLength, PULONG ReturnLength);\nNTSTATUS NtWorkerFactoryWorkerReady (HANDLE WorkerFactoryHandle);\nNTSTATUS NtShutdownWorkerFactory (HANDLE WorkerFactoryHandle, LONG *PendingWorkerCount);\n```\n\n----------------------------------------\n\nTITLE: Mapping Base Address Retrieval Callback in C\nDESCRIPTION: Callback function type definition for retrieving the base address of a mapping with a specified name.\nSOURCE: https://github.com/panda-re/panda-ng/blob/main/plugins/osi/README.md#_snippet_17\n\nLANGUAGE: C\nCODE:\n```\ntypedef void (*on_get_mapping_base_address_by_name_t)(CPUState *, OsiProc *, char *, target_ptr_t *)\n```\n\n----------------------------------------\n\nTITLE: Declaring NT Native System Call Prototypes using C\nDESCRIPTION: This snippet presents function prototypes for NT system calls using C, defining the exact signatures required to interface with the underlying Windows NT kernel. These declarations depend on types such as HANDLE, ACCESS_MASK, POBJECT_ATTRIBUTES, and NTSTATUS, typically sourced from Windows headers. The purpose is to allow linker or dynamic invocation of NT system calls not readily available in standard user-mode libraries. Input parameters vary by function and usually reference kernel objects and control flags, while all return NTSTATUS for error handling. The output is a collection of callable system routines. Usage is limited to implementations that have proper privileges, include the necessary NT structures, and link to ntdll or directly invoke system service routines.\nSOURCE: https://github.com/panda-re/panda-ng/blob/main/plugins/syscalls2/generated-in/windows_2003sp12_x64_prototypes.txt#_snippet_1\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtCreateEvent (PHANDLE EventHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, EVENT_TYPE EventType, BOOLEAN InitialState);\nNTSTATUS NtQueryVolumeInformationFile (HANDLE FileHandle, PIO_STATUS_BLOCK IoStatusBlock, PVOID FsInformation, ULONG Length, FS_INFORMATION_CLASS FsInformationClass);\nNTSTATUS NtCreateSection (PHANDLE SectionHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, PLARGE_INTEGER MaximumSize, ULONG SectionPageProtection, ULONG AllocationAttributes, HANDLE FileHandle);\nNTSTATUS NtFlushBuffersFile (HANDLE FileHandle, PIO_STATUS_BLOCK IoStatusBlock);\nNTSTATUS NtApphelpCacheControl (APPHELPCOMMAND type, PVOID buf);\nNTSTATUS NtCreateProcessEx (PHANDLE ProcessHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, HANDLE ParentProcess, ULONG Flags, HANDLE SectionHandle, HANDLE DebugPort, HANDLE ExceptionPort, ULONG JobMemberLevel);\nNTSTATUS NtCreateThread (PHANDLE ThreadHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, HANDLE ProcessHandle, PCLIENT_ID ClientId, PCONTEXT ThreadContext, PINITIAL_TEB InitialTeb, BOOLEAN CreateSuspended);\nNTSTATUS NtIsProcessInJob (HANDLE ProcessHandle, HANDLE JobHandle);\nNTSTATUS NtProtectVirtualMemory (HANDLE ProcessHandle, PVOID *BaseAddress, PSIZE_T RegionSize, WIN32_PROTECTION_MASK NewProtectWin32, PULONG OldProtect);\nNTSTATUS NtQuerySection (HANDLE SectionHandle, SECTION_INFORMATION_CLASS SectionInformationClass, PVOID SectionInformation, SIZE_T SectionInformationLength, PSIZE_T ReturnLength);\nNTSTATUS NtResumeThread (HANDLE ThreadHandle, PULONG PreviousSuspendCount);\nNTSTATUS NtTerminateThread (HANDLE ThreadHandle, NTSTATUS ExitStatus);\nNTSTATUS NtReadRequestData (HANDLE PortHandle, PPORT_MESSAGE Message, ULONG DataEntryIndex, PVOID Buffer, SIZE_T BufferSize, PSIZE_T NumberOfBytesRead);\nNTSTATUS NtCreateFile (PHANDLE FileHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, PIO_STATUS_BLOCK IoStatusBlock, PLARGE_INTEGER AllocationSize, ULONG FileAttributes, ULONG ShareAccess, ULONG CreateDisposition, ULONG CreateOptions, PVOID EaBuffer, ULONG EaLength);\nNTSTATUS NtQueryEvent (HANDLE EventHandle, EVENT_INFORMATION_CLASS EventInformationClass, PVOID EventInformation, ULONG EventInformationLength, PULONG ReturnLength);\nNTSTATUS NtWriteRequestData (HANDLE PortHandle, PPORT_MESSAGE Message, ULONG DataEntryIndex, PVOID Buffer, SIZE_T BufferSize, PSIZE_T NumberOfBytesWritten);\nNTSTATUS NtOpenDirectoryObject (PHANDLE DirectoryHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes);\nNTSTATUS NtAccessCheckByTypeAndAuditAlarm (PUNICODE_STRING SubsystemName, PVOID HandleId, PUNICODE_STRING ObjectTypeName, PUNICODE_STRING ObjectName, PSECURITY_DESCRIPTOR SecurityDescriptor, PSID PrincipalSelfSid, ACCESS_MASK DesiredAccess, AUDIT_EVENT_TYPE AuditType, ULONG Flags, POBJECT_TYPE_LIST ObjectTypeList, ULONG ObjectTypeListLength, PGENERIC_MAPPING GenericMapping, BOOLEAN ObjectCreation, PACCESS_MASK GrantedAccess, PNTSTATUS AccessStatus, PBOOLEAN GenerateOnClose);\nNTSTATUS NtQuerySystemTime (PLARGE_INTEGER SystemTime);\nNTSTATUS NtWaitForMultipleObjects (ULONG Count, HANDLE Handles[], WAIT_TYPE WaitType, BOOLEAN Alertable, PLARGE_INTEGER Timeout);\nNTSTATUS NtSetInformationObject (HANDLE Handle, OBJECT_INFORMATION_CLASS ObjectInformationClass, PVOID ObjectInformation, ULONG ObjectInformationLength);\nNTSTATUS NtCancelIoFile (HANDLE FileHandle, PIO_STATUS_BLOCK IoStatusBlock);\nNTSTATUS NtTraceEvent (HANDLE TraceHandle, ULONG Flags, ULONG FieldSize, PVOID Fields);\nNTSTATUS NtPowerInformation (POWER_INFORMATION_LEVEL InformationLevel, PVOID InputBuffer, ULONG InputBufferLength, PVOID OutputBuffer, ULONG OutputBufferLength);\nNTSTATUS NtSetValueKey (HANDLE KeyHandle, PUNICODE_STRING ValueName, ULONG TitleIndex, ULONG Type, PVOID Data, ULONG DataSize);\nNTSTATUS NtCancelTimer (HANDLE TimerHandle, PBOOLEAN CurrentState);\nNTSTATUS NtSetTimer (HANDLE TimerHandle, PLARGE_INTEGER DueTime, PTIMER_APC_ROUTINE TimerApcRoutine, PVOID TimerContext, BOOLEAN WakeTimer, LONG Period, PBOOLEAN PreviousState);\nNTSTATUS NtAcceptConnectPort (PHANDLE PortHandle, PVOID PortContext, PPORT_MESSAGE ConnectionRequest, BOOLEAN AcceptConnection, PPORT_VIEW ServerView, PREMOTE_PORT_VIEW ClientView);\nNTSTATUS NtAccessCheck (PSECURITY_DESCRIPTOR SecurityDescriptor, HANDLE ClientToken, ACCESS_MASK DesiredAccess, PGENERIC_MAPPING GenericMapping, PPRIVILEGE_SET PrivilegeSet, PULONG PrivilegeSetLength, PACCESS_MASK GrantedAccess, PNTSTATUS AccessStatus);\nNTSTATUS NtAccessCheckByType (PSECURITY_DESCRIPTOR SecurityDescriptor, PSID PrincipalSelfSid, HANDLE ClientToken, ACCESS_MASK DesiredAccess, POBJECT_TYPE_LIST ObjectTypeList, ULONG ObjectTypeListLength, PGENERIC_MAPPING GenericMapping, PPRIVILEGE_SET PrivilegeSet, PULONG PrivilegeSetLength, PACCESS_MASK GrantedAccess, PNTSTATUS AccessStatus);\nNTSTATUS NtAccessCheckByTypeResultList (PSECURITY_DESCRIPTOR SecurityDescriptor, PSID PrincipalSelfSid, HANDLE ClientToken, ACCESS_MASK DesiredAccess, POBJECT_TYPE_LIST ObjectTypeList, ULONG ObjectTypeListLength, PGENERIC_MAPPING GenericMapping, PPRIVILEGE_SET PrivilegeSet, PULONG PrivilegeSetLength, PACCESS_MASK GrantedAccess, PNTSTATUS AccessStatus);\nNTSTATUS NtAccessCheckByTypeResultListAndAuditAlarm (PUNICODE_STRING SubsystemName, PVOID HandleId, PUNICODE_STRING ObjectTypeName, PUNICODE_STRING ObjectName, PSECURITY_DESCRIPTOR SecurityDescriptor, PSID PrincipalSelfSid, ACCESS_MASK DesiredAccess, AUDIT_EVENT_TYPE AuditType, ULONG Flags, POBJECT_TYPE_LIST ObjectTypeList, ULONG ObjectTypeListLength, PGENERIC_MAPPING GenericMapping, BOOLEAN ObjectCreation, PACCESS_MASK GrantedAccess, PNTSTATUS AccessStatus, PBOOLEAN GenerateOnClose);\nNTSTATUS NtAccessCheckByTypeResultListAndAuditAlarmByHandle (PUNICODE_STRING SubsystemName, PVOID HandleId, HANDLE ClientToken, PUNICODE_STRING ObjectTypeName, PUNICODE_STRING ObjectName, PSECURITY_DESCRIPTOR SecurityDescriptor, PSID PrincipalSelfSid, ACCESS_MASK DesiredAccess, AUDIT_EVENT_TYPE AuditType, ULONG Flags, POBJECT_TYPE_LIST ObjectTypeList, ULONG ObjectTypeListLength, PGENERIC_MAPPING GenericMapping, BOOLEAN ObjectCreation, PACCESS_MASK GrantedAccess, PNTSTATUS AccessStatus, PBOOLEAN GenerateOnClose);\nNTSTATUS NtAddBootEntry (PBOOT_ENTRY BootEntry, PULONG Id);\nNTSTATUS NtAddDriverEntry (PEFI_DRIVER_ENTRY DriverEntry, PULONG Id);\nNTSTATUS NtAdjustGroupsToken (HANDLE TokenHandle, BOOLEAN ResetToDefault, PTOKEN_GROUPS NewState, ULONG BufferLength, PTOKEN_GROUPS PreviousState, PULONG ReturnLength);\nNTSTATUS NtAlertResumeThread (HANDLE ThreadHandle, PULONG PreviousSuspendCount);\nNTSTATUS NtAlertThread (HANDLE ThreadHandle);\nNTSTATUS NtAllocateLocallyUniqueId (PLUID Luid);\nNTSTATUS NtAllocateUserPhysicalPages (HANDLE ProcessHandle, PULONG_PTR NumberOfPages, PULONG_PTR UserPfnArray);\nNTSTATUS NtAllocateUuids (PULARGE_INTEGER Time, PULONG Range, PULONG Sequence, PCHAR Seed);\nNTSTATUS NtAreMappedFilesTheSame (PVOID File1MappedAsAnImage, PVOID File2MappedAsFile);\nNTSTATUS NtAssignProcessToJobObject (HANDLE JobHandle, HANDLE ProcessHandle);\nNTSTATUS NtCompactKeys (ULONG Count, HANDLE KeyArray[]);\nNTSTATUS NtCompareTokens (HANDLE FirstTokenHandle, HANDLE SecondTokenHandle, PBOOLEAN Equal);\nNTSTATUS NtCompleteConnectPort (HANDLE PortHandle);\nNTSTATUS NtCompressKey (HANDLE Key);\nNTSTATUS NtConnectPort (PHANDLE PortHandle, PUNICODE_STRING PortName, PSECURITY_QUALITY_OF_SERVICE SecurityQos, PPORT_VIEW ClientView, PREMOTE_PORT_VIEW ServerView, PULONG MaxMessageLength, PVOID ConnectionInformation, PULONG ConnectionInformationLength);\nNTSTATUS NtCreateDebugObject (PHANDLE DebugObjectHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, ULONG Flags);\nNTSTATUS NtCreateDirectoryObject (PHANDLE DirectoryHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes);\nNTSTATUS NtCreateEventPair (PHANDLE EventPairHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes);\nNTSTATUS NtCreateIoCompletion (PHANDLE IoCompletionHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, ULONG Count);\nNTSTATUS NtCreateJobObject (PHANDLE JobHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes);\nNTSTATUS NtCreateJobSet (ULONG NumJob, PJOB_SET_ARRAY UserJobSet, ULONG Flags);\nNTSTATUS NtCreateKeyedEvent (PHANDLE KeyedEventHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, ULONG Flags);\nNTSTATUS NtCreateMailslotFile (PHANDLE FileHandle, ULONG DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, PIO_STATUS_BLOCK IoStatusBlock, ULONG CreateOptions, ULONG MailslotQuota, ULONG MaximumMessageSize, PLARGE_INTEGER ReadTimeout);\nNTSTATUS NtCreateMutant (PHANDLE MutantHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, BOOLEAN InitialOwner);\nNTSTATUS NtCreateNamedPipeFile (PHANDLE FileHandle, ULONG DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, PIO_STATUS_BLOCK IoStatusBlock, ULONG ShareAccess, ULONG CreateDisposition, ULONG CreateOptions, ULONG NamedPipeType, ULONG ReadMode, ULONG CompletionMode, ULONG MaximumInstances, ULONG InboundQuota, ULONG OutboundQuota, PLARGE_INTEGER DefaultTimeout);\nNTSTATUS NtCreatePagingFile (PUNICODE_STRING PageFileName, PLARGE_INTEGER MinimumSize, PLARGE_INTEGER MaximumSize, ULONG Priority);\nNTSTATUS NtCreatePort (PHANDLE PortHandle, POBJECT_ATTRIBUTES ObjectAttributes, ULONG MaxConnectionInfoLength, ULONG MaxMessageLength, ULONG MaxPoolUsage);\nNTSTATUS NtCreateProcess (PHANDLE ProcessHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, HANDLE ParentProcess, BOOLEAN InheritObjectTable, HANDLE SectionHandle, HANDLE DebugPort, HANDLE ExceptionPort);\n```\n\n----------------------------------------\n\nTITLE: Running OSI-Linux with Specific Kernel Group and OS Settings (bash)\nDESCRIPTION: Demonstrates invoking PANDA with the osi, osi_linux, and osi_test plugins for a particular Ubuntu kernel, disabling address space layout randomization and using user mode for test output. Inputs include a replay, kernel group, and plugin configuration. Output is result logs (ositest.txt) containing OSI-Linux introspection data.\nSOURCE: https://github.com/panda-re/panda-ng/blob/main/plugins/osi_linux/README.md#_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\n$PANDA_PATH/x86_64-softmmu/panda-system-x86_64 \\\n-m 4096 -replay foo -panda osi\\\n-panda osi_linux:kconf_group=ubuntu:5.3.0-28-generic:64 \\\n-os linux-64-ubuntu -panda osi_test > ositest.txt\n```\n\n----------------------------------------\n\nTITLE: Process Information Retrieval Callback in C\nDESCRIPTION: Callback function type definition for retrieving full process information from a process handle. Returns an allocated OsiProc struct.\nSOURCE: https://github.com/panda-re/panda-ng/blob/main/plugins/osi/README.md#_snippet_7\n\nLANGUAGE: C\nCODE:\n```\ntypedef void (*on_get_process_t)(CPUState *, OsiProcHandle *, OsiProc **)\n```\n\n----------------------------------------\n\nTITLE: Task Change Notification Function in C\nDESCRIPTION: Function to notify registered callbacks about task changes in the guest OS.\nSOURCE: https://github.com/panda-re/panda-ng/blob/main/plugins/osi/README.md#_snippet_19\n\nLANGUAGE: C\nCODE:\n```\nvoid notify_task_change(CPUState *)\n```\n\n----------------------------------------\n\nTITLE: Defining NT Native System Call Prototypes in C\nDESCRIPTION: Declares function prototypes for various Windows NT Native API (Nt*) calls, facilitating direct system-level programming in user-mode or kernel-mode Windows components. The only dependency is appropriate inclusion of Windows NT-specific headers for type definitions such as NTSTATUS, HANDLE, and others. Function parameters describe objects such as handles, buffers, access masks, lengths, and context-specific structures, while the return type indicates the operation result. These prototypes are for definition only; implementation or invocation requires corresponding system facilities and privileges.\nSOURCE: https://github.com/panda-re/panda-ng/blob/main/plugins/syscalls2/generated-in/windows_2003sp12_x64_prototypes.txt#_snippet_0\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtMapUserPhysicalPagesScatter (PVOID *VirtualAddresses, ULONG_PTR NumberOfPages, PULONG_PTR UserPfnArray);\nNTSTATUS NtWaitForSingleObject (HANDLE Handle, BOOLEAN Alertable, PLARGE_INTEGER Timeout);\nNTSTATUS NtCallbackReturn (PVOID OutputBuffer, ULONG OutputLength, NTSTATUS Status);\nNTSTATUS NtReadFile (HANDLE FileHandle, HANDLE Event, PIO_APC_ROUTINE ApcRoutine, PVOID ApcContext, PIO_STATUS_BLOCK IoStatusBlock, PVOID Buffer, ULONG Length, PLARGE_INTEGER ByteOffset, PULONG Key);\nNTSTATUS NtDeviceIoControlFile (HANDLE FileHandle, HANDLE Event, PIO_APC_ROUTINE ApcRoutine, PVOID ApcContext, PIO_STATUS_BLOCK IoStatusBlock, ULONG IoControlCode, PVOID InputBuffer, ULONG InputBufferLength, PVOID OutputBuffer, ULONG OutputBufferLength);\nNTSTATUS NtWriteFile (HANDLE FileHandle, HANDLE Event, PIO_APC_ROUTINE ApcRoutine, PVOID ApcContext, PIO_STATUS_BLOCK IoStatusBlock, PVOID Buffer, ULONG Length, PLARGE_INTEGER ByteOffset, PULONG Key);\nNTSTATUS NtRemoveIoCompletion (HANDLE IoCompletionHandle, PVOID *KeyContext, PVOID *ApcContext, PIO_STATUS_BLOCK IoStatusBlock, PLARGE_INTEGER Timeout);\nNTSTATUS NtReleaseSemaphore (HANDLE SemaphoreHandle, LONG ReleaseCount, PLONG PreviousCount);\nNTSTATUS NtReplyWaitReceivePort (HANDLE PortHandle, PVOID *PortContext , PPORT_MESSAGE ReplyMessage, PPORT_MESSAGE ReceiveMessage);\nNTSTATUS NtReplyPort (HANDLE PortHandle, PPORT_MESSAGE ReplyMessage);\nNTSTATUS NtSetInformationThread (HANDLE ThreadHandle, THREADINFOCLASS ThreadInformationClass, PVOID ThreadInformation, ULONG ThreadInformationLength);\nNTSTATUS NtSetEvent (HANDLE EventHandle, PLONG PreviousState);\nNTSTATUS NtClose (HANDLE Handle);\nNTSTATUS NtQueryObject (HANDLE Handle, OBJECT_INFORMATION_CLASS ObjectInformationClass, PVOID ObjectInformation, ULONG ObjectInformationLength, PULONG ReturnLength);\nNTSTATUS NtQueryInformationFile (HANDLE FileHandle, PIO_STATUS_BLOCK IoStatusBlock, PVOID FileInformation, ULONG Length, FILE_INFORMATION_CLASS FileInformationClass);\nNTSTATUS NtOpenKey (PHANDLE KeyHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes);\nNTSTATUS NtEnumerateValueKey (HANDLE KeyHandle, ULONG Index, KEY_VALUE_INFORMATION_CLASS KeyValueInformationClass, PVOID KeyValueInformation, ULONG Length, PULONG ResultLength);\nNTSTATUS NtFindAtom (PWSTR AtomName, ULONG Length, PRTL_ATOM Atom);\nNTSTATUS NtQueryDefaultLocale (BOOLEAN UserProfile, PLCID DefaultLocaleId);\nNTSTATUS NtQueryKey (HANDLE KeyHandle, KEY_INFORMATION_CLASS KeyInformationClass, PVOID KeyInformation, ULONG Length, PULONG ResultLength);\nNTSTATUS NtQueryValueKey (HANDLE KeyHandle, PUNICODE_STRING ValueName, KEY_VALUE_INFORMATION_CLASS KeyValueInformationClass, PVOID KeyValueInformation, ULONG Length, PULONG ResultLength);\nNTSTATUS NtAllocateVirtualMemory (HANDLE ProcessHandle, PVOID *BaseAddress, ULONG_PTR ZeroBits, PSIZE_T RegionSize, ULONG AllocationType, ULONG Protect);\nNTSTATUS NtQueryInformationProcess (HANDLE ProcessHandle, PROCESSINFOCLASS ProcessInformationClass, PVOID ProcessInformation, ULONG ProcessInformationLength, PULONG ReturnLength);\nNTSTATUS NtWaitForMultipleObjects32 (ULONG Count, LONG Handles[], WAIT_TYPE WaitType, BOOLEAN Alertable, PLARGE_INTEGER Timeout);\nNTSTATUS NtWriteFileGather (HANDLE FileHandle, HANDLE Event, PIO_APC_ROUTINE ApcRoutine, PVOID ApcContext, PIO_STATUS_BLOCK IoStatusBlock, PFILE_SEGMENT_ELEMENT SegmentArray, ULONG Length, PLARGE_INTEGER ByteOffset, PULONG Key);\nNTSTATUS NtSetInformationProcess (HANDLE ProcessHandle, PROCESSINFOCLASS ProcessInformationClass, PVOID ProcessInformation, ULONG ProcessInformationLength);\nNTSTATUS NtCreateKey (PHANDLE KeyHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, ULONG TitleIndex, PUNICODE_STRING Class, ULONG CreateOptions, PULONG Disposition);\nNTSTATUS NtFreeVirtualMemory (HANDLE ProcessHandle, PVOID *BaseAddress, PSIZE_T RegionSize, ULONG FreeType);\nNTSTATUS NtImpersonateClientOfPort (HANDLE PortHandle, PPORT_MESSAGE Message);\nNTSTATUS NtReleaseMutant (HANDLE MutantHandle, PLONG PreviousCount);\nNTSTATUS NtQueryInformationToken (HANDLE TokenHandle, TOKEN_INFORMATION_CLASS TokenInformationClass, PVOID TokenInformation, ULONG TokenInformationLength, PULONG ReturnLength);\nNTSTATUS NtRequestWaitReplyPort (HANDLE PortHandle, PPORT_MESSAGE RequestMessage, PPORT_MESSAGE ReplyMessage);\nNTSTATUS NtQueryVirtualMemory (HANDLE ProcessHandle, PVOID BaseAddress, MEMORY_INFORMATION_CLASS MemoryInformationClass, PVOID MemoryInformation, SIZE_T MemoryInformationLength, PSIZE_T ReturnLength);\nNTSTATUS NtOpenThreadToken (HANDLE ThreadHandle, ACCESS_MASK DesiredAccess, BOOLEAN OpenAsSelf, PHANDLE TokenHandle);\nNTSTATUS NtQueryInformationThread (HANDLE ThreadHandle, THREADINFOCLASS ThreadInformationClass, PVOID ThreadInformation, ULONG ThreadInformationLength, PULONG ReturnLength);\nNTSTATUS NtOpenProcess (PHANDLE ProcessHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, PCLIENT_ID ClientId);\nNTSTATUS NtSetInformationFile (HANDLE FileHandle, PIO_STATUS_BLOCK IoStatusBlock, PVOID FileInformation, ULONG Length, FILE_INFORMATION_CLASS FileInformationClass);\nNTSTATUS NtMapViewOfSection (HANDLE SectionHandle, HANDLE ProcessHandle, PVOID *BaseAddress, ULONG_PTR ZeroBits, SIZE_T CommitSize, PLARGE_INTEGER SectionOffset, PSIZE_T ViewSize, SECTION_INHERIT InheritDisposition, ULONG AllocationType, WIN32_PROTECTION_MASK Win32Protect);\nNTSTATUS NtAccessCheckAndAuditAlarm (PUNICODE_STRING SubsystemName, PVOID HandleId, PUNICODE_STRING ObjectTypeName, PUNICODE_STRING ObjectName, PSECURITY_DESCRIPTOR SecurityDescriptor, ACCESS_MASK DesiredAccess, PGENERIC_MAPPING GenericMapping, BOOLEAN ObjectCreation, PACCESS_MASK GrantedAccess, PNTSTATUS AccessStatus, PBOOLEAN GenerateOnClose);\nNTSTATUS NtUnmapViewOfSection (HANDLE ProcessHandle, PVOID BaseAddress);\nNTSTATUS NtReplyWaitReceivePortEx (HANDLE PortHandle, PVOID *PortContext, PPORT_MESSAGE ReplyMessage, PPORT_MESSAGE ReceiveMessage, PLARGE_INTEGER Timeout);\nNTSTATUS NtTerminateProcess (HANDLE ProcessHandle, NTSTATUS ExitStatus);\nNTSTATUS NtSetEventBoostPriority (HANDLE EventHandle);\nNTSTATUS NtReadFileScatter (HANDLE FileHandle, HANDLE Event, PIO_APC_ROUTINE ApcRoutine, PVOID ApcContext, PIO_STATUS_BLOCK IoStatusBlock, PFILE_SEGMENT_ELEMENT SegmentArray, ULONG Length, PLARGE_INTEGER ByteOffset, PULONG Key);\nNTSTATUS NtOpenThreadTokenEx (HANDLE ThreadHandle, ACCESS_MASK DesiredAccess, BOOLEAN OpenAsSelf, ULONG HandleAttributes, PHANDLE TokenHandle);\nNTSTATUS NtOpenProcessTokenEx (HANDLE ProcessHandle, ACCESS_MASK DesiredAccess, ULONG HandleAttributes, PHANDLE TokenHandle);\nNTSTATUS NtQueryPerformanceCounter (PLARGE_INTEGER PerformanceCounter, PLARGE_INTEGER PerformanceFrequency);\nNTSTATUS NtEnumerateKey (HANDLE KeyHandle, ULONG Index, KEY_INFORMATION_CLASS KeyInformationClass, PVOID KeyInformation, ULONG Length, PULONG ResultLength);\nNTSTATUS NtOpenFile (PHANDLE FileHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, PIO_STATUS_BLOCK IoStatusBlock, ULONG ShareAccess, ULONG OpenOptions);\nNTSTATUS NtDelayExecution (BOOLEAN Alertable, PLARGE_INTEGER DelayInterval);\nNTSTATUS NtQueryDirectoryFile (HANDLE FileHandle, HANDLE Event, PIO_APC_ROUTINE ApcRoutine, PVOID ApcContext, PIO_STATUS_BLOCK IoStatusBlock, PVOID FileInformation, ULONG Length, FILE_INFORMATION_CLASS FileInformationClass, BOOLEAN ReturnSingleEntry, PUNICODE_STRING FileName, BOOLEAN RestartScan);\nNTSTATUS NtQuerySystemInformation (SYSTEM_INFORMATION_CLASS SystemInformationClass, PVOID SystemInformation, ULONG SystemInformationLength, PULONG ReturnLength);\nNTSTATUS NtOpenSection (PHANDLE SectionHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes);\nNTSTATUS NtQueryTimer (HANDLE TimerHandle, TIMER_INFORMATION_CLASS TimerInformationClass, PVOID TimerInformation, ULONG TimerInformationLength, PULONG ReturnLength);\nNTSTATUS NtFsControlFile (HANDLE FileHandle, HANDLE Event, PIO_APC_ROUTINE ApcRoutine, PVOID ApcContext, PIO_STATUS_BLOCK IoStatusBlock, ULONG IoControlCode, PVOID InputBuffer, ULONG InputBufferLength, PVOID OutputBuffer, ULONG OutputBufferLength);\nNTSTATUS NtWriteVirtualMemory (HANDLE ProcessHandle, PVOID BaseAddress, PVOID Buffer, SIZE_T BufferSize, PSIZE_T NumberOfBytesWritten);\nNTSTATUS NtCloseObjectAuditAlarm (PUNICODE_STRING SubsystemName, PVOID HandleId, BOOLEAN GenerateOnClose);\nNTSTATUS NtDuplicateObject (HANDLE SourceProcessHandle, HANDLE SourceHandle, HANDLE TargetProcessHandle, PHANDLE TargetHandle, ACCESS_MASK DesiredAccess, ULONG HandleAttributes, ULONG Options);\nNTSTATUS NtQueryAttributesFile (POBJECT_ATTRIBUTES ObjectAttributes, PFILE_BASIC_INFORMATION FileInformation);\nNTSTATUS NtClearEvent (HANDLE EventHandle);\nNTSTATUS NtReadVirtualMemory (HANDLE ProcessHandle, PVOID BaseAddress, PVOID Buffer, SIZE_T BufferSize, PSIZE_T NumberOfBytesRead);\nNTSTATUS NtOpenEvent (PHANDLE EventHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes);\nNTSTATUS NtAdjustPrivilegesToken (HANDLE TokenHandle, BOOLEAN DisableAllPrivileges, PTOKEN_PRIVILEGES NewState, ULONG BufferLength, PTOKEN_PRIVILEGES PreviousState, PULONG ReturnLength);\nNTSTATUS NtDuplicateToken (HANDLE ExistingTokenHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, BOOLEAN EffectiveOnly, TOKEN_TYPE TokenType, PHANDLE NewTokenHandle);\nNTSTATUS NtContinue (PCONTEXT ContextRecord, BOOLEAN TestAlert);\nNTSTATUS NtQueryDefaultUILanguage (LANGID *DefaultUILanguageId);\nNTSTATUS NtQueueApcThread (HANDLE ThreadHandle, PPS_APC_ROUTINE ApcRoutine, PVOID ApcArgument1, PVOID ApcArgument2, PVOID ApcArgument3);\nNTSTATUS NtYieldExecution ();\nNTSTATUS NtAddAtom (PWSTR AtomName, ULONG Length, PRTL_ATOM Atom);\n```\n\n----------------------------------------\n\nTITLE: Declaring Windows NT Native API System Call Prototypes in C/C++\nDESCRIPTION: Declares a comprehensive set of Windows NT Native API system calls as function prototypes using C/C++ syntax. The declarations enable use of low-level OS services—such as process and thread management, security access, file operations, and memory allocation—bypassing higher-level Win32 APIs. Required dependencies include Windows-specific type definitions (e.g., NTSTATUS, HANDLE, PUNICODE_STRING, etc.), often requiring inclusion of <windows.h>, <ntdef.h>, or equivalent headers. All functions follow a consistent pattern: they return NTSTATUS codes, use pointers for output values, and frequently operate on kernel objects or security structures. Inputs and outputs are strictly typed, making these declarations suitable for system-level development, driver creation, or emulation environments. Limitations include platform restriction (Windows NT family) and expectation of proper privilege levels for many operations.\nSOURCE: https://github.com/panda-re/panda-ng/blob/main/plugins/syscalls2/generated-in/windows_2003sp12_x86_prototypes.txt#_snippet_0\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtAcceptConnectPort (PHANDLE PortHandle, PVOID PortContext, PPORT_MESSAGE ConnectionRequest, BOOLEAN AcceptConnection, PPORT_VIEW ServerView, PREMOTE_PORT_VIEW ClientView);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtAccessCheck (PSECURITY_DESCRIPTOR SecurityDescriptor, HANDLE ClientToken, ACCESS_MASK DesiredAccess, PGENERIC_MAPPING GenericMapping, PPRIVILEGE_SET PrivilegeSet, PULONG PrivilegeSetLength, PACCESS_MASK GrantedAccess, PNTSTATUS AccessStatus);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtAccessCheckAndAuditAlarm (PUNICODE_STRING SubsystemName, PVOID HandleId, PUNICODE_STRING ObjectTypeName, PUNICODE_STRING ObjectName, PSECURITY_DESCRIPTOR SecurityDescriptor, ACCESS_MASK DesiredAccess, PGENERIC_MAPPING GenericMapping, BOOLEAN ObjectCreation, PACCESS_MASK GrantedAccess, PNTSTATUS AccessStatus, PBOOLEAN GenerateOnClose);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtAccessCheckByType (PSECURITY_DESCRIPTOR SecurityDescriptor, PSID PrincipalSelfSid, HANDLE ClientToken, ACCESS_MASK DesiredAccess, POBJECT_TYPE_LIST ObjectTypeList, ULONG ObjectTypeListLength, PGENERIC_MAPPING GenericMapping, PPRIVILEGE_SET PrivilegeSet, PULONG PrivilegeSetLength, PACCESS_MASK GrantedAccess, PNTSTATUS AccessStatus);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtAccessCheckByTypeAndAuditAlarm (PUNICODE_STRING SubsystemName, PVOID HandleId, PUNICODE_STRING ObjectTypeName, PUNICODE_STRING ObjectName, PSECURITY_DESCRIPTOR SecurityDescriptor, PSID PrincipalSelfSid, ACCESS_MASK DesiredAccess, AUDIT_EVENT_TYPE AuditType, ULONG Flags, POBJECT_TYPE_LIST ObjectTypeList, ULONG ObjectTypeListLength, PGENERIC_MAPPING GenericMapping, BOOLEAN ObjectCreation, PACCESS_MASK GrantedAccess, PNTSTATUS AccessStatus, PBOOLEAN GenerateOnClose);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtAccessCheckByTypeResultList (PSECURITY_DESCRIPTOR SecurityDescriptor, PSID PrincipalSelfSid, HANDLE ClientToken, ACCESS_MASK DesiredAccess, POBJECT_TYPE_LIST ObjectTypeList, ULONG ObjectTypeListLength, PGENERIC_MAPPING GenericMapping, PPRIVILEGE_SET PrivilegeSet, PULONG PrivilegeSetLength, PACCESS_MASK GrantedAccess, PNTSTATUS AccessStatus);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtAccessCheckByTypeResultListAndAuditAlarm (PUNICODE_STRING SubsystemName, PVOID HandleId, PUNICODE_STRING ObjectTypeName, PUNICODE_STRING ObjectName, PSECURITY_DESCRIPTOR SecurityDescriptor, PSID PrincipalSelfSid, ACCESS_MASK DesiredAccess, AUDIT_EVENT_TYPE AuditType, ULONG Flags, POBJECT_TYPE_LIST ObjectTypeList, ULONG ObjectTypeListLength, PGENERIC_MAPPING GenericMapping, BOOLEAN ObjectCreation, PACCESS_MASK GrantedAccess, PNTSTATUS AccessStatus, PBOOLEAN GenerateOnClose);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtAccessCheckByTypeResultListAndAuditAlarmByHandle (PUNICODE_STRING SubsystemName, PVOID HandleId, HANDLE ClientToken, PUNICODE_STRING ObjectTypeName, PUNICODE_STRING ObjectName, PSECURITY_DESCRIPTOR SecurityDescriptor, PSID PrincipalSelfSid, ACCESS_MASK DesiredAccess, AUDIT_EVENT_TYPE AuditType, ULONG Flags, POBJECT_TYPE_LIST ObjectTypeList, ULONG ObjectTypeListLength, PGENERIC_MAPPING GenericMapping, BOOLEAN ObjectCreation, PACCESS_MASK GrantedAccess, PNTSTATUS AccessStatus, PBOOLEAN GenerateOnClose);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtAddAtom (PWSTR AtomName, ULONG Length, PRTL_ATOM Atom);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtAddBootEntry (PBOOT_ENTRY BootEntry, PULONG Id);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtAddDriverEntry (PEFI_DRIVER_ENTRY DriverEntry, PULONG Id);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtAdjustGroupsToken (HANDLE TokenHandle, BOOLEAN ResetToDefault, PTOKEN_GROUPS NewState, ULONG BufferLength, PTOKEN_GROUPS PreviousState, PULONG ReturnLength);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtAdjustPrivilegesToken (HANDLE TokenHandle, BOOLEAN DisableAllPrivileges, PTOKEN_PRIVILEGES NewState, ULONG BufferLength, PTOKEN_PRIVILEGES PreviousState, PULONG ReturnLength);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtAlertResumeThread (HANDLE ThreadHandle, PULONG PreviousSuspendCount);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtAlertThread (HANDLE ThreadHandle);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtAllocateLocallyUniqueId (PLUID Luid);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtAllocateUserPhysicalPages (HANDLE ProcessHandle, PULONG_PTR NumberOfPages, PULONG_PTR UserPfnArray);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtAllocateUuids (PULARGE_INTEGER Time, PULONG Range, PULONG Sequence, PCHAR Seed);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtAllocateVirtualMemory (HANDLE ProcessHandle, PVOID *BaseAddress, ULONG_PTR ZeroBits, PSIZE_T RegionSize, ULONG AllocationType, ULONG Protect);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtApphelpCacheControl (APPHELPCOMMAND type, PVOID buf);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtAreMappedFilesTheSame (PVOID File1MappedAsAnImage, PVOID File2MappedAsFile);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtAssignProcessToJobObject (HANDLE JobHandle, HANDLE ProcessHandle);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtCallbackReturn (PVOID OutputBuffer, ULONG OutputLength, NTSTATUS Status);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtCancelIoFile (HANDLE FileHandle, PIO_STATUS_BLOCK IoStatusBlock);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtCancelTimer (HANDLE TimerHandle, PBOOLEAN CurrentState);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtClearEvent (HANDLE EventHandle);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtClose (HANDLE Handle);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtCloseObjectAuditAlarm (PUNICODE_STRING SubsystemName, PVOID HandleId, BOOLEAN GenerateOnClose);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtCompactKeys (ULONG Count, HANDLE KeyArray[]);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtCompareTokens (HANDLE FirstTokenHandle, HANDLE SecondTokenHandle, PBOOLEAN Equal);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtCompleteConnectPort (HANDLE PortHandle);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtCompressKey (HANDLE Key);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtConnectPort (PHANDLE PortHandle, PUNICODE_STRING PortName, PSECURITY_QUALITY_OF_SERVICE SecurityQos, PPORT_VIEW ClientView, PREMOTE_PORT_VIEW ServerView, PULONG MaxMessageLength, PVOID ConnectionInformation, PULONG ConnectionInformationLength);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtContinue (PCONTEXT ContextRecord, BOOLEAN TestAlert);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtCreateDebugObject (PHANDLE DebugObjectHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, ULONG Flags);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtCreateDirectoryObject (PHANDLE DirectoryHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtCreateEvent (PHANDLE EventHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, EVENT_TYPE EventType, BOOLEAN InitialState);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtCreateEventPair (PHANDLE EventPairHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtCreateFile (PHANDLE FileHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, PIO_STATUS_BLOCK IoStatusBlock, PLARGE_INTEGER AllocationSize, ULONG FileAttributes, ULONG ShareAccess, ULONG CreateDisposition, ULONG CreateOptions, PVOID EaBuffer, ULONG EaLength);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtCreateIoCompletion (PHANDLE IoCompletionHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, ULONG Count);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtCreateJobObject (PHANDLE JobHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtCreateJobSet (ULONG NumJob, PJOB_SET_ARRAY UserJobSet, ULONG Flags);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtCreateKey (PHANDLE KeyHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, ULONG TitleIndex, PUNICODE_STRING Class, ULONG CreateOptions, PULONG Disposition);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtCreateMailslotFile (PHANDLE FileHandle, ULONG DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, PIO_STATUS_BLOCK IoStatusBlock, ULONG CreateOptions, ULONG MailslotQuota, ULONG MaximumMessageSize, PLARGE_INTEGER ReadTimeout);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtCreateMutant (PHANDLE MutantHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, BOOLEAN InitialOwner);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtCreateNamedPipeFile (PHANDLE FileHandle, ULONG DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, PIO_STATUS_BLOCK IoStatusBlock, ULONG ShareAccess, ULONG CreateDisposition, ULONG CreateOptions, ULONG NamedPipeType, ULONG ReadMode, ULONG CompletionMode, ULONG MaximumInstances, ULONG InboundQuota, ULONG OutboundQuota, PLARGE_INTEGER DefaultTimeout);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtCreatePagingFile (PUNICODE_STRING PageFileName, PLARGE_INTEGER MinimumSize, PLARGE_INTEGER MaximumSize, ULONG Priority);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtCreatePort (PHANDLE PortHandle, POBJECT_ATTRIBUTES ObjectAttributes, ULONG MaxConnectionInfoLength, ULONG MaxMessageLength, ULONG MaxPoolUsage);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtCreateProcess (PHANDLE ProcessHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, HANDLE ParentProcess, BOOLEAN InheritObjectTable, HANDLE SectionHandle, HANDLE DebugPort, HANDLE ExceptionPort);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtCreateProcessEx (PHANDLE ProcessHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, HANDLE ParentProcess, ULONG Flags, HANDLE SectionHandle, HANDLE DebugPort, HANDLE ExceptionPort, ULONG JobMemberLevel);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtCreateProfile (PHANDLE ProfileHandle, HANDLE Process, PVOID RangeBase, SIZE_T RangeSize, ULONG BucketSize, PULONG Buffer, ULONG BufferSize, KPROFILE_SOURCE ProfileSource, KAFFINITY Affinity);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtCreateSection (PHANDLE SectionHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, PLARGE_INTEGER MaximumSize, ULONG SectionPageProtection, ULONG AllocationAttributes, HANDLE FileHandle);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtCreateSemaphore (PHANDLE SemaphoreHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, LONG InitialCount, LONG MaximumCount);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtCreateSymbolicLinkObject (PHANDLE LinkHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, PUNICODE_STRING LinkTarget);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtCreateThread (PHANDLE ThreadHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, HANDLE ProcessHandle, PCLIENT_ID ClientId, PCONTEXT ThreadContext, PINITIAL_TEB InitialTeb, BOOLEAN CreateSuspended);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtCreateTimer (PHANDLE TimerHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, TIMER_TYPE TimerType);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtCreateToken (PHANDLE TokenHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, TOKEN_TYPE TokenType, PLUID AuthenticationId, PLARGE_INTEGER ExpirationTime, PTOKEN_USER User, PTOKEN_GROUPS Groups, PTOKEN_PRIVILEGES Privileges, PTOKEN_OWNER Owner, PTOKEN_PRIMARY_GROUP PrimaryGroup, PTOKEN_DEFAULT_DACL DefaultDacl, PTOKEN_SOURCE TokenSource);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtCreateWaitablePort (PHANDLE PortHandle, POBJECT_ATTRIBUTES ObjectAttributes, ULONG MaxConnectionInfoLength, ULONG MaxMessageLength, ULONG MaxPoolUsage);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtDebugActiveProcess (HANDLE ProcessHandle, HANDLE DebugObjectHandle);\n```\n\n----------------------------------------\n\nTITLE: Declaring Windows NT System Call Functions in C\nDESCRIPTION: This snippet contains function declarations for various Windows NT system calls. These functions cover a wide range of operating system operations, including process management, security checks, memory allocation, and I/O handling. They are part of the Windows NT native API and are typically used by the kernel and device drivers.\nSOURCE: https://github.com/panda-re/panda-ng/blob/main/plugins/syscalls2/generated-in/windows_vistasp0_x86_prototypes.txt#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nNTSTATUS NtAcceptConnectPort (PHANDLE PortHandle, PVOID PortContext, PPORT_MESSAGE ConnectionRequest, BOOLEAN AcceptConnection, PPORT_VIEW ServerView, PREMOTE_PORT_VIEW ClientView);\n\nNTSTATUS NtAccessCheck (PSECURITY_DESCRIPTOR SecurityDescriptor, HANDLE ClientToken, ACCESS_MASK DesiredAccess, PGENERIC_MAPPING GenericMapping, PPRIVILEGE_SET PrivilegeSet, PULONG PrivilegeSetLength, PACCESS_MASK GrantedAccess, PNTSTATUS AccessStatus);\n\nNTSTATUS NtAccessCheckAndAuditAlarm (PUNICODE_STRING SubsystemName, PVOID HandleId, PUNICODE_STRING ObjectTypeName, PUNICODE_STRING ObjectName, PSECURITY_DESCRIPTOR SecurityDescriptor, ACCESS_MASK DesiredAccess, PGENERIC_MAPPING GenericMapping, BOOLEAN ObjectCreation, PACCESS_MASK GrantedAccess, PNTSTATUS AccessStatus, PBOOLEAN GenerateOnClose);\n\n// ... (additional function declarations omitted for brevity)\n\nNTSTATUS NtCreateKey (PHANDLE KeyHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, ULONG TitleIndex, PUNICODE_STRING Class, ULONG CreateOptions, PULONG Disposition);\n```\n\n----------------------------------------\n\nTITLE: Defining Worker Factory and Process System Call Prototypes in Windows Native API (C)\nDESCRIPTION: Each code snippet in this set defines a prototype for a Windows NT Native API function, such as NtSetInformationWorkerFactory, NtQueryInformationWorkerFactory, NtWorkerFactoryWorkerReady, NtShutdownWorkerFactory, NtCreateThreadEx, NtCreateUserProcess, NtQueryLicenseValue, NtMapCMFModule, NtIsUILanguageComitted, NtFlushInstallUILanguage, and NtGetMUIRegistryInfo. These prototypes declare system call interfaces for advanced operations including worker factory management, thread and process creation, license querying, module mapping, and language management. These declarations require the inclusion of appropriate Windows header files for the data types used (e.g., HANDLE, ULONG), and are designed for C/C++ projects that need low-level OS integration. Parameters typically include pointers to structures for inputs and outputs, with key parameters such as handles, attribute lists, and flags controlling system behavior. Functions consistently return NTSTATUS values indicating success or error; care must be taken with correct parameter passing and structure definitions.\nSOURCE: https://github.com/panda-re/panda-ng/blob/main/plugins/syscalls2/generated-in/windows_vistasp0_x86_prototypes.txt#_snippet_19\n\nLANGUAGE: C\nCODE:\n```\nNTSTATUS NtSetInformationWorkerFactory (HANDLE WorkerFactoryHandle, WORKERFACTORYINFOCLASS WorkerFactoryInformationClass, PVOID WorkerFactoryInformation, ULONG WorkerFactoryInformationLength);\n```\n\nLANGUAGE: C\nCODE:\n```\nNTSTATUS NtQueryInformationWorkerFactory (HANDLE WorkerFactoryHandle, WORKERFACTORYINFOCLASS WorkerFactoryInformationClass, PVOID WorkerFactoryInformation, ULONG WorkerFactoryInformationLength, PULONG ReturnLength);\n```\n\nLANGUAGE: C\nCODE:\n```\nNTSTATUS NtWorkerFactoryWorkerReady (HANDLE WorkerFactoryHandle);\n```\n\nLANGUAGE: C\nCODE:\n```\nNTSTATUS NtShutdownWorkerFactory (HANDLE WorkerFactoryHandle, LONG *PendingWorkerCount);\n```\n\nLANGUAGE: C\nCODE:\n```\nNTSTATUS NtCreateThreadEx (PHANDLE ThreadHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, HANDLE ProcessHandle, PVOID StartRoutine, PVOID Argument, ULONG CreateFlags, ULONG_PTR ZeroBits, SIZE_T StackSize, SIZE_T MaximumStackSize, PPS_ATTRIBUTE_LIST AttributeList);\n```\n\nLANGUAGE: C\nCODE:\n```\nNTSTATUS NtCreateUserProcess (PHANDLE ProcessHandle, PHANDLE ThreadHandle, ACCESS_MASK ProcessDesiredAccess, ACCESS_MASK ThreadDesiredAccess, POBJECT_ATTRIBUTES ProcessObjectAttributes, POBJECT_ATTRIBUTES ThreadObjectAttributes, ULONG ProcessFlags, ULONG ThreadFlags, PRTL_USER_PROCESS_PARAMETERS ProcessParameters, PPROCESS_CREATE_INFO CreateInfo, PPROCESS_ATTRIBUTE_LIST AttributeList);\n```\n\nLANGUAGE: C\nCODE:\n```\nNTSTATUS NtQueryLicenseValue (PUNICODE_STRING Name, PULONG Type, PVOID Buffer, ULONG Length, PULONG ReturnedLength);\n```\n\nLANGUAGE: C\nCODE:\n```\nNTSTATUS NtMapCMFModule (ULONG What, ULONG Index, PULONG CacheIndexOut, PULONG CacheFlagsOut, PULONG ViewSizeOut, PVOID *BaseAddress);\n```\n\nLANGUAGE: C\nCODE:\n```\nNTSTATUS NtIsUILanguageComitted ();\n```\n\nLANGUAGE: C\nCODE:\n```\nNTSTATUS NtFlushInstallUILanguage (LANGID InstallUILanguage, ULONG SetComittedFlag);\n```\n\nLANGUAGE: C\nCODE:\n```\nNTSTATUS NtGetMUIRegistryInfo (ULONG Flags, PULONG DataSize, PVOID Data);\n```\n\n----------------------------------------\n\nTITLE: Hook Callback Signature Example for PANDA (C)\nDESCRIPTION: Provides the function pointer type definition for a standard hook callback used in the Hooks plugin. This callback gives access to the CPU state, the translation block currently executing, and a pointer back to the originating hook, allowing for fine-grained control and state introspection. Expects valid, instrumented PANDA state and user-defined callback logic operating on these structures. Any changes to the hook inside this function will be propagated, and disabling from within will remove the hook.\nSOURCE: https://github.com/panda-re/panda-ng/blob/main/plugins/hooks/README.md#_snippet_2\n\nLANGUAGE: c\nCODE:\n```\nvoid (*before_block_exec)(CPUState* env, TranslationBlock* tb, struct hook*);\n```\n\n----------------------------------------\n\nTITLE: Registering a Hypercall Handler\nDESCRIPTION: Function signature for registering a hypercall handler. Requires a unique magic number and a function pointer to the handler.\nSOURCE: https://github.com/panda-re/panda-ng/blob/main/plugins/hypercaller/README.md#_snippet_1\n\nLANGUAGE: C\nCODE:\n```\nvoid register_hypercall(uint32_t magic, hypercall_t);\n```\n\n----------------------------------------\n\nTITLE: Adding a Hook with PANDA Hooks Plugin (C)\nDESCRIPTION: Defines the API for registering a generic hook using a struct pointer. Users provide a pointer to a struct hook, and the plugin will enable appropriate callbacks based on that definition. Requires PANDA instrumented with the Hooks plugin, and expects the user to define and manage their hook structs. No return value; the system manages the lifecycle and propagation of enabled/disabled states for hooks.\nSOURCE: https://github.com/panda-re/panda-ng/blob/main/plugins/hooks/README.md#_snippet_0\n\nLANGUAGE: c\nCODE:\n```\nvoid add_hook(struct hook*)\n```\n\n----------------------------------------\n\nTITLE: Declaring Windows NT Synchronization and Communication Functions in C\nDESCRIPTION: Function declarations for Windows NT system calls related to synchronization primitives and interprocess communication. These functions provide mechanisms for creating and managing mutexes, semaphores, ports, timers, and other synchronization objects.\nSOURCE: https://github.com/panda-re/panda-ng/blob/main/plugins/syscalls2/generated-in/windows_vistasp0_x86_prototypes.txt#_snippet_4\n\nLANGUAGE: C\nCODE:\n```\nNTSTATUS NtCreateMutant (PHANDLE MutantHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, BOOLEAN InitialOwner);\nNTSTATUS NtCreatePrivateNamespace (PHANDLE NamespaceHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, PVOID BoundaryDescriptor);\nNTSTATUS NtCreatePort (PHANDLE PortHandle, POBJECT_ATTRIBUTES ObjectAttributes, ULONG MaxConnectionInfoLength, ULONG MaxMessageLength, ULONG MaxPoolUsage);\nNTSTATUS NtCreateSemaphore (PHANDLE SemaphoreHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, LONG InitialCount, LONG MaximumCount);\nNTSTATUS NtCreateSymbolicLinkObject (PHANDLE LinkHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, PUNICODE_STRING LinkTarget);\nNTSTATUS NtCreateTimer (PHANDLE TimerHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, TIMER_TYPE TimerType);\nNTSTATUS NtCreateToken (PHANDLE TokenHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, TOKEN_TYPE TokenType, PLUID AuthenticationId, PLARGE_INTEGER ExpirationTime, PTOKEN_USER User, PTOKEN_GROUPS Groups, PTOKEN_PRIVILEGES Privileges, PTOKEN_OWNER Owner, PTOKEN_PRIMARY_GROUP PrimaryGroup, PTOKEN_DEFAULT_DACL DefaultDacl, PTOKEN_SOURCE TokenSource);\nNTSTATUS NtCreateWaitablePort (PHANDLE PortHandle, POBJECT_ATTRIBUTES ObjectAttributes, ULONG MaxConnectionInfoLength, ULONG MaxMessageLength, ULONG MaxPoolUsage);\nNTSTATUS NtDeleteAtom (RTL_ATOM Atom);\nNTSTATUS NtDeletePrivateNamespace (HANDLE NamespaceHandle);\n```\n\n----------------------------------------\n\nTITLE: Declaring Windows Native System Call Prototypes - C\nDESCRIPTION: This snippet defines a series of function prototypes for Windows NT system calls using C language conventions. Each prototype maps to a system service, exposing kernel-level functionality related to objects, processes, I/O, transactions, security, and system configuration. The dependencies include Windows NT type definitions (such as HANDLE, NTSTATUS, PVOID, etc.) and require corresponding headers or typedefs. Input parameters and outputs vary but broadly consist of handles, information classes, buffers, and pointers for returning results. These are declarations only (no implementation), and actual usage requires dynamic linking or defining theses stubs in a compatible system layer.\nSOURCE: https://github.com/panda-re/panda-ng/blob/main/plugins/syscalls2/generated-in/windows_vistasp0_x64_prototypes.txt#_snippet_9\n\nLANGUAGE: C\nCODE:\n```\nNTSTATUS NtQueryIoCompletion (HANDLE IoCompletionHandle, IO_COMPLETION_INFORMATION_CLASS IoCompletionInformationClass, PVOID IoCompletionInformation, ULONG IoCompletionInformationLength, PULONG ReturnLength);\nNTSTATUS NtQueryLicenseValue (PUNICODE_STRING Name, PULONG Type, PVOID Buffer, ULONG Length, PULONG ReturnedLength);\nNTSTATUS NtQueryMultipleValueKey (HANDLE KeyHandle, PKEY_VALUE_ENTRY ValueEntries, ULONG EntryCount, PVOID ValueBuffer, PULONG BufferLength, PULONG RequiredBufferLength);\nNTSTATUS NtQueryMutant (HANDLE MutantHandle, MUTANT_INFORMATION_CLASS MutantInformationClass, PVOID MutantInformation, ULONG MutantInformationLength, PULONG ReturnLength);\nNTSTATUS NtQueryOpenSubKeys (POBJECT_ATTRIBUTES TargetKey, PULONG HandleCount);\nNTSTATUS NtQueryOpenSubKeysEx (POBJECT_ATTRIBUTES TargetKey, ULONG BufferLength, PVOID Buffer, PULONG RequiredSize);\nNTSTATUS NtQueryPortInformationProcess ();\nNTSTATUS NtQueryQuotaInformationFile (HANDLE FileHandle, PIO_STATUS_BLOCK IoStatusBlock, PVOID Buffer, ULONG Length, BOOLEAN ReturnSingleEntry, PVOID SidList, ULONG SidListLength, PULONG StartSid, BOOLEAN RestartScan);\nNTSTATUS NtQuerySecurityObject (HANDLE Handle, SECURITY_INFORMATION SecurityInformation, PSECURITY_DESCRIPTOR SecurityDescriptor, ULONG Length, PULONG LengthNeeded);\nNTSTATUS NtQuerySemaphore (HANDLE SemaphoreHandle, SEMAPHORE_INFORMATION_CLASS SemaphoreInformationClass, PVOID SemaphoreInformation, ULONG SemaphoreInformationLength, PULONG ReturnLength);\nNTSTATUS NtQuerySymbolicLinkObject (HANDLE LinkHandle, PUNICODE_STRING LinkTarget, PULONG ReturnedLength);\nNTSTATUS NtQuerySystemEnvironmentValue (PUNICODE_STRING VariableName, PWSTR VariableValue, USHORT ValueLength, PUSHORT ReturnLength);\nNTSTATUS NtQuerySystemEnvironmentValueEx (PUNICODE_STRING VariableName, LPGUID VendorGuid, PVOID Value, PULONG ValueLength, PULONG Attributes);\nNTSTATUS NtQueryTimerResolution (PULONG MaximumTime, PULONG MinimumTime, PULONG CurrentTime);\nNTSTATUS NtRaiseException (PEXCEPTION_RECORD ExceptionRecord, PCONTEXT ContextRecord, BOOLEAN FirstChance);\nNTSTATUS NtRaiseHardError (NTSTATUS ErrorStatus, ULONG NumberOfParameters, ULONG UnicodeStringParameterMask, PULONG_PTR Parameters, ULONG ValidResponseOptions, PULONG Response);\nNTSTATUS NtReadOnlyEnlistment (HANDLE EnlistmentHandle, PLARGE_INTEGER TmVirtualClock);\nNTSTATUS NtRecoverEnlistment (HANDLE EnlistmentHandle, PVOID EnlistmentKey);\nNTSTATUS NtRecoverResourceManager (HANDLE ResourceManagerHandle);\nNTSTATUS NtRecoverTransactionManager (HANDLE TransactionManagerHandle);\nNTSTATUS NtRegisterProtocolAddressInformation (HANDLE ResourceManager, PCRM_PROTOCOL_ID ProtocolId, ULONG ProtocolInformationSize, PVOID ProtocolInformation, ULONG CreateOptions);\nNTSTATUS NtRegisterThreadTerminatePort (HANDLE PortHandle);\nNTSTATUS NtReleaseKeyedEvent (HANDLE KeyedEventHandle, PVOID KeyValue, BOOLEAN Alertable, PLARGE_INTEGER Timeout);\nNTSTATUS NtReleaseWorkerFactoryWorker (HANDLE WorkerFactoryHandle);\nNTSTATUS NtRemoveIoCompletionEx (HANDLE IoCompletionHandle, PFILE_IO_COMPLETION_INFORMATION IoCompletionInformation, ULONG Count, PULONG NumEntriesRemoved, PLARGE_INTEGER Timeout, BOOLEAN Alertable);\nNTSTATUS NtRemoveProcessDebug (HANDLE ProcessHandle, HANDLE DebugObjectHandle);\nNTSTATUS NtRenameKey (HANDLE KeyHandle, PUNICODE_STRING NewName);\nNTSTATUS NtReplaceKey (POBJECT_ATTRIBUTES NewFile, HANDLE TargetHandle, POBJECT_ATTRIBUTES OldFile);\nNTSTATUS NtReplyWaitReplyPort (HANDLE PortHandle, PPORT_MESSAGE ReplyMessage);\nNTSTATUS NtRequestPort (HANDLE PortHandle, PPORT_MESSAGE RequestMessage);\nNTSTATUS NtResetEvent (HANDLE EventHandle, PLONG PreviousState);\nNTSTATUS NtResetWriteWatch (HANDLE ProcessHandle, PVOID BaseAddress, SIZE_T RegionSize);\nNTSTATUS NtRestoreKey (HANDLE KeyHandle, HANDLE FileHandle, ULONG Flags);\nNTSTATUS NtResumeProcess (HANDLE ProcessHandle);\nNTSTATUS NtRollbackComplete (HANDLE EnlistmentHandle, PLARGE_INTEGER TmVirtualClock);\nNTSTATUS NtRollbackEnlistment (HANDLE EnlistmentHandle, PLARGE_INTEGER TmVirtualClock);\nNTSTATUS NtRollbackTransaction (HANDLE TransactionHandle, BOOLEAN Wait);\nNTSTATUS NtRollforwardTransactionManager (HANDLE TransactionManagerHandle, PLARGE_INTEGER TmVirtualClock);\nNTSTATUS NtSaveKey (HANDLE KeyHandle, HANDLE FileHandle);\nNTSTATUS NtSaveKeyEx (HANDLE KeyHandle, HANDLE FileHandle, ULONG Format);\nNTSTATUS NtSaveMergedKeys (HANDLE HighPrecedenceKeyHandle, HANDLE LowPrecedenceKeyHandle, HANDLE FileHandle);\nNTSTATUS NtSecureConnectPort (PHANDLE PortHandle, PUNICODE_STRING PortName, PSECURITY_QUALITY_OF_SERVICE SecurityQos, PPORT_VIEW ClientView, PSID RequiredServerSid, PREMOTE_PORT_VIEW ServerView, PULONG MaxMessageLength, PVOID ConnectionInformation, PULONG ConnectionInformationLength);\nNTSTATUS NtSetBootEntryOrder (PULONG Ids, ULONG Count);\nNTSTATUS NtSetBootOptions (PBOOT_OPTIONS BootOptions, ULONG FieldsToChange);\nNTSTATUS NtSetContextThread (HANDLE ThreadHandle, PCONTEXT ThreadContext);\nNTSTATUS NtSetDebugFilterState (ULONG ComponentId, ULONG Level, BOOLEAN State);\nNTSTATUS NtSetDefaultHardErrorPort (HANDLE DefaultHardErrorPort);\nNTSTATUS NtSetDefaultLocale (BOOLEAN UserProfile, LCID DefaultLocaleId);\nNTSTATUS NtSetDefaultUILanguage (LANGID DefaultUILanguageId);\nNTSTATUS NtSetDriverEntryOrder (PULONG Ids, ULONG Count);\nNTSTATUS NtSetEaFile (HANDLE FileHandle, PIO_STATUS_BLOCK IoStatusBlock, PVOID Buffer, ULONG Length);\nNTSTATUS NtSetHighEventPair (HANDLE EventPairHandle);\nNTSTATUS NtSetHighWaitLowEventPair (HANDLE EventPairHandle);\nNTSTATUS NtSetInformationDebugObject (HANDLE DebugObjectHandle, DEBUGOBJECTINFOCLASS DebugObjectInformationClass, PVOID DebugInformation, ULONG DebugInformationLength, PULONG ReturnLength);\nNTSTATUS NtSetInformationEnlistment (HANDLE EnlistmentHandle, ENLISTMENT_INFORMATION_CLASS EnlistmentInformationClass, PVOID EnlistmentInformation, ULONG EnlistmentInformationLength);\nNTSTATUS NtSetInformationJobObject (HANDLE JobHandle, JOBOBJECTINFOCLASS JobObjectInformationClass, PVOID JobObjectInformation, ULONG JobObjectInformationLength);\nNTSTATUS NtSetInformationKey (HANDLE KeyHandle, KEY_SET_INFORMATION_CLASS KeySetInformationClass, PVOID KeySetInformation, ULONG KeySetInformationLength);\nNTSTATUS NtSetInformationResourceManager (HANDLE ResourceManagerHandle, RESOURCEMANAGER_INFORMATION_CLASS ResourceManagerInformationClass, PVOID ResourceManagerInformation, ULONG ResourceManagerInformationLength);\nNTSTATUS NtSetInformationToken (HANDLE TokenHandle, TOKEN_INFORMATION_CLASS TokenInformationClass, PVOID TokenInformation, ULONG TokenInformationLength);\nNTSTATUS NtSetInformationTransaction (HANDLE TransactionHandle, TRANSACTION_INFORMATION_CLASS TransactionInformationClass, PVOID TransactionInformation, ULONG TransactionInformationLength);\nNTSTATUS NtSetInformationTransactionManager (HANDLE TmHandle, TRANSACTIONMANAGER_INFORMATION_CLASS TransactionManagerInformationClass, PVOID TransactionManagerInformation, ULONG TransactionManagerInformationLength);\nNTSTATUS NtSetInformationWorkerFactory (HANDLE WorkerFactoryHandle, WORKERFACTORYINFOCLASS WorkerFactoryInformationClass, PVOID WorkerFactoryInformation, ULONG WorkerFactoryInformationLength);\nNTSTATUS NtSetIntervalProfile (ULONG Interval, KPROFILE_SOURCE Source);\nNTSTATUS NtSetIoCompletion (HANDLE IoCompletionHandle, PVOID KeyContext, PVOID ApcContext, NTSTATUS IoStatus, ULONG_PTR IoStatusInformation);\nNTSTATUS NtSetLdtEntries (ULONG Selector0, ULONG Entry0Low, ULONG Entry0Hi, ULONG Selector1, ULONG Entry1Low, ULONG Entry1Hi);\nNTSTATUS NtSetLowEventPair (HANDLE EventPairHandle);\nNTSTATUS NtSetLowWaitHighEventPair (HANDLE EventPairHandle);\nNTSTATUS NtSetQuotaInformationFile (HANDLE FileHandle, PIO_STATUS_BLOCK IoStatusBlock, PVOID Buffer, ULONG Length);\nNTSTATUS NtSetSecurityObject (HANDLE Handle, SECURITY_INFORMATION SecurityInformation, PSECURITY_DESCRIPTOR SecurityDescriptor);\nNTSTATUS NtSetSystemEnvironmentValue (PUNICODE_STRING VariableName, PUNICODE_STRING VariableValue);\nNTSTATUS NtSetSystemEnvironmentValueEx (PUNICODE_STRING VariableName, LPGUID VendorGuid, PVOID Value, ULONG ValueLength, ULONG Attributes);\nNTSTATUS NtSetSystemInformation (SYSTEM_INFORMATION_CLASS SystemInformationClass, PVOID SystemInformation, ULONG SystemInformationLength);\nNTSTATUS NtSetSystemPowerState (POWER_ACTION SystemAction, SYSTEM_POWER_STATE MinSystemState, ULONG Flags);\nNTSTATUS NtSetSystemTime (PLARGE_INTEGER SystemTime, PLARGE_INTEGER PreviousTime);\nNTSTATUS NtSetThreadExecutionState (EXECUTION_STATE esFlags, PEXECUTION_STATE PreviousFlags);\nNTSTATUS NtSetTimerResolution (ULONG DesiredTime, BOOLEAN SetResolution, PULONG ActualTime);\nNTSTATUS NtSetUuidSeed (PCHAR Seed);\nNTSTATUS NtSetVolumeInformationFile (HANDLE FileHandle, PIO_STATUS_BLOCK IoStatusBlock, PVOID FsInformation, ULONG Length, FS_INFORMATION_CLASS FsInformationClass);\nNTSTATUS NtShutdownSystem (SHUTDOWN_ACTION Action);\nNTSTATUS NtShutdownWorkerFactory (HANDLE WorkerFactoryHandle, LONG *PendingWorkerCount);\nNTSTATUS NtSignalAndWaitForSingleObject (HANDLE SignalHandle, HANDLE WaitHandle, BOOLEAN Alertable, PLARGE_INTEGER Timeout);\nNTSTATUS NtSinglePhaseReject (HANDLE EnlistmentHandle, PLARGE_INTEGER TmVirtualClock);\nNTSTATUS NtStartProfile (HANDLE ProfileHandle);\nNTSTATUS NtStopProfile (HANDLE ProfileHandle);\nNTSTATUS NtSuspendProcess (HANDLE ProcessHandle);\nNTSTATUS NtSuspendThread (HANDLE ThreadHandle, PULONG PreviousSuspendCount);\nNTSTATUS NtSystemDebugControl (SYSDBG_COMMAND Command, PVOID InputBuffer, ULONG InputBufferLength, PVOID OutputBuffer, ULONG OutputBufferLength, PULONG ReturnLength);\nNTSTATUS NtTerminateJobObject (HANDLE JobHandle, NTSTATUS ExitStatus);\n```\n\n----------------------------------------\n\nTITLE: Windows NT Security and Access Control System Calls\nDESCRIPTION: Function declarations for security-related system calls including access checks, token manipulation, and audit alarms. These functions implement NT's security model.\nSOURCE: https://github.com/panda-re/panda-ng/blob/main/plugins/syscalls2/generated-in/windows_2003sp0_x86_prototypes.txt#_snippet_1\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtAccessCheck (\n    PSECURITY_DESCRIPTOR SecurityDescriptor,\n    HANDLE ClientToken,\n    ACCESS_MASK DesiredAccess,\n    PGENERIC_MAPPING GenericMapping,\n    PPRIVILEGE_SET PrivilegeSet,\n    PULONG PrivilegeSetLength,\n    PACCESS_MASK GrantedAccess,\n    PNTSTATUS AccessStatus\n);\n\nNTSTATUS NtCreateToken (\n    PHANDLE TokenHandle,\n    ACCESS_MASK DesiredAccess,\n    POBJECT_ATTRIBUTES ObjectAttributes,\n    TOKEN_TYPE TokenType,\n    PLUID AuthenticationId,\n    PLARGE_INTEGER ExpirationTime,\n    PTOKEN_USER User,\n    PTOKEN_GROUPS Groups,\n    PTOKEN_PRIVILEGES Privileges,\n    PTOKEN_OWNER Owner,\n    PTOKEN_PRIMARY_GROUP PrimaryGroup,\n    PTOKEN_DEFAULT_DACL DefaultDacl,\n    PTOKEN_SOURCE TokenSource\n);\n```\n\n----------------------------------------\n\nTITLE: Declaring Windows NT Native API Functions in C\nDESCRIPTION: This snippet contains declarations for numerous Windows NT native API functions. These functions provide low-level access to system operations, including process and thread management, file operations, registry manipulation, and system information queries. They are typically used in system-level programming and device drivers.\nSOURCE: https://github.com/panda-re/panda-ng/blob/main/plugins/syscalls2/generated-in/windows_2003sp0_x86_prototypes.txt#_snippet_5\n\nLANGUAGE: C\nCODE:\n```\nNTSTATUS NtSetBootEntryOrder (PULONG Ids, ULONG Count);\nNTSTATUS NtSetBootOptions (PBOOT_OPTIONS BootOptions, ULONG FieldsToChange);\nNTSTATUS NtSetContextThread (HANDLE ThreadHandle, PCONTEXT ThreadContext);\n// ... [additional function declarations] ...\nNTSTATUS NtQueryPortInformationProcess ();\nULONG NtGetCurrentProcessorNumber ();\n```\n\n----------------------------------------\n\nTITLE: Declaring Windows NT Native API Functions in C\nDESCRIPTION: This snippet contains a series of function declarations for Windows NT native API calls. These functions provide low-level access to system resources and are typically used in system programming or driver development. They cover a wide range of operations including querying system information, manipulating files and registry keys, and managing processes and threads.\nSOURCE: https://github.com/panda-re/panda-ng/blob/main/plugins/syscalls2/generated-in/windows_xpsp2_x86_prototypes.txt#_snippet_2\n\nLANGUAGE: C\nCODE:\n```\nNTSTATUS NtQueryDebugFilterState (ULONG ComponentId, ULONG Level);\nNTSTATUS NtQueryDefaultLocale (BOOLEAN UserProfile, PLCID DefaultLocaleId);\nNTSTATUS NtQueryDefaultUILanguage (LANGID *DefaultUILanguageId);\nNTSTATUS NtQueryDirectoryFile (HANDLE FileHandle, HANDLE Event, PIO_APC_ROUTINE ApcRoutine, PVOID ApcContext, PIO_STATUS_BLOCK IoStatusBlock, PVOID FileInformation, ULONG Length, FILE_INFORMATION_CLASS FileInformationClass, BOOLEAN ReturnSingleEntry, PUNICODE_STRING FileName, BOOLEAN RestartScan);\n// ... (additional function declarations omitted for brevity)\nNTSTATUS NtSetDefaultUILanguage (LANGID DefaultUILanguageId);\nNTSTATUS NtSetEaFile (HANDLE FileHandle, PIO_STATUS_BLOCK IoStatusBlock, PVOID Buffer, ULONG Length);\nNTSTATUS NtSetEvent (HANDLE EventHandle, PLONG PreviousState);\n```\n\n----------------------------------------\n\nTITLE: Declaring Windows NT System Call Prototypes in C\nDESCRIPTION: This C code snippet comprises multiple forward declarations of NT system calls as exposed by the ntdll.dll or kernel components in the Windows NT family. Each prototype specifies the function name, return type (NTSTATUS), and associated parameters, many of which are pointers to data structures related to security, memory, IPC, and process management. These prototypes require Windows-specific type definitions (such as HANDLE, PSECURITY_DESCRIPTOR, ULONG, etc.) and are meant to be included in header files where the actual OS implementation links their behavior. Inputs and outputs match the Windows NT kernel's low-level interface; usage assumes detailed familiarity with the NT kernel API and related structures.\nSOURCE: https://github.com/panda-re/panda-ng/blob/main/plugins/syscalls2/generated-in/all_windows_prototypes.txt#_snippet_0\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtAcceptConnectPort (PHANDLE PortHandle, PVOID PortContext, PPORT_MESSAGE ConnectionRequest, BOOLEAN AcceptConnection, PPORT_VIEW ServerView, PREMOTE_PORT_VIEW ClientView);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtAccessCheck (PSECURITY_DESCRIPTOR SecurityDescriptor, HANDLE ClientToken, ACCESS_MASK DesiredAccess, PGENERIC_MAPPING GenericMapping, PPRIVILEGE_SET PrivilegeSet, PULONG PrivilegeSetLength, PACCESS_MASK GrantedAccess, PNTSTATUS AccessStatus);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtAccessCheckAndAuditAlarm (PUNICODE_STRING SubsystemName, PVOID HandleId, PUNICODE_STRING ObjectTypeName, PUNICODE_STRING ObjectName, PSECURITY_DESCRIPTOR SecurityDescriptor, ACCESS_MASK DesiredAccess, PGENERIC_MAPPING GenericMapping, BOOLEAN ObjectCreation, PACCESS_MASK GrantedAccess, PNTSTATUS AccessStatus, PBOOLEAN GenerateOnClose);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtAccessCheckByType (PSECURITY_DESCRIPTOR SecurityDescriptor, PSID PrincipalSelfSid, HANDLE ClientToken, ACCESS_MASK DesiredAccess, POBJECT_TYPE_LIST ObjectTypeList, ULONG ObjectTypeListLength, PGENERIC_MAPPING GenericMapping, PPRIVILEGE_SET PrivilegeSet, PULONG PrivilegeSetLength, PACCESS_MASK GrantedAccess, PNTSTATUS AccessStatus);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtAccessCheckByTypeAndAuditAlarm (PUNICODE_STRING SubsystemName, PVOID HandleId, PUNICODE_STRING ObjectTypeName, PUNICODE_STRING ObjectName, PSECURITY_DESCRIPTOR SecurityDescriptor, PSID PrincipalSelfSid, ACCESS_MASK DesiredAccess, AUDIT_EVENT_TYPE AuditType, ULONG Flags, POBJECT_TYPE_LIST ObjectTypeList, ULONG ObjectTypeListLength, PGENERIC_MAPPING GenericMapping, BOOLEAN ObjectCreation, PACCESS_MASK GrantedAccess, PNTSTATUS AccessStatus, PBOOLEAN GenerateOnClose);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtAccessCheckByTypeResultList (PSECURITY_DESCRIPTOR SecurityDescriptor, PSID PrincipalSelfSid, HANDLE ClientToken, ACCESS_MASK DesiredAccess, POBJECT_TYPE_LIST ObjectTypeList, ULONG ObjectTypeListLength, PGENERIC_MAPPING GenericMapping, PPRIVILEGE_SET PrivilegeSet, PULONG PrivilegeSetLength, PACCESS_MASK GrantedAccess, PNTSTATUS AccessStatus);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtAccessCheckByTypeResultListAndAuditAlarm (PUNICODE_STRING SubsystemName, PVOID HandleId, PUNICODE_STRING ObjectTypeName, PUNICODE_STRING ObjectName, PSECURITY_DESCRIPTOR SecurityDescriptor, PSID PrincipalSelfSid, ACCESS_MASK DesiredAccess, AUDIT_EVENT_TYPE AuditType, ULONG Flags, POBJECT_TYPE_LIST ObjectTypeList, ULONG ObjectTypeListLength, PGENERIC_MAPPING GenericMapping, BOOLEAN ObjectCreation, PACCESS_MASK GrantedAccess, PNTSTATUS AccessStatus, PBOOLEAN GenerateOnClose);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtAccessCheckByTypeResultListAndAuditAlarmByHandle (PUNICODE_STRING SubsystemName, PVOID HandleId, HANDLE ClientToken, PUNICODE_STRING ObjectTypeName, PUNICODE_STRING ObjectName, PSECURITY_DESCRIPTOR SecurityDescriptor, PSID PrincipalSelfSid, ACCESS_MASK DesiredAccess, AUDIT_EVENT_TYPE AuditType, ULONG Flags, POBJECT_TYPE_LIST ObjectTypeList, ULONG ObjectTypeListLength, PGENERIC_MAPPING GenericMapping, BOOLEAN ObjectCreation, PACCESS_MASK GrantedAccess, PNTSTATUS AccessStatus, PBOOLEAN GenerateOnClose);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtAddAtom (PWSTR AtomName, ULONG Length, PRTL_ATOM Atom);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtAddBootEntry (PBOOT_ENTRY BootEntry, PULONG Id);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtAddDriverEntry (PEFI_DRIVER_ENTRY DriverEntry, PULONG Id);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtAdjustGroupsToken (HANDLE TokenHandle, BOOLEAN ResetToDefault, PTOKEN_GROUPS NewState, ULONG BufferLength, PTOKEN_GROUPS PreviousState, PULONG ReturnLength);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtAdjustPrivilegesToken (HANDLE TokenHandle, BOOLEAN DisableAllPrivileges, PTOKEN_PRIVILEGES NewState, ULONG BufferLength, PTOKEN_PRIVILEGES PreviousState, PULONG ReturnLength);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtAlertResumeThread (HANDLE ThreadHandle, PULONG PreviousSuspendCount);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtAlertThread (HANDLE ThreadHandle);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtAllocateLocallyUniqueId (PLUID Luid);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtAllocateReserveObject (PHANDLE MemoryReserveHandle, POBJECT_ATTRIBUTES ObjectAttributes, MEMORY_RESERVE_TYPE Type);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtAllocateUserPhysicalPages (HANDLE ProcessHandle, PULONG_PTR NumberOfPages, PULONG_PTR UserPfnArray);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtAllocateUuids (PULARGE_INTEGER Time, PULONG Range, PULONG Sequence, PCHAR Seed);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtAllocateVirtualMemory (HANDLE ProcessHandle, PVOID *BaseAddress, ULONG_PTR ZeroBits, PSIZE_T RegionSize, ULONG AllocationType, ULONG Protect);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtAlpcAcceptConnectPort (PHANDLE PortHandle, HANDLE ConnectionPortHandle, ULONG Flags, POBJECT_ATTRIBUTES ObjectAttributes, PALPC_PORT_ATTRIBUTES PortAttributes, PVOID PortContext, PPORT_MESSAGE ConnectionRequest, PALPC_MESSAGE_ATTRIBUTES ConnectionMessageAttributes, BOOLEAN AcceptConnection);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtAlpcCancelMessage (HANDLE PortHandle, ULONG Flags, PALPC_CONTEXT_ATTR MessageContext);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtAlpcConnectPort (PHANDLE PortHandle, PUNICODE_STRING PortName, POBJECT_ATTRIBUTES ObjectAttributes, PALPC_PORT_ATTRIBUTES PortAttributes, ULONG Flags, PSID RequiredServerSid, PPORT_MESSAGE ConnectionMessage, PULONG BufferLength, PALPC_MESSAGE_ATTRIBUTES OutMessageAttributes, PALPC_MESSAGE_ATTRIBUTES InMessageAttributes, PLARGE_INTEGER Timeout);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtAlpcCreatePort (PHANDLE PortHandle, POBJECT_ATTRIBUTES ObjectAttributes, PALPC_PORT_ATTRIBUTES PortAttributes);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtAlpcCreatePortSection (HANDLE PortHandle, ULONG Flags, HANDLE SectionHandle, SIZE_T SectionSize, PALPC_HANDLE AlpcSectionHandle, PSIZE_T ActualSectionSize);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtAlpcCreateResourceReserve (HANDLE PortHandle, ULONG Flags, SIZE_T MessageSize, PALPC_HANDLE ResourceId);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtAlpcCreateSectionView (HANDLE PortHandle, ULONG Flags, PALPC_DATA_VIEW_ATTR ViewAttributes);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtAlpcCreateSecurityContext (HANDLE PortHandle, ULONG Flags, PALPC_SECURITY_ATTR SecurityAttribute);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtAlpcDeletePortSection (HANDLE PortHandle, ULONG Flags, ALPC_HANDLE SectionHandle);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtAlpcDeleteResourceReserve (HANDLE PortHandle, ULONG Flags, ALPC_HANDLE ResourceId);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtAlpcDeleteSectionView (HANDLE PortHandle, ULONG Flags, PVOID ViewBase);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtAlpcDeleteSecurityContext (HANDLE PortHandle, ULONG Flags, ALPC_HANDLE ContextHandle);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtAlpcDisconnectPort (HANDLE PortHandle, ULONG Flags);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtAlpcImpersonateClientOfPort (HANDLE PortHandle, PPORT_MESSAGE PortMessage, PVOID Reserved);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtAlpcOpenSenderProcess (PHANDLE ProcessHandle, HANDLE PortHandle, PPORT_MESSAGE PortMessage, ULONG Flags, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtAlpcOpenSenderThread (PHANDLE ThreadHandle, HANDLE PortHandle, PPORT_MESSAGE PortMessage, ULONG Flags, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtAlpcQueryInformation (HANDLE PortHandle, ALPC_PORT_INFORMATION_CLASS PortInformationClass, PVOID PortInformation, ULONG Length, PULONG ReturnLength);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtAlpcQueryInformationMessage (HANDLE PortHandle, PPORT_MESSAGE PortMessage, ALPC_MESSAGE_INFORMATION_CLASS MessageInformationClass, PVOID MessageInformation, ULONG Length, PULONG ReturnLength);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtAlpcRevokeSecurityContext (HANDLE PortHandle, ULONG Flags, ALPC_HANDLE ContextHandle);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtAlpcSendWaitReceivePort (HANDLE PortHandle, ULONG Flags, PPORT_MESSAGE SendMessage, PALPC_MESSAGE_ATTRIBUTES SendMessageAttributes, PPORT_MESSAGE ReceiveMessage, PULONG BufferLength, PALPC_MESSAGE_ATTRIBUTES ReceiveMessageAttributes, PLARGE_INTEGER Timeout);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtAlpcSetInformation (HANDLE PortHandle, ALPC_PORT_INFORMATION_CLASS PortInformationClass, PVOID PortInformation, ULONG Length);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtApphelpCacheControl (APPHELPCOMMAND type, PVOID buf);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtAreMappedFilesTheSame (PVOID File1MappedAsAnImage, PVOID File2MappedAsFile);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtAssignProcessToJobObject (HANDLE JobHandle, HANDLE ProcessHandle);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtCallbackReturn (PVOID OutputBuffer, ULONG OutputLength, NTSTATUS Status);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtCancelIoFile (HANDLE FileHandle, PIO_STATUS_BLOCK IoStatusBlock);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtCancelIoFileEx (HANDLE FileHandle, PIO_STATUS_BLOCK IoRequestToCancel, PIO_STATUS_BLOCK IoStatusBlock);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtCancelSynchronousIoFile (HANDLE ThreadHandle, PIO_STATUS_BLOCK IoRequestToCancel, PIO_STATUS_BLOCK IoStatusBlock);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtCancelTimer (HANDLE TimerHandle, PBOOLEAN CurrentState);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtClearEvent (HANDLE EventHandle);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtClose (HANDLE Handle);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtCloseObjectAuditAlarm (PUNICODE_STRING SubsystemName, PVOID HandleId, BOOLEAN GenerateOnClose);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtCommitComplete (HANDLE EnlistmentHandle, PLARGE_INTEGER TmVirtualClock);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtCommitEnlistment (HANDLE EnlistmentHandle, PLARGE_INTEGER TmVirtualClock);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtCommitTransaction (HANDLE TransactionHandle, BOOLEAN Wait);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtCompactKeys (ULONG Count, HANDLE KeyArray[]);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtCompareTokens (HANDLE FirstTokenHandle, HANDLE SecondTokenHandle, PBOOLEAN Equal);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtCompleteConnectPort (HANDLE PortHandle);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtCompressKey (HANDLE Key);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtConnectPort (PHANDLE PortHandle, PUNICODE_STRING PortName, PSECURITY_QUALITY_OF_SERVICE SecurityQos, PPORT_VIEW ClientView, PREMOTE_PORT_VIEW ServerView, PULONG MaxMessageLength, PVOID ConnectionInformation, PULONG ConnectionInformationLength);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtContinue (PCONTEXT ContextRecord, BOOLEAN TestAlert);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtCreateDebugObject (PHANDLE DebugObjectHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, ULONG Flags);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtCreateDirectoryObject (PHANDLE DirectoryHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtCreateEnlistment (PHANDLE EnlistmentHandle, ACCESS_MASK DesiredAccess, HANDLE ResourceManagerHandle, HANDLE TransactionHandle, POBJECT_ATTRIBUTES ObjectAttributes, ULONG CreateOptions, NOTIFICATION_MASK NotificationMask, PVOID EnlistmentKey);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtCreateEvent (PHANDLE EventHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, EVENT_TYPE EventType, BOOLEAN InitialState);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtCreateEventPair (PHANDLE EventPairHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes);\n```\n\n----------------------------------------\n\nTITLE: Defining Hypercall Function Signature in C\nDESCRIPTION: The signature for hypercall handler functions that can be registered with the hypercaller plugin. Each handler receives a CPUState pointer.\nSOURCE: https://github.com/panda-re/panda-ng/blob/main/plugins/hypercaller/README.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\ntypedef void (*hypercall_t)(CPUState *cpu);\n```\n\n----------------------------------------\n\nTITLE: Declaring Process Identification API in PANDA Plugin - C\nDESCRIPTION: This C code snippet provides the signature of the procid function, which returns an integer to uniquely identify the current process running on a given CPU. It is part of a PANDA plugin aiming for architecture-agnostic process identification. No dependencies or arguments other than a CPUState pointer are required. The returned integer varies by architecture: for non-MIPS, it resembles ASID use; for MIPS, it is the address of task_struct. The output is not guaranteed to be unique for the lifetime of a process, as task_struct addresses may be reused.\nSOURCE: https://github.com/panda-re/panda-ng/blob/main/plugins/hw_proc_id/README.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nint procid(CPUState*);\n```\n\n----------------------------------------\n\nTITLE: Windows NT Registry Function Declarations in C\nDESCRIPTION: Function signatures for NT API calls related to registry operations, including initialization, opening keys, and monitoring changes.\nSOURCE: https://github.com/panda-re/panda-ng/blob/main/plugins/syscalls2/generated-in/all_windows_prototypes.txt#_snippet_7\n\nLANGUAGE: C\nCODE:\n```\nNTSTATUS NtInitializeRegistry (USHORT BootCondition);\n```\n\nLANGUAGE: C\nCODE:\n```\nNTSTATUS NtOpenKey (PHANDLE KeyHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes);\n```\n\nLANGUAGE: C\nCODE:\n```\nNTSTATUS NtOpenKeyEx (PHANDLE KeyHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, ULONG OpenOptions);\n```\n\nLANGUAGE: C\nCODE:\n```\nNTSTATUS NtOpenKeyTransacted (PHANDLE KeyHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, HANDLE TransactionHandle);\n```\n\nLANGUAGE: C\nCODE:\n```\nNTSTATUS NtOpenKeyTransactedEx (PHANDLE KeyHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, ULONG OpenOptions, HANDLE TransactionHandle);\n```\n\nLANGUAGE: C\nCODE:\n```\nNTSTATUS NtNotifyChangeKey (HANDLE KeyHandle, HANDLE Event, PIO_APC_ROUTINE ApcRoutine, PVOID ApcContext, PIO_STATUS_BLOCK IoStatusBlock, ULONG CompletionFilter, BOOLEAN WatchTree, PVOID Buffer, ULONG BufferSize, BOOLEAN Asynchronous);\n```\n\nLANGUAGE: C\nCODE:\n```\nNTSTATUS NtNotifyChangeMultipleKeys (HANDLE MasterKeyHandle, ULONG Count, OBJECT_ATTRIBUTES SlaveObjects[], HANDLE Event, PIO_APC_ROUTINE ApcRoutine, PVOID ApcContext, PIO_STATUS_BLOCK IoStatusBlock, ULONG CompletionFilter, BOOLEAN WatchTree, PVOID Buffer, ULONG BufferSize, BOOLEAN Asynchronous);\n```\n\nLANGUAGE: C\nCODE:\n```\nNTSTATUS NtLockRegistryKey (HANDLE KeyHandle);\n```\n\n----------------------------------------\n\nTITLE: Windows NT Native API Function Declarations in C\nDESCRIPTION: Declares various Windows NT Native API functions (NTDLL system calls) that provide low-level access to operating system functionality. These functions handle operations like driver management, file operations, memory management, and process synchronization.\nSOURCE: https://github.com/panda-re/panda-ng/blob/main/plugins/syscalls2/generated-in/all_windows_prototypes.txt#_snippet_12\n\nLANGUAGE: C\nCODE:\n```\nNTSTATUS NtUnloadDriver (PUNICODE_STRING DriverServiceName);\nNTSTATUS NtUnloadKey (POBJECT_ATTRIBUTES TargetKey);\nNTSTATUS NtUnloadKey2 (POBJECT_ATTRIBUTES TargetKey, ULONG Flags);\nNTSTATUS NtUnloadKeyEx (POBJECT_ATTRIBUTES TargetKey, HANDLE Event);\nNTSTATUS NtUnlockFile (HANDLE FileHandle, PIO_STATUS_BLOCK IoStatusBlock, PLARGE_INTEGER ByteOffset, PLARGE_INTEGER Length, ULONG Key);\nNTSTATUS NtUnlockVirtualMemory (HANDLE ProcessHandle, PVOID *BaseAddress, PSIZE_T RegionSize, ULONG MapType);\nNTSTATUS NtUnmapViewOfSection (HANDLE ProcessHandle, PVOID BaseAddress);\nNTSTATUS NtVdmControl (VDMSERVICECLASS Service, PVOID ServiceData);\nNTSTATUS NtWaitForDebugEvent (HANDLE DebugObjectHandle, BOOLEAN Alertable, PLARGE_INTEGER Timeout, PDBGUI_WAIT_STATE_CHANGE WaitStateChange);\nNTSTATUS NtWaitForKeyedEvent (HANDLE KeyedEventHandle, PVOID KeyValue, BOOLEAN Alertable, PLARGE_INTEGER Timeout);\nNTSTATUS NtWaitForMultipleObjects (ULONG Count, HANDLE Handles[], WAIT_TYPE WaitType, BOOLEAN Alertable, PLARGE_INTEGER Timeout);\nNTSTATUS NtWaitForMultipleObjects32 (ULONG Count, LONG Handles[], WAIT_TYPE WaitType, BOOLEAN Alertable, PLARGE_INTEGER Timeout);\nNTSTATUS NtWaitForSingleObject (HANDLE Handle, BOOLEAN Alertable, PLARGE_INTEGER Timeout);\nNTSTATUS NtWaitForWorkViaWorkerFactory (HANDLE WorkerFactoryHandle, PFILE_IO_COMPLETION_INFORMATION MiniPacket);\nNTSTATUS NtWaitHighEventPair (HANDLE EventPairHandle);\nNTSTATUS NtWaitLowEventPair (HANDLE EventPairHandle);\nNTSTATUS NtWorkerFactoryWorkerReady (HANDLE WorkerFactoryHandle);\nNTSTATUS NtWriteFile (HANDLE FileHandle, HANDLE Event, PIO_APC_ROUTINE ApcRoutine, PVOID ApcContext, PIO_STATUS_BLOCK IoStatusBlock, PVOID Buffer, ULONG Length, PLARGE_INTEGER ByteOffset, PULONG Key);\nNTSTATUS NtWriteFileGather (HANDLE FileHandle, HANDLE Event, PIO_APC_ROUTINE ApcRoutine, PVOID ApcContext, PIO_STATUS_BLOCK IoStatusBlock, PFILE_SEGMENT_ELEMENT SegmentArray, ULONG Length, PLARGE_INTEGER ByteOffset, PULONG Key);\nNTSTATUS NtWriteRequestData (HANDLE PortHandle, PPORT_MESSAGE Message, ULONG DataEntryIndex, PVOID Buffer, SIZE_T BufferSize, PSIZE_T NumberOfBytesWritten);\nNTSTATUS NtWriteVirtualMemory (HANDLE ProcessHandle, PVOID BaseAddress, PVOID Buffer, SIZE_T BufferSize, PSIZE_T NumberOfBytesWritten);\nNTSTATUS NtYieldExecution ();\nNTSTATUS NtNotifyChangeSession (HANDLE Session, ULONG IoStateSequence, PVOID Reserved, ULONG Action, IO_SESSION_STATE IoState, IO_SESSION_STATE IoState2, PVOID Buffer, ULONG BufferSize);\nNTSTATUS NtQueryLicenseValue (PUNICODE_STRING Name, PULONG Type, PVOID Buffer, ULONG Length, PULONG ReturnedLength);\n```\n\n----------------------------------------\n\nTITLE: Declaring Windows NT Native API Functions in C\nDESCRIPTION: This snippet contains numerous function declarations for Windows NT native API calls. These functions are typically used for low-level system operations and are not part of the standard Win32 API. They provide direct access to kernel-level functionality.\nSOURCE: https://github.com/panda-re/panda-ng/blob/main/plugins/syscalls2/generated-in/all_windows_prototypes.txt#_snippet_11\n\nLANGUAGE: C\nCODE:\n```\nNTSTATUS NtReleaseKeyedEvent (HANDLE KeyedEventHandle, PVOID KeyValue, BOOLEAN Alertable, PLARGE_INTEGER Timeout);\nNTSTATUS NtReleaseMutant (HANDLE MutantHandle, PLONG PreviousCount);\nNTSTATUS NtReleaseSemaphore (HANDLE SemaphoreHandle, LONG ReleaseCount, PLONG PreviousCount);\nNTSTATUS NtReleaseWorkerFactoryWorker (HANDLE WorkerFactoryHandle);\nNTSTATUS NtRemoveIoCompletion (HANDLE IoCompletionHandle, PVOID *KeyContext, PVOID *ApcContext, PIO_STATUS_BLOCK IoStatusBlock, PLARGE_INTEGER Timeout);\nNTSTATUS NtRemoveIoCompletionEx (HANDLE IoCompletionHandle, PFILE_IO_COMPLETION_INFORMATION IoCompletionInformation, ULONG Count, PULONG NumEntriesRemoved, PLARGE_INTEGER Timeout, BOOLEAN Alertable);\nNTSTATUS NtRemoveProcessDebug (HANDLE ProcessHandle, HANDLE DebugObjectHandle);\nNTSTATUS NtRenameKey (HANDLE KeyHandle, PUNICODE_STRING NewName);\nNTSTATUS NtRenameTransactionManager (PUNICODE_STRING LogFileName, LPGUID ExistingTransactionManagerGuid);\nNTSTATUS NtReplaceKey (POBJECT_ATTRIBUTES NewFile, HANDLE TargetHandle, POBJECT_ATTRIBUTES OldFile);\nNTSTATUS NtReplacePartitionUnit (PUNICODE_STRING TargetInstancePath, PUNICODE_STRING SpareInstancePath, ULONG Flags);\nNTSTATUS NtReplyPort (HANDLE PortHandle, PPORT_MESSAGE ReplyMessage);\nNTSTATUS NtReplyWaitReceivePort (HANDLE PortHandle, PVOID *PortContext , PPORT_MESSAGE ReplyMessage, PPORT_MESSAGE ReceiveMessage);\nNTSTATUS NtReplyWaitReceivePortEx (HANDLE PortHandle, PVOID *PortContext, PPORT_MESSAGE ReplyMessage, PPORT_MESSAGE ReceiveMessage, PLARGE_INTEGER Timeout);\nNTSTATUS NtReplyWaitReplyPort (HANDLE PortHandle, PPORT_MESSAGE ReplyMessage);\nNTSTATUS NtRequestPort (HANDLE PortHandle, PPORT_MESSAGE RequestMessage);\nNTSTATUS NtRequestWaitReplyPort (HANDLE PortHandle, PPORT_MESSAGE RequestMessage, PPORT_MESSAGE ReplyMessage);\nNTSTATUS NtResetEvent (HANDLE EventHandle, PLONG PreviousState);\nNTSTATUS NtResetWriteWatch (HANDLE ProcessHandle, PVOID BaseAddress, SIZE_T RegionSize);\nNTSTATUS NtRestoreKey (HANDLE KeyHandle, HANDLE FileHandle, ULONG Flags);\nNTSTATUS NtResumeProcess (HANDLE ProcessHandle);\nNTSTATUS NtResumeThread (HANDLE ThreadHandle, PULONG PreviousSuspendCount);\nNTSTATUS NtRollbackComplete (HANDLE EnlistmentHandle, PLARGE_INTEGER TmVirtualClock);\nNTSTATUS NtRollbackEnlistment (HANDLE EnlistmentHandle, PLARGE_INTEGER TmVirtualClock);\nNTSTATUS NtRollbackTransaction (HANDLE TransactionHandle, BOOLEAN Wait);\nNTSTATUS NtRollforwardTransactionManager (HANDLE TransactionManagerHandle, PLARGE_INTEGER TmVirtualClock);\nNTSTATUS NtSaveKey (HANDLE KeyHandle, HANDLE FileHandle);\nNTSTATUS NtSaveKeyEx (HANDLE KeyHandle, HANDLE FileHandle, ULONG Format);\nNTSTATUS NtSaveMergedKeys (HANDLE HighPrecedenceKeyHandle, HANDLE LowPrecedenceKeyHandle, HANDLE FileHandle);\nNTSTATUS NtSecureConnectPort (PHANDLE PortHandle, PUNICODE_STRING PortName, PSECURITY_QUALITY_OF_SERVICE SecurityQos, PPORT_VIEW ClientView, PSID RequiredServerSid, PREMOTE_PORT_VIEW ServerView, PULONG MaxMessageLength, PVOID ConnectionInformation, PULONG ConnectionInformationLength);\nNTSTATUS NtSerializeBoot ();\nNTSTATUS NtSetBootEntryOrder (PULONG Ids, ULONG Count);\nNTSTATUS NtSetBootOptions (PBOOT_OPTIONS BootOptions, ULONG FieldsToChange);\nNTSTATUS NtSetContextThread (HANDLE ThreadHandle, PCONTEXT ThreadContext);\nNTSTATUS NtSetDebugFilterState (ULONG ComponentId, ULONG Level, BOOLEAN State);\nNTSTATUS NtSetDefaultHardErrorPort (HANDLE DefaultHardErrorPort);\nNTSTATUS NtSetDefaultLocale (BOOLEAN UserProfile, LCID DefaultLocaleId);\nNTSTATUS NtSetDefaultUILanguage (LANGID DefaultUILanguageId);\nNTSTATUS NtSetDriverEntryOrder (PULONG Ids, ULONG Count);\nNTSTATUS NtSetEaFile (HANDLE FileHandle, PIO_STATUS_BLOCK IoStatusBlock, PVOID Buffer, ULONG Length);\nNTSTATUS NtSetEvent (HANDLE EventHandle, PLONG PreviousState);\nNTSTATUS NtSetEventBoostPriority (HANDLE EventHandle);\nNTSTATUS NtSetHighEventPair (HANDLE EventPairHandle);\nNTSTATUS NtSetHighWaitLowEventPair (HANDLE EventPairHandle);\nNTSTATUS NtSetInformationDebugObject (HANDLE DebugObjectHandle, DEBUGOBJECTINFOCLASS DebugObjectInformationClass, PVOID DebugInformation, ULONG DebugInformationLength, PULONG ReturnLength);\nNTSTATUS NtSetInformationEnlistment (HANDLE EnlistmentHandle, ENLISTMENT_INFORMATION_CLASS EnlistmentInformationClass, PVOID EnlistmentInformation, ULONG EnlistmentInformationLength);\nNTSTATUS NtSetInformationFile (HANDLE FileHandle, PIO_STATUS_BLOCK IoStatusBlock, PVOID FileInformation, ULONG Length, FILE_INFORMATION_CLASS FileInformationClass);\nNTSTATUS NtSetInformationJobObject (HANDLE JobHandle, JOBOBJECTINFOCLASS JobObjectInformationClass, PVOID JobObjectInformation, ULONG JobObjectInformationLength);\nNTSTATUS NtSetInformationKey (HANDLE KeyHandle, KEY_SET_INFORMATION_CLASS KeySetInformationClass, PVOID KeySetInformation, ULONG KeySetInformationLength);\nNTSTATUS NtSetInformationObject (HANDLE Handle, OBJECT_INFORMATION_CLASS ObjectInformationClass, PVOID ObjectInformation, ULONG ObjectInformationLength);\nNTSTATUS NtSetInformationProcess (HANDLE ProcessHandle, PROCESSINFOCLASS ProcessInformationClass, PVOID ProcessInformation, ULONG ProcessInformationLength);\nNTSTATUS NtSetInformationResourceManager (HANDLE ResourceManagerHandle, RESOURCEMANAGER_INFORMATION_CLASS ResourceManagerInformationClass, PVOID ResourceManagerInformation, ULONG ResourceManagerInformationLength);\nNTSTATUS NtSetInformationThread (HANDLE ThreadHandle, THREADINFOCLASS ThreadInformationClass, PVOID ThreadInformation, ULONG ThreadInformationLength);\nNTSTATUS NtSetInformationToken (HANDLE TokenHandle, TOKEN_INFORMATION_CLASS TokenInformationClass, PVOID TokenInformation, ULONG TokenInformationLength);\nNTSTATUS NtSetInformationTransaction (HANDLE TransactionHandle, TRANSACTION_INFORMATION_CLASS TransactionInformationClass, PVOID TransactionInformation, ULONG TransactionInformationLength);\nNTSTATUS NtSetInformationTransactionManager (HANDLE TmHandle, TRANSACTIONMANAGER_INFORMATION_CLASS TransactionManagerInformationClass, PVOID TransactionManagerInformation, ULONG TransactionManagerInformationLength);\nNTSTATUS NtSetInformationWorkerFactory (HANDLE WorkerFactoryHandle, WORKERFACTORYINFOCLASS WorkerFactoryInformationClass, PVOID WorkerFactoryInformation, ULONG WorkerFactoryInformationLength);\nNTSTATUS NtSetIntervalProfile (ULONG Interval, KPROFILE_SOURCE Source);\nNTSTATUS NtSetIoCompletion (HANDLE IoCompletionHandle, PVOID KeyContext, PVOID ApcContext, NTSTATUS IoStatus, ULONG_PTR IoStatusInformation);\nNTSTATUS NtSetIoCompletionEx (HANDLE IoCompletionHandle, HANDLE IoCompletionReserveHandle, PVOID KeyContext, PVOID ApcContext, NTSTATUS IoStatus, ULONG_PTR IoStatusInformation);\nNTSTATUS NtSetLdtEntries (ULONG Selector0, ULONG Entry0Low, ULONG Entry0Hi, ULONG Selector1, ULONG Entry1Low, ULONG Entry1Hi);\nNTSTATUS NtSetLowEventPair (HANDLE EventPairHandle);\nNTSTATUS NtSetLowWaitHighEventPair (HANDLE EventPairHandle);\nNTSTATUS NtSetQuotaInformationFile (HANDLE FileHandle, PIO_STATUS_BLOCK IoStatusBlock, PVOID Buffer, ULONG Length);\nNTSTATUS NtSetSecurityObject (HANDLE Handle, SECURITY_INFORMATION SecurityInformation, PSECURITY_DESCRIPTOR SecurityDescriptor);\nNTSTATUS NtSetSystemEnvironmentValue (PUNICODE_STRING VariableName, PUNICODE_STRING VariableValue);\nNTSTATUS NtSetSystemEnvironmentValueEx (PUNICODE_STRING VariableName, LPGUID VendorGuid, PVOID Value, ULONG ValueLength, ULONG Attributes);\nNTSTATUS NtSetSystemInformation (SYSTEM_INFORMATION_CLASS SystemInformationClass, PVOID SystemInformation, ULONG SystemInformationLength);\nNTSTATUS NtSetSystemPowerState (POWER_ACTION SystemAction, SYSTEM_POWER_STATE MinSystemState, ULONG Flags);\nNTSTATUS NtSetSystemTime (PLARGE_INTEGER SystemTime, PLARGE_INTEGER PreviousTime);\nNTSTATUS NtSetThreadExecutionState (EXECUTION_STATE esFlags, PEXECUTION_STATE PreviousFlags);\nNTSTATUS NtSetTimer (HANDLE TimerHandle, PLARGE_INTEGER DueTime, PTIMER_APC_ROUTINE TimerApcRoutine, PVOID TimerContext, BOOLEAN WakeTimer, LONG Period, PBOOLEAN PreviousState);\nNTSTATUS NtSetTimerEx (HANDLE TimerHandle, TIMER_SET_INFORMATION_CLASS TimerSetInformationClass, PVOID TimerSetInformation, ULONG TimerSetInformationLength);\nNTSTATUS NtSetTimerResolution (ULONG DesiredTime, BOOLEAN SetResolution, PULONG ActualTime);\nNTSTATUS NtSetUuidSeed (PCHAR Seed);\nNTSTATUS NtSetValueKey (HANDLE KeyHandle, PUNICODE_STRING ValueName, ULONG TitleIndex, ULONG Type, PVOID Data, ULONG DataSize);\nNTSTATUS NtSetVolumeInformationFile (HANDLE FileHandle, PIO_STATUS_BLOCK IoStatusBlock, PVOID FsInformation, ULONG Length, FS_INFORMATION_CLASS FsInformationClass);\nNTSTATUS NtShutdownSystem (SHUTDOWN_ACTION Action);\nNTSTATUS NtShutdownWorkerFactory (HANDLE WorkerFactoryHandle, LONG *PendingWorkerCount);\nNTSTATUS NtSignalAndWaitForSingleObject (HANDLE SignalHandle, HANDLE WaitHandle, BOOLEAN Alertable, PLARGE_INTEGER Timeout);\nNTSTATUS NtSinglePhaseReject (HANDLE EnlistmentHandle, PLARGE_INTEGER TmVirtualClock);\nNTSTATUS NtStartProfile (HANDLE ProfileHandle);\nNTSTATUS NtStopProfile (HANDLE ProfileHandle);\nNTSTATUS NtSuspendProcess (HANDLE ProcessHandle);\nNTSTATUS NtSuspendThread (HANDLE ThreadHandle, PULONG PreviousSuspendCount);\nNTSTATUS NtSystemDebugControl (SYSDBG_COMMAND Command, PVOID InputBuffer, ULONG InputBufferLength, PVOID OutputBuffer, ULONG OutputBufferLength, PULONG ReturnLength);\nNTSTATUS NtTerminateJobObject (HANDLE JobHandle, NTSTATUS ExitStatus);\nNTSTATUS NtTerminateProcess (HANDLE ProcessHandle, NTSTATUS ExitStatus);\nNTSTATUS NtTerminateThread (HANDLE ThreadHandle, NTSTATUS ExitStatus);\nNTSTATUS NtTestAlert ();\nNTSTATUS NtThawRegistry ();\nNTSTATUS NtThawTransactions ();\nNTSTATUS NtTraceControl (ULONG FunctionCode, PVOID InBuffer, ULONG InBufferLen, PVOID OutBuffer, ULONG OutBufferLen, PULONG ReturnLength);\nNTSTATUS NtTraceEvent (HANDLE TraceHandle, ULONG Flags, ULONG FieldSize, PVOID Fields);\nNTSTATUS NtTranslateFilePath (PFILE_PATH InputFilePath, ULONG OutputType, PFILE_PATH OutputFilePath, PULONG OutputFilePathLength);\nNTSTATUS NtUmsThreadYield (PVOID SchedulerParam);\n```\n\n----------------------------------------\n\nTITLE: Windows NT File System Control Function Declaration in C\nDESCRIPTION: Function signature for NtFsControlFile that performs I/O control operations on file handles. Used for device-specific control codes and file system operations.\nSOURCE: https://github.com/panda-re/panda-ng/blob/main/plugins/syscalls2/generated-in/all_windows_prototypes.txt#_snippet_2\n\nLANGUAGE: C\nCODE:\n```\nNTSTATUS NtFsControlFile (HANDLE FileHandle, HANDLE Event, PIO_APC_ROUTINE ApcRoutine, PVOID ApcContext, PIO_STATUS_BLOCK IoStatusBlock, ULONG IoControlCode, PVOID InputBuffer, ULONG InputBufferLength, PVOID OutputBuffer, ULONG OutputBufferLength);\n```\n\n----------------------------------------\n\nTITLE: Registering System Call Callback - PANDA hypersyscalls - C\nDESCRIPTION: Shows how to register a callback for system call events in the PANDA hypersyscalls plugin using C. It defines the function prototype for registration and the structure used for specifying which syscalls and events to hook. The hook allows fine-grained control over which syscalls and entry/return points trigger the callback. Dependencies include the PANDA plugin API and its data structures; the callback function must match the required signature and receive relevant syscall and CPU state information.\nSOURCE: https://github.com/panda-re/panda-ng/blob/main/plugins/hypersyscalls/README.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n// Register a callback for system call events\\nvoid register_syscall_cb(struct syscall_hook *cb);\\n\\n// Syscall hook structure definition\\nstruct syscall_hook {\\n    const char *name;        // Name of syscall to hook, or NULL for all\\n    bool on_enter;           // Whether to call on syscall entry\\n    bool on_return;          // Whether to call on syscall return\\n    bool on_all;             // Whether to hook all syscalls\\n    bool enabled;            // Whether hook is enabled\\n    void *opaque;            // User data\\n    syscall_cb_t cb;         // Callback function\\n};\\n\\n// Callback function type\\ntypedef void (*syscall_cb_t)(CPUState *cpu, \\n                          struct syscall_prototype *syscall_info,\\n                          struct syscall *syscall,\\n                          struct syscall_hook *hook);\n```\n\n----------------------------------------\n\nTITLE: Add Kernelinfo Values as Section in kernelinfo.conf (GLib key-value)\nDESCRIPTION: Demonstrates how to insert extracted kernel offset info into a new section in kernelinfo.conf for use by osi_linux. The section header can be arbitrarily named and maps to the kconf_group argument provided to the plugin, with field assignments as parsed from dmesg output. The structure of each entry must conform to key=value syntax.\nSOURCE: https://github.com/panda-re/panda-ng/blob/main/plugins/osi_linux/README.md#_snippet_4\n\nLANGUAGE: GLib key-value\nCODE:\n```\n[my_kernel_info]\nname = #1 SMP Debian 3.2.51-1 i686\nversion.a = 3\n[...]\n```\n\n----------------------------------------\n\nTITLE: Running PANDA with hypersyscalls Plugin - bash\nDESCRIPTION: Illustrates the command-line invocation for launching PANDA with the hypercaller and hypersyscalls plugins, as well as a custom analysis plugin. The example expects that the $PANDA_PATH environment variable is set and shows a typical setup for replay analysis. Dependencies include the appropriate PANDA build and pre-recorded replay files. All plugin names must match installed PANDA plugins.\nSOURCE: https://github.com/panda-re/panda-ng/blob/main/plugins/hypersyscalls/README.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$PANDA_PATH/x86_64-softmmu/panda-system-x86_64 -replay foo \\\n    -panda hypercaller -panda hypersyscalls \\\n    -panda my_analysis_plugin\n```\n\n----------------------------------------\n\nTITLE: Process Management System Calls in C\nDESCRIPTION: System call definitions for process and thread management including scheduling, affinity, and thread operations. These declarations handle process control and thread management.\nSOURCE: https://github.com/panda-re/panda-ng/blob/main/plugins/syscalls2/generated-in/linux_mips_prototypes.txt#_snippet_3\n\nLANGUAGE: C\nCODE:\n```\nlong sys_gettid(void);\nlong sys_sched_setaffinity(pid_t pid, unsigned int len, unsigned long __user *user_mask_ptr);\nlong sys_sched_getaffinity(pid_t pid, unsigned int len, unsigned long __user *user_mask_ptr);\nlong sys_exit_group(int error_code);\n```\n\n----------------------------------------\n\nTITLE: Defining System Call Prototypes - Linux Kernel C\nDESCRIPTION: Declares a contiguous set of Linux system call function prototypes, where each prototype follows the sys_* naming convention and uses well-defined types for encoding user and kernel space parameter boundaries. Each declaration provides the needed C signature for the kernel to recognize and route system call invocations, typically using __user qualifiers to signal user-space memory involvement. Dependencies include C language, Linux kernel data structures (e.g., iovec, sigset_t, pid_t, statx, etc.), and the Linux syscall ABI. These definitions expect properly defined types and are not intended for direct user-space use; instead, they act as linkage for syscall entry points in the kernel.\nSOURCE: https://github.com/panda-re/panda-ng/blob/main/plugins/syscalls2/generated-in/linux_x64_prototypes.txt#_snippet_2\n\nLANGUAGE: C\nCODE:\n```\n289 long sys_signalfd4(int ufd, sigset_t __user *user_mask, size_t sizemask, int flags);\n290 long sys_eventfd2(unsigned int count, int flags);\n291 long sys_epoll_create1(int flags);\n292 long sys_dup3(unsigned int oldfd, unsigned int newfd, int flags);\n293 long sys_pipe2(int __user *fildes, int flags);\n294 long sys_inotify_init1(int flags);\n295 long sys_preadv(unsigned long fd, const struct iovec __user *vec, unsigned long vlen, unsigned long pos_l, unsigned long pos_h);\n296 long sys_pwritev(unsigned long fd, const struct iovec __user *vec, unsigned long vlen, unsigned long pos_l, unsigned long pos_h);\n297 long sys_rt_tgsigqueueinfo(pid_t tgid, pid_t pid, int sig, siginfo_t __user *uinfo);\n298 long sys_perf_event_open(struct perf_event_attr __user *attr_uptr, pid_t pid, int cpu, int group_fd, unsigned long flags);\n299 long sys_recvmmsg(int fd, struct mmsghdr __user *msg, unsigned int vlen, unsigned flags, struct timespec __user *timeout);\n300 long sys_fanotify_init(unsigned int flags, unsigned int event_f_flags);\n301 long sys_fanotify_mark(int fanotify_fd, unsigned int flags, u64 mask, int fd, const char __user *pathname);\n302 long sys_prlimit64(pid_t pid, unsigned int resource, const struct rlimit64 __user *new_rlim, struct rlimit64 __user *old_rlim);\n303 long sys_name_to_handle_at(int dfd, const char __user *name, struct file_handle __user *handle, int __user *mnt_id, int flag);\n304 long sys_open_by_handle_at(int mountdirfd, struct file_handle __user *handle, int flags);\n305 long sys_clock_adjtime(clockid_t which_clock, struct timex __user *tx);\n306 long sys_syncfs(int fd);\n307 long sys_sendmmsg(int fd, struct mmsghdr __user *msg, unsigned int vlen, unsigned flags);\n308 long sys_setns(int fd, int nstype);\n309 long sys_getcpu(unsigned __user *cpu, unsigned __user *node, struct getcpu_cache __user *cache);\n310 long sys_process_vm_readv(pid_t pid, const struct iovec __user *lvec, unsigned long liovcnt, const struct iovec __user *rvec, unsigned long riovcnt, unsigned long flags);\n311 long sys_process_vm_writev(pid_t pid, const struct iovec __user *lvec, unsigned long liovcnt, const struct iovec __user *rvec, unsigned long riovcnt, unsigned long flags);\n312 long sys_kcmp(pid_t pid1, pid_t pid2, int type, unsigned long idx1, unsigned long idx2);\n313 long sys_finit_module(int fd, const char __user *uargs, int flags);\n314 long sys_sched_setattr(pid_t pid, struct sched_attr __user *attr, unsigned int flags);\n315 long sys_sched_getattr(pid_t pid, struct sched_attr __user *attr, unsigned int size, unsigned int flags);\n316 long sys_renameat2(int olddfd, const char __user *oldname, int newdfd, const char __user *newname, unsigned int flags);\n317 long sys_seccomp(unsigned int op, unsigned int flags, const char __user *uargs);\n318 long sys_getrandom(char __user *buf, size_t count, unsigned int flags);\n319 long sys_memfd_create(const char __user *uname_ptr, unsigned int flags);\n320 long sys_kexec_file_load(int kernel_fd, int initrd_fd, unsigned long cmdline_len, const char __user *cmdline_ptr, unsigned long flags);\n321 long sys_bpf(int cmd, union bpf_attr *attr, unsigned int size);\n322 long sys_execveat(int dfd, const char __user *filename, const char __user *const __user *argv, const char __user *const __user *envp, int flags);\n323 long sys_userfaultfd(int flags);\n324 long sys_membarrier(int cmd, int flags);\n325 long sys_mlock2(unsigned long start, size_t len, int flags);\n326 long sys_copy_file_range(int fd_in, loff_t __user *off_in, int fd_out, loff_t __user *off_out, size_t len, unsigned int flags);\n327 long sys_preadv2(unsigned long fd, const struct iovec __user *vec, unsigned long vlen, unsigned long pos_l, unsigned long pos_h, rwf_t flags);\n328 long sys_pwritev2(unsigned long fd, const struct iovec __user *vec, unsigned long vlen, unsigned long pos_l, unsigned long pos_h, rwf_t flags);\n329 long sys_pkey_mprotect(unsigned long start, size_t len, unsigned long prot, int pkey);\n330 long sys_pkey_alloc(unsigned long flags, unsigned long init_val);\n331 long sys_pkey_free(int pkey);\n332 long sys_statx(int dfd, const char __user *path, unsigned flags, unsigned mask, struct statx __user *buffer);\n```\n\n----------------------------------------\n\nTITLE: Insert and Extract Kernel Offsets from kernelinfo.ko Output (sh)\nDESCRIPTION: Loads the previously built kernelinfo.ko kernel module (expected to fail with permissions in modern guests) and reads the extracted kernel offsets from the dmesg log. Expects the built module kernelinfo.ko and superuser privileges to access dmesg log. The key outputs are lines of kernel structure information between --KERNELINFO-BEGIN-- and ---KERNELINFO-END--- to be placed into the kernelinfo.conf config section.\nSOURCE: https://github.com/panda-re/panda-ng/blob/main/plugins/osi_linux/README.md#_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\n# insmod kernelinfo.ko\nError: could not insert module kernelinfo.ko: Operation not permitted\n# dmesg\n```\n\n----------------------------------------\n\nTITLE: Process Memory Details Retrieval Callback in C\nDESCRIPTION: Callback function type definition for retrieving process memory details. Currently only implemented in osi_linux.\nSOURCE: https://github.com/panda-re/panda-ng/blob/main/plugins/osi/README.md#_snippet_8\n\nLANGUAGE: C\nCODE:\n```\ntypedef void (*on_get_proc_mem_t)(CPUState *, OsiProc *, OsiProcMem **)\n```\n\n----------------------------------------\n\nTITLE: Defining File Access System Calls in C\nDESCRIPTION: These function prototypes define system calls for file access operations, including opening files with extended options and checking file accessibility. They provide more granular control over file operations.\nSOURCE: https://github.com/panda-re/panda-ng/blob/main/plugins/syscalls2/generated-in/linux_mips_prototypes.txt#_snippet_11\n\nLANGUAGE: C\nCODE:\n```\nlong sys_openat2(int dfd, const char __user *filename, struct open_how *how, size_t size);\nlong sys_faccessat2(int dfd, const char __user *filename, int mode, int flags);\n```\n\n----------------------------------------\n\nTITLE: Declaring Linux System Call Function Prototypes - C\nDESCRIPTION: This snippet declares function prototypes for Linux system calls in C, defining interfaces to kernel-level operations such as signaling, process management, resource limits, file descriptors, memory, and networking. Each function uses well-defined parameter types (e.g., pid_t, struct pointers), and many adopt __user annotations indicating arguments residing in user space. Dependencies include presence of standard system types (like pid_t, gid_t, uid_t) and relevant struct definitions (sigaltstack, sigaction, sockaddr, etc). Inputs vary by syscall and cover resource identifiers, pointers to user-space data, flags, and counts, while outputs are typically long integers encoding syscall results or error codes. No implementations are provided; these are pure declarations to support syscall lookup, forwarding, or documentation, with some syscalls not included due to platform constraints (e.g., lines 244-259 for AArch64).\nSOURCE: https://github.com/panda-re/panda-ng/blob/main/plugins/syscalls2/generated-in/linux_arm64_prototypes.txt#_snippet_1\n\nLANGUAGE: C\nCODE:\n```\n131 long sys_tgkill(pid_t tgid, pid_t pid, int sig);\n132 long sys_sigaltstack(const struct sigaltstack __user *uss, struct sigaltstack __user *uoss);\n133 long sys_rt_sigsuspend(sigset_t __user *unewset, size_t sigsetsize);\n134 long sys_rt_sigaction(int, const struct sigaction __user *, struct sigaction __user *, size_t);\n135 long sys_rt_sigprocmask(int how, sigset_t __user *set, sigset_t __user *oset, size_t sigsetsize);\n136 long sys_rt_sigpending(sigset_t __user *set, size_t sigsetsize);\n137 long sys_rt_sigtimedwait(const sigset_t __user *uthese, siginfo_t __user *uinfo, const struct timespec __user *uts, size_t sigsetsize);\n138 long sys_rt_sigqueueinfo(pid_t pid, int sig, siginfo_t __user *uinfo);\n139 long sys_rt_sigreturn(struct pt_regs *regs);\n140 long sys_setpriority(int which, int who, int niceval);\n141 long sys_getpriority(int which, int who);\n142 long sys_reboot(int magic1, int magic2, unsigned int cmd, void __user *arg);\n143 long sys_setregid(gid_t rgid, gid_t egid);\n144 long sys_setgid(gid_t gid);\n145 long sys_setreuid(uid_t ruid, uid_t euid);\n146 long sys_setuid(uid_t uid);\n147 long sys_setresuid(uid_t ruid, uid_t euid, uid_t suid);\n148 long sys_getresuid(uid_t __user *ruid, uid_t __user *euid, uid_t __user *suid);\n149 long sys_setresgid(gid_t rgid, gid_t egid, gid_t sgid);\n150 long sys_getresgid(gid_t __user *rgid, gid_t __user *egid, gid_t __user *sgid);\n151 long sys_setfsuid(uid_t uid);\n152 long sys_setfsgid(gid_t gid);\n153 long sys_times(struct tms __user *tbuf);\n154 long sys_setpgid(pid_t pid, pid_t pgid);\n155 long sys_getpgid(pid_t pid);\n156 long sys_getsid(pid_t pid);\n157 long sys_setsid(void);\n158 long sys_getgroups(int gidsetsize, gid_t __user *grouplist);\n159 long sys_setgroups(int gidsetsize, gid_t __user *grouplist);\n160 long sys_uname(struct new_utsname __user *name);\n161 long sys_sethostname(char __user *name, int len);\n162 long sys_setdomainname(char __user *name, int len);\n163 long sys_getrlimit(unsigned int resource, struct rlimit __user *rlim);\n164 long sys_setrlimit(unsigned int resource, struct rlimit __user *rlim);\n165 long sys_getrusage(int who, struct rusage __user *ru);\n166 long sys_umask(int mask);\n167 long sys_prctl(int option, unsigned long arg2, unsigned long arg3, unsigned long arg4, unsigned long arg5);\n168 long sys_getcpu(unsigned __user *cpu, unsigned __user *node, struct getcpu_cache __user *cache);\n169 long sys_gettimeofday(struct timeval __user *tv, struct timezone __user *tz);\n170 long sys_settimeofday(struct timeval __user *tv, struct timezone __user *tz);\n171 long sys_adjtimex(struct timex __user *txc_p);\n172 long sys_getpid(void);\n173 long sys_getppid(void);\n174 long sys_getuid(void);\n175 long sys_geteuid(void);\n176 long sys_getgid(void);\n177 long sys_getegid(void);\n178 long sys_gettid(void);\n179 long sys_sysinfo(struct sysinfo __user *info);\n180 long sys_mq_open(const char __user *name, int oflag, umode_t mode, struct mq_attr __user *attr);\n181 long sys_mq_unlink(const char __user *name);\n182 long sys_mq_timedsend(mqd_t mqdes, const char __user *msg_ptr, size_t msg_len, unsigned int msg_prio, const struct timespec __user *abs_timeout);\n183 long sys_mq_timedreceive(mqd_t mqdes, char __user *msg_ptr, size_t msg_len, unsigned int __user *msg_prio, const struct timespec __user *abs_timeout);\n184 long sys_mq_notify(mqd_t mqdes, const struct sigevent __user *notification);\n185 long sys_mq_getsetattr(mqd_t mqdes, const struct mq_attr __user *mqstat, struct mq_attr __user *omqstat);\n186 long sys_msgget(key_t key, int msgflg);\n187 long sys_msgctl(int msqid, int cmd, struct msqid_ds __user *buf);\n188 long sys_msgrcv(int msqid, struct msgbuf __user *msgp, size_t msgsz, long msgtyp, int msgflg);\n189 long sys_msgsnd(int msqid, struct msgbuf __user *msgp, size_t msgsz, int msgflg);\n190 long sys_semget(key_t key, int nsems, int semflg);\n191 long sys_semctl(int semid, int semnum, int cmd, unsigned long arg);\n192 long sys_semtimedop(int semid, struct sembuf __user *sops, unsigned nsops, const struct timespec __user *timeout);\n193 long sys_semop(int semid, struct sembuf __user *sops, unsigned nsops);\n194 long sys_shmget(key_t key, size_t size, int flag);\n195 long sys_shmctl(int shmid, int cmd, struct shmid_ds __user *buf);\n196 long sys_shmat(int shmid, char __user *shmaddr, int shmflg);\n197 long sys_shmdt(char __user *shmaddr);\n198 long sys_socket(int, int, int);\n199 long sys_socketpair(int, int, int, int __user *);\n200 long sys_bind(int, struct sockaddr __user *, int);\n201 long sys_listen(int, int);\n202 long sys_accept(int, struct sockaddr __user *, int __user *);\n203 long sys_connect(int, struct sockaddr __user *, int);\n204 long sys_getsockname(int, struct sockaddr __user *, int __user *);\n205 long sys_getpeername(int, struct sockaddr __user *, int __user *);\n206 long sys_sendto(int, void __user *, size_t, unsigned, struct sockaddr __user *, int);\n207 long sys_recvfrom(int, void __user *, size_t, unsigned, struct sockaddr __user *, int __user *);\n208 long sys_setsockopt(int fd, int level, int optname, char __user *optval, int optlen);\n209 long sys_getsockopt(int fd, int level, int optname, char __user *optval, int __user *optlen);\n210 long sys_shutdown(int, int);\n211 long sys_sendmsg(int fd, struct user_msghdr __user *msg, unsigned flags);\n212 long sys_recvmsg(int fd, struct user_msghdr __user *msg, unsigned flags);\n213 long sys_readahead(int fd, loff_t offset, size_t count);\n214 long sys_brk(unsigned long brk);\n215 long sys_munmap(unsigned long addr, size_t len);\n216 long sys_mremap(unsigned long addr, unsigned long old_len, unsigned long new_len, unsigned long flags, unsigned long new_addr);\n217 long sys_add_key(const char __user *_type, const char __user *_description, const void __user *_payload, size_t plen, key_serial_t destringid);\n218 long sys_request_key(const char __user *_type, const char __user *_description, const char __user *_callout_info, key_serial_t destringid);\n219 long sys_keyctl(int cmd, unsigned long arg2, unsigned long arg3, unsigned long arg4, unsigned long arg5);\n220 long sys_clone(unsigned long, unsigned long, int __user *, int __user *, unsigned long);\n221 long sys_execve(const char __user *filename, const char __user *const __user *argv, const char __user *const __user *envp);\n222 long sys_mmap(void *addr, size_t length, int prot, int flags, int fd, off_t offset);\n223 long sys_fadvise64(int fd, loff_t offset, size_t len, int advice);\n224 long sys_swapon(const char __user *specialfile, int swap_flags);\n225 long sys_swapoff(const char __user *specialfile);\n226 long sys_mprotect(unsigned long start, size_t len, unsigned long prot);\n227 long sys_msync(unsigned long start, size_t len, int flags);\n228 long sys_mlock(unsigned long start, size_t len);\n229 long sys_munlock(unsigned long start, size_t len);\n230 long sys_mlockall(int flags);\n231 long sys_munlockall(void);\n232 long sys_mincore(unsigned long start, size_t len, unsigned char __user *vec);\n233 long sys_madvise(unsigned long start, size_t len, int behavior);\n234 long sys_remap_file_pages(unsigned long start, unsigned long size, unsigned long prot, unsigned long pgoff, unsigned long flags);\n235 long sys_mbind(unsigned long start, unsigned long len, unsigned long mode, const unsigned long __user *nmask, unsigned long maxnode, unsigned flags);\n236 long sys_get_mempolicy(int __user *policy, unsigned long __user *nmask, unsigned long maxnode, unsigned long addr, unsigned long flags);\n237 long sys_set_mempolicy(int mode, const unsigned long __user *nmask, unsigned long maxnode);\n238 long sys_migrate_pages(pid_t pid, unsigned long maxnode, const unsigned long __user *from, const unsigned long __user *to);\n239 long sys_move_pages(pid_t pid, unsigned long nr_pages, const void __user * __user *pages, const int __user *nodes, int __user *status, int flags);\n240 long sys_rt_tgsigqueueinfo(pid_t tgid, pid_t pid, int sig, siginfo_t __user *uinfo);\n241 long sys_perf_event_open(struct perf_event_attr __user *attr_uptr, pid_t pid, int cpu, int group_fd, unsigned long flags);\n242 long sys_accept4(int, struct sockaddr *, int *, int);\n243 long sys_recvmmsg(int fd, struct mmsghdr __user *msg, unsigned int vlen, unsigned flags, struct timespec __user *timeout);\n// 244 - 259: not implemented on AArch64\n260 long sys_wait4(pid_t pid, int *stat_addr, int options, struct rusage *ru);\n261 long sys_prlimit64(pid_t pid, unsigned int resource, const struct rlimit64 *new_rlim, struct rlimit64 *old_rlim);\n262 long sys_fanotify_init(unsigned int flags, unsigned int event_f_flags);\n263 long sys_fanotify_mark(int fanotify_fd, unsigned int flags, u64 mask, int fd, const char __user *pathname);\n264 long sys_name_to_handle_at(int dfd, const char __user *name, struct file_handle __user *handle, int __user *mnt_id, int flag);\n265 long sys_open_by_handle_at(int mountdirfd, struct file_handle __user *handle, int flags);\n266 long sys_clock_adjtime(clockid_t which_clock, struct timex __user *tx);\n267 long sys_syncfs(int fd);\n268 long sys_setns(int fd, int nstype);\n269 long sys_sendmmsg(int fd, struct mmsghdr __user *msg, unsigned int vlen, unsigned flags);\n270 long sys_process_vm_readv(pid_t pid, const struct iovec __user *lvec, unsigned long liovcnt, const struct iovec __user *rvec, unsigned long riovcnt, unsigned long flags);\n271 long sys_process_vm_writev(pid_t pid, const struct iovec __user *lvec, unsigned long liovcnt, const struct iovec __user *rvec, unsigned long riovcnt, unsigned long flags);\n272 long sys_kcmp(pid_t pid1, pid_t pid2, int type, unsigned long idx1, unsigned long idx2);\n273 long sys_finit_module(int fd, const char __user *uargs, int flags);\n274 long sys_sched_setattr(pid_t pid, struct sched_attr __user *attr, unsigned int flags);\n275 long sys_sched_getattr(pid_t pid, struct sched_attr __user *attr, unsigned int size, unsigned int flags);\n276 long sys_renameat2(int olddfd, const char *oldname, int newdfd, const char *newname, unsigned int flags);\n```\n\n----------------------------------------\n\nTITLE: Defining Valid OS Regular Expressions in C\nDESCRIPTION: Array of regular expressions used to validate target operating system specifications for the OSI plugin.\nSOURCE: https://github.com/panda-re/panda-ng/blob/main/plugins/osi/README.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n  const char * valid_os_re[] = {\n      \"windows[-_]32[-_]xpsp[23]\",\n      \"windows[-_]32[-_]2000\",\n      \"windows[-_]32[-_]7sp[01]\",\n      \"windows[-_]64[-_]7sp[01]\",\n      \"linux[-_]32[-_].+\",\n      \"linux[-_]64[-_].+\",\n      \"freebsd[-_]32[-_].+\",\n      \"freebsd[-_]64[-_].+\",\n      NULL\n  };\n```\n\n----------------------------------------\n\nTITLE: Stack Mappings Retrieval Callback in C\nDESCRIPTION: Callback function type definition for retrieving stack segment mappings for a process. Linux-only implementation.\nSOURCE: https://github.com/panda-re/panda-ng/blob/main/plugins/osi/README.md#_snippet_14\n\nLANGUAGE: C\nCODE:\n```\ntypedef void (*on_get_stack_mappings_t)(CPUState *, OsiProc *, GArray**)\n```\n\n----------------------------------------\n\nTITLE: C Plugin Hypercall Implementation Example\nDESCRIPTION: Example of using the hypercaller plugin from a C plugin. Shows how to load the hypercaller plugin, get a pointer to the register_hypercall function, and register a custom hypercall handler.\nSOURCE: https://github.com/panda-re/panda-ng/blob/main/plugins/hypercaller/README.md#_snippet_4\n\nLANGUAGE: C\nCODE:\n```\n#include <panda/plugin.h>\n#include <hypercaller/hypercaller.h>\n\nhypercall_t* register_hypercall;\n\nvoid my_hypercall(CPUState *cpu) {\n    printf(\"Hello from my hypercall!\\n\");\n}\n\nbool init_plugin(void *self) {\n    void *hypercaller = panda_get_plugin_by_name(\"hypercaller\");\n    if (hypercaller == NULL){\n      panda_require(\"hypercaller\");\n      hypercaller = panda_get_plugin_by_name(\"hypercaller\");\n    }\n    register_hypercall = (hypercall_t*)dlsym(hypercaller, \"register_hypercall\");\n    register_hypercall(0x12345678, my_hypercall);\n    return true;\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring a PPP Auxiliary Vector Callback - PANDA Plugin - C\nDESCRIPTION: Defines the callback signature for handling auxiliary vector events within the PANDA framework's PPP interface. The on_rec_auxv_t callback receives the CPU state, translation block, and the struct auxv_values (containing auxiliary vector data). Dependencies include the syscalls2 plugin and the correct definition of CPUState, TranslationBlock, and auxv_values in the environment. Inputs are provided by the plugin at runtime; the auxiliary vector struct fields may be zeroed by the kernel and should not be blindly trusted.\nSOURCE: https://github.com/panda-re/panda-ng/blob/main/plugins/proc_start_linux/README.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nvoid (*on_rec_auxv_t)(CPUState *env, TranslationBlock *tb, struct auxv_values);\n```\n\n----------------------------------------\n\nTITLE: Kernel Modules Retrieval Callback in C\nDESCRIPTION: Callback function type definition for retrieving loaded kernel modules information. Returns a GArray of OsiModule elements.\nSOURCE: https://github.com/panda-re/panda-ng/blob/main/plugins/osi/README.md#_snippet_10\n\nLANGUAGE: C\nCODE:\n```\ntypedef void (*on_get_modules_t)(CPUState *, GArray **)\n```\n\n----------------------------------------\n\nTITLE: Declaring System Call Handler Prototypes - Linux Kernel - C\nDESCRIPTION: Each code line defines the function prototype for a specific Linux kernel system call handler in C, mapping an identifier and argument list to the associated syscall number. These declarations establish the ABI interface between user and kernel space for operations like file I/O, process control, inter-process communication, and resource management. All prototypes return a long (typically conveying either a result or a negative error code) and expect properly prepared user-pointers where annotated with __user. Dependencies include standard Linux kernel headers for types and structures such as stat, siginfo_t, pollfd, and various IPC constructs; parameters must conform to the expected types, and special care is required for memory passed between user and kernel contexts. Inputs include typed arguments per syscall signature, and outputs are typically the syscall’s return value or status via out-pointers. Limitations include strict calling conventions and kernel-supplied ABI compatibility.\nSOURCE: https://github.com/panda-re/panda-ng/blob/main/plugins/syscalls2/generated-in/linux_mips64_prototypes.txt#_snippet_6\n\nLANGUAGE: C\nCODE:\n```\n4418 long sys_mq_timedsend(mqd_t mqdes, const char __user *msg_ptr, size_t msg_len, unsigned int msg_prio, const struct __kernel_timespec __user *abs_timeout);\n4419 long sys_mq_timedreceive(mqd_t mqdes, char __user *msg_ptr, size_t msg_len, unsigned int __user *msg_prio, const struct __kernel_timespec __user *abs_timeout);\n4420 long sys_semtimedop(int semid, struct sembuf __user *sops, unsigned nsops, const struct __kernel_timespec __user *timeout);\n4421 long sys_rt_sigtimedwait(const sigset_t __user *uthese, siginfo_t __user *uinfo, const struct __kernel_timespec __user *uts, size_t sigsetsize);\n4422 long sys_futex(u32 __user *uaddr, int op, u32 val, struct __kernel_timespec __user *utime, u32 __user *uaddr2, u32 val3);\n4423 long sys_sched_rr_get_interval(pid_t pid, struct __kernel_timespec __user *interval);\n4424 long sys_pidfd_send_signal(int pidfd, int sig, siginfo_t __user *info, unsigned int flags);\n4425 long sys_io_uring_setup(u32 entries, struct io_uring_params __user *p);\n4426 long sys_io_uring_enter(unsigned int fd, u32 to_submit, u32 min_complete, u32 flags, const sigset_t __user *sig, size_t sigsz);\n4427 long sys_io_uring_register(unsigned int fd, unsigned int op, void __user *arg, unsigned int nr_args);\n4428 long sys_open_tree(int dfd, const char __user *path, unsigned flags);\n4429 long sys_move_mount(int from_dfd, const char __user *from_path, int to_dfd, const char __user *to_path, unsigned int ms_flags);\n4430 long sys_fsopen(const char __user *fs_name, unsigned int flags);\n4431 long sys_fsconfig(int fs_fd, unsigned int cmd, const char __user *key, const void __user *value, int aux);\n4432 long sys_fsmount(int fs_fd, unsigned int flags, unsigned int ms_flags);\n4433 long sys_fspick(int dfd, const char __user *path, unsigned int flags);\n4434 long sys_pidfd_open(pid_t pid, unsigned int flags);\n4437 long sys_openat2(int dfd, const char __user *filename, struct open_how *how, size_t size);\n4438 long sys_pidfd_getfd(int pidfd, int fd, unsigned int flags);\n4439 long sys_faccessat2(int dfd, const char __user *filename, int mode, int flags);\n5000 long sys_read(unsigned int fd, char __user *buf, size_t count);\n5001 long sys_write(unsigned int fd, const char __user *buf, size_t count);\n5002 long sys_open(const char __user *filename, int flags, umode_t mode);\n5003 long sys_close(unsigned int fd);\n5004 long sys_newstat(const char __user *filename, struct stat __user *statbuf);\n5005 long sys_newfstat(unsigned int fd, struct stat __user *statbuf);\n5006 long sys_newlstat(const char __user *filename, struct stat __user *statbuf);\n5007 long sys_poll(struct pollfd __user *ufds, unsigned int nfds, int timeout);\n5008 long sys_lseek(unsigned int fd, off_t offset, unsigned int whence);\n5009 long sys_old_mmap(struct mmap_arg_struct __user *arg);\n5010 long sys_mprotect(unsigned long start, size_t len, unsigned long prot);\n5011 long sys_munmap(unsigned long addr, size_t len);\n5012 long sys_brk(unsigned long brk);\n5013 long sys_rt_sigaction(int, const struct sigaction __user *, struct sigaction __user *, size_t);\n5014 long sys_rt_sigprocmask(int how, sigset_t __user *set, sigset_t __user *oset, size_t sigsetsize);\n5015 long sys_ioctl(unsigned int fd, unsigned int cmd, unsigned long arg);\n5016 long sys_pread64(unsigned int fd, char __user *buf, size_t count, loff_t pos);\n5017 long sys_pwrite64(unsigned int fd, const char __user *buf, size_t count, loff_t pos);\n5018 long sys_readv(unsigned long fd, const struct iovec __user *vec, unsigned long vlen);\n5019 long sys_writev(unsigned long fd, const struct iovec __user *vec, unsigned long vlen);\n5020 long sys_access(const char __user *filename, int mode);\n5021 long sys_pipe(int __user *fildes);\n5022 long sys_select(int n, fd_set __user *inp, fd_set __user *outp, fd_set __user *exp, struct __kernel_old_timeval __user *tvp);\n5023 long sys_sched_yield(void);\n5024 long sys_mremap(unsigned long addr, unsigned long old_len, unsigned long new_len, unsigned long flags, unsigned long new_addr);\n5025 long sys_msync(unsigned long start, size_t len, int flags);\n5026 long sys_mincore(unsigned long start, size_t len, unsigned char __user *vec);\n5027 long sys_madvise(unsigned long start, size_t len, int behavior);\n5028 long sys_shmget(key_t key, size_t size, int flag);\n5029 long sys_shmat(int shmid, char __user *shmaddr, int shmflg);\n5030 long sys_old_shmctl(int shmid, int cmd, struct shmid_ds __user *buf);\n5031 long sys_dup(unsigned int fildes);\n5032 long sys_dup2(unsigned int oldfd, unsigned int newfd);\n5033 long sys_pause(void);\n5034 long sys_nanosleep(struct __kernel_timespec __user *rqtp, struct __kernel_timespec __user *rmtp);\n5035 long sys_getitimer(int which, struct __kernel_old_itimerval __user *value);\n5036 long sys_setitimer(int which, struct __kernel_old_itimerval __user *value, struct __kernel_old_itimerval __user *ovalue);\n5037 long sys_alarm(unsigned int seconds);\n5038 long sys_getpid(void);\n5039 long sys_sendfile64(int out_fd, int in_fd, loff_t __user *offset, size_t count);\n5040 long sys_socket(int, int, int);\n5041 long sys_connect(int, struct sockaddr __user *, int);\n5042 long sys_accept(int, struct sockaddr __user *, int __user *);\n5043 long sys_sendto(int, void __user *, size_t, unsigned, struct sockaddr __user *, int);\n5044 long sys_recvfrom(int, void __user *, size_t, unsigned, struct sockaddr __user *, int __user *);\n5045 long sys_sendmsg(int fd, struct user_msghdr __user *msg, unsigned flags);\n5046 long sys_recvmsg(int fd, struct user_msghdr __user *msg, unsigned flags);\n5047 long sys_shutdown(int, int);\n5048 long sys_bind(int, struct sockaddr __user *, int);\n5049 long sys_listen(int, int);\n5050 long sys_getsockname(int, struct sockaddr __user *, int __user *);\n5051 long sys_getpeername(int, struct sockaddr __user *, int __user *);\n5052 long sys_socketpair(int, int, int, int __user *);\n5053 long sys_setsockopt(int fd, int level, int optname, char __user *optval, int optlen);\n5054 long sys_getsockopt(int fd, int level, int optname, char __user *optval, int __user *optlen);\n5055 long sys_clone(unsigned long, unsigned long, int __user *, int __user *, unsigned long);\n5056 long sys_fork(void);\n5057 long sys_execve(const char __user *filename, const char __user *const __user *argv, const char __user *const __user *envp);\n5058 long sys_exit(int error_code);\n5059 long sys_wait4(pid_t pid, int __user *stat_addr, int options, struct rusage __user *ru);\n5060 long sys_kill(pid_t pid, int sig);\n5061 long sys_newuname(struct new_utsname __user *name);\n5062 long sys_semget(key_t key, int nsems, int semflg);\n5063 long sys_semop(int semid, struct sembuf __user *sops, unsigned nsops);\n5064 long sys_old_semctl(int semid, int semnum, int cmd, unsigned long arg);\n5065 long sys_shmdt(char __user *shmaddr);\n5066 long sys_msgget(key_t key, int msgflg);\n5067 long sys_msgsnd(int msqid, struct msgbuf __user *msgp, size_t msgsz, int msgflg);\n5068 long sys_msgrcv(int msqid, struct msgbuf __user *msgp, size_t msgsz, long msgtyp, int msgflg);\n5069 long sys_old_msgctl(int msqid, int cmd, struct msqid_ds __user *buf);\n5070 long sys_fcntl(unsigned int fd, unsigned int cmd, unsigned long arg);\n5071 long sys_flock(unsigned int fd, unsigned int cmd);\n5072 long sys_fsync(unsigned int fd);\n5073 long sys_fdatasync(unsigned int fd);\n5074 long sys_truncate(const char __user *path, long length);\n5075 long sys_ftruncate(unsigned int fd, unsigned long length);\n5076 long sys_getdents(unsigned int fd, struct linux_dirent __user *dirent, unsigned int count);\n5077 long sys_getcwd(char __user *buf, unsigned long size);\n5078 long sys_chdir(const char __user *filename);\n5079 long sys_fchdir(unsigned int fd);\n5080 long sys_rename(const char __user *oldname, const char __user *newname);\n5081 long sys_mkdir(const char __user *pathname, umode_t mode);\n5082 long sys_rmdir(const char __user *pathname);\n5083 long sys_creat(const char __user *pathname, umode_t mode);\n5084 long sys_link(const char __user *oldname, const char __user *newname);\n5085 long sys_unlink(const char __user *pathname);\n5086 long sys_symlink(const char __user *old, const char __user *new);\n5087 long sys_readlink(const char __user *path, char __user *buf, int bufsiz);\n5088 long sys_chmod(const char __user *filename, umode_t mode);\n5089 long sys_fchmod(unsigned int fd, umode_t mode);\n5090 long sys_chown(const char __user *filename, uid_t user, gid_t group);\n5091 long sys_fchown(unsigned int fd, uid_t user, gid_t group);\n5092 long sys_lchown(const char __user *filename, uid_t user, gid_t group);\n5093 long sys_umask(int mask);\n5094 long sys_gettimeofday(struct __kernel_old_timeval __user *tv, struct timezone __user *tz);\n5095 long sys_getrlimit(unsigned int resource, struct rlimit __user *rlim);\n5096 long sys_getrusage(int who, struct rusage __user *ru);\n5097 long sys_sysinfo(struct sysinfo __user *info);\n5098 long sys_times(struct tms __user *tbuf);\n5099 long sys_ptrace(long request, long pid, unsigned long addr, unsigned long data);\n5100 long sys_getuid(void);\n5101 long sys_syslog(int type, char __user *buf, int len);\n5102 long sys_getgid(void);\n5103 long sys_setuid(uid_t uid);\n5104 long sys_setgid(gid_t gid);\n5105 long sys_geteuid(void);\n5106 long sys_getegid(void);\n5107 long sys_setpgid(pid_t pid, pid_t pgid);\n5108 long sys_getppid(void);\n5109 long sys_getpgrp(void);\n5110 long sys_setsid(void);\n5111 long sys_setreuid(uid_t ruid, uid_t euid);\n5112 long sys_setregid(gid_t rgid, gid_t egid);\n5113 long sys_getgroups(int gidsetsize, gid_t __user *grouplist);\n5114 long sys_setgroups(int gidsetsize, gid_t __user *grouplist);\n5115 long sys_setresuid(uid_t ruid, uid_t euid, uid_t suid);\n5116 long sys_getresuid(uid_t __user *ruid, uid_t __user *euid, uid_t __user *suid);\n5117 long sys_setresgid(gid_t rgid, gid_t egid, gid_t sgid);\n5118 long sys_getresgid(gid_t __user *rgid, gid_t __user *egid, gid_t __user *sgid);\n5119 long sys_getpgid(pid_t pid);\n5120 long sys_setfsuid(uid_t uid);\n5121 long sys_setfsgid(gid_t gid);\n5122 long sys_getsid(pid_t pid);\n```\n\n----------------------------------------\n\nTITLE: Declaring File and Process Management System Calls in C\nDESCRIPTION: This snippet declares system calls for file operations (open, close, read, write) and process management (fork, exit, wait). It includes function signatures with their respective parameters and return types.\nSOURCE: https://github.com/panda-re/panda-ng/blob/main/plugins/syscalls2/generated-in/freebsd_x64_prototypes.txt#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nint nosys(void);\nvoid sys_exit(int rval);\nint fork(void);\nssize_t read(int fd, void *buf, size_t nbyte);\nssize_t write(int fd, const void *buf, size_t nbyte);\nint open(const char *path, int flags, mode_t mode);\nint close(int fd);\nint wait4(int pid, int *status, int options, struct rusage *rusage);\nint creat(const char *path, int mode);\nint link(const char *path, const char *link);\nint unlink(const char *path);\n```\n\n----------------------------------------\n\nTITLE: Declaring NT System Call Stubs in C Header\nDESCRIPTION: Declares a series of external NTSTATUS-returning functions corresponding to the Windows NT system call interface. These prototypes define the interface for invoking core kernel operations, such as process, thread, file, memory, and event management. Dependencies include NT kernel headers and fundamental Windows types (such as HANDLE, NTSTATUS, PVOID, and various structures/classes defined in Windows DDK/WDK). Each function takes strongly-typed parameters suited to its kernel operation, and expected outputs are NTSTATUS error codes. Intended for use with kernel-mode or subsystem development, all declarations must match the actual system call signature to ensure binary compatibility. No implementation is provided here, only function prototypes.\nSOURCE: https://github.com/panda-re/panda-ng/blob/main/plugins/syscalls2/generated-in/windows_xpsp3_x86_prototypes.txt#_snippet_4\n\nLANGUAGE: C\nCODE:\n```\nNTSTATUS NtSetEventBoostPriority (HANDLE EventHandle);\nNTSTATUS NtSetHighEventPair (HANDLE EventPairHandle);\nNTSTATUS NtSetHighWaitLowEventPair (HANDLE EventPairHandle);\nNTSTATUS NtSetInformationDebugObject (HANDLE DebugObjectHandle, DEBUGOBJECTINFOCLASS DebugObjectInformationClass, PVOID DebugInformation, ULONG DebugInformationLength, PULONG ReturnLength);\nNTSTATUS NtSetInformationFile (HANDLE FileHandle, PIO_STATUS_BLOCK IoStatusBlock, PVOID FileInformation, ULONG Length, FILE_INFORMATION_CLASS FileInformationClass);\nNTSTATUS NtSetInformationJobObject (HANDLE JobHandle, JOBOBJECTINFOCLASS JobObjectInformationClass, PVOID JobObjectInformation, ULONG JobObjectInformationLength);\nNTSTATUS NtSetInformationKey (HANDLE KeyHandle, KEY_SET_INFORMATION_CLASS KeySetInformationClass, PVOID KeySetInformation, ULONG KeySetInformationLength);\nNTSTATUS NtSetInformationObject (HANDLE Handle, OBJECT_INFORMATION_CLASS ObjectInformationClass, PVOID ObjectInformation, ULONG ObjectInformationLength);\nNTSTATUS NtSetInformationProcess (HANDLE ProcessHandle, PROCESSINFOCLASS ProcessInformationClass, PVOID ProcessInformation, ULONG ProcessInformationLength);\nNTSTATUS NtSetInformationThread (HANDLE ThreadHandle, THREADINFOCLASS ThreadInformationClass, PVOID ThreadInformation, ULONG ThreadInformationLength);\nNTSTATUS NtSetInformationToken (HANDLE TokenHandle, TOKEN_INFORMATION_CLASS TokenInformationClass, PVOID TokenInformation, ULONG TokenInformationLength);\nNTSTATUS NtSetIntervalProfile (ULONG Interval, KPROFILE_SOURCE Source);\nNTSTATUS NtSetIoCompletion (HANDLE IoCompletionHandle, PVOID KeyContext, PVOID ApcContext, NTSTATUS IoStatus, ULONG_PTR IoStatusInformation);\nNTSTATUS NtSetLdtEntries (ULONG Selector0, ULONG Entry0Low, ULONG Entry0Hi, ULONG Selector1, ULONG Entry1Low, ULONG Entry1Hi);\nNTSTATUS NtSetLowEventPair (HANDLE EventPairHandle);\nNTSTATUS NtSetLowWaitHighEventPair (HANDLE EventPairHandle);\nNTSTATUS NtSetQuotaInformationFile (HANDLE FileHandle, PIO_STATUS_BLOCK IoStatusBlock, PVOID Buffer, ULONG Length);\nNTSTATUS NtSetSecurityObject (HANDLE Handle, SECURITY_INFORMATION SecurityInformation, PSECURITY_DESCRIPTOR SecurityDescriptor);\nNTSTATUS NtSetSystemEnvironmentValue (PUNICODE_STRING VariableName, PUNICODE_STRING VariableValue);\nNTSTATUS NtSetSystemEnvironmentValueEx (PUNICODE_STRING VariableName, LPGUID VendorGuid, PVOID Value, ULONG ValueLength, ULONG Attributes);\nNTSTATUS NtSetSystemInformation (SYSTEM_INFORMATION_CLASS SystemInformationClass, PVOID SystemInformation, ULONG SystemInformationLength);\nNTSTATUS NtSetSystemPowerState (POWER_ACTION SystemAction, SYSTEM_POWER_STATE MinSystemState, ULONG Flags);\nNTSTATUS NtSetSystemTime (PLARGE_INTEGER SystemTime, PLARGE_INTEGER PreviousTime);\nNTSTATUS NtSetThreadExecutionState (EXECUTION_STATE esFlags, PEXECUTION_STATE PreviousFlags);\nNTSTATUS NtSetTimer (HANDLE TimerHandle, PLARGE_INTEGER DueTime, PTIMER_APC_ROUTINE TimerApcRoutine, PVOID TimerContext, BOOLEAN WakeTimer, LONG Period, PBOOLEAN PreviousState);\nNTSTATUS NtSetTimerResolution (ULONG DesiredTime, BOOLEAN SetResolution, PULONG ActualTime);\nNTSTATUS NtSetUuidSeed (PCHAR Seed);\nNTSTATUS NtSetValueKey (HANDLE KeyHandle, PUNICODE_STRING ValueName, ULONG TitleIndex, ULONG Type, PVOID Data, ULONG DataSize);\nNTSTATUS NtSetVolumeInformationFile (HANDLE FileHandle, PIO_STATUS_BLOCK IoStatusBlock, PVOID FsInformation, ULONG Length, FS_INFORMATION_CLASS FsInformationClass);\nNTSTATUS NtShutdownSystem (SHUTDOWN_ACTION Action);\nNTSTATUS NtSignalAndWaitForSingleObject (HANDLE SignalHandle, HANDLE WaitHandle, BOOLEAN Alertable, PLARGE_INTEGER Timeout);\nNTSTATUS NtStartProfile (HANDLE ProfileHandle);\nNTSTATUS NtStopProfile (HANDLE ProfileHandle);\nNTSTATUS NtSuspendProcess (HANDLE ProcessHandle);\nNTSTATUS NtSuspendThread (HANDLE ThreadHandle, PULONG PreviousSuspendCount);\nNTSTATUS NtSystemDebugControl (SYSDBG_COMMAND Command, PVOID InputBuffer, ULONG InputBufferLength, PVOID OutputBuffer, ULONG OutputBufferLength, PULONG ReturnLength);\nNTSTATUS NtTerminateJobObject (HANDLE JobHandle, NTSTATUS ExitStatus);\nNTSTATUS NtTerminateProcess (HANDLE ProcessHandle, NTSTATUS ExitStatus);\nNTSTATUS NtTerminateThread (HANDLE ThreadHandle, NTSTATUS ExitStatus);\nNTSTATUS NtTestAlert ();\nNTSTATUS NtTraceEvent (HANDLE TraceHandle, ULONG Flags, ULONG FieldSize, PVOID Fields);\nNTSTATUS NtTranslateFilePath (PFILE_PATH InputFilePath, ULONG OutputType, PFILE_PATH OutputFilePath, PULONG OutputFilePathLength);\nNTSTATUS NtUnloadDriver (PUNICODE_STRING DriverServiceName);\nNTSTATUS NtUnloadKey (POBJECT_ATTRIBUTES TargetKey);\nNTSTATUS NtUnloadKeyEx (POBJECT_ATTRIBUTES TargetKey, HANDLE Event);\nNTSTATUS NtUnlockFile (HANDLE FileHandle, PIO_STATUS_BLOCK IoStatusBlock, PLARGE_INTEGER ByteOffset, PLARGE_INTEGER Length, ULONG Key);\nNTSTATUS NtUnlockVirtualMemory (HANDLE ProcessHandle, PVOID *BaseAddress, PSIZE_T RegionSize, ULONG MapType);\nNTSTATUS NtUnmapViewOfSection (HANDLE ProcessHandle, PVOID BaseAddress);\nNTSTATUS NtVdmControl (VDMSERVICECLASS Service, PVOID ServiceData);\nNTSTATUS NtWaitForDebugEvent (HANDLE DebugObjectHandle, BOOLEAN Alertable, PLARGE_INTEGER Timeout, PDBGUI_WAIT_STATE_CHANGE WaitStateChange);\nNTSTATUS NtWaitForMultipleObjects (ULONG Count, HANDLE Handles[], WAIT_TYPE WaitType, BOOLEAN Alertable, PLARGE_INTEGER Timeout);\nNTSTATUS NtWaitForSingleObject (HANDLE Handle, BOOLEAN Alertable, PLARGE_INTEGER Timeout);\nNTSTATUS NtWaitHighEventPair (HANDLE EventPairHandle);\nNTSTATUS NtWaitLowEventPair (HANDLE EventPairHandle);\nNTSTATUS NtWriteFile (HANDLE FileHandle, HANDLE Event, PIO_APC_ROUTINE ApcRoutine, PVOID ApcContext, PIO_STATUS_BLOCK IoStatusBlock, PVOID Buffer, ULONG Length, PLARGE_INTEGER ByteOffset, PULONG Key);\nNTSTATUS NtWriteFileGather (HANDLE FileHandle, HANDLE Event, PIO_APC_ROUTINE ApcRoutine, PVOID ApcContext, PIO_STATUS_BLOCK IoStatusBlock, PFILE_SEGMENT_ELEMENT SegmentArray, ULONG Length, PLARGE_INTEGER ByteOffset, PULONG Key);\nNTSTATUS NtWriteRequestData (HANDLE PortHandle, PPORT_MESSAGE Message, ULONG DataEntryIndex, PVOID Buffer, SIZE_T BufferSize, PSIZE_T NumberOfBytesWritten);\nNTSTATUS NtWriteVirtualMemory (HANDLE ProcessHandle, PVOID BaseAddress, PVOID Buffer, SIZE_T BufferSize, PSIZE_T NumberOfBytesWritten);\nNTSTATUS NtYieldExecution ();\nNTSTATUS NtCreateKeyedEvent (PHANDLE KeyedEventHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, ULONG Flags);\nNTSTATUS NtOpenKeyedEvent (PHANDLE KeyedEventHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes);\nNTSTATUS NtReleaseKeyedEvent (HANDLE KeyedEventHandle, PVOID KeyValue, BOOLEAN Alertable, PLARGE_INTEGER Timeout);\nNTSTATUS NtWaitForKeyedEvent (HANDLE KeyedEventHandle, PVOID KeyValue, BOOLEAN Alertable, PLARGE_INTEGER Timeout);\nNTSTATUS NtQueryPortInformationProcess ();\n\n```\n\n----------------------------------------\n\nTITLE: Python Hypercall Implementation Example\nDESCRIPTION: Example of using the hypercaller plugin from Python with a decorator approach. Defines a magic number and registers a simple handler function that prints a message.\nSOURCE: https://github.com/panda-re/panda-ng/blob/main/plugins/hypercaller/README.md#_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\nMAGIC = 0x12345678\n@panda.hypercall(MAGIC)\ndef hypercall(cpu):\n    print(\"Hello from my hypercall!\"\n```\n\n----------------------------------------\n\nTITLE: File Mappings Retrieval Callback in C\nDESCRIPTION: Callback function type definition for retrieving file-backed memory mappings for a process. Returns a GArray of OsiModule elements.\nSOURCE: https://github.com/panda-re/panda-ng/blob/main/plugins/osi/README.md#_snippet_12\n\nLANGUAGE: C\nCODE:\n```\ntypedef void (*on_get_file_mappings_t)(CPUState *, OsiProc *, GArray**)\n```\n\n----------------------------------------\n\nTITLE: Declaring Linux System Call Prototypes in C\nDESCRIPTION: This code snippet lists C function prototypes for Linux kernel system calls, specifying syscall names, return types, and parameters that match their expected usage in the kernel. Intended for inclusion in kernel headers or source files, each prototype defines a syscall interface whose implementation is provided elsewhere. Key parameters commonly include file descriptors, pointers to user memory, structures for passing complex data, and flags or mode settings. Inputs are arguments as documented per call; the long return value typically indicates success, error codes, or operation result. The code assumes prior definitions of all referenced types, and should be integrated within a Linux kernel source environment.\nSOURCE: https://github.com/panda-re/panda-ng/blob/main/plugins/syscalls2/generated-in/linux_mips_prototypes.txt#_snippet_4\n\nLANGUAGE: C\nCODE:\n```\n4289 long sys_mkdirat(int dfd, const char __user *pathname, umode_t mode);\n4290 long sys_mknodat(int dfd, const char __user *filename, umode_t mode, unsigned dev);\n4291 long sys_fchownat(int dfd, const char __user *filename, uid_t user, gid_t group, int flag);\n4292 long sys_futimesat_time32(unsigned int dfd, const char __user *filename, struct old_timeval32 __user *t);\n4293 long sys_fstatat64(int dfd, const char __user *filename, struct stat64 __user *statbuf, int flag);\n4294 long sys_unlinkat(int dfd, const char __user *pathname, int flag);\n4295 long sys_renameat(int olddfd, const char __user *oldname, int newdfd, const char __user *newname);\n4296 long sys_linkat(int olddfd, const char __user *oldname, int newdfd, const char __user *newname, int flags);\n4297 long sys_symlinkat(const char __user *oldname, int newdfd, const char __user *newname);\n4298 long sys_readlinkat(int dfd, const char __user *path, char __user *buf, int bufsiz);\n4299 long sys_fchmodat(int dfd, const char __user *filename, umode_t mode);\n4300 long sys_faccessat(int dfd, const char __user *filename, int mode);\n4301 long sys_pselect6_time32(int, fd_set __user *, fd_set __user *, fd_set __user *, struct old_timespec32 __user *, void __user *);\n4302 long sys_ppoll_time32(struct pollfd __user *, unsigned int, struct old_timespec32 __user *, const sigset_t __user *, size_t);\n4303 long sys_unshare(unsigned long unshare_flags);\n4304 long sys_splice(int fd_in, loff_t __user *off_in, int fd_out, loff_t __user *off_out, size_t len, unsigned int flags);\n4305 long sys_sync_file_range(int fd, loff_t offset, loff_t nbytes, unsigned int flags);\n4306 long sys_tee(int fdin, int fdout, size_t len, unsigned int flags);\n4307 long sys_vmsplice(int fd, const struct iovec __user *iov, unsigned long nr_segs, unsigned int flags);\n4308 long sys_move_pages(pid_t pid, unsigned long nr_pages, const void __user * __user *pages, const int __user *nodes, int __user *status, int flags);\n4309 long sys_set_robust_list(struct robust_list_head __user *head, size_t len);\n4310 long sys_get_robust_list(int pid, struct robust_list_head __user * __user *head_ptr, size_t __user *len_ptr);\n4311 long sys_kexec_load(unsigned long entry, unsigned long nr_segments, struct kexec_segment __user *segments, unsigned long flags);\n4312 long sys_getcpu(unsigned __user *cpu, unsigned __user *node, struct getcpu_cache __user *cache);\n4313 long sys_epoll_pwait(int epfd, struct epoll_event __user *events, int maxevents, int timeout, const sigset_t __user *sigmask, size_t sigsetsize);\n4314 long sys_ioprio_set(int which, int who, int ioprio);\n4315 long sys_ioprio_get(int which, int who);\n4316 long sys_utimensat_time32(unsigned int dfd, const char __user *filename, struct old_timespec32 __user *t, int flags);\n4317 long sys_signalfd(int ufd, sigset_t __user *user_mask, size_t sizemask);\n4318 long sys_ni_syscall(void);\n4319 long sys_eventfd(unsigned int count);\n4320 long sys_fallocate(int fd, int mode, loff_t offset, loff_t len);\n4321 long sys_timerfd_create(int clockid, int flags);\n4322 long sys_timerfd_gettime32(int ufd, struct old_itimerspec32 __user *otmr);\n4323 long sys_timerfd_settime32(int ufd, int flags, const struct old_itimerspec32 __user *utmr, struct old_itimerspec32 __user *otmr);\n4324 long sys_signalfd4(int ufd, sigset_t __user *user_mask, size_t sizemask, int flags);\n4325 long sys_eventfd2(unsigned int count, int flags);\n4326 long sys_epoll_create1(int flags);\n4327 long sys_dup3(unsigned int oldfd, unsigned int newfd, int flags);\n4328 long sys_pipe2(int __user *fildes, int flags);\n4329 long sys_inotify_init1(int flags);\n4330 long sys_preadv(unsigned long fd, const struct iovec __user *vec, unsigned long vlen, unsigned long pos_l, unsigned long pos_h);\n4331 long sys_pwritev(unsigned long fd, const struct iovec __user *vec, unsigned long vlen, unsigned long pos_l, unsigned long pos_h);\n4332 long sys_rt_tgsigqueueinfo(pid_t tgid, pid_t pid, int sig, siginfo_t __user *uinfo);\n4333 long sys_perf_event_open(struct perf_event_attr __user *attr_uptr, pid_t pid, int cpu, int group_fd, unsigned long flags);\n4334 long sys_accept4(int, struct sockaddr __user *, int __user *, int);\n4335 long sys_recvmmsg_time32(int fd, struct mmsghdr __user *msg, unsigned int vlen, unsigned flags, struct old_timespec32 __user *timeout);\n4336 long sys_fanotify_init(unsigned int flags, unsigned int event_f_flags);\n4337 long sys_fanotify_mark(int fanotify_fd, unsigned int flags, u64 mask, int fd, const char __user *pathname);\n4338 long sys_prlimit64(pid_t pid, unsigned int resource, const struct rlimit64 __user *new_rlim, struct rlimit64 __user *old_rlim);\n4339 long sys_name_to_handle_at(int dfd, const char __user *name, struct file_handle __user *handle, int __user *mnt_id, int flag);\n4340 long sys_open_by_handle_at(int mountdirfd, struct file_handle __user *handle, int flags);\n4341 long sys_clock_adjtime32(clockid_t which_clock, struct old_timex32 __user *tx);\n4342 long sys_syncfs(int fd);\n4343 long sys_sendmmsg(int fd, struct mmsghdr __user *msg, unsigned int vlen, unsigned flags);\n4344 long sys_setns(int fd, int nstype);\n4345 long sys_process_vm_readv(pid_t pid, const struct iovec __user *lvec, unsigned long liovcnt, const struct iovec __user *rvec, unsigned long riovcnt, unsigned long flags);\n4346 long sys_process_vm_writev(pid_t pid, const struct iovec __user *lvec, unsigned long liovcnt, const struct iovec __user *rvec, unsigned long riovcnt, unsigned long flags);\n4347 long sys_kcmp(pid_t pid1, pid_t pid2, int type, unsigned long idx1, unsigned long idx2);\n4348 long sys_finit_module(int fd, const char __user *uargs, int flags);\n4349 long sys_sched_setattr(pid_t pid, struct sched_attr __user *attr, unsigned int flags);\n4350 long sys_sched_getattr(pid_t pid, struct sched_attr __user *attr, unsigned int size, unsigned int flags);\n4351 long sys_renameat2(int olddfd, const char __user *oldname, int newdfd, const char __user *newname, unsigned int flags);\n4352 long sys_seccomp(unsigned int op, unsigned int flags, void __user *uargs);\n4353 long sys_getrandom(char __user *buf, size_t count, unsigned int flags);\n4354 long sys_memfd_create(const char __user *uname_ptr, unsigned int flags);\n4355 long sys_bpf(int cmd, union bpf_attr *attr, unsigned int size);\n4356 long sys_execveat(int dfd, const char __user *filename, const char __user *const __user *argv, const char __user *const __user *envp, int flags);\n4357 long sys_userfaultfd(int flags);\n4358 long sys_membarrier(int cmd, int flags);\n4359 long sys_mlock2(unsigned long start, size_t len, int flags);\n4360 long sys_copy_file_range(int fd_in, loff_t __user *off_in, int fd_out, loff_t __user *off_out, size_t len, unsigned int flags);\n4361 long sys_preadv2(unsigned long fd, const struct iovec __user *vec, unsigned long vlen, unsigned long pos_l, unsigned long pos_h, rwf_t flags);\n4362 long sys_pwritev2(unsigned long fd, const struct iovec __user *vec, unsigned long vlen, unsigned long pos_l, unsigned long pos_h, rwf_t flags);\n4363 long sys_pkey_mprotect(unsigned long start, size_t len, unsigned long prot, int pkey);\n4364 long sys_pkey_alloc(unsigned long flags, unsigned long init_val);\n4365 long sys_pkey_free(int pkey);\n4366 long sys_statx(int dfd, const char __user *path, unsigned flags, unsigned mask, struct statx __user *buffer);\n4367 long sys_rseq(struct rseq __user *rseq, uint32_t rseq_len, int flags, uint32_t sig);\n4368 long sys_io_pgetevents_time32(aio_context_t ctx_id, long min_nr, long nr, struct io_event __user *events, struct old_timespec32 __user *timeout, const struct __aio_sigset *sig);\n// Arch-specfic syscalls go here\n4393 long sys_semget(key_t key, int nsems, int semflg);\n4394 long sys_semctl(int semid, int semnum, int cmd, unsigned long arg);\n4395 long sys_shmget(key_t key, size_t size, int flag);\n4396 long sys_shmctl(int shmid, int cmd, struct shmid_ds __user *buf);\n4397 long sys_shmat(int shmid, char __user *shmaddr, int shmflg);\n4398 long sys_shmdt(char __user *shmaddr);\n4399 long sys_msgget(key_t key, int msgflg);\n4400 long sys_msgsnd(int msqid, struct msgbuf __user *msgp, size_t msgsz, int msgflg);\n4401 long sys_msgrcv(int msqid, struct msgbuf __user *msgp, size_t msgsz, long msgtyp, int msgflg);\n4402 long sys_msgctl(int msqid, int cmd, struct msqid_ds __user *buf);\n4403 long sys_clock_gettime(clockid_t which_clock, struct __kernel_timespec __user *tp);\n4404 long sys_clock_settime(clockid_t which_clock, const struct __kernel_timespec __user *tp);\n4405 long sys_clock_adjtime(clockid_t which_clock, struct __kernel_timex __user *tx);\n4406 long sys_clock_getres(clockid_t which_clock, struct __kernel_timespec __user *tp);\n4407 long sys_clock_nanosleep(clockid_t which_clock, int flags, const struct __kernel_timespec __user *rqtp, struct __kernel_timespec __user *rmtp);\n4408 long sys_timer_gettime(timer_t timer_id, struct __kernel_itimerspec __user *setting);\n4409 long sys_timer_settime(timer_t timer_id, int flags, const struct __kernel_itimerspec __user *new_setting, struct __kernel_itimerspec __user *old_setting);\n4410 long sys_timerfd_gettime(int ufd, struct __kernel_itimerspec __user *otmr);\n4411 long sys_timerfd_settime(int ufd, int flags, const struct __kernel_itimerspec __user *utmr, struct __kernel_itimerspec __user *otmr);\n4412 long sys_utimensat(int dfd, const char __user *filename, struct __kernel_timespec __user *utimes, int flags);\n4413 long sys_pselect6(int, fd_set __user *, fd_set __user *, fd_set __user *, struct __kernel_timespec __user *, void __user *);\n4414 long sys_ppoll(struct pollfd __user *, unsigned int, struct __kernel_timespec __user *, const sigset_t __user *, size_t);\n4416 long sys_io_pgetevents(aio_context_t ctx_id, long min_nr, long nr, struct io_event __user *events, struct __kernel_timespec __user *timeout, const struct __aio_sigset *sig);\n4417 long sys_recvmmsg(int fd, struct mmsghdr __user *msg, unsigned int vlen, unsigned flags, struct __kernel_timespec __user *timeout);\n```\n\n----------------------------------------\n\nTITLE: Declaring Multiple Linux System Call Prototypes - C\nDESCRIPTION: This code snippet lists function prototypes for various Linux system call handlers in C, each prefixed with the 'sys_' naming convention. Each function declaration includes parameter types and names matching the expected syscall arguments, such as file descriptors, pointers to user-space data, size types, and flags. These functions act as kernel entry points for system calls, and the prototypes must match the implementation signatures in the kernel. No concrete logic is present; instead, this file provides a mapping between syscall numbers and their corresponding handlers, with parameter lists that must be respected by both the user space interface and the kernel's syscall dispatcher.\nSOURCE: https://github.com/panda-re/panda-ng/blob/main/plugins/syscalls2/generated-in/linux_mips64_prototypes.txt#_snippet_8\n\nLANGUAGE: C\nCODE:\n```\n5254 long sys_renameat(int olddfd, const char __user *oldname, int newdfd, const char __user *newname);\n5255 long sys_linkat(int olddfd, const char __user *oldname, int newdfd, const char __user *newname, int flags);\n5256 long sys_symlinkat(const char __user *oldname, int newdfd, const char __user *newname);\n5257 long sys_readlinkat(int dfd, const char __user *path, char __user *buf, int bufsiz);\n5258 long sys_fchmodat(int dfd, const char __user *filename, umode_t mode);\n5259 long sys_faccessat(int dfd, const char __user *filename, int mode);\n5260 long sys_pselect6(int, fd_set __user *, fd_set __user *, fd_set __user *, struct __kernel_timespec __user *, void __user *);\n5261 long sys_ppoll(struct pollfd __user *, unsigned int, struct __kernel_timespec __user *, const sigset_t __user *, size_t);\n5262 long sys_unshare(unsigned long unshare_flags);\n5263 long sys_splice(int fd_in, loff_t __user *off_in, int fd_out, loff_t __user *off_out, size_t len, unsigned int flags);\n5264 long sys_sync_file_range(int fd, loff_t offset, loff_t nbytes, unsigned int flags);\n5265 long sys_tee(int fdin, int fdout, size_t len, unsigned int flags);\n5266 long sys_vmsplice(int fd, const struct iovec __user *iov, unsigned long nr_segs, unsigned int flags);\n5267 long sys_move_pages(pid_t pid, unsigned long nr_pages, const void __user * __user *pages, const int __user *nodes, int __user *status, int flags);\n5268 long sys_set_robust_list(struct robust_list_head __user *head, size_t len);\n5269 long sys_get_robust_list(int pid, struct robust_list_head __user * __user *head_ptr, size_t __user *len_ptr);\n5270 long sys_kexec_load(unsigned long entry, unsigned long nr_segments, struct kexec_segment __user *segments, unsigned long flags);\n5271 long sys_getcpu(unsigned __user *cpu, unsigned __user *node, struct getcpu_cache __user *cache);\n5272 long sys_epoll_pwait(int epfd, struct epoll_event __user *events, int maxevents, int timeout, const sigset_t __user *sigmask, size_t sigsetsize);\n5273 long sys_ioprio_set(int which, int who, int ioprio);\n5274 long sys_ioprio_get(int which, int who);\n5275 long sys_utimensat(int dfd, const char __user *filename, struct __kernel_timespec __user *utimes, int flags);\n5276 long sys_signalfd(int ufd, sigset_t __user *user_mask, size_t sizemask);\n5277 long sys_ni_syscall(void);\n5278 long sys_eventfd(unsigned int count);\n5279 long sys_fallocate(int fd, int mode, loff_t offset, loff_t len);\n5280 long sys_timerfd_create(int clockid, int flags);\n5281 long sys_timerfd_gettime(int ufd, struct __kernel_itimerspec __user *otmr);\n5282 long sys_timerfd_settime(int ufd, int flags, const struct __kernel_itimerspec __user *utmr, struct __kernel_itimerspec __user *otmr);\n5283 long sys_signalfd4(int ufd, sigset_t __user *user_mask, size_t sizemask, int flags);\n5284 long sys_eventfd2(unsigned int count, int flags);\n5285 long sys_epoll_create1(int flags);\n5286 long sys_dup3(unsigned int oldfd, unsigned int newfd, int flags);\n5287 long sys_pipe2(int __user *fildes, int flags);\n5288 long sys_inotify_init1(int flags);\n5289 long sys_preadv(unsigned long fd, const struct iovec __user *vec, unsigned long vlen, unsigned long pos_l, unsigned long pos_h);\n5290 long sys_pwritev(unsigned long fd, const struct iovec __user *vec, unsigned long vlen, unsigned long pos_l, unsigned long pos_h);\n5291 long sys_rt_tgsigqueueinfo(pid_t tgid, pid_t pid, int sig, siginfo_t __user *uinfo);\n5292 long sys_perf_event_open(struct perf_event_attr __user *attr_uptr, pid_t pid, int cpu, int group_fd, unsigned long flags);\n5293 long sys_accept4(int, struct sockaddr __user *, int __user *, int);\n5294 long sys_recvmmsg(int fd, struct mmsghdr __user *msg, unsigned int vlen, unsigned flags, struct __kernel_timespec __user *timeout);\n5295 long sys_fanotify_init(unsigned int flags, unsigned int event_f_flags);\n5296 long sys_fanotify_mark(int fanotify_fd, unsigned int flags, u64 mask, int fd, const char __user *pathname);\n5297 long sys_prlimit64(pid_t pid, unsigned int resource, const struct rlimit64 __user *new_rlim, struct rlimit64 __user *old_rlim);\n5298 long sys_name_to_handle_at(int dfd, const char __user *name, struct file_handle __user *handle, int __user *mnt_id, int flag);\n5299 long sys_open_by_handle_at(int mountdirfd, struct file_handle __user *handle, int flags);\n5300 long sys_clock_adjtime(clockid_t which_clock, struct __kernel_timex __user *tx);\n5301 long sys_syncfs(int fd);\n5302 long sys_sendmmsg(int fd, struct mmsghdr __user *msg, unsigned int vlen, unsigned flags);\n5303 long sys_setns(int fd, int nstype);\n5304 long sys_process_vm_readv(pid_t pid, const struct iovec __user *lvec, unsigned long liovcnt, const struct iovec __user *rvec, unsigned long riovcnt, unsigned long flags);\n5305 long sys_process_vm_writev(pid_t pid, const struct iovec __user *lvec, unsigned long liovcnt, const struct iovec __user *rvec, unsigned long riovcnt, unsigned long flags);\n5306 long sys_kcmp(pid_t pid1, pid_t pid2, int type, unsigned long idx1, unsigned long idx2);\n5307 long sys_finit_module(int fd, const char __user *uargs, int flags);\n5308 long sys_getdents64(unsigned int fd, struct linux_dirent64 __user *dirent, unsigned int count);\n5309 long sys_sched_setattr(pid_t pid, struct sched_attr __user *attr, unsigned int flags);\n5310 long sys_sched_getattr(pid_t pid, struct sched_attr __user *attr, unsigned int size, unsigned int flags);\n5311 long sys_renameat2(int olddfd, const char __user *oldname, int newdfd, const char __user *newname, unsigned int flags);\n5312 long sys_seccomp(unsigned int op, unsigned int flags, void __user *uargs);\n5313 long sys_getrandom(char __user *buf, size_t count, unsigned int flags);\n5314 long sys_memfd_create(const char __user *uname_ptr, unsigned int flags);\n5315 long sys_bpf(int cmd, union bpf_attr *attr, unsigned int size);\n5316 long sys_execveat(int dfd, const char __user *filename, const char __user *const __user *argv, const char __user *const __user *envp, int flags);\n5317 long sys_userfaultfd(int flags);\n5318 long sys_membarrier(int cmd, int flags);\n5319 long sys_mlock2(unsigned long start, size_t len, int flags);\n5320 long sys_copy_file_range(int fd_in, loff_t __user *off_in, int fd_out, loff_t __user *off_out, size_t len, unsigned int flags);\n5321 long sys_preadv2(unsigned long fd, const struct iovec __user *vec, unsigned long vlen, unsigned long pos_l, unsigned long pos_h, rwf_t flags);\n5322 long sys_pwritev2(unsigned long fd, const struct iovec __user *vec, unsigned long vlen, unsigned long pos_l, unsigned long pos_h, rwf_t flags);\n5323 long sys_pkey_mprotect(unsigned long start, size_t len, unsigned long prot, int pkey);\n5324 long sys_pkey_alloc(unsigned long flags, unsigned long init_val);\n5325 long sys_pkey_free(int pkey);\n5326 long sys_statx(int dfd, const char __user *path, unsigned flags, unsigned mask, struct statx __user *buffer);\n5327 long sys_rseq(struct rseq __user *rseq, uint32_t rseq_len, int flags, uint32_t sig);\n5328 long sys_io_pgetevents(aio_context_t ctx_id, long min_nr, long nr, struct io_event __user *events, struct __kernel_timespec __user *timeout, const struct __aio_sigset *sig);\n5424 long sys_pidfd_send_signal(int pidfd, int sig, siginfo_t __user *info, unsigned int flags);\n5425 long sys_io_uring_setup(u32 entries, struct io_uring_params __user *p);\n5426 long sys_io_uring_enter(unsigned int fd, u32 to_submit, u32 min_complete, u32 flags, const sigset_t __user *sig, size_t sigsz);\n5427 long sys_io_uring_register(unsigned int fd, unsigned int op, void __user *arg, unsigned int nr_args);\n5428 long sys_open_tree(int dfd, const char __user *path, unsigned flags);\n5429 long sys_move_mount(int from_dfd, const char __user *from_path, int to_dfd, const char __user *to_path, unsigned int ms_flags);\n5430 long sys_fsopen(const char __user *fs_name, unsigned int flags);\n5431 long sys_fsconfig(int fs_fd, unsigned int cmd, const char __user *key, const void __user *value, int aux);\n5432 long sys_fsmount(int fs_fd, unsigned int flags, unsigned int ms_flags);\n5433 long sys_fspick(int dfd, const char __user *path, unsigned int flags);\n5434 long sys_pidfd_open(pid_t pid, unsigned int flags);\n5435 long sys_clone3(struct clone_args __user *uargs, size_t size);\n5437 long sys_openat2(int dfd, const char __user *filename, struct open_how *how, size_t size);\n5438 long sys_pidfd_getfd(int pidfd, int fd, unsigned int flags);\n5439 long sys_faccessat2(int dfd, const char __user *filename, int mode, int flags);\n6000 long sys_read(unsigned int fd, char __user *buf, size_t count);\n6001 long sys_write(unsigned int fd, const char __user *buf, size_t count);\n6002 long sys_open(const char __user *filename, int flags, umode_t mode);\n6003 long sys_close(unsigned int fd);\n6004 long sys_newstat(const char __user *filename, struct stat __user *statbuf);\n6005 long sys_newfstat(unsigned int fd, struct stat __user *statbuf);\n6006 long sys_newlstat(const char __user *filename, struct stat __user *statbuf);\n6007 long sys_poll(struct pollfd __user *ufds, unsigned int nfds, int timeout);\n6008 long sys_lseek(unsigned int fd, off_t offset, unsigned int whence);\n6009 long sys_old_mmap(struct mmap_arg_struct __user *arg);\n6010 long sys_mprotect(unsigned long start, size_t len, unsigned long prot);\n6011 long sys_munmap(unsigned long addr, size_t len);\n6012 long sys_brk(unsigned long brk);\n6013 long sys_rt_sigaction(int, const struct sigaction __user *, struct sigaction __user *, size_t);\n6014 long sys_rt_sigprocmask(int how, sigset_t __user *set, sigset_t __user *oset, size_t sigsetsize);\n6015 long sys_ioctl(unsigned int fd, unsigned int cmd, unsigned long arg);\n6016 long sys_pread64(unsigned int fd, char __user *buf, size_t count, loff_t pos);\n6017 long sys_pwrite64(unsigned int fd, const char __user *buf, size_t count, loff_t pos);\n6018 long sys_readv(unsigned long fd, const struct iovec __user *vec, unsigned long vlen);\n6019 long sys_writev(unsigned long fd, const struct iovec __user *vec, unsigned long vlen);\n```\n\n----------------------------------------\n\nTITLE: Windows NT Process and Thread Management System Calls\nDESCRIPTION: System calls for managing processes and threads, including creation, termination, and information queries\nSOURCE: https://github.com/panda-re/panda-ng/blob/main/plugins/syscalls2/generated-in/windows_vistasp0_x64_prototypes.txt#_snippet_2\n\nLANGUAGE: C\nCODE:\n```\nNTSTATUS NtOpenProcess(PHANDLE ProcessHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, PCLIENT_ID ClientId);\nNTSTATUS NtTerminateProcess(HANDLE ProcessHandle, NTSTATUS ExitStatus);\nNTSTATUS NtQueryInformationProcess(HANDLE ProcessHandle, PROCESSINFOCLASS ProcessInformationClass, PVOID ProcessInformation, ULONG ProcessInformationLength, PULONG ReturnLength);\nNTSTATUS NtSetInformationProcess(HANDLE ProcessHandle, PROCESSINFOCLASS ProcessInformationClass, PVOID ProcessInformation, ULONG ProcessInformationLength);\n```\n\n----------------------------------------\n\nTITLE: Declaring Linux System Call Prototypes in C\nDESCRIPTION: This snippet comprises a sequence of function prototype declarations for numerous Linux system calls, written in C. Each declaration specifies the system call name, parameters, pointer qualifiers (such as __user), and types, with return type long, reflecting syscall conventions. No implementation is present; these serve either as declarations in a syscall table header or for static analysis/reflection. Typical parameters include file descriptors, pointers to user-space structures, and various flags. Usage requires inclusion in kernel modules or syscall emulation layers, and the prototypes assume Linux-specific type definitions and user-space pointer annotations.\nSOURCE: https://github.com/panda-re/panda-ng/blob/main/plugins/syscalls2/generated-in/linux_mips64_prototypes.txt#_snippet_11\n\nLANGUAGE: c\nCODE:\n```\n6294 long sys_pwritev(unsigned long fd, const struct iovec __user *vec, unsigned long vlen, unsigned long pos_l, unsigned long pos_h);\n6295 long sys_rt_tgsigqueueinfo(pid_t tgid, pid_t pid, int sig, siginfo_t __user *uinfo);\n6296 long sys_perf_event_open(struct perf_event_attr __user *attr_uptr, pid_t pid, int cpu, int group_fd, unsigned long flags);\n6297 long sys_accept4(int, struct sockaddr __user *, int __user *, int);\n6298 long sys_ppoll_time32(struct pollfd __user *, unsigned int, struct old_timespec32 __user *, const sigset_t __user *, size_t);\n6299 long sys_getdents64(unsigned int fd, struct linux_dirent64 __user *dirent, unsigned int count);\n6300 long sys_fanotify_init(unsigned int flags, unsigned int event_f_flags);\n6301 long sys_fanotify_mark(int fanotify_fd, unsigned int flags, u64 mask, int fd, const char __user *pathname);\n6302 long sys_prlimit64(pid_t pid, unsigned int resource, const struct rlimit64 __user *new_rlim, struct rlimit64 __user *old_rlim);\n6303 long sys_name_to_handle_at(int dfd, const char __user *name, struct file_handle __user *handle, int __user *mnt_id, int flag);\n6304 long sys_open_by_handle_at(int mountdirfd, struct file_handle __user *handle, int flags);\n6305 long sys_clock_adjtime32(clockid_t which_clock, struct old_timex32 __user *tx);\n6306 long sys_syncfs(int fd);\n6307 long sys_sendmmsg(int fd, struct mmsghdr __user *msg, unsigned int vlen, unsigned flags);\n6308 long sys_setns(int fd, int nstype);\n6309 long sys_process_vm_readv(pid_t pid, const struct iovec __user *lvec, unsigned long liovcnt, const struct iovec __user *rvec, unsigned long riovcnt, unsigned long flags);\n6310 long sys_process_vm_writev(pid_t pid, const struct iovec __user *lvec, unsigned long liovcnt, const struct iovec __user *rvec, unsigned long riovcnt, unsigned long flags);\n6311 long sys_kcmp(pid_t pid1, pid_t pid2, int type, unsigned long idx1, unsigned long idx2);\n6312 long sys_finit_module(int fd, const char __user *uargs, int flags);\n6313 long sys_sched_setattr(pid_t pid, struct sched_attr __user *attr, unsigned int flags);\n6314 long sys_sched_getattr(pid_t pid, struct sched_attr __user *attr, unsigned int size, unsigned int flags);\n6315 long sys_renameat2(int olddfd, const char __user *oldname, int newdfd, const char __user *newname, unsigned int flags);\n6316 long sys_seccomp(unsigned int op, unsigned int flags, void __user *uargs);\n6317 long sys_getrandom(char __user *buf, size_t count, unsigned int flags);\n6318 long sys_memfd_create(const char __user *uname_ptr, unsigned int flags);\n6319 long sys_bpf(int cmd, union bpf_attr *attr, unsigned int size);\n6320 long sys_execveat(int dfd, const char __user *filename, const char __user *const __user *argv, const char __user *const __user *envp, int flags);\n6321 long sys_userfaultfd(int flags);\n6322 long sys_membarrier(int cmd, int flags);\n6323 long sys_mlock2(unsigned long start, size_t len, int flags);\n6324 long sys_copy_file_range(int fd_in, loff_t __user *off_in, int fd_out, loff_t __user *off_out, size_t len, unsigned int flags);\n6325 long sys_preadv2(unsigned long fd, const struct iovec __user *vec, unsigned long vlen, unsigned long pos_l, unsigned long pos_h, rwf_t flags);\n6326 long sys_pwritev2(unsigned long fd, const struct iovec __user *vec, unsigned long vlen, unsigned long pos_l, unsigned long pos_h, rwf_t flags);\n6327 long sys_pkey_mprotect(unsigned long start, size_t len, unsigned long prot, int pkey);\n6328 long sys_pkey_alloc(unsigned long flags, unsigned long init_val);\n6329 long sys_pkey_free(int pkey);\n6330 long sys_statx(int dfd, const char __user *path, unsigned flags, unsigned mask, struct statx __user *buffer);\n6331 long sys_rseq(struct rseq __user *rseq, uint32_t rseq_len, int flags, uint32_t sig);\n6332 long sys_io_pgetevents(aio_context_t ctx_id, long min_nr, long nr, struct io_event __user *events, struct __kernel_timespec __user *timeout, const struct __aio_sigset *sig);\n6403 long sys_clock_gettime(clockid_t which_clock, struct __kernel_timespec __user *tp);\n6404 long sys_clock_settime(clockid_t which_clock, const struct __kernel_timespec __user *tp);\n6405 long sys_clock_adjtime(clockid_t which_clock, struct __kernel_timex __user *tx);\n6406 long sys_clock_getres(clockid_t which_clock, struct __kernel_timespec __user *tp);\n6407 long sys_clock_nanosleep(clockid_t which_clock, int flags, const struct __kernel_timespec __user *rqtp, struct __kernel_timespec __user *rmtp);\n6408 long sys_timer_gettime(timer_t timer_id, struct __kernel_itimerspec __user *setting);\n6409 long sys_timer_settime(timer_t timer_id, int flags, const struct __kernel_itimerspec __user *new_setting, struct __kernel_itimerspec __user *old_setting);\n6410 long sys_timerfd_gettime(int ufd, struct __kernel_itimerspec __user *otmr);\n6411 long sys_timerfd_settime(int ufd, int flags, const struct __kernel_itimerspec __user *utmr, struct __kernel_itimerspec __user *otmr);\n6412 long sys_utimensat(int dfd, const char __user *filename, struct __kernel_timespec __user *utimes, int flags);\n6416 long sys_io_pgetevents(aio_context_t ctx_id, long min_nr, long nr, struct io_event __user *events, struct __kernel_timespec __user *timeout, const struct __aio_sigset *sig);\n6418 long sys_mq_timedsend(mqd_t mqdes, const char __user *msg_ptr, size_t msg_len, unsigned int msg_prio, const struct __kernel_timespec __user *abs_timeout);\n6419 long sys_mq_timedreceive(mqd_t mqdes, char __user *msg_ptr, size_t msg_len, unsigned int __user *msg_prio, const struct __kernel_timespec __user *abs_timeout);\n6420 long sys_semtimedop(int semid, struct sembuf __user *sops, unsigned nsops, const struct __kernel_timespec __user *timeout);\n6422 long sys_futex(u32 __user *uaddr, int op, u32 val, struct __kernel_timespec __user *utime, u32 __user *uaddr2, u32 val3);\n6423 long sys_sched_rr_get_interval(pid_t pid, struct __kernel_timespec __user *interval);\n6424 long sys_pidfd_send_signal(int pidfd, int sig, siginfo_t __user *info, unsigned int flags);\n6425 long sys_io_uring_setup(u32 entries, struct io_uring_params __user *p);\n6426 long sys_io_uring_enter(unsigned int fd, u32 to_submit, u32 min_complete, u32 flags, const sigset_t __user *sig, size_t sigsz);\n6427 long sys_io_uring_register(unsigned int fd, unsigned int op, void __user *arg, unsigned int nr_args);\n6428 long sys_open_tree(int dfd, const char __user *path, unsigned flags);\n6429 long sys_move_mount(int from_dfd, const char __user *from_path, int to_dfd, const char __user *to_path, unsigned int ms_flags);\n6430 long sys_fsopen(const char __user *fs_name, unsigned int flags);\n6431 long sys_fsconfig(int fs_fd, unsigned int cmd, const char __user *key, const void __user *value, int aux);\n6432 long sys_fsmount(int fs_fd, unsigned int flags, unsigned int ms_flags);\n6433 long sys_fspick(int dfd, const char __user *path, unsigned int flags);\n6434 long sys_pidfd_open(pid_t pid, unsigned int flags);\n6435 long sys_clone3(struct clone_args __user *uargs, size_t size);\n6437 long sys_openat2(int dfd, const char __user *filename, struct open_how *how, size_t size);\n6438 long sys_pidfd_getfd(int pidfd, int fd, unsigned int flags);\n6439 long sys_faccessat2(int dfd, const char __user *filename, int mode, int flags);\n```\n\n----------------------------------------\n\nTITLE: Implementing Callbacks for System Call Monitoring in C\nDESCRIPTION: Example of a C callback function definition for syscalls2 to monitor NtReadFile system calls on Windows. The function prints out all parameters of the call when invoked.\nSOURCE: https://github.com/panda-re/panda-ng/blob/main/plugins/syscalls2/README.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\ntypedef void (*on_unknown_sys_enter_t)(CPUState *env, target_ulong pc, target_ulong callno)\n```\n\n----------------------------------------\n\nTITLE: Running PANDA Plugin Callback and Processing Linux Auxiliary Vectors - Python\nDESCRIPTION: Shows a Python script using the pandare module to experiment with the proc_start_linux plugin's auxiliary vector callback. The script defines guest interaction, issues serial commands with LD_SHOW_AUXV=1, and listens for proc_start_linux's on_rec_auxv event to print details of new processes. Dependencies are pandare, a running PANDA environment with proc_start_linux and syscalls2, and properly configured targets. Inputs include the guest's architecture, and the script outputs procname, phdr, and entrypoint for each started process.\nSOURCE: https://github.com/panda-re/panda-ng/blob/main/plugins/proc_start_linux/README.md#_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nfrom pandare import Panda\nfrom sys import argv\n\narch = \"i386\" if len(argv) <= 1 else argv[1]\npanda = Panda(generic=arch)\n\n@panda.queue_blocking\ndef guest_interaction():\n    panda.revert_sync(\"root\")\n    for cmd in [\"ls -la\", \"whoami\", \"time ls -la\"]:\n        print(f\"{cmd} {panda.run_serial_cmd('LD_SHOW_AUXV=1 '+cmd)}\")\n    panda.end_analysis()\n\n@panda.ppp(\"proc_start_linux\", \"on_rec_auxv\")\ndef recv_auxv(cpu, tb, auxv):\n    procname = panda.ffi.string(auxv.execfn)\n    print(f\"started proc {procname} {auxv.phdr:x} {auxv.entry:x}\")\n\npanda.run()\n```\n\n----------------------------------------\n\nTITLE: Heap Mappings Retrieval Callback in C\nDESCRIPTION: Callback function type definition for retrieving heap segment mappings for a process. Linux-only implementation.\nSOURCE: https://github.com/panda-re/panda-ng/blob/main/plugins/osi/README.md#_snippet_13\n\nLANGUAGE: C\nCODE:\n```\ntypedef void (*on_get_heap_mappings_t)(CPUState *, OsiProc *, GArray**)\n```\n\n----------------------------------------\n\nTITLE: Declaring Windows Native NT System Call Prototypes in C\nDESCRIPTION: Declares a list of native NT API function prototypes in C for direct invocation from user mode to the Windows NT kernel. Each function returns an NTSTATUS value and details required arguments for different system operations, such as privilege checking (e.g., NtPrivilegeCheck), auditing, file access, querying attributes, memory, process/thread information and system status. These declarations typically depend on Windows-specific types (HANDLE, PUNICODE_STRING, PVOID, etc.) and assume that all necessary headers (like Windows.h and ntdef.h) are available. The parameters vary by function, with some requiring pointers to structures, handles, flags, or specific information classes, and the output is typically communicated via out parameters. No function bodies are provided; these are strictly for linking and static type checking, and proper access rights and privilege levels are necessary to call these functions successfully.\nSOURCE: https://github.com/panda-re/panda-ng/blob/main/plugins/syscalls2/generated-in/windows_7_x86_prototypes.txt#_snippet_3\n\nLANGUAGE: c\nCODE:\n```\n210 NTSTATUS NtPrivilegeCheck (HANDLE ClientToken, PPRIVILEGE_SET RequiredPrivileges, PBOOLEAN Result);\n211 NTSTATUS NtPrivilegedServiceAuditAlarm (PUNICODE_STRING SubsystemName, PUNICODE_STRING ServiceName, HANDLE ClientToken, PPRIVILEGE_SET Privileges, BOOLEAN AccessGranted);\n212 NTSTATUS NtPrivilegeObjectAuditAlarm (PUNICODE_STRING SubsystemName, PVOID HandleId, HANDLE ClientToken, ACCESS_MASK DesiredAccess, PPRIVILEGE_SET Privileges, BOOLEAN AccessGranted);\n213 NTSTATUS NtPropagationComplete (HANDLE ResourceManagerHandle, ULONG RequestCookie, ULONG BufferLength, PVOID Buffer);\n214 NTSTATUS NtPropagationFailed (HANDLE ResourceManagerHandle, ULONG RequestCookie, NTSTATUS PropStatus);\n215 NTSTATUS NtProtectVirtualMemory (HANDLE ProcessHandle, PVOID *BaseAddress, PSIZE_T RegionSize, WIN32_PROTECTION_MASK NewProtectWin32, PULONG OldProtect);\n216 NTSTATUS NtPulseEvent (HANDLE EventHandle, PLONG PreviousState);\n217 NTSTATUS NtQueryAttributesFile (POBJECT_ATTRIBUTES ObjectAttributes, PFILE_BASIC_INFORMATION FileInformation);\n218 NTSTATUS NtQueryBootEntryOrder (PULONG Ids, PULONG Count);\n219 NTSTATUS NtQueryBootOptions (PBOOT_OPTIONS BootOptions, PULONG BootOptionsLength);\n220 NTSTATUS NtQueryDebugFilterState (ULONG ComponentId, ULONG Level);\n221 NTSTATUS NtQueryDefaultLocale (BOOLEAN UserProfile, PLCID DefaultLocaleId);\n222 NTSTATUS NtQueryDefaultUILanguage (LANGID *DefaultUILanguageId);\n223 NTSTATUS NtQueryDirectoryFile (HANDLE FileHandle, HANDLE Event, PIO_APC_ROUTINE ApcRoutine, PVOID ApcContext, PIO_STATUS_BLOCK IoStatusBlock, PVOID FileInformation, ULONG Length, FILE_INFORMATION_CLASS FileInformationClass, BOOLEAN ReturnSingleEntry, PUNICODE_STRING FileName, BOOLEAN RestartScan);\n224 NTSTATUS NtQueryDirectoryObject (HANDLE DirectoryHandle, PVOID Buffer, ULONG Length, BOOLEAN ReturnSingleEntry, BOOLEAN RestartScan, PULONG Context, PULONG ReturnLength);\n225 NTSTATUS NtQueryDriverEntryOrder (PULONG Ids, PULONG Count);\n226 NTSTATUS NtQueryEaFile (HANDLE FileHandle, PIO_STATUS_BLOCK IoStatusBlock, PVOID Buffer, ULONG Length, BOOLEAN ReturnSingleEntry, PVOID EaList, ULONG EaListLength, PULONG EaIndex, BOOLEAN RestartScan);\n227 NTSTATUS NtQueryEvent (HANDLE EventHandle, EVENT_INFORMATION_CLASS EventInformationClass, PVOID EventInformation, ULONG EventInformationLength, PULONG ReturnLength);\n228 NTSTATUS NtQueryFullAttributesFile (POBJECT_ATTRIBUTES ObjectAttributes, PFILE_NETWORK_OPEN_INFORMATION FileInformation);\n229 NTSTATUS NtQueryInformationAtom (RTL_ATOM Atom, ATOM_INFORMATION_CLASS InformationClass, PVOID AtomInformation, ULONG AtomInformationLength, PULONG ReturnLength);\n230 NTSTATUS NtQueryInformationEnlistment (HANDLE EnlistmentHandle, ENLISTMENT_INFORMATION_CLASS EnlistmentInformationClass, PVOID EnlistmentInformation, ULONG EnlistmentInformationLength, PULONG ReturnLength);\n231 NTSTATUS NtQueryInformationFile (HANDLE FileHandle, PIO_STATUS_BLOCK IoStatusBlock, PVOID FileInformation, ULONG Length, FILE_INFORMATION_CLASS FileInformationClass);\n232 NTSTATUS NtQueryInformationJobObject (HANDLE JobHandle, JOBOBJECTINFOCLASS JobObjectInformationClass, PVOID JobObjectInformation, ULONG JobObjectInformationLength, PULONG ReturnLength);\n233 NTSTATUS NtQueryInformationPort (HANDLE PortHandle, PORT_INFORMATION_CLASS PortInformationClass, PVOID PortInformation, ULONG Length, PULONG ReturnLength);\n234 NTSTATUS NtQueryInformationProcess (HANDLE ProcessHandle, PROCESSINFOCLASS ProcessInformationClass, PVOID ProcessInformation, ULONG ProcessInformationLength, PULONG ReturnLength);\n235 NTSTATUS NtQueryInformationResourceManager (HANDLE ResourceManagerHandle, RESOURCEMANAGER_INFORMATION_CLASS ResourceManagerInformationClass, PVOID ResourceManagerInformation, ULONG ResourceManagerInformationLength, PULONG ReturnLength);\n236 NTSTATUS NtQueryInformationThread (HANDLE ThreadHandle, THREADINFOCLASS ThreadInformationClass, PVOID ThreadInformation, ULONG ThreadInformationLength, PULONG ReturnLength);\n237 NTSTATUS NtQueryInformationToken (HANDLE TokenHandle, TOKEN_INFORMATION_CLASS TokenInformationClass, PVOID TokenInformation, ULONG TokenInformationLength, PULONG ReturnLength);\n238 NTSTATUS NtQueryInformationTransaction (HANDLE TransactionHandle, TRANSACTION_INFORMATION_CLASS TransactionInformationClass, PVOID TransactionInformation, ULONG TransactionInformationLength, PULONG ReturnLength);\n239 NTSTATUS NtQueryInformationTransactionManager (HANDLE TransactionManagerHandle, TRANSACTIONMANAGER_INFORMATION_CLASS TransactionManagerInformationClass, PVOID TransactionManagerInformation, ULONG TransactionManagerInformationLength, PULONG ReturnLength);\n240 NTSTATUS NtQueryInformationWorkerFactory (HANDLE WorkerFactoryHandle, WORKERFACTORYINFOCLASS WorkerFactoryInformationClass, PVOID WorkerFactoryInformation, ULONG WorkerFactoryInformationLength, PULONG ReturnLength);\n241 NTSTATUS NtQueryInstallUILanguage (LANGID *InstallUILanguageId);\n242 NTSTATUS NtQueryIntervalProfile (KPROFILE_SOURCE ProfileSource, PULONG Interval);\n243 NTSTATUS NtQueryIoCompletion (HANDLE IoCompletionHandle, IO_COMPLETION_INFORMATION_CLASS IoCompletionInformationClass, PVOID IoCompletionInformation, ULONG IoCompletionInformationLength, PULONG ReturnLength);\n244 NTSTATUS NtQueryKey (HANDLE KeyHandle, KEY_INFORMATION_CLASS KeyInformationClass, PVOID KeyInformation, ULONG Length, PULONG ResultLength);\n245 NTSTATUS NtQueryLicenseValue (PUNICODE_STRING Name, PULONG Type, PVOID Buffer, ULONG Length, PULONG ReturnedLength);\n246 NTSTATUS NtQueryMultipleValueKey (HANDLE KeyHandle, PKEY_VALUE_ENTRY ValueEntries, ULONG EntryCount, PVOID ValueBuffer, PULONG BufferLength, PULONG RequiredBufferLength);\n247 NTSTATUS NtQueryMutant (HANDLE MutantHandle, MUTANT_INFORMATION_CLASS MutantInformationClass, PVOID MutantInformation, ULONG MutantInformationLength, PULONG ReturnLength);\n248 NTSTATUS NtQueryObject (HANDLE Handle, OBJECT_INFORMATION_CLASS ObjectInformationClass, PVOID ObjectInformation, ULONG ObjectInformationLength, PULONG ReturnLength);\n249 NTSTATUS NtQueryOpenSubKeys (POBJECT_ATTRIBUTES TargetKey, PULONG HandleCount);\n250 NTSTATUS NtQueryOpenSubKeysEx (POBJECT_ATTRIBUTES TargetKey, ULONG BufferLength, PVOID Buffer, PULONG RequiredSize);\n251 NTSTATUS NtQueryPerformanceCounter (PLARGE_INTEGER PerformanceCounter, PLARGE_INTEGER PerformanceFrequency);\n252 NTSTATUS NtQueryPortInformationProcess ();\n253 NTSTATUS NtQueryQuotaInformationFile (HANDLE FileHandle, PIO_STATUS_BLOCK IoStatusBlock, PVOID Buffer, ULONG Length, BOOLEAN ReturnSingleEntry, PVOID SidList, ULONG SidListLength, PULONG StartSid, BOOLEAN RestartScan);\n254 NTSTATUS NtQuerySection (HANDLE SectionHandle, SECTION_INFORMATION_CLASS SectionInformationClass, PVOID SectionInformation, SIZE_T SectionInformationLength, PSIZE_T ReturnLength);\n255 NTSTATUS NtQuerySecurityAttributesToken (HANDLE TokenHandle, PUNICODE_STRING Attributes, ULONG NumberOfAttributes, PVOID Buffer, ULONG Length, PULONG ReturnLength);\n256 NTSTATUS NtQuerySecurityObject (HANDLE Handle, SECURITY_INFORMATION SecurityInformation, PSECURITY_DESCRIPTOR SecurityDescriptor, ULONG Length, PULONG LengthNeeded);\n257 NTSTATUS NtQuerySemaphore (HANDLE SemaphoreHandle, SEMAPHORE_INFORMATION_CLASS SemaphoreInformationClass, PVOID SemaphoreInformation, ULONG SemaphoreInformationLength, PULONG ReturnLength);\n258 NTSTATUS NtQuerySymbolicLinkObject (HANDLE LinkHandle, PUNICODE_STRING LinkTarget, PULONG ReturnedLength);\n259 NTSTATUS NtQuerySystemEnvironmentValue (PUNICODE_STRING VariableName, PWSTR VariableValue, USHORT ValueLength, PUSHORT ReturnLength);\n260 NTSTATUS NtQuerySystemEnvironmentValueEx (PUNICODE_STRING VariableName, LPGUID VendorGuid, PVOID Value, PULONG ValueLength, PULONG Attributes);\n261 NTSTATUS NtQuerySystemInformation (SYSTEM_INFORMATION_CLASS SystemInformationClass, PVOID SystemInformation, ULONG SystemInformationLength, PULONG ReturnLength);\n262 NTSTATUS NtQuerySystemInformationEx (SYSTEM_INFORMATION_CLASS SystemInformationClass, PVOID QueryInformation, ULONG QueryInformationLength, PVOID SystemInformation, ULONG SystemInformationLength, PULONG ReturnLength);\n263 NTSTATUS NtQuerySystemTime (PLARGE_INTEGER SystemTime);\n264 NTSTATUS NtQueryTimer (HANDLE TimerHandle, TIMER_INFORMATION_CLASS TimerInformationClass, PVOID TimerInformation, ULONG TimerInformationLength, PULONG ReturnLength);\n265 NTSTATUS NtQueryTimerResolution (PULONG MaximumTime, PULONG MinimumTime, PULONG CurrentTime);\n266 NTSTATUS NtQueryValueKey (HANDLE KeyHandle, PUNICODE_STRING ValueName, KEY_VALUE_INFORMATION_CLASS KeyValueInformationClass, PVOID KeyValueInformation, ULONG Length, PULONG ResultLength);\n267 NTSTATUS NtQueryVirtualMemory (HANDLE ProcessHandle, PVOID BaseAddress, MEMORY_INFORMATION_CLASS MemoryInformationClass, PVOID MemoryInformation, SIZE_T MemoryInformationLength, PSIZE_T ReturnLength);\n268 NTSTATUS NtQueryVolumeInformationFile (HANDLE FileHandle, PIO_STATUS_BLOCK IoStatusBlock, PVOID FsInformation, ULONG Length, FS_INFORMATION_CLASS FsInformationClass);\n269 NTSTATUS NtQueueApcThread (HANDLE ThreadHandle, PPS_APC_ROUTINE ApcRoutine, PVOID ApcArgument1, PVOID ApcArgument2, PVOID ApcArgument3);\n270 NTSTATUS NtQueueApcThreadEx (HANDLE ThreadHandle, HANDLE UserApcReserveHandle, PPS_APC_ROUTINE ApcRoutine, PVOID ApcArgument1, PVOID ApcArgument2, PVOID ApcArgument3);\n271 NTSTATUS NtRaiseException (PEXCEPTION_RECORD ExceptionRecord, PCONTEXT ContextRecord, BOOLEAN FirstChance);\n272 NTSTATUS NtRaiseHardError (NTSTATUS ErrorStatus, ULONG NumberOfParameters, ULONG UnicodeStringParameterMask, PULONG_PTR Parameters, ULONG ValidResponseOptions, PULONG Response);\n273 NTSTATUS NtReadFile (HANDLE FileHandle, HANDLE Event, PIO_APC_ROUTINE ApcRoutine, PVOID ApcContext, PIO_STATUS_BLOCK IoStatusBlock, PVOID Buffer, ULONG Length, PLARGE_INTEGER ByteOffset, PULONG Key);\n```\n\n----------------------------------------\n\nTITLE: Declaring User and Process Information System Calls in C\nDESCRIPTION: This snippet declares system calls for retrieving and setting user and process information (getuid, setuid, getpid). It includes function signatures with their respective parameters and return types.\nSOURCE: https://github.com/panda-re/panda-ng/blob/main/plugins/syscalls2/generated-in/freebsd_x64_prototypes.txt#_snippet_2\n\nLANGUAGE: C\nCODE:\n```\nint setuid(uid_t uid);\nuid_t getuid(void);\nuid_t geteuid(void);\nint ptrace(int req, pid_t pid, caddr_t addr, int data);\nint recvmsg(int s, struct msghdr *msg, int flags);\nint sendmsg(int s, struct msghdr *msg, int flags);\nint recvfrom(int s, void *buf, size_t len, int flags, struct sockaddr *from, __socklen_t *fromlenaddr);\nint accept(int s, struct sockaddr *name, __socklen_t *anamelen);\nint getpeername(int fdes, struct sockaddr *asa, __socklen_t *alen);\nint getsockname(int fdes, struct sockaddr *asa, __socklen_t *alen);\n```\n\n----------------------------------------\n\nTITLE: Declaring NT System Call Prototypes - Win32 NT API - C\nDESCRIPTION: Declares a series of function prototypes corresponding to native Windows NT system calls, intended to be provided in a C or C++ header. These declarations enable direct access to a variety of low-level system functionalities such as process management, file operations, memory manipulation, registry editing, and debugging. Requires a Windows development environment and appropriate type definitions (e.g., NTSTATUS, HANDLE, PVOID, etc.). Most functions return NTSTATUS indicating operation result, and parameters are pointers or handles for objects like files, processes, or registry keys. The prototypes themselves do not include implementation or error handling; linkage to ntdll or similar is required.\nSOURCE: https://github.com/panda-re/panda-ng/blob/main/plugins/syscalls2/generated-in/windows_2003sp12_x86_prototypes.txt#_snippet_3\n\nLANGUAGE: C\nCODE:\n```\nNTSTATUS NtSetBootEntryOrder (PULONG Ids, ULONG Count);\nNTSTATUS NtSetBootOptions (PBOOT_OPTIONS BootOptions, ULONG FieldsToChange);\nNTSTATUS NtSetContextThread (HANDLE ThreadHandle, PCONTEXT ThreadContext);\nNTSTATUS NtSetDebugFilterState (ULONG ComponentId, ULONG Level, BOOLEAN State);\nNTSTATUS NtSetDefaultHardErrorPort (HANDLE DefaultHardErrorPort);\nNTSTATUS NtSetDefaultLocale (BOOLEAN UserProfile, LCID DefaultLocaleId);\nNTSTATUS NtSetDefaultUILanguage (LANGID DefaultUILanguageId);\nNTSTATUS NtSetDriverEntryOrder (PULONG Ids, ULONG Count);\nNTSTATUS NtSetEaFile (HANDLE FileHandle, PIO_STATUS_BLOCK IoStatusBlock, PVOID Buffer, ULONG Length);\nNTSTATUS NtSetEvent (HANDLE EventHandle, PLONG PreviousState);\nNTSTATUS NtSetEventBoostPriority (HANDLE EventHandle);\nNTSTATUS NtSetHighEventPair (HANDLE EventPairHandle);\nNTSTATUS NtSetHighWaitLowEventPair (HANDLE EventPairHandle);\nNTSTATUS NtSetInformationDebugObject (HANDLE DebugObjectHandle, DEBUGOBJECTINFOCLASS DebugObjectInformationClass, PVOID DebugInformation, ULONG DebugInformationLength, PULONG ReturnLength);\nNTSTATUS NtSetInformationFile (HANDLE FileHandle, PIO_STATUS_BLOCK IoStatusBlock, PVOID FileInformation, ULONG Length, FILE_INFORMATION_CLASS FileInformationClass);\nNTSTATUS NtSetInformationJobObject (HANDLE JobHandle, JOBOBJECTINFOCLASS JobObjectInformationClass, PVOID JobObjectInformation, ULONG JobObjectInformationLength);\nNTSTATUS NtSetInformationKey (HANDLE KeyHandle, KEY_SET_INFORMATION_CLASS KeySetInformationClass, PVOID KeySetInformation, ULONG KeySetInformationLength);\nNTSTATUS NtSetInformationObject (HANDLE Handle, OBJECT_INFORMATION_CLASS ObjectInformationClass, PVOID ObjectInformation, ULONG ObjectInformationLength);\nNTSTATUS NtSetInformationProcess (HANDLE ProcessHandle, PROCESSINFOCLASS ProcessInformationClass, PVOID ProcessInformation, ULONG ProcessInformationLength);\nNTSTATUS NtSetInformationThread (HANDLE ThreadHandle, THREADINFOCLASS ThreadInformationClass, PVOID ThreadInformation, ULONG ThreadInformationLength);\nNTSTATUS NtSetInformationToken (HANDLE TokenHandle, TOKEN_INFORMATION_CLASS TokenInformationClass, PVOID TokenInformation, ULONG TokenInformationLength);\nNTSTATUS NtSetIntervalProfile (ULONG Interval, KPROFILE_SOURCE Source);\nNTSTATUS NtSetIoCompletion (HANDLE IoCompletionHandle, PVOID KeyContext, PVOID ApcContext, NTSTATUS IoStatus, ULONG_PTR IoStatusInformation);\nNTSTATUS NtSetLdtEntries (ULONG Selector0, ULONG Entry0Low, ULONG Entry0Hi, ULONG Selector1, ULONG Entry1Low, ULONG Entry1Hi);\nNTSTATUS NtSetLowEventPair (HANDLE EventPairHandle);\nNTSTATUS NtSetLowWaitHighEventPair (HANDLE EventPairHandle);\nNTSTATUS NtSetQuotaInformationFile (HANDLE FileHandle, PIO_STATUS_BLOCK IoStatusBlock, PVOID Buffer, ULONG Length);\nNTSTATUS NtSetSecurityObject (HANDLE Handle, SECURITY_INFORMATION SecurityInformation, PSECURITY_DESCRIPTOR SecurityDescriptor);\nNTSTATUS NtSetSystemEnvironmentValue (PUNICODE_STRING VariableName, PUNICODE_STRING VariableValue);\nNTSTATUS NtSetSystemEnvironmentValueEx (PUNICODE_STRING VariableName, LPGUID VendorGuid, PVOID Value, ULONG ValueLength, ULONG Attributes);\nNTSTATUS NtSetSystemInformation (SYSTEM_INFORMATION_CLASS SystemInformationClass, PVOID SystemInformation, ULONG SystemInformationLength);\nNTSTATUS NtSetSystemPowerState (POWER_ACTION SystemAction, SYSTEM_POWER_STATE MinSystemState, ULONG Flags);\nNTSTATUS NtSetSystemTime (PLARGE_INTEGER SystemTime, PLARGE_INTEGER PreviousTime);\nNTSTATUS NtSetThreadExecutionState (EXECUTION_STATE esFlags, PEXECUTION_STATE PreviousFlags);\nNTSTATUS NtSetTimer (HANDLE TimerHandle, PLARGE_INTEGER DueTime, PTIMER_APC_ROUTINE TimerApcRoutine, PVOID TimerContext, BOOLEAN WakeTimer, LONG Period, PBOOLEAN PreviousState);\nNTSTATUS NtSetTimerResolution (ULONG DesiredTime, BOOLEAN SetResolution, PULONG ActualTime);\nNTSTATUS NtSetUuidSeed (PCHAR Seed);\nNTSTATUS NtSetValueKey (HANDLE KeyHandle, PUNICODE_STRING ValueName, ULONG TitleIndex, ULONG Type, PVOID Data, ULONG DataSize);\nNTSTATUS NtSetVolumeInformationFile (HANDLE FileHandle, PIO_STATUS_BLOCK IoStatusBlock, PVOID FsInformation, ULONG Length, FS_INFORMATION_CLASS FsInformationClass);\nNTSTATUS NtShutdownSystem (SHUTDOWN_ACTION Action);\nNTSTATUS NtSignalAndWaitForSingleObject (HANDLE SignalHandle, HANDLE WaitHandle, BOOLEAN Alertable, PLARGE_INTEGER Timeout);\nNTSTATUS NtStartProfile (HANDLE ProfileHandle);\nNTSTATUS NtStopProfile (HANDLE ProfileHandle);\nNTSTATUS NtSuspendProcess (HANDLE ProcessHandle);\nNTSTATUS NtSuspendThread (HANDLE ThreadHandle, PULONG PreviousSuspendCount);\nNTSTATUS NtSystemDebugControl (SYSDBG_COMMAND Command, PVOID InputBuffer, ULONG InputBufferLength, PVOID OutputBuffer, ULONG OutputBufferLength, PULONG ReturnLength);\nNTSTATUS NtTerminateJobObject (HANDLE JobHandle, NTSTATUS ExitStatus);\nNTSTATUS NtTerminateProcess (HANDLE ProcessHandle, NTSTATUS ExitStatus);\nNTSTATUS NtTerminateThread (HANDLE ThreadHandle, NTSTATUS ExitStatus);\nNTSTATUS NtTestAlert ();\nNTSTATUS NtTraceEvent (HANDLE TraceHandle, ULONG Flags, ULONG FieldSize, PVOID Fields);\nNTSTATUS NtTranslateFilePath (PFILE_PATH InputFilePath, ULONG OutputType, PFILE_PATH OutputFilePath, PULONG OutputFilePathLength);\nNTSTATUS NtUnloadDriver (PUNICODE_STRING DriverServiceName);\nNTSTATUS NtUnloadKey (POBJECT_ATTRIBUTES TargetKey);\nNTSTATUS NtUnloadKey2 (POBJECT_ATTRIBUTES TargetKey, ULONG Flags);\nNTSTATUS NtUnloadKeyEx (POBJECT_ATTRIBUTES TargetKey, HANDLE Event);\nNTSTATUS NtUnlockFile (HANDLE FileHandle, PIO_STATUS_BLOCK IoStatusBlock, PLARGE_INTEGER ByteOffset, PLARGE_INTEGER Length, ULONG Key);\nNTSTATUS NtUnlockVirtualMemory (HANDLE ProcessHandle, PVOID *BaseAddress, PSIZE_T RegionSize, ULONG MapType);\nNTSTATUS NtUnmapViewOfSection (HANDLE ProcessHandle, PVOID BaseAddress);\nNTSTATUS NtVdmControl (VDMSERVICECLASS Service, PVOID ServiceData);\nNTSTATUS NtWaitForDebugEvent (HANDLE DebugObjectHandle, BOOLEAN Alertable, PLARGE_INTEGER Timeout, PDBGUI_WAIT_STATE_CHANGE WaitStateChange);\nNTSTATUS NtWaitForMultipleObjects (ULONG Count, HANDLE Handles[], WAIT_TYPE WaitType, BOOLEAN Alertable, PLARGE_INTEGER Timeout);\nNTSTATUS NtWaitForSingleObject (HANDLE Handle, BOOLEAN Alertable, PLARGE_INTEGER Timeout);\nNTSTATUS NtWaitHighEventPair (HANDLE EventPairHandle);\nNTSTATUS NtWaitLowEventPair (HANDLE EventPairHandle);\nNTSTATUS NtWriteFile (HANDLE FileHandle, HANDLE Event, PIO_APC_ROUTINE ApcRoutine, PVOID ApcContext, PIO_STATUS_BLOCK IoStatusBlock, PVOID Buffer, ULONG Length, PLARGE_INTEGER ByteOffset, PULONG Key);\nNTSTATUS NtWriteFileGather (HANDLE FileHandle, HANDLE Event, PIO_APC_ROUTINE ApcRoutine, PVOID ApcContext, PIO_STATUS_BLOCK IoStatusBlock, PFILE_SEGMENT_ELEMENT SegmentArray, ULONG Length, PLARGE_INTEGER ByteOffset, PULONG Key);\nNTSTATUS NtWriteRequestData (HANDLE PortHandle, PPORT_MESSAGE Message, ULONG DataEntryIndex, PVOID Buffer, SIZE_T BufferSize, PSIZE_T NumberOfBytesWritten);\nNTSTATUS NtWriteVirtualMemory (HANDLE ProcessHandle, PVOID BaseAddress, PVOID Buffer, SIZE_T BufferSize, PSIZE_T NumberOfBytesWritten);\nNTSTATUS NtYieldExecution ();\nNTSTATUS NtCreateKeyedEvent (PHANDLE KeyedEventHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, ULONG Flags);\nNTSTATUS NtOpenKeyedEvent (PHANDLE KeyedEventHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes);\nNTSTATUS NtReleaseKeyedEvent (HANDLE KeyedEventHandle, PVOID KeyValue, BOOLEAN Alertable, PLARGE_INTEGER Timeout);\nNTSTATUS NtWaitForKeyedEvent (HANDLE KeyedEventHandle, PVOID KeyValue, BOOLEAN Alertable, PLARGE_INTEGER Timeout);\nNTSTATUS NtQueryPortInformationProcess ();\nULONG NtGetCurrentProcessorNumber ();\nNTSTATUS NtWaitForMultipleObjects32 (ULONG Count, LONG Handles[], WAIT_TYPE WaitType, BOOLEAN Alertable, PLARGE_INTEGER Timeout);\n```\n\n----------------------------------------\n\nTITLE: Monitoring All System Call Entries in C\nDESCRIPTION: Callback function signature for monitoring all system call entries regardless of type. This provides minimal processing in the syscalls2 plugin.\nSOURCE: https://github.com/panda-re/panda-ng/blob/main/plugins/syscalls2/README.md#_snippet_2\n\nLANGUAGE: C\nCODE:\n```\ntypedef void (*on_all_sys_enter_t)(CPUState *env, target_ulong pc, target_ulong callno)\n```\n\n----------------------------------------\n\nTITLE: Windows File Read Monitoring Plugin Implementation in C\nDESCRIPTION: Complete example of a plugin that uses syscalls2 to monitor NtReadFile system calls on Windows, showing callback registration and parameter handling.\nSOURCE: https://github.com/panda-re/panda-ng/blob/main/plugins/syscalls2/README.md#_snippet_9\n\nLANGUAGE: C\nCODE:\n```\n#include \"plugin/plugin.h\"\n#include \"panda/plugin_plugin.h\"\n#include \"syscalls2/syscalls_ext_typedefs.h\"\n\nvoid my_NtReadFile_enter(\n        CPUState* env,\n        target_ulong pc,\n        uint32_t FileHandle,\n        uint32_t Event,\n        uint32_t UserApcRoutine,\n        uint32_t UserApcContext,\n        uint32_t IoStatusBlock,\n        uint32_t Buffer,\n        uint32_t BufferLength,\n        uint32_t ByteOffset,\n        uint32_t Key) {\n   printf(\"NtReadFile(FileHandle=%x, Event=%x, UserApcRoutine=%x, \"\n                     \"UserApcContext=%x, IoStatusBlock=%x, Buffer=%x, \"\n                     \"BufferLength=%x, ByteOffset=%x, Key=%x)\\n\",\n        FileHandle, Event, UserApcRoutine, UserApcContext,\n        IoStatusBlock, Buffer, BufferLength, ByteOffset, Key);\n}\n\n// ...\n\nbool init_plugin(void *self) {\n    PPP_REG_CB(\"syscalls2\", on_NtReadFile_enter, my_NtReadFile_enter);\n    return true;\n}\n\n// ...\n```\n\n----------------------------------------\n\nTITLE: Mapping Prefix Check Callback in C\nDESCRIPTION: Callback function type definition for checking if a mapping exists with a specified name prefix.\nSOURCE: https://github.com/panda-re/panda-ng/blob/main/plugins/osi/README.md#_snippet_18\n\nLANGUAGE: C\nCODE:\n```\ntypedef void (*on_has_mapping_prefix_t)(CPUState *, OsiProc *, char *, bool *)\n```\n\n----------------------------------------\n\nTITLE: Declaring Native NT System Call Prototypes - C\nDESCRIPTION: Provides function prototypes for Windows NT system calls in C, each returning an NTSTATUS. Prerequisites include Windows development headers and knowledge of kernel-mode types such as HANDLE, PVOID, and PUNICODE_STRING. Inputs to these functions are usually handles, pointers to structures or buffers, and length or flag parameters; outputs are NTSTATUS codes along with any buffer results passed in arguments. These declarations do not include implementations and depend on external system linkage; they facilitate direct calls to native NT APIs, which are intended for advanced use in system software or research environments.\nSOURCE: https://github.com/panda-re/panda-ng/blob/main/plugins/syscalls2/generated-in/windows_7_x86_prototypes.txt#_snippet_4\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtReadFileScatter (HANDLE FileHandle, HANDLE Event, PIO_APC_ROUTINE ApcRoutine, PVOID ApcContext, PIO_STATUS_BLOCK IoStatusBlock, PFILE_SEGMENT_ELEMENT SegmentArray, ULONG Length, PLARGE_INTEGER ByteOffset, PULONG Key);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtReadOnlyEnlistment (HANDLE EnlistmentHandle, PLARGE_INTEGER TmVirtualClock);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtReadRequestData (HANDLE PortHandle, PPORT_MESSAGE Message, ULONG DataEntryIndex, PVOID Buffer, SIZE_T BufferSize, PSIZE_T NumberOfBytesRead);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtReadVirtualMemory (HANDLE ProcessHandle, PVOID BaseAddress, PVOID Buffer, SIZE_T BufferSize, PSIZE_T NumberOfBytesRead);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtRecoverEnlistment (HANDLE EnlistmentHandle, PVOID EnlistmentKey);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtRecoverResourceManager (HANDLE ResourceManagerHandle);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtRecoverTransactionManager (HANDLE TransactionManagerHandle);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtRegisterProtocolAddressInformation (HANDLE ResourceManager, PCRM_PROTOCOL_ID ProtocolId, ULONG ProtocolInformationSize, PVOID ProtocolInformation, ULONG CreateOptions);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtRegisterThreadTerminatePort (HANDLE PortHandle);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtReleaseKeyedEvent (HANDLE KeyedEventHandle, PVOID KeyValue, BOOLEAN Alertable, PLARGE_INTEGER Timeout);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtReleaseMutant (HANDLE MutantHandle, PLONG PreviousCount);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtReleaseSemaphore (HANDLE SemaphoreHandle, LONG ReleaseCount, PLONG PreviousCount);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtReleaseWorkerFactoryWorker (HANDLE WorkerFactoryHandle);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtRemoveIoCompletion (HANDLE IoCompletionHandle, PVOID *KeyContext, PVOID *ApcContext, PIO_STATUS_BLOCK IoStatusBlock, PLARGE_INTEGER Timeout);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtRemoveIoCompletionEx (HANDLE IoCompletionHandle, PFILE_IO_COMPLETION_INFORMATION IoCompletionInformation, ULONG Count, PULONG NumEntriesRemoved, PLARGE_INTEGER Timeout, BOOLEAN Alertable);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtRemoveProcessDebug (HANDLE ProcessHandle, HANDLE DebugObjectHandle);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtRenameKey (HANDLE KeyHandle, PUNICODE_STRING NewName);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtRenameTransactionManager (PUNICODE_STRING LogFileName, LPGUID ExistingTransactionManagerGuid);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtReplaceKey (POBJECT_ATTRIBUTES NewFile, HANDLE TargetHandle, POBJECT_ATTRIBUTES OldFile);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtReplacePartitionUnit (PUNICODE_STRING TargetInstancePath, PUNICODE_STRING SpareInstancePath, ULONG Flags);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtReplyPort (HANDLE PortHandle, PPORT_MESSAGE ReplyMessage);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtReplyWaitReceivePort (HANDLE PortHandle, PVOID *PortContext , PPORT_MESSAGE ReplyMessage, PPORT_MESSAGE ReceiveMessage);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtReplyWaitReceivePortEx (HANDLE PortHandle, PVOID *PortContext, PPORT_MESSAGE ReplyMessage, PPORT_MESSAGE ReceiveMessage, PLARGE_INTEGER Timeout);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtReplyWaitReplyPort (HANDLE PortHandle, PPORT_MESSAGE ReplyMessage);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtRequestPort (HANDLE PortHandle, PPORT_MESSAGE RequestMessage);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtRequestWaitReplyPort (HANDLE PortHandle, PPORT_MESSAGE RequestMessage, PPORT_MESSAGE ReplyMessage);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtResetEvent (HANDLE EventHandle, PLONG PreviousState);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtResetWriteWatch (HANDLE ProcessHandle, PVOID BaseAddress, SIZE_T RegionSize);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtRestoreKey (HANDLE KeyHandle, HANDLE FileHandle, ULONG Flags);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtResumeProcess (HANDLE ProcessHandle);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtResumeThread (HANDLE ThreadHandle, PULONG PreviousSuspendCount);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtRollbackComplete (HANDLE EnlistmentHandle, PLARGE_INTEGER TmVirtualClock);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtRollbackEnlistment (HANDLE EnlistmentHandle, PLARGE_INTEGER TmVirtualClock);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtRollbackTransaction (HANDLE TransactionHandle, BOOLEAN Wait);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtRollforwardTransactionManager (HANDLE TransactionManagerHandle, PLARGE_INTEGER TmVirtualClock);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtSaveKey (HANDLE KeyHandle, HANDLE FileHandle);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtSaveKeyEx (HANDLE KeyHandle, HANDLE FileHandle, ULONG Format);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtSaveMergedKeys (HANDLE HighPrecedenceKeyHandle, HANDLE LowPrecedenceKeyHandle, HANDLE FileHandle);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtSecureConnectPort (PHANDLE PortHandle, PUNICODE_STRING PortName, PSECURITY_QUALITY_OF_SERVICE SecurityQos, PPORT_VIEW ClientView, PSID RequiredServerSid, PREMOTE_PORT_VIEW ServerView, PULONG MaxMessageLength, PVOID ConnectionInformation, PULONG ConnectionInformationLength);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtSerializeBoot ();\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtSetBootEntryOrder (PULONG Ids, ULONG Count);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtSetBootOptions (PBOOT_OPTIONS BootOptions, ULONG FieldsToChange);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtSetContextThread (HANDLE ThreadHandle, PCONTEXT ThreadContext);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtSetDebugFilterState (ULONG ComponentId, ULONG Level, BOOLEAN State);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtSetDefaultHardErrorPort (HANDLE DefaultHardErrorPort);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtSetDefaultLocale (BOOLEAN UserProfile, LCID DefaultLocaleId);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtSetDefaultUILanguage (LANGID DefaultUILanguageId);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtSetDriverEntryOrder (PULONG Ids, ULONG Count);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtSetEaFile (HANDLE FileHandle, PIO_STATUS_BLOCK IoStatusBlock, PVOID Buffer, ULONG Length);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtSetEvent (HANDLE EventHandle, PLONG PreviousState);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtSetEventBoostPriority (HANDLE EventHandle);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtSetHighEventPair (HANDLE EventPairHandle);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtSetHighWaitLowEventPair (HANDLE EventPairHandle);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtSetInformationDebugObject (HANDLE DebugObjectHandle, DEBUGOBJECTINFOCLASS DebugObjectInformationClass, PVOID DebugInformation, ULONG DebugInformationLength, PULONG ReturnLength);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtSetInformationEnlistment (HANDLE EnlistmentHandle, ENLISTMENT_INFORMATION_CLASS EnlistmentInformationClass, PVOID EnlistmentInformation, ULONG EnlistmentInformationLength);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtSetInformationFile (HANDLE FileHandle, PIO_STATUS_BLOCK IoStatusBlock, PVOID FileInformation, ULONG Length, FILE_INFORMATION_CLASS FileInformationClass);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtSetInformationJobObject (HANDLE JobHandle, JOBOBJECTINFOCLASS JobObjectInformationClass, PVOID JobObjectInformation, ULONG JobObjectInformationLength);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtSetInformationKey (HANDLE KeyHandle, KEY_SET_INFORMATION_CLASS KeySetInformationClass, PVOID KeySetInformation, ULONG KeySetInformationLength);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtSetInformationObject (HANDLE Handle, OBJECT_INFORMATION_CLASS ObjectInformationClass, PVOID ObjectInformation, ULONG ObjectInformationLength);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtSetInformationProcess (HANDLE ProcessHandle, PROCESSINFOCLASS ProcessInformationClass, PVOID ProcessInformation, ULONG ProcessInformationLength);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtSetInformationResourceManager (HANDLE ResourceManagerHandle, RESOURCEMANAGER_INFORMATION_CLASS ResourceManagerInformationClass, PVOID ResourceManagerInformation, ULONG ResourceManagerInformationLength);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtSetInformationThread (HANDLE ThreadHandle, THREADINFOCLASS ThreadInformationClass, PVOID ThreadInformation, ULONG ThreadInformationLength);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtSetInformationToken (HANDLE TokenHandle, TOKEN_INFORMATION_CLASS TokenInformationClass, PVOID TokenInformation, ULONG TokenInformationLength);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtSetInformationTransaction (HANDLE TransactionHandle, TRANSACTION_INFORMATION_CLASS TransactionInformationClass, PVOID TransactionInformation, ULONG TransactionInformationLength);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtSetInformationTransactionManager (HANDLE TmHandle, TRANSACTIONMANAGER_INFORMATION_CLASS TransactionManagerInformationClass, PVOID TransactionManagerInformation, ULONG TransactionManagerInformationLength);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtSetInformationWorkerFactory (HANDLE WorkerFactoryHandle, WORKERFACTORYINFOCLASS WorkerFactoryInformationClass, PVOID WorkerFactoryInformation, ULONG WorkerFactoryInformationLength);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtSetIntervalProfile (ULONG Interval, KPROFILE_SOURCE Source);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtSetIoCompletion (HANDLE IoCompletionHandle, PVOID KeyContext, PVOID ApcContext, NTSTATUS IoStatus, ULONG_PTR IoStatusInformation);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtSetIoCompletionEx (HANDLE IoCompletionHandle, HANDLE IoCompletionReserveHandle, PVOID KeyContext, PVOID ApcContext, NTSTATUS IoStatus, ULONG_PTR IoStatusInformation);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtSetLdtEntries (ULONG Selector0, ULONG Entry0Low, ULONG Entry0Hi, ULONG Selector1, ULONG Entry1Low, ULONG Entry1Hi);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtSetLowEventPair (HANDLE EventPairHandle);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtSetLowWaitHighEventPair (HANDLE EventPairHandle);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtSetQuotaInformationFile (HANDLE FileHandle, PIO_STATUS_BLOCK IoStatusBlock, PVOID Buffer, ULONG Length);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtSetSecurityObject (HANDLE Handle, SECURITY_INFORMATION SecurityInformation, PSECURITY_DESCRIPTOR SecurityDescriptor);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtSetSystemEnvironmentValue (PUNICODE_STRING VariableName, PUNICODE_STRING VariableValue);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtSetSystemEnvironmentValueEx (PUNICODE_STRING VariableName, LPGUID VendorGuid, PVOID Value, ULONG ValueLength, ULONG Attributes);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtSetSystemInformation (SYSTEM_INFORMATION_CLASS SystemInformationClass, PVOID SystemInformation, ULONG SystemInformationLength);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtSetSystemPowerState (POWER_ACTION SystemAction, SYSTEM_POWER_STATE MinSystemState, ULONG Flags);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtSetSystemTime (PLARGE_INTEGER SystemTime, PLARGE_INTEGER PreviousTime);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtSetThreadExecutionState (EXECUTION_STATE esFlags, PEXECUTION_STATE PreviousFlags);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtSetTimer (HANDLE TimerHandle, PLARGE_INTEGER DueTime, PTIMER_APC_ROUTINE TimerApcRoutine, PVOID TimerContext, BOOLEAN WakeTimer, LONG Period, PBOOLEAN PreviousState);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtSetTimerEx (HANDLE TimerHandle, TIMER_SET_INFORMATION_CLASS TimerSetInformationClass, PVOID TimerSetInformation, ULONG TimerSetInformationLength);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtSetTimerResolution (ULONG DesiredTime, BOOLEAN SetResolution, PULONG ActualTime);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtSetUuidSeed (PCHAR Seed);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtSetValueKey (HANDLE KeyHandle, PUNICODE_STRING ValueName, ULONG TitleIndex, ULONG Type, PVOID Data, ULONG DataSize);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtSetVolumeInformationFile (HANDLE FileHandle, PIO_STATUS_BLOCK IoStatusBlock, PVOID FsInformation, ULONG Length, FS_INFORMATION_CLASS FsInformationClass);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtShutdownSystem (SHUTDOWN_ACTION Action);\n```\n\n----------------------------------------\n\nTITLE: Socket Operation System Calls in C\nDESCRIPTION: System call definitions for socket-related operations including bind, connect, listen, send, and receive functions. These declarations handle network communication and socket management.\nSOURCE: https://github.com/panda-re/panda-ng/blob/main/plugins/syscalls2/generated-in/linux_mips_prototypes.txt#_snippet_1\n\nLANGUAGE: C\nCODE:\n```\nlong sys_bind(int, struct sockaddr __user *, int);\nlong sys_connect(int, struct sockaddr __user *, int);\nlong sys_listen(int, int);\nlong sys_recv(int, void __user *, size_t, unsigned);\nlong sys_send(int, void __user *, size_t, unsigned);\n```\n\n----------------------------------------\n\nTITLE: Declaring Nt* Windows Native API Prototypes in C\nDESCRIPTION: This snippet lists C function prototypes for various Windows NT Native API (Nt*) system calls. These are non-standard, lower-level system routines used for tasks such as security and access checks, token manipulation, file and memory management, synchronization objects, job and process management, and inter-process communication. All functions return NTSTATUS and follow the NT kernel programming conventions. To use these, you need Windows platform headers and should link against ntdll.dll. These APIs operate on complex pointer-based structures, require correct privilege and handle management, and may have limitations across different OS versions.\nSOURCE: https://github.com/panda-re/panda-ng/blob/main/plugins/syscalls2/generated-in/windows_xpsp2_x86_prototypes.txt#_snippet_0\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtAcceptConnectPort (PHANDLE PortHandle, PVOID PortContext, PPORT_MESSAGE ConnectionRequest, BOOLEAN AcceptConnection, PPORT_VIEW ServerView, PREMOTE_PORT_VIEW ClientView);\nNTSTATUS NtAccessCheck (PSECURITY_DESCRIPTOR SecurityDescriptor, HANDLE ClientToken, ACCESS_MASK DesiredAccess, PGENERIC_MAPPING GenericMapping, PPRIVILEGE_SET PrivilegeSet, PULONG PrivilegeSetLength, PACCESS_MASK GrantedAccess, PNTSTATUS AccessStatus);\nNTSTATUS NtAccessCheckAndAuditAlarm (PUNICODE_STRING SubsystemName, PVOID HandleId, PUNICODE_STRING ObjectTypeName, PUNICODE_STRING ObjectName, PSECURITY_DESCRIPTOR SecurityDescriptor, ACCESS_MASK DesiredAccess, PGENERIC_MAPPING GenericMapping, BOOLEAN ObjectCreation, PACCESS_MASK GrantedAccess, PNTSTATUS AccessStatus, PBOOLEAN GenerateOnClose);\nNTSTATUS NtAccessCheckByType (PSECURITY_DESCRIPTOR SecurityDescriptor, PSID PrincipalSelfSid, HANDLE ClientToken, ACCESS_MASK DesiredAccess, POBJECT_TYPE_LIST ObjectTypeList, ULONG ObjectTypeListLength, PGENERIC_MAPPING GenericMapping, PPRIVILEGE_SET PrivilegeSet, PULONG PrivilegeSetLength, PACCESS_MASK GrantedAccess, PNTSTATUS AccessStatus);\nNTSTATUS NtAccessCheckByTypeAndAuditAlarm (PUNICODE_STRING SubsystemName, PVOID HandleId, PUNICODE_STRING ObjectTypeName, PUNICODE_STRING ObjectName, PSECURITY_DESCRIPTOR SecurityDescriptor, PSID PrincipalSelfSid, ACCESS_MASK DesiredAccess, AUDIT_EVENT_TYPE AuditType, ULONG Flags, POBJECT_TYPE_LIST ObjectTypeList, ULONG ObjectTypeListLength, PGENERIC_MAPPING GenericMapping, BOOLEAN ObjectCreation, PACCESS_MASK GrantedAccess, PNTSTATUS AccessStatus, PBOOLEAN GenerateOnClose);\nNTSTATUS NtAccessCheckByTypeResultList (PSECURITY_DESCRIPTOR SecurityDescriptor, PSID PrincipalSelfSid, HANDLE ClientToken, ACCESS_MASK DesiredAccess, POBJECT_TYPE_LIST ObjectTypeList, ULONG ObjectTypeListLength, PGENERIC_MAPPING GenericMapping, PPRIVILEGE_SET PrivilegeSet, PULONG PrivilegeSetLength, PACCESS_MASK GrantedAccess, PNTSTATUS AccessStatus);\nNTSTATUS NtAccessCheckByTypeResultListAndAuditAlarm (PUNICODE_STRING SubsystemName, PVOID HandleId, PUNICODE_STRING ObjectTypeName, PUNICODE_STRING ObjectName, PSECURITY_DESCRIPTOR SecurityDescriptor, PSID PrincipalSelfSid, ACCESS_MASK DesiredAccess, AUDIT_EVENT_TYPE AuditType, ULONG Flags, POBJECT_TYPE_LIST ObjectTypeList, ULONG ObjectTypeListLength, PGENERIC_MAPPING GenericMapping, BOOLEAN ObjectCreation, PACCESS_MASK GrantedAccess, PNTSTATUS AccessStatus, PBOOLEAN GenerateOnClose);\nNTSTATUS NtAccessCheckByTypeResultListAndAuditAlarmByHandle (PUNICODE_STRING SubsystemName, PVOID HandleId, HANDLE ClientToken, PUNICODE_STRING ObjectTypeName, PUNICODE_STRING ObjectName, PSECURITY_DESCRIPTOR SecurityDescriptor, PSID PrincipalSelfSid, ACCESS_MASK DesiredAccess, AUDIT_EVENT_TYPE AuditType, ULONG Flags, POBJECT_TYPE_LIST ObjectTypeList, ULONG ObjectTypeListLength, PGENERIC_MAPPING GenericMapping, BOOLEAN ObjectCreation, PACCESS_MASK GrantedAccess, PNTSTATUS AccessStatus, PBOOLEAN GenerateOnClose);\nNTSTATUS NtAddAtom (PWSTR AtomName, ULONG Length, PRTL_ATOM Atom);\nNTSTATUS NtAddBootEntry (PBOOT_ENTRY BootEntry, PULONG Id);\nNTSTATUS NtAdjustGroupsToken (HANDLE TokenHandle, BOOLEAN ResetToDefault, PTOKEN_GROUPS NewState, ULONG BufferLength, PTOKEN_GROUPS PreviousState, PULONG ReturnLength);\nNTSTATUS NtAdjustPrivilegesToken (HANDLE TokenHandle, BOOLEAN DisableAllPrivileges, PTOKEN_PRIVILEGES NewState, ULONG BufferLength, PTOKEN_PRIVILEGES PreviousState, PULONG ReturnLength);\nNTSTATUS NtAlertResumeThread (HANDLE ThreadHandle, PULONG PreviousSuspendCount);\nNTSTATUS NtAlertThread (HANDLE ThreadHandle);\nNTSTATUS NtAllocateLocallyUniqueId (PLUID Luid);\nNTSTATUS NtAllocateUserPhysicalPages (HANDLE ProcessHandle, PULONG_PTR NumberOfPages, PULONG_PTR UserPfnArray);\nNTSTATUS NtAllocateUuids (PULARGE_INTEGER Time, PULONG Range, PULONG Sequence, PCHAR Seed);\nNTSTATUS NtAllocateVirtualMemory (HANDLE ProcessHandle, PVOID *BaseAddress, ULONG_PTR ZeroBits, PSIZE_T RegionSize, ULONG AllocationType, ULONG Protect);\nNTSTATUS NtAreMappedFilesTheSame (PVOID File1MappedAsAnImage, PVOID File2MappedAsFile);\nNTSTATUS NtAssignProcessToJobObject (HANDLE JobHandle, HANDLE ProcessHandle);\nNTSTATUS NtCallbackReturn (PVOID OutputBuffer, ULONG OutputLength, NTSTATUS Status);\nNTSTATUS NtCancelIoFile (HANDLE FileHandle, PIO_STATUS_BLOCK IoStatusBlock);\nNTSTATUS NtCancelTimer (HANDLE TimerHandle, PBOOLEAN CurrentState);\nNTSTATUS NtClearEvent (HANDLE EventHandle);\nNTSTATUS NtClose (HANDLE Handle);\nNTSTATUS NtCloseObjectAuditAlarm (PUNICODE_STRING SubsystemName, PVOID HandleId, BOOLEAN GenerateOnClose);\nNTSTATUS NtCompactKeys (ULONG Count, HANDLE KeyArray[]);\nNTSTATUS NtCompareTokens (HANDLE FirstTokenHandle, HANDLE SecondTokenHandle, PBOOLEAN Equal);\nNTSTATUS NtCompleteConnectPort (HANDLE PortHandle);\nNTSTATUS NtCompressKey (HANDLE Key);\nNTSTATUS NtConnectPort (PHANDLE PortHandle, PUNICODE_STRING PortName, PSECURITY_QUALITY_OF_SERVICE SecurityQos, PPORT_VIEW ClientView, PREMOTE_PORT_VIEW ServerView, PULONG MaxMessageLength, PVOID ConnectionInformation, PULONG ConnectionInformationLength);\nNTSTATUS NtContinue (PCONTEXT ContextRecord, BOOLEAN TestAlert);\nNTSTATUS NtCreateDebugObject (PHANDLE DebugObjectHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, ULONG Flags);\nNTSTATUS NtCreateDirectoryObject (PHANDLE DirectoryHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes);\nNTSTATUS NtCreateEvent (PHANDLE EventHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, EVENT_TYPE EventType, BOOLEAN InitialState);\nNTSTATUS NtCreateEventPair (PHANDLE EventPairHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes);\nNTSTATUS NtCreateFile (PHANDLE FileHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, PIO_STATUS_BLOCK IoStatusBlock, PLARGE_INTEGER AllocationSize, ULONG FileAttributes, ULONG ShareAccess, ULONG CreateDisposition, ULONG CreateOptions, PVOID EaBuffer, ULONG EaLength);\nNTSTATUS NtCreateIoCompletion (PHANDLE IoCompletionHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, ULONG Count);\nNTSTATUS NtCreateJobObject (PHANDLE JobHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes);\nNTSTATUS NtCreateJobSet (ULONG NumJob, PJOB_SET_ARRAY UserJobSet, ULONG Flags);\nNTSTATUS NtCreateKey (PHANDLE KeyHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, ULONG TitleIndex, PUNICODE_STRING Class, ULONG CreateOptions, PULONG Disposition);\nNTSTATUS NtCreateMailslotFile (PHANDLE FileHandle, ULONG DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, PIO_STATUS_BLOCK IoStatusBlock, ULONG CreateOptions, ULONG MailslotQuota, ULONG MaximumMessageSize, PLARGE_INTEGER ReadTimeout);\nNTSTATUS NtCreateMutant (PHANDLE MutantHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, BOOLEAN InitialOwner);\nNTSTATUS NtCreateNamedPipeFile (PHANDLE FileHandle, ULONG DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, PIO_STATUS_BLOCK IoStatusBlock, ULONG ShareAccess, ULONG CreateDisposition, ULONG CreateOptions, ULONG NamedPipeType, ULONG ReadMode, ULONG CompletionMode, ULONG MaximumInstances, ULONG InboundQuota, ULONG OutboundQuota, PLARGE_INTEGER DefaultTimeout);\nNTSTATUS NtCreatePagingFile (PUNICODE_STRING PageFileName, PLARGE_INTEGER MinimumSize, PLARGE_INTEGER MaximumSize, ULONG Priority);\nNTSTATUS NtCreatePort (PHANDLE PortHandle, POBJECT_ATTRIBUTES ObjectAttributes, ULONG MaxConnectionInfoLength, ULONG MaxMessageLength, ULONG MaxPoolUsage);\nNTSTATUS NtCreateProcess (PHANDLE ProcessHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, HANDLE ParentProcess, BOOLEAN InheritObjectTable, HANDLE SectionHandle, HANDLE DebugPort, HANDLE ExceptionPort);\nNTSTATUS NtCreateProcessEx (PHANDLE ProcessHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, HANDLE ParentProcess, ULONG Flags, HANDLE SectionHandle, HANDLE DebugPort, HANDLE ExceptionPort, ULONG JobMemberLevel);\nNTSTATUS NtCreateProfile (PHANDLE ProfileHandle, HANDLE Process, PVOID RangeBase, SIZE_T RangeSize, ULONG BucketSize, PULONG Buffer, ULONG BufferSize, KPROFILE_SOURCE ProfileSource, KAFFINITY Affinity);\nNTSTATUS NtCreateSection (PHANDLE SectionHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, PLARGE_INTEGER MaximumSize, ULONG SectionPageProtection, ULONG AllocationAttributes, HANDLE FileHandle);\nNTSTATUS NtCreateSemaphore (PHANDLE SemaphoreHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, LONG InitialCount, LONG MaximumCount);\nNTSTATUS NtCreateSymbolicLinkObject (PHANDLE LinkHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, PUNICODE_STRING LinkTarget);\nNTSTATUS NtCreateThread (PHANDLE ThreadHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, HANDLE ProcessHandle, PCLIENT_ID ClientId, PCONTEXT ThreadContext, PINITIAL_TEB InitialTeb, BOOLEAN CreateSuspended);\nNTSTATUS NtCreateTimer (PHANDLE TimerHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, TIMER_TYPE TimerType);\nNTSTATUS NtCreateToken (PHANDLE TokenHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, TOKEN_TYPE TokenType, PLUID AuthenticationId, PLARGE_INTEGER ExpirationTime, PTOKEN_USER User, PTOKEN_GROUPS Groups, PTOKEN_PRIVILEGES Privileges, PTOKEN_OWNER Owner, PTOKEN_PRIMARY_GROUP PrimaryGroup, PTOKEN_DEFAULT_DACL DefaultDacl, PTOKEN_SOURCE TokenSource);\nNTSTATUS NtCreateWaitablePort (PHANDLE PortHandle, POBJECT_ATTRIBUTES ObjectAttributes, ULONG MaxConnectionInfoLength, ULONG MaxMessageLength, ULONG MaxPoolUsage);\nNTSTATUS NtDebugActiveProcess (HANDLE ProcessHandle, HANDLE DebugObjectHandle);\nNTSTATUS NtDebugContinue (HANDLE DebugObjectHandle, PCLIENT_ID ClientId, NTSTATUS ContinueStatus);\nNTSTATUS NtDelayExecution (BOOLEAN Alertable, PLARGE_INTEGER DelayInterval);\n```\n\n----------------------------------------\n\nTITLE: Retrieving System Call Return Value in C\nDESCRIPTION: API function to retrieve the return value of a system call, abstracting away architecture-specific details. Must be called in the appropriate context where the return value is still available.\nSOURCE: https://github.com/panda-re/panda-ng/blob/main/plugins/syscalls2/README.md#_snippet_6\n\nLANGUAGE: C\nCODE:\n```\ntarget_long get_syscall_retval(CPUState *cpu)\n```\n\n----------------------------------------\n\nTITLE: KERNELINFO Lines to Copy into Configuration (plain text)\nDESCRIPTION: This snippet demonstrates sample output lines from the dmesg log showing the kernel structure offset and version fields as produced by the kernelinfo.ko module. Intended for manual copying (without the BEGIN/END sentinels) into a kernel configuration file for osi_linux. Values must be placed within a unique section header in kernelinfo.conf.\nSOURCE: https://github.com/panda-re/panda-ng/blob/main/plugins/osi_linux/README.md#_snippet_3\n\nLANGUAGE: plain text\nCODE:\n```\n[  335.936352] name = 4.9.0-6-686-pae|#1 SMP Debian 4.9.82-1+deb9u3 (2018-03-02)|i686\n[  335.936371] version.a = 4\n[  335.936380] version.b = 9\n[  335.936389] version.c = 88\n[  335.936400] task.init_addr = 3245807232\n[  335.936415] #task.init_addr = 0xC1771680\n[  335.936425] #task.per_cpu_offset_0 = 0x36127000\n[  335.936435] task.per_cpu_offset_0 = 907177984\n[  335.936443] #task.current_task_addr = 0xC18C3208\n[  335.936452] task.current_task_addr = 3247190536\n[  335.936473] task.size = 5888\n[  335.936502] task.tasks_offset = 708\n[  335.936528] task.pid_offset = 864\n[  335.936553] task.tgid_offset = 868\n[  335.936578] task.group_leader_offset = 900\n[  335.936602] task.thread_group_offset = 956\n[  335.936627] task.real_parent_offset = 876\n[  335.936651] task.parent_offset = 880\n[  335.936676] task.mm_offset = 748\n[  335.936700] task.stack_offset = 12\n[  335.936724] task.real_cred_offset = 1092\n[  335.936748] task.cred_offset = 1096\n[  335.936772] task.comm_offset = 1100\n[...]\n[  335.937668] path.mnt_parent_offset = -8\n[  335.937694] path.mnt_mountpoint_offset = -4\n[  335.937701] ---KERNELINFO-END---\n```\n\n----------------------------------------\n\nTITLE: Declaring Nt* Native API Function Prototypes - Windows NT Kernel - C\nDESCRIPTION: This snippet declares multiple function prototypes for the Windows NT Native API, each beginning with the 'Nt' prefix. These routines provide direct access to kernel-level operations such as setting file/system information, security manipulation, shutdown, power state management, debugging, process/thread control, and driver management. All functions are declared with NTSTATUS as the return type and use native Windows data types; usage requires the definitions of related structs and typedefs (e.g., HANDLE, IO_STATUS_BLOCK, UNICODE_STRING). These prototypes are typically included in low-level system utilities, kernel modules, or advanced diagnostic tools. Inputs and outputs vary per function, reflecting control, information, and status manipulation; correct parameterization and appropriate caller privileges are essential for safe and successful invocation.\nSOURCE: https://github.com/panda-re/panda-ng/blob/main/plugins/syscalls2/generated-in/windows_7_x64_prototypes.txt#_snippet_5\n\nLANGUAGE: C\nCODE:\n```\nNTSTATUS NtSetQuotaInformationFile (HANDLE FileHandle, PIO_STATUS_BLOCK IoStatusBlock, PVOID Buffer, ULONG Length);\nNTSTATUS NtSetSecurityObject (HANDLE Handle, SECURITY_INFORMATION SecurityInformation, PSECURITY_DESCRIPTOR SecurityDescriptor);\nNTSTATUS NtSetSystemEnvironmentValue (PUNICODE_STRING VariableName, PUNICODE_STRING VariableValue);\nNTSTATUS NtSetSystemEnvironmentValueEx (PUNICODE_STRING VariableName, LPGUID VendorGuid, PVOID Value, ULONG ValueLength, ULONG Attributes);\nNTSTATUS NtSetSystemInformation (SYSTEM_INFORMATION_CLASS SystemInformationClass, PVOID SystemInformation, ULONG SystemInformationLength);\nNTSTATUS NtSetSystemPowerState (POWER_ACTION SystemAction, SYSTEM_POWER_STATE MinSystemState, ULONG Flags);\nNTSTATUS NtSetSystemTime (PLARGE_INTEGER SystemTime, PLARGE_INTEGER PreviousTime);\nNTSTATUS NtSetThreadExecutionState (EXECUTION_STATE esFlags, PEXECUTION_STATE PreviousFlags);\nNTSTATUS NtSetTimerEx (HANDLE TimerHandle, TIMER_SET_INFORMATION_CLASS TimerSetInformationClass, PVOID TimerSetInformation, ULONG TimerSetInformationLength);\nNTSTATUS NtSetTimerResolution (ULONG DesiredTime, BOOLEAN SetResolution, PULONG ActualTime);\nNTSTATUS NtSetUuidSeed (PCHAR Seed);\nNTSTATUS NtSetVolumeInformationFile (HANDLE FileHandle, PIO_STATUS_BLOCK IoStatusBlock, PVOID FsInformation, ULONG Length, FS_INFORMATION_CLASS FsInformationClass);\nNTSTATUS NtShutdownSystem (SHUTDOWN_ACTION Action);\nNTSTATUS NtShutdownWorkerFactory (HANDLE WorkerFactoryHandle, LONG *PendingWorkerCount);\nNTSTATUS NtSignalAndWaitForSingleObject (HANDLE SignalHandle, HANDLE WaitHandle, BOOLEAN Alertable, PLARGE_INTEGER Timeout);\nNTSTATUS NtSinglePhaseReject (HANDLE EnlistmentHandle, PLARGE_INTEGER TmVirtualClock);\nNTSTATUS NtStartProfile (HANDLE ProfileHandle);\nNTSTATUS NtStopProfile (HANDLE ProfileHandle);\nNTSTATUS NtSuspendProcess (HANDLE ProcessHandle);\nNTSTATUS NtSuspendThread (HANDLE ThreadHandle, PULONG PreviousSuspendCount);\nNTSTATUS NtSystemDebugControl (SYSDBG_COMMAND Command, PVOID InputBuffer, ULONG InputBufferLength, PVOID OutputBuffer, ULONG OutputBufferLength, PULONG ReturnLength);\nNTSTATUS NtTerminateJobObject (HANDLE JobHandle, NTSTATUS ExitStatus);\nNTSTATUS NtTestAlert ();\nNTSTATUS NtThawRegistry ();\nNTSTATUS NtThawTransactions ();\nNTSTATUS NtTraceControl (ULONG FunctionCode, PVOID InBuffer, ULONG InBufferLen, PVOID OutBuffer, ULONG OutBufferLen, PULONG ReturnLength);\nNTSTATUS NtTranslateFilePath (PFILE_PATH InputFilePath, ULONG OutputType, PFILE_PATH OutputFilePath, PULONG OutputFilePathLength);\nNTSTATUS NtUmsThreadYield (PVOID SchedulerParam);\nNTSTATUS NtUnloadDriver (PUNICODE_STRING DriverServiceName);\nNTSTATUS NtUnloadKey (POBJECT_ATTRIBUTES TargetKey);\nNTSTATUS NtUnloadKey2 (POBJECT_ATTRIBUTES TargetKey, ULONG Flags);\nNTSTATUS NtUnloadKeyEx (POBJECT_ATTRIBUTES TargetKey, HANDLE Event);\nNTSTATUS NtUnlockFile (HANDLE FileHandle, PIO_STATUS_BLOCK IoStatusBlock, PLARGE_INTEGER ByteOffset, PLARGE_INTEGER Length, ULONG Key);\nNTSTATUS NtUnlockVirtualMemory (HANDLE ProcessHandle, PVOID *BaseAddress, PSIZE_T RegionSize, ULONG MapType);\nNTSTATUS NtVdmControl (VDMSERVICECLASS Service, PVOID ServiceData);\nNTSTATUS NtWaitForDebugEvent (HANDLE DebugObjectHandle, BOOLEAN Alertable, PLARGE_INTEGER Timeout, PDBGUI_WAIT_STATE_CHANGE WaitStateChange);\nNTSTATUS NtWaitForKeyedEvent (HANDLE KeyedEventHandle, PVOID KeyValue, BOOLEAN Alertable, PLARGE_INTEGER Timeout);\nNTSTATUS NtWaitForWorkViaWorkerFactory (HANDLE WorkerFactoryHandle, PFILE_IO_COMPLETION_INFORMATION MiniPacket);\nNTSTATUS NtWaitHighEventPair (HANDLE EventPairHandle);\nNTSTATUS NtWaitLowEventPair (HANDLE EventPairHandle);\nNTSTATUS NtWorkerFactoryWorkerReady (HANDLE WorkerFactoryHandle);\n```\n\n----------------------------------------\n\nTITLE: NT Thread Management API Functions\nDESCRIPTION: System calls for creating, resuming, and terminating threads in Windows NT.\nSOURCE: https://github.com/panda-re/panda-ng/blob/main/plugins/syscalls2/generated-in/windows_vistasp0_x64_prototypes.txt#_snippet_4\n\nLANGUAGE: C\nCODE:\n```\nNTSTATUS NtCreateThread (PHANDLE ThreadHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, HANDLE ProcessHandle, PCLIENT_ID ClientId, PCONTEXT ThreadContext, PINITIAL_TEB InitialTeb, BOOLEAN CreateSuspended);\nNTSTATUS NtResumeThread (HANDLE ThreadHandle, PULONG PreviousSuspendCount);\nNTSTATUS NtTerminateThread (HANDLE ThreadHandle, NTSTATUS ExitStatus);\n```\n\n----------------------------------------\n\nTITLE: Windows NT Synchronization Object Function Declarations (C)\nDESCRIPTION: Declarations for NT API functions that manage synchronization objects like mutexes, semaphores, and events. These functions provide the foundation for thread synchronization in Windows NT.\nSOURCE: https://github.com/panda-re/panda-ng/blob/main/plugins/syscalls2/generated-in/windows_vistasp0_x86_prototypes.txt#_snippet_14\n\nLANGUAGE: C\nCODE:\n```\nNTSTATUS NtQueryEvent (HANDLE EventHandle, EVENT_INFORMATION_CLASS EventInformationClass, PVOID EventInformation, ULONG EventInformationLength, PULONG ReturnLength);\nNTSTATUS NtQueryMutant (HANDLE MutantHandle, MUTANT_INFORMATION_CLASS MutantInformationClass, PVOID MutantInformation, ULONG MutantInformationLength, PULONG ReturnLength);\nNTSTATUS NtQuerySemaphore (HANDLE SemaphoreHandle, SEMAPHORE_INFORMATION_CLASS SemaphoreInformationClass, PVOID SemaphoreInformation, ULONG SemaphoreInformationLength, PULONG ReturnLength);\nNTSTATUS NtReleaseMutant (HANDLE MutantHandle, PLONG PreviousCount);\nNTSTATUS NtReleaseSemaphore (HANDLE SemaphoreHandle, LONG ReleaseCount, PLONG PreviousCount);\nNTSTATUS NtResetEvent (HANDLE EventHandle, PLONG PreviousState);\n```\n\n----------------------------------------\n\nTITLE: Retrieving System Call Meta-Information in C\nDESCRIPTION: API function to get meta-information about the system calls of the guest operating system. Only available when the load-info flag is enabled.\nSOURCE: https://github.com/panda-re/panda-ng/blob/main/plugins/syscalls2/README.md#_snippet_8\n\nLANGUAGE: C\nCODE:\n```\nconst syscall_meta_t *get_syscall_meta(void)\n```\n\n----------------------------------------\n\nTITLE: Extracting Context Switch Address from System.map (sh)\nDESCRIPTION: Shows shell commands to extract the function address for task change notifications from the guest OS System.map file depending on kernel version. Outputs an address to be inserted as task.switch_task_hook_addr in kernelinfo.conf. Expects correct root path to the System.map and proper kernel version in place.\nSOURCE: https://github.com/panda-re/panda-ng/blob/main/plugins/osi_linux/README.md#_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\ngrep finish_task_switch /boot/System.map-<Kernel Version>\n```\n\nLANGUAGE: sh\nCODE:\n```\ngrep __switch_to /boot/System.map-<Kernel Version>\n```\n\n----------------------------------------\n\nTITLE: Declaring Windows NT Native API Function Prototypes in C\nDESCRIPTION: These code snippets declare a series of NTSTATUS-returning functions, comprising the Windows NT Native API system call interfaces. Each function prototype is defined with specific handle types, information classes, and pointers to structures for passing and returning detailed data. Dependencies include the relevant NT type definitions (e.g., HANDLE, PUNICODE_STRING, PIO_STATUS_BLOCK, etc.), typically from Windows and NT headers. Inputs vary per function but generally include handles, classes, buffer pointers, and lengths; outputs may be status codes and structure data. No implementation is provided—only function prototypes for use in linking or static analysis; for implementations, corresponding system DLLs must be used.\nSOURCE: https://github.com/panda-re/panda-ng/blob/main/plugins/syscalls2/generated-in/windows_7_x64_prototypes.txt#_snippet_4\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtQueryInformationResourceManager (HANDLE ResourceManagerHandle, RESOURCEMANAGER_INFORMATION_CLASS ResourceManagerInformationClass, PVOID ResourceManagerInformation, ULONG ResourceManagerInformationLength, PULONG ReturnLength);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtQueryInformationTransaction (HANDLE TransactionHandle, TRANSACTION_INFORMATION_CLASS TransactionInformationClass, PVOID TransactionInformation, ULONG TransactionInformationLength, PULONG ReturnLength);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtQueryInformationTransactionManager (HANDLE TransactionManagerHandle, TRANSACTIONMANAGER_INFORMATION_CLASS TransactionManagerInformationClass, PVOID TransactionManagerInformation, ULONG TransactionManagerInformationLength, PULONG ReturnLength);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtQueryInformationWorkerFactory (HANDLE WorkerFactoryHandle, WORKERFACTORYINFOCLASS WorkerFactoryInformationClass, PVOID WorkerFactoryInformation, ULONG WorkerFactoryInformationLength, PULONG ReturnLength);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtQueryInstallUILanguage (LANGID *InstallUILanguageId);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtQueryIntervalProfile (KPROFILE_SOURCE ProfileSource, PULONG Interval);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtQueryIoCompletion (HANDLE IoCompletionHandle, IO_COMPLETION_INFORMATION_CLASS IoCompletionInformationClass, PVOID IoCompletionInformation, ULONG IoCompletionInformationLength, PULONG ReturnLength);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtQueryLicenseValue (PUNICODE_STRING Name, PULONG Type, PVOID Buffer, ULONG Length, PULONG ReturnedLength);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtQueryMultipleValueKey (HANDLE KeyHandle, PKEY_VALUE_ENTRY ValueEntries, ULONG EntryCount, PVOID ValueBuffer, PULONG BufferLength, PULONG RequiredBufferLength);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtQueryMutant (HANDLE MutantHandle, MUTANT_INFORMATION_CLASS MutantInformationClass, PVOID MutantInformation, ULONG MutantInformationLength, PULONG ReturnLength);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtQueryOpenSubKeys (POBJECT_ATTRIBUTES TargetKey, PULONG HandleCount);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtQueryOpenSubKeysEx (POBJECT_ATTRIBUTES TargetKey, ULONG BufferLength, PVOID Buffer, PULONG RequiredSize);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtQueryPortInformationProcess ();\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtQueryQuotaInformationFile (HANDLE FileHandle, PIO_STATUS_BLOCK IoStatusBlock, PVOID Buffer, ULONG Length, BOOLEAN ReturnSingleEntry, PVOID SidList, ULONG SidListLength, PULONG StartSid, BOOLEAN RestartScan);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtQuerySecurityAttributesToken (HANDLE TokenHandle, PUNICODE_STRING Attributes, ULONG NumberOfAttributes, PVOID Buffer, ULONG Length, PULONG ReturnLength);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtQuerySecurityObject (HANDLE Handle, SECURITY_INFORMATION SecurityInformation, PSECURITY_DESCRIPTOR SecurityDescriptor, ULONG Length, PULONG LengthNeeded);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtQuerySemaphore (HANDLE SemaphoreHandle, SEMAPHORE_INFORMATION_CLASS SemaphoreInformationClass, PVOID SemaphoreInformation, ULONG SemaphoreInformationLength, PULONG ReturnLength);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtQuerySymbolicLinkObject (HANDLE LinkHandle, PUNICODE_STRING LinkTarget, PULONG ReturnedLength);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtQuerySystemEnvironmentValue (PUNICODE_STRING VariableName, PWSTR VariableValue, USHORT ValueLength, PUSHORT ReturnLength);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtQuerySystemEnvironmentValueEx (PUNICODE_STRING VariableName, LPGUID VendorGuid, PVOID Value, PULONG ValueLength, PULONG Attributes);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtQuerySystemInformationEx (SYSTEM_INFORMATION_CLASS SystemInformationClass, PVOID QueryInformation, ULONG QueryInformationLength, PVOID SystemInformation, ULONG SystemInformationLength, PULONG ReturnLength);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtQueryTimerResolution (PULONG MaximumTime, PULONG MinimumTime, PULONG CurrentTime);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtQueueApcThreadEx (HANDLE ThreadHandle, HANDLE UserApcReserveHandle, PPS_APC_ROUTINE ApcRoutine, PVOID ApcArgument1, PVOID ApcArgument2, PVOID ApcArgument3);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtRaiseException (PEXCEPTION_RECORD ExceptionRecord, PCONTEXT ContextRecord, BOOLEAN FirstChance);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtRaiseHardError (NTSTATUS ErrorStatus, ULONG NumberOfParameters, ULONG UnicodeStringParameterMask, PULONG_PTR Parameters, ULONG ValidResponseOptions, PULONG Response);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtReadOnlyEnlistment (HANDLE EnlistmentHandle, PLARGE_INTEGER TmVirtualClock);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtRecoverEnlistment (HANDLE EnlistmentHandle, PVOID EnlistmentKey);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtRecoverResourceManager (HANDLE ResourceManagerHandle);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtRecoverTransactionManager (HANDLE TransactionManagerHandle);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtRegisterProtocolAddressInformation (HANDLE ResourceManager, PCRM_PROTOCOL_ID ProtocolId, ULONG ProtocolInformationSize, PVOID ProtocolInformation, ULONG CreateOptions);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtRegisterThreadTerminatePort (HANDLE PortHandle);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtReleaseKeyedEvent (HANDLE KeyedEventHandle, PVOID KeyValue, BOOLEAN Alertable, PLARGE_INTEGER Timeout);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtReleaseWorkerFactoryWorker (HANDLE WorkerFactoryHandle);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtRemoveIoCompletionEx (HANDLE IoCompletionHandle, PFILE_IO_COMPLETION_INFORMATION IoCompletionInformation, ULONG Count, PULONG NumEntriesRemoved, PLARGE_INTEGER Timeout, BOOLEAN Alertable);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtRemoveProcessDebug (HANDLE ProcessHandle, HANDLE DebugObjectHandle);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtRenameKey (HANDLE KeyHandle, PUNICODE_STRING NewName);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtRenameTransactionManager (PUNICODE_STRING LogFileName, LPGUID ExistingTransactionManagerGuid);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtReplaceKey (POBJECT_ATTRIBUTES NewFile, HANDLE TargetHandle, POBJECT_ATTRIBUTES OldFile);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtReplacePartitionUnit (PUNICODE_STRING TargetInstancePath, PUNICODE_STRING SpareInstancePath, ULONG Flags);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtReplyWaitReplyPort (HANDLE PortHandle, PPORT_MESSAGE ReplyMessage);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtRequestPort (HANDLE PortHandle, PPORT_MESSAGE RequestMessage);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtResetEvent (HANDLE EventHandle, PLONG PreviousState);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtResetWriteWatch (HANDLE ProcessHandle, PVOID BaseAddress, SIZE_T RegionSize);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtRestoreKey (HANDLE KeyHandle, HANDLE FileHandle, ULONG Flags);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtResumeProcess (HANDLE ProcessHandle);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtRollbackComplete (HANDLE EnlistmentHandle, PLARGE_INTEGER TmVirtualClock);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtRollbackEnlistment (HANDLE EnlistmentHandle, PLARGE_INTEGER TmVirtualClock);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtRollbackTransaction (HANDLE TransactionHandle, BOOLEAN Wait);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtRollforwardTransactionManager (HANDLE TransactionManagerHandle, PLARGE_INTEGER TmVirtualClock);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtSaveKey (HANDLE KeyHandle, HANDLE FileHandle);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtSaveKeyEx (HANDLE KeyHandle, HANDLE FileHandle, ULONG Format);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtSaveMergedKeys (HANDLE HighPrecedenceKeyHandle, HANDLE LowPrecedenceKeyHandle, HANDLE FileHandle);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtSecureConnectPort (PHANDLE PortHandle, PUNICODE_STRING PortName, PSECURITY_QUALITY_OF_SERVICE SecurityQos, PPORT_VIEW ClientView, PSID RequiredServerSid, PREMOTE_PORT_VIEW ServerView, PULONG MaxMessageLength, PVOID ConnectionInformation, PULONG ConnectionInformationLength);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtSerializeBoot ();\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtSetBootEntryOrder (PULONG Ids, ULONG Count);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtSetBootOptions (PBOOT_OPTIONS BootOptions, ULONG FieldsToChange);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtSetContextThread (HANDLE ThreadHandle, PCONTEXT ThreadContext);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtSetDebugFilterState (ULONG ComponentId, ULONG Level, BOOLEAN State);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtSetDefaultHardErrorPort (HANDLE DefaultHardErrorPort);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtSetDefaultLocale (BOOLEAN UserProfile, LCID DefaultLocaleId);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtSetDefaultUILanguage (LANGID DefaultUILanguageId);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtSetDriverEntryOrder (PULONG Ids, ULONG Count);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtSetEaFile (HANDLE FileHandle, PIO_STATUS_BLOCK IoStatusBlock, PVOID Buffer, ULONG Length);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtSetHighEventPair (HANDLE EventPairHandle);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtSetHighWaitLowEventPair (HANDLE EventPairHandle);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtSetInformationDebugObject (HANDLE DebugObjectHandle, DEBUGOBJECTINFOCLASS DebugObjectInformationClass, PVOID DebugInformation, ULONG DebugInformationLength, PULONG ReturnLength);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtSetInformationEnlistment (HANDLE EnlistmentHandle, ENLISTMENT_INFORMATION_CLASS EnlistmentInformationClass, PVOID EnlistmentInformation, ULONG EnlistmentInformationLength);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtSetInformationJobObject (HANDLE JobHandle, JOBOBJECTINFOCLASS JobObjectInformationClass, PVOID JobObjectInformation, ULONG JobObjectInformationLength);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtSetInformationKey (HANDLE KeyHandle, KEY_SET_INFORMATION_CLASS KeySetInformationClass, PVOID KeySetInformation, ULONG KeySetInformationLength);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtSetInformationResourceManager (HANDLE ResourceManagerHandle, RESOURCEMANAGER_INFORMATION_CLASS ResourceManagerInformationClass, PVOID ResourceManagerInformation, ULONG ResourceManagerInformationLength);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtSetInformationToken (HANDLE TokenHandle, TOKEN_INFORMATION_CLASS TokenInformationClass, PVOID TokenInformation, ULONG TokenInformationLength);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtSetInformationTransaction (HANDLE TransactionHandle, TRANSACTION_INFORMATION_CLASS TransactionInformationClass, PVOID TransactionInformation, ULONG TransactionInformationLength);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtSetInformationTransactionManager (HANDLE TmHandle, TRANSACTIONMANAGER_INFORMATION_CLASS TransactionManagerInformationClass, PVOID TransactionManagerInformation, ULONG TransactionManagerInformationLength);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtSetInformationWorkerFactory (HANDLE WorkerFactoryHandle, WORKERFACTORYINFOCLASS WorkerFactoryInformationClass, PVOID WorkerFactoryInformation, ULONG WorkerFactoryInformationLength);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtSetIntervalProfile (ULONG Interval, KPROFILE_SOURCE Source);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtSetIoCompletion (HANDLE IoCompletionHandle, PVOID KeyContext, PVOID ApcContext, NTSTATUS IoStatus, ULONG_PTR IoStatusInformation);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtSetIoCompletionEx (HANDLE IoCompletionHandle, HANDLE IoCompletionReserveHandle, PVOID KeyContext, PVOID ApcContext, NTSTATUS IoStatus, ULONG_PTR IoStatusInformation);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtSetLdtEntries (ULONG Selector0, ULONG Entry0Low, ULONG Entry0Hi, ULONG Selector1, ULONG Entry1Low, ULONG Entry1Hi);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtSetLowEventPair (HANDLE EventPairHandle);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtSetLowWaitHighEventPair (HANDLE EventPairHandle);\n```\n\n----------------------------------------\n\nTITLE: NT Process Management API Functions\nDESCRIPTION: System calls for creating and managing processes, including NtCreateProcessEx and process job management functions.\nSOURCE: https://github.com/panda-re/panda-ng/blob/main/plugins/syscalls2/generated-in/windows_vistasp0_x64_prototypes.txt#_snippet_3\n\nLANGUAGE: C\nCODE:\n```\nNTSTATUS NtCreateProcessEx (PHANDLE ProcessHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, HANDLE ParentProcess, ULONG Flags, HANDLE SectionHandle, HANDLE DebugPort, HANDLE ExceptionPort, ULONG JobMemberLevel);\nNTSTATUS NtIsProcessInJob (HANDLE ProcessHandle, HANDLE JobHandle);\n```\n\n----------------------------------------\n\nTITLE: Windows NT Section Creation and Memory Management API Functions in C\nDESCRIPTION: Function declarations for Windows NT native API calls related to section creation, memory allocation, and UUID generation. These low-level system calls allow direct manipulation of virtual memory, physical pages, and system resources.\nSOURCE: https://github.com/panda-re/panda-ng/blob/main/plugins/syscalls2/generated-in/windows_8sp0_x86_prototypes.txt#_snippet_8\n\nLANGUAGE: C\nCODE:\n```\nNTSTATUS NtCreateSection (PHANDLE SectionHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, PLARGE_INTEGER MaximumSize, ULONG SectionPageProtection, ULONG AllocationAttributes, HANDLE FileHandle);\nNTSTATUS NtAllocateVirtualMemory (HANDLE ProcessHandle, PVOID *BaseAddress, ULONG_PTR ZeroBits, PSIZE_T RegionSize, ULONG AllocationType, ULONG Protect);\nNTSTATUS NtAllocateUuids (PULARGE_INTEGER Time, PULONG Range, PULONG Sequence, PCHAR Seed);\nNTSTATUS NtAllocateUserPhysicalPages (HANDLE ProcessHandle, PULONG_PTR NumberOfPages, PULONG_PTR UserPfnArray);\n```\n\n----------------------------------------\n\nTITLE: Current Process Retrieval Callback in C\nDESCRIPTION: Callback function type definition for getting the currently running process information. Returns an allocated OsiProc struct that must be freed with free_osiproc.\nSOURCE: https://github.com/panda-re/panda-ng/blob/main/plugins/osi/README.md#_snippet_5\n\nLANGUAGE: C\nCODE:\n```\ntypedef void (*on_get_current_process_t)(CPUState *, OsiProc **)\n```\n\n----------------------------------------\n\nTITLE: Running Kernel Info Extraction Script (Shell)\nDESCRIPTION: This shell command demonstrates how to run the kernel information extraction script with a vmlinux file and specify an output file.\nSOURCE: https://github.com/panda-re/panda-ng/blob/main/plugins/osi_linux/utils/kernelinfo_gdb/README.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\n./run.sh vmlinux file.out\n```\n\n----------------------------------------\n\nTITLE: Declaring Windows NT System Call Prototypes in C\nDESCRIPTION: This snippet lists C function prototypes for Windows NT system calls, allowing applications or system tools to invoke low-level kernel functionality otherwise inaccessible through standard Win32 APIs. No external dependencies beyond standard Windows types are required, but proper linking against ntdll or a compatible library is necessary for usage. Each function returns an NTSTATUS code and typically takes HANDLEs, pointers, and specific structure types as parameters; the declarations are intended for inclusion in headers where direct NT API usage is required, and are not definitions nor implementations themselves.\nSOURCE: https://github.com/panda-re/panda-ng/blob/main/plugins/syscalls2/generated-in/windows_7_x64_prototypes.txt#_snippet_3\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtGetDevicePowerState (HANDLE Device, DEVICE_POWER_STATE *State);\nNTSTATUS NtGetMUIRegistryInfo (ULONG Flags, PULONG DataSize, PVOID Data);\nNTSTATUS NtGetNextProcess (HANDLE ProcessHandle, ACCESS_MASK DesiredAccess, ULONG HandleAttributes, ULONG Flags, PHANDLE NewProcessHandle);\nNTSTATUS NtGetNextThread (HANDLE ProcessHandle, HANDLE ThreadHandle, ACCESS_MASK DesiredAccess, ULONG HandleAttributes, ULONG Flags, PHANDLE NewThreadHandle);\nNTSTATUS NtGetNlsSectionPtr (ULONG SectionType, ULONG SectionData, PVOID ContextData, PVOID *SectionPointer, PULONG SectionSize);\nNTSTATUS NtGetNotificationResourceManager (HANDLE ResourceManagerHandle, PTRANSACTION_NOTIFICATION TransactionNotification, ULONG NotificationLength, PLARGE_INTEGER Timeout, PULONG ReturnLength, ULONG Asynchronous, ULONG_PTR AsynchronousContext);\nNTSTATUS NtGetPlugPlayEvent (HANDLE EventHandle, PVOID Context, PPLUGPLAY_EVENT_BLOCK EventBlock, ULONG EventBufferSize);\nNTSTATUS NtGetWriteWatch (HANDLE ProcessHandle, ULONG Flags, PVOID BaseAddress, SIZE_T RegionSize, PVOID *UserAddressArray, PULONG_PTR EntriesInUserAddressArray, PULONG Granularity);\nNTSTATUS NtImpersonateAnonymousToken (HANDLE ThreadHandle);\nNTSTATUS NtImpersonateThread (HANDLE ServerThreadHandle, HANDLE ClientThreadHandle, PSECURITY_QUALITY_OF_SERVICE SecurityQos);\nNTSTATUS NtInitializeNlsFiles (PVOID *BaseAddress, PLCID DefaultLocaleId, PLARGE_INTEGER DefaultCasingTableSize);\nNTSTATUS NtInitializeRegistry (USHORT BootCondition);\nNTSTATUS NtInitiatePowerAction (POWER_ACTION SystemAction, SYSTEM_POWER_STATE MinSystemState, ULONG Flags, BOOLEAN Asynchronous);\nBOOLEAN NtIsSystemResumeAutomatic ();\nNTSTATUS NtIsUILanguageComitted ();\nNTSTATUS NtListenPort (HANDLE PortHandle, PPORT_MESSAGE ConnectionRequest);\nNTSTATUS NtLoadDriver (PUNICODE_STRING DriverServiceName);\nNTSTATUS NtLoadKey (POBJECT_ATTRIBUTES TargetKey, POBJECT_ATTRIBUTES SourceFile);\nNTSTATUS NtLoadKey2 (POBJECT_ATTRIBUTES TargetKey, POBJECT_ATTRIBUTES SourceFile, ULONG Flags);\nNTSTATUS NtLoadKeyEx (POBJECT_ATTRIBUTES TargetKey, POBJECT_ATTRIBUTES SourceFile, ULONG Flags, HANDLE TrustClassKey );\nNTSTATUS NtLockFile (HANDLE FileHandle, HANDLE Event, PIO_APC_ROUTINE ApcRoutine, PVOID ApcContext, PIO_STATUS_BLOCK IoStatusBlock, PLARGE_INTEGER ByteOffset, PLARGE_INTEGER Length, ULONG Key, BOOLEAN FailImmediately, BOOLEAN ExclusiveLock);\nNTSTATUS NtLockProductActivationKeys (ULONG *pPrivateVer, ULONG *pSafeMode);\nNTSTATUS NtLockRegistryKey (HANDLE KeyHandle);\nNTSTATUS NtLockVirtualMemory (HANDLE ProcessHandle, PVOID *BaseAddress, PSIZE_T RegionSize, ULONG MapType);\nNTSTATUS NtMakePermanentObject (HANDLE Handle);\nNTSTATUS NtMakeTemporaryObject (HANDLE Handle);\nNTSTATUS NtMapCMFModule (ULONG What, ULONG Index, PULONG CacheIndexOut, PULONG CacheFlagsOut, PULONG ViewSizeOut, PVOID *BaseAddress);\nNTSTATUS NtMapUserPhysicalPages (PVOID VirtualAddress, ULONG_PTR NumberOfPages, PULONG_PTR UserPfnArray);\nNTSTATUS NtModifyBootEntry (PBOOT_ENTRY BootEntry);\nNTSTATUS NtModifyDriverEntry (PEFI_DRIVER_ENTRY DriverEntry);\nNTSTATUS NtNotifyChangeDirectoryFile (HANDLE FileHandle, HANDLE Event, PIO_APC_ROUTINE ApcRoutine, PVOID ApcContext, PIO_STATUS_BLOCK IoStatusBlock, PVOID Buffer, ULONG Length, ULONG CompletionFilter, BOOLEAN WatchTree);\nNTSTATUS NtNotifyChangeKey (HANDLE KeyHandle, HANDLE Event, PIO_APC_ROUTINE ApcRoutine, PVOID ApcContext, PIO_STATUS_BLOCK IoStatusBlock, ULONG CompletionFilter, BOOLEAN WatchTree, PVOID Buffer, ULONG BufferSize, BOOLEAN Asynchronous);\nNTSTATUS NtNotifyChangeMultipleKeys (HANDLE MasterKeyHandle, ULONG Count, OBJECT_ATTRIBUTES SlaveObjects[], HANDLE Event, PIO_APC_ROUTINE ApcRoutine, PVOID ApcContext, PIO_STATUS_BLOCK IoStatusBlock, ULONG CompletionFilter, BOOLEAN WatchTree, PVOID Buffer, ULONG BufferSize, BOOLEAN Asynchronous);\nNTSTATUS NtNotifyChangeSession (HANDLE Session, ULONG IoStateSequence, PVOID Reserved, ULONG Action, IO_SESSION_STATE IoState, IO_SESSION_STATE IoState2, PVOID Buffer, ULONG BufferSize);\nNTSTATUS NtOpenEnlistment (PHANDLE EnlistmentHandle, ACCESS_MASK DesiredAccess, HANDLE ResourceManagerHandle, LPGUID EnlistmentGuid, POBJECT_ATTRIBUTES ObjectAttributes);\nNTSTATUS NtOpenEventPair (PHANDLE EventPairHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes);\nNTSTATUS NtOpenIoCompletion (PHANDLE IoCompletionHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes);\nNTSTATUS NtOpenJobObject (PHANDLE JobHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes);\nNTSTATUS NtOpenKeyEx (PHANDLE KeyHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, ULONG OpenOptions);\nNTSTATUS NtOpenKeyTransacted (PHANDLE KeyHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, HANDLE TransactionHandle);\nNTSTATUS NtOpenKeyTransactedEx (PHANDLE KeyHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, ULONG OpenOptions, HANDLE TransactionHandle);\nNTSTATUS NtOpenKeyedEvent (PHANDLE KeyedEventHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes);\nNTSTATUS NtOpenMutant (PHANDLE MutantHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes);\nNTSTATUS NtOpenObjectAuditAlarm (PUNICODE_STRING SubsystemName, PVOID HandleId, PUNICODE_STRING ObjectTypeName, PUNICODE_STRING ObjectName, PSECURITY_DESCRIPTOR SecurityDescriptor, HANDLE ClientToken, ACCESS_MASK DesiredAccess, ACCESS_MASK GrantedAccess, PPRIVILEGE_SET Privileges, BOOLEAN ObjectCreation, BOOLEAN AccessGranted, PBOOLEAN GenerateOnClose);\nNTSTATUS NtOpenPrivateNamespace (PHANDLE NamespaceHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, PVOID BoundaryDescriptor);\nNTSTATUS NtOpenProcessToken (HANDLE ProcessHandle, ACCESS_MASK DesiredAccess, PHANDLE TokenHandle);\nNTSTATUS NtOpenResourceManager (PHANDLE ResourceManagerHandle, ACCESS_MASK DesiredAccess, HANDLE TmHandle, LPGUID ResourceManagerGuid, POBJECT_ATTRIBUTES ObjectAttributes);\nNTSTATUS NtOpenSemaphore (PHANDLE SemaphoreHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes);\nNTSTATUS NtOpenSession (PHANDLE SessionHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes);\nNTSTATUS NtOpenSymbolicLinkObject (PHANDLE LinkHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes);\nNTSTATUS NtOpenThread (PHANDLE ThreadHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, PCLIENT_ID ClientId);\nNTSTATUS NtOpenTimer (PHANDLE TimerHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes);\nNTSTATUS NtOpenTransaction (PHANDLE TransactionHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, LPGUID Uow, HANDLE TmHandle);\nNTSTATUS NtOpenTransactionManager (PHANDLE TmHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, PUNICODE_STRING LogFileName, LPGUID TmIdentity, ULONG OpenOptions);\nNTSTATUS NtPlugPlayControl (PLUGPLAY_CONTROL_CLASS PnPControlClass, PVOID PnPControlData, ULONG PnPControlDataLength);\nNTSTATUS NtPrePrepareComplete (HANDLE EnlistmentHandle, PLARGE_INTEGER TmVirtualClock);\nNTSTATUS NtPrePrepareEnlistment (HANDLE EnlistmentHandle, PLARGE_INTEGER TmVirtualClock);\nNTSTATUS NtPrepareComplete (HANDLE EnlistmentHandle, PLARGE_INTEGER TmVirtualClock);\nNTSTATUS NtPrepareEnlistment (HANDLE EnlistmentHandle, PLARGE_INTEGER TmVirtualClock);\nNTSTATUS NtPrivilegeCheck (HANDLE ClientToken, PPRIVILEGE_SET RequiredPrivileges, PBOOLEAN Result);\nNTSTATUS NtPrivilegeObjectAuditAlarm (PUNICODE_STRING SubsystemName, PVOID HandleId, HANDLE ClientToken, ACCESS_MASK DesiredAccess, PPRIVILEGE_SET Privileges, BOOLEAN AccessGranted);\nNTSTATUS NtPrivilegedServiceAuditAlarm (PUNICODE_STRING SubsystemName, PUNICODE_STRING ServiceName, HANDLE ClientToken, PPRIVILEGE_SET Privileges, BOOLEAN AccessGranted);\nNTSTATUS NtPropagationComplete (HANDLE ResourceManagerHandle, ULONG RequestCookie, ULONG BufferLength, PVOID Buffer);\nNTSTATUS NtPropagationFailed (HANDLE ResourceManagerHandle, ULONG RequestCookie, NTSTATUS PropStatus);\nNTSTATUS NtPulseEvent (HANDLE EventHandle, PLONG PreviousState);\nNTSTATUS NtQueryBootEntryOrder (PULONG Ids, PULONG Count);\nNTSTATUS NtQueryBootOptions (PBOOT_OPTIONS BootOptions, PULONG BootOptionsLength);\nNTSTATUS NtQueryDebugFilterState (ULONG ComponentId, ULONG Level);\nNTSTATUS NtQueryDirectoryObject (HANDLE DirectoryHandle, PVOID Buffer, ULONG Length, BOOLEAN ReturnSingleEntry, BOOLEAN RestartScan, PULONG Context, PULONG ReturnLength);\nNTSTATUS NtQueryDriverEntryOrder (PULONG Ids, PULONG Count);\nNTSTATUS NtQueryEaFile (HANDLE FileHandle, PIO_STATUS_BLOCK IoStatusBlock, PVOID Buffer, ULONG Length, BOOLEAN ReturnSingleEntry, PVOID EaList, ULONG EaListLength, PULONG EaIndex, BOOLEAN RestartScan);\nNTSTATUS NtQueryFullAttributesFile (POBJECT_ATTRIBUTES ObjectAttributes, PFILE_NETWORK_OPEN_INFORMATION FileInformation);\nNTSTATUS NtQueryInformationAtom (RTL_ATOM Atom, ATOM_INFORMATION_CLASS InformationClass, PVOID AtomInformation, ULONG AtomInformationLength, PULONG ReturnLength);\nNTSTATUS NtQueryInformationEnlistment (HANDLE EnlistmentHandle, ENLISTMENT_INFORMATION_CLASS EnlistmentInformationClass, PVOID EnlistmentInformation, ULONG EnlistmentInformationLength, PULONG ReturnLength);\nNTSTATUS NtQueryInformationJobObject (HANDLE JobHandle, JOBOBJECTINFOCLASS JobObjectInformationClass, PVOID JobObjectInformation, ULONG JobObjectInformationLength, PULONG ReturnLength);\nNTSTATUS NtQueryInformationPort (HANDLE PortHandle, PORT_INFORMATION_CLASS PortInformationClass, PVOID PortInformation, ULONG Length, PULONG ReturnLength);\n```\n\n----------------------------------------\n\nTITLE: Windows NT File Operation System Calls\nDESCRIPTION: System calls for file operations including reading, writing, and control operations\nSOURCE: https://github.com/panda-re/panda-ng/blob/main/plugins/syscalls2/generated-in/windows_vistasp0_x64_prototypes.txt#_snippet_1\n\nLANGUAGE: C\nCODE:\n```\nNTSTATUS NtReadFile(HANDLE FileHandle, HANDLE Event, PIO_APC_ROUTINE ApcRoutine, PVOID ApcContext, PIO_STATUS_BLOCK IoStatusBlock, PVOID Buffer, ULONG Length, PLARGE_INTEGER ByteOffset, PULONG Key);\nNTSTATUS NtWriteFile(HANDLE FileHandle, HANDLE Event, PIO_APC_ROUTINE ApcRoutine, PVOID ApcContext, PIO_STATUS_BLOCK IoStatusBlock, PVOID Buffer, ULONG Length, PLARGE_INTEGER ByteOffset, PULONG Key);\nNTSTATUS NtDeviceIoControlFile(HANDLE FileHandle, HANDLE Event, PIO_APC_ROUTINE ApcRoutine, PVOID ApcContext, PIO_STATUS_BLOCK IoStatusBlock, ULONG IoControlCode, PVOID InputBuffer, ULONG InputBufferLength, PVOID OutputBuffer, ULONG OutputBufferLength);\n```\n\n----------------------------------------\n\nTITLE: Windows NT Memory Operations Function Declarations (C)\nDESCRIPTION: Declarations for NT API functions related to virtual memory management, including reading, querying, and modifying memory regions. These functions provide direct access to the memory subsystem in Windows NT.\nSOURCE: https://github.com/panda-re/panda-ng/blob/main/plugins/syscalls2/generated-in/windows_vistasp0_x86_prototypes.txt#_snippet_10\n\nLANGUAGE: C\nCODE:\n```\nNTSTATUS NtQueryVirtualMemory (HANDLE ProcessHandle, PVOID BaseAddress, MEMORY_INFORMATION_CLASS MemoryInformationClass, PVOID MemoryInformation, SIZE_T MemoryInformationLength, PSIZE_T ReturnLength);\nNTSTATUS NtReadVirtualMemory (HANDLE ProcessHandle, PVOID BaseAddress, PVOID Buffer, SIZE_T BufferSize, PSIZE_T NumberOfBytesRead);\nNTSTATUS NtResetWriteWatch (HANDLE ProcessHandle, PVOID BaseAddress, SIZE_T RegionSize);\n```\n\n----------------------------------------\n\nTITLE: Installing System Dependencies for PANDA Python Interface - Shell\nDESCRIPTION: This shell snippet demonstrates the installation of required system libraries for running the pandare Python interface on Ubuntu 20.04. Key dependencies include libvdeplug-dev, libpng16-16, and libsdl2-2.0-0, which are prerequisite libraries needed by the PANDA dynamic analysis framework and its Python bindings. This command should be run with root or sudo privileges on compatible x86_64 Ubuntu 20.04 systems before installing the pandare Python package.\nSOURCE: https://github.com/panda-re/panda-ng/blob/main/python/core/README.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\napt install libvdeplug-dev libpng16-16 libsdl2-2.0-0\n```\n\n----------------------------------------\n\nTITLE: Windows NT System Call Declarations\nDESCRIPTION: Function declarations for Windows NT native API system calls (ntdll.dll exports). These functions provide low-level access to Windows kernel functionality for process/thread management, I/O operations, security, and system services.\nSOURCE: https://github.com/panda-re/panda-ng/blob/main/plugins/syscalls2/generated-in/windows_8sp1_x64_prototypes.txt#_snippet_2\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtAlpcRevokeSecurityContext (HANDLE PortHandle, ULONG Flags, ALPC_HANDLE ContextHandle);\nNTSTATUS NtAlpcSendWaitReceivePort (HANDLE PortHandle, ULONG Flags, PPORT_MESSAGE SendMessage, PALPC_MESSAGE_ATTRIBUTES SendMessageAttributes, PPORT_MESSAGE ReceiveMessage, PULONG BufferLength, PALPC_MESSAGE_ATTRIBUTES ReceiveMessageAttributes, PLARGE_INTEGER Timeout);\nNTSTATUS NtAlpcSetInformation (HANDLE PortHandle, ALPC_PORT_INFORMATION_CLASS PortInformationClass, PVOID PortInformation, ULONG Length);\nNTSTATUS NtAreMappedFilesTheSame (PVOID File1MappedAsAnImage, PVOID File2MappedAsFile);\nNTSTATUS NtAssignProcessToJobObject (HANDLE JobHandle, HANDLE ProcessHandle);\nNTSTATUS NtCancelIoFileEx (HANDLE FileHandle, PIO_STATUS_BLOCK IoRequestToCancel, PIO_STATUS_BLOCK IoStatusBlock);\n// ... additional function declarations omitted for brevity ...\n```\n\n----------------------------------------\n\nTITLE: Declaring Signal Handling and Time Management System Calls in C\nDESCRIPTION: This snippet declares system calls for signal handling (sigvec, sigblock) and time management (gettimeofday, settimeofday). It includes function signatures with their respective parameters and return types.\nSOURCE: https://github.com/panda-re/panda-ng/blob/main/plugins/syscalls2/generated-in/freebsd_x64_prototypes.txt#_snippet_9\n\nLANGUAGE: C\nCODE:\n```\nint sigvec(int signum, struct sigvec *nsv, struct sigvec *osv);\nint sigblock(int mask);\nint sigsetmask(int mask);\nint sigsuspend(osigset_t mask);\nint sigstack(struct sigstack *nss, struct sigstack *oss);\nint recvmsg(int s, struct omsghdr *msg, int flags);\nint sendmsg(int s, const void *msg, int flags);\n\nint gettimeofday(struct timeval *tp, struct timezone *tzp);\nint getrusage(int who, struct rusage *rusage);\nint getsockopt(int s, int level, int name, void *val,  int *avalsize);\n\nint readv(int fd, struct iovec *iovp, unsigned iovcnt);\nint writev(int fd, struct iovec *iovp, unsigned iovcnt);\nint settimeofday(struct timeval *tv, struct timezone *tzp);\nint fchown(int fd, int uid, int gid);\nint fchmod(int fd, mode_t mode);\nint recvfrom(int s, void *buf, size_t len, int flags, struct sockaddr *from, int *fromlenaddr);\nint setreuid(int ruid, int euid);\nint setregid(int rgid, int egid);\nint rename(const char *from, const char *to);\n```\n\n----------------------------------------\n\nTITLE: Windows NT File and Directory Management API Functions in C\nDESCRIPTION: Function declarations for Windows NT native API calls related to file and directory management. These system calls allow creating and manipulating files, named pipes, mailslot files, and directory objects.\nSOURCE: https://github.com/panda-re/panda-ng/blob/main/plugins/syscalls2/generated-in/windows_8sp0_x86_prototypes.txt#_snippet_10\n\nLANGUAGE: C\nCODE:\n```\nNTSTATUS NtCreateFile (PHANDLE FileHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, PIO_STATUS_BLOCK IoStatusBlock, PLARGE_INTEGER AllocationSize, ULONG FileAttributes, ULONG ShareAccess, ULONG CreateDisposition, ULONG CreateOptions, PVOID EaBuffer, ULONG EaLength);\nNTSTATUS NtCreateNamedPipeFile (PHANDLE FileHandle, ULONG DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, PIO_STATUS_BLOCK IoStatusBlock, ULONG ShareAccess, ULONG CreateDisposition, ULONG CreateOptions, ULONG NamedPipeType, ULONG ReadMode, ULONG CompletionMode, ULONG MaximumInstances, ULONG InboundQuota, ULONG OutboundQuota, PLARGE_INTEGER DefaultTimeout);\nNTSTATUS NtCreateMailslotFile (PHANDLE FileHandle, ULONG DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, PIO_STATUS_BLOCK IoStatusBlock, ULONG CreateOptions, ULONG MailslotQuota, ULONG MaximumMessageSize, PLARGE_INTEGER ReadTimeout);\nNTSTATUS NtCreateDirectoryObject (PHANDLE DirectoryHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes);\nNTSTATUS NtCreatePagingFile (PUNICODE_STRING PageFileName, PLARGE_INTEGER MinimumSize, PLARGE_INTEGER MaximumSize, ULONG Priority);\n```\n\n----------------------------------------\n\nTITLE: Unregistering a Hypercall Handler\nDESCRIPTION: Function signature for unregistering a previously registered hypercall handler using its magic number.\nSOURCE: https://github.com/panda-re/panda-ng/blob/main/plugins/hypercaller/README.md#_snippet_2\n\nLANGUAGE: C\nCODE:\n```\nvoid unregister_hypercall(uint32_t magic);\n```\n\n----------------------------------------\n\nTITLE: Installing Base Dependencies for PANDA-RE\nDESCRIPTION: Core system packages required for the base functionality of PANDA-RE, including GLib and libcurl dependencies.\nSOURCE: https://github.com/panda-re/panda-ng/blob/main/debian/dependencies/ubuntu_22.04_base.txt#_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nlibglib2.0-0\nlibglib2.0-dev\nlibcurl3-gnutls\n```\n\n----------------------------------------\n\nTITLE: Windows NT System Function Declarations\nDESCRIPTION: Function declarations for low-level Windows NT system calls (NtXxx functions) that provide core OS functionality including process, thread, registry, and file system operations. These functions are part of the Native API and return NTSTATUS values.\nSOURCE: https://github.com/panda-re/panda-ng/blob/main/plugins/syscalls2/generated-in/windows_8sp1_x64_prototypes.txt#_snippet_3\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtGetDevicePowerState (HANDLE Device, DEVICE_POWER_STATE *State);\nNTSTATUS NtGetMUIRegistryInfo (ULONG Flags, PULONG DataSize, PVOID Data);\nNTSTATUS NtGetNextProcess (HANDLE ProcessHandle, ACCESS_MASK DesiredAccess, ULONG HandleAttributes, ULONG Flags, PHANDLE NewProcessHandle);\nNTSTATUS NtGetNextThread (HANDLE ProcessHandle, HANDLE ThreadHandle, ACCESS_MASK DesiredAccess, ULONG HandleAttributes, ULONG Flags, PHANDLE NewThreadHandle);\nNTSTATUS NtGetNlsSectionPtr (ULONG SectionType, ULONG SectionData, PVOID ContextData, PVOID *SectionPointer, PULONG SectionSize);\n// Additional function declarations omitted for brevity...\n```\n\n----------------------------------------\n\nTITLE: Declaring File Status and Configuration System Calls in C\nDESCRIPTION: This snippet declares system calls for retrieving file status (stat, fstat, lstat) and system configuration information (pathconf, fpathconf). It includes function signatures with their respective parameters and return types.\nSOURCE: https://github.com/panda-re/panda-ng/blob/main/plugins/syscalls2/generated-in/freebsd_x64_prototypes.txt#_snippet_14\n\nLANGUAGE: C\nCODE:\n```\nint stat(const char *path, struct freebsd11_stat *ub);\nint fstat(int fd, struct freebsd11_stat *sb);\nint lstat(const char *path, struct freebsd11_stat *ub);\nint pathconf(const char *path, int name);\nint fpathconf(int fd, int name);\n\nint getrlimit(unsigned which, struct rlimit *rlp);\nint setrlimit(unsigned which, struct rlimit *rlp);\nint getdirentries(int fd, char *buf, unsigned count, long *basep);\nvoid *mmap(void *addr, size_t len, int prot, int flags, int fd, int pad, off_t pos);\nint nosys(void);\n```\n\n----------------------------------------\n\nTITLE: Windows NT Registry Management Function Declarations (C)\nDESCRIPTION: Declarations for NT API functions for working with the Windows registry, including querying, saving, and modifying registry keys and values. These functions provide the underlying implementation for the higher-level registry APIs.\nSOURCE: https://github.com/panda-re/panda-ng/blob/main/plugins/syscalls2/generated-in/windows_vistasp0_x86_prototypes.txt#_snippet_11\n\nLANGUAGE: C\nCODE:\n```\nNTSTATUS NtQueryKey (HANDLE KeyHandle, KEY_INFORMATION_CLASS KeyInformationClass, PVOID KeyInformation, ULONG Length, PULONG ResultLength);\nNTSTATUS NtQueryMultipleValueKey (HANDLE KeyHandle, PKEY_VALUE_ENTRY ValueEntries, ULONG EntryCount, PVOID ValueBuffer, PULONG BufferLength, PULONG RequiredBufferLength);\nNTSTATUS NtQueryValueKey (HANDLE KeyHandle, PUNICODE_STRING ValueName, KEY_VALUE_INFORMATION_CLASS KeyValueInformationClass, PVOID KeyValueInformation, ULONG Length, PULONG ResultLength);\nNTSTATUS NtRenameKey (HANDLE KeyHandle, PUNICODE_STRING NewName);\nNTSTATUS NtReplaceKey (POBJECT_ATTRIBUTES NewFile, HANDLE TargetHandle, POBJECT_ATTRIBUTES OldFile);\nNTSTATUS NtRestoreKey (HANDLE KeyHandle, HANDLE FileHandle, ULONG Flags);\nNTSTATUS NtSaveKey (HANDLE KeyHandle, HANDLE FileHandle);\nNTSTATUS NtSaveKeyEx (HANDLE KeyHandle, HANDLE FileHandle, ULONG Format);\nNTSTATUS NtSaveMergedKeys (HANDLE HighPrecedenceKeyHandle, HANDLE LowPrecedenceKeyHandle, HANDLE FileHandle);\n```\n\n----------------------------------------\n\nTITLE: Declaring Linux Kernel System Call Prototypes in C\nDESCRIPTION: This code snippet lists prototypes for Linux kernel system call implementations in C. Each function begins with the sys_ prefix and represents a kernel-side entry point for a system call, with parameters named and typed according to their syscall semantics (e.g., file descriptors, buffer pointers, sizes, modes, and other attributes). These declarations are not complete function definitions; rather, they specify the argument and return types (typically long) required for correct linkage and system call table construction. Dependencies include Linux kernel headers for structures like stat, timeval, sigset_t, and user pointer handling (e.g., __user qualifier). Inputs are process/user-space arguments, and outputs are system call results or error codes, with typical constraints regarding buffer sizes and pointer validity.\nSOURCE: https://github.com/panda-re/panda-ng/blob/main/plugins/syscalls2/generated-in/linux_x64_prototypes.txt#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n0 long sys_read(unsigned int fd, char __user *buf, size_t count);\n1 long sys_write(unsigned int fd, const char __user *buf, size_t count);\n2 long sys_open(const char __user *filename, int flags, umode_t mode);\n3 long sys_close(unsigned int fd);\n4 long sys_newstat(const char __user *filename, struct stat __user *statbuf);\n5 long sys_newfstat(unsigned int fd, struct stat __user *statbuf);\n6 long sys_newlstat(const char __user *filename, struct stat __user *statbuf);\n7 long sys_poll(struct pollfd __user *ufds, unsigned int nfds, int timeout);\n8 long sys_lseek(unsigned int fd, off_t offset, unsigned int whence);\n9 long sys_mmap(unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long);\n10 long sys_mprotect(unsigned long start, size_t len, unsigned long prot);\n11 long sys_munmap(unsigned long addr, size_t len);\n12 long sys_brk(unsigned long brk);\n13 long sys_rt_sigaction(int, const struct sigaction __user *, struct sigaction __user *, size_t);\n14 long sys_rt_sigprocmask(int how, sigset_t __user *set, sigset_t __user *oset, size_t sigsetsize);\n15 long sys_rt_sigreturn(void);\n16 long sys_ioctl(unsigned int fd, unsigned int cmd, unsigned long arg);\n17 long sys_pread64(unsigned int fd, char __user *buf, size_t count, loff_t pos);\n18 long sys_pwrite64(unsigned int fd, const char __user *buf, size_t count, loff_t pos);\n19 long sys_readv(unsigned long fd, const struct iovec __user *vec, unsigned long vlen);\n20 long sys_writev(unsigned long fd, const struct iovec __user *vec, unsigned long vlen);\n21 long sys_access(const char __user *filename, int mode);\n22 long sys_pipe(int __user *fildes);\n23 long sys_select(int n, fd_set __user *inp, fd_set __user *outp, fd_set __user *exp, struct timeval __user *tvp);\n24 long sys_sched_yield(void);\n25 long sys_mremap(unsigned long addr, unsigned long old_len, unsigned long new_len, unsigned long flags, unsigned long new_addr);\n26 long sys_msync(unsigned long start, size_t len, int flags);\n27 long sys_mincore(unsigned long start, size_t len, unsigned char __user *vec);\n28 long sys_madvise(unsigned long start, size_t len, int behavior);\n29 long sys_shmget(key_t key, size_t size, int flag);\n30 long sys_shmat(int shmid, char __user *shmaddr, int shmflg);\n31 long sys_shmctl(int shmid, int cmd, struct shmid_ds __user *buf);\n32 long sys_dup(unsigned int fildes);\n33 long sys_dup2(unsigned int oldfd, unsigned int newfd);\n34 long sys_pause(void);\n35 long sys_nanosleep(struct timespec __user *rqtp, struct timespec __user *rmtp);\n36 long sys_getitimer(int which, struct itimerval __user *value);\n37 long sys_alarm(unsigned int seconds);\n38 long sys_setitimer(int which, struct itimerval __user *value, struct itimerval __user *ovalue);\n39 long sys_getpid(void);\n40 long sys_sendfile64(int out_fd, int in_fd, loff_t __user *offset, size_t count);\n41 long sys_socket(int, int, int);\n42 long sys_connect(int, struct sockaddr __user *, int);\n43 long sys_accept(int, struct sockaddr __user *, int __user *);\n44 long sys_sendto(int, void __user *, size_t, unsigned, struct sockaddr __user *, int);\n45 long sys_recvfrom(int, void __user *, size_t, unsigned, struct sockaddr __user *, int __user *);\n46 long sys_sendmsg(int fd, struct user_msghdr __user *msg, unsigned flags);\n47 long sys_recvmsg(int fd, struct user_msghdr __user *msg, unsigned flags);\n48 long sys_shutdown(int, int);\n49 long sys_bind(int, struct sockaddr __user *, int);\n50 long sys_listen(int, int);\n51 long sys_getsockname(int, struct sockaddr __user *, int __user *);\n52 long sys_getpeername(int, struct sockaddr __user *, int __user *);\n53 long sys_socketpair(int, int, int, int __user *);\n54 long sys_setsockopt(int fd, int level, int optname, char __user *optval, int optlen);\n55 long sys_getsockopt(int fd, int level, int optname, char __user *optval, int __user *optlen);\n56 long sys_clone(unsigned long, unsigned long, int __user *, int __user *, unsigned long);\n57 long sys_fork(void);\n58 long sys_vfork(void);\n59 long sys_execve(const char __user *filename, const char __user *const __user *argv, const char __user *const __user *envp);\n60 long sys_exit(int error_code);\n61 long sys_wait4(pid_t pid, int __user *stat_addr, int options, struct rusage __user *ru);\n62 long sys_kill(pid_t pid, int sig);\n63 long sys_newuname(struct new_utsname __user *name);\n64 long sys_semget(key_t key, int nsems, int semflg);\n65 long sys_semop(int semid, struct sembuf __user *sops, unsigned nsops);\n66 long sys_semctl(int semid, int semnum, int cmd, unsigned long arg);\n67 long sys_shmdt(char __user *shmaddr);\n68 long sys_msgget(key_t key, int msgflg);\n69 long sys_msgsnd(int msqid, struct msgbuf __user *msgp, size_t msgsz, int msgflg);\n70 long sys_msgrcv(int msqid, struct msgbuf __user *msgp, size_t msgsz, long msgtyp, int msgflg);\n71 long sys_msgctl(int msqid, int cmd, struct msqid_ds __user *buf);\n72 long sys_fcntl(unsigned int fd, unsigned int cmd, unsigned long arg);\n73 long sys_flock(unsigned int fd, unsigned int cmd);\n74 long sys_fsync(unsigned int fd);\n75 long sys_fdatasync(unsigned int fd);\n76 long sys_truncate(const char __user *path, long length);\n77 long sys_ftruncate(unsigned int fd, unsigned long length);\n78 long sys_getdents(unsigned int fd, struct linux_dirent __user *dirent, unsigned int count);\n79 long sys_getcwd(char __user *buf, unsigned long size);\n80 long sys_chdir(const char __user *filename);\n81 long sys_fchdir(unsigned int fd);\n82 long sys_rename(const char __user *oldname, const char __user *newname);\n83 long sys_mkdir(const char __user *pathname, umode_t mode);\n84 long sys_rmdir(const char __user *pathname);\n85 long sys_creat(const char __user *pathname, umode_t mode);\n86 long sys_link(const char __user *oldname, const char __user *newname);\n87 long sys_unlink(const char __user *pathname);\n88 long sys_symlink(const char __user *old, const char __user *new);\n89 long sys_readlink(const char __user *path, char __user *buf, int bufsiz);\n90 long sys_chmod(const char __user *filename, umode_t mode);\n91 long sys_fchmod(unsigned int fd, umode_t mode);\n92 long sys_chown(const char __user *filename, uid_t user, gid_t group);\n93 long sys_fchown(unsigned int fd, uid_t user, gid_t group);\n94 long sys_lchown(const char __user *filename, uid_t user, gid_t group);\n95 long sys_umask(int mask);\n96 long sys_gettimeofday(struct timeval __user *tv, struct timezone __user *tz);\n97 long sys_getrlimit(unsigned int resource, struct rlimit __user *rlim);\n98 long sys_getrusage(int who, struct rusage __user *ru);\n99 long sys_sysinfo(struct sysinfo __user *info);\n100 long sys_times(struct tms __user *tbuf);\n101 long sys_ptrace(long request, long pid, unsigned long addr, unsigned long data);\n102 long sys_getuid(void);\n103 long sys_syslog(int type, char __user *buf, int len);\n104 long sys_getgid(void);\n105 long sys_setuid(uid_t uid);\n106 long sys_setgid(gid_t gid);\n107 long sys_geteuid(void);\n108 long sys_getegid(void);\n109 long sys_setpgid(pid_t pid, pid_t pgid);\n110 long sys_getppid(void);\n111 long sys_getpgrp(void);\n112 long sys_setsid(void);\n113 long sys_setreuid(uid_t ruid, uid_t euid);\n114 long sys_setregid(gid_t rgid, gid_t egid);\n115 long sys_getgroups(int gidsetsize, gid_t __user *grouplist);\n116 long sys_setgroups(int gidsetsize, gid_t __user *grouplist);\n117 long sys_setresuid(uid_t ruid, uid_t euid, uid_t suid);\n118 long sys_getresuid(uid_t __user *ruid, uid_t __user *euid, uid_t __user *suid);\n119 long sys_setresgid(gid_t rgid, gid_t egid, gid_t sgid);\n120 long sys_getresgid(gid_t __user *rgid, gid_t __user *egid, gid_t __user *sgid);\n121 long sys_getpgid(pid_t pid);\n122 long sys_setfsuid(uid_t uid);\n123 long sys_setfsgid(gid_t gid);\n124 long sys_getsid(pid_t pid);\n125 long sys_capget(cap_user_header_t header, cap_user_data_t dataptr);\n126 long sys_capset(cap_user_header_t header, const cap_user_data_t data);\n127 long sys_rt_sigpending(sigset_t __user *set, size_t sigsetsize);\n128 long sys_rt_sigtimedwait(const sigset_t __user *uthese, siginfo_t __user *uinfo, const struct timespec __user *uts, size_t sigsetsize);\n129 long sys_rt_sigqueueinfo(pid_t pid, int sig, siginfo_t __user *uinfo);\n130 long sys_rt_sigsuspend(sigset_t __user *unewset, size_t sigsetsize);\n131 long sys_sigaltstack(const struct sigaltstack __user *uss, struct sigaltstack __user *uoss);\n132 long sys_utime(char __user *filename, struct utimbuf __user *times);\n133 long sys_mknod(const char __user *filename, umode_t mode, unsigned dev);\n135 long sys_personality(unsigned int personality);\n136 long sys_ustat(unsigned dev, struct ustat __user *ubuf);\n137 long sys_statfs(const char __user *path, struct statfs __user *buf);\n138 long sys_fstatfs(unsigned int fd, struct statfs __user *buf);\n139 long sys_sysfs(int option, unsigned long arg1, unsigned long arg2);\n140 long sys_getpriority(int which, int who);\n141 long sys_setpriority(int which, int who, int niceval);\n142 long sys_sched_setparam(pid_t pid, struct sched_param __user *param);\n143 long sys_sched_getparam(pid_t pid, struct sched_param __user *param);\n144 long sys_sched_setscheduler(pid_t pid, int policy, struct sched_param __user *param);\n145 long sys_sched_getscheduler(pid_t pid);\n146 long sys_sched_get_priority_max(int policy);\n147 long sys_sched_get_priority_min(int policy);\n148 long sys_sched_rr_get_interval(pid_t pid, struct timespec __user *interval);\n149 long sys_mlock(unsigned long start, size_t len);\n150 long sys_munlock(unsigned long start, size_t len);\n151 long sys_mlockall(int flags);\n152 long sys_munlockall(void);\n153 long sys_vhangup(void);\n154 long sys_modify_ldt(int, void __user *, unsigned long);\n155 long sys_pivot_root(const char __user *new_root, const char __user *put_old);\n156 long sys_sysctl(struct __sysctl_args __user *args);\n157 long sys_prctl(int option, unsigned long arg2, unsigned long arg3, unsigned long arg4, unsigned long arg5);\n158 long sys_arch_prctl(int, unsigned long);\n159 long sys_adjtimex(struct timex __user *txc_p);\n```\n\n----------------------------------------\n\nTITLE: Declaring Windows NT Native System Call Prototypes - C\nDESCRIPTION: This series of C code snippets defines function prototypes for Windows NT Native API system calls. Each function declaration specifies the expected argument types and return value (NTSTATUS), which is a typedef representing the success or failure state of the call. These prototypes are prerequisites for directly invoking undocumented or minimally documented Windows kernel functions and require corresponding Windows types like HANDLE, PVOID, and structures from Windows headers. Inputs and outputs vary per call (e.g., file handles, buffer addresses, structures), and correct pointer and structure usage is critical; misuse may lead to access violations or undefined behavior.\nSOURCE: https://github.com/panda-re/panda-ng/blob/main/plugins/syscalls2/generated-in/windows_8sp1_x64_prototypes.txt#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nNTSTATUS NtWorkerFactoryWorkerReady (HANDLE WorkerFactoryHandle);\n```\n\nLANGUAGE: C\nCODE:\n```\nNTSTATUS NtAcceptConnectPort (PHANDLE PortHandle, PVOID PortContext, PPORT_MESSAGE ConnectionRequest, BOOLEAN AcceptConnection, PPORT_VIEW ServerView, PREMOTE_PORT_VIEW ClientView);\n```\n\nLANGUAGE: C\nCODE:\n```\nNTSTATUS NtMapUserPhysicalPagesScatter (PVOID *VirtualAddresses, ULONG_PTR NumberOfPages, PULONG_PTR UserPfnArray);\n```\n\nLANGUAGE: C\nCODE:\n```\nNTSTATUS NtWaitForSingleObject (HANDLE Handle, BOOLEAN Alertable, PLARGE_INTEGER Timeout);\n```\n\nLANGUAGE: C\nCODE:\n```\nNTSTATUS NtCallbackReturn (PVOID OutputBuffer, ULONG OutputLength, NTSTATUS Status);\n```\n\nLANGUAGE: C\nCODE:\n```\nNTSTATUS NtReadFile (HANDLE FileHandle, HANDLE Event, PIO_APC_ROUTINE ApcRoutine, PVOID ApcContext, PIO_STATUS_BLOCK IoStatusBlock, PVOID Buffer, ULONG Length, PLARGE_INTEGER ByteOffset, PULONG Key);\n```\n\nLANGUAGE: C\nCODE:\n```\nNTSTATUS NtDeviceIoControlFile (HANDLE FileHandle, HANDLE Event, PIO_APC_ROUTINE ApcRoutine, PVOID ApcContext, PIO_STATUS_BLOCK IoStatusBlock, ULONG IoControlCode, PVOID InputBuffer, ULONG InputBufferLength, PVOID OutputBuffer, ULONG OutputBufferLength);\n```\n\nLANGUAGE: C\nCODE:\n```\nNTSTATUS NtWriteFile (HANDLE FileHandle, HANDLE Event, PIO_APC_ROUTINE ApcRoutine, PVOID ApcContext, PIO_STATUS_BLOCK IoStatusBlock, PVOID Buffer, ULONG Length, PLARGE_INTEGER ByteOffset, PULONG Key);\n```\n\nLANGUAGE: C\nCODE:\n```\nNTSTATUS NtRemoveIoCompletion (HANDLE IoCompletionHandle, PVOID *KeyContext, PVOID *ApcContext, PIO_STATUS_BLOCK IoStatusBlock, PLARGE_INTEGER Timeout);\n```\n\nLANGUAGE: C\nCODE:\n```\nNTSTATUS NtReleaseSemaphore (HANDLE SemaphoreHandle, LONG ReleaseCount, PLONG PreviousCount);\n```\n\nLANGUAGE: C\nCODE:\n```\nNTSTATUS NtReplyWaitReceivePort (HANDLE PortHandle, PVOID *PortContext , PPORT_MESSAGE ReplyMessage, PPORT_MESSAGE ReceiveMessage);\n```\n\nLANGUAGE: C\nCODE:\n```\nNTSTATUS NtReplyPort (HANDLE PortHandle, PPORT_MESSAGE ReplyMessage);\n```\n\nLANGUAGE: C\nCODE:\n```\nNTSTATUS NtSetInformationThread (HANDLE ThreadHandle, THREADINFOCLASS ThreadInformationClass, PVOID ThreadInformation, ULONG ThreadInformationLength);\n```\n\nLANGUAGE: C\nCODE:\n```\nNTSTATUS NtSetEvent (HANDLE EventHandle, PLONG PreviousState);\n```\n\nLANGUAGE: C\nCODE:\n```\nNTSTATUS NtClose (HANDLE Handle);\n```\n\nLANGUAGE: C\nCODE:\n```\nNTSTATUS NtQueryObject (HANDLE Handle, OBJECT_INFORMATION_CLASS ObjectInformationClass, PVOID ObjectInformation, ULONG ObjectInformationLength, PULONG ReturnLength);\n```\n\nLANGUAGE: C\nCODE:\n```\nNTSTATUS NtQueryInformationFile (HANDLE FileHandle, PIO_STATUS_BLOCK IoStatusBlock, PVOID FileInformation, ULONG Length, FILE_INFORMATION_CLASS FileInformationClass);\n```\n\nLANGUAGE: C\nCODE:\n```\nNTSTATUS NtOpenKey (PHANDLE KeyHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes);\n```\n\nLANGUAGE: C\nCODE:\n```\nNTSTATUS NtEnumerateValueKey (HANDLE KeyHandle, ULONG Index, KEY_VALUE_INFORMATION_CLASS KeyValueInformationClass, PVOID KeyValueInformation, ULONG Length, PULONG ResultLength);\n```\n\nLANGUAGE: C\nCODE:\n```\nNTSTATUS NtFindAtom (PWSTR AtomName, ULONG Length, PRTL_ATOM Atom);\n```\n\nLANGUAGE: C\nCODE:\n```\nNTSTATUS NtQueryDefaultLocale (BOOLEAN UserProfile, PLCID DefaultLocaleId);\n```\n\nLANGUAGE: C\nCODE:\n```\nNTSTATUS NtQueryKey (HANDLE KeyHandle, KEY_INFORMATION_CLASS KeyInformationClass, PVOID KeyInformation, ULONG Length, PULONG ResultLength);\n```\n\nLANGUAGE: C\nCODE:\n```\nNTSTATUS NtQueryValueKey (HANDLE KeyHandle, PUNICODE_STRING ValueName, KEY_VALUE_INFORMATION_CLASS KeyValueInformationClass, PVOID KeyValueInformation, ULONG Length, PULONG ResultLength);\n```\n\nLANGUAGE: C\nCODE:\n```\nNTSTATUS NtAllocateVirtualMemory (HANDLE ProcessHandle, PVOID *BaseAddress, ULONG_PTR ZeroBits, PSIZE_T RegionSize, ULONG AllocationType, ULONG Protect);\n```\n\nLANGUAGE: C\nCODE:\n```\nNTSTATUS NtQueryInformationProcess (HANDLE ProcessHandle, PROCESSINFOCLASS ProcessInformationClass, PVOID ProcessInformation, ULONG ProcessInformationLength, PULONG ReturnLength);\n```\n\nLANGUAGE: C\nCODE:\n```\nNTSTATUS NtWaitForMultipleObjects32 (ULONG Count, LONG Handles[], WAIT_TYPE WaitType, BOOLEAN Alertable, PLARGE_INTEGER Timeout);\n```\n\nLANGUAGE: C\nCODE:\n```\nNTSTATUS NtWriteFileGather (HANDLE FileHandle, HANDLE Event, PIO_APC_ROUTINE ApcRoutine, PVOID ApcContext, PIO_STATUS_BLOCK IoStatusBlock, PFILE_SEGMENT_ELEMENT SegmentArray, ULONG Length, PLARGE_INTEGER ByteOffset, PULONG Key);\n```\n\nLANGUAGE: C\nCODE:\n```\nNTSTATUS NtSetInformationProcess (HANDLE ProcessHandle, PROCESSINFOCLASS ProcessInformationClass, PVOID ProcessInformation, ULONG ProcessInformationLength);\n```\n\nLANGUAGE: C\nCODE:\n```\nNTSTATUS NtCreateKey (PHANDLE KeyHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, ULONG TitleIndex, PUNICODE_STRING Class, ULONG CreateOptions, PULONG Disposition);\n```\n\nLANGUAGE: C\nCODE:\n```\nNTSTATUS NtFreeVirtualMemory (HANDLE ProcessHandle, PVOID *BaseAddress, PSIZE_T RegionSize, ULONG FreeType);\n```\n\nLANGUAGE: C\nCODE:\n```\nNTSTATUS NtImpersonateClientOfPort (HANDLE PortHandle, PPORT_MESSAGE Message);\n```\n\nLANGUAGE: C\nCODE:\n```\nNTSTATUS NtReleaseMutant (HANDLE MutantHandle, PLONG PreviousCount);\n```\n\nLANGUAGE: C\nCODE:\n```\nNTSTATUS NtQueryInformationToken (HANDLE TokenHandle, TOKEN_INFORMATION_CLASS TokenInformationClass, PVOID TokenInformation, ULONG TokenInformationLength, PULONG ReturnLength);\n```\n\nLANGUAGE: C\nCODE:\n```\nNTSTATUS NtRequestWaitReplyPort (HANDLE PortHandle, PPORT_MESSAGE RequestMessage, PPORT_MESSAGE ReplyMessage);\n```\n\nLANGUAGE: C\nCODE:\n```\nNTSTATUS NtQueryVirtualMemory (HANDLE ProcessHandle, PVOID BaseAddress, MEMORY_INFORMATION_CLASS MemoryInformationClass, PVOID MemoryInformation, SIZE_T MemoryInformationLength, PSIZE_T ReturnLength);\n```\n\nLANGUAGE: C\nCODE:\n```\nNTSTATUS NtOpenThreadToken (HANDLE ThreadHandle, ACCESS_MASK DesiredAccess, BOOLEAN OpenAsSelf, PHANDLE TokenHandle);\n```\n\nLANGUAGE: C\nCODE:\n```\nNTSTATUS NtQueryInformationThread (HANDLE ThreadHandle, THREADINFOCLASS ThreadInformationClass, PVOID ThreadInformation, ULONG ThreadInformationLength, PULONG ReturnLength);\n```\n\nLANGUAGE: C\nCODE:\n```\nNTSTATUS NtOpenProcess (PHANDLE ProcessHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, PCLIENT_ID ClientId);\n```\n\nLANGUAGE: C\nCODE:\n```\nNTSTATUS NtSetInformationFile (HANDLE FileHandle, PIO_STATUS_BLOCK IoStatusBlock, PVOID FileInformation, ULONG Length, FILE_INFORMATION_CLASS FileInformationClass);\n```\n\nLANGUAGE: C\nCODE:\n```\nNTSTATUS NtMapViewOfSection (HANDLE SectionHandle, HANDLE ProcessHandle, PVOID *BaseAddress, ULONG_PTR ZeroBits, SIZE_T CommitSize, PLARGE_INTEGER SectionOffset, PSIZE_T ViewSize, SECTION_INHERIT InheritDisposition, ULONG AllocationType, WIN32_PROTECTION_MASK Win32Protect);\n```\n\nLANGUAGE: C\nCODE:\n```\nNTSTATUS NtAccessCheckAndAuditAlarm (PUNICODE_STRING SubsystemName, PVOID HandleId, PUNICODE_STRING ObjectTypeName, PUNICODE_STRING ObjectName, PSECURITY_DESCRIPTOR SecurityDescriptor, ACCESS_MASK DesiredAccess, PGENERIC_MAPPING GenericMapping, BOOLEAN ObjectCreation, PACCESS_MASK GrantedAccess, PNTSTATUS AccessStatus, PBOOLEAN GenerateOnClose);\n```\n\nLANGUAGE: C\nCODE:\n```\nNTSTATUS NtUnmapViewOfSection (HANDLE ProcessHandle, PVOID BaseAddress);\n```\n\nLANGUAGE: C\nCODE:\n```\nNTSTATUS NtReplyWaitReceivePortEx (HANDLE PortHandle, PVOID *PortContext, PPORT_MESSAGE ReplyMessage, PPORT_MESSAGE ReceiveMessage, PLARGE_INTEGER Timeout);\n```\n\nLANGUAGE: C\nCODE:\n```\nNTSTATUS NtTerminateProcess (HANDLE ProcessHandle, NTSTATUS ExitStatus);\n```\n\nLANGUAGE: C\nCODE:\n```\nNTSTATUS NtSetEventBoostPriority (HANDLE EventHandle);\n```\n\nLANGUAGE: C\nCODE:\n```\nNTSTATUS NtReadFileScatter (HANDLE FileHandle, HANDLE Event, PIO_APC_ROUTINE ApcRoutine, PVOID ApcContext, PIO_STATUS_BLOCK IoStatusBlock, PFILE_SEGMENT_ELEMENT SegmentArray, ULONG Length, PLARGE_INTEGER ByteOffset, PULONG Key);\n```\n\nLANGUAGE: C\nCODE:\n```\nNTSTATUS NtOpenThreadTokenEx (HANDLE ThreadHandle, ACCESS_MASK DesiredAccess, BOOLEAN OpenAsSelf, ULONG HandleAttributes, PHANDLE TokenHandle);\n```\n\nLANGUAGE: C\nCODE:\n```\nNTSTATUS NtOpenProcessTokenEx (HANDLE ProcessHandle, ACCESS_MASK DesiredAccess, ULONG HandleAttributes, PHANDLE TokenHandle);\n```\n\nLANGUAGE: C\nCODE:\n```\nNTSTATUS NtQueryPerformanceCounter (PLARGE_INTEGER PerformanceCounter, PLARGE_INTEGER PerformanceFrequency);\n```\n\nLANGUAGE: C\nCODE:\n```\nNTSTATUS NtEnumerateKey (HANDLE KeyHandle, ULONG Index, KEY_INFORMATION_CLASS KeyInformationClass, PVOID KeyInformation, ULONG Length, PULONG ResultLength);\n```\n\nLANGUAGE: C\nCODE:\n```\nNTSTATUS NtOpenFile (PHANDLE FileHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, PIO_STATUS_BLOCK IoStatusBlock, ULONG ShareAccess, ULONG OpenOptions);\n```\n\nLANGUAGE: C\nCODE:\n```\nNTSTATUS NtDelayExecution (BOOLEAN Alertable, PLARGE_INTEGER DelayInterval);\n```\n\nLANGUAGE: C\nCODE:\n```\nNTSTATUS NtQueryDirectoryFile (HANDLE FileHandle, HANDLE Event, PIO_APC_ROUTINE ApcRoutine, PVOID ApcContext, PIO_STATUS_BLOCK IoStatusBlock, PVOID FileInformation, ULONG Length, FILE_INFORMATION_CLASS FileInformationClass, BOOLEAN ReturnSingleEntry, PUNICODE_STRING FileName, BOOLEAN RestartScan);\n```\n\nLANGUAGE: C\nCODE:\n```\nNTSTATUS NtQuerySystemInformation (SYSTEM_INFORMATION_CLASS SystemInformationClass, PVOID SystemInformation, ULONG SystemInformationLength, PULONG ReturnLength);\n```\n\nLANGUAGE: C\nCODE:\n```\nNTSTATUS NtOpenSection (PHANDLE SectionHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes);\n```\n\nLANGUAGE: C\nCODE:\n```\nNTSTATUS NtQueryTimer (HANDLE TimerHandle, TIMER_INFORMATION_CLASS TimerInformationClass, PVOID TimerInformation, ULONG TimerInformationLength, PULONG ReturnLength);\n```\n\nLANGUAGE: C\nCODE:\n```\nNTSTATUS NtFsControlFile (HANDLE FileHandle, HANDLE Event, PIO_APC_ROUTINE ApcRoutine, PVOID ApcContext, PIO_STATUS_BLOCK IoStatusBlock, ULONG IoControlCode, PVOID InputBuffer, ULONG InputBufferLength, PVOID OutputBuffer, ULONG OutputBufferLength);\n```\n\nLANGUAGE: C\nCODE:\n```\nNTSTATUS NtWriteVirtualMemory (HANDLE ProcessHandle, PVOID BaseAddress, PVOID Buffer, SIZE_T BufferSize, PSIZE_T NumberOfBytesWritten);\n```\n\nLANGUAGE: C\nCODE:\n```\nNTSTATUS NtCloseObjectAuditAlarm (PUNICODE_STRING SubsystemName, PVOID HandleId, BOOLEAN GenerateOnClose);\n```\n\nLANGUAGE: C\nCODE:\n```\nNTSTATUS NtDuplicateObject (HANDLE SourceProcessHandle, HANDLE SourceHandle, HANDLE TargetProcessHandle, PHANDLE TargetHandle, ACCESS_MASK DesiredAccess, ULONG HandleAttributes, ULONG Options);\n```\n\nLANGUAGE: C\nCODE:\n```\nNTSTATUS NtQueryAttributesFile (POBJECT_ATTRIBUTES ObjectAttributes, PFILE_BASIC_INFORMATION FileInformation);\n```\n\nLANGUAGE: C\nCODE:\n```\nNTSTATUS NtClearEvent (HANDLE EventHandle);\n```\n\nLANGUAGE: C\nCODE:\n```\nNTSTATUS NtReadVirtualMemory (HANDLE ProcessHandle, PVOID BaseAddress, PVOID Buffer, SIZE_T BufferSize, PSIZE_T NumberOfBytesRead);\n```\n\nLANGUAGE: C\nCODE:\n```\nNTSTATUS NtOpenEvent (PHANDLE EventHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes);\n```\n\nLANGUAGE: C\nCODE:\n```\nNTSTATUS NtAdjustPrivilegesToken (HANDLE TokenHandle, BOOLEAN DisableAllPrivileges, PTOKEN_PRIVILEGES NewState, ULONG BufferLength, PTOKEN_PRIVILEGES PreviousState, PULONG ReturnLength);\n```\n\nLANGUAGE: C\nCODE:\n```\nNTSTATUS NtDuplicateToken (HANDLE ExistingTokenHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, BOOLEAN EffectiveOnly, TOKEN_TYPE TokenType, PHANDLE NewTokenHandle);\n```\n\nLANGUAGE: C\nCODE:\n```\nNTSTATUS NtContinue (PCONTEXT ContextRecord, BOOLEAN TestAlert);\n```\n\nLANGUAGE: C\nCODE:\n```\nNTSTATUS NtQueryDefaultUILanguage (LANGID *DefaultUILanguageId);\n```\n\n----------------------------------------\n\nTITLE: Defining Message Queue System Calls in Linux Kernel\nDESCRIPTION: Function declarations for Linux system calls related to POSIX message queues. These functions provide interfaces for creating, managing, and communicating through message queues.\nSOURCE: https://github.com/panda-re/panda-ng/blob/main/plugins/syscalls2/generated-in/linux_mips64n32_prototypes.txt#_snippet_10\n\nLANGUAGE: C\nCODE:\n```\nlong sys_mq_open(const char __user *name, int oflag, umode_t mode, struct mq_attr __user *attr);\nlong sys_mq_unlink(const char __user *name);\nlong sys_mq_timedsend_time32(mqd_t mqdes, const char __user *u_msg_ptr, unsigned int msg_len, unsigned int msg_prio, const struct old_timespec32 __user *u_abs_timeout);\nlong sys_mq_timedreceive_time32(mqd_t mqdes, char __user *u_msg_ptr, unsigned int msg_len, unsigned int __user *u_msg_prio, const struct old_timespec32 __user *u_abs_timeout);\nlong sys_mq_notify(mqd_t mqdes, const struct sigevent __user *notification);\nlong sys_mq_getsetattr(mqd_t mqdes, const struct mq_attr __user *mqstat, struct mq_attr __user *omqstat);\n```\n\n----------------------------------------\n\nTITLE: Declaring NT System Call Prototypes - C\nDESCRIPTION: Declares a series of NT system service functions as external prototypes for use in low-level kernel or native subsystem development on Windows. Dependencies include the appropriate NT headers for types like NTSTATUS, HANDLE, PVOID, and related structures. Each declaration specifies the function name, return type, and parameter list, providing interface definitions for operations including debugging, process termination, registry operations, memory unlocking, and event handling. Inputs are function parameters corresponding to system resource handles and operation details; outputs are primarily NTSTATUS codes indicating success or failure. No implementation details exist in these declarations, and the prototypes are constrained to environments with NT development libraries.\nSOURCE: https://github.com/panda-re/panda-ng/blob/main/plugins/syscalls2/generated-in/windows_vistasp12_x64_prototypes.txt#_snippet_8\n\nLANGUAGE: C\nCODE:\n```\nNTSTATUS NtSystemDebugControl (SYSDBG_COMMAND Command, PVOID InputBuffer, ULONG InputBufferLength, PVOID OutputBuffer, ULONG OutputBufferLength, PULONG ReturnLength);\nNTSTATUS NtTerminateJobObject (HANDLE JobHandle, NTSTATUS ExitStatus);\nNTSTATUS NtTestAlert ();\nNTSTATUS NtThawRegistry ();\nNTSTATUS NtThawTransactions ();\nNTSTATUS NtTraceControl (ULONG FunctionCode, PVOID InBuffer, ULONG InBufferLen, PVOID OutBuffer, ULONG OutBufferLen, PULONG ReturnLength);\nNTSTATUS NtTranslateFilePath (PFILE_PATH InputFilePath, ULONG OutputType, PFILE_PATH OutputFilePath, PULONG OutputFilePathLength);\nNTSTATUS NtUnloadDriver (PUNICODE_STRING DriverServiceName);\nNTSTATUS NtUnloadKey (POBJECT_ATTRIBUTES TargetKey);\nNTSTATUS NtUnloadKey2 (POBJECT_ATTRIBUTES TargetKey, ULONG Flags);\nNTSTATUS NtUnloadKeyEx (POBJECT_ATTRIBUTES TargetKey, HANDLE Event);\nNTSTATUS NtUnlockFile (HANDLE FileHandle, PIO_STATUS_BLOCK IoStatusBlock, PLARGE_INTEGER ByteOffset, PLARGE_INTEGER Length, ULONG Key);\nNTSTATUS NtUnlockVirtualMemory (HANDLE ProcessHandle, PVOID *BaseAddress, PSIZE_T RegionSize, ULONG MapType);\nNTSTATUS NtVdmControl (VDMSERVICECLASS Service, PVOID ServiceData);\nNTSTATUS NtWaitForDebugEvent (HANDLE DebugObjectHandle, BOOLEAN Alertable, PLARGE_INTEGER Timeout, PDBGUI_WAIT_STATE_CHANGE WaitStateChange);\nNTSTATUS NtWaitForKeyedEvent (HANDLE KeyedEventHandle, PVOID KeyValue, BOOLEAN Alertable, PLARGE_INTEGER Timeout);\nNTSTATUS NtWaitForWorkViaWorkerFactory (HANDLE WorkerFactoryHandle, PFILE_IO_COMPLETION_INFORMATION MiniPacket);\nNTSTATUS NtWaitHighEventPair (HANDLE EventPairHandle);\nNTSTATUS NtWaitLowEventPair (HANDLE EventPairHandle);\nNTSTATUS NtWorkerFactoryWorkerReady (HANDLE WorkerFactoryHandle);\n```\n\n----------------------------------------\n\nTITLE: Running PANDA with osi_linux Plugin and Custom Kernel Config (bash)\nDESCRIPTION: Provides an example bash command for running PANDA with the osi_linux plugin, specifying an explicit kernelinfo.conf and configuration group. It requires $PANDA_PATH to be set and a valid replay file. Inputs are the replay target and configuration location. The output is PANDA running with OSI and OSI-Linux loaded, with osi_test providing verification or introspection data.\nSOURCE: https://github.com/panda-re/panda-ng/blob/main/plugins/osi_linux/README.md#_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\n$PANDA_PATH/x86_64-softmmu/panda-system-x86_64 -replay foo \\\n    -panda osi -panda osi_linux:kconf_file=kernelinfo.conf,kconf_group=my_kernel_info \\\n    -panda osi_test\n```\n\n----------------------------------------\n\nTITLE: Installing and Registering a Syscall Hook Callback - PANDA hypersyscalls - C\nDESCRIPTION: Demonstrates implementing a syscall callback in C and registering it to hook specific syscalls via the PANDA hypersyscalls plugin. The example callback prints basic information when a syscall is invoked, and a syscall_hook struct is defined to hook the 'sys_read' syscall at both entry and return. The callback is registered with the plugin API. Required dependencies are the PANDA plugin header files and plugin loader; the user-defined callback receives syscall and CPU state details as arguments.\nSOURCE: https://github.com/panda-re/panda-ng/blob/main/plugins/hypersyscalls/README.md#_snippet_1\n\nLANGUAGE: C\nCODE:\n```\nvoid my_syscall_callback(CPUState *cpu, struct syscall_prototype *syscall_info, \\n                         struct syscall *syscall, struct syscall_hook *hook) {\\n    printf(\"Syscall %s called with args: %lx, %lx\\n\", \\n           syscall_info->name, syscall->args[0], syscall->args[1]);\\n}\\n\\n// Hook all read syscalls\\nstruct syscall_hook read_hook = {\\n    .name = \"sys_read\",\\n    .on_enter = true,\\n    .on_return = true,\\n    .on_all = false,\\n    .enabled = true,\\n    .opaque = NULL,\\n    .cb = my_syscall_callback\\n};\\n\\nregister_syscall_cb(&read_hook);\n```\n\n----------------------------------------\n\nTITLE: Declaring Linux System Call Prototypes in C\nDESCRIPTION: This code snippet contains the function prototypes for numerous Linux system calls, enabling the implementation or reference of syscall handlers within the kernel or low-level user-space libraries. The functionality spans file operations, extended attributes, asynchronous I/O, event polling, process and thread management, inter-process communication, and timers. Dependencies include standard Linux kernel headers providing types such as aio_context_t, struct iocb, struct epoll_event, and others. Each function uses well-defined arguments expected by their corresponding syscalls: pointers marked with __user indicate user-space memory, specific structures are required by type, and most functions return a long integer result or error code. The snippet is intended for inclusion in kernel modules or system-level code and assumes familiarity with Linux kernel types and conventions.\nSOURCE: https://github.com/panda-re/panda-ng/blob/main/plugins/syscalls2/generated-in/linux_arm64_prototypes.txt#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n0 long sys_io_setup(unsigned nr_reqs, aio_context_t __user *ctx);\n1 long sys_io_destroy(aio_context_t ctx);\n2 long sys_io_submit(aio_context_t, long, struct iocb __user * __user *);\n3 long sys_io_cancel(aio_context_t ctx_id, struct iocb __user *iocb, struct io_event __user *result);\n4 long sys_io_getevents(aio_context_t ctx_id, long min_nr, long nr, struct io_event __user *events, struct timespec __user *timeout);\n5 long sys_setxattr(const char __user *path, const char __user *name, const void __user *value, size_t size, int flags);\n6 long sys_lsetxattr(const char __user *path, const char __user *name, const void __user *value, size_t size, int flags);\n7 long sys_fsetxattr(int fd, const char __user *name, const void __user *value, size_t size, int flags);\n8 long sys_getxattr(const char __user *path, const char __user *name, void __user *value, size_t size);\n9 long sys_lgetxattr(const char __user *path, const char __user *name, void __user *value, size_t size);\n10 long sys_fgetxattr(int fd, const char __user *name, void __user *value, size_t size);\n11 long sys_listxattr(const char __user *path, char __user *list, size_t size);\n12 long sys_llistxattr(const char __user *path, char __user *list, size_t size);\n13 long sys_flistxattr(int fd, char __user *list, size_t size);\n14 long sys_removexattr(const char __user *path, const char __user *name);\n15 long sys_lremovexattr(const char __user *path, const char __user *name);\n16 long sys_fremovexattr(int fd, const char __user *name);\n17 long sys_getcwd(char __user *buf, unsigned long size);\n18 long sys_lookup_dcookie(u64 cookie64, char __user *buf, size_t len);\n19 long sys_eventfd2(unsigned int count, int flags);\n20 long sys_epoll_create1(int flags);\n21 long sys_epoll_ctl(int epfd, int op, int fd, struct epoll_event __user *event);\n22 long sys_epoll_pwait(int epfd, struct epoll_event __user *events, int maxevents, int timeout, const sigset_t __user *sigmask, size_t sigsetsize);\n23 long sys_dup(unsigned int fildes);\n24 long sys_dup3(unsigned int oldfd, unsigned int newfd, int flags);\n25 long sys_fcntl(unsigned int fd, unsigned int cmd, unsigned long arg);\n26 long sys_inotify_init1(int flags);\n27 long sys_inotify_add_watch(int fd, const char __user *path, u32 mask);\n28 long sys_inotify_rm_watch(int fd, __s32 wd);\n29 long sys_ioctl(unsigned int fd, unsigned int cmd, unsigned long arg);\n30 long sys_ioprio_set(int which, int who, int ioprio);\n31 long sys_ioprio_get(int which, int who);\n32 long sys_flock(unsigned int fd, unsigned int cmd);\n33 long sys_mknodat(int dfd, const char __user *filename, umode_t mode, unsigned dev);\n34 long sys_mkdirat(int dfd, const char __user *pathname, umode_t mode);\n35 long sys_unlinkat(int dfd, const char __user *pathname, int flag);\n36 long sys_symlinkat(const char __user *oldname, int newdfd, const char __user *newname);\n37 long sys_linkat(int olddfd, const char __user *oldname, int newdfd, const char __user *newname, int flags);\n38 long sys_renameat(int olddfd, const char __user *oldname, int newdfd, const char __user *newname);\n39 long sys_umount2(const char* target, int flags);\n40 long sys_mount(char __user *dev_name, char __user *dir_name, char __user *type, unsigned long flags, void __user *data);\n41 long sys_pivot_root(const char __user *new_root, const char __user *put_old);\n42 long sys_nfsservctl(int cmd, struct nfsctl_arg *argp, union nfsctl_res *resp);\n43 long sys_statfs(const char * path, struct statfs *buf);\n44 long sys_fstatfs(unsigned int fd, struct statfs *buf);\n45 long sys_truncate(const char *path, long length);\n46 long sys_ftruncate(unsigned int fd, unsigned long length);\n47 long sys_fallocate(int fd, int mode, loff_t offset, loff_t len);\n48 long sys_faccessat(int dfd, const char __user *filename, int mode);\n49 long sys_chdir(const char __user *filename);\n50 long sys_fchdir(unsigned int fd);\n51 long sys_chroot(const char __user *filename);\n52 long sys_fchmod(unsigned int fd, umode_t mode);\n53 long sys_fchmodat(int dfd, const char __user *filename, umode_t mode);\n54 long sys_fchownat(int dfd, const char __user *filename, uid_t user, gid_t group, int flag);\n55 long sys_fchown(unsigned int fd, uid_t user, gid_t group);\n56 long sys_openat(int dfd, const char __user *filename, int flags, umode_t mode);\n57 long sys_close(unsigned int fd);\n58 long sys_vhangup(void);\n59 long sys_pipe2(int *fildes, int flags);\n60 long sys_quotactl(unsigned int cmd, const char __user *special, qid_t id, void __user *addr);\n61 long sys_getdents64(unsigned int fd, struct linux_dirent64 *dirent, unsigned int count);\n62 long sys_lseek(unsigned int fd, off_t offset, unsigned int whence);\n63 long sys_read(unsigned int fd, char __user *buf, size_t count);\n64 long sys_write(unsigned int fd, const char __user *buf, size_t count);\n65 long sys_readv(unsigned long fd, const struct iovec __user *vec, unsigned long vlen);\n66 long sys_writev(unsigned long fd, const struct iovec __user *vec, unsigned long vlen);\n67 long sys_pread64(unsigned int fd, char *buf, size_t count, loff_t pos);\n68 long sys_pwrite64(unsigned int fd, const char *buf, size_t count, loff_t pos);\n69 long sys_preadv(unsigned long fd, const struct iovec __user *vec, unsigned long vlen, unsigned long pos_l, unsigned long pos_h);\n70 long sys_pwritev(unsigned long fd, const struct iovec __user *vec, unsigned long vlen, unsigned long pos_l, unsigned long pos_h);\n71 long sys_sendfile(int out_fd, int in_fd, off_t *offset, size_t count);\n72 long sys_pselect6(int, fd_set *, fd_set *, fd_set *, struct __kernel_timespec *, void *);\n73 long sys_ppoll(struct pollfd __user *, unsigned int, struct timespec __user *, const sigset_t __user *, size_t);\n74 long sys_signalfd4(int ufd, sigset_t *user_mask, size_t sizemask, int flags);\n75 long sys_vmsplice(int fd, const struct iovec __user *iov, unsigned long nr_segs, unsigned int flags);\n76 long sys_splice(int fd_in, loff_t __user *off_in, int fd_out, loff_t __user *off_out, size_t len, unsigned int flags);\n77 long sys_tee(int fdin, int fdout, size_t len, unsigned int flags);\n78 long sys_readlinkat(int dfd, const char __user *path, char __user *buf, int bufsiz);\n79 long sys_newfstatat(int dfd, const char *filename, struct stat *statbuf, int flag);\n80 long sys_fstat(unsigned int fd, struct __old_kernel_stat *statbuf);\n81 long sys_sync(void);\n82 long sys_fsync(unsigned int fd);\n83 long sys_fdatasync(unsigned int fd);\n84 long sys_sync_file_range(int fd, loff_t offset, loff_t nbytes, unsigned int flags);\n85 long sys_timerfd_create(int clockid, int flags);\n86 long sys_timerfd_settime(int ufd, int flags, const struct itimerspec __user *utmr, struct itimerspec __user *otmr);\n87 long sys_timerfd_gettime(int ufd, struct itimerspec __user *otmr);\n88 long sys_utimensat(int dfd, const char __user *filename, struct timespec __user *utimes, int flags);\n89 long sys_acct(const char __user *name);\n90 long sys_capget(cap_user_header_t header, cap_user_data_t dataptr);\n91 long sys_capset(cap_user_header_t header, const cap_user_data_t data);\n92 long sys_personality(unsigned int personality);\n93 long sys_exit(int error_code);\n94 long sys_exit_group(int error_code);\n95 long sys_waitid(int which, pid_t pid, struct siginfo __user *infop, int options, struct rusage __user *ru);\n96 long sys_set_tid_address(int __user *tidptr);\n97 long sys_unshare(unsigned long unshare_flags);\n98 long sys_futex(u32 __user *uaddr, int op, u32 val, struct timespec __user *utime, u32 __user *uaddr2, u32 val3);\n99 long sys_set_robust_list(struct robust_list_head __user *head, size_t len);\n100 long sys_get_robust_list(int pid, struct robust_list_head __user * __user *head_ptr, size_t __user *len_ptr);\n101 long sys_nanosleep(struct timespec __user *rqtp, struct timespec __user *rmtp);\n102 long sys_getitimer(int which, struct itimerval __user *value);\n103 long sys_setitimer(int which, struct itimerval __user *value, struct itimerval __user *ovalue);\n104 long sys_kexec_load(unsigned long entry, unsigned long nr_segments, struct kexec_segment __user *segments, unsigned long flags);\n105 long sys_init_module(void __user *umod, unsigned long len, const char __user *uargs);\n106 long sys_delete_module(const char __user *name_user, unsigned int flags);\n107 long sys_timer_create(clockid_t which_clock, struct sigevent __user *timer_event_spec, timer_t __user *created_timer_id);\n108 long sys_timer_gettime(timer_t timer_id, struct itimerspec __user *setting);\n109 long sys_timer_getoverrun(timer_t timer_id);\n110 long sys_timer_settime(timer_t timer_id, int flags, const struct itimerspec __user *new_setting, struct itimerspec __user *old_setting);\n111 long sys_timer_delete(timer_t timer_id);\n112 long sys_clock_settime(clockid_t which_clock, const struct timespec __user *tp);\n113 long sys_clock_gettime(clockid_t which_clock, struct timespec __user *tp);\n114 long sys_clock_getres(clockid_t which_clock, struct timespec __user *tp);\n115 long sys_clock_nanosleep(clockid_t which_clock, int flags, const struct timespec __user *rqtp, struct timespec __user *rmtp);\n116 long sys_syslog(int type, char __user *buf, int len);\n117 long sys_ptrace(long request, long pid, unsigned long addr, unsigned long data);\n118 long sys_sched_setparam(pid_t pid, struct sched_param __user *param);\n119 long sys_sched_setscheduler(pid_t pid, int policy, struct sched_param __user *param);\n120 long sys_sched_getscheduler(pid_t pid);\n121 long sys_sched_getparam(pid_t pid, struct sched_param __user *param);\n122 long sys_sched_setaffinity(pid_t pid, unsigned int len, unsigned long __user *user_mask_ptr);\n123 long sys_sched_getaffinity(pid_t pid, unsigned int len, unsigned long __user *user_mask_ptr);\n124 long sys_sched_yield(void);\n125 long sys_sched_get_priority_max(int policy);\n126 long sys_sched_get_priority_min(int policy);\n127 long sys_sched_rr_get_interval(pid_t pid, struct timespec __user *interval);\n128 long sys_restart_syscall(void);\n129 long sys_kill(pid_t pid, int sig);\n130 long sys_tkill(pid_t pid, int sig);\n```\n\n----------------------------------------\n\nTITLE: Windows NT Profiling and Miscellaneous API Functions in C\nDESCRIPTION: Function declarations for Windows NT native API calls related to profiling, system resource management, and other miscellaneous operations. These system calls enable process profiling, object auditing, and general system management.\nSOURCE: https://github.com/panda-re/panda-ng/blob/main/plugins/syscalls2/generated-in/windows_8sp0_x86_prototypes.txt#_snippet_16\n\nLANGUAGE: C\nCODE:\n```\nNTSTATUS NtCreateProfile (PHANDLE ProfileHandle, HANDLE Process, PVOID RangeBase, SIZE_T RangeSize, ULONG BucketSize, PULONG Buffer, ULONG BufferSize, KPROFILE_SOURCE ProfileSource, KAFFINITY Affinity);\nNTSTATUS NtCreateProfileEx (PHANDLE ProfileHandle, HANDLE Process, PVOID ProfileBase, SIZE_T ProfileSize, ULONG BucketSize, PULONG Buffer, ULONG BufferSize, KPROFILE_SOURCE ProfileSource, ULONG GroupAffinityCount, PGROUP_AFFINITY GroupAffinity);\nNTSTATUS NtContinue (PCONTEXT ContextRecord, BOOLEAN TestAlert);\nNTSTATUS NtClose (HANDLE Handle);\nNTSTATUS NtCloseObjectAuditAlarm (PUNICODE_STRING SubsystemName, PVOID HandleId, BOOLEAN GenerateOnClose);\nNTSTATUS NtCallbackReturn (PVOID OutputBuffer, ULONG OutputLength, NTSTATUS Status);\nNTSTATUS NtAreMappedFilesTheSame (PVOID File1MappedAsAnImage, PVOID File2MappedAsFile);\nNTSTATUS NtApphelpCacheControl (APPHELPCOMMAND type, PVOID buf);\n```\n\n----------------------------------------\n\nTITLE: Defining Extended Attribute System Calls in Linux Kernel\nDESCRIPTION: Function declarations for Linux system calls related to extended file attributes (xattr). These functions provide interfaces for setting, getting, listing, and removing extended attributes on files, directories, and file descriptors.\nSOURCE: https://github.com/panda-re/panda-ng/blob/main/plugins/syscalls2/generated-in/linux_mips64n32_prototypes.txt#_snippet_4\n\nLANGUAGE: C\nCODE:\n```\nlong sys_setxattr(const char __user *path, const char __user *name, const void __user *value, size_t size, int flags);\nlong sys_lsetxattr(const char __user *path, const char __user *name, const void __user *value, size_t size, int flags);\nlong sys_fsetxattr(int fd, const char __user *name, const void __user *value, size_t size, int flags);\nlong sys_getxattr(const char __user *path, const char __user *name, void __user *value, size_t size);\nlong sys_lgetxattr(const char __user *path, const char __user *name, void __user *value, size_t size);\nlong sys_fgetxattr(int fd, const char __user *name, void __user *value, size_t size);\nlong sys_listxattr(const char __user *path, char __user *list, size_t size);\nlong sys_llistxattr(const char __user *path, char __user *list, size_t size);\nlong sys_flistxattr(int fd, char __user *list, size_t size);\nlong sys_removexattr(const char __user *path, const char __user *name);\nlong sys_lremovexattr(const char __user *path, const char __user *name);\nlong sys_fremovexattr(int fd, const char __user *name);\n```\n\n----------------------------------------\n\nTITLE: Declaring System Call Prototypes - Linux Kernel - C\nDESCRIPTION: This snippet provides function prototypes for various system calls in the Linux kernel, defining the syscall handler entry points with their names, return types, and parameter lists. These functions form the low-level interface for system services such as file operations, process management, IPC, event handling, timing, and memory. These declarations require standard Linux kernel types and conventions (e.g., __user, umode_t, loff_t), and are typically included in kernel headers or syscall dispatch tables. Each prototype expects specific argument types reflecting user/kernel space boundaries, and all functions return a long value (or appropriate error). Limitations: Implementation is not included; only the prototypes are present.\nSOURCE: https://github.com/panda-re/panda-ng/blob/main/plugins/syscalls2/generated-in/linux_mips64_prototypes.txt#_snippet_5\n\nLANGUAGE: C\nCODE:\n```\n4289 long sys_mkdirat(int dfd, const char __user *pathname, umode_t mode);\n4290 long sys_mknodat(int dfd, const char __user *filename, umode_t mode, unsigned dev);\n4291 long sys_fchownat(int dfd, const char __user *filename, uid_t user, gid_t group, int flag);\n4292 long sys_futimesat_time32(unsigned int dfd, const char __user *filename, struct old_timeval32 __user *t);\n4293 long sys_fstatat64(int dfd, const char __user *filename, struct stat64 __user *statbuf, int flag);\n4294 long sys_unlinkat(int dfd, const char __user *pathname, int flag);\n4295 long sys_renameat(int olddfd, const char __user *oldname, int newdfd, const char __user *newname);\n4296 long sys_linkat(int olddfd, const char __user *oldname, int newdfd, const char __user *newname, int flags);\n4297 long sys_symlinkat(const char __user *oldname, int newdfd, const char __user *newname);\n4298 long sys_readlinkat(int dfd, const char __user *path, char __user *buf, int bufsiz);\n4299 long sys_fchmodat(int dfd, const char __user *filename, umode_t mode);\n4300 long sys_faccessat(int dfd, const char __user *filename, int mode);\n4301 long sys_pselect6_time32(int, fd_set __user *, fd_set __user *, fd_set __user *, struct old_timespec32 __user *, void __user *);\n4302 long sys_ppoll_time32(struct pollfd __user *, unsigned int, struct old_timespec32 __user *, const sigset_t __user *, size_t);\n4303 long sys_unshare(unsigned long unshare_flags);\n4304 long sys_splice(int fd_in, loff_t __user *off_in, int fd_out, loff_t __user *off_out, size_t len, unsigned int flags);\n4305 long sys_sync_file_range(int fd, loff_t offset, loff_t nbytes, unsigned int flags);\n4306 long sys_tee(int fdin, int fdout, size_t len, unsigned int flags);\n4307 long sys_vmsplice(int fd, const struct iovec __user *iov, unsigned long nr_segs, unsigned int flags);\n4308 long sys_move_pages(pid_t pid, unsigned long nr_pages, const void __user * __user *pages, const int __user *nodes, int __user *status, int flags);\n4309 long sys_set_robust_list(struct robust_list_head __user *head, size_t len);\n4310 long sys_get_robust_list(int pid, struct robust_list_head __user * __user *head_ptr, size_t __user *len_ptr);\n4311 long sys_kexec_load(unsigned long entry, unsigned long nr_segments, struct kexec_segment __user *segments, unsigned long flags);\n4312 long sys_getcpu(unsigned __user *cpu, unsigned __user *node, struct getcpu_cache __user *cache);\n4313 long sys_epoll_pwait(int epfd, struct epoll_event __user *events, int maxevents, int timeout, const sigset_t __user *sigmask, size_t sigsetsize);\n4314 long sys_ioprio_set(int which, int who, int ioprio);\n4315 long sys_ioprio_get(int which, int who);\n4316 long sys_utimensat_time32(unsigned int dfd, const char __user *filename, struct old_timespec32 __user *t, int flags);\n4317 long sys_signalfd(int ufd, sigset_t __user *user_mask, size_t sizemask);\n4318 long sys_ni_syscall(void);\n4319 long sys_eventfd(unsigned int count);\n4320 long sys_fallocate(int fd, int mode, loff_t offset, loff_t len);\n4321 long sys_timerfd_create(int clockid, int flags);\n4322 long sys_timerfd_gettime32(int ufd, struct old_itimerspec32 __user *otmr);\n4323 long sys_timerfd_settime32(int ufd, int flags, const struct old_itimerspec32 __user *utmr, struct old_itimerspec32 __user *otmr);\n4324 long sys_signalfd4(int ufd, sigset_t __user *user_mask, size_t sizemask, int flags);\n4325 long sys_eventfd2(unsigned int count, int flags);\n4326 long sys_epoll_create1(int flags);\n4327 long sys_dup3(unsigned int oldfd, unsigned int newfd, int flags);\n4328 long sys_pipe2(int __user *fildes, int flags);\n4329 long sys_inotify_init1(int flags);\n4330 long sys_preadv(unsigned long fd, const struct iovec __user *vec, unsigned long vlen, unsigned long pos_l, unsigned long pos_h);\n4331 long sys_pwritev(unsigned long fd, const struct iovec __user *vec, unsigned long vlen, unsigned long pos_l, unsigned long pos_h);\n4332 long sys_rt_tgsigqueueinfo(pid_t tgid, pid_t pid, int sig, siginfo_t __user *uinfo);\n4333 long sys_perf_event_open(struct perf_event_attr __user *attr_uptr, pid_t pid, int cpu, int group_fd, unsigned long flags);\n4334 long sys_accept4(int, struct sockaddr __user *, int __user *, int);\n4335 long sys_recvmmsg_time32(int fd, struct mmsghdr __user *msg, unsigned int vlen, unsigned flags, struct old_timespec32 __user *timeout);\n4336 long sys_fanotify_init(unsigned int flags, unsigned int event_f_flags);\n4337 long sys_fanotify_mark(int fanotify_fd, unsigned int flags, u64 mask, int fd, const char __user *pathname);\n4338 long sys_prlimit64(pid_t pid, unsigned int resource, const struct rlimit64 __user *new_rlim, struct rlimit64 __user *old_rlim);\n4339 long sys_name_to_handle_at(int dfd, const char __user *name, struct file_handle __user *handle, int __user *mnt_id, int flag);\n4340 long sys_open_by_handle_at(int mountdirfd, struct file_handle __user *handle, int flags);\n4341 long sys_clock_adjtime32(clockid_t which_clock, struct old_timex32 __user *tx);\n4342 long sys_syncfs(int fd);\n4343 long sys_sendmmsg(int fd, struct mmsghdr __user *msg, unsigned int vlen, unsigned flags);\n4344 long sys_setns(int fd, int nstype);\n4345 long sys_process_vm_readv(pid_t pid, const struct iovec __user *lvec, unsigned long liovcnt, const struct iovec __user *rvec, unsigned long riovcnt, unsigned long flags);\n4346 long sys_process_vm_writev(pid_t pid, const struct iovec __user *lvec, unsigned long liovcnt, const struct iovec __user *rvec, unsigned long riovcnt, unsigned long flags);\n4347 long sys_kcmp(pid_t pid1, pid_t pid2, int type, unsigned long idx1, unsigned long idx2);\n4348 long sys_finit_module(int fd, const char __user *uargs, int flags);\n4349 long sys_sched_setattr(pid_t pid, struct sched_attr __user *attr, unsigned int flags);\n4350 long sys_sched_getattr(pid_t pid, struct sched_attr __user *attr, unsigned int size, unsigned int flags);\n4351 long sys_renameat2(int olddfd, const char __user *oldname, int newdfd, const char __user *newname, unsigned int flags);\n4352 long sys_seccomp(unsigned int op, unsigned int flags, void __user *uargs);\n4353 long sys_getrandom(char __user *buf, size_t count, unsigned int flags);\n4354 long sys_memfd_create(const char __user *uname_ptr, unsigned int flags);\n4355 long sys_bpf(int cmd, union bpf_attr *attr, unsigned int size);\n4356 long sys_execveat(int dfd, const char __user *filename, const char __user *const __user *argv, const char __user *const __user *envp, int flags);\n4357 long sys_userfaultfd(int flags);\n4358 long sys_membarrier(int cmd, int flags);\n4359 long sys_mlock2(unsigned long start, size_t len, int flags);\n4360 long sys_copy_file_range(int fd_in, loff_t __user *off_in, int fd_out, loff_t __user *off_out, size_t len, unsigned int flags);\n4361 long sys_preadv2(unsigned long fd, const struct iovec __user *vec, unsigned long vlen, unsigned long pos_l, unsigned long pos_h, rwf_t flags);\n4362 long sys_pwritev2(unsigned long fd, const struct iovec __user *vec, unsigned long vlen, unsigned long pos_l, unsigned long pos_h, rwf_t flags);\n4363 long sys_pkey_mprotect(unsigned long start, size_t len, unsigned long prot, int pkey);\n4364 long sys_pkey_alloc(unsigned long flags, unsigned long init_val);\n4365 long sys_pkey_free(int pkey);\n4366 long sys_statx(int dfd, const char __user *path, unsigned flags, unsigned mask, struct statx __user *buffer);\n4367 long sys_rseq(struct rseq __user *rseq, uint32_t rseq_len, int flags, uint32_t sig);\n4368 long sys_io_pgetevents_time32(aio_context_t ctx_id, long min_nr, long nr, struct io_event __user *events, struct old_timespec32 __user *timeout, const struct __aio_sigset *sig);\n// Arch-specfic syscalls go here\n4393 long sys_semget(key_t key, int nsems, int semflg);\n4394 long sys_semctl(int semid, int semnum, int cmd, unsigned long arg);\n4395 long sys_shmget(key_t key, size_t size, int flag);\n4396 long sys_shmctl(int shmid, int cmd, struct shmid_ds __user *buf);\n4397 long sys_shmat(int shmid, char __user *shmaddr, int shmflg);\n4398 long sys_shmdt(char __user *shmaddr);\n4399 long sys_msgget(key_t key, int msgflg);\n4400 long sys_msgsnd(int msqid, struct msgbuf __user *msgp, size_t msgsz, int msgflg);\n4401 long sys_msgrcv(int msqid, struct msgbuf __user *msgp, size_t msgsz, long msgtyp, int msgflg);\n4402 long sys_msgctl(int msqid, int cmd, struct msqid_ds __user *buf);\n4403 long sys_clock_gettime(clockid_t which_clock, struct __kernel_timespec __user *tp);\n4404 long sys_clock_settime(clockid_t which_clock, const struct __kernel_timespec __user *tp);\n4405 long sys_clock_adjtime(clockid_t which_clock, struct __kernel_timex __user *tx);\n4406 long sys_clock_getres(clockid_t which_clock, struct __kernel_timespec __user *tp);\n4407 long sys_clock_nanosleep(clockid_t which_clock, int flags, const struct __kernel_timespec __user *rqtp, struct __kernel_timespec __user *rmtp);\n4408 long sys_timer_gettime(timer_t timer_id, struct __kernel_itimerspec __user *setting);\n4409 long sys_timer_settime(timer_t timer_id, int flags, const struct __kernel_itimerspec __user *new_setting, struct __kernel_itimerspec __user *old_setting);\n4410 long sys_timerfd_gettime(int ufd, struct __kernel_itimerspec __user *otmr);\n4411 long sys_timerfd_settime(int ufd, int flags, const struct __kernel_itimerspec __user *utmr, struct __kernel_itimerspec __user *otmr);\n4412 long sys_utimensat(int dfd, const char __user *filename, struct __kernel_timespec __user *utimes, int flags);\n4413 long sys_pselect6(int, fd_set __user *, fd_set __user *, fd_set __user *, struct __kernel_timespec __user *, void __user *);\n4414 long sys_ppoll(struct pollfd __user *, unsigned int, struct __kernel_timespec __user *, const sigset_t __user *, size_t);\n4416 long sys_io_pgetevents(aio_context_t ctx_id, long min_nr, long nr, struct io_event __user *events, struct __kernel_timespec __user *timeout, const struct __aio_sigset *sig);\n4417 long sys_recvmmsg(int fd, struct mmsghdr __user *msg, unsigned int vlen, unsigned flags, struct __kernel_timespec __user *timeout);\n```\n\n----------------------------------------\n\nTITLE: Defining Security and System Management System Calls in Linux Kernel\nDESCRIPTION: Function declarations for Linux system calls related to security, key management, and system control operations. These functions handle kernel security features, host configuration, and system rebooting.\nSOURCE: https://github.com/panda-re/panda-ng/blob/main/plugins/syscalls2/generated-in/linux_mips64n32_prototypes.txt#_snippet_8\n\nLANGUAGE: C\nCODE:\n```\nlong sys_reboot(int magic1, int magic2, unsigned int cmd, void __user *arg);\nlong sys_sethostname(char __user *name, int len);\nlong sys_setdomainname(char __user *name, int len);\nlong sys_init_module(void __user *umod, unsigned long len, const char __user *uargs);\nlong sys_delete_module(const char __user *name_user, unsigned int flags);\nlong sys_quotactl(unsigned int cmd, const char __user *special, qid_t id, void __user *addr);\nlong sys_add_key(const char __user *_type, const char __user *_description, const void __user *_payload, size_t plen, key_serial_t destringid);\nlong sys_request_key(const char __user *_type, const char __user *_description, const char __user *_callout_info, key_serial_t destringid);\nlong sys_keyctl(int cmd, unsigned long arg2, unsigned long arg3, unsigned long arg4, unsigned long arg5);\nlong sys_get_robust_list(int pid, struct robust_list_head __user * __user *head_ptr, size_t __user *len_ptr);\nlong sys_set_robust_list(struct robust_list_head __user *head, size_t len);\nlong sys_kexec_load(unsigned long entry, unsigned long nr_segments, struct kexec_segment __user *segments, unsigned long flags);\n```\n\n----------------------------------------\n\nTITLE: Defining Linux System Call Prototypes in C\nDESCRIPTION: This code snippet defines the function prototypes for Linux system calls. Each line includes the system call number, return type, function name, and parameters. These definitions are typically used in kernel development or system programming.\nSOURCE: https://github.com/panda-re/panda-ng/blob/main/plugins/syscalls2/generated-in/linux_arm_prototypes.txt#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n0 long sys_restart_syscall(void);\n1 long sys_exit(int error_code);\n2 long sys_fork(void);\n3 long sys_read(unsigned int fd, char __user *buf, size_t count);\n4 long sys_write(unsigned int fd, const char __user *buf, size_t count);\n5 long sys_open(const char __user *filename, int flags, umode_t mode);\n6 long sys_close(unsigned int fd);\n8 long sys_creat(const char __user *pathname, umode_t mode);\n9 long sys_link(const char __user *oldname, const char __user *newname);\n10 long sys_unlink(const char __user *pathname);\n11 long sys_execve(const char __user *filename, const char __user *const __user *argv, const char __user *const __user *envp);\n12 long sys_chdir(const char __user *filename);\n13 long sys_time(time_t __user *tloc);\n14 long sys_mknod(const char __user *filename, umode_t mode, unsigned dev);\n15 long sys_chmod(const char __user *filename, umode_t mode);\n16 long sys_lchown16(const char __user *filename, old_uid_t user, old_gid_t group);\n19 long sys_lseek(unsigned int fd, off_t offset, unsigned int whence);\n20 long sys_getpid(void);\n21 long sys_mount(char __user *dev_name, char __user *dir_name, char __user *type, unsigned long flags, void __user *data);\n23 long sys_setuid16(old_uid_t uid);\n24 long sys_getuid16(void);\n25 long sys_stime(time_t __user *tptr);\n26 long sys_ptrace(long request, long pid, unsigned long addr, unsigned long data);\n27 long sys_alarm(unsigned int seconds);\n29 long sys_pause(void);\n30 long sys_utime(char __user *filename, struct utimbuf __user *times);\n33 long sys_access(const char __user *filename, int mode);\n34 long sys_nice(int increment);\n36 long sys_sync(void);\n37 long sys_kill(int pid, int sig);\n38 long sys_rename(const char __user *oldname, const char __user *newname);\n39 long sys_mkdir(const char __user *pathname, umode_t mode);\n40 long sys_rmdir(const char __user *pathname);\n41 long sys_dup(unsigned int fildes);\n42 long sys_pipe(int __user *fildes);\n43 long sys_times(struct tms __user *tbuf);\n45 long sys_brk(unsigned long brk);\n46 long sys_setgid16(old_gid_t gid);\n47 long sys_getgid16(void);\n49 long sys_geteuid16(void);\n50 long sys_getegid16(void);\n51 long sys_acct(const char __user *name);\n52 long sys_umount(char __user *name, int flags);\n54 long sys_ioctl(unsigned int fd, unsigned int cmd, unsigned long arg);\n55 long sys_fcntl(unsigned int fd, unsigned int cmd, unsigned long arg);\n57 long sys_setpgid(pid_t pid, pid_t pgid);\n60 long sys_umask(int mask);\n61 long sys_chroot(const char __user *filename);\n62 long sys_ustat(unsigned dev, struct ustat __user *ubuf);\n63 long sys_dup2(unsigned int oldfd, unsigned int newfd);\n64 long sys_getppid(void);\n65 long sys_getpgrp(void);\n66 long sys_setsid(void);\n67 long sys_sigaction(int, const struct old_sigaction __user *, struct old_sigaction __user *);\n70 long sys_setreuid16(old_uid_t ruid, old_uid_t euid);\n71 long sys_setregid16(old_gid_t rgid, old_gid_t egid);\n72 long sys_sigsuspend(int unused1, int unused2, old_sigset_t mask);\n73 long sys_sigpending(old_sigset_t __user *set);\n74 long sys_sethostname(char __user *name, int len);\n75 long sys_setrlimit(unsigned int resource, struct rlimit __user *rlim);\n77 long sys_getrusage(int who, struct rusage __user *ru);\n78 long sys_gettimeofday(struct timeval __user *tv, struct timezone __user *tz);\n79 long sys_settimeofday(struct timeval __user *tv, struct timezone __user *tz);\n80 long sys_getgroups16(int gidsetsize, old_gid_t __user *grouplist);\n81 long sys_setgroups16(int gidsetsize, old_gid_t __user *grouplist);\n83 long sys_symlink(const char __user *old, const char __user *new);\n85 long sys_readlink(const char __user *path, char __user *buf, int bufsiz);\n86 long sys_uselib(const char __user *library);\n87 long sys_swapon(const char __user *specialfile, int swap_flags);\n88 long sys_reboot(int magic1, int magic2, unsigned int cmd, void __user *arg);\n91 long sys_munmap(unsigned long addr, size_t len);\n92 long sys_truncate(const char __user *path, long length);\n93 long sys_ftruncate(unsigned int fd, unsigned long length);\n94 long sys_fchmod(unsigned int fd, umode_t mode);\n95 long sys_fchown16(unsigned int fd, old_uid_t user, old_gid_t group);\n96 long sys_getpriority(int which, int who);\n97 long sys_setpriority(int which, int who, int niceval);\n99 long sys_statfs(const char __user *path, struct statfs __user *buf);\n100 long sys_fstatfs(unsigned int fd, struct statfs __user *buf);\n102 long sys_socketcall(int call, unsigned long __user *args);\n103 long sys_syslog(int type, char __user *buf, int len);\n104 long sys_setitimer(int which, struct itimerval __user *value, struct itimerval __user *ovalue);\n105 long sys_getitimer(int which, struct itimerval __user *value);\n106 long sys_newstat(const char __user *filename, struct stat __user *statbuf);\n107 long sys_newlstat(const char __user *filename, struct stat __user *statbuf);\n108 long sys_newfstat(unsigned int fd, struct stat __user *statbuf);\n111 long sys_vhangup(void);\n114 long sys_wait4(pid_t pid, int __user *stat_addr, int options, struct rusage __user *ru);\n115 long sys_swapoff(const char __user *specialfile);\n116 long sys_sysinfo(struct sysinfo __user *info);\n117 long sys_ipc(unsigned int call, int first, unsigned long second, unsigned long third, void __user *ptr, long fifth);\n118 long sys_fsync(unsigned int fd);\n119 int sys_sigreturn(struct pt_regs *regs);\n120 long sys_clone(unsigned long, unsigned long, int __user *, int __user *, unsigned long);\n121 long sys_setdomainname(char __user *name, int len);\n122 long sys_newuname(struct new_utsname __user *name);\n124 long sys_adjtimex(struct timex __user *txc_p);\n125 long sys_mprotect(unsigned long start, size_t len, unsigned long prot);\n126 long sys_sigprocmask(int how, old_sigset_t __user *set, old_sigset_t __user *oset);\n128 long sys_init_module(void __user *umod, unsigned long len, const char __user *uargs);\n129 long sys_delete_module(const char __user *name_user, unsigned int flags);\n131 long sys_quotactl(unsigned int cmd, const char __user *special, qid_t id, void __user *addr);\n132 long sys_getpgid(pid_t pid);\n133 long sys_fchdir(unsigned int fd);\n134 long sys_bdflush(int func, long data);\n135 long sys_sysfs(int option, unsigned long arg1, unsigned long arg2);\n136 long sys_personality(unsigned int personality);\n138 long sys_setfsuid16(old_uid_t uid);\n139 long sys_setfsgid16(old_gid_t gid);\n140 long sys_llseek(unsigned int fd, unsigned long offset_high, unsigned long offset_low, loff_t __user *result, unsigned int whence);\n141 long sys_getdents(unsigned int fd, struct linux_dirent __user *dirent, unsigned int count);\n142 long sys_select(int n, fd_set __user *inp, fd_set __user *outp, fd_set __user *exp, struct timeval __user *tvp);\n143 long sys_flock(unsigned int fd, unsigned int cmd);\n144 long sys_msync(unsigned long start, size_t len, int flags);\n145 long sys_readv(unsigned long fd, const struct iovec __user *vec, unsigned long vlen);\n146 long sys_writev(unsigned long fd, const struct iovec __user *vec, unsigned long vlen);\n147 long sys_getsid(pid_t pid);\n148 long sys_fdatasync(unsigned int fd);\n149 long sys_sysctl(struct __sysctl_args __user *args);\n150 long sys_mlock(unsigned long start, size_t len);\n151 long sys_munlock(unsigned long start, size_t len);\n152 long sys_mlockall(int flags);\n153 long sys_munlockall(void);\n154 long sys_sched_setparam(pid_t pid, struct sched_param __user *param);\n155 long sys_sched_getparam(pid_t pid, struct sched_param __user *param);\n156 long sys_sched_setscheduler(pid_t pid, int policy, struct sched_param __user *param);\n157 long sys_sched_getscheduler(pid_t pid);\n158 long sys_sched_yield(void);\n159 long sys_sched_get_priority_max(int policy);\n160 long sys_sched_get_priority_min(int policy);\n161 long sys_sched_rr_get_interval(pid_t pid, struct timespec __user *interval);\n162 long sys_nanosleep(struct timespec __user *rqtp, struct timespec __user *rmtp);\n163 long sys_mremap(unsigned long addr, unsigned long old_len, unsigned long new_len, unsigned long flags, unsigned long new_addr);\n164 long sys_setresuid16(old_uid_t ruid, old_uid_t euid, old_uid_t suid);\n165 long sys_getresuid16(old_uid_t __user *ruid, old_uid_t __user *euid, old_uid_t __user *suid);\n168 long sys_poll(struct pollfd __user *ufds, unsigned int nfds, int timeout);\n170 long sys_setresgid16(old_gid_t rgid, old_gid_t egid, old_gid_t sgid);\n171 long sys_getresgid16(old_gid_t __user *rgid, old_gid_t __user *egid, old_gid_t __user *sgid);\n172 long sys_prctl(int option, unsigned long arg2, unsigned long arg3, unsigned long arg4, unsigned long arg5);\n173 int sys_rt_sigreturn(struct pt_regs *regs);\n174 long sys_rt_sigaction(int, const struct sigaction __user *, struct sigaction __user *, size_t);\n175 long sys_rt_sigprocmask(int how, sigset_t __user *set, sigset_t __user *oset, size_t sigsetsize);\n176 long sys_rt_sigpending(sigset_t __user *set, size_t sigsetsize);\n177 long sys_rt_sigtimedwait(const sigset_t __user *uthese, siginfo_t __user *uinfo, const struct timespec __user *uts, size_t sigsetsize);\n178 long sys_rt_sigqueueinfo(int pid, int sig, siginfo_t __user *uinfo);\n179 long sys_rt_sigsuspend(sigset_t __user *unewset, size_t sigsetsize);\n180 long sys_pread64(unsigned int fd, char __user *buf, size_t count, loff_t pos);\n181 long sys_pwrite64(unsigned int fd, const char __user *buf, size_t count, loff_t pos);\n182 long sys_chown16(const char __user *filename, old_uid_t user, old_gid_t group);\n183 long sys_getcwd(char __user *buf, unsigned long size);\n184 long sys_capget(cap_user_header_t header, cap_user_data_t dataptr);\n185 long sys_capset(cap_user_header_t header, const cap_user_data_t data);\n186 long sys_sigaltstack(const struct sigaltstack __user *uss, struct sigaltstack __user *uoss);\n187 long sys_sendfile(int out_fd, int in_fd, off_t __user *offset, size_t count);\n190 long sys_vfork(void);\n191 long sys_getrlimit(unsigned int resource, struct rlimit __user *rlim);\n```\n\n----------------------------------------\n\nTITLE: Declaring NT System Call Function Prototypes - C\nDESCRIPTION: This code snippet declares a set of NTSTATUS-returning function prototypes for direct system calls to the Windows NT kernel in C. Dependencies include the appropriate NT types and structures (such as HANDLE, PHANDLE, POBJECT_ATTRIBUTES, LUID, etc.) that must be predefined, usually in corresponding NT or Windows header files. Each function prototype defines the expected parameter types for kernel-level operations like memory reservation, privilege adjustments, security checks, and inter-process communication, with inputs typically being pointers to user-allocated structures and outputs as status codes or modified buffers. These functions must be used with care in privileged or system-level components, as they are not part of the documented Win32 API and require a detailed understanding of NT internals.\nSOURCE: https://github.com/panda-re/panda-ng/blob/main/plugins/syscalls2/generated-in/windows_8sp0_x86_prototypes.txt#_snippet_17\n\nLANGUAGE: C\nCODE:\n```\nNTSTATUS NtAllocateReserveObject (PHANDLE MemoryReserveHandle, POBJECT_ATTRIBUTES ObjectAttributes, MEMORY_RESERVE_TYPE Type);\nNTSTATUS NtAllocateLocallyUniqueId (PLUID Luid);\nNTSTATUS NtAlertThread (HANDLE ThreadHandle);\nNTSTATUS NtAlertResumeThread (HANDLE ThreadHandle, PULONG PreviousSuspendCount);\nNTSTATUS NtAdjustPrivilegesToken (HANDLE TokenHandle, BOOLEAN DisableAllPrivileges, PTOKEN_PRIVILEGES NewState, ULONG BufferLength, PTOKEN_PRIVILEGES PreviousState, PULONG ReturnLength);\nNTSTATUS NtAdjustGroupsToken (HANDLE TokenHandle, BOOLEAN ResetToDefault, PTOKEN_GROUPS NewState, ULONG BufferLength, PTOKEN_GROUPS PreviousState, PULONG ReturnLength);\nNTSTATUS NtAddDriverEntry (PEFI_DRIVER_ENTRY DriverEntry, PULONG Id);\nNTSTATUS NtAddBootEntry (PBOOT_ENTRY BootEntry, PULONG Id);\nNTSTATUS NtAddAtom (PWSTR AtomName, ULONG Length, PRTL_ATOM Atom);\nNTSTATUS NtAccessCheckByTypeResultListAndAuditAlarmByHandle (PUNICODE_STRING SubsystemName, PVOID HandleId, HANDLE ClientToken, PUNICODE_STRING ObjectTypeName, PUNICODE_STRING ObjectName, PSECURITY_DESCRIPTOR SecurityDescriptor, PSID PrincipalSelfSid, ACCESS_MASK DesiredAccess, AUDIT_EVENT_TYPE AuditType, ULONG Flags, POBJECT_TYPE_LIST ObjectTypeList, ULONG ObjectTypeListLength, PGENERIC_MAPPING GenericMapping, BOOLEAN ObjectCreation, PACCESS_MASK GrantedAccess, PNTSTATUS AccessStatus, PBOOLEAN GenerateOnClose);\nNTSTATUS NtAccessCheckByTypeResultListAndAuditAlarm (PUNICODE_STRING SubsystemName, PVOID HandleId, PUNICODE_STRING ObjectTypeName, PUNICODE_STRING ObjectName, PSECURITY_DESCRIPTOR SecurityDescriptor, PSID PrincipalSelfSid, ACCESS_MASK DesiredAccess, AUDIT_EVENT_TYPE AuditType, ULONG Flags, POBJECT_TYPE_LIST ObjectTypeList, ULONG ObjectTypeListLength, PGENERIC_MAPPING GenericMapping, BOOLEAN ObjectCreation, PACCESS_MASK GrantedAccess, PNTSTATUS AccessStatus, PBOOLEAN GenerateOnClose);\nNTSTATUS NtAccessCheckByTypeResultList (PSECURITY_DESCRIPTOR SecurityDescriptor, PSID PrincipalSelfSid, HANDLE ClientToken, ACCESS_MASK DesiredAccess, POBJECT_TYPE_LIST ObjectTypeList, ULONG ObjectTypeListLength, PGENERIC_MAPPING GenericMapping, PPRIVILEGE_SET PrivilegeSet, PULONG PrivilegeSetLength, PACCESS_MASK GrantedAccess, PNTSTATUS AccessStatus);\nNTSTATUS NtAccessCheckByTypeAndAuditAlarm (PUNICODE_STRING SubsystemName, PVOID HandleId, PUNICODE_STRING ObjectTypeName, PUNICODE_STRING ObjectName, PSECURITY_DESCRIPTOR SecurityDescriptor, PSID PrincipalSelfSid, ACCESS_MASK DesiredAccess, AUDIT_EVENT_TYPE AuditType, ULONG Flags, POBJECT_TYPE_LIST ObjectTypeList, ULONG ObjectTypeListLength, PGENERIC_MAPPING GenericMapping, BOOLEAN ObjectCreation, PACCESS_MASK GrantedAccess, PNTSTATUS AccessStatus, PBOOLEAN GenerateOnClose);\nNTSTATUS NtAccessCheckByType (PSECURITY_DESCRIPTOR SecurityDescriptor, PSID PrincipalSelfSid, HANDLE ClientToken, ACCESS_MASK DesiredAccess, POBJECT_TYPE_LIST ObjectTypeList, ULONG ObjectTypeListLength, PGENERIC_MAPPING GenericMapping, PPRIVILEGE_SET PrivilegeSet, PULONG PrivilegeSetLength, PACCESS_MASK GrantedAccess, PNTSTATUS AccessStatus);\nNTSTATUS NtAccessCheckAndAuditAlarm (PUNICODE_STRING SubsystemName, PVOID HandleId, PUNICODE_STRING ObjectTypeName, PUNICODE_STRING ObjectName, PSECURITY_DESCRIPTOR SecurityDescriptor, ACCESS_MASK DesiredAccess, PGENERIC_MAPPING GenericMapping, BOOLEAN ObjectCreation, PACCESS_MASK GrantedAccess, PNTSTATUS AccessStatus, PBOOLEAN GenerateOnClose);\nNTSTATUS NtAccessCheck (PSECURITY_DESCRIPTOR SecurityDescriptor, HANDLE ClientToken, ACCESS_MASK DesiredAccess, PGENERIC_MAPPING GenericMapping, PPRIVILEGE_SET PrivilegeSet, PULONG PrivilegeSetLength, PACCESS_MASK GrantedAccess, PNTSTATUS AccessStatus);\nNTSTATUS NtAcceptConnectPort (PHANDLE PortHandle, PVOID PortContext, PPORT_MESSAGE ConnectionRequest, BOOLEAN AcceptConnection, PPORT_VIEW ServerView, PREMOTE_PORT_VIEW ClientView);\n```\n\n----------------------------------------\n\nTITLE: Defining Semaphore and Signal System Calls in C\nDESCRIPTION: These function prototypes define system calls for timed semaphore operations and signal waiting. They include operations with timeout specifications and signal handling.\nSOURCE: https://github.com/panda-re/panda-ng/blob/main/plugins/syscalls2/generated-in/linux_mips_prototypes.txt#_snippet_6\n\nLANGUAGE: C\nCODE:\n```\nlong sys_semtimedop(int semid, struct sembuf __user *sops, unsigned nsops, const struct __kernel_timespec __user *timeout);\nlong sys_rt_sigtimedwait(const sigset_t __user *uthese, siginfo_t __user *uinfo, const struct __kernel_timespec __user *uts, size_t sigsetsize);\n```\n\n----------------------------------------\n\nTITLE: Declaring System Call Prototypes in Linux Kernel (C)\nDESCRIPTION: This snippet declares C function prototypes corresponding to Linux system calls, with each function prefixed by 'sys_' and using kernel-specific data types such as pid_t, uid_t, and umode_t. These declarations provide the interface for core kernel services including process management, file operations, memory mapping, device control, signal handling, and user/group administration. To utilize these system calls within the kernel, appropriate header files and definitions (e.g., for types like struct stat) must be provided; input parameters reflect user-space pointers or kernel data structures, and return values typically indicate success (often 0) or standard negative error codes, following Linux conventions.\nSOURCE: https://github.com/panda-re/panda-ng/blob/main/plugins/syscalls2/generated-in/linux_mips_prototypes.txt#_snippet_0\n\nLANGUAGE: c\nCODE:\n```\n4001 long sys_exit(int error_code);\n4002 pid_t sys_fork(void);\n4003 long sys_read(unsigned int fd, char __user *buf, size_t count);\n4004 long sys_write(unsigned int fd, const char __user *buf, size_t count);\n4005 long sys_open(const char __user *filename, int flags, umode_t mode);\n4006 long sys_close(unsigned int fd);\n4007 long sys_waitpid(pid_t pid, int __user *stat_addr, int options);\n4008 long sys_creat(const char __user *pathname, umode_t mode);\n4009 long sys_link(const char __user *oldname, const char __user *newname);\n4010 long sys_unlink(const char __user *pathname);\n4011 long sys_execve(const char __user *filename, const char __user *const __user *argv, const char __user *const __user *envp);\n4012 long sys_chdir(const char __user *filename);\n4013 long sys_time32(old_time32_t __user *tloc);\n4014 long sys_mknod(const char __user *filename, umode_t mode, unsigned dev);\n4015 long sys_chmod(const char __user *filename, umode_t mode);\n4016 long sys_lchown(const char __user *filename, uid_t user, gid_t group);\n// 4017 sys_break - UNIMPLEMENTED\n4018 long sys_stat(const char __user *filename, struct __old_kernel_stat __user *statbuf);\n4019 long sys_lseek(unsigned int fd, off_t offset, unsigned int whence);\n4020 long sys_getpid(void);\n4021 long sys_mount(char __user *dev_name, char __user *dir_name, char __user *type, unsigned long flags, void __user *data);\n4022 long sys_oldumount(char __user *name);\n4023 long sys_setuid(uid_t uid);\n4024 long sys_getuid(void);\n4025 long sys_stime32(old_time32_t __user *tptr);\n4026 long sys_ptrace(long request, long pid, unsigned long addr, unsigned long data);\n4027 long sys_alarm(unsigned int seconds);\n4028 long sys_fstat(unsigned int fd, struct __old_kernel_stat __user *statbuf);\n4029 long sys_pause(void);\n4030 long sys_utime32(const char __user *filename, struct old_utimbuf32 __user *t);\n// 4031 sys_stty - UNIMPLEMENTED\n// 4032 sys_gtty - UNIMPLEMENTED\n4033 long sys_access(const char __user *filename, int mode);\n4034 long sys_nice(int increment);\n// 4035 sys_ftime - UNIMPLEMENTED\n4036 long sys_sync(void);\n4037 long sys_kill(pid_t pid, int sig);\n4038 long sys_rename(const char __user *oldname, const char __user *newname);\n4039 long sys_mkdir(const char __user *pathname, umode_t mode);\n4040 long sys_rmdir(const char __user *pathname);\n4041 long sys_dup(unsigned int fildes);\n4042 long sys_pipe(int __user *fildes);\n4043 long sys_times(struct tms __user *tbuf);\n4045 long sys_brk(unsigned long brk);\n4046 long sys_setgid(gid_t gid);\n4047 long sys_getgid(void);\n4048 long sys_signal(int sig, __sighandler_t handler);\n4049 long sys_geteuid(void);\n4050 long sys_getegid(void);\n4051 long sys_acct(const char __user *name);\n4052 long sys_umount(char __user *name, int flags);\n4054 long sys_ioctl(unsigned int fd, unsigned int cmd, unsigned long arg);\n4055 long sys_fcntl(unsigned int fd, unsigned int cmd, unsigned long arg);\n// 4056 sys_mpx - UNIMPLEMENTED\n4057 long sys_setpgid(pid_t pid, pid_t pgid);\n// 4058 sys_ulimit - UNIMPLEMENTED\n4059 long sys_olduname(struct oldold_utsname __user *);\n4060 long sys_umask(int mask);\n4061 long sys_chroot(const char __user *filename);\n4062 long sys_ustat(unsigned dev, struct ustat __user *ubuf);\n4063 long sys_dup2(unsigned int oldfd, unsigned int newfd);\n4064 long sys_getppid(void);\n4065 long sys_getpgrp(void);\n4066 long sys_setsid(void);\n4067 long sys_sigaction(int, const struct old_sigaction __user *, struct old_sigaction __user *);\n4068 long sys_sgetmask(void);\n4069 long sys_ssetmask(int newmask);\n4070 long sys_setreuid(uid_t ruid, uid_t euid);\n4071 long sys_setregid(gid_t rgid, gid_t egid);\n4072 long sys_sigsuspend(int unused1, int unused2, old_sigset_t mask);\n4073 long sys_sigpending(old_sigset_t __user *uset);\n4074 long sys_sethostname(char __user *name, int len);\n4075 long sys_setrlimit(unsigned int resource, struct rlimit __user *rlim);\n4076 long sys_getrlimit(unsigned int resource, struct rlimit __user *rlim);\n4077 long sys_getrusage(int who, struct rusage __user *ru);\n4078 long sys_gettimeofday(struct __kernel_old_timeval __user *tv, struct timezone __user *tz);\n4079 long sys_settimeofday(struct __kernel_old_timeval __user *tv, struct timezone __user *tz);\n4080 long sys_getgroups(int gidsetsize, gid_t __user *grouplist);\n4081 long sys_setgroups(int gidsetsize, gid_t __user *grouplist);\n// 4082 - RESERVED\n4083 long sys_symlink(const char __user *old, const char __user *new);\n4084 long sys_lstat(const char __user *filename, struct __old_kernel_stat __user *statbuf);\n4085 long sys_readlink(const char __user *path, char __user *buf, int bufsiz);\n4086 long sys_uselib(const char __user *library);\n4087 long sys_swapon(const char __user *specialfile, int swap_flags);\n4088 long sys_reboot(int magic1, int magic2, unsigned int cmd, void __user *arg);\n4089 long sys_old_readdir(unsigned int, struct old_linux_dirent __user *, unsigned int);\n4090 long sys_mmap(unsigned long addr, unsigned long len, unsigned long prot, unsigned long flags, unsigned long fd, unsigned long pgoff);\n4091 long sys_munmap(unsigned long addr, size_t len);\n4092 long sys_truncate(const char __user *path, long length);\n4093 long sys_ftruncate(unsigned int fd, unsigned long length);\n4094 long sys_fchmod(unsigned int fd, umode_t mode);\n4095 long sys_fchown(unsigned int fd, uid_t user, gid_t group);\n4096 long sys_getpriority(int which, int who);\n4097 long sys_setpriority(int which, int who, int niceval);\n// 4098 sys_profil - UNIMPLEMENTED\n4099 long sys_statfs(const char __user *path, struct statfs __user *buf);\n4100 long sys_fstatfs(unsigned int fd, struct statfs __user *buf);\n4101 long sys_ioperm(unsigned long from, unsigned long num, int on);\n4102 long sys_socketcall(int call, unsigned long __user *args);\n4103 long sys_syslog(int type, char __user *buf, int len);\n4104 long sys_setitimer(int which, struct __kernel_old_itimerval __user *value, struct __kernel_old_itimerval __user *ovalue);\n4105 long sys_getitimer(int which, struct __kernel_old_itimerval __user *value);\n4106 long sys_newstat(const char __user *filename, struct stat __user *statbuf);\n4107 long sys_newlstat(const char __user *filename, struct stat __user *statbuf);\n4108 long sys_newfstat(unsigned int fd, struct stat __user *statbuf);\n4109 long sys_uname(struct old_utsname __user *);\n4110 long sys_iopl(int level);\n4111 long sys_vhangup(void);\n4112 long sys_idle(void);\n// 4113 sys_vm86 - X86 ONLY AND DEPRECIATED\n4114 long sys_wait4(pid_t pid, int __user *stat_addr, int options, struct rusage __user *ru);\n4115 long sys_swapoff(const char __user *specialfile);\n4116 long sys_sysinfo(struct sysinfo __user *info);\n4117 long sys_ipc(unsigned int call, int first, unsigned long second, unsigned long third, void __user *ptr, long fifth);\n4118 long sys_fsync(unsigned int fd);\n4119 void sys_sigreturn(void);\n4120 long sys_clone(unsigned long, unsigned long, int __user *, unsigned long, int __user *);\n4121 long sys_setdomainname(char __user *name, int len);\n4122 long sys_newuname(struct new_utsname __user *name);\n4123 long modify_ldt(int func, void *ptr, unsigned long bytecount);\n4124 long sys_adjtimex_time32(struct old_timex32 __user *txc_p);\n4125 long sys_mprotect(unsigned long start, size_t len, unsigned long prot);\n4126 long sys_sigprocmask(int how, old_sigset_t __user *set, old_sigset_t __user *oset);\n4127 caddr_t create_module(const char *name, size_t size);\n4128 long sys_init_module(void __user *umod, unsigned long len, const char __user *uargs);\n4129 long sys_delete_module(const char __user *name_user, unsigned int flags);\n4130 long get_kernel_syms(struct kernel_sym *table);\n4131 long sys_quotactl(unsigned int cmd, const char __user *special, qid_t id, void __user *addr);\n4132 long sys_getpgid(pid_t pid);\n4133 long sys_fchdir(unsigned int fd);\n4134 long sys_bdflush(int func, long data);\n4135 long sys_sysfs(int option, unsigned long arg1, unsigned long arg2);\n4136 long sys_personality(unsigned int personality);\n// 4137 sys_afs_syscall - UNIMPLEMENTED\n4138 long sys_setfsuid(uid_t uid);\n4139 long sys_setfsgid(gid_t gid);\n4140 long sys_llseek(unsigned int fd, unsigned long offset_high, unsigned long offset_low, loff_t __user *result, unsigned int whence);\n4141 long sys_getdents(unsigned int fd, struct linux_dirent __user *dirent, unsigned int count);\n4142 long sys_select(int n, fd_set __user *inp, fd_set __user *outp, fd_set __user *exp, struct __kernel_old_timeval __user *tvp);\n4143 long sys_flock(unsigned int fd, unsigned int cmd);\n4144 long sys_msync(unsigned long start, size_t len, int flags);\n4145 long sys_readv(unsigned long fd, const struct iovec __user *vec, unsigned long vlen);\n4146 long sys_writev(unsigned long fd, const struct iovec __user *vec, unsigned long vlen);\n4147 long sys_cacheflush(char *addr, int nbytes, int cache);\n// 4148 sys_cachectl - ???\n// 4149 sys_sysmips - ???\n4150 long sys_setup(void);\n4151 long sys_getsid(pid_t pid);\n4152 long sys_fdatasync(unsigned int fd);\n4153 long sys_sysctl(struct __sysctl_args __user *args);\n4154 long sys_mlock(unsigned long start, size_t len);\n4155 long sys_munlock(unsigned long start, size_t len);\n4156 long sys_mlockall(int flags);\n4157 long sys_munlockall(void);\n4158 long sys_sched_setparam(pid_t pid, struct sched_param __user *param);\n4159 long sys_sched_getparam(pid_t pid, struct sched_param __user *param);\n4160 long sys_sched_setscheduler(pid_t pid, int policy, struct sched_param __user *param);\n4161 long sys_sched_getscheduler(pid_t pid);\n4162 long sys_sched_yield(void);\n4163 long sys_sched_get_priority_max(int policy);\n4164 long sys_sched_get_priority_min(int policy);\n4165 long sys_sched_rr_get_interval_time32(pid_t pid, struct old_timespec32 __user *interval);\n4166 long sys_nanosleep_time32(struct old_timespec32 __user *rqtp, struct old_timespec32 __user *rmtp);\n4167 long sys_mremap(unsigned long addr, unsigned long old_len, unsigned long new_len, unsigned long flags, unsigned long new_addr);\n4168 long sys_accept(int, struct sockaddr __user *, int __user *);\n```\n\n----------------------------------------\n\nTITLE: Disabling User Mode ASLR in Linux Guest (sh)\nDESCRIPTION: Provides a command to disable address space layout randomization for user processes in Linux, which is required for reliable introspection in a PANDA guest. Needs sudo privileges and /proc filesystem support in the guest. Output is that ASLR is turned off for all user programs in the running Linux environment.\nSOURCE: https://github.com/panda-re/panda-ng/blob/main/plugins/osi_linux/README.md#_snippet_11\n\nLANGUAGE: sh\nCODE:\n```\necho 0 | sudo tee /proc/sys/kernel/randomize_va_space\n```\n\n----------------------------------------\n\nTITLE: Declaring Linux System Call Handler Prototypes - C\nDESCRIPTION: This snippet provides prototype declarations for multiple Linux system call handler functions in C, typically found in a Linux kernel source file that enumerates all supported syscalls. Each function corresponds to a different Linux system call and is prefixed with sys_ for standard calls or ARM_ for ARM-specific extensions. Parameters commonly use __user qualifiers to denote user-space pointers, and types such as uid_t, gid_t, loff_t, pid_t indicate standardized kernel datatypes. The prototypes serve as the contract between the kernel and syscall dispatch layer, allowing the kernel to route user-space syscall invocations to the appropriate C handlers. No implementation or dependencies are present in this section; these are strictly interface declarations with required types derived from kernel headers. Expected input is parameters as described per-API, with return values typically being a long integer indicating result or error code as per syscall convention.\nSOURCE: https://github.com/panda-re/panda-ng/blob/main/plugins/syscalls2/generated-in/linux_arm_prototypes.txt#_snippet_2\n\nLANGUAGE: C\nCODE:\n```\n325 long sys_fchownat(int dfd, const char __user *filename, uid_t user, gid_t group, int flag);\n326 long sys_futimesat(int dfd, const char __user *filename, struct timeval __user *utimes);\n327 long sys_fstatat64(int dfd, const char __user *filename, struct stat64 __user *statbuf, int flag);\n328 long sys_unlinkat(int dfd, const char __user *pathname, int flag);\n329 long sys_renameat(int olddfd, const char __user *oldname, int newdfd, const char __user *newname);\n330 long sys_linkat(int olddfd, const char __user *oldname, int newdfd, const char __user *newname, int flags);\n331 long sys_symlinkat(const char __user *oldname, int newdfd, const char __user *newname);\n332 long sys_readlinkat(int dfd, const char __user *path, char __user *buf, int bufsiz);\n333 long sys_fchmodat(int dfd, const char __user *filename, umode_t mode);\n334 long sys_faccessat(int dfd, const char __user *filename, int mode);\n335 long sys_pselect6(int, fd_set __user *, fd_set __user *, fd_set __user *, struct timespec __user *, void __user *);\n336 long sys_ppoll(struct pollfd __user *, unsigned int, struct timespec __user *, const sigset_t __user *, size_t);\n337 long sys_unshare(unsigned long unshare_flags);\n338 long sys_set_robust_list(struct robust_list_head __user *head, size_t len);\n339 long sys_get_robust_list(int pid, struct robust_list_head __user * __user *head_ptr, size_t __user *len_ptr);\n340 long sys_splice(int fd_in, loff_t __user *off_in, int fd_out, loff_t __user *off_out, size_t len, unsigned int flags);\n341 long sys_sync_file_range2(int fd, unsigned int flags, loff_t offset, loff_t nbytes);\n342 long sys_tee(int fdin, int fdout, size_t len, unsigned int flags);\n343 long sys_vmsplice(int fd, const struct iovec __user *iov, unsigned long nr_segs, unsigned int flags);\n344 long sys_move_pages(pid_t pid, unsigned long nr_pages, const void __user * __user *pages, const int __user *nodes, int __user *status, int flags);\n345 long sys_getcpu(unsigned __user *cpu, unsigned __user *node, struct getcpu_cache __user *cache);\n346 long sys_epoll_pwait(int epfd, struct epoll_event __user *events, int maxevents, int timeout, const sigset_t __user *sigmask, size_t sigsetsize);\n347 long sys_kexec_load(unsigned long entry, unsigned long nr_segments, struct kexec_segment __user *segments, unsigned long flags);\n348 long sys_utimensat(int dfd, const char __user *filename, struct timespec __user *utimes, int flags);\n349 long sys_signalfd(int ufd, sigset_t __user *user_mask, size_t sizemask);\n350 long sys_timerfd_create(int clockid, int flags);\n351 long sys_eventfd(unsigned int count);\n352 long sys_fallocate(int fd, int mode, loff_t offset, loff_t len);\n353 long sys_timerfd_settime(int ufd, int flags, const struct itimerspec __user *utmr, struct itimerspec __user *otmr);\n354 long sys_timerfd_gettime(int ufd, struct itimerspec __user *otmr);\n355 long sys_signalfd4(int ufd, sigset_t __user *user_mask, size_t sizemask, int flags);\n356 long sys_eventfd2(unsigned int count, int flags);\n357 long sys_epoll_create1(int flags);\n358 long sys_dup3(unsigned int oldfd, unsigned int newfd, int flags);\n359 long sys_pipe2(int __user *fildes, int flags);\n360 long sys_inotify_init1(int flags);\n361 long sys_preadv(unsigned long fd, const struct iovec __user *vec, unsigned long vlen, unsigned long pos_l, unsigned long pos_h);\n362 long sys_pwritev(unsigned long fd, const struct iovec __user *vec, unsigned long vlen, unsigned long pos_l, unsigned long pos_h);\n363 long sys_rt_tgsigqueueinfo(pid_t tgid, pid_t pid, int sig, siginfo_t __user *uinfo);\n364 long sys_perf_event_open(struct perf_event_attr __user *attr_uptr, pid_t pid, int cpu, int group_fd, unsigned long flags);\n365 long sys_recvmmsg(int fd, struct mmsghdr __user *msg, unsigned int vlen, unsigned flags, struct timespec __user *timeout);\n366 long sys_accept4(int, struct sockaddr __user *, int __user *, int);\n367 long sys_fanotify_init(unsigned int flags, unsigned int event_f_flags);\n368 long sys_fanotify_mark(int fanotify_fd, unsigned int flags, u64 mask, int fd, const char __user *pathname);\n369 long sys_prlimit64(pid_t pid, unsigned int resource, const struct rlimit64 __user *new_rlim, struct rlimit64 __user *old_rlim);\n370 long sys_name_to_handle_at(int dfd, const char __user *name, struct file_handle __user *handle, int __user *mnt_id, int flag);\n371 long sys_open_by_handle_at(int mountdirfd, struct file_handle __user *handle, int flags);\n372 long sys_clock_adjtime(clockid_t which_clock, struct timex __user *tx);\n373 long sys_syncfs(int fd);\n374 long sys_sendmmsg(int fd, struct mmsghdr __user *msg, unsigned int vlen, unsigned flags);\n375 long sys_setns(int fd, int nstype);\n376 long sys_process_vm_readv(pid_t pid, const struct iovec __user *lvec, unsigned long liovcnt, const struct iovec __user *rvec, unsigned long riovcnt, unsigned long flags);\n377 long sys_process_vm_writev(pid_t pid, const struct iovec __user *lvec, unsigned long liovcnt, const struct iovec __user *rvec, unsigned long riovcnt, unsigned long flags);\n378 long sys_kcmp(pid_t pid1, pid_t pid2, int type, unsigned long idx1, unsigned long idx2);\n379 long sys_finit_module(int fd, const char __user *uargs, int flags);\n380 long sys_sched_setattr(pid_t pid, struct sched_attr __user *attr, unsigned int flags);\n381 long sys_sched_getattr(pid_t pid, struct sched_attr __user *attr, unsigned int size, unsigned int flags);\n382 long sys_renameat2(int olddfd, const char __user *oldname, int newdfd, const char __user *newname, unsigned int flags);\n383 long sys_seccomp(unsigned int op, unsigned int flags, const char __user *uargs);\n384 long sys_getrandom(char __user *buf, size_t count, unsigned int flags);\n385 long sys_memfd_create(const char __user *uname_ptr, unsigned int flags);\n386 long sys_bpf(int cmd, union bpf_attr *attr, unsigned int size);\n387 long sys_execveat(int dfd, const char __user *filename, const char __user *const __user *argv, const char __user *const __user *envp, int flags);\n388 long sys_userfaultfd(int flags);\n389 long sys_membarrier(int cmd, int flags);\n390 long sys_mlock2(unsigned long start, size_t len, int flags);\n397 long sys_statx(int dfd, const char __user *path, unsigned flags, unsigned mask, struct statx __user *buffer);\n983041 long ARM_breakpoint(void);\n983042 long ARM_cacheflush(unsigned long start, unsigned long end, unsigned long flags);\n983043 long ARM_user26_mode(void);\n983044 long ARM_usr32_mode(void);\n983045 long ARM_set_tls(unsigned long arg);\n```\n\n----------------------------------------\n\nTITLE: Windows NT Resource and Transaction Management API Functions in C\nDESCRIPTION: Function declarations for Windows NT native API calls related to transaction and resource management. These system calls provide support for transactional operations, enlistments, and resource management.\nSOURCE: https://github.com/panda-re/panda-ng/blob/main/plugins/syscalls2/generated-in/windows_8sp0_x86_prototypes.txt#_snippet_14\n\nLANGUAGE: C\nCODE:\n```\nNTSTATUS NtCreateResourceManager (PHANDLE ResourceManagerHandle, ACCESS_MASK DesiredAccess, HANDLE TmHandle, LPGUID RmGuid, POBJECT_ATTRIBUTES ObjectAttributes, ULONG CreateOptions, PUNICODE_STRING Description);\nNTSTATUS NtCreateEnlistment (PHANDLE EnlistmentHandle, ACCESS_MASK DesiredAccess, HANDLE ResourceManagerHandle, HANDLE TransactionHandle, POBJECT_ATTRIBUTES ObjectAttributes, ULONG CreateOptions, NOTIFICATION_MASK NotificationMask, PVOID EnlistmentKey);\nNTSTATUS NtCommitTransaction (HANDLE TransactionHandle, BOOLEAN Wait);\nNTSTATUS NtCommitEnlistment (HANDLE EnlistmentHandle, PLARGE_INTEGER TmVirtualClock);\nNTSTATUS NtCommitComplete (HANDLE EnlistmentHandle, PLARGE_INTEGER TmVirtualClock);\n```\n\n----------------------------------------\n\nTITLE: Declaring Windows NT Native API Functions for System Operations\nDESCRIPTION: A comprehensive collection of Windows NT native API function declarations (NtXxx functions) used for system-level programming. These functions provide access to various system capabilities including process management, file operations, registry access, and transaction management, requiring appropriate access rights and privilege levels.\nSOURCE: https://github.com/panda-re/panda-ng/blob/main/plugins/syscalls2/generated-in/windows_8sp0_x64_prototypes.txt#_snippet_3\n\nLANGUAGE: C\nCODE:\n```\nNTSTATUS NtGetMUIRegistryInfo (ULONG Flags, PULONG DataSize, PVOID Data);\nNTSTATUS NtGetNextProcess (HANDLE ProcessHandle, ACCESS_MASK DesiredAccess, ULONG HandleAttributes, ULONG Flags, PHANDLE NewProcessHandle);\nNTSTATUS NtGetNextThread (HANDLE ProcessHandle, HANDLE ThreadHandle, ACCESS_MASK DesiredAccess, ULONG HandleAttributes, ULONG Flags, PHANDLE NewThreadHandle);\nNTSTATUS NtGetNlsSectionPtr (ULONG SectionType, ULONG SectionData, PVOID ContextData, PVOID *SectionPointer, PULONG SectionSize);\nNTSTATUS NtGetNotificationResourceManager (HANDLE ResourceManagerHandle, PTRANSACTION_NOTIFICATION TransactionNotification, ULONG NotificationLength, PLARGE_INTEGER Timeout, PULONG ReturnLength, ULONG Asynchronous, ULONG_PTR AsynchronousContext);\nNTSTATUS NtGetWriteWatch (HANDLE ProcessHandle, ULONG Flags, PVOID BaseAddress, SIZE_T RegionSize, PVOID *UserAddressArray, PULONG_PTR EntriesInUserAddressArray, PULONG Granularity);\nNTSTATUS NtImpersonateAnonymousToken (HANDLE ThreadHandle);\nNTSTATUS NtImpersonateThread (HANDLE ServerThreadHandle, HANDLE ClientThreadHandle, PSECURITY_QUALITY_OF_SERVICE SecurityQos);\nNTSTATUS NtInitializeNlsFiles (PVOID *BaseAddress, PLCID DefaultLocaleId, PLARGE_INTEGER DefaultCasingTableSize);\nNTSTATUS NtInitializeRegistry (USHORT BootCondition);\nNTSTATUS NtInitiatePowerAction (POWER_ACTION SystemAction, SYSTEM_POWER_STATE MinSystemState, ULONG Flags, BOOLEAN Asynchronous);\nBOOLEAN NtIsSystemResumeAutomatic ();\nNTSTATUS NtIsUILanguageComitted ();\nNTSTATUS NtListenPort (HANDLE PortHandle, PPORT_MESSAGE ConnectionRequest);\nNTSTATUS NtLoadDriver (PUNICODE_STRING DriverServiceName);\nNTSTATUS NtLoadKey (POBJECT_ATTRIBUTES TargetKey, POBJECT_ATTRIBUTES SourceFile);\nNTSTATUS NtLoadKey2 (POBJECT_ATTRIBUTES TargetKey, POBJECT_ATTRIBUTES SourceFile, ULONG Flags);\nNTSTATUS NtLoadKeyEx (POBJECT_ATTRIBUTES TargetKey, POBJECT_ATTRIBUTES SourceFile, ULONG Flags, HANDLE TrustClassKey );\nNTSTATUS NtLockFile (HANDLE FileHandle, HANDLE Event, PIO_APC_ROUTINE ApcRoutine, PVOID ApcContext, PIO_STATUS_BLOCK IoStatusBlock, PLARGE_INTEGER ByteOffset, PLARGE_INTEGER Length, ULONG Key, BOOLEAN FailImmediately, BOOLEAN ExclusiveLock);\nNTSTATUS NtLockProductActivationKeys (ULONG *pPrivateVer, ULONG *pSafeMode);\nNTSTATUS NtLockRegistryKey (HANDLE KeyHandle);\nNTSTATUS NtLockVirtualMemory (HANDLE ProcessHandle, PVOID *BaseAddress, PSIZE_T RegionSize, ULONG MapType);\nNTSTATUS NtMakePermanentObject (HANDLE Handle);\nNTSTATUS NtMakeTemporaryObject (HANDLE Handle);\nNTSTATUS NtMapCMFModule (ULONG What, ULONG Index, PULONG CacheIndexOut, PULONG CacheFlagsOut, PULONG ViewSizeOut, PVOID *BaseAddress);\nNTSTATUS NtMapUserPhysicalPages (PVOID VirtualAddress, ULONG_PTR NumberOfPages, PULONG_PTR UserPfnArray);\nNTSTATUS NtModifyBootEntry (PBOOT_ENTRY BootEntry);\nNTSTATUS NtModifyDriverEntry (PEFI_DRIVER_ENTRY DriverEntry);\nNTSTATUS NtNotifyChangeDirectoryFile (HANDLE FileHandle, HANDLE Event, PIO_APC_ROUTINE ApcRoutine, PVOID ApcContext, PIO_STATUS_BLOCK IoStatusBlock, PVOID Buffer, ULONG Length, ULONG CompletionFilter, BOOLEAN WatchTree);\nNTSTATUS NtNotifyChangeKey (HANDLE KeyHandle, HANDLE Event, PIO_APC_ROUTINE ApcRoutine, PVOID ApcContext, PIO_STATUS_BLOCK IoStatusBlock, ULONG CompletionFilter, BOOLEAN WatchTree, PVOID Buffer, ULONG BufferSize, BOOLEAN Asynchronous);\nNTSTATUS NtNotifyChangeMultipleKeys (HANDLE MasterKeyHandle, ULONG Count, OBJECT_ATTRIBUTES SlaveObjects[], HANDLE Event, PIO_APC_ROUTINE ApcRoutine, PVOID ApcContext, PIO_STATUS_BLOCK IoStatusBlock, ULONG CompletionFilter, BOOLEAN WatchTree, PVOID Buffer, ULONG BufferSize, BOOLEAN Asynchronous);\nNTSTATUS NtNotifyChangeSession (HANDLE Session, ULONG IoStateSequence, PVOID Reserved, ULONG Action, IO_SESSION_STATE IoState, IO_SESSION_STATE IoState2, PVOID Buffer, ULONG BufferSize);\nNTSTATUS NtOpenEnlistment (PHANDLE EnlistmentHandle, ACCESS_MASK DesiredAccess, HANDLE ResourceManagerHandle, LPGUID EnlistmentGuid, POBJECT_ATTRIBUTES ObjectAttributes);\nNTSTATUS NtOpenEventPair (PHANDLE EventPairHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes);\nNTSTATUS NtOpenIoCompletion (PHANDLE IoCompletionHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes);\nNTSTATUS NtOpenJobObject (PHANDLE JobHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes);\nNTSTATUS NtOpenKeyEx (PHANDLE KeyHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, ULONG OpenOptions);\nNTSTATUS NtOpenKeyTransacted (PHANDLE KeyHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, HANDLE TransactionHandle);\nNTSTATUS NtOpenKeyTransactedEx (PHANDLE KeyHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, ULONG OpenOptions, HANDLE TransactionHandle);\nNTSTATUS NtOpenKeyedEvent (PHANDLE KeyedEventHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes);\nNTSTATUS NtOpenMutant (PHANDLE MutantHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes);\nNTSTATUS NtOpenObjectAuditAlarm (PUNICODE_STRING SubsystemName, PVOID HandleId, PUNICODE_STRING ObjectTypeName, PUNICODE_STRING ObjectName, PSECURITY_DESCRIPTOR SecurityDescriptor, HANDLE ClientToken, ACCESS_MASK DesiredAccess, ACCESS_MASK GrantedAccess, PPRIVILEGE_SET Privileges, BOOLEAN ObjectCreation, BOOLEAN AccessGranted, PBOOLEAN GenerateOnClose);\nNTSTATUS NtOpenPrivateNamespace (PHANDLE NamespaceHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, PVOID BoundaryDescriptor);\nNTSTATUS NtOpenProcessToken (HANDLE ProcessHandle, ACCESS_MASK DesiredAccess, PHANDLE TokenHandle);\nNTSTATUS NtOpenResourceManager (PHANDLE ResourceManagerHandle, ACCESS_MASK DesiredAccess, HANDLE TmHandle, LPGUID ResourceManagerGuid, POBJECT_ATTRIBUTES ObjectAttributes);\nNTSTATUS NtOpenSemaphore (PHANDLE SemaphoreHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes);\nNTSTATUS NtOpenSession (PHANDLE SessionHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes);\nNTSTATUS NtOpenSymbolicLinkObject (PHANDLE LinkHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes);\nNTSTATUS NtOpenThread (PHANDLE ThreadHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, PCLIENT_ID ClientId);\nNTSTATUS NtOpenTimer (PHANDLE TimerHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes);\nNTSTATUS NtOpenTransaction (PHANDLE TransactionHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, LPGUID Uow, HANDLE TmHandle);\nNTSTATUS NtOpenTransactionManager (PHANDLE TmHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, PUNICODE_STRING LogFileName, LPGUID TmIdentity, ULONG OpenOptions);\nNTSTATUS NtPlugPlayControl (PLUGPLAY_CONTROL_CLASS PnPControlClass, PVOID PnPControlData, ULONG PnPControlDataLength);\nNTSTATUS NtPrePrepareComplete (HANDLE EnlistmentHandle, PLARGE_INTEGER TmVirtualClock);\nNTSTATUS NtPrePrepareEnlistment (HANDLE EnlistmentHandle, PLARGE_INTEGER TmVirtualClock);\nNTSTATUS NtPrepareComplete (HANDLE EnlistmentHandle, PLARGE_INTEGER TmVirtualClock);\nNTSTATUS NtPrepareEnlistment (HANDLE EnlistmentHandle, PLARGE_INTEGER TmVirtualClock);\nNTSTATUS NtPrivilegeCheck (HANDLE ClientToken, PPRIVILEGE_SET RequiredPrivileges, PBOOLEAN Result);\nNTSTATUS NtPrivilegeObjectAuditAlarm (PUNICODE_STRING SubsystemName, PVOID HandleId, HANDLE ClientToken, ACCESS_MASK DesiredAccess, PPRIVILEGE_SET Privileges, BOOLEAN AccessGranted);\nNTSTATUS NtPrivilegedServiceAuditAlarm (PUNICODE_STRING SubsystemName, PUNICODE_STRING ServiceName, HANDLE ClientToken, PPRIVILEGE_SET Privileges, BOOLEAN AccessGranted);\nNTSTATUS NtPropagationComplete (HANDLE ResourceManagerHandle, ULONG RequestCookie, ULONG BufferLength, PVOID Buffer);\nNTSTATUS NtPropagationFailed (HANDLE ResourceManagerHandle, ULONG RequestCookie, NTSTATUS PropStatus);\nNTSTATUS NtPulseEvent (HANDLE EventHandle, PLONG PreviousState);\nNTSTATUS NtQueryBootEntryOrder (PULONG Ids, PULONG Count);\nNTSTATUS NtQueryBootOptions (PBOOT_OPTIONS BootOptions, PULONG BootOptionsLength);\nNTSTATUS NtQueryDebugFilterState (ULONG ComponentId, ULONG Level);\nNTSTATUS NtQueryDirectoryObject (HANDLE DirectoryHandle, PVOID Buffer, ULONG Length, BOOLEAN ReturnSingleEntry, BOOLEAN RestartScan, PULONG Context, PULONG ReturnLength);\nNTSTATUS NtQueryDriverEntryOrder (PULONG Ids, PULONG Count);\nNTSTATUS NtQueryEaFile (HANDLE FileHandle, PIO_STATUS_BLOCK IoStatusBlock, PVOID Buffer, ULONG Length, BOOLEAN ReturnSingleEntry, PVOID EaList, ULONG EaListLength, PULONG EaIndex, BOOLEAN RestartScan);\nNTSTATUS NtQueryFullAttributesFile (POBJECT_ATTRIBUTES ObjectAttributes, PFILE_NETWORK_OPEN_INFORMATION FileInformation);\nNTSTATUS NtQueryInformationAtom (RTL_ATOM Atom, ATOM_INFORMATION_CLASS InformationClass, PVOID AtomInformation, ULONG AtomInformationLength, PULONG ReturnLength);\nNTSTATUS NtQueryInformationEnlistment (HANDLE EnlistmentHandle, ENLISTMENT_INFORMATION_CLASS EnlistmentInformationClass, PVOID EnlistmentInformation, ULONG EnlistmentInformationLength, PULONG ReturnLength);\nNTSTATUS NtQueryInformationJobObject (HANDLE JobHandle, JOBOBJECTINFOCLASS JobObjectInformationClass, PVOID JobObjectInformation, ULONG JobObjectInformationLength, PULONG ReturnLength);\nNTSTATUS NtQueryInformationPort (HANDLE PortHandle, PORT_INFORMATION_CLASS PortInformationClass, PVOID PortInformation, ULONG Length, PULONG ReturnLength);\nNTSTATUS NtQueryInformationResourceManager (HANDLE ResourceManagerHandle, RESOURCEMANAGER_INFORMATION_CLASS ResourceManagerInformationClass, PVOID ResourceManagerInformation, ULONG ResourceManagerInformationLength, PULONG ReturnLength);\n```\n\n----------------------------------------\n\nTITLE: Declaring Windows NT Native API Function Prototypes in C/C++ Header\nDESCRIPTION: This snippet provides a sequential block of Windows NT Native API function prototypes in C/C++ header syntax, to be used for defining the interfaces of low-level Windows kernel and user-mode calls. No external dependencies are required beyond Windows NT type definitions (e.g., NTSTATUS, HANDLE, PVOID), and the prototypes depend on the surrounding environment to provide those types via included headers. Parameters typically involve process, file, and object handles, pointers to complex structures, and return types of NTSTATUS or BOOLEAN; the functions do not contain implementation bodies, serving purely as forward declarations for linking against the NTOS kernel or ntdll. Inputs are generally kernel object handles and pointers to Windows-defined structures, with outputs specified by pointer parameters or NTSTATUS codes.\nSOURCE: https://github.com/panda-re/panda-ng/blob/main/plugins/syscalls2/generated-in/windows_7_x86_prototypes.txt#_snippet_2\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtFreezeTransactions (PLARGE_INTEGER FreezeTimeout, PLARGE_INTEGER ThawTimeout);\nNTSTATUS NtFsControlFile (HANDLE FileHandle, HANDLE Event, PIO_APC_ROUTINE ApcRoutine, PVOID ApcContext, PIO_STATUS_BLOCK IoStatusBlock, ULONG IoControlCode, PVOID InputBuffer, ULONG InputBufferLength, PVOID OutputBuffer, ULONG OutputBufferLength);\nNTSTATUS NtGetContextThread (HANDLE ThreadHandle, PCONTEXT ThreadContext);\nULONG NtGetCurrentProcessorNumber ();\nNTSTATUS NtGetDevicePowerState (HANDLE Device, DEVICE_POWER_STATE *State);\nNTSTATUS NtGetMUIRegistryInfo (ULONG Flags, PULONG DataSize, PVOID Data);\nNTSTATUS NtGetNextProcess (HANDLE ProcessHandle, ACCESS_MASK DesiredAccess, ULONG HandleAttributes, ULONG Flags, PHANDLE NewProcessHandle);\nNTSTATUS NtGetNextThread (HANDLE ProcessHandle, HANDLE ThreadHandle, ACCESS_MASK DesiredAccess, ULONG HandleAttributes, ULONG Flags, PHANDLE NewThreadHandle);\nNTSTATUS NtGetNlsSectionPtr (ULONG SectionType, ULONG SectionData, PVOID ContextData, PVOID *SectionPointer, PULONG SectionSize);\nNTSTATUS NtGetNotificationResourceManager (HANDLE ResourceManagerHandle, PTRANSACTION_NOTIFICATION TransactionNotification, ULONG NotificationLength, PLARGE_INTEGER Timeout, PULONG ReturnLength, ULONG Asynchronous, ULONG_PTR AsynchronousContext);\nNTSTATUS NtGetPlugPlayEvent (HANDLE EventHandle, PVOID Context, PPLUGPLAY_EVENT_BLOCK EventBlock, ULONG EventBufferSize);\nNTSTATUS NtGetWriteWatch (HANDLE ProcessHandle, ULONG Flags, PVOID BaseAddress, SIZE_T RegionSize, PVOID *UserAddressArray, PULONG_PTR EntriesInUserAddressArray, PULONG Granularity);\nNTSTATUS NtImpersonateAnonymousToken (HANDLE ThreadHandle);\nNTSTATUS NtImpersonateClientOfPort (HANDLE PortHandle, PPORT_MESSAGE Message);\nNTSTATUS NtImpersonateThread (HANDLE ServerThreadHandle, HANDLE ClientThreadHandle, PSECURITY_QUALITY_OF_SERVICE SecurityQos);\nNTSTATUS NtInitializeNlsFiles (PVOID *BaseAddress, PLCID DefaultLocaleId, PLARGE_INTEGER DefaultCasingTableSize);\nNTSTATUS NtInitializeRegistry (USHORT BootCondition);\nNTSTATUS NtInitiatePowerAction (POWER_ACTION SystemAction, SYSTEM_POWER_STATE MinSystemState, ULONG Flags, BOOLEAN Asynchronous);\nNTSTATUS NtIsProcessInJob (HANDLE ProcessHandle, HANDLE JobHandle);\nBOOLEAN NtIsSystemResumeAutomatic ();\nNTSTATUS NtIsUILanguageComitted ();\nNTSTATUS NtListenPort (HANDLE PortHandle, PPORT_MESSAGE ConnectionRequest);\nNTSTATUS NtLoadDriver (PUNICODE_STRING DriverServiceName);\nNTSTATUS NtLoadKey (POBJECT_ATTRIBUTES TargetKey, POBJECT_ATTRIBUTES SourceFile);\nNTSTATUS NtLoadKey2 (POBJECT_ATTRIBUTES TargetKey, POBJECT_ATTRIBUTES SourceFile, ULONG Flags);\nNTSTATUS NtLoadKeyEx (POBJECT_ATTRIBUTES TargetKey, POBJECT_ATTRIBUTES SourceFile, ULONG Flags, HANDLE TrustClassKey );\nNTSTATUS NtLockFile (HANDLE FileHandle, HANDLE Event, PIO_APC_ROUTINE ApcRoutine, PVOID ApcContext, PIO_STATUS_BLOCK IoStatusBlock, PLARGE_INTEGER ByteOffset, PLARGE_INTEGER Length, ULONG Key, BOOLEAN FailImmediately, BOOLEAN ExclusiveLock);\nNTSTATUS NtLockProductActivationKeys (ULONG *pPrivateVer, ULONG *pSafeMode);\nNTSTATUS NtLockRegistryKey (HANDLE KeyHandle);\nNTSTATUS NtLockVirtualMemory (HANDLE ProcessHandle, PVOID *BaseAddress, PSIZE_T RegionSize, ULONG MapType);\nNTSTATUS NtMakePermanentObject (HANDLE Handle);\nNTSTATUS NtMakeTemporaryObject (HANDLE Handle);\nNTSTATUS NtMapCMFModule (ULONG What, ULONG Index, PULONG CacheIndexOut, PULONG CacheFlagsOut, PULONG ViewSizeOut, PVOID *BaseAddress);\nNTSTATUS NtMapUserPhysicalPages (PVOID VirtualAddress, ULONG_PTR NumberOfPages, PULONG_PTR UserPfnArray);\nNTSTATUS NtMapUserPhysicalPagesScatter (PVOID *VirtualAddresses, ULONG_PTR NumberOfPages, PULONG_PTR UserPfnArray);\nNTSTATUS NtMapViewOfSection (HANDLE SectionHandle, HANDLE ProcessHandle, PVOID *BaseAddress, ULONG_PTR ZeroBits, SIZE_T CommitSize, PLARGE_INTEGER SectionOffset, PSIZE_T ViewSize, SECTION_INHERIT InheritDisposition, ULONG AllocationType, WIN32_PROTECTION_MASK Win32Protect);\nNTSTATUS NtModifyBootEntry (PBOOT_ENTRY BootEntry);\nNTSTATUS NtModifyDriverEntry (PEFI_DRIVER_ENTRY DriverEntry);\nNTSTATUS NtNotifyChangeDirectoryFile (HANDLE FileHandle, HANDLE Event, PIO_APC_ROUTINE ApcRoutine, PVOID ApcContext, PIO_STATUS_BLOCK IoStatusBlock, PVOID Buffer, ULONG Length, ULONG CompletionFilter, BOOLEAN WatchTree);\nNTSTATUS NtNotifyChangeKey (HANDLE KeyHandle, HANDLE Event, PIO_APC_ROUTINE ApcRoutine, PVOID ApcContext, PIO_STATUS_BLOCK IoStatusBlock, ULONG CompletionFilter, BOOLEAN WatchTree, PVOID Buffer, ULONG BufferSize, BOOLEAN Asynchronous);\nNTSTATUS NtNotifyChangeMultipleKeys (HANDLE MasterKeyHandle, ULONG Count, OBJECT_ATTRIBUTES SlaveObjects[], HANDLE Event, PIO_APC_ROUTINE ApcRoutine, PVOID ApcContext, PIO_STATUS_BLOCK IoStatusBlock, ULONG CompletionFilter, BOOLEAN WatchTree, PVOID Buffer, ULONG BufferSize, BOOLEAN Asynchronous);\nNTSTATUS NtNotifyChangeSession (HANDLE Session, ULONG IoStateSequence, PVOID Reserved, ULONG Action, IO_SESSION_STATE IoState, IO_SESSION_STATE IoState2, PVOID Buffer, ULONG BufferSize);\nNTSTATUS NtOpenDirectoryObject (PHANDLE DirectoryHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes);\nNTSTATUS NtOpenEnlistment (PHANDLE EnlistmentHandle, ACCESS_MASK DesiredAccess, HANDLE ResourceManagerHandle, LPGUID EnlistmentGuid, POBJECT_ATTRIBUTES ObjectAttributes);\nNTSTATUS NtOpenEvent (PHANDLE EventHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes);\nNTSTATUS NtOpenEventPair (PHANDLE EventPairHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes);\nNTSTATUS NtOpenFile (PHANDLE FileHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, PIO_STATUS_BLOCK IoStatusBlock, ULONG ShareAccess, ULONG OpenOptions);\nNTSTATUS NtOpenIoCompletion (PHANDLE IoCompletionHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes);\nNTSTATUS NtOpenJobObject (PHANDLE JobHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes);\nNTSTATUS NtOpenKey (PHANDLE KeyHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes);\nNTSTATUS NtOpenKeyEx (PHANDLE KeyHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, ULONG OpenOptions);\nNTSTATUS NtOpenKeyedEvent (PHANDLE KeyedEventHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes);\nNTSTATUS NtOpenKeyTransacted (PHANDLE KeyHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, HANDLE TransactionHandle);\nNTSTATUS NtOpenKeyTransactedEx (PHANDLE KeyHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, ULONG OpenOptions, HANDLE TransactionHandle);\nNTSTATUS NtOpenMutant (PHANDLE MutantHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes);\nNTSTATUS NtOpenObjectAuditAlarm (PUNICODE_STRING SubsystemName, PVOID HandleId, PUNICODE_STRING ObjectTypeName, PUNICODE_STRING ObjectName, PSECURITY_DESCRIPTOR SecurityDescriptor, HANDLE ClientToken, ACCESS_MASK DesiredAccess, ACCESS_MASK GrantedAccess, PPRIVILEGE_SET Privileges, BOOLEAN ObjectCreation, BOOLEAN AccessGranted, PBOOLEAN GenerateOnClose);\nNTSTATUS NtOpenPrivateNamespace (PHANDLE NamespaceHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, PVOID BoundaryDescriptor);\nNTSTATUS NtOpenProcess (PHANDLE ProcessHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, PCLIENT_ID ClientId);\nNTSTATUS NtOpenProcessToken (HANDLE ProcessHandle, ACCESS_MASK DesiredAccess, PHANDLE TokenHandle);\nNTSTATUS NtOpenProcessTokenEx (HANDLE ProcessHandle, ACCESS_MASK DesiredAccess, ULONG HandleAttributes, PHANDLE TokenHandle);\nNTSTATUS NtOpenResourceManager (PHANDLE ResourceManagerHandle, ACCESS_MASK DesiredAccess, HANDLE TmHandle, LPGUID ResourceManagerGuid, POBJECT_ATTRIBUTES ObjectAttributes);\nNTSTATUS NtOpenSection (PHANDLE SectionHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes);\nNTSTATUS NtOpenSemaphore (PHANDLE SemaphoreHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes);\nNTSTATUS NtOpenSession (PHANDLE SessionHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes);\nNTSTATUS NtOpenSymbolicLinkObject (PHANDLE LinkHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes);\nNTSTATUS NtOpenThread (PHANDLE ThreadHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, PCLIENT_ID ClientId);\nNTSTATUS NtOpenThreadToken (HANDLE ThreadHandle, ACCESS_MASK DesiredAccess, BOOLEAN OpenAsSelf, PHANDLE TokenHandle);\nNTSTATUS NtOpenThreadTokenEx (HANDLE ThreadHandle, ACCESS_MASK DesiredAccess, BOOLEAN OpenAsSelf, ULONG HandleAttributes, PHANDLE TokenHandle);\nNTSTATUS NtOpenTimer (PHANDLE TimerHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes);\nNTSTATUS NtOpenTransaction (PHANDLE TransactionHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, LPGUID Uow, HANDLE TmHandle);\nNTSTATUS NtOpenTransactionManager (PHANDLE TmHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, PUNICODE_STRING LogFileName, LPGUID TmIdentity, ULONG OpenOptions);\nNTSTATUS NtPlugPlayControl (PLUGPLAY_CONTROL_CLASS PnPControlClass, PVOID PnPControlData, ULONG PnPControlDataLength);\nNTSTATUS NtPowerInformation (POWER_INFORMATION_LEVEL InformationLevel, PVOID InputBuffer, ULONG InputBufferLength, PVOID OutputBuffer, ULONG OutputBufferLength);\nNTSTATUS NtPrepareComplete (HANDLE EnlistmentHandle, PLARGE_INTEGER TmVirtualClock);\nNTSTATUS NtPrepareEnlistment (HANDLE EnlistmentHandle, PLARGE_INTEGER TmVirtualClock);\nNTSTATUS NtPrePrepareComplete (HANDLE EnlistmentHandle, PLARGE_INTEGER TmVirtualClock);\nNTSTATUS NtPrePrepareEnlistment (HANDLE EnlistmentHandle, PLARGE_INTEGER TmVirtualClock);\n```\n\n----------------------------------------\n\nTITLE: Declaring Linux System Call Prototypes - C\nDESCRIPTION: This snippet consists of multiple C function prototypes for Linux system calls, declaring their function signatures for use in kernel code and low-level components. No external dependencies are required other than standard kernel headers; user-space pointer types are appropriately annotated (e.g., __user). Each declaration defines parameter types, pointer qualifiers, and order for proper interfacing between user and kernel space. These prototypes do not implement functionality but provide formal definitions of the syscall entry points, with varying numbers and types of arguments according to each syscall's requirements.\nSOURCE: https://github.com/panda-re/panda-ng/blob/main/plugins/syscalls2/generated-in/linux_x86_prototypes.txt#_snippet_2\n\nLANGUAGE: C\nCODE:\n```\n307 long sys_faccessat(int dfd, const char __user *filename, int mode);\n308 long sys_pselect6(int, fd_set __user *, fd_set __user *, fd_set __user *, struct timespec __user *, void __user *);\n309 long sys_ppoll(struct pollfd __user *, unsigned int, struct timespec __user *, const sigset_t __user *, size_t);\n310 long sys_unshare(unsigned long unshare_flags);\n311 long sys_set_robust_list(struct robust_list_head __user *head, size_t len);\n312 long sys_get_robust_list(int pid, struct robust_list_head __user * __user *head_ptr, size_t __user *len_ptr);\n313 long sys_splice(int fd_in, loff_t __user *off_in, int fd_out, loff_t __user *off_out, size_t len, unsigned int flags);\n314 long sys_sync_file_range(int fd, loff_t offset, loff_t nbytes, unsigned int flags);\n315 long sys_tee(int fdin, int fdout, size_t len, unsigned int flags);\n316 long sys_vmsplice(int fd, const struct iovec __user *iov, unsigned long nr_segs, unsigned int flags);\n317 long sys_move_pages(pid_t pid, unsigned long nr_pages, const void __user * __user *pages, const int __user *nodes, int __user *status, int flags);\n318 long sys_getcpu(unsigned __user *cpu, unsigned __user *node, struct getcpu_cache __user *cache);\n319 long sys_epoll_pwait(int epfd, struct epoll_event __user *events, int maxevents, int timeout, const sigset_t __user *sigmask, size_t sigsetsize);\n320 long sys_utimensat(int dfd, const char __user *filename, struct timespec __user *utimes, int flags);\n321 long sys_signalfd(int ufd, sigset_t __user *user_mask, size_t sizemask);\n322 long sys_timerfd_create(int clockid, int flags);\n323 long sys_eventfd(unsigned int count);\n324 long sys_fallocate(int fd, int mode, loff_t offset, loff_t len);\n325 long sys_timerfd_settime(int ufd, int flags, const struct itimerspec __user *utmr, struct itimerspec __user *otmr);\n326 long sys_timerfd_gettime(int ufd, struct itimerspec __user *otmr);\n327 long sys_signalfd4(int ufd, sigset_t __user *user_mask, size_t sizemask, int flags);\n328 long sys_eventfd2(unsigned int count, int flags);\n329 long sys_epoll_create1(int flags);\n330 long sys_dup3(unsigned int oldfd, unsigned int newfd, int flags);\n331 long sys_pipe2(int __user *fildes, int flags);\n332 long sys_inotify_init1(int flags);\n333 long sys_preadv(unsigned long fd, const struct iovec __user *vec, unsigned long vlen, unsigned long pos_l, unsigned long pos_h);\n334 long sys_pwritev(unsigned long fd, const struct iovec __user *vec, unsigned long vlen, unsigned long pos_l, unsigned long pos_h);\n335 long sys_rt_tgsigqueueinfo(pid_t tgid, pid_t pid, int sig, siginfo_t __user *uinfo);\n336 long sys_perf_event_open(struct perf_event_attr __user *attr_uptr, pid_t pid, int cpu, int group_fd, unsigned long flags);\n337 long sys_recvmmsg(int fd, struct mmsghdr __user *msg, unsigned int vlen, unsigned flags, struct timespec __user *timeout);\n338 long sys_fanotify_init(unsigned int flags, unsigned int event_f_flags);\n339 long sys_fanotify_mark(int fanotify_fd, unsigned int flags, u64 mask, int fd, const char __user *pathname);\n340 long sys_prlimit64(pid_t pid, unsigned int resource, const struct rlimit64 __user *new_rlim, struct rlimit64 __user *old_rlim);\n341 long sys_name_to_handle_at(int dfd, const char __user *name, struct file_handle __user *handle, int __user *mnt_id, int flag);\n342 long sys_open_by_handle_at(int mountdirfd, struct file_handle __user *handle, int flags);\n343 long sys_clock_adjtime(clockid_t which_clock, struct timex __user *tx);\n344 long sys_syncfs(int fd);\n345 long sys_sendmmsg(int fd, struct mmsghdr __user *msg, unsigned int vlen, unsigned flags);\n346 long sys_setns(int fd, int nstype);\n347 long sys_process_vm_readv(pid_t pid, const struct iovec __user *lvec, unsigned long liovcnt, const struct iovec __user *rvec, unsigned long riovcnt, unsigned long flags);\n348 long sys_process_vm_writev(pid_t pid, const struct iovec __user *lvec, unsigned long liovcnt, const struct iovec __user *rvec, unsigned long riovcnt, unsigned long flags);\n349 long sys_kcmp(pid_t pid1, pid_t pid2, int type, unsigned long idx1, unsigned long idx2);\n350 long sys_finit_module(int fd, const char __user *uargs, int flags);\n351 long sys_sched_setattr(pid_t pid, struct sched_attr __user *attr, unsigned int flags);\n352 long sys_sched_getattr(pid_t pid, struct sched_attr __user *attr, unsigned int size, unsigned int flags);\n353 long sys_renameat2(int olddfd, const char __user *oldname, int newdfd, const char __user *newname, unsigned int flags);\n354 long sys_seccomp(unsigned int op, unsigned int flags, const char __user *uargs);\n355 long sys_getrandom(char __user *buf, size_t count, unsigned int flags);\n356 long sys_memfd_create(const char __user *uname_ptr, unsigned int flags);\n357 long sys_bpf(int cmd, union bpf_attr *attr, unsigned int size);\n358 long sys_execveat(int dfd, const char __user *filename, const char __user *const __user *argv, const char __user *const __user *envp, int flags);\n359 long sys_socket(int, int, int);\n360 long sys_socketpair(int, int, int, int __user *);\n361 long sys_bind(int, struct sockaddr __user *, int);\n362 long sys_connect(int, struct sockaddr __user *, int);\n363 long sys_listen(int, int);\n364 long sys_accept4(int, struct sockaddr __user *, int __user *, int);\n365 long sys_getsockopt(int fd, int level, int optname, char __user *optval, int __user *optlen);\n366 long sys_setsockopt(int fd, int level, int optname, char __user *optval, int optlen);\n367 long sys_getsockname(int, struct sockaddr __user *, int __user *);\n368 long sys_getpeername(int, struct sockaddr __user *, int __user *);\n369 long sys_sendto(int, void __user *, size_t, unsigned, struct sockaddr __user *, int);\n370 long sys_sendmsg(int fd, struct user_msghdr __user *msg, unsigned flags);\n371 long sys_recvfrom(int, void __user *, size_t, unsigned, struct sockaddr __user *, int __user *);\n372 long sys_recvmsg(int fd, struct user_msghdr __user *msg, unsigned flags);\n373 long sys_shutdown(int, int);\n374 long sys_userfaultfd(int flags);\n375 long sys_membarrier(int cmd, int flags);\n376 long sys_mlock2(unsigned long start, size_t len, int flags);\n377 long sys_copy_file_range(int fd_in, loff_t __user *off_in, int fd_out, loff_t __user *off_out, size_t len, unsigned int flags);\n378 long sys_preadv2(unsigned long fd, const struct iovec __user *vec, unsigned long vlen, unsigned long pos_l, unsigned long pos_h, rwf_t flags);\n379 long sys_pwritev2(unsigned long fd, const struct iovec __user *vec, unsigned long vlen, unsigned long pos_l, unsigned long pos_h, rwf_t flags);\n380 long sys_pkey_mprotect(unsigned long start, size_t len, unsigned long prot, int pkey);\n381 long sys_pkey_alloc(unsigned long flags, unsigned long init_val);\n382 long sys_pkey_free(int pkey);\n383 long sys_statx(int dfd, const char __user *path, unsigned flags, unsigned mask, struct statx __user *buffer);\n384 long sys_arch_prctl(int, unsigned long);\n\n```\n\n----------------------------------------\n\nTITLE: Windows NT Port, I/O and Cancelation API Functions in C\nDESCRIPTION: Function declarations for Windows NT native API calls related to port and I/O operations. These system calls manage communication ports, connect processes through ports, and provide I/O cancelation capabilities.\nSOURCE: https://github.com/panda-re/panda-ng/blob/main/plugins/syscalls2/generated-in/windows_8sp0_x86_prototypes.txt#_snippet_15\n\nLANGUAGE: C\nCODE:\n```\nNTSTATUS NtCreatePort (PHANDLE PortHandle, POBJECT_ATTRIBUTES ObjectAttributes, ULONG MaxConnectionInfoLength, ULONG MaxMessageLength, ULONG MaxPoolUsage);\nNTSTATUS NtCreatePrivateNamespace (PHANDLE NamespaceHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, PVOID BoundaryDescriptor);\nNTSTATUS NtConnectPort (PHANDLE PortHandle, PUNICODE_STRING PortName, PSECURITY_QUALITY_OF_SERVICE SecurityQos, PPORT_VIEW ClientView, PREMOTE_PORT_VIEW ServerView, PULONG MaxMessageLength, PVOID ConnectionInformation, PULONG ConnectionInformationLength);\nNTSTATUS NtCompleteConnectPort (HANDLE PortHandle);\nNTSTATUS NtCancelIoFile (HANDLE FileHandle, PIO_STATUS_BLOCK IoStatusBlock);\nNTSTATUS NtCancelIoFileEx (HANDLE FileHandle, PIO_STATUS_BLOCK IoRequestToCancel, PIO_STATUS_BLOCK IoStatusBlock);\nNTSTATUS NtCancelSynchronousIoFile (HANDLE ThreadHandle, PIO_STATUS_BLOCK IoRequestToCancel, PIO_STATUS_BLOCK IoStatusBlock);\n```\n\n----------------------------------------\n\nTITLE: Declaring Windows NT Native API Function Prototypes in C\nDESCRIPTION: A collection of Windows NT native API function declarations (syscalls) that define the interface between user-mode applications and the Windows kernel. These function signatures show parameter types and return values for various system operations.\nSOURCE: https://github.com/panda-re/panda-ng/blob/main/plugins/syscalls2/generated-in/windows_8sp0_x64_prototypes.txt#_snippet_1\n\nLANGUAGE: C\nCODE:\n```\nNTSTATUS NtCreateEvent (PHANDLE EventHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, EVENT_TYPE EventType, BOOLEAN InitialState);\nNTSTATUS NtQueryVolumeInformationFile (HANDLE FileHandle, PIO_STATUS_BLOCK IoStatusBlock, PVOID FsInformation, ULONG Length, FS_INFORMATION_CLASS FsInformationClass);\nNTSTATUS NtCreateSection (PHANDLE SectionHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, PLARGE_INTEGER MaximumSize, ULONG SectionPageProtection, ULONG AllocationAttributes, HANDLE FileHandle);\nNTSTATUS NtFlushBuffersFile (HANDLE FileHandle, PIO_STATUS_BLOCK IoStatusBlock);\nNTSTATUS NtApphelpCacheControl (APPHELPCOMMAND type, PVOID buf);\nNTSTATUS NtCreateProcessEx (PHANDLE ProcessHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, HANDLE ParentProcess, ULONG Flags, HANDLE SectionHandle, HANDLE DebugPort, HANDLE ExceptionPort, ULONG JobMemberLevel);\nNTSTATUS NtCreateThread (PHANDLE ThreadHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, HANDLE ProcessHandle, PCLIENT_ID ClientId, PCONTEXT ThreadContext, PINITIAL_TEB InitialTeb, BOOLEAN CreateSuspended);\nNTSTATUS NtIsProcessInJob (HANDLE ProcessHandle, HANDLE JobHandle);\nNTSTATUS NtProtectVirtualMemory (HANDLE ProcessHandle, PVOID *BaseAddress, PSIZE_T RegionSize, WIN32_PROTECTION_MASK NewProtectWin32, PULONG OldProtect);\nNTSTATUS NtQuerySection (HANDLE SectionHandle, SECTION_INFORMATION_CLASS SectionInformationClass, PVOID SectionInformation, SIZE_T SectionInformationLength, PSIZE_T ReturnLength);\nNTSTATUS NtResumeThread (HANDLE ThreadHandle, PULONG PreviousSuspendCount);\nNTSTATUS NtTerminateThread (HANDLE ThreadHandle, NTSTATUS ExitStatus);\nNTSTATUS NtReadRequestData (HANDLE PortHandle, PPORT_MESSAGE Message, ULONG DataEntryIndex, PVOID Buffer, SIZE_T BufferSize, PSIZE_T NumberOfBytesRead);\nNTSTATUS NtCreateFile (PHANDLE FileHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, PIO_STATUS_BLOCK IoStatusBlock, PLARGE_INTEGER AllocationSize, ULONG FileAttributes, ULONG ShareAccess, ULONG CreateDisposition, ULONG CreateOptions, PVOID EaBuffer, ULONG EaLength);\nNTSTATUS NtQueryEvent (HANDLE EventHandle, EVENT_INFORMATION_CLASS EventInformationClass, PVOID EventInformation, ULONG EventInformationLength, PULONG ReturnLength);\nNTSTATUS NtWriteRequestData (HANDLE PortHandle, PPORT_MESSAGE Message, ULONG DataEntryIndex, PVOID Buffer, SIZE_T BufferSize, PSIZE_T NumberOfBytesWritten);\nNTSTATUS NtOpenDirectoryObject (PHANDLE DirectoryHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes);\nNTSTATUS NtAccessCheckByTypeAndAuditAlarm (PUNICODE_STRING SubsystemName, PVOID HandleId, PUNICODE_STRING ObjectTypeName, PUNICODE_STRING ObjectName, PSECURITY_DESCRIPTOR SecurityDescriptor, PSID PrincipalSelfSid, ACCESS_MASK DesiredAccess, AUDIT_EVENT_TYPE AuditType, ULONG Flags, POBJECT_TYPE_LIST ObjectTypeList, ULONG ObjectTypeListLength, PGENERIC_MAPPING GenericMapping, BOOLEAN ObjectCreation, PACCESS_MASK GrantedAccess, PNTSTATUS AccessStatus, PBOOLEAN GenerateOnClose);\nNTSTATUS NtWaitForMultipleObjects (ULONG Count, HANDLE Handles[], WAIT_TYPE WaitType, BOOLEAN Alertable, PLARGE_INTEGER Timeout);\nNTSTATUS NtSetInformationObject (HANDLE Handle, OBJECT_INFORMATION_CLASS ObjectInformationClass, PVOID ObjectInformation, ULONG ObjectInformationLength);\nNTSTATUS NtCancelIoFile (HANDLE FileHandle, PIO_STATUS_BLOCK IoStatusBlock);\nNTSTATUS NtTraceEvent (HANDLE TraceHandle, ULONG Flags, ULONG FieldSize, PVOID Fields);\nNTSTATUS NtPowerInformation (POWER_INFORMATION_LEVEL InformationLevel, PVOID InputBuffer, ULONG InputBufferLength, PVOID OutputBuffer, ULONG OutputBufferLength);\nNTSTATUS NtSetValueKey (HANDLE KeyHandle, PUNICODE_STRING ValueName, ULONG TitleIndex, ULONG Type, PVOID Data, ULONG DataSize);\nNTSTATUS NtCancelTimer (HANDLE TimerHandle, PBOOLEAN CurrentState);\nNTSTATUS NtSetTimer (HANDLE TimerHandle, PLARGE_INTEGER DueTime, PTIMER_APC_ROUTINE TimerApcRoutine, PVOID TimerContext, BOOLEAN WakeTimer, LONG Period, PBOOLEAN PreviousState);\nNTSTATUS NtAcceptConnectPort (PHANDLE PortHandle, PVOID PortContext, PPORT_MESSAGE ConnectionRequest, BOOLEAN AcceptConnection, PPORT_VIEW ServerView, PREMOTE_PORT_VIEW ClientView);\nNTSTATUS NtAccessCheck (PSECURITY_DESCRIPTOR SecurityDescriptor, HANDLE ClientToken, ACCESS_MASK DesiredAccess, PGENERIC_MAPPING GenericMapping, PPRIVILEGE_SET PrivilegeSet, PULONG PrivilegeSetLength, PACCESS_MASK GrantedAccess, PNTSTATUS AccessStatus);\nNTSTATUS NtAccessCheckByType (PSECURITY_DESCRIPTOR SecurityDescriptor, PSID PrincipalSelfSid, HANDLE ClientToken, ACCESS_MASK DesiredAccess, POBJECT_TYPE_LIST ObjectTypeList, ULONG ObjectTypeListLength, PGENERIC_MAPPING GenericMapping, PPRIVILEGE_SET PrivilegeSet, PULONG PrivilegeSetLength, PACCESS_MASK GrantedAccess, PNTSTATUS AccessStatus);\nNTSTATUS NtAccessCheckByTypeResultList (PSECURITY_DESCRIPTOR SecurityDescriptor, PSID PrincipalSelfSid, HANDLE ClientToken, ACCESS_MASK DesiredAccess, POBJECT_TYPE_LIST ObjectTypeList, ULONG ObjectTypeListLength, PGENERIC_MAPPING GenericMapping, PPRIVILEGE_SET PrivilegeSet, PULONG PrivilegeSetLength, PACCESS_MASK GrantedAccess, PNTSTATUS AccessStatus);\nNTSTATUS NtAccessCheckByTypeResultListAndAuditAlarm (PUNICODE_STRING SubsystemName, PVOID HandleId, PUNICODE_STRING ObjectTypeName, PUNICODE_STRING ObjectName, PSECURITY_DESCRIPTOR SecurityDescriptor, PSID PrincipalSelfSid, ACCESS_MASK DesiredAccess, AUDIT_EVENT_TYPE AuditType, ULONG Flags, POBJECT_TYPE_LIST ObjectTypeList, ULONG ObjectTypeListLength, PGENERIC_MAPPING GenericMapping, BOOLEAN ObjectCreation, PACCESS_MASK GrantedAccess, PNTSTATUS AccessStatus, PBOOLEAN GenerateOnClose);\nNTSTATUS NtAccessCheckByTypeResultListAndAuditAlarmByHandle (PUNICODE_STRING SubsystemName, PVOID HandleId, HANDLE ClientToken, PUNICODE_STRING ObjectTypeName, PUNICODE_STRING ObjectName, PSECURITY_DESCRIPTOR SecurityDescriptor, PSID PrincipalSelfSid, ACCESS_MASK DesiredAccess, AUDIT_EVENT_TYPE AuditType, ULONG Flags, POBJECT_TYPE_LIST ObjectTypeList, ULONG ObjectTypeListLength, PGENERIC_MAPPING GenericMapping, BOOLEAN ObjectCreation, PACCESS_MASK GrantedAccess, PNTSTATUS AccessStatus, PBOOLEAN GenerateOnClose);\nNTSTATUS NtAddBootEntry (PBOOT_ENTRY BootEntry, PULONG Id);\nNTSTATUS NtAddDriverEntry (PEFI_DRIVER_ENTRY DriverEntry, PULONG Id);\nNTSTATUS NtAdjustGroupsToken (HANDLE TokenHandle, BOOLEAN ResetToDefault, PTOKEN_GROUPS NewState, ULONG BufferLength, PTOKEN_GROUPS PreviousState, PULONG ReturnLength);\nNTSTATUS NtAlertResumeThread (HANDLE ThreadHandle, PULONG PreviousSuspendCount);\nNTSTATUS NtAlertThread (HANDLE ThreadHandle);\nNTSTATUS NtAllocateLocallyUniqueId (PLUID Luid);\nNTSTATUS NtAllocateReserveObject (PHANDLE MemoryReserveHandle, POBJECT_ATTRIBUTES ObjectAttributes, MEMORY_RESERVE_TYPE Type);\nNTSTATUS NtAllocateUserPhysicalPages (HANDLE ProcessHandle, PULONG_PTR NumberOfPages, PULONG_PTR UserPfnArray);\nNTSTATUS NtAllocateUuids (PULARGE_INTEGER Time, PULONG Range, PULONG Sequence, PCHAR Seed);\nNTSTATUS NtAlpcAcceptConnectPort (PHANDLE PortHandle, HANDLE ConnectionPortHandle, ULONG Flags, POBJECT_ATTRIBUTES ObjectAttributes, PALPC_PORT_ATTRIBUTES PortAttributes, PVOID PortContext, PPORT_MESSAGE ConnectionRequest, PALPC_MESSAGE_ATTRIBUTES ConnectionMessageAttributes, BOOLEAN AcceptConnection);\nNTSTATUS NtAlpcCancelMessage (HANDLE PortHandle, ULONG Flags, PALPC_CONTEXT_ATTR MessageContext);\nNTSTATUS NtAlpcConnectPort (PHANDLE PortHandle, PUNICODE_STRING PortName, POBJECT_ATTRIBUTES ObjectAttributes, PALPC_PORT_ATTRIBUTES PortAttributes, ULONG Flags, PSID RequiredServerSid, PPORT_MESSAGE ConnectionMessage, PULONG BufferLength, PALPC_MESSAGE_ATTRIBUTES OutMessageAttributes, PALPC_MESSAGE_ATTRIBUTES InMessageAttributes, PLARGE_INTEGER Timeout);\nNTSTATUS NtAlpcCreatePort (PHANDLE PortHandle, POBJECT_ATTRIBUTES ObjectAttributes, PALPC_PORT_ATTRIBUTES PortAttributes);\nNTSTATUS NtAlpcCreatePortSection (HANDLE PortHandle, ULONG Flags, HANDLE SectionHandle, SIZE_T SectionSize, PALPC_HANDLE AlpcSectionHandle, PSIZE_T ActualSectionSize);\nNTSTATUS NtAlpcCreateResourceReserve (HANDLE PortHandle, ULONG Flags, SIZE_T MessageSize, PALPC_HANDLE ResourceId);\nNTSTATUS NtAlpcCreateSectionView (HANDLE PortHandle, ULONG Flags, PALPC_DATA_VIEW_ATTR ViewAttributes);\nNTSTATUS NtAlpcCreateSecurityContext (HANDLE PortHandle, ULONG Flags, PALPC_SECURITY_ATTR SecurityAttribute);\nNTSTATUS NtAlpcDeletePortSection (HANDLE PortHandle, ULONG Flags, ALPC_HANDLE SectionHandle);\nNTSTATUS NtAlpcDeleteResourceReserve (HANDLE PortHandle, ULONG Flags, ALPC_HANDLE ResourceId);\nNTSTATUS NtAlpcDeleteSectionView (HANDLE PortHandle, ULONG Flags, PVOID ViewBase);\nNTSTATUS NtAlpcDeleteSecurityContext (HANDLE PortHandle, ULONG Flags, ALPC_HANDLE ContextHandle);\nNTSTATUS NtAlpcDisconnectPort (HANDLE PortHandle, ULONG Flags);\nNTSTATUS NtAlpcImpersonateClientOfPort (HANDLE PortHandle, PPORT_MESSAGE PortMessage, PVOID Reserved);\nNTSTATUS NtAlpcOpenSenderProcess (PHANDLE ProcessHandle, HANDLE PortHandle, PPORT_MESSAGE PortMessage, ULONG Flags, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes);\nNTSTATUS NtAlpcOpenSenderThread (PHANDLE ThreadHandle, HANDLE PortHandle, PPORT_MESSAGE PortMessage, ULONG Flags, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes);\nNTSTATUS NtAlpcQueryInformation (HANDLE PortHandle, ALPC_PORT_INFORMATION_CLASS PortInformationClass, PVOID PortInformation, ULONG Length, PULONG ReturnLength);\nNTSTATUS NtAlpcQueryInformationMessage (HANDLE PortHandle, PPORT_MESSAGE PortMessage, ALPC_MESSAGE_INFORMATION_CLASS MessageInformationClass, PVOID MessageInformation, ULONG Length, PULONG ReturnLength);\nNTSTATUS NtAlpcRevokeSecurityContext (HANDLE PortHandle, ULONG Flags, ALPC_HANDLE ContextHandle);\n```\n\n----------------------------------------\n\nTITLE: Querying Information from Windows Kernel Objects using Native API - C\nDESCRIPTION: These prototype declarations define the NtQuery* family of system calls, which allow querying detailed information from various objects (processes, files, ports, jobs, resources, drivers, etc.) at the kernel level in Windows. Each function typically takes a handle to the target object, an information class identifier, output data buffers, and length parameters, returning an NTSTATUS result. Integration requires access to the corresponding structure definitions and Native API headers; input/output buffers should be sized appropriately for the query, and incorrect buffer sizes may result in partial or failed information retrieval.\nSOURCE: https://github.com/panda-re/panda-ng/blob/main/plugins/syscalls2/generated-in/windows_8sp1_x86_prototypes.txt#_snippet_2\n\nLANGUAGE: C\nCODE:\n```\nNTSTATUS NtQueryInformationResourceManager (HANDLE ResourceManagerHandle, RESOURCEMANAGER_INFORMATION_CLASS ResourceManagerInformationClass, PVOID ResourceManagerInformation, ULONG ResourceManagerInformationLength, PULONG ReturnLength);\n```\n\nLANGUAGE: C\nCODE:\n```\nNTSTATUS NtQueryInformationProcess (HANDLE ProcessHandle, PROCESSINFOCLASS ProcessInformationClass, PVOID ProcessInformation, ULONG ProcessInformationLength, PULONG ReturnLength);\n```\n\nLANGUAGE: C\nCODE:\n```\nNTSTATUS NtQueryInformationPort (HANDLE PortHandle, PORT_INFORMATION_CLASS PortInformationClass, PVOID PortInformation, ULONG Length, PULONG ReturnLength);\n```\n\nLANGUAGE: C\nCODE:\n```\nNTSTATUS NtQueryInformationJobObject (HANDLE JobHandle, JOBOBJECTINFOCLASS JobObjectInformationClass, PVOID JobObjectInformation, ULONG JobObjectInformationLength, PULONG ReturnLength);\n```\n\nLANGUAGE: C\nCODE:\n```\nNTSTATUS NtQueryInformationFile (HANDLE FileHandle, PIO_STATUS_BLOCK IoStatusBlock, PVOID FileInformation, ULONG Length, FILE_INFORMATION_CLASS FileInformationClass);\n```\n\nLANGUAGE: C\nCODE:\n```\nNTSTATUS NtQueryInformationEnlistment (HANDLE EnlistmentHandle, ENLISTMENT_INFORMATION_CLASS EnlistmentInformationClass, PVOID EnlistmentInformation, ULONG EnlistmentInformationLength, PULONG ReturnLength);\n```\n\nLANGUAGE: C\nCODE:\n```\nNTSTATUS NtQueryInformationAtom (RTL_ATOM Atom, ATOM_INFORMATION_CLASS InformationClass, PVOID AtomInformation, ULONG AtomInformationLength, PULONG ReturnLength);\n```\n\nLANGUAGE: C\nCODE:\n```\nNTSTATUS NtQueryFullAttributesFile (POBJECT_ATTRIBUTES ObjectAttributes, PFILE_NETWORK_OPEN_INFORMATION FileInformation);\n```\n\nLANGUAGE: C\nCODE:\n```\nNTSTATUS NtQueryEvent (HANDLE EventHandle, EVENT_INFORMATION_CLASS EventInformationClass, PVOID EventInformation, ULONG EventInformationLength, PULONG ReturnLength);\n```\n\nLANGUAGE: C\nCODE:\n```\nNTSTATUS NtQueryEaFile (HANDLE FileHandle, PIO_STATUS_BLOCK IoStatusBlock, PVOID Buffer, ULONG Length, BOOLEAN ReturnSingleEntry, PVOID EaList, ULONG EaListLength, PULONG EaIndex, BOOLEAN RestartScan);\n```\n\nLANGUAGE: C\nCODE:\n```\nNTSTATUS NtQueryDriverEntryOrder (PULONG Ids, PULONG Count);\n```\n\nLANGUAGE: C\nCODE:\n```\nNTSTATUS NtQueryDirectoryObject (HANDLE DirectoryHandle, PVOID Buffer, ULONG Length, BOOLEAN ReturnSingleEntry, BOOLEAN RestartScan, PULONG Context, PULONG ReturnLength);\n```\n\nLANGUAGE: C\nCODE:\n```\nNTSTATUS NtQueryDirectoryFile (HANDLE FileHandle, HANDLE Event, PIO_APC_ROUTINE ApcRoutine, PVOID ApcContext, PIO_STATUS_BLOCK IoStatusBlock, PVOID FileInformation, ULONG Length, FILE_INFORMATION_CLASS FileInformationClass, BOOLEAN ReturnSingleEntry, PUNICODE_STRING FileName, BOOLEAN RestartScan);\n```\n\nLANGUAGE: C\nCODE:\n```\nNTSTATUS NtQueryDefaultUILanguage (LANGID *DefaultUILanguageId);\n```\n\nLANGUAGE: C\nCODE:\n```\nNTSTATUS NtQueryDefaultLocale (BOOLEAN UserProfile, PLCID DefaultLocaleId);\n```\n\nLANGUAGE: C\nCODE:\n```\nNTSTATUS NtQueryDebugFilterState (ULONG ComponentId, ULONG Level);\n```\n\nLANGUAGE: C\nCODE:\n```\nNTSTATUS NtQueryBootOptions (PBOOT_OPTIONS BootOptions, PULONG BootOptionsLength);\n```\n\nLANGUAGE: C\nCODE:\n```\nNTSTATUS NtQueryBootEntryOrder (PULONG Ids, PULONG Count);\n```\n\nLANGUAGE: C\nCODE:\n```\nNTSTATUS NtQueryAttributesFile (POBJECT_ATTRIBUTES ObjectAttributes, PFILE_BASIC_INFORMATION FileInformation);\n```\n\nLANGUAGE: C\nCODE:\n```\nNTSTATUS NtPowerInformation (POWER_INFORMATION_LEVEL InformationLevel, PVOID InputBuffer, ULONG InputBufferLength, PVOID OutputBuffer, ULONG OutputBufferLength);\n```\n\n----------------------------------------\n\nTITLE: Linux Socket System Calls in C\nDESCRIPTION: Core socket-related system call definitions including bind, connect, listen, send, and receive operations\nSOURCE: https://github.com/panda-re/panda-ng/blob/main/plugins/syscalls2/generated-in/linux_mips64_prototypes.txt#_snippet_1\n\nLANGUAGE: C\nCODE:\n```\nlong sys_bind(int, struct sockaddr __user *, int);\nlong sys_connect(int, struct sockaddr __user *, int);\nlong sys_listen(int, int);\nlong sys_recv(int, void __user *, size_t, unsigned);\nlong sys_send(int, void __user *, size_t, unsigned);\n```\n\n----------------------------------------\n\nTITLE: Declaring Windows NT Transaction Management Functions in C\nDESCRIPTION: Function declarations for Windows NT system calls related to transaction management and resource handling. These functions allow for creating, opening, querying and managing transactions, transaction managers, resource managers, and enlistments.\nSOURCE: https://github.com/panda-re/panda-ng/blob/main/plugins/syscalls2/generated-in/windows_vistasp0_x86_prototypes.txt#_snippet_1\n\nLANGUAGE: C\nCODE:\n```\nNTSTATUS NtCreateTransaction (PHANDLE TransactionHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, LPGUID Uow, HANDLE TmHandle, ULONG CreateOptions, ULONG IsolationLevel, ULONG IsolationFlags, PLARGE_INTEGER Timeout, PUNICODE_STRING Description);\nNTSTATUS NtOpenTransaction (PHANDLE TransactionHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, LPGUID Uow, HANDLE TmHandle);\nNTSTATUS NtQueryInformationTransaction (HANDLE TransactionHandle, TRANSACTION_INFORMATION_CLASS TransactionInformationClass, PVOID TransactionInformation, ULONG TransactionInformationLength, PULONG ReturnLength);\nNTSTATUS NtQueryInformationTransactionManager (HANDLE TransactionManagerHandle, TRANSACTIONMANAGER_INFORMATION_CLASS TransactionManagerInformationClass, PVOID TransactionManagerInformation, ULONG TransactionManagerInformationLength, PULONG ReturnLength);\nNTSTATUS NtPrePrepareEnlistment (HANDLE EnlistmentHandle, PLARGE_INTEGER TmVirtualClock);\nNTSTATUS NtPrepareEnlistment (HANDLE EnlistmentHandle, PLARGE_INTEGER TmVirtualClock);\nNTSTATUS NtCommitEnlistment (HANDLE EnlistmentHandle, PLARGE_INTEGER TmVirtualClock);\nNTSTATUS NtReadOnlyEnlistment (HANDLE EnlistmentHandle, PLARGE_INTEGER TmVirtualClock);\nNTSTATUS NtRollbackComplete (HANDLE EnlistmentHandle, PLARGE_INTEGER TmVirtualClock);\nNTSTATUS NtRollbackEnlistment (HANDLE EnlistmentHandle, PLARGE_INTEGER TmVirtualClock);\nNTSTATUS NtCommitTransaction (HANDLE TransactionHandle, BOOLEAN Wait);\nNTSTATUS NtRollbackTransaction (HANDLE TransactionHandle, BOOLEAN Wait);\nNTSTATUS NtPrePrepareComplete (HANDLE EnlistmentHandle, PLARGE_INTEGER TmVirtualClock);\nNTSTATUS NtPrepareComplete (HANDLE EnlistmentHandle, PLARGE_INTEGER TmVirtualClock);\nNTSTATUS NtCommitComplete (HANDLE EnlistmentHandle, PLARGE_INTEGER TmVirtualClock);\nNTSTATUS NtSinglePhaseReject (HANDLE EnlistmentHandle, PLARGE_INTEGER TmVirtualClock);\nNTSTATUS NtSetInformationTransaction (HANDLE TransactionHandle, TRANSACTION_INFORMATION_CLASS TransactionInformationClass, PVOID TransactionInformation, ULONG TransactionInformationLength);\nNTSTATUS NtSetInformationTransactionManager (HANDLE TmHandle, TRANSACTIONMANAGER_INFORMATION_CLASS TransactionManagerInformationClass, PVOID TransactionManagerInformation, ULONG TransactionManagerInformationLength);\nNTSTATUS NtSetInformationResourceManager (HANDLE ResourceManagerHandle, RESOURCEMANAGER_INFORMATION_CLASS ResourceManagerInformationClass, PVOID ResourceManagerInformation, ULONG ResourceManagerInformationLength);\nNTSTATUS NtCreateTransactionManager (PHANDLE TmHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, PUNICODE_STRING LogFileName, ULONG CreateOptions, ULONG CommitStrength);\nNTSTATUS NtOpenTransactionManager (PHANDLE TmHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, PUNICODE_STRING LogFileName, LPGUID TmIdentity, ULONG OpenOptions);\nNTSTATUS NtRollforwardTransactionManager (HANDLE TransactionManagerHandle, PLARGE_INTEGER TmVirtualClock);\nNTSTATUS NtRecoverEnlistment (HANDLE EnlistmentHandle, PVOID EnlistmentKey);\nNTSTATUS NtRecoverResourceManager (HANDLE ResourceManagerHandle);\nNTSTATUS NtRecoverTransactionManager (HANDLE TransactionManagerHandle);\nNTSTATUS NtCreateResourceManager (PHANDLE ResourceManagerHandle, ACCESS_MASK DesiredAccess, HANDLE TmHandle, LPGUID RmGuid, POBJECT_ATTRIBUTES ObjectAttributes, ULONG CreateOptions, PUNICODE_STRING Description);\nNTSTATUS NtOpenResourceManager (PHANDLE ResourceManagerHandle, ACCESS_MASK DesiredAccess, HANDLE TmHandle, LPGUID ResourceManagerGuid, POBJECT_ATTRIBUTES ObjectAttributes);\nNTSTATUS NtGetNotificationResourceManager (HANDLE ResourceManagerHandle, PTRANSACTION_NOTIFICATION TransactionNotification, ULONG NotificationLength, PLARGE_INTEGER Timeout, PULONG ReturnLength, ULONG Asynchronous, ULONG_PTR AsynchronousContext);\nNTSTATUS NtQueryInformationResourceManager (HANDLE ResourceManagerHandle, RESOURCEMANAGER_INFORMATION_CLASS ResourceManagerInformationClass, PVOID ResourceManagerInformation, ULONG ResourceManagerInformationLength, PULONG ReturnLength);\nNTSTATUS NtCreateEnlistment (PHANDLE EnlistmentHandle, ACCESS_MASK DesiredAccess, HANDLE ResourceManagerHandle, HANDLE TransactionHandle, POBJECT_ATTRIBUTES ObjectAttributes, ULONG CreateOptions, NOTIFICATION_MASK NotificationMask, PVOID EnlistmentKey);\nNTSTATUS NtOpenEnlistment (PHANDLE EnlistmentHandle, ACCESS_MASK DesiredAccess, HANDLE ResourceManagerHandle, LPGUID EnlistmentGuid, POBJECT_ATTRIBUTES ObjectAttributes);\nNTSTATUS NtSetInformationEnlistment (HANDLE EnlistmentHandle, ENLISTMENT_INFORMATION_CLASS EnlistmentInformationClass, PVOID EnlistmentInformation, ULONG EnlistmentInformationLength);\nNTSTATUS NtQueryInformationEnlistment (HANDLE EnlistmentHandle, ENLISTMENT_INFORMATION_CLASS EnlistmentInformationClass, PVOID EnlistmentInformation, ULONG EnlistmentInformationLength, PULONG ReturnLength);\n```\n\n----------------------------------------\n\nTITLE: Windows NT Process Management System Calls\nDESCRIPTION: Function declarations for process-related NT system calls including process creation, memory allocation, and thread management. These functions are part of the native NT API layer.\nSOURCE: https://github.com/panda-re/panda-ng/blob/main/plugins/syscalls2/generated-in/windows_2003sp0_x86_prototypes.txt#_snippet_0\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtCreateProcess (\n    PHANDLE ProcessHandle,\n    ACCESS_MASK DesiredAccess,\n    POBJECT_ATTRIBUTES ObjectAttributes,\n    HANDLE ParentProcess,\n    BOOLEAN InheritObjectTable,\n    HANDLE SectionHandle,\n    HANDLE DebugPort,\n    HANDLE ExceptionPort\n);\n\nNTSTATUS NtAllocateVirtualMemory (\n    HANDLE ProcessHandle,\n    PVOID *BaseAddress,\n    ULONG_PTR ZeroBits,\n    PSIZE_T RegionSize,\n    ULONG AllocationType,\n    ULONG Protect\n);\n```\n\n----------------------------------------\n\nTITLE: Declaring Nt* Windows Native API Prototypes - C/C++\nDESCRIPTION: This code snippet declares function prototypes for various Nt* functions as provided by the Windows NT Native API. It enables direct low-level system programming in C or C++ by allowing linking and calling native kernel functions, often undocumented, for advanced resource, process, and system management. Prerequisites include Windows development headers and knowledge of native Windows types and data structures such as HANDLE, ACCESS_MASK, and UNICODE_STRING; inputs and outputs, as well as permitted usage, closely follow native kernel conventions and require elevated privileges or specific context, with improper use potentially causing system instability.\nSOURCE: https://github.com/panda-re/panda-ng/blob/main/plugins/syscalls2/generated-in/windows_7_x86_prototypes.txt#_snippet_1\n\nLANGUAGE: C\nCODE:\n```\nNTSTATUS NtCreateFile (PHANDLE FileHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, PIO_STATUS_BLOCK IoStatusBlock, PLARGE_INTEGER AllocationSize, ULONG FileAttributes, ULONG ShareAccess, ULONG CreateDisposition, ULONG CreateOptions, PVOID EaBuffer, ULONG EaLength);\nNTSTATUS NtCreateIoCompletion (PHANDLE IoCompletionHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, ULONG Count);\nNTSTATUS NtCreateJobObject (PHANDLE JobHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes);\nNTSTATUS NtCreateJobSet (ULONG NumJob, PJOB_SET_ARRAY UserJobSet, ULONG Flags);\nNTSTATUS NtCreateKey (PHANDLE KeyHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, ULONG TitleIndex, PUNICODE_STRING Class, ULONG CreateOptions, PULONG Disposition);\nNTSTATUS NtCreateKeyedEvent (PHANDLE KeyedEventHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, ULONG Flags);\nNTSTATUS NtCreateKeyTransacted (PHANDLE KeyHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, ULONG TitleIndex, PUNICODE_STRING Class, ULONG CreateOptions, HANDLE TransactionHandle, PULONG Disposition);\nNTSTATUS NtCreateMailslotFile (PHANDLE FileHandle, ULONG DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, PIO_STATUS_BLOCK IoStatusBlock, ULONG CreateOptions, ULONG MailslotQuota, ULONG MaximumMessageSize, PLARGE_INTEGER ReadTimeout);\nNTSTATUS NtCreateMutant (PHANDLE MutantHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, BOOLEAN InitialOwner);\nNTSTATUS NtCreateNamedPipeFile (PHANDLE FileHandle, ULONG DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, PIO_STATUS_BLOCK IoStatusBlock, ULONG ShareAccess, ULONG CreateDisposition, ULONG CreateOptions, ULONG NamedPipeType, ULONG ReadMode, ULONG CompletionMode, ULONG MaximumInstances, ULONG InboundQuota, ULONG OutboundQuota, PLARGE_INTEGER DefaultTimeout);\nNTSTATUS NtCreatePagingFile (PUNICODE_STRING PageFileName, PLARGE_INTEGER MinimumSize, PLARGE_INTEGER MaximumSize, ULONG Priority);\nNTSTATUS NtCreatePort (PHANDLE PortHandle, POBJECT_ATTRIBUTES ObjectAttributes, ULONG MaxConnectionInfoLength, ULONG MaxMessageLength, ULONG MaxPoolUsage);\nNTSTATUS NtCreatePrivateNamespace (PHANDLE NamespaceHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, PVOID BoundaryDescriptor);\nNTSTATUS NtCreateProcess (PHANDLE ProcessHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, HANDLE ParentProcess, BOOLEAN InheritObjectTable, HANDLE SectionHandle, HANDLE DebugPort, HANDLE ExceptionPort);\nNTSTATUS NtCreateProcessEx (PHANDLE ProcessHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, HANDLE ParentProcess, ULONG Flags, HANDLE SectionHandle, HANDLE DebugPort, HANDLE ExceptionPort, ULONG JobMemberLevel);\nNTSTATUS NtCreateProfile (PHANDLE ProfileHandle, HANDLE Process, PVOID RangeBase, SIZE_T RangeSize, ULONG BucketSize, PULONG Buffer, ULONG BufferSize, KPROFILE_SOURCE ProfileSource, KAFFINITY Affinity);\nNTSTATUS NtCreateProfileEx (PHANDLE ProfileHandle, HANDLE Process, PVOID ProfileBase, SIZE_T ProfileSize, ULONG BucketSize, PULONG Buffer, ULONG BufferSize, KPROFILE_SOURCE ProfileSource, ULONG GroupAffinityCount, PGROUP_AFFINITY GroupAffinity);\nNTSTATUS NtCreateResourceManager (PHANDLE ResourceManagerHandle, ACCESS_MASK DesiredAccess, HANDLE TmHandle, LPGUID RmGuid, POBJECT_ATTRIBUTES ObjectAttributes, ULONG CreateOptions, PUNICODE_STRING Description);\nNTSTATUS NtCreateSection (PHANDLE SectionHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, PLARGE_INTEGER MaximumSize, ULONG SectionPageProtection, ULONG AllocationAttributes, HANDLE FileHandle);\nNTSTATUS NtCreateSemaphore (PHANDLE SemaphoreHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, LONG InitialCount, LONG MaximumCount);\nNTSTATUS NtCreateSymbolicLinkObject (PHANDLE LinkHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, PUNICODE_STRING LinkTarget);\nNTSTATUS NtCreateThread (PHANDLE ThreadHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, HANDLE ProcessHandle, PCLIENT_ID ClientId, PCONTEXT ThreadContext, PINITIAL_TEB InitialTeb, BOOLEAN CreateSuspended);\nNTSTATUS NtCreateThreadEx (PHANDLE ThreadHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, HANDLE ProcessHandle, PVOID StartRoutine, PVOID Argument, ULONG CreateFlags, ULONG_PTR ZeroBits, SIZE_T StackSize, SIZE_T MaximumStackSize, PPS_ATTRIBUTE_LIST AttributeList);\nNTSTATUS NtCreateTimer (PHANDLE TimerHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, TIMER_TYPE TimerType);\nNTSTATUS NtCreateToken (PHANDLE TokenHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, TOKEN_TYPE TokenType, PLUID AuthenticationId, PLARGE_INTEGER ExpirationTime, PTOKEN_USER User, PTOKEN_GROUPS Groups, PTOKEN_PRIVILEGES Privileges, PTOKEN_OWNER Owner, PTOKEN_PRIMARY_GROUP PrimaryGroup, PTOKEN_DEFAULT_DACL DefaultDacl, PTOKEN_SOURCE TokenSource);\nNTSTATUS NtCreateTransaction (PHANDLE TransactionHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, LPGUID Uow, HANDLE TmHandle, ULONG CreateOptions, ULONG IsolationLevel, ULONG IsolationFlags, PLARGE_INTEGER Timeout, PUNICODE_STRING Description);\nNTSTATUS NtCreateTransactionManager (PHANDLE TmHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, PUNICODE_STRING LogFileName, ULONG CreateOptions, ULONG CommitStrength);\nNTSTATUS NtCreateUserProcess (PHANDLE ProcessHandle, PHANDLE ThreadHandle, ACCESS_MASK ProcessDesiredAccess, ACCESS_MASK ThreadDesiredAccess, POBJECT_ATTRIBUTES ProcessObjectAttributes, POBJECT_ATTRIBUTES ThreadObjectAttributes, ULONG ProcessFlags, ULONG ThreadFlags, PRTL_USER_PROCESS_PARAMETERS ProcessParameters, PPROCESS_CREATE_INFO CreateInfo, PPROCESS_ATTRIBUTE_LIST AttributeList);\nNTSTATUS NtCreateWaitablePort (PHANDLE PortHandle, POBJECT_ATTRIBUTES ObjectAttributes, ULONG MaxConnectionInfoLength, ULONG MaxMessageLength, ULONG MaxPoolUsage);\nNTSTATUS NtCreateWorkerFactory (PHANDLE WorkerFactoryHandleReturn, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, HANDLE CompletionPortHandle, HANDLE WorkerProcessHandle, PVOID StartRoutine, PVOID StartParameter, ULONG MaxThreadCount, SIZE_T StackReserve, SIZE_T StackCommit);\nNTSTATUS NtDebugActiveProcess (HANDLE ProcessHandle, HANDLE DebugObjectHandle);\nNTSTATUS NtDebugContinue (HANDLE DebugObjectHandle, PCLIENT_ID ClientId, NTSTATUS ContinueStatus);\nNTSTATUS NtDelayExecution (BOOLEAN Alertable, PLARGE_INTEGER DelayInterval);\nNTSTATUS NtDeleteAtom (RTL_ATOM Atom);\nNTSTATUS NtDeleteBootEntry (ULONG Id);\nNTSTATUS NtDeleteDriverEntry (ULONG Id);\nNTSTATUS NtDeleteFile (POBJECT_ATTRIBUTES ObjectAttributes);\nNTSTATUS NtDeleteKey (HANDLE KeyHandle);\nNTSTATUS NtDeleteObjectAuditAlarm (PUNICODE_STRING SubsystemName, PVOID HandleId, BOOLEAN GenerateOnClose);\nNTSTATUS NtDeletePrivateNamespace (HANDLE NamespaceHandle);\nNTSTATUS NtDeleteValueKey (HANDLE KeyHandle, PUNICODE_STRING ValueName);\nNTSTATUS NtDeviceIoControlFile (HANDLE FileHandle, HANDLE Event, PIO_APC_ROUTINE ApcRoutine, PVOID ApcContext, PIO_STATUS_BLOCK IoStatusBlock, ULONG IoControlCode, PVOID InputBuffer, ULONG InputBufferLength, PVOID OutputBuffer, ULONG OutputBufferLength);\nNTSTATUS NtDisableLastKnownGood ();\nNTSTATUS NtDisplayString (PUNICODE_STRING String);\nNTSTATUS NtDrawText (PUNICODE_STRING Text);\nNTSTATUS NtDuplicateObject (HANDLE SourceProcessHandle, HANDLE SourceHandle, HANDLE TargetProcessHandle, PHANDLE TargetHandle, ACCESS_MASK DesiredAccess, ULONG HandleAttributes, ULONG Options);\nNTSTATUS NtDuplicateToken (HANDLE ExistingTokenHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, BOOLEAN EffectiveOnly, TOKEN_TYPE TokenType, PHANDLE NewTokenHandle);\nNTSTATUS NtEnableLastKnownGood ();\nNTSTATUS NtEnumerateBootEntries (PVOID Buffer, PULONG BufferLength);\nNTSTATUS NtEnumerateDriverEntries (PVOID Buffer, PULONG BufferLength);\nNTSTATUS NtEnumerateKey (HANDLE KeyHandle, ULONG Index, KEY_INFORMATION_CLASS KeyInformationClass, PVOID KeyInformation, ULONG Length, PULONG ResultLength);\nNTSTATUS NtEnumerateSystemEnvironmentValuesEx (ULONG InformationClass, PVOID Buffer, PULONG BufferLength);\nNTSTATUS NtEnumerateTransactionObject (HANDLE RootObjectHandle, KTMOBJECT_TYPE QueryType, PKTMOBJECT_CURSOR ObjectCursor, ULONG ObjectCursorLength, PULONG ReturnLength);\nNTSTATUS NtEnumerateValueKey (HANDLE KeyHandle, ULONG Index, KEY_VALUE_INFORMATION_CLASS KeyValueInformationClass, PVOID KeyValueInformation, ULONG Length, PULONG ResultLength);\nNTSTATUS NtExtendSection (HANDLE SectionHandle, PLARGE_INTEGER NewSectionSize);\nNTSTATUS NtFilterToken (HANDLE ExistingTokenHandle, ULONG Flags, PTOKEN_GROUPS SidsToDisable, PTOKEN_PRIVILEGES PrivilegesToDelete, PTOKEN_GROUPS RestrictedSids, PHANDLE NewTokenHandle);\nNTSTATUS NtFindAtom (PWSTR AtomName, ULONG Length, PRTL_ATOM Atom);\nNTSTATUS NtFlushBuffersFile (HANDLE FileHandle, PIO_STATUS_BLOCK IoStatusBlock);\nNTSTATUS NtFlushInstallUILanguage (LANGID InstallUILanguage, ULONG SetComittedFlag);\nNTSTATUS NtFlushInstructionCache (HANDLE ProcessHandle, PVOID BaseAddress, SIZE_T Length);\nNTSTATUS NtFlushKey (HANDLE KeyHandle);\nVOID NtFlushProcessWriteBuffers ();\nNTSTATUS NtFlushVirtualMemory (HANDLE ProcessHandle, PVOID *BaseAddress, PSIZE_T RegionSize, PIO_STATUS_BLOCK IoStatus);\nNTSTATUS NtFlushWriteBuffer ();\nNTSTATUS NtFreeUserPhysicalPages (HANDLE ProcessHandle, PULONG_PTR NumberOfPages, PULONG_PTR UserPfnArray);\nNTSTATUS NtFreeVirtualMemory (HANDLE ProcessHandle, PVOID *BaseAddress, PSIZE_T RegionSize, ULONG FreeType);\nNTSTATUS NtFreezeRegistry (ULONG TimeOutInSeconds);\n```\n\n----------------------------------------\n\nTITLE: Process Management System Calls in C\nDESCRIPTION: System calls for process and thread management including scheduling, priorities, and thread operations\nSOURCE: https://github.com/panda-re/panda-ng/blob/main/plugins/syscalls2/generated-in/linux_mips64_prototypes.txt#_snippet_3\n\nLANGUAGE: C\nCODE:\n```\nlong sys_gettid(void);\nlong sys_exit_group(int error_code);\nlong sys_set_tid_address(int __user *tidptr);\nlong sys_sched_setaffinity(pid_t pid, unsigned int len, unsigned long __user *user_mask_ptr);\n```\n\n----------------------------------------\n\nTITLE: Windows NT File Information Query Function Declarations (C)\nDESCRIPTION: Declarations for NT API functions that query file information, including attributes, directory contents, and volume information. These functions provide low-level access to file system metadata and properties.\nSOURCE: https://github.com/panda-re/panda-ng/blob/main/plugins/syscalls2/generated-in/windows_vistasp0_x86_prototypes.txt#_snippet_8\n\nLANGUAGE: C\nCODE:\n```\nNTSTATUS NtQueryAttributesFile (POBJECT_ATTRIBUTES ObjectAttributes, PFILE_BASIC_INFORMATION FileInformation);\nNTSTATUS NtQueryDirectoryFile (HANDLE FileHandle, HANDLE Event, PIO_APC_ROUTINE ApcRoutine, PVOID ApcContext, PIO_STATUS_BLOCK IoStatusBlock, PVOID FileInformation, ULONG Length, FILE_INFORMATION_CLASS FileInformationClass, BOOLEAN ReturnSingleEntry, PUNICODE_STRING FileName, BOOLEAN RestartScan);\nNTSTATUS NtQueryFullAttributesFile (POBJECT_ATTRIBUTES ObjectAttributes, PFILE_NETWORK_OPEN_INFORMATION FileInformation);\nNTSTATUS NtQueryInformationFile (HANDLE FileHandle, PIO_STATUS_BLOCK IoStatusBlock, PVOID FileInformation, ULONG Length, FILE_INFORMATION_CLASS FileInformationClass);\nNTSTATUS NtQueryVolumeInformationFile (HANDLE FileHandle, PIO_STATUS_BLOCK IoStatusBlock, PVOID FsInformation, ULONG Length, FS_INFORMATION_CLASS FsInformationClass);\n```\n\n----------------------------------------\n\nTITLE: Windows NT ALPC (Advanced Local Procedure Call) API Functions in C\nDESCRIPTION: Function declarations for Windows NT native API calls related to ALPC communication. These system calls facilitate message passing between processes using the Advanced Local Procedure Call mechanism, including port creation, connection management, and message sending.\nSOURCE: https://github.com/panda-re/panda-ng/blob/main/plugins/syscalls2/generated-in/windows_8sp0_x86_prototypes.txt#_snippet_13\n\nLANGUAGE: C\nCODE:\n```\nNTSTATUS NtAlpcCreatePort (PHANDLE PortHandle, POBJECT_ATTRIBUTES ObjectAttributes, PALPC_PORT_ATTRIBUTES PortAttributes);\nNTSTATUS NtAlpcConnectPort (PHANDLE PortHandle, PUNICODE_STRING PortName, POBJECT_ATTRIBUTES ObjectAttributes, PALPC_PORT_ATTRIBUTES PortAttributes, ULONG Flags, PSID RequiredServerSid, PPORT_MESSAGE ConnectionMessage, PULONG BufferLength, PALPC_MESSAGE_ATTRIBUTES OutMessageAttributes, PALPC_MESSAGE_ATTRIBUTES InMessageAttributes, PLARGE_INTEGER Timeout);\nNTSTATUS NtAlpcAcceptConnectPort (PHANDLE PortHandle, HANDLE ConnectionPortHandle, ULONG Flags, POBJECT_ATTRIBUTES ObjectAttributes, PALPC_PORT_ATTRIBUTES PortAttributes, PVOID PortContext, PPORT_MESSAGE ConnectionRequest, PALPC_MESSAGE_ATTRIBUTES ConnectionMessageAttributes, BOOLEAN AcceptConnection);\nNTSTATUS NtAlpcSendWaitReceivePort (HANDLE PortHandle, ULONG Flags, PPORT_MESSAGE SendMessage, PALPC_MESSAGE_ATTRIBUTES SendMessageAttributes, PPORT_MESSAGE ReceiveMessage, PULONG BufferLength, PALPC_MESSAGE_ATTRIBUTES ReceiveMessageAttributes, PLARGE_INTEGER Timeout);\nNTSTATUS NtAlpcDisconnectPort (HANDLE PortHandle, ULONG Flags);\nNTSTATUS NtAlpcCancelMessage (HANDLE PortHandle, ULONG Flags, PALPC_CONTEXT_ATTR MessageContext);\n```\n\n----------------------------------------\n\nTITLE: Declaring FreeBSD System Call Prototypes - C\nDESCRIPTION: This code block declares a series of system call function prototypes using C syntax, targeting the FreeBSD operating system. Each line provides the function signature, enabling other kernel or user-space code to reference these calls for operations such as file I/O, memory mapping, capability management, CPU scheduling, and resource control. Required dependencies include the appropriate data structure and type definitions (such as struct iovec, struct sockaddr, mode_t, off_t, etc.), which are typically found in standard system or kernel headers. Key parameters are explicitly typed, ensuring interface correctness, and outputs are typically returned as integers or ssize_t for error and length reporting, with pointer arguments enabling data exchange between user- and kernel-space. These declarations alone do not provide implementation but serve as interface contracts for kernel developers and system libraries.\nSOURCE: https://github.com/panda-re/panda-ng/blob/main/plugins/syscalls2/generated-in/freebsd_x64_prototypes.txt#_snippet_41\n\nLANGUAGE: C\nCODE:\n```\nint sctp_generic_recvmsg(int sd, struct iovec *iov, int iovlen, struct sockaddr *from, __socklen_t *fromlenaddr, struct sctp_sndrcvinfo *sinfo, int *msg_flags);\n```\n\nLANGUAGE: C\nCODE:\n```\nssize_t pread(int fd, void *buf, size_t nbyte, off_t offset);\n```\n\nLANGUAGE: C\nCODE:\n```\nssize_t pwrite(int fd, const void *buf, size_t nbyte, off_t offset);\n```\n\nLANGUAGE: C\nCODE:\n```\nvoid *mmap(void *addr, size_t len, int prot, int flags, int fd, off_t pos);\n```\n\nLANGUAGE: C\nCODE:\n```\noff_t lseek(int fd, off_t offset, int whence);\n```\n\nLANGUAGE: C\nCODE:\n```\nint truncate(const char *path, off_t length);\n```\n\nLANGUAGE: C\nCODE:\n```\nint ftruncate(int fd, off_t length);\n```\n\nLANGUAGE: C\nCODE:\n```\nint thr_kill2(pid_t pid, long id, int sig);\n```\n\nLANGUAGE: C\nCODE:\n```\nint shm_open(const char *path, int flags, mode_t mode);\n```\n\nLANGUAGE: C\nCODE:\n```\nint shm_unlink(const char *path);\n```\n\nLANGUAGE: C\nCODE:\n```\nint cpuset(cpusetid_t *setid);\n```\n\nLANGUAGE: C\nCODE:\n```\nint cpuset_setid(cpuwhich_t which, id_t id, cpusetid_t setid);\n```\n\nLANGUAGE: C\nCODE:\n```\nint cpuset_getid(cpulevel_t level, cpuwhich_t which, id_t id, cpusetid_t *setid);\n```\n\nLANGUAGE: C\nCODE:\n```\nint cpuset_getaffinity(cpulevel_t level, cpuwhich_t which, id_t id, size_t cpusetsize, cpuset_t *mask);\n```\n\nLANGUAGE: C\nCODE:\n```\nint cpuset_setaffinity(cpulevel_t level, cpuwhich_t which, id_t id, size_t cpusetsize, const cpuset_t *mask);\n```\n\nLANGUAGE: C\nCODE:\n```\nint faccessat(int fd, const char *path, int amode, int flag);\n```\n\nLANGUAGE: C\nCODE:\n```\nint fchmodat(int fd, const char *path, mode_t mode, int flag);\n```\n\nLANGUAGE: C\nCODE:\n```\nint fchownat(int fd, const char *path, uid_t uid, gid_t gid, int flag);\n```\n\nLANGUAGE: C\nCODE:\n```\nint fexecve(int fd, char **argv, char **envv);\n```\n\nLANGUAGE: C\nCODE:\n```\nint fstatat(int fd, const char *path, struct freebsd11_stat *buf, int flag);\n```\n\nLANGUAGE: C\nCODE:\n```\nint futimesat(int fd, const char *path, struct timeval *times);\n```\n\nLANGUAGE: C\nCODE:\n```\nint linkat(int fd1, const char *path1, int fd2, const char *path2, int flag);\n```\n\nLANGUAGE: C\nCODE:\n```\nint mkdirat(int fd, const char *path, mode_t mode);\n```\n\nLANGUAGE: C\nCODE:\n```\nint mkfifoat(int fd, const char *path, mode_t mode);\n```\n\nLANGUAGE: C\nCODE:\n```\nint mknodat(int fd, const char *path, mode_t mode, uint32_t dev);\n```\n\nLANGUAGE: C\nCODE:\n```\nint openat(int fd, const char *path, int flag, mode_t mode);\n```\n\nLANGUAGE: C\nCODE:\n```\nssize_t readlinkat(int fd, const char *path, char *buf, size_t bufsize);\n```\n\nLANGUAGE: C\nCODE:\n```\nint renameat(int oldfd, const char *old, int newfd, const char *new);\n```\n\nLANGUAGE: C\nCODE:\n```\nint symlinkat(const char *path1, int fd, const char *path2);\n```\n\nLANGUAGE: C\nCODE:\n```\nint unlinkat(int fd, const char *path, int flag);\n```\n\nLANGUAGE: C\nCODE:\n```\nint posix_openpt(int flags);\n```\n\nLANGUAGE: C\nCODE:\n```\nint gssd_syscall(const char *path);\n```\n\nLANGUAGE: C\nCODE:\n```\nint jail_get(struct iovec *iovp, unsigned int iovcnt, int flags);\n```\n\nLANGUAGE: C\nCODE:\n```\nint jail_set(struct iovec *iovp, unsigned int iovcnt, int flags);\n```\n\nLANGUAGE: C\nCODE:\n```\nint jail_remove(int jid);\n```\n\nLANGUAGE: C\nCODE:\n```\nint closefrom(int lowfd);\n```\n\nLANGUAGE: C\nCODE:\n```\nint __semctl(int semid, int semnum, int cmd, union semun *arg);\n```\n\nLANGUAGE: C\nCODE:\n```\nint msgctl(int msqid, int cmd, struct msqid_ds *buf);\n```\n\nLANGUAGE: C\nCODE:\n```\nint shmctl(int shmid, int cmd, struct shmid_ds *buf);\n```\n\nLANGUAGE: C\nCODE:\n```\nint lpathconf(const char *path, int name);\n```\n\nLANGUAGE: C\nCODE:\n```\nint __cap_rights_get(int version, int fd, cap_rights_t *rightsp);\n```\n\nLANGUAGE: C\nCODE:\n```\nint cap_enter(void);\n```\n\nLANGUAGE: C\nCODE:\n```\nint cap_getmode(unsigned *modep);\n```\n\nLANGUAGE: C\nCODE:\n```\nint pdfork(int *fdp, int flags);\n```\n\nLANGUAGE: C\nCODE:\n```\nint pdkill(int fd, int signum);\n```\n\nLANGUAGE: C\nCODE:\n```\nint pdgetpid(int fd, pid_t *pidp);\n```\n\nLANGUAGE: C\nCODE:\n```\nint pselect(int nd, fd_set *in, fd_set *ou, fd_set *ex, const struct timespec *ts, const sigset_t *sm);\n```\n\nLANGUAGE: C\nCODE:\n```\nint getloginclass(char *namebuf, size_t namelen);\n```\n\nLANGUAGE: C\nCODE:\n```\nint setloginclass(const char *namebuf);\n```\n\nLANGUAGE: C\nCODE:\n```\nint rctl_get_racct(const void *inbufp, size_t inbuflen, void *outbufp, size_t outbuflen);\n```\n\nLANGUAGE: C\nCODE:\n```\nint rctl_get_rules(const void *inbufp, size_t inbuflen, void *outbufp, size_t outbuflen);\n```\n\nLANGUAGE: C\nCODE:\n```\nint rctl_get_limits(const void *inbufp, size_t inbuflen, void *outbufp, size_t outbuflen);\n```\n\nLANGUAGE: C\nCODE:\n```\nint rctl_add_rule(const void *inbufp, size_t inbuflen, void *outbufp, size_t outbuflen);\n```\n\nLANGUAGE: C\nCODE:\n```\nint rctl_remove_rule(const void *inbufp, size_t inbuflen, void *outbufp, size_t outbuflen);\n```\n\nLANGUAGE: C\nCODE:\n```\nint posix_fallocate(int fd, off_t offset, off_t len);\n```\n\nLANGUAGE: C\nCODE:\n```\nint posix_fadvise(int fd, off_t offset, off_t len, int advice);\n```\n\nLANGUAGE: C\nCODE:\n```\nint wait6(idtype_t idtype, id_t id, int *status, int options, struct __wrusage *wrusage, siginfo_t *info);\n```\n\nLANGUAGE: C\nCODE:\n```\nint cap_rights_limit(int fd, cap_rights_t *rightsp);\n```\n\nLANGUAGE: C\nCODE:\n```\nint cap_ioctls_limit(int fd, const u_long *cmds, size_t ncmds);\n```\n\nLANGUAGE: C\nCODE:\n```\nssize_t cap_ioctls_get(int fd, u_long *cmds, size_t maxcmds);\n```\n\nLANGUAGE: C\nCODE:\n```\nint cap_fcntls_limit(int fd, uint32_t fcntlrights);\n```\n\nLANGUAGE: C\nCODE:\n```\nint cap_fcntls_get(int fd, uint32_t *fcntlrightsp);\n```\n\nLANGUAGE: C\nCODE:\n```\nint bindat(int fd, int s, const struct sockaddr *name, int namelen);\n```\n\nLANGUAGE: C\nCODE:\n```\nint connectat(int fd, int s, const struct sockaddr *name, int namelen);\n```\n\nLANGUAGE: C\nCODE:\n```\nint chflagsat(int fd, const char *path, u_long flags, int atflag);\n```\n\nLANGUAGE: C\nCODE:\n```\nint accept4(int s, struct sockaddr *name, __socklen_t *anamelen, int flags);\n```\n\nLANGUAGE: C\nCODE:\n```\nint pipe2(int *fildes, int flags);\n```\n\nLANGUAGE: C\nCODE:\n```\nint aio_mlock(struct aiocb *aiocbp);\n```\n\nLANGUAGE: C\nCODE:\n```\nint procctl(idtype_t idtype, id_t id, int com, void *data);\n```\n\nLANGUAGE: C\nCODE:\n```\nint ppoll(struct pollfd *fds, unsigned nfds, const struct timespec *ts, const sigset_t *set);\n```\n\nLANGUAGE: C\nCODE:\n```\nint futimens(int fd, struct timespec *times);\n```\n\nLANGUAGE: C\nCODE:\n```\nint utimensat(int fd, const char *path, struct timespec *times, int flag);\n```\n\nLANGUAGE: C\nCODE:\n```\nint fdatasync(int fd);\n```\n\nLANGUAGE: C\nCODE:\n```\nint fstat(int fd, struct stat *sb);\n```\n\nLANGUAGE: C\nCODE:\n```\nint fstatat(int fd, const char *path, struct stat *buf, int flag);\n```\n\nLANGUAGE: C\nCODE:\n```\nint fhstat(const struct fhandle *u_fhp, struct stat *sb);\n```\n\nLANGUAGE: C\nCODE:\n```\nssize_t getdirentries(int fd, char *buf, size_t count, off_t *basep);\n```\n\nLANGUAGE: C\nCODE:\n```\nint statfs(const char *path, struct statfs *buf);\n```\n\nLANGUAGE: C\nCODE:\n```\nint fstatfs(int fd, struct statfs *buf);\n```\n\nLANGUAGE: C\nCODE:\n```\nint getfsstat(struct statfs *buf, long bufsize, int mode);\n```\n\nLANGUAGE: C\nCODE:\n```\nint fhstatfs(const struct fhandle *u_fhp, struct statfs *buf);\n```\n\nLANGUAGE: C\nCODE:\n```\nint mknodat(int fd, const char *path, mode_t mode, dev_t dev);\n```\n\nLANGUAGE: C\nCODE:\n```\nint kevent(int fd, struct kevent *changelist, int nchanges, struct kevent *eventlist, int nevents, const struct timespec *timeout);\n```\n\nLANGUAGE: C\nCODE:\n```\nint cpuset_getdomain(cpulevel_t level, cpuwhich_t which, id_t id, size_t domainsetsize, domainset_t *mask, int *policy);\n```\n\nLANGUAGE: C\nCODE:\n```\nint cpuset_setdomain(cpulevel_t level, cpuwhich_t which, id_t id, size_t domainsetsize, domainset_t *mask, int policy);\n```\n\nLANGUAGE: C\nCODE:\n```\nint getrandom(void *buf, size_t buflen, unsigned int flags);\n```\n\nLANGUAGE: C\nCODE:\n```\nint getfhat(int fd, char *path, struct fhandle *fhp, int flags);\n```\n\nLANGUAGE: C\nCODE:\n```\nint fhlink(struct fhandle *fhp, const char *to);\n```\n\nLANGUAGE: C\nCODE:\n```\nint fhlinkat(struct fhandle *fhp, int tofd, const char *to,);\n```\n\nLANGUAGE: C\nCODE:\n```\nint fhreadlink(struct fhandle *fhp, char *buf, size_t bufsize);\n```\n\nLANGUAGE: C\nCODE:\n```\nint funlinkat(int dfd, const char *path, int fd, int flag);\n```\n\nLANGUAGE: C\nCODE:\n```\nssize_t copy_file_range(int infd, off_t *inoffp, int outfd, off_t *outoffp, size_t len, unsigned int flags);\n```\n\nLANGUAGE: C\nCODE:\n```\nint __sysctlbyname(const char *name, size_t namelen, void *old, size_t *oldlenp, void *new, size_t newlen);\n```\n\nLANGUAGE: C\nCODE:\n```\nint shm_open2(const char *path, int flags, mode_t mode, int shmflags, const char *name);\n```\n\nLANGUAGE: C\nCODE:\n```\nint shm_rename(const char *path_from, const char *path_to, int flags);\n```\n\nLANGUAGE: C\nCODE:\n```\nint sigfastblock(int cmd, uint32_t *ptr);\n```\n\nLANGUAGE: C\nCODE:\n```\nint __realpathat(int fd, const char *path, char *buf, size_t size, int flags);\n```\n\nLANGUAGE: C\nCODE:\n```\nint close_range(unsigned lowfd, unsigned highfd, int flags);\n```\n\nLANGUAGE: C\nCODE:\n```\nint rpctls_syscall(int op, const char *path);\n```\n\n----------------------------------------\n\nTITLE: Defining Linux System Calls in C\nDESCRIPTION: This snippet showcases the structure of Linux system call definitions. Each line declares a system call function with its parameters and return type, typically long. The functions cover a wide range of system operations from file handling to process management.\nSOURCE: https://github.com/panda-re/panda-ng/blob/main/plugins/syscalls2/generated-in/linux_mips64n32_prototypes.txt#_snippet_13\n\nLANGUAGE: C\nCODE:\n```\nlong sys_getcpu(unsigned __user *cpu, unsigned __user *node, struct getcpu_cache __user *cache);\nlong sys_epoll_pwait(int epfd, struct epoll_event __user *events, int maxevents, int timeout, const sigset_t __user *sigmask, size_t sigsetsize);\nlong sys_ioprio_set(int which, int who, int ioprio);\nlong sys_ioprio_get(int which, int who);\nlong sys_utimensat_time32(unsigned int dfd, const char __user *filename, struct old_timespec32 __user *t, int flags);\nlong sys_signalfd(int ufd, sigset_t __user *user_mask, size_t sizemask);\nlong sys_ni_syscall(void);\nlong sys_eventfd(unsigned int count);\nlong sys_fallocate(int fd, int mode, loff_t offset, loff_t len);\nlong sys_timerfd_create(int clockid, int flags);\n// ... (more system calls omitted for brevity)\nlong sys_faccessat2(int dfd, const char __user *filename, int mode, int flags);\n```\n\n----------------------------------------\n\nTITLE: Windows NT File I/O Function Declarations (C)\nDESCRIPTION: Declarations for NT API functions that perform file input/output operations, including reading, writing, and scatter/gather operations. These functions provide the low-level implementation of file access in Windows.\nSOURCE: https://github.com/panda-re/panda-ng/blob/main/plugins/syscalls2/generated-in/windows_vistasp0_x86_prototypes.txt#_snippet_13\n\nLANGUAGE: C\nCODE:\n```\nNTSTATUS NtReadFile (HANDLE FileHandle, HANDLE Event, PIO_APC_ROUTINE ApcRoutine, PVOID ApcContext, PIO_STATUS_BLOCK IoStatusBlock, PVOID Buffer, ULONG Length, PLARGE_INTEGER ByteOffset, PULONG Key);\nNTSTATUS NtReadFileScatter (HANDLE FileHandle, HANDLE Event, PIO_APC_ROUTINE ApcRoutine, PVOID ApcContext, PIO_STATUS_BLOCK IoStatusBlock, PFILE_SEGMENT_ELEMENT SegmentArray, ULONG Length, PLARGE_INTEGER ByteOffset, PULONG Key);\n```\n\n----------------------------------------\n\nTITLE: Windows NT Registry and Key Management API Functions in C\nDESCRIPTION: Function declarations for Windows NT native API calls related to registry and key management. These system calls allow creating registry keys, comparing tokens, and compressing or compacting registry keys.\nSOURCE: https://github.com/panda-re/panda-ng/blob/main/plugins/syscalls2/generated-in/windows_8sp0_x86_prototypes.txt#_snippet_11\n\nLANGUAGE: C\nCODE:\n```\nNTSTATUS NtCreateKey (PHANDLE KeyHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, ULONG TitleIndex, PUNICODE_STRING Class, ULONG CreateOptions, PULONG Disposition);\nNTSTATUS NtCreateKeyTransacted (PHANDLE KeyHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, ULONG TitleIndex, PUNICODE_STRING Class, ULONG CreateOptions, HANDLE TransactionHandle, PULONG Disposition);\nNTSTATUS NtCompareTokens (HANDLE FirstTokenHandle, HANDLE SecondTokenHandle, PBOOLEAN Equal);\nNTSTATUS NtCompressKey (HANDLE Key);\nNTSTATUS NtCompactKeys (ULONG Count, HANDLE KeyArray[]);\n```\n\n----------------------------------------\n\nTITLE: Declaring Native Windows API System Call Prototypes in C\nDESCRIPTION: This snippet declares several native NT system call function prototypes in C, each returning an NTSTATUS value. The functions expose low-level Windows kernel features such as querying and setting object information, manipulating registry keys, security descriptors, processes, threads, timers, and environment variables. Usage requires including the appropriate Windows headers and linking against native system libraries. All functions require correct handle or pointer arguments, and improper use may lead to instability or security issues. The inputs and outputs are typically strongly typed pointers or handles with output data provided via reference parameters; return values are NTSTATUS codes indicating success or failure.\nSOURCE: https://github.com/panda-re/panda-ng/blob/main/plugins/syscalls2/generated-in/windows_2003sp12_x64_prototypes.txt#_snippet_3\n\nLANGUAGE: C\nCODE:\n```\nNTSTATUS NtQueryMutant (HANDLE MutantHandle, MUTANT_INFORMATION_CLASS MutantInformationClass, PVOID MutantInformation, ULONG MutantInformationLength, PULONG ReturnLength);\nNTSTATUS NtQueryOpenSubKeys (POBJECT_ATTRIBUTES TargetKey, PULONG HandleCount);\nNTSTATUS NtQueryOpenSubKeysEx (POBJECT_ATTRIBUTES TargetKey, ULONG BufferLength, PVOID Buffer, PULONG RequiredSize);\nNTSTATUS NtQueryPortInformationProcess ();\nNTSTATUS NtQueryQuotaInformationFile (HANDLE FileHandle, PIO_STATUS_BLOCK IoStatusBlock, PVOID Buffer, ULONG Length, BOOLEAN ReturnSingleEntry, PVOID SidList, ULONG SidListLength, PULONG StartSid, BOOLEAN RestartScan);\nNTSTATUS NtQuerySecurityObject (HANDLE Handle, SECURITY_INFORMATION SecurityInformation, PSECURITY_DESCRIPTOR SecurityDescriptor, ULONG Length, PULONG LengthNeeded);\nNTSTATUS NtQuerySemaphore (HANDLE SemaphoreHandle, SEMAPHORE_INFORMATION_CLASS SemaphoreInformationClass, PVOID SemaphoreInformation, ULONG SemaphoreInformationLength, PULONG ReturnLength);\nNTSTATUS NtQuerySymbolicLinkObject (HANDLE LinkHandle, PUNICODE_STRING LinkTarget, PULONG ReturnedLength);\nNTSTATUS NtQuerySystemEnvironmentValue (PUNICODE_STRING VariableName, PWSTR VariableValue, USHORT ValueLength, PUSHORT ReturnLength);\nNTSTATUS NtQuerySystemEnvironmentValueEx (PUNICODE_STRING VariableName, LPGUID VendorGuid, PVOID Value, PULONG ValueLength, PULONG Attributes);\nNTSTATUS NtQueryTimerResolution (PULONG MaximumTime, PULONG MinimumTime, PULONG CurrentTime);\nNTSTATUS NtRaiseException (PEXCEPTION_RECORD ExceptionRecord, PCONTEXT ContextRecord, BOOLEAN FirstChance);\nNTSTATUS NtRaiseHardError (NTSTATUS ErrorStatus, ULONG NumberOfParameters, ULONG UnicodeStringParameterMask, PULONG_PTR Parameters, ULONG ValidResponseOptions, PULONG Response);\nNTSTATUS NtRegisterThreadTerminatePort (HANDLE PortHandle);\nNTSTATUS NtReleaseKeyedEvent (HANDLE KeyedEventHandle, PVOID KeyValue, BOOLEAN Alertable, PLARGE_INTEGER Timeout);\nNTSTATUS NtRemoveProcessDebug (HANDLE ProcessHandle, HANDLE DebugObjectHandle);\nNTSTATUS NtRenameKey (HANDLE KeyHandle, PUNICODE_STRING NewName);\nNTSTATUS NtReplaceKey (POBJECT_ATTRIBUTES NewFile, HANDLE TargetHandle, POBJECT_ATTRIBUTES OldFile);\nNTSTATUS NtReplyWaitReplyPort (HANDLE PortHandle, PPORT_MESSAGE ReplyMessage);\nNTSTATUS NtRequestPort (HANDLE PortHandle, PPORT_MESSAGE RequestMessage);\nNTSTATUS NtResetEvent (HANDLE EventHandle, PLONG PreviousState);\nNTSTATUS NtResetWriteWatch (HANDLE ProcessHandle, PVOID BaseAddress, SIZE_T RegionSize);\nNTSTATUS NtRestoreKey (HANDLE KeyHandle, HANDLE FileHandle, ULONG Flags);\nNTSTATUS NtResumeProcess (HANDLE ProcessHandle);\nNTSTATUS NtSaveKey (HANDLE KeyHandle, HANDLE FileHandle);\nNTSTATUS NtSaveKeyEx (HANDLE KeyHandle, HANDLE FileHandle, ULONG Format);\nNTSTATUS NtSaveMergedKeys (HANDLE HighPrecedenceKeyHandle, HANDLE LowPrecedenceKeyHandle, HANDLE FileHandle);\nNTSTATUS NtSecureConnectPort (PHANDLE PortHandle, PUNICODE_STRING PortName, PSECURITY_QUALITY_OF_SERVICE SecurityQos, PPORT_VIEW ClientView, PSID RequiredServerSid, PREMOTE_PORT_VIEW ServerView, PULONG MaxMessageLength, PVOID ConnectionInformation, PULONG ConnectionInformationLength);\nNTSTATUS NtSetBootEntryOrder (PULONG Ids, ULONG Count);\nNTSTATUS NtSetBootOptions (PBOOT_OPTIONS BootOptions, ULONG FieldsToChange);\nNTSTATUS NtSetContextThread (HANDLE ThreadHandle, PCONTEXT ThreadContext);\nNTSTATUS NtSetDebugFilterState (ULONG ComponentId, ULONG Level, BOOLEAN State);\nNTSTATUS NtSetDefaultHardErrorPort (HANDLE DefaultHardErrorPort);\nNTSTATUS NtSetDefaultLocale (BOOLEAN UserProfile, LCID DefaultLocaleId);\nNTSTATUS NtSetDefaultUILanguage (LANGID DefaultUILanguageId);\nNTSTATUS NtSetDriverEntryOrder (PULONG Ids, ULONG Count);\nNTSTATUS NtSetEaFile (HANDLE FileHandle, PIO_STATUS_BLOCK IoStatusBlock, PVOID Buffer, ULONG Length);\nNTSTATUS NtSetHighEventPair (HANDLE EventPairHandle);\nNTSTATUS NtSetHighWaitLowEventPair (HANDLE EventPairHandle);\nNTSTATUS NtSetInformationDebugObject (HANDLE DebugObjectHandle, DEBUGOBJECTINFOCLASS DebugObjectInformationClass, PVOID DebugInformation, ULONG DebugInformationLength, PULONG ReturnLength);\nNTSTATUS NtSetInformationJobObject (HANDLE JobHandle, JOBOBJECTINFOCLASS JobObjectInformationClass, PVOID JobObjectInformation, ULONG JobObjectInformationLength);\nNTSTATUS NtSetInformationKey (HANDLE KeyHandle, KEY_SET_INFORMATION_CLASS KeySetInformationClass, PVOID KeySetInformation, ULONG KeySetInformationLength);\nNTSTATUS NtSetInformationToken (HANDLE TokenHandle, TOKEN_INFORMATION_CLASS TokenInformationClass, PVOID TokenInformation, ULONG TokenInformationLength);\nNTSTATUS NtSetIntervalProfile (ULONG Interval, KPROFILE_SOURCE Source);\nNTSTATUS NtSetIoCompletion (HANDLE IoCompletionHandle, PVOID KeyContext, PVOID ApcContext, NTSTATUS IoStatus, ULONG_PTR IoStatusInformation);\nNTSTATUS NtSetLdtEntries (ULONG Selector0, ULONG Entry0Low, ULONG Entry0Hi, ULONG Selector1, ULONG Entry1Low, ULONG Entry1Hi);\nNTSTATUS NtSetLowEventPair (HANDLE EventPairHandle);\nNTSTATUS NtSetLowWaitHighEventPair (HANDLE EventPairHandle);\nNTSTATUS NtSetQuotaInformationFile (HANDLE FileHandle, PIO_STATUS_BLOCK IoStatusBlock, PVOID Buffer, ULONG Length);\nNTSTATUS NtSetSecurityObject (HANDLE Handle, SECURITY_INFORMATION SecurityInformation, PSECURITY_DESCRIPTOR SecurityDescriptor);\nNTSTATUS NtSetSystemEnvironmentValue (PUNICODE_STRING VariableName, PUNICODE_STRING VariableValue);\nNTSTATUS NtSetSystemEnvironmentValueEx (PUNICODE_STRING VariableName, LPGUID VendorGuid, PVOID Value, ULONG ValueLength, ULONG Attributes);\nNTSTATUS NtSetSystemInformation (SYSTEM_INFORMATION_CLASS SystemInformationClass, PVOID SystemInformation, ULONG SystemInformationLength);\nNTSTATUS NtSetSystemPowerState (POWER_ACTION SystemAction, SYSTEM_POWER_STATE MinSystemState, ULONG Flags);\nNTSTATUS NtSetSystemTime (PLARGE_INTEGER SystemTime, PLARGE_INTEGER PreviousTime);\nNTSTATUS NtSetThreadExecutionState (EXECUTION_STATE esFlags, PEXECUTION_STATE PreviousFlags);\nNTSTATUS NtSetTimerResolution (ULONG DesiredTime, BOOLEAN SetResolution, PULONG ActualTime);\nNTSTATUS NtSetUuidSeed (PCHAR Seed);\nNTSTATUS NtSetVolumeInformationFile (HANDLE FileHandle, PIO_STATUS_BLOCK IoStatusBlock, PVOID FsInformation, ULONG Length, FS_INFORMATION_CLASS FsInformationClass);\nNTSTATUS NtShutdownSystem (SHUTDOWN_ACTION Action);\nNTSTATUS NtSignalAndWaitForSingleObject (HANDLE SignalHandle, HANDLE WaitHandle, BOOLEAN Alertable, PLARGE_INTEGER Timeout);\nNTSTATUS NtStartProfile (HANDLE ProfileHandle);\nNTSTATUS NtStopProfile (HANDLE ProfileHandle);\nNTSTATUS NtSuspendProcess (HANDLE ProcessHandle);\nNTSTATUS NtSuspendThread (HANDLE ThreadHandle, PULONG PreviousSuspendCount);\nNTSTATUS NtSystemDebugControl (SYSDBG_COMMAND Command, PVOID InputBuffer, ULONG InputBufferLength, PVOID OutputBuffer, ULONG OutputBufferLength, PULONG ReturnLength);\nNTSTATUS NtTerminateJobObject (HANDLE JobHandle, NTSTATUS ExitStatus);\nNTSTATUS NtTestAlert ();\nNTSTATUS NtTranslateFilePath (PFILE_PATH InputFilePath, ULONG OutputType, PFILE_PATH OutputFilePath, PULONG OutputFilePathLength);\nNTSTATUS NtUnloadDriver (PUNICODE_STRING DriverServiceName);\nNTSTATUS NtUnloadKey (POBJECT_ATTRIBUTES TargetKey);\nNTSTATUS NtUnloadKey2 (POBJECT_ATTRIBUTES TargetKey, ULONG Flags);\nNTSTATUS NtUnloadKeyEx (POBJECT_ATTRIBUTES TargetKey, HANDLE Event);\nNTSTATUS NtUnlockFile (HANDLE FileHandle, PIO_STATUS_BLOCK IoStatusBlock, PLARGE_INTEGER ByteOffset, PLARGE_INTEGER Length, ULONG Key);\nNTSTATUS NtUnlockVirtualMemory (HANDLE ProcessHandle, PVOID *BaseAddress, PSIZE_T RegionSize, ULONG MapType);\nNTSTATUS NtVdmControl (VDMSERVICECLASS Service, PVOID ServiceData);\nNTSTATUS NtWaitForDebugEvent (HANDLE DebugObjectHandle, BOOLEAN Alertable, PLARGE_INTEGER Timeout, PDBGUI_WAIT_STATE_CHANGE WaitStateChange);\nNTSTATUS NtWaitForKeyedEvent (HANDLE KeyedEventHandle, PVOID KeyValue, BOOLEAN Alertable, PLARGE_INTEGER Timeout);\nNTSTATUS NtWaitHighEventPair (HANDLE EventPairHandle);\nNTSTATUS NtWaitLowEventPair (HANDLE EventPairHandle);\n```\n\n----------------------------------------\n\nTITLE: Declaring System Control and Memory Locking System Calls in C\nDESCRIPTION: This snippet declares system calls for system control (__sysctl) and memory locking operations (mlock, munlock). It includes function signatures with their respective parameters and return types.\nSOURCE: https://github.com/panda-re/panda-ng/blob/main/plugins/syscalls2/generated-in/freebsd_x64_prototypes.txt#_snippet_15\n\nLANGUAGE: C\nCODE:\n```\nint __sysctl(int *name, unsigned namelen, void *old, size_t *oldlenp, const void *new, size_t newlen);\nint mlock(const void *addr, size_t len);\nint munlock(const void *addr, size_t len);\nint undelete(const char *path);\nint futimes(int fd, struct timeval *tptr);\nint getpgid(pid_t pid);\nint poll(struct pollfd *fds, unsigned nfds, int timeout);\n```\n\n----------------------------------------\n\nTITLE: Windows NT Object Management Function Declarations (C)\nDESCRIPTION: Declarations for NT API functions that handle generic object management, including querying object information and symbolic links. These functions provide access to the NT object manager's core functionality.\nSOURCE: https://github.com/panda-re/panda-ng/blob/main/plugins/syscalls2/generated-in/windows_vistasp0_x86_prototypes.txt#_snippet_17\n\nLANGUAGE: C\nCODE:\n```\nNTSTATUS NtQueryObject (HANDLE Handle, OBJECT_INFORMATION_CLASS ObjectInformationClass, PVOID ObjectInformation, ULONG ObjectInformationLength, PULONG ReturnLength);\nNTSTATUS NtQuerySecurityObject (HANDLE Handle, SECURITY_INFORMATION SecurityInformation, PSECURITY_DESCRIPTOR SecurityDescriptor, ULONG Length, PULONG LengthNeeded);\nNTSTATUS NtQuerySymbolicLinkObject (HANDLE LinkHandle, PUNICODE_STRING LinkTarget, PULONG ReturnedLength);\n```\n\n----------------------------------------\n\nTITLE: Declaring Windows NT Native API Query Functions in C\nDESCRIPTION: This snippet declares multiple prototypes for Native API functions that query information about various kernel-managed objects on Windows, such as files, processes, resource managers, jobs, and events. Each function returns NTSTATUS and accepts handles and pointers to structures as parameters, enabling granular retrieval of system object details. No dependencies are included beyond standard Windows NT types, but callers are expected to include headers defining all referenced types. Inputs and outputs are function-specific handles, buffer pointers, lengths, and structure pointers; proper privilege is required to call these functions, and error handling must be implemented by the caller.\nSOURCE: https://github.com/panda-re/panda-ng/blob/main/plugins/syscalls2/generated-in/windows_8sp0_x86_prototypes.txt#_snippet_2\n\nLANGUAGE: C\nCODE:\n```\nNTSTATUS NtQueryInformationResourceManager (HANDLE ResourceManagerHandle, RESOURCEMANAGER_INFORMATION_CLASS ResourceManagerInformationClass, PVOID ResourceManagerInformation, ULONG ResourceManagerInformationLength, PULONG ReturnLength);\nNTSTATUS NtQueryInformationProcess (HANDLE ProcessHandle, PROCESSINFOCLASS ProcessInformationClass, PVOID ProcessInformation, ULONG ProcessInformationLength, PULONG ReturnLength);\nNTSTATUS NtQueryInformationPort (HANDLE PortHandle, PORT_INFORMATION_CLASS PortInformationClass, PVOID PortInformation, ULONG Length, PULONG ReturnLength);\nNTSTATUS NtQueryInformationJobObject (HANDLE JobHandle, JOBOBJECTINFOCLASS JobObjectInformationClass, PVOID JobObjectInformation, ULONG JobObjectInformationLength, PULONG ReturnLength);\nNTSTATUS NtQueryInformationFile (HANDLE FileHandle, PIO_STATUS_BLOCK IoStatusBlock, PVOID FileInformation, ULONG Length, FILE_INFORMATION_CLASS FileInformationClass);\nNTSTATUS NtQueryInformationEnlistment (HANDLE EnlistmentHandle, ENLISTMENT_INFORMATION_CLASS EnlistmentInformationClass, PVOID EnlistmentInformation, ULONG EnlistmentInformationLength, PULONG ReturnLength);\nNTSTATUS NtQueryInformationAtom (RTL_ATOM Atom, ATOM_INFORMATION_CLASS InformationClass, PVOID AtomInformation, ULONG AtomInformationLength, PULONG ReturnLength);\nNTSTATUS NtQueryFullAttributesFile (POBJECT_ATTRIBUTES ObjectAttributes, PFILE_NETWORK_OPEN_INFORMATION FileInformation);\nNTSTATUS NtQueryEvent (HANDLE EventHandle, EVENT_INFORMATION_CLASS EventInformationClass, PVOID EventInformation, ULONG EventInformationLength, PULONG ReturnLength);\nNTSTATUS NtQueryEaFile (HANDLE FileHandle, PIO_STATUS_BLOCK IoStatusBlock, PVOID Buffer, ULONG Length, BOOLEAN ReturnSingleEntry, PVOID EaList, ULONG EaListLength, PULONG EaIndex, BOOLEAN RestartScan);\nNTSTATUS NtQueryDriverEntryOrder (PULONG Ids, PULONG Count);\nNTSTATUS NtQueryDirectoryObject (HANDLE DirectoryHandle, PVOID Buffer, ULONG Length, BOOLEAN ReturnSingleEntry, BOOLEAN RestartScan, PULONG Context, PULONG ReturnLength);\nNTSTATUS NtQueryDirectoryFile (HANDLE FileHandle, HANDLE Event, PIO_APC_ROUTINE ApcRoutine, PVOID ApcContext, PIO_STATUS_BLOCK IoStatusBlock, PVOID FileInformation, ULONG Length, FILE_INFORMATION_CLASS FileInformationClass, BOOLEAN ReturnSingleEntry, PUNICODE_STRING FileName, BOOLEAN RestartScan);\nNTSTATUS NtQueryDefaultUILanguage (LANGID *DefaultUILanguageId);\nNTSTATUS NtQueryDefaultLocale (BOOLEAN UserProfile, PLCID DefaultLocaleId);\nNTSTATUS NtQueryDebugFilterState (ULONG ComponentId, ULONG Level);\nNTSTATUS NtQueryBootOptions (PBOOT_OPTIONS BootOptions, PULONG BootOptionsLength);\nNTSTATUS NtQueryBootEntryOrder (PULONG Ids, PULONG Count);\nNTSTATUS NtQueryAttributesFile (POBJECT_ATTRIBUTES ObjectAttributes, PFILE_BASIC_INFORMATION FileInformation);\n```\n\n----------------------------------------\n\nTITLE: Windows NT File System Operations\nDESCRIPTION: System calls for file and volume operations including file creation, querying volume information, and buffer management.\nSOURCE: https://github.com/panda-re/panda-ng/blob/main/plugins/syscalls2/generated-in/windows_vistasp12_x64_prototypes.txt#_snippet_2\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtCreateFile (PHANDLE FileHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, PIO_STATUS_BLOCK IoStatusBlock, PLARGE_INTEGER AllocationSize, ULONG FileAttributes, ULONG ShareAccess, ULONG CreateDisposition, ULONG CreateOptions, PVOID EaBuffer, ULONG EaLength);\nNTSTATUS NtQueryVolumeInformationFile (HANDLE FileHandle, PIO_STATUS_BLOCK IoStatusBlock, PVOID FsInformation, ULONG Length, FS_INFORMATION_CLASS FsInformationClass);\nNTSTATUS NtFlushBuffersFile (HANDLE FileHandle, PIO_STATUS_BLOCK IoStatusBlock);\n```\n\n----------------------------------------\n\nTITLE: Declaring Time-Related System Calls in C\nDESCRIPTION: This snippet declares system calls for time-related operations, including clock management, timers, and sleep functions. It includes function signatures with their respective parameters and return types.\nSOURCE: https://github.com/panda-re/panda-ng/blob/main/plugins/syscalls2/generated-in/freebsd_x64_prototypes.txt#_snippet_17\n\nLANGUAGE: C\nCODE:\n```\nint clock_gettime(clockid_t clock_id, struct timespec *tp);\nint clock_settime(clockid_t clock_id, const struct timespec *tp);\nint clock_getres(clockid_t clock_id, struct timespec *tp);\nint ktimer_create(clockid_t clock_id, struct sigevent *evp, int *timerid);\nint ktimer_delete(int timerid);\nint ktimer_settime(int timerid, int flags, const struct itimerspec *value, struct itimerspec *ovalue);\nint ktimer_gettime(int timerid, struct itimerspec *value);\nint ktimer_getoverrun(int timerid);\nint nanosleep(const struct timespec *rqtp, struct timespec *rmtp);\nint ffclock_getcounter(ffcounter *ffcount);\nint ffclock_setestimate(struct ffclock_estimate *cest);\nint ffclock_getestimate(struct ffclock_estimate *cest);\nint clock_nanosleep(clockid_t clock_id, int flags, const struct timespec *rqtp, struct timespec *rmtp);\n\nint clock_getcpuclockid2(id_t id, int which, clockid_t *clock_id);\nint ntp_gettime(struct ntptimeval *ntvp);\n```\n\n----------------------------------------\n\nTITLE: Declaring Windows NT Native API Function Prototypes in C\nDESCRIPTION: This code snippet declares a set of NTSTATUS-returning function prototypes corresponding to Windows NT Native API system calls. These declarations are meant for inclusion in a C or C++ header file and allow user applications or subsystems to reference kernel interfaces for operations like process/thread control, file I/O, security, and system management. No dependencies are required beyond Windows NT native types; usage of these functions requires appropriate system privileges and is generally restricted to low-level system code or drivers.\nSOURCE: https://github.com/panda-re/panda-ng/blob/main/plugins/syscalls2/generated-in/windows_vistasp0_x86_prototypes.txt#_snippet_18\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtSetBootEntryOrder (PULONG Ids, ULONG Count);\nNTSTATUS NtSetBootOptions (PBOOT_OPTIONS BootOptions, ULONG FieldsToChange);\nNTSTATUS NtSetContextThread (HANDLE ThreadHandle, PCONTEXT ThreadContext);\nNTSTATUS NtSetDebugFilterState (ULONG ComponentId, ULONG Level, BOOLEAN State);\nNTSTATUS NtSetDefaultHardErrorPort (HANDLE DefaultHardErrorPort);\nNTSTATUS NtSetDefaultLocale (BOOLEAN UserProfile, LCID DefaultLocaleId);\nNTSTATUS NtSetDefaultUILanguage (LANGID DefaultUILanguageId);\nNTSTATUS NtSetDriverEntryOrder (PULONG Ids, ULONG Count);\nNTSTATUS NtSetEaFile (HANDLE FileHandle, PIO_STATUS_BLOCK IoStatusBlock, PVOID Buffer, ULONG Length);\nNTSTATUS NtSetEvent (HANDLE EventHandle, PLONG PreviousState);\nNTSTATUS NtSetEventBoostPriority (HANDLE EventHandle);\nNTSTATUS NtSetHighEventPair (HANDLE EventPairHandle);\nNTSTATUS NtSetHighWaitLowEventPair (HANDLE EventPairHandle);\nNTSTATUS NtSetInformationDebugObject (HANDLE DebugObjectHandle, DEBUGOBJECTINFOCLASS DebugObjectInformationClass, PVOID DebugInformation, ULONG DebugInformationLength, PULONG ReturnLength);\nNTSTATUS NtSetInformationFile (HANDLE FileHandle, PIO_STATUS_BLOCK IoStatusBlock, PVOID FileInformation, ULONG Length, FILE_INFORMATION_CLASS FileInformationClass);\nNTSTATUS NtSetInformationJobObject (HANDLE JobHandle, JOBOBJECTINFOCLASS JobObjectInformationClass, PVOID JobObjectInformation, ULONG JobObjectInformationLength);\nNTSTATUS NtSetInformationKey (HANDLE KeyHandle, KEY_SET_INFORMATION_CLASS KeySetInformationClass, PVOID KeySetInformation, ULONG KeySetInformationLength);\nNTSTATUS NtSetInformationObject (HANDLE Handle, OBJECT_INFORMATION_CLASS ObjectInformationClass, PVOID ObjectInformation, ULONG ObjectInformationLength);\nNTSTATUS NtSetInformationProcess (HANDLE ProcessHandle, PROCESSINFOCLASS ProcessInformationClass, PVOID ProcessInformation, ULONG ProcessInformationLength);\nNTSTATUS NtSetInformationThread (HANDLE ThreadHandle, THREADINFOCLASS ThreadInformationClass, PVOID ThreadInformation, ULONG ThreadInformationLength);\nNTSTATUS NtSetInformationToken (HANDLE TokenHandle, TOKEN_INFORMATION_CLASS TokenInformationClass, PVOID TokenInformation, ULONG TokenInformationLength);\nNTSTATUS NtSetIntervalProfile (ULONG Interval, KPROFILE_SOURCE Source);\nNTSTATUS NtSetIoCompletion (HANDLE IoCompletionHandle, PVOID KeyContext, PVOID ApcContext, NTSTATUS IoStatus, ULONG_PTR IoStatusInformation);\nNTSTATUS NtSetLdtEntries (ULONG Selector0, ULONG Entry0Low, ULONG Entry0Hi, ULONG Selector1, ULONG Entry1Low, ULONG Entry1Hi);\nNTSTATUS NtSetLowEventPair (HANDLE EventPairHandle);\nNTSTATUS NtSetLowWaitHighEventPair (HANDLE EventPairHandle);\nNTSTATUS NtSetQuotaInformationFile (HANDLE FileHandle, PIO_STATUS_BLOCK IoStatusBlock, PVOID Buffer, ULONG Length);\nNTSTATUS NtSetSecurityObject (HANDLE Handle, SECURITY_INFORMATION SecurityInformation, PSECURITY_DESCRIPTOR SecurityDescriptor);\nNTSTATUS NtSetSystemEnvironmentValue (PUNICODE_STRING VariableName, PUNICODE_STRING VariableValue);\nNTSTATUS NtSetSystemEnvironmentValueEx (PUNICODE_STRING VariableName, LPGUID VendorGuid, PVOID Value, ULONG ValueLength, ULONG Attributes);\nNTSTATUS NtSetSystemInformation (SYSTEM_INFORMATION_CLASS SystemInformationClass, PVOID SystemInformation, ULONG SystemInformationLength);\nNTSTATUS NtSetSystemPowerState (POWER_ACTION SystemAction, SYSTEM_POWER_STATE MinSystemState, ULONG Flags);\nNTSTATUS NtSetSystemTime (PLARGE_INTEGER SystemTime, PLARGE_INTEGER PreviousTime);\nNTSTATUS NtSetThreadExecutionState (EXECUTION_STATE esFlags, PEXECUTION_STATE PreviousFlags);\nNTSTATUS NtSetTimer (HANDLE TimerHandle, PLARGE_INTEGER DueTime, PTIMER_APC_ROUTINE TimerApcRoutine, PVOID TimerContext, BOOLEAN WakeTimer, LONG Period, PBOOLEAN PreviousState);\nNTSTATUS NtSetTimerResolution (ULONG DesiredTime, BOOLEAN SetResolution, PULONG ActualTime);\nNTSTATUS NtSetUuidSeed (PCHAR Seed);\nNTSTATUS NtSetValueKey (HANDLE KeyHandle, PUNICODE_STRING ValueName, ULONG TitleIndex, ULONG Type, PVOID Data, ULONG DataSize);\nNTSTATUS NtSetVolumeInformationFile (HANDLE FileHandle, PIO_STATUS_BLOCK IoStatusBlock, PVOID FsInformation, ULONG Length, FS_INFORMATION_CLASS FsInformationClass);\nNTSTATUS NtShutdownSystem (SHUTDOWN_ACTION Action);\nNTSTATUS NtSignalAndWaitForSingleObject (HANDLE SignalHandle, HANDLE WaitHandle, BOOLEAN Alertable, PLARGE_INTEGER Timeout);\nNTSTATUS NtStartProfile (HANDLE ProfileHandle);\nNTSTATUS NtStopProfile (HANDLE ProfileHandle);\nNTSTATUS NtSuspendProcess (HANDLE ProcessHandle);\nNTSTATUS NtSuspendThread (HANDLE ThreadHandle, PULONG PreviousSuspendCount);\nNTSTATUS NtSystemDebugControl (SYSDBG_COMMAND Command, PVOID InputBuffer, ULONG InputBufferLength, PVOID OutputBuffer, ULONG OutputBufferLength, PULONG ReturnLength);\nNTSTATUS NtTerminateJobObject (HANDLE JobHandle, NTSTATUS ExitStatus);\nNTSTATUS NtTerminateProcess (HANDLE ProcessHandle, NTSTATUS ExitStatus);\nNTSTATUS NtTerminateThread (HANDLE ThreadHandle, NTSTATUS ExitStatus);\nNTSTATUS NtTestAlert ();\nNTSTATUS NtThawRegistry ();\nNTSTATUS NtThawTransactions ();\nNTSTATUS NtTraceEvent (HANDLE TraceHandle, ULONG Flags, ULONG FieldSize, PVOID Fields);\nNTSTATUS NtTraceControl (ULONG FunctionCode, PVOID InBuffer, ULONG InBufferLen, PVOID OutBuffer, ULONG OutBufferLen, PULONG ReturnLength);\nNTSTATUS NtTranslateFilePath (PFILE_PATH InputFilePath, ULONG OutputType, PFILE_PATH OutputFilePath, PULONG OutputFilePathLength);\nNTSTATUS NtUnloadDriver (PUNICODE_STRING DriverServiceName);\nNTSTATUS NtUnloadKey (POBJECT_ATTRIBUTES TargetKey);\nNTSTATUS NtUnloadKey2 (POBJECT_ATTRIBUTES TargetKey, ULONG Flags);\nNTSTATUS NtUnloadKeyEx (POBJECT_ATTRIBUTES TargetKey, HANDLE Event);\nNTSTATUS NtUnlockFile (HANDLE FileHandle, PIO_STATUS_BLOCK IoStatusBlock, PLARGE_INTEGER ByteOffset, PLARGE_INTEGER Length, ULONG Key);\nNTSTATUS NtUnlockVirtualMemory (HANDLE ProcessHandle, PVOID *BaseAddress, PSIZE_T RegionSize, ULONG MapType);\nNTSTATUS NtUnmapViewOfSection (HANDLE ProcessHandle, PVOID BaseAddress);\nNTSTATUS NtVdmControl (VDMSERVICECLASS Service, PVOID ServiceData);\nNTSTATUS NtWaitForDebugEvent (HANDLE DebugObjectHandle, BOOLEAN Alertable, PLARGE_INTEGER Timeout, PDBGUI_WAIT_STATE_CHANGE WaitStateChange);\nNTSTATUS NtWaitForMultipleObjects (ULONG Count, HANDLE Handles[], WAIT_TYPE WaitType, BOOLEAN Alertable, PLARGE_INTEGER Timeout);\nNTSTATUS NtWaitForSingleObject (HANDLE Handle, BOOLEAN Alertable, PLARGE_INTEGER Timeout);\nNTSTATUS NtWaitHighEventPair (HANDLE EventPairHandle);\nNTSTATUS NtWaitLowEventPair (HANDLE EventPairHandle);\nNTSTATUS NtWriteFile (HANDLE FileHandle, HANDLE Event, PIO_APC_ROUTINE ApcRoutine, PVOID ApcContext, PIO_STATUS_BLOCK IoStatusBlock, PVOID Buffer, ULONG Length, PLARGE_INTEGER ByteOffset, PULONG Key);\nNTSTATUS NtWriteFileGather (HANDLE FileHandle, HANDLE Event, PIO_APC_ROUTINE ApcRoutine, PVOID ApcContext, PIO_STATUS_BLOCK IoStatusBlock, PFILE_SEGMENT_ELEMENT SegmentArray, ULONG Length, PLARGE_INTEGER ByteOffset, PULONG Key);\nNTSTATUS NtWriteRequestData (HANDLE PortHandle, PPORT_MESSAGE Message, ULONG DataEntryIndex, PVOID Buffer, SIZE_T BufferSize, PSIZE_T NumberOfBytesWritten);\nNTSTATUS NtWriteVirtualMemory (HANDLE ProcessHandle, PVOID BaseAddress, PVOID Buffer, SIZE_T BufferSize, PSIZE_T NumberOfBytesWritten);\nNTSTATUS NtYieldExecution ();\nNTSTATUS NtCreateKeyedEvent (PHANDLE KeyedEventHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, ULONG Flags);\nNTSTATUS NtOpenKeyedEvent (PHANDLE KeyedEventHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes);\nNTSTATUS NtReleaseKeyedEvent (HANDLE KeyedEventHandle, PVOID KeyValue, BOOLEAN Alertable, PLARGE_INTEGER Timeout);\nNTSTATUS NtWaitForKeyedEvent (HANDLE KeyedEventHandle, PVOID KeyValue, BOOLEAN Alertable, PLARGE_INTEGER Timeout);\nNTSTATUS NtQueryPortInformationProcess ();\nULONG NtGetCurrentProcessorNumber ();\nNTSTATUS NtWaitForMultipleObjects32 (ULONG Count, LONG Handles[], WAIT_TYPE WaitType, BOOLEAN Alertable, PLARGE_INTEGER Timeout);\nNTSTATUS NtGetNextProcess (HANDLE ProcessHandle, ACCESS_MASK DesiredAccess, ULONG HandleAttributes, ULONG Flags, PHANDLE NewProcessHandle);\nNTSTATUS NtGetNextThread (HANDLE ProcessHandle, HANDLE ThreadHandle, ACCESS_MASK DesiredAccess, ULONG HandleAttributes, ULONG Flags, PHANDLE NewThreadHandle);\nNTSTATUS NtCancelIoFileEx (HANDLE FileHandle, PIO_STATUS_BLOCK IoRequestToCancel, PIO_STATUS_BLOCK IoStatusBlock);\nNTSTATUS NtCancelSynchronousIoFile (HANDLE ThreadHandle, PIO_STATUS_BLOCK IoRequestToCancel, PIO_STATUS_BLOCK IoStatusBlock);\nNTSTATUS NtRemoveIoCompletionEx (HANDLE IoCompletionHandle, PFILE_IO_COMPLETION_INFORMATION IoCompletionInformation, ULONG Count, PULONG NumEntriesRemoved, PLARGE_INTEGER Timeout, BOOLEAN Alertable);\nNTSTATUS NtRegisterProtocolAddressInformation (HANDLE ResourceManager, PCRM_PROTOCOL_ID ProtocolId, ULONG ProtocolInformationSize, PVOID ProtocolInformation, ULONG CreateOptions);\nNTSTATUS NtPropagationComplete (HANDLE ResourceManagerHandle, ULONG RequestCookie, ULONG BufferLength, PVOID Buffer);\nNTSTATUS NtPropagationFailed (HANDLE ResourceManagerHandle, ULONG RequestCookie, NTSTATUS PropStatus);\nNTSTATUS NtCreateWorkerFactory (PHANDLE WorkerFactoryHandleReturn, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, HANDLE CompletionPortHandle, HANDLE WorkerProcessHandle, PVOID StartRoutine, PVOID StartParameter, ULONG MaxThreadCount, SIZE_T StackReserve, SIZE_T StackCommit);\nNTSTATUS NtReleaseWorkerFactoryWorker (HANDLE WorkerFactoryHandle);\nNTSTATUS NtWaitForWorkViaWorkerFactory (HANDLE WorkerFactoryHandle, PFILE_IO_COMPLETION_INFORMATION MiniPacket);\n```\n\n----------------------------------------\n\nTITLE: Declaring Windows NT System Call Prototypes in C\nDESCRIPTION: This code snippet is a collection of C-language function prototypes representing direct Windows NT system calls. These functions provide unmediated access to kernel services such as ALPC port operations, process and job object management, memory, registry, and file I/O controls. The dependencies include definitions for HANDLE, NTSTATUS, and various Windows-specific structs and types, typically provided by Windows SDK or DDK headers. Each function specifies its required parameters—most are pointers or handles—allowing low-level code to interact with the Windows kernel. Inputs are specific to each system call (such as handles, object attributes, or message structures), and outputs are generally an NTSTATUS indicating success or failure. Usage requires linking against ntdll.dll or providing implementations, and improper use may cause system instability.\nSOURCE: https://github.com/panda-re/panda-ng/blob/main/plugins/syscalls2/generated-in/windows_7_x64_prototypes.txt#_snippet_2\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtAlpcRevokeSecurityContext (HANDLE PortHandle, ULONG Flags, ALPC_HANDLE ContextHandle);\nNTSTATUS NtAlpcSendWaitReceivePort (HANDLE PortHandle, ULONG Flags, PPORT_MESSAGE SendMessage, PALPC_MESSAGE_ATTRIBUTES SendMessageAttributes, PPORT_MESSAGE ReceiveMessage, PULONG BufferLength, PALPC_MESSAGE_ATTRIBUTES ReceiveMessageAttributes, PLARGE_INTEGER Timeout);\nNTSTATUS NtAlpcSetInformation (HANDLE PortHandle, ALPC_PORT_INFORMATION_CLASS PortInformationClass, PVOID PortInformation, ULONG Length);\nNTSTATUS NtAreMappedFilesTheSame (PVOID File1MappedAsAnImage, PVOID File2MappedAsFile);\nNTSTATUS NtAssignProcessToJobObject (HANDLE JobHandle, HANDLE ProcessHandle);\nNTSTATUS NtCancelIoFileEx (HANDLE FileHandle, PIO_STATUS_BLOCK IoRequestToCancel, PIO_STATUS_BLOCK IoStatusBlock);\nNTSTATUS NtCancelSynchronousIoFile (HANDLE ThreadHandle, PIO_STATUS_BLOCK IoRequestToCancel, PIO_STATUS_BLOCK IoStatusBlock);\nNTSTATUS NtCommitComplete (HANDLE EnlistmentHandle, PLARGE_INTEGER TmVirtualClock);\nNTSTATUS NtCommitEnlistment (HANDLE EnlistmentHandle, PLARGE_INTEGER TmVirtualClock);\nNTSTATUS NtCommitTransaction (HANDLE TransactionHandle, BOOLEAN Wait);\nNTSTATUS NtCompactKeys (ULONG Count, HANDLE KeyArray[]);\nNTSTATUS NtCompareTokens (HANDLE FirstTokenHandle, HANDLE SecondTokenHandle, PBOOLEAN Equal);\nNTSTATUS NtCompleteConnectPort (HANDLE PortHandle);\nNTSTATUS NtCompressKey (HANDLE Key);\nNTSTATUS NtConnectPort (PHANDLE PortHandle, PUNICODE_STRING PortName, PSECURITY_QUALITY_OF_SERVICE SecurityQos, PPORT_VIEW ClientView, PREMOTE_PORT_VIEW ServerView, PULONG MaxMessageLength, PVOID ConnectionInformation, PULONG ConnectionInformationLength);\nNTSTATUS NtCreateDebugObject (PHANDLE DebugObjectHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, ULONG Flags);\nNTSTATUS NtCreateDirectoryObject (PHANDLE DirectoryHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes);\nNTSTATUS NtCreateEnlistment (PHANDLE EnlistmentHandle, ACCESS_MASK DesiredAccess, HANDLE ResourceManagerHandle, HANDLE TransactionHandle, POBJECT_ATTRIBUTES ObjectAttributes, ULONG CreateOptions, NOTIFICATION_MASK NotificationMask, PVOID EnlistmentKey);\nNTSTATUS NtCreateEventPair (PHANDLE EventPairHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes);\nNTSTATUS NtCreateIoCompletion (PHANDLE IoCompletionHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, ULONG Count);\nNTSTATUS NtCreateJobObject (PHANDLE JobHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes);\nNTSTATUS NtCreateJobSet (ULONG NumJob, PJOB_SET_ARRAY UserJobSet, ULONG Flags);\nNTSTATUS NtCreateKeyTransacted (PHANDLE KeyHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, ULONG TitleIndex, PUNICODE_STRING Class, ULONG CreateOptions, HANDLE TransactionHandle, PULONG Disposition);\nNTSTATUS NtCreateKeyedEvent (PHANDLE KeyedEventHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, ULONG Flags);\nNTSTATUS NtCreateMailslotFile (PHANDLE FileHandle, ULONG DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, PIO_STATUS_BLOCK IoStatusBlock, ULONG CreateOptions, ULONG MailslotQuota, ULONG MaximumMessageSize, PLARGE_INTEGER ReadTimeout);\nNTSTATUS NtCreateMutant (PHANDLE MutantHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, BOOLEAN InitialOwner);\nNTSTATUS NtCreateNamedPipeFile (PHANDLE FileHandle, ULONG DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, PIO_STATUS_BLOCK IoStatusBlock, ULONG ShareAccess, ULONG CreateDisposition, ULONG CreateOptions, ULONG NamedPipeType, ULONG ReadMode, ULONG CompletionMode, ULONG MaximumInstances, ULONG InboundQuota, ULONG OutboundQuota, PLARGE_INTEGER DefaultTimeout);\nNTSTATUS NtCreatePagingFile (PUNICODE_STRING PageFileName, PLARGE_INTEGER MinimumSize, PLARGE_INTEGER MaximumSize, ULONG Priority);\nNTSTATUS NtCreatePort (PHANDLE PortHandle, POBJECT_ATTRIBUTES ObjectAttributes, ULONG MaxConnectionInfoLength, ULONG MaxMessageLength, ULONG MaxPoolUsage);\nNTSTATUS NtCreatePrivateNamespace (PHANDLE NamespaceHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, PVOID BoundaryDescriptor);\nNTSTATUS NtCreateProcess (PHANDLE ProcessHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, HANDLE ParentProcess, BOOLEAN InheritObjectTable, HANDLE SectionHandle, HANDLE DebugPort, HANDLE ExceptionPort);\nNTSTATUS NtCreateProfile (PHANDLE ProfileHandle, HANDLE Process, PVOID RangeBase, SIZE_T RangeSize, ULONG BucketSize, PULONG Buffer, ULONG BufferSize, KPROFILE_SOURCE ProfileSource, KAFFINITY Affinity);\nNTSTATUS NtCreateProfileEx (PHANDLE ProfileHandle, HANDLE Process, PVOID ProfileBase, SIZE_T ProfileSize, ULONG BucketSize, PULONG Buffer, ULONG BufferSize, KPROFILE_SOURCE ProfileSource, ULONG GroupAffinityCount, PGROUP_AFFINITY GroupAffinity);\nNTSTATUS NtCreateResourceManager (PHANDLE ResourceManagerHandle, ACCESS_MASK DesiredAccess, HANDLE TmHandle, LPGUID RmGuid, POBJECT_ATTRIBUTES ObjectAttributes, ULONG CreateOptions, PUNICODE_STRING Description);\nNTSTATUS NtCreateSemaphore (PHANDLE SemaphoreHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, LONG InitialCount, LONG MaximumCount);\nNTSTATUS NtCreateSymbolicLinkObject (PHANDLE LinkHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, PUNICODE_STRING LinkTarget);\nNTSTATUS NtCreateThreadEx (PHANDLE ThreadHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, HANDLE ProcessHandle, PVOID StartRoutine, PVOID Argument, ULONG CreateFlags, ULONG_PTR ZeroBits, SIZE_T StackSize, SIZE_T MaximumStackSize, PPS_ATTRIBUTE_LIST AttributeList);\nNTSTATUS NtCreateTimer (PHANDLE TimerHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, TIMER_TYPE TimerType);\nNTSTATUS NtCreateToken (PHANDLE TokenHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, TOKEN_TYPE TokenType, PLUID AuthenticationId, PLARGE_INTEGER ExpirationTime, PTOKEN_USER User, PTOKEN_GROUPS Groups, PTOKEN_PRIVILEGES Privileges, PTOKEN_OWNER Owner, PTOKEN_PRIMARY_GROUP PrimaryGroup, PTOKEN_DEFAULT_DACL DefaultDacl, PTOKEN_SOURCE TokenSource);\nNTSTATUS NtCreateTransaction (PHANDLE TransactionHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, LPGUID Uow, HANDLE TmHandle, ULONG CreateOptions, ULONG IsolationLevel, ULONG IsolationFlags, PLARGE_INTEGER Timeout, PUNICODE_STRING Description);\nNTSTATUS NtCreateTransactionManager (PHANDLE TmHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, PUNICODE_STRING LogFileName, ULONG CreateOptions, ULONG CommitStrength);\nNTSTATUS NtCreateUserProcess (PHANDLE ProcessHandle, PHANDLE ThreadHandle, ACCESS_MASK ProcessDesiredAccess, ACCESS_MASK ThreadDesiredAccess, POBJECT_ATTRIBUTES ProcessObjectAttributes, POBJECT_ATTRIBUTES ThreadObjectAttributes, ULONG ProcessFlags, ULONG ThreadFlags, PRTL_USER_PROCESS_PARAMETERS ProcessParameters, PPROCESS_CREATE_INFO CreateInfo, PPROCESS_ATTRIBUTE_LIST AttributeList);\nNTSTATUS NtCreateWaitablePort (PHANDLE PortHandle, POBJECT_ATTRIBUTES ObjectAttributes, ULONG MaxConnectionInfoLength, ULONG MaxMessageLength, ULONG MaxPoolUsage);\nNTSTATUS NtCreateWorkerFactory (PHANDLE WorkerFactoryHandleReturn, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, HANDLE CompletionPortHandle, HANDLE WorkerProcessHandle, PVOID StartRoutine, PVOID StartParameter, ULONG MaxThreadCount, SIZE_T StackReserve, SIZE_T StackCommit);\nNTSTATUS NtDebugActiveProcess (HANDLE ProcessHandle, HANDLE DebugObjectHandle);\nNTSTATUS NtDebugContinue (HANDLE DebugObjectHandle, PCLIENT_ID ClientId, NTSTATUS ContinueStatus);\nNTSTATUS NtDeleteAtom (RTL_ATOM Atom);\nNTSTATUS NtDeleteBootEntry (ULONG Id);\nNTSTATUS NtDeleteDriverEntry (ULONG Id);\nNTSTATUS NtDeleteFile (POBJECT_ATTRIBUTES ObjectAttributes);\nNTSTATUS NtDeleteKey (HANDLE KeyHandle);\nNTSTATUS NtDeleteObjectAuditAlarm (PUNICODE_STRING SubsystemName, PVOID HandleId, BOOLEAN GenerateOnClose);\nNTSTATUS NtDeletePrivateNamespace (HANDLE NamespaceHandle);\nNTSTATUS NtDeleteValueKey (HANDLE KeyHandle, PUNICODE_STRING ValueName);\nNTSTATUS NtDisableLastKnownGood ();\nNTSTATUS NtDisplayString (PUNICODE_STRING String);\nNTSTATUS NtDrawText (PUNICODE_STRING Text);\nNTSTATUS NtEnableLastKnownGood ();\nNTSTATUS NtEnumerateBootEntries (PVOID Buffer, PULONG BufferLength);\nNTSTATUS NtEnumerateDriverEntries (PVOID Buffer, PULONG BufferLength);\nNTSTATUS NtEnumerateSystemEnvironmentValuesEx (ULONG InformationClass, PVOID Buffer, PULONG BufferLength);\nNTSTATUS NtEnumerateTransactionObject (HANDLE RootObjectHandle, KTMOBJECT_TYPE QueryType, PKTMOBJECT_CURSOR ObjectCursor, ULONG ObjectCursorLength, PULONG ReturnLength);\nNTSTATUS NtExtendSection (HANDLE SectionHandle, PLARGE_INTEGER NewSectionSize);\nNTSTATUS NtFilterToken (HANDLE ExistingTokenHandle, ULONG Flags, PTOKEN_GROUPS SidsToDisable, PTOKEN_PRIVILEGES PrivilegesToDelete, PTOKEN_GROUPS RestrictedSids, PHANDLE NewTokenHandle);\nNTSTATUS NtFlushInstallUILanguage (LANGID InstallUILanguage, ULONG SetComittedFlag);\nNTSTATUS NtFlushInstructionCache (HANDLE ProcessHandle, PVOID BaseAddress, SIZE_T Length);\nNTSTATUS NtFlushKey (HANDLE KeyHandle);\nVOID NtFlushProcessWriteBuffers ();\nNTSTATUS NtFlushVirtualMemory (HANDLE ProcessHandle, PVOID *BaseAddress, PSIZE_T RegionSize, PIO_STATUS_BLOCK IoStatus);\nNTSTATUS NtFlushWriteBuffer ();\nNTSTATUS NtFreeUserPhysicalPages (HANDLE ProcessHandle, PULONG_PTR NumberOfPages, PULONG_PTR UserPfnArray);\nNTSTATUS NtFreezeRegistry (ULONG TimeOutInSeconds);\nNTSTATUS NtFreezeTransactions (PLARGE_INTEGER FreezeTimeout, PLARGE_INTEGER ThawTimeout);\nNTSTATUS NtGetContextThread (HANDLE ThreadHandle, PCONTEXT ThreadContext);\nULONG NtGetCurrentProcessorNumber ();\n```\n\n----------------------------------------\n\nTITLE: Declaring Windows NT System Call Prototypes in C\nDESCRIPTION: This snippet declares a comprehensive set of Windows NT native API function prototypes in C, each prefixed with 'Nt'. These declarations are used for interacting directly with kernel-level operating system resources, such as objects, tokens, files, security descriptors, and process/thread control. Every function returns an NTSTATUS result code and uses explicit pointer-based and structure-based parameters for strict typing; no implementation is provided here, and the actual linkage requires linking against appropriate system libraries or dynamically resolving entry points.\nSOURCE: https://github.com/panda-re/panda-ng/blob/main/plugins/syscalls2/generated-in/windows_2000_x86_prototypes.txt#_snippet_0\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtAcceptConnectPort (PHANDLE PortHandle, PVOID PortContext, PPORT_MESSAGE ConnectionRequest, BOOLEAN AcceptConnection, PPORT_VIEW ServerView, PREMOTE_PORT_VIEW ClientView);\nNTSTATUS NtAccessCheck (PSECURITY_DESCRIPTOR SecurityDescriptor, HANDLE ClientToken, ACCESS_MASK DesiredAccess, PGENERIC_MAPPING GenericMapping, PPRIVILEGE_SET PrivilegeSet, PULONG PrivilegeSetLength, PACCESS_MASK GrantedAccess, PNTSTATUS AccessStatus);\nNTSTATUS NtAccessCheckAndAuditAlarm (PUNICODE_STRING SubsystemName, PVOID HandleId, PUNICODE_STRING ObjectTypeName, PUNICODE_STRING ObjectName, PSECURITY_DESCRIPTOR SecurityDescriptor, ACCESS_MASK DesiredAccess, PGENERIC_MAPPING GenericMapping, BOOLEAN ObjectCreation, PACCESS_MASK GrantedAccess, PNTSTATUS AccessStatus, PBOOLEAN GenerateOnClose);\nNTSTATUS NtAccessCheckByType (PSECURITY_DESCRIPTOR SecurityDescriptor, PSID PrincipalSelfSid, HANDLE ClientToken, ACCESS_MASK DesiredAccess, POBJECT_TYPE_LIST ObjectTypeList, ULONG ObjectTypeListLength, PGENERIC_MAPPING GenericMapping, PPRIVILEGE_SET PrivilegeSet, PULONG PrivilegeSetLength, PACCESS_MASK GrantedAccess, PNTSTATUS AccessStatus);\nNTSTATUS NtAccessCheckByTypeAndAuditAlarm (PUNICODE_STRING SubsystemName, PVOID HandleId, PUNICODE_STRING ObjectTypeName, PUNICODE_STRING ObjectName, PSECURITY_DESCRIPTOR SecurityDescriptor, PSID PrincipalSelfSid, ACCESS_MASK DesiredAccess, AUDIT_EVENT_TYPE AuditType, ULONG Flags, POBJECT_TYPE_LIST ObjectTypeList, ULONG ObjectTypeListLength, PGENERIC_MAPPING GenericMapping, BOOLEAN ObjectCreation, PACCESS_MASK GrantedAccess, PNTSTATUS AccessStatus, PBOOLEAN GenerateOnClose);\nNTSTATUS NtAccessCheckByTypeResultList (PSECURITY_DESCRIPTOR SecurityDescriptor, PSID PrincipalSelfSid, HANDLE ClientToken, ACCESS_MASK DesiredAccess, POBJECT_TYPE_LIST ObjectTypeList, ULONG ObjectTypeListLength, PGENERIC_MAPPING GenericMapping, PPRIVILEGE_SET PrivilegeSet, PULONG PrivilegeSetLength, PACCESS_MASK GrantedAccess, PNTSTATUS AccessStatus);\nNTSTATUS NtAccessCheckByTypeResultListAndAuditAlarm (PUNICODE_STRING SubsystemName, PVOID HandleId, PUNICODE_STRING ObjectTypeName, PUNICODE_STRING ObjectName, PSECURITY_DESCRIPTOR SecurityDescriptor, PSID PrincipalSelfSid, ACCESS_MASK DesiredAccess, AUDIT_EVENT_TYPE AuditType, ULONG Flags, POBJECT_TYPE_LIST ObjectTypeList, ULONG ObjectTypeListLength, PGENERIC_MAPPING GenericMapping, BOOLEAN ObjectCreation, PACCESS_MASK GrantedAccess, PNTSTATUS AccessStatus, PBOOLEAN GenerateOnClose);\nNTSTATUS NtAccessCheckByTypeResultListAndAuditAlarmByHandle (PUNICODE_STRING SubsystemName, PVOID HandleId, HANDLE ClientToken, PUNICODE_STRING ObjectTypeName, PUNICODE_STRING ObjectName, PSECURITY_DESCRIPTOR SecurityDescriptor, PSID PrincipalSelfSid, ACCESS_MASK DesiredAccess, AUDIT_EVENT_TYPE AuditType, ULONG Flags, POBJECT_TYPE_LIST ObjectTypeList, ULONG ObjectTypeListLength, PGENERIC_MAPPING GenericMapping, BOOLEAN ObjectCreation, PACCESS_MASK GrantedAccess, PNTSTATUS AccessStatus, PBOOLEAN GenerateOnClose);\nNTSTATUS NtAddAtom (PWSTR AtomName, ULONG Length, PRTL_ATOM Atom);\nNTSTATUS NtAdjustGroupsToken (HANDLE TokenHandle, BOOLEAN ResetToDefault, PTOKEN_GROUPS NewState, ULONG BufferLength, PTOKEN_GROUPS PreviousState, PULONG ReturnLength);\nNTSTATUS NtAdjustPrivilegesToken (HANDLE TokenHandle, BOOLEAN DisableAllPrivileges, PTOKEN_PRIVILEGES NewState, ULONG BufferLength, PTOKEN_PRIVILEGES PreviousState, PULONG ReturnLength);\nNTSTATUS NtAlertResumeThread (HANDLE ThreadHandle, PULONG PreviousSuspendCount);\nNTSTATUS NtAlertThread (HANDLE ThreadHandle);\nNTSTATUS NtAllocateLocallyUniqueId (PLUID Luid);\nNTSTATUS NtAllocateUserPhysicalPages (HANDLE ProcessHandle, PULONG_PTR NumberOfPages, PULONG_PTR UserPfnArray);\nNTSTATUS NtAllocateUuids (PULARGE_INTEGER Time, PULONG Range, PULONG Sequence, PCHAR Seed);\nNTSTATUS NtAllocateVirtualMemory (HANDLE ProcessHandle, PVOID *BaseAddress, ULONG_PTR ZeroBits, PSIZE_T RegionSize, ULONG AllocationType, ULONG Protect);\nNTSTATUS NtAreMappedFilesTheSame (PVOID File1MappedAsAnImage, PVOID File2MappedAsFile);\nNTSTATUS NtAssignProcessToJobObject (HANDLE JobHandle, HANDLE ProcessHandle);\nNTSTATUS NtCallbackReturn (PVOID OutputBuffer, ULONG OutputLength, NTSTATUS Status);\nNTSTATUS NtCancelIoFile (HANDLE FileHandle, PIO_STATUS_BLOCK IoStatusBlock);\nNTSTATUS NtCancelTimer (HANDLE TimerHandle, PBOOLEAN CurrentState);\nNTSTATUS NtClearEvent (HANDLE EventHandle);\nNTSTATUS NtClose (HANDLE Handle);\nNTSTATUS NtCloseObjectAuditAlarm (PUNICODE_STRING SubsystemName, PVOID HandleId, BOOLEAN GenerateOnClose);\nNTSTATUS NtCompleteConnectPort (HANDLE PortHandle);\nNTSTATUS NtConnectPort (PHANDLE PortHandle, PUNICODE_STRING PortName, PSECURITY_QUALITY_OF_SERVICE SecurityQos, PPORT_VIEW ClientView, PREMOTE_PORT_VIEW ServerView, PULONG MaxMessageLength, PVOID ConnectionInformation, PULONG ConnectionInformationLength);\nNTSTATUS NtContinue (PCONTEXT ContextRecord, BOOLEAN TestAlert);\nNTSTATUS NtCreateDirectoryObject (PHANDLE DirectoryHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes);\nNTSTATUS NtCreateEvent (PHANDLE EventHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, EVENT_TYPE EventType, BOOLEAN InitialState);\nNTSTATUS NtCreateEventPair (PHANDLE EventPairHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes);\nNTSTATUS NtCreateFile (PHANDLE FileHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, PIO_STATUS_BLOCK IoStatusBlock, PLARGE_INTEGER AllocationSize, ULONG FileAttributes, ULONG ShareAccess, ULONG CreateDisposition, ULONG CreateOptions, PVOID EaBuffer, ULONG EaLength);\nNTSTATUS NtCreateIoCompletion (PHANDLE IoCompletionHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, ULONG Count);\nNTSTATUS NtCreateJobObject (PHANDLE JobHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes);\nNTSTATUS NtCreateKey (PHANDLE KeyHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, ULONG TitleIndex, PUNICODE_STRING Class, ULONG CreateOptions, PULONG Disposition);\nNTSTATUS NtCreateMailslotFile (PHANDLE FileHandle, ULONG DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, PIO_STATUS_BLOCK IoStatusBlock, ULONG CreateOptions, ULONG MailslotQuota, ULONG MaximumMessageSize, PLARGE_INTEGER ReadTimeout);\nNTSTATUS NtCreateMutant (PHANDLE MutantHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, BOOLEAN InitialOwner);\nNTSTATUS NtCreateNamedPipeFile (PHANDLE FileHandle, ULONG DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, PIO_STATUS_BLOCK IoStatusBlock, ULONG ShareAccess, ULONG CreateDisposition, ULONG CreateOptions, ULONG NamedPipeType, ULONG ReadMode, ULONG CompletionMode, ULONG MaximumInstances, ULONG InboundQuota, ULONG OutboundQuota, PLARGE_INTEGER DefaultTimeout);\nNTSTATUS NtCreatePagingFile (PUNICODE_STRING PageFileName, PLARGE_INTEGER MinimumSize, PLARGE_INTEGER MaximumSize, ULONG Priority);\nNTSTATUS NtCreatePort (PHANDLE PortHandle, POBJECT_ATTRIBUTES ObjectAttributes, ULONG MaxConnectionInfoLength, ULONG MaxMessageLength, ULONG MaxPoolUsage);\nNTSTATUS NtCreateProcess (PHANDLE ProcessHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, HANDLE ParentProcess, BOOLEAN InheritObjectTable, HANDLE SectionHandle, HANDLE DebugPort, HANDLE ExceptionPort);\nNTSTATUS NtCreateProfile (PHANDLE ProfileHandle, HANDLE Process, PVOID RangeBase, SIZE_T RangeSize, ULONG BucketSize, PULONG Buffer, ULONG BufferSize, KPROFILE_SOURCE ProfileSource, KAFFINITY Affinity);\nNTSTATUS NtCreateSection (PHANDLE SectionHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, PLARGE_INTEGER MaximumSize, ULONG SectionPageProtection, ULONG AllocationAttributes, HANDLE FileHandle);\nNTSTATUS NtCreateSemaphore (PHANDLE SemaphoreHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, LONG InitialCount, LONG MaximumCount);\nNTSTATUS NtCreateSymbolicLinkObject (PHANDLE LinkHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, PUNICODE_STRING LinkTarget);\nNTSTATUS NtCreateThread (PHANDLE ThreadHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, HANDLE ProcessHandle, PCLIENT_ID ClientId, PCONTEXT ThreadContext, PINITIAL_TEB InitialTeb, BOOLEAN CreateSuspended);\nNTSTATUS NtCreateTimer (PHANDLE TimerHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, TIMER_TYPE TimerType);\nNTSTATUS NtCreateToken (PHANDLE TokenHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, TOKEN_TYPE TokenType, PLUID AuthenticationId, PLARGE_INTEGER ExpirationTime, PTOKEN_USER User, PTOKEN_GROUPS Groups, PTOKEN_PRIVILEGES Privileges, PTOKEN_OWNER Owner, PTOKEN_PRIMARY_GROUP PrimaryGroup, PTOKEN_DEFAULT_DACL DefaultDacl, PTOKEN_SOURCE TokenSource);\nNTSTATUS NtCreateWaitablePort (PHANDLE PortHandle, POBJECT_ATTRIBUTES ObjectAttributes, ULONG MaxConnectionInfoLength, ULONG MaxMessageLength, ULONG MaxPoolUsage);\nNTSTATUS NtDelayExecution (BOOLEAN Alertable, PLARGE_INTEGER DelayInterval);\nNTSTATUS NtDeleteAtom (RTL_ATOM Atom);\nNTSTATUS NtDeleteFile (POBJECT_ATTRIBUTES ObjectAttributes);\nNTSTATUS NtDeleteKey (HANDLE KeyHandle);\nNTSTATUS NtDeleteObjectAuditAlarm (PUNICODE_STRING SubsystemName, PVOID HandleId, BOOLEAN GenerateOnClose);\nNTSTATUS NtDeleteValueKey (HANDLE KeyHandle, PUNICODE_STRING ValueName);\nNTSTATUS NtDeviceIoControlFile (HANDLE FileHandle, HANDLE Event, PIO_APC_ROUTINE ApcRoutine, PVOID ApcContext, PIO_STATUS_BLOCK IoStatusBlock, ULONG IoControlCode, PVOID InputBuffer, ULONG InputBufferLength, PVOID OutputBuffer, ULONG OutputBufferLength);\nNTSTATUS NtDisplayString (PUNICODE_STRING String);\nNTSTATUS NtDuplicateObject (HANDLE SourceProcessHandle, HANDLE SourceHandle, HANDLE TargetProcessHandle, PHANDLE TargetHandle, ACCESS_MASK DesiredAccess, ULONG HandleAttributes, ULONG Options);\n```\n\n----------------------------------------\n\nTITLE: Defining Thread and Kernel Module Management System Calls in C\nDESCRIPTION: This snippet defines system calls for thread suspension, wake-up, and kernel module unloading operations.\nSOURCE: https://github.com/panda-re/panda-ng/blob/main/plugins/syscalls2/generated-in/freebsd_x64_prototypes.txt#_snippet_35\n\nLANGUAGE: C\nCODE:\n```\nint ksem_timedwait(semid_t id, const struct timespec *abstime);\nint thr_suspend(const struct timespec *timeout);\nint thr_wake(long id);\nint kldunloadf(int fileid, int flags);\n```\n\n----------------------------------------\n\nTITLE: Windows NT Memory Management System Calls\nDESCRIPTION: System calls for managing virtual memory, including allocation, mapping, and querying memory regions\nSOURCE: https://github.com/panda-re/panda-ng/blob/main/plugins/syscalls2/generated-in/windows_vistasp0_x64_prototypes.txt#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nNTSTATUS NtMapUserPhysicalPagesScatter(PVOID *VirtualAddresses, ULONG_PTR NumberOfPages, PULONG_PTR UserPfnArray);\nNTSTATUS NtAllocateVirtualMemory(HANDLE ProcessHandle, PVOID *BaseAddress, ULONG_PTR ZeroBits, PSIZE_T RegionSize, ULONG AllocationType, ULONG Protect);\nNTSTATUS NtFreeVirtualMemory(HANDLE ProcessHandle, PVOID *BaseAddress, PSIZE_T RegionSize, ULONG FreeType);\nNTSTATUS NtQueryVirtualMemory(HANDLE ProcessHandle, PVOID BaseAddress, MEMORY_INFORMATION_CLASS MemoryInformationClass, PVOID MemoryInformation, SIZE_T MemoryInformationLength, PSIZE_T ReturnLength);\n```\n\n----------------------------------------\n\nTITLE: Defining Windows NT Native API Functions (0-68)\nDESCRIPTION: This code snippet defines the function signatures for Windows NT native system calls (NtXxx functions). These functions are part of the Native API that provides direct access to the Windows kernel. Each function returns an NTSTATUS value and has various parameters specific to its operation.\nSOURCE: https://github.com/panda-re/panda-ng/blob/main/plugins/syscalls2/generated-in/windows_7_x64_prototypes.txt#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n0 NTSTATUS NtMapUserPhysicalPagesScatter (PVOID *VirtualAddresses, ULONG_PTR NumberOfPages, PULONG_PTR UserPfnArray);\n1 NTSTATUS NtWaitForSingleObject (HANDLE Handle, BOOLEAN Alertable, PLARGE_INTEGER Timeout);\n2 NTSTATUS NtCallbackReturn (PVOID OutputBuffer, ULONG OutputLength, NTSTATUS Status);\n3 NTSTATUS NtReadFile (HANDLE FileHandle, HANDLE Event, PIO_APC_ROUTINE ApcRoutine, PVOID ApcContext, PIO_STATUS_BLOCK IoStatusBlock, PVOID Buffer, ULONG Length, PLARGE_INTEGER ByteOffset, PULONG Key);\n4 NTSTATUS NtDeviceIoControlFile (HANDLE FileHandle, HANDLE Event, PIO_APC_ROUTINE ApcRoutine, PVOID ApcContext, PIO_STATUS_BLOCK IoStatusBlock, ULONG IoControlCode, PVOID InputBuffer, ULONG InputBufferLength, PVOID OutputBuffer, ULONG OutputBufferLength);\n5 NTSTATUS NtWriteFile (HANDLE FileHandle, HANDLE Event, PIO_APC_ROUTINE ApcRoutine, PVOID ApcContext, PIO_STATUS_BLOCK IoStatusBlock, PVOID Buffer, ULONG Length, PLARGE_INTEGER ByteOffset, PULONG Key);\n6 NTSTATUS NtRemoveIoCompletion (HANDLE IoCompletionHandle, PVOID *KeyContext, PVOID *ApcContext, PIO_STATUS_BLOCK IoStatusBlock, PLARGE_INTEGER Timeout);\n7 NTSTATUS NtReleaseSemaphore (HANDLE SemaphoreHandle, LONG ReleaseCount, PLONG PreviousCount);\n8 NTSTATUS NtReplyWaitReceivePort (HANDLE PortHandle, PVOID *PortContext , PPORT_MESSAGE ReplyMessage, PPORT_MESSAGE ReceiveMessage);\n9 NTSTATUS NtReplyPort (HANDLE PortHandle, PPORT_MESSAGE ReplyMessage);\n10 NTSTATUS NtSetInformationThread (HANDLE ThreadHandle, THREADINFOCLASS ThreadInformationClass, PVOID ThreadInformation, ULONG ThreadInformationLength);\n11 NTSTATUS NtSetEvent (HANDLE EventHandle, PLONG PreviousState);\n12 NTSTATUS NtClose (HANDLE Handle);\n13 NTSTATUS NtQueryObject (HANDLE Handle, OBJECT_INFORMATION_CLASS ObjectInformationClass, PVOID ObjectInformation, ULONG ObjectInformationLength, PULONG ReturnLength);\n14 NTSTATUS NtQueryInformationFile (HANDLE FileHandle, PIO_STATUS_BLOCK IoStatusBlock, PVOID FileInformation, ULONG Length, FILE_INFORMATION_CLASS FileInformationClass);\n15 NTSTATUS NtOpenKey (PHANDLE KeyHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes);\n16 NTSTATUS NtEnumerateValueKey (HANDLE KeyHandle, ULONG Index, KEY_VALUE_INFORMATION_CLASS KeyValueInformationClass, PVOID KeyValueInformation, ULONG Length, PULONG ResultLength);\n17 NTSTATUS NtFindAtom (PWSTR AtomName, ULONG Length, PRTL_ATOM Atom);\n18 NTSTATUS NtQueryDefaultLocale (BOOLEAN UserProfile, PLCID DefaultLocaleId);\n19 NTSTATUS NtQueryKey (HANDLE KeyHandle, KEY_INFORMATION_CLASS KeyInformationClass, PVOID KeyInformation, ULONG Length, PULONG ResultLength);\n20 NTSTATUS NtQueryValueKey (HANDLE KeyHandle, PUNICODE_STRING ValueName, KEY_VALUE_INFORMATION_CLASS KeyValueInformationClass, PVOID KeyValueInformation, ULONG Length, PULONG ResultLength);\n21 NTSTATUS NtAllocateVirtualMemory (HANDLE ProcessHandle, PVOID *BaseAddress, ULONG_PTR ZeroBits, PSIZE_T RegionSize, ULONG AllocationType, ULONG Protect);\n22 NTSTATUS NtQueryInformationProcess (HANDLE ProcessHandle, PROCESSINFOCLASS ProcessInformationClass, PVOID ProcessInformation, ULONG ProcessInformationLength, PULONG ReturnLength);\n23 NTSTATUS NtWaitForMultipleObjects32 (ULONG Count, LONG Handles[], WAIT_TYPE WaitType, BOOLEAN Alertable, PLARGE_INTEGER Timeout);\n24 NTSTATUS NtWriteFileGather (HANDLE FileHandle, HANDLE Event, PIO_APC_ROUTINE ApcRoutine, PVOID ApcContext, PIO_STATUS_BLOCK IoStatusBlock, PFILE_SEGMENT_ELEMENT SegmentArray, ULONG Length, PLARGE_INTEGER ByteOffset, PULONG Key);\n25 NTSTATUS NtSetInformationProcess (HANDLE ProcessHandle, PROCESSINFOCLASS ProcessInformationClass, PVOID ProcessInformation, ULONG ProcessInformationLength);\n26 NTSTATUS NtCreateKey (PHANDLE KeyHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, ULONG TitleIndex, PUNICODE_STRING Class, ULONG CreateOptions, PULONG Disposition);\n27 NTSTATUS NtFreeVirtualMemory (HANDLE ProcessHandle, PVOID *BaseAddress, PSIZE_T RegionSize, ULONG FreeType);\n28 NTSTATUS NtImpersonateClientOfPort (HANDLE PortHandle, PPORT_MESSAGE Message);\n29 NTSTATUS NtReleaseMutant (HANDLE MutantHandle, PLONG PreviousCount);\n30 NTSTATUS NtQueryInformationToken (HANDLE TokenHandle, TOKEN_INFORMATION_CLASS TokenInformationClass, PVOID TokenInformation, ULONG TokenInformationLength, PULONG ReturnLength);\n31 NTSTATUS NtRequestWaitReplyPort (HANDLE PortHandle, PPORT_MESSAGE RequestMessage, PPORT_MESSAGE ReplyMessage);\n32 NTSTATUS NtQueryVirtualMemory (HANDLE ProcessHandle, PVOID BaseAddress, MEMORY_INFORMATION_CLASS MemoryInformationClass, PVOID MemoryInformation, SIZE_T MemoryInformationLength, PSIZE_T ReturnLength);\n33 NTSTATUS NtOpenThreadToken (HANDLE ThreadHandle, ACCESS_MASK DesiredAccess, BOOLEAN OpenAsSelf, PHANDLE TokenHandle);\n34 NTSTATUS NtQueryInformationThread (HANDLE ThreadHandle, THREADINFOCLASS ThreadInformationClass, PVOID ThreadInformation, ULONG ThreadInformationLength, PULONG ReturnLength);\n35 NTSTATUS NtOpenProcess (PHANDLE ProcessHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, PCLIENT_ID ClientId);\n36 NTSTATUS NtSetInformationFile (HANDLE FileHandle, PIO_STATUS_BLOCK IoStatusBlock, PVOID FileInformation, ULONG Length, FILE_INFORMATION_CLASS FileInformationClass);\n37 NTSTATUS NtMapViewOfSection (HANDLE SectionHandle, HANDLE ProcessHandle, PVOID *BaseAddress, ULONG_PTR ZeroBits, SIZE_T CommitSize, PLARGE_INTEGER SectionOffset, PSIZE_T ViewSize, SECTION_INHERIT InheritDisposition, ULONG AllocationType, WIN32_PROTECTION_MASK Win32Protect);\n38 NTSTATUS NtAccessCheckAndAuditAlarm (PUNICODE_STRING SubsystemName, PVOID HandleId, PUNICODE_STRING ObjectTypeName, PUNICODE_STRING ObjectName, PSECURITY_DESCRIPTOR SecurityDescriptor, ACCESS_MASK DesiredAccess, PGENERIC_MAPPING GenericMapping, BOOLEAN ObjectCreation, PACCESS_MASK GrantedAccess, PNTSTATUS AccessStatus, PBOOLEAN GenerateOnClose);\n39 NTSTATUS NtUnmapViewOfSection (HANDLE ProcessHandle, PVOID BaseAddress);\n40 NTSTATUS NtReplyWaitReceivePortEx (HANDLE PortHandle, PVOID *PortContext, PPORT_MESSAGE ReplyMessage, PPORT_MESSAGE ReceiveMessage, PLARGE_INTEGER Timeout);\n41 NTSTATUS NtTerminateProcess (HANDLE ProcessHandle, NTSTATUS ExitStatus);\n42 NTSTATUS NtSetEventBoostPriority (HANDLE EventHandle);\n43 NTSTATUS NtReadFileScatter (HANDLE FileHandle, HANDLE Event, PIO_APC_ROUTINE ApcRoutine, PVOID ApcContext, PIO_STATUS_BLOCK IoStatusBlock, PFILE_SEGMENT_ELEMENT SegmentArray, ULONG Length, PLARGE_INTEGER ByteOffset, PULONG Key);\n44 NTSTATUS NtOpenThreadTokenEx (HANDLE ThreadHandle, ACCESS_MASK DesiredAccess, BOOLEAN OpenAsSelf, ULONG HandleAttributes, PHANDLE TokenHandle);\n45 NTSTATUS NtOpenProcessTokenEx (HANDLE ProcessHandle, ACCESS_MASK DesiredAccess, ULONG HandleAttributes, PHANDLE TokenHandle);\n46 NTSTATUS NtQueryPerformanceCounter (PLARGE_INTEGER PerformanceCounter, PLARGE_INTEGER PerformanceFrequency);\n47 NTSTATUS NtEnumerateKey (HANDLE KeyHandle, ULONG Index, KEY_INFORMATION_CLASS KeyInformationClass, PVOID KeyInformation, ULONG Length, PULONG ResultLength);\n48 NTSTATUS NtOpenFile (PHANDLE FileHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, PIO_STATUS_BLOCK IoStatusBlock, ULONG ShareAccess, ULONG OpenOptions);\n49 NTSTATUS NtDelayExecution (BOOLEAN Alertable, PLARGE_INTEGER DelayInterval);\n50 NTSTATUS NtQueryDirectoryFile (HANDLE FileHandle, HANDLE Event, PIO_APC_ROUTINE ApcRoutine, PVOID ApcContext, PIO_STATUS_BLOCK IoStatusBlock, PVOID FileInformation, ULONG Length, FILE_INFORMATION_CLASS FileInformationClass, BOOLEAN ReturnSingleEntry, PUNICODE_STRING FileName, BOOLEAN RestartScan);\n51 NTSTATUS NtQuerySystemInformation (SYSTEM_INFORMATION_CLASS SystemInformationClass, PVOID SystemInformation, ULONG SystemInformationLength, PULONG ReturnLength);\n52 NTSTATUS NtOpenSection (PHANDLE SectionHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes);\n53 NTSTATUS NtQueryTimer (HANDLE TimerHandle, TIMER_INFORMATION_CLASS TimerInformationClass, PVOID TimerInformation, ULONG TimerInformationLength, PULONG ReturnLength);\n54 NTSTATUS NtFsControlFile (HANDLE FileHandle, HANDLE Event, PIO_APC_ROUTINE ApcRoutine, PVOID ApcContext, PIO_STATUS_BLOCK IoStatusBlock, ULONG IoControlCode, PVOID InputBuffer, ULONG InputBufferLength, PVOID OutputBuffer, ULONG OutputBufferLength);\n55 NTSTATUS NtWriteVirtualMemory (HANDLE ProcessHandle, PVOID BaseAddress, PVOID Buffer, SIZE_T BufferSize, PSIZE_T NumberOfBytesWritten);\n56 NTSTATUS NtCloseObjectAuditAlarm (PUNICODE_STRING SubsystemName, PVOID HandleId, BOOLEAN GenerateOnClose);\n57 NTSTATUS NtDuplicateObject (HANDLE SourceProcessHandle, HANDLE SourceHandle, HANDLE TargetProcessHandle, PHANDLE TargetHandle, ACCESS_MASK DesiredAccess, ULONG HandleAttributes, ULONG Options);\n58 NTSTATUS NtQueryAttributesFile (POBJECT_ATTRIBUTES ObjectAttributes, PFILE_BASIC_INFORMATION FileInformation);\n59 NTSTATUS NtClearEvent (HANDLE EventHandle);\n60 NTSTATUS NtReadVirtualMemory (HANDLE ProcessHandle, PVOID BaseAddress, PVOID Buffer, SIZE_T BufferSize, PSIZE_T NumberOfBytesRead);\n61 NTSTATUS NtOpenEvent (PHANDLE EventHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes);\n62 NTSTATUS NtAdjustPrivilegesToken (HANDLE TokenHandle, BOOLEAN DisableAllPrivileges, PTOKEN_PRIVILEGES NewState, ULONG BufferLength, PTOKEN_PRIVILEGES PreviousState, PULONG ReturnLength);\n63 NTSTATUS NtDuplicateToken (HANDLE ExistingTokenHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, BOOLEAN EffectiveOnly, TOKEN_TYPE TokenType, PHANDLE NewTokenHandle);\n64 NTSTATUS NtContinue (PCONTEXT ContextRecord, BOOLEAN TestAlert);\n65 NTSTATUS NtQueryDefaultUILanguage (LANGID *DefaultUILanguageId);\n66 NTSTATUS NtQueueApcThread (HANDLE ThreadHandle, PPS_APC_ROUTINE ApcRoutine, PVOID ApcArgument1, PVOID ApcArgument2, PVOID ApcArgument3);\n67 NTSTATUS NtYieldExecution ();\n68 NTSTATUS NtAddAtom (PWSTR AtomName, ULONG Length, PRTL_ATOM Atom);\n```\n\n----------------------------------------\n\nTITLE: Windows NT Process and Job Object Management API Functions in C\nDESCRIPTION: Function declarations for Windows NT native API calls related to process and job object management. These system calls allow creating processes, assigning processes to job objects, and managing debug objects.\nSOURCE: https://github.com/panda-re/panda-ng/blob/main/plugins/syscalls2/generated-in/windows_8sp0_x86_prototypes.txt#_snippet_9\n\nLANGUAGE: C\nCODE:\n```\nNTSTATUS NtCreateProcessEx (PHANDLE ProcessHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, HANDLE ParentProcess, ULONG Flags, HANDLE SectionHandle, HANDLE DebugPort, HANDLE ExceptionPort, ULONG JobMemberLevel);\nNTSTATUS NtCreateProcess (PHANDLE ProcessHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, HANDLE ParentProcess, BOOLEAN InheritObjectTable, HANDLE SectionHandle, HANDLE DebugPort, HANDLE ExceptionPort);\nNTSTATUS NtCreateJobObject (PHANDLE JobHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes);\nNTSTATUS NtCreateJobSet (ULONG NumJob, PJOB_SET_ARRAY UserJobSet, ULONG Flags);\nNTSTATUS NtCreateDebugObject (PHANDLE DebugObjectHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, ULONG Flags);\nNTSTATUS NtAssignProcessToJobObject (HANDLE JobHandle, HANDLE ProcessHandle);\n```\n\n----------------------------------------\n\nTITLE: Defining POSIX Message Queue System Calls in C\nDESCRIPTION: This snippet defines system calls for POSIX message queue operations, including opening, setting attributes, sending, and receiving messages.\nSOURCE: https://github.com/panda-re/panda-ng/blob/main/plugins/syscalls2/generated-in/freebsd_x64_prototypes.txt#_snippet_38\n\nLANGUAGE: C\nCODE:\n```\nint kmq_open(const char *path, int flags, mode_t mode, const struct mq_attr *attr);\nint kmq_setattr(int mqd, const struct mq_attr *attr, struct mq_attr *oattr);\nint kmq_timedreceive(int mqd, char *msg_ptr, size_t msg_len, unsigned *msg_prio, const struct timespec *abs_timeout);\nint kmq_timedsend(int mqd, const char *msg_ptr, size_t msg_len, unsigned msg_prio, const struct timespec *abs_timeout);\nint kmq_notify(int mqd, const struct sigevent *sigev);\nint kmq_unlink(const char *path);\n```\n\n----------------------------------------\n\nTITLE: Declaring Windows NT System Call Functions in C\nDESCRIPTION: This snippet defines function signatures for various Windows NT system calls. These functions are part of the Windows Native API and are typically used for low-level system operations.\nSOURCE: https://github.com/panda-re/panda-ng/blob/main/plugins/syscalls2/generated-in/windows_vistasp0_x64_prototypes.txt#_snippet_7\n\nLANGUAGE: C\nCODE:\n```\nNTSTATUS NtAlpcSendWaitReceivePort (HANDLE PortHandle, ULONG Flags, PPORT_MESSAGE SendMessage, PALPC_MESSAGE_ATTRIBUTES SendMessageAttributes, PPORT_MESSAGE ReceiveMessage, PULONG BufferLength, PALPC_MESSAGE_ATTRIBUTES ReceiveMessageAttributes, PLARGE_INTEGER Timeout);\nNTSTATUS NtAlpcSetInformation (HANDLE PortHandle, ALPC_PORT_INFORMATION_CLASS PortInformationClass, PVOID PortInformation, ULONG Length);\nNTSTATUS NtAreMappedFilesTheSame (PVOID File1MappedAsAnImage, PVOID File2MappedAsFile);\nNTSTATUS NtAssignProcessToJobObject (HANDLE JobHandle, HANDLE ProcessHandle);\nNTSTATUS NtCancelIoFileEx (HANDLE FileHandle, PIO_STATUS_BLOCK IoRequestToCancel, PIO_STATUS_BLOCK IoStatusBlock);\nNTSTATUS NtCancelSynchronousIoFile (HANDLE ThreadHandle, PIO_STATUS_BLOCK IoRequestToCancel, PIO_STATUS_BLOCK IoStatusBlock);\nNTSTATUS NtCommitComplete (HANDLE EnlistmentHandle, PLARGE_INTEGER TmVirtualClock);\nNTSTATUS NtCommitEnlistment (HANDLE EnlistmentHandle, PLARGE_INTEGER TmVirtualClock);\nNTSTATUS NtCommitTransaction (HANDLE TransactionHandle, BOOLEAN Wait);\nNTSTATUS NtCompactKeys (ULONG Count, HANDLE KeyArray[]);\nNTSTATUS NtCompareTokens (HANDLE FirstTokenHandle, HANDLE SecondTokenHandle, PBOOLEAN Equal);\nNTSTATUS NtCompleteConnectPort (HANDLE PortHandle);\nNTSTATUS NtCompressKey (HANDLE Key);\nNTSTATUS NtConnectPort (PHANDLE PortHandle, PUNICODE_STRING PortName, PSECURITY_QUALITY_OF_SERVICE SecurityQos, PPORT_VIEW ClientView, PREMOTE_PORT_VIEW ServerView, PULONG MaxMessageLength, PVOID ConnectionInformation, PULONG ConnectionInformationLength);\nNTSTATUS NtCreateDebugObject (PHANDLE DebugObjectHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, ULONG Flags);\nNTSTATUS NtCreateDirectoryObject (PHANDLE DirectoryHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes);\nNTSTATUS NtCreateEnlistment (PHANDLE EnlistmentHandle, ACCESS_MASK DesiredAccess, HANDLE ResourceManagerHandle, HANDLE TransactionHandle, POBJECT_ATTRIBUTES ObjectAttributes, ULONG CreateOptions, NOTIFICATION_MASK NotificationMask, PVOID EnlistmentKey);\nNTSTATUS NtCreateEventPair (PHANDLE EventPairHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes);\nNTSTATUS NtCreateIoCompletion (PHANDLE IoCompletionHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, ULONG Count);\nNTSTATUS NtCreateJobObject (PHANDLE JobHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes);\nNTSTATUS NtCreateJobSet (ULONG NumJob, PJOB_SET_ARRAY UserJobSet, ULONG Flags);\nNTSTATUS NtCreateKeyTransacted (PHANDLE KeyHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, ULONG TitleIndex, PUNICODE_STRING Class, ULONG CreateOptions, HANDLE TransactionHandle, PULONG Disposition);\nNTSTATUS NtCreateKeyedEvent (PHANDLE KeyedEventHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, ULONG Flags);\nNTSTATUS NtCreateMailslotFile (PHANDLE FileHandle, ULONG DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, PIO_STATUS_BLOCK IoStatusBlock, ULONG CreateOptions, ULONG MailslotQuota, ULONG MaximumMessageSize, PLARGE_INTEGER ReadTimeout);\nNTSTATUS NtCreateMutant (PHANDLE MutantHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, BOOLEAN InitialOwner);\nNTSTATUS NtCreateNamedPipeFile (PHANDLE FileHandle, ULONG DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, PIO_STATUS_BLOCK IoStatusBlock, ULONG ShareAccess, ULONG CreateDisposition, ULONG CreateOptions, ULONG NamedPipeType, ULONG ReadMode, ULONG CompletionMode, ULONG MaximumInstances, ULONG InboundQuota, ULONG OutboundQuota, PLARGE_INTEGER DefaultTimeout);\nNTSTATUS NtCreatePagingFile (PUNICODE_STRING PageFileName, PLARGE_INTEGER MinimumSize, PLARGE_INTEGER MaximumSize, ULONG Priority);\nNTSTATUS NtCreatePort (PHANDLE PortHandle, POBJECT_ATTRIBUTES ObjectAttributes, ULONG MaxConnectionInfoLength, ULONG MaxMessageLength, ULONG MaxPoolUsage);\nNTSTATUS NtCreatePrivateNamespace (PHANDLE NamespaceHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, PVOID BoundaryDescriptor);\nNTSTATUS NtCreateProcess (PHANDLE ProcessHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, HANDLE ParentProcess, BOOLEAN InheritObjectTable, HANDLE SectionHandle, HANDLE DebugPort, HANDLE ExceptionPort);\nNTSTATUS NtCreateProfile (PHANDLE ProfileHandle, HANDLE Process, PVOID RangeBase, SIZE_T RangeSize, ULONG BucketSize, PULONG Buffer, ULONG BufferSize, KPROFILE_SOURCE ProfileSource, KAFFINITY Affinity);\nNTSTATUS NtCreateResourceManager (PHANDLE ResourceManagerHandle, ACCESS_MASK DesiredAccess, HANDLE TmHandle, LPGUID RmGuid, POBJECT_ATTRIBUTES ObjectAttributes, ULONG CreateOptions, PUNICODE_STRING Description);\nNTSTATUS NtCreateSemaphore (PHANDLE SemaphoreHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, LONG InitialCount, LONG MaximumCount);\nNTSTATUS NtCreateSymbolicLinkObject (PHANDLE LinkHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, PUNICODE_STRING LinkTarget);\nNTSTATUS NtCreateThreadEx (PHANDLE ThreadHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, HANDLE ProcessHandle, PVOID StartRoutine, PVOID Argument, ULONG CreateFlags, ULONG_PTR ZeroBits, SIZE_T StackSize, SIZE_T MaximumStackSize, PPS_ATTRIBUTE_LIST AttributeList);\nNTSTATUS NtCreateTimer (PHANDLE TimerHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, TIMER_TYPE TimerType);\nNTSTATUS NtCreateToken (PHANDLE TokenHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, TOKEN_TYPE TokenType, PLUID AuthenticationId, PLARGE_INTEGER ExpirationTime, PTOKEN_USER User, PTOKEN_GROUPS Groups, PTOKEN_PRIVILEGES Privileges, PTOKEN_OWNER Owner, PTOKEN_PRIMARY_GROUP PrimaryGroup, PTOKEN_DEFAULT_DACL DefaultDacl, PTOKEN_SOURCE TokenSource);\nNTSTATUS NtCreateTransaction (PHANDLE TransactionHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, LPGUID Uow, HANDLE TmHandle, ULONG CreateOptions, ULONG IsolationLevel, ULONG IsolationFlags, PLARGE_INTEGER Timeout, PUNICODE_STRING Description);\nNTSTATUS NtCreateTransactionManager (PHANDLE TmHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, PUNICODE_STRING LogFileName, ULONG CreateOptions, ULONG CommitStrength);\nNTSTATUS NtCreateUserProcess (PHANDLE ProcessHandle, PHANDLE ThreadHandle, ACCESS_MASK ProcessDesiredAccess, ACCESS_MASK ThreadDesiredAccess, POBJECT_ATTRIBUTES ProcessObjectAttributes, POBJECT_ATTRIBUTES ThreadObjectAttributes, ULONG ProcessFlags, ULONG ThreadFlags, PRTL_USER_PROCESS_PARAMETERS ProcessParameters, PPROCESS_CREATE_INFO CreateInfo, PPROCESS_ATTRIBUTE_LIST AttributeList);\nNTSTATUS NtCreateWaitablePort (PHANDLE PortHandle, POBJECT_ATTRIBUTES ObjectAttributes, ULONG MaxConnectionInfoLength, ULONG MaxMessageLength, ULONG MaxPoolUsage);\nNTSTATUS NtCreateWorkerFactory (PHANDLE WorkerFactoryHandleReturn, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, HANDLE CompletionPortHandle, HANDLE WorkerProcessHandle, PVOID StartRoutine, PVOID StartParameter, ULONG MaxThreadCount, SIZE_T StackReserve, SIZE_T StackCommit);\nNTSTATUS NtDebugActiveProcess (HANDLE ProcessHandle, HANDLE DebugObjectHandle);\nNTSTATUS NtDebugContinue (HANDLE DebugObjectHandle, PCLIENT_ID ClientId, NTSTATUS ContinueStatus);\nNTSTATUS NtDeleteAtom (RTL_ATOM Atom);\nNTSTATUS NtDeleteBootEntry (ULONG Id);\nNTSTATUS NtDeleteDriverEntry (ULONG Id);\nNTSTATUS NtDeleteFile (POBJECT_ATTRIBUTES ObjectAttributes);\nNTSTATUS NtDeleteKey (HANDLE KeyHandle);\nNTSTATUS NtDeleteObjectAuditAlarm (PUNICODE_STRING SubsystemName, PVOID HandleId, BOOLEAN GenerateOnClose);\nNTSTATUS NtDeletePrivateNamespace (HANDLE NamespaceHandle);\nNTSTATUS NtDeleteValueKey (HANDLE KeyHandle, PUNICODE_STRING ValueName);\nNTSTATUS NtDisplayString (PUNICODE_STRING String);\nNTSTATUS NtEnumerateBootEntries (PVOID Buffer, PULONG BufferLength);\nNTSTATUS NtEnumerateDriverEntries (PVOID Buffer, PULONG BufferLength);\nNTSTATUS NtEnumerateSystemEnvironmentValuesEx (ULONG InformationClass, PVOID Buffer, PULONG BufferLength);\nNTSTATUS NtEnumerateTransactionObject (HANDLE RootObjectHandle, KTMOBJECT_TYPE QueryType, PKTMOBJECT_CURSOR ObjectCursor, ULONG ObjectCursorLength, PULONG ReturnLength);\nNTSTATUS NtExtendSection (HANDLE SectionHandle, PLARGE_INTEGER NewSectionSize);\nNTSTATUS NtFilterToken (HANDLE ExistingTokenHandle, ULONG Flags, PTOKEN_GROUPS SidsToDisable, PTOKEN_PRIVILEGES PrivilegesToDelete, PTOKEN_GROUPS RestrictedSids, PHANDLE NewTokenHandle);\nNTSTATUS NtFlushInstallUILanguage (LANGID InstallUILanguage, ULONG SetComittedFlag);\nNTSTATUS NtFlushInstructionCache (HANDLE ProcessHandle, PVOID BaseAddress, SIZE_T Length);\nNTSTATUS NtFlushKey (HANDLE KeyHandle);\nVOID NtFlushProcessWriteBuffers ();\nNTSTATUS NtFlushVirtualMemory (HANDLE ProcessHandle, PVOID *BaseAddress, PSIZE_T RegionSize, PIO_STATUS_BLOCK IoStatus);\nNTSTATUS NtFlushWriteBuffer ();\nNTSTATUS NtFreeUserPhysicalPages (HANDLE ProcessHandle, PULONG_PTR NumberOfPages, PULONG_PTR UserPfnArray);\nNTSTATUS NtFreezeRegistry (ULONG TimeOutInSeconds);\nNTSTATUS NtFreezeTransactions (PLARGE_INTEGER FreezeTimeout, PLARGE_INTEGER ThawTimeout);\nNTSTATUS NtGetContextThread (HANDLE ThreadHandle, PCONTEXT ThreadContext);\nULONG NtGetCurrentProcessorNumber ();\nNTSTATUS NtGetDevicePowerState (HANDLE Device, DEVICE_POWER_STATE *State);\nNTSTATUS NtGetMUIRegistryInfo (ULONG Flags, PULONG DataSize, PVOID Data);\nNTSTATUS NtGetNextProcess (HANDLE ProcessHandle, ACCESS_MASK DesiredAccess, ULONG HandleAttributes, ULONG Flags, PHANDLE NewProcessHandle);\nNTSTATUS NtGetNextThread (HANDLE ProcessHandle, HANDLE ThreadHandle, ACCESS_MASK DesiredAccess, ULONG HandleAttributes, ULONG Flags, PHANDLE NewThreadHandle);\n```\n\n----------------------------------------\n\nTITLE: Declaring Windows NT Native API Functions in C\nDESCRIPTION: This snippet contains declarations for multiple Windows NT native API functions. These functions provide low-level access to system resources and are typically used in kernel-mode or driver development. The declarations include parameters and return types for system calls related to token handling, registry operations, file system access, and process/thread management.\nSOURCE: https://github.com/panda-re/panda-ng/blob/main/plugins/syscalls2/generated-in/windows_vistasp0_x86_prototypes.txt#_snippet_5\n\nLANGUAGE: C\nCODE:\n```\nNTSTATUS NtDuplicateToken (HANDLE ExistingTokenHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, BOOLEAN EffectiveOnly, TOKEN_TYPE TokenType, PHANDLE NewTokenHandle);\nNTSTATUS NtEnumerateBootEntries (PVOID Buffer, PULONG BufferLength);\nNTSTATUS NtEnumerateDriverEntries (PVOID Buffer, PULONG BufferLength);\nNTSTATUS NtEnumerateKey (HANDLE KeyHandle, ULONG Index, KEY_INFORMATION_CLASS KeyInformationClass, PVOID KeyInformation, ULONG Length, PULONG ResultLength);\nNTSTATUS NtEnumerateSystemEnvironmentValuesEx (ULONG InformationClass, PVOID Buffer, PULONG BufferLength);\nNTSTATUS NtEnumerateTransactionObject (HANDLE RootObjectHandle, KTMOBJECT_TYPE QueryType, PKTMOBJECT_CURSOR ObjectCursor, ULONG ObjectCursorLength, PULONG ReturnLength);\nNTSTATUS NtEnumerateValueKey (HANDLE KeyHandle, ULONG Index, KEY_VALUE_INFORMATION_CLASS KeyValueInformationClass, PVOID KeyValueInformation, ULONG Length, PULONG ResultLength);\nNTSTATUS NtExtendSection (HANDLE SectionHandle, PLARGE_INTEGER NewSectionSize);\nNTSTATUS NtFilterToken (HANDLE ExistingTokenHandle, ULONG Flags, PTOKEN_GROUPS SidsToDisable, PTOKEN_PRIVILEGES PrivilegesToDelete, PTOKEN_GROUPS RestrictedSids, PHANDLE NewTokenHandle);\nNTSTATUS NtFindAtom (PWSTR AtomName, ULONG Length, PRTL_ATOM Atom);\nNTSTATUS NtFlushBuffersFile (HANDLE FileHandle, PIO_STATUS_BLOCK IoStatusBlock);\nNTSTATUS NtFlushInstructionCache (HANDLE ProcessHandle, PVOID BaseAddress, SIZE_T Length);\nNTSTATUS NtFlushKey (HANDLE KeyHandle);\nVOID NtFlushProcessWriteBuffers ();\nNTSTATUS NtFlushVirtualMemory (HANDLE ProcessHandle, PVOID *BaseAddress, PSIZE_T RegionSize, PIO_STATUS_BLOCK IoStatus);\nNTSTATUS NtFlushWriteBuffer ();\nNTSTATUS NtFreeUserPhysicalPages (HANDLE ProcessHandle, PULONG_PTR NumberOfPages, PULONG_PTR UserPfnArray);\nNTSTATUS NtFreeVirtualMemory (HANDLE ProcessHandle, PVOID *BaseAddress, PSIZE_T RegionSize, ULONG FreeType);\nNTSTATUS NtFreezeRegistry (ULONG TimeOutInSeconds);\nNTSTATUS NtFreezeTransactions (PLARGE_INTEGER FreezeTimeout, PLARGE_INTEGER ThawTimeout);\nNTSTATUS NtFsControlFile (HANDLE FileHandle, HANDLE Event, PIO_APC_ROUTINE ApcRoutine, PVOID ApcContext, PIO_STATUS_BLOCK IoStatusBlock, ULONG IoControlCode, PVOID InputBuffer, ULONG InputBufferLength, PVOID OutputBuffer, ULONG OutputBufferLength);\nNTSTATUS NtGetContextThread (HANDLE ThreadHandle, PCONTEXT ThreadContext);\nNTSTATUS NtGetDevicePowerState (HANDLE Device, DEVICE_POWER_STATE *State);\nNTSTATUS NtGetNlsSectionPtr (ULONG SectionType, ULONG SectionData, PVOID ContextData, PVOID *SectionPointer, PULONG SectionSize);\nNTSTATUS NtGetPlugPlayEvent (HANDLE EventHandle, PVOID Context, PPLUGPLAY_EVENT_BLOCK EventBlock, ULONG EventBufferSize);\nNTSTATUS NtGetWriteWatch (HANDLE ProcessHandle, ULONG Flags, PVOID BaseAddress, SIZE_T RegionSize, PVOID *UserAddressArray, PULONG_PTR EntriesInUserAddressArray, PULONG Granularity);\nNTSTATUS NtImpersonateAnonymousToken (HANDLE ThreadHandle);\nNTSTATUS NtImpersonateClientOfPort (HANDLE PortHandle, PPORT_MESSAGE Message);\nNTSTATUS NtImpersonateThread (HANDLE ServerThreadHandle, HANDLE ClientThreadHandle, PSECURITY_QUALITY_OF_SERVICE SecurityQos);\nNTSTATUS NtInitializeNlsFiles (PVOID *BaseAddress, PLCID DefaultLocaleId, PLARGE_INTEGER DefaultCasingTableSize);\nNTSTATUS NtInitializeRegistry (USHORT BootCondition);\nNTSTATUS NtInitiatePowerAction (POWER_ACTION SystemAction, SYSTEM_POWER_STATE MinSystemState, ULONG Flags, BOOLEAN Asynchronous);\nNTSTATUS NtIsProcessInJob (HANDLE ProcessHandle, HANDLE JobHandle);\nBOOLEAN NtIsSystemResumeAutomatic ();\nNTSTATUS NtListenPort (HANDLE PortHandle, PPORT_MESSAGE ConnectionRequest);\nNTSTATUS NtLoadDriver (PUNICODE_STRING DriverServiceName);\nNTSTATUS NtLoadKey (POBJECT_ATTRIBUTES TargetKey, POBJECT_ATTRIBUTES SourceFile);\nNTSTATUS NtLoadKey2 (POBJECT_ATTRIBUTES TargetKey, POBJECT_ATTRIBUTES SourceFile, ULONG Flags);\nNTSTATUS NtLoadKeyEx (POBJECT_ATTRIBUTES TargetKey, POBJECT_ATTRIBUTES SourceFile, ULONG Flags, HANDLE TrustClassKey );\nNTSTATUS NtLockFile (HANDLE FileHandle, HANDLE Event, PIO_APC_ROUTINE ApcRoutine, PVOID ApcContext, PIO_STATUS_BLOCK IoStatusBlock, PLARGE_INTEGER ByteOffset, PLARGE_INTEGER Length, ULONG Key, BOOLEAN FailImmediately, BOOLEAN ExclusiveLock);\nNTSTATUS NtLockProductActivationKeys (ULONG *pPrivateVer, ULONG *pSafeMode);\nNTSTATUS NtLockRegistryKey (HANDLE KeyHandle);\nNTSTATUS NtLockVirtualMemory (HANDLE ProcessHandle, PVOID *BaseAddress, PSIZE_T RegionSize, ULONG MapType);\nNTSTATUS NtMakePermanentObject (HANDLE Handle);\nNTSTATUS NtMakeTemporaryObject (HANDLE Handle);\nNTSTATUS NtMapUserPhysicalPages (PVOID VirtualAddress, ULONG_PTR NumberOfPages, PULONG_PTR UserPfnArray);\nNTSTATUS NtMapUserPhysicalPagesScatter (PVOID *VirtualAddresses, ULONG_PTR NumberOfPages, PULONG_PTR UserPfnArray);\nNTSTATUS NtMapViewOfSection (HANDLE SectionHandle, HANDLE ProcessHandle, PVOID *BaseAddress, ULONG_PTR ZeroBits, SIZE_T CommitSize, PLARGE_INTEGER SectionOffset, PSIZE_T ViewSize, SECTION_INHERIT InheritDisposition, ULONG AllocationType, WIN32_PROTECTION_MASK Win32Protect);\nNTSTATUS NtModifyBootEntry (PBOOT_ENTRY BootEntry);\nNTSTATUS NtModifyDriverEntry (PEFI_DRIVER_ENTRY DriverEntry);\nNTSTATUS NtNotifyChangeDirectoryFile (HANDLE FileHandle, HANDLE Event, PIO_APC_ROUTINE ApcRoutine, PVOID ApcContext, PIO_STATUS_BLOCK IoStatusBlock, PVOID Buffer, ULONG Length, ULONG CompletionFilter, BOOLEAN WatchTree);\nNTSTATUS NtNotifyChangeKey (HANDLE KeyHandle, HANDLE Event, PIO_APC_ROUTINE ApcRoutine, PVOID ApcContext, PIO_STATUS_BLOCK IoStatusBlock, ULONG CompletionFilter, BOOLEAN WatchTree, PVOID Buffer, ULONG BufferSize, BOOLEAN Asynchronous);\nNTSTATUS NtNotifyChangeMultipleKeys (HANDLE MasterKeyHandle, ULONG Count, OBJECT_ATTRIBUTES SlaveObjects[], HANDLE Event, PIO_APC_ROUTINE ApcRoutine, PVOID ApcContext, PIO_STATUS_BLOCK IoStatusBlock, ULONG CompletionFilter, BOOLEAN WatchTree, PVOID Buffer, ULONG BufferSize, BOOLEAN Asynchronous);\nNTSTATUS NtOpenDirectoryObject (PHANDLE DirectoryHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes);\nNTSTATUS NtOpenEvent (PHANDLE EventHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes);\nNTSTATUS NtOpenEventPair (PHANDLE EventPairHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes);\nNTSTATUS NtOpenFile (PHANDLE FileHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, PIO_STATUS_BLOCK IoStatusBlock, ULONG ShareAccess, ULONG OpenOptions);\nNTSTATUS NtOpenIoCompletion (PHANDLE IoCompletionHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes);\nNTSTATUS NtOpenJobObject (PHANDLE JobHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes);\nNTSTATUS NtOpenKey (PHANDLE KeyHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes);\nNTSTATUS NtOpenKeyTransacted (PHANDLE KeyHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, HANDLE TransactionHandle);\nNTSTATUS NtOpenMutant (PHANDLE MutantHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes);\nNTSTATUS NtOpenPrivateNamespace (PHANDLE NamespaceHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, PVOID BoundaryDescriptor);\nNTSTATUS NtOpenObjectAuditAlarm (PUNICODE_STRING SubsystemName, PVOID HandleId, PUNICODE_STRING ObjectTypeName, PUNICODE_STRING ObjectName, PSECURITY_DESCRIPTOR SecurityDescriptor, HANDLE ClientToken, ACCESS_MASK DesiredAccess, ACCESS_MASK GrantedAccess, PPRIVILEGE_SET Privileges, BOOLEAN ObjectCreation, BOOLEAN AccessGranted, PBOOLEAN GenerateOnClose);\nNTSTATUS NtOpenProcess (PHANDLE ProcessHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, PCLIENT_ID ClientId);\nNTSTATUS NtOpenProcessToken (HANDLE ProcessHandle, ACCESS_MASK DesiredAccess, PHANDLE TokenHandle);\nNTSTATUS NtOpenProcessTokenEx (HANDLE ProcessHandle, ACCESS_MASK DesiredAccess, ULONG HandleAttributes, PHANDLE TokenHandle);\nNTSTATUS NtOpenSection (PHANDLE SectionHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes);\nNTSTATUS NtOpenSemaphore (PHANDLE SemaphoreHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes);\nNTSTATUS NtOpenSession (PHANDLE SessionHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes);\nNTSTATUS NtOpenSymbolicLinkObject (PHANDLE LinkHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes);\nNTSTATUS NtOpenThread (PHANDLE ThreadHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, PCLIENT_ID ClientId);\nNTSTATUS NtOpenThreadToken (HANDLE ThreadHandle, ACCESS_MASK DesiredAccess, BOOLEAN OpenAsSelf, PHANDLE TokenHandle);\nNTSTATUS NtOpenThreadTokenEx (HANDLE ThreadHandle, ACCESS_MASK DesiredAccess, BOOLEAN OpenAsSelf, ULONG HandleAttributes, PHANDLE TokenHandle);\nNTSTATUS NtOpenTimer (PHANDLE TimerHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes);\nNTSTATUS NtPlugPlayControl (PLUGPLAY_CONTROL_CLASS PnPControlClass, PVOID PnPControlData, ULONG PnPControlDataLength);\nNTSTATUS NtPowerInformation (POWER_INFORMATION_LEVEL InformationLevel, PVOID InputBuffer, ULONG InputBufferLength, PVOID OutputBuffer, ULONG OutputBufferLength);\nNTSTATUS NtPrivilegeCheck (HANDLE ClientToken, PPRIVILEGE_SET RequiredPrivileges, PBOOLEAN Result);\nNTSTATUS NtPrivilegeObjectAuditAlarm (PUNICODE_STRING SubsystemName, PVOID HandleId, HANDLE ClientToken, ACCESS_MASK DesiredAccess, PPRIVILEGE_SET Privileges, BOOLEAN AccessGranted);\nNTSTATUS NtPrivilegedServiceAuditAlarm (PUNICODE_STRING SubsystemName, PUNICODE_STRING ServiceName, HANDLE ClientToken, PPRIVILEGE_SET Privileges, BOOLEAN AccessGranted);\n```\n\n----------------------------------------\n\nTITLE: Declaring Windows NT System Call Prototypes in C\nDESCRIPTION: These C prototypes define the signatures for native Windows NT system calls. Each function takes specific handles, pointers, structures, and flags as parameters, which correspond to various system resources and operations. The declarations rely on Windows-specific types such as HANDLE, NTSTATUS, and various structure pointers. Intended for source compatibility with native subsystem development, usage assumes prior availability of relevant header files (e.g., <windows.h> or custom definitions). Input and output buffers must be correctly sized and aligned, and misuse can result in system instability or security risks.\nSOURCE: https://github.com/panda-re/panda-ng/blob/main/plugins/syscalls2/generated-in/windows_8sp0_x86_prototypes.txt#_snippet_0\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtWorkerFactoryWorkerReady (HANDLE WorkerFactoryHandle);\nNTSTATUS NtYieldExecution ();\nNTSTATUS NtWriteVirtualMemory (HANDLE ProcessHandle, PVOID BaseAddress, PVOID Buffer, SIZE_T BufferSize, PSIZE_T NumberOfBytesWritten);\nNTSTATUS NtWriteRequestData (HANDLE PortHandle, PPORT_MESSAGE Message, ULONG DataEntryIndex, PVOID Buffer, SIZE_T BufferSize, PSIZE_T NumberOfBytesWritten);\nNTSTATUS NtWriteFileGather (HANDLE FileHandle, HANDLE Event, PIO_APC_ROUTINE ApcRoutine, PVOID ApcContext, PIO_STATUS_BLOCK IoStatusBlock, PFILE_SEGMENT_ELEMENT SegmentArray, ULONG Length, PLARGE_INTEGER ByteOffset, PULONG Key);\nNTSTATUS NtWriteFile (HANDLE FileHandle, HANDLE Event, PIO_APC_ROUTINE ApcRoutine, PVOID ApcContext, PIO_STATUS_BLOCK IoStatusBlock, PVOID Buffer, ULONG Length, PLARGE_INTEGER ByteOffset, PULONG Key);\nNTSTATUS NtWaitLowEventPair (HANDLE EventPairHandle);\nNTSTATUS NtWaitHighEventPair (HANDLE EventPairHandle);\nNTSTATUS NtWaitForWorkViaWorkerFactory (HANDLE WorkerFactoryHandle, PFILE_IO_COMPLETION_INFORMATION MiniPacket);\nNTSTATUS NtWaitForSingleObject (HANDLE Handle, BOOLEAN Alertable, PLARGE_INTEGER Timeout);\nNTSTATUS NtWaitForMultipleObjects32 (ULONG Count, LONG Handles[], WAIT_TYPE WaitType, BOOLEAN Alertable, PLARGE_INTEGER Timeout);\nNTSTATUS NtWaitForMultipleObjects (ULONG Count, HANDLE Handles[], WAIT_TYPE WaitType, BOOLEAN Alertable, PLARGE_INTEGER Timeout);\nNTSTATUS NtWaitForKeyedEvent (HANDLE KeyedEventHandle, PVOID KeyValue, BOOLEAN Alertable, PLARGE_INTEGER Timeout);\nNTSTATUS NtWaitForDebugEvent (HANDLE DebugObjectHandle, BOOLEAN Alertable, PLARGE_INTEGER Timeout, PDBGUI_WAIT_STATE_CHANGE WaitStateChange);\nNTSTATUS NtVdmControl (VDMSERVICECLASS Service, PVOID ServiceData);\nNTSTATUS NtUnmapViewOfSection (HANDLE ProcessHandle, PVOID BaseAddress);\nNTSTATUS NtUnlockVirtualMemory (HANDLE ProcessHandle, PVOID *BaseAddress, PSIZE_T RegionSize, ULONG MapType);\nNTSTATUS NtUnlockFile (HANDLE FileHandle, PIO_STATUS_BLOCK IoStatusBlock, PLARGE_INTEGER ByteOffset, PLARGE_INTEGER Length, ULONG Key);\nNTSTATUS NtUnloadKeyEx (POBJECT_ATTRIBUTES TargetKey, HANDLE Event);\nNTSTATUS NtUnloadKey2 (POBJECT_ATTRIBUTES TargetKey, ULONG Flags);\nNTSTATUS NtUnloadKey (POBJECT_ATTRIBUTES TargetKey);\nNTSTATUS NtUnloadDriver (PUNICODE_STRING DriverServiceName);\nNTSTATUS NtUmsThreadYield (PVOID SchedulerParam);\nNTSTATUS NtTranslateFilePath (PFILE_PATH InputFilePath, ULONG OutputType, PFILE_PATH OutputFilePath, PULONG OutputFilePathLength);\nNTSTATUS NtTraceEvent (HANDLE TraceHandle, ULONG Flags, ULONG FieldSize, PVOID Fields);\nNTSTATUS NtTraceControl (ULONG FunctionCode, PVOID InBuffer, ULONG InBufferLen, PVOID OutBuffer, ULONG OutBufferLen, PULONG ReturnLength);\nNTSTATUS NtThawTransactions ();\nNTSTATUS NtThawRegistry ();\nNTSTATUS NtTestAlert ();\nNTSTATUS NtTerminateThread (HANDLE ThreadHandle, NTSTATUS ExitStatus);\nNTSTATUS NtTerminateProcess (HANDLE ProcessHandle, NTSTATUS ExitStatus);\nNTSTATUS NtTerminateJobObject (HANDLE JobHandle, NTSTATUS ExitStatus);\nNTSTATUS NtSystemDebugControl (SYSDBG_COMMAND Command, PVOID InputBuffer, ULONG InputBufferLength, PVOID OutputBuffer, ULONG OutputBufferLength, PULONG ReturnLength);\nNTSTATUS NtSuspendThread (HANDLE ThreadHandle, PULONG PreviousSuspendCount);\nNTSTATUS NtSuspendProcess (HANDLE ProcessHandle);\nNTSTATUS NtStopProfile (HANDLE ProfileHandle);\nNTSTATUS NtStartProfile (HANDLE ProfileHandle);\nNTSTATUS NtSinglePhaseReject (HANDLE EnlistmentHandle, PLARGE_INTEGER TmVirtualClock);\nNTSTATUS NtSignalAndWaitForSingleObject (HANDLE SignalHandle, HANDLE WaitHandle, BOOLEAN Alertable, PLARGE_INTEGER Timeout);\nNTSTATUS NtShutdownWorkerFactory (HANDLE WorkerFactoryHandle, LONG *PendingWorkerCount);\nNTSTATUS NtShutdownSystem (SHUTDOWN_ACTION Action);\nNTSTATUS NtSetVolumeInformationFile (HANDLE FileHandle, PIO_STATUS_BLOCK IoStatusBlock, PVOID FsInformation, ULONG Length, FS_INFORMATION_CLASS FsInformationClass);\nNTSTATUS NtSetValueKey (HANDLE KeyHandle, PUNICODE_STRING ValueName, ULONG TitleIndex, ULONG Type, PVOID Data, ULONG DataSize);\nNTSTATUS NtSetUuidSeed (PCHAR Seed);\nNTSTATUS NtSetTimerResolution (ULONG DesiredTime, BOOLEAN SetResolution, PULONG ActualTime);\nNTSTATUS NtSetTimerEx (HANDLE TimerHandle, TIMER_SET_INFORMATION_CLASS TimerSetInformationClass, PVOID TimerSetInformation, ULONG TimerSetInformationLength);\nNTSTATUS NtSetTimer (HANDLE TimerHandle, PLARGE_INTEGER DueTime, PTIMER_APC_ROUTINE TimerApcRoutine, PVOID TimerContext, BOOLEAN WakeTimer, LONG Period, PBOOLEAN PreviousState);\nNTSTATUS NtSetThreadExecutionState (EXECUTION_STATE esFlags, PEXECUTION_STATE PreviousFlags);\nNTSTATUS NtSetSystemTime (PLARGE_INTEGER SystemTime, PLARGE_INTEGER PreviousTime);\nNTSTATUS NtSetSystemPowerState (POWER_ACTION SystemAction, SYSTEM_POWER_STATE MinSystemState, ULONG Flags);\nNTSTATUS NtSetSystemInformation (SYSTEM_INFORMATION_CLASS SystemInformationClass, PVOID SystemInformation, ULONG SystemInformationLength);\nNTSTATUS NtSetSystemEnvironmentValueEx (PUNICODE_STRING VariableName, LPGUID VendorGuid, PVOID Value, ULONG ValueLength, ULONG Attributes);\nNTSTATUS NtSetSystemEnvironmentValue (PUNICODE_STRING VariableName, PUNICODE_STRING VariableValue);\nNTSTATUS NtSetSecurityObject (HANDLE Handle, SECURITY_INFORMATION SecurityInformation, PSECURITY_DESCRIPTOR SecurityDescriptor);\nNTSTATUS NtSetQuotaInformationFile (HANDLE FileHandle, PIO_STATUS_BLOCK IoStatusBlock, PVOID Buffer, ULONG Length);\nNTSTATUS NtSetLowWaitHighEventPair (HANDLE EventPairHandle);\nNTSTATUS NtSetLowEventPair (HANDLE EventPairHandle);\nNTSTATUS NtSetLdtEntries (ULONG Selector0, ULONG Entry0Low, ULONG Entry0Hi, ULONG Selector1, ULONG Entry1Low, ULONG Entry1Hi);\nNTSTATUS NtSetIoCompletionEx (HANDLE IoCompletionHandle, HANDLE IoCompletionReserveHandle, PVOID KeyContext, PVOID ApcContext, NTSTATUS IoStatus, ULONG_PTR IoStatusInformation);\nNTSTATUS NtSetIoCompletion (HANDLE IoCompletionHandle, PVOID KeyContext, PVOID ApcContext, NTSTATUS IoStatus, ULONG_PTR IoStatusInformation);\nNTSTATUS NtSetIntervalProfile (ULONG Interval, KPROFILE_SOURCE Source);\nNTSTATUS NtSetInformationWorkerFactory (HANDLE WorkerFactoryHandle, WORKERFACTORYINFOCLASS WorkerFactoryInformationClass, PVOID WorkerFactoryInformation, ULONG WorkerFactoryInformationLength);\nNTSTATUS NtSetInformationTransactionManager (HANDLE TmHandle, TRANSACTIONMANAGER_INFORMATION_CLASS TransactionManagerInformationClass, PVOID TransactionManagerInformation, ULONG TransactionManagerInformationLength);\nNTSTATUS NtSetInformationTransaction (HANDLE TransactionHandle, TRANSACTION_INFORMATION_CLASS TransactionInformationClass, PVOID TransactionInformation, ULONG TransactionInformationLength);\nNTSTATUS NtSetInformationToken (HANDLE TokenHandle, TOKEN_INFORMATION_CLASS TokenInformationClass, PVOID TokenInformation, ULONG TokenInformationLength);\nNTSTATUS NtSetInformationThread (HANDLE ThreadHandle, THREADINFOCLASS ThreadInformationClass, PVOID ThreadInformation, ULONG ThreadInformationLength);\nNTSTATUS NtSetInformationResourceManager (HANDLE ResourceManagerHandle, RESOURCEMANAGER_INFORMATION_CLASS ResourceManagerInformationClass, PVOID ResourceManagerInformation, ULONG ResourceManagerInformationLength);\nNTSTATUS NtSetInformationProcess (HANDLE ProcessHandle, PROCESSINFOCLASS ProcessInformationClass, PVOID ProcessInformation, ULONG ProcessInformationLength);\nNTSTATUS NtSetInformationObject (HANDLE Handle, OBJECT_INFORMATION_CLASS ObjectInformationClass, PVOID ObjectInformation, ULONG ObjectInformationLength);\nNTSTATUS NtSetInformationKey (HANDLE KeyHandle, KEY_SET_INFORMATION_CLASS KeySetInformationClass, PVOID KeySetInformation, ULONG KeySetInformationLength);\nNTSTATUS NtSetInformationJobObject (HANDLE JobHandle, JOBOBJECTINFOCLASS JobObjectInformationClass, PVOID JobObjectInformation, ULONG JobObjectInformationLength);\nNTSTATUS NtSetInformationFile (HANDLE FileHandle, PIO_STATUS_BLOCK IoStatusBlock, PVOID FileInformation, ULONG Length, FILE_INFORMATION_CLASS FileInformationClass);\nNTSTATUS NtSetInformationEnlistment (HANDLE EnlistmentHandle, ENLISTMENT_INFORMATION_CLASS EnlistmentInformationClass, PVOID EnlistmentInformation, ULONG EnlistmentInformationLength);\nNTSTATUS NtSetInformationDebugObject (HANDLE DebugObjectHandle, DEBUGOBJECTINFOCLASS DebugObjectInformationClass, PVOID DebugInformation, ULONG DebugInformationLength, PULONG ReturnLength);\nNTSTATUS NtSetHighWaitLowEventPair (HANDLE EventPairHandle);\nNTSTATUS NtSetHighEventPair (HANDLE EventPairHandle);\nNTSTATUS NtSetEventBoostPriority (HANDLE EventHandle);\nNTSTATUS NtSetEvent (HANDLE EventHandle, PLONG PreviousState);\nNTSTATUS NtSetEaFile (HANDLE FileHandle, PIO_STATUS_BLOCK IoStatusBlock, PVOID Buffer, ULONG Length);\nNTSTATUS NtSetDriverEntryOrder (PULONG Ids, ULONG Count);\nNTSTATUS NtSetDefaultUILanguage (LANGID DefaultUILanguageId);\nNTSTATUS NtSetDefaultLocale (BOOLEAN UserProfile, LCID DefaultLocaleId);\nNTSTATUS NtSetDefaultHardErrorPort (HANDLE DefaultHardErrorPort);\nNTSTATUS NtSetDebugFilterState (ULONG ComponentId, ULONG Level, BOOLEAN State);\nNTSTATUS NtSetContextThread (HANDLE ThreadHandle, PCONTEXT ThreadContext);\nNTSTATUS NtSetBootOptions (PBOOT_OPTIONS BootOptions, ULONG FieldsToChange);\nNTSTATUS NtSetBootEntryOrder (PULONG Ids, ULONG Count);\nNTSTATUS NtSerializeBoot ();\nNTSTATUS NtSecureConnectPort (PHANDLE PortHandle, PUNICODE_STRING PortName, PSECURITY_QUALITY_OF_SERVICE SecurityQos, PPORT_VIEW ClientView, PSID RequiredServerSid, PREMOTE_PORT_VIEW ServerView, PULONG MaxMessageLength, PVOID ConnectionInformation, PULONG ConnectionInformationLength);\nNTSTATUS NtSaveMergedKeys (HANDLE HighPrecedenceKeyHandle, HANDLE LowPrecedenceKeyHandle, HANDLE FileHandle);\nNTSTATUS NtSaveKeyEx (HANDLE KeyHandle, HANDLE FileHandle, ULONG Format);\n```\n\n----------------------------------------\n\nTITLE: Declaring NT System Call Function Prototypes in C\nDESCRIPTION: This snippet provides function declarations for numerous Windows Native API functions (NT system calls) in C. These prototypes are used to link against the ntdll library or implement interoperability with the low-level Windows kernel. Parameters specify handles, access rights, object attributes, and operation-specific structures. No function implementation is provided, so these should be linked to system libraries or dynamically loaded. Functions return NTSTATUS to facilitate detailed error handling. The snippet assumes inclusion of relevant type definitions and headers.\nSOURCE: https://github.com/panda-re/panda-ng/blob/main/plugins/syscalls2/generated-in/all_windows_prototypes.txt#_snippet_1\n\nLANGUAGE: C\nCODE:\n```\nNTSTATUS NtCreateFile (PHANDLE FileHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, PIO_STATUS_BLOCK IoStatusBlock, PLARGE_INTEGER AllocationSize, ULONG FileAttributes, ULONG ShareAccess, ULONG CreateDisposition, ULONG CreateOptions, PVOID EaBuffer, ULONG EaLength);\nNTSTATUS NtCreateIoCompletion (PHANDLE IoCompletionHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, ULONG Count);\nNTSTATUS NtCreateJobObject (PHANDLE JobHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes);\nNTSTATUS NtCreateJobSet (ULONG NumJob, PJOB_SET_ARRAY UserJobSet, ULONG Flags);\nNTSTATUS NtCreateKey (PHANDLE KeyHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, ULONG TitleIndex, PUNICODE_STRING Class, ULONG CreateOptions, PULONG Disposition);\nNTSTATUS NtCreateKeyTransacted (PHANDLE KeyHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, ULONG TitleIndex, PUNICODE_STRING Class, ULONG CreateOptions, HANDLE TransactionHandle, PULONG Disposition);\nNTSTATUS NtCreateKeyedEvent (PHANDLE KeyedEventHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, ULONG Flags);\nNTSTATUS NtCreateMailslotFile (PHANDLE FileHandle, ULONG DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, PIO_STATUS_BLOCK IoStatusBlock, ULONG CreateOptions, ULONG MailslotQuota, ULONG MaximumMessageSize, PLARGE_INTEGER ReadTimeout);\nNTSTATUS NtCreateMutant (PHANDLE MutantHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, BOOLEAN InitialOwner);\nNTSTATUS NtCreateNamedPipeFile (PHANDLE FileHandle, ULONG DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, PIO_STATUS_BLOCK IoStatusBlock, ULONG ShareAccess, ULONG CreateDisposition, ULONG CreateOptions, ULONG NamedPipeType, ULONG ReadMode, ULONG CompletionMode, ULONG MaximumInstances, ULONG InboundQuota, ULONG OutboundQuota, PLARGE_INTEGER DefaultTimeout);\nNTSTATUS NtCreatePagingFile (PUNICODE_STRING PageFileName, PLARGE_INTEGER MinimumSize, PLARGE_INTEGER MaximumSize, ULONG Priority);\nNTSTATUS NtCreatePort (PHANDLE PortHandle, POBJECT_ATTRIBUTES ObjectAttributes, ULONG MaxConnectionInfoLength, ULONG MaxMessageLength, ULONG MaxPoolUsage);\nNTSTATUS NtCreatePrivateNamespace (PHANDLE NamespaceHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, PVOID BoundaryDescriptor);\nNTSTATUS NtCreateProcess (PHANDLE ProcessHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, HANDLE ParentProcess, BOOLEAN InheritObjectTable, HANDLE SectionHandle, HANDLE DebugPort, HANDLE ExceptionPort);\nNTSTATUS NtCreateProcessEx (PHANDLE ProcessHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, HANDLE ParentProcess, ULONG Flags, HANDLE SectionHandle, HANDLE DebugPort, HANDLE ExceptionPort, ULONG JobMemberLevel);\nNTSTATUS NtCreateProfile (PHANDLE ProfileHandle, HANDLE Process, PVOID RangeBase, SIZE_T RangeSize, ULONG BucketSize, PULONG Buffer, ULONG BufferSize, KPROFILE_SOURCE ProfileSource, KAFFINITY Affinity);\nNTSTATUS NtCreateProfileEx (PHANDLE ProfileHandle, HANDLE Process, PVOID ProfileBase, SIZE_T ProfileSize, ULONG BucketSize, PULONG Buffer, ULONG BufferSize, KPROFILE_SOURCE ProfileSource, ULONG GroupAffinityCount, PGROUP_AFFINITY GroupAffinity);\nNTSTATUS NtCreateResourceManager (PHANDLE ResourceManagerHandle, ACCESS_MASK DesiredAccess, HANDLE TmHandle, LPGUID RmGuid, POBJECT_ATTRIBUTES ObjectAttributes, ULONG CreateOptions, PUNICODE_STRING Description);\nNTSTATUS NtCreateSection (PHANDLE SectionHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, PLARGE_INTEGER MaximumSize, ULONG SectionPageProtection, ULONG AllocationAttributes, HANDLE FileHandle);\nNTSTATUS NtCreateSemaphore (PHANDLE SemaphoreHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, LONG InitialCount, LONG MaximumCount);\nNTSTATUS NtCreateSymbolicLinkObject (PHANDLE LinkHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, PUNICODE_STRING LinkTarget);\nNTSTATUS NtCreateThread (PHANDLE ThreadHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, HANDLE ProcessHandle, PCLIENT_ID ClientId, PCONTEXT ThreadContext, PINITIAL_TEB InitialTeb, BOOLEAN CreateSuspended);\nNTSTATUS NtCreateThreadEx (PHANDLE ThreadHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, HANDLE ProcessHandle, PVOID StartRoutine, PVOID Argument, ULONG CreateFlags, ULONG_PTR ZeroBits, SIZE_T StackSize, SIZE_T MaximumStackSize, PPS_ATTRIBUTE_LIST AttributeList);\nNTSTATUS NtCreateTimer (PHANDLE TimerHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, TIMER_TYPE TimerType);\nNTSTATUS NtCreateToken (PHANDLE TokenHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, TOKEN_TYPE TokenType, PLUID AuthenticationId, PLARGE_INTEGER ExpirationTime, PTOKEN_USER User, PTOKEN_GROUPS Groups, PTOKEN_PRIVILEGES Privileges, PTOKEN_OWNER Owner, PTOKEN_PRIMARY_GROUP PrimaryGroup, PTOKEN_DEFAULT_DACL DefaultDacl, PTOKEN_SOURCE TokenSource);\nNTSTATUS NtCreateTransaction (PHANDLE TransactionHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, LPGUID Uow, HANDLE TmHandle, ULONG CreateOptions, ULONG IsolationLevel, ULONG IsolationFlags, PLARGE_INTEGER Timeout, PUNICODE_STRING Description);\nNTSTATUS NtCreateTransactionManager (PHANDLE TmHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, PUNICODE_STRING LogFileName, ULONG CreateOptions, ULONG CommitStrength);\nNTSTATUS NtCreateUserProcess (PHANDLE ProcessHandle, PHANDLE ThreadHandle, ACCESS_MASK ProcessDesiredAccess, ACCESS_MASK ThreadDesiredAccess, POBJECT_ATTRIBUTES ProcessObjectAttributes, POBJECT_ATTRIBUTES ThreadObjectAttributes, ULONG ProcessFlags, ULONG ThreadFlags, PRTL_USER_PROCESS_PARAMETERS ProcessParameters, PPROCESS_CREATE_INFO CreateInfo, PPROCESS_ATTRIBUTE_LIST AttributeList);\nNTSTATUS NtCreateWaitablePort (PHANDLE PortHandle, POBJECT_ATTRIBUTES ObjectAttributes, ULONG MaxConnectionInfoLength, ULONG MaxMessageLength, ULONG MaxPoolUsage);\nNTSTATUS NtCreateWorkerFactory (PHANDLE WorkerFactoryHandleReturn, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, HANDLE CompletionPortHandle, HANDLE WorkerProcessHandle, PVOID StartRoutine, PVOID StartParameter, ULONG MaxThreadCount, SIZE_T StackReserve, SIZE_T StackCommit);\nNTSTATUS NtDebugActiveProcess (HANDLE ProcessHandle, HANDLE DebugObjectHandle);\nNTSTATUS NtDebugContinue (HANDLE DebugObjectHandle, PCLIENT_ID ClientId, NTSTATUS ContinueStatus);\nNTSTATUS NtDelayExecution (BOOLEAN Alertable, PLARGE_INTEGER DelayInterval);\nNTSTATUS NtDeleteAtom (RTL_ATOM Atom);\nNTSTATUS NtDeleteBootEntry (ULONG Id);\nNTSTATUS NtDeleteDriverEntry (ULONG Id);\nNTSTATUS NtDeleteFile (POBJECT_ATTRIBUTES ObjectAttributes);\nNTSTATUS NtDeleteKey (HANDLE KeyHandle);\nNTSTATUS NtDeleteObjectAuditAlarm (PUNICODE_STRING SubsystemName, PVOID HandleId, BOOLEAN GenerateOnClose);\nNTSTATUS NtDeletePrivateNamespace (HANDLE NamespaceHandle);\nNTSTATUS NtDeleteValueKey (HANDLE KeyHandle, PUNICODE_STRING ValueName);\nNTSTATUS NtDeviceIoControlFile (HANDLE FileHandle, HANDLE Event, PIO_APC_ROUTINE ApcRoutine, PVOID ApcContext, PIO_STATUS_BLOCK IoStatusBlock, ULONG IoControlCode, PVOID InputBuffer, ULONG InputBufferLength, PVOID OutputBuffer, ULONG OutputBufferLength);\nNTSTATUS NtDisableLastKnownGood ();\nNTSTATUS NtDisplayString (PUNICODE_STRING String);\nNTSTATUS NtDrawText (PUNICODE_STRING Text);\nNTSTATUS NtDuplicateObject (HANDLE SourceProcessHandle, HANDLE SourceHandle, HANDLE TargetProcessHandle, PHANDLE TargetHandle, ACCESS_MASK DesiredAccess, ULONG HandleAttributes, ULONG Options);\nNTSTATUS NtDuplicateToken (HANDLE ExistingTokenHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, BOOLEAN EffectiveOnly, TOKEN_TYPE TokenType, PHANDLE NewTokenHandle);\nNTSTATUS NtEnableLastKnownGood ();\nNTSTATUS NtEnumerateBootEntries (PVOID Buffer, PULONG BufferLength);\nNTSTATUS NtEnumerateDriverEntries (PVOID Buffer, PULONG BufferLength);\nNTSTATUS NtEnumerateKey (HANDLE KeyHandle, ULONG Index, KEY_INFORMATION_CLASS KeyInformationClass, PVOID KeyInformation, ULONG Length, PULONG ResultLength);\nNTSTATUS NtEnumerateSystemEnvironmentValuesEx (ULONG InformationClass, PVOID Buffer, PULONG BufferLength);\nNTSTATUS NtEnumerateTransactionObject (HANDLE RootObjectHandle, KTMOBJECT_TYPE QueryType, PKTMOBJECT_CURSOR ObjectCursor, ULONG ObjectCursorLength, PULONG ReturnLength);\nNTSTATUS NtEnumerateValueKey (HANDLE KeyHandle, ULONG Index, KEY_VALUE_INFORMATION_CLASS KeyValueInformationClass, PVOID KeyValueInformation, ULONG Length, PULONG ResultLength);\nNTSTATUS NtExtendSection (HANDLE SectionHandle, PLARGE_INTEGER NewSectionSize);\nNTSTATUS NtFilterToken (HANDLE ExistingTokenHandle, ULONG Flags, PTOKEN_GROUPS SidsToDisable, PTOKEN_PRIVILEGES PrivilegesToDelete, PTOKEN_GROUPS RestrictedSids, PHANDLE NewTokenHandle);\nNTSTATUS NtFindAtom (PWSTR AtomName, ULONG Length, PRTL_ATOM Atom);\nNTSTATUS NtFlushBuffersFile (HANDLE FileHandle, PIO_STATUS_BLOCK IoStatusBlock);\nNTSTATUS NtFlushInstallUILanguage (LANGID InstallUILanguage, ULONG SetComittedFlag);\nNTSTATUS NtFlushInstructionCache (HANDLE ProcessHandle, PVOID BaseAddress, SIZE_T Length);\nNTSTATUS NtFlushKey (HANDLE KeyHandle);\nVOID NtFlushProcessWriteBuffers ();\nNTSTATUS NtFlushVirtualMemory (HANDLE ProcessHandle, PVOID *BaseAddress, PSIZE_T RegionSize, PIO_STATUS_BLOCK IoStatus);\nNTSTATUS NtFlushWriteBuffer ();\nNTSTATUS NtFreeUserPhysicalPages (HANDLE ProcessHandle, PULONG_PTR NumberOfPages, PULONG_PTR UserPfnArray);\nNTSTATUS NtFreeVirtualMemory (HANDLE ProcessHandle, PVOID *BaseAddress, PSIZE_T RegionSize, ULONG FreeType);\nNTSTATUS NtFreezeRegistry (ULONG TimeOutInSeconds);\nNTSTATUS NtFreezeTransactions (PLARGE_INTEGER FreezeTimeout, PLARGE_INTEGER ThawTimeout);\n```\n\n----------------------------------------\n\nTITLE: Declaring Windows NT Native API Functions for System Management and I/O Operations\nDESCRIPTION: These function declarations define the interface for direct Windows NT system calls, which are typically used by drivers and low-level system components. The declarations include operations for registry management, file handling, memory operations, and process/thread control.\nSOURCE: https://github.com/panda-re/panda-ng/blob/main/plugins/syscalls2/generated-in/windows_vistasp0_x64_prototypes.txt#_snippet_10\n\nLANGUAGE: C\nCODE:\n```\nNTSTATUS NtTestAlert ();\nNTSTATUS NtThawRegistry ();\nNTSTATUS NtThawTransactions ();\nNTSTATUS NtTraceControl (ULONG FunctionCode, PVOID InBuffer, ULONG InBufferLen, PVOID OutBuffer, ULONG OutBufferLen, PULONG ReturnLength);\nNTSTATUS NtTranslateFilePath (PFILE_PATH InputFilePath, ULONG OutputType, PFILE_PATH OutputFilePath, PULONG OutputFilePathLength);\nNTSTATUS NtUnloadDriver (PUNICODE_STRING DriverServiceName);\nNTSTATUS NtUnloadKey (POBJECT_ATTRIBUTES TargetKey);\nNTSTATUS NtUnloadKey2 (POBJECT_ATTRIBUTES TargetKey, ULONG Flags);\nNTSTATUS NtUnloadKeyEx (POBJECT_ATTRIBUTES TargetKey, HANDLE Event);\nNTSTATUS NtUnlockFile (HANDLE FileHandle, PIO_STATUS_BLOCK IoStatusBlock, PLARGE_INTEGER ByteOffset, PLARGE_INTEGER Length, ULONG Key);\nNTSTATUS NtUnlockVirtualMemory (HANDLE ProcessHandle, PVOID *BaseAddress, PSIZE_T RegionSize, ULONG MapType);\nNTSTATUS NtVdmControl (VDMSERVICECLASS Service, PVOID ServiceData);\nNTSTATUS NtWaitForDebugEvent (HANDLE DebugObjectHandle, BOOLEAN Alertable, PLARGE_INTEGER Timeout, PDBGUI_WAIT_STATE_CHANGE WaitStateChange);\nNTSTATUS NtWaitForKeyedEvent (HANDLE KeyedEventHandle, PVOID KeyValue, BOOLEAN Alertable, PLARGE_INTEGER Timeout);\nNTSTATUS NtWaitForWorkViaWorkerFactory (HANDLE WorkerFactoryHandle, PFILE_IO_COMPLETION_INFORMATION MiniPacket);\nNTSTATUS NtWaitHighEventPair (HANDLE EventPairHandle);\nNTSTATUS NtWaitLowEventPair (HANDLE EventPairHandle);\nNTSTATUS NtWorkerFactoryWorkerReady (HANDLE WorkerFactoryHandle);\n```\n\n----------------------------------------\n\nTITLE: Declaring Windows NT File and Registry Management Functions in C\nDESCRIPTION: Function declarations for Windows NT system calls related to file operations, registry handling, and device control. These functions provide direct access to creating, managing, and controlling files, registry keys, and device I/O operations.\nSOURCE: https://github.com/panda-re/panda-ng/blob/main/plugins/syscalls2/generated-in/windows_vistasp0_x86_prototypes.txt#_snippet_3\n\nLANGUAGE: C\nCODE:\n```\nNTSTATUS NtCreateKeyTransacted (PHANDLE KeyHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, ULONG TitleIndex, PUNICODE_STRING Class, ULONG CreateOptions, HANDLE TransactionHandle, PULONG Disposition);\nNTSTATUS NtCreateMailslotFile (PHANDLE FileHandle, ULONG DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, PIO_STATUS_BLOCK IoStatusBlock, ULONG CreateOptions, ULONG MailslotQuota, ULONG MaximumMessageSize, PLARGE_INTEGER ReadTimeout);\nNTSTATUS NtCreateNamedPipeFile (PHANDLE FileHandle, ULONG DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, PIO_STATUS_BLOCK IoStatusBlock, ULONG ShareAccess, ULONG CreateDisposition, ULONG CreateOptions, ULONG NamedPipeType, ULONG ReadMode, ULONG CompletionMode, ULONG MaximumInstances, ULONG InboundQuota, ULONG OutboundQuota, PLARGE_INTEGER DefaultTimeout);\nNTSTATUS NtCreatePagingFile (PUNICODE_STRING PageFileName, PLARGE_INTEGER MinimumSize, PLARGE_INTEGER MaximumSize, ULONG Priority);\nNTSTATUS NtDeleteBootEntry (ULONG Id);\nNTSTATUS NtDeleteDriverEntry (ULONG Id);\nNTSTATUS NtDeleteFile (POBJECT_ATTRIBUTES ObjectAttributes);\nNTSTATUS NtDeleteKey (HANDLE KeyHandle);\nNTSTATUS NtDeleteValueKey (HANDLE KeyHandle, PUNICODE_STRING ValueName);\nNTSTATUS NtDeviceIoControlFile (HANDLE FileHandle, HANDLE Event, PIO_APC_ROUTINE ApcRoutine, PVOID ApcContext, PIO_STATUS_BLOCK IoStatusBlock, ULONG IoControlCode, PVOID InputBuffer, ULONG InputBufferLength, PVOID OutputBuffer, ULONG OutputBufferLength);\nNTSTATUS NtDisplayString (PUNICODE_STRING String);\n```\n\n----------------------------------------\n\nTITLE: File Operation System Calls in C\nDESCRIPTION: System call definitions for file operations including read, write, truncate, and stat functions. These declarations handle file I/O and file system operations.\nSOURCE: https://github.com/panda-re/panda-ng/blob/main/plugins/syscalls2/generated-in/linux_mips_prototypes.txt#_snippet_2\n\nLANGUAGE: C\nCODE:\n```\nlong sys_pread64(unsigned int fd, char __user *buf, size_t count, loff_t pos);\nlong sys_pwrite64(unsigned int fd, const char __user *buf, size_t count, loff_t pos);\nlong sys_truncate64(const char __user *path, loff_t length);\nlong sys_ftruncate64(unsigned int fd, loff_t length);\n```\n\n----------------------------------------\n\nTITLE: Listing Python Dependencies for PANDA-NG\nDESCRIPTION: A simple requirements list specifying the Python packages needed for the PANDA-NG project. It requires cffi for interfacing with C code and rich for enhanced terminal output formatting.\nSOURCE: https://github.com/panda-re/panda-ng/blob/main/python/core/requirements.txt#_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\ncffi\nrich\n```\n\n----------------------------------------\n\nTITLE: Windows NT Memory Management Function Declarations in C\nDESCRIPTION: Function signatures for NT API calls related to memory management, including mapping views of sections and handling physical memory pages.\nSOURCE: https://github.com/panda-re/panda-ng/blob/main/plugins/syscalls2/generated-in/all_windows_prototypes.txt#_snippet_5\n\nLANGUAGE: C\nCODE:\n```\nNTSTATUS NtMapViewOfSection (HANDLE SectionHandle, HANDLE ProcessHandle, PVOID *BaseAddress, ULONG_PTR ZeroBits, SIZE_T CommitSize, PLARGE_INTEGER SectionOffset, PSIZE_T ViewSize, SECTION_INHERIT InheritDisposition, ULONG AllocationType, WIN32_PROTECTION_MASK Win32Protect);\n```\n\nLANGUAGE: C\nCODE:\n```\nNTSTATUS NtMapUserPhysicalPages (PVOID VirtualAddress, ULONG_PTR NumberOfPages, PULONG_PTR UserPfnArray);\n```\n\nLANGUAGE: C\nCODE:\n```\nNTSTATUS NtMapUserPhysicalPagesScatter (PVOID *VirtualAddresses, ULONG_PTR NumberOfPages, PULONG_PTR UserPfnArray);\n```\n\nLANGUAGE: C\nCODE:\n```\nNTSTATUS NtLockVirtualMemory (HANDLE ProcessHandle, PVOID *BaseAddress, PSIZE_T RegionSize, ULONG MapType);\n```\n\n----------------------------------------\n\nTITLE: Declaring Windows NT Native API Function Prototypes - C\nDESCRIPTION: This snippet contains a sequential block of C function prototypes representing the Windows NT Native API (NTDLL) system calls. Each function is declared with the NTSTATUS return type and detailed parameter types for strict type safety and correctness. Dependencies include Windows NT types (e.g., HANDLE, PUNICODE_STRING, IO_STATUS_BLOCK), which must be defined elsewhere, typically in relevant Windows headers. Functions are named NtQuery*, NtSet*, NtSuspend*, etc., with parameters tailored for object handles, classes, buffers, and flags, allowing direct invocation of NT kernel services from user mode in C code. The output is intended for inclusion as header declarations, requiring linkage against NTDLL or equivalent kernel stubs.\nSOURCE: https://github.com/panda-re/panda-ng/blob/main/plugins/syscalls2/generated-in/windows_vistasp12_x64_prototypes.txt#_snippet_7\n\nLANGUAGE: C\nCODE:\n```\nNTSTATUS NtQueryIoCompletion (HANDLE IoCompletionHandle, IO_COMPLETION_INFORMATION_CLASS IoCompletionInformationClass, PVOID IoCompletionInformation, ULONG IoCompletionInformationLength, PULONG ReturnLength);\nNTSTATUS NtQueryLicenseValue (PUNICODE_STRING Name, PULONG Type, PVOID Buffer, ULONG Length, PULONG ReturnedLength);\nNTSTATUS NtQueryMultipleValueKey (HANDLE KeyHandle, PKEY_VALUE_ENTRY ValueEntries, ULONG EntryCount, PVOID ValueBuffer, PULONG BufferLength, PULONG RequiredBufferLength);\nNTSTATUS NtQueryMutant (HANDLE MutantHandle, MUTANT_INFORMATION_CLASS MutantInformationClass, PVOID MutantInformation, ULONG MutantInformationLength, PULONG ReturnLength);\nNTSTATUS NtQueryOpenSubKeys (POBJECT_ATTRIBUTES TargetKey, PULONG HandleCount);\nNTSTATUS NtQueryOpenSubKeysEx (POBJECT_ATTRIBUTES TargetKey, ULONG BufferLength, PVOID Buffer, PULONG RequiredSize);\nNTSTATUS NtQueryPortInformationProcess ();\nNTSTATUS NtQueryQuotaInformationFile (HANDLE FileHandle, PIO_STATUS_BLOCK IoStatusBlock, PVOID Buffer, ULONG Length, BOOLEAN ReturnSingleEntry, PVOID SidList, ULONG SidListLength, PULONG StartSid, BOOLEAN RestartScan);\nNTSTATUS NtQuerySecurityObject (HANDLE Handle, SECURITY_INFORMATION SecurityInformation, PSECURITY_DESCRIPTOR SecurityDescriptor, ULONG Length, PULONG LengthNeeded);\nNTSTATUS NtQuerySemaphore (HANDLE SemaphoreHandle, SEMAPHORE_INFORMATION_CLASS SemaphoreInformationClass, PVOID SemaphoreInformation, ULONG SemaphoreInformationLength, PULONG ReturnLength);\nNTSTATUS NtQuerySymbolicLinkObject (HANDLE LinkHandle, PUNICODE_STRING LinkTarget, PULONG ReturnedLength);\nNTSTATUS NtQuerySystemEnvironmentValue (PUNICODE_STRING VariableName, PWSTR VariableValue, USHORT ValueLength, PUSHORT ReturnLength);\nNTSTATUS NtQuerySystemEnvironmentValueEx (PUNICODE_STRING VariableName, LPGUID VendorGuid, PVOID Value, PULONG ValueLength, PULONG Attributes);\nNTSTATUS NtQueryTimerResolution (PULONG MaximumTime, PULONG MinimumTime, PULONG CurrentTime);\nNTSTATUS NtRaiseException (PEXCEPTION_RECORD ExceptionRecord, PCONTEXT ContextRecord, BOOLEAN FirstChance);\nNTSTATUS NtRaiseHardError (NTSTATUS ErrorStatus, ULONG NumberOfParameters, ULONG UnicodeStringParameterMask, PULONG_PTR Parameters, ULONG ValidResponseOptions, PULONG Response);\nNTSTATUS NtReadOnlyEnlistment (HANDLE EnlistmentHandle, PLARGE_INTEGER TmVirtualClock);\nNTSTATUS NtRecoverEnlistment (HANDLE EnlistmentHandle, PVOID EnlistmentKey);\nNTSTATUS NtRecoverResourceManager (HANDLE ResourceManagerHandle);\nNTSTATUS NtRecoverTransactionManager (HANDLE TransactionManagerHandle);\nNTSTATUS NtRegisterProtocolAddressInformation (HANDLE ResourceManager, PCRM_PROTOCOL_ID ProtocolId, ULONG ProtocolInformationSize, PVOID ProtocolInformation, ULONG CreateOptions);\nNTSTATUS NtRegisterThreadTerminatePort (HANDLE PortHandle);\nNTSTATUS NtReleaseKeyedEvent (HANDLE KeyedEventHandle, PVOID KeyValue, BOOLEAN Alertable, PLARGE_INTEGER Timeout);\nNTSTATUS NtReleaseWorkerFactoryWorker (HANDLE WorkerFactoryHandle);\nNTSTATUS NtRemoveIoCompletionEx (HANDLE IoCompletionHandle, PFILE_IO_COMPLETION_INFORMATION IoCompletionInformation, ULONG Count, PULONG NumEntriesRemoved, PLARGE_INTEGER Timeout, BOOLEAN Alertable);\nNTSTATUS NtRemoveProcessDebug (HANDLE ProcessHandle, HANDLE DebugObjectHandle);\nNTSTATUS NtRenameKey (HANDLE KeyHandle, PUNICODE_STRING NewName);\nNTSTATUS NtRenameTransactionManager (PUNICODE_STRING LogFileName, LPGUID ExistingTransactionManagerGuid);\nNTSTATUS NtReplaceKey (POBJECT_ATTRIBUTES NewFile, HANDLE TargetHandle, POBJECT_ATTRIBUTES OldFile);\nNTSTATUS NtReplacePartitionUnit (PUNICODE_STRING TargetInstancePath, PUNICODE_STRING SpareInstancePath, ULONG Flags);\nNTSTATUS NtReplyWaitReplyPort (HANDLE PortHandle, PPORT_MESSAGE ReplyMessage);\nNTSTATUS NtRequestPort (HANDLE PortHandle, PPORT_MESSAGE RequestMessage);\nNTSTATUS NtResetEvent (HANDLE EventHandle, PLONG PreviousState);\nNTSTATUS NtResetWriteWatch (HANDLE ProcessHandle, PVOID BaseAddress, SIZE_T RegionSize);\nNTSTATUS NtRestoreKey (HANDLE KeyHandle, HANDLE FileHandle, ULONG Flags);\nNTSTATUS NtResumeProcess (HANDLE ProcessHandle);\nNTSTATUS NtRollbackComplete (HANDLE EnlistmentHandle, PLARGE_INTEGER TmVirtualClock);\nNTSTATUS NtRollbackEnlistment (HANDLE EnlistmentHandle, PLARGE_INTEGER TmVirtualClock);\nNTSTATUS NtRollbackTransaction (HANDLE TransactionHandle, BOOLEAN Wait);\nNTSTATUS NtRollforwardTransactionManager (HANDLE TransactionManagerHandle, PLARGE_INTEGER TmVirtualClock);\nNTSTATUS NtSaveKey (HANDLE KeyHandle, HANDLE FileHandle);\nNTSTATUS NtSaveKeyEx (HANDLE KeyHandle, HANDLE FileHandle, ULONG Format);\nNTSTATUS NtSaveMergedKeys (HANDLE HighPrecedenceKeyHandle, HANDLE LowPrecedenceKeyHandle, HANDLE FileHandle);\nNTSTATUS NtSecureConnectPort (PHANDLE PortHandle, PUNICODE_STRING PortName, PSECURITY_QUALITY_OF_SERVICE SecurityQos, PPORT_VIEW ClientView, PSID RequiredServerSid, PREMOTE_PORT_VIEW ServerView, PULONG MaxMessageLength, PVOID ConnectionInformation, PULONG ConnectionInformationLength);\nNTSTATUS NtSetBootEntryOrder (PULONG Ids, ULONG Count);\nNTSTATUS NtSetBootOptions (PBOOT_OPTIONS BootOptions, ULONG FieldsToChange);\nNTSTATUS NtSetContextThread (HANDLE ThreadHandle, PCONTEXT ThreadContext);\nNTSTATUS NtSetDebugFilterState (ULONG ComponentId, ULONG Level, BOOLEAN State);\nNTSTATUS NtSetDefaultHardErrorPort (HANDLE DefaultHardErrorPort);\nNTSTATUS NtSetDefaultLocale (BOOLEAN UserProfile, LCID DefaultLocaleId);\nNTSTATUS NtSetDefaultUILanguage (LANGID DefaultUILanguageId);\nNTSTATUS NtSetDriverEntryOrder (PULONG Ids, ULONG Count);\nNTSTATUS NtSetEaFile (HANDLE FileHandle, PIO_STATUS_BLOCK IoStatusBlock, PVOID Buffer, ULONG Length);\nNTSTATUS NtSetHighEventPair (HANDLE EventPairHandle);\nNTSTATUS NtSetHighWaitLowEventPair (HANDLE EventPairHandle);\nNTSTATUS NtSetInformationDebugObject (HANDLE DebugObjectHandle, DEBUGOBJECTINFOCLASS DebugObjectInformationClass, PVOID DebugInformation, ULONG DebugInformationLength, PULONG ReturnLength);\nNTSTATUS NtSetInformationEnlistment (HANDLE EnlistmentHandle, ENLISTMENT_INFORMATION_CLASS EnlistmentInformationClass, PVOID EnlistmentInformation, ULONG EnlistmentInformationLength);\nNTSTATUS NtSetInformationJobObject (HANDLE JobHandle, JOBOBJECTINFOCLASS JobObjectInformationClass, PVOID JobObjectInformation, ULONG JobObjectInformationLength);\nNTSTATUS NtSetInformationKey (HANDLE KeyHandle, KEY_SET_INFORMATION_CLASS KeySetInformationClass, PVOID KeySetInformation, ULONG KeySetInformationLength);\nNTSTATUS NtSetInformationResourceManager (HANDLE ResourceManagerHandle, RESOURCEMANAGER_INFORMATION_CLASS ResourceManagerInformationClass, PVOID ResourceManagerInformation, ULONG ResourceManagerInformationLength);\nNTSTATUS NtSetInformationToken (HANDLE TokenHandle, TOKEN_INFORMATION_CLASS TokenInformationClass, PVOID TokenInformation, ULONG TokenInformationLength);\nNTSTATUS NtSetInformationTransaction (HANDLE TransactionHandle, TRANSACTION_INFORMATION_CLASS TransactionInformationClass, PVOID TransactionInformation, ULONG TransactionInformationLength);\nNTSTATUS NtSetInformationTransactionManager (HANDLE TmHandle, TRANSACTIONMANAGER_INFORMATION_CLASS TransactionManagerInformationClass, PVOID TransactionManagerInformation, ULONG TransactionManagerInformationLength);\nNTSTATUS NtSetInformationWorkerFactory (HANDLE WorkerFactoryHandle, WORKERFACTORYINFOCLASS WorkerFactoryInformationClass, PVOID WorkerFactoryInformation, ULONG WorkerFactoryInformationLength);\nNTSTATUS NtSetIntervalProfile (ULONG Interval, KPROFILE_SOURCE Source);\nNTSTATUS NtSetIoCompletion (HANDLE IoCompletionHandle, PVOID KeyContext, PVOID ApcContext, NTSTATUS IoStatus, ULONG_PTR IoStatusInformation);\nNTSTATUS NtSetLdtEntries (ULONG Selector0, ULONG Entry0Low, ULONG Entry0Hi, ULONG Selector1, ULONG Entry1Low, ULONG Entry1Hi);\nNTSTATUS NtSetLowEventPair (HANDLE EventPairHandle);\nNTSTATUS NtSetLowWaitHighEventPair (HANDLE EventPairHandle);\nNTSTATUS NtSetQuotaInformationFile (HANDLE FileHandle, PIO_STATUS_BLOCK IoStatusBlock, PVOID Buffer, ULONG Length);\nNTSTATUS NtSetSecurityObject (HANDLE Handle, SECURITY_INFORMATION SecurityInformation, PSECURITY_DESCRIPTOR SecurityDescriptor);\nNTSTATUS NtSetSystemEnvironmentValue (PUNICODE_STRING VariableName, PUNICODE_STRING VariableValue);\nNTSTATUS NtSetSystemEnvironmentValueEx (PUNICODE_STRING VariableName, LPGUID VendorGuid, PVOID Value, ULONG ValueLength, ULONG Attributes);\nNTSTATUS NtSetSystemInformation (SYSTEM_INFORMATION_CLASS SystemInformationClass, PVOID SystemInformation, ULONG SystemInformationLength);\nNTSTATUS NtSetSystemPowerState (POWER_ACTION SystemAction, SYSTEM_POWER_STATE MinSystemState, ULONG Flags);\nNTSTATUS NtSetSystemTime (PLARGE_INTEGER SystemTime, PLARGE_INTEGER PreviousTime);\nNTSTATUS NtSetThreadExecutionState (EXECUTION_STATE esFlags, PEXECUTION_STATE PreviousFlags);\nNTSTATUS NtSetTimerResolution (ULONG DesiredTime, BOOLEAN SetResolution, PULONG ActualTime);\nNTSTATUS NtSetUuidSeed (PCHAR Seed);\nNTSTATUS NtSetVolumeInformationFile (HANDLE FileHandle, PIO_STATUS_BLOCK IoStatusBlock, PVOID FsInformation, ULONG Length, FS_INFORMATION_CLASS FsInformationClass);\nNTSTATUS NtShutdownSystem (SHUTDOWN_ACTION Action);\nNTSTATUS NtShutdownWorkerFactory (HANDLE WorkerFactoryHandle, LONG *PendingWorkerCount);\nNTSTATUS NtSignalAndWaitForSingleObject (HANDLE SignalHandle, HANDLE WaitHandle, BOOLEAN Alertable, PLARGE_INTEGER Timeout);\nNTSTATUS NtSinglePhaseReject (HANDLE EnlistmentHandle, PLARGE_INTEGER TmVirtualClock);\nNTSTATUS NtStartProfile (HANDLE ProfileHandle);\nNTSTATUS NtStopProfile (HANDLE ProfileHandle);\nNTSTATUS NtSuspendProcess (HANDLE ProcessHandle);\nNTSTATUS NtSuspendThread (HANDLE ThreadHandle, PULONG PreviousSuspendCount);\n```\n\n----------------------------------------\n\nTITLE: Declaring Windows NT Native API Function Prototypes in C\nDESCRIPTION: This code snippet declares multiple NT Native API system call prototypes using C syntax, intended for inclusion in headers or implementation files. Each function corresponds to a unique kernel operation and uses specialized Windows types (e.g., HANDLE, NTSTATUS, POBJECT_ATTRIBUTES), which must be defined or included via other headers such as Windows.h or ntdef.h. These function declarations require linkage to the underlying NT API at runtime and are not directly supported by standard user-mode libraries.\nSOURCE: https://github.com/panda-re/panda-ng/blob/main/plugins/syscalls2/generated-in/windows_2003sp0_x86_prototypes.txt#_snippet_4\n\nLANGUAGE: C\nCODE:\n```\nNTSTATUS NtProtectVirtualMemory (HANDLE ProcessHandle, PVOID *BaseAddress, PSIZE_T RegionSize, WIN32_PROTECTION_MASK NewProtectWin32, PULONG OldProtect);\nNTSTATUS NtPulseEvent (HANDLE EventHandle, PLONG PreviousState);\nNTSTATUS NtQueryAttributesFile (POBJECT_ATTRIBUTES ObjectAttributes, PFILE_BASIC_INFORMATION FileInformation);\nNTSTATUS NtQueryBootEntryOrder (PULONG Ids, PULONG Count);\nNTSTATUS NtQueryBootOptions (PBOOT_OPTIONS BootOptions, PULONG BootOptionsLength);\nNTSTATUS NtQueryDebugFilterState (ULONG ComponentId, ULONG Level);\nNTSTATUS NtQueryDefaultLocale (BOOLEAN UserProfile, PLCID DefaultLocaleId);\nNTSTATUS NtQueryDefaultUILanguage (LANGID *DefaultUILanguageId);\nNTSTATUS NtQueryDirectoryFile (HANDLE FileHandle, HANDLE Event, PIO_APC_ROUTINE ApcRoutine, PVOID ApcContext, PIO_STATUS_BLOCK IoStatusBlock, PVOID FileInformation, ULONG Length, FILE_INFORMATION_CLASS FileInformationClass, BOOLEAN ReturnSingleEntry, PUNICODE_STRING FileName, BOOLEAN RestartScan);\nNTSTATUS NtQueryDirectoryObject (HANDLE DirectoryHandle, PVOID Buffer, ULONG Length, BOOLEAN ReturnSingleEntry, BOOLEAN RestartScan, PULONG Context, PULONG ReturnLength);\nNTSTATUS NtQueryDriverEntryOrder (PULONG Ids, PULONG Count);\nNTSTATUS NtQueryEaFile (HANDLE FileHandle, PIO_STATUS_BLOCK IoStatusBlock, PVOID Buffer, ULONG Length, BOOLEAN ReturnSingleEntry, PVOID EaList, ULONG EaListLength, PULONG EaIndex, BOOLEAN RestartScan);\nNTSTATUS NtQueryEvent (HANDLE EventHandle, EVENT_INFORMATION_CLASS EventInformationClass, PVOID EventInformation, ULONG EventInformationLength, PULONG ReturnLength);\nNTSTATUS NtQueryFullAttributesFile (POBJECT_ATTRIBUTES ObjectAttributes, PFILE_NETWORK_OPEN_INFORMATION FileInformation);\nNTSTATUS NtQueryInformationAtom (RTL_ATOM Atom, ATOM_INFORMATION_CLASS InformationClass, PVOID AtomInformation, ULONG AtomInformationLength, PULONG ReturnLength);\nNTSTATUS NtQueryInformationFile (HANDLE FileHandle, PIO_STATUS_BLOCK IoStatusBlock, PVOID FileInformation, ULONG Length, FILE_INFORMATION_CLASS FileInformationClass);\nNTSTATUS NtQueryInformationJobObject (HANDLE JobHandle, JOBOBJECTINFOCLASS JobObjectInformationClass, PVOID JobObjectInformation, ULONG JobObjectInformationLength, PULONG ReturnLength);\nNTSTATUS NtQueryInformationPort (HANDLE PortHandle, PORT_INFORMATION_CLASS PortInformationClass, PVOID PortInformation, ULONG Length, PULONG ReturnLength);\nNTSTATUS NtQueryInformationProcess (HANDLE ProcessHandle, PROCESSINFOCLASS ProcessInformationClass, PVOID ProcessInformation, ULONG ProcessInformationLength, PULONG ReturnLength);\nNTSTATUS NtQueryInformationThread (HANDLE ThreadHandle, THREADINFOCLASS ThreadInformationClass, PVOID ThreadInformation, ULONG ThreadInformationLength, PULONG ReturnLength);\nNTSTATUS NtQueryInformationToken (HANDLE TokenHandle, TOKEN_INFORMATION_CLASS TokenInformationClass, PVOID TokenInformation, ULONG TokenInformationLength, PULONG ReturnLength);\nNTSTATUS NtQueryInstallUILanguage (LANGID *InstallUILanguageId);\nNTSTATUS NtQueryIntervalProfile (KPROFILE_SOURCE ProfileSource, PULONG Interval);\nNTSTATUS NtQueryIoCompletion (HANDLE IoCompletionHandle, IO_COMPLETION_INFORMATION_CLASS IoCompletionInformationClass, PVOID IoCompletionInformation, ULONG IoCompletionInformationLength, PULONG ReturnLength);\nNTSTATUS NtQueryKey (HANDLE KeyHandle, KEY_INFORMATION_CLASS KeyInformationClass, PVOID KeyInformation, ULONG Length, PULONG ResultLength);\nNTSTATUS NtQueryMultipleValueKey (HANDLE KeyHandle, PKEY_VALUE_ENTRY ValueEntries, ULONG EntryCount, PVOID ValueBuffer, PULONG BufferLength, PULONG RequiredBufferLength);\nNTSTATUS NtQueryMutant (HANDLE MutantHandle, MUTANT_INFORMATION_CLASS MutantInformationClass, PVOID MutantInformation, ULONG MutantInformationLength, PULONG ReturnLength);\nNTSTATUS NtQueryObject (HANDLE Handle, OBJECT_INFORMATION_CLASS ObjectInformationClass, PVOID ObjectInformation, ULONG ObjectInformationLength, PULONG ReturnLength);\nNTSTATUS NtQueryOpenSubKeys (POBJECT_ATTRIBUTES TargetKey, PULONG HandleCount);\nNTSTATUS NtQueryOpenSubKeysEx (POBJECT_ATTRIBUTES TargetKey, ULONG BufferLength, PVOID Buffer, PULONG RequiredSize);\nNTSTATUS NtQueryPerformanceCounter (PLARGE_INTEGER PerformanceCounter, PLARGE_INTEGER PerformanceFrequency);\nNTSTATUS NtQueryQuotaInformationFile (HANDLE FileHandle, PIO_STATUS_BLOCK IoStatusBlock, PVOID Buffer, ULONG Length, BOOLEAN ReturnSingleEntry, PVOID SidList, ULONG SidListLength, PULONG StartSid, BOOLEAN RestartScan);\nNTSTATUS NtQuerySection (HANDLE SectionHandle, SECTION_INFORMATION_CLASS SectionInformationClass, PVOID SectionInformation, SIZE_T SectionInformationLength, PSIZE_T ReturnLength);\nNTSTATUS NtQuerySecurityObject (HANDLE Handle, SECURITY_INFORMATION SecurityInformation, PSECURITY_DESCRIPTOR SecurityDescriptor, ULONG Length, PULONG LengthNeeded);\nNTSTATUS NtQuerySemaphore (HANDLE SemaphoreHandle, SEMAPHORE_INFORMATION_CLASS SemaphoreInformationClass, PVOID SemaphoreInformation, ULONG SemaphoreInformationLength, PULONG ReturnLength);\nNTSTATUS NtQuerySymbolicLinkObject (HANDLE LinkHandle, PUNICODE_STRING LinkTarget, PULONG ReturnedLength);\nNTSTATUS NtQuerySystemEnvironmentValue (PUNICODE_STRING VariableName, PWSTR VariableValue, USHORT ValueLength, PUSHORT ReturnLength);\nNTSTATUS NtQuerySystemEnvironmentValueEx (PUNICODE_STRING VariableName, LPGUID VendorGuid, PVOID Value, PULONG ValueLength, PULONG Attributes);\nNTSTATUS NtQuerySystemInformation (SYSTEM_INFORMATION_CLASS SystemInformationClass, PVOID SystemInformation, ULONG SystemInformationLength, PULONG ReturnLength);\nNTSTATUS NtQuerySystemTime (PLARGE_INTEGER SystemTime);\nNTSTATUS NtQueryTimer (HANDLE TimerHandle, TIMER_INFORMATION_CLASS TimerInformationClass, PVOID TimerInformation, ULONG TimerInformationLength, PULONG ReturnLength);\nNTSTATUS NtQueryTimerResolution (PULONG MaximumTime, PULONG MinimumTime, PULONG CurrentTime);\nNTSTATUS NtQueryValueKey (HANDLE KeyHandle, PUNICODE_STRING ValueName, KEY_VALUE_INFORMATION_CLASS KeyValueInformationClass, PVOID KeyValueInformation, ULONG Length, PULONG ResultLength);\nNTSTATUS NtQueryVirtualMemory (HANDLE ProcessHandle, PVOID BaseAddress, MEMORY_INFORMATION_CLASS MemoryInformationClass, PVOID MemoryInformation, SIZE_T MemoryInformationLength, PSIZE_T ReturnLength);\nNTSTATUS NtQueryVolumeInformationFile (HANDLE FileHandle, PIO_STATUS_BLOCK IoStatusBlock, PVOID FsInformation, ULONG Length, FS_INFORMATION_CLASS FsInformationClass);\nNTSTATUS NtQueueApcThread (HANDLE ThreadHandle, PPS_APC_ROUTINE ApcRoutine, PVOID ApcArgument1, PVOID ApcArgument2, PVOID ApcArgument3);\nNTSTATUS NtRaiseException (PEXCEPTION_RECORD ExceptionRecord, PCONTEXT ContextRecord, BOOLEAN FirstChance);\nNTSTATUS NtRaiseHardError (NTSTATUS ErrorStatus, ULONG NumberOfParameters, ULONG UnicodeStringParameterMask, PULONG_PTR Parameters, ULONG ValidResponseOptions, PULONG Response);\nNTSTATUS NtReadFile (HANDLE FileHandle, HANDLE Event, PIO_APC_ROUTINE ApcRoutine, PVOID ApcContext, PIO_STATUS_BLOCK IoStatusBlock, PVOID Buffer, ULONG Length, PLARGE_INTEGER ByteOffset, PULONG Key);\nNTSTATUS NtReadFileScatter (HANDLE FileHandle, HANDLE Event, PIO_APC_ROUTINE ApcRoutine, PVOID ApcContext, PIO_STATUS_BLOCK IoStatusBlock, PFILE_SEGMENT_ELEMENT SegmentArray, ULONG Length, PLARGE_INTEGER ByteOffset, PULONG Key);\nNTSTATUS NtReadRequestData (HANDLE PortHandle, PPORT_MESSAGE Message, ULONG DataEntryIndex, PVOID Buffer, SIZE_T BufferSize, PSIZE_T NumberOfBytesRead);\nNTSTATUS NtReadVirtualMemory (HANDLE ProcessHandle, PVOID BaseAddress, PVOID Buffer, SIZE_T BufferSize, PSIZE_T NumberOfBytesRead);\nNTSTATUS NtRegisterThreadTerminatePort (HANDLE PortHandle);\nNTSTATUS NtReleaseMutant (HANDLE MutantHandle, PLONG PreviousCount);\nNTSTATUS NtReleaseSemaphore (HANDLE SemaphoreHandle, LONG ReleaseCount, PLONG PreviousCount);\nNTSTATUS NtRemoveIoCompletion (HANDLE IoCompletionHandle, PVOID *KeyContext, PVOID *ApcContext, PIO_STATUS_BLOCK IoStatusBlock, PLARGE_INTEGER Timeout);\nNTSTATUS NtRemoveProcessDebug (HANDLE ProcessHandle, HANDLE DebugObjectHandle);\nNTSTATUS NtRenameKey (HANDLE KeyHandle, PUNICODE_STRING NewName);\nNTSTATUS NtReplaceKey (POBJECT_ATTRIBUTES NewFile, HANDLE TargetHandle, POBJECT_ATTRIBUTES OldFile);\nNTSTATUS NtReplyPort (HANDLE PortHandle, PPORT_MESSAGE ReplyMessage);\nNTSTATUS NtReplyWaitReceivePort (HANDLE PortHandle, PVOID *PortContext , PPORT_MESSAGE ReplyMessage, PPORT_MESSAGE ReceiveMessage);\nNTSTATUS NtReplyWaitReceivePortEx (HANDLE PortHandle, PVOID *PortContext, PPORT_MESSAGE ReplyMessage, PPORT_MESSAGE ReceiveMessage, PLARGE_INTEGER Timeout);\nNTSTATUS NtReplyWaitReplyPort (HANDLE PortHandle, PPORT_MESSAGE ReplyMessage);\nNTSTATUS NtRequestPort (HANDLE PortHandle, PPORT_MESSAGE RequestMessage);\nNTSTATUS NtRequestWaitReplyPort (HANDLE PortHandle, PPORT_MESSAGE RequestMessage, PPORT_MESSAGE ReplyMessage);\nNTSTATUS NtResetEvent (HANDLE EventHandle, PLONG PreviousState);\nNTSTATUS NtResetWriteWatch (HANDLE ProcessHandle, PVOID BaseAddress, SIZE_T RegionSize);\nNTSTATUS NtRestoreKey (HANDLE KeyHandle, HANDLE FileHandle, ULONG Flags);\nNTSTATUS NtResumeProcess (HANDLE ProcessHandle);\nNTSTATUS NtResumeThread (HANDLE ThreadHandle, PULONG PreviousSuspendCount);\nNTSTATUS NtSaveKey (HANDLE KeyHandle, HANDLE FileHandle);\nNTSTATUS NtSaveKeyEx (HANDLE KeyHandle, HANDLE FileHandle, ULONG Format);\nNTSTATUS NtSaveMergedKeys (HANDLE HighPrecedenceKeyHandle, HANDLE LowPrecedenceKeyHandle, HANDLE FileHandle);\nNTSTATUS NtSecureConnectPort (PHANDLE PortHandle, PUNICODE_STRING PortName, PSECURITY_QUALITY_OF_SERVICE SecurityQos, PPORT_VIEW ClientView, PSID RequiredServerSid, PREMOTE_PORT_VIEW ServerView, PULONG MaxMessageLength, PVOID ConnectionInformation, PULONG ConnectionInformationLength);\n```\n\n----------------------------------------\n\nTITLE: Defining File and Directory Management System Calls in C\nDESCRIPTION: This snippet defines system calls for file and directory operations, including asynchronous I/O, directory entries retrieval, and file attribute manipulation.\nSOURCE: https://github.com/panda-re/panda-ng/blob/main/plugins/syscalls2/generated-in/freebsd_x64_prototypes.txt#_snippet_19\n\nLANGUAGE: C\nCODE:\n```\nint aio_write(struct aiocb *aiocbp);\nint lio_listio(int mode, struct aiocb * const *acb_list, int nent, struct sigevent *sig);\n\nint getdents(int fd, char *buf, size_t count);\n\nint lchmod(const char *path, mode_t mode);\n\nint lutimes(const char *path, struct timeval *tptr);\n\nint nstat(const char *path, struct nstat *ub);\nint nfstat(int fd, struct nstat *sb);\nint nlstat(const char *path, struct nstat *ub);\n\nssize_t preadv(int fd, struct iovec *iovp, unsigned iovcnt, off_t offset);\nssize_t pwritev(int fd, struct iovec *iovp, unsigned iovcnt, off_t offset);\n```\n\n----------------------------------------\n\nTITLE: Windows NT Transaction Management Function Declarations in C\nDESCRIPTION: Function signatures for NT API calls related to transactional operations, including resource managers, enlistments, and transactions.\nSOURCE: https://github.com/panda-re/panda-ng/blob/main/plugins/syscalls2/generated-in/all_windows_prototypes.txt#_snippet_9\n\nLANGUAGE: C\nCODE:\n```\nNTSTATUS NtOpenTransaction (PHANDLE TransactionHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, LPGUID Uow, HANDLE TmHandle);\n```\n\nLANGUAGE: C\nCODE:\n```\nNTSTATUS NtOpenTransactionManager (PHANDLE TmHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, PUNICODE_STRING LogFileName, LPGUID TmIdentity, ULONG OpenOptions);\n```\n\nLANGUAGE: C\nCODE:\n```\nNTSTATUS NtOpenResourceManager (PHANDLE ResourceManagerHandle, ACCESS_MASK DesiredAccess, HANDLE TmHandle, LPGUID ResourceManagerGuid, POBJECT_ATTRIBUTES ObjectAttributes);\n```\n\nLANGUAGE: C\nCODE:\n```\nNTSTATUS NtOpenEnlistment (PHANDLE EnlistmentHandle, ACCESS_MASK DesiredAccess, HANDLE ResourceManagerHandle, LPGUID EnlistmentGuid, POBJECT_ATTRIBUTES ObjectAttributes);\n```\n\nLANGUAGE: C\nCODE:\n```\nNTSTATUS NtPrePrepareComplete (HANDLE EnlistmentHandle, PLARGE_INTEGER TmVirtualClock);\n```\n\nLANGUAGE: C\nCODE:\n```\nNTSTATUS NtPrePrepareEnlistment (HANDLE EnlistmentHandle, PLARGE_INTEGER TmVirtualClock);\n```\n\nLANGUAGE: C\nCODE:\n```\nNTSTATUS NtPrepareComplete (HANDLE EnlistmentHandle, PLARGE_INTEGER TmVirtualClock);\n```\n\nLANGUAGE: C\nCODE:\n```\nNTSTATUS NtPrepareEnlistment (HANDLE EnlistmentHandle, PLARGE_INTEGER TmVirtualClock);\n```\n\nLANGUAGE: C\nCODE:\n```\nNTSTATUS NtPropagationComplete (HANDLE ResourceManagerHandle, ULONG RequestCookie, ULONG BufferLength, PVOID Buffer);\n```\n\n----------------------------------------\n\nTITLE: Windows NT Native API Function Declarations\nDESCRIPTION: Comprehensive list of Windows NT native API (ntdll) function declarations including system calls for process, thread, file, event, memory and system management. Each function returns an NTSTATUS value indicating success or failure of the operation.\nSOURCE: https://github.com/panda-re/panda-ng/blob/main/plugins/syscalls2/generated-in/windows_xpsp2_x86_prototypes.txt#_snippet_3\n\nLANGUAGE: C\nCODE:\n```\nNTSTATUS NtSetEventBoostPriority (HANDLE EventHandle);\nNTSTATUS NtSetHighEventPair (HANDLE EventPairHandle);\nNTSTATUS NtSetHighWaitLowEventPair (HANDLE EventPairHandle);\nNTSTATUS NtSetInformationDebugObject (HANDLE DebugObjectHandle, DEBUGOBJECTINFOCLASS DebugObjectInformationClass, PVOID DebugInformation, ULONG DebugInformationLength, PULONG ReturnLength);\n// ... additional function declarations omitted for brevity ...\nNTSTATUS NtQueryPortInformationProcess ();\n```\n\n----------------------------------------\n\nTITLE: Windows NT ALPC Communication System Calls\nDESCRIPTION: System calls for Advanced Local Procedure Call (ALPC) communication between processes.\nSOURCE: https://github.com/panda-re/panda-ng/blob/main/plugins/syscalls2/generated-in/windows_vistasp12_x64_prototypes.txt#_snippet_4\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtAlpcCreatePort (PHANDLE PortHandle, POBJECT_ATTRIBUTES ObjectAttributes, PALPC_PORT_ATTRIBUTES PortAttributes);\nNTSTATUS NtAlpcConnectPort (PHANDLE PortHandle, PUNICODE_STRING PortName, POBJECT_ATTRIBUTES ObjectAttributes, PALPC_PORT_ATTRIBUTES PortAttributes, ULONG Flags, PSID RequiredServerSid, PPORT_MESSAGE ConnectionMessage, PULONG BufferLength, PALPC_MESSAGE_ATTRIBUTES OutMessageAttributes, PALPC_MESSAGE_ATTRIBUTES InMessageAttributes, PLARGE_INTEGER Timeout);\nNTSTATUS NtAlpcAcceptConnectPort (PHANDLE PortHandle, HANDLE ConnectionPortHandle, ULONG Flags, POBJECT_ATTRIBUTES ObjectAttributes, PALPC_PORT_ATTRIBUTES PortAttributes, PVOID PortContext, PPORT_MESSAGE ConnectionRequest, PALPC_MESSAGE_ATTRIBUTES ConnectionMessageAttributes, BOOLEAN AcceptConnection);\n```\n\n----------------------------------------\n\nTITLE: Defining File Descriptor-Based System Calls in Linux Kernel\nDESCRIPTION: Function declarations for Linux system calls operating on file descriptors, including epoll, splice, and tee operations. These functions provide interfaces for efficient I/O operations and event monitoring.\nSOURCE: https://github.com/panda-re/panda-ng/blob/main/plugins/syscalls2/generated-in/linux_mips64n32_prototypes.txt#_snippet_6\n\nLANGUAGE: C\nCODE:\n```\nlong sys_epoll_create(int size);\nlong sys_epoll_ctl(int epfd, int op, int fd, struct epoll_event __user *event);\nlong sys_epoll_wait(int epfd, struct epoll_event __user *events, int maxevents, int timeout);\nlong sys_splice(int fd_in, loff_t __user *off_in, int fd_out, loff_t __user *off_out, size_t len, unsigned int flags);\nlong sys_tee(int fdin, int fdout, size_t len, unsigned int flags);\nlong sys_vmsplice(int fd, const struct iovec __user *iov, unsigned long nr_segs, unsigned int flags);\nlong sys_sendfile64(int out_fd, int in_fd, loff_t __user *offset, size_t count);\nlong sys_timerfd_create(int clockid, int flags);\nlong sys_sync_file_range(int fd, loff_t offset, loff_t nbytes, unsigned int flags);\nlong sys_fcntl64(unsigned int fd, unsigned int cmd, unsigned long arg);\nlong sys_fadvise64_64(int fd, loff_t offset, loff_t len, int advice);\n```\n\n----------------------------------------\n\nTITLE: Declaring NT System Call Prototypes in C for Windows Native API\nDESCRIPTION: Declares numerous C function prototypes for Windows NT Native API system calls including process, thread, object, file, registry, synchronization, and system-related operations. These prototypes require Windows NT kernel headers for type definitions (such as HANDLE, NTSTATUS, PVOID, etc.) and typically serve as the foundational declarations for modules that directly interact with the Windows kernel or low-level system internals. Inputs and outputs are strictly typed via pointers and enums, and all functions return NTSTATUS values to indicate operation success or failure. No implementation logic appears in this file; it's intended for compilation/linking as system call references only.\nSOURCE: https://github.com/panda-re/panda-ng/blob/main/plugins/syscalls2/generated-in/windows_2000_x86_prototypes.txt#_snippet_2\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtQueryIoCompletion (HANDLE IoCompletionHandle, IO_COMPLETION_INFORMATION_CLASS IoCompletionInformationClass, PVOID IoCompletionInformation, ULONG IoCompletionInformationLength, PULONG ReturnLength);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtQueryInformationPort (HANDLE PortHandle, PORT_INFORMATION_CLASS PortInformationClass, PVOID PortInformation, ULONG Length, PULONG ReturnLength);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtQueryInformationProcess (HANDLE ProcessHandle, PROCESSINFOCLASS ProcessInformationClass, PVOID ProcessInformation, ULONG ProcessInformationLength, PULONG ReturnLength);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtQueryInformationThread (HANDLE ThreadHandle, THREADINFOCLASS ThreadInformationClass, PVOID ThreadInformation, ULONG ThreadInformationLength, PULONG ReturnLength);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtQueryInformationToken (HANDLE TokenHandle, TOKEN_INFORMATION_CLASS TokenInformationClass, PVOID TokenInformation, ULONG TokenInformationLength, PULONG ReturnLength);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtQueryInstallUILanguage (LANGID *InstallUILanguageId);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtQueryIntervalProfile (KPROFILE_SOURCE ProfileSource, PULONG Interval);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtQueryKey (HANDLE KeyHandle, KEY_INFORMATION_CLASS KeyInformationClass, PVOID KeyInformation, ULONG Length, PULONG ResultLength);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtQueryMultipleValueKey (HANDLE KeyHandle, PKEY_VALUE_ENTRY ValueEntries, ULONG EntryCount, PVOID ValueBuffer, PULONG BufferLength, PULONG RequiredBufferLength);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtQueryMutant (HANDLE MutantHandle, MUTANT_INFORMATION_CLASS MutantInformationClass, PVOID MutantInformation, ULONG MutantInformationLength, PULONG ReturnLength);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtQueryObject (HANDLE Handle, OBJECT_INFORMATION_CLASS ObjectInformationClass, PVOID ObjectInformation, ULONG ObjectInformationLength, PULONG ReturnLength);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtQueryOpenSubKeys (POBJECT_ATTRIBUTES TargetKey, PULONG HandleCount);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtQueryPerformanceCounter (PLARGE_INTEGER PerformanceCounter, PLARGE_INTEGER PerformanceFrequency);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtQueryQuotaInformationFile (HANDLE FileHandle, PIO_STATUS_BLOCK IoStatusBlock, PVOID Buffer, ULONG Length, BOOLEAN ReturnSingleEntry, PVOID SidList, ULONG SidListLength, PULONG StartSid, BOOLEAN RestartScan);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtQuerySection (HANDLE SectionHandle, SECTION_INFORMATION_CLASS SectionInformationClass, PVOID SectionInformation, SIZE_T SectionInformationLength, PSIZE_T ReturnLength);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtQuerySecurityObject (HANDLE Handle, SECURITY_INFORMATION SecurityInformation, PSECURITY_DESCRIPTOR SecurityDescriptor, ULONG Length, PULONG LengthNeeded);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtQuerySemaphore (HANDLE SemaphoreHandle, SEMAPHORE_INFORMATION_CLASS SemaphoreInformationClass, PVOID SemaphoreInformation, ULONG SemaphoreInformationLength, PULONG ReturnLength);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtQuerySymbolicLinkObject (HANDLE LinkHandle, PUNICODE_STRING LinkTarget, PULONG ReturnedLength);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtQuerySystemEnvironmentValue (PUNICODE_STRING VariableName, PWSTR VariableValue, USHORT ValueLength, PUSHORT ReturnLength);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtQuerySystemInformation (SYSTEM_INFORMATION_CLASS SystemInformationClass, PVOID SystemInformation, ULONG SystemInformationLength, PULONG ReturnLength);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtQuerySystemTime (PLARGE_INTEGER SystemTime);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtQueryTimer (HANDLE TimerHandle, TIMER_INFORMATION_CLASS TimerInformationClass, PVOID TimerInformation, ULONG TimerInformationLength, PULONG ReturnLength);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtQueryTimerResolution (PULONG MaximumTime, PULONG MinimumTime, PULONG CurrentTime);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtQueryValueKey (HANDLE KeyHandle, PUNICODE_STRING ValueName, KEY_VALUE_INFORMATION_CLASS KeyValueInformationClass, PVOID KeyValueInformation, ULONG Length, PULONG ResultLength);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtQueryVirtualMemory (HANDLE ProcessHandle, PVOID BaseAddress, MEMORY_INFORMATION_CLASS MemoryInformationClass, PVOID MemoryInformation, SIZE_T MemoryInformationLength, PSIZE_T ReturnLength);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtQueryVolumeInformationFile (HANDLE FileHandle, PIO_STATUS_BLOCK IoStatusBlock, PVOID FsInformation, ULONG Length, FS_INFORMATION_CLASS FsInformationClass);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtQueueApcThread (HANDLE ThreadHandle, PPS_APC_ROUTINE ApcRoutine, PVOID ApcArgument1, PVOID ApcArgument2, PVOID ApcArgument3);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtRaiseException (PEXCEPTION_RECORD ExceptionRecord, PCONTEXT ContextRecord, BOOLEAN FirstChance);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtRaiseHardError (NTSTATUS ErrorStatus, ULONG NumberOfParameters, ULONG UnicodeStringParameterMask, PULONG_PTR Parameters, ULONG ValidResponseOptions, PULONG Response);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtReadFile (HANDLE FileHandle, HANDLE Event, PIO_APC_ROUTINE ApcRoutine, PVOID ApcContext, PIO_STATUS_BLOCK IoStatusBlock, PVOID Buffer, ULONG Length, PLARGE_INTEGER ByteOffset, PULONG Key);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtReadFileScatter (HANDLE FileHandle, HANDLE Event, PIO_APC_ROUTINE ApcRoutine, PVOID ApcContext, PIO_STATUS_BLOCK IoStatusBlock, PFILE_SEGMENT_ELEMENT SegmentArray, ULONG Length, PLARGE_INTEGER ByteOffset, PULONG Key);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtReadRequestData (HANDLE PortHandle, PPORT_MESSAGE Message, ULONG DataEntryIndex, PVOID Buffer, SIZE_T BufferSize, PSIZE_T NumberOfBytesRead);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtReadVirtualMemory (HANDLE ProcessHandle, PVOID BaseAddress, PVOID Buffer, SIZE_T BufferSize, PSIZE_T NumberOfBytesRead);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtRegisterThreadTerminatePort (HANDLE PortHandle);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtReleaseMutant (HANDLE MutantHandle, PLONG PreviousCount);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtReleaseSemaphore (HANDLE SemaphoreHandle, LONG ReleaseCount, PLONG PreviousCount);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtRemoveIoCompletion (HANDLE IoCompletionHandle, PVOID *KeyContext, PVOID *ApcContext, PIO_STATUS_BLOCK IoStatusBlock, PLARGE_INTEGER Timeout);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtReplaceKey (POBJECT_ATTRIBUTES NewFile, HANDLE TargetHandle, POBJECT_ATTRIBUTES OldFile);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtReplyPort (HANDLE PortHandle, PPORT_MESSAGE ReplyMessage);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtReplyWaitReceivePort (HANDLE PortHandle, PVOID *PortContext , PPORT_MESSAGE ReplyMessage, PPORT_MESSAGE ReceiveMessage);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtReplyWaitReceivePortEx (HANDLE PortHandle, PVOID *PortContext, PPORT_MESSAGE ReplyMessage, PPORT_MESSAGE ReceiveMessage, PLARGE_INTEGER Timeout);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtReplyWaitReplyPort (HANDLE PortHandle, PPORT_MESSAGE ReplyMessage);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtRequestPort (HANDLE PortHandle, PPORT_MESSAGE RequestMessage);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtRequestWaitReplyPort (HANDLE PortHandle, PPORT_MESSAGE RequestMessage, PPORT_MESSAGE ReplyMessage);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtResetEvent (HANDLE EventHandle, PLONG PreviousState);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtResetWriteWatch (HANDLE ProcessHandle, PVOID BaseAddress, SIZE_T RegionSize);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtRestoreKey (HANDLE KeyHandle, HANDLE FileHandle, ULONG Flags);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtResumeThread (HANDLE ThreadHandle, PULONG PreviousSuspendCount);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtSaveKey (HANDLE KeyHandle, HANDLE FileHandle);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtSaveMergedKeys (HANDLE HighPrecedenceKeyHandle, HANDLE LowPrecedenceKeyHandle, HANDLE FileHandle);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtSecureConnectPort (PHANDLE PortHandle, PUNICODE_STRING PortName, PSECURITY_QUALITY_OF_SERVICE SecurityQos, PPORT_VIEW ClientView, PSID RequiredServerSid, PREMOTE_PORT_VIEW ServerView, PULONG MaxMessageLength, PVOID ConnectionInformation, PULONG ConnectionInformationLength);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtSetIoCompletion (HANDLE IoCompletionHandle, PVOID KeyContext, PVOID ApcContext, NTSTATUS IoStatus, ULONG_PTR IoStatusInformation);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtSetContextThread (HANDLE ThreadHandle, PCONTEXT ThreadContext);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtSetDefaultHardErrorPort (HANDLE DefaultHardErrorPort);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtSetDefaultLocale (BOOLEAN UserProfile, LCID DefaultLocaleId);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtSetDefaultUILanguage (LANGID DefaultUILanguageId);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtSetEaFile (HANDLE FileHandle, PIO_STATUS_BLOCK IoStatusBlock, PVOID Buffer, ULONG Length);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtSetEvent (HANDLE EventHandle, PLONG PreviousState);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtSetHighEventPair (HANDLE EventPairHandle);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtSetHighWaitLowEventPair (HANDLE EventPairHandle);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtSetInformationFile (HANDLE FileHandle, PIO_STATUS_BLOCK IoStatusBlock, PVOID FileInformation, ULONG Length, FILE_INFORMATION_CLASS FileInformationClass);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtSetInformationJobObject (HANDLE JobHandle, JOBOBJECTINFOCLASS JobObjectInformationClass, PVOID JobObjectInformation, ULONG JobObjectInformationLength);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtSetInformationKey (HANDLE KeyHandle, KEY_SET_INFORMATION_CLASS KeySetInformationClass, PVOID KeySetInformation, ULONG KeySetInformationLength);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtSetInformationObject (HANDLE Handle, OBJECT_INFORMATION_CLASS ObjectInformationClass, PVOID ObjectInformation, ULONG ObjectInformationLength);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtSetInformationProcess (HANDLE ProcessHandle, PROCESSINFOCLASS ProcessInformationClass, PVOID ProcessInformation, ULONG ProcessInformationLength);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtSetInformationThread (HANDLE ThreadHandle, THREADINFOCLASS ThreadInformationClass, PVOID ThreadInformation, ULONG ThreadInformationLength);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtSetInformationToken (HANDLE TokenHandle, TOKEN_INFORMATION_CLASS TokenInformationClass, PVOID TokenInformation, ULONG TokenInformationLength);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtSetIntervalProfile (ULONG Interval, KPROFILE_SOURCE Source);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtSetLdtEntries (ULONG Selector0, ULONG Entry0Low, ULONG Entry0Hi, ULONG Selector1, ULONG Entry1Low, ULONG Entry1Hi);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtSetLowEventPair (HANDLE EventPairHandle);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtSetLowWaitHighEventPair (HANDLE EventPairHandle);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtSetQuotaInformationFile (HANDLE FileHandle, PIO_STATUS_BLOCK IoStatusBlock, PVOID Buffer, ULONG Length);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtSetSecurityObject (HANDLE Handle, SECURITY_INFORMATION SecurityInformation, PSECURITY_DESCRIPTOR SecurityDescriptor);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtSetSystemEnvironmentValue (PUNICODE_STRING VariableName, PUNICODE_STRING VariableValue);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtSetSystemInformation (SYSTEM_INFORMATION_CLASS SystemInformationClass, PVOID SystemInformation, ULONG SystemInformationLength);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtSetSystemPowerState (POWER_ACTION SystemAction, SYSTEM_POWER_STATE MinSystemState, ULONG Flags);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtSetSystemTime (PLARGE_INTEGER SystemTime, PLARGE_INTEGER PreviousTime);\n```\n\n----------------------------------------\n\nTITLE: Declaring Windows NT System Call Functions for Object Creation and System Operations\nDESCRIPTION: Function declarations for Windows NT system calls that create objects (files, events, processes, etc.) and handle system operations. These functions form the core of the NT Native API and provide direct access to kernel functionality.\nSOURCE: https://github.com/panda-re/panda-ng/blob/main/plugins/syscalls2/generated-in/windows_xpsp3_x86_prototypes.txt#_snippet_1\n\nLANGUAGE: C\nCODE:\n```\nNTSTATUS NtConnectPort (PHANDLE PortHandle, PUNICODE_STRING PortName, PSECURITY_QUALITY_OF_SERVICE SecurityQos, PPORT_VIEW ClientView, PREMOTE_PORT_VIEW ServerView, PULONG MaxMessageLength, PVOID ConnectionInformation, PULONG ConnectionInformationLength);\nNTSTATUS NtContinue (PCONTEXT ContextRecord, BOOLEAN TestAlert);\nNTSTATUS NtCreateDebugObject (PHANDLE DebugObjectHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, ULONG Flags);\nNTSTATUS NtCreateDirectoryObject (PHANDLE DirectoryHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes);\nNTSTATUS NtCreateEvent (PHANDLE EventHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, EVENT_TYPE EventType, BOOLEAN InitialState);\nNTSTATUS NtCreateEventPair (PHANDLE EventPairHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes);\nNTSTATUS NtCreateFile (PHANDLE FileHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, PIO_STATUS_BLOCK IoStatusBlock, PLARGE_INTEGER AllocationSize, ULONG FileAttributes, ULONG ShareAccess, ULONG CreateDisposition, ULONG CreateOptions, PVOID EaBuffer, ULONG EaLength);\nNTSTATUS NtCreateIoCompletion (PHANDLE IoCompletionHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, ULONG Count);\nNTSTATUS NtCreateJobObject (PHANDLE JobHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes);\nNTSTATUS NtCreateJobSet (ULONG NumJob, PJOB_SET_ARRAY UserJobSet, ULONG Flags);\nNTSTATUS NtCreateKey (PHANDLE KeyHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, ULONG TitleIndex, PUNICODE_STRING Class, ULONG CreateOptions, PULONG Disposition);\nNTSTATUS NtCreateMailslotFile (PHANDLE FileHandle, ULONG DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, PIO_STATUS_BLOCK IoStatusBlock, ULONG CreateOptions, ULONG MailslotQuota, ULONG MaximumMessageSize, PLARGE_INTEGER ReadTimeout);\nNTSTATUS NtCreateMutant (PHANDLE MutantHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, BOOLEAN InitialOwner);\nNTSTATUS NtCreateNamedPipeFile (PHANDLE FileHandle, ULONG DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, PIO_STATUS_BLOCK IoStatusBlock, ULONG ShareAccess, ULONG CreateDisposition, ULONG CreateOptions, ULONG NamedPipeType, ULONG ReadMode, ULONG CompletionMode, ULONG MaximumInstances, ULONG InboundQuota, ULONG OutboundQuota, PLARGE_INTEGER DefaultTimeout);\nNTSTATUS NtCreatePagingFile (PUNICODE_STRING PageFileName, PLARGE_INTEGER MinimumSize, PLARGE_INTEGER MaximumSize, ULONG Priority);\nNTSTATUS NtCreatePort (PHANDLE PortHandle, POBJECT_ATTRIBUTES ObjectAttributes, ULONG MaxConnectionInfoLength, ULONG MaxMessageLength, ULONG MaxPoolUsage);\nNTSTATUS NtCreateProcess (PHANDLE ProcessHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, HANDLE ParentProcess, BOOLEAN InheritObjectTable, HANDLE SectionHandle, HANDLE DebugPort, HANDLE ExceptionPort);\nNTSTATUS NtCreateProcessEx (PHANDLE ProcessHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, HANDLE ParentProcess, ULONG Flags, HANDLE SectionHandle, HANDLE DebugPort, HANDLE ExceptionPort, ULONG JobMemberLevel);\nNTSTATUS NtCreateProfile (PHANDLE ProfileHandle, HANDLE Process, PVOID RangeBase, SIZE_T RangeSize, ULONG BucketSize, PULONG Buffer, ULONG BufferSize, KPROFILE_SOURCE ProfileSource, KAFFINITY Affinity);\nNTSTATUS NtCreateSection (PHANDLE SectionHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, PLARGE_INTEGER MaximumSize, ULONG SectionPageProtection, ULONG AllocationAttributes, HANDLE FileHandle);\nNTSTATUS NtCreateSemaphore (PHANDLE SemaphoreHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, LONG InitialCount, LONG MaximumCount);\nNTSTATUS NtCreateSymbolicLinkObject (PHANDLE LinkHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, PUNICODE_STRING LinkTarget);\nNTSTATUS NtCreateThread (PHANDLE ThreadHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, HANDLE ProcessHandle, PCLIENT_ID ClientId, PCONTEXT ThreadContext, PINITIAL_TEB InitialTeb, BOOLEAN CreateSuspended);\nNTSTATUS NtCreateTimer (PHANDLE TimerHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, TIMER_TYPE TimerType);\nNTSTATUS NtCreateToken (PHANDLE TokenHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, TOKEN_TYPE TokenType, PLUID AuthenticationId, PLARGE_INTEGER ExpirationTime, PTOKEN_USER User, PTOKEN_GROUPS Groups, PTOKEN_PRIVILEGES Privileges, PTOKEN_OWNER Owner, PTOKEN_PRIMARY_GROUP PrimaryGroup, PTOKEN_DEFAULT_DACL DefaultDacl, PTOKEN_SOURCE TokenSource);\nNTSTATUS NtCreateWaitablePort (PHANDLE PortHandle, POBJECT_ATTRIBUTES ObjectAttributes, ULONG MaxConnectionInfoLength, ULONG MaxMessageLength, ULONG MaxPoolUsage);\nNTSTATUS NtDebugActiveProcess (HANDLE ProcessHandle, HANDLE DebugObjectHandle);\nNTSTATUS NtDebugContinue (HANDLE DebugObjectHandle, PCLIENT_ID ClientId, NTSTATUS ContinueStatus);\nNTSTATUS NtDelayExecution (BOOLEAN Alertable, PLARGE_INTEGER DelayInterval);\n```\n\n----------------------------------------\n\nTITLE: Windows NT Process Management System Calls\nDESCRIPTION: Function declarations for process-related system calls including process creation, thread management and job object operations.\nSOURCE: https://github.com/panda-re/panda-ng/blob/main/plugins/syscalls2/generated-in/windows_vistasp12_x64_prototypes.txt#_snippet_1\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtCreateProcessEx (PHANDLE ProcessHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, HANDLE ParentProcess, ULONG Flags, HANDLE SectionHandle, HANDLE DebugPort, HANDLE ExceptionPort, ULONG JobMemberLevel);\nNTSTATUS NtCreateThread (PHANDLE ThreadHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, HANDLE ProcessHandle, PCLIENT_ID ClientId, PCONTEXT ThreadContext, PINITIAL_TEB InitialTeb, BOOLEAN CreateSuspended);\nNTSTATUS NtIsProcessInJob (HANDLE ProcessHandle, HANDLE JobHandle);\n```\n\n----------------------------------------\n\nTITLE: Defining Asynchronous I/O System Calls in Linux Kernel\nDESCRIPTION: Function declarations for Linux system calls related to asynchronous I/O operations. These functions provide interfaces for setting up, submitting, and managing asynchronous I/O requests through AIO contexts.\nSOURCE: https://github.com/panda-re/panda-ng/blob/main/plugins/syscalls2/generated-in/linux_mips64n32_prototypes.txt#_snippet_5\n\nLANGUAGE: C\nCODE:\n```\nlong sys_io_setup(unsigned nr_reqs, aio_context_t __user *ctx);\nlong sys_io_destroy(aio_context_t ctx);\nlong sys_io_getevents_time32(__u32 ctx_id, __s32 min_nr, __s32 nr, struct io_event __user *events, struct old_timespec32 __user *timeout);\nlong sys_io_submit(aio_context_t, long, struct iocb __user * __user *);\nlong sys_io_cancel(aio_context_t ctx_id, struct iocb __user *iocb, struct io_event __user *result);\nlong sys_io_pgetevents_time32(aio_context_t ctx_id, long min_nr, long nr, struct io_event __user *events, struct old_timespec32 __user *timeout, const struct __aio_sigset *sig);\n```\n\n----------------------------------------\n\nTITLE: Declaring Nt* System Call Prototypes - Windows Native API - C\nDESCRIPTION: This snippet declares multiple Nt* function prototypes representing Windows Native API system calls in C. Each function corresponds to a distinct kernel service, such as querying process information, manipulating virtual memory, or handling files. These prototypes require inclusion of Windows type definitions (such as NTSTATUS, HANDLE, etc.) and are typically used for interfacing directly with system-level OS functionality, often from within drivers or advanced utilities. Parameters and return values are strongly typed, ensuring compatibility with the Windows kernel, and correct use depends on privilege level and detailed parameter structures.\nSOURCE: https://github.com/panda-re/panda-ng/blob/main/plugins/syscalls2/generated-in/windows_2003sp12_x86_prototypes.txt#_snippet_2\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtProtectVirtualMemory (HANDLE ProcessHandle, PVOID *BaseAddress, PSIZE_T RegionSize, WIN32_PROTECTION_MASK NewProtectWin32, PULONG OldProtect);\nNTSTATUS NtPulseEvent (HANDLE EventHandle, PLONG PreviousState);\nNTSTATUS NtQueryAttributesFile (POBJECT_ATTRIBUTES ObjectAttributes, PFILE_BASIC_INFORMATION FileInformation);\nNTSTATUS NtQueryBootEntryOrder (PULONG Ids, PULONG Count);\nNTSTATUS NtQueryBootOptions (PBOOT_OPTIONS BootOptions, PULONG BootOptionsLength);\nNTSTATUS NtQueryDebugFilterState (ULONG ComponentId, ULONG Level);\nNTSTATUS NtQueryDefaultLocale (BOOLEAN UserProfile, PLCID DefaultLocaleId);\nNTSTATUS NtQueryDefaultUILanguage (LANGID *DefaultUILanguageId);\nNTSTATUS NtQueryDirectoryFile (HANDLE FileHandle, HANDLE Event, PIO_APC_ROUTINE ApcRoutine, PVOID ApcContext, PIO_STATUS_BLOCK IoStatusBlock, PVOID FileInformation, ULONG Length, FILE_INFORMATION_CLASS FileInformationClass, BOOLEAN ReturnSingleEntry, PUNICODE_STRING FileName, BOOLEAN RestartScan);\nNTSTATUS NtQueryDirectoryObject (HANDLE DirectoryHandle, PVOID Buffer, ULONG Length, BOOLEAN ReturnSingleEntry, BOOLEAN RestartScan, PULONG Context, PULONG ReturnLength);\nNTSTATUS NtQueryDriverEntryOrder (PULONG Ids, PULONG Count);\nNTSTATUS NtQueryEaFile (HANDLE FileHandle, PIO_STATUS_BLOCK IoStatusBlock, PVOID Buffer, ULONG Length, BOOLEAN ReturnSingleEntry, PVOID EaList, ULONG EaListLength, PULONG EaIndex, BOOLEAN RestartScan);\nNTSTATUS NtQueryEvent (HANDLE EventHandle, EVENT_INFORMATION_CLASS EventInformationClass, PVOID EventInformation, ULONG EventInformationLength, PULONG ReturnLength);\nNTSTATUS NtQueryFullAttributesFile (POBJECT_ATTRIBUTES ObjectAttributes, PFILE_NETWORK_OPEN_INFORMATION FileInformation);\nNTSTATUS NtQueryInformationAtom (RTL_ATOM Atom, ATOM_INFORMATION_CLASS InformationClass, PVOID AtomInformation, ULONG AtomInformationLength, PULONG ReturnLength);\nNTSTATUS NtQueryInformationFile (HANDLE FileHandle, PIO_STATUS_BLOCK IoStatusBlock, PVOID FileInformation, ULONG Length, FILE_INFORMATION_CLASS FileInformationClass);\nNTSTATUS NtQueryInformationJobObject (HANDLE JobHandle, JOBOBJECTINFOCLASS JobObjectInformationClass, PVOID JobObjectInformation, ULONG JobObjectInformationLength, PULONG ReturnLength);\nNTSTATUS NtQueryInformationPort (HANDLE PortHandle, PORT_INFORMATION_CLASS PortInformationClass, PVOID PortInformation, ULONG Length, PULONG ReturnLength);\nNTSTATUS NtQueryInformationProcess (HANDLE ProcessHandle, PROCESSINFOCLASS ProcessInformationClass, PVOID ProcessInformation, ULONG ProcessInformationLength, PULONG ReturnLength);\nNTSTATUS NtQueryInformationThread (HANDLE ThreadHandle, THREADINFOCLASS ThreadInformationClass, PVOID ThreadInformation, ULONG ThreadInformationLength, PULONG ReturnLength);\nNTSTATUS NtQueryInformationToken (HANDLE TokenHandle, TOKEN_INFORMATION_CLASS TokenInformationClass, PVOID TokenInformation, ULONG TokenInformationLength, PULONG ReturnLength);\nNTSTATUS NtQueryInstallUILanguage (LANGID *InstallUILanguageId);\nNTSTATUS NtQueryIntervalProfile (KPROFILE_SOURCE ProfileSource, PULONG Interval);\nNTSTATUS NtQueryIoCompletion (HANDLE IoCompletionHandle, IO_COMPLETION_INFORMATION_CLASS IoCompletionInformationClass, PVOID IoCompletionInformation, ULONG IoCompletionInformationLength, PULONG ReturnLength);\nNTSTATUS NtQueryKey (HANDLE KeyHandle, KEY_INFORMATION_CLASS KeyInformationClass, PVOID KeyInformation, ULONG Length, PULONG ResultLength);\nNTSTATUS NtQueryMultipleValueKey (HANDLE KeyHandle, PKEY_VALUE_ENTRY ValueEntries, ULONG EntryCount, PVOID ValueBuffer, PULONG BufferLength, PULONG RequiredBufferLength);\nNTSTATUS NtQueryMutant (HANDLE MutantHandle, MUTANT_INFORMATION_CLASS MutantInformationClass, PVOID MutantInformation, ULONG MutantInformationLength, PULONG ReturnLength);\nNTSTATUS NtQueryObject (HANDLE Handle, OBJECT_INFORMATION_CLASS ObjectInformationClass, PVOID ObjectInformation, ULONG ObjectInformationLength, PULONG ReturnLength);\nNTSTATUS NtQueryOpenSubKeys (POBJECT_ATTRIBUTES TargetKey, PULONG HandleCount);\nNTSTATUS NtQueryOpenSubKeysEx (POBJECT_ATTRIBUTES TargetKey, ULONG BufferLength, PVOID Buffer, PULONG RequiredSize);\nNTSTATUS NtQueryPerformanceCounter (PLARGE_INTEGER PerformanceCounter, PLARGE_INTEGER PerformanceFrequency);\nNTSTATUS NtQueryQuotaInformationFile (HANDLE FileHandle, PIO_STATUS_BLOCK IoStatusBlock, PVOID Buffer, ULONG Length, BOOLEAN ReturnSingleEntry, PVOID SidList, ULONG SidListLength, PULONG StartSid, BOOLEAN RestartScan);\nNTSTATUS NtQuerySection (HANDLE SectionHandle, SECTION_INFORMATION_CLASS SectionInformationClass, PVOID SectionInformation, SIZE_T SectionInformationLength, PSIZE_T ReturnLength);\nNTSTATUS NtQuerySecurityObject (HANDLE Handle, SECURITY_INFORMATION SecurityInformation, PSECURITY_DESCRIPTOR SecurityDescriptor, ULONG Length, PULONG LengthNeeded);\nNTSTATUS NtQuerySemaphore (HANDLE SemaphoreHandle, SEMAPHORE_INFORMATION_CLASS SemaphoreInformationClass, PVOID SemaphoreInformation, ULONG SemaphoreInformationLength, PULONG ReturnLength);\nNTSTATUS NtQuerySymbolicLinkObject (HANDLE LinkHandle, PUNICODE_STRING LinkTarget, PULONG ReturnedLength);\nNTSTATUS NtQuerySystemEnvironmentValue (PUNICODE_STRING VariableName, PWSTR VariableValue, USHORT ValueLength, PUSHORT ReturnLength);\nNTSTATUS NtQuerySystemEnvironmentValueEx (PUNICODE_STRING VariableName, LPGUID VendorGuid, PVOID Value, PULONG ValueLength, PULONG Attributes);\nNTSTATUS NtQuerySystemInformation (SYSTEM_INFORMATION_CLASS SystemInformationClass, PVOID SystemInformation, ULONG SystemInformationLength, PULONG ReturnLength);\nNTSTATUS NtQuerySystemTime (PLARGE_INTEGER SystemTime);\nNTSTATUS NtQueryTimer (HANDLE TimerHandle, TIMER_INFORMATION_CLASS TimerInformationClass, PVOID TimerInformation, ULONG TimerInformationLength, PULONG ReturnLength);\nNTSTATUS NtQueryTimerResolution (PULONG MaximumTime, PULONG MinimumTime, PULONG CurrentTime);\nNTSTATUS NtQueryValueKey (HANDLE KeyHandle, PUNICODE_STRING ValueName, KEY_VALUE_INFORMATION_CLASS KeyValueInformationClass, PVOID KeyValueInformation, ULONG Length, PULONG ResultLength);\nNTSTATUS NtQueryVirtualMemory (HANDLE ProcessHandle, PVOID BaseAddress, MEMORY_INFORMATION_CLASS MemoryInformationClass, PVOID MemoryInformation, SIZE_T MemoryInformationLength, PSIZE_T ReturnLength);\nNTSTATUS NtQueryVolumeInformationFile (HANDLE FileHandle, PIO_STATUS_BLOCK IoStatusBlock, PVOID FsInformation, ULONG Length, FS_INFORMATION_CLASS FsInformationClass);\nNTSTATUS NtQueueApcThread (HANDLE ThreadHandle, PPS_APC_ROUTINE ApcRoutine, PVOID ApcArgument1, PVOID ApcArgument2, PVOID ApcArgument3);\nNTSTATUS NtRaiseException (PEXCEPTION_RECORD ExceptionRecord, PCONTEXT ContextRecord, BOOLEAN FirstChance);\nNTSTATUS NtRaiseHardError (NTSTATUS ErrorStatus, ULONG NumberOfParameters, ULONG UnicodeStringParameterMask, PULONG_PTR Parameters, ULONG ValidResponseOptions, PULONG Response);\nNTSTATUS NtReadFile (HANDLE FileHandle, HANDLE Event, PIO_APC_ROUTINE ApcRoutine, PVOID ApcContext, PIO_STATUS_BLOCK IoStatusBlock, PVOID Buffer, ULONG Length, PLARGE_INTEGER ByteOffset, PULONG Key);\nNTSTATUS NtReadFileScatter (HANDLE FileHandle, HANDLE Event, PIO_APC_ROUTINE ApcRoutine, PVOID ApcContext, PIO_STATUS_BLOCK IoStatusBlock, PFILE_SEGMENT_ELEMENT SegmentArray, ULONG Length, PLARGE_INTEGER ByteOffset, PULONG Key);\nNTSTATUS NtReadRequestData (HANDLE PortHandle, PPORT_MESSAGE Message, ULONG DataEntryIndex, PVOID Buffer, SIZE_T BufferSize, PSIZE_T NumberOfBytesRead);\nNTSTATUS NtReadVirtualMemory (HANDLE ProcessHandle, PVOID BaseAddress, PVOID Buffer, SIZE_T BufferSize, PSIZE_T NumberOfBytesRead);\nNTSTATUS NtRegisterThreadTerminatePort (HANDLE PortHandle);\nNTSTATUS NtReleaseMutant (HANDLE MutantHandle, PLONG PreviousCount);\nNTSTATUS NtReleaseSemaphore (HANDLE SemaphoreHandle, LONG ReleaseCount, PLONG PreviousCount);\nNTSTATUS NtRemoveIoCompletion (HANDLE IoCompletionHandle, PVOID *KeyContext, PVOID *ApcContext, PIO_STATUS_BLOCK IoStatusBlock, PLARGE_INTEGER Timeout);\nNTSTATUS NtRemoveProcessDebug (HANDLE ProcessHandle, HANDLE DebugObjectHandle);\nNTSTATUS NtRenameKey (HANDLE KeyHandle, PUNICODE_STRING NewName);\nNTSTATUS NtReplaceKey (POBJECT_ATTRIBUTES NewFile, HANDLE TargetHandle, POBJECT_ATTRIBUTES OldFile);\nNTSTATUS NtReplyPort (HANDLE PortHandle, PPORT_MESSAGE ReplyMessage);\nNTSTATUS NtReplyWaitReceivePort (HANDLE PortHandle, PVOID *PortContext , PPORT_MESSAGE ReplyMessage, PPORT_MESSAGE ReceiveMessage);\nNTSTATUS NtReplyWaitReceivePortEx (HANDLE PortHandle, PVOID *PortContext, PPORT_MESSAGE ReplyMessage, PPORT_MESSAGE ReceiveMessage, PLARGE_INTEGER Timeout);\nNTSTATUS NtReplyWaitReplyPort (HANDLE PortHandle, PPORT_MESSAGE ReplyMessage);\nNTSTATUS NtRequestPort (HANDLE PortHandle, PPORT_MESSAGE RequestMessage);\nNTSTATUS NtRequestWaitReplyPort (HANDLE PortHandle, PPORT_MESSAGE RequestMessage, PPORT_MESSAGE ReplyMessage);\nNTSTATUS NtResetEvent (HANDLE EventHandle, PLONG PreviousState);\nNTSTATUS NtResetWriteWatch (HANDLE ProcessHandle, PVOID BaseAddress, SIZE_T RegionSize);\nNTSTATUS NtRestoreKey (HANDLE KeyHandle, HANDLE FileHandle, ULONG Flags);\nNTSTATUS NtResumeProcess (HANDLE ProcessHandle);\nNTSTATUS NtResumeThread (HANDLE ThreadHandle, PULONG PreviousSuspendCount);\nNTSTATUS NtSaveKey (HANDLE KeyHandle, HANDLE FileHandle);\nNTSTATUS NtSaveKeyEx (HANDLE KeyHandle, HANDLE FileHandle, ULONG Format);\nNTSTATUS NtSaveMergedKeys (HANDLE HighPrecedenceKeyHandle, HANDLE LowPrecedenceKeyHandle, HANDLE FileHandle);\nNTSTATUS NtSecureConnectPort (PHANDLE PortHandle, PUNICODE_STRING PortName, PSECURITY_QUALITY_OF_SERVICE SecurityQos, PPORT_VIEW ClientView, PSID RequiredServerSid, PREMOTE_PORT_VIEW ServerView, PULONG MaxMessageLength, PVOID ConnectionInformation, PULONG ConnectionInformationLength);\n```\n\n----------------------------------------\n\nTITLE: Windows NT Native API System Call Declarations\nDESCRIPTION: Function declarations for Windows NT kernel system calls (NtXxx functions) used for system operations like process management, file operations, and security controls. These are low-level APIs that form the basis of the Windows operating system functionality.\nSOURCE: https://github.com/panda-re/panda-ng/blob/main/plugins/syscalls2/generated-in/windows_2003sp12_x86_prototypes.txt#_snippet_1\n\nLANGUAGE: C\nCODE:\n```\nNTSTATUS NtDebugContinue (HANDLE DebugObjectHandle, PCLIENT_ID ClientId, NTSTATUS ContinueStatus);\nNTSTATUS NtDelayExecution (BOOLEAN Alertable, PLARGE_INTEGER DelayInterval);\nNTSTATUS NtDeleteAtom (RTL_ATOM Atom);\nNTSTATUS NtDeleteBootEntry (ULONG Id);\nNTSTATUS NtDeleteDriverEntry (ULONG Id);\nNTSTATUS NtDeleteFile (POBJECT_ATTRIBUTES ObjectAttributes);\nNTSTATUS NtDeleteKey (HANDLE KeyHandle);\nNTSTATUS NtDeleteObjectAuditAlarm (PUNICODE_STRING SubsystemName, PVOID HandleId, BOOLEAN GenerateOnClose);\nNTSTATUS NtDeleteValueKey (HANDLE KeyHandle, PUNICODE_STRING ValueName);\nNTSTATUS NtDeviceIoControlFile (HANDLE FileHandle, HANDLE Event, PIO_APC_ROUTINE ApcRoutine, PVOID ApcContext, PIO_STATUS_BLOCK IoStatusBlock, ULONG IoControlCode, PVOID InputBuffer, ULONG InputBufferLength, PVOID OutputBuffer, ULONG OutputBufferLength);\n// ... additional function declarations ...\nNTSTATUS NtPrivilegedServiceAuditAlarm (PUNICODE_STRING SubsystemName, PUNICODE_STRING ServiceName, HANDLE ClientToken, PPRIVILEGE_SET Privileges, BOOLEAN AccessGranted);\n```\n\n----------------------------------------\n\nTITLE: Declaring Windows NT Native API Functions in C\nDESCRIPTION: This snippet declares multiple Windows NT native API functions. These functions provide low-level access to operating system services, including process and memory management, file I/O, and security operations. They are typically used in system-level programming and device drivers.\nSOURCE: https://github.com/panda-re/panda-ng/blob/main/plugins/syscalls2/generated-in/windows_vistasp12_x64_prototypes.txt#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nNTSTATUS NtMapUserPhysicalPagesScatter (PVOID *VirtualAddresses, ULONG_PTR NumberOfPages, PULONG_PTR UserPfnArray);\nNTSTATUS NtWaitForSingleObject (HANDLE Handle, BOOLEAN Alertable, PLARGE_INTEGER Timeout);\nNTSTATUS NtCallbackReturn (PVOID OutputBuffer, ULONG OutputLength, NTSTATUS Status);\nNTSTATUS NtReadFile (HANDLE FileHandle, HANDLE Event, PIO_APC_ROUTINE ApcRoutine, PVOID ApcContext, PIO_STATUS_BLOCK IoStatusBlock, PVOID Buffer, ULONG Length, PLARGE_INTEGER ByteOffset, PULONG Key);\nNTSTATUS NtDeviceIoControlFile (HANDLE FileHandle, HANDLE Event, PIO_APC_ROUTINE ApcRoutine, PVOID ApcContext, PIO_STATUS_BLOCK IoStatusBlock, ULONG IoControlCode, PVOID InputBuffer, ULONG InputBufferLength, PVOID OutputBuffer, ULONG OutputBufferLength);\nNTSTATUS NtWriteFile (HANDLE FileHandle, HANDLE Event, PIO_APC_ROUTINE ApcRoutine, PVOID ApcContext, PIO_STATUS_BLOCK IoStatusBlock, PVOID Buffer, ULONG Length, PLARGE_INTEGER ByteOffset, PULONG Key);\nNTSTATUS NtRemoveIoCompletion (HANDLE IoCompletionHandle, PVOID *KeyContext, PVOID *ApcContext, PIO_STATUS_BLOCK IoStatusBlock, PLARGE_INTEGER Timeout);\nNTSTATUS NtReleaseSemaphore (HANDLE SemaphoreHandle, LONG ReleaseCount, PLONG PreviousCount);\nNTSTATUS NtReplyWaitReceivePort (HANDLE PortHandle, PVOID *PortContext , PPORT_MESSAGE ReplyMessage, PPORT_MESSAGE ReceiveMessage);\nNTSTATUS NtReplyPort (HANDLE PortHandle, PPORT_MESSAGE ReplyMessage);\nNTSTATUS NtSetInformationThread (HANDLE ThreadHandle, THREADINFOCLASS ThreadInformationClass, PVOID ThreadInformation, ULONG ThreadInformationLength);\nNTSTATUS NtSetEvent (HANDLE EventHandle, PLONG PreviousState);\nNTSTATUS NtClose (HANDLE Handle);\nNTSTATUS NtQueryObject (HANDLE Handle, OBJECT_INFORMATION_CLASS ObjectInformationClass, PVOID ObjectInformation, ULONG ObjectInformationLength, PULONG ReturnLength);\nNTSTATUS NtQueryInformationFile (HANDLE FileHandle, PIO_STATUS_BLOCK IoStatusBlock, PVOID FileInformation, ULONG Length, FILE_INFORMATION_CLASS FileInformationClass);\nNTSTATUS NtOpenKey (PHANDLE KeyHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes);\nNTSTATUS NtEnumerateValueKey (HANDLE KeyHandle, ULONG Index, KEY_VALUE_INFORMATION_CLASS KeyValueInformationClass, PVOID KeyValueInformation, ULONG Length, PULONG ResultLength);\nNTSTATUS NtFindAtom (PWSTR AtomName, ULONG Length, PRTL_ATOM Atom);\nNTSTATUS NtQueryDefaultLocale (BOOLEAN UserProfile, PLCID DefaultLocaleId);\nNTSTATUS NtQueryKey (HANDLE KeyHandle, KEY_INFORMATION_CLASS KeyInformationClass, PVOID KeyInformation, ULONG Length, PULONG ResultLength);\nNTSTATUS NtQueryValueKey (HANDLE KeyHandle, PUNICODE_STRING ValueName, KEY_VALUE_INFORMATION_CLASS KeyValueInformationClass, PVOID KeyValueInformation, ULONG Length, PULONG ResultLength);\nNTSTATUS NtAllocateVirtualMemory (HANDLE ProcessHandle, PVOID *BaseAddress, ULONG_PTR ZeroBits, PSIZE_T RegionSize, ULONG AllocationType, ULONG Protect);\nNTSTATUS NtQueryInformationProcess (HANDLE ProcessHandle, PROCESSINFOCLASS ProcessInformationClass, PVOID ProcessInformation, ULONG ProcessInformationLength, PULONG ReturnLength);\nNTSTATUS NtWaitForMultipleObjects32 (ULONG Count, LONG Handles[], WAIT_TYPE WaitType, BOOLEAN Alertable, PLARGE_INTEGER Timeout);\nNTSTATUS NtWriteFileGather (HANDLE FileHandle, HANDLE Event, PIO_APC_ROUTINE ApcRoutine, PVOID ApcContext, PIO_STATUS_BLOCK IoStatusBlock, PFILE_SEGMENT_ELEMENT SegmentArray, ULONG Length, PLARGE_INTEGER ByteOffset, PULONG Key);\nNTSTATUS NtSetInformationProcess (HANDLE ProcessHandle, PROCESSINFOCLASS ProcessInformationClass, PVOID ProcessInformation, ULONG ProcessInformationLength);\nNTSTATUS NtCreateKey (PHANDLE KeyHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, ULONG TitleIndex, PUNICODE_STRING Class, ULONG CreateOptions, PULONG Disposition);\nNTSTATUS NtFreeVirtualMemory (HANDLE ProcessHandle, PVOID *BaseAddress, PSIZE_T RegionSize, ULONG FreeType);\nNTSTATUS NtImpersonateClientOfPort (HANDLE PortHandle, PPORT_MESSAGE Message);\nNTSTATUS NtReleaseMutant (HANDLE MutantHandle, PLONG PreviousCount);\nNTSTATUS NtQueryInformationToken (HANDLE TokenHandle, TOKEN_INFORMATION_CLASS TokenInformationClass, PVOID TokenInformation, ULONG TokenInformationLength, PULONG ReturnLength);\nNTSTATUS NtRequestWaitReplyPort (HANDLE PortHandle, PPORT_MESSAGE RequestMessage, PPORT_MESSAGE ReplyMessage);\nNTSTATUS NtQueryVirtualMemory (HANDLE ProcessHandle, PVOID BaseAddress, MEMORY_INFORMATION_CLASS MemoryInformationClass, PVOID MemoryInformation, SIZE_T MemoryInformationLength, PSIZE_T ReturnLength);\nNTSTATUS NtOpenThreadToken (HANDLE ThreadHandle, ACCESS_MASK DesiredAccess, BOOLEAN OpenAsSelf, PHANDLE TokenHandle);\nNTSTATUS NtQueryInformationThread (HANDLE ThreadHandle, THREADINFOCLASS ThreadInformationClass, PVOID ThreadInformation, ULONG ThreadInformationLength, PULONG ReturnLength);\nNTSTATUS NtOpenProcess (PHANDLE ProcessHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, PCLIENT_ID ClientId);\nNTSTATUS NtSetInformationFile (HANDLE FileHandle, PIO_STATUS_BLOCK IoStatusBlock, PVOID FileInformation, ULONG Length, FILE_INFORMATION_CLASS FileInformationClass);\nNTSTATUS NtMapViewOfSection (HANDLE SectionHandle, HANDLE ProcessHandle, PVOID *BaseAddress, ULONG_PTR ZeroBits, SIZE_T CommitSize, PLARGE_INTEGER SectionOffset, PSIZE_T ViewSize, SECTION_INHERIT InheritDisposition, ULONG AllocationType, WIN32_PROTECTION_MASK Win32Protect);\nNTSTATUS NtAccessCheckAndAuditAlarm (PUNICODE_STRING SubsystemName, PVOID HandleId, PUNICODE_STRING ObjectTypeName, PUNICODE_STRING ObjectName, PSECURITY_DESCRIPTOR SecurityDescriptor, ACCESS_MASK DesiredAccess, PGENERIC_MAPPING GenericMapping, BOOLEAN ObjectCreation, PACCESS_MASK GrantedAccess, PNTSTATUS AccessStatus, PBOOLEAN GenerateOnClose);\nNTSTATUS NtUnmapViewOfSection (HANDLE ProcessHandle, PVOID BaseAddress);\nNTSTATUS NtReplyWaitReceivePortEx (HANDLE PortHandle, PVOID *PortContext, PPORT_MESSAGE ReplyMessage, PPORT_MESSAGE ReceiveMessage, PLARGE_INTEGER Timeout);\nNTSTATUS NtTerminateProcess (HANDLE ProcessHandle, NTSTATUS ExitStatus);\nNTSTATUS NtSetEventBoostPriority (HANDLE EventHandle);\nNTSTATUS NtReadFileScatter (HANDLE FileHandle, HANDLE Event, PIO_APC_ROUTINE ApcRoutine, PVOID ApcContext, PIO_STATUS_BLOCK IoStatusBlock, PFILE_SEGMENT_ELEMENT SegmentArray, ULONG Length, PLARGE_INTEGER ByteOffset, PULONG Key);\nNTSTATUS NtOpenThreadTokenEx (HANDLE ThreadHandle, ACCESS_MASK DesiredAccess, BOOLEAN OpenAsSelf, ULONG HandleAttributes, PHANDLE TokenHandle);\nNTSTATUS NtOpenProcessTokenEx (HANDLE ProcessHandle, ACCESS_MASK DesiredAccess, ULONG HandleAttributes, PHANDLE TokenHandle);\nNTSTATUS NtQueryPerformanceCounter (PLARGE_INTEGER PerformanceCounter, PLARGE_INTEGER PerformanceFrequency);\nNTSTATUS NtEnumerateKey (HANDLE KeyHandle, ULONG Index, KEY_INFORMATION_CLASS KeyInformationClass, PVOID KeyInformation, ULONG Length, PULONG ResultLength);\nNTSTATUS NtOpenFile (PHANDLE FileHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, PIO_STATUS_BLOCK IoStatusBlock, ULONG ShareAccess, ULONG OpenOptions);\nNTSTATUS NtDelayExecution (BOOLEAN Alertable, PLARGE_INTEGER DelayInterval);\nNTSTATUS NtQueryDirectoryFile (HANDLE FileHandle, HANDLE Event, PIO_APC_ROUTINE ApcRoutine, PVOID ApcContext, PIO_STATUS_BLOCK IoStatusBlock, PVOID FileInformation, ULONG Length, FILE_INFORMATION_CLASS FileInformationClass, BOOLEAN ReturnSingleEntry, PUNICODE_STRING FileName, BOOLEAN RestartScan);\nNTSTATUS NtQuerySystemInformation (SYSTEM_INFORMATION_CLASS SystemInformationClass, PVOID SystemInformation, ULONG SystemInformationLength, PULONG ReturnLength);\nNTSTATUS NtOpenSection (PHANDLE SectionHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes);\nNTSTATUS NtQueryTimer (HANDLE TimerHandle, TIMER_INFORMATION_CLASS TimerInformationClass, PVOID TimerInformation, ULONG TimerInformationLength, PULONG ReturnLength);\nNTSTATUS NtFsControlFile (HANDLE FileHandle, HANDLE Event, PIO_APC_ROUTINE ApcRoutine, PVOID ApcContext, PIO_STATUS_BLOCK IoStatusBlock, ULONG IoControlCode, PVOID InputBuffer, ULONG InputBufferLength, PVOID OutputBuffer, ULONG OutputBufferLength);\nNTSTATUS NtWriteVirtualMemory (HANDLE ProcessHandle, PVOID BaseAddress, PVOID Buffer, SIZE_T BufferSize, PSIZE_T NumberOfBytesWritten);\nNTSTATUS NtCloseObjectAuditAlarm (PUNICODE_STRING SubsystemName, PVOID HandleId, BOOLEAN GenerateOnClose);\nNTSTATUS NtDuplicateObject (HANDLE SourceProcessHandle, HANDLE SourceHandle, HANDLE TargetProcessHandle, PHANDLE TargetHandle, ACCESS_MASK DesiredAccess, ULONG HandleAttributes, ULONG Options);\nNTSTATUS NtQueryAttributesFile (POBJECT_ATTRIBUTES ObjectAttributes, PFILE_BASIC_INFORMATION FileInformation);\nNTSTATUS NtClearEvent (HANDLE EventHandle);\nNTSTATUS NtReadVirtualMemory (HANDLE ProcessHandle, PVOID BaseAddress, PVOID Buffer, SIZE_T BufferSize, PSIZE_T NumberOfBytesRead);\nNTSTATUS NtOpenEvent (PHANDLE EventHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes);\nNTSTATUS NtAdjustPrivilegesToken (HANDLE TokenHandle, BOOLEAN DisableAllPrivileges, PTOKEN_PRIVILEGES NewState, ULONG BufferLength, PTOKEN_PRIVILEGES PreviousState, PULONG ReturnLength);\nNTSTATUS NtDuplicateToken (HANDLE ExistingTokenHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, BOOLEAN EffectiveOnly, TOKEN_TYPE TokenType, PHANDLE NewTokenHandle);\nNTSTATUS NtContinue (PCONTEXT ContextRecord, BOOLEAN TestAlert);\nNTSTATUS NtQueryDefaultUILanguage (LANGID *DefaultUILanguageId);\nNTSTATUS NtQueueApcThread (HANDLE ThreadHandle, PPS_APC_ROUTINE ApcRoutine, PVOID ApcArgument1, PVOID ApcArgument2, PVOID ApcArgument3);\nNTSTATUS NtYieldExecution ();\nNTSTATUS NtAddAtom (PWSTR AtomName, ULONG Length, PRTL_ATOM Atom);\n```\n\n----------------------------------------\n\nTITLE: Defining Time Management System Calls in Linux Kernel\nDESCRIPTION: Function declarations for Linux system calls related to time management, including timers, clocks, and timeouts. These functions handle system time operations with 32-bit time structures.\nSOURCE: https://github.com/panda-re/panda-ng/blob/main/plugins/syscalls2/generated-in/linux_mips64n32_prototypes.txt#_snippet_3\n\nLANGUAGE: C\nCODE:\n```\nlong sys_adjtimex_time32(struct old_timex32 __user *txc_p);\nlong sys_settimeofday(struct __kernel_old_timeval __user *tv, struct timezone __user *tz);\nlong sys_futex_time32(u32 __user *uaddr, int op, u32 val, struct old_timespec32 __user *utime, u32 __user *uaddr2, u32 val3);\nlong sys_timer_settime32(timer_t timer_id, int flags, struct old_itimerspec32 __user *new, struct old_itimerspec32 __user *old);\nlong sys_timer_gettime32(timer_t timer_id, struct old_itimerspec32 __user *setting);\nlong sys_timer_getoverrun(timer_t timer_id);\nlong sys_timer_delete(timer_t timer_id);\nlong sys_clock_settime32(clockid_t which_clock, struct old_timespec32 __user *tp);\nlong sys_clock_gettime32(clockid_t which_clock, struct old_timespec32 __user *tp);\nlong sys_clock_getres_time32(clockid_t which_clock, struct old_timespec32 __user *tp);\nlong sys_clock_nanosleep_time32(clockid_t which_clock, int flags, struct old_timespec32 __user *rqtp, struct old_timespec32 __user *rmtp);\n```\n\n----------------------------------------\n\nTITLE: Installing OSI Linux Dependencies for PANDA-RE\nDESCRIPTION: Additional packages required for OSI (Operating System Introspection) Linux functionality in PANDA-RE.\nSOURCE: https://github.com/panda-re/panda-ng/blob/main/debian/dependencies/ubuntu_22.04_base.txt#_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nwget\nlibcurl4-gnutls-dev\ncurl\n```\n\n----------------------------------------\n\nTITLE: Declaring Windows NT Native API Functions in C\nDESCRIPTION: A comprehensive collection of Windows NT native API function declarations (NtXxx functions) used for direct system calls to the Windows kernel. These function prototypes define the interface for operations related to processes, threads, files, security, and inter-process communication.\nSOURCE: https://github.com/panda-re/panda-ng/blob/main/plugins/syscalls2/generated-in/windows_7_x64_prototypes.txt#_snippet_1\n\nLANGUAGE: C\nCODE:\n```\nNTSTATUS NtCreateEvent (PHANDLE EventHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, EVENT_TYPE EventType, BOOLEAN InitialState);\nNTSTATUS NtQueryVolumeInformationFile (HANDLE FileHandle, PIO_STATUS_BLOCK IoStatusBlock, PVOID FsInformation, ULONG Length, FS_INFORMATION_CLASS FsInformationClass);\nNTSTATUS NtCreateSection (PHANDLE SectionHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, PLARGE_INTEGER MaximumSize, ULONG SectionPageProtection, ULONG AllocationAttributes, HANDLE FileHandle);\nNTSTATUS NtFlushBuffersFile (HANDLE FileHandle, PIO_STATUS_BLOCK IoStatusBlock);\nNTSTATUS NtApphelpCacheControl (APPHELPCOMMAND type, PVOID buf);\nNTSTATUS NtCreateProcessEx (PHANDLE ProcessHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, HANDLE ParentProcess, ULONG Flags, HANDLE SectionHandle, HANDLE DebugPort, HANDLE ExceptionPort, ULONG JobMemberLevel);\nNTSTATUS NtCreateThread (PHANDLE ThreadHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, HANDLE ProcessHandle, PCLIENT_ID ClientId, PCONTEXT ThreadContext, PINITIAL_TEB InitialTeb, BOOLEAN CreateSuspended);\nNTSTATUS NtIsProcessInJob (HANDLE ProcessHandle, HANDLE JobHandle);\nNTSTATUS NtProtectVirtualMemory (HANDLE ProcessHandle, PVOID *BaseAddress, PSIZE_T RegionSize, WIN32_PROTECTION_MASK NewProtectWin32, PULONG OldProtect);\nNTSTATUS NtQuerySection (HANDLE SectionHandle, SECTION_INFORMATION_CLASS SectionInformationClass, PVOID SectionInformation, SIZE_T SectionInformationLength, PSIZE_T ReturnLength);\nNTSTATUS NtResumeThread (HANDLE ThreadHandle, PULONG PreviousSuspendCount);\nNTSTATUS NtTerminateThread (HANDLE ThreadHandle, NTSTATUS ExitStatus);\nNTSTATUS NtReadRequestData (HANDLE PortHandle, PPORT_MESSAGE Message, ULONG DataEntryIndex, PVOID Buffer, SIZE_T BufferSize, PSIZE_T NumberOfBytesRead);\nNTSTATUS NtCreateFile (PHANDLE FileHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, PIO_STATUS_BLOCK IoStatusBlock, PLARGE_INTEGER AllocationSize, ULONG FileAttributes, ULONG ShareAccess, ULONG CreateDisposition, ULONG CreateOptions, PVOID EaBuffer, ULONG EaLength);\nNTSTATUS NtQueryEvent (HANDLE EventHandle, EVENT_INFORMATION_CLASS EventInformationClass, PVOID EventInformation, ULONG EventInformationLength, PULONG ReturnLength);\nNTSTATUS NtWriteRequestData (HANDLE PortHandle, PPORT_MESSAGE Message, ULONG DataEntryIndex, PVOID Buffer, SIZE_T BufferSize, PSIZE_T NumberOfBytesWritten);\nNTSTATUS NtOpenDirectoryObject (PHANDLE DirectoryHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes);\nNTSTATUS NtAccessCheckByTypeAndAuditAlarm (PUNICODE_STRING SubsystemName, PVOID HandleId, PUNICODE_STRING ObjectTypeName, PUNICODE_STRING ObjectName, PSECURITY_DESCRIPTOR SecurityDescriptor, PSID PrincipalSelfSid, ACCESS_MASK DesiredAccess, AUDIT_EVENT_TYPE AuditType, ULONG Flags, POBJECT_TYPE_LIST ObjectTypeList, ULONG ObjectTypeListLength, PGENERIC_MAPPING GenericMapping, BOOLEAN ObjectCreation, PACCESS_MASK GrantedAccess, PNTSTATUS AccessStatus, PBOOLEAN GenerateOnClose);\nNTSTATUS NtQuerySystemTime (PLARGE_INTEGER SystemTime);\nNTSTATUS NtWaitForMultipleObjects (ULONG Count, HANDLE Handles[], WAIT_TYPE WaitType, BOOLEAN Alertable, PLARGE_INTEGER Timeout);\nNTSTATUS NtSetInformationObject (HANDLE Handle, OBJECT_INFORMATION_CLASS ObjectInformationClass, PVOID ObjectInformation, ULONG ObjectInformationLength);\nNTSTATUS NtCancelIoFile (HANDLE FileHandle, PIO_STATUS_BLOCK IoStatusBlock);\nNTSTATUS NtTraceEvent (HANDLE TraceHandle, ULONG Flags, ULONG FieldSize, PVOID Fields);\nNTSTATUS NtPowerInformation (POWER_INFORMATION_LEVEL InformationLevel, PVOID InputBuffer, ULONG InputBufferLength, PVOID OutputBuffer, ULONG OutputBufferLength);\nNTSTATUS NtSetValueKey (HANDLE KeyHandle, PUNICODE_STRING ValueName, ULONG TitleIndex, ULONG Type, PVOID Data, ULONG DataSize);\nNTSTATUS NtCancelTimer (HANDLE TimerHandle, PBOOLEAN CurrentState);\nNTSTATUS NtSetTimer (HANDLE TimerHandle, PLARGE_INTEGER DueTime, PTIMER_APC_ROUTINE TimerApcRoutine, PVOID TimerContext, BOOLEAN WakeTimer, LONG Period, PBOOLEAN PreviousState);\nNTSTATUS NtAcceptConnectPort (PHANDLE PortHandle, PVOID PortContext, PPORT_MESSAGE ConnectionRequest, BOOLEAN AcceptConnection, PPORT_VIEW ServerView, PREMOTE_PORT_VIEW ClientView);\nNTSTATUS NtAccessCheck (PSECURITY_DESCRIPTOR SecurityDescriptor, HANDLE ClientToken, ACCESS_MASK DesiredAccess, PGENERIC_MAPPING GenericMapping, PPRIVILEGE_SET PrivilegeSet, PULONG PrivilegeSetLength, PACCESS_MASK GrantedAccess, PNTSTATUS AccessStatus);\nNTSTATUS NtAccessCheckByType (PSECURITY_DESCRIPTOR SecurityDescriptor, PSID PrincipalSelfSid, HANDLE ClientToken, ACCESS_MASK DesiredAccess, POBJECT_TYPE_LIST ObjectTypeList, ULONG ObjectTypeListLength, PGENERIC_MAPPING GenericMapping, PPRIVILEGE_SET PrivilegeSet, PULONG PrivilegeSetLength, PACCESS_MASK GrantedAccess, PNTSTATUS AccessStatus);\nNTSTATUS NtAccessCheckByTypeResultList (PSECURITY_DESCRIPTOR SecurityDescriptor, PSID PrincipalSelfSid, HANDLE ClientToken, ACCESS_MASK DesiredAccess, POBJECT_TYPE_LIST ObjectTypeList, ULONG ObjectTypeListLength, PGENERIC_MAPPING GenericMapping, PPRIVILEGE_SET PrivilegeSet, PULONG PrivilegeSetLength, PACCESS_MASK GrantedAccess, PNTSTATUS AccessStatus);\nNTSTATUS NtAccessCheckByTypeResultListAndAuditAlarm (PUNICODE_STRING SubsystemName, PVOID HandleId, PUNICODE_STRING ObjectTypeName, PUNICODE_STRING ObjectName, PSECURITY_DESCRIPTOR SecurityDescriptor, PSID PrincipalSelfSid, ACCESS_MASK DesiredAccess, AUDIT_EVENT_TYPE AuditType, ULONG Flags, POBJECT_TYPE_LIST ObjectTypeList, ULONG ObjectTypeListLength, PGENERIC_MAPPING GenericMapping, BOOLEAN ObjectCreation, PACCESS_MASK GrantedAccess, PNTSTATUS AccessStatus, PBOOLEAN GenerateOnClose);\nNTSTATUS NtAccessCheckByTypeResultListAndAuditAlarmByHandle (PUNICODE_STRING SubsystemName, PVOID HandleId, HANDLE ClientToken, PUNICODE_STRING ObjectTypeName, PUNICODE_STRING ObjectName, PSECURITY_DESCRIPTOR SecurityDescriptor, PSID PrincipalSelfSid, ACCESS_MASK DesiredAccess, AUDIT_EVENT_TYPE AuditType, ULONG Flags, POBJECT_TYPE_LIST ObjectTypeList, ULONG ObjectTypeListLength, PGENERIC_MAPPING GenericMapping, BOOLEAN ObjectCreation, PACCESS_MASK GrantedAccess, PNTSTATUS AccessStatus, PBOOLEAN GenerateOnClose);\nNTSTATUS NtAddBootEntry (PBOOT_ENTRY BootEntry, PULONG Id);\nNTSTATUS NtAddDriverEntry (PEFI_DRIVER_ENTRY DriverEntry, PULONG Id);\nNTSTATUS NtAdjustGroupsToken (HANDLE TokenHandle, BOOLEAN ResetToDefault, PTOKEN_GROUPS NewState, ULONG BufferLength, PTOKEN_GROUPS PreviousState, PULONG ReturnLength);\nNTSTATUS NtAlertResumeThread (HANDLE ThreadHandle, PULONG PreviousSuspendCount);\nNTSTATUS NtAlertThread (HANDLE ThreadHandle);\nNTSTATUS NtAllocateLocallyUniqueId (PLUID Luid);\nNTSTATUS NtAllocateReserveObject (PHANDLE MemoryReserveHandle, POBJECT_ATTRIBUTES ObjectAttributes, MEMORY_RESERVE_TYPE Type);\nNTSTATUS NtAllocateUserPhysicalPages (HANDLE ProcessHandle, PULONG_PTR NumberOfPages, PULONG_PTR UserPfnArray);\nNTSTATUS NtAllocateUuids (PULARGE_INTEGER Time, PULONG Range, PULONG Sequence, PCHAR Seed);\nNTSTATUS NtAlpcAcceptConnectPort (PHANDLE PortHandle, HANDLE ConnectionPortHandle, ULONG Flags, POBJECT_ATTRIBUTES ObjectAttributes, PALPC_PORT_ATTRIBUTES PortAttributes, PVOID PortContext, PPORT_MESSAGE ConnectionRequest, PALPC_MESSAGE_ATTRIBUTES ConnectionMessageAttributes, BOOLEAN AcceptConnection);\nNTSTATUS NtAlpcCancelMessage (HANDLE PortHandle, ULONG Flags, PALPC_CONTEXT_ATTR MessageContext);\nNTSTATUS NtAlpcConnectPort (PHANDLE PortHandle, PUNICODE_STRING PortName, POBJECT_ATTRIBUTES ObjectAttributes, PALPC_PORT_ATTRIBUTES PortAttributes, ULONG Flags, PSID RequiredServerSid, PPORT_MESSAGE ConnectionMessage, PULONG BufferLength, PALPC_MESSAGE_ATTRIBUTES OutMessageAttributes, PALPC_MESSAGE_ATTRIBUTES InMessageAttributes, PLARGE_INTEGER Timeout);\nNTSTATUS NtAlpcCreatePort (PHANDLE PortHandle, POBJECT_ATTRIBUTES ObjectAttributes, PALPC_PORT_ATTRIBUTES PortAttributes);\nNTSTATUS NtAlpcCreatePortSection (HANDLE PortHandle, ULONG Flags, HANDLE SectionHandle, SIZE_T SectionSize, PALPC_HANDLE AlpcSectionHandle, PSIZE_T ActualSectionSize);\nNTSTATUS NtAlpcCreateResourceReserve (HANDLE PortHandle, ULONG Flags, SIZE_T MessageSize, PALPC_HANDLE ResourceId);\nNTSTATUS NtAlpcCreateSectionView (HANDLE PortHandle, ULONG Flags, PALPC_DATA_VIEW_ATTR ViewAttributes);\nNTSTATUS NtAlpcCreateSecurityContext (HANDLE PortHandle, ULONG Flags, PALPC_SECURITY_ATTR SecurityAttribute);\nNTSTATUS NtAlpcDeletePortSection (HANDLE PortHandle, ULONG Flags, ALPC_HANDLE SectionHandle);\nNTSTATUS NtAlpcDeleteResourceReserve (HANDLE PortHandle, ULONG Flags, ALPC_HANDLE ResourceId);\nNTSTATUS NtAlpcDeleteSectionView (HANDLE PortHandle, ULONG Flags, PVOID ViewBase);\nNTSTATUS NtAlpcDeleteSecurityContext (HANDLE PortHandle, ULONG Flags, ALPC_HANDLE ContextHandle);\nNTSTATUS NtAlpcDisconnectPort (HANDLE PortHandle, ULONG Flags);\nNTSTATUS NtAlpcImpersonateClientOfPort (HANDLE PortHandle, PPORT_MESSAGE PortMessage, PVOID Reserved);\nNTSTATUS NtAlpcOpenSenderProcess (PHANDLE ProcessHandle, HANDLE PortHandle, PPORT_MESSAGE PortMessage, ULONG Flags, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes);\nNTSTATUS NtAlpcOpenSenderThread (PHANDLE ThreadHandle, HANDLE PortHandle, PPORT_MESSAGE PortMessage, ULONG Flags, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes);\nNTSTATUS NtAlpcQueryInformation (HANDLE PortHandle, ALPC_PORT_INFORMATION_CLASS PortInformationClass, PVOID PortInformation, ULONG Length, PULONG ReturnLength);\nNTSTATUS NtAlpcQueryInformationMessage (HANDLE PortHandle, PPORT_MESSAGE PortMessage, ALPC_MESSAGE_INFORMATION_CLASS MessageInformationClass, PVOID MessageInformation, ULONG Length, PULONG ReturnLength);\n```\n\n----------------------------------------\n\nTITLE: Declaring Native System Service Prototypes - Windows NT API - C/C++\nDESCRIPTION: This group of code snippets declares a wide variety of NTSTATUS-returning function prototypes for native Windows NT system calls, facilitating direct interaction with the kernel's low-level services. It requires access to relevant Windows SDK headers for types like HANDLE, NTSTATUS, and others. Functions cover memory protection, event signaling, file system queries, process/thread information, and more; all are intended to be used as interface definitions for calling internal system services. All parameters are explicitly typed, and usage of these prototypes is constrained to implementations with the necessary privilege and environment (generally kernel-mode or advanced system utilities; not for standard user-mode applications).\nSOURCE: https://github.com/panda-re/panda-ng/blob/main/plugins/syscalls2/generated-in/all_windows_prototypes.txt#_snippet_10\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtPropagationFailed (HANDLE ResourceManagerHandle, ULONG RequestCookie, NTSTATUS PropStatus);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtProtectVirtualMemory (HANDLE ProcessHandle, PVOID *BaseAddress, PSIZE_T RegionSize, WIN32_PROTECTION_MASK NewProtectWin32, PULONG OldProtect);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtPulseEvent (HANDLE EventHandle, PLONG PreviousState);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtQueryAttributesFile (POBJECT_ATTRIBUTES ObjectAttributes, PFILE_BASIC_INFORMATION FileInformation);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtQueryBootEntryOrder (PULONG Ids, PULONG Count);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtQueryBootOptions (PBOOT_OPTIONS BootOptions, PULONG BootOptionsLength);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtQueryDebugFilterState (ULONG ComponentId, ULONG Level);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtQueryDefaultLocale (BOOLEAN UserProfile, PLCID DefaultLocaleId);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtQueryDefaultUILanguage (LANGID *DefaultUILanguageId);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtQueryDirectoryFile (HANDLE FileHandle, HANDLE Event, PIO_APC_ROUTINE ApcRoutine, PVOID ApcContext, PIO_STATUS_BLOCK IoStatusBlock, PVOID FileInformation, ULONG Length, FILE_INFORMATION_CLASS FileInformationClass, BOOLEAN ReturnSingleEntry, PUNICODE_STRING FileName, BOOLEAN RestartScan);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtQueryDirectoryObject (HANDLE DirectoryHandle, PVOID Buffer, ULONG Length, BOOLEAN ReturnSingleEntry, BOOLEAN RestartScan, PULONG Context, PULONG ReturnLength);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtQueryDriverEntryOrder (PULONG Ids, PULONG Count);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtQueryEaFile (HANDLE FileHandle, PIO_STATUS_BLOCK IoStatusBlock, PVOID Buffer, ULONG Length, BOOLEAN ReturnSingleEntry, PVOID EaList, ULONG EaListLength, PULONG EaIndex, BOOLEAN RestartScan);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtQueryEvent (HANDLE EventHandle, EVENT_INFORMATION_CLASS EventInformationClass, PVOID EventInformation, ULONG EventInformationLength, PULONG ReturnLength);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtQueryFullAttributesFile (POBJECT_ATTRIBUTES ObjectAttributes, PFILE_NETWORK_OPEN_INFORMATION FileInformation);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtQueryInformationAtom (RTL_ATOM Atom, ATOM_INFORMATION_CLASS InformationClass, PVOID AtomInformation, ULONG AtomInformationLength, PULONG ReturnLength);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtQueryInformationEnlistment (HANDLE EnlistmentHandle, ENLISTMENT_INFORMATION_CLASS EnlistmentInformationClass, PVOID EnlistmentInformation, ULONG EnlistmentInformationLength, PULONG ReturnLength);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtQueryInformationFile (HANDLE FileHandle, PIO_STATUS_BLOCK IoStatusBlock, PVOID FileInformation, ULONG Length, FILE_INFORMATION_CLASS FileInformationClass);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtQueryInformationJobObject (HANDLE JobHandle, JOBOBJECTINFOCLASS JobObjectInformationClass, PVOID JobObjectInformation, ULONG JobObjectInformationLength, PULONG ReturnLength);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtQueryInformationPort (HANDLE PortHandle, PORT_INFORMATION_CLASS PortInformationClass, PVOID PortInformation, ULONG Length, PULONG ReturnLength);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtQueryInformationProcess (HANDLE ProcessHandle, PROCESSINFOCLASS ProcessInformationClass, PVOID ProcessInformation, ULONG ProcessInformationLength, PULONG ReturnLength);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtQueryInformationResourceManager (HANDLE ResourceManagerHandle, RESOURCEMANAGER_INFORMATION_CLASS ResourceManagerInformationClass, PVOID ResourceManagerInformation, ULONG ResourceManagerInformationLength, PULONG ReturnLength);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtQueryInformationThread (HANDLE ThreadHandle, THREADINFOCLASS ThreadInformationClass, PVOID ThreadInformation, ULONG ThreadInformationLength, PULONG ReturnLength);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtQueryInformationToken (HANDLE TokenHandle, TOKEN_INFORMATION_CLASS TokenInformationClass, PVOID TokenInformation, ULONG TokenInformationLength, PULONG ReturnLength);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtQueryInformationTransaction (HANDLE TransactionHandle, TRANSACTION_INFORMATION_CLASS TransactionInformationClass, PVOID TransactionInformation, ULONG TransactionInformationLength, PULONG ReturnLength);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtQueryInformationTransactionManager (HANDLE TransactionManagerHandle, TRANSACTIONMANAGER_INFORMATION_CLASS TransactionManagerInformationClass, PVOID TransactionManagerInformation, ULONG TransactionManagerInformationLength, PULONG ReturnLength);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtQueryInformationWorkerFactory (HANDLE WorkerFactoryHandle, WORKERFACTORYINFOCLASS WorkerFactoryInformationClass, PVOID WorkerFactoryInformation, ULONG WorkerFactoryInformationLength, PULONG ReturnLength);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtQueryInstallUILanguage (LANGID *InstallUILanguageId);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtQueryIntervalProfile (KPROFILE_SOURCE ProfileSource, PULONG Interval);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtQueryIoCompletion (HANDLE IoCompletionHandle, IO_COMPLETION_INFORMATION_CLASS IoCompletionInformationClass, PVOID IoCompletionInformation, ULONG IoCompletionInformationLength, PULONG ReturnLength);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtQueryKey (HANDLE KeyHandle, KEY_INFORMATION_CLASS KeyInformationClass, PVOID KeyInformation, ULONG Length, PULONG ResultLength);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtQueryMultipleValueKey (HANDLE KeyHandle, PKEY_VALUE_ENTRY ValueEntries, ULONG EntryCount, PVOID ValueBuffer, PULONG BufferLength, PULONG RequiredBufferLength);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtQueryMutant (HANDLE MutantHandle, MUTANT_INFORMATION_CLASS MutantInformationClass, PVOID MutantInformation, ULONG MutantInformationLength, PULONG ReturnLength);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtQueryObject (HANDLE Handle, OBJECT_INFORMATION_CLASS ObjectInformationClass, PVOID ObjectInformation, ULONG ObjectInformationLength, PULONG ReturnLength);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtQueryOpenSubKeys (POBJECT_ATTRIBUTES TargetKey, PULONG HandleCount);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtQueryOpenSubKeysEx (POBJECT_ATTRIBUTES TargetKey, ULONG BufferLength, PVOID Buffer, PULONG RequiredSize);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtQueryPerformanceCounter (PLARGE_INTEGER PerformanceCounter, PLARGE_INTEGER PerformanceFrequency);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtQueryPortInformationProcess ();\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtQueryQuotaInformationFile (HANDLE FileHandle, PIO_STATUS_BLOCK IoStatusBlock, PVOID Buffer, ULONG Length, BOOLEAN ReturnSingleEntry, PVOID SidList, ULONG SidListLength, PULONG StartSid, BOOLEAN RestartScan);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtQuerySection (HANDLE SectionHandle, SECTION_INFORMATION_CLASS SectionInformationClass, PVOID SectionInformation, SIZE_T SectionInformationLength, PSIZE_T ReturnLength);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtQuerySecurityAttributesToken (HANDLE TokenHandle, PUNICODE_STRING Attributes, ULONG NumberOfAttributes, PVOID Buffer, ULONG Length, PULONG ReturnLength);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtQuerySecurityObject (HANDLE Handle, SECURITY_INFORMATION SecurityInformation, PSECURITY_DESCRIPTOR SecurityDescriptor, ULONG Length, PULONG LengthNeeded);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtQuerySemaphore (HANDLE SemaphoreHandle, SEMAPHORE_INFORMATION_CLASS SemaphoreInformationClass, PVOID SemaphoreInformation, ULONG SemaphoreInformationLength, PULONG ReturnLength);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtQuerySymbolicLinkObject (HANDLE LinkHandle, PUNICODE_STRING LinkTarget, PULONG ReturnedLength);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtQuerySystemEnvironmentValue (PUNICODE_STRING VariableName, PWSTR VariableValue, USHORT ValueLength, PUSHORT ReturnLength);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtQuerySystemEnvironmentValueEx (PUNICODE_STRING VariableName, LPGUID VendorGuid, PVOID Value, PULONG ValueLength, PULONG Attributes);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtQuerySystemInformation (SYSTEM_INFORMATION_CLASS SystemInformationClass, PVOID SystemInformation, ULONG SystemInformationLength, PULONG ReturnLength);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtQuerySystemInformationEx (SYSTEM_INFORMATION_CLASS SystemInformationClass, PVOID QueryInformation, ULONG QueryInformationLength, PVOID SystemInformation, ULONG SystemInformationLength, PULONG ReturnLength);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtQuerySystemTime (PLARGE_INTEGER SystemTime);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtQueryTimer (HANDLE TimerHandle, TIMER_INFORMATION_CLASS TimerInformationClass, PVOID TimerInformation, ULONG TimerInformationLength, PULONG ReturnLength);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtQueryTimerResolution (PULONG MaximumTime, PULONG MinimumTime, PULONG CurrentTime);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtQueryValueKey (HANDLE KeyHandle, PUNICODE_STRING ValueName, KEY_VALUE_INFORMATION_CLASS KeyValueInformationClass, PVOID KeyValueInformation, ULONG Length, PULONG ResultLength);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtQueryVirtualMemory (HANDLE ProcessHandle, PVOID BaseAddress, MEMORY_INFORMATION_CLASS MemoryInformationClass, PVOID MemoryInformation, SIZE_T MemoryInformationLength, PSIZE_T ReturnLength);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtQueryVolumeInformationFile (HANDLE FileHandle, PIO_STATUS_BLOCK IoStatusBlock, PVOID FsInformation, ULONG Length, FS_INFORMATION_CLASS FsInformationClass);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtQueueApcThread (HANDLE ThreadHandle, PPS_APC_ROUTINE ApcRoutine, PVOID ApcArgument1, PVOID ApcArgument2, PVOID ApcArgument3);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtQueueApcThreadEx (HANDLE ThreadHandle, HANDLE UserApcReserveHandle, PPS_APC_ROUTINE ApcRoutine, PVOID ApcArgument1, PVOID ApcArgument2, PVOID ApcArgument3);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtRaiseException (PEXCEPTION_RECORD ExceptionRecord, PCONTEXT ContextRecord, BOOLEAN FirstChance);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtRaiseHardError (NTSTATUS ErrorStatus, ULONG NumberOfParameters, ULONG UnicodeStringParameterMask, PULONG_PTR Parameters, ULONG ValidResponseOptions, PULONG Response);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtReadFile (HANDLE FileHandle, HANDLE Event, PIO_APC_ROUTINE ApcRoutine, PVOID ApcContext, PIO_STATUS_BLOCK IoStatusBlock, PVOID Buffer, ULONG Length, PLARGE_INTEGER ByteOffset, PULONG Key);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtReadFileScatter (HANDLE FileHandle, HANDLE Event, PIO_APC_ROUTINE ApcRoutine, PVOID ApcContext, PIO_STATUS_BLOCK IoStatusBlock, PFILE_SEGMENT_ELEMENT SegmentArray, ULONG Length, PLARGE_INTEGER ByteOffset, PULONG Key);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtReadOnlyEnlistment (HANDLE EnlistmentHandle, PLARGE_INTEGER TmVirtualClock);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtReadRequestData (HANDLE PortHandle, PPORT_MESSAGE Message, ULONG DataEntryIndex, PVOID Buffer, SIZE_T BufferSize, PSIZE_T NumberOfBytesRead);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtReadVirtualMemory (HANDLE ProcessHandle, PVOID BaseAddress, PVOID Buffer, SIZE_T BufferSize, PSIZE_T NumberOfBytesRead);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtRecoverEnlistment (HANDLE EnlistmentHandle, PVOID EnlistmentKey);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtRecoverResourceManager (HANDLE ResourceManagerHandle);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtRecoverTransactionManager (HANDLE TransactionManagerHandle);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtRegisterProtocolAddressInformation (HANDLE ResourceManager, PCRM_PROTOCOL_ID ProtocolId, ULONG ProtocolInformationSize, PVOID ProtocolInformation, ULONG CreateOptions);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtRegisterThreadTerminatePort (HANDLE PortHandle);\n```\n\n----------------------------------------\n\nTITLE: Windows NT Port Communication Function Declarations (C)\nDESCRIPTION: Declarations for NT API functions that handle communication through NT ports, including sending, receiving, and connecting to ports. These functions provide the foundation for inter-process communication in Windows NT.\nSOURCE: https://github.com/panda-re/panda-ng/blob/main/plugins/syscalls2/generated-in/windows_vistasp0_x86_prototypes.txt#_snippet_15\n\nLANGUAGE: C\nCODE:\n```\nNTSTATUS NtReplyPort (HANDLE PortHandle, PPORT_MESSAGE ReplyMessage);\nNTSTATUS NtReplyWaitReceivePort (HANDLE PortHandle, PVOID *PortContext , PPORT_MESSAGE ReplyMessage, PPORT_MESSAGE ReceiveMessage);\nNTSTATUS NtReplyWaitReceivePortEx (HANDLE PortHandle, PVOID *PortContext, PPORT_MESSAGE ReplyMessage, PPORT_MESSAGE ReceiveMessage, PLARGE_INTEGER Timeout);\nNTSTATUS NtReplyWaitReplyPort (HANDLE PortHandle, PPORT_MESSAGE ReplyMessage);\nNTSTATUS NtRequestPort (HANDLE PortHandle, PPORT_MESSAGE RequestMessage);\nNTSTATUS NtRequestWaitReplyPort (HANDLE PortHandle, PPORT_MESSAGE RequestMessage, PPORT_MESSAGE ReplyMessage);\nNTSTATUS NtReadRequestData (HANDLE PortHandle, PPORT_MESSAGE Message, ULONG DataEntryIndex, PVOID Buffer, SIZE_T BufferSize, PSIZE_T NumberOfBytesRead);\nNTSTATUS NtSecureConnectPort (PHANDLE PortHandle, PUNICODE_STRING PortName, PSECURITY_QUALITY_OF_SERVICE SecurityQos, PPORT_VIEW ClientView, PSID RequiredServerSid, PREMOTE_PORT_VIEW ServerView, PULONG MaxMessageLength, PVOID ConnectionInformation, PULONG ConnectionInformationLength);\n```\n\n----------------------------------------\n\nTITLE: Defining File Path Operations System Calls in Linux Kernel\nDESCRIPTION: Function declarations for Linux system calls that operate on file paths, especially those with directory file descriptor (dirfd) parameters. These functions provide interfaces for relative path operations.\nSOURCE: https://github.com/panda-re/panda-ng/blob/main/plugins/syscalls2/generated-in/linux_mips64n32_prototypes.txt#_snippet_9\n\nLANGUAGE: C\nCODE:\n```\nlong sys_openat(int dfd, const char __user *filename, int flags, umode_t mode);\nlong sys_mkdirat(int dfd, const char __user *pathname, umode_t mode);\nlong sys_mknodat(int dfd, const char __user *filename, umode_t mode, unsigned dev);\nlong sys_fchownat(int dfd, const char __user *filename, uid_t user, gid_t group, int flag);\nlong sys_futimesat_time32(unsigned int dfd, const char __user *filename, struct old_timeval32 __user *t);\nlong sys_newfstatat(int dfd, const char __user *filename, struct stat __user *statbuf, int flag);\nlong sys_unlinkat(int dfd, const char __user *pathname, int flag);\nlong sys_renameat(int olddfd, const char __user *oldname, int newdfd, const char __user *newname);\nlong sys_linkat(int olddfd, const char __user *oldname, int newdfd, const char __user *newname, int flags);\nlong sys_symlinkat(const char __user *oldname, int newdfd, const char __user *newname);\nlong sys_readlinkat(int dfd, const char __user *path, char __user *buf, int bufsiz);\nlong sys_fchmodat(int dfd, const char __user *filename, umode_t mode);\nlong sys_faccessat(int dfd, const char __user *filename, int mode);\n```\n\n----------------------------------------\n\nTITLE: Declaring Native API System Call Prototypes - Windows NT - C\nDESCRIPTION: This snippet contains consecutive C function prototypes for the Nt* family of Windows Native API functions. These prototypes define the function names, argument types, and return type (NTSTATUS), enabling users to interact with system kernel operations such as process management, memory operations, event handling, I/O, debugging, and driver control. The dependencies include NT kernel type definitions (HANDLE, NTSTATUS, PIO_STATUS_BLOCK, etc.) and the inclusion of proper Windows development headers. Inputs, outputs, and their purposes are dictated by each function's arguments as specified in the prototype. Limitations: These are declarations only; no implementations are present, and usage assumes underlying system/linker support on a compatible Windows platform.\nSOURCE: https://github.com/panda-re/panda-ng/blob/main/plugins/syscalls2/generated-in/windows_7_x86_prototypes.txt#_snippet_5\n\nLANGUAGE: C\nCODE:\n```\nNTSTATUS NtShutdownWorkerFactory (HANDLE WorkerFactoryHandle, LONG *PendingWorkerCount);\nNTSTATUS NtSignalAndWaitForSingleObject (HANDLE SignalHandle, HANDLE WaitHandle, BOOLEAN Alertable, PLARGE_INTEGER Timeout);\nNTSTATUS NtSinglePhaseReject (HANDLE EnlistmentHandle, PLARGE_INTEGER TmVirtualClock);\nNTSTATUS NtStartProfile (HANDLE ProfileHandle);\nNTSTATUS NtStopProfile (HANDLE ProfileHandle);\nNTSTATUS NtSuspendProcess (HANDLE ProcessHandle);\nNTSTATUS NtSuspendThread (HANDLE ThreadHandle, PULONG PreviousSuspendCount);\nNTSTATUS NtSystemDebugControl (SYSDBG_COMMAND Command, PVOID InputBuffer, ULONG InputBufferLength, PVOID OutputBuffer, ULONG OutputBufferLength, PULONG ReturnLength);\nNTSTATUS NtTerminateJobObject (HANDLE JobHandle, NTSTATUS ExitStatus);\nNTSTATUS NtTerminateProcess (HANDLE ProcessHandle, NTSTATUS ExitStatus);\nNTSTATUS NtTerminateThread (HANDLE ThreadHandle, NTSTATUS ExitStatus);\nNTSTATUS NtTestAlert ();\nNTSTATUS NtThawRegistry ();\nNTSTATUS NtThawTransactions ();\nNTSTATUS NtTraceControl (ULONG FunctionCode, PVOID InBuffer, ULONG InBufferLen, PVOID OutBuffer, ULONG OutBufferLen, PULONG ReturnLength);\nNTSTATUS NtTraceEvent (HANDLE TraceHandle, ULONG Flags, ULONG FieldSize, PVOID Fields);\nNTSTATUS NtTranslateFilePath (PFILE_PATH InputFilePath, ULONG OutputType, PFILE_PATH OutputFilePath, PULONG OutputFilePathLength);\nNTSTATUS NtUmsThreadYield (PVOID SchedulerParam);\nNTSTATUS NtUnloadDriver (PUNICODE_STRING DriverServiceName);\nNTSTATUS NtUnloadKey (POBJECT_ATTRIBUTES TargetKey);\nNTSTATUS NtUnloadKey2 (POBJECT_ATTRIBUTES TargetKey, ULONG Flags);\nNTSTATUS NtUnloadKeyEx (POBJECT_ATTRIBUTES TargetKey, HANDLE Event);\nNTSTATUS NtUnlockFile (HANDLE FileHandle, PIO_STATUS_BLOCK IoStatusBlock, PLARGE_INTEGER ByteOffset, PLARGE_INTEGER Length, ULONG Key);\nNTSTATUS NtUnlockVirtualMemory (HANDLE ProcessHandle, PVOID *BaseAddress, PSIZE_T RegionSize, ULONG MapType);\nNTSTATUS NtUnmapViewOfSection (HANDLE ProcessHandle, PVOID BaseAddress);\nNTSTATUS NtVdmControl (VDMSERVICECLASS Service, PVOID ServiceData);\nNTSTATUS NtWaitForDebugEvent (HANDLE DebugObjectHandle, BOOLEAN Alertable, PLARGE_INTEGER Timeout, PDBGUI_WAIT_STATE_CHANGE WaitStateChange);\nNTSTATUS NtWaitForKeyedEvent (HANDLE KeyedEventHandle, PVOID KeyValue, BOOLEAN Alertable, PLARGE_INTEGER Timeout);\nNTSTATUS NtWaitForMultipleObjects (ULONG Count, HANDLE Handles[], WAIT_TYPE WaitType, BOOLEAN Alertable, PLARGE_INTEGER Timeout);\nNTSTATUS NtWaitForMultipleObjects32 (ULONG Count, LONG Handles[], WAIT_TYPE WaitType, BOOLEAN Alertable, PLARGE_INTEGER Timeout);\nNTSTATUS NtWaitForSingleObject (HANDLE Handle, BOOLEAN Alertable, PLARGE_INTEGER Timeout);\nNTSTATUS NtWaitForWorkViaWorkerFactory (HANDLE WorkerFactoryHandle, PFILE_IO_COMPLETION_INFORMATION MiniPacket);\nNTSTATUS NtWaitHighEventPair (HANDLE EventPairHandle);\nNTSTATUS NtWaitLowEventPair (HANDLE EventPairHandle);\nNTSTATUS NtWorkerFactoryWorkerReady (HANDLE WorkerFactoryHandle);\nNTSTATUS NtWriteFile (HANDLE FileHandle, HANDLE Event, PIO_APC_ROUTINE ApcRoutine, PVOID ApcContext, PIO_STATUS_BLOCK IoStatusBlock, PVOID Buffer, ULONG Length, PLARGE_INTEGER ByteOffset, PULONG Key);\nNTSTATUS NtWriteFileGather (HANDLE FileHandle, HANDLE Event, PIO_APC_ROUTINE ApcRoutine, PVOID ApcContext, PIO_STATUS_BLOCK IoStatusBlock, PFILE_SEGMENT_ELEMENT SegmentArray, ULONG Length, PLARGE_INTEGER ByteOffset, PULONG Key);\nNTSTATUS NtWriteRequestData (HANDLE PortHandle, PPORT_MESSAGE Message, ULONG DataEntryIndex, PVOID Buffer, SIZE_T BufferSize, PSIZE_T NumberOfBytesWritten);\nNTSTATUS NtWriteVirtualMemory (HANDLE ProcessHandle, PVOID BaseAddress, PVOID Buffer, SIZE_T BufferSize, PSIZE_T NumberOfBytesWritten);\nNTSTATUS NtYieldExecution ();\n```\n\n----------------------------------------\n\nTITLE: Windows NT Thread Context Access Function Declaration in C\nDESCRIPTION: Function signature for NtGetContextThread that retrieves processor context for the specified thread. Used for debugging and state inspection.\nSOURCE: https://github.com/panda-re/panda-ng/blob/main/plugins/syscalls2/generated-in/all_windows_prototypes.txt#_snippet_3\n\nLANGUAGE: C\nCODE:\n```\nNTSTATUS NtGetContextThread (HANDLE ThreadHandle, PCONTEXT ThreadContext);\n```\n\n----------------------------------------\n\nTITLE: Windows NT Event Management Function Declaration (C)\nDESCRIPTION: Declaration of the NtPulseEvent function that sets an event object to the signaled state and then resets it to the nonsignaled state. It returns the previous state through the PreviousState parameter.\nSOURCE: https://github.com/panda-re/panda-ng/blob/main/plugins/syscalls2/generated-in/windows_vistasp0_x86_prototypes.txt#_snippet_7\n\nLANGUAGE: C\nCODE:\n```\nNTSTATUS NtPulseEvent (HANDLE EventHandle, PLONG PreviousState);\n```\n\n----------------------------------------\n\nTITLE: Defining I/O Uring System Calls in C\nDESCRIPTION: These function prototypes define system calls for I/O uring operations, a high-performance asynchronous I/O interface. They include setup, submission, and registration of I/O operations.\nSOURCE: https://github.com/panda-re/panda-ng/blob/main/plugins/syscalls2/generated-in/linux_mips_prototypes.txt#_snippet_9\n\nLANGUAGE: C\nCODE:\n```\nlong sys_io_uring_setup(u32 entries, struct io_uring_params __user *p);\nlong sys_io_uring_enter(unsigned int fd, u32 to_submit, u32 min_complete, u32 flags, const sigset_t __user *sig, size_t sigsz);\nlong sys_io_uring_register(unsigned int fd, unsigned int op, void __user *arg, unsigned int nr_args);\n```\n\n----------------------------------------\n\nTITLE: Declaring Native System Call Prototypes - Windows NT API - C/C++\nDESCRIPTION: This snippet contains only the forward function declarations for a group of native system call APIs (Nt* functions) in the Windows NT kernel, exposing low-level operations such as setting system information, controlling processes and threads, handling files, and debugging. Usage of these functions requires inclusion of corresponding type definitions (e.g., PUNICODE_STRING, HANDLE, NTSTATUS) and linking against ntdll.dll at runtime. Parameters are tightly coupled to kernel- or system-defined data structures, and correct privilege levels are required; improper use can destabilize or crash the system.\nSOURCE: https://github.com/panda-re/panda-ng/blob/main/plugins/syscalls2/generated-in/windows_8sp0_x64_prototypes.txt#_snippet_5\n\nLANGUAGE: C\nCODE:\n```\nNTSTATUS NtSetSystemEnvironmentValue (PUNICODE_STRING VariableName, PUNICODE_STRING VariableValue);\nNTSTATUS NtSetSystemEnvironmentValueEx (PUNICODE_STRING VariableName, LPGUID VendorGuid, PVOID Value, ULONG ValueLength, ULONG Attributes);\nNTSTATUS NtSetSystemInformation (SYSTEM_INFORMATION_CLASS SystemInformationClass, PVOID SystemInformation, ULONG SystemInformationLength);\nNTSTATUS NtSetSystemPowerState (POWER_ACTION SystemAction, SYSTEM_POWER_STATE MinSystemState, ULONG Flags);\nNTSTATUS NtSetSystemTime (PLARGE_INTEGER SystemTime, PLARGE_INTEGER PreviousTime);\nNTSTATUS NtSetThreadExecutionState (EXECUTION_STATE esFlags, PEXECUTION_STATE PreviousFlags);\nNTSTATUS NtSetTimerEx (HANDLE TimerHandle, TIMER_SET_INFORMATION_CLASS TimerSetInformationClass, PVOID TimerSetInformation, ULONG TimerSetInformationLength);\nNTSTATUS NtSetTimerResolution (ULONG DesiredTime, BOOLEAN SetResolution, PULONG ActualTime);\nNTSTATUS NtSetUuidSeed (PCHAR Seed);\nNTSTATUS NtSetVolumeInformationFile (HANDLE FileHandle, PIO_STATUS_BLOCK IoStatusBlock, PVOID FsInformation, ULONG Length, FS_INFORMATION_CLASS FsInformationClass);\nNTSTATUS NtShutdownSystem (SHUTDOWN_ACTION Action);\nNTSTATUS NtShutdownWorkerFactory (HANDLE WorkerFactoryHandle, LONG *PendingWorkerCount);\nNTSTATUS NtSignalAndWaitForSingleObject (HANDLE SignalHandle, HANDLE WaitHandle, BOOLEAN Alertable, PLARGE_INTEGER Timeout);\nNTSTATUS NtSinglePhaseReject (HANDLE EnlistmentHandle, PLARGE_INTEGER TmVirtualClock);\nNTSTATUS NtStartProfile (HANDLE ProfileHandle);\nNTSTATUS NtStopProfile (HANDLE ProfileHandle);\nNTSTATUS NtSuspendProcess (HANDLE ProcessHandle);\nNTSTATUS NtSuspendThread (HANDLE ThreadHandle, PULONG PreviousSuspendCount);\nNTSTATUS NtSystemDebugControl (SYSDBG_COMMAND Command, PVOID InputBuffer, ULONG InputBufferLength, PVOID OutputBuffer, ULONG OutputBufferLength, PULONG ReturnLength);\nNTSTATUS NtTerminateJobObject (HANDLE JobHandle, NTSTATUS ExitStatus);\nNTSTATUS NtTestAlert ();\nNTSTATUS NtThawRegistry ();\nNTSTATUS NtThawTransactions ();\nNTSTATUS NtTraceControl (ULONG FunctionCode, PVOID InBuffer, ULONG InBufferLen, PVOID OutBuffer, ULONG OutBufferLen, PULONG ReturnLength);\nNTSTATUS NtTranslateFilePath (PFILE_PATH InputFilePath, ULONG OutputType, PFILE_PATH OutputFilePath, PULONG OutputFilePathLength);\nNTSTATUS NtUmsThreadYield (PVOID SchedulerParam);\nNTSTATUS NtUnloadDriver (PUNICODE_STRING DriverServiceName);\nNTSTATUS NtUnloadKey (POBJECT_ATTRIBUTES TargetKey);\nNTSTATUS NtUnloadKey2 (POBJECT_ATTRIBUTES TargetKey, ULONG Flags);\nNTSTATUS NtUnloadKeyEx (POBJECT_ATTRIBUTES TargetKey, HANDLE Event);\nNTSTATUS NtUnlockFile (HANDLE FileHandle, PIO_STATUS_BLOCK IoStatusBlock, PLARGE_INTEGER ByteOffset, PLARGE_INTEGER Length, ULONG Key);\nNTSTATUS NtUnlockVirtualMemory (HANDLE ProcessHandle, PVOID *BaseAddress, PSIZE_T RegionSize, ULONG MapType);\nNTSTATUS NtVdmControl (VDMSERVICECLASS Service, PVOID ServiceData);\nNTSTATUS NtWaitForDebugEvent (HANDLE DebugObjectHandle, BOOLEAN Alertable, PLARGE_INTEGER Timeout, PDBGUI_WAIT_STATE_CHANGE WaitStateChange);\nNTSTATUS NtWaitForKeyedEvent (HANDLE KeyedEventHandle, PVOID KeyValue, BOOLEAN Alertable, PLARGE_INTEGER Timeout);\nNTSTATUS NtWaitForWorkViaWorkerFactory (HANDLE WorkerFactoryHandle, PFILE_IO_COMPLETION_INFORMATION MiniPacket);\nNTSTATUS NtWaitHighEventPair (HANDLE EventPairHandle);\nNTSTATUS NtWaitLowEventPair (HANDLE EventPairHandle);\n```\n\n----------------------------------------\n\nTITLE: Defining File System System Calls in Linux Kernel\nDESCRIPTION: Function declarations for Linux system calls related to file system operations, including mounting, synchronization, and file attributes. These functions provide kernel interfaces for file system management and manipulation.\nSOURCE: https://github.com/panda-re/panda-ng/blob/main/plugins/syscalls2/generated-in/linux_mips64n32_prototypes.txt#_snippet_2\n\nLANGUAGE: C\nCODE:\n```\nlong sys_chroot(const char __user *filename);\nlong sys_sync(void);\nlong sys_acct(const char __user *name);\nlong sys_mount(char __user *dev_name, char __user *dir_name, char __user *type, unsigned long flags, void __user *data);\nlong sys_umount(char __user *name, int flags);\nlong sys_swapon(const char __user *specialfile, int swap_flags);\nlong sys_swapoff(const char __user *specialfile);\nlong sys_statfs64(const char __user *path, size_t sz, struct statfs64 __user *buf);\nlong sys_fstatfs64(unsigned int fd, size_t sz, struct statfs64 __user *buf);\nlong sys_readahead(int fd, loff_t offset, size_t count);\n```\n\n----------------------------------------\n\nTITLE: Windows NT System Call Declarations\nDESCRIPTION: Function declarations for Windows NT native API system calls. These functions provide low-level access to the Windows kernel for operations like process creation, file handling, memory management and IPC. The declarations follow the standard NT calling convention and include parameter types specific to the Windows NT environment.\nSOURCE: https://github.com/panda-re/panda-ng/blob/main/plugins/syscalls2/generated-in/windows_8sp1_x86_prototypes.txt#_snippet_10\n\nLANGUAGE: C\nCODE:\n```\nNTSTATUS NtCreateSection (PHANDLE SectionHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, PLARGE_INTEGER MaximumSize, ULONG SectionPageProtection, ULONG AllocationAttributes, HANDLE FileHandle);\nNTSTATUS NtCreateResourceManager (PHANDLE ResourceManagerHandle, ACCESS_MASK DesiredAccess, HANDLE TmHandle, LPGUID RmGuid, POBJECT_ATTRIBUTES ObjectAttributes, ULONG CreateOptions, PUNICODE_STRING Description);\n// ... additional declarations omitted for brevity ...\nNTSTATUS NtAllocateUserPhysicalPages (HANDLE ProcessHandle, PULONG_PTR NumberOfPages, PULONG_PTR UserPfnArray);\n```\n\n----------------------------------------\n\nTITLE: Defining Not-Implemented System Calls in Linux Kernel\nDESCRIPTION: Function declarations for not-implemented (NI) system calls in the Linux kernel. These placeholder functions return errors when called and represent deprecated or reserved system call numbers.\nSOURCE: https://github.com/panda-re/panda-ng/blob/main/plugins/syscalls2/generated-in/linux_mips64n32_prototypes.txt#_snippet_12\n\nLANGUAGE: C\nCODE:\n```\nlong sys_ni_syscall(void);\n```\n\n----------------------------------------\n\nTITLE: Declaring Windows NT Native API Control and Open Functions in C\nDESCRIPTION: This snippet contains declarations for Native API functions that allow control, notification, and opening of various Windows NT kernel objects, including events, memory, tokens, processes, directories, files, and more. Inputs typically include handles, access masks, object attributes, and information structures; outputs include NTSTATUS and pointers to resulting handles or structures. Dependencies require knowledge of Windows NT data types and kernel object structures. These calls are intended for applications with sufficient privileges and require robust error and validity checking.\nSOURCE: https://github.com/panda-re/panda-ng/blob/main/plugins/syscalls2/generated-in/windows_8sp0_x86_prototypes.txt#_snippet_3\n\nLANGUAGE: C\nCODE:\n```\nNTSTATUS NtPulseEvent (HANDLE EventHandle, PLONG PreviousState);\nNTSTATUS NtProtectVirtualMemory (HANDLE ProcessHandle, PVOID *BaseAddress, PSIZE_T RegionSize, WIN32_PROTECTION_MASK NewProtectWin32, PULONG OldProtect);\nNTSTATUS NtPropagationFailed (HANDLE ResourceManagerHandle, ULONG RequestCookie, NTSTATUS PropStatus);\nNTSTATUS NtPropagationComplete (HANDLE ResourceManagerHandle, ULONG RequestCookie, ULONG BufferLength, PVOID Buffer);\nNTSTATUS NtPrivilegeObjectAuditAlarm (PUNICODE_STRING SubsystemName, PVOID HandleId, HANDLE ClientToken, ACCESS_MASK DesiredAccess, PPRIVILEGE_SET Privileges, BOOLEAN AccessGranted);\nNTSTATUS NtPrivilegedServiceAuditAlarm (PUNICODE_STRING SubsystemName, PUNICODE_STRING ServiceName, HANDLE ClientToken, PPRIVILEGE_SET Privileges, BOOLEAN AccessGranted);\nNTSTATUS NtPrivilegeCheck (HANDLE ClientToken, PPRIVILEGE_SET RequiredPrivileges, PBOOLEAN Result);\nNTSTATUS NtPrePrepareEnlistment (HANDLE EnlistmentHandle, PLARGE_INTEGER TmVirtualClock);\nNTSTATUS NtPrePrepareComplete (HANDLE EnlistmentHandle, PLARGE_INTEGER TmVirtualClock);\nNTSTATUS NtPrepareEnlistment (HANDLE EnlistmentHandle, PLARGE_INTEGER TmVirtualClock);\nNTSTATUS NtPrepareComplete (HANDLE EnlistmentHandle, PLARGE_INTEGER TmVirtualClock);\nNTSTATUS NtPowerInformation (POWER_INFORMATION_LEVEL InformationLevel, PVOID InputBuffer, ULONG InputBufferLength, PVOID OutputBuffer, ULONG OutputBufferLength);\nNTSTATUS NtPlugPlayControl (PLUGPLAY_CONTROL_CLASS PnPControlClass, PVOID PnPControlData, ULONG PnPControlDataLength);\nNTSTATUS NtOpenTransactionManager (PHANDLE TmHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, PUNICODE_STRING LogFileName, LPGUID TmIdentity, ULONG OpenOptions);\nNTSTATUS NtOpenTransaction (PHANDLE TransactionHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, LPGUID Uow, HANDLE TmHandle);\nNTSTATUS NtOpenTimer (PHANDLE TimerHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes);\nNTSTATUS NtOpenThreadTokenEx (HANDLE ThreadHandle, ACCESS_MASK DesiredAccess, BOOLEAN OpenAsSelf, ULONG HandleAttributes, PHANDLE TokenHandle);\nNTSTATUS NtOpenThreadToken (HANDLE ThreadHandle, ACCESS_MASK DesiredAccess, BOOLEAN OpenAsSelf, PHANDLE TokenHandle);\nNTSTATUS NtOpenThread (PHANDLE ThreadHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, PCLIENT_ID ClientId);\nNTSTATUS NtOpenSymbolicLinkObject (PHANDLE LinkHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes);\nNTSTATUS NtOpenSession (PHANDLE SessionHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes);\nNTSTATUS NtOpenSemaphore (PHANDLE SemaphoreHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes);\nNTSTATUS NtOpenSection (PHANDLE SectionHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes);\nNTSTATUS NtOpenResourceManager (PHANDLE ResourceManagerHandle, ACCESS_MASK DesiredAccess, HANDLE TmHandle, LPGUID ResourceManagerGuid, POBJECT_ATTRIBUTES ObjectAttributes);\nNTSTATUS NtOpenProcessTokenEx (HANDLE ProcessHandle, ACCESS_MASK DesiredAccess, ULONG HandleAttributes, PHANDLE TokenHandle);\nNTSTATUS NtOpenProcessToken (HANDLE ProcessHandle, ACCESS_MASK DesiredAccess, PHANDLE TokenHandle);\nNTSTATUS NtOpenProcess (PHANDLE ProcessHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, PCLIENT_ID ClientId);\nNTSTATUS NtOpenPrivateNamespace (PHANDLE NamespaceHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, PVOID BoundaryDescriptor);\nNTSTATUS NtOpenObjectAuditAlarm (PUNICODE_STRING SubsystemName, PVOID HandleId, PUNICODE_STRING ObjectTypeName, PUNICODE_STRING ObjectName, PSECURITY_DESCRIPTOR SecurityDescriptor, HANDLE ClientToken, ACCESS_MASK DesiredAccess, ACCESS_MASK GrantedAccess, PPRIVILEGE_SET Privileges, BOOLEAN ObjectCreation, BOOLEAN AccessGranted, PBOOLEAN GenerateOnClose);\nNTSTATUS NtOpenMutant (PHANDLE MutantHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes);\nNTSTATUS NtOpenKeyTransactedEx (PHANDLE KeyHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, ULONG OpenOptions, HANDLE TransactionHandle);\nNTSTATUS NtOpenKeyTransacted (PHANDLE KeyHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, HANDLE TransactionHandle);\nNTSTATUS NtOpenKeyEx (PHANDLE KeyHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, ULONG OpenOptions);\nNTSTATUS NtOpenKeyedEvent (PHANDLE KeyedEventHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes);\nNTSTATUS NtOpenKey (PHANDLE KeyHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes);\nNTSTATUS NtOpenJobObject (PHANDLE JobHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes);\nNTSTATUS NtOpenIoCompletion (PHANDLE IoCompletionHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes);\nNTSTATUS NtOpenFile (PHANDLE FileHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, PIO_STATUS_BLOCK IoStatusBlock, ULONG ShareAccess, ULONG OpenOptions);\nNTSTATUS NtOpenEventPair (PHANDLE EventPairHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes);\nNTSTATUS NtOpenEvent (PHANDLE EventHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes);\nNTSTATUS NtOpenEnlistment (PHANDLE EnlistmentHandle, ACCESS_MASK DesiredAccess, HANDLE ResourceManagerHandle, LPGUID EnlistmentGuid, POBJECT_ATTRIBUTES ObjectAttributes);\nNTSTATUS NtOpenDirectoryObject (PHANDLE DirectoryHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes);\n```\n\n----------------------------------------\n\nTITLE: Defining Message Queue System Calls in C\nDESCRIPTION: These function prototypes define system calls for timed operations on message queues. They include sending and receiving messages with timeout specifications.\nSOURCE: https://github.com/panda-re/panda-ng/blob/main/plugins/syscalls2/generated-in/linux_mips_prototypes.txt#_snippet_5\n\nLANGUAGE: C\nCODE:\n```\nlong sys_mq_timedsend(mqd_t mqdes, const char __user *msg_ptr, size_t msg_len, unsigned int msg_prio, const struct __kernel_timespec __user *abs_timeout);\nlong sys_mq_timedreceive(mqd_t mqdes, char __user *msg_ptr, size_t msg_len, unsigned int __user *msg_prio, const struct __kernel_timespec __user *abs_timeout);\n```\n\n----------------------------------------\n\nTITLE: Notifying and Monitoring Changes to Kernel Objects via Native API - C\nDESCRIPTION: These prototypes provide mechanisms for subscribing to, and receiving notifications about, changes in object state or structure, such as directories, keys, or sessions. Functions like NtNotifyChangeDirectoryFile, NtNotifyChangeKey, and NtNotifyChangeSession facilitate monitoring by delivering asynchronous or synchronous notifications upon specific events or changes. Proper buffer allocation and a correct filter specification are required; asynchronous notifications may require completion routines and events for proper handling.\nSOURCE: https://github.com/panda-re/panda-ng/blob/main/plugins/syscalls2/generated-in/windows_8sp1_x86_prototypes.txt#_snippet_4\n\nLANGUAGE: C\nCODE:\n```\nNTSTATUS NtNotifyChangeSession (HANDLE Session, ULONG IoStateSequence, PVOID Reserved, ULONG Action, IO_SESSION_STATE IoState, IO_SESSION_STATE IoState2, PVOID Buffer, ULONG BufferSize);\n```\n\nLANGUAGE: C\nCODE:\n```\nNTSTATUS NtNotifyChangeMultipleKeys (HANDLE MasterKeyHandle, ULONG Count, OBJECT_ATTRIBUTES SlaveObjects[], HANDLE Event, PIO_APC_ROUTINE ApcRoutine, PVOID ApcContext, PIO_STATUS_BLOCK IoStatusBlock, ULONG CompletionFilter, BOOLEAN WatchTree, PVOID Buffer, ULONG BufferSize, BOOLEAN Asynchronous);\n```\n\nLANGUAGE: C\nCODE:\n```\nNTSTATUS NtNotifyChangeKey (HANDLE KeyHandle, HANDLE Event, PIO_APC_ROUTINE ApcRoutine, PVOID ApcContext, PIO_STATUS_BLOCK IoStatusBlock, ULONG CompletionFilter, BOOLEAN WatchTree, PVOID Buffer, ULONG BufferSize, BOOLEAN Asynchronous);\n```\n\nLANGUAGE: C\nCODE:\n```\nNTSTATUS NtNotifyChangeDirectoryFile (HANDLE FileHandle, HANDLE Event, PIO_APC_ROUTINE ApcRoutine, PVOID ApcContext, PIO_STATUS_BLOCK IoStatusBlock, PVOID Buffer, ULONG Length, ULONG CompletionFilter, BOOLEAN WatchTree);\n```\n\n----------------------------------------\n\nTITLE: Declaring User ID and Group ID System Calls in C\nDESCRIPTION: This snippet declares system calls for setting user and group IDs (setgid, setegid, seteuid). It includes function signatures with their respective parameters and return types.\nSOURCE: https://github.com/panda-re/panda-ng/blob/main/plugins/syscalls2/generated-in/freebsd_x64_prototypes.txt#_snippet_13\n\nLANGUAGE: C\nCODE:\n```\nint setgid(gid_t gid);\nint setegid(gid_t egid);\nint seteuid(uid_t euid);\n```\n\n----------------------------------------\n\nTITLE: Booting Ubuntu Live DVD in PANDA with Custom Boot Parameter (bash)\nDESCRIPTION: Shows a command to boot a Live Ubuntu DVD image in PANDA with increased RAM and monitor support, suitable for gathering or recording kernel introspection data. Requires a valid ISO image and sufficient RAM in the guest. The key parameter to include is nokaslr to disable address randomization. Output is a booted live environment ready for further configuration.\nSOURCE: https://github.com/panda-re/panda-ng/blob/main/plugins/osi_linux/README.md#_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\n$PANDA_PATH/x86_64-softmmu/panda-system-x86_64 --monitor stdio \\\n-m 4096 \\\n-cdrom 'ubuntu-18.04.4-desktop-amd64.iso'\n```\n\n----------------------------------------\n\nTITLE: Windows NT Process and Thread Management System Calls\nDESCRIPTION: System calls for creating and managing processes and threads, including process creation, thread creation and debug operations\nSOURCE: https://github.com/panda-re/panda-ng/blob/main/plugins/syscalls2/generated-in/windows_8sp0_x86_prototypes.txt#_snippet_6\n\nLANGUAGE: C\nCODE:\n```\nNTSTATUS NtCreateUserProcess(PHANDLE ProcessHandle, PHANDLE ThreadHandle, ACCESS_MASK ProcessDesiredAccess, ACCESS_MASK ThreadDesiredAccess, POBJECT_ATTRIBUTES ProcessObjectAttributes, POBJECT_ATTRIBUTES ThreadObjectAttributes, ULONG ProcessFlags, ULONG ThreadFlags, PRTL_USER_PROCESS_PARAMETERS ProcessParameters, PPROCESS_CREATE_INFO CreateInfo, PPROCESS_ATTRIBUTE_LIST AttributeList);\nNTSTATUS NtCreateThread(PHANDLE ThreadHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, HANDLE ProcessHandle, PCLIENT_ID ClientId, PCONTEXT ThreadContext, PINITIAL_TEB InitialTeb, BOOLEAN CreateSuspended);\n```\n\n----------------------------------------\n\nTITLE: Defining Process and Signal Management System Calls in C\nDESCRIPTION: These function prototypes define system calls for process-related operations, including sending signals to processes using file descriptors and opening process file descriptors.\nSOURCE: https://github.com/panda-re/panda-ng/blob/main/plugins/syscalls2/generated-in/linux_mips_prototypes.txt#_snippet_8\n\nLANGUAGE: C\nCODE:\n```\nlong sys_pidfd_send_signal(int pidfd, int sig, siginfo_t __user *info, unsigned int flags);\nlong sys_pidfd_open(pid_t pid, unsigned int flags);\nlong sys_pidfd_getfd(int pidfd, int fd, unsigned int flags);\n```\n\n----------------------------------------\n\nTITLE: Declaring NT Native System Call Prototypes in C\nDESCRIPTION: Declares function prototypes for a comprehensive set of NT Native API system calls focusing on querying information, key management, transaction processing, security, process and thread control, and I/O operations. Each function is declared to return an NTSTATUS and may take a variety of HANDLEs, pointers to data/structures, lengths, and class/enum values. These prototypes depend on Windows NT Native types (e.g., NTSTATUS, HANDLE, PUNICODE_STRING) and are usually used in projects requiring fine-grained system-level access unavailable through the standard Win32 API. The expected input for each is defined by its parameter list, typically ending with length or pointer parameters for buffer management. All functions are declared and not implemented here, and will require the appropriate linking to ntdll or kernel-mode providers; usage is constrained to privileged or system-expert contexts.\nSOURCE: https://github.com/panda-re/panda-ng/blob/main/plugins/syscalls2/generated-in/windows_8sp1_x64_prototypes.txt#_snippet_4\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtQueryInformationTransaction (HANDLE TransactionHandle, TRANSACTION_INFORMATION_CLASS TransactionInformationClass, PVOID TransactionInformation, ULONG TransactionInformationLength, PULONG ReturnLength);\nNTSTATUS NtQueryInformationTransactionManager (HANDLE TransactionManagerHandle, TRANSACTIONMANAGER_INFORMATION_CLASS TransactionManagerInformationClass, PVOID TransactionManagerInformation, ULONG TransactionManagerInformationLength, PULONG ReturnLength);\nNTSTATUS NtQueryInformationWorkerFactory (HANDLE WorkerFactoryHandle, WORKERFACTORYINFOCLASS WorkerFactoryInformationClass, PVOID WorkerFactoryInformation, ULONG WorkerFactoryInformationLength, PULONG ReturnLength);\nNTSTATUS NtQueryInstallUILanguage (LANGID *InstallUILanguageId);\nNTSTATUS NtQueryIntervalProfile (KPROFILE_SOURCE ProfileSource, PULONG Interval);\nNTSTATUS NtQueryIoCompletion (HANDLE IoCompletionHandle, IO_COMPLETION_INFORMATION_CLASS IoCompletionInformationClass, PVOID IoCompletionInformation, ULONG IoCompletionInformationLength, PULONG ReturnLength);\nNTSTATUS NtQueryLicenseValue (PUNICODE_STRING Name, PULONG Type, PVOID Buffer, ULONG Length, PULONG ReturnedLength);\nNTSTATUS NtQueryMultipleValueKey (HANDLE KeyHandle, PKEY_VALUE_ENTRY ValueEntries, ULONG EntryCount, PVOID ValueBuffer, PULONG BufferLength, PULONG RequiredBufferLength);\nNTSTATUS NtQueryMutant (HANDLE MutantHandle, MUTANT_INFORMATION_CLASS MutantInformationClass, PVOID MutantInformation, ULONG MutantInformationLength, PULONG ReturnLength);\nNTSTATUS NtQueryOpenSubKeys (POBJECT_ATTRIBUTES TargetKey, PULONG HandleCount);\nNTSTATUS NtQueryOpenSubKeysEx (POBJECT_ATTRIBUTES TargetKey, ULONG BufferLength, PVOID Buffer, PULONG RequiredSize);\nNTSTATUS NtQueryPortInformationProcess ();\nNTSTATUS NtQueryQuotaInformationFile (HANDLE FileHandle, PIO_STATUS_BLOCK IoStatusBlock, PVOID Buffer, ULONG Length, BOOLEAN ReturnSingleEntry, PVOID SidList, ULONG SidListLength, PULONG StartSid, BOOLEAN RestartScan);\nNTSTATUS NtQuerySecurityAttributesToken (HANDLE TokenHandle, PUNICODE_STRING Attributes, ULONG NumberOfAttributes, PVOID Buffer, ULONG Length, PULONG ReturnLength);\nNTSTATUS NtQuerySecurityObject (HANDLE Handle, SECURITY_INFORMATION SecurityInformation, PSECURITY_DESCRIPTOR SecurityDescriptor, ULONG Length, PULONG LengthNeeded);\nNTSTATUS NtQuerySemaphore (HANDLE SemaphoreHandle, SEMAPHORE_INFORMATION_CLASS SemaphoreInformationClass, PVOID SemaphoreInformation, ULONG SemaphoreInformationLength, PULONG ReturnLength);\nNTSTATUS NtQuerySymbolicLinkObject (HANDLE LinkHandle, PUNICODE_STRING LinkTarget, PULONG ReturnedLength);\nNTSTATUS NtQuerySystemEnvironmentValue (PUNICODE_STRING VariableName, PWSTR VariableValue, USHORT ValueLength, PUSHORT ReturnLength);\nNTSTATUS NtQuerySystemEnvironmentValueEx (PUNICODE_STRING VariableName, LPGUID VendorGuid, PVOID Value, PULONG ValueLength, PULONG Attributes);\nNTSTATUS NtQuerySystemInformationEx (SYSTEM_INFORMATION_CLASS SystemInformationClass, PVOID QueryInformation, ULONG QueryInformationLength, PVOID SystemInformation, ULONG SystemInformationLength, PULONG ReturnLength);\nNTSTATUS NtQueryTimerResolution (PULONG MaximumTime, PULONG MinimumTime, PULONG CurrentTime);\nNTSTATUS NtQueueApcThreadEx (HANDLE ThreadHandle, HANDLE UserApcReserveHandle, PPS_APC_ROUTINE ApcRoutine, PVOID ApcArgument1, PVOID ApcArgument2, PVOID ApcArgument3);\nNTSTATUS NtRaiseException (PEXCEPTION_RECORD ExceptionRecord, PCONTEXT ContextRecord, BOOLEAN FirstChance);\nNTSTATUS NtRaiseHardError (NTSTATUS ErrorStatus, ULONG NumberOfParameters, ULONG UnicodeStringParameterMask, PULONG_PTR Parameters, ULONG ValidResponseOptions, PULONG Response);\nNTSTATUS NtReadOnlyEnlistment (HANDLE EnlistmentHandle, PLARGE_INTEGER TmVirtualClock);\nNTSTATUS NtRecoverEnlistment (HANDLE EnlistmentHandle, PVOID EnlistmentKey);\nNTSTATUS NtRecoverResourceManager (HANDLE ResourceManagerHandle);\nNTSTATUS NtRecoverTransactionManager (HANDLE TransactionManagerHandle);\nNTSTATUS NtRegisterProtocolAddressInformation (HANDLE ResourceManager, PCRM_PROTOCOL_ID ProtocolId, ULONG ProtocolInformationSize, PVOID ProtocolInformation, ULONG CreateOptions);\nNTSTATUS NtRegisterThreadTerminatePort (HANDLE PortHandle);\nNTSTATUS NtReleaseKeyedEvent (HANDLE KeyedEventHandle, PVOID KeyValue, BOOLEAN Alertable, PLARGE_INTEGER Timeout);\nNTSTATUS NtReleaseWorkerFactoryWorker (HANDLE WorkerFactoryHandle);\nNTSTATUS NtRemoveIoCompletionEx (HANDLE IoCompletionHandle, PFILE_IO_COMPLETION_INFORMATION IoCompletionInformation, ULONG Count, PULONG NumEntriesRemoved, PLARGE_INTEGER Timeout, BOOLEAN Alertable);\nNTSTATUS NtRemoveProcessDebug (HANDLE ProcessHandle, HANDLE DebugObjectHandle);\nNTSTATUS NtRenameKey (HANDLE KeyHandle, PUNICODE_STRING NewName);\nNTSTATUS NtRenameTransactionManager (PUNICODE_STRING LogFileName, LPGUID ExistingTransactionManagerGuid);\nNTSTATUS NtReplaceKey (POBJECT_ATTRIBUTES NewFile, HANDLE TargetHandle, POBJECT_ATTRIBUTES OldFile);\nNTSTATUS NtReplacePartitionUnit (PUNICODE_STRING TargetInstancePath, PUNICODE_STRING SpareInstancePath, ULONG Flags);\nNTSTATUS NtReplyWaitReplyPort (HANDLE PortHandle, PPORT_MESSAGE ReplyMessage);\nNTSTATUS NtRequestPort (HANDLE PortHandle, PPORT_MESSAGE RequestMessage);\nNTSTATUS NtResetEvent (HANDLE EventHandle, PLONG PreviousState);\nNTSTATUS NtResetWriteWatch (HANDLE ProcessHandle, PVOID BaseAddress, SIZE_T RegionSize);\nNTSTATUS NtRestoreKey (HANDLE KeyHandle, HANDLE FileHandle, ULONG Flags);\nNTSTATUS NtResumeProcess (HANDLE ProcessHandle);\nNTSTATUS NtRollbackComplete (HANDLE EnlistmentHandle, PLARGE_INTEGER TmVirtualClock);\nNTSTATUS NtRollbackEnlistment (HANDLE EnlistmentHandle, PLARGE_INTEGER TmVirtualClock);\nNTSTATUS NtRollbackTransaction (HANDLE TransactionHandle, BOOLEAN Wait);\nNTSTATUS NtRollforwardTransactionManager (HANDLE TransactionManagerHandle, PLARGE_INTEGER TmVirtualClock);\nNTSTATUS NtSaveKey (HANDLE KeyHandle, HANDLE FileHandle);\nNTSTATUS NtSaveKeyEx (HANDLE KeyHandle, HANDLE FileHandle, ULONG Format);\nNTSTATUS NtSaveMergedKeys (HANDLE HighPrecedenceKeyHandle, HANDLE LowPrecedenceKeyHandle, HANDLE FileHandle);\nNTSTATUS NtSecureConnectPort (PHANDLE PortHandle, PUNICODE_STRING PortName, PSECURITY_QUALITY_OF_SERVICE SecurityQos, PPORT_VIEW ClientView, PSID RequiredServerSid, PREMOTE_PORT_VIEW ServerView, PULONG MaxMessageLength, PVOID ConnectionInformation, PULONG ConnectionInformationLength);\nNTSTATUS NtSerializeBoot ();\nNTSTATUS NtSetBootEntryOrder (PULONG Ids, ULONG Count);\nNTSTATUS NtSetBootOptions (PBOOT_OPTIONS BootOptions, ULONG FieldsToChange);\nNTSTATUS NtSetContextThread (HANDLE ThreadHandle, PCONTEXT ThreadContext);\nNTSTATUS NtSetDebugFilterState (ULONG ComponentId, ULONG Level, BOOLEAN State);\nNTSTATUS NtSetDefaultHardErrorPort (HANDLE DefaultHardErrorPort);\nNTSTATUS NtSetDefaultLocale (BOOLEAN UserProfile, LCID DefaultLocaleId);\nNTSTATUS NtSetDefaultUILanguage (LANGID DefaultUILanguageId);\nNTSTATUS NtSetDriverEntryOrder (PULONG Ids, ULONG Count);\nNTSTATUS NtSetEaFile (HANDLE FileHandle, PIO_STATUS_BLOCK IoStatusBlock, PVOID Buffer, ULONG Length);\nNTSTATUS NtSetHighEventPair (HANDLE EventPairHandle);\nNTSTATUS NtSetHighWaitLowEventPair (HANDLE EventPairHandle);\nNTSTATUS NtSetInformationDebugObject (HANDLE DebugObjectHandle, DEBUGOBJECTINFOCLASS DebugObjectInformationClass, PVOID DebugInformation, ULONG DebugInformationLength, PULONG ReturnLength);\nNTSTATUS NtSetInformationEnlistment (HANDLE EnlistmentHandle, ENLISTMENT_INFORMATION_CLASS EnlistmentInformationClass, PVOID EnlistmentInformation, ULONG EnlistmentInformationLength);\nNTSTATUS NtSetInformationJobObject (HANDLE JobHandle, JOBOBJECTINFOCLASS JobObjectInformationClass, PVOID JobObjectInformation, ULONG JobObjectInformationLength);\nNTSTATUS NtSetInformationKey (HANDLE KeyHandle, KEY_SET_INFORMATION_CLASS KeySetInformationClass, PVOID KeySetInformation, ULONG KeySetInformationLength);\nNTSTATUS NtSetInformationResourceManager (HANDLE ResourceManagerHandle, RESOURCEMANAGER_INFORMATION_CLASS ResourceManagerInformationClass, PVOID ResourceManagerInformation, ULONG ResourceManagerInformationLength);\nNTSTATUS NtSetInformationToken (HANDLE TokenHandle, TOKEN_INFORMATION_CLASS TokenInformationClass, PVOID TokenInformation, ULONG TokenInformationLength);\nNTSTATUS NtSetInformationTransaction (HANDLE TransactionHandle, TRANSACTION_INFORMATION_CLASS TransactionInformationClass, PVOID TransactionInformation, ULONG TransactionInformationLength);\nNTSTATUS NtSetInformationTransactionManager (HANDLE TmHandle, TRANSACTIONMANAGER_INFORMATION_CLASS TransactionManagerInformationClass, PVOID TransactionManagerInformation, ULONG TransactionManagerInformationLength);\nNTSTATUS NtSetInformationWorkerFactory (HANDLE WorkerFactoryHandle, WORKERFACTORYINFOCLASS WorkerFactoryInformationClass, PVOID WorkerFactoryInformation, ULONG WorkerFactoryInformationLength);\nNTSTATUS NtSetIntervalProfile (ULONG Interval, KPROFILE_SOURCE Source);\nNTSTATUS NtSetIoCompletion (HANDLE IoCompletionHandle, PVOID KeyContext, PVOID ApcContext, NTSTATUS IoStatus, ULONG_PTR IoStatusInformation);\nNTSTATUS NtSetIoCompletionEx (HANDLE IoCompletionHandle, HANDLE IoCompletionReserveHandle, PVOID KeyContext, PVOID ApcContext, NTSTATUS IoStatus, ULONG_PTR IoStatusInformation);\nNTSTATUS NtSetLdtEntries (ULONG Selector0, ULONG Entry0Low, ULONG Entry0Hi, ULONG Selector1, ULONG Entry1Low, ULONG Entry1Hi);\nNTSTATUS NtSetLowEventPair (HANDLE EventPairHandle);\nNTSTATUS NtSetLowWaitHighEventPair (HANDLE EventPairHandle);\nNTSTATUS NtSetQuotaInformationFile (HANDLE FileHandle, PIO_STATUS_BLOCK IoStatusBlock, PVOID Buffer, ULONG Length);\nNTSTATUS NtSetSecurityObject (HANDLE Handle, SECURITY_INFORMATION SecurityInformation, PSECURITY_DESCRIPTOR SecurityDescriptor);\n```\n\n----------------------------------------\n\nTITLE: Defining Jail and Extended Attribute List System Calls in C\nDESCRIPTION: This snippet defines system calls for jail attachment and listing extended attributes on files and file descriptors.\nSOURCE: https://github.com/panda-re/panda-ng/blob/main/plugins/syscalls2/generated-in/freebsd_x64_prototypes.txt#_snippet_34\n\nLANGUAGE: C\nCODE:\n```\nint jail_attach(int jid);\nssize_t extattr_list_fd(int fd, int attrnamespace, void *data, size_t nbytes);\nssize_t extattr_list_file(const char *path, int attrnamespace, void *data, size_t nbytes);\nssize_t extattr_list_link(const char *path, int attrnamespace, void *data, size_t nbytes);\n```\n\n----------------------------------------\n\nTITLE: Declaring Windows NT Native System Service Function Prototypes in C\nDESCRIPTION: This snippet declares function prototypes for a wide range of Windows NT native system service APIs using C. Each function returns an NTSTATUS and accepts parameters specific to its operation such as handles, pointers, GUIDs, and structure references. These declarations have no dependencies except inclusion of relevant type definitions (such as NTSTATUS, HANDLE, etc.). They are typically included in system-level code or compatibility layers that need direct, low-level access to the Windows operating system. The expected usage is to enable function calls to the underlying system service routines without requiring additional wrapping or boilerplate.\nSOURCE: https://github.com/panda-re/panda-ng/blob/main/plugins/syscalls2/generated-in/windows_8sp1_x64_prototypes.txt#_snippet_5\n\nLANGUAGE: C\nCODE:\n```\nNTSTATUS NtSetSystemEnvironmentValue (PUNICODE_STRING VariableName, PUNICODE_STRING VariableValue);\nNTSTATUS NtSetSystemEnvironmentValueEx (PUNICODE_STRING VariableName, LPGUID VendorGuid, PVOID Value, ULONG ValueLength, ULONG Attributes);\nNTSTATUS NtSetSystemInformation (SYSTEM_INFORMATION_CLASS SystemInformationClass, PVOID SystemInformation, ULONG SystemInformationLength);\nNTSTATUS NtSetSystemPowerState (POWER_ACTION SystemAction, SYSTEM_POWER_STATE MinSystemState, ULONG Flags);\nNTSTATUS NtSetSystemTime (PLARGE_INTEGER SystemTime, PLARGE_INTEGER PreviousTime);\nNTSTATUS NtSetThreadExecutionState (EXECUTION_STATE esFlags, PEXECUTION_STATE PreviousFlags);\nNTSTATUS NtSetTimerEx (HANDLE TimerHandle, TIMER_SET_INFORMATION_CLASS TimerSetInformationClass, PVOID TimerSetInformation, ULONG TimerSetInformationLength);\nNTSTATUS NtSetTimerResolution (ULONG DesiredTime, BOOLEAN SetResolution, PULONG ActualTime);\nNTSTATUS NtSetUuidSeed (PCHAR Seed);\nNTSTATUS NtSetVolumeInformationFile (HANDLE FileHandle, PIO_STATUS_BLOCK IoStatusBlock, PVOID FsInformation, ULONG Length, FS_INFORMATION_CLASS FsInformationClass);\nNTSTATUS NtShutdownSystem (SHUTDOWN_ACTION Action);\nNTSTATUS NtShutdownWorkerFactory (HANDLE WorkerFactoryHandle, LONG *PendingWorkerCount);\nNTSTATUS NtSignalAndWaitForSingleObject (HANDLE SignalHandle, HANDLE WaitHandle, BOOLEAN Alertable, PLARGE_INTEGER Timeout);\nNTSTATUS NtSinglePhaseReject (HANDLE EnlistmentHandle, PLARGE_INTEGER TmVirtualClock);\nNTSTATUS NtStartProfile (HANDLE ProfileHandle);\nNTSTATUS NtStopProfile (HANDLE ProfileHandle);\nNTSTATUS NtSuspendProcess (HANDLE ProcessHandle);\nNTSTATUS NtSuspendThread (HANDLE ThreadHandle, PULONG PreviousSuspendCount);\nNTSTATUS NtSystemDebugControl (SYSDBG_COMMAND Command, PVOID InputBuffer, ULONG InputBufferLength, PVOID OutputBuffer, ULONG OutputBufferLength, PULONG ReturnLength);\nNTSTATUS NtTerminateJobObject (HANDLE JobHandle, NTSTATUS ExitStatus);\nNTSTATUS NtTestAlert ();\nNTSTATUS NtThawRegistry ();\nNTSTATUS NtThawTransactions ();\nNTSTATUS NtTraceControl (ULONG FunctionCode, PVOID InBuffer, ULONG InBufferLen, PVOID OutBuffer, ULONG OutBufferLen, PULONG ReturnLength);\nNTSTATUS NtTranslateFilePath (PFILE_PATH InputFilePath, ULONG OutputType, PFILE_PATH OutputFilePath, PULONG OutputFilePathLength);\nNTSTATUS NtUmsThreadYield (PVOID SchedulerParam);\nNTSTATUS NtUnloadDriver (PUNICODE_STRING DriverServiceName);\nNTSTATUS NtUnloadKey (POBJECT_ATTRIBUTES TargetKey);\nNTSTATUS NtUnloadKey2 (POBJECT_ATTRIBUTES TargetKey, ULONG Flags);\nNTSTATUS NtUnloadKeyEx (POBJECT_ATTRIBUTES TargetKey, HANDLE Event);\nNTSTATUS NtUnlockFile (HANDLE FileHandle, PIO_STATUS_BLOCK IoStatusBlock, PLARGE_INTEGER ByteOffset, PLARGE_INTEGER Length, ULONG Key);\nNTSTATUS NtUnlockVirtualMemory (HANDLE ProcessHandle, PVOID *BaseAddress, PSIZE_T RegionSize, ULONG MapType);\nNTSTATUS NtVdmControl (VDMSERVICECLASS Service, PVOID ServiceData);\nNTSTATUS NtWaitForDebugEvent (HANDLE DebugObjectHandle, BOOLEAN Alertable, PLARGE_INTEGER Timeout, PDBGUI_WAIT_STATE_CHANGE WaitStateChange);\nNTSTATUS NtWaitForKeyedEvent (HANDLE KeyedEventHandle, PVOID KeyValue, BOOLEAN Alertable, PLARGE_INTEGER Timeout);\nNTSTATUS NtWaitForWorkViaWorkerFactory (HANDLE WorkerFactoryHandle, PFILE_IO_COMPLETION_INFORMATION MiniPacket);\nNTSTATUS NtWaitHighEventPair (HANDLE EventPairHandle);\nNTSTATUS NtWaitLowEventPair (HANDLE EventPairHandle);\n```\n\n----------------------------------------\n\nTITLE: Declaring File Control and Socket System Calls in C\nDESCRIPTION: This snippet declares system calls for file control (fcntl) and socket operations (socket, connect, bind). It includes function signatures with their respective parameters and return types.\nSOURCE: https://github.com/panda-re/panda-ng/blob/main/plugins/syscalls2/generated-in/freebsd_x64_prototypes.txt#_snippet_8\n\nLANGUAGE: C\nCODE:\n```\nint fcntl(int fd, int cmd, long arg);\nint select(int nd, fd_set *in, fd_set *ou, fd_set *ex, struct timeval *tv);\n\nint fsync(int fd);\nint setpriority(int which, int who, int prio);\nint socket(int domain, int type, int protocol);\nint connect(int s, const struct sockaddr *name, int namelen);\nint accept(int s, struct sockaddr *name, int *anamelen);\nint getpriority(int which, int who);\nint send(int s, const void *buf, int len, int flags);\nint recv(int s, void *buf, int len, int flags);\nint sigreturn(struct osigcontext *sigcntxp);\nint bind(int s, const struct sockaddr *name, int namelen);\nint setsockopt(int s, int level, int name, const void *val, int valsize);\nint listen(int s, int backlog);\n```\n\n----------------------------------------\n\nTITLE: Declaring Windows NT System Calls in C\nDESCRIPTION: This snippet contains declarations for multiple Windows NT system calls. These functions cover a wide range of system operations including thread management, file handling, security checks, and inter-process communication.\nSOURCE: https://github.com/panda-re/panda-ng/blob/main/plugins/syscalls2/generated-in/windows_8sp1_x64_prototypes.txt#_snippet_1\n\nLANGUAGE: C\nCODE:\n```\nNTSTATUS NtQueueApcThread (HANDLE ThreadHandle, PPS_APC_ROUTINE ApcRoutine, PVOID ApcArgument1, PVOID ApcArgument2, PVOID ApcArgument3);\nNTSTATUS NtYieldExecution ();\nNTSTATUS NtAddAtom (PWSTR AtomName, ULONG Length, PRTL_ATOM Atom);\nNTSTATUS NtCreateEvent (PHANDLE EventHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, EVENT_TYPE EventType, BOOLEAN InitialState);\nNTSTATUS NtQueryVolumeInformationFile (HANDLE FileHandle, PIO_STATUS_BLOCK IoStatusBlock, PVOID FsInformation, ULONG Length, FS_INFORMATION_CLASS FsInformationClass);\nNTSTATUS NtCreateSection (PHANDLE SectionHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, PLARGE_INTEGER MaximumSize, ULONG SectionPageProtection, ULONG AllocationAttributes, HANDLE FileHandle);\nNTSTATUS NtFlushBuffersFile (HANDLE FileHandle, PIO_STATUS_BLOCK IoStatusBlock);\nNTSTATUS NtApphelpCacheControl (APPHELPCOMMAND type, PVOID buf);\nNTSTATUS NtCreateProcessEx (PHANDLE ProcessHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, HANDLE ParentProcess, ULONG Flags, HANDLE SectionHandle, HANDLE DebugPort, HANDLE ExceptionPort, ULONG JobMemberLevel);\nNTSTATUS NtCreateThread (PHANDLE ThreadHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, HANDLE ProcessHandle, PCLIENT_ID ClientId, PCONTEXT ThreadContext, PINITIAL_TEB InitialTeb, BOOLEAN CreateSuspended);\nNTSTATUS NtIsProcessInJob (HANDLE ProcessHandle, HANDLE JobHandle);\nNTSTATUS NtProtectVirtualMemory (HANDLE ProcessHandle, PVOID *BaseAddress, PSIZE_T RegionSize, WIN32_PROTECTION_MASK NewProtectWin32, PULONG OldProtect);\nNTSTATUS NtQuerySection (HANDLE SectionHandle, SECTION_INFORMATION_CLASS SectionInformationClass, PVOID SectionInformation, SIZE_T SectionInformationLength, PSIZE_T ReturnLength);\nNTSTATUS NtResumeThread (HANDLE ThreadHandle, PULONG PreviousSuspendCount);\nNTSTATUS NtTerminateThread (HANDLE ThreadHandle, NTSTATUS ExitStatus);\nNTSTATUS NtReadRequestData (HANDLE PortHandle, PPORT_MESSAGE Message, ULONG DataEntryIndex, PVOID Buffer, SIZE_T BufferSize, PSIZE_T NumberOfBytesRead);\nNTSTATUS NtCreateFile (PHANDLE FileHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, PIO_STATUS_BLOCK IoStatusBlock, PLARGE_INTEGER AllocationSize, ULONG FileAttributes, ULONG ShareAccess, ULONG CreateDisposition, ULONG CreateOptions, PVOID EaBuffer, ULONG EaLength);\nNTSTATUS NtQueryEvent (HANDLE EventHandle, EVENT_INFORMATION_CLASS EventInformationClass, PVOID EventInformation, ULONG EventInformationLength, PULONG ReturnLength);\nNTSTATUS NtWriteRequestData (HANDLE PortHandle, PPORT_MESSAGE Message, ULONG DataEntryIndex, PVOID Buffer, SIZE_T BufferSize, PSIZE_T NumberOfBytesWritten);\nNTSTATUS NtOpenDirectoryObject (PHANDLE DirectoryHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes);\nNTSTATUS NtAccessCheckByTypeAndAuditAlarm (PUNICODE_STRING SubsystemName, PVOID HandleId, PUNICODE_STRING ObjectTypeName, PUNICODE_STRING ObjectName, PSECURITY_DESCRIPTOR SecurityDescriptor, PSID PrincipalSelfSid, ACCESS_MASK DesiredAccess, AUDIT_EVENT_TYPE AuditType, ULONG Flags, POBJECT_TYPE_LIST ObjectTypeList, ULONG ObjectTypeListLength, PGENERIC_MAPPING GenericMapping, BOOLEAN ObjectCreation, PACCESS_MASK GrantedAccess, PNTSTATUS AccessStatus, PBOOLEAN GenerateOnClose);\nNTSTATUS NtWaitForMultipleObjects (ULONG Count, HANDLE Handles[], WAIT_TYPE WaitType, BOOLEAN Alertable, PLARGE_INTEGER Timeout);\nNTSTATUS NtSetInformationObject (HANDLE Handle, OBJECT_INFORMATION_CLASS ObjectInformationClass, PVOID ObjectInformation, ULONG ObjectInformationLength);\nNTSTATUS NtCancelIoFile (HANDLE FileHandle, PIO_STATUS_BLOCK IoStatusBlock);\nNTSTATUS NtTraceEvent (HANDLE TraceHandle, ULONG Flags, ULONG FieldSize, PVOID Fields);\nNTSTATUS NtPowerInformation (POWER_INFORMATION_LEVEL InformationLevel, PVOID InputBuffer, ULONG InputBufferLength, PVOID OutputBuffer, ULONG OutputBufferLength);\nNTSTATUS NtSetValueKey (HANDLE KeyHandle, PUNICODE_STRING ValueName, ULONG TitleIndex, ULONG Type, PVOID Data, ULONG DataSize);\nNTSTATUS NtCancelTimer (HANDLE TimerHandle, PBOOLEAN CurrentState);\nNTSTATUS NtSetTimer (HANDLE TimerHandle, PLARGE_INTEGER DueTime, PTIMER_APC_ROUTINE TimerApcRoutine, PVOID TimerContext, BOOLEAN WakeTimer, LONG Period, PBOOLEAN PreviousState);\nNTSTATUS NtAccessCheck (PSECURITY_DESCRIPTOR SecurityDescriptor, HANDLE ClientToken, ACCESS_MASK DesiredAccess, PGENERIC_MAPPING GenericMapping, PPRIVILEGE_SET PrivilegeSet, PULONG PrivilegeSetLength, PACCESS_MASK GrantedAccess, PNTSTATUS AccessStatus);\nNTSTATUS NtAccessCheckByType (PSECURITY_DESCRIPTOR SecurityDescriptor, PSID PrincipalSelfSid, HANDLE ClientToken, ACCESS_MASK DesiredAccess, POBJECT_TYPE_LIST ObjectTypeList, ULONG ObjectTypeListLength, PGENERIC_MAPPING GenericMapping, PPRIVILEGE_SET PrivilegeSet, PULONG PrivilegeSetLength, PACCESS_MASK GrantedAccess, PNTSTATUS AccessStatus);\nNTSTATUS NtAccessCheckByTypeResultList (PSECURITY_DESCRIPTOR SecurityDescriptor, PSID PrincipalSelfSid, HANDLE ClientToken, ACCESS_MASK DesiredAccess, POBJECT_TYPE_LIST ObjectTypeList, ULONG ObjectTypeListLength, PGENERIC_MAPPING GenericMapping, PPRIVILEGE_SET PrivilegeSet, PULONG PrivilegeSetLength, PACCESS_MASK GrantedAccess, PNTSTATUS AccessStatus);\nNTSTATUS NtAccessCheckByTypeResultListAndAuditAlarm (PUNICODE_STRING SubsystemName, PVOID HandleId, PUNICODE_STRING ObjectTypeName, PUNICODE_STRING ObjectName, PSECURITY_DESCRIPTOR SecurityDescriptor, PSID PrincipalSelfSid, ACCESS_MASK DesiredAccess, AUDIT_EVENT_TYPE AuditType, ULONG Flags, POBJECT_TYPE_LIST ObjectTypeList, ULONG ObjectTypeListLength, PGENERIC_MAPPING GenericMapping, BOOLEAN ObjectCreation, PACCESS_MASK GrantedAccess, PNTSTATUS AccessStatus, PBOOLEAN GenerateOnClose);\nNTSTATUS NtAccessCheckByTypeResultListAndAuditAlarmByHandle (PUNICODE_STRING SubsystemName, PVOID HandleId, HANDLE ClientToken, PUNICODE_STRING ObjectTypeName, PUNICODE_STRING ObjectName, PSECURITY_DESCRIPTOR SecurityDescriptor, PSID PrincipalSelfSid, ACCESS_MASK DesiredAccess, AUDIT_EVENT_TYPE AuditType, ULONG Flags, POBJECT_TYPE_LIST ObjectTypeList, ULONG ObjectTypeListLength, PGENERIC_MAPPING GenericMapping, BOOLEAN ObjectCreation, PACCESS_MASK GrantedAccess, PNTSTATUS AccessStatus, PBOOLEAN GenerateOnClose);\nNTSTATUS NtAddBootEntry (PBOOT_ENTRY BootEntry, PULONG Id);\nNTSTATUS NtAddDriverEntry (PEFI_DRIVER_ENTRY DriverEntry, PULONG Id);\nNTSTATUS NtAdjustGroupsToken (HANDLE TokenHandle, BOOLEAN ResetToDefault, PTOKEN_GROUPS NewState, ULONG BufferLength, PTOKEN_GROUPS PreviousState, PULONG ReturnLength);\nNTSTATUS NtAlertResumeThread (HANDLE ThreadHandle, PULONG PreviousSuspendCount);\nNTSTATUS NtAlertThread (HANDLE ThreadHandle);\nNTSTATUS NtAllocateLocallyUniqueId (PLUID Luid);\nNTSTATUS NtAllocateReserveObject (PHANDLE MemoryReserveHandle, POBJECT_ATTRIBUTES ObjectAttributes, MEMORY_RESERVE_TYPE Type);\nNTSTATUS NtAllocateUserPhysicalPages (HANDLE ProcessHandle, PULONG_PTR NumberOfPages, PULONG_PTR UserPfnArray);\nNTSTATUS NtAllocateUuids (PULARGE_INTEGER Time, PULONG Range, PULONG Sequence, PCHAR Seed);\nNTSTATUS NtAlpcAcceptConnectPort (PHANDLE PortHandle, HANDLE ConnectionPortHandle, ULONG Flags, POBJECT_ATTRIBUTES ObjectAttributes, PALPC_PORT_ATTRIBUTES PortAttributes, PVOID PortContext, PPORT_MESSAGE ConnectionRequest, PALPC_MESSAGE_ATTRIBUTES ConnectionMessageAttributes, BOOLEAN AcceptConnection);\nNTSTATUS NtAlpcCancelMessage (HANDLE PortHandle, ULONG Flags, PALPC_CONTEXT_ATTR MessageContext);\nNTSTATUS NtAlpcConnectPort (PHANDLE PortHandle, PUNICODE_STRING PortName, POBJECT_ATTRIBUTES ObjectAttributes, PALPC_PORT_ATTRIBUTES PortAttributes, ULONG Flags, PSID RequiredServerSid, PPORT_MESSAGE ConnectionMessage, PULONG BufferLength, PALPC_MESSAGE_ATTRIBUTES OutMessageAttributes, PALPC_MESSAGE_ATTRIBUTES InMessageAttributes, PLARGE_INTEGER Timeout);\nNTSTATUS NtAlpcCreatePort (PHANDLE PortHandle, POBJECT_ATTRIBUTES ObjectAttributes, PALPC_PORT_ATTRIBUTES PortAttributes);\nNTSTATUS NtAlpcCreatePortSection (HANDLE PortHandle, ULONG Flags, HANDLE SectionHandle, SIZE_T SectionSize, PALPC_HANDLE AlpcSectionHandle, PSIZE_T ActualSectionSize);\nNTSTATUS NtAlpcCreateResourceReserve (HANDLE PortHandle, ULONG Flags, SIZE_T MessageSize, PALPC_HANDLE ResourceId);\nNTSTATUS NtAlpcCreateSectionView (HANDLE PortHandle, ULONG Flags, PALPC_DATA_VIEW_ATTR ViewAttributes);\nNTSTATUS NtAlpcCreateSecurityContext (HANDLE PortHandle, ULONG Flags, PALPC_SECURITY_ATTR SecurityAttribute);\nNTSTATUS NtAlpcDeletePortSection (HANDLE PortHandle, ULONG Flags, ALPC_HANDLE SectionHandle);\nNTSTATUS NtAlpcDeleteResourceReserve (HANDLE PortHandle, ULONG Flags, ALPC_HANDLE ResourceId);\nNTSTATUS NtAlpcDeleteSectionView (HANDLE PortHandle, ULONG Flags, PVOID ViewBase);\nNTSTATUS NtAlpcDeleteSecurityContext (HANDLE PortHandle, ULONG Flags, ALPC_HANDLE ContextHandle);\nNTSTATUS NtAlpcDisconnectPort (HANDLE PortHandle, ULONG Flags);\nNTSTATUS NtAlpcImpersonateClientOfPort (HANDLE PortHandle, PPORT_MESSAGE PortMessage, PVOID Reserved);\nNTSTATUS NtAlpcOpenSenderProcess (PHANDLE ProcessHandle, HANDLE PortHandle, PPORT_MESSAGE PortMessage, ULONG Flags, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes);\nNTSTATUS NtAlpcOpenSenderThread (PHANDLE ThreadHandle, HANDLE PortHandle, PPORT_MESSAGE PortMessage, ULONG Flags, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes);\nNTSTATUS NtAlpcQueryInformation (HANDLE PortHandle, ALPC_PORT_INFORMATION_CLASS PortInformationClass, PVOID PortInformation, ULONG Length, PULONG ReturnLength);\nNTSTATUS NtAlpcQueryInformationMessage (HANDLE PortHandle, PPORT_MESSAGE PortMessage, ALPC_MESSAGE_INFORMATION_CLASS MessageInformationClass, PVOID MessageInformation, ULONG Length, PULONG ReturnLength);\n```\n\n----------------------------------------\n\nTITLE: Defining Semaphore System Calls in C\nDESCRIPTION: This snippet defines system calls for kernel semaphore operations, including creation, manipulation, and destruction.\nSOURCE: https://github.com/panda-re/panda-ng/blob/main/plugins/syscalls2/generated-in/freebsd_x64_prototypes.txt#_snippet_31\n\nLANGUAGE: C\nCODE:\n```\nint ksem_close(semid_t id);\nint ksem_post(semid_t id);\nint ksem_wait(semid_t id);\nint ksem_trywait(semid_t id);\nint ksem_init(semid_t *idp, unsigned int value);\nint ksem_open(semid_t *idp, const char *name, int oflag, mode_t mode, unsigned int value);\nint ksem_unlink(const char *name);\nint ksem_getvalue(semid_t id, int *val);\nint ksem_destroy(semid_t id);\n```\n\n----------------------------------------\n\nTITLE: Declaring NT Native API Prototypes in C\nDESCRIPTION: This code snippet declares function prototypes for numerous NT Native API routines, enabling direct calls to Windows kernel operations from C code. No function bodies are provided; only signatures are presented, requiring the presence of corresponding typedefs and structures (such as HANDLE, NTSTATUS, PLARGE_INTEGER), typically from including standard Windows headers. All functions return an NTSTATUS value and take various parameters for operating on low-level resources like handles, files, transactions, and memory. These prototypes must be included in user-mode system applications or libraries that require direct access to the Windows NT subsystem.\nSOURCE: https://github.com/panda-re/panda-ng/blob/main/plugins/syscalls2/generated-in/windows_8sp1_x86_prototypes.txt#_snippet_1\n\nLANGUAGE: c\nCODE:\n```\n100 NTSTATUS NtSaveMergedKeys (HANDLE HighPrecedenceKeyHandle, HANDLE LowPrecedenceKeyHandle, HANDLE FileHandle);\n101 NTSTATUS NtSaveKeyEx (HANDLE KeyHandle, HANDLE FileHandle, ULONG Format);\n102 NTSTATUS NtSaveKey (HANDLE KeyHandle, HANDLE FileHandle);\n103 NTSTATUS NtRollforwardTransactionManager (HANDLE TransactionManagerHandle, PLARGE_INTEGER TmVirtualClock);\n104 NTSTATUS NtRollbackTransaction (HANDLE TransactionHandle, BOOLEAN Wait);\n105 NTSTATUS NtRollbackEnlistment (HANDLE EnlistmentHandle, PLARGE_INTEGER TmVirtualClock);\n106 NTSTATUS NtRollbackComplete (HANDLE EnlistmentHandle, PLARGE_INTEGER TmVirtualClock);\n107 NTSTATUS NtResumeThread (HANDLE ThreadHandle, PULONG PreviousSuspendCount);\n108 NTSTATUS NtResumeProcess (HANDLE ProcessHandle);\n109 NTSTATUS NtRestoreKey (HANDLE KeyHandle, HANDLE FileHandle, ULONG Flags);\n110 NTSTATUS NtResetWriteWatch (HANDLE ProcessHandle, PVOID BaseAddress, SIZE_T RegionSize);\n111 NTSTATUS NtResetEvent (HANDLE EventHandle, PLONG PreviousState);\n112 NTSTATUS NtRequestWaitReplyPort (HANDLE PortHandle, PPORT_MESSAGE RequestMessage, PPORT_MESSAGE ReplyMessage);\n113 NTSTATUS NtRequestPort (HANDLE PortHandle, PPORT_MESSAGE RequestMessage);\n114 NTSTATUS NtReplyWaitReplyPort (HANDLE PortHandle, PPORT_MESSAGE ReplyMessage);\n115 NTSTATUS NtReplyWaitReceivePortEx (HANDLE PortHandle, PVOID *PortContext, PPORT_MESSAGE ReplyMessage, PPORT_MESSAGE ReceiveMessage, PLARGE_INTEGER Timeout);\n116 NTSTATUS NtReplyWaitReceivePort (HANDLE PortHandle, PVOID *PortContext , PPORT_MESSAGE ReplyMessage, PPORT_MESSAGE ReceiveMessage);\n117 NTSTATUS NtReplyPort (HANDLE PortHandle, PPORT_MESSAGE ReplyMessage);\n118 NTSTATUS NtReplacePartitionUnit (PUNICODE_STRING TargetInstancePath, PUNICODE_STRING SpareInstancePath, ULONG Flags);\n119 NTSTATUS NtReplaceKey (POBJECT_ATTRIBUTES NewFile, HANDLE TargetHandle, POBJECT_ATTRIBUTES OldFile);\n120 NTSTATUS NtRenameTransactionManager (PUNICODE_STRING LogFileName, LPGUID ExistingTransactionManagerGuid);\n121 NTSTATUS NtRenameKey (HANDLE KeyHandle, PUNICODE_STRING NewName);\n122 NTSTATUS NtRemoveProcessDebug (HANDLE ProcessHandle, HANDLE DebugObjectHandle);\n123 NTSTATUS NtRemoveIoCompletionEx (HANDLE IoCompletionHandle, PFILE_IO_COMPLETION_INFORMATION IoCompletionInformation, ULONG Count, PULONG NumEntriesRemoved, PLARGE_INTEGER Timeout, BOOLEAN Alertable);\n124 NTSTATUS NtRemoveIoCompletion (HANDLE IoCompletionHandle, PVOID *KeyContext, PVOID *ApcContext, PIO_STATUS_BLOCK IoStatusBlock, PLARGE_INTEGER Timeout);\n125 NTSTATUS NtReleaseWorkerFactoryWorker (HANDLE WorkerFactoryHandle);\n126 NTSTATUS NtReleaseSemaphore (HANDLE SemaphoreHandle, LONG ReleaseCount, PLONG PreviousCount);\n127 NTSTATUS NtReleaseMutant (HANDLE MutantHandle, PLONG PreviousCount);\n128 NTSTATUS NtReleaseKeyedEvent (HANDLE KeyedEventHandle, PVOID KeyValue, BOOLEAN Alertable, PLARGE_INTEGER Timeout);\n129 NTSTATUS NtRegisterThreadTerminatePort (HANDLE PortHandle);\n130 NTSTATUS NtRegisterProtocolAddressInformation (HANDLE ResourceManager, PCRM_PROTOCOL_ID ProtocolId, ULONG ProtocolInformationSize, PVOID ProtocolInformation, ULONG CreateOptions);\n131 NTSTATUS NtRecoverTransactionManager (HANDLE TransactionManagerHandle);\n132 NTSTATUS NtRecoverResourceManager (HANDLE ResourceManagerHandle);\n133 NTSTATUS NtRecoverEnlistment (HANDLE EnlistmentHandle, PVOID EnlistmentKey);\n134 NTSTATUS NtReadVirtualMemory (HANDLE ProcessHandle, PVOID BaseAddress, PVOID Buffer, SIZE_T BufferSize, PSIZE_T NumberOfBytesRead);\n135 NTSTATUS NtReadRequestData (HANDLE PortHandle, PPORT_MESSAGE Message, ULONG DataEntryIndex, PVOID Buffer, SIZE_T BufferSize, PSIZE_T NumberOfBytesRead);\n136 NTSTATUS NtReadOnlyEnlistment (HANDLE EnlistmentHandle, PLARGE_INTEGER TmVirtualClock);\n137 NTSTATUS NtReadFileScatter (HANDLE FileHandle, HANDLE Event, PIO_APC_ROUTINE ApcRoutine, PVOID ApcContext, PIO_STATUS_BLOCK IoStatusBlock, PFILE_SEGMENT_ELEMENT SegmentArray, ULONG Length, PLARGE_INTEGER ByteOffset, PULONG Key);\n138 NTSTATUS NtReadFile (HANDLE FileHandle, HANDLE Event, PIO_APC_ROUTINE ApcRoutine, PVOID ApcContext, PIO_STATUS_BLOCK IoStatusBlock, PVOID Buffer, ULONG Length, PLARGE_INTEGER ByteOffset, PULONG Key);\n139 NTSTATUS NtRaiseHardError (NTSTATUS ErrorStatus, ULONG NumberOfParameters, ULONG UnicodeStringParameterMask, PULONG_PTR Parameters, ULONG ValidResponseOptions, PULONG Response);\n140 NTSTATUS NtRaiseException (PEXCEPTION_RECORD ExceptionRecord, PCONTEXT ContextRecord, BOOLEAN FirstChance);\n141 NTSTATUS NtQueueApcThreadEx (HANDLE ThreadHandle, HANDLE UserApcReserveHandle, PPS_APC_ROUTINE ApcRoutine, PVOID ApcArgument1, PVOID ApcArgument2, PVOID ApcArgument3);\n142 NTSTATUS NtQueueApcThread (HANDLE ThreadHandle, PPS_APC_ROUTINE ApcRoutine, PVOID ApcArgument1, PVOID ApcArgument2, PVOID ApcArgument3);\n145 NTSTATUS NtQueryVolumeInformationFile (HANDLE FileHandle, PIO_STATUS_BLOCK IoStatusBlock, PVOID FsInformation, ULONG Length, FS_INFORMATION_CLASS FsInformationClass);\n146 NTSTATUS NtQueryVirtualMemory (HANDLE ProcessHandle, PVOID BaseAddress, MEMORY_INFORMATION_CLASS MemoryInformationClass, PVOID MemoryInformation, SIZE_T MemoryInformationLength, PSIZE_T ReturnLength);\n147 NTSTATUS NtQueryValueKey (HANDLE KeyHandle, PUNICODE_STRING ValueName, KEY_VALUE_INFORMATION_CLASS KeyValueInformationClass, PVOID KeyValueInformation, ULONG Length, PULONG ResultLength);\n148 NTSTATUS NtQueryTimerResolution (PULONG MaximumTime, PULONG MinimumTime, PULONG CurrentTime);\n149 NTSTATUS NtQueryTimer (HANDLE TimerHandle, TIMER_INFORMATION_CLASS TimerInformationClass, PVOID TimerInformation, ULONG TimerInformationLength, PULONG ReturnLength);\n150 NTSTATUS NtQuerySystemTime (PLARGE_INTEGER SystemTime);\n151 NTSTATUS NtQuerySystemInformationEx (SYSTEM_INFORMATION_CLASS SystemInformationClass, PVOID QueryInformation, ULONG QueryInformationLength, PVOID SystemInformation, ULONG SystemInformationLength, PULONG ReturnLength);\n152 NTSTATUS NtQuerySystemInformation (SYSTEM_INFORMATION_CLASS SystemInformationClass, PVOID SystemInformation, ULONG SystemInformationLength, PULONG ReturnLength);\n153 NTSTATUS NtQuerySystemEnvironmentValueEx (PUNICODE_STRING VariableName, LPGUID VendorGuid, PVOID Value, PULONG ValueLength, PULONG Attributes);\n154 NTSTATUS NtQuerySystemEnvironmentValue (PUNICODE_STRING VariableName, PWSTR VariableValue, USHORT ValueLength, PUSHORT ReturnLength);\n155 NTSTATUS NtQuerySymbolicLinkObject (HANDLE LinkHandle, PUNICODE_STRING LinkTarget, PULONG ReturnedLength);\n156 NTSTATUS NtQuerySemaphore (HANDLE SemaphoreHandle, SEMAPHORE_INFORMATION_CLASS SemaphoreInformationClass, PVOID SemaphoreInformation, ULONG SemaphoreInformationLength, PULONG ReturnLength);\n157 NTSTATUS NtQuerySecurityObject (HANDLE Handle, SECURITY_INFORMATION SecurityInformation, PSECURITY_DESCRIPTOR SecurityDescriptor, ULONG Length, PULONG LengthNeeded);\n158 NTSTATUS NtQuerySecurityAttributesToken (HANDLE TokenHandle, PUNICODE_STRING Attributes, ULONG NumberOfAttributes, PVOID Buffer, ULONG Length, PULONG ReturnLength);\n159 NTSTATUS NtQuerySection (HANDLE SectionHandle, SECTION_INFORMATION_CLASS SectionInformationClass, PVOID SectionInformation, SIZE_T SectionInformationLength, PSIZE_T ReturnLength);\n160 NTSTATUS NtQueryQuotaInformationFile (HANDLE FileHandle, PIO_STATUS_BLOCK IoStatusBlock, PVOID Buffer, ULONG Length, BOOLEAN ReturnSingleEntry, PVOID SidList, ULONG SidListLength, PULONG StartSid, BOOLEAN RestartScan);\n161 NTSTATUS NtQueryPortInformationProcess ();\n162 NTSTATUS NtQueryPerformanceCounter (PLARGE_INTEGER PerformanceCounter, PLARGE_INTEGER PerformanceFrequency);\n163 NTSTATUS NtQueryOpenSubKeysEx (POBJECT_ATTRIBUTES TargetKey, ULONG BufferLength, PVOID Buffer, PULONG RequiredSize);\n164 NTSTATUS NtQueryOpenSubKeys (POBJECT_ATTRIBUTES TargetKey, PULONG HandleCount);\n165 NTSTATUS NtQueryObject (HANDLE Handle, OBJECT_INFORMATION_CLASS ObjectInformationClass, PVOID ObjectInformation, ULONG ObjectInformationLength, PULONG ReturnLength);\n166 NTSTATUS NtQueryMutant (HANDLE MutantHandle, MUTANT_INFORMATION_CLASS MutantInformationClass, PVOID MutantInformation, PULONG MutantInformationLength, PULONG ReturnLength);\n167 NTSTATUS NtQueryMultipleValueKey (HANDLE KeyHandle, PKEY_VALUE_ENTRY ValueEntries, ULONG EntryCount, PVOID ValueBuffer, PULONG BufferLength, PULONG RequiredBufferLength);\n168 NTSTATUS NtQueryLicenseValue (PUNICODE_STRING Name, PULONG Type, PVOID Buffer, ULONG Length, PULONG ReturnedLength);\n169 NTSTATUS NtQueryKey (HANDLE KeyHandle, KEY_INFORMATION_CLASS KeyInformationClass, PVOID KeyInformation, ULONG Length, PULONG ResultLength);\n170 NTSTATUS NtQueryIoCompletion (HANDLE IoCompletionHandle, IO_COMPLETION_INFORMATION_CLASS IoCompletionInformationClass, PVOID IoCompletionInformation, ULONG IoCompletionInformationLength, PULONG ReturnLength);\n171 NTSTATUS NtQueryIntervalProfile (KPROFILE_SOURCE ProfileSource, PULONG Interval);\n172 NTSTATUS NtQueryInstallUILanguage (LANGID *InstallUILanguageId);\n173 NTSTATUS NtQueryInformationWorkerFactory (HANDLE WorkerFactoryHandle, WORKERFACTORYINFOCLASS WorkerFactoryInformationClass, PVOID WorkerFactoryInformation, ULONG WorkerFactoryInformationLength, PULONG ReturnLength);\n174 NTSTATUS NtQueryInformationTransactionManager (HANDLE TransactionManagerHandle, TRANSACTIONMANAGER_INFORMATION_CLASS TransactionManagerInformationClass, PVOID TransactionManagerInformation, ULONG TransactionManagerInformationLength, PULONG ReturnLength);\n175 NTSTATUS NtQueryInformationTransaction (HANDLE TransactionHandle, TRANSACTION_INFORMATION_CLASS TransactionInformationClass, PVOID TransactionInformation, ULONG TransactionInformationLength, PULONG ReturnLength);\n176 NTSTATUS NtQueryInformationToken (HANDLE TokenHandle, TOKEN_INFORMATION_CLASS TokenInformationClass, PVOID TokenInformation, ULONG TokenInformationLength, PULONG ReturnLength);\n177 NTSTATUS NtQueryInformationThread (HANDLE ThreadHandle, THREADINFOCLASS ThreadInformationClass, PVOID ThreadInformation, ULONG ThreadInformationLength, PULONG ReturnLength);\n```\n\n----------------------------------------\n\nTITLE: Defining Signal Handling System Calls in C\nDESCRIPTION: This snippet defines system calls for signal handling, including mask manipulation, suspension, and information retrieval.\nSOURCE: https://github.com/panda-re/panda-ng/blob/main/plugins/syscalls2/generated-in/freebsd_x64_prototypes.txt#_snippet_25\n\nLANGUAGE: C\nCODE:\n```\nint nnpfs_syscall(int operation, char *a_pathP, int a_opcode, void *a_paramsP, int a_followSymlinks);\nint sigprocmask(int how, const sigset_t *set, sigset_t *oset);\nint sigsuspend(const sigset_t *sigmask);\nint sigaction(int sig, const struct sigaction *act, struct sigaction *oact);\nint sigpending(sigset_t *set);\nint sigreturn(const struct ucontext4 *sigcntxp);\nint sigtimedwait(const sigset_t *set, siginfo_t *info, const struct timespec *timeout);\nint sigwaitinfo(const sigset_t *set, siginfo_t *info);\n```\n\n----------------------------------------\n\nTITLE: Defining Asynchronous I/O System Calls in C\nDESCRIPTION: This snippet defines system calls for asynchronous I/O operations, including cancellation, error checking, and list I/O.\nSOURCE: https://github.com/panda-re/panda-ng/blob/main/plugins/syscalls2/generated-in/freebsd_x64_prototypes.txt#_snippet_22\n\nLANGUAGE: C\nCODE:\n```\nssize_t aio_return(struct aiocb *aiocbp);\nint aio_suspend(struct aiocb * const * aiocbp, int nent, const struct timespec *timeout);\nint aio_cancel(int fd, struct aiocb *aiocbp);\nint aio_error(struct aiocb *aiocbp);\nint aio_read( struct oaiocb *aiocbp);\nint aio_write(struct oaiocb *aiocbp);\nint lio_listio(int mode, struct oaiocb * const *acb_list, int nent, struct osigevent *sig);\nint yield(void);\n```\n\n----------------------------------------\n\nTITLE: Declaring Network and File System System Calls in C\nDESCRIPTION: This snippet declares system calls for network operations (nlm_syscall, nfssvc) and file system information retrieval (getdirentries, statfs). It includes function signatures with their respective parameters and return types.\nSOURCE: https://github.com/panda-re/panda-ng/blob/main/plugins/syscalls2/generated-in/freebsd_x64_prototypes.txt#_snippet_11\n\nLANGUAGE: C\nCODE:\n```\nint nlm_syscall(int debug_level, int grace_period, int addr_count, char **addrs);\nint nfssvc(int flag, void *argp);\nint getdirentries(int fd, char *buf, unsigned count, long *basep);\nint statfs(const char *path, struct ostatfs *buf);\nint fstatfs(int fd, struct ostatfs *buf);\n\nint lgetfh(const char *fname, struct fhandle *fhp);\nint getfh(const char *fname, struct fhandle *fhp);\nint getdomainname(char *domainname, int len);\nint setdomainname(char *domainname, int len);\nint uname(struct utsname *name);\nint sysarch(int op, char *parms);\nint rtprio(int function, pid_t pid, struct rtprio *rtp);\n```\n\n----------------------------------------\n\nTITLE: Modifying and Preparing Windows System and Transactional Entities - C\nDESCRIPTION: These functions define modification and preparation calls, including NtPrePrepareEnlistment, NtPrePrepareComplete, NtPrepareEnlistment, NtPrepareComplete, NtModifyDriverEntry, and NtModifyBootEntry. They are typically used for preparing or finalizing transactional operations, modifying boot or driver database entries, or signaling various transaction manager states. Accurate structure preparation and knowledge of transaction semantics are necessary for safe use; misuse could impact system stability.\nSOURCE: https://github.com/panda-re/panda-ng/blob/main/plugins/syscalls2/generated-in/windows_8sp1_x86_prototypes.txt#_snippet_5\n\nLANGUAGE: C\nCODE:\n```\nNTSTATUS NtPrePrepareEnlistment (HANDLE EnlistmentHandle, PLARGE_INTEGER TmVirtualClock);\n```\n\nLANGUAGE: C\nCODE:\n```\nNTSTATUS NtPrePrepareComplete (HANDLE EnlistmentHandle, PLARGE_INTEGER TmVirtualClock);\n```\n\nLANGUAGE: C\nCODE:\n```\nNTSTATUS NtPrepareEnlistment (HANDLE EnlistmentHandle, PLARGE_INTEGER TmVirtualClock);\n```\n\nLANGUAGE: C\nCODE:\n```\nNTSTATUS NtPrepareComplete (HANDLE EnlistmentHandle, PLARGE_INTEGER TmVirtualClock);\n```\n\nLANGUAGE: C\nCODE:\n```\nNTSTATUS NtModifyDriverEntry (PEFI_DRIVER_ENTRY DriverEntry);\n```\n\nLANGUAGE: C\nCODE:\n```\nNTSTATUS NtModifyBootEntry (PBOOT_ENTRY BootEntry);\n```\n\n----------------------------------------\n\nTITLE: Defining Extended Attribute System Calls in C\nDESCRIPTION: This snippet defines system calls for manipulating extended attributes on files and file descriptors.\nSOURCE: https://github.com/panda-re/panda-ng/blob/main/plugins/syscalls2/generated-in/freebsd_x64_prototypes.txt#_snippet_27\n\nLANGUAGE: C\nCODE:\n```\nint extattrctl(const char *path, int cmd, const char *filename, int attrnamespace, const char *attrname);\nssize_t extattr_set_file(const char *path, int attrnamespace, const char *attrname, void *data, size_t nbytes);\nssize_t extattr_get_file(const char *path, int attrnamespace, const char *attrname, void *data, size_t nbytes);\nint extattr_delete_file(const char *path, int attrnamespace, const char *attrname);\n```\n\n----------------------------------------\n\nTITLE: Defining MAC and Extended Attribute System Calls in C\nDESCRIPTION: This snippet defines system calls for Mandatory Access Control (MAC) operations on processes and files, as well as extended attribute operations on symbolic links.\nSOURCE: https://github.com/panda-re/panda-ng/blob/main/plugins/syscalls2/generated-in/freebsd_x64_prototypes.txt#_snippet_32\n\nLANGUAGE: C\nCODE:\n```\nint __mac_get_pid(pid_t pid, struct mac *mac_p);\nint __mac_get_link(const char *path_p, struct mac *mac_p);\nint __mac_set_link(const char *path_p, struct mac *mac_p);\nssize_t extattr_set_link(const char *path, int attrnamespace, const char *attrname, void *data, size_t nbytes);\nssize_t extattr_get_link(const char *path, int attrnamespace, const char *attrname, void *data, size_t nbytes);\nint extattr_delete_link(const char *path, int attrnamespace, const char *attrname);\nint __mac_execve(const char *fname, char **argv, char **envv, struct mac *mac_p);\nint sigaction(int sig, const struct sigaction *act, struct sigaction *oact);\nint sigreturn(const struct __ucontext *sigcntxp);\n```\n\n----------------------------------------\n\nTITLE: Defining Context and Thread Management System Calls in C\nDESCRIPTION: This snippet defines system calls for context switching, thread creation, and thread management operations.\nSOURCE: https://github.com/panda-re/panda-ng/blob/main/plugins/syscalls2/generated-in/freebsd_x64_prototypes.txt#_snippet_33\n\nLANGUAGE: C\nCODE:\n```\nint getcontext(struct __ucontext *ucp);\nint setcontext(const struct __ucontext *ucp);\nint swapcontext(struct __ucontext *oucp, const struct __ucontext *ucp);\nint swapoff(const char *name);\nint __acl_get_link(const char *path, acl_type_t type, struct acl *aclp);\nint __acl_set_link(const char *path, acl_type_t type, struct acl *aclp);\nint __acl_delete_link(const char *path, acl_type_t type);\nint __acl_aclcheck_link(const char *path, acl_type_t type, struct acl *aclp);\nint sigwait(const sigset_t *set, int *sig);\nint thr_create(ucontext_t *ctx, long *id, int flags);\nvoid thr_exit(long *state);\nint thr_self(long *id);\nint thr_kill(long id, int sig);\n```\n\n----------------------------------------\n\nTITLE: Resource/Transaction Management and Propagation Functions - C\nDESCRIPTION: These declarations cover specialized resource propagation and state signaling mechanisms via functions like NtPropagationFailed, NtPropagationComplete, and NtPulseEvent. Used mainly in transaction/resource manager modules, parameters typically require resource manager handles and context details. Care must be taken to synchronize such operations correctly to avoid undefined state transitions.\nSOURCE: https://github.com/panda-re/panda-ng/blob/main/plugins/syscalls2/generated-in/windows_8sp1_x86_prototypes.txt#_snippet_8\n\nLANGUAGE: C\nCODE:\n```\nNTSTATUS NtPulseEvent (HANDLE EventHandle, PLONG PreviousState);\n```\n\nLANGUAGE: C\nCODE:\n```\nNTSTATUS NtPropagationFailed (HANDLE ResourceManagerHandle, ULONG RequestCookie, NTSTATUS PropStatus);\n```\n\nLANGUAGE: C\nCODE:\n```\nNTSTATUS NtPropagationComplete (HANDLE ResourceManagerHandle, ULONG RequestCookie, ULONG BufferLength, PVOID Buffer);\n```\n\n----------------------------------------\n\nTITLE: Declaring Login and Account Management System Calls in C\nDESCRIPTION: This snippet declares system calls for login and account management (getlogin, setlogin, acct). It includes function signatures with their respective parameters and return types.\nSOURCE: https://github.com/panda-re/panda-ng/blob/main/plugins/syscalls2/generated-in/freebsd_x64_prototypes.txt#_snippet_4\n\nLANGUAGE: C\nCODE:\n```\nint getlogin(char *namebuf, unsigned namelen);\nint setlogin(const char *namebuf);\nint acct(const char *path);\n```\n\n----------------------------------------\n\nTITLE: Defining SCTP-related System Calls in C\nDESCRIPTION: This snippet defines system calls for Stream Control Transmission Protocol (SCTP) operations, including association extraction and message sending.\nSOURCE: https://github.com/panda-re/panda-ng/blob/main/plugins/syscalls2/generated-in/freebsd_x64_prototypes.txt#_snippet_40\n\nLANGUAGE: C\nCODE:\n```\nint sctp_peeloff(int sd, uint32_t name);\nint sctp_generic_sendmsg(int sd, void *msg, int mlen, struct sockaddr *to, __socklen_t tolen, struct sctp_sndrcvinfo *sinfo, int flags);\nint sctp_generic_sendmsg_iov(int sd, struct iovec *iov, int iovlen, struct sockaddr *to, __socklen_t tolen, struct sctp_sndrcvinfo *sinfo, int flags);\n```\n\n----------------------------------------\n\nTITLE: NT File System API Functions\nDESCRIPTION: System calls for file operations including creation, querying, and management of files and directories.\nSOURCE: https://github.com/panda-re/panda-ng/blob/main/plugins/syscalls2/generated-in/windows_vistasp0_x64_prototypes.txt#_snippet_5\n\nLANGUAGE: C\nCODE:\n```\nNTSTATUS NtCreateFile (PHANDLE FileHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, PIO_STATUS_BLOCK IoStatusBlock, PLARGE_INTEGER AllocationSize, ULONG FileAttributes, ULONG ShareAccess, ULONG CreateDisposition, ULONG CreateOptions, PVOID EaBuffer, ULONG EaLength);\nNTSTATUS NtQueryVolumeInformationFile (HANDLE FileHandle, PIO_STATUS_BLOCK IoStatusBlock, PVOID FsInformation, ULONG Length, FS_INFORMATION_CLASS FsInformationClass);\nNTSTATUS NtFlushBuffersFile (HANDLE FileHandle, PIO_STATUS_BLOCK IoStatusBlock);\n```\n\n----------------------------------------\n\nTITLE: Defining Miscellaneous System Calls in C (Part 3)\nDESCRIPTION: This snippet defines various system calls including process abortion, thread naming, asynchronous I/O synchronization, and real-time priority operations.\nSOURCE: https://github.com/panda-re/panda-ng/blob/main/plugins/syscalls2/generated-in/freebsd_x64_prototypes.txt#_snippet_39\n\nLANGUAGE: C\nCODE:\n```\nint abort2(const char *why, int nargs, void **args);\nint thr_set_name(long id, const char *name);\nint aio_fsync(int op, struct aiocb *aiocbp);\nint rtprio_thread(int function, lwpid_t lwpid, struct rtprio *rtp);\n```\n\n----------------------------------------\n\nTITLE: Windows NT Power Management Function Declarations in C\nDESCRIPTION: Function signatures for NT API calls related to power management, including querying device power states and initiating power actions.\nSOURCE: https://github.com/panda-re/panda-ng/blob/main/plugins/syscalls2/generated-in/all_windows_prototypes.txt#_snippet_8\n\nLANGUAGE: C\nCODE:\n```\nNTSTATUS NtGetDevicePowerState (HANDLE Device, DEVICE_POWER_STATE *State);\n```\n\nLANGUAGE: C\nCODE:\n```\nNTSTATUS NtInitiatePowerAction (POWER_ACTION SystemAction, SYSTEM_POWER_STATE MinSystemState, ULONG Flags, BOOLEAN Asynchronous);\n```\n\nLANGUAGE: C\nCODE:\n```\nNTSTATUS NtPowerInformation (POWER_INFORMATION_LEVEL InformationLevel, PVOID InputBuffer, ULONG InputBufferLength, PVOID OutputBuffer, ULONG OutputBufferLength);\n```\n\nLANGUAGE: C\nCODE:\n```\nBOOLEAN NtIsSystemResumeAutomatic ();\n```\n\n----------------------------------------\n\nTITLE: Windows NT System Information Function Declarations (C)\nDESCRIPTION: Declarations for NT API functions that query various system information, including environment variables, system time, and performance counters. These functions provide access to low-level system configuration and state information.\nSOURCE: https://github.com/panda-re/panda-ng/blob/main/plugins/syscalls2/generated-in/windows_vistasp0_x86_prototypes.txt#_snippet_12\n\nLANGUAGE: C\nCODE:\n```\nNTSTATUS NtQuerySystemEnvironmentValue (PUNICODE_STRING VariableName, PWSTR VariableValue, USHORT ValueLength, PUSHORT ReturnLength);\nNTSTATUS NtQuerySystemEnvironmentValueEx (PUNICODE_STRING VariableName, LPGUID VendorGuid, PVOID Value, PULONG ValueLength, PULONG Attributes);\nNTSTATUS NtQuerySystemInformation (SYSTEM_INFORMATION_CLASS SystemInformationClass, PVOID SystemInformation, ULONG SystemInformationLength, PULONG ReturnLength);\nNTSTATUS NtQuerySystemTime (PLARGE_INTEGER SystemTime);\nNTSTATUS NtQueryPerformanceCounter (PLARGE_INTEGER PerformanceCounter, PLARGE_INTEGER PerformanceFrequency);\nNTSTATUS NtQueryTimerResolution (PULONG MaximumTime, PULONG MinimumTime, PULONG CurrentTime);\n```\n\n----------------------------------------\n\nTITLE: Declaring Windows NT System Calls in C\nDESCRIPTION: This snippet contains multiple function declarations for Windows NT system calls. These functions are used for querying and manipulating various system objects, managing transactions, and interacting with system resources.\nSOURCE: https://github.com/panda-re/panda-ng/blob/main/plugins/syscalls2/generated-in/windows_8sp0_x64_prototypes.txt#_snippet_4\n\nLANGUAGE: C\nCODE:\n```\nNTSTATUS NtQueryInformationTransaction (HANDLE TransactionHandle, TRANSACTION_INFORMATION_CLASS TransactionInformationClass, PVOID TransactionInformation, ULONG TransactionInformationLength, PULONG ReturnLength);\nNTSTATUS NtQueryInformationTransactionManager (HANDLE TransactionManagerHandle, TRANSACTIONMANAGER_INFORMATION_CLASS TransactionManagerInformationClass, PVOID TransactionManagerInformation, ULONG TransactionManagerInformationLength, PULONG ReturnLength);\nNTSTATUS NtQueryInformationWorkerFactory (HANDLE WorkerFactoryHandle, WORKERFACTORYINFOCLASS WorkerFactoryInformationClass, PVOID WorkerFactoryInformation, ULONG WorkerFactoryInformationLength, PULONG ReturnLength);\nNTSTATUS NtQueryInstallUILanguage (LANGID *InstallUILanguageId);\nNTSTATUS NtQueryIntervalProfile (KPROFILE_SOURCE ProfileSource, PULONG Interval);\nNTSTATUS NtQueryIoCompletion (HANDLE IoCompletionHandle, IO_COMPLETION_INFORMATION_CLASS IoCompletionInformationClass, PVOID IoCompletionInformation, ULONG IoCompletionInformationLength, PULONG ReturnLength);\nNTSTATUS NtQueryLicenseValue (PUNICODE_STRING Name, PULONG Type, PVOID Buffer, ULONG Length, PULONG ReturnedLength);\nNTSTATUS NtQueryMultipleValueKey (HANDLE KeyHandle, PKEY_VALUE_ENTRY ValueEntries, ULONG EntryCount, PVOID ValueBuffer, PULONG BufferLength, PULONG RequiredBufferLength);\nNTSTATUS NtQueryMutant (HANDLE MutantHandle, MUTANT_INFORMATION_CLASS MutantInformationClass, PVOID MutantInformation, ULONG MutantInformationLength, PULONG ReturnLength);\nNTSTATUS NtQueryOpenSubKeys (POBJECT_ATTRIBUTES TargetKey, PULONG HandleCount);\nNTSTATUS NtQueryOpenSubKeysEx (POBJECT_ATTRIBUTES TargetKey, ULONG BufferLength, PVOID Buffer, PULONG RequiredSize);\nNTSTATUS NtQueryPortInformationProcess ();\nNTSTATUS NtQueryQuotaInformationFile (HANDLE FileHandle, PIO_STATUS_BLOCK IoStatusBlock, PVOID Buffer, ULONG Length, BOOLEAN ReturnSingleEntry, PVOID SidList, ULONG SidListLength, PULONG StartSid, BOOLEAN RestartScan);\nNTSTATUS NtQuerySecurityAttributesToken (HANDLE TokenHandle, PUNICODE_STRING Attributes, ULONG NumberOfAttributes, PVOID Buffer, ULONG Length, PULONG ReturnLength);\nNTSTATUS NtQuerySecurityObject (HANDLE Handle, SECURITY_INFORMATION SecurityInformation, PSECURITY_DESCRIPTOR SecurityDescriptor, ULONG Length, PULONG LengthNeeded);\nNTSTATUS NtQuerySemaphore (HANDLE SemaphoreHandle, SEMAPHORE_INFORMATION_CLASS SemaphoreInformationClass, PVOID SemaphoreInformation, ULONG SemaphoreInformationLength, PULONG ReturnLength);\nNTSTATUS NtQuerySymbolicLinkObject (HANDLE LinkHandle, PUNICODE_STRING LinkTarget, PULONG ReturnedLength);\nNTSTATUS NtQuerySystemEnvironmentValue (PUNICODE_STRING VariableName, PWSTR VariableValue, USHORT ValueLength, PUSHORT ReturnLength);\nNTSTATUS NtQuerySystemEnvironmentValueEx (PUNICODE_STRING VariableName, LPGUID VendorGuid, PVOID Value, PULONG ValueLength, PULONG Attributes);\nNTSTATUS NtQuerySystemInformationEx (SYSTEM_INFORMATION_CLASS SystemInformationClass, PVOID QueryInformation, ULONG QueryInformationLength, PVOID SystemInformation, ULONG SystemInformationLength, PULONG ReturnLength);\nNTSTATUS NtQueryTimerResolution (PULONG MaximumTime, PULONG MinimumTime, PULONG CurrentTime);\nNTSTATUS NtQueueApcThreadEx (HANDLE ThreadHandle, HANDLE UserApcReserveHandle, PPS_APC_ROUTINE ApcRoutine, PVOID ApcArgument1, PVOID ApcArgument2, PVOID ApcArgument3);\nNTSTATUS NtRaiseException (PEXCEPTION_RECORD ExceptionRecord, PCONTEXT ContextRecord, BOOLEAN FirstChance);\nNTSTATUS NtRaiseHardError (NTSTATUS ErrorStatus, ULONG NumberOfParameters, ULONG UnicodeStringParameterMask, PULONG_PTR Parameters, ULONG ValidResponseOptions, PULONG Response);\nNTSTATUS NtReadOnlyEnlistment (HANDLE EnlistmentHandle, PLARGE_INTEGER TmVirtualClock);\nNTSTATUS NtRecoverEnlistment (HANDLE EnlistmentHandle, PVOID EnlistmentKey);\nNTSTATUS NtRecoverResourceManager (HANDLE ResourceManagerHandle);\nNTSTATUS NtRecoverTransactionManager (HANDLE TransactionManagerHandle);\nNTSTATUS NtRegisterProtocolAddressInformation (HANDLE ResourceManager, PCRM_PROTOCOL_ID ProtocolId, ULONG ProtocolInformationSize, PVOID ProtocolInformation, ULONG CreateOptions);\nNTSTATUS NtRegisterThreadTerminatePort (HANDLE PortHandle);\nNTSTATUS NtReleaseKeyedEvent (HANDLE KeyedEventHandle, PVOID KeyValue, BOOLEAN Alertable, PLARGE_INTEGER Timeout);\nNTSTATUS NtReleaseWorkerFactoryWorker (HANDLE WorkerFactoryHandle);\nNTSTATUS NtRemoveIoCompletionEx (HANDLE IoCompletionHandle, PFILE_IO_COMPLETION_INFORMATION IoCompletionInformation, ULONG Count, PULONG NumEntriesRemoved, PLARGE_INTEGER Timeout, BOOLEAN Alertable);\nNTSTATUS NtRemoveProcessDebug (HANDLE ProcessHandle, HANDLE DebugObjectHandle);\nNTSTATUS NtRenameKey (HANDLE KeyHandle, PUNICODE_STRING NewName);\nNTSTATUS NtRenameTransactionManager (PUNICODE_STRING LogFileName, LPGUID ExistingTransactionManagerGuid);\nNTSTATUS NtReplaceKey (POBJECT_ATTRIBUTES NewFile, HANDLE TargetHandle, POBJECT_ATTRIBUTES OldFile);\nNTSTATUS NtReplacePartitionUnit (PUNICODE_STRING TargetInstancePath, PUNICODE_STRING SpareInstancePath, ULONG Flags);\nNTSTATUS NtReplyWaitReplyPort (HANDLE PortHandle, PPORT_MESSAGE ReplyMessage);\nNTSTATUS NtRequestPort (HANDLE PortHandle, PPORT_MESSAGE RequestMessage);\nNTSTATUS NtResetEvent (HANDLE EventHandle, PLONG PreviousState);\nNTSTATUS NtResetWriteWatch (HANDLE ProcessHandle, PVOID BaseAddress, SIZE_T RegionSize);\nNTSTATUS NtRestoreKey (HANDLE KeyHandle, HANDLE FileHandle, ULONG Flags);\nNTSTATUS NtResumeProcess (HANDLE ProcessHandle);\nNTSTATUS NtRollbackComplete (HANDLE EnlistmentHandle, PLARGE_INTEGER TmVirtualClock);\nNTSTATUS NtRollbackEnlistment (HANDLE EnlistmentHandle, PLARGE_INTEGER TmVirtualClock);\nNTSTATUS NtRollbackTransaction (HANDLE TransactionHandle, BOOLEAN Wait);\nNTSTATUS NtRollforwardTransactionManager (HANDLE TransactionManagerHandle, PLARGE_INTEGER TmVirtualClock);\nNTSTATUS NtSaveKey (HANDLE KeyHandle, HANDLE FileHandle);\nNTSTATUS NtSaveKeyEx (HANDLE KeyHandle, HANDLE FileHandle, ULONG Format);\nNTSTATUS NtSaveMergedKeys (HANDLE HighPrecedenceKeyHandle, HANDLE LowPrecedenceKeyHandle, HANDLE FileHandle);\nNTSTATUS NtSecureConnectPort (PHANDLE PortHandle, PUNICODE_STRING PortName, PSECURITY_QUALITY_OF_SERVICE SecurityQos, PPORT_VIEW ClientView, PSID RequiredServerSid, PREMOTE_PORT_VIEW ServerView, PULONG MaxMessageLength, PVOID ConnectionInformation, PULONG ConnectionInformationLength);\nNTSTATUS NtSerializeBoot ();\nNTSTATUS NtSetBootEntryOrder (PULONG Ids, ULONG Count);\nNTSTATUS NtSetBootOptions (PBOOT_OPTIONS BootOptions, ULONG FieldsToChange);\nNTSTATUS NtSetContextThread (HANDLE ThreadHandle, PCONTEXT ThreadContext);\nNTSTATUS NtSetDebugFilterState (ULONG ComponentId, ULONG Level, BOOLEAN State);\nNTSTATUS NtSetDefaultHardErrorPort (HANDLE DefaultHardErrorPort);\nNTSTATUS NtSetDefaultLocale (BOOLEAN UserProfile, LCID DefaultLocaleId);\nNTSTATUS NtSetDefaultUILanguage (LANGID DefaultUILanguageId);\nNTSTATUS NtSetDriverEntryOrder (PULONG Ids, ULONG Count);\nNTSTATUS NtSetEaFile (HANDLE FileHandle, PIO_STATUS_BLOCK IoStatusBlock, PVOID Buffer, ULONG Length);\nNTSTATUS NtSetHighEventPair (HANDLE EventPairHandle);\nNTSTATUS NtSetHighWaitLowEventPair (HANDLE EventPairHandle);\nNTSTATUS NtSetInformationDebugObject (HANDLE DebugObjectHandle, DEBUGOBJECTINFOCLASS DebugObjectInformationClass, PVOID DebugInformation, ULONG DebugInformationLength, PULONG ReturnLength);\nNTSTATUS NtSetInformationEnlistment (HANDLE EnlistmentHandle, ENLISTMENT_INFORMATION_CLASS EnlistmentInformationClass, PVOID EnlistmentInformation, ULONG EnlistmentInformationLength);\nNTSTATUS NtSetInformationJobObject (HANDLE JobHandle, JOBOBJECTINFOCLASS JobObjectInformationClass, PVOID JobObjectInformation, ULONG JobObjectInformationLength);\nNTSTATUS NtSetInformationKey (HANDLE KeyHandle, KEY_SET_INFORMATION_CLASS KeySetInformationClass, PVOID KeySetInformation, ULONG KeySetInformationLength);\nNTSTATUS NtSetInformationResourceManager (HANDLE ResourceManagerHandle, RESOURCEMANAGER_INFORMATION_CLASS ResourceManagerInformationClass, PVOID ResourceManagerInformation, ULONG ResourceManagerInformationLength);\nNTSTATUS NtSetInformationToken (HANDLE TokenHandle, TOKEN_INFORMATION_CLASS TokenInformationClass, PVOID TokenInformation, ULONG TokenInformationLength);\nNTSTATUS NtSetInformationTransaction (HANDLE TransactionHandle, TRANSACTION_INFORMATION_CLASS TransactionInformationClass, PVOID TransactionInformation, ULONG TransactionInformationLength);\nNTSTATUS NtSetInformationTransactionManager (HANDLE TmHandle, TRANSACTIONMANAGER_INFORMATION_CLASS TransactionManagerInformationClass, PVOID TransactionManagerInformation, ULONG TransactionManagerInformationLength);\nNTSTATUS NtSetInformationWorkerFactory (HANDLE WorkerFactoryHandle, WORKERFACTORYINFOCLASS WorkerFactoryInformationClass, PVOID WorkerFactoryInformation, ULONG WorkerFactoryInformationLength);\nNTSTATUS NtSetIntervalProfile (ULONG Interval, KPROFILE_SOURCE Source);\nNTSTATUS NtSetIoCompletion (HANDLE IoCompletionHandle, PVOID KeyContext, PVOID ApcContext, NTSTATUS IoStatus, ULONG_PTR IoStatusInformation);\nNTSTATUS NtSetIoCompletionEx (HANDLE IoCompletionHandle, HANDLE IoCompletionReserveHandle, PVOID KeyContext, PVOID ApcContext, NTSTATUS IoStatus, ULONG_PTR IoStatusInformation);\nNTSTATUS NtSetLdtEntries (ULONG Selector0, ULONG Entry0Low, ULONG Entry0Hi, ULONG Selector1, ULONG Entry1Low, ULONG Entry1Hi);\nNTSTATUS NtSetLowEventPair (HANDLE EventPairHandle);\nNTSTATUS NtSetLowWaitHighEventPair (HANDLE EventPairHandle);\nNTSTATUS NtSetQuotaInformationFile (HANDLE FileHandle, PIO_STATUS_BLOCK IoStatusBlock, PVOID Buffer, ULONG Length);\nNTSTATUS NtSetSecurityObject (HANDLE Handle, SECURITY_INFORMATION SecurityInformation, PSECURITY_DESCRIPTOR SecurityDescriptor);\n```\n\n----------------------------------------\n\nTITLE: Windows NT API Function Declarations\nDESCRIPTION: Function declarations for Windows NT native API calls (ntdll.dll) that provide low-level system operations. These functions are typically used by the Windows subsystem and privileged applications.\nSOURCE: https://github.com/panda-re/panda-ng/blob/main/plugins/syscalls2/generated-in/windows_2000_x86_prototypes.txt#_snippet_1\n\nLANGUAGE: C\nCODE:\n```\nNTSTATUS NtDuplicateToken (HANDLE ExistingTokenHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, BOOLEAN EffectiveOnly, TOKEN_TYPE TokenType, PHANDLE NewTokenHandle);\nNTSTATUS NtEnumerateKey (HANDLE KeyHandle, ULONG Index, KEY_INFORMATION_CLASS KeyInformationClass, PVOID KeyInformation, ULONG Length, PULONG ResultLength);\nNTSTATUS NtEnumerateValueKey (HANDLE KeyHandle, ULONG Index, KEY_VALUE_INFORMATION_CLASS KeyValueInformationClass, PVOID KeyValueInformation, ULONG Length, PULONG ResultLength);\nNTSTATUS NtExtendSection (HANDLE SectionHandle, PLARGE_INTEGER NewSectionSize);\nNTSTATUS NtFilterToken (HANDLE ExistingTokenHandle, ULONG Flags, PTOKEN_GROUPS SidsToDisable, PTOKEN_PRIVILEGES PrivilegesToDelete, PTOKEN_GROUPS RestrictedSids, PHANDLE NewTokenHandle);\nNTSTATUS NtFindAtom (PWSTR AtomName, ULONG Length, PRTL_ATOM Atom);\nNTSTATUS NtFlushBuffersFile (HANDLE FileHandle, PIO_STATUS_BLOCK IoStatusBlock);\nNTSTATUS NtFlushInstructionCache (HANDLE ProcessHandle, PVOID BaseAddress, SIZE_T Length);\nNTSTATUS NtFlushKey (HANDLE KeyHandle);\nNTSTATUS NtFlushVirtualMemory (HANDLE ProcessHandle, PVOID *BaseAddress, PSIZE_T RegionSize, PIO_STATUS_BLOCK IoStatus);\nNTSTATUS NtFlushWriteBuffer ();\nNTSTATUS NtFreeUserPhysicalPages (HANDLE ProcessHandle, PULONG_PTR NumberOfPages, PULONG_PTR UserPfnArray);\nNTSTATUS NtFreeVirtualMemory (HANDLE ProcessHandle, PVOID *BaseAddress, PSIZE_T RegionSize, ULONG FreeType);\nNTSTATUS NtFsControlFile (HANDLE FileHandle, HANDLE Event, PIO_APC_ROUTINE ApcRoutine, PVOID ApcContext, PIO_STATUS_BLOCK IoStatusBlock, ULONG IoControlCode, PVOID InputBuffer, ULONG InputBufferLength, PVOID OutputBuffer, ULONG OutputBufferLength);\nNTSTATUS NtGetContextThread (HANDLE ThreadHandle, PCONTEXT ThreadContext);\nNTSTATUS NtGetDevicePowerState (HANDLE Device, DEVICE_POWER_STATE *State);\nNTSTATUS NtGetPlugPlayEvent (HANDLE EventHandle, PVOID Context, PPLUGPLAY_EVENT_BLOCK EventBlock, ULONG EventBufferSize);\nNTSTATUS NtGetWriteWatch (HANDLE ProcessHandle, ULONG Flags, PVOID BaseAddress, SIZE_T RegionSize, PVOID *UserAddressArray, PULONG_PTR EntriesInUserAddressArray, PULONG Granularity);\nNTSTATUS NtImpersonateAnonymousToken (HANDLE ThreadHandle);\nNTSTATUS NtImpersonateClientOfPort (HANDLE PortHandle, PPORT_MESSAGE Message);\nNTSTATUS NtImpersonateThread (HANDLE ServerThreadHandle, HANDLE ClientThreadHandle, PSECURITY_QUALITY_OF_SERVICE SecurityQos);\nNTSTATUS NtInitializeRegistry (USHORT BootCondition);\nNTSTATUS NtInitiatePowerAction (POWER_ACTION SystemAction, SYSTEM_POWER_STATE MinSystemState, ULONG Flags, BOOLEAN Asynchronous);\nBOOLEAN NtIsSystemResumeAutomatic ();\nNTSTATUS NtListenPort (HANDLE PortHandle, PPORT_MESSAGE ConnectionRequest);\nNTSTATUS NtLoadDriver (PUNICODE_STRING DriverServiceName);\nNTSTATUS NtLoadKey (POBJECT_ATTRIBUTES TargetKey, POBJECT_ATTRIBUTES SourceFile);\nNTSTATUS NtLoadKey2 (POBJECT_ATTRIBUTES TargetKey, POBJECT_ATTRIBUTES SourceFile, ULONG Flags);\nNTSTATUS NtLockFile (HANDLE FileHandle, HANDLE Event, PIO_APC_ROUTINE ApcRoutine, PVOID ApcContext, PIO_STATUS_BLOCK IoStatusBlock, PLARGE_INTEGER ByteOffset, PLARGE_INTEGER Length, ULONG Key, BOOLEAN FailImmediately, BOOLEAN ExclusiveLock);\nNTSTATUS NtLockVirtualMemory (HANDLE ProcessHandle, PVOID *BaseAddress, PSIZE_T RegionSize, ULONG MapType);\nNTSTATUS NtMakeTemporaryObject (HANDLE Handle);\nNTSTATUS NtMapUserPhysicalPages (PVOID VirtualAddress, ULONG_PTR NumberOfPages, PULONG_PTR UserPfnArray);\nNTSTATUS NtMapUserPhysicalPagesScatter (PVOID *VirtualAddresses, ULONG_PTR NumberOfPages, PULONG_PTR UserPfnArray);\nNTSTATUS NtMapViewOfSection (HANDLE SectionHandle, HANDLE ProcessHandle, PVOID *BaseAddress, ULONG_PTR ZeroBits, SIZE_T CommitSize, PLARGE_INTEGER SectionOffset, PSIZE_T ViewSize, SECTION_INHERIT InheritDisposition, ULONG AllocationType, WIN32_PROTECTION_MASK Win32Protect);\nNTSTATUS NtNotifyChangeDirectoryFile (HANDLE FileHandle, HANDLE Event, PIO_APC_ROUTINE ApcRoutine, PVOID ApcContext, PIO_STATUS_BLOCK IoStatusBlock, PVOID Buffer, ULONG Length, ULONG CompletionFilter, BOOLEAN WatchTree);\nNTSTATUS NtNotifyChangeKey (HANDLE KeyHandle, HANDLE Event, PIO_APC_ROUTINE ApcRoutine, PVOID ApcContext, PIO_STATUS_BLOCK IoStatusBlock, ULONG CompletionFilter, BOOLEAN WatchTree, PVOID Buffer, ULONG BufferSize, BOOLEAN Asynchronous);\nNTSTATUS NtNotifyChangeMultipleKeys (HANDLE MasterKeyHandle, ULONG Count, OBJECT_ATTRIBUTES SlaveObjects[], HANDLE Event, PIO_APC_ROUTINE ApcRoutine, PVOID ApcContext, PIO_STATUS_BLOCK IoStatusBlock, ULONG CompletionFilter, BOOLEAN WatchTree, PVOID Buffer, ULONG BufferSize, BOOLEAN Asynchronous);\nNTSTATUS NtOpenDirectoryObject (PHANDLE DirectoryHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes);\nNTSTATUS NtOpenEvent (PHANDLE EventHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes);\nNTSTATUS NtOpenEventPair (PHANDLE EventPairHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes);\nNTSTATUS NtOpenFile (PHANDLE FileHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, PIO_STATUS_BLOCK IoStatusBlock, ULONG ShareAccess, ULONG OpenOptions);\nNTSTATUS NtOpenIoCompletion (PHANDLE IoCompletionHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes);\nNTSTATUS NtOpenJobObject (PHANDLE JobHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes);\nNTSTATUS NtOpenKey (PHANDLE KeyHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes);\nNTSTATUS NtOpenMutant (PHANDLE MutantHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes);\nNTSTATUS NtOpenObjectAuditAlarm (PUNICODE_STRING SubsystemName, PVOID HandleId, PUNICODE_STRING ObjectTypeName, PUNICODE_STRING ObjectName, PSECURITY_DESCRIPTOR SecurityDescriptor, HANDLE ClientToken, ACCESS_MASK DesiredAccess, ACCESS_MASK GrantedAccess, PPRIVILEGE_SET Privileges, BOOLEAN ObjectCreation, BOOLEAN AccessGranted, PBOOLEAN GenerateOnClose);\nNTSTATUS NtOpenProcess (PHANDLE ProcessHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, PCLIENT_ID ClientId);\nNTSTATUS NtOpenProcessToken (HANDLE ProcessHandle, ACCESS_MASK DesiredAccess, PHANDLE TokenHandle);\nNTSTATUS NtOpenSection (PHANDLE SectionHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes);\nNTSTATUS NtOpenSemaphore (PHANDLE SemaphoreHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes);\nNTSTATUS NtOpenSymbolicLinkObject (PHANDLE LinkHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes);\nNTSTATUS NtOpenThread (PHANDLE ThreadHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, PCLIENT_ID ClientId);\nNTSTATUS NtOpenThreadToken (HANDLE ThreadHandle, ACCESS_MASK DesiredAccess, BOOLEAN OpenAsSelf, PHANDLE TokenHandle);\nNTSTATUS NtOpenTimer (PHANDLE TimerHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes);\nNTSTATUS NtPlugPlayControl (PLUGPLAY_CONTROL_CLASS PnPControlClass, PVOID PnPControlData, ULONG PnPControlDataLength);\nNTSTATUS NtPowerInformation (POWER_INFORMATION_LEVEL InformationLevel, PVOID InputBuffer, ULONG InputBufferLength, PVOID OutputBuffer, ULONG OutputBufferLength);\nNTSTATUS NtPrivilegeCheck (HANDLE ClientToken, PPRIVILEGE_SET RequiredPrivileges, PBOOLEAN Result);\nNTSTATUS NtPrivilegedServiceAuditAlarm (PUNICODE_STRING SubsystemName, PUNICODE_STRING ServiceName, HANDLE ClientToken, PPRIVILEGE_SET Privileges, BOOLEAN AccessGranted);\nNTSTATUS NtPrivilegeObjectAuditAlarm (PUNICODE_STRING SubsystemName, PVOID HandleId, HANDLE ClientToken, ACCESS_MASK DesiredAccess, PPRIVILEGE_SET Privileges, BOOLEAN AccessGranted);\nNTSTATUS NtProtectVirtualMemory (HANDLE ProcessHandle, PVOID *BaseAddress, PSIZE_T RegionSize, WIN32_PROTECTION_MASK NewProtectWin32, PULONG OldProtect);\nNTSTATUS NtPulseEvent (HANDLE EventHandle, PLONG PreviousState);\nNTSTATUS NtQueryInformationAtom (RTL_ATOM Atom, ATOM_INFORMATION_CLASS InformationClass, PVOID AtomInformation, ULONG AtomInformationLength, PULONG ReturnLength);\nNTSTATUS NtQueryAttributesFile (POBJECT_ATTRIBUTES ObjectAttributes, PFILE_BASIC_INFORMATION FileInformation);\nNTSTATUS NtQueryDefaultLocale (BOOLEAN UserProfile, PLCID DefaultLocaleId);\nNTSTATUS NtQueryDefaultUILanguage (LANGID *DefaultUILanguageId);\nNTSTATUS NtQueryDirectoryFile (HANDLE FileHandle, HANDLE Event, PIO_APC_ROUTINE ApcRoutine, PVOID ApcContext, PIO_STATUS_BLOCK IoStatusBlock, PVOID FileInformation, ULONG Length, FILE_INFORMATION_CLASS FileInformationClass, BOOLEAN ReturnSingleEntry, PUNICODE_STRING FileName, BOOLEAN RestartScan);\nNTSTATUS NtQueryDirectoryObject (HANDLE DirectoryHandle, PVOID Buffer, ULONG Length, BOOLEAN ReturnSingleEntry, BOOLEAN RestartScan, PULONG Context, PULONG ReturnLength);\nNTSTATUS NtQueryEaFile (HANDLE FileHandle, PIO_STATUS_BLOCK IoStatusBlock, PVOID Buffer, ULONG Length, BOOLEAN ReturnSingleEntry, PVOID EaList, ULONG EaListLength, PULONG EaIndex, BOOLEAN RestartScan);\nNTSTATUS NtQueryEvent (HANDLE EventHandle, EVENT_INFORMATION_CLASS EventInformationClass, PVOID EventInformation, ULONG EventInformationLength, PULONG ReturnLength);\nNTSTATUS NtQueryFullAttributesFile (POBJECT_ATTRIBUTES ObjectAttributes, PFILE_NETWORK_OPEN_INFORMATION FileInformation);\nNTSTATUS NtQueryInformationFile (HANDLE FileHandle, PIO_STATUS_BLOCK IoStatusBlock, PVOID FileInformation, ULONG Length, FILE_INFORMATION_CLASS FileInformationClass);\nNTSTATUS NtQueryInformationJobObject (HANDLE JobHandle, JOBOBJECTINFOCLASS JobObjectInformationClass, PVOID JobObjectInformation, ULONG JobObjectInformationLength, PULONG ReturnLength);\n```\n\n----------------------------------------\n\nTITLE: Windows NT Memory Management System Calls\nDESCRIPTION: System calls for managing virtual memory protection and section objects.\nSOURCE: https://github.com/panda-re/panda-ng/blob/main/plugins/syscalls2/generated-in/windows_vistasp12_x64_prototypes.txt#_snippet_3\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtCreateSection (PHANDLE SectionHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, PLARGE_INTEGER MaximumSize, ULONG SectionPageProtection, ULONG AllocationAttributes, HANDLE FileHandle);\nNTSTATUS NtProtectVirtualMemory (HANDLE ProcessHandle, PVOID *BaseAddress, PSIZE_T RegionSize, WIN32_PROTECTION_MASK NewProtectWin32, PULONG OldProtect);\nNTSTATUS NtQuerySection (HANDLE SectionHandle, SECTION_INFORMATION_CLASS SectionInformationClass, PVOID SectionInformation, SIZE_T SectionInformationLength, PSIZE_T ReturnLength);\n```\n\n----------------------------------------\n\nTITLE: Windows NT System Call Declarations - Process & Object Management\nDESCRIPTION: Function declarations for Windows NT native API system calls related to process, thread, and object management. These functions provide low-level access to OS functionality.\nSOURCE: https://github.com/panda-re/panda-ng/blob/main/plugins/syscalls2/generated-in/windows_8sp0_x64_prototypes.txt#_snippet_2\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtAlpcSendWaitReceivePort (HANDLE PortHandle, ULONG Flags, PPORT_MESSAGE SendMessage, PALPC_MESSAGE_ATTRIBUTES SendMessageAttributes, PPORT_MESSAGE ReceiveMessage, PULONG BufferLength, PALPC_MESSAGE_ATTRIBUTES ReceiveMessageAttributes, PLARGE_INTEGER Timeout);\nNTSTATUS NtAlpcSetInformation (HANDLE PortHandle, ALPC_PORT_INFORMATION_CLASS PortInformationClass, PVOID PortInformation, ULONG Length);\nNTSTATUS NtAreMappedFilesTheSame (PVOID File1MappedAsAnImage, PVOID File2MappedAsFile);\nNTSTATUS NtAssignProcessToJobObject (HANDLE JobHandle, HANDLE ProcessHandle);\nNTSTATUS NtCancelIoFileEx (HANDLE FileHandle, PIO_STATUS_BLOCK IoRequestToCancel, PIO_STATUS_BLOCK IoStatusBlock);\nNTSTATUS NtCancelSynchronousIoFile (HANDLE ThreadHandle, PIO_STATUS_BLOCK IoRequestToCancel, PIO_STATUS_BLOCK IoStatusBlock);\nNTSTATUS NtCommitComplete (HANDLE EnlistmentHandle, PLARGE_INTEGER TmVirtualClock);\nNTSTATUS NtCommitEnlistment (HANDLE EnlistmentHandle, PLARGE_INTEGER TmVirtualClock);\nNTSTATUS NtCommitTransaction (HANDLE TransactionHandle, BOOLEAN Wait);\nNTSTATUS NtCompactKeys (ULONG Count, HANDLE KeyArray[]);\nNTSTATUS NtCompareTokens (HANDLE FirstTokenHandle, HANDLE SecondTokenHandle, PBOOLEAN Equal);\nNTSTATUS NtCompleteConnectPort (HANDLE PortHandle);\nNTSTATUS NtCompressKey (HANDLE Key);\nNTSTATUS NtConnectPort (PHANDLE PortHandle, PUNICODE_STRING PortName, PSECURITY_QUALITY_OF_SERVICE SecurityQos, PPORT_VIEW ClientView, PREMOTE_PORT_VIEW ServerView, PULONG MaxMessageLength, PVOID ConnectionInformation, PULONG ConnectionInformationLength);\nNTSTATUS NtCreateDebugObject (PHANDLE DebugObjectHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, ULONG Flags);\nNTSTATUS NtCreateDirectoryObject (PHANDLE DirectoryHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes);\nNTSTATUS NtCreateEnlistment (PHANDLE EnlistmentHandle, ACCESS_MASK DesiredAccess, HANDLE ResourceManagerHandle, HANDLE TransactionHandle, POBJECT_ATTRIBUTES ObjectAttributes, ULONG CreateOptions, NOTIFICATION_MASK NotificationMask, PVOID EnlistmentKey);\nNTSTATUS NtCreateEventPair (PHANDLE EventPairHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes);\nNTSTATUS NtCreateIoCompletion (PHANDLE IoCompletionHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, ULONG Count);\nNTSTATUS NtCreateJobObject (PHANDLE JobHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes);\nNTSTATUS NtCreateJobSet (ULONG NumJob, PJOB_SET_ARRAY UserJobSet, ULONG Flags);\nNTSTATUS NtCreateKeyTransacted (PHANDLE KeyHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, ULONG TitleIndex, PUNICODE_STRING Class, ULONG CreateOptions, HANDLE TransactionHandle, PULONG Disposition);\nNTSTATUS NtCreateKeyedEvent (PHANDLE KeyedEventHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, ULONG Flags);\nNTSTATUS NtCreateMailslotFile (PHANDLE FileHandle, ULONG DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, PIO_STATUS_BLOCK IoStatusBlock, ULONG CreateOptions, ULONG MailslotQuota, ULONG MaximumMessageSize, PLARGE_INTEGER ReadTimeout);\nNTSTATUS NtCreateMutant (PHANDLE MutantHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, BOOLEAN InitialOwner);\nNTSTATUS NtCreateNamedPipeFile (PHANDLE FileHandle, ULONG DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, PIO_STATUS_BLOCK IoStatusBlock, ULONG ShareAccess, ULONG CreateDisposition, ULONG CreateOptions, ULONG NamedPipeType, ULONG ReadMode, ULONG CompletionMode, ULONG MaximumInstances, ULONG InboundQuota, ULONG OutboundQuota, PLARGE_INTEGER DefaultTimeout);\nNTSTATUS NtCreatePagingFile (PUNICODE_STRING PageFileName, PLARGE_INTEGER MinimumSize, PLARGE_INTEGER MaximumSize, ULONG Priority);\nNTSTATUS NtCreatePort (PHANDLE PortHandle, POBJECT_ATTRIBUTES ObjectAttributes, ULONG MaxConnectionInfoLength, ULONG MaxMessageLength, ULONG MaxPoolUsage);\nNTSTATUS NtCreatePrivateNamespace (PHANDLE NamespaceHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, PVOID BoundaryDescriptor);\nNTSTATUS NtCreateProcess (PHANDLE ProcessHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, HANDLE ParentProcess, BOOLEAN InheritObjectTable, HANDLE SectionHandle, HANDLE DebugPort, HANDLE ExceptionPort);\nNTSTATUS NtCreateProfile (PHANDLE ProfileHandle, HANDLE Process, PVOID RangeBase, SIZE_T RangeSize, ULONG BucketSize, PULONG Buffer, ULONG BufferSize, KPROFILE_SOURCE ProfileSource, KAFFINITY Affinity);\nNTSTATUS NtCreateProfileEx (PHANDLE ProfileHandle, HANDLE Process, PVOID ProfileBase, SIZE_T ProfileSize, ULONG BucketSize, PULONG Buffer, ULONG BufferSize, KPROFILE_SOURCE ProfileSource, ULONG GroupAffinityCount, PGROUP_AFFINITY GroupAffinity);\nNTSTATUS NtCreateResourceManager (PHANDLE ResourceManagerHandle, ACCESS_MASK DesiredAccess, HANDLE TmHandle, LPGUID RmGuid, POBJECT_ATTRIBUTES ObjectAttributes, ULONG CreateOptions, PUNICODE_STRING Description);\nNTSTATUS NtCreateSemaphore (PHANDLE SemaphoreHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, LONG InitialCount, LONG MaximumCount);\nNTSTATUS NtCreateSymbolicLinkObject (PHANDLE LinkHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, PUNICODE_STRING LinkTarget);\nNTSTATUS NtCreateThreadEx (PHANDLE ThreadHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, HANDLE ProcessHandle, PVOID StartRoutine, PVOID Argument, ULONG CreateFlags, ULONG_PTR ZeroBits, SIZE_T StackSize, SIZE_T MaximumStackSize, PPS_ATTRIBUTE_LIST AttributeList);\nNTSTATUS NtCreateTimer (PHANDLE TimerHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, TIMER_TYPE TimerType);\nNTSTATUS NtCreateToken (PHANDLE TokenHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, TOKEN_TYPE TokenType, PLUID AuthenticationId, PLARGE_INTEGER ExpirationTime, PTOKEN_USER User, PTOKEN_GROUPS Groups, PTOKEN_PRIVILEGES Privileges, PTOKEN_OWNER Owner, PTOKEN_PRIMARY_GROUP PrimaryGroup, PTOKEN_DEFAULT_DACL DefaultDacl, PTOKEN_SOURCE TokenSource);\nNTSTATUS NtCreateTransaction (PHANDLE TransactionHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, LPGUID Uow, HANDLE TmHandle, ULONG CreateOptions, ULONG IsolationLevel, ULONG IsolationFlags, PLARGE_INTEGER Timeout, PUNICODE_STRING Description);\nNTSTATUS NtCreateTransactionManager (PHANDLE TmHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, PUNICODE_STRING LogFileName, ULONG CreateOptions, ULONG CommitStrength);\nNTSTATUS NtCreateUserProcess (PHANDLE ProcessHandle, PHANDLE ThreadHandle, ACCESS_MASK ProcessDesiredAccess, ACCESS_MASK ThreadDesiredAccess, POBJECT_ATTRIBUTES ProcessObjectAttributes, POBJECT_ATTRIBUTES ThreadObjectAttributes, ULONG ProcessFlags, ULONG ThreadFlags, PRTL_USER_PROCESS_PARAMETERS ProcessParameters, PPROCESS_CREATE_INFO CreateInfo, PPROCESS_ATTRIBUTE_LIST AttributeList);\nNTSTATUS NtCreateWaitablePort (PHANDLE PortHandle, POBJECT_ATTRIBUTES ObjectAttributes, ULONG MaxConnectionInfoLength, ULONG MaxMessageLength, ULONG MaxPoolUsage);\nNTSTATUS NtCreateWorkerFactory (PHANDLE WorkerFactoryHandleReturn, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, HANDLE CompletionPortHandle, HANDLE WorkerProcessHandle, PVOID StartRoutine, PVOID StartParameter, ULONG MaxThreadCount, SIZE_T StackReserve, SIZE_T StackCommit);\nNTSTATUS NtDebugActiveProcess (HANDLE ProcessHandle, HANDLE DebugObjectHandle);\nNTSTATUS NtDebugContinue (HANDLE DebugObjectHandle, PCLIENT_ID ClientId, NTSTATUS ContinueStatus);\nNTSTATUS NtDeleteAtom (RTL_ATOM Atom);\nNTSTATUS NtDeleteBootEntry (ULONG Id);\nNTSTATUS NtDeleteDriverEntry (ULONG Id);\nNTSTATUS NtDeleteFile (POBJECT_ATTRIBUTES ObjectAttributes);\nNTSTATUS NtDeleteKey (HANDLE KeyHandle);\nNTSTATUS NtDeleteObjectAuditAlarm (PUNICODE_STRING SubsystemName, PVOID HandleId, BOOLEAN GenerateOnClose);\nNTSTATUS NtDeletePrivateNamespace (HANDLE NamespaceHandle);\nNTSTATUS NtDeleteValueKey (HANDLE KeyHandle, PUNICODE_STRING ValueName);\nNTSTATUS NtDisableLastKnownGood ();\nNTSTATUS NtDisplayString (PUNICODE_STRING String);\nNTSTATUS NtDrawText (PUNICODE_STRING Text);\nNTSTATUS NtEnableLastKnownGood ();\nNTSTATUS NtEnumerateBootEntries (PVOID Buffer, PULONG BufferLength);\nNTSTATUS NtEnumerateDriverEntries (PVOID Buffer, PULONG BufferLength);\nNTSTATUS NtEnumerateSystemEnvironmentValuesEx (ULONG InformationClass, PVOID Buffer, PULONG BufferLength);\nNTSTATUS NtEnumerateTransactionObject (HANDLE RootObjectHandle, KTMOBJECT_TYPE QueryType, PKTMOBJECT_CURSOR ObjectCursor, ULONG ObjectCursorLength, PULONG ReturnLength);\nNTSTATUS NtExtendSection (HANDLE SectionHandle, PLARGE_INTEGER NewSectionSize);\nNTSTATUS NtFilterToken (HANDLE ExistingTokenHandle, ULONG Flags, PTOKEN_GROUPS SidsToDisable, PTOKEN_PRIVILEGES PrivilegesToDelete, PTOKEN_GROUPS RestrictedSids, PHANDLE NewTokenHandle);\nNTSTATUS NtFlushInstallUILanguage (LANGID InstallUILanguage, ULONG SetComittedFlag);\nNTSTATUS NtFlushInstructionCache (HANDLE ProcessHandle, PVOID BaseAddress, SIZE_T Length);\nNTSTATUS NtFlushKey (HANDLE KeyHandle);\nVOID NtFlushProcessWriteBuffers ();\nNTSTATUS NtFlushVirtualMemory (HANDLE ProcessHandle, PVOID *BaseAddress, PSIZE_T RegionSize, PIO_STATUS_BLOCK IoStatus);\nNTSTATUS NtFlushWriteBuffer ();\nNTSTATUS NtFreeUserPhysicalPages (HANDLE ProcessHandle, PULONG_PTR NumberOfPages, PULONG_PTR UserPfnArray);\nNTSTATUS NtFreezeRegistry (ULONG TimeOutInSeconds);\nNTSTATUS NtFreezeTransactions (PLARGE_INTEGER FreezeTimeout, PLARGE_INTEGER ThawTimeout);\nNTSTATUS NtGetContextThread (HANDLE ThreadHandle, PCONTEXT ThreadContext);\nULONG NtGetCurrentProcessorNumber ();\nNTSTATUS NtGetDevicePowerState (HANDLE Device, DEVICE_POWER_STATE *State);\n```\n\n----------------------------------------\n\nTITLE: Declaring Windows NT Native API Prototypes in C\nDESCRIPTION: Defines the function signatures for a series of Windows NT Native API functions used for system-level operations such as file handling, registry access, process and thread management, and security functions. These declarations specify parameter types, return types (often NTSTATUS or BOOLEAN), and calling conventions needed to interface with the undocumented NT kernel API. No dependencies outside of standard Windows and NT kernel types are required, but proper structure definitions (e.g., HANDLE, ULONG, ACCESS_MASK) must be available in the including context. Inputs are function parameters matching the Windows type system, and outputs are encoded in the NTSTATUS or BOOLEAN result. These prototypes do not provide implementations and are typically included as part of native API usage in system utilities or kernel modules.\nSOURCE: https://github.com/panda-re/panda-ng/blob/main/plugins/syscalls2/generated-in/windows_xpsp3_x86_prototypes.txt#_snippet_2\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtDeleteAtom (RTL_ATOM Atom);\nNTSTATUS NtDeleteBootEntry (ULONG Id);\nNTSTATUS NtDeleteFile (POBJECT_ATTRIBUTES ObjectAttributes);\nNTSTATUS NtDeleteKey (HANDLE KeyHandle);\nNTSTATUS NtDeleteObjectAuditAlarm (PUNICODE_STRING SubsystemName, PVOID HandleId, BOOLEAN GenerateOnClose);\nNTSTATUS NtDeleteValueKey (HANDLE KeyHandle, PUNICODE_STRING ValueName);\nNTSTATUS NtDeviceIoControlFile (HANDLE FileHandle, HANDLE Event, PIO_APC_ROUTINE ApcRoutine, PVOID ApcContext, PIO_STATUS_BLOCK IoStatusBlock, ULONG IoControlCode, PVOID InputBuffer, ULONG InputBufferLength, PVOID OutputBuffer, ULONG OutputBufferLength);\nNTSTATUS NtDisplayString (PUNICODE_STRING String);\nNTSTATUS NtDuplicateObject (HANDLE SourceProcessHandle, HANDLE SourceHandle, HANDLE TargetProcessHandle, PHANDLE TargetHandle, ACCESS_MASK DesiredAccess, ULONG HandleAttributes, ULONG Options);\nNTSTATUS NtDuplicateToken (HANDLE ExistingTokenHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, BOOLEAN EffectiveOnly, TOKEN_TYPE TokenType, PHANDLE NewTokenHandle);\nNTSTATUS NtEnumerateBootEntries (PVOID Buffer, PULONG BufferLength);\nNTSTATUS NtEnumerateKey (HANDLE KeyHandle, ULONG Index, KEY_INFORMATION_CLASS KeyInformationClass, PVOID KeyInformation, ULONG Length, PULONG ResultLength);\nNTSTATUS NtEnumerateSystemEnvironmentValuesEx (ULONG InformationClass, PVOID Buffer, PULONG BufferLength);\nNTSTATUS NtEnumerateValueKey (HANDLE KeyHandle, ULONG Index, KEY_VALUE_INFORMATION_CLASS KeyValueInformationClass, PVOID KeyValueInformation, ULONG Length, PULONG ResultLength);\nNTSTATUS NtExtendSection (HANDLE SectionHandle, PLARGE_INTEGER NewSectionSize);\nNTSTATUS NtFilterToken (HANDLE ExistingTokenHandle, ULONG Flags, PTOKEN_GROUPS SidsToDisable, PTOKEN_PRIVILEGES PrivilegesToDelete, PTOKEN_GROUPS RestrictedSids, PHANDLE NewTokenHandle);\nNTSTATUS NtFindAtom (PWSTR AtomName, ULONG Length, PRTL_ATOM Atom);\nNTSTATUS NtFlushBuffersFile (HANDLE FileHandle, PIO_STATUS_BLOCK IoStatusBlock);\nNTSTATUS NtFlushInstructionCache (HANDLE ProcessHandle, PVOID BaseAddress, SIZE_T Length);\nNTSTATUS NtFlushKey (HANDLE KeyHandle);\nNTSTATUS NtFlushVirtualMemory (HANDLE ProcessHandle, PVOID *BaseAddress, PSIZE_T RegionSize, PIO_STATUS_BLOCK IoStatus);\nNTSTATUS NtFlushWriteBuffer ();\nNTSTATUS NtFreeUserPhysicalPages (HANDLE ProcessHandle, PULONG_PTR NumberOfPages, PULONG_PTR UserPfnArray);\nNTSTATUS NtFreeVirtualMemory (HANDLE ProcessHandle, PVOID *BaseAddress, PSIZE_T RegionSize, ULONG FreeType);\nNTSTATUS NtFsControlFile (HANDLE FileHandle, HANDLE Event, PIO_APC_ROUTINE ApcRoutine, PVOID ApcContext, PIO_STATUS_BLOCK IoStatusBlock, ULONG IoControlCode, PVOID InputBuffer, ULONG InputBufferLength, PVOID OutputBuffer, ULONG OutputBufferLength);\nNTSTATUS NtGetContextThread (HANDLE ThreadHandle, PCONTEXT ThreadContext);\nNTSTATUS NtGetDevicePowerState (HANDLE Device, DEVICE_POWER_STATE *State);\nNTSTATUS NtGetPlugPlayEvent (HANDLE EventHandle, PVOID Context, PPLUGPLAY_EVENT_BLOCK EventBlock, ULONG EventBufferSize);\nNTSTATUS NtGetWriteWatch (HANDLE ProcessHandle, ULONG Flags, PVOID BaseAddress, SIZE_T RegionSize, PVOID *UserAddressArray, PULONG_PTR EntriesInUserAddressArray, PULONG Granularity);\nNTSTATUS NtImpersonateAnonymousToken (HANDLE ThreadHandle);\nNTSTATUS NtImpersonateClientOfPort (HANDLE PortHandle, PPORT_MESSAGE Message);\nNTSTATUS NtImpersonateThread (HANDLE ServerThreadHandle, HANDLE ClientThreadHandle, PSECURITY_QUALITY_OF_SERVICE SecurityQos);\nNTSTATUS NtInitializeRegistry (USHORT BootCondition);\nNTSTATUS NtInitiatePowerAction (POWER_ACTION SystemAction, SYSTEM_POWER_STATE MinSystemState, ULONG Flags, BOOLEAN Asynchronous);\nNTSTATUS NtIsProcessInJob (HANDLE ProcessHandle, HANDLE JobHandle);\nBOOLEAN NtIsSystemResumeAutomatic ();\nNTSTATUS NtListenPort (HANDLE PortHandle, PPORT_MESSAGE ConnectionRequest);\nNTSTATUS NtLoadDriver (PUNICODE_STRING DriverServiceName);\nNTSTATUS NtLoadKey (POBJECT_ATTRIBUTES TargetKey, POBJECT_ATTRIBUTES SourceFile);\nNTSTATUS NtLoadKey2 (POBJECT_ATTRIBUTES TargetKey, POBJECT_ATTRIBUTES SourceFile, ULONG Flags);\nNTSTATUS NtLockFile (HANDLE FileHandle, HANDLE Event, PIO_APC_ROUTINE ApcRoutine, PVOID ApcContext, PIO_STATUS_BLOCK IoStatusBlock, PLARGE_INTEGER ByteOffset, PLARGE_INTEGER Length, ULONG Key, BOOLEAN FailImmediately, BOOLEAN ExclusiveLock);\nNTSTATUS NtLockProductActivationKeys (ULONG *pPrivateVer, ULONG *pSafeMode);\nNTSTATUS NtLockRegistryKey (HANDLE KeyHandle);\nNTSTATUS NtLockVirtualMemory (HANDLE ProcessHandle, PVOID *BaseAddress, PSIZE_T RegionSize, ULONG MapType);\nNTSTATUS NtMakePermanentObject (HANDLE Handle);\nNTSTATUS NtMakeTemporaryObject (HANDLE Handle);\nNTSTATUS NtMapUserPhysicalPages (PVOID VirtualAddress, ULONG_PTR NumberOfPages, PULONG_PTR UserPfnArray);\nNTSTATUS NtMapUserPhysicalPagesScatter (PVOID *VirtualAddresses, ULONG_PTR NumberOfPages, PULONG_PTR UserPfnArray);\nNTSTATUS NtMapViewOfSection (HANDLE SectionHandle, HANDLE ProcessHandle, PVOID *BaseAddress, ULONG_PTR ZeroBits, SIZE_T CommitSize, PLARGE_INTEGER SectionOffset, PSIZE_T ViewSize, SECTION_INHERIT InheritDisposition, ULONG AllocationType, WIN32_PROTECTION_MASK Win32Protect);\nNTSTATUS NtModifyBootEntry (PBOOT_ENTRY BootEntry);\nNTSTATUS NtNotifyChangeDirectoryFile (HANDLE FileHandle, HANDLE Event, PIO_APC_ROUTINE ApcRoutine, PVOID ApcContext, PIO_STATUS_BLOCK IoStatusBlock, PVOID Buffer, ULONG Length, ULONG CompletionFilter, BOOLEAN WatchTree);\nNTSTATUS NtNotifyChangeKey (HANDLE KeyHandle, HANDLE Event, PIO_APC_ROUTINE ApcRoutine, PVOID ApcContext, PIO_STATUS_BLOCK IoStatusBlock, ULONG CompletionFilter, BOOLEAN WatchTree, PVOID Buffer, ULONG BufferSize, BOOLEAN Asynchronous);\nNTSTATUS NtNotifyChangeMultipleKeys (HANDLE MasterKeyHandle, ULONG Count, OBJECT_ATTRIBUTES SlaveObjects[], HANDLE Event, PIO_APC_ROUTINE ApcRoutine, PVOID ApcContext, PIO_STATUS_BLOCK IoStatusBlock, ULONG CompletionFilter, BOOLEAN WatchTree, PVOID Buffer, ULONG BufferSize, BOOLEAN Asynchronous);\nNTSTATUS NtOpenDirectoryObject (PHANDLE DirectoryHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes);\nNTSTATUS NtOpenEvent (PHANDLE EventHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes);\nNTSTATUS NtOpenEventPair (PHANDLE EventPairHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes);\nNTSTATUS NtOpenFile (PHANDLE FileHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, PIO_STATUS_BLOCK IoStatusBlock, ULONG ShareAccess, ULONG OpenOptions);\nNTSTATUS NtOpenIoCompletion (PHANDLE IoCompletionHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes);\nNTSTATUS NtOpenJobObject (PHANDLE JobHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes);\nNTSTATUS NtOpenKey (PHANDLE KeyHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes);\nNTSTATUS NtOpenMutant (PHANDLE MutantHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes);\nNTSTATUS NtOpenObjectAuditAlarm (PUNICODE_STRING SubsystemName, PVOID HandleId, PUNICODE_STRING ObjectTypeName, PUNICODE_STRING ObjectName, PSECURITY_DESCRIPTOR SecurityDescriptor, HANDLE ClientToken, ACCESS_MASK DesiredAccess, ACCESS_MASK GrantedAccess, PPRIVILEGE_SET Privileges, BOOLEAN ObjectCreation, BOOLEAN AccessGranted, PBOOLEAN GenerateOnClose);\nNTSTATUS NtOpenProcess (PHANDLE ProcessHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, PCLIENT_ID ClientId);\nNTSTATUS NtOpenProcessToken (HANDLE ProcessHandle, ACCESS_MASK DesiredAccess, PHANDLE TokenHandle);\nNTSTATUS NtOpenProcessTokenEx (HANDLE ProcessHandle, ACCESS_MASK DesiredAccess, ULONG HandleAttributes, PHANDLE TokenHandle);\nNTSTATUS NtOpenSection (PHANDLE SectionHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes);\nNTSTATUS NtOpenSemaphore (PHANDLE SemaphoreHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes);\nNTSTATUS NtOpenSymbolicLinkObject (PHANDLE LinkHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes);\nNTSTATUS NtOpenThread (PHANDLE ThreadHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, PCLIENT_ID ClientId);\nNTSTATUS NtOpenThreadToken (HANDLE ThreadHandle, ACCESS_MASK DesiredAccess, BOOLEAN OpenAsSelf, PHANDLE TokenHandle);\nNTSTATUS NtOpenThreadTokenEx (HANDLE ThreadHandle, ACCESS_MASK DesiredAccess, BOOLEAN OpenAsSelf, ULONG HandleAttributes, PHANDLE TokenHandle);\nNTSTATUS NtOpenTimer (PHANDLE TimerHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes);\nNTSTATUS NtPlugPlayControl (PLUGPLAY_CONTROL_CLASS PnPControlClass, PVOID PnPControlData, ULONG PnPControlDataLength);\nNTSTATUS NtPowerInformation (POWER_INFORMATION_LEVEL InformationLevel, PVOID InputBuffer, ULONG InputBufferLength, PVOID OutputBuffer, ULONG OutputBufferLength);\nNTSTATUS NtPrivilegeCheck (HANDLE ClientToken, PPRIVILEGE_SET RequiredPrivileges, PBOOLEAN Result);\nNTSTATUS NtPrivilegeObjectAuditAlarm (PUNICODE_STRING SubsystemName, PVOID HandleId, HANDLE ClientToken, ACCESS_MASK DesiredAccess, PPRIVILEGE_SET Privileges, BOOLEAN AccessGranted);\nNTSTATUS NtPrivilegedServiceAuditAlarm (PUNICODE_STRING SubsystemName, PUNICODE_STRING ServiceName, HANDLE ClientToken, PPRIVILEGE_SET Privileges, BOOLEAN AccessGranted);\nNTSTATUS NtProtectVirtualMemory (HANDLE ProcessHandle, PVOID *BaseAddress, PSIZE_T RegionSize, WIN32_PROTECTION_MASK NewProtectWin32, PULONG OldProtect);\nNTSTATUS NtPulseEvent (HANDLE EventHandle, PLONG PreviousState);\nNTSTATUS NtQueryAttributesFile (POBJECT_ATTRIBUTES ObjectAttributes, PFILE_BASIC_INFORMATION FileInformation);\nNTSTATUS NtQueryBootEntryOrder (PULONG Ids, PULONG Count);\nNTSTATUS NtQueryBootOptions (PBOOT_OPTIONS BootOptions, PULONG BootOptionsLength);\n```\n\n----------------------------------------\n\nTITLE: Declaring Native Windows API Function Prototypes in C/C++\nDESCRIPTION: This snippet contains a series of Windows NT Native API function declarations suitable for placement in a C or C++ header file. These prototypes allow direct usage of undocumented or low-level system calls for advanced process, file, memory, and system management on Windows platforms. Dependencies include appropriate Windows types (e.g., HANDLE, NTSTATUS, PUNICODE_STRING) and header inclusions, typically provided by Windows SDKs or custom typedefs. Parameters include object handles, structure pointers, and primitive types, based on the specific system service invoked. The functions expect system-level privilege and are generally intended for kernel-mode code or advanced user-mode applications interfacing with the NT kernel layer. No implementations are provided—only the function signatures for linking to or dynamically resolving these APIs.\nSOURCE: https://github.com/panda-re/panda-ng/blob/main/plugins/syscalls2/generated-in/windows_vistasp12_x64_prototypes.txt#_snippet_5\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtAlpcSendWaitReceivePort (HANDLE PortHandle, ULONG Flags, PPORT_MESSAGE SendMessage, PALPC_MESSAGE_ATTRIBUTES SendMessageAttributes, PPORT_MESSAGE ReceiveMessage, PULONG BufferLength, PALPC_MESSAGE_ATTRIBUTES ReceiveMessageAttributes, PLARGE_INTEGER Timeout);\nNTSTATUS NtAlpcSetInformation (HANDLE PortHandle, ALPC_PORT_INFORMATION_CLASS PortInformationClass, PVOID PortInformation, ULONG Length);\nNTSTATUS NtAreMappedFilesTheSame (PVOID File1MappedAsAnImage, PVOID File2MappedAsFile);\nNTSTATUS NtAssignProcessToJobObject (HANDLE JobHandle, HANDLE ProcessHandle);\nNTSTATUS NtCancelIoFileEx (HANDLE FileHandle, PIO_STATUS_BLOCK IoRequestToCancel, PIO_STATUS_BLOCK IoStatusBlock);\nNTSTATUS NtCancelSynchronousIoFile (HANDLE ThreadHandle, PIO_STATUS_BLOCK IoRequestToCancel, PIO_STATUS_BLOCK IoStatusBlock);\nNTSTATUS NtCommitComplete (HANDLE EnlistmentHandle, PLARGE_INTEGER TmVirtualClock);\nNTSTATUS NtCommitEnlistment (HANDLE EnlistmentHandle, PLARGE_INTEGER TmVirtualClock);\nNTSTATUS NtCommitTransaction (HANDLE TransactionHandle, BOOLEAN Wait);\nNTSTATUS NtCompactKeys (ULONG Count, HANDLE KeyArray[]);\nNTSTATUS NtCompareTokens (HANDLE FirstTokenHandle, HANDLE SecondTokenHandle, PBOOLEAN Equal);\nNTSTATUS NtCompleteConnectPort (HANDLE PortHandle);\nNTSTATUS NtCompressKey (HANDLE Key);\nNTSTATUS NtConnectPort (PHANDLE PortHandle, PUNICODE_STRING PortName, PSECURITY_QUALITY_OF_SERVICE SecurityQos, PPORT_VIEW ClientView, PREMOTE_PORT_VIEW ServerView, PULONG MaxMessageLength, PVOID ConnectionInformation, PULONG ConnectionInformationLength);\nNTSTATUS NtCreateDebugObject (PHANDLE DebugObjectHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, ULONG Flags);\nNTSTATUS NtCreateDirectoryObject (PHANDLE DirectoryHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes);\nNTSTATUS NtCreateEnlistment (PHANDLE EnlistmentHandle, ACCESS_MASK DesiredAccess, HANDLE ResourceManagerHandle, HANDLE TransactionHandle, POBJECT_ATTRIBUTES ObjectAttributes, ULONG CreateOptions, NOTIFICATION_MASK NotificationMask, PVOID EnlistmentKey);\nNTSTATUS NtCreateEventPair (PHANDLE EventPairHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes);\nNTSTATUS NtCreateIoCompletion (PHANDLE IoCompletionHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, ULONG Count);\nNTSTATUS NtCreateJobObject (PHANDLE JobHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes);\nNTSTATUS NtCreateJobSet (ULONG NumJob, PJOB_SET_ARRAY UserJobSet, ULONG Flags);\nNTSTATUS NtCreateKeyTransacted (PHANDLE KeyHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, ULONG TitleIndex, PUNICODE_STRING Class, ULONG CreateOptions, HANDLE TransactionHandle, PULONG Disposition);\nNTSTATUS NtCreateKeyedEvent (PHANDLE KeyedEventHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, ULONG Flags);\nNTSTATUS NtCreateMailslotFile (PHANDLE FileHandle, ULONG DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, PIO_STATUS_BLOCK IoStatusBlock, ULONG CreateOptions, ULONG MailslotQuota, ULONG MaximumMessageSize, PLARGE_INTEGER ReadTimeout);\nNTSTATUS NtCreateMutant (PHANDLE MutantHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, BOOLEAN InitialOwner);\nNTSTATUS NtCreateNamedPipeFile (PHANDLE FileHandle, ULONG DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, PIO_STATUS_BLOCK IoStatusBlock, ULONG ShareAccess, ULONG CreateDisposition, ULONG CreateOptions, ULONG NamedPipeType, ULONG ReadMode, ULONG CompletionMode, ULONG MaximumInstances, ULONG InboundQuota, ULONG OutboundQuota, PLARGE_INTEGER DefaultTimeout);\nNTSTATUS NtCreatePagingFile (PUNICODE_STRING PageFileName, PLARGE_INTEGER MinimumSize, PLARGE_INTEGER MaximumSize, ULONG Priority);\nNTSTATUS NtCreatePort (PHANDLE PortHandle, POBJECT_ATTRIBUTES ObjectAttributes, ULONG MaxConnectionInfoLength, ULONG MaxMessageLength, ULONG MaxPoolUsage);\nNTSTATUS NtCreatePrivateNamespace (PHANDLE NamespaceHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, PVOID BoundaryDescriptor);\nNTSTATUS NtCreateProcess (PHANDLE ProcessHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, HANDLE ParentProcess, BOOLEAN InheritObjectTable, HANDLE SectionHandle, HANDLE DebugPort, HANDLE ExceptionPort);\nNTSTATUS NtCreateProfile (PHANDLE ProfileHandle, HANDLE Process, PVOID RangeBase, SIZE_T RangeSize, ULONG BucketSize, PULONG Buffer, ULONG BufferSize, KPROFILE_SOURCE ProfileSource, KAFFINITY Affinity);\nNTSTATUS NtCreateResourceManager (PHANDLE ResourceManagerHandle, ACCESS_MASK DesiredAccess, HANDLE TmHandle, LPGUID RmGuid, POBJECT_ATTRIBUTES ObjectAttributes, ULONG CreateOptions, PUNICODE_STRING Description);\nNTSTATUS NtCreateSemaphore (PHANDLE SemaphoreHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, LONG InitialCount, LONG MaximumCount);\nNTSTATUS NtCreateSymbolicLinkObject (PHANDLE LinkHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, PUNICODE_STRING LinkTarget);\nNTSTATUS NtCreateThreadEx (PHANDLE ThreadHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, HANDLE ProcessHandle, PVOID StartRoutine, PVOID Argument, ULONG CreateFlags, ULONG_PTR ZeroBits, SIZE_T StackSize, SIZE_T MaximumStackSize, PPS_ATTRIBUTE_LIST AttributeList);\nNTSTATUS NtCreateTimer (PHANDLE TimerHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, TIMER_TYPE TimerType);\nNTSTATUS NtCreateToken (PHANDLE TokenHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, TOKEN_TYPE TokenType, PLUID AuthenticationId, PLARGE_INTEGER ExpirationTime, PTOKEN_USER User, PTOKEN_GROUPS Groups, PTOKEN_PRIVILEGES Privileges, PTOKEN_OWNER Owner, PTOKEN_PRIMARY_GROUP PrimaryGroup, PTOKEN_DEFAULT_DACL DefaultDacl, PTOKEN_SOURCE TokenSource);\nNTSTATUS NtCreateTransaction (PHANDLE TransactionHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, LPGUID Uow, HANDLE TmHandle, ULONG CreateOptions, ULONG IsolationLevel, ULONG IsolationFlags, PLARGE_INTEGER Timeout, PUNICODE_STRING Description);\nNTSTATUS NtCreateTransactionManager (PHANDLE TmHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, PUNICODE_STRING LogFileName, ULONG CreateOptions, ULONG CommitStrength);\nNTSTATUS NtCreateUserProcess (PHANDLE ProcessHandle, PHANDLE ThreadHandle, ACCESS_MASK ProcessDesiredAccess, ACCESS_MASK ThreadDesiredAccess, POBJECT_ATTRIBUTES ProcessObjectAttributes, POBJECT_ATTRIBUTES ThreadObjectAttributes, ULONG ProcessFlags, ULONG ThreadFlags, PRTL_USER_PROCESS_PARAMETERS ProcessParameters, PPROCESS_CREATE_INFO CreateInfo, PPROCESS_ATTRIBUTE_LIST AttributeList);\nNTSTATUS NtCreateWaitablePort (PHANDLE PortHandle, POBJECT_ATTRIBUTES ObjectAttributes, ULONG MaxConnectionInfoLength, ULONG MaxMessageLength, ULONG MaxPoolUsage);\nNTSTATUS NtCreateWorkerFactory (PHANDLE WorkerFactoryHandleReturn, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, HANDLE CompletionPortHandle, HANDLE WorkerProcessHandle, PVOID StartRoutine, PVOID StartParameter, ULONG MaxThreadCount, SIZE_T StackReserve, SIZE_T StackCommit);\nNTSTATUS NtDebugActiveProcess (HANDLE ProcessHandle, HANDLE DebugObjectHandle);\nNTSTATUS NtDebugContinue (HANDLE DebugObjectHandle, PCLIENT_ID ClientId, NTSTATUS ContinueStatus);\nNTSTATUS NtDeleteAtom (RTL_ATOM Atom);\nNTSTATUS NtDeleteBootEntry (ULONG Id);\nNTSTATUS NtDeleteDriverEntry (ULONG Id);\nNTSTATUS NtDeleteFile (POBJECT_ATTRIBUTES ObjectAttributes);\nNTSTATUS NtDeleteKey (HANDLE KeyHandle);\nNTSTATUS NtDeleteObjectAuditAlarm (PUNICODE_STRING SubsystemName, PVOID HandleId, BOOLEAN GenerateOnClose);\nNTSTATUS NtDeletePrivateNamespace (HANDLE NamespaceHandle);\nNTSTATUS NtDeleteValueKey (HANDLE KeyHandle, PUNICODE_STRING ValueName);\nNTSTATUS NtDisplayString (PUNICODE_STRING String);\nNTSTATUS NtEnumerateBootEntries (PVOID Buffer, PULONG BufferLength);\nNTSTATUS NtEnumerateDriverEntries (PVOID Buffer, PULONG BufferLength);\nNTSTATUS NtEnumerateSystemEnvironmentValuesEx (ULONG InformationClass, PVOID Buffer, PULONG BufferLength);\nNTSTATUS NtEnumerateTransactionObject (HANDLE RootObjectHandle, KTMOBJECT_TYPE QueryType, PKTMOBJECT_CURSOR ObjectCursor, ULONG ObjectCursorLength, PULONG ReturnLength);\nNTSTATUS NtExtendSection (HANDLE SectionHandle, PLARGE_INTEGER NewSectionSize);\nNTSTATUS NtFilterToken (HANDLE ExistingTokenHandle, ULONG Flags, PTOKEN_GROUPS SidsToDisable, PTOKEN_PRIVILEGES PrivilegesToDelete, PTOKEN_GROUPS RestrictedSids, PHANDLE NewTokenHandle);\nNTSTATUS NtFlushInstallUILanguage (LANGID InstallUILanguage, ULONG SetComittedFlag);\nNTSTATUS NtFlushInstructionCache (HANDLE ProcessHandle, PVOID BaseAddress, SIZE_T Length);\nNTSTATUS NtFlushKey (HANDLE KeyHandle);\nVOID NtFlushProcessWriteBuffers ();\nNTSTATUS NtFlushVirtualMemory (HANDLE ProcessHandle, PVOID *BaseAddress, PSIZE_T RegionSize, PIO_STATUS_BLOCK IoStatus);\nNTSTATUS NtFlushWriteBuffer ();\nNTSTATUS NtFreeUserPhysicalPages (HANDLE ProcessHandle, PULONG_PTR NumberOfPages, PULONG_PTR UserPfnArray);\nNTSTATUS NtFreezeRegistry (ULONG TimeOutInSeconds);\nNTSTATUS NtFreezeTransactions (PLARGE_INTEGER FreezeTimeout, PLARGE_INTEGER ThawTimeout);\nNTSTATUS NtGetContextThread (HANDLE ThreadHandle, PCONTEXT ThreadContext);\nULONG NtGetCurrentProcessorNumber ();\nNTSTATUS NtGetDevicePowerState (HANDLE Device, DEVICE_POWER_STATE *State);\nNTSTATUS NtGetMUIRegistryInfo (ULONG Flags, PULONG DataSize, PVOID Data);\nNTSTATUS NtGetNextProcess (HANDLE ProcessHandle, ACCESS_MASK DesiredAccess, ULONG HandleAttributes, ULONG Flags, PHANDLE NewProcessHandle);\nNTSTATUS NtGetNextThread (HANDLE ProcessHandle, HANDLE ThreadHandle, ACCESS_MASK DesiredAccess, ULONG HandleAttributes, ULONG Flags, PHANDLE NewThreadHandle);\n```\n\n----------------------------------------\n\nTITLE: Declaring Windows NT System Calls in C\nDESCRIPTION: This snippet contains multiple function declarations for Windows NT system calls. These functions are part of the Windows NT native API and are used for low-level system operations. They cover areas such as memory management, process control, file operations, and system information retrieval.\nSOURCE: https://github.com/panda-re/panda-ng/blob/main/plugins/syscalls2/generated-in/windows_8sp1_x86_prototypes.txt#_snippet_9\n\nLANGUAGE: C\nCODE:\n```\nNTSTATUS NtMapUserPhysicalPagesScatter (PVOID *VirtualAddresses, ULONG_PTR NumberOfPages, PULONG_PTR UserPfnArray);\nNTSTATUS NtMapUserPhysicalPages (PVOID VirtualAddress, ULONG_PTR NumberOfPages, PULONG_PTR UserPfnArray);\nNTSTATUS NtMapCMFModule (ULONG What, ULONG Index, PULONG CacheIndexOut, PULONG CacheFlagsOut, PULONG ViewSizeOut, PVOID *BaseAddress);\nNTSTATUS NtMakeTemporaryObject (HANDLE Handle);\nNTSTATUS NtMakePermanentObject (HANDLE Handle);\nNTSTATUS NtLockVirtualMemory (HANDLE ProcessHandle, PVOID *BaseAddress, PSIZE_T RegionSize, ULONG MapType);\nNTSTATUS NtLockRegistryKey (HANDLE KeyHandle);\nNTSTATUS NtLockProductActivationKeys (ULONG *pPrivateVer, ULONG *pSafeMode);\nNTSTATUS NtLockFile (HANDLE FileHandle, HANDLE Event, PIO_APC_ROUTINE ApcRoutine, PVOID ApcContext, PIO_STATUS_BLOCK IoStatusBlock, PLARGE_INTEGER ByteOffset, PLARGE_INTEGER Length, ULONG Key, BOOLEAN FailImmediately, BOOLEAN ExclusiveLock);\nNTSTATUS NtLoadKeyEx (POBJECT_ATTRIBUTES TargetKey, POBJECT_ATTRIBUTES SourceFile, ULONG Flags, HANDLE TrustClassKey );\nNTSTATUS NtLoadKey2 (POBJECT_ATTRIBUTES TargetKey, POBJECT_ATTRIBUTES SourceFile, ULONG Flags);\nNTSTATUS NtLoadKey (POBJECT_ATTRIBUTES TargetKey, POBJECT_ATTRIBUTES SourceFile);\nNTSTATUS NtLoadDriver (PUNICODE_STRING DriverServiceName);\nNTSTATUS NtListenPort (HANDLE PortHandle, PPORT_MESSAGE ConnectionRequest);\nNTSTATUS NtIsUILanguageComitted ();\nBOOLEAN NtIsSystemResumeAutomatic ();\nNTSTATUS NtIsProcessInJob (HANDLE ProcessHandle, HANDLE JobHandle);\nNTSTATUS NtInitiatePowerAction (POWER_ACTION SystemAction, SYSTEM_POWER_STATE MinSystemState, ULONG Flags, BOOLEAN Asynchronous);\nNTSTATUS NtInitializeRegistry (USHORT BootCondition);\nNTSTATUS NtInitializeNlsFiles (PVOID *BaseAddress, PLCID DefaultLocaleId, PLARGE_INTEGER DefaultCasingTableSize);\nNTSTATUS NtImpersonateThread (HANDLE ServerThreadHandle, HANDLE ClientThreadHandle, PSECURITY_QUALITY_OF_SERVICE SecurityQos);\nNTSTATUS NtImpersonateClientOfPort (HANDLE PortHandle, PPORT_MESSAGE Message);\nNTSTATUS NtImpersonateAnonymousToken (HANDLE ThreadHandle);\nNTSTATUS NtGetWriteWatch (HANDLE ProcessHandle, ULONG Flags, PVOID BaseAddress, SIZE_T RegionSize, PVOID *UserAddressArray, PULONG_PTR EntriesInUserAddressArray, PULONG Granularity);\nNTSTATUS NtGetNotificationResourceManager (HANDLE ResourceManagerHandle, PTRANSACTION_NOTIFICATION TransactionNotification, ULONG NotificationLength, PLARGE_INTEGER Timeout, PULONG ReturnLength, ULONG Asynchronous, ULONG_PTR AsynchronousContext);\nNTSTATUS NtGetNlsSectionPtr (ULONG SectionType, ULONG SectionData, PVOID ContextData, PVOID *SectionPointer, PULONG SectionSize);\nNTSTATUS NtGetNextThread (HANDLE ProcessHandle, HANDLE ThreadHandle, ACCESS_MASK DesiredAccess, ULONG HandleAttributes, ULONG Flags, PHANDLE NewThreadHandle);\nNTSTATUS NtGetNextProcess (HANDLE ProcessHandle, ACCESS_MASK DesiredAccess, ULONG HandleAttributes, ULONG Flags, PHANDLE NewProcessHandle);\nNTSTATUS NtGetMUIRegistryInfo (ULONG Flags, PULONG DataSize, PVOID Data);\nNTSTATUS NtGetDevicePowerState (HANDLE Device, DEVICE_POWER_STATE *State);\nULONG NtGetCurrentProcessorNumber ();\nNTSTATUS NtGetContextThread (HANDLE ThreadHandle, PCONTEXT ThreadContext);\nNTSTATUS NtFsControlFile (HANDLE FileHandle, HANDLE Event, PIO_APC_ROUTINE ApcRoutine, PVOID ApcContext, PIO_STATUS_BLOCK IoStatusBlock, ULONG IoControlCode, PVOID InputBuffer, ULONG InputBufferLength, PVOID OutputBuffer, ULONG OutputBufferLength);\nNTSTATUS NtFreezeTransactions (PLARGE_INTEGER FreezeTimeout, PLARGE_INTEGER ThawTimeout);\nNTSTATUS NtFreezeRegistry (ULONG TimeOutInSeconds);\nNTSTATUS NtFreeVirtualMemory (HANDLE ProcessHandle, PVOID *BaseAddress, PSIZE_T RegionSize, ULONG FreeType);\nNTSTATUS NtFreeUserPhysicalPages (HANDLE ProcessHandle, PULONG_PTR NumberOfPages, PULONG_PTR UserPfnArray);\nNTSTATUS NtFlushWriteBuffer ();\nNTSTATUS NtFlushVirtualMemory (HANDLE ProcessHandle, PVOID *BaseAddress, PSIZE_T RegionSize, PIO_STATUS_BLOCK IoStatus);\nVOID NtFlushProcessWriteBuffers ();\nNTSTATUS NtFlushKey (HANDLE KeyHandle);\nNTSTATUS NtFlushInstructionCache (HANDLE ProcessHandle, PVOID BaseAddress, SIZE_T Length);\nNTSTATUS NtFlushInstallUILanguage (LANGID InstallUILanguage, ULONG SetComittedFlag);\nNTSTATUS NtFlushBuffersFile (HANDLE FileHandle, PIO_STATUS_BLOCK IoStatusBlock);\nNTSTATUS NtFindAtom (PWSTR AtomName, ULONG Length, PRTL_ATOM Atom);\nNTSTATUS NtFilterToken (HANDLE ExistingTokenHandle, ULONG Flags, PTOKEN_GROUPS SidsToDisable, PTOKEN_PRIVILEGES PrivilegesToDelete, PTOKEN_GROUPS RestrictedSids, PHANDLE NewTokenHandle);\nNTSTATUS NtExtendSection (HANDLE SectionHandle, PLARGE_INTEGER NewSectionSize);\nNTSTATUS NtEnumerateValueKey (HANDLE KeyHandle, ULONG Index, KEY_VALUE_INFORMATION_CLASS KeyValueInformationClass, PVOID KeyValueInformation, ULONG Length, PULONG ResultLength);\nNTSTATUS NtEnumerateTransactionObject (HANDLE RootObjectHandle, KTMOBJECT_TYPE QueryType, PKTMOBJECT_CURSOR ObjectCursor, ULONG ObjectCursorLength, PULONG ReturnLength);\nNTSTATUS NtEnumerateSystemEnvironmentValuesEx (ULONG InformationClass, PVOID Buffer, PULONG BufferLength);\nNTSTATUS NtEnumerateKey (HANDLE KeyHandle, ULONG Index, KEY_INFORMATION_CLASS KeyInformationClass, PVOID KeyInformation, ULONG Length, PULONG ResultLength);\nNTSTATUS NtEnumerateDriverEntries (PVOID Buffer, PULONG BufferLength);\nNTSTATUS NtEnumerateBootEntries (PVOID Buffer, PULONG BufferLength);\nNTSTATUS NtEnableLastKnownGood ();\nNTSTATUS NtDuplicateToken (HANDLE ExistingTokenHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, BOOLEAN EffectiveOnly, TOKEN_TYPE TokenType, PHANDLE NewTokenHandle);\nNTSTATUS NtDuplicateObject (HANDLE SourceProcessHandle, HANDLE SourceHandle, HANDLE TargetProcessHandle, PHANDLE TargetHandle, ACCESS_MASK DesiredAccess, ULONG HandleAttributes, ULONG Options);\nNTSTATUS NtDrawText (PUNICODE_STRING Text);\nNTSTATUS NtDisplayString (PUNICODE_STRING String);\nNTSTATUS NtDisableLastKnownGood ();\nNTSTATUS NtDeviceIoControlFile (HANDLE FileHandle, HANDLE Event, PIO_APC_ROUTINE ApcRoutine, PVOID ApcContext, PIO_STATUS_BLOCK IoStatusBlock, ULONG IoControlCode, PVOID InputBuffer, ULONG InputBufferLength, PVOID OutputBuffer, ULONG OutputBufferLength);\nNTSTATUS NtDeleteValueKey (HANDLE KeyHandle, PUNICODE_STRING ValueName);\nNTSTATUS NtDeletePrivateNamespace (HANDLE NamespaceHandle);\nNTSTATUS NtDeleteObjectAuditAlarm (PUNICODE_STRING SubsystemName, PVOID HandleId, BOOLEAN GenerateOnClose);\nNTSTATUS NtDeleteKey (HANDLE KeyHandle);\nNTSTATUS NtDeleteFile (POBJECT_ATTRIBUTES ObjectAttributes);\nNTSTATUS NtDeleteDriverEntry (ULONG Id);\nNTSTATUS NtDeleteBootEntry (ULONG Id);\nNTSTATUS NtDeleteAtom (RTL_ATOM Atom);\nNTSTATUS NtDelayExecution (BOOLEAN Alertable, PLARGE_INTEGER DelayInterval);\nNTSTATUS NtDebugContinue (HANDLE DebugObjectHandle, PCLIENT_ID ClientId, NTSTATUS ContinueStatus);\nNTSTATUS NtDebugActiveProcess (HANDLE ProcessHandle, HANDLE DebugObjectHandle);\nNTSTATUS NtCreateWorkerFactory (PHANDLE WorkerFactoryHandleReturn, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, HANDLE CompletionPortHandle, HANDLE WorkerProcessHandle, PVOID StartRoutine, PVOID StartParameter, ULONG MaxThreadCount, SIZE_T StackReserve, SIZE_T StackCommit);\nNTSTATUS NtCreateWaitablePort (PHANDLE PortHandle, POBJECT_ATTRIBUTES ObjectAttributes, ULONG MaxConnectionInfoLength, ULONG MaxMessageLength, ULONG MaxPoolUsage);\nNTSTATUS NtCreateUserProcess (PHANDLE ProcessHandle, PHANDLE ThreadHandle, ACCESS_MASK ProcessDesiredAccess, ACCESS_MASK ThreadDesiredAccess, POBJECT_ATTRIBUTES ProcessObjectAttributes, POBJECT_ATTRIBUTES ThreadObjectAttributes, ULONG ProcessFlags, ULONG ThreadFlags, PRTL_USER_PROCESS_PARAMETERS ProcessParameters, PPROCESS_CREATE_INFO CreateInfo, PPROCESS_ATTRIBUTE_LIST AttributeList);\nNTSTATUS NtCreateTransactionManager (PHANDLE TmHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, PUNICODE_STRING LogFileName, ULONG CreateOptions, ULONG CommitStrength);\nNTSTATUS NtCreateTransaction (PHANDLE TransactionHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, LPGUID Uow, HANDLE TmHandle, ULONG CreateOptions, ULONG IsolationLevel, ULONG IsolationFlags, PLARGE_INTEGER Timeout, PUNICODE_STRING Description);\nNTSTATUS NtCreateToken (PHANDLE TokenHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, TOKEN_TYPE TokenType, PLUID AuthenticationId, PLARGE_INTEGER ExpirationTime, PTOKEN_USER User, PTOKEN_GROUPS Groups, PTOKEN_PRIVILEGES Privileges, PTOKEN_OWNER Owner, PTOKEN_PRIMARY_GROUP PrimaryGroup, PTOKEN_DEFAULT_DACL DefaultDacl, PTOKEN_SOURCE TokenSource);\nNTSTATUS NtCreateTimer (PHANDLE TimerHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, TIMER_TYPE TimerType);\nNTSTATUS NtCreateThreadEx (PHANDLE ThreadHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, HANDLE ProcessHandle, PVOID StartRoutine, PVOID Argument, ULONG CreateFlags, ULONG_PTR ZeroBits, SIZE_T StackSize, SIZE_T MaximumStackSize, PPS_ATTRIBUTE_LIST AttributeList);\nNTSTATUS NtCreateThread (PHANDLE ThreadHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, HANDLE ProcessHandle, PCLIENT_ID ClientId, PCONTEXT ThreadContext, PINITIAL_TEB InitialTeb, BOOLEAN CreateSuspended);\nNTSTATUS NtCreateSymbolicLinkObject (PHANDLE LinkHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, PUNICODE_STRING LinkTarget);\nNTSTATUS NtCreateSemaphore (PHANDLE SemaphoreHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, LONG InitialCount, LONG MaximumCount);\n```\n\n----------------------------------------\n\nTITLE: Declaring NT Native API Function Prototypes - Windows API - C/C++\nDESCRIPTION: These code snippets declare NT Native API functions, each following the NTSTATUS return convention and accepting Windows kernel/system-specific argument types such as HANDLE, PVOID, and PUNICODE_STRING. No function bodies are present; these are header-only prototypes intended for inclusion in system programming projects targeting low-level Windows interfaces. The prototypes enable linking and usage of undocumented or native Windows APIs, allowing advanced features such as direct kernel calls, file or registry manipulation, and process control. Inputs and outputs depend on the function purpose, with handles providing context for Windows objects and structured pointers used for data exchange. Usage requires knowledge of Windows types and calling conventions, with constraints involving privilege requirements and risk of system instability if misused.\nSOURCE: https://github.com/panda-re/panda-ng/blob/main/plugins/syscalls2/generated-in/windows_xpsp2_x86_prototypes.txt#_snippet_1\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtDeleteAtom (RTL_ATOM Atom);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtDeleteBootEntry (ULONG Id);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtDeleteFile (POBJECT_ATTRIBUTES ObjectAttributes);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtDeleteKey (HANDLE KeyHandle);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtDeleteObjectAuditAlarm (PUNICODE_STRING SubsystemName, PVOID HandleId, BOOLEAN GenerateOnClose);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtDeleteValueKey (HANDLE KeyHandle, PUNICODE_STRING ValueName);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtDeviceIoControlFile (HANDLE FileHandle, HANDLE Event, PIO_APC_ROUTINE ApcRoutine, PVOID ApcContext, PIO_STATUS_BLOCK IoStatusBlock, ULONG IoControlCode, PVOID InputBuffer, ULONG InputBufferLength, PVOID OutputBuffer, ULONG OutputBufferLength);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtDisplayString (PUNICODE_STRING String);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtDuplicateObject (HANDLE SourceProcessHandle, HANDLE SourceHandle, HANDLE TargetProcessHandle, PHANDLE TargetHandle, ACCESS_MASK DesiredAccess, ULONG HandleAttributes, ULONG Options);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtDuplicateToken (HANDLE ExistingTokenHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, BOOLEAN EffectiveOnly, TOKEN_TYPE TokenType, PHANDLE NewTokenHandle);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtEnumerateBootEntries (PVOID Buffer, PULONG BufferLength);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtEnumerateKey (HANDLE KeyHandle, ULONG Index, KEY_INFORMATION_CLASS KeyInformationClass, PVOID KeyInformation, ULONG Length, PULONG ResultLength);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtEnumerateSystemEnvironmentValuesEx (ULONG InformationClass, PVOID Buffer, PULONG BufferLength);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtEnumerateValueKey (HANDLE KeyHandle, ULONG Index, KEY_VALUE_INFORMATION_CLASS KeyValueInformationClass, PVOID KeyValueInformation, ULONG Length, PULONG ResultLength);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtExtendSection (HANDLE SectionHandle, PLARGE_INTEGER NewSectionSize);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtFilterToken (HANDLE ExistingTokenHandle, ULONG Flags, PTOKEN_GROUPS SidsToDisable, PTOKEN_PRIVILEGES PrivilegesToDelete, PTOKEN_GROUPS RestrictedSids, PHANDLE NewTokenHandle);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtFindAtom (PWSTR AtomName, ULONG Length, PRTL_ATOM Atom);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtFlushBuffersFile (HANDLE FileHandle, PIO_STATUS_BLOCK IoStatusBlock);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtFlushInstructionCache (HANDLE ProcessHandle, PVOID BaseAddress, SIZE_T Length);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtFlushKey (HANDLE KeyHandle);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtFlushVirtualMemory (HANDLE ProcessHandle, PVOID *BaseAddress, PSIZE_T RegionSize, PIO_STATUS_BLOCK IoStatus);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtFlushWriteBuffer ();\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtFreeUserPhysicalPages (HANDLE ProcessHandle, PULONG_PTR NumberOfPages, PULONG_PTR UserPfnArray);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtFreeVirtualMemory (HANDLE ProcessHandle, PVOID *BaseAddress, PSIZE_T RegionSize, ULONG FreeType);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtFsControlFile (HANDLE FileHandle, HANDLE Event, PIO_APC_ROUTINE ApcRoutine, PVOID ApcContext, PIO_STATUS_BLOCK IoStatusBlock, ULONG IoControlCode, PVOID InputBuffer, ULONG InputBufferLength, PVOID OutputBuffer, ULONG OutputBufferLength);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtGetContextThread (HANDLE ThreadHandle, PCONTEXT ThreadContext);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtGetDevicePowerState (HANDLE Device, DEVICE_POWER_STATE *State);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtGetPlugPlayEvent (HANDLE EventHandle, PVOID Context, PPLUGPLAY_EVENT_BLOCK EventBlock, ULONG EventBufferSize);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtGetWriteWatch (HANDLE ProcessHandle, ULONG Flags, PVOID BaseAddress, SIZE_T RegionSize, PVOID *UserAddressArray, PULONG_PTR EntriesInUserAddressArray, PULONG Granularity);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtImpersonateAnonymousToken (HANDLE ThreadHandle);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtImpersonateClientOfPort (HANDLE PortHandle, PPORT_MESSAGE Message);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtImpersonateThread (HANDLE ServerThreadHandle, HANDLE ClientThreadHandle, PSECURITY_QUALITY_OF_SERVICE SecurityQos);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtInitializeRegistry (USHORT BootCondition);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtInitiatePowerAction (POWER_ACTION SystemAction, SYSTEM_POWER_STATE MinSystemState, ULONG Flags, BOOLEAN Asynchronous);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtIsProcessInJob (HANDLE ProcessHandle, HANDLE JobHandle);\n```\n\nLANGUAGE: c\nCODE:\n```\nBOOLEAN NtIsSystemResumeAutomatic ();\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtListenPort (HANDLE PortHandle, PPORT_MESSAGE ConnectionRequest);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtLoadDriver (PUNICODE_STRING DriverServiceName);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtLoadKey (POBJECT_ATTRIBUTES TargetKey, POBJECT_ATTRIBUTES SourceFile);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtLoadKey2 (POBJECT_ATTRIBUTES TargetKey, POBJECT_ATTRIBUTES SourceFile, ULONG Flags);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtLockFile (HANDLE FileHandle, HANDLE Event, PIO_APC_ROUTINE ApcRoutine, PVOID ApcContext, PIO_STATUS_BLOCK IoStatusBlock, PLARGE_INTEGER ByteOffset, PLARGE_INTEGER Length, ULONG Key, BOOLEAN FailImmediately, BOOLEAN ExclusiveLock);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtLockProductActivationKeys (ULONG *pPrivateVer, ULONG *pSafeMode);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtLockRegistryKey (HANDLE KeyHandle);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtLockVirtualMemory (HANDLE ProcessHandle, PVOID *BaseAddress, PSIZE_T RegionSize, ULONG MapType);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtMakePermanentObject (HANDLE Handle);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtMakeTemporaryObject (HANDLE Handle);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtMapUserPhysicalPages (PVOID VirtualAddress, ULONG_PTR NumberOfPages, PULONG_PTR UserPfnArray);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtMapUserPhysicalPagesScatter (PVOID *VirtualAddresses, ULONG_PTR NumberOfPages, PULONG_PTR UserPfnArray);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtMapViewOfSection (HANDLE SectionHandle, HANDLE ProcessHandle, PVOID *BaseAddress, ULONG_PTR ZeroBits, SIZE_T CommitSize, PLARGE_INTEGER SectionOffset, PSIZE_T ViewSize, SECTION_INHERIT InheritDisposition, ULONG AllocationType, WIN32_PROTECTION_MASK Win32Protect);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtModifyBootEntry (PBOOT_ENTRY BootEntry);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtNotifyChangeDirectoryFile (HANDLE FileHandle, HANDLE Event, PIO_APC_ROUTINE ApcRoutine, PVOID ApcContext, PIO_STATUS_BLOCK IoStatusBlock, PVOID Buffer, ULONG Length, ULONG CompletionFilter, BOOLEAN WatchTree);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtNotifyChangeKey (HANDLE KeyHandle, HANDLE Event, PIO_APC_ROUTINE ApcRoutine, PVOID ApcContext, PIO_STATUS_BLOCK IoStatusBlock, ULONG CompletionFilter, BOOLEAN WatchTree, PVOID Buffer, ULONG BufferSize, BOOLEAN Asynchronous);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtNotifyChangeMultipleKeys (HANDLE MasterKeyHandle, ULONG Count, OBJECT_ATTRIBUTES SlaveObjects[], HANDLE Event, PIO_APC_ROUTINE ApcRoutine, PVOID ApcContext, PIO_STATUS_BLOCK IoStatusBlock, ULONG CompletionFilter, BOOLEAN WatchTree, PVOID Buffer, ULONG BufferSize, BOOLEAN Asynchronous);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtOpenDirectoryObject (PHANDLE DirectoryHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtOpenEvent (PHANDLE EventHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtOpenEventPair (PHANDLE EventPairHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtOpenFile (PHANDLE FileHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, PIO_STATUS_BLOCK IoStatusBlock, ULONG ShareAccess, ULONG OpenOptions);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtOpenIoCompletion (PHANDLE IoCompletionHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtOpenJobObject (PHANDLE JobHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtOpenKey (PHANDLE KeyHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtOpenMutant (PHANDLE MutantHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtOpenObjectAuditAlarm (PUNICODE_STRING SubsystemName, PVOID HandleId, PUNICODE_STRING ObjectTypeName, PUNICODE_STRING ObjectName, PSECURITY_DESCRIPTOR SecurityDescriptor, HANDLE ClientToken, ACCESS_MASK DesiredAccess, ACCESS_MASK GrantedAccess, PPRIVILEGE_SET Privileges, BOOLEAN ObjectCreation, BOOLEAN AccessGranted, PBOOLEAN GenerateOnClose);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtOpenProcess (PHANDLE ProcessHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, PCLIENT_ID ClientId);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtOpenProcessToken (HANDLE ProcessHandle, ACCESS_MASK DesiredAccess, PHANDLE TokenHandle);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtOpenProcessTokenEx (HANDLE ProcessHandle, ACCESS_MASK DesiredAccess, ULONG HandleAttributes, PHANDLE TokenHandle);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtOpenSection (PHANDLE SectionHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtOpenSemaphore (PHANDLE SemaphoreHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtOpenSymbolicLinkObject (PHANDLE LinkHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtOpenThread (PHANDLE ThreadHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, PCLIENT_ID ClientId);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtOpenThreadToken (HANDLE ThreadHandle, ACCESS_MASK DesiredAccess, BOOLEAN OpenAsSelf, PHANDLE TokenHandle);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtOpenThreadTokenEx (HANDLE ThreadHandle, ACCESS_MASK DesiredAccess, BOOLEAN OpenAsSelf, ULONG HandleAttributes, PHANDLE TokenHandle);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtOpenTimer (PHANDLE TimerHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtPlugPlayControl (PLUGPLAY_CONTROL_CLASS PnPControlClass, PVOID PnPControlData, ULONG PnPControlDataLength);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtPowerInformation (POWER_INFORMATION_LEVEL InformationLevel, PVOID InputBuffer, ULONG InputBufferLength, PVOID OutputBuffer, ULONG OutputBufferLength);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtPrivilegeCheck (HANDLE ClientToken, PPRIVILEGE_SET RequiredPrivileges, PBOOLEAN Result);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtPrivilegeObjectAuditAlarm (PUNICODE_STRING SubsystemName, PVOID HandleId, HANDLE ClientToken, ACCESS_MASK DesiredAccess, PPRIVILEGE_SET Privileges, BOOLEAN AccessGranted);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtPrivilegedServiceAuditAlarm (PUNICODE_STRING SubsystemName, PUNICODE_STRING ServiceName, HANDLE ClientToken, PPRIVILEGE_SET Privileges, BOOLEAN AccessGranted);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtProtectVirtualMemory (HANDLE ProcessHandle, PVOID *BaseAddress, PSIZE_T RegionSize, WIN32_PROTECTION_MASK NewProtectWin32, PULONG OldProtect);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtPulseEvent (HANDLE EventHandle, PLONG PreviousState);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtQueryAttributesFile (POBJECT_ATTRIBUTES ObjectAttributes, PFILE_BASIC_INFORMATION FileInformation);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtQueryBootEntryOrder (PULONG Ids, PULONG Count);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtQueryBootOptions (PBOOT_OPTIONS BootOptions, PULONG BootOptionsLength);\n```\n\n----------------------------------------\n\nTITLE: Declaring NT Native API Prototypes - Windows Native Subsystem - C\nDESCRIPTION: Each snippet declares a function prototype for a Windows NT system call, using the C language syntax. These declarations specify function names, return types (NTSTATUS or BOOLEAN), and all required parameters, with complex parameters as pointers to data structures defined in Windows headers. These prototypes require including appropriate Windows type definitions. The functions are typically called from low-level applications, drivers, or tools interfacing with the NT native API, with inputs and outputs corresponding to the argument list. As declarations, they do not include function bodies, only the interface specification.\nSOURCE: https://github.com/panda-re/panda-ng/blob/main/plugins/syscalls2/generated-in/windows_vistasp12_x64_prototypes.txt#_snippet_6\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtGetNlsSectionPtr (ULONG SectionType, ULONG SectionData, PVOID ContextData, PVOID *SectionPointer, PULONG SectionSize);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtGetNotificationResourceManager (HANDLE ResourceManagerHandle, PTRANSACTION_NOTIFICATION TransactionNotification, ULONG NotificationLength, PLARGE_INTEGER Timeout, PULONG ReturnLength, ULONG Asynchronous, ULONG_PTR AsynchronousContext);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtGetPlugPlayEvent (HANDLE EventHandle, PVOID Context, PPLUGPLAY_EVENT_BLOCK EventBlock, ULONG EventBufferSize);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtGetWriteWatch (HANDLE ProcessHandle, ULONG Flags, PVOID BaseAddress, SIZE_T RegionSize, PVOID *UserAddressArray, PULONG_PTR EntriesInUserAddressArray, PULONG Granularity);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtImpersonateAnonymousToken (HANDLE ThreadHandle);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtImpersonateThread (HANDLE ServerThreadHandle, HANDLE ClientThreadHandle, PSECURITY_QUALITY_OF_SERVICE SecurityQos);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtInitializeNlsFiles (PVOID *BaseAddress, PLCID DefaultLocaleId, PLARGE_INTEGER DefaultCasingTableSize);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtInitializeRegistry (USHORT BootCondition);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtInitiatePowerAction (POWER_ACTION SystemAction, SYSTEM_POWER_STATE MinSystemState, ULONG Flags, BOOLEAN Asynchronous);\n```\n\nLANGUAGE: c\nCODE:\n```\nBOOLEAN NtIsSystemResumeAutomatic ();\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtIsUILanguageComitted ();\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtListenPort (HANDLE PortHandle, PPORT_MESSAGE ConnectionRequest);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtLoadDriver (PUNICODE_STRING DriverServiceName);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtLoadKey (POBJECT_ATTRIBUTES TargetKey, POBJECT_ATTRIBUTES SourceFile);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtLoadKey2 (POBJECT_ATTRIBUTES TargetKey, POBJECT_ATTRIBUTES SourceFile, ULONG Flags);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtLoadKeyEx (POBJECT_ATTRIBUTES TargetKey, POBJECT_ATTRIBUTES SourceFile, ULONG Flags, HANDLE TrustClassKey );\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtLockFile (HANDLE FileHandle, HANDLE Event, PIO_APC_ROUTINE ApcRoutine, PVOID ApcContext, PIO_STATUS_BLOCK IoStatusBlock, PLARGE_INTEGER ByteOffset, PLARGE_INTEGER Length, ULONG Key, BOOLEAN FailImmediately, BOOLEAN ExclusiveLock);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtLockProductActivationKeys (ULONG *pPrivateVer, ULONG *pSafeMode);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtLockRegistryKey (HANDLE KeyHandle);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtLockVirtualMemory (HANDLE ProcessHandle, PVOID *BaseAddress, PSIZE_T RegionSize, ULONG MapType);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtMakePermanentObject (HANDLE Handle);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtMakeTemporaryObject (HANDLE Handle);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtMapCMFModule (ULONG What, ULONG Index, PULONG CacheIndexOut, PULONG CacheFlagsOut, PULONG ViewSizeOut, PVOID *BaseAddress);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtMapUserPhysicalPages (PVOID VirtualAddress, ULONG_PTR NumberOfPages, PULONG_PTR UserPfnArray);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtModifyBootEntry (PBOOT_ENTRY BootEntry);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtModifyDriverEntry (PEFI_DRIVER_ENTRY DriverEntry);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtNotifyChangeDirectoryFile (HANDLE FileHandle, HANDLE Event, PIO_APC_ROUTINE ApcRoutine, PVOID ApcContext, PIO_STATUS_BLOCK IoStatusBlock, PVOID Buffer, ULONG Length, ULONG CompletionFilter, BOOLEAN WatchTree);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtNotifyChangeKey (HANDLE KeyHandle, HANDLE Event, PIO_APC_ROUTINE ApcRoutine, PVOID ApcContext, PIO_STATUS_BLOCK IoStatusBlock, ULONG CompletionFilter, BOOLEAN WatchTree, PVOID Buffer, ULONG BufferSize, BOOLEAN Asynchronous);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtNotifyChangeMultipleKeys (HANDLE MasterKeyHandle, ULONG Count, OBJECT_ATTRIBUTES SlaveObjects[], HANDLE Event, PIO_APC_ROUTINE ApcRoutine, PVOID ApcContext, PIO_STATUS_BLOCK IoStatusBlock, ULONG CompletionFilter, BOOLEAN WatchTree, PVOID Buffer, ULONG BufferSize, BOOLEAN Asynchronous);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtOpenEnlistment (PHANDLE EnlistmentHandle, ACCESS_MASK DesiredAccess, HANDLE ResourceManagerHandle, LPGUID EnlistmentGuid, POBJECT_ATTRIBUTES ObjectAttributes);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtOpenEventPair (PHANDLE EventPairHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtOpenIoCompletion (PHANDLE IoCompletionHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtOpenJobObject (PHANDLE JobHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtOpenKeyTransacted (PHANDLE KeyHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, HANDLE TransactionHandle);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtOpenKeyedEvent (PHANDLE KeyedEventHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtOpenMutant (PHANDLE MutantHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtOpenObjectAuditAlarm (PUNICODE_STRING SubsystemName, PVOID HandleId, PUNICODE_STRING ObjectTypeName, PUNICODE_STRING ObjectName, PSECURITY_DESCRIPTOR SecurityDescriptor, HANDLE ClientToken, ACCESS_MASK DesiredAccess, ACCESS_MASK GrantedAccess, PPRIVILEGE_SET Privileges, BOOLEAN ObjectCreation, BOOLEAN AccessGranted, PBOOLEAN GenerateOnClose);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtOpenPrivateNamespace (PHANDLE NamespaceHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, PVOID BoundaryDescriptor);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtOpenProcessToken (HANDLE ProcessHandle, ACCESS_MASK DesiredAccess, PHANDLE TokenHandle);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtOpenResourceManager (PHANDLE ResourceManagerHandle, ACCESS_MASK DesiredAccess, HANDLE TmHandle, LPGUID ResourceManagerGuid, POBJECT_ATTRIBUTES ObjectAttributes);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtOpenSemaphore (PHANDLE SemaphoreHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtOpenSession (PHANDLE SessionHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtOpenSymbolicLinkObject (PHANDLE LinkHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtOpenThread (PHANDLE ThreadHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, PCLIENT_ID ClientId);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtOpenTimer (PHANDLE TimerHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtOpenTransaction (PHANDLE TransactionHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, LPGUID Uow, HANDLE TmHandle);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtOpenTransactionManager (PHANDLE TmHandle, ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES ObjectAttributes, PUNICODE_STRING LogFileName, LPGUID TmIdentity, ULONG OpenOptions);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtPlugPlayControl (PLUGPLAY_CONTROL_CLASS PnPControlClass, PVOID PnPControlData, ULONG PnPControlDataLength);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtPrePrepareComplete (HANDLE EnlistmentHandle, PLARGE_INTEGER TmVirtualClock);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtPrePrepareEnlistment (HANDLE EnlistmentHandle, PLARGE_INTEGER TmVirtualClock);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtPrepareComplete (HANDLE EnlistmentHandle, PLARGE_INTEGER TmVirtualClock);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtPrepareEnlistment (HANDLE EnlistmentHandle, PLARGE_INTEGER TmVirtualClock);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtPrivilegeCheck (HANDLE ClientToken, PPRIVILEGE_SET RequiredPrivileges, PBOOLEAN Result);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtPrivilegeObjectAuditAlarm (PUNICODE_STRING SubsystemName, PVOID HandleId, HANDLE ClientToken, ACCESS_MASK DesiredAccess, PPRIVILEGE_SET Privileges, BOOLEAN AccessGranted);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtPrivilegedServiceAuditAlarm (PUNICODE_STRING SubsystemName, PUNICODE_STRING ServiceName, HANDLE ClientToken, PPRIVILEGE_SET Privileges, BOOLEAN AccessGranted);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtPropagationComplete (HANDLE ResourceManagerHandle, ULONG RequestCookie, ULONG BufferLength, PVOID Buffer);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtPropagationFailed (HANDLE ResourceManagerHandle, ULONG RequestCookie, NTSTATUS PropStatus);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtPulseEvent (HANDLE EventHandle, PLONG PreviousState);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtQueryBootEntryOrder (PULONG Ids, PULONG Count);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtQueryBootOptions (PBOOT_OPTIONS BootOptions, PULONG BootOptionsLength);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtQueryDebugFilterState (ULONG ComponentId, ULONG Level);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtQueryDirectoryObject (HANDLE DirectoryHandle, PVOID Buffer, ULONG Length, BOOLEAN ReturnSingleEntry, BOOLEAN RestartScan, PULONG Context, PULONG ReturnLength);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtQueryDriverEntryOrder (PULONG Ids, PULONG Count);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtQueryEaFile (HANDLE FileHandle, PIO_STATUS_BLOCK IoStatusBlock, PVOID Buffer, ULONG Length, BOOLEAN ReturnSingleEntry, PVOID EaList, ULONG EaListLength, PULONG EaIndex, BOOLEAN RestartScan);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtQueryFullAttributesFile (POBJECT_ATTRIBUTES ObjectAttributes, PFILE_NETWORK_OPEN_INFORMATION FileInformation);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtQueryInformationAtom (RTL_ATOM Atom, ATOM_INFORMATION_CLASS InformationClass, PVOID AtomInformation, ULONG AtomInformationLength, PULONG ReturnLength);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtQueryInformationEnlistment (HANDLE EnlistmentHandle, ENLISTMENT_INFORMATION_CLASS EnlistmentInformationClass, PVOID EnlistmentInformation, ULONG EnlistmentInformationLength, PULONG ReturnLength);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtQueryInformationJobObject (HANDLE JobHandle, JOBOBJECTINFOCLASS JobObjectInformationClass, PVOID JobObjectInformation, ULONG JobObjectInformationLength, PULONG ReturnLength);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtQueryInformationPort (HANDLE PortHandle, PORT_INFORMATION_CLASS PortInformationClass, PVOID PortInformation, ULONG Length, PULONG ReturnLength);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtQueryInformationResourceManager (HANDLE ResourceManagerHandle, RESOURCEMANAGER_INFORMATION_CLASS ResourceManagerInformationClass, PVOID ResourceManagerInformation, ULONG ResourceManagerInformationLength, PULONG ReturnLength);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtQueryInformationTransaction (HANDLE TransactionHandle, TRANSACTION_INFORMATION_CLASS TransactionInformationClass, PVOID TransactionInformation, ULONG TransactionInformationLength, PULONG ReturnLength);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtQueryInformationTransactionManager (HANDLE TransactionManagerHandle, TRANSACTIONMANAGER_INFORMATION_CLASS TransactionManagerInformationClass, PVOID TransactionManagerInformation, ULONG TransactionManagerInformationLength, PULONG ReturnLength);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtQueryInformationWorkerFactory (HANDLE WorkerFactoryHandle, WORKERFACTORYINFOCLASS WorkerFactoryInformationClass, PVOID WorkerFactoryInformation, ULONG WorkerFactoryInformationLength, PULONG ReturnLength);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtQueryInstallUILanguage (LANGID *InstallUILanguageId);\n```\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtQueryIntervalProfile (KPROFILE_SOURCE ProfileSource, PULONG Interval);\n```\n\n----------------------------------------\n\nTITLE: Privilege and Audit Operations in Windows Native API - C\nDESCRIPTION: These prototypes expose advanced privilege auditing and checking mechanisms, such as NtPrivilegeObjectAuditAlarm, NtPrivilegedServiceAuditAlarm, and NtPrivilegeCheck. They facilitate detailed privilege validation and security auditing in kernel operations, requiring correctly initialized structures and tokens. Improper privilege assignment or audit logic could result in security holes or audit failures.\nSOURCE: https://github.com/panda-re/panda-ng/blob/main/plugins/syscalls2/generated-in/windows_8sp1_x86_prototypes.txt#_snippet_6\n\nLANGUAGE: C\nCODE:\n```\nNTSTATUS NtPrivilegeObjectAuditAlarm (PUNICODE_STRING SubsystemName, PVOID HandleId, HANDLE ClientToken, ACCESS_MASK DesiredAccess, PPRIVILEGE_SET Privileges, BOOLEAN AccessGranted);\n```\n\nLANGUAGE: C\nCODE:\n```\nNTSTATUS NtPrivilegedServiceAuditAlarm (PUNICODE_STRING SubsystemName, PUNICODE_STRING ServiceName, HANDLE ClientToken, PPRIVILEGE_SET Privileges, BOOLEAN AccessGranted);\n```\n\nLANGUAGE: C\nCODE:\n```\nNTSTATUS NtPrivilegeCheck (HANDLE ClientToken, PPRIVILEGE_SET RequiredPrivileges, PBOOLEAN Result);\n```\n\n----------------------------------------\n\nTITLE: Declaring NT Native API Function Prototypes - C/C++\nDESCRIPTION: This code snippet defines a series of Windows NT Native API function prototypes in C/C++, allowing direct invocation of low-level kernel services from user-mode or kernel-mode code. The functions cover diverse operations such as memory protection, event signaling, querying system or object attributes, and manipulating threads and processes. All prototypes return an NTSTATUS result and use pointers, handles, and type-specific structures for parameter passing and output, requiring proper inclusion of Windows headers and access to relevant data types (e.g., HANDLE, OBJECT_ATTRIBUTES, IO_STATUS_BLOCK). Inputs are typically handles or pointers referencing kernel objects, while outputs are often pointers to system information or status structures. Proper privilege is required to use these calls, and misuse may result in undefined or system-wide effects.\nSOURCE: https://github.com/panda-re/panda-ng/blob/main/plugins/syscalls2/generated-in/windows_vistasp12_x86_prototypes.txt#_snippet_3\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtProtectVirtualMemory (HANDLE ProcessHandle, PVOID *BaseAddress, PSIZE_T RegionSize, WIN32_PROTECTION_MASK NewProtectWin32, PULONG OldProtect);\nNTSTATUS NtPulseEvent (HANDLE EventHandle, PLONG PreviousState);\nNTSTATUS NtQueryAttributesFile (POBJECT_ATTRIBUTES ObjectAttributes, PFILE_BASIC_INFORMATION FileInformation);\nNTSTATUS NtQueryBootEntryOrder (PULONG Ids, PULONG Count);\nNTSTATUS NtQueryBootOptions (PBOOT_OPTIONS BootOptions, PULONG BootOptionsLength);\nNTSTATUS NtQueryDebugFilterState (ULONG ComponentId, ULONG Level);\nNTSTATUS NtQueryDefaultLocale (BOOLEAN UserProfile, PLCID DefaultLocaleId);\nNTSTATUS NtQueryDefaultUILanguage (LANGID *DefaultUILanguageId);\nNTSTATUS NtQueryDirectoryFile (HANDLE FileHandle, HANDLE Event, PIO_APC_ROUTINE ApcRoutine, PVOID ApcContext, PIO_STATUS_BLOCK IoStatusBlock, PVOID FileInformation, ULONG Length, FILE_INFORMATION_CLASS FileInformationClass, BOOLEAN ReturnSingleEntry, PUNICODE_STRING FileName, BOOLEAN RestartScan);\nNTSTATUS NtQueryDirectoryObject (HANDLE DirectoryHandle, PVOID Buffer, ULONG Length, BOOLEAN ReturnSingleEntry, BOOLEAN RestartScan, PULONG Context, PULONG ReturnLength);\nNTSTATUS NtQueryDriverEntryOrder (PULONG Ids, PULONG Count);\nNTSTATUS NtQueryEaFile (HANDLE FileHandle, PIO_STATUS_BLOCK IoStatusBlock, PVOID Buffer, ULONG Length, BOOLEAN ReturnSingleEntry, PVOID EaList, ULONG EaListLength, PULONG EaIndex, BOOLEAN RestartScan);\nNTSTATUS NtQueryEvent (HANDLE EventHandle, EVENT_INFORMATION_CLASS EventInformationClass, PVOID EventInformation, ULONG EventInformationLength, PULONG ReturnLength);\nNTSTATUS NtQueryFullAttributesFile (POBJECT_ATTRIBUTES ObjectAttributes, PFILE_NETWORK_OPEN_INFORMATION FileInformation);\nNTSTATUS NtQueryInformationAtom (RTL_ATOM Atom, ATOM_INFORMATION_CLASS InformationClass, PVOID AtomInformation, ULONG AtomInformationLength, PULONG ReturnLength);\nNTSTATUS NtQueryInformationFile (HANDLE FileHandle, PIO_STATUS_BLOCK IoStatusBlock, PVOID FileInformation, ULONG Length, FILE_INFORMATION_CLASS FileInformationClass);\nNTSTATUS NtQueryInformationJobObject (HANDLE JobHandle, JOBOBJECTINFOCLASS JobObjectInformationClass, PVOID JobObjectInformation, ULONG JobObjectInformationLength, PULONG ReturnLength);\nNTSTATUS NtQueryInformationPort (HANDLE PortHandle, PORT_INFORMATION_CLASS PortInformationClass, PVOID PortInformation, ULONG Length, PULONG ReturnLength);\nNTSTATUS NtQueryInformationProcess (HANDLE ProcessHandle, PROCESSINFOCLASS ProcessInformationClass, PVOID ProcessInformation, ULONG ProcessInformationLength, PULONG ReturnLength);\nNTSTATUS NtQueryInformationThread (HANDLE ThreadHandle, THREADINFOCLASS ThreadInformationClass, PVOID ThreadInformation, ULONG ThreadInformationLength, PULONG ReturnLength);\nNTSTATUS NtQueryInformationToken (HANDLE TokenHandle, TOKEN_INFORMATION_CLASS TokenInformationClass, PVOID TokenInformation, ULONG TokenInformationLength, PULONG ReturnLength);\nNTSTATUS NtQueryInstallUILanguage (LANGID *InstallUILanguageId);\nNTSTATUS NtQueryIntervalProfile (KPROFILE_SOURCE ProfileSource, PULONG Interval);\nNTSTATUS NtQueryIoCompletion (HANDLE IoCompletionHandle, IO_COMPLETION_INFORMATION_CLASS IoCompletionInformationClass, PVOID IoCompletionInformation, ULONG IoCompletionInformationLength, PULONG ReturnLength);\nNTSTATUS NtQueryKey (HANDLE KeyHandle, KEY_INFORMATION_CLASS KeyInformationClass, PVOID KeyInformation, ULONG Length, PULONG ResultLength);\nNTSTATUS NtQueryMultipleValueKey (HANDLE KeyHandle, PKEY_VALUE_ENTRY ValueEntries, ULONG EntryCount, PVOID ValueBuffer, PULONG BufferLength, PULONG RequiredBufferLength);\nNTSTATUS NtQueryMutant (HANDLE MutantHandle, MUTANT_INFORMATION_CLASS MutantInformationClass, PVOID MutantInformation, ULONG MutantInformationLength, PULONG ReturnLength);\nNTSTATUS NtQueryObject (HANDLE Handle, OBJECT_INFORMATION_CLASS ObjectInformationClass, PVOID ObjectInformation, ULONG ObjectInformationLength, PULONG ReturnLength);\nNTSTATUS NtQueryOpenSubKeys (POBJECT_ATTRIBUTES TargetKey, PULONG HandleCount);\nNTSTATUS NtQueryOpenSubKeysEx (POBJECT_ATTRIBUTES TargetKey, ULONG BufferLength, PVOID Buffer, PULONG RequiredSize);\nNTSTATUS NtQueryPerformanceCounter (PLARGE_INTEGER PerformanceCounter, PLARGE_INTEGER PerformanceFrequency);\nNTSTATUS NtQueryQuotaInformationFile (HANDLE FileHandle, PIO_STATUS_BLOCK IoStatusBlock, PVOID Buffer, ULONG Length, BOOLEAN ReturnSingleEntry, PVOID SidList, ULONG SidListLength, PULONG StartSid, BOOLEAN RestartScan);\nNTSTATUS NtQuerySection (HANDLE SectionHandle, SECTION_INFORMATION_CLASS SectionInformationClass, PVOID SectionInformation, SIZE_T SectionInformationLength, PSIZE_T ReturnLength);\nNTSTATUS NtQuerySecurityObject (HANDLE Handle, SECURITY_INFORMATION SecurityInformation, PSECURITY_DESCRIPTOR SecurityDescriptor, ULONG Length, PULONG LengthNeeded);\nNTSTATUS NtQuerySemaphore (HANDLE SemaphoreHandle, SEMAPHORE_INFORMATION_CLASS SemaphoreInformationClass, PVOID SemaphoreInformation, ULONG SemaphoreInformationLength, PULONG ReturnLength);\nNTSTATUS NtQuerySymbolicLinkObject (HANDLE LinkHandle, PUNICODE_STRING LinkTarget, PULONG ReturnedLength);\nNTSTATUS NtQuerySystemEnvironmentValue (PUNICODE_STRING VariableName, PWSTR VariableValue, USHORT ValueLength, PUSHORT ReturnLength);\nNTSTATUS NtQuerySystemEnvironmentValueEx (PUNICODE_STRING VariableName, LPGUID VendorGuid, PVOID Value, PULONG ValueLength, PULONG Attributes);\nNTSTATUS NtQuerySystemInformation (SYSTEM_INFORMATION_CLASS SystemInformationClass, PVOID SystemInformation, ULONG SystemInformationLength, PULONG ReturnLength);\nNTSTATUS NtQuerySystemTime (PLARGE_INTEGER SystemTime);\nNTSTATUS NtQueryTimer (HANDLE TimerHandle, TIMER_INFORMATION_CLASS TimerInformationClass, PVOID TimerInformation, ULONG TimerInformationLength, PULONG ReturnLength);\nNTSTATUS NtQueryTimerResolution (PULONG MaximumTime, PULONG MinimumTime, PULONG CurrentTime);\nNTSTATUS NtQueryValueKey (HANDLE KeyHandle, PUNICODE_STRING ValueName, KEY_VALUE_INFORMATION_CLASS KeyValueInformationClass, PVOID KeyValueInformation, ULONG Length, PULONG ResultLength);\nNTSTATUS NtQueryVirtualMemory (HANDLE ProcessHandle, PVOID BaseAddress, MEMORY_INFORMATION_CLASS MemoryInformationClass, PVOID MemoryInformation, SIZE_T MemoryInformationLength, PSIZE_T ReturnLength);\nNTSTATUS NtQueryVolumeInformationFile (HANDLE FileHandle, PIO_STATUS_BLOCK IoStatusBlock, PVOID FsInformation, ULONG Length, FS_INFORMATION_CLASS FsInformationClass);\nNTSTATUS NtQueueApcThread (HANDLE ThreadHandle, PPS_APC_ROUTINE ApcRoutine, PVOID ApcArgument1, PVOID ApcArgument2, PVOID ApcArgument3);\nNTSTATUS NtRaiseException (PEXCEPTION_RECORD ExceptionRecord, PCONTEXT ContextRecord, BOOLEAN FirstChance);\nNTSTATUS NtRaiseHardError (NTSTATUS ErrorStatus, ULONG NumberOfParameters, ULONG UnicodeStringParameterMask, PULONG_PTR Parameters, ULONG ValidResponseOptions, PULONG Response);\nNTSTATUS NtReadFile (HANDLE FileHandle, HANDLE Event, PIO_APC_ROUTINE ApcRoutine, PVOID ApcContext, PIO_STATUS_BLOCK IoStatusBlock, PVOID Buffer, ULONG Length, PLARGE_INTEGER ByteOffset, PULONG Key);\nNTSTATUS NtReadFileScatter (HANDLE FileHandle, HANDLE Event, PIO_APC_ROUTINE ApcRoutine, PVOID ApcContext, PIO_STATUS_BLOCK IoStatusBlock, PFILE_SEGMENT_ELEMENT SegmentArray, ULONG Length, PLARGE_INTEGER ByteOffset, PULONG Key);\nNTSTATUS NtReadRequestData (HANDLE PortHandle, PPORT_MESSAGE Message, ULONG DataEntryIndex, PVOID Buffer, SIZE_T BufferSize, PSIZE_T NumberOfBytesRead);\nNTSTATUS NtReadVirtualMemory (HANDLE ProcessHandle, PVOID BaseAddress, PVOID Buffer, SIZE_T BufferSize, PSIZE_T NumberOfBytesRead);\nNTSTATUS NtRegisterThreadTerminatePort (HANDLE PortHandle);\nNTSTATUS NtReleaseMutant (HANDLE MutantHandle, PLONG PreviousCount);\nNTSTATUS NtReleaseSemaphore (HANDLE SemaphoreHandle, LONG ReleaseCount, PLONG PreviousCount);\nNTSTATUS NtRemoveIoCompletion (HANDLE IoCompletionHandle, PVOID *KeyContext, PVOID *ApcContext, PIO_STATUS_BLOCK IoStatusBlock, PLARGE_INTEGER Timeout);\nNTSTATUS NtRemoveProcessDebug (HANDLE ProcessHandle, HANDLE DebugObjectHandle);\nNTSTATUS NtRenameKey (HANDLE KeyHandle, PUNICODE_STRING NewName);\nNTSTATUS NtReplaceKey (POBJECT_ATTRIBUTES NewFile, HANDLE TargetHandle, POBJECT_ATTRIBUTES OldFile);\nNTSTATUS NtReplacePartitionUnit (PUNICODE_STRING TargetInstancePath, PUNICODE_STRING SpareInstancePath, ULONG Flags);\nNTSTATUS NtReplyPort (HANDLE PortHandle, PPORT_MESSAGE ReplyMessage);\nNTSTATUS NtReplyWaitReceivePort (HANDLE PortHandle, PVOID *PortContext , PPORT_MESSAGE ReplyMessage, PPORT_MESSAGE ReceiveMessage);\nNTSTATUS NtReplyWaitReceivePortEx (HANDLE PortHandle, PVOID *PortContext, PPORT_MESSAGE ReplyMessage, PPORT_MESSAGE ReceiveMessage, PLARGE_INTEGER Timeout);\nNTSTATUS NtReplyWaitReplyPort (HANDLE PortHandle, PPORT_MESSAGE ReplyMessage);\nNTSTATUS NtRequestPort (HANDLE PortHandle, PPORT_MESSAGE RequestMessage);\nNTSTATUS NtRequestWaitReplyPort (HANDLE PortHandle, PPORT_MESSAGE RequestMessage, PPORT_MESSAGE ReplyMessage);\nNTSTATUS NtResetEvent (HANDLE EventHandle, PLONG PreviousState);\nNTSTATUS NtResetWriteWatch (HANDLE ProcessHandle, PVOID BaseAddress, SIZE_T RegionSize);\nNTSTATUS NtRestoreKey (HANDLE KeyHandle, HANDLE FileHandle, ULONG Flags);\nNTSTATUS NtResumeProcess (HANDLE ProcessHandle);\nNTSTATUS NtResumeThread (HANDLE ThreadHandle, PULONG PreviousSuspendCount);\nNTSTATUS NtSaveKey (HANDLE KeyHandle, HANDLE FileHandle);\nNTSTATUS NtSaveKeyEx (HANDLE KeyHandle, HANDLE FileHandle, ULONG Format);\nNTSTATUS NtSaveMergedKeys (HANDLE HighPrecedenceKeyHandle, HANDLE LowPrecedenceKeyHandle, HANDLE FileHandle);\n```\n\n----------------------------------------\n\nTITLE: Declaring Windows NTAPI Query and Set Functions in C\nDESCRIPTION: These are function declarations for various Windows Native API (NTAPI) operations implemented by the operating system kernel. Each function corresponds to a kernel service for querying or updating state for files, system objects, registry, or OS-wide configuration, following the NTSTATUS error/status reporting convention. Required dependencies include Windows NT kernel headers for types such as HANDLE, NTSTATUS, PVOID, and various _INFORMATION_CLASS enumerations. Parameters are strongly typed and tailored to the targeted OS subsystem. These prototypes are intended to be included in a system header and used via dynamic linking or direct system call contexts. Inputs and outputs vary per function, most take pointers to data structures for both input parameters and output results. Limitations include the need for appropriate privilege levels, kernel-mode context, and awareness of type definitions from Windows SDK or DDK headers.\nSOURCE: https://github.com/panda-re/panda-ng/blob/main/plugins/syscalls2/generated-in/windows_xpsp3_x86_prototypes.txt#_snippet_3\n\nLANGUAGE: c\nCODE:\n```\nNTSTATUS NtQueryDebugFilterState (ULONG ComponentId, ULONG Level);\nNTSTATUS NtQueryDefaultLocale (BOOLEAN UserProfile, PLCID DefaultLocaleId);\nNTSTATUS NtQueryDefaultUILanguage (LANGID *DefaultUILanguageId);\nNTSTATUS NtQueryDirectoryFile (HANDLE FileHandle, HANDLE Event, PIO_APC_ROUTINE ApcRoutine, PVOID ApcContext, PIO_STATUS_BLOCK IoStatusBlock, PVOID FileInformation, ULONG Length, FILE_INFORMATION_CLASS FileInformationClass, BOOLEAN ReturnSingleEntry, PUNICODE_STRING FileName, BOOLEAN RestartScan);\nNTSTATUS NtQueryDirectoryObject (HANDLE DirectoryHandle, PVOID Buffer, ULONG Length, BOOLEAN ReturnSingleEntry, BOOLEAN RestartScan, PULONG Context, PULONG ReturnLength);\nNTSTATUS NtQueryEaFile (HANDLE FileHandle, PIO_STATUS_BLOCK IoStatusBlock, PVOID Buffer, ULONG Length, BOOLEAN ReturnSingleEntry, PVOID EaList, ULONG EaListLength, PULONG EaIndex, BOOLEAN RestartScan);\nNTSTATUS NtQueryEvent (HANDLE EventHandle, EVENT_INFORMATION_CLASS EventInformationClass, PVOID EventInformation, ULONG EventInformationLength, PULONG ReturnLength);\nNTSTATUS NtQueryFullAttributesFile (POBJECT_ATTRIBUTES ObjectAttributes, PFILE_NETWORK_OPEN_INFORMATION FileInformation);\nNTSTATUS NtQueryInformationAtom (RTL_ATOM Atom, ATOM_INFORMATION_CLASS InformationClass, PVOID AtomInformation, ULONG AtomInformationLength, PULONG ReturnLength);\nNTSTATUS NtQueryInformationFile (HANDLE FileHandle, PIO_STATUS_BLOCK IoStatusBlock, PVOID FileInformation, ULONG Length, FILE_INFORMATION_CLASS FileInformationClass);\nNTSTATUS NtQueryInformationJobObject (HANDLE JobHandle, JOBOBJECTINFOCLASS JobObjectInformationClass, PVOID JobObjectInformation, ULONG JobObjectInformationLength, PULONG ReturnLength);\nNTSTATUS NtQueryInformationPort (HANDLE PortHandle, PORT_INFORMATION_CLASS PortInformationClass, PVOID PortInformation, ULONG Length, PULONG ReturnLength);\nNTSTATUS NtQueryInformationProcess (HANDLE ProcessHandle, PROCESSINFOCLASS ProcessInformationClass, PVOID ProcessInformation, ULONG ProcessInformationLength, PULONG ReturnLength);\nNTSTATUS NtQueryInformationThread (HANDLE ThreadHandle, THREADINFOCLASS ThreadInformationClass, PVOID ThreadInformation, ULONG ThreadInformationLength, PULONG ReturnLength);\nNTSTATUS NtQueryInformationToken (HANDLE TokenHandle, TOKEN_INFORMATION_CLASS TokenInformationClass, PVOID TokenInformation, ULONG TokenInformationLength, PULONG ReturnLength);\nNTSTATUS NtQueryInstallUILanguage (LANGID *InstallUILanguageId);\nNTSTATUS NtQueryIntervalProfile (KPROFILE_SOURCE ProfileSource, PULONG Interval);\nNTSTATUS NtQueryIoCompletion (HANDLE IoCompletionHandle, IO_COMPLETION_INFORMATION_CLASS IoCompletionInformationClass, PVOID IoCompletionInformation, ULONG IoCompletionInformationLength, PULONG ReturnLength);\nNTSTATUS NtQueryKey (HANDLE KeyHandle, KEY_INFORMATION_CLASS KeyInformationClass, PVOID KeyInformation, ULONG Length, PULONG ResultLength);\nNTSTATUS NtQueryMultipleValueKey (HANDLE KeyHandle, PKEY_VALUE_ENTRY ValueEntries, ULONG EntryCount, PVOID ValueBuffer, PULONG BufferLength, PULONG RequiredBufferLength);\nNTSTATUS NtQueryMutant (HANDLE MutantHandle, MUTANT_INFORMATION_CLASS MutantInformationClass, PVOID MutantInformation, ULONG MutantInformationLength, PULONG ReturnLength);\nNTSTATUS NtQueryObject (HANDLE Handle, OBJECT_INFORMATION_CLASS ObjectInformationClass, PVOID ObjectInformation, ULONG ObjectInformationLength, PULONG ReturnLength);\nNTSTATUS NtQueryOpenSubKeys (POBJECT_ATTRIBUTES TargetKey, PULONG HandleCount);\nNTSTATUS NtQueryPerformanceCounter (PLARGE_INTEGER PerformanceCounter, PLARGE_INTEGER PerformanceFrequency);\nNTSTATUS NtQueryQuotaInformationFile (HANDLE FileHandle, PIO_STATUS_BLOCK IoStatusBlock, PVOID Buffer, ULONG Length, BOOLEAN ReturnSingleEntry, PVOID SidList, ULONG SidListLength, PULONG StartSid, BOOLEAN RestartScan);\nNTSTATUS NtQuerySection (HANDLE SectionHandle, SECTION_INFORMATION_CLASS SectionInformationClass, PVOID SectionInformation, SIZE_T SectionInformationLength, PSIZE_T ReturnLength);\nNTSTATUS NtQuerySecurityObject (HANDLE Handle, SECURITY_INFORMATION SecurityInformation, PSECURITY_DESCRIPTOR SecurityDescriptor, ULONG Length, PULONG LengthNeeded);\nNTSTATUS NtQuerySemaphore (HANDLE SemaphoreHandle, SEMAPHORE_INFORMATION_CLASS SemaphoreInformationClass, PVOID SemaphoreInformation, ULONG SemaphoreInformationLength, PULONG ReturnLength);\nNTSTATUS NtQuerySymbolicLinkObject (HANDLE LinkHandle, PUNICODE_STRING LinkTarget, PULONG ReturnedLength);\nNTSTATUS NtQuerySystemEnvironmentValue (PUNICODE_STRING VariableName, PWSTR VariableValue, USHORT ValueLength, PUSHORT ReturnLength);\nNTSTATUS NtQuerySystemEnvironmentValueEx (PUNICODE_STRING VariableName, LPGUID VendorGuid, PVOID Value, PULONG ValueLength, PULONG Attributes);\nNTSTATUS NtQuerySystemInformation (SYSTEM_INFORMATION_CLASS SystemInformationClass, PVOID SystemInformation, ULONG SystemInformationLength, PULONG ReturnLength);\nNTSTATUS NtQuerySystemTime (PLARGE_INTEGER SystemTime);\nNTSTATUS NtQueryTimer (HANDLE TimerHandle, TIMER_INFORMATION_CLASS TimerInformationClass, PVOID TimerInformation, ULONG TimerInformationLength, PULONG ReturnLength);\nNTSTATUS NtQueryTimerResolution (PULONG MaximumTime, PULONG MinimumTime, PULONG CurrentTime);\nNTSTATUS NtQueryValueKey (HANDLE KeyHandle, PUNICODE_STRING ValueName, KEY_VALUE_INFORMATION_CLASS KeyValueInformationClass, PVOID KeyValueInformation, ULONG Length, PULONG ResultLength);\nNTSTATUS NtQueryVirtualMemory (HANDLE ProcessHandle, PVOID BaseAddress, MEMORY_INFORMATION_CLASS MemoryInformationClass, PVOID MemoryInformation, SIZE_T MemoryInformationLength, PSIZE_T ReturnLength);\nNTSTATUS NtQueryVolumeInformationFile (HANDLE FileHandle, PIO_STATUS_BLOCK IoStatusBlock, PVOID FsInformation, ULONG Length, FS_INFORMATION_CLASS FsInformationClass);\nNTSTATUS NtQueueApcThread (HANDLE ThreadHandle, PPS_APC_ROUTINE ApcRoutine, PVOID ApcArgument1, PVOID ApcArgument2, PVOID ApcArgument3);\nNTSTATUS NtRaiseException (PEXCEPTION_RECORD ExceptionRecord, PCONTEXT ContextRecord, BOOLEAN FirstChance);\nNTSTATUS NtRaiseHardError (NTSTATUS ErrorStatus, ULONG NumberOfParameters, ULONG UnicodeStringParameterMask, PULONG_PTR Parameters, ULONG ValidResponseOptions, PULONG Response);\nNTSTATUS NtReadFile (HANDLE FileHandle, HANDLE Event, PIO_APC_ROUTINE ApcRoutine, PVOID ApcContext, PIO_STATUS_BLOCK IoStatusBlock, PVOID Buffer, ULONG Length, PLARGE_INTEGER ByteOffset, PULONG Key);\nNTSTATUS NtReadFileScatter (HANDLE FileHandle, HANDLE Event, PIO_APC_ROUTINE ApcRoutine, PVOID ApcContext, PIO_STATUS_BLOCK IoStatusBlock, PFILE_SEGMENT_ELEMENT SegmentArray, ULONG Length, PLARGE_INTEGER ByteOffset, PULONG Key);\nNTSTATUS NtReadRequestData (HANDLE PortHandle, PPORT_MESSAGE Message, ULONG DataEntryIndex, PVOID Buffer, SIZE_T BufferSize, PSIZE_T NumberOfBytesRead);\nNTSTATUS NtReadVirtualMemory (HANDLE ProcessHandle, PVOID BaseAddress, PVOID Buffer, SIZE_T BufferSize, PSIZE_T NumberOfBytesRead);\nNTSTATUS NtRegisterThreadTerminatePort (HANDLE PortHandle);\nNTSTATUS NtReleaseMutant (HANDLE MutantHandle, PLONG PreviousCount);\nNTSTATUS NtReleaseSemaphore (HANDLE SemaphoreHandle, LONG ReleaseCount, PLONG PreviousCount);\nNTSTATUS NtRemoveIoCompletion (HANDLE IoCompletionHandle, PVOID *KeyContext, PVOID *ApcContext, PIO_STATUS_BLOCK IoStatusBlock, PLARGE_INTEGER Timeout);\nNTSTATUS NtRemoveProcessDebug (HANDLE ProcessHandle, HANDLE DebugObjectHandle);\nNTSTATUS NtRenameKey (HANDLE KeyHandle, PUNICODE_STRING NewName);\nNTSTATUS NtReplaceKey (POBJECT_ATTRIBUTES NewFile, HANDLE TargetHandle, POBJECT_ATTRIBUTES OldFile);\nNTSTATUS NtReplyPort (HANDLE PortHandle, PPORT_MESSAGE ReplyMessage);\nNTSTATUS NtReplyWaitReceivePort (HANDLE PortHandle, PVOID *PortContext , PPORT_MESSAGE ReplyMessage, PPORT_MESSAGE ReceiveMessage);\nNTSTATUS NtReplyWaitReceivePortEx (HANDLE PortHandle, PVOID *PortContext, PPORT_MESSAGE ReplyMessage, PPORT_MESSAGE ReceiveMessage, PLARGE_INTEGER Timeout);\nNTSTATUS NtReplyWaitReplyPort (HANDLE PortHandle, PPORT_MESSAGE ReplyMessage);\nNTSTATUS NtRequestPort (HANDLE PortHandle, PPORT_MESSAGE RequestMessage);\nNTSTATUS NtRequestWaitReplyPort (HANDLE PortHandle, PPORT_MESSAGE RequestMessage, PPORT_MESSAGE ReplyMessage);\nNTSTATUS NtResetEvent (HANDLE EventHandle, PLONG PreviousState);\nNTSTATUS NtResetWriteWatch (HANDLE ProcessHandle, PVOID BaseAddress, SIZE_T RegionSize);\nNTSTATUS NtRestoreKey (HANDLE KeyHandle, HANDLE FileHandle, ULONG Flags);\nNTSTATUS NtResumeProcess (HANDLE ProcessHandle);\nNTSTATUS NtResumeThread (HANDLE ThreadHandle, PULONG PreviousSuspendCount);\nNTSTATUS NtSaveKey (HANDLE KeyHandle, HANDLE FileHandle);\nNTSTATUS NtSaveKeyEx (HANDLE KeyHandle, HANDLE FileHandle, ULONG Format);\nNTSTATUS NtSaveMergedKeys (HANDLE HighPrecedenceKeyHandle, HANDLE LowPrecedenceKeyHandle, HANDLE FileHandle);\nNTSTATUS NtSecureConnectPort (PHANDLE PortHandle, PUNICODE_STRING PortName, PSECURITY_QUALITY_OF_SERVICE SecurityQos, PPORT_VIEW ClientView, PSID RequiredServerSid, PREMOTE_PORT_VIEW ServerView, PULONG MaxMessageLength, PVOID ConnectionInformation, PULONG ConnectionInformationLength);\nNTSTATUS NtSetBootEntryOrder (PULONG Ids, ULONG Count);\nNTSTATUS NtSetBootOptions (PBOOT_OPTIONS BootOptions, ULONG FieldsToChange);\nNTSTATUS NtSetContextThread (HANDLE ThreadHandle, PCONTEXT ThreadContext);\nNTSTATUS NtSetDebugFilterState (ULONG ComponentId, ULONG Level, BOOLEAN State);\nNTSTATUS NtSetDefaultHardErrorPort (HANDLE DefaultHardErrorPort);\nNTSTATUS NtSetDefaultLocale (BOOLEAN UserProfile, LCID DefaultLocaleId);\nNTSTATUS NtSetDefaultUILanguage (LANGID DefaultUILanguageId);\nNTSTATUS NtSetEaFile (HANDLE FileHandle, PIO_STATUS_BLOCK IoStatusBlock, PVOID Buffer, ULONG Length);\nNTSTATUS NtSetEvent (HANDLE EventHandle, PLONG PreviousState);\n```\n\n----------------------------------------\n\nTITLE: Building Ubuntu Kernel for Syscall Extraction\nDESCRIPTION: Commands for cloning, configuring and building the Ubuntu kernel source to prepare it for syscall prototype extraction. The build generates necessary unistd header files even if full compilation fails.\nSOURCE: https://github.com/panda-re/panda-ng/blob/main/plugins/syscalls2/MAINTENANCE.md#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ngit clone git://kernel.ubuntu.com/ubuntu/ubuntu-bionic.git\ncd ubuntu-bionic\ngit checkout Ubuntu-4.15.0-97.98\ncat ./debian.master/config/{config.common.ubuntu,i386/config.common.i386,i386/config.flavour.generic} > .config\nmake\n```\n\n----------------------------------------\n\nTITLE: Defining Access Control List (ACL) System Calls in C\nDESCRIPTION: This snippet defines system calls for manipulating Access Control Lists (ACLs) on files and file descriptors.\nSOURCE: https://github.com/panda-re/panda-ng/blob/main/plugins/syscalls2/generated-in/freebsd_x64_prototypes.txt#_snippet_26\n\nLANGUAGE: C\nCODE:\n```\nint __acl_get_file(const char *path, acl_type_t type, struct acl *aclp);\nint __acl_set_file(const char *path, acl_type_t type, struct acl *aclp);\nint __acl_get_fd(int filedes, acl_type_t type, struct acl *aclp);\nint __acl_set_fd(int filedes, acl_type_t type, struct acl *aclp);\nint __acl_delete_file(const char *path, acl_type_t type);\nint __acl_delete_fd(int filedes, acl_type_t type);\nint __acl_aclcheck_file(const char *path, acl_type_t type, struct acl *aclp);\nint __acl_aclcheck_fd(int filedes, acl_type_t type, struct acl *aclp);\n```\n\n----------------------------------------\n\nTITLE: Declaring Signal Handling and System Control System Calls in C\nDESCRIPTION: This snippet declares system calls for signal handling (sigaltstack) and system control (ioctl, reboot). It includes function signatures with their respective parameters and return types.\nSOURCE: https://github.com/panda-re/panda-ng/blob/main/plugins/syscalls2/generated-in/freebsd_x64_prototypes.txt#_snippet_5\n\nLANGUAGE: C\nCODE:\n```\nint sigaltstack(stack_t *ss, stack_t *oss);\nint ioctl(int fd, u_long com, char *data);\nint reboot(int opt);\nint revoke(const char *path);\nint symlink(const char *path, const char *link);\nssize_t readlink(const char *path, char *buf, size_t count);\nint execve(const char *fname, char **argv, char **envv);\nint umask(mode_t newmask);\nint chroot(const char *path);\n```\n\n----------------------------------------\n\nTITLE: Windows NT Error and Exception Handling Function Declarations (C)\nDESCRIPTION: Declarations for NT API functions that handle exceptions and error conditions, including raising exceptions and hard errors. These functions provide the core exception handling mechanisms in the NT kernel.\nSOURCE: https://github.com/panda-re/panda-ng/blob/main/plugins/syscalls2/generated-in/windows_vistasp0_x86_prototypes.txt#_snippet_16\n\nLANGUAGE: C\nCODE:\n```\nNTSTATUS NtRaiseException (PEXCEPTION_RECORD ExceptionRecord, PCONTEXT ContextRecord, BOOLEAN FirstChance);\nNTSTATUS NtRaiseHardError (NTSTATUS ErrorStatus, ULONG NumberOfParameters, ULONG UnicodeStringParameterMask, PULONG_PTR Parameters, ULONG ValidResponseOptions, PULONG Response);\n```"
  }
]