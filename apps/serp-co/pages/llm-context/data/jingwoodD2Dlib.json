[
  {
    "owner": "jingwood",
    "repo": "d2dlib",
    "content": "TITLE: Using Transforms in C#\nDESCRIPTION: This C# snippet shows how to apply transformations to the rendering context. The `PushTransform` and `PopTransform` methods are used to create a transformation session. Inside the session, transforms such as `RotateTransform` can be applied, and all drawing calls will be transformed.\nSOURCE: https://github.com/jingwood/d2dlib/blob/master/README.md#_snippet_11\n\nLANGUAGE: C#\nCODE:\n```\ng.PushTransform();\n\n// rotate 45 degree\ng.RotateTransform(45, centerPoint);\n\ng.DrawBitmap(mybmp, rect);\ng.PopTransform();\n```\n\n----------------------------------------\n\nTITLE: Creating a Gradient Brush in C#\nDESCRIPTION: This C# code shows how to create a linear gradient brush for drawing. `Device.CreateLinearGradientBrush` is used with an array of `D2DGradientStop` objects that define the color stops. This allows for drawing with smooth color transitions, such as linear gradients.\nSOURCE: https://github.com/jingwood/d2dlib/blob/master/README.md#_snippet_6\n\nLANGUAGE: C#\nCODE:\n```\nvar brush = Device.CreateLinearGradientBrush(new D2DPoint(0, 0), new D2DPoint(200, 100),\n  new D2DGradientStop[] {\n    new D2DGradientStop(0, D2DColor.White),\n    new D2DGradientStop(0.5, D2DColor.Green),\n    new D2DGradientStop(1, D2DColor.Black),\n  });\n```\n\n----------------------------------------\n\nTITLE: Drawing on a Direct2D Memory Bitmap in C#\nDESCRIPTION: This C# code demonstrates how to create and draw on a Direct2D device bitmap for high-performance rendering and off-screen drawing. The `CreateBitmapGraphics` method creates a Direct2D bitmap,  `BeginRender` and `EndRender` methods are used to encapsulate drawing operations and `DrawBitmap` draws the memory bitmap on screen.\nSOURCE: https://github.com/jingwood/d2dlib/blob/master/README.md#_snippet_10\n\nLANGUAGE: C#\nCODE:\n```\nvar bmpGraphics = this.Device.CreateBitmapGraphics(1024, 1024);\nbmpGraphics.BeginRender();\nbmpGraphics.FillRectangle(170, 790, 670, 80, new D2DColor(0.4f, D2DColor.Black));\nbmpGraphics.DrawText(\"This is Direct2D device bitmap\", D2DColor.Goldenrod, this.Font, 180, 800);\nbmpGraphics.EndRender();\n\n// draw this device bitmap on screen\ng.DrawBitmap(bmpGraphics, this.ClientRectangle);\n```\n\n----------------------------------------\n\nTITLE: Drawing a Bitmap in C#\nDESCRIPTION: This C# snippet shows how to draw a bitmap using the `D2DGraphics` object. It calls `g.DrawBitmap` to render the image. The second parameter to `DrawBitmap` specifies the area on the screen to draw the bitmap.\nSOURCE: https://github.com/jingwood/d2dlib/blob/master/README.md#_snippet_7\n\nLANGUAGE: C#\nCODE:\n```\ng.DrawBitmap(bmp, this.ClientRectangle);\n```\n\n----------------------------------------\n\nTITLE: Drawing Text in C#\nDESCRIPTION: This C# code shows how to draw text using the `D2DGraphics` object within the `OnRender` method. The `DrawText` method takes the text string, color, font, and position coordinates as arguments.  `this.Font` is a property inherited from the form or control.\nSOURCE: https://github.com/jingwood/d2dlib/blob/master/README.md#_snippet_4\n\nLANGUAGE: C#\nCODE:\n```\ng.DrawText(\"Hello World\", D2DColor.Yellow, this.Font, 100, 200);\n```\n\n----------------------------------------\n\nTITLE: Drawing a Rectangle in C#\nDESCRIPTION: This C# snippet demonstrates how to draw a rectangle using the `D2DGraphics` object within the `OnRender` method.  The `OnRender` method is overridden in a class derived from `D2DForm` or `D2DControl`. The `D2DRect` defines the rectangle's position and size, and `D2DColor.Red` specifies the color.\nSOURCE: https://github.com/jingwood/d2dlib/blob/master/README.md#_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\nprotected override void OnRender(D2DGraphics g)\n{\n  var rect = new D2DRect(0, 0, 10, 10);\n  g.DrawRectangle(rect, D2DColor.Red);\n}\n```\n\n----------------------------------------\n\nTITLE: Drawing an Ellipse in C#\nDESCRIPTION: This C# snippet demonstrates drawing an ellipse using the `D2DGraphics` object in the `OnRender` method.  The `D2DEllipse` class defines the ellipse, and `D2DColor.Gray` sets the color.  The graphics context `g` is used to perform the drawing.\nSOURCE: https://github.com/jingwood/d2dlib/blob/master/README.md#_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\nvar ellipse = new D2DEllipse(0, 0, 10, 10);\ng.DrawEllipse(ellipse, D2DColor.Gray);\n```\n\n----------------------------------------\n\nTITLE: Creating a Solid Color Brush in C#\nDESCRIPTION: This C# snippet demonstrates creating and using a solid color brush for drawing.  `Device.CreateSolidColorBrush` is used to create a brush with a specified color, which can then be used in drawing methods. This snippet utilizes a `D2DColor` object with red and a hint of magenta.\nSOURCE: https://github.com/jingwood/d2dlib/blob/master/README.md#_snippet_5\n\nLANGUAGE: C#\nCODE:\n```\nvar brush = Device.CreateSolidColorBrush(new D2DColor(1, 0, 0.5));\ng.DrawEllipse(rect, brush);\n```\n\n----------------------------------------\n\nTITLE: Converting GDI+ Bitmap to Direct2D Bitmap in C#\nDESCRIPTION: This C# code demonstrates how to convert a GDI+ bitmap to a Direct2D bitmap for higher-performance rendering.  The `Device.CreateBitmapFromGDIBitmap` function is used to perform the conversion.  This process takes a GDI+ Bitmap as input and returns a Direct2D compatible bitmap.\nSOURCE: https://github.com/jingwood/d2dlib/blob/master/README.md#_snippet_8\n\nLANGUAGE: C#\nCODE:\n```\n// convert to Direct2D bitmap\nvar d2dbmp = Device.CreateBitmapFromGDIBitmap(gdiBitmap);\n\n// draw Direct2D bitmap\ng.DrawBitmap(d2dbmp, this.ClientRectangle);\n```\n\n----------------------------------------\n\nTITLE: Drawing on a GDI+ Bitmap in C#\nDESCRIPTION: This C# snippet illustrates how to draw on a GDI+ bitmap and then draw that bitmap on screen. The code creates a GDI+ `Bitmap`, draws text onto it using `Graphics` object, and then draws the resulting bitmap using the `D2DGraphics.DrawBitmap` method. This approach provides an option for pre-rendering.\nSOURCE: https://github.com/jingwood/d2dlib/blob/master/README.md#_snippet_9\n\nLANGUAGE: C#\nCODE:\n```\n// create and draw on GDI+ bitmap\nvar gdiBmp = new Bitmap(1024, 1024);\nusing (Graphics g = Graphics.FromImage(gdiBmp))\n{\n  g.DrawString(\"This is GDI+ bitmap layer\", new Font(this.Font.FontFamily, 48), Brushes.Black, 10, 10);\n}\n\n// draw memory bitmap on screen\ng.DrawBitmap(gdiBmp, this.ClientRectangle);\n```\n\n----------------------------------------\n\nTITLE: Installing d2dlib via NuGet\nDESCRIPTION: This snippet demonstrates how to install the d2dlib library using the NuGet package manager. It shows both the standard installation and the installation for the x64 platform.  This step is a prerequisite for using the library in a .NET project.\nSOURCE: https://github.com/jingwood/d2dlib/blob/master/README.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ninstall-package unvell.d2dlib\n```\n\n----------------------------------------\n\nTITLE: Installing d2dlib x64 via NuGet\nDESCRIPTION: This snippet shows how to install the d2dlib library specifically for the x64 platform via NuGet.  This is an alternative to the standard install if you require the x64 version of the library.\nSOURCE: https://github.com/jingwood/d2dlib/blob/master/README.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ninstall-package unvell.d2dlib-x64\n```"
  }
]