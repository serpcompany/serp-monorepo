[
  {
    "owner": "atlassian",
    "repo": "pragmatic-drag-and-drop",
    "content": "TITLE: Testing Drag and Drop Between Columns with Cypress\nDESCRIPTION: A complete Cypress test example that demonstrates how to test drag and drop functionality by moving an item from one column to another. The test configures proper DragEvent triggering with DataTransfer object, performs assertions on column item counts before and after the drag operation.\nSOURCE: https://github.com/atlassian/pragmatic-drag-and-drop/blob/main/packages/documentation/constellation/05-core-package/11-testing/cypress.mdx#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nit('should allow drag and drop between columns', () => {\n\tconst options = {\n\t\tforce: true,\n\t\teventConstructor: 'DragEvent',\n\t\t// If you wanted to fake dragging particular data,\n\t\t// you can add it to this `DataTransfer` with `.setData()`\n\t\t// See: https://developer.mozilla.org/en-US/docs/Web/API/DataTransfer\n\t\tdataTransfer: new DataTransfer(),\n\t};\n\n\tcy.visit('/scenario/atlaskit-drag-and-drop');\n\n\t// waiting for our board to be visible\n\tcy.get('[data-testid=\"item-A0\"]').should('be.visible');\n\n\t// asserting initial list sizes\n\tcy.get('[data-testid=\"column-A--card-list\"]')\n\t\t.find('[draggable=\"true\"]')\n\t\t.should('have.length', 16);\n\n\tcy.get('[data-testid=\"column-B--card-list\"]')\n\t\t.find('[draggable=\"true\"]')\n\t\t.should('have.length', 16);\n\n\t// Move A0 to column B\n\tcy.get('[data-testid=\"item-A0\"]').trigger('dragstart', options);\n\n\tcy.get('[data-testid=\"item-B0\"]').trigger('dragenter', options).trigger('drop', options);\n\n\t// asserting list sizes after drag and drop\n\tcy.get('[data-testid=\"column-A--card-list\"]')\n\t\t.find('[draggable=\"true\"]')\n\t\t.should('have.length', 15);\n\n\tcy.get('[data-testid=\"column-B--card-list\"]')\n\t\t.find('[draggable=\"true\"]')\n\t\t.should('have.length', 17);\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Simple Type Checking for Drag and Drop in TypeScript\nDESCRIPTION: This snippet demonstrates how to implement simple type checking for draggables, drop targets, and monitors using the 'type' property in the initial data.\nSOURCE: https://github.com/atlassian/pragmatic-drag-and-drop/blob/main/packages/documentation/constellation/05-core-package/09-recipes/00-isolating-experiences/index.mdx#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// bind our draggable\ndraggable({\n\telement: myDraggableElement,\n\tgetInitialData: () => ({\n\t\t// the id of our card\n\t\tcardId,\n\t\t// the id the column belongs to\n\t\tcolumnId,\n\t\t// specifying this is a \"card\"\n\t\ttype: 'card',\n\t}),\n});\n\ndropTargetForElements({\n\telement: myDropTargetElement,\n\tgetData: () => ({ columnId }),\n\t// only allow dropping if a \"card\" is being dragged\n\tcanDrop: ({ source }) => source.data.type === 'card',\n});\n\nmonitorForElements({\n\t// only listen for drag operations of \"card\" draggables\n\tcanMonitor: ({ source }) => source.data.type === 'card',\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Draggable Chess Piece with React\nDESCRIPTION: Creates a draggable chess piece component using the draggable function from Pragmatic Drag and Drop. The component attaches the draggable behavior to an image element using a ref.\nSOURCE: https://github.com/atlassian/pragmatic-drag-and-drop/blob/main/packages/documentation/constellation/01-tutorial/index.mdx#2025-04-14_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nfunction Piece({ image, alt }: PieceProps) {\n\tconst ref = useRef(null);\n\n\tuseEffect(() => {\n\t\tconst el = ref.current;\n\t\tinvariant(el);\n\n\t\treturn draggable({\n\t\t\telement: el,\n\t\t});\n\t}, []);\n\n\treturn <img css={imageStyles} src={image} alt={alt} ref={ref} />;\n}\n```\n\n----------------------------------------\n\nTITLE: Using Helper Functions for Type Safety in Pragmatic Drag-and-Drop\nDESCRIPTION: Demonstrates a recommended pattern for creating type-safe data objects using Symbol keys and helper functions with type guards. This approach provides runtime type checking and proper TypeScript typing.\nSOURCE: https://github.com/atlassian/pragmatic-drag-and-drop/blob/main/packages/documentation/constellation/05-core-package/09-recipes/01-typing-data/index.mdx#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n\tdraggable,\n\tdropTargetForElements,\n} from '@atlaskit/pragmatic-drag-and-drop/element/adapter';\nimport invariant from 'tiny-invariant';\n\n// We are using a `Symbol` to guarentee the whole object is a particular shape\nconst privateKey = Symbol('Card');\n\ntype Card = {\n\t[privateKey]: true;\n\tcardId: string;\n};\n\nfunction getCard(data: Omit<Card, typeof privateKey>) {\n\treturn {\n\t\t[privateKey]: true,\n\t\t...data,\n\t};\n}\n\nexport function isCard(data: Record<string | symbol, unknown>): data is Card {\n\treturn Boolean(data[privateKey]);\n}\n\nconst myDraggable = document.querySelector('#my-draggable');\ninvariant(myDraggable instanceof HTMLElement);\n\ndraggable({\n\telement: myDraggable,\n\tgetInitialData: () =>\n\t\tgetCard({\n\t\t\tcardId: '1',\n\t\t}),\n});\n\ndropTargetForElements({\n\telement: myDraggable,\n\t// only allow dropping if dragging a card\n\tcanDrop({ source }) {\n\t\treturn isCard(source.data);\n\t},\n\tonDrop({ source }) {\n\t\tconst data = source.data;\n\t\tif (!isCard(data)) {\n\t\t\treturn;\n\t\t}\n\t\t// data is now correctly typed to `Card`\n\t\tconsole.log(data);\n\t},\n});\n```\n\n----------------------------------------\n\nTITLE: Updating Square Component with Location Data in React TSX\nDESCRIPTION: This snippet shows how to modify the Square component to include location data in the drop target. It uses the useRef and useState hooks, and the dropTargetForElements function from the Pragmatic drag and drop library.\nSOURCE: https://github.com/atlassian/pragmatic-drag-and-drop/blob/main/packages/documentation/constellation/01-tutorial/index.mdx#2025-04-14_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\nfunction Square({ pieces, location, children }: SquareProps) {\n\tconst ref = useRef(null);\n\tconst [state, setState] = useState<HoveredState>('idle');\n\n\tuseEffect(() => {\n\t\tconst el = ref.current;\n\t\tinvariant(el);\n\n\t\treturn dropTargetForElements({\n\t\t\telement: el,\n\t\t\tgetData: () => ({ location }), // NEW\n\n\t\t\t/*...*/\n\t\t});\n\t});\n\n\t/*...*/\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Drop Target Chess Square Component\nDESCRIPTION: Implements a chess board square as a drop target using dropTargetForElements. The component changes its background color when a draggable piece is hovered over it, providing visual feedback.\nSOURCE: https://github.com/atlassian/pragmatic-drag-and-drop/blob/main/packages/documentation/constellation/01-tutorial/index.mdx#2025-04-14_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nfunction Square({ location, children }: SquareProps) {\n\tconst ref = useRef(null);\n\tconst [isDraggedOver, setIsDraggedOver] = useState(false);\n\n\tuseEffect(() => {\n\t\tconst el = ref.current;\n\t\tinvariant(el);\n\n\t\treturn dropTargetForElements({\n\t\t\telement: el,\n\t\t\tonDragEnter: () => setIsDraggedOver(true),\n\t\t\tonDragLeave: () => setIsDraggedOver(false),\n\t\t\tonDrop: () => setIsDraggedOver(false),\n\t\t});\n\t}, []);\n\n\tconst isDark = (location[0] + location[1]) % 2 === 1;\n\n\treturn (\n\t\t<div css={squareStyles} style={{ backgroundColor: getColor(isDraggedOver, isDark) }} ref={ref}>\n\t\t\t{children}\n\t\t</div>\n\t);\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Tree Item Drop Indicator in React TSX\nDESCRIPTION: Demonstrates how to use the Tree Item Drop Indicator component in a React component with TypeScript. It includes styling and conditional rendering based on the instruction.\nSOURCE: https://github.com/atlassian/pragmatic-drag-and-drop/blob/main/packages/react-drop-indicator/constellation/index/about.mdx#2025-04-14_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nconst itemStyles = css({\n\tposition: 'relative',\n\tpadding: token('space.100'),\n\tbackgroundColor: token('elevation.surface'),\n});\n\nexport function Item({\n\tcontent,\n\tinstruction,\n}: {\n\tcontent: ReactNode;\n\tinstruction: Instruction | null;\n}) {\n\treturn (\n\t\t<div css={itemStyles}>\n\t\t\t<span>{content}</span>\n\t\t\t{closestEdge && <DropIndicator instruction={instruction} />}\n\t\t</div>\n\t);\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Draggable Chess Piece with Visual Feedback\nDESCRIPTION: Enhances the draggable chess piece by adding state management to provide visual feedback during dragging. When dragged, the piece's opacity is reduced to make it appear as if it's being picked up.\nSOURCE: https://github.com/atlassian/pragmatic-drag-and-drop/blob/main/packages/documentation/constellation/01-tutorial/index.mdx#2025-04-14_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nfunction Piece({ image, alt }: PieceProps) {\n\tconst ref = useRef(null);\n\tconst [dragging, setDragging] = useState<boolean>(false); // NEW\n\n\tuseEffect(() => {\n\t\tconst el = ref.current;\n\t\tinvariant(el);\n\n\t\treturn draggable({\n\t\t\telement: el,\n\t\t\tonDragStart: () => setDragging(true), // NEW\n\t\t\tonDrop: () => setDragging(false), // NEW\n\t\t});\n\t}, []);\n\n\treturn (\n\t\t<img\n\t\t\tcss={[dragging && hidePieceStyles, imageStyles]} // toggling css using state to hide the piece\n\t\t\tsrc={image}\n\t\t\talt={alt}\n\t\t\tref={ref}\n\t\t/>\n\t);\n}\n```\n\n----------------------------------------\n\nTITLE: Attaching Drag and Drop Behavior with useEffect in React\nDESCRIPTION: This example demonstrates how to attach draggable and drop target behavior to a React component using useEffect. It shows the implementation of a Card component that can be both dragged and used as a drop target for other cards.\nSOURCE: https://github.com/atlassian/pragmatic-drag-and-drop/blob/main/packages/documentation/constellation/05-core-package/08-UI-frameworks/react.mdx#2025-04-14_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n// card.tsx\nimport {draggable, dropTargetForElements} from '@atlaskit/pragmatic-drag-and-drop/element/adapter';\n\nexport default function Card({ item }: { item: Item }) {\n  const ref = useRef<HTMLDivElement | null>(null);\n  const itemId = item.itemId;\n  const [state, setState] = useState<DraggableState>('idle');\n\n  useEffect(() => {\n    const cleanup = combine(\n      draggable({\n        element: ref.current,\n        getInitialData: () => ({ type: 'card', itemId: itemId }),\n      }),\n      dropTargetForElements({\n        element: ref.current,\n        canDrop: args => args.source.data.type === 'card',\n      }),\n    );\n    return cleanup;\n  }, [itemId]);\n\n  return (\n    <div ref={ref}>\n      item id: {item.itemId}</span>\n    </div>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Importing Drag and Drop Adapters in TypeScript\nDESCRIPTION: Demonstrates how to import drop target and monitor functions for external, element, and text selection adapters from the Pragmatic drag and drop package.\nSOURCE: https://github.com/atlassian/pragmatic-drag-and-drop/blob/main/packages/documentation/constellation/05-core-package/index.mdx#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n\tdropTargetForExternal,\n\tmonitorForExternal,\n} from '@atlaskit/pragmatic-drag-and-drop/external/adapter';\n\nimport {\n\tdropTargetForElements,\n\tmonitorForElements,\n} from '@atlaskit/pragmatic-drag-and-drop/element/adapter';\n\nimport {\n\tdropTargetForTextSelection,\n\tmonitorForTextSelection,\n} from '@atlaskit/pragmatic-drag-and-drop/text-selection/adapter';\n```\n\n----------------------------------------\n\nTITLE: Creating Drop Target for Elements in React Component\nDESCRIPTION: Shows how to implement a drop target for elements within a React component using useRef and useEffect hooks.\nSOURCE: https://github.com/atlassian/pragmatic-drag-and-drop/blob/main/packages/documentation/constellation/05-core-package/03-drop-targets/index.mdx#2025-04-14_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n// basic usage with react\nimport React, { useEffect, useRef } from 'react';\nimport { dropTargetForElements } from '@atlaskit/pragmatic-drag-and-drop/element/adapter';\n\nfunction DropTarget() {\n  const ref = useRef<HTMLDivElement | null>(null);\n\n  useEffect(() => {\n    const el = ref.current;\n    if (!el) {\n      throw new Error('ref not set correctly');\n    }\n\n    return dropTargetForElements({\n      element: el,\n    });\n  }, []);\n\n  return <div ref={ref}>Drop elements on me!</div>;\n}\n```\n\n----------------------------------------\n\nTITLE: Optimized React Draggable Implementation without Remounting\nDESCRIPTION: Demonstrates an improved React implementation that avoids unnecessary remounting of the draggable. Uses a function update pattern with setState to eliminate the need for including state in the dependency array.\nSOURCE: https://github.com/atlassian/pragmatic-drag-and-drop/blob/main/packages/documentation/constellation/05-core-package/07-reconciliation/index.mdx#2025-04-14_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nfunction Card() {\n\tconst ref = useRef();\n\tconst [dragCount, setCount] = useState(0);\n\n\tuseEffect(() => {\n\t\treturn draggable({\n\t\t\telement,\n\t\t\tonDragStart: () => setCount((current) => current + 1),\n\t\t});\n\t\t// no longer need to remount when `dragCount` changes\n\t}, []);\n\n\treturn <div ref={ref}>I have been dragged {dragCount} times</div>;\n}\n```\n\n----------------------------------------\n\nTITLE: Testing Drag and Drop Callbacks with Native Events in TypeScript\nDESCRIPTION: This code demonstrates how to test drag and drop functionality by triggering native events. It creates draggable and drop target elements and uses the fireEvent API from @testing-library/dom to simulate drag and drop interactions, verifying that callbacks are correctly executed in response to these events.\nSOURCE: https://github.com/atlassian/pragmatic-drag-and-drop/blob/main/packages/documentation/constellation/05-core-package/11-testing/jest-and-jsdom.mdx#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { fireEvent } from '@testing-library/dom';\n\nimport {\n\tdraggable,\n\tdropTargetForElements,\n\tmonitorForElements,\n} from '@atlaskit/pragmatic-drag-and-drop/element/adapter';\nimport { combine } from '@atlaskit/pragmatic-drag-and-drop/combine';\nimport { appendToBody, getElements } from '../../_util';\n\nafterEach(async () => {\n\t// cleanup any pending drags\n\tfireEvent.dragEnd(window);\n\n\t// Optional: unwind the \"honey pot fix\"\n\t// More details: https://www.youtube.com/watch?v=udE9qbFTeQg\n\tfireEvent.pointerMove(window);\n});\n\nit('should execute callbacks in response to native events', () => {\n\tconst [A] = getElements();\n\tconst ordered: string[] = [];\n\n\tconst cleanup = combine(\n\t\tappendToBody(A),\n\t\tdraggable({\n\t\t\telement: A,\n\t\t\tonGenerateDragPreview: () => ordered.push('draggable:preview'),\n\t\t\tonDragStart: () => ordered.push('draggable:start'),\n\t\t\tonDrag: () => ordered.push('draggable:drag'),\n\t\t\tonDrop: () => ordered.push('draggable:drop'),\n\t\t\tonDropTargetChange: () => ordered.push('draggable:change'),\n\t\t}),\n\t\tdropTargetForElements({\n\t\t\telement: A,\n\t\t\tonGenerateDragPreview: () => ordered.push('dropTarget:preview'),\n\t\t\tonDragStart: () => ordered.push('dropTarget:start'),\n\t\t\tonDrag: () => ordered.push('dropTarget:drag'),\n\t\t\tonDrop: () => ordered.push('dropTarget:drop'),\n\t\t\tonDropTargetChange: () => ordered.push('dropTarget:change'),\n\t\t\tonDragEnter: () => ordered.push('dropTarget:enter'),\n\t\t\tonDragLeave: () => ordered.push('dropTarget:leave'),\n\t\t}),\n\t\tmonitorForElements({\n\t\t\tonGenerateDragPreview: () => ordered.push('monitor:preview'),\n\t\t\tonDragStart: () => ordered.push('monitor:start'),\n\t\t\tonDrag: () => ordered.push('monitor:drag'),\n\t\t\tonDrop: () => ordered.push('monitor:drop'),\n\t\t\tonDropTargetChange: () => ordered.push('monitor:change'),\n\t\t}),\n\t);\n\n\texpect(ordered).toEqual([]);\n\n\t// starting a lift, this will trigger the previews to be generated\n\tfireEvent.dragStart(A);\n\n\texpect(ordered).toEqual(['draggable:preview', 'dropTarget:preview', 'monitor:preview']);\n\tordered.length = 0;\n\n\t// ticking forward an animation frame will complete the lift\n\t// @ts-expect-error\n\trequestAnimationFrame.step();\n\texpect(ordered).toEqual(['draggable:start', 'dropTarget:start', 'monitor:start']);\n\tordered.length = 0;\n\n\t// [A] -> []\n\tfireEvent.dragEnter(document.body);\n\texpect(ordered).toEqual([\n\t\t'draggable:change',\n\t\t'dropTarget:change',\n\t\t'dropTarget:leave',\n\t\t'monitor:change',\n\t]);\n\tordered.length = 0;\n\n\t// [] -> [A]\n\tfireEvent.dragEnter(A);\n\texpect(ordered).toEqual([\n\t\t'draggable:change',\n\t\t'dropTarget:change',\n\t\t'dropTarget:enter',\n\t\t'monitor:change',\n\t]);\n\tordered.length = 0;\n\n\t// [A] -> [A]\n\tfireEvent.dragOver(A, { clientX: 10 });\n\t// no updates yet (need to wait for the next animation frame)\n\texpect(ordered).toEqual([]);\n\n\t// @ts-expect-error\n\trequestAnimationFrame.step();\n\texpect(ordered).toEqual(['draggable:drag', 'dropTarget:drag', 'monitor:drag']);\n\tordered.length = 0;\n\n\t// drop\n\tfireEvent.drop(A);\n\texpect(ordered).toEqual(['draggable:drop', 'dropTarget:drop', 'monitor:drop']);\n\n\tcleanup();\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Chess Piece Movement with Monitors in React TSX\nDESCRIPTION: This snippet demonstrates how to use the monitorForElements function to implement chess piece movement. It includes logic for checking valid moves, updating the piece positions, and handling edge cases. The code uses React hooks and custom type guards.\nSOURCE: https://github.com/atlassian/pragmatic-drag-and-drop/blob/main/packages/documentation/constellation/01-tutorial/index.mdx#2025-04-14_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\nfunction Chessboard() {\n\tconst [pieces, setPieces] = useState<PieceRecord[]>([\n\t\t{ type: 'king', location: [3, 2] },\n\t\t{ type: 'pawn', location: [1, 6] },\n\t]);\n\n\tuseEffect(() => {\n\t\treturn monitorForElements({\n\t\t\tonDrop({ source, location }) {\n\t\t\t\tconst destination = location.current.dropTargets[0];\n\t\t\t\tif (!destination) {\n\t\t\t\t\t// if dropped outside of any drop targets\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tconst destinationLocation = destination.data.location;\n\t\t\t\tconst sourceLocation = source.data.location;\n\t\t\t\tconst pieceType = source.data.pieceType;\n\n\t\t\t\tif (\n\t\t\t\t\t// type guarding\n\t\t\t\t\t!isCoord(destinationLocation) ||\n\t\t\t\t\t!isCoord(sourceLocation) ||\n\t\t\t\t\t!isPieceType(pieceType)\n\t\t\t\t) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tconst piece = pieces.find((p) => isEqualCoord(p.location, sourceLocation));\n\t\t\t\tconst restOfPieces = pieces.filter((p) => p !== piece);\n\n\t\t\t\tif (\n\t\t\t\t\tcanMove(sourceLocation, destinationLocation, pieceType, pieces) &&\n\t\t\t\t\tpiece !== undefined\n\t\t\t\t) {\n\t\t\t\t\t// moving the piece!\n\t\t\t\t\tsetPieces([{ type: piece.type, location: destinationLocation }, ...restOfPieces]);\n\t\t\t\t}\n\t\t\t},\n\t\t});\n\t}, [pieces]);\n\n\t/*...*/\n}\n```\n\n----------------------------------------\n\nTITLE: Monitor Integration with React Components using Hooks\nDESCRIPTION: Shows how to integrate monitors with React components using the useEffect hook. This pattern ensures monitors are properly cleaned up when the component unmounts.\nSOURCE: https://github.com/atlassian/pragmatic-drag-and-drop/blob/main/packages/documentation/constellation/05-core-package/04-monitors/index.mdx#2025-04-14_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n// basic usage with react\nimport React, { useEffect, useRef } from 'react';\nimport { monitorForElements } from '@atlaskit/pragmatic-drag-and-drop/element/adapter';\n\nfunction App() {\n\t// It is often convenient to tie monitors to components using effects\n\t// By doing this you can ensure you monitors are cleaned up\n\t// when a component is no longer being used.\n\tuseEffect(() => {\n\t\treturn monitorForElements({\n\t\t\tonDragStart: () => console.log('I am called whenever any element drag starts'),\n\t\t});\n\t}, []);\n\n\treturn <div>{/*...*/}</div>;\n}\n```\n\n----------------------------------------\n\nTITLE: React Scrollable List Implementation with Drag and Drop\nDESCRIPTION: A complete React component example showing how to implement a scrollable list with both standard and overflow auto-scrolling capabilities.\nSOURCE: https://github.com/atlassian/pragmatic-drag-and-drop/blob/main/packages/auto-scroll/constellation/index/unsafe-overflow-scrolling.mdx#2025-04-14_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useRef, ReactElement } from 'react';\nimport { dropTargetForElements } from '@atlaskit/pragmatic-drag-and-drop/element/adapter';\nimport { autoScrollForElements } from '@atlaskit/pragmatic-drag-and-drop-auto-scroll/element';\nimport { unsafeOverflowForElements } from '@atlaskit/pragmatic-drag-and-drop-auto-scroll/unsafe-overflow/element';\nimport { combine } from '@atlaskit/pragmatic-drag-and-drop/combine';\nimport invariant from 'tiny-invariant';\n\nfunction ScrollableList({ children }: { children: ReactElement }) {\n\tconst ref = useRef<HTMLDivElement | null>(null);\n\n\tuseEffect(() => {\n\t\tconst element = ref.current;\n\t\tinvariant(element, 'Element ref not set');\n\n\t\treturn combine(\n\t\t\tdropTargetForElements({\n\t\t\t\telement,\n\t\t\t}),\n\t\t\t// Enabling scrolling when \"over\" an element\n\t\t\tautoScrollForElements({\n\t\t\t\telement,\n\t\t\t}),\n\t\t\t// Enabling overflow auto scrolling\n\t\t\tunsafeOverflowForElements({\n\t\t\t\telement,\n\t\t\t}),\n\t\t);\n\t});\n\n\treturn (\n\t\t<div ref={ref} style={{ overflowY: 'scroll' }}>\n\t\t\t{children}\n\t\t</div>\n\t);\n}\n```\n\n----------------------------------------\n\nTITLE: Using Live Region for Accessibility Announcements in TypeScript\nDESCRIPTION: Example of using the live region package to provide screen reader announcements for drag and drop operations. The announce function creates a message that describes the action that was performed.\nSOURCE: https://github.com/atlassian/pragmatic-drag-and-drop/blob/main/packages/documentation/constellation/09-accessibility-guidelines/index.mdx#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { announce } from '@atlaskit/live-region';\n\nannounce('Task \"Clean dishes\" moved to list \"Doing\" from \"Todo\".');\n```\n\n----------------------------------------\n\nTITLE: Implementing Isolated Drag and Drop Experiences Using React Context in TypeScript\nDESCRIPTION: This snippet demonstrates how to create isolated drag and drop experiences using React context to share a unique identifier across components within the same board.\nSOURCE: https://github.com/atlassian/pragmatic-drag-and-drop/blob/main/packages/documentation/constellation/05-core-package/09-recipes/00-isolating-experiences/index.mdx#2025-04-14_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport React, { createContext, useContext, useEffect, useRef, useState } from 'react';\n\nimport invariant from 'tiny-invariant';\n\nimport {\n\tdraggable,\n\tdropTargetForElements,\n} from '@atlaskit/pragmatic-drag-and-drop/element/adapter';\n\nconst BoardContext = createContext<Symbol | null>(null);\n\nfunction Card({ cardId, columnId }: { cardId: string; columnId: string }) {\n\tconst instanceId = useContext(BoardContext);\n\tconst ref = useRef<HTMLDivElement | null>(null);\n\n\tuseEffect(() => {\n\t\tconst element = ref.current;\n\t\tinvariant(element);\n\t\treturn draggable({\n\t\t\telement,\n\t\t\tgetInitialData: () => ({ cardId, type: 'card', columnId, instanceId }),\n\t\t});\n\t}, [cardId, columnId, instanceId]);\n\n\treturn <div ref={ref}>Card: {cardId}</div>;\n}\n\nfunction Column({ columnId }: { columnId: string }) {\n\tconst instanceId = useContext(BoardContext);\n\tconst ref = useRef<HTMLDivElement | null>(null);\n\n\tuseEffect(() => {\n\t\tconst element = ref.current;\n\t\tinvariant(element);\n\t\treturn dropTargetForElements({\n\t\t\telement: element,\n\t\t\tgetData: () => ({ columnId }),\n\t\t\tcanDrop: ({ source }) => {\n\t\t\t\t// our previous check\n\t\t\t\tif (source.data.type !== 'card' || source.data.columnId !== columnId) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t\t// our new check: only accept dropping within this experience\n\t\t\t\treturn source.data.instanceId === instanceId;\n\t\t\t},\n\t\t});\n\t}, [columnId, instanceId]);\n\n\treturn (\n\t\t<div ref={ref}>\n\t\t\t<Card cardId=\"hello\" columnId={columnId} />\n\t\t</div>\n\t);\n}\n\n// each <Board/> will be isolated\nexport function Board() {\n\tconst [instanceId] = useState(() => Symbol('instance-id'));\n\n\treturn (\n\t\t<BoardContext.Provider value={instanceId}>\n\t\t\t<Column columnId=\"first\" />\n\t\t</BoardContext.Provider>\n\t);\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Deferred Loading with Dynamic Imports in React\nDESCRIPTION: Demonstrates how to use dynamic imports within a useEffect hook to load Pragmatic drag and drop modules only when a component is mounted. Uses AbortController for proper cleanup when the component unmounts.\nSOURCE: https://github.com/atlassian/pragmatic-drag-and-drop/blob/main/packages/documentation/constellation/05-core-package/09-recipes/03-deferred-loading/react.mdx#2025-04-14_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport React, { useEffect } from 'react';\nimport invariant from 'tiny-invariant';\n\nfunction Card() {\n  const ref = useRef<HTMLDivElement | null>(null);\n  const [state, setState] = useState();\n\n  useEffect(() => {\n    const controller = new AbortController();\n\n    (async () => {\n      // load in all the modules that you need\n      const modules = await Promise.all([\n        import('@atlaskit/pragmatic-drag-and-drop/element/adapter'),\n        import('@atlaskit/pragmatic-drag-and-drop/combine'),\n      ]);\n      if (controller.signal.aborted) {\n        return;\n      }\n      invariant(el);\n\n      const [{draggable, dropTargetForElements}, {combine}] = modules;\n\n      const cleanup = combine(\n        draggable({\n        element: el,\n        onDragStart: () => setState('dragging'),\n        onDrop: () => setState('idle'),\n      }),\n      dropTargetForElements({\n        element: el,\n        onDrop: () => console.log('dropped on')\n      }));\n\n      controller.signal.addEventListener('abort', cleanup, { once: true });\n    })();\n\n    return () => {\n      controller.abort();\n    };\n  }, []);\n\n  return <div ref={ref}>Drag me<div>\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Deferred Loading in React Component with useEffect\nDESCRIPTION: Shows a complete React component implementation that defers loading of the drag and drop functionality until after the component mounts. Uses AbortController for proper cleanup and async/await pattern for dynamic imports.\nSOURCE: https://github.com/atlassian/pragmatic-drag-and-drop/blob/main/packages/documentation/constellation/05-core-package/09-recipes/03-deferred-loading/index.mdx#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport React, { useEffect } from 'react';\n\nfunction Card() {\n  const ref = useRef<HTMLDivElement | null>(null);\n\n  useEffect(() => {\n    const controller = new AbortController();\n\n    (async () => {\n      const { draggable } = await import('@atlaskit/pragmatic-drag-and-drop/element/adapter');\n      if (controller.signal.aborted) {\n        return;\n      }\n      const el = ref.current;\n      if(!el) {\n        return;\n      }\n\n      const cleanup = draggable({\n        element: el,\n      });\n      controller.signal.addEventListener('abort', cleanup, { once: true });\n    })();\n\n    return () => {\n      controller.abort();\n    };\n  }, []);\n\n  return <div ref={ref}>Drag me<div>\n});\n```\n\n----------------------------------------\n\nTITLE: Importing Drag and Drop Functions in JavaScript\nDESCRIPTION: This code snippet demonstrates how to import the necessary functions from the pragmatic-drag-and-drop library to implement drag and drop functionality in a JavaScript application.\nSOURCE: https://github.com/atlassian/pragmatic-drag-and-drop/blob/main/packages/documentation/constellation/index/props.mdx#2025-04-14_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { draggable, droppable } from '@atlaskit/pragmatic-drag-and-drop';\n```\n\n----------------------------------------\n\nTITLE: Extracting Data from External Drag Operations\nDESCRIPTION: Demonstrates how to extract specific types of data (files and text) from external drag sources during a drop event. The data is only accessible during onDrop.\nSOURCE: https://github.com/atlassian/pragmatic-drag-and-drop/blob/main/packages/documentation/constellation/05-core-package/00-adapters/02-external/about.mdx#2025-04-14_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n\tdropTargetForExternal,\n\tmonitorForExternal,\n} from '@atlaskit/pragmatic-drag-and-drop/external/adapter';\nimport { containsFiles, getFiles } from '@atlaskit/pragmatic-drag-and-drop/external/file';\nimport { containsText, getText } from '@atlaskit/pragmatic-drag-and-drop/external/text';\n\ndropTargetForExternal({\n\tcanDrop: some(containsFiles, containsText),\n\tonDrop({ source }) {\n\t\tconst files = getFiles({ source });\n\t\tconst text = getText({ source });\n\t},\n});\n\nmonitorForExternal({\n\tcanMonitor: some(containsFiles, containsText),\n\tonDrop({ source }) {\n\t\tconst files = getFiles({ source });\n\t\tconst text = getText({ source });\n\t},\n});\n```\n\n----------------------------------------\n\nTITLE: Consuming Custom Media in Drop Targets with TypeScript\nDESCRIPTION: This snippet demonstrates how to use the 'dropTargetForExternal' function to handle custom media types in drop targets. It shows how to check for a specific media type and extract data from it during a drop operation.\nSOURCE: https://github.com/atlassian/pragmatic-drag-and-drop/blob/main/packages/documentation/constellation/05-core-package/00-adapters/02-external/custom-media-types.mdx#2025-04-14_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { dropTargetForExternal } from '@atlaskit/pragmatic-drag-and-drop/external/adapter';\n\ndropTargetForExternal({\n\telement: myElement,\n\t// We are also only enabling dropping if a trello card is being dragged\n\tcanDrop: ({ source }) => source.types.includes('application/vnd.trello-card-id'),\n\tonDrop: ({ source }) => {\n\t\tconst cardId: string | null = source.getData('application/vnd.trello-card-id');\n\n\t\tif (cardId == null) {\n\t\t\treturn;\n\t\t}\n\t\t// do drop operation\n\t},\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Scroll Into View for Drag Preview\nDESCRIPTION: Utility implementation to ensure draggable elements are properly visible before capture by scrolling them into view.\nSOURCE: https://github.com/atlassian/pragmatic-drag-and-drop/blob/main/packages/documentation/constellation/05-core-package/00-adapters/00-element/drag-previews.mdx#2025-04-14_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { scrollJustEnoughIntoView } from '@atlaskit/pragmatic-drag-and-drop/element/scroll-just-enough-into-view';\n\ndraggable({\n\telement: myElement,\n\tonGenerateDragPreview({ source }) {\n\t\tscrollJustEnoughIntoView({ element: source.element });\n\t},\n});\n```\n\n----------------------------------------\n\nTITLE: Creating and Dispatching a DragEvent in TypeScript\nDESCRIPTION: This snippet shows how to create a DragEvent and add data to its dataTransfer object, which is useful for testing drag and drop functionality.\nSOURCE: https://github.com/atlassian/pragmatic-drag-and-drop/blob/main/packages/unit-testing/constellation/index/about.mdx#2025-04-14_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst event = new DragEvent('dragenter', {\n\tcancelable: true,\n\tbubbles: true,\n});\nevent.dataTransfer?.items.add('hello world', 'text/plain');\n\ntarget.dispatchEvent(event);\n```\n\n----------------------------------------\n\nTITLE: React Portal Native Drag Preview Implementation\nDESCRIPTION: Implementation of a native drag preview using React portals, maintaining React context while requiring component re-rendering.\nSOURCE: https://github.com/atlassian/pragmatic-drag-and-drop/blob/main/packages/documentation/constellation/05-core-package/00-adapters/00-element/drag-previews.mdx#2025-04-14_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\ntype State =\n\t| {\n\t\t\ttype: 'idle';\n\t  }\n\t| {\n\t\t\ttype: 'preview';\n\t\t\tcontainer: HTMLElement;\n\t  };\n\nfunction Item() {\n\tconst [state, setState] = useState<State>({ type: 'idle' });\n\tconst ref = useRef<HTMLDivElement | null>(null);\n\n\tuseEffect(() => {\n\t\tinvariant(ref.current);\n\n\t\treturn draggable({\n\t\t\telement: ref.current,\n\t\t\tonGenerateDragPreview({ nativeSetDragImage }) {\n\t\t\t\tsetCustomNativeDragPreview({\n\t\t\t\t\trender({ container }) {\n\t\t\t\t\t\tsetState({ type: 'preview', container });\n\t\t\t\t\t\treturn () => setState({ type: 'idle' });\n\t\t\t\t\t},\n\t\t\t\t\tnativeSetDragImage,\n\t\t\t\t});\n\t\t\t},\n\t\t});\n\t}, []);\n\n\treturn (\n\t\t<>\n\t\t\t<div ref={ref}>Drag Me</div>\n\t\t\t{state.type === 'preview' ? ReactDOM.createPortal(<Preview />, state.container) : null}\n\t\t</>\n\t);\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Draggable and Drop Target with Box Drop Indicator in React TSX\nDESCRIPTION: Demonstrates a full implementation of a draggable and drop target item using the Box Drop Indicator, including state management and event handling.\nSOURCE: https://github.com/atlassian/pragmatic-drag-and-drop/blob/main/packages/react-drop-indicator/constellation/index/about.mdx#2025-04-14_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nexport function Item() {\n\tconst ref = useRef<HTMLDivElement | null>(null);\n\tconst [closestEdge, setClosestEdge] = useState<Edge | null>(null);\n\n\tuseEffect(() => {\n\t\tconst el = ref.current;\n\t\tinvariant(el);\n\t\treturn combine(\n\t\t\tdraggable({\n\t\t\t\telement: el,\n\t\t\t}),\n\t\t\tdropTargetForElements({\n\t\t\t\telement: el,\n\t\t\t\tonDragStart: () => setClosestEdge('bottom'),\n\t\t\t\tonDragEnter: () => setClosestEdge('bottom'),\n\t\t\t\tonDragLeave: () => setClosestEdge(null),\n\t\t\t\tonDrop: () => setClosestEdge(null),\n\t\t\t}),\n\t\t);\n\t}, []);\n\n\treturn (\n\t\t<div css={relativeStyles} ref={ref}>\n\t\t\t<div css={itemStyles}>item A</div>\n\t\t\t{closestEdge && <DropIndicator edge={closestEdge} />}\n\t\t</div>\n\t);\n}\n```\n\n----------------------------------------\n\nTITLE: Combining Drop Targets and Monitors for External Events\nDESCRIPTION: Shows how to use both drop targets and monitors together to track external drag operations at different levels, from entering the window to interactions with specific elements.\nSOURCE: https://github.com/atlassian/pragmatic-drag-and-drop/blob/main/packages/documentation/constellation/05-core-package/00-adapters/02-external/about.mdx#2025-04-14_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\ndropTargetForExternal({\n\telement: el,\n\tonDragEnter: () => console.log('user is now over this drop target'),\n\tonDragLeave: () => console.log('user is no longer over this drop target'),\n\tonDrop: () => console.log('user dropped on this drop target (or a child drop target)'),\n});\nmonitorForExternal({\n\tonDragStart: () => console.log('file is entering the window'),\n\tonDrop: () => console.log('drag is finished'),\n});\n```\n\n----------------------------------------\n\nTITLE: Adding Accessible File Input in TSX\nDESCRIPTION: Demonstrates how to add a native file input for accessibility in drag and drop operations. This enables users of assistive technologies to perform file uploads.\nSOURCE: https://github.com/atlassian/pragmatic-drag-and-drop/blob/main/packages/documentation/constellation/05-core-package/00-adapters/02-external/files.mdx#2025-04-14_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n<input type=\"file\" />\n```\n\n----------------------------------------\n\nTITLE: Maximized Deferred Loading Using Separate File in TypeScript\nDESCRIPTION: Demonstrates how to extract drag and drop logic into a separate file to defer even more code from the initial bundle. This approach allows regular imports in the utility file while maintaining the performance benefits of deferred loading.\nSOURCE: https://github.com/atlassian/pragmatic-drag-and-drop/blob/main/packages/documentation/constellation/05-core-package/09-recipes/03-deferred-loading/react.mdx#2025-04-14_snippet_1\n\nLANGUAGE: ts\nCODE:\n```\n// attach.js\n// regular imports\nimport {\n\tdraggable,\n\tdropTargetForElements,\n} from '@atlaskit/pragmatic-drag-and-drop/element/adapter';\nimport { combine } from '@atlaskit/pragmatic-drag-and-drop/combine';\nimport invariant from 'tiny-invariant';\n\nexport function attach({ ref, setState }) {\n\t// all of this code can get deferred\n\tconst el = ref.current;\n\tinvariant(el);\n\treturn combine(\n\t\tdraggable({\n\t\t\telement: el,\n\t\t\tonDragStart: () => setState('dragging'),\n\t\t\tonDrop: () => setState('idle'),\n\t\t}),\n\t\tdropTargetForElements({\n\t\t\telement: el,\n\t\t\tonDrop: () => console.log('dropped on'),\n\t\t}),\n\t);\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Up Drag and Drop Monitors in React Components\nDESCRIPTION: This snippet shows how to create and manage a monitor for external drag events using useEffect. The monitor will be automatically cleaned up when the component unmounts.\nSOURCE: https://github.com/atlassian/pragmatic-drag-and-drop/blob/main/packages/documentation/constellation/05-core-package/08-UI-frameworks/react.mdx#2025-04-14_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nexport function App() {\n\n  useEffect(() => {\n    // this is nice as the monitor will be cleaned up when <App /> is unmounted\n    const cleanup = monitorForExternal({\n      onDragStart: () => console.log('A file is dragging!');\n    });\n\n    return cleanup;\n  }, []);\n\n  return <Example>;\n};\n```\n\n----------------------------------------\n\nTITLE: Custom Native Drag Preview Implementation in React/TypeScript\nDESCRIPTION: Example showing how to create custom native drag previews using setCustomNativeDragPreview function with React components. Demonstrates render and cleanup pattern for drag preview elements.\nSOURCE: https://github.com/atlassian/pragmatic-drag-and-drop/blob/main/packages/core/CHANGELOG.md#2025-04-14_snippet_10\n\nLANGUAGE: tsx\nCODE:\n```\nimport { setCustomNativeDragPreview } from '@atlaskit/drag-and-drop/util/set-custom-native-drag-preview';\n\ndraggable({\n\telement: myElement,\n\tonGenerateDragPreview: ({ nativeSetDragImage }) => {\n\t\tsetCustomNativeDragPreview({\n\t\t\trender: function render({ container }) {\n\t\t\t\tReactDOM.render(<Preview item={item} />, container);\n\t\t\t\treturn function cleanup() {\n\t\t\t\t\tReactDOM.unmountComponentAtNode(container);\n\t\t\t\t};\n\t\t\t},\n\t\t\tnativeSetDragImage,\n\t\t});\n\t},\n});\n```\n\n----------------------------------------\n\nTITLE: Using Cleanup Functions with Pragmatic Drag-and-Drop Elements\nDESCRIPTION: Demonstrates how draggable, drop target, and monitor adapters return cleanup functions that can be called to remove their behavior. These functions help manage the lifecycle of drag and drop functionality.\nSOURCE: https://github.com/atlassian/pragmatic-drag-and-drop/blob/main/packages/documentation/constellation/05-core-package/05-utilities/index.mdx#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n\tdraggable,\n\tdropTargetForElements,\n\tmonitorForElements,\n} from '@atlaskit/pragmatic-drag-and-drop/element/adapter';\n\n// You don't need to use this type explicitly, but including this import so you\n// know where you can get the type if you want it.\nimport type { CleanupFn } from '@atlaskit/pragmatic-drag-and-drop/types';\n\nconst cleanupDraggable: CleanupFn = draggable({ element: myElement });\nconst cleanupDropTarget: CleanupFn = dropTargetForElements({\n\telement: myElement,\n});\nconst cleanupMonitor: CleanupFn = monitorForElements({ element: myElement });\n\n// unbind all functionality:\ncleanupDraggable();\ncleanupDropTarget();\ncleanupMonitor();\n```\n\n----------------------------------------\n\nTITLE: Enhanced Draggable Chess Piece with Data Attachment\nDESCRIPTION: Enhances the draggable piece to attach piece type and location data, making it available to drop targets. This allows the drop targets to make decisions based on the piece's properties.\nSOURCE: https://github.com/atlassian/pragmatic-drag-and-drop/blob/main/packages/documentation/constellation/01-tutorial/index.mdx#2025-04-14_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nfunction Piece({ location, pieceType, image, alt }: PieceProps) {\n\tconst ref = useRef(null);\n\tconst [dragging, setDragging] = useState<boolean>(false);\n\n\tuseEffect(() => {\n\t\tconst el = ref.current;\n\t\tinvariant(el);\n\n\t\treturn draggable({\n\t\t\telement: el,\n\t\t\tgetInitialData: () => ({ location, pieceType }), // NEW\n\t\t\tonDragStart: () => setDragging(true),\n\t\t\tonDrop: () => setDragging(false),\n\t\t});\n\t}, [location, pieceType]);\n\n\t/*...*/\n}\n```\n\n----------------------------------------\n\nTITLE: Attaching Custom Media to Draggable Elements in TypeScript\nDESCRIPTION: This snippet shows how to use the 'draggable' function from the Pragmatic Drag and Drop library to attach custom media types to a draggable element. It demonstrates attaching a Trello card ID as a custom media type.\nSOURCE: https://github.com/atlassian/pragmatic-drag-and-drop/blob/main/packages/documentation/constellation/05-core-package/00-adapters/02-external/custom-media-types.mdx#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { draggable } from '@atlaskit/pragmatic-drag-and-drop/element/adapter';\n\ndraggable({\n\telement: myElement,\n\tgetInitialDataForExternal: () => ({\n\t\t'application/vnd.trello-card-id': card.id,\n\t}),\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a React Scrollable List with Auto Scrolling\nDESCRIPTION: Example of a React component that creates a scrollable list with drop target functionality and auto scrolling. It demonstrates how to combine auto scrolling with other Pragmatic drag and drop bindings.\nSOURCE: https://github.com/atlassian/pragmatic-drag-and-drop/blob/main/packages/auto-scroll/constellation/index/about.mdx#2025-04-14_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useRef, ReactElement } from 'react';\nimport { dropTargetForElements } from '@atlaskit/pragmatic-drag-and-drop/element/adapter';\nimport { autoScrollForElements } from '@atlaskit/pragmatic-drag-and-drop-auto-scroll/element';\nimport { combine } from '@atlaskit/pragmatic-drag-and-drop/combine';\nimport invariant from 'tiny-invariant';\n\nfunction ScrollableList({ children }: { children: ReactElement }) {\n\tconst ref = useRef<HTMLDivElement | null>(null);\n\n\tuseEffect(() => {\n\t\tconst element = ref.current;\n\t\tinvariant(element, 'Element ref not set');\n\n\t\treturn combine(\n\t\t\tdropTargetForElements({\n\t\t\t\telement,\n\t\t\t}),\n\t\t\t// A scrollable element does not need to be a drop target,\n\t\t\t// but in this case it is.\n\t\t\t// We can add auto scrolling to an element along side our other\n\t\t\t// Pragmatic drag and drop bindings\n\t\t\tautoScrollForElements({\n\t\t\t\telement,\n\t\t\t}),\n\t\t);\n\t});\n\n\treturn (\n\t\t<div ref={ref} style={{ overflowY: 'scroll' }}>\n\t\t\t{children}\n\t\t</div>\n\t);\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Drop Target for External Elements in TypeScript\nDESCRIPTION: Demonstrates how to create a drop target for external elements using the dropTargetForExternal adapter.\nSOURCE: https://github.com/atlassian/pragmatic-drag-and-drop/blob/main/packages/documentation/constellation/05-core-package/03-drop-targets/index.mdx#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// drop targets are exposed through adapters\nimport { dropTargetForExternal } from '@atlaskit/pragmatic-drag-and-drop/external/adapter';\n\nconst cleanup = dropTargetForExternal({\n\telement: myElement,\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing a Drop Target for External Data\nDESCRIPTION: Creates a drop target that can accept external data from outside the current window. The example shows a basic implementation with a console log on drag enter.\nSOURCE: https://github.com/atlassian/pragmatic-drag-and-drop/blob/main/packages/documentation/constellation/05-core-package/00-adapters/02-external/about.mdx#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { dropTargetForExternal } from '@atlaskit/pragmatic-drag-and-drop/external/adapter';\n\nconst cleanup = dropTargetForExternal({\n  element: myElement,\n  onDragEnter: () => console.log('Some external data was dragged over me');\n});\n```\n\n----------------------------------------\n\nTITLE: Using combine() with React useEffect Hook\nDESCRIPTION: Shows how to integrate the combine utility with React's useEffect hook to properly manage the lifecycle of drag and drop functionality in React components.\nSOURCE: https://github.com/atlassian/pragmatic-drag-and-drop/blob/main/packages/documentation/constellation/05-core-package/05-utilities/index.mdx#2025-04-14_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nuseEffect(() => {\n\tconst cleanup = combine(\n\t\tdraggable({ element: myElement }),\n\t\tdropTargetForElements({\n\t\t\telement: myElement,\n\t\t}),\n\t\tmonitorForElements({ element: myElement }),\n\t);\n\treturn cleanup;\n}, []);\n\n// or even simpler:\nuseEffect(() => {\n\treturn combine(\n\t\tdraggable({ element: myElement }),\n\t\tdropTargetForElements({\n\t\t\telement: myElement,\n\t\t}),\n\t\tmonitorForElements({ element: myElement }),\n\t);\n}, []);\n```\n\n----------------------------------------\n\nTITLE: Creating a Draggable Element with Element Adapter\nDESCRIPTION: Shows how to use the draggable function from the element adapter to make an HTML element draggable.\nSOURCE: https://github.com/atlassian/pragmatic-drag-and-drop/blob/main/packages/documentation/constellation/05-core-package/index.mdx#2025-04-14_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { draggable } from '@atlaskit/pragmatic-drag-and-drop/element/adapter';\n\nconst cleanup = draggable({\n\telement: myElement,\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Axis Locking for Auto-Scroll\nDESCRIPTION: Example of implementing axis locking to restrict auto-scrolling to a specific direction. Shows how to configure the autoScrollForElements function with axis constraints.\nSOURCE: https://github.com/atlassian/pragmatic-drag-and-drop/blob/main/packages/auto-scroll/constellation/index/about.mdx#2025-04-14_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nautoScrollForElements({\n  element: myElement,\n  getAllowedAxis: () => 'vertical',\n})\n```\n\n----------------------------------------\n\nTITLE: Advanced Chess Square Drop Target with Move Validation\nDESCRIPTION: Implements a chess square drop target that validates potential moves. The component uses the piece type and location data from the draggable to determine if a move is valid, coloring the square accordingly.\nSOURCE: https://github.com/atlassian/pragmatic-drag-and-drop/blob/main/packages/documentation/constellation/01-tutorial/index.mdx#2025-04-14_snippet_5\n\nLANGUAGE: ts\nCODE:\n```\ntype HoveredState = 'idle' | 'validMove' | 'invalidMove';\n\nfunction Square({ pieces, location, children }: SquareProps) {\n\tconst ref = useRef(null);\n\tconst [state, setState] = useState<HoveredState>('idle');\n\n\tuseEffect(() => {\n\t\tconst el = ref.current;\n\t\tinvariant(el);\n\n\t\treturn dropTargetForElements({\n\t\t\telement: el,\n\t\t\tonDragEnter: ({ source }) => {\n\t\t\t\t// source is the piece being dragged over the drop target\n\t\t\t\tif (\n\t\t\t\t\t// type guards\n\t\t\t\t\t!isCoord(source.data.location) ||\n\t\t\t\t\t!isPieceType(source.data.pieceType)\n\t\t\t\t) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (canMove(source.data.location, location, source.data.pieceType, pieces)) {\n\t\t\t\t\tsetState('validMove');\n\t\t\t\t} else {\n\t\t\t\t\tsetState('invalidMove');\n\t\t\t\t}\n\t\t\t},\n\t\t\tonDragLeave: () => setState('idle'),\n\t\t\tonDrop: () => setState('idle'),\n\t\t});\n\t}, [location, pieces]);\n\n\t/*...*/\n}\n```\n\n----------------------------------------\n\nTITLE: Extracting Text Data from Drop Operations with getText\nDESCRIPTION: The 'getText' function is used to extract text data ('text/plain') from drop data. It returns the text as a string if present, or null if there is no text data. This function can be used in both dropTargetForExternal and monitorForExternal callbacks.\nSOURCE: https://github.com/atlassian/pragmatic-drag-and-drop/blob/main/packages/documentation/constellation/05-core-package/00-adapters/02-external/text.mdx#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { getText } from '@atlaskit/pragmatic-drag-and-drop/external/text';\n\ndropTargetForExternal({\n\telement: myElement,\n\tonDrop({ source }) {\n\t\tconst text: string | null = getText({ source });\n\t},\n});\n\nmonitorForExternal({\n\tonDrop({ source }) {\n\t\tconst text: string | null = getText({ source });\n\t},\n});\n```\n\n----------------------------------------\n\nTITLE: Isolating Drag and Drop Experiences Using Shared Parent in TypeScript\nDESCRIPTION: This snippet shows how to isolate drag and drop experiences by checking if the draggable and drop target elements share the same parent 'board' element.\nSOURCE: https://github.com/atlassian/pragmatic-drag-and-drop/blob/main/packages/documentation/constellation/05-core-package/09-recipes/00-isolating-experiences/index.mdx#2025-04-14_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\ndropTargetForElements({\n\telement: myDropTargetElement,\n\tgetData: () => ({ columnId }),\n\tcanDrop: ({ source }) => {\n\t\t// our previous check\n\t\tif (source.data.type !== 'card' || source.data.columnId !== columnId) {\n\t\t\treturn false;\n\t\t}\n\n\t\t// our new additional check: only accept dropping if the drop target\n\t\t// and the draggable are inside the same \"board\" element\n\t\tconst boardDropTargetIsIn = myDropTargetElement.closest('.board');\n\t\tconst boardDraggableIsIn = source.element.closest('.board');\n\n\t\treturn boardDropTargetIsIn === boardDraggableIsIn;\n\t},\n});\n```\n\n----------------------------------------\n\nTITLE: Importing and Using Auto Scrollers for Different Adapter Types\nDESCRIPTION: Demonstrates how to import and use different auto scrollers based on adapter type, and how to enable and disable auto scrolling for elements.\nSOURCE: https://github.com/atlassian/pragmatic-drag-and-drop/blob/main/packages/auto-scroll/constellation/index/about.mdx#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// each adapter type has its own auto scroller\nimport { autoScrollForElements } from '@atlaskit/pragmatic-drag-and-drop-auto-scroll/element';\nimport { autoScrollForExternal } from '@atlaskit/pragmatic-drag-and-drop-auto-scroll/external';\nimport { autoScrollForTextSelection } from '@atlaskit/pragmatic-drag-and-drop-auto-scroll/text-selection';\n\n// enable better auto scrolling\nconst cleanup = autoScrollForElements({\n\telement: myScrollableElement,\n});\n\n// disable better auto scrolling\ncleanup();\n```\n\n----------------------------------------\n\nTITLE: Blocking Drag Operations to iFrames in Pragmatic Drag-and-Drop\nDESCRIPTION: This code demonstrates how to use the blockDraggingToIFrames utility to prevent users from dragging into iframe elements. It combines this utility with the draggable adapter using the combine function, which returns a cleanup function for both operations.\nSOURCE: https://github.com/atlassian/pragmatic-drag-and-drop/blob/main/packages/documentation/constellation/05-core-package/00-adapters/00-element/other-utilities.mdx#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { combine } from '@atlaskit/pragmatic-drag-and-drop/combine';\nimport { draggable } from '@atlaskit/pragmatic-drag-and-drop/element/adapter';\nimport { blockDraggingToIFrames } from '@atlaskit/pragmatic-drag-and-drop/element/block-dragging-to-iframes';\n\nconst cleanup = combine(\n\tblockDraggingToIFrames({ element }),\n\tdraggable({\n\t\telement,\n\t}),\n);\n```\n\n----------------------------------------\n\nTITLE: Deferred Loading of Auto-Scroll Functionality\nDESCRIPTION: Demonstrates how to asynchronously import the auto-scroll functionality after a drag operation has started. Shows dynamic import pattern for the auto-scroll module.\nSOURCE: https://github.com/atlassian/pragmatic-drag-and-drop/blob/main/packages/auto-scroll/constellation/index/about.mdx#2025-04-14_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nconst { autoScrollForElements } = await import(\n\t'@atlaskit/pragmatic-drag-and-drop-auto-scroll/element'\n);\n```\n\n----------------------------------------\n\nTITLE: Triggering Post-Move Flash Animation in TypeScript\nDESCRIPTION: Demonstrates how to trigger a flash animation on an element after it has been moved using the pragmatic-drag-and-drop library. The function requires @atlaskit/motion for duration values and @atlaskit/tokens for flash colors.\nSOURCE: https://github.com/atlassian/pragmatic-drag-and-drop/blob/main/packages/flourish/constellation/trigger-post-move-flash/examples.mdx#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { triggerPostMoveFlash } from '@atlaskit/pragmatic-drag-and-drop/flourish';\n\n// trigger post move flash on an element after it has finished moving\ntriggerPostMoveFlash(myElement);\n```\n\n----------------------------------------\n\nTITLE: Using preventUnhandled to Control Drop Behavior\nDESCRIPTION: Demonstrates how to use the preventUnhandled utility to explicitly allow drops even when no drop target accepts the drag. This is useful for disabling native drag preview animations or preventing default behavior for external drops.\nSOURCE: https://github.com/atlassian/pragmatic-drag-and-drop/blob/main/packages/documentation/constellation/05-core-package/05-utilities/index.mdx#2025-04-14_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport { monitorForExternal } from '@atlaskit/pragmatic-drag-and-drop/external/adapter';\nimport { preventUnhandled } from '@atlaskit/pragmatic-drag-and-drop/prevent-unhandled';\nimport { combine } from '@atlaskit/pragmatic-drag-and-drop/combine';\n\nmonitorForExternal({\n\tonDragStart: () => {\n\t\t// when any drag starts for files block unhandled drags\n\t\tpreventUnhandled.start();\n\t},\n});\n```\n\n----------------------------------------\n\nTITLE: Using containsHTML to Check for HTML Data in Drag Operations\nDESCRIPTION: Demonstrates how to use the containsHTML function to detect if HTML content is being dragged. This function can be used as a predicate for drop targets and monitors to determine if they should respond to the drag operation.\nSOURCE: https://github.com/atlassian/pragmatic-drag-and-drop/blob/main/packages/documentation/constellation/05-core-package/00-adapters/02-external/HTML.mdx#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { containsHTML } from '@atlaskit/pragmatic-drag-and-drop/external/html';\n\ndropTargetForExternal({\n\telement: myElement,\n\tcanDrop: containsHTML,\n});\n\nmonitorForExternal({\n\tcanMonitor: containsHTML,\n});\n```\n\n----------------------------------------\n\nTITLE: Using once() with Expensive Data Calculation in Drop Targets\nDESCRIPTION: Demonstrates how to use the once utility to optimize performance when calculating expensive data for drop targets, ensuring the calculation is only performed once.\nSOURCE: https://github.com/atlassian/pragmatic-drag-and-drop/blob/main/packages/documentation/constellation/05-core-package/05-utilities/index.mdx#2025-04-14_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\ndropTargetForExternal({\n\tgetData: once(getExpensiveData),\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a Monitor for External Drag Operations\nDESCRIPTION: Sets up a monitor to listen for external drag operations anywhere in the window. This example logs when an external drag operation enters the window.\nSOURCE: https://github.com/atlassian/pragmatic-drag-and-drop/blob/main/packages/documentation/constellation/05-core-package/00-adapters/02-external/about.mdx#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { monitorForExternal } from '@atlaskit/pragmatic-drag-and-drop/external/adapter';\n\nconst cleanup = monitorForExternal({\n  onDragStart: () => console.log('An external drag has entered the window');\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a Drop Target for External Drags\nDESCRIPTION: Demonstrates how to create a drop target for external drag operations using the dropTargetForExternal function.\nSOURCE: https://github.com/atlassian/pragmatic-drag-and-drop/blob/main/packages/documentation/constellation/05-core-package/index.mdx#2025-04-14_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { dropTargetForExternal } from '@atlaskit/pragmatic-drag-and-drop/external/adapter';\n\nconst cleanup = dropTargetForExternal({\n\telement: myElement,\n});\n```\n\n----------------------------------------\n\nTITLE: Combining Multiple Drag and Drop Functionalities\nDESCRIPTION: Demonstrates how to use the combine utility to merge multiple drag and drop functionalities into a single cleanup function.\nSOURCE: https://github.com/atlassian/pragmatic-drag-and-drop/blob/main/packages/documentation/constellation/05-core-package/index.mdx#2025-04-14_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { combine } from '@atlaskit/pragmatic-drag-and-drop/combine';\n\nconst cleanup = combine(\n\tdraggable({\n\t\telement: myElement,\n\t}),\n\tdropTarget({\n\t\telement: myElement,\n\t}),\n);\n```\n\n----------------------------------------\n\nTITLE: Using Multiple Drop Targets on Same Element for Different Entity Types\nDESCRIPTION: Demonstrates the correct way to use the same element as a drop target for both elements and external files. This is allowed because each drop target handles a different entity type.\nSOURCE: https://github.com/atlassian/pragmatic-drag-and-drop/blob/main/packages/documentation/constellation/05-core-package/07-reconciliation/index.mdx#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// ✅ Using the same element as a drop target for elements and for files\nconst cleanup = combine(\n\tdropTargetForElements({\n\t\telement: myElement,\n\t}),\n\tdropTargetForExternal({\n\t\telement: myElement,\n\t}),\n);\n```\n\n----------------------------------------\n\nTITLE: Checking for Text Data in Drag Operations with containsText\nDESCRIPTION: The 'containsText' function is used to determine if text data ('text/plain') is being dragged. It can be used in both dropTargetForExternal and monitorForExternal functions to check if the dragged data contains text.\nSOURCE: https://github.com/atlassian/pragmatic-drag-and-drop/blob/main/packages/documentation/constellation/05-core-package/00-adapters/02-external/text.mdx#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { containsText } from '@atlaskit/pragmatic-drag-and-drop/external/text';\n\ndropTargetForExternal({\n\telement: myElement,\n\tcanDrop: containsText,\n});\n\nmonitorForExternal({\n\tcanMonitor: containsText,\n});\n```\n\n----------------------------------------\n\nTITLE: Dynamic Import of Drag and Drop Functionality with AbortController\nDESCRIPTION: This implementation demonstrates how to dynamically import and attach drag and drop behavior after a component has rendered. It uses AbortController to manage cleanup when the component unmounts or dependencies change.\nSOURCE: https://github.com/atlassian/pragmatic-drag-and-drop/blob/main/packages/documentation/constellation/05-core-package/08-UI-frameworks/react.mdx#2025-04-14_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nfunction Card({ item }: { item: Item }) {\n  const ref = useRef<HTMLDivElement | null>(null);\n  const itemId = item.itemId;\n\n  useEffect(() => {\n    const controller = new AbortController();\n\n    // Look! We are attaching behaviour after the component has rendered!\n    // Note: Atlassian's, please use http://go/react-async rather than this promise based approach\n    (async () => {\n      const modules = await Promise.all([\n        await import('@atlaskit/pragmatic-drag-and-drop/element/adapter'),\n        await import('@atlaskit/pragmatic-drag-and-drop/combine'),\n      ]);\n\n      if (controller.signal.aborted) {\n        return;\n      }\n\n      const [{ draggable, dropTargetForElements }, { combine }] = modules;\n\n      if (!ref.current) {\n        return;\n      }\n\n      const cleanup = combine(\n        draggable({\n          element: ref.current,\n          getInitialData: () => ({ type: 'card', itemId: itemId }),\n        }),\n        dropTargetForElements({\n          element: ref.current,\n          canDrop: args => args.source.data.type === 'card',\n          getData: () => ({ type: 'card', itemId: itemId }),\n        }),\n      );\n\n      controller.signal.addEventListener('abort', cleanup, { once: true });\n    })();\n\n    return () => {\n      controller.abort();\n    };\n  }, [itemId]);\n\n  return (\n    <div ref={ref}>\n      item id: {item.itemId}</span>\n    </div>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Advanced Conditional Monitoring with Runtime Checks\nDESCRIPTION: Demonstrates more complex conditional monitoring by combining the initial canMonitor filter with additional runtime checks in event handlers.\nSOURCE: https://github.com/atlassian/pragmatic-drag-and-drop/blob/main/packages/documentation/constellation/05-core-package/04-monitors/index.mdx#2025-04-14_snippet_4\n\nLANGUAGE: ts\nCODE:\n```\nmonitorForElements({\n\t// filtering will opt the monitor into the whole drag operation\n\tcanMonitor: ({ source }) => source.data.type === 'card',\n\tonDrag: ({ location }) => {\n\t\t// Additional action filtering based on changes during the drag\n\t\tif (location.current.data.action === 'delete') {\n\t\t\tconsole.log('about to delete');\n\t\t}\n\t},\n});\n```\n\n----------------------------------------\n\nTITLE: Using Closest Edge Addon for Drag and Drop\nDESCRIPTION: Demonstrates how to use the closest edge addon to detect and extract the closest edge when dragging over a drop target. This example shows implementation within a dropTargetForElements callback.\nSOURCE: https://github.com/atlassian/pragmatic-drag-and-drop/blob/main/packages/hitbox/constellation/index/about.mdx#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n\tattachClosestEdge,\n\textractClosestEdge,\n\tEdge,\n} from '@atlaskit/pragmatic-drag-and-drop-hitbox/closest-edge';\n\ndropTargetForElements({\n\telement: myElement,\n\tgetData: ({ input, element }) => {\n\t\t// your base data you want to attach to the drop target\n\t\tconst data = {\n\t\t\titemId: 'A',\n\t\t};\n\t\t// this will 'attach' the closest edge to your `data` object\n\t\treturn attachClosestEdge(data, {\n\t\t\tinput,\n\t\t\telement,\n\t\t\t// you can specify what edges you want to allow the user to be closest to\n\t\t\tallowedEdges: ['top', 'bottom'],\n\t\t});\n\t},\n\tonDrop: (args) => {\n\t\tconst closestEdgeOfTarget: Edge | null = extractClosestEdge(args.self.data);\n\t},\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Safari-safe CSS Transform Check\nDESCRIPTION: Demonstrates how to conditionally apply CSS transforms to drag preview elements based on browser detection, avoiding Safari compatibility issues.\nSOURCE: https://github.com/atlassian/pragmatic-drag-and-drop/blob/main/packages/documentation/constellation/05-core-package/00-adapters/00-element/drag-previews.mdx#2025-04-14_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nconst isSafari: boolean =\n\tnavigator.userAgent.includes('AppleWebKit') && !navigator.userAgent.includes('Chrome');\n\nconst transformStyles = css({\n\ttransform: 'scale(4deg)',\n});\n\nfunction Preview() {\n\treturn <div css={isSafari ? transformStyles : undefined}>Drag preview</div>;\n}\n```\n\n----------------------------------------\n\nTITLE: Conditional Dragging Implementation\nDESCRIPTION: Example showing how to implement conditional dragging behavior using React hooks and the draggable adapter.\nSOURCE: https://github.com/atlassian/pragmatic-drag-and-drop/blob/main/packages/documentation/constellation/05-core-package/00-adapters/00-element/about.mdx#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useEffect } from 'react';\nimport { draggable } from '@atlaskit/pragmatic-drag-and-drop/element/adapter';\n\nfunction noop(){};\n\nfunction Item({isDraggingEnabled}: {isDraggingEnabled: boolean}) {\n  const ref = useRef();\n\n  useEffect({\n    // when disabled, don't make the element draggable\n    // this will allow a parent draggable to still be dragged\n    if(!isDraggingEnabled) {\n      return noop;\n    }\n    return draggable({\n      element: ref.current,\n    });\n  }, [isDraggingEnabled]);\n\n  return <div ref={ref}>Draggable item</div>\n};\n```\n\n----------------------------------------\n\nTITLE: Checking for Files in Drag Operations using TypeScript\nDESCRIPTION: Uses the containsFiles function to determine if file(s) are being dragged. This can be used in both dropTargetForExternal and monitorForExternal functions to conditionally handle file drops.\nSOURCE: https://github.com/atlassian/pragmatic-drag-and-drop/blob/main/packages/documentation/constellation/05-core-package/00-adapters/02-external/files.mdx#2025-04-14_snippet_1\n\nLANGUAGE: ts\nCODE:\n```\nimport { containsFiles } from '@atlaskit/pragmatic-drag-and-drop/external/file';\n\ndropTargetForExternal({\n\telement: myElement,\n\tcanDrop: containsFiles,\n});\n\nmonitorForExternal({\n\tcanMonitor: containsFiles,\n});\n```\n\n----------------------------------------\n\nTITLE: Using reorder() to Reorder Array Items\nDESCRIPTION: Shows how to use the reorder utility function to create a new array with reordered items without modifying the original array or its items. This is useful for handling drag and drop reordering operations.\nSOURCE: https://github.com/atlassian/pragmatic-drag-and-drop/blob/main/packages/documentation/constellation/05-core-package/05-utilities/index.mdx#2025-04-14_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { reorder } from '@atlaskit/pragmatic-drag-and-drop/reorder';\n\nconst reordered = reorder({\n\tlist: [A, B, C],\n\tstartIndex: 0,\n\tfinishIndex: 1,\n});\n\nconsole.log(reordered); // [B, A, C]\n```\n\n----------------------------------------\n\nTITLE: Implementing getData Function for Drop Target\nDESCRIPTION: Shows how to implement the getData function to attach custom data to a drop target.\nSOURCE: https://github.com/atlassian/pragmatic-drag-and-drop/blob/main/packages/documentation/constellation/05-core-package/03-drop-targets/index.mdx#2025-04-14_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nconst cleanup = dropTargetForExternal({\n\telement: myElement,\n\tgetData: () => ({ id: 'Alex' }),\n});\n```\n\n----------------------------------------\n\nTITLE: Using getReorderDestinationIndex Utility\nDESCRIPTION: Demonstrates how to use the getReorderDestinationIndex utility to determine the final index for reordering operations based on the closest edge. Includes two examples with different edge scenarios.\nSOURCE: https://github.com/atlassian/pragmatic-drag-and-drop/blob/main/packages/hitbox/constellation/index/about.mdx#2025-04-14_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { getReorderDestinationIndex } from '@atlaskit/pragmatic-drag-and-drop-hitbox/util/get-reorder-destination-index';\n\n// Dragging A on the left of B\n// A should stay in the same spot\nexpect(\n\tgetReorderDestinationIndex({\n\t\t// list: ['A', 'B', 'C'],\n\t\t// move A to left of B\n\t\tstartIndex: 0,\n\t\tindexOfTarget: 1,\n\t\tclosestEdgeOfTarget: 'left',\n\t\taxis: 'horizontal',\n\t}),\n\t// results in no change: ['A', 'B', 'C']\n).toEqual(0);\n\n// Dragging A on the right of B\n// A should go after B\nexpect(\n\tgetReorderDestinationIndex({\n\t\t// list: ['A', 'B', 'C'],\n\t\t// move A to right of B\n\t\tstartIndex: 0,\n\t\tindexOfTarget: 1,\n\t\tclosestEdgeOfTarget: 'right',\n\t\taxis: 'horizontal',\n\t}),\n\t// A moved forward ['B', 'A', 'C']\n).toEqual(1);\n```\n\n----------------------------------------\n\nTITLE: Using reorderWithEdge Utility\nDESCRIPTION: Demonstrates how to use the reorderWithEdge utility to perform array reordering operations based on the closest edge. Includes two examples showing different reordering scenarios.\nSOURCE: https://github.com/atlassian/pragmatic-drag-and-drop/blob/main/packages/hitbox/constellation/index/about.mdx#2025-04-14_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { reorderWithEdge } from '@atlaskit/pragmatic-drag-and-drop-hitbox/util/reorder-with-edge';\n\n// Dragging A on the left of B\n// A should stay in the same spot\nexpect(\n\treorderWithEdge({\n\t\tlist: ['A', 'B', 'C'],\n\t\t// move A to left of B\n\t\tstartIndex: 0,\n\t\tindexOfTarget: 1,\n\t\tclosestEdgeOfTarget: 'left',\n\t\taxis: 'horizontal',\n\t}),\n\t// results in no change\n).toEqual(['A', 'B', 'C']);\n\n// Dragging A on the right of B\n// A should go after B\nexpect(\n\treorderWithEdge({\n\t\tlist: ['A', 'B', 'C'],\n\t\tstartIndex: 0,\n\t\tindexOfTarget: 1,\n\t\tclosestEdgeOfTarget: 'right',\n\t\taxis: 'horizontal',\n\t}),\n).toEqual(['B', 'A', 'C']);\n```\n\n----------------------------------------\n\nTITLE: Setting Drop Effect for Drop Target\nDESCRIPTION: Shows how to use the getDropEffect function to control the visual feedback (cursor) when dragging over a drop target.\nSOURCE: https://github.com/atlassian/pragmatic-drag-and-drop/blob/main/packages/documentation/constellation/05-core-package/03-drop-targets/index.mdx#2025-04-14_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\ndropTargetForElements({\n\tgetDropEffect: () => 'link',\n});\n```\n\n----------------------------------------\n\nTITLE: Basic Monitor Usage for External Drag Operations in TypeScript\nDESCRIPTION: Example of setting up a basic monitor for external drag operations (like files). The monitor listens for all external drag events entering the window and provides a cleanup function.\nSOURCE: https://github.com/atlassian/pragmatic-drag-and-drop/blob/main/packages/documentation/constellation/05-core-package/04-monitors/index.mdx#2025-04-14_snippet_0\n\nLANGUAGE: ts\nCODE:\n```\n// monitors are exposed through adapters\nimport { monitorForExternal } from '@atlaskit/pragmatic-drag-and-drop/external/adapter';\n\n// listen for all drag events for files\nconst cleanup = monitorForExternal({\n\tonDragStart: () => console.log('I am called whenever any external enters this window'),\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing canDrop for Chess Square Drop Targets\nDESCRIPTION: Enhances the chess square drop target with a canDrop function that prevents dropping a piece onto its original square. This prevents unnecessary moves and improves user experience.\nSOURCE: https://github.com/atlassian/pragmatic-drag-and-drop/blob/main/packages/documentation/constellation/01-tutorial/index.mdx#2025-04-14_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\nreturn dropTargetForElements({\n\telement: el,\n\tcanDrop: ({ source }) => {\n\t\t// NEW\n\t\tif (!isCoord(source.data.location)) {\n\t\t\treturn false;\n\t\t}\n\n\t\treturn !isEqualCoord(source.data.location, location);\n\t},\n\t// ...the rest of our dropTargetForElements arguments\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Sticky Drop Targets\nDESCRIPTION: Demonstrates how to use the getIsSticky function to create sticky drop targets that maintain selection even when not directly dragged over.\nSOURCE: https://github.com/atlassian/pragmatic-drag-and-drop/blob/main/packages/documentation/constellation/05-core-package/03-drop-targets/index.mdx#2025-04-14_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\ndropTargetForElements({\n\telement: myElement,\n\tgetIsSticky: () => true,\n});\n\ndropTargetForElements({\n\telement: myElement,\n\tgetIsSticky: ({ source }: GetFeedbackArgs): boolean => {\n\t\t// only be sticky when dragging something with 'author: Alex'\n\t\treturn source.data.author === 'Alex';\n\t},\n});\n```\n\n----------------------------------------\n\nTITLE: Using Zod for Runtime Type Validation in Pragmatic Drag-and-Drop\nDESCRIPTION: Shows how to leverage the zod library for runtime type checking of data objects. This approach provides schema validation and proper TypeScript typing through zod's inference capabilities.\nSOURCE: https://github.com/atlassian/pragmatic-drag-and-drop/blob/main/packages/documentation/constellation/05-core-package/09-recipes/01-typing-data/index.mdx#2025-04-14_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { z } from 'zod';\nimport {\n\tdraggable,\n\tdropTargetForElements,\n} from '@atlaskit/pragmatic-drag-and-drop/element/adapter';\nimport invariant from 'tiny-invariant';\n\nconst CardSchema = z.object({\n\tcardId: z.string(),\n});\n\ntype Card = z.infer<typeof CardSchema>;\n\nconst myDraggable = document.querySelector('#my-draggable');\ninvariant(myDraggable instanceof HTMLElement);\n\ndraggable({\n\telement: myDraggable,\n\tgetInitialData: (): Card => ({\n\t\tcardId: '1',\n\t}),\n});\n\ndropTargetForElements({\n\telement: myDraggable,\n\t// only allow dropping if dragging a card\n\tcanDrop({ source }) {\n\t\treturn CardSchema.safeParse(source.data).success;\n\t},\n\tonDrop({ source }) {\n\t\tconst result = CardSchema.safeParse(source.data);\n\t\tif (!result.success) {\n\t\t\treturn;\n\t\t}\n\t\t// result.data is now correctly typed to `Card`\n\t\tconsole.log(result.data);\n\t},\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a Monitor for Text Selection\nDESCRIPTION: Demonstrates how to create a monitor that listens for text selection drag operations anywhere in the application.\nSOURCE: https://github.com/atlassian/pragmatic-drag-and-drop/blob/main/packages/documentation/constellation/05-core-package/00-adapters/01-text-selection/about.mdx#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { monitorForTextSelection } from '@atlaskit/pragmatic-drag-and-drop/element/adapter';\n\nconst cleanup = monitorForTextSelection({\n  onDragStart: () => console.log('Dragging an element');\n});\n```\n\n----------------------------------------\n\nTITLE: Monitor Cleanup Pattern in TypeScript\nDESCRIPTION: Example demonstrating the monitor cleanup pattern and fix for monitor execution after removal. Shows how multiple monitors interact during drag operations.\nSOURCE: https://github.com/atlassian/pragmatic-drag-and-drop/blob/main/packages/core/CHANGELOG.md#2025-04-14_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nconst cleanupMonitor1 = monitorForElements({\n\tonDragStart: () => {\n\t\tcleanupMonitor2();\n\t},\n});\nconst cleanupMonitor2 = monitorForElements({\n\t// Previously this `onDragStart` would have been called during `onDragStart` even though it was unbound by the first monitor\n\tonDragStart: () => {},\n});\n```\n\n----------------------------------------\n\nTITLE: Registering Unsafe Overflow Scrolling in TypeScript\nDESCRIPTION: Demonstrates how to register unsafe overflow scrolling for different adapter types and combine it with standard auto-scrolling functionality.\nSOURCE: https://github.com/atlassian/pragmatic-drag-and-drop/blob/main/packages/auto-scroll/constellation/index/unsafe-overflow-scrolling.mdx#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// each adapter type has its own overflow auto scroller\nimport { unsafeOverflowForElements } from '@atlaskit/pragmatic-drag-and-drop-auto-scroll/unsafe-overflow/element';\nimport { unsafeOverflowForExternal } from '@atlaskit/pragmatic-drag-and-drop-auto-scroll/unsafe-overflow/external';\nimport { unsafeOverflowForTextSelection } from '@atlaskit/pragmatic-drag-and-drop-auto-scroll/unsafe-overflow/text-selection';\n\nimport { autoScrollForElements } from '@atlaskit/pragmatic-drag-and-drop-auto-scroll/element';\n\nconst cleanup = combine(\n\t// Enabling scrolling when over an element\n\tautoScrollForElements({\n\t\telement,\n\t}),\n\t// Enabling scrolling when outside an element - in the overflow\n\tunsafeOverflowForElements({\n\t\telement,\n\t}),\n);\n\n// disable auto scrolling\ncleanup();\n```\n\n----------------------------------------\n\nTITLE: Updating Custom Native Drag Preview API with Center Under Pointer\nDESCRIPTION: API change replacing placement parameter with getOffset function for custom native drag preview positioning using centerUnderPointer utility.\nSOURCE: https://github.com/atlassian/pragmatic-drag-and-drop/blob/main/packages/core/CHANGELOG.md#2025-04-14_snippet_9\n\nLANGUAGE: diff\nCODE:\n```\nimport { setCustomNativeDragPreview } from '@atlaskit/pragmatic-drag-and-drop/util/set-custom-native-drag-preview';\n+ import { centerUnderPointer } from '@atlaskit/pragmatic-drag-and-drop/util/center-under-pointer-pointer;\n\ndraggable({\n  element: myElement,\n  onGenerateDragPreview: ({ nativeSetDragImage }) => {\n    setCustomNativeDragPreview({\n-      placement: { type: 'center' }\n+      getOffset: centerUnderPointer,\n      render: function render({ container }) {\n        ReactDOM.render(<Preview item={item} />, container);\n        return function cleanup() {\n          ReactDOM.unmountComponentAtNode(container);\n        };\n      },\n      nativeSetDragImage,\n    });\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Customizing External Data for Draggable Elements\nDESCRIPTION: Code showing how to override default external data values and add custom data types when dragging elements by using the getInitialDataForExternal function.\nSOURCE: https://github.com/atlassian/pragmatic-drag-and-drop/blob/main/packages/documentation/constellation/05-core-package/00-adapters/00-element/unregistered-elements.mdx#2025-04-14_snippet_3\n\nLANGUAGE: ts\nCODE:\n```\nimport { draggable } from '@atlaskit/pragmatic-drag-and-drop/element/adapter';\n\ndraggable({\n\telement: myAnchor,\n\tgetInitialDataForExternal: () => ({\n\t\t// overiding the standard \"text/uri-list\" value\n\t\t'text/uri-list': someOtherUrl,\n\t\t// adding some new value\n\t\t'application/x.something-custom': myCustomData,\n\t}),\n});\n```\n\n----------------------------------------\n\nTITLE: Combining Multiple Type Predicates with some()\nDESCRIPTION: Uses the some() utility to listen for multiple types of external data. This example responds when either files or text are being dragged.\nSOURCE: https://github.com/atlassian/pragmatic-drag-and-drop/blob/main/packages/documentation/constellation/05-core-package/00-adapters/02-external/about.mdx#2025-04-14_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { dropTargetForExternal, monitorForExternal } from '@atlaskit/pragmatic-drag-and-drop/external/adapter';\nimport { containsFiles } from '@atlaskit/pragmatic-drag-and-drop/external/file';\nimport { containsText } from '@atlaskit/pragmatic-drag-and-drop/external/text';\n\ndropTargetForExternal({\n  canMonitor: some(containsFiles, containsText),\n  onDragEnter: () => console.log('A file or text is being dragged over me');\n});\n\nmonitorForExternal({\n  canMonitor: some(containsFiles, containsText),\n  onDragStart: () => console.log('A file or text is being dragged');\n});\n```\n\n----------------------------------------\n\nTITLE: Defining onGenerateDragPreview Event Payload in Pragmatic Drag and Drop\nDESCRIPTION: This snippet defines the payload type for the onGenerateDragPreview event in the Pragmatic Drag and Drop library, which includes a nativeSetDragImage function for custom drag previews.\nSOURCE: https://github.com/atlassian/pragmatic-drag-and-drop/blob/main/packages/documentation/constellation/05-core-package/06-events/index.mdx#2025-04-14_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nBaseEventPayload & {\n  // Allows people to use the native set drag image function if they want\n  // https://developer.mozilla.org/en-US/docs/Web/API/DataTransfer/setDragImage\n  // Although, we recommend using alternative techniques (see element source docs)\n  nativeSetDragImage: DataTransfer['setDragImage'] | null;\n  };\n```\n\n----------------------------------------\n\nTITLE: Component Implementation with Maximized Deferred Loading in React\nDESCRIPTION: Shows the React component implementation that dynamically imports the separated drag and drop logic. This approach simplifies the component code while still maintaining the performance benefits of deferred loading.\nSOURCE: https://github.com/atlassian/pragmatic-drag-and-drop/blob/main/packages/documentation/constellation/05-core-package/09-recipes/03-deferred-loading/react.mdx#2025-04-14_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport React, { useEffect } from 'react';\n\nfunction Card() {\n  const ref = useRef<HTMLDivElement | null>(null);\n  const [state, setState] = useState();\n\n  useEffect(() => {\n    const controller = new AbortController();\n\n    (async () => {\n      // just loading in the single module that we need\n      const { attach } = import('./attach');\n      if (controller.signal.aborted) {\n        return;\n      }\n      const cleanup = attach({setState, ref});\n\n      controller.signal.addEventListener('abort', cleanup, { once: true });\n    })();\n\n    return () => {\n      controller.abort();\n    };\n  }, []);\n\n  return <div ref={ref}>Drag me<div>\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Feedback Function Arguments for Draggables in TypeScript\nDESCRIPTION: This snippet defines the type for arguments passed to draggable feedback functions such as canDrag, getInitialData, and getInitialDataForExternal.\nSOURCE: https://github.com/atlassian/pragmatic-drag-and-drop/blob/main/packages/documentation/constellation/05-core-package/00-adapters/00-element/about.mdx#2025-04-14_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\ntype ElementGetFeedbackArgs = {\n\t/**\n\t * The user input as a drag is trying to start (the `initial` input)\n\t */\n\tinput: Input;\n\t/**\n\t * The `draggable` element\n\t */\n\telement: HTMLElement;\n\t/**\n\t * The `dragHandle` element for the `draggable`\n\t */\n\tdragHandle: Element | null;\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing canDrop Function for Drop Targets\nDESCRIPTION: Demonstrates how to use the canDrop function to conditionally allow or block dropping on a target.\nSOURCE: https://github.com/atlassian/pragmatic-drag-and-drop/blob/main/packages/documentation/constellation/05-core-package/03-drop-targets/index.mdx#2025-04-14_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n// I can never be dropped on!\ndropTargetForExternal({\n\telement: myElement,\n\tcanDrop: () => false,\n});\n\n// only allow 'cards' to be dropped on this drop target\ndropTargetForElements({\n\telement: myOtherElement,\n\tcanDrop: ({ source }: GetFeedbackArgs) => {\n\t\treturn source.data.type === 'card';\n\t},\n});\n```\n\n----------------------------------------\n\nTITLE: Combining Multiple Drop Targets for Single Element\nDESCRIPTION: Demonstrates how to create multiple drop targets for different entity types on a single element using the combine utility.\nSOURCE: https://github.com/atlassian/pragmatic-drag-and-drop/blob/main/packages/documentation/constellation/05-core-package/03-drop-targets/index.mdx#2025-04-14_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// ✅ Using the same element as a drop target for elements and for files\nconst cleanup = combine(\n\tdropTargetForElements({\n\t\telement: myElement,\n\t}),\n\tdropTargetForExternal({\n\t\telement: myElement,\n\t}),\n);\n```\n\n----------------------------------------\n\nTITLE: Setting Up Window Auto Scrolling\nDESCRIPTION: Demonstrates how to import and use auto scrollers for the window, enabling automatic scrolling during drag operations that reach the window edges.\nSOURCE: https://github.com/atlassian/pragmatic-drag-and-drop/blob/main/packages/auto-scroll/constellation/index/about.mdx#2025-04-14_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { autoScrollWindowForElements } from '@atlaskit/pragmatic-drag-and-drop-auto-scroll/element';\nimport { autoScrollWindowForExternal } from '@atlaskit/pragmatic-drag-and-drop-auto-scroll/external';\nimport { autoScrollWindowForInternalUncontrolled } from '@atlaskit/pragmatic-drag-and-drop-auto-scroll/internal-uncontrolled';\n\n// enable better auto scrolling on the window during drag operations\nconst cleanup = autoScrollWindowForElements();\n\n// disable better auto scrolling on the window\ncleanup();\n```\n\n----------------------------------------\n\nTITLE: Using DropTargetRecord in Pragmatic Drag and Drop\nDESCRIPTION: This snippet demonstrates how to use the DropTargetRecord type in a drop target event handler, accessing the element, data, and drop effect properties.\nSOURCE: https://github.com/atlassian/pragmatic-drag-and-drop/blob/main/packages/documentation/constellation/05-core-package/06-events/index.mdx#2025-04-14_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\ndropTargetForExternal({\n\telement: myElement,\n\tgetData: () => ({ name: 'Alex' }),\n\tgetDropEffect: () => 'move',\n\tonDragStart: ({ self }) => {\n\t\tconsole.log(self.element); // myElement\n\t\tconsole.log(self.data); // {name: 'Alex'}\n\t\tconsole.log(self.dropEffect); // 'move'\n\t},\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Drop Target Event Types in TypeScript for Drag and Drop\nDESCRIPTION: This snippet defines types for drop target events, including a base payload type and an event map for all drop target events.\nSOURCE: https://github.com/atlassian/pragmatic-drag-and-drop/blob/main/packages/documentation/constellation/05-core-package/00-adapters/00-element/about.mdx#2025-04-14_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\ntype ElementDropTargetEventBasePayload = ElementEventBasePayload & {\n\t/**\n\t * A convenance pointer to this drop targets values\n\t */\n\tself: DropTargetRecord;\n};\n\ntype ElementDropTargetEventPayloadMap = {\n\tonDragStart: ElementDropTargetEventBasePayload;\n\t// .. the rest of the events\n};\n```\n\n----------------------------------------\n\nTITLE: Registering Anchor Elements as Draggable in Pragmatic Drag-and-Drop\nDESCRIPTION: Code snippet showing how to register an anchor element with the element adapter to activate pragmatic-drag-and-drop functionality on it.\nSOURCE: https://github.com/atlassian/pragmatic-drag-and-drop/blob/main/packages/documentation/constellation/05-core-package/00-adapters/00-element/unregistered-elements.mdx#2025-04-14_snippet_0\n\nLANGUAGE: ts\nCODE:\n```\nimport { draggable } from '@atlaskit/pragmatic-drag-and-drop/element/adapter';\n\ndraggable({\n\telement: myAnchor,\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Deferred Loading with React.lazy for Drag and Drop Components\nDESCRIPTION: Example showing how to use React's lazy loading capabilities with Pragmatic Drag and Drop components. This approach allows for code splitting to improve initial load performance.\nSOURCE: https://github.com/atlassian/pragmatic-drag-and-drop/blob/main/packages/documentation/constellation/05-core-package/08-UI-frameworks/react.mdx#2025-04-14_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Suspense, lazy } from 'react';\n\n// importing our `card.tsx` file from above\nconst LazyCard = lazy(() => ('./card.tsx'));\n\nfunction App() {\n  return <Suspense fallback=\"loading...\"><LazyCard></Suspense>\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Auto Scrolling Behavior\nDESCRIPTION: Shows how to customize auto scrolling behavior using the getConfiguration option to control aspects like maximum scroll speed.\nSOURCE: https://github.com/atlassian/pragmatic-drag-and-drop/blob/main/packages/auto-scroll/constellation/index/about.mdx#2025-04-14_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nautoScrollForElements({\n  element: myElement,\n  getConfiguration: () => ({\n    maxScrollSpeed: 'fast',\n  })\n}),\n```\n\n----------------------------------------\n\nTITLE: TypeScript Custom Drag Preview Implementation\nDESCRIPTION: Example demonstrating how to implement a custom drag preview with preserved pointer offset using the preserveOffsetFromPointer utility.\nSOURCE: https://github.com/atlassian/pragmatic-drag-and-drop/blob/main/packages/core/CHANGELOG.md#2025-04-14_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { setCustomNativeDragPreview } from '@atlaskit/pragmatic-drag-and-drop/util/set-custom-native-drag-preview';\nimport { preserveOffsetFromPointer } from '@atlaskit/pragmatic-drag-and-drop/util/preserve-offset-from-pointer';\n\ndraggable({\n\telement: myElement,\n\tonGenerateDragPreview: ({ nativeSetDragImage, location, source }) => {\n\t\tsetCustomNativeDragPreview({\n\t\t\tgetOffset: preserveOffsetFromPointer({\n\t\t\t\tsourceElement: source.element,\n\t\t\t\tinput: location.current.input,\n\t\t\t}),\n\t\t\trender: function render({ container }) {\n\t\t\t\t/* ... */\n\t\t\t},\n\t\t\tnativeSetDragImage,\n\t\t});\n\t},\n});\n```\n\n----------------------------------------\n\nTITLE: Disabling Native Drag Preview\nDESCRIPTION: Shows how to disable the native drag preview functionality using the pragmatic-drag-and-drop library.\nSOURCE: https://github.com/atlassian/pragmatic-drag-and-drop/blob/main/packages/documentation/constellation/05-core-package/00-adapters/00-element/drag-previews.mdx#2025-04-14_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { disableNativeDragPreview } from '@atlaskit/pragmatic-drag-and-drop/element/disable-native-drag-preview';\n\ndraggable({\n\telement: myElement,\n\tonGenerateDragPreview({ nativeSetDragPreview }) {\n\t\tdisableNativeDragPreview({ nativeSetDragPreview });\n\t},\n});\n```\n\n----------------------------------------\n\nTITLE: Isolating Drag and Drop Experiences Using Parent-Child Relationship in TypeScript\nDESCRIPTION: This snippet demonstrates how to isolate drag and drop experiences by checking if the draggable element is a child of the drop target element.\nSOURCE: https://github.com/atlassian/pragmatic-drag-and-drop/blob/main/packages/documentation/constellation/05-core-package/09-recipes/00-isolating-experiences/index.mdx#2025-04-14_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ndropTargetForElements({\n\telement: myDropTargetElement,\n\tgetData: () => ({ columnId }),\n\tcanDrop: ({ source }) => {\n\t\t// our previous check\n\t\tif (source.data.type !== 'card' || source.data.columnId !== columnId) {\n\t\t\treturn false;\n\t\t}\n\t\t// our new additional check: only accept dropping of elements that are inside this list\n\t\treturn myDropTargetElement.contains(source.element);\n\t},\n});\n```\n\n----------------------------------------\n\nTITLE: Instruction Type Definition for Tree Item Operations\nDESCRIPTION: Defines the Instruction type which represents the possible operations (reorder-above, reorder-below, make-child, reparent) that can be performed when dragging a tree item.\nSOURCE: https://github.com/atlassian/pragmatic-drag-and-drop/blob/main/packages/hitbox/constellation/index/about.mdx#2025-04-14_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\ntype Instruction =\n\t| {\n\t\t\ttype: 'reorder-above';\n\t\t\tcurrentLevel: number;\n\t\t\tindentPerLevel: number;\n\t  }\n\t| {\n\t\t\ttype: 'reorder-below';\n\t\t\tcurrentLevel: number;\n\t\t\tindentPerLevel: number;\n\t  }\n\t| {\n\t\t\ttype: 'make-child';\n\t\t\tcurrentLevel: number;\n\t\t\tindentPerLevel: number;\n\t  }\n\t| {\n\t\t\ttype: 'reparent';\n\t\t\tcurrentLevel: number;\n\t\t\tindentPerLevel: number;\n\t\t\tdesiredLevel: number;\n\t  }\n\t| {\n\t\t\ttype: 'instruction-blocked';\n\t\t\tdesired: Exclude<Instruction, { type: 'instruction-blocked' }>;\n\t  };\n```\n\n----------------------------------------\n\nTITLE: Drop Target Reconciliation During Drag Operations\nDESCRIPTION: Illustrates how drop targets are reconciled when removed and readded during a drag operation. The library treats the new drop target as if it were the same as the original one, maintaining continuity in the drag operation.\nSOURCE: https://github.com/atlassian/pragmatic-drag-and-drop/blob/main/packages/documentation/constellation/05-core-package/07-reconciliation/index.mdx#2025-04-14_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst monitor = monitorForElements({\n\tonDragStart: () => console.log('monitor:start'),\n\tonDropTargetChange: () => console.log('monitor:change'),\n\tonDrop: () => console.log('monitor:drop'),\n});\nconst cleanup1 = dropTargetForElements({\n\telement: A,\n\tonDragStart: () => console.log('A1:start'),\n\tonDropTargetChange: () => console.log('A1:change'),\n\tonDrop: () => console.log('A1:drop'),\n});\n\n// a drag starts\n// console.log → 'A1:start', 'monitor:start'\n\n// drop target is removed during a drag\ncleanup1();\n// console.log not called (no change event is fired)\n\nconst cleanup2 = dropTargetForElements({\n\telement: A,\n\tonDragStart: () => console.log('A2:start'),\n\tonDropTargetChange: () => console.log('A2:change'),\n\tonDrop: () => console.log('A2:drop'),\n});\n\n// a dragover occurs\n// console.log → 'A2:drag', 'monitor:drag'\n// 👆 note: no 'change' event occured, A2 is treated as A1\n```\n\n----------------------------------------\n\nTITLE: Creating a React Board with Window Auto Scrolling\nDESCRIPTION: Example of a React component that enables window auto scrolling for a board, allowing content to scroll when dragging near window edges.\nSOURCE: https://github.com/atlassian/pragmatic-drag-and-drop/blob/main/packages/auto-scroll/constellation/index/about.mdx#2025-04-14_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useRef, ReactElement } from 'react';\nimport { autoScrollForElements } from '@atlaskit/pragmatic-drag-and-drop-auto-scroll/element';\nimport invariant from 'tiny-invariant';\n\nfunction Board({ children }: { children: ReactElement }) {\n\tuseEffect(() => {\n\t\treturn autoScrollWindowForElements();\n\t});\n\n\treturn <div className=\"board\">{children}</div>;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Complex Data Checking for Drag and Drop in TypeScript\nDESCRIPTION: This snippet shows how to implement more complex data checking for drop targets and monitors, ensuring cards can only be dropped in their home list.\nSOURCE: https://github.com/atlassian/pragmatic-drag-and-drop/blob/main/packages/documentation/constellation/05-core-package/09-recipes/00-isolating-experiences/index.mdx#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// only allow dropping of tasks that started inside this column\ndropTargetForElements({\n\telement: myDropTargetElement,\n\tgetData: () => ({ columnId }),\n\tcanDrop: ({ source }) => source.data.type === 'card' && source.data.columnId === columnId,\n});\n\n// only listen for drags of cards that started inside a column with columnId\nmonitorForElements({\n\tcanMonitor: ({ source, initial }) =>\n\t\tsource.data.type === 'card' && source.data.columnId === columnId,\n});\n```\n\n----------------------------------------\n\nTITLE: Using combine() to Merge Multiple Cleanup Functions\nDESCRIPTION: Demonstrates how to use the combine utility to merge multiple cleanup functions into a single function. This simplifies the management of multiple drag and drop behaviors attached to the same element.\nSOURCE: https://github.com/atlassian/pragmatic-drag-and-drop/blob/main/packages/documentation/constellation/05-core-package/05-utilities/index.mdx#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst cleanup: CleanupFn = combine(\n\tdraggable({ element: myElement }),\n\tdropTargetForElements({\n\t\telement: myElement,\n\t}),\n\tmonitorForElements({ element: myElement }),\n);\n\n// unbind all functionality\ncleanup();\n```\n\n----------------------------------------\n\nTITLE: Handling Browser-Generated External Data for Anchors\nDESCRIPTION: Code example showing how draggable anchors automatically have external data attached by the browser, such as text/uri-list for URLs.\nSOURCE: https://github.com/atlassian/pragmatic-drag-and-drop/blob/main/packages/documentation/constellation/05-core-package/00-adapters/00-element/unregistered-elements.mdx#2025-04-14_snippet_2\n\nLANGUAGE: ts\nCODE:\n```\nimport { draggable } from '@atlaskit/pragmatic-drag-and-drop/element/adapter';\n\n// \"text/plain\" and \"text/uri-list\" external data will automatically be attached\n// by the browser\ndraggable({\n\telement: myAnchor,\n});\n```\n\n----------------------------------------\n\nTITLE: Using canScroll to Conditionally Enable Auto Scrolling\nDESCRIPTION: Example of using the canScroll option to conditionally enable auto scrolling based on the type of entity being dragged.\nSOURCE: https://github.com/atlassian/pragmatic-drag-and-drop/blob/main/packages/auto-scroll/constellation/index/about.mdx#2025-04-14_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nautoScrollForElements({\n  element: myElement,\n  // only enable auto scrolling when a Card is being dragged\n  canScroll: ({ source }) => source.data.type === 'card',\n}),\n```\n\n----------------------------------------\n\nTITLE: Defining Feedback Function Arguments for Drop Targets in TypeScript\nDESCRIPTION: This snippet defines the type for arguments passed to drop target feedback functions such as canDrop, getData, getDropEffect, and getIsSticky.\nSOURCE: https://github.com/atlassian/pragmatic-drag-and-drop/blob/main/packages/documentation/constellation/05-core-package/00-adapters/00-element/about.mdx#2025-04-14_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\ntype ElementDropTargetGetFeedbackArgs = {\n\t/**\n\t * The users _current_ input\n\t */\n\tinput: Input;\n\t/**\n\t * The data associated with the entity being dragged\n\t */\n\tsource: ElementDragPayload;\n\t/**\n\t * This drop target's element\n\t */\n\telement: Element;\n};\n```\n\n----------------------------------------\n\nTITLE: Element Monitor Implementation\nDESCRIPTION: Example demonstrating how to implement a monitor for element drag operations.\nSOURCE: https://github.com/atlassian/pragmatic-drag-and-drop/blob/main/packages/documentation/constellation/05-core-package/00-adapters/00-element/about.mdx#2025-04-14_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { monitorForElements } from '@atlaskit/pragmatic-drag-and-drop/element/adapter';\n\nconst cleanup = monitorForElements({\n  onDragStart: () => console.log('Dragging an element');\n});\n```\n\n----------------------------------------\n\nTITLE: Conditional Monitoring with Type Definition\nDESCRIPTION: Shows the type definition for the MonitorGetFeedbackArgs interface used in conditional monitoring to determine when a monitor should be activated.\nSOURCE: https://github.com/atlassian/pragmatic-drag-and-drop/blob/main/packages/documentation/constellation/05-core-package/04-monitors/index.mdx#2025-04-14_snippet_2\n\nLANGUAGE: ts\nCODE:\n```\ntype MonitorGetFeedbackArgs = {\n\t/**\n\t * The users initial drag location\n\t */\n\tinitial: DragLocation;\n\t/**\n\t * The data associated with the entity being dragged\n\t */\n\tsource: DragType['payload'];\n};\n```\n\n----------------------------------------\n\nTITLE: Detecting URLs in Drag and Drop Operations with containsURLs\nDESCRIPTION: The containsURLs function is used to check if a drag operation contains URL data (text/uri-list). It can be used in both drop targets and monitors to determine if URLs are being dragged.\nSOURCE: https://github.com/atlassian/pragmatic-drag-and-drop/blob/main/packages/documentation/constellation/05-core-package/00-adapters/02-external/URLs.mdx#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { containsURLs } from '@atlaskit/pragmatic-drag-and-drop/external/url';\n\ndropTargetForExternal({\n\telement: myElement,\n\tcanDrop: containsURLs,\n});\n\nmonitorForExternal({\n\tcanMonitor: containsURLs,\n});\n```\n\n----------------------------------------\n\nTITLE: Using Dynamic Imports with Promises in TypeScript\nDESCRIPTION: Demonstrates how to use dynamic imports with promise-based syntax to defer loading of modules. This approach allows importing modules only when needed rather than including them in the initial bundle.\nSOURCE: https://github.com/atlassian/pragmatic-drag-and-drop/blob/main/packages/documentation/constellation/05-core-package/09-recipes/03-deferred-loading/index.mdx#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport('module-name').then((module) => {\n\t// use the module\n});\n\n// or using await\nconst module = await import('@atlaskit/pragmatic-drag-and-drop/element');\n```\n\n----------------------------------------\n\nTITLE: Element Drag Operation Type Definition\nDESCRIPTION: Type definition for the GetFeedbackArgs interface used in drag operations, defining the structure of feedback arguments including input, element, and dragHandle.\nSOURCE: https://github.com/atlassian/pragmatic-drag-and-drop/blob/main/packages/documentation/constellation/05-core-package/00-adapters/00-element/about.mdx#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntype GetFeedbackArgs = {\n\t/**\n\t * The user input as a drag is trying to start (the `initial` input)\n\t */\n\tinput: Input;\n\t/**\n\t * The `draggable` element\n\t */\n\telement: HTMLElement;\n\t/**\n\t * The `dragHandle` element for the `draggable`\n\t */\n\tdragHandle: Element | null;\n};\n```\n\n----------------------------------------\n\nTITLE: Enhanced Color Selection for Chess Squares with Move Validation\nDESCRIPTION: Updated helper function that determines the background color of a chess square based on the move validation state. It shows green for valid moves, pink for invalid moves, and the default color otherwise.\nSOURCE: https://github.com/atlassian/pragmatic-drag-and-drop/blob/main/packages/documentation/constellation/01-tutorial/index.mdx#2025-04-14_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nfunction getColor(state: HoveredState, isDark: boolean): string {\n\tif (state === 'validMove') {\n\t\treturn 'lightgreen';\n\t} else if (state === 'invalidMove') {\n\t\treturn 'pink';\n\t}\n\treturn isDark ? 'lightgrey' : 'white';\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Nested Drop Targets in TypeScript\nDESCRIPTION: Illustrates how to create nested drop targets using parent and child elements.\nSOURCE: https://github.com/atlassian/pragmatic-drag-and-drop/blob/main/packages/documentation/constellation/05-core-package/03-drop-targets/index.mdx#2025-04-14_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\ndropTargetForElements({\n\telement: parentElement,\n});\ndropTargetForElements({\n\telement: childElement,\n});\n```\n\n----------------------------------------\n\nTITLE: Filtering Drop Targets and Monitors by Content Type\nDESCRIPTION: Uses predicates like containsFiles to filter drop targets and monitors to only activate for specific types of external data.\nSOURCE: https://github.com/atlassian/pragmatic-drag-and-drop/blob/main/packages/documentation/constellation/05-core-package/00-adapters/02-external/about.mdx#2025-04-14_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { dropTargetForExternal, monitorForExternal } from '@atlaskit/pragmatic-drag-and-drop/external/adapter';\nimport { containsFiles } from '@atlaskit/pragmatic-drag-and-drop/external/file';\n\ndropTargetForExternal({\n  element: myElement,\n  canDrop: containsFiles,\n  onDragEnter: () => console.log('A file is being dragged over me');\n});\n\nmonitorForExternal({\n  canMonitor: containsFiles,\n  onDragStart: () => console.log('A file is being dragged');\n});\n```\n\n----------------------------------------\n\nTITLE: ElementGetFeedbackArgs Type Definition\nDESCRIPTION: Type definition for the arguments passed to callback functions like canScroll, providing information about the current drag operation.\nSOURCE: https://github.com/atlassian/pragmatic-drag-and-drop/blob/main/packages/auto-scroll/constellation/index/about.mdx#2025-04-14_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nexport type ElementGetFeedbackArgs = {\n\t/**\n\t * The users _current_ input\n\t */\n\tinput: Input;\n\t/**\n\t * The data associated with the entity being dragged\n\t */\n\tsource: DragType['payload'];\n\t/**\n\t * The element trying to be scrolled\n\t */\n\telement: Element;\n};\n```\n\n----------------------------------------\n\nTITLE: TypeScript Type Exports from Pragmatic Drag-and-Drop\nDESCRIPTION: Shows the available TypeScript types exported by the Pragmatic Drag-and-Drop library that can be used for type annotations. While explicit use is optional, these types provide strong typing for drag and drop operations.\nSOURCE: https://github.com/atlassian/pragmatic-drag-and-drop/blob/main/packages/documentation/constellation/05-core-package/05-utilities/index.mdx#2025-04-14_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nexport type {\n\t// information about a drop target\n\tDropTargetRecord,\n\n\t// Used for coordinates\n\t// {x: number, y: number}\n\tPosition,\n\n\t// What the current user input is\n\tInput,\n\n\t// Information about the current state of a drag.\n\t// Includes `Input` and `DropTargetRecord[]`\n\tDragLocation,\n\n\t// The `initial`, `current`, and `previous` `DragLocations`\n\tDragLocationHistory,\n\n\t// The type of our cleanup functions\n\tCleanupFn,\n\n\t// These types are not needed for consumers.\n\t// They are mostly helpful for other packages\n\tAllDragTypes,\n\tMonitorArgs,\n\tBaseEventPayload,\n} from '@atlaskit/pragmatic-drag-and-drop/types';\n```\n\n----------------------------------------\n\nTITLE: Using blockDraggingToIFrames utility\nDESCRIPTION: Shows how to use the blockDraggingToIFrames utility to prevent dragging into iframe elements, combined with the draggable adapter.\nSOURCE: https://github.com/atlassian/pragmatic-drag-and-drop/blob/main/packages/core/CHANGELOG.md#2025-04-14_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { combine } from '@atlaskit/pragmatic-drag-and-drop/combine';\nimport { draggable } from '@atlaskit/pragmatic-drag-and-drop/element/adapter';\nimport { blockDraggingToIFrames } from '@atlaskit/pragmatic-drag-and-drop/element/block-dragging-to-iframes';\n\nconst cleanup = combine(\n\tblockDraggingToIFrames({ element }),\n\tdraggable({\n\t\telement,\n\t}),\n);\n```\n\n----------------------------------------\n\nTITLE: Draggable Reconciliation During Drag Operations\nDESCRIPTION: Shows how draggables are reconciled when removed and readded during a drag operation. The library maintains continuity by treating the new draggable as the original one.\nSOURCE: https://github.com/atlassian/pragmatic-drag-and-drop/blob/main/packages/documentation/constellation/05-core-package/07-reconciliation/index.mdx#2025-04-14_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst monitor = monitorForElements({\n\tonDragStart: () => console.log('monitor:start'),\n\tonDrop: () => console.log('monitor:drop'),\n});\nconst cleanup1 = draggable({\n\telement: A,\n\tonDragStart: () => console.log('A1:start'),\n\tonDrop: () => console.log('A1:drop'),\n});\n\n// a drag starts\n// console.log → 'A1:start', 'monitor:start'\n\n// drop target is removed during a drag\ncleanup1();\n// console.log not called (no change event is fired)\n\nconst cleanup2 = dropTargetForElements({\n\telement: A,\n\tonDragStart: () => console.log('A2:start'),\n\tonDrop: () => console.log('A2:drop'),\n});\n\n// a drop occurs\n// console.log → 'A2:drop', 'monitor:drop'\n// 👆 note: the drop event occured on 'A2' even though it was not the same `draggable()` as the original drag\n```\n\n----------------------------------------\n\nTITLE: Extracting Files from Drop Data in TypeScript\nDESCRIPTION: Demonstrates how to use the getFiles helper function to extract File objects from drop data in both dropTargetForExternal and monitorForExternal contexts. Returns an empty array if no files were dragged.\nSOURCE: https://github.com/atlassian/pragmatic-drag-and-drop/blob/main/packages/documentation/constellation/05-core-package/00-adapters/02-external/files.mdx#2025-04-14_snippet_2\n\nLANGUAGE: ts\nCODE:\n```\nimport { getFiles } from '@atlaskit/pragmatic-drag-and-drop/external/file';\n\ndropTargetForExternal({\n\telement: myElement,\n\tonDrop({ source }) {\n\t\tconst files: File[] = getFiles({ source });\n\t},\n});\n\nmonitorForExternal({\n\tonDrop({ source }) {\n\t\tconst files: File[] = getFiles({ source });\n\t},\n});\n```\n\n----------------------------------------\n\nTITLE: Extracting URLs from Drop Data with getURLs\nDESCRIPTION: The getURLs function extracts URL data (text/uri-list) from drop data. It returns an array of URLs as strings, or an empty array if no URLs are present in the data.\nSOURCE: https://github.com/atlassian/pragmatic-drag-and-drop/blob/main/packages/documentation/constellation/05-core-package/00-adapters/02-external/URLs.mdx#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { getURLs } from '@atlaskit/pragmatic-drag-and-drop/external/url';\n\ndropTargetForExternal({\n\telement: myElement,\n\tonDrop({ source }) {\n\t\tconst urls: string[] = getURLs({ source });\n\t},\n});\n\nmonitorForExternal({\n\tonDrop({ source }) {\n\t\tconst urls: string[] = getURLs({ source });\n\t},\n});\n```\n\n----------------------------------------\n\nTITLE: Using reorder utility with valid arguments\nDESCRIPTION: Demonstrates how to use the reorder utility function to create a new reordered array without modifying the original array when using valid indices.\nSOURCE: https://github.com/atlassian/pragmatic-drag-and-drop/blob/main/packages/core/CHANGELOG.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { reorder } from '@atlaskit/pragmatic-drag-and-drop/reorder';\n\nconst original = ['A', 'B'];\n\nconst result = reorder({\n\tlist: original,\n\t// Grab A\n\tstartIndex: 0,\n\t// Move it to where B is\n\tfinishIndex: 1,\n});\n\nconsole.log(result); // ['B', 'A']\nconsole.log(result === original); // false - we got a new array back\n```\n\n----------------------------------------\n\nTITLE: Using Tree Item Addon for Tree Drag Operations\nDESCRIPTION: Demonstrates how to use the tree item addon to determine the appropriate operation when dragging tree items. This example shows implementation within a dropTargetForElements callback.\nSOURCE: https://github.com/atlassian/pragmatic-drag-and-drop/blob/main/packages/hitbox/constellation/index/about.mdx#2025-04-14_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n\tattachInstruction,\n\textractInstruction,\n\tInstruction,\n} from '@atlaskit/pragmatic-drag-and-drop-hitbox/tree-item';\n\ndropTargetForElements({\n\telement: myElement,\n\tgetData: ({ input, element }) => {\n\t\t// your base data you want to attach to the drop target\n\t\tconst data = {\n\t\t\titemId: 'A',\n\t\t};\n\t\t// this will 'attach' the instruction to your `data` object\n\t\treturn attachInstruction(data, {\n\t\t\tinput,\n\t\t\telement,\n\t\t\tcurrentLevel: 2,\n\t\t\tindentPerLevel: 20,\n\t\t\tmode: 'standard',\n\t\t\t// you can specify instructions to block\n\t\t\tblock: ['reorder-below'],\n\t\t});\n\t},\n\tonDrag: (args) => {\n\t\tconst instruction: Instruction | null = extractInstruction(args.self.data);\n\t},\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Up a Monitor for Element Drag Events\nDESCRIPTION: Shows how to use the monitorForElements function to listen for drag events on elements.\nSOURCE: https://github.com/atlassian/pragmatic-drag-and-drop/blob/main/packages/documentation/constellation/05-core-package/index.mdx#2025-04-14_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { monitorForElements } from '@atlaskit/pragmatic-drag-and-drop/element/adapter';\n\nconst cleanup = monitorForElements({\n\telement: myElement,\n\tonDragStart: () => console.log('an element started dragging'),\n});\n```\n\n----------------------------------------\n\nTITLE: Basic Usage with Loose Typing in Pragmatic Drag-and-Drop\nDESCRIPTION: Demonstrates the default loose typing for data in dropTargetForElements, showing how source.data properties are typed as unknown and require type checking before use.\nSOURCE: https://github.com/atlassian/pragmatic-drag-and-drop/blob/main/packages/documentation/constellation/05-core-package/09-recipes/01-typing-data/index.mdx#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ndropTargetForElements({\n\telement: myElement,\n\tonDrop({ source }) {\n\t\t// `cardId` is typed as as `unknown`\n\t\tconst cardId = source.data.cardId;\n\n\t\t// you need to check it's value before you can use it\n\t\tif (typeof cardId !== 'string') {\n\t\t\treturn;\n\t\t}\n\n\t\t// handle drop\n\t},\n});\n```\n\n----------------------------------------\n\nTITLE: Testing Multiple File Drop with Puppeteer in TypeScript\nDESCRIPTION: A test case demonstrating how to simulate multiple file drag and drop operations using Puppeteer. The code sets up drag event interception, simulates file drops, and validates the results. Key steps include launching the browser, enabling drag interception, creating drag data with multiple files, and verifying the dropped files appear in the UI.\nSOURCE: https://github.com/atlassian/pragmatic-drag-and-drop/blob/main/packages/documentation/constellation/05-core-package/11-testing/puppeteer.mdx#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport puppeteer, { Protocol } from 'puppeteer';\nimport invariant from 'tiny-invariant';\n\nit('should support dropping of many files at once', async () => {\n\tconst browser = await puppeteer.launch();\n\tconst page = await browser.newPage();\n\tawait page.goto('https://localhost:3000/my-awesome-example');\n\n\t// waiting for the drop target to be visible as a way to ensure the example\n\t// is completely loaded (preemptively avoiding flakiness)\n\tawait page.waitForSelector('[data-testid=\"drop-target\"]', {\n\t\tvisible: true,\n\t});\n\n\tconst body = await getElement('body');\n\tconst dropTarget = await getElement('[data-testid=\"drop-target\"]');\n\tinvariant(dropTarget, `drop target not found`);\n\n\t// Allowing capturing of drag events\n\t// https://pub.dev/documentation/puppeteer/latest/puppeteer/Page/setDragInterception.html\n\tawait page.setDragInterception(true);\n\tconst data: Protocol.Input.DragData = {\n\t\tdragOperationsMask: 1,\n\t\tfiles: ['./package.json', './tsconfig.json'],\n\t\titems: [],\n\t};\n\n\tawait body.dragEnter(data);\n\tawait dropTarget.dragEnter(data);\n\tawait dropTarget.drop(data);\n\n\t// just incase there are any delays in the processing of files\n\t// we will wait until the `dropped-files` element is visible\n\t// before continuing\n\t// (eg if the update is delayed by react)\n\tawait page.waitForSelector('[data-testid=\"dropped-files\"]', {\n\t\tvisible: true,\n\t});\n\n\tconst results = await getElement('[data-testid=\"dropped-files\"]');\n\tconst text = await results.evaluate((el) => el.textContent);\n\texpect(text?.includes('package.json')).toBe(true);\n\texpect(text?.includes('tsconfig.json')).toBe(true);\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Windows-Specific Drag Preview Dimensions\nDESCRIPTION: Code snippet demonstrating how to conditionally set maximum dimensions for drag preview elements specifically for Windows platforms to avoid the opacity limitation issue. The code checks if the platform is Windows and sets max dimensions to 280px.\nSOURCE: https://github.com/atlassian/pragmatic-drag-and-drop/blob/main/packages/documentation/constellation/07-web-platform-design-constraints/index.mdx#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst preview = document.createElement('div');\n\nif (navigator.platform.includes('Win32')) {\n\tpreview.style.maxWidth = '280px';\n\tpreview.style.maxHeight = '280px';\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Media Types in TypeScript\nDESCRIPTION: This snippet demonstrates how to define custom media types for drag and drop operations. It shows a basic example with a plain text type and a more complex example with both a fallback URL and a custom Trello card identifier.\nSOURCE: https://github.com/atlassian/pragmatic-drag-and-drop/blob/main/packages/documentation/constellation/05-core-package/00-adapters/02-external/custom-media-types.mdx#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  \"text/plain\": \"hello world\"\n}\n```\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  // fallback: a url to our trello card\n  \"text/uri-list\": card.url,\n\n  // helpful information: a trello card is being dragged\n  \"application/vnd.trello-card-id\": card.id\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Nested Drop Target Events in TypeScript\nDESCRIPTION: Demonstrates how to determine whether a drop occurred on a parent or child drop target by checking the position in the dropTargets array. Uses the bubble-ordered nature of dropTargets where inner targets appear before outer ones.\nSOURCE: https://github.com/atlassian/pragmatic-drag-and-drop/blob/main/packages/documentation/constellation/05-core-package/03-drop-targets/index.mdx#2025-04-14_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\ndropTargetForElements({\n\telement: parent,\n\tonDrop({ location, self }) {\n\t\t// we know that if 'self' is in the first position, then no inner drop target was dropped on\n\t\tif (location.current.dropTargets[0]?.element === self.element) {\n\t\t\taction1();\n\t\t\treturn;\n\t\t}\n\t\t// at this point we know that an inner drop target was dropped on\n\t\taction2();\n\t},\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Delayed Cursor Change with CSS Animation\nDESCRIPTION: CSS implementation for delayed cursor change behavior on hover, using animation with an 800ms delay to show grab cursor.\nSOURCE: https://github.com/atlassian/pragmatic-drag-and-drop/blob/main/packages/documentation/constellation/08-design-guidelines/index.mdx#2025-04-14_snippet_1\n\nLANGUAGE: css\nCODE:\n```\n.item:hover {\n\tanimation-duration: 0s;\n\tanimation-name: change-cursor;\n\tanimation-delay: 800ms;\n\tanimation-fill-mode: forwards;\n}\n\n@keyframes change-cursor {\n\tto {\n\t\tcursor: grab;\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Preferred Approach with Type Guards in Pragmatic Drag-and-Drop\nDESCRIPTION: Shows the recommended approach of using runtime type checking directly in handler functions. This approach leverages TypeScript's type narrowing capabilities while staying flexible.\nSOURCE: https://github.com/atlassian/pragmatic-drag-and-drop/blob/main/packages/documentation/constellation/05-core-package/09-recipes/01-typing-data/index.mdx#2025-04-14_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n// Real API\ndropTargetForElements({\n\telement: myElement,\n\tcanDrop({ source }) {\n\t\treturn isCard(source.data) && source.data.instanceId === ourInstanceId;\n\t},\n\tonDrop({ source }) {\n\t\tif (!isCard(source.data)) {\n\t\t\treturn;\n\t\t}\n\t\t// source.data is now typed as `Card`.\n\t},\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a Drop Target for Text Selection\nDESCRIPTION: Shows how to create a drop target that listens for text selection drag operations. The default drop effect is \"copy\" as text is typically copied when dragged.\nSOURCE: https://github.com/atlassian/pragmatic-drag-and-drop/blob/main/packages/documentation/constellation/05-core-package/00-adapters/01-text-selection/about.mdx#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { dropTargetForTextSelection } from '@atlaskit/pragmatic-drag-and-drop/text-selection/adapter';\n\nconst cleanup = dropTargetForTextSelection({\n  element: myElement,\n  onDragStart: () => console.log('text started dragging in me');\n});\n```\n\n----------------------------------------\n\nTITLE: Using getHTML to Extract HTML Content from Drop Events\nDESCRIPTION: Shows how to retrieve HTML content from drop events using the getHTML helper function. This function returns the HTML string or null if no HTML data is available in the drop event.\nSOURCE: https://github.com/atlassian/pragmatic-drag-and-drop/blob/main/packages/documentation/constellation/05-core-package/00-adapters/02-external/HTML.mdx#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { getHTML } from '@atlaskit/pragmatic-drag-and-drop/external/html';\n\ndropTargetForExternal({\n\telement: myElement,\n\tonDrop({ source }) {\n\t\tconst html: string | null = getHTML({ source });\n\t},\n});\n\nmonitorForExternal({\n\tonDrop({ source }) {\n\t\tconst html: string | null = getHTML({ source });\n\t},\n});\n```\n\n----------------------------------------\n\nTITLE: Announcing Messages with Live Region in TypeScript\nDESCRIPTION: This snippet demonstrates how to use the 'announce' function from the '@atlaskit/live-region' package to send a message to assistive technology. It creates a single live region with 'role=\"alert\"', which is equivalent to setting 'aria-live=\"assertive\"' and 'aria-atomic=\"true\"'.\nSOURCE: https://github.com/atlassian/pragmatic-drag-and-drop/blob/main/packages/live-region/constellation/index/about.mdx#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { announce } from '@atlaskit/live-region';\n\nannounce('Task \"Clean dishes\" moved to list \"Doing\" from \"Todo\".');\n```\n\n----------------------------------------\n\nTITLE: Conditional Window Auto Scrolling\nDESCRIPTION: Example of using the canScroll option with window auto scrolling to conditionally enable scrolling based on the type of entity being dragged.\nSOURCE: https://github.com/atlassian/pragmatic-drag-and-drop/blob/main/packages/auto-scroll/constellation/index/about.mdx#2025-04-14_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\nautoScrollWindowForElements({\n  // only enable auto scrolling when a Card is being dragged\n  canScroll: ({ source }) => source.data.type === 'card',\n}),\n```\n\n----------------------------------------\n\nTITLE: Implementing Box Drop Indicator with Border in React TSX\nDESCRIPTION: Shows how to implement the Box Drop Indicator when the target element has a border, requiring an additional wrapper with position:relative.\nSOURCE: https://github.com/atlassian/pragmatic-drag-and-drop/blob/main/packages/react-drop-indicator/constellation/index/about.mdx#2025-04-14_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nconst relativeStyles = css({\n\tposition: 'relative',\n});\n\nconst itemStyles = css({\n\tpadding: token('space.100'),\n\tbackgroundColor: token('elevation.surface'),\n\tborderWidth: token('border.width'),\n\tborderStyle: 'solid',\n\tborderColor: token('color.border'),\n});\n\nexport function Item({ content, closestEdge }: { content: ReactNode; closestEdge: Edge | null }) {\n\treturn (\n\t\t<div css={relativeStyles}>\n\t\t\t<div css={itemStyles}>\n\t\t\t\t<span>{content}</span>\n\t\t\t\t{closestEdge && <DropIndicator edge={closestEdge} />}\n\t\t\t</div>\n\t\t</div>\n\t);\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Conditional Monitoring Based on Drag Source\nDESCRIPTION: Example of conditionally activating a monitor based on the type of element being dragged, demonstrating the canMonitor function.\nSOURCE: https://github.com/atlassian/pragmatic-drag-and-drop/blob/main/packages/documentation/constellation/05-core-package/04-monitors/index.mdx#2025-04-14_snippet_3\n\nLANGUAGE: ts\nCODE:\n```\nmonitorForElements({\n\tcanMonitor: ({ source }) => source.data.type === 'card',\n\tonDragStart: () => console.log('I will only be activated when dragging a card!'),\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Shared Event Payload Types in Pragmatic Drag and Drop\nDESCRIPTION: This snippet defines the types for shared event payloads in the Pragmatic Drag and Drop library, including Input, DragLocation, and DragLocationHistory.\nSOURCE: https://github.com/atlassian/pragmatic-drag-and-drop/blob/main/packages/documentation/constellation/05-core-package/06-events/index.mdx#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport type Input = {\n\t// user input\n\taltKey: boolean;\n\tbutton: number;\n\tbuttons: number;\n\tctrlKey: boolean;\n\tmetaKey: boolean;\n\tshiftKey: boolean;\n\n\t// coordinates\n\tclientX: number;\n\tclientY: number;\n\tpageX: number;\n\tpageY: number;\n};\n\nexport type DragLocation = {\n\t/**\n\t * A users input at a point in time\n\t */\n\tinput: Input;\n\t/**\n\t * A _bubble_ ordered (innermost upwards) list of active drop targets\n\t *\n\t * @example\n\t * [grandChildRecord, childRecord, parentRecord]\n\t *\n\t */\n\tdropTargets: DropTargetRecord[];\n};\n\nexport type DragLocationHistory = {\n\t/**\n\t * Where the drag operation started\n\t */\n\tinitial: DragLocation;\n\t/**\n\t * Where the user currently is\n\t */\n\tcurrent: DragLocation;\n\t/**\n\t * Where the user was previously.\n\t * `previous` points to what `current` was in the last dispatched event\n\t *\n\t * `previous` is particularly useful for `onDropTargetChange`\n\t * (and the derived `onDragEnter` and `onDragLeave`)\n\t * as you can know what the delta of the change\n\t *\n\t * Exception: `onGenerateDragPreview` and `onDragStart` will have the\n\t * same `current` and `previous` values. This is done so that the data\n\t * received in `onDragStart` feels logical\n\t * (`location.previous` should be `[]` in `onDragStart`)\n\t */\n\tprevious: Pick<DragLocation, 'dropTargets'>;\n};\n\n// Each drag type (eg files) has their own base payload type\n// This allows different types of drags to have different source data\ntype BaseEventPayload = {\n\tlocation: DragLocationHistory;\n\t// source is different for different drag types\n\tsource: {\n\t\telement: Element;\n\t\tdragHandle: Element | null;\n\t\tdata: Record<string, unknown>;\n\t};\n};\n```\n\n----------------------------------------\n\nTITLE: Incorrect Usage: Multiple Draggables on Same Element\nDESCRIPTION: Demonstrates the incorrect approach of attaching multiple draggable instances to the same element, which results in a warning being logged.\nSOURCE: https://github.com/atlassian/pragmatic-drag-and-drop/blob/main/packages/documentation/constellation/05-core-package/07-reconciliation/index.mdx#2025-04-14_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// ❌ Using the same element for two draggables\n  draggable({\n    element: myElement,\n  }),\n  // ⚠️ A warning will be logged if this is detected\n  draggable({\n    element: myElement,\n  }),\n);\n```\n\n----------------------------------------\n\nTITLE: Styling Drop Indicator Line\nDESCRIPTION: CSS properties for styling the drop indicator line that shows placement during drag operations. Includes stroke size, color, terminal diameter and border radius specifications.\nSOURCE: https://github.com/atlassian/pragmatic-drag-and-drop/blob/main/packages/documentation/constellation/08-design-guidelines/index.mdx#2025-04-14_snippet_2\n\nLANGUAGE: css\nCODE:\n```\n{\n  stroke-size: 2px;\n  color: color.border.selected;\n  terminal-diameter: 8px;\n  border-radius-right: none;\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Custom Native Drag Preview API with Offset From Pointer\nDESCRIPTION: API change replacing placement parameter with getOffset function for custom native drag preview positioning using offsetFromPointer utility.\nSOURCE: https://github.com/atlassian/pragmatic-drag-and-drop/blob/main/packages/core/CHANGELOG.md#2025-04-14_snippet_8\n\nLANGUAGE: diff\nCODE:\n```\nimport { setCustomNativeDragPreview } from '@atlaskit/pragmatic-drag-and-drop/util/set-custom-native-drag-preview';\n+ import { offsetFromPointer } from '@atlaskit/pragmatic-drag-and-drop/util/offset-from-pointer;\n\ndraggable({\n  element: myElement,\n  onGenerateDragPreview: ({ nativeSetDragImage }) => {\n    setCustomNativeDragPreview({\n-      placement: { type: 'offset-from-pointer', x: '16px', y: '8px' }\n+      getOffset: offsetFromPointer({x: '16px', y: '8px'}),\n      render: function render({ container }) {\n        ReactDOM.render(<Preview item={item} />, container);\n        return function cleanup() {\n          ReactDOM.unmountComponentAtNode(container);\n        };\n      },\n      nativeSetDragImage,\n    });\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Drag Handle Icon in React\nDESCRIPTION: Shows how to implement a drag handle icon using @atlaskit/icon component with proper color token configuration for accessibility.\nSOURCE: https://github.com/atlassian/pragmatic-drag-and-drop/blob/main/packages/documentation/constellation/08-design-guidelines/index.mdx#2025-04-14_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport DragHandlerIcon from '@atlaskit/icon/glyph/drag-handler';\nimport { token } from '@atlaskit/tokens';\n\nfunction App() {\n\treturn <DragHandlerIcon label=\"Drag list item\" primaryColor={token('color.icon')} />;\n}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Event Order in Pragmatic Drag and Drop\nDESCRIPTION: This snippet shows the order in which events are triggered for different components in the Pragmatic Drag and Drop system, including monitors, draggables, and drop targets.\nSOURCE: https://github.com/atlassian/pragmatic-drag-and-drop/blob/main/packages/documentation/constellation/05-core-package/06-events/index.mdx#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst unbind = combine(\n\tmonitorForElements({\n\t\tonDragStart: () => 'monitor:start',\n\t}),\n\tdraggable({\n\t\telement: myElement,\n\t\tonDragStart: () => 'draggable:start',\n\t}),\n\tdropTargetForElements({\n\t\telement: myElement,\n\t\tonDragStart: () => 'dropTarget:start',\n\t}),\n);\n\n// After `onDragStart`\n// console.log:\n// - 'draggable:start'\n// - 'dropTarget:start',\n// - 'monitor:start',\n```\n\n----------------------------------------\n\nTITLE: Importing Drag Handle Button Components in React\nDESCRIPTION: Shows the import statements for the examples used in the documentation, including the default Drag Handle Button, small variant, and dropdown menu implementation.\nSOURCE: https://github.com/atlassian/pragmatic-drag-and-drop/blob/main/packages/react-accessibility/constellation/drag-handle-button/about.mdx#2025-04-14_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Code } from '@atlaskit/code';\nimport SectionMessage from '@atlaskit/section-message';\n\nimport DragHandleButtonExample from '../../examples/drag-handle-button';\nimport DragHandleButtonSmallExample from '../../examples/drag-handle-button-small';\nimport DragHandleDropdownMenuExample from '../../examples/drag-handle-dropdown-menu';\n```\n\n----------------------------------------\n\nTITLE: Configuring Maximum Auto-Scroll Speed in TypeScript\nDESCRIPTION: This snippet demonstrates how to use the new getConfiguration option to set a custom maximum scroll speed for auto-scrolling functionality. It allows specifying either 'fast' or 'standard' speeds.\nSOURCE: https://github.com/atlassian/pragmatic-drag-and-drop/blob/main/packages/auto-scroll/CHANGELOG.md#2025-04-14_snippet_4\n\nLANGUAGE: diff\nCODE:\n```\nautoScrollForElements({\n  element: myElement,\n+  getConfiguration: () => ({maxScrollSpeed: 'fast' | 'standard'}),\n})\n```\n\nLANGUAGE: typescript\nCODE:\n```\nautoScrollForElements({\n  element: myElement,\n  getConfiguration: () => ({ maxScrollSpeed : 'fast' })\n}),\n```\n\n----------------------------------------\n\nTITLE: Configuring Overflow Scrolling Boundaries\nDESCRIPTION: Examples of how to configure overflow scrolling boundaries and hitbox spacing for different edges of an element.\nSOURCE: https://github.com/atlassian/pragmatic-drag-and-drop/blob/main/packages/auto-scroll/constellation/index/unsafe-overflow-scrolling.mdx#2025-04-14_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// Only allow overflow scrolling above and below an element by 400px\nunsafeOverflowAutoScrollForElements({\n\telement,\n\tgetOverflow: () => ({\n\t\tforTopEdge: {\n\t\t\ttop: 400,\n\t\t},\n\t\tforBottomEdge: {\n\t\t\tbottom: 400,\n\t\t},\n\t}),\n});\n\nunsafeOverflowAutoScrollForElements({\n\telement,\n\tgetOverflow: () => ({\n\t\tforTopEdge: {\n\t\t\t// Allow the top element to be overflow scrolled up to\n\t\t\t// 2000px away from the element\n\t\t\ttop: 2000,\n\t\t\t// Allow the top element to be overflow scrolled when\n\t\t\t// up to 200px on the left or right of the top edge.\n\t\t\t// The hitbox for scrolling will extend down below the top edge\n\t\t\t// to match the \"over element\" hitbox for the top edge.\n\t\t\t// See the diagram for more details.\n\t\t\tleft: 200,\n\t\t\tright: 200,\n\n\t\t\t// The \"bottom\" edge definition for the \"top\" edge is\n\t\t\t// handled by the \"over element\" auto scroller.\n\t\t},\n\t}),\n});\n```\n\n----------------------------------------\n\nTITLE: Alternative Approach to Handle Expensive Data Outside getData\nDESCRIPTION: Shows an alternative approach to handle expensive data calculations by computing the data outside the getData function and then returning it directly.\nSOURCE: https://github.com/atlassian/pragmatic-drag-and-drop/blob/main/packages/documentation/constellation/05-core-package/05-utilities/index.mdx#2025-04-14_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n// calculate your data outside of get data\nconst data = getExpensiveData();\ndropTargetForExternal({\n\tgetData: () => data,\n});\n```\n\n----------------------------------------\n\nTITLE: Combining once() with Additional Data Transformation\nDESCRIPTION: Demonstrates how to use the once utility while still allowing for dynamic data transformations, by applying additional operations after retrieving the cached expensive data.\nSOURCE: https://github.com/atlassian/pragmatic-drag-and-drop/blob/main/packages/documentation/constellation/05-core-package/05-utilities/index.mdx#2025-04-14_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n// have expensive data along with updated addons\nconst getDataOnce = once(getExpensiveData);\ndropTargetForExternal({\n\tgetData: ({ input, element }) => {\n\t\tconst data = getDataOnce();\n\t\treturn attachClosestEdge(data, { input, element, allowedEdges: ['top'] });\n\t},\n});\n```\n\n----------------------------------------\n\nTITLE: Text Selection Event Payload Map Type\nDESCRIPTION: Provides a map of event names to their corresponding payload types for all text selection events.\nSOURCE: https://github.com/atlassian/pragmatic-drag-and-drop/blob/main/packages/documentation/constellation/05-core-package/00-adapters/01-text-selection/about.mdx#2025-04-14_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\ntype TextSelectionEventPayloadMap = {\n\tonDragStart: TextSelectionEventBasePayload;\n\t// .. the rest of the events\n};\n```\n\n----------------------------------------\n\nTITLE: Running Codemod for Migration\nDESCRIPTION: Command to run the codemod client for automating the migration process from react-beautiful-dnd to Pragmatic Drag and Drop.\nSOURCE: https://github.com/atlassian/pragmatic-drag-and-drop/blob/main/packages/react-beautiful-dnd-migration/constellation/index/about.mdx#2025-04-14_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n2. Run the codemod client with the command\n   `npx @atlaskit/codemod-cli --parser {tsx|babylon} --extensions ts,tsx,js [relativePath]`.\n```\n\n----------------------------------------\n\nTITLE: Defining Monitor Feedback Function Arguments in TypeScript for Drag and Drop\nDESCRIPTION: This snippet defines the type for arguments passed to the monitor feedback function canMonitor.\nSOURCE: https://github.com/atlassian/pragmatic-drag-and-drop/blob/main/packages/documentation/constellation/05-core-package/00-adapters/00-element/about.mdx#2025-04-14_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\ntype ElementMonitorGetFeedbackArgs = {\n\t/**\n\t * The users `initial` drag location\n\t */\n\tinitial: DragLocation;\n\t/**\n\t * The data associated with the entity being dragged\n\t */\n\tsource: ElementDragPayload;\n};\n```\n\n----------------------------------------\n\nTITLE: Problematic React Draggable Implementation with Remounting\nDESCRIPTION: Shows a React implementation where a draggable is unnecessarily remounted when state changes, which could lead to performance issues. The draggable is recreated on each state change due to dependency array inclusion.\nSOURCE: https://github.com/atlassian/pragmatic-drag-and-drop/blob/main/packages/documentation/constellation/05-core-package/07-reconciliation/index.mdx#2025-04-14_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nfunction Card() {\n\tconst ref = useRef();\n\tconst [dragCount, setCount] = useState(0);\n\n\tuseEffect(() => {\n\t\treturn draggable({\n\t\t\telement,\n\t\t\tonDragStart: () => setCount(dragCount + 1),\n\t\t});\n\t\t// when dragCount changes our `draggable` will be remounted\n\t}, [dragCount]);\n\n\treturn <div ref={ref}>I have been dragged {dragCount} times</div>;\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering Default Drag Handle Button Example\nDESCRIPTION: Shows how to render the default Drag Handle Button example component in the documentation.\nSOURCE: https://github.com/atlassian/pragmatic-drag-and-drop/blob/main/packages/react-accessibility/constellation/drag-handle-button/about.mdx#2025-04-14_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<Example Component={DragHandleButtonExample} />\n```\n\n----------------------------------------\n\nTITLE: Creating Independent Monitors with Shared Configuration\nDESCRIPTION: Illustrates how monitors work independently even when sharing the same configuration object. Each call to a monitor creation function creates a distinct monitor instance that must be cleaned up separately.\nSOURCE: https://github.com/atlassian/pragmatic-drag-and-drop/blob/main/packages/documentation/constellation/05-core-package/07-reconciliation/index.mdx#2025-04-14_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { monitorForElements } from '@atlaskit/pragmatic-drag-and-drop/element/adapter';\n\nconst args = {\n\tonGenerateDragPreview: () => console.log('monitor:preview'),\n};\n\n// these two monitors are sharing the same `args` reference\n// but they will both create an independent monitor\nconst cleanup1 = monitorForElements(args);\nconst cleanup2 = monitorForElements(args);\n\n// → A drag starts\n\n// console.log:\n// - 'monitor:preview'\n// - 'monitor:preview'\n\n// → A drag finishes\n\n// removing one monitor\ncleanup1();\n\n// → Another drag starts\n// console.log:\n// - 'monitor:preview'\n// 👆 one monitor is still active\n```\n\n----------------------------------------\n\nTITLE: Simplified Edge Configuration\nDESCRIPTION: Shows the simplified configuration for edge properties where cross-axis values are no longer required\nSOURCE: https://github.com/atlassian/pragmatic-drag-and-drop/blob/main/packages/auto-scroll/CHANGELOG.md#2025-04-14_snippet_2\n\nLANGUAGE: diff\nCODE:\n```\nconst unbind = unsafeOverflowAutoScrollForElements({\n\t\telement,\n\t\tgetOverflow: () => ({\n\t\t\tforTopEdge: {\n\t\t\t\ttop: 100,\n+       // no longer need to pass `0` for the cross axis if you don't need it\n-\t\t\t\tright: 0,\n-\t\t\t\tleft: 0,\n\t\t\t},\n\t\t\tforRightEdge: {\n\t\t\t\tright: 100,\n-\t\t\t\ttop: 0,\n-\t\t\t\tbottom: 0,\n\t\t\t},\n\t\t\tforBottomEdge: {\n\t\t\t\tbottom: 100,\n-\t\t\t\tright: 0,\n-\t\t\t\tleft: 0,\n\t\t\t},\n\t\t\tforLeftEdge: {\n\t\t\t\tleft: 100,\n-\t\t\t\ttop: 0,\n-\t\t\t\tbottom: 0,\n\t\t\t},\n\t\t}),\n});\n```\n\n----------------------------------------\n\nTITLE: Demonstrating onDropTargetChange Event Flow in Markdown\nDESCRIPTION: This snippet illustrates the event flow when the drop target changes from [B, A] to [C, A]. It shows how onDropTargetChange events are fired and how derived events (onDragEnter and onDragLeave) are triggered.\nSOURCE: https://github.com/atlassian/pragmatic-drag-and-drop/blob/main/packages/documentation/constellation/05-core-package/06-events/index.mdx#2025-04-14_snippet_5\n\nLANGUAGE: markdown\nCODE:\n```\n> Scenario: [B, A] → [C, A]\n\n- `onDropTargetChange` fires on `draggable`\n- `onDropTargetChange` fires on `dropTarget(B)`\n  - `onDragLeave` fires on `dropTarget(B)` → _derived event_\n- `onDropTargetChange` fires on `dropTarget(A)`\n- `onDropTargetChange` fires on `dropTarget(C)`\n  - `onDragEnter` fires on `dropTarget(C)` → _derived event_\n- `onDropTargetChange` fires on all monitors\n```\n\n----------------------------------------\n\nTITLE: Implementing Autoscroll in React Component with Pragmatic Drag and Drop\nDESCRIPTION: Example implementation of the autoscroll functionality in a React component using the pragmatic-drag-and-drop library. Shows how to initialize, update, and stop the autoscroller during drag operations.\nSOURCE: https://github.com/atlassian/pragmatic-drag-and-drop/blob/main/packages/react-beautiful-dnd-autoscroll/constellation/index/about.mdx#2025-04-14_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport React, { useEffect } from 'react';\n\nimport { autoScroller } from '@atlaskit/pragmatic-drag-and-drop-react-beautiful-dnd-autoscroll';\nimport { monitorForElements } from '@atlaskit/pragmatic-drag-and-drop/element/adapter';\nimport { combine } from '@atlaskit/pragmatic-drag-and-drop/combine';\n\nimport Board from './board';\n\nexport default function AutoScrollExample() {\n  useEffect(() => {\n    return combine(\n      monitorForElements({\n        onDragStart: ({ location }) => {\n          autoScroller.start({ input: location.current.input });\n        },\n        onDrop: () => {\n          autoScroller.stop();\n        },\n        onDrag: ({ location }) => {\n          autoScroller.updateInput({\n            input: location.current.input,\n          });\n        },\n      }),\n    );\n  }, []);\n\n  return <Board />;\n}\n```\n\n----------------------------------------\n\nTITLE: Text Selection Drop Target Event Payload Map Type\nDESCRIPTION: Provides a map of event names to their corresponding payload types for all drop target events in text selection.\nSOURCE: https://github.com/atlassian/pragmatic-drag-and-drop/blob/main/packages/documentation/constellation/05-core-package/00-adapters/01-text-selection/about.mdx#2025-04-14_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\ntype TextSelectionDropTargetEventPayloadMap = {\n\tonDragStart: TextSelectionDropTargetEventBasePayload;\n\t// .. the rest of the events\n};\n```\n\n----------------------------------------\n\nTITLE: Reorder utility with invalid indices (old behavior)\nDESCRIPTION: Shows the previous behavior of the reorder utility when invalid indices were provided, where it would return the original array reference.\nSOURCE: https://github.com/atlassian/pragmatic-drag-and-drop/blob/main/packages/core/CHANGELOG.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { reorder } from '@atlaskit/pragmatic-drag-and-drop/reorder';\n\nconst original = ['A', 'B'];\n\nconst result = reorder({\n\tlist: original,\n\tstartIndex: -1, // invalid start index\n\tfinishIndex: 1,\n});\n\nconsole.log(result); // ['A', 'B'] (array not reordered)\n\n// Original array was returned for this error case\nconsole.log(result === original); // true\n```\n\n----------------------------------------\n\nTITLE: Importing Types from Pragmatic Drag and Drop Element Adapter in TypeScript\nDESCRIPTION: This snippet shows how to import various types from the Pragmatic Drag and Drop element adapter, including payload types, event types, and feedback argument types.\nSOURCE: https://github.com/atlassian/pragmatic-drag-and-drop/blob/main/packages/documentation/constellation/05-core-package/00-adapters/00-element/about.mdx#2025-04-14_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nimport type {\n\t// Payload for the draggable being dragged\n\tElementDragPayload,\n\t// Base events\n\tElementEventBasePayload,\n\tElementEventPayloadMap,\n\t// Drop target events\n\tElementDropTargetEventBasePayload,\n\tElementDropTargetEventPayloadMap,\n\t// Feedback types\n\tElementGetFeedbackArgs,\n\tElementDropTargetGetFeedbackArgs,\n\tElementMonitorGetFeedbackArgs,\n} from '@atlaskit/pragmatic-drag-and-drop/element/adapter';\n```\n\n----------------------------------------\n\nTITLE: Installing Pragmatic Drag and Drop via npm\nDESCRIPTION: This code snippet shows how to install the pragmatic-drag-and-drop library using npm, the Node.js package manager.\nSOURCE: https://github.com/atlassian/pragmatic-drag-and-drop/blob/main/packages/documentation/constellation/index/props.mdx#2025-04-14_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @atlaskit/pragmatic-drag-and-drop\n```\n\n----------------------------------------\n\nTITLE: Implementing Box Drop Indicator in React TSX\nDESCRIPTION: Demonstrates how to use the Box Drop Indicator component in a React component with TypeScript. It includes styling and conditional rendering based on the closest edge.\nSOURCE: https://github.com/atlassian/pragmatic-drag-and-drop/blob/main/packages/react-drop-indicator/constellation/index/about.mdx#2025-04-14_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nconst itemStyles = css({\n\tposition: 'relative',\n\tpadding: token('space.100'),\n\tbackgroundColor: token('elevation.surface'),\n});\n\nexport function Item({ content, closestEdge }: { content: ReactNode; closestEdge: Edge | null }) {\n\treturn (\n\t\t<div css={itemStyles}>\n\t\t\t<span>{content}</span>\n\t\t\t{closestEdge && <DropIndicator edge={closestEdge} />}\n\t\t</div>\n\t);\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Box Drop Indicator in TypeScript\nDESCRIPTION: Shows how to import the Box Drop Indicator component from the package.\nSOURCE: https://github.com/atlassian/pragmatic-drag-and-drop/blob/main/packages/react-drop-indicator/constellation/index/about.mdx#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { DropIndicator } from '@atlaskit/pragmatic-drag-and-drop-react-drop-indicator/box';\n```\n\n----------------------------------------\n\nTITLE: Configuring Jest for DragEvent Polyfill\nDESCRIPTION: This snippet demonstrates how to set up Jest configuration to use the DragEvent polyfill in unit tests.\nSOURCE: https://github.com/atlassian/pragmatic-drag-and-drop/blob/main/packages/unit-testing/constellation/index/about.mdx#2025-04-14_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// jest.config.js\nmodule.exports = {\n\tsetupFiles: ['./test/setup-drag-events.js'],\n};\n\n// ./test/setup-drag-events.js\nimport '@atlaskit/pragmatic-drag-and-drop/unit-testing/drag-event-polyfill';\n```\n\n----------------------------------------\n\nTITLE: Color Selection Function for Chess Squares\nDESCRIPTION: Helper function that determines the background color of a chess square based on whether it's being dragged over and whether it's a dark or light square.\nSOURCE: https://github.com/atlassian/pragmatic-drag-and-drop/blob/main/packages/documentation/constellation/01-tutorial/index.mdx#2025-04-14_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nfunction getColor(isDraggedOver: boolean, isDark: boolean): string {\n\tif (isDraggedOver) {\n\t\treturn 'skyblue';\n\t}\n\treturn isDark ? 'lightgrey' : 'white';\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Monitors on Each React Render Cycle\nDESCRIPTION: Example showing a common pattern to avoid - creating new monitors on each render in React components without proper dependency arrays.\nSOURCE: https://github.com/atlassian/pragmatic-drag-and-drop/blob/main/packages/documentation/constellation/05-core-package/04-monitors/index.mdx#2025-04-14_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nfunction App() {\n\tuseEffect(() => {\n\t\tconst cleanup = monitorForElements({\n\t\t\tonDragStart: () => 'This monitor gets created on each render!',\n\t\t});\n\t\treturn cleanup;\n\t});\n\n\treturn null;\n}\n```\n\n----------------------------------------\n\nTITLE: Plain JavaScript Drag Preview Implementation\nDESCRIPTION: Basic implementation of a native drag preview using plain JavaScript without any framework dependencies.\nSOURCE: https://github.com/atlassian/pragmatic-drag-and-drop/blob/main/packages/documentation/constellation/05-core-package/00-adapters/00-element/drag-previews.mdx#2025-04-14_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ndraggable({\n\telement: myElement,\n\tonGenerateDragPreview: ({ nativeSetDragImage }) => {\n\t\tsetCustomNativeDragPreview({\n\t\t\trender({ container }) {\n\t\t\t\tconst preview = document.createElement('div');\n\t\t\t\tpreview.textContent = 'My Preview';\n\t\t\t\tObject.assign(preview.style, {\n\t\t\t\t\tpadding: '20px',\n\t\t\t\t\tbackgroundColor: 'lightpink',\n\t\t\t\t});\n\t\t\t\tcontainer.appendChild(preview);\n\t\t\t},\n\t\t\tnativeSetDragImage,\n\t\t});\n\t},\n});\n```\n\n----------------------------------------\n\nTITLE: ItemMode Type Definition for Tree Item Addon\nDESCRIPTION: Defines the ItemMode type which represents the possible modes (standard, expanded, last-in-group) that a tree item can have.\nSOURCE: https://github.com/atlassian/pragmatic-drag-and-drop/blob/main/packages/hitbox/constellation/index/about.mdx#2025-04-14_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ntype ItemMode = 'standard' | 'expanded' | 'last-in-group';\n```\n\n----------------------------------------\n\nTITLE: Importing Components in JSX for Example Page\nDESCRIPTION: Imports various React components including Atlaskit primitives, section messages, and examples to demonstrate different drag and drop patterns.\nSOURCE: https://github.com/atlassian/pragmatic-drag-and-drop/blob/main/packages/documentation/constellation/00-examples/index.mdx#2025-04-14_snippet_0\n\nLANGUAGE: JSX\nCODE:\n```\nimport { Stack } from '@atlaskit/primitives';\nimport SectionMessage from '@atlaskit/section-message';\nimport { LinkButton } from '@atlaskit/button/new';\n\nimport ListExample from '../../examples/list';\nimport BoardExample from '../../examples/board';\nimport GridExample from '../../examples/grid';\nimport TableExample from '../../examples/table';\nimport FileExample from '../../examples/file';\nimport DrawingExample from '../../examples/drawing';\nimport ResizingExample from '../../examples/resizing';\nimport TreeExample from '../../examples/tree';\nimport VirtualListExample from '../../examples/virtual-list';\nimport { TrelloLikeBoardIframe } from '../../examples/trello-like-board-iframe';\n```\n\n----------------------------------------\n\nTITLE: Adding Axis Locking Functionality\nDESCRIPTION: Demonstrates the addition of axis locking functionality to element, text selection and external auto scrollers\nSOURCE: https://github.com/atlassian/pragmatic-drag-and-drop/blob/main/packages/auto-scroll/CHANGELOG.md#2025-04-14_snippet_3\n\nLANGUAGE: diff\nCODE:\n```\n+ // `getAllowedAxis` added to element, text selection and external auto scrollers\n\n    autoScrollForElements({\n      element: myElement,\n+    getAllowedAxis: (args: ElementGetFeedbackArgs<DragType>) =>  'horizontal' | 'vertical' | 'all',\n    });\n\n    autoScrollWindowForElements({\n+    getAllowedAxis: (args: WindowGetFeedbackArgs<DragType>) =>  'horizontal' | 'vertical' | 'all',\n    });\n\n    unsafeOverflowAutoScrollForElements({\n+    getAllowedAxis?: (args: ElementGetFeedbackArgs<DragType>) => AllowedAxis;\n    })\n```\n\n----------------------------------------\n\nTITLE: External Event Base Types Definition in TypeScript\nDESCRIPTION: Defines the base payload types for external drag and drop events including location history and drag payload with media types and items.\nSOURCE: https://github.com/atlassian/pragmatic-drag-and-drop/blob/main/packages/documentation/constellation/05-core-package/00-adapters/02-external/about.mdx#2025-04-14_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\ntype ExternalEventBasePayload = {\n\tlocation: DragLocationHistory;\n\tsource: ExternalDragPayload;\n};\n\nexport type ExternalDragPayload = {\n\ttypes: NativeMediaType[];\n\titems: DataTransferItem[];\n\tgetStringData: (mediaType: string) => string | null;\n};\n\ntype NativeMediaType = 'text/uri-list' | 'text/plain' | 'text/html' | 'Files' | string;\n```\n\n----------------------------------------\n\nTITLE: Illustrating Complex onDropTargetChange Event Flow in Markdown\nDESCRIPTION: This snippet demonstrates a more complex scenario where the drop target changes from [B, A] to [D, C]. It shows how onDropTargetChange events are fired and how multiple derived events (onDragEnter and onDragLeave) are triggered on different components.\nSOURCE: https://github.com/atlassian/pragmatic-drag-and-drop/blob/main/packages/documentation/constellation/05-core-package/06-events/index.mdx#2025-04-14_snippet_6\n\nLANGUAGE: markdown\nCODE:\n```\n> Scenario: [B, A] → [D, C]\n\n- `onDropTargetChange` fires on `draggable`\n- `onDropTargetChange` fires on `dropTarget(B)`\n  - `onDragLeave` fires on `dropTarget(B)` → _derived event_\n- `onDropTargetChange` fires on `dropTarget(A)`\n  - `onDragLeave` fires on `dropTarget(A)` → _derived event_\n- _now going to fire on newly added drop targets in bubble order_\n- `onDropTargetChange` fires on `dropTarget(D)`\n  - `onDragEnter` fires on `dropTarget(D)` → _derived event_\n- `onDropTargetChange` fires on `dropTarget(C)`\n  - `onDragEnter` fires on `dropTarget(C)` → _derived event_\n- `onDropTargetChange` fires on monitors\n```\n\n----------------------------------------\n\nTITLE: Removing Unsupported DragDropContext Props in Diff\nDESCRIPTION: This diff snippet shows the removal of unsupported props for the DragDropContext component in the migration from react-beautiful-dnd to Pragmatic Drag and Drop.\nSOURCE: https://github.com/atlassian/pragmatic-drag-and-drop/blob/main/packages/react-beautiful-dnd-migration/constellation/index/comparison.mdx#2025-04-14_snippet_1\n\nLANGUAGE: diff\nCODE:\n```\n# Custom sensors are not supported.\n# The migration layer supports pointer and keyboard dragging.\n- sensors?: Sensors[];\n\n# Disabling default sensors is not supported.\n- enableDefaultSensors?: boolean;\n```\n\n----------------------------------------\n\nTITLE: New React Application Drag Preview Implementation\nDESCRIPTION: Implementation of a native drag preview for a new React application without component re-rendering but not maintaining React context.\nSOURCE: https://github.com/atlassian/pragmatic-drag-and-drop/blob/main/packages/documentation/constellation/05-core-package/00-adapters/00-element/drag-previews.mdx#2025-04-14_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\ndraggable({\n\telement: myElement,\n\tonGenerateDragPreview: ({ nativeSetDragImage }) => {\n\t\tsetCustomNativeDragPreview({\n\t\t\trender({ container }) {\n\t\t\t\tReactDOM.render(<Preview item={item} />, container);\n\t\t\t\treturn function cleanup() {\n\t\t\t\t\tReactDOM.unmountComponentAtNode(container);\n\t\t\t\t};\n\t\t\t},\n\t\t\tnativeSetDragImage,\n\t\t});\n\t},\n});\n```\n\n----------------------------------------\n\nTITLE: Text Selection Drop Target Feedback Arguments Type\nDESCRIPTION: Defines the arguments provided to drop target feedback functions like canDrop, getData, getDropEffect, and getIsSticky.\nSOURCE: https://github.com/atlassian/pragmatic-drag-and-drop/blob/main/packages/documentation/constellation/05-core-package/00-adapters/01-text-selection/about.mdx#2025-04-14_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\ntype TextSelectionDropTargetGetFeedbackArgs = {\n\t/**\n\t * The users _current_ input\n\t */\n\tinput: Input;\n\t/**\n\t * The data associated with the entity being dragged\n\t */\n\tsource: TextSelectionDragPayload;\n\t/**\n\t * This drop target's element\n\t */\n\telement: Element;\n};\n```\n\n----------------------------------------\n\nTITLE: Defining DropTargetRecord Type in Pragmatic Drag and Drop\nDESCRIPTION: This snippet defines the DropTargetRecord type used in the Pragmatic Drag and Drop library, which includes information about drop targets such as the element, data, and drop effect.\nSOURCE: https://github.com/atlassian/pragmatic-drag-and-drop/blob/main/packages/documentation/constellation/05-core-package/06-events/index.mdx#2025-04-14_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ntype AllowedDropTargetDropEffect = Exclude<DataTransfer['dropEffect'], 'none'>;\n\ntype DropTargetRecord = {\n\telement: Element;\n\t// data provided using .getData()\n\tdata: Record<string | symbol, unknown>;\n\t// dropEffect provided by using getDropEffect()\n\tdropEffect: AllowedDropTargetDropEffect;\n};\n```\n\n----------------------------------------\n\nTITLE: Embedding YouTube Video in JSX for Drag and Drop Explanation\nDESCRIPTION: This snippet uses the VideoEmbed component to embed a YouTube video that provides a technical explanation of how the Pragmatic drag and drop library is architected for speed.\nSOURCE: https://github.com/atlassian/pragmatic-drag-and-drop/blob/main/packages/documentation/constellation/index/about.mdx#2025-04-14_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n<VideoEmbed url=\"https://www.youtube.com/embed/5SQkOyzZLHM\" />\n```\n\n----------------------------------------\n\nTITLE: Implementing Nested Scrollable Elements in HTML\nDESCRIPTION: Example HTML structure showing nested scrollable elements used to demonstrate scroll bubbling behavior. Contains a parent div and child div that can both be scrollable.\nSOURCE: https://github.com/atlassian/pragmatic-drag-and-drop/blob/main/packages/auto-scroll/constellation/index/about.mdx#2025-04-14_snippet_9\n\nLANGUAGE: html\nCODE:\n```\n<div id=\"parent\">\n\t<div id=\"child\">\n\t\t<!-- content -->\n\t</div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: WindowGetFeedbackArgs Type Definition\nDESCRIPTION: Type definition for the arguments passed to window auto scrolling callback functions, providing information about the current drag operation.\nSOURCE: https://github.com/atlassian/pragmatic-drag-and-drop/blob/main/packages/auto-scroll/constellation/index/about.mdx#2025-04-14_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nexport type ElementGetFeedbackArgs = {\n\t/**\n\t * The users _current_ input\n\t */\n\tinput: Input;\n\t/**\n\t * The data associated with the entity being dragged\n\t */\n\tsource: DragType['payload'];\n};\n```\n\n----------------------------------------\n\nTITLE: Text Selection Drop Target Event Base Payload Type\nDESCRIPTION: Extends the base event payload with additional drop target specific information, including a self-reference to the drop target record.\nSOURCE: https://github.com/atlassian/pragmatic-drag-and-drop/blob/main/packages/documentation/constellation/05-core-package/00-adapters/01-text-selection/about.mdx#2025-04-14_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\ntype TextSelectionDropTargetEventBasePayload = TextSelectionEventBasePayload & {\n\t/**\n\t * A convenance pointer to this drop targets values\n\t */\n\tself: DropTargetRecord;\n};\n```\n\n----------------------------------------\n\nTITLE: Monitor Creation During Active Events\nDESCRIPTION: Example demonstrating the behavior when creating monitors during active drag events, showing that newly created monitors won't be called for the current event.\nSOURCE: https://github.com/atlassian/pragmatic-drag-and-drop/blob/main/packages/documentation/constellation/05-core-package/04-monitors/index.mdx#2025-04-14_snippet_6\n\nLANGUAGE: ts\nCODE:\n```\nconst monitor1 = monitorForElements({\n\tonGenerateDragPreview: () => {\n\t\tconst monitor2 = monitorForElements({\n\t\t\t// Setting up another monitor during `onGenerateDragPreview`\n\t\t\tonGenerateDragPreview: () => {\n\t\t\t\t// monitor2 will not be called for the _current_ `onGenerateDragPreview` event\n\t\t\t},\n\t\t\t// The monitor will be called for subsequent events\n\t\t\tonDragStart: () => {},\n\t\t});\n\t},\n});\n```\n\n----------------------------------------\n\nTITLE: Updating Edge Property Names\nDESCRIPTION: Shows the renaming of edge properties from 'from*Edge' to 'for*Edge' in the overflow scroller configuration\nSOURCE: https://github.com/atlassian/pragmatic-drag-and-drop/blob/main/packages/auto-scroll/CHANGELOG.md#2025-04-14_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\n- fromTopEdge\n+ forTopEdge\n- fromRightEdge\n+ forRightEdge\n- fromBottomEdge\n+ forBottomEdge\n- fromLeftEdge\n+ forLeftEdge\n```\n\n----------------------------------------\n\nTITLE: Drop Target Event Map Type\nDESCRIPTION: Defines a type map for all drop target specific events using the extended base payload.\nSOURCE: https://github.com/atlassian/pragmatic-drag-and-drop/blob/main/packages/documentation/constellation/05-core-package/00-adapters/02-external/about.mdx#2025-04-14_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\ntype ExternalDropTargetEventPayloadMap = {\n\tonDragStart: ElementDropTargetEventBasePayload;\n\t// .. the rest of the events\n};\n```\n\n----------------------------------------\n\nTITLE: File Adapter Migration Example\nDESCRIPTION: Example showing migration from the old file adapter to the new external adapter\nSOURCE: https://github.com/atlassian/pragmatic-drag-and-drop/blob/main/packages/documentation/constellation/05-core-package/12-upgrade-guides/upgrade-guide-0.x-→-1.0.mdx#2025-04-14_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n/** 0.x API **/\n\nimport { dropTargetForFiles, monitorForFiles } from '@atlaskit/pragmatic-drag-and-drop/file';\n\ndropTargetForFiles({\n\telement: myElement,\n\tonDrop({ source }) {\n\t\t// 😬 Not to easy to get files!\n\n\t\tif (!source.items) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst files: File[] = [...source.items]\n\t\t\t.filter((item) => item.kind === 'file')\n\t\t\t.map((item) => item.getAsFile())\n\t\t\t.filter((file: File | null): file is File => file != null);\n\t},\n});\n\n/** 1.0 API **/\n\nimport {\n\tdropTargetForExternal,\n\tmonitorForExternal,\n} from '@atlaskit/pragmatic-drag-and-drop/external';\nimport { containsFiles, getFiles } from '@atlaskit/pragmatic-drag-and-drop/external/file';\n\ndropTargetForExternal({\n\tcanDrop: containsFiles,\n\tonDrop({ source }) {\n\t\t// 🤩 Easy to get files!\n\t\tconst files: File[] = getFiles({ source });\n\t},\n});\n```\n\n----------------------------------------\n\nTITLE: Importing Tree Item Drop Indicator in TypeScript\nDESCRIPTION: Shows how to import the Tree Item Drop Indicator component from the package.\nSOURCE: https://github.com/atlassian/pragmatic-drag-and-drop/blob/main/packages/react-drop-indicator/constellation/index/about.mdx#2025-04-14_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { DropIndicator } from '@atlaskit/pragmatic-drag-and-drop-react-drop-indicator/tree-item';\n```\n\n----------------------------------------\n\nTITLE: Updating import path for DropIndicator in React\nDESCRIPTION: This snippet shows the change in import path for the DropIndicator component from the tree module to the tree-item module. It also demonstrates the change from a render prop API to a conditional rendering approach.\nSOURCE: https://github.com/atlassian/pragmatic-drag-and-drop/blob/main/packages/react-drop-indicator/CHANGELOG.md#2025-04-14_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n- import { DropIndicator } from '@atlaskit/drag-and-drop-indicator/tree';\n+ import { DropIndicator } from '@atlaskit/drag-and-drop-indicator/tree-item';\n\n- // Render prop API with className as public API\n- <DropIndicator edge={edge}>({className}) => <div className={className} />\n+ // Conditional rendering of an element\n+ <div style={{position: 'relative'}}>{edge ? <DropIndicator edge={edge} /></div>}\n```\n\n----------------------------------------\n\nTITLE: Cleaning Up Live Region in TypeScript\nDESCRIPTION: This snippet shows how to use the 'cleanup' function from the '@atlaskit/live-region' package to remove the live region from the DOM. The function is safe to call even if no live region exists, making it suitable for optimistic cleanup operations.\nSOURCE: https://github.com/atlassian/pragmatic-drag-and-drop/blob/main/packages/live-region/constellation/index/about.mdx#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { cleanup } from '@atlaskit/live-region';\n\ncleanup();\n```\n\n----------------------------------------\n\nTITLE: Drop Target Event Base Payload Type\nDESCRIPTION: Extends the base payload type with additional drop target specific information including self-reference to drop target values.\nSOURCE: https://github.com/atlassian/pragmatic-drag-and-drop/blob/main/packages/documentation/constellation/05-core-package/00-adapters/02-external/about.mdx#2025-04-14_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\ntype ElementDropTargetEventBasePayload = ExternalEventBasePayload & {\n\tself: DropTargetRecord;\n};\n```\n\n----------------------------------------\n\nTITLE: Defining ScrollBehavior Types in TypeScript\nDESCRIPTION: Type definition for scroll behavior options that control window and container scrolling precedence during drag operations. Includes four distinct behavior patterns for controlling scroll priority.\nSOURCE: https://github.com/atlassian/pragmatic-drag-and-drop/blob/main/packages/react-beautiful-dnd-autoscroll/CHANGELOG.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntype ScrollBehavior =\n\t| 'window-then-container'\n\t| 'container-then-window'\n\t| 'window-only'\n\t| 'container-only';\n```\n\n----------------------------------------\n\nTITLE: Updating DropTargetRecord Type in TypeScript\nDESCRIPTION: Change to DropTargetRecord type removing sticky property and adding isActiveDueToStickiness to better reflect drop target state.\nSOURCE: https://github.com/atlassian/pragmatic-drag-and-drop/blob/main/packages/core/CHANGELOG.md#2025-04-14_snippet_7\n\nLANGUAGE: diff\nCODE:\n```\ntype DropTargetRecord = {\n  element: Element;\n  data: Record<string | symbol, unknown>;\n  dropEffect: DataTransfer['dropEffect'];\n-  sticky: boolean;\n+  isActiveDueToStickiness: boolean;\n};\n```\n\n----------------------------------------\n\nTITLE: Importing Components in JSX for Drag and Drop Documentation\nDESCRIPTION: This snippet imports various components used in the documentation page, including a BoardExample, SectionMessage, VideoEmbed, and a custom Hero component.\nSOURCE: https://github.com/atlassian/pragmatic-drag-and-drop/blob/main/packages/documentation/constellation/index/about.mdx#2025-04-14_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport BoardExample from '../../examples/board';\nimport SectionMessage from '@atlaskit/section-message';\nimport { VideoEmbed } from '@af/design-system-docs-ui';\nimport Hero from './assets/hero';\n```\n\n----------------------------------------\n\nTITLE: Configuring Jest for DOMRect Polyfill\nDESCRIPTION: This snippet shows how to set up Jest configuration to use the DOMRect polyfill in unit tests.\nSOURCE: https://github.com/atlassian/pragmatic-drag-and-drop/blob/main/packages/unit-testing/constellation/index/about.mdx#2025-04-14_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n// jest.config.js\nmodule.exports = {\n\tsetupFiles: ['./test/setup-dom-rect.js'],\n};\n\n// ./test/setup-dom-rect.js\nimport '@atlaskit/pragmatic-drag-and-drop/unit-testing/dom-rect-polyfill';\n```\n\n----------------------------------------\n\nTITLE: Event Payload Map Type Definition\nDESCRIPTION: Defines a type map for all external drag and drop events, extending from the base payload.\nSOURCE: https://github.com/atlassian/pragmatic-drag-and-drop/blob/main/packages/documentation/constellation/05-core-package/00-adapters/02-external/about.mdx#2025-04-14_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\ntype ExternalEventPayloadMap = {\n\tonDragStart: ExternalEventBasePayload;\n\t// .. the rest of the events\n};\n```\n\n----------------------------------------\n\nTITLE: Drop Target Feedback Arguments Type\nDESCRIPTION: Defines the argument types for drop target feedback functions including input, source, and element information.\nSOURCE: https://github.com/atlassian/pragmatic-drag-and-drop/blob/main/packages/documentation/constellation/05-core-package/00-adapters/02-external/about.mdx#2025-04-14_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\ntype ExternalDropTargetGetFeedbackArgs = {\n\tinput: Input;\n\tsource: ExternalDragPayload;\n\telement: Element;\n};\n```\n\n----------------------------------------\n\nTITLE: TypeScript Type Import Example\nDESCRIPTION: Example showing how to import additional TypeScript types used for creating helper packages.\nSOURCE: https://github.com/atlassian/pragmatic-drag-and-drop/blob/main/packages/core/CHANGELOG.md#2025-04-14_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport type {\n\t// These types are not needed for consumers\n\t// They are mostly helpful for other packages\n\tAllDragTypes,\n\tMonitorArgs,\n\tBaseEventPayload,\n} from '@atlaskit/pragmatic-drag-and-drop/types';\n```\n\n----------------------------------------\n\nTITLE: Updating DropIndicator Usage in React\nDESCRIPTION: This code snippet shows how to update the usage of DropIndicator component after the removal of 'box-without-terminal' in version 3.0.0. It demonstrates the change in import statement and component props.\nSOURCE: https://github.com/atlassian/pragmatic-drag-and-drop/blob/main/packages/react-drop-indicator/CHANGELOG.md#2025-04-14_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n- import { DropIndicator } from '@atlaskit/pragmatic-drag-and-drop-react-drop-indicator/box-without-terminal';\n+ import { DropIndicator } from '@atlaskit/pragmatic-drag-and-drop-react-drop-indicator/box';\n\nfunction Item() {\n-  return <DropIndicator edge=\"bottom\" />\n+  return <DropIndicator edge=\"bottom\" type=\"no-terminal\" />\n}\n```\n\n----------------------------------------\n\nTITLE: Importing DOMRect Polyfill in TypeScript\nDESCRIPTION: This snippet demonstrates how to import the DOMRect polyfill for use in unit testing environments that don't natively support it.\nSOURCE: https://github.com/atlassian/pragmatic-drag-and-drop/blob/main/packages/unit-testing/constellation/index/about.mdx#2025-04-14_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport '@atlaskit/pragmatic-drag-and-drop/unit-testing/dom-rect-polyfill';\n```\n\n----------------------------------------\n\nTITLE: Importing once() Function\nDESCRIPTION: Shows how to import the once utility function, which ensures a function is only called once regardless of how many times the wrapper function is invoked.\nSOURCE: https://github.com/atlassian/pragmatic-drag-and-drop/blob/main/packages/documentation/constellation/05-core-package/05-utilities/index.mdx#2025-04-14_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { once } from '@atlaskit/pragmatic-drag-and-drop/once';\n```\n\n----------------------------------------\n\nTITLE: Text Selection Monitor Feedback Arguments Type\nDESCRIPTION: Defines the arguments provided to the monitor feedback function canMonitor, including the initial drag location and source information.\nSOURCE: https://github.com/atlassian/pragmatic-drag-and-drop/blob/main/packages/documentation/constellation/05-core-package/00-adapters/01-text-selection/about.mdx#2025-04-14_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\ntype TextSelectionMonitorGetFeedbackArgs = {\n\t/**\n\t * The users `initial` drag location\n\t */\n\tinitial: DragLocation;\n\t/**\n\t * The data associated with the entity being dragged\n\t */\n\tsource: TextSelectionDragPayload;\n};\n```\n\n----------------------------------------\n\nTITLE: Installing Pragmatic Drag and Drop Core Package\nDESCRIPTION: Command to install the core package of Pragmatic drag and drop using yarn.\nSOURCE: https://github.com/atlassian/pragmatic-drag-and-drop/blob/main/packages/documentation/constellation/05-core-package/index.mdx#2025-04-14_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# install the core package\nyarn add @atlaskit/pragmatic-drag-and-drop\n```\n\n----------------------------------------\n\nTITLE: SectionMessage Highlighting Virtual List Compatibility\nDESCRIPTION: A success SectionMessage explaining that Pragmatic drag and drop works with any virtual experience, with reference to TanStack Virtual and the virtualization guide.\nSOURCE: https://github.com/atlassian/pragmatic-drag-and-drop/blob/main/packages/documentation/constellation/00-examples/index.mdx#2025-04-14_snippet_7\n\nLANGUAGE: JSX\nCODE:\n```\n<SectionMessage appearance=\"success\">\n\t<p>\n\t\tPragmatic drag an drop works with <strong>any virtual experience</strong>: you can add, remove\n\t\tor change any entity you want during a drag operation. This example uses{' '}\n\t\t<a href=\"https://tanstack.com/virtual/latest\">TanStack Virtual</a>, but you can use any\n\t\tvirtualization solution you like.\n\t\t<br />\n\t\tSee our{' '}\n\t\t<a href=\"/components/pragmatic-drag-and-drop/core-package/recipes/virtualization\">\n\t\t\tvirtualization guide\n\t\t</a>{' '}\n\t\tfor more details.\n\t</p>\n</SectionMessage>\n```\n\n----------------------------------------\n\nTITLE: Referencing getData and getInitialData Methods in Markdown\nDESCRIPTION: Shows method references used in the context of typing data in drag-and-drop implementations. These methods are likely core API functions for retrieving data in the pragmatic-drag-and-drop library.\nSOURCE: https://github.com/atlassian/pragmatic-drag-and-drop/blob/main/packages/documentation/constellation/05-core-package/09-recipes/index.mdx#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n`getData()` and `getInitialData()`\n```\n\n----------------------------------------\n\nTITLE: Text Selection Event Base Payload Type Definition\nDESCRIPTION: Defines the base payload structure provided in all text selection drag events, including location history and source information.\nSOURCE: https://github.com/atlassian/pragmatic-drag-and-drop/blob/main/packages/documentation/constellation/05-core-package/00-adapters/01-text-selection/about.mdx#2025-04-14_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ntype TextSelectionEventBasePayload = {\n\tlocation: DragLocationHistory;\n\tsource: TextSelectionDragPayload;\n};\n\ntype TextSelectionDragPayload = {\n\t/**\n\t * The `Text` node that is the user started the drag from.\n\t * Note: the `Text` node does not include all text being dragged.\n\t * Use the `plain` or `html` properties to get the full selection\n\t */\n\ttarget: Text;\n\t/** The plain text of the selection */\n\tplain: string;\n\t/** the HTML of the selection */\n\tHTML: string;\n};\n```\n\n----------------------------------------\n\nTITLE: Testing Drag and Drop Between Columns with Playwright in TypeScript\nDESCRIPTION: This code snippet demonstrates how to test drag and drop functionality between columns using Playwright. It navigates to a specific URL, verifies initial conditions, performs a drag and drop operation, and then checks the results. The test uses data-testid attributes for element selection and count assertions to verify the correct number of draggable items in each column before and after the drag operation.\nSOURCE: https://github.com/atlassian/pragmatic-drag-and-drop/blob/main/packages/documentation/constellation/05-core-package/11-testing/playwright.mdx#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { test, expect } from '@playwright/test';\n\ntest('should allow drag and drop between columns', async ({ page }) => {\n\tawait page.goto('https://localhost:9000/atlaskit-drag-and-drop');\n\n\t// waiting for our board to be visible\n\tawait expect(page.getByTestId('item-A0')).toBeVisible();\n\n\t// asserting initial list sizes\n\tawait expect(page.getByTestId('column-A--card-list').locator('[draggable=\"true\"]')).toHaveCount(\n\t\t16,\n\t);\n\n\tawait expect(page.getByTestId('column-B--card-list').locator('[draggable=\"true\"]')).toHaveCount(\n\t\t16,\n\t);\n\n\t// Move A0 to column B\n\tawait page.getByTestId('item-A0').dragTo(page.getByTestId('item-B0'));\n\n\t// asserting list sizes after drag and drop\n\tawait expect(page.getByTestId('column-A--card-list').locator('[draggable=\"true\"]')).toHaveCount(\n\t\t15,\n\t);\n\n\tawait expect(page.getByTestId('column-B--card-list').locator('[draggable=\"true\"]')).toHaveCount(\n\t\t17,\n\t);\n});\n```\n\n----------------------------------------\n\nTITLE: Package Name Change Diff\nDESCRIPTION: Shows the package rename from react-indicator to react-drop-indicator\nSOURCE: https://github.com/atlassian/pragmatic-drag-and-drop/blob/main/packages/documentation/constellation/05-core-package/12-upgrade-guides/upgrade-guide-0.x-→-1.0.mdx#2025-04-14_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\n- @atlaskit/pragmatic-drag-and-drop-react-indicator\n+ @atlaskit/pragmatic-drag-and-drop-react-drop-indicator\n```\n\n----------------------------------------\n\nTITLE: TypeScript Import Example with preserveOffsetOnSource\nDESCRIPTION: Example showing migration from preserveOffsetFromPointer to preserveOffsetOnSource utility for custom drag preview offset preservation.\nSOURCE: https://github.com/atlassian/pragmatic-drag-and-drop/blob/main/packages/core/CHANGELOG.md#2025-04-14_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n- import { preserveOffsetFromPointer } from '@atlaskit/pragmatic-drag-and-drop/util/preserve-offset-from-pointer';\n+ import { preserveOffsetOnSource } from '@atlaskit/pragmatic-drag-and-drop/util/preserve-offset-on-source';\n\ndraggable({\n  element: myElement,\n  onGenerateDragPreview: ({ nativeSetDragImage, location, source }) => {\n    setCustomNativeDragPreview({\n-      getOffset: preserveOffsetFromPointer({\n+      getOffset: preserveOffsetOnSource({\n-        sourceElement: source.element,\n+        element: source.element,\n        input: location.current.input,\n      }),\n      render: function render({ container }) {\n        /* ... */\n      },\n      nativeSetDragImage,\n    });\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: SectionMessage for Accessibility Guidance on Resizing\nDESCRIPTION: An informational SectionMessage indicating that accessibility investigation is required for resizing operations and offering to prioritize this work if requested.\nSOURCE: https://github.com/atlassian/pragmatic-drag-and-drop/blob/main/packages/documentation/constellation/00-examples/index.mdx#2025-04-14_snippet_6\n\nLANGUAGE: JSX\nCODE:\n```\n<SectionMessage appearance=\"information\" title=\"Accessibility guidance in progress\">\n\t<p>\n\t\tAn investigation is required to decide on appropriate accessible controls for resizing. If you\n\t\twould like us to prioritise this investigation, please reach out.\n\t</p>\n</SectionMessage>\n```\n\n----------------------------------------\n\nTITLE: Background Color Animation Properties\nDESCRIPTION: CSS animation properties for background color changes during drag operations, including color value, easing function and duration.\nSOURCE: https://github.com/atlassian/pragmatic-drag-and-drop/blob/main/packages/documentation/constellation/08-design-guidelines/index.mdx#2025-04-14_snippet_3\n\nLANGUAGE: css\nCODE:\n```\n{\n  background-color: color.background.selected.hovered;\n  easing: cubic-bezier(0.15, 1.0, 0.3, 1.0);\n  duration: 350ms;\n}\n```\n\n----------------------------------------\n\nTITLE: Monitor Feedback Arguments Type\nDESCRIPTION: Defines the argument types for monitor feedback functions including initial drag location and source information.\nSOURCE: https://github.com/atlassian/pragmatic-drag-and-drop/blob/main/packages/documentation/constellation/05-core-package/00-adapters/02-external/about.mdx#2025-04-14_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\ntype ExternalMonitorGetFeedbackArgs = {\n\tinitial: DragLocation;\n\tsource: ExternalDragPayload;\n};\n```\n\n----------------------------------------\n\nTITLE: Reorder utility with invalid indices (new behavior)\nDESCRIPTION: Demonstrates the new behavior where reorder always returns a new array copy even when invalid indices are provided.\nSOURCE: https://github.com/atlassian/pragmatic-drag-and-drop/blob/main/packages/core/CHANGELOG.md#2025-04-14_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { reorder } from '@atlaskit/pragmatic-drag-and-drop/reorder';\n\nconst original = ['A', 'B'];\n\nconst result = reorder({\n\tlist: original,\n\tstartIndex: -1, // invalid start index\n\tfinishIndex: 1,\n});\n\nconsole.log(result); // ['A', 'B'] (array not reordered - unchanged)\n\n// We now return a new array in this case\nconsole.log(result === original); // false\n```\n\n----------------------------------------\n\nTITLE: SectionMessage for WCAG Exception in Drawing Example\nDESCRIPTION: A detailed SectionMessage explaining why the drawing example is excepted from WCAG Success Criterion 2.1.1 - Keyboard (Level A), with references to applicable guidelines.\nSOURCE: https://github.com/atlassian/pragmatic-drag-and-drop/blob/main/packages/documentation/constellation/00-examples/index.mdx#2025-04-14_snippet_5\n\nLANGUAGE: JSX\nCODE:\n```\n<SectionMessage\n\tappearance=\"information\"\n\ttitle=\"Excepted from Success Criterion 2.1.1 - Keyboard (Level A)\"\n>\n\t<Stack space=\"space.200\">\n\t\t<p>\n\t\t\tThis example is excepted from the{' '}\n\t\t\t<a href=\"https://www.w3.org/WAI/WCAG21/Understanding/keyboard\">\n\t\t\t\tWCAG Success Criterion 2.1.1 - Keyboard (Level A)\n\t\t\t</a>\n\t\t\t. The underlying function (freehand drawing) requires input that depends on the path of the\n\t\t\tuser's movement and not just the endpoints.\n\t\t</p>\n\t\t<p>\n\t\t\tDue to{' '}\n\t\t\t<a href=\"https://www.w3.org/WAI/WCAG21/Understanding/keyboard-no-exception\">\n\t\t\t\tSuccess Criterion 2.1.3 - Keyboard (No Exception) (Level AAA)\n\t\t\t</a>\n\t\t\t, path-dependent input cannot meet{' '}\n\t\t\t<a href=\"https://www.w3.org/WAI/WCAG21/Understanding/keyboard-accessible\">Guideline 2.1</a> at\n\t\t\tLevel AAA.\n\t\t</p>\n\t\t<p>\n\t\t\tWherever possible, this exception should not be relied on, and an alternative input method\n\t\t\tshould be provided.\n\t\t</p>\n\t</Stack>\n</SectionMessage>\n```\n\n----------------------------------------\n\nTITLE: Drop Flash Animation Properties\nDESCRIPTION: CSS animation properties for the background color flash effect that occurs after dropping an item, including color, easing function and duration.\nSOURCE: https://github.com/atlassian/pragmatic-drag-and-drop/blob/main/packages/documentation/constellation/08-design-guidelines/index.mdx#2025-04-14_snippet_4\n\nLANGUAGE: css\nCODE:\n```\n{\n  background-color: color.background.selected;\n  easing: cubic-bezier(0.25, 0.1, 0.25, 1.0);\n  duration: 700ms;\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering Small Variant Drag Handle Button Example\nDESCRIPTION: Shows how to render the small variant of the Drag Handle Button which is available through a separate entrypoint and is intended for space-constrained interfaces.\nSOURCE: https://github.com/atlassian/pragmatic-drag-and-drop/blob/main/packages/react-accessibility/constellation/drag-handle-button/about.mdx#2025-04-14_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n<Example Component={DragHandleButtonSmallExample} />\n```\n\n----------------------------------------\n\nTITLE: Rendering Hero Component in JSX for Drag and Drop Documentation\nDESCRIPTION: This snippet renders the Hero component, which likely displays a hero image or banner for the drag and drop library documentation.\nSOURCE: https://github.com/atlassian/pragmatic-drag-and-drop/blob/main/packages/documentation/constellation/index/about.mdx#2025-04-14_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Hero />\n```\n\n----------------------------------------\n\nTITLE: Rendering SectionMessage Component in JSX\nDESCRIPTION: This snippet demonstrates the usage of the SectionMessage component to display a message about entry points and bundle size optimization. It explains the rationale behind using entry points instead of exporting everything from the package root.\nSOURCE: https://github.com/atlassian/pragmatic-drag-and-drop/blob/main/packages/documentation/constellation/06-optional-packages/index.mdx#2025-04-14_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<SectionMessage>\n\nAt this stage we are using [entry points](https://nodejs.org/api/packages.html#package-entry-points)\nrather than exporting everything from the root of the package to ensure that _everybody_ gets the\nbest possible bundle size without needing to rely on\n[tree shaking](https://developer.mozilla.org/en-US/docs/Glossary/Tree_shaking).\n\n</SectionMessage>\n```\n\n----------------------------------------\n\nTITLE: SectionMessage for Table Example Needs Updating\nDESCRIPTION: An informational SectionMessage noting that the table example does not comply with the latest design guidelines and needs to be updated.\nSOURCE: https://github.com/atlassian/pragmatic-drag-and-drop/blob/main/packages/documentation/constellation/00-examples/index.mdx#2025-04-14_snippet_4\n\nLANGUAGE: JSX\nCODE:\n```\n<SectionMessage appearance=\"information\" title=\"Needs updating\">\n\nOur table example does not line up with our\n[latest design guidelines](/components/pragmatic-drag-and-drop/design-guidelines) and needs to be\nupdated.\n\n</SectionMessage>\n```\n\n----------------------------------------\n\nTITLE: Importing Text Selection Adapter Types\nDESCRIPTION: Shows how to import the various type definitions from the text selection adapter package for use in TypeScript code.\nSOURCE: https://github.com/atlassian/pragmatic-drag-and-drop/blob/main/packages/documentation/constellation/05-core-package/00-adapters/01-text-selection/about.mdx#2025-04-14_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport type {\n  // Payload for the text selection being dragged\n  TextSelectionDragPayload\n  // Base events\n  TextSelectionEventBasePayload\n  TextSelectionEventPayloadMap,\n  // Drop target events\n  TextSelectionDropTargetEventBasePayload,\n  TextSelectionDropTargetEventPayloadMap,\n  // Feedback types\n  TextSelectionDropTargetGetFeedbackArgs,\n  TextSelectionMonitorGetFeedbackArgs,\n} from '@atlaskit/pragmatic-drag-and-drop/text-selection/adapter';\n```\n\n----------------------------------------\n\nTITLE: Importing DragHandleButton Component in TypeScript\nDESCRIPTION: Shows how to import the DragHandleButton component from the @atlaskit/pragmatic-drag-and-drop-react-accessibility/drag-handle-button package. This component is designed to create a button that visually resembles a drag handle for use in drag and drop interfaces.\nSOURCE: https://github.com/atlassian/pragmatic-drag-and-drop/blob/main/packages/react-accessibility/constellation/drag-handle-button/props.mdx#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { DragHandleButton } from '@atlaskit/pragmatic-drag-and-drop-react-accessibility/drag-handle-button';\n```\n\n----------------------------------------\n\nTITLE: Entry Points Path Changes\nDESCRIPTION: Diff showing the changes in import paths for various utilities and adapters\nSOURCE: https://github.com/atlassian/pragmatic-drag-and-drop/blob/main/packages/documentation/constellation/05-core-package/12-upgrade-guides/upgrade-guide-0.x-→-1.0.mdx#2025-04-14_snippet_2\n\nLANGUAGE: diff\nCODE:\n```\n- @atlaskit/pragmatic-drag-and-drop/adapter/element\n+ @atlaskit/pragmatic-drag-and-drop/element/adapter\n\n- @atlaskit/pragmatic-drag-and-drop/util/set-custom-native-drag-preview\n+ @atlaskit/pragmatic-drag-and-drop/element/set-custom-native-drag-preview\n\n- @atlaskit/pragmatic-drag-and-drop/util/offset-from-pointer\n+ @atlaskit/pragmatic-drag-and-drop/element/offset-from-pointer\n\n- @atlaskit/pragmatic-drag-and-drop/util/center-under-pointer\n+ @atlaskit/pragmatic-drag-and-drop/element/center-under-pointer\n\n- @atlaskit/pragmatic-drag-and-drop/util/disable-native-drag-preview\n+ @atlaskit/pragmatic-drag-and-drop/element/disable-native-drag-preview\n\n- @atlaskit/pragmatic-drag-and-drop/util/scroll-just-enough-into-view\n+ @atlaskit/pragmatic-drag-and-drop/element/scroll-just-enough-into-view\n\n- @atlaskit/pragmatic-drag-and-drop/util/combine\n+ @atlaskit/pragmatic-drag-and-drop/combine\n\n- @atlaskit/pragmatic-drag-and-drop/util/once\n+ @atlaskit/pragmatic-drag-and-drop/once\n\n- @atlaskit/pragmatic-drag-and-drop/util/reorder\n+ @atlaskit/pragmatic-drag-and-drop/reorder\n\n- @atlaskit/pragmatic-drag-and-drop-hitbox/addon/closest-edge\n+ @atlaskit/pragmatic-drag-and-drop-hitbox/closest-edge\n```\n\n----------------------------------------\n\nTITLE: SectionMessage Component for Information About Grid Example\nDESCRIPTION: An informational SectionMessage explaining how the grid example works with a simple swap operation and noting it lacks accessibility features.\nSOURCE: https://github.com/atlassian/pragmatic-drag-and-drop/blob/main/packages/documentation/constellation/00-examples/index.mdx#2025-04-14_snippet_3\n\nLANGUAGE: JSX\nCODE:\n```\n<SectionMessage appearance=\"information\">\n\nThis grid example does a simple \"swap\" when dropping. You can do whatever operations you like with\ngrids (including inserting items based on closest edge). This example does not currently have\naccessibility wired up.\n\n</SectionMessage>\n```\n\n----------------------------------------\n\nTITLE: Disabling Default Drag Behavior for Anchors and Images\nDESCRIPTION: HTML snippet demonstrating how to disable the browser's default draggable behavior for anchor elements by setting the draggable attribute to false.\nSOURCE: https://github.com/atlassian/pragmatic-drag-and-drop/blob/main/packages/documentation/constellation/05-core-package/00-adapters/00-element/unregistered-elements.mdx#2025-04-14_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<a href=\"/home\" draggable=\"false\">Home</a>\n```\n\n----------------------------------------\n\nTITLE: Hypothetical Generic Approach (Not Implemented)\nDESCRIPTION: Demonstrates a potential approach using generics that is not implemented in the API. This is shown to explain why generics were not used in the library design due to disconnected components and runtime challenges.\nSOURCE: https://github.com/atlassian/pragmatic-drag-and-drop/blob/main/packages/documentation/constellation/05-core-package/09-recipes/01-typing-data/index.mdx#2025-04-14_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// Note: this is not real API\ndropTargetForElements<{ cardId: string }>({\n\telement: myElement,\n\tonDrop({ source }) {\n\t\t// cardId would be typed as `string` by the Generic\n\t\tconst cardId = source.data.cardId;\n\t},\n});\n```\n\n----------------------------------------\n\nTITLE: Importing React Components\nDESCRIPTION: Import statements for icon and text components used in the comparison documentation\nSOURCE: https://github.com/atlassian/pragmatic-drag-and-drop/blob/main/packages/documentation/constellation/index/comparison.mdx#2025-04-14_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport CheckIcon from '../assets/check-icon';\nimport CrossIcon from '../assets/cross-icon';\nimport QuestionIcon from '../assets/question-icon';\nimport ResultText from '../assets/result-text';\n```\n\n----------------------------------------\n\nTITLE: Importing DOMRect Polyfill\nDESCRIPTION: Shows how to import the DOMRect polyfill for unit testing environments that don't implement DOMRect, such as jsdom.\nSOURCE: https://github.com/atlassian/pragmatic-drag-and-drop/blob/main/packages/unit-testing/CHANGELOG.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport '@atlaskit/pragmatic-drag-and-drop/unit-testing/dom-rect-polyfill';\n```\n\n----------------------------------------\n\nTITLE: Responsive Image with Inline Styling in JSX\nDESCRIPTION: Example of an image element with inline styling to display a simple list example preview. The code includes comments about why inline styling is used instead of a separate styled component.\nSOURCE: https://github.com/atlassian/pragmatic-drag-and-drop/blob/main/packages/documentation/constellation/00-examples/index.mdx#2025-04-14_snippet_1\n\nLANGUAGE: JSX\nCODE:\n```\n<a\n\thref=\"https://stackblitz.com/github/alexreardon/pdnd-react-tailwind?startScript=dev\"\n\ttarget=\"_blank\"\n>\n\t{/* Using inline styles rather than pulling into a seperate component and using emotion\n\t\tas Gatsby can only load images in `mdx` when they are in the `mdx` document root.*/}\n\t<img\n\t\tsrc=\"/images/pdnd-standalone-simple-example.png\"\n\t\talt=\"Simple list example\"\n\t\tstyle=\"max-width:400px; border:var(--ds-border-width) solid var(--ds-border-discovery); border-radius:var(--ds-border-radius)\"\n\t/>\n</a>\n```\n\n----------------------------------------\n\nTITLE: Edge Type Definition for Closest Edge Addon\nDESCRIPTION: Defines the Edge type which represents the possible edges (top, right, bottom, left) that can be detected when dragging over a target.\nSOURCE: https://github.com/atlassian/pragmatic-drag-and-drop/blob/main/packages/hitbox/constellation/index/about.mdx#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntype Edge = 'top' | 'right' | 'bottom' | 'left';\n```\n\n----------------------------------------\n\nTITLE: Incorrect Usage of Multiple Drop Targets for Same Entity Type\nDESCRIPTION: Shows an incorrect way of creating multiple drop targets for the same entity type on a single element, which will result in a warning.\nSOURCE: https://github.com/atlassian/pragmatic-drag-and-drop/blob/main/packages/documentation/constellation/05-core-package/03-drop-targets/index.mdx#2025-04-14_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// ❌ Using the same element for two drop targets of the same entity type is not allowed\nconst cleanup = combine(\n\tdropTargetForElements({\n\t\telement: myElement,\n\t}),\n\t// ⚠️ A warning will be logged if this is detected\n\tdropTargetForElements({\n\t\telement: myElement,\n\t}),\n);\n```\n\n----------------------------------------\n\nTITLE: Hypothetical Built-in Guard Approach (Not Implemented)\nDESCRIPTION: Shows a conceptual implementation of a built-in guard function that was considered but not implemented. This demonstrates the design thinking behind the library's approach to type safety.\nSOURCE: https://github.com/atlassian/pragmatic-drag-and-drop/blob/main/packages/documentation/constellation/05-core-package/09-recipes/01-typing-data/index.mdx#2025-04-14_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\ntype Card = { cardId: string; instanceId: symbol };\n\ndropTargetForElements<Card>({\n\telement: myElement,\n\t// Note: this is not real API.\n\t// Validate that `data` is the right type\n\tacceptData({ data }): data is Card {\n\t\t// We need to assert that `data` is a `Card`\n\t\treturn isCard(data);\n\t},\n\tcanDrop({ data }) {\n\t\t// let's assume that this is called after `acceptData` and\n\t\t// `data` is now typed. Now we can do our additional checks.\n\t\treturn data.instanceId === ourInstanceId;\n\t},\n\tonDrop({ source }) {\n\t\t// cardId could be typed as `string`\n\t\tconst cardId = source.data.cardId;\n\t},\n});\n```\n\n----------------------------------------\n\nTITLE: Rendering Section Message in JSX\nDESCRIPTION: JSX code for rendering a SectionMessage component with information about package dependencies and React 19 support.\nSOURCE: https://github.com/atlassian/pragmatic-drag-and-drop/blob/main/packages/react-beautiful-dnd-migration/constellation/index/about.mdx#2025-04-14_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<SectionMessage>\n\nThis package depends on:\n\n- [the core package](/components/pragmatic-drag-and-drop/core-package)\n- [the hitbox package](/components/pragmatic-drag-and-drop/optional-packages/hitbox)\n- [the live region package](/components/pragmatic-drag-and-drop/optional-packages/live-region)\n- [the react-beautiful-dnd auto scroll package](/components/pragmatic-drag-and-drop/optional-packages/react-beautiful-dnd-autoscroll)\n- [`react`](https://react.dev/)\n- [`@emotion/react`](https://emotion.sh/docs/introduction) for styling\n- [`@atlaskit/tokens`](/components/tokens) for colors\n\n</SectionMessage>\n\n<SectionMessage title=\"React 19\" appearance='information'>\n\nThis package does not currently support React 19.\n\n</SectionMessage>\n```\n\n----------------------------------------\n\nTITLE: Running Codemod CLI for Migration from react-beautiful-dnd\nDESCRIPTION: This command runs the codemod CLI to migrate from react-beautiful-dnd to @atlaskit/pragmatic-drag-and-drop. It specifies the parser as tsx and sets the file extensions to ts, tsx, and js.\nSOURCE: https://github.com/atlassian/pragmatic-drag-and-drop/blob/main/packages/react-beautiful-dnd-migration/constellation/index/props.mdx#2025-04-14_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx @atlaskit/codemod-cli --parser tsx --extensions ts,tsx,js [relativePath]\n```\n\n----------------------------------------\n\nTITLE: Importing DragEvent Polyfill in TypeScript\nDESCRIPTION: This snippet shows how to import the DragEvent polyfill for use in unit testing environments.\nSOURCE: https://github.com/atlassian/pragmatic-drag-and-drop/blob/main/packages/unit-testing/constellation/index/about.mdx#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport '@atlaskit/pragmatic-drag-and-drop/unit-testing/drag-event-polyfill';\n```\n\n----------------------------------------\n\nTITLE: Importing SectionMessage Component in JSX\nDESCRIPTION: This snippet shows how to import the SectionMessage component from the @atlaskit/section-message package and use it in JSX.\nSOURCE: https://github.com/atlassian/pragmatic-drag-and-drop/blob/main/packages/react-beautiful-dnd-migration/constellation/index/comparison.mdx#2025-04-14_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport SectionMessage from '@atlaskit/section-message';\n\n<SectionMessage>\n\tIf any of these changes are a blocker for you, please reach out to discuss options.\n</SectionMessage>\n```\n\n----------------------------------------\n\nTITLE: Rendering Board Example in JSX for Drag and Drop Showcase\nDESCRIPTION: This snippet renders the BoardExample component with a specific appearance prop, likely to showcase the drag and drop functionality in action.\nSOURCE: https://github.com/atlassian/pragmatic-drag-and-drop/blob/main/packages/documentation/constellation/index/about.mdx#2025-04-14_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<Example Component={BoardExample} appearance=\"showcase-only\" />\n```\n\n----------------------------------------\n\nTITLE: Implementing AutoScroller Configuration in TypeScript\nDESCRIPTION: Example showing how to configure the autoScroller with a specific scroll behavior using the new behavior option.\nSOURCE: https://github.com/atlassian/pragmatic-drag-and-drop/blob/main/packages/react-beautiful-dnd-autoscroll/CHANGELOG.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nautoScroller.start({\n  input: /* ... */,\n  scrollBehavior: 'container-then-window'\n});\n```\n\n----------------------------------------\n\nTITLE: Installing Pragmatic Drag and Drop Migration Package\nDESCRIPTION: Command to install the migration package for Pragmatic Drag and Drop.\nSOURCE: https://github.com/atlassian/pragmatic-drag-and-drop/blob/main/packages/react-beautiful-dnd-migration/constellation/index/about.mdx#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n1. Install `@atlaskit/pragmatic-drag-and-drop-react-beautiful-dnd-migration`\n```\n\n----------------------------------------\n\nTITLE: Rendering Function Parameter Documentation Using JSX\nDESCRIPTION: Uses the FunctionPropsTable component to render documentation for the triggerPostMoveFlash function, specifying that it requires an HTMLElement parameter.\nSOURCE: https://github.com/atlassian/pragmatic-drag-and-drop/blob/main/packages/flourish/constellation/trigger-post-move-flash/props.mdx#2025-04-14_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<FunctionPropsTable\n\tpropName={'element'}\n\tdescription={'The element that has just moved'}\n\ttyping={'HTMLElement'}\n\trequired={true}\n/>\n```\n\n----------------------------------------\n\nTITLE: SectionMessage Component for Accessibility Warning\nDESCRIPTION: A SectionMessage component with warning appearance to caution users about contributed examples from Atlassian and non-Atlassian contributors.\nSOURCE: https://github.com/atlassian/pragmatic-drag-and-drop/blob/main/packages/documentation/constellation/00-examples/index.mdx#2025-04-14_snippet_2\n\nLANGUAGE: JSX\nCODE:\n```\n<SectionMessage appearance=\"warning\">\n\nThese examples have been contributed by a mixture of Atlassian and non-Atlassian contributors.\nPlease use caution when viewing and running these examples.\n\n</SectionMessage>\n```\n\n----------------------------------------\n\nTITLE: Importing SectionMessage Component in JSX\nDESCRIPTION: This snippet imports the SectionMessage component from the @atlaskit/section-message package. It's used to display important information about the use of entry points in the package structure.\nSOURCE: https://github.com/atlassian/pragmatic-drag-and-drop/blob/main/packages/documentation/constellation/06-optional-packages/index.mdx#2025-04-14_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport SectionMessage from '@atlaskit/section-message';\n```\n\n----------------------------------------\n\nTITLE: Removing Unsupported Draggable Props in Diff\nDESCRIPTION: This diff snippet shows the removal of an unsupported prop for the Draggable component in the migration to Pragmatic Drag and Drop.\nSOURCE: https://github.com/atlassian/pragmatic-drag-and-drop/blob/main/packages/react-beautiful-dnd-migration/constellation/index/comparison.mdx#2025-04-14_snippet_3\n\nLANGUAGE: diff\nCODE:\n```\n# The browser now determines when drags should occur.\n- shouldRespectForcePress?: boolean;\n```\n\n----------------------------------------\n\nTITLE: Type Import Example\nDESCRIPTION: Shows how to import all available types from the external adapter package.\nSOURCE: https://github.com/atlassian/pragmatic-drag-and-drop/blob/main/packages/documentation/constellation/05-core-package/00-adapters/02-external/about.mdx#2025-04-14_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nimport type {\n  NativeMediaType,\n  ExternalDragPayload\n  ExternalEventBasePayload\n  ExternalEventPayloadMap,\n  ElementDropTargetEventBasePayload,\n  ExternalDropTargetEventPayloadMap,\n  ExternalDropTargetGetFeedbackArgs,\n  ExternalMonitorGetFeedbackArgs,\n} from '@atlaskit/pragmatic-drag-and-drop/external/adapter';\n```\n\n----------------------------------------\n\nTITLE: Importing Draggable Element Adapter from Pragmatic Drag and Drop\nDESCRIPTION: Example of how to import the draggable adapter from the Pragmatic drag and drop core package. This is a basic usage example showing the import pattern for the library.\nSOURCE: https://github.com/atlassian/pragmatic-drag-and-drop/blob/main/README.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { draggable } from '@atlaskit/pragmatic-drag-and-drop/element/adapter';\n```\n\n----------------------------------------\n\nTITLE: Updating Required Edge Prop Usage in DropIndicator Component\nDESCRIPTION: Demonstrates the change in usage pattern for DropIndicator component where the edge prop is now required instead of optional, improving performance by ensuring the component only renders when needed.\nSOURCE: https://github.com/atlassian/pragmatic-drag-and-drop/blob/main/packages/react-drop-indicator/CHANGELOG.md#2025-04-14_snippet_3\n\nLANGUAGE: diff\nCODE:\n```\n- <DropIndicator edge={closestEdge} />\n+ { closestEdge && <DropIndicator edge={closestEdge} /> }\n```\n\n----------------------------------------\n\nTITLE: Disabling Automatic Prop Extraction - HTML Comment\nDESCRIPTION: An HTML comment directive that explicitly turns off automatic property extraction functionality when there is no content available to extract from the codebase.\nSOURCE: https://github.com/atlassian/pragmatic-drag-and-drop/blob/main/packages/live-region/constellation/index/props.mdx#2025-04-14_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<!-- Turn off automatic prop extraction as there isn't anything to extract. -->\n```\n\n----------------------------------------\n\nTITLE: Updating Overflow Auto-Scroll Configuration\nDESCRIPTION: Demonstrates the changes in overflow auto-scroll configuration with renamed edge properties and object structure\nSOURCE: https://github.com/atlassian/pragmatic-drag-and-drop/blob/main/packages/auto-scroll/CHANGELOG.md#2025-04-14_snippet_1\n\nLANGUAGE: diff\nCODE:\n```\nconst unbind = unsafeOverflowAutoScrollForElements({\n\t\telement,\n\t\tgetOverflow: () => ({\n-\t\t\tfromTopEdge: {\n+\t\t\tforTopEdge: {\n\t\t\t\ttop: 6000,\n\t\t\t\tright: 6000,\n\t\t\t\tleft: 6000,\n\t\t\t},\n-\t\t\tfromRightEdge: {\n+\t\t\tforRightEdge: {\n\t\t\t\ttop: 6000,\n\t\t\t\tright: 6000,\n\t\t\t\tbottom: 6000,\n\t\t\t},\n-\t\t\tfromBottomEdge: {\n+\t\t\tforBottomEdge: {\n\t\t\t\tright: 6000,\n\t\t\t\tbottom: 6000,\n\t\t\t\tleft: 6000,\n\t\t\t},\n-\t\t\tfromLeftEdge: {\n+\t\t\tforLeftEdge: {\n\t\t\t\ttop: 6000,\n\t\t\t\tleft: 6000,\n\t\t\t\tbottom: 6000,\n\t\t\t},\n\t\t}),\n});\n```\n\n----------------------------------------\n\nTITLE: Incorrect Usage: Multiple Drop Targets of Same Type on Same Element\nDESCRIPTION: Shows the incorrect approach of attaching two drop targets of the same entity type to a single element, which will result in a warning being logged.\nSOURCE: https://github.com/atlassian/pragmatic-drag-and-drop/blob/main/packages/documentation/constellation/05-core-package/07-reconciliation/index.mdx#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// ❌ Using the same element for two drop targets of the same entity type is not allowed\nconst cleanup = combine(\n\tdropTargetForElements({\n\t\telement: myElement,\n\t}),\n\t// ⚠️ A warning will be logged if this is detected\n\tdropTargetForElements({\n\t\telement: myElement,\n\t}),\n);\n```\n\n----------------------------------------\n\nTITLE: Time to Interactive Performance Metrics\nDESCRIPTION: Markdown table showing TTI performance comparison between different drag and drop libraries on mobile\nSOURCE: https://github.com/atlassian/pragmatic-drag-and-drop/blob/main/packages/documentation/constellation/index/comparison.mdx#2025-04-14_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n| Case                                             | Result   |\n| ------------------------------------------------ | -------- |\n| Baseline (no drag and drop)                      | `+0ms`   |\n| `react-beautiful-dnd`                            | `+275ms` |\n| `react-dnd`                                      | `+387ms` |\n| `@dnd-kit`                                       | `+131ms` |\n| <ResultText>Pragmatic drag and drop</ResultText> | `+6ms`   |\n```\n\n----------------------------------------\n\nTITLE: Disabling Automatic Prop Extraction in HTML Comment\nDESCRIPTION: This HTML comment is used to instruct developers or build tools to turn off automatic prop extraction for a React component. It's typically used when there are no props to extract from the component.\nSOURCE: https://github.com/atlassian/pragmatic-drag-and-drop/blob/main/packages/unit-testing/constellation/index/props.mdx#2025-04-14_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<!-- Turn off automatic prop extraction as there isn't anything to extract. -->\n```\n\n----------------------------------------\n\nTITLE: Package Upgrade Script\nDESCRIPTION: Bash script for upgrading packages using yarn\nSOURCE: https://github.com/atlassian/pragmatic-drag-and-drop/blob/main/packages/documentation/constellation/05-core-package/12-upgrade-guides/upgrade-guide-0.x-→-1.0.mdx#2025-04-14_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n#!/bin/bash\n\nPACKAGES=(\n  \"@atlaskit/pragmatic-drag-and-drop\"\n  \"@atlaskit/pragmatic-drag-and-drop-auto-scroll\"\n  \"@atlaskit/pragmatic-drag-and-drop-hitbox\"\n  \"@atlaskit/pragmatic-drag-and-drop-live-region\"\n  \"@atlaskit/pragmatic-drag-and-drop-flourish\"\n  \"@atlaskit/pragmatic-drag-and-drop-react-accessibility\"\n  \"@atlaskit/pragmatic-drag-and-drop-react-beautiful-dnd-migration\"\n  \"@atlaskit/pragmatic-drag-and-drop-react-beautiful-dnd-autoscroll\"\n)\nVERSION=\"^1.0.0\"\n\nfor PACKAGE in \"${PACKAGES[@]}\"\ndo\n  if grep -q \"\\\"${PACKAGE}\\\"\" ./package.json; then\n    echo \"${PACKAGE} is installed, upgrading to ${VERSION}...\"\n    yarn upgrade ${PACKAGE}@${VERSION}\n    # for yarn@3, use:\n    # yarn up ${PACKAGE}@${VERSION}\n  else\n    echo \"${PACKAGE} is not installed, skipping upgrade.\"\n  fi\ndone\n```\n\n----------------------------------------\n\nTITLE: Updating Import Path for DropIndicator Component\nDESCRIPTION: Shows the updated import path for the DropIndicator component following package restructuring for better naming consistency.\nSOURCE: https://github.com/atlassian/pragmatic-drag-and-drop/blob/main/packages/react-drop-indicator/CHANGELOG.md#2025-04-14_snippet_4\n\nLANGUAGE: diff\nCODE:\n```\n- import { DropIndicator } from '@atlaskit/drag-and-drop-indicator';\n+ import { DropIndicator } from '@atlaskit/drag-and-drop-indicator/box';\n```\n\n----------------------------------------\n\nTITLE: Configuring Jest with DOMRect Polyfill\nDESCRIPTION: Demonstrates how to set up the DOMRect polyfill in a Jest testing environment using configuration files.\nSOURCE: https://github.com/atlassian/pragmatic-drag-and-drop/blob/main/packages/unit-testing/CHANGELOG.md#2025-04-14_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// jest.config.js\nmodule.exports = {\n\tsetupFiles: ['./test/setup-dom-rect.js'],\n};\n\n// ./test/setup-dom-rect.js\nimport '@atlaskit/pragmatic-drag-and-drop/unit-testing/dom-rect-polyfill';\n```\n\n----------------------------------------\n\nTITLE: Apache License 2.0 URL Reference\nDESCRIPTION: Contains the URL reference to the full Apache License 2.0 text that applies to this software.\nSOURCE: https://github.com/atlassian/pragmatic-drag-and-drop/blob/main/packages/react-drop-indicator/LICENSE.md#2025-04-14_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nhttp://www.apache.org/licenses/LICENSE-2.0\n```\n\n----------------------------------------\n\nTITLE: Updating package names for Pragmatic Drag and Drop\nDESCRIPTION: This snippet shows the renaming of various drag and drop packages to align with the new 'Pragmatic drag and drop' naming convention. It includes changes for core, autoscroll, hitbox, indicator, live region, migration, and documentation packages.\nSOURCE: https://github.com/atlassian/pragmatic-drag-and-drop/blob/main/packages/react-drop-indicator/CHANGELOG.md#2025-04-14_snippet_2\n\nLANGUAGE: diff\nCODE:\n```\n- @atlaskit/drag-and-drop\n+ @atlaskit/pragmatic-drag-and-drop\n\n- @atlaskit/drag-and-drop-autoscroll\n+ @atlaskit/pragmatic-drag-and-drop-autoscroll\n\n- @atlaskit/drag-and-drop-hitbox\n+ @atlaskit/pragmatic-drag-and-drop-hitbox\n\n- @atlaskit/drag-and-drop-indicator\n+ @atlaskit/pragmatic-drag-and-drop-react-indicator\n# Note: `react` was added to this package name as our indicator package is designed for usage with `react`.\n\n- @atlaskit/drag-and-drop-live-region\n+ @atlaskit/pragmatic-drag-and-drop-live-region\n\n- @atlaskit/drag-and-drop-react-beautiful-dnd-migration\n+ @atlaskit/pragmatic-drag-and-drop-react-beautiful-dnd-migration\n\n- @atlaskit/drag-and-drop-docs\n+ @atlaskit/pragmatic-drag-and-drop-docs\n```\n\n----------------------------------------\n\nTITLE: Markdown Documentation Link\nDESCRIPTION: Link references to the react-beautiful-dnd GitHub repository and Pragmatic drag and drop documentation.\nSOURCE: https://github.com/atlassian/pragmatic-drag-and-drop/blob/main/packages/react-beautiful-dnd-migration/README.md#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## Pragmatic drag and drop\n\nAn optional Pragmatic drag and drop package that enables rapid migration from [`react-beautiful-dnd`](https://github.com/atlassian/react-beautiful-dnd) to Pragmatic drag and drop.\n\n[📖 Documentation](https://atlassian.design/components/pragmatic-drag-and-drop/)\n```\n\n----------------------------------------\n\nTITLE: Image Directory Structure Overview\nDESCRIPTION: Illustrates the project's image file organization structure, showing the separation between raw SVG files and processed data URI strings\nSOURCE: https://github.com/atlassian/pragmatic-drag-and-drop/blob/main/packages/documentation/examples/data/people/images/README.md#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n./raw\n./processed\n```\n\n----------------------------------------\n\nTITLE: Renaming Drag and Drop Packages in Diff Format\nDESCRIPTION: This diff shows the renaming of various drag and drop packages to align with the new \"Pragmatic drag and drop\" naming convention. It includes changes for the main package, autoscroll, hitbox, indicator, live region, react-beautiful-dnd migration, and docs packages.\nSOURCE: https://github.com/atlassian/pragmatic-drag-and-drop/blob/main/packages/documentation/CHANGELOG.md#2025-04-14_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\n- @atlaskit/drag-and-drop\n+ @atlaskit/pragmatic-drag-and-drop\n\n- @atlaskit/drag-and-drop-autoscroll\n+ @atlaskit/pragmatic-drag-and-drop-autoscroll\n\n- @atlaskit/drag-and-drop-hitbox\n+ @atlaskit/pragmatic-drag-and-drop-hitbox\n\n- @atlaskit/drag-and-drop-indicator\n+ @atlaskit/pragmatic-drag-and-drop-react-indicator\n# Note: `react` was added to this package name as our indicator package is designed for usage with `react`.\n\n- @atlaskit/drag-and-drop-live-region\n+ @atlaskit/pragmatic-drag-and-drop-live-region\n\n- @atlaskit/drag-and-drop-react-beautiful-dnd-migration\n+ @atlaskit/pragmatic-drag-and-drop-react-beautiful-dnd-migration\n\n- @atlaskit/drag-and-drop-docs\n+ @atlaskit/pragmatic-drag-and-drop-docs\n```\n\n----------------------------------------\n\nTITLE: Changelog Entry Format\nDESCRIPTION: Standard format for documenting version changes, including major, minor and patch changes with pull request references and commit hashes.\nSOURCE: https://github.com/atlassian/pragmatic-drag-and-drop/blob/main/packages/react-beautiful-dnd-migration/CHANGELOG.md#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## 0.17.0\n\n### Minor Changes\n\n- [#37394](https://bitbucket.org/atlassian/atlassian-frontend/pull-requests/37394)\n  [`006a7d12e9a`](https://bitbucket.org/atlassian/atlassian-frontend/commits/006a7d12e9a) - Internal\n  folder name refactor\n```\n\n----------------------------------------\n\nTITLE: Markdown Changelog Entry\nDESCRIPTION: Changelog entries documenting updates to drag handle components including style changes, new small variants, and prop type updates.\nSOURCE: https://github.com/atlassian/pragmatic-drag-and-drop/blob/main/packages/react-accessibility/CHANGELOG.md#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n### Minor Changes\n\n- [#41296](https://bitbucket.org/atlassian/atlassian-frontend/pull-requests/41296)\n  [`3e479ba1a4a`](https://bitbucket.org/atlassian/atlassian-frontend/commits/3e479ba1a4a) - [ux] The\n  drag handle icon now uses the `color.icon.subtle` token.\n- [#41296](https://bitbucket.org/atlassian/atlassian-frontend/pull-requests/41296)\n  [`ac64412c674`](https://bitbucket.org/atlassian/atlassian-frontend/commits/ac64412c674) -\n  Introduced small variants of the drag handle button and drag handle dropdown menu.\n\n  These are intended for existing experiences with little space available to introduce a drag\n  handle. They are not recommended for general use.\n\n  These small variants can be accessed through the `/drag-handle-button-small` and\n  `/drag-handle-dropdown-menu-small` entrypoints.\n\n### Patch Changes\n\n- Updated dependencies\n\n## 0.3.1\n\n### Patch Changes\n\n- Updated dependencies\n\n## 0.3.0\n\n### Minor Changes\n\n- [#38144](https://bitbucket.org/atlassian/atlassian-frontend/pull-requests/38144)\n  [`ee9aa9b7300`](https://bitbucket.org/atlassian/atlassian-frontend/commits/ee9aa9b7300) - [ux] The\n  button now has `display: flex`\n\n## 0.2.0\n\n### Minor Changes\n\n- [#38115](https://bitbucket.org/atlassian/atlassian-frontend/pull-requests/38115)\n  [`ffb3e727aaf`](https://bitbucket.org/atlassian/atlassian-frontend/commits/ffb3e727aaf) - The\n  `type` of the `DragHandleButton` now defaults to `'button'` (instead of `'submit'`)\n- [`9f5b56f5677`](https://bitbucket.org/atlassian/atlassian-frontend/commits/9f5b56f5677) - The\n  `DragHandleButton` props now extend `ButtonHTMLAttributes` (instead of just `HTMLAttributes`)\n```\n\n----------------------------------------\n\nTITLE: SectionMessage and Link for External Iframe Example\nDESCRIPTION: A SectionMessage explaining that an iframe example is hosted on another site due to technical limitations, with a link and image preview of the example.\nSOURCE: https://github.com/atlassian/pragmatic-drag-and-drop/blob/main/packages/documentation/constellation/00-examples/index.mdx#2025-04-14_snippet_8\n\nLANGUAGE: JSX\nCODE:\n```\n<SectionMessage title=\"External example\">\n\n`atlassian.design` currently does not support displaying an example without the page layout, so our\niframe example is hosted on another site.\n\n</SectionMessage>\n<a\n\thref=\"https://atlaskit.atlassian.com/examples.html?groupId=pragmatic-drag-and-drop&packageId=documentation&exampleId=iframe-board&mode=dark\"\n\ttarget=\"_blank\"\n>\n\t{/* Using inline styles rather than pulling into a seperate component and using emotion\n\t\tas Gatsby can only load images in `mdx` when they are in the `mdx` document root.*/}\n\t<img\n\t\tsrc=\"/images/pdnd-iframe-example.png\"\n\t\talt=\"Drag and drop into and out of iframes\"\n\t\tstyle=\"max-width:400px; border:var(--ds-border-width) solid var(--ds-border-discovery); border-radius:var(--ds-border-radius)\"\n\t/>\n</a>\n```\n\n----------------------------------------\n\nTITLE: Changelog Entry - Package Naming Updates\nDESCRIPTION: Documents the renaming of drag and drop package paths to improve naming consistency in pull request #24613.\nSOURCE: https://github.com/atlassian/pragmatic-drag-and-drop/blob/main/packages/hitbox/CHANGELOG.md#2025-04-14_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n[#24613](https://bitbucket.org/atlassian/atlassian-frontend/pull-requests/24613) [`dcebdf9404e`](https://bitbucket.org/atlassian/atlassian-frontend/commits/dcebdf9404e) - We have improved our naming consistency across our drag and drop packages.\n\n  - `@atlaskit/drag-and-drop-hitbox/closest-edge` has been renamed to `@atlaskit/drag-and-drop-hitbox/addon/closest-edge`\n  - `@atlaskit/drag-and-drop-hitbox/reorder-with-edge` has been renamed to `@atlaskit/drag-and-drop-hitbox/util/reorder-with-edge`\n```\n\n----------------------------------------\n\nTITLE: Markdown Frontmatter Configuration\nDESCRIPTION: YAML frontmatter configuration for the documentation page, setting the order, title, and description of the Flourish package documentation.\nSOURCE: https://github.com/atlassian/pragmatic-drag-and-drop/blob/main/packages/flourish/constellation/index/about.mdx#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\norder: 0\ntitle: Flourish\ndescription: An optional package for adding visual flourish to drag and drop experiences\n---\n```\n\n----------------------------------------\n\nTITLE: Changelog Entry - TypeScript Version Upgrade\nDESCRIPTION: Documents the upgrade of TypeScript from version 4.3.5 to 4.5.5 in pull request #24874.\nSOURCE: https://github.com/atlassian/pragmatic-drag-and-drop/blob/main/packages/hitbox/CHANGELOG.md#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[#24874](https://bitbucket.org/atlassian/atlassian-frontend/pull-requests/24874) [`8cc2f888c83`](https://bitbucket.org/atlassian/atlassian-frontend/commits/8cc2f888c83) - Upgrade Typescript from `4.3.5` to `4.5.5`\n```\n\n----------------------------------------\n\nTITLE: YAML Front Matter Configuration\nDESCRIPTION: YAML front matter that configures the page order to be 1 in the documentation hierarchy.\nSOURCE: https://github.com/atlassian/pragmatic-drag-and-drop/blob/main/packages/hitbox/constellation/index/props.mdx#2025-04-14_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\norder: 1\n---\n```\n\n----------------------------------------\n\nTITLE: Adding Package.json Author and License Fields\nDESCRIPTION: Demonstrates the addition of author and license fields to package.json for Pragmatic drag and drop packages.\nSOURCE: https://github.com/atlassian/pragmatic-drag-and-drop/blob/main/packages/live-region/CHANGELOG.md#2025-04-14_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n\"author\": \"Atlassian Pty Ltd\",\n\"license\": \"Apache-2.0\"\n```\n\n----------------------------------------\n\nTITLE: Setting Documentation Order in YAML Frontmatter\nDESCRIPTION: YAML frontmatter block that specifies the ordering of documentation pages by setting the order value to 1.\nSOURCE: https://github.com/atlassian/pragmatic-drag-and-drop/blob/main/packages/react-drop-indicator/constellation/index/props.mdx#2025-04-14_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\norder: 1\n```\n\n----------------------------------------\n\nTITLE: Importing Props Table Component for Function Documentation\nDESCRIPTION: Imports a FunctionPropsTable component from a constellation example directory to display the function's parameters.\nSOURCE: https://github.com/atlassian/pragmatic-drag-and-drop/blob/main/packages/flourish/constellation/trigger-post-move-flash/props.mdx#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport FunctionPropsTable from '../../examples/constellation/props-table';\n```\n\n----------------------------------------\n\nTITLE: Removing Unsupported Droppable Props in Diff\nDESCRIPTION: This diff snippet illustrates the removal of unsupported props for the Droppable component when migrating to Pragmatic Drag and Drop.\nSOURCE: https://github.com/atlassian/pragmatic-drag-and-drop/blob/main/packages/react-beautiful-dnd-migration/constellation/index/comparison.mdx#2025-04-14_snippet_2\n\nLANGUAGE: diff\nCODE:\n```\n# Combining items is not supported.\n- isCombineEnabled?: boolean;\n\n# The browser now determines all hit targets.\n- ignoreContainerClipping?: boolean;\n```\n\n----------------------------------------\n\nTITLE: Defining Base Event Payload Types in TypeScript for Drag and Drop\nDESCRIPTION: This snippet defines the base types for event payloads in drag and drop operations. It includes types for the base payload, drag payload, and a map of all element events.\nSOURCE: https://github.com/atlassian/pragmatic-drag-and-drop/blob/main/packages/documentation/constellation/05-core-package/00-adapters/00-element/about.mdx#2025-04-14_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\ntype ElementEventBasePayload = {\n\tlocation: DragLocationHistory;\n\tsource: ElementDragPayload;\n};\n\ntype ElementDragPayload = {\n\telement: HTMLElement;\n\tdragHandle: Element | null;\n\tdata: Record<string, unknown>;\n};\n\ntype ElementEventPayloadMap = {\n\tonDragStart: ElementEventBasePayload;\n\t// .. the rest of the events\n};\n```\n\n----------------------------------------\n\nTITLE: Using SectionMessage Component with React\nDESCRIPTION: Demonstrates how to use the SectionMessage component to display a warning about using native button elements instead of @atlaskit/button to ensure proper drag operations.\nSOURCE: https://github.com/atlassian/pragmatic-drag-and-drop/blob/main/packages/react-accessibility/constellation/drag-handle-button/about.mdx#2025-04-14_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<SectionMessage appearance=\"warning\">\n\tThis component does not use the <Code>@atlaskit/button</Code> component, because{' '}\n\t<Code>@atlaskit/button</Code> cancels <Code>mousedown</Code> events and prevents dragging from\n\toccurring. Instead this component uses a native <Code>&lt;button&gt;</Code> element.\n</SectionMessage>\n```\n\n----------------------------------------\n\nTITLE: External Data Configuration\nDESCRIPTION: Example demonstrating how to configure external data for drag operations, including task details and URL formatting.\nSOURCE: https://github.com/atlassian/pragmatic-drag-and-drop/blob/main/packages/documentation/constellation/05-core-package/00-adapters/00-element/about.mdx#2025-04-14_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { formatURLsForExternal } from '@atlaskit/pragmatic-drag-and-drop/element/format-urls-for-external';\n\ndraggable({\n\telement: myElement,\n\tgetInitialData: () => ({ taskId: task.id }),\n\tgetInitialDataForExternal: () => ({\n\t\t'text/plain': task.description,\n\t\t'text/uri-list': formatURLsForExternal([task.url, task.anotherUrl]),\n\t}),\n});\n```\n\n----------------------------------------\n\nTITLE: Drop Target Implementation\nDESCRIPTION: Example showing how to implement a drop target for elements with basic event handling.\nSOURCE: https://github.com/atlassian/pragmatic-drag-and-drop/blob/main/packages/documentation/constellation/05-core-package/00-adapters/00-element/about.mdx#2025-04-14_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { dropTargetForElements } from '@atlaskit/pragmatic-drag-and-drop/element/adapter';\n\nconst cleanup = dropTargetForElements({\n  element: myElement,\n  onDragStart: () => console.log('Something started dragging in me!');\n});\n```\n\n----------------------------------------\n\nTITLE: Rendering Drag Handle with Dropdown Menu Example\nDESCRIPTION: Shows how to render an example where the Drag Handle Button is composed with a Dropdown Menu component, requiring ref merging for proper drag handle functionality.\nSOURCE: https://github.com/atlassian/pragmatic-drag-and-drop/blob/main/packages/react-accessibility/constellation/drag-handle-button/about.mdx#2025-04-14_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\n<Example Component={DragHandleDropdownMenuExample} />\n```\n\n----------------------------------------\n\nTITLE: Internal Exports Notice - Markdown\nDESCRIPTION: A comment indicating that the current exports are internal and will likely be made public in a future pull request.\nSOURCE: https://github.com/atlassian/pragmatic-drag-and-drop/blob/main/packages/react-drop-indicator/src/internal/README.md#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Internal for now\\n\\nThese exports will likely become public in a future pull request\n```\n\n----------------------------------------\n\nTITLE: Apache License HTTP Reference\nDESCRIPTION: Reference URL to the full Apache License 2.0 text\nSOURCE: https://github.com/atlassian/pragmatic-drag-and-drop/blob/main/packages/react-beautiful-dnd-migration/LICENSE.md#2025-04-14_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nhttp://www.apache.org/licenses/LICENSE-2.0\n```\n\n----------------------------------------\n\nTITLE: Apache License URL Reference\nDESCRIPTION: URL reference to the full Apache License 2.0 text\nSOURCE: https://github.com/atlassian/pragmatic-drag-and-drop/blob/main/packages/documentation/LICENSE.md#2025-04-14_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nhttp://www.apache.org/licenses/LICENSE-2.0\n```\n\n----------------------------------------\n\nTITLE: Apache License URL Reference\nDESCRIPTION: URL reference to the full Apache License 2.0 text\nSOURCE: https://github.com/atlassian/pragmatic-drag-and-drop/blob/main/packages/auto-scroll/LICENSE.md#2025-04-14_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nhttp://www.apache.org/licenses/LICENSE-2.0\n```"
  }
]