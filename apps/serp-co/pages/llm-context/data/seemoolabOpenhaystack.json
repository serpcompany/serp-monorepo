[
  {
    "owner": "seemoo-lab",
    "repo": "openhaystack",
    "content": "TITLE: Deploying OpenHaystack Firmware to ESP32 Device\nDESCRIPTION: Shell command to flash the OpenHaystack firmware to an ESP32 device using the provided script. This deploys the firmware along with a Base64-encoded advertisement key to the specified serial port.\nSOURCE: https://github.com/seemoo-lab/openhaystack/blob/main/Firmware/ESP32/README.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n./flash_esp32.sh -p /dev/yourSerialPort \"Base64-encoded advertisement key\"\n```\n\n----------------------------------------\n\nTITLE: Running OpenHaystack BLE Advertisement Script on Linux\nDESCRIPTION: This command executes the Python script that configures Bluetooth Low Energy advertising for Apple's Find My network. It requires root privileges and takes an advertisement key copied from the OpenHaystack app as input.\nSOURCE: https://github.com/seemoo-lab/openhaystack/blob/main/Firmware/Linux_HCI/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsudo python3 HCI.py --key <ADVERTISMENT_KEY>\n```\n\n----------------------------------------\n\nTITLE: Building ESP32 OpenHaystack Firmware using ESP-IDF\nDESCRIPTION: Command to build the OpenHaystack firmware using the Espressif IoT Development Framework. This builds the bootloader, partition table, and main application binary files required for flashing.\nSOURCE: https://github.com/seemoo-lab/openhaystack/blob/main/Firmware/ESP32/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nidf.py build\n```\n\n----------------------------------------\n\nTITLE: Deploying Firmware to nRF Device\nDESCRIPTION: Command to deploy the compiled firmware image to a connected nRF device (tested with BBC micro:bit V1). The DEPLOY_PATH parameter specifies the mounted device location.\nSOURCE: https://github.com/seemoo-lab/openhaystack/blob/main/Firmware/Microbit_v1/README.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nmake install DEPLOY_PATH=/Volumes/MICROBIT\n```\n\n----------------------------------------\n\nTITLE: Building OpenHaystack Firmware\nDESCRIPTION: Command to build the OpenHaystack firmware from the main directory. This process downloads dependencies and creates a deploy-ready binary at 'offline-finding/build/offline-finding.bin'.\nSOURCE: https://github.com/seemoo-lab/openhaystack/blob/main/Firmware/Microbit_v1/README.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmake\n```\n\n----------------------------------------\n\nTITLE: Supported Platform Matrix Table in Markdown\nDESCRIPTION: A markdown table showing supported hardware platforms, tested devices, deployment capabilities, and additional notes for OpenHaystack firmware deployment.\nSOURCE: https://github.com/seemoo-lab/openhaystack/blob/main/README.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Platform | Tested on | Deploy via app | Comment |\n|----------|-----------|:--------------:|---------|\n| [Nordic nRF51](Firmware/Microbit_v1) | BBC micro:bit v1 | ✓ | Only supports nRF51822 at this time (see issue #6). |\n| [Espressif ESP32](Firmware/ESP32) | SP32-WROOM, ESP32-WROVER | ✓ | Deployment can take up to 3 minutes. Requires Python 3. Thanks **@fhessel**. |\n| [Linux HCI](Firmware/Linux_HCI) | Raspberry Pi 4 w/ Raspbian | | Should support any Linux machine. |\n```\n\n----------------------------------------\n\nTITLE: Configuring Proxy Server URL in OpenHaystack Mobile\nDESCRIPTION: Location in the codebase where users need to configure the URL of their proxy server to access the Find My network data. The proxy server is required since smartphones cannot directly fetch location reports.\nSOURCE: https://github.com/seemoo-lab/openhaystack/blob/main/README.md#2025-04-23_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nopenhaystack-mobile/lib/findMy/reports_fetcher.dart\n```\n\n----------------------------------------\n\nTITLE: Installing GNU Arm Embedded Toolchain via Homebrew\nDESCRIPTION: Command to install the required GNU Arm Embedded Toolchain using Homebrew package manager on macOS. This toolchain is necessary for building the firmware.\nSOURCE: https://github.com/seemoo-lab/openhaystack/blob/main/Firmware/Microbit_v1/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nbrew install --cask gcc-arm-embedded\n```\n\n----------------------------------------\n\nTITLE: Building Distributable App Package\nDESCRIPTION: Command to build a distributable application package for iOS, Android, or web platforms. The resulting artifacts will be placed in the 'build' folder.\nSOURCE: https://github.com/seemoo-lab/openhaystack/blob/main/openhaystack-mobile/README.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ flutter build [ios|apk|web]\n```\n\n----------------------------------------\n\nTITLE: Running Flutter Debug Version\nDESCRIPTION: Command to run the debug version of the Flutter app on a supported emulator. This is used during development for testing and debugging.\nSOURCE: https://github.com/seemoo-lab/openhaystack/blob/main/openhaystack-mobile/README.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ flutter run\n```\n\n----------------------------------------\n\nTITLE: Installing Flutter Dependencies\nDESCRIPTION: Command to install necessary Flutter dependencies for the project. This should be run before starting development.\nSOURCE: https://github.com/seemoo-lab/openhaystack/blob/main/openhaystack-mobile/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ flutter pub get\n```\n\n----------------------------------------\n\nTITLE: Generating App Icons\nDESCRIPTION: Command to generate application icons for different platforms. This should be run before building the project for the first time.\nSOURCE: https://github.com/seemoo-lab/openhaystack/blob/main/openhaystack-mobile/README.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ flutter pub run flutter_launcher_icons:main\n```\n\n----------------------------------------\n\nTITLE: Registering OpenHaystack Component for ESP-IDF\nDESCRIPTION: Registers a component named 'openhaystack' in the ESP-IDF build system with the main source file and the current directory as an include path. This is a standard ESP-IDF component registration command used to define build parameters.\nSOURCE: https://github.com/seemoo-lab/openhaystack/blob/main/Firmware/ESP32/main/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nidf_component_register(SRCS \"openhaystack_main.c\"\n                           \n                    INCLUDE_DIRS \".\")\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake for OpenHaystack ESP32 Project\nDESCRIPTION: Basic CMake configuration that specifies minimum CMake version, sets ESP32 as the supported target, includes the ESP-IDF project tools, and defines the project name as 'openhaystack'.\nSOURCE: https://github.com/seemoo-lab/openhaystack/blob/main/Firmware/ESP32/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\n# The following lines of boilerplate have to be in your project's CMakeLists\n# in this exact order for cmake to work correctly\ncmake_minimum_required(VERSION 3.5)\n\nset(SUPPORTED_TARGETS esp32)\ninclude($ENV{IDF_PATH}/tools/cmake/project.cmake)\nproject(openhaystack)\n```\n\n----------------------------------------\n\nTITLE: Disabling Security Features in macOS Terminal\nDESCRIPTION: Shell commands to disable System Integrity Protection (SIP) and Apple Mobile File Integrity (AMFI) in macOS recovery mode, required for running the proof-of-concept attack implementation.\nSOURCE: https://github.com/seemoo-lab/openhaystack/blob/main/README.Reproducibility.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncsrutil disable\n```\n\nLANGUAGE: shell\nCODE:\n```\nnvram boot-args=\"amfi_get_out_of_my_way=0x1\"\n```\n\n----------------------------------------\n\nTITLE: Application Build Configuration in CMake\nDESCRIPTION: Configures the main application build including source files, dependencies, and output settings.\nSOURCE: https://github.com/seemoo-lab/openhaystack/blob/main/openhaystack-mobile/linux/CMakeLists.txt#2025-04-23_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nadd_executable(${BINARY_NAME}\n  \"main.cc\"\n  \"my_application.cc\"\n  \"${FLUTTER_MANAGED_DIR}/generated_plugin_registrant.cc\"\n)\napply_standard_settings(${BINARY_NAME})\ntarget_link_libraries(${BINARY_NAME} PRIVATE flutter)\ntarget_link_libraries(${BINARY_NAME} PRIVATE PkgConfig::GTK)\nadd_dependencies(${BINARY_NAME} flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Standard Compilation Settings Function in CMake\nDESCRIPTION: Defines a function to apply standard compilation settings to targets, including C++17 standard and compiler options.\nSOURCE: https://github.com/seemoo-lab/openhaystack/blob/main/openhaystack-mobile/windows/CMakeLists.txt#2025-04-23_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nfunction(APPLY_STANDARD_SETTINGS TARGET)\n  target_compile_features(${TARGET} PUBLIC cxx_std_17)\n  target_compile_options(${TARGET} PRIVATE /W4 /WX /wd\"4100\")\n  target_compile_options(${TARGET} PRIVATE /EHsc)\n  target_compile_definitions(${TARGET} PRIVATE \"_HAS_EXCEPTIONS=0\")\n  target_compile_definitions(${TARGET} PRIVATE \"$<$<CONFIG:Debug>:_DEBUG>\")\nendfunction()\n```\n\n----------------------------------------\n\nTITLE: Configuring Windows Runner Executable in CMake for Flutter Application\nDESCRIPTION: Sets up the build configuration for a Flutter application's Windows runner executable. It specifies the minimum CMake version, project name, source files, links required libraries, and sets compilation options.\nSOURCE: https://github.com/seemoo-lab/openhaystack/blob/main/openhaystack-mobile/windows/runner/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.15)\nproject(runner LANGUAGES CXX)\n\nadd_executable(${BINARY_NAME} WIN32\n  \"flutter_window.cpp\"\n  \"main.cpp\"\n  \"utils.cpp\"\n  \"win32_window.cpp\"\n  \"${FLUTTER_MANAGED_DIR}/generated_plugin_registrant.cc\"\n  \"Runner.rc\"\n  \"runner.exe.manifest\"\n)\napply_standard_settings(${BINARY_NAME})\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"NOMINMAX\")\ntarget_link_libraries(${BINARY_NAME} PRIVATE flutter flutter_wrapper_app)\ntarget_include_directories(${BINARY_NAME} PRIVATE \"${CMAKE_SOURCE_DIR}\")\nadd_dependencies(${BINARY_NAME} flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Build Configuration Settings in CMake\nDESCRIPTION: Configures build types (Debug/Profile/Release) and sets corresponding compiler flags and options.\nSOURCE: https://github.com/seemoo-lab/openhaystack/blob/main/openhaystack-mobile/windows/CMakeLists.txt#2025-04-23_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nget_property(IS_MULTICONFIG GLOBAL PROPERTY GENERATOR_IS_MULTI_CONFIG)\nif(IS_MULTICONFIG)\n  set(CMAKE_CONFIGURATION_TYPES \"Debug;Profile;Release\"\n    CACHE STRING \"\" FORCE)\nelse()\n  if(NOT CMAKE_BUILD_TYPE AND NOT CMAKE_CONFIGURATION_TYPES)\n    set(CMAKE_BUILD_TYPE \"Debug\" CACHE\n      STRING \"Flutter build mode\" FORCE)\n    set_property(CACHE CMAKE_BUILD_TYPE PROPERTY STRINGS\n      \"Debug\" \"Profile\" \"Release\")\n  endif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Basic Project Configuration in CMake\nDESCRIPTION: Sets up initial project configuration including minimum CMake version, project name, binary name and application ID.\nSOURCE: https://github.com/seemoo-lab/openhaystack/blob/main/openhaystack-mobile/linux/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.10)\nproject(runner LANGUAGES CXX)\n\nset(BINARY_NAME \"openhaystack_mobile\")\nset(APPLICATION_ID \"de.seemoo.linux.openhaystack\")\n\ncmake_policy(SET CMP0063 NEW)\n\nset(CMAKE_INSTALL_RPATH \"$ORIGIN/lib\")\n```\n\n----------------------------------------\n\nTITLE: Basic Project Configuration in CMake\nDESCRIPTION: Sets up the initial CMake project configuration including minimum version, project name, and basic build settings.\nSOURCE: https://github.com/seemoo-lab/openhaystack/blob/main/openhaystack-mobile/windows/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.15)\nproject(openhaystack_mobile LANGUAGES CXX)\n\nset(BINARY_NAME \"openhaystack_mobile\")\n\ncmake_policy(SET CMP0063 NEW)\n\nset(CMAKE_INSTALL_RPATH \"$ORIGIN/lib\")\n```\n\n----------------------------------------\n\nTITLE: Configuring Flutter Tool Backend Integration in CMake\nDESCRIPTION: Sets up a custom command to run the Flutter tool backend for generating necessary files. It creates a phony target to ensure the command runs every build, and defines a custom target 'flutter_assemble' that depends on all generated files.\nSOURCE: https://github.com/seemoo-lab/openhaystack/blob/main/openhaystack-mobile/windows/flutter/CMakeLists.txt#2025-04-23_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nset(PHONY_OUTPUT \"${CMAKE_CURRENT_BINARY_DIR}/_phony_\")\nset_source_files_properties(\"${PHONY_OUTPUT}\" PROPERTIES SYMBOLIC TRUE)\nadd_custom_command(\n  OUTPUT ${FLUTTER_LIBRARY} ${FLUTTER_LIBRARY_HEADERS}\n    ${CPP_WRAPPER_SOURCES_CORE} ${CPP_WRAPPER_SOURCES_PLUGIN}\n    ${CPP_WRAPPER_SOURCES_APP}\n    ${PHONY_OUTPUT}\n  COMMAND ${CMAKE_COMMAND} -E env\n    ${FLUTTER_TOOL_ENVIRONMENT}\n    \"${FLUTTER_ROOT}/packages/flutter_tools/bin/tool_backend.bat\"\n      windows-x64 $<CONFIG>\n  VERBATIM\n)\nadd_custom_target(flutter_assemble DEPENDS\n  \"${FLUTTER_LIBRARY}\"\n  ${FLUTTER_LIBRARY_HEADERS}\n  ${CPP_WRAPPER_SOURCES_CORE}\n  ${CPP_WRAPPER_SOURCES_PLUGIN}\n  ${CPP_WRAPPER_SOURCES_APP}\n)\n```\n\n----------------------------------------\n\nTITLE: Installation Configuration in CMake\nDESCRIPTION: Sets up installation rules for the application, including copying runtime files, Flutter assets, and AOT library to the appropriate directories.\nSOURCE: https://github.com/seemoo-lab/openhaystack/blob/main/openhaystack-mobile/windows/CMakeLists.txt#2025-04-23_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nset(BUILD_BUNDLE_DIR \"$<TARGET_FILE_DIR:${BINARY_NAME}>\")\nset(CMAKE_VS_INCLUDE_INSTALL_TO_DEFAULT_BUILD 1)\nif(CMAKE_INSTALL_PREFIX_INITIALIZED_TO_DEFAULT)\n  set(CMAKE_INSTALL_PREFIX \"${BUILD_BUNDLE_DIR}\" CACHE PATH \"...\" FORCE)\nendif()\n\nset(INSTALL_BUNDLE_DATA_DIR \"${CMAKE_INSTALL_PREFIX}/data\")\nset(INSTALL_BUNDLE_LIB_DIR \"${CMAKE_INSTALL_PREFIX}\")\n\ninstall(TARGETS ${BINARY_NAME} RUNTIME DESTINATION \"${CMAKE_INSTALL_PREFIX}\"\n  COMPONENT Runtime)\n\ninstall(FILES \"${FLUTTER_ICU_DATA_FILE}\" DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\"\n  COMPONENT Runtime)\n\ninstall(FILES \"${FLUTTER_LIBRARY}\" DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n  COMPONENT Runtime)\n```\n\n----------------------------------------\n\nTITLE: Creating Flutter Wrapper Libraries in CMake for Plugins and App\nDESCRIPTION: Defines and configures two static libraries: flutter_wrapper_plugin for plugin support and flutter_wrapper_app for the main application. These libraries include core implementations and specific functionalities for plugins and the app runner.\nSOURCE: https://github.com/seemoo-lab/openhaystack/blob/main/openhaystack-mobile/windows/flutter/CMakeLists.txt#2025-04-23_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\n# Wrapper sources needed for a plugin.\nadd_library(flutter_wrapper_plugin STATIC\n  ${CPP_WRAPPER_SOURCES_CORE}\n  ${CPP_WRAPPER_SOURCES_PLUGIN}\n)\napply_standard_settings(flutter_wrapper_plugin)\nset_target_properties(flutter_wrapper_plugin PROPERTIES\n  POSITION_INDEPENDENT_CODE ON)\nset_target_properties(flutter_wrapper_plugin PROPERTIES\n  CXX_VISIBILITY_PRESET hidden)\ntarget_link_libraries(flutter_wrapper_plugin PUBLIC flutter)\ntarget_include_directories(flutter_wrapper_plugin PUBLIC\n  \"${WRAPPER_ROOT}/include\"\n)\nadd_dependencies(flutter_wrapper_plugin flutter_assemble)\n\n# Wrapper sources needed for the runner.\nadd_library(flutter_wrapper_app STATIC\n  ${CPP_WRAPPER_SOURCES_CORE}\n  ${CPP_WRAPPER_SOURCES_APP}\n)\napply_standard_settings(flutter_wrapper_app)\ntarget_link_libraries(flutter_wrapper_app PUBLIC flutter)\ntarget_include_directories(flutter_wrapper_app PUBLIC\n  \"${WRAPPER_ROOT}/include\"\n)\nadd_dependencies(flutter_wrapper_app flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Configuring Flutter Library and Headers in CMake for Windows\nDESCRIPTION: Sets up the Flutter library and its headers for use in a Windows project. It defines the paths to the Flutter DLL and ICU data file, and creates an interface library target for Flutter.\nSOURCE: https://github.com/seemoo-lab/openhaystack/blob/main/openhaystack-mobile/windows/flutter/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(FLUTTER_LIBRARY \"${EPHEMERAL_DIR}/flutter_windows.dll\")\n\n# Published to parent scope for install step.\nset(FLUTTER_LIBRARY ${FLUTTER_LIBRARY} PARENT_SCOPE)\nset(FLUTTER_ICU_DATA_FILE \"${EPHEMERAL_DIR}/icudtl.dat\" PARENT_SCOPE)\nset(PROJECT_BUILD_DIR \"${PROJECT_DIR}/build/\" PARENT_SCOPE)\nset(AOT_LIBRARY \"${PROJECT_DIR}/build/windows/app.so\" PARENT_SCOPE)\n\nlist(APPEND FLUTTER_LIBRARY_HEADERS\n  \"flutter_export.h\"\n  \"flutter_windows.h\"\n  \"flutter_messenger.h\"\n  \"flutter_plugin_registrar.h\"\n  \"flutter_texture_registrar.h\"\n)\nlist(TRANSFORM FLUTTER_LIBRARY_HEADERS PREPEND \"${EPHEMERAL_DIR}/\")\nadd_library(flutter INTERFACE)\ntarget_include_directories(flutter INTERFACE\n  \"${EPHEMERAL_DIR}\"\n)\ntarget_link_libraries(flutter INTERFACE \"${FLUTTER_LIBRARY}.lib\")\nadd_dependencies(flutter flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Setting up Flutter tool backend build process\nDESCRIPTION: Configures a custom command and target to run the Flutter tool backend for building the Flutter library and headers. This ensures the Flutter artifacts are properly generated before being used.\nSOURCE: https://github.com/seemoo-lab/openhaystack/blob/main/openhaystack-mobile/linux/flutter/CMakeLists.txt#2025-04-23_snippet_6\n\nLANGUAGE: CMake\nCODE:\n```\n# === Flutter tool backend ===\n# _phony_ is a non-existent file to force this command to run every time,\n# since currently there's no way to get a full input/output list from the\n# flutter tool.\nadd_custom_command(\n  OUTPUT ${FLUTTER_LIBRARY} ${FLUTTER_LIBRARY_HEADERS}\n    ${CMAKE_CURRENT_BINARY_DIR}/_phony_\n  COMMAND ${CMAKE_COMMAND} -E env\n    ${FLUTTER_TOOL_ENVIRONMENT}\n    \"${FLUTTER_ROOT}/packages/flutter_tools/bin/tool_backend.sh\"\n      ${FLUTTER_TARGET_PLATFORM} ${CMAKE_BUILD_TYPE}\n  VERBATIM\n)\nadd_custom_target(flutter_assemble DEPENDS\n  \"${FLUTTER_LIBRARY}\"\n  ${FLUTTER_LIBRARY_HEADERS}\n)\n```\n\n----------------------------------------\n\nTITLE: Defining the Flutter interface library\nDESCRIPTION: Creates an interface library for Flutter with the required include directories and link libraries. This sets up the Flutter library for use by other targets in the project.\nSOURCE: https://github.com/seemoo-lab/openhaystack/blob/main/openhaystack-mobile/linux/flutter/CMakeLists.txt#2025-04-23_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library(flutter INTERFACE)\ntarget_include_directories(flutter INTERFACE\n  \"${EPHEMERAL_DIR}\"\n)\ntarget_link_libraries(flutter INTERFACE \"${FLUTTER_LIBRARY}\")\ntarget_link_libraries(flutter INTERFACE\n  PkgConfig::GTK\n  PkgConfig::GLIB\n  PkgConfig::GIO\n)\nadd_dependencies(flutter flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Configuring Flutter Linux library headers\nDESCRIPTION: Creates a list of Flutter Linux header files and prepends the ephemeral directory path to each. This prepares the headers for inclusion in the build process.\nSOURCE: https://github.com/seemoo-lab/openhaystack/blob/main/openhaystack-mobile/linux/flutter/CMakeLists.txt#2025-04-23_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nlist(APPEND FLUTTER_LIBRARY_HEADERS\n  \"fl_basic_message_channel.h\"\n  \"fl_binary_codec.h\"\n  \"fl_binary_messenger.h\"\n  \"fl_dart_project.h\"\n  \"fl_engine.h\"\n  \"fl_json_message_codec.h\"\n  \"fl_json_method_codec.h\"\n  \"fl_message_codec.h\"\n  \"fl_method_call.h\"\n  \"fl_method_channel.h\"\n  \"fl_method_codec.h\"\n  \"fl_method_response.h\"\n  \"fl_plugin_registrar.h\"\n  \"fl_plugin_registry.h\"\n  \"fl_standard_message_codec.h\"\n  \"fl_standard_method_codec.h\"\n  \"fl_string_codec.h\"\n  \"fl_value.h\"\n  \"fl_view.h\"\n  \"flutter_linux.h\"\n)\nlist_prepend(FLUTTER_LIBRARY_HEADERS \"${EPHEMERAL_DIR}/flutter_linux/\")\n```\n\n----------------------------------------\n\nTITLE: Publishing Flutter variables to parent scope\nDESCRIPTION: Sets important Flutter-related variables in the parent scope for use in installation steps and other CMake files.\nSOURCE: https://github.com/seemoo-lab/openhaystack/blob/main/openhaystack-mobile/linux/flutter/CMakeLists.txt#2025-04-23_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\n# Published to parent scope for install step.\nset(FLUTTER_LIBRARY ${FLUTTER_LIBRARY} PARENT_SCOPE)\nset(FLUTTER_ICU_DATA_FILE \"${EPHEMERAL_DIR}/icudtl.dat\" PARENT_SCOPE)\nset(PROJECT_BUILD_DIR \"${PROJECT_DIR}/build/\" PARENT_SCOPE)\nset(AOT_LIBRARY \"${PROJECT_DIR}/build/lib/libapp.so\" PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Setting up system-level dependencies for Flutter Linux\nDESCRIPTION: Configures the required system-level dependencies for Flutter on Linux using pkg-config, specifically GTK, GLIB, and GIO packages.\nSOURCE: https://github.com/seemoo-lab/openhaystack/blob/main/openhaystack-mobile/linux/flutter/CMakeLists.txt#2025-04-23_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\n# === Flutter Library ===\n# System-level dependencies.\nfind_package(PkgConfig REQUIRED)\npkg_check_modules(GTK REQUIRED IMPORTED_TARGET gtk+-3.0)\npkg_check_modules(GLIB REQUIRED IMPORTED_TARGET glib-2.0)\npkg_check_modules(GIO REQUIRED IMPORTED_TARGET gio-2.0)\n\nset(FLUTTER_LIBRARY \"${EPHEMERAL_DIR}/libflutter_linux_gtk.so\")\n```\n\n----------------------------------------\n\nTITLE: Defining list prepend helper function in CMake\nDESCRIPTION: Defines a custom function to prepend elements in a list with a specified prefix. This function serves the same purpose as list(TRANSFORM ... PREPEND ...) which isn't available in CMake 3.10.\nSOURCE: https://github.com/seemoo-lab/openhaystack/blob/main/openhaystack-mobile/linux/flutter/CMakeLists.txt#2025-04-23_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\n# Serves the same purpose as list(TRANSFORM ... PREPEND ...),\n# which isn't available in 3.10.\nfunction(list_prepend LIST_NAME PREFIX)\n    set(NEW_LIST \"\")\n    foreach(element ${${LIST_NAME}})\n        list(APPEND NEW_LIST \"${PREFIX}${element}\")\n    endforeach(element)\n    set(${LIST_NAME} \"${NEW_LIST}\" PARENT_SCOPE)\nendfunction()\n```\n\n----------------------------------------\n\nTITLE: Setting up CMake configuration for Flutter Linux application\nDESCRIPTION: Sets the minimum CMake version required and includes the Flutter-generated configuration. This establishes the basic project setup for a Flutter Linux application.\nSOURCE: https://github.com/seemoo-lab/openhaystack/blob/main/openhaystack-mobile/linux/flutter/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.10)\n\nset(EPHEMERAL_DIR \"${CMAKE_CURRENT_SOURCE_DIR}/ephemeral\")\n\n# Configuration provided via flutter tool.\ninclude(${EPHEMERAL_DIR}/generated_config.cmake)\n```\n\n----------------------------------------\n\nTITLE: Installation Rules Configuration in CMake\nDESCRIPTION: Defines installation rules for creating a relocatable bundle including assets, libraries, and AOT compilation outputs.\nSOURCE: https://github.com/seemoo-lab/openhaystack/blob/main/openhaystack-mobile/linux/CMakeLists.txt#2025-04-23_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nset(BUILD_BUNDLE_DIR \"${PROJECT_BINARY_DIR}/bundle\")\nif(CMAKE_INSTALL_PREFIX_INITIALIZED_TO_DEFAULT)\n  set(CMAKE_INSTALL_PREFIX \"${BUILD_BUNDLE_DIR}\" CACHE PATH \"...\" FORCE)\nendif()\n\ninstall(TARGETS ${BINARY_NAME} RUNTIME DESTINATION \"${CMAKE_INSTALL_PREFIX}\"\n  COMPONENT Runtime)\n\nif(NOT CMAKE_BUILD_TYPE MATCHES \"Debug\")\n  install(FILES \"${AOT_LIBRARY}\" DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n    COMPONENT Runtime)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Standard Build Settings Function in CMake\nDESCRIPTION: Defines a function to apply standard compilation settings including C++14 standard, wall warnings, and optimization flags.\nSOURCE: https://github.com/seemoo-lab/openhaystack/blob/main/openhaystack-mobile/linux/CMakeLists.txt#2025-04-23_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nfunction(APPLY_STANDARD_SETTINGS TARGET)\n  target_compile_features(${TARGET} PUBLIC cxx_std_14)\n  target_compile_options(${TARGET} PRIVATE -Wall -Werror)\n  target_compile_options(${TARGET} PRIVATE \"$<$<NOT:$<CONFIG:Debug>>:-O3>\")\n  target_compile_definitions(${TARGET} PRIVATE \"$<$<NOT:$<CONFIG:Debug>>:NDEBUG>\")\nendfunction()\n```\n\n----------------------------------------\n\nTITLE: Cross-Building Configuration in CMake\nDESCRIPTION: Configures root filesystem settings for cross-building when FLUTTER_TARGET_PLATFORM_SYSROOT is defined.\nSOURCE: https://github.com/seemoo-lab/openhaystack/blob/main/openhaystack-mobile/linux/CMakeLists.txt#2025-04-23_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nif(FLUTTER_TARGET_PLATFORM_SYSROOT)\n  set(CMAKE_SYSROOT ${FLUTTER_TARGET_PLATFORM_SYSROOT})\n  set(CMAKE_FIND_ROOT_PATH ${CMAKE_SYSROOT})\n  set(CMAKE_FIND_ROOT_PATH_MODE_PROGRAM NEVER)\n  set(CMAKE_FIND_ROOT_PATH_MODE_PACKAGE ONLY)\n  set(CMAKE_FIND_ROOT_PATH_MODE_LIBRARY ONLY)\n  set(CMAKE_FIND_ROOT_PATH_MODE_INCLUDE ONLY)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Opening Xcode Workspace Command for Flutter iOS Project\nDESCRIPTION: Terminal command to open the Flutter project's Xcode workspace for managing launch screen assets.\nSOURCE: https://github.com/seemoo-lab/openhaystack/blob/main/openhaystack-mobile/ios/Runner/Assets.xcassets/LaunchImage.imageset/README.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nopen ios/Runner.xcworkspace\n```"
  }
]