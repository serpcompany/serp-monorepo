[
  {
    "owner": "docsifyjs",
    "repo": "docsify",
    "content": "TITLE: Installing Docsify CLI Globally\nDESCRIPTION: Command to install docsify-cli globally using npm. This tool helps in initializing and previewing the Docsify website locally.\nSOURCE: https://github.com/docsifyjs/docsify/blob/develop/docs/quickstart.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm i docsify-cli -g\n```\n\n----------------------------------------\n\nTITLE: Creating Basic HTML Entry Point for Docsify\nDESCRIPTION: Demonstrates the minimum required HTML file name needed to start using docsify. The index.html file serves as the entry point for the documentation site.\nSOURCE: https://github.com/docsifyjs/docsify/blob/develop/docs/README.md#2025-04-21_snippet_0\n\nLANGUAGE: html\nCODE:\n```\nindex.html\n```\n\n----------------------------------------\n\nTITLE: Complete Docsify Plugin Template\nDESCRIPTION: Template containing all available lifecycle hooks for a Docsify plugin with initialization code.\nSOURCE: https://github.com/docsifyjs/docsify/blob/develop/docs/write-a-plugin.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  function myPlugin(hook, vm) {\n    // Invoked one time when docsify script is initialized\n    hook.init(() => {\n      // ...\n    });\n\n    // Invoked one time when the docsify instance has mounted on the DOM\n    hook.mounted(() => {\n      // ...\n    });\n\n    // Invoked on each page load before new markdown is transformed to HTML.\n    // Supports asynchronous tasks (see beforeEach documentation for details).\n    hook.beforeEach(markdown => {\n      // ...\n      return markdown;\n    });\n\n    // Invoked on each page load after new markdown has been transformed to HTML.\n    // Supports asynchronous tasks (see afterEach documentation for details).\n    hook.afterEach(html => {\n      // ...\n      return html;\n    });\n\n    // Invoked on each page load after new HTML has been appended to the DOM\n    hook.doneEach(() => {\n      // ...\n    });\n\n    // Invoked one time after rendering the initial page\n    hook.ready(() => {\n      // ...\n    });\n  }\n\n  // Add plugin to docsify's plugin array\n  window.$docsify = window.$docsify || {};\n  $docsify.plugins = [myPlugin, ...($docsify.plugins || [])];\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Service Worker for Docsify Offline Mode\nDESCRIPTION: This is a service worker implementation for Docsify that enables offline functionality. It handles caching strategies, intercepts network requests, and uses a stale-while-revalidate approach to serve content when offline. The service worker includes hostname whitelisting and URL fixing for security and compatibility.\nSOURCE: https://github.com/docsifyjs/docsify/blob/develop/docs/pwa.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n/* ===========================================================\n * docsify sw.js\n * ===========================================================\n * Copyright 2016 @huxpro\n * Licensed under Apache 2.0\n * Register service worker.\n * ========================================================== */\n\nconst RUNTIME = 'docsify';\nconst HOSTNAME_WHITELIST = [\n  self.location.hostname,\n  'fonts.gstatic.com',\n  'fonts.googleapis.com',\n  'cdn.jsdelivr.net',\n];\n\n// The Util Function to hack URLs of intercepted requests\nconst getFixedUrl = req => {\n  const now = Date.now();\n  const url = new URL(req.url);\n\n  // 1. fixed http URL\n  // Just keep syncing with location.protocol\n  // fetch(httpURL) belongs to active mixed content.\n  // And fetch(httpRequest) is not supported yet.\n  url.protocol = self.location.protocol;\n\n  // 2. add query for caching-busting.\n  // Github Pages served with Cache-Control: max-age=600\n  // max-age on mutable content is error-prone, with SW life of bugs can even extend.\n  // Until cache mode of Fetch API landed, we have to workaround cache-busting with query string.\n  // Cache-Control-Bug: https://bugs.chromium.org/p/chromium/issues/detail?id=453190\n  if (url.hostname === self.location.hostname) {\n    url.search += (url.search ? '&' : '?') + 'cache-bust=' + now;\n  }\n  return url.href;\n};\n\n/**\n *  @Lifecycle Activate\n *  New one activated when old isnt being used.\n *\n *  waitUntil(): activating ====> activated\n */\nself.addEventListener('activate', event => {\n  event.waitUntil(self.clients.claim());\n});\n\n/**\n *  @Functional Fetch\n *  All network requests are being intercepted here.\n *\n *  void respondWith(Promise<Response> r)\n */\nself.addEventListener('fetch', event => {\n  // Skip some of cross-origin requests, like those for Google Analytics.\n  if (HOSTNAME_WHITELIST.indexOf(new URL(event.request.url).hostname) > -1) {\n    // Stale-while-revalidate\n    // similar to HTTP's stale-while-revalidate: https://www.mnot.net/blog/2007/12/12/stale\n    // Upgrade from Jake's to Surma's: https://gist.github.com/surma/eb441223daaedf880801ad80006389f1\n    const cached = caches.match(event.request);\n    const fixedUrl = getFixedUrl(event.request);\n    const fetched = fetch(fixedUrl, { cache: 'no-store' });\n    const fetchedCopy = fetched.then(resp => resp.clone());\n\n    // Call respondWith() with whatever we get first.\n    // If the fetch fails (e.g disconnected), wait for the cache.\n    // If there's nothing in cache, wait for the fetch.\n    // If neither yields a response, return offline pages.\n    event.respondWith(\n      Promise.race([fetched.catch(_ => cached), cached])\n        .then(resp => resp || fetched)\n        .catch(_ => {\n          /* eat any errors */\n        }),\n    );\n\n    // Update the cache with the version we fetched (only for ok status)\n    event.waitUntil(\n      Promise.all([fetchedCopy, caches.open(RUNTIME)])\n        .then(\n          ([response, cache]) =>\n            response.ok && cache.put(event.request, response),\n        )\n        .catch(_ => {\n          /* eat any errors */\n        }),\n    );\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Docsify HTML Template\nDESCRIPTION: Basic HTML template for a Docsify site. It includes necessary meta tags, core theme CSS, configuration script, and the main Docsify script. Optional plugins can be uncommented as needed.\nSOURCE: https://github.com/docsifyjs/docsify/blob/develop/docs/quickstart.md#2025-04-21_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<!doctype html>\n<html>\n  <head>\n    <meta charset=\"utf-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1, viewport-fit=cover\">\n\n    <!-- Core Theme -->\n    <link rel=\"stylesheet\" href=\"//cdn.jsdelivr.net/npm/docsify@5/themes/core.min.css\">\n  </head>\n  <body class=\"loading\">\n    <div id=\"app\"></div>\n\n    <!-- Configuration -->\n    <script>\n      window.$docsify = {\n        //...\n      };\n    </script>\n\n    <!-- Docsify.js -->\n    <script src=\"//cdn.jsdelivr.net/npm/docsify@5\"></script>\n\n    <!-- Plugins (optional) -->\n    <!-- <script src=\"//cdn.jsdelivr.net/npm/docsify@5/dist/plugins/search.min.js\"></script> -->\n  </body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Implementing Latest Major Version of Docsify via CDN\nDESCRIPTION: HTML code to include the latest major version of Docsify via CDN. This approach automatically receives all non-breaking enhancements and bug fixes while requiring manual updates only when a new major version is released.\nSOURCE: https://github.com/docsifyjs/docsify/blob/develop/docs/cdn.md#2025-04-21_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<!-- Theme -->\n<link rel=\"stylesheet\" href=\"//cdn.jsdelivr.net/npm/docsify@5/themes/vue.min.css\" />\n\n<!-- Docsify -->\n<script src=\"//cdn.jsdelivr.net/npm/docsify@5/dist/docsify.min.js\"></script>\n```\n\n----------------------------------------\n\nTITLE: Creating GitHub Edit Button Plugin\nDESCRIPTION: Example plugin that adds an edit button linking to GitHub and displays last modified date using the beforeEach hook.\nSOURCE: https://github.com/docsifyjs/docsify/blob/develop/docs/write-a-plugin.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nwindow.$docsify = {\n  plugins: [\n    function editButton(hook, vm) {\n      // The date template pattern\n      $docsify.formatUpdated = '{YYYY}/{MM}/{DD} {HH}:{mm}';\n\n      hook.beforeEach(html => {\n        const url =\n          'https://github.com/docsifyjs/docsify/blob/master/docs/' +\n          vm.route.file;\n        const editHtml = '[üìù EDIT DOCUMENT](' + url + ')\\n';\n\n        return (\n          editHtml +\n          html +\n          '\\n----\\n' +\n          'Last modified {docsify-updated}' +\n          editHtml\n        );\n      });\n    },\n  ],\n};\n```\n\n----------------------------------------\n\nTITLE: Initializing Docsify Project\nDESCRIPTION: Command to initialize a new Docsify project in the ./docs subdirectory using the docsify-cli.\nSOURCE: https://github.com/docsifyjs/docsify/blob/develop/docs/quickstart.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndocsify init ./docs\n```\n\n----------------------------------------\n\nTITLE: Creating Vue Components in Docsify\nDESCRIPTION: Shows how to create and register global Vue components in Docsify. The example demonstrates a button counter component with local state.\nSOURCE: https://github.com/docsifyjs/docsify/blob/develop/docs/configuration.md#2025-04-21_snippet_28\n\nLANGUAGE: javascript\nCODE:\n```\nwindow.$docsify = {\n  vueComponents: {\n    'button-counter': {\n      template: `\n        <button @click=\"count += 1\">\n          You clicked me {{ count }} times\n        </button>\n      `,\n      data() {\n        return {\n          count: 0,\n        };\n      },\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Basic Docsify Configuration in HTML\nDESCRIPTION: Basic configuration example showing how to initialize Docsify with repository, max level, and coverpage settings.\nSOURCE: https://github.com/docsifyjs/docsify/blob/develop/docs/configuration.md#2025-04-21_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<script>\n  window.$docsify = {\n    repo: 'docsifyjs/docsify',\n    maxLevel: 3,\n    coverpage: true,\n  };\n</script>\n```\n\n----------------------------------------\n\nTITLE: Using Vue.js Template Syntax in Markdown\nDESCRIPTION: Demonstrates how to use Vue.js template syntax within Docsify markdown files, including conditionals, loops, and JavaScript expressions.\nSOURCE: https://github.com/docsifyjs/docsify/blob/develop/docs/vue.md#2025-04-21_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n<!-- Hide in docsify, show elsewhere (e.g. GitHub) -->\n<p v-if=\"false\">Text for GitHub</p>\n\n<!-- Sequenced content (i.e. loop)-->\n<ul>\n  <li v-for=\"i in 3\">Item {{ i }}</li>\n</ul>\n\n<!-- JavaScript expressions -->\n<p>2 + 2 = {{ 2 + 2 }}</p>\n```\n\n----------------------------------------\n\nTITLE: Complete Markdown Parser Customization in Docsify\nDESCRIPTION: Shows how to completely customize the Markdown parsing rules in Docsify by providing a function that receives the marked instance and renderer, allowing full control over the parsing process.\nSOURCE: https://github.com/docsifyjs/docsify/blob/develop/docs/markdown.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nwindow.$docsify = {\n  markdown(marked, renderer) {\n    // ...\n\n    return marked;\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Using Vue.js Methods in Docsify\nDESCRIPTION: Shows how to define and use Vue.js methods within Docsify markdown content.\nSOURCE: https://github.com/docsifyjs/docsify/blob/develop/docs/vue.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  data() {\n    return {\n      message: 'Hello, World!'\n    };\n  },\n  methods: {\n    hello() {\n      alert(this.message);\n    }\n  },\n}\n```\n\nLANGUAGE: markdown\nCODE:\n```\n<button @click=\"hello\">Say Hello</button>\n```\n\n----------------------------------------\n\nTITLE: Implementing Theme and Class Toggle Functionality in Docsify\nDESCRIPTION: JavaScript function that allows toggling between different themes and CSS classes in a Docsify site. It handles inputs with data-class or data-sheet attributes, manages radio buttons and checkboxes, and ensures that when a new theme is selected, other themes in the same group are disabled.\nSOURCE: https://github.com/docsifyjs/docsify/blob/develop/docs/themes.md#2025-04-21_snippet_22\n\nLANGUAGE: javascript\nCODE:\n```\n(function () {\n    const toggleElms = Docsify.dom.findAll(\n      'input:where([data-class], [data-sheet])',\n    );\n    const previewSheets = Docsify.dom.findAll(\n      'link[rel=\"stylesheet\"][data-sheet]',\n    );\n\n    function handleChange(e) {\n      const elm = e.target.closest('[data-class], [data-sheet]');\n      const value = elm.value;\n      const groupVal = elm.getAttribute('data-group');\n      const radioGroupName = elm.matches('[type=\"radio\"]') ? elm.name : undefined;\n\n      // Toggle class\n      if (elm.matches('[data-class]')) {\n        document.body.classList.toggle(value, elm.checked);\n      }\n      // Toggle sheet\n      else {\n        const themeSheet = previewSheets.find(\n          sheet => sheet.getAttribute('data-sheet') === value,\n        );\n\n        themeSheet && (themeSheet.disabled = !elm.checked);\n      }\n\n      if (!elm.checked || (!groupVal && !radioGroupName)) {\n        return;\n      }\n\n      // Group elements & values\n      const groupElms = toggleElms.filter(elm =>\n        groupVal\n          ? groupVal === elm.getAttribute('data-group')\n          : radioGroupName === elm.name,\n      );\n      const groupVals = groupElms.map(elm => elm.value);\n\n      if (groupElms.length <= 1) {\n        return;\n      }\n\n      if (groupVal) {\n        // Uncheck other group elements\n        groupElms.forEach(groupElm => {\n          if (groupElm !== elm) {\n            groupElm.checked = false;\n          }\n        });\n      }\n\n      // Remove group classes\n      if (elm.matches('[data-class]')) {\n        groupVals.forEach(className => {\n          if (className !== value) {\n            document.body.classList.remove(className);\n          }\n        });\n      }\n      // Disable group sheets\n      else {\n        const otherSheets = groupVals\n          .map(val =>\n            previewSheets.find(sheet => sheet.getAttribute('data-sheet') === val),\n          )\n          .filter(sheet => sheet && sheet.getAttribute('data-sheet') !== value);\n        const disableSheets = otherSheets.length ? otherSheets : previewSheets;\n\n        disableSheets.forEach(sheet => sheet.disabled = true);\n      }\n    }\n\n    // Toggle active elms\n    toggleElms.forEach(elm => {\n      const value = elm.value;\n\n      // Class toggle\n      if (elm.matches('[data-class]')) {\n        elm.checked = document.body.classList.contains(value);\n      }\n      // Sheet toggle\n      else {\n        const previewSheet = previewSheets.find(\n          sheet => sheet.getAttribute('data-sheet') === value,\n        );\n\n        elm.checked = previewSheet && !previewSheet.disabled;\n      }\n    });\n\n    toggleElms.forEach(elm => elm.addEventListener('change', handleChange));\n  })();\n```\n\n----------------------------------------\n\nTITLE: Handling Conditional Routes in Docsify\nDESCRIPTION: Shows how to handle conditional routing in Docsify, including ignoring certain routes and opting out specific paths from route matching. Examples demonstrate both synchronous and asynchronous approaches.\nSOURCE: https://github.com/docsifyjs/docsify/blob/develop/docs/configuration.md#2025-04-21_snippet_24\n\nLANGUAGE: javascript\nCODE:\n```\nwindow.$docsify = {\n  routes: {\n    // accepts everything other than dogs (synchronous)\n    '/pets/(.+)'(route, matched) {\n      if (matched[0] === 'dogs') {\n        return null;\n      } else {\n        return 'I like all pets but dogs';\n      }\n    }\n\n    // accepts everything other than cats (asynchronous)\n    '/pets/(.*)'(route, matched, next) {\n      if (matched[0] === 'cats') {\n        next();\n      } else {\n        // Async task(s)...\n        next('I like all pets but cats');\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Full Text Search Plugin in Docsify\nDESCRIPTION: Demonstrates how to set up and customize the full text search plugin for Docsify, including options for search paths, localization, and advanced configuration.\nSOURCE: https://github.com/docsifyjs/docsify/blob/develop/docs/plugins.md#2025-04-21_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<script>\n  window.$docsify = {\n    search: 'auto', // default\n\n    search: [\n      '/',            // => /README.md\n      '/guide',       // => /guide.md\n      '/get-started', // => /get-started.md\n      '/zh-cn/',      // => /zh-cn/README.md\n    ],\n\n    // Complete configuration parameters\n    search: {\n      // Location in sidebar (default: prepended as first child)\n      // Optionally specify insertAfter or insertBefore (not both)\n      insertAfter: '.app-name', // CSS selector in .sidebar scope\n      insertBefore: '.sidebar-nav', // CSS selector in .sidebar scope\n\n      maxAge: 86400000, // Expiration time, the default one day\n      paths: [], // or 'auto'\n      placeholder: 'Type to search',\n\n      // Localization\n      placeholder: {\n        '/zh-cn/': 'ÊêúÁ¥¢',\n        '/': 'Type to search',\n      },\n\n      noData: 'No Results!',\n\n      // Localization\n      noData: {\n        '/zh-cn/': 'Êâæ‰∏çÂà∞ÁªìÊûú',\n        '/': 'No Results',\n      },\n\n      // Headline depth, 1 - 6\n      depth: 2,\n\n      hideOtherSidebarContent: true, // Deprecated as of v5\n\n      // To avoid search index collision\n      // between multiple websites under the same domain\n      namespace: 'website-1',\n\n      // Use different indexes for path prefixes (namespaces).\n      // NOTE: Only works in 'auto' mode.\n      //\n      // When initialiazing an index, we look for the first path from the sidebar.\n      // If it matches the prefix from the list, we switch to the corresponding index.\n      pathNamespaces: ['/zh-cn', '/ru-ru', '/ru-ru/v1'],\n\n      // You can provide a regexp to match prefixes. In this case,\n      // the matching substring will be used to identify the index\n      pathNamespaces: /^(/(zh-cn|ru-ru))?(/(v1|v2))?/,\n    },\n  };\n</script>\n<script src=\"//cdn.jsdelivr.net/npm/docsify@5/dist/docsify.min.js\"></script>\n<script src=\"//cdn.jsdelivr.net/npm/docsify@5/dist/plugins/search.min.js\"></script>\n```\n\n----------------------------------------\n\nTITLE: Configuring Vue.js Global Options in Docsify\nDESCRIPTION: Demonstrates how to set up global Vue.js options in Docsify configuration for use across the site.\nSOURCE: https://github.com/docsifyjs/docsify/blob/develop/docs/vue.md#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nwindow.$docsify = {\n  vueGlobalOptions: {\n    data() {\n      return {\n        count: 0,\n      };\n    },\n  },\n};\n```\n\nLANGUAGE: markdown\nCODE:\n```\n<p>\n  <button @click=\"count += 1\">+</button>\n  {{ count }}\n  <button @click=\"count -= 1\">-</button>\n</p>\n```\n\n----------------------------------------\n\nTITLE: Implementing Vue.js Lifecycle Hooks in Docsify\nDESCRIPTION: Example of using Vue.js lifecycle hooks in Docsify to fetch and display dynamic content.\nSOURCE: https://github.com/docsifyjs/docsify/blob/develop/docs/vue.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  data() {\n    return {\n      images: null,\n    };\n  },\n  created() {\n    fetch('https://api.domain.com/')\n      .then(response => response.json())\n      .then(data => (this.images = data))\n      .catch(err => console.log(err));\n  }\n}\n\n// API response:\n// [\n//   { title: 'Image 1', url: 'https://domain.com/1.jpg' },\n//   { title: 'Image 2', url: 'https://domain.com/2.jpg' },\n//   { title: 'Image 3', url: 'https://domain.com/3.jpg' },\n// ];\n```\n\nLANGUAGE: markdown\nCODE:\n```\n<div style=\"display: flex;\">\n  <figure style=\"flex: 1;\">\n    <img v-for=\"image in images\" :src=\"image.url\" :title=\"image.title\">\n    <figcaption>{{ image.title }}</figcaption>\n  </figure>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Mounting Vue.js in Docsify Markdown\nDESCRIPTION: Demonstrates how to mount a Vue.js instance directly in a Docsify markdown file using a script tag.\nSOURCE: https://github.com/docsifyjs/docsify/blob/develop/docs/vue.md#2025-04-21_snippet_9\n\nLANGUAGE: html\nCODE:\n```\n<script>\n  Vue.createApp({\n    // Options...\n  }).mount('#example');\n</script>\n```\n\n----------------------------------------\n\nTITLE: Serving Docsify Site Locally\nDESCRIPTION: Command to start a local server using docsify-cli to preview the Docsify site. The site will be available at http://localhost:3000.\nSOURCE: https://github.com/docsifyjs/docsify/blob/develop/docs/quickstart.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ndocsify serve docs\n```\n\n----------------------------------------\n\nTITLE: Implementing Page Footer Plugin\nDESCRIPTION: Example plugin that adds a custom footer to each page using the afterEach hook.\nSOURCE: https://github.com/docsifyjs/docsify/blob/develop/docs/write-a-plugin.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nwindow.$docsify = {\n  plugins: [\n    function pageFooter(hook, vm) {\n      const footer = /* html */ `\n        <hr/>\n        <footer>\n          <span><a href=\"https://github.com/QingWei-Li\">cinwell</a> &copy;2017.</span>\n          <span>Proudly published with <a href=\"https://github.com/docsifyjs/docsify\" target=\"_blank\">docsify</a>.</span>\n        </footer>\n      `;\n\n      hook.afterEach(html => {\n        return html + footer;\n      });\n    },\n  ],\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring History Mode with Aliases for Sidebar and Navbar\nDESCRIPTION: Sets up history mode routing with aliases to ensure sidebar and navbar files are loaded correctly regardless of the current path.\nSOURCE: https://github.com/docsifyjs/docsify/blob/develop/docs/configuration.md#2025-04-21_snippet_22\n\nLANGUAGE: javascript\nCODE:\n```\nwindow.$docsify = {\n  routerMode: 'history',\n  alias: {\n    '/.*/_sidebar.md': '/_sidebar.md',\n    '/.*/_navbar.md': '/_navbar.md',\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Customizing Markdown Renderer in Docsify\nDESCRIPTION: Demonstrates how to configure the Markdown parser in Docsify using the marked v13+ library. This example shows how to enable smartypants and customize the link renderer.\nSOURCE: https://github.com/docsifyjs/docsify/blob/develop/docs/markdown.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nwindow.$docsify = {\n  markdown: {\n    smartypants: true,\n    renderer: {\n      link() {\n        // ...\n      },\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Virtual Routes in Docsify\nDESCRIPTION: Demonstrates how to define virtual routes in Docsify using both static strings and dynamic functions. Includes examples of synchronous and asynchronous route handling, as well as conditional routing based on matched patterns.\nSOURCE: https://github.com/docsifyjs/docsify/blob/develop/docs/configuration.md#2025-04-21_snippet_23\n\nLANGUAGE: javascript\nCODE:\n```\nwindow.$docsify = {\n  routes: {\n    // Basic match w/ return string\n    '/foo': '# Custom Markdown',\n\n    // RegEx match w/ synchronous function\n    '/bar/(.*)'(route, matched) {\n      return '# Custom Markdown';\n    },\n\n    // RegEx match w/ asynchronous function\n    '/baz/(.*)'(route, matched, next) {\n      fetch('/api/users?id=12345')\n        .then(response => {\n          next('# Custom Markdown');\n        })\n        .catch(err => {\n          // Handle error...\n        });\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Google Analytics 4 (GA4) in Docsify\nDESCRIPTION: Demonstrates how to set up Google Analytics 4 (GA4) in Docsify, including options for single or multiple tracking IDs across different Google services.\nSOURCE: https://github.com/docsifyjs/docsify/blob/develop/docs/plugins.md#2025-04-21_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<script>\n  // Single ID\n  window.$docsify = {\n    gtag: 'UA-XXXXX-Y',\n  };\n\n  // Multiple IDs\n  window.$docsify = {\n    gtag: [\n      'G-XXXXXXXX', // Google Analytics 4 (GA4)\n      'UA-XXXXXXXX', // Google Universal Analytics (GA3)\n      'AW-XXXXXXXX', // Google Ads\n      'DC-XXXXXXXX', // Floodlight\n    ],\n  };\n</script>\n<script src=\"//cdn.jsdelivr.net/npm/docsify@5/dist/docsify.min.js\"></script>\n<script src=\"//cdn.jsdelivr.net/npm/docsify@5/dist/plugins/gtag.min.js\"></script>\n```\n\n----------------------------------------\n\nTITLE: Adding Image Zoom Functionality to Docsify\nDESCRIPTION: Shows how to integrate the zoom image plugin in Docsify, which provides Medium-style image zooming functionality based on the medium-zoom library.\nSOURCE: https://github.com/docsifyjs/docsify/blob/develop/docs/plugins.md#2025-04-21_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"//cdn.jsdelivr.net/npm/docsify@5/dist/plugins/zoom-image.min.js\"></script>\n```\n\n----------------------------------------\n\nTITLE: Initializing Basic Docsify Plugin Configuration\nDESCRIPTION: Shows how to add plugins directly to the Docsify configuration using the plugins array.\nSOURCE: https://github.com/docsifyjs/docsify/blob/develop/docs/write-a-plugin.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nwindow.$docsify = {\n  plugins: [\n    function myPlugin1(hook, vm) {\n      // ...\n    },\n    function myPlugin2(hook, vm) {\n      // ...\n    },\n  ],\n};\n```\n\n----------------------------------------\n\nTITLE: GitLab CI/CD Configuration for Docsify Deployment\nDESCRIPTION: A GitLab CI/CD configuration file (.gitlab-ci.yml) that sets up automatic deployment of a Docsify site to GitLab Pages. The script creates a temporary directory, copies all files, and moves them to the public directory for deployment.\nSOURCE: https://github.com/docsifyjs/docsify/blob/develop/docs/deploy.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\npages:\n  stage: deploy\n  script:\n  - mkdir .public\n  - cp -r * .public\n  - mv .public public\n  artifacts:\n    paths:\n    - public\n  only:\n  - master\n```\n\n----------------------------------------\n\nTITLE: Route Alias Configuration\nDESCRIPTION: Configuration example for setting up route aliases in Docsify, supporting regexp and different routing patterns.\nSOURCE: https://github.com/docsifyjs/docsify/blob/develop/docs/configuration.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nwindow.$docsify = {\n  alias: {\n    '/foo/(.*)': '/bar/$1', // supports regexp\n    '/zh-cn/changelog': '/changelog',\n    '/changelog':\n      'https://raw.githubusercontent.com/docsifyjs/docsify/master/CHANGELOG',\n\n    // You may need this if you use routerMode:'history'.\n    '/.*/_sidebar.md': '/_sidebar.md', // See #301\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Creating HTML-based Custom Navigation in Docsify\nDESCRIPTION: Implementation of a simple HTML-based navigation bar for language switching in Docsify. This approach uses direct HTML in the index.html file with anchor links to different language versions of the documentation.\nSOURCE: https://github.com/docsifyjs/docsify/blob/develop/docs/custom-navbar.md#2025-04-21_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<!-- index.html -->\n\n<body>\n  <nav>\n    <a href=\"#/\">EN</a>\n    <a href=\"#/zh-cn/\">ÁÆÄ‰Ωì‰∏≠Êñá</a>\n  </nav>\n  <div id=\"app\"></div>\n</body>\n```\n\n----------------------------------------\n\nTITLE: Docker Container Configuration for Docsify\nDESCRIPTION: Dockerfile for creating a containerized Docsify deployment. Uses Node.js, installs docsify-cli, exposes port 3000, and sets the entrypoint to serve the documentation from the mounted directory.\nSOURCE: https://github.com/docsifyjs/docsify/blob/develop/docs/deploy.md#2025-04-21_snippet_5\n\nLANGUAGE: dockerfile\nCODE:\n```\nFROM node:latest\nLABEL description=\"A demo Dockerfile for build Docsify.\"\nWORKDIR /docs\nRUN npm install -g docsify-cli@latest\nEXPOSE 3000/tcp\nENTRYPOINT docsify serve .\n```\n\n----------------------------------------\n\nTITLE: Creating a Docsify Homepage with Logo, Title and Navigation Links in Markdown/HTML\nDESCRIPTION: This snippet demonstrates how to structure a Docsify homepage with a logo, title with version number, tagline, feature list, and navigation links. The snippet uses a combination of HTML and Markdown syntax, with commented-out color and additional image options at the bottom.\nSOURCE: https://github.com/docsifyjs/docsify/blob/develop/docs/_coverpage.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n<!-- markdownlint-disable first-line-h1 -->\n\n![logo](_media/icon.svg)\n\n# docsify <small>4.13.0</small>\n\n> A magical documentation site generator\n\n- Simple and lightweight\n- No statically built HTML files\n- Multiple themes\n\n[Get Started](#docsify)\n[GitHub](https://github.com/docsifyjs/docsify/)\n\n<!-- ![color](#f0f0f0) -->\n<!-- ![](/_media/icon.svg) -->\n```\n\n----------------------------------------\n\nTITLE: Configuring nameLink Option in Docsify\nDESCRIPTION: Demonstrates how to set the nameLink option which defines the URL that the website name links to. It can be a single string for all routes or an object with different paths for different routes.\nSOURCE: https://github.com/docsifyjs/docsify/blob/develop/docs/configuration.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nwindow.$docsify = {\n  nameLink: '/',\n\n  // For each route\n  nameLink: {\n    '/zh-cn/': '#/zh-cn/',\n    '/': '#/',\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Basic File Embedding in Docsify Markdown\nDESCRIPTION: The fundamental syntax for embedding a file in docsify. Add ':include' to the markdown link syntax to embed the file's content directly in the page.\nSOURCE: https://github.com/docsifyjs/docsify/blob/develop/docs/embed-files.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[filename](_media/example.md ':include')\n```\n\n----------------------------------------\n\nTITLE: Configuring Router Mode in Docsify\nDESCRIPTION: Sets the URL format for Docsify paths. Options are 'hash' (default, uses #/ in URLs) or 'history' (uses HTML5 History API for cleaner URLs).\nSOURCE: https://github.com/docsifyjs/docsify/blob/develop/docs/configuration.md#2025-04-21_snippet_21\n\nLANGUAGE: javascript\nCODE:\n```\nwindow.$docsify = {\n  routerMode: 'history', // default: 'hash'\n};\n```\n\n----------------------------------------\n\nTITLE: Function-based Docsify Configuration\nDESCRIPTION: Example showing how to configure Docsify using a function that receives the vm instance, useful for accessing vm in markdown renderer.\nSOURCE: https://github.com/docsifyjs/docsify/blob/develop/docs/configuration.md#2025-04-21_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<script>\n  window.$docsify = function (vm) {\n    return {\n      markdown: {\n        renderer: {\n          code(code, lang) {\n            // ... use `vm` ...\n          },\n        },\n      },\n    };\n  };\n</script>\n```\n\n----------------------------------------\n\nTITLE: Opting Out Specific Paths from Route Matching in Docsify\nDESCRIPTION: Demonstrates how to exclude specific paths from route matching in Docsify by returning a false value. This allows certain paths to be handled by real markdown files instead of virtual routes.\nSOURCE: https://github.com/docsifyjs/docsify/blob/develop/docs/configuration.md#2025-04-21_snippet_25\n\nLANGUAGE: javascript\nCODE:\n```\nwindow.$docsify = {\n  routes: {\n    // if you look up /pets/cats, docsify will skip all routes and look for \"pets/cats.md\"\n    '/pets/cats'(route, matched) {\n      return false;\n    }\n\n    // but any other pet should generate dynamic content right here\n    '/pets/(.+)'(route, matched) {\n      const pet = matched[0];\n      return `your pet is ${pet} (but not a cat)`;\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Embedding Code with Syntax Highlighting in Docsify\nDESCRIPTION: Shows how to embed source code with specific syntax highlighting applied. This example embeds HTML content with 'text' highlighting.\nSOURCE: https://github.com/docsifyjs/docsify/blob/develop/docs/embed-files.md#2025-04-21_snippet_6\n\nLANGUAGE: markdown\nCODE:\n```\n[](_media/example.html ':include :type=code text')\n```\n\n----------------------------------------\n\nTITLE: Adding Vue.js to Docsify HTML File\nDESCRIPTION: Instructions for including Vue.js in the Docsify index.html file, with options for production and development versions.\nSOURCE: https://github.com/docsifyjs/docsify/blob/develop/docs/vue.md#2025-04-21_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<!-- Production -->\n<script src=\"//cdn.jsdelivr.net/npm/vue@3/dist/vue.global.prod.js\"></script>\n\n<!-- Development -->\n<script src=\"//cdn.jsdelivr.net/npm/vue@3/dist/vue.global.js\"></script>\n```\n\n----------------------------------------\n\nTITLE: Creating Vue.js Components in Docsify\nDESCRIPTION: Illustrates how to create and register global Vue.js components in Docsify configuration.\nSOURCE: https://github.com/docsifyjs/docsify/blob/develop/docs/vue.md#2025-04-21_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nwindow.$docsify = {\n  vueComponents: {\n    'button-counter': {\n      template: `\n        <button @click=\"count += 1\">\n          You clicked me {{ count }} times\n        </button>\n      `,\n      data() {\n        return {\n          count: 0,\n        };\n      },\n    },\n  },\n};\n```\n\nLANGUAGE: markdown\nCODE:\n```\n<button-counter></button-counter>\n<button-counter></button-counter>\n```\n\n----------------------------------------\n\nTITLE: Configuring Markdown-based Navigation in Docsify\nDESCRIPTION: HTML configuration for enabling markdown-based navigation by setting loadNavbar to true in the Docsify configuration. This setup allows for a separate _navbar.md file to define the navigation structure.\nSOURCE: https://github.com/docsifyjs/docsify/blob/develop/docs/custom-navbar.md#2025-04-21_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<!-- index.html -->\n\n<script>\n  window.$docsify = {\n    loadNavbar: true,\n  };\n</script>\n<script src=\"//cdn.jsdelivr.net/npm/docsify@5/dist/docsify.min.js\"></script>\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Theme Styles in HTML File\nDESCRIPTION: HTML structure showing how to add custom theme styles after loading the core theme using a style tag in the index.html file.\nSOURCE: https://github.com/docsifyjs/docsify/blob/develop/docs/themes.md#2025-04-21_snippet_16\n\nLANGUAGE: html\nCODE:\n```\n<!-- Theme -->\n<link rel=\"stylesheet\" href=\"//cdn.jsdelivr.net/npm/docsify@5/dist/themes/core.min.css\" />\n\n<!-- Custom theme styles -->\n<style>\n  :root {\n    /* ... */\n  }\n</style>\n```\n\n----------------------------------------\n\nTITLE: Setting Vue Global Options in Docsify\nDESCRIPTION: Demonstrates how to specify global Vue options for use with Vue content not explicitly mounted. The example shows setting up global data that persists across navigation.\nSOURCE: https://github.com/docsifyjs/docsify/blob/develop/docs/configuration.md#2025-04-21_snippet_29\n\nLANGUAGE: javascript\nCODE:\n```\nwindow.$docsify = {\n  vueGlobalOptions: {\n    data() {\n      return {\n        count: 0,\n      };\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Plugin Hook Support in Docsify\nDESCRIPTION: Feature implementation that adds support for custom plugins through hook functionality.\nSOURCE: https://github.com/docsifyjs/docsify/blob/develop/HISTORY.md#2025-04-21_snippet_4\n\nLANGUAGE: Markdown\nCODE:\n```\n### Features\n\n* **hook:** support custom plugin ([9e81a59](https://github.com/QingWei-Li/docsify/commit/9e81a59))\n```\n\n----------------------------------------\n\nTITLE: Markdown Navigation Structure for Docsify\nDESCRIPTION: Navigation sidebar structure defined in markdown format for a Docsify documentation site. Includes section headings and links to various documentation pages organized into logical groups.\nSOURCE: https://github.com/docsifyjs/docsify/blob/develop/docs/_sidebar.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n<!-- markdownlint-disable first-line-h1 -->\n\n- Getting started\n\n  - [Quick start](quickstart.md)\n  - [Adding pages](adding-pages.md)\n  - [Cover page](cover.md)\n  - [Custom navbar](custom-navbar.md)\n\n- Customization\n\n  - [Configuration](configuration.md)\n  - [Themes](themes.md)\n  - [List of Plugins](plugins.md)\n  - [Write a Plugin](write-a-plugin.md)\n  - [Markdown configuration](markdown.md)\n  - [Language highlighting](language-highlight.md)\n  - [Emoji](emoji.md)\n\n- Guide\n\n  - [Deploy](deploy.md)\n  - [Helpers](helpers.md)\n  - [Vue compatibility](vue.md)\n  - [CDN](cdn.md)\n  - [Offline Mode (PWA)](pwa.md)\n  - [Embed Files](embed-files.md)\n  - [UI Kit](ui-kit.md)\n\n- [Awesome docsify](awesome.md)\n- [Changelog](changelog.md)\n```\n\n----------------------------------------\n\nTITLE: Configuring Vue.js Mounts in Docsify\nDESCRIPTION: Shows how to specify DOM elements to mount as Vue instances in Docsify configuration.\nSOURCE: https://github.com/docsifyjs/docsify/blob/develop/docs/vue.md#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nwindow.$docsify = {\n  vueMounts: {\n    '#counter': {\n      data() {\n        return {\n          count: 0,\n        };\n      },\n    },\n  },\n};\n```\n\nLANGUAGE: markdown\nCODE:\n```\n<div id=\"counter\">\n  <button @click=\"count += 1\">+</button>\n  {{ count }}\n  <button @click=\"count -= 1\">-</button>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Request Headers in Docsify\nDESCRIPTION: Configures custom HTTP request headers that will be sent with every request for resources. Useful for authentication or caching control.\nSOURCE: https://github.com/docsifyjs/docsify/blob/develop/docs/configuration.md#2025-04-21_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\nwindow.$docsify = {\n  requestHeaders: {\n    'x-token': 'xxx',\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Mounting Vue Instances on DOM Elements in Docsify\nDESCRIPTION: Shows how to specify DOM elements to mount as Vue instances in Docsify. The example demonstrates mounting a counter component on a specific element with local state.\nSOURCE: https://github.com/docsifyjs/docsify/blob/develop/docs/configuration.md#2025-04-21_snippet_30\n\nLANGUAGE: javascript\nCODE:\n```\nwindow.$docsify = {\n  vueMounts: {\n    '#counter': {\n      data() {\n        return {\n          count: 0,\n        };\n      },\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Table of Contents in Docsify\nDESCRIPTION: HTML snippet showing how to enable and configure automatic table of contents generation in Docsify.\nSOURCE: https://github.com/docsifyjs/docsify/blob/develop/docs/adding-pages.md#2025-04-21_snippet_8\n\nLANGUAGE: html\nCODE:\n```\n<!-- index.html -->\n\n<script>\n  window.$docsify = {\n    loadSidebar: true,\n    subMaxLevel: 2,\n  };\n</script>\n<script src=\"//cdn.jsdelivr.net/npm/docsify@5/dist/docsify.min.js\"></script>\n```\n\n----------------------------------------\n\nTITLE: Applying Theme Properties Based on Color Scheme\nDESCRIPTION: CSS example showing how to conditionally apply custom theme properties for light and dark modes using media queries with prefers-color-scheme.\nSOURCE: https://github.com/docsifyjs/docsify/blob/develop/docs/themes.md#2025-04-21_snippet_19\n\nLANGUAGE: css\nCODE:\n```\n/* Light and dark mode */\n:root {\n  --theme-color: pink;\n}\n\n/* Light mode only */\n@media (prefers-color-scheme: light) {\n  :root {\n    --color-bg  : #eee;\n    --color-text: #444;\n  }\n}\n\n/* Dark mode only */\n@media screen and (prefers-color-scheme: dark) {\n  :root {\n    --color-bg  : #222;\n    --color-text: #ddd;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Service Worker in Docsify\nDESCRIPTION: This HTML script registers the service worker for Docsify if the browser supports it. It checks for service worker support before attempting registration to ensure compatibility across different browsers.\nSOURCE: https://github.com/docsifyjs/docsify/blob/develop/docs/pwa.md#2025-04-21_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<script>\n  if (typeof navigator.serviceWorker !== 'undefined') {\n    navigator.serviceWorker.register('sw.js');\n  }\n</script>\n```\n\n----------------------------------------\n\nTITLE: Setting Cache Control Headers in Docsify\nDESCRIPTION: Demonstrates how to set cache control headers for Docsify resource requests to improve performance by caching resources.\nSOURCE: https://github.com/docsifyjs/docsify/blob/develop/docs/configuration.md#2025-04-21_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\nwindow.$docsify = {\n  requestHeaders: {\n    'cache-control': 'max-age=600',\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Adding Mermaid Diagram Support to Docsify\nDESCRIPTION: Configuration to integrate mermaid diagram rendering in Docsify. This snippet shows how to modify the code renderer to detect and render mermaid syntax diagrams in markdown. Note that only mermaid v9.3.0 or earlier is supported.\nSOURCE: https://github.com/docsifyjs/docsify/blob/develop/docs/markdown.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n//  <link rel=\"stylesheet\" href=\"//cdn.jsdelivr.net/npm/mermaid/dist/mermaid.min.css\">\n//  <script src=\"//cdn.jsdelivr.net/npm/mermaid@9.3.0/dist/mermaid.min.js\"></script>\n\nlet num = 0;\nmermaid.initialize({ startOnLoad: false });\n\nwindow.$docsify = {\n  markdown: {\n    renderer: {\n      code({ text, lang }) {\n        if (lang === 'mermaid') {\n          return /* html */ `\n            <div class=\"mermaid\">${mermaid.render(\n              'mermaid-svg-' + num++,\n              text,\n            )}</div>\n          `;\n        }\n        return this.origin.code.apply(this, arguments);\n      },\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Markdown File References in Docsify\nDESCRIPTION: Shows the standard way to reference other markdown files within docsify documentation using markdown link syntax.\nSOURCE: https://github.com/docsifyjs/docsify/blob/develop/docs/README.md#2025-04-21_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n[deploy it on GitHub Pages](deploy.md)\n```\n\nLANGUAGE: markdown\nCODE:\n```\n[Quick start](quickstart.md)\n```\n\n----------------------------------------\n\nTITLE: Setting up Google Analytics (GA3) in Docsify\nDESCRIPTION: Shows how to integrate Google Analytics (Universal Analytics) with Docsify by configuring the track ID and including the necessary scripts.\nSOURCE: https://github.com/docsifyjs/docsify/blob/develop/docs/plugins.md#2025-04-21_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<script>\n  window.$docsify = {\n    ga: 'UA-XXXXX-Y',\n  };\n</script>\n<script src=\"//cdn.jsdelivr.net/npm/docsify@5/dist/docsify.min.js\"></script>\n<script src=\"//cdn.jsdelivr.net/npm/docsify@5/dist/plugins/ga.min.js\"></script>\n```\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"//cdn.jsdelivr.net/npm/docsify@5/dist/docsify.min.js\" data-ga=\"UA-XXXXX-Y\"></script>\n<script src=\"//cdn.jsdelivr.net/npm/docsify@5/dist/plugins/ga.min.js\"></script>\n```\n\n----------------------------------------\n\nTITLE: Loading Core Theme in Docsify\nDESCRIPTION: HTML code for loading the core Docsify theme CSS file from CDN. The core theme contains all styles and theme properties needed to render a Docsify site.\nSOURCE: https://github.com/docsifyjs/docsify/blob/develop/docs/themes.md#2025-04-21_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<!-- Core Theme -->\n<link rel=\"stylesheet\" href=\"//cdn.jsdelivr.net/npm/docsify@5/dist/themes/core.min.css\" />\n```\n\n----------------------------------------\n\nTITLE: Creating Syntax Highlighted Code Blocks in Markdown\nDESCRIPTION: Demonstrates how to create syntax-highlighted code blocks in Markdown for HTML, CSS, and JavaScript using backticks and language identifiers.\nSOURCE: https://github.com/docsifyjs/docsify/blob/develop/docs/language-highlight.md#2025-04-21_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n```html\n<p>This is a paragraph</p>\n<a href=\"//docsify.js.org/\">Docsify</a>\n```\n```\n\nLANGUAGE: text\nCODE:\n```\n```css\np {\n  color: red;\n}\n```\n```\n\nLANGUAGE: text\nCODE:\n```\n```js\nfunction add(a, b) {\n  return a + b;\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Forcing File Type for Embedded Content in Docsify\nDESCRIPTION: Controls how docsify renders embedded content by specifying a type. This example forces a markdown file to be displayed as a code block.\nSOURCE: https://github.com/docsifyjs/docsify/blob/develop/docs/embed-files.md#2025-04-21_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n[filename](_media/example.md ':include :type=code')\n```\n\n----------------------------------------\n\nTITLE: Nginx Server Configuration for Docsify VPS Deployment\nDESCRIPTION: Nginx server block configuration for hosting a Docsify site on a VPS. Sets up a server listening on port 80 that serves the documentation directory with index.html as the default file.\nSOURCE: https://github.com/docsifyjs/docsify/blob/develop/docs/deploy.md#2025-04-21_snippet_2\n\nLANGUAGE: nginx\nCODE:\n```\nserver {\n  listen 80;\n  server_name  your.domain.com;\n\n  location / {\n    alias /path/to/dir/of/docs/;\n    index index.html;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Loading Core Dark Add-on with Dark Mode Media Query\nDESCRIPTION: HTML code for loading the Core Dark theme add-on only when the operating system's dark mode is active, using the media attribute with prefers-color-scheme.\nSOURCE: https://github.com/docsifyjs/docsify/blob/develop/docs/themes.md#2025-04-21_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<!-- Core Dark - Dark Mode Only (add-on) -->\n<link rel=\"stylesheet\" href=\"//cdn.jsdelivr.net/npm/docsify@5/dist/themes/addons/core-dark.min.css\" media=\"(prefers-color-scheme: dark)\" />\n```\n\n----------------------------------------\n\nTITLE: Adding Pagination to Docsify\nDESCRIPTION: Demonstrates how to include pagination functionality in Docsify documentation using the docsify-pagination plugin.\nSOURCE: https://github.com/docsifyjs/docsify/blob/develop/docs/plugins.md#2025-04-21_snippet_10\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"//cdn.jsdelivr.net/npm/docsify@5/dist/docsify.min.js\"></script>\n<script src=\"//cdn.jsdelivr.net/npm/docsify-pagination/dist/docsify-pagination.min.js\"></script>\n```\n\n----------------------------------------\n\nTITLE: Auto2top Configuration\nDESCRIPTION: Configuration to enable automatic scrolling to top when route changes.\nSOURCE: https://github.com/docsifyjs/docsify/blob/develop/docs/configuration.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nwindow.$docsify = {\n  auto2top: true,\n};\n```\n\n----------------------------------------\n\nTITLE: Creating Nested Navigation Structure in Docsify\nDESCRIPTION: Advanced nested navigation structure with multiple sections and subsections using markdown syntax. This example creates 'Getting started' and 'Configuration' sections, each with multiple nested links.\nSOURCE: https://github.com/docsifyjs/docsify/blob/develop/docs/custom-navbar.md#2025-04-21_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n<!-- _navbar.md -->\n\n- Getting started\n\n  - [Quick start](quickstart.md)\n  - [Writing more pages](more-pages.md)\n  - [Custom navbar](custom-navbar.md)\n  - [Cover page](cover.md)\n\n- Configuration\n\n  - [Configuration](configuration.md)\n  - [Themes](themes.md)\n  - [Using plugins](plugins.md)\n  - [Markdown configuration](markdown.md)\n  - [Language highlight](language-highlight.md)\n```\n\n----------------------------------------\n\nTITLE: Combining Markdown with HTML in Docsify\nDESCRIPTION: Demonstrates how to mix Markdown content within HTML elements like the details/summary tags. This requires adding a space between HTML and Markdown content.\nSOURCE: https://github.com/docsifyjs/docsify/blob/develop/docs/helpers.md#2025-04-21_snippet_12\n\nLANGUAGE: markdown\nCODE:\n```\n<details>\n<summary>Self-assessment (Click to expand)</summary>\n\n- Abc\n- Abc\n\n</details>\n```\n\n----------------------------------------\n\nTITLE: Loading Core Theme with Theme Add-on in Docsify\nDESCRIPTION: Demonstrates how to load the core theme followed by a theme add-on. Theme add-ons must be loaded after the core theme to properly modify the theme properties.\nSOURCE: https://github.com/docsifyjs/docsify/blob/develop/docs/themes.md#2025-04-21_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<!-- Core Theme -->\n<link rel=\"stylesheet\" href=\"...\" />\n\n<!-- Theme (add-on) -->\n<link rel=\"stylesheet\" href=\"...\" />\n```\n\n----------------------------------------\n\nTITLE: Loading Core Dark Add-on in Docsify\nDESCRIPTION: HTML code for loading the Core Dark theme add-on, which provides dark mode styles for the core theme. This applies dark mode to all site content.\nSOURCE: https://github.com/docsifyjs/docsify/blob/develop/docs/themes.md#2025-04-21_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<!-- Core Dark (add-on) -->\n<link rel=\"stylesheet\" href=\"//cdn.jsdelivr.net/npm/docsify@5/dist/themes/addons/core-dark.min.css\" />\n```\n\n----------------------------------------\n\nTITLE: Adding Loading Dialog to Docsify\nDESCRIPTION: HTML snippet demonstrating how to add a loading dialog to a Docsify site. This dialog is shown before the documentation is rendered.\nSOURCE: https://github.com/docsifyjs/docsify/blob/develop/docs/quickstart.md#2025-04-21_snippet_8\n\nLANGUAGE: html\nCODE:\n```\n<!-- index.html -->\n\n<div id=\"app\">Please wait...</div>\n```\n\n----------------------------------------\n\nTITLE: Highlighting Dynamic Content with Prism in JavaScript\nDESCRIPTION: Demonstrates how to use Prism's highlightElement() method to apply syntax highlighting to dynamically generated code blocks.\nSOURCE: https://github.com/docsifyjs/docsify/blob/develop/docs/language-highlight.md#2025-04-21_snippet_4\n\nLANGUAGE: js\nCODE:\n```\nconst code = document.createElement('code');\ncode.innerHTML = \"console.log('Hello World!')\";\ncode.setAttribute('class', 'language-javascript');\nPrism.highlightElement(code);\n```\n\n----------------------------------------\n\nTITLE: Applying CSS Classes to Docsify Body Element\nDESCRIPTION: HTML example showing how to apply CSS classes to the body element for customizing the Docsify site appearance.\nSOURCE: https://github.com/docsifyjs/docsify/blob/develop/docs/themes.md#2025-04-21_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<body class=\"...\">\n```\n\n----------------------------------------\n\nTITLE: Creating Dropdown Menus in Markdown Navigation\nDESCRIPTION: Implementation of dropdown menus in the Docsify navigation using markdown syntax. This creates a 'Translations' dropdown containing links to English and Chinese versions of the documentation.\nSOURCE: https://github.com/docsifyjs/docsify/blob/develop/docs/custom-navbar.md#2025-04-21_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n<!-- _navbar.md -->\n\n- Translations\n\n  - [En](/)\n  - [chinese](/zh-cn/)\n```\n\n----------------------------------------\n\nTITLE: Setting Sub-Max Level for Table of Contents in Docsify\nDESCRIPTION: Demonstrates how to add a table of contents (TOC) in a custom sidebar by setting the subMaxLevel option in Docsify configuration.\nSOURCE: https://github.com/docsifyjs/docsify/blob/develop/docs/configuration.md#2025-04-21_snippet_27\n\nLANGUAGE: javascript\nCODE:\n```\nwindow.$docsify = {\n  subMaxLevel: 2,\n};\n```\n\n----------------------------------------\n\nTITLE: Loading Prism Themes in HTML\nDESCRIPTION: Demonstrates how to load Prism themes for syntax highlighting. Themes can be applied for both light and dark modes, and must be loaded after Docsify themes.\nSOURCE: https://github.com/docsifyjs/docsify/blob/develop/docs/language-highlight.md#2025-04-21_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<!-- Light and dark mode -->\n<link\n  rel=\"stylesheet\"\n  href=\"//cdn.jsdelivr.net/npm/prism-themes@1/themes/prism-one-light.min.css\"\n/>\n```\n\nLANGUAGE: html\nCODE:\n```\n<!-- Dark mode only -->\n<link\n  rel=\"stylesheet\"\n  media=\"(prefers-color-scheme: dark)\"\n  href=\"//cdn.jsdelivr.net/npm/prism-themes@1/themes/prism-one-dark.min.css\"\n/>\n\n<!-- Light mode only -->\n<link\n  rel=\"stylesheet\"\n  media=\"(prefers-color-scheme: light)\"\n  href=\"//cdn.jsdelivr.net/npm/prism-themes@1/themes/prism-one-light.min.css\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Adding Loading Animation in Docsify\nDESCRIPTION: HTML code for adding a loading animation that displays while waiting for Docsify to initialize by applying the 'loading' class to the body element.\nSOURCE: https://github.com/docsifyjs/docsify/blob/develop/docs/themes.md#2025-04-21_snippet_6\n\nLANGUAGE: html\nCODE:\n```\n<body class=\"loading\">\n```\n\n----------------------------------------\n\nTITLE: Using Chevron Icon for Sidebar Toggle in Docsify\nDESCRIPTION: HTML code for displaying a chevron icon in the sidebar toggle button instead of the default kebab icon.\nSOURCE: https://github.com/docsifyjs/docsify/blob/develop/docs/themes.md#2025-04-21_snippet_14\n\nLANGUAGE: html\nCODE:\n```\n<body class=\"sidebar-toggle-chevron\">\n```\n\n----------------------------------------\n\nTITLE: Embedding Specific Code Fragments in Docsify\nDESCRIPTION: Shows how to embed only a specific section of a code file. The fragment must be surrounded by '/// [fragment-name]' lines in the source file.\nSOURCE: https://github.com/docsifyjs/docsify/blob/develop/docs/embed-files.md#2025-04-21_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n[filename](_media/example.js ':include :type=code :fragment=demo')\n```\n\n----------------------------------------\n\nTITLE: Embedding Code from a GitHub Gist in Docsify\nDESCRIPTION: Shows how to embed code from a GitHub gist as a code block with syntax highlighting. This uses the same raw URL approach but adds the type=code parameter.\nSOURCE: https://github.com/docsifyjs/docsify/blob/develop/docs/embed-files.md#2025-04-21_snippet_8\n\nLANGUAGE: markdown\nCODE:\n```\n[gist: script.js](https://gist.githubusercontent.com/anikethsaha/f88893bb563bb7229d6e575db53a8c15/raw/script.js ':include :type=code')\n```\n\n----------------------------------------\n\nTITLE: Adding Right Sidebar Chevrons in Docsify\nDESCRIPTION: HTML code for adding expand/collapse icons on page links in the sidebar, positioned on the right side.\nSOURCE: https://github.com/docsifyjs/docsify/blob/develop/docs/themes.md#2025-04-21_snippet_7\n\nLANGUAGE: html\nCODE:\n```\n<body class=\"sidebar-chevron-right\">\n```\n\n----------------------------------------\n\nTITLE: Adding Left Sidebar Chevrons in Docsify\nDESCRIPTION: HTML code for adding expand/collapse icons on page links in the sidebar, positioned on the left side.\nSOURCE: https://github.com/docsifyjs/docsify/blob/develop/docs/themes.md#2025-04-21_snippet_8\n\nLANGUAGE: html\nCODE:\n```\n<body class=\"sidebar-chevron-left\">\n```\n\n----------------------------------------\n\nTITLE: Matching Routes in Docsify\nDESCRIPTION: Demonstrates how Docsify maps markdown files to URL routes.\nSOURCE: https://github.com/docsifyjs/docsify/blob/develop/docs/adding-pages.md#2025-04-21_snippet_1\n\nLANGUAGE: text\nCODE:\n```\ndocs/README.md        => http://domain.com\ndocs/guide.md         => http://domain.com/#/guide\ndocs/zh-cn/README.md  => http://domain.com/#/zh-cn/\ndocs/zh-cn/guide.md   => http://domain.com/#/zh-cn/guide\n```\n\n----------------------------------------\n\nTITLE: Embedding Markdown Content from a GitHub Gist in Docsify\nDESCRIPTION: Demonstrates how to embed markdown content directly from a GitHub gist using the raw gist URL format. This allows seamless integration of external content.\nSOURCE: https://github.com/docsifyjs/docsify/blob/develop/docs/embed-files.md#2025-04-21_snippet_7\n\nLANGUAGE: markdown\nCODE:\n```\n[gist: content.md](https://gist.githubusercontent.com/anikethsaha/f88893bb563bb7229d6e575db53a8c15/raw/content.md ':include')\n```\n\n----------------------------------------\n\nTITLE: Using Hamburger Icon for Sidebar Toggle in Docsify\nDESCRIPTION: HTML code for displaying a hamburger icon (three lines) in the sidebar toggle button instead of the default kebab icon.\nSOURCE: https://github.com/docsifyjs/docsify/blob/develop/docs/themes.md#2025-04-21_snippet_15\n\nLANGUAGE: html\nCODE:\n```\n<body class=\"sidebar-toggle-hamburger\">\n```\n\n----------------------------------------\n\nTITLE: Configuring Localized 404 Pages in Docsify\nDESCRIPTION: Sets up different 404 pages for different languages or routes using an object configuration for the notFoundPage option.\nSOURCE: https://github.com/docsifyjs/docsify/blob/develop/docs/configuration.md#2025-04-21_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nwindow.$docsify = {\n  notFoundPage: {\n    '/': '_404.md',\n    '/de': 'de/_404.md',\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Enabling External Script Support in Docsify\nDESCRIPTION: Demonstrates how to include the external script plugin for Docsify, which is necessary for making external scripts work within the documentation.\nSOURCE: https://github.com/docsifyjs/docsify/blob/develop/docs/plugins.md#2025-04-21_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"//cdn.jsdelivr.net/npm/docsify@5/dist/plugins/external-script.min.js\"></script>\n```\n\n----------------------------------------\n\nTITLE: Configuring Docsify to Load Sidebar\nDESCRIPTION: HTML snippet showing how to enable sidebar loading in Docsify configuration.\nSOURCE: https://github.com/docsifyjs/docsify/blob/develop/docs/adding-pages.md#2025-04-21_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<!-- index.html -->\n\n<script>\n  window.$docsify = {\n    loadSidebar: true,\n  };\n</script>\n<script src=\"//cdn.jsdelivr.net/npm/docsify@5/dist/docsify.min.js\"></script>\n```\n\n----------------------------------------\n\nTITLE: Netlify Redirect Configuration for HTML5 Router\nDESCRIPTION: A redirect rule for Netlify that ensures all requests are routed to index.html with a 200 status code. This configuration is necessary when using Docsify with HTML5 router mode.\nSOURCE: https://github.com/docsifyjs/docsify/blob/develop/docs/deploy.md#2025-04-21_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\n/*    /index.html   200\n```\n\n----------------------------------------\n\nTITLE: Integrating Copy to Clipboard Functionality in Docsify\nDESCRIPTION: Shows how to add a 'Click to copy' button to all preformatted code blocks in Docsify documentation for easy code copying.\nSOURCE: https://github.com/docsifyjs/docsify/blob/develop/docs/plugins.md#2025-04-21_snippet_7\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"//cdn.jsdelivr.net/npm/docsify-copy-code/dist/docsify-copy-code.min.js\"></script>\n```\n\n----------------------------------------\n\nTITLE: Configuring noCompileLinks Option in Docsify\nDESCRIPTION: Sets up the noCompileLinks option to prevent Docsify from handling specific links. Each string in the array is converted to a regular expression and matched against link hrefs.\nSOURCE: https://github.com/docsifyjs/docsify/blob/develop/docs/configuration.md#2025-04-21_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nwindow.$docsify = {\n  noCompileLinks: ['/foo', '/bar/.*'],\n};\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Sidebar in Markdown\nDESCRIPTION: Example of a simple sidebar structure in Markdown format for Docsify.\nSOURCE: https://github.com/docsifyjs/docsify/blob/develop/docs/adding-pages.md#2025-04-21_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n<!-- docs/_sidebar.md -->\n\n- [Home](/)\n- [Page 1](page-1.md)\n```\n\n----------------------------------------\n\nTITLE: Enabling Native Emoji Rendering in Docsify\nDESCRIPTION: Shows how to enable the nativeEmoji option which renders emoji shorthand codes using platform-native emoji characters instead of GitHub-style emoji images.\nSOURCE: https://github.com/docsifyjs/docsify/blob/develop/docs/configuration.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nwindow.$docsify = {\n  nativeEmoji: true,\n};\n```\n\n----------------------------------------\n\nTITLE: AWS Amplify Build Configuration for Docsify\nDESCRIPTION: AWS Amplify YAML configuration file that specifies the build process for a Docsify site. This example skips the build step and sets the base directory to '/docs' for deployment.\nSOURCE: https://github.com/docsifyjs/docsify/blob/develop/docs/deploy.md#2025-04-21_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nversion: 0.1\nfrontend:\n  phases:\n    build:\n      commands:\n        - echo \"Nothing to build\"\n  artifacts:\n    baseDirectory: /docs\n    files:\n      - '**/*'\n  cache:\n    paths: []\n```\n\n----------------------------------------\n\nTITLE: Creating Standalone Docsify Plugin File\nDESCRIPTION: Demonstrates how to create a separate plugin file that can be loaded via script tag.\nSOURCE: https://github.com/docsifyjs/docsify/blob/develop/docs/write-a-plugin.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  function myPlugin(hook, vm) {\n    // ...\n  }\n\n  // Add plugin to docsify's plugin array\n  window.$docsify = window.$docsify || {};\n  $docsify.plugins = [...($docsify.plugins || []), myPlugin];\n}\n```\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"docsify-plugin-myplugin.js\"></script>\n```\n\n----------------------------------------\n\nTITLE: Creating Tip Callouts in Docsify Markdown\nDESCRIPTION: Shows how to create tip-style callouts using docsify's question mark prefix syntax for general tips and notes.\nSOURCE: https://github.com/docsifyjs/docsify/blob/develop/docs/helpers.md#2025-04-21_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n?> _TODO_ unit test\n```\n\n----------------------------------------\n\nTITLE: Emoji Shorthand Codes Example in Markdown\nDESCRIPTION: Demonstrates how to use emoji shorthand codes in Markdown, which will be rendered as either GitHub-style images or native characters depending on the nativeEmoji setting.\nSOURCE: https://github.com/docsifyjs/docsify/blob/develop/docs/configuration.md#2025-04-21_snippet_6\n\nLANGUAGE: markdown\nCODE:\n```\n:smile:\n:partying_face:\n:joy:\n:+1:\n:-1:\n```\n\n----------------------------------------\n\nTITLE: Specifying Docsify Version (Exact Version)\nDESCRIPTION: HTML snippet showing how to include Docsify resources with an exact version number. This ensures consistent behavior across different environments.\nSOURCE: https://github.com/docsifyjs/docsify/blob/develop/docs/quickstart.md#2025-04-21_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<!-- Core Theme -->\n<link rel=\"stylesheet\" href=\"//cdn.jsdelivr.net/npm/docsify@5.0.0/themes/core.min.css\">\n\n<!-- Docsify -->\n<script src=\"//cdn.jsdelivr.net/npm/docsify@5.0.0\"></script>\n```\n\n----------------------------------------\n\nTITLE: Adding Disqus Comments to Docsify\nDESCRIPTION: Demonstrates how to integrate Disqus comments into Docsify documentation by configuring the Disqus shortname and including the necessary plugin.\nSOURCE: https://github.com/docsifyjs/docsify/blob/develop/docs/plugins.md#2025-04-21_snippet_8\n\nLANGUAGE: html\nCODE:\n```\n<script>\n  window.$docsify = {\n    disqus: 'shortname',\n  };\n</script>\n<script src=\"//cdn.jsdelivr.net/npm/docsify@5/dist/plugins/disqus.min.js\"></script>\n```\n\n----------------------------------------\n\nTITLE: Creating Task Lists in Docsify Markdown\nDESCRIPTION: Shows how to create interactive task lists with checkboxes using Markdown syntax. Includes examples of checked, unchecked, and nested items.\nSOURCE: https://github.com/docsifyjs/docsify/blob/develop/docs/helpers.md#2025-04-21_snippet_7\n\nLANGUAGE: markdown\nCODE:\n```\n- [ ] foo\n- bar\n- [x] baz\n- [] bam <~ not working\n  - [ ] bim\n  - [ ] lim\n```\n\n----------------------------------------\n\nTITLE: Disabling Emoji Parsing for Specific Text\nDESCRIPTION: Shows how to render emoji shorthand codes as literal text by replacing colon characters with HTML entities.\nSOURCE: https://github.com/docsifyjs/docsify/blob/develop/docs/configuration.md#2025-04-21_snippet_7\n\nLANGUAGE: markdown\nCODE:\n```\n&colon;100&colon;\n```\n\n----------------------------------------\n\nTITLE: Basic Markdown Navigation Structure in _navbar.md\nDESCRIPTION: Simple markdown implementation for a language switcher navigation in Docsify. This defines links to English and Chinese versions of the documentation using the _navbar.md file.\nSOURCE: https://github.com/docsifyjs/docsify/blob/develop/docs/custom-navbar.md#2025-04-21_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n<!-- _navbar.md -->\n\n- [En](/)\n- [chinese](/zh-cn/)\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple Cover Pages for Different Languages (JavaScript)\nDESCRIPTION: Sets up multiple cover pages for different language paths in the Docsify configuration using an array.\nSOURCE: https://github.com/docsifyjs/docsify/blob/develop/docs/cover.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nwindow.$docsify = {\n  coverpage: ['/', '/zh-cn/'],\n};\n```\n\n----------------------------------------\n\nTITLE: Setting Repository Information in Docsify\nDESCRIPTION: Configures the repository URL to add the GitHub Corner widget in the top right corner of the site. Can be a username/repo string or a complete URL.\nSOURCE: https://github.com/docsifyjs/docsify/blob/develop/docs/configuration.md#2025-04-21_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\nwindow.$docsify = {\n  repo: 'docsifyjs/docsify',\n  // or\n  repo: 'https://github.com/docsifyjs/docsify/',\n};\n```\n\n----------------------------------------\n\nTITLE: Disabling Emoji Parsing Globally in Docsify\nDESCRIPTION: Shows how to disable all emoji parsing by setting the noEmoji option to true, which renders all emoji shorthand codes as literal text.\nSOURCE: https://github.com/docsifyjs/docsify/blob/develop/docs/configuration.md#2025-04-21_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nwindow.$docsify = {\n  noEmoji: true,\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Default 404 Page in Docsify\nDESCRIPTION: Sets up the notFoundPage option to display the default '404 - Not Found' message when a page is not found.\nSOURCE: https://github.com/docsifyjs/docsify/blob/develop/docs/configuration.md#2025-04-21_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nwindow.$docsify = {\n  notFoundPage: false,\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Vue.js Computed Properties in Docsify\nDESCRIPTION: Demonstrates how to use Vue.js computed properties within Docsify for dynamic content generation.\nSOURCE: https://github.com/docsifyjs/docsify/blob/develop/docs/vue.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  computed: {\n    timeOfDay() {\n      const date = new Date();\n      const hours = date.getHours();\n\n      if (hours < 12) {\n        return 'morning';\n      }\n      else if (hours < 18) {\n        return 'afternoon';\n      }\n      else {\n        return 'evening'\n      }\n    }\n  },\n}\n```\n\nLANGUAGE: markdown\nCODE:\n```\nGood {{ timeOfDay }}!\n```\n\n----------------------------------------\n\nTITLE: Firebase Configuration for Docsify Hosting\nDESCRIPTION: Firebase configuration JSON file for hosting a Docsify site. Specifies the deployment directory ('site') and files to ignore during deployment.\nSOURCE: https://github.com/docsifyjs/docsify/blob/develop/docs/deploy.md#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"hosting\": {\n    \"public\": \"site\",\n    \"ignore\": [\"firebase.json\", \"**/.*\", \"**/node_modules/**\"]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Controlling Image Sizes in Docsify Markdown\nDESCRIPTION: Demonstrates various ways to control image dimensions using the ':size=' attribute, including fixed width and height, single dimension, and percentage-based sizing.\nSOURCE: https://github.com/docsifyjs/docsify/blob/develop/docs/helpers.md#2025-04-21_snippet_10\n\nLANGUAGE: markdown\nCODE:\n```\n![logo](https://docsify.js.org/_media/icon.svg ':size=WIDTHxHEIGHT')\n![logo](https://docsify.js.org/_media/icon.svg ':size=50x100')\n![logo](https://docsify.js.org/_media/icon.svg ':size=100')\n\n<!-- Support percentage -->\n\n![logo](https://docsify.js.org/_media/icon.svg ':size=10%')\n```\n\n----------------------------------------\n\nTITLE: Implementing Specific Version of Docsify via CDN\nDESCRIPTION: HTML code to include a specific version of Docsify via CDN. This approach prevents any automatic updates and requires manual updates when new versions are released, providing maximum stability.\nSOURCE: https://github.com/docsifyjs/docsify/blob/develop/docs/cdn.md#2025-04-21_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<!-- Theme -->\n<link rel=\"stylesheet\" href=\"//cdn.jsdelivr.net/npm/docsify@5.0.0/themes/vue.min.css\" />\n\n<!-- Docsify -->\n<script src=\"//cdn.jsdelivr.net/npm/docsify@5.0.0/dist/docsify.min.js\"></script>\n```\n\n----------------------------------------\n\nTITLE: Defining Vue.js Data in Docsify\nDESCRIPTION: Example of defining data in a Vue.js instance within Docsify, and how to use it in markdown content.\nSOURCE: https://github.com/docsifyjs/docsify/blob/develop/docs/vue.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  data() {\n    return {\n      message: 'Hello, World!'\n    };\n  }\n}\n```\n\nLANGUAGE: markdown\nCODE:\n```\n<!-- Show message in docsify, show \"{{ message }}\" elsewhere (e.g. GitHub)  -->\n{{ message }}\n\n<!-- Show message in docsify, hide elsewhere (e.g. GitHub)  -->\n<p v-text=\"message\"></p>\n```\n\n----------------------------------------\n\nTITLE: Wrapping Markdown in HTML Tags in Docsify\nDESCRIPTION: Shows how to wrap Markdown content inside HTML tags to apply styling or other HTML attributes to Markdown elements.\nSOURCE: https://github.com/docsifyjs/docsify/blob/develop/docs/helpers.md#2025-04-21_snippet_13\n\nLANGUAGE: markdown\nCODE:\n```\n<div style='color: red'>\n\n- listitem\n- listitem\n- listitem\n\n</div>\n```\n\n----------------------------------------\n\nTITLE: Setting Link Title with Ignore Attribute in Docsify Markdown\nDESCRIPTION: Shows how to combine the ':ignore' attribute with a title for links that shouldn't be compiled by docsify.\nSOURCE: https://github.com/docsifyjs/docsify/blob/develop/docs/helpers.md#2025-04-21_snippet_5\n\nLANGUAGE: markdown\nCODE:\n```\n[link](/demo/ ':ignore title')\n\n<a href=\"/demo/\" title=\"title\">link</a>\n```\n\n----------------------------------------\n\nTITLE: Embedding Video with HTML Attributes in Docsify\nDESCRIPTION: Shows how to embed a video file with custom HTML attributes. The attributes are added directly after the type declaration.\nSOURCE: https://github.com/docsifyjs/docsify/blob/develop/docs/embed-files.md#2025-04-21_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n[filename](_media/example.mp4 ':include :type=video controls width=100%')\n```\n\n----------------------------------------\n\nTITLE: Configuring Skip Link in Docsify\nDESCRIPTION: Shows various ways to configure the skip navigation link in Docsify, including default behavior, localized links based on route paths, and disabling the skip link entirely.\nSOURCE: https://github.com/docsifyjs/docsify/blob/develop/docs/configuration.md#2025-04-21_snippet_26\n\nLANGUAGE: javascript\nCODE:\n```\n// Render skip link for all routes (default)\nwindow.$docsify = {\n  skipLink: 'Skip to main content',\n};\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// Render localized skip links based on route paths\nwindow.$docsify = {\n  skipLink: {\n    '/es/': 'Saltar al contenido principal',\n    '/de-de/': 'Ga naar de hoofdinhoud',\n    '/ru-ru/': '–ü–µ—Ä–µ–π—Ç–∏ –∫ –æ—Å–Ω–æ–≤–Ω–æ–º—É —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—é',\n    '/zh-cn/': 'Ë∑≥Âà∞‰∏ªË¶ÅÂÜÖÂÆπ',\n  },\n};\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// Do not render skip link\nwindow.$docsify = {\n  skipLink: false,\n};\n```\n\n----------------------------------------\n\nTITLE: Adding Per-Page Custom Styles in Docsify Markdown\nDESCRIPTION: Markdown example showing how to set theme properties on a per-page basis within a markdown file using a style tag.\nSOURCE: https://github.com/docsifyjs/docsify/blob/develop/docs/themes.md#2025-04-21_snippet_17\n\nLANGUAGE: markdown\nCODE:\n```\n# My Heading\n\nHello, World!\n\n<style>\n  :root {\n    /* ... */\n  }\n</style>\n```\n\n----------------------------------------\n\nTITLE: Embedding Markdown with YAML Front Matter in Docsify\nDESCRIPTION: Demonstrates how to include a markdown file that contains YAML front matter. When embedded, the front matter will be automatically stripped from the rendered content.\nSOURCE: https://github.com/docsifyjs/docsify/blob/develop/docs/embed-files.md#2025-04-21_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n[filename](_media/example-with-yaml.md ':include')\n```\n\n----------------------------------------\n\nTITLE: Loading Custom 404 Page in Docsify\nDESCRIPTION: Shows how to specify a custom 404 page path that Docsify will load when a page is not found.\nSOURCE: https://github.com/docsifyjs/docsify/blob/develop/docs/configuration.md#2025-04-21_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nwindow.$docsify = {\n  notFoundPage: 'my404.md',\n};\n```\n\n----------------------------------------\n\nTITLE: Loading Vue Theme Add-on in Docsify\nDESCRIPTION: HTML code for loading the Vue theme add-on, which is the popular Docsify v4 theme. This theme add-on works in combination with the core theme.\nSOURCE: https://github.com/docsifyjs/docsify/blob/develop/docs/themes.md#2025-04-21_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<!-- Vue Theme (add-on) -->\n<link rel=\"stylesheet\" href=\"//cdn.jsdelivr.net/npm/docsify@5/dist/themes/addons/vue.min.css\" />\n```\n\n----------------------------------------\n\nTITLE: Activating Cover Feature in Docsify Configuration (JavaScript)\nDESCRIPTION: Sets the coverpage option to true in the Docsify configuration to enable the cover page feature.\nSOURCE: https://github.com/docsifyjs/docsify/blob/develop/docs/cover.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nwindow.$docsify = {\n  coverpage: true,\n};\n```\n\n----------------------------------------\n\nTITLE: Embedding an External Website via iframe in Docsify\nDESCRIPTION: Demonstrates how to embed an external website using an iframe with custom width and height attributes.\nSOURCE: https://github.com/docsifyjs/docsify/blob/develop/docs/embed-files.md#2025-04-21_snippet_5\n\nLANGUAGE: markdown\nCODE:\n```\n[cinwell website](https://cinwell.com ':include :type=iframe width=100% height=400px')\n```\n\n----------------------------------------\n\nTITLE: Using Emoji Flags in Navigation\nDESCRIPTION: Example of using emoji flag shortcodes in the Docsify navigation for language selection. This implementation uses the emoji plugin to display country flags rather than text labels for language options.\nSOURCE: https://github.com/docsifyjs/docsify/blob/develop/docs/custom-navbar.md#2025-04-21_snippet_6\n\nLANGUAGE: markdown\nCODE:\n```\n<!-- _navbar.md -->\n\n- [:us:, :uk:](/)\n- [:cn:](/zh-cn/)\n```\n\n----------------------------------------\n\nTITLE: Loading Additional Prism Language Grammars in HTML\nDESCRIPTION: Shows how to include Prism grammar files for additional language support. These scripts must be loaded after Docsify.\nSOURCE: https://github.com/docsifyjs/docsify/blob/develop/docs/language-highlight.md#2025-04-21_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"//cdn.jsdelivr.net/npm/prismjs@1/components/prism-bash.min.js\"></script>\n<script src=\"//cdn.jsdelivr.net/npm/prismjs@1/components/prism-docker.min.js\"></script>\n<script src=\"//cdn.jsdelivr.net/npm/prismjs@1/components/prism-git.min.js\"></script>\n<script src=\"//cdn.jsdelivr.net/npm/prismjs@1/components/prism-java.min.js\"></script>\n<script src=\"//cdn.jsdelivr.net/npm/prismjs@1/components/prism-jsx.min.js\"></script>\n<script src=\"//cdn.jsdelivr.net/npm/prismjs@1/components/prism-markdown.min.js\"></script>\n<script src=\"//cdn.jsdelivr.net/npm/prismjs@1/components/prism-php.min.js\"></script>\n<script src=\"//cdn.jsdelivr.net/npm/prismjs@1/components/prism-python.min.js\"></script>\n<script src=\"//cdn.jsdelivr.net/npm/prismjs@1/components/prism-rust.min.js\"></script>\n<script src=\"//cdn.jsdelivr.net/npm/prismjs@1/components/prism-sql.min.js\"></script>\n<script src=\"//cdn.jsdelivr.net/npm/prismjs@1/components/prism-swift.min.js\"></script>\n<script src=\"//cdn.jsdelivr.net/npm/prismjs@1/components/prism-typescript.min.js\"></script>\n<script src=\"//cdn.jsdelivr.net/npm/prismjs@1/components/prism-yaml.min.js\"></script>\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Cover Page (Markdown)\nDESCRIPTION: Example of a basic _coverpage.md file with logo, title, description, feature list and navigation buttons.\nSOURCE: https://github.com/docsifyjs/docsify/blob/develop/docs/cover.md#2025-04-21_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n<!-- _coverpage.md -->\n\n![logo](_media/icon.svg)\n\n# docsify\n\n> A magical documentation site generator\n\n- Simple and lightweight\n- No statically built HTML files\n- Multiple themes\n\n[GitHub](https://github.com/docsifyjs/docsify/)\n[Get Started](#docsify)\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Cover Page Files (JavaScript)\nDESCRIPTION: Sets up custom cover page file names for different language paths using an object mapping in the Docsify configuration.\nSOURCE: https://github.com/docsifyjs/docsify/blob/develop/docs/cover.md#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nwindow.$docsify = {\n  coverpage: {\n    '/': 'cover.md',\n    '/zh-cn/': 'cover.md',\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Setting Cover Page Background Color (Markdown)\nDESCRIPTION: Markdown syntax to set a specific background color for the cover page using the color attribute.\nSOURCE: https://github.com/docsifyjs/docsify/blob/develop/docs/cover.md#2025-04-21_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n<!-- background color -->\n\n![color](#f0f0f0)\n```\n\n----------------------------------------\n\nTITLE: Configuring Cover Page Only Mode in Docsify\nDESCRIPTION: Sets the onlyCover option to determine whether only the cover page is loaded when visiting the home page.\nSOURCE: https://github.com/docsifyjs/docsify/blob/develop/docs/configuration.md#2025-04-21_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nwindow.$docsify = {\n  onlyCover: false,\n};\n```\n\n----------------------------------------\n\nTITLE: Customizing Cover Page with CSS Variables\nDESCRIPTION: CSS variable declarations to customize the appearance of the cover page including background, overlay, colors, and typography.\nSOURCE: https://github.com/docsifyjs/docsify/blob/develop/docs/cover.md#2025-04-21_snippet_2\n\nLANGUAGE: css\nCODE:\n```\n:root {\n  --cover-bg         : url('path/to/image.png');\n  --cover-bg-overlay : rgba(0, 0, 0, 0.5);\n  --cover-color      : #fff;\n  --cover-title-color: var(--theme-color);\n  --cover-title-font : 600 var(--font-size-xxxl) var(--font-family);\n}\n```\n\n----------------------------------------\n\nTITLE: Integrating Emoji Plugin with Custom Navigation\nDESCRIPTION: HTML configuration for including the emoji plugin with Docsify. This setup enables the use of emoji shortcodes in the navigation and content.\nSOURCE: https://github.com/docsifyjs/docsify/blob/develop/docs/custom-navbar.md#2025-04-21_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<!-- index.html -->\n\n<script>\n  window.$docsify = {\n    // ...\n  };\n</script>\n<script src=\"//cdn.jsdelivr.net/npm/docsify@5/dist/docsify.min.js\"></script>\n<script src=\"//cdn.jsdelivr.net/npm/docsify@5/dist/plugins/emoji.min.js\"></script>\n```\n\n----------------------------------------\n\nTITLE: HTML Output Element Implementation\nDESCRIPTION: Demonstrates the use of HTML output element with custom data attributes and nested content including paragraphs and ordered lists.\nSOURCE: https://github.com/docsifyjs/docsify/blob/develop/docs/ui-kit.md#2025-04-21_snippet_5\n\nLANGUAGE: HTML\nCODE:\n```\n<output data-lang=\"output\">\n  <p>Et cum fugiat nesciunt voluptates. A atque quos doloribus dolorem quo.</p>\n  <ol>\n    <li>Item</li>\n    <li>Item</li>\n    <li>Item</li>\n  </ol>\n</output>\n```\n\n----------------------------------------\n\nTITLE: Loading Default 404 Page in Docsify\nDESCRIPTION: Configures Docsify to load the default _404.md file when a page is not found.\nSOURCE: https://github.com/docsifyjs/docsify/blob/develop/docs/configuration.md#2025-04-21_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nwindow.$docsify = {\n  notFoundPage: true,\n};\n```\n\n----------------------------------------\n\nTITLE: Adding CSS Classes to Images in Docsify Markdown\nDESCRIPTION: Demonstrates how to add custom CSS class names to images using the ':class=' attribute syntax.\nSOURCE: https://github.com/docsifyjs/docsify/blob/develop/docs/helpers.md#2025-04-21_snippet_8\n\nLANGUAGE: markdown\nCODE:\n```\n![logo](https://docsify.js.org/_media/icon.svg ':class=someCssClass')\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Page Titles in Sidebar\nDESCRIPTION: Markdown example showing how to set custom page titles for better SEO in Docsify sidebar.\nSOURCE: https://github.com/docsifyjs/docsify/blob/develop/docs/adding-pages.md#2025-04-21_snippet_7\n\nLANGUAGE: markdown\nCODE:\n```\n<!-- docs/_sidebar.md -->\n\n- [Home](/)\n- [Guide](guide.md 'The greatest guide in the world')\n```\n\n----------------------------------------\n\nTITLE: Advanced Custom CSS Styling for Docsify\nDESCRIPTION: CSS example showing advanced styling for active sidebar links, using both custom CSS declarations and theme property variables.\nSOURCE: https://github.com/docsifyjs/docsify/blob/develop/docs/themes.md#2025-04-21_snippet_21\n\nLANGUAGE: css\nCODE:\n```\n.sidebar li.active > a {\n  border-right: 3px solid var(--theme-color);\n}\n```\n\n----------------------------------------\n\nTITLE: Ignoring Specific Headers in Docsify Sidebar\nDESCRIPTION: Markdown examples demonstrating how to ignore specific headers or all headers on a page in Docsify sidebar.\nSOURCE: https://github.com/docsifyjs/docsify/blob/develop/docs/adding-pages.md#2025-04-21_snippet_9\n\nLANGUAGE: markdown\nCODE:\n```\n# Getting Started\n\n## Header <!-- {docsify-ignore} -->\n\nThis header won't appear in the sidebar table of contents.\n```\n\nLANGUAGE: markdown\nCODE:\n```\n# Getting Started <!-- {docsify-ignore-all} -->\n\n## Header\n\nThis header won't appear in the sidebar table of contents.\n```\n\n----------------------------------------\n\nTITLE: Adding IDs to Headings in Docsify Markdown\nDESCRIPTION: Shows how to add custom IDs to headings for direct linking using the ':id=' syntax at the end of a heading.\nSOURCE: https://github.com/docsifyjs/docsify/blob/develop/docs/helpers.md#2025-04-21_snippet_11\n\nLANGUAGE: markdown\nCODE:\n```\n### Hello, world! :id=hello-world\n```\n\n----------------------------------------\n\nTITLE: Creating Sectioned Sidebar in Markdown\nDESCRIPTION: Example of a sidebar with section headers in Markdown format for Docsify.\nSOURCE: https://github.com/docsifyjs/docsify/blob/develop/docs/adding-pages.md#2025-04-21_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n<!-- docs/_sidebar.md -->\n\n- Section Header 1\n\n  - [Home](/)\n  - [Page 1](page-1.md)\n\n- Section Header 2\n\n  - [Page 2](page-2.md)\n  - [Page 3](page-3.md)\n```\n\n----------------------------------------\n\nTITLE: Overriding Docsify Theme Properties for Prism\nDESCRIPTION: Shows how to override default Docsify theme properties that affect Prism styles, allowing the use of Prism theme values instead.\nSOURCE: https://github.com/docsifyjs/docsify/blob/develop/docs/language-highlight.md#2025-04-21_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<style>\n  :root {\n    --border-radius   : unset;\n    --font-family-mono: unset;\n    --font-size-mono  : unset;\n  }\n</style>\n```\n\n----------------------------------------\n\nTITLE: Configuring Nested Sidebars with Alias in Docsify\nDESCRIPTION: HTML snippet demonstrating how to configure nested sidebars using alias in Docsify.\nSOURCE: https://github.com/docsifyjs/docsify/blob/develop/docs/adding-pages.md#2025-04-21_snippet_6\n\nLANGUAGE: html\nCODE:\n```\n<script>\n  window.$docsify = {\n    loadSidebar: true,\n    alias: {\n      '/.*/_sidebar.md': '/_sidebar.md',\n    },\n  };\n</script>\n```\n\n----------------------------------------\n\nTITLE: Displaying Directory Structure for Docsify Pages\nDESCRIPTION: Shows the basic directory structure for a Docsify project with multiple pages and language support.\nSOURCE: https://github.com/docsifyjs/docsify/blob/develop/docs/adding-pages.md#2025-04-21_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n.\n‚îî‚îÄ‚îÄ docs\n    ‚îú‚îÄ‚îÄ README.md\n    ‚îú‚îÄ‚îÄ guide.md\n    ‚îî‚îÄ‚îÄ zh-cn\n        ‚îú‚îÄ‚îÄ README.md\n        ‚îî‚îÄ‚îÄ guide.md\n```\n\n----------------------------------------\n\nTITLE: Selective Emoji Parsing in Markdown\nDESCRIPTION: Shows how to use both regular emoji shorthand codes and escaped codes in the same document, allowing for selective emoji rendering.\nSOURCE: https://github.com/docsifyjs/docsify/blob/develop/docs/configuration.md#2025-04-21_snippet_11\n\nLANGUAGE: markdown\nCODE:\n```\n:100:\n\n&colon;100&colon;\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Theme Properties in Docsify\nDESCRIPTION: CSS example for setting custom theme properties for font size, line height, and theme color within a :root declaration.\nSOURCE: https://github.com/docsifyjs/docsify/blob/develop/docs/themes.md#2025-04-21_snippet_18\n\nLANGUAGE: css\nCODE:\n```\n:root {\n  --theme-color: red;\n  --font-size  : 15px;\n  --line-height: 1.5;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Language Selection Menu in Markdown for Docsify\nDESCRIPTION: This code snippet defines a Markdown-based navigation menu for selecting different language versions of the Docsify documentation. It uses bullet points to list available translations with corresponding links.\nSOURCE: https://github.com/docsifyjs/docsify/blob/develop/docs/_navbar.md#2025-04-21_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n<!-- markdownlint-disable first-line-h1 -->\n\n- Translations\n\n  - [English](/)\n  - [ÁÆÄ‰Ωì‰∏≠Êñá](/zh-cn/)\n  - [Deutsch](/de-de/)\n  - [Espa√±ol](/es/)\n  - [–†—É—Å—Å–∫–∏–π](/ru-ru/)\n```\n\n----------------------------------------\n\nTITLE: Using Custom Web Fonts in Docsify\nDESCRIPTION: CSS example for using custom web fonts by importing them from Google Fonts and modifying font-family theme properties to use these fonts.\nSOURCE: https://github.com/docsifyjs/docsify/blob/develop/docs/themes.md#2025-04-21_snippet_20\n\nLANGUAGE: css\nCODE:\n```\n/* Fonts: Noto Sans, Noto Emoji, Noto Mono */\n@import url('https://fonts.googleapis.com/css2?family=Noto+Color+Emoji&family=Noto+Sans+Mono:wght@100..900&family=Noto+Sans:ital,wght@0,100..900;1,100..900&display=swap');\n\n:root {\n  --font-family      : 'Noto Sans', sans-serif;\n  --font-family-emoji: 'Noto Color Emoji', sans-serif;\n  --font-family-mono : 'Noto Sans Mono', monospace;\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Link Target in Docsify Markdown\nDESCRIPTION: Demonstrates how to specify the target attribute for links using the ':target=' syntax to control link opening behavior.\nSOURCE: https://github.com/docsifyjs/docsify/blob/develop/docs/helpers.md#2025-04-21_snippet_6\n\nLANGUAGE: markdown\nCODE:\n```\n[link](/demo ':target=_blank')\n[link](/demo2 ':target=_self')\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Element for Docsify\nDESCRIPTION: HTML and JavaScript snippet showing how to use a custom element for the Docsify app and configure it in the Docsify settings.\nSOURCE: https://github.com/docsifyjs/docsify/blob/develop/docs/quickstart.md#2025-04-21_snippet_9\n\nLANGUAGE: html\nCODE:\n```\n<!-- index.html -->\n\n<div data-app id=\"main\">Please wait...</div>\n\n<script>\n  window.$docsify = {\n    el: '#main',\n  };\n</script>\n```\n\n----------------------------------------\n\nTITLE: Adding Box-Style Sidebar Groups in Docsify\nDESCRIPTION: HTML code for adding visual distinction between groups of links in the sidebar using a box-style design.\nSOURCE: https://github.com/docsifyjs/docsify/blob/develop/docs/themes.md#2025-04-21_snippet_11\n\nLANGUAGE: html\nCODE:\n```\n<body class=\"sidebar-group-box\">\n```\n\n----------------------------------------\n\nTITLE: Ignoring Link Compilation in Docsify Markdown\nDESCRIPTION: Demonstrates how to prevent docsify from compiling a link using the ':ignore' attribute, allowing direct HTML links.\nSOURCE: https://github.com/docsifyjs/docsify/blob/develop/docs/helpers.md#2025-04-21_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n[link](/demo/ ':ignore')\n```\n\n----------------------------------------\n\nTITLE: Preventing Chevrons for Specific Links in Docsify\nDESCRIPTION: Markdown code showing how to prevent chevrons from displaying for specific page links by adding the 'no-chevron' class.\nSOURCE: https://github.com/docsifyjs/docsify/blob/develop/docs/themes.md#2025-04-21_snippet_9\n\nLANGUAGE: markdown\nCODE:\n```\n[My Page](page.md ':class=no-chevron')\n```\n\n----------------------------------------\n\nTITLE: Adding Underline-Style Sidebar Groups in Docsify\nDESCRIPTION: HTML code for adding visual distinction between groups of links in the sidebar using an underline-style design.\nSOURCE: https://github.com/docsifyjs/docsify/blob/develop/docs/themes.md#2025-04-21_snippet_12\n\nLANGUAGE: html\nCODE:\n```\n<body class=\"sidebar-group-underline\">\n```\n\n----------------------------------------\n\nTITLE: Enabling Relative Path Links in Docsify\nDESCRIPTION: Configures Docsify to use relative paths for links, which makes links relative to the current context rather than the site root.\nSOURCE: https://github.com/docsifyjs/docsify/blob/develop/docs/configuration.md#2025-04-21_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\nwindow.$docsify = {\n  // Relative path enabled\n  relativePath: true,\n\n  // Relative path disabled (default value)\n  relativePath: false,\n};\n```\n\n----------------------------------------\n\nTITLE: Jest Unit/Integration Test Commands\nDESCRIPTION: Comprehensive set of commands for running and managing Jest-based unit and integration tests, including file-specific tests, test name filtering, and snapshot management.\nSOURCE: https://github.com/docsifyjs/docsify/blob/develop/test/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# Run test file(s)\nnpm run test:unit -- -i ./path/to/file.test.js\nnpm run test:unit -- -i ./path/to/*.test.js\n\n# Run test name(s)\nnpm run test:unit -- -t \"my test\"\n\n# Run test name(s) in file\nnpm run test:unit -- -i ./path/to/file.test.js -t \"my test\"\n\n# ------------------------------------------------------------------------------\n\n# Update snapshots\nnpm run test:unit -- -u\n\n# Update snapshots for test file(s)\nnpm run test:unit -- -u -i ./path/to/file.test.js\nnpm run test:unit -- -u -i ./path/to/*.test.js\n\n# Update snapshots for test name(s)\nnpm run test:unit -- -u -t \"my test\"\n\n# Update snapshots for test name(s) in file\nnpm run test:unit -- -u -i ./path/to/file.test.js -t \"my test\"\n```\n\n----------------------------------------\n\nTITLE: Limiting Sidebar Link Text to One Line in Docsify\nDESCRIPTION: HTML code for limiting multi-line sidebar links to a single line followed by an ellipsis using the sidebar-link-clamp class.\nSOURCE: https://github.com/docsifyjs/docsify/blob/develop/docs/themes.md#2025-04-21_snippet_13\n\nLANGUAGE: html\nCODE:\n```\n<body class=\"sidebar-link-clamp\">\n```\n\n----------------------------------------\n\nTITLE: Displaying File Structure for Nested Sidebars\nDESCRIPTION: Shows an example file structure for implementing nested sidebars in Docsify.\nSOURCE: https://github.com/docsifyjs/docsify/blob/develop/docs/adding-pages.md#2025-04-21_snippet_5\n\nLANGUAGE: text\nCODE:\n```\n‚îî‚îÄ‚îÄ docs/\n    ‚îú‚îÄ‚îÄ _sidebar.md\n    ‚îú‚îÄ‚îÄ index.md\n    ‚îú‚îÄ‚îÄ getting-started.md\n    ‚îî‚îÄ‚îÄ running-services.md\n```\n\n----------------------------------------\n\nTITLE: Playwright E2E Test Commands\nDESCRIPTION: Complete set of commands for running and managing Playwright-based E2E tests, including file-specific tests, test name filtering, and snapshot management.\nSOURCE: https://github.com/docsifyjs/docsify/blob/develop/test/README.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n# Run test file(s)\nnpm run test:e2e -- ./path/to/file.test.js\nnpm run test:e2e -- ./path/to/*.test.js\n\n# Run test name(s)\nnpm run test:e2e -- -g \"my test\"\n\n# Run test name(s) in file\nnpm run test:e2e -- ./path/to/file.test.js -g \"my test\"\n\n# ------------------------------------------------------------------------------\n\n# Update snapshots\nnpm run test:e2e -- -u\n\n# Update snapshots for test file(s)\nnpm run test:e2e -- -u ./path/to/file.test.js\nnpm run test:e2e -- -u ./path/to/*.test.js\n\n# Update snapshots for test name(s)\nnpm run test:e2e -- -u -g \"my test\"\n\n# Update snapshots for test name(s) in file\nnpm run test:e2e -- -u ./path/to/file.test.js -g \"my test\"\n```\n\n----------------------------------------\n\nTITLE: Creating Important Callouts in Docsify Markdown\nDESCRIPTION: Demonstrates how to create emphasized important content using docsify's callout syntax with the exclamation mark prefix.\nSOURCE: https://github.com/docsifyjs/docsify/blob/develop/docs/helpers.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n!> **Time** is money, my friend!\n```\n\n----------------------------------------\n\nTITLE: Styling Sidebar Chevrons with CSS Variables\nDESCRIPTION: CSS variables for styling the sidebar chevrons in both collapsed and expanded states, using theme color variables.\nSOURCE: https://github.com/docsifyjs/docsify/blob/develop/docs/themes.md#2025-04-21_snippet_10\n\nLANGUAGE: css\nCODE:\n```\n:root {\n  --sidebar-chevron-collapsed-color: var(--color-mono-3);\n  --sidebar-chevron-expanded-color : var(--theme-color);\n}\n```\n\n----------------------------------------\n\nTITLE: Updating test snapshots for docsify\nDESCRIPTION: Command to update Jest snapshots when they fail or when adding new snapshots to the test suite.\nSOURCE: https://github.com/docsifyjs/docsify/blob/develop/CONTRIBUTING.md#2025-04-21_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nnpx jest --updateSnapshot\n```\n\n----------------------------------------\n\nTITLE: Disabling Link Compilation in Docsify Markdown\nDESCRIPTION: Demonstrates how to create a disabled link using the special ':disabled' attribute in Markdown links.\nSOURCE: https://github.com/docsifyjs/docsify/blob/develop/docs/helpers.md#2025-04-21_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n[link](/demo ':disabled')\n```\n\n----------------------------------------\n\nTITLE: Defining YAML Frontmatter in Markdown\nDESCRIPTION: This snippet shows how to include YAML frontmatter at the beginning of a Markdown file. It defines metadata such as the author and date of the document.\nSOURCE: https://github.com/docsifyjs/docsify/blob/develop/docs/_media/example-with-yaml.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nauthor: John Smith\ndate: 2020-1-1\n---\n```\n\n----------------------------------------\n\nTITLE: Adding Google Analytics Plugin to Docsify\nDESCRIPTION: Feature implementation that adds Google Analytics integration to Docsify, referenced in issue #66.\nSOURCE: https://github.com/docsifyjs/docsify/blob/develop/HISTORY.md#2025-04-21_snippet_2\n\nLANGUAGE: Markdown\nCODE:\n```\n### Features\n\n* **plugins:** add Google Analytics plugin ([#66](https://github.com/QingWei-Li/docsify/issues/66)) ([ac61bb0](https://github.com/QingWei-Li/docsify/commit/ac61bb0))\n```\n\n----------------------------------------\n\nTITLE: Adding IDs to Images in Docsify Markdown\nDESCRIPTION: Shows how to add CSS ID attributes to images using the ':id=' attribute syntax.\nSOURCE: https://github.com/docsifyjs/docsify/blob/develop/docs/helpers.md#2025-04-21_snippet_9\n\nLANGUAGE: markdown\nCODE:\n```\n![logo](https://docsify.js.org/_media/icon.svg ':id=someCssId')\n```\n\n----------------------------------------\n\nTITLE: Docsify Emoji Shortcodes\nDESCRIPTION: Examples of emoji shortcodes that can be used in Docsify documentation. Each emoji is shown with its visual representation followed by its corresponding shortcode.\nSOURCE: https://github.com/docsifyjs/docsify/blob/develop/docs/emoji.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n:100: `:100:`\n:1234: `:1234:`\n:+1: `:+1:`\n:-1: `:-1:`\n:1st_place_medal: `:1st_place_medal:`\n```\n\n----------------------------------------\n\nTITLE: HTML Grid Layout for Keyboard Reference\nDESCRIPTION: Shows a grid layout implementation using CSS Grid to display keyboard symbols and their descriptions in a structured format.\nSOURCE: https://github.com/docsifyjs/docsify/blob/develop/docs/ui-kit.md#2025-04-21_snippet_4\n\nLANGUAGE: HTML\nCODE:\n```\n<div style=\"display: grid; grid-template-columns: auto auto 1fr; gap: 1em 0.2em; align-items: end;\">\n  <div><kbd class=\"alt\">&uarr;</kbd></div>  <div><kbd>&uarr;</kbd></div>  <div>Arrow Up</div>\n  <!-- Additional rows omitted for brevity -->\n</div>\n```\n\n----------------------------------------\n\nTITLE: Installing dependencies and starting development environment for docsify\nDESCRIPTION: Command to install dependencies and start the development server for docsify. This is automatically executed when using Gitpod for contributing.\nSOURCE: https://github.com/docsifyjs/docsify/blob/develop/CONTRIBUTING.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install && npm run dev\n```\n\n----------------------------------------\n\nTITLE: Setting Cover Page Background Image (Markdown)\nDESCRIPTION: Markdown syntax to set a background image for the cover page.\nSOURCE: https://github.com/docsifyjs/docsify/blob/develop/docs/cover.md#2025-04-21_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n<!-- background image -->\n\n![](_media/bg.png)\n```\n\n----------------------------------------\n\nTITLE: Keyboard Shortcuts and Special Characters HTML Implementation\nDESCRIPTION: Demonstrates how to display keyboard shortcuts and special characters using HTML kbd elements with entity codes for various system keys.\nSOURCE: https://github.com/docsifyjs/docsify/blob/develop/docs/ui-kit.md#2025-04-21_snippet_3\n\nLANGUAGE: HTML\nCODE:\n```\n<kbd class=\"alt\">&#8963;</kbd><kbd class=\"alt\">&#8997;</kbd><kbd class=\"alt\">&#9003;</kbd>\n```\n\n----------------------------------------\n\nTITLE: Running tests for docsify\nDESCRIPTION: Command to run the test suite to ensure that all functionality is working correctly before submitting changes.\nSOURCE: https://github.com/docsifyjs/docsify/blob/develop/CONTRIBUTING.md#2025-04-21_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nnpm test\n```\n\n----------------------------------------\n\nTITLE: Specifying Docsify Version (Major Version)\nDESCRIPTION: HTML snippet demonstrating how to include Docsify resources specifying only the major version. This allows automatic minor updates and bug fixes.\nSOURCE: https://github.com/docsifyjs/docsify/blob/develop/docs/quickstart.md#2025-04-21_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<!-- Core Theme -->\n<link rel=\"stylesheet\" href=\"//cdn.jsdelivr.net/npm/docsify@5/themes/core.min.css\">\n\n<!-- Docsify -->\n<script src=\"//cdn.jsdelivr.net/npm/docsify@5\"></script>\n```\n\n----------------------------------------\n\nTITLE: HTML Table with Alignment Features\nDESCRIPTION: Shows implementation of HTML tables with different alignment options and non-breaking headers using HTML entities.\nSOURCE: https://github.com/docsifyjs/docsify/blob/develop/docs/ui-kit.md#2025-04-21_snippet_6\n\nLANGUAGE: HTML\nCODE:\n```\n| Left Align | Center Align | Right Align | Non&#8209;Breaking&nbsp;Header |\n| ---------- | :----------: | ----------: | ------------------------------ |\n| A1         |      A2      |          A3 | A4                             |\n```\n\n----------------------------------------\n\nTITLE: Running Basic Test Commands in Docsify\nDESCRIPTION: Basic npm commands for running all tests or specific test types (E2E, integration, unit) in the Docsify project.\nSOURCE: https://github.com/docsifyjs/docsify/blob/develop/test/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# Run all tests\nnpm t\n\n# Run test types\nnpm run test:e2e\nnpm run test:integration\nnpm run test:unit\n```\n\n----------------------------------------\n\nTITLE: Running Local Server with Python 3\nDESCRIPTION: Python 3 command to start a simple HTTP server for previewing the Docsify site locally on port 3000.\nSOURCE: https://github.com/docsifyjs/docsify/blob/develop/docs/quickstart.md#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\ncd docs && python -m http.server 3000\n```\n\n----------------------------------------\n\nTITLE: Basic HTML Structure Example\nDESCRIPTION: This snippet provides a basic HTML structure with a body tag containing a paragraph.\nSOURCE: https://github.com/docsifyjs/docsify/blob/develop/docs/ui-kit.md#2025-04-21_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<body>\n  <p>Hello</p>\n</body>\n```\n\n----------------------------------------\n\nTITLE: Docsify Image with Size Parameter\nDESCRIPTION: Demonstrates how to include an image in docsify documentation with custom size parameters using special syntax.\nSOURCE: https://github.com/docsifyjs/docsify/blob/develop/docs/README.md#2025-04-21_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n![](_images/Route4Me.png ':size=200')\n```\n\n----------------------------------------\n\nTITLE: Running Local Server with Python 2\nDESCRIPTION: Python 2 command to start a simple HTTP server for previewing the Docsify site locally on port 3000.\nSOURCE: https://github.com/docsifyjs/docsify/blob/develop/docs/quickstart.md#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\ncd docs && python -m SimpleHTTPServer 3000\n```\n\n----------------------------------------\n\nTITLE: Displaying Inline Code in HTML\nDESCRIPTION: This snippet demonstrates how to display inline code within HTML text using the <code> tag.\nSOURCE: https://github.com/docsifyjs/docsify/blob/develop/docs/ui-kit.md#2025-04-21_snippet_0\n\nLANGUAGE: html\nCODE:\n```\nThis is <code>inline code</code>\n```\n\n----------------------------------------\n\nTITLE: Configuring Markdown Parser in Docsify\nDESCRIPTION: Feature implementation that makes the Markdown parser configurable in Docsify, referenced in issue #42.\nSOURCE: https://github.com/docsifyjs/docsify/blob/develop/HISTORY.md#2025-04-21_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n### Features\n\n* Markdown parser is configurable, [#42](https://github.com/QingWei-Li/docsify/issues/42) ([8b1000a](https://github.com/QingWei-Li/docsify/commit/8b1000a))\n```\n\n----------------------------------------\n\nTITLE: Implementing Gitalk Comments in Docsify\nDESCRIPTION: Shows how to set up Gitalk, a modern comment component based on Github Issues and Preact, in Docsify documentation.\nSOURCE: https://github.com/docsifyjs/docsify/blob/develop/docs/plugins.md#2025-04-21_snippet_9\n\nLANGUAGE: html\nCODE:\n```\n<link rel=\"stylesheet\" href=\"//cdn.jsdelivr.net/npm/gitalk/dist/gitalk.css\" />\n\n<script src=\"//cdn.jsdelivr.net/npm/docsify@5/dist/plugins/gitalk.min.js\"></script>\n<script src=\"//cdn.jsdelivr.net/npm/gitalk/dist/gitalk.min.js\"></script>\n<script>\n  const gitalk = new Gitalk({\n    clientID: 'Github Application Client ID',\n    clientSecret: 'Github Application Client Secret',\n    repo: 'Github repo',\n    owner: 'Github repo owner',\n    admin: [\n      'Github repo collaborators, only these guys can initialize github issues',\n    ],\n    // facebook-like distraction free mode\n    distractionFreeMode: false,\n  });\n</script>\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Sidebar Feature to Docsify\nDESCRIPTION: Implementation of custom sidebar functionality in Docsify, referenced in issues #4 and #5.\nSOURCE: https://github.com/docsifyjs/docsify/blob/develop/HISTORY.md#2025-04-21_snippet_1\n\nLANGUAGE: Markdown\nCODE:\n```\n### Features\n\n* custom sidebar, [#4](https://github.com/QingWei-Li/docsify/issues/4) ([#5](https://github.com/QingWei-Li/docsify/issues/5)) ([37e7984](https://github.com/QingWei-Li/docsify/commit/37e7984))\n```\n\n----------------------------------------\n\nTITLE: Adding Search Functionality to Docsify\nDESCRIPTION: Implementation of search feature in Docsify, resolving issue #43.\nSOURCE: https://github.com/docsifyjs/docsify/blob/develop/HISTORY.md#2025-04-21_snippet_3\n\nLANGUAGE: Markdown\nCODE:\n```\n### Features\n\n* add search, close [#43](https://github.com/QingWei-Li/docsify/issues/43) ([eb5ff3e](https://github.com/QingWei-Li/docsify/commit/eb5ff3e))\n```\n\n----------------------------------------\n\nTITLE: Adding Alias Feature to Docsify\nDESCRIPTION: Implementation of alias functionality in Docsify to enhance routing and navigation.\nSOURCE: https://github.com/docsifyjs/docsify/blob/develop/HISTORY.md#2025-04-21_snippet_5\n\nLANGUAGE: Markdown\nCODE:\n```\n### Features\n\n* **src:** add alias feature ([24412cd](https://github.com/QingWei-Li/docsify/commit/24412cd))\n```\n\n----------------------------------------\n\nTITLE: Adding doneEach Hook to Docsify\nDESCRIPTION: Feature implementation that adds a doneEach hook for plugin development in Docsify.\nSOURCE: https://github.com/docsifyjs/docsify/blob/develop/HISTORY.md#2025-04-21_snippet_7\n\nLANGUAGE: Markdown\nCODE:\n```\n### Features\n\n* **hook:** add doneEach ([c6f7602](https://github.com/QingWei-Li/docsify/commit/c6f7602))\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Theme Color Feature to Docsify\nDESCRIPTION: Feature implementation that allows customization of the theme color in Docsify.\nSOURCE: https://github.com/docsifyjs/docsify/blob/develop/HISTORY.md#2025-04-21_snippet_6\n\nLANGUAGE: Markdown\nCODE:\n```\n### Features\n\n* customize the theme color ([5cc9f05](https://github.com/QingWei-Li/docsify/commit/5cc9f05))\n```\n\n----------------------------------------\n\nTITLE: Emoji Parsing Example in Markdown\nDESCRIPTION: Demonstrates a simple emoji shorthand code that would be rendered as text when noEmoji is enabled.\nSOURCE: https://github.com/docsifyjs/docsify/blob/develop/docs/configuration.md#2025-04-21_snippet_10\n\nLANGUAGE: markdown\nCODE:\n```\n:100:\n```\n\n----------------------------------------\n\nTITLE: Excluding Images from Zoom in Docsify Markdown\nDESCRIPTION: Demonstrates how to exclude specific images from the zoom functionality in Docsify markdown by using a special attribute.\nSOURCE: https://github.com/docsifyjs/docsify/blob/develop/docs/plugins.md#2025-04-21_snippet_6\n\nLANGUAGE: markdown\nCODE:\n```\n![](image.png ':no-zoom')\n```\n\n----------------------------------------\n\nTITLE: Standard Link in Docsify Markdown\nDESCRIPTION: Shows the default behavior of links in docsify, which will be compiled to load README.md files from the specified path.\nSOURCE: https://github.com/docsifyjs/docsify/blob/develop/docs/helpers.md#2025-04-21_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n[link](/demo/)\n```\n\n----------------------------------------\n\nTITLE: Docker Build and Run Commands for Docsify\nDESCRIPTION: Shell commands to build a Docker image for Docsify and run it as a container. Mounts the current directory to the /docs directory in the container and exposes port 3000.\nSOURCE: https://github.com/docsifyjs/docsify/blob/develop/docs/deploy.md#2025-04-21_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\ndocker build -f Dockerfile -t docsify/demo .\n```\n\nLANGUAGE: sh\nCODE:\n```\ndocker run -itp 3000:3000 --name=docsify -v $(pwd):/docs docsify/demo\n```\n\n----------------------------------------\n\nTITLE: Adding Emoji Support to Docsify (Deprecated)\nDESCRIPTION: Shows how to include the emoji plugin for Docsify, which is now deprecated as of v4.13 since Docsify supports full emoji rendering natively.\nSOURCE: https://github.com/docsifyjs/docsify/blob/develop/docs/plugins.md#2025-04-21_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"//cdn.jsdelivr.net/npm/docsify@5/dist/plugins/emoji.min.js\"></script>\n```\n\n----------------------------------------\n\nTITLE: Creating a JavaScript Function for Addition\nDESCRIPTION: This code snippet shows a simple JavaScript function that adds two numbers and logs the result to the console.\nSOURCE: https://github.com/docsifyjs/docsify/blob/develop/docs/ui-kit.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst add = (num1, num2) => num1 + num2;\nconst total = add(1, 2);\n\nconsole.log(total); // 3\n```"
  }
]