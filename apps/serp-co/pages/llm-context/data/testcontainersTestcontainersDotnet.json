[
  {
    "owner": "testcontainers",
    "repo": "testcontainers-dotnet",
    "content": "TITLE: Setting Redis Connection String in WebApplicationFactory for C#\nDESCRIPTION: This snippet demonstrates how to extend WebApplicationFactory to set a Redis connection string before creating the TestServer. It overrides the ConfigureWebHost method to use the connection string from a Redis container.\nSOURCE: https://github.com/testcontainers/testcontainers-dotnet/blob/develop/docs/examples/aspnet.md#2025-04-22_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nprivate sealed class CustomWebApplicationFactory : WebApplicationFactory<Program>\n{\n  protected override void ConfigureWebHost(IWebHostBuilder builder)\n  {\n    builder.UseSetting(\"ConnectionStrings:RedisCache\", _redisContainer.GetConnectionString());\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Pinning Docker Image Version in Testcontainers\nDESCRIPTION: Demonstrates how to override and pin a specific Docker image version. This is a recommended practice regardless of whether using generic or module container builders.\nSOURCE: https://github.com/testcontainers/testcontainers-dotnet/blob/develop/docs/api/best_practices.md#2025-04-22_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\n_builder.WithImage(\"alpine:3.20.0\")\n```\n\n----------------------------------------\n\nTITLE: Running Hello World Container with Testcontainers in C#\nDESCRIPTION: Complete example showing how to configure, start, and interact with a Docker container using Testcontainers for .NET. The code demonstrates creating a container, binding ports, setting wait strategies, and making HTTP requests to the container.\nSOURCE: https://github.com/testcontainers/testcontainers-dotnet/blob/develop/docs/index.md#2025-04-22_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\n// Create a new instance of a container.\nvar container = new ContainerBuilder()\n  // Set the image for the container to \"testcontainers/helloworld:1.2.0\".\n  .WithImage(\"testcontainers/helloworld:1.2.0\")\n  // Bind port 8080 of the container to a random port on the host.\n  .WithPortBinding(8080, true)\n  // Wait until the HTTP endpoint of the container is available.\n  .WithWaitStrategy(Wait.ForUnixContainer().UntilHttpRequestIsSucceeded(r => r.ForPort(8080)))\n  // Build the container configuration.\n  .Build();\n\n// Start the container.\nawait container.StartAsync()\n  .ConfigureAwait(false);\n\n// Create a new instance of HttpClient to send HTTP requests.\nusing var httpClient = new HttpClient();\n\n// Construct the request URI by specifying the scheme, hostname, assigned random host port, and the endpoint \"uuid\".\nvar requestUri = new UriBuilder(Uri.UriSchemeHttp, container.Hostname, container.GetMappedPublicPort(8080), \"uuid\").Uri;\n\n// Send an HTTP GET request to the specified URI and retrieve the response as a string.\nvar guid = await httpClient.GetStringAsync(requestUri)\n  .ConfigureAwait(false);\n\n// Ensure that the retrieved UUID is a valid GUID.\nDebug.Assert(Guid.TryParse(guid, out _));\n```\n\n----------------------------------------\n\nTITLE: Chaining Multiple Wait Strategies in Testcontainers .NET\nDESCRIPTION: This snippet demonstrates how to chain multiple wait strategies together, including port availability, file existence, and custom operations. It also shows how to add a custom wait strategy.\nSOURCE: https://github.com/testcontainers/testcontainers-dotnet/blob/develop/docs/api/wait_strategies.md#2025-04-22_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\n_ = Wait.ForUnixContainer()\n  .UntilPortIsAvailable(80)\n  .UntilFileExists(\"/tmp/foo\")\n  .UntilFileExists(\"/tmp/bar\")\n  .UntilOperationIsSucceeded(() => true, 1)\n  .AddCustomWaitStrategy(new MyCustomWaitStrategy());\n```\n\n----------------------------------------\n\nTITLE: Setting Network Aliases for Container-to-Container Communication\nDESCRIPTION: Shows how to configure network aliases for containers to enable reliable container-to-container communication. This is preferred over using IP addresses.\nSOURCE: https://github.com/testcontainers/testcontainers-dotnet/blob/develop/docs/api/best_practices.md#2025-04-22_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\n_builder.WithNetworkAliases(string)\n```\n\n----------------------------------------\n\nTITLE: Configuring Docker Containers with Testcontainers in C#\nDESCRIPTION: This snippet showcases the use of builder methods in Testcontainers for .NET to configure a Docker container. These methods enable setting container dependencies, Docker endpoints, labels, commands, and network settings among others. The configuration is used to automate container lifecycle management within .NET applications.\nSOURCE: https://github.com/testcontainers/testcontainers-dotnet/blob/develop/docs/api/create_docker_container.md#2025-04-22_snippet_11\n\nLANGUAGE: C#\nCODE:\n```\n\"`DependsOn`                   | Sets the dependent resource to resolve and create or start before starting this container configuration.\\n`WithDockerEndpoint`          | Sets the Docker daemon socket to connect to.\\n`WithAutoRemove`              | Will remove the stopped container automatically, similar to `--rm`.\\n`WithCleanUp`                 | Will remove the container automatically after all tests have been run.\\n`WithLabel`                   | Applies metadata to the container e.g. `-l`, `--label \\\"testcontainers=awesome\\\"`.\\n`WithImage`                   | Specifies an image for which to create the container.\\n`WithImagePullPolicy`         | Specifies an image pull policy to determine when an image is pulled e.g. <code>--pull \\\"always\\\" &vert; \\\"missing\\\" &vert; \\\"never\\\"</code>.\\n`WithName`                    | Sets the container name e.g. `--name \\\"testcontainers\\\"`.\\n`WithHostname`                | Sets the container hostname e.g. `--hostname \\\"testcontainers\\\"`.\\n`WithMacAddress`              | Sets the container MAC address e.g. `--mac-address \\\"00:80:41:ae:fd:7e\\\"`.\\n`WithWorkingDirectory`        | Specifies or overrides the `WORKDIR` for the instruction sets.\\n`WithEntrypoint`              | Specifies or overrides the `ENTRYPOINT` that runs the executable.\\n`WithCommand`                 | Specifies or overrides the `COMMAND` instruction provided in the Dockerfile.\\n`WithEnvironment`             | Sets an environment variable in the container e.g. `-e`, `--env \\\"MAGIC_NUMBER=42\\\"`.\\n`WithExposedPort`             | Exposes a port inside the container e.g. `--expose \\\"80\\\"`.\\n`WithPortBinding`             | Publishes a container port to the host e.g. `-p`, `--publish \\\"80:80\\\"`.\\n`WithResourceMapping`         | Copies a file or any binary content into the created container even before it is started.\\n`WithBindMount`               | Binds a path of a file or directory into the container e.g. `-v`, `--volume \\\".:/tmp\\\"`.\\n`WithVolumeMount`             | Mounts a managed volume into the container e.g. `--mount \\\"type=volume,source=my-vol,destination=/tmp\\\"`.\\n`WithTmpfsMount`              | Mounts a temporary volume into the container e.g. `--mount \\\"type=tmpfs,destination=/tmp\\\"`.\\n`WithNetwork`                 | Assigns a network to the container e.g. `--network \\\"bridge\\\"`.\\n`WithNetworkAliases`          | Assigns a network-scoped aliases to the container e.g. `--network-alias \\\"alias\\\"`.\\n`WithExtraHost`               | Adds a custom host-to-IP mapping to the container's `/etc/hosts` respectively `%WINDIR%\\\\system32\\\\drivers\\\\etc\\\\hosts` e.g. `--add-host \\\"host.testcontainers.internal:172.17.0.2\\\"`.\\n`WithPrivileged`              | Sets the `--privileged` flag.\\n`WithOutputConsumer`          | Redirects `stdout` and `stderr` to capture the container output.\\n`WithWaitStrategy`            | Sets the wait strategy to complete the container start and indicates when it is ready.\\n`WithStartupCallback`         | Sets the startup callback to invoke after the container start.\\n`WithCreateParameterModifier` | Allows low level modifications of the Docker container create parameter.\"\n```\n\n----------------------------------------\n\nTITLE: Mapping Resources to Containers in Testcontainers\nDESCRIPTION: Demonstrates how to copy dependent files to a container before it starts. This is the recommended approach instead of mounting local host paths.\nSOURCE: https://github.com/testcontainers/testcontainers-dotnet/blob/develop/docs/api/best_practices.md#2025-04-22_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\n_container.WithResourceMapping(string, string)\n```\n\n----------------------------------------\n\nTITLE: Waiting for Docker Container Health Check in Testcontainers .NET\nDESCRIPTION: This example shows how to use Docker's HEALTHCHECK feature as a wait strategy in Testcontainers .NET.\nSOURCE: https://github.com/testcontainers/testcontainers-dotnet/blob/develop/docs/api/wait_strategies.md#2025-04-22_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\n_ = new ContainerBuilder()\n  .WithWaitStrategy(Wait.ForUnixContainer().UntilContainerIsHealthy());\n```\n\n----------------------------------------\n\nTITLE: Using PostgreSqlContainer in xUnit.net Tests\nDESCRIPTION: This C# code demonstrates how to use a PostgreSqlContainer in xUnit.net tests. It implements IAsyncLifetime to manage the container lifecycle, starting it before tests and disposing of it after.\nSOURCE: https://github.com/testcontainers/testcontainers-dotnet/blob/develop/docs/modules/postgres.md#2025-04-22_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\n--8<-- \"tests/Testcontainers.PostgreSql.Tests/PostgreSqlContainerTest.cs:UsePostgreSqlContainer\"\n```\n\n----------------------------------------\n\nTITLE: Building a Docker Image with Testcontainers for .NET\nDESCRIPTION: Creates and builds a Docker image from a Dockerfile located in the solution directory, demonstrating the basic usage of ImageFromDockerfileBuilder.\nSOURCE: https://github.com/testcontainers/testcontainers-dotnet/blob/develop/docs/api/create_docker_image.md#2025-04-22_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nvar futureImage = new ImageFromDockerfileBuilder()\n  .WithDockerfileDirectory(CommonDirectoryPath.GetSolutionDirectory(), string.Empty)\n  .WithDockerfile(\"Dockerfile\")\n  .Build();\n\nawait futureImage.CreateAsync()\n  .ConfigureAwait(false);\n```\n\n----------------------------------------\n\nTITLE: Using the Event Hubs Container in xUnit Tests\nDESCRIPTION: Example showing how to use the Event Hubs container in an xUnit test, demonstrating container lifecycle management with IAsyncLifetime and actual test implementation.\nSOURCE: https://github.com/testcontainers/testcontainers-dotnet/blob/develop/docs/modules/eventhubs.md#2025-04-22_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\n--8<-- \"tests/Testcontainers.EventHubs.Tests/EventHubsContainerTest.cs:UseEventHubsContainer\"\n```\n\n----------------------------------------\n\nTITLE: Waiting for HTTP 200 OK on Port 80 in Testcontainers .NET\nDESCRIPTION: This snippet demonstrates how to configure a wait strategy that checks for an HTTP 200 OK response on the root path of port 80.\nSOURCE: https://github.com/testcontainers/testcontainers-dotnet/blob/develop/docs/api/wait_strategies.md#2025-04-22_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\n_ = Wait.ForUnixContainer()\n  .UntilHttpRequestIsSucceeded(request => request\n    .ForPath(\"/\"));\n```\n\n----------------------------------------\n\nTITLE: Using Azure Service Bus Container in xUnit Tests\nDESCRIPTION: Example test class demonstrating how to use the Azure Service Bus container with xUnit.net's IAsyncLifetime interface for container lifecycle management.\nSOURCE: https://github.com/testcontainers/testcontainers-dotnet/blob/develop/docs/modules/servicebus.md#2025-04-22_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\n--8<-- \"tests/Testcontainers.ServiceBus.Tests/ServiceBusContainerTest.cs:UseServiceBusContainer\"\n```\n\n----------------------------------------\n\nTITLE: Copying a File to a Container using Testcontainers\nDESCRIPTION: Shows how to copy a single file from the host filesystem into a Docker container using the WithResourceMapping method with a FileInfo object.\nSOURCE: https://github.com/testcontainers/testcontainers-dotnet/blob/develop/docs/api/create_docker_container.md#2025-04-22_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\n_ = new ContainerBuilder()\n  .WithResourceMapping(new FileInfo(\"appsettings.json\"), \"/app/\");\n```\n\n----------------------------------------\n\nTITLE: Using RabbitMQ Container in Tests\nDESCRIPTION: Example showing how to implement RabbitMQ container tests using xUnit.net's IAsyncLifetime interface. Demonstrates container lifecycle management with initialization and disposal.\nSOURCE: https://github.com/testcontainers/testcontainers-dotnet/blob/develop/docs/modules/rabbitmq.md#2025-04-22_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\n--8<-- \"tests/Testcontainers.RabbitMq.Tests/RabbitMqContainerTest.cs:UseRabbitMqContainer\"\n```\n\n----------------------------------------\n\nTITLE: NGINX Container Example with HTTP Status Verification\nDESCRIPTION: A complete example showing how to create, configure, and start an NGINX container with a random port binding, then verify its operation by making an HTTP request and checking the status code.\nSOURCE: https://github.com/testcontainers/testcontainers-dotnet/blob/develop/docs/api/create_docker_container.md#2025-04-22_snippet_9\n\nLANGUAGE: csharp\nCODE:\n```\nconst ushort HttpPort = 80;\n\nvar nginxContainer = new ContainerBuilder()\n  .WithName(Guid.NewGuid().ToString(\"D\"))\n  .WithImage(\"nginx\")\n  .WithPortBinding(HttpPort, true)\n  .Build();\n\nawait nginxContainer.StartAsync()\n  .ConfigureAwait(false);\n\nusing var httpClient = new HttpClient();\nhttpClient.BaseAddress = new UriBuilder(\"http\", nginxContainer.Hostname, nginxContainer.GetMappedPublicPort(HttpPort)).Uri;\n\nvar httpResponseMessage = await httpClient.GetAsync(string.Empty)\n  .ConfigureAwait(false);\n\nAssert.Equal(HttpStatusCode.OK, httpResponseMessage.StatusCode);\n```\n\n----------------------------------------\n\nTITLE: Basic Host-Container Communication in C#\nDESCRIPTION: Demonstrates how to create a network connection to a container using hostname and mapped port. Uses UriBuilder to construct the connection string safely.\nSOURCE: https://github.com/testcontainers/testcontainers-dotnet/blob/develop/docs/api/create_docker_network.md#2025-04-22_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\n_ = new UriBuilder(\"tcp\", _container.Hostname, _container.GetMappedPublicPort(2375));\n```\n\n----------------------------------------\n\nTITLE: Enabling Container Reuse in Testcontainers .NET\nDESCRIPTION: Demonstrates how to enable resource reuse for a container using the ContainerBuilder. When enabled, the container will be retained after tests for future reuse instead of being disposed.\nSOURCE: https://github.com/testcontainers/testcontainers-dotnet/blob/develop/docs/api/resource_reuse.md#2025-04-22_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\n_ = new ContainerBuilder()\n  .WithReuse(true);\n```\n\n----------------------------------------\n\nTITLE: Using Qdrant Container in xUnit Tests\nDESCRIPTION: Example of how to create and use a Qdrant container in an xUnit test class by implementing IAsyncLifetime to manage container lifecycle.\nSOURCE: https://github.com/testcontainers/testcontainers-dotnet/blob/develop/docs/modules/qdrant.md#2025-04-22_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\n--8<-- \"tests/Testcontainers.Qdrant.Tests/QdrantDefaultContainerTest.cs:UseQdrantContainer\"\n```\n\n----------------------------------------\n\nTITLE: Retrieving Mapped Port from Testcontainer\nDESCRIPTION: Shows how to retrieve the dynamically assigned public port that maps to a specific container port. This is used after configuring random port binding.\nSOURCE: https://github.com/testcontainers/testcontainers-dotnet/blob/develop/docs/api/best_practices.md#2025-04-22_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\n_container.GetMappedPublicPort(ushort)\n```\n\n----------------------------------------\n\nTITLE: Creating an Azure Event Hubs Container Instance\nDESCRIPTION: Sample code showing how to create and configure an Event Hubs container instance using Testcontainers. This sets up a containerized Event Hubs emulator for isolated testing.\nSOURCE: https://github.com/testcontainers/testcontainers-dotnet/blob/develop/docs/modules/eventhubs.md#2025-04-22_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\n--8<-- \"tests/Testcontainers.EventHubs.Tests/EventHubsContainerTest.cs:CreateEventHubsContainer\"\n```\n\n----------------------------------------\n\nTITLE: Creating Azure Service Bus Container Instance in C#\nDESCRIPTION: Example showing how to create and configure an Azure Service Bus container instance using Testcontainers.NET.\nSOURCE: https://github.com/testcontainers/testcontainers-dotnet/blob/develop/docs/modules/servicebus.md#2025-04-22_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\n--8<-- \"tests/Testcontainers.ServiceBus.Tests/ServiceBusContainerTest.cs:CreateServiceBusContainer\"\n```\n\n----------------------------------------\n\nTITLE: Using Random Port Binding in Testcontainers\nDESCRIPTION: Demonstrates how to configure random port binding for a container and retrieve the mapped public port. This avoids port conflicts that can occur with static port assignments.\nSOURCE: https://github.com/testcontainers/testcontainers-dotnet/blob/develop/docs/api/best_practices.md#2025-04-22_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\n_builder.WithPortBinding(ushort, true)\n```\n\n----------------------------------------\n\nTITLE: Initializing and Starting Dependencies in C# using IAsyncLifetime\nDESCRIPTION: This snippet demonstrates the use of IAsyncLifetime.InitializeAsync to create and start all dependencies before any test run, including the Docker network, Microsoft SQL Server container, and the weather forecast application container.\nSOURCE: https://github.com/testcontainers/testcontainers-dotnet/blob/develop/docs/examples/aspnet.md#2025-04-22_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\nawait Image.InitializeAsync()\n  .ConfigureAwait(false);\n\nawait _weatherForecastNetwork.CreateAsync()\n  .ConfigureAwait(false);\n\nawait _msSqlContainer.StartAsync()\n  .ConfigureAwait(false);\n\nawait _weatherForecastContainer.StartAsync()\n  .ConfigureAwait(false);\n```\n\n----------------------------------------\n\nTITLE: Setting Container Memory Limit Using Docker API in Testcontainers .NET\nDESCRIPTION: Demonstrates how to set a container's memory limit to 2GB using the WithCreateParameterModifier method. This example shows direct modification of the Docker API parameters when Testcontainers' standard API doesn't provide the needed functionality.\nSOURCE: https://github.com/testcontainers/testcontainers-dotnet/blob/develop/docs/api/low_level_api_access.md#2025-04-22_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nconst long TwoGB = 2L * 1024 * 1024 * 1024;\n_ = new ContainerBuilder()\n  .WithCreateParameterModifier(parameterModifier => parameterModifier.HostConfig.Memory = TwoGB);\n```\n\n----------------------------------------\n\nTITLE: Using MSSQL Container in xUnit Tests\nDESCRIPTION: Example test class implementing IAsyncLifetime to manage the MSSQL container lifecycle. The test connects to the database using the generated connection string and verifies proper functioning.\nSOURCE: https://github.com/testcontainers/testcontainers-dotnet/blob/develop/docs/modules/mssql.md#2025-04-22_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\n--8<-- \"tests/Testcontainers.MsSql.Tests/MsSqlContainerTest.cs:UseMsSqlContainer\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Container Startup Commands in .NET Testcontainers\nDESCRIPTION: Demonstrates how to override the default ENTRYPOINT and CMD of a Docker container using Testcontainers. This example configures an NGINX container to only test its configuration file instead of starting the service.\nSOURCE: https://github.com/testcontainers/testcontainers-dotnet/blob/develop/docs/api/create_docker_container.md#2025-04-22_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\n_ = new ContainerBuilder()\n  .WithEntrypoint(\"nginx\")\n  .WithCommand(\"-t\");\n```\n\n----------------------------------------\n\nTITLE: MongoDB Container Usage Example\nDESCRIPTION: Example showing how to use the MongoDB container in a test scenario, implementing IAsyncLifetime for container lifecycle management.\nSOURCE: https://github.com/testcontainers/testcontainers-dotnet/blob/develop/docs/modules/mongodb.md#2025-04-22_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\n--8<-- \"tests/Testcontainers.MongoDb.Tests/MongoDbContainerTest.cs:UseMongoDbContainer\"\n```\n\n----------------------------------------\n\nTITLE: Creating and Starting a Testcontainers Module Container in C#\nDESCRIPTION: Basic C# code snippet demonstrating how to create and start a pre-configured container using a Testcontainers module. This shows the standard pattern used across all modules.\nSOURCE: https://github.com/testcontainers/testcontainers-dotnet/blob/develop/docs/modules/index.md#2025-04-22_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nvar moduleNameContainer = new ModuleNameBuilder().Build();\nawait moduleNameContainer.StartAsync();\n```\n\n----------------------------------------\n\nTITLE: Using a Pulsar Container in xUnit Tests\nDESCRIPTION: Example showing how to use a Pulsar container within an xUnit test, including container lifecycle management with IAsyncLifetime.\nSOURCE: https://github.com/testcontainers/testcontainers-dotnet/blob/develop/docs/modules/pulsar.md#2025-04-22_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\n--8<-- \"tests/Testcontainers.Pulsar.Tests/PulsarContainerTest.cs:UsePulsarContainer\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Wait Strategy Timeout in Testcontainers .NET\nDESCRIPTION: This example shows how to configure a wait strategy with a timeout. It waits for a specific log message to appear and cancels the readiness check after one minute.\nSOURCE: https://github.com/testcontainers/testcontainers-dotnet/blob/develop/docs/api/wait_strategies.md#2025-04-22_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\n_ = Wait.ForUnixContainer()\n  .UntilMessageIsLogged(\"Server started\", o => o.WithTimeout(TimeSpan.FromMinutes(1)));\n```\n\n----------------------------------------\n\nTITLE: Basic .NET Dockerfile for Testcontainers\nDESCRIPTION: A Dockerfile that builds and publishes a .NET 6.0 application, designed to work with the build context provided by Testcontainers.\nSOURCE: https://github.com/testcontainers/testcontainers-dotnet/blob/develop/docs/api/create_docker_image.md#2025-04-22_snippet_2\n\nLANGUAGE: Dockerfile\nCODE:\n```\nFROM mcr.microsoft.com/dotnet/sdk:6.0\nARG SLN_FILE_PATH=\"WeatherForecast.sln\"\nCOPY . .\nRUN dotnet restore $SLN_FILE_PATH\nRUN dotnet publish $SLN_FILE_PATH --configuration Release --framework net6.0 --output app\nENTRYPOINT [\"dotnet\", \"/app/WeatherForecast.dll\"]\n```\n\n----------------------------------------\n\nTITLE: Accessing Container Hostname in Testcontainers\nDESCRIPTION: Demonstrates how to access the container hostname property instead of using localhost. This is the recommended approach for connecting to containers from the test host.\nSOURCE: https://github.com/testcontainers/testcontainers-dotnet/blob/develop/docs/api/best_practices.md#2025-04-22_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\n_container.Hostname\n```\n\n----------------------------------------\n\nTITLE: Reusing Existing MSSQL Container with Service Bus Emulator\nDESCRIPTION: Code example showing how to configure the Service Bus container builder to use an existing MSSQL container instance instead of creating a new one.\nSOURCE: https://github.com/testcontainers/testcontainers-dotnet/blob/develop/docs/modules/servicebus.md#2025-04-22_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\n--8<-- \"tests/Testcontainers.ServiceBus.Tests/ServiceBusContainerTest.cs:ReuseExistingMsSqlContainer\"\n```\n\n----------------------------------------\n\nTITLE: Creating MSSQL Container Instance in C#\nDESCRIPTION: Code snippet demonstrating how to create a Microsoft SQL Server container instance using Testcontainers.NET. It configures the container with a password and exposes the default MSSQL port.\nSOURCE: https://github.com/testcontainers/testcontainers-dotnet/blob/develop/docs/modules/mssql.md#2025-04-22_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\n--8<-- \"tests/Testcontainers.MsSql.Tests/MsSqlContainerTest.cs:CreateMsSqlContainer\"\n```\n\n----------------------------------------\n\nTITLE: Running Shared Redis Container Tests in C#\nDESCRIPTION: Example of running tests with a shared Redis container, demonstrating that the container state is preserved between tests.\nSOURCE: https://github.com/testcontainers/testcontainers-dotnet/blob/develop/docs/test_frameworks/xunit_net.md#2025-04-22_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\n--8<-- \"tests/Testcontainers.Xunit.Tests/RedisContainerTest`2.cs:RunTests\"\n```\n\n----------------------------------------\n\nTITLE: Custom Network Communication Between Containers\nDESCRIPTION: Shows how to create a custom network for container-to-container communication using NetworkBuilder. Demonstrates setting up two containers that communicate through a network alias.\nSOURCE: https://github.com/testcontainers/testcontainers-dotnet/blob/develop/docs/api/create_docker_network.md#2025-04-22_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nconst string MagicNumber = \"42\";\n\nconst string MagicNumberHost = \"deep-thought\";\n\nconst ushort MagicNumberPort = 80;\n\nvar network = new NetworkBuilder()\n  .WithName(Guid.NewGuid().ToString(\"D\"))\n  .Build();\n\nvar deepThoughtContainer = new ContainerBuilder()\n  .WithName(Guid.NewGuid().ToString(\"D\"))\n  .WithImage(\"alpine\")\n  .WithEnvironment(\"MAGIC_NUMBER\", MagicNumber)\n  .WithEntrypoint(\"/bin/sh\", \"-c\")\n  .WithCommand($\"while true; do echo \\\"$MAGIC_NUMBER\\\" | nc -l -p {MagicNumberPort}; done\")\n  .WithNetwork(network)\n  .WithNetworkAliases(MagicNumberHost)\n  .Build();\n\nvar ultimateQuestionContainer = new ContainerBuilder()\n  .WithName(Guid.NewGuid().ToString(\"D\"))\n  .WithImage(\"alpine\")\n  .WithEntrypoint(\"top\")\n  .WithNetwork(network)\n  .Build();\n\nawait network.CreateAsync()\n  .ConfigureAwait(false);\n\nawait Task.WhenAll(deepThoughtContainer.StartAsync(), ultimateQuestionContainer.StartAsync())\n  .ConfigureAwait(false);\n\nvar execResult = await ultimateQuestionContainer.ExecAsync(new[] { \"nc\", MagicNumberHost, MagicNumberPort.ToString(CultureInfo.InvariantCulture) })\n  .ConfigureAwait(false);\n\nAssert.Equal(MagicNumber, execResult.Stdout.Trim());\n```\n\n----------------------------------------\n\nTITLE: Configuring Network Reuse with Fixed Name\nDESCRIPTION: Demonstrates how to configure network reuse by setting a fixed network name instead of the default random name, which is necessary for proper resource reuse functionality.\nSOURCE: https://github.com/testcontainers/testcontainers-dotnet/blob/develop/docs/api/resource_reuse.md#2025-04-22_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\n_ = new NetworkBuilder()\n  .WithReuse(true)\n  .WithName(\"WeatherForecast\");\n```\n\n----------------------------------------\n\nTITLE: Configuring WeatherForecastContainer with Dependencies in C#\nDESCRIPTION: This snippet shows the configuration of WeatherForecastContainer class, setting up the Docker network, Microsoft SQL Server container, and the weather forecast application container with necessary environment variables and wait strategy.\nSOURCE: https://github.com/testcontainers/testcontainers-dotnet/blob/develop/docs/examples/aspnet.md#2025-04-22_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\nconst string weatherForecastStorage = \"weatherForecastStorage\";\n\nconst string connectionString = $\"server={weatherForecastStorage};user id={MsSqlBuilder.DefaultUsername};password={MsSqlBuilder.DefaultPassword};database={MsSqlBuilder.DefaultDatabase}\";\n\n_weatherForecastNetwork = new NetworkBuilder()\n  .Build();\n\n_msSqlContainer = new MsSqlBuilder()\n  .WithNetwork(_weatherForecastNetwork)\n  .WithNetworkAliases(weatherForecastStorage)\n  .Build();\n\n_weatherForecastContainer = new ContainerBuilder()\n  .WithImage(Image)\n  .WithNetwork(_weatherForecastNetwork)\n  .WithPortBinding(WeatherForecastImage.HttpsPort, true)\n  .WithEnvironment(\"ASPNETCORE_URLS\", \"https://+\")\n  .WithEnvironment(\"ASPNETCORE_Kestrel__Certificates__Default__Path\", WeatherForecastImage.CertificateFilePath)\n  .WithEnvironment(\"ASPNETCORE_Kestrel__Certificates__Default__Password\", WeatherForecastImage.CertificatePassword)\n  .WithEnvironment(\"ConnectionStrings__DefaultConnection\", connectionString)\n  .WithWaitStrategy(Wait.ForUnixContainer().UntilPortIsAvailable(WeatherForecastImage.HttpsPort))\n  .Build();\n```\n\n----------------------------------------\n\nTITLE: Configuring Docker Compose for Testcontainers Tests\nDESCRIPTION: Docker Compose configuration for running .NET tests inside a container with the Docker Wormhole pattern. Includes volume mounting for the Docker socket and comments about additional environment variables needed for Docker Desktop.\nSOURCE: https://github.com/testcontainers/testcontainers-dotnet/blob/develop/docs/dind/index.md#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nversion: \"3\"\nservices:\n  docker_compose_test:\n    build:\n      dockerfile: Dockerfile\n      context: .\n    entrypoint: dotnet\n    command: test\n    # Uncomment the lines below in the case of Docker Desktop (see note above).\n    # TESTCONTAINERS_HOST_OVERRIDE is not needed in the case of Docker Engine.\n    # environment:\n    #   - TESTCONTAINERS_HOST_OVERRIDE=host.docker.internal\n    volumes:\n      - /var/run/docker.sock.raw:/var/run/docker.sock\n```\n\n----------------------------------------\n\nTITLE: Creating MongoDB Container Instance\nDESCRIPTION: C# code demonstrating how to create and configure a MongoDB container instance using Testcontainers.NET. Shows the container setup with basic configuration.\nSOURCE: https://github.com/testcontainers/testcontainers-dotnet/blob/develop/docs/modules/mongodb.md#2025-04-22_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\n--8<-- \"tests/Testcontainers.MongoDb.Tests/MongoDbContainerTest.cs:CreateMongoDbContainer\"\n```\n\n----------------------------------------\n\nTITLE: Waiting for Multiple HTTP Status Codes in Testcontainers .NET\nDESCRIPTION: This example shows how to wait for either an HTTP 200 OK or 301 Moved Permanently response on the root path.\nSOURCE: https://github.com/testcontainers/testcontainers-dotnet/blob/develop/docs/api/wait_strategies.md#2025-04-22_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\n_ = Wait.ForUnixContainer()\n  .UntilHttpRequestIsSucceeded(request => request\n    .ForPath(\"/\")\n    .ForStatusCode(HttpStatusCode.OK)\n    .ForStatusCode(HttpStatusCode.MovedPermanently));\n```\n\n----------------------------------------\n\nTITLE: Forwarding Container Logs to Console in Testcontainers\nDESCRIPTION: Demonstrates how to continuously forward container logs to the console in real-time during container execution using an output consumer.\nSOURCE: https://github.com/testcontainers/testcontainers-dotnet/blob/develop/docs/api/create_docker_container.md#2025-04-22_snippet_8\n\nLANGUAGE: csharp\nCODE:\n```\nusing IOutputConsumer outputConsumer = Consume.RedirectStdoutAndStderrToConsole();\n\n_ = new ContainerBuilder()\n  .WithOutputConsumer(outputConsumer);\n```\n\n----------------------------------------\n\nTITLE: Creating a Pulsar Container Instance in C#\nDESCRIPTION: Code snippet that demonstrates how to create an Apache Pulsar container instance using the Testcontainers.Pulsar library.\nSOURCE: https://github.com/testcontainers/testcontainers-dotnet/blob/develop/docs/modules/pulsar.md#2025-04-22_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\n--8<-- \"tests/Testcontainers.Pulsar.Tests/PulsarContainerTest.cs:CreatePulsarContainer\"\n```\n\n----------------------------------------\n\nTITLE: Implementing Db2 Container Test in C#\nDESCRIPTION: Example class showing how to create and use a Db2 container in a unit test. Implements IAsyncLifetime to manage container lifecycle, connecting to the database and performing a simple query.\nSOURCE: https://github.com/testcontainers/testcontainers-dotnet/blob/develop/docs/modules/db2.md#2025-04-22_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\n--8<-- \"tests/Testcontainers.Db2.Tests/Db2ContainerTest.cs:UseDb2Container\"\n```\n\n----------------------------------------\n\nTITLE: Creating Non-Expiring Authentication Token\nDESCRIPTION: Code demonstrating how to create an authentication token that never expires from a running Pulsar container.\nSOURCE: https://github.com/testcontainers/testcontainers-dotnet/blob/develop/docs/modules/pulsar.md#2025-04-22_snippet_8\n\nLANGUAGE: csharp\nCODE:\n```\nvar authToken = await container.CreateAuthenticationTokenAsync(Timeout.InfiniteTimeSpan)\n    .ConfigureAwait(false);\n```\n\n----------------------------------------\n\nTITLE: Using Cassandra Container with xUnit Test\nDESCRIPTION: Example of how to create, configure, and use a Cassandra container in a xUnit test. The test demonstrates connecting to Cassandra and performing basic operations within the containerized environment.\nSOURCE: https://github.com/testcontainers/testcontainers-dotnet/blob/develop/docs/modules/cassandra.md#2025-04-22_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\n--8<-- \"tests/Testcontainers.Cassandra.Tests/CassandraContainerTest.cs:UseCassandraContainer\"\n```\n\n----------------------------------------\n\nTITLE: Running PostgreSQL Container Tests in C#\nDESCRIPTION: Example of running tests with a PostgreSQL container, demonstrating how to execute SQL queries against the containerized database.\nSOURCE: https://github.com/testcontainers/testcontainers-dotnet/blob/develop/docs/test_frameworks/xunit_net.md#2025-04-22_snippet_8\n\nLANGUAGE: csharp\nCODE:\n```\n--8<-- \"tests/Testcontainers.Xunit.Tests/PostgreSqlContainer.cs:RunTests\"\n```\n\n----------------------------------------\n\nTITLE: Getting Pulsar Broker URL\nDESCRIPTION: Code snippet that shows how to get the Pulsar broker URL from a running container instance.\nSOURCE: https://github.com/testcontainers/testcontainers-dotnet/blob/develop/docs/modules/pulsar.md#2025-04-22_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\nstring pulsarBrokerUrl = _pulsarContainer.GetPulsarBrokerUrl();\n```\n\n----------------------------------------\n\nTITLE: Waiting for HTTP Status Code Range in Testcontainers .NET\nDESCRIPTION: This snippet demonstrates how to use a predicate to wait for an HTTP status code within a specific range (2xx in this case).\nSOURCE: https://github.com/testcontainers/testcontainers-dotnet/blob/develop/docs/api/wait_strategies.md#2025-04-22_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\n_ = Wait.ForUnixContainer()\n  .UntilHttpRequestIsSucceeded(request => request\n    .ForPath(\"/\")\n    .ForStatusCodeMatching(statusCode => statusCode >= HttpStatusCode.OK && statusCode < HttpStatusCode.MultipleChoices));\n```\n\n----------------------------------------\n\nTITLE: Establishing Connection and Producing Message\nDESCRIPTION: Example showing how to connect to the ActiveMQ Artemis container and produce a message.\nSOURCE: https://github.com/testcontainers/testcontainers-dotnet/blob/develop/docs/modules/activemq.md#2025-04-22_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\n--8<-- \"tests/Testcontainers.ActiveMq.Tests/ArtemisContainerTest.cs:ArtemisContainerEstablishesConnection\"\n```\n\n----------------------------------------\n\nTITLE: MongoDB Replica Set Configuration\nDESCRIPTION: C# code showing how to configure a MongoDB container to run as a single-node replica set instead of standalone instance.\nSOURCE: https://github.com/testcontainers/testcontainers-dotnet/blob/develop/docs/modules/mongodb.md#2025-04-22_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\n--8<-- \"tests/Testcontainers.MongoDb.Tests/MongoDbContainerTest.cs:ReplicaSetContainerConfiguration\"\n```\n\n----------------------------------------\n\nTITLE: Configuring ASP.NET Core Container with Environment Variables and Files\nDESCRIPTION: Shows how to configure an ASP.NET Core container by setting environment variables for HTTPS URLs and certificate configuration, while also mapping a certificate file into the container.\nSOURCE: https://github.com/testcontainers/testcontainers-dotnet/blob/develop/docs/api/create_docker_container.md#2025-04-22_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\n_ = new ContainerBuilder()\n  .WithEnvironment(\"ASPNETCORE_URLS\", \"https://+\")\n  .WithEnvironment(\"ASPNETCORE_Kestrel__Certificates__Default__Path\", \"/app/certificate.crt\")\n  .WithEnvironment(\"ASPNETCORE_Kestrel__Certificates__Default__Password\", \"password\")\n  .WithResourceMapping(\"certificate.crt\", \"/app/\");\n```\n\n----------------------------------------\n\nTITLE: Configuring ActiveMQ Artemis Container with Custom Authentication\nDESCRIPTION: Test configuration using custom authentication credentials for ActiveMQ Artemis container.\nSOURCE: https://github.com/testcontainers/testcontainers-dotnet/blob/develop/docs/modules/activemq.md#2025-04-22_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\n--8<-- \"tests/Testcontainers.ActiveMq.Tests/ArtemisContainerTest.cs:UseArtemisContainerCustomAuth\"\n```\n\n----------------------------------------\n\nTITLE: Retrieving Container Logs using GetLogsAsync in Testcontainers\nDESCRIPTION: Shows how to retrieve stdout and stderr logs from a container after it has started. This approach is useful for post-test analysis of container output.\nSOURCE: https://github.com/testcontainers/testcontainers-dotnet/blob/develop/docs/api/create_docker_container.md#2025-04-22_snippet_7\n\nLANGUAGE: csharp\nCODE:\n```\nvar (stdout, stderr) = await _container.GetLogsAsync();\n```\n\n----------------------------------------\n\nTITLE: Configuring Bitbucket Pipelines for Testcontainers\nDESCRIPTION: YAML configuration for Bitbucket Pipelines that sets up a .NET SDK environment with Docker support. Includes settings to disable Ryuk for Testcontainers compatibility and runs tests in the pipeline.\nSOURCE: https://github.com/testcontainers/testcontainers-dotnet/blob/develop/docs/cicd/index.md#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nimage: mcr.microsoft.com/dotnet/sdk:8.0\noptions:\n  docker: true\npipelines:\n  default:\n    - step:\n      script:\n        # Bitbucket Pipelines does not support Ryuk:\n        # https://dotnet.testcontainers.org/api/resource_reaper/.\n        - export TESTCONTAINERS_RYUK_DISABLED=true\n        - dotnet test\n      services:\n        - docker\n```\n\n----------------------------------------\n\nTITLE: Labeling Container Resources for Identification\nDESCRIPTION: Shows how to add a distinct label to a reusable container to prevent hash collisions. This ensures unique identification of resources when reuse is enabled.\nSOURCE: https://github.com/testcontainers/testcontainers-dotnet/blob/develop/docs/api/resource_reuse.md#2025-04-22_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\n_ = new ContainerBuilder()\n  .WithReuse(true)\n  .WithLabel(\"reuse-id\", \"WeatherForecast\");\n```\n\n----------------------------------------\n\nTITLE: Custom TCP Server Container with Data Verification\nDESCRIPTION: An advanced example creating a container that runs a simple TCP server in Alpine Linux. The container is configured to listen on a port and return a magic number, which is then verified by connecting to it with a TCP client.\nSOURCE: https://github.com/testcontainers/testcontainers-dotnet/blob/develop/docs/api/create_docker_container.md#2025-04-22_snippet_10\n\nLANGUAGE: csharp\nCODE:\n```\nconst string MagicNumber = \"42\";\n\nconst ushort MagicNumberPort = 80;\n\nvar deepThoughtContainer = new ContainerBuilder()\n  .WithName(Guid.NewGuid().ToString(\"D\"))\n  .WithImage(\"alpine\")\n  .WithExposedPort(MagicNumberPort)\n  .WithPortBinding(MagicNumberPort, true)\n  .WithEnvironment(\"MAGIC_NUMBER\", MagicNumber)\n  .WithEntrypoint(\"/bin/sh\", \"-c\")\n  .WithCommand($\"while true; do echo \\\"$MAGIC_NUMBER\\\" | nc -l -p {MagicNumberPort}; done\")\n  .Build();\n\nawait deepThoughtContainer.StartAsync()\n  .ConfigureAwait(false);\n\nusing var magicNumberClient = new TcpClient(deepThoughtContainer.Hostname, deepThoughtContainer.GetMappedPublicPort(MagicNumberPort));\nusing var magicNumberReader = new StreamReader(magicNumberClient.GetStream());\n\nvar magicNumber = await magicNumberReader.ReadLineAsync()\n  .ConfigureAwait(false);\n\nAssert.Equal(MagicNumber, magicNumber);\n```\n\n----------------------------------------\n\nTITLE: Configuring Docker Host with Environment Variable in Testcontainers\nDESCRIPTION: Sets the Docker host using an environment variable to connect to a remote Docker daemon running on tcp://docker:2375.\nSOURCE: https://github.com/testcontainers/testcontainers-dotnet/blob/develop/docs/custom_configuration/index.md#2025-04-22_snippet_0\n\nLANGUAGE: properties\nCODE:\n```\nDOCKER_HOST=tcp://docker:2375\n```\n\n----------------------------------------\n\nTITLE: Configuring Docker Host with Properties File in Testcontainers\nDESCRIPTION: Sets the Docker host using a properties file entry to connect to a remote Docker daemon running on tcp://docker:2375.\nSOURCE: https://github.com/testcontainers/testcontainers-dotnet/blob/develop/docs/custom_configuration/index.md#2025-04-22_snippet_1\n\nLANGUAGE: properties\nCODE:\n```\ndocker.host=tcp://docker:2375\n```\n\n----------------------------------------\n\nTITLE: Configuring Redis Container for Isolated Testing in C#\nDESCRIPTION: Example of configuring a Redis container for isolated testing by inheriting from ContainerTest<TBuilderEntity, TContainerEntity> and overriding the Configure method.\nSOURCE: https://github.com/testcontainers/testcontainers-dotnet/blob/develop/docs/test_frameworks/xunit_net.md#2025-04-22_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\n--8<-- \"tests/Testcontainers.Xunit.Tests/RedisContainerTest`1.cs:ConfigureRedisContainer\"\n```\n\n----------------------------------------\n\nTITLE: Multi-stage Dockerfile with Resource Reaper Session Labels\nDESCRIPTION: A multi-stage Dockerfile that properly labels each stage with Resource Reaper session IDs to ensure intermediate layers can be cleaned up after test execution.\nSOURCE: https://github.com/testcontainers/testcontainers-dotnet/blob/develop/docs/api/create_docker_image.md#2025-04-22_snippet_3\n\nLANGUAGE: Dockerfile\nCODE:\n```\nFROM mcr.microsoft.com/dotnet/sdk:6.0 AS build-env-1\nARG RESOURCE_REAPER_SESSION_ID=\"00000000-0000-0000-0000-000000000000\"\nLABEL \"org.testcontainers.resource-reaper-session\"=$RESOURCE_REAPER_SESSION_ID\n\nFROM mcr.microsoft.com/dotnet/sdk:6.0 AS build-env-2\nARG RESOURCE_REAPER_SESSION_ID=\"00000000-0000-0000-0000-000000000000\"\nLABEL \"org.testcontainers.resource-reaper-session\"=$RESOURCE_REAPER_SESSION_ID\n```\n\n----------------------------------------\n\nTITLE: Installing Testcontainers.MsSql NuGet Package for C#\nDESCRIPTION: This command installs the Testcontainers.MsSql NuGet package version 3.0.0, which provides pre-configured Microsoft SQL Server module for Testcontainers.\nSOURCE: https://github.com/testcontainers/testcontainers-dotnet/blob/develop/docs/examples/aspnet.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ndotnet add package Testcontainers.MsSql --version 3.0.0\n```\n\n----------------------------------------\n\nTITLE: Configuring Event Hubs Container with Custom Azurite Instance\nDESCRIPTION: Example showing how to configure an Event Hubs container to use an existing Azurite container instance instead of creating a new one automatically.\nSOURCE: https://github.com/testcontainers/testcontainers-dotnet/blob/develop/docs/modules/eventhubs.md#2025-04-22_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\n--8<-- \"tests/Testcontainers.EventHubs.Tests/EventHubsContainerTest.cs:ReuseExistingAzuriteContainer\"\n```\n\n----------------------------------------\n\nTITLE: Enabling Token Authentication for Pulsar\nDESCRIPTION: Code that demonstrates how to configure a Pulsar container with token authentication enabled.\nSOURCE: https://github.com/testcontainers/testcontainers-dotnet/blob/develop/docs/modules/pulsar.md#2025-04-22_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\nPulsarContainer _pulsarContainer = PulsarBuilder().WithTokenAuthentication().Build();\n```\n\n----------------------------------------\n\nTITLE: Adding WithPassword Method to PostgreSqlBuilder\nDESCRIPTION: Implements a WithPassword method in the PostgreSqlBuilder class to set the password and corresponding environment variable.\nSOURCE: https://github.com/testcontainers/testcontainers-dotnet/blob/develop/docs/modules/index.md#2025-04-22_snippet_7\n\nLANGUAGE: csharp\nCODE:\n```\npublic PostgreSqlBuilder WithPassword(string password)\n{\n  return Merge(DockerResourceConfiguration, new PostgreSqlConfiguration(password: password)).WithEnvironment(\"POSTGRES_PASSWORD\", password);\n}\n```\n\n----------------------------------------\n\nTITLE: Validating Password Configuration in PostgreSqlContainer\nDESCRIPTION: Overrides the Validate method in the PostgreSqlContainer class to ensure that a password is provided and not empty.\nSOURCE: https://github.com/testcontainers/testcontainers-dotnet/blob/develop/docs/modules/index.md#2025-04-22_snippet_9\n\nLANGUAGE: csharp\nCODE:\n```\nprotected override void Validate()\n{\n  base.Validate();\n\n  _ = Guard.Argument(DockerResourceConfiguration.Password, nameof(PostgreSqlConfiguration.Password))\n    .NotNull()\n    .NotEmpty();\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring TLS for Qdrant Container\nDESCRIPTION: Code snippet showing how to configure a Qdrant container with TLS using a self-signed certificate and private key.\nSOURCE: https://github.com/testcontainers/testcontainers-dotnet/blob/develop/docs/modules/qdrant.md#2025-04-22_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\n--8<-- \"tests/Testcontainers.Qdrant.Tests/QdrantSecureContainerTest.cs:ConfigureQdrantContainerCertificate\"\n```\n\n----------------------------------------\n\nTITLE: Exposing Host Ports Configuration\nDESCRIPTION: Shows how to expose host ports to containers using TestcontainersSettings. Enables containers to access services running on the test host.\nSOURCE: https://github.com/testcontainers/testcontainers-dotnet/blob/develop/docs/api/create_docker_network.md#2025-04-22_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nawait TestcontainersSettings.ExposeHostPortsAsync(8080)\n  .ConfigureAwait(false);\n```\n\n----------------------------------------\n\nTITLE: Installing and Running WeatherForecast Tests with Testcontainers\nDESCRIPTION: Console commands to clone the repository and run tests for the WeatherForecast example. Requires git-lfs and executes tests in Release configuration. Note that one test requires Chrome version 106 for Selenium testing.\nSOURCE: https://github.com/testcontainers/testcontainers-dotnet/blob/develop/examples/WeatherForecast/README.md#2025-04-22_snippet_0\n\nLANGUAGE: console\nCODE:\n```\ngit lfs version\ngit clone --branch develop git@github.com:testcontainers/testcontainers-dotnet.git\ncd ./testcontainers-dotnet/examples/WeatherForecast/\ndotnet test WeatherForecast.sln --configuration=Release\n```\n\n----------------------------------------\n\nTITLE: Container to Host Communication\nDESCRIPTION: Demonstrates how to send a request from a container to the test host using the special hostname 'host.testcontainers.internal'.\nSOURCE: https://github.com/testcontainers/testcontainers-dotnet/blob/develop/docs/api/create_docker_network.md#2025-04-22_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\n_ = await curlContainer.ExecAsync(new[] { \"curl\", \"http://host.testcontainers.internal:8080\" })\n  .ConfigureAwait(false);\n```\n\n----------------------------------------\n\nTITLE: Canceling Container Start with Timeout in Testcontainers\nDESCRIPTION: Demonstrates how to implement a timeout when starting a container by using a CancellationTokenSource that automatically cancels after a specified duration.\nSOURCE: https://github.com/testcontainers/testcontainers-dotnet/blob/develop/docs/api/create_docker_container.md#2025-04-22_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\nusing var timeoutCts = new CancellationTokenSource(TimeSpan.FromMinutes(1));\nawait _container.StartAsync(timeoutCts.Token);\n```\n\n----------------------------------------\n\nTITLE: Cloning and Running Testcontainers Flyway Example\nDESCRIPTION: Console commands to clone the testcontainers-dotnet repository, navigate to the Flyway example directory, and run the tests in Release configuration.\nSOURCE: https://github.com/testcontainers/testcontainers-dotnet/blob/develop/examples/Flyway/README.md#2025-04-22_snippet_0\n\nLANGUAGE: console\nCODE:\n```\ngit clone --branch develop git@github.com:testcontainers/testcontainers-dotnet.git\ncd ./testcontainers-dotnet/examples/Flyway/\ndotnet test Flyway.sln --configuration=Release\n```\n\n----------------------------------------\n\nTITLE: Installing Testcontainers.PostgreSql NuGet Package\nDESCRIPTION: This command adds the Testcontainers.PostgreSql package to a .NET project using the dotnet CLI.\nSOURCE: https://github.com/testcontainers/testcontainers-dotnet/blob/develop/docs/modules/postgres.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ndotnet add package Testcontainers.PostgreSql\n```\n\n----------------------------------------\n\nTITLE: Creating Neo4j Container Instance in C#\nDESCRIPTION: C# code snippet demonstrating how to create a Neo4j container instance using Testcontainers. This example is likely part of a test setup using xUnit.net's IAsyncLifetime interface.\nSOURCE: https://github.com/testcontainers/testcontainers-dotnet/blob/develop/docs/modules/neo4j.md#2025-04-22_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\n--8<-- \"tests/Testcontainers.Neo4j.Tests/Neo4jContainerTest.cs:CreateNeo4jContainer\"\n```\n\n----------------------------------------\n\nTITLE: Generating Connection String in PostgreSqlContainer\nDESCRIPTION: Implements a GetConnectionString method in the PostgreSqlContainer class to construct a connection string using the configured values.\nSOURCE: https://github.com/testcontainers/testcontainers-dotnet/blob/develop/docs/modules/index.md#2025-04-22_snippet_8\n\nLANGUAGE: csharp\nCODE:\n```\npublic string GetConnectionString()\n{\n  var properties = new Dictionary<string, string>();\n  properties.Add(\"Host\", Hostname);\n  properties.Add(\"Port\", GetMappedPublicPort(5432).ToString());\n  properties.Add(\"Database\", \"postgres\");\n  properties.Add(\"Username\", \"postgres\");\n  properties.Add(\"Password\", _configuration.Password);\n  return string.Join(\";\", properties.Select(property => string.Join(\"=\", property.Key, property.Value)));\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring PostgreSQL Container for Testing in C#\nDESCRIPTION: Example of configuring a PostgreSQL container for testing by inheriting from DbContainerTest or DbContainerFixture and overriding the Configure method.\nSOURCE: https://github.com/testcontainers/testcontainers-dotnet/blob/develop/docs/test_frameworks/xunit_net.md#2025-04-22_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\n--8<-- \"tests/Testcontainers.Xunit.Tests/PostgreSqlContainer.cs:ConfigurePostgreSqlContainer\"\n```\n\n----------------------------------------\n\nTITLE: Listing Docker Contexts with PowerShell\nDESCRIPTION: PowerShell command to list available Docker contexts that can be used with Testcontainers, showing context names and their Docker endpoints.\nSOURCE: https://github.com/testcontainers/testcontainers-dotnet/blob/develop/docs/custom_configuration/index.md#2025-04-22_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\nPS C:\\Sources\\dotnet\\testcontainers-dotnet> docker context ls\nNAME   DESCRIPTION   DOCKER ENDPOINT           ERROR\ntcc                  tcp://127.0.0.1:60706/0\n```\n\n----------------------------------------\n\nTITLE: Installing Testcontainers Module with .NET CLI\nDESCRIPTION: Command for adding a Testcontainers module to a .NET project using the dotnet CLI. This is the first step to use any Testcontainers module in a test project.\nSOURCE: https://github.com/testcontainers/testcontainers-dotnet/blob/develop/docs/modules/index.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ndotnet add package Testcontainers.ModuleName\n```\n\n----------------------------------------\n\nTITLE: Copying a Directory to a Container using Testcontainers\nDESCRIPTION: Demonstrates how to copy an entire directory from the host filesystem into a Docker container using the WithResourceMapping method with a DirectoryInfo object.\nSOURCE: https://github.com/testcontainers/testcontainers-dotnet/blob/develop/docs/api/create_docker_container.md#2025-04-22_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\n_ = new ContainerBuilder()\n  .WithResourceMapping(new DirectoryInfo(\".\"), \"/app/\");\n```\n\n----------------------------------------\n\nTITLE: Installing Testcontainers.MsSql Package via NuGet\nDESCRIPTION: Command to add the Testcontainers.MsSql NuGet package to your .NET project, which provides the MSSQL container implementation for Testcontainers.\nSOURCE: https://github.com/testcontainers/testcontainers-dotnet/blob/develop/docs/modules/mssql.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ndotnet add package Testcontainers.MsSql\n```\n\n----------------------------------------\n\nTITLE: Resolving Solution Directory for Dockerfile Context\nDESCRIPTION: Example showing how to detect the directory containing the solution file by traversing up the directory tree from the executing assembly.\nSOURCE: https://github.com/testcontainers/testcontainers-dotnet/blob/develop/docs/api/create_docker_image.md#2025-04-22_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\n_ = new ImageFromDockerfileBuilder()\n  .WithDockerfileDirectory(CommonDirectoryPath.GetSolutionDirectory(), string.Empty)\n  .WithDockerfile(\"Dockerfile\");\n```\n\n----------------------------------------\n\nTITLE: Configuring Azure Service Bus Emulator with Custom Configuration\nDESCRIPTION: Example showing how to provide a custom JSON configuration file to the Azure Service Bus emulator container.\nSOURCE: https://github.com/testcontainers/testcontainers-dotnet/blob/develop/docs/modules/servicebus.md#2025-04-22_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\n--8<-- \"tests/Testcontainers.ServiceBus.Tests/ServiceBusContainerTest.cs:UseCustomConfiguration\"\n```\n\n----------------------------------------\n\nTITLE: Specifying NuGet Package References for PostgreSQL Tests\nDESCRIPTION: This XML snippet shows the package references required for running PostgreSQL container tests, including Testcontainers.PostgreSql and xunit dependencies.\nSOURCE: https://github.com/testcontainers/testcontainers-dotnet/blob/develop/docs/modules/postgres.md#2025-04-22_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n--8<-- \"tests/Testcontainers.PostgreSql.Tests/Testcontainers.PostgreSql.Tests.csproj:PackageReferences\"\n```\n\n----------------------------------------\n\nTITLE: Package References for MongoDB Testing\nDESCRIPTION: XML configuration showing the required NuGet package references for MongoDB container testing.\nSOURCE: https://github.com/testcontainers/testcontainers-dotnet/blob/develop/docs/modules/mongodb.md#2025-04-22_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n--8<-- \"tests/Testcontainers.MongoDb.Tests/Testcontainers.MongoDb.Tests.csproj:PackageReferences\"\n```\n\n----------------------------------------\n\nTITLE: Injecting Shared Redis Container Fixture in C#\nDESCRIPTION: Example of injecting a shared Redis container fixture into a test class by implementing IClassFixture<TFixture>.\nSOURCE: https://github.com/testcontainers/testcontainers-dotnet/blob/develop/docs/test_frameworks/xunit_net.md#2025-04-22_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\n--8<-- \"tests/Testcontainers.Xunit.Tests/RedisContainerTest`2.cs:InjectContainerFixture\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Qdrant Client for TLS Verification\nDESCRIPTION: Two-part example demonstrating how to configure a Qdrant client to validate the TLS certificate using its thumbprint.\nSOURCE: https://github.com/testcontainers/testcontainers-dotnet/blob/develop/docs/modules/qdrant.md#2025-04-22_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\n--8<-- \"tests/Testcontainers.Qdrant.Tests/QdrantSecureContainerTest.cs:ConfigureQdrantClientCertificate-1\"\n\n--8<-- \"tests/Testcontainers.Qdrant.Tests/QdrantSecureContainerTest.cs:ConfigureQdrantClientCertificate-2\"\n```\n\n----------------------------------------\n\nTITLE: Required NuGet Package References for Db2 Tests\nDESCRIPTION: XML package references needed for Db2 container tests. These include the IBM.Data.Db2 client libraries and testing frameworks.\nSOURCE: https://github.com/testcontainers/testcontainers-dotnet/blob/develop/docs/modules/db2.md#2025-04-22_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n--8<-- \"tests/Testcontainers.Db2.Tests/Testcontainers.Db2.Tests.csproj:PackageReferences\"\n```\n\n----------------------------------------\n\nTITLE: Required NuGet Package References for Qdrant Tests\nDESCRIPTION: XML snippet showing the required package references for the Qdrant test project, including dependencies needed to interact with Qdrant containers.\nSOURCE: https://github.com/testcontainers/testcontainers-dotnet/blob/develop/docs/modules/qdrant.md#2025-04-22_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n--8<-- \"tests/Testcontainers.Qdrant.Tests/Testcontainers.Qdrant.Tests.csproj:PackageReferences\"\n```\n\n----------------------------------------\n\nTITLE: PostgreSQL Module Initialization\nDESCRIPTION: Implementation of the Init method to configure PostgreSQL-specific settings including Docker image and wait strategy.\nSOURCE: https://github.com/testcontainers/testcontainers-dotnet/blob/develop/docs/modules/index.md#2025-04-22_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\nprotected override PostgreSqlBuilder Init()\n{\n  var waitStrategy = Wait.ForUnixContainer().UntilCommandIsCompleted(\"pg_isready\");\n  return base.Init().WithImage(\"postgres:15.1\").WithPortBinding(5432, true).WithWaitStrategy(waitStrategy);\n}\n```\n\n----------------------------------------\n\nTITLE: Reading a File from a Container using Testcontainers\nDESCRIPTION: Shows how to read a file from a running container into a byte array and then optionally save it to the host filesystem using the ReadFileAsync method.\nSOURCE: https://github.com/testcontainers/testcontainers-dotnet/blob/develop/docs/api/create_docker_container.md#2025-04-22_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\nvar readBytes = await container.ReadFileAsync(\"/app/appsettings.json\")\n  .ConfigureAwait(false);\n\nawait File.WriteAllBytesAsync(\"appsettings.json\", readBytes)\n  .ConfigureAwait(false);\n```\n\n----------------------------------------\n\nTITLE: Required NuGet Package References\nDESCRIPTION: XML configuration showing required NuGet package references for the test project.\nSOURCE: https://github.com/testcontainers/testcontainers-dotnet/blob/develop/docs/modules/activemq.md#2025-04-22_snippet_6\n\nLANGUAGE: xml\nCODE:\n```\n--8<-- \"tests/Testcontainers.ActiveMq.Tests/Testcontainers.ActiveMq.Tests.csproj:PackageReferences\"\n```\n\n----------------------------------------\n\nTITLE: Creating Authentication Token with Expiration\nDESCRIPTION: Code showing how to create an authentication token with a specified expiration time from a running Pulsar container.\nSOURCE: https://github.com/testcontainers/testcontainers-dotnet/blob/develop/docs/modules/pulsar.md#2025-04-22_snippet_7\n\nLANGUAGE: csharp\nCODE:\n```\nvar authToken = await container.CreateAuthenticationTokenAsync(TimeSpan.FromHours(1))\n    .ConfigureAwait(false);\n```\n\n----------------------------------------\n\nTITLE: Configuring API Key for Qdrant Container\nDESCRIPTION: Code snippet demonstrating how to configure an API key for a Qdrant container to enable authentication.\nSOURCE: https://github.com/testcontainers/testcontainers-dotnet/blob/develop/docs/modules/qdrant.md#2025-04-22_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\n--8<-- \"tests/Testcontainers.Qdrant.Tests/QdrantSecureContainerTest.cs:ConfigureQdrantContainerApiKey\"\n```\n\n----------------------------------------\n\nTITLE: Installing Testcontainers.EventHubs NuGet Package\nDESCRIPTION: Command to add the Testcontainers.EventHubs package to a .NET project using the dotnet CLI.\nSOURCE: https://github.com/testcontainers/testcontainers-dotnet/blob/develop/docs/modules/eventhubs.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ndotnet add package Testcontainers.EventHubs\n```\n\n----------------------------------------\n\nTITLE: Accessing Docker API for Advanced Container Configuration\nDESCRIPTION: Shows how to use the CreateParameterModifier to access underlying Docker API properties for specific configurations not exposed by Testcontainers API.\nSOURCE: https://github.com/testcontainers/testcontainers-dotnet/blob/develop/docs/api/best_practices.md#2025-04-22_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\n_builder.WithCreateParameterModifier(Action<TCreateResourceEntity>)\n```\n\n----------------------------------------\n\nTITLE: Dockerfile with Explicit User Permissions\nDESCRIPTION: Example Dockerfile showing how to properly set permissions when switching user context, addressing a known issue in Testcontainers for .NET.\nSOURCE: https://github.com/testcontainers/testcontainers-dotnet/blob/develop/docs/api/create_docker_image.md#2025-04-22_snippet_5\n\nLANGUAGE: Dockerfile\nCODE:\n```\nFROM mcr.microsoft.com/dotnet/sdk:8.0\nWORKDIR /app\nRUN chown app:app .\nUSER app\n```\n\n----------------------------------------\n\nTITLE: Installing Testcontainers.ActiveMq NuGet Package\nDESCRIPTION: Command to add the Testcontainers.ActiveMq package to a .NET project using the dotnet CLI.\nSOURCE: https://github.com/testcontainers/testcontainers-dotnet/blob/develop/docs/modules/activemq.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ndotnet add package Testcontainers.ActiveMq\n```\n\n----------------------------------------\n\nTITLE: Installing Testcontainers.Elasticsearch NuGet Package\nDESCRIPTION: Command to add the Testcontainers.Elasticsearch package to your .NET project using the dotnet CLI.\nSOURCE: https://github.com/testcontainers/testcontainers-dotnet/blob/develop/docs/modules/elasticsearch.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ndotnet add package Testcontainers.Elasticsearch\n```\n\n----------------------------------------\n\nTITLE: Configuring Base ActiveMQ Artemis Container Test\nDESCRIPTION: Base test class setup for ActiveMQ Artemis container using IAsyncLifetime interface.\nSOURCE: https://github.com/testcontainers/testcontainers-dotnet/blob/develop/docs/modules/activemq.md#2025-04-22_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\n--8<-- \"tests/Testcontainers.ActiveMq.Tests/ArtemisContainerTest.cs:UseArtemisContainer\"\n}\n```\n\n----------------------------------------\n\nTITLE: Getting Pulsar HTTP Service URL\nDESCRIPTION: Code snippet that shows how to get the Pulsar HTTP service URL from a running container instance.\nSOURCE: https://github.com/testcontainers/testcontainers-dotnet/blob/develop/docs/modules/pulsar.md#2025-04-22_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\nstring pulsarServiceUrl = _pulsarContainer.GetHttpServiceUrl();\n```\n\n----------------------------------------\n\nTITLE: Installing Testcontainers.Cassandra NuGet Package\nDESCRIPTION: Command to add the Testcontainers.Cassandra package to a .NET project using the dotnet CLI.\nSOURCE: https://github.com/testcontainers/testcontainers-dotnet/blob/develop/docs/modules/cassandra.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ndotnet add package Testcontainers.Cassandra\n```\n\n----------------------------------------\n\nTITLE: Adding Redis Configuration Source in WebApplicationFactory for C#\nDESCRIPTION: This snippet shows a more complex approach to configure Redis in WebApplicationFactory. It implements IConfigurationSource and ConfigurationProvider to automatically start the Redis service before creating the TestServer.\nSOURCE: https://github.com/testcontainers/testcontainers-dotnet/blob/develop/docs/examples/aspnet.md#2025-04-22_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nprivate sealed class CustomWebApplicationFactory : WebApplicationFactory<Program>\n{\n  protected override void ConfigureWebHost(IWebHostBuilder builder)\n  {\n    builder.ConfigureAppConfiguration(configure =>\n    {\n      configure.Add(new RedisConfigurationSource());\n    });\n  }\n}\n\nprivate sealed class RedisConfigurationSource : IConfigurationSource\n{\n  public IConfigurationProvider Build(IConfigurationBuilder builder)\n  {\n    return new RedisConfigurationProvider();\n  }\n}\n\nprivate sealed class RedisConfigurationProvider : ConfigurationProvider\n{\n  private static readonly TaskFactory TaskFactory = new TaskFactory(CancellationToken.None, TaskCreationOptions.None, TaskContinuationOptions.None, TaskScheduler.Default);\n\n  public override void Load()\n  {\n    // Until the asynchronous configuration provider is available,\n    // we use the TaskFactory to spin up a new task that handles the work:\n    // https://github.com/dotnet/runtime/issues/79193\n    // https://github.com/dotnet/runtime/issues/36018\n    TaskFactory.StartNew(LoadAsync)\n      .Unwrap()\n      .ConfigureAwait(false)\n      .GetAwaiter()\n      .GetResult();\n  }\n\n  public async Task LoadAsync()\n  {\n    var redisContainer = new RedisBuilder().Build();\n\n    await redisContainer.StartAsync()\n      .ConfigureAwait(false);\n\n    Set(\"ConnectionStrings:RedisCache\", redisContainer.GetConnectionString());\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Qdrant Client with API Key\nDESCRIPTION: Example showing how to configure a Qdrant client to include the API key in requests to the Qdrant container.\nSOURCE: https://github.com/testcontainers/testcontainers-dotnet/blob/develop/docs/modules/qdrant.md#2025-04-22_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\n--8<-- \"tests/Testcontainers.Qdrant.Tests/QdrantSecureContainerTest.cs:ConfigureQdrantClientApiKey\"\n```\n\n----------------------------------------\n\nTITLE: Using Docker Compose for Documentation Preview\nDESCRIPTION: Command to start a Docker container for previewing the documentation locally using Docker Compose. The documentation will be accessible at http://localhost:8000.\nSOURCE: https://github.com/testcontainers/testcontainers-dotnet/blob/develop/docs/contributing_docs.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ndocker compose up\n```\n\n----------------------------------------\n\nTITLE: Passing Resource Reaper Session ID to Docker Build\nDESCRIPTION: Demonstrates how to pass the Resource Reaper session ID as a build argument to ensure proper cleanup of intermediate layers in multi-stage builds.\nSOURCE: https://github.com/testcontainers/testcontainers-dotnet/blob/develop/docs/api/create_docker_image.md#2025-04-22_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\n_ = new ImageFromDockerfileBuilder()\n  .WithBuildArgument(\"RESOURCE_REAPER_SESSION_ID\", ResourceReaper.DefaultSessionId.ToString(\"D\"));\n```\n\n----------------------------------------\n\nTITLE: Configuring Redis Container for Shared Testing in C#\nDESCRIPTION: Example of configuring a Redis container for shared testing by inheriting from ContainerFixture<TBuilderEntity, TContainerEntity> and implementing IMessageSink.\nSOURCE: https://github.com/testcontainers/testcontainers-dotnet/blob/develop/docs/test_frameworks/xunit_net.md#2025-04-22_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\n--8<-- \"tests/Testcontainers.Xunit.Tests/RedisContainerTest`2.cs:ConfigureRedisContainer\"\n```\n\n----------------------------------------\n\nTITLE: Configuring DbProviderFactory for PostgreSQL in C#\nDESCRIPTION: Example of implementing the abstract DbProviderFactory property to resolve a compatible DbProviderFactory for PostgreSQL.\nSOURCE: https://github.com/testcontainers/testcontainers-dotnet/blob/develop/docs/test_frameworks/xunit_net.md#2025-04-22_snippet_7\n\nLANGUAGE: csharp\nCODE:\n```\n--8<-- \"tests/Testcontainers.Xunit.Tests/PostgreSqlContainer.cs:ConfigureDbProviderFactory\"\n```\n\n----------------------------------------\n\nTITLE: Copying Byte Array Content to a Container File using Testcontainers\nDESCRIPTION: Demonstrates how to create a file in a Docker container from a byte array in memory, useful for dynamically generated content or when file content is already available in memory.\nSOURCE: https://github.com/testcontainers/testcontainers-dotnet/blob/develop/docs/api/create_docker_container.md#2025-04-22_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\n_ = new ContainerBuilder()\n  .WithResourceMapping(Encoding.Default.GetBytes(\"{}\"), \"/app/appsettings.json\");\n```\n\n----------------------------------------\n\nTITLE: GitHub Sponsorship Information in Markdown\nDESCRIPTION: Describes the GitHub Sponsors program for Testcontainers, including the bounty system for issues, using Markdown syntax.\nSOURCE: https://github.com/testcontainers/testcontainers-dotnet/blob/develop/CONTRIBUTING.md#2025-04-22_snippet_1\n\nLANGUAGE: Markdown\nCODE:\n```\n### GitHub Sponsorship\n\nTestcontainers is [in the GitHub Sponsors program](https://github.com/sponsors/testcontainers)!\n\nThis repository is supported by our sponsors, meaning that issues are eligible to have a 'bounty' attached to them by sponsors.\n\nPlease see [the bounty policy page](https://www.testcontainers.org/bounty) if you are interested, either as a sponsor or as a contributor.\n```\n\n----------------------------------------\n\nTITLE: Configuring ActiveMQ Artemis Container Without Authentication\nDESCRIPTION: Test configuration for ActiveMQ Artemis container without authentication settings.\nSOURCE: https://github.com/testcontainers/testcontainers-dotnet/blob/develop/docs/modules/activemq.md#2025-04-22_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\n--8<-- \"tests/Testcontainers.ActiveMq.Tests/ArtemisContainerTest.cs:UseArtemisContainerNoAuth\"\n```\n\n----------------------------------------\n\nTITLE: Running Isolated Redis Container Tests in C#\nDESCRIPTION: Example of running tests with isolated Redis containers, demonstrating that each test gets a new container instance.\nSOURCE: https://github.com/testcontainers/testcontainers-dotnet/blob/develop/docs/test_frameworks/xunit_net.md#2025-04-22_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\n--8<-- \"tests/Testcontainers.Xunit.Tests/RedisContainerTest`1.cs:RunTests\"\n```\n\n----------------------------------------\n\nTITLE: Configuring ActiveMQ Artemis Container with Default Authentication\nDESCRIPTION: Test configuration using default authentication credentials for ActiveMQ Artemis container.\nSOURCE: https://github.com/testcontainers/testcontainers-dotnet/blob/develop/docs/modules/activemq.md#2025-04-22_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\n--8<-- \"tests/Testcontainers.ActiveMq.Tests/ArtemisContainerTest.cs:UseArtemisContainerDefaultAuth\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Docker-in-Docker for GitLab CI/CD\nDESCRIPTION: YAML configuration for enabling Docker-in-Docker service in GitLab CI/CD pipelines. Sets up the Docker service and configures the Docker host address for container access.\nSOURCE: https://github.com/testcontainers/testcontainers-dotnet/blob/develop/docs/cicd/index.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  - docker:dind\nvariables:\n  DOCKER_HOST: tcp://docker:2375\n```\n\n----------------------------------------\n\nTITLE: Implementing Password Property in PostgreSqlConfiguration\nDESCRIPTION: Adds a Password property to the PostgreSqlConfiguration class, including constructors for individual and merged configurations.\nSOURCE: https://github.com/testcontainers/testcontainers-dotnet/blob/develop/docs/modules/index.md#2025-04-22_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\npublic PostgreSqlConfiguration(string password = null)\n{\n  Password = password;\n}\n\npublic PostgreSqlConfiguration(PostgreSqlConfiguration oldValue, PostgreSqlConfiguration newValue)\n  : base(oldValue, newValue)\n{\n  Password = BuildConfiguration.Combine(oldValue.Password, newValue.Password);\n}\n\npublic string Password { get; }\n```\n\n----------------------------------------\n\nTITLE: Required Package References\nDESCRIPTION: XML configuration showing the required NuGet package references for RabbitMQ container testing.\nSOURCE: https://github.com/testcontainers/testcontainers-dotnet/blob/develop/docs/modules/rabbitmq.md#2025-04-22_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n--8<-- \"tests/Testcontainers.RabbitMq.Tests/Testcontainers.RabbitMq.Tests.csproj:PackageReferences\"\n```\n\n----------------------------------------\n\nTITLE: Installing Testcontainers NuGet Package in .NET\nDESCRIPTION: Command to add the Testcontainers NuGet package to a .NET project using the dotnet CLI. This is the first step to start using Testcontainers in a .NET application.\nSOURCE: https://github.com/testcontainers/testcontainers-dotnet/blob/develop/docs/index.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ndotnet add package Testcontainers\n```\n\n----------------------------------------\n\nTITLE: Enabling Pulsar Functions\nDESCRIPTION: Code snippet showing how to enable Pulsar Functions when creating a Pulsar container instance.\nSOURCE: https://github.com/testcontainers/testcontainers-dotnet/blob/develop/docs/modules/pulsar.md#2025-04-22_snippet_9\n\nLANGUAGE: csharp\nCODE:\n```\nPulsarContainer _pulsarContainer = PulsarBuilder().WithFunctions().Build();\n```\n\n----------------------------------------\n\nTITLE: Required NuGet Package References for MSSQL Testing\nDESCRIPTION: XML package references needed for MSSQL container testing, including dependencies for Testcontainers.MsSql, xUnit, and other testing utilities.\nSOURCE: https://github.com/testcontainers/testcontainers-dotnet/blob/develop/docs/modules/mssql.md#2025-04-22_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n--8<-- \"tests/Testcontainers.MsSql.Tests/Testcontainers.MsSql.Tests.csproj:PackageReferences\"\n```\n\n----------------------------------------\n\nTITLE: Required NuGet Package References for Azure Service Bus Tests\nDESCRIPTION: XML snippet showing the necessary package references needed for testing with Azure Service Bus emulator in a .NET project.\nSOURCE: https://github.com/testcontainers/testcontainers-dotnet/blob/develop/docs/modules/servicebus.md#2025-04-22_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n--8<-- \"tests/Testcontainers.ServiceBus.Tests/Testcontainers.ServiceBus.Tests.csproj:PackageReferences\"\n```\n\n----------------------------------------\n\nTITLE: Installing Testcontainers .NET Template\nDESCRIPTION: Commands to clone the repository and install the .NET template for creating new Testcontainers modules.\nSOURCE: https://github.com/testcontainers/testcontainers-dotnet/blob/develop/docs/modules/index.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ngit clone --branch develop git@github.com:testcontainers/testcontainers-dotnet.git\ncd ./testcontainers-dotnet/\ndotnet new --install ./src/Templates\n```\n\n----------------------------------------\n\nTITLE: Package References for Cassandra Tests\nDESCRIPTION: XML snippet showing the required NuGet package references for running Cassandra container tests, including the necessary dependencies for the test project.\nSOURCE: https://github.com/testcontainers/testcontainers-dotnet/blob/develop/docs/modules/cassandra.md#2025-04-22_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n--8<-- \"tests/Testcontainers.Cassandra.Tests/Testcontainers.Cassandra.Tests.csproj:PackageReferences\"\n```\n\n----------------------------------------\n\nTITLE: Installing Testcontainers.MongoDB NuGet Package\nDESCRIPTION: Command to add the Testcontainers.MongoDB package to a .NET project using the dotnet CLI.\nSOURCE: https://github.com/testcontainers/testcontainers-dotnet/blob/develop/docs/modules/mongodb.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ndotnet add package Testcontainers.MongoDb\n```\n\n----------------------------------------\n\nTITLE: Specifying NuGet Package References for Neo4j Tests\nDESCRIPTION: XML snippet from a .NET project file showing the required NuGet package references for Neo4j Testcontainer tests.\nSOURCE: https://github.com/testcontainers/testcontainers-dotnet/blob/develop/docs/modules/neo4j.md#2025-04-22_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n--8<-- \"tests/Testcontainers.Neo4j.Tests/Testcontainers.Neo4j.Tests.csproj:PackageReferences\"\n```\n\n----------------------------------------\n\nTITLE: Installing Testcontainers.Db2 NuGet Package\nDESCRIPTION: Command to add the Testcontainers.Db2 package to a .NET project via NuGet. This package is required to create and manage Db2 containers for testing.\nSOURCE: https://github.com/testcontainers/testcontainers-dotnet/blob/develop/docs/modules/db2.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ndotnet add package Testcontainers.Db2\n```\n\n----------------------------------------\n\nTITLE: Installing RabbitMQ Testcontainers Package\nDESCRIPTION: Command to add the Testcontainers.RabbitMq NuGet package to a .NET project using the dotnet CLI.\nSOURCE: https://github.com/testcontainers/testcontainers-dotnet/blob/develop/docs/modules/rabbitmq.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ndotnet add package Testcontainers.RabbitMq\n```\n\n----------------------------------------\n\nTITLE: Installing Testcontainers.Xunit Package via NuGet in .NET\nDESCRIPTION: Command to add the Testcontainers.Xunit package to a .NET project using the dotnet CLI.\nSOURCE: https://github.com/testcontainers/testcontainers-dotnet/blob/develop/docs/test_frameworks/xunit_net.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ndotnet add package Testcontainers.Xunit\n```\n\n----------------------------------------\n\nTITLE: Installing Testcontainers.ServiceBus NuGet Package\nDESCRIPTION: Command to add the Testcontainers.ServiceBus package to your .NET project using the dotnet CLI.\nSOURCE: https://github.com/testcontainers/testcontainers-dotnet/blob/develop/docs/modules/servicebus.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ndotnet add package Testcontainers.ServiceBus\n```\n\n----------------------------------------\n\nTITLE: Installing Testcontainers.Neo4j NuGet Package\nDESCRIPTION: Command to add the Testcontainers.Neo4j package to a .NET project using the dotnet CLI.\nSOURCE: https://github.com/testcontainers/testcontainers-dotnet/blob/develop/docs/modules/neo4j.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ndotnet add package Testcontainers.Neo4j\n```\n\n----------------------------------------\n\nTITLE: Installing Testcontainers.Qdrant NuGet Package\nDESCRIPTION: Command to add the Testcontainers.Qdrant package to a .NET project, which provides the necessary functionality to create and manage Qdrant containers for testing.\nSOURCE: https://github.com/testcontainers/testcontainers-dotnet/blob/develop/docs/modules/qdrant.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ndotnet add package Testcontainers.Qdrant\n```\n\n----------------------------------------\n\nTITLE: Running Docker Tests with Sibling Containers (Docker CLI)\nDESCRIPTION: Command to run .NET tests in a Docker container using the Docker Wormhole pattern, which mounts the Docker socket to allow container creation from within the test container.\nSOURCE: https://github.com/testcontainers/testcontainers-dotnet/blob/develop/docs/dind/index.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ndocker run -v /var/run/docker.sock.raw:/var/run/docker.sock $IMAGE dotnet test\n```\n\n----------------------------------------\n\nTITLE: Installing Testcontainers.Pulsar NuGet Package\nDESCRIPTION: Command to add the Testcontainers.Pulsar package to a .NET project using the dotnet CLI.\nSOURCE: https://github.com/testcontainers/testcontainers-dotnet/blob/develop/docs/modules/pulsar.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ndotnet add package Testcontainers.Pulsar\n```\n\n----------------------------------------\n\nTITLE: Creating PostgreSQL Module\nDESCRIPTION: CLI commands to create and add a new PostgreSQL module to the Testcontainers solution.\nSOURCE: https://github.com/testcontainers/testcontainers-dotnet/blob/develop/docs/modules/index.md#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ndotnet new tcm --name PostgreSql --official-module true --output ./src\ndotnet sln add ./src/Testcontainers.PostgreSql/Testcontainers.PostgreSql.csproj\n```\n\n----------------------------------------\n\nTITLE: Setting Docker Context with Environment Variable in Testcontainers\nDESCRIPTION: Sets the Docker context to 'tcc' using an environment variable, directing Testcontainers to use the specified context for container operations.\nSOURCE: https://github.com/testcontainers/testcontainers-dotnet/blob/develop/docs/custom_configuration/index.md#2025-04-22_snippet_3\n\nLANGUAGE: properties\nCODE:\n```\nDOCKER_CONTEXT=tcc\n```\n\n----------------------------------------\n\nTITLE: Setting Docker Context with Properties File in Testcontainers\nDESCRIPTION: Sets the Docker context to 'tcc' using a properties file entry, directing Testcontainers to use the specified context for container operations.\nSOURCE: https://github.com/testcontainers/testcontainers-dotnet/blob/develop/docs/custom_configuration/index.md#2025-04-22_snippet_4\n\nLANGUAGE: properties\nCODE:\n```\ndocker.context=tcc\n```\n\n----------------------------------------\n\nTITLE: Package References for Pulsar Tests\nDESCRIPTION: XML snippet showing the NuGet package dependencies required for testing with Testcontainers.Pulsar.\nSOURCE: https://github.com/testcontainers/testcontainers-dotnet/blob/develop/docs/modules/pulsar.md#2025-04-22_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n--8<-- \"tests/Testcontainers.Pulsar.Tests/Testcontainers.Pulsar.Tests.csproj:PackageReferences\"\n```\n\n----------------------------------------\n\nTITLE: Required NuGet Package References for Event Hubs Testing\nDESCRIPTION: XML snippet showing the necessary NuGet package references needed for testing with Testcontainers.EventHubs in a project file.\nSOURCE: https://github.com/testcontainers/testcontainers-dotnet/blob/develop/docs/modules/eventhubs.md#2025-04-22_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n--8<-- \"tests/Testcontainers.EventHubs.Tests/Testcontainers.EventHubs.Tests.csproj:PackageReferences\"\n```\n\n----------------------------------------\n\nTITLE: Running the Respawn Example with .NET Test Command\nDESCRIPTION: Console commands to clone the testcontainers-dotnet repository, navigate to the Respawn example directory, and execute the tests using the dotnet CLI. This demonstrates how to run the example that uses Respawn to reset PostgreSQL database state between tests.\nSOURCE: https://github.com/testcontainers/testcontainers-dotnet/blob/develop/examples/Respawn/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone --branch develop git@github.com:testcontainers/testcontainers-dotnet.git\ncd ./testcontainers-dotnet/examples/Respawn/\ndotnet test Respawn.sln --configuration=Release\n```\n\n----------------------------------------\n\nTITLE: Building and Testing the Testcontainers-dotnet Project with Cake\nDESCRIPTION: Command for building and testing the testcontainers-dotnet project using Cake build automation system. This command verifies that all tests are passing before submitting a contribution.\nSOURCE: https://github.com/testcontainers/testcontainers-dotnet/blob/develop/docs/contributing.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ndotnet cake\n```\n\n----------------------------------------\n\nTITLE: Setting up Python Environment for MkDocs Documentation\nDESCRIPTION: Instructions for setting up a Python virtual environment and installing dependencies for the Testcontainers .NET documentation. Requires Python 3.8.0 or higher to install dependencies and serve the documentation locally with auto-updates.\nSOURCE: https://github.com/testcontainers/testcontainers-dotnet/blob/develop/docs/contributing_docs.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\npip install -r requirements.txt\nmkdocs serve\n```\n\n----------------------------------------\n\nTITLE: Linking to Contribution Guidelines in Markdown\nDESCRIPTION: Provides links to the main contributing guidelines and documentation for contributing documentation changes using Markdown syntax.\nSOURCE: https://github.com/testcontainers/testcontainers-dotnet/blob/develop/CONTRIBUTING.md#2025-04-22_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n# Contributing\n\nPlease see the [main contributing guidelines](./docs/contributing.md).\n\nThere are additional docs describing [contributing documentation changes](./docs/contributing_docs.md).\n```\n\n----------------------------------------\n\nTITLE: Using Neo4j Container in C# Test\nDESCRIPTION: C# code snippet showing how to use a Neo4j container in a test scenario. This example demonstrates connecting to the Neo4j instance and performing operations.\nSOURCE: https://github.com/testcontainers/testcontainers-dotnet/blob/develop/docs/modules/neo4j.md#2025-04-22_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\n--8<-- \"tests/Testcontainers.Neo4j.Tests/Neo4jContainerTest.cs:UseNeo4jContainer\"\n```\n\n----------------------------------------\n\nTITLE: Specifying Python Package Dependencies for Testcontainers .NET Documentation\nDESCRIPTION: This snippet lists the required Python packages and their versions for building the Testcontainers .NET documentation. It includes MkDocs, a Markdown plugin, and the Material theme for MkDocs.\nSOURCE: https://github.com/testcontainers/testcontainers-dotnet/blob/develop/requirements.txt#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nmkdocs==1.6.1\nmkdocs-markdownextradata-plugin==0.2.6\nmkdocs-material==8.5.11\n```\n\n----------------------------------------\n\nTITLE: Installing and Using Testcontainers .NET Module Template\nDESCRIPTION: Commands to install the Testcontainers .NET module template and scaffold a new module. The template needs to be installed first, then a new module can be created by specifying a name and output directory.\nSOURCE: https://github.com/testcontainers/testcontainers-dotnet/blob/develop/src/Templates/README.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ndotnet new --install ./src/Templates\n```\n\nLANGUAGE: shell\nCODE:\n```\ndotnet new tcm --name ${module_name} --output ${output_directory}\n```\n\n----------------------------------------\n\nTITLE: PostgreSQL Builder Configuration\nDESCRIPTION: Implementation of the PostgreSQL builder class constructors and configuration property setup in C#.\nSOURCE: https://github.com/testcontainers/testcontainers-dotnet/blob/develop/docs/modules/index.md#2025-04-22_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\npublic PostgreSqlBuilder()\n  : this(new PostgreSqlConfiguration())\n{\n  DockerResourceConfiguration = Init().DockerResourceConfiguration;\n}\n\nprivate PostgreSqlBuilder(PostgreSqlConfiguration resourceConfiguration)\n  : base(resourceConfiguration)\n{\n  DockerResourceConfiguration = resourceConfiguration;\n}\n\nprotected override PostgreSqlConfiguration DockerResourceConfiguration { get; }\n```"
  }
]