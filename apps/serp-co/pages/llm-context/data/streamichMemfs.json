[
  {
    "owner": "streamich",
    "repo": "memfs",
    "content": "TITLE: Basic File Operations with MemFS\nDESCRIPTION: This example demonstrates how to write and read files using the `memfs` library. It imports the `fs` object from `memfs`, writes a string to a file, and then reads the file back. The `utf8` encoding is specified when reading the file.\nSOURCE: https://github.com/streamich/memfs/blob/master/docs/node/usage.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { fs } from 'memfs';\n\nfs.writeFileSync('/hello.txt', 'World!');\nfs.readFileSync('/hello.txt', 'utf8'); // World!\n```\n\n----------------------------------------\n\nTITLE: Importing `vol` and `fs` from MemFS\nDESCRIPTION: This code snippet demonstrates how to import the `vol` (Volume instance) and `fs` (fs-like object) from the `memfs` package. These are the primary objects used for interacting with the in-memory file system.\nSOURCE: https://github.com/streamich/memfs/blob/master/docs/node/reference.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { vol, fs } from 'memfs';\n```\n\n----------------------------------------\n\nTITLE: Creating a new MemFS Volume instance\nDESCRIPTION: This snippet shows how to create a new, independent in-memory file system using the `Volume` constructor.  Each volume is isolated from others.  The `Volume` instance is assigned to the `vol` variable.\nSOURCE: https://github.com/streamich/memfs/blob/master/docs/node/reference.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Volume } from 'memfs';\nconst vol = new Volume();\n```\n\n----------------------------------------\n\nTITLE: Creating a File System from JSON\nDESCRIPTION: This example demonstrates how to create a file system from a plain JSON object using `vol.fromJSON`. It imports `fs` and `vol` from `memfs`, defines a JSON object representing the file system structure, and then uses `vol.fromJSON` to populate the in-memory file system. The example then reads files from the created file system using both `fs` and `vol`.\nSOURCE: https://github.com/streamich/memfs/blob/master/docs/node/usage.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { fs, vol } from 'memfs';\n\nconst json = {\n  './README.md': '1',\n  './src/index.js': '2',\n  './node_modules/debug/index.js': '3',\n};\nvol.fromJSON(json, '/app');\n\nfs.readFileSync('/app/README.md', 'utf8'); // 1\nvol.readFileSync('/app/src/index.js', 'utf8'); // 2\n```\n\n----------------------------------------\n\nTITLE: Adding Files to Volume from JSON\nDESCRIPTION: Adds multiple files to the in-memory file system represented by `vol`.  The `fromJSON` method takes a JSON object where keys are file paths and values are the contents. An optional `cwd` (current working directory) parameter can be provided to resolve relative paths.\nSOURCE: https://github.com/streamich/memfs/blob/master/docs/node/reference.md#_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nvol.fromJSON(\n  {\n    './index.js': '...',  \n    './package.json': '...',    \n    './index.node': new Buffer(),\n  },\n  '/app',\n);\n```\n\n----------------------------------------\n\nTITLE: Writing a file to MemFS Volume\nDESCRIPTION: This code writes a file to the in-memory file system.  The `writeFileSync` method is used to create or overwrite a file at the specified path with the given content.  The `vol` object is an instance of the `Volume` class.\nSOURCE: https://github.com/streamich/memfs/blob/master/docs/node/reference.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nvol.writeFileSync('/foo', 'bar');\n```\n\n----------------------------------------\n\nTITLE: Creating Volume from JSON object\nDESCRIPTION: Creates a new volume populated with files from a JSON object. The keys in the JSON object represent file paths, and the values represent file contents.\nSOURCE: https://github.com/streamich/memfs/blob/master/docs/node/reference.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst vol = Volume.fromJSON({\n  '/app/index.js': '...',\n  '/app/package.json': '...',\n});\n```\n\n----------------------------------------\n\nTITLE: Create FileSystemDirectoryHandle from Node FS JavaScript\nDESCRIPTION: This code snippet shows how to create a `FileSystemDirectoryHandle` from a Node.js `fs` module or an `fs`-like object. It requires the `nodeToFsa` function from the `memfs/lib/node-to-fsa` module. The function takes the `fs` object, a path to a folder, and an optional options object as parameters. The options object can specify the mode, such as 'readwrite'.\nSOURCE: https://github.com/streamich/memfs/blob/master/docs/fsa/fs-to-fsa.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { nodeToFsa } from 'memfs/lib/node-to-fsa';\n\nconst dir = nodeToFsa(fs, '/path/to/folder', { mode: 'readwrite' });\n```\n\n----------------------------------------\n\nTITLE: Creating an fs-like object from MemFS Volume\nDESCRIPTION: This code snippet shows how to create an `fs`-like object from a `Volume` instance using `createFsFromVolume`. This provides an interface similar to the standard Node.js `fs` module for interacting with the in-memory file system.\nSOURCE: https://github.com/streamich/memfs/blob/master/docs/node/reference.md#_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createFsFromVolume, Volume } from 'memfs';\n\nconst vol = new Volume();\nconst fs = createFsFromVolume(vol);\n```\n\n----------------------------------------\n\nTITLE: Initializing crudfs with File System Access API in JavaScript\nDESCRIPTION: Demonstrates how to create a `crudfs` instance using the File System Access API `FileSystemDirectoryHandle`. It imports the `FsaCrud` class and initializes it with a directory handle.  Dependencies: `memfs/lib/fsa-to-crud`.\nSOURCE: https://github.com/streamich/memfs/blob/master/docs/crudfs/index.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { FsaCrud } from 'memfs/lib/fsa-to-crud';\n\nconst crud = new FsaCrud(dirHandle);\n```\n\n----------------------------------------\n\nTITLE: Writing a File Asynchronously JavaScript\nDESCRIPTION: This snippet shows how to use the asynchronous `fs.promises.writeFile` method provided by the `FsaNodeFs` class to write data to a file.\nSOURCE: https://github.com/streamich/memfs/blob/master/docs/fsa/fsa-to-fs.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nawait fs.promises.writeFile('/hello.txt', 'Hello World!');\n```\n\n----------------------------------------\n\nTITLE: CRUD Operations Example using crudfs in JavaScript\nDESCRIPTION: Illustrates basic CRUD operations on a `crudfs` instance. It shows how to create, list, retrieve, delete, and drop resources within a collection.  It uses the `put`, `list`, `get`, `delete`, and `drop` methods of the `crud` object.\nSOURCE: https://github.com/streamich/memfs/blob/master/docs/crudfs/index.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nawait crud.put(['user', 'files'], 'file1.bin', new Uint8Array([1, 2, 3]));\nawait crud.put(['user', 'files'], 'file2.bin', new Uint8Array([1, 2, 3]));\n\nconst files = await crud.list(['user', 'files']);\n\nconst file1 = await crud.get(['user', 'files'], 'file1.bin');\n\nawait crud.delete(['user', 'files'], 'file1.bin');\n\nawait crud.drop(['user', 'files']);\n```\n\n----------------------------------------\n\nTITLE: Using MemFS for Testing\nDESCRIPTION: This snippet demonstrates using MemFS in testing scenarios. It writes a file using `vol.writeFileSync`, then asserts that the JSON representation of the in-memory file system matches the expected JSON.\nSOURCE: https://github.com/streamich/memfs/blob/master/docs/node/usage.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nvol.writeFileSync('/foo', 'bar');\nexpect(vol.toJSON()).toEqual({ '/foo': 'bar' });\n```\n\n----------------------------------------\n\nTITLE: Create Hash Function in TypeScript\nDESCRIPTION: This TypeScript snippet demonstrates how to create a hashing function using the `crypto` module. The function takes a `Uint8Array` as input, computes its SHA1 hash, and returns the hexadecimal representation of the hash as a string. Requires the 'crypto' module.\nSOURCE: https://github.com/streamich/memfs/blob/master/docs/casfs/index.md#_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { createHash } from 'crypto';\n\nconst hash = async (blob: Uint8Array): Promise<string> => {\n  const shasum = createHash('sha1');\n  shasum.update(blob);\n  return shasum.digest('hex');\n};\n```\n\n----------------------------------------\n\nTITLE: Create a new file using File System Access API JavaScript\nDESCRIPTION: This code snippet demonstrates how to create a new file using the File System Access API. It assumes that a `FileSystemDirectoryHandle` named `dir` has already been created. The `getFileHandle` method is called on the `dir` object with the filename and an options object. The `create` option is set to `true` to create the file if it does not already exist.\nSOURCE: https://github.com/streamich/memfs/blob/master/docs/fsa/fs-to-fsa.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst file = await dir.getFileHandle('foo.txt', { create: true });\n```\n\n----------------------------------------\n\nTITLE: Integrating MemFS with UnionFS\nDESCRIPTION: This example shows how to integrate MemFS with `unionfs` to create a unified file system consisting of both the real disk file system and the in-memory MemFS volume. It imports `fs` from Node.js, `ufs` from `unionfs`, and uses `ufs.use` to combine the real file system and the MemFS volume. After this, reads can be performed from the combined filesystem.\nSOURCE: https://github.com/streamich/memfs/blob/master/docs/node/usage.md#_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as fs from 'fs';\nimport { ufs } from 'unionfs';\n\nufs.use(fs).use(vol);\n\nufs.readFileSync('/foo'); // bar\n```\n\n----------------------------------------\n\nTITLE: Put and Get Blobs in JavaScript\nDESCRIPTION: This JavaScript snippet shows how to use the `put` and `get` methods of a `cas` instance to store and retrieve blobs. The `put` method takes a `Uint8Array` as input and returns the hash of the blob. The `get` method takes a hash as input and returns the corresponding blob.\nSOURCE: https://github.com/streamich/memfs/blob/master/docs/casfs/index.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst blob = new Uint8Array([1, 2, 3]);\n\nconst hash = await cas.put(blob);\nconsole.log(hash); // 9dc58b6d4e8eefb5a3c3e0c9f4a1a0b1b2b3b4b5\n\nconst blob2 = await cas.get(hash);\n```\n\n----------------------------------------\n\nTITLE: Print In-Memory File System Tree - TypeScript\nDESCRIPTION: This snippet demonstrates how to print a directory tree of an in-memory file system created with `memfs`. It initializes `memfs` with a specific directory structure and then uses `toTreeSync` to print the tree. It requires the `memfs` module. The output is an ASCII representation of the in-memory file system's directory tree printed to the console.\nSOURCE: https://github.com/streamich/memfs/blob/master/docs/print/index.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { memfs } from 'memfs';\n\nconst { fs } = memfs({\n  '/Users/streamich/src/github/memfs/src': {\n    'package.json': '...',\n    'tsconfig.json': '...',\n  },\n});\n\nconsole.log(toTreeSync(fs));\n\n// /\n// └─ Users/\n//    └─ streamich/\n//       └─ src/\n//          └─ github/\n//             └─ memfs/\n//                └─ src/\n//                   ├─ package.json\n//                   ├─ tsconfig.json\n```\n\n----------------------------------------\n\nTITLE: Patching Require Function with fs-monkey\nDESCRIPTION: This example shows how to use `fs-monkey` to monkey-patch Node's `require` function, making it use the in-memory MemFS volume. It imports `patchRequire` from `fs-monkey`, writes a JavaScript file to the MemFS volume using `vol.writeFileSync`, calls `patchRequire(vol)` to patch the `require` function, and then `require`s the file from the MemFS volume, effectively executing it.\nSOURCE: https://github.com/streamich/memfs/blob/master/docs/node/usage.md#_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nimport { patchRequire } from 'fs-monkey';\n\nvol.writeFileSync('/index.js', 'console.log(\"hi world\")');\npatchRequire(vol);\nrequire('/index'); // hi world\n```\n\n----------------------------------------\n\nTITLE: Initializing crudfs with Node.js fs module in JavaScript\nDESCRIPTION: Demonstrates how to create a `crudfs` instance using the Node.js `fs` module. It imports the `fs` module and the `NodeCrud` class, then initializes `NodeCrud` with the `fs.promises` and a directory path. Dependencies: `fs`, `memfs/lib/node-to-crud`.\nSOURCE: https://github.com/streamich/memfs/blob/master/docs/crudfs/index.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport * as fs from 'fs';\nimport { NodeCrud } from 'memfs/lib/node-to-crud';\n\nconst crud = new NodeCrud({ fs: fs.promises, dir: '/path/to/folder' });\n```\n\n----------------------------------------\n\nTITLE: Restoring POJO Snapshot - TypeScript\nDESCRIPTION: This snippet demonstrates how to restore a file system from a POJO snapshot using both synchronous and asynchronous methods. The `fromSnapshotSync` and `fromSnapshot` functions import the snapshot data back into the file system, where `snap` is the snapshot object, `fs` is the file system object, and `path` is the target directory.\nSOURCE: https://github.com/streamich/memfs/blob/master/docs/snapshot/index.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nsnapshot.fromSnapshotSync(snap, { fs, path });\nawait snapshot.fromSnapshot(snap, { fs: fs.promises, path });\n```\n\n----------------------------------------\n\nTITLE: Restoring Binary Snapshot (CBOR) - TypeScript\nDESCRIPTION: This snippet shows how to restore a file system from a binary snapshot (`Uint8Array`, CBOR encoded) using both synchronous and asynchronous methods. The `fromBinarySnapshotSync` and `fromBinarySnapshot` functions import the snapshot data back into the file system, where `uint8` is the `Uint8Array` snapshot, `fs` is the file system object, and `path` is the target directory.\nSOURCE: https://github.com/streamich/memfs/blob/master/docs/snapshot/index.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nsnapshot.fromBinarySnapshotSync(uint8, { fs, path });\nawait snapshot.fromBinarySnapshot(uint8, { fs: fs.promises, path });\n```\n\n----------------------------------------\n\nTITLE: Creating Binary Snapshot (CBOR) - TypeScript\nDESCRIPTION: This snippet demonstrates how to create a binary snapshot (CBOR encoded `Uint8Array`) of a file system directory using both synchronous and asynchronous methods. The `toBinarySnapshotSync` and `toBinarySnapshot` functions convert the file system content into a `Uint8Array` representation, where `fs` is the file system object and `path` is the directory to snapshot.\nSOURCE: https://github.com/streamich/memfs/blob/master/docs/snapshot/index.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst uint8 = snapshot.toBinarySnapshotSync({ fs, path });\nconst uint8 = await snapshot.toBinarySnapshot({ fs: fs.promises, path });\n```\n\n----------------------------------------\n\nTITLE: Initializing FsaNodeFs for Async Usage JavaScript\nDESCRIPTION: This snippet demonstrates how to initialize the `FsaNodeFs` class to use the asynchronous `fs` API. It imports the class and instantiates it with a `FileSystemDirectoryHandle` object.\nSOURCE: https://github.com/streamich/memfs/blob/master/docs/fsa/fsa-to-fs.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { FsaNodeFs } from 'memfs/lib/fsa-to-node';\n\nconst fs = new FsaNodeFs(dir);\n```\n\n----------------------------------------\n\nTITLE: Initializing FsaNodeFs for Sync Usage JavaScript\nDESCRIPTION: This snippet demonstrates how to initialize the `FsaNodeFs` class for synchronous API usage. It starts a worker and then instantiates `FsaNodeFs` with both the directory handle and the adapter.\nSOURCE: https://github.com/streamich/memfs/blob/master/docs/fsa/fsa-to-fs.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { FsaNodeFs, FsaNodeSyncAdapterWorker } from 'memfs/lib/fsa-to-node';\n\nconst adapter = await FsaNodeSyncAdapterWorker.start('https://<path>/worker.js', dir);\nconst fs = new FsaNodeFs(dir, adapter);\n```\n\n----------------------------------------\n\nTITLE: Creating Current Working Directory in memfs (JavaScript)\nDESCRIPTION: This code snippet demonstrates how to create the current working directory, as defined by `process.cwd()`, within the `memfs` volume. This ensures that relative paths can be resolved correctly. The `mkdirSync` method is used with the `recursive` option to create all necessary parent directories.\nSOURCE: https://github.com/streamich/memfs/blob/master/docs/node/relative-paths.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nvol.mkdirSync(process.cwd(), { recursive: true });\n```\n\n----------------------------------------\n\nTITLE: Constructing New MemFS Volumes\nDESCRIPTION: This example illustrates how to create a new MemFS volume with initial content during construction. It imports `memfs`, calls the `memfs` function with an initial file system object, and then reads the file using the returned `fs` object.\nSOURCE: https://github.com/streamich/memfs/blob/master/docs/node/usage.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { memfs } from 'memfs';\n\nconst { fs, vol } = memfs({ '/foo': 'bar' });\n\nfs.readFileSync('/foo', 'utf8'); // bar\n```\n\n----------------------------------------\n\nTITLE: Restoring JSON Snapshot - TypeScript\nDESCRIPTION: This snippet shows how to restore a file system from a JSON snapshot (`Uint8Array`) using both synchronous and asynchronous methods. The `fromJsonSnapshotSync` and `fromJsonSnapshot` functions import the snapshot data back into the file system, where `uint8` is the `Uint8Array` snapshot, `fs` is the file system object, and `path` is the target directory.\nSOURCE: https://github.com/streamich/memfs/blob/master/docs/snapshot/index.md#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nsnapshot.fromJsonSnapshotSync(uint8, { fs, path });\nawait snapshot.fromJsonSnapshot(uint8, { fs: fs.promises, path });\n```\n\n----------------------------------------\n\nTITLE: Importing the Snapshot Utility - TypeScript\nDESCRIPTION: This snippet demonstrates how to import the snapshot utility from the `memfs/lib/snapshot` module in a TypeScript project. This import provides access to functions for creating and restoring file system snapshots in various formats.\nSOURCE: https://github.com/streamich/memfs/blob/master/docs/snapshot/index.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as snapshot from 'memfs/lib/snapshot';\n```\n\n----------------------------------------\n\nTITLE: Importing individual functions from MemFS\nDESCRIPTION: This code snippet demonstrates how to import individual filesystem functions directly from `memfs`. This is similar to how you would import functions from the standard Node.js `fs` module. This includes `readFileSync`, `F_OK`, and `ReadStream`.\nSOURCE: https://github.com/streamich/memfs/blob/master/docs/node/reference.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { readFileSync, F_OK, ReadStream } from 'memfs';\n```\n\n----------------------------------------\n\nTITLE: Initialize casfs with Node.js fs module in JavaScript\nDESCRIPTION: This snippet shows how to initialize `casfs` using Node.js' `fs` module and the `memfs` library. It demonstrates the creation of an `FsaCrud` instance from a Node.js `fs` instance and using that to initiate `CrudCas`.\nSOURCE: https://github.com/streamich/memfs/blob/master/docs/casfs/index.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport * as fs from 'fs';\nimport { nodeToFsa } from 'memfs/lib/node-to-fsa';\nimport { FsaCrud } from 'memfs/lib/fsa-to-crud';\n\nconst fsa = nodeToFsa(fs, '/path/to/folder', { mode: 'readwrite' });\nconst crud = new FsaCrud(fsa);\nconst cas = new CrudCas(crud, { hash });\n```\n\n----------------------------------------\n\nTITLE: Get Blob Information in JavaScript\nDESCRIPTION: This JavaScript snippet shows how to retrieve information about a blob using the `info` method of a `cas` instance. The `info` method takes the hash of the blob as input and returns an object containing information about the blob.\nSOURCE: https://github.com/streamich/memfs/blob/master/docs/casfs/index.md#_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst info = await cas.info(hash);\n```\n\n----------------------------------------\n\nTITLE: Delete Blob in JavaScript\nDESCRIPTION: This JavaScript snippet demonstrates how to delete a blob using the `del` method of a `cas` instance. The `del` method takes the hash of the blob as input.\nSOURCE: https://github.com/streamich/memfs/blob/master/docs/casfs/index.md#_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nawait cas.del(hash);\n```\n\n----------------------------------------\n\nTITLE: Binding fs methods from MemFS\nDESCRIPTION: This code snippet illustrates how the methods of the `fs`-like object created by `createFsFromVolume` are bound, allowing them to be destructured and used directly. This avoids the need to call methods on the `fs` object directly.\nSOURCE: https://github.com/streamich/memfs/blob/master/docs/node/reference.md#_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nconst { createFileSync, readFileSync } = fs;\n```\n\n----------------------------------------\n\nTITLE: Exporting to JSON with MemFS\nDESCRIPTION: This example shows how to export the in-memory file system to a JSON object. It uses `vol.writeFileSync` to create a file with some content, and then calls `vol.toJSON()` to get a JSON representation of the file system.\nSOURCE: https://github.com/streamich/memfs/blob/master/docs/node/usage.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nvol.writeFileSync('/script.sh', 'sudo rm -rf *');\nvol.toJSON(); // {\"/script.sh\": \"sudo rm -rf *\"}\n```\n\n----------------------------------------\n\nTITLE: Print Directory Tree with Real File System - TypeScript\nDESCRIPTION: This snippet demonstrates how to print a directory tree of the `/src/fsa-to-node` folder of the project using the `toTreeSync` function and the standard `fs` module. It requires the `fs` module and `toTreeSync` from `memfs`. The output is an ASCII representation of the directory tree printed to the console.\nSOURCE: https://github.com/streamich/memfs/blob/master/docs/print/index.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as fs from 'fs';\nimport { toTreeSync } from 'memfs/lib/print';\n\nconsole.log(toTreeSync(fs, { dir: process.cwd() + '/src/fsa-to-node' }));\n\n// Output:\n// src/\n// ├─ Dirent.ts\n// ├─ Stats.ts\n// ├─ __tests__/\n// │  ├─ hasBigInt.js\n// │  ├─ index.test.ts\n// │  ├─ node.test.ts\n// │  ├─ process.test.ts\n// │  ├─ promises.test.ts\n// ...\n```\n\n----------------------------------------\n\nTITLE: Changing Current Working Directory (JavaScript)\nDESCRIPTION: This code snippet shows how to change the current working directory to the root directory ('/') using `process.chdir()`. This is a solution to ensure that relative paths can be resolved correctly, as the root directory always exists in memfs volumes. It requires the `process` module.\nSOURCE: https://github.com/streamich/memfs/blob/master/docs/node/relative-paths.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nprocess.chdir('/');\n```\n\n----------------------------------------\n\nTITLE: Running the Git-FSA Demo\nDESCRIPTION: This command is used to execute the `git-fsa` demo, showcasing the interoperability of `crudfs` and `casfs` in browser and Node.js environments.\nSOURCE: https://github.com/streamich/memfs/blob/master/demo/crud-and-cas/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nyarn demo:git-fsa\n```\n\n----------------------------------------\n\nTITLE: Running Git FSA Demo\nDESCRIPTION: This command is used to run the Git File System Access API demo using yarn.  It executes the script defined under the `demo:git-fsa` key in the `package.json` file.\nSOURCE: https://github.com/streamich/memfs/blob/master/demo/git-fsa/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nyarn demo:git-fsa\n```\n\n----------------------------------------\n\nTITLE: Creating JSON Snapshot - TypeScript\nDESCRIPTION: This snippet demonstrates how to create a JSON snapshot (encoded as `Uint8Array`) of a file system directory using both synchronous and asynchronous methods. The `toJsonSnapshotSync` and `toJsonSnapshot` functions convert the file system content into a JSON `Uint8Array` representation, where `fs` is the file system object and `path` is the directory to snapshot. Binary data is encoded as Base64 data URL strings.\nSOURCE: https://github.com/streamich/memfs/blob/master/docs/snapshot/index.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nconst uint8 = snapshot.toJsonSnapshotSync({ fs, path });\nconst uint8 = await snapshot.toJsonSnapshot({ fs: fs.promises, path });\n```\n\n----------------------------------------\n\nTITLE: Directory Node Structure - TypeScript\nDESCRIPTION: This snippet illustrates the structure of a directory node in the snapshot format, which follows Compact JSON. The directory node is represented as an array tuple.  The first element is the node type (`0`), the second is the metadata object, and the third element is a map of child nodes.\nSOURCE: https://github.com/streamich/memfs/blob/master/docs/snapshot/index.md#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n[\n  0,\n  {},\n  {\n    file: [1, {}, new Uint8Array([1, 2, 3])],\n  },\n];\n```\n\n----------------------------------------\n\nTITLE: File Node Structure - TypeScript\nDESCRIPTION: This snippet demonstrates the structure of a file node in the snapshot format, adhering to Compact JSON. File nodes are represented as an array tuple, where the first element is the node type (`1`), the second element is the metadata object, and the third element is the file content encoded as `Uint8Array`.\nSOURCE: https://github.com/streamich/memfs/blob/master/docs/snapshot/index.md#_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\n[1, {}, new Uint8Array([1, 2, 3])];\n```\n\n----------------------------------------\n\nTITLE: Symlink Node Structure - TypeScript\nDESCRIPTION: This snippet shows the structure of a symlink node in the snapshot format, following Compact JSON. Symlink nodes are represented as an array tuple where the first element is the node type (`2`) and the second element is the metadata object containing the `target` property that specifies the symlink target path.\nSOURCE: https://github.com/streamich/memfs/blob/master/docs/snapshot/index.md#_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\n[2, { target: 'file' }];\n```\n\n----------------------------------------\n\nTITLE: FsaNodeSyncWorker Implementation JavaScript\nDESCRIPTION: This snippet shows the content of a worker file for synchronous filesystem adapter. It imports and starts `FsaNodeSyncWorker` if the code is running within a worker context (i.e., not in the main window).\nSOURCE: https://github.com/streamich/memfs/blob/master/docs/fsa/fsa-to-fs.md#_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { FsaNodeSyncWorker } from '../../src/fsa-to-node/worker/FsaNodeSyncWorker';\n\nif (typeof window === 'undefined') {\n  const worker = new FsaNodeSyncWorker();\n  worker.start();\n}\n```\n\n----------------------------------------\n\nTITLE: Running the Git OPFS Demo\nDESCRIPTION: This command executes the Git OPFS demo using yarn.  It assumes that yarn is installed and configured correctly in the environment. The demo showcases git operations within a browser context using memfs and isomorphic-git.\nSOURCE: https://github.com/streamich/memfs/blob/master/demo/git-opfs/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nyarn demo:git-opfs\n```\n\n----------------------------------------\n\nTITLE: Running the git demo with yarn and ts-node\nDESCRIPTION: This snippet demonstrates the commands required to execute the isomorphic-git demo using yarn for dependency management and ts-node for running the TypeScript file.\nSOURCE: https://github.com/streamich/memfs/blob/master/demo/git/README.md#_snippet_0\n\nLANGUAGE: Bash\nCODE:\n```\nyarn\nnpx ts-node demo/git/index.ts\n```\n\n----------------------------------------\n\nTITLE: Installing memfs using npm\nDESCRIPTION: This command installs the memfs package using npm, a package manager for Node.js. It adds memfs as a dependency to your project.\nSOURCE: https://github.com/streamich/memfs/blob/master/README.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm i memfs\n```\n\n----------------------------------------\n\nTITLE: Webpack Dev Server Configuration JavaScript\nDESCRIPTION: This snippet shows the necessary configuration for a Webpack dev server to enable HTTPS and set the required headers for Atomics and SharedArrayBuffer to work, which are needed for the synchronous API to function correctly.  This includes setting `https: true` and configuring `Cross-Origin-Opener-Policy` and `Cross-Origin-Embedder-Policy` headers.\nSOURCE: https://github.com/streamich/memfs/blob/master/docs/fsa/fsa-to-fs.md#_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\n{\n  devServer: {\n    // HTTPS is required for Atomics and SharedArrayBuffer to work.\n    https: true,\n    headers: {\n      // These two headers are required for Atomics and SharedArrayBuffer to work.\n      \"Cross-Origin-Opener-Policy\": \"same-origin\",\n      \"Cross-Origin-Embedder-Policy\": \"require-corp\",\n    },\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Creating POJO Snapshot - TypeScript\nDESCRIPTION: This snippet shows how to create a POJO (Plain Old JavaScript Object) snapshot of a file system directory using both synchronous and asynchronous methods. The `toSnapshotSync` and `toSnapshot` functions convert the file system content into a POJO representation, where `fs` is the file system object and `path` is the directory to snapshot.\nSOURCE: https://github.com/streamich/memfs/blob/master/docs/snapshot/index.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst snap = snapshot.toSnapshotSync({ fs, path });\nconst snap = await snapshot.toSnapshot({ fs: fs.promises, path });\n```\n\n----------------------------------------\n\nTITLE: Creating a file system tree from MemFS Volume (TypeScript)\nDESCRIPTION: This code shows how to generate a visual representation of the in-memory file system as a tree structure. It imports the `memfs` function and then utilizes the `vol.toTree()` to print the file system structure to the console.\nSOURCE: https://github.com/streamich/memfs/blob/master/docs/node/reference.md#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { memfs } from 'memfs';\n\nconst { vol } = memfs({\n  '/Users/streamich/src/github/memfs/src': {\n    'package.json': '...',    \n    'tsconfig.json': '...',   \n    'index.ts': '...',    \n    util: {\n      'index.ts': '...',      \n      print: {\n        'index.ts': '...',        \n        'printTree.ts': '...',      \n      },\n    },\n  },\n});\n\nconsole.log(vol.toTree());\n\n// Output:\n// /\n// └─ Users/\n//    └─ streamich/\n//       └─ src/\n//          └─ github/\n//             └─ memfs/\n//                └─ src/\n//                   ├─ index.ts\n//                   ├─ package.json\n//                   ├─ tsconfig.json\n//                   └─ util/\n//                      ├─ index.ts\n//                      └─ print/\n//                         ├─ index.ts\n//                         └─ printTree.ts\n```\n\n----------------------------------------\n\nTITLE: Initializing crudfs with Node.js fs via FAS in JavaScript\nDESCRIPTION: Demonstrates how to create a `crudfs` instance using the Node.js `fs` module, indirectly via the File System Access API adapter.  It imports `fs`, `nodeToFsa`, and `FsaCrud`, then creates a directory handle using `nodeToFsa` before initializing `FsaCrud`.  Dependencies: `fs`, `memfs/lib/node-to-fsa`, `memfs/lib/fsa-to-crud`.\nSOURCE: https://github.com/streamich/memfs/blob/master/docs/crudfs/index.md#_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport * as fs from 'fs';\nimport { nodeToFsa } from 'memfs/lib/node-to-fsa';\nimport { FsaCrud } from 'memfs/lib/fsa-to-crud';\n\nconst dir = nodeToFsa(fs, '/path/to/folder', { mode: 'readwrite' });\nconst crud = new FsaCrud(dir);\n```\n\n----------------------------------------\n\nTITLE: Resetting a MemFS Volume\nDESCRIPTION: This code snippet demonstrates how to reset (clear) the contents of a `Volume` instance. First, a file is created, then the volume is converted to JSON to show the file.  The volume is reset, and then converted to JSON again, showing an empty object.\nSOURCE: https://github.com/streamich/memfs/blob/master/docs/node/reference.md#_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nvol.fromJSON({ '/index.js': '...' });\nvol.toJSON(); // {'/index.js': '...' }\nvol.reset();\nvol.toJSON(); // {}\n```\n\n----------------------------------------\n\nTITLE: Creating Multiple MemFS Volumes\nDESCRIPTION: This example demonstrates creating multiple independent MemFS volumes. It imports the `Volume` class from `memfs`, creates two separate volumes using `Volume.fromJSON`, and then reads files from each volume, showing that they are independent.\nSOURCE: https://github.com/streamich/memfs/blob/master/docs/node/usage.md#_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Volume } from 'memfs';\n\nconst vol = Volume.fromJSON({ '/foo': 'bar' });\nvol.readFileSync('/foo'); // bar\n\nconst vol2 = Volume.fromJSON({ '/foo': 'bar 2' });\nvol2.readFileSync('/foo'); // bar 2\n```"
  }
]