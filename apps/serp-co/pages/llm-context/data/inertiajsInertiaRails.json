[
  {
    "owner": "inertiajs",
    "repo": "inertia-rails",
    "content": "TITLE: Initializing Inertia with Vue 3\nDESCRIPTION: Setup code for initializing an Inertia.js application with Vue 3, including component resolution and app creation.\nSOURCE: https://github.com/inertiajs/inertia-rails/blob/master/docs/guide/client-side-setup.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createApp, h } from 'vue'\nimport { createInertiaApp } from '@inertiajs/vue3'\n\ncreateInertiaApp({\n  resolve: (name) => {\n    const pages = import.meta.glob('../pages/**/*.vue', { eager: true })\n    return pages[`../pages/${name}.vue`]\n  },\n  setup({ el, App, props, plugin }) {\n    createApp({ render: () => h(App, props) })\n      .use(plugin)\n      .mount(el)\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: File Upload Implementation in React with Inertia\nDESCRIPTION: Complete example of file upload form implementation in React using Inertia's form helper, including progress tracking and file input handling.\nSOURCE: https://github.com/inertiajs/inertia-rails/blob/master/docs/guide/file-uploads.md#2025-04-21_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useForm } from '@inertiajs/react'\n\nconst { data, setData, post, progress } = useForm({\n  name: null,\n  avatar: null,\n})\n\nfunction submit(e) {\n  e.preventDefault()\n  post('/users')\n}\n\nreturn (\n  <form onSubmit={submit}>\n    <input\n      type=\"text\"\n      value={data.name}\n      onChange={(e) => setData('name', e.target.value)}\n    />\n    <input type=\"file\" onChange={(e) => setData('avatar', e.target.files[0])} />\n    {progress && (\n      <progress value={progress.percentage} max=\"100\">\n        {progress.percentage}%\n      </progress>\n    )}\n    <button type=\"submit\">Submit</button>\n  </form>\n)\n```\n\n----------------------------------------\n\nTITLE: Submitting Forms with Inertia in Vue\nDESCRIPTION: This snippet demonstrates how to create a form in Vue using Inertia.js. It uses the reactive API to manage form state and the router.post method to submit the form data.\nSOURCE: https://github.com/inertiajs/inertia-rails/blob/master/docs/guide/forms.md#2025-04-21_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\nimport { reactive } from 'vue'\nimport { router } from '@inertiajs/vue3'\n\nconst form = reactive({\n  first_name: null,\n  last_name: null,\n  email: null,\n})\n\nfunction submit() {\n  router.post('/users', form)\n}\n</script>\n\n<template>\n  <form @submit.prevent=\"submit\">\n    <label for=\"first_name\">First name:</label>\n    <input id=\"first_name\" v-model=\"form.first_name\" />\n\n    <label for=\"last_name\">Last name:</label>\n    <input id=\"last_name\" v-model=\"form.last_name\" />\n\n    <label for=\"email\">Email:</label>\n    <input id=\"email\" v-model=\"form.email\" />\n\n    <button type=\"submit\">Submit</button>\n  </form>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Installing Inertia Rails Adapter via Bundler\nDESCRIPTION: Command to install the Inertia server-side adapter gem and add it to the application's Gemfile using Bundler.\nSOURCE: https://github.com/inertiajs/inertia-rails/blob/master/docs/guide/server-side-setup.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nbundle add inertia_rails\n```\n\n----------------------------------------\n\nTITLE: Installing Inertia Dependencies\nDESCRIPTION: NPM commands for installing Inertia.js client-side adapters and their respective framework dependencies.\nSOURCE: https://github.com/inertiajs/inertia-rails/blob/master/docs/guide/client-side-setup.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install @inertiajs/vue3 vue\n```\n\nLANGUAGE: shell\nCODE:\n```\nnpm install @inertiajs/react react react-dom\n```\n\nLANGUAGE: shell\nCODE:\n```\nnpm install @inertiajs/svelte svelte\n```\n\n----------------------------------------\n\nTITLE: Initializing and Submitting Inertia Form in React\nDESCRIPTION: Demonstrates how to set up and submit a form using Inertia's form helper in React. Includes state management, input handling, and form submission.\nSOURCE: https://github.com/inertiajs/inertia-rails/blob/master/docs/guide/forms.md#2025-04-21_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useForm } from '@inertiajs/react'\n\nconst { data, setData, post, processing, errors } = useForm({\n  email: '',\n  password: '',\n  remember: false,\n})\n\nfunction submit(e) {\n  e.preventDefault()\n  post('/login')\n}\n\nreturn (\n  <form onSubmit={submit}>\n    <input\n      type=\"text\"\n      value={data.email}\n      onChange={(e) => setData('email', e.target.value)}\n    />\n    {errors.email && <div>{errors.email}</div>}\n    <input\n      type=\"password\"\n      value={data.password}\n      onChange={(e) => setData('password', e.target.value)}\n    />\n    {errors.password && <div>{errors.password}</div>}\n    <input\n      type=\"checkbox\"\n      checked={data.remember}\n      onChange={(e) => setData('remember', e.target.checked)}\n    />{' '}\n    Remember Me\n    <button type=\"submit\" disabled={processing}>\n      Login\n    </button>\n  </form>\n)\n```\n\n----------------------------------------\n\nTITLE: File Upload Implementation in Vue with Inertia\nDESCRIPTION: Complete example of file upload form implementation in Vue using Inertia's form helper, including progress tracking and file input handling.\nSOURCE: https://github.com/inertiajs/inertia-rails/blob/master/docs/guide/file-uploads.md#2025-04-21_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\nimport { useForm } from '@inertiajs/vue3'\n\nconst form = useForm({\n  name: null,\n  avatar: null,\n})\n\nfunction submit() {\n  form.post('/users')\n}\n</script>\n\n<template>\n  <form @submit.prevent=\"submit\">\n    <input type=\"text\" v-model=\"form.name\" />\n    <input type=\"file\" @input=\"form.avatar = $event.target.files[0]\" />\n    <progress v-if=\"form.progress\" :value=\"form.progress.percentage\" max=\"100\">\n      {{ form.progress.percentage }}%\n    </progress>\n    <button type=\"submit\">Submit</button>\n  </form>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Handling Form Submissions in Ruby on Rails with Inertia\nDESCRIPTION: This Ruby code snippet demonstrates how to handle form submissions in a Rails controller when using Inertia.js. It shows creating a new user, saving it, and redirecting with appropriate responses.\nSOURCE: https://github.com/inertiajs/inertia-rails/blob/master/docs/guide/forms.md#2025-04-21_snippet_4\n\nLANGUAGE: ruby\nCODE:\n```\nclass UsersController < ApplicationController\n  def create\n    user = User.new(user_params)\n\n    if user.save\n      redirect_to users_url\n    else\n      redirect_to new_user_url, inertia: { errors: user.errors }\n    end\n  end\n\n  private\n\n  def user_params\n    params.require(:user).permit(:name, :email)\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Creating an Inertia Page Component in Vue\nDESCRIPTION: Demonstrates how to create a basic Inertia page component in Vue, including props definition, layout usage, and head management.\nSOURCE: https://github.com/inertiajs/inertia-rails/blob/master/docs/guide/pages.md#2025-04-21_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\nimport Layout from '../Layout'\nimport { Head } from '@inertiajs/vue3'\n\ndefineProps({ user: Object })\n</script>\n\n<template>\n  <Layout>\n    <Head title=\"Welcome\" />\n    <h1>Welcome</h1>\n    <p>Hello {{ user.name }}, welcome to your first Inertia app!</p>\n  </Layout>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Submitting Forms with Inertia in React\nDESCRIPTION: This snippet shows how to create a form in React using Inertia.js. It uses the useState hook to manage form state and the router.post method to submit the form data.\nSOURCE: https://github.com/inertiajs/inertia-rails/blob/master/docs/guide/forms.md#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useState } from 'react'\nimport { router } from '@inertiajs/react'\n\nexport default function Edit() {\n  const [values, setValues] = useState({\n    first_name: '',\n    last_name: '',\n    email: '',\n  })\n\n  function handleChange(e) {\n    const key = e.target.id\n    const value = e.target.value\n    setValues((values) => ({\n      ...values,\n      [key]: value,\n    }))\n  }\n\n  function handleSubmit(e) {\n    e.preventDefault()\n    router.post('/users', values)\n  }\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <label htmlFor=\"first_name\">First name:</label>\n      <input\n        id=\"first_name\"\n        value={values.first_name}\n        onChange={handleChange}\n      />\n\n      <label htmlFor=\"last_name\">Last name:</label>\n      <input id=\"last_name\" value={values.last_name} onChange={handleChange} />\n\n      <label htmlFor=\"email\">Email:</label>\n      <input id=\"email\" value={values.email} onChange={handleChange} />\n\n      <button type=\"submit\">Submit</button>\n    </form>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Transforming Inertia Form Data Before Submission\nDESCRIPTION: Shows how to modify form data before submission using the transform method in Vue, React, and Svelte.\nSOURCE: https://github.com/inertiajs/inertia-rails/blob/master/docs/guide/forms.md#2025-04-21_snippet_11\n\nLANGUAGE: js\nCODE:\n```\n// Vue\nform\n  .transform((data) => ({\n    ...data,\n    remember: data.remember ? 'on' : '',\n  }))\n  .post('/login')\n\n// React\nconst { transform } = useForm({ ... })\n\ntransform((data) => ({\n  ...data,\n  remember: data.remember ? 'on' : '',\n}))\n\n// Svelte 4|Svelte 5\n$form\n  .transform((data) => ({\n    ...data,\n    remember: data.remember ? 'on' : '',\n  }))\n  .post('/login')\n```\n\n----------------------------------------\n\nTITLE: Initializing and Submitting Inertia Form in Vue\nDESCRIPTION: Shows how to set up and submit a form using Inertia's form helper in Vue. Includes input binding, error display, and form submission.\nSOURCE: https://github.com/inertiajs/inertia-rails/blob/master/docs/guide/forms.md#2025-04-21_snippet_5\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\nimport { useForm } from '@inertiajs/vue3'\n\nconst form = useForm({\n  email: null,\n  password: null,\n  remember: false,\n})\n</script>\n\n<template>\n  <form @submit.prevent=\"form.post('/login')\">\n    <!-- email -->\n    <input type=\"text\" v-model=\"form.email\" />\n    <div v-if=\"form.errors.email\">{{ form.errors.email }}</div>\n    <!-- password -->\n    <input type=\"password\" v-model=\"form.password\" />\n    <div v-if=\"form.errors.password\">{{ form.errors.password }}</div>\n    <!-- remember me -->\n    <input type=\"checkbox\" v-model=\"form.remember\" /> Remember Me\n    <!-- submit -->\n    <button type=\"submit\" :disabled=\"form.processing\">Login</button>\n  </form>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Basic Link Component Implementation\nDESCRIPTION: Shows the basic usage of Inertia Link component for client-side navigation across different frameworks.\nSOURCE: https://github.com/inertiajs/inertia-rails/blob/master/docs/guide/links.md#2025-04-21_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\nimport { Link } from '@inertiajs/vue3'\n</script>\n\n<template>\n  <Link href=\"/\">Home</Link>\n</template>\n```\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Link } from '@inertiajs/react'\n\nexport default () => <Link href=\"/\">Home</Link>\n```\n\nLANGUAGE: svelte\nCODE:\n```\n<script>\n  import { inertia, Link } from '@inertiajs/svelte'\n</script>\n\n<a href=\"/\" use:inertia>Home</a>\n\n<Link href=\"/\">Home</Link>\n```\n\n----------------------------------------\n\nTITLE: Basic Inertia Response Rendering\nDESCRIPTION: Demonstrates how to render an Inertia response in a controller action with component name and props.\nSOURCE: https://github.com/inertiajs/inertia-rails/blob/master/README.md#2025-04-21_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\ndef index\n  render inertia: 'Event/Index', props: {\n    events: Event.all,\n  }\nend\n```\n\n----------------------------------------\n\nTITLE: Submitting Forms with Inertia in Svelte 5\nDESCRIPTION: This snippet shows how to create a form in Svelte 5 using Inertia.js. It uses two-way binding for form inputs and the router.post method to submit the form data, with a slight difference in event handling compared to Svelte 4.\nSOURCE: https://github.com/inertiajs/inertia-rails/blob/master/docs/guide/forms.md#2025-04-21_snippet_3\n\nLANGUAGE: svelte\nCODE:\n```\n<script>\n  import { router } from '@inertiajs/svelte'\n\n  let values = {\n    first_name: null,\n    last_name: null,\n    email: null,\n  }\n\n  function submit(e) {\n    e.preventDefault()\n    router.post('/users', values)\n  }\n</script>\n\n<form onsubmit={submit}>\n  <label for=\"first_name\">First name:</label>\n  <input id=\"first_name\" bind:value={values.first_name} />\n\n  <label for=\"last_name\">Last name:</label>\n  <input id=\"last_name\" bind:value={values.last_name} />\n\n  <label for=\"email\">Email:</label>\n  <input id=\"email\" bind:value={values.email} />\n\n  <button type=\"submit\">Submit</button>\n</form>\n```\n\n----------------------------------------\n\nTITLE: Implementing Authorization Checks with Action Policy in Rails Controller for Inertia.js\nDESCRIPTION: This code shows how to perform server-side authorization checks using the Action Policy gem in a Rails controller and pass the results to Inertia.js page components as props. It includes both collection-level permissions and per-item permissions for users.\nSOURCE: https://github.com/inertiajs/inertia-rails/blob/master/docs/guide/authorization.md#2025-04-21_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nclass UsersController < ApplicationController\n  def index\n    render inertia: 'Users/Index', props: {\n      can: {\n        create_user: allowed_to?(:create, User)\n      },\n      users: User.all.map do |user|\n        user.as_json(\n          only: [:id, :first_name, :last_name, :email]\n        ).merge(\n          can: {\n            edit_user: allowed_to?(:edit, user)\n          }\n        )\n      end\n    }\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Implementing Inertia.js Event Callbacks in Vue\nDESCRIPTION: Example of setting up event callbacks for an Inertia.js POST request in Vue. This shows all available callback functions including onBefore, onStart, onProgress, onSuccess, onError, onCancel, and onFinish that can be triggered during a page visit.\nSOURCE: https://github.com/inertiajs/inertia-rails/blob/master/docs/guide/manual-visits.md#2025-04-21_snippet_34\n\nLANGUAGE: javascript\nCODE:\n```\nimport { router } from '@inertiajs/vue3'\n\nrouter.post('/users', data, {\n  onBefore: (visit) => {},\n  onStart: (visit) => {},\n  onProgress: (progress) => {},\n  onSuccess: (page) => {},\n  onError: (errors) => {},\n  onCancel: () => {},\n  onFinish: (visit) => {},\n})\n```\n\n----------------------------------------\n\nTITLE: Creating an Inertia Response in a Rails Controller\nDESCRIPTION: Example of a Rails controller action that renders an Inertia.js page with props. It finds an event record and passes its attributes as JSON to the Inertia page.\nSOURCE: https://github.com/inertiajs/inertia-rails/blob/master/docs/guide/server-side-setup.md#2025-04-21_snippet_7\n\nLANGUAGE: ruby\nCODE:\n```\nclass EventsController < ApplicationController\n  def show\n    event = Event.find(params[:id])\n\n    render inertia: 'Event/Show', props: {\n      event: event.as_json(\n        only: [:id, :title, :start_date, :description]\n      )\n    }\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Initializing and Submitting Inertia Form in Svelte 5\nDESCRIPTION: Shows how to set up and submit a form using Inertia's form helper in Svelte 5. Includes form state management, error display, and submission handling.\nSOURCE: https://github.com/inertiajs/inertia-rails/blob/master/docs/guide/forms.md#2025-04-21_snippet_8\n\nLANGUAGE: svelte\nCODE:\n```\n<script>\n  import { useForm } from '@inertiajs/svelte'\n\n  const form = useForm({\n    email: null,\n    password: null,\n    remember: false,\n  })\n\n  function submit(e) {\n    e.preventDefault()\n    $form.post('/login')\n  }\n</script>\n\n<form onsubmit={submit}>\n  <input type=\"text\" bind:value={$form.email} />\n  {#if $form.errors.email}\n    <div class=\"form-error\">{$form.errors.email}</div>\n  {/if}\n  <input type=\"password\" bind:value={$form.password} />\n  {#if $form.errors.password}\n    <div class=\"form-error\">{$form.errors.password}</div>\n  {/if}\n  <input type=\"checkbox\" bind:checked={$form.remember} /> Remember Me\n  <button type=\"submit\" disabled={$form.processing}>Submit</button>\n</form>\n```\n\n----------------------------------------\n\nTITLE: Making CSRF-Protected POST Request with Vue in Inertia.js\nDESCRIPTION: This snippet demonstrates how to manually include a CSRF token when making a POST request using Inertia.js with Vue. It uses the usePage hook to access the CSRF token from props.\nSOURCE: https://github.com/inertiajs/inertia-rails/blob/master/docs/guide/csrf-protection.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { router, usePage } from '@inertiajs/vue3'\n\nconst page = usePage()\n\nrouter.post('/users', {\n  _token: page.props.csrf_token,\n  name: 'John Doe',\n  email: 'john.doe@example.com',\n})\n```\n\n----------------------------------------\n\nTITLE: Basic Deferred Props Implementation in Rails Controller\nDESCRIPTION: Demonstrates how to implement basic deferred prop loading in a Rails controller using Inertia.js. Shows how to defer loading of User, Role, and Permission data.\nSOURCE: https://github.com/inertiajs/inertia-rails/blob/master/docs/guide/deferred-props.md#2025-04-21_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nclass UsersController < ApplicationController\n  def index\n    render inertia: 'Users/Index', props: {\n      users: -> { User.all },\n      roles: -> { Role.all },\n      permissions: InertiaRails.defer { Permission.all },\n    }\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Configuring Inertia Rails Globally in Ruby\nDESCRIPTION: This snippet demonstrates how to set up global configuration for Inertia Rails using an initializer. It shows an example of setting the version based on ViteRuby's digest.\nSOURCE: https://github.com/inertiajs/inertia-rails/blob/master/docs/guide/configuration.md#2025-04-21_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\n# config/initializers/inertia.rb\n\nInertiaRails.configure do |config|\n  # Example: force a full-reload if the deployed assets change.\n  config.version = ViteRuby.digest\nend\n```\n\n----------------------------------------\n\nTITLE: Implementing Error Handling in Rails ApplicationController\nDESCRIPTION: Sets up error handling in Rails ApplicationController using rescue_from to catch exceptions and render an error page component. Includes environment-specific handling with different behavior for local development.\nSOURCE: https://github.com/inertiajs/inertia-rails/blob/master/docs/guide/error-handling.md#2025-04-21_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nclass ApplicationController < ActionController::Base\n  rescue_from StandardError, with: :inertia_error_page\n\n  private\n\n  def inertia_error_page(exception)\n    raise exception if Rails.env.local?\n\n    status = ActionDispatch::ExceptionWrapper.new(nil, exception).status_code\n\n    render inertia: 'ErrorPage', props: { status: }, status:\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Using router.visit() Method in Svelte\nDESCRIPTION: Example of using the router.visit() method in Svelte to programmatically navigate with various options for controlling the request behavior, handling responses, and managing application state during navigation.\nSOURCE: https://github.com/inertiajs/inertia-rails/blob/master/docs/guide/manual-visits.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { router } from '@inertiajs/svelte'\n\nrouter.visit(url, {\n  method: 'get',\n  data: {},\n  replace: false,\n  preserveState: false,\n  preserveScroll: false,\n  only: [],\n  except: [],\n  headers: {},\n  errorBag: null,\n  forceFormData: false,\n  queryStringArrayFormat: 'brackets',\n  async: false,\n  showProgress: true,\n  fresh: false,\n  reset: [],\n  preserveUrl: false,\n  prefetch: false,\n  onCancelToken: (cancelToken) => {},\n  onCancel: () => {},\n  onBefore: (visit) => {},\n  onStart: (visit) => {},\n  onProgress: (progress) => {},\n  onSuccess: (page) => {},\n  onError: (errors) => {},\n  onFinish: (visit) => {},\n  onPrefetching: () => {},\n  onPrefetched: () => {},\n})\n```\n\n----------------------------------------\n\nTITLE: Creating an Inertia Page Component in React\nDESCRIPTION: Shows the structure of an Inertia page component in React, including props usage, layout implementation, and head management.\nSOURCE: https://github.com/inertiajs/inertia-rails/blob/master/docs/guide/pages.md#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport Layout from '../Layout'\nimport { Head } from '@inertiajs/react'\n\nexport default function Welcome({ user }) {\n  return (\n    <Layout>\n      <Head title=\"Welcome\" />\n      <h1>Welcome</h1>\n      <p>Hello {user.name}, welcome to your first Inertia app!</p>\n    </Layout>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Generating URLs for Inertia Components in Ruby on Rails Controller\nDESCRIPTION: This example shows how to generate URLs server-side and pass them as props to an Inertia component. It includes creating edit and create URLs for a list of users.\nSOURCE: https://github.com/inertiajs/inertia-rails/blob/master/docs/guide/routing.md#2025-04-21_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\nclass UsersController < ApplicationController\n  def index\n    render inertia: 'Users/Index', props: {\n      users: User.all.map do |user|\n        user.as_json(\n          only: [ :id, :name, :email ]\n        ).merge(\n          edit_url: edit_user_path(user)\n        )\n      end,\n      create_url: new_user_path\n    }\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Using router.visit() Method in React\nDESCRIPTION: Example of using the router.visit() method in React to programmatically navigate with various options for controlling the request behavior, handling responses, and managing application state during navigation.\nSOURCE: https://github.com/inertiajs/inertia-rails/blob/master/docs/guide/manual-visits.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { router } from '@inertiajs/react'\n\nrouter.visit(url, {\n  method: 'get',\n  data: {},\n  replace: false,\n  preserveState: false,\n  preserveScroll: false,\n  only: [],\n  except: [],\n  headers: {},\n  errorBag: null,\n  forceFormData: false,\n  queryStringArrayFormat: 'brackets',\n  async: false,\n  showProgress: true,\n  fresh: false,\n  reset: [],\n  preserveUrl: false,\n  prefetch: false,\n  onCancelToken: (cancelToken) => {},\n  onCancel: () => {},\n  onBefore: (visit) => {},\n  onStart: (visit) => {},\n  onProgress: (progress) => {},\n  onSuccess: (page) => {},\n  onError: (errors) => {},\n  onFinish: (visit) => {},\n  onPrefetching: () => {},\n  onPrefetched: () => {},\n})\n```\n\n----------------------------------------\n\nTITLE: Using router.visit() Method in Vue\nDESCRIPTION: Example of using the router.visit() method in Vue to programmatically navigate with various options for controlling the request behavior, handling responses, and managing application state during navigation.\nSOURCE: https://github.com/inertiajs/inertia-rails/blob/master/docs/guide/manual-visits.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { router } from '@inertiajs/vue3'\n\nrouter.visit(url, {\n  method: 'get',\n  data: {},\n  replace: false,\n  preserveState: false,\n  preserveScroll: false,\n  only: [],\n  except: [],\n  headers: {},\n  errorBag: null,\n  forceFormData: false,\n  queryStringArrayFormat: 'brackets',\n  async: false,\n  showProgress: true,\n  fresh: false,\n  reset: [],\n  preserveUrl: false,\n  prefetch: false,\n  onCancelToken: (cancelToken) => {},\n  onCancel: () => {},\n  onBefore: (visit) => {},\n  onStart: (visit) => {},\n  onProgress: (progress) => {},\n  onSuccess: (page) => {},\n  onError: (errors) => {},\n  onFinish: (visit) => {},\n  onPrefetching: () => {},\n  onPrefetched: () => {},\n})\n```\n\n----------------------------------------\n\nTITLE: Testing Inertia Responses with RSpec\nDESCRIPTION: This comprehensive example shows various assertions for testing Inertia responses, including checking the rendered component, examining props and view data, and accessing specific properties.\nSOURCE: https://github.com/inertiajs/inertia-rails/blob/master/docs/guide/testing.md#2025-04-21_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\n# spec/requests/events_spec.rb\nRSpec.describe '/events', inertia: true do\n  describe '#index' do\n    let!(:event) { Event.create!(title: 'Foo', start_date: '2024-02-21', description: 'Foo bar') }\n\n    it \"renders inertia component\" do\n      get events_path\n\n      # check the component\n      expect(inertia).to render_component 'Event/Index'\n      # or\n      expect_inertia.to render_component 'Event/Index'\n      # same as above\n      expect(inertia.component).to eq 'Event/Index'\n\n      # props (including shared props)\n      expect(inertia).to have_exact_props({title: 'Foo', description: 'Foo bar'})\n      expect(inertia).to include_props({title: 'Foo'})\n\n      # access props\n      expect(inertia.props[:title]).to eq 'Foo'\n\n      # view data\n      expect(inertia).to have_exact_view_data({meta: 'Foo bar'})\n      expect(inertia).to include_view_data({meta: 'Foo bar'})\n\n      # access view data\n      expect(inertia.view_data[:meta]).to eq 'Foo bar'\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of inertia_share in Ruby on Rails Controllers\nDESCRIPTION: Shows how to share both static and dynamic data with all controller actions using the inertia_share method. Static data is evaluated immediately while dynamic data is evaluated at render time.\nSOURCE: https://github.com/inertiajs/inertia-rails/blob/master/docs/guide/shared-data.md#2025-04-21_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nclass EventsController < ApplicationController\n  # Static sharing: Data is evaluated immediately\n  inertia_share app_name: Rails.configuration.app_name\n\n  # Dynamic sharing: Data is evaluated at render time\n  inertia_share do\n    {\n      user: current_user,\n      notifications: current_user&.unread_notifications_count\n    } if user_signed_in?\n  end\n\n  # Alternative syntax for single dynamic values\n  inertia_share total_users: -> { User.count }\nend\n```\n\n----------------------------------------\n\nTITLE: Initializing Inertia with Svelte 4\nDESCRIPTION: Setup code for initializing an Inertia.js application with Svelte 4, including component resolution and app setup.\nSOURCE: https://github.com/inertiajs/inertia-rails/blob/master/docs/guide/client-side-setup.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createInertiaApp } from '@inertiajs/svelte'\n\ncreateInertiaApp({\n  resolve: (name) => {\n    const pages = import.meta.glob('../pages/**/*.svelte', { eager: true })\n    return pages[`../pages/${name}.svelte`]\n  },\n  setup({ el, App, props }) {\n    new App({ target: el, props })\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Combined Prefetching Strategies in React\nDESCRIPTION: Using multiple prefetching strategies simultaneously in React by passing an array of values. This combines different trigger methods (mount and hover) for more aggressive prefetching.\nSOURCE: https://github.com/inertiajs/inertia-rails/blob/master/docs/guide/prefetching.md#2025-04-21_snippet_13\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Link } from '@inertiajs/react'\n\nexport default () => (\n  <Link href=\"/users\" prefetch={['mount', 'hover']}>\n    Users\n  </Link>\n)\n```\n\n----------------------------------------\n\nTITLE: Handling Form Errors in Inertia\nDESCRIPTION: Demonstrates how to display form validation errors using the errors property in Vue, React, and Svelte frameworks.\nSOURCE: https://github.com/inertiajs/inertia-rails/blob/master/docs/guide/forms.md#2025-04-21_snippet_13\n\nLANGUAGE: vue\nCODE:\n```\n<!-- Vue -->\n<div v-if=\"form.errors.email\">{{ form.errors.email }}</div>\n\n<!-- React -->\nconst { errors } = useForm({ ... })\n\n{errors.email && <div>{errors.email}</div>}\n\n<!-- Svelte 4|Svelte 5 -->\n{#if $form.errors.email}\n  <div>{$form.errors.email}</div>\n{/if}\n```\n\n----------------------------------------\n\nTITLE: Implementing Inertia.js Event Callbacks in React\nDESCRIPTION: Example of setting up event callbacks for an Inertia.js POST request in React. This shows all available callback functions including onBefore, onStart, onProgress, onSuccess, onError, onCancel, and onFinish that can be triggered during a page visit.\nSOURCE: https://github.com/inertiajs/inertia-rails/blob/master/docs/guide/manual-visits.md#2025-04-21_snippet_35\n\nLANGUAGE: javascript\nCODE:\n```\nimport { router } from '@inertiajs/react'\n\nrouter.post('/users', data, {\n  onBefore: (visit) => {},\n  onStart: (visit) => {},\n  onProgress: (progress) => {},\n  onSuccess: (page) => {},\n  onError: (errors) => {},\n  onCancel: () => {},\n  onFinish: (visit) => {},\n})\n```\n\n----------------------------------------\n\nTITLE: Handling Validation Errors in Rails Controller\nDESCRIPTION: Demonstrates how to handle validation errors in a Rails controller by redirecting with errors as Inertia props.\nSOURCE: https://github.com/inertiajs/inertia-rails/blob/master/docs/guide/validation.md#2025-04-21_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nclass UsersController < ApplicationController\n  def create\n    user = User.new(user_params)\n\n    if user.save\n      redirect_to users_url\n    else\n      redirect_to new_user_url, inertia: { errors: user.errors }\n    end\n  end\n\n  private\n\n  def user_params\n    params.require(:user).permit(:name, :email)\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Creating Active States for Navigation Links in Svelte with Inertia.js\nDESCRIPTION: This Svelte component illustrates how to implement active states on navigation links using Inertia.js. It showcases exact and partial matching techniques for both URL and component properties, utilizing Svelte's reactive statements and the $page store.\nSOURCE: https://github.com/inertiajs/inertia-rails/blob/master/docs/guide/links.md#2025-04-21_snippet_5\n\nLANGUAGE: svelte\nCODE:\n```\n<script>\n  import { inertia, Link, page } from '@inertiajs/svelte'\n</script>\n\n<template>\n  <!-- URL exact match... -->\n  <a href=\"/users\" use:inertia class:active={$page.url === '/users'}>Users</a>\n\n  <!-- Component exact match... -->\n  <a href=\"/users\" use:inertia class:active={$page.component === 'Users/Index'}>\n    Users\n  </a>\n\n  <!-- URL starts with (/users, /users/create, /users/1, etc.)... -->\n  <Link href=\"/users\" class={$page.url.startsWith('/users') ? 'active' : ''}>\n    Users\n  </Link>\n\n  <!-- Component starts with (Users/Index, Users/Create, Users/Show, etc.)... -->\n  <Link\n    href=\"/users\"\n    class={$page.component.startsWith('Users') ? 'active' : ''}\n  >\n    Users\n  </Link>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Initializing Inertia with React\nDESCRIPTION: Setup code for initializing an Inertia.js application with React, including component resolution and root creation.\nSOURCE: https://github.com/inertiajs/inertia-rails/blob/master/docs/guide/client-side-setup.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createInertiaApp } from '@inertiajs/react'\nimport { createElement } from 'react'\nimport { createRoot } from 'react-dom/client'\n\ncreateInertiaApp({\n  resolve: (name) => {\n    const pages = import.meta.glob('../pages/**/*.jsx', { eager: true })\n    return pages[`../pages/${name}.jsx`]\n  },\n  setup({ el, App, props }) {\n    const root = createRoot(el)\n    root.render(createElement(App, props))\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Creating a Layout Component in Vue\nDESCRIPTION: Demonstrates the creation of a reusable layout component in Vue, including navigation links using Inertia's Link component.\nSOURCE: https://github.com/inertiajs/inertia-rails/blob/master/docs/guide/pages.md#2025-04-21_snippet_5\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\nimport { Link } from '@inertiajs/vue3'\n</script>\n\n<template>\n  <main>\n    <header>\n      <Link href=\"/\">Home</Link>\n      <Link href=\"/about\">About</Link>\n      <Link href=\"/contact\">Contact</Link>\n    </header>\n    <article>\n      <slot />\n    </article>\n  </main>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Canceling Visits with onBefore Callback in React\nDESCRIPTION: Example of using the onBefore callback to cancel an Inertia.js DELETE request in React. The visit will be cancelled if the confirmation dialog returns false, providing a way to implement confirmation dialogs before destructive actions.\nSOURCE: https://github.com/inertiajs/inertia-rails/blob/master/docs/guide/manual-visits.md#2025-04-21_snippet_38\n\nLANGUAGE: javascript\nCODE:\n```\nimport { router } from '@inertiajs/react'\n\nrouter.delete(`/users/${user.id}`, {\n  onBefore: () => confirm('Are you sure you want to delete this user?'),\n})\n```\n\n----------------------------------------\n\nTITLE: Submitting Forms with Inertia in Svelte 4\nDESCRIPTION: This snippet illustrates how to create a form in Svelte 4 using Inertia.js. It uses two-way binding for form inputs and the router.post method to submit the form data.\nSOURCE: https://github.com/inertiajs/inertia-rails/blob/master/docs/guide/forms.md#2025-04-21_snippet_2\n\nLANGUAGE: svelte\nCODE:\n```\n<script>\n  import { router } from '@inertiajs/svelte'\n\n  let values = {\n    first_name: null,\n    last_name: null,\n    email: null,\n  }\n\n  function submit() {\n    router.post('/users', values)\n  }\n</script>\n\n<form on:submit|preventDefault={submit}>\n  <label for=\"first_name\">First name:</label>\n  <input id=\"first_name\" bind:value={values.first_name} />\n\n  <label for=\"last_name\">Last name:</label>\n  <input id=\"last_name\" bind:value={values.last_name} />\n\n  <label for=\"email\">Email:</label>\n  <input id=\"email\" bind:value={values.email} />\n\n  <button type=\"submit\">Submit</button>\n</form>\n```\n\n----------------------------------------\n\nTITLE: Vue Error Page Component Implementation\nDESCRIPTION: Vue component for displaying error pages with status-specific messages and descriptions. Uses computed properties to determine appropriate error messages based on HTTP status codes.\nSOURCE: https://github.com/inertiajs/inertia-rails/blob/master/docs/guide/error-handling.md#2025-04-21_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\nimport { computed } from 'vue'\n\nconst props = defineProps({ status: Number })\n\nconst title = computed(() => {\n  return (\n    {\n      503: 'Service Unavailable',\n      500: 'Server Error',\n      404: 'Page Not Found',\n      403: 'Forbidden',\n    }[props.status] || 'Unexpected error'\n  )\n})\n\nconst description = computed(() => {\n  return {\n    503: 'Sorry, we are doing some maintenance. Please check back soon.',\n    500: 'Whoops, something went wrong on our servers.',\n    404: 'Sorry, the page you are looking for could not be found.',\n    403: 'Sorry, you are forbidden from accessing this page.',\n  }[props.status]\n})\n</script>\n\n<template>\n  <div>\n    <h1>{{ status }}: {{ title }}</h1>\n    <div>{{ description }}</div>\n  </div>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Partial Reloads with Inertia Links\nDESCRIPTION: Examples of implementing partial reloads using Inertia Link components across different frameworks.\nSOURCE: https://github.com/inertiajs/inertia-rails/blob/master/docs/guide/partial-reloads.md#2025-04-21_snippet_4\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\nimport { Link } from '@inertiajs/vue3'\n</script>\n\n<template>\n  <Link href=\"/users?active=true\" :only=\"['users']\">Show active</Link>\n</template>\n```\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Link } from '@inertiajs/react'\n\nexport default () => (\n  <Link href=\"/users?active=true\" only={['users']}>\n    Show active\n  </Link>\n)\n```\n\nLANGUAGE: svelte\nCODE:\n```\n<script>\n  import { inertia, Link } from '@inertiajs/svelte'\n</script>\n\n<a href=\"/users?active=true\" use:inertia={{ only: ['users'] }}>Show active</a>\n\n<Link href=\"/users?active=true\" only={['users']}>Show active</Link>\n```\n\n----------------------------------------\n\nTITLE: Using Rails Authentication with Inertia.js\nDESCRIPTION: Example showing the built-in Rails authentication method that can be used with Inertia.js applications. This demonstrates that standard Rails authentication approaches like has_secure_password can be utilized.\nSOURCE: https://github.com/inertiajs/inertia-rails/blob/master/docs/guide/authentication.md#2025-04-21_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nhas_secure_password\n```\n\n----------------------------------------\n\nTITLE: Enabling Code Splitting with Vite in Vue\nDESCRIPTION: Modifies the createInertiaApp resolve callback to use dynamic imports with Vite's import.meta.glob function in Vue applications. This removes the eager loading option to enable code splitting.\nSOURCE: https://github.com/inertiajs/inertia-rails/blob/master/docs/guide/code-splitting.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// frontend/entrypoints/inertia.js\ncreateInertiaApp({\n  resolve: (name) => {\n    const pages = import.meta.glob('../pages/**/*.vue', { eager: true }) // [!code --]\n    return pages[`../pages/${name}.vue`] // [!code --]\n    const pages = import.meta.glob('../pages/**/*.vue') // [!code ++]\n    return pages[`../pages/${name}.vue`]() // [!code ++]\n  },\n  //...\n})\n```\n\n----------------------------------------\n\nTITLE: Creating an Inertia Page Component in Svelte 4\nDESCRIPTION: Illustrates the creation of an Inertia page component in Svelte 4, showing prop handling and layout usage.\nSOURCE: https://github.com/inertiajs/inertia-rails/blob/master/docs/guide/pages.md#2025-04-21_snippet_2\n\nLANGUAGE: svelte\nCODE:\n```\n<script>\n  import Layout from '../Layout'\n\n  export let user\n</script>\n\n<svelte:head>\n  <title>Welcome</title>\n</svelte:head>\n\n<Layout>\n  <h1>Welcome</h1>\n  <p>Hello {user.name}, welcome to your first Inertia app!</p>\n</Layout>\n```\n\n----------------------------------------\n\nTITLE: Shortcut Request Methods in Vue\nDESCRIPTION: Convenience shortcuts for making different types of HTTP requests in Vue. These methods share the same options as router.visit() but provide more concise syntax for common HTTP methods.\nSOURCE: https://github.com/inertiajs/inertia-rails/blob/master/docs/guide/manual-visits.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { router } from '@inertiajs/vue3'\n\nrouter.get(url, data, options)\nrouter.post(url, data, options)\nrouter.put(url, data, options)\nrouter.patch(url, data, options)\nrouter.delete(url, options)\nrouter.reload(options) // Uses the current URL\n```\n\n----------------------------------------\n\nTITLE: Rendering an Inertia Page from a Ruby Controller\nDESCRIPTION: Shows how to render an Inertia page from a Ruby controller, passing props to the page component.\nSOURCE: https://github.com/inertiajs/inertia-rails/blob/master/docs/guide/pages.md#2025-04-21_snippet_4\n\nLANGUAGE: ruby\nCODE:\n```\nclass UsersController < ApplicationController\n  def show\n    user = User.find(params[:id])\n\n    render inertia: 'User/Show', props: { user: }\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: React Error Page Component Implementation\nDESCRIPTION: React component for rendering error pages with status-specific messages. Maps HTTP status codes to corresponding titles and descriptions.\nSOURCE: https://github.com/inertiajs/inertia-rails/blob/master/docs/guide/error-handling.md#2025-04-21_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nexport default function ErrorPage({ status }) {\n  const title =\n    {\n      503: 'Service Unavailable',\n      500: 'Server Error',\n      404: 'Page Not Found',\n      403: 'Forbidden',\n    }[status] || 'Unexpected error'\n\n  const description = {\n    503: 'Sorry, we are doing some maintenance. Please check back soon.',\n    500: 'Whoops, something went wrong on our servers.',\n    404: 'Sorry, the page you are looking for could not be found.',\n    403: 'Sorry, you are forbidden from accessing this page.',\n  }[status]\n\n  return (\n    <div>\n      <h1>\n        {status}: {title}\n      </h1>\n      <div>{description}</div>\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Complete Progress Indicator Implementation\nDESCRIPTION: Full implementation of a custom progress indicator with event handling, file upload progress, and timeout management.\nSOURCE: https://github.com/inertiajs/inertia-rails/blob/master/docs/guide/progress-indicators.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport NProgress from 'nprogress'\nimport { router } from '@inertiajs/vue3'\n\nlet timeout = null\n\nrouter.on('start', () => {\n  timeout = setTimeout(() => NProgress.start(), 250)\n})\n\nrouter.on('progress', (event) => {\n  if (NProgress.isStarted() && event.detail.progress.percentage) {\n    NProgress.set((event.detail.progress.percentage / 100) * 0.9)\n  }\n})\n\nrouter.on('finish', (event) => {\n  clearTimeout(timeout)\n  if (!NProgress.isStarted()) {\n    return\n  } else if (event.detail.visit.completed) {\n    NProgress.done()\n  } else if (event.detail.visit.interrupted) {\n    NProgress.set(0)\n  } else if (event.detail.visit.cancelled) {\n    NProgress.done()\n    NProgress.remove()\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Displaying Validation Errors in Vue Component\nDESCRIPTION: Shows how to display server-side validation errors in a Vue component form using Inertia.\nSOURCE: https://github.com/inertiajs/inertia-rails/blob/master/docs/guide/validation.md#2025-04-21_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\nimport { reactive } from 'vue'\nimport { router } from '@inertiajs/vue3'\n\ndefineProps({ errors: Object })\n\nconst form = reactive({\n  first_name: null,\n  last_name: null,\n  email: null,\n})\n\nfunction submit() {\n  router.post('/users', form)\n}\n</script>\n\n<template>\n  <form @submit.prevent=\"submit\">\n    <label for=\"first_name\">First name:</label>\n    <input id=\"first_name\" v-model=\"form.first_name\" />\n    <div v-if=\"errors.first_name\">{{ errors.first_name }}</div>\n    <label for=\"last_name\">Last name:</label>\n    <input id=\"last_name\" v-model=\"form.last_name\" />\n    <div v-if=\"errors.last_name\">{{ errors.last_name }}</div>\n    <label for=\"email\">Email:</label>\n    <input id=\"email\" v-model=\"form.email\" />\n    <div v-if=\"errors.email\">{{ errors.email }}</div>\n    <button type=\"submit\">Submit</button>\n  </form>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Making CSRF-Protected POST Request with Svelte in Inertia.js\nDESCRIPTION: This snippet illustrates how to manually include a CSRF token when making a POST request using Inertia.js with Svelte. It uses the $page store to access the CSRF token from props.\nSOURCE: https://github.com/inertiajs/inertia-rails/blob/master/docs/guide/csrf-protection.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { page, router } from '@inertiajs/svelte'\n\nrouter.post('/users', {\n  _token: $page.props.csrf_token,\n  name: 'John Doe',\n  email: 'john.doe@example.com',\n})\n```\n\n----------------------------------------\n\nTITLE: Displaying Validation Errors in React Component\nDESCRIPTION: Illustrates how to handle and display server-side validation errors in a React component form using Inertia.\nSOURCE: https://github.com/inertiajs/inertia-rails/blob/master/docs/guide/validation.md#2025-04-21_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useState } from 'react'\nimport { router, usePage } from '@inertiajs/react'\n\nexport default function Edit() {\n  const { errors } = usePage().props\n\n  const [values, setValues] = useState({\n    first_name: null,\n    last_name: null,\n    email: null,\n  })\n\n  function handleChange(e) {\n    setValues((values) => ({\n      ...values,\n      [e.target.id]: e.target.value,\n    }))\n  }\n\n  function handleSubmit(e) {\n    e.preventDefault()\n    router.post('/users', values)\n  }\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <label htmlFor=\"first_name\">First name:</label>\n      <input\n        id=\"first_name\"\n        value={values.first_name}\n        onChange={handleChange}\n      />\n      {errors.first_name && <div>{errors.first_name}</div>}\n      <label htmlFor=\"last_name\">Last name:</label>\n      <input id=\"last_name\" value={values.last_name} onChange={handleChange} />\n      {errors.last_name && <div>{errors.last_name}</div>}\n      <label htmlFor=\"email\">Email:</label>\n      <input id=\"email\" value={values.email} onChange={handleChange} />\n      {errors.email && <div>{errors.email}</div>}\n      <button type=\"submit\">Submit</button>\n    </form>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Shortcut Request Methods in React\nDESCRIPTION: Convenience shortcuts for making different types of HTTP requests in React. These methods share the same options as router.visit() but provide more concise syntax for common HTTP methods.\nSOURCE: https://github.com/inertiajs/inertia-rails/blob/master/docs/guide/manual-visits.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { router } from '@inertiajs/react'\n\nrouter.get(url, data, options)\nrouter.post(url, data, options)\nrouter.put(url, data, options)\nrouter.patch(url, data, options)\nrouter.delete(url, options)\nrouter.reload(options) // Uses the current URL\n```\n\n----------------------------------------\n\nTITLE: Making CSRF-Protected POST Request with React in Inertia.js\nDESCRIPTION: This snippet shows how to manually include a CSRF token when making a POST request using Inertia.js with React. It uses the usePage hook to access the CSRF token from props.\nSOURCE: https://github.com/inertiajs/inertia-rails/blob/master/docs/guide/csrf-protection.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { router, usePage } from '@inertiajs/react'\n\nconst props = usePage().props\n\nrouter.post('/users', {\n  _token: props.csrf_token,\n  name: 'John Doe',\n  email: 'john.doe@example.com',\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Active States for Navigation Links in React with Inertia.js\nDESCRIPTION: This React component shows how to set active states on navigation links using Inertia.js. It demonstrates exact and partial matching techniques for both URL and component properties, utilizing the usePage hook to access the current page information.\nSOURCE: https://github.com/inertiajs/inertia-rails/blob/master/docs/guide/links.md#2025-04-21_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nimport { usePage } from '@inertiajs/react'\n\nexport default () => {\n  const { url, component } = usePage()\n\n  return (\n    <>\n      // URL exact match...\n      <Link href=\"/users\" className={url === '/users' ? 'active' : ''}>\n        Users\n      </Link>\n      // Component exact match...\n      <Link\n        href=\"/users\"\n        className={component === 'Users/Index' ? 'active' : ''}\n      >\n        Users\n      </Link>\n      // URL starts with (/users, /users/create, /users/1, etc.)...\n      <Link href=\"/users\" className={url.startsWith('/users') ? 'active' : ''}>\n        Users\n      </Link>\n      // Component starts with (Users/Index, Users/Create, Users/Show, etc.)...\n      <Link\n        href=\"/users\"\n        className={component.startsWith('Users') ? 'active' : ''}\n      >\n        Users\n      </Link>\n    </>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Handling CSRF Token Mismatch in Rails ApplicationController\nDESCRIPTION: This Ruby code snippet demonstrates how to handle CSRF token mismatches in a Rails application using Inertia.js. It rescues the InvalidAuthenticityToken error and redirects the user with a flash message.\nSOURCE: https://github.com/inertiajs/inertia-rails/blob/master/docs/guide/csrf-protection.md#2025-04-21_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\nclass ApplicationController < ActionController::Base\n  rescue_from ActionController::InvalidAuthenticityToken, with: :inertia_page_expired_error\n\n  inertia_share flash: -> { flash.to_hash }\n\n  private\n\n  def inertia_page_expired_error\n    redirect_back_or_to('/', allow_other_host: false, notice: \"The page expired, please try again.\")\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Basic Link Prefetching in React\nDESCRIPTION: Implementing basic link prefetching in React using the Inertia Link component. This enables data prefetching when a user hovers over a link for more than 75ms.\nSOURCE: https://github.com/inertiajs/inertia-rails/blob/master/docs/guide/prefetching.md#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Link } from '@inertiajs/react'\n\nexport default () => (\n  <Link href=\"/users\" prefetch>\n    Users\n  </Link>\n)\n```\n\n----------------------------------------\n\nTITLE: Creating a Layout Component in React\nDESCRIPTION: Shows the structure of a reusable layout component in React, including navigation links using Inertia's Link component.\nSOURCE: https://github.com/inertiajs/inertia-rails/blob/master/docs/guide/pages.md#2025-04-21_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Link } from '@inertiajs/react'\n\nexport default function Layout({ children }) {\n  return (\n    <main>\n      <header>\n        <Link href=\"/\">Home</Link>\n        <Link href=\"/about\">About</Link>\n        <Link href=\"/contact\">Contact</Link>\n      </header>\n      <article>{children}</article>\n    </main>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Performing Client-side Navigation with Inertia.js Router\nDESCRIPTION: Demonstrates how to use the router.push method to perform client-side navigation in Inertia.js. This example shows how to update the URL, component, and props without making a server request.\nSOURCE: https://github.com/inertiajs/inertia-rails/blob/master/docs/guide/manual-visits.md#2025-04-21_snippet_24\n\nLANGUAGE: javascript\nCODE:\n```\nimport { router } from '@inertiajs/vue3'\n\nrouter.push({\n  url: '/users',\n  component: 'Users',\n  props: { search: 'John' },\n  clearHistory: false,\n  encryptHistory: false,\n  preserveScroll: false,\n  preserveState: false,\n})\n```\n\n----------------------------------------\n\nTITLE: Setting Default Layout in Inertia.js with Vue\nDESCRIPTION: This snippet shows how to set a default layout for all pages in an Inertia.js application using Vue. It imports a Layout component and applies it to all pages that don't have a specific layout defined.\nSOURCE: https://github.com/inertiajs/inertia-rails/blob/master/docs/guide/pages.md#2025-04-21_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\n// frontend/entrypoints/inertia.js\nimport Layout from '../Layout'\n\ncreateInertiaApp({\n  resolve: (name) => {\n    const pages = import.meta.glob('../pages/**/*.vue', { eager: true })\n    let page = pages[`../pages/${name}.vue`]\n    page.default.layout = page.default.layout || Layout\n    return page\n  },\n  // ...\n})\n```\n\n----------------------------------------\n\nTITLE: Inertia Form Submission with Options\nDESCRIPTION: Demonstrates how to use form submission options like preserveScroll and onSuccess callback across Vue, React, and Svelte frameworks.\nSOURCE: https://github.com/inertiajs/inertia-rails/blob/master/docs/guide/forms.md#2025-04-21_snippet_10\n\nLANGUAGE: js\nCODE:\n```\n// Vue\nform.post('/profile', {\n  preserveScroll: true,\n  onSuccess: () => form.reset('password'),\n})\n\n// React\nconst { post, reset } = useForm({ ... })\n\npost('/profile', {\npreserveScroll: true,\nonSuccess: () => reset('password'),\n})\n\n// Svelte 4|Svelte 5\n$form.post('/profile', {\n  preserveScroll: true,\n  onSuccess: () => $form.reset('password'),\n})\n```\n\n----------------------------------------\n\nTITLE: Managing Form Defaults in Svelte with Inertia.js\nDESCRIPTION: Shows how to handle form default values in Svelte 4 and 5 using Inertia.js. It demonstrates setting current values as defaults and updating single or multiple fields.\nSOURCE: https://github.com/inertiajs/inertia-rails/blob/master/docs/guide/forms.md#2025-04-21_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\n// Set the form's current values as the new defaults...\n$form.defaults()\n\n// Update the default value of a single field...\n$form.defaults('email', 'updated-default@example.com')\n\n// Change the default value of multiple fields...\n$form.defaults({\n  name: 'Updated Example',\n  email: 'updated-default@example.com',\n})\n```\n\n----------------------------------------\n\nTITLE: Adding Data to Requests in React\nDESCRIPTION: Example of adding data to a request using the data option in React. This is used to send information to the server with the request.\nSOURCE: https://github.com/inertiajs/inertia-rails/blob/master/docs/guide/manual-visits.md#2025-04-21_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nimport { router } from '@inertiajs/react'\n\nrouter.visit('/users', {\n  method: 'post',\n  data: {\n    name: 'John Doe',\n    email: 'john.doe@example.com',\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Cancelling Form Submission in Vue with Inertia.js\nDESCRIPTION: Demonstrates how to cancel a form submission in Vue using the cancel() method provided by Inertia.js.\nSOURCE: https://github.com/inertiajs/inertia-rails/blob/master/docs/guide/forms.md#2025-04-21_snippet_23\n\nLANGUAGE: vue\nCODE:\n```\nform.cancel()\n```\n\n----------------------------------------\n\nTITLE: Checking Form Changes in Vue with Inertia.js\nDESCRIPTION: Demonstrates how to check if a form has unsaved changes in Vue using the isDirty property provided by Inertia.js.\nSOURCE: https://github.com/inertiajs/inertia-rails/blob/master/docs/guide/forms.md#2025-04-21_snippet_20\n\nLANGUAGE: vue\nCODE:\n```\n<div v-if=\"form.isDirty\">There are unsaved form changes.</div>\n```\n\n----------------------------------------\n\nTITLE: Creating a Layout Component in Svelte 4\nDESCRIPTION: Illustrates the creation of a reusable layout component in Svelte 4, using Inertia's inertia directive for navigation links.\nSOURCE: https://github.com/inertiajs/inertia-rails/blob/master/docs/guide/pages.md#2025-04-21_snippet_7\n\nLANGUAGE: svelte\nCODE:\n```\n<script>\n  import { inertia } from '@inertiajs/svelte'\n</script>\n\n<main>\n  <header>\n    <a use:inertia href=\"/\">Home</a>\n    <a use:inertia href=\"/about\">About</a>\n    <a use:inertia href=\"/contact\">Contact</a>\n  </header>\n  <article>\n    <slot />\n  </article>\n</main>\n```\n\n----------------------------------------\n\nTITLE: Storing Form State in History with Inertia.js\nDESCRIPTION: Demonstrates how to store form data and errors in history state across Vue, React, and Svelte frameworks using Inertia.js. It shows how to provide a unique form key when instantiating the form.\nSOURCE: https://github.com/inertiajs/inertia-rails/blob/master/docs/guide/forms.md#2025-04-21_snippet_26\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useForm } from '@inertiajs/vue3'\n\nconst form = useForm('CreateUser', data)\nconst form = useForm(`EditUser:${user.id}`, data)\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useForm } from '@inertiajs/react'\n\nconst form = useForm('CreateUser', data)\nconst form = useForm(`EditUser:${user.id}`, data)\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useForm } from '@inertiajs/svelte'\n\nconst form = useForm('CreateUser', data)\nconst form = useForm(`EditUser:${user.id}`, data)\n```\n\n----------------------------------------\n\nTITLE: Customizing Inertia Generator Templates in Rails\nDESCRIPTION: Demonstrates how to customize the default templates used by Inertia generators in a Rails application.\nSOURCE: https://github.com/inertiajs/inertia-rails/blob/master/docs/guide/responses.md#2025-04-21_snippet_10\n\nLANGUAGE: jsx\nCODE:\n```\nexport default function <%= @action.camelize %>() {\n  return (\n    <h1>Hello from my new default template</h1>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Stale-While-Revalidate in React\nDESCRIPTION: Implementing stale-while-revalidate caching strategy in React. This allows showing stale data immediately while fetching fresh data in the background, specified as a tuple with fresh and stale durations.\nSOURCE: https://github.com/inertiajs/inertia-rails/blob/master/docs/guide/prefetching.md#2025-04-21_snippet_21\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Link } from '@inertiajs/react'\n\nexport default () => (\n  <Link href=\"/users\" prefetch cacheFor={['30s', '1m']}>\n    Users\n  </Link>\n)\n```\n\n----------------------------------------\n\nTITLE: Implementing Persistent Layouts in React\nDESCRIPTION: Demonstrates how to set up persistent layouts in React using the layout property on the component, allowing for state preservation between page visits.\nSOURCE: https://github.com/inertiajs/inertia-rails/blob/master/docs/guide/pages.md#2025-04-21_snippet_10\n\nLANGUAGE: jsx\nCODE:\n```\nimport Layout from '../Layout'\n\nconst Home = ({ user }) => {\n  return (\n    <>\n      <h1>Welcome</h1>\n      <p>Hello {user.name}, welcome to your first Inertia app!</p>\n    </>\n  )\n}\n\nHome.layout = (page) => <Layout children={page} title=\"Welcome\" />\n\nexport default Home\n```\n\n----------------------------------------\n\nTITLE: Conditional Sharing with inertia_share in Ruby on Rails\nDESCRIPTION: Demonstrates how to conditionally share data using Rails-style controller filters including only, except, if, and unless options, allowing for more granular control over when data is shared.\nSOURCE: https://github.com/inertiajs/inertia-rails/blob/master/docs/guide/shared-data.md#2025-04-21_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\nclass EventsController < ApplicationController\n  # Share user data only when authenticated\n  inertia_share if: :user_signed_in? do\n    {\n      user: {\n        name: current_user.name,\n        email: current_user.email,\n        role: current_user.role\n      }\n    }\n  end\n\n  # Share data only for specific actions\n  inertia_share only: [:index, :show] do\n    {\n      meta: {\n        last_updated: Time.current,\n        version: \"1.0\"\n      }\n    }\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Displaying Flash Messages in Vue Layout\nDESCRIPTION: Shows how to display flash messages in a Vue layout component by accessing them from the shared props. The example checks for both alert and notice types of flash messages.\nSOURCE: https://github.com/inertiajs/inertia-rails/blob/master/docs/guide/shared-data.md#2025-04-21_snippet_6\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <main>\n    <header></header>\n    <article>\n      <div v-if=\"$page.props.flash.alert\" class=\"alert\">\n        {{ $page.props.flash.alert }}\n      </div>\n      <div v-if=\"$page.props.flash.notice\" class=\"notice\">\n        {{ $page.props.flash.notice }}\n      </div>\n      <slot />\n    </article>\n    <footer></footer>\n  </main>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Implementing Persistent Layouts in Svelte 5\nDESCRIPTION: Illustrates the implementation of persistent layouts in Svelte 5 using the layout export in a module script, allowing for state maintenance across page visits.\nSOURCE: https://github.com/inertiajs/inertia-rails/blob/master/docs/guide/pages.md#2025-04-21_snippet_12\n\nLANGUAGE: svelte\nCODE:\n```\n<script module>\n  export { default as layout } from './Layout.svelte'\n</script>\n\n<script>\n  let { user } = $props()\n</script>\n\n<h1>Welcome</h1>\n\n<p>Hello {user.name}, welcome to your first Inertia app!</p>\n```\n\n----------------------------------------\n\nTITLE: Generating Inertia Controller in Rails\nDESCRIPTION: Shows how to use the Inertia controller generator to create a new controller with Inertia responses.\nSOURCE: https://github.com/inertiajs/inertia-rails/blob/master/docs/guide/responses.md#2025-04-21_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nbin/rails generate inertia:controller ControllerName action1 action2\n```\n\n----------------------------------------\n\nTITLE: Updating Form Defaults in Vue with Inertia.js\nDESCRIPTION: Demonstrates how to update default values for form fields in Vue using Inertia.js. It shows methods for updating single and multiple fields.\nSOURCE: https://github.com/inertiajs/inertia-rails/blob/master/docs/guide/forms.md#2025-04-21_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\n// Update the default value of a single field...\nform.defaults('email', 'updated-default@example.com')\n\n// Update the default value of multiple fields...\nform.defaults({\n  name: 'Updated Example',\n  email: 'updated-default@example.com',\n})\n```\n\n----------------------------------------\n\nTITLE: Customizing Cache Duration in React\nDESCRIPTION: Setting custom cache durations for prefetched data in React. The data can be cached for a specific time period (e.g., 1 minute, 10 seconds, or 5000 milliseconds) before being evicted.\nSOURCE: https://github.com/inertiajs/inertia-rails/blob/master/docs/guide/prefetching.md#2025-04-21_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Link } from '@inertiajs/react'\n\nexport default () => (\n  <>\n    <Link href=\"/users\" prefetch cacheFor=\"1m\">\n      Users\n    </Link>\n    <Link href=\"/users\" prefetch cacheFor=\"10s\">\n      Users\n    </Link>\n    <Link href=\"/users\" prefetch cacheFor={5000}>\n      Users\n    </Link>\n  </>\n)\n```\n\n----------------------------------------\n\nTITLE: Implementing Inertia.js Event Callbacks in Svelte\nDESCRIPTION: Example of setting up event callbacks for an Inertia.js POST request in Svelte. This shows all available callback functions including onBefore, onStart, onProgress, onSuccess, onError, onCancel, and onFinish that can be triggered during a page visit.\nSOURCE: https://github.com/inertiajs/inertia-rails/blob/master/docs/guide/manual-visits.md#2025-04-21_snippet_36\n\nLANGUAGE: javascript\nCODE:\n```\nimport { router } from '@inertiajs/svelte'\n\nrouter.post('/users', data, {\n  onBefore: (visit) => {},\n  onStart: (visit) => {},\n  onProgress: (progress) => {},\n  onSuccess: (page) => {},\n  onError: (errors) => {},\n  onCancel: () => {},\n  onFinish: (visit) => {},\n})\n```\n\n----------------------------------------\n\nTITLE: Using Promise-Based Callbacks in React\nDESCRIPTION: Example of returning promises from onSuccess callbacks in React. This allows the onFinish event to be delayed until all promises have been resolved, which is useful for performing additional asynchronous operations before completing the navigation flow.\nSOURCE: https://github.com/inertiajs/inertia-rails/blob/master/docs/guide/manual-visits.md#2025-04-21_snippet_41\n\nLANGUAGE: javascript\nCODE:\n```\nimport { router } from '@inertiajs/react'\n\nrouter.post(url, {\n  onSuccess: () => {\n    return Promise.all([this.doThing(), this.doAnotherThing()])\n  },\n  onFinish: (visit) => {\n    // This won't be called until doThing()\n    // and doAnotherThing() have finished.\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Router Reload Shorthand\nDESCRIPTION: Examples of using the router.reload() shorthand method for partial reloads across different frameworks.\nSOURCE: https://github.com/inertiajs/inertia-rails/blob/master/docs/guide/partial-reloads.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { router } from '@inertiajs/vue3'\n\nrouter.reload({ only: ['users'] })\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport { router } from '@inertiajs/react'\n\nrouter.reload({ only: ['users'] })\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport { router } from '@inertiajs/svelte'\n\nrouter.reload({ only: ['users'] })\n```\n\n----------------------------------------\n\nTITLE: Implementing Partial Reloads with Except Option\nDESCRIPTION: Examples of performing partial reloads by specifying which props to exclude using the 'except' option across different frameworks.\nSOURCE: https://github.com/inertiajs/inertia-rails/blob/master/docs/guide/partial-reloads.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { router } from '@inertiajs/vue3'\n\nrouter.visit(url, {\n  except: ['users'],\n})\n```\n\nLANGUAGE: jsx\nCODE:\n```\nimport { router } from '@inertiajs/react'\n\nrouter.visit(url, {\n  except: ['users'],\n})\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport { router } from '@inertiajs/svelte'\n\nrouter.visit(url, {\n  except: ['users'],\n})\n```\n\n----------------------------------------\n\nTITLE: Conditional Default Layout in Inertia.js with Svelte\nDESCRIPTION: This code illustrates how to conditionally set a default layout in an Inertia.js application using Svelte. It applies the Layout component to all pages except those with names starting with 'Public/', returning both the page and the conditional layout.\nSOURCE: https://github.com/inertiajs/inertia-rails/blob/master/docs/guide/pages.md#2025-04-21_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\n// frontend/entrypoints/inertia.js\nimport Layout from '../Layout'\n\ncreateInertiaApp({\n  resolve: (name) => {\n    const pages = import.meta.glob('../pages/**/*.svelte', { eager: true })\n    let page = pages[`../pages/${name}.svelte`]\n    return {\n      default: page.default,\n      layout: name.startsWith('Public/') ? undefined : Layout,\n    }\n  },\n  // ...\n})\n```\n\n----------------------------------------\n\nTITLE: Using Error Bags in Inertia Requests\nDESCRIPTION: Shows how to use error bags to scope validation errors for multiple forms on a single page in Vue, React, and Svelte.\nSOURCE: https://github.com/inertiajs/inertia-rails/blob/master/docs/guide/validation.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { router } from '@inertiajs/vue3'\n\nrouter.post('/companies', data, {\n  errorBag: 'createCompany',\n})\n\nrouter.post('/users', data, {\n  errorBag: 'createUser',\n})\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport { router } from '@inertiajs/react'\n\nrouter.post('/companies', data, {\n  errorBag: 'createCompany',\n})\n\nrouter.post('/users', data, {\n  errorBag: 'createUser',\n})\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport { router } from '@inertiajs/svelte'\n\nrouter.post('/companies', data, {\n  errorBag: 'createCompany',\n})\n\nrouter.post('/users', data, {\n  errorBag: 'createUser',\n})\n```\n\n----------------------------------------\n\nTITLE: Merging Props in Ruby Controller for Inertia Rails\nDESCRIPTION: This Ruby code demonstrates how to use `merge` for simple arrays and `deep_merge` for nested objects in an Inertia Rails controller. It includes examples for both regular and deferred props.\nSOURCE: https://github.com/inertiajs/inertia-rails/blob/master/docs/guide/merging-props.md#2025-04-21_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nclass UsersController < ApplicationController\n  include Pagy::Backend\n\n  def index\n    pagy, records = pagy(User.all)\n\n    render inertia: {\n      # simple array:\n      users: InertiaRails.merge { records.as_json(...) },\n      # pagination object:\n      data: InertiaRails.deep_merge {\n        {\n          records: records.as_json(...),\n          pagy: pagy_metadata(pagy)\n        }\n      }\n    }\n  end\nend\n```\n\nLANGUAGE: ruby\nCODE:\n```\nclass UsersController < ApplicationController\n  include Pagy::Backend\n\n  def index\n    pagy, records = pagy(User.all)\n\n    render inertia: {\n      # simple array:\n      users: InertiaRails.defer(merge: true) { records.as_json(...) },\n      # pagination object:\n      data: InertiaRails.defer(deep_merge: true) {\n        {\n          records: records.as_json(...),\n          pagy: pagy_metadata(pagy)\n        }\n      }\n    }\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Cancelling Inertia.js Visits\nDESCRIPTION: Shows how to cancel an ongoing Inertia.js visit using a cancel token. This is useful for aborting requests when needed.\nSOURCE: https://github.com/inertiajs/inertia-rails/blob/master/docs/guide/manual-visits.md#2025-04-21_snippet_33\n\nLANGUAGE: javascript\nCODE:\n```\nimport { router } from '@inertiajs/vue3'\n\nrouter.post('/users', data, {\n  onCancelToken: (cancelToken) => (this.cancelToken = cancelToken),\n})\n\n// Cancel the visit...\nthis.cancelToken.cancel()\n```\n\n----------------------------------------\n\nTITLE: Displaying Upload Progress in Inertia Forms\nDESCRIPTION: Illustrates how to show file upload progress using the progress property in Vue, React, and Svelte frameworks.\nSOURCE: https://github.com/inertiajs/inertia-rails/blob/master/docs/guide/forms.md#2025-04-21_snippet_12\n\nLANGUAGE: vue\nCODE:\n```\n<!-- Vue -->\n<progress v-if=\"form.progress\" :value=\"form.progress.percentage\" max=\"100\">\n  {{ form.progress.percentage }}%\n</progress>\n\n<!-- React -->\n{progress && (\n  <progress value={progress.percentage} max=\"100\">\n    {progress.percentage}%\n  </progress>\n)}\n\n<!-- Svelte 4|Svelte 5 -->\n{#if $form.progress}\n  <progress value={$form.progress.percentage} max=\"100\">\n    {$form.progress.percentage}%\n  </progress>\n{/if}\n```\n\n----------------------------------------\n\nTITLE: Handling 'success' Event in Vue.js with Inertia\nDESCRIPTION: Demonstrates how to handle the 'success' event in Vue.js with Inertia, which fires on successful page visits, unless validation errors are present.\nSOURCE: https://github.com/inertiajs/inertia-rails/blob/master/docs/guide/events.md#2025-04-21_snippet_31\n\nLANGUAGE: javascript\nCODE:\n```\nimport { router } from '@inertiajs/vue3'\n\nrouter.on('success', (event) => {\n  console.log(`Successfully made a visit to ${event.detail.page.url}`)\n})\n```\n\n----------------------------------------\n\nTITLE: Lazy Data Evaluation in Controllers\nDESCRIPTION: Examples of implementing lazy data evaluation in Ruby controllers for optimal partial reload performance.\nSOURCE: https://github.com/inertiajs/inertia-rails/blob/master/docs/guide/partial-reloads.md#2025-04-21_snippet_5\n\nLANGUAGE: ruby\nCODE:\n```\nclass UsersController < ApplicationController\n  def index\n    render inertia: 'Users/Index', props: {\n      users: -> { User.all },\n      companies: -> { Company.all },\n    }\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Resetting Inertia Form Values\nDESCRIPTION: Demonstrates how to reset form values using the reset method in Vue, React, and Svelte frameworks.\nSOURCE: https://github.com/inertiajs/inertia-rails/blob/master/docs/guide/forms.md#2025-04-21_snippet_16\n\nLANGUAGE: js\nCODE:\n```\n// Vue\n// Reset the form...\nform.reset()\n\n// Reset specific fields...\nform.reset('field', 'anotherfield')\n\n// React\nconst { reset } = useForm({ ... })\n\n// Reset the form...\nreset()\n\n// Reset specific fields...\nreset('field', 'anotherfield')\n\n// Svelte 4|Svelte 5\n// Reset the form...\n$form.reset()\n\n// Reset specific fields...\n$form.reset('field', 'anotherfield')\n```\n\n----------------------------------------\n\nTITLE: Shortcut Request Methods in Svelte\nDESCRIPTION: Convenience shortcuts for making different types of HTTP requests in Svelte. These methods share the same options as router.visit() but provide more concise syntax for common HTTP methods.\nSOURCE: https://github.com/inertiajs/inertia-rails/blob/master/docs/guide/manual-visits.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport { router } from '@inertiajs/svelte'\n\nrouter.get(url, data, options)\nrouter.post(url, data, options)\nrouter.put(url, data, options)\nrouter.patch(url, data, options)\nrouter.delete(url, options)\nrouter.reload(options) // Uses the current URL\n```\n\n----------------------------------------\n\nTITLE: Partial Reloads in Inertia.js GET Requests\nDESCRIPTION: Demonstrates how to perform partial reloads in Inertia.js GET requests. This allows requesting only specific props from the server, improving efficiency.\nSOURCE: https://github.com/inertiajs/inertia-rails/blob/master/docs/guide/manual-visits.md#2025-04-21_snippet_32\n\nLANGUAGE: javascript\nCODE:\n```\nimport { router } from '@inertiajs/vue3'\n\nrouter.get('/users', { search: 'John' }, { only: ['users'] })\n```\n\n----------------------------------------\n\nTITLE: Inertia Form Submission Methods\nDESCRIPTION: Lists the available methods for submitting Inertia forms in Vue, React, and Svelte. Includes get, post, put, patch, and delete methods.\nSOURCE: https://github.com/inertiajs/inertia-rails/blob/master/docs/guide/forms.md#2025-04-21_snippet_9\n\nLANGUAGE: js\nCODE:\n```\n// Vue\nform.submit(method, url, options)\nform.get(url, options)\nform.post(url, options)\nform.put(url, options)\nform.patch(url, options)\nform.delete(url, options)\n\n// React\nconst { submit, get, post, put, patch, delete: destroy } = useForm({ ... })\n\nsubmit(method, url, options)\nget(url, options)\npost(url, options)\nput(url, options)\npatch(url, options)\ndestroy(url, options)\n\n// Svelte 4|Svelte 5\n$form.submit(method, url, options)\n$form.get(url, options)\n$form.post(url, options)\n$form.put(url, options)\n$form.patch(url, options)\n$form.delete(url, options)\n```\n\n----------------------------------------\n\nTITLE: Handling 'success' Event in React with Inertia\nDESCRIPTION: Shows how to handle the 'success' event in React with Inertia, which fires on successful page visits, unless validation errors are present.\nSOURCE: https://github.com/inertiajs/inertia-rails/blob/master/docs/guide/events.md#2025-04-21_snippet_32\n\nLANGUAGE: jsx\nCODE:\n```\nimport { router } from '@inertiajs/react'\n\nrouter.on('success', (event) => {\n  console.log(`Successfully made a visit to ${event.detail.page.url}`)\n})\n```\n\n----------------------------------------\n\nTITLE: Svelte 4 Error Page Component Implementation\nDESCRIPTION: Svelte 4 component for displaying error pages with reactive title and description based on HTTP status codes.\nSOURCE: https://github.com/inertiajs/inertia-rails/blob/master/docs/guide/error-handling.md#2025-04-21_snippet_3\n\nLANGUAGE: svelte\nCODE:\n```\n<script>\n  export let status\n\n  $: title =\n    {\n      503: 'Service Unavailable',\n      500: 'Server Error',\n      404: 'Page Not Found',\n      403: 'Forbidden',\n    }[status] || 'Unexpected error'\n\n  $: description = {\n    503: 'Sorry, we are doing some maintenance. Please check back soon.',\n    500: 'Whoops, something went wrong on our servers.',\n    404: 'Sorry, the page you are looking for could not be found.',\n    403: 'Sorry, you are forbidden from accessing this page.',\n  }[status]\n</script>\n\n<div>\n  <h1>{status}: {title}</h1>\n  <div>{description}</div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Multiple Component State Management\nDESCRIPTION: Shows how to manage state for multiple components using unique keys to properly restore data for each component.\nSOURCE: https://github.com/inertiajs/inertia-rails/blob/master/docs/guide/remembering-state.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useRemember } from '@inertiajs/vue3'\n\nconst form = useRemember(\n  {\n    first_name: null,\n    last_name: null,\n  },\n  'Users/Create',\n)\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useRemember } from '@inertiajs/react'\n\nexport default function Profile() {\n  const [formState, setFormState] = useRemember(\n    {\n      first_name: null,\n      last_name: null,\n    },\n    'Users/Create',\n  )\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport { page, useRemember } from '@inertiajs/svelte'\n\nlet form = useRemember(\n  {\n    first_name: null,\n    last_name: null,\n  },\n  'Users/Create',\n)\n```\n\n----------------------------------------\n\nTITLE: Serializing Rails Errors for Inertia\nDESCRIPTION: This Ruby code defines a helper method in the ApplicationController to convert Rails model errors into a format compatible with Inertia. It transforms the error arrays into single strings for each field.\nSOURCE: https://github.com/inertiajs/inertia-rails/blob/master/docs/cookbook/handling-validation-error-types.md#2025-04-21_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\ndef inertia_errors(model)\n  {\n    errors: model.errors.to_hash(true).transform_values(&:to_sentence)\n  }\nend\n```\n\n----------------------------------------\n\nTITLE: External Redirect Implementation in Inertia.js Rails\nDESCRIPTION: Shows how to implement external redirects in Inertia.js Rails applications using the inertia_location method, which generates a 409 Conflict response with the destination URL in the X-Inertia-Location header.\nSOURCE: https://github.com/inertiajs/inertia-rails/blob/master/docs/guide/redirects.md#2025-04-21_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\ninertia_location index_path\n```\n\n----------------------------------------\n\nTITLE: Using Serialized Errors in Rails Controller\nDESCRIPTION: This Ruby code snippet demonstrates how to use the inertia_errors helper method when redirecting with errors in a Rails controller action.\nSOURCE: https://github.com/inertiajs/inertia-rails/blob/master/docs/cookbook/handling-validation-error-types.md#2025-04-21_snippet_4\n\nLANGUAGE: ruby\nCODE:\n```\nredirect_back inertia: inertia_errors(model)\n```\n\n----------------------------------------\n\nTITLE: Implementing User Creation with Inertia.js Redirects in Ruby on Rails\nDESCRIPTION: Example of a Rails controller action that creates a user and demonstrates proper redirect handling with Inertia.js. Shows both successful and error cases with appropriate redirect responses.\nSOURCE: https://github.com/inertiajs/inertia-rails/blob/master/docs/guide/redirects.md#2025-04-21_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nclass UsersController < ApplicationController\n  def create\n    user = User.new(user_params)\n\n    if user.save\n      redirect_to users_url\n    else\n      redirect_to new_user_url, inertia: { errors: user.errors }\n    end\n  end\n\n  private\n\n  def user_params\n    params.require(:user).permit(:name, :email)\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Handling 'success' Event in Svelte with Inertia\nDESCRIPTION: Illustrates how to handle the 'success' event in Svelte with Inertia, which fires on successful page visits, unless validation errors are present.\nSOURCE: https://github.com/inertiajs/inertia-rails/blob/master/docs/guide/events.md#2025-04-21_snippet_33\n\nLANGUAGE: javascript\nCODE:\n```\nimport { router } from '@inertiajs/svelte'\n\nrouter.on('success', (event) => {\n  console.log(`Successfully made a visit to ${event.detail.page.url}`)\n})\n```\n\n----------------------------------------\n\nTITLE: Handling Exception Event in Inertia.js\nDESCRIPTION: Shows how to listen for and handle the 'exception' event in Inertia.js, which fires on unexpected XHR errors or errors when resolving page components. The event provides access to the error object.\nSOURCE: https://github.com/inertiajs/inertia-rails/blob/master/docs/guide/events.md#2025-04-21_snippet_37\n\nLANGUAGE: javascript\nCODE:\n```\nimport { router } from '@inertiajs/vue3'\n\nrouter.on('exception', (event) => {\n  console.log(`An unexpected error occurred during an Inertia visit.`)\n  console.log(event.detail.error)\n})\n```\n\nLANGUAGE: jsx\nCODE:\n```\nimport { router } from '@inertiajs/react'\n\nrouter.on('exception', (event) => {\n  console.log(`An unexpected error occurred during an Inertia visit.`)\n  console.log(event.detail.error)\n})\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport { router } from '@inertiajs/svelte'\n\nrouter.on('exception', (event) => {\n  console.log(`An unexpected error occurred during an Inertia visit.`)\n  console.log(event.detail.error)\n})\n```\n\n----------------------------------------\n\nTITLE: Root Template with Vite for Inertia.js\nDESCRIPTION: ERB template showing the root layout for an Inertia.js application using Vite as the asset bundler. This template loads the necessary JavaScript and includes the Inertia SSR head tag.\nSOURCE: https://github.com/inertiajs/inertia-rails/blob/master/docs/guide/server-side-setup.md#2025-04-21_snippet_4\n\nLANGUAGE: erb\nCODE:\n```\n<!DOCTYPE html>\n<html>\n  <head>\n    <meta name=\"viewport\" content=\"width=device-width,initial-scale=1\">\n    <%= csp_meta_tag %>\n\n    <%= inertia_ssr_head %>\n\n    <%# If you want to use React add `vite_react_refresh_tag` %>\n    <%= vite_client_tag %>\n    <%= vite_javascript_tag 'application' %>\n  </head>\n\n  <body>\n    <%= yield %>\n  </body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Conditional Default Layout in Inertia.js with Vue\nDESCRIPTION: This code shows how to conditionally set a default layout in an Inertia.js application using Vue. It applies the Layout component to all pages except those with names starting with 'Public/'.\nSOURCE: https://github.com/inertiajs/inertia-rails/blob/master/docs/guide/pages.md#2025-04-21_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\n// frontend/entrypoints/inertia.js\nimport Layout from '../Layout'\n\ncreateInertiaApp({\n  resolve: (name) => {\n    const pages = import.meta.glob('../pages/**/*.vue', { eager: true })\n    let page = pages[`../pages/${name}.vue`]\n    page.default.layout = name.startsWith('Public/') ? undefined : Layout\n    return page\n  },\n  // ...\n})\n```\n\n----------------------------------------\n\nTITLE: Providing View Data to Inertia Root Template in Rails\nDESCRIPTION: Demonstrates how to pass additional data to the root template that won't be sent to the JavaScript component.\nSOURCE: https://github.com/inertiajs/inertia-rails/blob/master/docs/guide/responses.md#2025-04-21_snippet_6\n\nLANGUAGE: ruby\nCODE:\n```\ndef show\n  event = Event.find(params[:id])\n\n  render inertia: 'Event', props: { event: }, view_data: { meta: event.meta }\nend\n```\n\n----------------------------------------\n\nTITLE: Traditional Inertia Controller Implementation\nDESCRIPTION: Traditional way of rendering Inertia responses with explicit component and props declaration.\nSOURCE: https://github.com/inertiajs/inertia-rails/blob/master/README.md#2025-04-21_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\nclass EventsController < ApplicationController\n  def index\n    render inertia: 'events/index', props: {\n      events: Event.all\n    }\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Configuring Babel for Dynamic Imports\nDESCRIPTION: Babel configuration that enables the dynamic import syntax, required for code splitting with Webpacker/Shakapacker.\nSOURCE: https://github.com/inertiajs/inertia-rails/blob/master/docs/guide/code-splitting.md#2025-04-21_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"plugins\": [\"@babel/plugin-syntax-dynamic-import\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying Validation Errors in Svelte Component\nDESCRIPTION: Demonstrates how to handle and display server-side validation errors in a Svelte component form using Inertia.\nSOURCE: https://github.com/inertiajs/inertia-rails/blob/master/docs/guide/validation.md#2025-04-21_snippet_3\n\nLANGUAGE: svelte\nCODE:\n```\n<script>\n  import { router } from '@inertiajs/svelte'\n\n  export let errors = {}\n\n  let values = {\n    first_name: null,\n    last_name: null,\n    email: null,\n  }\n\n  function handleSubmit() {\n    router.post('/users', values)\n  }\n</script>\n\n<form on:submit|preventDefault={handleSubmit}>\n  <label for=\"first_name\">First name:</label>\n  <input id=\"first_name\" bind:value={values.first_name} />\n  {#if errors.first_name}<div>{errors.first_name}</div>{/if}\n\n  <label for=\"last_name\">Last name:</label>\n  <input id=\"last_name\" bind:value={values.last_name} />\n  {#if errors.last_name}<div>{errors.last_name}</div>{/if}\n\n  <label for=\"email\">Email:</label>\n  <input id=\"email\" bind:value={values.email} />\n  {#if errors.email}<div>{errors.email}</div>{/if}\n\n  <button type=\"submit\">Submit</button>\n</form>\n```\n\n----------------------------------------\n\nTITLE: Registering Event Listeners in Vue.js with Inertia\nDESCRIPTION: Demonstrates how to register an event listener using the router.on() method in Vue.js with Inertia. The example shows listening for the 'start' event.\nSOURCE: https://github.com/inertiajs/inertia-rails/blob/master/docs/guide/events.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { router } from '@inertiajs/vue3'\n\nrouter.on('start', (event) => {\n  console.log(`Starting a visit to ${event.detail.visit.url}`)\n})\n```\n\n----------------------------------------\n\nTITLE: Handling Navigate Event in Inertia.js\nDESCRIPTION: Demonstrates how to listen for and handle the 'navigate' event in Inertia.js, which fires on successful page visits and when navigating through history. The event provides access to the page object containing the new URL.\nSOURCE: https://github.com/inertiajs/inertia-rails/blob/master/docs/guide/events.md#2025-04-21_snippet_40\n\nLANGUAGE: javascript\nCODE:\n```\nimport { router } from '@inertiajs/vue3'\n\nrouter.on('navigate', (event) => {\n  console.log(`Navigated to ${event.detail.page.url}`)\n})\n```\n\nLANGUAGE: jsx\nCODE:\n```\nimport { router } from '@inertiajs/react'\n\nrouter.on('navigate', (event) => {\n  console.log(`Navigated to ${event.detail.page.url}`)\n})\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport { router } from '@inertiajs/svelte'\n\nrouter.on('navigate', (event) => {\n  console.log(`Navigated to ${event.detail.page.url}`)\n})\n```\n\n----------------------------------------\n\nTITLE: Enabling Code Splitting with Vite in React\nDESCRIPTION: Modifies the createInertiaApp resolve callback to use dynamic imports with Vite's import.meta.glob function in React applications. This removes the eager loading option to enable code splitting.\nSOURCE: https://github.com/inertiajs/inertia-rails/blob/master/docs/guide/code-splitting.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// frontend/entrypoints/inertia.js\ncreateInertiaApp({\n  resolve: (name) => {\n    const pages = import.meta.glob('../pages/**/*.jsx', { eager: true }) // [!code --]\n    return pages[`../pages/${name}.jsx`] // [!code --]\n    const pages = import.meta.glob('../pages/**/*.jsx') // [!code ++]\n    return pages[`../pages/${name}.jsx`]() // [!code ++]\n  },\n  //...\n})\n```\n\n----------------------------------------\n\nTITLE: Basic State Management with useRemember Hook\nDESCRIPTION: Demonstrates how to use the useRemember hook to save local component state in browser history across different frameworks.\nSOURCE: https://github.com/inertiajs/inertia-rails/blob/master/docs/guide/remembering-state.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useRemember } from '@inertiajs/vue3'\n\nconst form = useRemember({\n  first_name: null,\n  last_name: null,\n})\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useRemember } from '@inertiajs/react'\n\nexport default function Profile() {\n  const [formState, setFormState] = useRemember({\n    first_name: null,\n    last_name: null,\n    // ...\n  })\n\n  // ...\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useRemember } from '@inertiajs/svelte'\n\nconst form = useRemember({\n  first_name: null,\n  last_name: null,\n})\n\n// ...\n```\n\n----------------------------------------\n\nTITLE: Cancelling Events by Returning False in Vue.js with Inertia\nDESCRIPTION: Demonstrates how to cancel an event in Vue.js with Inertia by returning false from the event listener registered with router.on().\nSOURCE: https://github.com/inertiajs/inertia-rails/blob/master/docs/guide/events.md#2025-04-21_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\nimport { router } from '@inertiajs/vue3'\n\nrouter.on('before', (event) => {\n  return confirm('Are you sure you want to navigate away?')\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Inertia Rails RSpec Helpers\nDESCRIPTION: This snippet shows how to require the Inertia Rails RSpec helpers in the rails_helper.rb file. These helpers provide convenient methods for testing Inertia responses.\nSOURCE: https://github.com/inertiajs/inertia-rails/blob/master/docs/guide/testing.md#2025-04-21_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nrequire 'inertia_rails/rspec'\n```\n\n----------------------------------------\n\nTITLE: Accessing Shared Data in Vue Component\nDESCRIPTION: Shows how to access shared data in a Vue layout component using the usePage composable from Inertia.js. The example displays user information that was shared from the server.\nSOURCE: https://github.com/inertiajs/inertia-rails/blob/master/docs/guide/shared-data.md#2025-04-21_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\nimport { computed } from 'vue'\nimport { usePage } from '@inertiajs/vue3'\n\nconst page = usePage()\n\nconst user = computed(() => page.props.auth.user)\n</script>\n\n<template>\n  <main>\n    <header>You are logged in as: {{ user.name }}</header>\n    <article>\n      <slot />\n    </article>\n  </main>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Registering Event Listeners in React with Inertia\nDESCRIPTION: Shows how to register an event listener using the router.on() method in React with Inertia. The example demonstrates listening for the 'start' event.\nSOURCE: https://github.com/inertiajs/inertia-rails/blob/master/docs/guide/events.md#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { router } from '@inertiajs/react'\n\nrouter.on('start', (event) => {\n  console.log(`Starting a visit to ${event.detail.visit.url}`)\n})\n```\n\n----------------------------------------\n\nTITLE: Using Instance Variables as Props in Inertia Rails\nDESCRIPTION: Shows how to automatically pass instance variables as props in an Inertia response using the use_inertia_instance_props method.\nSOURCE: https://github.com/inertiajs/inertia-rails/blob/master/docs/guide/responses.md#2025-04-21_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\nclass EventsController < ApplicationController\n  use_inertia_instance_props\n\n  def index\n    @events = Event.all\n\n    render inertia: 'Events/Index'\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Configuring Default Render Behavior for Inertia in Rails\nDESCRIPTION: Shows how to configure Inertia to automatically render the correct page component as the default behavior.\nSOURCE: https://github.com/inertiajs/inertia-rails/blob/master/docs/guide/responses.md#2025-04-21_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\nInertiaRails.configure do |config|\n  config.default_render = true\nend\n```\n\nLANGUAGE: ruby\nCODE:\n```\nclass EventsController < ApplicationController\n  use_inertia_instance_props\n\n  def index\n    @events = Event.all\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Manual State Management\nDESCRIPTION: Demonstrates manual state management using remember() and restore() methods for custom state handling scenarios.\nSOURCE: https://github.com/inertiajs/inertia-rails/blob/master/docs/guide/remembering-state.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { router } from '@inertiajs/vue3'\n\n// Save local component state to history state...\nrouter.remember(data, 'my-key')\n\n// Restore local component state from history state...\nlet data = router.restore('my-key')\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport { router } from '@inertiajs/react'\n\n// Save local component state to history state...\nrouter.remember(data, 'my-key')\n\n// Restore local component state from history state...\nlet data = router.restore('my-key')\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport { router } from '@inertiajs/svelte'\n\n// Save local component state to history state...\nrouter.remember(data, 'my-key')\n\n// Restore local component state from history state...\nlet data = router.restore('my-key')\n```\n\n----------------------------------------\n\nTITLE: Automatic Event Listener Removal in Vue.js with Inertia\nDESCRIPTION: Demonstrates how to automatically remove an event listener when a component unmounts in Vue.js with Inertia using the onUnmounted hook.\nSOURCE: https://github.com/inertiajs/inertia-rails/blob/master/docs/guide/events.md#2025-04-21_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nimport { router } from '@inertiajs/vue3'\nimport { onUnmounted } from 'vue'\n\nonUnmounted(\n  router.on('start', (event) => {\n    console.log(`Starting a visit to ${event.detail.visit.url}`)\n  }),\n)\n```\n\n----------------------------------------\n\nTITLE: Component Instance State Management\nDESCRIPTION: Demonstrates state management for multiple instances of the same component using unique identifiers.\nSOURCE: https://github.com/inertiajs/inertia-rails/blob/master/docs/guide/remembering-state.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useRemember } from '@inertiajs/vue3'\n\nconst props = defineProps({ user: Object })\n\nconst form = useRemember(\n  {\n    first_name: null,\n    last_name: null,\n  },\n  `Users/Edit:${props.user.id}`,\n)\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useRemember } from '@inertiajs/react'\n\nexport default function Profile() {\n  const [formState, setFormState] = useRemember(\n    {\n      first_name: props.user.first_name,\n      last_name: props.user.last_name,\n    },\n    `Users/Edit:${this.user.id}`,\n  )\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport { page, useRemember } from '@inertiajs/svelte'\n\nlet form = useRemember(\n  {\n    first_name: $page.props.user.first_name,\n    last_name: $page.props.user.last_name,\n  },\n  `Users/Edit:${$page.props.user.id}`,\n)\n```\n\n----------------------------------------\n\nTITLE: Accessing Shared Data in React Component\nDESCRIPTION: Demonstrates how to access shared data in a React layout component using the usePage hook from Inertia.js. The example displays user information shared from the server.\nSOURCE: https://github.com/inertiajs/inertia-rails/blob/master/docs/guide/shared-data.md#2025-04-21_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport { usePage } from '@inertiajs/react'\n\nexport default function Layout({ children }) {\n  const { auth } = usePage().props\n\n  return (\n    <main>\n      <header>You are logged in as: {auth.user.name}</header>\n      <article>{children}</article>\n    </main>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Active States for Navigation Links in Vue with Inertia.js\nDESCRIPTION: This Vue component demonstrates various techniques for setting active states on navigation links using Inertia.js. It shows how to perform exact and partial matches on both URL and component properties of the page object.\nSOURCE: https://github.com/inertiajs/inertia-rails/blob/master/docs/guide/links.md#2025-04-21_snippet_3\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\nimport { Link } from '@inertiajs/vue3'\n</script>\n\n<template>\n  <!-- URL exact match...-->\n  <Link href=\"/users\" :class=\"{ active: $page.url === '/users' }\">Users</Link>\n\n  <!-- Component exact match...-->\n  <Link href=\"/users\" :class=\"{ active: $page.component === 'Users/Index' }\">\n    Users\n  </Link>\n\n  <!-- URL starts with (/users, /users/create, /users/1, etc.)...-->\n  <Link href=\"/users\" :class=\"{ active: $page.url.startsWith('/users') }\">\n    Users\n  </Link>\n\n  <!-- Component starts with (Users/Index, Users/Create, Users/Show, etc.)...-->\n  <Link href=\"/users\" :class=\"{ active: $page.component.startsWith('Users') }\">\n    Users\n  </Link>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Handling 'before' Event in React with Inertia\nDESCRIPTION: Shows how to handle the 'before' event in React with Inertia, which fires when a request is about to be made to the server.\nSOURCE: https://github.com/inertiajs/inertia-rails/blob/master/docs/guide/events.md#2025-04-21_snippet_23\n\nLANGUAGE: jsx\nCODE:\n```\nimport { router } from '@inertiajs/react'\n\nrouter.on('before', (event) => {\n  console.log(`About to make a visit to ${event.detail.visit.url}`)\n})\n```\n\n----------------------------------------\n\nTITLE: Initial HTML Response in Inertia\nDESCRIPTION: Example of the initial HTML response for an Inertia app, including the request and response headers, and the HTML structure with the root div containing the page object.\nSOURCE: https://github.com/inertiajs/inertia-rails/blob/master/docs/guide/the-protocol.md#2025-04-21_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nREQUEST\nGET: http://example.com/events/80\nAccept: text/html, application/xhtml+xml\n\n\nRESPONSE\nHTTP/1.1 200 OK\nContent-Type: text/html; charset=utf-8\n\n<html>\n<head>\n    <title>My app</title>\n    <link href=\"/css/app.css\" rel=\"stylesheet\">\n    <script src=\"/js/app.js\" defer></script>\n</head>\n<body>\n\n<div id=\"app\" data-page='{\"component\":\"Event\",\"props\":{\"errors\":{},\"event\":{\"id\":80,\"title\":\"Birthday party\",\"start_date\":\"2019-06-02\",\"description\":\"Come out and celebrate Jonathan&apos;s 36th birthday party!\"}},\"url\":\"/events/80\",\"version\":\"c32b8e4965f418ad16eaebba1d4e960f\"}'></div>\n\n</body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Inertia JSON Response\nDESCRIPTION: Example of an Inertia JSON response for subsequent requests, including the request headers with X-Inertia and X-Inertia-Version, and the JSON response containing the page object.\nSOURCE: https://github.com/inertiajs/inertia-rails/blob/master/docs/guide/the-protocol.md#2025-04-21_snippet_1\n\nLANGUAGE: http\nCODE:\n```\nREQUEST\nGET: http://example.com/events/80\nAccept: text/html, application/xhtml+xml\nX-Requested-With: XMLHttpRequest\nX-Inertia: true\nX-Inertia-Version: 6b16b94d7c51cbe5b1fa42aac98241d5\n\nRESPONSE\nHTTP/1.1 200 OK\nContent-Type: application/json\nVary: X-Inertia\nX-Inertia: true\n\n{\n  \"component\": \"Event\",\n  \"props\": {\n    \"errors\": {},\n    \"event\": {\n      \"id\": 80,\n      \"title\": \"Birthday party\",\n      \"start_date\": \"2019-06-02\",\n      \"description\": \"Come out and celebrate Jonathan's 36th birthday party!\"\n    }\n  },\n  \"url\": \"/events/80\",\n  \"version\": \"c32b8e4965f418ad16eaebba1d4e960f\",\n  \"encryptHistory\": true,\n  \"clearHistory\": false\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Code Splitting with Webpacker in React\nDESCRIPTION: Modifies the createInertiaApp resolve callback to use dynamic imports instead of require statements in React applications using Webpacker/Shakapacker.\nSOURCE: https://github.com/inertiajs/inertia-rails/blob/master/docs/guide/code-splitting.md#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n// javascript/packs/inertia.js\ncreateInertiaApp({\n  resolve: (name) => require(`../pages/${name}`), // [!code ii]\n  resolve: (name) => import(`../pages/${name}`), // [!code ++]\n  //...\n})\n```\n\n----------------------------------------\n\nTITLE: Stale-While-Revalidate in Vue\nDESCRIPTION: Implementing stale-while-revalidate caching strategy in Vue. This allows showing stale data immediately while fetching fresh data in the background, specified as a tuple with fresh and stale durations.\nSOURCE: https://github.com/inertiajs/inertia-rails/blob/master/docs/guide/prefetching.md#2025-04-21_snippet_20\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\nimport { Link } from '@inertiajs/vue3'\n</script>\n\n<template>\n  <Link href=\"/users\" prefetch :cacheFor=\"['30s', '1m']\">Users</Link>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Title Callback Implementation\nDESCRIPTION: Configuring a global title callback in the createInertiaApp method to automatically append or prepend text to all page titles.\nSOURCE: https://github.com/inertiajs/inertia-rails/blob/master/docs/guide/title-and-meta.md#2025-04-21_snippet_5\n\nLANGUAGE: js\nCODE:\n```\ncreateInertiaApp({\n  title: (title) => `${title} - My App`,\n  // ...\n})\n```\n\n----------------------------------------\n\nTITLE: Using Head Component in Vue\nDESCRIPTION: Example of implementing the Head component in a Vue application with Inertia.js to set the page title and meta description.\nSOURCE: https://github.com/inertiajs/inertia-rails/blob/master/docs/guide/title-and-meta.md#2025-04-21_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\nimport { Head } from '@inertiajs/vue3'\n</script>\n\n<template>\n  <Head>\n    <title>Your page title</title>\n    <meta name=\"description\" content=\"Your page description\" />\n  </Head>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Implementing Persistent Layouts in Vue\nDESCRIPTION: Shows how to implement persistent layouts in Vue using the layout property, allowing for maintaining state between page visits.\nSOURCE: https://github.com/inertiajs/inertia-rails/blob/master/docs/guide/pages.md#2025-04-21_snippet_9\n\nLANGUAGE: vue\nCODE:\n```\n<script>\nimport Layout from '../Layout'\n\nexport default {\n  // Using a render function...\n  layout: (h, page) => h(Layout, [page]),\n\n  // Using shorthand syntax...\n  layout: Layout,\n}\n</script>\n\n<script setup>\ndefineProps({ user: Object })\n</script>\n\n<template>\n  <h1>Welcome</h1>\n  <p>Hello {{ user.name }}, welcome to your first Inertia app!</p>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Setting HTTP Method in React\nDESCRIPTION: Example of specifying the HTTP method when making manual visits in React. The method option can be set to get, post, put, patch, or delete.\nSOURCE: https://github.com/inertiajs/inertia-rails/blob/master/docs/guide/manual-visits.md#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nimport { router } from '@inertiajs/react'\n\nrouter.visit(url, { method: 'post' })\n```\n\n----------------------------------------\n\nTITLE: Configuring Vite Ruby for SSR in Inertia.js Rails Project\nDESCRIPTION: JSON configuration to enable SSR build in the Vite Ruby plugin. This is added to the config/vite.json file in the Rails project.\nSOURCE: https://github.com/inertiajs/inertia-rails/blob/master/docs/guide/server-side-rendering.md#2025-04-21_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n  \"production\": {\n    \"ssrBuildEnabled\": true\n  }\n```\n\n----------------------------------------\n\nTITLE: Creating SSR Entry Point for Svelte 5 in Inertia.js Rails Project\nDESCRIPTION: JavaScript code for the SSR entry point file (app/frontend/ssr/ssr.js) using Svelte 5 and Inertia.js. This sets up the server-side rendering configuration for Svelte components.\nSOURCE: https://github.com/inertiajs/inertia-rails/blob/master/docs/guide/server-side-rendering.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createInertiaApp } from '@inertiajs/svelte'\nimport createServer from '@inertiajs/svelte/server'\nimport { render } from 'svelte/server'\n\ncreateServer((page) =>\n  createInertiaApp({\n    page,\n    resolve: (name) => {\n      const pages = import.meta.glob('../pages/**/*.svelte', { eager: true })\n      return pages[`../pages/${name}.svelte`]\n    },\n    setup({ App, props }) {\n      return render(App, { props })\n    },\n  }),\n)\n```\n\n----------------------------------------\n\nTITLE: Enabling Code Splitting with Webpacker in Svelte\nDESCRIPTION: Modifies the createInertiaApp resolve callback to use dynamic imports instead of require statements in Svelte applications using Webpacker/Shakapacker.\nSOURCE: https://github.com/inertiajs/inertia-rails/blob/master/docs/guide/code-splitting.md#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n// javascript/packs/inertia.js\ncreateInertiaApp({\n  resolve: (name) => require(`../pages/${name}.svelte`), // [!code ii]\n  resolve: (name) => import(`../pages/${name}.svelte`), // [!code ++]\n  //...\n})\n```\n\n----------------------------------------\n\nTITLE: Mount-based Prefetching in Vue\nDESCRIPTION: Prefetching data immediately when a component mounts in Vue. This is useful when there's high confidence that a user will visit the linked page next.\nSOURCE: https://github.com/inertiajs/inertia-rails/blob/master/docs/guide/prefetching.md#2025-04-21_snippet_9\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\nimport { Link } from '@inertiajs/vue3'\n</script>\n\n<template>\n  <Link href=\"/users\" prefetch=\"mount\">Users</Link>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Using Head Component in React\nDESCRIPTION: Example of implementing the Head component in a React application with Inertia.js to set the page title and meta description.\nSOURCE: https://github.com/inertiajs/inertia-rails/blob/master/docs/guide/title-and-meta.md#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Head } from '@inertiajs/react'\n\nexport default () => (\n  <Head>\n    <title>Your page title</title>\n    <meta name=\"description\" content=\"Your page description\" />\n  </Head>\n)\n```\n\n----------------------------------------\n\nTITLE: Mount-based Prefetching in Svelte\nDESCRIPTION: Prefetching data immediately when a component mounts in Svelte. This is useful when there's high confidence that a user will visit the linked page next.\nSOURCE: https://github.com/inertiajs/inertia-rails/blob/master/docs/guide/prefetching.md#2025-04-21_snippet_11\n\nLANGUAGE: svelte\nCODE:\n```\n<script>\n  import { inertia } from '@inertiajs/svelte'\n</script>\n\n<a href=\"/users\" use:inertia={{ prefetch: 'mount' }}>Users</a>\n```\n\n----------------------------------------\n\nTITLE: Grouped Deferred Props in Rails Controller\nDESCRIPTION: Shows how to group deferred props for parallel loading in Rails controller. Groups teams, projects, and tasks under 'attributes' while keeping permissions separate.\nSOURCE: https://github.com/inertiajs/inertia-rails/blob/master/docs/guide/deferred-props.md#2025-04-21_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\nclass UsersController < ApplicationController\n  def index\n    render inertia: 'Users/Index', props: {\n      users: -> { User.all },\n      roles: -> { Role.all },\n      permissions: InertiaRails.defer { Permission.all },\n      teams: InertiaRails.defer(group: 'attributes') { Team.all },\n      projects: InertiaRails.defer(group: 'attributes') { Project.all },\n      tasks: InertiaRails.defer(group: 'attributes') { Task.all },\n    }\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Setting HTTP Method in Svelte\nDESCRIPTION: Example of specifying the HTTP method when making manual visits in Svelte. The method option can be set to get, post, put, patch, or delete.\nSOURCE: https://github.com/inertiajs/inertia-rails/blob/master/docs/guide/manual-visits.md#2025-04-21_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nimport { router } from '@inertiajs/svelte'\n\nrouter.visit(url, { method: 'post' })\n```\n\n----------------------------------------\n\nTITLE: Combined Prefetching Strategies in Vue\nDESCRIPTION: Using multiple prefetching strategies simultaneously in Vue by passing an array of values. This combines different trigger methods (mount and hover) for more aggressive prefetching.\nSOURCE: https://github.com/inertiajs/inertia-rails/blob/master/docs/guide/prefetching.md#2025-04-21_snippet_12\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\nimport { Link } from '@inertiajs/vue3'\n</script>\n\n<template>\n  <Link href=\"/users\" :prefetch=\"['mount', 'hover']\">Users</Link>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Registering Event Listeners in Svelte with Inertia\nDESCRIPTION: Illustrates how to register an event listener using the router.on() method in Svelte with Inertia. The example shows listening for the 'start' event.\nSOURCE: https://github.com/inertiajs/inertia-rails/blob/master/docs/guide/events.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { router } from '@inertiajs/svelte'\n\nrouter.on('start', (event) => {\n  console.log(`Starting a visit to ${event.detail.visit.url}`)\n})\n```\n\n----------------------------------------\n\nTITLE: Updating Vue Initialization for Client-side Hydration in Inertia.js\nDESCRIPTION: JavaScript code changes to enable client-side hydration for Vue in an Inertia.js application. This updates the initialization file to use createSSRApp instead of createApp.\nSOURCE: https://github.com/inertiajs/inertia-rails/blob/master/docs/guide/server-side-rendering.md#2025-04-21_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createSSRApp, h } from 'vue'\nimport { createInertiaApp } from '@inertiajs/vue3'\n\ncreateInertiaApp({\n  resolve: (name) => {\n    const pages = import.meta.glob('../pages/**/*.vue', { eager: true })\n    return pages[`../pages/${name}.vue`]\n  },\n  setup({ el, App, props, plugin }) {\n    createSSRApp({ render: () => h(App, props) })\n      .use(plugin)\n      .mount(el)\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Basic Scroll Preservation in Vue.js\nDESCRIPTION: Demonstrates how to disable default scroll resetting behavior using the router.visit method in Vue.js.\nSOURCE: https://github.com/inertiajs/inertia-rails/blob/master/docs/guide/scroll-management.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { router } from '@inertiajs/vue3'\n\nrouter.visit(url, { preserveScroll: false })\n```\n\n----------------------------------------\n\nTITLE: Programmatic Prefetching with Router API\nDESCRIPTION: Prefetching data programmatically using the router API. This allows for manual control over prefetching with optional cache duration settings.\nSOURCE: https://github.com/inertiajs/inertia-rails/blob/master/docs/guide/prefetching.md#2025-04-21_snippet_15\n\nLANGUAGE: js\nCODE:\n```\nrouter.prefetch('/users', { method: 'get', data: { page: 2 } })\n\nrouter.prefetch(\n  '/users',\n  { method: 'get', data: { page: 2 } },\n  { cacheFor: '1m' },\n)\n```\n\n----------------------------------------\n\nTITLE: Deep Merging Shared Data in Controller Action\nDESCRIPTION: Demonstrates how to use the deep_merge option when rendering an Inertia view to combine nested shared data structures rather than replacing them. This allows for partial updates to shared data objects.\nSOURCE: https://github.com/inertiajs/inertia-rails/blob/master/docs/guide/shared-data.md#2025-04-21_snippet_9\n\nLANGUAGE: ruby\nCODE:\n```\nclass CrazyScorersController < ApplicationController\n  def index\n    render inertia: 'CrazyScorersComponent',\n      props: { basketball_data: { points: 100 } },\n      deep_merge: true\n  end\nend\n\n# The renderer will send this to the frontend:\n{\n  basketball_data: {\n    points: 100,\n    rebounds: 100,\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Layout Component in Svelte 5\nDESCRIPTION: Demonstrates the structure of a reusable layout component in Svelte 5, using Inertia's inertia directive for navigation and the new children prop syntax.\nSOURCE: https://github.com/inertiajs/inertia-rails/blob/master/docs/guide/pages.md#2025-04-21_snippet_8\n\nLANGUAGE: svelte\nCODE:\n```\n<script>\n  import { inertia } from '@inertiajs/svelte'\n\n  let { children } = $props()\n</script>\n\n<main>\n  <header>\n    <a use:inertia href=\"/\">Home</a>\n    <a use:inertia href=\"/about\">About</a>\n    <a use:inertia href=\"/contact\">Contact</a>\n  </header>\n  <article>\n    {@render children()}\n  </article>\n</main>\n```\n\n----------------------------------------\n\nTITLE: Svelte 5 Error Page Component Implementation\nDESCRIPTION: Svelte 5 component implementing error pages using the new props() syntax, with predefined mappings for error titles and descriptions.\nSOURCE: https://github.com/inertiajs/inertia-rails/blob/master/docs/guide/error-handling.md#2025-04-21_snippet_4\n\nLANGUAGE: svelte\nCODE:\n```\n<script>\n  let { status } = $props()\n  const titles = {\n    503: '503: Service Unavailable',\n    500: '500: Server Error',\n    404: '404: Page Not Found',\n    403: '403: Forbidden',\n  }\n  const descriptions = {\n    503: 'Sorry, we are doing some maintenance. Please check back soon.',\n    500: 'Whoops, something went wrong on our servers.',\n    404: 'Sorry, the page you are looking for could not be found.',\n    403: 'Sorry, you are forbidden from accessing this page.',\n  }\n</script>\n\n<div>\n  <h1>{titles[status]}</h1>\n  <div>{description[status]}</div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: React Deferred Component Implementation\nDESCRIPTION: Demonstrates how to implement the Deferred component in React for handling deferred props loading states.\nSOURCE: https://github.com/inertiajs/inertia-rails/blob/master/docs/guide/deferred-props.md#2025-04-21_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Deferred } from '@inertiajs/react'\n\nexport default () => (\n  <Deferred data=\"permissions\" fallback={<div>Loading...</div>}>\n    <PermissionsChildComponent />\n  </Deferred>\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Form Errors in Inertia\nDESCRIPTION: Illustrates how to set custom form errors using the setError method in Vue, React, and Svelte frameworks.\nSOURCE: https://github.com/inertiajs/inertia-rails/blob/master/docs/guide/forms.md#2025-04-21_snippet_15\n\nLANGUAGE: js\nCODE:\n```\n// Vue\n// Set a single error...\nform.setError('field', 'Your error message.')\n\n// Set multiple errors at once...\nform.setError({\n  foo: 'Your error message for the foo field.',\n  bar: 'Some other error for the bar field.',\n})\n\n// React\nconst { setError } = useForm({ ... })\n\n// Set a single error...\nsetError('field', 'Your error message.');\n\n// Set multiple errors at once...\nsetError({\n  foo: 'Your error message for the foo field.',\n  bar: 'Some other error for the bar field.'\n});\n\n// Svelte 4|Svelte 5\n// Set a single error\n$form.setError('field', 'Your error message.')\n\n// Set multiple errors at once\n$form.setError({\n  foo: 'Your error message for the foo field.',\n  bar: 'Some other error for the bar field.',\n})\n```\n\n----------------------------------------\n\nTITLE: Handling 'start' Event in React with Inertia\nDESCRIPTION: Shows how to handle the 'start' event in React with Inertia, which fires when a request to the server has started.\nSOURCE: https://github.com/inertiajs/inertia-rails/blob/master/docs/guide/events.md#2025-04-21_snippet_26\n\nLANGUAGE: jsx\nCODE:\n```\nimport { router } from '@inertiajs/react'\n\nrouter.on('start', (event) => {\n  console.log(`Starting a visit to ${event.detail.visit.url}`)\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Partial Reloads with Only Option\nDESCRIPTION: Examples of performing partial reloads by specifying which props to include using the 'only' option across different frameworks.\nSOURCE: https://github.com/inertiajs/inertia-rails/blob/master/docs/guide/partial-reloads.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { router } from '@inertiajs/vue3'\n\nrouter.visit(url, {\n  only: ['users'],\n})\n```\n\nLANGUAGE: jsx\nCODE:\n```\nimport { router } from '@inertiajs/react'\n\nrouter.visit(url, {\n  only: ['users'],\n})\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport { router } from '@inertiajs/svelte'\n\nrouter.visit(url, {\n  only: ['users'],\n})\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Headers in Vue\nDESCRIPTION: Example of adding custom HTTP headers to a request in Vue. This allows you to send additional information with the request that may be required by the server.\nSOURCE: https://github.com/inertiajs/inertia-rails/blob/master/docs/guide/manual-visits.md#2025-04-21_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nimport { router } from '@inertiajs/vue3'\n\nrouter.post('/users', data, {\n  headers: {\n    'Custom-Header': 'value',\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Clearing Form Errors in Inertia\nDESCRIPTION: Shows how to clear form errors using the clearErrors method in Vue, React, and Svelte frameworks.\nSOURCE: https://github.com/inertiajs/inertia-rails/blob/master/docs/guide/forms.md#2025-04-21_snippet_14\n\nLANGUAGE: js\nCODE:\n```\n// Vue\n// Clear all errors...\nform.clearErrors()\n\n// Clear errors for specific fields...\nform.clearErrors('field', 'anotherfield')\n\n// React\nconst { clearErrors } = useForm({ ... })\n\n// Clear all errors...\nclearErrors()\n\n// Clear errors for specific fields...\nclearErrors('field', 'anotherfield')\n\n// Svelte 4|Svelte 5\n// Clear all errors...\n$form.clearErrors()\n\n// Clear errors for specific fields...\n$form.clearErrors('field', 'anotherfield')\n```\n\n----------------------------------------\n\nTITLE: Dynamic State Preservation in Inertia.js POST Requests\nDESCRIPTION: Demonstrates how to use a callback function to dynamically determine whether to preserve state in Inertia.js POST requests based on the response.\nSOURCE: https://github.com/inertiajs/inertia-rails/blob/master/docs/guide/manual-visits.md#2025-04-21_snippet_28\n\nLANGUAGE: javascript\nCODE:\n```\nimport { router } from '@inertiajs/vue3'\n\nrouter.post('/users', data, {\n  preserveState: (page) => page.props.someProp === 'value',\n})\n```\n\n----------------------------------------\n\nTITLE: Custom Head Component in Vue\nDESCRIPTION: Creating an extended AppHead component in Vue that automatically appends the app name to the page title.\nSOURCE: https://github.com/inertiajs/inertia-rails/blob/master/docs/guide/title-and-meta.md#2025-04-21_snippet_14\n\nLANGUAGE: vue\nCODE:\n```\n<!-- AppHead.vue -->\n<script setup>\nimport { Head } from '@inertiajs/vue3'\n\ndefineProps({ title: String })\n</script>\n\n<template>\n  <Head :title=\"title ? `${title} - My App` : 'My App'\">\n    <slot />\n  </Head>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Basic WhenVisible Implementation\nDESCRIPTION: Basic implementation of the WhenVisible component to load a single data prop when the element becomes visible. Includes a loading fallback state.\nSOURCE: https://github.com/inertiajs/inertia-rails/blob/master/docs/guide/load-when-visible.md#2025-04-21_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\nimport { WhenVisible } from '@inertiajs/vue3'\n</script>\n\n<template>\n  <WhenVisible data=\"permissions\">\n    <template #fallback>\n      <div>Loading...</div>\n    </template>\n    <div v-for=\"permission in permissions\">\n      <!-- ... -->\n    </div>\n  </WhenVisible>\n</template>\n```\n\nLANGUAGE: jsx\nCODE:\n```\nimport { WhenVisible } from '@inertiajs/react'\n\nexport default () => (\n  <WhenVisible data=\"permissions\" fallback={<div>Loading...</div>}>\n    <PermissionsChildComponent />\n  </WhenVisible>\n)\n```\n\nLANGUAGE: svelte\nCODE:\n```\n<script>\n  import { WhenVisible } from '@inertiajs/svelte'\n  export let permissions\n</script>\n\n<WhenVisible data=\"permissions\">\n  <svelte:fragment slot=\"fallback\">\n    <div>Loading...</div>\n  </svelte:fragment>\n\n  {#each permissions as permission}\n    <!-- ... -->\n  {/each}\n</WhenVisible>\n```\n\n----------------------------------------\n\nTITLE: Title Shorthand in Vue\nDESCRIPTION: Simplified way to set only the page title using the title prop with the Head component in Vue applications.\nSOURCE: https://github.com/inertiajs/inertia-rails/blob/master/docs/guide/title-and-meta.md#2025-04-21_snippet_3\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\nimport { Head } from '@inertiajs/vue3'\n</script>\n\n<template>\n  <Head title=\"Your page title\" />\n</template>\n```\n\n----------------------------------------\n\nTITLE: Setting Form Defaults in React with Inertia.js\nDESCRIPTION: Illustrates how to set and update form default values in React using Inertia.js. It covers setting current values as defaults and updating single or multiple fields.\nSOURCE: https://github.com/inertiajs/inertia-rails/blob/master/docs/guide/forms.md#2025-04-21_snippet_18\n\nLANGUAGE: jsx\nCODE:\n```\nconst { setDefaults } = useForm({ ... })\n\n// Set the form's current values as the new defaults...\nsetDefaults()\n\n// Update the default value of a single field...\nsetDefaults('email', 'updated-default@example.com')\n\n// Update the default value of multiple fields...\nsetDefaults({\n  name: 'Updated Example',\n  email: 'updated-default@example.com',\n})\n```\n\n----------------------------------------\n\nTITLE: Cancelling Events in Vue.js with Inertia\nDESCRIPTION: Demonstrates how to cancel an event in Vue.js with Inertia by using event.preventDefault() in the event listener.\nSOURCE: https://github.com/inertiajs/inertia-rails/blob/master/docs/guide/events.md#2025-04-21_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nimport { router } from '@inertiajs/vue3'\n\nrouter.on('before', (event) => {\n  if (!confirm('Are you sure you want to navigate away?')) {\n    event.preventDefault()\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Installing NProgress Package\nDESCRIPTION: Command to install the NProgress library via npm.\nSOURCE: https://github.com/inertiajs/inertia-rails/blob/master/docs/guide/progress-indicators.md#2025-04-21_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nnpm install nprogress\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Headers in React\nDESCRIPTION: Example of adding custom HTTP headers to a request in React. This allows you to send additional information with the request that may be required by the server.\nSOURCE: https://github.com/inertiajs/inertia-rails/blob/master/docs/guide/manual-visits.md#2025-04-21_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nimport { router } from '@inertiajs/react'\n\nrouter.post('/users', data, {\n  headers: {\n    'Custom-Header': 'value',\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Automatically Determining Inertia Component Name in Rails\nDESCRIPTION: Demonstrates how to use Rails conventions to automatically render the correct page component without specifying the component name.\nSOURCE: https://github.com/inertiajs/inertia-rails/blob/master/docs/guide/responses.md#2025-04-21_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\nclass EventsController < ApplicationController\n  use_inertia_instance_props\n\n  def index\n    @events = Event.all\n\n    render inertia: true\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Configuring Default Progress Indicator in Inertia.js\nDESCRIPTION: Configuration options for the default NProgress-based progress indicator in Inertia.js applications.\nSOURCE: https://github.com/inertiajs/inertia-rails/blob/master/docs/guide/progress-indicators.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ncreateInertiaApp({\n  progress: {\n    // The delay after which the progress bar will appear, in milliseconds...\n    delay: 250,\n\n    // The color of the progress bar...\n    color: '#29d',\n\n    // Whether to include the default NProgress styles...\n    includeCSS: true,\n\n    // Whether the NProgress spinner will be shown...\n    showSpinner: false,\n  },\n  // ...\n})\n```\n\n----------------------------------------\n\nTITLE: Defining Shorthand Inertia Route in Ruby on Rails\nDESCRIPTION: This snippet demonstrates how to define a shorthand route in Rails that directly maps to an Inertia component without a corresponding controller method.\nSOURCE: https://github.com/inertiajs/inertia-rails/blob/master/docs/guide/routing.md#2025-04-21_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\ninertia 'about' => 'AboutComponent'\n```\n\n----------------------------------------\n\nTITLE: Detecting Form Changes in React with Inertia.js\nDESCRIPTION: Shows how to detect unsaved form changes in React using the isDirty property from Inertia.js useForm hook.\nSOURCE: https://github.com/inertiajs/inertia-rails/blob/master/docs/guide/forms.md#2025-04-21_snippet_21\n\nLANGUAGE: jsx\nCODE:\n```\nconst { isDirty } = useForm({ ... })\n\n{isDirty && <div>There are unsaved form changes.</div>}\n```\n\n----------------------------------------\n\nTITLE: Handling 'progress' Event in Vue.js with Inertia\nDESCRIPTION: Demonstrates how to handle the 'progress' event in Vue.js with Inertia, which fires as progress increments during file uploads.\nSOURCE: https://github.com/inertiajs/inertia-rails/blob/master/docs/guide/events.md#2025-04-21_snippet_28\n\nLANGUAGE: javascript\nCODE:\n```\nimport { router } from '@inertiajs/vue3'\n\nrouter.on('progress', (event) => {\n  this.form.progress = event.detail.progress.percentage\n})\n```\n\n----------------------------------------\n\nTITLE: Creating Inertia Response in Ruby on Rails Controller\nDESCRIPTION: Demonstrates how to create an Inertia response in a Rails controller, rendering a specific page component with props.\nSOURCE: https://github.com/inertiajs/inertia-rails/blob/master/docs/guide/responses.md#2025-04-21_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nclass EventsController < ApplicationController\n  def show\n    event = Event.find(params[:id])\n\n    render inertia: 'Event/Show', props: {\n      event: event.as_json(\n        only: [:id, :title, :start_date, :description]\n      )\n    }\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Forcing FormData in Svelte for File Uploads\nDESCRIPTION: Example of using the forceFormData option in Svelte to ensure the request data is sent as a FormData object, which is necessary for file uploads.\nSOURCE: https://github.com/inertiajs/inertia-rails/blob/master/docs/guide/manual-visits.md#2025-04-21_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\nimport { router } from '@inertiajs/svelte'\n\nrouter.post('/companies', data, {\n  forceFormData: true,\n})\n```\n\n----------------------------------------\n\nTITLE: Preserving State in GET Requests with Inertia.js\nDESCRIPTION: Demonstrates how to preserve component state when making GET requests using Inertia.js router. This is useful for maintaining form data or scroll positions.\nSOURCE: https://github.com/inertiajs/inertia-rails/blob/master/docs/guide/manual-visits.md#2025-04-21_snippet_26\n\nLANGUAGE: javascript\nCODE:\n```\nimport { router } from '@inertiajs/vue3'\n\nrouter.get('/users', { search: 'John' }, { preserveState: true })\n```\n\n----------------------------------------\n\nTITLE: Handling 'progress' Event in React with Inertia\nDESCRIPTION: Shows how to handle the 'progress' event in React with Inertia, which fires as progress increments during file uploads.\nSOURCE: https://github.com/inertiajs/inertia-rails/blob/master/docs/guide/events.md#2025-04-21_snippet_29\n\nLANGUAGE: jsx\nCODE:\n```\nimport { router } from '@inertiajs/react'\n\nrouter.on('progress', (event) => {\n  this.form.progress = event.detail.progress.percentage\n})\n```\n\n----------------------------------------\n\nTITLE: Click-based Prefetching in React\nDESCRIPTION: Triggering prefetching on mousedown instead of hover in React. This starts the prefetch process when the user initiates a click rather than on hovering over the link.\nSOURCE: https://github.com/inertiajs/inertia-rails/blob/master/docs/guide/prefetching.md#2025-04-21_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Link } from '@inertiajs/react'\n\nexport default () => (\n  <Link href=\"/users\" prefetch=\"click\">\n    Users\n  </Link>\n)\n```\n\n----------------------------------------\n\nTITLE: Click-based Prefetching in Vue\nDESCRIPTION: Triggering prefetching on mousedown instead of hover in Vue. This starts the prefetch process when the user initiates a click rather than on hovering over the link.\nSOURCE: https://github.com/inertiajs/inertia-rails/blob/master/docs/guide/prefetching.md#2025-04-21_snippet_6\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\nimport { Link } from '@inertiajs/vue3'\n</script>\n\n<template>\n  <Link href=\"/users\" prefetch=\"click\">Users</Link>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Svelte 4 Deferred Component Implementation\nDESCRIPTION: Shows how to implement the Deferred component in Svelte 4 for handling deferred props loading states.\nSOURCE: https://github.com/inertiajs/inertia-rails/blob/master/docs/guide/deferred-props.md#2025-04-21_snippet_4\n\nLANGUAGE: svelte\nCODE:\n```\n<script>\n  import { Deferred } from '@inertiajs/svelte'\n  export let permissions\n</script>\n\n<Deferred data=\"permissions\">\n  <svelte:fragment slot=\"fallback\">\n    <div>Loading...</div>\n  </svelte:fragment>\n\n  {#each permissions as permission}\n    <!-- ... -->\n  {/each}\n</Deferred>\n```\n\n----------------------------------------\n\nTITLE: Accessing Shared Data in Svelte Component\nDESCRIPTION: Shows how to access shared data in a Svelte layout component using the page store from Inertia.js. The example displays user information that was shared from the server.\nSOURCE: https://github.com/inertiajs/inertia-rails/blob/master/docs/guide/shared-data.md#2025-04-21_snippet_4\n\nLANGUAGE: svelte\nCODE:\n```\n<script>\n  import { page } from '@inertiajs/svelte'\n</script>\n\n<main>\n  <header>\n    You are logged in as: {$page.props.auth.user.name}\n  </header>\n  <article>\n    <slot />\n  </article>\n</main>\n```\n\n----------------------------------------\n\nTITLE: Multiple Props Loading with WhenVisible\nDESCRIPTION: Loading multiple data props simultaneously when an element becomes visible in the viewport using an array of prop names.\nSOURCE: https://github.com/inertiajs/inertia-rails/blob/master/docs/guide/load-when-visible.md#2025-04-21_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\nimport { WhenVisible } from '@inertiajs/vue3'\n</script>\n\n<template>\n  <WhenVisible :data=\"['teams', 'users']\">\n    <template #fallback>\n      <div>Loading...</div>\n    </template>\n    <!-- Props are now loaded -->\n  </WhenVisible>\n</template>\n```\n\nLANGUAGE: jsx\nCODE:\n```\nimport { WhenVisible } from '@inertiajs/react'\n\nexport default () => (\n  <WhenVisible data={['teams', 'users']} fallback={<div>Loading...</div>}>\n    <ChildComponent />\n  </WhenVisible>\n)\n```\n\nLANGUAGE: svelte\nCODE:\n```\n<script>\n  import { WhenVisible } from '@inertiajs/svelte'\n\n  export let teams\n  export let users\n</script>\n\n<WhenVisible data={['teams', 'users']}>\n  <svelte:fragment slot=\"fallback\">\n    <div>Loading...</div>\n  </svelte:fragment>\n\n  <!-- Props are now loaded -->\n</WhenVisible>\n```\n\n----------------------------------------\n\nTITLE: Forcing FormData in React for File Uploads\nDESCRIPTION: Example of using the forceFormData option in React to ensure the request data is sent as a FormData object, which is necessary for file uploads.\nSOURCE: https://github.com/inertiajs/inertia-rails/blob/master/docs/guide/manual-visits.md#2025-04-21_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\nimport { router } from '@inertiajs/react'\n\nrouter.post('/companies', data, {\n  forceFormData: true,\n})\n```\n\n----------------------------------------\n\nTITLE: Using Prefetch Helper in Vue\nDESCRIPTION: Using the usePrefetch helper in Vue to get additional insights into the prefetch state. This provides information about when the data was last updated and whether prefetching is in progress.\nSOURCE: https://github.com/inertiajs/inertia-rails/blob/master/docs/guide/prefetching.md#2025-04-21_snippet_16\n\nLANGUAGE: js\nCODE:\n```\nimport { usePrefetch } from '@inertiajs/vue3'\n\nconst { lastUpdatedAt, isPrefetching, isPrefetched } = usePrefetch(\n  '/users',\n  { method: 'get', data: { page: 2 } },\n  { cacheFor: '1m' },\n)\n```\n\n----------------------------------------\n\nTITLE: Cancelling Events in React with Inertia\nDESCRIPTION: Shows how to cancel an event in React with Inertia by using event.preventDefault() in the event listener.\nSOURCE: https://github.com/inertiajs/inertia-rails/blob/master/docs/guide/events.md#2025-04-21_snippet_17\n\nLANGUAGE: jsx\nCODE:\n```\nimport { router } from '@inertiajs/react'\n\nrouter.on('before', (event) => {\n  if (!confirm('Are you sure you want to navigate away?')) {\n    event.preventDefault()\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Clearing History State in Ruby\nDESCRIPTION: Demonstrates how to clear the history state by passing the clear_history option to the render method, which rotates the encryption key and makes previous history state unreadable.\nSOURCE: https://github.com/inertiajs/inertia-rails/blob/master/docs/guide/history-encryption.md#2025-04-21_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\nrender inertia: 'Dashboard', props: {}, clear_history: true\n```\n\n----------------------------------------\n\nTITLE: Basic Polling Implementation\nDESCRIPTION: Basic setup of polling functionality with a specified interval in milliseconds across different frameworks.\nSOURCE: https://github.com/inertiajs/inertia-rails/blob/master/docs/guide/polling.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { usePoll } from '@inertiajs/vue3'\nusePoll(2000)\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport { usePoll } from '@inertiajs/react'\nusePoll(2000)\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport { usePoll } from '@inertiajs/svelte'\nusePoll(2000)\n```\n\n----------------------------------------\n\nTITLE: Displaying Flash Messages in React Layout\nDESCRIPTION: Demonstrates how to display flash messages in a React layout component by accessing them from the shared props. The example handles both alert and notice types of flash messages.\nSOURCE: https://github.com/inertiajs/inertia-rails/blob/master/docs/guide/shared-data.md#2025-04-21_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\nimport { usePage } from '@inertiajs/react'\n\nexport default function Layout({ children }) {\n  const { flash } = usePage().props\n\n  return (\n    <main>\n      <header></header>\n      <article>\n        {flash.alert && <div className=\"alert\">{flash.alert}</div>}\n        {flash.notice && <div className=\"notice\">{flash.notice}</div>}\n        {children}\n      </article>\n      <footer></footer>\n    </main>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing and Submitting Inertia Form in Svelte 4\nDESCRIPTION: Illustrates how to set up and submit a form using Inertia's form helper in Svelte 4. Includes form binding, error handling, and submission.\nSOURCE: https://github.com/inertiajs/inertia-rails/blob/master/docs/guide/forms.md#2025-04-21_snippet_7\n\nLANGUAGE: svelte\nCODE:\n```\n<script>\n  import { useForm } from '@inertiajs/svelte'\n\n  const form = useForm({\n    email: null,\n    password: null,\n    remember: false,\n  })\n\n  function submit() {\n    $form.post('/login')\n  }\n</script>\n\n<form on:submit|preventDefault={submit}>\n  <input type=\"text\" bind:value={$form.email} />\n  {#if $form.errors.email}\n    <div class=\"form-error\">{$form.errors.email}</div>\n  {/if}\n  <input type=\"password\" bind:value={$form.password} />\n  {#if $form.errors.password}\n    <div class=\"form-error\">{$form.errors.password}</div>\n  {/if}\n  <input type=\"checkbox\" bind:checked={$form.remember} /> Remember Me\n  <button type=\"submit\" disabled={$form.processing}>Submit</button>\n</form>\n```\n\n----------------------------------------\n\nTITLE: Handling Error Event in Inertia.js\nDESCRIPTION: Demonstrates how to listen for and handle the 'error' event in Inertia.js, which fires when validation errors are present on successful page visits. The event provides access to the errors object.\nSOURCE: https://github.com/inertiajs/inertia-rails/blob/master/docs/guide/events.md#2025-04-21_snippet_34\n\nLANGUAGE: javascript\nCODE:\n```\nimport { router } from '@inertiajs/vue3'\n\nrouter.on('error', (errors) => {\n  console.log(errors)\n})\n```\n\nLANGUAGE: jsx\nCODE:\n```\nimport { router } from '@inertiajs/react'\n\nrouter.on('error', (errors) => {\n  console.log(errors)\n})\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport { router } from '@inertiajs/svelte'\n\nrouter.on('error', (errors) => {\n  console.log(errors)\n})\n```\n\n----------------------------------------\n\nTITLE: Cancelling Exception Event in Inertia.js\nDESCRIPTION: Demonstrates how to cancel the 'exception' event in Inertia.js to prevent the error from being thrown. This allows custom handling of unexpected errors during Inertia visits.\nSOURCE: https://github.com/inertiajs/inertia-rails/blob/master/docs/guide/events.md#2025-04-21_snippet_38\n\nLANGUAGE: javascript\nCODE:\n```\nimport { router } from '@inertiajs/vue3'\n\nrouter.on('exception', (event) => {\n  event.preventDefault()\n  // Handle the error yourself\n})\n```\n\nLANGUAGE: jsx\nCODE:\n```\nimport { router } from '@inertiajs/react'\n\nrouter.on('exception', (event) => {\n  event.preventDefault()\n  // Handle the error yourself\n})\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport { router } from '@inertiajs/svelte'\n\nrouter.on('exception', (event) => {\n  event.preventDefault()\n  // Handle the error yourself\n})\n```\n\n----------------------------------------\n\nTITLE: Cancelling Events in Svelte with Inertia\nDESCRIPTION: Illustrates how to cancel an event in Svelte with Inertia by using event.preventDefault() in the event listener.\nSOURCE: https://github.com/inertiajs/inertia-rails/blob/master/docs/guide/events.md#2025-04-21_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\nimport { router } from '@inertiajs/svelte'\n\nrouter.on('before', (event) => {\n  if (!confirm('Are you sure you want to navigate away?')) {\n    event.preventDefault()\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Removing Native Browser Event Listeners in React with Inertia\nDESCRIPTION: Shows how to remove a native browser event listener in React with Inertia using removeEventListener().\nSOURCE: https://github.com/inertiajs/inertia-rails/blob/master/docs/guide/events.md#2025-04-21_snippet_14\n\nLANGUAGE: jsx\nCODE:\n```\nimport { router } from '@inertiajs/react'\n\nlet startEventListener = (event) => {\n  console.log(`Starting a visit to ${event.detail.visit.url}`)\n}\n\ndocument.addEventListener('inertia:start', startEventListener)\n\n// Remove the listener...\ndocument.removeEventListener('inertia:start', startEventListener)\n```\n\n----------------------------------------\n\nTITLE: Handling 'progress' Event in Svelte with Inertia\nDESCRIPTION: Illustrates how to handle the 'progress' event in Svelte with Inertia, which fires as progress increments during file uploads.\nSOURCE: https://github.com/inertiajs/inertia-rails/blob/master/docs/guide/events.md#2025-04-21_snippet_30\n\nLANGUAGE: javascript\nCODE:\n```\nimport { router } from '@inertiajs/svelte'\n\nrouter.on('progress', (event) => {\n  this.form.progress = event.detail.progress.percentage\n})\n```\n\n----------------------------------------\n\nTITLE: Overriding Deep Merge Default in Controller Action\nDESCRIPTION: Demonstrates how to override the default deep merging behavior for a specific controller action by setting the deep_merge option to false, resulting in a shallow merge instead.\nSOURCE: https://github.com/inertiajs/inertia-rails/blob/master/docs/guide/shared-data.md#2025-04-21_snippet_11\n\nLANGUAGE: ruby\nCODE:\n```\nclass CrazyScorersController < ApplicationController\n  inertia_share do\n    {\n      basketball_data: {\n        points: 50,\n        rebounds: 10,\n      }\n    }\n  end\n\n  def index\n    render inertia: 'CrazyScorersComponent',\n      props: { basketball_data: { points: 100 } },\n      deep_merge: false\n  end\nend\n\n# Even if deep merging is set by default, since the renderer has `deep_merge: false`, it will send a shallow merge to the frontend:\n{\n  basketball_data: {\n    points: 100,\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying Flash Messages in Svelte Layout\nDESCRIPTION: Shows how to display flash messages in a Svelte layout component by accessing them from the shared props. The example handles both alert and notice types of flash messages.\nSOURCE: https://github.com/inertiajs/inertia-rails/blob/master/docs/guide/shared-data.md#2025-04-21_snippet_8\n\nLANGUAGE: svelte\nCODE:\n```\n<script>\n  import { page } from '@inertiajs/svelte'\n</script>\n\n<main>\n  <header></header>\n  <article>\n    {#if $page.props.flash.alert}\n      <div class=\"alert\">{$page.props.flash.alert}</div>\n    {/if}\n    {#if $page.props.flash.notice}\n      <div class=\"notice\">{$page.props.flash.notice}</div>\n    {/if}\n    <slot />\n  </article>\n  <footer></footer>\n</main>\n```\n\n----------------------------------------\n\nTITLE: Using Prefetch Helper in React\nDESCRIPTION: Using the usePrefetch helper in React to get additional insights into the prefetch state. This provides information about when the data was last updated and whether prefetching is in progress.\nSOURCE: https://github.com/inertiajs/inertia-rails/blob/master/docs/guide/prefetching.md#2025-04-21_snippet_17\n\nLANGUAGE: js\nCODE:\n```\nimport { usePrefetch } from '@inertiajs/react'\n\nconst { lastUpdatedAt, isPrefetching, isPrefetched } = usePrefetch(\n  '/users',\n  { method: 'get', data: { page: 2 } },\n  { cacheFor: '1m' },\n)\n```\n\n----------------------------------------\n\nTITLE: Polling with Request Options\nDESCRIPTION: Implementation of polling with additional request options including start and finish callbacks.\nSOURCE: https://github.com/inertiajs/inertia-rails/blob/master/docs/guide/polling.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { usePoll } from '@inertiajs/vue3'\n\nusePoll(2000, {\n  onStart() {\n    console.log('Polling request started')\n  },\n  onFinish() {\n    console.log('Polling request finished')\n  },\n})\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport { usePoll } from '@inertiajs/react'\n\nusePoll(2000, {\n  onStart() {\n    console.log('Polling request started')\n  },\n  onFinish() {\n    console.log('Polling request finished')\n  },\n})\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport { usePoll } from '@inertiajs/svelte'\n\nusePoll(2000, {\n  onStart() {\n    console.log('Polling request started')\n  },\n  onFinish() {\n    console.log('Polling request finished')\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Updating React Initialization for Client-side Hydration in Inertia.js\nDESCRIPTION: JavaScript code changes to enable client-side hydration for React in an Inertia.js application. This updates the initialization file to use hydrateRoot instead of createRoot.\nSOURCE: https://github.com/inertiajs/inertia-rails/blob/master/docs/guide/server-side-rendering.md#2025-04-21_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createInertiaApp } from '@inertiajs/react'\nimport { hydrateRoot } from 'react-dom/client'\n\ncreateInertiaApp({\n  resolve: (name) => {\n    const pages = import.meta.glob('../pages/**/*.jsx', { eager: true })\n    return pages[`../pages/${name}.jsx`]\n  },\n  setup({ el, App, props }) {\n    hydrateRoot(el, <App {...props} />)\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Replacing Browser History in React\nDESCRIPTION: Example of using the replace option in React to replace the current browser history entry instead of adding a new one. This is useful for maintaining clean navigation history.\nSOURCE: https://github.com/inertiajs/inertia-rails/blob/master/docs/guide/manual-visits.md#2025-04-21_snippet_22\n\nLANGUAGE: javascript\nCODE:\n```\nimport { router } from '@inertiajs/react'\n\nrouter.get('/users', { search: 'John' }, { replace: true })\n```\n\n----------------------------------------\n\nTITLE: Replacing Browser History in Vue\nDESCRIPTION: Example of using the replace option in Vue to replace the current browser history entry instead of adding a new one. This is useful for maintaining clean navigation history.\nSOURCE: https://github.com/inertiajs/inertia-rails/blob/master/docs/guide/manual-visits.md#2025-04-21_snippet_21\n\nLANGUAGE: javascript\nCODE:\n```\nimport { router } from '@inertiajs/vue3'\n\nrouter.get('/users', { search: 'John' }, { replace: true })\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Headers in Svelte\nDESCRIPTION: Example of adding custom HTTP headers to a request in Svelte. This allows you to send additional information with the request that may be required by the server.\nSOURCE: https://github.com/inertiajs/inertia-rails/blob/master/docs/guide/manual-visits.md#2025-04-21_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\nimport { router } from '@inertiajs/svelte'\n\nrouter.post('/users', data, {\n  headers: {\n    'Custom-Header': 'value',\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Disabling Default Progress Indicator\nDESCRIPTION: Code to disable the default progress indicator in Inertia.js.\nSOURCE: https://github.com/inertiajs/inertia-rails/blob/master/docs/guide/progress-indicators.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\ncreateInertiaApp({\n  progress: false,\n  // ...\n})\n```\n\n----------------------------------------\n\nTITLE: Enabling SSR in Inertia Rails Adapter\nDESCRIPTION: Ruby code to enable SSR in the Inertia Rails adapter configuration. This sets the SSR enabled flag based on the Vite Ruby configuration.\nSOURCE: https://github.com/inertiajs/inertia-rails/blob/master/docs/guide/server-side-rendering.md#2025-04-21_snippet_7\n\nLANGUAGE: ruby\nCODE:\n```\nInertiaRails.configure do |config|\n  config.ssr_enabled = ViteRuby.config.ssr_build_enabled\nend\n```\n\n----------------------------------------\n\nTITLE: Forcing FormData Conversion in Inertia Requests\nDESCRIPTION: Examples of forcing FormData conversion in Inertia requests across different frameworks using the forceFormData option.\nSOURCE: https://github.com/inertiajs/inertia-rails/blob/master/docs/guide/file-uploads.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nrouter.post('/users', data, {\n  forceFormData: true,\n})\n```\n\n----------------------------------------\n\nTITLE: Sharing Flash Messages in Application Controller\nDESCRIPTION: Shows how to share flash messages with every request by using inertia_share in the base application controller, converting Rails flash messages to a hash that can be used in frontend components.\nSOURCE: https://github.com/inertiajs/inertia-rails/blob/master/docs/guide/shared-data.md#2025-04-21_snippet_5\n\nLANGUAGE: ruby\nCODE:\n```\nclass ApplicationController < ActionController::Base\n  inertia_share flash: -> { flash.to_hash }\nend\n```\n\n----------------------------------------\n\nTITLE: Creating SSR Entry Point for React in Inertia.js Rails Project\nDESCRIPTION: JavaScript code for the SSR entry point file (app/frontend/ssr/ssr.js) using React and Inertia.js. This sets up the server-side rendering configuration for React components.\nSOURCE: https://github.com/inertiajs/inertia-rails/blob/master/docs/guide/server-side-rendering.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createInertiaApp } from '@inertiajs/react'\nimport createServer from '@inertiajs/react/server'\nimport ReactDOMServer from 'react-dom/server'\n\ncreateServer((page) =>\n  createInertiaApp({\n    page,\n    render: ReactDOMServer.renderToString,\n    resolve: (name) => {\n      const pages = import.meta.glob('../pages/**/*.jsx', { eager: true })\n      return pages[`../pages/${name}.jsx`]\n    },\n    setup: ({ App, props }) => <App {...props} />,\n  }),\n)\n```\n\n----------------------------------------\n\nTITLE: Checking Form Changes in Svelte with Inertia.js\nDESCRIPTION: Illustrates how to check for unsaved form changes in Svelte using the isDirty property provided by Inertia.js form store.\nSOURCE: https://github.com/inertiajs/inertia-rails/blob/master/docs/guide/forms.md#2025-04-21_snippet_22\n\nLANGUAGE: svelte\nCODE:\n```\n{#if $form.isDirty}\n  <div>There are unsaved form changes.</div>\n{/if}\n```\n\n----------------------------------------\n\nTITLE: Error-Based Scroll Preservation in Svelte\nDESCRIPTION: Configuration for preserving scroll position on validation errors in Svelte.\nSOURCE: https://github.com/inertiajs/inertia-rails/blob/master/docs/guide/scroll-management.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport { router } from '@inertiajs/svelte'\n\nrouter.visit(url, { preserveScroll: 'errors' })\n```\n\n----------------------------------------\n\nTITLE: Configuring Visit Options for Progress Indicator\nDESCRIPTION: Examples of using visit options to control progress indicator visibility and async requests.\nSOURCE: https://github.com/inertiajs/inertia-rails/blob/master/docs/guide/progress-indicators.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nrouter.get('/settings', {}, { showProgress: false })\n\n// Disable the progress indicator\nrouter.get('/settings', {}, { async: true })\n// Enable the progress indicator with async requests\nrouter.get('/settings', {}, { async: true, showProgress: true })\n```\n\n----------------------------------------\n\nTITLE: Setting Up Inertia Tests in RSpec\nDESCRIPTION: This example demonstrates how to set up an RSpec test block with the :inertia flag, enabling the use of Inertia-specific test helpers for examining responses.\nSOURCE: https://github.com/inertiajs/inertia-rails/blob/master/docs/guide/testing.md#2025-04-21_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\n# spec/requests/events_spec.rb\nRSpec.describe \"/events\", inertia: true do\n  describe '#index' do\n    # ...\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Conditional Scroll Preservation in Inertia.js Requests\nDESCRIPTION: Demonstrates how to conditionally preserve scroll position in Inertia.js requests. This example preserves scroll only if validation errors are present.\nSOURCE: https://github.com/inertiajs/inertia-rails/blob/master/docs/guide/manual-visits.md#2025-04-21_snippet_30\n\nLANGUAGE: javascript\nCODE:\n```\nimport { router } from '@inertiajs/vue3'\n\nrouter.visit(url, { preserveScroll: 'errors' })\n```\n\n----------------------------------------\n\nTITLE: Creating an Inertia Page Component in Svelte 5\nDESCRIPTION: Demonstrates the structure of an Inertia page component in Svelte 5, including prop handling with $props() and layout usage.\nSOURCE: https://github.com/inertiajs/inertia-rails/blob/master/docs/guide/pages.md#2025-04-21_snippet_3\n\nLANGUAGE: svelte\nCODE:\n```\n<script>\n  import Layout from './Layout.svelte'\n\n  let { user } = $props()\n</script>\n\n<svelte:head>\n  <title>Welcome</title>\n</svelte:head>\n\n<Layout>\n  <h1>Welcome</h1>\n  <p>Hello {user.name}, welcome to your first Inertia app!</p>\n</Layout>\n```\n\n----------------------------------------\n\nTITLE: Automatic Event Listener Removal in Svelte 5 with Inertia\nDESCRIPTION: Shows how to automatically remove an event listener when a component unmounts in Svelte 5 with Inertia using the $effect function.\nSOURCE: https://github.com/inertiajs/inertia-rails/blob/master/docs/guide/events.md#2025-04-21_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nimport { router } from '@inertiajs/svelte'\n\n$effect(() => {\n  return router.on('start', (event) => {\n    console.log(`Starting a visit to ${event.detail.visit.url}`)\n  })\n})\n```\n\n----------------------------------------\n\nTITLE: Mount-based Prefetching in React\nDESCRIPTION: Prefetching data immediately when a component mounts in React. This is useful when there's high confidence that a user will visit the linked page next.\nSOURCE: https://github.com/inertiajs/inertia-rails/blob/master/docs/guide/prefetching.md#2025-04-21_snippet_10\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Link } from '@inertiajs/react'\n\nexport default () => (\n  <Link href=\"/users\" prefetch=\"mount\">\n    Users\n  </Link>\n)\n```\n\n----------------------------------------\n\nTITLE: Enabling Code Splitting with Webpacker in Vue\nDESCRIPTION: Modifies the createInertiaApp resolve callback to use dynamic imports instead of require statements in Vue applications using Webpacker/Shakapacker.\nSOURCE: https://github.com/inertiajs/inertia-rails/blob/master/docs/guide/code-splitting.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n// javascript/packs/inertia.js\ncreateInertiaApp({\n  resolve: (name) => require(`../pages/${name}`), // [!code ii]\n  resolve: (name) => import(`../pages/${name}`), // [!code ++]\n  //...\n})\n```\n\n----------------------------------------\n\nTITLE: Customizing Cache Duration in Vue\nDESCRIPTION: Setting custom cache durations for prefetched data in Vue. The data can be cached for a specific time period (e.g., 1 minute, 10 seconds, or 5000 milliseconds) before being evicted.\nSOURCE: https://github.com/inertiajs/inertia-rails/blob/master/docs/guide/prefetching.md#2025-04-21_snippet_3\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\nimport { Link } from '@inertiajs/vue3'\n</script>\n\n<template>\n  <Link href=\"/users\" prefetch cache-for=\"1m\">Users</Link>\n  <Link href=\"/users\" prefetch cache-for=\"10s\">Users</Link>\n  <Link href=\"/users\" prefetch :cache-for=\"5000\">Users</Link>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Configuring Inertia Rails Locally in Ruby Controller\nDESCRIPTION: This code snippet shows how to override global Inertia Rails settings in a specific controller using the inertia_config method. It demonstrates setting a custom version and conditional server-side rendering.\nSOURCE: https://github.com/inertiajs/inertia-rails/blob/master/docs/guide/configuration.md#2025-04-21_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\nclass EventsController < ApplicationController\n  inertia_config(\n    version: \"events-#{InertiaRails.configuration.version}\",\n    ssr_enabled: -> { action_name == \"index\" },\n  )\nend\n```\n\n----------------------------------------\n\nTITLE: Handling 'start' Event in Vue.js with Inertia\nDESCRIPTION: Demonstrates how to handle the 'start' event in Vue.js with Inertia, which fires when a request to the server has started.\nSOURCE: https://github.com/inertiajs/inertia-rails/blob/master/docs/guide/events.md#2025-04-21_snippet_25\n\nLANGUAGE: javascript\nCODE:\n```\nimport { router } from '@inertiajs/vue3'\n\nrouter.on('start', (event) => {\n  console.log(`Starting a visit to ${event.detail.visit.url}`)\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Persistent Layouts in Svelte 4\nDESCRIPTION: Shows how to set up persistent layouts in Svelte 4 using the layout export, enabling state preservation between page transitions.\nSOURCE: https://github.com/inertiajs/inertia-rails/blob/master/docs/guide/pages.md#2025-04-21_snippet_11\n\nLANGUAGE: svelte\nCODE:\n```\n<script context=\"module\">\n  export { default as layout } from './Layout.svelte'\n</script>\n\n<script>\n  export let user\n</script>\n\n<h1>Welcome</h1>\n\n<p>Hello {user.name}, welcome to your first Inertia app!</p>\n```\n\n----------------------------------------\n\nTITLE: Setting HTTP Method in Vue\nDESCRIPTION: Example of specifying the HTTP method when making manual visits in Vue. The method option can be set to get, post, put, patch, or delete.\nSOURCE: https://github.com/inertiajs/inertia-rails/blob/master/docs/guide/manual-visits.md#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport { router } from '@inertiajs/vue3'\n\nrouter.visit(url, { method: 'post' })\n```\n\n----------------------------------------\n\nTITLE: Custom Head Component in React\nDESCRIPTION: Creating an extended AppHead component in React that automatically appends the app name to the page title.\nSOURCE: https://github.com/inertiajs/inertia-rails/blob/master/docs/guide/title-and-meta.md#2025-04-21_snippet_15\n\nLANGUAGE: jsx\nCODE:\n```\n// AppHead.jsx\nimport { Head } from '@inertiajs/react'\n\nexport default ({ title, children }) => {\n  return (\n    <Head>\n      <title>{title ? `${title} - My App` : 'My App'}</title>\n      {children}\n    </Head>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Using Prefetch Helper in Svelte\nDESCRIPTION: Using the usePrefetch helper in Svelte to get additional insights into the prefetch state. This provides information about when the data was last updated and whether prefetching is in progress.\nSOURCE: https://github.com/inertiajs/inertia-rails/blob/master/docs/guide/prefetching.md#2025-04-21_snippet_18\n\nLANGUAGE: js\nCODE:\n```\nimport { usePrefetch } from '@inertiajs/svelte'\n\nconst { lastUpdatedAt, isPrefetching, isPrefetched } = usePrefetch(\n  '/users',\n  { method: 'get', data: { page: 2 } },\n  { cacheFor: '1m' },\n)\n```\n\n----------------------------------------\n\nTITLE: Combined Prefetching Strategies in Svelte\nDESCRIPTION: Using multiple prefetching strategies simultaneously in Svelte by passing an array of values. This combines different trigger methods (mount and hover) for more aggressive prefetching.\nSOURCE: https://github.com/inertiajs/inertia-rails/blob/master/docs/guide/prefetching.md#2025-04-21_snippet_14\n\nLANGUAGE: svelte\nCODE:\n```\n<script>\n  import { inertia } from '@inertiajs/svelte'\n</script>\n\n<a href=\"/users\" use:inertia={{ prefetch: ['mount', 'hover'] }}>Users</a>\n```\n\n----------------------------------------\n\nTITLE: Initializing Inertia with Svelte 5\nDESCRIPTION: Setup code for initializing an Inertia.js application with Svelte 5, using the new mount API.\nSOURCE: https://github.com/inertiajs/inertia-rails/blob/master/docs/guide/client-side-setup.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createInertiaApp } from '@inertiajs/svelte'\nimport { mount } from 'svelte'\n\ncreateInertiaApp({\n  resolve: (name) => {\n    const pages = import.meta.glob('./Pages/**/*.svelte', { eager: true })\n    return pages[`./Pages/${name}.svelte`]\n  },\n  setup({ el, App, props }) {\n    mount(App, { target: el, props })\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Multiple Deferred Props in Vue\nDESCRIPTION: Demonstrates handling multiple deferred props simultaneously in Vue component.\nSOURCE: https://github.com/inertiajs/inertia-rails/blob/master/docs/guide/deferred-props.md#2025-04-21_snippet_5\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\nimport { Deferred } from '@inertiajs/vue3'\n</script>\n\n<template>\n  <Deferred :data=\"['teams', 'users']\">\n    <template #fallback>\n      <div>Loading...</div>\n    </template>\n    <!-- Props are now loaded -->\n  </Deferred>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Setting Default Layout in Inertia.js with Svelte\nDESCRIPTION: This snippet illustrates how to set a default layout for all pages in an Inertia.js application using Svelte. It imports a Layout component and applies it to all pages that don't have a specific layout defined, returning both the page and layout.\nSOURCE: https://github.com/inertiajs/inertia-rails/blob/master/docs/guide/pages.md#2025-04-21_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\n// frontend/entrypoints/inertia.js\nimport Layout from '../Layout'\n\ncreateInertiaApp({\n  resolve: (name) => {\n    const pages = import.meta.glob('../pages/**/*.svelte', { eager: true })\n    let page = pages[`../pages/${name}.svelte`]\n    return { default: page.default, layout: page.layout || Layout }\n  },\n  // ...\n})\n```\n\n----------------------------------------\n\nTITLE: Adding Data to Requests in Vue\nDESCRIPTION: Example of adding data to a request using the data option in Vue. This is used to send information to the server with the request.\nSOURCE: https://github.com/inertiajs/inertia-rails/blob/master/docs/guide/manual-visits.md#2025-04-21_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nimport { router } from '@inertiajs/vue3'\n\nrouter.visit('/users', {\n  method: 'post',\n  data: {\n    name: 'John Doe',\n    email: 'john.doe@example.com',\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Title Callback with Head in React\nDESCRIPTION: Example of how the title callback applies when using the Head component with the title prop in React applications.\nSOURCE: https://github.com/inertiajs/inertia-rails/blob/master/docs/guide/title-and-meta.md#2025-04-21_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Head } from '@inertiajs/react'\n\nexport default () => <Head title=\"Home\" />\n```\n\n----------------------------------------\n\nTITLE: Title Callback with Title Tag in React\nDESCRIPTION: Example of how the title callback applies when using the title tag within the Head component in React applications.\nSOURCE: https://github.com/inertiajs/inertia-rails/blob/master/docs/guide/title-and-meta.md#2025-04-21_snippet_10\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Head } from '@inertiajs/react'\n\nexport default () => (\n  <Head>\n    <title>Home</title>\n  </Head>\n)\n```\n\n----------------------------------------\n\nTITLE: Flushing Prefetch Cache\nDESCRIPTION: Methods for clearing the prefetch cache either globally or for specific pages. This allows developers to control when cached data should be invalidated.\nSOURCE: https://github.com/inertiajs/inertia-rails/blob/master/docs/guide/prefetching.md#2025-04-21_snippet_19\n\nLANGUAGE: js\nCODE:\n```\n// Flush all prefetch cache\nrouter.flushAll()\n\n// Flush cache for a specific page\nrouter.flush('/users', { method: 'get', data: { page: 2 } })\n\n// Flush cache for a specific page\nconst { flush } = usePrefetch('/users', { method: 'get', data: { page: 2 } })\nflush()\n```\n\n----------------------------------------\n\nTITLE: Component Resolution Configuration\nDESCRIPTION: Examples of component resolution configuration for different frameworks and bundlers (Vite and Webpack/Shakapacker).\nSOURCE: https://github.com/inertiajs/inertia-rails/blob/master/docs/guide/client-side-setup.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\ncreateInertiaApp({\n  id: 'my-app',\n  // ...\n})\n```\n\n----------------------------------------\n\nTITLE: Resetting Props in JavaScript for Inertia\nDESCRIPTION: These JavaScript snippets show how to reset props on the client-side using the `reset` option in the `router.reload()` method. Examples are provided for Vue, React, and Svelte frameworks.\nSOURCE: https://github.com/inertiajs/inertia-rails/blob/master/docs/guide/merging-props.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { router } from '@inertiajs/vue3'\n\nrouter.reload({ reset: ['users'] })\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport { router } from '@inertiajs/react'\n\nrouter.reload({ reset: ['users'] })\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport { router } from '@inertiajs/svelte'\n\nrouter.reload({ reset: ['users'] })\n```\n\n----------------------------------------\n\nTITLE: Setting Default Layout in Inertia.js with React\nDESCRIPTION: This code demonstrates how to set a default layout for all pages in an Inertia.js application using React. It imports a Layout component and applies it as a wrapper to all pages that don't have a specific layout defined.\nSOURCE: https://github.com/inertiajs/inertia-rails/blob/master/docs/guide/pages.md#2025-04-21_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\n// frontend/entrypoints/inertia.js\nimport Layout from '../Layout'\n\ncreateInertiaApp({\n  resolve: (name) => {\n    const pages = import.meta.glob('../pages/**/*.jsx', { eager: true })\n    let page = pages[`../pages/${name}.jsx`]\n    page.default.layout =\n      page.default.layout || ((page) => <Layout children={page} />)\n    return page\n  },\n  // ...\n})\n```\n\n----------------------------------------\n\nTITLE: Accessing View Data in Inertia Root Template\nDESCRIPTION: Shows how to access view data passed to the root template in an ERB file.\nSOURCE: https://github.com/inertiajs/inertia-rails/blob/master/docs/guide/responses.md#2025-04-21_snippet_7\n\nLANGUAGE: erb\nCODE:\n```\n<% content_for(:head) do %>\n<meta\n  name=\"description\"\n  content=\"<%= local_assigns.fetch(:meta, \"Default description\") %>\">\n<% end %>\n\n<div id=\"app\" data-page=\"<%= page.to_json %>\"></div>\n```\n\n----------------------------------------\n\nTITLE: Using Native Browser Events with Inertia in Vue.js\nDESCRIPTION: Demonstrates how to use native browser events with Inertia in Vue.js. The example shows listening for the 'inertia:start' event using addEventListener.\nSOURCE: https://github.com/inertiajs/inertia-rails/blob/master/docs/guide/events.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { router } from '@inertiajs/vue3'\n\ndocument.addEventListener('inertia:start', (event) => {\n  console.log(`Starting a visit to ${event.detail.visit.url}`)\n})\n```\n\n----------------------------------------\n\nTITLE: Custom Wrapper Element with WhenVisible\nDESCRIPTION: Customizing the wrapper element of the WhenVisible component using the 'as' prop to specify the HTML element type.\nSOURCE: https://github.com/inertiajs/inertia-rails/blob/master/docs/guide/load-when-visible.md#2025-04-21_snippet_3\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\nimport { WhenVisible } from '@inertiajs/vue3'\n</script>\n\n<template>\n  <WhenVisible data=\"products\" as=\"span\">\n    <!-- ... -->\n  </WhenVisible>\n</template>\n```\n\nLANGUAGE: jsx\nCODE:\n```\nimport { WhenVisible } from '@inertiajs/react'\n\nexport default () => (\n  <WhenVisible data=\"products\" as=\"span\">\n    <ProductsChildComponent />\n  </WhenVisible>\n)\n```\n\nLANGUAGE: svelte\nCODE:\n```\n<script>\n  import { WhenVisible } from '@inertiajs/svelte'\n\n  export let products\n</script>\n\n<WhenVisible data=\"products\" as=\"span\">\n  <!-- ... -->\n</WhenVisible>\n```\n\n----------------------------------------\n\nTITLE: Optional and Always Props in Controllers\nDESCRIPTION: Examples of using InertiaRails.optional and InertiaRails.always methods for controlling prop inclusion in partial reloads.\nSOURCE: https://github.com/inertiajs/inertia-rails/blob/master/docs/guide/partial-reloads.md#2025-04-21_snippet_6\n\nLANGUAGE: ruby\nCODE:\n```\nclass UsersController < ApplicationController\n  def index\n    render inertia: 'Users/Index', props: {\n      users: User.all,\n      users: -> { User.all },\n      users: InertiaRails.optional { User.all },\n      users: InertiaRails.always { User.all },\n    }\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Multiple Deferred Props in React\nDESCRIPTION: Shows how to handle multiple deferred props simultaneously in React component.\nSOURCE: https://github.com/inertiajs/inertia-rails/blob/master/docs/guide/deferred-props.md#2025-04-21_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Deferred } from '@inertiajs/react'\n\nexport default () => (\n  <Deferred data={['teams', 'users']} fallback={<div>Loading...</div>}>\n    <ChildComponent />\n  </Deferred>\n)\n```\n\n----------------------------------------\n\nTITLE: Shorthand Data Passing in React\nDESCRIPTION: Example of using the shorthand syntax for passing data with HTTP requests in React. The get(), post(), put(), and patch() methods accept data as their second argument.\nSOURCE: https://github.com/inertiajs/inertia-rails/blob/master/docs/guide/manual-visits.md#2025-04-21_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nimport { router } from '@inertiajs/react'\n\nrouter.post('/users', {\n  name: 'John Doe',\n  email: 'john.doe@example.com',\n})\n```\n\n----------------------------------------\n\nTITLE: Conditional Default Layout in Inertia.js with React\nDESCRIPTION: This snippet demonstrates how to conditionally set a default layout in an Inertia.js application using React. It applies the Layout component as a wrapper to all pages except those with names starting with 'Public/'.\nSOURCE: https://github.com/inertiajs/inertia-rails/blob/master/docs/guide/pages.md#2025-04-21_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\n// frontend/entrypoints/inertia.js\nimport Layout from '../Layout'\n\ncreateInertiaApp({\n  resolve: (name) => {\n    const pages = import.meta.glob('../pages/**/*.jsx', { eager: true })\n    let page = pages[`../pages/${name}.jsx`]\n    page.default.layout = name.startsWith('Public/')\n      ? undefined\n      : (page) => <Layout children={page} />\n    return page\n  },\n  // ...\n})\n```\n\n----------------------------------------\n\nTITLE: Using Native Browser Events with Inertia in React\nDESCRIPTION: Shows how to use native browser events with Inertia in React. The example demonstrates listening for the 'inertia:start' event using addEventListener.\nSOURCE: https://github.com/inertiajs/inertia-rails/blob/master/docs/guide/events.md#2025-04-21_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nimport { router } from '@inertiajs/react'\n\ndocument.addEventListener('inertia:start', (event) => {\n  console.log(`Starting a visit to ${event.detail.visit.url}`)\n})\n```\n\n----------------------------------------\n\nTITLE: Removing Event Listeners in Vue.js with Inertia\nDESCRIPTION: Demonstrates how to remove an event listener using the callback returned by router.on() in Vue.js with Inertia.\nSOURCE: https://github.com/inertiajs/inertia-rails/blob/master/docs/guide/events.md#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport { router } from '@inertiajs/vue3'\n\nlet removeStartEventListener = router.on('start', (event) => {\n  console.log(`Starting a visit to ${event.detail.visit.url}`)\n})\n\n// Remove the listener...\nremoveStartEventListener()\n```\n\n----------------------------------------\n\nTITLE: Generating Inertia Scaffold in Rails\nDESCRIPTION: Demonstrates how to use the Inertia scaffold generator to create a new resource with Inertia responses.\nSOURCE: https://github.com/inertiajs/inertia-rails/blob/master/docs/guide/responses.md#2025-04-21_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nbin/rails generate inertia:scaffold ModelName field1:type field2:type\n```\n\n----------------------------------------\n\nTITLE: Always Trigger Loading with WhenVisible\nDESCRIPTION: Implementing continuous data loading whenever an element becomes visible using the 'always' prop, useful for infinite scroll implementations.\nSOURCE: https://github.com/inertiajs/inertia-rails/blob/master/docs/guide/load-when-visible.md#2025-04-21_snippet_4\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\nimport { WhenVisible } from '@inertiajs/vue3'\n</script>\n\n<template>\n  <WhenVisible data=\"products\" always>\n    <!-- ... -->\n  </WhenVisible>\n</template>\n```\n\nLANGUAGE: jsx\nCODE:\n```\nimport { WhenVisible } from '@inertiajs/react'\n\nexport default () => (\n  <WhenVisible data=\"products\" always>\n    <ProductsChildComponent />\n  </WhenVisible>\n)\n```\n\nLANGUAGE: svelte\nCODE:\n```\n<script>\n  import { WhenVisible } from '@inertiajs/svelte'\n\n  export let products\n</script>\n\n<WhenVisible data=\"products\" always>\n  <!-- ... -->\n</WhenVisible>\n```\n\n----------------------------------------\n\nTITLE: Error-Based Scroll Preservation in React\nDESCRIPTION: Implements scroll preservation for validation errors in React.\nSOURCE: https://github.com/inertiajs/inertia-rails/blob/master/docs/guide/scroll-management.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { router } from '@inertiajs/react'\n\nrouter.visit(url, { preserveScroll: 'errors' })\n```\n\n----------------------------------------\n\nTITLE: Multiple Head Instances in Vue\nDESCRIPTION: Using multiple Head components across layout and page components in Vue with head-key to prevent duplicate meta tags.\nSOURCE: https://github.com/inertiajs/inertia-rails/blob/master/docs/guide/title-and-meta.md#2025-04-21_snippet_11\n\nLANGUAGE: vue\nCODE:\n```\n<!-- Layout.vue -->\n<script setup>\nimport { Head } from '@inertiajs/vue3'\n</script>\n\n<template>\n  <Head>\n    <title>My app</title>\n    <meta\n      head-key=\"description\"\n      name=\"description\"\n      content=\"This is the default description\"\n    />\n    <link rel=\"icon\" type=\"image/svg+xml\" href=\"/favicon.svg\" />\n  </Head>\n</template>\n\n<!-- About.vue -->\n<script setup>\nimport { Head } from '@inertiajs/vue3'\n</script>\n\n<template>\n  <Head>\n    <title>About - My app</title>\n    <meta\n      head-key=\"description\"\n      name=\"description\"\n      content=\"This is a page specific description\"\n    />\n  </Head>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Root Template with Webpacker/Shakapacker for Inertia.js\nDESCRIPTION: ERB template showing the root layout for an Inertia.js application using Webpacker or Shakapacker as the asset bundler. Includes style and script tags with proper attributes.\nSOURCE: https://github.com/inertiajs/inertia-rails/blob/master/docs/guide/server-side-setup.md#2025-04-21_snippet_5\n\nLANGUAGE: erb\nCODE:\n```\n<!DOCTYPE html>\n<html>\n  <head>\n    <meta name=\"viewport\" content=\"width=device-width,initial-scale=1\">\n    <%= csp_meta_tag %>\n\n    <%= inertia_ssr_head %>\n\n    <%= stylesheet_pack_tag 'application' %>\n    <%= javascript_pack_tag 'application', defer: true %>\n  </head>\n  <body>\n    <%= yield %>\n  </body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Handling 'start' Event in Svelte with Inertia\nDESCRIPTION: Illustrates how to handle the 'start' event in Svelte with Inertia, which fires when a request to the server has started.\nSOURCE: https://github.com/inertiajs/inertia-rails/blob/master/docs/guide/events.md#2025-04-21_snippet_27\n\nLANGUAGE: javascript\nCODE:\n```\nimport { router } from '@inertiajs/svelte'\n\nrouter.on('start', (event) => {\n  console.log(`Starting a visit to ${event.detail.visit.url}`)\n})\n```\n\n----------------------------------------\n\nTITLE: Handling Invalid Event in Inertia.js\nDESCRIPTION: Shows how to listen for and handle the 'invalid' event in Inertia.js, which fires when a non-Inertia response is received from the server. The event provides access to the response object.\nSOURCE: https://github.com/inertiajs/inertia-rails/blob/master/docs/guide/events.md#2025-04-21_snippet_35\n\nLANGUAGE: javascript\nCODE:\n```\nimport { router } from '@inertiajs/vue3'\n\nrouter.on('invalid', (event) => {\n  console.log(`An invalid Inertia response was received.`)\n  console.log(event.detail.response)\n})\n```\n\nLANGUAGE: jsx\nCODE:\n```\nimport { router } from '@inertiajs/react'\n\nrouter.on('invalid', (event) => {\n  console.log(`An invalid Inertia response was received.`)\n  console.log(event.detail.response)\n})\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport { router } from '@inertiajs/svelte'\n\nrouter.on('invalid', (event) => {\n  console.log(`An invalid Inertia response was received.`)\n  console.log(event.detail.response)\n})\n```\n\n----------------------------------------\n\nTITLE: Customizing Cache Duration in Svelte\nDESCRIPTION: Setting custom cache durations for prefetched data in Svelte. The data can be cached for a specific time period (e.g., 1 minute, 10 seconds, or 5000 milliseconds) before being evicted.\nSOURCE: https://github.com/inertiajs/inertia-rails/blob/master/docs/guide/prefetching.md#2025-04-21_snippet_5\n\nLANGUAGE: svelte\nCODE:\n```\n<script>\n  import { inertia } from '@inertiajs/svelte'\n</script>\n\n<a href=\"/users\" use:inertia={{ prefetch: true, cacheFor: '1m' }}>Users</a>\n<a href=\"/users\" use:inertia={{ prefetch: true, cacheFor: '10s' }}>Users</a>\n<a href=\"/users\" use:inertia={{ prefetch: true, cacheFor: 5000 }}>Users</a>\n```\n\n----------------------------------------\n\nTITLE: Data Passing with Links\nDESCRIPTION: Shows how to pass additional data with Inertia Link requests using the data prop.\nSOURCE: https://github.com/inertiajs/inertia-rails/blob/master/docs/guide/links.md#2025-04-21_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\nimport { Link } from '@inertiajs/vue3'\n</script>\n\n<template>\n  <Link href=\"/endpoint\" method=\"post\" as=\"button\" :data=\"{ foo: bar }\">\n    Save\n  </Link>\n</template>\n```\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Link } from '@inertiajs/react'\n\nexport default () => (\n  <Link href=\"/endpoint\" method=\"post\" as=\"button\" data={{ foo: bar }}>\n    Save\n  </Link>\n)\n```\n\nLANGUAGE: svelte\nCODE:\n```\n<script>\n  import { inertia, Link } from '@inertiajs/svelte'\n</script>\n\n<button\n  use:inertia={{ href: '/endpoint', method: 'post', data: { foo: bar } }}\n  type=\"button\"\n>\n  Save\n</button>\n\n<Link href=\"/endpoint\" method=\"post\" data={{ foo: bar }}>Save</Link>\n```\n\n----------------------------------------\n\nTITLE: Conditional Scroll Preservation in React\nDESCRIPTION: Shows conditional scroll preservation using a callback function in React.\nSOURCE: https://github.com/inertiajs/inertia-rails/blob/master/docs/guide/scroll-management.md#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nimport { router } from '@inertiajs/react'\n\nrouter.post('/users', data, {\n  preserveScroll: (page) => page.props.someProp === 'value',\n})\n```\n\n----------------------------------------\n\nTITLE: Canceling Visits with onBefore Callback in Svelte\nDESCRIPTION: Example of using the onBefore callback to cancel an Inertia.js DELETE request in Svelte. The visit will be cancelled if the confirmation dialog returns false, providing a way to implement confirmation dialogs before destructive actions.\nSOURCE: https://github.com/inertiajs/inertia-rails/blob/master/docs/guide/manual-visits.md#2025-04-21_snippet_39\n\nLANGUAGE: javascript\nCODE:\n```\nimport { router } from '@inertiajs/svelte'\n\nrouter.delete(`/users/${user.id}`, {\n  onBefore: () => confirm('Are you sure you want to delete this user?'),\n})\n```\n\n----------------------------------------\n\nTITLE: Creating SSR Entry Point for Vue in Inertia.js Rails Project\nDESCRIPTION: JavaScript code for the SSR entry point file (app/frontend/ssr/ssr.js) using Vue and Inertia.js. This sets up the server-side rendering configuration for Vue components.\nSOURCE: https://github.com/inertiajs/inertia-rails/blob/master/docs/guide/server-side-rendering.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createInertiaApp } from '@inertiajs/vue3'\nimport createServer from '@inertiajs/vue3/server'\nimport { renderToString } from '@vue/server-renderer'\nimport { createSSRApp, h } from 'vue'\n\ncreateServer((page) =>\n  createInertiaApp({\n    page,\n    render: renderToString,\n    resolve: (name) => {\n      const pages = import.meta.glob('../pages/**/*.vue', { eager: true })\n      return pages[`../pages/${name}.vue`]\n    },\n    setup({ App, props, plugin }) {\n      return createSSRApp({\n        render: () => h(App, props),\n      }).use(plugin)\n    },\n  }),\n)\n```\n\n----------------------------------------\n\nTITLE: Vue Deferred Component Implementation\nDESCRIPTION: Shows how to use the Deferred component in Vue to handle loading states for deferred props.\nSOURCE: https://github.com/inertiajs/inertia-rails/blob/master/docs/guide/deferred-props.md#2025-04-21_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\nimport { Deferred } from '@inertiajs/vue3'\n</script>\n\n<template>\n  <Deferred data=\"permissions\">\n    <template #fallback>\n      <div>Loading...</div>\n    </template>\n    <div v-for=\"permission in permissions\">\n      <!-- ... -->\n    </div>\n  </Deferred>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Cancelling Invalid Event in Inertia.js\nDESCRIPTION: Demonstrates how to cancel the 'invalid' event in Inertia.js to prevent the default behavior of showing a non-Inertia response modal. This allows custom handling of invalid responses.\nSOURCE: https://github.com/inertiajs/inertia-rails/blob/master/docs/guide/events.md#2025-04-21_snippet_36\n\nLANGUAGE: javascript\nCODE:\n```\nimport { router } from '@inertiajs/vue3'\n\nrouter.on('invalid', (event) => {\n  event.preventDefault()\n\n  // Handle the invalid response yourself...\n})\n```\n\nLANGUAGE: jsx\nCODE:\n```\nimport { router } from '@inertiajs/react'\n\nrouter.on('invalid', (event) => {\n  event.preventDefault()\n\n  // Handle the invalid response yourself...\n})\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport { router } from '@inertiajs/svelte'\n\nrouter.on('invalid', (event) => {\n  event.preventDefault()\n\n  // Handle the invalid response yourself...\n})\n```\n\n----------------------------------------\n\nTITLE: Title Callback Result\nDESCRIPTION: The resulting HTML title tag after the title callback is applied to transform 'Home' into 'Home - My App'.\nSOURCE: https://github.com/inertiajs/inertia-rails/blob/master/docs/guide/title-and-meta.md#2025-04-21_snippet_8\n\nLANGUAGE: html\nCODE:\n```\n<title>Home - My App</title>\n```\n\n----------------------------------------\n\nTITLE: Shorthand Data Passing in Vue\nDESCRIPTION: Example of using the shorthand syntax for passing data with HTTP requests in Vue. The get(), post(), put(), and patch() methods accept data as their second argument.\nSOURCE: https://github.com/inertiajs/inertia-rails/blob/master/docs/guide/manual-visits.md#2025-04-21_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nimport { router } from '@inertiajs/vue3'\n\nrouter.post('/users', {\n  name: 'John Doe',\n  email: 'john.doe@example.com',\n})\n```\n\n----------------------------------------\n\nTITLE: Error-Based Scroll Preservation in Vue.js\nDESCRIPTION: Shows how to preserve scroll position only when validation errors occur in Vue.js.\nSOURCE: https://github.com/inertiajs/inertia-rails/blob/master/docs/guide/scroll-management.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { router } from '@inertiajs/vue3'\n\nrouter.visit(url, { preserveScroll: 'errors' })\n```\n\n----------------------------------------\n\nTITLE: Enabling Per-Request History Encryption in Ruby\nDESCRIPTION: Demonstrates how to encrypt the history of an individual request by passing true to the encrypt_history option.\nSOURCE: https://github.com/inertiajs/inertia-rails/blob/master/docs/guide/history-encryption.md#2025-04-21_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\nrender inertia: 'Dashboard', props: {}, encrypt_history: true\n```\n\n----------------------------------------\n\nTITLE: Creating SSR Entry Point for Svelte 4 in Inertia.js Rails Project\nDESCRIPTION: JavaScript code for the SSR entry point file (app/frontend/ssr/ssr.js) using Svelte 4 and Inertia.js. This sets up the server-side rendering configuration for Svelte components.\nSOURCE: https://github.com/inertiajs/inertia-rails/blob/master/docs/guide/server-side-rendering.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createInertiaApp } from '@inertiajs/svelte'\nimport createServer from '@inertiajs/svelte/server'\n\ncreateServer((page) =>\n  createInertiaApp({\n    page,\n    resolve: (name) => {\n      const pages = import.meta.glob('../pages/**/*.svelte', { eager: true })\n      return pages[`../pages/${name}.svelte`]\n    },\n    setup({ App, props }) {\n      return App.render(props)\n    },\n  }),\n)\n```\n\n----------------------------------------\n\nTITLE: Link Component with Scroll Preservation in Vue\nDESCRIPTION: Shows how to use the preserveScroll prop with Inertia Link component in Vue.\nSOURCE: https://github.com/inertiajs/inertia-rails/blob/master/docs/guide/scroll-management.md#2025-04-21_snippet_9\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\nimport { Link } from '@inertiajs/vue3'\n</script>\n\n<template>\n  <Link href=\"/\" preserve-scroll>Home</Link>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Forcing FormData in Vue for File Uploads\nDESCRIPTION: Example of using the forceFormData option in Vue to ensure the request data is sent as a FormData object, which is necessary for file uploads.\nSOURCE: https://github.com/inertiajs/inertia-rails/blob/master/docs/guide/manual-visits.md#2025-04-21_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\nimport { router } from '@inertiajs/vue3'\n\nrouter.post('/companies', data, {\n  forceFormData: true,\n})\n```\n\n----------------------------------------\n\nTITLE: Building SSR Bundle in Inertia.js Rails Project\nDESCRIPTION: Shell command to build the server-side rendering bundle using Vite in an Inertia.js Rails project.\nSOURCE: https://github.com/inertiajs/inertia-rails/blob/master/docs/guide/server-side-rendering.md#2025-04-21_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\nbin/vite build --ssr\n```\n\n----------------------------------------\n\nTITLE: Conditional State Preservation in Inertia.js Requests\nDESCRIPTION: Shows how to conditionally preserve state in Inertia.js requests based on the response. This example preserves state only if validation errors are present.\nSOURCE: https://github.com/inertiajs/inertia-rails/blob/master/docs/guide/manual-visits.md#2025-04-21_snippet_27\n\nLANGUAGE: javascript\nCODE:\n```\nimport { router } from '@inertiajs/vue3'\n\nrouter.get('/users', { search: 'John' }, { preserveState: 'errors' })\n```\n\n----------------------------------------\n\nTITLE: Basic Link Prefetching in Svelte\nDESCRIPTION: Implementing basic link prefetching in Svelte using the Inertia directive. This enables data prefetching when a user hovers over a link for more than 75ms.\nSOURCE: https://github.com/inertiajs/inertia-rails/blob/master/docs/guide/prefetching.md#2025-04-21_snippet_2\n\nLANGUAGE: svelte\nCODE:\n```\n<script>\n  import { inertia } from '@inertiajs/svelte'\n</script>\n\n<a href=\"/users\" use:inertia={{ prefetch: true }}>Users</a>\n```\n\n----------------------------------------\n\nTITLE: Custom Link Tag Rendering\nDESCRIPTION: Demonstrates how to render Inertia Links as different HTML elements using the 'as' prop.\nSOURCE: https://github.com/inertiajs/inertia-rails/blob/master/docs/guide/links.md#2025-04-21_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\nimport { Link } from '@inertiajs/vue3'\n</script>\n\n<template>\n  <Link href=\"/logout\" method=\"post\" as=\"button\">Logout</Link>\n</template>\n```\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Link } from '@inertiajs/react'\n\nexport default () => (\n  <Link href=\"/logout\" method=\"post\" as=\"button\">\n    Logout\n  </Link>\n)\n```\n\nLANGUAGE: svelte\nCODE:\n```\n<script>\n  import { Link } from '@inertiajs/svelte'\n</script>\n\n<Link href=\"/logout\" method=\"post\" as=\"button\">Logout</Link>\n```\n\n----------------------------------------\n\nTITLE: Updating Svelte 4 Initialization for Client-side Hydration in Inertia.js\nDESCRIPTION: JavaScript code changes to enable client-side hydration for Svelte 4 in an Inertia.js application. This updates the initialization file to add the hydrate option.\nSOURCE: https://github.com/inertiajs/inertia-rails/blob/master/docs/guide/server-side-rendering.md#2025-04-21_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createInertiaApp } from '@inertiajs/svelte'\n\ncreateInertiaApp({\n  resolve: (name) => {\n    const pages = import.meta.glob('../pages/**/*.svelte', { eager: true })\n    return pages[`../pages/${name}.svelte`]\n  },\n  setup({ el, App, props }) {\n    new App({ target: el, props, hydrate: true })\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Link Component with Scroll Preservation in React\nDESCRIPTION: Demonstrates scroll preservation using Inertia Link component in React.\nSOURCE: https://github.com/inertiajs/inertia-rails/blob/master/docs/guide/scroll-management.md#2025-04-21_snippet_10\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Link } from '@inertiajs/react'\n\nexport default () => (\n  <Link href=\"/\" preserveScroll>\n    Home\n  </Link>\n)\n```\n\n----------------------------------------\n\nTITLE: Basic Scroll Preservation in React\nDESCRIPTION: Shows how to prevent default scroll resetting using the router.visit method in React.\nSOURCE: https://github.com/inertiajs/inertia-rails/blob/master/docs/guide/scroll-management.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { router } from '@inertiajs/react'\n\nrouter.visit(url, { preserveScroll: false })\n```\n\n----------------------------------------\n\nTITLE: Custom Component Path Resolution\nDESCRIPTION: Configures custom component path resolution using a callable resolver.\nSOURCE: https://github.com/inertiajs/inertia-rails/blob/master/README.md#2025-04-21_snippet_4\n\nLANGUAGE: ruby\nCODE:\n```\ninertia_config(\n  component_path_resolver: ->(path:, action:) do\n    \"Storefront/#{path.camelize}/#{action.camelize}\"\n  end\n)\n```\n\n----------------------------------------\n\nTITLE: Dynamic Scroll Preservation in Inertia.js POST Requests\nDESCRIPTION: Shows how to use a callback function to dynamically determine whether to preserve scroll position in Inertia.js POST requests based on the response.\nSOURCE: https://github.com/inertiajs/inertia-rails/blob/master/docs/guide/manual-visits.md#2025-04-21_snippet_31\n\nLANGUAGE: javascript\nCODE:\n```\nimport { router } from '@inertiajs/vue3'\n\nrouter.post('/users', data, {\n  preserveScroll: (page) => page.props.someProp === 'value',\n})\n```\n\n----------------------------------------\n\nTITLE: Basic Link Prefetching in Vue\nDESCRIPTION: Implementing basic link prefetching in Vue using the Inertia Link component. This enables data prefetching when a user hovers over a link for more than 75ms.\nSOURCE: https://github.com/inertiajs/inertia-rails/blob/master/docs/guide/prefetching.md#2025-04-21_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\nimport { Link } from '@inertiajs/vue3'\n</script>\n\n<template>\n  <Link href=\"/users\" prefetch>Users</Link>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Buffer Loading with WhenVisible\nDESCRIPTION: Implementation of preloading data before an element becomes visible using the buffer prop to specify the pixel threshold.\nSOURCE: https://github.com/inertiajs/inertia-rails/blob/master/docs/guide/load-when-visible.md#2025-04-21_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\nimport { WhenVisible } from '@inertiajs/vue3'\n</script>\n\n<template>\n  <WhenVisible data=\"permissions\" :buffer=\"500\">\n    <template #fallback>\n      <div>Loading...</div>\n    </template>\n\n    <div v-for=\"permission in permissions\">\n      <!-- ... -->\n    </div>\n  </WhenVisible>\n</template>\n```\n\nLANGUAGE: jsx\nCODE:\n```\nimport { WhenVisible } from '@inertiajs/react'\n\nexport default () => (\n  <WhenVisible data=\"permissions\" buffer={500} fallback={<div>Loading...</div>}>\n    <PermissionsChildComponent />\n  </WhenVisible>\n)\n```\n\nLANGUAGE: svelte\nCODE:\n```\n<script>\n  import { WhenVisible } from '@inertiajs/svelte'\n\n  export let permissions\n</script>\n\n<WhenVisible data=\"permissions\" buffer={500}>\n  <svelte:fragment slot=\"fallback\">\n    <div>Loading...</div>\n  </svelte:fragment>\n\n  {#each permissions as permission}\n    <!-- ... -->\n  {/each}\n</WhenVisible>\n```\n\n----------------------------------------\n\nTITLE: Enabling Code Splitting with Vite in Svelte\nDESCRIPTION: Modifies the createInertiaApp resolve callback to use dynamic imports with Vite's import.meta.glob function in Svelte applications. This removes the eager loading option to enable code splitting.\nSOURCE: https://github.com/inertiajs/inertia-rails/blob/master/docs/guide/code-splitting.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// frontend/entrypoints/inertia.js\ncreateInertiaApp({\n  resolve: (name) => {\n    const pages = import.meta.glob('../pages/**/*.svelte', { eager: true }) // [!code --]\n    return pages[`../pages/${name}.svelte`] // [!code --]\n    const pages = import.meta.glob('../pages/**/*.svelte') // [!code ++]\n    return pages[`../pages/${name}.svelte`]() // [!code ++]\n  },\n  //...\n})\n```\n\n----------------------------------------\n\nTITLE: Replacing Browser History in Svelte\nDESCRIPTION: Example of using the replace option in Svelte to replace the current browser history entry instead of adding a new one. This is useful for maintaining clean navigation history.\nSOURCE: https://github.com/inertiajs/inertia-rails/blob/master/docs/guide/manual-visits.md#2025-04-21_snippet_23\n\nLANGUAGE: javascript\nCODE:\n```\nimport { router } from '@inertiajs/svelte'\n\nrouter.get('/users', { search: 'John' }, { replace: true })\n```\n\n----------------------------------------\n\nTITLE: Basic Scroll Preservation in Svelte\nDESCRIPTION: Demonstrates scroll preservation configuration using router.visit in Svelte.\nSOURCE: https://github.com/inertiajs/inertia-rails/blob/master/docs/guide/scroll-management.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { router } from '@inertiajs/svelte'\n\nrouter.visit(url, { preserveScroll: false })\n```\n\n----------------------------------------\n\nTITLE: Canceling Visits with onBefore Callback in Vue\nDESCRIPTION: Example of using the onBefore callback to cancel an Inertia.js DELETE request in Vue. The visit will be cancelled if the confirmation dialog returns false, providing a way to implement confirmation dialogs before destructive actions.\nSOURCE: https://github.com/inertiajs/inertia-rails/blob/master/docs/guide/manual-visits.md#2025-04-21_snippet_37\n\nLANGUAGE: javascript\nCODE:\n```\nimport { router } from '@inertiajs/vue3'\n\nrouter.delete(`/users/${user.id}`, {\n  onBefore: () => confirm('Are you sure you want to delete this user?'),\n})\n```\n\n----------------------------------------\n\nTITLE: Multiple Head Instances in React\nDESCRIPTION: Using multiple Head components across layout and page components in React with head-key to prevent duplicate meta tags.\nSOURCE: https://github.com/inertiajs/inertia-rails/blob/master/docs/guide/title-and-meta.md#2025-04-21_snippet_12\n\nLANGUAGE: jsx\nCODE:\n```\n// Layout.jsx\nimport { Head } from '@inertiajs/react'\n\nexport default () => (\n  <Head>\n    <title>My app</title>\n    <meta\n      head-key=\"description\"\n      name=\"description\"\n      content=\"This is the default description\"\n    />\n    <link rel=\"icon\" type=\"image/svg+xml\" href=\"/favicon.svg\" />\n  </Head>\n)\n\n// About.jsx\nimport { Head } from '@inertiajs/react'\n\nexport default () => (\n  <Head>\n    <title>About - My app</title>\n    <meta\n      head-key=\"description\"\n      name=\"description\"\n      content=\"This is a page specific description\"\n    />\n  </Head>\n)\n```\n\n----------------------------------------\n\nTITLE: Handling 'before' Event in Vue.js with Inertia\nDESCRIPTION: Demonstrates how to handle the 'before' event in Vue.js with Inertia, which fires when a request is about to be made to the server.\nSOURCE: https://github.com/inertiajs/inertia-rails/blob/master/docs/guide/events.md#2025-04-21_snippet_22\n\nLANGUAGE: javascript\nCODE:\n```\nimport { router } from '@inertiajs/vue3'\n\nrouter.on('before', (event) => {\n  console.log(`About to make a visit to ${event.detail.visit.url}`)\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring JavaScript Path Aliases\nDESCRIPTION: JavaScript configuration for path aliases in jsconfig.json to support shadcn/ui integration.\nSOURCE: https://github.com/inertiajs/inertia-rails/blob/master/docs/cookbook/integrating-shadcn-ui.md#2025-04-21_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"compilerOptions\": {\n    \"baseUrl\": \"./app/frontend\",\n    \"paths\": {\n      \"@/*\": [\"./\"]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Shorthand Data Passing in Svelte\nDESCRIPTION: Example of using the shorthand syntax for passing data with HTTP requests in Svelte. The get(), post(), put(), and patch() methods accept data as their second argument.\nSOURCE: https://github.com/inertiajs/inertia-rails/blob/master/docs/guide/manual-visits.md#2025-04-21_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nimport { router } from '@inertiajs/svelte'\n\nrouter.post('/users', {\nname: 'John Doe',\nemail: 'john.doe@example.com',\n})\n```\n\n----------------------------------------\n\nTITLE: Scroll Region Configuration\nDESCRIPTION: Shows how to define a scroll region for custom scrollable elements using the scroll-region attribute.\nSOURCE: https://github.com/inertiajs/inertia-rails/blob/master/docs/guide/scroll-management.md#2025-04-21_snippet_12\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"overflow-y-auto\" scroll-region=\"\">\n  <!-- Your page content -->\n</div>\n```\n\n----------------------------------------\n\nTITLE: Using Promise-Based Callbacks in Vue\nDESCRIPTION: Example of returning promises from onSuccess callbacks in Vue. This allows the onFinish event to be delayed until all promises have been resolved, which is useful for performing additional asynchronous operations before completing the navigation flow.\nSOURCE: https://github.com/inertiajs/inertia-rails/blob/master/docs/guide/manual-visits.md#2025-04-21_snippet_40\n\nLANGUAGE: javascript\nCODE:\n```\nimport { router } from '@inertiajs/vue3'\n\nrouter.post(url, {\n  onSuccess: () => {\n    return Promise.all([this.doThing(), this.doAnotherThing()])\n  },\n  onFinish: (visit) => {\n    // This won't be called until doThing()\n    // and doAnotherThing() have finished.\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Using Instance Props in Controller\nDESCRIPTION: Shows how to use instance props convention for automatic prop handling in controllers.\nSOURCE: https://github.com/inertiajs/inertia-rails/blob/master/README.md#2025-04-21_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\nclass EventsController < ApplicationController\n  use_inertia_instance_props\n\n  def index\n    @events = Event.all\n  end\n\nend\n```\n\n----------------------------------------\n\nTITLE: Disabling Global History Encryption Per Request in Ruby\nDESCRIPTION: Shows how to opt out of encryption on specific pages when global encryption is enabled by passing false to the encrypt_history option.\nSOURCE: https://github.com/inertiajs/inertia-rails/blob/master/docs/guide/history-encryption.md#2025-04-21_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nrender inertia: 'Homepage', props: {}, encrypt_history: false\n```\n\n----------------------------------------\n\nTITLE: Adjusting Inertia Types for Svelte with TypeScript\nDESCRIPTION: This TypeScript code adapts Inertia's type definitions for Svelte to work with Rails-style error arrays. It modifies the InertiaFormProps interface and useForm function to handle arrays of error strings.\nSOURCE: https://github.com/inertiajs/inertia-rails/blob/master/docs/cookbook/handling-validation-error-types.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// frontend/app/types/inertia-rails.d.ts\nimport type { FormDataConvertible, FormDataKeys } from '@inertiajs/core'\nimport type { InertiaFormProps as OriginalProps } from '@inertiajs/svelte'\nimport type { Writable } from 'svelte/store'\n\ntype FormDataType = Record<string, FormDataConvertible>\n\ndeclare module '@inertiajs/svelte' {\n  interface InertiaFormProps<TForm extends FormDataType>\n    extends Omit<OriginalProps<TForm>, 'errors' | 'setError'> {\n    errors: Partial<Record<FormDataKeys<TForm>, string[]>>\n\n    setError(field: FormDataKeys<TForm>, value: string[]): this\n\n    setError(errors: Record<FormDataKeys<TForm>, string[]>): this\n  }\n\n  type InertiaForm<TForm extends FormDataType> = InertiaFormProps<TForm> & TForm\n\n  export { InertiaFormProps, InertiaForm }\n\n  export function useForm<TForm extends FormDataType>(\n    data: TForm | (() => TForm),\n  ): Writable<InertiaForm<TForm>>\n  export function useForm<TForm extends FormDataType>(\n    rememberKey: string,\n    data: TForm | (() => TForm),\n  ): Writable<InertiaForm<TForm>>\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Data to Requests in Svelte\nDESCRIPTION: Example of adding data to a request using the data option in Svelte. This is used to send information to the server with the request.\nSOURCE: https://github.com/inertiajs/inertia-rails/blob/master/docs/guide/manual-visits.md#2025-04-21_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nimport { router } from '@inertiajs/svelte'\n\nrouter.visit('/users', {\n  method: 'post',\n  data: {\n    name: 'John Doe',\n    email: 'john.doe@example.com',\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Form Helper Implementation\nDESCRIPTION: Shows how to use Inertia's form helper with automatic state remembering functionality using unique form keys.\nSOURCE: https://github.com/inertiajs/inertia-rails/blob/master/docs/guide/remembering-state.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useForm } from '@inertiajs/vue3'\n\nconst form = useForm('CreateUser', data)\nconst form = useForm(`EditUser:${props.user.id}`, data)\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useForm } from '@inertiajs/react'\n\nconst form = useForm('CreateUser', data)\nconst form = useForm(`EditUser:${user.id}`, data)\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useForm } from '@inertiajs/svelte'\n\nconst form = useForm('CreateUser', data)\nconst form = useForm(`EditUser:${user.id}`, data)\n```\n\n----------------------------------------\n\nTITLE: Removing Event Listeners in Svelte with Inertia\nDESCRIPTION: Illustrates how to remove an event listener using the callback returned by router.on() in Svelte with Inertia.\nSOURCE: https://github.com/inertiajs/inertia-rails/blob/master/docs/guide/events.md#2025-04-21_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nimport { router } from '@inertiajs/svelte'\n\nlet removeStartEventListener = router.on('start', (event) => {\n  console.log(`Starting a visit to ${event.detail.visit.url}`)\n})\n\n// Remove the listener...\nremoveStartEventListener()\n```\n\n----------------------------------------\n\nTITLE: Global Inertia Configuration\nDESCRIPTION: Sets up global configuration options for Inertia Rails in an initializer.\nSOURCE: https://github.com/inertiajs/inertia-rails/blob/master/README.md#2025-04-21_snippet_6\n\nLANGUAGE: ruby\nCODE:\n```\n# config/initializers/inertia.rb\n\nInertiaRails.configure do |config|\n  # Example: force a full-reload if the deployed assets change.\n  config.version = ViteRuby.digest\nend\n```\n\n----------------------------------------\n\nTITLE: Cancelling Events by Returning False in Svelte with Inertia\nDESCRIPTION: Illustrates how to cancel an event in Svelte with Inertia by returning false from the event listener registered with router.on().\nSOURCE: https://github.com/inertiajs/inertia-rails/blob/master/docs/guide/events.md#2025-04-21_snippet_21\n\nLANGUAGE: javascript\nCODE:\n```\nimport { router } from '@inertiajs/svelte'\n\nrouter.on('before', (event) => {\n  return confirm('Are you sure you want to navigate away?')\n})\n```\n\n----------------------------------------\n\nTITLE: Using Native Browser Events with Inertia in Svelte\nDESCRIPTION: Illustrates how to use native browser events with Inertia in Svelte. The example shows listening for the 'inertia:start' event using addEventListener.\nSOURCE: https://github.com/inertiajs/inertia-rails/blob/master/docs/guide/events.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport { router } from '@inertiajs/svelte'\n\ndocument.addEventListener('inertia:start', (event) => {\n  console.log(`Starting a visit to ${event.detail.visit.url}`)\n})\n```\n\n----------------------------------------\n\nTITLE: Removing Event Listeners in React with Inertia\nDESCRIPTION: Shows how to remove an event listener using the callback returned by router.on() in React with Inertia.\nSOURCE: https://github.com/inertiajs/inertia-rails/blob/master/docs/guide/events.md#2025-04-21_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\nimport { router } from '@inertiajs/react'\n\nlet removeStartEventListener = router.on('start', (event) => {\n  console.log(`Starting a visit to ${event.detail.visit.url}`)\n})\n\n// Remove the listener...\nremoveStartEventListener()\n```\n\n----------------------------------------\n\nTITLE: Stale-While-Revalidate in Svelte\nDESCRIPTION: Implementing stale-while-revalidate caching strategy in Svelte. This allows showing stale data immediately while fetching fresh data in the background, specified as a tuple with fresh and stale durations.\nSOURCE: https://github.com/inertiajs/inertia-rails/blob/master/docs/guide/prefetching.md#2025-04-21_snippet_22\n\nLANGUAGE: svelte\nCODE:\n```\n<script>\n  import { inertia } from '@inertiajs/svelte'\n</script>\n\n<a href=\"/users\" use:inertia={{ prefetch: true, cacheFor: ['30s', '1m'] }}>\n  Users\n</a>\n```\n\n----------------------------------------\n\nTITLE: Cancelling Events by Returning False in React with Inertia\nDESCRIPTION: Shows how to cancel an event in React with Inertia by returning false from the event listener registered with router.on().\nSOURCE: https://github.com/inertiajs/inertia-rails/blob/master/docs/guide/events.md#2025-04-21_snippet_20\n\nLANGUAGE: jsx\nCODE:\n```\nimport { router } from '@inertiajs/react'\n\nrouter.on('before', (event) => {\n  return confirm('Are you sure you want to navigate away?')\n})\n```\n\n----------------------------------------\n\nTITLE: Updating Page Props with Function in Inertia.js Router\nDESCRIPTION: Shows how to use a function to update page props when navigating with Inertia.js router. This method allows access to current page props and merging with new data.\nSOURCE: https://github.com/inertiajs/inertia-rails/blob/master/docs/guide/manual-visits.md#2025-04-21_snippet_25\n\nLANGUAGE: javascript\nCODE:\n```\nimport { router } from '@inertiajs/vue3'\n\nrouter.push({ url: '/users', component: 'Users' })\nrouter.replace({\n  props: (currentProps) => ({ ...currentProps, search: 'John' }),\n})\n```\n\n----------------------------------------\n\nTITLE: Title Shorthand in React\nDESCRIPTION: Simplified way to set only the page title using the title prop with the Head component in React applications.\nSOURCE: https://github.com/inertiajs/inertia-rails/blob/master/docs/guide/title-and-meta.md#2025-04-21_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Head } from '@inertiajs/react'\n\nexport default () => <Head title=\"Your page title\" />\n```\n\n----------------------------------------\n\nTITLE: Using Dot Notation in Partial Reloads\nDESCRIPTION: Examples of using dot notation to specify nested data in partial reloads, combining both 'only' and 'except' options.\nSOURCE: https://github.com/inertiajs/inertia-rails/blob/master/docs/guide/partial-reloads.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { router } from '@inertiajs/vue3'\n\nrouter.visit(url, {\n  only: ['settings.theme'],\n  except: ['setting.theme.colors'],\n})\n```\n\nLANGUAGE: jsx\nCODE:\n```\nimport { router } from '@inertiajs/react'\n\nrouter.visit(url, {\n  only: ['settings.theme'],\n  except: ['setting.theme.colors'],\n})\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport { router } from '@inertiajs/svelte'\n\nrouter.visit(url, {\n  only: ['settings.theme'],\n  except: ['setting.theme.colors'],\n})\n```\n\n----------------------------------------\n\nTITLE: Removing Native Browser Event Listeners in Svelte with Inertia\nDESCRIPTION: Illustrates how to remove a native browser event listener in Svelte with Inertia using removeEventListener().\nSOURCE: https://github.com/inertiajs/inertia-rails/blob/master/docs/guide/events.md#2025-04-21_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nimport { router } from '@inertiajs/svelte'\n\nlet startEventListener = (event) => {\n  console.log(`Starting a visit to ${event.detail.visit.url}`)\n}\n\ndocument.addEventListener('inertia:start', startEventListener)\n\n// Remove the listener...\ndocument.removeEventListener('inertia:start', startEventListener)\n```\n\n----------------------------------------\n\nTITLE: Method Spoofing for File Uploads\nDESCRIPTION: Examples of implementing HTTP method spoofing for file uploads using either _method parameter or X-HTTP-METHOD-OVERRIDE header.\nSOURCE: https://github.com/inertiajs/inertia-rails/blob/master/docs/guide/file-uploads.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nrouter.post(`/users/${user.id}`, {\n  _method: 'put',\n  avatar: form.avatar,\n})\n\n// or\n\nform.post(`/users/${user.id}`, {\n  headers: { 'X-HTTP-METHOD-OVERRIDE': 'put' },\n})\n```\n\n----------------------------------------\n\nTITLE: Handling 'before' Event in Svelte with Inertia\nDESCRIPTION: Illustrates how to handle the 'before' event in Svelte with Inertia, which fires when a request is about to be made to the server.\nSOURCE: https://github.com/inertiajs/inertia-rails/blob/master/docs/guide/events.md#2025-04-21_snippet_24\n\nLANGUAGE: javascript\nCODE:\n```\nimport { router } from '@inertiajs/svelte'\n\nrouter.on('before', (event) => {\n  console.log(`About to make a visit to ${event.detail.visit.url}`)\n})\n```\n\n----------------------------------------\n\nTITLE: Polling Throttling Configuration\nDESCRIPTION: Implementation of polling with keepAlive option to disable background throttling.\nSOURCE: https://github.com/inertiajs/inertia-rails/blob/master/docs/guide/polling.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { usePoll } from '@inertiajs/vue3'\n\nusePoll(\n  2000,\n  {},\n  {\n    keepAlive: true,\n  },\n)\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport { usePoll } from '@inertiajs/react'\n\nusePoll(\n  2000,\n  {},\n  {\n    keepAlive: true,\n  },\n)\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport { usePoll } from '@inertiajs/svelte'\n\nusePoll(\n  2000,\n  {},\n  {\n    keepAlive: true,\n  },\n)\n```\n\n----------------------------------------\n\nTITLE: Using Custom Head Component in React\nDESCRIPTION: Example of implementing the custom AppHead component in a React page component.\nSOURCE: https://github.com/inertiajs/inertia-rails/blob/master/docs/guide/title-and-meta.md#2025-04-21_snippet_17\n\nLANGUAGE: jsx\nCODE:\n```\nimport AppHead from './AppHead'\n\nexport default () => <AppHead title=\"About\" />\n```\n\n----------------------------------------\n\nTITLE: Accessing Inertia Props in ERB Template\nDESCRIPTION: Shows how to access Inertia prop data in an ERB template for meta tags or other purposes.\nSOURCE: https://github.com/inertiajs/inertia-rails/blob/master/docs/guide/responses.md#2025-04-21_snippet_5\n\nLANGUAGE: erb\nCODE:\n```\n<% content_for(:head) do %>\n<meta name=\"twitter:title\" content=\"<%= page[\"props\"][\"event\"].title %>\">\n<% end %>\n\n<div id=\"app\" data-page=\"<%= page.to_json %>\"></div>\n```\n\n----------------------------------------\n\nTITLE: Manual Polling Control Implementation\nDESCRIPTION: Examples of implementing manual polling control with start/stop functionality across frameworks.\nSOURCE: https://github.com/inertiajs/inertia-rails/blob/master/docs/guide/polling.md#2025-04-21_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\nimport { usePoll } from '@inertiajs/vue3'\nconst { start, stop } = usePoll(\n  2000,\n  {},\n  {\n    autoStart: false,\n  },\n)\n</script>\n\n<template>\n  <button @click=\"start\">Start polling</button>\n  <button @click=\"stop\">Stop polling</button>\n</template>\n```\n\nLANGUAGE: jsx\nCODE:\n```\nimport { usePoll } from '@inertiajs/react'\n\nexport default () => {\n  const { start, stop } = usePoll(\n    2000,\n    {},\n    {\n      autoStart: false,\n    },\n  )\n  return (\n    <div>\n      <button onClick={start}>Start polling</button>\n      <button onClick={stop}>Stop polling</button>\n    </div>\n  )\n}\n```\n\nLANGUAGE: svelte\nCODE:\n```\n<script>\n  import { usePoll } from '@inertiajs/svelte'\n\n  const { start, stop } = usePoll(\n    2000,\n    {},\n    {\n      autoStart: false,\n    },\n  )\n</script>\n\n<button on:click={start}>Start polling</button>\n<button on:click={stop}>Stop polling</button>\n```\n\n----------------------------------------\n\nTITLE: Using Promise-Based Callbacks in Svelte\nDESCRIPTION: Example of returning promises from onSuccess callbacks in Svelte. This allows the onFinish event to be delayed until all promises have been resolved, which is useful for performing additional asynchronous operations before completing the navigation flow.\nSOURCE: https://github.com/inertiajs/inertia-rails/blob/master/docs/guide/manual-visits.md#2025-04-21_snippet_42\n\nLANGUAGE: javascript\nCODE:\n```\nimport { router } from '@inertiajs/svelte'\n\nrouter.post(url, {\n  onSuccess: () => {\n    return Promise.all([this.doThing(), this.doAnotherThing()])\n  },\n  onFinish: (visit) => {\n    // This won't be called until doThing()\n    // and doAnotherThing() have finished.\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Handling Finish Event in Inertia.js\nDESCRIPTION: Shows how to listen for and handle the 'finish' event in Inertia.js, which fires after an XHR request has completed. This event is useful for hiding loading indicators or performing cleanup actions.\nSOURCE: https://github.com/inertiajs/inertia-rails/blob/master/docs/guide/events.md#2025-04-21_snippet_39\n\nLANGUAGE: javascript\nCODE:\n```\nimport { router } from '@inertiajs/vue3'\n\nrouter.on('finish', (event) => {\n  NProgress.done()\n})\n```\n\nLANGUAGE: jsx\nCODE:\n```\nimport { router } from '@inertiajs/react'\n\nrouter.on('finish', (event) => {\n  NProgress.done()\n})\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport { router } from '@inertiajs/svelte'\n\nrouter.on('finish', (event) => {\n  NProgress.done()\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Layout for Inertia Rails\nDESCRIPTION: Ruby code that configures a custom layout for Inertia.js responses through an initializer file. This changes the default layout from application.html.erb to a custom layout.\nSOURCE: https://github.com/inertiajs/inertia-rails/blob/master/docs/guide/server-side-setup.md#2025-04-21_snippet_6\n\nLANGUAGE: ruby\nCODE:\n```\n# config/initializers/inertia_rails.rb\nInertiaRails.configure do |config|\n  config.layout = 'my_inertia_layout'\nend\n```\n\n----------------------------------------\n\nTITLE: Cancelling Form Submission in Svelte with Inertia.js\nDESCRIPTION: Illustrates how to cancel a form submission in Svelte using the cancel() method provided by Inertia.js form store.\nSOURCE: https://github.com/inertiajs/inertia-rails/blob/master/docs/guide/forms.md#2025-04-21_snippet_25\n\nLANGUAGE: svelte\nCODE:\n```\n$form.cancel()\n```\n\n----------------------------------------\n\nTITLE: Partial Reload Request and Response\nDESCRIPTION: Example of a partial reload request with X-Inertia-Partial headers and the corresponding JSON response containing only the requested props.\nSOURCE: https://github.com/inertiajs/inertia-rails/blob/master/docs/guide/the-protocol.md#2025-04-21_snippet_3\n\nLANGUAGE: http\nCODE:\n```\nREQUEST\nGET: http://example.com/events\nAccept: text/html, application/xhtml+xml\nX-Requested-With: XMLHttpRequest\nX-Inertia: true\nX-Inertia-Version: 6b16b94d7c51cbe5b1fa42aac98241d5\nX-Inertia-Partial-Data: events\nX-Inertia-Partial-Component: Events\n\nRESPONSE\nHTTP/1.1 200 OK\nContent-Type: application/json\n\n{\n  \"component\": \"Events\",\n  \"props\": {\n    \"auth\": {...},       // NOT included\n    \"categories\": [...], // NOT included\n    \"events\": [...],     // included\n    \"errors\": {}         // always included\n  },\n  \"url\": \"/events/80\",\n  \"version\": \"c32b8e4965f418ad16eaebba1d4e960f\"\n}\n```\n\n----------------------------------------\n\nTITLE: Title Callback with Head in Vue\nDESCRIPTION: Example of how the title callback applies when using the Head component with the title prop in Vue applications.\nSOURCE: https://github.com/inertiajs/inertia-rails/blob/master/docs/guide/title-and-meta.md#2025-04-21_snippet_6\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\nimport { Head } from '@inertiajs/vue3'\n</script>\n\n<template>\n  <Head title=\"Home\" />\n</template>\n```\n\n----------------------------------------\n\nTITLE: Automatic Event Listener Removal in Svelte 4 with Inertia\nDESCRIPTION: Illustrates how to automatically remove an event listener when a component unmounts in Svelte 4 with Inertia using the onMount function.\nSOURCE: https://github.com/inertiajs/inertia-rails/blob/master/docs/guide/events.md#2025-04-21_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nimport { router } from '@inertiajs/svelte'\nimport { onMount } from 'svelte'\n\nonMount(() => {\n  return router.on('start', (event) => {\n    console.log(`Starting a visit to ${event.detail.visit.url}`)\n  })\n})\n```\n\n----------------------------------------\n\nTITLE: Conditional Scroll Preservation in Vue.js\nDESCRIPTION: Demonstrates how to conditionally preserve scroll position based on page props in Vue.js.\nSOURCE: https://github.com/inertiajs/inertia-rails/blob/master/docs/guide/scroll-management.md#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport { router } from '@inertiajs/vue3'\n\nrouter.post('/users', data, {\n  preserveScroll: (page) => page.props.someProp === 'value',\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Svelte Compiler for Hydration in Vite\nDESCRIPTION: JavaScript configuration for the Vite config file to enable the hydratable compiler option for Svelte. This is necessary for client-side hydration in Svelte applications.\nSOURCE: https://github.com/inertiajs/inertia-rails/blob/master/docs/guide/server-side-rendering.md#2025-04-21_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nimport { svelte } from '@sveltejs/vite-plugin-svelte'\nimport laravel from 'laravel-vite-plugin'\nimport { defineConfig } from 'vite'\n\nexport default defineConfig({\n  plugins: [\n    laravel.default({\n      input: ['resources/css/app.css', 'resources/js/app.js'],\n      ssr: 'resources/js/ssr.js',\n      refresh: true,\n    }),\n    svelte({\n      compilerOptions: {\n        hydratable: true,\n      },\n    }),\n  ],\n})\n```\n\n----------------------------------------\n\nTITLE: Disabling Scroll Preservation in Inertia.js Navigation\nDESCRIPTION: Shows how to disable the default scroll preservation behavior in Inertia.js navigation. This can be useful when custom scroll management is needed.\nSOURCE: https://github.com/inertiajs/inertia-rails/blob/master/docs/guide/manual-visits.md#2025-04-21_snippet_29\n\nLANGUAGE: javascript\nCODE:\n```\nimport { router } from '@inertiajs/vue3'\n\nrouter.visit(url, { preserveScroll: false })\n```\n\n----------------------------------------\n\nTITLE: Title Callback with Title Tag in Vue\nDESCRIPTION: Example of how the title callback applies when using the title tag within the Head component in Vue applications.\nSOURCE: https://github.com/inertiajs/inertia-rails/blob/master/docs/guide/title-and-meta.md#2025-04-21_snippet_9\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\nimport { Head } from '@inertiajs/vue3'\n</script>\n\n<template>\n  <Head>\n    <title>Home</title>\n  </Head>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Using svelte:head Component in Svelte\nDESCRIPTION: Example of using Svelte's native svelte:head component to set the page title and meta description in Svelte 4 or 5.\nSOURCE: https://github.com/inertiajs/inertia-rails/blob/master/docs/guide/title-and-meta.md#2025-04-21_snippet_2\n\nLANGUAGE: svelte\nCODE:\n```\n<svelte:head>\n  <title>Your page title</title>\n  <meta name=\"description\" content=\"Your page description\" />\n</svelte:head>\n```\n\n----------------------------------------\n\nTITLE: Running SSR Server in Inertia.js Rails Project\nDESCRIPTION: Shell command to start the Node-based Inertia SSR server in a Rails project.\nSOURCE: https://github.com/inertiajs/inertia-rails/blob/master/docs/guide/server-side-rendering.md#2025-04-21_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\nbin/vite ssr\n```\n\n----------------------------------------\n\nTITLE: Link Component with Scroll Preservation in Svelte\nDESCRIPTION: Shows both directive and component approaches for scroll preservation in Svelte.\nSOURCE: https://github.com/inertiajs/inertia-rails/blob/master/docs/guide/scroll-management.md#2025-04-21_snippet_11\n\nLANGUAGE: svelte\nCODE:\n```\n<script>\n  import { inertia, Link } from '@inertiajs/svelte'\n</script>\n\n<a href=\"/\" use:inertia={{ preserveScroll: true }}>Home</a>\n\n<Link href=\"/\" preserveScroll>Home</Link>\n```\n\n----------------------------------------\n\nTITLE: Installing Inertia.js v2.0 for React\nDESCRIPTION: Command to install the Inertia.js v2.0 beta client-side adapter for React using npm.\nSOURCE: https://github.com/inertiajs/inertia-rails/blob/master/docs/guide/upgrade-guide.md#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nnpm install @inertiajs/react@^2.0\n```\n\n----------------------------------------\n\nTITLE: Cancelling Form Submission in React with Inertia.js\nDESCRIPTION: Shows how to cancel a form submission in React using the cancel() method from Inertia.js useForm hook.\nSOURCE: https://github.com/inertiajs/inertia-rails/blob/master/docs/guide/forms.md#2025-04-21_snippet_24\n\nLANGUAGE: jsx\nCODE:\n```\nconst { cancel } = useForm({ ... })\n\ncancel()\n```\n\n----------------------------------------\n\nTITLE: Using Custom Head Component in Vue\nDESCRIPTION: Example of implementing the custom AppHead component in a Vue page component.\nSOURCE: https://github.com/inertiajs/inertia-rails/blob/master/docs/guide/title-and-meta.md#2025-04-21_snippet_16\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\nimport AppHead from './AppHead'\n</script>\n\n<template>\n  <AppHead title=\"About\" />\n</template>\n```\n\n----------------------------------------\n\nTITLE: Enabling Clustering for SSR Server in Inertia.js Rails Project\nDESCRIPTION: JavaScript code snippet demonstrating how to enable clustering for the SSR server in an Inertia.js Rails project. This allows the server to run on multiple threads for improved performance.\nSOURCE: https://github.com/inertiajs/inertia-rails/blob/master/docs/guide/server-side-rendering.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\ncreateServer(\n  (page) =>\n    createInertiaApp({\n      // ...\n    }),\n  { cluster: true },\n)\n```\n\n----------------------------------------\n\nTITLE: Updating Svelte 5 Initialization for Client-side Hydration in Inertia.js\nDESCRIPTION: JavaScript code changes to enable client-side hydration for Svelte 5 in an Inertia.js application. This updates the initialization file to use hydrate or mount based on server rendering status.\nSOURCE: https://github.com/inertiajs/inertia-rails/blob/master/docs/guide/server-side-rendering.md#2025-04-21_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createInertiaApp } from '@inertiajs/svelte'\nimport { hydrate, mount } from 'svelte'\n\ncreateInertiaApp({\n  resolve: (name) => {\n    const pages = import.meta.glob('./Pages/**/*.svelte', { eager: true })\n    return pages[`./Pages/${name}.svelte`]\n  },\n  setup({ el, App, props }) {\n    if (el.dataset.serverRendered === 'true') {\n      hydrate(App, { target: el, props })\n    } else {\n      mount(App, { target: el, props })\n    }\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Installing Inertia Rails with TypeScript\nDESCRIPTION: Commands to create a new Rails application and install Inertia with TypeScript, React, Vite, and Tailwind support.\nSOURCE: https://github.com/inertiajs/inertia-rails/blob/master/docs/cookbook/integrating-shadcn-ui.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nrails new -JA shadcn-inertia-rails\ncd shadcn-inertia-rails\n\nrails generate inertia:install `--framework=react --typescript --vite --tailwind --no-interactive`\nInstalling Inertia's Rails adapter\n...\n```\n\n----------------------------------------\n\nTITLE: Installing Inertia Rails with JavaScript\nDESCRIPTION: Commands to create a new Rails application and install Inertia with JavaScript, React, Vite, and Tailwind support.\nSOURCE: https://github.com/inertiajs/inertia-rails/blob/master/docs/cookbook/integrating-shadcn-ui.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nrails new -JA shadcn-inertia-rails\ncd shadcn-inertia-rails\n\nrails generate inertia:install --framework=react --vite --tailwind --no-interactive\nInstalling Inertia's Rails adapter\n...\n```\n\n----------------------------------------\n\nTITLE: Automatic Event Listener Removal in React with Inertia\nDESCRIPTION: Shows how to automatically remove an event listener when a component unmounts in React with Inertia using the useEffect hook.\nSOURCE: https://github.com/inertiajs/inertia-rails/blob/master/docs/guide/events.md#2025-04-21_snippet_10\n\nLANGUAGE: jsx\nCODE:\n```\nimport { router } from '@inertiajs/react'\nimport { useEffect } from 'react'\n\nuseEffect(() => {\n  return router.on('start', (event) => {\n    console.log(`Starting a visit to ${event.detail.visit.url}`)\n  })\n}, [])\n```\n\n----------------------------------------\n\nTITLE: Installing Inertia.js v2.0 for Vue 3\nDESCRIPTION: Command to install the Inertia.js v2.0 beta client-side adapter for Vue 3 using npm.\nSOURCE: https://github.com/inertiajs/inertia-rails/blob/master/docs/guide/upgrade-guide.md#2025-04-21_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\nnpm install @inertiajs/vue3@^2.0\n```\n\n----------------------------------------\n\nTITLE: Adjusting Inertia Types for Vue with TypeScript\nDESCRIPTION: This TypeScript code modifies Inertia's type definitions to expect Rails-style error arrays instead of single strings. It updates the InertiaFormProps interface and useForm function to handle arrays of error strings.\nSOURCE: https://github.com/inertiajs/inertia-rails/blob/master/docs/cookbook/handling-validation-error-types.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// frontend/app/types/inertia-rails.d.ts\nimport type { FormDataConvertible, FormDataKeys } from '@inertiajs/core'\nimport type { InertiaFormProps as OriginalProps } from '@inertiajs/vue3'\n\ntype FormDataType = Record<string, FormDataConvertible>\n\ndeclare module '@inertiajs/vue3' {\n  interface InertiaFormProps<TForm extends FormDataType>\n    extends Omit<OriginalProps<TForm>, 'errors' | 'setError'> {\n    errors: Partial<Record<FormDataKeys<TForm>, string[]>>\n\n    setError(field: FormDataKeys<TForm>, value: string[]): this\n\n    setError(errors: Record<FormDataKeys<TForm>, string[]>): this\n  }\n\n  export type InertiaForm<TForm extends FormDataType> = TForm &\n    InertiaFormProps<TForm>\n\n  export { InertiaFormProps, InertiaForm }\n\n  export function useForm<TForm extends FormDataType>(\n    data: TForm | (() => TForm),\n  ): InertiaForm<TForm>\n  export function useForm<TForm extends FormDataType>(\n    rememberKey: string,\n    data: TForm | (() => TForm),\n  ): InertiaForm<TForm>\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Component Path Resolution for Inertia in Rails\nDESCRIPTION: Demonstrates how to define a custom resolution method for component paths using the component_path_resolver configuration.\nSOURCE: https://github.com/inertiajs/inertia-rails/blob/master/docs/guide/responses.md#2025-04-21_snippet_4\n\nLANGUAGE: ruby\nCODE:\n```\ninertia_config(\n  component_path_resolver: ->(path:, action:) do\n    \"Storefront/#{path.camelize}/#{action.camelize}\"\n  end\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring TypeScript Path Aliases (tsconfig.json)\nDESCRIPTION: Additional TypeScript configuration for path aliases in tsconfig.json required by shadcn/ui.\nSOURCE: https://github.com/inertiajs/inertia-rails/blob/master/docs/cookbook/integrating-shadcn-ui.md#2025-04-21_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"compilerOptions\": {\n    \"baseUrl\": \"./app/frontend\",\n    \"paths\": {\n      \"@/*\": [\"./\"]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring TypeScript Path Aliases (tsconfig.app.json)\nDESCRIPTION: TypeScript configuration for path aliases in tsconfig.app.json to support shadcn/ui integration.\nSOURCE: https://github.com/inertiajs/inertia-rails/blob/master/docs/cookbook/integrating-shadcn-ui.md#2025-04-21_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"compilerOptions\": {\n    \"baseUrl\": \".\",\n    \"paths\": {\n      \"@/*\": [\"./app/frontend/*\"]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Click-based Prefetching in Svelte\nDESCRIPTION: Triggering prefetching on mousedown instead of hover in Svelte. This starts the prefetch process when the user initiates a click rather than on hovering over the link.\nSOURCE: https://github.com/inertiajs/inertia-rails/blob/master/docs/guide/prefetching.md#2025-04-21_snippet_8\n\nLANGUAGE: svelte\nCODE:\n```\n<script>\n  import { inertia } from '@inertiajs/svelte'\n</script>\n\n<a href=\"/users\" use:inertia={{ prefetch: 'click' }}>Users</a>\n```\n\n----------------------------------------\n\nTITLE: Installing Inertia.js v2.0 for Svelte 4|Svelte 5\nDESCRIPTION: Command to install the Inertia.js v2.0 beta client-side adapter for Svelte 4 or Svelte 5 using npm.\nSOURCE: https://github.com/inertiajs/inertia-rails/blob/master/docs/guide/upgrade-guide.md#2025-04-21_snippet_2\n\nLANGUAGE: svelte\nCODE:\n```\nnpm install @inertiajs/svelte@^2.0\n```\n\n----------------------------------------\n\nTITLE: Starting the Rails and Vite Development Servers\nDESCRIPTION: Command to start both the Rails server and the Vite development server using the bin/dev script created by the generator.\nSOURCE: https://github.com/inertiajs/inertia-rails/blob/master/docs/guide/server-side-setup.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nbin/dev\n```\n\n----------------------------------------\n\nTITLE: Configuring Deep Merge as Project Default in Ruby on Rails\nDESCRIPTION: Shows how to configure InertiaRails to use deep merging of shared data as the default behavior for the entire application using the configuration initializer.\nSOURCE: https://github.com/inertiajs/inertia-rails/blob/master/docs/guide/shared-data.md#2025-04-21_snippet_10\n\nLANGUAGE: ruby\nCODE:\n```\n# config/initializers/some_initializer.rb\nInertiaRails.configure do |config|\n  config.deep_merge_shared_data = true\nend\n```\n\n----------------------------------------\n\nTITLE: Configuring Webpack for Cache Busting\nDESCRIPTION: Webpack configuration that enables cache busting for dynamically loaded chunks by adding a chunkhash identifier to the output filename. This forces browsers to load the latest version of assets.\nSOURCE: https://github.com/inertiajs/inertia-rails/blob/master/docs/guide/code-splitting.md#2025-04-21_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\n// webpack.config.js\nmodule.exports = {\n  //...\n  output: {\n    //...\n    chunkFilename: 'js/[name].js?id=[chunkhash]',\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing shadcn/ui Components\nDESCRIPTION: Command-line interaction for initializing shadcn/ui in the project and configuring its base settings.\nSOURCE: https://github.com/inertiajs/inertia-rails/blob/master/docs/cookbook/integrating-shadcn-ui.md#2025-04-21_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nnpx shadcn@latest init\n\n✔ Preflight checks.\n✔ Verifying framework. Found Vite.\n✔ Validating Tailwind CSS.\n✔ Validating import alias.\n✔ Which style would you like to use? › New York\n✔ Which color would you like to use as the base color? › Neutral\n✔ Would you like to use CSS variables for theming? … no / yes\n✔ Writing components.json.\n✔ Checking registry.\n✔ Updating tailwind.config.js\n✔ Updating app/frontend/entrypoints/application.css\n✔ Installing dependencies.\n✔ Created 1 file:\n  - app/frontend/lib/utils.js\n\nSuccess! Project initialization completed.\nYou may now add components.\n```\n\n----------------------------------------\n\nTITLE: Conditional Scroll Preservation in Svelte\nDESCRIPTION: Implements conditional scroll preservation logic in Svelte.\nSOURCE: https://github.com/inertiajs/inertia-rails/blob/master/docs/guide/scroll-management.md#2025-04-21_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nimport { router } from '@inertiajs/svelte'\n\nrouter.post('/users', data, {\n  preserveScroll: (page) => page.props.someProp === 'value',\n})\n```\n\n----------------------------------------\n\nTITLE: Installing Inertia Rails Gem\nDESCRIPTION: Adds the inertia_rails gem to the Rails application Gemfile for basic setup.\nSOURCE: https://github.com/inertiajs/inertia-rails/blob/master/README.md#2025-04-21_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\ngem 'inertia_rails'\n```\n\n----------------------------------------\n\nTITLE: Example Output of Inertia Rails Generator\nDESCRIPTION: Sample terminal output showing the installation process when running the Inertia Rails generator, including prompts for TypeScript, framework selection, and Tailwind CSS installation.\nSOURCE: https://github.com/inertiajs/inertia-rails/blob/master/docs/guide/server-side-setup.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ bin/rails generate inertia:install\nInstalling Inertia's Rails adapter\nCould not find a package.json file to install Inertia to.\nWould you like to install Vite Ruby? (y/n) y\n         run  bundle add vite_rails from \".\"\nVite Rails gem successfully installed\n         run  bundle exec vite install from \".\"\nVite Rails successfully installed\nWould you like to use TypeScript? (y/n) y\nAdding TypeScript support\nWhat framework do you want to use with Inertia? [react, vue, svelte4, svelte] (react)\n         run  npm add @types/react @types/react-dom typescript --silent from \".\"\nWould you like to install Tailwind CSS? (y/n) y\nInstalling Tailwind CSS\n         run  npm add tailwindcss postcss autoprefixer @tailwindcss/forms @tailwindcss/typography @tailwindcss/container-queries --silent from \".\"\n      create  tailwind.config.js\n      create  postcss.config.js\n      create  app/frontend/entrypoints/application.css\nAdding Tailwind CSS to the application layout\n      insert  app/views/layouts/application.html.erb\nAdding Inertia's Rails adapter initializer\n      create  config/initializers/inertia_rails.rb\nInstalling Inertia npm packages\n         run  npm add @vitejs/plugin-react react react-dom --silent from \".\"\n         run  npm add @inertiajs/react@latest --silent from \".\"\nAdding Vite plugin for react\n      insert  vite.config.ts\n     prepend  vite.config.ts\nCopying inertia.ts entrypoint\n      create  app/frontend/entrypoints/inertia.ts\nAdding inertia.ts script tag to the application layout\n      insert  app/views/layouts/application.html.erb\nAdding Vite React Refresh tag to the application layout\n      insert  app/views/layouts/application.html.erb\n        gsub  app/views/layouts/application.html.erb\nCopying example Inertia controller\n      create  app/controllers/inertia_example_controller.rb\nAdding a route for the example Inertia controller\n       route  get 'inertia-example', to: 'inertia_example#index'\nCopying page assets\n      create  app/frontend/pages/InertiaExample.module.css\n      create  app/frontend/assets/react.svg\n      create  app/frontend/assets/inertia.svg\n      create  app/frontend/assets/vite_ruby.svg\n      create  app/frontend/pages/InertiaExample.tsx\n      create  tsconfig.json\n      create  tsconfig.app.json\n      create  tsconfig.node.json\n      create  app/frontend/vite-env.d.ts\nCopying bin/dev\n      create  bin/dev\nInertia's Rails adapter successfully installed\n```\n\n----------------------------------------\n\nTITLE: Adjusting Inertia Types for React with TypeScript\nDESCRIPTION: This TypeScript code modifies Inertia's type definitions for React to handle Rails-style error arrays. It updates the InertiaFormProps interface and useForm function to work with arrays of error strings.\nSOURCE: https://github.com/inertiajs/inertia-rails/blob/master/docs/cookbook/handling-validation-error-types.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// frontend/app/types/inertia-rails.d.ts\nimport type { FormDataConvertible, FormDataKeys } from '@inertiajs/core'\nimport type { InertiaFormProps as OriginalProps } from '@inertiajs/react'\n\ntype FormDataType = Record<string, FormDataConvertible>\n\ndeclare module '@inertiajs/react' {\n  interface InertiaFormProps<TForm extends FormDataType>\n    extends Omit<OriginalProps<TForm>, 'errors' | 'setError'> {\n    errors: Partial<Record<FormDataKeys<TForm>, string[]>>\n\n    setError(field: FormDataKeys<TForm>, value: string[]): void\n\n    setError(errors: Record<FormDataKeys<TForm>, string[]>): void\n  }\n\n  export { InertiaFormProps }\n\n  export function useForm<TForm extends FormDataType>(\n    initialValues?: TForm,\n  ): InertiaFormProps<TForm>\n  export function useForm<TForm extends FormDataType>(\n    rememberKey: string,\n    initialValues?: TForm,\n  ): InertiaFormProps<TForm>\n}\n```\n\n----------------------------------------\n\nTITLE: Rendered Head Output\nDESCRIPTION: The final HTML output when using multiple Head components with head-key to manage tag uniqueness.\nSOURCE: https://github.com/inertiajs/inertia-rails/blob/master/docs/guide/title-and-meta.md#2025-04-21_snippet_13\n\nLANGUAGE: html\nCODE:\n```\n<head>\n  <link rel=\"icon\" type=\"image/svg+xml\" href=\"/favicon.svg\" />\n  <title>About - My app</title>\n  <meta name=\"description\" content=\"This is a page specific description\" />\n</head>\n```\n\n----------------------------------------\n\nTITLE: Adding shadcn/ui Components\nDESCRIPTION: Command to add individual shadcn/ui components to the project.\nSOURCE: https://github.com/inertiajs/inertia-rails/blob/master/docs/cookbook/integrating-shadcn-ui.md#2025-04-21_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nnpx shadcn@latest add button\n```\n\n----------------------------------------\n\nTITLE: Setting Controller-Level History Encryption in Ruby\nDESCRIPTION: Shows how to enable history encryption for all actions in a controller by setting the encrypt_history config value in the controller.\nSOURCE: https://github.com/inertiajs/inertia-rails/blob/master/docs/guide/history-encryption.md#2025-04-21_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\nclass DashboardController < ApplicationController\n  inertia_config(encrypt_history: true)\n\n  # ...\nend\n```\n\n----------------------------------------\n\nTITLE: Installing SSR Dependencies for Vue in Inertia.js Rails Project\nDESCRIPTION: Command to install the @vue/server-renderer package, which is required for server-side rendering with Vue in an Inertia.js Rails project.\nSOURCE: https://github.com/inertiajs/inertia-rails/blob/master/docs/guide/server-side-rendering.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install @vue/server-renderer\n```\n\n----------------------------------------\n\nTITLE: RSpec Test Configuration\nDESCRIPTION: Configures RSpec for Inertia testing with example assertions.\nSOURCE: https://github.com/inertiajs/inertia-rails/blob/master/README.md#2025-04-21_snippet_7\n\nLANGUAGE: ruby\nCODE:\n```\nRSpec.describe EventController, type: :request do\n  describe '#index', inertia: true do\n    # check the component\n    expect_inertia.to render_component 'Event/Index'\n    \n    # access the component name\n    expect(inertia.component).to eq 'TestComponent'\n    \n    # props (including shared props)\n    expect_inertia.to have_exact_props({name: 'Brandon', sport: 'hockey'})\n    expect_inertia.to include_props({sport: 'hockey'})\n    \n    # access props\n    expect(inertia.props[:name]).to eq 'Brandon'\n    \n    # view data\n    expect_inertia.to have_exact_view_data({name: 'Brian', sport: 'basketball'})\n    expect_inertia.to include_view_data({sport: 'basketball'})\n    \n    # access view data \n    expect(inertia.view_data[:name]).to eq 'Brian'\n    \n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Sharing Data with Components\nDESCRIPTION: Demonstrates different methods of sharing data across all Inertia components.\nSOURCE: https://github.com/inertiajs/inertia-rails/blob/master/README.md#2025-04-21_snippet_5\n\nLANGUAGE: ruby\nCODE:\n```\nclass EventsController < ApplicationController\n  # share synchronously\n  inertia_share app_name: env['app.name']\n  \n  # share lazily, evaluated at render time\n  inertia_share do\n    if logged_in?\n      {\n        user: logged_in_user,\n      }\n    end\n  end\n  \n  # share lazily alternate syntax\n  inertia_share user_count: lambda { User.count }\n  \nend\n```\n\n----------------------------------------\n\nTITLE: Adding NProgress CSS Styles\nDESCRIPTION: HTML code to include NProgress styles via CDN.\nSOURCE: https://github.com/inertiajs/inertia-rails/blob/master/docs/guide/progress-indicators.md#2025-04-21_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<link\n  rel=\"stylesheet\"\n  href=\"https://cdnjs.cloudflare.com/ajax/libs/nprogress/0.2.0/nprogress.min.css\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Running Inertia Rails Generator\nDESCRIPTION: Command to run the built-in Rails generator that installs and sets up Inertia.js in a Rails application, including frontend dependencies.\nSOURCE: https://github.com/inertiajs/inertia-rails/blob/master/docs/guide/server-side-setup.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nbin/rails generate inertia:install\n```\n\n----------------------------------------\n\nTITLE: Configuring Asset Versioning in Inertia Rails\nDESCRIPTION: This snippet demonstrates how to configure Inertia Rails to enable automatic asset refreshing. It shows two methods: using a direct value and using lazy evaluation with a lambda function.\nSOURCE: https://github.com/inertiajs/inertia-rails/blob/master/docs/guide/asset-versioning.md#2025-04-21_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nInertiaRails.configure do |config|\n  config.version = ViteRuby.digest # or any other versioning method\nend\n\n# You can also use lazy evaluation\nInertiaRails.configure do |config|\n  config.version = lambda { ViteRuby.digest }\nend\n```\n\n----------------------------------------\n\nTITLE: Updating inertia-rails Gem Version\nDESCRIPTION: Ruby gem specification to update the inertia-rails gem to version 3.6 or higher, which is required for Inertia.js v2.0 compatibility.\nSOURCE: https://github.com/inertiajs/inertia-rails/blob/master/docs/guide/upgrade-guide.md#2025-04-21_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\ngem 'inertia_rails', '~> 3.6'\n```\n\n----------------------------------------\n\nTITLE: Installing Babel Dynamic Import Plugin for Webpacker\nDESCRIPTION: Command to install the Babel plugin required for enabling dynamic imports in Webpacker/Shakapacker bundler configuration.\nSOURCE: https://github.com/inertiajs/inertia-rails/blob/master/docs/guide/code-splitting.md#2025-04-21_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nnpm install @babel/plugin-syntax-dynamic-import\n```\n\n----------------------------------------\n\nTITLE: Configuring VitePress Home Page for Inertia.js Rails\nDESCRIPTION: YAML configuration that defines the structure and content of the VitePress documentation home page. Includes hero section with project name, description, call-to-action buttons, and logo image.\nSOURCE: https://github.com/inertiajs/inertia-rails/blob/master/docs/index.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# https://vitepress.dev/reference/default-theme-home-page\nlayout: home\n\nhero:\n  name: 'Inertia.js Rails'\n  text: 'Build single-page apps, without building an API.'\n  tagline: |-\n    Create modern single-page React, Vue, and Svelte apps using classic server-side routing.\n  actions:\n    - theme: brand\n      text: Get Started\n      link: /guide\n    - theme: alt\n      text: Install\n      link: /guide/server-side-setup\n  image:\n    src: /logo.svg\n    alt: Inertia.js Logo\n```\n\n----------------------------------------\n\nTITLE: Asset Version Mismatch Response\nDESCRIPTION: Example of a 409 Conflict response when the asset versions don't match, including the request headers and the response with X-Inertia-Location header.\nSOURCE: https://github.com/inertiajs/inertia-rails/blob/master/docs/guide/the-protocol.md#2025-04-21_snippet_2\n\nLANGUAGE: http\nCODE:\n```\nREQUEST\nGET: http://example.com/events/80\nAccept: text/html, application/xhtml+xml\nX-Requested-With: XMLHttpRequest\nX-Inertia: true\nX-Inertia-Version: 6b16b94d7c51cbe5b1fa42aac98241d5\n\nRESPONSE\n409: Conflict\nX-Inertia-Location: http://example.com/events/80\n```\n\n----------------------------------------\n\nTITLE: Removing Native Browser Event Listeners in Vue.js with Inertia\nDESCRIPTION: Demonstrates how to remove a native browser event listener in Vue.js with Inertia using removeEventListener().\nSOURCE: https://github.com/inertiajs/inertia-rails/blob/master/docs/guide/events.md#2025-04-21_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nimport { router } from '@inertiajs/vue3'\n\nlet startEventListener = (event) => {\n  console.log(`Starting a visit to ${event.detail.visit.url}`)\n}\n\ndocument.addEventListener('inertia:start', startEventListener)\n\n// Remove the listener...\ndocument.removeEventListener('inertia:start', startEventListener)\n```"
  }
]