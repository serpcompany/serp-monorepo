[
  {
    "owner": "nextauthjs",
    "repo": "docs",
    "content": "TITLE: JWT Token Helper Implementation\nDESCRIPTION: Example of using the getToken() helper function to verify and decrypt JWT tokens.\nSOURCE: https://github.com/nextauthjs/docs/blob/main/docs/configuration/options.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { getToken } from \"next-auth/jwt\"\n\nconst secret = process.env.NEXTAUTH_SECRET\n\nexport default async function handler(req, res) {\n  const token = await getToken({ req, secret })\n  console.log(\"JSON Web Token\", token)\n  res.end()\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Authorization Callbacks in NextAuth Middleware\nDESCRIPTION: Demonstrates how to implement authorization callbacks to control access based on token presence.\nSOURCE: https://github.com/nextauthjs/docs/blob/main/docs/configuration/nextjs.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n callbacks: {\n   authorized({ req , token }) {\n     if(token) return true // If there is a token, the user is authenticated\n   }\n }\n```\n\n----------------------------------------\n\nTITLE: Implementing NextAuth.js Database Adapter in TypeScript\nDESCRIPTION: Complete example of a custom NextAuth.js database adapter implementation showing all required and optional methods. The adapter includes functions for user management, session handling, account linking, and email verification token management.\nSOURCE: https://github.com/nextauthjs/docs/blob/main/docs/tutorials/creating-a-database-adapter.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n/** @return { import(\"next-auth/adapters\").Adapter } */\nexport default function MyAdapter(client, options = {}) {\n  return {\n    async createUser(user) {\n      return\n    },\n    async getUser(id) {\n      return\n    },\n    async getUserByEmail(email) {\n      return\n    },\n    async getUserByAccount({providerAccountId, provider}) {\n      return\n    },\n    async updateUser(user) {\n      return\n    },\n    async deleteUser(userId) {\n      return\n    },\n    async linkAccount(account) {\n      return\n    },\n    async unlinkAccount({ providerAccountId, provider}) {\n      return\n    },\n    async createSession({ sessionToken, userId, expires }) {\n      return\n    },\n    async getSessionAndUser(sessionToken) {\n      return\n    },\n    async updateSession({ sessionToken }) {\n      return\n    },\n    async deleteSession(sessionToken) {\n      return\n    },\n    async createVerificationToken({ identifier, expires, token }) {\n      return\n    },\n    async useVerificationToken({ identifier, token }) {\n      return\n    },\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic Credentials Provider in NextAuth.js\nDESCRIPTION: This snippet demonstrates how to set up a basic Credentials provider in NextAuth.js with username and password fields. It shows the structure of the authorize function which validates credentials and returns a user object or null based on authentication success.\nSOURCE: https://github.com/nextauthjs/docs/blob/main/docs/providers/credentials.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport CredentialsProvider from \"next-auth/providers/credentials\";\n...\nproviders: [\n  CredentialsProvider({\n    // The name to display on the sign in form (e.g. \"Sign in with...\")\n    name: \"Credentials\",\n    // The credentials is used to generate a suitable form on the sign in page.\n    // You can specify whatever fields you are expecting to be submitted.\n    // e.g. domain, username, password, 2FA token, etc.\n    // You can pass any HTML attribute to the <input> tag through the object.\n    credentials: {\n      username: { label: \"Username\", type: \"text\", placeholder: \"jsmith\" },\n      password: {  label: \"Password\", type: \"password\" }\n    },\n    async authorize(credentials, req) {\n      // Add logic here to look up the user from the credentials supplied\n      const user = { id: 1, name: \"J Smith\", email: \"jsmith@example.com\" }\n\n      if (user) {\n        // Any object returned will be saved in `user` property of the JWT\n        return user\n      } else {\n        // If you return null then an error will be displayed advising the user to check their details.\n        return null\n        \n        // You can also Reject this callback with an Error thus the user will be sent to the error page with the error message as a query parameter        \n      }\n    }\n  })\n]\n...\n```\n\n----------------------------------------\n\nTITLE: Using useSession Hook in React Component\nDESCRIPTION: This example demonstrates how to use the useSession hook to check authentication status and display user information or a sign-in link accordingly.\nSOURCE: https://github.com/nextauthjs/docs/blob/main/docs/getting-started/client.md#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useSession } from \"next-auth/react\"\n\nexport default function Component() {\n  const { data: session, status } = useSession()\n\n  if (status === \"authenticated\") {\n    return <p>Signed in as {session.user.email}</p>\n  }\n\n  return <a href=\"/api/auth/signin\">Sign in</a>\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring NextAuth.js API Route\nDESCRIPTION: Sets up the NextAuth.js authentication API route with GitHub provider configuration and optional database persistence. This file handles all authentication-related requests including signin, callback, and signout.\nSOURCE: https://github.com/nextauthjs/docs/blob/main/versioned_docs/version-v3/getting-started/example.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport NextAuth from \"next-auth\"\nimport Providers from \"next-auth/providers\"\n\nexport default NextAuth({\n  // Configure one or more authentication providers\n  providers: [\n    Providers.GitHub({\n      clientId: process.env.GITHUB_ID,\n      clientSecret: process.env.GITHUB_SECRET,\n    }),\n    // ...add more providers here\n  ],\n\n  // A database is optional, but required to persist accounts in a database\n  database: process.env.DATABASE_URL,\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Credentials Provider with NextAuth.js in JavaScript\nDESCRIPTION: This code snippet demonstrates how to configure a credentials provider within NextAuth.js, enabling authentication using custom credentials like username and password. It includes logic for validating user credentials by sending them to a specific endpoint. Dependencies include the 'next-auth/providers' library. Key inputs include user credentials, while outputs are user objects on successful authentication or null on failure. The credentials provider requires JSON Web Tokens to be enabled for sessions and does not persist users in a database.\nSOURCE: https://github.com/nextauthjs/docs/blob/main/versioned_docs/version-v3/configuration/providers.md#2025-04-21_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport Providers from `next-auth/providers`\n...\nproviders: [\n  Providers.Credentials({\n    // The name to display on the sign in form (e.g. 'Sign in with...')\n    name: 'Credentials',\n    // The credentials is used to generate a suitable form on the sign in page.\n    // You can specify whatever fields you are expecting to be submitted.\n    // e.g. domain, username, password, 2FA token, etc.\n    credentials: {\n      username: { label: \"Username\", type: \"text\", placeholder: \"jsmith\" },\n      password: {  label: \"Password\", type: \"password\" }\n    },\n    async authorize(credentials, req) {\n      // You need to provide your own logic here that takes the credentials\n      // submitted and returns either a object representing a user or value\n      // that is false/null if the credentials are invalid.\n      // e.g. return { id: 1, name: 'J Smith', email: 'jsmith@example.com' }\n      // You can also use the `req` object to obtain additional parameters\n      // (i.e., the request IP address)\n      const res = await fetch(\"/your/endpoint\", {\n        method: 'POST',\n        body: JSON.stringify(credentials),\n        headers: { \"Content-Type\": \"application/json\" }\n      })\n      const user = await res.json()\n\n      // If no error and we have user data, return it\n      if (res.ok && user) {\n        return user\n      }\n      // Return null if user data could not be retrieved\n      return null\n    }\n  })\n]\n...\n```\n\n----------------------------------------\n\nTITLE: Implementing SignIn Callback in NextAuth.js\nDESCRIPTION: Example implementation of the signIn callback showing how to control user access. Demonstrates handling allowed/denied sign-ins and custom redirects for unauthorized access.\nSOURCE: https://github.com/nextauthjs/docs/blob/main/versioned_docs/version-v3/configuration/callbacks.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\ncallbacks: {\n  /**\n   * @param  {object} user     User object\n   * @param  {object} account  Provider account\n   * @param  {object} profile  Provider profile\n   * @return {boolean|string}  Return `true` to allow sign in\n   *                           Return `false` to deny access\n   *                           Return `string` to redirect to (eg.: \"/unauthorized\")\n   */\n  async signIn(user, account, profile) {\n    const isAllowedToSignIn = true\n    if (isAllowedToSignIn) {\n      return true\n    } else {\n      // Return false to display a default error message\n      return false\n      // Or you can return a URL to redirect to:\n      // return '/unauthorized'\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring NextAuth.js API Route\nDESCRIPTION: Sets up the main NextAuth.js configuration with a GitHub provider in the dynamic API route handler.\nSOURCE: https://github.com/nextauthjs/docs/blob/main/docs/getting-started/example.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport NextAuth from \"next-auth\"\nimport GithubProvider from \"next-auth/providers/github\"\n\nexport default NextAuth({\n  // Configure one or more authentication providers\n  providers: [\n    GithubProvider({\n      clientId: process.env.GITHUB_ID,\n      clientSecret: process.env.GITHUB_SECRET,\n    }),\n    // ...add more providers here\n  ],\n})\n```\n\n----------------------------------------\n\nTITLE: Simple NextAuth.js Initialization in TypeScript\nDESCRIPTION: This snippet shows the basic initialization of NextAuth.js in a Next.js API route. It demonstrates how to import NextAuth and export it with configuration options.\nSOURCE: https://github.com/nextauthjs/docs/blob/main/docs/configuration/initialization.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport NextAuth from \"next-auth\"\n\nexport default NextAuth({\n  ...\n})\n```\n\n----------------------------------------\n\nTITLE: JWT Configuration Example\nDESCRIPTION: Example of JWT configuration options including maxAge and custom encode/decode functions.\nSOURCE: https://github.com/nextauthjs/docs/blob/main/docs/configuration/options.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\njwt: {\n  maxAge: 60 * 60 * 24 * 30,\n  async encode({ secret, token, maxAge }) {},\n  async decode({ secret, token }) {},\n}\n```\n\n----------------------------------------\n\nTITLE: Advanced NextAuth.js Initialization in TypeScript\nDESCRIPTION: This snippet demonstrates an advanced initialization of NextAuth.js, allowing for custom handling of requests before passing them to NextAuth. It includes type imports for Next.js API components.\nSOURCE: https://github.com/nextauthjs/docs/blob/main/docs/configuration/initialization.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { NextApiRequest, NextApiResponse } from \"next\"\nimport NextAuth from \"next-auth\"\n\nexport default async function auth(req: NextApiRequest, res: NextApiResponse) {\n  // Do whatever you want here, before the request is passed down to `NextAuth`\n  return await NextAuth(req, res, {\n    ...\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Authentication UI with useSession Hook\nDESCRIPTION: Demonstrates how to use the useSession hook to manage authentication state in a React component, including sign-in and sign-out functionality with conditional rendering based on session status.\nSOURCE: https://github.com/nextauthjs/docs/blob/main/versioned_docs/version-v3/getting-started/example.md#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { signIn, signOut, useSession } from \"next-auth/client\"\n\nexport default function Page() {\n  const [session, loading] = useSession()\n\n  return (\n    <>\n      {!session && (\n        <>\n          Not signed in <br />\n          <button onClick={() => signIn()}>Sign in</button>\n        </>\n      )}\n      {session && (\n        <>\n          Signed in as {session.user.email} <br />\n          <button onClick={() => signOut()}>Sign out</button>\n        </>\n      )}\n    </>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing getServerSideProps with Session\nDESCRIPTION: Server-side props implementation showing how to fetch and provide session data to pages in Next.js.\nSOURCE: https://github.com/nextauthjs/docs/blob/main/docs/getting-started/client.md#2025-04-21_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nimport { getSession } from \"next-auth/react\"\n\n...\n\nexport async function getServerSideProps(ctx) {\n  return {\n    props: {\n      session: await getSession(ctx)\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Custom Session Data\nDESCRIPTION: Shows how to access custom session data (like access tokens) using the useSession hook.\nSOURCE: https://github.com/nextauthjs/docs/blob/main/docs/getting-started/example.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useSession, signIn, signOut } from \"next-auth/react\"\n\nexport default function Component() {\n  const { data } = useSession()\n  const { accessToken } = data\n\n  return <div>Access Token: {accessToken}</div>\n}\n```\n\n----------------------------------------\n\nTITLE: Role-Based Authorization with NextAuth Middleware\nDESCRIPTION: Implements role-based access control for admin routes using NextAuth middleware.\nSOURCE: https://github.com/nextauthjs/docs/blob/main/docs/configuration/nextjs.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { withAuth } from \"next-auth/middleware\"\n\nexport default withAuth({\n  callbacks: {\n    authorized: ({ token }) => token?.role === \"admin\"\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: OAuth Provider Configuration Options in NextAuth.js\nDESCRIPTION: Presents the TypeScript interface for OAuth provider configuration options in NextAuth.js. It includes various settings such as endpoints, profile handling, and client metadata.\nSOURCE: https://github.com/nextauthjs/docs/blob/main/docs/configuration/providers/oauth.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\ninterface OAuthConfig {\n  wellKnown?: string\n  authorization: EndpointHandler<AuthorizationParameters>\n  token: EndpointHandler<\n    UrlParams,\n    {\n      params: CallbackParamsType\n      checks: OAuthChecks\n    },\n    { tokens: TokenSet }\n  >\n  userinfo?: EndpointHandler<UrlParams, { tokens: TokenSet }, Profile>\n  type: \"oauth\"\n  id: string\n  version: string\n  profile(profile: P, tokens: TokenSet): Awaitable<User & { id: string }>\n  checks?: ChecksType | ChecksType[]\n  clientId: string\n  clientSecret: string\n  idToken?: boolean\n  region?: string\n  issuer?: string\n  client?: Partial<ClientMetadata>\n}\n```\n\n----------------------------------------\n\nTITLE: Setting up NextAuth.js Provider in App Component\nDESCRIPTION: Configures the NextAuth.js Provider component in the Next.js _app.js file to enable shared session state across pages, improving performance and reducing network traffic.\nSOURCE: https://github.com/nextauthjs/docs/blob/main/versioned_docs/version-v3/getting-started/example.md#2025-04-21_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Provider } from \"next-auth/client\"\n\nexport default function App({ Component, pageProps }) {\n  return (\n    <Provider session={pageProps.session}>\n      <Component {...pageProps} />\n    </Provider>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Redirect Callback in NextAuth.js\nDESCRIPTION: Example of redirect callback implementation that validates and controls URL redirections. Ensures redirects only occur to trusted URLs within the same base URL.\nSOURCE: https://github.com/nextauthjs/docs/blob/main/versioned_docs/version-v3/configuration/callbacks.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\ncallbacks: {\n  /**\n   * @param  {string} url      URL provided as callback URL by the client\n   * @param  {string} baseUrl  Default base URL of site (can be used as fallback)\n   * @return {string}          URL the client will be redirect to\n   */\n  async redirect(url, baseUrl) {\n    return url.startsWith(baseUrl)\n      ? url\n      : baseUrl\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Provider in Next.js Application\nDESCRIPTION: The code snippet demonstrates integrating the NextAuth.js Provider in a Next.js app to share the session object across components using React Context. It improves performance by reducing redundant session checks and can be added to all Next.js pages via _app.js. It requires passing the session object through pageProps, which can be obtained using functions like getServerSideProps.\nSOURCE: https://github.com/nextauthjs/docs/blob/main/versioned_docs/version-v3/getting-started/client.md#2025-04-21_snippet_11\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Provider } from \"next-auth/client\"\n\nexport default function App({ Component, pageProps }) {\n  return (\n    <Provider session={pageProps.session}>\n      <Component {...pageProps} />\n    </Provider>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Securing API Routes with NextAuth JWT Validation\nDESCRIPTION: Shows how to protect API routes using JWT token validation with the getToken helper function. Requires proper secret configuration.\nSOURCE: https://github.com/nextauthjs/docs/blob/main/docs/tutorials/securing-pages-and-api-routes.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { getToken } from \"next-auth/jwt\"\n\nconst secret = process.env.SECRET\n\nexport default async (req, res) => {\n  const token = await getToken({ req, secret })\n  if (token) {\n    // Signed in\n    console.log(\"JSON Web Token\", JSON.stringify(token, null, 2))\n  } else {\n    // Not Signed in\n    res.status(401)\n  }\n  res.end()\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Session Callback in NextAuth.js\nDESCRIPTION: Example of implementing the session callback to expose custom token properties to the client. This callback is called whenever a session is checked.\nSOURCE: https://github.com/nextauthjs/docs/blob/main/docs/configuration/callbacks.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\ncallbacks: {\n  async session({ session, token, user }) {\n    // Send properties to the client, like an access_token from a provider.\n    session.accessToken = token.accessToken\n    return session\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing NextAuth.js Callbacks\nDESCRIPTION: Demonstrates how to use NextAuth.js callbacks to pass custom values from authentication flow to the frontend.\nSOURCE: https://github.com/nextauthjs/docs/blob/main/docs/getting-started/example.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\ncallbacks: {\n  async jwt({ token, account }) {\n    // Persist the OAuth access_token to the token right after signin\n    if (account) {\n      token.accessToken = account.access_token\n    }\n    return token\n  },\n  async session({ session, token, user }) {\n    // Send properties to the client, like an access_token from a provider.\n    session.accessToken = token.accessToken\n    return session\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Authentication Pages in NextAuth.js\nDESCRIPTION: This snippet shows how to configure custom authentication pages using the 'pages' option in NextAuth.js. It allows specifying custom routes for sign-in, sign-out, error handling, email verification, and new user redirection.\nSOURCE: https://github.com/nextauthjs/docs/blob/main/docs/configuration/pages.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n...\\n  pages: {\\n    signIn: '/auth/signin',\\n    signOut: '/auth/signout',\\n    error: '/auth/error', // Error code passed in query string as ?error=\\n    verifyRequest: '/auth/verify-request', // (used for check email message)\\n    newUser: '/auth/new-user' // New users will be directed here on first sign in (leave the property out if not of interest)\\n  }\\n...\n```\n\n----------------------------------------\n\nTITLE: Custom Pages Configuration\nDESCRIPTION: Configuration example for custom authentication-related pages including sign in, sign out, and error pages.\nSOURCE: https://github.com/nextauthjs/docs/blob/main/docs/configuration/options.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\npages: {\n  signIn: '/auth/signin',\n  signOut: '/auth/signout',\n  error: '/auth/error',\n  verifyRequest: '/auth/verify-request',\n  newUser: '/auth/new-user'\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Custom NextAuth.js Adapter with JSDoc Type Hints\nDESCRIPTION: Example showing how to create a custom adapter for NextAuth.js using JSDoc annotations for TypeScript type hints and editor autocomplete support. The adapter implements the required interface for database operations.\nSOURCE: https://github.com/nextauthjs/docs/blob/main/versioned_docs/version-v3/adapters/overview.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n/** @type { import(\"next-auth/adapters\").Adapter } */\nconst MyAdapter = () => {\n  return {\n    async getAdapter() {\n      return {\n        // your adapter methods here\n      }\n    },\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing JWT Callback in NextAuth.js\nDESCRIPTION: Example of implementing the JWT callback to persist OAuth access tokens. This callback is called whenever a JSON Web Token is created or updated.\nSOURCE: https://github.com/nextauthjs/docs/blob/main/docs/configuration/callbacks.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\ncallbacks: {\n  async jwt({ token, account }) {\n    // Persist the OAuth access_token to the token right after signin\n    if (account) {\n      token.accessToken = account.access_token\n    }\n    return token\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Client Session Handling in Next.js\nDESCRIPTION: This snippet illustrates an alternative approach to managing sessions in Next.js by showing a loading state on the first check and proceeding with client-side navigation without server queries after initial authentication. It integrates session checks and redirects unauthenticated users to sign in. It supports role-based authentication with an options object.\nSOURCE: https://github.com/nextauthjs/docs/blob/main/versioned_docs/version-v3/getting-started/client.md#2025-04-21_snippet_14\n\nLANGUAGE: js\nCODE:\n```\nexport default function AdminDashboard() {\n  const [session] = useSession()\n  // session is always non-null inside this page, all the way down the React tree.\n  return \"Some super secret dashboard\"\n}\n\nAdminDashboard.auth = true\n```\n\nLANGUAGE: jsx\nCODE:\n```\nexport default function App({ Component, pageProps }) {\n  return (\n    <Provider session={pageProps.session}>\n      {Component.auth ? (\n        <Auth>\n          <Component {...pageProps} />\n        </Auth>\n      ) : (\n        <Component {...pageProps} />\n      )}\n    </Provider>\n  )\n}\n\nfunction Auth({ children }) {\n  const [session, loading] = useSession()\n  const isUser = !!session?.user\n  React.useEffect(() => {\n    if (loading) return // Do nothing while loading\n    if (!isUser) signIn() // If not authenticated, force log in\n  }, [isUser, loading])\n\n  if (isUser) {\n    return children\n  }\n\n  // Session is being fetched, or no user.\n  // If no user, useEffect() will redirect.\n  return <div>Loading...</div>\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring NextAuth with Prisma Adapter\nDESCRIPTION: JavaScript configuration for integrating NextAuth.js with the Prisma adapter and setting up Google authentication\nSOURCE: https://github.com/nextauthjs/docs/blob/main/versioned_docs/version-v3/adapters/prisma.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport NextAuth from \"next-auth\"\nimport Providers from \"next-auth/providers\"\nimport { PrismaAdapter } from \"@next-auth/prisma-adapter\"\nimport { PrismaClient } from \"@prisma/client\"\n\nconst prisma = new PrismaClient()\n\nexport default NextAuth({\n  providers: [\n    Providers.Google({\n      clientId: process.env.GOOGLE_CLIENT_ID,\n      clientSecret: process.env.GOOGLE_CLIENT_SECRET,\n    }),\n  ],\n  adapter: PrismaAdapter(prisma),\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Protected Page with Required Session\nDESCRIPTION: This code shows how to create a protected page that requires authentication, using the useSession hook with the 'required' option.\nSOURCE: https://github.com/nextauthjs/docs/blob/main/docs/getting-started/client.md#2025-04-21_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useSession } from \"next-auth/react\"\n\nexport default function Admin() {\n  const { status } = useSession({\n    required: true,\n    onUnauthenticated() {\n      // The user is not authenticated, handle it here.\n    }\n  })\n\n  if (status === \"loading\") {\n    return \"Loading or not authenticated...\"\n  }\n\n  return \"User is logged in\"\n}\n```\n\n----------------------------------------\n\nTITLE: NextAuth Session Configuration with TypeScript\nDESCRIPTION: Demonstrates how to configure NextAuth with TypeScript, specifically focusing on session callbacks and type safety.\nSOURCE: https://github.com/nextauthjs/docs/blob/main/docs/getting-started/typescript.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport NextAuth from \"next-auth\"\n\nexport default NextAuth({\n  callbacks: {\n    session({ session, token, user }) {\n      return session // The return type will match the one returned in `useSession()`\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Fetching Authentication Providers in API Route\nDESCRIPTION: This example shows how to retrieve the list of configured authentication providers using the getProviders function in an API route.\nSOURCE: https://github.com/nextauthjs/docs/blob/main/docs/getting-started/client.md#2025-04-21_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\nimport { getProviders } from \"next-auth/react\"\n\nexport default async (req, res) => {\n  const providers = await getProviders()\n  console.log(\"Providers\", providers)\n  res.end()\n}\n```\n\n----------------------------------------\n\nTITLE: Securing Client-Side Pages with NextAuth useSession Hook\nDESCRIPTION: Demonstrates how to protect client-side rendered pages using the useSession React Hook from NextAuth.js. Shows handling of loading states and unauthorized access.\nSOURCE: https://github.com/nextauthjs/docs/blob/main/docs/tutorials/securing-pages-and-api-routes.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useSession, getSession } from \"next-auth/react\"\n\nexport default function Page() {\n  const { data: session, status } = useSession()\n\n  if (status === \"loading\") {\n    return <p>Loading...</p>\n  }\n\n  if (status === \"unauthenticated\") {\n    return <p>Access Denied</p>\n  }\n\n  return (\n    <>\n      <h1>Protected Page</h1>\n      <p>You can view this page because you are signed in.</p>\n    </>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: NextAuth Callback Functions\nDESCRIPTION: Implementation of authentication callback functions for handling sign in, redirect, session, and JWT operations.\nSOURCE: https://github.com/nextauthjs/docs/blob/main/versioned_docs/version-v3/configuration/options.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\ncallbacks: {\n  async signIn(user, account, profile) {\n    return true\n  },\n  async redirect(url, baseUrl) {\n    return baseUrl\n  },\n  async session(session, user) {\n    return session\n  },\n  async jwt(token, user, account, profile, isNewUser) {\n    return token\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Event Handling Overview for NextAuth.js\nDESCRIPTION: Lists and describes all available events in NextAuth.js including signIn, signOut, createUser, updateUser, linkAccount, session, and error events. Each event provides specific data objects for auditing and debugging purposes.\nSOURCE: https://github.com/nextauthjs/docs/blob/main/versioned_docs/version-v3/configuration/events.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n### signIn\n- `user` (from adapter or provider)\n- `account` (from adapter or provider)\n- `isNewUser` (new user status)\n\n### signOut\n- JWT or adapter session object\n\n### createUser\n- user object\n\n### updateUser\n- user object\n\n### linkAccount\n- `user`: adapter user object\n- `providerAccount`: provider return object\n\n### session\n- `session`: adapter session object\n- `jwt`: JWT token if enabled\n\n### error\n- error description object\n```\n\n----------------------------------------\n\nTITLE: Configuring Database Object in NextAuth.js\nDESCRIPTION: Example of configuring a MySQL database connection using a TypeORM configuration object with detailed connection parameters.\nSOURCE: https://github.com/nextauthjs/docs/blob/main/versioned_docs/version-v3/configuration/databases.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\ndatabase: {\n  type: 'mysql',\n  host: '127.0.0.1',\n  port: 3306,\n  username: 'nextauth',\n  password: 'password',\n  database: 'database_name'\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Credentials Provider in NextAuth.js\nDESCRIPTION: This code snippet demonstrates how to set up the Credentials provider in NextAuth.js. It includes defining credentials fields, implementing the authorize function, and handling user authentication against a custom endpoint.\nSOURCE: https://github.com/nextauthjs/docs/blob/main/docs/configuration/providers/credentials.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport CredentialsProvider from \"next-auth/providers/credentials\"\n...\nproviders: [\n  CredentialsProvider({\n    // The name to display on the sign in form (e.g. 'Sign in with...')\n    name: 'Credentials',\n    // The credentials is used to generate a suitable form on the sign in page.\n    // You can specify whatever fields you are expecting to be submitted.\n    // e.g. domain, username, password, 2FA token, etc.\n    // You can pass any HTML attribute to the <input> tag through the object.\n    credentials: {\n      username: { label: \"Username\", type: \"text\", placeholder: \"jsmith\" },\n      password: {  label: \"Password\", type: \"password\" }\n    },\n    async authorize(credentials, req) {\n      // You need to provide your own logic here that takes the credentials\n      // submitted and returns either a object representing a user or value\n      // that is false/null if the credentials are invalid.\n      // e.g. return { id: 1, name: 'J Smith', email: 'jsmith@example.com' }\n      // You can also use the `req` object to obtain additional parameters\n      // (i.e., the request IP address)\n      const res = await fetch(\"/your/endpoint\", {\n        method: 'POST',\n        body: JSON.stringify(credentials),\n        headers: { \"Content-Type\": \"application/json\" }\n      })\n      const user = await res.json()\n\n      // If no error and we have user data, return it\n      if (res.ok && user) {\n        return user\n      }\n      // Return null if user data could not be retrieved\n      return null\n    }\n  })\n]\n...\n```\n\n----------------------------------------\n\nTITLE: Implementing SignOut Button Component\nDESCRIPTION: React component implementation showing how to use the signOut function from next-auth/react to create a sign out button.\nSOURCE: https://github.com/nextauthjs/docs/blob/main/docs/getting-started/client.md#2025-04-21_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nimport { signOut } from \"next-auth/react\"\n\nexport default () => <button onClick={() => signOut()}>Sign out</button>\n```\n\n----------------------------------------\n\nTITLE: Initializing NextAuth.js Callbacks Overview\nDESCRIPTION: Basic structure showing all available callback functions in NextAuth.js including signIn, redirect, session, and jwt callbacks. These async functions control various aspects of the authentication flow.\nSOURCE: https://github.com/nextauthjs/docs/blob/main/docs/configuration/callbacks.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ncallbacks: {\n    async signIn({ user, account, profile, email, credentials }) {\n      return true\n    },\n    async redirect({ url, baseUrl }) {\n      return baseUrl\n    },\n    async session({ session, user, token }) {\n      return session\n    },\n    async jwt({ token, user, account, profile, isNewUser }) {\n      return token\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring NextAuth.js with Prisma Adapter\nDESCRIPTION: JavaScript code to set up NextAuth.js using the Prisma Adapter. It initializes the PrismaClient, configures the adapter, and sets up a Google provider for authentication.\nSOURCE: https://github.com/nextauthjs/docs/blob/main/docs/adapters/prisma.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport NextAuth from \"next-auth\"\nimport GoogleProvider from \"next-auth/providers/google\"\nimport { PrismaAdapter } from \"@next-auth/prisma-adapter\"\nimport { PrismaClient } from \"@prisma/client\"\n\nconst prisma = new PrismaClient()\n\nexport default NextAuth({\n  adapter: PrismaAdapter(prisma),\n  providers: [\n    GoogleProvider({\n      clientId: process.env.GOOGLE_CLIENT_ID,\n      clientSecret: process.env.GOOGLE_CLIENT_SECRET,\n    }),\n  ],\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring NextAuth.js with Conditional Providers for Vercel Preview\nDESCRIPTION: This code snippet demonstrates how to configure NextAuth.js with conditional providers based on the Vercel environment. It includes a Google provider for production and a Credentials provider for preview deployments.\nSOURCE: https://github.com/nextauthjs/docs/blob/main/docs/deployment.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport NextAuth from \"next-auth\"\nimport GoogleProvider from \"next-auth/providers/google\"\nimport CredentialsProvider from \"next-auth/providers/credentials\"\n\nconst previewLogin = CredentialsProvider({\n  name: \"Credentials\",\n  credentials: {\n    username: { label: \"Username\", type: \"text\", placeholder: \"jsmith\" },\n    password: { label: \"Password\", type: \"password\" },\n  },\n  async authorize() {\n    const user = () => {\n      return {\n        id: 1,\n        name: \"J Smith\",\n        email: \"jsmith@example.com\",\n        image: \"https://i.pravatar.cc/150?u=jsmith@example.com\",\n      }\n    }\n    return user()\n  },\n})\n\nconst options = {\n  providers: [\n    GoogleProvider({\n      clientId: process.env.GOOGLE_ID,\n      clientSecret: process.env.GOOGLE_SECRET,\n    }),\n    process.env.VERCEL_ENV === \"preview\" && previewLogin,\n  ],\n  ...\n}\n\nexport default (req, res) => NextAuth(req, res, options)\n```\n\n----------------------------------------\n\nTITLE: Securing Server-Side Pages with NextAuth getSession\nDESCRIPTION: Shows implementation of server-side page protection using getSession method. Includes both the page component and getServerSideProps function for session validation.\nSOURCE: https://github.com/nextauthjs/docs/blob/main/docs/tutorials/securing-pages-and-api-routes.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useSession, getSession } from \"next-auth/react\"\n\nexport default function Page() {\n  const { data: session } = useSession()\n\n  if (typeof window !== \"undefined\") return null\n\n  if (session) {\n    return (\n      <>\n        <h1>Protected Page</h1>\n        <p>You can view this page because you are signed in.</p>\n      </>\n    )\n  }\n  return <p>Access Denied</p>\n}\n\nexport async function getServerSideProps(context) {\n  return {\n    props: {\n      session: await getSession(context),\n    },\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Client Side getSession() Example\nDESCRIPTION: This example shows how to use the `getSession()` method on the client side to retrieve session information. It calls the `/api/auth/session` endpoint and returns a promise with the session object or null if no session exists.\nSOURCE: https://github.com/nextauthjs/docs/blob/main/versioned_docs/version-v3/getting-started/client.md#2025-04-21_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nasync function myFunction() {\n  const session = await getSession()\n  /* ... */\n}\n```\n\n----------------------------------------\n\nTITLE: Creating MySQL Authentication Schema for NextAuth.js\nDESCRIPTION: Defines the complete database schema for NextAuth.js authentication system including tables for accounts, sessions, users, and verification requests. Creates necessary indexes for optimal query performance. Uses 6-digit precision timestamps stored in UTC timezone.\nSOURCE: https://github.com/nextauthjs/docs/blob/main/versioned_docs/version-v3/adapters/typeorm/mysql.md#2025-04-21_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE accounts\n  (\n    id                   INT NOT NULL AUTO_INCREMENT,\n    compound_id          VARCHAR(255) NOT NULL,\n    user_id              INTEGER NOT NULL,\n    provider_type        VARCHAR(255) NOT NULL,\n    provider_id          VARCHAR(255) NOT NULL,\n    provider_account_id  VARCHAR(255) NOT NULL,\n    refresh_token        TEXT,\n    access_token         TEXT,\n    access_token_expires TIMESTAMP(6),\n    created_at           TIMESTAMP(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6),\n    updated_at           TIMESTAMP(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6),\n    PRIMARY KEY (id)\n  );\n\nCREATE TABLE sessions\n  (\n    id            INT NOT NULL AUTO_INCREMENT,\n    user_id       INTEGER NOT NULL,\n    expires       TIMESTAMP(6) NOT NULL,\n    session_token VARCHAR(255) NOT NULL,\n    access_token  VARCHAR(255) NOT NULL,\n    created_at    TIMESTAMP(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6),\n    updated_at    TIMESTAMP(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6),\n    PRIMARY KEY (id)\n  );\n\nCREATE TABLE users\n  (\n    id             INT NOT NULL AUTO_INCREMENT,\n    name           VARCHAR(255),\n    email          VARCHAR(255),\n    email_verified TIMESTAMP(6),\n    image          VARCHAR(255),\n    created_at     TIMESTAMP(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6),\n    updated_at     TIMESTAMP(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6),\n    PRIMARY KEY (id)\n  );\n\nCREATE TABLE verification_requests\n  (\n    id         INT NOT NULL AUTO_INCREMENT,\n    identifier VARCHAR(255) NOT NULL,\n    token      VARCHAR(255) NOT NULL,\n    expires    TIMESTAMP(6) NOT NULL,\n    created_at TIMESTAMP(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6),\n    updated_at TIMESTAMP(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6),\n    PRIMARY KEY (id)\n  );\n\nCREATE UNIQUE INDEX compound_id\n  ON accounts(compound_id);\n\nCREATE INDEX provider_account_id\n  ON accounts(provider_account_id);\n\nCREATE INDEX provider_id\n  ON accounts(provider_id);\n\nCREATE INDEX user_id\n  ON accounts(user_id);\n\nCREATE UNIQUE INDEX session_token\n  ON sessions(session_token);\n\nCREATE UNIQUE INDEX access_token\n  ON sessions(access_token);\n\nCREATE UNIQUE INDEX email\n  ON users(email);\n\nCREATE UNIQUE INDEX token\n  ON verification_requests(token);\n```\n\n----------------------------------------\n\nTITLE: Implementing Session Callback in NextAuth.js\nDESCRIPTION: Example of session callback implementation showing how to customize session data. Demonstrates adding custom properties from JWT to the session object.\nSOURCE: https://github.com/nextauthjs/docs/blob/main/versioned_docs/version-v3/configuration/callbacks.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\ncallbacks: {\n  /**\n   * @param  {object} session      Session object\n   * @param  {object} token        User object    (if using database sessions)\n   *                               JSON Web Token (if not using database sessions)\n   * @return {object}              Session that will be returned to the client\n   */\n  async session(session, token) {\n    // Add property to session, like an access_token from a provider.\n    session.accessToken = token.accessToken\n    return session\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Redirect Callback in NextAuth.js\nDESCRIPTION: Default implementation of the redirect callback that handles URL validation and redirection. Ensures redirects are only allowed to URLs on the same domain by default.\nSOURCE: https://github.com/nextauthjs/docs/blob/main/docs/configuration/callbacks.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\ncallbacks: {\n  redirect({ url, baseUrl   }) {\n    if (url.startsWith(baseUrl)) return url\n    // Allows relative callback URLs\n    else if (url.startsWith(\"/\")) return new URL(url, baseUrl).toString()\n    return baseUrl\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing NextAuth.js Basic Callbacks Structure\nDESCRIPTION: Basic structure showing all available callback functions in NextAuth.js including signIn, redirect, session, and jwt callbacks. Each callback returns a default value.\nSOURCE: https://github.com/nextauthjs/docs/blob/main/versioned_docs/version-v3/configuration/callbacks.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ncallbacks: {\n  async signIn(user, account, profile) {\n    return true\n  },\n  async redirect(url, baseUrl) {\n    return baseUrl\n  },\n  async session(session, user) {\n    return session\n  },\n  async jwt(token, user, account, profile, isNewUser) {\n    return token\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing SignIn Callback in NextAuth.js\nDESCRIPTION: Example of implementing the signIn callback to control user authentication access. Shows how to allow or deny sign-in attempts and handle custom redirects for unauthorized access.\nSOURCE: https://github.com/nextauthjs/docs/blob/main/docs/configuration/callbacks.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\ncallbacks: {\n  async signIn({ user, account, profile, email, credentials }) {\n    const isAllowedToSignIn = true\n    if (isAllowedToSignIn) {\n      return true\n    } else {\n      // Return false to display a default error message\n      return false\n      // Or you can return a URL to redirect to:\n      // return '/unauthorized'\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring SessionProvider in Next.js App\nDESCRIPTION: Implementation of SessionProvider wrapper in Next.js _app.js file to enable session state sharing across components.\nSOURCE: https://github.com/nextauthjs/docs/blob/main/docs/getting-started/client.md#2025-04-21_snippet_11\n\nLANGUAGE: jsx\nCODE:\n```\nimport { SessionProvider } from \"next-auth/react\"\n\nexport default function App({\n  Component,\n  pageProps: { session, ...pageProps },\n}) {\n  return (\n    <SessionProvider session={session}>\n      <Component {...pageProps} />\n    </SessionProvider>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Email Sign-in in NextAuth.js\nDESCRIPTION: This example shows how to create a custom email sign-in form using NextAuth.js. It includes a form that submits the email address and CSRF token to the email sign-in endpoint. The component uses getServerSideProps to fetch the CSRF token.\nSOURCE: https://github.com/nextauthjs/docs/blob/main/docs/configuration/pages.md#2025-04-21_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport { getCsrfToken } from \"next-auth/react\"\\n\\nexport default function SignIn({ csrfToken }) {\\n  return (\\n    <form method=\"post\" action=\"/api/auth/signin/email\">\\n      <input name=\"csrfToken\" type=\"hidden\" defaultValue={csrfToken} />\\n      <label>\\n        Email address\\n        <input type=\"email\" id=\"email\" name=\"email\" />\\n      </label>\\n      <button type=\"submit\">Sign in with Email</button>\\n    </form>\\n  )\\n}\\n\\n// This is the recommended way for Next.js 9.3 or newer\\nexport async function getServerSideProps(context) {\\n  const csrfToken = await getCsrfToken(context)\\n  return {\\n    props: { csrfToken },\\n  }\\n}\\n\\n/*\\n// If older than Next.js 9.3\\nSignIn.getInitialProps = async (context) => {\\n  return {\\n    csrfToken: await getCsrfToken(context)\\n  }\\n}\\n*/\n```\n\n----------------------------------------\n\nTITLE: Configuring NextAuth.js Provider in App\nDESCRIPTION: The following JavaScript snippet configures the NextAuth.js Provider for a Next.js application through `_app.js`, passing session props to ensure immediate session availability. This configuration is essential for using the `useSession` hook effectively across the application.\nSOURCE: https://github.com/nextauthjs/docs/blob/main/versioned_docs/version-v3/tutorials/securing-pages-and-api-routes.md#2025-04-21_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { Provider } from \"next-auth/client\"\n\nexport default ({ Component, pageProps }) => {\n  return (\n    <Provider session={pageProps.session}>\n      <Component {...pageProps} />\n    </Provider>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Using Session with useSession Hook in NextAuth\nDESCRIPTION: Example of using the useSession hook in a React component with TypeScript.\nSOURCE: https://github.com/nextauthjs/docs/blob/main/versioned_docs/version-v3/getting-started/typescript.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useSession } from \"next-auth/client\"\n\nexport default function IndexPage() {\n  // `session` should match `callbacks.session()` in `NextAuth()`\n  const [session] = useSession()\n\n  return (\n    // Your component\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Securing API Routes with NextAuth getSession\nDESCRIPTION: Demonstrates how to protect API routes using the getSession method to validate authenticated requests.\nSOURCE: https://github.com/nextauthjs/docs/blob/main/docs/tutorials/securing-pages-and-api-routes.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { getSession } from \"next-auth/react\"\n\nexport default async (req, res) => {\n  const session = await getSession({ req })\n  if (session) {\n    // Signed in\n    console.log(\"Session\", JSON.stringify(session, null, 2))\n  } else {\n    // Not Signed in\n    res.status(401)\n  }\n  res.end()\n}\n```\n\n----------------------------------------\n\nTITLE: Securing API Routes with getSession\nDESCRIPTION: This JavaScript snippet secures API routes by using the `getSession()` method from NextAuth.js to access session data. Appropriate for server-side use only, it validates user authentication before processing requests, responding with status `401` if the user is not signed in.\nSOURCE: https://github.com/nextauthjs/docs/blob/main/versioned_docs/version-v3/tutorials/securing-pages-and-api-routes.md#2025-04-21_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { getSession } from \"next-auth/client\"\n\nexport default async (req, res) => {\n  const session = await getSession({ req })\n  if (session) {\n    // Signed in\n    console.log(\"Session\", JSON.stringify(session, null, 2))\n  } else {\n    // Not Signed in\n    res.status(401)\n  }\n  res.end()\n}\n```\n\n----------------------------------------\n\nTITLE: Obtaining Session with getServerSideProps\nDESCRIPTION: This snippet shows how to fetch the session server-side in a Next.js page using getServerSideProps with next-auth/client's getSession function. It populates pageProps with the current session, supporting both server and client-side rendering.\nSOURCE: https://github.com/nextauthjs/docs/blob/main/versioned_docs/version-v3/getting-started/client.md#2025-04-21_snippet_12\n\nLANGUAGE: js\nCODE:\n```\nimport { getSession } from \"next-auth/client\"\n\n...\n\nexport async function getServerSideProps(ctx) {\n  return {\n    props: {\n      session: await getSession(ctx)\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Extending NextAuth Session Types\nDESCRIPTION: Shows how to extend the default NextAuth session types using TypeScript module augmentation to add custom properties.\nSOURCE: https://github.com/nextauthjs/docs/blob/main/docs/getting-started/typescript.md#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport NextAuth from \"next-auth\"\n\ndeclare module \"next-auth\" {\n  /**\n   * Returned by `useSession`, `getSession` and received as a prop on the `SessionProvider` React Context\n   */\n  interface Session {\n    user: {\n      /** The user's postal address. */\n      address: string\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring GitHub Provider in NextAuth.js\nDESCRIPTION: This code snippet demonstrates how to set up the GitHub provider in NextAuth.js. It shows the basic configuration using environment variables for the client ID and client secret.\nSOURCE: https://github.com/nextauthjs/docs/blob/main/docs/providers/github.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport GitHubProvider from \"next-auth/providers/github\";\n...\nproviders: [\n  GitHubProvider({\n    clientId: process.env.GITHUB_CLIENT_ID,\n    clientSecret: process.env.GITHUB_CLIENT_SECRET\n  })\n]\n...\n```\n\n----------------------------------------\n\nTITLE: Authentication Callbacks Configuration\nDESCRIPTION: Example of configuring authentication callbacks for sign in, redirect, session, and JWT handling.\nSOURCE: https://github.com/nextauthjs/docs/blob/main/docs/configuration/options.md#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\ncallbacks: {\n  async signIn({ user, account, profile, email, credentials }) {\n    return true\n  },\n  async redirect({ url, baseUrl }) {\n    return baseUrl\n  },\n  async session({ session, token, user }) {\n    return session\n  },\n  async jwt({ token, user, account, profile, isNewUser }) {\n    return token\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Cookies in NextAuth.js Configuration (JavaScript)\nDESCRIPTION: This snippet demonstrates how to override default cookie settings in NextAuth.js. It shows custom configurations for session token, callback URL, CSRF token, PKCE code verifier, and state cookies.\nSOURCE: https://github.com/nextauthjs/docs/blob/main/docs/configuration/options.md#2025-04-21_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\ncookies: {\n  sessionToken: {\n    name: `__Secure-next-auth.session-token`,\n    options: {\n      httpOnly: true,\n      sameSite: 'lax',\n      path: '/',\n      secure: true\n    }\n  },\n  callbackUrl: {\n    name: `__Secure-next-auth.callback-url`,\n    options: {\n      sameSite: 'lax',\n      path: '/',\n      secure: true\n    }\n  },\n  csrfToken: {\n    name: `__Host-next-auth.csrf-token`,\n    options: {\n      httpOnly: true,\n      sameSite: 'lax',\n      path: '/',\n      secure: true\n    }\n  },\n  pkceCodeVerifier: {\n    name: `${cookiePrefix}next-auth.pkce.code_verifier`,\n    options: {\n      httpOnly: true,\n      sameSite: 'lax',\n      path: '/',\n      secure: useSecureCookies\n    }\n  },\n  state: {\n    name: `${cookiePrefix}next-auth.state`,\n    options: {\n      httpOnly: true,\n      sameSite: \"lax\",\n      path: \"/\",\n      secure: useSecureCookies,\n    },\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Google OAuth Provider Configuration in NextAuth.js\nDESCRIPTION: Example configuration object for Google OAuth provider showing basic OpenID Connect setup with profile data mapping.\nSOURCE: https://github.com/nextauthjs/docs/blob/main/docs/configuration/providers/oauth.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  id: \"google\",\n  name: \"Google\",\n  type: \"oauth\",\n  wellKnown: \"https://accounts.google.com/.well-known/openid-configuration\",\n  authorization: { params: { scope: \"openid email profile\" } },\n  idToken: true,\n  checks: [\"pkce\", \"state\"],\n  profile(profile) {\n    return {\n      id: profile.sub,\n      name: profile.name,\n      email: profile.email,\n      image: profile.picture,\n    }\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing JWT Callback in NextAuth.js\nDESCRIPTION: Example of JWT callback implementation showing how to modify the token during sign-in. Demonstrates adding custom data like access tokens to the JWT payload.\nSOURCE: https://github.com/nextauthjs/docs/blob/main/versioned_docs/version-v3/configuration/callbacks.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\ncallbacks: {\n  /**\n   * @param  {object}  token     Decrypted JSON Web Token\n   * @param  {object}  user      User object      (only available on sign in)\n   * @param  {object}  account   Provider account (only available on sign in)\n   * @param  {object}  profile   Provider profile (only available on sign in)\n   * @param  {boolean} isNewUser True if new user (only available on sign in)\n   * @return {object}            JSON Web Token that will be saved\n   */\n  async jwt(token, user, account, profile, isNewUser) {\n    // Add access_token to the token right after signin\n    if (account?.accessToken) {\n      token.accessToken = account.accessToken\n    }\n    return token\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using useSession Hook for Authentication State\nDESCRIPTION: Demonstrates how to implement authentication UI using the useSession hook to check authentication status and handle sign-in/out.\nSOURCE: https://github.com/nextauthjs/docs/blob/main/docs/getting-started/example.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useSession, signIn, signOut } from \"next-auth/react\"\n\nexport default function Component() {\n  const { data: session } = useSession()\n  if (session) {\n    return (\n      <>\n        Signed in as {session.user.email} <br />\n        <button onClick={() => signOut()}>Sign out</button>\n      </>\n    )\n  }\n  return (\n    <>\n      Not signed in <br />\n      <button onClick={() => signIn()}>Sign in</button>\n    </>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Securing Server-Side Rendered Pages with getSession\nDESCRIPTION: This JavaScript example shows how to secure server-side rendered pages using the `getSession()` method from NextAuth.js. It fetches session data and conditionally renders protected content based on session validity. Requires next-auth/client, with the optional use of `useSession`. Returns a page with protected content if a session is valid; otherwise, it shows 'Access Denied'.\nSOURCE: https://github.com/nextauthjs/docs/blob/main/versioned_docs/version-v3/tutorials/securing-pages-and-api-routes.md#2025-04-21_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { useSession, getSession } from \"next-auth/client\"\n\nexport default function Page() {\n  const [session, loading] = useSession()\n\n  if (typeof window !== \"undefined\" && loading) return null\n\n  if (session) {\n    return (\n      <>\n        <h1>Protected Page</h1>\n        <p>You can view this page because you are signed in.</p>\n      </>\n    )\n  }\n  return <p>Access Denied</p>\n}\n\nexport async function getServerSideProps(context) {\n  const session = await getSession(context)\n  return {\n    props: { session },\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Default sendVerificationRequest Function in NextAuth.js\nDESCRIPTION: This snippet shows the complete source code for the default `sendVerificationRequest()` method used by the Email provider.  It uses Nodemailer to send an email with a link to verify the user's email address.\nSOURCE: https://github.com/nextauthjs/docs/blob/main/versioned_docs/version-v3/providers/email.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport nodemailer from \"nodemailer\"\n\nconst sendVerificationRequest = ({\n  identifier: email,\n  url,\n  token,\n  baseUrl,\n  provider,\n}) => {\n  return new Promise((resolve, reject) => {\n    const { server, from } = provider\n    // Strip protocol from URL and use domain as site name\n    const site = baseUrl.replace(/^https?:\\/\\//, \"\")\n\n    nodemailer.createTransport(server).sendMail(\n      {\n        to: email,\n        from,\n        subject: `Sign in to ${site}`,\n        text: text({ url, site, email }),\n        html: html({ url, site, email }),\n      },\n      (error) => {\n        if (error) {\n          logger.error(\"SEND_VERIFICATION_EMAIL_ERROR\", email, error)\n          return reject(new Error(\"SEND_VERIFICATION_EMAIL_ERROR\", error))\n        }\n        return resolve()\n      }\n    )\n  })\n}\n\n// Email HTML body\nconst html = ({ url, site, email }) => {\n  // Insert invisible space into domains and email address to prevent both the\n  // email address and the domain from being turned into a hyperlink by email\n  // clients like Outlook and Apple mail, as this is confusing because it seems\n  // like they are supposed to click on their email address to sign in.\n  const escapedEmail = `${email.replace(/\\./g, \"&#8203;.\")}`\n  const escapedSite = `${site.replace(/\\./g, \"&#8203;.\")}`\n\n  // Some simple styling options\n  const backgroundColor = \"#f9f9f9\"\n  const textColor = \"#444444\"\n  const mainBackgroundColor = \"#ffffff\"\n  const buttonBackgroundColor = \"#346df1\"\n  const buttonBorderColor = \"#346df1\"\n  const buttonTextColor = \"#ffffff\"\n\n  // Uses tables for layout and inline CSS due to email client limitations\n  return `\n<body style=\"background: ${backgroundColor};\">\n  <table width=\"100%\" border=\"0\" cellspacing=\"0\" cellpadding=\"0\">\n    <tr>\n      <td align=\"center\" style=\"padding: 10px 0px 20px 0px; font-size: 22px; font-family: Helvetica, Arial, sans-serif; color: ${textColor};\">\n        <strong>${escapedSite}</strong>\n      </td>\n    </tr>\n  </table>\n  <table width=\"100%\" border=\"0\" cellspacing=\"20\" cellpadding=\"0\" style=\"background: ${mainBackgroundColor}; max-width: 600px; margin: auto; border-radius: 10px;\">\n    <tr>\n      <td align=\"center\" style=\"padding: 10px 0px 0px 0px; font-size: 18px; font-family: Helvetica, Arial, sans-serif; color: ${textColor};\">\n        Sign in as <strong>${escapedEmail}</strong>\n      </td>\n    </tr>\n    <tr>\n      <td align=\"center\" style=\"padding: 20px 0;\">\n        <table border=\"0\" cellspacing=\"0\" cellpadding=\"0\">\n          <tr>\n            <td align=\"center\" style=\"border-radius: 5px;\" bgcolor=\"${buttonBackgroundColor}\"><a href=\"${url}\" target=\"_blank\" style=\"font-size: 18px; font-family: Helvetica, Arial, sans-serif; color: ${buttonTextColor}; text-decoration: none; text-decoration: none;border-radius: 5px; padding: 10px 20px; border: 1px solid ${buttonBorderColor}; display: inline-block; font-weight: bold;\">Sign in</a></td>\n          </tr>\n        </table>\n      </td>\n    </tr>\n    <tr>\n      <td align=\"center\" style=\"padding: 0px 0px 10px 0px; font-size: 16px; line-height: 22px; font-family: Helvetica, Arial, sans-serif; color: ${textColor};\">\n        If you did not request this email you can safely ignore it.\n      </td>\n    </tr>\n  </table>\n</body>\n`\n}\n\n// Email text body – fallback for email clients that don't render HTML\nconst text = ({ url, site }) => `Sign in to ${site}\\n${url}\\n\\n`\n```\n\n----------------------------------------\n\nTITLE: Domain-Restricted Google Sign-In Verification\nDESCRIPTION: Callback implementation to restrict access to verified email accounts from a specific domain using the email_verified property.\nSOURCE: https://github.com/nextauthjs/docs/blob/main/docs/providers/google.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst options = {\n  ...\n  callbacks: {\n    async signIn({ account, profile }) {\n      if (account.provider === \"google\") {\n        return profile.email_verified && profile.email.endsWith(\"@example.com\")\n      }\n      return true // Do different verification for other providers that don't have `email_verified`\n    },\n  }\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring SessionProvider with Custom Options\nDESCRIPTION: Extended SessionProvider configuration showing how to customize session behavior with refetch intervals and window focus handling.\nSOURCE: https://github.com/nextauthjs/docs/blob/main/docs/getting-started/client.md#2025-04-21_snippet_13\n\nLANGUAGE: jsx\nCODE:\n```\nimport { SessionProvider } from \"next-auth/react\"\n\nexport default function App({\n  Component,\n  pageProps: { session, ...pageProps },\n}) {\n  return (\n    <SessionProvider\n      session={session}\n      // Re-fetch session every 5 minutes\n      refetchInterval={5 * 60}\n      // Re-fetches session when window is focused\n      refetchOnWindowFocus={true}\n    >\n      <Component {...pageProps} />\n    </SessionProvider>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Provider in NextAuth.js Setup\nDESCRIPTION: Example of adding a custom provider alongside built-in providers in the NextAuth.js initialization configuration.\nSOURCE: https://github.com/nextauthjs/docs/blob/main/docs/configuration/providers/oauth.md#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport TwitterProvider from \"next-auth/providers/twitter\"\n...\nproviders: [\n  TwitterProvider({\n    clientId: process.env.TWITTER_ID,\n    clientSecret: process.env.TWITTER_SECRET,\n  }),\n  {\n    id: 'customProvider',\n    name: 'CustomProvider',\n    type: 'oauth',\n    scope: ''  // Make sure to request the users email address\n    ...\n  }\n]\n...\n```\n\n----------------------------------------\n\nTITLE: Implementing SessionProvider in Next.js App\nDESCRIPTION: Configures the SessionProvider component to enable shared session state across the application.\nSOURCE: https://github.com/nextauthjs/docs/blob/main/docs/getting-started/example.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// pages/_app.js\nimport { SessionProvider } from \"next-auth/react\"\n\nexport default function App({\n  Component,\n  pageProps: { session, ...pageProps },\n}) {\n  return (\n    <SessionProvider session={session}>\n      <Component {...pageProps} />\n    </SessionProvider>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Applying Database Migrations with Prisma\nDESCRIPTION: Command to apply the Prisma migrations to the database, creating the necessary tables and columns based on the defined schema.\nSOURCE: https://github.com/nextauthjs/docs/blob/main/docs/adapters/prisma.md#2025-04-21_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nnpx prisma migrate dev\n```\n\n----------------------------------------\n\nTITLE: Configuring GitHub Provider in NextAuth.js\nDESCRIPTION: Example showing how to configure the GitHub authentication provider in NextAuth.js using environment variables for client credentials. The implementation requires setting up GitHub OAuth credentials and specifying them through environment variables GITHUB_CLIENT_ID and GITHUB_CLIENT_SECRET.\nSOURCE: https://github.com/nextauthjs/docs/blob/main/versioned_docs/version-v3/providers/github.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport Providers from `next-auth/providers`\n...\nproviders: [\n  Providers.GitHub({\n    clientId: process.env.GITHUB_CLIENT_ID,\n    clientSecret: process.env.GITHUB_CLIENT_SECRET\n  })\n]\n...\n```\n\n----------------------------------------\n\nTITLE: Using useSession() React Hook\nDESCRIPTION: This example demonstrates how to use the `useSession()` React Hook in NextAuth.js to check if a user is signed in. It imports the hook from `next-auth/client` and uses it to conditionally render content based on the session status.\nSOURCE: https://github.com/nextauthjs/docs/blob/main/versioned_docs/version-v3/getting-started/client.md#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useSession } from \"next-auth/client\"\n\nexport default function Component() {\n  const [session, loading] = useSession()\n\n  if (session) {\n    return <p>Signed in as {session.user.email}</p>\n  }\n\n  return <a href=\"/api/auth/signin\">Sign in</a>\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Database Connection String in NextAuth.js\nDESCRIPTION: Example of configuring a MySQL database connection using a connection string format in NextAuth.js configuration.\nSOURCE: https://github.com/nextauthjs/docs/blob/main/versioned_docs/version-v3/configuration/databases.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ndatabase: \"mysql://nextauth:password@127.0.0.1:3306/database_name\"\n```\n\n----------------------------------------\n\nTITLE: Authentication Events Configuration\nDESCRIPTION: Configuration of event handlers for various authentication-related events like sign in, sign out, and user creation.\nSOURCE: https://github.com/nextauthjs/docs/blob/main/docs/configuration/options.md#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nevents: {\n  async signIn(message) { /* on successful sign in */ },\n  async signOut(message) { /* on signout */ },\n  async createUser(message) { /* user created */ },\n  async updateUser(message) { /* user updated - e.g. their email was verified */ },\n  async linkAccount(message) { /* account (e.g. Twitter) linked to a user */ },\n  async session(message) { /* session is active */ },\n  async error(message) { /* error in authentication flow */ }\n}\n```\n\n----------------------------------------\n\nTITLE: Securing Client-Side Pages with React Hook\nDESCRIPTION: This JavaScript snippet demonstrates how to protect a client-side page using the `useSession` React Hook from NextAuth.js. It checks for session validity to conditionally display protected content. Dependencies include next-auth/client and a valid session. Key parameters are session state and loading state. Outputs a protected page if the user is signed in, otherwise shows 'Access Denied'.\nSOURCE: https://github.com/nextauthjs/docs/blob/main/versioned_docs/version-v3/tutorials/securing-pages-and-api-routes.md#2025-04-21_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { useSession, getSession } from \"next-auth/client\"\n\nexport default function Page() {\n  const [session, loading] = useSession()\n\n  if (loading) return null\n\n  if (!loading && !session) return <p>Access Denied</p>\n\n  return (\n    <>\n      <h1>Protected Page</h1>\n      <p>You can view this page because you are signed in.</p>\n    </>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Google Provider Configuration in NextAuth.js\nDESCRIPTION: Basic setup for Google OAuth provider in NextAuth.js using environment variables for client credentials.\nSOURCE: https://github.com/nextauthjs/docs/blob/main/docs/providers/google.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport GoogleProvider from \"next-auth/providers/google\";\n...\nproviders: [\n  GoogleProvider({\n    clientId: process.env.GOOGLE_CLIENT_ID,\n    clientSecret: process.env.GOOGLE_CLIENT_SECRET\n  })\n]\n...\n```\n\n----------------------------------------\n\nTITLE: Configuring OAuth Provider in NextAuth.js API Route\nDESCRIPTION: Demonstrates how to add an OAuth provider (Twitter in this example) to the NextAuth.js configuration in the API route file. It shows importing the provider and setting up the configuration with environment variables.\nSOURCE: https://github.com/nextauthjs/docs/blob/main/docs/configuration/providers/oauth.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport TwitterProvider from \"next-auth/providers/\"\n...\nproviders: [\n  TwitterProvider({\n    clientId: process.env.TWITTER_ID,\n    clientSecret: process.env.TWITTER_SECRET\n  })\n],\n...\n```\n\n----------------------------------------\n\nTITLE: Creating Database Schema with Prisma Migrate\nDESCRIPTION: Command to create and execute an SQL migration file using Prisma Migrate. This step is necessary to set up the database schema for NextAuth.js.\nSOURCE: https://github.com/nextauthjs/docs/blob/main/docs/adapters/prisma.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpx prisma migrate dev\n```\n\n----------------------------------------\n\nTITLE: signOut() Example\nDESCRIPTION: This example demonstrates how to use the `signOut()` method to sign the user out and redirect them back to the page they started on.  It also handles CSRF tokens automatically and reloads the page upon completion.\nSOURCE: https://github.com/nextauthjs/docs/blob/main/versioned_docs/version-v3/getting-started/client.md#2025-04-21_snippet_10\n\nLANGUAGE: js\nCODE:\n```\nimport { signOut } from \"next-auth/client\"\n\nexport default () => <button onClick={() => signOut()}>Sign out</button>\n```\n\n----------------------------------------\n\nTITLE: Prisma Schema Definition\nDESCRIPTION: Complete Prisma schema definition including Account, Session, User, and VerificationRequest models with their relationships and field definitions\nSOURCE: https://github.com/nextauthjs/docs/blob/main/versioned_docs/version-v3/adapters/prisma.md#2025-04-21_snippet_2\n\nLANGUAGE: json\nCODE:\n```\ngenerator client {\n  provider = \"prisma-client-js\"\n}\n\ndatasource db {\n  provider = \"sqlite\"\n  url      = \"file:./dev.db\"\n}\n\nmodel Account {\n  id                 String    @id @default(cuid())\n  userId             String\n  providerType       String\n  providerId         String\n  providerAccountId  String\n  refreshToken       String?\n  accessToken        String?\n  accessTokenExpires DateTime?\n  createdAt          DateTime  @default(now())\n  updatedAt          DateTime  @updatedAt\n  user               User      @relation(fields: [userId], references: [id])\n\n  @@unique([providerId, providerAccountId])\n}\n\nmodel Session {\n  id           String   @id @default(cuid())\n  userId       String\n  expires      DateTime\n  sessionToken String   @unique\n  accessToken  String   @unique\n  createdAt    DateTime @default(now())\n  updatedAt    DateTime @updatedAt\n  user         User     @relation(fields: [userId], references: [id])\n}\n\nmodel User {\n  id            String    @id @default(cuid())\n  name          String?\n  email         String?   @unique\n  emailVerified DateTime?\n  image         String?\n  createdAt     DateTime  @default(now())\n  updatedAt     DateTime  @updatedAt\n  accounts      Account[]\n  sessions      Session[]\n}\n\nmodel VerificationRequest {\n  id         String   @id @default(cuid())\n  identifier String\n  token      String   @unique\n  expires    DateTime\n  createdAt  DateTime @default(now())\n  updatedAt  DateTime @updatedAt\n\n  @@unique([identifier, token])\n}\n```\n\n----------------------------------------\n\nTITLE: Server Side getSession() Example\nDESCRIPTION: This example shows how to use the `getSession()` method on the server side to retrieve session information. It imports `getSession` from `next-auth/client` and passes the request object as an argument.\nSOURCE: https://github.com/nextauthjs/docs/blob/main/versioned_docs/version-v3/getting-started/client.md#2025-04-21_snippet_3\n\nLANGUAGE: js\nCODE:\n```\nimport { getSession } from \"next-auth/client\"\n\nexport default async (req, res) => {\n  const session = await getSession({ req })\n  /* ... */\n  res.end()\n}\n```\n\n----------------------------------------\n\nTITLE: Default Adapter Configuration with TypeORM in NextAuth.js\nDESCRIPTION: Configuration using the Default adapter explicitly, which is equivalent to the basic database configuration. It specifies SQLite as the database type with in-memory storage.\nSOURCE: https://github.com/nextauthjs/docs/blob/main/versioned_docs/version-v3/adapters/typeorm/overview.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nadapter: Adapters.Default({\n  type: \"sqlite\",\n  database: \":memory:\",\n  synchronize: true,\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple Credentials Providers in NextAuth.js\nDESCRIPTION: This example demonstrates how to configure multiple Credentials providers with unique IDs in NextAuth.js. It shows two different authentication methods: a domain-based login and a two-factor authentication system, each with custom credential fields.\nSOURCE: https://github.com/nextauthjs/docs/blob/main/docs/providers/credentials.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nproviders: [\n  CredentialsProvider({\n    id: \"domain-login\",\n    name: \"Domain Account\",\n    async authorize(credentials, req) {\n      const user = {\n        /* add function to get user */\n      }\n      return user\n    },\n    credentials: {\n      domain: {\n        label: \"Domain\",\n        type: \"text \",\n        placeholder: \"CORPNET\",\n        value: \"CORPNET\",\n      },\n      username: { label: \"Username\", type: \"text \", placeholder: \"jsmith\" },\n      password: { label: \"Password\", type: \"password\" },\n    },\n  }),\n  CredentialsProvider({\n    id: \"intranet-credentials\",\n    name: \"Two Factor Auth\",\n    async authorize(credentials, req) {\n      const user = {\n        /* add function to get user */\n      }\n      return user\n    },\n    credentials: {\n      email: { label: \"Username\", type: \"text \", placeholder: \"jsmith\" },\n      \"2fa-key\": { label: \"2FA Key\" },\n    },\n  }),\n  /* ... additional providers ... /*/\n]\n```\n\n----------------------------------------\n\nTITLE: Handling Refresh Token Errors Client-Side with NextAuth.js using JavaScript\nDESCRIPTION: This client-side implementation handles refresh token errors by leveraging the NextAuth.js client API. When a 'RefreshAccessTokenError' is detected, the user is prompted to sign in again. This code uses the useEffect hook to check for errors in the session object and calls signIn() as a remedial action. It requires 'next-auth/client' for session management.\nSOURCE: https://github.com/nextauthjs/docs/blob/main/versioned_docs/version-v3/tutorials/refresh-token-rotation.md#2025-04-21_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { signIn, useSession } from \"next-auth/client\";\nimport { useEffect } from \"react\";\n\nconst HomePage() {\n  const [session] = useSession();\n\n  useEffect(() => {\n    if (session?.error === \"RefreshAccessTokenError\") {\n      signIn(); // Force sign in to hopefully resolve error\n    }\n  }, [session]);\n\nreturn (...)\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom TypeScript Adapter for NextAuth.js\nDESCRIPTION: Example showing how to create a custom adapter with TypeScript type safety in NextAuth.js. This demonstrates the basic structure for implementing a custom adapter with proper type definitions.\nSOURCE: https://github.com/nextauthjs/docs/blob/main/docs/getting-started/typescript.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Adapter } from \"next-auth/adapters\"\n\nfunction MyAdapter(): Adapter {\n  return {\n    // your adapter methods here\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing OAuth Sign-in in NextAuth.js\nDESCRIPTION: This example demonstrates how to create a custom OAuth sign-in page using NextAuth.js. It fetches available authentication providers and renders buttons for each provider. The component uses getServerSideProps for server-side rendering.\nSOURCE: https://github.com/nextauthjs/docs/blob/main/docs/configuration/pages.md#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { getProviders, signIn } from \"next-auth/react\"\\n\\nexport default function SignIn({ providers }) {\\n  return (\\n    <>\\n      {Object.values(providers).map((provider) => (\\n        <div key={provider.name}>\\n          <button onClick={() => signIn(provider.id)}>\\n            Sign in with {provider.name}\\n          </button>\\n        </div>\\n      ))}\\n    </>\\n  )\\n}\\n\\n// This is the recommended way for Next.js 9.3 or newer\\nexport async function getServerSideProps(context) {\\n  const providers = await getProviders()\\n  return {\\n    props: { providers },\\n  }\\n}\\n\\n/*\\n// If older than Next.js 9.3\\nSignIn.getInitialProps = async () => {\\n  return {\\n    providers: await getProviders()\\n  }\\n}\\n*/\n```\n\n----------------------------------------\n\nTITLE: Implementing Sign-In Button with OAuth Provider\nDESCRIPTION: This snippet demonstrates how to create a sign-in button that initiates the OAuth sign-in flow for a specific provider (Google in this case).\nSOURCE: https://github.com/nextauthjs/docs/blob/main/docs/getting-started/client.md#2025-04-21_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\nimport { signIn } from \"next-auth/react\"\n\nexport default () => (\n  <button onClick={() => signIn(\"google\")}>Sign in with Google</button>\n)\n```\n\n----------------------------------------\n\nTITLE: Creating Custom JavaScript Adapter with JSDoc Types\nDESCRIPTION: Shows how to implement a custom adapter in JavaScript while maintaining type hints through JSDoc annotations. This approach provides TypeScript-like benefits in JavaScript code.\nSOURCE: https://github.com/nextauthjs/docs/blob/main/docs/getting-started/typescript.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n/** @return { import(\"next-auth/adapters\").Adapter } */\nfunction MyAdapter() {\n  return {\n    // your adapter methods here\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing OAuth Token Refresh in NextAuth.js Configuration\nDESCRIPTION: This code snippet demonstrates how to set up NextAuth.js to handle OAuth token refreshing. It includes the configuration for Google Provider, custom authorization URL, and implementations of JWT and session callbacks for token management.\nSOURCE: https://github.com/nextauthjs/docs/blob/main/docs/tutorials/refresh-token-rotation.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport NextAuth from \"next-auth\"\nimport GoogleProvider from \"next-auth/providers/google\"\n\nconst GOOGLE_AUTHORIZATION_URL =\n  \"https://accounts.google.com/o/oauth2/v2/auth?\" +\n  new URLSearchParams({\n    prompt: \"consent\",\n    access_type: \"offline\",\n    response_type: \"code\",\n  })\n\n/**\n * Takes a token, and returns a new token with updated\n * `accessToken` and `accessTokenExpires`. If an error occurs,\n * returns the old token and an error property\n */\nasync function refreshAccessToken(token) {\n  try {\n    const url =\n      \"https://oauth2.googleapis.com/token?\" +\n      new URLSearchParams({\n        client_id: process.env.GOOGLE_CLIENT_ID,\n        client_secret: process.env.GOOGLE_CLIENT_SECRET,\n        grant_type: \"refresh_token\",\n        refresh_token: token.refreshToken,\n      })\n\n    const response = await fetch(url, {\n      headers: {\n        \"Content-Type\": \"application/x-www-form-urlencoded\",\n      },\n      method: \"POST\",\n    })\n\n    const refreshedTokens = await response.json()\n\n    if (!response.ok) {\n      throw refreshedTokens\n    }\n\n    return {\n      ...token,\n      accessToken: refreshedTokens.access_token,\n      accessTokenExpires: Date.now() + refreshedTokens.expires_in * 1000,\n      refreshToken: refreshedTokens.refresh_token ?? token.refreshToken, // Fall back to old refresh token\n    }\n  } catch (error) {\n    console.log(error)\n\n    return {\n      ...token,\n      error: \"RefreshAccessTokenError\",\n    }\n  }\n}\n\nexport default NextAuth({\n  providers: [\n    GoogleProvider({\n      clientId: process.env.GOOGLE_CLIENT_ID,\n      clientSecret: process.env.GOOGLE_CLIENT_SECRET,\n      authorization: GOOGLE_AUTHORIZATION_URL,\n    }),\n  ],\n  callbacks: {\n    async jwt({ token, user, account }) {\n      // Initial sign in\n      if (account && user) {\n        return {\n          accessToken: account.access_token,\n          accessTokenExpires: Date.now() + account.expires_in * 1000,\n          refreshToken: account.refresh_token,\n          user,\n        }\n      }\n\n      // Return previous token if the access token has not expired yet\n      if (Date.now() < token.accessTokenExpires) {\n        return token\n      }\n\n      // Access token has expired, try to update it\n      return refreshAccessToken(token)\n    },\n    async session({ session, token }) {\n      session.user = token.user\n      session.accessToken = token.accessToken\n      session.error = token.error\n\n      return session\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: NextAuth Session Configuration with TypeScript\nDESCRIPTION: Example of configuring NextAuth with TypeScript, showing session callback implementation.\nSOURCE: https://github.com/nextauthjs/docs/blob/main/versioned_docs/version-v3/getting-started/typescript.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport NextAuth from \"next-auth\"\n\nexport default NextAuth({\n  callbacks: {\n    session(session, token) {\n      return session // The type here should match the one returned in `useSession()`\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Customizing Verification Email with NextAuth.js Email Provider\nDESCRIPTION: This snippet shows how to customize the verification email sent by the Email provider by defining a custom `sendVerificationRequest` function. It receives parameters like `email`, `url`, `token`, `baseUrl`, and `provider`, allowing you to fully control the email sending process.\nSOURCE: https://github.com/nextauthjs/docs/blob/main/versioned_docs/version-v3/providers/email.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nproviders: [\n  Providers.Email({\n    server: process.env.EMAIL_SERVER,\n    from: process.env.EMAIL_FROM,\n    sendVerificationRequest: ({\n      identifier: email,\n      url,\n      token,\n      baseUrl,\n      provider,\n    }) => {\n      /* your function */\n    },\n  }),\n]\n```\n\n----------------------------------------\n\nTITLE: Implementing NextAuth MongoDB Adapter\nDESCRIPTION: Configuration of NextAuth.js with MongoDB adapter using the previously configured client promise.\nSOURCE: https://github.com/nextauthjs/docs/blob/main/docs/adapters/mongodb.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport NextAuth from \"next-auth\"\nimport { MongoDBAdapter } from \"@next-auth/mongodb-adapter\"\nimport clientPromise from \"lib/mongodb\"\n\n// For more information on each option (and a full list of options) go to\n// https://next-auth.js.org/configuration/options\nexport default NextAuth({\n  adapter: MongoDBAdapter(clientPromise),\n  ...\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Slack Provider in NextAuth.js\nDESCRIPTION: This code snippet demonstrates how to set up the Slack authentication provider in NextAuth.js. It imports the SlackProvider and configures it with the client ID and client secret obtained from the Slack API.\nSOURCE: https://github.com/nextauthjs/docs/blob/main/docs/providers/slack.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport SlackProvider from \"next-auth/providers/slack\";\n...\nproviders: [\n  SlackProvider({\n    clientId: process.env.SLACK_CLIENT_ID,\n    clientSecret: process.env.SLACK_CLIENT_SECRET\n  })\n]\n...\n```\n\n----------------------------------------\n\nTITLE: Implementing Credentials Sign-in in NextAuth.js\nDESCRIPTION: This example demonstrates how to create a custom credentials-based sign-in form using NextAuth.js. It includes a form that submits the username, password, and CSRF token to the credentials callback endpoint. The component uses getServerSideProps to fetch the CSRF token.\nSOURCE: https://github.com/nextauthjs/docs/blob/main/docs/configuration/pages.md#2025-04-21_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport { getCsrfToken } from \"next-auth/react\"\\n\\nexport default function SignIn({ csrfToken }) {\\n  return (\\n    <form method=\"post\" action=\"/api/auth/callback/credentials\">\\n      <input name=\"csrfToken\" type=\"hidden\" defaultValue={csrfToken} />\\n      <label>\\n        Username\\n        <input name=\"username\" type=\"text\" />\\n      </label>\\n      <label>\\n        Password\\n        <input name=\"password\" type=\"password\" />\\n      </label>\\n      <button type=\"submit\">Sign in</button>\\n    </form>\\n  )\\n}\\n\\n// This is the recommended way for Next.js 9.3 or newer\\nexport async function getServerSideProps(context) {\\n  return {\\n    props: {\\n      csrfToken: await getCsrfToken(context),\\n    },\\n  }\\n}\\n\\n/*\\n// If older than Next.js 9.3\\nSignIn.getInitialProps = async (context) => {\\n  return {\\n    csrfToken: await getCsrfToken(context)\\n  }\\n}\\n*/\n```\n\n----------------------------------------\n\nTITLE: Customizing Logger in NextAuth.js Configuration (JavaScript)\nDESCRIPTION: This snippet demonstrates how to override the default logger in NextAuth.js configuration. It allows intercepting logs and sending them to a third-party logging service.\nSOURCE: https://github.com/nextauthjs/docs/blob/main/docs/configuration/options.md#2025-04-21_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nimport log from \"logging-service\"\n\nexport default NextAuth({\n  ...\n  logger: {\n    error(code, metadata) {\n      log.error(code, metadata)\n    },\n    warn(code) {\n      log.warn(code)\n    },\n    debug(code, metadata) {\n      log.debug(code, metadata)\n    }\n  }\n  ...\n})\n```\n\n----------------------------------------\n\nTITLE: Custom Entity Models Definition\nDESCRIPTION: Extended TypeORM entity classes with custom fields and relationships for NextAuth.js\nSOURCE: https://github.com/nextauthjs/docs/blob/main/docs/adapters/typeorm.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  Entity,\n  PrimaryGeneratedColumn,\n  Column,\n  ManyToOne,\n  OneToMany,\n  ValueTransformer,\n} from \"typeorm\"\n\nconst transformer: Record<\"date\" | \"bigint\", ValueTransformer> = {\n  date: {\n    from: (date: string | null) => date && new Date(parseInt(date, 10)),\n    to: (date?: Date) => date?.valueOf().toString(),\n  },\n  bigint: {\n    from: (bigInt: string | null) => bigInt && parseInt(bigInt, 10),\n    to: (bigInt?: number) => bigInt?.toString(),\n  },\n}\n\n@Entity({ name: \"users\" })\nexport class UserEntity {\n  @PrimaryGeneratedColumn(\"uuid\")\n  id!: string\n\n  @Column({ type: \"varchar\", nullable: true })\n  name!: string | null\n\n  @Column({ type: \"varchar\", nullable: true, unique: true })\n  email!: string | null\n\n  @Column({ type: \"varchar\", nullable: true, transformer: transformer.date })\n  emailVerified!: string | null\n\n  @Column({ type: \"varchar\", nullable: true })\n  image!: string | null\n\n  @Column({ type: \"varchar\", nullable: true })\n  role!: string | null\n\n  @OneToMany(() => SessionEntity, (session) => session.userId)\n  sessions!: SessionEntity[]\n\n  @OneToMany(() => AccountEntity, (account) => account.userId)\n  accounts!: AccountEntity[]\n}\n```\n\n----------------------------------------\n\nTITLE: Refreshing OAuth Tokens with NextAuth.js using JavaScript\nDESCRIPTION: This server-side code snippet demonstrates refresh token rotation for OAuth providers using NextAuth.js. It uses JWT and session callbacks to handle token persistence and refresh when an access token expires. The OAuth request is tailored for Google's Identity Provider, requiring client ID and secret as environment variables. The function takes an expired token and returns a refreshed token or an error.\nSOURCE: https://github.com/nextauthjs/docs/blob/main/versioned_docs/version-v3/tutorials/refresh-token-rotation.md#2025-04-21_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport NextAuth from \"next-auth\"\nimport Providers from \"next-auth/providers\"\n\nconst GOOGLE_AUTHORIZATION_URL =\n  \"https://accounts.google.com/o/oauth2/v2/auth?\" +\n  new URLSearchParams({\n    prompt: \"consent\",\n    access_type: \"offline\",\n    response_type: \"code\",\n  })\n\n/**\n * Takes a token, and returns a new token with updated\n * `accessToken` and `accessTokenExpires`. If an error occurs,\n * returns the old token and an error property\n */\nasync function refreshAccessToken(token) {\n  try {\n    const url =\n      \"https://oauth2.googleapis.com/token?\" +\n      new URLSearchParams({\n        client_id: process.env.GOOGLE_CLIENT_ID,\n        client_secret: process.env.GOOGLE_CLIENT_SECRET,\n        grant_type: \"refresh_token\",\n        refresh_token: token.refreshToken,\n      })\n\n    const response = await fetch(url, {\n      headers: {\n        \"Content-Type\": \"application/x-www-form-urlencoded\",\n      },\n      method: \"POST\",\n    })\n\n    const refreshedTokens = await response.json()\n\n    if (!response.ok) {\n      throw refreshedTokens\n    }\n\n    return {\n      ...token,\n      accessToken: refreshedTokens.access_token,\n      accessTokenExpires: Date.now() + refreshedTokens.expires_in * 1000,\n      refreshToken: refreshedTokens.refresh_token ?? token.refreshToken, // Fall back to old refresh token\n    }\n  } catch (error) {\n    console.log(error)\n\n    return {\n      ...token,\n      error: \"RefreshAccessTokenError\",\n    }\n  }\n}\n\nexport default NextAuth({\n  providers: [\n    Providers.Google({\n      clientId: process.env.GOOGLE_CLIENT_ID,\n      clientSecret: process.env.GOOGLE_CLIENT_SECRET,\n      authorizationUrl: GOOGLE_AUTHORIZATION_URL,\n    }),\n  ],\n  callbacks: {\n    async jwt(token, user, account) {\n      // Initial sign in\n      if (account && user) {\n        return {\n          accessToken: account.accessToken,\n          accessTokenExpires: Date.now() + account.expires_in * 1000,\n          refreshToken: account.refresh_token,\n          user,\n        }\n      }\n\n      // Return previous token if the access token has not expired yet\n      if (Date.now() < token.accessTokenExpires) {\n        return token\n      }\n\n      // Access token has expired, try to update it\n      return refreshAccessToken(token)\n    },\n    async session(session, token) {\n      if (token) {\n        session.user = token.user\n        session.accessToken = token.accessToken\n        session.error = token.error\n      }\n\n      return session\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Email Provider in NextAuth.js\nDESCRIPTION: This code snippet demonstrates how to configure the Email provider in NextAuth.js. It shows the basic setup including server and from email address configuration. The maxAge option is commented out but can be uncommented to set a custom expiration time for email links.\nSOURCE: https://github.com/nextauthjs/docs/blob/main/docs/configuration/providers/email.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport EmailProvider from `next-auth/providers/email`\n...\nproviders: [\n  EmailProvider({\n    server: process.env.EMAIL_SERVER,\n    from: process.env.EMAIL_FROM,\n    // maxAge: 24 * 60 * 60, // How long email links are valid for (default 24h)\n  }),\n],\n...\n```\n\n----------------------------------------\n\nTITLE: Configuring NextAuth.js OAuth Provider Example\nDESCRIPTION: Example configuration for setting up Twitter OAuth provider with NextAuth.js in an API route file.\nSOURCE: https://github.com/nextauthjs/docs/blob/main/versioned_docs/version-v3/configuration/providers.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport Providers from `next-auth/providers`\n...\nproviders: [\n  Providers.Twitter({\n    clientId: process.env.TWITTER_ID,\n    clientSecret: process.env.TWITTER_SECRET\n  })\n],\n...\n```\n\n----------------------------------------\n\nTITLE: Customizing Provider with Session Options in Next.js\nDESCRIPTION: This code snippet customizes the NextAuth.js Provider with options to control client session behavior, including clientMaxAge and keepAlive settings. These options help manage session update frequencies, improving performance while affecting network traffic and server load. It is vital to configure these values considering session expiry times.\nSOURCE: https://github.com/nextauthjs/docs/blob/main/versioned_docs/version-v3/getting-started/client.md#2025-04-21_snippet_13\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Provider } from 'next-auth/client'\n\nexport default function App ({ Component, pageProps }) {\n  return (\n    <Provider session={pageProps.session}\n      options={{\n        clientMaxAge: 60,     // Re-fetch session if cache is older than 60 seconds\n        keepAlive:    5 * 60 // Send keepAlive message every 5 minutes\n      }}\n      >\n      <Component {...pageProps} />\n    </Provider>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Force Refresh Token Configuration for Google Provider\nDESCRIPTION: Advanced configuration to force Google to always provide a refresh token during sign-in, requiring user consent each time.\nSOURCE: https://github.com/nextauthjs/docs/blob/main/docs/providers/google.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst options = {\n  ...\n  providers: [\n    GoogleProvider({\n      clientId: process.env.GOOGLE_ID,\n      clientSecret: process.env.GOOGLE_SECRET,\n      authorization: {\n        params: {\n          prompt: \"consent\",\n          access_type: \"offline\",\n          response_type: \"code\"\n        }\n      }\n    })\n  ],\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: NextAuth Event Handlers\nDESCRIPTION: Event handler functions for authentication-related events such as sign in, sign out, user creation, and errors.\nSOURCE: https://github.com/nextauthjs/docs/blob/main/versioned_docs/version-v3/configuration/options.md#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nevents: {\n  async signIn(message) { /* on successful sign in */ },\n  async signOut(message) { /* on signout */ },\n  async createUser(message) { /* user created */ },\n  async updateUser(message) { /* user updated - e.g. their email was verified */ },\n  async linkAccount(message) { /* account (e.g. Twitter) linked to a user */ },\n  async session(message) { /* session is active */ },\n  async error(message) { /* error in authentication flow */ }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Prisma Schema for NextAuth.js\nDESCRIPTION: Prisma schema definition for use with NextAuth.js. It includes models for Account, Session, User, and VerificationToken, which are required for the authentication system.\nSOURCE: https://github.com/nextauthjs/docs/blob/main/docs/adapters/prisma.md#2025-04-21_snippet_2\n\nLANGUAGE: json\nCODE:\n```\ndatasource db {\n  provider = \"postgresql\"\n  url      = env(\"DATABASE_URL\")\n  shadowDatabaseUrl = env(\"SHADOW_DATABASE_URL\") // Only needed when using a cloud provider that doesn't support the creation of new databases, like Heroku. Learn more: https://pris.ly/migrate-shadow\n}\n\ngenerator client {\n  provider        = \"prisma-client-js\"\n  previewFeatures = [\"referentialActions\"] // You won't need this in Prisma 3.X or higher.\n}\n\nmodel Account {\n  id                 String  @id @default(cuid())\n  userId             String\n  type               String\n  provider           String\n  providerAccountId  String\n  refresh_token      String?  @db.Text\n  access_token       String?  @db.Text\n  expires_at         Int?\n  token_type         String?\n  scope              String?\n  id_token           String?  @db.Text\n  session_state      String?\n  oauth_token_secret String?\n  oauth_token        String?\n\n  user User @relation(fields: [userId], references: [id], onDelete: Cascade)\n\n  @@unique([provider, providerAccountId])\n}\n\nmodel Session {\n  id           String   @id @default(cuid())\n  sessionToken String   @unique\n  userId       String\n  expires      DateTime\n  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)\n}\n\nmodel User {\n  id            String    @id @default(cuid())\n  name          String?\n  email         String?   @unique\n  emailVerified DateTime?\n  image         String?\n  accounts      Account[]\n  sessions      Session[]\n}\n\nmodel VerificationToken {\n  identifier String\n  token      String   @unique\n  expires    DateTime\n\n  @@unique([identifier, token])\n}\n```\n\n----------------------------------------\n\nTITLE: Protecting API Routes with NextAuth.js\nDESCRIPTION: Shows how to protect API routes using the getSession method to verify authentication status.\nSOURCE: https://github.com/nextauthjs/docs/blob/main/docs/getting-started/example.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { getSession } from \"next-auth/react\"\n\nexport default async (req, res) => {\n  const session = await getSession({ req })\n\n  if (session) {\n    res.send({\n      content:\n        \"This is protected content. You can access this content because you are signed in.\",\n    })\n  } else {\n    res.send({\n      error: \"You must be sign in to view the protected content on this page.\",\n    })\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring TypeORM Adapter in NextAuth.js\nDESCRIPTION: Basic setup of TypeORM adapter in the NextAuth.js configuration file\nSOURCE: https://github.com/nextauthjs/docs/blob/main/docs/adapters/typeorm.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport NextAuth from \"next-auth\"\nimport { TypeORMLegacyAdapter } from \"@next-auth/typeorm-legacy-adapter\"\n\nexport default NextAuth({\n  adapter: TypeORMLegacyAdapter(\"yourconnectionstring\"),\n  ...\n})\n```\n\n----------------------------------------\n\nTITLE: Credentials Sign-in Form Implementation\nDESCRIPTION: Implementation of a credentials-based sign-in form that includes username/password fields and CSRF token handling.\nSOURCE: https://github.com/nextauthjs/docs/blob/main/versioned_docs/version-v3/configuration/pages.md#2025-04-21_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport { getCsrfToken } from \"next-auth/client\"\\n\\nexport default function SignIn({ csrfToken }) {\\n  return (\\n    <form method=\"post\" action=\"/api/auth/callback/credentials\">\\n      <input name=\"csrfToken\" type=\"hidden\" defaultValue={csrfToken} />\\n      <label>\\n        Username\\n        <input name=\"username\" type=\"text\" />\\n      </label>\\n      <label>\\n        Password\\n        <input name=\"password\" type=\"password\" />\\n      </label>\\n      <button type=\"submit\">Sign in</button>\\n    </form>\\n  )\\n}\\n\\n// This is the recommended way for Next.js 9.3 or newer\\nexport async function getServerSideProps(context) {\\n  return {\\n    props: {\\n      csrfToken: await getCsrfToken(context),\\n    },\\n  }\\n}\n```\n\n----------------------------------------\n\nTITLE: Securing API Routes with getToken\nDESCRIPTION: This API route example demonstrates using the `getToken()` method from next-auth/jwt to authenticate requests using JSON Web Tokens (JWT). Suitable for server-side environments, it retrieves the JWT without manual decryption. Requires the `NEXTAUTH_URL` environment variable and server-side access to JWT secrets. Outputs a 401 status if the token is not valid.\nSOURCE: https://github.com/nextauthjs/docs/blob/main/versioned_docs/version-v3/tutorials/securing-pages-and-api-routes.md#2025-04-21_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\n// This is an example of how to read a JSON Web Token from an API route\nimport jwt from \"next-auth/jwt\"\n\nconst secret = process.env.SECRET\n\nexport default async (req, res) => {\n  const token = await jwt.getToken({ req, secret })\n  if (token) {\n    // Signed in\n    console.log(\"JSON Web Token\", JSON.stringify(token, null, 2))\n  } else {\n    // Not Signed in\n    res.status(401)\n  }\n  res.end()\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Prisma Dependencies\nDESCRIPTION: Commands for installing required Prisma packages including the client, CLI, and NextAuth adapter\nSOURCE: https://github.com/nextauthjs/docs/blob/main/versioned_docs/version-v3/adapters/prisma.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @prisma/client @next-auth/prisma-adapter@canary\nnpm install prisma --save-dev\n```\n\n----------------------------------------\n\nTITLE: Image Component with Custom Styling in JSX\nDESCRIPTION: This JSX code defines an `Image` component that renders an image with custom styling. The component takes `src` and `alt` props and applies inline styles to center the image within a container. It's designed to be used within a React or Next.js application.\nSOURCE: https://github.com/nextauthjs/docs/blob/main/versioned_docs/version-v3/providers/credentials.mdx#2025-04-21_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nexport const Image = ({ children, src, alt = \"\" }) => {\n  return (\n    <div\n      style={{\n        padding: \"0.2rem\",\n        width: \"100%\",\n        display: \"flex\",\n        justifyContent: \"center\",\n      }}\n    >\n      <img alt={alt} src={src} />\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Extended Reddit Provider Configuration with Refresh Token Support\nDESCRIPTION: Advanced implementation of Reddit OAuth provider that includes refresh token support, extended scopes, and custom profile handling. This configuration enables permanent access through refresh tokens and includes additional API permissions.\nSOURCE: https://github.com/nextauthjs/docs/blob/main/docs/providers/reddit.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nproviders: [\n  {\n    id: \"reddit\",\n    name: \"Reddit\",\n    clientId: process.env.REDDIT_CLIENT_ID,\n    clientSecret: process.env.REDDIT_CLIENT_SECRET,\n    scope: \"identity mysubreddits read\",\n    type: \"oauth\",\n    version: \"2.0\",\n    params: { grant_type: \"authorization_code\" },\n    accessTokenUrl: \" https://www.reddit.com/api/v1/access_token\",\n    authorizationUrl: \"https://www.reddit.com/api/v1/authorize?response_type=code&duration=permanent\",\n    profileUrl: \"https://oauth.reddit.com/api/v1/me\",\n    profile: (profile) => {\n      return {\n        id: profile.id,\n        name: profile.name,\n        email: null,\n      }\n    },\n  },\n]\n```\n\n----------------------------------------\n\nTITLE: Configuring Amazon Cognito Provider in NextAuth.js\nDESCRIPTION: This code snippet demonstrates how to set up the Amazon Cognito Provider in NextAuth.js. It shows the basic configuration using environment variables for the client ID, client secret, and issuer URL.\nSOURCE: https://github.com/nextauthjs/docs/blob/main/docs/providers/cognito.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport CognitoProvider from \"next-auth/providers/cognito\";\n...\nproviders: [\n  CognitoProvider({\n    clientId: process.env.COGNITO_CLIENT_ID,\n    clientSecret: process.env.COGNITO_CLIENT_SECRET,\n    issuer: process.env.COGNITO_ISSUER,\n  })\n]\n...\n```\n\n----------------------------------------\n\nTITLE: Using Session Types in Next.js Components\nDESCRIPTION: Example of using NextAuth session types in a Next.js component with TypeScript integration.\nSOURCE: https://github.com/nextauthjs/docs/blob/main/docs/getting-started/typescript.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useSession } from \"next-auth/react\"\n\nexport default function IndexPage() {\n  // `session` will match the returned value of `callbacks.session()` from `NextAuth()`\n  const { data: session } = useSession()\n\n  return (\n    // Your component\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Middleware Implementation with TypeScript\nDESCRIPTION: Advanced middleware implementation with TypeScript, including custom middleware function and authorization callbacks.\nSOURCE: https://github.com/nextauthjs/docs/blob/main/docs/configuration/nextjs.md#2025-04-21_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { NextRequest } from \"next/server\"\nimport type { JWT } from \"next-auth\"\n\nimport { withAuth } from \"next-auth/middleware\"\n\nexport default withAuth(function middleware(req: NextRequest & { nextauth: { token: JWT } }) {\n  console.log(req.nextauth.token)\n}, {\n  callbacks: {\n    authorized: ({ token }) => token?.role === \"admin\"\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring NextAuth.js with PouchDB Adapter\nDESCRIPTION: Implementation of NextAuth.js configuration with PouchDB adapter, including provider setup and database initialization. Requires pouchdb-find plugin and supports various PouchDB adapters.\nSOURCE: https://github.com/nextauthjs/docs/blob/main/docs/adapters/pouchdb.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport NextAuth from \"next-auth\"\nimport GoogleProvider from \"next-auth/providers/google\"\nimport { PouchDBAdapter } from \"@next-auth/pouchdb-adapter\"\nimport PouchDB from \"pouchdb\"\n\n// Setup your PouchDB instance and database\nPouchDB.plugin(require(\"pouchdb-adapter-leveldb\")) // Any other adapter\n  .plugin(require(\"pouchdb-find\")) // Don't forget the `pouchdb-find` plugin\n\nconst pouchdb = new PouchDB(\"auth_db\", { adapter: \"leveldb\" })\n\n// For more information on each option (and a full list of options) go to\n// https://next-auth.js.org/configuration/options\nexport default NextAuth({\n  // https://next-auth.js.org/providers/overview\n  providers: [\n    GoogleProvider({\n      clientId: process.env.GOOGLE_ID,\n      clientSecret: process.env.GOOGLE_SECRET,\n    }),\n  ],\n  adapter: PouchDBAdapter(pouchdb),\n  // ...\n})\n```\n\n----------------------------------------\n\nTITLE: Client Side getCsrfToken() Example\nDESCRIPTION: This example demonstrates how to use the `getCsrfToken()` method on the client side.  It retrieves the CSRF token, which is required for making POST requests, especially for signing in and signing out when not using the built-in `signIn()` and `signOut()` methods.\nSOURCE: https://github.com/nextauthjs/docs/blob/main/versioned_docs/version-v3/getting-started/client.md#2025-04-21_snippet_4\n\nLANGUAGE: js\nCODE:\n```\nasync function myFunction() {\n  const csrfToken = await getCsrfToken()\n  /* ... */\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Refresh Token Errors in Next.js Client-Side Component\nDESCRIPTION: This code snippet shows how to handle refresh token errors on the client side in a Next.js application. It uses the useSession hook from next-auth/react to detect RefreshAccessTokenError and redirects the user to sign in again.\nSOURCE: https://github.com/nextauthjs/docs/blob/main/docs/tutorials/refresh-token-rotation.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { signIn, useSession } from \"next-auth/react\";\nimport { useEffect } from \"react\";\n\nconst HomePage() {\n  const { data: session } = useSession();\n\n  useEffect(() => {\n    if (session?.error === \"RefreshAccessTokenError\") {\n      signIn(); // Force sign in to hopefully resolve error\n    }\n  }, [session]);\n\nreturn (...)\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Credentials Provider in NextAuth.js\nDESCRIPTION: This snippet shows how to configure the Credentials provider in NextAuth.js within the `providers` array. It demonstrates how to define the provider's name, expected credentials (username and password), and the `authorize` method to validate user credentials. The `authorize` method returns a user object if credentials are valid, `null` if rejected, or throws an error or URL for redirection.\nSOURCE: https://github.com/nextauthjs/docs/blob/main/versioned_docs/version-v3/providers/credentials.mdx#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport CredentialsProvider from 'next-auth/providers/credentials';\n...\nproviders: [\n  CredentialsProvider({\n    // The name to display on the sign in form (e.g. 'Sign in with...')\n    name: 'Credentials',\n    // The credentials is used to generate a suitable form on the sign in page.\n    // You can specify whatever fields you are expecting to be submitted.\n    // e.g. domain, username, password, 2FA token, etc.\n    credentials: {\n      username: { label: \"Username\", type: \"text\", placeholder: \"jsmith\" },\n      password: {  label: \"Password\", type: \"password\" }\n    },\n    async authorize(credentials, req) {\n      // Add logic here to look up the user from the credentials supplied\n      const user = { id: 1, name: 'J Smith', email: 'jsmith@example.com' }\n\n      if (user) {\n        // Any object returned will be saved in `user` property of the JWT\n        return user\n      } else {\n        // If you return null or false then the credentials will be rejected\n        return null\n        // You can also Reject this callback with an Error or with a URL:\n        // throw new Error('error message') // Redirect to error page\n        // throw '/path/to/redirect'        // Redirect to a URL\n      }\n    }\n  })\n]\n...\n```\n\n----------------------------------------\n\nTITLE: Email Sign-in Form Implementation\nDESCRIPTION: Custom email sign-in form implementation that handles CSRF token and email submission for authentication.\nSOURCE: https://github.com/nextauthjs/docs/blob/main/versioned_docs/version-v3/configuration/pages.md#2025-04-21_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport { getCsrfToken } from \"next-auth/client\"\\n\\nexport default function SignIn({ csrfToken }) {\\n  return (\\n    <form method=\"post\" action=\"/api/auth/signin/email\">\\n      <input name=\"csrfToken\" type=\"hidden\" defaultValue={csrfToken} />\\n      <label>\\n        Email address\\n        <input type=\"email\" id=\"email\" name=\"email\" />\\n      </label>\\n      <button type=\"submit\">Sign in with Email</button>\\n    </form>\\n  )\\n}\\n\\n// This is the recommended way for Next.js 9.3 or newer\\nexport async function getServerSideProps(context) {\\n  const csrfToken = await getCsrfToken(context)\\n  return {\\n    props: { csrfToken },\\n  }\\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring NextAuth.js with Upstash Redis Adapter\nDESCRIPTION: This code snippet demonstrates how to set up NextAuth.js to use the Upstash Redis Adapter. It includes configuration for the Redis client and Google provider.\nSOURCE: https://github.com/nextauthjs/docs/blob/main/docs/adapters/upstash-redis.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport NextAuth from \"next-auth\"\nimport GoogleProvider from \"next-auth/providers/google\"\nimport { UpstashRedisAdapter } from \"@next-auth/upstash-redis-adapter\"\nimport upstashRedisClient from \"@upstash/redis\"\n\nconst redis = upstashRedisClient(\n  process.env.UPSTASH_REDIS_URL,\n  process.env.UPSTASH_REDIS_TOKEN\n)\n\nexport default NextAuth({\n  adapter: UpstashRedisAdapter(redis),\n  providers: [\n    GoogleProvider({\n      clientId: process.env.GOOGLE_CLIENT_ID,\n      clientSecret: process.env.GOOGLE_CLIENT_SECRET,\n    }),\n  ],\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring NextAuth with PouchDB Adapter\nDESCRIPTION: Complete setup of NextAuth.js with PouchDB adapter, including plugin configuration and Google provider setup. Requires pouchdb-find plugin and appropriate database adapter.\nSOURCE: https://github.com/nextauthjs/docs/blob/main/versioned_docs/version-v3/adapters/pouchdb.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport NextAuth from \"next-auth\"\nimport Providers from \"next-auth/providers\"\nimport { PouchDBAdapter } from \"@next-auth/pouchdb-adapter\"\nimport PouchDB from \"pouchdb\"\n\n// Setup your PouchDB instance and database\nPouchDB.plugin(require(\"pouchdb-adapter-leveldb\")) // Any other adapter\n  .plugin(require(\"pouchdb-find\")) // Don't forget the `pouchdb-find` plugin\n\nconst pouchdb = new PouchDB(\"auth_db\", { adapter: \"leveldb\" })\n\n// For more information on each option (and a full list of options) go to\n// https://next-auth.js.org/configuration/options\nexport default NextAuth({\n  // https://next-auth.js.org/configuration/providers\n  providers: [\n    Providers.Google({\n      clientId: process.env.GOOGLE_ID,\n      clientSecret: process.env.GOOGLE_SECRET,\n    }),\n  ],\n  adapter: PouchDBAdapter(pouchdb),\n  // ...\n})\n```\n\n----------------------------------------\n\nTITLE: OAuth Sign-in Page Implementation\nDESCRIPTION: Example implementation of a custom OAuth sign-in page that displays available authentication providers and handles sign-in functionality.\nSOURCE: https://github.com/nextauthjs/docs/blob/main/versioned_docs/version-v3/configuration/pages.md#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { getProviders, signIn } from \"next-auth/client\"\\n\\nexport default function SignIn({ providers }) {\\n  return (\\n    <>\\n      {Object.values(providers).map((provider) => (\\n        <div key={provider.name}>\\n          <button onClick={() => signIn(provider.id)}>\\n            Sign in with {provider.name}\\n          </button>\\n        </div>\\n      ))}\\n    </>\\n  )\\n}\\n\\n// This is the recommended way for Next.js 9.3 or newer\\nexport async function getServerSideProps(context) {\\n  const providers = await getProviders()\\n  return {\\n    props: { providers },\\n  }\\n}\n```\n\n----------------------------------------\n\nTITLE: Extending Default Session Properties in NextAuth\nDESCRIPTION: Demonstrates how to extend default session properties while maintaining existing types using TypeScript module augmentation.\nSOURCE: https://github.com/nextauthjs/docs/blob/main/docs/getting-started/typescript.md#2025-04-21_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport NextAuth, { DefaultSession } from \"next-auth\";\n\ndeclare module \"next-auth\" {\n  /**\n   * Returned by `useSession`, `getSession` and received as a prop on the `SessionProvider` React Context\n   */\n  interface Session {\n    user: {\n      /** The user's postal address. */\n      address: string\n    } & DefaultSession[\"user\"]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Verification Token Generation\nDESCRIPTION: Example of customizing the verification token generation logic in the Email Provider\nSOURCE: https://github.com/nextauthjs/docs/blob/main/docs/providers/email.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nproviders: [\n  EmailProvider({\n    async generateVerificationToken() {\n      return \"ABC123\"\n    }\n  })\n],\n```\n\n----------------------------------------\n\nTITLE: Creating FaunaDB Schema and Indexes\nDESCRIPTION: FaunaDB shell commands for creating necessary collections and indexes for NextAuth.js functionality, including accounts, sessions, users, and verification tokens\nSOURCE: https://github.com/nextauthjs/docs/blob/main/docs/adapters/fauna.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nCreateCollection({ name: \"accounts\" })\nCreateCollection({ name: \"sessions\" })\nCreateCollection({ name: \"users\" })\nCreateCollection({ name: \"verification_tokens\" })\nCreateIndex({\n  name: \"account_by_provider_and_provider_account_id\",\n  source: Collection(\"accounts\"),\n  unique: true,\n  terms: [\n    { field: [\"data\", \"provider\"] },\n    { field: [\"data\", \"providerAccountId\"] },\n  ],\n})\nCreateIndex({\n  name: \"session_by_session_token\",\n  source: Collection(\"sessions\"),\n  unique: true,\n  terms: [{ field: [\"data\", \"sessionToken\"] }],\n})\nCreateIndex({\n  name: \"user_by_email\",\n  source: Collection(\"users\"),\n  unique: true,\n  terms: [{ field: [\"data\", \"email\"] }],\n})\nCreateIndex({\n  name: \"verification_token_by_identifier_and_token\",\n  source: Collection(\"verification_tokens\"),\n  unique: true,\n  terms: [{ field: [\"data\", \"identifier\"] }, { field: [\"data\", \"token\"] }],\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring NextAuth LDAP Authentication Provider\nDESCRIPTION: Sets up a custom Credentials provider for LDAP authentication, using ldapjs to bind and validate user credentials. Includes JWT token handling and session management with encryption.\nSOURCE: https://github.com/nextauthjs/docs/blob/main/versioned_docs/version-v3/tutorials/ldap-auth.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst ldap = require(\"ldapjs\")\nimport NextAuth from \"next-auth\"\nimport Providers from \"next-auth/providers\"\n\nexport default NextAuth({\n  providers: [\n    Providers.Credentials({\n      name: \"LDAP\",\n      credentials: {\n        username: { label: \"DN\", type: \"text\", placeholder: \"\" },\n        password: { label: \"Password\", type: \"password\" },\n      },\n      async authorize(credentials, req) {\n        const client = ldap.createClient({\n          url: process.env.LDAP_URI,\n        })\n\n        return new Promise((resolve, reject) => {\n          client.bind(credentials.username, credentials.password, (error) => {\n            if (error) {\n              console.error(\"Failed\")\n              reject()\n            } else {\n              console.log(\"Logged in\")\n              resolve({\n                username: credentials.username,\n                password: credentials.password,\n              })\n            }\n          })\n        })\n      },\n    }),\n  ],\n  callbacks: {\n    async jwt(token, user, account, profile, isNewUser) {\n      const isSignIn = user ? true : false\n      if (isSignIn) {\n        token.username = user.username\n        token.password = user.password\n      }\n      return token\n    },\n    async session(session, user) {\n      return { ...session, user: { username: user.username } }\n    },\n  },\n  secret: process.env.NEXTAUTH_SECRET,\n  jwt: {\n    secret: process.env.NEXTAUTH_SECRET,\n    encryption: true,\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Adapter with TypeScript in NextAuth.js\nDESCRIPTION: Example of creating a custom adapter using TypeScript type definitions to ensure proper implementation of the Adapter interface.\nSOURCE: https://github.com/nextauthjs/docs/blob/main/versioned_docs/version-v3/getting-started/typescript.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Adapter } from \"next-auth/adapters\"\n\nconst MyAdapter: Adapter = () => {\n  return {\n    async getAdapter() {\n      return {\n        // your adapter methods here\n      }\n    },\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring NextAuth with Prisma Adapter\nDESCRIPTION: Implementation of NextAuth.js configuration with Prisma adapter and Google provider integration.\nSOURCE: https://github.com/nextauthjs/docs/blob/main/versioned_docs/version-v3/adapters/prisma-legacy.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport NextAuth from \"next-auth\"\nimport Providers from \"next-auth/providers\"\nimport Adapters from \"next-auth/adapters\"\nimport { PrismaClient } from \"@prisma/client\"\n\nconst prisma = new PrismaClient()\n\nexport default NextAuth({\n  providers: [\n    Providers.Google({\n      clientId: process.env.GOOGLE_CLIENT_ID,\n      clientSecret: process.env.GOOGLE_CLIENT_SECRET,\n    }),\n  ],\n  adapter: Adapters.Prisma.Adapter({ prisma }),\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring NextAuth with Firebase Adapter\nDESCRIPTION: Example configuration for NextAuth using Firebase Adapter in the API route file. It includes setting up providers and initializing the Firebase adapter.\nSOURCE: https://github.com/nextauthjs/docs/blob/main/versioned_docs/version-v3/adapters/firebase.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport NextAuth from \"next-auth\"\nimport Providers from \"next-auth/providers\"\nimport { FirebaseAdapter } from \"@next-auth/firebase-adapter\"\n\nimport firebase from \"firebase/app\"\nimport \"firebase/firestore\"\n\nconst firestore = (\n  firebase.apps[0] ?? firebase.initializeApp(/* your config */)\n).firestore()\n\n// For more information on each option (and a full list of options) go to\n// https://next-auth.js.org/configuration/options\nexport default NextAuth({\n  // https://next-auth.js.org/configuration/providers\n  providers: [\n    Providers.Google({\n      clientId: process.env.GOOGLE_ID,\n      clientSecret: process.env.GOOGLE_SECRET,\n    }),\n  ],\n  adapter: FirebaseAdapter(firestore),\n  ...\n})\n```\n\n----------------------------------------\n\nTITLE: NextAuth.js Session Configuration\nDESCRIPTION: Default session configuration object showing strategy, maxAge, and updateAge settings.\nSOURCE: https://github.com/nextauthjs/docs/blob/main/docs/configuration/options.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nsession: {\n  strategy: \"database\",\n  maxAge: 30 * 24 * 60 * 60, // 30 days\n  updateAge: 24 * 60 * 60, // 24 hours\n}\n```\n\n----------------------------------------\n\nTITLE: Using TypeScript Response Interface for SignIn\nDESCRIPTION: TypeScript interface showing the response structure when using signIn with redirect:false option. Includes error handling, status codes and success indicators.\nSOURCE: https://github.com/nextauthjs/docs/blob/main/docs/getting-started/client.md#2025-04-21_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  /**\n   * Will be different error codes,\n   * depending on the type of error.\n   */\n  error: string | undefined\n  /**\n   * HTTP status code,\n   * hints the kind of error that happened.\n   */\n  status: number\n  /**\n   * `true` if the signin was successful\n   */\n  ok: boolean\n  /**\n   * `null` if there was an error,\n   * otherwise the url the user\n   * should have been redirected to.\n   */\n  url: string | null\n}\n```\n\n----------------------------------------\n\nTITLE: Extending JWT Interface in NextAuth\nDESCRIPTION: Shows how to extend the JWT interface in NextAuth using TypeScript module augmentation to add custom token properties.\nSOURCE: https://github.com/nextauthjs/docs/blob/main/docs/getting-started/typescript.md#2025-04-21_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { JWT } from \"next-auth/jwt\"\n\ndeclare module \"next-auth/jwt\" {\n  /** Returned by the `jwt` callback and `getToken`, when using JWT sessions */\n  interface JWT {\n    /** OpenID ID Token */\n    idToken?: string\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic Twitter Provider in NextAuth.js\nDESCRIPTION: Basic implementation of Twitter authentication provider using OAuth 1.0. Requires Twitter client ID and client secret from the Twitter Developer Portal.\nSOURCE: https://github.com/nextauthjs/docs/blob/main/docs/providers/twitter.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport TwitterProvider from \"next-auth/providers/twitter\";\n...\nproviders: [\n  TwitterProvider({\n    clientId: process.env.TWITTER_CLIENT_ID,\n    clientSecret: process.env.TWITTER_CLIENT_SECRET\n  })\n]\n...\n```\n\n----------------------------------------\n\nTITLE: Configuring MikroORM with Default NextAuth.js Entities\nDESCRIPTION: Example of how to include the default NextAuth.js entities in a MikroORM configuration file. This allows the entities to be included in migrations and other ORM operations.\nSOURCE: https://github.com/nextauthjs/docs/blob/main/docs/adapters/mikro-orm.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Options } from \"@mikro-orm/core\";\nimport { defaultEntities } from \"@next-auth/mikro-orm-adapter\"\n\nconst config: Options = {\n  ...\n  entities: [VeryImportantEntity, ...Object.values(defaultEntities)],\n};\n\nexport default config;\n```\n\n----------------------------------------\n\nTITLE: NextAuth JWT Configuration\nDESCRIPTION: JSON Web Token configuration options including signing keys, encryption settings, and custom encode/decode functions.\nSOURCE: https://github.com/nextauthjs/docs/blob/main/versioned_docs/version-v3/configuration/options.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\njwt: {\n  // A secret to use for key generation - you should set this explicitly\n  // Defaults to NextAuth.js secret if not explicitly specified.\n  // secret: 'INp8IvdIyeMcoGAgFGoA61DdBglwwSqnXJZkgz8PSnw',\n  // signingKey: {\"kty\":\"oct\",\"kid\":\"Dl893BEV-iVE-x9EC52TDmlJUgGm9oZ99_ZL025Hc5Q\",\"alg\":\"HS512\",\"k\":\"K7QqRmJOKRK2qcCKV_pi9PSBv3XP0fpTu30TP8xn4w01xR3ZMZM38yL2DnTVPVw6e4yhdh0jtoah-i4c_pZagA\"},\n  // encryption: true,\n  // encryptionKey: \"\",\n  // decryptionKey = encryptionKey,\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  name: 'Iain Collins',\n  email: 'me@iaincollins.com',\n  picture: 'https://example.com/image.jpg',\n  iat: 1594601838,\n  exp: 1597193838\n}\n```\n\n----------------------------------------\n\nTITLE: NextAuth Custom Pages Configuration\nDESCRIPTION: Configuration for custom authentication pages including sign in, sign out, and error pages.\nSOURCE: https://github.com/nextauthjs/docs/blob/main/versioned_docs/version-v3/configuration/options.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\npages: {\n  signIn: '/auth/signin',\n  signOut: '/auth/signout',\n  error: '/auth/error', // Error code passed in query string as ?error=\n  verifyRequest: '/auth/verify-request', // (used for check email message)\n  newUser: null // If set, new users will be directed here on first sign in\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring NextAuth with FaunaDB\nDESCRIPTION: Configuration setup for NextAuth using FaunaDB adapter, including provider setup and client initialization.\nSOURCE: https://github.com/nextauthjs/docs/blob/main/versioned_docs/version-v3/adapters/fauna.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport NextAuth from \"next-auth\"\nimport Providers from \"next-auth/providers\"\nimport * as Fauna from \"faunadb\"\nimport { FaunaAdapter } from \"@next-auth/fauna-adapter\"\n\nconst client = new Fauna.Client({\n  secret: \"secret\",\n  scheme: \"http\",\n  domain: \"localhost\",\n  port: 8443,\n})\n\n// For more information on each option (and a full list of options) go to\n// https://next-auth.js.org/configuration/options\nexport default NextAuth({\n  // https://next-auth.js.org/configuration/providers\n  providers: [\n    Providers.Google({\n      clientId: process.env.GOOGLE_ID,\n      clientSecret: process.env.GOOGLE_SECRET,\n    }),\n  ],\n  adapter: FaunaAdapter({ faunaClient: client})\n  ...\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Adapter with JSDoc in NextAuth.js\nDESCRIPTION: Example of creating a custom adapter using JSDoc annotations in JavaScript to get TypeScript hints and autocompletion.\nSOURCE: https://github.com/nextauthjs/docs/blob/main/versioned_docs/version-v3/getting-started/typescript.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n/** @type { import(\"next-auth/adapters\").Adapter } */\nconst MyAdapter = () => {\n  return {\n    async getAdapter() {\n      return {\n        // your adapter methods here\n      }\n    },\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing VK Provider API Version in NextAuth.js\nDESCRIPTION: This example shows how to customize the VK Provider in NextAuth.js to use a specific API version. It overrides default URLs with version-specific endpoints for access token, request token, authorization, and profile retrieval.\nSOURCE: https://github.com/nextauthjs/docs/blob/main/docs/providers/vk.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// pages/api/auth/[...nextauth].js\n\nconst apiVersion = \"5.126\"\n...\nproviders: [\n  VkProvider({\n    accessTokenUrl: `https://oauth.vk.com/access_token?v=${apiVersion}`,\n    requestTokenUrl: `https://oauth.vk.com/access_token?v=${apiVersion}`,\n    authorizationUrl:\n      `https://oauth.vk.com/authorize?response_type=code&v=${apiVersion}`,\n    profileUrl: `https://api.vk.com/method/users.get?fields=photo_100&v=${apiVersion}`,\n  })\n]\n...\n```\n\n----------------------------------------\n\nTITLE: Implementing Freshbooks OAuth Provider with NextAuth.js\nDESCRIPTION: This snippet demonstrates how to configure the Freshbooks provider in NextAuth.js. It shows importing the provider and setting it up with client credentials that should be stored in environment variables.\nSOURCE: https://github.com/nextauthjs/docs/blob/main/docs/providers/freshbooks.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport FreshbooksProvider from \"next-auth/providers/freshbooks\";\n...\nproviders: [\n  FreshbooksProvider({\n    clientId: process.env.FRESHBOOKS_CLIENT_ID,\n    clientSecret: process.env.FRESHBOOKS_CLIENT_SECRET,\n  })\n]\n...\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Base Path for NextAuth.js API\nDESCRIPTION: Demonstrates how to configure a custom base path for NextAuth.js API endpoints using the NEXTAUTH_URL environment variable. This allows for flexibility in API routing within the application.\nSOURCE: https://github.com/nextauthjs/docs/blob/main/docs/getting-started/rest-api.md#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nNEXTAUTH_URL=https://example.com/myapp/api/authentication\n```\n\n----------------------------------------\n\nTITLE: Configuring Environment Variables for Azure AD Authentication in Next.js\nDESCRIPTION: This snippet shows how to set up the necessary environment variables for Azure AD authentication in a Next.js application. It includes the client ID, client secret, and tenant ID obtained from the Azure portal.\nSOURCE: https://github.com/nextauthjs/docs/blob/main/docs/providers/azure-ad.md#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nAZURE_AD_CLIENT_ID=<copy Application (client) ID here>\nAZURE_AD_CLIENT_SECRET=<copy generated client secret value here>\nAZURE_AD_TENANT_ID=<copy the tenant id here>\n```\n\n----------------------------------------\n\nTITLE: Configuring Next-Auth with Dgraph Adapter\nDESCRIPTION: Example configuration for Next-Auth using the Dgraph adapter in the API route file. Shows how to set up the adapter with connection credentials for the Dgraph GraphQL endpoint.\nSOURCE: https://github.com/nextauthjs/docs/blob/main/docs/adapters/dgraph.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport NextAuth from \"next-auth\"\nimport { DgraphAdapter } from \"@next-auth/dgraph-adapter\"\n\n// For more information on each option (and a full list of options) go to\n// https://next-auth.js.org/configuration/options\nexport default NextAuth({\n  // https://next-auth.js.org/configuration/providers\n  providers: [],\n  adapter: DgraphAdapter({\n    endpoint: process.env.DGRAPH_GRAPHQL_ENDPOINT,\n    authToken: process.env.DGRAPH_GRAPHQL_KEY,\n\n    // you can omit the following properties if you are running an unsecure schema\n    authHeader: process.env.AUTH_HEADER, // default: \"Authorization\",\n    jwtSecret: process.env.SECRET,\n  }),\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Auth Pages in NextAuth.js\nDESCRIPTION: Configuration options for customizing authentication page routes in NextAuth.js, including sign in, sign out, error, and verification pages.\nSOURCE: https://github.com/nextauthjs/docs/blob/main/versioned_docs/version-v3/configuration/pages.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n...\\n  pages: {\\n    signIn: '/auth/signin',\\n    signOut: '/auth/signout',\\n    error: '/auth/error', // Error code passed in query string as ?error=\\n    verifyRequest: '/auth/verify-request', // (used for check email message)\\n    newUser: null // If set, new users will be directed here on first sign in\\n  }\\n...\n```\n\n----------------------------------------\n\nTITLE: Configuring JWT Signing and Verification in NextAuth.js\nDESCRIPTION: This snippet demonstrates how to set up JWT signing options in NextAuth.js. It includes passing a pre-regenerated private key for signing and discusses the option for using a public key for verification. It also highlights the use of node-jose-tools for key generation.\nSOURCE: https://github.com/nextauthjs/docs/blob/main/versioned_docs/version-v3/warnings.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n\"jwt: {\\n  signingKey: process.env.JWT_SIGNING_PRIVATE_KEY,\\n  // You can also specify a public key for verification if using public/private key (but private only is fine)\\n  // verificationKey: process.env.JWT_SIGNING_PUBLIC_KEY,\\n  // If you want to use some key format other than HS512 you can specify custom options to use\\n  // when verifying (note: verificationOptions should include a value for maxTokenAge as well).\\n  // verificationOptions = {\\n  //   maxTokenAge: \\\\\"${maxAge}s\\\\\", // e.g. \\\\\"${30 * 24 * 60 * 60}s\\\\\" = 30 days\\n  //   algorithms: ['HS512']\\n  // },\\n}\"\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Sign-in Page for WorkOS SSO\nDESCRIPTION: This code snippet shows a custom sign-in page implementation for WorkOS SSO. It includes an email input field, extracts the domain from the email, and passes it to the signIn function for WorkOS authentication.\nSOURCE: https://github.com/nextauthjs/docs/blob/main/docs/providers/workos.md#2025-04-21_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useState } from \"react\"\nimport { getProviders, signIn } from \"next-auth/react\"\n\nexport default function SignIn({ providers }) {\n  const [email, setEmail] = useState(\"\")\n\n  return (\n    <>\n      {Object.values(providers).map((provider) => {\n        if (provider.id === \"workos\") {\n          return (\n            <div key={provider.id}>\n              <input\n                type=\"email\"\n                value={email}\n                placeholder=\"Email\"\n                onChange={(event) => setEmail(event.target.value)}\n              />\n              <button\n                onClick={() =>\n                  signIn(provider.id, undefined, {\n                    domain: email.split(\"@\")[1],\n                  })\n                }\n              >\n                Sign in with SSO\n              </button>\n            </div>\n          )\n        }\n\n        return (\n          <div key={provider.id}>\n            <button onClick={() => signIn(provider.id)}>\n              Sign in with {provider.name}\n            </button>\n          </div>\n        )\n      })}\n    </>\n  )\n}\n\n// This is the recommended way for Next.js 9.3 or newer\nexport async function getServerSideProps(context) {\n  const providers = await getProviders()\n  return {\n    props: { providers },\n  }\n}\n\n/*\n// If older than Next.js 9.3\nSignIn.getInitialProps = async () => {\n  return {\n    providers: await getProviders()\n  }\n}\n*/\n```\n\n----------------------------------------\n\nTITLE: Customizing Verification Token Generation in NextAuth.js\nDESCRIPTION: This snippet shows how to customize the verification token generated by the Email provider by defining a custom `generateVerificationToken` method. This allows you to implement custom logic for generating the token.\nSOURCE: https://github.com/nextauthjs/docs/blob/main/versioned_docs/version-v3/providers/email.md#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nproviders: [\n  Providers.Email({\n    async generateVerificationToken() {\n      return \"ABC123\"\n    }\n  })\n],\n```\n\n----------------------------------------\n\nTITLE: Configuring Twitter OAuth 2.0 Provider in NextAuth.js\nDESCRIPTION: Implementation of Twitter authentication provider using OAuth 2.0. Enables access to newer Twitter APIs and authentication features.\nSOURCE: https://github.com/nextauthjs/docs/blob/main/docs/providers/twitter.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nTwitterProvider({\n  clientId: process.env.TWITTER_ID,\n  clientSecret: process.env.TWITTER_SECRET,\n  version: \"2.0\", // opt-in to Twitter OAuth 2.0\n})\n```\n\n----------------------------------------\n\nTITLE: Retrieving CSRF Token in API Route\nDESCRIPTION: This snippet demonstrates how to get the CSRF token in a server-side API route using the getCsrfToken function.\nSOURCE: https://github.com/nextauthjs/docs/blob/main/docs/getting-started/client.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport { getCsrfToken } from \"next-auth/react\"\n\nexport default async (req, res) => {\n  const csrfToken = await getCsrfToken({ req })\n  /* ... */\n  res.end()\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Facebook Provider in NextAuth.js\nDESCRIPTION: Example code demonstrating how to configure the Facebook authentication provider in NextAuth.js. It includes importing the provider and setting up with environment variables for client ID and client secret.\nSOURCE: https://github.com/nextauthjs/docs/blob/main/docs/providers/facebook.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport FacebookProvider from \"next-auth/providers/facebook\";\n...\nproviders: [\n  FacebookProvider({\n    clientId: process.env.FACEBOOK_CLIENT_ID,\n    clientSecret: process.env.FACEBOOK_CLIENT_SECRET\n  })\n]\n...\n```\n\n----------------------------------------\n\nTITLE: Initializing Keycloak Provider in NextAuth.js\nDESCRIPTION: Example code showing how to configure the Keycloak authentication provider in NextAuth.js. Requires environment variables for client ID, client secret, and issuer URL. The issuer URL should include the realm path.\nSOURCE: https://github.com/nextauthjs/docs/blob/main/docs/providers/keycloak.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport KeycloakProvider from \"next-auth/providers/keycloak\";\n...\nproviders: [\n  KeycloakProvider({\n    clientId: process.env.KEYCLOAK_ID,\n    clientSecret: process.env.KEYCLOAK_SECRET,\n    issuer: process.env.KEYCLOAK_ISSUER,\n  })\n]\n...\n```\n\n----------------------------------------\n\nTITLE: Configuring NextAuth.js with MikroORM Adapter\nDESCRIPTION: Basic configuration for NextAuth.js to use the MikroORM adapter with SQLite. The adapter is initialized with database configuration options including database name, type, and debug settings.\nSOURCE: https://github.com/nextauthjs/docs/blob/main/docs/adapters/mikro-orm.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport NextAuth from \"next-auth\"\nimport { MikroOrmAdapter } from \"@next-auth/mikro-orm-adapter\"\n\n\nexport default NextAuth({\n  adapter: MikroOrmAdapter({\n    // MikroORM options object. Ref: https://mikro-orm.io/docs/next/configuration#driver\n    dbName: \"./db.sqlite\",\n    type: \"sqlite\",\n    debug: process.env.DEBUG === \"true\" || process.env.DEBUG?.includes(\"db\"),\n  }),\n  providers: [],\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom JWT Signing Algorithm\nDESCRIPTION: Configuration code for specifying custom JWT signing key and verification algorithms when HS512 cannot be used.\nSOURCE: https://github.com/nextauthjs/docs/blob/main/versioned_docs/version-v3/errors.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n  jwt: {\n    signingKey: {\"kty\":\"oct\",\"kid\":\"--\",\"alg\":\"HS256\",\"k\":\"--\"},\n    verificationOptions: {\n      algorithms: [\"HS256\"]\n    }\n  }\n```\n\n----------------------------------------\n\nTITLE: Importing and Configuring Slack Provider in NextAuth.js in JavaScript\nDESCRIPTION: This JavaScript code snippet demonstrates how to import and configure the Slack provider using NextAuth.js. Dependencies include the 'next-auth/providers' package, and the snippet uses environment variables for client ID and secret. This snippet is intended to be part of a NextAuth.js providers array configuration for enabling Slack authentication.\nSOURCE: https://github.com/nextauthjs/docs/blob/main/versioned_docs/version-v3/providers/slack.md#2025-04-21_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport Providers from `next-auth/providers`\n...\nproviders: [\n  Providers.Slack({\n    clientId: process.env.SLACK_CLIENT_ID,\n    clientSecret: process.env.SLACK_CLIENT_SECRET\n  })\n]\n...\n```\n\n----------------------------------------\n\nTITLE: Configuring Apple Provider with Dynamic Secret in NextAuth.js\nDESCRIPTION: Implementation of Apple OAuth provider using dynamically generated secret with environment variables for client ID, team ID, private key, and key ID.\nSOURCE: https://github.com/nextauthjs/docs/blob/main/versioned_docs/version-v3/providers/apple.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport Providers from `next-auth/providers`\n...\nproviders: [\n  Providers.Apple({\n    clientId: process.env.APPLE_ID,\n    clientSecret: {\n      teamId: process.env.APPLE_TEAM_ID,\n      privateKey: process.env.APPLE_PRIVATE_KEY,\n      keyId: process.env.APPLE_KEY_ID,\n    }\n  })\n]\n...\n```\n\n----------------------------------------\n\nTITLE: Configuring NextAuth with DynamoDB Adapter\nDESCRIPTION: Example configuration for NextAuth using the DynamoDB adapter. It shows how to set up AWS credentials, configure authentication providers, and initialize the DynamoDB adapter.\nSOURCE: https://github.com/nextauthjs/docs/blob/main/versioned_docs/version-v3/adapters/dynamodb.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport AWS from \"aws-sdk\";\nimport NextAuth from \"next-auth\";\nimport Providers from \"next-auth/providers\";\nimport { DynamoDBAdapter } from \"@next-auth/dynamodb-adapter\"\n\nAWS.config.update({\n  accessKeyId: process.env.NEXT_AUTH_AWS_ACCESS_KEY,\n  secretAccessKey: process.env.NEXT_AUTH_AWS_SECRET_KEY,\n  region: process.env.NEXT_AUTH_AWS_REGION,\n});\n\nexport default NextAuth({\n  // Configure one or more authentication providers\n  providers: [\n    Providers.GitHub({\n      clientId: process.env.GITHUB_ID,\n      clientSecret: process.env.GITHUB_SECRET,\n    }),\n    Providers.Email({\n      server: process.env.EMAIL_SERVER,\n      from: process.env.EMAIL_FROM,\n    }),\n    // ...add more providers here\n  ],\n  adapter: DynamoDBAdapter(\n    new AWS.DynamoDB.DocumentClient()\n  ),\n  ...\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring MongoDB Client Connection\nDESCRIPTION: Setup of MongoDB client connection with environment-specific handling for development and production modes. Includes error handling for missing MongoDB URI and exports a shared client promise.\nSOURCE: https://github.com/nextauthjs/docs/blob/main/docs/adapters/mongodb.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// This approach is taken from https://github.com/vercel/next.js/tree/canary/examples/with-mongodb\nimport { MongoClient } from \"mongodb\"\n\nconst uri = process.env.MONGODB_URI\nconst options = {\n  useUnifiedTopology: true,\n  useNewUrlParser: true,\n}\n\nlet client\nlet clientPromise\n\nif (!process.env.MONGODB_URI) {\n  throw new Error(\"Please add your Mongo URI to .env.local\")\n}\n\nif (process.env.NODE_ENV === \"development\") {\n  // In development mode, use a global variable so that the value\n  // is preserved across module reloads caused by HMR (Hot Module Replacement).\n  if (!global._mongoClientPromise) {\n    client = new MongoClient(uri, options)\n    global._mongoClientPromise = client.connect()\n  }\n  clientPromise = global._mongoClientPromise\n} else {\n  // In production mode, it's best to not use a global variable.\n  client = new MongoClient(uri, options)\n  clientPromise = client.connect()\n}\n\n// Export a module-scoped MongoClient promise. By doing this in a\n// separate module, the client can be shared across functions.\nexport default clientPromise\n```\n\n----------------------------------------\n\nTITLE: Configuring Twitch Provider in NextAuth.js\nDESCRIPTION: This snippet demonstrates how to configure the Twitch authentication provider in a NextAuth.js setup. It imports the Twitch provider from the 'next-auth/providers' module and sets it up with client ID and secret. The values for these parameters are expected to be stored in environment variables TWITCH_CLIENT_ID and TWITCH_CLIENT_SECRET. No other dependencies are required, and the output is part of the NextAuth configuration used to enable Twitch OAuth integration.\nSOURCE: https://github.com/nextauthjs/docs/blob/main/versioned_docs/version-v3/providers/twitch.md#2025-04-21_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport Providers from `next-auth/providers`\n...\nproviders: [\n  Providers.Twitch({\n    clientId: process.env.TWITCH_CLIENT_ID,\n    clientSecret: process.env.TWITCH_CLIENT_SECRET\n  })\n]\n...\n```\n\n----------------------------------------\n\nTITLE: Configuring NextAuth.js with Firebase Adapter\nDESCRIPTION: Example configuration for setting up NextAuth.js with Firebase adapter in the API route file. It shows how to initialize Firebase and configure the adapter with a Google authentication provider.\nSOURCE: https://github.com/nextauthjs/docs/blob/main/docs/adapters/firebase.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport NextAuth from \"next-auth\"\nimport GoogleProvider from \"next-auth/providers/google\"\nimport { FirebaseAdapter } from \"@next-auth/firebase-adapter\"\n\nimport firebase from \"firebase/app\"\nimport \"firebase/firestore\"\n\nconst firestore = (\n  firebase.apps[0] ?? firebase.initializeApp(/* your config */)\n).firestore()\n\n// For more information on each option (and a full list of options) go to\n// https://next-auth.js.org/configuration/options\nexport default NextAuth({\n  // https://next-auth.js.org/providers/overview\n  providers: [\n    GoogleProvider({\n      clientId: process.env.GOOGLE_ID,\n      clientSecret: process.env.GOOGLE_SECRET,\n    }),\n  ],\n  adapter: FirebaseAdapter(firestore),\n  ...\n})\n```\n\n----------------------------------------\n\nTITLE: Adding CharacterID to JWT Session in NextAuth.js\nDESCRIPTION: This example shows how to add the EVE Online CharacterID to the JWT token and session in NextAuth.js. It uses the session callback to include the user ID in the session object.\nSOURCE: https://github.com/nextauthjs/docs/blob/main/docs/providers/eveonline.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n...\noptions: {\n  jwt: {\n    secret: process.env.JWT_SECRET,\n  },\n  callbacks: {\n    session: async ({ session, token }) => {\n      session.user.id = token.id;\n      return session;\n    }\n  }\n}\n...\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple Credentials Providers\nDESCRIPTION: This snippet demonstrates how to configure multiple Credentials providers within the `providers` array. Each provider is specified with a unique `id`, `name`, and custom credentials. The `authorize` method is defined for each provider to handle specific authentication logic. This allows using multiple authentication mechanisms.\nSOURCE: https://github.com/nextauthjs/docs/blob/main/versioned_docs/version-v3/providers/credentials.mdx#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nproviders: [\n  Providers.Credentials({\n    id: \"domain-login\",\n    name: \"Domain Account\",\n    async authorize(credentials, req) {\n      const user = {\n        /* add function to get user */\n      }\n      return user\n    },\n    credentials: {\n      domain: {\n        label: \"Domain\",\n        type: \"text \",\n        placeholder: \"CORPNET\",\n        value: \"CORPNET\",\n      },\n      username: { label: \"Username\", type: \"text \", placeholder: \"jsmith\" },\n      password: { label: \"Password\", type: \"password\" },\n    },\n  }),\n  Providers.Credentials({\n    id: \"intranet-credentials\",\n    name: \"Two Factor Auth\",\n    async authorize(credentials, req) {\n      const user = {\n        /* add function to get user */\n      }\n      return user\n    },\n    credentials: {\n      email: { label: \"Username\", type: \"text \", placeholder: \"jsmith\" },\n      \"2fa-key\": { label: \"2FA Key\" },\n    },\n  }),\n  /* ... additional providers ... /*/\n]\n```\n\n----------------------------------------\n\nTITLE: Configuring NextAuth with Sequelize Adapter\nDESCRIPTION: Basic setup of NextAuth.js with Sequelize adapter including database connection configuration.\nSOURCE: https://github.com/nextauthjs/docs/blob/main/docs/adapters/sequelize.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport NextAuth from \"next-auth\"\nimport SequelizeAdapter from \"@next-auth/sequelize-adapter\"\nimport { Sequelize } from \"sequelize\"\n\nconst sequelize = new Sequelize(\"yourconnectionstring\")\n\nexport default NextAuth({\n  providers: [],\n  adapter: SequelizeAdapter(sequelize),\n})\n```\n\n----------------------------------------\n\nTITLE: Example Session Object\nDESCRIPTION: This is an example of a session object returned by NextAuth.js. It includes user information such as name, email, and image URI, along with an access token and expiration date.\nSOURCE: https://github.com/nextauthjs/docs/blob/main/versioned_docs/version-v3/getting-started/client.md#2025-04-21_snippet_0\n\nLANGUAGE: js\nCODE:\n```\n{\n  user: {\n    name: string,\n    email: string,\n    image: uri\n  },\n  accessToken: string,\n  expires: \"YYYY-MM-DDTHH:mm:ss.SSSZ\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Facebook Provider in NextAuth.js\nDESCRIPTION: This code snippet demonstrates how to configure the Facebook provider in NextAuth.js. It imports the `Providers` object from `next-auth/providers` and then initializes the `Facebook` provider with the `clientId` and `clientSecret` obtained from environment variables.\nSOURCE: https://github.com/nextauthjs/docs/blob/main/versioned_docs/version-v3/providers/facebook.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n```js\nimport Providers from `next-auth/providers`\n...\nproviders: [\n  Providers.Facebook({\n    clientId: process.env.FACEBOOK_CLIENT_ID,\n    clientSecret: process.env.FACEBOOK_CLIENT_SECRET\n  })\n]\n...\n```\n```\n\n----------------------------------------\n\nTITLE: Implementing Render Prop for NextAuth.js Session in React Class Components\nDESCRIPTION: This snippet shows how to use the Render Prop pattern to provide NextAuth.js session data to class components. It creates a UseSession component that wraps the useSession() hook and passes the session data to its children as a function prop.\nSOURCE: https://github.com/nextauthjs/docs/blob/main/docs/tutorials/usage-with-class-components.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useSession } from \"next-auth/react\"\n\nconst UseSession = ({ children }) => {\n  const session = useSession()\n  return children(session)\n}\n\n// Usage\nclass ClassComponent extends React.Component {\n  render() {\n    return (\n      <UseSession>\n        {(session) => <pre>{JSON.stringify(session, null, 2)}</pre>}\n      </UseSession>\n    )\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring WorkOS Provider in NextAuth.js\nDESCRIPTION: This snippet demonstrates the configuration of the WorkOS provider as part of the NextAuth.js authentication strategy. Dependencies include `next-auth/providers`, and key parameters are `clientId` and `clientSecret`, which should be set using environment variables. The configuration establishes the groundwork for enabling SSO through WorkOS.\nSOURCE: https://github.com/nextauthjs/docs/blob/main/versioned_docs/version-v3/providers/workos.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport Providers from `next-auth/providers`\n...\nproviders: [\n  Providers.WorkOS({\n    clientId: process.env.WORKOS_CLIENT_ID,\n    clientSecret: process.env.WORKOS_API_KEY,\n  }),\n],\n...\n```\n\n----------------------------------------\n\nTITLE: Generating HS512 Key for JWT Session in JavaScript\nDESCRIPTION: This code snippet demonstrates how to generate an HS512 key using the 'jose' library. This key can be used to resolve the JWT_SESSION_ERROR where the key does not support the HS512 verify algorithm.\nSOURCE: https://github.com/nextauthjs/docs/blob/main/docs/errors.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\njose newkey -s 512 -t oct -a HS512\n```\n\n----------------------------------------\n\nTITLE: Implementing SessionProvider\nDESCRIPTION: Example of implementing the renamed and updated SessionProvider component in _app.jsx.\nSOURCE: https://github.com/nextauthjs/docs/blob/main/docs/getting-started/upgrade-to-v4.md#2025-04-21_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport { SessionProvider } from \"next-auth/react\"\n\nexport default function App({\n  Component,\n  pageProps: { session, ...pageProps },\n}) {\n  return (\n    <SessionProvider session={session} refetchInterval={5 * 60}>\n      <Component {...pageProps} />\n    </SessionProvider>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Describing NextAuth.js SignOut Event Data in Markdown\nDESCRIPTION: This snippet describes the data structure for the signOut event in NextAuth.js, which varies depending on whether JWT or database persisted sessions are used.\nSOURCE: https://github.com/nextauthjs/docs/blob/main/docs/configuration/events.md#2025-04-21_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n- `token`: The JWT token for this session.\n- `session`: The session object from your adapter that is being ended\n```\n\n----------------------------------------\n\nTITLE: Custom Cookie Configuration in NextAuth - JavaScript\nDESCRIPTION: This snippet provides an advanced configuration for customizing cookie names and options used by NextAuth. It allows users to define parameters like `httpOnly`, `sameSite`, and `secure` for various cookies involved in session management. Understanding the implications of these custom settings is crucial as incorrect configurations could lead to security vulnerabilities.\nSOURCE: https://github.com/nextauthjs/docs/blob/main/versioned_docs/version-v3/configuration/options.md#2025-04-21_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\ncookies: {\n  sessionToken: {\n    name: `__Secure-next-auth.session-token`,\n    options: {\n      httpOnly: true,\n      sameSite: 'lax',\n      path: '/',\n      secure: true\n    }\n  },\n  callbackUrl: {\n    name: `__Secure-next-auth.callback-url`,\n    options: {\n      sameSite: 'lax',\n      path: '/',\n      secure: true\n    }\n  },\n  csrfToken: {\n    name: `__Host-next-auth.csrf-token`,\n    options: {\n      httpOnly: true,\n      sameSite: 'lax',\n      path: '/',\n      secure: true\n    }\n  },\n  pkceCodeVerifier: {\n    name: `${cookiePrefix}next-auth.pkce.code_verifier`,\n    options: {\n      httpOnly: true,\n      sameSite: 'lax',\n      path: '/',\n      secure: useSecureCookies\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Explicit TypeORM Adapter Configuration in NextAuth.js\nDESCRIPTION: Configuration using the TypeORM adapter explicitly, which is functionally identical to the previous configurations. Shows the most verbose way to configure the TypeORM adapter.\nSOURCE: https://github.com/nextauthjs/docs/blob/main/versioned_docs/version-v3/adapters/typeorm/overview.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nadapter: Adapters.TypeORM.Adapter({\n  type: \"sqlite\",\n  database: \":memory:\",\n  synchronize: true,\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Team-Specific Basecamp Authentication\nDESCRIPTION: Advanced Basecamp authentication configuration that includes team-specific profile information. Customizes the profile URL and adds a profile handler function to include admin and owner status.\nSOURCE: https://github.com/nextauthjs/docs/blob/main/versioned_docs/version-v3/providers/basecamp.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport Providers from `next-auth/providers`\n...\nproviders: [\n  Providers.Basecamp({\n    clientId: process.env.BASECAMP_CLIENT_ID,\n    clientSecret: process.env.BASECAMP_CLIENT_SECRET,\n    profileUrl: `https://3.basecampapi.com/${process.env.BASECAMP_TEAM_ID}/my/profile.json`,\n    profile: (profile) => {\n      return {\n        id: profile.id,\n        name: profile.name,\n        email: profile.email_address,\n        image: profile.avatar_url,\n        admin: profile.admin,\n        owner: profile.owner\n      }\n    }\n  })\n]\n...\n```\n\n----------------------------------------\n\nTITLE: Configuring Auth0 Provider in NextAuth.js\nDESCRIPTION: Example code showing how to set up Auth0 authentication provider in NextAuth.js using environment variables for client ID, secret, and domain configuration. The provider should be configured as a Regular Web Application in Auth0 dashboard.\nSOURCE: https://github.com/nextauthjs/docs/blob/main/versioned_docs/version-v3/providers/auth0.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport Providers from `next-auth/providers`\n...\nproviders: [\n  Providers.Auth0({\n    clientId: process.env.AUTH0_CLIENT_ID,\n    clientSecret: process.env.AUTH0_CLIENT_SECRET,\n    domain: process.env.AUTH0_DOMAIN\n  })\n]\n...\n```\n\n----------------------------------------\n\nTITLE: Configuring Auth0 Provider in NextAuth.js\nDESCRIPTION: Example configuration for integrating Auth0 authentication provider in a NextAuth.js application. Requires Auth0 client ID, client secret, and issuer URL from the Auth0 dashboard. The issuer should be a fully qualified URL.\nSOURCE: https://github.com/nextauthjs/docs/blob/main/docs/providers/auth0.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport Auth0Provider from \"next-auth/providers/auth0\";\n...\nproviders: [\n  Auth0Provider({\n    clientId: process.env.AUTH0_CLIENT_ID,\n    clientSecret: process.env.AUTH0_CLIENT_SECRET,\n    issuer: process.env.AUTH0_ISSUER\n  })\n]\n...\n```\n\n----------------------------------------\n\nTITLE: Higher Order Component Session Wrapper for Class Components\nDESCRIPTION: Creates a higher-order component that injects session and loading state into class components, ensuring proper session management for React class components using NextAuth.js.\nSOURCE: https://github.com/nextauthjs/docs/blob/main/versioned_docs/version-v3/tutorials/usage-with-class-components.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useSession } from \"next-auth/client\"\n\nconst withSession = (Component) => (props) => {\n  const [session, loading] = useSession()\n\n  // if the component has a render property, we are good\n  if (Component.prototype.render) {\n    return <Component session={session} loading={loading} {...props} />\n  }\n\n  // if the passed component is a function component, there is no need for this wrapper\n  throw new Error(\n    [\n      \"You passed a function component, `withSession` is not needed.\",\n      \"You can `useSession` directly in your component.\",\n    ].join(\"\\n\")\n  )\n}\n\n// Usage\nclass ClassComponent extends React.Component {\n  render() {\n    const { session, loading } = this.props\n    return null\n  }\n}\n\nconst ClassComponentWithSession = withSession(ClassComponent)\n```\n\n----------------------------------------\n\nTITLE: Implementing Instagram OAuth Provider with NextAuth.js\nDESCRIPTION: Example showing how to configure the Instagram provider in the NextAuth.js API route and implement a sign-in button in a React component. The code demonstrates backend configuration with environment variables and frontend implementation of the sign-in functionality.\nSOURCE: https://github.com/nextauthjs/docs/blob/main/docs/providers/instagram.md#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n// pages/api/auth/[...nextauth].js\nimport InstagramProvider from \"next-auth/providers/instagram\";\n...\nproviders: [\n  InstagramProvider({\n    clientId: process.env.INSTAGRAM_CLIENT_ID,\n    clientSecret: process.env.INSTAGRAM_CLIENT_SECRET\n  })\n]\n...\n// pages/index.jsx\nimport { signIn } from \"next-auth/react\"\n...\n<button onClick={() => signIn(\"instagram\")}>\n  Sign in\n</button>\n...\n```\n\n----------------------------------------\n\nTITLE: Configuring Dropbox Provider in NextAuth.js\nDESCRIPTION: This code snippet demonstrates how to configure the Dropbox authentication provider in a NextAuth.js application. It shows how to import the provider and include it in the providers array with client credentials from environment variables.\nSOURCE: https://github.com/nextauthjs/docs/blob/main/docs/providers/dropbox.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport DropboxProvider from \"next-auth/providers/dropbox\";\n...\nproviders: [\n  DropboxProvider({\n    clientId: process.env.DROPBOX_CLIENT_ID,\n    clientSecret: process.env.DROPBOX_CLIENT_SECRET\n  })\n]\n...\n```\n\n----------------------------------------\n\nTITLE: Describing NextAuth.js Session Event Data in Markdown\nDESCRIPTION: This snippet describes the data structure for the session event in NextAuth.js, which varies depending on whether JWT or database persisted sessions are used.\nSOURCE: https://github.com/nextauthjs/docs/blob/main/docs/configuration/events.md#2025-04-21_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n- `token`: The JWT token for this session.\n- `session`: The session object from your adapter.\n```\n\n----------------------------------------\n\nTITLE: Basic Google Provider Configuration in NextAuth.js\nDESCRIPTION: Basic setup for Google OAuth provider with client credentials using environment variables.\nSOURCE: https://github.com/nextauthjs/docs/blob/main/versioned_docs/version-v3/providers/google.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport Providers from `next-auth/providers`\n...\nproviders: [\n  Providers.Google({\n    clientId: process.env.GOOGLE_CLIENT_ID,\n    clientSecret: process.env.GOOGLE_CLIENT_SECRET\n  })\n]\n...\n```\n\n----------------------------------------\n\nTITLE: Google Provider Configuration with Forced Refresh Token\nDESCRIPTION: Configuration that forces Google to always provide a refresh token by including specific authorization parameters. This requires users to confirm access on each sign-in.\nSOURCE: https://github.com/nextauthjs/docs/blob/main/versioned_docs/version-v3/providers/google.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst options = {\n  ...\n  providers: [\n    Providers.Google({\n      clientId: process.env.GOOGLE_ID,\n      clientSecret: process.env.GOOGLE_SECRET,\n      authorizationUrl: 'https://accounts.google.com/o/oauth2/v2/auth?prompt=consent&access_type=offline&response_type=code',\n    })\n  ],\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Instagram Authentication Provider in NextAuth.js\nDESCRIPTION: This code snippet demonstrates how to configure the Instagram provider in a NextAuth.js authentication setup. It imports the necessary provider and specifies the client ID and client secret required for authentication. Ensure that environmental variables are properly set before use.\nSOURCE: https://github.com/nextauthjs/docs/blob/main/versioned_docs/version-v3/providers/instagram.md#2025-04-21_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n// pages/api/auth/[...nextauth].js\nimport Providers from `next-auth/providers`\n...\nproviders: [\n  Providers.Instagram({\n    clientId: process.env.INSTAGRAM_CLIENT_ID,\n    clientSecret: process.env.INSTAGRAM_CLIENT_SECRET\n  })\n]\n...\n```\n\n----------------------------------------\n\nTITLE: Configuring Discord OAuth Provider in NextAuth.js\nDESCRIPTION: Demonstrates how to add Discord as an authentication provider using client ID and client secret from environment variables. Requires setting up a Discord Developer application and obtaining credentials.\nSOURCE: https://github.com/nextauthjs/docs/blob/main/versioned_docs/version-v3/providers/discord.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport Providers from `next-auth/providers`\n...\\nproviders: [\\n  Providers.Discord({\\n    clientId: process.env.DISCORD_CLIENT_ID,\\n    clientSecret: process.env.DISCORD_CLIENT_SECRET\\n  })\\n]\\n...\n```\n\n----------------------------------------\n\nTITLE: Setting Up Azure AD B2C Provider in NextAuth.js\nDESCRIPTION: Imports and configures Azure AD B2C as an authentication provider using NextAuth.js. Dependencies include next-auth and next-auth/providers. Configures the provider with client ID, client secret, tenant ID, and necessary scopes. Placed in the NextAuth API route configuration.\nSOURCE: https://github.com/nextauthjs/docs/blob/main/versioned_docs/version-v3/providers/azure-ad-b2c.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport Providers from 'next-auth/providers';\\n...\\nproviders: [\\n  Providers.AzureADB2C({\\n    clientId: process.env.AZURE_CLIENT_ID,\\n    clientSecret: process.env.AZURE_CLIENT_SECRET,\\n    scope: 'offline_access User.Read',\\n    tenantId: process.env.AZURE_TENANT_ID,\\n  }),\\n]\\n...\n```\n\n----------------------------------------\n\nTITLE: Configuring Apple Provider in NextAuth.js\nDESCRIPTION: This snippet shows how to set up the Apple Provider in NextAuth.js using environment variables for the client ID and secret.\nSOURCE: https://github.com/nextauthjs/docs/blob/main/docs/providers/apple.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport AppleProvider from \"next-auth/providers/apple\";\n...\nproviders: [\n  AppleProvider({\n    clientId: process.env.APPLE_ID,\n    clientSecret: process.env.APPLE_SECRET\n  })\n]\n...\n```\n\n----------------------------------------\n\nTITLE: Configuring Coinbase Provider in NextAuth.js\nDESCRIPTION: Example showing how to initialize and configure the Coinbase authentication provider in NextAuth.js. Uses environment variables for client credentials and provides access tokens valid for 2 hours with refresh token support.\nSOURCE: https://github.com/nextauthjs/docs/blob/main/docs/providers/coinbase.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport CoinbaseProvider from \"next-auth/providers/coinbase\";\n...\nproviders: [\n  CoinbaseProvider({\n    clientId: process.env.COINBASE_CLIENT_ID,\n    clientSecret: process.env.COINBASE_CLIENT_SECRET\n  })\n]\n...\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Adapter with JSDoc in JavaScript\nDESCRIPTION: This snippet demonstrates how to create a custom adapter for NextAuth.js using JavaScript with JSDoc for type hinting. It shows the basic structure of an adapter function that returns an object with adapter methods.\nSOURCE: https://github.com/nextauthjs/docs/blob/main/docs/adapters/overview.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n/** @return { import(\"next-auth/adapters\").Adapter } */\nfunction MyAdapter() {\n  return {\n    // your adapter methods here\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Netlify Provider in NextAuth.js\nDESCRIPTION: This snippet demonstrates how to set up the Netlify provider in NextAuth.js. It shows the basic configuration using environment variables for the client ID and client secret.\nSOURCE: https://github.com/nextauthjs/docs/blob/main/docs/providers/netlify.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport NetlifyProvider from \"next-auth/providers/netlify\";\n...\nproviders: [\n  NetlifyProvider({\n    clientId: process.env.NETLIFY_CLIENT_ID,\n    clientSecret: process.env.NETLIFY_CLIENT_SECRET\n  })\n]\n...\n```\n\n----------------------------------------\n\nTITLE: Importing NextAuth Middleware in Next.js\nDESCRIPTION: Shows different ways to import the withAuth middleware function from next-auth/middleware package.\nSOURCE: https://github.com/nextauthjs/docs/blob/main/docs/configuration/nextjs.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport withAuth from \"next-auth/middleware\"\n// or\nimport { withAuth } from \"next-auth/middleware\"\n```\n\n----------------------------------------\n\nTITLE: Custom OAuth Provider Configuration Example\nDESCRIPTION: Example of a custom OAuth provider configuration object, using Google's OAuth setup as a template.\nSOURCE: https://github.com/nextauthjs/docs/blob/main/versioned_docs/version-v3/configuration/providers.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  id: \"google\",\n  name: \"Google\",\n  type: \"oauth\",\n  version: \"2.0\",\n  scope: \"https://www.googleapis.com/auth/userinfo.profile https://www.googleapis.com/auth/userinfo.email\",\n  params: { grant_type: \"authorization_code\" },\n  accessTokenUrl: \"https://accounts.google.com/o/oauth2/token\",\n  requestTokenUrl: \"https://accounts.google.com/o/oauth2/auth\",\n  authorizationUrl: \"https://accounts.google.com/o/oauth2/auth?response_type=code\",\n  profileUrl: \"https://www.googleapis.com/oauth2/v1/userinfo?alt=json\",\n  async profile(profile, tokens) {\n    return {\n      id: profile.id,\n      name: profile.name,\n      email: profile.email,\n      image: profile.picture\n    }\n  },\n  clientId: \"\",\n  clientSecret: \"\"\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Callback Handling in NextAuth.js Initialization\nDESCRIPTION: This snippet shows how to handle custom callbacks and cookie values during NextAuth.js initialization. It demonstrates logging callback requests and including custom cookie values in the session.\nSOURCE: https://github.com/nextauthjs/docs/blob/main/docs/configuration/initialization.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { NextApiRequest, NextApiResponse } from \"next\"\nimport NextAuth from \"next-auth\"\n\nexport default async function auth(req: NextApiRequest, res: NextApiResponse) {\n\n  if(req.query.nextauth.includes(\"callback\") && req.method === \"POST\") {\n    console.log(\n      \"Handling callback request from my Identity Provider\",\n      req.body\n    )\n  }\n\n  // Get a custom cookie value from the request\n  const someCookie = req.cookies[\"some-custom-cookie\"]\n\n  return await NextAuth(req, res, {\n    ...\n    callbacks: {\n      session({ session, token }) {\n        // Return a cookie value as part of the session\n        // This is read when `req.query.nextauth.includes(\"session\") && req.method === \"GET\"`\n        session.someCookie = someCookie\n        return session\n      }\n    }\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing JWT Token with EVE Online Character ID\nDESCRIPTION: Extends the JWT and session callbacks to include the EVE Online Character ID in the token and session for additional user identification\nSOURCE: https://github.com/nextauthjs/docs/blob/main/versioned_docs/version-v3/providers/eveonline.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n...options: {\n  jwt: {\n    secret: process.env.JWT_SECRET,\n  },\n  callbacks: {\n    jwt: async (token, user, account, profile, isNewUser) => {\n      if (profile) {\n        token = {\n          ...token,\n          id: profile.CharacterID,\n        }\n      }\n      return token;\n    },\n    session: async (session, token) => {\n      if (token) {\n        session.user.id = token.id;\n      }\n      return session;\n    }\n  }\n}...\n```\n\n----------------------------------------\n\nTITLE: Importing and Configuring LinkedIn Provider in NextAuth.js\nDESCRIPTION: This code snippet demonstrates how to import the LinkedIn provider from NextAuth.js and configure it with client ID and secret from environment variables. It is essential for enabling LinkedIn authentication in your application.\nSOURCE: https://github.com/nextauthjs/docs/blob/main/versioned_docs/version-v3/providers/linkedin.md#2025-04-21_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport Providers from `next-auth/providers`\n...\nproviders: [\n  Providers.LinkedIn({\n    clientId: process.env.LINKEDIN_CLIENT_ID,\n    clientSecret: process.env.LINKEDIN_CLIENT_SECRET\n  })\n]\n...\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Okta Provider with NextAuth.js - JavaScript\nDESCRIPTION: This code snippet demonstrates how to configure the Okta provider in a NextAuth.js setup, allowing developers to use Okta for authentication. It shows how to import the necessary providers and set up the authentication options using client ID, client secret, and domain retrieved from environment variables.\nSOURCE: https://github.com/nextauthjs/docs/blob/main/versioned_docs/version-v3/providers/okta.md#2025-04-21_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport Providers from `next-auth/providers`\n...\nproviders: [\n  Providers.Okta({\n    clientId: process.env.OKTA_CLIENT_ID,\n    clientSecret: process.env.OKTA_CLIENT_SECRET,\n    domain: process.env.OKTA_DOMAIN\n  })\n]\n...\n```\n\n----------------------------------------\n\nTITLE: Creating User Accounts Table in Postgres SQL\nDESCRIPTION: This SQL snippet creates the 'accounts' table in a Postgres database to store user account information. It includes fields like 'compound_id', 'user_id', and 'provider_type' and enforces primary key constraints.\nSOURCE: https://github.com/nextauthjs/docs/blob/main/versioned_docs/version-v3/adapters/typeorm/postgres.md#2025-04-21_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE accounts\n  (\n    id                   SERIAL,\n    compound_id          VARCHAR(255) NOT NULL,\n    user_id              INTEGER NOT NULL,\n    provider_type        VARCHAR(255) NOT NULL,\n    provider_id          VARCHAR(255) NOT NULL,\n    provider_account_id  VARCHAR(255) NOT NULL,\n    refresh_token        TEXT,\n    access_token         TEXT,\n    access_token_expires TIMESTAMPTZ,\n    created_at           TIMESTAMPTZ NOT NULL DEFAULT CURRENT_TIMESTAMP,\n    updated_at           TIMESTAMPTZ NOT NULL DEFAULT CURRENT_TIMESTAMP,\n    PRIMARY KEY (id)\n  );\n```\n\n----------------------------------------\n\nTITLE: Writing a Cypress test for NextAuth.js Google login\nDESCRIPTION: This JavaScript code demonstrates a Cypress test for logging in with Google using NextAuth.js. It includes setting up the test environment, performing the login, and handling the session cookie.\nSOURCE: https://github.com/nextauthjs/docs/blob/main/docs/tutorials/testing-with-cypress.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\ndescribe(\"Login page\", () => {\n  before(() => {\n    cy.log(`Visiting https://company.tld`)\n    cy.visit(\"/\")\n  })\n  it(\"Login with Google\", () => {\n    const username = Cypress.env(\"GOOGLE_USER\")\n    const password = Cypress.env(\"GOOGLE_PW\")\n    const loginUrl = Cypress.env(\"SITE_NAME\")\n    const cookieName = Cypress.env(\"COOKIE_NAME\")\n    const socialLoginOptions = {\n      username,\n      password,\n      loginUrl,\n      headless: true,\n      logs: false,\n      isPopup: true,\n      loginSelector: `a[href=\"${Cypress.env(\n        \"SITE_NAME\"\n      )}/api/auth/signin/google\"]`,\n      postLoginSelector: \".unread-count\",\n    }\n\n    return cy\n      .task(\"GoogleSocialLogin\", socialLoginOptions)\n      .then(({ cookies }) => {\n        cy.clearCookies()\n\n        const cookie = cookies\n          .filter((cookie) => cookie.name === cookieName)\n          .pop()\n        if (cookie) {\n          cy.setCookie(cookie.name, cookie.value, {\n            domain: cookie.domain,\n            expiry: cookie.expires,\n            httpOnly: cookie.httpOnly,\n            path: cookie.path,\n            secure: cookie.secure,\n          })\n\n          Cypress.Cookies.defaults({\n            preserve: cookieName,\n          })\n\n          // remove the two lines below if you need to stay logged in\n          // for your remaining tests\n          cy.visit(\"/api/auth/signout\")\n          cy.get(\"form\").submit()\n        }\n      })\n  })\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Foursquare Provider in Next-Auth.js\nDESCRIPTION: Example configuration for initializing the Foursquare authentication provider in Next-Auth.js. Requires clientId, clientSecret, and apiVersion parameters. The apiVersion must be in YYYYMMDD format and indicates compatibility with API changes up to that date.\nSOURCE: https://github.com/nextauthjs/docs/blob/main/versioned_docs/version-v3/providers/foursquare.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport Providers from `next-auth/providers`\n...\nproviders: [\n  Providers.Foursquare({\n    clientId: process.env.FOURSQUARE_CLIENT_ID,\n    clientSecret: process.env.FOURSQUARE_CLIENT_SECRET,\n    apiVersion: 'YYYYMMDD'\n  })\n]\n...\n```\n\n----------------------------------------\n\nTITLE: Configuring NextAuth.js with Neo4j Adapter\nDESCRIPTION: This code snippet demonstrates how to set up NextAuth.js with the Neo4j Adapter. It includes creating a Neo4j driver instance, establishing a session, and configuring the NextAuth options with the Neo4j Adapter.\nSOURCE: https://github.com/nextauthjs/docs/blob/main/docs/adapters/neo4j.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport neo4j from \"neo4j-driver\"\nimport { Neo4jAdapter } from \"@next-auth/neo4j-adapter\"\n\nconst driver = neo4j.driver(\n  \"bolt://localhost\",\n  neo4j.auth.basic(\"neo4j\", \"password\")\n)\n\nconst neo4jSession = driver.session()\n\n// For more information on each option (and a full list of options) go to\n// https://next-auth.js.org/configuration/options\nexport default NextAuth({\n  // https://next-auth.js.org/configuration/providers\n  providers: [],\n  adapter: Neo4jAdapter(neo4jSession),\n  ...\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Battle.net Provider in NextAuth.js\nDESCRIPTION: Example configuration for integrating Battle.net authentication with NextAuth.js. Requires client ID and secret from Battle.net's developer portal, along with region specification.\nSOURCE: https://github.com/nextauthjs/docs/blob/main/docs/providers/battlenet.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport BattleNetProvider from \"next-auth/providers/battlenet\";\n...\nproviders: [\n  BattleNetProvider({\n    clientId: process.env.BATTLENET_CLIENT_ID,\n    clientSecret: process.env.BATTLENET_CLIENT_SECRET,\n    region: process.env.BATTLENET_REGION\n  })\n]\n...\n```\n\n----------------------------------------\n\nTITLE: Basic NextAuth Middleware Implementation\nDESCRIPTION: Simple re-export of the default NextAuth middleware for basic authentication protection.\nSOURCE: https://github.com/nextauthjs/docs/blob/main/docs/configuration/nextjs.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nexport { default } from \"next-auth/middleware\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Dropbox Provider in NextAuth.js\nDESCRIPTION: Demonstrates how to add the Dropbox OAuth provider to NextAuth.js configuration with client credentials from environment variables\nSOURCE: https://github.com/nextauthjs/docs/blob/main/versioned_docs/version-v3/providers/dropbox.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport Providers from `next-auth/providers`\n...providers: [\n  Providers.Dropbox({\n    clientId: process.env.DROPBOX_CLIENT_ID,\n    clientSecret: process.env.DROPBOX_CLIENT_SECRET\n  })\n]...\n```\n\n----------------------------------------\n\nTITLE: Importing and Configuring Zoho Provider in NextAuth.js\nDESCRIPTION: This code snippet demonstrates how to import the Zoho provider from NextAuth.js and configure it with client ID and secret. It shows how to set up the provider within the NextAuth configuration options. The snippet requires the 'next-auth' package and expects 'ZOHO_CLIENT_ID' and 'ZOHO_CLIENT_SECRET' to be set in environment variables.\nSOURCE: https://github.com/nextauthjs/docs/blob/main/versioned_docs/version-v3/providers/zoho.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport Providers from `next-auth/providers`\n...\nproviders: [\n  Providers.Zoho({\n    clientId: process.env.ZOHO_CLIENT_ID,\n    clientSecret: process.env.ZOHO_CLIENT_SECRET\n  })\n]\n...\n```\n\n----------------------------------------\n\nTITLE: Configuring WorkOS Provider in NextAuth.js\nDESCRIPTION: This snippet shows how to set up the WorkOS Provider in the NextAuth.js configuration. It includes the provider configuration with clientId and clientSecret options.\nSOURCE: https://github.com/nextauthjs/docs/blob/main/docs/providers/workos.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport WorkOSProvider from \"next-auth/providers/workos\";\n...\nproviders: [\n  WorkOSProvider({\n    clientId: process.env.WORKOS_CLIENT_ID,\n    clientSecret: process.env.WORKOS_API_KEY,\n  }),\n],\n...\n```\n\n----------------------------------------\n\nTITLE: Configuring Email Provider with connection string in NextAuth.js\nDESCRIPTION: This snippet shows how to configure the Email provider using a connection string from environment variables. It demonstrates setting the `server` and `from` options within the `Providers.Email` configuration.\nSOURCE: https://github.com/nextauthjs/docs/blob/main/versioned_docs/version-v3/providers/email.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nproviders: [\n  Providers.Email({\n    server: process.env.EMAIL_SERVER,\n    from: process.env.EMAIL_FROM\n  }),\n],\n```\n\n----------------------------------------\n\nTITLE: Configuring GitLab Provider in NextAuth.js\nDESCRIPTION: Demonstrates how to add GitLab as an OAuth provider using client ID and client secret from environment variables. Requires registering an application in GitLab developer settings.\nSOURCE: https://github.com/nextauthjs/docs/blob/main/versioned_docs/version-v3/providers/gitlab.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport Providers from `next-auth/providers`\n...providers: [\n  Providers.GitLab({\n    clientId: process.env.GITLAB_CLIENT_ID,\n    clientSecret: process.env.GITLAB_CLIENT_SECRET\n  })\n]...\n```\n\n----------------------------------------\n\nTITLE: Basic Azure AD B2C Provider Configuration\nDESCRIPTION: Basic NextAuth.js configuration for Azure AD B2C provider with ID Token support, including tenant ID, client credentials, and basic scope configuration.\nSOURCE: https://github.com/nextauthjs/docs/blob/main/docs/providers/azure-ad-b2c.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport AzureADB2CProvider from \"next-auth/providers/azure-ad-b2c\";\n...\nproviders: [\n  AzureADB2CProvider({\n    tenantId: process.env.AZURE_AD_B2C_TENANT_NAME,\n    clientId: process.env.AZURE_AD_B2C_CLIENT_ID,\n    clientSecret: process.env.AZURE_AD_B2C_CLIENT_SECRET,\n    primaryUserFlow: process.env.AZURE_AD_B2C_PRIMARY_USER_FLOW,\n    authorization: { params: { scope: \"offline_access openid\" } },\n  }),\n]\n```\n\n----------------------------------------\n\nTITLE: Importing and Configuring Yandex Provider in NextAuth.js JavaScript\nDESCRIPTION: This code snippet demonstrates how to import the Yandex provider from the next-auth/providers package and configure it with environment variables for client ID and client secret in a NextAuth.js setup. It requires the NextAuth.js library and environment variables set for YANDEX_CLIENT_ID and YANDEX_CLIENT_SECRET. The snippet is part of the authentication providers array used in a NextAuth.js configuration file.\nSOURCE: https://github.com/nextauthjs/docs/blob/main/versioned_docs/version-v3/providers/yandex.md#2025-04-21_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport Providers from `next-auth/providers`\n...\nproviders: [\n  Providers.Yandex({\n    clientId: process.env.YANDEX_CLIENT_ID,\n    clientSecret: process.env.YANDEX_CLIENT_SECRET\n  })\n]\n...\n```\n\n----------------------------------------\n\nTITLE: Configuring Next Auth with DynamoDB Adapter\nDESCRIPTION: JavaScript configuration for setting up Next Auth with the DynamoDB adapter. This includes AWS credentials setup, DynamoDB client initialization, and integration with authentication providers.\nSOURCE: https://github.com/nextauthjs/docs/blob/main/docs/adapters/dynamodb.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { DynamoDB } from \"@aws-sdk/client-dynamodb\"\nimport { DynamoDBDocument } from \"@aws-sdk/lib-dynamodb\"\nimport NextAuth from \"next-auth\";\nimport Providers from \"next-auth/providers\";\nimport { DynamoDBAdapter } from \"@next-auth/dynamodb-adapter\"\n\nconst config: DynamoDBClientConfig = {\n  credentials: {\n    accessKeyId: process.env.NEXT_AUTH_AWS_ACCESS_KEY as string,\n    secretAccessKey: process.env.NEXT_AUTH_AWS_SECRET_KEY as string,\n  },\n  region: process.env.NEXT_AUTH_AWS_REGION,\n};\n\nconst client = DynamoDBDocument.from(new DynamoDB(config), {\n  marshallOptions: {\n    convertEmptyValues: true,\n    removeUndefinedValues: true,\n    convertClassInstanceToMap: true,\n  },\n})\n\nexport default NextAuth({\n  // Configure one or more authentication providers\n  providers: [\n    Providers.GitHub({\n      clientId: process.env.GITHUB_ID,\n      clientSecret: process.env.GITHUB_SECRET,\n    }),\n    Providers.Email({\n      server: process.env.EMAIL_SERVER,\n      from: process.env.EMAIL_FROM,\n    }),\n    // ...add more providers here\n  ],\n  adapter: DynamoDBAdapter(\n    client\n  ),\n  ...\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring FusionAuth Provider in NextAuth.js\nDESCRIPTION: Example configuration for setting up FusionAuth provider in NextAuth.js. Demonstrates how to initialize the provider with required parameters including issuer, clientId, clientSecret, and optional tenantId for multi-tenancy support.\nSOURCE: https://github.com/nextauthjs/docs/blob/main/docs/providers/fusionauth.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport FusionAuthProvider from \"next-auth/providers/fusionauth\";\n...\nproviders: [\n  FusionAuthProvider({\n    id: \"fusionauth\",\n    name: \"FusionAuth\",\n    issuer:  process.env.FUSIONAUTH_ISSUER,\n    clientId: process.env.FUSIONAUTH_CLIENT_ID,\n    clientSecret: process.env.FUSIONAUTH_SECRET,\n    tenantId: process.env.FUSIONAUTH_TENANT_ID // Only required if you're using multi-tenancy\n  }),\n]\n...\n```\n\n----------------------------------------\n\nTITLE: Implementing Email Sign-In Button\nDESCRIPTION: This example shows how to create a sign-in button that initiates the email-based sign-in flow, passing the target email as an option.\nSOURCE: https://github.com/nextauthjs/docs/blob/main/docs/getting-started/client.md#2025-04-21_snippet_8\n\nLANGUAGE: jsx\nCODE:\n```\nimport { signIn } from \"next-auth/react\"\n\nexport default ({ email }) => (\n  <button onClick={() => signIn(\"email\", { email })}>Sign in with Email</button>\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Spotify OAuth Provider in NextAuth.js\nDESCRIPTION: Demonstrates how to add Spotify as an authentication provider using NextAuth.js. Requires client ID and client secret obtained from Spotify Developer Dashboard.\nSOURCE: https://github.com/nextauthjs/docs/blob/main/versioned_docs/version-v3/providers/spotify.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport Providers from `next-auth/providers`\n...providers: [\n  Providers.Spotify({\n    clientId: process.env.SPOTIFY_CLIENT_ID,\n    clientSecret: process.env.SPOTIFY_CLIENT_SECRET\n  })\n]...\n```\n\n----------------------------------------\n\nTITLE: Configuring Box Provider in NextAuth.js\nDESCRIPTION: Example configuration for integrating Box authentication provider into NextAuth.js. Demonstrates how to set up the provider with client ID and secret environment variables.\nSOURCE: https://github.com/nextauthjs/docs/blob/main/versioned_docs/version-v3/providers/box.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport Providers from `next-auth/providers`\n...\nproviders: [\n  Providers.Box({\n    clientId: process.env.BOX_CLIENT_ID,\n    clientSecret: process.env.BOX_CLIENT_SECRET\n  })\n]\n...\n```\n\n----------------------------------------\n\nTITLE: Reddit Provider Refresh Token Configuration in NextAuth.js\nDESCRIPTION: This snippet shows how to configure the Reddit provider in NextAuth.js to obtain a refresh token. It requires specifying the `id`, `name`, `clientId`, `clientSecret`, `scope`, `type`, `version`, `params`, `accessTokenUrl`, `authorizationUrl`, `profileUrl`, and `profile` properties.\nSOURCE: https://github.com/nextauthjs/docs/blob/main/versioned_docs/version-v3/providers/reddit.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nproviders: [\n  {\n    id: \"reddit\",\n    name: \"Reddit\",\n    clientId: process.env.REDDIT_CLIENT_ID,\n    clientSecret: process.env.REDDIT_CLIENT_SECRET,\n    scope: \"identity mysubreddits read\", //Check Reddit API Documentation for more. The identity scope is required.\n    type: \"oauth\",\n    version: \"2.0\",\n    params: { grant_type: \"authorization_code\" },\n    accessTokenUrl: \" https://www.reddit.com/api/v1/access_token\",\n    authorizationUrl:\n      \"https://www.reddit.com/api/v1/authorize?response_type=code&duration=permanent\",\n    profileUrl: \"https://oauth.reddit.com/api/v1/me\",\n    profile: (profile) => {\n      return {\n        id: profile.id,\n        name: profile.name,\n        email: null,\n      }\n    },\n  },\n]\n```\n\n----------------------------------------\n\nTITLE: signIn() Google OAuth Example\nDESCRIPTION: This example demonstrates how to use the `signIn()` method to initiate the Google OAuth sign-in flow when a button is clicked. It specifies \"google\" as the provider, redirecting the user to Google for authentication.\nSOURCE: https://github.com/nextauthjs/docs/blob/main/versioned_docs/version-v3/getting-started/client.md#2025-04-21_snippet_8\n\nLANGUAGE: js\nCODE:\n```\nimport { signIn } from \"next-auth/client\"\n\nexport default () => (\n  <button onClick={() => signIn(\"google\")}>Sign in with Google</button>\n)\n```\n\n----------------------------------------\n\nTITLE: Implementing Azure AD Provider in NextAuth.js Configuration\nDESCRIPTION: This code snippet demonstrates how to set up the Azure AD provider in the NextAuth.js configuration file. It imports the AzureADProvider and configures it with the environment variables for client ID, client secret, and tenant ID.\nSOURCE: https://github.com/nextauthjs/docs/blob/main/docs/providers/azure-ad.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport AzureADProvider from \"next-auth/providers/azure-ad\";\n\n...\nproviders: [\n  AzureADProvider({\n    clientId: process.env.AZURE_AD_CLIENT_ID,\n    clientSecret: process.env.AZURE_AD_CLIENT_SECRET,\n    tenantId: process.env.AZURE_AD_TENANT_ID,\n  }),\n]\n...\n```\n\n----------------------------------------\n\nTITLE: Advanced Azure AD B2C Provider Configuration\nDESCRIPTION: Extended NextAuth.js configuration for Azure AD B2C provider with additional API scopes for Authorization Token support.\nSOURCE: https://github.com/nextauthjs/docs/blob/main/docs/providers/azure-ad-b2c.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport AzureADB2CProvider from \"next-auth/providers/azure-ad-b2c\";\n...\nproviders: [\n  AzureADB2CProvider({\n    tenantId: process.env.AZURE_AD_B2C_TENANT_NAME,\n    clientId: process.env.AZURE_AD_B2C_CLIENT_ID,\n    clientSecret: process.env.AZURE_AD_B2C_CLIENT_SECRET,\n    primaryUserFlow: process.env.AZURE_AD_B2C_PRIMARY_USER_FLOW,\n    authorization: { params: { scope: `https://${process.env.AZURE_AD_B2C_TENANT_NAME}.onmicrosoft.com/api/demo.read https://${process.env.AZURE_AD_B2C_TENANT_NAME}.onmicrosoft.com/api/demo.write offline_access openid` } },\n  }),\n]\n```\n\n----------------------------------------\n\nTITLE: Basic Reddit Provider Configuration in NextAuth.js\nDESCRIPTION: Simple implementation of Reddit OAuth provider with basic authentication configuration using environment variables for credentials.\nSOURCE: https://github.com/nextauthjs/docs/blob/main/docs/providers/reddit.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport RedditProvider from \"next-auth/providers/reddit\";\n...\nproviders: [\n  RedditProvider({\n    clientId: process.env.REDDIT_CLIENT_ID,\n    clientSecret: process.env.REDDIT_CLIENT_SECRET\n  })\n]\n...\n```\n\n----------------------------------------\n\nTITLE: Custom Pages Configuration in NextAuth\nDESCRIPTION: Shows how to specify custom URLs for sign-in and error pages in NextAuth configuration.\nSOURCE: https://github.com/nextauthjs/docs/blob/main/docs/configuration/nextjs.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\npages: {\n  signIn: '/auth/signin',\n  error: '/auth/error',\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Okta Provider in NextAuth.js\nDESCRIPTION: Example showing how to set up and configure the Okta authentication provider in NextAuth.js. Requires Okta client ID, client secret, and issuer URL from environment variables.\nSOURCE: https://github.com/nextauthjs/docs/blob/main/docs/providers/okta.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport OktaProvider from \"next-auth/providers/okta\";\n...\nproviders: [\n  OktaProvider({\n    clientId: process.env.OKTA_CLIENT_ID,\n    clientSecret: process.env.OKTA_CLIENT_SECRET,\n    issuer: process.env.OKTA_ISSUER\n  })\n]\n...\n```\n\n----------------------------------------\n\nTITLE: Configuring Email Provider with configuration object in NextAuth.js\nDESCRIPTION: This snippet shows how to configure the Email provider using a configuration object with individual SMTP options. It sets the `server` option as an object containing `host`, `port`, and `auth` properties, along with the `from` option.\nSOURCE: https://github.com/nextauthjs/docs/blob/main/versioned_docs/version-v3/providers/email.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nproviders: [\n  Providers.Email({\n    server: {\n      host: process.env.EMAIL_SERVER_HOST,\n      port: process.env.EMAIL_SERVER_PORT,\n      auth: {\n        user: process.env.EMAIL_SERVER_USER,\n        pass: process.env.EMAIL_SERVER_PASSWORD\n      }\n    },\n    from: process.env.EMAIL_FROM\n  }),\n],\n```\n\n----------------------------------------\n\nTITLE: Configuring Kakao Provider in NextAuth.js\nDESCRIPTION: Example of adding Kakao OAuth provider to NextAuth.js authentication configuration. Requires Kakao client ID and client secret, which should be stored in environment variables for security.\nSOURCE: https://github.com/nextauthjs/docs/blob/main/versioned_docs/version-v3/providers/kakao.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport Providers from `next-auth/providers`\n...providers: [\n  Providers.Kakao({\n    clientId: process.env.KAKAO_CLIENT_ID,\n    clientSecret: process.env.KAKAO_CLIENT_SECRET\n  })\n]...\n```\n\n----------------------------------------\n\nTITLE: Setting NextAuth URL Environment Variables\nDESCRIPTION: Configuration of NEXTAUTH_URL environment variable for production deployment and internal server access.\nSOURCE: https://github.com/nextauthjs/docs/blob/main/versioned_docs/version-v3/configuration/options.md#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nNEXTAUTH_URL=https://example.com\n```\n\nLANGUAGE: plaintext\nCODE:\n```\nNEXTAUTH_URL_INTERNAL=http://10.240.8.16\n```\n\n----------------------------------------\n\nTITLE: Configuring FusionAuth Provider in NextAuth.js\nDESCRIPTION: Example configuration for setting up FusionAuth provider in NextAuth.js. Demonstrates how to initialize the provider with required credentials and optional tenant ID for multi-tenancy support.\nSOURCE: https://github.com/nextauthjs/docs/blob/main/versioned_docs/version-v3/providers/fusionauth.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport Providers from `next-auth/providers`\n...\nproviders: [\n  Providers.FusionAuth({\n    id: \"fusionauth\",\n    name: \"FusionAuth\",\n    domain:  process.env.FUSIONAUTH_DOMAIN,\n    clientId: process.env.FUSIONAUTH_CLIENT_ID,\n    clientSecret: process.env.FUSIONAUTH_SECRET,\n    tenantId: process.env.FUSIONAUTH_TENANT_ID // Only required if you're using multi-tenancy\n  }),\n]\n...\n```\n\n----------------------------------------\n\nTITLE: Demo IdentityServer4 Provider Configuration in NextAuth.js\nDESCRIPTION: Configuration example for connecting to the demo IdentityServer at demo.identityserver.io. This setup includes specific scope parameters and uses the demo credentials (bob/bob or alice/alice for testing).\nSOURCE: https://github.com/nextauthjs/docs/blob/main/docs/providers/identity-server4.md#2025-04-21_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nimport IdentityServer4Provider from `next-auth/providers/identity-server4`\n...\nproviders: [\n  IdentityServer4Provider({\n    id: \"demo-identity-server\",\n    name: \"Demo IdentityServer4\",\n    authorization: { params: { scope: \"openid profile email api offline_access\" } },\n    issuer:  \"https://demo.identityserver.io/\",\n    clientId: \"interactive.confidential\",\n    clientSecret: \"secret\",\n  })\n}\n...\n```\n\n----------------------------------------\n\nTITLE: Retrieving LDAP User Token in API Route\nDESCRIPTION: Demonstrates how to retrieve the JWT token containing LDAP user credentials in an API route, which can be used for further authentication or processing.\nSOURCE: https://github.com/nextauthjs/docs/blob/main/versioned_docs/version-v3/tutorials/ldap-auth.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\ntoken = await jwt.getToken({\n  req,\n  secret: process.env.NEXTAUTH_SECRET,\n})\nconst { username, password } = token\n```\n\n----------------------------------------\n\nTITLE: Configuring Strava Provider in NextAuth.js\nDESCRIPTION: Demonstrates how to initialize and configure the Strava authentication provider in NextAuth.js using environment variables for client credentials. This setup enables Strava OAuth authentication in a Next.js application.\nSOURCE: https://github.com/nextauthjs/docs/blob/main/docs/providers/strava.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport StravaProvider from \"next-auth/providers/strava\";\n...\nproviders: [\n  StravaProvider({\n    clientId: process.env.STRAVA_CLIENT_ID,\n    clientSecret: process.env.STRAVA_CLIENT_SECRET,\n  })\n]\n...\n```\n\n----------------------------------------\n\nTITLE: Configuring WordPress Provider in NextAuth.js\nDESCRIPTION: Example implementation of WordPress.com OAuth2 authentication provider in NextAuth.js. Requires clientId and clientSecret from WordPress.com developer portal. Must be configured within the providers array of NextAuth.js setup.\nSOURCE: https://github.com/nextauthjs/docs/blob/main/docs/providers/wordpress.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport WordpressProvider from \"next-auth/providers/wordpress\";\n...\nproviders: [\n  WordpressProvider({\n    clientId: process.env.WORDPRESS_CLIENT_ID,\n    clientSecret: process.env.WORDPRESS_CLIENT_SECRET\n  })\n}\n...\n```\n\n----------------------------------------\n\nTITLE: Custom Client Session Handling in Next.js _app.jsx\nDESCRIPTION: This snippet demonstrates a custom approach to handle client-side session management in Next.js, including a loading state and protected routes.\nSOURCE: https://github.com/nextauthjs/docs/blob/main/docs/getting-started/client.md#2025-04-21_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nexport default function App({\n  Component,\n  pageProps: { session, ...pageProps },\n}) {\n  return (\n    <SessionProvider session={session}>\n      {Component.auth ? (\n        <Auth>\n          <Component {...pageProps} />\n        </Auth>\n      ) : (\n        <Component {...pageProps} />\n      )}\n    </SessionProvider>\n  )\n}\n\nfunction Auth({ children }) {\n  const { data: session, status } = useSession({required: true})\n  const isUser = !!session?.user\n\n  if (isUser) {\n    return children\n  }\n\n  // Session is being fetched, or no user.\n  // If no user, useEffect() will redirect.\n  return <div>Loading...</div>\n}\n```\n\n----------------------------------------\n\nTITLE: Setting up environment variables for email (configuration object)\nDESCRIPTION: This snippet shows how to define environment variables for the SMTP server using individual configuration options like user, password, host, and port. These variables are then used to configure the Email provider.\nSOURCE: https://github.com/nextauthjs/docs/blob/main/versioned_docs/version-v3/providers/email.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n\"EMAIL_SERVER_USER=username\nEMAIL_SERVER_PASSWORD=password\nEMAIL_SERVER_HOST=smtp.example.com\nEMAIL_SERVER_PORT=587\nEMAIL_FROM=noreply@example.com\"\n```\n\n----------------------------------------\n\nTITLE: Configuring LINE Provider in NextAuth.js\nDESCRIPTION: This code snippet demonstrates how to configure the LINE provider within the NextAuth.js `providers` array. It requires setting the `clientId` and `clientSecret` using environment variables that store the LINE application credentials.\nSOURCE: https://github.com/nextauthjs/docs/blob/main/versioned_docs/version-v3/providers/line.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport Providers from `next-auth/providers`\n...\nproviders: [\n  Providers.LINE({\n    clientId: process.env.LINE_CLIENT_ID,\n    clientSecret: process.env.LINE_CLIENT_SECRET\n  })\n]\n...\n```\n\n----------------------------------------\n\nTITLE: Configuring EVE Online Provider in NextAuth\nDESCRIPTION: Demonstrates how to add the EVE Online OAuth provider to NextAuth configuration with client credentials from environment variables\nSOURCE: https://github.com/nextauthjs/docs/blob/main/versioned_docs/version-v3/providers/eveonline.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport Providers from `next-auth/providers`\n...\nproviders: [\n  Providers.EVEOnline({\n    clientId: process.env.EVE_CLIENT_ID,\n    clientSecret: process.env.EVE_CLIENT_SECRET\n  })\n]\n...\n```\n\n----------------------------------------\n\nTITLE: Configuring 42 School Provider in NextAuth.js\nDESCRIPTION: This JavaScript snippet demonstrates how to configure the 42 School Provider within NextAuth.js by importing the provider and setting the `clientId` and `clientSecret` using environment variables. Ensure that `next-auth/providers` is installed before using it. The configuration enables authentication via 42 School by providing the necessary client credentials.\nSOURCE: https://github.com/nextauthjs/docs/blob/main/versioned_docs/version-v3/providers/42.md#2025-04-21_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport Providers from `next-auth/providers`\n...\nproviders: [\n  Providers.FortyTwo({\n    clientId: process.env.FORTY_TWO_CLIENT_ID,\n    clientSecret: process.env.FORTY_TWO_CLIENT_SECRET\n  })\n]\n...\n```\n\n----------------------------------------\n\nTITLE: Basic IdentityServer4 Provider Configuration in NextAuth.js\nDESCRIPTION: Example of how to configure the IdentityServer4 provider in NextAuth.js using environment variables for the issuer URL, client ID, and client secret.\nSOURCE: https://github.com/nextauthjs/docs/blob/main/docs/providers/identity-server4.md#2025-04-21_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nimport IdentityServer4Provider from \"next-auth/providers/identity-server4\";\n...\nproviders: [\n  IdentityServer4Provider({\n    id: \"identity-server4\",\n    name: \"IdentityServer4\",\n    issuer:  process.env.IdentityServer4_Issuer,\n    clientId: process.env.IdentityServer4_CLIENT_ID,\n    clientSecret: process.env.IdentityServer4_CLIENT_SECRET\n  })\n]\n...\n```\n\n----------------------------------------\n\nTITLE: Configuring TypeORM Adapter Synchronization in NextAuth.js\nDESCRIPTION: Example configuration for disabling automatic entity synchronization in TypeORM adapter to prevent the ADAPTER_TYPEORM_UPDATING_ENTITIES warning. Shows how to set up the TypeORMLegacyAdapter with synchronization disabled.\nSOURCE: https://github.com/nextauthjs/docs/blob/main/docs/warnings.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nadapter: TypeORMLegacyAdapter({\n  type: 'mysql',\n  username: process.env.DATABASE_USERNAME,\n  password: process.env.DATABASE_PASSWORD,\n  host: process.env.DATABASE_HOST,\n  database: process.env.DATABASE_DB,\n  synchronize: false\n}),\n```\n\n----------------------------------------\n\nTITLE: Customizing Prisma Schema with Snake Case and Plural Table Names\nDESCRIPTION: Example of how to customize the Prisma schema to use snake_case field names and plural table names using Prisma's @Map() feature. This modification doesn't affect NextAuth.js functionality.\nSOURCE: https://github.com/nextauthjs/docs/blob/main/docs/adapters/prisma.md#2025-04-21_snippet_6\n\nLANGUAGE: json\nCODE:\n```\nmodel Account {\n  id                 String  @id @default(cuid())\n  userId             String  @map(\"user_id\")\n  type               String\n  provider           String\n  providerAccountId  String  @map(\"provider_account_id\")\n  refresh_token      String? @db.Text\n  access_token       String? @db.Text\n  expires_at         Int?\n  token_type         String?\n  scope              String?\n  id_token           String? @db.Text\n  session_state      String?\n  oauth_token_secret String?\n  oauth_token        String?\n\n  user User @relation(fields: [userId], references: [id], onDelete: Cascade)\n\n  @@unique([provider, providerAccountId])\n  @@map(\"accounts\")\n}\n\nmodel Session {\n  id           String   @id @default(cuid())\n  sessionToken String   @unique @map(\"session_token\")\n  userId       String   @map(\"user_id\")\n  expires      DateTime\n  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)\n\n  @@map(\"sessions\")\n}\n\nmodel User {\n  id            String    @id @default(cuid())\n  name          String?\n  email         String?   @unique\n  emailVerified DateTime? @map(\"email_verified\")\n  image         String?\n  accounts      Account[]\n  sessions      Session[]\n\n  @@map(\"users\")\n}\n\nmodel VerificationToken {\n  identifier String\n  token      String   @unique\n  expires    DateTime\n\n  @@unique([identifier, token])\n  @@map(\"verificationtokens\")\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Atlassian OAuth Provider in NextAuth.js\nDESCRIPTION: Example code demonstrating how to configure the Atlassian OAuth provider in NextAuth.js. This snippet shows how to initialize the provider with client credentials and define the necessary scope for accessing Jira resources.\nSOURCE: https://github.com/nextauthjs/docs/blob/main/docs/providers/atlassian.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport AtlassianProvider from \"next-auth/providers/atlassian\";\n...\nproviders: [\n  AtlassianProvider({\n    clientId: process.env.ATLASSIAN_CLIENT_ID,\n    clientSecret: process.env.ATLASSIAN_CLIENT_SECRET,\n    scope: \"write:jira-work read:jira-work read:jira-user offline_access read:me\"\n  })\n]\n...\n```\n\n----------------------------------------\n\nTITLE: Setting NEXTAUTH_URL Environment Variable\nDESCRIPTION: Demonstrates how to set the NEXTAUTH_URL environment variable which defines the canonical URL of your site in production.\nSOURCE: https://github.com/nextauthjs/docs/blob/main/docs/configuration/options.md#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nNEXTAUTH_URL=https://example.com\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom User Model with TypeORM\nDESCRIPTION: This snippet demonstrates how to extend the built-in User model from the TypeORM adapter in NextAuth.js, allowing for the addition of custom properties such as phoneNumber, while preserving existing properties. It requires NextAuth.js and TypeORM as dependencies.\nSOURCE: https://github.com/nextauthjs/docs/blob/main/versioned_docs/version-v3/tutorials/typeorm-custom-models.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport Adapters from \"next-auth/adapters\"\n\n// Extend the built-in models using class inheritance\nexport default class User extends Adapters.TypeORM.Models.User.model {\n  // You can extend the options in a model but you should not remove the base\n  // properties or change the order of the built-in options on the constructor\n  constructor(name, email, image, emailVerified) {\n    super(name, email, image, emailVerified)\n  }\n}\n\nexport const UserSchema = {\n  name: \"User\",\n  target: User,\n  columns: {\n    ...Adapters.TypeORM.Models.User.schema.columns,\n    // Adds a phoneNumber to the User schema\n    phoneNumber: {\n      type: \"varchar\",\n      nullable: true,\n    },\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring WordPress Provider in NextAuth.js - JavaScript\nDESCRIPTION: This snippet demonstrates how to configure the WordPress provider in NextAuth.js for OAuth2 authentication. It requires the 'next-auth/providers' package and relies on environment variables for the Client ID and Client Secret. Ensure to register your application with WordPress to obtain these credentials.\nSOURCE: https://github.com/nextauthjs/docs/blob/main/versioned_docs/version-v3/providers/wordpress.md#2025-04-21_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport Providers from `next-auth/providers`\n...\nproviders: [\n  Providers.WordPress({\n    clientId: process.env.WORDPRESS_CLIENT_ID,\n    clientSecret: process.env.WORDPRESS_CLIENT_SECRET\n  })\n}\n...\n```\n\n----------------------------------------\n\nTITLE: Configuring Coinbase Provider in NextAuth.js\nDESCRIPTION: This code snippet demonstrates how to configure the Coinbase provider within NextAuth.js. It imports the Providers object and then configures the Coinbase provider using the client ID and client secret obtained from the Coinbase API settings. The clientId and clientSecret are passed as options to the Coinbase provider, which are typically stored as environment variables.\nSOURCE: https://github.com/nextauthjs/docs/blob/main/versioned_docs/version-v3/providers/coinbase.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport Providers from `next-auth/providers`\n...\nproviders: [\n  Providers.Coinbase({\n    clientId: process.env.COINBASE_CLIENT_ID,\n    clientSecret: process.env.COINBASE_CLIENT_SECRET\n  })\n]\n...\n```\n\n----------------------------------------\n\nTITLE: Configuring Strava Provider in NextAuth.js\nDESCRIPTION: This code snippet demonstrates how to configure the Strava provider within your NextAuth.js application. It imports the providers and then instantiates the Strava provider with the required client ID and client secret obtained from Strava's developer portal, which are read from environment variables.\nSOURCE: https://github.com/nextauthjs/docs/blob/main/versioned_docs/version-v3/providers/strava.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport Providers from 'next-auth/providers'\n...\nproviders: [\n  Providers.Strava({\n    clientId: process.env.STRAVA_CLIENT_ID,\n    clientSecret: process.env.STRAVA_CLIENT_SECRET,\n  })\n]\n...\n```\n\n----------------------------------------\n\nTITLE: Configuring Bungie Provider in NextAuth\nDESCRIPTION: Example configuration for adding Bungie OAuth provider with client credentials and API key\nSOURCE: https://github.com/nextauthjs/docs/blob/main/versioned_docs/version-v3/providers/bungie.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport Providers from `next-auth/providers`\n...providers: [\n  Providers.Bungie({\n    clientId: process.env.BUNGIE_CLIENT_ID,\n    clientSecret: process.env.BUNGIE_SECRET,\n    headers: {\n      'X-API-Key': provess.env.BUNGIE_API_KEY\n    }\n  }),\n]...\n```\n\n----------------------------------------\n\nTITLE: Configuring Netlify Provider in NextAuth.js\nDESCRIPTION: This code snippet demonstrates how to configure the Netlify provider within your NextAuth.js setup. It requires the `NETLIFY_CLIENT_ID` and `NETLIFY_CLIENT_SECRET` environment variables to be set. It imports the Providers object from `next-auth/providers`.\nSOURCE: https://github.com/nextauthjs/docs/blob/main/versioned_docs/version-v3/providers/netlify.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport Providers from `next-auth/providers`\n...\nproviders: [\n  Providers.Netlify({\n    clientId: process.env.NETLIFY_CLIENT_ID,\n    clientSecret: process.env.NETLIFY_CLIENT_SECRET\n  })\n]\n...\n```\n\n----------------------------------------\n\nTITLE: Email Provider Configuration\nDESCRIPTION: Configuration example for setting up email-based authentication using magic links in NextAuth.js.\nSOURCE: https://github.com/nextauthjs/docs/blob/main/versioned_docs/version-v3/configuration/providers.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport Providers from `next-auth/providers`\n...\nproviders: [\n  Providers.Email({\n    server: process.env.EMAIL_SERVER,\n    from: process.env.EMAIL_FROM,\n    // maxAge: 24 * 60 * 60, // How long email links are valid for (default 24h)\n  }),\n],\n...\n```\n\n----------------------------------------\n\nTITLE: Configuring Spotify Provider in NextAuth.js\nDESCRIPTION: This code snippet demonstrates how to set up the Spotify provider in NextAuth.js. It imports the SpotifyProvider and configures it with the client ID and client secret obtained from the Spotify Developer Dashboard.\nSOURCE: https://github.com/nextauthjs/docs/blob/main/docs/providers/spotify.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport SpotifyProvider from \"next-auth/providers/spotify\";\n...\nproviders: [\n  SpotifyProvider({\n    clientId: process.env.SPOTIFY_CLIENT_ID,\n    clientSecret: process.env.SPOTIFY_CLIENT_SECRET\n  })\n]\n...\n```\n\n----------------------------------------\n\nTITLE: Exporting Custom Models from a Single File\nDESCRIPTION: This snippet illustrates how to aggregate and export custom models from a single JavaScript file, simplifying the import process in other parts of the application. It requires the User model and UserSchema defined in a previous snippet.\nSOURCE: https://github.com/nextauthjs/docs/blob/main/versioned_docs/version-v3/tutorials/typeorm-custom-models.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport User, { UserSchema } from \"./User\"\n\nexport default {\n  User: {\n    model: User,\n    schema: UserSchema,\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Sequelize Models for NextAuth\nDESCRIPTION: Example demonstrating how to customize Sequelize models with additional fields while maintaining NextAuth compatibility.\nSOURCE: https://github.com/nextauthjs/docs/blob/main/docs/adapters/sequelize.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport NextAuth from \"next-auth\"\nimport SequelizeAdapter, { models } from \"@next-auth/sequelize-adapter\"\nimport Sequelize, { DataTypes } from \"sequelize\"\n\nconst sequelize = new Sequelize(\"sqlite::memory:\")\n\nexport default NextAuth({\n  providers: [],\n  adapter: SequelizeAdapter(sequelize, {\n    models: {\n      User: sequelize.define(\"user\", {\n        ...models.User,\n        phoneNumber: DataTypes.STRING,\n      }),\n    },\n  }),\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring SessionProvider with Custom Base Path\nDESCRIPTION: Implementation showing how to configure SessionProvider with a custom base path for NextAuth.js API endpoints.\nSOURCE: https://github.com/nextauthjs/docs/blob/main/docs/getting-started/client.md#2025-04-21_snippet_14\n\nLANGUAGE: jsx\nCODE:\n```\nimport { SessionProvider } from \"next-auth/react\"\n\nexport default function App({\n  Component,\n  pageProps: { session, ...pageProps },\n}) {\n  return (\n    <SessionProvider session={session} basePath=\"/custom-route/api/auth\">\n      <Component {...pageProps} />\n    </SessionProvider>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing FACEIT Provider in NextAuth.js\nDESCRIPTION: Example code showing how to configure and initialize the FACEIT authentication provider with NextAuth.js. Requires FACEIT client ID and secret environment variables.\nSOURCE: https://github.com/nextauthjs/docs/blob/main/docs/providers/faceit.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport FaceItProvider from \"next-auth/providers/faceit\";\n...\nproviders: [\n  FaceItProvider({\n    clientId: process.env.FACEIT_CLIENT_ID,\n    clientSecret: process.env.FACEIT_CLIENT_SECRET\n  })\n]\n...\n```\n\n----------------------------------------\n\nTITLE: Using Custom Models in NextAuth.js Configuration\nDESCRIPTION: This snippet shows how to configure NextAuth.js to use custom models by specifying the TypeORM adapter with a database connection string and passing the custom models as an option. It requires NextAuth.js, TypeORM, and defined custom models.\nSOURCE: https://github.com/nextauthjs/docs/blob/main/versioned_docs/version-v3/tutorials/typeorm-custom-models.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport NextAuth from \"next-auth\"\nimport Providers from \"next-auth/providers\"\nimport Adapters from \"next-auth/adapters\"\n\nimport Models from \"../../../models\"\n\nexport default NextAuth({\n  providers: [\n    // Your providers\n  ],\n\n  adapter: Adapters.TypeORM.Adapter(\n    // The first argument should be a database connection string or TypeORM config object\n    \"mysql://username:password@127.0.0.1:3306/database_name\",\n    // The second argument can be used to pass custom models and schemas\n    {\n      models: {\n        User: Models.User,\n      },\n    }\n  ),\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring JWT Session Token\nDESCRIPTION: Configuration option to explicitly use JSON Web Tokens as session tokens, even with a database present\nSOURCE: https://github.com/nextauthjs/docs/blob/main/versioned_docs/version-v3/faq.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nsession: { jwt: true }\n```\n\n----------------------------------------\n\nTITLE: Creating Users Table in Postgres SQL\nDESCRIPTION: This SQL snippet sets up the 'users' table which holds user details such as 'name', 'email', and timestamps for 'created_at' and 'updated_at'. It enforces unique identification for each user with a primary key.\nSOURCE: https://github.com/nextauthjs/docs/blob/main/versioned_docs/version-v3/adapters/typeorm/postgres.md#2025-04-21_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE users\n  (\n    id             SERIAL,\n    name           VARCHAR(255),\n    email          VARCHAR(255),\n    email_verified TIMESTAMPTZ,\n    image          TEXT,\n    created_at     TIMESTAMPTZ NOT NULL DEFAULT CURRENT_TIMESTAMP,\n    updated_at     TIMESTAMPTZ NOT NULL DEFAULT CURRENT_TIMESTAMP,\n    PRIMARY KEY (id)\n  );\n```\n\n----------------------------------------\n\nTITLE: Creating Authentication Tables Schema in MSSQL\nDESCRIPTION: Creates the core tables and indexes required for NextAuth.js authentication system in Microsoft SQL Server. Includes accounts, sessions, users, and verification_requests tables with appropriate columns and constraints. All timestamp fields use datetime type due to TypeORM adapter requirements.\nSOURCE: https://github.com/nextauthjs/docs/blob/main/versioned_docs/version-v3/adapters/typeorm/mssql.md#2025-04-21_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE accounts\n  (\n    id                    int IDENTITY(1,1) NOT NULL,\n    compound_id           varchar(255) NOT NULL,\n    user_id               int NOT NULL,\n    provider_type         varchar(255) NOT NULL,\n    provider_id           varchar(255) NOT NULL,\n    provider_account_id   varchar(255) NOT NULL,\n    refresh_token         text NULL,\n    access_token          text NULL,\n    access_token_expires  datetime NULL,\n    created_at            datetime NOT NULL DEFAULT getdate(),\n    updated_at            datetime NOT NULL DEFAULT getdate()\n  );\n\nCREATE TABLE sessions\n  (\n    id            int IDENTITY(1,1) NOT NULL,\n    user_id       int NOT NULL,\n    expires       datetime NOT NULL,\n    session_token varchar(255) NOT NULL,\n    access_token  varchar(255) NOT NULL,\n    created_at    datetime NOT NULL DEFAULT getdate(),\n    updated_at    datetime NOT NULL DEFAULT getdate()\n  );\n\nCREATE TABLE users\n  (\n    id              int IDENTITY(1,1) NOT NULL,\n    name            varchar(255) NULL,\n    email           varchar(255) NULL,\n    email_verified  datetime NULL,\n    image           varchar(255) NULL,\n    created_at      datetime NOT NULL DEFAULT getdate(),\n    updated_at      datetime NOT NULL DEFAULT getdate()\n  );\n\nCREATE TABLE verification_requests\n  (\n    id          int IDENTITY(1,1) NOT NULL,\n    identifier  varchar(255) NOT NULL,\n    token       varchar(255) NOT NULL,\n    expires     datetime NOT NULL,\n    created_at  datetime NOT NULL DEFAULT getdate(),\n    updated_at  datetime NOT NULL DEFAULT getdate()\n  );\n\nCREATE UNIQUE INDEX compound_id\n  ON accounts(compound_id);\n\nCREATE INDEX provider_account_id\n  ON accounts(provider_account_id);\n\nCREATE INDEX provider_id\n  ON accounts(provider_id);\n\nCREATE INDEX user_id\n  ON accounts(user_id);\n\nCREATE UNIQUE INDEX session_token\n  ON sessions(session_token);\n\nCREATE UNIQUE INDEX access_token\n  ON sessions(access_token);\n\nCREATE UNIQUE INDEX email\n  ON users(email);\n\nCREATE UNIQUE INDEX token\n  ON verification_requests(token);\n```\n\n----------------------------------------\n\nTITLE: Configuring Discord Provider in NextAuth.js\nDESCRIPTION: This snippet demonstrates how to set up the Discord provider in NextAuth.js. It imports the DiscordProvider and configures it with the client ID and client secret from environment variables.\nSOURCE: https://github.com/nextauthjs/docs/blob/main/docs/providers/discord.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport DiscordProvider from \"next-auth/providers/discord\";\n...\nproviders: [\n  DiscordProvider({\n    clientId: process.env.DISCORD_CLIENT_ID,\n    clientSecret: process.env.DISCORD_CLIENT_SECRET\n  })\n]\n...\n```\n\n----------------------------------------\n\nTITLE: Migrating Database Adapter Configuration in NextAuth.js\nDESCRIPTION: Demonstrates how to update the database connection configuration from using the database string to using the TypeORMLegacyAdapter.\nSOURCE: https://github.com/nextauthjs/docs/blob/main/docs/getting-started/upgrade-to-v4.md#2025-04-21_snippet_6\n\nLANGUAGE: diff\nCODE:\n```\n// [...nextauth].js\nimport NextAuth from \"next-auth\"\n+ import { TypeORMLegacyAdapter } from \"@next-auth/typeorm-legacy-adapter\"\n\n...\nexport default NextAuth({\n-  database: \"yourconnectionstring\",\n+  adapter: TypeORMLegacyAdapter(\"yourconnectionstring\")\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom User Entity with MikroORM for NextAuth.js\nDESCRIPTION: Example of overriding the default User entity in the MikroORM adapter. This custom implementation adds a role field while maintaining compatibility with the NextAuth.js requirements.\nSOURCE: https://github.com/nextauthjs/docs/blob/main/docs/adapters/mikro-orm.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport config from \"config/mikro-orm.ts\"\nimport {\n  Cascade,\n  Collection,\n  Entity,\n  OneToMany,\n  PrimaryKey,\n  Property,\n  Unique,\n} from \"@mikro-orm/core\"\nimport { defaultEntities } from \"@next-auth/mikro-orm-adapter\"\n\nconst { Account, Session } = defaultEntities\n\n@Entity()\nexport class User implements defaultEntities.User {\n  @PrimaryKey()\n  id: string = randomUUID()\n\n  @Property({ nullable: true })\n  name?: string\n\n  @Property({ nullable: true })\n  @Unique()\n  email?: string\n\n  @Property({ type: \"Date\", nullable: true })\n  emailVerified: Date | null = null\n\n  @Property({ nullable: true })\n  image?: string\n\n  @OneToMany({\n    entity: () => Session,\n    mappedBy: (session) => session.user,\n    hidden: true,\n    orphanRemoval: true,\n    cascade: [Cascade.ALL],\n  })\n  sessions = new Collection<Session>(this)\n\n  @OneToMany({\n    entity: () => Account,\n    mappedBy: (account) => account.user,\n    hidden: true,\n    orphanRemoval: true,\n    cascade: [Cascade.ALL],\n  })\n  accounts = new Collection<Account>(this)\n\n  @Enum({ hidden: true })\n  role = \"ADMIN\"\n}\n\nexport default NextAuth({\n  adapter: MikroOrmAdapter(config, { entities: { User } })\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Theme Options in NextAuth.js (JavaScript)\nDESCRIPTION: This code snippet shows how to set theme options in NextAuth.js configuration. It allows customizing the color scheme, brand color, and logo for the authentication pages.\nSOURCE: https://github.com/nextauthjs/docs/blob/main/docs/configuration/options.md#2025-04-21_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\ntheme: {\n  colorScheme: \"auto\", // \"auto\" | \"dark\" | \"light\"\n  brandColor: \"\", // Hex color code\n  logo: \"\" // Absolute URL to image\n}\n```\n\n----------------------------------------\n\nTITLE: Database Schema Synchronization with Sequelize\nDESCRIPTION: Example showing how to automatically create database tables in development using Sequelize sync.\nSOURCE: https://github.com/nextauthjs/docs/blob/main/docs/adapters/sequelize.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport NextAuth from \"next-auth\"\nimport SequelizeAdapter from \"@next-auth/sequelize-adapter\"\nimport Sequelize from 'sequelize'\n\nconst sequelize = new Sequelize(\"sqlite::memory:\")\nconst adapter = SequelizeAdapter(sequelize)\n\n// Calling sync() is not recommended in production\nsequelize.sync()\n\nexport default NextAuth({\n  ...\n  adapter\n  ...\n})\n```\n\n----------------------------------------\n\nTITLE: Custom Login Page for NextAuth.js SSO\nDESCRIPTION: This snippet details the setup for a custom Next.js login page designed to facilitate SSO via WorkOS. By collecting the user's email and extracting the domain, it configures the `signIn` method with `authorizationParams` for domain-specific authentication. It requires `next-auth/client` and utilizes Next.js's server-side features to dynamically retrieve available providers.\nSOURCE: https://github.com/nextauthjs/docs/blob/main/versioned_docs/version-v3/providers/workos.md#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { getProviders, signIn } from \"next-auth/client\"\n\nexport default function SignIn({ providers }) {\n  const [email, setEmail] = useState(\"\")\n\n  return (\n    <>\n      {Object.values(providers).map((provider) => {\n        if (provider.id === \"workos\") {\n          return (\n            <div key={provider.id}>\n              <input\n                type=\"email\"\n                value={email}\n                placeholder=\"Email\"\n                onChange={(event) => setEmail(event.target.value)}\n              />\n              <button\n                onClick={() =>\n                  signIn(provider.id, undefined, {\n                    domain: email.split(\"@\")[1],\n                  })\n                }\n              >\n                Sign in with SSO\n              </button>\n            </div>\n          )\n        }\n\n        return (\n          <div key={provider.id}>\n            <button onClick={() => signIn(provider.id)}>\n              Sign in with {provider.name}\n            </button>\n          </div>\n        )\n      })}\n    </>\n  )\n}\n\n// This is the recommended way for Next.js 9.3 or newer\nexport async function getServerSideProps(context) {\n  const providers = await getProviders()\n  return {\n    props: { providers },\n  }\n}\n\n/*\n// If older than Next.js 9.3\nSignIn.getInitialProps = async () => {\n  return {\n    providers: await getProviders()\n  }\n}\n*/\n```\n\n----------------------------------------\n\nTITLE: Configuring Email Environment Variables with Connection String\nDESCRIPTION: Environment variable setup for email authentication using SMTP connection string format\nSOURCE: https://github.com/nextauthjs/docs/blob/main/docs/providers/email.md#2025-04-21_snippet_0\n\nLANGUAGE: env\nCODE:\n```\nEMAIL_SERVER=smtp://username:password@smtp.example.com:587\nEMAIL_FROM=noreply@example.com\n```\n\n----------------------------------------\n\nTITLE: Installing NextAuth with PouchDB Adapter\nDESCRIPTION: Command to install next-auth and its PouchDB adapter using npm\nSOURCE: https://github.com/nextauthjs/docs/blob/main/versioned_docs/version-v3/adapters/pouchdb.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nnpm install next-auth @next-auth/pouchdb-adapter@canary\n```\n\n----------------------------------------\n\nTITLE: Configuring Mailchimp Provider in NextAuth.js\nDESCRIPTION: This code snippet demonstrates how to initialize the Mailchimp authentication provider using environment variables for the client ID and secret within a NextAuth.js setup. Prerequisites include having NextAuth.js and the 'providers' module installed, as well as setting the 'MAILCHIMP_CLIENT_ID' and 'MAILCHIMP_CLIENT_SECRET' environment variables. The primary inputs are the 'clientId' and 'clientSecret' parameters, and the provider is configured to facilitate authentication via Mailchimp.\nSOURCE: https://github.com/nextauthjs/docs/blob/main/versioned_docs/version-v3/providers/mailchimp.md#2025-04-21_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport Providers from `next-auth/providers`\n...\nproviders: [\n  Providers.Mailchimp({\n    clientId: process.env.MAILCHIMP_CLIENT_ID,\n    clientSecret: process.env.MAILCHIMP_CLIENT_SECRET\n  })\n]\n...\n```\n\n----------------------------------------\n\nTITLE: Configuring Twitch Provider in NextAuth.js\nDESCRIPTION: This code snippet demonstrates how to set up the Twitch authentication provider in a NextAuth.js application. It uses environment variables for the client ID and client secret.\nSOURCE: https://github.com/nextauthjs/docs/blob/main/docs/providers/twitch.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport TwitchProvider from \"next-auth/providers/twitch\";\n...\nproviders: [\n  TwitchProvider({\n    clientId: process.env.TWITCH_CLIENT_ID,\n    clientSecret: process.env.TWITCH_CLIENT_SECRET\n  })\n]\n...\n```\n\n----------------------------------------\n\nTITLE: Custom Model Mapping Configuration\nDESCRIPTION: Example of custom model name mapping configuration for Prisma adapter.\nSOURCE: https://github.com/nextauthjs/docs/blob/main/versioned_docs/version-v3/adapters/prisma-legacy.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nadapter: Adapters.Prisma.Adapter({\n  prisma,\n  modelMapping: {\n    User: 'user',\n    Account: 'account',\n    Session: 'session',\n    VerificationRequest: 'verificationRequest'\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Bungie Provider in NextAuth.js\nDESCRIPTION: This snippet demonstrates how to set up the Bungie provider in NextAuth.js. It includes the provider configuration with client ID, client secret, and custom headers for the Bungie API key.\nSOURCE: https://github.com/nextauthjs/docs/blob/main/docs/providers/bungie.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport BungieProvider from \"next-auth/providers/bungie\";\n...\nproviders: [\n  BungieProvider({\n    clientId: process.env.BUNGIE_CLIENT_ID,\n    clientSecret: process.env.BUNGIE_SECRET,\n    headers: {\n      \"X-API-Key\": provess.env.BUNGIE_API_KEY\n    }\n  }),\n]\n...\n```\n\n----------------------------------------\n\nTITLE: Configuring NextAuth with FaunaDB Adapter\nDESCRIPTION: Implementation of NextAuth configuration with FaunaDB adapter setup, including client initialization and basic configuration options\nSOURCE: https://github.com/nextauthjs/docs/blob/main/docs/adapters/fauna.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport NextAuth from \"next-auth\"\nimport { Client as FaunaClient } from \"faunadb\"\nimport { FaunaAdapter } from \"@next-auth/fauna-adapter\"\n\nconst client = new FaunaClient({\n  secret: \"secret\",\n  scheme: \"http\",\n  domain: \"localhost\",\n  port: 8443,\n})\n\n// For more information on each option (and a full list of options) go to\n// https://next-auth.js.org/configuration/options\nexport default NextAuth({\n  // https://next-auth.js.org/providers/overview\n  providers: [],\n  adapter: FaunaAdapter(client)\n  ...\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring 42 School Provider in NextAuth.js\nDESCRIPTION: This code snippet demonstrates how to set up the 42 School authentication provider in NextAuth.js. It imports the FortyTwoProvider and configures it with client ID and secret environment variables.\nSOURCE: https://github.com/nextauthjs/docs/blob/main/docs/providers/42.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport FortyTwoProvider from \"next-auth/providers/42\";\n...\nproviders: [\n  FortyTwoProvider({\n    clientId: process.env.FORTY_TWO_CLIENT_ID,\n    clientSecret: process.env.FORTY_TWO_CLIENT_SECRET\n  })\n]\n...\n```\n\n----------------------------------------\n\nTITLE: Render Prop Session Management for Class Components\nDESCRIPTION: Implements a render prop component that provides session and loading state to class components, allowing flexible and dynamic rendering based on authentication status.\nSOURCE: https://github.com/nextauthjs/docs/blob/main/versioned_docs/version-v3/tutorials/usage-with-class-components.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useSession } from \"next-auth/client\"\n\nconst UseSession = ({ children }) => {\n  const [session, loading] = useSession()\n  return children({ session, loading })\n}\n\n// Usage\nclass ClassComponent extends React.Component {\n  render() {\n    return (\n      <UseSession>\n        {({ session, loading }) => (\n          <pre>{JSON.stringify(session, null, 2)}</pre>\n        )}\n      </UseSession>\n    )\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: API Route Example getProviders()\nDESCRIPTION: This example shows how to use the `getProviders()` method in an API route. It retrieves a list of configured authentication providers. This is useful for creating a dynamic custom sign-in page.\nSOURCE: https://github.com/nextauthjs/docs/blob/main/versioned_docs/version-v3/getting-started/client.md#2025-04-21_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\nimport { getProviders } from \"next-auth/client\"\n\nexport default async (req, res) => {\n  const providers = await getProviders()\n  console.log(\"Providers\", providers)\n  res.end()\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Verification Requests Table in Postgres SQL\nDESCRIPTION: This SQL snippet creates the 'verification_requests' table which is used to store requests for user verification including identifiers and tokens. The structure ensures that requests have unique identifiers using a primary key.\nSOURCE: https://github.com/nextauthjs/docs/blob/main/versioned_docs/version-v3/adapters/typeorm/postgres.md#2025-04-21_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE verification_requests\n  (\n    id         SERIAL,\n    identifier VARCHAR(255) NOT NULL,\n    token      VARCHAR(255) NOT NULL,\n    expires    TIMESTAMPTZ NOT NULL,\n    created_at TIMESTAMPTZ NOT NULL DEFAULT CURRENT_TIMESTAMP,\n    updated_at TIMESTAMPTZ NOT NULL DEFAULT CURRENT_TIMESTAMP,\n    PRIMARY KEY (id)\n  );\n```\n\n----------------------------------------\n\nTITLE: Module Augmentation for Session Interface in NextAuth\nDESCRIPTION: Example of extending the Session interface using TypeScript module augmentation.\nSOURCE: https://github.com/nextauthjs/docs/blob/main/versioned_docs/version-v3/getting-started/typescript.md#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport NextAuth from \"next-auth\"\n\ndeclare module \"next-auth\" {\n  /**\n   * Returned by `useSession`, `getSession` and received as a prop on the `Provider` React Context\n   */\n  interface Session {\n    user: {\n      /** The user's postal address. */\n      address: string\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Salesforce Provider in NextAuth.js\nDESCRIPTION: This code snippet demonstrates how to set up the Salesforce provider in NextAuth.js. It imports the SalesforceProvider and configures it with client ID and client secret environment variables.\nSOURCE: https://github.com/nextauthjs/docs/blob/main/docs/providers/salesforce.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport SalesforceProvider from \"next-auth/providers/salesforce\";\n...\nproviders: [\n  SalesforceProvider({\n    clientId: process.env.SALESFORCE_CLIENT_ID,\n    clientSecret: process.env.SALESFORCE_CLIENT_SECRET,\n  })\n]\n...\n```\n\n----------------------------------------\n\nTITLE: Installing NextAuth and Firebase Adapter\nDESCRIPTION: Command to install the required packages for using NextAuth with Firebase Adapter.\nSOURCE: https://github.com/nextauthjs/docs/blob/main/versioned_docs/version-v3/adapters/firebase.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nnpm install next-auth @next-auth/firebase-adapter@canary\n```\n\n----------------------------------------\n\nTITLE: Implementing Kakao Provider in NextAuth.js\nDESCRIPTION: This snippet demonstrates how to import and configure the Kakao Provider in NextAuth.js. It shows the basic setup using environment variables for the client ID and client secret.\nSOURCE: https://github.com/nextauthjs/docs/blob/main/docs/providers/kakao.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport KakaoProvider from \"next-auth/providers/kakao\";\n...\nproviders: [\n  KakaoProvider({\n    clientId: process.env.KAKAO_CLIENT_ID,\n    clientSecret: process.env.KAKAO_CLIENT_SECRET\n  })\n]\n...\n```\n\n----------------------------------------\n\nTITLE: Implementing Kakao OAuth Provider Configuration in NextAuth.js\nDESCRIPTION: Example configuration for Kakao OAuth provider showing full OAuth 2.0 endpoint setup with custom profile mapping.\nSOURCE: https://github.com/nextauthjs/docs/blob/main/docs/configuration/providers/oauth.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  id: \"kakao\",\n  name: \"Kakao\",\n  type: \"oauth\",\n  authorization: \"https://kauth.kakao.com/oauth/authorize\",\n  token: \"https://kauth.kakao.com/oauth/token\",\n  userinfo: \"https://kapi.kakao.com/v2/user/me\",\n  profile(profile) {\n    return {\n      id: profile.id,\n      name: profile.kakao_account?.profile.nickname,\n      email: profile.kakao_account?.email,\n      image: profile.kakao_account?.profile.profile_image_url,\n    }\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Upstash Redis Adapter for NextAuth.js\nDESCRIPTION: This command installs the required packages for using Upstash Redis Adapter with NextAuth.js.\nSOURCE: https://github.com/nextauthjs/docs/blob/main/docs/adapters/upstash-redis.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @upstash/redis @next-auth/upstash-redis-adapter\n```\n\n----------------------------------------\n\nTITLE: Configuring Zoom Provider in NextAuth.js\nDESCRIPTION: Example code showing how to initialize and configure the Zoom authentication provider in NextAuth.js. Requires Zoom client ID and secret environment variables.\nSOURCE: https://github.com/nextauthjs/docs/blob/main/docs/providers/zoom.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport ZoomProvider from \"next-auth/providers/zoom\"\n...\nproviders: [\n  ZoomProvider({\n    clientId: process.env.ZOOM_CLIENT_ID,\n    clientSecret: process.env.ZOOM_CLIENT_SECRET\n  })\n}\n...\n```\n\n----------------------------------------\n\nTITLE: Demo IdentityServer4 Configuration in NextAuth.js - JavaScript\nDESCRIPTION: This snippet configures a demo IdentityServer4 provider for testing purposes with NextAuth.js. It uses the demo server at 'demo.identityserver.io' and provides example credentials. The configuration uses 'pkce' protection and a client ID of 'interactive.confidential'. This setup is useful for testing authentication processes before deploying with a production server.\nSOURCE: https://github.com/nextauthjs/docs/blob/main/versioned_docs/version-v3/providers/identity-server4.md#2025-04-21_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport Providers from `next-auth/providers`\n...\nproviders: [\n  Providers.IdentityServer4({\n    id: \"demo-identity-server\",\n    name: \"Demo IdentityServer4\",\n    scope: \"openid profile email api offline_access\",\n    domain:  \"demo.identityserver.io\",\n    clientId: \"interactive.confidential\",\n    clientSecret: \"secret\",\n    protection: \"pkce\"\n  })\n}\n...\n```\n\n----------------------------------------\n\nTITLE: Creating Indexes for Accounts Table in Postgres SQL\nDESCRIPTION: This SQL snippet creates multiple indexes on the 'accounts' table to optimize query performance based on 'compound_id', 'provider_account_id', 'provider_id', and 'user_id'. These indexes help speed up lookups and enhance data retrieval efficiency.\nSOURCE: https://github.com/nextauthjs/docs/blob/main/versioned_docs/version-v3/adapters/typeorm/postgres.md#2025-04-21_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\nCREATE UNIQUE INDEX compound_id\n  ON accounts(compound_id);\n\nCREATE INDEX provider_account_id\n  ON accounts(provider_account_id);\n\nCREATE INDEX provider_id\n  ON accounts(provider_id);\n\nCREATE INDEX user_id\n  ON accounts(user_id);\n```\n\n----------------------------------------\n\nTITLE: JWT Interface Augmentation in NextAuth\nDESCRIPTION: Example of extending the JWT interface in the next-auth/jwt submodule using TypeScript module augmentation.\nSOURCE: https://github.com/nextauthjs/docs/blob/main/versioned_docs/version-v3/getting-started/typescript.md#2025-04-21_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\ndeclare module \"next-auth/jwt\" {\n  /** Returned by the `jwt` callback and `getToken`, when using JWT sessions */\n  interface JWT {\n    /** OpenID ID Token */\n    idToken?: string\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Trakt Provider in NextAuth.js\nDESCRIPTION: Example configuration for initializing the Trakt authentication provider in NextAuth.js. Requires TRAKT_ID and TRAKT_SECRET environment variables to be set.\nSOURCE: https://github.com/nextauthjs/docs/blob/main/docs/providers/trakt.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nproviders: [\n  TraktProvider({\n    clientId: process.env.TRAKT_ID,\n    clientSecret: process.env.TRAKT_SECRET,\n  }),\n]\n```\n\n----------------------------------------\n\nTITLE: Installing NextAuth and DynamoDB Adapter\nDESCRIPTION: Command to install next-auth and the DynamoDB adapter using npm. The @canary tag is used for the adapter to get the latest version.\nSOURCE: https://github.com/nextauthjs/docs/blob/main/versioned_docs/version-v3/adapters/dynamodb.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install next-auth @next-auth/dynamodb-adapter@canary\n```\n\n----------------------------------------\n\nTITLE: Configuring LINE Provider in NextAuth.js\nDESCRIPTION: This code snippet demonstrates how to set up the LINE provider in a Next.js application using NextAuth.js. It shows the basic configuration using environment variables for the client ID and client secret.\nSOURCE: https://github.com/nextauthjs/docs/blob/main/docs/providers/line.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport LineProvider from \"next-auth/providers/line\";\n...\nproviders: [\n  LineProvider({\n    clientId: process.env.LINE_CLIENT_ID,\n    clientSecret: process.env.LINE_CLIENT_SECRET\n  })\n]\n...\n```\n\n----------------------------------------\n\nTITLE: Overriding Default Provider Options in NextAuth.js\nDESCRIPTION: Examples of customizing built-in provider configurations by overriding default options and implementing custom profile mapping.\nSOURCE: https://github.com/nextauthjs/docs/blob/main/docs/configuration/providers/oauth.md#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nimport Auth0Provider from \"next-auth/providers/auth0\"\n\nAuth0Provider({\n  clientId: process.env.CLIENT_ID,\n  clientSecret: process.env.CLIENT_SECRET,\n  issuer: process.env.ISSUER,\n  authorization: { params: { scope: \"openid your_custom_scope\" } },\n})\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport GoogleProvider from \"next-auth/providers/google\"\n\nGoogleProvider({\n  clientId: process.env.GOOGLE_CLIENT_ID,\n  clientSecret: process.env.GOOGLE_CLIENT_SECRET,\n  profile(profile) {\n    return {\n      // Return all the profile information you need.\n      // The only truly required field is `id`\n      // to be able identify the account when added to a database\n    }\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Creating HTTPS Certificate for Local Development\nDESCRIPTION: This bash command generates a self-signed SSL certificate for localhost, which is required for Bungie authentication in local development.\nSOURCE: https://github.com/nextauthjs/docs/blob/main/docs/providers/bungie.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nopenssl req -x509 -out localhost.crt -keyout localhost.key \\\n  -newkey rsa:2048 -nodes -sha256 \\\n  -subj \"/CN=localhost\" -extensions EXT -config <( \\\n   printf \"[dn]\\nCN=localhost\\n[req]\\ndistinguished_name = dn\\n[EXT]\\nsubjectAltName=DNS:localhost\\nkeyUsage=digitalSignature\\nextendedKeyUsage=serverAuth\")\n```\n\n----------------------------------------\n\nTITLE: Integrating Zoom Provider with NextAuth.js - JavaScript\nDESCRIPTION: This snippet demonstrates how to set up the Zoom provider in NextAuth.js for OAuth authentication. It provides the necessary code to include the Zoom provider with client ID and secret from environment variables.\nSOURCE: https://github.com/nextauthjs/docs/blob/main/versioned_docs/version-v3/providers/zoom.md#2025-04-21_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport Providers from `next-auth/providers`\n...\nproviders: [\n  Providers.Zoom({\n    clientId: process.env.ZOOM_CLIENT_ID,\n    clientSecret: process.env.ZOOM_CLIENT_SECRET\n  })\n}\n...\n\n```\n\n----------------------------------------\n\nTITLE: Prisma Schema Definition\nDESCRIPTION: Complete Prisma schema definition including Account, Session, User, and VerificationRequest models with proper mapping and indexing.\nSOURCE: https://github.com/nextauthjs/docs/blob/main/versioned_docs/version-v3/adapters/prisma-legacy.md#2025-04-21_snippet_2\n\nLANGUAGE: json\nCODE:\n```\ngenerator client {\n  provider = \"prisma-client-js\"\n}\n\ndatasource db {\n  provider = \"sqlite\"\n  url      = \"file:./dev.db\"\n}\n\nmodel Account {\n  id                 Int       @id @default(autoincrement())\n  compoundId         String    @unique @map(name: \"compound_id\")\n  userId             Int       @map(name: \"user_id\")\n  providerType       String    @map(name: \"provider_type\")\n  providerId         String    @map(name: \"provider_id\")\n  providerAccountId  String    @map(name: \"provider_account_id\")\n  refreshToken       String?   @map(name: \"refresh_token\")\n  accessToken        String?   @map(name: \"access_token\")\n  accessTokenExpires DateTime? @map(name: \"access_token_expires\")\n  createdAt          DateTime  @default(now()) @map(name: \"created_at\")\n  updatedAt          DateTime  @default(now()) @map(name: \"updated_at\")\n\n  @@index([providerAccountId], name: \"providerAccountId\")\n  @@index([providerId], name: \"providerId\")\n  @@index([userId], name: \"userId\")\n  @@map(name: \"accounts\")\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Prisma Client\nDESCRIPTION: Commands to generate Prisma client and run database migrations.\nSOURCE: https://github.com/nextauthjs/docs/blob/main/versioned_docs/version-v3/adapters/prisma-legacy.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpx prisma generate\nnpx prisma migrate dev\n```\n\n----------------------------------------\n\nTITLE: Configuring FACEIT Provider in NextAuth.js\nDESCRIPTION: Example implementation of the FACEIT authentication provider in NextAuth.js. Shows how to configure the provider with client ID and secret from environment variables.\nSOURCE: https://github.com/nextauthjs/docs/blob/main/versioned_docs/version-v3/providers/faceit.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport Providers from `next-auth/providers`\n...\nproviders: [\n  Providers.FACEIT({\n    clientId: process.env.FACEIT_CLIENT_ID,\n    clientSecret: process.env.FACEIT_CLIENT_SECRET\n  })\n]\n...\n```\n\n----------------------------------------\n\nTITLE: Implementing Mailchimp Provider in NextAuth.js\nDESCRIPTION: Example code showing how to configure and initialize the Mailchimp OAuth provider in NextAuth.js. Requires clientId and clientSecret from Mailchimp OAuth settings.\nSOURCE: https://github.com/nextauthjs/docs/blob/main/docs/providers/mailchimp.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport MailchimpProvider from \"next-auth/providers/mailchimp\";\n...\nproviders: [\n  MailchimpProvider({\n    clientId: process.env.MAILCHIMP_CLIENT_ID,\n    clientSecret: process.env.MAILCHIMP_CLIENT_SECRET\n  })\n]\n...\n```\n\n----------------------------------------\n\nTITLE: Configuring Naver Provider in NextAuth.js\nDESCRIPTION: This snippet demonstrates how to set up the Naver authentication provider in a NextAuth.js project. It shows the basic configuration using environment variables for the client ID and client secret.\nSOURCE: https://github.com/nextauthjs/docs/blob/main/docs/providers/naver.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport NaverProvider from \"next-auth/providers/naver\";\n...\nproviders: [\n  NaverProvider({\n    clientId: process.env.NAVER_CLIENT_ID,\n    clientSecret: process.env.NAVER_CLIENT_SECRET\n  })\n]\n...\n```\n\n----------------------------------------\n\nTITLE: Customizing JWT Session for Dgraph Compatibility\nDESCRIPTION: Configuration for Next-Auth JWT sessions to work with Dgraph's authentication requirements. Implements custom encode and decode functions to use HS256 algorithm which is supported by Dgraph.\nSOURCE: https://github.com/nextauthjs/docs/blob/main/docs/adapters/dgraph.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as jwt from \"jsonwebtoken\";\nexport default NextAuth({\n  session: {\n    jwt: true\n  },\n  jwt: {\n    secret: process.env.SECRET,\n    encode: async ({ secret, token }) => {\n      return jwt.sign({...token, userId: token.id}, secret, {\n        algorithm: \"HS256\",\n        expiresIn: 30 * 24 * 60 * 60; // 30 days\n      });;\n    },\n    decode: async ({ secret, token }) => {\n      return jwt.verify(token, secret, { algorithms: [\"HS256\"] });\n    }\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Mail.ru Provider in NextAuth.js\nDESCRIPTION: This code snippet demonstrates how to configure the Mail.ru provider in NextAuth.js. It shows the inclusion of the MailRuProvider in the providers array, with clientId and clientSecret being set from environment variables.\nSOURCE: https://github.com/nextauthjs/docs/blob/main/docs/providers/mailru.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport MailRuProvider from \"next-auth/providers/mailru\";\n...\nproviders: [\n  MailRuProvider({\n    clientId: process.env.MAILRU_CLIENT_ID,\n    clientSecret: process.env.MAILRU_CLIENT_SECRET\n  })\n]\n...\n```\n\n----------------------------------------\n\nTITLE: Configuring Amazon Cognito Provider in NextAuth.js\nDESCRIPTION: Example configuration for setting up Amazon Cognito authentication provider in NextAuth.js. Uses environment variables for client ID, secret, and domain configuration.\nSOURCE: https://github.com/nextauthjs/docs/blob/main/versioned_docs/version-v3/providers/cognito.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport Providers from `next-auth/providers`\n...\nproviders: [\n  Providers.Cognito({\n    clientId: process.env.COGNITO_CLIENT_ID,\n    clientSecret: process.env.COGNITO_CLIENT_SECRET,\n    domain: process.env.COGNITO_DOMAIN,\n  })\n]\n...\n```\n\n----------------------------------------\n\nTITLE: Implementing Higher Order Component for NextAuth.js Session in React\nDESCRIPTION: This snippet demonstrates how to create a Higher Order Component (HOC) that wraps a class component to provide session data from NextAuth.js. It includes error handling for function components and shows usage with a class component.\nSOURCE: https://github.com/nextauthjs/docs/blob/main/docs/tutorials/usage-with-class-components.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useSession } from \"next-auth/react\"\n\nconst withSession = (Component) => (props) => {\n  const session = useSession()\n\n  // if the component has a render property, we are good\n  if (Component.prototype.render) {\n    return <Component session={session} {...props} />\n  }\n\n  // if the passed component is a function component, there is no need for this wrapper\n  throw new Error(\n    [\n      \"You passed a function component, `withSession` is not needed.\",\n      \"You can `useSession` directly in your component.\",\n    ].join(\"\\n\")\n  )\n}\n\n// Usage\nclass ClassComponent extends React.Component {\n  render() {\n    const { data: session, status } = this.props.session\n    return null\n  }\n}\n\nconst ClassComponentWithSession = withSession(ClassComponent)\n```\n\n----------------------------------------\n\nTITLE: Prisma Client Generation Commands\nDESCRIPTION: Commands for generating Prisma client and running database migrations\nSOURCE: https://github.com/nextauthjs/docs/blob/main/versioned_docs/version-v3/adapters/prisma.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpx prisma generate\nnpx prisma migrate dev\n```\n\n----------------------------------------\n\nTITLE: Configuring Environment Variables for Azure AD B2C\nDESCRIPTION: Sets essential environment variables required by the Azure AD B2C authentication setup. The variables include client ID, client secret, and tenant ID which must be provided based on the Azure AD B2C app registration. These configurations are defined in the .env.local file.\nSOURCE: https://github.com/nextauthjs/docs/blob/main/versioned_docs/version-v3/providers/azure-ad-b2c.md#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nAZURE_CLIENT_ID=<copy Application (client) ID here>\\nAZURE_CLIENT_SECRET=<copy generated secret value here>\\nAZURE_TENANT_ID=<copy the tenant id here>\n```\n\n----------------------------------------\n\nTITLE: Configuring Osu Provider in NextAuth.js\nDESCRIPTION: Example code showing how to configure the Osu authentication provider with NextAuth.js using environment variables for client credentials. Requires setting up OAuth application credentials in Osu account settings.\nSOURCE: https://github.com/nextauthjs/docs/blob/main/docs/providers/osu.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport OsuProvider from \"next-auth/providers/osu\";\n...\nproviders: [\n  OsuProvider({\n    clientId: process.env.OSU_CLIENT_ID,\n    clientSecret: process.env.OSU_CLIENT_SECRET\n  })\n]\n...\n```\n\n----------------------------------------\n\nTITLE: Configuring Authentik Provider in NextAuth.js\nDESCRIPTION: This code snippet demonstrates how to set up the Authentik Provider in NextAuth.js. It shows the basic configuration using environment variables for the client ID, client secret, and issuer URL.\nSOURCE: https://github.com/nextauthjs/docs/blob/main/docs/providers/authentik.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport AuthentikProvider from \"next-auth/providers/authentik\";\n...\nproviders: [\n  AuthentikProvider({\n    clientId: process.env.AUTHENTIK_ID,\n    clientSecret: process.env.AUTHENTIK_SECRET,\n    issuer: process.env.AUTHENTIK_ISSUER,\n  })\n]\n...\n```\n\n----------------------------------------\n\nTITLE: Updating Session Strategy Configuration in NextAuth.js\nDESCRIPTION: Shows how to migrate from the old jwt boolean flag to the new strategy option in the session configuration.\nSOURCE: https://github.com/nextauthjs/docs/blob/main/docs/getting-started/upgrade-to-v4.md#2025-04-21_snippet_5\n\nLANGUAGE: diff\nCODE:\n```\nsession: {\n- jwt: true,\n+ strategy: \"jwt\",\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Foursquare Provider in NextAuth.js\nDESCRIPTION: This snippet demonstrates how to set up the Foursquare authentication provider in NextAuth.js. It includes the necessary import statement and shows how to configure the provider with client ID, client secret, and API version. The API version is a required parameter in 'YYYYMMDD' format.\nSOURCE: https://github.com/nextauthjs/docs/blob/main/docs/providers/foursquare.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport FourSquareProvider from \"next-auth/providers/foursquare\";\n...\nproviders: [\n  FourSquareProvider({\n    clientId: process.env.FOURSQUARE_CLIENT_ID,\n    clientSecret: process.env.FOURSQUARE_CLIENT_SECRET,\n    apiVersion: \"YYYYMMDD\"\n  })\n]\n...\n```\n\n----------------------------------------\n\nTITLE: Configuring Battle.net Provider in NextAuth.js\nDESCRIPTION: Example configuration for setting up Battle.net authentication provider in NextAuth.js. Uses environment variables for client ID, secret, and region settings.\nSOURCE: https://github.com/nextauthjs/docs/blob/main/versioned_docs/version-v3/providers/battlenet.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport Providers from `next-auth/providers`\n...\nproviders: [\n  Providers.BattleNet({\n    clientId: process.env.BATTLENET_CLIENT_ID,\n    clientSecret: process.env.BATTLENET_CLIENT_SECRET,\n    region: process.env.BATTLENET_REGION\n  })\n]\n...\n```\n\n----------------------------------------\n\nTITLE: FaunaDB Schema Definition\nDESCRIPTION: Database schema setup for FaunaDB including collections and indexes required for NextAuth functionality.\nSOURCE: https://github.com/nextauthjs/docs/blob/main/versioned_docs/version-v3/adapters/fauna.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nCreateCollection({ name: \"accounts\" })\nCreateCollection({ name: \"sessions\" })\nCreateCollection({ name: \"users\" })\nCreateCollection({ name: \"verification_requests\" })\nCreateIndex({\n  name: \"account_by_provider_account_id\",\n  source: Collection(\"accounts\"),\n  unique: true,\n  terms: [\n    { field: [\"data\", \"providerId\"] },\n    { field: [\"data\", \"providerAccountId\"] },\n  ],\n})\nCreateIndex({\n  name: \"session_by_token\",\n  source: Collection(\"sessions\"),\n  unique: true,\n  terms: [{ field: [\"data\", \"sessionToken\"] }],\n})\nCreateIndex({\n  name: \"user_by_email\",\n  source: Collection(\"users\"),\n  unique: true,\n  terms: [{ field: [\"data\", \"email\"] }],\n})\nCreateIndex({\n  name: \"verification_request_by_token\",\n  source: Collection(\"verification_requests\"),\n  unique: true,\n  terms: [{ field: [\"data\", \"token\"] }, { field: [\"data\", \"identifier\"] }],\n})\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Sign-in Page to NextAuth.js Configuration\nDESCRIPTION: This snippet demonstrates how to specify a custom sign-in page in the NextAuth.js configuration using the pages option.\nSOURCE: https://github.com/nextauthjs/docs/blob/main/docs/providers/workos.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n...\n  pages: {\n    signIn: \"/auth/signin\",\n  }\n```\n\n----------------------------------------\n\nTITLE: Configuring LinkedIn Provider in NextAuth.js\nDESCRIPTION: Example code showing how to initialize and configure the LinkedIn authentication provider in NextAuth.js. Requires LinkedIn client ID and secret from the LinkedIn Developers portal.\nSOURCE: https://github.com/nextauthjs/docs/blob/main/docs/providers/linkedin.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport LinkedInProvider from \"next-auth/providers/linkedin\";\n...\nproviders: [\n  LinkedInProvider({\n    clientId: process.env.LINKEDIN_CLIENT_ID,\n    clientSecret: process.env.LINKEDIN_CLIENT_SECRET\n  })\n]\n...\n```\n\n----------------------------------------\n\nTITLE: Configuring VK Provider in NextAuth.js\nDESCRIPTION: This snippet demonstrates how to set up the VK Provider in NextAuth.js using environment variables for client ID and secret. It's a basic configuration that uses default options.\nSOURCE: https://github.com/nextauthjs/docs/blob/main/docs/providers/vk.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport VkProvider from \"next-auth/providers/vk\";\n...\nproviders: [\n  VkProvider({\n    clientId: process.env.VK_CLIENT_ID,\n    clientSecret: process.env.VK_CLIENT_SECRET\n  })\n]\n...\n```\n\n----------------------------------------\n\nTITLE: Configuring Box Provider in NextAuth.js\nDESCRIPTION: This code snippet demonstrates how to set up the Box authentication provider in NextAuth.js. It imports the BoxProvider and configures it with client ID and client secret environment variables.\nSOURCE: https://github.com/nextauthjs/docs/blob/main/docs/providers/box.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport BoxProvider from \"next-auth/providers/box\";\n...\nproviders: [\n  BoxProvider({\n    clientId: process.env.BOX_CLIENT_ID,\n    clientSecret: process.env.BOX_CLIENT_SECRET\n  })\n]\n...\n```\n\n----------------------------------------\n\nTITLE: Customizing Base Key Prefix for Multiple Apps\nDESCRIPTION: This code snippet demonstrates how to customize the base key prefix when using the Upstash Redis Adapter with multiple apps sharing a single Redis instance.\nSOURCE: https://github.com/nextauthjs/docs/blob/main/docs/adapters/upstash-redis.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nexport default NextAuth({\n  ...\n  adapter: UpstashRedisAdapter(redis, {baseKeyPrefix: \"app2:\"})\n  ...\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring GitLab Provider in NextAuth.js\nDESCRIPTION: Example of how to configure the GitLab authentication provider in NextAuth.js using environment variables for client credentials. Requires GitLab client ID and secret from the GitLab application settings.\nSOURCE: https://github.com/nextauthjs/docs/blob/main/docs/providers/gitlab.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport GitlabProvider from \"next-auth/providers/gitlab\";\n...\nproviders: [\n  GitlabProvider({\n    clientId: process.env.GITLAB_CLIENT_ID,\n    clientSecret: process.env.GITLAB_CLIENT_SECRET\n  })\n]\n...\n```\n\n----------------------------------------\n\nTITLE: Configuring Atlassian Provider in NextAuth.js\nDESCRIPTION: Example configuration for setting up Atlassian OAuth provider in NextAuth.js. Demonstrates how to specify client credentials and OAuth scopes for Jira access.\nSOURCE: https://github.com/nextauthjs/docs/blob/main/versioned_docs/version-v3/providers/atlassian.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport Providers from `next-auth/providers`\n...\nproviders: [\n  Providers.Atlassian({\n    clientId: process.env.ATLASSIAN_CLIENT_ID,\n    clientSecret: process.env.ATLASSIAN_CLIENT_SECRET,\n    scope: 'write:jira-work read:jira-work read:jira-user offline_access read:me'\n  })\n]\n...\n```\n\n----------------------------------------\n\nTITLE: Creating Index for Verification Requests Table in Postgres SQL\nDESCRIPTION: This SQL snippet creates a unique index on the 'token' column of the 'verification_requests' table. This index helps in maintaining uniqueness of tokens used for verification processes.\nSOURCE: https://github.com/nextauthjs/docs/blob/main/versioned_docs/version-v3/adapters/typeorm/postgres.md#2025-04-21_snippet_7\n\nLANGUAGE: sql\nCODE:\n```\nCREATE UNIQUE INDEX token\n  ON verification_requests(token);\n```\n\n----------------------------------------\n\nTITLE: Schema Migration Diff\nDESCRIPTION: Detailed diff showing changes between original and new Prisma adapter schema, including field and model modifications\nSOURCE: https://github.com/nextauthjs/docs/blob/main/versioned_docs/version-v3/adapters/prisma.md#2025-04-21_snippet_4\n\nLANGUAGE: diff\nCODE:\n```\n model Account {\n-  id                 Int       @default(autoincrement()) @id\n+  id                 String    @id @default(cuid())\n-  compoundId         String    @unique @map(name: \"compound_id\")\n-  userId             Int       @map(name: \"user_id\")\n+  userId             String\n+  user               User      @relation(fields: [userId], references: [id])\n-  providerType       String    @map(name: \"provider_type\")\n+  providerType       String\n-  providerId         String    @map(name: \"provider_id\")\n+  providerId         String\n-  providerAccountId  String    @map(name: \"provider_account_id\")\n+  providerAccountId  String\n-  refreshToken       String?   @map(name: \"refresh_token\")\n+  refreshToken       String?\n-  accessToken        String?   @map(name: \"access_token\")\n+  accessToken        String?\n-  accessTokenExpires DateTime? @map(name: \"access_token_expires\")\n+  accessTokenExpires DateTime?\n-  createdAt          DateTime  @default(now()) @map(name: \"created_at\")\n+  createdAt          DateTime  @default(now())\n-  updatedAt          DateTime  @default(now()) @map(name: \"updated_at\")\n+  updatedAt          DateTime  @updatedAt\n\n-  @@index([providerAccountId], name: \"providerAccountId\")\n-  @@index([providerId], name: \"providerId\")\n-  @@index([userId], name: \"userId\")\n-  @@map(name: \"accounts\")\n+  @@unique([providerId, providerAccountId])\n }\n```\n\n----------------------------------------\n\nTITLE: Configuring Twitter Provider in NextAuth.js\nDESCRIPTION: This code snippet demonstrates how to configure the Twitter provider within the providers array in your NextAuth.js configuration. It requires setting the `clientId` and `clientSecret` from your Twitter developer account, which are typically stored as environment variables.\nSOURCE: https://github.com/nextauthjs/docs/blob/main/versioned_docs/version-v3/providers/twitter.md#2025-04-21_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nimport Providers from `next-auth/providers`\n...\nproviders: [\n  Providers.Twitter({\n    clientId: process.env.TWITTER_CLIENT_ID,\n    clientSecret: process.env.TWITTER_CLIENT_SECRET\n  })\n]\n...\n```\n\n----------------------------------------\n\nTITLE: Configuring EVE Online Provider in NextAuth.js\nDESCRIPTION: This snippet demonstrates how to set up the EVE Online authentication provider in NextAuth.js. It shows the basic configuration using environment variables for the client ID and secret.\nSOURCE: https://github.com/nextauthjs/docs/blob/main/docs/providers/eveonline.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport EVEOnlineProvider from \"next-auth/providers/eveonline\";\n...\nproviders: [\n  EVEOnlineProvider({\n    clientId: process.env.EVE_CLIENT_ID,\n    clientSecret: process.env.EVE_CLIENT_SECRET\n  })\n]\n...\n```\n\n----------------------------------------\n\nTITLE: Configuring Medium Provider in NextAuth.js (JavaScript)\nDESCRIPTION: This code snippet demonstrates how to configure the Medium Provider in NextAuth.js. It imports the MediumProvider and sets it up with client ID and secret from environment variables.\nSOURCE: https://github.com/nextauthjs/docs/blob/main/docs/providers/medium.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport MediumProvider from \"next-auth/providers/medium\";\n...\nproviders: [\n  MediumProvider({\n    clientId: process.env.MEDIUM_CLIENT_ID,\n    clientSecret: process.env.MEDIUM_CLIENT_SECRET\n  })\n}\n...\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Entities in NextAuth.js\nDESCRIPTION: Configuration to use custom entity models with the TypeORM adapter\nSOURCE: https://github.com/nextauthjs/docs/blob/main/docs/adapters/typeorm.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport NextAuth from \"next-auth\"\nimport { TypeORMLegacyAdapter } from \"@next-auth/typeorm-legacy-adapter\"\nimport * as entities from \"lib/entities\"\n\nexport default NextAuth({\n  adapter: TypeORMLegacyAdapter(\"yourconnectionstring\", { entities }),\n  ...\n})\n```\n\n----------------------------------------\n\nTITLE: Updating JWT Import Pattern\nDESCRIPTION: Changes to the import pattern for JWT functionality, removing default export in favor of named imports.\nSOURCE: https://github.com/nextauthjs/docs/blob/main/docs/getting-started/upgrade-to-v4.md#2025-04-21_snippet_1\n\nLANGUAGE: diff\nCODE:\n```\n- import jwt from \"next-auth/jwt\"\n+ import { getToken } from \"next-auth/jwt\"\n```\n\n----------------------------------------\n\nTITLE: Reddit Provider Basic Configuration in NextAuth.js\nDESCRIPTION: This code snippet demonstrates the basic configuration of the Reddit provider in NextAuth.js. It imports the Providers object and configures the Reddit provider with client ID and secret from environment variables. Note that Reddit requires authorization every time.\nSOURCE: https://github.com/nextauthjs/docs/blob/main/versioned_docs/version-v3/providers/reddit.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport Providers from `next-auth/providers`\n...\nproviders: [\n  Providers.Reddit({\n    clientId: process.env.REDDIT_CLIENT_ID,\n    clientSecret: process.env.REDDIT_CLIENT_SECRET\n  })\n]\n...\n```\n\n----------------------------------------\n\nTITLE: Configuring Patreon Provider in NextAuth.js\nDESCRIPTION: This code snippet demonstrates how to configure the Patreon Provider in NextAuth.js. It shows the basic setup using environment variables for the client ID and client secret.\nSOURCE: https://github.com/nextauthjs/docs/blob/main/docs/providers/patreon.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport PatreonProvider from \"next-auth/providers/patreon\";\n...\nproviders: [\n    PatreonProvider({\n      clientId: process.env.PATREON_ID,\n      clientSecret: process.env.PATREON_SECRET,\n    }))\n]\n...\n```\n\n----------------------------------------\n\nTITLE: Updating SignIn Callback Return Values in NextAuth.js\nDESCRIPTION: This snippet addresses the deprecation of returning a rejected promise or throwing a URL in the `signIn` callback in NextAuth.js. It provides guidelines on how to modify the callback to return the URL directly, which is the recommended approach going forward.\nSOURCE: https://github.com/nextauthjs/docs/blob/main/versioned_docs/version-v3/warnings.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n\"// Old usage (deprecated)\\nreturn Promise.reject(\\\"/some/url\\\")\\n\\n// or\\n\\nthrow \\\\\"/some/url\\\\\"\\n\\n// New recommended usage\\nreturn \\\\\"/some/url\\\\\"\\n\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Zoho Provider in NextAuth.js\nDESCRIPTION: Example code showing how to set up and configure the Zoho authentication provider in NextAuth.js. The configuration requires environment variables for client ID and secret obtained from the Zoho API Console.\nSOURCE: https://github.com/nextauthjs/docs/blob/main/docs/providers/zoho.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport ZohoProvider from \"next-auth/providers/zoho\";\n...\nproviders: [\n  ZohoProvider({\n    clientId: process.env.ZOHO_CLIENT_ID,\n    clientSecret: process.env.ZOHO_CLIENT_SECRET\n  })\n]\n...\n```\n\n----------------------------------------\n\nTITLE: Updating React Client Import\nDESCRIPTION: Changes to the client-side import source from next-auth/client to next-auth/react.\nSOURCE: https://github.com/nextauthjs/docs/blob/main/docs/getting-started/upgrade-to-v4.md#2025-04-21_snippet_2\n\nLANGUAGE: diff\nCODE:\n```\n- import { useSession } from \"next-auth/client\"\n+ import { useSession } from \"next-auth/react\"\n```\n\n----------------------------------------\n\nTITLE: Configuring OneLogin Provider in NextAuth.js\nDESCRIPTION: Example code showing how to configure the OneLogin authentication provider in NextAuth.js. Requires setting up environment variables for client ID, client secret, and issuer URL from OneLogin.\nSOURCE: https://github.com/nextauthjs/docs/blob/main/docs/providers/onelogin.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport OneLoginProvider from \"next-auth/providers/onelogin\";\n...\nproviders: [\n  OneLoginProvider({\n    clientId: process.env.ONELOGIN_CLIENT_ID,\n    clientSecret: process.env.ONELOGIN_CLIENT_SECRET,\n    issuer: process.env.ONELOGIN_ISSUER\n  })\n]\n...\n```\n\n----------------------------------------\n\nTITLE: Configuring TypeORM Naming Conventions\nDESCRIPTION: Implementation of custom naming strategy for consistent database field naming\nSOURCE: https://github.com/nextauthjs/docs/blob/main/docs/adapters/typeorm.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport NextAuth from \"next-auth\"\nimport { TypeORMLegacyAdapter } from \"@next-auth/typeorm-legacy-adapter\"\nimport { SnakeNamingStrategy } from 'typeorm-naming-strategies'\nimport { ConnectionOptions } from \"typeorm\"\n\nconst connection: ConnectionOptions = {\n    type: \"mysql\",\n    host: \"localhost\",\n    port: 3306,\n    username: \"test\",\n    password: \"test\",\n    database: \"test\",\n    namingStrategy: new SnakeNamingStrategy()\n}\n\nexport default NextAuth({\n  adapter: TypeORMLegacyAdapter(connection),\n  ...\n})\n```\n\n----------------------------------------\n\nTITLE: Creating HTTPS Server for Local NextAuth.js Development\nDESCRIPTION: This Node.js script creates an HTTPS server for local development of a NextAuth.js application, necessary for testing Apple Sign-In.\nSOURCE: https://github.com/nextauthjs/docs/blob/main/docs/providers/apple.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst { createServer } = require(\"https\")\nconst { parse } = require(\"url\")\nconst next = require(\"next\")\nconst fs = require(\"fs\")\n\nconst dev = process.env.NODE_ENV !== \"production\"\nconst app = next({ dev })\nconst handle = app.getRequestHandler()\n\nconst httpsOptions = {\n  key: fs.readFileSync(\"./certificates/localhost.key\"),\n  cert: fs.readFileSync(\"./certificates/localhost.crt\"),\n}\n\napp.prepare().then(() => {\n  createServer(httpsOptions, (req, res) => {\n    const parsedUrl = parse(req.url, true)\n    handle(req, res, parsedUrl)\n  }).listen(3000, (err) => {\n    if (err) throw err\n    console.log(\"> Ready on https://localhost:3000\")\n  })\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Naver Provider in NextAuth.js\nDESCRIPTION: This code snippet demonstrates how to configure the Naver provider within the NextAuth.js providers array. It requires the `next-auth/providers` import and utilizes environment variables for the `clientId` and `clientSecret`. Ensure that the NAVER_CLIENT_ID and NAVER_CLIENT_SECRET environment variables are properly set in your environment.\nSOURCE: https://github.com/nextauthjs/docs/blob/main/versioned_docs/version-v3/providers/naver.md#2025-04-21_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nimport Providers from `next-auth/providers`\n...\nproviders: [\n  Providers.Naver({\n    clientId: process.env.NAVER_CLIENT_ID,\n    clientSecret: process.env.NAVER_CLIENT_SECRET\n  })\n]\n...\n```\n\n----------------------------------------\n\nTITLE: Describing NextAuth.js LinkAccount Event Data in Markdown\nDESCRIPTION: This snippet outlines the data structure for the linkAccount event in NextAuth.js, which is triggered when an account from a provider is linked to a user in the database.\nSOURCE: https://github.com/nextauthjs/docs/blob/main/docs/configuration/events.md#2025-04-21_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n- `user`: The user object from your adapter.\n- `providerAccount`: The object returned from the provider.\n```\n\n----------------------------------------\n\nTITLE: Deprecation Warning for State Options in NextAuth.js\nDESCRIPTION: This snippet explains the deprecation of state options in provider configurations of NextAuth.js. It directs users on how to transition from using `state: true/false` to the new `protection` options, along with the necessary adjustments to their code.\nSOURCE: https://github.com/nextauthjs/docs/blob/main/versioned_docs/version-v3/warnings.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n\"// If you use `state: true`, just simply remove it. The default is `protection: \\\\\\\"state\\\\\\\"` already..\\n// If you use `state: false`, set `protection: \\\\\\\"none\\\\\\\"`.\\n\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Yandex Provider in NextAuth.js\nDESCRIPTION: This code snippet demonstrates how to set up the Yandex Provider in NextAuth.js. It imports the YandexProvider and configures it with client ID and secret from environment variables.\nSOURCE: https://github.com/nextauthjs/docs/blob/main/docs/providers/yandex.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport YandexProvider from \"next-auth/providers/yandex\";\n...\nproviders: [\n  YandexProvider({\n    clientId: process.env.YANDEX_CLIENT_ID,\n    clientSecret: process.env.YANDEX_CLIENT_SECRET\n  })\n]\n...\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Basecamp Authentication in NextAuth.js\nDESCRIPTION: Basic configuration for Basecamp authentication provider that retrieves standard profile information like account ID, email, and name. Requires Basecamp client ID and secret from environment variables.\nSOURCE: https://github.com/nextauthjs/docs/blob/main/versioned_docs/version-v3/providers/basecamp.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport Providers from `next-auth/providers`\n...\nproviders: [\n  Providers.Basecamp({\n    clientId: process.env.BASECAMP_CLIENT_ID,\n    clientSecret: process.env.BASECAMP_CLIENT_SECRET\n  })\n]\n...\n```\n\n----------------------------------------\n\nTITLE: Configuring Pipedrive Provider in NextAuth.js\nDESCRIPTION: This code snippet demonstrates how to set up the Pipedrive provider in NextAuth.js. It imports the PipedriveProvider and configures it with client ID and secret from environment variables.\nSOURCE: https://github.com/nextauthjs/docs/blob/main/docs/providers/pipedrive.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport PipedriveProvider from \"next-auth/providers/pipedrive\";\n...\nproviders: [\n  PipedriveProvider({\n    clientId: process.env.PIPEDRIVE_CLIENT_ID,\n    clientSecret: process.env.PIPEDRIVE_CLIENT_SECRET,\n  })\n]\n...\n```\n\n----------------------------------------\n\nTITLE: Default Key Prefix Options for Upstash Redis Adapter\nDESCRIPTION: This code snippet shows the default values for key prefixes used by the Upstash Redis Adapter. These can be customized when using multiple apps with a single Redis instance.\nSOURCE: https://github.com/nextauthjs/docs/blob/main/docs/adapters/upstash-redis.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst defaultOptions = {\n  baseKeyPrefix: \"\",\n  accountKeyPrefix: \"user:account:\",\n  accountByUserIdPrefix: \"user:account:by-user-id:\",\n  emailKeyPrefix: \"user:email:\",\n  sessionKeyPrefix: \"user:session:\",\n  sessionByUserIdKeyPrefix: \"user:session:by-user-id:\",\n  userKeyPrefix: \"user:\",\n  verificationTokenKeyPrefix: \"user:token:\",\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Session Object Structure in TypeScript\nDESCRIPTION: This snippet shows the structure of a typical session object returned by NextAuth.js, including user information and session expiry.\nSOURCE: https://github.com/nextauthjs/docs/blob/main/docs/getting-started/client.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  user: {\n    name: string\n    email: string\n    image: string\n  },\n  expires: Date // This is the expiry of the session, not any of the tokens within the session\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Medium Provider in NextAuth.js\nDESCRIPTION: This snippet demonstrates how to set up the Medium provider within NextAuth.js. It imports the provider and specifies necessary credentials such as client ID and client secret obtained from the Medium application configuration. Note that the email address is not included in the data returned by the Medium API.\nSOURCE: https://github.com/nextauthjs/docs/blob/main/versioned_docs/version-v3/providers/medium.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport Providers from `next-auth/providers`\n...\nproviders: [\n  Providers.Medium({\n    clientId: process.env.MEDIUM_CLIENT_ID,\n    clientSecret: process.env.MEDIUM_CLIENT_SECRET\n  })\n}\n...\n\n```\n\n----------------------------------------\n\nTITLE: signIn() Email Sign-in Example\nDESCRIPTION: This example shows how to use the `signIn()` method to start the email sign-in flow. It requires passing the target email as an option.\nSOURCE: https://github.com/nextauthjs/docs/blob/main/versioned_docs/version-v3/getting-started/client.md#2025-04-21_snippet_9\n\nLANGUAGE: js\nCODE:\n```\nimport { signIn } from \"next-auth/client\"\n\nexport default ({ email }) => (\n  <button onClick={() => signIn(\"email\", { email })}>Sign in with Email</button>\n)\n```\n\n----------------------------------------\n\nTITLE: Authentication Tutorial Categories\nDESCRIPTION: Collection of tutorials covering different authentication scenarios including social login, custom pages, token rotation, and securing routes\nSOURCE: https://github.com/nextauthjs/docs/blob/main/versioned_docs/version-v3/tutorials.md#2025-04-21_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n## Authentication Tutorial Categories\n- Social Authentication\n- Custom Login Pages\n- Refresh Token Rotation\n- Page and API Route Security\n- Database Adapters\n- LDAP Authentication\n- Testing\n- Class Component Integration\n```\n\n----------------------------------------\n\nTITLE: Example Firebase Configuration Object\nDESCRIPTION: Sample Firebase configuration object containing necessary details for project initialization. This includes API keys, project IDs, and other Firebase-specific identifiers.\nSOURCE: https://github.com/nextauthjs/docs/blob/main/versioned_docs/version-v3/adapters/firebase.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst firebaseConfig = {\n  apiKey: \"AIzaSyDOCAbC123dEf456GhI789jKl01-MnO\",\n  authDomain: \"myapp-project-123.firebaseapp.com\",\n  databaseURL: \"https://myapp-project-123.firebaseio.com\",\n  projectId: \"myapp-project-123\",\n  storageBucket: \"myapp-project-123.appspot.com\",\n  messagingSenderId: \"65211879809\",\n  appId: \"1:65211879909:web:3ae38ef1cdcb2e01fe5f0c\",\n  measurementId: \"G-8GSGZQ44ST\",\n}\n```\n\n----------------------------------------\n\nTITLE: Google Sign-in Callback with Email Domain Verification\nDESCRIPTION: Implementation of a sign-in callback that restricts access to users with verified email addresses from a specific domain.\nSOURCE: https://github.com/nextauthjs/docs/blob/main/versioned_docs/version-v3/providers/google.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst options = {\n  ...\n  callbacks: {\n    async signIn(user, account, profile) {\n      if (account.provider === 'google' &&\n          profile.verified_email === true &&\n          profile.email.endsWith('@example.com')) {\n        return true\n      } else {\n        return false\n      }\n    },\n  }\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring DynamoDB Adapter with Custom Schema\nDESCRIPTION: JavaScript code snippet showing how to customize the DynamoDB adapter with custom table names, partition keys, and index configurations.\nSOURCE: https://github.com/nextauthjs/docs/blob/main/docs/adapters/dynamodb.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst adapter = DynamoDBAdapter(client, {\n  tableName: \"custom-table-name\",\n  partitionKey: \"custom-pk\",\n  sortKey: \"custom-sk\",\n  indexName: \"custom-index-name\",\n  indexPartitionKey: \"custom-index-pk\",\n  indexSortKey: \"custom-index-sk\",\n})\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables for OAuth Provider in NextAuth.js\nDESCRIPTION: Shows how to set up environment variables for OAuth provider credentials using the example of Twitter. These variables are typically stored in a .env file.\nSOURCE: https://github.com/nextauthjs/docs/blob/main/docs/configuration/providers/oauth.md#2025-04-21_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nTWITTER_ID=YOUR_TWITTER_CLIENT_ID\nTWITTER_SECRET=YOUR_TWITTER_CLIENT_SECRET\n```\n\n----------------------------------------\n\nTITLE: Configuring Osso Provider in NextAuth.js\nDESCRIPTION: Implementation example showing how to configure the Osso Provider in NextAuth.js. Requires setting up clientId, clientSecret, and issuer environment variables. The issuer should be specified as a fully qualified domain.\nSOURCE: https://github.com/nextauthjs/docs/blob/main/docs/providers/osso.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport OssoProvider from \"next-auth/providers/osso\";\n...\nproviders: [\n  OssoProvider({\n    clientId: process.env.OSSO_CLIENT_ID,\n    clientSecret: process.env.OSSO_CLIENT_SECRET,\n    issuer: process.env.OSSO_ISSUER\n  })\n}\n...\n```\n\n----------------------------------------\n\nTITLE: Configuring Mail.ru Provider in NextAuth.js\nDESCRIPTION: This code snippet demonstrates how to configure the Mail.ru provider within your NextAuth.js setup. It requires setting the `clientId` and `clientSecret` using environment variables. This configuration enables users to authenticate using their Mail.ru accounts.\nSOURCE: https://github.com/nextauthjs/docs/blob/main/versioned_docs/version-v3/providers/mailru.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport Providers from `next-auth/providers`\n...\nproviders: [\n  Providers.MailRu({\n    clientId: process.env.MAILRU_CLIENT_ID,\n    clientSecret: process.env.MAILRU_CLIENT_SECRET\n  })\n]\n...\n```\n\n----------------------------------------\n\nTITLE: Configuring Salesforce Provider Options in NextAuth.js\nDESCRIPTION: This snippet demonstrates how to import the Salesforce provider from the NextAuth.js library and configure it with client ID and secret from environment variables. It allows for authentication with Salesforce as part of NextAuth's authentication strategy.\nSOURCE: https://github.com/nextauthjs/docs/blob/main/versioned_docs/version-v3/providers/salesforce.md#2025-04-21_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport Providers from `next-auth/providers`\n...\nproviders: [\n  Providers.Salesforce({\n    clientId: process.env.SALESFORCE_CLIENT_ID,\n    clientSecret: process.env.SALESFORCE_CLIENT_SECRET,\n  })\n]\n...\n```\n\n----------------------------------------\n\nTITLE: Generating HS512 Key for JWT Sessions\nDESCRIPTION: Command to generate a new HS512 key for JWT token signing using the jose library.\nSOURCE: https://github.com/nextauthjs/docs/blob/main/versioned_docs/version-v3/errors.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n  jose newkey -s 512 -t oct -a HS512\n```\n\n----------------------------------------\n\nTITLE: Optimized Prisma Client Initialization\nDESCRIPTION: Pattern for optimizing Prisma client connections in development environment to prevent connection overload.\nSOURCE: https://github.com/nextauthjs/docs/blob/main/versioned_docs/version-v3/adapters/prisma-legacy.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nlet prisma\n\nif (process.env.NODE_ENV === \"production\") {\n  prisma = new PrismaClient()\n} else {\n  if (!global.prisma) {\n    global.prisma = new PrismaClient()\n  }\n  prisma = global.prisma\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring IdentityServer4 Provider in NextAuth.js - JavaScript\nDESCRIPTION: This snippet demonstrates how to configure the IdentityServer4 provider using NextAuth.js. It includes settings for authentication scopes and credentials. Required environment variables include 'IdentityServer4_Domain', 'IdentityServer4_CLIENT_ID', and 'IdentityServer4_CLIENT_SECRET'. The provider is used to handle authentication via IdentityServer4, allowing for secure access with scopes like 'openid' and 'offline_access'.\nSOURCE: https://github.com/nextauthjs/docs/blob/main/versioned_docs/version-v3/providers/identity-server4.md#2025-04-21_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport Providers from `next-auth/providers`\n...\nproviders: [\n  Providers.IdentityServer4({\n    id: \"identity-server4\",\n    name: \"IdentityServer4\",\n    scope: \"openid profile email api offline_access\", // Allowed Scopes\n    domain:  process.env.IdentityServer4_Domain,\n    clientId: process.env.IdentityServer4_CLIENT_ID,\n    clientSecret: process.env.IdentityServer4_CLIENT_SECRET\n  })\n]\n...\n```\n\n----------------------------------------\n\nTITLE: Defining Secure Dgraph Schema for Next-Auth\nDESCRIPTION: Production-ready GraphQL schema with @auth directives to secure the Next-Auth types in Dgraph. Implements access control rules for each type and includes the Dgraph.Authorization configuration.\nSOURCE: https://github.com/nextauthjs/docs/blob/main/docs/adapters/dgraph.md#2025-04-21_snippet_3\n\nLANGUAGE: graphql\nCODE:\n```\ntype Account\n  @auth(\n    delete: { rule: \"{$nextAuth { eq: true } }\" }\n    add: { rule: \"{$nextAuth { eq: true } }\" }\n    query: { rule: \"{$nextAuth { eq: true } }\" }\n    update: { rule: \"{$nextAuth { eq: true } }\" }\n  ) {\n  id: ID\n  type: String\n  provider: String @search(by: [hash])\n  providerAccountId: String @search(by: [hash])\n  refreshToken: String\n  expires_at: Int64\n  accessToken: String\n  token_type: String\n  refresh_token: String\n  access_token: String\n  scope: String\n  id_token: String\n  session_state: String\n  user: User @hasInverse(field: \"accounts\")\n}\ntype Session\n  @auth(\n    delete: { rule: \"{$nextAuth { eq: true } }\" }\n    add: { rule: \"{$nextAuth { eq: true } }\" }\n    query: { rule: \"{$nextAuth { eq: true } }\" }\n    update: { rule: \"{$nextAuth { eq: true } }\" }\n  ) {\n  id: ID\n  expires: DateTime\n  sessionToken: String @search(by: [hash])\n  user: User @hasInverse(field: \"sessions\")\n}\ntype User\n  @auth(\n    query: {\n      or: [\n        {\n          rule: \"\"\"\n          query ($userId: String!) {queryUser(filter: { id: { eq: $userId } } ) {id}}\n          \"\"\"\n        }\n        { rule: \"{$nextAuth { eq: true } }\" }\n      ]\n    }\n    delete: { rule: \"{$nextAuth { eq: true } }\" }\n    add: { rule: \"{$nextAuth { eq: true } }\" }\n    update: {\n      or: [\n        {\n          rule: \"\"\"\n          query ($userId: String!) {queryUser(filter: { id: { eq: $userId } } ) {id}}\n          \"\"\"\n        }\n        { rule: \"{$nextAuth { eq: true } }\" }\n      ]\n    }\n  ) {\n  id: ID\n  name: String\n  email: String @search(by: [hash])\n  emailVerified: DateTime\n  image: String\n  accounts: [Account] @hasInverse(field: \"user\")\n  sessions: [Session] @hasInverse(field: \"user\")\n}\n\ntype VerificationToken\n  @auth(\n    delete: { rule: \"{$nextAuth { eq: true } }\" }\n    add: { rule: \"{$nextAuth { eq: true } }\" }\n    query: { rule: \"{$nextAuth { eq: true } }\" }\n    update: { rule: \"{$nextAuth { eq: true } }\" }\n  ) {\n  id: ID\n  identifier: String @search(by: [hash])\n  token: String @search(by: [hash])\n  expires: DateTime\n}\n\n# Dgraph.Authorization {\"VerificationKey\":\"<YOUR JWT SECRET HERE>\",\"Header\":\"<YOUR AUTH HEADER HERE>\",\"Namespace\":\"<YOUR CUSTOM NAMESPACE HERE>\",\"Algo\":\"HS256\"}\n```\n\n----------------------------------------\n\nTITLE: Using getSession in Server-Side API Route\nDESCRIPTION: This example shows how to use the getSession function in a server-side API route to retrieve the current session.\nSOURCE: https://github.com/nextauthjs/docs/blob/main/docs/getting-started/client.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { getSession } from \"next-auth/react\"\n\nexport default async (req, res) => {\n  const session = await getSession({ req })\n  /* ... */\n  res.end()\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Email Provider with Configuration Object\nDESCRIPTION: Code snippet demonstrating Email Provider initialization using detailed SMTP configuration object\nSOURCE: https://github.com/nextauthjs/docs/blob/main/docs/providers/email.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport EmailProvider from \"next-auth/providers/email\";\n...\nproviders: [\n  EmailProvider({\n    server: {\n      host: process.env.EMAIL_SERVER_HOST,\n      port: process.env.EMAIL_SERVER_PORT,\n      auth: {\n        user: process.env.EMAIL_SERVER_USER,\n        pass: process.env.EMAIL_SERVER_PASSWORD\n      }\n    },\n    from: process.env.EMAIL_FROM\n  }),\n],\n```\n\n----------------------------------------\n\nTITLE: Configuring Osso Provider in NextAuth.js\nDESCRIPTION: This code snippet demonstrates how to configure the Osso provider within the `providers` array of your NextAuth.js configuration.  It requires setting environment variables for the client ID, client secret, and Osso domain.  The `domain` parameter should be the fully qualified domain of your Osso instance.\nSOURCE: https://github.com/nextauthjs/docs/blob/main/versioned_docs/version-v3/providers/osso.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport Providers from `next-auth/providers`\n...\nproviders: [\n  Providers.Osso({\n    clientId: process.env.OSSO_CLIENT_ID,\n    clientSecret: process.env.OSSO_CLIENT_SECRET,\n    domain: process.env.OSSO_DOMAIN\n  })\n}\n...\n```\n\n----------------------------------------\n\nTITLE: Configuring VK Provider with NextAuth.js using JavaScript\nDESCRIPTION: This snippet demonstrates how to set up the VK authentication provider with NextAuth.js by specifying the client ID and secret. It highlights the default use of API version 5.126 by the provider. Dependencies include the NextAuth.js library and access to environment variables for configuration.\nSOURCE: https://github.com/nextauthjs/docs/blob/main/versioned_docs/version-v3/providers/vk.md#2025-04-21_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport Providers from `next-auth/providers`\n...\nproviders: [\n  Providers.VK({\n    clientId: process.env.VK_CLIENT_ID,\n    clientSecret: process.env.VK_CLIENT_SECRET\n  })\n]\n...\n```\n\n----------------------------------------\n\nTITLE: CockroachDB SSL Configuration\nDESCRIPTION: Example of configuring CockroachDB with SSL certificates for secure connections.\nSOURCE: https://github.com/nextauthjs/docs/blob/main/versioned_docs/version-v3/configuration/databases.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\ndatabase: {\n    type: \"cockroachdb\",\n    host: process.env.DATABASE_HOST,\n    port: 26257,\n    username: process.env.DATABASE_USER,\n    password: process.env.DATABASE_PASSWORD,\n    database: process.env.DATABASE_NAME,\n    ssl: {\n      rejectUnauthorized: false,\n      ca: fs.readFileSync('/path/to/server-certificates/root.crt').toString()\n    },\n  }\n```\n\n----------------------------------------\n\nTITLE: Creating Sessions Table in Postgres SQL\nDESCRIPTION: This SQL snippet creates the 'sessions' table that manages user session information including session tokens and their expiration times. It establishes a primary key and ensures that session details are maintained efficiently.\nSOURCE: https://github.com/nextauthjs/docs/blob/main/versioned_docs/version-v3/adapters/typeorm/postgres.md#2025-04-21_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE sessions\n  (\n    id            SERIAL,\n    user_id       INTEGER NOT NULL,\n    expires       TIMESTAMPTZ NOT NULL,\n    session_token VARCHAR(255) NOT NULL,\n    access_token  VARCHAR(255) NOT NULL,\n    created_at    TIMESTAMPTZ NOT NULL DEFAULT CURRENT_TIMESTAMP,\n    updated_at    TIMESTAMPTZ NOT NULL DEFAULT CURRENT_TIMESTAMP,\n    PRIMARY KEY (id)\n  );\n```\n\n----------------------------------------\n\nTITLE: Configuring Apple Provider with Pre-generated Secret in NextAuth.js\nDESCRIPTION: Implementation of Apple OAuth provider using pre-generated secret with environment variables for client ID and key secret.\nSOURCE: https://github.com/nextauthjs/docs/blob/main/versioned_docs/version-v3/providers/apple.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport Providers from `next-auth/providers`\n...\nproviders: [\n  Providers.Apple({\n    clientId: process.env.APPLE_ID,\n    clientSecret: process.env.APPLE_KEY_SECRET\n  })\n]\n...\n```\n\n----------------------------------------\n\nTITLE: Defining Unsecured Dgraph Schema for Next-Auth\nDESCRIPTION: GraphQL schema definition for Dgraph that supports Next-Auth functionality without security features. Includes all required types like Account, Session, User, and VerificationToken.\nSOURCE: https://github.com/nextauthjs/docs/blob/main/docs/adapters/dgraph.md#2025-04-21_snippet_2\n\nLANGUAGE: graphql\nCODE:\n```\ntype Account {\n  id: ID\n  type: String\n  provider: String @search(by: [hash])\n  providerAccountId: String @search(by: [hash])\n  refreshToken: String\n  expires_at: Int64\n  accessToken: String\n  token_type: String\n  refresh_token: String\n  access_token: String\n  scope: String\n  id_token: String\n  session_state: String\n  user: User @hasInverse(field: \"accounts\")\n}\ntype Session {\n  id: ID\n  expires: DateTime\n  sessionToken: String @search(by: [hash])\n  user: User @hasInverse(field: \"sessions\")\n}\ntype User {\n  id: ID\n  name: String\n  email: String @search(by: [hash])\n  emailVerified: DateTime\n  image: String\n  accounts: [Account] @hasInverse(field: \"user\")\n  sessions: [Session] @hasInverse(field: \"user\")\n}\n\ntype VerificationToken {\n  id: ID\n  identifier: String @search(by: [hash])\n  token: String @search(by: [hash])\n  expires: DateTime\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Neo4j Constraints and Indexes for Both Editions\nDESCRIPTION: This Cypher query creates constraints and indexes that are applicable for both Community and Enterprise editions of Neo4j. It sets up unique constraints and indexes for User and Session nodes.\nSOURCE: https://github.com/nextauthjs/docs/blob/main/docs/adapters/neo4j.md#2025-04-21_snippet_2\n\nLANGUAGE: cypher\nCODE:\n```\nCREATE CONSTRAINT user_id_constraint IF NOT EXISTS\nON (u:User) ASSERT u.id IS UNIQUE;\n\nCREATE INDEX user_id_index IF NOT EXISTS\nFOR (u:User) ON (u.id);\n\nCREATE INDEX user_email_index IF NOT EXISTS\nFOR (u:User) ON (u.email);\n\nCREATE CONSTRAINT session_session_token_constraint IF NOT EXISTS\nON (s:Session) ASSERT s.sessionToken IS UNIQUE;\n\nCREATE INDEX session_session_token_index IF NOT EXISTS\nFOR (s:Session) ON (s.sessionToken);\n```\n\n----------------------------------------\n\nTITLE: Implementing Secret in NextAuth.js Configuration\nDESCRIPTION: Example of how to implement the generated secret in the NextAuth.js configuration file.\nSOURCE: https://github.com/nextauthjs/docs/blob/main/docs/getting-started/upgrade-to-v4.md#2025-04-21_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\n...\nexport default NextAuth({\n  ...\n  providers: [...],\n  secret: \"LlKq6ZtYbr+hTC073mAmAh9/h2HwMfsFo4hrfCx5mLg=\",\n  ...\n})\n```\n\n----------------------------------------\n\nTITLE: Logging Customization in NextAuth - JavaScript\nDESCRIPTION: This snippet demonstrates how to override the default logger in NextAuth using a third-party logging service. It includes methods for logging errors, warnings, and debug messages. Dependencies include the external logging library, which must be imported. This implementation ensures that logs are appropriately sent to an external service for monitoring.\nSOURCE: https://github.com/nextauthjs/docs/blob/main/versioned_docs/version-v3/configuration/options.md#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nimport log from \"logging-service\";\n\nexport default NextAuth({\n  ...\n  logger: {\n    error(code, ...message) {\n      log.error(code, message);\n    },\n    warn(code, ...message) {\n      log.warn(code, message);\n    },\n    debug(code, ...message) {\n      log.debug(code, message);\n    }\n  }\n  ...\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring NextAuth SessionProvider in _app.js\nDESCRIPTION: Example of setting up the SessionProvider wrapper component in _app.js to provide session data throughout the application without loading states.\nSOURCE: https://github.com/nextauthjs/docs/blob/main/docs/tutorials/securing-pages-and-api-routes.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { SessionProvider } from \"next-auth/react\"\n\nexport default function App({\n  Component,\n  pageProps: { session, ...pageProps },\n}) {\n  return (\n    <SessionProvider session={session}>\n      <Component {...pageProps} />\n    </SessionProvider>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Database Connection with Entity Prefix (String)\nDESCRIPTION: Example showing how to set a prefix for all table names using connection string parameters.\nSOURCE: https://github.com/nextauthjs/docs/blob/main/versioned_docs/version-v3/configuration/databases.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n\"mysql://nextauth:password@127.0.0.1:3306/database_name?entityPrefix=nextauth_\"\n```\n\n----------------------------------------\n\nTITLE: Setting environment variables for Cypress NextAuth.js tests\nDESCRIPTION: This JSON file defines environment variables for Cypress tests, including login credentials and NextAuth.js session cookie name.\nSOURCE: https://github.com/nextauthjs/docs/blob/main/docs/tutorials/testing-with-cypress.md#2025-04-21_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"GOOGLE_USER\": \"username@company.com\",\n  \"GOOGLE_PW\": \"password\",\n  \"COOKIE_NAME\": \"next-auth.session-token\",\n  \"SITE_NAME\": \"http://localhost:3000\"\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing VK API Version with NextAuth.js using JavaScript\nDESCRIPTION: This code snippet illustrates how to customize the VK API version used in the authentication process with NextAuth.js. By setting the 'apiVersion' variable, you can modify the API calls' URLs to use a different version. Key parameters include 'accessTokenUrl', 'requestTokenUrl', 'authorizationUrl', and 'profileUrl', all of which incorporate the API version.\nSOURCE: https://github.com/nextauthjs/docs/blob/main/versioned_docs/version-v3/providers/vk.md#2025-04-21_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n// pages/api/auth/[...nextauth].js\n\nconst apiVersion = \"5.126\"\n...\nproviders: [\n  Providers.VK({\n    accessTokenUrl: `https://oauth.vk.com/access_token?v=${apiVersion}`,\n    requestTokenUrl: `https://oauth.vk.com/access_token?v=${apiVersion}`,\n    authorizationUrl:\n      `https://oauth.vk.com/authorize?response_type=code&v=${apiVersion}`,\n    profileUrl: `https://api.vk.com/method/users.get?fields=photo_100&v=${apiVersion}`,\n  })\n]\n...\n```\n\n----------------------------------------\n\nTITLE: Creating DynamoDB Table with AWS CDK\nDESCRIPTION: JavaScript code using AWS CDK to create the required DynamoDB table structure for Next Auth, including partition keys, sort keys, and a global secondary index.\nSOURCE: https://github.com/nextauthjs/docs/blob/main/docs/adapters/dynamodb.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nnew dynamodb.Table(this, `NextAuthTable`, {\n  tableName: 'next-auth',\n  partitionKey: { name: 'pk', type: dynamodb.AttributeType.STRING },\n  sortKey: { name: 'sk', type: dynamodb.AttributeType.STRING },\n  timeToLiveAttribute: 'expires',\n}).addGlobalSecondaryIndex({\n  indexName: 'GSI1',\n  partitionKey: { name: 'GSI1PK', type: dynamodb.AttributeType.STRING },\n  sortKey: { name: 'GSI1SK', type: dynamodb.AttributeType.STRING },\n})\n```\n\n----------------------------------------\n\nTITLE: Firebase Configuration Object Example\nDESCRIPTION: Example of a Firebase configuration object containing the necessary project details for initializing the Firebase connection. Includes API keys, domains, and project identifiers.\nSOURCE: https://github.com/nextauthjs/docs/blob/main/docs/adapters/firebase.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst firebaseConfig = {\n  apiKey: \"AIzaSyDOCAbC123dEf456GhI789jKl01-MnO\",\n  authDomain: \"myapp-project-123.firebaseapp.com\",\n  databaseURL: \"https://myapp-project-123.firebaseio.com\",\n  projectId: \"myapp-project-123\",\n  storageBucket: \"myapp-project-123.appspot.com\",\n  messagingSenderId: \"65211879809\",\n  appId: \"1:65211879909:web:3ae38ef1cdcb2e01fe5f0c\",\n  measurementId: \"G-8GSGZQ44ST\",\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Email Environment Variables with Object Format\nDESCRIPTION: Environment variable setup using individual SMTP server configuration parameters\nSOURCE: https://github.com/nextauthjs/docs/blob/main/docs/providers/email.md#2025-04-21_snippet_2\n\nLANGUAGE: env\nCODE:\n```\nEMAIL_SERVER_USER=username\nEMAIL_SERVER_PASSWORD=password\nEMAIL_SERVER_HOST=smtp.example.com\nEMAIL_SERVER_PORT=587\nEMAIL_FROM=noreply@example.com\n```\n\n----------------------------------------\n\nTITLE: Installing Cypress and dependencies for NextAuth.js testing\nDESCRIPTION: This command installs Cypress, cypress-social-logins, and @testing-library/cypress as dev dependencies for testing NextAuth.js implementations.\nSOURCE: https://github.com/nextauthjs/docs/blob/main/docs/tutorials/testing-with-cypress.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save-dev cypress cypress-social-logins @testing-library/cypress\n```\n\n----------------------------------------\n\nTITLE: Implementing Email Provider with Connection String\nDESCRIPTION: Code snippet showing how to initialize the Email Provider using connection string configuration\nSOURCE: https://github.com/nextauthjs/docs/blob/main/docs/providers/email.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport EmailProvider from \"next-auth/providers/email\";\n...\nproviders: [\n  EmailProvider({\n    server: process.env.EMAIL_SERVER,\n    from: process.env.EMAIL_FROM\n  }),\n],\n```\n\n----------------------------------------\n\nTITLE: Configuring Cypress for NextAuth.js testing\nDESCRIPTION: This JSON configuration sets the base URL for Cypress tests and disables Chrome web security to allow testing of social logins.\nSOURCE: https://github.com/nextauthjs/docs/blob/main/docs/tutorials/testing-with-cypress.md#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"baseUrl\": \"http://localhost:3000\",\n  \"chromeWebSecurity\": false\n}\n```\n\n----------------------------------------\n\nTITLE: NextAuth Session Configuration\nDESCRIPTION: Default session configuration options including JWT usage, session duration, and update frequency settings.\nSOURCE: https://github.com/nextauthjs/docs/blob/main/versioned_docs/version-v3/configuration/options.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nsession: {\n  // Use JSON Web Tokens for session instead of database sessions.\n  // This option can be used with or without a database for users/accounts.\n  // Note: `jwt` is automatically set to `true` if no database is specified.\n  jwt: false,\n\n  // Seconds - How long until an idle session expires and is no longer valid.\n  maxAge: 30 * 24 * 60 * 60, // 30 days\n\n  // Seconds - Throttle how frequently to write to database to extend a session.\n  // Use it to limit write operations. Set to 0 to always update the database.\n  // Note: This option is ignored if using JSON Web Tokens\n  updateAge: 24 * 60 * 60, // 24 hours\n}\n```\n\n----------------------------------------\n\nTITLE: Creating DynamoDB Table with CloudFormation\nDESCRIPTION: YAML CloudFormation template for creating the required DynamoDB table with the proper schema including primary keys, global secondary indexes, and TTL configuration.\nSOURCE: https://github.com/nextauthjs/docs/blob/main/docs/adapters/dynamodb.md#2025-04-21_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nNextAuthTable:\n  Type: \"AWS::DynamoDB::Table\"\n  Properties:\n    TableName: next-auth\n    AttributeDefinitions:\n      - AttributeName: pk\n        AttributeType: S\n      - AttributeName: sk\n        AttributeType: S\n      - AttributeName: GSI1PK\n        AttributeType: S\n      - AttributeName: GSI1SK\n        AttributeType: S\n    KeySchema:\n      - AttributeName: pk\n        KeyType: HASH\n      - AttributeName: sk\n        KeyType: RANGE\n    GlobalSecondaryIndexes:\n      - IndexName: GSI1\n        KeySchema:\n          - AttributeName: GSI1PK\n            KeyType: HASH\n          - AttributeName: GSI1SK\n            KeyType: RANGE\n    TimeToLiveSpecification:\n      AttributeName: expires\n      Enabled: true\n```\n\n----------------------------------------\n\nTITLE: Adding Host Entry for Local Development (Linux/macOS)\nDESCRIPTION: This command adds a host entry to resolve a development domain to localhost for testing Apple Sign-In locally.\nSOURCE: https://github.com/nextauthjs/docs/blob/main/docs/providers/apple.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsudo echo '127.0.0.1 dev.example.com' >> /etc/hosts\n```\n\n----------------------------------------\n\nTITLE: Creating Neo4j Constraints and Indexes for Enterprise Edition\nDESCRIPTION: This Cypher query creates composite node key constraints and indexes specifically for the Enterprise Edition of Neo4j. It sets up constraints and indexes for Account and VerificationToken nodes.\nSOURCE: https://github.com/nextauthjs/docs/blob/main/docs/adapters/neo4j.md#2025-04-21_snippet_4\n\nLANGUAGE: cypher\nCODE:\n```\nCREATE CONSTRAINT account_provider_composite_constraint IF NOT EXISTS \nON (a:Account) ASSERT (a.provider, a.providerAccountId) IS NODE KEY;\n\nCREATE INDEX account_provider_composite_index IF NOT EXISTS\nFOR (a:Account) ON (a.provider, a.providerAccountId);\n\nCREATE CONSTRAINT verification_token_composite_constraint IF NOT EXISTS \nON (v:VerificationToken) ASSERT (v.identifier, v.token) IS NODE KEY;\n\nCREATE INDEX verification_token_composite_index IF NOT EXISTS\nFOR (v:VerificationToken) ON (v.identifier, v.token);\n```\n\n----------------------------------------\n\nTITLE: Database Connection with Entity Prefix (Object)\nDESCRIPTION: Example showing how to set a prefix for all table names using a database configuration object.\nSOURCE: https://github.com/nextauthjs/docs/blob/main/versioned_docs/version-v3/configuration/databases.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\ndatabase: {\n  type: 'mysql',\n  host: '127.0.0.1',\n  port: 3306,\n  username: 'nextauth',\n  password: 'password',\n  database: 'database_name',\n  entityPrefix: 'nextauth_'\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Environment Variables for Azure AD B2C\nDESCRIPTION: Environment variables required for Azure AD B2C authentication setup including tenant name, client ID, client secret, and user flow name.\nSOURCE: https://github.com/nextauthjs/docs/blob/main/docs/providers/azure-ad-b2c.md#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nAZURE_AD_B2C_TENANT_NAME=<copy the B2C tenant name here from Step 1>\nAZURE_AD_B2C_CLIENT_ID=<copy Application (client) ID here from Step 2>\nAZURE_AD_B2C_CLIENT_SECRET=<copy generated secret value here from Step 2>\nAZURE_AD_B2C_PRIMARY_USER_FLOW=<copy the name of the signin user flow you created from Step 3>\n```\n\n----------------------------------------\n\nTITLE: Implementing Sign-In Button for Instagram Authentication\nDESCRIPTION: This snippet illustrates how to implement a sign-in button that triggers the Instagram sign-in process using NextAuth.js. It uses the 'signIn' function from the NextAuth client, passing 'instagram' as the provider.\nSOURCE: https://github.com/nextauthjs/docs/blob/main/versioned_docs/version-v3/providers/instagram.md#2025-04-21_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n// pages/index.jsx\nimport { signIn } from \"next-auth/client\"\n...\n<button onClick={() => signIn(\"instagram\")}> \n  Sign in\n</button>\n...\n```\n\n----------------------------------------\n\nTITLE: NextAuth JWT Helper Function\nDESCRIPTION: Example implementation of the getToken() helper function for verifying and decrypting JWT tokens.\nSOURCE: https://github.com/nextauthjs/docs/blob/main/versioned_docs/version-v3/configuration/options.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport jwt from \"next-auth/jwt\"\n\nconst secret = process.env.JWT_SECRET\n\nexport default async (req, res) => {\n  const token = await jwt.getToken({ req, secret })\n  console.log(\"JSON Web Token\", token)\n  res.end()\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Neo4j Indexes for Community Edition\nDESCRIPTION: This Cypher query creates single-property indexes specifically for the Community Edition of Neo4j. It sets up indexes for Account and VerificationToken nodes.\nSOURCE: https://github.com/nextauthjs/docs/blob/main/docs/adapters/neo4j.md#2025-04-21_snippet_3\n\nLANGUAGE: cypher\nCODE:\n```\nCREATE INDEX account_provider_index IF NOT EXISTS\nFOR (a:Account) ON (a.provider);\n\nCREATE INDEX account_provider_account_id_index IF NOT EXISTS\nFOR (a:Account) ON (a.providerAccountId);\n\nCREATE INDEX verification_token_identifier_index IF NOT EXISTS\nFOR (v:VerificationToken) ON (v.identifier);\n\nCREATE INDEX verification_token_token_index IF NOT EXISTS\nFOR (v:VerificationToken) ON (v.token);\n```\n\n----------------------------------------\n\nTITLE: Generating SSL Certificate for Local HTTPS (Linux/macOS)\nDESCRIPTION: This OpenSSL command generates a self-signed SSL certificate for local HTTPS development, required for Apple Sign-In testing.\nSOURCE: https://github.com/nextauthjs/docs/blob/main/docs/providers/apple.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nopenssl req -x509 -out localhost.crt -keyout localhost.key \\\n  -newkey rsa:2048 -nodes -sha256 \\\n  -subj \"/CN=localhost\" -extensions EXT -config <( \\\n   printf \"[dn]\\nCN=localhost\\n[req]\\ndistinguished_name = dn\\n[EXT]\\nsubjectAltName=DNS:localhost\\nkeyUsage=digitalSignature\\nextendedKeyUsage=serverAuth\")\n```\n\n----------------------------------------\n\nTITLE: Generating Secret for NextAuth.js Configuration\nDESCRIPTION: Command to generate a secure secret for NextAuth.js configuration using OpenSSL.\nSOURCE: https://github.com/nextauthjs/docs/blob/main/docs/getting-started/upgrade-to-v4.md#2025-04-21_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\n$ openssl rand -base64 32\n```\n\n----------------------------------------\n\nTITLE: Creating Indexes for Sessions Table in Postgres SQL\nDESCRIPTION: This SQL snippet establishes unique indexes for the 'sessions' table on 'session_token' and 'access_token'. This ensures fast access and integrity of session information.\nSOURCE: https://github.com/nextauthjs/docs/blob/main/versioned_docs/version-v3/adapters/typeorm/postgres.md#2025-04-21_snippet_5\n\nLANGUAGE: sql\nCODE:\n```\nCREATE UNIQUE INDEX session_token\n  ON sessions(session_token);\n\nCREATE UNIQUE INDEX access_token\n  ON sessions(access_token);\n```\n\n----------------------------------------\n\nTITLE: Database Schema Changes in NextAuth.js v4\nDESCRIPTION: Shows the complete schema changes for User, Account, Session, and VerificationToken models in the new version.\nSOURCE: https://github.com/nextauthjs/docs/blob/main/docs/getting-started/upgrade-to-v4.md#2025-04-21_snippet_7\n\nLANGUAGE: diff\nCODE:\n```\nUser {\n  id\n  name\n  email\n- emailVerified\n+ email_verified\n  image\n-  created_at\n-  updated_at\n}\n\nAccount {\n  id\n- compound_id\n- user_id\n+ userId\n-  provider_type\n+ type\n- provider_id\n+ provider\n- provider_account_id\n+ providerAccountId\n  refresh_token\n  access_token\n- access_token_expires\n+ expires_in\n+ expires_at\n+ token_type\n+ scope\n+ id_token\n+ session_state\n- created_at\n- updated_at\n}\n\nSession {\n  id\n  userId\n  expires\n  sessionToken\n- access_token\n- created_at\n- updated_at\n}\n\nVerificationToken {\n  id\n  token\n  expires\n  identifier\n-  created_at\n-  updated_at\n}\n```\n\n----------------------------------------\n\nTITLE: Setting up environment variables for email (connection string)\nDESCRIPTION: This snippet shows how to define environment variables for the SMTP connection string and email address. It's used as a prerequisite for configuring the Email provider with a connection string.\nSOURCE: https://github.com/nextauthjs/docs/blob/main/versioned_docs/version-v3/providers/email.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n\"EMAIL_SERVER=smtp://username:password@smtp.example.com:587\nEMAIL_FROM=noreply@example.com\"\n```\n\n----------------------------------------\n\nTITLE: Generating Secret Key with OpenSSL\nDESCRIPTION: Command to generate a secure random string using OpenSSL for use as NextAuth.js secret key.\nSOURCE: https://github.com/nextauthjs/docs/blob/main/docs/configuration/options.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ openssl rand -base64 32\n```\n\n----------------------------------------\n\nTITLE: Generating Prisma Client\nDESCRIPTION: Command to generate the Prisma Client based on the defined schema. This step is required after making changes to the Prisma schema.\nSOURCE: https://github.com/nextauthjs/docs/blob/main/docs/adapters/prisma.md#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nnpx prisma generate\n```\n\n----------------------------------------\n\nTITLE: Adding Host Entry for Local Development (Windows)\nDESCRIPTION: This PowerShell command adds a host entry to resolve a development domain to localhost for testing Apple Sign-In on Windows.\nSOURCE: https://github.com/nextauthjs/docs/blob/main/docs/providers/apple.md#2025-04-21_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\nAdd-Content -Path C:\\Windows\\System32\\drivers\\etc\\hosts -Value \"127.0.0.1 dev.example.com\" -Force\n```\n\n----------------------------------------\n\nTITLE: Configuring Redirect URI for OAuth Provider in NextAuth.js\nDESCRIPTION: Demonstrates the format for the redirect URI (callback URL) used in OAuth provider configuration. The URI includes the origin, API path, and provider ID.\nSOURCE: https://github.com/nextauthjs/docs/blob/main/docs/configuration/providers/oauth.md#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n[origin]/api/auth/callback/[provider]\n```\n\n----------------------------------------\n\nTITLE: Creating Index for Users Table in Postgres SQL\nDESCRIPTION: This SQL snippet sets up a unique index on the 'email' column in the 'users' table to ensure that email addresses are unique across user records, facilitating efficient queries and data integrity.\nSOURCE: https://github.com/nextauthjs/docs/blob/main/versioned_docs/version-v3/adapters/typeorm/postgres.md#2025-04-21_snippet_6\n\nLANGUAGE: sql\nCODE:\n```\nCREATE UNIQUE INDEX email\n  ON users(email);\n```\n\n----------------------------------------\n\nTITLE: Describing NextAuth.js Event Data Structure in Markdown\nDESCRIPTION: This snippet outlines the structure of data provided by various NextAuth.js events, including signIn, signOut, createUser, updateUser, linkAccount, and session events.\nSOURCE: https://github.com/nextauthjs/docs/blob/main/docs/configuration/events.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n- `user` (from your adapter or from the provider if a `credentials` type provider)\n- `account` (from your adapter or the provider)\n- `profile` (from the provider, is `undefined` on `credentials` provider, use `user` instead)\n- `isNewUser` (whether your adapter had a user for this account already)\n```\n\n----------------------------------------\n\nTITLE: Converting Apple Key for Environment Variable - Windows\nDESCRIPTION: PowerShell command to convert Apple authentication key to single line format for use in environment variables on Windows systems.\nSOURCE: https://github.com/nextauthjs/docs/blob/main/versioned_docs/version-v3/providers/apple.md#2025-04-21_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\n$k8file = \"AuthKey_ID.k8\"\n(Get-Content \"C:\\Users\\$env:UserName\\Downloads\\${k8file}\") -join \"\\n\"\n```\n\n----------------------------------------\n\nTITLE: Enabling JWT Encryption\nDESCRIPTION: Option to enable JSON Web Token encryption for additional security\nSOURCE: https://github.com/nextauthjs/docs/blob/main/versioned_docs/version-v3/faq.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\njwt: { encryption: true }\n```\n\n----------------------------------------\n\nTITLE: Setting Up HTTPS Server for NextAuth.js with Bungie\nDESCRIPTION: This Node.js script creates an HTTPS server for a Next.js application, enabling local development with Bungie authentication. It uses the generated SSL certificate and key.\nSOURCE: https://github.com/nextauthjs/docs/blob/main/docs/providers/bungie.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst { createServer } = require(\"https\")\nconst { parse } = require(\"url\")\nconst next = require(\"next\")\nconst fs = require(\"fs\")\n\nconst dev = process.env.NODE_ENV !== \"production\"\nconst app = next({ dev })\nconst handle = app.getRequestHandler()\n\nconst httpsOptions = {\n  key: fs.readFileSync(\"./certificates/localhost.key\"),\n  cert: fs.readFileSync(\"./certificates/localhost.crt\"),\n}\n\napp.prepare().then(() => {\n  createServer(httpsOptions, (req, res) => {\n    const parsedUrl = parse(req.url, true)\n    handle(req, res, parsedUrl)\n  }).listen(3000, (err) => {\n    if (err) throw err\n    console.log(\"> Ready on https://localhost:3000\")\n  })\n})\n```\n\n----------------------------------------\n\nTITLE: Generating SSL Certificate for Local HTTPS (Windows)\nDESCRIPTION: This OpenSSL command for Windows generates a self-signed SSL certificate for local HTTPS development, required for Apple Sign-In testing.\nSOURCE: https://github.com/nextauthjs/docs/blob/main/docs/providers/apple.md#2025-04-21_snippet_4\n\nLANGUAGE: cmd\nCODE:\n```\n req -x509 -out localhost.crt -keyout localhost.key \\\n  -newkey rsa:2048 -nodes -sha256 \\\n  -subj \"/CN=localhost\"\n```\n\n----------------------------------------\n\nTITLE: Custom Email Verification Implementation\nDESCRIPTION: Complete implementation of email verification request handling including HTML and text email templates\nSOURCE: https://github.com/nextauthjs/docs/blob/main/docs/providers/email.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport nodemailer from \"nodemailer\"\n\nasync function sendVerificationRequest({\n  identifier: email,\n  url,\n  provider: { server, from },\n}) {\n  const { host } = new URL(url)\n  const transport = nodemailer.createTransport(server)\n  await transport.sendMail({\n    to: email,\n    from,\n    subject: `Sign in to ${host}`,\n    text: text({ url, host }),\n    html: html({ url, host, email }),\n  })\n}\n\n// Email HTML body\nfunction html({ url, host, email }: Record<\"url\" | \"host\" | \"email\", string>) {\n  const escapedEmail = `${email.replace(/\\./g, \"&#8203;.\")}`\n  const escapedHost = `${host.replace(/\\./g, \"&#8203;.\")}`\n\n  const backgroundColor = \"#f9f9f9\"\n  const textColor = \"#444444\"\n  const mainBackgroundColor = \"#ffffff\"\n  const buttonBackgroundColor = \"#346df1\"\n  const buttonBorderColor = \"#346df1\"\n  const buttonTextColor = \"#ffffff\"\n\n  return `\n<body style=\"background: ${backgroundColor};\">\n  <table width=\"100%\" border=\"0\" cellspacing=\"0\" cellpadding=\"0\">\n    <tr>\n      <td align=\"center\" style=\"padding: 10px 0px 20px 0px; font-size: 22px; font-family: Helvetica, Arial, sans-serif; color: ${textColor};\">\n        <strong>${escapedHost}</strong>\n      </td>\n    </tr>\n  </table>\n  <table width=\"100%\" border=\"0\" cellspacing=\"20\" cellpadding=\"0\" style=\"background: ${mainBackgroundColor}; max-width: 600px; margin: auto; border-radius: 10px;\">\n    <tr>\n      <td align=\"center\" style=\"padding: 10px 0px 0px 0px; font-size: 18px; font-family: Helvetica, Arial, sans-serif; color: ${textColor};\">\n        Sign in as <strong>${escapedEmail}</strong>\n      </td>\n    </tr>\n    <tr>\n      <td align=\"center\" style=\"padding: 20px 0;\">\n        <table border=\"0\" cellspacing=\"0\" cellpadding=\"0\">\n          <tr>\n            <td align=\"center\" style=\"border-radius: 5px;\" bgcolor=\"${buttonBackgroundColor}\"><a href=\"${url}\" target=\"_blank\" style=\"font-size: 18px; font-family: Helvetica, Arial, sans-serif; color: ${buttonTextColor}; text-decoration: none; border-radius: 5px; padding: 10px 20px; border: 1px solid ${buttonBorderColor}; display: inline-block; font-weight: bold;\">Sign in</a></td>\n          </tr>\n        </table>\n      </td>\n    </tr>\n    <tr>\n      <td align=\"center\" style=\"padding: 0px 0px 10px 0px; font-size: 16px; line-height: 22px; font-family: Helvetica, Arial, sans-serif; color: ${textColor};\">\n        If you did not request this email you can safely ignore it.\n      </td>\n    </tr>\n  </table>\n</body>\n`\n}\n\nfunction text({ url, host }: Record<\"url\" | \"host\", string>) {\n  return `Sign in to ${host}\\n${url}\\n\\n`\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Provider Display in NextAuth.js\nDESCRIPTION: This snippet demonstrates how to conditionally hide a provider (Google in this case) from the default sign-in page while still allowing sign-in with it. It uses the request method and query parameters to determine the current action.\nSOURCE: https://github.com/nextauthjs/docs/blob/main/docs/configuration/initialization.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport NextAuth from \"next-auth\"\nimport CredentialsProvider from \"next-auth/providers/credentials\"\nimport GoogleProvider from \"next-auth/providers/google\"\n\nexport default async function auth(req, res) {\n  const providers = [\n    CredentialsProvider(...),\n    GoogleProvider(...),\n  ]\n\n  const isDefaultSigninPage = req.method === \"GET\" && req.query.nextauth.includes(\"signin\")\n\n  // Will hide the `GoogleProvider` when you visit `/api/auth/signin`\n  if (isDefaultSigninPage) providers.pop()\n\n  return await NextAuth(req, res, {\n    providers,\n    ...\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving LDAP Credentials from JWT Token\nDESCRIPTION: Example of how to retrieve LDAP credentials from a JWT token in API routes for subsequent LDAP operations.\nSOURCE: https://github.com/nextauthjs/docs/blob/main/docs/tutorials/ldap-auth.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\ntoken = await jwt.getToken({\n  req,\n  secret: process.env.NEXTAUTH_SECRET,\n})\nconst { username, password } = token\n```\n\n----------------------------------------\n\nTITLE: Installing NextAuth.js v4\nDESCRIPTION: Command to upgrade to NextAuth.js version 4 using npm or yarn.\nSOURCE: https://github.com/nextauthjs/docs/blob/main/docs/getting-started/upgrade-to-v4.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install next-auth\n```\n\n----------------------------------------\n\nTITLE: Installing NextAuth.js, Prisma Client, and Prisma Adapter\nDESCRIPTION: Commands to install the necessary packages for using NextAuth.js with the Prisma Adapter. This includes NextAuth.js, Prisma Client, Prisma Adapter, and Prisma CLI.\nSOURCE: https://github.com/nextauthjs/docs/blob/main/docs/adapters/prisma.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install next-auth @prisma/client @next-auth/prisma-adapter\nnpm install prisma --save-dev\n```\n\n----------------------------------------\n\nTITLE: Installing NextAuth MongoDB Dependencies\nDESCRIPTION: Command to install required npm packages for NextAuth.js MongoDB integration including the adapter and MongoDB driver.\nSOURCE: https://github.com/nextauthjs/docs/blob/main/docs/adapters/mongodb.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install next-auth @next-auth/mongodb-adapter mongodb\n```\n\n----------------------------------------\n\nTITLE: Converting Apple Key for Environment Variable - Mac\nDESCRIPTION: Command to convert Apple authentication key to single line format for use in environment variables on Mac systems.\nSOURCE: https://github.com/nextauthjs/docs/blob/main/versioned_docs/version-v3/providers/apple.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nawk 'NF {sub(/\\r/, \"\"); printf \"%s\\\\n\",$0;}'  AuthKey_ID.k8\n```\n\n----------------------------------------\n\nTITLE: Installing NextAuth with FaunaDB Adapter\nDESCRIPTION: NPM installation command for next-auth and the Fauna adapter canary version.\nSOURCE: https://github.com/nextauthjs/docs/blob/main/versioned_docs/version-v3/adapters/fauna.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nnpm install next-auth @next-auth/fauna-adapter@canary\n```\n\n----------------------------------------\n\nTITLE: Server Side getCsrfToken() Example\nDESCRIPTION: This example shows how to use the `getCsrfToken()` method on the server side. It imports the function from `next-auth/client` and passes the request object within an object as an argument.\nSOURCE: https://github.com/nextauthjs/docs/blob/main/versioned_docs/version-v3/getting-started/client.md#2025-04-21_snippet_5\n\nLANGUAGE: js\nCODE:\n```\nimport { getCsrfToken } from \"next-auth/client\"\n\nexport default async (req, res) => {\n  const csrfToken = await getCsrfToken({ req })\n  /* ... */\n  res.end()\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Provider Imports\nDESCRIPTION: Changes to provider import patterns, requiring individual imports for each authentication provider.\nSOURCE: https://github.com/nextauthjs/docs/blob/main/docs/getting-started/upgrade-to-v4.md#2025-04-21_snippet_4\n\nLANGUAGE: diff\nCODE:\n```\n- import Provider from \"next-auth/providers\"\n- Providers.Auth0({...})\n- Providers.Google({...})\n+ import Auth0Provider from \"next-auth/providers/auth0\"\n+ import GoogleProvider from \"next-auth/providers/google\"\n+ Auth0Provider({...})\n+ GoogleProvider({...})\n```\n\n----------------------------------------\n\nTITLE: Installing NextAuth with Sequelize Dependencies\nDESCRIPTION: Commands to install the required packages for using NextAuth.js with Sequelize adapter.\nSOURCE: https://github.com/nextauthjs/docs/blob/main/docs/adapters/sequelize.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install next-auth @next-auth/sequelize-adapter sequelize\n```\n\n----------------------------------------\n\nTITLE: HTTPS Development Server Setup for NextJS\nDESCRIPTION: Node.js server implementation for running NextJS with HTTPS support for local Apple Sign In testing.\nSOURCE: https://github.com/nextauthjs/docs/blob/main/versioned_docs/version-v3/providers/apple.md#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst { createServer } = require(\"https\")\nconst { parse } = require(\"url\")\nconst next = require(\"next\")\nconst fs = require(\"fs\")\n\nconst dev = process.env.NODE_ENV !== \"production\"\nconst app = next({ dev })\nconst handle = app.getRequestHandler()\n\nconst httpsOptions = {\n  key: fs.readFileSync(\"./certificates/localhost.key\"),\n  cert: fs.readFileSync(\"./certificates/localhost.crt\"),\n}\n\napp.prepare().then(() => {\n  createServer(httpsOptions, (req, res) => {\n    const parsedUrl = parse(req.url, true)\n    handle(req, res, parsedUrl)\n  }).listen(3000, (err) => {\n    if (err) throw err\n    console.log(\"> Ready on https://localhost:3000\")\n  })\n})\n```\n\n----------------------------------------\n\nTITLE: Installing Prisma Dependencies\nDESCRIPTION: Commands to install required Prisma packages including the client and CLI tools.\nSOURCE: https://github.com/nextauthjs/docs/blob/main/versioned_docs/version-v3/adapters/prisma-legacy.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @prisma/client\nnpm install prisma --save-dev\n```\n\n----------------------------------------\n\nTITLE: Installing NextAuth.js and Neo4j Adapter Dependencies\nDESCRIPTION: This command installs the necessary packages for using NextAuth.js with the Neo4j Adapter. It includes next-auth, the Neo4j adapter, and the Neo4j driver.\nSOURCE: https://github.com/nextauthjs/docs/blob/main/docs/adapters/neo4j.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install next-auth @next-auth/neo4j-adapter neo4j-driver\n```\n\n----------------------------------------\n\nTITLE: Installing NextAuth.js with MikroORM Adapter\nDESCRIPTION: Command to install NextAuth.js, the MikroORM adapter package, and required MikroORM dependencies. The user needs to replace [YOUR DRIVER] with their specific database driver.\nSOURCE: https://github.com/nextauthjs/docs/blob/main/docs/adapters/mikro-orm.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install next-auth @next-auth/mikro-orm-adapter @mikro-orm/core@next @mikro-orm/[YOUR DRIVER]@next\n```\n\n----------------------------------------\n\nTITLE: Creating HTTPS Next.js Server for Local Development\nDESCRIPTION: Node.js server configuration to run Next.js application with HTTPS using local SSL certificates\nSOURCE: https://github.com/nextauthjs/docs/blob/main/versioned_docs/version-v3/providers/bungie.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst { createServer } = require(\"https\")\nconst { parse } = require(\"url\")\nconst next = require(\"next\")\nconst fs = require(\"fs\")\n\nconst dev = process.env.NODE_ENV !== \"production\"\nconst app = next({ dev })\nconst handle = app.getRequestHandler()\n\nconst httpsOptions = {\n  key: fs.readFileSync(\"./certificates/localhost.key\"),\n  cert: fs.readFileSync(\"./certificates/localhost.crt\"),\n}\n\napp.prepare().then(() => {\n  createServer(httpsOptions, (req, res) => {\n    const parsedUrl = parse(req.url, true)\n    handle(req, res, parsedUrl)\n  }).listen(3000, (err) => {\n    if (err) throw err\n    console.log(\"> Ready on https://localhost:3000\")\n  })\n})\n```\n\n----------------------------------------\n\nTITLE: Creating Localhost SSL Certificate with OpenSSL\nDESCRIPTION: Bash command to generate self-signed SSL certificate for local HTTPS development\nSOURCE: https://github.com/nextauthjs/docs/blob/main/versioned_docs/version-v3/providers/bungie.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nopenssl req -x509 -out localhost.crt -keyout localhost.key \\\n  -newkey rsa:2048 -nodes -sha256 \\\n  -subj '/CN=localhost' -extensions EXT -config <( \\\n   printf \"[dn]\\nCN=localhost\\n[req]\\ndistinguished_name = dn\\n[EXT]\\nsubjectAltName=DNS:localhost\\nkeyUsage=digitalSignature\\nextendedKeyUsage=serverAuth\")\n```\n\n----------------------------------------\n\nTITLE: Installing NextAuth with FaunaDB Dependencies\nDESCRIPTION: Command to install the required packages for implementing FaunaDB adapter with NextAuth.js\nSOURCE: https://github.com/nextauthjs/docs/blob/main/docs/adapters/fauna.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install next-auth @next-auth/fauna-adapter faunadb\n```\n\n----------------------------------------\n\nTITLE: Windows Host File Configuration for Local Testing\nDESCRIPTION: PowerShell command to add local development domain to Windows hosts file for testing Apple Sign In.\nSOURCE: https://github.com/nextauthjs/docs/blob/main/versioned_docs/version-v3/providers/apple.md#2025-04-21_snippet_4\n\nLANGUAGE: powershell\nCODE:\n```\nAdd-Content -Path C:\\Windows\\System32\\drivers\\etc\\hosts -Value \"127.0.0.1`tdev.example.com\" -Force\n```\n\n----------------------------------------\n\nTITLE: Basic SQLite Database Configuration in NextAuth.js\nDESCRIPTION: Simple configuration object for setting up SQLite database connection with in-memory storage and synchronization enabled. This represents the most basic database configuration pattern.\nSOURCE: https://github.com/nextauthjs/docs/blob/main/versioned_docs/version-v3/adapters/typeorm/overview.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ndatabase: {\n  type: 'sqlite',\n  database: ':memory:',\n  synchronize: true\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying Note in Markdown\nDESCRIPTION: This code snippet demonstrates how to create a note block in markdown using the ':::note' syntax. It informs users about NextAuth.js's compatibility with various OAuth services.\nSOURCE: https://github.com/nextauthjs/docs/blob/main/docs/providers/index.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n:::note\nNextAuth.js is designed to work with any OAuth service, it supports **OAuth 1.0**, **1.0A**, **2.0** and **OpenID Connect (OIDC)** and has built-in support for most popular sign-in services.\n:::\n```\n\n----------------------------------------\n\nTITLE: Authentication Tutorials Overview\nDESCRIPTION: A curated list of tutorials covering various authentication approaches and use cases with NextAuth.js\nSOURCE: https://github.com/nextauthjs/docs/blob/main/versioned_docs/version-v3/tutorials.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# NextAuth.js tutorials\n\n_These tutorials are contributed by the community and hosted on this site._\n```\n\n----------------------------------------\n\nTITLE: SSL Certificate Generation for Local Testing\nDESCRIPTION: OpenSSL command to generate SSL certificate for local development testing with Apple Sign In.\nSOURCE: https://github.com/nextauthjs/docs/blob/main/versioned_docs/version-v3/providers/apple.md#2025-04-21_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nopenssl req -x509 -out localhost.crt -keyout localhost.key \\\n  -newkey rsa:2048 -nodes -sha256 \\\n  -subj '/CN=localhost' -extensions EXT -config <( \\\n   printf \"[dn]\\nCN=localhost\\n[req]\\ndistinguished_name = dn\\n[EXT]\\nsubjectAltName=DNS:localhost\\nkeyUsage=digitalSignature\\nextendedKeyUsage=serverAuth\")\n```\n\n----------------------------------------\n\nTITLE: Starting Documentation Development Server\nDESCRIPTION: Command to start the local development server for the documentation site which runs on port 3000.\nSOURCE: https://github.com/nextauthjs/docs/blob/main/README.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ npm start\n```\n\n----------------------------------------\n\nTITLE: OAuth Providers Dynamic List Generation in Markdown\nDESCRIPTION: Code snippet that dynamically generates a comma-separated list of supported OAuth providers by accessing a providers.json file\nSOURCE: https://github.com/nextauthjs/docs/blob/main/versioned_docs/version-v3/faq.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n{Object.values(require(\"../../providers.json\")).sort().join(\", \")}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Custom NextAuth.js Database Adapter\nDESCRIPTION: A template for creating a custom database adapter with all required methods for user authentication, session management, and verification flows in NextAuth.js\nSOURCE: https://github.com/nextauthjs/docs/blob/main/versioned_docs/version-v3/tutorials/creating-a-database-adapter.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexport default function YourAdapter (config, options = {}) {\n  return {\n    async getAdapter (appOptions) {\n      async createUser (profile) {\n        return null\n      },\n      async getUser (id) {\n        return null\n      },\n      async getUserByEmail (email) {\n        return null\n      },\n      async getUserByProviderAccountId (\n        providerId,\n        providerAccountId\n      ) {\n        return null\n      },\n      async updateUser (user) {\n        return null\n      },\n      async deleteUser (userId) {\n        return null\n      },\n      async linkAccount (\n        userId,\n        providerId,\n        providerType,\n        providerAccountId,\n        refreshToken,\n        accessToken,\n        accessTokenExpires\n      ) {\n        return null\n      },\n      async unlinkAccount (\n        userId,\n        providerId,\n        providerAccountId\n      ) {\n        return null\n      },\n      async createSession (user) {\n        return null\n      },\n      async getSession (sessionToken) {\n        return null\n      },\n      async updateSession (\n        session,\n        force\n      ) {\n        return null\n      },\n      async deleteSession (sessionToken) {\n        return null\n      },\n      async createVerificationRequest (\n        identifier,\n        url,\n        token,\n        secret,\n        provider\n      ) {\n        return null\n      },\n      async getVerificationRequest (\n        identifier,\n        token,\n        secret,\n        provider\n      ) {\n        return null\n      },\n      async deleteVerificationRequest (\n        identifier,\n        token,\n        secret,\n        provider\n      ) {\n        return null\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring NextAuth.js with LDAP Provider\nDESCRIPTION: Implementation of NextAuth.js configuration with LDAP credentials provider, including JWT token handling and session management. Sets up custom authentication logic to validate credentials against an LDAP server.\nSOURCE: https://github.com/nextauthjs/docs/blob/main/docs/tutorials/ldap-auth.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst ldap = require(\"ldapjs\")\nimport NextAuth from \"next-auth\"\nimport CredentialsProvider from \"next-auth/providers/credentials\"\n\nexport default NextAuth({\n  providers: [\n    CredentialsProvider({\n      name: \"LDAP\",\n      credentials: {\n        username: { label: \"DN\", type: \"text\", placeholder: \"\" },\n        password: { label: \"Password\", type: \"password\" },\n      },\n      async authorize(credentials, req) {\n        // You might want to pull this call out so we're not making a new LDAP client on every login attemp\n        const client = ldap.createClient({\n          url: process.env.LDAP_URI,\n        })\n\n        // Essentially promisify the LDAPJS client.bind function\n        return new Promise((resolve, reject) => {\n          client.bind(credentials.username, credentials.password, (error) => {\n            if (error) {\n              console.error(\"Failed\")\n              reject()\n            } else {\n              console.log(\"Logged in\")\n              resolve({\n                username: credentials.username,\n                password: credentials.password,\n              })\n            }\n          })\n        })\n      },\n    }),\n  ],\n  callbacks: {\n    async jwt({ token, user }) {\n      const isSignIn = user ? true : false\n      if (isSignIn) {\n        token.username = user.username\n        token.password = user.password\n      }\n      return token\n    },\n    async session({ session, token }) {\n      return { ...session, user: { username: token.username } }\n    },\n  },\n  secret: process.env.NEXTAUTH_SECRET,\n  jwt: {\n    secret: process.env.JWT_SECRET,\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Installing TypeORM Adapter Dependencies\nDESCRIPTION: Command to install the required packages for using TypeORM adapter with NextAuth.js\nSOURCE: https://github.com/nextauthjs/docs/blob/main/docs/adapters/typeorm.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install next-auth @next-auth/typeorm-legacy-adapter typeorm\n```\n\n----------------------------------------\n\nTITLE: Installing NextAuth.js with Firebase Adapter\nDESCRIPTION: Command for installing NextAuth.js core package along with the experimental Firebase adapter using npm or yarn.\nSOURCE: https://github.com/nextauthjs/docs/blob/main/docs/adapters/firebase.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install next-auth @next-auth/firebase-adapter@experimental\n```\n\n----------------------------------------\n\nTITLE: Installing Next Auth with DynamoDB Adapter\nDESCRIPTION: Command to install the Next Auth library and the DynamoDB adapter package using npm.\nSOURCE: https://github.com/nextauthjs/docs/blob/main/docs/adapters/dynamodb.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install next-auth @next-auth/dynamodb-adapter\n```\n\n----------------------------------------\n\nTITLE: Installing NextAuth.js with PouchDB Adapter\nDESCRIPTION: Command to install the required NextAuth.js and PouchDB adapter packages using npm or yarn.\nSOURCE: https://github.com/nextauthjs/docs/blob/main/docs/adapters/pouchdb.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install next-auth @next-auth/pouchdb-adapter\n```\n\n----------------------------------------\n\nTITLE: Installing Next-Auth with Dgraph Adapter\nDESCRIPTION: Command to install the necessary packages for using Next-Auth with the Dgraph adapter.\nSOURCE: https://github.com/nextauthjs/docs/blob/main/docs/adapters/dgraph.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install next-auth @next-auth/dgraph-adapter\n```\n\n----------------------------------------\n\nTITLE: signIn() Redirect Example\nDESCRIPTION: This example demonstrates how to use the `signIn()` method to redirect the user to the sign-in page when a button is clicked.  The method is imported from `next-auth/client` and called without any arguments, triggering the default sign-in flow.\nSOURCE: https://github.com/nextauthjs/docs/blob/main/versioned_docs/version-v3/getting-started/client.md#2025-04-21_snippet_7\n\nLANGUAGE: js\nCODE:\n```\nimport { signIn } from \"next-auth/client\"\n\nexport default () => <button onClick={() => signIn()}>Sign in</button>\n```\n\n----------------------------------------\n\nTITLE: JWT Secret Generation for Apple Sign In\nDESCRIPTION: JavaScript code to generate JWT secret for Apple Sign In using private key and configuration parameters.\nSOURCE: https://github.com/nextauthjs/docs/blob/main/versioned_docs/version-v3/providers/apple.md#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nconst jwt = require(\"jsonwebtoken\")\nconst fs = require(\"fs\")\n\nconst appleId = \"myapp.example.com\"\nconst keyId = \"\"\nconst teamId = \"\"\nconst privateKey = fs.readFileSync(\"path/to/key\")\n\nconst secret = jwt.sign(\n  {\n    iss: teamId,\n    iat: Math.floor(Date.now() / 1000),\n    exp: Math.floor(Date.now() / 1000) + 86400 * 180, // 6 months\n    aud: \"https://appleid.apple.com\",\n    sub: appleId,\n  },\n  privateKey,\n  {\n    algorithm: \"ES256\",\n    keyid: keyId,\n  }\n)\n\nconsole.log(secret)\n```\n\n----------------------------------------\n\nTITLE: Setting up NextAuth.js Docs Development Environment - Bash Commands\nDESCRIPTION: Shell commands for cloning the NextAuth.js documentation repository, installing dependencies, and starting the development server. These steps establish a local development environment for contributing to the documentation.\nSOURCE: https://github.com/nextauthjs/docs/blob/main/CONTRIBUTING.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ git clone https://github.com/nextauthjs/docs.git\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ npm install\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ npm start\n```\n\n----------------------------------------\n\nTITLE: Configuring Cypress plugins for social login testing\nDESCRIPTION: This JavaScript code sets up the GoogleSocialLogin plugin for Cypress, enabling automated social login testing for NextAuth.js.\nSOURCE: https://github.com/nextauthjs/docs/blob/main/docs/tutorials/testing-with-cypress.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst { GoogleSocialLogin } = require(\"cypress-social-logins\").plugins\n\nmodule.exports = (on, config) => {\n  on(\"task\", {\n    GoogleSocialLogin: GoogleSocialLogin,\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Adding localhost Entry to Host File on Windows\nDESCRIPTION: PowerShell command to modify hosts file for local development with custom domain\nSOURCE: https://github.com/nextauthjs/docs/blob/main/versioned_docs/version-v3/providers/bungie.md#2025-04-21_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nAdd-Content -Path C:\\Windows\\System32\\drivers\\etc\\hosts -Value \"127.0.0.1`tdev.example.com\" -Force\n```\n\n----------------------------------------\n\nTITLE: Installing LDAP Dependencies\nDESCRIPTION: Command to install the required ldapjs package for LDAP authentication functionality.\nSOURCE: https://github.com/nextauthjs/docs/blob/main/docs/tutorials/ldap-auth.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install ldapjs\n```\n\n----------------------------------------\n\nTITLE: Installing Documentation Dependencies\nDESCRIPTION: Command to install all required npm dependencies for the documentation site.\nSOURCE: https://github.com/nextauthjs/docs/blob/main/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ npm install\n```\n\n----------------------------------------\n\nTITLE: Cloning NextAuth.js Documentation Repository\nDESCRIPTION: Command to clone the NextAuth.js documentation repository to local machine.\nSOURCE: https://github.com/nextauthjs/docs/blob/main/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ git clone https://github.com/nextauthjs/docs.git\n```"
  }
]