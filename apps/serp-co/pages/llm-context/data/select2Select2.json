[
  {
    "owner": "select2",
    "repo": "select2",
    "content": "TITLE: Including Select2 Via CDN - HTML\nDESCRIPTION: Demonstrates how to include the Select2 CSS and JavaScript files in a web page using CDN sources from jsDelivr. The code is intended to be placed within the <head> of your HTML document. No additional dependencies are required beyond the indicated CDN references. Upon inclusion, the Select2 library and its styles are available for use in the page. Ensure network access to the CDN for proper loading.\nSOURCE: https://github.com/select2/select2/blob/develop/docs/pages/01.getting-started/01.installation/docs.md#2025-04-22_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<link href=\\\"https://cdn.jsdelivr.net/npm/select2@4.1.0-rc.0/dist/css/select2.min.css\\\" rel=\\\"stylesheet\\\" />\\n<script src=\\\"https://cdn.jsdelivr.net/npm/select2@4.1.0-rc.0/dist/js/select2.min.js\\\"></script>\n```\n\n----------------------------------------\n\nTITLE: Initializing Select2 on a Single Select Element using jQuery\nDESCRIPTION: This JavaScript snippet demonstrates how to initialize the Select2 plugin on an HTML element with the class `js-example-basic-single`. It uses jQuery's `$(document).ready()` function to ensure the DOM is fully loaded before attempting to apply the `.select2()` method to the selected element.\nSOURCE: https://github.com/select2/select2/blob/develop/docs/pages/01.getting-started/02.basic-usage/docs.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// In your Javascript (external .js resource or <script> tag)\n$(document).ready(function() {\n    $('.js-example-basic-single').select2();\n});\n```\n\n----------------------------------------\n\nTITLE: Comprehensive AJAX Configuration Options for Select2\nDESCRIPTION: A detailed example showing various AJAX configuration options available in Select2, including custom URL generation, data processing, and transport method.\nSOURCE: https://github.com/select2/select2/blob/develop/docs/pages/06.data-sources/02.ajax/docs.md#2025-04-22_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\najax: {\n  // The number of milliseconds to wait for the user to stop typing before\n  // issuing the ajax request.\n  delay: 250,\n  // You can craft a custom url based on the parameters that are passed into the\n  // request. This is useful if you are using a framework which has\n  // JavaScript-based functions for generating the urls to make requests to.\n  //\n  // @param params The object containing the parameters used to generate the\n  //   request.\n  // @returns The url that the request should be made to.\n  url: function (params) {\n    return UrlGenerator.Random();\n  },\n  // You can pass custom data into the request based on the parameters used to\n  // make the request. For `GET` requests, the default method, these are the\n  // query parameters that are appended to the url. For `POST` requests, this\n  // is the form data that will be passed into the request. For other requests,\n  // the data returned from here should be customized based on what jQuery and\n  // your server are expecting.\n  //\n  // @param params The object containing the parameters used to generate the\n  //   request.\n  // @returns Data to be directly passed into the request.\n  data: function (params) {\n    var queryParameters = {\n      q: params.term\n    }\n\n    return queryParameters;\n  },\n  // You can modify the results that are returned from the server, allowing you\n  // to make last-minute changes to the data, or find the correct part of the\n  // response to pass to Select2. Keep in mind that results should be passed as\n  // an array of objects.\n  //\n  // @param data The data as it is returned directly by jQuery.\n  // @returns An object containing the results data as well as any required\n  //   metadata that is used by plugins. The object should contain an array of\n  //   data objects as the `results` key.\n  processResults: function (data) {\n    return {\n      results: data\n    };\n  },\n  // You can use a custom AJAX transport function if you do not want to use the\n  // default one provided by jQuery.\n  //\n  // @param params The object containing the parameters used to generate the\n  //   request.\n  // @param success A callback function that takes `data`, the results from the\n  //   request.\n  // @param failure A callback function that indicates that the request could\n  //   not be completed.\n  // @returns An object that has an `abort` function that can be called to abort\n  //   the request if needed.\n  transport: function (params, success, failure) {\n    var $request = $.ajax(params);\n\n    $request.then(success);\n    $request.fail(failure);\n\n    return $request;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Select2 with AJAX in JavaScript\nDESCRIPTION: JavaScript code to initialize Select2 with AJAX support, using GitHub's API as an example data source.\nSOURCE: https://github.com/select2/select2/blob/develop/docs/pages/06.data-sources/02.ajax/docs.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n$('.js-data-example-ajax').select2({\n  ajax: {\n    url: 'https://api.github.com/search/repositories',\n    dataType: 'json'\n    // Additional AJAX parameters go here; see the end of this chapter for the full code of this example\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Pagination in Select2 AJAX Requests\nDESCRIPTION: JavaScript code demonstrating how to implement pagination for AJAX requests in Select2.\nSOURCE: https://github.com/select2/select2/blob/develop/docs/pages/06.data-sources/02.ajax/docs.md#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n$('#mySelect2').select2({\n  ajax: {\n    url: 'https://api.github.com/search/repositories',\n    data: function (params) {\n      var query = {\n        search: params.term,\n        page: params.page || 1\n      }\n\n      // Query parameters will be ?search=[term]&page=[page]\n      return query;\n    }\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Examples of Programmatic Control in Select2\nDESCRIPTION: This script provides examples of programmatically setting, opening, closing, destroying, and clearing Select2 options. It demonstrates interactions with both single and multi-select dropdowns using jQuery event handlers.\nSOURCE: https://github.com/select2/select2/blob/develop/docs/pages/12.programmatic-control/03.methods/docs.md#2025-04-22_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar $example = $(\".js-example-programmatic\").select2();\nvar $exampleMulti = $(\".js-example-programmatic-multi\").select2();\n\n$(\".js-programmatic-set-val\").on(\"click\", function () {\n    $example.val(\"CA\").trigger(\"change\");\n});\n\n$(\".js-programmatic-open\").on(\"click\", function () {\n    $example.select2(\"open\");\n});\n\n$(\".js-programmatic-close\").on(\"click\", function () {\n    $example.select2(\"close\");\n});\n\n$(\".js-programmatic-init\").on(\"click\", function () {\n    $example.select2();\n});\n\n$(\".js-programmatic-destroy\").on(\"click\", function () {\n    $example.select2(\"destroy\");\n});\n\n$(\".js-programmatic-multi-set-val\").on(\"click\", function () {\n    $exampleMulti.val([\"CA\", \"AL\"]).trigger(\"change\");\n});\n\n$(\".js-programmatic-multi-clear\").on(\"click\", function () {\n    $exampleMulti.val(null).trigger(\"change\");\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing Tagging on a Single-Select Element in Select2 (HTML & JavaScript)\nDESCRIPTION: This snippet demonstrates how to enable dynamic option (tag) creation in a single-select dropdown using Select2 with jQuery. The HTML defines a select element with preset options, while the JavaScript initializes Select2 with the 'tags' option set to true, allowing users to enter custom options. Requires including Select2 and jQuery libraries. The .js-example-tags class targets the select element for enhancement. Users can input any value to create new tags dynamically.\nSOURCE: https://github.com/select2/select2/blob/develop/docs/pages/09.tagging/docs.md#2025-04-22_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<select class=\\\"form-control\\\">\\n  <option selected=\\\"selected\\\">orange</option>\\n  <option>white</option>\\n  <option>purple</option>\\n</select>\\n\n```\n\nLANGUAGE: javascript\nCODE:\n```\n$(\\\".js-example-tags\\\").select2({\\n  tags: true\\n});\\n\n```\n\n----------------------------------------\n\nTITLE: Selecting Options Programmatically in Select2\nDESCRIPTION: This snippet shows how to select a specific option in a Select2 control programmatically using jQuery’s .val() method. It covers both single and multiple selections by setting the Select2 value and triggering change events.\nSOURCE: https://github.com/select2/select2/blob/develop/docs/pages/12.programmatic-control/01.add-select-clear-items/docs.md#2025-04-22_snippet_2\n\nLANGUAGE: Javascript\nCODE:\n```\n$('#mySelect2').val('1'); // Select the option with a value of '1'\n$('#mySelect2').trigger('change'); // Notify any JS components that the value changed\n```\n\nLANGUAGE: Javascript\nCODE:\n```\n$('#mySelect2').val(['1', '2']);\n$('#mySelect2').trigger('change'); // Notify any JS components that the value changed\n```\n\n----------------------------------------\n\nTITLE: Configuring Select2 within Bootstrap Modal\nDESCRIPTION: This code demonstrates how to properly initialize Select2 inside a Bootstrap modal by setting the dropdownParent option to the modal element. This prevents the issue where the dropdown doesn't function correctly because Bootstrap modals steal focus from elements outside the modal.\nSOURCE: https://github.com/select2/select2/blob/develop/docs/pages/02.troubleshooting/02.common-problems/docs.md#2025-04-22_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<div id=\"myModal\" class=\"modal fade\" tabindex=\"-1\" role=\"dialog\" aria-hidden=\"true\">\n    ...\n    <select id=\"mySelect2\">\n        ...\n    </select>\n    ...\n</div>\n\n...\n\n<script>\n    $('#mySelect2').select2({\n        dropdownParent: $('#myModal')\n    });\n</script>\n```\n\n----------------------------------------\n\nTITLE: Initializing Dropdowns with Select2 using Local Array Data in JavaScript\nDESCRIPTION: This JavaScript snippet demonstrates how to initialize dropdown menus by supplying an array of items directly to the Select2 library. Dependencies include the Select2 library and a DOM with select elements. The key parameters are arrays of objects representing each item to be included in the dropdown. The snippet provides a straightforward way to populate select elements, immediately rendering items as `<option>` elements and maintaining the backward compatibility with Select2 v3.5.\nSOURCE: https://github.com/select2/select2/blob/develop/docs/pages/06.data-sources/03.arrays/docs.md#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar data = [\n    {\n        id: 0,\n        text: 'enhancement'\n    },\n    {\n        id: 1,\n        text: 'bug'\n    },\n    {\n        id: 2,\n        text: 'duplicate'\n    },\n    {\n        id: 3,\n        text: 'invalid'\n    },\n    {\n        id: 4,\n        text: 'wontfix'\n    }\n];\n\n$(\".js-example-data-array\").select2({\n  data: data\n})\n\n$(\".js-example-data-array-selected\").select2({\n  data: data\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Search Result Matcher in Select2\nDESCRIPTION: This snippet demonstrates how to create a custom matcher function for filtering results in Select2. The function checks if the search term appears anywhere in the result text and appends '(matched)' to matching results.\nSOURCE: https://github.com/select2/select2/blob/develop/docs/pages/11.searching/docs.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nfunction matchCustom(params, data) {\n    // If there are no search terms, return all of the data\n    if ($.trim(params.term) === '') {\n      return data;\n    }\n\n    // Do not display the item if there is no 'text' property\n    if (typeof data.text === 'undefined') {\n      return null;\n    }\n\n    // `params.term` should be the term that is used for searching\n    // `data.text` is the text that is displayed for the data object\n    if (data.text.indexOf(params.term) > -1) {\n      var modifiedData = $.extend({}, data, true);\n      modifiedData.text += ' (matched)';\n   \n      // You can return modified objects from here\n      // This includes matching the `children` how you want in nested data sets\n      return modifiedData;\n    }\n   \n    // Return `null` if the term should not be displayed\n    return null;\n}\n    \n$(\".js-example-matcher\").select2({\n  matcher: matchCustom\n});\n```\n\n----------------------------------------\n\nTITLE: Listening to Select2 Events Using jQuery\nDESCRIPTION: This code snippet demonstrates how to attach event listeners to Select2 events using jQuery's `.on` method. It listens for the `select2:select` event and allows the user to perform custom actions based on the selection data accessed via `params.data`. Requires jQuery and Select2, and the event is triggered on the `<select>` element that Select2 is attached to.\nSOURCE: https://github.com/select2/select2/blob/develop/docs/pages/12.programmatic-control/04.events/docs.md#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n$('#mySelect2').on('select2:select', function (e) {\n  // Do something\n});\n```\n\n----------------------------------------\n\nTITLE: Setting a Simple Global Default for Select2 in JavaScript\nDESCRIPTION: This snippet demonstrates how to set a simple global default option for Select2. In this case, it sets the default theme to 'classic' for all Select2 instances.\nSOURCE: https://github.com/select2/select2/blob/develop/docs/pages/03.configuration/02.defaults/docs.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n$.fn.select2.defaults.set(\"theme\", \"classic\");\n```\n\n----------------------------------------\n\nTITLE: Preselecting Options in AJAX-Sourced Select2\nDESCRIPTION: This snippet details how to preselect options in a Select2 control with remotely sourced data. It demonstrates AJAX usage to fetch data and programmatically adds the fetched item as a new option. It also manually triggers the select2:select event.\nSOURCE: https://github.com/select2/select2/blob/develop/docs/pages/12.programmatic-control/01.add-select-clear-items/docs.md#2025-04-22_snippet_3\n\nLANGUAGE: Javascript\nCODE:\n```\n$('#mySelect2').select2({\n    ajax: {\n        url: '/api/students'\n    }\n});\n\nvar studentSelect = $('#mySelect2');\n$.ajax({\n    type: 'GET',\n    url: '/api/students/s/' + studentId\n}).then(function (data) {\n    var option = new Option(data.full_name, data.id, true, true);\n    studentSelect.append(option).trigger('change');\n\n    studentSelect.trigger({\n        type: 'select2:select',\n        params: {\n            data: data\n        }\n    });\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Selection Template in Select2\nDESCRIPTION: Demonstrates how to create a custom template for selected items using the templateSelection option. The example includes formatting state objects with flags and text, while preventing script injection.\nSOURCE: https://github.com/select2/select2/blob/develop/docs/pages/08.selections/docs.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nfunction formatState (state) {\n  if (!state.id) {\n    return state.text;\n  }\n\n  var baseUrl = \"{{ url('user://pages/images/flags') }}\";\n  var $state = $(\n    '<span><img class=\"img-flag\" /> <span></span></span>'\n  );\n\n  // Use .text() instead of HTML string concatenation to avoid script injection issues\n  $state.find(\"span\").text(state.text);\n  $state.find(\"img\").attr(\"src\", baseUrl + \"/\" + state.element.value.toLowerCase() + \".png\");\n\n  return $state;\n};\n\n$(\".js-example-templating\").select2({\n  templateSelection: formatState\n});\n```\n\n----------------------------------------\n\nTITLE: Specifying Select2 Dropdown Parent Element in JavaScript\nDESCRIPTION: Demonstrates setting a custom parent element for the Select2 dropdown using the `dropdownParent` option. This is useful for rendering Select2 correctly within containers like modals, ensuring the dropdown is appended to the specified element (e.g., `$('#myModal')`) instead of the `body`. Requires jQuery and the Select2 library.\nSOURCE: https://github.com/select2/select2/blob/develop/docs/pages/07.dropdown/docs.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n$('#mySelect2').select2({\n  dropdownParent: $('#myModal')\n});\n```\n\n----------------------------------------\n\nTITLE: Customizing Tag Placement in the Select2 Dropdown Using insertTag Callback (JavaScript)\nDESCRIPTION: This snippet employs the insertTag callback to control where a new tag appears in the Select2 dropdown menu. Here, the tag is pushed to the end of the results array. Requires jQuery and Select2. The function parameters are the current data array and the tag object to be inserted. This allows further UX customization for how users interact with newly created tags.\nSOURCE: https://github.com/select2/select2/blob/develop/docs/pages/09.tagging/docs.md#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n$(\\'select\\').select2({\\n  insertTag: function (data, tag) {\\n    // Insert the tag at the end of the results\\n    data.push(tag);\\n  }\\n});\\n\n```\n\n----------------------------------------\n\nTITLE: Customizing Select2 Result Appearance with templateResult in JavaScript\nDESCRIPTION: Demonstrates how to use the `templateResult` option in Select2 to customize the rendering of options in the dropdown. A function `formatState` is defined to prepend an image flag to the state text. This function is then passed to the Select2 initialization for the element with class `.js-example-templating`. Requires jQuery and the Select2 library.\nSOURCE: https://github.com/select2/select2/blob/develop/docs/pages/07.dropdown/docs.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nfunction formatState (state) {\n  if (!state.id) {\n    return state.text;\n  }\n  var baseUrl = \"{{ url('user://pages/images/flags') }}\";\n  var $state = $(\n    '<span><img src=\"' + baseUrl + '/' + state.element.value.toLowerCase() + '.png\" class=\"img-flag\" /> ' + state.text + '</span>'\n  );\n  return $state;\n};\n\n$(\".js-example-templating\").select2({\n  templateResult: formatState\n});\n```\n\n----------------------------------------\n\nTITLE: Creating New Options in Select2 Dropdown\nDESCRIPTION: This snippet demonstrates how to add a new option to a Select2 control using JavaScript. It creates a new HTMLOptionElement and appends it to the Select2 control. The snippet highlights the use of parameters to determine if the new option is selected by default.\nSOURCE: https://github.com/select2/select2/blob/develop/docs/pages/12.programmatic-control/01.add-select-clear-items/docs.md#2025-04-22_snippet_0\n\nLANGUAGE: Javascript\nCODE:\n```\nvar data = {\n    id: 1,\n    text: 'Barn owl'\n};\n\nvar newOption = new Option(data.text, data.id, false, false);\n$('#mySelect2').append(newOption).trigger('change');\n```\n\n----------------------------------------\n\nTITLE: Initializing Select2 with Spanish Language in JavaScript\nDESCRIPTION: This snippet demonstrates how to initialize Select2 with a specific language (Spanish in this case). It uses the 'language' option to specify the desired language code.\nSOURCE: https://github.com/select2/select2/blob/develop/docs/pages/13.i18n/docs.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n$(\".js-example-language\").select2({\n  language: \"es\"\n});\n```\n\n----------------------------------------\n\nTITLE: Transforming AJAX Response Data for Select2\nDESCRIPTION: Demonstrates how to use the ajax.processResults option to transform the API response into the format expected by Select2.\nSOURCE: https://github.com/select2/select2/blob/develop/docs/pages/06.data-sources/02.ajax/docs.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n$('#mySelect2').select2({\n  ajax: {\n    url: '/example/api',\n    processResults: function (data) {\n      // Transforms the top-level key of the response object from 'items' to 'results'\n      return {\n        results: data.items\n      };\n    }\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing Tagging with Tokenization in Select2 (JavaScript)\nDESCRIPTION: This JavaScript snippet sets up a multi-select Select2 element to automatically create new tags as the user types, using specified token separators (comma and space). The options 'tags: true' and 'tokenSeparators' ([',', ' ']) configure Select2 to split input on these delimiters. Dependencies are jQuery and Select2. Users can add multiple entries rapidly by typing and separating options inline. The select element should have the \".js-example-tokenizer\" class.\nSOURCE: https://github.com/select2/select2/blob/develop/docs/pages/09.tagging/docs.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n$(\\\".js-example-tokenizer\\\").select2({\\n    tags: true,\\n    tokenSeparators: [',', ' ']\\n})\\n\n```\n\n----------------------------------------\n\nTITLE: Customizing Select2 Translations in JavaScript\nDESCRIPTION: This example shows how to provide custom translations for Select2 messages. It uses a 'language' object with functions that return translated strings for specific scenarios.\nSOURCE: https://github.com/select2/select2/blob/develop/docs/pages/13.i18n/docs.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nlanguage: {\n  // You can find all of the options in the language files provided in the\n  // build. They all must be functions that return the string that should be\n  // displayed.\n  inputTooShort: function () {\n    return \"You must enter more characters...\";\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Manually Triggering Select2 Events with Custom Data\nDESCRIPTION: Demonstrates how to manually trigger Select2 events and pass custom data using jQuery's `trigger` method. It involves creating a new jQuery `Event` object with custom data and triggering it on the Select2 control. The example includes construction of event data and triggering of the `select2:select` event. JQuery and Select2 are prerequisites.\nSOURCE: https://github.com/select2/select2/blob/develop/docs/pages/12.programmatic-control/04.events/docs.md#2025-04-22_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar data = {\n  \"id\": 1,\n  \"text\": \"Tyto alba\",\n  \"genus\": \"Tyto\",\n  \"species\": \"alba\"\n};\n\n$('#mySelect2').trigger({\n    type: 'select2:select',\n    params: {\n        data: data\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Options with Select2 in JavaScript\nDESCRIPTION: This snippet demonstrates how to configure custom options for a Select2 dropdown element by passing an options object to the .select2() initialization method. The example shows setting a placeholder text, requiring jQuery and Select2 libraries to be included in the project. Inputs: None directly by the snippet but requires HTML with a '.js-example-basic-single' class. Outputs: A dropdown initialized with a placeholder. Constraints: Assumes jQuery and Select2 are loaded on the page.\nSOURCE: https://github.com/select2/select2/blob/develop/docs/pages/03.configuration/docs.md#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n$('.js-example-basic-single').select2({\n  placeholder: 'Select an option'\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Responsive Select2 with JavaScript\nDESCRIPTION: This JavaScript snippet configures Select2 for responsive rendering by overriding the default width setting. It applies the 'resolve' option to adjust its width based on the element's style attribute.\nSOURCE: https://github.com/select2/select2/blob/develop/docs/pages/04.appearance/docs.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n\n$(\".js-example-responsive\").select2({\n    width: 'resolve' // need to override the changed default\n});\n\n```\n\n----------------------------------------\n\nTITLE: Initializing Select2 within Bootstrap Modals using JavaScript\nDESCRIPTION: Provides a solution for initializing Select2 components within Bootstrap 3.x modals that may not be visible on page load. It binds to the `shown.bs.modal` event, finds `select` elements within the newly shown modal, determines the appropriate `dropdownParent` (either the modal itself or the document body), and then initializes Select2. Requires jQuery, Select2, and Bootstrap 3.x JavaScript.\nSOURCE: https://github.com/select2/select2/blob/develop/docs/pages/07.dropdown/docs.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n$('body').on('shown.bs.modal', '.modal', function() {\n  $(this).find('select').each(function() {\n    var dropdownParent = $(document.body);\n    if ($(this).parents('.modal.in:first').length !== 0)\n      dropdownParent = $(this).parents('.modal.in:first');\n    $(this).select2({\n      dropdownParent: dropdownParent\n      // ...\n    });\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Grouped Data Format for Select2 in JSON\nDESCRIPTION: Demonstrates the JSON structure for grouped options in Select2. Options are nested under the 'children' key of each group object, with the group label specified in the 'text' property of the group object.\nSOURCE: https://github.com/select2/select2/blob/develop/docs/pages/06.data-sources/01.formats/docs.md#2025-04-22_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"results\": [\n    { \n      \"text\": \"Group 1\", \n      \"children\" : [\n        {\n            \"id\": 1,\n            \"text\": \"Option 1.1\"\n        },\n        {\n            \"id\": 2,\n            \"text\": \"Option 1.2\"\n        }\n      ]\n    },\n    { \n      \"text\": \"Group 2\", \n      \"children\" : [\n        {\n            \"id\": 3,\n            \"text\": \"Option 2.1\"\n        },\n        {\n            \"id\": 4,\n            \"text\": \"Option 2.2\"\n        }\n      ]\n    }\n  ],\n  \"pagination\": {\n    \"more\": true\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Default Values for AJAX-populated Select2\nDESCRIPTION: HTML markup showing how to set a pre-selected default value for a Select2 control that uses AJAX data.\nSOURCE: https://github.com/select2/select2/blob/develop/docs/pages/06.data-sources/02.ajax/docs.md#2025-04-22_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<select class=\"js-example-data-ajax form-control\">\n  <option value=\"3620194\" selected=\"selected\">select2/select2</option>\n</select>\n```\n\n----------------------------------------\n\nTITLE: Preventing Select2 Dropdown Closure on Selection in JavaScript\nDESCRIPTION: Illustrates how to prevent the Select2 dropdown from closing automatically when an item is selected, typically used for multi-select controls. This is done by setting the `closeOnSelect` option to `false`. Requires jQuery and the Select2 library.\nSOURCE: https://github.com/select2/select2/blob/develop/docs/pages/07.dropdown/docs.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n$('#mySelect2').select2({\n  closeOnSelect: false\n});\n```\n\n----------------------------------------\n\nTITLE: Create and Select Option if Not Exists in Select2\nDESCRIPTION: This JavaScript snippet checks if an option exists in the Select2 control and selects it; otherwise, it creates and selects a new option. This approach uses jQuery to manipulate DOM elements.\nSOURCE: https://github.com/select2/select2/blob/develop/docs/pages/12.programmatic-control/01.add-select-clear-items/docs.md#2025-04-22_snippet_1\n\nLANGUAGE: Javascript\nCODE:\n```\nif ($('#mySelect2').find(\"option[value='\" + data.id + \"']\").length) {\n    $('#mySelect2').val(data.id).trigger('change');\n} else {\n    var newOption = new Option(data.text, data.id, true, true);\n    $('#mySelect2').append(newOption).trigger('change');\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Select2 Event Data in jQuery Handlers\nDESCRIPTION: This snippet shows how to access event data when the `select2:select` event is triggered. The data is available through the `params.data` property of the event object, allowing developers to interact with additional selection information specified in the data source. The snippet outputs this data to the console. Requires jQuery and Select2.\nSOURCE: https://github.com/select2/select2/blob/develop/docs/pages/12.programmatic-control/04.events/docs.md#2025-04-22_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n$('#mySelect2').on('select2:select', function (e) {\n    var data = e.params.data;\n    console.log(data);\n});\n```\n\n----------------------------------------\n\nTITLE: Matching Grouped Options with Custom 'Starts With' Matcher in Select2\nDESCRIPTION: This code creates a custom matcher that matches search terms only if they appear at the beginning of the option text. It handles nested data by iterating through children and filtering them individually.\nSOURCE: https://github.com/select2/select2/blob/develop/docs/pages/11.searching/docs.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nfunction matchStart(params, data) {\n  // If there are no search terms, return all of the data\n  if ($.trim(params.term) === '') {\n    return data;\n  }\n\n  // Skip if there is no 'children' property\n  if (typeof data.children === 'undefined') {\n    return null;\n  }\n\n  // `data.children` contains the actual options that we are matching against\n  var filteredChildren = [];\n  $.each(data.children, function (idx, child) {\n    if (child.text.toUpperCase().indexOf(params.term.toUpperCase()) == 0) {\n      filteredChildren.push(child);\n    }\n  });\n\n  // If we matched any of the timezone group's children, then set the matched children on the group\n  // and return the group object\n  if (filteredChildren.length) {\n    var modifiedData = $.extend({}, data, true);\n    modifiedData.children = filteredChildren;\n\n    // You can return modified objects from here\n    // This includes matching the `children` how you want in nested data sets\n    return modifiedData;\n  }\n\n  // Return `null` if the term should not be displayed\n  return null;\n}\n\n$(\".js-example-matcher-start\").select2({\n  matcher: matchStart\n});\n```\n\n----------------------------------------\n\nTITLE: Processing Paginated Results in Select2 AJAX Responses\nDESCRIPTION: Example of how to process paginated results in the AJAX response, including computing the 'more' flag for pagination.\nSOURCE: https://github.com/select2/select2/blob/develop/docs/pages/06.data-sources/02.ajax/docs.md#2025-04-22_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nprocessResults: function (data, params) {\n    params.page = params.page || 1;\n\n    return {\n        results: data.results,\n        pagination: {\n            more: (params.page * 10) < data.count_filtered\n        }\n    };\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Select2 with RTL Support in JavaScript\nDESCRIPTION: This snippet demonstrates how to initialize Select2 with Right-to-Left (RTL) support. It uses the 'dir' option set to 'rtl' to enable RTL mode.\nSOURCE: https://github.com/select2/select2/blob/develop/docs/pages/13.i18n/docs.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n$(\".js-example-rtl\").select2({\n  dir: \"rtl\"\n});\n```\n\n----------------------------------------\n\nTITLE: Displaying Search Box Only for Large Result Sets in Select2\nDESCRIPTION: This snippet shows how to configure Select2 to display the search box only when the number of results exceeds a minimum threshold. This optimizes the interface for small datasets.\nSOURCE: https://github.com/select2/select2/blob/develop/docs/pages/11.searching/docs.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n$('select').select2({\n    minimumResultsForSearch: 20 // at least 20 results must be displayed\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing Select2 with Diacritics Support in JavaScript\nDESCRIPTION: This snippet shows how to initialize Select2 with default settings, which includes support for transliterating diacritic-modified letters. This makes it easier for users to filter results in international selects.\nSOURCE: https://github.com/select2/select2/blob/develop/docs/pages/13.i18n/docs.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n$(\".js-example-diacritics\").select2();\n```\n\n----------------------------------------\n\nTITLE: Select2 Data Format with Selected and Disabled Options in JSON\nDESCRIPTION: Shows how to include 'selected' and 'disabled' properties in the Select2 data format. Option 2 will be pre-selected, and Option 3 will be disabled.\nSOURCE: https://github.com/select2/select2/blob/develop/docs/pages/06.data-sources/01.formats/docs.md#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"results\": [\n    {\n      \"id\": 1,\n      \"text\": \"Option 1\"\n    },\n    {\n      \"id\": 2,\n      \"text\": \"Option 2\",\n      \"selected\": true\n    },\n    {\n      \"id\": 3,\n      \"text\": \"Option 3\",\n      \"disabled\": true\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Limiting Multiple Selections in Select2\nDESCRIPTION: Shows how to configure Select2 to limit the maximum number of selections in a multiple select box using the maximumSelectionLength option.\nSOURCE: https://github.com/select2/select2/blob/develop/docs/pages/08.selections/docs.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n$(\".js-example-basic-multiple-limit\").select2({\n  maximumSelectionLength: 2\n});\n```\n\n----------------------------------------\n\nTITLE: Extending Selected Options with Custom Attributes\nDESCRIPTION: Demonstrates how to add custom data attributes to selected options using templateSelection callback and retrieve them using jQuery's data method.\nSOURCE: https://github.com/select2/select2/blob/develop/docs/pages/12.programmatic-control/02.retrieving-selections/docs.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n$('#mySelect2').select2({\n  // ...\n  templateSelection: function (data, container) {\n    // Add custom attributes to the <option> tag for the selected option\n    $(data.element).attr('data-custom-attribute', data.customValue);\n    return data.text;\n  }\n});\n\n// Retrieve custom attribute value of the first selected element\n$('#mySelect2').find(':selected').data('custom-attribute');\n```\n\n----------------------------------------\n\nTITLE: Implementing Clearable Selections in Select2\nDESCRIPTION: Demonstrates how to add a clear button to Select2 selections using the allowClear option, allowing users to reset the selection to the placeholder value.\nSOURCE: https://github.com/select2/select2/blob/develop/docs/pages/08.selections/docs.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n$('select').select2({\n  placeholder: 'This is my placeholder',\n  allowClear: true\n});\n```\n\n----------------------------------------\n\nTITLE: Customizing Tag Creation in Select2 Using createTag Callback (JavaScript)\nDESCRIPTION: This snippet customizes new tag creation by supplying a createTag callback in Select2 initialization. It checks the trimmed search term: if empty, no tag is created; otherwise, a tag with properties 'id', 'text', and 'newTag' is returned. Dependencies: jQuery and Select2. The callback allows injection of custom properties or validation logic into new tags as they are generated from user input.\nSOURCE: https://github.com/select2/select2/blob/develop/docs/pages/09.tagging/docs.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n$(\\'select\\').select2({\\n  createTag: function (params) {\\n    var term = $.trim(params.term);\\n\\n    if (term === '') {\\n      return null;\\n    }\\n\\n    return {\\n      id: term,\\n      text: term,\\n      newTag: true // add additional parameters\\n    }\\n  }\\n});\\n\n```\n\n----------------------------------------\n\nTITLE: Enabling Automatic Selection on Close in Select2 with JavaScript\nDESCRIPTION: Shows how to configure Select2 to automatically select the currently highlighted result when the dropdown is closed. This is achieved by setting the `selectOnClose` option to `true` during initialization. Requires jQuery and the Select2 library.\nSOURCE: https://github.com/select2/select2/blob/develop/docs/pages/07.dropdown/docs.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n$('#mySelect2').select2({\n  selectOnClose: true\n});\n```\n\n----------------------------------------\n\nTITLE: Clearing Selections in Select2 Control\nDESCRIPTION: This snippet provides a method to clear all selected options in a Select2 control by setting its value to null using jQuery, followed by triggering a change event to update the Select2 state correctly.\nSOURCE: https://github.com/select2/select2/blob/develop/docs/pages/12.programmatic-control/01.add-select-clear-items/docs.md#2025-04-22_snippet_4\n\nLANGUAGE: Javascript\nCODE:\n```\n$('#mySelect2').val(null).trigger('change');\n```\n\n----------------------------------------\n\nTITLE: Restricting Tag Creation Logic in Select2 Using createTag Callback (JavaScript)\nDESCRIPTION: This example further customizes Select2 by limiting tag creation to only those terms containing an '@' character. Using a createTag callback, it returns null (disallowing the new tag) if the user input lacks '@', enforcing a custom rule. Otherwise, it returns the tag object. Requires jQuery and Select2. Useful for implementing validation logic on dynamically created tags.\nSOURCE: https://github.com/select2/select2/blob/develop/docs/pages/09.tagging/docs.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n$(\\'select\\').select2({\\n  createTag: function (params) {\\n    // Don\\'t offset to create a tag if there is no @ symbol\\n    if (params.term.indexOf('@') === -1) {\\n      // Return null to disable tag creation\\n      return null;\\n    }\\n\\n    return {\\n      id: params.term,\\n      text: params.term\\n    }\\n  }\\n});\\n\n```\n\n----------------------------------------\n\nTITLE: Logging Select2 Event Data with jQuery\nDESCRIPTION: An example of setting up multiple event listeners on a Select2 component to log event data using jQuery. It logs various events such as `select2:open`, `select2:close`, `select2:select`, and `select2:unselect` and formats the output using JSON methods. It demonstrates a logging function that outputs event details to the DOM. Requires jQuery and Select2.\nSOURCE: https://github.com/select2/select2/blob/develop/docs/pages/12.programmatic-control/04.events/docs.md#2025-04-22_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar $eventLog = $(\".js-event-log\");\nvar $eventSelect = $(\".js-example-events\");\n\n$eventSelect.select2();\n\n$eventSelect.on(\"select2:open\", function (e) { log(\"select2:open\", e); });\n$eventSelect.on(\"select2:close\", function (e) { log(\"select2:close\", e); });\n$eventSelect.on(\"select2:select\", function (e) { log(\"select2:select\", e); });\n$eventSelect.on(\"select2:unselect\", function (e) { log(\"select2:unselect\", e); });\n\n$eventSelect.on(\"change\", function (e) { log(\"change\"); });\n\nfunction log (name, evt) {\n  if (!evt) {\n    var args = \"{}\";\n  } else {\n    var args = JSON.stringify(evt.params, function (key, value) {\n      if (value && value.nodeName) return \"[DOM node]\";\n      if (value instanceof $.Event) return \"[$.Event]\";\n      return value;\n    });\n  }\n  var $e = $(\"<li>\" + name + \" -\\u003e \" + args + \"</li>\");\n  $eventLog.append($e);\n  $e.animate({ opacity: 1 }, 10000, 'linear', function () {\n    $e.animate({ opacity: 0 }, 2000, 'linear', function () {\n      $e.remove();\n    });\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Rate-limiting for Select2 AJAX Requests\nDESCRIPTION: Shows how to add a delay to AJAX requests in Select2 to implement rate-limiting.\nSOURCE: https://github.com/select2/select2/blob/develop/docs/pages/06.data-sources/02.ajax/docs.md#2025-04-22_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n$('#mySelect2').select2({\n  ajax: {\n    delay: 250 // wait 250 milliseconds before triggering the request\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Select2 with nested AJAX options using data-* attributes in HTML\nDESCRIPTION: This snippet demonstrates how to set nested AJAX options for Select2 using data-* attributes. It uses double dashes to separate nested levels.\nSOURCE: https://github.com/select2/select2/blob/develop/docs/pages/03.configuration/03.data-attributes/docs.md#2025-04-22_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<select data-ajax--url=\"http://example.org/api/test\" data-ajax--cache=\"true\">\n    ...\n</select>\n```\n\n----------------------------------------\n\nTITLE: Using Dynamic URLs in Select2 AJAX Requests\nDESCRIPTION: Demonstrates how to use a callback function to generate dynamic URLs for AJAX requests in Select2.\nSOURCE: https://github.com/select2/select2/blob/develop/docs/pages/06.data-sources/02.ajax/docs.md#2025-04-22_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\n$('#mySelect2').select2({\n  ajax: {\n    url: function (params) {\n      return '/some/url/' + params.term;\n    }\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Defining a Multi-Select HTML Element for Select2\nDESCRIPTION: This HTML snippet shows a `<select>` element configured for multiple selections, intended for use with the Select2 plugin. It includes the `multiple=\"multiple\"` attribute, several `<option>` elements, and uses the class `js-example-basic-multiple` for JavaScript targeting. The `name` attribute ends with `[]` (`states[]`), a common convention for submitting multiple values.\nSOURCE: https://github.com/select2/select2/blob/develop/docs/pages/01.getting-started/02.basic-usage/docs.md#2025-04-22_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<select class=\"js-example-basic-multiple\" name=\"states[]\" multiple=\"multiple\">\n  <option value=\"AL\">Alabama</option>\n    ...\n  <option value=\"WY\">Wyoming</option>\n</select>\n```\n\n----------------------------------------\n\nTITLE: Transforming Data for Select2 ID Property in JavaScript\nDESCRIPTION: JavaScript code to map a custom identifier (e.g., 'pk') to the required 'id' property for Select2. This is useful when working with data that doesn't match Select2's expected format.\nSOURCE: https://github.com/select2/select2/blob/develop/docs/pages/06.data-sources/01.formats/docs.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nvar data = $.map(yourArrayData, function (obj) {\n  obj.id = obj.id || obj.pk; // replace pk with your identifier\n\n  return obj;\n});\n```\n\n----------------------------------------\n\nTITLE: Basic Select2 Data Format in JSON\nDESCRIPTION: Demonstrates the basic JSON structure required by Select2 for rendering dropdown options. Each option must have an 'id' and 'text' property. The response can also include pagination data for infinite scrolling.\nSOURCE: https://github.com/select2/select2/blob/develop/docs/pages/06.data-sources/01.formats/docs.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"results\": [\n    {\n      \"id\": 1,\n      \"text\": \"Option 1\"\n    },\n    {\n      \"id\": 2,\n      \"text\": \"Option 2\"\n    }\n  ],\n  \"pagination\": {\n    \"more\": true\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling Search in Multi-Select Dropdown\nDESCRIPTION: This snippet demonstrates how to disable search in a multi-select Select2 dropdown by disabling the search field whenever the dropdown is opened or closed. This uses event handlers to modify the search field's properties.\nSOURCE: https://github.com/select2/select2/blob/develop/docs/pages/11.searching/docs.md#2025-04-22_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n$('#js-example-basic-hide-search-multi').select2();\n\n$('#js-example-basic-hide-search-multi').on('select2:opening select2:closing', function( event ) {\n    var $searchfield = $(this).parent().find('.select2-search__field');\n    $searchfield.prop('disabled', true);\n});\n```\n\n----------------------------------------\n\nTITLE: Customizing Transport Method for Select2 AJAX Requests\nDESCRIPTION: Example of how to override the default transport method used for AJAX requests in Select2.\nSOURCE: https://github.com/select2/select2/blob/develop/docs/pages/06.data-sources/02.ajax/docs.md#2025-04-22_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\n$('#mySelect2').select2({\n  ajax: {\n    transport: function (params, success, failure) {\n      var request = new AjaxRequest(params.url, params);\n      request.on('success', success);\n      request.on('failure', failure);\n    }\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Generating Text Property for Select2 in JavaScript\nDESCRIPTION: JavaScript code to map a custom text property (e.g., 'name') to the required 'text' property for Select2. This helps in adapting existing data structures to work with Select2.\nSOURCE: https://github.com/select2/select2/blob/develop/docs/pages/06.data-sources/01.formats/docs.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nvar data = $.map(yourArrayData, function (obj) {\n  obj.text = obj.text || obj.name; // replace name with the property used for the text\n\n  return obj;\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Minimum Search Term Length in Select2\nDESCRIPTION: This snippet shows how to configure Select2 to start filtering results only when the search term reaches a minimum length. This is useful for improving performance with large datasets.\nSOURCE: https://github.com/select2/select2/blob/develop/docs/pages/11.searching/docs.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n$('select').select2({\n  minimumInputLength: 3 // only start searching when the user has input 3 or more characters\n});\n```\n\n----------------------------------------\n\nTITLE: Disabling Select2 Control with JavaScript\nDESCRIPTION: This JavaScript code snippet demonstrates how to initialize Select2 on disabled <select> elements and programmatically enable or disable them. It uses jQuery to attach click event handlers to buttons that toggle the disabled state of Select2 controls.\nSOURCE: https://github.com/select2/select2/blob/develop/docs/pages/04.appearance/docs.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n\n$(\".js-example-disabled\").select2();\n$(\".js-example-disabled-multi\").select2();\n\n$(\".js-programmatic-enable\").on(\"click\", function () {\n  $(\".js-example-disabled\").prop(\"disabled\", false);\n  $(\".js-example-disabled-multi\").prop(\"disabled\", false);\n});\n\n$(\".js-programmatic-disable\").on(\"click\", function () {\n  $(\".js-example-disabled\").prop(\"disabled\", true);\n  $(\".js-example-disabled-multi\").prop(\"disabled\", true);\n});\n\n```\n\n----------------------------------------\n\nTITLE: Setting Maximum Search Term Length in Select2\nDESCRIPTION: This code demonstrates how to limit the maximum length of search terms in Select2. It prevents users from entering search terms longer than the specified character limit.\nSOURCE: https://github.com/select2/select2/blob/develop/docs/pages/11.searching/docs.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n$('select').select2({\n    maximumInputLength: 20 // only allow terms up to 20 characters long\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing the SelectionAdapter Interface in Select2\nDESCRIPTION: The interface required for creating custom selection adapters, which control the display of selected options and other UI elements like search boxes.\nSOURCE: https://github.com/select2/select2/blob/develop/docs/pages/14.advanced/01.adapters-and-decorators/docs.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// Update the selected data.\n//\n// @param data An array of data objects that have been generated by the data\n//   adapter. If no objects should be selected, an empty array will be passed.\n//\n// Note: An array will always be passed into this method, even if Select2 is\n// attached to a source which only accepts a single selection.\nSelectionAdapter.update = function (data) { };\n```\n\n----------------------------------------\n\nTITLE: Opening Dropdown with Select2 in JavaScript\nDESCRIPTION: This snippet opens the Select2 dropdown menu, allowing users to view and select options. Ensure that the Select2 plugin is initialized on the target element. No explicit output; the dropdown will display its options.\nSOURCE: https://github.com/select2/select2/blob/develop/docs/pages/12.programmatic-control/03.methods/docs.md#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n$('#mySelect2').select2('open');\n```\n\n----------------------------------------\n\nTITLE: Defining a Basic Single Select HTML Element for Select2\nDESCRIPTION: This HTML snippet shows a standard `<select>` element intended to be enhanced by the Select2 plugin. It includes several `<option>` elements and uses the class `js-example-basic-single` as a selector for JavaScript initialization. The `name` attribute specifies how the selected value will be submitted.\nSOURCE: https://github.com/select2/select2/blob/develop/docs/pages/01.getting-started/02.basic-usage/docs.md#2025-04-22_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<select class=\"js-example-basic-single\" name=\"state\">\n  <option value=\"AL\">Alabama</option>\n    ...\n  <option value=\"WY\">Wyoming</option>\n</select>\n```\n\n----------------------------------------\n\nTITLE: Internal JSON Representation for HTML <option>\nDESCRIPTION: Defines the standard JSON object structure that Select2 uses internally to represent an HTML `<option>` element. The `id` is derived from the option's `value` attribute or its text content if `value` is missing. The `text` is derived from the `label` attribute or the option's text content. It also includes a reference to the original DOM element.\nSOURCE: https://github.com/select2/select2/blob/develop/docs/pages/05.options/docs.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"id\": \"value attribute\" || \"option text\",\n  \"text\": \"label attribute\" || \"option text\",\n  \"element\": HTMLOptionElement\n}\n```\n\n----------------------------------------\n\nTITLE: Closing Dropdown with Select2 in JavaScript\nDESCRIPTION: This snippet closes the Select2 dropdown menu, hiding the options from view. Ensure that the Select2 plugin is initialized. The dropdown will not display its options upon invocation.\nSOURCE: https://github.com/select2/select2/blob/develop/docs/pages/12.programmatic-control/03.methods/docs.md#2025-04-22_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n$('#mySelect2').select2('close');\n```\n\n----------------------------------------\n\nTITLE: Including Select2 After Bower Installation - HTML\nDESCRIPTION: Describes how to reference locally installed Select2 CSS and JavaScript files after fetching them with Bower. The <link> and <script> tags target the distribution files in the vendor/select2/dist directory. Place these lines in the <head> section to ensure Select2 loads properly.\nSOURCE: https://github.com/select2/select2/blob/develop/docs/pages/01.getting-started/01.installation/docs.md#2025-04-22_snippet_2\n\nLANGUAGE: HTML\nCODE:\n```\n<link href=\\\"vendor/select2/dist/css/select2.min.css\\\" rel=\\\"stylesheet\\\" />\\n<script src=\\\"vendor/select2/dist/js/select2.min.js\\\"></script>\n```\n\n----------------------------------------\n\nTITLE: Unbind Events After Destroying Select2\nDESCRIPTION: Illustrates unbinding custom events after the destruction of a Select2 element to prevent memory leaks. After destroying, unbind the manually attached events using jQuery's .off method.\nSOURCE: https://github.com/select2/select2/blob/develop/docs/pages/12.programmatic-control/03.methods/docs.md#2025-04-22_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Set up a Select2 control\n$('#example').select2();\n\n// Bind an event\n$('#example').on('select2:select', function (e) { \n    console.log('select event');\n});\n\n// Destroy Select2\n$('#example').select2('destroy');\n\n// Unbind the event\n$('#example').off('select2:select');\n```\n\n----------------------------------------\n\nTITLE: Initializing Select2 on an Element with Disabled Options (JavaScript/jQuery)\nDESCRIPTION: Initializes the Select2 plugin on an HTML `<select>` element identified by the class `.js-example-disabled-results`. This jQuery code finds the specified select element and applies the Select2 functionality, automatically handling any options marked as disabled in the HTML.\nSOURCE: https://github.com/select2/select2/blob/develop/docs/pages/05.options/docs.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nvar $disabledResults = $(\".js-example-disabled-results\");\n$disabledResults.select2();\n```\n\n----------------------------------------\n\nTITLE: Check Select2 Initialization in JavaScript\nDESCRIPTION: This snippet checks if a DOM element has been initialized with Select2 by looking for the 'select2-hidden-accessible' class. Returns a boolean indicating initialization status.\nSOURCE: https://github.com/select2/select2/blob/develop/docs/pages/12.programmatic-control/03.methods/docs.md#2025-04-22_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nif ($('#mySelect2').hasClass(\"select2-hidden-accessible\")) {\n    // Select2 has been initialized\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Select2 with camelCase options using data-* attributes in HTML\nDESCRIPTION: This snippet shows how to set camelCase options for Select2 using data-* attributes. It demonstrates setting tags, placeholder, and allowClear options.\nSOURCE: https://github.com/select2/select2/blob/develop/docs/pages/03.configuration/03.data-attributes/docs.md#2025-04-22_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<select data-tags=\"true\" data-placeholder=\"Select an option\" data-allow-clear=\"true\">\n    ...\n</select>\n```\n\n----------------------------------------\n\nTITLE: Defining a Disabled Option in HTML for Select2\nDESCRIPTION: Shows how to disable a specific `<option>` within an HTML `<select>` element using the `disabled=\"disabled\"` attribute. Select2 recognizes this attribute and prevents the user from selecting the disabled option in the dropdown.\nSOURCE: https://github.com/select2/select2/blob/develop/docs/pages/05.options/docs.md#2025-04-22_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<select class=\"js-example-disabled-results\">\n  <option value=\"one\">First</option>\n  <option value=\"two\" disabled=\"disabled\">Second (disabled)</option>\n  <option value=\"three\">Third</option>\n</select>\n```\n\n----------------------------------------\n\nTITLE: Equivalent JavaScript initialization for Select2 with camelCase options\nDESCRIPTION: This snippet demonstrates the JavaScript equivalent of setting Select2 options that were shown using data-* attributes in the previous HTML example.\nSOURCE: https://github.com/select2/select2/blob/develop/docs/pages/03.configuration/03.data-attributes/docs.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n$(\"select\").select2({\n  tags: \"true\",\n  placeholder: \"Select an option\",\n  allowClear: true\n});\n```\n\n----------------------------------------\n\nTITLE: Replacing `select2(\"val\")` with `.val()` in Select2/jQuery\nDESCRIPTION: Shows the migration path for setting the value of a Select2 element. The older `.select2(\"val\", [value])` method is replaced by the standard jQuery `.val([value])` method in newer versions. This applies to Select2 instances initialized on HTML elements.\nSOURCE: https://github.com/select2/select2/blob/develop/CHANGELOG.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n.select2(\"val\", [value]) -> .val([value])\n```\n\n----------------------------------------\n\nTITLE: Implementing the Basic Adapter Interface in Select2\nDESCRIPTION: The core interface that all custom adapters must implement to render DOM elements, bind events, position elements, and handle cleanup when destroyed.\nSOURCE: https://github.com/select2/select2/blob/develop/docs/pages/14.advanced/01.adapters-and-decorators/docs.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// The basic HTML that should be rendered by Select2. A jQuery or DOM element\n// should be returned, which will automatically be placed by Select2 within the\n// DOM.\n//\n// @returns A jQuery or DOM element that contains any elements that must be\n//   rendered by Select2.\nAdapter.render = function () {\n  return $jq;\n};\n\n// Bind to any Select2 or DOM events.\n//\n// @param container The Select2 object that is bound to the jQuery element.  You\n//   can listen to Select2 events with `on` and trigger Select2 events using the\n//   `trigger` method.\n// @param $container The jQuery DOM node that all default adapters will be\n//   rendered within.\nAdapter.bind = function (container, $container) { };\n\n// Position the DOM element within the Select2 DOM container, or in another\n// place. This allows adapters to be located outside of the Select2 DOM,\n// such as at the end of the document or in a specific place within the Select2\n// DOM node.\n//\n// Note: This method is not called on data adapters.\n//\n// @param $rendered The rendered DOM element that was returned from the call to\n//   `render`. This may have been modified by Select2, but the root element\n//   will always be the same.\n// @param $defaultContainer The default container that Select2 will typically\n//   place the rendered DOM element within. For most adapters, this is the\n//   Select2 DOM element.\nAdapter.position = function ($rendered, $defaultContainer) { };\n\n// Destroy any events or DOM elements that have been created.\n// This is called when `select2(\"destroy\")` is called on an element.\nAdapter.destroy = function () { };\n```\n\n----------------------------------------\n\nTITLE: Defining Option Groups in HTML for Select2\nDESCRIPTION: Demonstrates the standard HTML markup for creating grouped options within a `<select>` element using the `<optgroup>` tag. Select2 automatically detects this structure and renders the options under the specified group label in the dropdown.\nSOURCE: https://github.com/select2/select2/blob/develop/docs/pages/05.options/docs.md#2025-04-22_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<select>\n  <optgroup label=\"Group Name\">\n    <option>Nested option</option>\n  </optgroup>\n</select>\n```\n\n----------------------------------------\n\nTITLE: Destroy Select2 Control in JavaScript\nDESCRIPTION: This method reverts the Select2 enhanced element back to a standard HTML select control. Only the events bound by Select2 are automatically unbound. Any additional events need manual unbinding.\nSOURCE: https://github.com/select2/select2/blob/develop/docs/pages/12.programmatic-control/03.methods/docs.md#2025-04-22_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\n$('#mySelect2').select2('destroy');\n```\n\n----------------------------------------\n\nTITLE: Including Select2 Manually - HTML\nDESCRIPTION: Shows how to include Select2 when manually downloading the compiled distribution files from GitHub. Adjust the href and src attributes to point to the local file paths where the Select2 assets are stored. These lines should be placed in the page <head> to make Select2 features available.\nSOURCE: https://github.com/select2/select2/blob/develop/docs/pages/01.getting-started/01.installation/docs.md#2025-04-22_snippet_3\n\nLANGUAGE: HTML\nCODE:\n```\n<link href=\\\"path/to/select2.min.css\\\" rel=\\\"stylesheet\\\" />\\n<script src=\\\"path/to/select2.min.js\\\"></script>\n```\n\n----------------------------------------\n\nTITLE: Accessing AMD Methods in Select2 4.0 (JavaScript)\nDESCRIPTION: Demonstrates how to use the AMD methods provided by Select2 4.0 for defining and requiring modules. These methods are primarily used for translations and accessing custom Select2 modules.\nSOURCE: https://github.com/select2/select2/blob/develop/docs/pages/15.upgrading/01.new-in-40/docs.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\njQuery.fn.select2.amd.define()/require()\n```\n\n----------------------------------------\n\nTITLE: HTML Option Element Usage in Select2\nDESCRIPTION: Demonstrates the basic HTML option element format that Select2 can handle in markup.\nSOURCE: https://github.com/select2/select2/blob/develop/docs/pages/06.data-sources/chapter.md#2025-04-22_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<option>\n```\n\n----------------------------------------\n\nTITLE: Custom Matcher Function in Select2 Using Compatibility Wrapper\nDESCRIPTION: Illustrates how to wrap legacy 'matcher' functions for compatibility with Select2 using the full build. The example outlines using a custom function 'matchStart', and adapting it with 'select2/compat/matcher'.\nSOURCE: https://github.com/select2/select2/blob/develop/docs/pages/15.upgrading/02.migrating-from-35/docs.md#2025-04-22_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nfunction matchStart (term, text) {\n  if (text.toUpperCase().indexOf(term.toUpperCase()) == 0) {\n    return true;\n  }\n\n  return false;\n}\n\n$.fn.select2.amd.require(['select2/compat/matcher'], function (oldMatcher) {\n  $(\".js-example-matcher-compat\").select2({\n    matcher: oldMatcher(matchStart)\n  })\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing the DataAdapter Interface in Select2\nDESCRIPTION: The interface required for creating custom data adapters, which control how data is fetched, filtered, and presented to the user as selectable options.\nSOURCE: https://github.com/select2/select2/blob/develop/docs/pages/14.advanced/01.adapters-and-decorators/docs.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// Get the currently selected options. This is called when trying to get the\n// initial selection for Select2, as well as when Select2 needs to determine\n// what options within the results are selected.\n//\n// @param callback A function that should be called when the current selection\n//   has been retrieved. The first parameter to the function should be an array\n//   of data objects.\nDataAdapter.current = function (callback) {\n  callback(currentData);\n}\n\n// Get a set of options that are filtered based on the parameters that have\n// been passed on in.\n//\n// @param params An object containing any number of parameters that the query\n//   could be affected by. Only the core parameters will be documented.\n// @param params.term A user-supplied term. This is typically the value of the\n//   search box, if one exists, but can also be an empty string or null value.\n// @param params.page The specific page that should be loaded. This is typically\n//   provided when working with remote data sets, which rely on pagination to\n//   determine what objects should be displayed.\n// @param callback The function that should be called with the queried results.\nDataAdapter.query = function (params, callback) {\n  callback(queryiedData);\n}\n```\n\n----------------------------------------\n\nTITLE: Overriding Bootstrap Modal Focus Behavior for Select2\nDESCRIPTION: An alternative solution to the Bootstrap modal issue that globally overrides Bootstrap's focus enforcement behavior. This should be done before initializing any modals to allow Select2 dropdowns to function properly within modals.\nSOURCE: https://github.com/select2/select2/blob/develop/docs/pages/02.troubleshooting/02.common-problems/docs.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// Do this before you initialize any of your modals\n$.fn.modal.Constructor.prototype.enforceFocus = function() {};\n```\n\n----------------------------------------\n\nTITLE: Upgrading Select2 tag configuration from old format to new format\nDESCRIPTION: Shows how to convert legacy Select2 tag configuration using data-select2-tags to the new format using data-data and data-tags attributes. The new format utilizes the array data option and requires explicit tag enablement.\nSOURCE: https://github.com/select2/select2/blob/develop/docs/pages/15.upgrading/02.migrating-from-35/docs.md#2025-04-22_snippet_10\n\nLANGUAGE: html\nCODE:\n```\n<select data-select2-tags='[{\"id\": \"1\", \"text\": \"One\"}, {\"id\": \"2\", \"text\": \"Two\"}]'></select>\n```\n\nLANGUAGE: html\nCODE:\n```\n<select data-data='[{\"id\": \"1\", \"text\": \"One\"}, {\"id\": \"2\", \"text\": \"Two\"}]' data-tags=\"true\"></select>\n```\n\n----------------------------------------\n\nTITLE: Configuring ResultsAdapter in Select2 (JavaScript)\nDESCRIPTION: Shows how to override the default ResultsAdapter by assigning a custom adapter to the resultsAdapter configuration option.\nSOURCE: https://github.com/select2/select2/blob/develop/docs/pages/14.advanced/02.default-adapters/05.results/docs.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nresultsAdapter: customAdapter\n```\n\n----------------------------------------\n\nTITLE: Replacing .select2(\"val\") method with jQuery's .val() and .trigger()\nDESCRIPTION: Demonstrates how to replace the deprecated .select2(\"val\") method with direct jQuery methods. Users should now set the value directly on the underlying select element and manually trigger the change event.\nSOURCE: https://github.com/select2/select2/blob/develop/docs/pages/15.upgrading/02.migrating-from-35/docs.md#2025-04-22_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\n$(\"select\").val(\"1\").trigger(\"change\"); // instead of $(\"select\").select2(\"val\", \"1\");\n```\n\n----------------------------------------\n\nTITLE: Importing Select2 Dropdown Adapter\nDESCRIPTION: This code snippet shows how to import the main Select2 dropdown adapter using AMD modules. This adapter defines the core functionality of the dropdown container.\nSOURCE: https://github.com/select2/select2/blob/develop/docs/pages/14.advanced/02.default-adapters/06.dropdown/docs.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nselect2/dropdown\n```\n\n----------------------------------------\n\nTITLE: Customizing Tag Insertion with `insertTag` (Select2 4.0, JavaScript)\nDESCRIPTION: Shows the `insertTag` function available in Select2 4.0 configuration options, which replaces the deprecated `createSearchChoicePosition`. This function allows customization of how a newly created tag object is added to the results data array. The example demonstrates the default behavior: appending the new `tag` to the end of the `data` array using `data.push(tag)`.\nSOURCE: https://github.com/select2/select2/blob/develop/docs/pages/15.upgrading/02.migrating-from-35/docs.md#2025-04-22_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\ninsertTag: function (data, tag) {\n  // Insert the tag at the end of the results\n  data.push(tag);\n}\n```\n\n----------------------------------------\n\nTITLE: Replacing .select2(\"enable\") method with jQuery's .prop() method\nDESCRIPTION: Shows how to replace the deprecated .select2(\"enable\") method with jQuery's .prop() method to control the disabled state of the select element. Select2 now respects the disabled property of the underlying element.\nSOURCE: https://github.com/select2/select2/blob/develop/docs/pages/15.upgrading/02.migrating-from-35/docs.md#2025-04-22_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\n$(\"select\").prop(\"disabled\", true); // instead of $(\"select\").enable(false);\n```\n\n----------------------------------------\n\nTITLE: Importing DropdownSearch Decorator for Select2\nDESCRIPTION: This decorator implements the search box displayed at the top of the dropdown, enabling users to filter options.\nSOURCE: https://github.com/select2/select2/blob/develop/docs/pages/14.advanced/02.default-adapters/06.dropdown/docs.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nselect2/dropdown/search\n```\n\n----------------------------------------\n\nTITLE: Importing AttachBody Decorator for Select2 Dropdown\nDESCRIPTION: This decorator implements the standard dropdownParent method for attaching the dropdown to a specific element in the DOM.\nSOURCE: https://github.com/select2/select2/blob/develop/docs/pages/14.advanced/02.default-adapters/06.dropdown/docs.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nselect2/dropdown/attachBody\n```\n\n----------------------------------------\n\nTITLE: Importing MinimumResultsForSearch Decorator for Select2\nDESCRIPTION: This decorator implements the minimumResultsForSearch configuration option, which controls when the search box is displayed based on the number of results.\nSOURCE: https://github.com/select2/select2/blob/develop/docs/pages/14.advanced/02.default-adapters/06.dropdown/docs.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nselect2/dropdown/minimumResultsForSearch\n```\n\n----------------------------------------\n\nTITLE: Applying Themes to Select2 with JavaScript\nDESCRIPTION: This JavaScript snippet demonstrates applying a custom theme to Select2 elements. It initializes Select2 elements with the 'classic' theme to achieve a traditional appearance.\nSOURCE: https://github.com/select2/select2/blob/develop/docs/pages/04.appearance/docs.md#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n\n$(\".js-example-theme-single\").select2({\n  theme: \"classic\"\n});\n\n$(\".js-example-theme-multiple\").select2({\n  theme: \"classic\"\n});\n\n```\n\n----------------------------------------\n\nTITLE: Importing CloseOnSelect Decorator for Select2 Dropdown\nDESCRIPTION: This decorator implements the closeOnSelect configuration option, which determines whether the dropdown should close after a selection is made.\nSOURCE: https://github.com/select2/select2/blob/develop/docs/pages/14.advanced/02.default-adapters/06.dropdown/docs.md#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nselect2/dropdown/closeOnSelect\n```\n\n----------------------------------------\n\nTITLE: AllowClear Module Reference\nDESCRIPTION: AMD module path for Select2's clearable selection functionality.\nSOURCE: https://github.com/select2/select2/blob/develop/docs/pages/14.advanced/02.default-adapters/01.selection/docs.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nselect2/selection/allowClear\n```\n\n----------------------------------------\n\nTITLE: Importing AttachContainer Decorator for Select2 Dropdown\nDESCRIPTION: This decorator allows Select2 to place the dropdown directly after the selection container in the DOM. It's only included in full builds of Select2.\nSOURCE: https://github.com/select2/select2/blob/develop/docs/pages/14.advanced/02.default-adapters/06.dropdown/docs.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nselect2/dropdown/attachContainer\n```\n\n----------------------------------------\n\nTITLE: Limiting Change Event Scope in Select2 with jQuery\nDESCRIPTION: This code snippet illustrates how to limit the scope of the `change` event to notify only Select2. By using the `.select2` event namespace, it ensures that only Select2 components process the change, avoiding interference from other components or custom handlers listening to the `change` event. Requires jQuery and Select2.\nSOURCE: https://github.com/select2/select2/blob/develop/docs/pages/12.programmatic-control/04.events/docs.md#2025-04-22_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\n$('#mySelect2').val('US'); // Change the value or make some change to the internal state\n$('#mySelect2').trigger('change.select2'); // Notify only Select2 of changes\n```\n\n----------------------------------------\n\nTITLE: EventRelay Module Reference\nDESCRIPTION: AMD module path for Select2's event relay system that handles internal state changes and external event communication.\nSOURCE: https://github.com/select2/select2/blob/develop/docs/pages/14.advanced/02.default-adapters/01.selection/docs.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nselect2/selection/eventRelay\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Placeholder in Select2\nDESCRIPTION: Demonstrates the new capability of the 'placeholder' option in Select2 to accept an object, linking it to a specified option in the <select> through an 'id'.\nSOURCE: https://github.com/select2/select2/blob/develop/docs/pages/15.upgrading/02.migrating-from-35/docs.md#2025-04-22_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\n$(\"select\").select2({\n    placeholder: {\n        id: \"-1\",\n        placeholder: \"Select an option\"\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Removed Select2 Method: `.select2(\"data\", data)` (jQuery)\nDESCRIPTION: Notes the removal of the `.select2(\"data\", data)` method for setting data. The recommended approach is to dynamically create the necessary `<option>` tags within the `<select>` element and then use `.val()` to select the desired options.\nSOURCE: https://github.com/select2/select2/blob/develop/CHANGELOG.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n.select2(\"data\", data)\n```\n\n----------------------------------------\n\nTITLE: Specifying AMD Module for ArrayAdapter in Select2\nDESCRIPTION: This snippet shows the AMD module path for the ArrayAdapter in Select2. It is used to load the adapter when working with array-based data sources.\nSOURCE: https://github.com/select2/select2/blob/develop/docs/pages/14.advanced/02.default-adapters/02.array/docs.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n\"select2/data/array\"\n```\n\n----------------------------------------\n\nTITLE: Removed Select2 Method: `.select2(\"readonly\")` (jQuery)\nDESCRIPTION: Shows that the `.select2(\"readonly\")` method has been removed. Since standard HTML `<select>` elements cannot be made truly read-only, the suggested alternative is to disable the element using `.prop(\"disabled\", true)`.\nSOURCE: https://github.com/select2/select2/blob/develop/CHANGELOG.md#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n.select2(\"readonly\")\n```\n\n----------------------------------------\n\nTITLE: Defining HTML Select with Multiple Preselected Options\nDESCRIPTION: Demonstrates how to transition from a hidden input field to a <select> element with multiple preselected options in Select2 4.0. Introduces the use of <option> tags, each with the 'selected' attribute to reflect pre-selections.\nSOURCE: https://github.com/select2/select2/blob/develop/docs/pages/15.upgrading/02.migrating-from-35/docs.md#2025-04-22_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<input type=\"hidden\" name=\"select-boxes\" value=\"1,2,4,6\" />\n```\n\nLANGUAGE: HTML\nCODE:\n```\n<select name=\"select-boxes\" multiple=\"multiple\">\n    <option value=\"1\" selected=\"selected\">Select2</option>\n    <option value=\"2\" selected=\"selected\">Chosen</option>\n    <option value=\"4\" selected=\"selected\">selectize.js</option>\n    <option value=\"6\" selected=\"selected\">typeahead.js</option>\n</select>\n```\n\n----------------------------------------\n\nTITLE: Configuring Select2 placeholder using data-* attribute in HTML\nDESCRIPTION: This snippet demonstrates how to set the placeholder for a Select2 dropdown using the data-placeholder attribute. It overrides any options set during initialization or defaults.\nSOURCE: https://github.com/select2/select2/blob/develop/docs/pages/03.configuration/03.data-attributes/docs.md#2025-04-22_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<select data-placeholder=\"Select a state\">\n  <option value=\"AL\">Alabama</option>\n    ...\n  <option value=\"WY\">Wyoming</option>\n</select>\n```\n\n----------------------------------------\n\nTITLE: Removed Select2 Method: `.select2(\"onSortStart\")` (jQuery)\nDESCRIPTION: Highlights the removal of the `.select2(\"onSortStart\")` method. Functionality related to sort start events should now be implemented using a custom selection adapter as recommended in the Select2 documentation.\nSOURCE: https://github.com/select2/select2/blob/develop/CHANGELOG.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n.select2(\"onSortStart\")\n```\n\n----------------------------------------\n\nTITLE: Implementing `current` in Custom Data Adapter (Select2 4.0, JavaScript)\nDESCRIPTION: Demonstrates the implementation of the `current` method within a custom Select2 data adapter in version 4.0, replacing the deprecated `initSelection`. This method is called whenever Select2 needs the list of currently selected items, ensuring up-to-date display. It retrieves the element's value(s), formats them into an array of data objects (even for single selections), and passes them to the callback. Requires jQuery and Select2 AMD modules (`select2/data/array`, `select2/utils`).\nSOURCE: https://github.com/select2/select2/blob/develop/docs/pages/15.upgrading/02.migrating-from-35/docs.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n$.fn.select2.amd.require([\n    'select2/data/array',\n    'select2/utils'\n], function (ArrayData, Utils) {\n    function CustomData ($element, options) {\n        CustomData.__super__.constructor.call(this, $element, options);\n    }\n\n    Utils.Extend(CustomData, ArrayData);\n\n    CustomData.prototype.current = function (callback) {\n        var data = [];\n        var currentVal = this.$element.val();\n\n        if (!this.$element.prop('multiple')) {\n            currentVal = [currentVal];\n        }\n\n        for (var v = 0; v < currentVal.length; v++) {\n            data.push({\n                id: currentVal[v],\n                text: currentVal[v]\n            });\n        }\n\n        callback(data);\n    };\n\n    $(\"#select\").select2({\n        dataAdapter: CustomData\n    });\n});\n```\n\n----------------------------------------\n\nTITLE: Resetting Global Defaults for Select2 in JavaScript\nDESCRIPTION: This snippet demonstrates how to reset all global default options for Select2 to their initial values using the reset method.\nSOURCE: https://github.com/select2/select2/blob/develop/docs/pages/03.configuration/02.defaults/docs.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n$.fn.select2.defaults.reset();\n```\n\n----------------------------------------\n\nTITLE: Populating Select2 with Initial Options via AJAX (JavaScript)\nDESCRIPTION: Illustrates an alternative to custom data adapters for loading initial options once. This approach uses a standard jQuery AJAX request (`$.ajax`) to fetch data from a remote source. Upon success, it iterates through the received data, dynamically creates `<option>` elements for each item, marks them as selected, appends them to the target `<select>` element, and finally triggers the `change` event to make Select2 update its display.\nSOURCE: https://github.com/select2/select2/blob/develop/docs/pages/15.upgrading/02.migrating-from-35/docs.md#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nvar $element = $('select').select2(); // the select element you are working with\n\nvar $request = $.ajax({\n    url: '/my/remote/source' // wherever your data is actually coming from\n});\n\n$request.then(function (data) {\n    // This assumes that the data comes back as an array of data objects\n    // The idea is that you are using the same callback as the old `initSelection`\n\n    for (var d = 0; d < data.length; d++) {\n        var item = data[d];\n\n        // Create the DOM option that is pre-selected by default\n        var option = new Option(item.text, item.id, true, true);\n\n        // Append it to the select\n        $element.append(option);\n    }\n\n    // Update the selected options that are displayed\n    $element.trigger('change');\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing Select2 on a Multi-Select Element using jQuery\nDESCRIPTION: This JavaScript snippet initializes the Select2 plugin on an HTML multi-select element identified by the class `js-example-basic-multiple`. It utilizes jQuery's `$(document).ready()` to ensure the DOM is ready before invoking the `.select2()` method on the target element.\nSOURCE: https://github.com/select2/select2/blob/develop/docs/pages/01.getting-started/02.basic-usage/docs.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n$(document).ready(function() {\n    $('.js-example-basic-multiple').select2();\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing `query` in Custom Data Adapter (Select2 4.0, JavaScript)\nDESCRIPTION: Demonstrates implementing the `query` method within a custom Select2 data adapter in version 4.0, replacing the deprecated `query` option. This method handles fetching or generating results based on search parameters. It receives a `params` object (containing the search `term`, etc.) and a `callback` function. The implementation should generate the results data (typically an object with a `results` array) and pass it to the callback. Requires jQuery and Select2 AMD modules (`select2/data/array`, `select2/utils`).\nSOURCE: https://github.com/select2/select2/blob/develop/docs/pages/15.upgrading/02.migrating-from-35/docs.md#2025-04-22_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n$.fn.select2.amd.require([\n'select2/data/array',\n'select2/utils'\n], function (ArrayData, Utils) {\n    function CustomData ($element, options) {\n        CustomData.__super__.constructor.call(this, $element, options);\n    }\n\n    Utils.Extend(CustomData, ArrayData);\n\n    CustomData.prototype.query = function (params, callback) {\n        var data = {\n            results: []\n        };\n\n        for (var i = 1; i < 5; i++) {\n            var s = \"\";\n\n            for (var j = 0; j < i; j++) {\n                s = s + params.term;\n            }\n\n            data.results.push({\n                id: params.term + i,\n                text: s\n            });\n        }\n\n        callback(data);\n    };\n\n    $(\"#select\").select2({\n        dataAdapter: CustomData\n    });\n}\n\n```\n\n----------------------------------------\n\nTITLE: Retrieving Data Using Select2 Data Method\nDESCRIPTION: Demonstrates how to retrieve the current selection data using the select2('data') method, which returns an array of selected objects containing all properties from the source data.\nSOURCE: https://github.com/select2/select2/blob/develop/docs/pages/12.programmatic-control/02.retrieving-selections/docs.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n$('#mySelect2').select2('data');\n```\n\n----------------------------------------\n\nTITLE: Configuring Bower for Select2 Dependency - JSON\nDESCRIPTION: Shows how to add Select2 as a dependency in a bower.json file for automated package management. Adding this block under the dependencies section allows 'bower install' to fetch the Select2 package. This approach simplifies version tracking and upgrades. Requires Bower to be set up in the project.\nSOURCE: https://github.com/select2/select2/blob/develop/docs/pages/01.getting-started/01.installation/docs.md#2025-04-22_snippet_1\n\nLANGUAGE: JSON\nCODE:\n```\n{\\n    \\\"select2\\\": \\\"~4.0\\\"\\n}\n```\n\n----------------------------------------\n\nTITLE: Mapping Data Properties to `id`/`text` (Select2 4.0, JavaScript)\nDESCRIPTION: Demonstrates using jQuery's `$.map` function to preprocess an array of data objects, ensuring they have the `id` and `text` properties strictly required by Select2 4.0. This example maps `pk` to `id` and `word` to `text`. This technique is necessary when the source data uses different property names and can be applied both when initializing Select2 with local array data and within the `processResults` callback for AJAX data sources.\nSOURCE: https://github.com/select2/select2/blob/develop/docs/pages/15.upgrading/02.migrating-from-35/docs.md#2025-04-22_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nvar data = $.map([\n    {\n        pk: 1,\n        word: 'one'\n    },\n    {\n        pk: 2,\n        word: 'two'\n    }\n], function (obj) {\n    obj.id = obj.id || obj.pk;\n    obj.text = obj.text || obj.word;\n\n    return obj;\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing Tagging on a Multi-Select Element in Select2 (HTML & JavaScript)\nDESCRIPTION: This snippet illustrates enabling dynamic tag creation for a multi-select dropdown in Select2. The HTML uses the 'multiple' attribute to allow multiple selections, and the JavaScript again initializes Select2 with tagging enabled. Dependencies are jQuery and Select2. The dropdown supports both selecting existing options and creating new tags, storing multiple values in the select element.\nSOURCE: https://github.com/select2/select2/blob/develop/docs/pages/09.tagging/docs.md#2025-04-22_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<select class=\\\"form-control\\\" multiple=\\\"multiple\\\">\\n  <option selected=\\\"selected\\\">orange</option>\\n  <option>white</option>\\n  <option selected=\\\"selected\\\">purple</option>\\n</select>\\n\n```\n\nLANGUAGE: javascript\nCODE:\n```\n$(\\\".js-example-tags\\\").select2({\\n  tags: true\\n});\\n\n```\n\n----------------------------------------\n\nTITLE: Deprecated Select2 `query` Option Example (JavaScript)\nDESCRIPTION: Shows an example of the deprecated `query` function used in Select2 versions prior to 4.0. This function was necessary when connecting Select2 to custom data sources (like AJAX or dynamic local data). It received a query object (containing the search term and a callback) and was responsible for fetching/generating matching results and passing them back via the callback.\nSOURCE: https://github.com/select2/select2/blob/develop/docs/pages/15.upgrading/02.migrating-from-35/docs.md#2025-04-22_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    query: function (query) {\n        var data = {results: []}, i, j, s;\n        for (i = 1; i < 5; i++) {\n            s = \"\";\n            for (j = 0; j < i; j++) {\n                s = s + query.term;\n            }\n            data.results.push({\n                id: query.term + i,\n                text: s\n            });\n        }\n        query.callback(data);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Decorators to Extend Adapter Functionality in Select2\nDESCRIPTION: An example of how to use Select2's decorator pattern to extend adapter functionality by combining multiple adapters together.\nSOURCE: https://github.com/select2/select2/blob/develop/docs/pages/14.advanced/01.adapters-and-decorators/docs.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n$.fn.select2.amd.require(\n    [\"select2/utils\", \"select2/selection/single\", \"select2/selection/placeholder\"],\n    function (Utils, SingleSelection, Placeholder) {\n  var CustomSelectionAdapter = Utils.Decorate(SingleSelection, Placeholder);\n});\n```\n\n----------------------------------------\n\nTITLE: Hiding Search Box in Single Select Dropdown\nDESCRIPTION: This code shows how to permanently hide the search box in a single select dropdown by setting minimumResultsForSearch to Infinity. This creates a cleaner interface when search isn't needed.\nSOURCE: https://github.com/select2/select2/blob/develop/docs/pages/11.searching/docs.md#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n$(\"#js-example-basic-hide-search\").select2({\n    minimumResultsForSearch: Infinity\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring SimpleSearch Globally (YAML)\nDESCRIPTION: Example of a global configuration file (`user/config/plugins/simplesearch.yaml`) for the SimpleSearch plugin. It defines settings such as search content type, enabled status, CSS inclusion, query length, search route, results template, filters, filter logic, and result ordering.\nSOURCE: https://github.com/select2/select2/blob/develop/docs/plugins/simplesearch/README.md#2025-04-22_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nsearch_content: rendered\nenabled: true\nbuilt_in_css: true\ndisplay_button: false\nmin_query_length: 3\nroute: /search\ntemplate: simplesearch_results\nfilters:\n    category: blog\nfilter_combinator: and\norder:\n    by: date\n    dir: desc\n```\n\n----------------------------------------\n\nTITLE: Replacing `select2(\"enable\")` with `.prop(\"disabled\")` in Select2/jQuery\nDESCRIPTION: Illustrates how to enable or disable a Select2 element. The older `.select2(\"enable\", !disabled)` method is superseded by the standard jQuery `.prop(\"disabled\", disabled)` method. Note the inversion of the boolean logic in the example.\nSOURCE: https://github.com/select2/select2/blob/develop/CHANGELOG.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n.select2(\"enable\", !disabled) -> .prop(\"disabled\", disabled)\n```\n\n----------------------------------------\n\nTITLE: SimpleSearch Plugin Directory Path (Plaintext)\nDESCRIPTION: Shows the expected directory path for the SimpleSearch plugin files after manual installation within a Grav site structure. This path indicates where the plugin's files reside.\nSOURCE: https://github.com/select2/select2/blob/develop/docs/plugins/simplesearch/README.md#2025-04-22_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\n/your/site/grav/user/plugins/simplesearch\n```\n\n----------------------------------------\n\nTITLE: Clearing Grav Cache via Command Line (Shell)\nDESCRIPTION: This shell command clears the cache for your Grav CMS installation. Run this from the root directory after plugin updates to ensure all cache files are refreshed and no stale data remains. Input: None. Output: All Grav cache files are deleted and rebuilt as needed on next use.\nSOURCE: https://github.com/select2/select2/blob/develop/docs/plugins/problems/README.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nbin/grav clear-cache\n```\n\n----------------------------------------\n\nTITLE: Retrieving Select2 Value with `$element.val()` (jQuery)\nDESCRIPTION: Demonstrates the standard jQuery method `$element.val()` used to retrieve the current value(s) of a Select2 element. This replaces accessing the `val` property from the removed `change` event data.\nSOURCE: https://github.com/select2/select2/blob/develop/CHANGELOG.md#2025-04-22_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n$element.val()\n```\n\n----------------------------------------\n\nTITLE: Updating Error Plugin via GPM in Grav\nDESCRIPTION: Command for updating the Error plugin through Grav Package Manager (GPM). This checks for updates and upgrades the plugin if a newer version is available.\nSOURCE: https://github.com/select2/select2/blob/develop/docs/plugins/error/README.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nbin/gpm update error\n```\n\n----------------------------------------\n\nTITLE: Updating Grav Breadcrumbs Plugin via GPM - Bash\nDESCRIPTION: Update the Breadcrumbs plugin to its latest version using Grav Package Manager (GPM) by issuing this command in your terminal. It checks for a new version, prompts for confirmation, and applies updates automatically. Grav dependencies should be up to date for seamless operation.\nSOURCE: https://github.com/select2/select2/blob/develop/docs/plugins/breadcrumbs/README.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nbin/gpm update breadcrumbs\n```\n\n----------------------------------------\n\nTITLE: Overriding Breadcrumbs Template in Custom Grav Theme - Bash\nDESCRIPTION: This path specifies where to copy the default `breadcrumbs.html.twig` template file within your custom Grav theme for overriding the default plugin output. Editing this file allows customization of the breadcrumbs appearance to match your site's design. No code needs to be executed; simply move or edit the file in the specified directory.\nSOURCE: https://github.com/select2/select2/blob/develop/docs/plugins/breadcrumbs/README.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n/your/site/grav/user/themes/custom-theme/templates/partials/breadcrumbs.html.twig\n```\n\n----------------------------------------\n\nTITLE: Internal JSON Representation for HTML <optgroup>\nDESCRIPTION: Defines the standard JSON object structure that Select2 uses internally to represent an HTML `<optgroup>` element. The `text` is derived from the `label` attribute. It contains a `children` array holding the JSON representations of the nested `<option>` elements and includes a reference to the original DOM element.\nSOURCE: https://github.com/select2/select2/blob/develop/docs/pages/05.options/docs.md#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"text\": \"label attribute\",\n  \"children\": [ option data object, ... ],\n  \"element\": HTMLOptGroupElement\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Learn2 Theme via GPM using Shell\nDESCRIPTION: This command utilizes the Grav Package Manager (GPM) to check for and apply updates to an existing Learn2 theme installation. Run this command from the root directory of your Grav installation. If an update is available, GPM will prompt for confirmation before proceeding with the update and automatically clearing the Grav cache.\nSOURCE: https://github.com/select2/select2/blob/develop/docs/themes/learn2/README.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nbin/gpm update learn2\n```\n\n----------------------------------------\n\nTITLE: Unix Command for Webserver Permissions\nDESCRIPTION: Command to add the default webserver user 'daemon' to OSX's 'staff' group for proper file write permissions in XAMPP environment.\nSOURCE: https://github.com/select2/select2/blob/develop/docs/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsudo dseditgroup -o edit -a daemon -t user staff\n```\n\n----------------------------------------\n\nTITLE: Configuring Anchors Plugin for Grav - YAML\nDESCRIPTION: This snippet shows the global configuration options for the Anchors plugin using YAML syntax. It details options such as enabling/disabling the plugin, selecting header levels, setting placement, visibility, icon, additional CSS classes, and limiting ID length. Required dependencies include a Grav CMS installation and the Anchors plugin, and these settings are intended to be placed in user/config/plugins/anchors.yaml to control plugin behavior globally. All fields are customizable, and certain string fields expect specific values as noted in their comments.\nSOURCE: https://github.com/select2/select2/blob/develop/docs/plugins/anchors/README.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nenabled: true                 # enable or disable the plugin\\nactive: true                  # active by default, if false then you must activate per-page\\nselectors: 'h1,h2,h3,h4'      # css elements to activate on.  Uses jQuery style selectors\\nplacement: right              # either \\\"left\\\" or \\\"right\\\"\\nvisible: hover                # Active on \\\"hover\\\" or \\\"always\\\" visible\\nicon:                         # default link or a specific character like: #, ¶, ❡, and §.\\nclass:                        # adds the provided class to the anchor html\\ntruncate: 64                  # truncates the generated ID to the specified character length\n```\n\n----------------------------------------\n\nTITLE: Filtering Search by Multiple Taxonomy Types (YAML)\nDESCRIPTION: Configures SimpleSearch to search within multiple specified taxonomy types ('tag' and 'author'). This allows searching across different classification fields.\nSOURCE: https://github.com/select2/select2/blob/develop/docs/plugins/simplesearch/README.md#2025-04-22_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\nfilters:\n    - @taxonomy: [tag, author]\n```\n\n----------------------------------------\n\nTITLE: Including SimpleSearch Searchbox (Twig)\nDESCRIPTION: Shows how to include the default SimpleSearch search box partial template within another Twig template (e.g., a theme layout or page template). This renders the search input field.\nSOURCE: https://github.com/select2/select2/blob/develop/docs/plugins/simplesearch/README.md#2025-04-22_snippet_4\n\nLANGUAGE: twig\nCODE:\n```\n{% include 'partials/simplesearch_searchbox.html.twig' %}\n```\n\n----------------------------------------\n\nTITLE: Customizing Search Results Template (Twig)\nDESCRIPTION: Provides the default structure of the `simplesearch_results.html.twig` template. This template extends a base template and iterates through the `search_results` collection, including a partial (`simplesearch_item.html.twig`) for each result found. It can be overridden and customized in the theme.\nSOURCE: https://github.com/select2/select2/blob/develop/docs/plugins/simplesearch/README.md#2025-04-22_snippet_6\n\nLANGUAGE: twig\nCODE:\n```\n{% extends 'partials/simplesearch_base.html.twig' %}\n\n{% block content %}\n    <div class=\"content-padding\">\n    <h1 class=\"search-header\">Search Results</h1>\n    <h3>Query: \"{{ query }}\" - Found {{ search_results.count }} {{ 'Item'|pluralize(search_results.count) }}</h3>\n\n    {% for page in search_results %}\n        {% include 'partials/simplesearch_item.html.twig' with {'page':page} %}\n    {% endfor %}\n    </div>\n{% endblock %}\n```\n\n----------------------------------------\n\nTITLE: Sample Configuration for Breadcrumbs Plugin - YAML\nDESCRIPTION: This YAML snippet demonstrates sample settings for the Breadcrumbs plugin. Copy and modify this file as `user/config/plugins/breadcrumbs.yaml` to adjust plugin behavior such as enabling/disabling, CSS inclusion, and icon display. Each parameter controls a specific aspect of the breadcrumbs functionality in Grav, and should be set to match your site's requirements.\nSOURCE: https://github.com/select2/select2/blob/develop/docs/plugins/breadcrumbs/README.md#2025-04-22_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nenabled: true\\nshow_all: true\\nbuilt_in_css: true\\ninclude_home: true\\nicon_home: ''\\nicon_divider_classes: 'fa fa-angle-right'\\nlink_trailing: false\n```\n\n----------------------------------------\n\nTITLE: Disabling Taxonomy Search (YAML)\nDESCRIPTION: Configures SimpleSearch to completely disable searching within any taxonomy fields. This restricts the search scope to page titles and content only.\nSOURCE: https://github.com/select2/select2/blob/develop/docs/plugins/simplesearch/README.md#2025-04-22_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\nfilters:\n    - '@taxonomy': false\n```\n\n----------------------------------------\n\nTITLE: Custom Error Page Path in Grav\nDESCRIPTION: File path for placing a custom error page content file in the Grav user pages directory. This allows customizing the content of the error page.\nSOURCE: https://github.com/select2/select2/blob/develop/docs/plugins/error/README.md#2025-04-22_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\n/your/site/grav/user/pages/error/error.md\n```\n\n----------------------------------------\n\nTITLE: Installing SimpleSearch via GPM (Bash)\nDESCRIPTION: Installs the SimpleSearch plugin using the Grav Package Manager (GPM) command-line tool. This command should be run from the root directory of the Grav installation.\nSOURCE: https://github.com/select2/select2/blob/develop/docs/plugins/simplesearch/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nbin/gpm install simplesearch\n```\n\n----------------------------------------\n\nTITLE: Overriding Plugin Settings Per Page Using Header Frontmatter - Markdown/YAML\nDESCRIPTION: This snippet demonstrates how to override the Anchors plugin defaults on a specific Grav page using YAML frontmatter. By including the 'anchors' field in the page header, users can enable/disable the plugin, customize selectors, and control anchor behavior for that page only. The key parameters mirror the global configuration and allow granular, per-page control. The frontmatter must be placed at the top of the Markdown content file for the desired page.\nSOURCE: https://github.com/select2/select2/blob/develop/docs/plugins/anchors/README.md#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n---\\ntitle: Sample Code With Custom Theme\\nanchors:\\n    active: true\\n    selectors: .blog h1, .blog h2\\n---\n```\n\n----------------------------------------\n\nTITLE: Disabling Anchors Plugin Per Page Using Header Frontmatter - Markdown/YAML\nDESCRIPTION: This snippet shows how to disable the Anchors plugin for a particular Grav page by setting 'active: false' in the YAML frontmatter under the 'anchors' field. This approach is useful when the plugin causes issues on specific content pages. The snippet should be added to the top of the page's Markdown file. Only the current page is affected; global settings remain unchanged.\nSOURCE: https://github.com/select2/select2/blob/develop/docs/plugins/anchors/README.md#2025-04-22_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n---\\ntitle: Sample Code with Highlight disabled\\nanchors:\\n    active: false\\n---\n```\n\n----------------------------------------\n\nTITLE: Installing Grav Breadcrumbs Plugin via GPM - Bash\nDESCRIPTION: Use this Bash command in your terminal at the root of your Grav installation to install the Breadcrumbs plugin via the Grav Package Manager (GPM). This command resolves dependencies and places the plugin files in the correct `user/plugins` directory. No additional parameters are needed; plugin is enabled immediately after install. Ensure Grav is already installed before using this command.\nSOURCE: https://github.com/select2/select2/blob/develop/docs/plugins/breadcrumbs/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nbin/gpm install breadcrumbs\n```\n\n----------------------------------------\n\nTITLE: Defining Page Content Collection (YAML Frontmatter)\nDESCRIPTION: Example YAML frontmatter for defining a page's content collection in Grav. This configuration specifies that the page should list its own children (`@self.children`) and order them by date descending. This is relevant for the 'Self-Controlled Search Page' approach.\nSOURCE: https://github.com/select2/select2/blob/develop/docs/plugins/simplesearch/README.md#2025-04-22_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\ncontent:\n    items: @self.children\n    order:\n        by: date\n        dir: desc\n```\n\n----------------------------------------\n\nTITLE: Directory Structure Setup for Select2 Documentation\nDESCRIPTION: Shows the expected directory structure after installing Grav core and cloning the repository into the user folder. Demonstrates the correct placement of assets, git repository, and configuration files.\nSOURCE: https://github.com/select2/select2/blob/develop/docs/README.md#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nhtdocs/\n└── select2-docs/\n   ├── assets/\n   ├── ...\n   ├── user/\n       ├── .git\n       ├── accounts/\n       ├── assets/\n       ├── config/\n       └── ...\n   └── ...\n```\n\n----------------------------------------\n\nTITLE: Installing Problems Plugin via GPM (Grav Package Manager) (Shell)\nDESCRIPTION: This shell command installs the Problems plugin into your current Grav installation using the Grav Package Manager (GPM). Ensure you have permissions to run scripts and that GPM is available in your environment. Run this command from the root directory of your Grav site. Input: None. Output: Installs the Problems plugin into 'user/plugins/problems'. No additional parameters required.\nSOURCE: https://github.com/select2/select2/blob/develop/docs/plugins/problems/README.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nbin/gpm install problems\n```\n\n----------------------------------------\n\nTITLE: Using Labels with Select2 in HTML\nDESCRIPTION: This HTML snippet shows how to use labels with Select2 elements. It highlights the <select> elements when the corresponding <label> is clicked, enabling better accessibility.\nSOURCE: https://github.com/select2/select2/blob/develop/docs/pages/04.appearance/docs.md#2025-04-22_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n\n<label for=\"id_label_single\">\n  Click this to highlight the single select element\n\n  <select class=\"js-example-basic-single js-states form-control\" id=\"id_label_single\"></select>\n</label>\n\n<label for=\"id_label_multiple\">\n  Click this to highlight the multiple select element\n\n  <select class=\"js-example-basic-multiple js-states form-control\" id=\"id_label_multiple\" multiple=\"multiple\"></select>\n</label>\n\n```\n\n----------------------------------------\n\nTITLE: Updating Problems Plugin via GPM (Shell)\nDESCRIPTION: This shell command updates the Problems plugin using Grav's Package Manager (GPM). It checks for plugin updates and applies them if available, clearing the cache upon completion. Execute this command from your Grav root directory. Input: None, but you will be prompted to confirm update if necessary. Output: Updates the Problems plugin and clears cache. No additional parameters required.\nSOURCE: https://github.com/select2/select2/blob/develop/docs/plugins/problems/README.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nbin/gpm update problems\n```\n\n----------------------------------------\n\nTITLE: Configuring Highlight.js Theme using Grav YAML Frontmatter (YAML)\nDESCRIPTION: This snippet demonstrates how to specify the Highlight.js theme on a Grav page by adding a 'highlight' section in the YAML frontmatter. The 'theme' parameter sets the name of the Highlight.js theme to be used for rendering code blocks on this page. Place this at the start of a page's Markdown file to override default highlighting options for the page. Dependencies include Grav CMS with the Highlight plugin installed, and the available Highlight.js themes on your system.\nSOURCE: https://github.com/select2/select2/blob/develop/docs/plugins/highlight/README.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\\ntitle: Sample Code With Custom Theme\\nhighlight:\\n    theme: monokai\\n---\\n\\n```\\n@font-face {\\n  font-family: Chunkfive; src: url('Chunkfive.otf');\\n}\\n\\nbody, .usertext {\\n  color: #F0F0F0; background: #600;\\n  font-family: Chunkfive, sans;\\n}\\n\\n@import url(print.css);\\n@media print {\\n  a[href^=http]::after {\\n    content: attr(href)\\n  }\\n}\\n```\n```\n\n----------------------------------------\n\nTITLE: Advanced Select2 Initialization and Configuration with AMD\nDESCRIPTION: This JavaScript snippet showcases a more advanced Select2 setup using AMD module loading. It requires 'select2/core' and 'select2/utils', sets a default width for all Select2 instances globally using `$.fn.select2.defaults.set()`, initializes both the basic single and multiple select examples, and defines a `formatState` function (likely for custom option rendering, although not applied in this specific initialization block) which demonstrates how to add custom HTML like images to options.\nSOURCE: https://github.com/select2/select2/blob/develop/docs/pages/01.getting-started/02.basic-usage/docs.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n$.fn.select2.amd.require([\n    \"select2/core\",\n    \"select2/utils\"\n  ], function (Select2, Utils, oldMatcher) {\n    var $basicSingle = $(\".js-example-basic-single\");\n    var $basicMultiple = $(\".js-example-basic-multiple\");\n\n    $.fn.select2.defaults.set(\"width\", \"100%\");\n\n    $basicSingle.select2();\n    $basicMultiple.select2();\n\n    function formatState (state) {\n      if (!state.id) {\n        return state.text;\n      }\n      var $state = $(\n        '<span>' +\n          '<img src=\"vendor/images/flags/' +\n            state.element.value.toLowerCase() +\n          '.png\" class=\"img-flag\" /> ' +\n          state.text +\n        '</span>'\n      );\n      return $state;\n    };\n  });\n```\n\n----------------------------------------\n\nTITLE: Enabling Line Numbers for Highlight.js Output in Grav YAML Frontmatter (YAML)\nDESCRIPTION: This YAML snippet illustrates how to enable both highlighting and displaying line numbers for code blocks on a Grav page by setting 'highlight.enabled' and 'highlight.lines' to true in the frontmatter. This is commonly placed at the top of a Markdown file to adjust page-level plugin behavior. Dependencies are Grav CMS with Highlight plugin, and proper configuration of the plugin's settings.\nSOURCE: https://github.com/select2/select2/blob/develop/docs/plugins/highlight/README.md#2025-04-22_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n---\\ntitle: Sample Code with Highlight and line numbers enabled\\nhighlight:\\n    enabled: true\\n    lines: true\\n---\n```\n\n----------------------------------------\n\nTITLE: Example CSS Code Block for Highlight.js Usage Demonstrations (CSS)\nDESCRIPTION: This code block provides sample CSS used within Markdown for highlighting examples. It contains various CSS rules and constructs meant to demonstrate syntax highlighting capabilities. Inputs: None required. Outputs: When rendered by Grav Highlight plugin with Highlight.js, the CSS will be displayed with syntax highlighting according to the active theme. No dependencies beyond CSS syntax itself.\nSOURCE: https://github.com/select2/select2/blob/develop/docs/plugins/highlight/README.md#2025-04-22_snippet_3\n\nLANGUAGE: css\nCODE:\n```\n@font-face {\\n  font-family: Chunkfive; src: url('Chunkfive.otf');\\n}\\n\\nbody, .usertext {\\n  color: #F0F0F0; background: #600;\\n  font-family: Chunkfive, sans;\\n}\\n\\n@import url(print.css);\\n@media print {\\n  a[href^=http]::after {\\n    content: attr(href)\\n  }\\n}\\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Select2 AMD Language Base Path - jQuery - JavaScript\nDESCRIPTION: This snippet demonstrates how to set the 'amdLanguageBase' option in Select2 using jQuery. The setting customizes the base AMD loader language path so Select2 can properly resolve language files, particularly in build environments where module names or paths are altered. The method requires jQuery and the Select2 plugin loaded, and accepts a string path as the second parameter. The main input is the new base path, and the effect is a change in internal module resolution. There are no outputs, but improper configuration may prevent language files from loading correctly.\nSOURCE: https://github.com/select2/select2/blob/develop/docs/pages/01.getting-started/03.builds-and-modules/docs.md#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n$.fn.select2.defaults.set('amdLanguageBase', 'select2/i18n/');\n```\n\n----------------------------------------\n\nTITLE: Installing Error Plugin via GPM in Grav\nDESCRIPTION: Command for installing the Error plugin through Grav Package Manager (GPM). This installs the plugin into the user/plugins directory.\nSOURCE: https://github.com/select2/select2/blob/develop/docs/plugins/error/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nbin/gpm install error\n```\n\n----------------------------------------\n\nTITLE: Custom Error Template Path in Grav Theme\nDESCRIPTION: File path for placing a custom error template within a Grav theme. This allows theme developers to override the default error page appearance.\nSOURCE: https://github.com/select2/select2/blob/develop/docs/plugins/error/README.md#2025-04-22_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\n/your/site/grav/user/themes/custom-theme/templates/error.html.twig\n```\n\n----------------------------------------\n\nTITLE: Removed Select2 Method: `.select2(\"onSortEnd\")` (jQuery)\nDESCRIPTION: Indicates the removal of the `.select2(\"onSortEnd\")` method. Similar to `onSortStart`, handling sort end events requires creating a custom selection adapter in newer Select2 versions.\nSOURCE: https://github.com/select2/select2/blob/develop/CHANGELOG.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n.select2(\"onSortEnd\")\n```\n\n----------------------------------------\n\nTITLE: Configuring 404 Error Page Settings in YAML\nDESCRIPTION: YAML configuration block that defines properties for a 404 error page including template settings, routing behavior, and Twig processing options. Sets up the page title, robots meta directives, and HTTP response code.\nSOURCE: https://github.com/select2/select2/blob/develop/docs/plugins/error/pages/error.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ntitle: Page not Found\nrobots: noindex,nofollow\ntemplate: error\nroutable: false\nhttp_response_code: 404\ntwig_first: true\nprocess:\n  twig: true\n```\n\n----------------------------------------\n\nTITLE: Installing Learn2 Theme via GPM using Shell\nDESCRIPTION: This command uses the Grav Package Manager (GPM) to download and install the Learn2 theme. It should be executed from the root directory of your Grav installation. This command automates the process of placing the theme files into the correct `/user/themes/learn2` directory.\nSOURCE: https://github.com/select2/select2/blob/develop/docs/themes/learn2/README.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nbin/gpm install learn2\n```\n\n----------------------------------------\n\nTITLE: Deprecated Select2 `initSelection` Example (JavaScript)\nDESCRIPTION: Provides an example of the deprecated `initSelection` option used in Select2 versions prior to 4.0. This function was required for components using custom data adapters (like AJAX or tagging) to convert the initial underlying element values into data objects `{id: ..., text: ...}` that Select2 could display. It was called only once during initialization.\nSOURCE: https://github.com/select2/select2/blob/develop/docs/pages/15.upgrading/02.migrating-from-35/docs.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    initSelection : function (element, callback) {\n        var data = [];\n        $(element.val()).each(function () {\n            data.push({id: this, text: this});\n        });\n        callback(data);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Clearing Grav Cache using Shell Command\nDESCRIPTION: This command clears the cache used by the Grav CMS. It is often necessary after manual theme updates, configuration changes (like modifying `system.yaml`), or manual plugin/theme installations to ensure changes are immediately reflected on the site. Execute this command from the root directory of your Grav installation.\nSOURCE: https://github.com/select2/select2/blob/develop/docs/themes/learn2/README.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nbin/grav clear-cache\n```\n\n----------------------------------------\n\nTITLE: Initializing Select2 with nested AJAX options in JavaScript\nDESCRIPTION: This snippet shows how to initialize Select2 with nested AJAX options using JavaScript. It sets the URL for AJAX requests and disables caching.\nSOURCE: https://github.com/select2/select2/blob/develop/docs/pages/03.configuration/03.data-attributes/docs.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n$(\".js-example-data-ajax\").select2({\n  ajax: {\n    url: \"http://example.org/api/test\",\n    cache: false\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Retrieving Selected Items Using jQuery Selector\nDESCRIPTION: Shows how to access selected items using jQuery's :selected selector to get the DOM elements directly.\nSOURCE: https://github.com/select2/select2/blob/develop/docs/pages/12.programmatic-control/02.retrieving-selections/docs.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n$('#mySelect2').find(':selected');\n```\n\n----------------------------------------\n\nTITLE: Customizing AJAX Request Parameters in Select2\nDESCRIPTION: Example of how to modify the parameters sent with the AJAX request using the ajax.data option.\nSOURCE: https://github.com/select2/select2/blob/develop/docs/pages/06.data-sources/02.ajax/docs.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n$('#mySelect2').select2({\n  ajax: {\n    url: 'https://api.github.com/orgs/select2/repos',\n    data: function (params) {\n      var query = {\n        search: params.term,\n        type: 'public'\n      }\n\n      // Query parameters will be ?search=[term]&type=public\n      return query;\n    }\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Specifying AMD Module Path for Select2 AjaxAdapter\nDESCRIPTION: This code snippet defines the AMD module path for the AjaxAdapter in Select2. It is used to implement support for creating results from remote data sources using AJAX requests.\nSOURCE: https://github.com/select2/select2/blob/develop/docs/pages/14.advanced/02.default-adapters/03.ajax/docs.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n`select2/data/ajax`\n```\n\n----------------------------------------\n\nTITLE: Importing SelectOnClose Decorator Module (JavaScript AMD)\nDESCRIPTION: Shows how to import the SelectOnClose decorator module for Select2 using AMD, which implements automatic selection of the highlighted option when the dropdown is closed.\nSOURCE: https://github.com/select2/select2/blob/develop/docs/pages/14.advanced/02.default-adapters/05.results/docs.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nselect2/dropdown/selectOnClose\n```\n\n----------------------------------------\n\nTITLE: Configuring SimpleSearch per Page (YAML Frontmatter)\nDESCRIPTION: Demonstrates page-specific SimpleSearch configuration using YAML frontmatter within a Grav page file. This overrides global settings for the specific page, setting the route to the page itself (`@self`), filtering by the page's collection and tag taxonomy, and using the 'and' combinator.\nSOURCE: https://github.com/select2/select2/blob/develop/docs/plugins/simplesearch/README.md#2025-04-22_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nsimplesearch:\n    route: @self\n    filters:\n        - @self\n        - @taxonomy: [tag]\n    filter_combinator: and\n```\n\n----------------------------------------\n\nTITLE: Setting a Nested Global Default for Select2 in JavaScript\nDESCRIPTION: This example shows how to set a nested global default option for Select2. It sets the 'ajax.cache' option to false, using the notation for nested options.\nSOURCE: https://github.com/select2/select2/blob/develop/docs/pages/03.configuration/02.defaults/docs.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n$.fn.select2.defaults.set(\"ajax--cache\", false);\n```\n\n----------------------------------------\n\nTITLE: Initializing Select2 with Labels and JavaScript\nDESCRIPTION: This JavaScript snippet initializes Select2 for labeled <select> elements and sets a default width of 100%. It uses AMD to require necessary modules and defines a custom format function for state icons.\nSOURCE: https://github.com/select2/select2/blob/develop/docs/pages/04.appearance/docs.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n\n$.fn.select2.amd.require([\n  \"select2/core\",\n  \"select2/utils\"\n], function (Select2, Utils) {\n  var $basicSingle = $(\".js-example-basic-single\");\n  var $basicMultiple = $(\".js-example-basic-multiple\");\n\n  $.fn.select2.defaults.set(\"width\", \"100%\");\n\n  $basicSingle.select2();\n  $basicMultiple.select2();\n\n  function formatState (state) {\n    if (!state.id) {\n      return state.text;\n    }\n    var $state = $(\n      '<span>' +\n        '<img src=\"vendor/images/flags/' +\n          state.element.value.toLowerCase() +\n        '.png\" class=\"img-flag\" /> ' +\n        state.text +\n      '</span>'\n    );\n    return $state;\n  };\n});\n\n```\n\n----------------------------------------\n\nTITLE: Initializing Select2 with AJAX in HTML\nDESCRIPTION: HTML markup for a select element that will be enhanced with Select2 and AJAX functionality.\nSOURCE: https://github.com/select2/select2/blob/develop/docs/pages/06.data-sources/02.ajax/docs.md#2025-04-22_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<select class=\"js-data-example-ajax\"></select>\n```\n\n----------------------------------------\n\nTITLE: Responsive Container Width for Select2 in HTML\nDESCRIPTION: This HTML snippet sets responsive widths for Select2 elements using inline styles. The <select> elements are styled with 50% and 75% widths to ensure responsiveness.\nSOURCE: https://github.com/select2/select2/blob/develop/docs/pages/04.appearance/docs.md#2025-04-22_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n\n<select class=\"js-example-responsive\" style=\"width: 50%\"></select>\n<select class=\"js-example-responsive\" multiple=\"multiple\" style=\"width: 75%\"></select>\n\n```\n\n----------------------------------------\n\nTITLE: Filtering Search by Single Taxonomy Type (YAML)\nDESCRIPTION: Configures SimpleSearch to only search within a specific taxonomy type ('tag'). This is done by setting the `@taxonomy` filter in the plugin's configuration (global or page-level).\nSOURCE: https://github.com/select2/select2/blob/develop/docs/plugins/simplesearch/README.md#2025-04-22_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\nfilters:\n    - @taxonomy: [tag]\n```\n\n----------------------------------------\n\nTITLE: Updating SimpleSearch Plugin Using Grav Package Manager (GPM)\nDESCRIPTION: Command to update the SimpleSearch plugin via the Grav Package Manager. This command should be run from the root directory of a Grav installation using the Terminal or command line.\nSOURCE: https://github.com/select2/select2/blob/develop/docs/plugins/simplesearch/README.md#2025-04-22_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nbin/gpm update simplesearch\n```\n\n----------------------------------------\n\nTITLE: Importing Select2 Results Module (JavaScript AMD)\nDESCRIPTION: Demonstrates how to import the Select2 results module using AMD (Asynchronous Module Definition).\nSOURCE: https://github.com/select2/select2/blob/develop/docs/pages/14.advanced/02.default-adapters/05.results/docs.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nselect2/results\n```\n\n----------------------------------------\n\nTITLE: Referencing Select2 Selection Base Module\nDESCRIPTION: The base module path for Select2's selection functionality.\nSOURCE: https://github.com/select2/select2/blob/develop/docs/pages/14.advanced/02.default-adapters/01.selection/docs.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nselect2/selection\n```\n\n----------------------------------------\n\nTITLE: Placeholder Module References\nDESCRIPTION: AMD module paths for Select2's placeholder functionality, including both the selection placeholder and dropdown placeholder hiding features.\nSOURCE: https://github.com/select2/select2/blob/develop/docs/pages/14.advanced/02.default-adapters/01.selection/docs.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nselect2/selection/placeholder\nselect2/dropdown/hidePlaceholder\n```\n\n----------------------------------------\n\nTITLE: Example SimpleSearch URL Structure (HTTP)\nDESCRIPTION: Illustrates the structure of a URL generated when performing a search with the SimpleSearch plugin. It includes the base route defined in the configuration and the search query appended as a parameter.\nSOURCE: https://github.com/select2/select2/blob/develop/docs/plugins/simplesearch/README.md#2025-04-22_snippet_5\n\nLANGUAGE: http\nCODE:\n```\nhttp://yoursite.com/search/query:something\n```\n\n----------------------------------------\n\nTITLE: Disabling the Highlight Plugin for a Page using YAML Frontmatter (YAML)\nDESCRIPTION: This YAML frontmatter example disables the Highlight plugin on a per-page basis by setting 'highlight.enabled' to false. This can be useful if syntax highlighting causes conflicts or is unnecessary for specific content. Place this block at the top of the page's Markdown source. Dependencies are Grav CMS, the Highlight plugin, and the corresponding plugins and theme as described.\nSOURCE: https://github.com/select2/select2/blob/develop/docs/plugins/highlight/README.md#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n---\\ntitle: Sample Code with Highlight disabled\\nhighlight:\\n    enabled: false\\n---\\n\\n```\\n@font-face {\\n  font-family: Chunkfive; src: url('Chunkfive.otf');\\n}\\n\\nbody, .usertext {\\n  color: #F0F0F0; background: #600;\\n  font-family: Chunkfive, sans;\\n}\\n\\n@import url(print.css);\\n@media print {\\n  a[href^=http]::after {\\n    content: attr(href)\\n  }\\n}\\n```\n```\n\n----------------------------------------\n\nTITLE: Verifying Breadcrumbs Plugin Directory Structure - Bash\nDESCRIPTION: This snippet shows the expected file path after a successful install (manual or via GPM). Place or verify Breadcrumbs plugin files under the designated directory within your Grav site's user plugins section. This structure ensures Grav recognizes and loads the plugin correctly. Replace `/your/site/grav` with your actual Grav install path.\nSOURCE: https://github.com/select2/select2/blob/develop/docs/plugins/breadcrumbs/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n/your/site/grav/user/plugins/breadcrumbs\n```\n\n----------------------------------------\n\nTITLE: Clearing Grav Cache via Command Line\nDESCRIPTION: Command for clearing the Grav cache from the terminal. This is often necessary after installing or updating plugins to ensure changes take effect.\nSOURCE: https://github.com/select2/select2/blob/develop/docs/plugins/error/README.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nbin/grav clear-cache\n```\n\n----------------------------------------\n\nTITLE: Twig Template Error Message\nDESCRIPTION: Twig template syntax for displaying a localized error message using the PLUGIN_ERROR.ERROR_MESSAGE translation key.\nSOURCE: https://github.com/select2/select2/blob/develop/docs/plugins/error/pages/error.md#2025-04-22_snippet_1\n\nLANGUAGE: twig\nCODE:\n```\n{{ 'PLUGIN_ERROR.ERROR_MESSAGE'|t }}\n```"
  }
]