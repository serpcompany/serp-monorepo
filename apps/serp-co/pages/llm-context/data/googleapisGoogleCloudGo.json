[
  {
    "owner": "googleapis",
    "repo": "google-cloud-go",
    "content": "TITLE: Installing Google Cloud Go Client Libraries Using go get - Bash\nDESCRIPTION: This snippet demonstrates how to install a Google Cloud client library for Go using the go get command. Replace 'firestore' with the desired package to import; it fetches the latest version of the specified client. Dependency management uses Go modules (go.mod) and requires the Go CLI.\nSOURCE: https://github.com/googleapis/google-cloud-go/blob/main/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngo get cloud.google.com/go/firestore@latest # Replace firestore with the package you want to use.\n```\n\n----------------------------------------\n\nTITLE: Initializing BigQuery Client in Go\nDESCRIPTION: This snippet demonstrates how to create a new BigQuery client instance using the Go SDK. It requires the context 'ctx' and the Google Cloud project ID as parameters. Before use, ensure that the 'cloud.google.com/go/bigquery' package is imported and authentication prerequisites for Google Cloud are met. If the client fails to initialize, error handling is required. This is typically the first step before invoking any BigQuery operations.\nSOURCE: https://github.com/googleapis/google-cloud-go/blob/main/bigquery/README.md#_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nc, err := bigquery.NewClient(ctx, \"my-project-ID\")\nif err != nil {\n\t// TODO: Handle error.\n}\n```\n\n----------------------------------------\n\nTITLE: Publishing and Subscribing Messages using Google Cloud Pub/Sub Go Client\nDESCRIPTION: This snippet demonstrates publishing a message to a Pub/Sub topic and receiving messages from a subscription using the Go client library. The example publishes a 'hello world' message asynchronously and retrieves the resulting message ID, then subscribes to a topic and acknowledges received messages via a callback. Prerequisites include an initialized Pub/Sub client, existing GCP topic and subscription, proper IAM permissions, and a context object. Key parameters are the topic/subscription names and a context for cancellation. Outputs include the published message ID and any received message data. Publishing is asynchronous; proper error handling is shown.\nSOURCE: https://github.com/googleapis/google-cloud-go/blob/main/pubsub/README.md#_snippet_1\n\nLANGUAGE: go\nCODE:\n```\n// Publish \"hello world\" on topic1.\ntopic := client.Topic(\"topic1\")\nres := topic.Publish(ctx, &pubsub.Message{\n\tData: []byte(\"hello world\"),\n})\n// The publish happens asynchronously.\n// Later, you can get the result from res:\n...\nmsgID, err := res.Get(ctx)\nif err != nil {\n\tlog.Fatal(err)\n}\n\n// Use a callback to receive messages via subscription1.\nsub := client.Subscription(\"subscription1\")\nerr = sub.Receive(ctx, func(ctx context.Context, m *pubsub.Message) {\n\tfmt.Println(m.Data)\n\tm.Ack() // Acknowledge that we've consumed the message.\n})\nif err != nil {\n\tlog.Println(err)\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Pub/Sub Lite Libraries in Go\nDESCRIPTION: Demonstrates how to import the Go client libraries required for using Pub/Sub and Pub/Sub Lite. The \"pubsub\" and \"pscompat\" packages are necessary dependencies for publishing and subscribing to Pub/Sub Lite topics and subscriptions. This code segment is a necessary prerequisite for all subsequent Pub/Sub Lite client operations.\nSOURCE: https://github.com/googleapis/google-cloud-go/blob/main/pubsublite/README.md#_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nimport (\n\t\"cloud.google.com/go/pubsub\"\n\t\"cloud.google.com/go/pubsublite/pscompat\"\n)\n```\n\n----------------------------------------\n\nTITLE: Initializing Google Cloud Storage Client with Default Credentials - Go\nDESCRIPTION: This Go snippet creates a new Google Cloud Storage client instance using the Application Default Credentials mechanism. It requires importing the cloud.google.com/go/storage package and passing a context.Context; errors must be handled. Returns a *storage.Client or an error, depending on the outcome of the connection.\nSOURCE: https://github.com/googleapis/google-cloud-go/blob/main/README.md#_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nclient, err := storage.NewClient(ctx)\n```\n\n----------------------------------------\n\nTITLE: Testing TranslateText with a Fake gRPC Server (Go)\nDESCRIPTION: This snippet shows how to set up a full test environment in Go for the TranslateTextWithConcreteClient function using a fakeTranslationServer. It launches a gRPC server with the fake implementation, configures the translate client to talk to the fake server, and checks the translated output in a test. Dependencies include the translate and translatepb gRPC packages and Google API option handling for custom endpoints. This tightly integrates a fake server and client to allow isolated, offline automated tests.\nSOURCE: https://github.com/googleapis/google-cloud-go/blob/main/testing.md#_snippet_2\n\nLANGUAGE: Go\nCODE:\n```\nimport (\n        \"context\"\n        \"net\"\n        \"testing\"\n\n        translate \"cloud.google.com/go/translate/apiv3\"\n        \"google.golang.org/api/option\"\n        translatepb \"google.golang.org/genproto/googleapis/cloud/translate/v3\"\n        \"google.golang.org/grpc\"\n\t\"google.golang.org/grpc/credentials/insecure\"\n)\n\nfunc TestTranslateTextWithConcreteClient(t *testing.T) {\n        ctx := context.Background()\n\n        // Setup the fake server.\n        fakeTranslationServer := &fakeTranslationServer{}\n        l, err := net.Listen(\"tcp\", \"localhost:0\")\n        if err != nil {\n                t.Fatal(err)\n        }\n        gsrv := grpc.NewServer()\n        translatepb.RegisterTranslationServiceServer(gsrv, fakeTranslationServer)\n        fakeServerAddr := l.Addr().String()\n        go func() {\n                if err := gsrv.Serve(l); err != nil {\n                        panic(err)\n                }\n        }()\n\n        // Create a client.\n        client, err := translate.NewTranslationClient(ctx,\n                option.WithEndpoint(fakeServerAddr),\n                option.WithoutAuthentication(),\n                option.WithGRPCDialOption(grpc.WithTransportCredentials(insecure.NewCredentials())),\n        )\n        if err != nil {\n                t.Fatal(err)\n        }\n\n        // Run the test.\n        text, err := TranslateTextWithConcreteClient(client, \"Hola Mundo\", \"en-US\")\n        if err != nil {\n                t.Fatal(err)\n        }\n        if text != \"Hello World\" {\n                t.Fatalf(\"got %q, want Hello World\", text)\n        }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Logging of Inactive Transactions in Spanner Session Pool (Go)\nDESCRIPTION: This example configures the session pool to enable verbose logging for long-lived (possibly leaked) transactions by setting TrackSessionHandles to true and ActionOnInactiveTransaction to spanner.Warn. It instantiates a custom SessionPoolConfig and ClientConfig, then creates the client via NewClientWithConfig. This setup is useful for debugging session leaks by providing stack traces for transactions exceeding thresholds. Inputs include the context, database string, and pool configuration; output is a configured *spanner.Client. The approach assists observability and leak detection, assuming application log streaming is set up.\nSOURCE: https://github.com/googleapis/google-cloud-go/blob/main/spanner/README.md#_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nsessionPoolConfig := spanner.SessionPoolConfig{\n    TrackSessionHandles: true,\n    InactiveTransactionRemovalOptions: spanner.InactiveTransactionRemovalOptions{\n      ActionOnInactiveTransaction: spanner.Warn,\n    },\n}\nclient, err := spanner.NewClientWithConfig(\n\tctx, database, spanner.ClientConfig{SessionPoolConfig: sessionPoolConfig},\n)\nif err != nil {\n\tlog.Fatal(err)\n}\ndefer client.Close()\n\n// Example Log message to warn presence of long running transactions\n// session <session-info> checked out of pool at <session-checkout-time> is long running due to possible session leak for goroutine\n// <Stack Trace of transaction>\n\n```\n\n----------------------------------------\n\nTITLE: Initializing Google Cloud Storage Client with Explicit Credentials File - Go\nDESCRIPTION: This Go snippet initializes a new Google Cloud Storage client with credentials loaded from a user-specified JSON key file. The option.WithCredentialsFile helper (from google.golang.org/api/option) is passed to storage.NewClient along with the context. This approach is typically used outside Google Cloud Platform environments, such as local development and CI, and requires the service account key file's path.\nSOURCE: https://github.com/googleapis/google-cloud-go/blob/main/README.md#_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nclient, err := storage.NewClient(ctx, option.WithCredentialsFile(\"path/to/keyfile.json\"))\n```\n\n----------------------------------------\n\nTITLE: Inserting Multiple Entities into Google Cloud Datastore using Go\nDESCRIPTION: This snippet defines a `Post` struct suitable for storing in Datastore, utilizing field tags like `datastore:\",noindex\"` to control indexing. It then demonstrates creating multiple keys using `datastore.NameKey` and corresponding `Post` instances. Finally, it uses the initialized `client`'s `PutMulti` method to insert these entities in a batch operation, along with error handling.\nSOURCE: https://github.com/googleapis/google-cloud-go/blob/main/datastore/README.md#_snippet_1\n\nLANGUAGE: go\nCODE:\n```\ntype Post struct {\n\tTitle       string\n\tBody        string `datastore:\",noindex\"`\n\tPublishedAt time.Time\n}\nkeys := []*datastore.Key{\n\tdatastore.NameKey(\"Post\", \"post1\", nil),\n\tdatastore.NameKey(\"Post\", \"post2\", nil),\n}\nposts := []*Post{\n\t{Title: \"Post 1\", Body: \"...\", PublishedAt: time.Now()},\n\t{Title: \"Post 2\", Body: \"...\", PublishedAt: time.Now()},\n}\nif _, err := client.PutMulti(ctx, keys, posts); err != nil {\n\tlog.Fatal(err)\n}\n```\n\n----------------------------------------\n\nTITLE: Closing the Cloud Logging Client in Go\nDESCRIPTION: Shows how to properly close the Cloud Logging client using the `Close` method. This is essential before program termination to ensure any buffered log entries are flushed to the Cloud Logging service. Error handling for the close operation is recommended.\nSOURCE: https://github.com/googleapis/google-cloud-go/blob/main/logging/README.md#_snippet_3\n\nLANGUAGE: go\nCODE:\n```\n```go\nerr = client.Close()\nif err != nil {\n   // TODO: Handle error.\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Installing Google Kubernetes Engine API Go Client with go get - Bash\nDESCRIPTION: This Bash snippet demonstrates how to install the Go client library for the Kubernetes Engine API using the 'go get' command. There are no external dependencies besides Go itself and appropriate network permissions to fetch the module. Running this command downloads and prepares the specified package for use in your Go projects.\nSOURCE: https://github.com/googleapis/google-cloud-go/blob/main/container/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngo get cloud.google.com/go/container\n```\n\n----------------------------------------\n\nTITLE: Subscribing to Messages using Pub/Sub Lite in Go\nDESCRIPTION: Shows how to set up a SubscriberClient and handle incoming messages for a specified Pub/Sub Lite subscription in Go. Key dependencies are the Pub/Sub Lite client libraries and a configured context. The code demonstrates using a callback function to process each received message, acknowledging messages after processing with Ack. Cancellation of message receipt is managed via context.WithCancel. This pattern supports scalable, event-driven message processing, but requires careful error handling and graceful termination.\nSOURCE: https://github.com/googleapis/google-cloud-go/blob/main/pubsublite/README.md#_snippet_2\n\nLANGUAGE: go\nCODE:\n```\n// Create a SubscriberClient for subscription1 in zone us-central1-b.\nconst subscription = \"projects/project-id/locations/us-central1-b/subscriptions/subscription1\"\nsubscriber, err := pscompat.NewSubscriberClient(ctx, subscription)\nif err != nil {\n\tlog.Fatal(err)\n}\n\n// Use a callback to receive messages.\n// Call cancel() to stop receiving messages.\ncctx, cancel := context.WithCancel(ctx)\nerr = subscriber.Receive(cctx, func(ctx context.Context, m *pubsub.Message) {\n\tfmt.Println(m.Data)\n\tm.Ack() // Acknowledge that we've consumed the message.\n})\nif err != nil {\n\tlog.Println(err)\n}\n```\n\n----------------------------------------\n\nTITLE: Installing the Lustre Go Client Library\nDESCRIPTION: This command uses the Go package manager (`go get`) to download and install the Google Cloud Managed Lustre API client library package (`cloud.google.com/go/lustre`) into the local Go workspace. This makes the library available for import in Go projects.\nSOURCE: https://github.com/googleapis/google-cloud-go/blob/main/lustre/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngo get cloud.google.com/go/lustre\n```\n\n----------------------------------------\n\nTITLE: Installing Cloud Workstations API Client - Go - Bash\nDESCRIPTION: This snippet demonstrates how to install the Cloud Workstations Go client library using the Go module system. The 'go get cloud.google.com/go/workstations' command fetches and adds the latest module version to the current project's dependencies. Go (version 1.17 or newer) and a properly initialized Go module (go.mod) are required. Input is the shell command; output is the installation of the Go module for use in a Go project. The command should be run from the root of your Go project directory.\nSOURCE: https://github.com/googleapis/google-cloud-go/blob/main/workstations/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngo get cloud.google.com/go/workstations\n```\n\n----------------------------------------\n\nTITLE: Configuring OpenTelemetry-Go - OpenCensus Bridge with Cloud Trace in Go\nDESCRIPTION: This Go code demonstrates how to initialize OpenTelemetry for Google Cloud Trace, including setting up a resource detector for GCP, creating a trace exporter, and configuring a TracerProvider. It specifically shows how to bridge OpenCensus traces to the OpenTelemetry system using `otel/bridge/opencensus`, allowing applications with mixed instrumentation to export traces uniformly via OpenTelemetry. Requires necessary OpenTelemetry, GCP detector, and Google Cloud Operations Go exporter packages.\nSOURCE: https://github.com/googleapis/google-cloud-go/blob/main/debug.md#_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nimport (\n    \"context\"\n    \"log\"\n    \"os\"\n    texporter \"github.com/GoogleCloudPlatform/opentelemetry-operations-go/exporter/trace\"\n    octrace \"go.opencensus.io/trace\"\n    \"go.opentelemetry.io/contrib/detectors/gcp\"\n    \"go.opentelemetry.io/otel\"\n    \"go.opentelemetry.io/otel/bridge/opencensus\"\n    \"go.opentelemetry.io/otel/sdk/resource\"\n    sdktrace \"go.opentelemetry.io/otel/sdk/trace\"\n    semconv \"go.opentelemetry.io/otel/semconv/v1.7.0\"\n)\n\nfunc main() {\n    // Create exporter.\n    ctx := context.Background()\n    projectID := os.Getenv(\"GOOGLE_CLOUD_PROJECT\")\n    exporter, err := texporter.New(texporter.WithProjectID(projectID))\n    if err != nil {\n        log.Fatalf(\"texporter.New: %v\", err)\n    }\n    // Identify your application using resource detection\n    res, err := resource.New(ctx,\n        // Use the GCP resource detector to detect information about the GCP platform\n        resource.WithDetectors(gcp.NewDetector()),\n        // Keep the default detectors\n        resource.WithTelemetrySDK(),\n        // Add your own custom attributes to identify your application\n        resource.WithAttributes(\n            semconv.ServiceNameKey.String(\"my-application\"),\n        ),\n    )\n    if err != nil {\n        log.Fatalf(\"resource.New: %v\", err)\n    }\n    // Create trace provider with the exporter.\n    //\n    // By default it uses AlwaysSample() which samples all traces.\n    // In a production environment or high QPS setup please use\n    // probabilistic sampling.\n    // Example:\n    //   tp := sdktrace.NewTracerProvider(sdktrace.WithSampler(sdktrace.TraceIDRatioBased(0.0001)), ...)\n    tp := sdktrace.NewTracerProvider(\n        sdktrace.WithBatcher(exporter),\n        sdktrace.WithResource(res),\n    )\n    defer tp.Shutdown(ctx) // flushes any pending spans, and closes connections.\n    otel.SetTracerProvider(tp)\n    tracer := otel.GetTracerProvider().Tracer(\"example.com/trace\")\n    // Configure the OpenCensus tracer to use the bridge.\n    octrace.DefaultTracer = opencensus.NewTracer(tracer)\n    // Use otel tracer to create spans...\n}\n\n```\n\n----------------------------------------\n\nTITLE: Installing Google Cloud App Hub API Go Client Library - Bash\nDESCRIPTION: This Bash snippet demonstrates how to install the App Hub API Go client by running the go get command. It requires Go to be installed and configured on the system. The command downloads and adds the cloud.google.com/go/apphub module to your project dependencies. No additional parameters are needed, and the output will be the inclusion of the App Hub API client in your Go module's dependency list.\nSOURCE: https://github.com/googleapis/google-cloud-go/blob/main/apphub/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngo get cloud.google.com/go/apphub\n\n```\n\n----------------------------------------\n\nTITLE: Installing Cloud Build API Go Client Library – Bash\nDESCRIPTION: This snippet instructs how to install the official Go client library for the Google Cloud Build API using Go's package management tool. Requires Go to be installed and configured in the user's environment. The 'go get' command fetches and installs the latest available version of the 'cloud.google.com/go/cloudbuild' package; no additional parameters are needed beyond the package path. Successful execution of this command will allow Go projects to import and use the Cloud Build client.\nSOURCE: https://github.com/googleapis/google-cloud-go/blob/main/cloudbuild/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngo get cloud.google.com/go/cloudbuild\n```\n\n----------------------------------------\n\nTITLE: Performing Fast GCS Object Listing with Dataflux in Go\nDESCRIPTION: Demonstrates configuring and using the Dataflux lister for accelerated object listing in a GCS bucket. It sets up `dataflux.ListerInput` specifying the bucket, parallelism level, batch size, and an optional filter query. It then creates the lister using `dataflux.NewLister` and iterates through batches of objects using `df.NextBatch`, handling the `iterator.Done` signal and potential errors. The `defer close()` ensures resources are released.\nSOURCE: https://github.com/googleapis/google-cloud-go/blob/main/storage/dataflux/README.md#_snippet_1\n\nLANGUAGE: go\nCODE:\n```\n// storage.Query to filter objects that the user wants to list.\nquery := storage.Query{}\n// Input for fast-listing.\ndfopts := dataflux.ListerInput{\n    BucketName:\t\t\"bucket\",\n    Parallelism:\t500,\n    BatchSize:\t\t500000,\n    Query:\t\t\tquery,\n}\n\n// Construct a dataflux lister.\ndf, close = dataflux.NewLister(sc, dfopts)\ndefer close()\n\n// List objects in GCS bucket.\nfor {\n    objects, err := df.NextBatch(ctx)\n\n    if err == iterator.Done {\n        // No more objects in the bucket to list.\n        break\n        }\n    if err != nil {\n        log.Fatal(err)\n        }\n    // TODO: process objects\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Cloud Billing Go Library using Bash\nDESCRIPTION: This Bash command utilizes the `go get` tool to download and install the Google Cloud Billing client library for Go. It fetches the package from `cloud.google.com/go/billing` and adds it to the current Go workspace or project's module dependencies.\nSOURCE: https://github.com/googleapis/google-cloud-go/blob/main/billing/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngo get cloud.google.com/go/billing\n```\n\n----------------------------------------\n\nTITLE: Performing Simple Reads and Writes with Cloud Spanner in Go\nDESCRIPTION: This code performs an insert operation into a Cloud Spanner table ('Users') and then reads back a row by key using the Go client library. It uses client.Apply to execute a mutation and retrieves a row with client.Single().ReadRow, showing error handling after each operation. Dependencies include a previously-initialized Spanner client and context. Inputs are the table name, column names, and values for insertion; outputs include any errors and the requested row data if successful. Limitations: the 'Users' table and columns must exist in the database schema.\nSOURCE: https://github.com/googleapis/google-cloud-go/blob/main/spanner/README.md#_snippet_1\n\nLANGUAGE: go\nCODE:\n```\n// Simple Reads And Writes\n_, err = client.Apply(ctx, []*spanner.Mutation{\n\tspanner.Insert(\"Users\",\n\t\t[]string{\"name\", \"email\"},\n\t\t[]interface{}{\\\"alice\\\", \\\"a@example.com\\\"})})\nif err != nil {\n\tlog.Fatal(err)\n}\nrow, err := client.Single().ReadRow(ctx, \"Users\",\n\tspanner.Key{\"alice\"}, []string{\"email\"})\nif err != nil {\n\tlog.Fatal(err)\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Google Cloud Pub/Sub Client in Go\nDESCRIPTION: This snippet shows how to create a new Pub/Sub client using the cloud.google.com/go/pubsub Go package. It requires a context and a GCP project ID. The client is initialized before performing any Pub/Sub operations, and errors during client creation are handled by logging a fatal error. Prerequisites include a valid GCP project and configured authentication (e.g., service account).\nSOURCE: https://github.com/googleapis/google-cloud-go/blob/main/pubsub/README.md#_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nclient, err := pubsub.NewClient(ctx, \"project-id\")\nif err != nil {\n\tlog.Fatal(err)\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Google Cloud Error Reporting Client Library with Go - Bash\nDESCRIPTION: This snippet provides the Bash command to install the Google Cloud Error Reporting API client for Go using the 'go get' tool. Dependencies include Go and access to the cloud.google.com module proxy, and this command will fetch and add the library to your project's dependencies. Input is not required beyond executing the command in a shell; output will be the updated go.mod and go.sum files, plus the library source in your module cache.\nSOURCE: https://github.com/googleapis/google-cloud-go/blob/main/errorreporting/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngo get cloud.google.com/go/errorreporting\n\n```\n\n----------------------------------------\n\nTITLE: Querying BigQuery and Iterating Results in Go\nDESCRIPTION: This code executes a SQL query using the BigQuery Go client and iterates through the results. It starts by constructing a query against a public dataset, executes it with context 'ctx', and then uses an iterator to loop through the result set. Dependencies include 'cloud.google.com/go/bigquery', proper authentication, and optionally 'google.golang.org/api/iterator'. The query output is printed to standard output. Error handling is demonstrated for both query execution and result iteration.\nSOURCE: https://github.com/googleapis/google-cloud-go/blob/main/bigquery/README.md#_snippet_1\n\nLANGUAGE: go\nCODE:\n```\n// Construct a query.\nq := c.Query(`\n    SELECT year, SUM(number)\n    FROM [bigquery-public-data:usa_names.usa_1910_2013]\n    WHERE name = \"William\"\n    GROUP BY year\n    ORDER BY year\n`)\n// Execute the query.\nit, err := q.Read(ctx)\nif err != nil {\n\t// TODO: Handle error.\n}\n// Iterate through the results.\nfor {\n\tvar values []bigquery.Value\n\terr := it.Next(&values)\n\tif err == iterator.Done {  // from \"google.golang.org/api/iterator\"\n\t\tbreak\n\t}\n\tif err != nil {\n\t\t// TODO: Handle error.\n\t}\n\tfmt.Println(values)\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Text from Multimodal Input with Gemini Pro Vision in Go\nDESCRIPTION: This Go code snippet demonstrates initializing the 'gemini-pro-vision' model using the Vertex AI Go SDK client. It prepares multimodal input by wrapping image bytes as `genai.ImageData` and creating a `genai.Text` prompt. Finally, it calls the `GenerateContent` method with the context, image, and prompt to generate text based on the combined input, capturing the response and any potential error.\nSOURCE: https://github.com/googleapis/google-cloud-go/blob/main/vertexai/README.md#_snippet_0\n\nLANGUAGE: go\nCODE:\n```\n```go\nmodel := client.GenerativeModel(\"gemini-pro-vision\")\nimg := genai.ImageData(\"jpeg\", image_bytes)\nprompt := genai.Text(\"Please give me a recipe for this:\")\nresp, err := model.GenerateContent(ctx, img, prompt)\n```\n```\n\n----------------------------------------\n\nTITLE: Reading an Object from Google Cloud Storage in Go\nDESCRIPTION: This snippet shows how to read a specific object (\\\"object1\\\") from a Google Cloud Storage bucket using the initialized client in Go. Dependencies include the storage package, a valid context (ctx), and an io.Reader compatible method (io.ReadAll). Error handling ensures that both reader creation and reading failures are logged and terminate execution. Inputs include client, bucket, and object name; output is the content of the storage object as a byte slice. The object reader is deferred for closure to prevent resource leakage.\n\nSOURCE: https://github.com/googleapis/google-cloud-go/blob/main/internal/godocfx/testdata/golden/cloud.google.com/go/storage@v1.33.0/pkg-readme.md#_snippet_1\n\nLANGUAGE: Go\nCODE:\n```\n// Read the object1 from bucket.\nrc, err := client.Bucket(\"bucket\").Object(\"object1\").NewReader(ctx)\nif err != nil {\n\tlog.Fatal(err)\n}\ndefer rc.Close()\nbody, err := io.ReadAll(rc)\nif err != nil {\n\tlog.Fatal(err)\n}\n\n```\n\n----------------------------------------\n\nTITLE: Migrating BigQuery Table Creation in Go (v0.4.0)\nDESCRIPTION: Shows the updated approach for creating a BigQuery table. The `Client.CreateTable` method is deprecated in favor of chaining `Client.DatasetInProject`, `Table`, and `Create` methods.\nSOURCE: https://github.com/googleapis/google-cloud-go/blob/main/CHANGES.md#_snippet_18\n\nLANGUAGE: go\nCODE:\n```\nclient.CreateTable(ctx, \"project\", \"dataset\", \"table\")\n```\n\nLANGUAGE: go\nCODE:\n```\nclient.DatasetInProject(\"project\", \"dataset\").Table(\"table\").Create(ctx)\n```\n\n----------------------------------------\n\nTITLE: Installing the Cloud Filestore Go Client Library (Bash)\nDESCRIPTION: This command uses the Go toolchain (`go get`) to download and install the `cloud.google.com/go/filestore` package. This makes the Cloud Filestore Go client library available for use in Go projects. Requires the Go development environment to be set up.\nSOURCE: https://github.com/googleapis/google-cloud-go/blob/main/filestore/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngo get cloud.google.com/go/filestore\n```\n\n----------------------------------------\n\nTITLE: Installing Database Migration API Go Client using go get - Bash\nDESCRIPTION: This snippet provides the command to install the Database Migration API Go client library using Go's module-aware package management. It requires Go to be installed on your system. Running this command fetches and installs the 'cloud.google.com/go/clouddms' package as a dependency in your project. Ensure Go modules are enabled; the command outputs installation progress and success or any errors.\nSOURCE: https://github.com/googleapis/google-cloud-go/blob/main/clouddms/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngo get cloud.google.com/go/clouddms\n```\n\n----------------------------------------\n\nTITLE: Migrating BigQuery Job Read Operation in Go (v0.4.0)\nDESCRIPTION: Details the change from the general `Client.Read` method to the specific `Job.Read` method for reading results from a BigQuery job. Similar changes apply to reading from tables or queries.\nSOURCE: https://github.com/googleapis/google-cloud-go/blob/main/CHANGES.md#_snippet_20\n\nLANGUAGE: go\nCODE:\n```\nit, err := client.Read(ctx, job)\n```\n\nLANGUAGE: go\nCODE:\n```\nit, err := job.Read(ctx)\n```\n\n----------------------------------------\n\nTITLE: Installing Generative Language API Go Client Library - Bash\nDESCRIPTION: This bash snippet demonstrates how to install the Generative Language API client library for Go using the go get module command. Developers must have Go installed and ensure their GOPATH is configured. The command fetches and installs the package cloud.google.com/go/ai into the go module or the current project. No other parameters are required, and this step is foundational for utilizing the client library in Go projects.\nSOURCE: https://github.com/googleapis/google-cloud-go/blob/main/ai/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngo get cloud.google.com/go/ai\n```\n\n----------------------------------------\n\nTITLE: Installing Google Cloud Deploy Go Client Library using Go Get\nDESCRIPTION: This command uses the Go toolchain's `go get` command to download and install the `cloud.google.com/go/deploy` package. This makes the Google Cloud Deploy Go client library available in the user's Go workspace. It requires the Go programming language and toolchain to be installed and configured on the system.\nSOURCE: https://github.com/googleapis/google-cloud-go/blob/main/deploy/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngo get cloud.google.com/go/deploy\n```\n\n----------------------------------------\n\nTITLE: Migrating BigQuery Uploader Configuration in Go (v0.4.0)\nDESCRIPTION: Illustrates the change in configuring a BigQuery `Uploader`. While the method name `NewUploader` remains, configuration shifts from passing functional options like `bigquery.UploadIgnoreUnknownValues()` to setting boolean fields directly on the `Uploader` instance (e.g., `u.IgnoreUnknownValues = true`). Note: The 'after' example incorrectly retains the option in the `NewUploader` call; the primary change is setting fields.\nSOURCE: https://github.com/googleapis/google-cloud-go/blob/main/CHANGES.md#_snippet_31\n\nLANGUAGE: go\nCODE:\n```\nu := table.NewUploader(bigquery.UploadIgnoreUnknownValues())\n```\n\nLANGUAGE: go\nCODE:\n```\n// Corrected 'after' example based on description:\nu := table.NewUploader() // No options passed here\nu.IgnoreUnknownValues = true\n\n// Original 'after' example from text (potentially confusing):\n// u := table.NewUploader(bigquery.UploadIgnoreUnknownValues())\n// u.IgnoreUnknownValues = true\n```\n\n----------------------------------------\n\nTITLE: Installing Recommendations AI Client with Go Modules - Bash\nDESCRIPTION: This snippet demonstrates how to install the Recommendations AI Go client library using the Go module system. It requires Go to be installed and configured on the user's system. By running this command in the terminal, the library is added as a dependency to the current Go module. No inputs other than the command itself are required, and the primary output is an updated go.mod file with the new dependency.\nSOURCE: https://github.com/googleapis/google-cloud-go/blob/main/recommendationengine/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngo get cloud.google.com/go/recommendationengine\n\n```\n\n----------------------------------------\n\nTITLE: Migrating Storage Object Listing in Go (v0.3.0)\nDESCRIPTION: Illustrates the change from `BucketHandle.List` to the iterator pattern using `BucketHandle.Objects`. The new approach uses `iter.Next()` within a loop, checking for `iterator.Done` to signal the end of results.\nSOURCE: https://github.com/googleapis/google-cloud-go/blob/main/CHANGES.md#_snippet_33\n\nLANGUAGE: go\nCODE:\n```\nfor query != nil {\n    objs, err := bucket.List(d.ctx, query)\n    if err != nil { ... }\n    query = objs.Next\n    for _, obj := range objs.Results {\n        fmt.Println(obj)\n    }\n}\n```\n\nLANGUAGE: go\nCODE:\n```\niter := bucket.Objects(d.ctx, query)\nfor {\n    obj, err := iter.Next()\n    if err == iterator.Done {\n        break\n    }\n    if err != nil { ... }\n    fmt.Println(obj)\n}\n```\n\n----------------------------------------\n\nTITLE: Migrating Storage Bucket Creation in Go (v0.3.0)\nDESCRIPTION: Shows the migration from using a separate `AdminClient` to create a GCS bucket to using methods on the main `Client`. `AdminClient.CreateBucket` is replaced by `client.Bucket(bucketName).Create(ctx, projectID, attrs)`.\nSOURCE: https://github.com/googleapis/google-cloud-go/blob/main/CHANGES.md#_snippet_32\n\nLANGUAGE: go\nCODE:\n```\nadminClient.CreateBucket(ctx, bucketName, attrs)\n```\n\nLANGUAGE: go\nCODE:\n```\nclient.Bucket(bucketName).Create(ctx, projectID, attrs)\n```\n\n----------------------------------------\n\nTITLE: Installing VMware Engine Go Client Library with Go Modules - Bash\nDESCRIPTION: This snippet demonstrates the command needed to install the VMware Engine API Go client library using Go modules. The 'go get' command fetches and adds the 'cloud.google.com/go/vmwareengine' library as a dependency to your Go project, updating go.mod and go.sum files as necessary. Prior to running this command, ensure that Go is installed and your terminal is in the desired project directory. The command does not require additional input parameters and outputs updated dependency files in your Go module.\nSOURCE: https://github.com/googleapis/google-cloud-go/blob/main/vmwareengine/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngo get cloud.google.com/go/vmwareengine\n```\n\n----------------------------------------\n\nTITLE: Installing Cloud Private Catalog API Go Client Library with Go Modules - Bash\nDESCRIPTION: This snippet demonstrates how to install the Go client library for the Cloud Private Catalog API using the Go modules system. To execute this command, you need to have Go installed and modules enabled in your project. Running this command adds the 'cloud.google.com/go/privatecatalog' dependency to your project. The 'go get' tool will fetch the package and update your 'go.mod' and 'go.sum' files accordingly.\nSOURCE: https://github.com/googleapis/google-cloud-go/blob/main/privatecatalog/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngo get cloud.google.com/go/privatecatalog\n```\n\n----------------------------------------\n\nTITLE: Migrating Storage Object Conditional Operations (DoesNotExist) in Go (v0.3.0)\nDESCRIPTION: Shows how to specify a condition for an operation to proceed only if the object does not exist (generation match 0). `obj.WithConditions(storage.IfGenerationMatch(0))` is replaced by `obj.If(storage.Conditions{DoesNotExist: true})`.\nSOURCE: https://github.com/googleapis/google-cloud-go/blob/main/CHANGES.md#_snippet_39\n\nLANGUAGE: go\nCODE:\n```\nobj.WithConditions(storage.IfGenerationMatch(0))\n```\n\nLANGUAGE: go\nCODE:\n```\nobj.If(storage.Conditions{DoesNotExist: true})\n```\n\n----------------------------------------\n\nTITLE: Installing Google Cloud Shell API Client using Go Modules - Bash\nDESCRIPTION: This snippet provides the command to install the Go client library for Google Cloud Shell API using Go modules. Prerequisites include Go being installed and properly set up for module usage. The command downloads and adds the necessary dependency in your project's go.mod file. No parameters are required. The output is the addition of 'cloud.google.com/go/shell' as a dependency; ensure you use this command in your Go project's root directory.\nSOURCE: https://github.com/googleapis/google-cloud-go/blob/main/shell/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngo get cloud.google.com/go/shell\n```\n\n----------------------------------------\n\nTITLE: Installing the Network Connectivity Go Client Library\nDESCRIPTION: This command uses the 'go get' tool to download and install the Google Cloud Network Connectivity API client library for Go. Ensure Go is properly installed and configured in your environment before running this command.\nSOURCE: https://github.com/googleapis/google-cloud-go/blob/main/networkconnectivity/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngo get cloud.google.com/go/networkconnectivity\n```\n\n----------------------------------------\n\nTITLE: Faking gRPC TranslateText Service Response with a Test Server (Go)\nDESCRIPTION: This code defines a fake implementation of the gRPC TranslationServiceServer, suitable for testing code that interacts with the translation service. The fakeTranslationServer embeds the unimplemented server type to satisfy the interface and overrides TranslateText to return a canned response. This allows tests to simulate server behavior without the network or actual cloud resources. Requires the google.golang.org/genproto/googleapis/cloud/translate/v3 package.\nSOURCE: https://github.com/googleapis/google-cloud-go/blob/main/testing.md#_snippet_1\n\nLANGUAGE: Go\nCODE:\n```\nimport (\n        \"context\"\n\n        translatepb \"google.golang.org/genproto/googleapis/cloud/translate/v3\"\n)\n\ntype fakeTranslationServer struct {\n        translatepb.UnimplementedTranslationServiceServer\n}\n\nfunc (f *fakeTranslationServer) TranslateText(ctx context.Context, req *translatepb.TranslateTextRequest) (*translatepb.TranslateTextResponse, error) {\n        resp := &translatepb.TranslateTextResponse{\n                Translations: []*translatepb.Translation{\n                        &translatepb.Translation{\n                                TranslatedText: \"Hello World\",\n                        },\n                },\n        }\n        return resp, nil\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Serverless VPC Access API Client using Go Modules - Bash\nDESCRIPTION: This snippet demonstrates how to install the Go client library for the Serverless VPC Access API using the Go module system. It requires Go to be installed and module-aware. The command adds the dependency \"cloud.google.com/go/vpcaccess\" to your project's go.mod, enabling use of the VPC Access API in your Go applications. The snippet should be run in the root of your Go project. No additional input or configuration is necessary prior to running this command.\nSOURCE: https://github.com/googleapis/google-cloud-go/blob/main/vpcaccess/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngo get cloud.google.com/go/vpcaccess\n```\n\n----------------------------------------\n\nTITLE: Reading an Object from Google Cloud Storage in Go\nDESCRIPTION: This snippet shows how to read the contents of a specific object ('object1') located within a designated bucket ('bucket'). It utilizes an initialized `storage.Client` to obtain an `ObjectHandle`, creates a reader using `NewReader`, reads the entire object content using `io.ReadAll`, and ensures the reader is closed using `defer rc.Close()`. Error handling is included for both reader creation and content reading.\nSOURCE: https://github.com/googleapis/google-cloud-go/blob/main/storage/README.md#_snippet_1\n\nLANGUAGE: go\nCODE:\n```\n// Read the object1 from bucket.\nrc, err := client.Bucket(\"bucket\").Object(\"object1\").NewReader(ctx)\nif err != nil {\n\tlog.Fatal(err)\n}\ndefer rc.Close()\nbody, err := io.ReadAll(rc)\nif err != nil {\n\tlog.Fatal(err)\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Google Cloud Storage Client in Go\nDESCRIPTION: Initializes a standard Google Cloud Storage client using `storage.NewClient`. It requires a `context.Context` and includes basic error handling. This client instance is necessary before creating a Dataflux lister.\nSOURCE: https://github.com/googleapis/google-cloud-go/blob/main/storage/dataflux/README.md#_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nctx := context.Background()\nclient, err := storage.NewClient(ctx)\nif err != nil {\n    log.Fatal(err)\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Google Cloud Storage Client in Go\nDESCRIPTION: This snippet demonstrates how to initialize a Google Cloud Storage client using the Go SDK. It requires importing the storage package (\\\"cloud.google.com/go/storage\\\") and providing a context object (ctx). If client creation fails, the error is logged and the program terminates. Inputs include a valid context, and the output is a storage.Client instance for subsequent cloud operations.\n\nSOURCE: https://github.com/googleapis/google-cloud-go/blob/main/internal/godocfx/testdata/golden/cloud.google.com/go/storage@v1.33.0/pkg-readme.md#_snippet_0\n\nLANGUAGE: Go\nCODE:\n```\nclient, err := storage.NewClient(ctx)\nif err != nil {\n\tlog.Fatal(err)\n}\n\n```\n\n----------------------------------------\n\nTITLE: Defining an Interface for the Translate Client with Testability in Mind (Go)\nDESCRIPTION: This snippet defines a Go interface, TranslationClient, that includes only the TranslateText method. This enables injecting mock or fake implementations for testing, while the real client struct implicitly satisfies the interface. No dependencies are required except a compatible TranslateText method, facilitating more flexible and mockable code design.\nSOURCE: https://github.com/googleapis/google-cloud-go/blob/main/testing.md#_snippet_3\n\nLANGUAGE: Go\nCODE:\n```\ntype TranslationClient interface {\n        TranslateText(ctx context.Context, req *translatepb.TranslateTextRequest, opts ...gax.CallOption) (*translatepb.TranslateTextResponse, error)\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Google Maps Platform Go Package\nDESCRIPTION: This command utilizes the Go toolchain's `go get` command to download and install the necessary Go package (`cloud.google.com/go/maps`) for interacting with Google Maps Platform APIs. Running this command adds the package as a dependency to the current Go project.\nSOURCE: https://github.com/googleapis/google-cloud-go/blob/main/maps/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngo get cloud.google.com/go/maps\n```\n\n----------------------------------------\n\nTITLE: Installing Cloud Memorystore for Memcached Client using Go Modules - Bash\nDESCRIPTION: This snippet demonstrates how to install the Go client library for Cloud Memorystore for Memcached using Go modules. It requires the Go programming language to be installed and active Go modules support. The command fetches and adds the 'cloud.google.com/go/memcache' library to your project's dependencies. No parameters are needed; simply run the command in your terminal from your project root directory. The main output is the updated module dependencies and availability of the Memcached client for import in Go code.\nSOURCE: https://github.com/googleapis/google-cloud-go/blob/main/memcache/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngo get cloud.google.com/go/memcache\n\n```\n\n----------------------------------------\n\nTITLE: Updating Pub/Sub Push Config in Go (v0.9.0+)\nDESCRIPTION: Illustrates the recommended way since v0.9.0 to update a Pub/Sub subscription's configuration, specifically the push endpoint, using the `Update` method with a `SubscriptionConfigToUpdate` struct. Requires an initialized subscription client (`sub`) and a context (`ctx`).\nSOURCE: https://github.com/googleapis/google-cloud-go/blob/main/CHANGES.md#_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nsub.Update(ctx, pubsub.SubscriptionConfigToUpdate{\n    PushConfig: &pubsub.PushConfig{Endpoint: \"https://example.com/push\"},\n})\n```\n\n----------------------------------------\n\nTITLE: Installing Google Cloud Workflows Client Library in Go - Bash\nDESCRIPTION: This snippet shows how to install the Google Cloud Workflows API client library for Go using the 'go get' command. The prerequisite is to have Go installed and properly configured on your system. Running this command fetches and adds the workflows library as a dependency in your Go project. The main parameter is the import path to the desired library. The expected output is that the package is downloaded and listed in your go.mod file; no additional configuration is included in this step.\nSOURCE: https://github.com/googleapis/google-cloud-go/blob/main/workflows/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngo get cloud.google.com/go/workflows\n\n```\n\n----------------------------------------\n\nTITLE: Installing Cloud IoT Go Client Package - Bash\nDESCRIPTION: This bash command installs the cloud.google.com/go/iot package, providing the Cloud IoT API client library for Go. It requires the Go toolchain (go command) to be installed and set up in the environment. Running this command will fetch the latest version of the package and update go.mod as needed. No special input parameters are required, and the output is the updated module dependencies in the local project.\nSOURCE: https://github.com/googleapis/google-cloud-go/blob/main/iot/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngo get cloud.google.com/go/iot\n\n```\n\n----------------------------------------\n\nTITLE: Installing the Go API Keys Client Library\nDESCRIPTION: This command uses the Go package manager (`go get`) to download and install the Google Cloud API Keys client library for Go (`cloud.google.com/go/apikeys`). This makes the library available for use in Go projects.\nSOURCE: https://github.com/googleapis/google-cloud-go/blob/main/apikeys/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngo get cloud.google.com/go/apikeys\n```\n\n----------------------------------------\n\nTITLE: Logging Asynchronously with Cloud Logging in Go\nDESCRIPTION: Shows how to perform asynchronous logging using the Go client library. It retrieves a logger instance for a specific log name ('my-log') from the client and then uses the `Log` method to send an entry. Entries are buffered and flushed periodically.\nSOURCE: https://github.com/googleapis/google-cloud-go/blob/main/logging/README.md#_snippet_1\n\nLANGUAGE: go\nCODE:\n```\n```go\nlogger := client.Logger(\"my-log\")\nlogger.Log(logging.Entry{Payload: \"something happened!\"})\n```\n```\n\n----------------------------------------\n\nTITLE: Managing ReadOnlyTransaction Resource Cleanup in Go for Spanner\nDESCRIPTION: This snippet shows the recommended approach for ensuring proper cleanup of a ReadOnlyTransaction by deferring txn.Close() after creation. Not closing a transaction can cause session leaks and block the application due to an exhausted session pool. The dependencies are an initialized Spanner client and context. The function takes no additional parameters and ensures resources are released by closing transactions correctly. Correct resource management avoids exhaustion of the session pool and supports application scalability.\nSOURCE: https://github.com/googleapis/google-cloud-go/blob/main/spanner/README.md#_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nclient, err := spanner.NewClient(ctx, \"projects/P/instances/I/databases/D\")\nif err != nil {\n  log.Fatal(err)\n}\ntxn := client.ReadOnlyTransaction()\ndefer txn.Close()\n```\n\n----------------------------------------\n\nTITLE: Creating Complete Datastore Keys (Name/ID) in Go (v0.5.0+)\nDESCRIPTION: Illustrates the usage of the `NameKey` and `IDKey` functions, introduced in v0.5.0, for creating complete Datastore keys using a string name or an integer ID respectively. These replace `NewKey` and do not require a context. Namespace must be set separately on the returned key if needed.\nSOURCE: https://github.com/googleapis/google-cloud-go/blob/main/CHANGES.md#_snippet_16\n\nLANGUAGE: go\nCODE:\n```\nNameKey(kind, name, parent)\nIDKey(kind, id, parent)\n```\n\n----------------------------------------\n\nTITLE: Installing Binary Authorization Go Client using go get\nDESCRIPTION: This shell command uses the Go package manager's `go get` command to download and install the Go client library for the Google Cloud Binary Authorization API. This makes the package available for import in Go projects. Requires Go environment to be set up.\nSOURCE: https://github.com/googleapis/google-cloud-go/blob/main/binaryauthorization/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngo get cloud.google.com/go/binaryauthorization\n```\n\n----------------------------------------\n\nTITLE: Installing Secret Manager API Go Client Library (Go) - Bash\nDESCRIPTION: This bash snippet provides a command to install the Google Cloud Secret Manager Go client library using Go's module system. The command requires Go to be installed and properly set up on your system. Inputting this command will fetch the latest version of the library and add it as a dependency in your current Go module project. There are no input parameters; the output will be the library installed and ready for use in your project.\nSOURCE: https://github.com/googleapis/google-cloud-go/blob/main/secretmanager/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngo get cloud.google.com/go/secretmanager\n\n```\n\n----------------------------------------\n\nTITLE: Installing Secure Source Manager Go Client Library\nDESCRIPTION: This command uses the Go package manager (`go get`) to download and install the Secure Source Manager client library for Go. Running this command makes the `cloud.google.com/go/securesourcemanager` package available in the local Go environment for use in projects.\nSOURCE: https://github.com/googleapis/google-cloud-go/blob/main/securesourcemanager/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngo get cloud.google.com/go/securesourcemanager\n```\n\n----------------------------------------\n\nTITLE: Installing Google Cloud Document AI Client Library in Go (Bash)\nDESCRIPTION: This snippet demonstrates how to install the Cloud Document AI API client library for Go using Go modules. The command 'go get cloud.google.com/go/documentai' pulls the latest version of the library and adds it to the project's go.mod file. This step is required before importing or using any Document AI features within a Go project. The command is meant to be run from the root of your Go module-enabled project using a Bash shell.\nSOURCE: https://github.com/googleapis/google-cloud-go/blob/main/documentai/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngo get cloud.google.com/go/documentai\n```\n\n----------------------------------------\n\nTITLE: Mocking the TranslateText Method for Unit Testing (Go)\nDESCRIPTION: This code defines a lightweight mock client struct and implements the TranslateText method to return a fixed response for test purposes. It shows how to use the mock in a unit test of the TranslateTextWithInterfaceClient function to validate result handling. Dependencies include gax-go and the translatepb protobuf definitions. The test checks for expected output and error handling.\nSOURCE: https://github.com/googleapis/google-cloud-go/blob/main/testing.md#_snippet_5\n\nLANGUAGE: Go\nCODE:\n```\nimport (\n        \"context\"\n        \"testing\"\n\n        \"github.com/googleapis/gax-go/v2\"\n        translatepb \"google.golang.org/genproto/googleapis/cloud/translate/v3\"\n)\n\ntype mockClient struct{}\n\nfunc (*mockClient) TranslateText(_ context.Context, req *translatepb.TranslateTextRequest, opts ...gax.CallOption) (*translatepb.TranslateTextResponse, error) {\n        resp := &translatepb.TranslateTextResponse{\n                Translations: []*translatepb.Translation{\n                        &translatepb.Translation{\n                                TranslatedText: \"Hello World\",\n                        },\n                },\n        }\n        return resp, nil\n}\n\nfunc TestTranslateTextWithAbstractClient(t *testing.T) {\n        client := &mockClient{}\n        text, err := TranslateTextWithInterfaceClient(client, \"Hola Mundo\", \"en-US\")\n        if err != nil {\n                t.Fatal(err)\n        }\n        if text != \"Hello World\" {\n                t.Fatalf(\"got %q, want Hello World\", text)\n        }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Cloud Clients with gRPC Tracing in Go (v0.9.0+)\nDESCRIPTION: Shows how to initialize a Google Cloud client (e.g., `pubsub.NewClient`) with gRPC tracing enabled since v0.9.0, using `option.WithGRPCDialOption` and the interceptor obtained from an initialized `*trace.Client` (`tc`). This replaces the deprecated `trace.EnableGRPCTracing`.\nSOURCE: https://github.com/googleapis/google-cloud-go/blob/main/CHANGES.md#_snippet_7\n\nLANGUAGE: go\nCODE:\n```\nc, err := pubsub.NewClient(ctx, \"project-id\", option.WithGRPCDialOption(grpc.WithUnaryInterceptor(tc.GRPCClientInterceptor())))\nif err != nil {\n    ...\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Nested Structs for Datastore Entities in Go (v0.5.0+)\nDESCRIPTION: Provides an example Go struct `State` demonstrating the support for nested structs containing slices, which became encodable as Datastore Entity values starting from v0.5.0.\nSOURCE: https://github.com/googleapis/google-cloud-go/blob/main/CHANGES.md#_snippet_10\n\nLANGUAGE: go\nCODE:\n```\ntype State struct {\n  Cities  []struct{\n    Populations []int\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing a Google Cloud Storage Client in Go\nDESCRIPTION: This snippet demonstrates how to create a new `storage.Client` instance using the `storage.NewClient` function. It requires a valid context (`ctx`) and includes basic error handling to manage potential issues during client initialization. This client object is the entry point for interacting with Cloud Storage services.\nSOURCE: https://github.com/googleapis/google-cloud-go/blob/main/storage/README.md#_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nclient, err := storage.NewClient(ctx)\nif err != nil {\n\tlog.Fatal(err)\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Incomplete Datastore Key in Go (v0.5.0+)\nDESCRIPTION: Illustrates the usage of the `IncompleteKey` function, introduced in v0.5.0, for creating an incomplete Datastore key. It replaces `NewIncompleteKey` and does not require a context. Namespace must be set separately on the returned key if needed.\nSOURCE: https://github.com/googleapis/google-cloud-go/blob/main/CHANGES.md#_snippet_14\n\nLANGUAGE: go\nCODE:\n```\nIncompleteKey(kind, parent)\n```\n\n----------------------------------------\n\nTITLE: Initializing a Google Cloud Datastore Client in Go\nDESCRIPTION: This snippet shows how to create a new `datastore.Client` instance required to interact with the Cloud Datastore API. It takes a context (`ctx`) and the Google Cloud project ID as arguments. Basic error handling is included, logging a fatal error if client creation fails.\nSOURCE: https://github.com/googleapis/google-cloud-go/blob/main/datastore/README.md#_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nclient, err := datastore.NewClient(ctx, \"my-project-id\")\nif err != nil {\n\tlog.Fatal(err)\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Cloud Text-to-Speech API Go Client Library - Bash\nDESCRIPTION: This snippet shows the command to install the Cloud Text-to-Speech API client library for Go using the 'go get' tool. The user must have Go properly installed and configured on their system. Running this command will fetch the 'cloud.google.com/go/texttospeech' package and make it available for import in Go projects. The primary input is the package import path, and it outputs the installed package in the local Go environment.\nSOURCE: https://github.com/googleapis/google-cloud-go/blob/main/texttospeech/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngo get cloud.google.com/go/texttospeech\n\n```\n\n----------------------------------------\n\nTITLE: Running Integration Tests with go test Command - Shell\nDESCRIPTION: This snippet describes how to execute all integration tests in the Go project and in module-specific directories using the go test tool. It assumes that previous environment variable setup has been completed. Test verbosity is enabled with the -v flag, and the ./... pattern runs all packages at or under the current directory. The commands must be run from the project root or desired module subdirectory, and tests in other modules require directory navigation. Users must have valid Go environment settings and dependencies installed.\nSOURCE: https://github.com/googleapis/google-cloud-go/blob/main/CONTRIBUTING.md#_snippet_9\n\nLANGUAGE: sh\nCODE:\n```\n$ go test -v ./...\n\n# To run tests for specific modules:\n$ cd datastore\n$ go test -v ./...\n```\n\n----------------------------------------\n\nTITLE: Creating Datastore Indexes for Integration Tests - Bash\nDESCRIPTION: This snippet illustrates how to create indexes in Google Cloud Datastore for use in integration tests by specifying the database ID and project. Dependencies include the gcloud CLI and an index configuration YAML file. The command accepts a database ID and project ID as input and configures the indexes for the specified database.\nSOURCE: https://github.com/googleapis/google-cloud-go/blob/main/CONTRIBUTING.md#_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\n# Create the indexes for all the databases you want to use in the datastore integration tests. \n# Use empty string as databaseID or skip database flag for default database.\n$ gcloud alpha datastore indexes create --database=your-databaseID-1 --project=$GCLOUD_TESTS_GOLANG_PROJECT_ID testdata/index.yaml\n```\n\n----------------------------------------\n\nTITLE: Installing Google Cloud GKE Backup Client Library - Bash\nDESCRIPTION: This Bash snippet demonstrates how to install the Go client library for the Google Cloud Backup for GKE API via the go get command. It requires a working Go environment set up on your system. Running this command downloads and installs the library into your Go workspace, making it available for import and use in Go projects. No additional arguments are required, but network access is necessary to fetch the package.\nSOURCE: https://github.com/googleapis/google-cloud-go/blob/main/gkebackup/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngo get cloud.google.com/go/gkebackup\n```\n\n----------------------------------------\n\nTITLE: Installing Backup and DR Service API Client Library in Go using go get - Bash\nDESCRIPTION: Demonstrates how to install the cloud.google.com/go/backupdr Go package using the go get command. Requires the Go programming environment to be installed. The command fetches and adds the Backup and DR client library to your Go project. No parameters are required; simply run the command in your terminal within your Go workspace directory. Output is the addition of the dependency to your go.mod file. Ensure your Go environment is properly configured before execution.\nSOURCE: https://github.com/googleapis/google-cloud-go/blob/main/backupdr/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngo get cloud.google.com/go/backupdr\n```\n\n----------------------------------------\n\nTITLE: Provisioning Google Cloud Storage Bucket and ACLs for Integration Logging - Bash\nDESCRIPTION: This snippet guides users through creating a Google Cloud Storage bucket with specific ACL changes to set the Cloud Logging service account as an owner. Prerequisites include the gsutil tool, and the target bucket name must match the test project ID. These commands are used in setting up integration tests for logging sinks.\nSOURCE: https://github.com/googleapis/google-cloud-go/blob/main/CONTRIBUTING.md#_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\n# Creates a Google Cloud storage bucket with the same name as your test project,\n# and with the Cloud Logging service account as owner, for the sink\n# integration tests in logging.\n$ gsutil mb gs://$GCLOUD_TESTS_GOLANG_PROJECT_ID\n$ gsutil acl ch -g cloud-logs@google.com:O gs://$GCLOUD_TESTS_GOLANG_PROJECT_ID\n```\n\n----------------------------------------\n\nTITLE: Installing Cloud Asset API Go Client Library using go get - Bash\nDESCRIPTION: This snippet installs the Go client library for the Cloud Asset API using the `go get` command, which fetches and adds the package to the current Go module. Before running this, ensure that Go is installed and that you are working within an initialized Go module. The command expects a valid Go environment and internet access. Upon execution, it downloads the library source code and integrates it into the existing project's dependencies.\nSOURCE: https://github.com/googleapis/google-cloud-go/blob/main/asset/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngo get cloud.google.com/go/asset\n\n```\n\n----------------------------------------\n\nTITLE: Constructing Datastore Key with Struct Literal in Go (v0.5.0+)\nDESCRIPTION: Demonstrates creating a Datastore `Key` directly using a struct literal (`&Key{...}`), which is possible from v0.5.0 onwards because the `Key` struct fields (like Kind, ID, Namespace) were exported.\nSOURCE: https://github.com/googleapis/google-cloud-go/blob/main/CHANGES.md#_snippet_12\n\nLANGUAGE: go\nCODE:\n```\nk := &Key{Kind: \"Kind\",  ID: 37, Namespace: \"ns\"}\n```\n\n----------------------------------------\n\nTITLE: Initializing the Cloud Logging Client in Go\nDESCRIPTION: Demonstrates how to create a new Google Cloud Logging client in a Go application. It requires a `context.Background()` and the Google Cloud project ID. Error handling should be implemented to manage potential initialization failures.\nSOURCE: https://github.com/googleapis/google-cloud-go/blob/main/logging/README.md#_snippet_0\n\nLANGUAGE: go\nCODE:\n```\n```go\nctx := context.Background()\nclient, err := logging.NewClient(ctx, \"my-project\")\nif err != nil {\n   // TODO: Handle error.\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Installing the Developer Connect Go Library using Go Get (Bash)\nDESCRIPTION: This command utilizes the Go package manager (`go get`) to fetch and install the Go client library for the Google Cloud Developer Connect API from its repository. This is the standard method for adding the library dependency to a Go project. Requires the Go toolchain to be installed and properly configured in the environment.\nSOURCE: https://github.com/googleapis/google-cloud-go/blob/main/developerconnect/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngo get cloud.google.com/go/developerconnect\n```\n\n----------------------------------------\n\nTITLE: Installing Google Cloud Batch API Client Library - Bash\nDESCRIPTION: Shows the command to install the Google Cloud Batch API client library for Go using go get. Users must have Go installed and properly configured GOPATH and GOROOT. The command fetches and installs the latest version of the cloud.google.com/go/batch package and its dependencies. Successful execution results in the Batch API client library being available in the user's Go environment.\nSOURCE: https://github.com/googleapis/google-cloud-go/blob/main/batch/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngo get cloud.google.com/go/batch\n\n```\n\n----------------------------------------\n\nTITLE: Installing the Model Armor Go Client Library\nDESCRIPTION: This command uses the standard Go toolchain (`go get`) to download and install the `cloud.google.com/go/modelarmor` package. This makes the Model Armor API client library available for use in Go projects. Requires a working Go environment.\nSOURCE: https://github.com/googleapis/google-cloud-go/blob/main/modelarmor/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngo get cloud.google.com/go/modelarmor\n```\n\n----------------------------------------\n\nTITLE: Initializing Google Cloud Storage Client with Custom Credentials Object - Go\nDESCRIPTION: This Go snippet shows how to detect, construct, and supply a custom credentials object to a new Google Cloud Storage client instance. It uses the credentials.DetectDefault method to obtain a credentials.Credentials object, and option.WithAuthCredentials to pass this to storage.NewClient. This allows advanced users greater control over authentication selection and parsing. Requires cloud.google.com/go/auth/credentials and google.golang.org/api/option packages.\nSOURCE: https://github.com/googleapis/google-cloud-go/blob/main/README.md#_snippet_3\n\nLANGUAGE: go\nCODE:\n```\ncreds, err := credentials.DetectDefault(&credentials.DetectOptions{...})\n...\nclient, err := storage.NewClient(ctx, option.WithAuthCredentials(creds))\n```\n\n----------------------------------------\n\nTITLE: Installing the Memorystore Go Client Library\nDESCRIPTION: This command uses the Go toolchain's `go get` command to download and install the Google Cloud Memorystore client library package (`cloud.google.com/go/memorystore`) into the user's Go workspace. This makes the library available for import in Go projects.\nSOURCE: https://github.com/googleapis/google-cloud-go/blob/main/memorystore/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngo get cloud.google.com/go/memorystore\n```\n\n----------------------------------------\n\nTITLE: Installing Cloud Scheduler Go Client Library using go get - Bash\nDESCRIPTION: This snippet demonstrates how to install the Cloud Scheduler API Go client library using the Go module system. The command requires Go to be installed and configured in your environment. It pulls the package and necessary dependencies from cloud.google.com/go/scheduler into your project’s module context.\nSOURCE: https://github.com/googleapis/google-cloud-go/blob/main/scheduler/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngo get cloud.google.com/go/scheduler\n```\n\n----------------------------------------\n\nTITLE: Installing Google Cloud Service Management Client Library - Go - Bash\nDESCRIPTION: This snippet shows how to install the Go client library for the Google Cloud Service Management API using Go modules. It requires that Go (version compatible with the library) is installed on the system. The 'go get' command fetches and adds the 'cloud.google.com/go/servicemanagement' module to your project's dependencies. The command should be run from your Go project's root directory. No additional parameters are required, and there are no output files beyond Go module updates.\nSOURCE: https://github.com/googleapis/google-cloud-go/blob/main/servicemanagement/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngo get cloud.google.com/go/servicemanagement\n```\n\n----------------------------------------\n\nTITLE: Iterating BigQuery Rows with []Value Slice in Go (v0.6.0+)\nDESCRIPTION: Shows the recommended method since v0.6.0 for iterating through BigQuery query results using `RowIterator.Next` with a `[]Value` slice. This replaced the deprecated `ValueList` type.\nSOURCE: https://github.com/googleapis/google-cloud-go/blob/main/CHANGES.md#_snippet_9\n\nLANGUAGE: go\nCODE:\n```\nvar v []Value\n... it.Next(&v) ...\n```\n\n----------------------------------------\n\nTITLE: Creating a Bigtable Cluster for Testing with cbt - Shell\nDESCRIPTION: This shell command uses the cbt CLI to create a new Bigtable instance and cluster, specifically setting up a one-node cluster in the 'us-central1-b' region with SSD storage. 'cbt' must be installed and configured for your Google Cloud project prior to use. The command requires providing instance, display, and cluster names as positional parameters. It outputs status messages related to the creation process and helps contributors quickly set up required test infrastructure.\nSOURCE: https://github.com/googleapis/google-cloud-go/blob/main/bigtable/CONTRIBUTING.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n# Creates a one node cluster in us-central1 with SSD storage\ncbt createinstance <instance-name> <display-name> <cluster-name> us-central1-b 1 SSD\n```\n\n----------------------------------------\n\nTITLE: Migrating BigQuery Query Job Initiation in Go (v0.4.0)\nDESCRIPTION: Shows how to start a BigQuery query job that writes results to a table. The `client.Copy(ctx, table, query)` approach is replaced by configuring the destination table directly on the `Query` object and then calling `query.Run(ctx)`.\nSOURCE: https://github.com/googleapis/google-cloud-go/blob/main/CHANGES.md#_snippet_30\n\nLANGUAGE: go\nCODE:\n```\nclient.Copy(ctx, table, query)\n```\n\nLANGUAGE: go\nCODE:\n```\nquery.Run(ctx)\n```\n\n----------------------------------------\n\nTITLE: Publishing Messages using Pub/Sub Lite in Go\nDESCRIPTION: Illustrates how to create a PublisherClient and asynchronously publish messages to a Pub/Sub Lite topic in Go. Requires the client libraries, an initialized context, and correct topic resource naming. The main parameters are the context, the fully-qualified topic string, and the message payload (as bytes). Publishing is performed asynchronously, and the message ID can be retrieved later using the Get method. This approach enables high-throughput, low-latency publishing. Constraints include requiring valid client and topic configuration, and handling asynchronous result retrieval.\nSOURCE: https://github.com/googleapis/google-cloud-go/blob/main/pubsublite/README.md#_snippet_1\n\nLANGUAGE: go\nCODE:\n```\n// Create a PublisherClient for topic1 in zone us-central1-b.\n// See https://cloud.google.com/pubsub/lite/docs/locations for available regions\n// and zones.\nconst topic = \"projects/project-id/locations/us-central1-b/topics/topic1\"\npublisher, err := pscompat.NewPublisherClient(ctx, topic)\nif err != nil {\n\tlog.Fatal(err)\n}\n\n// Publish \"hello world\".\nres := publisher.Publish(ctx, &pubsub.Message{\n\tData: []byte(\"hello world\"),\n})\n// The publish happens asynchronously.\n// Later, you can get the result from res:\n...\nmsgID, err := res.Get(ctx)\nif err != nil {\n\tlog.Fatal(err)\n}\n```\n\n----------------------------------------\n\nTITLE: Installing NetApp Go Client Library via Go Get\nDESCRIPTION: This command uses the Go toolchain's `go get` command to download and install the `cloud.google.com/go/netapp` package. This makes the NetApp API client library available for use in Go projects. It requires the Go toolchain to be installed and configured in the system environment.\nSOURCE: https://github.com/googleapis/google-cloud-go/blob/main/netapp/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngo get cloud.google.com/go/netapp\n```\n\n----------------------------------------\n\nTITLE: Installing the Video API Go Package using Bash\nDESCRIPTION: This command uses the Go toolchain (`go get`) to download and install the Google Cloud Video API client library package for Go into the current Go workspace. This makes the library available for use in Go projects.\nSOURCE: https://github.com/googleapis/google-cloud-go/blob/main/video/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngo get cloud.google.com/go/video\n```\n\n----------------------------------------\n\nTITLE: Installing Google Cloud Network Services Client Library in Go - Bash\nDESCRIPTION: This snippet installs the Google Cloud Network Services client library for Go via the 'go get' command. It requires Go to be installed on the developer's system. Successful execution downloads and integrates the latest version of 'cloud.google.com/go/networkservices' into the Go module, making its APIs available for use in Go applications.\nSOURCE: https://github.com/googleapis/google-cloud-go/blob/main/networkservices/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngo get cloud.google.com/go/networkservices\n\n```\n\n----------------------------------------\n\nTITLE: Executing the Spanner Benchmark Script in Go via Shell\nDESCRIPTION: This shell command executes the Go benchmark script located at `spanner/benchmarks/benchmarks.go`. It accepts various command-line options (like `-wu`, `-et`, `-st`, etc.) and their corresponding values to configure the benchmark run. Refer to the configuration table for available options and their defaults.\nSOURCE: https://github.com/googleapis/google-cloud-go/blob/main/spanner/benchmarks/README.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngo run spanner/benchmarks/benchmarks.go <option1> <value1> <option2> <value2> ...\n```\n\n----------------------------------------\n\nTITLE: Installing Cloud Commerce Consumer Procurement Go Client Library Using Go Modules - Bash\nDESCRIPTION: This snippet shows the command to install the Google Cloud Commerce Consumer Procurement API Go client library using Go modules. It requires Go to be installed and configured with module support, and adds the dependency to your Go project. The key parameter is the module path 'cloud.google.com/go/commerce'. The command will download the library and update your go.mod file accordingly.\nSOURCE: https://github.com/googleapis/google-cloud-go/blob/main/commerce/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngo get cloud.google.com/go/commerce\n```\n\n----------------------------------------\n\nTITLE: Configuring gRPC Server Trace Interceptor via Client in Go (v0.9.0+)\nDESCRIPTION: Illustrates the recommended method since v0.9.0 for configuring a gRPC server's unary interceptor for tracing, by calling `tc.GRPCServerInterceptor()` on an initialized `*trace.Client` instance (`tc`).\nSOURCE: https://github.com/googleapis/google-cloud-go/blob/main/CHANGES.md#_snippet_4\n\nLANGUAGE: go\nCODE:\n```\ns := grpc.NewServer(grpc.UnaryInterceptor(tc.GRPCServerInterceptor()))\n```\n\n----------------------------------------\n\nTITLE: Installing Web Risk Go Client Library via go get - Bash\nDESCRIPTION: This snippet demonstrates how to add the Web Risk API client library in a Go project using the go get tool. It requires Go modules to be enabled in your environment, and the 'cloud.google.com/go/webrisk' package as the dependency. When executed, this command will download and install the Web Risk package into your module's dependencies, making its features available for development. The expected input is the shell command itself, and output is the updated go.mod and go.sum files.\nSOURCE: https://github.com/googleapis/google-cloud-go/blob/main/webrisk/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngo get cloud.google.com/go/webrisk\n```\n\n----------------------------------------\n\nTITLE: Migrating Storage Object Copy Operation in Go (v0.3.0)\nDESCRIPTION: Demonstrates the replacement of `ObjectHandle.CopyTo` with the `CopierFrom` pattern. `src.CopyTo(ctx, dst, nil)` becomes `dst.CopierFrom(src).Run(ctx)`.\nSOURCE: https://github.com/googleapis/google-cloud-go/blob/main/CHANGES.md#_snippet_34\n\nLANGUAGE: go\nCODE:\n```\nattrs, err := src.CopyTo(ctx, dst, nil)\n```\n\nLANGUAGE: go\nCODE:\n```\nattrs, err := dst.CopierFrom(src).Run(ctx)\n```\n\n----------------------------------------\n\nTITLE: Migrating BigQuery Table Update Operation in Go (v0.4.0)\nDESCRIPTION: Illustrates the replacement of `Table.Patch().Apply()` with `Table.Update()`. The new method takes a `bigquery.TableMetadataToUpdate` struct to specify the fields to be updated.\nSOURCE: https://github.com/googleapis/google-cloud-go/blob/main/CHANGES.md#_snippet_25\n\nLANGUAGE: go\nCODE:\n```\np := table.Patch()\np.Description(\"new description\")\nmetadata, err := p.Apply(ctx)\n```\n\nLANGUAGE: go\nCODE:\n```\nmetadata, err := table.Update(ctx, bigquery.TableMetadataToUpdate{\n    Description: \"new description\",\n})\n```\n\n----------------------------------------\n\nTITLE: Migrating BigQuery GCS Load Operation in Go (v0.4.0)\nDESCRIPTION: Demonstrates how to load data from Google Cloud Storage (GCS) into a BigQuery table. The generic `client.Copy(ctx, table, gcsRef)` is replaced by the more specific `table.LoaderFrom(gcsRef).Run(ctx)`.\nSOURCE: https://github.com/googleapis/google-cloud-go/blob/main/CHANGES.md#_snippet_26\n\nLANGUAGE: go\nCODE:\n```\nclient.Copy(ctx, table, gcsRef)\n```\n\nLANGUAGE: go\nCODE:\n```\ntable.LoaderFrom(gcsRef).Run(ctx)\n```\n\n----------------------------------------\n\nTITLE: Installing Cloud Composer Go Client Library with Go Get - Bash\nDESCRIPTION: Demonstrates how to install the Cloud Composer API Go client library using the Go package manager (go get). Requires Go to be installed. Simply run the provided command in your shell to fetch the cloud.google.com/go/orchestration package and add it to your Go modules. This command expects network connectivity and a working Go environment.\nSOURCE: https://github.com/googleapis/google-cloud-go/blob/main/orchestration/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngo get cloud.google.com/go/orchestration\n```\n\n----------------------------------------\n\nTITLE: Installing Artifact Registry API Client Library via go get - Bash\nDESCRIPTION: This snippet demonstrates how to install the Go Client Library for the Artifact Registry API using the Go tooling's 'go get' command. It requires that Go is installed and properly set up on your system. Running this command fetches and installs the latest released version of the client package 'cloud.google.com/go/artifactregistry' into your Go module, making Artifact Registry APIs available for your Go projects.\nSOURCE: https://github.com/googleapis/google-cloud-go/blob/main/artifactregistry/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngo get cloud.google.com/go/artifactregistry\n```\n\n----------------------------------------\n\nTITLE: Migrating BigQuery Table Copy Operation in Go (v0.4.0)\nDESCRIPTION: Demonstrates how to copy data from one BigQuery table to another. The `client.Copy(ctx, dstTable, srcTable)` is replaced by `dst.Table.CopierFrom(srcTable).Run(ctx)`. Options are set as fields on the returned `Copier`.\nSOURCE: https://github.com/googleapis/google-cloud-go/blob/main/CHANGES.md#_snippet_29\n\nLANGUAGE: go\nCODE:\n```\nclient.Copy(ctx, dstTable, srcTable)\n```\n\nLANGUAGE: go\nCODE:\n```\ndst.Table.CopierFrom(srcTable).Run(ctx)\n```\n\n----------------------------------------\n\nTITLE: Migrating BigQuery Iterator Page Size Configuration in Go (v0.4.0)\nDESCRIPTION: Explains how to set the maximum number of results per request (page size) for a `RowIterator`. The `RecordsPerRequest(n)` option is replaced by setting the `MaxSize` field on the iterator's `PageInfo()`.\nSOURCE: https://github.com/googleapis/google-cloud-go/blob/main/CHANGES.md#_snippet_22\n\nLANGUAGE: go\nCODE:\n```\nit.PageInfo().MaxSize = n\n```\n\n----------------------------------------\n\nTITLE: Migrating BigQuery Table Extract to GCS Operation in Go (v0.4.0)\nDESCRIPTION: Explains how to extract data from a BigQuery table to Google Cloud Storage (GCS). The `client.Copy(ctx, gcsRef, table)` method is replaced by `table.ExtractorTo(gcsRef).Run(ctx)`. Options are set as fields on the returned `Extractor`.\nSOURCE: https://github.com/googleapis/google-cloud-go/blob/main/CHANGES.md#_snippet_28\n\nLANGUAGE: go\nCODE:\n```\nclient.Copy(ctx, gcsRef, table)\n```\n\nLANGUAGE: go\nCODE:\n```\ntable.ExtractorTo(gcsRef).Run(ctx)\n```\n\n----------------------------------------\n\nTITLE: Installing Google Cloud Recommender API Go Client using go get - Bash\nDESCRIPTION: This bash snippet demonstrates how to install the Google Cloud Recommender API client library for Go using the go get command. The dependency 'cloud.google.com/go/recommender' will be added to the user's Go module, making the Recommender API accessible from Go applications. Prerequisite: Go development environment with support for modules. The command takes no inputs and has no output other than updating go.mod and go.sum.\nSOURCE: https://github.com/googleapis/google-cloud-go/blob/main/recommender/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngo get cloud.google.com/go/recommender\n```\n\n----------------------------------------\n\nTITLE: Automatically Cleaning Inactive Transactions in Spanner Session Pool (Go)\nDESCRIPTION: This code configures the Spanner session pool to automatically warn and close inactive (leaked or long-running) transactions by setting ActionOnInactiveTransaction to spanner.WarnAndClose. Like the previous snippet, it enables stack trace tracking and removes problematic sessions from the pool, effectively preventing indefinite resource exhaustion. Dependencies are similar: context, database string, and session pool configuration. Outputs include diagnostic logs and automated session recycling. This method is suitable for applications at scale where unattended transaction leaks could otherwise lead to outages.\nSOURCE: https://github.com/googleapis/google-cloud-go/blob/main/spanner/README.md#_snippet_4\n\nLANGUAGE: go\nCODE:\n```\nsessionPoolConfig := spanner.SessionPoolConfig{\n    TrackSessionHandles: true,\n    InactiveTransactionRemovalOptions: spanner.InactiveTransactionRemovalOptions{\n      ActionOnInactiveTransaction: spanner.WarnAndClose,\n    },\n}\nclient, err := spanner.NewClientWithConfig(\n\tctx, database, spanner.ClientConfig{SessionPoolConfig: sessionPoolConfig},\n)\nif err != nil {\nlog.Fatal(err)\n}\ndefer client.Close()\n\n// Example Log message for when transaction is recycled\n// session <session-info> checked out of pool at <session-checkout-time> is long running and will be removed due to possible session leak for goroutine \n// <Stack Trace of transaction>\n\n```\n\n----------------------------------------\n\nTITLE: Installing Cloud Controls Partner API Client with Go - Bash\nDESCRIPTION: This snippet demonstrates how to install the Cloud Controls Partner API client for Go using the Go package manager. It requires Go to be installed and properly configured in your environment. Running this command fetches and adds the 'cloud.google.com/go/cloudcontrolspartner' module to your Go project\\'s dependencies. No input other than the command itself is expected, and the expected output is successful installation of the package into your module\\'s go.mod file.\nSOURCE: https://github.com/googleapis/google-cloud-go/blob/main/cloudcontrolspartner/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngo get cloud.google.com/go/cloudcontrolspartner\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Spanner Client gRPC Connection Pool in Go\nDESCRIPTION: This snippet demonstrates how to configure the gRPC connection pool size when creating a Spanner client in Go using `NewClientWithConfig`. It contrasts the deprecated `ClientConfig.NumChannels` field with the recommended `option.WithGRPCConnectionPool` function option introduced in v1.3.0. The example shows initializing a client with 8 gRPC connections using both methods.\nSOURCE: https://github.com/googleapis/google-cloud-go/blob/main/spanner/CHANGES.md#_snippet_1\n\nLANGUAGE: go\nCODE:\n```\n// numChannels (deprecated):\nerr, client := NewClientWithConfig(ctx, database, ClientConfig{NumChannels: 8})\n\n// gRPC connection pool:\nerr, client := NewClientWithConfig(ctx, database, ClientConfig{}, option.WithGRPCConnectionPool(8))\n```\n\n----------------------------------------\n\nTITLE: Deprecated gRPC Client Trace Interceptor Setup in Go (Pre-v0.9.0)\nDESCRIPTION: Shows the previous method for setting up a gRPC client connection with tracing using `trace.GRPCClientInterceptor()` before v0.9.0. This involved calling the interceptor function directly from the trace package.\nSOURCE: https://github.com/googleapis/google-cloud-go/blob/main/CHANGES.md#_snippet_5\n\nLANGUAGE: go\nCODE:\n```\nconn, err := grpc.Dial(srv.Addr, grpc.WithUnaryInterceptor(trace.GRPCClientInterceptor()))\n```\n\n----------------------------------------\n\nTITLE: Installing Security Posture API Go Client\nDESCRIPTION: This command uses the Go toolchain's `go get` command to download and install the Go client library for the Google Cloud Security Posture API. Executing this command fetches the specified package and its dependencies, making them available for use in a Go project. Requires Go to be installed and configured.\nSOURCE: https://github.com/googleapis/google-cloud-go/blob/main/securityposture/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngo get cloud.google.com/go/securityposture\n```\n\n----------------------------------------\n\nTITLE: Getting Quoted String Representation using fmt.Sprintf in Go\nDESCRIPTION: This snippet shows how to obtain a quoted string representation of a variable `T` using the `fmt.Sprintf` function with the `%q` format verb in Go. This is suggested in the v1.1.0 release notes as a way to replicate the previous behavior of the `String()` method for Spanner's nullable types (`NullString`, `NullTime`, `NullDate`), which no longer return quoted strings by default following a breaking change.\nSOURCE: https://github.com/googleapis/google-cloud-go/blob/main/spanner/CHANGES.md#_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nfmt.Sprintf(\"%q\", T)\n```\n\n----------------------------------------\n\nTITLE: Installing the Cloud Profiler Go Package (Bash)\nDESCRIPTION: This command uses the Go toolchain's 'go get' command to download and install the Google Cloud Profiler package for Go. This makes the 'cloud.google.com/go/profiler' package available for import and use within Go applications. Requires the Go programming language and its associated tools to be installed.\nSOURCE: https://github.com/googleapis/google-cloud-go/blob/main/profiler/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngo get cloud.google.com/go/profiler\n```\n\n----------------------------------------\n\nTITLE: Migrating Storage Object Metadata Update in Go (v0.3.0)\nDESCRIPTION: Shows the update to `ObjectHandle.Update`. It now accepts a `storage.ObjectAttrsToUpdate` struct instead of a pointer to `storage.ObjectAttrs` to specify which metadata fields should be modified.\nSOURCE: https://github.com/googleapis/google-cloud-go/blob/main/CHANGES.md#_snippet_37\n\nLANGUAGE: go\nCODE:\n```\nattrs, err := obj.Update(ctx, &storage.ObjectAttrs{ContextType: \"text/html\"})\n```\n\nLANGUAGE: go\nCODE:\n```\nattrs, err := obj.Update(ctx, storage.ObjectAttrsToUpdate{ContextType: \"text/html\"})\n```\n\n----------------------------------------\n\nTITLE: Migrating BigQuery Row Iteration in Go (v0.4.0)\nDESCRIPTION: Shows the updated pattern for iterating over query results using the `RowIterator`. The `it.Next(ctx)` and `it.Get(&vals)` calls are replaced by a single `it.Next(&vals)` call within a loop that checks for `iterator.Done`. Error handling after the loop (`it.Err()`) is no longer needed in this pattern.\nSOURCE: https://github.com/googleapis/google-cloud-go/blob/main/CHANGES.md#_snippet_21\n\nLANGUAGE: go\nCODE:\n```\nfor it.Next(ctx) {\n    var vals ValueList\n    if err := it.Get(&vals); err != nil {\n        // TODO: Handle error.\n    }\n    // TODO: use vals.\n}\nif err := it.Err(); err != nil {\n    // TODO: Handle error.\n}\n```\n\nLANGUAGE: go\nCODE:\n```\nfor {\n    var vals ValueList\n    err := it.Next(&vals)\n    if err == iterator.Done {\n        break\n    }\n    if err != nil {\n        // TODO: Handle error.\n    }\n    // TODO: use vals.\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Up and Authenticating Google Cloud SDK Environment - Bash\nDESCRIPTION: This snippet demonstrates how to set up the default Google Cloud project and authenticate the gcloud CLI for performing resource operations. The commands require the gcloud CLI to be installed and the relevant environment variable (GCLOUD_TESTS_GOLANG_PROJECT_ID) to be set. Inputs include the project ID and user credentials; outputs are an authenticated CLI session scoped to the provided project.\nSOURCE: https://github.com/googleapis/google-cloud-go/blob/main/CONTRIBUTING.md#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n# Sets the default project in your env.\n$ gcloud config set project $GCLOUD_TESTS_GOLANG_PROJECT_ID\n\n# Authenticates the gcloud tool with your account.\n$ gcloud auth login\n```\n\n----------------------------------------\n\nTITLE: Installing the Managed Identities Go Client Library using Go Get\nDESCRIPTION: This command utilizes the `go get` tool to download and install the `cloud.google.com/go/managedidentities` package. This package provides the necessary Go client library for interacting with the Google Cloud Managed Service for Microsoft Active Directory API.\nSOURCE: https://github.com/googleapis/google-cloud-go/blob/main/managedidentities/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngo get cloud.google.com/go/managedidentities\n```\n\n----------------------------------------\n\nTITLE: Initializing a Cloud Spanner Client in Go\nDESCRIPTION: This snippet demonstrates how to create a new Spanner client using the Go client library by calling spanner.NewClient with a context and a database resource path. It checks for errors after attempting to create the client, outputting a fatal log message if client creation fails. Required dependencies are the context, spanner package, and proper Google Cloud project/instance/database identifiers. The input is a valid context and database path; on success, the output is an initialized *spanner.Client ready for further database operations.\nSOURCE: https://github.com/googleapis/google-cloud-go/blob/main/spanner/README.md#_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nclient, err := spanner.NewClient(ctx, \"projects/P/instances/I/databases/D\")\nif err != nil {\n\tlog.Fatal(err)\n}\n```\n\n----------------------------------------\n\nTITLE: Installing the Go Client Library using go get (Bash)\nDESCRIPTION: This command utilizes the standard Go toolchain command `go get` to download and install the specific Google Cloud Go client library. The `{{.ImportPath}}` is a template placeholder that should be replaced with the actual import path of the desired library (e.g., 'cloud.google.com/go/storage'). Running this command adds the library as a dependency to the current Go project.\nSOURCE: https://github.com/googleapis/google-cloud-go/blob/main/internal/carver/cmd/carver/_README.md.txt#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngo get {{.ImportPath}}\n```\n\n----------------------------------------\n\nTITLE: Migrating Storage Object Conditional Operations (Generation/Metageneration) in Go (v0.3.0)\nDESCRIPTION: Demonstrates replacing `ObjectHandle.WithConditions` with the `ObjectHandle.If` method combined with generation specifiers. Conditions like generation and metageneration match are now set using `obj.Generation(gen).If(storage.Conditions{MetagenerationMatch: mgen})`.\nSOURCE: https://github.com/googleapis/google-cloud-go/blob/main/CHANGES.md#_snippet_38\n\nLANGUAGE: go\nCODE:\n```\nobj.WithConditions(storage.Generation(gen), storage.IfMetaGenerationMatch(mgen))\n```\n\nLANGUAGE: go\nCODE:\n```\nobj.Generation(gen).If(storage.Conditions{MetagenerationMatch: mgen})\n```\n\n----------------------------------------\n\nTITLE: Translating Text with a Client Interface for Mockability (Go)\nDESCRIPTION: This shows the signature of a translation function accepting a TranslationClient interface. This enables use of different implementations (real, fake, or mock) and simplifies the injection of dependencies for testing. The function's implementation can be similar to previous examples, but the input is now abstracted. There are no external dependencies beyond the TranslationClient interface.\nSOURCE: https://github.com/googleapis/google-cloud-go/blob/main/testing.md#_snippet_4\n\nLANGUAGE: Go\nCODE:\n```\nfunc TranslateTextWithInterfaceClient(client TranslationClient, text string, targetLang string) (string, error) {\n// ...\n}\n```\n\n----------------------------------------\n\nTITLE: Installing the Privileged Access Manager Go Package (Bash)\nDESCRIPTION: This command uses the Go toolchain (`go get`) to download and install the `cloud.google.com/go/privilegedaccessmanager` package. This package provides the Go client library for interacting with the Google Cloud Privileged Access Manager API. Running this command requires Go to be installed and properly configured on the system.\nSOURCE: https://github.com/googleapis/google-cloud-go/blob/main/privilegedaccessmanager/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngo get cloud.google.com/go/privilegedaccessmanager\n```\n\n----------------------------------------\n\nTITLE: Logging Changelog Entries in Markdown - Markdown\nDESCRIPTION: The Markdown snippets document the changelog for the Google Cloud Storage Go SDK, listing features, bug fixes, and documentation improvements for each version. These entries depend on standard Markdown formatting conventions and reference GitHub issue and commit URLs. Each update is described as a Markdown list item under version and section headers, allowing easy parsing by both humans and tools. Inputs are new release information, and outputs are formatted changelog items. Limitations include manual update requirements and dependency on external links.\nSOURCE: https://github.com/googleapis/google-cloud-go/blob/main/storage/CHANGES.md#_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n### Bug Fixes\n\n* **storage:** Fix read-write race in Writer.Write ([#6817](https://github.com/googleapis/google-cloud-go/issues/6817)) ([4766d3e](https://github.com/googleapis/google-cloud-go/commit/4766d3e1004119b93c6bd352024b5bf3404252eb))\n* **storage:** Fix request token passing for Copier.Run ([#6863](https://github.com/googleapis/google-cloud-go/issues/6863)) ([faaab06](https://github.com/googleapis/google-cloud-go/commit/faaab066d8e509dc440bcbc87391557ecee7dbf2)), refs [#6857](https://github.com/googleapis/google-cloud-go/issues/6857)\n\n\n### Documentation\n\n* **storage:** Update broken links for SignURL and PostPolicy ([#6779](https://github.com/googleapis/google-cloud-go/issues/6779)) ([776138b](https://github.com/googleapis/google-cloud-go/commit/776138bc06a1e5fd45acbf8f9d36e9dc6ce31dd3))\n\n```\n\nLANGUAGE: Markdown\nCODE:\n```\n## [1.27.0](https://github.com/googleapis/google-cloud-go/compare/storage/v1.26.0...storage/v1.27.0) (2022-09-22)\n\n\n### Features\n\n* **storage:** Find GoogleAccessID when using impersonated creds ([#6591](https://github.com/googleapis/google-cloud-go/issues/6591)) ([a2d16a7](https://github.com/googleapis/google-cloud-go/commit/a2d16a7a778c85d13217fc67955ec5dac1da34e8))\n\n```\n\nLANGUAGE: Markdown\nCODE:\n```\n## [1.26.0](https://github.com/googleapis/google-cloud-go/compare/storage/v1.25.0...storage/v1.26.0) (2022-08-29)\n\n\n### Features\n\n* **storage:** export ShouldRetry ([#6370](https://github.com/googleapis/google-cloud-go/issues/6370)) ([0da9ab0](https://github.com/googleapis/google-cloud-go/commit/0da9ab0831540569dc04c0a23437b084b1564e15)), refs [#6362](https://github.com/googleapis/google-cloud-go/issues/6362)\n\n\n### Bug Fixes\n\n* **storage:** allow to use age=0 in OLM conditions ([#6204](https://github.com/googleapis/google-cloud-go/issues/6204)) ([c85704f](https://github.com/googleapis/google-cloud-go/commit/c85704f4284626ce728cb48f3b130f2ce2a0165e))\n\n```\n\nLANGUAGE: Markdown\nCODE:\n```\n## [1.25.0](https://github.com/googleapis/google-cloud-go/compare/storage/v1.24.0...storage/v1.25.0) (2022-08-11)\n\n\n### Features\n\n* **storage/internal:** Add routing annotations ([8a8ba85](https://github.com/googleapis/google-cloud-go/commit/8a8ba85311f85701c97fd7c10f1d88b738ce423f))\n* **storage:** refactor to use transport-agnostic interface ([#6465](https://github.com/googleapis/google-cloud-go/issues/6465)) ([d03c3e1](https://github.com/googleapis/google-cloud-go/commit/d03c3e15a79fe9afa1232d9c8bd4c484a9bb927e))\n\n```\n\nLANGUAGE: Markdown\nCODE:\n```\n## [1.24.0](https://github.com/googleapis/google-cloud-go/compare/storage/v1.23.0...storage/v1.24.0) (2022-07-20)\n\n\n### Features\n\n* **storage:** add Custom Placement Config Dual Region Support  ([#6294](https://github.com/googleapis/google-cloud-go/issues/6294)) ([5a8c607](https://github.com/googleapis/google-cloud-go/commit/5a8c607e3a9a3265887e27cb13f8943f3e3fa23d))\n\n```\n\nLANGUAGE: Markdown\nCODE:\n```\n## [1.23.0](https://github.com/googleapis/google-cloud-go/compare/storage/v1.22.1...storage/v1.23.0) (2022-06-23)\n\n\n### Features\n\n* **storage:** add support for OLM Prefix/Suffix ([#5929](https://github.com/googleapis/google-cloud-go/issues/5929)) ([ec21d10](https://github.com/googleapis/google-cloud-go/commit/ec21d10d6d1b01aa97a52560319775041707690d))\n* **storage:** support AbortIncompleteMultipartUpload LifecycleAction ([#5812](https://github.com/googleapis/google-cloud-go/issues/5812)) ([fdec929](https://github.com/googleapis/google-cloud-go/commit/fdec929b9da6e01dda0ab3c72544d44d6bd82bd4)), refs [#5795](https://github.com/googleapis/google-cloud-go/issues/5795)\n\n\n### Bug Fixes\n\n* **storage:** allow for  Age *int64 type and int64 type ([#6230](https://github.com/googleapis/google-cloud-go/issues/6230)) ([cc7acb8](https://github.com/googleapis/google-cloud-go/commit/cc7acb8bffb31828e9e96d4834a65f9728494473))\n\n```\n\nLANGUAGE: Markdown\nCODE:\n```\n### [1.22.1](https://github.com/googleapis/google-cloud-go/compare/storage/v1.22.0...storage/v1.22.1) (2022-05-19)\n\n\n### Bug Fixes\n\n* **storage:** bump genproto, remove deadcode ([#6059](https://github.com/googleapis/google-cloud-go/issues/6059)) ([bb10f9f](https://github.com/googleapis/google-cloud-go/commit/bb10f9faca57dc3b987e0fb601090887b3507f07))\n* **storage:** remove field that no longer exists ([#6061](https://github.com/googleapis/google-cloud-go/issues/6061)) ([ee150cf](https://github.com/googleapis/google-cloud-go/commit/ee150cfd194463ddfcb59898cfb0237e47777973))\n\n```\n\nLANGUAGE: Markdown\nCODE:\n```\n## [1.22.0](https://github.com/googleapis/google-cloud-go/compare/storage/v1.21.0...storage/v1.22.0) (2022-03-31)\n\n\n### Features\n\n* **storage:** allow specifying includeTrailingDelimiter ([#5617](https://github.com/googleapis/google-cloud-go/issues/5617)) ([a34503b](https://github.com/googleapis/google-cloud-go/commit/a34503bc0f0b95399285e8db66976b227e3b0072))\n* **storage:** set versionClient to module version ([55f0d92](https://github.com/googleapis/google-cloud-go/commit/55f0d92bf112f14b024b4ab0076c9875a17423c9))\n\n\n### Bug Fixes\n\n* **storage:** respect STORAGE_EMULATOR_HOST in signedURL ([#5673](https://github.com/googleapis/google-cloud-go/issues/5673)) ([1c249ae](https://github.com/googleapis/google-cloud-go/commit/1c249ae5b4980cf53fa74635943ca8bf6a96a341))\n\n```\n\nLANGUAGE: Markdown\nCODE:\n```\n## [1.21.0](https://github.com/googleapis/google-cloud-go/compare/storage/v1.20.0...storage/v1.21.0) (2022-02-17)\n\n\n### Features\n\n* **storage:** add better version metadata to calls ([#5507](https://github.com/googleapis/google-cloud-go/issues/5507)) ([13fe0bc](https://github.com/googleapis/google-cloud-go/commit/13fe0bc0d8acbffd46b59ab69b25449f1cbd6a88)), refs [#2749](https://github.com/googleapis/google-cloud-go/issues/2749)\n* **storage:** add Writer.ChunkRetryDeadline ([#5482](https://github.com/googleapis/google-cloud-go/issues/5482)) ([498a746](https://github.com/googleapis/google-cloud-go/commit/498a746769fa43958b92af8875b927879947128e))\n\n```\n\nLANGUAGE: Markdown\nCODE:\n```\n## [1.20.0](https://www.github.com/googleapis/google-cloud-go/compare/storage/v1.19.0...storage/v1.20.0) (2022-02-04)\n\n\n### Features\n\n* **storage/internal:** Update definition of RewriteObjectRequest to bring to parity with JSON API support ([#5447](https://www.github.com/googleapis/google-cloud-go/issues/5447)) ([7d175ef](https://www.github.com/googleapis/google-cloud-go/commit/7d175ef12b7b3e75585427f5dd2aab4a175e92d6))\n\n```\n\nLANGUAGE: Markdown\nCODE:\n```\n## [1.19.0](https://www.github.com/googleapis/google-cloud-go/compare/storage/v1.18.2...storage/v1.19.0) (2022-01-25)\n\n\n### Features\n\n* **storage:** add fully configurable and idempotency-aware retry strategy ([#5384](https://www.github.com/googleapis/google-cloud-go/issues/5384), [#5185](https://www.github.com/googleapis/google-cloud-go/issues/5185), [#5170](https://www.github.com/googleapis/google-cloud-go/issues/5170), [#5223](https://www.github.com/googleapis/google-cloud-go/issues/5223), [#5221](https://www.github.com/googleapis/google-cloud-go/issues/5221), [#5193](https://www.github.com/googleapis/google-cloud-go/issues/5193), [#5159](https://www.github.com/googleapis/google-cloud-go/issues/5159), [#5165](https://www.github.com/googleapis/google-cloud-go/issues/5165), [#5166](https://www.github.com/googleapis/google-cloud-go/issues/5166), [#5210](https://www.github.com/googleapis/google-cloud-go/issues/5210), [#5172](https://www.github.com/googleapis/google-cloud-go/issues/5172), [#5314](https://www.github.com/googleapis/google-cloud-go/issues/5314))\n  * This release contains changes to fully align this library's retry strategy\n    with best practices as described in the\n    Cloud Storage [docs](https://cloud.google.com/storage/docs/retry-strategy).\n  * The library will now retry only idempotent operations by default. This means\n    that for certain operations, including object upload, compose, rewrite,\n    update, and delete, requests will not be retried by default unless\n    [idempotency conditions](https://cloud.google.com/storage/docs/retry-strategy#idempotency)\n    for the request have been met.\n  * The library now has methods to configure aspects of retry policy for\n    API calls, including which errors are retried, the timing of the\n    exponential backoff, and how idempotency is taken into account.\n  * If you wish to re-enable retries for a non-idempotent request, use the\n    [RetryAlways](https://pkg.go.dev/cloud.google.com/go/storage@main#RetryAlways)\n    policy.\n  * For full details on how to configure retries, see the\n    [package docs](https://pkg.go.dev/cloud.google.com/go/storage@main#hdr-Retrying_failed_requests)\n    and the\n    [Cloud Storage docs](https://cloud.google.com/storage/docs/retry-strategy)\n* **storage:** GenerateSignedPostPolicyV4 can use existing creds to authenticate ([#5105](https://www.github.com/googleapis/google-cloud-go/issues/5105)) ([46489f4](https://www.github.com/googleapis/google-cloud-go/commit/46489f4c8a634068a3e7cf2fd5e5ca11b555c0a8))\n* **storage:** post policy can be signed with a fn that takes raw bytes ([#5079](https://www.github.com/googleapis/google-cloud-go/issues/5079)) ([25d1278](https://www.github.com/googleapis/google-cloud-go/commit/25d1278cab539fbfdd8563ed6b297e30d3fe555c))\n* **storage:** add rpo (turbo replication) support ([#5003](https://www.github.com/googleapis/google-cloud-go/issues/5003)) ([3bd5995](https://www.github.com/googleapis/google-cloud-go/commit/3bd59958e0c06d2655b67fcb5410668db3c52af0))\n\n### Bug Fixes\n\n* **storage:** fix nil check in gRPC Reader ([#5376](https://www.github.com/googleapis/google-cloud-go/issues/5376)) ([5e7d722](https://www.github.com/googleapis/google-cloud-go/commit/5e7d722d18a62b28ba98169b3bdbb49401377264))\n\n```\n\nLANGUAGE: Markdown\nCODE:\n```\n### [1.18.2](https://www.github.com/googleapis/google-cloud-go/compare/storage/v1.18.1...storage/v1.18.2) (2021-10-18)\n\n\n### Bug Fixes\n\n* **storage:** upgrade genproto ([#4993](https://www.github.com/googleapis/google-cloud-go/issues/4993)) ([5ca462d](https://www.github.com/googleapis/google-cloud-go/commit/5ca462d99fe851b7cddfd70108798e2fa959bdfd)), refs [#4991](https://www.github.com/googleapis/google-cloud-go/issues/4991)\n\n```\n\nLANGUAGE: Markdown\nCODE:\n```\n### [1.18.1](https://www.github.com/googleapis/google-cloud-go/compare/storage/v1.18.0...storage/v1.18.1) (2021-10-14)\n\n\n```\n\n----------------------------------------\n\nTITLE: Installing the Advisory Notifications Go Client Library\nDESCRIPTION: This command uses the Go toolchain's 'go get' command to download and install the Go client library package for the Google Cloud Advisory Notifications API. This makes the package available for import in Go projects. Requires Go to be installed and configured on the system.\nSOURCE: https://github.com/googleapis/google-cloud-go/blob/main/advisorynotifications/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngo get cloud.google.com/go/advisorynotifications\n```\n\n----------------------------------------\n\nTITLE: Installing Cloud Dataproc Go Library via go get (Bash)\nDESCRIPTION: This Bash command utilizes the `go get` tool to download and install the Go client library for the Cloud Dataproc API. Running this command fetches the `cloud.google.com/go/dataproc` package and its dependencies, making them available for use in a Go project. This is the standard procedure for adding Go package dependencies.\nSOURCE: https://github.com/googleapis/google-cloud-go/blob/main/dataproc/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngo get cloud.google.com/go/dataproc\n```\n\n----------------------------------------\n\nTITLE: Configuring gRPC Client Trace Interceptor via Client in Go (v0.9.0+)\nDESCRIPTION: Illustrates the recommended method since v0.9.0 for configuring a gRPC client's unary interceptor for tracing, by calling `tc.GRPCClientInterceptor()` on an initialized `*trace.Client` instance (`tc`).\nSOURCE: https://github.com/googleapis/google-cloud-go/blob/main/CHANGES.md#_snippet_6\n\nLANGUAGE: go\nCODE:\n```\nconn, err := grpc.Dial(srv.Addr, grpc.WithUnaryInterceptor(tc.GRPCClientInterceptor()))\n```\n\n----------------------------------------\n\nTITLE: Migrating BigQuery Table Opening in Go (v0.4.0)\nDESCRIPTION: Demonstrates the code change required for opening a BigQuery table. The direct `Client.OpenTable` method is replaced by chaining `Client.DatasetInProject` and `Table` methods.\nSOURCE: https://github.com/googleapis/google-cloud-go/blob/main/CHANGES.md#_snippet_17\n\nLANGUAGE: go\nCODE:\n```\nclient.OpenTable(\"project\", \"dataset\", \"table\")\n```\n\nLANGUAGE: go\nCODE:\n```\nclient.DatasetInProject(\"project\", \"dataset\").Table(\"table\")\n```\n\n----------------------------------------\n\nTITLE: Updating BigQuery ValueLoader Load Method Signature in Go (v0.4.0)\nDESCRIPTION: Shows the change in the `ValueLoader.Load` method signature. It now requires an additional `bigquery.Schema` parameter alongside the slice of `bigquery.Value`.\nSOURCE: https://github.com/googleapis/google-cloud-go/blob/main/CHANGES.md#_snippet_24\n\nLANGUAGE: go\nCODE:\n```\nfunc (vl *myValueLoader) Load(v []bigquery.Value)\n```\n\nLANGUAGE: go\nCODE:\n```\nfunc (vl *myValueLoader) Load(v []bigquery.Value, s bigquery.Schema)\n```\n\n----------------------------------------\n\nTITLE: Installing Cloud Functions Go Client Library using Bash\nDESCRIPTION: This command uses the Go toolchain ('go get') to download and install the Google Cloud Functions Go client library package ('cloud.google.com/go/functions') into the user's Go workspace. This is the standard method for adding Go dependencies to a project.\nSOURCE: https://github.com/googleapis/google-cloud-go/blob/main/functions/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngo get cloud.google.com/go/functions\n```\n\n----------------------------------------\n\nTITLE: Generating Go Code from Proto Files using protoc (Shell)\nDESCRIPTION: This shell command utilizes the Protocol Buffer compiler (`protoc`) to generate Go code (`--go_out=.`) for all `.proto` files located in the current directory. It specifies include paths (`-I`) for resolving imports, pointing to a local clone of the googleapis repository and the current directory (`.`). This command must be run from the directory containing the target `.proto` files.\nSOURCE: https://github.com/googleapis/google-cloud-go/blob/main/firestore/internal/conformance/README.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n# Note: Change /usr/local/google/home/deklerk/workspace/googleapis to wherever\n# you've installed https://github.com/googleapis/googleapis.\n# Note: Run whilst cd-ed in this directory.\nprotoc --go_out=. -I /usr/local/google/home/deklerk/workspace/googleapis -I . *.proto\n```\n\n----------------------------------------\n\nTITLE: Installing Cloud Quotas Go Package using go get (Bash)\nDESCRIPTION: This shell command uses the Go toolchain's `go get` command to download and install the official Google Cloud Quotas Go client library (`cloud.google.com/go/cloudquotas`) and its dependencies. This is the standard method for adding the package to a Go project or workspace. Requires the Go language toolchain to be installed and configured.\nSOURCE: https://github.com/googleapis/google-cloud-go/blob/main/cloudquotas/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngo get cloud.google.com/go/cloudquotas\n```\n\n----------------------------------------\n\nTITLE: Installing the Service Directory Go Module using Bash\nDESCRIPTION: This command uses the Go toolchain (`go get`) to download and install the Google Cloud Service Directory client library for Go (`cloud.google.com/go/servicedirectory`). Executing this command makes the package available for import in Go projects. It requires the Go programming language and its associated tools to be installed and properly configured in the system's PATH.\nSOURCE: https://github.com/googleapis/google-cloud-go/blob/main/servicedirectory/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngo get cloud.google.com/go/servicedirectory\n```\n\n----------------------------------------\n\nTITLE: Regenerating Protobuf Files using protoc in Shell\nDESCRIPTION: This snippet demonstrates how to navigate to the Pub/Sub benchwrapper's proto directory and regenerate Go files from all Protocol Buffer (.proto) sources by invoking the protoc compiler with Go and Go gRPC plugins. It requires the protoc compiler and the Go-related plugins ('protoc-gen-go', 'protoc-gen-go-grpc') to be installed on the system. This step ensures that Go source files reflecting the latest proto definitions are available for build and use; all .proto files in the directory will be processed and code will be output in the same location, maintaining relative import paths.\nSOURCE: https://github.com/googleapis/google-cloud-go/blob/main/pubsub/internal/benchwrapper/proto/README.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncd pubsub/internal/benchwrapper/proto\nprotoc --go_out=. --go_opt=paths=source_relative --go-grpc_out=. --go-grpc_opt=paths=source_relative *.proto\n```\n\n----------------------------------------\n\nTITLE: Installing GKE Hub Go Client Library using Go Modules - Bash\nDESCRIPTION: This snippet shows how to install the GKE Hub Go client library into your project using Go modules. The dependency is retrieved via the 'go get' command and is suitable for use in any module-aware Go project. Ensure you have Go installed (version as supported by the library), internet connectivity to fetch the dependency, and module initialization via 'go mod init' if starting in a new directory. No parameters are required; it downloads the module and updates the go.mod file accordingly.\nSOURCE: https://github.com/googleapis/google-cloud-go/blob/main/gkehub/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngo get cloud.google.com/go/gkehub\n```\n\n----------------------------------------\n\nTITLE: Installing the Parameter Manager Go Client Library (Bash)\nDESCRIPTION: This command uses the Go toolchain (`go get`) to download and install the Google Cloud Parameter Manager Go client library package (`cloud.google.com/go/parametermanager`) and its dependencies into the local Go workspace. This makes the library available for use in Go projects.\nSOURCE: https://github.com/googleapis/google-cloud-go/blob/main/parametermanager/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngo get cloud.google.com/go/parametermanager\n```\n\n----------------------------------------\n\nTITLE: Running Post-Processor Locally for All or Selected Clients - Bash\nDESCRIPTION: This snippet shows how to run the post-processor directly via Go from the internal/postprocessor directory, for either all clients or a selected set. It is intended for testing changes before pushing to the repo. Dependencies include Go installed, repository structure, and potentially a local clone of googleapis. The branch flag is required; additional directory names can filter which clients to process. Outputs are code modifications in the specified clients.\nSOURCE: https://github.com/googleapis/google-cloud-go/blob/main/internal/postprocessor/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngo run . -client-root=\"../..\" -googleapis-dir=\"/path/to/local/googleapis\" -branch=\"my-branch\"\n```\n\nLANGUAGE: bash\nCODE:\n```\ngo run . -client-root=\"../..\" -googleapis-dir=\"/path/to/local/googleapis\" -branch=\"my-branch\" -dirs=\"accessapproval,asset\"\n```\n\n----------------------------------------\n\nTITLE: Running OwlBot Post-Processor Docker Container - Bash\nDESCRIPTION: This snippet demonstrates pulling and running the OwlBot post-processor Docker container locally. It assumes Docker is installed and running on your system. The code pulls the latest image and runs it in the current repository directory, ensuring correct user IDs and volume mounts. Inputs are repository directories and Docker image tags; outputs are the result of running the post-processing steps inside the container.\nSOURCE: https://github.com/googleapis/google-cloud-go/blob/main/internal/postprocessor/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker pull gcr.io/cloud-devrel-public-resources/owlbot-go:infrastructure-public-image-latest\\ndocker run --user $(id -u):$(id -g) --rm -v $(pwd):/repo -w /repo gcr.io/cloud-devrel-public-resources/owlbot-go:infrastructure-public-image-latest\n```\n\n----------------------------------------\n\nTITLE: Installing API Hub Go Client Library via go get\nDESCRIPTION: This command uses the Go package manager (`go get`) to download and install the `cloud.google.com/go/apihub` package. This package provides the necessary Go client library for interacting with the Google Cloud API Hub API. A working Go development environment is required to execute this command successfully.\nSOURCE: https://github.com/googleapis/google-cloud-go/blob/main/apihub/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngo get cloud.google.com/go/apihub\n```\n\n----------------------------------------\n\nTITLE: Installing httpr using Go\nDESCRIPTION: This command uses the Go toolchain (`go get`) to download and install the `httpr` binary from the specified repository path. The `-u` flag ensures the latest version is fetched. This is one method to obtain the `httpr` executable if the Go toolchain is available.\nSOURCE: https://github.com/googleapis/google-cloud-go/blob/main/httpreplay/cmd/httpr/README.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngo get -u cloud.google.com/go/httpreplay/cmd/httpr\n```\n\n----------------------------------------\n\nTITLE: Installing the Go Client Library for Google Workspace Add-ons using Bash\nDESCRIPTION: This command uses the Go toolchain (`go get`) to download and install the `cloud.google.com/go/gsuiteaddons` package. This package provides the Go client library necessary for interacting with the Google Workspace Add-ons API. Ensure Go is properly installed and configured in your environment before executing this command.\nSOURCE: https://github.com/googleapis/google-cloud-go/blob/main/gsuiteaddons/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngo get cloud.google.com/go/gsuiteaddons\n```\n\n----------------------------------------\n\nTITLE: Installing Google Cloud Monitoring Client Library using Go Modules - Bash\nDESCRIPTION: This snippet demonstrates how to install the Go client library for the Google Cloud Monitoring API using Go modules. It requires Go to be installed and properly configured on the user's machine. The command downloads and adds the cloud.google.com/go/monitoring package as a dependency to your go.mod file, enabling usage of the monitoring API in Go projects. No parameters are required, and it should be executed in the terminal within your project directory.\nSOURCE: https://github.com/googleapis/google-cloud-go/blob/main/monitoring/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngo get cloud.google.com/go/monitoring\n```\n\n----------------------------------------\n\nTITLE: Installing Cloud DLP Go Client Library Using Go Modules - Bash\nDESCRIPTION: This snippet demonstrates how to install the Cloud Data Loss Prevention (DLP) API Go client library using the Go modules package manager. The 'go get' command downloads and installs the 'cloud.google.com/go/dlp' module and its dependencies into your Go workspace. There are no required parameters; simply run the command inside your project directory. The output of this operation is the client library included in your Go project's dependencies. Network access is required to fetch the module.\nSOURCE: https://github.com/googleapis/google-cloud-go/blob/main/dlp/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngo get cloud.google.com/go/dlp\n```\n\n----------------------------------------\n\nTITLE: Installing Device Streaming API Go Client Library - Bash\nDESCRIPTION: This bash snippet demonstrates how to install the Device Streaming API Go client library using the go get command. It requires Go to be installed and assumes that you are using Go modules. The command downloads and adds the cloud.google.com/go/devicestreaming package to your project's dependencies. No additional parameters are needed; the output is a modified go.mod file with the new dependency.\nSOURCE: https://github.com/googleapis/google-cloud-go/blob/main/devicestreaming/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngo get cloud.google.com/go/devicestreaming\n\n```\n\n----------------------------------------\n\nTITLE: Fetching the httpr CA Certificate URL\nDESCRIPTION: This URL is used to retrieve the Certificate Authority (CA) certificate generated by `httpr` when running in record mode. Accessing this URL (typically via GET) provides the certificate in PEM format, which needs to be installed by the client application to trust the proxy for intercepting HTTPS traffic. The port (8181 by default) corresponds to the `httpr` control port.\nSOURCE: https://github.com/googleapis/google-cloud-go/blob/main/httpreplay/cmd/httpr/README.md#_snippet_2\n\nLANGUAGE: url\nCODE:\n```\nhttp://localhost:8181/authority.cer\n```\n\n----------------------------------------\n\nTITLE: Installing Google Cloud IAM Client Library in Go Using Bash\nDESCRIPTION: This code snippet shows how to install the Google Cloud IAM client library for Go using the 'go get' command. The command must be run in a terminal with Go properly installed. It will pull the latest version of the 'cloud.google.com/go/iam' package as a dependency for your Go project. No additional arguments are required, and the command will make the package available for import in your source code.\nSOURCE: https://github.com/googleapis/google-cloud-go/blob/main/iam/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngo get cloud.google.com/go/iam\n\n```\n\n----------------------------------------\n\nTITLE: Installing the Security Command Center Go Client Library using Bash\nDESCRIPTION: This command uses the Go toolchain (`go get`) to download and install the official Google Cloud Security Command Center client library for Go. It requires a properly configured Go development environment. The command fetches the package from its source repository (`cloud.google.com/go/securitycenter`) and makes it available for import in Go projects.\nSOURCE: https://github.com/googleapis/google-cloud-go/blob/main/securitycenter/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngo get cloud.google.com/go/securitycenter\n```\n\n----------------------------------------\n\nTITLE: Installing Google Auth Go Library via Go Get\nDESCRIPTION: This command uses the Go package manager (`go get`) to download and install the latest version of the Google Authentication library for Go (`cloud.google.com/go/auth`). This is the standard way to add the library as a dependency to a Go project. Requires the Go toolchain to be installed.\nSOURCE: https://github.com/googleapis/google-cloud-go/blob/main/auth/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngo get cloud.google.com/go/auth@latest\n```\n\n----------------------------------------\n\nTITLE: Installing Cloud Identity-Aware Proxy API Client Library Using Go - Bash\nDESCRIPTION: This bash command snippet shows how to install the Cloud Identity-Aware Proxy Go client library using the Go package manager. It requires Go to be installed on the system and network access for downloading from the official Go module repository. The command fetches and installs the package into your Go workspace; no parameters are required, and the expected outcome is a successful module installation.\nSOURCE: https://github.com/googleapis/google-cloud-go/blob/main/iap/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngo get cloud.google.com/go/iap\n```\n\n----------------------------------------\n\nTITLE: Migrating Firestore Document Updates to `Update` Method in Go (v0.17.0)\nDESCRIPTION: Explains the breaking change introduced in v0.17.0 of the google-cloud-go Firestore client, where `UpdateMap` and `UpdateStruct` were removed and replaced by the unified `Update` method. This snippet shows the code transformation required, demonstrating how to use `docref.Update` with a slice of `firestore.Update` structs to specify field paths and their corresponding values for document updates. Prerequisites include a valid context `ctx` and a Firestore Document Reference `docref`.\nSOURCE: https://github.com/googleapis/google-cloud-go/blob/main/CHANGES.md#_snippet_0\n\nLANGUAGE: Go\nCODE:\n```\n// Change from UpdateMap:\n// Before:\ndocref.UpdateMap(ctx, map[string]interface{}{\"a.b\", 1})\n// After:\ndocref.Update(ctx, []firestore.Update{{Path: \"a.b\", Value: 1}})\n```\n\nLANGUAGE: Go\nCODE:\n```\n// Change from UpdateStruct:\n// Before:\ndocref.UpdateStruct(ctx, []string{\"Field\"}, aStruct)\n// After:\ndocref.Update(ctx, []firestore.Update{{Path: \"Field\", Value: aStruct.Field}})\n```\n\n----------------------------------------\n\nTITLE: Translating Text with Concrete Client using cloud.google.com/go/translate (Go)\nDESCRIPTION: This snippet defines a function, TranslateTextWithConcreteClient, that uses a concrete cloud.google.com/go/translate TranslationClient to translate text via a gRPC call. The function constructs a TranslateTextRequest, executes the TranslateText RPC, and returns the translated result if only one is returned. Dependencies include the translate and gax-go Go packages and an environment variable for GOOGLE_CLOUD_PROJECT. The function expects a TranslationClient, source text, and target language code, and returns the translated text string or an error. Note that this approach relies on the concrete client type rather than interfaces, which eases library evolution.\nSOURCE: https://github.com/googleapis/google-cloud-go/blob/main/testing.md#_snippet_0\n\nLANGUAGE: Go\nCODE:\n```\nimport (\n        \"context\"\n        \"fmt\"\n        \"log\"\n        \"os\"\n\n        translate \"cloud.google.com/go/translate/apiv3\"\n        \"github.com/googleapis/gax-go/v2\"\n        translatepb \"google.golang.org/genproto/googleapis/cloud/translate/v3\"\n)\n\nfunc TranslateTextWithConcreteClient(client *translate.TranslationClient, text string, targetLang string) (string, error) {\n        ctx := context.Background()\n        log.Printf(\"Translating %q to %q\", text, targetLang)\n        req := &translatepb.TranslateTextRequest{\n                Parent:             fmt.Sprintf(\"projects/%s/locations/global\", os.Getenv(\"GOOGLE_CLOUD_PROJECT\")),\n                TargetLanguageCode: \"en-US\",\n                Contents:           []string{text},\n        }\n        resp, err := client.TranslateText(ctx, req)\n        if err != nil {\n                return \"\", fmt.Errorf(\"unable to translate text: %v\", err)\n        }\n        translations := resp.GetTranslations()\n        if len(translations) != 1 {\n                return \"\", fmt.Errorf(\"expected only one result, got %d\", len(translations))\n        }\n        return translations[0].TranslatedText, nil\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Eventarc Go Client Library via Go Get\nDESCRIPTION: This Bash command utilizes the `go get` tool to download and install the official Google Cloud Eventarc Go client library package (`cloud.google.com/go/eventarc`) into the user's Go workspace or module.\nSOURCE: https://github.com/googleapis/google-cloud-go/blob/main/eventarc/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngo get cloud.google.com/go/eventarc\n```\n\n----------------------------------------\n\nTITLE: Installing Go Dependencies for genbot (Shell)\nDESCRIPTION: This command uses 'go get' to download and install necessary Go packages required for running the genbot tool and related development tasks, including the Go protobuf plugin, linters, goimports, staticcheck, and the Go GAPIC generator itself. It assumes Go is installed and GOPATH is configured.\nSOURCE: https://github.com/googleapis/google-cloud-go/blob/main/internal/gapicgen/cmd/genbot/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngo get \\\n    github.com/golang/protobuf/protoc-gen-go \\\n    golang.org/x/lint/golint \\\n    golang.org/x/tools/cmd/goimports \\\n    honnef.co/go/tools/cmd/staticcheck \\\n    github.com/googleapis/gapic-generator-go/cmd/protoc-gen-go_gapic\n```\n\n----------------------------------------\n\nTITLE: Installing Cloud Optimization API Client Library with Go - Bash\nDESCRIPTION: Installs the Cloud Optimization API Go client library using Go Modules. This command downloads and adds the library specified by the package identifier (cloud.google.com/go/optimization) to your Go module dependencies. Ensure that Go Modules are enabled and that your shell environment has Go installed and properly set up. No additional parameters are required; input is the package path and output is an updated go.mod/go.sum.\nSOURCE: https://github.com/googleapis/google-cloud-go/blob/main/optimization/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngo get cloud.google.com/go/optimization\n```\n\n----------------------------------------\n\nTITLE: Installing the Cloud Translation Go Client Library\nDESCRIPTION: This command uses the Go toolchain's `go get` command to download and install the official Google Cloud Translation API client library for Go. Running this command adds the `cloud.google.com/go/translate` package to your Go project's dependencies.\nSOURCE: https://github.com/googleapis/google-cloud-go/blob/main/translate/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngo get cloud.google.com/go/translate\n```\n\n----------------------------------------\n\nTITLE: Installing the Contact Center AI Insights Go Package (Bash)\nDESCRIPTION: This command uses the Go toolchain (`go get`) to download and install the `cloud.google.com/go/contactcenterinsights` package and its dependencies. This is the standard method for adding Go package dependencies to a project.\nSOURCE: https://github.com/googleapis/google-cloud-go/blob/main/contactcenterinsights/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngo get cloud.google.com/go/contactcenterinsights\n```\n\n----------------------------------------\n\nTITLE: Installing Policy Simulator API Go Client Library - Bash\nDESCRIPTION: This code snippet demonstrates how to install the Policy Simulator client library for Go using the go get command. Ensure that Go is already installed and configured on your system before running this command. The snippet installs the module from the cloud.google.com/go/policysimulator path, making it available for import in Go projects.\nSOURCE: https://github.com/googleapis/google-cloud-go/blob/main/policysimulator/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngo get cloud.google.com/go/policysimulator\n\n```\n\n----------------------------------------\n\nTITLE: Installing Network Management Go Package (Bash)\nDESCRIPTION: This Bash command uses the `go get` tool to download and install the Google Cloud Network Management Go client library (`cloud.google.com/go/networkmanagement`) and its dependencies. This command fetches the package from its source repository and places it in the user's Go workspace.\nSOURCE: https://github.com/googleapis/google-cloud-go/blob/main/networkmanagement/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngo get cloud.google.com/go/networkmanagement\n```\n\n----------------------------------------\n\nTITLE: Installing the Cloud Life Sciences Go Client Library\nDESCRIPTION: This Bash command uses the `go get` tool to download and install the Go client library for the Google Cloud Life Sciences API into the local Go workspace. This makes the library available for use in Go projects.\nSOURCE: https://github.com/googleapis/google-cloud-go/blob/main/lifesciences/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngo get cloud.google.com/go/lifesciences\n```\n\n----------------------------------------\n\nTITLE: Installing VM Migration Go Package using Go Get\nDESCRIPTION: This shell command utilizes the Go toolchain's `go get` command to download and install the `cloud.google.com/go/vmmigration` package along with its dependencies. Executing this command makes the VM Migration API client library available for import and use within a Go development project. It requires the Go toolchain to be installed and configured in the system's PATH.\nSOURCE: https://github.com/googleapis/google-cloud-go/blob/main/vmmigration/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngo get cloud.google.com/go/vmmigration\n```\n\n----------------------------------------\n\nTITLE: Installing Distributed Cloud Edge Container Go Client Library - Bash\nDESCRIPTION: This bash command installs the Google Cloud Go client library for the Distributed Cloud Edge Container API using Go modules. Before running this command, ensure that Go is properly installed and your project is configured to use modules (go.mod present). The dependency 'cloud.google.com/go/edgecontainer' will be downloaded and added to your module's dependencies.\nSOURCE: https://github.com/googleapis/google-cloud-go/blob/main/edgecontainer/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngo get cloud.google.com/go/edgecontainer\n\n```\n\n----------------------------------------\n\nTITLE: Installing the Dataproc Metastore API Go Client Library using Bash\nDESCRIPTION: This snippet shows how to install the Go client library for Google Cloud Dataproc Metastore by running a 'go get' command in the terminal. It requires Go to be installed and properly set up in your environment. The command pulls and installs the latest version of the 'cloud.google.com/go/metastore' package for use in Go projects.\nSOURCE: https://github.com/googleapis/google-cloud-go/blob/main/metastore/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngo get cloud.google.com/go/metastore\n```\n\n----------------------------------------\n\nTITLE: Installing the Notebooks API Go Client Library using Bash\nDESCRIPTION: This command utilizes the `go get` tool to download and install the Google Cloud Notebooks API Go client library (`cloud.google.com/go/notebooks`) along with its dependencies into the Go workspace. This is the standard method for incorporating Go package dependencies into a project.\nSOURCE: https://github.com/googleapis/google-cloud-go/blob/main/notebooks/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngo get cloud.google.com/go/notebooks\n```\n\n----------------------------------------\n\nTITLE: Installing the Storage Insights Go Client Library\nDESCRIPTION: This command uses the Go toolchain to download and install the `cloud.google.com/go/storageinsights` package, which is the Go client library for the Google Cloud Storage Insights API. Running this command makes the library available for use in Go projects.\nSOURCE: https://github.com/googleapis/google-cloud-go/blob/main/storageinsights/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngo get cloud.google.com/go/storageinsights\n```\n\n----------------------------------------\n\nTITLE: Installing the AutoML Go Client Library using Go Get\nDESCRIPTION: This command utilizes the Go package manager (`go get`) to download and install the `cloud.google.com/go/automl` package. This package is the official Go client library for interacting with Google Cloud's AutoML API. Running this command adds the library as a dependency to your Go project.\nSOURCE: https://github.com/googleapis/google-cloud-go/blob/main/automl/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngo get cloud.google.com/go/automl\n```\n\n----------------------------------------\n\nTITLE: Installing the Storage Transfer Go Package\nDESCRIPTION: This command uses the Go toolchain's `go get` command to download and install the Google Cloud Storage Transfer API client library for Go (`cloud.google.com/go/storagetransfer`). Executing this command makes the package available for import in Go projects. Requires the Go language environment to be set up correctly.\nSOURCE: https://github.com/googleapis/google-cloud-go/blob/main/storagetransfer/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngo get cloud.google.com/go/storagetransfer\n```\n\n----------------------------------------\n\nTITLE: Installing Stackdriver Trace API Go Client Library - Bash\nDESCRIPTION: This bash snippet provides the minimal installation command for the Stackdriver Trace Go client library, enabling developers to fetch and integrate the package into their Go project via Go modules. No additional parameters are required; running this command will fetch the latest version of the library compatible with your environment. This requires having Go installed and properly set up on your machine, and is typically run in a terminal session at the root of your Go module.\nSOURCE: https://github.com/googleapis/google-cloud-go/blob/main/trace/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngo get cloud.google.com/go/trace\n```\n\n----------------------------------------\n\nTITLE: Installing GKE Connect Go Library using go get (Bash)\nDESCRIPTION: This command uses the Go toolchain's `go get` utility to download and install the `cloud.google.com/go/gkeconnect` package, making the GKE Connect Go client library available for use in Go projects. Requires the Go development environment to be set up.\nSOURCE: https://github.com/googleapis/google-cloud-go/blob/main/gkeconnect/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngo get cloud.google.com/go/gkeconnect\n```\n\n----------------------------------------\n\nTITLE: Installing the Google Analytics Go Package (Bash)\nDESCRIPTION: This command uses the standard Go toolchain's `go get` command to download and install the Google Analytics client library package (`cloud.google.com/go/analytics`) from its source repository. This makes the package available for import in Go projects.\nSOURCE: https://github.com/googleapis/google-cloud-go/blob/main/analytics/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngo get cloud.google.com/go/analytics\n```\n\n----------------------------------------\n\nTITLE: Installing the Assured Workloads Go Client Library (Bash)\nDESCRIPTION: This command uses the 'go get' tool to download and install the Go client library package for the Google Cloud Assured Workloads API (cloud.google.com/go/assuredworkloads) into the local Go workspace. This is the standard method for adding Go package dependencies to a project.\nSOURCE: https://github.com/googleapis/google-cloud-go/blob/main/assuredworkloads/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngo get cloud.google.com/go/assuredworkloads\n```\n\n----------------------------------------\n\nTITLE: Installing Telco Automation Go Library via go get (Bash)\nDESCRIPTION: This command utilizes the Go package manager ('go get') to download and install the necessary Go client library for interacting with the Google Cloud Telco Automation API. It specifically fetches the package located at 'cloud.google.com/go/telcoautomation'. Running this command adds the library as a dependency to the current Go project.\nSOURCE: https://github.com/googleapis/google-cloud-go/blob/main/telcoautomation/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngo get cloud.google.com/go/telcoautomation\n```\n\n----------------------------------------\n\nTITLE: Installing Identity Toolkit API Client Library using Go - Bash\nDESCRIPTION: This snippet demonstrates how to install the Google Cloud Identity Toolkit API client library for Go using the Go package manager. Prerequisites include having Go installed on your system. Executing the command will add the latest library version to your project's dependencies, enabling you to import and use it in your Go applications. There are no additional required parameters, and the installation must be run in a terminal or shell environment within your Go project directory.\nSOURCE: https://github.com/googleapis/google-cloud-go/blob/main/identitytoolkit/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngo get cloud.google.com/go/identitytoolkit\n\n```\n\n----------------------------------------\n\nTITLE: Installing reCAPTCHA Enterprise Go Module via Go Get (Bash)\nDESCRIPTION: This command uses the Go toolchain's `go get` command to download and install the `cloud.google.com/go/recaptchaenterprise` Go module. Executing this command makes the reCAPTCHA Enterprise client library available for import and use within Go projects. Requires the Go programming language environment to be set up.\nSOURCE: https://github.com/googleapis/google-cloud-go/blob/main/recaptchaenterprise/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngo get cloud.google.com/go/recaptchaenterprise\n```\n\n----------------------------------------\n\nTITLE: Installing Google Cloud Network Security API Client with go get - Bash\nDESCRIPTION: This snippet demonstrates how to install the official Google Cloud Network Security API client library for Go using the standard Go package management tool. It requires Go to be installed and configured in your environment. Running this command fetches the package and makes it available for import within any Go project. The only parameter needed is the module path: 'cloud.google.com/go/networksecurity'. No further configuration is shown in this step.\nSOURCE: https://github.com/googleapis/google-cloud-go/blob/main/networksecurity/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngo get cloud.google.com/go/networksecurity\n\n```\n\n----------------------------------------\n\nTITLE: Installing Essential Contacts Go Client Library (Bash)\nDESCRIPTION: This command uses the Go toolchain (`go get`) to download and install the `cloud.google.com/go/essentialcontacts` package. This package is the official Go client library for interacting with the Google Cloud Essential Contacts API. Running this command will add the library as a dependency to your Go project.\nSOURCE: https://github.com/googleapis/google-cloud-go/blob/main/essentialcontacts/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngo get cloud.google.com/go/essentialcontacts\n```\n\n----------------------------------------\n\nTITLE: Optional Docker Volume Mount for Go Cache (Shell)\nDESCRIPTION: An optional flag for the 'docker run' command when running genbot in local mode with Docker. It mounts the host's Go module cache (obtained via 'go env GOMODCACHE') into the container's expected cache location, potentially speeding up the build process by reusing downloaded dependencies.\nSOURCE: https://github.com/googleapis/google-cloud-go/blob/main/internal/gapicgen/cmd/genbot/README.md#_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\n-v `go env GOMODCACHE`:/root/go/pkg/mod\n```\n\n----------------------------------------\n\nTITLE: Installing the Service Control Go Client Library (Bash)\nDESCRIPTION: This command utilizes the standard Go toolchain's `go get` utility to download and install the Go package required for using the Google Cloud Service Control API client library (`cloud.google.com/go/servicecontrol`). Running this command requires a correctly configured Go development environment.\nSOURCE: https://github.com/googleapis/google-cloud-go/blob/main/servicecontrol/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngo get cloud.google.com/go/servicecontrol\n```\n\n----------------------------------------\n\nTITLE: Installing Google Cloud KMS Go Client Library using Go Modules - Bash\nDESCRIPTION: This bash snippet demonstrates how to install the Google Cloud KMS client library for Go using the Go module system. The command 'go get cloud.google.com/go/kms' fetches and installs the library as a dependency in the current Go module. Prerequisites include Go being installed, a properly initialized go.mod file in your project, and network access to fetch the dependency. The key input is the module path for the KMS client library; the expected output is the presence of the dependency in your go.mod and go.sum files. This command must be executed in your project root directory.\nSOURCE: https://github.com/googleapis/google-cloud-go/blob/main/kms/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngo get cloud.google.com/go/kms\n```\n\n----------------------------------------\n\nTITLE: Installing the Data Labeling Go Client Library\nDESCRIPTION: This shell command uses the `go get` tool to download and install the `cloud.google.com/go/datalabeling` package, which is the Go client library for the Google Cloud Data Labeling API. This command should be run in a terminal where the Go environment is properly configured.\nSOURCE: https://github.com/googleapis/google-cloud-go/blob/main/datalabeling/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngo get cloud.google.com/go/datalabeling\n```\n\n----------------------------------------\n\nTITLE: Installing Infrastructure Manager API Go Client Library in Bash\nDESCRIPTION: This snippet demonstrates how to install the Infrastructure Manager API client library for Go using the Go module system. It requires Go to be installed on the local environment and relies on internet connectivity to fetch the package from cloud.google.com/go/config. The command should be run in your Go project directory, and after execution, the library will be added to your project's dependencies for use in development.\nSOURCE: https://github.com/googleapis/google-cloud-go/blob/main/config/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngo get cloud.google.com/go/config\n\n```\n\n----------------------------------------\n\nTITLE: Installing Migration Center API Go Client Library - Bash\nDESCRIPTION: This Bash command installs the Go Client Library for the Migration Center API. It requires Go to be installed and properly set up (with GO111MODULE=on or using Go modules). The command fetches the package from cloud.google.com and adds it as a dependency to the current Go project. No specific parameters are required, and the expected output is that the library will be available in the module's go.mod file.\nSOURCE: https://github.com/googleapis/google-cloud-go/blob/main/migrationcenter/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngo get cloud.google.com/go/migrationcenter\n\n```\n\n----------------------------------------\n\nTITLE: Installing Google Cloud Video Intelligence Client Library using Go Modules - Bash\nDESCRIPTION: This snippet provides the command to install the Go client library for the Google Cloud Video Intelligence API via Go modules. It requires that Go modules are enabled in the environment. The 'go get' command fetches and adds the 'cloud.google.com/go/videointelligence' package to your project dependencies. It accepts no explicit parameters, and the main output is the addition of the library to your go.mod file.\nSOURCE: https://github.com/googleapis/google-cloud-go/blob/main/videointelligence/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngo get cloud.google.com/go/videointelligence\n```\n\n----------------------------------------\n\nTITLE: Installing Media Translation Go Library using go get\nDESCRIPTION: This command uses the Go package manager (`go get`) to download and install the Google Cloud Media Translation client library (`cloud.google.com/go/mediatranslation`). This makes the library available for use in Go projects. Requires a working Go installation.\nSOURCE: https://github.com/googleapis/google-cloud-go/blob/main/mediatranslation/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngo get cloud.google.com/go/mediatranslation\n```\n\n----------------------------------------\n\nTITLE: Installing Google Cloud Support API Client Library in Go using Bash\nDESCRIPTION: This snippet demonstrates how to install the Google Cloud Support API Go client library via the command line using Go modules. It uses the 'go get' tool to download and add 'cloud.google.com/go/support' to your project's dependencies. Ensure that Go modules are enabled and that your project is properly initialized with a go.mod file before running this command.\nSOURCE: https://github.com/googleapis/google-cloud-go/blob/main/support/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngo get cloud.google.com/go/support\n\n```\n\n----------------------------------------\n\nTITLE: Installing Go Dialogflow API Client - Bash\nDESCRIPTION: This snippet demonstrates how to install the official Go client library for Dialogflow using the Go command-line tool. It requires an existing Go environment and properly set up Go modules in your project. Executing this command will add the 'cloud.google.com/go/dialogflow' library as a dependency in your project's go.mod file. No parameters are needed; the command must be run from your module root directory. The expected output is the library being available in your Go environment for import and use.\nSOURCE: https://github.com/googleapis/google-cloud-go/blob/main/dialogflow/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngo get cloud.google.com/go/dialogflow\n\n```\n\n----------------------------------------\n\nTITLE: Installing Certificate Manager Client Library with Go Modules - Bash\nDESCRIPTION: Installs the Google Cloud Certificate Manager client library for Go using the go get command. This command requires Go modules to be enabled in your project. Running this command downloads and installs the latest compatible version of the certificatemanager package from cloud.google.com. Ensure your environment has go installed and that you are inside a Go module.\nSOURCE: https://github.com/googleapis/google-cloud-go/blob/main/certificatemanager/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngo get cloud.google.com/go/certificatemanager\n```\n\n----------------------------------------\n\nTITLE: Installing Service Usage API Go Client using go get - Bash\nDESCRIPTION: This command installs the Google Cloud Service Usage API Go client library into your project using Go modules. It must be run from a terminal in your Go project directory. The dependency 'cloud.google.com/go/serviceusage' will be added to your go.mod file, enabling you to import and use the client in application code. Ensure you have Go installed and initialized with 'go mod init' before running this command. The command takes no parameters and outputs nothing if successful.\nSOURCE: https://github.com/googleapis/google-cloud-go/blob/main/serviceusage/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngo get cloud.google.com/go/serviceusage\n\n```\n\n----------------------------------------\n\nTITLE: Running Go Code Generation\nDESCRIPTION: This command executes the Go code generation tool within the `internal/version` directory. It processes source files looking for `//go:generate` directives and runs the commands specified by those directives. This step is required during manual releases (for both root and submodules) after updating version-related source files to generate necessary code artifacts.\nSOURCE: https://github.com/googleapis/google-cloud-go/blob/main/RELEASING.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ngo generate\n```\n\n----------------------------------------\n\nTITLE: Installing the Compute API Go Module using go get (Bash)\nDESCRIPTION: This command uses the Go toolchain's `go get` command to download and install the Google Cloud Compute API client library for Go (`cloud.google.com/go/compute`) into the local Go workspace. This is the standard way to add Go dependencies to a project. Requires a working Go installation and network access to fetch the package.\nSOURCE: https://github.com/googleapis/google-cloud-go/blob/main/compute/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngo get cloud.google.com/go/compute\n```\n\n----------------------------------------\n\nTITLE: Migrating BigQuery Table Listing in Go (v0.4.0)\nDESCRIPTION: Illustrates the migration from `Dataset.ListTables` to the iterator pattern using `Dataset.Tables`. The new approach involves iterating through results using the `Next()` method and checking for `iterator.Done`.\nSOURCE: https://github.com/googleapis/google-cloud-go/blob/main/CHANGES.md#_snippet_19\n\nLANGUAGE: go\nCODE:\n```\ntables, err := ds.ListTables(ctx)\n```\n\nLANGUAGE: go\nCODE:\n```\nit := ds.Tables(ctx)\nfor {\n    table, err := it.Next()\n    if err == iterator.Done {\n        break\n    }\n    if err != nil {\n        // TODO: Handle error.\n    }\n    // TODO: use table.\n}\n```\n\n----------------------------------------\n\nTITLE: Passing OpenTelemetry Options in gRPC-based Clients (Go)\nDESCRIPTION: This Go snippet shows how to pass OpenTelemetry configuration options to gRPC-based Google Cloud clients. It uses otelgrpc to monitor received message events, creating a custom gRPC DialOption for propagating context and statistics. The example illustrates client initialization, addition of stats handlers, and error handling patterns. Dependencies include Google Cloud Go client libraries, OpenTelemetry gRPC instrumentation (otelgrpc), and gRPC itself. Inputs are the project ID and context; outputs are an instrumented datastore client. Resources must be closed explicitly after usage.\nSOURCE: https://github.com/googleapis/google-cloud-go/blob/main/debug.md#_snippet_2\n\nLANGUAGE: Go\nCODE:\n```\nprojectID := \"...\"\\nctx := context.Background()\\n\\n// An example of passing options to grpc.WithStatsHandler.\\notelOpts := otelgrpc.WithMessageEvents(otelgrpc.ReceivedEvents)\\ndialOpts := grpc.WithStatsHandler(otelgrpc.NewClientHandler(otelOpts))\\n\\nctx := context.Background()\\nc, err := datastore.NewClient(ctx, projectID, option.WithGRPCDialOption(dialOpts))\\nif err != nil {\\n    log.Fatal(err)\\n}\\ndefer c.Close()\n```\n\n----------------------------------------\n\nTITLE: Installing the Organization Policy Go Library using go get (Bash)\nDESCRIPTION: This command uses the Go package manager (`go get`) to download and install the `cloud.google.com/go/orgpolicy` module. This is the standard way to add the Go client library for the Google Cloud Organization Policy API as a dependency to a Go project. Requires a correctly configured Go development environment.\nSOURCE: https://github.com/googleapis/google-cloud-go/blob/main/orgpolicy/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngo get cloud.google.com/go/orgpolicy\n```\n\n----------------------------------------\n\nTITLE: Installing Google Cloud Longrunning Helper Library using Go Modules - Bash\nDESCRIPTION: Demonstrates how to install the 'cloud.google.com/go/longrunning' package via the Go module system using the 'go get' command. This command fetches the latest version of the longrunning helper library and adds it as a dependency to your Go module. Ensure you are running this within a directory initialized with 'go mod init'; requires Go 1.11 or higher. The 'longrunning' package aids in managing long running operations in Google Cloud projects.\nSOURCE: https://github.com/googleapis/google-cloud-go/blob/main/longrunning/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngo get cloud.google.com/go/longrunning\n\n```\n\n----------------------------------------\n\nTITLE: Installing BeyondCorp API Go Client Library - Bash\nDESCRIPTION: This bash code snippet demonstrates how to install the BeyondCorp API Go client library using Go modules. Dependency: an existing Go installation and correctly configured environment variables (such as GOPATH). The 'go get cloud.google.com/go/beyondcorp' command downloads and installs the package and its dependencies. No parameters or inputs are required, and it outputs the package installation as part of the Go module.\nSOURCE: https://github.com/googleapis/google-cloud-go/blob/main/beyondcorp/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngo get cloud.google.com/go/beyondcorp\n```\n\n----------------------------------------\n\nTITLE: Installing Google Cloud Compute Metadata Library using Go Modules - Bash\nDESCRIPTION: This code snippet shows the shell command to add the Google Cloud Compute metadata client library as a dependency in your Go project. It requires Go modules to be enabled in your project workspace. Run this command from the terminal in your project root to download and update your go.mod and go.sum files. No additional parameters are needed, and successful execution will add 'cloud.google.com/go/compute/metadata' as a dependency.\nSOURCE: https://github.com/googleapis/google-cloud-go/blob/main/compute/metadata/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngo get cloud.google.com/go/compute/metadata\n```\n\n----------------------------------------\n\nTITLE: Installing the Go OS Login Library using go get\nDESCRIPTION: This shell command uses the Go toolchain's 'go get' command to download and install the Cloud OS Login API client library for Go from its canonical import path 'cloud.google.com/go/oslogin'. This command requires a properly configured Go development environment.\nSOURCE: https://github.com/googleapis/google-cloud-go/blob/main/oslogin/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngo get cloud.google.com/go/oslogin\n```\n\n----------------------------------------\n\nTITLE: Installing the Rapid Migration Assessment Go Client Library\nDESCRIPTION: This command uses the `go get` tool to download and install the Go client library for the Google Cloud Rapid Migration Assessment API. It fetches the package `cloud.google.com/go/rapidmigrationassessment` and its dependencies, making them available for use in a Go project. Requires the Go toolchain to be installed.\nSOURCE: https://github.com/googleapis/google-cloud-go/blob/main/rapidmigrationassessment/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngo get cloud.google.com/go/rapidmigrationassessment\n```\n\n----------------------------------------\n\nTITLE: Setting Namespace on Datastore Query in Go (v0.5.0+)\nDESCRIPTION: Shows how to specify a namespace for a Datastore query using the `Namespace` method on a `Query` object, as required since v0.5.0. This replaces the previous `WithNamespace` function.\nSOURCE: https://github.com/googleapis/google-cloud-go/blob/main/CHANGES.md#_snippet_11\n\nLANGUAGE: go\nCODE:\n```\nq := datastore.NewQuery(\"Kind\").Namespace(\"ns\")\n```\n\n----------------------------------------\n\nTITLE: Passing OpenTelemetry Options in HTTP-based Clients (Go)\nDESCRIPTION: This Go snippet demonstrates how to configure OpenTelemetry context propagation for HTTP-based Google Cloud clients by passing custom otelhttp Transport options. It shows how to set up a new HTTP client with a filtered OpenTelemetry transport, where requests matching a certain path (e.g., '/ping') are excluded from tracing. Required dependencies include the Google Cloud Go client libraries, OpenTelemetry HTTP instrumentation (otelhttp), and appropriate authentication scopes. The key parameters are Transport options, HTTP client, and HTTP request path filters. Inputs are the context and HTTP transport settings; outputs are an instrumented and customized Google Cloud client. Users must set OAuth scopes manually in this approach.\nSOURCE: https://github.com/googleapis/google-cloud-go/blob/main/debug.md#_snippet_1\n\nLANGUAGE: Go\nCODE:\n```\nctx := context.Background()\\ntrans, err := htransport.NewTransport(ctx,\\n    http.DefaultTransport,\\n    option.WithScopes(storage.ScopeFullControl),\\n)\\nif err != nil {\\n    log.Fatal(err)\\n}\\n// An example of passing options to the otelhttp.Transport.\\notelOpts := otelhttp.WithFilter(func(r *http.Request) bool {\\n    return r.URL.Path != \"/ping\"\\n})\\nhc := &http.Client{\\n    Transport: otelhttp.NewTransport(trans, otelOpts),\\n}\\nclient, err := storage.NewClient(ctx, option.WithHTTPClient(hc))\n```\n\n----------------------------------------\n\nTITLE: Updating gapic-generator-go Dependency (Shell)\nDESCRIPTION: Uses 'go get -d' within the 'internal/gapicgen' directory to update the dependency for the Go GAPIC microgenerator tool ('protoc-gen-go_gapic') to the latest version specified in the project's go.mod file or a newer version if available, without building or installing commands. This effectively bumps the generator version used by genbot.\nSOURCE: https://github.com/googleapis/google-cloud-go/blob/main/internal/gapicgen/cmd/genbot/README.md#_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\ncd /path/to/internal/gapicgen\ngo get -d github.com/googleapis/gapic-generator-go/cmd/protoc-gen-go_gapic\n```\n\n----------------------------------------\n\nTITLE: Conventional Commits Example for PR Commit Messages - Markdown\nDESCRIPTION: This snippet demonstrates the proper format of a commit message using the Conventional Commits style for PRs to the project. While not a code block for execution, it is a template reference. The format specifies a type, scope, and description.\nSOURCE: https://github.com/googleapis/google-cloud-go/blob/main/CONTRIBUTING.md#_snippet_6\n\nLANGUAGE: markdown\nCODE:\n```\nfeat(functions): add gophers codelab\n```\n\n----------------------------------------\n\nTITLE: Running Protoveneer Tool with Configuration and Input Directory (Shell)\nDESCRIPTION: Executes the `protoveneer` command-line tool. It requires two arguments: the path to a configuration file (e.g., `config.yaml`) and the path to a directory containing pre-generated Go protocol buffer files (`*.pb.go`). The tool generates idiomatic Go veneer types based on these inputs, writing the output Go source code to the current directory or the one specified by the `-outdir` flag.\nSOURCE: https://github.com/googleapis/google-cloud-go/blob/main/internal/protoveneer/README.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nprotoveneer config.yaml ../ai/generativelanguage/apiv1beta/generativelanguagepb\n```\n\n----------------------------------------\n\nTITLE: Running Bigtable Integration Tests with Custom Flags - Shell\nDESCRIPTION: This shell command snippet shows how to invoke Go integration tests for the Bigtable client with custom flags to target a production environment. It requires Go to be installed on the system and the test environment to be configured accordingly. Key flags include '-it.use-prod' to enable production mode and project/cluster/instance identifiers for targeting the appropriate Bigtable resources. Outputs verbose test results and runs only integration test cases with the specified naming pattern.\nSOURCE: https://github.com/googleapis/google-cloud-go/blob/main/bigtable/CONTRIBUTING.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngo test -test.run=\\\"TestIntegration_*\\\" -v \\\n    -it.use-prod \\\n    -it.project=\\\"your-project-id\\\" \\\n    -it.cluster=\\\"your-test-cluster\\\" \\\n    -it.instance=\\\"your-test-instance\\\"\n```\n\n----------------------------------------\n\nTITLE: Running Migration Tool for Message Type Aliases in Bash\nDESCRIPTION: This Bash snippet demonstrates how to execute the aliasfix migration tool to update deprecated message type imports in Go projects using cloud.google.com/go. The script runs the aliasfix command, which updates import statements, followed by go mod tidy to clean up module dependencies. Requires Go installed, network access to fetch modules, and permissions to update your project files. Inputs are the project directory and outputs are updated import paths in Go files.\nSOURCE: https://github.com/googleapis/google-cloud-go/blob/main/migration.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngo run cloud.google.com/go/internal/aliasfix/cmd/aliasfix@latest .\ngo mod tidy\n\n```\n\n----------------------------------------\n\nTITLE: Generating Go Protobuf Code for SentencePiece Model (Shell)\nDESCRIPTION: These shell commands are used during development to regenerate the Go code (`*.pb.go`) from the SentencePiece model's protobuf definition file (`sentencepiece_model.proto`). It requires navigating to the `internal/model` directory and executing the `gen.sh` script. The protobuf definition itself is sourced from the official SentencePiece repository.\nSOURCE: https://github.com/googleapis/google-cloud-go/blob/main/vertexai/internal/sentencepiece/README.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ cd internal/model\n$ ./gen.sh\n```\n\n----------------------------------------\n\nTITLE: Running Go BigQuery Benchmark with Dynamic Flags (Shell)\nDESCRIPTION: This shell command demonstrates a more realistic invocation of the `bench.go` benchmark tool, utilizing shell substitutions for dynamic configuration. It sets the number of reruns to 5, uses an environment variable (`$BENCHMARK_TABLE`) to specify the results table, and dynamically generates tags using shell commands: the machine's hostname (`$(hostname)`), the current git branch (`$(git branch --show-current)`), and the latest git commit hash (`$(git log --pretty=format:'%H' -n 1)`).\nSOURCE: https://github.com/googleapis/google-cloud-go/blob/main/bigquery/benchmarks/README.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ngo run bench.go \\\n  --reruns=5 \\\n  --table=$BENCHMARK_TABLE \\\n  --tag=origin:$(hostname) \\\n  --tag=branch:$(git branch --show-current) \\\n  --tag=latestcommit:$(git log --pretty=format:'%H' -n 1)\n```\n\n----------------------------------------\n\nTITLE: Validating Post-Processor Configuration - Bash\nDESCRIPTION: These Go command-line invocations run validation checks against the OwlBot and post-processor YAML configs. They are run from the root of the repository, with optional flags for targeting the googleapis directory or specifying alternative config paths. Requires Go installed and proper repo layout. Inputs are paths to relevant config files; outputs are console validation results.\nSOURCE: https://github.com/googleapis/google-cloud-go/blob/main/internal/postprocessor/README.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ngo run ./internal/postprocessor validate\n```\n\nLANGUAGE: bash\nCODE:\n```\ngo run ./internal/postprocessor validate -googleapis-dir=$GOOGLEAPIS\n```\n\nLANGUAGE: bash\nCODE:\n```\ngo run ./internal/postprocessor \\\\n   -owl-bot-config=$OWL_BOT_YAML \\\\n   -processor-config=$CONFIG_YAML\n```\n\n----------------------------------------\n\nTITLE: Stopping httpr Recording Gracefully\nDESCRIPTION: This command sends the SIGINT signal (signal number 2) to the running `httpr` process (whose process ID should replace the placeholder). This instructs `httpr` to finalize the recording, write all captured interactions to the specified replay file, and then exit cleanly.\nSOURCE: https://github.com/googleapis/google-cloud-go/blob/main/httpreplay/cmd/httpr/README.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nkill -2\n```\n\n----------------------------------------\n\nTITLE: Running the Pub/Sub Benchwrapper Service (Bash)\nDESCRIPTION: These shell commands demonstrate how to run the Pub/Sub benchwrapper. First, it changes the directory to where the benchwrapper source code resides. Then, it sets the `PUBSUB_EMULATOR_HOST` environment variable to point the Pub/Sub client to a local emulator instance. Finally, it compiles and runs all Go files in the current directory using `go run`, passing the `--port=8081` flag to specify the port on which the gRPC service should listen. This setup requires Go to be installed and the Pub/Sub emulator to be running on `localhost:8080`.\nSOURCE: https://github.com/googleapis/google-cloud-go/blob/main/pubsub/internal/benchwrapper/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncd pubsub/internal/benchwrapper\nexport PUBSUB_EMULATOR_HOST=localhost:8080\ngo run *.go --port=8081\n```\n\n----------------------------------------\n\nTITLE: Running Spanner Benchwrapper via Shell Commands\nDESCRIPTION: This shell snippet illustrates how to set up and launch the Spanner benchwrapper for benchmarking purposes. It requires the user to navigate to the correct project directory, set the SPANNER_EMULATOR_HOST environment variable, and execute all Go files in the directory using a specified gRPC port. Environment variables like SPANNER_EMULATOR_HOST must be configured for proper operation, and Go runtime must be installed. The output is a running gRPC service on the desired port, suitable for integration with external benchmarking tools.\nSOURCE: https://github.com/googleapis/google-cloud-go/blob/main/spanner/internal/benchwrapper/README.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncd spanner/internal/benchwrapper\nexport SPANNER_EMULATOR_HOST=localhost:9010\ngo run *.go --port=8081\n```\n\n----------------------------------------\n\nTITLE: Running the godocfx Tool (Shell)\nDESCRIPTION: Provides examples of executing the `godocfx` command-line tool to generate DocFX YAML for Go modules. It covers scenarios like navigating into a module directory and processing all packages (`cd module && godocfx ./...`), processing specific Cloud packages (`godocfx cloud.google.com/go/...`), printing output directly to standard output instead of writing files (`-print`), specifying a custom output directory (`-out`), and removing the output directory before generation (`-rm`). Default output is `./obj/api`.\nSOURCE: https://github.com/googleapis/google-cloud-go/blob/main/internal/godocfx/README.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncd module && godocfx ./...\ngodocfx cloud.google.com/go/...\ngodocfx -print cloud.google.com/go/storage/...\ngodocfx -out custom/output/dir cloud.google.com/go/...\ngodocfx -rm custom/output/dir cloud.google.com/go/...\n```\n\n----------------------------------------\n\nTITLE: Testing the godocfx Tool (Shell)\nDESCRIPTION: Shows the command used to run the test suite for the `godocfx` tool using the standard Go testing framework (`go test`). This specific example demonstrates running tests verbosely (`-v`) and simultaneously updating the golden files (`-update-goldens`), which are used as reference outputs for comparison during testing.\nSOURCE: https://github.com/googleapis/google-cloud-go/blob/main/internal/godocfx/README.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ngo test -v -update-goldens\n```\n\n----------------------------------------\n\nTITLE: Installing and Running aliasfix Tool in Bash\nDESCRIPTION: This bash code block demonstrates how to install the aliasfix tool, execute it to migrate imports in the current directory, and then clean up Go module dependencies. It requires Go to be installed on the system as well as up-to-date dependencies for the relevant cloud client library and go-genproto. The core parameters are the tool install location, the working directory (.), and the subsequent go mod tidy clean-up. Input is a shell environment with the prerequisites installed, and output is migration of imports and a tidy go.mod/go.sum state. Constraints: must be run from a shell with requisite privileges and Go environment configured.\nSOURCE: https://github.com/googleapis/google-cloud-go/blob/main/internal/aliasfix/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngo install cloud.google.com/go/internal/aliasfix/cmd/aliasfix@latest\naliasfix .\ngo mod tidy\n```\n\n----------------------------------------\n\nTITLE: Running genbot Locally in Local Mode (Shell)\nDESCRIPTION: Executes the genbot tool locally using 'go run' specifically for generating GAPIC source code without creating Pull Requests. The '-local' flag enables local mode, '-only-gapics' restricts it to GAPIC generation, '-gocloud-dir' specifies the target google-cloud-go directory, and '-gapic' defines the specific library to generate. Assumes the command is run from the internal/gapicgen directory.\nSOURCE: https://github.com/googleapis/google-cloud-go/blob/main/internal/gapicgen/cmd/genbot/README.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ncd /path/to/internal/gapicgen\ngo run cloud.google.com/go/internal/gapicgen/cmd/genbot \\\n   -local \\\n   -only-gapics \\\n   -gocloud-dir=/path/to/google-cloud-go \\\n   -gapic=cloud.google.com/go/foo/apiv1\n```\n\n----------------------------------------\n\nTITLE: Running changefinder with Various Flags in Shell\nDESCRIPTION: Demonstrates executing the 'changefinder' Go tool from the shell with different command-line flags. Examples include targeting a specific directory ('-dir'), enabling quiet mode ('-q'), setting the output format to 'github' ('-format=github'), and specifying the variable name for GitHub Actions output ('-gh-var'). Requires Go to be installed and the 'changefinder' command to be built or runnable via 'go run'.\nSOURCE: https://github.com/googleapis/google-cloud-go/blob/main/internal/actions/cmd/changefinder/README.md#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n# targeting a git repository other than current working directory\ngo run ./internal/actions/cmd/changefinder -dir /path/to/your/go/repo\n\n# quiet mode, github format\ngo run ./internal/actions/cmd/changefinder -q -format=github\n\n# quiet mode, github format, github var name \"foo\"\ngo run ./internal/actions/cmd/changefinder -q -format=github -gh-var=foo\n```\n\n----------------------------------------\n\nTITLE: Executing updateall Go Command with Various Flags\nDESCRIPTION: Provides example shell commands demonstrating how to run the `updateall` Go program using `go run`. These examples show updating the `google.golang.org/api` dependency to the latest version or a specific version (v0.122.0), including or excluding indirect dependencies (`-no-indirect`), enabling quiet mode (`-q`), and customizing the commit type (`-commit-level`) and message (`-msg`).\nSOURCE: https://github.com/googleapis/google-cloud-go/blob/main/internal/actions/cmd/updateall/README.md#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n# update the google.golang.org/api dependency to latest including indirect deps\ngo run ./internal/actions/cmd/updateall -dep google.golang.org/api\n\n# quiet mode, update google.golang.org/api dependency to v0.122.0 including indirect deps\ngo run ./internal/actions/cmd/updateall -q -dep google.golang.org/api -version=v0.122.0\n\n# update google.golang.org/api dependency to v0.122.0 excluding indirect deps\ngo run ./internal/actions/cmd/updateall -dep google.golang.org/api -version=v0.122.0 -no-indirect\n\n# update the google.golang.org/api dependency to latest including indirect deps, with custom commit type and message\ngo run ./internal/actions/cmd/updateall -dep google.golang.org/api -commit-level chore -msg \"bump apiary\"\n```\n\n----------------------------------------\n\nTITLE: Defining the Internal Library Version Constant in Go\nDESCRIPTION: This Go code snippet declares a constant named `Version` within the `internal` package. It assigns the string value \"0.0.0\" to this constant, intended to represent the current tagged release version of the library. This is likely used internally for identification or tracking purposes. The preceding comments indicate the code is generated by `gapicgen`, licensed under Apache 2.0, and should not be modified manually.\nSOURCE: https://github.com/googleapis/google-cloud-go/blob/main/internal/postprocessor/_internal_version.go.txt#_snippet_0\n\nLANGUAGE: go\nCODE:\n```\n// Copyright {{.Year}} Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n// Code generated by gapicgen. DO NOT EDIT.\n\npackage internal\n\n// Version is the current tagged release of the library.\nconst Version = \"0.0.0\"\n```\n\n----------------------------------------\n\nTITLE: Logging Synchronously with Cloud Logging in Go\nDESCRIPTION: Illustrates synchronous log ingestion for critical entries using the Go client library. It gets a logger instance and uses the `LogSync` method, providing a context and the log entry. This method blocks until the entry is ingested.\nSOURCE: https://github.com/googleapis/google-cloud-go/blob/main/logging/README.md#_snippet_2\n\nLANGUAGE: go\nCODE:\n```\n```go\nlogger := client.Logger(\"my-log\")\nlogger.LogSync(context.Background(), logging.Entry{Payload: \"something happened!\"})\n```\n```\n\n----------------------------------------\n\nTITLE: Generating Go Protocol Buffer Bindings with protoc - Shell\nDESCRIPTION: This shell snippet demonstrates how to use the Protocol Buffer compiler ('protoc') to generate Go language source files from all .proto files in the current directory. Requires protoc and the Go protobuf plugin to be installed and available in the environment. The input is any set of .proto files and the output is the corresponding .pb.go files, placed in the current directory. Used to prepare Go code for running automated conformance tests; assumes the working directory contains the relevant .proto files.\nSOURCE: https://github.com/googleapis/google-cloud-go/blob/main/storage/internal/test/conformance/README.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nprotoc --go_out=. *.proto\n```\n\n----------------------------------------\n\nTITLE: Creating a New Release Tag using Git\nDESCRIPTION: This Git command creates a new tag named `$NV` (representing the New Version, e.g., `vX.Y.Z` or `datastore/vX.Y.Z`) pointing to the current commit (HEAD). This is a crucial step in both root and submodule manual release processes, performed after the release preparation pull request has been merged into the main branch to mark the release commit.\nSOURCE: https://github.com/googleapis/google-cloud-go/blob/main/RELEASING.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ngit tag $NV\n```\n\n----------------------------------------\n\nTITLE: Viewing Submodule Commit History Since Last Release (Datastore Example)\nDESCRIPTION: This Git command displays the commit log, specifically showing changes within the `datastore/` directory that have occurred since the tag `$CV` (the Current Version tag for the datastore submodule). This command is used during the manual release process for a submodule to accurately identify the changes relevant only to that submodule for inclusion in its dedicated `CHANGES.md` file.\nSOURCE: https://github.com/googleapis/google-cloud-go/blob/main/RELEASING.md#_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\ngit log $CV.. -- datastore/\n```\n\n----------------------------------------\n\nTITLE: Documenting Version History and Bug Fixes - Markdown\nDESCRIPTION: This snippet exemplifies a changelog section in Markdown format, listing release versions, dates, and descriptions for changes. There are no code dependencies; the format requires Markdown support, and each entry follows a consistent pattern using headers and bullet points. Inputs are new version updates, outputs are historical and contextual insights for maintainers and users. No executable code is present; all entries are for documentation purposes.\nSOURCE: https://github.com/googleapis/google-cloud-go/blob/main/memcache/CHANGES.md#_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n# Changes\n\n## [1.11.6](https://github.com/googleapis/google-cloud-go/compare/memcache/v1.11.5...memcache/v1.11.6) (2025-04-15)\n\n\n### Bug Fixes\n\n* **memcache:** Update google.golang.org/api to 0.229.0 ([3319672](https://github.com/googleapis/google-cloud-go/commit/3319672f3dba84a7150772ccb5433e02dab7e201))\n\n## [1.11.5](https://github.com/googleapis/google-cloud-go/compare/memcache/v1.11.4...memcache/v1.11.5) (2025-03-13)\n\n\n### Bug Fixes\n\n* **memcache:** Update golang.org/x/net to 0.37.0 ([1144978](https://github.com/googleapis/google-cloud-go/commit/11449782c7fb4896bf8b8b9cde8e7441c84fb2fd))\n\n## [1.11.4](https://github.com/googleapis/google-cloud-go/compare/memcache/v1.11.3...memcache/v1.11.4) (2025-03-06)\n\n\n### Bug Fixes\n\n* **memcache:** Fix out-of-sync version.go ([28f0030](https://github.com/googleapis/google-cloud-go/commit/28f00304ebb13abfd0da2f45b9b79de093cca1ec))\n\n## [1.11.3](https://github.com/googleapis/google-cloud-go/compare/memcache/v1.11.2...memcache/v1.11.3) (2025-01-02)\n\n\n### Bug Fixes\n\n* **memcache:** Update golang.org/x/net to v0.33.0 ([e9b0b69](https://github.com/googleapis/google-cloud-go/commit/e9b0b69644ea5b276cacff0a707e8a5e87efafc9))\n\n## [1.11.2](https://github.com/googleapis/google-cloud-go/compare/memcache/v1.11.1...memcache/v1.11.2) (2024-10-23)\n\n\n### Bug Fixes\n\n* **memcache:** Update google.golang.org/api to v0.203.0 ([8bb87d5](https://github.com/googleapis/google-cloud-go/commit/8bb87d56af1cba736e0fe243979723e747e5e11e))\n* **memcache:** WARNING: On approximately Dec 1, 2024, an update to Protobuf will change service registration function signatures to use an interface instead of a concrete type in generated .pb.go files. This change is expected to affect very few if any users of this client library. For more information, see https://togithub.com/googleapis/google-cloud-go/issues/11020. ([8bb87d5](https://github.com/googleapis/google-cloud-go/commit/8bb87d56af1cba736e0fe243979723e747e5e11e))\n\n## [1.11.1](https://github.com/googleapis/google-cloud-go/compare/memcache/v1.11.0...memcache/v1.11.1) (2024-09-12)\n\n\n### Bug Fixes\n\n* **memcache:** Bump dependencies ([2ddeb15](https://github.com/googleapis/google-cloud-go/commit/2ddeb1544a53188a7592046b98913982f1b0cf04))\n\n## [1.11.0](https://github.com/googleapis/google-cloud-go/compare/memcache/v1.10.12...memcache/v1.11.0) (2024-08-20)\n\n\n### Features\n\n* **memcache:** Add support for Go 1.23 iterators ([84461c0](https://github.com/googleapis/google-cloud-go/commit/84461c0ba464ec2f951987ba60030e37c8a8fc18))\n\n## [1.10.12](https://github.com/googleapis/google-cloud-go/compare/memcache/v1.10.11...memcache/v1.10.12) (2024-08-08)\n\n\n### Bug Fixes\n\n* **memcache:** Update google.golang.org/api to v0.191.0 ([5b32644](https://github.com/googleapis/google-cloud-go/commit/5b32644eb82eb6bd6021f80b4fad471c60fb9d73))\n\n## [1.10.11](https://github.com/googleapis/google-cloud-go/compare/memcache/v1.10.10...memcache/v1.10.11) (2024-07-24)\n\n\n### Bug Fixes\n\n* **memcache:** Update dependencies ([257c40b](https://github.com/googleapis/google-cloud-go/commit/257c40bd6d7e59730017cf32bda8823d7a232758))\n\n## [1.10.10](https://github.com/googleapis/google-cloud-go/compare/memcache/v1.10.9...memcache/v1.10.10) (2024-07-10)\n\n\n### Bug Fixes\n\n* **memcache:** Bump google.golang.org/grpc@v1.64.1 ([8ecc4e9](https://github.com/googleapis/google-cloud-go/commit/8ecc4e9622e5bbe9b90384d5848ab816027226c5))\n\n## [1.10.9](https://github.com/googleapis/google-cloud-go/compare/memcache/v1.10.8...memcache/v1.10.9) (2024-07-01)\n\n\n### Bug Fixes\n\n* **memcache:** Bump google.golang.org/api@v0.187.0 ([8fa9e39](https://github.com/googleapis/google-cloud-go/commit/8fa9e398e512fd8533fd49060371e61b5725a85b))\n\n## [1.10.8](https://github.com/googleapis/google-cloud-go/compare/memcache/v1.10.7...memcache/v1.10.8) (2024-06-26)\n\n\n### Bug Fixes\n\n* **memcache:** Enable new auth lib ([b95805f](https://github.com/googleapis/google-cloud-go/commit/b95805f4c87d3e8d10ea23bd7a2d68d7a4157568))\n\n## [1.10.7](https://github.com/googleapis/google-cloud-go/compare/memcache/v1.10.6...memcache/v1.10.7) (2024-05-01)\n\n\n### Bug Fixes\n\n* **memcache:** Bump x/net to v0.24.0 ([ba31ed5](https://github.com/googleapis/google-cloud-go/commit/ba31ed5fda2c9664f2e1cf972469295e63deb5b4))\n\n## [1.10.6](https://github.com/googleapis/google-cloud-go/compare/memcache/v1.10.5...memcache/v1.10.6) (2024-03-14)\n\n\n### Bug Fixes\n\n* **memcache:** Update protobuf dep to v1.33.0 ([30b038d](https://github.com/googleapis/google-cloud-go/commit/30b038d8cac0b8cd5dd4761c87f3f298760dd33a))\n\n## [1.10.5](https://github.com/googleapis/google-cloud-go/compare/memcache/v1.10.4...memcache/v1.10.5) (2024-01-30)\n\n\n### Bug Fixes\n\n* **memcache:** Enable universe domain resolution options ([fd1d569](https://github.com/googleapis/google-cloud-go/commit/fd1d56930fa8a747be35a224611f4797b8aeb698))\n\n## [1.10.4](https://github.com/googleapis/google-cloud-go/compare/memcache/v1.10.3...memcache/v1.10.4) (2023-11-01)\n\n\n### Bug Fixes\n\n* **memcache:** Bump google.golang.org/api to v0.149.0 ([8d2ab9f](https://github.com/googleapis/google-cloud-go/commit/8d2ab9f320a86c1c0fab90513fc05861561d0880))\n\n## [1.10.3](https://github.com/googleapis/google-cloud-go/compare/memcache/v1.10.2...memcache/v1.10.3) (2023-10-26)\n\n\n### Bug Fixes\n\n* **memcache:** Update grpc-go to v1.59.0 ([81a97b0](https://github.com/googleapis/google-cloud-go/commit/81a97b06cb28b25432e4ece595c55a9857e960b7))\n\n## [1.10.2](https://github.com/googleapis/google-cloud-go/compare/memcache/v1.10.1...memcache/v1.10.2) (2023-10-12)\n\n\n### Bug Fixes\n\n* **memcache:** Update golang.org/x/net to v0.17.0 ([174da47](https://github.com/googleapis/google-cloud-go/commit/174da47254fefb12921bbfc65b7829a453af6f5d))\n\n## [1.10.1](https://github.com/googleapis/google-cloud-go/compare/memcache/v1.10.0...memcache/v1.10.1) (2023-06-20)\n\n\n### Bug Fixes\n\n* **memcache:** REST query UpdateMask bug ([df52820](https://github.com/googleapis/google-cloud-go/commit/df52820b0e7721954809a8aa8700b93c5662dc9b))\n\n## [1.10.0](https://github.com/googleapis/google-cloud-go/compare/memcache/v1.9.1...memcache/v1.10.0) (2023-05-30)\n\n\n### Features\n\n* **memcache:** Update all direct dependencies ([b340d03](https://github.com/googleapis/google-cloud-go/commit/b340d030f2b52a4ce48846ce63984b28583abde6))\n\n## [1.9.1](https://github.com/googleapis/google-cloud-go/compare/memcache/v1.9.0...memcache/v1.9.1) (2023-05-08)\n\n\n### Bug Fixes\n\n* **memcache:** Update grpc to v1.55.0 ([1147ce0](https://github.com/googleapis/google-cloud-go/commit/1147ce02a990276ca4f8ab7a1ab65c14da4450ef))\n\n## [1.9.0](https://github.com/googleapis/google-cloud-go/compare/memcache/v1.8.0...memcache/v1.9.0) (2023-01-04)\n\n\n### Features\n\n* **memcache:** Add REST client ([06a54a1](https://github.com/googleapis/google-cloud-go/commit/06a54a16a5866cce966547c51e203b9e09a25bc0))\n\n## [1.8.0](https://github.com/googleapis/google-cloud-go/compare/memcache/v1.7.0...memcache/v1.8.0) (2022-12-01)\n\n\n### Features\n\n* **memcache:** maintenance schedules ([22ec3e3](https://github.com/googleapis/google-cloud-go/commit/22ec3e3e727f8c0232059a5d31bccd12b7b5034c))\n\n## [1.7.0](https://github.com/googleapis/google-cloud-go/compare/memcache/v1.6.0...memcache/v1.7.0) (2022-11-03)\n\n\n### Features\n\n* **memcache:** rewrite signatures in terms of new location ([3c4b2b3](https://github.com/googleapis/google-cloud-go/commit/3c4b2b34565795537aac1661e6af2442437e34ad))\n\n## [1.6.0](https://github.com/googleapis/google-cloud-go/compare/memcache/v1.5.0...memcache/v1.6.0) (2022-10-25)\n\n\n### Features\n\n* **memcache:** start generating stubs dir ([de2d180](https://github.com/googleapis/google-cloud-go/commit/de2d18066dc613b72f6f8db93ca60146dabcfdcc))\n\n## [1.5.0](https://github.com/googleapis/google-cloud-go/compare/memcache/v1.4.0...memcache/v1.5.0) (2022-09-21)\n\n\n### Features\n\n* **memcache:** rewrite signatures in terms of new types for betas ([9f303f9](https://github.com/googleapis/google-cloud-go/commit/9f303f9efc2e919a9a6bd828f3cdb1fcb3b8b390))\n\n## [1.4.0](https://github.com/googleapis/google-cloud-go/compare/memcache/v1.3.0...memcache/v1.4.0) (2022-09-19)\n\n\n### Features\n\n* **memcache:** start generating proto message types ([563f546](https://github.com/googleapis/google-cloud-go/commit/563f546262e68102644db64134d1071fc8caa383))\n\n## [1.3.0](https://github.com/googleapis/google-cloud-go/compare/memcache/v1.2.0...memcache/v1.3.0) (2022-06-29)\n\n\n### Features\n\n* **memcache:** start generating REST client for beta clients ([25b7775](https://github.com/googleapis/google-cloud-go/commit/25b77757c1e6f372e03bf99ab7461264bba48d26))\n\n## [1.2.0](https://github.com/googleapis/google-cloud-go/compare/memcache/v1.1.0...memcache/v1.2.0) (2022-02-23)\n\n\n### Features\n\n* **memcache:** set versionClient to module version ([55f0d92](https://github.com/googleapis/google-cloud-go/commit/55f0d92bf112f14b024b4ab0076c9875a17423c9))\n\n## [1.1.0](https://github.com/googleapis/google-cloud-go/compare/memcache/v1.0.0...memcache/v1.1.0) (2022-02-14)\n\n\n### Features\n\n* **memcache:** add file for tracking version ([17b36ea](https://github.com/googleapis/google-cloud-go/commit/17b36ead42a96b1a01105122074e65164357519e))\n\n## 1.0.0\n\nStabilize GA surface.\n\n## v0.1.0\n\nThis is the first tag to carve out memcache as its own module. See\n[Add a module to a multi-module repository](https://github.com/golang/go/wiki/Modules#is-it-possible-to-add-a-module-to-a-multi-module-repository).\n\n```\n\n----------------------------------------\n\nTITLE: Running Benchmarks with go run - Go / GCS CLI\nDESCRIPTION: This code snippet demonstrates how to execute the Go GCS benchmarking tool with customized options for project ID, number of samples, object size range, result output file, and log redirection. It requires Go installed and network access to Google Cloud Storage. The parameters allow specifying workload size (number of iterations, object sizes), output format, and logging, which are essential for performance testing in a background session. Inputs include command-line parameters for project, samples, object size, and output file; all outputs are written to results and log files as specified. The command is intended to run in a shell environment and should be adapted for the user's project setup.\nSOURCE: https://github.com/googleapis/google-cloud-go/blob/main/storage/internal/benchmarks/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngo run main -project {PROJECT_ID} -samples 1000 -object_size=524288..2147483648 -o {RESULTS_FILE_NAME} &> out.log &\n```\n\n----------------------------------------\n\nTITLE: Creating Pub/Sub Topic for Storage Notification Tests - Bash\nDESCRIPTION: This command creates a Pub/Sub topic used for integration testing of storage notifications. Dependencies include the gcloud CLI with beta components enabled. Inputs are limited to the topic name and the active project. After running this command, additional permissions may need to be set via the GCP console.\nSOURCE: https://github.com/googleapis/google-cloud-go/blob/main/CONTRIBUTING.md#_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\n# Creates a PubSub topic for integration tests of storage notifications.\n$ gcloud beta pubsub topics create go-storage-notification-test\n# Next, go to the Pub/Sub dashboard in GCP console. Authorize the user\n# \"service-<numeric project id>@gs-project-accounts.iam.gserviceaccount.com\"\n# as a publisher to that topic.\n```\n\n----------------------------------------\n\nTITLE: Deprecated Creating Incomplete Datastore Key in Go (Pre-v0.5.0)\nDESCRIPTION: Shows the usage of the `NewIncompleteKey` function, which was used prior to v0.5.0 to create an incomplete Datastore key. This function required a context and has been replaced by `IncompleteKey`.\nSOURCE: https://github.com/googleapis/google-cloud-go/blob/main/CHANGES.md#_snippet_13\n\nLANGUAGE: go\nCODE:\n```\nNewIncompleteKey(ctx, kind, parent)\n```\n\n----------------------------------------\n\nTITLE: Pushing a Release Tag to Remote using Git\nDESCRIPTION: This Git command pushes the specified tag `$NV` (representing the New Version) from the local repository to the remote repository named `origin`. This action makes the newly created release tag publicly available and is the final step in publishing the tag during a manual release process for both root and submodules.\nSOURCE: https://github.com/googleapis/google-cloud-go/blob/main/RELEASING.md#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ngit push origin $NV\n```\n\n----------------------------------------\n\nTITLE: Listing Stable Git Tags for a Submodule (Datastore Example)\nDESCRIPTION: This Git command lists all tags (`git tag -l`), then filters them using `grep datastore` to select only tags related to the 'datastore' submodule. It further filters out pre-release tags using `grep -v beta` and `grep -v alpha`. This is used during the manual release process for a submodule to find its current latest stable version tag (`$CV`, e.g., `datastore/vX.Y.Z`).\nSOURCE: https://github.com/googleapis/google-cloud-go/blob/main/RELEASING.md#_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ngit tag -l | grep datastore | grep -v beta | grep -v alpha\n```\n\n----------------------------------------\n\nTITLE: Starting httpr in Replay Mode\nDESCRIPTION: This command starts the `httpr` proxy in replay mode. The `-replay` flag specifies the input file (`myclient.replay`) containing previously recorded HTTP interactions. `httpr` will intercept client requests and serve responses directly from this file instead of contacting the actual remote servers.\nSOURCE: https://github.com/googleapis/google-cloud-go/blob/main/httpreplay/cmd/httpr/README.md#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nhttpr -replay myclient.replay\n```\n\n----------------------------------------\n\nTITLE: Running Go BigQuery Benchmark with Explicit Flags (Shell)\nDESCRIPTION: This shell command executes the `bench.go` program, specifying various configuration options via flags. It sets the number of query reruns to 5, targets a specific Google Cloud project (`test_project_id`), directs benchmark results to a BigQuery table (`logging_project_id.querybenchmarks.measurements`), instructs the tool to create the table if it doesn't exist (`--create_table`), and adds several custom key-value tags for identifying the benchmark run.\nSOURCE: https://github.com/googleapis/google-cloud-go/blob/main/bigquery/benchmarks/README.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngo run bench.go \\\n  --reruns=5 \\\n  --projectid=test_project_id \\\n  --table=logging_project_id.querybenchmarks.measurements \\\n  --create_table \\\n  --tag=source:myhostname \\\n  --tag=somekeywithnovalue \\\n  --tag=experiment:special_environment_thing\n```\n\n----------------------------------------\n\nTITLE: Starting httpr in Record Mode\nDESCRIPTION: This command launches the `httpr` proxy in record mode. The `-record` flag specifies the output file (`myclient.replay`) where the recorded HTTP interactions will be saved. By default, it listens on port 8080 and opens a control port on 8181, although these can be changed with flags.\nSOURCE: https://github.com/googleapis/google-cloud-go/blob/main/httpreplay/cmd/httpr/README.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nhttpr -record myclient.replay\n```\n\n----------------------------------------\n\nTITLE: Migrating Storage Object Composition in Go (v0.3.0)\nDESCRIPTION: Illustrates the change from `ObjectHandle.ComposeFrom` to the `ComposerFrom` pattern. `dst.ComposeFrom(ctx, []*storage.ObjectHandle{src1, src2}, nil)` is replaced by `dst.ComposerFrom(src1, src2).Run(ctx)`.\nSOURCE: https://github.com/googleapis/google-cloud-go/blob/main/CHANGES.md#_snippet_36\n\nLANGUAGE: go\nCODE:\n```\nattrs, err := dst.ComposeFrom(ctx, []*storage.ObjectHandle{src1, src2}, nil)\n```\n\nLANGUAGE: go\nCODE:\n```\nattrs, err := dst.ComposerFrom(src1, src2).Run(ctx)\n```\n\n----------------------------------------\n\nTITLE: Compiling Protobuf Definition to Go Code and Descriptors using protoc (Shell)\nDESCRIPTION: This shell command first changes the current directory to `spanner/testdata`. It then executes `protoc`, specifying the path to the proto definitions (`protos/`), including imports, defining the output file for the descriptor set (`protos/descriptors.pb`), and setting the output directory for the generated Go code (`protos/`). The target proto file is `protos/singer.proto`. This command requires `protoc` and the corresponding Go plugin (`protoc-gen-go`) to be installed and available in the system's PATH.\nSOURCE: https://github.com/googleapis/google-cloud-go/blob/main/spanner/testdata/protos/README.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncd spanner/testdata\nprotoc --proto_path=protos/ --include_imports --descriptor_set_out=protos/descriptors.pb --go_out=protos/ protos/singer.proto\n```\n\n----------------------------------------\n\nTITLE: Enabling Spanner Multiplexed Sessions via Environment Variable in Shell\nDESCRIPTION: This shell command sets the `GOOGLE_CLOUD_SPANNER_MULTIPLEXED_SESSIONS` environment variable to `true`. This configuration enables the use of multiplexed sessions within the Google Cloud Spanner Go client library when running the benchmark or application.\nSOURCE: https://github.com/googleapis/google-cloud-go/blob/main/spanner/benchmarks/README.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nGOOGLE_CLOUD_SPANNER_MULTIPLEXED_SESSIONS=true\n```\n\n----------------------------------------\n\nTITLE: Configuring BigQuery GCS Loader Options in Go (v0.4.0)\nDESCRIPTION: Shows how to configure options for a BigQuery GCS load operation. Instead of passing options to the `Copy` method, fields are set directly on the `Loader` struct obtained from `Table.LoaderFrom`.\nSOURCE: https://github.com/googleapis/google-cloud-go/blob/main/CHANGES.md#_snippet_27\n\nLANGUAGE: go\nCODE:\n```\nloader := table.LoaderFrom(gcsRef)\nloader.WriteDisposition = bigquery.WriteTruncate\n```\n\n----------------------------------------\n\nTITLE: Migrating Storage Object Copy with Attributes in Go (v0.3.0)\nDESCRIPTION: Shows how to specify attributes during a storage object copy operation. Instead of passing an `ObjectAttrs` pointer to `CopyTo`, attributes are set as fields on the `Copier` object obtained from `dst.CopierFrom(src)` before calling `Run(ctx)`.\nSOURCE: https://github.com/googleapis/google-cloud-go/blob/main/CHANGES.md#_snippet_35\n\nLANGUAGE: go\nCODE:\n```\nattrs, err := src.CopyTo(ctx, dst, &storage.ObjectAttrs{ContextType: \"text/html\"})\n```\n\nLANGUAGE: go\nCODE:\n```\nc := dst.CopierFrom(src)\nc.ContextType = \"text/html\"\nattrs, err := c.Run(ctx)\n```\n\n----------------------------------------\n\nTITLE: Generating Go Protobuf and gRPC Code using protoc\nDESCRIPTION: This bash command executes the Protocol Buffer compiler (`protoc`) to generate Go source code from the `echo.proto` definition file. It utilizes the `protoc-gen-go` plugin (`--go_out`) for standard protobuf messages and the `protoc-gen-go-grpc` plugin (`--go-grpc_out`) for gRPC service definitions. The `--go_opt=paths=source_relative` and `--go-grpc_opt=paths=source_relative` options ensure that the generated Go files are placed in the same directory structure relative to the input `.proto` file, outputting them in the current directory (`.`). Prerequisites include having `protoc`, `protoc-gen-go`, `protoc-gen-go-grpc` installed and the `echo.proto` file present in the execution directory.\nSOURCE: https://github.com/googleapis/google-cloud-go/blob/main/auth/grpctransport/testdata/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nprotoc --go_out=. --go_opt=paths=source_relative --go-grpc_out=. --go-grpc_opt=paths=source_relative echo.proto \n```\n\n----------------------------------------\n\nTITLE: Migrating BigQuery Iterator Start Index Configuration in Go (v0.4.0)\nDESCRIPTION: Demonstrates how to set the starting index for a `RowIterator`. The `StartIndex(i)` option is replaced by directly setting the `StartIndex` field on the iterator.\nSOURCE: https://github.com/googleapis/google-cloud-go/blob/main/CHANGES.md#_snippet_23\n\nLANGUAGE: go\nCODE:\n```\nit.StartIndex = i\n```\n\n----------------------------------------\n\nTITLE: Regenerating Protobuf Files with protoc in Shell\nDESCRIPTION: This shell snippet demonstrates how to regenerate Go source code from .proto files for the Spanner internal benchwrapper by first changing to the proto directory and then running the protoc compiler with Go and gRPC plugins enabled. It depends on having the protocol buffer compiler (protoc) and relevant Go plugins installed and configured, and expects all .proto files to reside in the working directory. Outputs new or updated *_pb.go files suitable for integration into a Go project with gRPC support.\nSOURCE: https://github.com/googleapis/google-cloud-go/blob/main/spanner/internal/benchwrapper/proto/README.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncd spanner/internal/benchwrapper/proto\nprotoc --go_out=plugins=grpc:. *.proto\n```\n\n----------------------------------------\n\nTITLE: Deprecated BigQuery Row Iteration with ValueList in Go (Pre-v0.6.0)\nDESCRIPTION: Illustrates the previous method (before v0.6.0) of iterating through BigQuery query results using `RowIterator.Next` with a `ValueList` variable. This type was removed in v0.6.0 and replaced with `[]Value`.\nSOURCE: https://github.com/googleapis/google-cloud-go/blob/main/CHANGES.md#_snippet_8\n\nLANGUAGE: go\nCODE:\n```\nvar v ValueList\n... it.Next(&v) ..\n```\n\n----------------------------------------\n\nTITLE: Installing Vertex AI Go Package using Go Get (Bash)\nDESCRIPTION: This command uses the `go get` tool to download and install the `cloud.google.com/go/aiplatform` package, which is the Go client library for the Google Cloud Vertex AI API. It fetches the package and its dependencies, making them available for use in a Go project. Requires the Go toolchain to be installed.\nSOURCE: https://github.com/googleapis/google-cloud-go/blob/main/aiplatform/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngo get cloud.google.com/go/aiplatform\n```\n\n----------------------------------------\n\nTITLE: Installing the Vision AI Go Package using go get\nDESCRIPTION: This command utilizes the Go toolchain's 'go get' command to download and install the Google Cloud Vision AI Go client library package from 'cloud.google.com/go/visionai'. Executing this command makes the library's functionalities available for import and use within Go projects. A prerequisite is having a properly configured Go development environment.\nSOURCE: https://github.com/googleapis/google-cloud-go/blob/main/visionai/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngo get cloud.google.com/go/visionai\n```\n\n----------------------------------------\n\nTITLE: Installing the Cloud Natural Language Go Client Library (Bash)\nDESCRIPTION: This command uses the standard Go toolchain (`go get`) to download and install the `cloud.google.com/go/language` package, which is the Go client library for the Google Cloud Natural Language API. This is the primary step required to start using the library in a Go project. Requires Go to be installed and properly configured.\nSOURCE: https://github.com/googleapis/google-cloud-go/blob/main/language/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngo get cloud.google.com/go/language\n```\n\n----------------------------------------\n\nTITLE: Creating and Authorizing KMS Keyrings and Keys for Integration Tests - Bash\nDESCRIPTION: This extended snippet walks through exporting environment variables, creating KMS keyrings and encryption keys, exporting keyring paths, and authorizing Google Cloud Storage to use the encryption keys. These commands require the gcloud CLI and gsutil, and they provision KMS keys in relevant locations for general and Bigtable integration tests. Inputs include location, keyring name, and project ID, while outputs are configured keyrings and authorized resources.\nSOURCE: https://github.com/googleapis/google-cloud-go/blob/main/CONTRIBUTING.md#_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\n$ export MY_KEYRING=some-keyring-name\n$ export MY_LOCATION=global\n$ export MY_SINGLE_LOCATION=us-central1\n# Creates a KMS keyring, in the same location as the default location for your\n# project's buckets.\n$ gcloud kms keyrings create $MY_KEYRING --location $MY_LOCATION\n# Creates two keys in the keyring, named key1 and key2.\n$ gcloud kms keys create key1 --keyring $MY_KEYRING --location $MY_LOCATION --purpose encryption\n$ gcloud kms keys create key2 --keyring $MY_KEYRING --location $MY_LOCATION --purpose encryption\n# Sets the GCLOUD_TESTS_GOLANG_KEYRING environment variable.\n$ export GCLOUD_TESTS_GOLANG_KEYRING=projects/$GCLOUD_TESTS_GOLANG_PROJECT_ID/locations/$MY_LOCATION/keyRings/$MY_KEYRING\n# Authorizes Google Cloud Storage to encrypt and decrypt using key1.\n$ gsutil kms authorize -p $GCLOUD_TESTS_GOLANG_PROJECT_ID -k $GCLOUD_TESTS_GOLANG_KEYRING/cryptoKeys/key1\n\n# Create KMS Key in one region for Bigtable\n$ gcloud kms keyrings create $MY_KEYRING --location $MY_SINGLE_LOCATION\n$ gcloud kms keys create key1 --keyring $MY_KEYRING --location $MY_SINGLE_LOCATION --purpose encryption\n# Sets the GCLOUD_TESTS_BIGTABLE_KEYRING environment variable.\n$ export GCLOUD_TESTS_BIGTABLE_KEYRING=projects/$GCLOUD_TESTS_GOLANG_PROJECT_ID/locations/$MY_SINGLE_LOCATION/keyRings/$MY_KEYRING\n```\n\n----------------------------------------\n\nTITLE: Exporting Environment Variables for Go SDK Tests - Shell\nDESCRIPTION: This code block provides a set of export commands for initializing required environment variables for Google Cloud Go integration tests. The variables configure project IDs, service account keys, API keys, keyrings, locations, zone, and supported database lists for Datastore and Firestore modules. Required dependencies include access to the Google Cloud Console for acquiring project and key details. These exports should be placed in the shell initialization file (e.g., .zshrc) for persistent use. Proper values must be substituted, and missing credentials or paths may result in test failures.\nSOURCE: https://github.com/googleapis/google-cloud-go/blob/main/CONTRIBUTING.md#_snippet_8\n\nLANGUAGE: sh\nCODE:\n```\n#### START GO SDK Test Variables\n# Developers Console project's ID (e.g. bamboo-shift-455) for the general project.\nexport GCLOUD_TESTS_GOLANG_PROJECT_ID=your-project\n\n# Developers Console project's ID (e.g. bamboo-shift-455) for the Bigtable project.\nexport GCLOUD_TESTS_GOLANG_SECONDARY_BIGTABLE_PROJECT_ID=your-bigtable-optional-secondary-project\n\n# The path to the JSON key file of the general project's service account.\nexport GCLOUD_TESTS_GOLANG_KEY=~/directory/your-project-abcd1234.json\n\n# Comma separated list of developer's Datastore databases. If not provided, \n# default database i.e. empty string is used.\nexport GCLOUD_TESTS_GOLANG_DATASTORE_DATABASES=your-database-1,your-database-2\n\n# Developers Console project's ID (e.g. doorway-cliff-677) for the Firestore project.\nexport GCLOUD_TESTS_GOLANG_FIRESTORE_PROJECT_ID=your-firestore-project\n\n# Comma separated list of developer's Firestore databases. If not provided, default database is used.\nexport GCLOUD_TESTS_GOLANG_FIRESTORE_DATABASES=your-database-1,your-database-2\n\n# The path to the JSON key file of the Firestore project's service account.\nexport GCLOUD_TESTS_GOLANG_FIRESTORE_KEY=~/directory/your-firestore-project-abcd1234.json\n\n# The full name of the keyring for the tests, in the form \"projects/P/locations/L/keyRings/R\".\n# The creation of this is described below.\nexport MY_KEYRING=my-golang-sdk-test\nexport MY_LOCATION=global\nexport GCLOUD_TESTS_GOLANG_KEYRING=projects/$GCLOUD_TESTS_GOLANG_PROJECT_ID/locations/$MY_LOCATION/keyRings/$MY_KEYRING\n\n# API key for using the Translate API.\nexport GCLOUD_TESTS_API_KEY=abcdefghijk123456789\n\n# Compute Engine zone. (https://cloud.google.com/compute/docs/regions-zones)\nexport GCLOUD_TESTS_GOLANG_ZONE=your-chosen-region\n#### END GO SDK Test Variables\n```\n\n----------------------------------------\n\nTITLE: Deprecated gRPC Server Trace Interceptor Setup in Go (Pre-v0.9.0)\nDESCRIPTION: Shows the previous method for setting up a gRPC server with tracing using `trace.GRPCServerInterceptor(tc)` before v0.9.0. This approach required passing the trace client directly to the interceptor function from the trace package.\nSOURCE: https://github.com/googleapis/google-cloud-go/blob/main/CHANGES.md#_snippet_3\n\nLANGUAGE: go\nCODE:\n```\ns := grpc.NewServer(grpc.UnaryInterceptor(trace.GRPCServerInterceptor(tc)))\n```\n\n----------------------------------------\n\nTITLE: Enabling Spanner DirectPath Access via Environment Variable in Shell\nDESCRIPTION: This shell command sets the `GOOGLE_SPANNER_ENABLE_DIRECT_ACCESS` environment variable to `true`. This enables the DirectPath feature for the Google Cloud Spanner client, potentially providing lower latency connections by bypassing some networking hops.\nSOURCE: https://github.com/googleapis/google-cloud-go/blob/main/spanner/benchmarks/README.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nGOOGLE_SPANNER_ENABLE_DIRECT_ACCESS=true\n```\n\n----------------------------------------\n\nTITLE: Running genbot Locally in Bot Mode (Shell)\nDESCRIPTION: Executes the genbot tool locally using 'go run' to generate GAPIC code and automatically create GitHub Pull Requests. Requires environment variables GITHUB_ACCESS_TOKEN and GITHUB_USERNAME to be set for GitHub authentication, and specifies the committer's name and email. Assumes the command is run from the internal/gapicgen directory.\nSOURCE: https://github.com/googleapis/google-cloud-go/blob/main/internal/gapicgen/cmd/genbot/README.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ncd /path/to/internal/gapicgen\ngo run cloud.google.com/go/internal/gapicgen/cmd/genbot \\\n    --githubAccessToken=$GITHUB_ACCESS_TOKEN \\\n    --githubUsername=$GITHUB_USERNAME \\\n    --githubName=\"Jean de Klerk\" \\\n    --githubEmail=deklerk@google.com \\\n```\n\n----------------------------------------\n\nTITLE: Running genbot with Docker in Bot Mode (Shell)\nDESCRIPTION: Builds a Docker image named 'genbot' and then runs it in a container to generate GAPIC code and create Pull Requests. It mounts the parent directory of 'internal/gapicgen' into the container and passes GitHub credentials (access token, username, name, email) as environment variables. Requires Docker installed and running.\nSOURCE: https://github.com/googleapis/google-cloud-go/blob/main/internal/gapicgen/cmd/genbot/README.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ncd /path/to/internal/gapicgen/cmd/genbot\ndocker build . -t genbot\ndocker run -t --rm --privileged \\\n   -v `pwd`/../..:/gapicgen \\\n   -e GITHUB_ACCESS_TOKEN \\\n   -e GITHUB_USERNAME \\\n   -e GITHUB_NAME \\\n   -e GITHUB_EMAIL \\\n   genbot\n```\n\n----------------------------------------\n\nTITLE: Installing Cloud Tasks API Go Client Library (Bash)\nDESCRIPTION: This snippet demonstrates how to install the Google Cloud Tasks API client library for Go using the go get command. It requires Go to be installed on your system. Executing this command will add the cloudtasks package to your project's dependencies. No parameters are needed besides the library path. Upon completion, the package is available for import; ensure that your project meets any version or stability prerequisites as mentioned in the surrounding documentation.\nSOURCE: https://github.com/googleapis/google-cloud-go/blob/main/cloudtasks/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngo get cloud.google.com/go/cloudtasks\n\n```\n\n----------------------------------------\n\nTITLE: Provisioning Google Cloud Spanner Instance for Integration Tests - Bash\nDESCRIPTION: This snippet provisions a new Spanner instance for integration testing, specifying configuration, node count, and description. The gcloud CLI with beta features must be installed, and the operation may incur cost based on node usage. The instance can be deleted after use to minimize charges.\nSOURCE: https://github.com/googleapis/google-cloud-go/blob/main/CONTRIBUTING.md#_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\n# Creates a Spanner instance for the spanner integration tests.\n$ gcloud beta spanner instances create go-integration-test --config regional-us-central1 --nodes 10 --description 'Instance for go client test'\n# NOTE: Spanner instances are priced by the node-hour, so you may want to\n# delete the instance after testing with 'gcloud beta spanner instances delete'.\n```\n\n----------------------------------------\n\nTITLE: Running the Carver Tool using Go Run in Bash\nDESCRIPTION: This command executes the `carver` Go program located at `cmd/carver/main.go` using `go run`. It requires the Go environment to be set up and the google-cloud-go repository to be present. The command specifies the parent repository path (`-parent`), the repository metadata file path (`-repo-metadata`), and the name of the child module to be carved out (`-child=asset`).\nSOURCE: https://github.com/googleapis/google-cloud-go/blob/main/internal/carver/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngo run cmd/carver/main.go \\\n  -parent=/path/to/google-cloud-go \\\n  -repo-metadata=/path/to/google-cloud-go/internal/.repo-metadata-full.json \\\n  -child=asset\n```\n\n----------------------------------------\n\nTITLE: Committing and Pushing Module Bumps via Git Shell\nDESCRIPTION: Provides a sequence of Git commands intended to be run after generating nested commits (potentially using the previous 'changefinder' example). It checks out the 'main' branch, creates a new feature branch named 'bump-modules', commits all staged changes (including the touched CHANGES.md files) with a conventional commit message 'chore: bump changed modules', and pushes the new branch to the remote repository to initiate a pull request.\nSOURCE: https://github.com/googleapis/google-cloud-go/blob/main/internal/actions/cmd/changefinder/README.md#_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\ngit checkout main && \\\n  git checkout -b bump-modules && \\\n  git commit -a -m 'chore: bump changed modules' && \\\n  git push\n```\n\n----------------------------------------\n\nTITLE: Generating ProfilerServiceClient Mock with mockgen (Shell)\nDESCRIPTION: This shell command executes the `mockgen` tool to generate a mock implementation for the `ProfilerServiceClient` interface defined in the `google.golang.org/genproto/googleapis/devtools/cloudprofiler/v2` package. The generated code will belong to the `mocks` package and will be written to the `mock_profiler_client.go` file. Requires the `mockgen` tool (from github.com/golang/mock) to be installed. After generation, the copyright header must be manually re-added, and potential adjustments to the 'context' import might be needed for Go 1.6 compatibility.\nSOURCE: https://github.com/googleapis/google-cloud-go/blob/main/profiler/mocks/README.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmockgen -package mocks google.golang.org/genproto/googleapis/devtools/cloudprofiler/v2 \\\n         ProfilerServiceClient \\\n         > mock_profiler_client.go\n```\n\n----------------------------------------\n\nTITLE: Installing Area120 API Client Library - Go - Bash\nDESCRIPTION: This snippet provides the Go command to add the Area120 API client library to your project as a dependency. It requires the Go programming language and access to your environment's terminal or command line. The primary input is the module import path, and the output is the library being fetched and added to your Go module's dependencies. No additional configuration is performed in this step.\nSOURCE: https://github.com/googleapis/google-cloud-go/blob/main/area120/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngo get cloud.google.com/go/area120\n```\n\n----------------------------------------\n\nTITLE: Installing the Bare Metal Solution Go Client Library (Bash)\nDESCRIPTION: This command uses the Go toolchain's 'go get' command to download and install the Bare Metal Solution client library package from Google Cloud. This is the standard way to add the library dependency to a Go project, making its functionalities available for import and use.\nSOURCE: https://github.com/googleapis/google-cloud-go/blob/main/baremetalsolution/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngo get cloud.google.com/go/baremetalsolution\n```\n\n----------------------------------------\n\nTITLE: Installing the Cloud Data Fusion Go Client Library (Bash)\nDESCRIPTION: This command uses the standard Go toolchain (`go get`) to download and install the Cloud Data Fusion Go client library from its repository (`cloud.google.com/go/datafusion`). This makes the library available for import in Go projects. Requires Go tooling to be installed.\nSOURCE: https://github.com/googleapis/google-cloud-go/blob/main/datafusion/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngo get cloud.google.com/go/datafusion\n```\n\n----------------------------------------\n\nTITLE: Installing the Apigee Registry Go Client Library (Bash)\nDESCRIPTION: This command utilizes the Go package management tool (`go get`) to download and install the Apigee Registry API client library package (`cloud.google.com/go/apigeeregistry`). Executing this command makes the library available for import and use within Go projects.\nSOURCE: https://github.com/googleapis/google-cloud-go/blob/main/apigeeregistry/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngo get cloud.google.com/go/apigeeregistry\n```\n\n----------------------------------------\n\nTITLE: Installing the Parallelstore Go Module using Bash\nDESCRIPTION: This shell command uses the Go toolchain's 'go get' command to download and install the Google Cloud Parallelstore Go client library module. This makes the package available for import and use in Go projects. Requires a properly configured Go development environment.\nSOURCE: https://github.com/googleapis/google-cloud-go/blob/main/parallelstore/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngo get cloud.google.com/go/parallelstore\n```\n\n----------------------------------------\n\nTITLE: Installing Google Cloud Shopping Client Library - Bash\nDESCRIPTION: This bash snippet installs the Go client library for Google Cloud Shopping using the 'go get' command. Ensure you have Go installed and properly set up in your environment. Run the command in your terminal to fetch and install the library, resolving any necessary dependencies. The command expects that your GOPATH and environment variables for Go are configured correctly.\nSOURCE: https://github.com/googleapis/google-cloud-go/blob/main/shopping/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngo get cloud.google.com/go/shopping\n```\n\n----------------------------------------\n\nTITLE: Installing Google Cloud Data Catalog Client Library in Go - Bash\nDESCRIPTION: This snippet demonstrates how to install the Go client library for the Google Cloud Data Catalog API using the \\\"go get\\\" command. It requires Go modules to be enabled and assumes a Go development environment. The primary parameter is the package path \\\"cloud.google.com/go/datacatalog\\\". The command fetches and adds the latest version of the Data Catalog library to your module dependencies. Ensure you have network access and a functioning Go toolchain.\nSOURCE: https://github.com/googleapis/google-cloud-go/blob/main/datacatalog/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngo get cloud.google.com/go/datacatalog\n```\n\n----------------------------------------\n\nTITLE: Installing the Cloud Resource Manager Go Package\nDESCRIPTION: This command uses the Go toolchain (`go get`) to download and install the `cloud.google.com/go/resourcemanager` package, which is the Go client library for the Google Cloud Resource Manager API. Requires the Go programming language environment to be set up.\nSOURCE: https://github.com/googleapis/google-cloud-go/blob/main/resourcemanager/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngo get cloud.google.com/go/resourcemanager\n```\n\n----------------------------------------\n\nTITLE: Installing the Datastream Go Client Library using Go Get\nDESCRIPTION: This command uses the Go toolchain's `go get` command to download and install the Datastream Go client library package (`cloud.google.com/go/datastream`) into the user's Go workspace. This makes the library available for import in Go projects. Requires the Go toolchain to be installed and configured.\nSOURCE: https://github.com/googleapis/google-cloud-go/blob/main/datastream/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngo get cloud.google.com/go/datastream\n```\n\n----------------------------------------\n\nTITLE: Installing the Security Center Management Go Client (Bash)\nDESCRIPTION: This command uses the Go toolchain (`go get`) to download and install the Go client library for the Google Cloud Security Center Management API. Running this command adds the library as a dependency to the current Go project, enabling its use within Go applications.\nSOURCE: https://github.com/googleapis/google-cloud-go/blob/main/securitycentermanagement/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngo get cloud.google.com/go/securitycentermanagement\n```\n\n----------------------------------------\n\nTITLE: Installing Go Client Library via go get Command - Bash\nDESCRIPTION: This snippet demonstrates how to install the Cloud Dataplex Go client library using the go get command in a terminal environment. The command retrieves the package from the cloud.google.com/go/dataplex path and adds it to the project's dependencies. The Go toolchain must be installed and properly configured. No input parameters are required, and the library will be available for use in the Go project upon successful execution.\nSOURCE: https://github.com/googleapis/google-cloud-go/blob/main/dataplex/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngo get cloud.google.com/go/dataplex\n```\n\n----------------------------------------\n\nTITLE: Installing the AlloyDB Go Client Library\nDESCRIPTION: This command uses the Go package manager to download and install the AlloyDB Go client library module from its repository path `cloud.google.com/go/alloydb`. This makes the library available for use in Go projects.\nSOURCE: https://github.com/googleapis/google-cloud-go/blob/main/alloydb/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngo get cloud.google.com/go/alloydb\n```\n\n----------------------------------------\n\nTITLE: Installing Grafeas Go Client with go get - Bash\nDESCRIPTION: This snippet shows how to install the Grafeas client library for Go using the go get command. The cloud.google.com/go/grafeas module is fetched and added to the current Go module dependencies. The command should be run in a terminal with an initialized Go module workspace. No other parameters are needed; the resulting effect is to make the Grafeas API available for use in Go projects.\nSOURCE: https://github.com/googleapis/google-cloud-go/blob/main/grafeas/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngo get cloud.google.com/go/grafeas\n```\n\n----------------------------------------\n\nTITLE: Installing the Cloud Channel Go Client Library\nDESCRIPTION: This command uses the Go toolchain (`go get`) to download and install the `cloud.google.com/go/channel` package. This makes the Cloud Channel API Go client library available for use within Go projects. Requires the Go programming language environment to be set up.\nSOURCE: https://github.com/googleapis/google-cloud-go/blob/main/channel/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngo get cloud.google.com/go/channel\n```\n\n----------------------------------------\n\nTITLE: Installing the Confidential Computing Go Library\nDESCRIPTION: This command uses the Go package management tool (`go get`) to download and install the `cloud.google.com/go/confidentialcomputing` package. This makes the Confidential Computing API client library available for use within Go projects and automatically fetches required dependencies.\nSOURCE: https://github.com/googleapis/google-cloud-go/blob/main/confidentialcomputing/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngo get cloud.google.com/go/confidentialcomputing\n```\n\n----------------------------------------\n\nTITLE: Installing Access Context Manager Go Client Library with Go Modules - Bash\nDESCRIPTION: This snippet demonstrates how to install the Access Context Manager Go client library using the Go module system. It requires Go to be installed and initialized in the target workspace. The command downloads the library and adds it as a dependency to your Go module file. No additional configuration is necessary for this installation step, but further setup may be needed to authenticate and use the library.\nSOURCE: https://github.com/googleapis/google-cloud-go/blob/main/accesscontextmanager/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngo get cloud.google.com/go/accesscontextmanager\n```\n\n----------------------------------------\n\nTITLE: Installing Data QnA Go Client Library with go get - Bash\nDESCRIPTION: This snippet shows how to install the Google Cloud Data QnA Go client library using the go get command in a Bash shell. After running this command, the library will be added to your Go module dependencies. Requires Go installed and module initialization in your project. The input is the command line and the output is that the library is downloaded and available in your module.\nSOURCE: https://github.com/googleapis/google-cloud-go/blob/main/dataqna/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngo get cloud.google.com/go/dataqna\n```\n\n----------------------------------------\n\nTITLE: Installing the Distributed Cloud Edge Network Go Client Library\nDESCRIPTION: This command uses the Go package manager (`go get`) to download and install the Go client library for the Distributed Cloud Edge Network API (`cloud.google.com/go/edgenetwork`). Running this command makes the library available for import in Go projects. Requires the Go toolchain to be installed.\nSOURCE: https://github.com/googleapis/google-cloud-go/blob/main/edgenetwork/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngo get cloud.google.com/go/edgenetwork\n```\n\n----------------------------------------\n\nTITLE: Installing Google Cloud Street View Publish API Go Client Using Go Modules - Bash\nDESCRIPTION: This bash code snippet provides the command to install the Go client library for the Street View Publish API in a Go project. It uses the standard 'go get' tool to download and add the dependency 'cloud.google.com/go/streetview' to the Go module. The command assumes Go Modules are enabled; the resulting package will be available for import and usage in Go code. No additional parameters are required, and this should be run from the root of a Go module-enabled project.\nSOURCE: https://github.com/googleapis/google-cloud-go/blob/main/streetview/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngo get cloud.google.com/go/streetview\n```\n\n----------------------------------------\n\nTITLE: Installing the Service Health Go Module using go get\nDESCRIPTION: This command uses the standard Go toolchain command `go get` to download and install the `cloud.google.com/go/servicehealth` package and its dependencies into the user's Go workspace or project. This is the primary method for adding this library as a dependency to a Go project. Requires a properly configured Go development environment.\nSOURCE: https://github.com/googleapis/google-cloud-go/blob/main/servicehealth/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngo get cloud.google.com/go/servicehealth\n```\n\n----------------------------------------\n\nTITLE: Installing the Go Security Client Library using Go Get\nDESCRIPTION: This command uses the standard Go toolchain (`go get`) to download and install the `cloud.google.com/go/security` package. This makes the Google Cloud Security APIs client library available for use in Go projects. No specific dependencies beyond a working Go installation are required for this command.\nSOURCE: https://github.com/googleapis/google-cloud-go/blob/main/security/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngo get cloud.google.com/go/security\n```\n\n----------------------------------------\n\nTITLE: Installing Apigee Connect API Go Client Library in Bash\nDESCRIPTION: Installs the Apigee Connect Go client library using Go's package manager. The snippet shows the command needed to fetch the package from the cloud.google.com registry. This requires Go to be installed and configured. Running the command will download and add the Apigee Connect package as a dependency to your current Go module. No input parameters are needed; the output is the installation of the package.\nSOURCE: https://github.com/googleapis/google-cloud-go/blob/main/apigeeconnect/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngo get cloud.google.com/go/apigeeconnect\n\n```\n\n----------------------------------------\n\nTITLE: Creating and Authorizing Bigtable Service Agent via gcloud CLI - Shell\nDESCRIPTION: This shell snippet demonstrates how to create a Google Cloud Bigtable service agent and authorize it for encryption keys using the gcloud command-line tool. Dependencies include the Google Cloud SDK (gcloud) and sufficient IAM permissions. The steps capture the creation of the service agent, obtaining its email, and granting it the Cloud KMS CryptoKeyEncrypterDecrypter role for a specified key. Environment variables such as $GCLOUD_TESTS_GOLANG_PROJECT_ID, $MY_KEYRING, $MY_SINGLE_LOCATION, and $SERVICE_AGENT_EMAIL must be set appropriately. The output of these commands enables Bigtable instances to use CMEK (Customer-Managed Encryption Keys). Failure to use correct project IDs, keyring names, or permissions may cause errors.\nSOURCE: https://github.com/googleapis/google-cloud-go/blob/main/CONTRIBUTING.md#_snippet_7\n\nLANGUAGE: sh\nCODE:\n```\n$ gcloud beta services identity create \\\n    --service=bigtableadmin.googleapis.com \\\n    --project $GCLOUD_TESTS_GOLANG_PROJECT_ID\n# Note the service agent email for the agent created.\n$ export SERVICE_AGENT_EMAIL=<service agent email, from last step>\n\n# Authorizes Google Cloud Bigtable to encrypt and decrypt using key1\n$ gcloud kms keys add-iam-policy-binding key1 \\\n    --keyring $MY_KEYRING \\\n    --location $MY_SINGLE_LOCATION \\\n    --role roles/cloudkms.cryptoKeyEncrypterDecrypter \\\n    --member \"serviceAccount:$SERVICE_AGENT_EMAIL\" \\\n    --project $GCLOUD_TESTS_GOLANG_PROJECT_ID\n```\n\n----------------------------------------\n\nTITLE: Documenting Version History and Changes - Markdown\nDESCRIPTION: This Markdown snippet outlines the release history for google-cloud-go's BackupDR component, including version tags, links to source comparisons, bug fixes, new features, and other notable changes. It documents dependency upgrades and provides references to relevant commit hashes and issue numbers. Inputs to this changelog are developer-authored release notes and commit messages, and the output is a human-readable history of the project; there are no programmatic parameters. Limitations: The changelog does not enforce semantic versioning or detailed technical explanations, only tracking high-level changes.\nSOURCE: https://github.com/googleapis/google-cloud-go/blob/main/backupdr/CHANGES.md#_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## [1.0.3](https://github.com/googleapis/google-cloud-go/compare/backupdr/v1.0.2...backupdr/v1.0.3) (2024-07-24)\n\n\n### Bug Fixes\n\n* **backupdr:** Update dependencies ([257c40b](https://github.com/googleapis/google-cloud-go/commit/257c40bd6d7e59730017cf32bda8823d7a232758))\n\n## [1.0.2](https://github.com/googleapis/google-cloud-go/compare/backupdr/v1.0.1...backupdr/v1.0.2) (2024-07-10)\n\n\n### Bug Fixes\n\n* **backupdr:** Bump google.golang.org/grpc@v1.64.1 ([8ecc4e9](https://github.com/googleapis/google-cloud-go/commit/8ecc4e9622e5bbe9b90384d5848ab816027226c5))\n\n## [1.0.1](https://github.com/googleapis/google-cloud-go/compare/backupdr/v1.0.0...backupdr/v1.0.1) (2024-07-01)\n\n\n### Bug Fixes\n\n* **backupdr:** Bump google.golang.org/api@v0.187.0 ([8fa9e39](https://github.com/googleapis/google-cloud-go/commit/8fa9e398e512fd8533fd49060371e61b5725a85b))\n\n## [1.0.0](https://github.com/googleapis/google-cloud-go/compare/backupdr/v0.1.1...backupdr/v1.0.0) (2024-06-26)\n\n\n### Features\n\n* **backupdr:** A new field `satisfies_pzi` is added ([d6c543c](https://github.com/googleapis/google-cloud-go/commit/d6c543c3969016c63e158a862fc173dff60fb8d9))\n* **backupdr:** A new field `satisfies_pzs` is added ([d6c543c](https://github.com/googleapis/google-cloud-go/commit/d6c543c3969016c63e158a862fc173dff60fb8d9))\n* **backupdr:** Updated documentation URI ([d6c543c](https://github.com/googleapis/google-cloud-go/commit/d6c543c3969016c63e158a862fc173dff60fb8d9))\n\n\n### Miscellaneous Chores\n\n* **backupdr:** Release v1.0.0 ([#10442](https://github.com/googleapis/google-cloud-go/issues/10442)) ([5e4167f](https://github.com/googleapis/google-cloud-go/commit/5e4167fea3bb4a4a54ce893f000e4e4c46307435))\n\n## [0.1.1](https://github.com/googleapis/google-cloud-go/compare/backupdr/v0.1.0...backupdr/v0.1.1) (2024-05-01)\n\n\n### Bug Fixes\n\n* **backupdr:** Bump x/net to v0.24.0 ([ba31ed5](https://github.com/googleapis/google-cloud-go/commit/ba31ed5fda2c9664f2e1cf972469295e63deb5b4))\n\n## 0.1.0 (2024-04-15)\n\n\n### Features\n\n* **backupdr:** Management Server APIs ([#9713](https://github.com/googleapis/google-cloud-go/issues/9713)) ([e7389cd](https://github.com/googleapis/google-cloud-go/commit/e7389cdbe9552eadc394d6ea0fa34d53e76ad4ae))\n* **backupdr:** New client(s) ([#9715](https://github.com/googleapis/google-cloud-go/issues/9715)) ([a578fc1](https://github.com/googleapis/google-cloud-go/commit/a578fc1a7540a5a5499bdb8b1b921b29267ff2fa))\n\n## Changes\n```\n\n----------------------------------------\n\nTITLE: Documenting Release Notes in Markdown\nDESCRIPTION: This Markdown snippet outlines versioned changes for the Google Cloud Spanner client library, categorizing each release by features and bug fixes. There are embedded links to commits and issues for quick reference, using standard Markdown list formatting for clarity. This organization serves both project maintainers and external contributors, requiring no external dependencies beyond a Markdown-capable viewer; it expects plain text input and produces structured documentation as output.\nSOURCE: https://github.com/googleapis/google-cloud-go/blob/main/spanner/CHANGES.md#_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n### Bug Fixes\n\n* **spanner:** Update grpc to v1.55.0 ([1147ce0](https://github.com/googleapis/google-cloud-go/commit/1147ce02a990276ca4f8ab7a1ab65c14da4450ef))\n\n## [1.45.1](https://github.com/googleapis/google-cloud-go/compare/spanner/v1.45.0...spanner/v1.45.1) (2023-04-21)\n\n\n### Bug Fixes\n\n* **spanner/spannertest:** Send transaction id in result metadata ([#7809](https://github.com/googleapis/google-cloud-go/issues/7809)) ([e3bbd5f](https://github.com/googleapis/google-cloud-go/commit/e3bbd5f10b3922ab2eb50cb39daccd7bc1891892))\n* **spanner:** Context timeout should be wrapped correctly ([#7744](https://github.com/googleapis/google-cloud-go/issues/7744)) ([f8e22f6](https://github.com/googleapis/google-cloud-go/commit/f8e22f6cbba10fc262e87b4d06d5c1289d877503))\n\n## [1.45.0](https://github.com/googleapis/google-cloud-go/compare/spanner/v1.44.0...spanner/v1.45.0) (2023-04-10)\n\n\n### Features\n\n* **spanner/spansql:** Add support for missing DDL syntax for ALTER CHANGE STREAM ([#7429](https://github.com/googleapis/google-cloud-go/issues/7429)) ([d34fe02](https://github.com/googleapis/google-cloud-go/commit/d34fe02cfa31520f88dedbd41bbc887e8faa857f))\n* **spanner/spansql:** Support fine-grained access control DDL syntax ([#6691](https://github.com/googleapis/google-cloud-go/issues/6691)) ([a7edf6b](https://github.com/googleapis/google-cloud-go/commit/a7edf6b5c62d02b7d5199fc83d435f6a37a8eac5))\n* **spanner/spansql:** Support grant/revoke view, change stream, table function ([#7533](https://github.com/googleapis/google-cloud-go/issues/7533)) ([9c61215](https://github.com/googleapis/google-cloud-go/commit/9c612159647d540e694ec9e84cab5cdd1c94d2b8))\n* **spanner:** Add x-goog-spanner-route-to-leader header to Spanner RPC contexts for RW/PDML transactions. ([#7500](https://github.com/googleapis/google-cloud-go/issues/7500)) ([fcab05f](https://github.com/googleapis/google-cloud-go/commit/fcab05faa5026896af76b762eed5b7b6b2e7ee07))\n* **spanner:** Adding new fields for Serverless analytics ([69067f8](https://github.com/googleapis/google-cloud-go/commit/69067f8c0075099a84dd9d40e438711881710784))\n* **spanner:** Enable custom decoding for list value ([#7463](https://github.com/googleapis/google-cloud-go/issues/7463)) ([3aeadcd](https://github.com/googleapis/google-cloud-go/commit/3aeadcd97eaf2707c2f6e288c8b72ef29f49a185))\n* **spanner:** Update iam and longrunning deps ([91a1f78](https://github.com/googleapis/google-cloud-go/commit/91a1f784a109da70f63b96414bba8a9b4254cddd))\n\n\n### Bug Fixes\n\n* **spanner/spansql:** Fix SQL for CREATE CHANGE STREAM TableName; case ([#7514](https://github.com/googleapis/google-cloud-go/issues/7514)) ([fc5fd86](https://github.com/googleapis/google-cloud-go/commit/fc5fd8652771aeca73e7a28ee68134155a5a9499))\n* **spanner:** Correcting the proto field Id for field data_boost_enabled ([00fff3a](https://github.com/googleapis/google-cloud-go/commit/00fff3a58bed31274ab39af575876dab91d708c9))\n\n## [1.44.0](https://github.com/googleapis/google-cloud-go/compare/spanner/v1.43.0...spanner/v1.44.0) (2023-02-01)\n\n\n### Features\n\n* **spanner/spansql:** Add support for ALTER INDEX statement ([#7287](https://github.com/googleapis/google-cloud-go/issues/7287)) ([fbe1bd4](https://github.com/googleapis/google-cloud-go/commit/fbe1bd4d0806302a48ff4a5822867757893a5f2d))\n* **spanner/spansql:** Add support for managing the optimizer statistics package ([#7283](https://github.com/googleapis/google-cloud-go/issues/7283)) ([e528221](https://github.com/googleapis/google-cloud-go/commit/e52822139e2821a11873c2d6af85a5fea07700e8))\n* **spanner:** Add support for Optimistic Concurrency Control ([#7332](https://github.com/googleapis/google-cloud-go/issues/7332)) ([48ba16f](https://github.com/googleapis/google-cloud-go/commit/48ba16f3a09893a3527a22838ad1e9ff829da15b))\n\n## [1.43.0](https://github.com/googleapis/google-cloud-go/compare/spanner/v1.42.0...spanner/v1.43.0) (2023-01-19)\n\n\n### Features\n\n* **spanner/spansql:** Add support for change stream value_capture_type option ([#7201](https://github.com/googleapis/google-cloud-go/issues/7201)) ([27b3398](https://github.com/googleapis/google-cloud-go/commit/27b33988f078779c2d641f776a11b2095a5ccc51))\n* **spanner/spansql:** Support `default_leader` database option ([#7187](https://github.com/googleapis/google-cloud-go/issues/7187)) ([88adaa2](https://github.com/googleapis/google-cloud-go/commit/88adaa216832467560c19e61528b5ce5f1e5ff76))\n* **spanner:** Add REST client ([06a54a1](https://github.com/googleapis/google-cloud-go/commit/06a54a16a5866cce966547c51e203b9e09a25bc0))\n* **spanner:** Inline begin transaction for ReadWriteTransactions ([#7149](https://github.com/googleapis/google-cloud-go/issues/7149)) ([2ce3606](https://github.com/googleapis/google-cloud-go/commit/2ce360644439a386aeaad7df5f47541667bd621b))\n\n\n### Bug Fixes\n\n* **spanner:** Fix integration tests data race ([#7229](https://github.com/googleapis/google-cloud-go/issues/7229)) ([a741024](https://github.com/googleapis/google-cloud-go/commit/a741024abd6fb1f073831503c2717b2a44226a59))\n\n## [1.42.0](https://github.com/googleapis/google-cloud-go/compare/spanner/v1.41.0...spanner/v1.42.0) (2022-12-14)\n\n\n### Features\n\n* **spanner:** Add database roles ([#5701](https://github.com/googleapis/google-cloud-go/issues/5701)) ([6bb95ef](https://github.com/googleapis/google-cloud-go/commit/6bb95efb7997692a52c321e787e633a5045b21f8))\n* **spanner:** Rewrite signatures and type in terms of new location ([620e6d8](https://github.com/googleapis/google-cloud-go/commit/620e6d828ad8641663ae351bfccfe46281e817ad))\n\n\n### Bug Fixes\n\n* **spanner:** Fallback to check grpc error message if ResourceType is nil for checking sessionNotFound errors ([#7163](https://github.com/googleapis/google-cloud-go/issues/7163)) ([2552e09](https://github.com/googleapis/google-cloud-go/commit/2552e092cff01e0d6b80fefaa7877f77e36db6be))\n\n## [1.41.0](https://github.com/googleapis/google-cloud-go/compare/spanner/v1.40.0...spanner/v1.41.0) (2022-12-01)\n\n\n### Features\n\n* **spanner:** Start generating proto stubs ([#7030](https://github.com/googleapis/google-cloud-go/issues/7030)) ([41f446f](https://github.com/googleapis/google-cloud-go/commit/41f446f891a17c97278879f2207fd58996fd038c))\n\n## [1.40.0](https://github.com/googleapis/google-cloud-go/compare/spanner/v1.39.0...spanner/v1.40.0) (2022-11-03)\n\n\n### Features\n\n* **spanner/spansql:** Add support for interval arg of some date/timestamp functions ([#6950](https://github.com/googleapis/google-cloud-go/issues/6950)) ([1ce0f7d](https://github.com/googleapis/google-cloud-go/commit/1ce0f7d38778068fd1d9a171377067739f4ea8d6))\n* **spanner:** Configurable logger ([#6958](https://github.com/googleapis/google-cloud-go/issues/6958)) ([bd85442](https://github.com/googleapis/google-cloud-go/commit/bd85442bc6fb8c18d1a7c6d73850d220c3973c46)), refs [#6957](https://github.com/googleapis/google-cloud-go/issues/6957)\n* **spanner:** PG JSONB support ([#6874](https://github.com/googleapis/google-cloud-go/issues/6874)) ([5b14658](https://github.com/googleapis/google-cloud-go/commit/5b146587939ccc3403945c756cbf68e6f2d41fda))\n* **spanner:** Update result_set.proto to return undeclared parameters in ExecuteSql API ([de4e16a](https://github.com/googleapis/google-cloud-go/commit/de4e16a498354ea7271f5b396f7cb2bb430052aa))\n* **spanner:** Update transaction.proto to include different lock modes ([caf4afa](https://github.com/googleapis/google-cloud-go/commit/caf4afa139ad7b38b6df3e3b17b8357c81e1fd6c))\n\n## [1.39.0](https://github.com/googleapis/google-cloud-go/compare/spanner/v1.38.0...spanner/v1.39.0) (2022-09-21)\n\n\n### Features\n\n* **spanner/admin/database:** Add custom instance config operations ([ec1a190](https://github.com/googleapis/google-cloud-go/commit/ec1a190abbc4436fcaeaa1421c7d9df624042752))\n* **spanner/admin/instance:** Add custom instance config operations ([ef2b0b1](https://github.com/googleapis/google-cloud-go/commit/ef2b0b1d4de9beb9005537ae48d7d8e1c0f23b98))\n* **spanner/spannersql:** Add backticks when name contains a hypen ([#6621](https://github.com/googleapis/google-cloud-go/issues/6621)) ([e88ca66](https://github.com/googleapis/google-cloud-go/commit/e88ca66ca950e15d9011322dbfca3c88ccceb0ec))\n* **spanner/spansql:** Add support for create, alter and drop change … ([#6669](https://github.com/googleapis/google-cloud-go/issues/6669)) ([cc4620a](https://github.com/googleapis/google-cloud-go/commit/cc4620a5ee3a9129a4cdd48d90d4060ba0bbcd58))\n* **spanner:** Retry spanner transactions and mutations when RST_STREAM error ([#6699](https://github.com/googleapis/google-cloud-go/issues/6699)) ([1b56cd0](https://github.com/googleapis/google-cloud-go/commit/1b56cd0ec31bc32362259fc722907e092bae081a))\n\n\n### Bug Fixes\n\n* **spanner/admin/database:** Revert add custom instance config operations (change broke client libraries; reverting before any are released) ([ec1a190](https://github.com/googleapis/google-cloud-go/commit/ec1a190abbc4436fcaeaa1421c7d9df624042752))\n* **spanner:** Destroy session when client is closing ([#6700](https://github.com/googleapis/google-cloud-go/issues/6700)) ([a1ce541](https://github.com/googleapis/google-cloud-go/commit/a1ce5410f1e0f4d68dae0ddc790518e9978faf0c))\n* **spanner:** Spanner sessions will be cleaned up from the backend ([#6679](https://github.com/googleapis/google-cloud-go/issues/6679)) ([c27097e](https://github.com/googleapis/google-cloud-go/commit/c27097e236abeb8439a67ad9b716d05c001aea2e))\n\n## [1.38.0](https://github.com/googleapis/google-cloud-go/compare/spanner/v1.37.0...spanner/v1.38.0) (2022-09-03)\n\n```\n\n----------------------------------------\n\nTITLE: Listing Go Modules using Bash\nDESCRIPTION: This Bash command searches for all `go.mod` files within the current directory and its subdirectories using `find`. The content of these files is then piped to `grep` to filter and display only the lines containing the `module` directive, effectively listing all defined Go modules in the project. This helps identify the appropriate module to release based on the location of changed files.\nSOURCE: https://github.com/googleapis/google-cloud-go/blob/main/RELEASING.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ cat `find . -name go.mod` | grep module\nmodule cloud.google.com/go/pubsub\nmodule cloud.google.com/go/spanner\nmodule cloud.google.com/go\nmodule cloud.google.com/go/bigtable\nmodule cloud.google.com/go/bigquery\nmodule cloud.google.com/go/storage\nmodule cloud.google.com/go/pubsublite\nmodule cloud.google.com/go/firestore\nmodule cloud.google.com/go/logging\nmodule cloud.google.com/go/internal/gapicgen\nmodule cloud.google.com/go/internal/godocfx\nmodule cloud.google.com/go/internal/examples/fake\nmodule cloud.google.com/go/internal/examples/mock\nmodule cloud.google.com/go/datastore\n```\n\n----------------------------------------\n\nTITLE: Viewing Commit History Since Last Root Release using Git\nDESCRIPTION: This Git command displays the commit log for the current branch starting from the commit after the specified tag `$CV` (representing the Current Version of the root module). It's used during the manual release process for the root module to identify changes made since the last release, which are then summarized in `CHANGES.md`. Note that this log includes commits from submodules, requiring manual visual filtering to isolate root module changes.\nSOURCE: https://github.com/googleapis/google-cloud-go/blob/main/RELEASING.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ngit log $CV...\n```\n\n----------------------------------------\n\nTITLE: Updating Release Date Constant in Go\nDESCRIPTION: This Go code snippet shows the constant `Repo` within the `internal/version/version.go` file. During a manual release of the root module, this constant needs to be updated to reflect the current date in `YYYYMMDD` format before generating version information. This ensures the release metadata includes the correct date.\nSOURCE: https://github.com/googleapis/google-cloud-go/blob/main/RELEASING.md#_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nconst Repo = \"YYYYMMDD\"\n```\n\n----------------------------------------\n\nTITLE: Installing the Go Client Library using go get (Bash)\nDESCRIPTION: This command uses the Go toolchain's `go get` command to download and install the specific Google Cloud Go client library. The `{{.ImportPath}}` is a placeholder representing the unique import path for the target client library.\nSOURCE: https://github.com/googleapis/google-cloud-go/blob/main/internal/postprocessor/_README.md.txt#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngo get {{.ImportPath}}\n```\n\n----------------------------------------\n\nTITLE: Generating Go Protocol Buffers with protoc - Bash\nDESCRIPTION: This shell script command generates Go source files from all .proto files in the current directory using protoc. The user must provide the correct path to a local clone of the github.com/googleapis/googleapis repository and execute the command while in the intended directory. Key parameters include the --go_out option for the output path and multiple -I options to specify the include paths. Outputs are .pb.go files matching each input .proto. Requires protoc and the Go protobuf plugin installed in the PATH.\nSOURCE: https://github.com/googleapis/google-cloud-go/blob/main/bigtable/internal/conformance/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# Note: Change /usr/local/google/home/deklerk/workspace/googleapis to wherever\\n# you've installed https://github.com/googleapis/googleapis.\\n# Note: Run whilst cd-ed in this directory.\\nprotoc --go_out=. -I /usr/local/google/home/deklerk/workspace/googleapis -I . *.proto\n```\n\n----------------------------------------\n\nTITLE: Documenting Changelog History - Markdown\nDESCRIPTION: This snippet is a Markdown changelog file that organizes and details version-specific changes for the websecurityscanner module. It is designed for users and developers to review improvements, dependency updates, and bug fixes, with hyperlinks to commit details and important external discussions. The changelog relies on standard Markdown syntax (no special dependencies), expects chronological release notes with clear section headers, and outputs human-readable release notes with references. It does not include executable code and is primarily for documentation purposes.\nSOURCE: https://github.com/googleapis/google-cloud-go/blob/main/websecurityscanner/CHANGES.md#_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Changes\n\n## [1.7.6](https://github.com/googleapis/google-cloud-go/compare/websecurityscanner/v1.7.5...websecurityscanner/v1.7.6) (2025-04-15)\n\n\n### Bug Fixes\n\n* **websecurityscanner:** Update google.golang.org/api to 0.229.0 ([3319672](https://github.com/googleapis/google-cloud-go/commit/3319672f3dba84a7150772ccb5433e02dab7e201))\n\n## [1.7.5](https://github.com/googleapis/google-cloud-go/compare/websecurityscanner/v1.7.4...websecurityscanner/v1.7.5) (2025-03-13)\n\n\n### Bug Fixes\n\n* **websecurityscanner:** Update golang.org/x/net to 0.37.0 ([1144978](https://github.com/googleapis/google-cloud-go/commit/11449782c7fb4896bf8b8b9cde8e7441c84fb2fd))\n\n## [1.7.4](https://github.com/googleapis/google-cloud-go/compare/websecurityscanner/v1.7.3...websecurityscanner/v1.7.4) (2025-03-06)\n\n\n### Bug Fixes\n\n* **websecurityscanner:** Fix out-of-sync version.go ([28f0030](https://github.com/googleapis/google-cloud-go/commit/28f00304ebb13abfd0da2f45b9b79de093cca1ec))\n\n## [1.7.3](https://github.com/googleapis/google-cloud-go/compare/websecurityscanner/v1.7.2...websecurityscanner/v1.7.3) (2025-01-02)\n\n\n### Bug Fixes\n\n* **websecurityscanner:** Update golang.org/x/net to v0.33.0 ([e9b0b69](https://github.com/googleapis/google-cloud-go/commit/e9b0b69644ea5b276cacff0a707e8a5e87efafc9))\n\n## [1.7.2](https://github.com/googleapis/google-cloud-go/compare/websecurityscanner/v1.7.1...websecurityscanner/v1.7.2) (2024-10-23)\n\n\n### Bug Fixes\n\n* **websecurityscanner:** Update google.golang.org/api to v0.203.0 ([8bb87d5](https://github.com/googleapis/google-cloud-go/commit/8bb87d56af1cba736e0fe243979723e747e5e11e))\n* **websecurityscanner:** WARNING: On approximately Dec 1, 2024, an update to Protobuf will change service registration function signatures to use an interface instead of a concrete type in generated .pb.go files. This change is expected to affect very few if any users of this client library. For more information, see https://togithub.com/googleapis/google-cloud-go/issues/11020. ([2b8ca4b](https://github.com/googleapis/google-cloud-go/commit/2b8ca4b4127ce3025c7a21cc7247510e07cc5625))\n\n## [1.7.1](https://github.com/googleapis/google-cloud-go/compare/websecurityscanner/v1.7.0...websecurityscanner/v1.7.1) (2024-09-12)\n\n\n### Bug Fixes\n\n* **websecurityscanner:** Bump dependencies ([2ddeb15](https://github.com/googleapis/google-cloud-go/commit/2ddeb1544a53188a7592046b98913982f1b0cf04))\n\n## [1.7.0](https://github.com/googleapis/google-cloud-go/compare/websecurityscanner/v1.6.12...websecurityscanner/v1.7.0) (2024-08-20)\n\n\n### Features\n\n* **websecurityscanner:** Add support for Go 1.23 iterators ([84461c0](https://github.com/googleapis/google-cloud-go/commit/84461c0ba464ec2f951987ba60030e37c8a8fc18))\n\n## [1.6.12](https://github.com/googleapis/google-cloud-go/compare/websecurityscanner/v1.6.11...websecurityscanner/v1.6.12) (2024-08-08)\n\n\n### Bug Fixes\n\n* **websecurityscanner:** Update google.golang.org/api to v0.191.0 ([5b32644](https://github.com/googleapis/google-cloud-go/commit/5b32644eb82eb6bd6021f80b4fad471c60fb9d73))\n\n## [1.6.11](https://github.com/googleapis/google-cloud-go/compare/websecurityscanner/v1.6.10...websecurityscanner/v1.6.11) (2024-07-24)\n\n\n### Bug Fixes\n\n* **websecurityscanner:** Update dependencies ([257c40b](https://github.com/googleapis/google-cloud-go/commit/257c40bd6d7e59730017cf32bda8823d7a232758))\n\n## [1.6.10](https://github.com/googleapis/google-cloud-go/compare/websecurityscanner/v1.6.9...websecurityscanner/v1.6.10) (2024-07-10)\n\n\n### Bug Fixes\n\n* **websecurityscanner:** Bump google.golang.org/grpc@v1.64.1 ([8ecc4e9](https://github.com/googleapis/google-cloud-go/commit/8ecc4e9622e5bbe9b90384d5848ab816027226c5))\n\n## [1.6.9](https://github.com/googleapis/google-cloud-go/compare/websecurityscanner/v1.6.8...websecurityscanner/v1.6.9) (2024-07-01)\n\n\n### Bug Fixes\n\n* **websecurityscanner:** Bump google.golang.org/api@v0.187.0 ([8fa9e39](https://github.com/googleapis/google-cloud-go/commit/8fa9e398e512fd8533fd49060371e61b5725a85b))\n\n## [1.6.8](https://github.com/googleapis/google-cloud-go/compare/websecurityscanner/v1.6.7...websecurityscanner/v1.6.8) (2024-06-26)\n\n\n### Bug Fixes\n\n* **websecurityscanner:** Enable new auth lib ([b95805f](https://github.com/googleapis/google-cloud-go/commit/b95805f4c87d3e8d10ea23bd7a2d68d7a4157568))\n\n## [1.6.7](https://github.com/googleapis/google-cloud-go/compare/websecurityscanner/v1.6.6...websecurityscanner/v1.6.7) (2024-05-01)\n\n\n### Bug Fixes\n\n* **websecurityscanner:** Bump x/net to v0.24.0 ([ba31ed5](https://github.com/googleapis/google-cloud-go/commit/ba31ed5fda2c9664f2e1cf972469295e63deb5b4))\n\n## [1.6.6](https://github.com/googleapis/google-cloud-go/compare/websecurityscanner/v1.6.5...websecurityscanner/v1.6.6) (2024-03-14)\n\n\n### Bug Fixes\n\n* **websecurityscanner:** Update protobuf dep to v1.33.0 ([30b038d](https://github.com/googleapis/google-cloud-go/commit/30b038d8cac0b8cd5dd4761c87f3f298760dd33a))\n\n## [1.6.5](https://github.com/googleapis/google-cloud-go/compare/websecurityscanner/v1.6.4...websecurityscanner/v1.6.5) (2024-01-30)\n\n\n### Bug Fixes\n\n* **websecurityscanner:** Enable universe domain resolution options ([fd1d569](https://github.com/googleapis/google-cloud-go/commit/fd1d56930fa8a747be35a224611f4797b8aeb698))\n\n## [1.6.4](https://github.com/googleapis/google-cloud-go/compare/websecurityscanner/v1.6.3...websecurityscanner/v1.6.4) (2023-11-01)\n\n\n### Bug Fixes\n\n* **websecurityscanner:** Bump google.golang.org/api to v0.149.0 ([8d2ab9f](https://github.com/googleapis/google-cloud-go/commit/8d2ab9f320a86c1c0fab90513fc05861561d0880))\n\n## [1.6.3](https://github.com/googleapis/google-cloud-go/compare/websecurityscanner/v1.6.2...websecurityscanner/v1.6.3) (2023-10-26)\n\n\n### Bug Fixes\n\n* **websecurityscanner:** Update grpc-go to v1.59.0 ([81a97b0](https://github.com/googleapis/google-cloud-go/commit/81a97b06cb28b25432e4ece595c55a9857e960b7))\n\n## [1.6.2](https://github.com/googleapis/google-cloud-go/compare/websecurityscanner/v1.6.1...websecurityscanner/v1.6.2) (2023-10-12)\n\n\n### Bug Fixes\n\n* **websecurityscanner:** Update golang.org/x/net to v0.17.0 ([174da47](https://github.com/googleapis/google-cloud-go/commit/174da47254fefb12921bbfc65b7829a453af6f5d))\n\n## [1.6.1](https://github.com/googleapis/google-cloud-go/compare/websecurityscanner/v1.6.0...websecurityscanner/v1.6.1) (2023-06-20)\n\n\n### Bug Fixes\n\n* **websecurityscanner:** REST query UpdateMask bug ([df52820](https://github.com/googleapis/google-cloud-go/commit/df52820b0e7721954809a8aa8700b93c5662dc9b))\n\n## [1.6.0](https://github.com/googleapis/google-cloud-go/compare/websecurityscanner/v1.5.1...websecurityscanner/v1.6.0) (2023-05-30)\n\n\n### Features\n\n* **websecurityscanner:** Update all direct dependencies ([b340d03](https://github.com/googleapis/google-cloud-go/commit/b340d030f2b52a4ce48846ce63984b28583abde6))\n\n## [1.5.1](https://github.com/googleapis/google-cloud-go/compare/websecurityscanner/v1.5.0...websecurityscanner/v1.5.1) (2023-05-08)\n\n\n### Bug Fixes\n\n* **websecurityscanner:** Update grpc to v1.55.0 ([1147ce0](https://github.com/googleapis/google-cloud-go/commit/1147ce02a990276ca4f8ab7a1ab65c14da4450ef))\n\n## [1.5.0](https://github.com/googleapis/google-cloud-go/compare/websecurityscanner/v1.4.0...websecurityscanner/v1.5.0) (2023-01-04)\n\n\n### Features\n\n* **websecurityscanner:** Add REST client ([06a54a1](https://github.com/googleapis/google-cloud-go/commit/06a54a16a5866cce966547c51e203b9e09a25bc0))\n\n## [1.4.0](https://github.com/googleapis/google-cloud-go/compare/websecurityscanner/v1.3.0...websecurityscanner/v1.4.0) (2022-11-03)\n\n\n### Features\n\n* **websecurityscanner:** rewrite signatures in terms of new location ([3c4b2b3](https://github.com/googleapis/google-cloud-go/commit/3c4b2b34565795537aac1661e6af2442437e34ad))\n\n## [1.3.0](https://github.com/googleapis/google-cloud-go/compare/websecurityscanner/v1.2.1...websecurityscanner/v1.3.0) (2022-10-25)\n\n\n### Features\n\n* **websecurityscanner:** start generating stubs dir ([de2d180](https://github.com/googleapis/google-cloud-go/commit/de2d18066dc613b72f6f8db93ca60146dabcfdcc))\n\n## [1.2.1](https://github.com/googleapis/google-cloud-go/compare/websecurityscanner/v1.2.0...websecurityscanner/v1.2.1) (2022-09-08)\n\n\n### Documentation\n\n* **websecurityscanner:** Publish Scan Run logging proto for documentation ([e45ad9a](https://github.com/googleapis/google-cloud-go/commit/e45ad9af568c59151decc0dacedf137653b576dd))\n\n## [1.2.0](https://github.com/googleapis/google-cloud-go/compare/websecurityscanner/v1.1.0...websecurityscanner/v1.2.0) (2022-02-23)\n\n\n### Features\n\n* **websecurityscanner:** set versionClient to module version ([55f0d92](https://github.com/googleapis/google-cloud-go/commit/55f0d92bf112f14b024b4ab0076c9875a17423c9))\n\n## [1.1.0](https://github.com/googleapis/google-cloud-go/compare/websecurityscanner/v1.0.0...websecurityscanner/v1.1.0) (2022-02-14)\n\n\n### Features\n\n* **websecurityscanner:** add file for tracking version ([17b36ea](https://github.com/googleapis/google-cloud-go/commit/17b36ead42a96b1a01105122074e65164357519e))\n\n## 1.0.0\n\nStabilize GA surface.\n\n## v0.1.0\n\nThis is the first tag to carve out websecurityscanner as its own module. See\n[Add a module to a multi-module repository](https://github.com/golang/go/wiki/Modules#is-it-possible-to-add-a-module-to-a-multi-module-repository).\n\n```\n\n----------------------------------------\n\nTITLE: Installing App Engine Go Client Library via go get - Bash\nDESCRIPTION: This snippet shows the command to install the App Engine Admin API Go Client Library using the go get tool. It requires Go to be installed and configured on the user's system. Running this command fetches and installs the library into the current Go environment, allowing developers to integrate with the App Engine Admin API in their Go applications.\nSOURCE: https://github.com/googleapis/google-cloud-go/blob/main/appengine/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngo get cloud.google.com/go/appengine\n\n```\n\n----------------------------------------\n\nTITLE: Installing Google Cloud TPU Go Client with Go Modules - Bash\nDESCRIPTION: This bash snippet demonstrates installation of the Google Cloud TPU client library using the Go module system. The developer must have Go installed on their machine and a properly initialized Go project. The 'cloud.google.com/go/tpu' module will be fetched and added to your project's dependencies. No additional parameters are needed; it retrieves the latest compatible version. Input is none or run from the command line, and the output is an updated 'go.mod' and downloaded package in your project.\nSOURCE: https://github.com/googleapis/google-cloud-go/blob/main/tpu/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngo get cloud.google.com/go/tpu\n```\n\n----------------------------------------\n\nTITLE: Installing the Policy Troubleshooter Go Client Library\nDESCRIPTION: This command uses the Go toolchain's `go get` command to download and install the `cloud.google.com/go/policytroubleshooter` package. This package provides the Go client library for interacting with the Google Cloud Policy Troubleshooter API. Running this command requires a properly configured Go development environment.\nSOURCE: https://github.com/googleapis/google-cloud-go/blob/main/policytroubleshooter/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngo get cloud.google.com/go/policytroubleshooter\n```\n\n----------------------------------------\n\nTITLE: Installing the Dataflow Go Client Library (Bash)\nDESCRIPTION: This command uses the Go toolchain (`go get`) to download and install the Google Cloud Dataflow client library module (`cloud.google.com/go/dataflow`) into the current Go project's dependencies. This is the standard way to add Go packages.\nSOURCE: https://github.com/googleapis/google-cloud-go/blob/main/dataflow/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngo get cloud.google.com/go/dataflow\n```\n\n----------------------------------------\n\nTITLE: Installing the Cloud Profiler Go Client Library using Bash\nDESCRIPTION: This Bash command uses the Go toolchain's `go get` command to download and install the Go client library package for the Google Cloud Profiler API. It ensures the necessary code is available in the local Go environment for development.\nSOURCE: https://github.com/googleapis/google-cloud-go/blob/main/cloudprofiler/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngo get cloud.google.com/go/cloudprofiler\n```\n\n----------------------------------------\n\nTITLE: Installing the API Gateway Go Package using go get (Bash)\nDESCRIPTION: This command uses the Go toolchain's `go get` command to download and install the `cloud.google.com/go/apigateway` package, making the Google Cloud API Gateway client library available for use in Go projects. Requires a configured Go development environment.\nSOURCE: https://github.com/googleapis/google-cloud-go/blob/main/apigateway/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngo get cloud.google.com/go/apigateway\n```\n\n----------------------------------------\n\nTITLE: Installing Cloud Domains Go Library via go get\nDESCRIPTION: This shell command uses the Go package manager's `go get` command to download and install the `cloud.google.com/go/domains` package. This package is the official Go client library for interacting with the Google Cloud Domains API. Execute this command in your terminal to add the library as a dependency to your Go project.\nSOURCE: https://github.com/googleapis/google-cloud-go/blob/main/domains/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngo get cloud.google.com/go/domains\n```\n\n----------------------------------------\n\nTITLE: Installing the Go Managed Kafka Client Library using go get\nDESCRIPTION: This shell command utilizes the Go toolchain's `go get` command to fetch and install the Google Cloud Managed Service for Apache Kafka client library. Executing this command downloads the package `cloud.google.com/go/managedkafka` and adds it as a dependency to the current Go project.\nSOURCE: https://github.com/googleapis/google-cloud-go/blob/main/managedkafka/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngo get cloud.google.com/go/managedkafka\n```\n\n----------------------------------------\n\nTITLE: Installing the Container Analysis Go Client Library (Bash)\nDESCRIPTION: This command utilizes the Go toolchain's `go get` utility to download and install the `cloud.google.com/go/containeranalysis` package. This makes the Container Analysis API client library available for import and use within Go projects. Running this command requires the Go language environment to be properly installed and configured on the system.\nSOURCE: https://github.com/googleapis/google-cloud-go/blob/main/containeranalysis/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngo get cloud.google.com/go/containeranalysis\n```\n\n----------------------------------------\n\nTITLE: Installing the Google Chat Go Library\nDESCRIPTION: This command uses the Go toolchain's `go get` command to download and install the Google Chat client library package (`cloud.google.com/go/chat`) into the user's Go workspace. This makes the library available for import in Go projects.\nSOURCE: https://github.com/googleapis/google-cloud-go/blob/main/chat/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngo get cloud.google.com/go/chat\n```\n\n----------------------------------------\n\nTITLE: Installing the Anthos Multi-Cloud Go Client Library\nDESCRIPTION: This Bash command uses the `go get` tool to download and install the `cloud.google.com/go/gkemulticloud` package. This package is the official Go client library for interacting with the Google Cloud Anthos Multi-Cloud API. Running this command adds the library as a dependency to your Go project. Requires a working Go development environment.\nSOURCE: https://github.com/googleapis/google-cloud-go/blob/main/gkemulticloud/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngo get cloud.google.com/go/gkemulticloud\n```\n\n----------------------------------------\n\nTITLE: Installing Phishing Protection Go Client Library using Go Get\nDESCRIPTION: This command uses the Go toolchain's 'go get' command to download and install the 'cloud.google.com/go/phishingprotection' package. This makes the Phishing Protection API client library available for use in Go projects. Requires the Go programming language environment to be set up.\nSOURCE: https://github.com/googleapis/google-cloud-go/blob/main/phishingprotection/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngo get cloud.google.com/go/phishingprotection\n```\n\n----------------------------------------\n\nTITLE: Installing the Cloud Vision Go Client Library\nDESCRIPTION: This command uses the Go toolchain's `go get` command to download and install the `cloud.google.com/go/vision` package, which is the Go client library for the Google Cloud Vision API. This makes the library available for import in Go projects. Requires a correctly configured Go development environment.\nSOURCE: https://github.com/googleapis/google-cloud-go/blob/main/vision/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngo get cloud.google.com/go/vision\n```\n\n----------------------------------------\n\nTITLE: Installing the OS Config Go Library using go get\nDESCRIPTION: This command utilizes the standard Go toolchain to download and install the OS Config Go client library package from its source repository. It makes the library available for import in Go projects.\nSOURCE: https://github.com/googleapis/google-cloud-go/blob/main/osconfig/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngo get cloud.google.com/go/osconfig\n```\n\n----------------------------------------\n\nTITLE: Installing Google Cloud Financial Services API Go Client - Bash\nDESCRIPTION: This command installs the Go client library for the Financial Services API using Go modules. Requires Go 1.11+ with module support enabled. Running the command adds the 'cloud.google.com/go/financialservices' package to your project's dependencies in go.mod. Example input: executed in a terminal. The output is the library being downloaded and registered as a dependency. No elevated permissions are required, but you need access to the internet and a Go environment.\nSOURCE: https://github.com/googleapis/google-cloud-go/blob/main/financialservices/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngo get cloud.google.com/go/financialservices\n\n```\n\n----------------------------------------\n\nTITLE: Installing Oracle Database@Google Cloud Go Client Library in Bash\nDESCRIPTION: This snippet demonstrates how to install the Oracle Database@Google Cloud API Go client library by running a simple go get command in the terminal. It requires Go to be previously installed on your system and network access to fetch the module from the cloud.google.com repository. The command will download and add the cloud.google.com/go/oracledatabase package as a dependency to your Go project, making its APIs available for import and use.\nSOURCE: https://github.com/googleapis/google-cloud-go/blob/main/oracledatabase/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngo get cloud.google.com/go/oracledatabase\n```\n\n----------------------------------------\n\nTITLE: Installing Discovery Engine Go Package using Go Get\nDESCRIPTION: This command utilizes the Go package manager ('go get') to download and install the Google Cloud Discovery Engine client library for Go. Executing this command makes the 'cloud.google.com/go/discoveryengine' package available for import and use within a Go project. It requires the Go toolchain to be installed and properly configured.\nSOURCE: https://github.com/googleapis/google-cloud-go/blob/main/discoveryengine/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngo get cloud.google.com/go/discoveryengine\n```\n\n----------------------------------------\n\nTITLE: Installing the Cloud IDS Go Client Library (Bash)\nDESCRIPTION: This command uses the `go get` tool to download and install the Cloud IDS API Go client library module (`cloud.google.com/go/ids`) into the user's Go workspace. This is the standard method for adding Go package dependencies.\nSOURCE: https://github.com/googleapis/google-cloud-go/blob/main/ids/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngo get cloud.google.com/go/ids\n```\n\n----------------------------------------\n\nTITLE: Installing the Cloud Speech-to-Text Go Package using go get (Bash)\nDESCRIPTION: This Bash command utilizes the `go get` tool to download and install the `cloud.google.com/go/speech` Go module. This module is the official Google Cloud Go client library for interacting with the Speech-to-Text API. Running this command requires having the Go toolchain installed and properly configured in the system's PATH.\nSOURCE: https://github.com/googleapis/google-cloud-go/blob/main/speech/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngo get cloud.google.com/go/speech\n```\n\n----------------------------------------\n\nTITLE: Installing Google Cloud Memorystore Redis Client - Bash\nDESCRIPTION: This snippet installs the Go client library for Google Cloud Memorystore for Redis using the Go toolchain. The command fetches and adds the package 'cloud.google.com/go/redis' to the project's dependencies, making the Redis API client available for import and use. Requires Go installed and properly configured; outputs package installation progress or errors.\nSOURCE: https://github.com/googleapis/google-cloud-go/blob/main/redis/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngo get cloud.google.com/go/redis\n```\n\n----------------------------------------\n\nTITLE: Installing the Dataform Go Client Library using Bash\nDESCRIPTION: This command uses the Go toolchain (`go get`) to download and install the `cloud.google.com/go/dataform` package. This makes the Dataform API client library available for use within Go projects. Requires the Go development environment to be set up.\nSOURCE: https://github.com/googleapis/google-cloud-go/blob/main/dataform/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngo get cloud.google.com/go/dataform\n```\n\n----------------------------------------\n\nTITLE: Installing Retail Go Client Library using Go Get\nDESCRIPTION: This command utilizes the Go package management tool (`go get`) to download and install the Google Cloud Retail API client library for Go (`cloud.google.com/go/retail`). Executing this command makes the library available for import and use within Go projects. This command requires the Go toolchain to be installed and properly configured in the system's PATH.\nSOURCE: https://github.com/googleapis/google-cloud-go/blob/main/retail/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngo get cloud.google.com/go/retail\n```\n\n----------------------------------------\n\nTITLE: Installing Cloud Run Go Client Library with go get - Bash\nDESCRIPTION: This snippet demonstrates how to install the Go client library for Cloud Run Admin API using the go get command. It requires Go to be installed and properly set up in your environment. The command fetches the cloud.google.com/go/run package and its dependencies, making them available for import in Go projects. No parameters are needed, and it outputs the result of the package installation.\nSOURCE: https://github.com/googleapis/google-cloud-go/blob/main/run/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngo get cloud.google.com/go/run\n```\n\n----------------------------------------\n\nTITLE: Installing Access Approval Go Library via go get (Bash)\nDESCRIPTION: This command utilizes the Go package manager (`go get`) to download and install the Google Cloud Access Approval client library for Go. Running this command adds the `cloud.google.com/go/accessapproval` package to the user's Go workspace or project dependencies. Requires Go to be installed and configured.\nSOURCE: https://github.com/googleapis/google-cloud-go/blob/main/accessapproval/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngo get cloud.google.com/go/accessapproval\n```\n\n----------------------------------------\n\nTITLE: Installing Cloud Talent Solution Go Client Library with go get - Bash\nDESCRIPTION: This snippet shows how to install the Go client library for the Cloud Talent Solution API using the go get command in a bash shell. It requires Go to be installed on the system. By running this command, the library is downloaded and added as a dependency to your Go module, enabling interaction with the Cloud Talent Solution API in Go applications. No input arguments are needed other than ensuring the correct module path is specified.\nSOURCE: https://github.com/googleapis/google-cloud-go/blob/main/talent/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngo get cloud.google.com/go/talent\n```\n\n----------------------------------------\n\nTITLE: Installing Google Meet API Client Library with Go - Bash\nDESCRIPTION: This code snippet demonstrates how to install the Google Meet API client library for Go using the Go module system. The command runs in a terminal or shell with Go installed and utilizes `go get` to fetch and install the `cloud.google.com/go/apps` package, which provides access to the Google Meet API. No additional parameters are required. The installed package can be imported into your Go programs to use Google Meet API features.\nSOURCE: https://github.com/googleapis/google-cloud-go/blob/main/apps/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngo get cloud.google.com/go/apps\n\n```\n\n----------------------------------------\n\nTITLE: Installing the Web Security Scanner Go Client Library\nDESCRIPTION: This command uses the Go toolchain's `go get` command to download and install the Google Cloud Web Security Scanner client library package (`cloud.google.com/go/websecurityscanner`). Running this command adds the library as a dependency to the current Go project.\nSOURCE: https://github.com/googleapis/google-cloud-go/blob/main/websecurityscanner/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngo get cloud.google.com/go/websecurityscanner\n```\n\n----------------------------------------\n\nTITLE: Deprecated Creating Complete Datastore Key in Go (Pre-v0.5.0)\nDESCRIPTION: Shows the usage of the `NewKey` function prior to v0.5.0 for creating complete Datastore keys, using either a name (string) or an ID (int64). This function required a context and has been replaced by `NameKey` and `IDKey`.\nSOURCE: https://github.com/googleapis/google-cloud-go/blob/main/CHANGES.md#_snippet_15\n\nLANGUAGE: go\nCODE:\n```\nNewKey(ctx, kind, name, 0, parent)\nNewKey(ctx, kind, \"\", id, parent)\n```\n\n----------------------------------------\n\nTITLE: Listing Stable Git Tags for Root Module\nDESCRIPTION: This Git command lists all tags (`git tag -l`) in the repository and filters out pre-release tags. The output is piped to `grep -v beta` and `grep -v alpha` to exclude any tags containing \"beta\" or \"alpha\", showing only stable release tags (e.g., vX.Y.Z) for the root module. This is used to determine the current latest stable version (`$CV`) during a manual release of the root module.\nSOURCE: https://github.com/googleapis/google-cloud-go/blob/main/RELEASING.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngit tag -l | grep -v beta | grep -v alpha\n```\n\n----------------------------------------\n\nTITLE: Updating OwlBot Post-Processor Docker Image Version - Shell\nDESCRIPTION: This snippet provides the command to pull the latest OwlBot post-processor Docker image and extract its SHA digest for updating configuration file versions. A Docker installation is required. It is used when propagating updated Docker image versions into the OwlBot lockfile. No input parameters except the Docker image tag; output is the pulled image and accompanying logs for SHA retrieval.\nSOURCE: https://github.com/googleapis/google-cloud-go/blob/main/internal/postprocessor/README.md#_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\ndocker pull gcr.io/cloud-devrel-public-resources/owlbot-go:infrastructure-public-image-latest\n```\n\n----------------------------------------\n\nTITLE: Running genbot with Docker in Local Mode (Shell)\nDESCRIPTION: Builds a Docker image ('genbot') using a specific Dockerfile and runs it to generate GAPIC source code locally within the container. Configuration (local mode, only GAPICs, target directory, specific GAPIC) is passed via environment variables (GENBOT_LOCAL_MODE, ONLY_GAPICS, GOCLOUD_DIR, GAPIC_TO_GENERATE). Mounts the parent directory of 'internal/gapicgen' as '/gapicgen' inside the container.\nSOURCE: https://github.com/googleapis/google-cloud-go/blob/main/internal/gapicgen/cmd/genbot/README.md#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\ncd /path/to/internal/gapicgen\ndocker build -t genbot -f cmd/genbot/Dockerfile .\ndocker run --rm \\\n   -v `pwd`/../..:/gapicgen \\\n   -e GENBOT_LOCAL_MODE=true \\\n   -e ONLY_GAPICS=true \\\n   -e GOCLOUD_DIR=/gapicgen \\\n   -e GAPIC_TO_GENERATE=cloud.google.com/go/foo/apiv1 \\\n   genbot\n```\n\n----------------------------------------\n\nTITLE: Generating Nested Commits for Module Bumps using changefinder\nDESCRIPTION: Shows how to use 'changefinder' to generate nested commit messages suitable for release automation (like release-please). This example uses quiet mode ('-q'), specifies the 'commit' output format ('-format=commit'), sets a custom base branch for comparison ('-base=base'), defines a commit scope ('-commit-scope=fix') and message ('-commit-message'), and crucially uses '-touch' to modify the CHANGES.md file in each changed module, ensuring they are picked up as changed. This command outputs the nested commit messages to stdout.\nSOURCE: https://github.com/googleapis/google-cloud-go/blob/main/internal/actions/cmd/changefinder/README.md#_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\ngo run ./internal/actions/cmd/changefinder -q \\\n  -format=commit \\\n  -base=base \\\n  -commit-scope=fix \\\n  -commit-message=\"describe the change\" \\\n  -touch\n```\n\n----------------------------------------\n\nTITLE: Generating Specific GAPIC Stubs Locally (Shell)\nDESCRIPTION: Executes the genbot tool locally using 'go run' to generate source code for a specific GAPIC library (e.g., 'cloud.google.com/go/foo/apiv1') in local mode. This is identical to the standard local mode execution but highlighted in the context of generating stubs for new or migrating libraries. Requires running from the 'internal/gapicgen' directory.\nSOURCE: https://github.com/googleapis/google-cloud-go/blob/main/internal/gapicgen/cmd/genbot/README.md#_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\ncd /path/to/internal/gapicgen\ngo run cloud.google.com/go/internal/gapicgen/cmd/genbot \\\n   -local \\\n   -only-gapics \\\n   -gocloud-dir=/path/to/google-cloud-go \\\n   -gapic=cloud.google.com/go/foo/apiv1\n```\n\n----------------------------------------\n\nTITLE: Running the Stabilizer Tool using Go Run in Bash\nDESCRIPTION: This command executes the `stabilizer` Go program located at `cmd/stabilizer/main.go` using `go run`. It requires the Go environment and the google-cloud-go repository. The command defines the base repository path (`-base=/path/to/google-cloud-go`) and specifies the child module ('asset') it operates on (`-child=asset`).\nSOURCE: https://github.com/googleapis/google-cloud-go/blob/main/internal/carver/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngo run cmd/stabilizer/main.go \\\n  -base=/path/to/google-cloud-go \\\n  -child=asset\n```\n\n----------------------------------------\n\nTITLE: Illustrating updateall Command Output Format\nDESCRIPTION: Shows an example of the standard output generated by the `updateall` command. The output consists of multiple commit messages, each wrapped within `BEGIN_NESTED_COMMIT` and `END_NESTED_COMMIT` markers. This format is designed to be consumed by release automation tools like release-please.\nSOURCE: https://github.com/googleapis/google-cloud-go/blob/main/internal/actions/cmd/updateall/README.md#_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nBEGIN_NESTED_COMMIT\nfix(accessapproval): update golang.org/x/net to v0.17.0\nEND_NESTED_COMMIT\nBEGIN_NESTED_COMMIT\nfix(accesscontextmanager): update golang.org/x/net to v0.17.0\nEND_NESTED_COMMIT\n...\n```\n\n----------------------------------------\n\nTITLE: Initializing Package Version with Internal Module Reference - Go\nDESCRIPTION: This Go code snippet is a template for initializing a client version variable within a generated Google Cloud Go package. It imports an internal module using a template substitution and sets a package-level versionClient variable to internal.Version in the init() function. This ensures that the client library can report its version at runtime. Dependencies include the generated internal package and proper resolution of the template variables. The snippet assumes versionClient is a package variable and relies on the internal.Version being defined.\nSOURCE: https://github.com/googleapis/google-cloud-go/blob/main/internal/postprocessor/_version.go.txt#_snippet_0\n\nLANGUAGE: go\nCODE:\n```\n// Copyright {{.Year}} Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n// Code generated by gapicgen. DO NOT EDIT.\n\npackage {{.Package}}\n\nimport \\\"{{.ModuleRootInternal}}\\\"\n\nfunc init() {\n    versionClient = internal.Version\n}\n```\n\n----------------------------------------\n\nTITLE: Describing KMS Module Updates - Markdown\nDESCRIPTION: This markdown snippet records versioned changes for the KMS module, listing enhancements, bug fixes, and documentation changes. The dependencies include a standardized changelog structure and linking conventions for commits and issues but does not require executable dependencies. Input consists of descriptive release notes, while the output is human-readable logs suitable for developers tracking project history. This is for documentation only and contains no constraints on length or formatting outside of standard markdown.\nSOURCE: https://github.com/googleapis/google-cloud-go/blob/main/kms/CHANGES.md#_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## [1.15.1](https://github.com/googleapis/google-cloud-go/compare/kms/v1.15.0...kms/v1.15.1) (2023-08-08)\\n\\n\\n### Documentation\\n\\n* **kms:** Minor formatting ([#8371](https://github.com/googleapis/google-cloud-go/issues/8371)) ([b4349cc](https://github.com/googleapis/google-cloud-go/commit/b4349cc507870ff8629bbc07de578b63bb889626))\\n\\n## [1.15.0](https://github.com/googleapis/google-cloud-go/compare/kms/v1.14.0...kms/v1.15.0) (2023-07-24)\\n\\n\\n### Features\\n\\n* **kms:** Add interoperable symmetric encryption system ([432864c](https://github.com/googleapis/google-cloud-go/commit/432864c7fc0bb551a5017b423bbd5f76c3357dc3))\\n\\n## [1.14.0](https://github.com/googleapis/google-cloud-go/compare/kms/v1.13.0...kms/v1.14.0) (2023-07-18)\\n\\n\\n### Features\\n\\n* **kms/inventory:** Add resource_types to SearchAllResources, to allow filtering by resource type ([#8261](https://github.com/googleapis/google-cloud-go/issues/8261)) ([9d55bab](https://github.com/googleapis/google-cloud-go/commit/9d55bab76839af4ef4301544b856b042352a489e))\\n\\n## [1.13.0](https://github.com/googleapis/google-cloud-go/compare/kms/v1.12.1...kms/v1.13.0) (2023-07-10)\\n\\n\\n### Features\\n\\n* **kms:** Add interoperable symmetric encryption system ([14b95d3](https://github.com/googleapis/google-cloud-go/commit/14b95d33753d0b391d0b49533e92b551e5dc3072))\\n\\n## [1.12.1](https://github.com/googleapis/google-cloud-go/compare/kms/v1.12.0...kms/v1.12.1) (2023-06-20)\\n\\n\\n### Bug Fixes\\n\\n* **kms:** REST query UpdateMask bug ([df52820](https://github.com/googleapis/google-cloud-go/commit/df52820b0e7721954809a8aa8700b93c5662dc9b))\\n\\n## [1.12.0](https://github.com/googleapis/google-cloud-go/compare/kms/v1.11.0...kms/v1.12.0) (2023-06-13)\\n\\n\\n### Features\\n\\n* **kms/inventory:** Promote to GA ([3abdfa1](https://github.com/googleapis/google-cloud-go/commit/3abdfa14dd56cf773c477f289a7f888e20bbbd9a))\\n\\n## [1.11.0](https://github.com/googleapis/google-cloud-go/compare/kms/v1.10.2...kms/v1.11.0) (2023-05-30)\\n\\n\\n### Features\\n\\n* **kms:** Update all direct dependencies ([b340d03](https://github.com/googleapis/google-cloud-go/commit/b340d030f2b52a4ce48846ce63984b28583abde6))\\n\\n## [1.10.2](https://github.com/googleapis/google-cloud-go/compare/kms/v1.10.1...kms/v1.10.2) (2023-05-08)\\n\\n\\n### Bug Fixes\\n\\n* **kms:** Update grpc to v1.55.0 ([1147ce0](https://github.com/googleapis/google-cloud-go/commit/1147ce02a990276ca4f8ab7a1ab65c14da4450ef))\\n\\n## [1.10.1](https://github.com/googleapis/google-cloud-go/compare/kms/v1.10.0...kms/v1.10.1) (2023-04-04)\\n\\n\\n### Documentation\\n\\n* **kms:** Publish the API comment changes related to supporting different hash functions/values for ECDSA signing ([#7619](https://github.com/googleapis/google-cloud-go/issues/7619)) ([597ea0f](https://github.com/googleapis/google-cloud-go/commit/597ea0fe09bcea04e884dffe78add850edb2120d))\\n\\n## [1.10.0](https://github.com/googleapis/google-cloud-go/compare/kms/v1.9.0...kms/v1.10.0) (2023-03-15)\\n\\n\\n### Features\\n\\n* **kms:** Add support for Coordinated External Keys ([#7517](https://github.com/googleapis/google-cloud-go/issues/7517)) ([64c6a6f](https://github.com/googleapis/google-cloud-go/commit/64c6a6fa30fd8bec40405fdddb73d1078024e985))\\n* **kms:** Update iam and longrunning deps ([91a1f78](https://github.com/googleapis/google-cloud-go/commit/91a1f784a109da70f63b96414bba8a9b4254cddd))\\n\\n## [1.9.0](https://github.com/googleapis/google-cloud-go/compare/kms/v1.8.0...kms/v1.9.0) (2023-03-01)\\n\\n\\n### Features\\n\\n* **kms/inventory:** Start generating apiv1 ([#7504](https://github.com/googleapis/google-cloud-go/issues/7504)) ([0ceff58](https://github.com/googleapis/google-cloud-go/commit/0ceff5837ca7389d52cf344da353ef3c85483055))\\n\\n## [1.8.0](https://github.com/googleapis/google-cloud-go/compare/kms/v1.7.0...kms/v1.8.0) (2023-01-04)\\n\\n\\n### Features\\n\\n* **kms:** Add REST client ([06a54a1](https://github.com/googleapis/google-cloud-go/commit/06a54a16a5866cce966547c51e203b9e09a25bc0))\\n\\n## [1.7.0](https://github.com/googleapis/google-cloud-go/compare/kms/v1.6.0...kms/v1.7.0) (2022-12-01)\\n\\n\\n### Features\\n\\n* **kms:** add SHA-2 import methods ([7231644](https://github.com/googleapis/google-cloud-go/commit/7231644e71f05abc864924a0065b9ea22a489180))\\n* **kms:** add support for additional HMAC algorithms ([2a0b1ae](https://github.com/googleapis/google-cloud-go/commit/2a0b1aeb1683222e6aa5c876cb945845c00cef79))\\n\\n## [1.6.0](https://github.com/googleapis/google-cloud-go/compare/kms/v1.5.0...kms/v1.6.0) (2022-11-03)\\n\\n\\n### Features\\n\\n* **kms:** rewrite signatures in terms of new location ([3c4b2b3](https://github.com/googleapis/google-cloud-go/commit/3c4b2b34565795537aac1661e6af2442437e34ad))\\n\\n## [1.5.0](https://github.com/googleapis/google-cloud-go/compare/kms/v1.4.0...kms/v1.5.0) (2022-10-25)\\n\\n\\n### Features\\n\\n* **kms:** enable generation of Locations mixin ([caf4afa](https://github.com/googleapis/google-cloud-go/commit/caf4afa139ad7b38b6df3e3b17b8357c81e1fd6c))\\n* **kms:** start generating stubs dir ([de2d180](https://github.com/googleapis/google-cloud-go/commit/de2d18066dc613b72f6f8db93ca60146dabcfdcc))\\n\\n## [1.4.0](https://github.com/googleapis/google-cloud-go/compare/kms/v1.3.0...kms/v1.4.0) (2022-02-23)\\n\\n\\n### Features\\n\\n* **kms:** set versionClient to module version ([55f0d92](https://github.com/googleapis/google-cloud-go/commit/55f0d92bf112f14b024b4ab0076c9875a17423c9))\\n\\n## [1.3.0](https://github.com/googleapis/google-cloud-go/compare/kms/v1.2.0...kms/v1.3.0) (2022-02-14)\\n\\n\\n### Features\\n\\n* **kms:** add file for tracking version ([17b36ea](https://github.com/googleapis/google-cloud-go/commit/17b36ead42a96b1a01105122074e65164357519e))\\n\\n## [1.2.0](https://www.github.com/googleapis/google-cloud-go/compare/kms/v1.1.0...kms/v1.2.0) (2022-02-04)\\n\\n\\n### Features\\n\\n* **kms:** add a new EkmService API ([7f48e6b](https://www.github.com/googleapis/google-cloud-go/commit/7f48e6b68e59812208ea87b7861fad60169dc63a))\\n\\n## [1.1.0](https://www.github.com/googleapis/google-cloud-go/compare/kms/v1.0.0...kms/v1.1.0) (2021-10-18)\\n\\n\\n### Features\\n\\n* **kms:** add OAEP+SHA1 to the list of supported algorithms ([8c5c6cf](https://www.github.com/googleapis/google-cloud-go/commit/8c5c6cf9df046b67998a8608d05595bd9e34feb0))\\n* **kms:** add RPC retry information for MacSign, MacVerify, and GenerateRandomBytes Committer: [@bdhess](https://www.github.com/bdhess) ([1a0720f](https://www.github.com/googleapis/google-cloud-go/commit/1a0720f2f33bb14617f5c6a524946a93209e1266))\\n* **kms:** add support for Raw PKCS[#1](https://www.github.com/googleapis/google-cloud-go/issues/1) signing keys ([58bea89](https://www.github.com/googleapis/google-cloud-go/commit/58bea89a3d177d5c431ff19310794e3296253353))\\n\\n## 1.0.0\\n\\nStabilize GA surface.\\n\\n## [0.2.0](https://www.github.com/googleapis/google-cloud-go/compare/kms/v0.1.0...kms/v0.2.0) (2021-08-30)\\n\\n\\n### Features\\n\\n* **kms:** add support for Key Reimport ([bf4378b](https://www.github.com/googleapis/google-cloud-go/commit/bf4378b5b859f7b835946891dbfebfee31c4b123))\\n\\n## v0.1.0\\n\\nThis is the first tag to carve out kms as its own module. See\\n[Add a module to a multi-module repository](https://github.com/golang/go/wiki/Modules#is-it-possible-to-add-a-module-to-a-multi-module-repository).\n```\n\n----------------------------------------\n\nTITLE: Importing a Module for Build-Time Dependency Management in Go\nDESCRIPTION: This Go code sets a build constraint (// +build modhack) so that it's only used at build time, not included in the final binary. The blank import (import _ \\\"{{.RootMod}}\\\") brings in a module for dependency resolution without direct usage, used in multi-module Go repositories. Prerequisites include Go modules and an understanding of build constraints; no runtime parameters or outputs are expected.\nSOURCE: https://github.com/googleapis/google-cloud-go/blob/main/internal/carver/cmd/carver/_tidyhack_tmpl.txt#_snippet_0\n\nLANGUAGE: Go\nCODE:\n```\n// Copyright {{.Year}} Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n// This file, and the {{.RootMod}} import, won't actually become part of\n// the resultant binary.\n// +build modhack\n\npackage {{.Package}}\n\n// Necessary for safely adding multi-module repo. See: https://github.com/golang/go/wiki/Modules#is-it-possible-to-add-a-module-to-a-multi-module-repository\nimport _ \\\"{{.RootMod}}\\\"\n```\n\n----------------------------------------\n\nTITLE: Maintaining a Project Changelog with Markdown - Markdown\nDESCRIPTION: This snippet demonstrates the structure of a typical project changelog in markdown format, showing how to organize release histories, bug fixes, features, and dependency updates. No build or runtime dependencies are required beyond standard markdown support. Key sections include version headers, categorized change lists, and links to GitHub commits or issues; it expects inputs in the form of release notes, and outputs as human-readable change summaries for project users and contributors.\nSOURCE: https://github.com/googleapis/google-cloud-go/blob/main/discoveryengine/CHANGES.md#_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n### Bug Fixes\n\n* **discoveryengine:** Update grpc-go to v1.59.0 ([81a97b0](https://github.com/googleapis/google-cloud-go/commit/81a97b06cb28b25432e4ece595c55a9857e960b7))\n\n## [1.2.1](https://github.com/googleapis/google-cloud-go/compare/discoveryengine/v1.2.0...discoveryengine/v1.2.1) (2023-10-12)\n\n\n### Bug Fixes\n\n* **discoveryengine:** Update golang.org/x/net to v0.17.0 ([174da47](https://github.com/googleapis/google-cloud-go/commit/174da47254fefb12921bbfc65b7829a453af6f5d))\n\n## [1.2.0](https://github.com/googleapis/google-cloud-go/compare/discoveryengine/v1.1.0...discoveryengine/v1.2.0) (2023-09-11)\n\n\n### Features\n\n* **discoveryengine:** Support conversational / multi-turn search ([15be57b](https://github.com/googleapis/google-cloud-go/commit/15be57b9264a793494cedc3966034fa20f56d7c5))\n* **discoveryengine:** Supported bring your own embedding feature ([fbfaf21](https://github.com/googleapis/google-cloud-go/commit/fbfaf21c15ae8a07ab39c6036cf0cee700b5627c))\n\n## [1.1.0](https://github.com/googleapis/google-cloud-go/compare/discoveryengine/v1.0.0...discoveryengine/v1.1.0) (2023-07-31)\n\n\n### Features\n\n* **discoveryengine:** Support conversational / multi-turn search ([95178ca](https://github.com/googleapis/google-cloud-go/commit/95178ca078eaff56fc6eab52e11e28386c822aa0))\n\n## [1.0.0](https://github.com/googleapis/google-cloud-go/compare/discoveryengine/v0.5.0...discoveryengine/v1.0.0) (2023-07-24)\n\n\n### Features\n\n* **discoveryengine:** Promote to GA ([08ec41a](https://github.com/googleapis/google-cloud-go/commit/08ec41aba981874a7b86a9a941b07f9eb2fc6ce1))\n* **discoveryengine:** Promote to GA ([#8302](https://github.com/googleapis/google-cloud-go/issues/8302)) ([6e0227d](https://github.com/googleapis/google-cloud-go/commit/6e0227de753a66332030d76a906356696c1b37b6))\n\n## [0.5.0](https://github.com/googleapis/google-cloud-go/compare/discoveryengine/v0.4.1...discoveryengine/v0.5.0) (2023-06-20)\n\n\n### Features\n\n* **discoveryengine:** Support extractive content in search ([b726d41](https://github.com/googleapis/google-cloud-go/commit/b726d413166faa8c84c0a09c6019ff50f3249b9d))\n\n\n### Bug Fixes\n\n* **discoveryengine:** REST query UpdateMask bug ([df52820](https://github.com/googleapis/google-cloud-go/commit/df52820b0e7721954809a8aa8700b93c5662dc9b))\n\n## [0.4.1](https://github.com/googleapis/google-cloud-go/compare/discoveryengine/v0.4.0...discoveryengine/v0.4.1) (2023-06-07)\n\n\n### Bug Fixes\n\n* **discoveryengine:** Remove the summarization feature from v1 version ([#8056](https://github.com/googleapis/google-cloud-go/issues/8056)) ([79eac77](https://github.com/googleapis/google-cloud-go/commit/79eac771ecf99172157cc4499ba95536778354e6))\n\n## [0.4.0](https://github.com/googleapis/google-cloud-go/compare/discoveryengine/v0.3.1...discoveryengine/v0.4.0) (2023-05-30)\n\n\n### Features\n\n* **discoveryengine:** Allow users to specify id field in documents gcs import ([ca94e27](https://github.com/googleapis/google-cloud-go/commit/ca94e2724f9e2610b46aefd0a3b5ddc06102e91b))\n* **discoveryengine:** Update all direct dependencies ([b340d03](https://github.com/googleapis/google-cloud-go/commit/b340d030f2b52a4ce48846ce63984b28583abde6))\n\n\n### Bug Fixes\n\n* **discoveryengine:** Fix the field name typo for search service user_labels ([2b3e7d9](https://github.com/googleapis/google-cloud-go/commit/2b3e7d9af7d2f500e736e3db77487127cb44ca23))\n\n## [0.3.1](https://github.com/googleapis/google-cloud-go/compare/discoveryengine/v0.3.0...discoveryengine/v0.3.1) (2023-05-08)\n\n\n### Bug Fixes\n\n* **discoveryengine:** Update grpc to v1.55.0 ([1147ce0](https://github.com/googleapis/google-cloud-go/commit/1147ce02a990276ca4f8ab7a1ab65c14da4450ef))\n\n## [0.3.0](https://github.com/googleapis/google-cloud-go/compare/discoveryengine/v0.2.0...discoveryengine/v0.3.0) (2023-04-25)\n\n\n### Features\n\n* **discoveryengine:** Add search, autocomplete and schema services ([#7813](https://github.com/googleapis/google-cloud-go/issues/7813)) ([6d70113](https://github.com/googleapis/google-cloud-go/commit/6d7011362cc4cd5c753146e4cb0eb5e051b0e389))\n\n## [0.2.0](https://github.com/googleapis/google-cloud-go/compare/discoveryengine/v0.1.0...discoveryengine/v0.2.0) (2023-03-15)\n\n\n### Features\n\n* **discoveryengine:** Update iam and longrunning deps ([91a1f78](https://github.com/googleapis/google-cloud-go/commit/91a1f784a109da70f63b96414bba8a9b4254cddd))\n\n## 0.1.0 (2023-02-16)\n\n\n### Features\n\n* **discoveryengine:** Start generating apiv1beta ([#7427](https://github.com/googleapis/google-cloud-go/issues/7427)) ([0d289a0](https://github.com/googleapis/google-cloud-go/commit/0d289a07106226b4398935357ab0f30a3a30340d))\n\n## Changes\n```\n\n----------------------------------------\n\nTITLE: Deprecated Modifying Pub/Sub Push Config in Go (Pre-v0.9.0)\nDESCRIPTION: Shows the previous method `ModifyPushConfig` for updating a Pub/Sub subscription's push endpoint before v0.9.0. This method is replaced by `Update` in v0.9.0. Requires an initialized Pub/Sub subscription client (`sub`) and a context (`ctx`).\nSOURCE: https://github.com/googleapis/google-cloud-go/blob/main/CHANGES.md#_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nsub.ModifyPushConfig(ctx, pubsub.PushConfig{Endpoint: \"https://example.com/push\"})\n```\n\n----------------------------------------\n\nTITLE: Documenting Deploy Release Features and Versions - Markdown\nDESCRIPTION: This snippet lists key features and version updates for the google-cloud-go deploy module using Markdown. It includes bulleted itemizations of features, semantic versioning references, and hyperlinks to GitHub commits and pull requests. The content is meant for documentation purposes, assumes familiarity with git and GitHub workflows, and does not require code dependencies. Inputs are updates issued via commit messages or PR descriptions; outputs are human-readable changelogs for developers. It is formatted as Markdown and best displayed in README or release note contexts.\nSOURCE: https://github.com/googleapis/google-cloud-go/blob/main/deploy/CHANGES.md#_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n### Features\n\n* **deploy:** add file for tracking version ([17b36ea](https://github.com/googleapis/google-cloud-go/commit/17b36ead42a96b1a01105122074e65164357519e))\n\n## [1.0.0](https://www.github.com/googleapis/google-cloud-go/compare/deploy/v0.1.0...deploy/v1.0.0) (2022-01-25)\n\n\n### Features\n\n* **deploy:** to v1 ([#5140](https://www.github.com/googleapis/google-cloud-go/issues/5140)) ([74c389e](https://www.github.com/googleapis/google-cloud-go/commit/74c389e26c1ce8b0ce9ede7b298c6a8a9d106094))\n\n## v0.1.0\n\n- feat(deploy): start generating clients\n```\n\n----------------------------------------\n\nTITLE: Summarizing Version Changes - Markdown\nDESCRIPTION: Summarizes the version history, new features, bug fixes, and documentation increments for the accessapproval module using Markdown. No dependencies are required to consume this file or its content. Each version section records upgrade details, scope, and references to related issues or commits. Intended for human consumption as release notes and project history; no input/output is processed programmatically.\nSOURCE: https://github.com/googleapis/google-cloud-go/blob/main/accessapproval/CHANGES.md#_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Changes\n\n## [1.8.6](https://github.com/googleapis/google-cloud-go/compare/accessapproval/v1.8.5...accessapproval/v1.8.6) (2025-04-15)\n\n\n### Bug Fixes\n\n* **accessapproval:** Update google.golang.org/api to 0.229.0 ([3319672](https://github.com/googleapis/google-cloud-go/commit/3319672f3dba84a7150772ccb5433e02dab7e201))\n\n## [1.8.5](https://github.com/googleapis/google-cloud-go/compare/accessapproval/v1.8.4...accessapproval/v1.8.5) (2025-03-13)\n\n\n### Bug Fixes\n\n* **accessapproval:** Update golang.org/x/net to 0.37.0 ([1144978](https://github.com/googleapis/google-cloud-go/commit/11449782c7fb4896bf8b8b9cde8e7441c84fb2fd))\n\n## [1.8.4](https://github.com/googleapis/google-cloud-go/compare/accessapproval/v1.8.3...accessapproval/v1.8.4) (2025-03-06)\n\n\n### Bug Fixes\n\n* **accessapproval:** Fix out-of-sync version.go ([28f0030](https://github.com/googleapis/google-cloud-go/commit/28f00304ebb13abfd0da2f45b9b79de093cca1ec))\n\n## [1.8.3](https://github.com/googleapis/google-cloud-go/compare/accessapproval/v1.8.2...accessapproval/v1.8.3) (2025-01-02)\n\n\n### Bug Fixes\n\n* **accessapproval:** Update golang.org/x/net to v0.33.0 ([e9b0b69](https://github.com/googleapis/google-cloud-go/commit/e9b0b69644ea5b276cacff0a707e8a5e87efafc9))\n\n## [1.8.2](https://github.com/googleapis/google-cloud-go/compare/accessapproval/v1.8.1...accessapproval/v1.8.2) (2024-10-23)\n\n\n### Bug Fixes\n\n* **accessapproval:** Update google.golang.org/api to v0.203.0 ([8bb87d5](https://github.com/googleapis/google-cloud-go/commit/8bb87d56af1cba736e0fe243979723e747e5e11e))\n* **accessapproval:** WARNING: On approximately Dec 1, 2024, an update to Protobuf will change service registration function signatures to use an interface instead of a concrete type in generated .pb.go files. This change is expected to affect very few if any users of this client library. For more information, see https://togithub.com/googleapis/google-cloud-go/issues/11020. ([8bb87d5](https://github.com/googleapis/google-cloud-go/commit/8bb87d56af1cba736e0fe243979723e747e5e11e))\n\n## [1.8.1](https://github.com/googleapis/google-cloud-go/compare/accessapproval/v1.8.0...accessapproval/v1.8.1) (2024-09-12)\n\n\n### Bug Fixes\n\n* **accessapproval:** Bump dependencies ([2ddeb15](https://github.com/googleapis/google-cloud-go/commit/2ddeb1544a53188a7592046b98913982f1b0cf04))\n\n## [1.8.0](https://github.com/googleapis/google-cloud-go/compare/accessapproval/v1.7.12...accessapproval/v1.8.0) (2024-08-20)\n\n\n### Features\n\n* **accessapproval:** Add support for Go 1.23 iterators ([84461c0](https://github.com/googleapis/google-cloud-go/commit/84461c0ba464ec2f951987ba60030e37c8a8fc18))\n\n## [1.7.12](https://github.com/googleapis/google-cloud-go/compare/accessapproval/v1.7.11...accessapproval/v1.7.12) (2024-08-08)\n\n\n### Bug Fixes\n\n* **accessapproval:** Update google.golang.org/api to v0.191.0 ([5b32644](https://github.com/googleapis/google-cloud-go/commit/5b32644eb82eb6bd6021f80b4fad471c60fb9d73))\n\n## [1.7.11](https://github.com/googleapis/google-cloud-go/compare/accessapproval/v1.7.10...accessapproval/v1.7.11) (2024-07-24)\n\n\n### Bug Fixes\n\n* **accessapproval:** Update dependencies ([257c40b](https://github.com/googleapis/google-cloud-go/commit/257c40bd6d7e59730017cf32bda8823d7a232758))\n\n## [1.7.10](https://github.com/googleapis/google-cloud-go/compare/accessapproval/v1.7.9...accessapproval/v1.7.10) (2024-07-10)\n\n\n### Bug Fixes\n\n* **accessapproval:** Bump google.golang.org/grpc@v1.64.1 ([8ecc4e9](https://github.com/googleapis/google-cloud-go/commit/8ecc4e9622e5bbe9b90384d5848ab816027226c5))\n\n## [1.7.9](https://github.com/googleapis/google-cloud-go/compare/accessapproval/v1.7.8...accessapproval/v1.7.9) (2024-07-01)\n\n\n### Bug Fixes\n\n* **accessapproval:** Bump google.golang.org/api@v0.187.0 ([8fa9e39](https://github.com/googleapis/google-cloud-go/commit/8fa9e398e512fd8533fd49060371e61b5725a85b))\n\n## [1.7.8](https://github.com/googleapis/google-cloud-go/compare/accessapproval/v1.7.7...accessapproval/v1.7.8) (2024-06-26)\n\n\n### Bug Fixes\n\n* **accessapproval:** Enable new auth lib ([b95805f](https://github.com/googleapis/google-cloud-go/commit/b95805f4c87d3e8d10ea23bd7a2d68d7a4157568))\n\n## [1.7.7](https://github.com/googleapis/google-cloud-go/compare/accessapproval/v1.7.6...accessapproval/v1.7.7) (2024-05-01)\n\n\n### Bug Fixes\n\n* **accessapproval:** Bump x/net to v0.24.0 ([ba31ed5](https://github.com/googleapis/google-cloud-go/commit/ba31ed5fda2c9664f2e1cf972469295e63deb5b4))\n\n## [1.7.6](https://github.com/googleapis/google-cloud-go/compare/accessapproval/v1.7.5...accessapproval/v1.7.6) (2024-03-14)\n\n\n### Bug Fixes\n\n* **accessapproval:** Update protobuf dep to v1.33.0 ([30b038d](https://github.com/googleapis/google-cloud-go/commit/30b038d8cac0b8cd5dd4761c87f3f298760dd33a))\n\n## [1.7.5](https://github.com/googleapis/google-cloud-go/compare/accessapproval/v1.7.4...accessapproval/v1.7.5) (2024-01-30)\n\n\n### Bug Fixes\n\n* **accessapproval:** Enable universe domain resolution options ([fd1d569](https://github.com/googleapis/google-cloud-go/commit/fd1d56930fa8a747be35a224611f4797b8aeb698))\n\n## [1.7.4](https://github.com/googleapis/google-cloud-go/compare/accessapproval/v1.7.3...accessapproval/v1.7.4) (2023-11-01)\n\n\n### Bug Fixes\n\n* **accessapproval:** Bump google.golang.org/api to v0.149.0 ([8d2ab9f](https://github.com/googleapis/google-cloud-go/commit/8d2ab9f320a86c1c0fab90513fc05861561d0880))\n\n## [1.7.3](https://github.com/googleapis/google-cloud-go/compare/accessapproval/v1.7.2...accessapproval/v1.7.3) (2023-10-26)\n\n\n### Bug Fixes\n\n* **accessapproval:** Update grpc-go to v1.59.0 ([81a97b0](https://github.com/googleapis/google-cloud-go/commit/81a97b06cb28b25432e4ece595c55a9857e960b7))\n\n## [1.7.2](https://github.com/googleapis/google-cloud-go/compare/accessapproval/v1.7.1...accessapproval/v1.7.2) (2023-10-12)\n\n\n### Bug Fixes\n\n* **accessapproval:** Update golang.org/x/net to v0.17.0 ([174da47](https://github.com/googleapis/google-cloud-go/commit/174da47254fefb12921bbfc65b7829a453af6f5d))\n\n## [1.7.1](https://github.com/googleapis/google-cloud-go/compare/accessapproval-v1.7.0...accessapproval/v1.7.1) (2023-06-20)\n\n\n### Bug Fixes\n\n* **accessapproval:** REST query UpdateMask bug ([df52820](https://github.com/googleapis/google-cloud-go/commit/df52820b0e7721954809a8aa8700b93c5662dc9b))\n\n## [1.7.0](https://github.com/googleapis/google-cloud-go/compare/accessapproval/v1.6.1...accessapproval/v1.7.0) (2023-05-30)\n\n\n### Features\n\n* **accessapproval:** Update all direct dependencies ([b340d03](https://github.com/googleapis/google-cloud-go/commit/b340d030f2b52a4ce48846ce63984b28583abde6))\n\n## [1.6.1](https://github.com/googleapis/google-cloud-go/compare/accessapproval/v1.6.0...accessapproval/v1.6.1) (2023-05-08)\n\n\n### Bug Fixes\n\n* **accessapproval:** Update grpc to v1.55.0 ([1147ce0](https://github.com/googleapis/google-cloud-go/commit/1147ce02a990276ca4f8ab7a1ab65c14da4450ef))\n\n## [1.6.0](https://github.com/googleapis/google-cloud-go/compare/accessapproval/v1.5.0...accessapproval/v1.6.0) (2023-01-04)\n\n\n### Features\n\n* **accessapproval:** Add REST client ([06a54a1](https://github.com/googleapis/google-cloud-go/commit/06a54a16a5866cce966547c51e203b9e09a25bc0))\n\n## [1.5.0](https://github.com/googleapis/google-cloud-go/compare/accessapproval/v1.4.0...accessapproval/v1.5.0) (2022-11-03)\n\n\n### Features\n\n* **accessapproval:** rewrite signatures in terms of new location ([3c4b2b3](https://github.com/googleapis/google-cloud-go/commit/3c4b2b34565795537aac1661e6af2442437e34ad))\n\n## [1.4.0](https://github.com/googleapis/google-cloud-go/compare/accessapproval/v1.3.1...accessapproval/v1.4.0) (2022-10-25)\n\n\n### Features\n\n* **accessapproval:** start generating stubs dir ([de2d180](https://github.com/googleapis/google-cloud-go/commit/de2d18066dc613b72f6f8db93ca60146dabcfdcc))\n\n## [1.3.1](https://github.com/googleapis/google-cloud-go/compare/accessapproval/v1.3.0...accessapproval/v1.3.1) (2022-09-06)\n\n\n### Documentation\n\n* **accessapproval:** added Cloud Dataproc and Secret Manager to the list of supported services ([3bc37e2](https://github.com/googleapis/google-cloud-go/commit/3bc37e28626df5f7ec37b00c0c2f0bfb91c30495))\n\n## [1.3.0](https://github.com/googleapis/google-cloud-go/compare/accessapproval/v1.2.0...accessapproval/v1.3.0) (2022-05-24)\n\n\n### Features\n\n* **accessapproval:** update protos to include InvalidateApprovalRequest and GetAccessApprovalServiceAccount APIs ([e823d8f](https://github.com/googleapis/google-cloud-go/commit/e823d8fdc5daffc92b2ca4f615a3a324d60c0ed4))\n\n## [1.2.0](https://github.com/googleapis/google-cloud-go/compare/accessapproval/v1.1.0...accessapproval/v1.2.0) (2022-02-23)\n\n\n### Features\n\n* **accessapproval:** set versionClient to module version ([55f0d92](https://github.com/googleapis/google-cloud-go/commit/55f0d92bf112f14b024b4ab0076c9875a17423c9))\n\n## [1.1.0](https://github.com/googleapis/google-cloud-go/compare/accessapproval/v1.0.1...accessapproval/v1.1.0) (2022-02-14)\n\n\n### Features\n\n* **accessapproval:** add file for tracking version ([17b36ea](https://github.com/googleapis/google-cloud-go/commit/17b36ead42a96b1a01105122074e65164357519e))\n\n### [1.0.1](https://www.github.com/googleapis/google-cloud-go/compare/accessapproval/v1.0.0...accessapproval/v1.0.1) (2021-10-18)\n\n\n### Bug Fixes\n\n* **accessapproval:** testing formatting change ([#4811](https://www.github.com/googleapis/google-cloud-go/issues/4811)) ([9423095](https://www.github.com/googleapis/google-cloud-go/commit/942309522c7d12463bfe9d30fddbea5c8dcf0aec))\n* **accessapproval:** testing formatting change ([#4819](https://www.github.com/googleapis/google-cloud-go/issues/4819)) ([5c1df89](https://www.github.com/googleapis/google-cloud-go/commit/5c1df8940048dbee7cac2d238892818993776bfe))\n\n## 1.0.0\n\nStabilize GA surface.\n\n## v0.1.0\n\nThis is the first tag to carve out accessapproval as its own module. See\n[Add a module to a multi-module repository](https://github.com/golang/go/wiki/Modules#is-it-possible-to-add-a-module-to-a-multi-module-repository).\n```"
  }
]