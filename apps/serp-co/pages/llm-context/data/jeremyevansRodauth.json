[
  {
    "owner": "jeremyevans",
    "repo": "rodauth",
    "content": "TITLE: Enabling disallow_common_passwords Feature in Ruby\nDESCRIPTION: This snippet shows how to enable the new disallow_common_passwords feature in Rodauth. By default, it disallows the 10,000 most common passwords.\nSOURCE: https://github.com/jeremyevans/rodauth/blob/master/doc/release_notes/1.16.0.txt#2025-04-16_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nenable :disallow_common_passwords\n```\n\n----------------------------------------\n\nTITLE: Configuring Error Handling with set_error_reason in Rodauth\nDESCRIPTION: New configuration method for custom error handling in Rodauth. Called whenever an error occurs with a symbol describing the error type. Enables implementation of specific error handling behaviors.\nSOURCE: https://github.com/jeremyevans/rodauth/blob/master/doc/release_notes/2.13.0.txt#2025-04-16_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nset_error_reason\n```\n\n----------------------------------------\n\nTITLE: Configuring CSRF Protection for JSON Requests in Ruby\nDESCRIPTION: This snippet illustrates how to continue enforcing CSRF protection for JSON requests when using Roda's route_csrf plugin, which is no longer the default behavior for JSON requests in Rodauth.\nSOURCE: https://github.com/jeremyevans/rodauth/blob/master/doc/release_notes/2.37.0.txt#2025-04-16_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\ncheck_csrf? true\n```\n\n----------------------------------------\n\nTITLE: Configuring Password Entry During Account Verification in Rodauth\nDESCRIPTION: This code snippet demonstrates how to configure Rodauth to request the password during account verification instead of during account creation. This improves security by ensuring only users with access to the verification email can set the account password.\nSOURCE: https://github.com/jeremyevans/rodauth/blob/master/doc/release_notes/1.15.0.txt#2025-04-16_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nverify_account_set_password? true\n```\n\n----------------------------------------\n\nTITLE: Configuring Argon2 Database Authentication Functions in Ruby\nDESCRIPTION: Code snippet showing how to configure database authentication functions to support argon2 password hashing alongside bcrypt. Includes steps for dropping existing functions and creating new ones with argon2 support. Requires a Sequel::Database object.\nSOURCE: https://github.com/jeremyevans/rodauth/blob/master/doc/release_notes/2.10.0.txt#2025-04-16_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nrequire 'rodauth/migrations'\n\n# If the functions are already defined and you are not using PostgreSQL,\n# you need to drop the existing functions.\nRodauth.drop_database_authentication_functions(DB)\n\n# If you are using the disallow_password_reuse feature, also drop the\n# database functions related to that if you are not using PostgreSQL:\nRodauth.drop_database_previous_password_check_functions(DB)\n\n# Define new functions that support argon2:\nRodauth.create_database_authentication_functions(DB, argon2: true)\n\n# If you are using the disallow_password_reuse feature, also define\n# new functions that support argon2 for that:\nRodauth.create_database_previous_password_check_functions(DB, argon2: true)\n```\n\n----------------------------------------\n\nTITLE: Using Rodauth.lib Method for Non-Web Authentication in Ruby\nDESCRIPTION: Demonstrates how to use the new Rodauth.lib method for implementing authentication in non-web applications. This method creates a Roda application with the rodauth plugin and returns the related Rodauth::Auth class for direct authentication operations.\nSOURCE: https://github.com/jeremyevans/rodauth/blob/master/doc/release_notes/2.16.0.txt#2025-04-16_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nrequire 'rodauth'\nrodauth = Rodauth.lib do\n  enable :create_account, :change_password\nend\nrodauth.create_account(login: 'foo@example.com', password: '...')\nrodauth.change_password(account_id: 24601, password: '...')\n```\n\n----------------------------------------\n\nTITLE: Configuring Secret Rotation Methods in Rodauth\nDESCRIPTION: Lists new configuration methods for secret rotation in Rodauth. These methods (hmac_old_secret, argon2_old_secret, and jwt_old_secret) allow specifying the previous secret when rotating authentication secrets.\nSOURCE: https://github.com/jeremyevans/rodauth/blob/master/doc/release_notes/2.32.0.txt#2025-04-16_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\n* hmac_old_secret\n* argon2_old_secret (argon2 feature)\n* jwt_old_secret (jwt feature)\n```\n\n----------------------------------------\n\nTITLE: Ruby Configuration Method Updates for Login and Password Management\nDESCRIPTION: New configuration methods added for controlling login and password size limits in both bytes and characters. Includes login_maximum_bytes (defaults to 255), password_maximum_length, and password_maximum_bytes (both default to nil). Also adds corresponding error message configuration methods.\nSOURCE: https://github.com/jeremyevans/rodauth/blob/master/doc/release_notes/2.19.0.txt#2025-04-16_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nlogin_maximum_bytes # defaults to 255\nlogin_too_many_bytes_message\npassword_maximum_length # defaults to nil\npassword_maximum_bytes # defaults to nil\npassword_too_long_message\npassword_too_many_bytes_message\n```\n\n----------------------------------------\n\nTITLE: Checking OTP Authentication Availability in Rodauth\nDESCRIPTION: The new rodauth.otp_available? method checks whether an account can authenticate using OTP. It returns true when the account has OTP setup and is not locked out from using OTP.\nSOURCE: https://github.com/jeremyevans/rodauth/blob/master/doc/release_notes/2.24.0.txt#2025-04-16_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nrodauth.otp_available?\n```\n\n----------------------------------------\n\nTITLE: Setting Password Length Restriction Example in Ruby\nDESCRIPTION: Example showing how to implement password length restrictions by overriding the password_meets_requirements? configuration method in Rodauth.\nSOURCE: https://github.com/jeremyevans/rodauth/blob/master/doc/release_notes/1.2.0.txt#2025-04-16_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\npassword_meets_requirements? do\n  super && password.length <= 72\nend\n```\n\n----------------------------------------\n\nTITLE: Normalizing Login Parameters in Ruby\nDESCRIPTION: This code snippet shows how to use the new normalize_login configuration method in Rodauth. It demonstrates forcing login parameters to lowercase, which can be useful when storing logins in a case-sensitive column.\nSOURCE: https://github.com/jeremyevans/rodauth/blob/master/doc/release_notes/2.37.0.txt#2025-04-16_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\nnormalize_login(&:downcase)\n```\n\n----------------------------------------\n\nTITLE: Implementing Around Rodauth Action Wrapper in Ruby\nDESCRIPTION: Demonstrates how to use the new around_rodauth configuration method to wrap all Rodauth actions. The example shows timing block execution and adding response headers using a scope.time_block method.\nSOURCE: https://github.com/jeremyevans/rodauth/blob/master/doc/release_notes/2.6.0.txt#2025-04-16_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\naround_rodauth do |&block|\n  scope.time_block('Rodauth') do\n    super(&block)\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Logging in Current Account Externally in Rodauth (Ruby)\nDESCRIPTION: New functionality allowing external code to log in the current account using rodauth.login method, requiring the authentication type string as a parameter.\nSOURCE: https://github.com/jeremyevans/rodauth/blob/master/doc/release_notes/2.3.0.txt#2025-04-16_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\nrodauth.login\n```\n\n----------------------------------------\n\nTITLE: Changing Password Using Internal Request in Ruby\nDESCRIPTION: Demonstrates how to use the new internal_request feature to change a user's password programmatically. This method allows administrators to modify account details without user involvement.\nSOURCE: https://github.com/jeremyevans/rodauth/blob/master/doc/release_notes/2.15.0.txt#2025-04-16_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nApp.rodauth.change_password(account_id: 1, password: 'foobar')\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Methods to Rodauth in Ruby\nDESCRIPTION: This example shows how to add custom methods to the Rodauth object using auth_class_eval. It includes after_login and after_logout hooks with a custom logging method.\nSOURCE: https://github.com/jeremyevans/rodauth/blob/master/doc/release_notes/1.0.0.txt#2025-04-16_snippet_6\n\nLANGUAGE: ruby\nCODE:\n```\nplugin :rodauth do\n  enable :login, :logout\n\n  after_login do\n    log('logged in')\n  end\n\n  after_logout do\n    log('logged out')\n  end\n\n  auth_class_eval do\n    def log(msg)\n      LOGGER.info(\"#{account[:email]} #{msg}\")\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Adding OTP Validation for Old Secrets in Rodauth\nDESCRIPTION: Introduces the otp_valid_code_for_old_secret configuration method which handles cases where a user successfully authenticates via TOTP using an old secret during secret rotation.\nSOURCE: https://github.com/jeremyevans/rodauth/blob/master/doc/release_notes/2.32.0.txt#2025-04-16_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\notp_valid_code_for_old_secret\n```\n\n----------------------------------------\n\nTITLE: Configuring JWT Feature Methods in Rodauth\nDESCRIPTION: Example configuration methods available for JWT feature including format error messages, content type handling, and authorization checks. These methods control how JWT authentication behaves in the application.\nSOURCE: https://github.com/jeremyevans/rodauth/blob/master/doc/release_notes/1.5.0.txt#2025-04-16_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\ninvalid_jwt_format_error_message  # Error message for invalid JWT format\njson_accept_regexp                # Regexp for Accept header JSON check\njson_not_accepted_error_message   # Error message for unsupported JSON Accept header\njson_request_content_type_regexp  # Regexp for JSON request recognition\njson_response_content_type        # Content type for JSON responses\njwt_authorization_ignore          # Regexp to ignore certain Authorization headers\njwt_authorization_remove          # Regexp to clean Authorization header\njwt_check_accept?                 # Whether to check Accept header for JSON support\nsession_jwt                       # Current session's encoded JWT\nuse_jwt?                          # Whether to use JWT in Authorization header\n```\n\n----------------------------------------\n\nTITLE: Configuring Email Validation in Rodauth (Ruby)\nDESCRIPTION: New configuration methods for validating login emails in Rodauth. These methods allow for custom email validation logic, setting regular expressions for email format, and customizing error messages for invalid emails.\nSOURCE: https://github.com/jeremyevans/rodauth/blob/master/doc/release_notes/2.3.0.txt#2025-04-16_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nlogin_valid_email?(login)\nlogin_email_regexp\nlogin_not_valid_email_message\n```\n\n----------------------------------------\n\nTITLE: Checking Session Expiration in Ruby with Rodauth\nDESCRIPTION: This code checks for session expiration based on inactivity and max lifetime. It should be used in the routing block to enforce session expiration.\nSOURCE: https://github.com/jeremyevans/rodauth/blob/master/doc/release_notes/1.0.0.txt#2025-04-16_snippet_4\n\nLANGUAGE: ruby\nCODE:\n```\nrodauth.check_session_expiration\n```\n\n----------------------------------------\n\nTITLE: Checking Single Session in Ruby with Rodauth\nDESCRIPTION: This snippet enforces the single session feature in Rodauth, limiting each account to one logged-in session. It should be placed at an appropriate point in the routing block.\nSOURCE: https://github.com/jeremyevans/rodauth/blob/master/doc/release_notes/1.0.0.txt#2025-04-16_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\nrodauth.check_single_session\n```\n\n----------------------------------------\n\nTITLE: Configuring SMS Send Method in Rodauth\nDESCRIPTION: Example of how to configure the SMS send method in Rodauth for the SMS codes feature. This method needs to be implemented by the user to send SMS messages using their preferred SMS library.\nSOURCE: https://github.com/jeremyevans/rodauth/blob/master/doc/release_notes/1.0.0.txt#2025-04-16_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nsms_send do |phone_number, message|\n  SomeSMSLibrary.send(phone_number, message)\nend\n```\n\n----------------------------------------\n\nTITLE: Setting JWT Decode Options in Rodauth\nDESCRIPTION: Example of using the new jwt_decode_opts method to specify additional options for JWT decoding, enabling JWT claim verification such as expiration validation.\nSOURCE: https://github.com/jeremyevans/rodauth/blob/master/doc/release_notes/1.6.0.txt#2025-04-16_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\njwt_decode_opts(:verify_expiration=>true)\n```\n\n----------------------------------------\n\nTITLE: New configuration methods for active_sessions feature in Rodauth\nDESCRIPTION: Lists the new configuration methods that have been added to the active_sessions feature, allowing control over data insertion, updates, and keys in the active_sessions_table.\nSOURCE: https://github.com/jeremyevans/rodauth/blob/master/doc/release_notes/2.12.0.txt#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n* active_sessions_insert_hash\n* active_sessions_key\n* active_sessions_update_hash\n* update_current_session?\n```\n\n----------------------------------------\n\nTITLE: Requiring Current Password in Ruby with Rodauth\nDESCRIPTION: This snippet shows how to require the current password on every access using Rodauth. It should be placed at an appropriate point in the routing block.\nSOURCE: https://github.com/jeremyevans/rodauth/blob/master/doc/release_notes/1.0.0.txt#2025-04-16_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\nrodauth.require_current_password\n```\n\n----------------------------------------\n\nTITLE: Checking Recovery Codes Availability in Rodauth\nDESCRIPTION: The new rodauth.recovery_codes_available? method checks whether an account can authenticate using recovery codes. It returns true when there are available recovery codes for the account to use.\nSOURCE: https://github.com/jeremyevans/rodauth/blob/master/doc/release_notes/2.24.0.txt#2025-04-16_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\nrodauth.recovery_codes_available?\n```\n\n----------------------------------------\n\nTITLE: SMS Confirmation Notice Configuration in Rodauth\nDESCRIPTION: Defines a new configuration method sms_needs_confirmation_notice_flash for setting the flash notice when setting up SMS authentication. By default, it uses the sms_needs_confirmation_error_flash value.\nSOURCE: https://github.com/jeremyevans/rodauth/blob/master/doc/release_notes/2.32.0.txt#2025-04-16_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\nsms_needs_confirmation_notice_flash\nsms_needs_confirmation_error_flash\n```\n\n----------------------------------------\n\nTITLE: Customizing JSON Response Body in Rodauth JWT Feature (Ruby)\nDESCRIPTION: Demonstrates how to use the json_response_body configuration method in the JWT feature to customize the format of the JSON response body. It wraps the original response in a hash with 'status' and 'detail' keys.\nSOURCE: https://github.com/jeremyevans/rodauth/blob/master/doc/release_notes/1.13.0.txt#2025-04-16_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\njson_response_body do |hash|\n  super('status'=>response.status, 'detail'=>hash)\nend\n```\n\n----------------------------------------\n\nTITLE: Using Response Configuration Methods in Rodauth\nDESCRIPTION: References the return_response method which can be used with the newly added *_response configuration methods to set a response body and halt processing in custom authentication workflows.\nSOURCE: https://github.com/jeremyevans/rodauth/blob/master/doc/release_notes/2.32.0.txt#2025-04-16_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\nreturn_response\n```\n\n----------------------------------------\n\nTITLE: Configuring JWT Refresh Error Responses in Rodauth (Ruby)\nDESCRIPTION: New configuration methods for customizing error responses when JWT refresh is attempted without a valid access token for a logged-in session.\nSOURCE: https://github.com/jeremyevans/rodauth/blob/master/doc/release_notes/2.3.0.txt#2025-04-16_snippet_4\n\nLANGUAGE: ruby\nCODE:\n```\njwt_refresh_without_access_token_message\njwt_refresh_without_access_token_status\n```\n\n----------------------------------------\n\nTITLE: Configuring Remember Cookie Options in Rodauth for Mixed HTTP/HTTPS Support\nDESCRIPTION: Code example showing how to configure the remember_cookie_options in Rodauth to allow the remember cookie to be transmitted over both HTTP and HTTPS connections, which is necessary after the security improvement that adds the Secure flag by default for SSL requests.\nSOURCE: https://github.com/jeremyevans/rodauth/blob/master/doc/release_notes/2.9.0.txt#2025-04-16_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nremember_cookie_options :secure=>false\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Password File in Ruby\nDESCRIPTION: This snippet demonstrates how to configure a custom file containing common passwords for the disallow_common_passwords feature. The file should contain passwords separated by newlines.\nSOURCE: https://github.com/jeremyevans/rodauth/blob/master/doc/release_notes/1.16.0.txt#2025-04-16_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\nmost_common_passwords_file '/path/to/file'\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Password Dictionary in Ruby\nDESCRIPTION: This code shows how to set a custom password dictionary object for the disallow_common_passwords feature. The object should respond to the include? method.\nSOURCE: https://github.com/jeremyevans/rodauth/blob/master/doc/release_notes/1.16.0.txt#2025-04-16_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\nmost_common_passwords some_password_dictionary_object\n```\n\n----------------------------------------\n\nTITLE: Configuring Default Rodauth Name in Ruby\nDESCRIPTION: This snippet demonstrates how to set up a default_rodauth_name method to simplify the use of multiple Rodauth configurations. It shows how to dynamically change the configuration based on the request path.\nSOURCE: https://github.com/jeremyevans/rodauth/blob/master/doc/release_notes/2.37.0.txt#2025-04-16_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nattr_reader :default_rodauth_name\n\nroute do |r|\n  r.on 'secondary' do\n    @default_rodauth_name = :secondary\n    r.rodauth # will use the :secondary configuration\n  end\n\n  r.rodauth # will use the default configuration\nend\n```\n\n----------------------------------------\n\nTITLE: Customizing NUL Byte Parameter Handling in Rodauth\nDESCRIPTION: Example configuration for handling parameters with ASCII NUL bytes in Rodauth. This code demonstrates how to override the default behavior (which ignores such parameters) to pass the values through unchanged for applications that require preserving NUL bytes.\nSOURCE: https://github.com/jeremyevans/rodauth/blob/master/doc/release_notes/2.22.0.txt#2025-04-16_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nnull_byte_parameter_value do |_, v|\n  v\nend\n```\n\n----------------------------------------\n\nTITLE: Updating Last Activity for Account Expiration in Ruby with Rodauth\nDESCRIPTION: This code updates the last activity timestamp for account expiration. It should be used when expire_account_on_last_activity? is set to true and placed appropriately in the routing block.\nSOURCE: https://github.com/jeremyevans/rodauth/blob/master/doc/release_notes/1.0.0.txt#2025-04-16_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\nrodauth.update_last_activity\n```\n\n----------------------------------------\n\nTITLE: Accessing New Refresh Token in Rodauth Hooks (Ruby)\nDESCRIPTION: Method to access the newly generated refresh token within the after_refresh_token hook in Rodauth.\nSOURCE: https://github.com/jeremyevans/rodauth/blob/master/doc/release_notes/2.3.0.txt#2025-04-16_snippet_5\n\nLANGUAGE: ruby\nCODE:\n```\njson_response[jwt_refresh_token_key]\n```\n\n----------------------------------------\n\nTITLE: JWT Session Check Order in Rodauth\nDESCRIPTION: Usage pattern for checking active sessions with expired JWTs during refresh operations. Shows the correct order of method calls when using active_sessions and jwt_refresh features together.\nSOURCE: https://github.com/jeremyevans/rodauth/blob/master/doc/release_notes/2.13.0.txt#2025-04-16_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\nrodauth.check_active_session\nr.rodauth\n```\n\n----------------------------------------\n\nTITLE: Precompiling Rodauth Templates Method in Ruby\nDESCRIPTION: A new method Roda.precompile_rodauth_templates that allows for precompiling the templates used by Rodauth. This improves memory usage with forking webservers and enables use with chroot applications.\nSOURCE: https://github.com/jeremyevans/rodauth/blob/master/doc/release_notes/1.9.0.txt#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nRoda.precompile_rodauth_templates\n```\n\n----------------------------------------\n\nTITLE: Database Authentication Functions for UUID Keys (PostgreSQL/Ruby)\nDESCRIPTION: Updates to create and drop database authentication functions in Rodauth to work correctly with UUID keys on PostgreSQL databases.\nSOURCE: https://github.com/jeremyevans/rodauth/blob/master/doc/release_notes/2.3.0.txt#2025-04-16_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\n{create,drop}_database_authentication_functions\n```\n\n----------------------------------------\n\nTITLE: Adding Email Last Sent Columns for Rate Limiting in Ruby\nDESCRIPTION: SQL commands to add email_last_sent columns to account_password_reset_keys, account_verification_keys, and account_lockouts tables for email rate limiting in Rodauth 2.0.\nSOURCE: https://github.com/jeremyevans/rodauth/blob/master/doc/release_notes/2.0.0.txt#2025-04-16_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nDB.add_column :account_password_reset_keys, :email_last_sent,\n  DateTime, :null=>false, :default=>Sequel::CURRENT_TIMESTAMP\nDB.add_column :account_verification_keys, :email_last_sent,\n  DateTime, :null=>false, :default=>Sequel::CURRENT_TIMESTAMP\nDB.add_column :account_lockouts, :email_last_sent, DateTime\n```\n\n----------------------------------------\n\nTITLE: Adding Email Last Sent Columns for Rate Limiting in Rodauth\nDESCRIPTION: SQL commands to add email_last_sent columns to various authentication tables to enable email rate limiting for account lockouts, password resets, and account verification. The columns track when emails were last sent to prevent excessive emails.\nSOURCE: https://github.com/jeremyevans/rodauth/blob/master/doc/release_notes/1.19.0.txt#2025-04-16_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nDB.add_column :account_lockouts, :email_last_sent, DateTime\nDB.add_column :account_password_reset_keys, :email_last_sent, DateTime,\n  :null=>false, :default=>Sequel::CURRENT_TIMESTAMP\nDB.add_column :account_verification_keys, :email_last_sent, DateTime,\n  :null=>false, :default=>Sequel::CURRENT_TIMESTAMP\n```\n\n----------------------------------------\n\nTITLE: Altering JWT Refresh Keys Table Schema in Ruby\nDESCRIPTION: SQL migration to update the account_jwt_refresh_keys table by setting the account_id column as NOT NULL and adding an index to improve query performance.\nSOURCE: https://github.com/jeremyevans/rodauth/blob/master/doc/release_notes/2.0.0.txt#2025-04-16_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\nDB.alter_table(:account_jwt_refresh_keys) do\n  set_column_not_null :account_id\n  add_index :account_id, :name=>:account_jwt_rk_account_id_idx\nend\n```\n\n----------------------------------------\n\nTITLE: Configuring JWT Session Hash in Rodauth\nDESCRIPTION: Example of using the new jwt_session_hash method to modify the hash before creating a JWT, specifically setting an expiration time claim.\nSOURCE: https://github.com/jeremyevans/rodauth/blob/master/doc/release_notes/1.6.0.txt#2025-04-16_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\njwt_session_hash do\n  super().merge(:exp=>Time.now.to_i + 120)\nend\n```\n\n----------------------------------------\n\nTITLE: Implementing JWT Refresh Route Hook in Rodauth (Ruby)\nDESCRIPTION: Correction to the before_jwt_refresh_route hook in Rodauth, ensuring it's called before the route is taken.\nSOURCE: https://github.com/jeremyevans/rodauth/blob/master/doc/release_notes/2.3.0.txt#2025-04-16_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\nbefore_jwt_refresh_route\n```\n\n----------------------------------------\n\nTITLE: Configuring Template Caching in Rodauth (Ruby)\nDESCRIPTION: Sets the cache_templates configuration to disable caching in development mode. This is useful when overriding Rodauth's templates with custom ones that are modified during development.\nSOURCE: https://github.com/jeremyevans/rodauth/blob/master/doc/release_notes/1.13.0.txt#2025-04-16_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\ncache_templates(ENV['RACK_ENV'] != 'development')\n```\n\n----------------------------------------\n\nTITLE: ASCII NUL Character Example\nDESCRIPTION: Example showing the problematic ASCII NUL character that is no longer allowed in passwords due to bcrypt truncation behavior.\nSOURCE: https://github.com/jeremyevans/rodauth/blob/master/doc/release_notes/1.2.0.txt#2025-04-16_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n\\0\n```\n\n----------------------------------------\n\nTITLE: Disabling Fixed Locals Support in Rodauth Configuration (Ruby)\nDESCRIPTION: Shows how to disable the use of fixed locals in Rodauth templates. This might be necessary if you are overriding Rodauth templates and modifying the local variables they accept.\nSOURCE: https://github.com/jeremyevans/rodauth/blob/master/doc/release_notes/2.38.0.txt#2025-04-16_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nuse_template_fixed_locals? false\n```\n\n----------------------------------------\n\nTITLE: Updating Rodauth Authentication Functions in MySQL\nDESCRIPTION: Commands to drop and recreate Rodauth database authentication functions in MySQL to handle accounts without passwords. This operation temporarily removes the function before recreating it with updated functionality.\nSOURCE: https://github.com/jeremyevans/rodauth/blob/master/doc/release_notes/1.19.0.txt#2025-04-16_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nRodauth.drop_database_authentication_functions(DB)\nRodauth.create_database_authentication_functions(DB)\n```\n\n----------------------------------------\n\nTITLE: Configuration Method Renames in Rodauth Features\nDESCRIPTION: Lists deprecated configuration method names and their new replacements across various Rodauth features including email_auth, lockout, reset_password, verify_account, and verify_login_change features.\nSOURCE: https://github.com/jeremyevans/rodauth/blob/master/doc/release_notes/1.20.0.txt#2025-04-16_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\n# email_auth feature\nno_matching_email_auth_key_message => no_matching_email_auth_key_error_flash\n\n# lockout feature\nno_matching_unlock_account_key_message => no_matching_unlock_account_key_error_flash\n\n# reset_password feature\nno_matching_reset_password_key_message => no_matching_reset_password_key_error_flash\n\n# verify_account feature\nattempt_to_create_unverified_account_notice_message => attempt_to_create_unverified_account_error_flash\nattempt_to_login_to_unverified_account_notice_message => attempt_to_login_to_unverified_account_error_flash\nno_matching_verify_account_key_message => no_matching_verify_account_key_error_flash\n\n# verify_login_change feature\nno_matching_verify_login_change_key_message => no_matching_verify_login_change_key_error_flash\n```\n\n----------------------------------------\n\nTITLE: Ruby Internal Request Feature Enhancement\nDESCRIPTION: Implementation of internal request subclass constant setting on the superclass for improved debugging and inspection capabilities.\nSOURCE: https://github.com/jeremyevans/rodauth/blob/master/doc/release_notes/2.19.0.txt#2025-04-16_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\nInternalRequest # constant set on superclass for internal request feature\n```\n\n----------------------------------------\n\nTITLE: Defining Rodauth Feature (New Method)\nDESCRIPTION: Demonstrates the new recommended way of defining a Rodauth feature. This method ensures that the related FeatureConfiguration instance is assigned to a constant, improving inspect output.\nSOURCE: https://github.com/jeremyevans/rodauth/blob/master/doc/release_notes/1.10.0.txt#2025-04-16_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\nmodule Rodauth\n  Feature.define(:foo, :Foo) do\n    # ...\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Defining Rodauth Feature (Deprecated)\nDESCRIPTION: Shows the old way of defining a Rodauth feature, which is now deprecated. This method doesn't assign the FeatureConfiguration instance to a constant.\nSOURCE: https://github.com/jeremyevans/rodauth/blob/master/doc/release_notes/1.10.0.txt#2025-04-16_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nmodule Rodauth\n  Foo = Feature.define(:foo) do\n    # ...\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Password Collection Sample - Plaintext\nDESCRIPTION: A large dataset of user passwords showing common patterns including dates (particularly years 1985-1992), names, dictionary words, keyboard patterns, and alphanumeric combinations. This appears to be used for password policy enforcement or security testing.\nSOURCE: https://github.com/jeremyevans/rodauth/blob/master/dict/top-10_000-passwords.txt#2025-04-16_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\n02021991\n02021980\n02021971\nzouzou\nyaya\nwxcvbn\nwolfen\nwives\nwingnut\nwhatwhat\nWelcome1\nwanking\nVQsaBLPzLa\ntruth\ntracer\ntrace\ntheforce\nterrell\nsylveste\nsusanna\n...\n```\n\n----------------------------------------\n\nTITLE: Password List in Plain Text\nDESCRIPTION: A list of common passwords frequently used by users, including numerical sequences, keyboard patterns, names, and common words. This type of list is typically used in security applications to prevent weak password usage or for penetration testing.\nSOURCE: https://github.com/jeremyevans/rodauth/blob/master/dict/top-10_000-passwords.txt#2025-04-16_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n123456\\npassword\\n12345678\\nqwerty\\n123456789\\n12345\\n1234\\n111111\\n1234567\\ndragon\\n123123\\nbaseball\\nabc123\\nfootball\\nmonkey\\nletmein\\n...\n```\n\n----------------------------------------\n\nTITLE: Configuring Deadline Values in Ruby with Rodauth\nDESCRIPTION: This snippet demonstrates how to configure deadline values for various features in Rodauth, such as account lockouts, remember me functionality, and password resets.\nSOURCE: https://github.com/jeremyevans/rodauth/blob/master/doc/release_notes/1.0.0.txt#2025-04-16_snippet_5\n\nLANGUAGE: ruby\nCODE:\n```\nset_deadline_values? true\naccount_lockouts_deadline_interval :days=>2\nremember_deadline_interval :days=>60\nreset_password_deadline_interval :days=>7\n```"
  }
]