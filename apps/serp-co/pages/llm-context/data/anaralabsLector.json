[
  {
    "owner": "anaralabs",
    "repo": "lector",
    "content": "TITLE: Complete PDF Form Component with Responsive UI and Field Formatting\nDESCRIPTION: A fully working form component with TypeScript typing, form handling, field name formatting, and a responsive side panel. It includes proper loading states, styling, and form data presentation with conditional rendering based on form state.\nSOURCE: https://github.com/anaralabs/lector/blob/main/packages/docs/content/docs/code/pdf-form.mdx#2025-04-20_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n\"use client\";\n\nimport {\n  AnnotationLayer,\n  CanvasLayer,\n  Page,\n  Pages,\n  Root,\n  TextLayer,\n} from \"@anaralabs/lector\";\nimport React, { useState, FormEvent } from \"react\";\nimport \"@/lib/setup\";\n\nconst fileUrl = \"/pdf/form.pdf\";\n\ntype FormValues = {\n  [key: string]: FormDataEntryValue;\n} | null;\n\nconst PdfFormLayer = () => {\n  const [formValues, setFormValues] = useState<FormValues>(null);\n\n  const handleSubmit = (e: FormEvent<HTMLFormElement>) => {\n    e.preventDefault();\n    const formData = new FormData(e.currentTarget);\n\n    const values = Object.fromEntries(\n      Array.from(formData.entries()).filter(([, value]) => {\n        return value !== \"\" && value != null;\n      })\n    );\n\n    setFormValues(Object.keys(values).length > 0 ? values : null);\n  };\n\n  const formatFieldName = (fieldName: string) => {\n    return fieldName\n      .replace(/\\[\\d+\\]/g, \"\")\n      .split(\"_\")\n      .map((word) => word.charAt(0).toUpperCase() + word.slice(1))\n      .join(\" \");\n  };\n\n  const renderFormValues = () => {\n    if (!formValues) return null;\n\n    return Object.entries(formValues).map(([key, value]) => (\n      <div key={key} className=\"mb-4 bg-white rounded-lg p-4 shadow-sm\">\n        <div className=\"text-sm text-gray-600 mb-1\">{formatFieldName(key)}</div>\n        <div className=\"text-base font-medium break-all\">{String(value)}</div>\n      </div>\n    ));\n  };\n\n  return (\n    <div className=\"flex w-full h-screen\">\n      <div className=\"flex-1\">\n        <form onSubmit={handleSubmit}>\n          <button\n            type=\"submit\"\n            className=\"mb-4 px-4 py-2 bg-blue-500 text-white rounded hover:bg-blue-600\"\n          >\n            Get form values\n          </button>\n\n          <Root\n            source={fileUrl}\n            className=\"bg-gray-100 border rounded-md overflow-hidden relative h-[700px]\"\n            loader={<div className=\"p-4\">Loading...</div>}\n          >\n            <Pages className=\"p-4 h-full\">\n              <Page>\n                <CanvasLayer />\n                <TextLayer />\n                <AnnotationLayer />\n              </Page>\n            </Pages>\n          </Root>\n        </form>\n      </div>\n\n      <div\n        className={`p-6 border-l bg-gray-50 transition-all duration-300 ${\n          !formValues || Object.keys(formValues).length === 0 ? \"w-64\" : \"w-1/3\"\n        }`}\n      >\n        <h2 className=\"text-lg font-semibold mb-4\">Filled Form Values</h2>\n        {formValues && Object.keys(formValues).length > 0 ? (\n          <div className=\"space-y-2 max-h-[calc(100vh-8rem)] overflow-y-auto pr-2\">\n            {renderFormValues()}\n          </div>\n        ) : (\n          <p className=\"text-gray-500\">No form values have been entered yet</p>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default PdfFormLayer;\n```\n\n----------------------------------------\n\nTITLE: Advanced PDF Search Implementation with Debouncing and Jump Navigation\nDESCRIPTION: Advanced implementation featuring debounced search, fuzzy matching, result grouping, and page jump navigation. Includes TypeScript interfaces and comprehensive error handling.\nSOURCE: https://github.com/anaralabs/lector/blob/main/packages/docs/content/docs/code/search.mdx#2025-04-20_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useDebounce } from \"use-debounce\";\nimport {\n  calculateHighlightRects,\n  SearchResult,\n  usePdf,\n  usePdfJump,\n  useSearch,\n} from \"@anaralabs/lector\";\nimport { useEffect, useState } from \"react\";\n\ninterface ResultItemProps {\n  result: SearchResult;\n}\n\nconst ResultItem = ({ result }: ResultItemProps) => {\n  const { jumpToHighlightRects } = usePdfJump();\n  const getPdfPageProxy = usePdf((state) => state.getPdfPageProxy);\n\n  const onClick = async () => {\n    const pageProxy = getPdfPageProxy(result.pageNumber);\n    const rects = await calculateHighlightRects(pageProxy, {\n      pageNumber: result.pageNumber,\n      text: result.text,\n      matchIndex: result.matchIndex,\n    });\n    jumpToHighlightRects(rects, \"pixels\");\n  };\n\n  return (\n    <div\n      className=\"flex py-2 hover:bg-gray-50 flex-col cursor-pointer\"\n      onClick={onClick}\n    >\n      <div className=\"flex-1 min-w-0\">\n        <p className=\"text-sm text-gray-900\">{result.text}</p>\n      </div>\n      <div className=\"flex items-center gap-4 text-sm text-gray-500\">\n        <span className=\"ml-auto\">Page {result.pageNumber}</span>\n      </div>\n    </div>\n  );\n};\n\ninterface ResultGroupProps {\n  title: string;\n  results: SearchResult[];\n  displayCount?: number;\n}\n\nconst ResultGroup = ({ title, results, displayCount }: ResultGroupProps) => {\n  if (!results.length) return null;\n\n  const displayResults = displayCount\n    ? results.slice(0, displayCount)\n    : results;\n\n  return (\n    <div className=\"space-y-2\">\n      <h3 className=\"text-sm font-medium text-gray-700\">{title}</h3>\n      <div className=\"divide-y divide-gray-100\">\n        {displayResults.map((result) => (\n          <ResultItem\n            key={`${result.pageNumber}-${result.matchIndex}`}\n            result={result}\n          />\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport function SearchUI() {\n  const [searchText, setSearchText] = useState(\"\");\n  const [debouncedSearchText] = useDebounce(searchText, 500);\n  const [limit, setLimit] = useState(5);\n  const { searchResults: results, search } = useSearch();\n\n  useEffect(() => {\n    setLimit(5);\n    search(debouncedSearchText, { limit: 5 });\n  }, [debouncedSearchText]);\n\n  const handleLoadMore = async () => {\n    const newLimit = limit + 5;\n    await search(debouncedSearchText, { limit: newLimit });\n    setLimit(newLimit);\n  };\n\n  return (\n    <div className=\"flex flex-col w-80 h-full\">\n      <div className=\"px-4 py-4 border-b border-gray-200 bg-white\">\n        <input\n          type=\"text\"\n          value={searchText}\n          onChange={(e) => setSearchText(e.target.value)}\n          placeholder=\"Search in document...\"\n          className=\"w-full px-4 py-2 border rounded-lg focus:ring-2 focus:ring-blue-500\"\n        />\n      </div>\n      <div className=\"flex-1 overflow-y-auto px-4\">\n        <div className=\"py-4\">\n          <SearchResults\n            searchText={searchText}\n            results={results}\n            onLoadMore={handleLoadMore}\n          />\n        </div>\n      </div>\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic PDF Form Viewer with React and Lector\nDESCRIPTION: This snippet demonstrates how to create a basic PDF form viewer with form submission handling and side panel to display form values. It uses the Lector components to render the PDF and implements a form submission handler to capture form data.\nSOURCE: https://github.com/anaralabs/lector/blob/main/packages/docs/content/docs/code/pdf-form.mdx#2025-04-20_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n\"use client\";\n\nimport {\n  Root,\n  Pages,\n  Page,\n  CanvasLayer,\n  TextLayer,\n  AnnotationLayer,\n} from \"@anaralabs/lector\";\nimport { FormEvent } from \"react\";\n\ntype FormValues = {\n  [key: string]: FormDataEntryValue;\n} | null;\n\nexport default function PdfForm() {\n  const [formValues, setFormValues] = useState<FormValues>(null);\n\n  const handleSubmit = (e: FormEvent<HTMLFormElement>) => {\n    e.preventDefault();\n    const formData = new FormData(e.currentTarget);\n    const values = Object.fromEntries(formData.entries());\n    setFormValues(values);\n  };\n\n  return (\n    <div className=\"flex\">\n      <form onSubmit={handleSubmit}>\n        <button type=\"submit\">Get form values</button>\n        <Root source=\"/my-form.pdf\">\n          <Pages>\n            <Page>\n              <CanvasLayer />\n              <TextLayer />\n              <AnnotationLayer />\n            </Page>\n          </Pages>\n        </Root>\n      </form>\n      <div className=\"border-l\">\n        <h2>Form Values</h2>\n        {formValues && <pre>{JSON.stringify(formValues, null, 2)}</pre>}\n      </div>\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic PDF Viewer Component with React and @anaralabs/lector\nDESCRIPTION: Creates a basic PDF viewer component with canvas rendering and text selection capabilities. The component includes dark mode support through CSS classes and handles basic PDF rendering with a fixed container height. Uses client-side rendering as indicated by the 'use client' directive.\nSOURCE: https://github.com/anaralabs/lector/blob/main/packages/docs/content/docs/code/basic.mdx#2025-04-20_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n\"use client\";\n\nimport { CanvasLayer, Page, Pages, Root, TextLayer } from \"@anaralabs/lector\";\nimport React from \"react\";\nimport \"@/lib/setup\";\n\nconst Basic = () => {\n  return (\n    <Root\n      source={fileUrl}\n      className='w-full h-[500px] border overflow-hidden rounded-lg'\n      loader={<div className='p-4'>Loading...</div>}>\n      <Pages className='dark:invert-[94%] dark:hue-rotate-180 dark:brightness-[80%] dark:contrast-[228%]'>\n        <Page>\n          <CanvasLayer />\n          <TextLayer />\n        </Page>\n      </Pages>\n    </Root>\n  );\n};\n\nexport default Basic;\n```\n\n----------------------------------------\n\nTITLE: Initializing Basic PDF Viewer with Highlight Layer in React\nDESCRIPTION: This snippet shows the basic setup for a PDF viewer with a highlight layer using @anaralabs/lector components. It includes the Root, Pages, Page, CanvasLayer, TextLayer, and HighlightLayer components.\nSOURCE: https://github.com/anaralabs/lector/blob/main/packages/docs/content/docs/code/highlight.mdx#2025-04-20_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n\"use client\";\n\nimport {\n  Root,\n  Pages,\n  Page,\n  CanvasLayer,\n  TextLayer,\n  HighlightLayer,\n} from \"@anaralabs/lector\";\n\nexport default function MyPdfViewer() {\n  return (\n    <Root source=\"/my-document.pdf\">\n      <Pages>\n        <Page>\n          <CanvasLayer />\n          <TextLayer />\n          <HighlightLayer className=\"bg-yellow-200/70\" />\n        </Page>\n      </Pages>\n    </Root>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing PDF Viewer with Zoom Controls in React TSX\nDESCRIPTION: Creates a PDF viewer component with zoom controls using @anaralabs/lector. Features include configurable zoom limits (min/max), interactive zoom buttons, current zoom display, and text layer support. The component is structured with a header containing zoom controls and the main PDF viewing area.\nSOURCE: https://github.com/anaralabs/lector/blob/main/packages/docs/content/docs/code/zoom-control.mdx#2025-04-20_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n\"use client\";\n\nimport {\n  CanvasLayer,\n  CurrentZoom,\n  Page,\n  Pages,\n  Root,\n  TextLayer,\n  ZoomIn,\n  ZoomOut,\n} from \"@anaralabs/lector\";\n\nconst ViewerZoomControl = () => {\n  return (\n    <Root\n      source=\"/pdf/document.pdf\"\n      className=\"bg-gray-100 border rounded-md overflow-hidden relative h-[500px] flex flex-col justify-stretch\"\n      loader={<div className=\"p-4\">Loading...</div>}\n      zoomOptions={{\n        minZoom: 0.5, // 50% minimum zoom\n        maxZoom: 10, // 1000% maximum zoom\n      }}\n    >\n      <div className=\"bg-gray-100 border-b p-1 flex items-center justify-center text-sm text-gray-600 gap-2\">\n        Zoom\n        <ZoomOut className=\"px-3 py-1 -mr-2 text-gray-900\">-</ZoomOut>\n        <CurrentZoom className=\"bg-white rounded-full px-3 py-1 border text-center w-16\" />\n        <ZoomIn className=\"px-3 py-1 -ml-2 text-gray-900\">+</ZoomIn>\n      </div>\n      <Pages className=\"p-4 h-full\">\n        <Page>\n          <CanvasLayer />\n          <TextLayer />\n        </Page>\n      </Pages>\n    </Root>\n  );\n};\n\nexport default ViewerZoomControl;\n```\n\n----------------------------------------\n\nTITLE: Implementing PDF Viewer with Thumbnails in React TSX\nDESCRIPTION: Creates a PDF viewer component with thumbnail navigation, zoom controls, and responsive layout. The component uses @anaralabs/lector for PDF rendering and includes features like toggleable thumbnail panel, page navigation, zoom controls, and canvas/text layers for PDF display.\nSOURCE: https://github.com/anaralabs/lector/blob/main/packages/docs/content/docs/code/thumbnails.mdx#2025-04-20_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n\"use client\";\n\nimport {\n  CanvasLayer,\n  CurrentPage,\n  CurrentZoom,\n  Page,\n  Pages,\n  Root,\n  TextLayer,\n  Thumbnail,\n  Thumbnails,\n  ZoomIn,\n  ZoomOut,\n} from \"@anaralabs/lector\";\nimport { cn } from \"fumadocs-ui/components/api\";\nimport { useState } from \"react\";\n\nconst WithThumbnails = () => {\n  const [showThumbnails, setShowThumbnails] = useState(true);\n\n  return (\n    <Root\n      source=\"/pdf/document.pdf\"\n      className=\"bg-gray-100 border rounded-md overflow-hidden relative h-[700px] flex flex-col justify-stretch\"\n      loader={<div className=\"p-4\">Loading...</div>}\n    >\n      {/* Control Bar */}\n      <div className=\"bg-gray-100 border-b p-1 flex items-center justify-center text-sm text-gray-600 gap-2\">\n        <button\n          onClick={() => setShowThumbnails((show) => !show)}\n          className=\"px-2 hover:bg-gray-300 hover:text-gray-900 py-1 rounded-full\"\n        >\n          {showThumbnails ? \"Hide\" : \"Show\"} Thumbnails\n        </button>\n        <span className=\"flex-grow\" />\n        Page\n        <CurrentPage className=\"bg-white rounded-full px-3 py-1 border text-center\" />\n        Zoom\n        <ZoomOut className=\"px-3 py-1 -mr-2 text-gray-900\">-</ZoomOut>\n        <CurrentZoom className=\"bg-white rounded-full px-3 py-1 border text-center w-16\" />\n        <ZoomIn className=\"px-3 py-1 -ml-2 text-gray-900\">+</ZoomIn>\n        <span className=\"flex-grow\" />\n      </div>\n\n      {/* Main Content */}\n      <div\n        className={cn(\n          \"basis-0 grow min-h-0 relative grid\",\n          \"transition-all duration-300\",\n          showThumbnails ? \"grid-cols-[24rem,1fr]\" : \"grid-cols-[0,1fr]\"\n        )}\n      >\n        {/* Thumbnails Panel */}\n        <div className=\"overflow-y-auto overflow-x-hidden\">\n          <div className=\"w-96 overflow-x-hidden\">\n            <Thumbnails className=\"flex flex-col gap-4 items-center py-4\">\n              <Thumbnail className=\"transition-all w-48 hover:shadow-lg hover:outline hover:outline-gray-300\" />\n            </Thumbnails>\n          </div>\n        </div>\n\n        {/* PDF Viewer */}\n        <Pages className=\"p-4 h-full\">\n          <Page>\n            <CanvasLayer />\n            <TextLayer />\n          </Page>\n        </Pages>\n      </div>\n    </Root>\n  );\n};\n\nexport default WithThumbnails;\n```\n\n----------------------------------------\n\nTITLE: Basic PDF Viewer with Search Implementation in TSX\nDESCRIPTION: Basic implementation of a PDF viewer with search functionality including result highlighting and page navigation. Uses @anaralabs/lector components for PDF rendering and search capabilities.\nSOURCE: https://github.com/anaralabs/lector/blob/main/packages/docs/content/docs/code/search.mdx#2025-04-20_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n\"use client\";\n\nimport {\n  Root,\n  Pages,\n  Page,\n  CanvasLayer,\n  TextLayer,\n  HighlightLayer,\n  Search,\n} from \"@anaralabs/lector\";\nimport { useState } from \"react\";\n\nconst ResultItem = ({ result }) => (\n  <div className=\"flex py-2 hover:bg-gray-50 cursor-pointer\">\n    <div className=\"flex-1 min-w-0\">\n      <p className=\"text-sm text-gray-900\">{result.text}</p>\n      <p className=\"text-sm text-gray-500\">Page {result.pageNumber}</p>\n    </div>\n  </div>\n);\n\nconst SearchUI = () => {\n  const [searchText, setSearchText] = useState(\"\");\n\n  return (\n    <div className=\"flex flex-col w-64 h-full\">\n      <div className=\"px-4 py-4 border-b border-gray-200 bg-white\">\n        <input\n          type=\"text\"\n          value={searchText}\n          onChange={(e) => setSearchText(e.target.value)}\n          placeholder=\"Search in document...\"\n          className=\"w-full px-4 py-2 border rounded-lg\"\n        />\n      </div>\n      <div className=\"flex-1 overflow-y-auto px-4\">\n        {/* Results will appear here */}\n      </div>\n    </div>\n  );\n};\n\nexport default function CustomSearch() {\n  return (\n    <Root source=\"/pdf/large.pdf\" className=\"flex bg-gray-50 h-[500px]\">\n      <Search>\n        <SearchUI />\n      </Search>\n      <Pages className=\"p-4 w-full\">\n        <Page>\n          <CanvasLayer />\n          <TextLayer />\n          <HighlightLayer className=\"bg-yellow-200/70\" />\n        </Page>\n      </Pages>\n    </Root>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Navigation Controls - React/TypeScript\nDESCRIPTION: Creates custom navigation controls with page jumping functionality, direct page input, and accessibility features. Implements previous/next buttons, page number input with validation, and keyboard navigation support.\nSOURCE: https://github.com/anaralabs/lector/blob/main/packages/docs/content/docs/code/page-navigation.mdx#2025-04-20_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { usePdf, usePdfJump } from \"@anaralabs/lector\";\nimport { useEffect, useState } from \"react\";\nimport { Button } from \"./button\";\n\nconst PageNavigationButtons = () => {\n  const pages = usePdf((state) => state.pdfDocumentProxy?.numPages);\n  const currentPage = usePdf((state) => state.currentPage);\n  const [pageNumber, setPageNumber] = useState<string | number>(currentPage);\n  const { jumpToPage } = usePdfJump();\n\n  const handlePreviousPage = () => {\n    if (currentPage > 1) {\n      jumpToPage(currentPage - 1, { behavior: \"auto\" });\n    }\n  };\n\n  const handleNextPage = () => {\n    if (currentPage < pages) {\n      jumpToPage(currentPage + 1, { behavior: \"auto\" });\n    }\n  };\n\n  useEffect(() => {\n    setPageNumber(currentPage);\n  }, [currentPage]);\n\n  return (\n    <div className=\"absolute bottom-8 left-1/2 transform -translate-x-1/2 flex items-center gap-3 bg-white/90 backdrop-blur-sm rounded-full shadow-lg px-4 py-2.5 border border-gray-200\">\n      <Button\n        onClick={handlePreviousPage}\n        disabled={currentPage <= 1}\n        className=\"rounded-full disabled:opacity-40\"\n        aria-label=\"Previous page\"\n      >\n        <svg\n          xmlns=\"http://www.w3.org/2000/svg\"\n          width=\"18\"\n          height=\"18\"\n          viewBox=\"0 0 24 24\"\n        >\n          <path d=\"m15 18-6-6 6-6\" />\n        </svg>\n      </Button>\n\n      <div className=\"flex items-center gap-2\">\n        <input\n          type=\"number\"\n          value={pageNumber}\n          onChange={(e) => setPageNumber(e.target.value)}\n          onBlur={(e) => {\n            const value = Number(e.target.value);\n            if (value >= 1 && value <= pages && currentPage !== value) {\n              jumpToPage(value, { behavior: \"auto\" });\n            } else {\n              setPageNumber(currentPage);\n            }\n          }}\n          onKeyDown={(e) => {\n            if (e.key === \"Enter\") {\n              e.currentTarget.blur();\n            }\n          }}\n          className=\"w-12 h-7 text-center bg-gray-50 border rounded-md text-sm focus:ring-2\"\n        />\n        <span className=\"text-sm text-gray-500 font-medium\">\n          / {pages || 1}\n        </span>\n      </div>\n\n      <Button\n        onClick={handleNextPage}\n        disabled={currentPage >= pages}\n        className=\"rounded-full disabled:opacity-40\"\n        aria-label=\"Next page\"\n      >\n        <svg\n          xmlns=\"http://www.w3.org/2000/svg\"\n          width=\"18\"\n          height=\"18\"\n          viewBox=\"0 0 24 24\"\n        >\n          <path d=\"m9 18 6-6-6-6\" />\n        </svg>\n      </Button>\n    </div>\n  );\n};\n\nexport default PageNavigationButtons;\n```\n\n----------------------------------------\n\nTITLE: Implementing Interactive Highlights with usePdfJump Hook in React\nDESCRIPTION: This code demonstrates how to create interactive highlights using the usePdfJump hook. It includes a sidebar with clickable examples that, when clicked, jump to the corresponding highlighted area in the PDF.\nSOURCE: https://github.com/anaralabs/lector/blob/main/packages/docs/content/docs/code/highlight.mdx#2025-04-20_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n\"use client\";\n\nconst HighlightLayerContent = () => {\n  const { jumpToHighlightRects } = usePdfJump();\n  const [selectedExample, setSelectedExample] = useState<string | null>(null);\n\n  const handleExampleClick = async (example: (typeof examples)[0]) => {\n    setSelectedExample(example.text);\n    jumpToHighlightRects(example.highlights, \"pixels\");\n  };\n\n  return (\n    <div className=\"flex\">\n      <div className=\"flex-1\">\n        <Pages className=\"p-4\">\n          <Page>\n            <CanvasLayer />\n            <TextLayer />\n            <HighlightLayer className=\"bg-yellow-200/70\" />\n          </Page>\n        </Pages>\n      </div>\n      <div className=\"w-80 p-4\">\n        {examples.map((example) => (\n          <div\n            key={example.id}\n            onClick={() => handleExampleClick(example)}\n            className={`p-3 rounded ${\n              selectedExample === example.text\n                ? \"bg-yellow-100\"\n                : \"hover:bg-gray-50\"\n            }`}\n          >\n            <h3>{example.title}</h3>\n            <p>{example.text}</p>\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing a Highlight Layer for PDF Selection\nDESCRIPTION: Creates a component that handles text selection and highlighting in a PDF. It uses the useSelectionDimensions and usePdf hooks to track selected text and apply highlights.\nSOURCE: https://github.com/anaralabs/lector/blob/main/packages/docs/content/docs/code/select.mdx#2025-04-20_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nconst HighlightLayerContent = () => {\n  const selectionDimensions = useSelectionDimensions();\n  const setHighlights = usePdf((state) => state.setHighlight);\n\n  const handleHighlight = () => {\n    const dimension = selectionDimensions.getDimension();\n    if (dimension && !dimension.isCollapsed) {\n      setHighlights(dimension.highlights);\n    }\n  };\n\n  return (\n    <Pages className=\"p-4 w-full\">\n      <Page>\n        {selectionDimensions && <CustomSelect onHighlight={handleHighlight} />}\n        <CanvasLayer />\n        <TextLayer />\n        <HighlightLayer className=\"bg-yellow-200/70\" />\n      </Page>\n    </Pages>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Handling Form Submissions with FormData and Filtering Empty Values\nDESCRIPTION: This snippet shows how to handle form submissions with FormData and filter out empty values before setting state. It prevents storing empty form fields and provides cleaner data for display.\nSOURCE: https://github.com/anaralabs/lector/blob/main/packages/docs/content/docs/code/pdf-form.mdx#2025-04-20_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nconst handleSubmit = (e: FormEvent<HTMLFormElement>) => {\n  e.preventDefault();\n  const formData = new FormData(e.currentTarget);\n\n  // Filter out empty values\n  const values = Object.fromEntries(\n    Array.from(formData.entries()).filter(([, value]) => {\n      return value !== \"\" && value != null;\n    })\n  );\n\n  setFormValues(Object.keys(values).length > 0 ? values : null);\n};\n```\n\n----------------------------------------\n\nTITLE: Initializing Basic PDF Viewer with Navigation - React/TypeScript\nDESCRIPTION: Sets up the basic PDF viewer component structure with custom navigation controls. Uses @anaralabs/lector components to create a PDF viewer with navigation buttons integration.\nSOURCE: https://github.com/anaralabs/lector/blob/main/packages/docs/content/docs/code/page-navigation.mdx#2025-04-20_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n\"use client\";\n\nimport { Root, Pages, Page, CanvasLayer, TextLayer } from \"@anaralabs/lector\";\nimport PageNavigationButtons from \"./ui/page-navigation-buttons\";\n\nconst PageNavigation = () => {\n  return (\n    <Root\n      source=\"/pdf/document.pdf\"\n      className=\"flex bg-gray-50 h-[500px]\"\n      loader={<div className=\"p-4\">Loading...</div>}\n    >\n      <div className=\"relative flex-1\">\n        <Pages className=\"p-4\">\n          <Page>\n            <CanvasLayer />\n            <TextLayer />\n          </Page>\n        </Pages>\n        <PageNavigationButtons />\n      </div>\n    </Root>\n  );\n};\n\nexport default PageNavigation;\n```\n\n----------------------------------------\n\nTITLE: Implementing Dark Mode with CSS Filters in Lector PDF Viewer (TSX)\nDESCRIPTION: This snippet demonstrates how to implement dark mode for PDF viewing using CSS filters applied to Lector components. It uses Tailwind CSS dark mode classes to invert colors and adjust hue, brightness, and contrast for better readability in dark mode.\nSOURCE: https://github.com/anaralabs/lector/blob/main/packages/docs/content/docs/dark-mode.mdx#2025-04-20_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Root, Pages, Page, CanvasLayer } from \"@anaralabs/lector\";\n\nfunction PDFViewer() {\n  return (\n    <Root fileUrl='/sample.pdf'>\n      <Pages className='dark:invert-[94%] dark:hue-rotate-180 dark:brightness-[80%] dark:contrast-[228%]'>\n        <Page>\n          <CanvasLayer />\n        </Page>\n      </Pages>\n    </Root>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Basic PDF Viewer Implementation with Lector\nDESCRIPTION: A simple React component example that creates a basic PDF viewer using Lector components including Root, Pages, Page, CanvasLayer, and TextLayer to render a PDF document.\nSOURCE: https://github.com/anaralabs/lector/blob/main/README.md#2025-04-20_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { CanvasLayer, Page, Pages, Root, TextLayer } from \"@anaralabs/lector\";\nimport \"pdfjs-dist/web/pdf_viewer.css\";\n\nexport default function PDFViewer() {\n  return (\n    <Root\n      source=\"/sample.pdf\"\n      className=\"w-full h-[500px] border overflow-hidden rounded-lg\"\n      loader={<div className=\"p-4\">Loading...</div>}\n    >\n      <Pages className=\"p-4\">\n        <Page>\n          <CanvasLayer />\n          <TextLayer />\n        </Page>\n      </Pages>\n    </Root>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Setting up a Basic PDF Viewer with Selection in React\nDESCRIPTION: Creates a PDF viewer component with text selection and highlighting capabilities. This code sets up the basic structure using the @anaralabs/lector library, loading a PDF document from a specified source.\nSOURCE: https://github.com/anaralabs/lector/blob/main/packages/docs/content/docs/code/select.mdx#2025-04-20_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n\"use client\";\n\nimport {\n  Root,\n  Pages,\n  Page,\n  CanvasLayer,\n  TextLayer,\n  HighlightLayer,\n  useSelectionDimensions,\n  usePdf,\n} from \"@anaralabs/lector\";\n\nconst PdfHighlightSelect = () => (\n  <Root\n    source=\"/pdf/document.pdf\"\n    className=\"flex bg-gray-50 h-[500px]\"\n    loader={<div className=\"p-4\">Loading...</div>}\n  >\n    <HighlightLayerContent />\n  </Root>\n);\n\nexport default PdfHighlightSelect;\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Selection Tooltip for PDF Highlights\nDESCRIPTION: Implements a custom tooltip that appears when text is selected in a PDF. The component provides a highlight button that triggers the highlighting action when clicked.\nSOURCE: https://github.com/anaralabs/lector/blob/main/packages/docs/content/docs/code/select.mdx#2025-04-20_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { SelectionTooltip } from \"@anaralabs/lector\";\n\nexport const CustomSelect = ({ onHighlight }: { onHighlight: () => void }) => {\n  return (\n    <SelectionTooltip>\n      <button\n        className=\"bg-white shadow-lg rounded-md px-3 py-1 hover:bg-yellow-200/70\"\n        onClick={onHighlight}\n      >\n        Highlight\n      </button>\n    </SelectionTooltip>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic PDF Viewer with Lector in React\nDESCRIPTION: This code snippet shows how to create a minimal PDF viewer using Lector's core components. It includes the Root container, Pages container, and individual Page with CanvasLayer and TextLayer.\nSOURCE: https://github.com/anaralabs/lector/blob/main/packages/docs/content/docs/basic-usage.mdx#2025-04-20_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Root, Pages, Page, CanvasLayer, TextLayer } from \"@anaralabs/lector\";\n\nfunction PDFViewer() {\n  return (\n    <Root source='/sample.pdf' className='w-full h-[600px] border rounded-lg overflow-hidden'>\n      <Pages className='p-4'>\n        <Page>\n          <CanvasLayer />\n          <TextLayer />\n        </Page>\n      </Pages>\n    </Root>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Page Layers in Lector PDF Viewer\nDESCRIPTION: This snippet demonstrates how to add multiple layers to a Page component in Lector. It includes CanvasLayer for rendering PDF content, TextLayer for text selection, AnnotationLayer for annotations and links, and a custom HighlightLayer.\nSOURCE: https://github.com/anaralabs/lector/blob/main/packages/docs/content/docs/basic-usage.mdx#2025-04-20_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\n<Page>\n  <CanvasLayer /> {/* Renders the PDF content */}\n  <TextLayer /> {/* Enables text selection */}\n  <AnnotationLayer /> {/* Renders annotations and links */}\n  <HighlightLayer /> {/* Custom highlight overlay */}\n</Page>\n```\n\n----------------------------------------\n\nTITLE: Implementing Page Navigation in Lector PDF Viewer\nDESCRIPTION: This snippet demonstrates how to add page navigation features to a Lector PDF viewer. It uses the CurrentPage and TotalPages components to display the current page number and total page count.\nSOURCE: https://github.com/anaralabs/lector/blob/main/packages/docs/content/docs/basic-usage.mdx#2025-04-20_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nimport { CurrentPage, TotalPages } from \"@anaralabs/lector\";\n\nfunction PDFViewerWithNavigation() {\n  return (\n    <Root source='/sample.pdf'>\n      <div className='flex items-center gap-2 p-2'>\n        <CurrentPage /> of <TotalPages />\n      </div>\n      <Pages>\n        <Page>\n          <CanvasLayer />\n          <TextLayer />\n        </Page>\n      </Pages>\n    </Root>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Zoom Controls to Lector PDF Viewer in React\nDESCRIPTION: This code snippet shows how to incorporate zoom controls into a Lector PDF viewer. It imports and uses ZoomIn, ZoomOut, and CurrentZoom components, demonstrating their placement within the Root component.\nSOURCE: https://github.com/anaralabs/lector/blob/main/packages/docs/content/docs/basic-usage.mdx#2025-04-20_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nimport { ZoomIn, ZoomOut, CurrentZoom } from \"@anaralabs/lector\";\n\nfunction PDFViewerWithZoom() {\n  return (\n    <Root source='/sample.pdf'>\n      <div className='flex gap-2 p-2'>\n        <ZoomOut />\n        <CurrentZoom />\n        <ZoomIn />\n      </div>\n      <Pages>\n        <Page>\n          <CanvasLayer />\n          <TextLayer />\n        </Page>\n      </Pages>\n    </Root>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Zoom Options in PDF Viewer\nDESCRIPTION: Example configuration for customizing zoom limits in the PDF viewer. Shows how to set minimum and maximum zoom levels through the zoomOptions prop on the Root component. The example demonstrates setting extreme zoom ranges from 10% to 2000%.\nSOURCE: https://github.com/anaralabs/lector/blob/main/packages/docs/content/docs/code/zoom-control.mdx#2025-04-20_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n<Root\n  zoomOptions={{\n    minZoom: 0.1,  // Allow 10% minimum zoom\n    maxZoom: 20,   // Allow 2000% maximum zoom\n  }}\n>\n```\n\n----------------------------------------\n\nTITLE: Configuring Pages Component in Lector PDF Viewer\nDESCRIPTION: This code snippet shows how to use the Pages component in Lector, which handles page layout and virtualization. It demonstrates adding custom styling to the container.\nSOURCE: https://github.com/anaralabs/lector/blob/main/packages/docs/content/docs/basic-usage.mdx#2025-04-20_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n<Pages\n  className='...' // Container styling\n>\n  {/* Page component */}\n</Pages>\n```\n\n----------------------------------------\n\nTITLE: Configuring Root Component in Lector PDF Viewer\nDESCRIPTION: This snippet illustrates the various props available for the Root component in Lector. It shows how to set the PDF source, add custom styling, and handle loading and error events.\nSOURCE: https://github.com/anaralabs/lector/blob/main/packages/docs/content/docs/basic-usage.mdx#2025-04-20_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n<Root\n  source='/path/to/pdf' // URL or path to PDF file\n  className='...' // Container styling\n  loader={<Loading />} // Custom loading component\n  onLoad={handleLoad} // Called when PDF is loaded\n  onError={handleError} // Called on load error\n>\n  {/* Child components */}\n</Root>\n```\n\n----------------------------------------\n\nTITLE: Customizing HighlightLayer Styling in React\nDESCRIPTION: These examples demonstrate how to apply custom styles to the HighlightLayer component using className props. It shows different color and opacity combinations.\nSOURCE: https://github.com/anaralabs/lector/blob/main/packages/docs/content/docs/code/highlight.mdx#2025-04-20_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n// Yellow highlight with 70% opacity\n<HighlightLayer className=\"bg-yellow-200/70\" />\n\n// Custom color\n<HighlightLayer className=\"bg-blue-300/50\" />\n\n// Multiple styles\n<HighlightLayer className=\"bg-purple-200/60 rounded-sm\" />\n```\n\n----------------------------------------\n\nTITLE: Adding Loading State to PDF Viewer in React\nDESCRIPTION: This snippet shows how to add a loading state to the PDF viewer for improved user experience. It uses the loader prop of the Root component to display a loading message.\nSOURCE: https://github.com/anaralabs/lector/blob/main/packages/docs/content/docs/code/highlight.mdx#2025-04-20_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\n<Root\n  source={fileUrl}\n  className=\"bg-gray-50\"\n  loader={<div className=\"p-4\">Loading PDF...</div>}\n>\n  <HighlightLayerContent />\n</Root>\n```\n\n----------------------------------------\n\nTITLE: Configuring PDF.js Worker for App Router in React\nDESCRIPTION: Code for setting up the PDF.js worker in a React component using the App Router approach. This configures the worker source and implements a basic PDF viewer component.\nSOURCE: https://github.com/anaralabs/lector/blob/main/packages/docs/content/docs/installation.mdx#2025-04-20_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { GlobalWorkerOptions } from \"pdfjs-dist\";\nimport \"pdfjs-dist/web/pdf_viewer.css\";\n\n// Set up the worker\nGlobalWorkerOptions.workerSrc = new URL(\n  \"pdfjs-dist/build/pdf.worker.mjs\",\n  import.meta.url\n).toString();\n\nexport function PDFViewer() {\n  return (\n    <Root source='/sample.pdf'>\n      <Pages>\n        <Page>\n          <CanvasLayer />\n        </Page>\n      </Pages>\n    </Root>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring PDF.js Worker for Pages Directory in React\nDESCRIPTION: Implementation for setting up the PDF.js worker in a React component using the Pages Directory approach. This imports the worker file directly and sets up a basic PDF viewer component.\nSOURCE: https://github.com/anaralabs/lector/blob/main/packages/docs/content/docs/installation.mdx#2025-04-20_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Root, Pages, Page, CanvasLayer } from \"@anaralabs/lector\";\nimport \"pdfjs-dist/build/pdf.worker.min.mjs\";\nimport \"pdfjs-dist/web/pdf_viewer.css\";\n\nexport function PDFViewer() {\n  return (\n    <Root source='/sample.pdf'>\n      <Pages>\n        <Page>\n          <CanvasLayer />\n        </Page>\n      </Pages>\n    </Root>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic PDF Viewer Component with Lector\nDESCRIPTION: Example of a minimal PDF viewer implementation using Lector components to verify proper installation. The component renders a PDF from the '/sample.pdf' source.\nSOURCE: https://github.com/anaralabs/lector/blob/main/packages/docs/content/docs/installation.mdx#2025-04-20_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Root, Pages, Page, CanvasLayer } from \"@anaralabs/lector\";\n\nfunction BasicPDFViewer() {\n  return (\n    <Root source='/sample.pdf'>\n      <Pages>\n        <Page>\n          <CanvasLayer />\n        </Page>\n      </Pages>\n    </Root>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Setting up PDF.js Worker for Lector in TypeScript\nDESCRIPTION: This snippet demonstrates how to set up the PDF.js worker, which is a prerequisite for using Lector. It imports necessary modules and sets the worker source URL.\nSOURCE: https://github.com/anaralabs/lector/blob/main/packages/docs/content/docs/basic-usage.mdx#2025-04-20_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { GlobalWorkerOptions } from \"pdfjs-dist\";\nimport \"pdfjs-dist/web/pdf_viewer.css\";\n\n// Set up the worker\nGlobalWorkerOptions.workerSrc = new URL(\n  \"pdfjs-dist/build/pdf.worker.mjs\",\n  import.meta.url\n).toString();\n```\n\n----------------------------------------\n\nTITLE: Defining Highlight Format in TypeScript\nDESCRIPTION: This snippet shows the format for defining highlights using pixel coordinates. It includes properties for pageNumber, left, top, width, and height.\nSOURCE: https://github.com/anaralabs/lector/blob/main/packages/docs/content/docs/code/highlight.mdx#2025-04-20_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nconst highlight = {\n  pageNumber: 1,\n  left: 63.069,\n  top: 438.736,\n  width: 465.831,\n  height: 10.888,\n};\n```\n\n----------------------------------------\n\nTITLE: Defining HighlightRect Type in TypeScript\nDESCRIPTION: This code defines the TypeScript type for highlight rectangles. It includes properties for pageNumber, left, top, width, and height, all of which are numbers.\nSOURCE: https://github.com/anaralabs/lector/blob/main/packages/docs/content/docs/code/highlight.mdx#2025-04-20_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\ntype HighlightRect = {\n  pageNumber: number;\n  left: number;\n  top: number;\n  width: number;\n  height: number;\n};\n```\n\n----------------------------------------\n\nTITLE: Importing Required CSS Styles for Lector\nDESCRIPTION: Code snippet showing how to import the required PDF viewer CSS styles from pdfjs-dist, which should be included in a main CSS file or component.\nSOURCE: https://github.com/anaralabs/lector/blob/main/packages/docs/content/docs/installation.mdx#2025-04-20_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n// Import the default PDF viewer styles\nimport \"pdfjs-dist/web/pdf_viewer.css\";\n```\n\n----------------------------------------\n\nTITLE: Installing Lector Package with Package Managers\nDESCRIPTION: Commands for installing @anaralabs/lector and its dependency pdfjs-dist using npm, yarn, or pnpm package managers.\nSOURCE: https://github.com/anaralabs/lector/blob/main/README.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @anaralabs/lector pdfjs-dist\n\n# or with yarn\nyarn add @anaralabs/lector pdfjs-dist\n\n# or with pnpm\npnpm add @anaralabs/lector pdfjs-dist\n```\n\n----------------------------------------\n\nTITLE: Installing Lector PDF Viewer with Package Managers\nDESCRIPTION: Commands for installing the @anaralabs/lector package and its peer dependency pdfjs-dist using various package managers (npm, yarn, pnpm, and bun).\nSOURCE: https://github.com/anaralabs/lector/blob/main/packages/docs/content/docs/installation.mdx#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# Using npm\nnpm install @anaralabs/lector pdfjs-dist\n\n# Using yarn\nyarn add @anaralabs/lector pdfjs-dist\n\n# Using pnpm\npnpm add @anaralabs/lector pdfjs-dist\n\n# Using bun\nbun add @anaralabs/lector pdfjs-dist\n```\n\n----------------------------------------\n\nTITLE: Local Development Setup for Lector Package\nDESCRIPTION: Commands for setting up local development of the Lector package using Yalc to publish and watch for changes in the package source code.\nSOURCE: https://github.com/anaralabs/lector/blob/main/README.md#2025-04-20_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n# navigate to lector package folder and install dependencies\npnpm i\n# when you first start development, make sure you publish the package locally\nyalc publish\n# and run the project in development mode to start a watcher that rebuilds the project and pushes the changes locally on save\npnpm dev\n```\n\n----------------------------------------\n\nTITLE: Integrating Local Lector Package in Consumer Projects\nDESCRIPTION: Commands for adding the locally published Lector package to a consumer project using Yalc, enabling testing with any package manager.\nSOURCE: https://github.com/anaralabs/lector/blob/main/README.md#2025-04-20_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n# add local package to your package.json of the consumer project using yalc\nyalc add @anaralabs/lector\n# or if you don't want to add the yalc package in your package.json\nyalc link @anaralabs/lector\n```\n\n----------------------------------------\n\nTITLE: Installing Yalc for Local Development\nDESCRIPTION: Command to install Yalc globally for local package development and testing.\nSOURCE: https://github.com/anaralabs/lector/blob/main/README.md#2025-04-20_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npnpm i yalc -g\n```\n\n----------------------------------------\n\nTITLE: Running Development Server Commands for Next.js Documentation Project\nDESCRIPTION: Commands to start the development server for a Next.js documentation project. Includes options for using npm, pnpm, or yarn package managers.\nSOURCE: https://github.com/anaralabs/lector/blob/main/packages/docs/README.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm run dev\n# or\npnpm dev\n# or\nyarn dev\n```\n\n----------------------------------------\n\nTITLE: Starting Development Server for Lector Basic Example\nDESCRIPTION: This command starts the development server for the Lector basic example. After running this, the example can be viewed in a web browser at http://localhost:5173.\nSOURCE: https://github.com/anaralabs/lector/blob/main/examples/basic/README.md#2025-04-20_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npnpm dev\n```\n\n----------------------------------------\n\nTITLE: Cloning Lector Repository and Navigating to Basic Example\nDESCRIPTION: These commands clone the Lector repository and navigate to the basic example directory. This is the first step in setting up the Lector basic example.\nSOURCE: https://github.com/anaralabs/lector/blob/main/examples/basic/README.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/anaralabs/lector.git\ncd lector/examples/basic\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for Lector Basic Example\nDESCRIPTION: This command installs the necessary dependencies for the Lector basic example using pnpm. It should be run after cloning the repository and navigating to the correct directory.\nSOURCE: https://github.com/anaralabs/lector/blob/main/examples/basic/README.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npnpm install\n```"
  }
]