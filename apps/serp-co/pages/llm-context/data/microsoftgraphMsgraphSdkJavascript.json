[
  {
    "owner": "microsoftgraph",
    "repo": "msgraph-sdk-javascript",
    "content": "TITLE: Getting User Details with Microsoft Graph\nDESCRIPTION: Example of making an authenticated GET request to the Microsoft Graph API to retrieve the current user's details using async/await pattern with error handling.\nSOURCE: https://github.com/microsoftgraph/msgraph-sdk-javascript/blob/dev/README.md#2025-04-18_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\ntry {\n\tlet userDetails = await client.api(\"/me\").get();\n\tconsole.log(userDetails);\n} catch (error) {\n\tthrow error;\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving User Information with GET in Microsoft Graph JavaScript SDK\nDESCRIPTION: This snippet demonstrates how to retrieve user information using the GET method in the Microsoft Graph JavaScript SDK. It makes a request to the /me endpoint to fetch the current user's details and handles potential errors.\nSOURCE: https://github.com/microsoftgraph/msgraph-sdk-javascript/blob/dev/docs/Actions.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntry {\n\tlet res = await client.api(\"/me\").get();\n\tconsole.log(res);\n} catch (error) {\n\tthrow error;\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Microsoft Graph API with async/await in TypeScript\nDESCRIPTION: Demonstrates how to get user details from Microsoft Graph API using the async/await pattern. The example shows proper error handling with try/catch blocks.\nSOURCE: https://github.com/microsoftgraph/msgraph-sdk-javascript/blob/dev/docs/CallingPattern.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntry {\n\tlet res = await client.api(\"/me\").get();\n\tconsole.log(res);\n} catch (error) {\n\tthrow error;\n}\n```\n\n----------------------------------------\n\nTITLE: Uploading Files to OneDrive with PUTSTREAM in Microsoft Graph JavaScript SDK\nDESCRIPTION: This snippet demonstrates how to upload a file to OneDrive using the PUTSTREAM method with Node.js streams in the Microsoft Graph JavaScript SDK. It reads a local file and streams it to the specified location in the user's OneDrive.\nSOURCE: https://github.com/microsoftgraph/msgraph-sdk-javascript/blob/dev/docs/Actions.md#2025-04-18_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nlet fs = require(\"fs\");\ntry {\n\tlet stream = fs.createReadStream(\"<PATH_TO_LOCAL_FILE>\"); // Eg: \"./test.jpg\"\n\tlet res = await client.api(`/me/drive/root/children/<FILE_NAME>/content`); // Eg: /me/drive/root/children/test.jpg/content\n\tconsole.log(res);\n} catch (error) {\n\tthrow error;\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving User Profile and Sending Email via Microsoft Graph API in TypeScript\nDESCRIPTION: This snippet demonstrates how to use the Microsoft Graph JavaScript SDK to retrieve the current user's profile information and send an email. It shows the usage of the Graph client's API method to make HTTP requests to Microsoft Graph endpoints using TypeScript interfaces for type safety.\nSOURCE: https://github.com/microsoftgraph/msgraph-sdk-javascript/blob/dev/design/kiota-e2e.md#2025-04-18_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nconst me: User = await getMe();\nawait sendMail();\n\nasync function getMe(): Promise<User | undefined> {\n\treturn await graphClient.api(\"/me\").get<User>();\n}\n\nasync function sendMail(): Promise<void> {\n\tconst message: Message = {\n\t\tsubject: \"Hello Graph TypeScript SDK!\",\n\t\tbody: {\n\t\t\tcontentType: BodyType.Html,\n\t\t\tcontent: \"<bold>Hello Graph TypeScript SDK!</bold>\",\n\t\t},\n\t\ttoRecipients: [\n\t\t\t{\n\t\t\t\temailAddress: {\n\t\t\t\t\taddress: \"admin@m365x263716.onmicrosoft.com\",\n\t\t\t\t},\n\t\t\t},\n\t\t],\n\t};\n\n\treturn await client.api(\"/me/sendMail\").post({\n\t\tmessage: message,\n\t});\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom AuthenticationProvider for Microsoft Graph in TypeScript\nDESCRIPTION: Creates a custom authentication provider class that implements the AuthenticationProvider interface from Microsoft Graph client. The implementation requires defining a getAccessToken method that will be called before every request to retrieve or refresh access tokens.\nSOURCE: https://github.com/microsoftgraph/msgraph-sdk-javascript/blob/dev/docs/CustomAuthenticationProvider.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// MyAuthenticationProvider.ts\nimport { AuthenticationProvider } from \"@microsoft/microsoft-graph-client\";\n\nclass MyAuthenticationProvider implements AuthenticationProvider {\n\t/**\n\t * This method will get called before every request to the msgraph server\n\t * This should return a Promise that resolves to an accessToken (in case of success) or rejects with error (in case of failure)\n\t * Basically this method will contain the implementation for getting and refreshing accessTokens\n\t */\n\tpublic async getAccessToken(): Promise<string> {}\n}\n```\n\n----------------------------------------\n\nTITLE: Making Microsoft Graph API Calls with Service Library\nDESCRIPTION: Demonstrates different methods to interact with Microsoft Graph API using the fluent API and the .api() method, including retrieving user information and sending emails.\nSOURCE: https://github.com/microsoftgraph/msgraph-sdk-javascript/blob/dev/design/kiota-e2e.md#2025-04-18_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst me: User | undefined = await getMe();\nconst meRaw: User | undefined = await getMeRaw();\nawait sendMail();\nawait sendMailRaw();\n\n// The types returned by the fluent API should be the same as the .api() area. It should also be the same (or at least very similar) as the current @microsoft/microsoft-graph-types to offer seamless migration.\nasync function getMe(): Promise<User | undefined> {\n\treturn await graphClient.me.get();\n}\n\n// Allowing raw calls (using the .api() method instead of the full fluent API) is important for migration purposes and cases we don't know the resource beforehands (thinking Graph Explorer, mgt-get, etc.)\nasync function getMeRaw(): Promise<User | undefined> {\n\treturn await graphClient.api(\"/me\").get<User>();\n}\n\n// Sending an email via the fluent API\nasync function sendMail(): Promise<void> {\n\tconst message: Message = {\n\t\tsubject: \"Hello Graph TypeScript SDK!\",\n\t\tbody: {\n\t\t\tcontentType: BodyType.Html,\n\t\t\tcontent: \"<bold>Hello Graph TypeScript SDK!</bold>\",\n\t\t},\n\t\ttoRecipients: [\n\t\t\t{\n\t\t\t\temailAddress: {\n\t\t\t\t\taddress: \"admin@m365x263716.onmicrosoft.com\",\n\t\t\t\t},\n\t\t\t},\n\t\t],\n\t};\n\n\treturn await client.me.sendMail.post(message);\n}\n\n// Sending the email via the .api() method\nasync function sendMailRaw(): Promise<void> {\n\tconst message: Message = {\n\t\tsubject: \"Hello Graph TypeScript SDK!\",\n\t\tbody: {\n\t\t\tcontentType: BodyType.Html,\n\t\t\tcontent: \"<bold>Hello Graph TypeScript SDK!</bold>\",\n\t\t},\n\t\ttoRecipients: [\n\t\t\t{\n\t\t\t\temailAddress: {\n\t\t\t\t\taddress: \"admin@m365x263716.onmicrosoft.com\",\n\t\t\t\t},\n\t\t\t},\n\t\t],\n\t};\n\n\treturn await client.api(\"/me/sendMail\").post({\n\t\tmessage: message,\n\t});\n}\n```\n\n----------------------------------------\n\nTITLE: Sending Email with Microsoft Graph\nDESCRIPTION: Example of sending an email using the Microsoft Graph API. This code constructs an email object with subject, recipients, and HTML body content, then posts it to the sendMail endpoint.\nSOURCE: https://github.com/microsoftgraph/msgraph-sdk-javascript/blob/dev/README.md#2025-04-18_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n// Construct email object\nconst mail = {\n\tsubject: \"Microsoft Graph JavaScript Sample\",\n\ttoRecipients: [\n\t\t{\n\t\t\temailAddress: {\n\t\t\t\taddress: \"example@example.com\",\n\t\t\t},\n\t\t},\n\t],\n\tbody: {\n\t\tcontent: \"<h1>MicrosoftGraph JavaScript Sample</h1>Check out https://github.com/microsoftgraph/msgraph-sdk-javascript\",\n\t\tcontentType: \"html\",\n\t},\n};\ntry {\n\tlet response = await client.api(\"/me/sendMail\").post({ message: mail });\n\tconsole.log(response);\n} catch (error) {\n\tthrow error;\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Client with Default Middleware Chain in TypeScript\nDESCRIPTION: This snippet demonstrates how to create a Client instance using the default middleware chain by passing an AuthenticationProvider in ClientOptions. It uses a custom YourAuthProviderClass that implements the AuthenticationProvider interface.\nSOURCE: https://github.com/microsoftgraph/msgraph-sdk-javascript/blob/dev/docs/CreatingClientInstance.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nlet clientOptions: ClientOptions = {\n\tauthProvider: new YourAuthProviderClass(),\n};\nconst client = Client.initWithMiddleware(clientOptions);\n```\n\n----------------------------------------\n\nTITLE: Downloading Files with GETSTREAM in Microsoft Graph JavaScript SDK\nDESCRIPTION: This snippet shows how to download files from OneDrive using the GETSTREAM method with Node.js streams. It retrieves a file from the user's OneDrive and streams it to the local filesystem, with proper error handling.\nSOURCE: https://github.com/microsoftgraph/msgraph-sdk-javascript/blob/dev/docs/Actions.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst fs = require(\"fs\");\nclient\n\t.api(\"/me/drive/root/children/<FILE_NAME>/content\")\n\t.getStream() //Eg: test.pdf\n\t.then((stream) => {\n\t\tlet writeStream = fs.createWriteStream(`../<DOWNLOAD_FILE_NAME>`); // Eg: test.pdf\n\t\tstream.pipe(writeStream).on(\"error\", (err) => {\n\t\t\tthrow err;\n\t\t});\n\t\twriteStream.on(\"finish\", () => {\n\t\t\tconsole.log(\"Downloaded\");\n\t\t});\n\t\twriteStream.on(\"error\", (err) => {\n\t\t\tthrow err;\n\t\t});\n\t})\n\t.catch((error) => {\n\t\tthrow error;\n\t});\n```\n\n----------------------------------------\n\nTITLE: Updating Contact Information with PATCH in Microsoft Graph JavaScript SDK\nDESCRIPTION: This snippet shows how to update a contact's information using the PATCH method in the Microsoft Graph JavaScript SDK. It updates the birthday field for a specific contact identified by their ID, with proper error handling.\nSOURCE: https://github.com/microsoftgraph/msgraph-sdk-javascript/blob/dev/docs/Actions.md#2025-04-18_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nlet contactId = \"<CONTACT_ID_TO_UPDATE>\";\nlet contactInfo = {\n\tbirthday: \"1991-07-22\",\n};\ntry {\n\tlet res = await client.api(`/me/contacts/${contactId}`).patch(contactInfo);\n\tconsole.log(res);\n} catch (error) {\n\tconsole.error(error);\n}\n```\n\n----------------------------------------\n\nTITLE: Sending Email with POST in Microsoft Graph JavaScript SDK\nDESCRIPTION: This snippet demonstrates how to send an email using the POST method with the Microsoft Graph JavaScript SDK. It creates a mail object with subject, recipients, and HTML body content, then sends it through the /me/sendMail endpoint.\nSOURCE: https://github.com/microsoftgraph/msgraph-sdk-javascript/blob/dev/docs/Actions.md#2025-04-18_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst mail = {\n\tsubject: \"Microsoft Graph JavaScript Sample\",\n\ttoRecipients: [\n\t\t{\n\t\t\temailAddress: {\n\t\t\t\taddress: \"example@example.com\",\n\t\t\t},\n\t\t},\n\t],\n\tbody: {\n\t\tcontent: \"<h1>MicrosoftGraph JavaScript </h1>Check out https://github.com/microsoftgraph/msgraph-sdk-javascript\",\n\t\tcontentType: \"html\",\n\t},\n};\ntry {\n\tlet res = await client.api(\"/me/sendMail\").post({ message: mail });\n\tconsole.log(res);\n} catch (error) {\n\tconsole.error(error);\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Upload Session in TypeScript\nDESCRIPTION: This snippet demonstrates how to create an upload session using the LargeFileUploadTask class. It requires a client instance, request URL, and payload.\nSOURCE: https://github.com/microsoftgraph/msgraph-sdk-javascript/blob/dev/docs/tasks/LargeFileUploadTask.md#2025-04-18_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst uploadSession = LargeFileUploadTask.createUploadSession(client, \"REQUEST_URL\", payload);\n```\n\n----------------------------------------\n\nTITLE: Initializing Microsoft Graph Client with Custom AuthenticationProvider in TypeScript\nDESCRIPTION: Demonstrates how to initialize the Microsoft Graph client with a custom authentication provider. The code creates a ClientOptions object with the custom authentication provider and passes it to the Client.initWithMiddleware method.\nSOURCE: https://github.com/microsoftgraph/msgraph-sdk-javascript/blob/dev/docs/CustomAuthenticationProvider.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { MyAuthenticationProvider } from \"./MyAuthenticationProvider\";\n\nlet clientOptions: ClientOptions = {\n\tauthProvider: new MyAuthenticationProvider(),\n};\nconst client = Client.initWithMiddleware(clientOptions);\n```\n\n----------------------------------------\n\nTITLE: Resuming Broken Upload in TypeScript\nDESCRIPTION: This snippet shows how to resume a broken upload using the uploadTask object. It's a simple method call to continue the upload process.\nSOURCE: https://github.com/microsoftgraph/msgraph-sdk-javascript/blob/dev/docs/tasks/LargeFileUploadTask.md#2025-04-18_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nuploadTask.resume();\n```\n\n----------------------------------------\n\nTITLE: Setting up Authentication with Microsoft Graph Service Library\nDESCRIPTION: Shows how to initialize a Graph client with device code authentication flow, including setting up credentials, defining permission scopes, and initializing the client.\nSOURCE: https://github.com/microsoftgraph/msgraph-sdk-javascript/blob/dev/design/kiota-e2e.md#2025-04-18_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst deviceCodeCredentials = new DeviceCodeCredential({\n\ttenantId: \"b61f9af1-d6cf-4cc0-a6f6-befb38bc00ed\",\n\tclientId: \"bde251a6-0ef9-42a8-a40b-9ad9bb594b2c\",\n});\n\nconst scopes = [\"User.Read\", \"Mail.Send\"];\n\nconst graphClient = Client.init({\n\tauthenticationTokenProvider: new AzureIdentityAuthenticationProvider(deviceCodeCredentials, scopes),\n});\n```\n\n----------------------------------------\n\nTITLE: Fetching Raw Response using Async/Await in TypeScript\nDESCRIPTION: Example showing how to get a raw response using async/await syntax by setting responseType to ResponseType.RAW. This retrieves the user's display name as a raw Response object.\nSOURCE: https://github.com/microsoftgraph/msgraph-sdk-javascript/blob/dev/docs/GettingRawResponse.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst rawResponse = await client\n\t.api(\"/me\")\n\t.select(\"displayName\")\n\t.responseType(ResponseType.RAW)\n\t.get();\nconsole.log(rawResponse);\n```\n\n----------------------------------------\n\nTITLE: Creating TokenCredentialAuthentication provider in TypeScript\nDESCRIPTION: Example of how to initialize a Microsoft Graph client in TypeScript using TokenCredentialAuthenticationProvider with a ClientSecretCredential. This code shows how to create the token credential, configure authentication options, and initialize the client.\nSOURCE: https://github.com/microsoftgraph/msgraph-sdk-javascript/blob/dev/docs/TokenCredentialAuthenticationProvider.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// Import the TokenCredential class that you wish to use. This example uses a Client SecretCredential\n\nimport { ClientSecretCredential } from \"@azure/identity\";\nimport { Client } from \"@microsoft/microsoft-graph-client\";\nimport { TokenCredentialAuthenticationProvider, TokenCredentialAuthenticationProviderOptions } from \"@microsoft/microsoft-graph-client/authProviders/azureTokenCredentials\";\n\n// Create an instance of the TokenCredential class that is imported\nconst tokenCredential = new ClientSecretCredential(\"your_tenantId\", \"your_clientId\", \"your_clientSecret\");\n\n// Set your scopes and options for TokenCredential.getToken (Check the ` interface GetTokenOptions` in (TokenCredential Implementation)[https://github.com/Azure/azure-sdk-for-js/blob/main/sdk/core/core-auth/src/tokenCredential.ts])\n\nconst options: TokenCredentialAuthenticationProviderOptions = { scopes: [scopes], getTokenOptions };\n\n// Create an instance of the TokenCredentialAuthenticationProvider by passing the tokenCredential instance and options to the constructor\nconst authProvider = new TokenCredentialAuthenticationProvider(tokenCredential, options);\nconst client = Client.initWithMiddleware({\n\tdebugLogging: true,\n\tauthProvider: authProvider,\n});\nconst res = await client.api(\"/users/\").get();\n```\n\n----------------------------------------\n\nTITLE: Cancelling LargeFileUpload Task in TypeScript\nDESCRIPTION: This snippet shows how to cancel an ongoing large file upload task. It sends a DELETE request to the upload session URL.\nSOURCE: https://github.com/microsoftgraph/msgraph-sdk-javascript/blob/dev/docs/tasks/LargeFileUploadTask.md#2025-04-18_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nconst cancelResponse = await uploadTask.cancel();\n```\n\n----------------------------------------\n\nTITLE: Initializing Microsoft Graph Client with AbortController in TypeScript\nDESCRIPTION: This snippet demonstrates how to create an AbortController instance, set a timeout for cancellation, and initialize the Microsoft Graph SDK client with the AbortController signal. It uses the @microsoft/microsoft-graph-client package and the abort-controller npm package.\nSOURCE: https://github.com/microsoftgraph/msgraph-sdk-javascript/blob/dev/docs/CancellingAHTTPRequest.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Client,FetchOptions } from \"@microsoft/microsoft-graph-client\";\nimport { AbortController } from \"abort-controller\"; // <- import when using the abort-controller npm package.\n\nconst controller = new AbortController();\n\nconst timeout = setTimeout(() => {\n\tcontroller.abort();\n}, 150);\n\nconst fetchOptions: FetchOptions = {\n\tsignal: controller.signal;\n}\n\nconst client = Client.initWithMiddleware({\n  fetchOptions, // Pass the FetchOptions value where the AbortController.signal is set\n  authProvider,\n  ...\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a Middleware Chain for Microsoft Graph SDK in TypeScript\nDESCRIPTION: This code demonstrates how to create a middleware chain by linking custom and built-in middleware components. It initializes an authentication provider, creates instances of middleware handlers, and links them together in sequence using the setNext method.\nSOURCE: https://github.com/microsoftgraph/msgraph-sdk-javascript/blob/dev/docs/CustomMiddlewareChain.md#2025-04-18_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ImplicitMSALAuthenticationProvider } from \"@microsoft/microsoft-graph-client\";\nimport { MyLoggingHandler } from \"./MyLoggingHandler\";\nimport { MyHttpMessageHandler } from \"./MyHttpMessageHandler\";\n\nlet authProvider = new ImplicitMSALAuthenticationProvider(\"<CLIENT_ID>\", [\"user.read\"]);\nlet authenticationHandler = new AuthenticationHandler(authProvider);\nlet myLoggingHandler = new MyLoggingHandler();\nlet myHttpMessageHandler = new MyHttpMessageHandler();\n\n// Note: myHttpMessageHandler is the last in the chain so there is no need of setting next middleware for it.\nauthenticationHandler.setNext(myLoggingHandler);\nmyLoggingHandler.setNext(myHttpMessageHandler);\n```\n\n----------------------------------------\n\nTITLE: Using $SELECT parameter with Microsoft Graph JavaScript SDK in TypeScript\nDESCRIPTION: Demonstrates three equivalent ways to use the .select() method to specify which properties to return in the API response. You can chain multiple select() calls, pass multiple arguments to one call, or provide an array of properties.\nSOURCE: https://github.com/microsoftgraph/msgraph-sdk-javascript/blob/dev/docs/QueryParameters.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntry {\n\t// Below three statements are same\n\tlet res1 = await client\n\t\t.api(\"/me/people\")\n\t\t.select(\"displayName\")\n\t\t.select(\"department\")\n\t\t.get();\n\tlet res2 = await client\n\t\t.api(\"/me/people\")\n\t\t.select(\"displayName\", \"department\")\n\t\t.get();\n\tlet res3 = await client\n\t\t.api(\"/me/people\")\n\t\t.select([\"displayName\", \"department\"])\n\t\t.get();\n} catch (error) {\n\tthrow error;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Logging Middleware for Microsoft Graph in TypeScript\nDESCRIPTION: This code implements a custom logging middleware by implementing the Middleware interface. It logs the URL being requested and then passes control to the next middleware in the chain. The middleware has methods for executing the current handler and setting the next handler in the chain.\nSOURCE: https://github.com/microsoftgraph/msgraph-sdk-javascript/blob/dev/docs/CustomMiddlewareChain.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// MyLoggingHandler.ts\nimport { Middleware } from \"@microsoft/microsoft-graph-client\";\nimport { Context } from \"@microsoft/microsoft-graph-client\";\n\nexport class MyLoggingHandler implements Middleware {\n\tprivate nextMiddleware: Middleware;\n\n\tpublic async execute(context: Context): Promise<void> {\n\t\ttry {\n\t\t\tlet url: string;\n\t\t\tif (typeof context.request === \"string\") {\n\t\t\t\turl = context.request;\n\t\t\t} else {\n\t\t\t\turl = context.request.url;\n\t\t\t}\n\t\t\tconsole.log(url);\n\t\t\treturn await this.nextMiddleware.execute(context);\n\t\t} catch (error) {\n\t\t\tthrow error;\n\t\t}\n\t}\n\n\tpublic setNext(next: Middleware): void {\n\t\tthis.nextMiddleware = next;\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Payload for OneDrive Upload Session in TypeScript\nDESCRIPTION: This snippet shows how to create a payload object for initializing an OneDrive upload session. It specifies the conflict behavior and file name.\nSOURCE: https://github.com/microsoftgraph/msgraph-sdk-javascript/blob/dev/docs/tasks/LargeFileUploadTask.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst payload = {\n\titem: {\n\t\t\"@microsoft.graph.conflictBehavior\": \"rename\",\n\t\tname: \"<FILE_NAME>\",\n\t},\n};\n```\n\n----------------------------------------\n\nTITLE: Using $FILTER parameter with Microsoft Graph JavaScript SDK in TypeScript\nDESCRIPTION: Demonstrates how to use the .filter() method to filter collection results based on specified criteria. The method takes a filter string and calling it multiple times will override previous filter strings.\nSOURCE: https://github.com/microsoftgraph/msgraph-sdk-javascript/blob/dev/docs/QueryParameters.md#2025-04-18_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\ntry {\n\tlet res = await client\n\t\t.api(\"/users\")\n\t\t.filter(\"startswith(displayName, 'dicaprio')\")\n\t\t.get();\n\tconsole.log(res);\n} catch (error) {\n\tthrow error;\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Microsoft Graph Client via npm\nDESCRIPTION: Instructions for installing the Microsoft Graph JavaScript client library using npm package manager and importing it into a module along with a fetch polyfill.\nSOURCE: https://github.com/microsoftgraph/msgraph-sdk-javascript/blob/dev/README.md#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @microsoft/microsoft-graph-client\n```\n\n----------------------------------------\n\nTITLE: Initializing Microsoft Graph Client with Custom Middleware in TypeScript\nDESCRIPTION: This code shows how to initialize the Microsoft Graph client with a custom middleware chain. It creates a ClientOptions object with the first middleware in the chain and initializes the client using the initWithMiddleware method.\nSOURCE: https://github.com/microsoftgraph/msgraph-sdk-javascript/blob/dev/docs/CustomMiddlewareChain.md#2025-04-18_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nlet clientOptions: ClientOptions = {\n\tmiddleware: authenticationHandler,\n};\nconst client = Client.initWithMiddleware(clientOptions);\n```\n\n----------------------------------------\n\nTITLE: Fetching Raw Response using Callback in TypeScript\nDESCRIPTION: Example showing how to get a raw response using the callback pattern by setting responseType to ResponseType.RAW. This retrieves the user's display name as a raw Response object.\nSOURCE: https://github.com/microsoftgraph/msgraph-sdk-javascript/blob/dev/docs/GettingRawResponse.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nclient\n\t.api(\"/me\")\n\t.select(\"displayName\")\n\t.responseType(ResponseType.RAW)\n\t.get((error, rawResponse) => {\n\t\tconsole.log(rawResponse);\n\t});\n```\n\n----------------------------------------\n\nTITLE: Initializing Microsoft Graph Client with AuthCodeMSALBrowserAuthenticationProvider (TypeScript)\nDESCRIPTION: TypeScript code showing how to initialize a Microsoft Graph Client with the AuthCodeMSALBrowserAuthenticationProvider. It demonstrates importing necessary modules, setting authentication provider options, and creating a client instance.\nSOURCE: https://github.com/microsoftgraph/msgraph-sdk-javascript/blob/dev/docs/AuthCodeMSALBrowserAuthenticationProvider.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { PublicClientApplication, InteractionType, AccountInfo } from \"@azure/msal-browser\";\n\nimport { AuthCodeMSALBrowserAuthenticationProvider, AuthCodeMSALBrowserAuthenticationProviderOptions } from \"@microsoft/microsoft-graph-client/authProviders/authCodeMsalBrowser\";\nimport { Client } from \"@microsoft/microsoft-graph-client\";\n\nconst options: AuthCodeMSALBrowserAuthenticationProviderOptions = {\n    account: account, // the AccountInfo instance to acquire the token for.\n    interactionType: InteractionType.Popup, // msal-browser InteractionType\n    scopes: [\"user.read\", \"mail.send\"] // example of the scopes to be passed\n};\n\n// Pass the PublicClientApplication instance from step 2 to create AuthCodeMSALBrowserAuthenticationProvider instance\nconst authProvider = new AuthCodeMSALBrowserAuthenticationProvider(publicClientApplication, options);\n\n\n// Initialize the Graph client\nconst graphClient = Client.initWithMiddleware({\n    authProvider\n});\n```\n\n----------------------------------------\n\nTITLE: Creating and Uploading with OneDriveLargeFileUploadTask in TypeScript\nDESCRIPTION: This snippet demonstrates how to use OneDriveLargeFileUploadTask for easier access to OneDrive API uploads. It includes setting up options, creating a file object, and initiating the upload process.\nSOURCE: https://github.com/microsoftgraph/msgraph-sdk-javascript/blob/dev/docs/tasks/LargeFileUploadTask.md#2025-04-18_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nconst uploadEventHandlers: UploadEventHandlers = {\n\tprogress,\n\textraCallBackParam: true,\n};\n\nconst options: OneDriveLargeFileUploadOptions = {\n\tpath: \"/Documents\",\n\tfileName,\n\trangeSize: 1024 * 1024,\n\tuploadEventHandlers,\n    uploadSessionURL: \"optional_custom_uploadSessionURL\" //if undefined defaults to \"/me/drive/root:/{file-path}:/createUploadSession\"\n};\nconst readStream = fs.createReadStream(`./fileName`);\nconst fileObject = new StreamUpload(readStream, fileName, totalsize);\nor\nconst uploadContent = fs.readFileSync(`./fileName`);\nconst fileObject = new FileUpload(uploadContent, fileName, totalsize);\n\nconst uploadTask = await OneDriveLargeFileUploadTask.createTaskWithFileObject(client, fileObject, options);\nconst uploadResult:UploadResult = await uploadTask.upload();\n```\n\n----------------------------------------\n\nTITLE: Setting Response Type in Microsoft Graph SDK\nDESCRIPTION: Shows how to set custom response types using .responseType() method. Used for handling specific response formats like BLOB.\nSOURCE: https://github.com/microsoftgraph/msgraph-sdk-javascript/blob/dev/docs/OtherAPIs.md#2025-04-18_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\ntry {\n\tlet res = await client\n\t\t.api(`/me/drive/root/children/${fileName}/content`)\n\t\t.responseType(MicrosoftGraph.ResponseType.BLOB)\n\t\t.get();\n\tconsole.log(res);\n} catch (error) {\n\tthrow error;\n}\n```\n\n----------------------------------------\n\nTITLE: Serial Batching: Update and Download Profile Photo\nDESCRIPTION: Demonstrates how to create a serial batch request to upload a profile photo and then download it. Uses request dependencies to ensure the download happens after the upload completes.\nSOURCE: https://github.com/microsoftgraph/msgraph-sdk-javascript/blob/dev/docs/content/Batching.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst serialBatching = async function(elem) {\n\ttry {\n\t\tlet file = elem.files[0];\n\t\tlet uploadProfilePhotoRequest = new Request(\"/me/photo/$value\", {\n\t\t\tmethod: \"PUT\",\n\t\t\theaders: {\n\t\t\t\t\"Content-type\": file.type,\n\t\t\t},\n\t\t\tbody: file,\n\t\t});\n\n\t\tlet uploadProfilePhotoStep: BatchRequestStep = {\n\t\t\tid: \"1\",\n\t\t\trequest: uploadProfilePhotoRequest,\n\t\t};\n\n\t\tlet downloadProfilePhotoRequest = new Request(\"/me/photo/$value\", {\n\t\t\tmethod: \"GET\",\n\t\t});\n\n\t\tlet downloadId = \"2\";\n\t\tlet downloadProfilePhotoStep: BatchRequestStep = {\n\t\t\tid: downloadId,\n\t\t\trequest: downloadProfilePhotoRequest,\n\t\t\tdependsOn: [\"1\"],\n\t\t};\n\n\t\tlet batchRequestContent = new MicrosoftGraph.BatchRequestContent([uploadProfilePhotoStep, downloadProfilePhotoStep]);\n\t\tlet content = await batchRequestContent.getContent();\n\t\tlet response = await client.api(\"/$batch\").post(content);\n\t\tlet batchResponseContent = new MicrosoftGraph.BatchResponseContent(response);\n\t\tconsole.log(batchResponseContent.getResponseById(downloadId));\n\t\tconsole.log(batchResponseContent.getResponses());\n\t} catch (error) {\n\t\tconsole.error(error);\n\t}\n};\n```\n\n----------------------------------------\n\nTITLE: Defining FileObject Interface in TypeScript\nDESCRIPTION: This snippet shows the interface definition for FileObject, which is required for creating a LargeFileUploadTask. It includes properties for content, name, size, and a method for slicing the file.\nSOURCE: https://github.com/microsoftgraph/msgraph-sdk-javascript/blob/dev/docs/tasks/LargeFileUploadTask.md#2025-04-18_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface FileObject<T> {\n\tcontent: T;\n\tname: string;\n\tsize: number;\n\tsliceFile(range: Range): Promise<ArrayBuffer | Blob | Buffer>;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating StreamUpload FileObject in TypeScript\nDESCRIPTION: This snippet demonstrates how to create a StreamUpload FileObject for Node.js stream uploads. It requires the file name, size, and a read stream.\nSOURCE: https://github.com/microsoftgraph/msgraph-sdk-javascript/blob/dev/docs/tasks/LargeFileUploadTask.md#2025-04-18_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport StreamUpload from \"@microsoft/microsoft-graph-client\";\nimport * as fs from \"fs\";\n\nconst fileName = \"<FILE_NAME>\";\nconst stats = fs.statSync(`./test/sample_files/${fileName}`);\nconst totalsize = stats.size;\nconst readStream = fs.createReadStream(`./test/sample_files/${fileName}`);\nconst fileObject = new StreamUpload(readStream, fileName, totalsize);\n```\n\n----------------------------------------\n\nTITLE: Passing Middleware Options to Microsoft Graph Client in TypeScript\nDESCRIPTION: This code demonstrates how to pass middleware-specific options when initializing the Microsoft Graph client. It creates a ClientOptions object with middleware and middlewareOptions properties, which will be available in the context object passed to each middleware's execute method.\nSOURCE: https://github.com/microsoftgraph/msgraph-sdk-javascript/blob/dev/docs/CustomMiddlewareChain.md#2025-04-18_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nlet clientOptions: ClientOptions = {\n\tmiddleware: authenticationHandler,\n\tmiddlewareOptions: {\n\t\tloggingPrefix: \"MSGraph-Client-Library\",\n\t},\n};\n```\n\n----------------------------------------\n\nTITLE: Iterating Over All Messages Using PageIterator in TypeScript\nDESCRIPTION: This snippet demonstrates the basic usage pattern of PageIterator to process all messages from the Microsoft Graph API. It creates a PageIterator instance with a client, response, and callback function, then iterates through the entire collection until all pages are processed.\nSOURCE: https://github.com/microsoftgraph/msgraph-sdk-javascript/blob/dev/docs/tasks/PageIterator.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nasync function callingPattern() {\n\ttry {\n\t\t// Makes request to fetch mails list. Which is expected to have multiple pages of data.\n\t\tlet response: PageCollection = await client.api(\"/me/messages\").get();\n\t\t// A callback function to be called for every item in the collection. This call back should return boolean indicating whether not to continue the iteration process.\n\t\tlet callback: PageIteratorCallback = (data) => {\n\t\t\tconsole.log(data);\n\t\t\treturn true;\n\t\t};\n\t\t// Creating a new page iterator instance with client a graph client instance, page collection response from request and callback\n\t\tlet pageIterator = new PageIterator(client, response, callback);\n\t\t// This iterates the collection until the nextLink is drained out.\n\t\tawait pageIterator.iterate();\n\t} catch (e) {\n\t\tthrow e;\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Using $TOP parameter with Microsoft Graph JavaScript SDK in TypeScript\nDESCRIPTION: Shows how to use the .top() method to limit the number of results returned in an API response. The method takes a single numeric parameter and multiple calls are not supported.\nSOURCE: https://github.com/microsoftgraph/msgraph-sdk-javascript/blob/dev/docs/QueryParameters.md#2025-04-18_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\ntry {\n\tlet res = await client\n\t\t.api(\"/me/contacts\")\n\t\t.top(5)\n\t\t.get();\n\tconsole.log(res);\n} catch (error) {\n\tthrow error;\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Microsoft Graph API with Promise chains in TypeScript\nDESCRIPTION: Shows how to get user details from Microsoft Graph API using Promise then/catch pattern. This approach uses method chaining to handle successful responses and errors.\nSOURCE: https://github.com/microsoftgraph/msgraph-sdk-javascript/blob/dev/docs/CallingPattern.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nclient\n\t.api(\"/me\")\n\t.get()\n\t.then((res) => {\n\t\tconsole.log(res);\n\t})\n\t.catch((err) => {\n\t\tconsole.log(err);\n\t});\n```\n\n----------------------------------------\n\nTITLE: Initializing Client with Options and Custom AuthProvider in TypeScript\nDESCRIPTION: This example demonstrates how to initialize the Client using Options with a custom authProvider function. The function should implement the logic for getting and refreshing the accessToken, passing it or an error to the provided callback.\nSOURCE: https://github.com/microsoftgraph/msgraph-sdk-javascript/blob/dev/docs/CreatingClientInstance.md#2025-04-18_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// Some callback function\nconst authProvider: AuthProvider = (callback: AuthProviderCallback) => {\n\t// Your logic for getting and refreshing accessToken\n\n\t// Error should be passed in case of error while authenticating\n\t// accessToken should be passed upon successful authentication\n\tcallback(error, accessToken);\n};\nlet options: Options = {\n\tauthProvider,\n};\nconst client = Client.init(options);\n```\n\n----------------------------------------\n\nTITLE: Querying Microsoft Graph API with callback pattern in TypeScript\nDESCRIPTION: Demonstrates how to get user details from Microsoft Graph API using the callback pattern. This approach passes a callback function to the get method that handles both errors and successful responses.\nSOURCE: https://github.com/microsoftgraph/msgraph-sdk-javascript/blob/dev/docs/CallingPattern.md#2025-04-18_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nclient.api(\"/me\").get((err, res) => {\n\tconsole.log(res);\n});\n```\n\n----------------------------------------\n\nTITLE: Multiple Profile Photos Download and Base64 Conversion\nDESCRIPTION: Shows how to batch download multiple user profile photos and convert them to Base64 format for browser rendering. Includes utility functions for blob conversion.\nSOURCE: https://github.com/microsoftgraph/msgraph-sdk-javascript/blob/dev/docs/content/Batching.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nb64toBlob = async (b64Data: any, contentType: string, sliceSize?: number): Promise<Blob> => {\n\tcontentType = contentType || \"image/png\";\n\tsliceSize = sliceSize || 512;\n\n\tlet byteCharacters: string = atob(b64Data);\n\tlet byteArrays = [];\n\n\tfor (let offset = 0; offset < byteCharacters.length; offset += sliceSize) {\n\t\tlet slice = byteCharacters.slice(offset, offset + sliceSize);\n\n\t\tlet byteNumbers = new Array(slice.length);\n\t\tfor (let i = 0; i < slice.length; i++) {\n\t\t\tbyteNumbers[i] = slice.charCodeAt(i);\n\t\t}\n\n\t\tlet byteArray = new Uint8Array(byteNumbers);\n\t\tbyteArrays.push(byteArray);\n\t}\n\n\tlet blob = new Blob(byteArrays, { type: contentType });\n\treturn blob;\n};\n\nblobToBase64 = (blob: Blob): Promise<string> => {\n\treturn new Promise((resolve, reject) => {\n\t\tconst reader = new FileReader();\n\t\treader.onerror = reject;\n\t\treader.onload = (_) => {\n\t\t\tresolve(reader.result as string);\n\t\t};\n\t\treader.readAsDataURL(blob);\n\t});\n};\n\ndownloadPhotosBatching = async (client: Client) => {\n\ttry {\n\t\tlet users = [\"user1@contoso.com\", \"user2@contoso.com\"];\n\t\tconst batchRequestSteps: BatchRequestStep[] = users.map((userId) => {\n\t\t\tconst request: BatchRequestStep = {\n\t\t\t\tid: userId,\n\t\t\t\trequest: new Request(`/users/${userId}/photo/$value`, {\n\t\t\t\t\tmethod: \"GET\",\n\t\t\t\t}),\n\t\t\t};\n\t\t\treturn request;\n\t\t});\n\t\tconst batchRequestContent = new BatchRequestContent(batchRequestSteps);\n\t\tconst content = await batchRequestContent.getContent();\n\t\tconst batchResponse = new BatchResponseContent(await client.api(\"/$batch\").post(content));\n\t\tconst response = batchResponse.getResponseById(users[0]);\n\t\tif (response.ok) {\n\t\t\tvar data = await response.text();\n\t\t\tconst binToBlob = await this.b64toBlob(data, \"img/jpg\");\n\t\t\tconst base64Result = await this.blobToBase64(binToBlob);\n\t\t\tconsole.log(base64Result);\n\t\t}\n\t} catch (error) {\n\t\tconsole.error(error);\n\t}\n};\n```\n\n----------------------------------------\n\nTITLE: Initializing Client with Custom Authentication Provider in TypeScript\nDESCRIPTION: This example shows how to create a Client instance using a custom authentication provider that implements the AuthenticationProvider interface. It allows for integration of any preferred authentication library.\nSOURCE: https://github.com/microsoftgraph/msgraph-sdk-javascript/blob/dev/docs/CreatingClientInstance.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nlet clientOptions: ClientOptions = {\n\t// MyCustomAuthenticationProvider is the user's own authentication provider implementing AuthenticationProvider interface\n\tauthProvider: new MyCustomAuthenticationProvider(),\n};\nconst client = Client.initWithMiddleware(clientOptions);\n```\n\n----------------------------------------\n\nTITLE: Using $ORDERBY parameter with Microsoft Graph JavaScript SDK in TypeScript\nDESCRIPTION: Demonstrates three equivalent ways to use the .orderby() method to sort the results of an API call. You can chain multiple orderby() calls, pass multiple arguments to one call, or provide an array of properties to sort by.\nSOURCE: https://github.com/microsoftgraph/msgraph-sdk-javascript/blob/dev/docs/QueryParameters.md#2025-04-18_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ntry {\n\t// Below three statements are same\n\tlet res1 = await client\n\t\t.api(\"/me/messages\")\n\t\t.orderby(\"name\")\n\t\t.orderby(\"subject\")\n\t\t.get();\n\tlet res2 = await client\n\t\t.api(\"/me/messages\")\n\t\t.orderby(\"name\", \"subject\")\n\t\t.get();\n\tlet res3 = await client\n\t\t.api(\"/me/messages\")\n\t\t.orderby([\"name\", \"subject\"])\n\t\t.get();\n} catch (error) {\n\tthrow error;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementation of LargeFileUploadTask Upload Method\nDESCRIPTION: Core upload functionality that handles file uploads in ranges, including slice operations and response handling.\nSOURCE: https://github.com/microsoftgraph/msgraph-sdk-javascript/blob/dev/design/large-file-upload-task-design.md#2025-04-18_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nupload() {\n\twhile (true) {\n\t\tconst fileSlice = this.sliceFile(nextRange);\n\t\tconst response = await this.uploadSlice(fileSlice, nextRange, this.file.size);\n\t\tif (response.id !== undefined) {\n\t\t\treturn response;\n\t\t} else {\n\t\t\tthis.updateTaskStatus(response);\n\t\t}\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Middleware Options in Microsoft Graph SDK\nDESCRIPTION: Demonstrates how to set custom middleware options for specific requests using .middlewareOptions(). Shows example with RetryHandlerOptions.\nSOURCE: https://github.com/microsoftgraph/msgraph-sdk-javascript/blob/dev/docs/OtherAPIs.md#2025-04-18_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\ntry {\n\tlet res = await client\n\t\t.api(\"/me/messages\")\n\t\t.middlewareOptions([new RetryHandlerOptions(5000)])\n\t\t.get();\n\tconsole.log(res);\n} catch (error) {\n\tthrow error;\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Headers in Microsoft Graph SDK\nDESCRIPTION: Demonstrates how to set request headers using .header() and .headers() methods. Shows example with sending an email and setting content-type header.\nSOURCE: https://github.com/microsoftgraph/msgraph-sdk-javascript/blob/dev/docs/OtherAPIs.md#2025-04-18_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ntry {\n\tlet messageBody = {\n\t\tmessage: {\n\t\t\tsubject: \"Meet for lunch?\",\n\t\t\tbody: {\n\t\t\t\tcontentType: \"Text\",\n\t\t\t\tcontent: \"The new cafeteria is open.\",\n\t\t\t},\n\t\t\ttoRecipients: [\n\t\t\t\t{\n\t\t\t\t\temailAddress: {\n\t\t\t\t\t\taddress: \"garthf@contoso.com\",\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t],\n\t\t},\n\t};\n\t// Below two statements are same\n\tlet res1 = await client\n\t\t.api(\"/me/sendMail\")\n\t\t.header(\"content-type\", \"application/json\")\n\t\t.post(messageBody);\n\tlet res2 = await client\n\t\t.api(\"/me/sendMail\")\n\t\t.headers({ \"content-type\": \"application/json\" })\n\t\t.post(messageBody);\n} catch (error) {\n\tthrow error;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Payload for Outlook Upload Session in TypeScript\nDESCRIPTION: This snippet demonstrates how to create a payload object for initializing an Outlook upload session. It includes the attachment type, file name, and size.\nSOURCE: https://github.com/microsoftgraph/msgraph-sdk-javascript/blob/dev/docs/tasks/LargeFileUploadTask.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst payload = {\n\tAttachmentItem: {\n\t\tattachmentType: \"file\",\n\t\tname: \"<FILE_NAME>\",\n\t\tsize: FILE_SIZE,\n\t},\n};\n```\n\n----------------------------------------\n\nTITLE: Setting Request Options in Microsoft Graph SDK\nDESCRIPTION: Shows how to set request options using .option() and .options() methods. Demonstrates setting up an HTTP proxy agent.\nSOURCE: https://github.com/microsoftgraph/msgraph-sdk-javascript/blob/dev/docs/OtherAPIs.md#2025-04-18_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nlet HttpProxyAgent = require('https-proxy-agent');\ntry {\n    // HTTP/HTTPS proxy to connect to\n    let proxy = <YOUR PROXY>;\n    let agent = new HttpProxyAgent(proxy);\n    // Below two statements are same\n    let res1 = await client.api(\"/me\").option(\"agent\", agent).get();\n    let res2 = await client.api(\"/me\").options({agent: agent}).get();\n} catch (error) {\n    throw error;\n}\n```\n\n----------------------------------------\n\nTITLE: Query Parameter Handling in Microsoft Graph SDK\nDESCRIPTION: Shows different methods to add query parameters to API requests using .query() method. Demonstrates equivalent ways to select specific fields using dictionary, string, and select() method.\nSOURCE: https://github.com/microsoftgraph/msgraph-sdk-javascript/blob/dev/docs/OtherAPIs.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ntry {\n\t// Below three statements are same\n\tlet res1 = await client\n\t\t.api(\"/me\")\n\t\t.query({ $select: \"displayName\" })\n\t\t.get();\n\tlet res2 = await client\n\t\t.api(\"/me\")\n\t\t.query(\"$select=displayName\")\n\t\t.get();\n\tlet res3 = await client\n\t\t.api(\"/me\")\n\t\t.select(\"displayName\")\n\t\t.get();\n} catch (error) {\n\tthrow error;\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Components from Graph Javascript Core SDK\nDESCRIPTION: Shows how to import the necessary components from the Microsoft Graph Javascript Core SDK, including the Client, types, and authentication providers.\nSOURCE: https://github.com/microsoftgraph/msgraph-sdk-javascript/blob/dev/design/kiota-e2e.md#2025-04-18_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Client } from \"@microsoft/msgraph-sdk-javascript-core\";\nimport { User, Message, BodyType } from \"@microsoft/msgraph-sdk-javascript-core-types\";\nimport { AzureIdentityAuthenticationProvider } from \"@microsoft/msgraph-sdk-javascript-core/authentication\";\nimport { DeviceCodeCredential } from \"@azure/identity\";\n```\n\n----------------------------------------\n\nTITLE: Importing Components from Graph Javascript Service Library\nDESCRIPTION: Demonstrates how to import the necessary components from the Microsoft Graph Javascript Service Library, including the Client, models, and authentication providers.\nSOURCE: https://github.com/microsoftgraph/msgraph-sdk-javascript/blob/dev/design/kiota-e2e.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// App.ts\n\nimport { Client } from \"@microsoft/msgraph-sdk-javascript\";\nimport { User, Message, BodyType } from \"@microsoft/msgraph-sdk-javascript/models\";\n\n// The authentication providers would get re-exported from @microsoft/msgraph-sdk-javascript-core/authentication\nimport { AzureIdentityAuthenticationProvider } from \"@microsoft/msgraph-sdk-javascript/authentication\";\nimport { DeviceCodeCredential } from \"@azure/identity\";\n```\n\n----------------------------------------\n\nTITLE: Using $SEARCH parameter with Microsoft Graph JavaScript SDK in TypeScript\nDESCRIPTION: Shows how to use the .search() method to restrict results based on a search criterion. The method takes a search string and calling it multiple times will override previous search strings.\nSOURCE: https://github.com/microsoftgraph/msgraph-sdk-javascript/blob/dev/docs/QueryParameters.md#2025-04-18_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\ntry {\n\tlet res = await client\n\t\t.api(\"/me/people\")\n\t\t.search(\"dicaprio\")\n\t\t.get();\n\tconsole.log(res);\n} catch (error) {\n\tthrow error;\n}\n```\n\n----------------------------------------\n\nTITLE: File Slicing Implementation\nDESCRIPTION: Function to slice the file according to the Next Expected Ranges specifications.\nSOURCE: https://github.com/microsoftgraph/msgraph-sdk-javascript/blob/dev/design/large-file-upload-task-design.md#2025-04-18_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\nsliceFile(range: Range): ArrayBuffer | Blob {\n\tconst blob = this.file.content.slice(range.minValue, range.maxValue + 1);\n\treturn blob;\n}\n```\n\n----------------------------------------\n\nTITLE: Enhanced Logging Middleware with Options for Microsoft Graph in TypeScript\nDESCRIPTION: This code shows an enhanced version of the logging middleware that uses middleware-specific options from the context object. It checks for a loggingPrefix option and includes it in the log output if present.\nSOURCE: https://github.com/microsoftgraph/msgraph-sdk-javascript/blob/dev/docs/CustomMiddlewareChain.md#2025-04-18_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n// MyLoggingHandler.ts\nimport { Middleware } from \"@microsoft/microsoft-graph-client\";\nimport { Context } from \"@microsoft/microsoft-graph-client\";\n\nexport class MyLoggingHandler implements Middleware {\n\tprivate nextMiddleware: Middleware;\n\n\tpublic async execute(context: Context): Promise<void> {\n\t\ttry {\n\t\t\tlet url: string;\n\t\t\tif (typeof context.request === \"string\") {\n\t\t\t\turl = context.request;\n\t\t\t} else {\n\t\t\t\turl = context.request.url;\n\t\t\t}\n\t\t\tif (context.middlewareOptions !== undefined && context.middlewareOptions.loggingPrefix !== undefined) {\n\t\t\t\tconsole.log(`${context.middlewareOptions.loggingPrefix}: ${url}`);\n\t\t\t} else {\n\t\t\t\tconsole.log(url);\n\t\t\t}\n\t\t\tawait this.nextMiddleware.execute(context);\n\t\t} catch (error) {\n\t\t\tthrow error;\n\t\t}\n\t}\n\n\tpublic setNext(next: Middleware): void {\n\t\tthis.nextMiddleware = next;\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Using $EXPAND parameter with Microsoft Graph JavaScript SDK in TypeScript\nDESCRIPTION: Shows three equivalent ways to use the .expand() method to include expanded content in the API response. You can chain multiple expand() calls, pass multiple arguments to one call, or provide an array of properties to expand.\nSOURCE: https://github.com/microsoftgraph/msgraph-sdk-javascript/blob/dev/docs/QueryParameters.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ntry {\n\t// Below three statements are same\n\tlet res1 = await client\n\t\t.api(\"/me/people\")\n\t\t.expand(\"manager\")\n\t\t.expand(\"directReports\")\n\t\t.get();\n\tlet res2 = await client\n\t\t.api(\"/me/people\")\n\t\t.expand(\"manager\", \"directReports\")\n\t\t.get();\n\tlet res3 = await client\n\t\t.api(\"/me/people\")\n\t\t.expand([\"manager\", \"directReports\"])\n\t\t.get();\n} catch (error) {\n\tthrow error;\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Microsoft Graph Client with AuthCodeMSALBrowserAuthenticationProvider (JavaScript)\nDESCRIPTION: JavaScript code for browser applications using CDN or script tags to initialize Microsoft Graph Client with AuthCodeMSALBrowserAuthenticationProvider. It shows configuration of the MSAL client, auth provider setup with required scopes, and client initialization.\nSOURCE: https://github.com/microsoftgraph/msgraph-sdk-javascript/blob/dev/docs/AuthCodeMSALBrowserAuthenticationProvider.md#2025-04-18_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst msalClient = new msal.PublicClientApplication(msalConfig);\n\nconst authProvider = new MSGraphAuthCodeMSALBrowserAuthProvider.AuthCodeMSALBrowserAuthenticationProvider(msalClient, {\n\taccount, // the AccountInfo instance to acquire the token for\n\tscopes: [\"user.read\", \"mail.send\"],\n\tinteractionType: msal.InteractionType.Popup,\n});\n\n// Initialize the Graph client\nconst graphClient = MicrosoftGraph.Client.initWithMiddleware({ authProvider });\n```\n\n----------------------------------------\n\nTITLE: Defining LargeFileUploadTask Interfaces\nDESCRIPTION: Core interface definitions for LargeFileUploadTask including options and file object structure. Defines the basic structure for file upload operations.\nSOURCE: https://github.com/microsoftgraph/msgraph-sdk-javascript/blob/dev/design/large-file-upload-task-design.md#2025-04-18_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ninterface LargeFileUploadTaskOptions {\n\trangeSize?: number;\n}\n\ninterface FileObject {\n\tcontent: ArrayBuffer | File;\n\tname: string;\n\tsize: number;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating and Uploading with LargeFileUploadTask in TypeScript\nDESCRIPTION: This snippet shows how to create a LargeFileUploadTask object and initiate the upload process. It requires a client instance, file object, upload session, and options.\nSOURCE: https://github.com/microsoftgraph/msgraph-sdk-javascript/blob/dev/docs/tasks/LargeFileUploadTask.md#2025-04-18_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nconst uploadTask = new LargeFileUploadTask(client, fileObject, uploadSession, optionsWithProgress);\nconst uploadResult: UploadResult = await uploadTask.upload();\n```\n\n----------------------------------------\n\nTITLE: Importing Microsoft Graph Client with Fetch Polyfill\nDESCRIPTION: Example of importing the Microsoft Graph client library and a fetch polyfill into a TypeScript application. A fetch polyfill is required for environments that don't natively support fetch.\nSOURCE: https://github.com/microsoftgraph/msgraph-sdk-javascript/blob/dev/README.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport \"isomorphic-fetch\"; // or import the fetch polyfill you installed\nimport { Client } from \"@microsoft/microsoft-graph-client\";\n```\n\n----------------------------------------\n\nTITLE: Creating TokenCredentialAuthentication provider in JavaScript\nDESCRIPTION: Example of how to initialize a Microsoft Graph client in JavaScript using TokenCredentialAuthenticationProvider with a ClientSecretCredential. This demonstrates the CommonJS import syntax along with proper client initialization.\nSOURCE: https://github.com/microsoftgraph/msgraph-sdk-javascript/blob/dev/docs/TokenCredentialAuthenticationProvider.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// Import the TokenCredential class that you wish to use. This examples uses a ClientSecretCredential\n\nconst { ClientSecretCredential } = require(\"@azure/identity\");\nconst { Client } = require(\"@microsoft/microsoft-graph-client\");\nconst { TokenCredentialAuthenticationProvider } = require(\"@microsoft/microsoft-graph-client/authProviders/azureTokenCredentials\");\n\n// Create an instance of the TokenCredential class that is imported\nconst credential = new ClientSecretCredential(tenantId, clientId, clientSecret);\n\n// Set your scopes and options for TokenCredential.getToken (Check the ` interface GetTokenOptions` in (TokenCredential Implementation)[https://github.com/Azure/azure-sdk-for-js/blob/main/sdk/core/core-auth/src/tokenCredential.ts])\n\nconst authProvider = new TokenCredentialAuthenticationProvider(credential, { scopes: [scopes] });\n\nconst client = Client.initWithMiddleware({\n\tdebugLogging: true,\n\tauthProvider,\n});\nconst res = await client.api(\"/users/\").get();\n```\n\n----------------------------------------\n\nTITLE: Including Polyfills for Browser Compatibility\nDESCRIPTION: HTML script tags for including necessary polyfills (Promise, Fetch, and Babel) for browsers that lack native support for these features required by the Graph SDK.\nSOURCE: https://github.com/microsoftgraph/msgraph-sdk-javascript/blob/dev/README.md#2025-04-18_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<!-- polyfilling promise -->\n<script type=\"text/javascript\" src=\"https://cdn.jsdelivr.net/npm/es6-promise/dist/es6-promise.auto.min.js\"></script>\n\n<!-- polyfilling fetch -->\n<script type=\"text/javascript\" src=\"https://cdn.jsdelivr.net/npm/whatwg-fetch/dist/fetch.umd.min.js\"></script>\n\n<!-- depending on your browser you might wanna include babel polyfill -->\n<script type=\"text/javascript\" src=\"https://cdn.jsdelivr.net/npm/@babel/polyfill@7.4.4/dist/polyfill.min.js\"></script>\n```\n\n----------------------------------------\n\nTITLE: Including Microsoft Graph Client via CDN\nDESCRIPTION: HTML script tag example for including the Microsoft Graph JavaScript client library from a CDN in a web page.\nSOURCE: https://github.com/microsoftgraph/msgraph-sdk-javascript/blob/dev/README.md#2025-04-18_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<script type=\"text/javascript\" src=\"https://cdn.jsdelivr.net/npm/@microsoft/microsoft-graph-client/lib/graph-js-sdk.js\"></script>\n```\n\n----------------------------------------\n\nTITLE: Implementing Chaos Handler with Microsoft Graph JavaScript SDK\nDESCRIPTION: This code demonstrates how to use the Chaos Handler middleware in the Microsoft Graph JavaScript SDK to simulate various HTTP error responses for testing. It shows client initialization, manual mode with regex matching, random mode with customizable error percentage, and handling of both successful and error responses.\nSOURCE: https://github.com/microsoftgraph/msgraph-sdk-javascript/blob/dev/docs/ChaosHandlerSamples.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nrequire(\"isomorphic-fetch\");\nconst MicrosoftGraph = require(\"../../lib/src/index.js\");\nconst secrets = require(\"./secrets\");\nconst fs = require(\"fs\");\n// Initialising the client\nconst client = MicrosoftGraph.Client.init({\n\tdefaultVersion: \"v1.0\",\n\tdebugLogging: true,\n\tauthProvider: (done) => {\n\t\tdone(null, secrets.accessToken);\n\t},\n});\n\n/*\nCreate a custom MiddlewareChain passing information in this way\n\nconst manualMap = new Map([[\"/me/messages/.*\", new Map([[\"GET\", 429], [\"PATCH\", 429]])], [\"/me\", new Map([[\"POST\", 502]])]]);\nconst chaosHandler = new MicrosoftGraph.ChaosHandler(new MicrosoftGraph.ChaosHandlerOptions(MicrosoftGraph.ChaosStrategy.MANUAL), manualMap);\n*/\n\n// This request would use the Map (Manual mode)\nconst mail = {\n\tsubject: \"Chaos Handler Samples\",\n\ttoRecipients: [\n\t\t{\n\t\t\temailAddress: {\n\t\t\t\taddress: \"admin@M365x003297.OnMicrosoft.com\",\n\t\t\t},\n\t\t},\n\t],\n\tbody: {\n\t\tcontent: \"<h1>Testing Handler Samples Sample</h1><br>https://github.com/microsoftgraph/msgraph-sdk-javascript\",\n\t\tcontentType: \"html\",\n\t},\n};\nclient\n\t.api(\"/users/me/sendMail\")\n\t.post({\n\t\tmessage: mail,\n\t})\n\t.then((res) => {\n\t\tconsole.log(res, \"This is for sendMail\");\n\t})\n\t.catch((err) => {\n\t\tconsole.log(err, \"This is for sendMail in error case\");\n\t});\n\n// OverRiding to Random mode, providing the chaos percentage as 60(percentage times the error would be generated from handler)\nclient\n\t.api(\"/me\")\n\t.middlewareOptions([new MicrosoftGraph.ChaosHandlerOptions(MicrosoftGraph.ChaosStrategy.RANDOM, \"I generated the error\", undefined, 60)])\n\t.get()\n\t.then((res) => {\n\t\tconsole.log(res);\n\t})\n\t.catch((err) => {\n\t\tconsole.log(err);\n\t});\n\n// This request is passed to the graph and gets a response from the graph, as no entry for /me GET request in the Map\nclient\n\t.api(\"/me\")\n\t.get()\n\t.then((res) => {\n\t\tconsole.log(\"Found\", res, \"users\");\n\t})\n\t.catch((err) => {\n\t\tconsole.log(err, \"!!!!!!!!!\");\n\t});\n\n// Using Manual Map with regex matching\nclient\n\t.api(\"/me/messages/hjdlfslod-fdssdkjfs-6zdkmghs-sadhsu2\")\n\t.header(\"content-type\", \"application/json\")\n\t.update({\n\t\tbirthday: \"1908-12-22T00:00:00Z\",\n\t})\n\t.then((res) => {\n\t\tconsole.log(\"This is regex matching... Updated Bday\");\n\t})\n\t.catch((err) => {\n\t\tconsole.log(err, \"matched\");\n\t});\n```\n\n----------------------------------------\n\nTITLE: Installing Microsoft Graph Javascript Core SDK with npm\nDESCRIPTION: Command to install the Microsoft Graph Javascript Core SDK and its type definitions via npm, providing core capabilities without the fluent API.\nSOURCE: https://github.com/microsoftgraph/msgraph-sdk-javascript/blob/dev/design/kiota-e2e.md#2025-04-18_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nnpm install @microsoft/msgraph-sdk-javascript-core --save\nnpm install @microsoft/msgraph-sdk-javascript-types --save-dev\n```\n\n----------------------------------------\n\nTITLE: Creating FileUpload FileObject in TypeScript\nDESCRIPTION: This snippet shows how to create a FileUpload FileObject for uploading ArrayBuffer, Blob, or Buffer file formats. It requires the file name, size, and content.\nSOURCE: https://github.com/microsoftgraph/msgraph-sdk-javascript/blob/dev/docs/tasks/LargeFileUploadTask.md#2025-04-18_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport FileUpload from \"@microsoft/microsoft-graph-client\";\nimport * as fs from \"fs\";\n\nconst fileName = \"<FILE_NAME>\";\nconst stats = fs.statSync(`./test/sample_files/${fileName}`);\nconst totalsize = stats.size;\nconst fileContent = fs.readFileSync(`./test/sample_files/${fileName}`);\nconst fileObject = new FileUpload(fileContent, fileName, totalsize);\n```\n\n----------------------------------------\n\nTITLE: Initializing Microsoft Graph Client in Node.js\nDESCRIPTION: TypeScript code to initialize a Microsoft Graph client instance in a Node.js environment using the authentication provider created earlier.\nSOURCE: https://github.com/microsoftgraph/msgraph-sdk-javascript/blob/dev/README-Localized/README-es-es.md#2025-04-18_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Client } from \"@microsoft/microsoft-graph-client\";\n\nconst options = {\n\tauthProvider, // An instance created from previous step\n};\nconst client = Client.initWithMiddleware(options);\n```\n\n----------------------------------------\n\nTITLE: Initializing Client with Custom Middleware Chain in TypeScript\nDESCRIPTION: This snippet illustrates how to create a Client instance with a custom middleware chain. It requires creating a custom middleware chain and passing the first middleware in the chain as the 'middleware' option in ClientOptions.\nSOURCE: https://github.com/microsoftgraph/msgraph-sdk-javascript/blob/dev/docs/CreatingClientInstance.md#2025-04-18_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nlet clientOptions: ClientOptions = {\n\t// MyFirstMiddleware is the first middleware in my custom middleware chain\n\tmiddleware: new MyFirstMiddleware(),\n};\nconst client = Client.initWithMiddleware(clientOptions);\n```\n\n----------------------------------------\n\nTITLE: Installing Microsoft Graph Javascript Service Library with npm\nDESCRIPTION: Command to install the Microsoft Graph Javascript Service Library via npm, which provides the fluent API for making calls to Microsoft Graph v1.0.\nSOURCE: https://github.com/microsoftgraph/msgraph-sdk-javascript/blob/dev/design/kiota-e2e.md#2025-04-18_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install @microsoft/msgraph-sdk-javascript --save\n```\n\n----------------------------------------\n\nTITLE: Configuring ImplicitMSALAuthenticationProvider in Node.js\nDESCRIPTION: TypeScript code to create an instance of ImplicitMSALAuthenticationProvider in a Node.js environment using MSAL for Microsoft Graph authentication.\nSOURCE: https://github.com/microsoftgraph/msgraph-sdk-javascript/blob/dev/README-Localized/README-es-es.md#2025-04-18_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { UserAgentApplication } from \"msal\";\n\nimport { ImplicitMSALAuthenticationProvider } from \"./node_modules/@microsoft/microsoft-graph-client/lib/src/ImplicitMSALAuthenticationProvider\";\n\n// An Optional options for initializing the MSAL @see https://github.com/AzureAD/microsoft-authentication-library-for-js/wiki/MSAL-basics#configuration-options\nconst msalConfig = {\n\tauth: {\n\t\tclientId: \"your_client_id\", // Client Id of the registered application\n\t\tredirectUri: \"your_redirect_uri\",\n\t},\n};\nconst graphScopes = [\"user.read\", \"mail.send\"]; // An array of graph scopes\n\n// Important Note: This library implements loginPopup and acquireTokenPopup flow, remember this while initializing the msal\n// Initialize the MSAL @see https://github.com/AzureAD/microsoft-authentication-library-for-js#1-instantiate-the-useragentapplication\nconst msalApplication = new UserAgentApplication(msalConfig);\nconst options = new MicrosoftGraph.MSALAuthenticationProviderOptions(graphScopes);\nconst authProvider = new ImplicitMSALAuthenticationProvider(msalApplication, options);\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom HTTP Message Handler for Microsoft Graph in TypeScript\nDESCRIPTION: This code implements a custom HTTP message handler by implementing the Middleware interface. It uses the fetch API to make HTTP requests and sets the response in the context object. This is the last middleware in the chain that actually performs the HTTP request.\nSOURCE: https://github.com/microsoftgraph/msgraph-sdk-javascript/blob/dev/docs/CustomMiddlewareChain.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// MyHttpMessageHandler.ts\nimport { Middleware } from \"@microsoft/microsoft-graph-client\";\n\nexport class MyHttpMessageHandler implements Middleware {\n\tpublic async execute(context: Context): Promise<void> {\n\t\ttry {\n\t\t\t// For more information about context object refer \"Context\" section below\n\t\t\tlet response = await fetch(context.request, context.options);\n\t\t\t// Set the response back in the context\n\t\t\tcontext.response = response;\n\t\t\treturn;\n\t\t} catch (error) {\n\t\t\tthrow error;\n\t\t}\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Installing MSAL in Node.js Environment\nDESCRIPTION: Command to install the Microsoft Authentication Library (MSAL) in a Node.js environment for use with Microsoft Graph client.\nSOURCE: https://github.com/microsoftgraph/msgraph-sdk-javascript/blob/dev/README-Localized/README-es-es.md#2025-04-18_snippet_5\n\nLANGUAGE: cmd\nCODE:\n```\nnpm install msal@<version>\n```\n\n----------------------------------------\n\nTITLE: Using $COUNT parameter with Microsoft Graph JavaScript SDK in TypeScript\nDESCRIPTION: Shows how to use the .count() method to include the count of objects in a collection along with the results. Pass true to the method to enable counting.\nSOURCE: https://github.com/microsoftgraph/msgraph-sdk-javascript/blob/dev/docs/QueryParameters.md#2025-04-18_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\ntry {\n\tlet res = await client\n\t\t.api(\"/me/calendars\")\n\t\t.count(true)\n\t\t.get();\n\tconsole.log(res);\n} catch (error) {\n\tthrow error;\n}\n```\n\n----------------------------------------\n\nTITLE: OneDrive Folder Creation and Multi-file Upload\nDESCRIPTION: Shows how to create a folder in OneDrive and upload multiple files using batch requests. Demonstrates dependent operations where file uploads wait for folder creation.\nSOURCE: https://github.com/microsoftgraph/msgraph-sdk-javascript/blob/dev/docs/content/Batching.md#2025-04-18_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst sameBatching = async function(elem) {\n\ttry {\n\t\tlet file1 = elem.files[0];\n\t\tlet file2 = elem.files[1];\n\n\t\tlet folderDetails = {\n\t\t\tname: \"MyFiles\",\n\t\t\tfolder: {},\n\t\t};\n\t\tlet createFolder = new Request(\"/me/drive/root/children\", {\n\t\t\tmethod: \"POST\",\n\t\t\theaders: {\n\t\t\t\t\"Content-type\": \"application/json\",\n\t\t\t},\n\t\t\tbody: JSON.stringify(folderDetails),\n\t\t});\n\n\t\tlet createFolderStep: BatchRequestStep = {\n\t\t\tid: \"1\",\n\t\t\trequest: createFolder,\n\t\t};\n\n\t\tlet uploadFileRequest1 = new Request(`/me/drive/root:/MyFiles/${file1.name}:/content`, {\n\t\t\tmethod: \"PUT\",\n\t\t\theaders: {\n\t\t\t\t\"Content-type\": file1.type,\n\t\t\t},\n\t\t\tbody: file1,\n\t\t});\n\n\t\tlet uploadFileStep1: BatchRequestStep = {\n\t\t\tid: \"2\",\n\t\t\trequest: uploadFileRequest1,\n\t\t\tdependsOn: [\"1\"],\n\t\t};\n\n\t\tlet uploadFileRequest2 = new Request(`/me/drive/root:/MyFiles/${file2.name}:/content`, {\n\t\t\tmethod: \"PUT\",\n\t\t\theaders: {\n\t\t\t\t\"Content-type\": file2.type,\n\t\t\t},\n\t\t\tbody: file2,\n\t\t});\n\n\t\tlet uploadFileStep2: BatchRequestStep = {\n\t\t\tid: \"3\",\n\t\t\trequest: uploadFileRequest2,\n\t\t\tdependsOn: [\"1\"],\n\t\t};\n\n\t\tlet batchRequestContent = new MicrosoftGraph.BatchRequestContent([createFolderStep, uploadFileStep1, uploadFileStep2]);\n\t\tlet content = await batchRequestContent.getContent();\n\t\tlet response = await client.api(\"/$batch\").post(content);\n\t\tlet batchResponseContent = new MicrosoftGraph.BatchResponseContent(response);\n\t\tconsole.log(batchResponseContent.getResponses());\n\t} catch (error) {\n\t\tconsole.error(error);\n\t}\n};\n```\n\n----------------------------------------\n\nTITLE: Including Microsoft Graph Client via Script Tag\nDESCRIPTION: HTML markup to include the Microsoft Graph client library via a CDN script tag in a web page.\nSOURCE: https://github.com/microsoftgraph/msgraph-sdk-javascript/blob/dev/README-Localized/README-es-es.md#2025-04-18_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<script type=\"text/javascript\" src=\"https://cdn.jsdelivr.net/npm/@microsoft/microsoft-graph-client/lib/graph-js-sdk.js\"></script>\n```\n\n----------------------------------------\n\nTITLE: Stopping and Resuming PageIterator in TypeScript\nDESCRIPTION: This snippet shows how to implement custom pagination behavior by stopping and resuming the PageIterator. It uses a callback that returns false after processing a specific number of items, allowing the iteration to be paused and later resumed from where it left off.\nSOURCE: https://github.com/microsoftgraph/msgraph-sdk-javascript/blob/dev/docs/tasks/PageIterator.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// Populating custom size pages if the api restricts to some maximum size. Lazy loading more data on user prompt or something, stop and resume will do the trick.\nasync function customSize() {\n\ttry {\n\t\tlet response: PageCollection = await client.api(\"/me/messages\").get();\n\t\tlet size = 1000;\n\t\tlet count = 0;\n\t\tlet callback: PageIteratorCallback = (data) => {\n\t\t\tconsole.log(data);\n\t\t\tcount++;\n\t\t\tif (count === size) {\n\t\t\t\tcount = 0;\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\treturn true;\n\t\t};\n\t\tlet pageIterator = new PageIterator(client, response, callback);\n\t\t// This stops iterating over for 1000 entities.\n\t\tawait pageIterator.iterate();\n\n\t\t// Resuming will do start from where it left off and iterate for next 1000 entities.\n\t\t// Check and resume is likely to be called in any user interaction requiring to load more data.\n\t\tif (!pageIterator.isComplete()) {\n\t\t\tawait pageIterator.resume();\n\t\t}\n\t} catch (e) {\n\t\tthrow e;\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Browser Field in package.json for Microsoft Graph JavaScript SDK\nDESCRIPTION: This snippet demonstrates how to use the browser field in package.json to specify different entry points for browser and Node.js environments. It maps the ES module entry point to a browser-specific version.\nSOURCE: https://github.com/microsoftgraph/msgraph-sdk-javascript/blob/dev/design/publishing.md#2025-04-18_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n\"browser\": { \"lib/es/src/index.js\": \"lib/es/src/browser/index.js\" }\n```\n\n----------------------------------------\n\nTITLE: Using $SKIP parameter with Microsoft Graph JavaScript SDK in TypeScript\nDESCRIPTION: Demonstrates how to use the .skip() method to skip a specific number of results in an API response. The method takes a single numeric parameter and multiple calls are not supported.\nSOURCE: https://github.com/microsoftgraph/msgraph-sdk-javascript/blob/dev/docs/QueryParameters.md#2025-04-18_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\ntry {\n\tlet res = await client\n\t\t.api(\"/me/events\")\n\t\t.skip(10)\n\t\t.get();\n\tconsole.log(res);\n} catch (error) {\n\tthrow error;\n}\n```\n\n----------------------------------------\n\nTITLE: Setting API Version in Microsoft Graph SDK\nDESCRIPTION: Demonstrates how to set a specific API version using .version() method, which takes precedence over default versions. Shows usage with the beta version.\nSOURCE: https://github.com/microsoftgraph/msgraph-sdk-javascript/blob/dev/docs/OtherAPIs.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntry {\n\tlet res = await client\n\t\t.api(\"/me/ownedDevices\")\n\t\t.version(\"beta\")\n\t\t.get();\n\tconsole.log(res);\n} catch (error) {\n\tthrow error;\n}\n```\n\n----------------------------------------\n\nTITLE: Deleting OneDrive Files with DELETE in Microsoft Graph JavaScript SDK\nDESCRIPTION: This snippet demonstrates how to delete a file from OneDrive using the DELETE method in the Microsoft Graph JavaScript SDK. It takes a file ID and attempts to remove it from the user's OneDrive, with proper error handling.\nSOURCE: https://github.com/microsoftgraph/msgraph-sdk-javascript/blob/dev/docs/Actions.md#2025-04-18_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\ntry {\n\tlet res = await client.api(`/me/drive/items/${ONE_DRIVE_FILE_ID_TO_DELETE}`).delete();\n\tconsole.log(res);\n} catch (error) {\n\tconsole.error(error);\n}\n```\n\n----------------------------------------\n\nTITLE: Running Linting for the Microsoft Graph JavaScript SDK\nDESCRIPTION: Command to check code quality and enforce coding standards. This helps maintain consistent code style throughout the project.\nSOURCE: https://github.com/microsoftgraph/msgraph-sdk-javascript/blob/dev/CONTRIBUTING.md#2025-04-18_snippet_4\n\nLANGUAGE: cmd\nCODE:\n```\nnpm run lint\n```\n\n----------------------------------------\n\nTITLE: Setting up Authentication with Microsoft Graph Core SDK\nDESCRIPTION: Demonstrates how to initialize a Graph client with the Core SDK using device code authentication, showing that the setup is identical to the Service Library approach.\nSOURCE: https://github.com/microsoftgraph/msgraph-sdk-javascript/blob/dev/design/kiota-e2e.md#2025-04-18_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nconst deviceCodeCredentials = new DeviceCodeCredential({\n\ttenantId: \"b61f9af1-d6cf-4cc0-a6f6-befb38bc00ed\",\n\tclientId: \"bde251a6-0ef9-42a8-a40b-9ad9bb594b2c\",\n});\n\nconst scopes = [\"User.Read\", \"Mail.Send\"];\n\nconst graphClient = Client.init({\n\tauthenticationTokenProvider: new AzureIdentityAuthenticationProvider(deviceCodeCredentials, scopes),\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing TokenCredentialAuthentication in browser with HTML\nDESCRIPTION: Example showing how to include and use the TokenCredentialAuthenticationProvider in a browser environment using a script tag. This demonstrates the IIFE format usage with proper client initialization.\nSOURCE: https://github.com/microsoftgraph/msgraph-sdk-javascript/blob/dev/docs/TokenCredentialAuthenticationProvider.md#2025-04-18_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<!-- include the script -->\n<script type=\"text/javascript\" src=\"<PATH_TO_SCRIPT>/graph-client-tokenCredentialAuthProvider.js\"></script>\n; // create an authProvider var authProvider = new MicrosoftGraphTokenCredentialAuthProvider.TokenCredentialAuthenticationProvider(tokenCred, { scopes: scopes }); client = MicrosoftGraph.Client.initWithMiddleware({ authProvider: authProvider, });\n```\n\n----------------------------------------\n\nTITLE: Running Unit Tests with npm for Microsoft Graph JavaScript SDK\nDESCRIPTION: A set of npm scripts for running various unit tests in the Microsoft Graph JavaScript SDK project. These scripts cover common tests, node-specific tests, CommonJS and ESM module tests, development tests, coverage reports, and browser tests.\nSOURCE: https://github.com/microsoftgraph/msgraph-sdk-javascript/blob/dev/test/Tests.md#2025-04-18_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n-   `npm run test` - To run unit tests in test/common and test/node.\n-   `npm run test:cjs` - To run unit tests in test/common and test/node compiled as CommonJS modules.\n-   `npm run test:esm` - To run unit tests in test/common and test/node compiled as ESM modules.\n-   `npm run test:development` - To run tests in test/development folder.\n-   `npm run test:coverage` - To get the test code coverage after running the tests.\n-   `npm run karma` - To run the units tests in test/common and test/browser folders on a headless browser.\n```\n\n----------------------------------------\n\nTITLE: Parallel Batching: Multi-workload Operations\nDESCRIPTION: Demonstrates parallel batch requests across different Microsoft Graph workloads including OneDrive and Mail. Shows dynamic request management and dependency handling.\nSOURCE: https://github.com/microsoftgraph/msgraph-sdk-javascript/blob/dev/docs/content/Batching.md#2025-04-18_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst parallelBatching = async function() {\n\ttry {\n\t\tlet fileName = \"test.pdf\";\n\t\tlet oneDriveFileRequest = new Request(`/me/drive/root:/${fileName}:/content`, {\n\t\t\tmethod: \"GET\",\n\t\t});\n\n\t\tlet oneDriveFileStep: BatchRequestStep = {\n\t\t\tid: \"1\",\n\t\t\trequest: oneDriveFileRequest,\n\t\t};\n\n\t\tlet folderDetails = {\n\t\t\tname: \"Testing Batch\",\n\t\t\tfolder: {},\n\t\t};\n\t\tlet createFolder = new Request(\"/me/drive/root/children\", {\n\t\t\tmethod: \"POST\",\n\t\t\theaders: {\n\t\t\t\t\"Content-type\": \"application/json\",\n\t\t\t},\n\t\t\tbody: JSON.stringify(folderDetails),\n\t\t});\n\n\t\tlet createFolderStep: BatchRequestStep = {\n\t\t\tid: \"2\",\n\t\t\trequest: createFolder,\n\t\t\tdependsOn: [\"1\"],\n\t\t};\n\n\t\tlet mailsRequest = new Request(\"/me/messages\", {\n\t\t\tmethod: \"GET\",\n\t\t});\n\n\t\tlet mailsRequestStep: BatchRequestStep = {\n\t\t\tid: \"3\",\n\t\t\trequest: mailsRequest,\n\t\t\tdependsOn: [\"2\"],\n\t\t};\n\n\t\tlet batchRequestContent = new MicrosoftGraph.BatchRequestContent();\n\t\tlet fileDownloadId = batchRequestContent.addRequest(oneDriveFileStep);\n\t\tlet createFolderId = batchRequestContent.addRequest(createFolderStep);\n\t\tlet mailsId = batchRequestContent.addRequest(mailsRequestStep);\n\t\tbatchRequestContent.removeDependency(\"3\", \"2\");\n\t\tbatchRequestContent.removeRequest(fileDownloadId);\n\t\tlet content = await batchRequestContent.getContent();\n\t\tlet response = await client.api(\"/$batch\").post(content);\n\t\tlet batchResponse = new MicrosoftGraph.BatchResponseContent(response);\n\t\tlet iterator = batchResponse.getResponsesIterator();\n\t\tlet data = iterator.next();\n\t\twhile (!data.done) {\n\t\t\tconsole.log(data.value[0] + \":\" + data.value[1]);\n\t\t\tdata = iterator.next();\n\t\t}\n\t} catch (error) {\n\t\tconsole.error(error);\n\t}\n};\n```\n\n----------------------------------------\n\nTITLE: Referencing TypeScript Configuration Files for Auth Provider Submodules\nDESCRIPTION: References to TypeScript configuration files used for transpiling authentication provider options to the output folder. These configurations address limitations in creating submodule structures in TypeScript projects.\nSOURCE: https://github.com/microsoftgraph/msgraph-sdk-javascript/blob/dev/authProviderOptions/ReadMe.md#2025-04-18_snippet_0\n\nLANGUAGE: json\nCODE:\n```\ntsconfig-sub-cjs.json\n```\n\nLANGUAGE: json\nCODE:\n```\ntsconfig-sub-es.json\n```\n\n----------------------------------------\n\nTITLE: Running Development Tests for Microsoft Graph SDK\nDESCRIPTION: Command to execute the development test suite for the Microsoft Graph JavaScript SDK after setting up the required authentication credentials in secrets.ts.\nSOURCE: https://github.com/microsoftgraph/msgraph-sdk-javascript/blob/dev/test/development/DevelopmentTests.md#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm run test:development\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Hosts in Microsoft Graph Client\nDESCRIPTION: Demonstrates how to configure custom hosts in the Microsoft Graph client initialization to enable authentication and telemetry handlers for non-Graph endpoints.\nSOURCE: https://github.com/microsoftgraph/msgraph-sdk-javascript/blob/dev/changelogs/v3-upgrade-guide.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// Consider the custom request url is https://CUSTOM_HOST.com\nconst customHost = \"CUSTOM_HOST\";\nconst customHosts = new Set<string>([customHost]);\nconst client = Client.initWithMiddleware({ middleware, customHosts });\n```\n\n----------------------------------------\n\nTITLE: Initialize Microsoft Graph Client in JavaScript\nDESCRIPTION: Code snippet showing how to initialize the Microsoft Graph client library. This represents a breaking change introduced in version 0.2.0, replacing the previous initialization method.\nSOURCE: https://github.com/microsoftgraph/msgraph-sdk-javascript/blob/dev/CHANGELOG.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nMicrosoftGraph.Client.init({...})\n```\n\n----------------------------------------\n\nTITLE: Configuring ImplicitMSALAuthenticationProvider in Browser\nDESCRIPTION: JavaScript code to create an instance of ImplicitMSALAuthenticationProvider in a browser environment using MSAL for Microsoft Graph authentication.\nSOURCE: https://github.com/microsoftgraph/msgraph-sdk-javascript/blob/dev/README-Localized/README-es-es.md#2025-04-18_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n// Configuration options for MSAL @see https://github.com/AzureAD/microsoft-authentication-library-for-js/wiki/MSAL.js-1.0.0-api-release#configuration-options\nconst msalConfig = {\n\tauth: {\n\t\tclientId: \"your_client_id\", // Client Id of the registered application\n\t\tredirectUri: \"your_redirect_uri\",\n\t},\n};\nconst graphScopes = [\"user.read\", \"mail.send\"]; // An array of graph scopes\n\n// Important Note: This library implements loginPopup and acquireTokenPopup flow, remember this while initializing the msal\n// Initialize the MSAL @see https://github.com/AzureAD/microsoft-authentication-library-for-js#1-instantiate-the-useragentapplication\nconst msalApplication = new Msal.UserAgentApplication(msalConfig);\nconst options = new MicrosoftGraph.MSALAuthenticationProviderOptions(graphScopes);\nconst authProvider = new MicrosoftGraph.ImplicitMSALAuthenticationProvider(msalApplication, options);\n```\n\n----------------------------------------\n\nTITLE: Initializing Microsoft Graph Client in Browser\nDESCRIPTION: JavaScript code to initialize a Microsoft Graph client instance in a browser environment using the authentication provider created earlier.\nSOURCE: https://github.com/microsoftgraph/msgraph-sdk-javascript/blob/dev/README-Localized/README-es-es.md#2025-04-18_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nconst options = {\n\tauthProvider, // An instance created from previous step\n};\nconst Client = MicrosoftGraph.Client;\nconst client = Client.initWithMiddleware(options);\n```\n\n----------------------------------------\n\nTITLE: Installing MSAL Browser and Microsoft Graph Client via CDN\nDESCRIPTION: HTML script tags for including MSAL Browser and Microsoft Graph Client libraries via CDN for browser applications.\nSOURCE: https://github.com/microsoftgraph/msgraph-sdk-javascript/blob/dev/docs/AuthCodeMSALBrowserAuthenticationProvider.md#2025-04-18_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<!--Using script tag to include the bundled file or the CDN source-->\n<script type=\"text/javascript\" src=\"https://alcdn.msauth.net/browser/2.15.0/js/msal-browser.min.js\"></script>\n<script src=\"graph-js-sdk.js\"></script>\n<script src=\"graph-client-msalBrowserAuthProvider.js\"></script>\n```\n\n----------------------------------------\n\nTITLE: Importing Microsoft Graph Client in TypeScript\nDESCRIPTION: Imports the Microsoft Graph client library in a TypeScript module along with the required isomorphic-fetch polyfill for fetch API support.\nSOURCE: https://github.com/microsoftgraph/msgraph-sdk-javascript/blob/dev/README-Localized/README-es-es.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport \"isomorphic-fetch\";\nimport { Client } from \"@microsoft/microsoft-graph-client\";\n```\n\n----------------------------------------\n\nTITLE: Configuring Browser Field for Environment-Specific Implementations\nDESCRIPTION: This code snippet shows how to use the browser field in package.json to handle environment-specific implementations. It maps Node.js modules to their browser-compatible equivalents.\nSOURCE: https://github.com/microsoftgraph/msgraph-sdk-javascript/blob/dev/design/publishing.md#2025-04-18_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"stream\": \"stream-browserify\",\n\t\"Feature-Node.js\": \"Feature-Browser.js\"\n}\n```\n\n----------------------------------------\n\nTITLE: Updated Package.json Entry Points in Microsoft Graph SDK v3\nDESCRIPTION: Shows the new structure of package.json entry points for the Microsoft Graph SDK v3, including main, module, and browser field configurations.\nSOURCE: https://github.com/microsoftgraph/msgraph-sdk-javascript/blob/dev/changelogs/v3-upgrade-guide.md#2025-04-18_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"main\": \"lib/src/index.js\",\n\t\"module\": \"lib/es/src/index.js\",\n\t\"browser\": {\n\t\t\"./lib/es/src/index.js\": \"./lib/es/src/browser/index.js\"\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Updated FileObject Interface with SliceFile Method\nDESCRIPTION: Enhanced FileObject interface that includes the sliceFile method to support different file types.\nSOURCE: https://github.com/microsoftgraph/msgraph-sdk-javascript/blob/dev/design/large-file-upload-task-design.md#2025-04-18_snippet_3\n\nLANGUAGE: TypeScript\nCODE:\n```\ninterface FileObject{\n    sliceFile(range: Range): ArrayBuffer | Blob\n}\n```\n\n----------------------------------------\n\nTITLE: Modified Upload Function Implementation\nDESCRIPTION: Updated upload function that uses the FileObject's sliceFile method instead of internal implementation.\nSOURCE: https://github.com/microsoftgraph/msgraph-sdk-javascript/blob/dev/design/large-file-upload-task-design.md#2025-04-18_snippet_4\n\nLANGUAGE: TypeScript\nCODE:\n```\nupload() {\n    const fileSlice = this.fileObject.sliceFile(Range);\n}\n```\n\n----------------------------------------\n\nTITLE: Upload Progress Handler Interface Definition\nDESCRIPTION: Interface definitions for handling upload progress events and additional options.\nSOURCE: https://github.com/microsoftgraph/msgraph-sdk-javascript/blob/dev/design/large-file-upload-task-design.md#2025-04-18_snippet_5\n\nLANGUAGE: TypeScript\nCODE:\n```\ninterface UploadEventHandler{\n\textraCallbackParam?: unknown;\n\tprogress(range: Range, extraCallbackParam?: unknown):void\n}\n\ninterface LargeFileUploadTaskOptions {\n\trangeSize?: number;\n\tuploadEventHandlers?: UploadEventHandler;\n}\n```\n\n----------------------------------------\n\nTITLE: Running Karma Tests for Microsoft Graph JavaScript SDK\nDESCRIPTION: These commands install the necessary dependencies and run the Karma test suite for browser-specific unit tests in the Microsoft Graph JavaScript SDK project.\nSOURCE: https://github.com/microsoftgraph/msgraph-sdk-javascript/blob/dev/test/browser/BrowserTests.md#2025-04-18_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nnpm install\nnpm run karma\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies and Running Tests for Microsoft Graph JavaScript SDK\nDESCRIPTION: These commands install the necessary dependencies and run the unit tests using npm scripts. The first command installs all required packages, while the second command executes the test suite.\nSOURCE: https://github.com/microsoftgraph/msgraph-sdk-javascript/blob/dev/test/node/NodeTests.md#2025-04-18_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nnpm install\nnpm run test\n```\n\n----------------------------------------\n\nTITLE: Including Browser Polyfills for Fetch and Promise\nDESCRIPTION: HTML markup to include necessary polyfills for Fetch API, Promise, and Babel for browsers that don't support these features natively.\nSOURCE: https://github.com/microsoftgraph/msgraph-sdk-javascript/blob/dev/README-Localized/README-es-es.md#2025-04-18_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<!-- polyfilling promise -->\n<script type=\"text/javascript\" src=\"https://cdn.jsdelivr.net/npm/es6-promise/dist/es6-promise.auto.min.js\"></script>\n\n<!-- polyfilling fetch -->\n<script type=\"text/javascript\" src=\"https://cdn.jsdelivr.net/npm/whatwg-fetch/dist/fetch.umd.min.js\"></script>\n\n<!-- depending on your browser you might wanna include babel polyfill -->\n<script type=\"text/javascript\" src=\"https://cdn.jsdelivr.net/npm/@babel/polyfill@7.4.4/dist/polyfill.min.js\"></script>\n```\n\n----------------------------------------\n\nTITLE: Installing Microsoft Graph Client with npm\nDESCRIPTION: Command to install the Microsoft Graph JavaScript client library using npm package manager.\nSOURCE: https://github.com/microsoftgraph/msgraph-sdk-javascript/blob/dev/README-Localized/README-es-es.md#2025-04-18_snippet_0\n\nLANGUAGE: cmd\nCODE:\n```\nnpm install @microsoft/microsoft-graph-client\n```\n\n----------------------------------------\n\nTITLE: Installing Development Dependencies using NPM\nDESCRIPTION: Command to install all necessary development dependencies for the project. This must be run before attempting to build or test the SDK.\nSOURCE: https://github.com/microsoftgraph/msgraph-sdk-javascript/blob/dev/CONTRIBUTING.md#2025-04-18_snippet_1\n\nLANGUAGE: cmd\nCODE:\n```\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Building the Microsoft Graph JavaScript SDK\nDESCRIPTION: Command to build the project after making code changes. This compiles the TypeScript code and prepares the SDK for testing.\nSOURCE: https://github.com/microsoftgraph/msgraph-sdk-javascript/blob/dev/CONTRIBUTING.md#2025-04-18_snippet_2\n\nLANGUAGE: cmd\nCODE:\n```\nnpm run build\n```\n\n----------------------------------------\n\nTITLE: Creating New Branch After Merge\nDESCRIPTION: Commands to create a new local branch X2 from the upstream main branch after successfully merging branch X, including pulling updates and pushing to origin.\nSOURCE: https://github.com/microsoftgraph/msgraph-sdk-javascript/blob/dev/CONTRIBUTING.md#2025-04-18_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ncd microsoft-graph-docs\ngit pull upstream main:X2\ngit push origin X2\n```\n\n----------------------------------------\n\nTITLE: Running Tests for the Microsoft Graph JavaScript SDK\nDESCRIPTION: Command to execute the test suite to validate code changes. This ensures that modifications don't break existing functionality.\nSOURCE: https://github.com/microsoftgraph/msgraph-sdk-javascript/blob/dev/CONTRIBUTING.md#2025-04-18_snippet_3\n\nLANGUAGE: cmd\nCODE:\n```\nnpm run test\n```\n\n----------------------------------------\n\nTITLE: Setting Up Local Repository using Git in Command Line\nDESCRIPTION: Commands to clone and configure a local copy of the repository with proper upstream references. These commands create a connection to both your fork and the original repository.\nSOURCE: https://github.com/microsoftgraph/msgraph-sdk-javascript/blob/dev/CONTRIBUTING.md#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/<your user name>/<repo name>.git\n```\n\nLANGUAGE: bash\nCODE:\n```\ncd <repo name>\ngit remote add upstream https://github.com/microsoftgraph/<repo name>.git\ngit fetch upstream\n```\n\n----------------------------------------\n\nTITLE: Committing Changes to Local Git Repository\nDESCRIPTION: Git commands to stage and commit changes to the local repository. These commands add all modified files and create a commit with a descriptive message.\nSOURCE: https://github.com/microsoftgraph/msgraph-sdk-javascript/blob/dev/CONTRIBUTING.md#2025-04-18_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ngit add .\ngit commit -v -a -m \"<Describe the changes made in this commit>\"\n```\n\n----------------------------------------\n\nTITLE: Checking Out New Branch\nDESCRIPTION: Command to checkout the newly created branch X2 to verify content and begin making new updates.\nSOURCE: https://github.com/microsoftgraph/msgraph-sdk-javascript/blob/dev/CONTRIBUTING.md#2025-04-18_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ngit checkout X2\n```\n\n----------------------------------------\n\nTITLE: Branch Deletion Commands\nDESCRIPTION: Series of commands to safely delete a branch after successful merge, including checking out main branch and removing both local and remote branches.\nSOURCE: https://github.com/microsoftgraph/msgraph-sdk-javascript/blob/dev/CONTRIBUTING.md#2025-04-18_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\ngit checkout main\ngit branch -d <branch name>\ngit push origin :<branch name>\n```\n\n----------------------------------------\n\nTITLE: Configuring LargeFileUploadTask Options in TypeScript\nDESCRIPTION: This snippet demonstrates how to configure options for LargeFileUploadTask, including progress handlers and range size. It defines a progress callback function and sets up upload event handlers.\nSOURCE: https://github.com/microsoftgraph/msgraph-sdk-javascript/blob/dev/docs/tasks/LargeFileUploadTask.md#2025-04-18_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nconst progress = (range?: Range, extraCallBackParam?: unknown) => {\n\t// Handle progress event\n};\n\nconst uploadEventHandlers: UploadEventHandlers = {\n\tprogress,\n\textraCallBackParam, // additional parameters to the callback\n};\n\nconst options: LargeFileUploadTaskOptions = {\n\trangeSize: 327680,\n\tuploadEventHandlers: UploadEventHandlers,\n};\n```\n\n----------------------------------------\n\nTITLE: Updating Profile Picture with PUT in Microsoft Graph JavaScript SDK\nDESCRIPTION: This snippet shows how to update a user's profile picture using the PUT method in the Microsoft Graph JavaScript SDK. It takes a file object from an HTML input form and uploads it to the /me/photo/$value endpoint.\nSOURCE: https://github.com/microsoftgraph/msgraph-sdk-javascript/blob/dev/docs/Actions.md#2025-04-18_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nlet file; // FileObject retrieved from the HTML input type=file\ntry {\n\tlet res = await client.api(\"/me/photo/$value\").put(file);\n\tconsole.log(res);\n} catch (error) {\n\tthrow error;\n}\n```\n\n----------------------------------------\n\nTITLE: Controlling Upload Process Manually in TypeScript\nDESCRIPTION: This snippet demonstrates how to manually control the upload process using the uploadTask object. It shows how to get the next range, slice the file, and upload a slice.\nSOURCE: https://github.com/microsoftgraph/msgraph-sdk-javascript/blob/dev/docs/tasks/LargeFileUploadTask.md#2025-04-18_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nlet range = uploadTask.getNextRange();\nlet slicedFile = uploadTask.sliceFile(range);\nuploadTask.uploadSlice(slicedFile, range, uploadTask.file.size);\n```\n\n----------------------------------------\n\nTITLE: Getting LargeFileUpload Session Information in TypeScript\nDESCRIPTION: This snippet demonstrates how to retrieve the large file upload session information, including the URL, expiry date, and cancellation status of the task.\nSOURCE: https://github.com/microsoftgraph/msgraph-sdk-javascript/blob/dev/docs/tasks/LargeFileUploadTask.md#2025-04-18_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nconst uploadsession: LargeFileUploadSession = uploadTask.getUploadSession();\n```"
  }
]