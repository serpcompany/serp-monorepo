[
  {
    "owner": "crossmint",
    "repo": "crossmint-sdk",
    "content": "TITLE: Initializing Crossmint Wallets SDK\nDESCRIPTION: Initializes the Crossmint Wallets SDK with an API key and user token (optional for server wallets). It creates a Crossmint instance and then a CrossmintWallets instance, which is used to interact with wallets. Finally, it retrieves or creates a wallet.\nSOURCE: https://github.com/crossmint/crossmint-sdk/blob/main/packages/wallets/README.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { CrossmintWallets, createCrossmint } from \"@crossmint/wallets-sdk\";\n\nconst crossmint = createCrossmint({\n    apiKey: \"<YOUR_API_KEY>\",\n    jwt: \"<USER_TOKEN>\", // Not needed for server wallets\n});\nconst crossmintWallets = CrossmintWallets.from(crossmint);\nconst wallet = await crossmintWallets.getOrCreateWallet(\"evm-smart-wallet\", {\n    chain: \"base-sepolia\",\n    adminSigner: {\n        type: \"evm-passkey\",\n    },\n});\n\nconst address = wallet.address;\n```\n\n----------------------------------------\n\nTITLE: Adding Crossmint Provider (TypeScript)\nDESCRIPTION: This TypeScript code snippet demonstrates how to wrap your Next.js application with `CrossmintProvider` and `CrossmintAuthProvider` to enable Crossmint authentication. It uses the API key from environment variables and configures embedded wallets.\nSOURCE: https://github.com/crossmint/crossmint-sdk/blob/main/apps/wallets/smart-wallet/next/README.md#_snippet_4\n\nLANGUAGE: TypeScript\nCODE:\n```\n\"use client\";\n\n// Important: this ensures the client SDK only runs on the client\n\nimport { CrossmintProvider, CrossmintAuthProvider } from \"@crossmint/client-sdk-react-ui\";\n\nexport default function App({ Component, pageProps }) {\n    return (\n        <CrossmintProvider apiKey={process.env.NEXT_PUBLIC_CROSSMINT_AUTH_SMART_WALLET_API_KEY ?? \"\"}>\n            <CrossmintAuthProvider\n                embeddedWallets={{\n                    createOnLogin: \"all-users\",\n                    defaultChain: \"polygon-amoy\",\n                    type: \"evm-smart-wallet\",\n                }}\n            >\n                <Component {...pageProps} />\n            </CrossmintAuthProvider>\n        </CrossmintProvider>\n    );\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing CrossmintAuth in Typescript\nDESCRIPTION: Imports and initializes the CrossmintAuth SDK in a TypeScript application. It demonstrates creating a Crossmint instance and then using it to create a CrossmintAuth instance.\nSOURCE: https://github.com/crossmint/crossmint-sdk/blob/main/packages/client/auth/README.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createCrossmint, CrossmintAuth } from \"@crossmint/client-sdk-auth\";\n\nconst crossmint = createCrossmint({\n    apiKey: process.env.CLIENT_CROSSMINT_API_KEY || \"\",\n});\n\nconst crossmintAuth = CrossmintAuth.from(crossmint);\n```\n\n----------------------------------------\n\nTITLE: Creating Solana MPC Wallet\nDESCRIPTION: Creates a Solana MPC (Multi-Party Computation) wallet. It requires a linked user ID. The `getOrCreateWallet` method is used to create the wallet with a linked user.\nSOURCE: https://github.com/crossmint/crossmint-sdk/blob/main/packages/wallets/README.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst wallet = await crossmintWallets.getOrCreateWallet(\"solana-mpc-wallet\", {\n    linkedUser: \"<USER_UD>\",\n});\n```\n\n----------------------------------------\n\nTITLE: Configure Custom Refresh Route in Typescript\nDESCRIPTION: Configures a custom refresh route for the CrossmintAuth SDK to refresh the token, using HttpOnly cookies. This allows to prevent JavaScript access to sensitive authentication material.\nSOURCE: https://github.com/crossmint/crossmint-sdk/blob/main/packages/client/auth/README.md#_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nconst crossmintAuth = CrossmintAuth.from(crossmint, {\n    refreshRoute: \"/api/refresh\",\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Passkey Wallet\nDESCRIPTION: Creates a smart wallet using a passkey signer.  A passkey signer is first created using `sdk.createPasskeySigner` and then passed to `sdk.getOrCreateWallet`.  A JWT token is required for authentication.\nSOURCE: https://github.com/crossmint/crossmint-sdk/blob/main/packages/client/wallets/smart-wallet/README.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst signer = await sdk.createPasskeySigner(\"My Wallet\")\nconst wallet = await sdk.getOrCreateWallet(\n  {\n    jwt: \"<USER_TOKEN>\",\n  },\n  \"base-sepolia\",\n  {\n    signer,\n  }\n);\nconst address = walletClient.getAddress();\n```\n\n----------------------------------------\n\nTITLE: User Authentication and Logout in Typescript\nDESCRIPTION: Demonstrates how to retrieve the current user and log out the user using the CrossmintAuth SDK.  `getUser()` fetches the current user's information, and `logout()` clears the user's session.\nSOURCE: https://github.com/crossmint/crossmint-sdk/blob/main/packages/client/auth/README.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// Get the current user\nconst user = await crossmintAuth.getUser();\n\n// Log out the user and clear cookies\ncrossmintAuth.logout();\n```\n\n----------------------------------------\n\nTITLE: Getting a session with Next.js cookies\nDESCRIPTION: This code shows how to retrieve a user session in a Next.js environment. It fetches the 'crossmint-session' and 'crossmint-refresh-token' cookies from the `cookieStore`, and passes them to the `getSession` method. This method retrieves the JWT and userId.\nSOURCE: https://github.com/crossmint/crossmint-sdk/blob/main/packages/server/README.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { cookies } from \"next/headers\";\n\nconst cookieStore = cookies();\nconst jwtCookie = cookieStore.get(\"crossmint-session\")?.value;\nconst refreshCookie = cookieStore.get(\"crossmint-refresh-token\")?.value;\n\nconst { jwt, userId } = await crossmintAuth.getSession({\n    jwt: jwtCookie,\n    refreshToken: refreshCookie,\n});\n```\n\n----------------------------------------\n\nTITLE: Signing Messages\nDESCRIPTION: Signs a message using the smart wallet. Uses the `signMessage` method of the `walletClient`.  The message to be signed is passed as a string.\nSOURCE: https://github.com/crossmint/crossmint-sdk/blob/main/packages/client/wallets/smart-wallet/README.md#_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nconst walletClient = wallet.client.wallet;\nconst signature = await walletClient.signMessage({\n  message: \"Hello, Crossmint!\"\n})\n```\n\n----------------------------------------\n\nTITLE: Using Crossmint Authentication Hooks\nDESCRIPTION: Demonstrates using the `useCrossmintAuth` hook to manage user authentication state.  It shows how to display a login button when the user is logged out and a welcome message and logout button when logged in. The `login` function is called with the provider 'google'.\nSOURCE: https://github.com/crossmint/crossmint-sdk/blob/main/packages/client/ui/react-native/README.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useCrossmintAuth } from \"@crossmint/client-sdk-react-native-ui\";\n\nfunction ProfileScreen() {\n  const { user, status, logout, login } = useCrossmintAuth();\n\n  if (status === \"logged-out\") {\n    return (\n      <View>\n        <Button\n          title=\"Sign in with Google\"\n          onPress={() => login(\"google\")}\n        />\n      </View>\n    );\n  }\n\n  return (\n    <View>\n      <Text>Welcome, {user?.email}</Text>\n      <Button title=\"Logout\" onPress={logout} />\n    </View>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Signing EVM Message\nDESCRIPTION: Signs a message using the created EVM wallet. The `signMessage` method is used to sign the message, returning a signature.\nSOURCE: https://github.com/crossmint/crossmint-sdk/blob/main/packages/wallets/README.md#_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nconst signature = await wallet.signMessage({\n    message: \"Hello from Crossmint SDK\",\n});\n```\n\n----------------------------------------\n\nTITLE: Token Refresh and Logout Callbacks in Typescript\nDESCRIPTION: Configures callbacks for token refresh and logout events within the CrossmintAuth SDK. The `onTokenRefresh` callback is executed when tokens are refreshed, and the `onLogout` callback is executed when the user logs out.\nSOURCE: https://github.com/crossmint/crossmint-sdk/blob/main/packages/client/auth/README.md#_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nconst crossmintAuth = CrossmintAuth.from(crossmint, {\n    callbacks: {\n        onTokenRefresh: (authMaterial) => {\n            // Handle new authentication material\n        },\n        onLogout: () => {\n            // Handle logout\n        },\n    },\n});\n```\n\n----------------------------------------\n\nTITLE: Using Expo SecureStore for Auth in Typescript\nDESCRIPTION: Demonstrates how to use Expo SecureStore as a custom storage provider for the CrossmintAuth SDK in a React Native Expo application. It initializes the CrossmintAuth instance with ExpoSecureStorage.\nSOURCE: https://github.com/crossmint/crossmint-sdk/blob/main/packages/client/auth/README.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as SecureStore from 'expo-secure-store';\nimport { ExpoSecureStorage, CrossmintAuth } from \"@crossmint/client-sdk-auth\";\n\n// Create a custom storage provider using Expo's SecureStore\nconst storageProvider = new ExpoSecureStorage(SecureStore);\n\n// Initialize auth client with secure storage\nconst crossmintAuth = CrossmintAuth.from(crossmint, {\n  storageProvider\n});\n```\n\n----------------------------------------\n\nTITLE: Importing useAuth hook\nDESCRIPTION: This snippet imports the `useAuth` hook from the `@crossmint/client-sdk-react-ui` package.  The `useAuth` hook provides authentication state management and user session functionalities within a React application.\nSOURCE: https://github.com/crossmint/crossmint-sdk/blob/main/packages/client/ui/react-ui/README.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useAuth } from \"@crossmint/client-sdk-react-ui\";\n```\n\n----------------------------------------\n\nTITLE: Storing Authentication Material in Cookies\nDESCRIPTION: This snippet demonstrates how to store authentication information in cookies by passing the response object to the `getSession` method of the `crossmintAuth`. The response object allows the `getSession` to set the cookies on the response. This is applicable in frameworks with access to the response object.\nSOURCE: https://github.com/crossmint/crossmint-sdk/blob/main/packages/server/README.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst { jwt, userId } = await crossmintAuth.getSession(request, response);\n```\n\n----------------------------------------\n\nTITLE: Initializing Crossmint SDK\nDESCRIPTION: This code snippet imports the necessary modules from the @crossmint/server-sdk and initializes the Crossmint SDK. It creates a Crossmint client and a CrossmintAuth instance using the API key from the environment variables. The `CrossmintAuth` instance will be used for authentication-related operations.\nSOURCE: https://github.com/crossmint/crossmint-sdk/blob/main/packages/server/README.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createCrossmint, CrossmintAuth } from \"@crossmint/server-sdk\";\n\nconst crossmint = createCrossmint({\n    apiKey: process.env.SERVER_CROSSMINT_API_KEY || \"\",\n});\n\nconst crossmintAuth = CrossmintAuth.from(crossmint);\n```\n\n----------------------------------------\n\nTITLE: Handling Custom Refresh with Node.js API\nDESCRIPTION: This code snippet demonstrates how to handle a custom refresh route using the Node.js API. It calls `handleCustomRefresh` with both the request and response objects and then explicitly ends the response. This approach is necessary in Node.js environments.\nSOURCE: https://github.com/crossmint/crossmint-sdk/blob/main/packages/server/README.md#_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nawait crossmintAuth.handleCustomRefresh(req, res);\nres.end();\n```\n\n----------------------------------------\n\nTITLE: Using RNEncryptedStorage for Auth in Typescript\nDESCRIPTION: Demonstrates how to use react-native-encrypted-storage as a custom storage provider for the CrossmintAuth SDK in a vanilla React Native application. It initializes the CrossmintAuth instance with RNEncryptedStorage.\nSOURCE: https://github.com/crossmint/crossmint-sdk/blob/main/packages/client/auth/README.md#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport EncryptedStorage from 'react-native-encrypted-storage';\nimport { RNEncryptedStorage, CrossmintAuth } from \"@crossmint/client-sdk-auth\";\n\n// Create a custom storage provider using react-native-encrypted-storage\nconst storageProvider = new RNEncryptedStorage(EncryptedStorage);\n\n// Initialize auth client with secure storage\nconst crossmintAuth = CrossmintAuth.from(crossmint, {\n  storageProvider\n});\n```\n\n----------------------------------------\n\nTITLE: Getting a session with request object\nDESCRIPTION: This snippet demonstrates how to obtain a user session using the `getSession` method of the `crossmintAuth` object. It retrieves the JWT and user ID from the session using the provided request object. This approach is suitable for frameworks that provide a request object.\nSOURCE: https://github.com/crossmint/crossmint-sdk/blob/main/packages/server/README.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst { jwt, userId } = await crossmintAuth.getSession(request);\n```\n\n----------------------------------------\n\nTITLE: Creating EVM Passkey Smart Wallet\nDESCRIPTION: Creates an EVM smart wallet using passkey authentication.  The chain is set to `base-sepolia` and the signer type is `evm-passkey`.\nSOURCE: https://github.com/crossmint/crossmint-sdk/blob/main/packages/wallets/README.md#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nconst wallet = await crossmintWallets.getOrCreateWallet(\"evm-smart-wallet\", {\n    chain: \"base-sepolia\",\n    adminSigner: {\n        type: \"evm-passkey\",\n        name: \"My Wallet\",\n    },\n});\n```\n\n----------------------------------------\n\nTITLE: Logging out a user\nDESCRIPTION: This snippet shows how to log out a user by calling the `logout` method on the `crossmintAuth` object, passing the request object. This revokes the session and removes the authentication cookies. This approach is used with the Fetch API.\nSOURCE: https://github.com/crossmint/crossmint-sdk/blob/main/packages/server/README.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nawait crossmintAuth.logout(request);\n```\n\n----------------------------------------\n\nTITLE: Creating Browser Wallet\nDESCRIPTION: Creates a smart wallet using a browser wallet (e.g., MetaMask).  It assumes `window.ethereum` is available as an `EIP1193Provider`.  A JWT token is needed for user authentication.\nSOURCE: https://github.com/crossmint/crossmint-sdk/blob/main/packages/client/wallets/smart-wallet/README.md#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { EIP1193Provider } from \"viem\";\n\nconst providerSigner = window.ethereum as EIP1193Provider;\nconst wallet = await sdk.getOrCreateWallet(\n  {\n    jwt: \"<USER_TOKEN>\",\n  },\n  \"base-sepolia\",\n  {\n    signer: providerSigner,\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Creating Passkey Signer\nDESCRIPTION: Creates a passkey signer using the SDK. This signer can then be used during wallet creation. The name parameter is used to identify the signer.\nSOURCE: https://github.com/crossmint/crossmint-sdk/blob/main/packages/client/wallets/smart-wallet/README.md#_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nconst signer = await sdk.createPasskeySigner(\"My Wallet\")\n```\n\n----------------------------------------\n\nTITLE: Using a custom refresh route\nDESCRIPTION: This snippet configures a `CrossmintAuthClient` instance to use a custom refresh route. The `refreshRoute` option is set to `/api/refresh`, instructing the SDK to use this route for refreshing the authentication token.\nSOURCE: https://github.com/crossmint/crossmint-sdk/blob/main/packages/server/README.md#_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nconst crossmintAuth = CrossmintAuthClient.from(crossmint, {\n    refreshRoute: \"/api/refresh\",\n});\n```\n\n----------------------------------------\n\nTITLE: Sending EVM Transaction\nDESCRIPTION: Sends an EVM transaction using the created wallet.  It sends a transaction to a specified address with provided data and value.\nSOURCE: https://github.com/crossmint/crossmint-sdk/blob/main/packages/wallets/README.md#_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nconst transaction = await wallet.sendTransaction({\n    to: \"0x0000000000000000000000000000000000000042\",\n    data: \"0xdeadbeef\",\n    value: BigInt(0),\n});\n```\n\n----------------------------------------\n\nTITLE: Sending Solana Transaction\nDESCRIPTION: Sends a Solana transaction using the created wallet. It constructs a transaction to send a memo instruction. It uses `@solana/web3.js` to construct the transaction.\nSOURCE: https://github.com/crossmint/crossmint-sdk/blob/main/packages/wallets/README.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n    Connection,\n    PublicKey,\n    TransactionInstruction,\n    TransactionMessage,\n    VersionedTransaction,\n} from \"@solana/web3.js\";\n\nconst connection = new Connection(\"https://api.devnet.solana.com\");\nconst memoInstruction = new TransactionInstruction({\n    keys: [\n        {\n            pubkey: new PublicKey(wallet.address),\n            isSigner: true,\n            isWritable: true,\n        },\n    ],\n    data: Buffer.from(\"Hello from Crossmint SDK\", \"utf-8\"),\n    programId: new PublicKey(\"MemoSq4gqABAXKb96qnH8TysNcWxMyWCqXgDLGmfcHr\"),\n});\n\nconst blockhash = (await connection.getLatestBlockhash()).blockhash;\nconst newMessage = new TransactionMessage({\n    payerKey: new PublicKey(wallet.address),\n    recentBlockhash: blockhash,\n    instructions: [memoInstruction],\n});\n\nconst transaction = new VersionedTransaction(newMessage.compileToV0Message());\n\nconst txHash = await wallet.sendTransaction({\n    transaction,\n});\n```\n\n----------------------------------------\n\nTITLE: Importing CrossmintWallet in TypeScript\nDESCRIPTION: This line imports the `CrossmintWallet` component from the `@crossmint/wallets-sdk` package. This allows you to use the Crossmint wallet functionality in your TypeScript or JavaScript code.\nSOURCE: https://github.com/crossmint/crossmint-sdk/blob/main/README.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { CrossmintWallet } from \"@crossmint/wallets-sdk\";\n```\n\n----------------------------------------\n\nTITLE: Sending Transactions\nDESCRIPTION: Sends a transaction from the smart wallet.  Uses `encodeFunctionData` from `viem` to encode the transaction data. Assumes `erc20Abi` is available. Requires the token address, receiver address, and transfer amount.\nSOURCE: https://github.com/crossmint/crossmint-sdk/blob/main/packages/client/wallets/smart-wallet/README.md#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { encodeFunctionData, erc20Abi } from \"viem\";\n\nconst walletClient = wallet.client.wallet;\nconst txHash = await walletClient.sendTransaction({\n  to: \"<TOKEN_ADDRESS>\",\n  data: encodeFunctionData({\n    abi: erc20Abi,\n    functionName: \"transfer\",\n    args: [\"<RECEIVER_ADDRESS>\", \"<TRANSFER_AMOUNT>\"],\n  })\n})\n```\n\n----------------------------------------\n\nTITLE: Running Remix App in Production Mode with npm\nDESCRIPTION: This command runs the Remix application in production mode after it has been built. It starts the server and serves the optimized application files.\nSOURCE: https://github.com/crossmint/crossmint-sdk/blob/main/apps/auth/remix-ssr/README.md#_snippet_2\n\nLANGUAGE: shellscript\nCODE:\n```\nnpm start\n```\n\n----------------------------------------\n\nTITLE: Adding Delegated Signer & Sending Transaction (Solana)\nDESCRIPTION: Adds a delegated signer to a Solana wallet and sends a transaction. It generates a new keypair, adds it as a delegated signer to the wallet, and sends a transaction using this delegated signer.\nSOURCE: https://github.com/crossmint/crossmint-sdk/blob/main/packages/wallets/README.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nconst newSigner = Keypair.generate();\nawait wallet.addDelegatedSigner(keypair.publicKey.toBase58());\nconst txHash = await wallet.sendTransaction({\n    transaction,\n    delegatedSigner: {\n        type: \"solana-keypair\",\n        address: keypair.publicKey.toBase58(),\n        signer: newSigner,\n    },\n});\n```\n\n----------------------------------------\n\nTITLE: Running Next.js Development Server\nDESCRIPTION: This code snippet shows how to start the Next.js development server using different package managers. It uses npm, yarn, pnpm, and bun to run the 'dev' script, which typically starts the development server on localhost:3000.\nSOURCE: https://github.com/crossmint/crossmint-sdk/blob/main/apps/auth/nextjs-ssr/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm run dev\n# or\nyarn dev\n# or\npnpm dev\n# or\nbun dev\n```\n\n----------------------------------------\n\nTITLE: Handling Custom Refresh with Fetch API\nDESCRIPTION: This code snippet shows how to handle a custom refresh route using the Fetch API for request and response objects.  The `handleCustomRefresh` method is called with the request, and the returned response object contains the updated authentication material.\nSOURCE: https://github.com/crossmint/crossmint-sdk/blob/main/packages/server/README.md#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nreturn await crossmintAuth.handleCustomRefresh(request);\n```\n\n----------------------------------------\n\nTITLE: Configuring Cookie Options\nDESCRIPTION: This code configures the `CrossmintAuth` instance with specific cookie options. It sets `httpOnly`, `sameSite`, `secure`, and `domain` options to control the storage and transmission of authentication cookies. `httpOnly` only applies to the refresh token.\nSOURCE: https://github.com/crossmint/crossmint-sdk/blob/main/packages/server/README.md#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nconst crossmintAuth = CrossmintAuth.from(crossmint, {\n    cookieOptions: {\n        httpOnly: true,\n        sameSite: \"Strict\",\n        secure: true,\n        domain: \".example.com\",\n    },\n});\n```\n\n----------------------------------------\n\nTITLE: Creating and Retrieving Wallet with Private Key Signer\nDESCRIPTION: Creates or retrieves a smart wallet using a private key for signing. Requires the `viem` library to create an account from the private key.  A JWT token is needed for user authentication.\nSOURCE: https://github.com/crossmint/crossmint-sdk/blob/main/packages/client/wallets/smart-wallet/README.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { SmartWalletSDK } from \"@crossmint/client-sdk-smart-wallet\";\nimport { privateKeyToAccount } from \"viem\";\n\nconst sdk = SmartWalletSDK.init({ clientApiKey: \"<YOUR_API_KEY>\" });\nconst account = privateKeyToAccount(privateKey);\n\nconst wallet = await sdk.getOrCreateWallet(\n  {\n    jwt: \"<USER_TOKEN>\",\n  },\n  \"base-sepolia\",\n  {\n    signer: {\n      type: \"VIEM_ACCOUNT\",\n      account,\n    },\n  }\n);\n\nconst address = wallet.address;\n```\n\n----------------------------------------\n\nTITLE: Reinstalling Dependencies in Your Project\nDESCRIPTION: This command reinstalls the dependencies in your project. This is required to incorporate the changes made in the modified package.  It assumes you run this command from the root directory.\nSOURCE: https://github.com/crossmint/crossmint-sdk/blob/main/README.md#_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\n# From the root directory\npnpm install\n```\n\n----------------------------------------\n\nTITLE: Creating EVM Keypair Smart Wallet\nDESCRIPTION: Creates an EVM smart wallet using a generated keypair.  It uses `viem/accounts` to generate a private key and convert it to an account, then uses that account as the signer.\nSOURCE: https://github.com/crossmint/crossmint-sdk/blob/main/packages/wallets/README.md#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { generatePrivateKey, privateKeyToAccount } from \"viem/accounts\";\n\nconst account = privateKeyToAccount(generatePrivateKey());\nconst wallet = await crossmintWallets.getOrCreateWallet(\"evm-smart-wallet\", {\n    chain: \"base-sepolia\",\n    adminSigner: {\n        type: \"evm-keypair\",\n        address: account.address,\n        signer: {\n            type: \"viem_v2\",\n            account,\n        },\n    },\n});\n```\n\n----------------------------------------\n\nTITLE: Custom Storage Provider Implementation\nDESCRIPTION: Illustrates implementing a custom storage provider by implementing the `StorageProvider` interface. The `CustomStorage` class defines `get`, `set`, and `remove` methods for handling storage operations.\nSOURCE: https://github.com/crossmint/crossmint-sdk/blob/main/packages/client/ui/react-native/README.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { CrossmintAuthProvider, type StorageProvider } from \"@crossmint/client-sdk-react-native-ui\";\n\n// Implement your custom storage provider\nclass CustomStorage implements StorageProvider {\n  async get(key: string): Promise<string | undefined> {\n    // Your implementation\n  }\n\n  async set(key: string, value: string, expiresAt?: string): Promise<void> {\n    // Your implementation\n  }\n\n  async remove(key: string): Promise<void> {\n    // Your implementation\n  }\n}\n\n// Use your custom storage provider\nfunction App() {\n  const customStorage = new CustomStorage();\n\n  return (\n    <CrossmintProvider apiKey=\"YOUR_API_KEY\">\n      <CrossmintAuthProvider customStorageProvider={customStorage}>\n        {/* Your app content */}\n      </CrossmintAuthProvider>\n    </CrossmintProvider>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Private Key Wallet\nDESCRIPTION: Creates a smart wallet using a private key. The `privateKeyToAccount` function from `viem` is used to create an account from the private key.  A JWT token is necessary for authentication.\nSOURCE: https://github.com/crossmint/crossmint-sdk/blob/main/packages/client/wallets/smart-wallet/README.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { privateKeyToAccount } from \"viem\";\n\nconst account = privateKeyToAccount(privateKey);\nconst wallet = await sdk.getOrCreateWallet(\n  {\n    jwt: \"<USER_TOKEN>\",\n  },\n  \"base-sepolia\",\n  {\n    signer: {\n      type: \"VIEM_ACCOUNT\",\n      account,\n    },\n  }\n);\nconst address = walletClient.getAddress();\n```\n\n----------------------------------------\n\nTITLE: Clone and Install Dependencies\nDESCRIPTION: This bash snippet demonstrates how to clone the repository and install the necessary dependencies using pnpm. It assumes that pnpm is already installed globally.\nSOURCE: https://github.com/crossmint/crossmint-sdk/blob/main/apps/wallets/smart-wallet/react/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone <repository-url>\npnpm i\n```\n\n----------------------------------------\n\nTITLE: Custom Logout Route - Node.js API\nDESCRIPTION: This code snippet shows how to implement a custom logout route within a Node.js environment. The `logout` function is called with the request and response objects (`req` and `res`). The `res.end()` call signals the end of the response to the client.\nSOURCE: https://github.com/crossmint/crossmint-sdk/blob/main/packages/server/README.md#_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nawait crossmintAuth.logout(req, res);\nres.end();\n```\n\n----------------------------------------\n\nTITLE: Installing Smart Wallet SDK with pnpm\nDESCRIPTION: This command installs the `@crossmint/client-sdk-smart-wallet` package using pnpm. This is an alternative to npm for package installation.\nSOURCE: https://github.com/crossmint/crossmint-sdk/blob/main/packages/client/wallets/smart-wallet/README.md#_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\npnpm add @crossmint/client-sdk-smart-wallet\n```\n\n----------------------------------------\n\nTITLE: Configure Custom Logout Route in Typescript\nDESCRIPTION: Configures a custom logout route for the CrossmintAuth SDK, as the SDK doesn't have access to the HttpOnly cookies when they are used.\nSOURCE: https://github.com/crossmint/crossmint-sdk/blob/main/packages/client/auth/README.md#_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nconst crossmintAuth = CrossmintAuth.from(crossmint, {\n    logoutRoute: \"/api/logout\",\n});\n```\n\n----------------------------------------\n\nTITLE: Rebuilding a Modified Package\nDESCRIPTION: This command is used to rebuild a specific package after making changes.  It assumes you are already inside the package directory where you want to build.\nSOURCE: https://github.com/crossmint/crossmint-sdk/blob/main/README.md#_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\n# Inside the package directory\npnpm build\n```\n\n----------------------------------------\n\nTITLE: Creating Solana Smart Wallet\nDESCRIPTION: Creates a Solana smart wallet using a generated keypair. It requires the `@solana/web3.js` library. The `getOrCreateWallet` method is used to create the wallet with a `solana-keypair` signer.\nSOURCE: https://github.com/crossmint/crossmint-sdk/blob/main/packages/wallets/README.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Keypair } from \"@solana/web3.js\";\n\nconst keypair = Keypair.generate();\nconst wallet = await crossmintWallets.getOrCreateWallet(\"solana-smart-wallet\", {\n    adminSigner: {\n        type: \"solana-keypair\",\n        signer: keypair,\n        address: keypair.publicKey.toBase58(),\n    },\n});\n```\n\n----------------------------------------\n\nTITLE: Run End-to-End Tests\nDESCRIPTION: This bash snippet shows how to run the end-to-end tests for the application using pnpm.\nSOURCE: https://github.com/crossmint/crossmint-sdk/blob/main/apps/wallets/smart-wallet/react/README.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\npnpm test:e2e\n```\n\n----------------------------------------\n\nTITLE: Creating Wallet with Passkey Signer\nDESCRIPTION: Creates a wallet using the passkey signer created earlier. The JWT is used for authentication, and the network specifies the blockchain to use.\nSOURCE: https://github.com/crossmint/crossmint-sdk/blob/main/packages/client/wallets/smart-wallet/README.md#_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nconst wallet = await sdk.getOrCreateWallet(\n  {\n    jwt: \"<USER_TOKEN>\",\n  },\n  \"<NETWORK>\",\n  {\n    signer,\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies with pnpm\nDESCRIPTION: This command navigates to the `crossmint-sdk` directory and installs all the necessary dependencies using pnpm. This step is crucial for building and running the SDK.\nSOURCE: https://github.com/crossmint/crossmint-sdk/blob/main/README.md#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\ncd crossmint-sdk\npnpm install\n```\n\n----------------------------------------\n\nTITLE: Install Crossmint React Native SDK\nDESCRIPTION: Installs the Crossmint React Native SDK along with necessary dependencies (expo-secure-store and expo-web-browser) using pnpm.\nSOURCE: https://github.com/crossmint/crossmint-sdk/blob/main/packages/client/ui/react-native/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npnpm add @crossmint/client-sdk-react-native-ui expo-secure-store expo-web-browser\n```\n\n----------------------------------------\n\nTITLE: Navigating to the demo app directory\nDESCRIPTION: This command changes the current directory to the demo app directory. This is the first step in setting up the environment for the demo application.\nSOURCE: https://github.com/crossmint/crossmint-sdk/blob/main/packages/client/ui/react-ui/README.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ncd apps/wallets/smart-wallet/next\n```\n\n----------------------------------------\n\nTITLE: Installing Crossmint Client SDK\nDESCRIPTION: This command adds the Crossmint Client SDK React UI to your project using pnpm. It's a prerequisite for using the components and functionalities provided by the SDK.\nSOURCE: https://github.com/crossmint/crossmint-sdk/blob/main/packages/client/ui/react-ui/README.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\npnpm add @crossmint/client-sdk-react-ui\n```\n\n----------------------------------------\n\nTITLE: Installing Wallets SDK using pnpm\nDESCRIPTION: This command installs the `@crossmint/wallets-sdk` package using pnpm. This is a prerequisite for using the Crossmint wallet functionality in your project.\nSOURCE: https://github.com/crossmint/crossmint-sdk/blob/main/README.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\npnpm add @crossmint/wallets-sdk\n```\n\n----------------------------------------\n\nTITLE: Initializing SmartWalletSDK\nDESCRIPTION: Initializes the SmartWalletSDK with a client API key. The API key is required for authenticating with the Crossmint service.\nSOURCE: https://github.com/crossmint/crossmint-sdk/blob/main/packages/client/wallets/smart-wallet/README.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst sdk = SmartWalletSDK.init({ clientApiKey: \"<YOUR_API_KEY>\" });\n```\n\n----------------------------------------\n\nTITLE: Cloning the Crossmint SDK Repository\nDESCRIPTION: This command clones the Crossmint SDK repository from GitHub to your local machine. This is the first step in building the SDK locally.\nSOURCE: https://github.com/crossmint/crossmint-sdk/blob/main/README.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ngit clone https://github.com/Crossmint/crossmint-sdk.git\n```\n\n----------------------------------------\n\nTITLE: Importing useWallet hook\nDESCRIPTION: This snippet imports the `useWallet` hook from the `@crossmint/client-sdk-react-ui` package. The `useWallet` hook handles wallet creation and management within a React application.\nSOURCE: https://github.com/crossmint/crossmint-sdk/blob/main/packages/client/ui/react-ui/README.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useWallet } from \"@crossmint/client-sdk-react-ui\";\n```\n\n----------------------------------------\n\nTITLE: Prerequisites: Node.js and pnpm\nDESCRIPTION: These prerequisites are required for building the Crossmint SDK locally. Node.js version 20 or higher and pnpm package manager must be installed on your system.\nSOURCE: https://github.com/crossmint/crossmint-sdk/blob/main/README.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nnode >= 20\npnpm\n```\n\n----------------------------------------\n\nTITLE: Installing Smart Wallet SDK with npm\nDESCRIPTION: This command installs the `@crossmint/client-sdk-smart-wallet` package using npm.  This is a prerequisite to using the SDK in your project.\nSOURCE: https://github.com/crossmint/crossmint-sdk/blob/main/packages/client/wallets/smart-wallet/README.md#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm install @crossmint/client-sdk-smart-wallet\n```\n\n----------------------------------------\n\nTITLE: Using useAuth Hook (TypeScript)\nDESCRIPTION: This TypeScript code snippet shows how to use the `useAuth` hook from the `@crossmint/client-sdk-react-ui` to access authentication functionality. It provides login and logout buttons based on authentication status.\nSOURCE: https://github.com/crossmint/crossmint-sdk/blob/main/apps/wallets/smart-wallet/next/README.md#_snippet_5\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { useAuth } from \"@crossmint/client-sdk-react-ui\";\n\nexport default function Home() {\n    const { login, logout, jwt } = useAuth();\n\n    return <div>{jwt != null ? <button onClick={logout}>Log out</button> : <button onClick={login}>Log in</button>}</div>;\n}\n```\n\n----------------------------------------\n\nTITLE: StorageProvider Interface in Typescript\nDESCRIPTION: Defines the StorageProvider interface that custom storage providers must implement.  It includes methods for getting, setting, and removing values by key.\nSOURCE: https://github.com/crossmint/crossmint-sdk/blob/main/packages/client/auth/README.md#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface StorageProvider {\n  get(key: string): string | undefined | Promise<string | undefined>;\n  set(key: string, value: string, expiresAt?: string): void | Promise<void>;\n  remove(key: string): void | Promise<void>;\n}\n```\n\n----------------------------------------\n\nTITLE: Installing the SDK\nDESCRIPTION: This command installs the @crossmint/server-sdk package using npm. This is a necessary first step to use the SDK in your project.\nSOURCE: https://github.com/crossmint/crossmint-sdk/blob/main/packages/server/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @crossmint/server-sdk\n```\n\n----------------------------------------\n\nTITLE: Running iOS Application\nDESCRIPTION: This command starts the iOS application using the pnpm package manager. It assumes that the necessary iOS development environment is set up.\nSOURCE: https://github.com/crossmint/crossmint-sdk/blob/main/apps/wallets/smart-wallet/expo/README.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npnpm run ios\n```\n\n----------------------------------------\n\nTITLE: Robots.txt Configuration\nDESCRIPTION: This snippet configures the robots.txt file to disallow access to specific parts of the website for all user agents. The 'User-agent: *' directive applies the following rules to all robots. In this example, no paths are disallowed, which means all robots are allowed to crawl the entire site.\nSOURCE: https://github.com/crossmint/crossmint-sdk/blob/main/apps/wallets/smart-wallet/react/public/robots.txt#_snippet_0\n\nLANGUAGE: txt\nCODE:\n```\nUser-agent: *\nDisallow:\n```\n\n----------------------------------------\n\nTITLE: Installing @crossmint/client-sdk-auth via npm\nDESCRIPTION: Installs the @crossmint/client-sdk-auth package using npm. This command adds the SDK as a dependency to your project.\nSOURCE: https://github.com/crossmint/crossmint-sdk/blob/main/packages/client/auth/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @crossmint/client-sdk-auth\n```\n\n----------------------------------------\n\nTITLE: Crossmint API Key Environment Variable\nDESCRIPTION: This snippet shows how to define the `EXPO_PUBLIC_CROSSMINT_API_KEY` environment variable in a `.env` file. It requires a valid Crossmint API key for the application to function correctly.\nSOURCE: https://github.com/crossmint/crossmint-sdk/blob/main/apps/wallets/smart-wallet/expo/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nEXPO_PUBLIC_CROSSMINT_API_KEY=\n```\n\n----------------------------------------\n\nTITLE: Custom Logout Route - Fetch API\nDESCRIPTION: This snippet shows how to handle a custom logout route when using the Fetch API for requests. It calls the `logout` method of the `crossmintAuth` object and returns the response. The response contains the logout instructions.\nSOURCE: https://github.com/crossmint/crossmint-sdk/blob/main/packages/server/README.md#_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nreturn await crossmintAuth.logout(request);\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies using pnpm\nDESCRIPTION: This command installs the project dependencies using the pnpm package manager. It is a prerequisite for running the application.\nSOURCE: https://github.com/crossmint/crossmint-sdk/blob/main/apps/wallets/smart-wallet/expo/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npnpm i\n```\n\n----------------------------------------\n\nTITLE: CrossmintAuthProvider with SecureStorage\nDESCRIPTION: Sets up the CrossmintAuthProvider using the default SecureStorage for secure authentication token storage. It wraps the app content within the provider.\nSOURCE: https://github.com/crossmint/crossmint-sdk/blob/main/packages/client/ui/react-native/README.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { CrossmintProvider, CrossmintAuthProvider } from \"@crossmint/client-sdk-react-native-ui\";\n\nexport default function App() {\n  return (\n    <CrossmintProvider\n      apiKey=\"YOUR_API_KEY\"\n    >\n      <CrossmintAuthProvider>\n        {/* Your app content */}\n      </CrossmintAuthProvider>\n    </CrossmintProvider>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Crossmint Wallets SDK\nDESCRIPTION: Installs the Crossmint Wallets SDK using npm or pnpm. This command adds the SDK as a project dependency, allowing you to use its functionalities for interacting with Crossmint wallets.\nSOURCE: https://github.com/crossmint/crossmint-sdk/blob/main/packages/wallets/README.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install @crossmint/wallets-sdk\n# or\npnpm add @crossmint/wallets-sdk\n```\n\n----------------------------------------\n\nTITLE: Setting the environment variable\nDESCRIPTION: This command sets the environment variable NEXT_PUBLIC_CROSSMINT_AUTH_SMART_WALLET_API_KEY to your API key. This API key is required to run the demo application and interact with the Crossmint services.\nSOURCE: https://github.com/crossmint/crossmint-sdk/blob/main/packages/client/ui/react-ui/README.md#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nNEXT_PUBLIC_CROSSMINT_AUTH_SMART_WALLET_API_KEY=your_api_key_here\n```\n\n----------------------------------------\n\nTITLE: Setting the API Key (Bash)\nDESCRIPTION: This shows how to set the Crossmint API key as an environment variable in the `.env` file. Replace `ENTER YOUR CROSSMINT API KEY` with your actual API key.\nSOURCE: https://github.com/crossmint/crossmint-sdk/blob/main/apps/wallets/smart-wallet/next/README.md#_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\nNEXT_PUBLIC_CROSSMINT_AUTH_SMART_WALLET_API_KEY=\"ENTER YOUR CROSSMINT API KEY\";\n```\n\n----------------------------------------\n\nTITLE: Install Crossmint Client SDK Vanilla UI\nDESCRIPTION: This command adds the Crossmint Client SDK Vanilla UI package to your project using pnpm, a package manager.  It's required for using Crossmint's features in a vanilla JavaScript environment. Make sure pnpm is installed and configured correctly before running this command.\nSOURCE: https://github.com/crossmint/crossmint-sdk/blob/main/packages/client/ui/vanilla-ui/README.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\npnpm add @crossmint/client-sdk-vanilla-ui\n```\n\n----------------------------------------\n\nTITLE: Environment Variables Configuration\nDESCRIPTION: This plaintext snippet displays the necessary environment variables for configuring the application. The variables are related to Crossmint API keys, Firebase credentials, and Web3Auth client and verifier IDs for both production and staging environments. Google test account credentials are also specified.\nSOURCE: https://github.com/crossmint/crossmint-sdk/blob/main/apps/wallets/smart-wallet/react/README.md#_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nREACT_APP_CROSSMINT_API_KEY_PROD=your_crossmint_api_key_for_production\nREACT_APP_CROSSMINT_API_KEY_STG=your_crossmint_api_key_for_staging\n\nREACT_APP_FIREBASE_API_KEY=your_firebase_api_key\nREACT_APP_FIREBASE_AUTH_DOMAIN=your_firebase_auth_domain\nREACT_APP_FIREBASE_PROJECT_ID=your_firebase_project_id\nREACT_APP_FIREBASE_STORAGE_BUCKET=your_firebase_storage_bucket\nREACT_APP_FIREBASE_MESSAGING_SENDER_ID=your_firebase_messaging_sender_id\nREACT_APP_FIREBASE_APP_ID=your_firebase_app_id\n\nREACT_APP_WEB3_AUTH_CLIENT_ID_PROD=your_web3_auth_client_id_for_production\nREACT_APP_WEB3_AUTH_CLIENT_ID_STG=your_web3_auth_client_id_for_staging\nREACT_APP_WEB3_AUTH_NETWORK_PROD=your_web3_auth_network_for_production\nREACT_APP_WEB3_AUTH_NETWORK_STG=your_web3_auth_network_for_staging\nREACT_APP_WEB3_AUTH_VERIFIER_ID_PROD=your_web3_auth_verifier_id_for_production\nREACT_APP_WEB3_AUTH_VERIFIER_ID_STG=your_web3_auth_verifier_id_for_staging\n\nGOOGLE_TEST_EMAIL=\nGOOGLE_TEST_PASSWORD=\nGOOGLE_TEST_ACCOUNT_PRIVATE_KEY=\n```\n\n----------------------------------------\n\nTITLE: Building and starting the demo application\nDESCRIPTION: These commands navigate to the demo app directory, install dependencies, build the application, and start the application. This allows users to run and test the functionalities of the Crossmint Smart Wallets demo application.\nSOURCE: https://github.com/crossmint/crossmint-sdk/blob/main/packages/client/ui/react-ui/README.md#_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\ncd apps/wallets/smart-wallet/next\npnpm i\npnpm build\npnpm start\n```\n\n----------------------------------------\n\nTITLE: Installing Expo SecureStore\nDESCRIPTION: Installs the expo-secure-store package using Expo. Required to use ExpoSecureStorage.\nSOURCE: https://github.com/crossmint/crossmint-sdk/blob/main/packages/client/auth/README.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpx expo install expo-secure-store\n```\n\n----------------------------------------\n\nTITLE: Starting Development Server with npm\nDESCRIPTION: This command starts the Remix development server using npm. It allows developers to make changes to the code and see the updates reflected in real-time.\nSOURCE: https://github.com/crossmint/crossmint-sdk/blob/main/apps/auth/remix-ssr/README.md#_snippet_0\n\nLANGUAGE: shellscript\nCODE:\n```\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Installing react-native-encrypted-storage\nDESCRIPTION: Installs the react-native-encrypted-storage package using npm. Required to use RNEncryptedStorage.\nSOURCE: https://github.com/crossmint/crossmint-sdk/blob/main/packages/client/auth/README.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nnpm install react-native-encrypted-storage\n```\n\n----------------------------------------\n\nTITLE: Installing PNPM Packages (Shell)\nDESCRIPTION: This command uses PNPM (a package manager) to install all the necessary dependencies for the project.  PNPM is required as a prerequisite.\nSOURCE: https://github.com/crossmint/crossmint-sdk/blob/main/apps/wallets/smart-wallet/next/README.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\npnpm i\n```\n\n----------------------------------------\n\nTITLE: Run Development Server\nDESCRIPTION: This bash snippet demonstrates how to start the development server using pnpm. It assumes the necessary dependencies are installed and the environment variables are configured.\nSOURCE: https://github.com/crossmint/crossmint-sdk/blob/main/apps/wallets/smart-wallet/react/README.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Building Remix App for Production with npm\nDESCRIPTION: This command builds the Remix application for production. It compiles the code, optimizes assets, and prepares the application for deployment to a production environment.\nSOURCE: https://github.com/crossmint/crossmint-sdk/blob/main/apps/auth/remix-ssr/README.md#_snippet_1\n\nLANGUAGE: shellscript\nCODE:\n```\nnpm run build\n```\n\n----------------------------------------\n\nTITLE: Run Interactive UI Test Mode\nDESCRIPTION: This bash snippet demonstrates how to start the interactive UI mode for end-to-end testing using pnpm.\nSOURCE: https://github.com/crossmint/crossmint-sdk/blob/main/apps/wallets/smart-wallet/react/README.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\npnpm test:e2e-ui\n```\n\n----------------------------------------\n\nTITLE: Running Android Application\nDESCRIPTION: This command starts the Android application using the pnpm package manager. It assumes that the necessary Android development environment is set up.\nSOURCE: https://github.com/crossmint/crossmint-sdk/blob/main/apps/wallets/smart-wallet/expo/README.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\npnpm run android\n```\n\n----------------------------------------\n\nTITLE: Running Web Application\nDESCRIPTION: This command starts the web application using the pnpm package manager. It is intended for running the application in a web browser.\nSOURCE: https://github.com/crossmint/crossmint-sdk/blob/main/apps/wallets/smart-wallet/expo/README.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\npnpm run web\n```\n\n----------------------------------------\n\nTITLE: Building all Crossmint packages using pnpm\nDESCRIPTION: This command builds all the packages within the Crossmint SDK. This process compiles the code and prepares the packages for use.\nSOURCE: https://github.com/crossmint/crossmint-sdk/blob/main/README.md#_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\npnpm build\n```\n\n----------------------------------------\n\nTITLE: Starting the Development Server (Shell)\nDESCRIPTION: This command starts the Next.js development server using PNPM, allowing you to view the application in your browser.\nSOURCE: https://github.com/crossmint/crossmint-sdk/blob/main/apps/wallets/smart-wallet/next/README.md#_snippet_3\n\nLANGUAGE: Shell\nCODE:\n```\npnpm dev\n```\n\n----------------------------------------\n\nTITLE: Cloning the Crossmint SDK Repository (Shell)\nDESCRIPTION: This command clones the Crossmint SDK repository from GitHub to your local machine. This is the first step in setting up the Smart Wallets Demo.\nSOURCE: https://github.com/crossmint/crossmint-sdk/blob/main/apps/wallets/smart-wallet/next/README.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\ngit clone https://github.com/Crossmint/crossmint-sdk.git\n```"
  }
]