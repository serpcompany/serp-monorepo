[
  {
    "owner": "get-convex",
    "repo": "agent",
    "content": "TITLE: Basic Agent Usage Example in TypeScript\nDESCRIPTION: Demonstrates how to define an agent using the AI SDK syntax, create a thread, generate text responses, and continue existing threads. Shows the fundamental pattern for agent interactions in Convex actions.\nSOURCE: https://github.com/get-convex/agent/blob/main/README.md#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// Define an agent similarly to the AI SDK\nconst supportAgent = new Agent(components.agent, {\n  chat: openai.chat(\"gpt-4o-mini\"),\n  textEmbedding: openai.embedding(\"text-embedding-3-small\"),\n  instructions: \"You are a helpful assistant.\",\n  tools: { accountLookup, fileTicket, sendEmail },\n});\n\n// Use the agent from within a normal action:\nexport const createThread = action({\n  args: { prompt: v.string() },\n  handler: async (ctx, { prompt }) => {\n    const { threadId, thread } = await supportAgent.createThread(ctx);\n    const result = await thread.generateText({ prompt });\n    return { threadId, text: result.text };\n  },\n});\n\n// Pick up where you left off, with the same or a different agent:\nexport const continueThread = action({\n  args: { prompt: v.string(), threadId: v.string() },\n  handler: async (ctx, { prompt, threadId }) => {\n    // This includes previous message history from the thread automatically.\n    const { thread } = await anotherAgent.continueThread(ctx, { threadId });\n    const result = await thread.generateText({ prompt });\n    return result.text;\n  },\n});\n\n// Or use it within a workflow, specific to a user:\nexport const supportAgentStep = supportAgent.asAction({ maxSteps: 10 });\n\nconst workflow = new WorkflowManager(components.workflow);\nconst s = internal.example; // where steps are defined\n\nexport const supportAgentWorkflow = workflow.define({\n  args: { prompt: v.string(), userId: v.string(), threadId: v.string() },\n  handler: async (step, { prompt, userId, threadId }) => {\n    const suggestion = await step.runAction(s.supportAgentStep, {\n      threadId, generateText: { prompt },\n    });\n    const polished = await step.runAction(s.adaptSuggestionForUser, {\n      suggestion, userId,\n    });\n    await step.runMutation(s.sendUserMessage, { userId, message: polished.message });\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring an Agent with Options in TypeScript\nDESCRIPTION: Detailed example of configuring an Agent with various options including chat model, embedding model, instructions, tools, context options, storage options, and execution limits.\nSOURCE: https://github.com/get-convex/agent/blob/main/README.md#2025-04-20_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { v } from \"convex/values\";\nimport { components } from \"./_generated/api\";\nimport { Agent, createTool } from \"@convex-dev/agent\";\nimport { openai } from \"@ai-sdk/openai\";\nimport { tool } from \"ai\";\n\n// Define an agent similarly to the AI SDK\nconst supportAgent = new Agent(components.agent, {\n  // Note: all of these are optional.\n  chat: openai.chat(\"gpt-4o-mini\"),\n  // Used for vector search (RAG).\n  textEmbedding: openai.embedding(\"text-embedding-3-small\"),\n  // Will be the default system prompt if not overriden.\n  instructions: \"You are a helpful assistant.\",\n  tools: {\n    // Standard AI SDK tool\n    myTool: tool({ description, parameters, execute: () => {}}),\n    // Convex tool\n    myConvexTool: createTool({\n      description: \"My Convex tool\",\n      args: v.object({...}),\n      handler: async (ctx, args) => {\n        return \"Hello, world!\";\n      },\n    }),\n  },\n  // Used for fetching context messages.\n  contextOptions: {\n    // Whether to include tool messages in the context.\n    includeToolCalls: true,\n    // How many recent messages to include. These are added after the search\n    // messages, and do not count against the search limit.\n    recentMessages: 10,\n    // Whether to search across other threads for relevant messages.\n    // By default, only the current thread is searched.\n    searchOtherThreads: true,\n    // Options for searching messages.\n    searchOptions: {\n      // The maximum number of messages to fetch.\n      limit: 100,\n      // Whether to use text search to find messages.\n      textSearch: true,\n      // Whether to use vector search to find messages.\n      vectorSearch: true,\n      // Note, this is after the limit is applied.\n      // E.g. this will quadruple the number of messages fetched.\n      // (two before, and one after each message found in the search)\n      messageRange: { before: 2, after: 1 },\n    },\n  },\n  // Used for storing messages.\n  storageOptions: {\n    // Defaults to false, allowing you to pass in arbitrary context that will\n    // be in addition to automatically fetched content.\n    // Pass true to have all input messages saved to the thread history.\n    saveAllInputMessages: true,\n    // Defaults to true\n    saveOutputMessages: true,\n  },\n  // Used for limiting the number of steps when tool calls are involved.\n  maxSteps: 10,\n  // Used for limiting the number of retries when a tool call fails.\n  maxRetries: 3,\n});\n```\n\n----------------------------------------\n\nTITLE: Integrating Agent with Convex Workflow\nDESCRIPTION: Example of integrating an agent with the Convex Workflow component to run with retries and guaranteed completion. The workflow runs the agent, processes its output, and sends a message to the user.\nSOURCE: https://github.com/get-convex/agent/blob/main/README.md#2025-04-20_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nconst workflow = new WorkflowManager(components.workflow);\nconst s = internal.example; // where steps are defined\n\nexport const supportAgentWorkflow = workflow.define({\n  args: { prompt: v.string(), userId: v.string(), threadId: v.string() },\n  handler: async (step, { prompt, userId, threadId }) => {\n    const suggestion = await step.runAction(s.supportAgentStep, {\n      threadId, userId, generateText: { prompt },\n    });\n    const polished = await step.runAction(s.adaptSuggestionForUser, {\n      threadId, userId, generateText: { prompt: suggestion },\n    });\n    await step.runMutation(s.sendUserMessage, { userId, message: polished.message });\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a Thread with Convex Agent\nDESCRIPTION: Example of creating a new thread for a user and generating an initial response. The thread is associated with a user ID and returns both the thread ID and initial response text.\nSOURCE: https://github.com/get-convex/agent/blob/main/README.md#2025-04-20_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// Use the agent from within a normal action:\nexport const createThread = action({\n  args: { prompt: v.string(), userId: v.string() },\n  handler: async (ctx, { prompt, userId }): Promise<{ threadId: string; initialResponse: string }> => {\n    // Start a new thread for the user.\n    const { threadId, thread } = await supportAgent.createThread(ctx, { userId });\n    const result = await thread.generateText({ prompt });\n    return { threadId, initialResponse: result.text };\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Continuing an Existing Thread with Convex Agent\nDESCRIPTION: Example of continuing an existing conversation thread using a thread ID. The function automatically includes previous message history from the thread and returns the new response text.\nSOURCE: https://github.com/get-convex/agent/blob/main/README.md#2025-04-20_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n// Pick up where you left off:\nexport const continueThread = action({\n  args: { prompt: v.string(), threadId: v.string() },\n  handler: async (ctx, { prompt, threadId }): Promise<string> => {\n    // This includes previous message history from the thread automatically.\n    const { thread } = await supportAgent.continueThread(ctx, { threadId });\n    const result = await thread.generateText({ prompt });\n    return result.text;\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Exposing an Agent as a Convex Action\nDESCRIPTION: Shows how to expose an agent as a Convex action that can be called from other actions. This pattern allows for reusing the agent across different parts of the application.\nSOURCE: https://github.com/get-convex/agent/blob/main/README.md#2025-04-20_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nexport const supportAgentStep = supportAgent.asAction({ maxSteps: 10 });\n\n// Then from within another action:\nexport const callSupportAgent = action({\n  args: { prompt: v.string(), userId: v.string(), threadId: v.string() },\n  handler: async (ctx, { prompt, userId, threadId }) => {\n    const suggestion = await ctx.runAction(s.supportAgentStep, {\n      threadId, userId, generateText: { prompt },\n    });\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Fetching Thread History from Convex Agent\nDESCRIPTION: Shows how to retrieve the message history for a specific thread using the Agent component's getThreadMessages query.\nSOURCE: https://github.com/get-convex/agent/blob/main/README.md#2025-04-20_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nconst messages = await ctx.runQuery(\n  components.agent.messages.getThreadMessages,\n  { threadId }\n);\n```\n\n----------------------------------------\n\nTITLE: Installing the Convex Agent Component\nDESCRIPTION: Instructions for installing the Convex Agent Component package and configuring it in a Convex project via the convex.config.ts file.\nSOURCE: https://github.com/get-convex/agent/blob/main/README.md#2025-04-20_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nnpm install @convex-dev/agent\n```\n\nLANGUAGE: typescript\nCODE:\n```\n// convex/convex.config.ts\nimport { defineApp } from \"convex/server\";\nimport agent from \"@convex-dev/agent/convex.config\";\n\nconst app = defineApp();\napp.use(agent);\n\nexport default app;\n```\n\n----------------------------------------\n\nTITLE: Generating Text for a User Without a Thread\nDESCRIPTION: Example of generating text for a user without creating an associated thread. This is useful for one-off interactions where thread history isn't needed.\nSOURCE: https://github.com/get-convex/agent/blob/main/README.md#2025-04-20_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nconst result = await supportAgent.generateText(ctx, { userId }, { prompt });\n```\n\n----------------------------------------\n\nTITLE: Querying Thread Messages in TypeScript\nDESCRIPTION: Retrieves messages from a thread using the agent's message query component with thread ID and search options.\nSOURCE: https://github.com/get-convex/agent/blob/main/README.md#2025-04-20_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nconst messages = await ctx.runQuery(\n  components.agent.messages.getThreadMessages,\n  { threadId, ...searchOptions }\n);\n```\n\n----------------------------------------\n\nTITLE: Saving Messages to Thread\nDESCRIPTION: Saves a batch of messages to a specific thread for a user using the agent's save functionality.\nSOURCE: https://github.com/get-convex/agent/blob/main/README.md#2025-04-20_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nconst messages = await agent.saveMessages(ctx, { threadId, userId, messages });\n```\n\n----------------------------------------\n\nTITLE: Saving Steps to Thread\nDESCRIPTION: Saves workflow steps to a thread for a specific user using the agent's step saving functionality.\nSOURCE: https://github.com/get-convex/agent/blob/main/README.md#2025-04-20_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nconst messages = await agent.saveSteps(ctx, { threadId, userId, step });\n```\n\n----------------------------------------\n\nTITLE: Completing Message Status\nDESCRIPTION: Updates a message status from pending to complete and handles associated steps with success result.\nSOURCE: https://github.com/get-convex/agent/blob/main/README.md#2025-04-20_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nconst messages = await agent.completeMessage(ctx, {\n  threadId,\n  messageId,\n  result: { kind: \"success\" }\n});\n```\n\n----------------------------------------\n\nTITLE: Inserting Embeddings Batch\nDESCRIPTION: Inserts a batch of vector embeddings with model, thread, and user information.\nSOURCE: https://github.com/get-convex/agent/blob/main/README.md#2025-04-20_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\nconst messages = await ctx.runQuery(\n  components.agent.embeddings.insertBatch, {\n    vectorDimension: 1536,\n    vectors: [\n      { model: \"gpt-4o-mini\", kind: \"thread\", userId: \"123\", threadId: \"123\", vector: embedding, },\n    ],\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Paginating Embeddings\nDESCRIPTION: Retrieves paginated embeddings with specified vector dimension, cursor, and limit parameters.\nSOURCE: https://github.com/get-convex/agent/blob/main/README.md#2025-04-20_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nconst messages = await ctx.runQuery(\n  components.agent.embeddings.paginate,\n  { vectorDimension: 1536, cursor: null, limit: 10 }\n);\n```\n\n----------------------------------------\n\nTITLE: Deleting Thread Embeddings Batch\nDESCRIPTION: Deletes a batch of embeddings for a specific thread with target model and dimension parameters.\nSOURCE: https://github.com/get-convex/agent/blob/main/README.md#2025-04-20_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nconst messages = await ctx.runQuery(\n  components.agent.embeddings.deleteBatchForThread,\n  { vectorDimension: 1536, targetModel: \"gpt-4o-mini\", threadId: \"123\", cursor: null, limit: 10 }\n);\n```\n\n----------------------------------------\n\nTITLE: Updating Embeddings Batch\nDESCRIPTION: Updates existing embeddings with new vector data using embedding IDs.\nSOURCE: https://github.com/get-convex/agent/blob/main/README.md#2025-04-20_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\nconst messages = await ctx.runQuery(components.agent.embeddings.updateBatch, {\n  vectors: [\n    { model: \"gpt-4o-mini\", vector: embedding, id: msg.embeddingId },\n  ],\n});\n```\n\n----------------------------------------\n\nTITLE: Deleting Embeddings by IDs\nDESCRIPTION: Deletes multiple embeddings using their unique identifiers.\nSOURCE: https://github.com/get-convex/agent/blob/main/README.md#2025-04-20_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\nconst messages = await ctx.runQuery(components.agent.embeddings.deleteBatch, {\n  ids: [embeddingId1, embeddingId2],\n});\n```\n\n----------------------------------------\n\nTITLE: Fixing Circular Dependencies in Workflows\nDESCRIPTION: Example of adding explicit return types to prevent circular dependencies in Convex functions.\nSOURCE: https://github.com/get-convex/agent/blob/main/README.md#2025-04-20_snippet_19\n\nLANGUAGE: typescript\nCODE:\n```\nexport const supportAgentWorkflow = workflow.define({\n  args: { prompt: v.string(), userId: v.string(), threadId: v.string() },\n+ handler: async (step, { prompt, userId, threadId }): Promise<string> => {\n    // ...\n  },\n});\n\n// And regular functions too:\nexport const myFunction = action({\n  args: { prompt: v.string() },\n+ handler: async (ctx, { prompt }): Promise<string> => {\n    // ...\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Installing Convex Agent Package\nDESCRIPTION: NPM installation command for the Convex agent package.\nSOURCE: https://github.com/get-convex/agent/blob/main/README.md#2025-04-20_snippet_18\n\nLANGUAGE: shell\nCODE:\n```\nnpm i @convex-dev/agent\n```\n\n----------------------------------------\n\nTITLE: Running Convex Agent Project Locally\nDESCRIPTION: Steps to set up and run the Convex Agent project in a local development environment. This includes installing dependencies and starting the Convex development server.\nSOURCE: https://github.com/get-convex/agent/blob/main/CONTRIBUTING.md#2025-04-20_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm i\ncd example\nnpm i\nnpx convex dev\n```\n\n----------------------------------------\n\nTITLE: Testing Convex Agent Project\nDESCRIPTION: Commands for running various tests on the Convex Agent project. This includes building the project, type checking, running tests, and linting the example directory.\nSOURCE: https://github.com/get-convex/agent/blob/main/CONTRIBUTING.md#2025-04-20_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nrm -rf dist/ && npm run build\nnpm run typecheck\nnpm run test\ncd example\nnpm run lint\ncd ..\n```\n\n----------------------------------------\n\nTITLE: Building One-off Package for Convex Agent\nDESCRIPTION: Commands to build a one-off package of the Convex Agent project. This involves cleaning the dist directory, rebuilding the project, and creating a package file.\nSOURCE: https://github.com/get-convex/agent/blob/main/CONTRIBUTING.md#2025-04-20_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nrm -rf dist/ && npm run build\nnpm pack\n```\n\n----------------------------------------\n\nTITLE: Deploying New Version of Convex Agent\nDESCRIPTION: Steps to deploy a new version of the Convex Agent project. This includes updating the version, running a dry-run publish, performing the actual publish, and pushing tags to the repository.\nSOURCE: https://github.com/get-convex/agent/blob/main/CONTRIBUTING.md#2025-04-20_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\n# this will change the version and commit it (if you run it in the root directory)\nnpm version patch\nnpm publish --dry-run\n# sanity check files being included\nnpm publish\ngit push --tags\n```\n\n----------------------------------------\n\nTITLE: Deploying Alpha Release of Convex Agent\nDESCRIPTION: Commands for deploying an alpha release of the Convex Agent project. This involves creating a prerelease version and publishing it with the alpha tag.\nSOURCE: https://github.com/get-convex/agent/blob/main/CONTRIBUTING.md#2025-04-20_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\nnpm version prerelease --preid alpha\nnpm publish --tag alpha\n```\n\n----------------------------------------\n\nTITLE: Example App README Documentation\nDESCRIPTION: A markdown description explaining the purpose of the example app for component development, testing and documentation.\nSOURCE: https://github.com/get-convex/agent/blob/main/example/README.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Example app\\n\\nComponents need an app that uses them in order to run codegen. An example app is also useful\\nfor testing and documentation.\n```"
  }
]